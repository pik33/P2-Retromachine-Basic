00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic029.p2asm"
00000                 | con
00000                 | 	_clkfreq = 337000000
00000                 | 	_clkmode = 21844219
00000                 | 	HEAPSIZE = 192000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 29
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 337000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $14d50fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 A8 A6 80 FF 
00420 007 00 F0 65 FD | 	hubset	##21844216
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a A8 A6 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##21844219
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 1B 0B 8A FF 
00440 00f 14 80 6C FC | 	wrlong	##337000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 84 AA A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 33 67 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 32 65 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 33 65 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 66 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 64 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 32 65 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 33 67 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 90 95 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed F4 92 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 98 83 06 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 D4 85 03 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 38 81 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 38 EE 02 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 14 8D 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 AC 1F 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 04 08 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 5C 47 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa 14 45 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb EC 56 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc D4 77 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' 
00804                 | ' 
00804                 | ' '----------------------------------- this is the end of the main loop ------------------------------------------------------------------
00804                 | ' 
00804                 | ' sub housekeeper
00804                 | _housekeeper
00804                 | ' 
00804                 | ' do
00804                 | LR__0001
00804                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
00804     49 E4 05 F1 | 	add	objptr, #73
00808                 | LR__0002
00808     F2 12 02 FB | 	rdlong	arg01, objptr
0080c     01 12 0E F2 | 	cmp	arg01, #1 wz
00810     F4 FF 9F 5D |  if_ne	jmp	#LR__0002
00814     79 00 00 FF 
00818     3B E5 05 F1 | 	add	objptr, ##62267
0081c     F2 12 02 FB | 	rdlong	arg01, objptr
00820     01 12 06 F1 | 	add	arg01, #1
00824     F2 12 62 FC | 	wrlong	arg01, objptr
00828     79 00 00 FF 
0082c     84 E5 85 F1 | 	sub	objptr, ##62340
00830     80 00 B0 FD | 	call	#_gethdi
00834     05 12 06 F6 | 	mov	arg01, #5
00838     D0 E5 B1 FD | 	call	#__system___waitms
0083c     79 00 00 FF 
00840     84 E5 05 F1 | 	add	objptr, ##62340
00844     F2 12 02 FB | 	rdlong	arg01, objptr
00848     01 12 06 F1 | 	add	arg01, #1
0084c     F2 12 62 FC | 	wrlong	arg01, objptr
00850     79 00 00 FF 
00854     84 E5 85 F1 | 	sub	objptr, ##62340
00858     58 00 B0 FD | 	call	#_gethdi
0085c     05 12 06 F6 | 	mov	arg01, #5
00860     A8 E5 B1 FD | 	call	#__system___waitms
00864     79 00 00 FF 
00868     84 E5 05 F1 | 	add	objptr, ##62340
0086c     F2 12 02 FB | 	rdlong	arg01, objptr
00870     01 12 06 F1 | 	add	arg01, #1
00874     F2 12 62 FC | 	wrlong	arg01, objptr
00878     79 00 00 FF 
0087c     84 E5 85 F1 | 	sub	objptr, ##62340
00880     30 00 B0 FD | 	call	#_gethdi
00884     05 12 06 F6 | 	mov	arg01, #5
00888     80 E5 B1 FD | 	call	#__system___waitms
0088c     79 00 00 FF 
00890     84 E5 05 F1 | 	add	objptr, ##62340
00894     F2 12 02 FB | 	rdlong	arg01, objptr
00898     01 12 06 F1 | 	add	arg01, #1
0089c     F2 12 62 FC | 	wrlong	arg01, objptr
008a0     79 00 00 FF 
008a4     84 E5 85 F1 | 	sub	objptr, ##62340
008a8     08 00 B0 FD | 	call	#_gethdi
008ac     54 FF 9F FD | 	jmp	#LR__0001
008b0                 | _housekeeper_ret
008b0     2D 00 64 FD | 	ret
008b4                 | 
008b4                 | ' 
008b4                 | ' 
008b4                 | ' sub gethdi
008b4                 | _gethdi
008b4     03 4A 05 F6 | 	mov	COUNT_, #3
008b8     A8 00 A0 FD | 	call	#pushregs_
008bc                 | '   x := mouse_xacc
008bc     14 00 00 FF 
008c0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
008c4     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
008c8                 | '   y := mouse_yacc
008c8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008cc     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
008d0     79 00 00 FF 
008d4     FC E4 05 F1 | 	add	objptr, ##62204
008d8     F2 14 62 FC | 	wrlong	arg02, objptr
008dc     04 E4 05 F1 | 	add	objptr, #4
008e0     F2 12 62 FC | 	wrlong	arg01, objptr
008e4                 | '   x := 0
008e4                 | '   y := mouse_zacc
008e4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008e8     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
008ec     08 E4 05 F1 | 	add	objptr, #8
008f0     F2 FA 61 FC | 	wrlong	result1, objptr
008f4                 | '   return mouse_bstate&7
008f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008f8     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
008fc     14 00 00 FF 
00900     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
00904     07 FA 05 F5 | 	and	result1, #7
00908     04 E4 85 F1 | 	sub	objptr, #4
0090c     F2 FA 61 FC | 	wrlong	result1, objptr
00910     79 00 00 FF 
00914     04 E5 85 F1 | 	sub	objptr, ##62212
00918     00 1E 06 F6 | 	mov	local01, #0
0091c                 | ' 
0091c                 | '   mousex,mousey=kbm.mouse_xy()
0091c                 | '   dummy,mousew=kbm.mouse_scroll()
0091c                 | '   mousek=kbm.mouse_buttons()
0091c                 | '   
0091c                 | '   i=0:
0091c                 | '   for j=0 to 6
0091c     00 20 06 F6 | 	mov	local02, #0
00920                 | LR__0010
00920                 | '     if kbm.hidpad_id(j)>0 then
00920     10 13 02 F6 | 	mov	arg01, local02
00924     F4 DA B1 FD | 	call	#_usbnew_spin2_hidpad_id
00928     01 FA 55 F2 | 	cmps	result1, #1 wc
0092c     8C 00 90 CD |  if_b	jmp	#LR__0011
00930     10 13 02 F6 | 	mov	arg01, local02
00934     00 14 06 F6 | 	mov	arg02, #0
00938     44 DB B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0093c     FD 22 02 F6 | 	mov	local03, result1
00940     10 13 02 F6 | 	mov	arg01, local02
00944     01 14 06 F6 | 	mov	arg02, #1
00948     34 DB B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0094c     60 00 00 FF 
00950     00 22 06 F1 | 	add	local03, ##49152
00954     0F 22 46 F0 | 	shr	local03, #15
00958     01 14 06 F6 | 	mov	arg02, #1
0095c     11 15 02 F1 | 	add	arg02, local03
00960     60 00 00 FF 
00964     00 FA 05 F1 | 	add	result1, ##49152
00968     0F FA 45 F0 | 	shr	result1, #15
0096c     01 12 06 F6 | 	mov	arg01, #1
00970     FD 12 02 F1 | 	add	arg01, result1
00974     0F 23 02 F6 | 	mov	local03, local01
00978     02 22 66 F0 | 	shl	local03, #2
0097c     79 00 00 FF 
00980     0C E5 05 F1 | 	add	objptr, ##62220
00984     F2 22 02 F1 | 	add	local03, objptr
00988     02 12 66 F0 | 	shl	arg01, #2
0098c     09 15 02 F1 | 	add	arg02, arg01
00990     11 15 62 FC | 	wrlong	arg02, local03
00994     0F 23 02 F6 | 	mov	local03, local01
00998     02 22 66 F0 | 	shl	local03, #2
0099c     1C E4 05 F1 | 	add	objptr, #28
009a0     F2 22 02 F1 | 	add	local03, objptr
009a4     10 13 02 F6 | 	mov	arg01, local02
009a8     79 00 00 FF 
009ac     28 E5 85 F1 | 	sub	objptr, ##62248
009b0     98 DA B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
009b4     11 FB 61 FC | 	wrlong	result1, local03
009b8     01 1E 06 F1 | 	add	local01, #1
009bc                 | LR__0011
009bc     01 20 06 F1 | 	add	local02, #1
009c0     07 20 16 F2 | 	cmp	local02, #7 wc
009c4     58 FF 9F CD |  if_b	jmp	#LR__0010
009c8     97 22 48 FB | 	callpa	#(@LR__0013-@LR__0012)>>2,fcache_load_ptr_
009cc                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
009cc                 | LR__0012
009cc     07 1E 16 F2 | 	cmp	local01, #7 wc
009d0     3C 00 90 3D |  if_ae	jmp	#LR__0014
009d4     0F 23 02 F6 | 	mov	local03, local01
009d8     02 22 66 F0 | 	shl	local03, #2
009dc     79 00 00 FF 
009e0     0C E5 05 F1 | 	add	objptr, ##62220
009e4     F2 22 02 F1 | 	add	local03, objptr
009e8     11 01 68 FC | 	wrlong	#0, local03
009ec     0F 23 02 F6 | 	mov	local03, local01
009f0     02 22 66 F0 | 	shl	local03, #2
009f4     1C E4 05 F1 | 	add	objptr, #28
009f8     F2 22 02 F1 | 	add	local03, objptr
009fc     11 01 68 FC | 	wrlong	#0, local03
00a00     01 1E 06 F1 | 	add	local01, #1
00a04     79 00 00 FF 
00a08     28 E5 85 F1 | 	sub	objptr, ##62248
00a0c     BC FF 9F FD | 	jmp	#LR__0012
00a10                 | LR__0013
00a10                 | LR__0014
00a10     A7 F0 03 F6 | 	mov	ptra, fp
00a14     B2 00 A0 FD | 	call	#popregs_
00a18                 | _gethdi_ret
00a18     2D 00 64 FD | 	ret
00a1c                 | 
00a1c                 | ' 
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' '----------------------------------- The line interpreter/tokenizer --------------------------------------------------------------------
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' 
00a1c                 | ' 
00a1c                 | ' 
00a1c                 | ' sub interpret
00a1c                 | _interpret
00a1c     23 4A 05 F6 | 	mov	COUNT_, #35
00a20     A8 00 A0 FD | 	call	#pushregs_
00a24     01 00 00 FF 
00a28     50 F0 07 F1 | 	add	ptra, ##592
00a2c     57 00 00 FF 
00a30     1C E4 05 F1 | 	add	objptr, ##44572
00a34     F2 12 02 FB | 	rdlong	arg01, objptr
00a38     57 00 00 FF 
00a3c     1C E4 85 F1 | 	sub	objptr, ##44572
00a40     AC 05 B2 FD | 	call	#__system__RTrim_S
00a44     FD 12 02 F6 | 	mov	arg01, result1
00a48     E4 04 B2 FD | 	call	#__system__LTrim_S
00a4c     57 00 00 FF 
00a50     20 E4 05 F1 | 	add	objptr, ##44576
00a54     F2 FA 61 FC | 	wrlong	result1, objptr
00a58     04 E4 05 F1 | 	add	objptr, #4
00a5c     FF FF FF FF 
00a60     F2 FE 6B FC | 	wrlong	##-1, objptr
00a64     22 00 00 FF 
00a68     7C E5 05 F1 | 	add	objptr, ##17788
00a6c     F2 00 68 FC | 	wrlong	#0, objptr
00a70     0F 00 00 FF 
00a74     24 E5 85 F1 | 	sub	objptr, ##7972
00a78     F2 00 68 FC | 	wrlong	#0, objptr
00a7c     6A 00 00 FF 
00a80     7C E4 85 F1 | 	sub	objptr, ##54396
00a84     00 1E 06 F6 | 	mov	local01, #0
00a88                 | LR__0020
00a88                 | ' 
00a88                 | ' ' ---------------------------------------------------  Pass 1: Split the line to parts, detect and concatenate strings
00a88                 | ' 
00a88                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
00a88                 | ' 
00a88                 | ' 108 for i=0 to 125: separators(i)=0 :next i
00a88     00 20 06 F6 | 	mov	local02, #0
00a8c     20 4E 05 F1 | 	add	fp, #32
00a90     97 0E 48 FB | 	callpa	#(@LR__0022-@LR__0021)>>2,fcache_load_ptr_
00a94                 | LR__0021
00a94     10 23 02 F6 | 	mov	local03, local02
00a98     02 22 66 F0 | 	shl	local03, #2
00a9c     A7 22 02 F1 | 	add	local03, fp
00aa0     11 01 68 FC | 	wrlong	#0, local03
00aa4     01 20 06 F1 | 	add	local02, #1
00aa8     7E 20 56 F2 | 	cmps	local02, #126 wc
00aac     E4 FF 9F CD |  if_b	jmp	#LR__0021
00ab0                 | LR__0022
00ab0     20 4E 85 F1 | 	sub	fp, #32
00ab4                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
00ab4     00 20 06 F6 | 	mov	local02, #0
00ab8     55 00 00 FF 
00abc     0C E4 05 F1 | 	add	objptr, ##43532
00ac0     97 20 48 FB | 	callpa	#(@LR__0024-@LR__0023)>>2,fcache_load_ptr_
00ac4                 | LR__0023
00ac4     10 25 02 F6 | 	mov	local04, local02
00ac8     03 24 66 F0 | 	shl	local04, #3
00acc     F2 24 02 F1 | 	add	local04, objptr
00ad0     70 01 00 FF 
00ad4     5E 17 06 F6 | 	mov	arg03, ##@LR__4777
00ad8     12 17 62 FC | 	wrlong	arg03, local04
00adc     10 25 02 F6 | 	mov	local04, local02
00ae0     03 24 66 F0 | 	shl	local04, #3
00ae4     F2 26 02 F6 | 	mov	local05, objptr
00ae8     F2 24 02 F1 | 	add	local04, objptr
00aec     00 28 06 F6 | 	mov	local06, #0
00af0     04 24 06 F1 | 	add	local04, #4
00af4     12 01 68 FC | 	wrlong	#0, local04
00af8     01 20 06 F1 | 	add	local02, #1
00afc     7E 20 56 F2 | 	cmps	local02, #126 wc
00b00     C0 FF 9F CD |  if_b	jmp	#LR__0023
00b04                 | LR__0024
00b04     02 00 00 FF 
00b08     10 E4 05 F1 | 	add	objptr, ##1040
00b0c     F2 12 02 FB | 	rdlong	arg01, objptr
00b10     57 00 00 FF 
00b14     1C E4 85 F1 | 	sub	objptr, ##44572
00b18     D4 04 B2 FD | 	call	#__system__RTrim_S
00b1c     FD 12 02 F6 | 	mov	arg01, result1
00b20     0C 04 B2 FD | 	call	#__system__LTrim_S
00b24     57 00 00 FF 
00b28     1C E4 05 F1 | 	add	objptr, ##44572
00b2c     F2 FA 61 FC | 	wrlong	result1, objptr
00b30     70 01 00 FF 
00b34     5F 25 06 F6 | 	mov	local04, ##@LR__4778
00b38     22 00 00 FF 
00b3c     C4 E5 05 F1 | 	add	objptr, ##17860
00b40     F2 24 62 FC | 	wrlong	local04, objptr
00b44     22 00 00 FF 
00b48     C4 E5 85 F1 | 	sub	objptr, ##17860
00b4c     F2 12 02 FB | 	rdlong	arg01, objptr
00b50     57 00 00 FF 
00b54     1C E4 85 F1 | 	sub	objptr, ##44572
00b58     09 2B 02 F6 | 	mov	local07, arg01
00b5c     97 06 48 FB | 	callpa	#(@LR__0026-@LR__0025)>>2,fcache_load_ptr_
00b60                 | LR__0025
00b60     15 FB C9 FA | 	rdbyte	result1, local07 wz
00b64     01 2A 06 51 |  if_ne	add	local07, #1
00b68     F4 FF 9F 5D |  if_ne	jmp	#LR__0025
00b6c                 | LR__0026
00b6c     09 2B 8A F1 | 	sub	local07, arg01 wz
00b70     79 00 00 FF 
00b74     E4 E5 05 F1 | 	add	objptr, ##62436
00b78     F2 2A 62 FC | 	wrlong	local07, objptr
00b7c                 | ' if l=0 then goto 101
00b7c     79 00 00 FF 
00b80     E4 E5 85 F1 | 	sub	objptr, ##62436
00b84     B8 27 90 AD |  if_e	jmp	#LR__0149
00b88     79 00 00 FF 
00b8c     E8 E5 05 F1 | 	add	objptr, ##62440
00b90     F2 00 68 FC | 	wrlong	#0, objptr
00b94                 | ' ' before we split the line, we have to find colons that are inside a string,,,,
00b94                 | ' for i=1 to len(line$)
00b94     01 20 06 F6 | 	mov	local02, #1
00b98     22 00 00 FF 
00b9c     CC E5 85 F1 | 	sub	objptr, ##17868
00ba0     F2 12 02 FB | 	rdlong	arg01, objptr
00ba4     57 00 00 FF 
00ba8     1C E4 85 F1 | 	sub	objptr, ##44572
00bac     09 2B 02 F6 | 	mov	local07, arg01
00bb0     97 06 48 FB | 	callpa	#(@LR__0028-@LR__0027)>>2,fcache_load_ptr_
00bb4                 | LR__0027
00bb4     15 FB C9 FA | 	rdbyte	result1, local07 wz
00bb8     01 2A 06 51 |  if_ne	add	local07, #1
00bbc     F4 FF 9F 5D |  if_ne	jmp	#LR__0027
00bc0                 | LR__0028
00bc0     09 2B 82 F1 | 	sub	local07, arg01
00bc4     15 2D 02 F6 | 	mov	local08, local07
00bc8     01 2C 06 F1 | 	add	local08, #1
00bcc                 | LR__0029
00bcc     16 21 52 F2 | 	cmps	local02, local08 wc
00bd0     00 01 90 3D |  if_ae	jmp	#LR__0032
00bd4                 | ' 
00bd4                 | '   if mid$(line$,i,1)="""" andalso d=0 then 
00bd4     57 00 00 FF 
00bd8     1C E4 05 F1 | 	add	objptr, ##44572
00bdc     F2 12 02 FB | 	rdlong	arg01, objptr
00be0     57 00 00 FF 
00be4     1C E4 85 F1 | 	sub	objptr, ##44572
00be8     10 15 02 F6 | 	mov	arg02, local02
00bec     01 16 06 F6 | 	mov	arg03, #1
00bf0     84 00 B2 FD | 	call	#__system__Mid_S
00bf4     FD 12 02 F6 | 	mov	arg01, result1
00bf8     70 01 00 FF 
00bfc     60 15 06 F6 | 	mov	arg02, ##@LR__4779
00c00     3C DF B1 FD | 	call	#__system___string_cmp
00c04     00 FA 0D F2 | 	cmp	result1, #0 wz
00c08     2C 00 90 5D |  if_ne	jmp	#LR__0030
00c0c     79 00 00 FF 
00c10     E8 E5 05 F1 | 	add	objptr, ##62440
00c14     F2 22 0A FB | 	rdlong	local03, objptr wz
00c18     79 00 00 FF 
00c1c     E8 E5 85 F1 | 	sub	objptr, ##62440
00c20     79 00 00 AF 
00c24     E8 E5 05 A1 |  if_e	add	objptr, ##62440
00c28     F2 02 68 AC |  if_e	wrlong	#1, objptr
00c2c     79 00 00 AF 
00c30     E8 E5 85 A1 |  if_e	sub	objptr, ##62440
00c34     60 00 90 AD |  if_e	jmp	#LR__0031
00c38                 | LR__0030
00c38     57 00 00 FF 
00c3c     1C E4 05 F1 | 	add	objptr, ##44572
00c40     F2 12 02 FB | 	rdlong	arg01, objptr
00c44     57 00 00 FF 
00c48     1C E4 85 F1 | 	sub	objptr, ##44572
00c4c     10 15 02 F6 | 	mov	arg02, local02
00c50     01 16 06 F6 | 	mov	arg03, #1
00c54     20 00 B2 FD | 	call	#__system__Mid_S
00c58     FD 12 02 F6 | 	mov	arg01, result1
00c5c     70 01 00 FF 
00c60     62 15 06 F6 | 	mov	arg02, ##@LR__4780
00c64     D8 DE B1 FD | 	call	#__system___string_cmp
00c68     00 FA 0D F2 | 	cmp	result1, #0 wz
00c6c     79 00 00 AF 
00c70     E8 E5 05 A1 |  if_e	add	objptr, ##62440
00c74     F2 22 02 AB |  if_e	rdlong	local03, objptr
00c78     79 00 00 AF 
00c7c     E8 E5 85 A1 |  if_e	sub	objptr, ##62440
00c80     01 22 0E A2 |  if_e	cmp	local03, #1 wz
00c84     79 00 00 AF 
00c88     E8 E5 05 A1 |  if_e	add	objptr, ##62440
00c8c     F2 00 68 AC |  if_e	wrlong	#0, objptr
00c90     79 00 00 AF 
00c94     E8 E5 85 A1 |  if_e	sub	objptr, ##62440
00c98                 | LR__0031
00c98     10 25 02 F6 | 	mov	local04, local02
00c9c     03 24 66 F0 | 	shl	local04, #3
00ca0     55 00 00 FF 
00ca4     0C E4 05 F1 | 	add	objptr, ##43532
00ca8     F2 26 02 F6 | 	mov	local05, objptr
00cac     F2 24 02 F1 | 	add	local04, objptr
00cb0     24 00 00 FF 
00cb4     DC E5 05 F1 | 	add	objptr, ##18908
00cb8     F2 28 02 FB | 	rdlong	local06, objptr
00cbc     79 00 00 FF 
00cc0     E8 E5 85 F1 | 	sub	objptr, ##62440
00cc4     04 24 06 F1 | 	add	local04, #4
00cc8     12 29 62 FC | 	wrlong	local06, local04
00ccc     01 20 06 F1 | 	add	local02, #1
00cd0     F8 FE 9F FD | 	jmp	#LR__0029
00cd4                 | LR__0032
00cd4     01 20 06 F6 | 	mov	local02, #1
00cd8                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop
00cd8                 | LR__0033
00cd8     57 00 00 FF 
00cdc     1C E4 05 F1 | 	add	objptr, ##44572
00ce0     F2 12 02 FB | 	rdlong	arg01, objptr
00ce4     57 00 00 FF 
00ce8     1C E4 85 F1 | 	sub	objptr, ##44572
00cec     10 15 02 F6 | 	mov	arg02, local02
00cf0     01 16 06 F6 | 	mov	arg03, #1
00cf4     80 FF B1 FD | 	call	#__system__Mid_S
00cf8     FD 12 02 F6 | 	mov	arg01, result1
00cfc     70 01 00 FF 
00d00     64 2F 06 F6 | 	mov	local09, ##@LR__4781
00d04     17 15 02 F6 | 	mov	arg02, local09
00d08     34 DE B1 FD | 	call	#__system___string_cmp
00d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
00d10     34 00 90 5D |  if_ne	jmp	#LR__0034
00d14     10 27 02 F6 | 	mov	local05, local02
00d18     03 26 66 F0 | 	shl	local05, #3
00d1c     55 00 00 FF 
00d20     0C E4 05 F1 | 	add	objptr, ##43532
00d24     F2 28 02 F6 | 	mov	local06, objptr
00d28     F2 26 02 F1 | 	add	local05, objptr
00d2c     04 26 06 F1 | 	add	local05, #4
00d30     13 31 02 FB | 	rdlong	local10, local05
00d34     04 26 86 F1 | 	sub	local05, #4
00d38     18 33 0A F6 | 	mov	local11, local10 wz
00d3c     55 00 00 FF 
00d40     0C E4 85 F1 | 	sub	objptr, ##43532
00d44     24 00 90 AD |  if_e	jmp	#LR__0035
00d48                 | LR__0034
00d48     79 00 00 FF 
00d4c     E4 E5 05 F1 | 	add	objptr, ##62436
00d50     F2 34 02 FB | 	rdlong	local12, objptr
00d54     79 00 00 FF 
00d58     E4 E5 85 F1 | 	sub	objptr, ##62436
00d5c     1A 37 02 F6 | 	mov	local13, local12
00d60     1B 21 52 F2 | 	cmps	local02, local13 wc
00d64     01 20 06 C1 |  if_b	add	local02, #1
00d68     6C FF 9F CD |  if_b	jmp	#LR__0033
00d6c                 | LR__0035
00d6c                 | ' 
00d6c                 | ' 'let d=instr(1,line$,":"): if d>0 andalso d<len(line$) andalso lparts(d).token=0  then let rest$=trim$(right$(line$,len(line$)-d)):line$=trim$(left$(line$,d-1)) else rest$=""  
00d6c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 
00d6c     79 00 00 FF 
00d70     E4 E5 05 F1 | 	add	objptr, ##62436
00d74     F2 24 02 FB | 	rdlong	local04, objptr
00d78     79 00 00 FF 
00d7c     E4 E5 85 F1 | 	sub	objptr, ##62436
00d80     12 21 52 F2 | 	cmps	local02, local04 wc
00d84     A4 00 90 3D |  if_ae	jmp	#LR__0038
00d88     57 00 00 FF 
00d8c     1C E4 05 F1 | 	add	objptr, ##44572
00d90     F2 28 02 FB | 	rdlong	local06, objptr
00d94     57 00 00 FF 
00d98     1C E4 85 F1 | 	sub	objptr, ##44572
00d9c     14 13 02 F6 | 	mov	arg01, local06
00da0     09 2B 02 F6 | 	mov	local07, arg01
00da4     97 06 48 FB | 	callpa	#(@LR__0037-@LR__0036)>>2,fcache_load_ptr_
00da8                 | LR__0036
00da8     15 FB C9 FA | 	rdbyte	result1, local07 wz
00dac     01 2A 06 51 |  if_ne	add	local07, #1
00db0     F4 FF 9F 5D |  if_ne	jmp	#LR__0036
00db4                 | LR__0037
00db4     09 2B 82 F1 | 	sub	local07, arg01
00db8     15 15 02 F6 | 	mov	arg02, local07
00dbc     10 15 82 F1 | 	sub	arg02, local02
00dc0     14 13 02 F6 | 	mov	arg01, local06
00dc4     20 FE B1 FD | 	call	#__system__Right_S
00dc8     FD 12 02 F6 | 	mov	arg01, result1
00dcc     20 02 B2 FD | 	call	#__system__RTrim_S
00dd0     FD 12 02 F6 | 	mov	arg01, result1
00dd4     58 01 B2 FD | 	call	#__system__LTrim_S
00dd8     79 00 00 FF 
00ddc     EC E5 05 F1 | 	add	objptr, ##62444
00de0     F2 FA 61 FC | 	wrlong	result1, objptr
00de4     22 00 00 FF 
00de8     D0 E5 85 F1 | 	sub	objptr, ##17872
00dec     F2 12 02 FB | 	rdlong	arg01, objptr
00df0     57 00 00 FF 
00df4     1C E4 85 F1 | 	sub	objptr, ##44572
00df8     01 20 86 F1 | 	sub	local02, #1
00dfc     10 15 02 F6 | 	mov	arg02, local02
00e00     5C FD B1 FD | 	call	#__system__Left_S
00e04     FD 12 02 F6 | 	mov	arg01, result1
00e08     E4 01 B2 FD | 	call	#__system__RTrim_S
00e0c     FD 12 02 F6 | 	mov	arg01, result1
00e10     1C 01 B2 FD | 	call	#__system__LTrim_S
00e14     57 00 00 FF 
00e18     1C E4 05 F1 | 	add	objptr, ##44572
00e1c     F2 FA 61 FC | 	wrlong	result1, objptr
00e20     57 00 00 FF 
00e24     1C E4 85 F1 | 	sub	objptr, ##44572
00e28     1C 00 90 FD | 	jmp	#LR__0039
00e2c                 | LR__0038
00e2c     70 01 00 FF 
00e30     66 25 06 F6 | 	mov	local04, ##@LR__4782
00e34     79 00 00 FF 
00e38     EC E5 05 F1 | 	add	objptr, ##62444
00e3c     F2 24 62 FC | 	wrlong	local04, objptr
00e40     79 00 00 FF 
00e44     EC E5 85 F1 | 	sub	objptr, ##62444
00e48                 | LR__0039
00e48                 | ' 'print "line$=";line$
00e48                 | ' 'print "rest$=";rest$
00e48                 | ' 
00e48                 | ' 
00e48                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not last part
00e48     57 00 00 FF 
00e4c     24 E4 05 F1 | 	add	objptr, ##44580
00e50     F2 24 02 FB | 	rdlong	local04, objptr
00e54     57 00 00 FF 
00e58     24 E4 85 F1 | 	sub	objptr, ##44580
00e5c     FF FF 7F FF 
00e60     FF 25 0E F2 | 	cmp	local04, ##-1 wz
00e64     3C 00 90 5D |  if_ne	jmp	#LR__0040
00e68     79 00 00 FF 
00e6c     EC E5 05 F1 | 	add	objptr, ##62444
00e70     F2 12 02 FB | 	rdlong	arg01, objptr
00e74     79 00 00 FF 
00e78     EC E5 85 F1 | 	sub	objptr, ##62444
00e7c     70 01 00 FF 
00e80     67 15 06 F6 | 	mov	arg02, ##@LR__4783
00e84     B8 DC B1 FD | 	call	#__system___string_cmp
00e88     00 FA 0D F2 | 	cmp	result1, #0 wz
00e8c     57 00 00 5F 
00e90     24 E4 05 51 |  if_ne	add	objptr, ##44580
00e94     F2 00 68 5C |  if_ne	wrlong	#0, objptr
00e98     57 00 00 5F 
00e9c     24 E4 85 51 |  if_ne	sub	objptr, ##44580
00ea0     08 01 90 5D |  if_ne	jmp	#LR__0044
00ea4                 | LR__0040
00ea4                 | ' if cont=-1 andalso rest$="" then cont=3 : goto 107		' this is the first AND last part
00ea4     57 00 00 FF 
00ea8     24 E4 05 F1 | 	add	objptr, ##44580
00eac     F2 24 02 FB | 	rdlong	local04, objptr
00eb0     57 00 00 FF 
00eb4     24 E4 85 F1 | 	sub	objptr, ##44580
00eb8     FF FF 7F FF 
00ebc     FF 25 0E F2 | 	cmp	local04, ##-1 wz
00ec0     3C 00 90 5D |  if_ne	jmp	#LR__0041
00ec4     79 00 00 FF 
00ec8     EC E5 05 F1 | 	add	objptr, ##62444
00ecc     F2 12 02 FB | 	rdlong	arg01, objptr
00ed0     79 00 00 FF 
00ed4     EC E5 85 F1 | 	sub	objptr, ##62444
00ed8     70 01 00 FF 
00edc     68 15 06 F6 | 	mov	arg02, ##@LR__4784
00ee0     5C DC B1 FD | 	call	#__system___string_cmp
00ee4     00 FA 0D F2 | 	cmp	result1, #0 wz
00ee8     57 00 00 AF 
00eec     24 E4 05 A1 |  if_e	add	objptr, ##44580
00ef0     F2 06 68 AC |  if_e	wrlong	#3, objptr
00ef4     57 00 00 AF 
00ef8     24 E4 85 A1 |  if_e	sub	objptr, ##44580
00efc     AC 00 90 AD |  if_e	jmp	#LR__0044
00f00                 | LR__0041
00f00                 | ' if cont=4 andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
00f00     57 00 00 FF 
00f04     24 E4 05 F1 | 	add	objptr, ##44580
00f08     F2 24 02 FB | 	rdlong	local04, objptr
00f0c     57 00 00 FF 
00f10     24 E4 85 F1 | 	sub	objptr, ##44580
00f14     04 24 0E F2 | 	cmp	local04, #4 wz
00f18     3C 00 90 5D |  if_ne	jmp	#LR__0042
00f1c     79 00 00 FF 
00f20     EC E5 05 F1 | 	add	objptr, ##62444
00f24     F2 12 02 FB | 	rdlong	arg01, objptr
00f28     79 00 00 FF 
00f2c     EC E5 85 F1 | 	sub	objptr, ##62444
00f30     70 01 00 FF 
00f34     69 15 06 F6 | 	mov	arg02, ##@LR__4785
00f38     04 DC B1 FD | 	call	#__system___string_cmp
00f3c     00 FA 0D F2 | 	cmp	result1, #0 wz
00f40     57 00 00 5F 
00f44     24 E4 05 51 |  if_ne	add	objptr, ##44580
00f48     F2 02 68 5C |  if_ne	wrlong	#1, objptr
00f4c     57 00 00 5F 
00f50     24 E4 85 51 |  if_ne	sub	objptr, ##44580
00f54     54 00 90 5D |  if_ne	jmp	#LR__0044
00f58                 | LR__0042
00f58                 | ' if cont=4 andalso rest$="" then cont=2 :goto 107		' this is the last, and not the first, part
00f58     57 00 00 FF 
00f5c     24 E4 05 F1 | 	add	objptr, ##44580
00f60     F2 24 02 FB | 	rdlong	local04, objptr
00f64     57 00 00 FF 
00f68     24 E4 85 F1 | 	sub	objptr, ##44580
00f6c     04 24 0E F2 | 	cmp	local04, #4 wz
00f70     38 00 90 5D |  if_ne	jmp	#LR__0043
00f74     79 00 00 FF 
00f78     EC E5 05 F1 | 	add	objptr, ##62444
00f7c     F2 12 02 FB | 	rdlong	arg01, objptr
00f80     79 00 00 FF 
00f84     EC E5 85 F1 | 	sub	objptr, ##62444
00f88     70 01 00 FF 
00f8c     6A 15 06 F6 | 	mov	arg02, ##@LR__4786
00f90     AC DB B1 FD | 	call	#__system___string_cmp
00f94     00 FA 0D F2 | 	cmp	result1, #0 wz
00f98     57 00 00 AF 
00f9c     24 E4 05 A1 |  if_e	add	objptr, ##44580
00fa0     F2 04 68 AC |  if_e	wrlong	#2, objptr
00fa4     57 00 00 AF 
00fa8     24 E4 85 A1 |  if_e	sub	objptr, ##44580
00fac                 | LR__0043
00fac                 | LR__0044
00fac     20 4E 05 F1 | 	add	fp, #32
00fb0     A7 00 68 FC | 	wrlong	#0, fp
00fb4     20 4E 85 F1 | 	sub	fp, #32
00fb8     00 20 06 F6 | 	mov	local02, #0
00fbc     01 38 06 F6 | 	mov	local14, #1
00fc0                 | ' 
00fc0                 | ' ' 1b: find separators
00fc0                 | ' 
00fc0                 | ' 107
00fc0                 | ' separators(0)=0
00fc0                 | ' i=0: j=1 : do: i+=1 : let c$=mid$(line$,i,1) 
00fc0                 | LR__0045
00fc0     01 20 06 F1 | 	add	local02, #1
00fc4     57 00 00 FF 
00fc8     1C E4 05 F1 | 	add	objptr, ##44572
00fcc     F2 12 02 FB | 	rdlong	arg01, objptr
00fd0     57 00 00 FF 
00fd4     1C E4 85 F1 | 	sub	objptr, ##44572
00fd8     10 15 02 F6 | 	mov	arg02, local02
00fdc     01 16 06 F6 | 	mov	arg03, #1
00fe0     94 FC B1 FD | 	call	#__system__Mid_S
00fe4     79 00 00 FF 
00fe8     F0 E5 05 F1 | 	add	objptr, ##62448
00fec     F2 FA 61 FC | 	wrlong	result1, objptr
00ff0                 | ' if isseparator(c$) then separators(j)=i: j+=1 
00ff0     FD 12 02 F6 | 	mov	arg01, result1
00ff4     79 00 00 FF 
00ff8     F0 E5 85 F1 | 	sub	objptr, ##62448
00ffc     B8 29 B0 FD | 	call	#_isseparator
01000     00 FA 0D F2 | 	cmp	result1, #0 wz
01004     1C 00 90 AD |  if_e	jmp	#LR__0046
01008     1C 23 02 F6 | 	mov	local03, local14
0100c     02 22 66 F0 | 	shl	local03, #2
01010     20 4E 05 F1 | 	add	fp, #32
01014     A7 22 02 F1 | 	add	local03, fp
01018     11 21 62 FC | 	wrlong	local02, local03
0101c     01 38 06 F1 | 	add	local14, #1
01020     20 4E 85 F1 | 	sub	fp, #32
01024                 | LR__0046
01024     79 00 00 FF 
01028     E4 E5 05 F1 | 	add	objptr, ##62436
0102c     F2 24 02 FB | 	rdlong	local04, objptr
01030     79 00 00 FF 
01034     E4 E5 85 F1 | 	sub	objptr, ##62436
01038     12 21 5A F2 | 	cmps	local02, local04 wcz
0103c     80 FF 9F ED |  if_be	jmp	#LR__0045
01040     1C 23 02 F6 | 	mov	local03, local14
01044     02 22 66 F0 | 	shl	local03, #2
01048     20 4E 05 F1 | 	add	fp, #32
0104c     A7 22 02 F1 | 	add	local03, fp
01050     11 21 62 FC | 	wrlong	local02, local03
01054     00 3A 06 F6 | 	mov	local15, #0
01058                 | ' for i=0 to j-1 
01058     00 20 06 F6 | 	mov	local02, #0
0105c     1C 3D 02 F6 | 	mov	local16, local14
01060     20 4E 85 F1 | 	sub	fp, #32
01064                 | LR__0047
01064     1E 21 52 F2 | 	cmps	local02, local16 wc
01068     88 01 90 3D |  if_ae	jmp	#LR__0051
0106c     10 23 02 F6 | 	mov	local03, local02
01070     02 22 66 F0 | 	shl	local03, #2
01074     20 4E 05 F1 | 	add	fp, #32
01078     A7 22 02 F1 | 	add	local03, fp
0107c     11 27 02 FB | 	rdlong	local05, local03
01080     79 00 00 FF 
01084     F8 E5 05 F1 | 	add	objptr, ##62456
01088     F2 26 62 FC | 	wrlong	local05, objptr
0108c     10 23 02 F6 | 	mov	local03, local02
01090     01 22 06 F1 | 	add	local03, #1
01094     02 22 66 F0 | 	shl	local03, #2
01098     A7 2E 02 F6 | 	mov	local09, fp
0109c     A7 22 02 F1 | 	add	local03, fp
010a0     11 27 02 FB | 	rdlong	local05, local03
010a4     04 E4 05 F1 | 	add	objptr, #4
010a8     F2 26 62 FC | 	wrlong	local05, objptr
010ac                 | '   if p1>0 then let p$=mid$(line$,p1,1):  if   p$<>"" then lparts(k).part$=p$ : k+=1 
010ac     04 E4 85 F1 | 	sub	objptr, #4
010b0     F2 24 02 FB | 	rdlong	local04, objptr
010b4     79 00 00 FF 
010b8     F8 E5 85 F1 | 	sub	objptr, ##62456
010bc     01 24 56 F2 | 	cmps	local04, #1 wc
010c0     20 4E 85 F1 | 	sub	fp, #32
010c4     84 00 90 CD |  if_b	jmp	#LR__0049
010c8     57 00 00 FF 
010cc     1C E4 05 F1 | 	add	objptr, ##44572
010d0     F2 12 02 FB | 	rdlong	arg01, objptr
010d4     22 00 00 FF 
010d8     DC E5 05 F1 | 	add	objptr, ##17884
010dc     F2 14 02 FB | 	rdlong	arg02, objptr
010e0     79 00 00 FF 
010e4     F8 E5 85 F1 | 	sub	objptr, ##62456
010e8     01 16 06 F6 | 	mov	arg03, #1
010ec     88 FB B1 FD | 	call	#__system__Mid_S
010f0     7A 00 00 FF 
010f4     00 E4 05 F1 | 	add	objptr, ##62464
010f8     F2 FA 61 FC | 	wrlong	result1, objptr
010fc     7A 00 00 FF 
01100     00 E4 85 F1 | 	sub	objptr, ##62464
01104     FD 12 02 F6 | 	mov	arg01, result1
01108     70 01 00 FF 
0110c     6B 15 06 F6 | 	mov	arg02, ##@LR__4787
01110     2C DA B1 FD | 	call	#__system___string_cmp
01114     00 FA 0D F2 | 	cmp	result1, #0 wz
01118     30 00 90 AD |  if_e	jmp	#LR__0048
0111c     1D 2F 02 F6 | 	mov	local09, local15
01120     03 2E 66 F0 | 	shl	local09, #3
01124     55 00 00 FF 
01128     0C E4 05 F1 | 	add	objptr, ##43532
0112c     F2 2E 02 F1 | 	add	local09, objptr
01130     24 00 00 FF 
01134     F4 E5 05 F1 | 	add	objptr, ##18932
01138     F2 28 02 FB | 	rdlong	local06, objptr
0113c     7A 00 00 FF 
01140     00 E4 85 F1 | 	sub	objptr, ##62464
01144     17 29 62 FC | 	wrlong	local06, local09
01148     01 3A 06 F1 | 	add	local15, #1
0114c                 | LR__0048
0114c                 | LR__0049
0114c     57 00 00 FF 
01150     1C E4 05 F1 | 	add	objptr, ##44572
01154     F2 12 02 FB | 	rdlong	arg01, objptr
01158     22 00 00 FF 
0115c     DC E5 05 F1 | 	add	objptr, ##17884
01160     F2 14 02 FB | 	rdlong	arg02, objptr
01164     01 14 06 F1 | 	add	arg02, #1
01168     04 E4 05 F1 | 	add	objptr, #4
0116c     F2 16 02 FB | 	rdlong	arg03, objptr
01170     04 E4 85 F1 | 	sub	objptr, #4
01174     F2 30 02 FB | 	rdlong	local10, objptr
01178     79 00 00 FF 
0117c     F8 E5 85 F1 | 	sub	objptr, ##62456
01180     18 33 02 F6 | 	mov	local11, local10
01184     19 17 82 F1 | 	sub	arg03, local11
01188     01 16 86 F1 | 	sub	arg03, #1
0118c     E8 FA B1 FD | 	call	#__system__Mid_S
01190     7A 00 00 FF 
01194     00 E4 05 F1 | 	add	objptr, ##62464
01198     F2 FA 61 FC | 	wrlong	result1, objptr
0119c     7A 00 00 FF 
011a0     00 E4 85 F1 | 	sub	objptr, ##62464
011a4     FD 12 02 F6 | 	mov	arg01, result1
011a8     70 01 00 FF 
011ac     6C 15 06 F6 | 	mov	arg02, ##@LR__4788
011b0     8C D9 B1 FD | 	call	#__system___string_cmp
011b4     00 FA 0D F2 | 	cmp	result1, #0 wz
011b8     30 00 90 AD |  if_e	jmp	#LR__0050
011bc     1D 2F 02 F6 | 	mov	local09, local15
011c0     03 2E 66 F0 | 	shl	local09, #3
011c4     55 00 00 FF 
011c8     0C E4 05 F1 | 	add	objptr, ##43532
011cc     F2 2E 02 F1 | 	add	local09, objptr
011d0     24 00 00 FF 
011d4     F4 E5 05 F1 | 	add	objptr, ##18932
011d8     F2 28 02 FB | 	rdlong	local06, objptr
011dc     7A 00 00 FF 
011e0     00 E4 85 F1 | 	sub	objptr, ##62464
011e4     17 29 62 FC | 	wrlong	local06, local09
011e8     01 3A 06 F1 | 	add	local15, #1
011ec                 | LR__0050
011ec     01 20 06 F1 | 	add	local02, #1
011f0     70 FE 9F FD | 	jmp	#LR__0047
011f4                 | LR__0051
011f4     00 20 06 F6 | 	mov	local02, #0
011f8                 | ' 
011f8                 | ' ' 1d : find strings
011f8                 | ' 
011f8                 | ' i=0
011f8                 | ' do
011f8                 | LR__0052
011f8                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
011f8     10 27 02 F6 | 	mov	local05, local02
011fc     03 26 66 F0 | 	shl	local05, #3
01200     55 00 00 FF 
01204     0C E4 05 F1 | 	add	objptr, ##43532
01208     F2 26 02 F1 | 	add	local05, objptr
0120c     13 13 02 FB | 	rdlong	arg01, local05
01210     70 01 00 FF 
01214     6D 15 06 F6 | 	mov	arg02, ##@LR__4789
01218     55 00 00 FF 
0121c     0C E4 85 F1 | 	sub	objptr, ##43532
01220     1C D9 B1 FD | 	call	#__system___string_cmp
01224     00 FA 0D F2 | 	cmp	result1, #0 wz
01228     01 20 06 51 |  if_ne	add	local02, #1
0122c     50 01 90 5D |  if_ne	jmp	#LR__0057
01230     10 3F 02 F6 | 	mov	local17, local02
01234                 | LR__0053
01234     10 2F 02 F6 | 	mov	local09, local02
01238     01 2E 06 F1 | 	add	local09, #1
0123c     03 2E 66 F0 | 	shl	local09, #3
01240     55 00 00 FF 
01244     0C E4 05 F1 | 	add	objptr, ##43532
01248     F2 2E 02 F1 | 	add	local09, objptr
0124c     17 31 02 FB | 	rdlong	local10, local09
01250     24 00 00 FF 
01254     F4 E5 05 F1 | 	add	objptr, ##18932
01258     F2 30 62 FC | 	wrlong	local10, objptr
0125c     1F 2F 02 F6 | 	mov	local09, local17
01260     03 2E 66 F0 | 	shl	local09, #3
01264     24 00 00 FF 
01268     F4 E5 85 F1 | 	sub	objptr, ##18932
0126c     F2 2E 02 F1 | 	add	local09, objptr
01270     1F 37 02 F6 | 	mov	local13, local17
01274     03 36 66 F0 | 	shl	local13, #3
01278     F2 36 02 F1 | 	add	local13, objptr
0127c     1B 13 02 FB | 	rdlong	arg01, local13
01280     55 00 00 FF 
01284     0C E4 85 F1 | 	sub	objptr, ##43532
01288     18 33 02 F6 | 	mov	local11, local10
0128c     19 15 02 F6 | 	mov	arg02, local11
01290     E0 D8 B1 FD | 	call	#__system___string_concat
01294     17 FB 61 FC | 	wrlong	result1, local09
01298     10 39 02 F6 | 	mov	local14, local02
0129c     01 38 06 F1 | 	add	local14, #1
012a0     1D 41 02 F6 | 	mov	local18, local15
012a4     01 40 06 F1 | 	add	local18, #1
012a8     97 3C 48 FB | 	callpa	#(@LR__0055-@LR__0054)>>2,fcache_load_ptr_
012ac                 | LR__0054
012ac     20 39 52 F2 | 	cmps	local14, local18 wc
012b0     70 00 90 3D |  if_ae	jmp	#LR__0056
012b4     1C 27 02 F6 | 	mov	local05, local14
012b8     01 26 06 F1 | 	add	local05, #1
012bc     03 26 66 F0 | 	shl	local05, #3
012c0     55 00 00 FF 
012c4     0C E4 05 F1 | 	add	objptr, ##43532
012c8     F2 26 02 F1 | 	add	local05, objptr
012cc     13 25 02 FB | 	rdlong	local04, local05
012d0     1C 29 02 F6 | 	mov	local06, local14
012d4     01 28 06 F1 | 	add	local06, #1
012d8     03 28 66 F0 | 	shl	local06, #3
012dc     F2 28 02 F1 | 	add	local06, objptr
012e0     04 28 06 F1 | 	add	local06, #4
012e4     14 23 02 FB | 	rdlong	local03, local06
012e8     1C 29 02 F6 | 	mov	local06, local14
012ec     03 28 66 F0 | 	shl	local06, #3
012f0     F2 32 02 F6 | 	mov	local11, objptr
012f4     F2 28 02 F1 | 	add	local06, objptr
012f8     14 25 62 FC | 	wrlong	local04, local06
012fc     1C 31 02 F6 | 	mov	local10, local14
01300     18 35 02 F6 | 	mov	local12, local10
01304     03 34 66 F0 | 	shl	local12, #3
01308     F2 34 02 F1 | 	add	local12, objptr
0130c     04 34 06 F1 | 	add	local12, #4
01310     1A 23 62 FC | 	wrlong	local03, local12
01314     01 38 06 F1 | 	add	local14, #1
01318     55 00 00 FF 
0131c     0C E4 85 F1 | 	sub	objptr, ##43532
01320     88 FF 9F FD | 	jmp	#LR__0054
01324                 | LR__0055
01324                 | LR__0056
01324     01 3A 86 F1 | 	sub	local15, #1
01328     7A 00 00 FF 
0132c     00 E4 05 F1 | 	add	objptr, ##62464
01330     F2 12 02 FB | 	rdlong	arg01, objptr
01334     7A 00 00 FF 
01338     00 E4 85 F1 | 	sub	objptr, ##62464
0133c     70 01 00 FF 
01340     6F 15 06 F6 | 	mov	arg02, ##@LR__4790
01344     F8 D7 B1 FD | 	call	#__system___string_cmp
01348     00 FA 0D F2 | 	cmp	result1, #0 wz
0134c     1D 21 52 52 |  if_ne	cmps	local02, local15 wc
01350     E0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0053
01354                 | '   if p$<>"""" then k+=1:i+=1
01354     7A 00 00 FF 
01358     00 E4 05 F1 | 	add	objptr, ##62464
0135c     F2 12 02 FB | 	rdlong	arg01, objptr
01360     7A 00 00 FF 
01364     00 E4 85 F1 | 	sub	objptr, ##62464
01368     70 01 00 FF 
0136c     71 15 06 F6 | 	mov	arg02, ##@LR__4791
01370     CC D7 B1 FD | 	call	#__system___string_cmp
01374     00 FA 0D F2 | 	cmp	result1, #0 wz
01378     01 3A 06 51 |  if_ne	add	local15, #1
0137c     01 20 06 51 |  if_ne	add	local02, #1
01380                 | LR__0057
01380     1D 21 52 F2 | 	cmps	local02, local15 wc
01384     70 FE 9F CD |  if_b	jmp	#LR__0052
01388     00 20 06 F6 | 	mov	local02, #0
0138c                 | ' 
0138c                 | ' ' 1e : concatenate strings if "" detected between
0138c                 | '  
0138c                 | ' i=0 : do
0138c                 | LR__0058
0138c                 | '  if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
0138c     10 27 02 F6 | 	mov	local05, local02
01390     03 26 66 F0 | 	shl	local05, #3
01394     55 00 00 FF 
01398     0C E4 05 F1 | 	add	objptr, ##43532
0139c     F2 26 02 F1 | 	add	local05, objptr
013a0     13 13 02 FB | 	rdlong	arg01, local05
013a4     01 14 06 F6 | 	mov	arg02, #1
013a8     55 00 00 FF 
013ac     0C E4 85 F1 | 	sub	objptr, ##43532
013b0     34 F8 B1 FD | 	call	#__system__Right_S
013b4     FD 12 02 F6 | 	mov	arg01, result1
013b8     70 01 00 FF 
013bc     73 15 06 F6 | 	mov	arg02, ##@LR__4792
013c0     7C D7 B1 FD | 	call	#__system___string_cmp
013c4     00 FA 0D F2 | 	cmp	result1, #0 wz
013c8     78 01 90 5D |  if_ne	jmp	#LR__0064
013cc     10 29 02 F6 | 	mov	local06, local02
013d0     01 28 06 F1 | 	add	local06, #1
013d4     03 28 66 F0 | 	shl	local06, #3
013d8     55 00 00 FF 
013dc     0C E4 05 F1 | 	add	objptr, ##43532
013e0     F2 32 02 F6 | 	mov	local11, objptr
013e4     F2 28 02 F1 | 	add	local06, objptr
013e8     14 13 02 FB | 	rdlong	arg01, local06
013ec     01 14 06 F6 | 	mov	arg02, #1
013f0     55 00 00 FF 
013f4     0C E4 85 F1 | 	sub	objptr, ##43532
013f8     64 F7 B1 FD | 	call	#__system__Left_S
013fc     FD 12 02 F6 | 	mov	arg01, result1
01400     70 01 00 FF 
01404     75 15 06 F6 | 	mov	arg02, ##@LR__4793
01408     34 D7 B1 FD | 	call	#__system___string_cmp
0140c     00 FA 0D F2 | 	cmp	result1, #0 wz
01410     30 01 90 5D |  if_ne	jmp	#LR__0064
01414     10 2F 02 F6 | 	mov	local09, local02
01418     03 2E 66 F0 | 	shl	local09, #3
0141c     55 00 00 FF 
01420     0C E4 05 F1 | 	add	objptr, ##43532
01424     F2 2E 02 F1 | 	add	local09, objptr
01428     10 37 02 F6 | 	mov	local13, local02
0142c     03 36 66 F0 | 	shl	local13, #3
01430     F2 36 02 F1 | 	add	local13, objptr
01434     1B 29 02 FB | 	rdlong	local06, local13
01438     10 35 02 F6 | 	mov	local12, local02
0143c     01 34 06 F1 | 	add	local12, #1
01440     03 34 66 F0 | 	shl	local12, #3
01444     F2 34 02 F1 | 	add	local12, objptr
01448     1A 33 02 FB | 	rdlong	local11, local12
0144c     10 43 02 F6 | 	mov	local19, local02
01450     01 42 06 F1 | 	add	local19, #1
01454     21 45 02 F6 | 	mov	local20, local19
01458     03 44 66 F0 | 	shl	local20, #3
0145c     F2 46 02 F6 | 	mov	local21, objptr
01460     F2 44 02 F1 | 	add	local20, objptr
01464     22 13 02 FB | 	rdlong	arg01, local20
01468     55 00 00 FF 
0146c     0C E4 85 F1 | 	sub	objptr, ##43532
01470     09 2B 02 F6 | 	mov	local07, arg01
01474     97 06 48 FB | 	callpa	#(@LR__0060-@LR__0059)>>2,fcache_load_ptr_
01478                 | LR__0059
01478     15 FB C9 FA | 	rdbyte	result1, local07 wz
0147c     01 2A 06 51 |  if_ne	add	local07, #1
01480     F4 FF 9F 5D |  if_ne	jmp	#LR__0059
01484                 | LR__0060
01484     09 2B 82 F1 | 	sub	local07, arg01
01488     15 31 02 F6 | 	mov	local10, local07
0148c     01 30 86 F1 | 	sub	local10, #1
01490     19 13 02 F6 | 	mov	arg01, local11
01494     18 15 02 F6 | 	mov	arg02, local10
01498     4C F7 B1 FD | 	call	#__system__Right_S
0149c     FD 32 02 F6 | 	mov	local11, result1
014a0     14 13 02 F6 | 	mov	arg01, local06
014a4     19 15 02 F6 | 	mov	arg02, local11
014a8     C8 D6 B1 FD | 	call	#__system___string_concat
014ac     17 FB 61 FC | 	wrlong	result1, local09
014b0                 | '    for j=i+1 to k: lparts(j)=lparts(j+1): next j  
014b0     10 39 02 F6 | 	mov	local14, local02
014b4     01 38 06 F1 | 	add	local14, #1
014b8     1D 49 02 F6 | 	mov	local22, local15
014bc     01 48 06 F1 | 	add	local22, #1
014c0     97 3C 48 FB | 	callpa	#(@LR__0062-@LR__0061)>>2,fcache_load_ptr_
014c4                 | LR__0061
014c4     24 39 52 F2 | 	cmps	local14, local22 wc
014c8     70 00 90 3D |  if_ae	jmp	#LR__0063
014cc     1C 27 02 F6 | 	mov	local05, local14
014d0     01 26 06 F1 | 	add	local05, #1
014d4     03 26 66 F0 | 	shl	local05, #3
014d8     55 00 00 FF 
014dc     0C E4 05 F1 | 	add	objptr, ##43532
014e0     F2 26 02 F1 | 	add	local05, objptr
014e4     13 25 02 FB | 	rdlong	local04, local05
014e8     1C 29 02 F6 | 	mov	local06, local14
014ec     01 28 06 F1 | 	add	local06, #1
014f0     03 28 66 F0 | 	shl	local06, #3
014f4     F2 28 02 F1 | 	add	local06, objptr
014f8     04 28 06 F1 | 	add	local06, #4
014fc     14 23 02 FB | 	rdlong	local03, local06
01500     1C 29 02 F6 | 	mov	local06, local14
01504     03 28 66 F0 | 	shl	local06, #3
01508     F2 32 02 F6 | 	mov	local11, objptr
0150c     F2 28 02 F1 | 	add	local06, objptr
01510     14 25 62 FC | 	wrlong	local04, local06
01514     1C 31 02 F6 | 	mov	local10, local14
01518     18 35 02 F6 | 	mov	local12, local10
0151c     03 34 66 F0 | 	shl	local12, #3
01520     F2 34 02 F1 | 	add	local12, objptr
01524     04 34 06 F1 | 	add	local12, #4
01528     1A 23 62 FC | 	wrlong	local03, local12
0152c     01 38 06 F1 | 	add	local14, #1
01530     55 00 00 FF 
01534     0C E4 85 F1 | 	sub	objptr, ##43532
01538     88 FF 9F FD | 	jmp	#LR__0061
0153c                 | LR__0062
0153c                 | LR__0063
0153c     01 20 86 F1 | 	sub	local02, #1
01540     01 3A 86 F1 | 	sub	local15, #1
01544                 | LR__0064
01544     01 20 06 F1 | 	add	local02, #1
01548     1D 21 52 F2 | 	cmps	local02, local15 wc
0154c     3C FE 9F CD |  if_b	jmp	#LR__0058
01550     00 20 06 F6 | 	mov	local02, #0
01554                 | '  
01554                 | ' ' 1e2: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
01554                 | '  
01554                 | ' i=0 : do
01554                 | LR__0065
01554     10 2F 02 F6 | 	mov	local09, local02
01558     03 2E 66 F0 | 	shl	local09, #3
0155c     55 00 00 FF 
01560     0C E4 05 F1 | 	add	objptr, ##43532
01564     F2 2E 02 F1 | 	add	local09, objptr
01568     17 29 02 FB | 	rdlong	local06, local09
0156c     24 00 00 FF 
01570     FC E5 05 F1 | 	add	objptr, ##18940
01574     F2 28 62 FC | 	wrlong	local06, objptr
01578     10 2F 02 F6 | 	mov	local09, local02
0157c     01 2E 06 F1 | 	add	local09, #1
01580     03 2E 66 F0 | 	shl	local09, #3
01584     24 00 00 FF 
01588     FC E5 85 F1 | 	sub	objptr, ##18940
0158c     F2 2E 02 F1 | 	add	local09, objptr
01590     17 29 02 FB | 	rdlong	local06, local09
01594     25 00 00 FF 
01598     00 E4 05 F1 | 	add	objptr, ##18944
0159c     F2 28 62 FC | 	wrlong	local06, objptr
015a0                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
015a0     04 E4 85 F1 | 	sub	objptr, #4
015a4     F2 12 02 FB | 	rdlong	arg01, objptr
015a8     7A 00 00 FF 
015ac     08 E4 85 F1 | 	sub	objptr, ##62472
015b0     70 01 00 FF 
015b4     77 15 06 F6 | 	mov	arg02, ##@LR__4794
015b8     84 D5 B1 FD | 	call	#__system___string_cmp
015bc     00 FA 0D F2 | 	cmp	result1, #0 wz
015c0     04 01 90 AD |  if_e	jmp	#LR__0066
015c4     7A 00 00 FF 
015c8     08 E4 05 F1 | 	add	objptr, ##62472
015cc     F2 12 02 FB | 	rdlong	arg01, objptr
015d0     7A 00 00 FF 
015d4     08 E4 85 F1 | 	sub	objptr, ##62472
015d8     70 01 00 FF 
015dc     79 15 06 F6 | 	mov	arg02, ##@LR__4795
015e0     5C D5 B1 FD | 	call	#__system___string_cmp
015e4     FD 22 0A F6 | 	mov	local03, result1 wz
015e8     DC 00 90 AD |  if_e	jmp	#LR__0066
015ec     7A 00 00 FF 
015f0     08 E4 05 F1 | 	add	objptr, ##62472
015f4     F2 12 02 FB | 	rdlong	arg01, objptr
015f8     7A 00 00 FF 
015fc     08 E4 85 F1 | 	sub	objptr, ##62472
01600     70 01 00 FF 
01604     7B 15 06 F6 | 	mov	arg02, ##@LR__4796
01608     34 D5 B1 FD | 	call	#__system___string_cmp
0160c     00 FA 0D F2 | 	cmp	result1, #0 wz
01610     B4 00 90 AD |  if_e	jmp	#LR__0066
01614     7A 00 00 FF 
01618     08 E4 05 F1 | 	add	objptr, ##62472
0161c     F2 12 02 FB | 	rdlong	arg01, objptr
01620     7A 00 00 FF 
01624     08 E4 85 F1 | 	sub	objptr, ##62472
01628     70 01 00 FF 
0162c     7D 33 06 F6 | 	mov	local11, ##@LR__4797
01630     19 15 02 F6 | 	mov	arg02, local11
01634     08 D5 B1 FD | 	call	#__system___string_cmp
01638     00 FA 0D F2 | 	cmp	result1, #0 wz
0163c     88 00 90 AD |  if_e	jmp	#LR__0066
01640     7A 00 00 FF 
01644     08 E4 05 F1 | 	add	objptr, ##62472
01648     F2 12 02 FB | 	rdlong	arg01, objptr
0164c     7A 00 00 FF 
01650     08 E4 85 F1 | 	sub	objptr, ##62472
01654     70 01 00 FF 
01658     7F 31 06 F6 | 	mov	local10, ##@LR__4798
0165c     18 33 02 F6 | 	mov	local11, local10
01660     19 15 02 F6 | 	mov	arg02, local11
01664     D8 D4 B1 FD | 	call	#__system___string_cmp
01668     00 FA 0D F2 | 	cmp	result1, #0 wz
0166c     58 00 90 AD |  if_e	jmp	#LR__0066
01670     7A 00 00 FF 
01674     08 E4 05 F1 | 	add	objptr, ##62472
01678     F2 12 02 FB | 	rdlong	arg01, objptr
0167c     7A 00 00 FF 
01680     08 E4 85 F1 | 	sub	objptr, ##62472
01684     70 01 00 FF 
01688     81 31 06 F6 | 	mov	local10, ##@LR__4799
0168c     18 15 02 F6 | 	mov	arg02, local10
01690     AC D4 B1 FD | 	call	#__system___string_cmp
01694     FD 32 0A F6 | 	mov	local11, result1 wz
01698     2C 00 90 AD |  if_e	jmp	#LR__0066
0169c     7A 00 00 FF 
016a0     08 E4 05 F1 | 	add	objptr, ##62472
016a4     F2 12 02 FB | 	rdlong	arg01, objptr
016a8     7A 00 00 FF 
016ac     08 E4 85 F1 | 	sub	objptr, ##62472
016b0     70 01 00 FF 
016b4     83 37 06 F6 | 	mov	local13, ##@LR__4800
016b8     1B 15 02 F6 | 	mov	arg02, local13
016bc     80 D4 B1 FD | 	call	#__system___string_cmp
016c0     FD 30 0A F6 | 	mov	local10, result1 wz
016c4     30 00 90 5D |  if_ne	jmp	#LR__0067
016c8                 | LR__0066
016c8     7A 00 00 FF 
016cc     0C E4 05 F1 | 	add	objptr, ##62476
016d0     F2 12 02 FB | 	rdlong	arg01, objptr
016d4     7A 00 00 FF 
016d8     0C E4 85 F1 | 	sub	objptr, ##62476
016dc     70 01 00 FF 
016e0     85 4B 06 F6 | 	mov	local23, ##@LR__4801
016e4     25 35 02 F6 | 	mov	local12, local23
016e8     1A 15 02 F6 | 	mov	arg02, local12
016ec     50 D4 B1 FD | 	call	#__system___string_cmp
016f0     FD 36 0A F6 | 	mov	local13, result1 wz
016f4     18 01 90 AD |  if_e	jmp	#LR__0070
016f8                 | LR__0067
016f8     7A 00 00 FF 
016fc     08 E4 05 F1 | 	add	objptr, ##62472
01700     F2 12 02 FB | 	rdlong	arg01, objptr
01704     7A 00 00 FF 
01708     08 E4 85 F1 | 	sub	objptr, ##62472
0170c     70 01 00 FF 
01710     87 4B 06 F6 | 	mov	local23, ##@LR__4802
01714     25 15 02 F6 | 	mov	arg02, local23
01718     24 D4 B1 FD | 	call	#__system___string_cmp
0171c     FD 34 0A F6 | 	mov	local12, result1 wz
01720     30 00 90 5D |  if_ne	jmp	#LR__0068
01724     7A 00 00 FF 
01728     0C E4 05 F1 | 	add	objptr, ##62476
0172c     F2 12 02 FB | 	rdlong	arg01, objptr
01730     7A 00 00 FF 
01734     0C E4 85 F1 | 	sub	objptr, ##62476
01738     70 01 00 FF 
0173c     89 45 06 F6 | 	mov	local20, ##@LR__4803
01740     22 43 02 F6 | 	mov	local19, local20
01744     21 15 02 F6 | 	mov	arg02, local19
01748     F4 D3 B1 FD | 	call	#__system___string_cmp
0174c     FD 4A 0A F6 | 	mov	local23, result1 wz
01750     BC 00 90 AD |  if_e	jmp	#LR__0070
01754                 | LR__0068
01754     7A 00 00 FF 
01758     08 E4 05 F1 | 	add	objptr, ##62472
0175c     F2 12 02 FB | 	rdlong	arg01, objptr
01760     7A 00 00 FF 
01764     08 E4 85 F1 | 	sub	objptr, ##62472
01768     70 01 00 FF 
0176c     8B 45 06 F6 | 	mov	local20, ##@LR__4804
01770     22 15 02 F6 | 	mov	arg02, local20
01774     C8 D3 B1 FD | 	call	#__system___string_cmp
01778     FD 42 0A F6 | 	mov	local19, result1 wz
0177c     30 00 90 5D |  if_ne	jmp	#LR__0069
01780     7A 00 00 FF 
01784     0C E4 05 F1 | 	add	objptr, ##62476
01788     F2 12 02 FB | 	rdlong	arg01, objptr
0178c     7A 00 00 FF 
01790     0C E4 85 F1 | 	sub	objptr, ##62476
01794     70 01 00 FF 
01798     8D 4D 06 F6 | 	mov	local24, ##@LR__4805
0179c     26 47 02 F6 | 	mov	local21, local24
017a0     23 15 02 F6 | 	mov	arg02, local21
017a4     98 D3 B1 FD | 	call	#__system___string_cmp
017a8     FD 44 0A F6 | 	mov	local20, result1 wz
017ac     60 00 90 AD |  if_e	jmp	#LR__0070
017b0                 | LR__0069
017b0     7A 00 00 FF 
017b4     08 E4 05 F1 | 	add	objptr, ##62472
017b8     F2 12 02 FB | 	rdlong	arg01, objptr
017bc     7A 00 00 FF 
017c0     08 E4 85 F1 | 	sub	objptr, ##62472
017c4     70 01 00 FF 
017c8     8F 4F 06 F6 | 	mov	local25, ##@LR__4806
017cc     27 4D 02 F6 | 	mov	local24, local25
017d0     26 15 02 F6 | 	mov	arg02, local24
017d4     68 D3 B1 FD | 	call	#__system___string_cmp
017d8     FD 46 0A F6 | 	mov	local21, result1 wz
017dc     10 01 90 5D |  if_ne	jmp	#LR__0074
017e0     7A 00 00 FF 
017e4     0C E4 05 F1 | 	add	objptr, ##62476
017e8     F2 12 02 FB | 	rdlong	arg01, objptr
017ec     7A 00 00 FF 
017f0     0C E4 85 F1 | 	sub	objptr, ##62476
017f4     70 01 00 FF 
017f8     91 51 06 F6 | 	mov	local26, ##@LR__4807
017fc     28 4F 02 F6 | 	mov	local25, local26
01800     27 15 02 F6 | 	mov	arg02, local25
01804     38 D3 B1 FD | 	call	#__system___string_cmp
01808     FD 4C 0A F6 | 	mov	local24, result1 wz
0180c     E0 00 90 5D |  if_ne	jmp	#LR__0074
01810                 | LR__0070
01810     10 2F 02 F6 | 	mov	local09, local02
01814     03 2E 66 F0 | 	shl	local09, #3
01818     55 00 00 FF 
0181c     0C E4 05 F1 | 	add	objptr, ##43532
01820     F2 2E 02 F1 | 	add	local09, objptr
01824     24 00 00 FF 
01828     FC E5 05 F1 | 	add	objptr, ##18940
0182c     F2 12 02 FB | 	rdlong	arg01, objptr
01830     04 E4 05 F1 | 	add	objptr, #4
01834     F2 30 02 FB | 	rdlong	local10, objptr
01838     7A 00 00 FF 
0183c     0C E4 85 F1 | 	sub	objptr, ##62476
01840     18 33 02 F6 | 	mov	local11, local10
01844     19 15 02 F6 | 	mov	arg02, local11
01848     28 D3 B1 FD | 	call	#__system___string_concat
0184c     17 FB 61 FC | 	wrlong	result1, local09
01850                 | '     lparts(i).part$=s1$+s2$
01850                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
01850     10 39 02 F6 | 	mov	local14, local02
01854     01 38 06 F1 | 	add	local14, #1
01858     1D 53 02 F6 | 	mov	local27, local15
0185c     01 52 06 F1 | 	add	local27, #1
01860     97 42 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
01864                 | LR__0071
01864     29 39 52 F2 | 	cmps	local14, local27 wc
01868     7C 00 90 3D |  if_ae	jmp	#LR__0073
0186c     1C 27 02 F6 | 	mov	local05, local14
01870     01 26 06 F1 | 	add	local05, #1
01874     03 26 66 F0 | 	shl	local05, #3
01878     55 00 00 FF 
0187c     0C E4 05 F1 | 	add	objptr, ##43532
01880     F2 26 02 F1 | 	add	local05, objptr
01884     13 25 02 FB | 	rdlong	local04, local05
01888     1C 29 02 F6 | 	mov	local06, local14
0188c     01 28 06 F1 | 	add	local06, #1
01890     03 28 66 F0 | 	shl	local06, #3
01894     F2 28 02 F1 | 	add	local06, objptr
01898     04 28 06 F1 | 	add	local06, #4
0189c     14 23 02 FB | 	rdlong	local03, local06
018a0     1C 29 02 F6 | 	mov	local06, local14
018a4     03 28 66 F0 | 	shl	local06, #3
018a8     F2 32 02 F6 | 	mov	local11, objptr
018ac     F2 28 02 F1 | 	add	local06, objptr
018b0     14 25 62 FC | 	wrlong	local04, local06
018b4     1C 31 02 F6 | 	mov	local10, local14
018b8     18 37 02 F6 | 	mov	local13, local10
018bc     1B 35 02 F6 | 	mov	local12, local13
018c0     03 34 66 F0 | 	shl	local12, #3
018c4     F2 4A 02 F6 | 	mov	local23, objptr
018c8     F2 34 02 F1 | 	add	local12, objptr
018cc     04 34 06 F1 | 	add	local12, #4
018d0     1A 23 62 FC | 	wrlong	local03, local12
018d4     04 34 86 F1 | 	sub	local12, #4
018d8     01 38 06 F1 | 	add	local14, #1
018dc     55 00 00 FF 
018e0     0C E4 85 F1 | 	sub	objptr, ##43532
018e4     7C FF 9F FD | 	jmp	#LR__0071
018e8                 | LR__0072
018e8                 | LR__0073
018e8     01 20 86 F1 | 	sub	local02, #1
018ec     01 3A 86 F1 | 	sub	local15, #1
018f0                 | LR__0074
018f0     01 20 06 F1 | 	add	local02, #1
018f4     1D 21 52 F2 | 	cmps	local02, local15 wc
018f8     58 FC 9F CD |  if_b	jmp	#LR__0065
018fc                 | '  
018fc                 | ' ' 1f : now remove parts that are spaces
018fc                 | ' 
018fc                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
018fc     00 20 06 F6 | 	mov	local02, #0
01900     1D 55 02 F6 | 	mov	local28, local15
01904     01 54 06 F1 | 	add	local28, #1
01908                 | LR__0075
01908     2A 21 52 F2 | 	cmps	local02, local28 wc
0190c     50 00 90 3D |  if_ae	jmp	#LR__0076
01910     10 2F 02 F6 | 	mov	local09, local02
01914     03 2E 66 F0 | 	shl	local09, #3
01918     55 00 00 FF 
0191c     0C E4 05 F1 | 	add	objptr, ##43532
01920     F2 2E 02 F1 | 	add	local09, objptr
01924     10 33 02 F6 | 	mov	local11, local02
01928     19 31 02 F6 | 	mov	local10, local11
0192c     18 37 02 F6 | 	mov	local13, local10
01930     03 36 66 F0 | 	shl	local13, #3
01934     F2 34 02 F6 | 	mov	local12, objptr
01938     F2 36 02 F1 | 	add	local13, objptr
0193c     1B 13 02 FB | 	rdlong	arg01, local13
01940     55 00 00 FF 
01944     0C E4 85 F1 | 	sub	objptr, ##43532
01948     A4 F6 B1 FD | 	call	#__system__RTrim_S
0194c     FD 12 02 F6 | 	mov	arg01, result1
01950     DC F5 B1 FD | 	call	#__system__LTrim_S
01954     17 FB 61 FC | 	wrlong	result1, local09
01958     01 20 06 F1 | 	add	local02, #1
0195c     A8 FF 9F FD | 	jmp	#LR__0075
01960                 | LR__0076
01960     00 20 06 F6 | 	mov	local02, #0
01964     97 8A 48 FB | 	callpa	#(@LR__0083-@LR__0077)>>2,fcache_load_ptr_
01968                 | ' 
01968                 | ' i=0
01968                 | ' do 
01968                 | LR__0077
01968                 | '   if len(lparts(i).part$)=0 then 
01968     10 2F 02 F6 | 	mov	local09, local02
0196c     17 27 02 F6 | 	mov	local05, local09
01970     03 26 66 F0 | 	shl	local05, #3
01974     55 00 00 FF 
01978     0C E4 05 F1 | 	add	objptr, ##43532
0197c     F2 26 02 F1 | 	add	local05, objptr
01980     13 13 02 FB | 	rdlong	arg01, local05
01984     55 00 00 FF 
01988     0C E4 85 F1 | 	sub	objptr, ##43532
0198c     09 2B 02 F6 | 	mov	local07, arg01
01990                 | LR__0078
01990     15 FB C9 FA | 	rdbyte	result1, local07 wz
01994     01 2A 06 51 |  if_ne	add	local07, #1
01998     F4 FF 9F 5D |  if_ne	jmp	#LR__0078
0199c     09 2B 8A F1 | 	sub	local07, arg01 wz
019a0     C4 00 90 5D |  if_ne	jmp	#LR__0082
019a4                 | '     if i=k-1 then k-=1  :  exit
019a4     1D 25 02 F6 | 	mov	local04, local15
019a8     01 24 86 F1 | 	sub	local04, #1
019ac     12 21 0A F2 | 	cmp	local02, local04 wz
019b0     01 3A 86 A1 |  if_e	sub	local15, #1
019b4     C4 00 90 AD |  if_e	jmp	#LR__0084
019b8                 | '     if i<k-1 then 
019b8     1D 25 02 F6 | 	mov	local04, local15
019bc     01 24 86 F1 | 	sub	local04, #1
019c0     12 21 52 F2 | 	cmps	local02, local04 wc
019c4     A0 00 90 3D |  if_ae	jmp	#LR__0081
019c8                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
019c8     10 39 02 F6 | 	mov	local14, local02
019cc     1D 57 02 F6 | 	mov	local29, local15
019d0     01 56 86 F1 | 	sub	local29, #1
019d4                 | LR__0079
019d4     2B 39 52 F2 | 	cmps	local14, local29 wc
019d8     80 00 90 3D |  if_ae	jmp	#LR__0080
019dc     1C 27 02 F6 | 	mov	local05, local14
019e0     01 26 06 F1 | 	add	local05, #1
019e4     03 26 66 F0 | 	shl	local05, #3
019e8     55 00 00 FF 
019ec     0C E4 05 F1 | 	add	objptr, ##43532
019f0     F2 26 02 F1 | 	add	local05, objptr
019f4     13 25 02 FB | 	rdlong	local04, local05
019f8     1C 29 02 F6 | 	mov	local06, local14
019fc     01 28 06 F1 | 	add	local06, #1
01a00     03 28 66 F0 | 	shl	local06, #3
01a04     F2 28 02 F1 | 	add	local06, objptr
01a08     04 28 06 F1 | 	add	local06, #4
01a0c     14 23 02 FB | 	rdlong	local03, local06
01a10     1C 2F 02 F6 | 	mov	local09, local14
01a14     17 29 02 F6 | 	mov	local06, local09
01a18     03 28 66 F0 | 	shl	local06, #3
01a1c     F2 32 02 F6 | 	mov	local11, objptr
01a20     F2 28 02 F1 | 	add	local06, objptr
01a24     14 25 62 FC | 	wrlong	local04, local06
01a28     1C 31 02 F6 | 	mov	local10, local14
01a2c     18 37 02 F6 | 	mov	local13, local10
01a30     1B 35 02 F6 | 	mov	local12, local13
01a34     03 34 66 F0 | 	shl	local12, #3
01a38     F2 4A 02 F6 | 	mov	local23, objptr
01a3c     F2 34 02 F1 | 	add	local12, objptr
01a40     04 34 06 F1 | 	add	local12, #4
01a44     1A 23 62 FC | 	wrlong	local03, local12
01a48     04 34 86 F1 | 	sub	local12, #4
01a4c     01 38 06 F1 | 	add	local14, #1
01a50     55 00 00 FF 
01a54     0C E4 85 F1 | 	sub	objptr, ##43532
01a58     78 FF 9F FD | 	jmp	#LR__0079
01a5c                 | LR__0080
01a5c     01 3A 86 F1 | 	sub	local15, #1
01a60                 | '       if i>0 then i-=1 
01a60     01 20 56 F2 | 	cmps	local02, #1 wc
01a64     01 20 86 31 |  if_ae	sub	local02, #1
01a68                 | LR__0081
01a68                 | LR__0082
01a68     01 20 06 F1 | 	add	local02, #1
01a6c     1D 25 02 F6 | 	mov	local04, local15
01a70     01 24 86 F1 | 	sub	local04, #1
01a74     12 21 5A F2 | 	cmps	local02, local04 wcz
01a78     EC FE 9F ED |  if_be	jmp	#LR__0077
01a7c                 | LR__0083
01a7c                 | LR__0084
01a7c                 | ' 
01a7c                 | ' ' 1g: lowercase all that is not a string
01a7c                 | ' 
01a7c                 | ' for j=0 to k-1
01a7c     00 38 06 F6 | 	mov	local14, #0
01a80     1D 59 02 F6 | 	mov	local30, local15
01a84                 | LR__0085
01a84     2C 39 52 F2 | 	cmps	local14, local30 wc
01a88     C0 00 90 3D |  if_ae	jmp	#LR__0088
01a8c                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
01a8c     1C 27 02 F6 | 	mov	local05, local14
01a90     03 26 66 F0 | 	shl	local05, #3
01a94     55 00 00 FF 
01a98     0C E4 05 F1 | 	add	objptr, ##43532
01a9c     F2 26 02 F1 | 	add	local05, objptr
01aa0     13 13 02 FB | 	rdlong	arg01, local05
01aa4     01 14 06 F6 | 	mov	arg02, #1
01aa8     55 00 00 FF 
01aac     0C E4 85 F1 | 	sub	objptr, ##43532
01ab0     AC F0 B1 FD | 	call	#__system__Left_S
01ab4     FD 12 02 F6 | 	mov	arg01, result1
01ab8     70 01 00 FF 
01abc     93 15 06 F6 | 	mov	arg02, ##@LR__4808
01ac0     7C D0 B1 FD | 	call	#__system___string_cmp
01ac4     00 FA 0D F2 | 	cmp	result1, #0 wz
01ac8     40 00 90 5D |  if_ne	jmp	#LR__0086
01acc     1C 29 02 F6 | 	mov	local06, local14
01ad0     03 28 66 F0 | 	shl	local06, #3
01ad4     55 00 00 FF 
01ad8     0C E4 05 F1 | 	add	objptr, ##43532
01adc     F2 28 02 F1 | 	add	local06, objptr
01ae0     14 13 02 FB | 	rdlong	arg01, local06
01ae4     01 14 06 F6 | 	mov	arg02, #1
01ae8     55 00 00 FF 
01aec     0C E4 85 F1 | 	sub	objptr, ##43532
01af0     F4 F0 B1 FD | 	call	#__system__Right_S
01af4     FD 12 02 F6 | 	mov	arg01, result1
01af8     70 01 00 FF 
01afc     95 15 06 F6 | 	mov	arg02, ##@LR__4809
01b00     3C D0 B1 FD | 	call	#__system___string_cmp
01b04     00 FA 0D F2 | 	cmp	result1, #0 wz
01b08     38 00 90 AD |  if_e	jmp	#LR__0087
01b0c                 | LR__0086
01b0c     1C 2F 02 F6 | 	mov	local09, local14
01b10     03 2E 66 F0 | 	shl	local09, #3
01b14     55 00 00 FF 
01b18     0C E4 05 F1 | 	add	objptr, ##43532
01b1c     F2 2E 02 F1 | 	add	local09, objptr
01b20     1C 37 02 F6 | 	mov	local13, local14
01b24     03 36 66 F0 | 	shl	local13, #3
01b28     F2 34 02 F6 | 	mov	local12, objptr
01b2c     F2 36 02 F1 | 	add	local13, objptr
01b30     1B 13 02 FB | 	rdlong	arg01, local13
01b34     55 00 00 FF 
01b38     0C E4 85 F1 | 	sub	objptr, ##43532
01b3c     30 F3 B1 FD | 	call	#__system__LCase_S
01b40     17 FB 61 FC | 	wrlong	result1, local09
01b44                 | LR__0087
01b44     01 38 06 F1 | 	add	local14, #1
01b48     38 FF 9F FD | 	jmp	#LR__0085
01b4c                 | LR__0088
01b4c                 | ' 
01b4c                 | ' '                                                         for i=0 to k-1 : print lparts(i).part$,: next i : print
01b4c                 | ' 
01b4c                 | ' for i=0 to k: lparts(i).token=-1: next i
01b4c     00 20 06 F6 | 	mov	local02, #0
01b50     1D 5B 02 F6 | 	mov	local31, local15
01b54     01 5A 06 F1 | 	add	local31, #1
01b58     97 1C 48 FB | 	callpa	#(@LR__0090-@LR__0089)>>2,fcache_load_ptr_
01b5c                 | LR__0089
01b5c     2D 21 52 F2 | 	cmps	local02, local31 wc
01b60     30 00 90 3D |  if_ae	jmp	#LR__0091
01b64     10 2F 02 F6 | 	mov	local09, local02
01b68     03 2E 66 F0 | 	shl	local09, #3
01b6c     55 00 00 FF 
01b70     0C E4 05 F1 | 	add	objptr, ##43532
01b74     F2 2E 02 F1 | 	add	local09, objptr
01b78     04 2E 06 F1 | 	add	local09, #4
01b7c     FF FF FF FF 
01b80     17 FF 6B FC | 	wrlong	##-1, local09
01b84     01 20 06 F1 | 	add	local02, #1
01b88     55 00 00 FF 
01b8c     0C E4 85 F1 | 	sub	objptr, ##43532
01b90     C8 FF 9F FD | 	jmp	#LR__0089
01b94                 | LR__0090
01b94                 | LR__0091
01b94                 | ' 
01b94                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
01b94                 | ' 
01b94                 | ' if len(lparts(0).part$)=0 then goto 101				' empty line, nothing to do
01b94     55 00 00 FF 
01b98     0C E4 05 F1 | 	add	objptr, ##43532
01b9c     F2 12 02 FB | 	rdlong	arg01, objptr
01ba0     55 00 00 FF 
01ba4     0C E4 85 F1 | 	sub	objptr, ##43532
01ba8     09 2B 02 F6 | 	mov	local07, arg01
01bac     97 06 48 FB | 	callpa	#(@LR__0093-@LR__0092)>>2,fcache_load_ptr_
01bb0                 | LR__0092
01bb0     15 FB C9 FA | 	rdbyte	result1, local07 wz
01bb4     01 2A 06 51 |  if_ne	add	local07, #1
01bb8     F4 FF 9F 5D |  if_ne	jmp	#LR__0092
01bbc                 | LR__0093
01bbc     09 2B 8A F1 | 	sub	local07, arg01 wz
01bc0     7C 17 90 AD |  if_e	jmp	#LR__0149
01bc4                 | ' 
01bc4                 | ' 
01bc4                 | ' if isdec(lparts(0).part$) then let addptr=1 else let addptr=0
01bc4     55 00 00 FF 
01bc8     0C E4 05 F1 | 	add	objptr, ##43532
01bcc     F2 12 02 FB | 	rdlong	arg01, objptr
01bd0     55 00 00 FF 
01bd4     0C E4 85 F1 | 	sub	objptr, ##43532
01bd8     E0 37 B0 FD | 	call	#_isdec
01bdc     00 FA 0D F2 | 	cmp	result1, #0 wz
01be0     7A 00 00 5F 
01be4     10 E4 05 51 |  if_ne	add	objptr, ##62480
01be8     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01bec     7A 00 00 FF 
01bf0     10 E4 E5 F3 | 	sumnz	objptr, ##62480
01bf4     F2 00 68 AC |  if_e	wrlong	#0, objptr
01bf8     7A 00 00 AF 
01bfc     10 E4 85 A1 |  if_e	sub	objptr, ##62480
01c00     7A 00 00 FF 
01c04     10 E4 05 F1 | 	add	objptr, ##62480
01c08     F2 26 02 FB | 	rdlong	local05, objptr
01c0c     03 26 66 F0 | 	shl	local05, #3
01c10     25 00 00 FF 
01c14     04 E4 85 F1 | 	sub	objptr, ##18948
01c18     F2 26 02 F1 | 	add	local05, objptr
01c1c     13 33 02 FB | 	rdlong	local11, local05
01c20     25 00 00 FF 
01c24     08 E4 05 F1 | 	add	objptr, ##18952
01c28     F2 32 62 FC | 	wrlong	local11, objptr
01c2c     04 E4 85 F1 | 	sub	objptr, #4
01c30     F2 32 02 FB | 	rdlong	local11, objptr
01c34     03 32 66 F0 | 	shl	local11, #3
01c38     25 00 00 FF 
01c3c     04 E4 85 F1 | 	sub	objptr, ##18948
01c40     F2 30 02 F6 | 	mov	local10, objptr
01c44     F2 32 02 F1 | 	add	local11, objptr
01c48     19 15 02 FB | 	rdlong	arg02, local11
01c4c     70 01 00 FF 
01c50     97 17 06 F6 | 	mov	arg03, ##@LR__4810
01c54     01 12 06 F6 | 	mov	arg01, #1
01c58     55 00 00 FF 
01c5c     0C E4 85 F1 | 	sub	objptr, ##43532
01c60     44 F4 B1 FD | 	call	#__system__Instr
01c64     7A 00 00 FF 
01c68     18 E4 05 F1 | 	add	objptr, ##62488
01c6c     F2 FA 61 FC | 	wrlong	result1, objptr
01c70                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 
01c70     FD 24 02 F6 | 	mov	local04, result1
01c74     7A 00 00 FF 
01c78     18 E4 85 F1 | 	sub	objptr, ##62488
01c7c     01 24 56 F2 | 	cmps	local04, #1 wc
01c80     DC 01 90 CD |  if_b	jmp	#LR__0100
01c84     7A 00 00 FF 
01c88     10 E4 05 F1 | 	add	objptr, ##62480
01c8c     F2 30 02 FB | 	rdlong	local10, objptr
01c90     03 30 66 F0 | 	shl	local10, #3
01c94     25 00 00 FF 
01c98     04 E4 85 F1 | 	sub	objptr, ##18948
01c9c     F2 36 02 F6 | 	mov	local13, objptr
01ca0     F2 30 02 F1 | 	add	local10, objptr
01ca4     18 13 02 FB | 	rdlong	arg01, local10
01ca8     55 00 00 FF 
01cac     0C E4 85 F1 | 	sub	objptr, ##43532
01cb0     09 2B 02 F6 | 	mov	local07, arg01
01cb4     97 06 48 FB | 	callpa	#(@LR__0095-@LR__0094)>>2,fcache_load_ptr_
01cb8                 | LR__0094
01cb8     15 FB C9 FA | 	rdbyte	result1, local07 wz
01cbc     01 2A 06 51 |  if_ne	add	local07, #1
01cc0     F4 FF 9F 5D |  if_ne	jmp	#LR__0094
01cc4                 | LR__0095
01cc4     09 2B 82 F1 | 	sub	local07, arg01
01cc8     15 2F 02 F6 | 	mov	local09, local07
01ccc     7A 00 00 FF 
01cd0     18 E4 05 F1 | 	add	objptr, ##62488
01cd4     F2 26 02 FB | 	rdlong	local05, objptr
01cd8     7A 00 00 FF 
01cdc     18 E4 85 F1 | 	sub	objptr, ##62488
01ce0     17 27 52 F2 | 	cmps	local05, local09 wc
01ce4     78 01 90 3D |  if_ae	jmp	#LR__0100
01ce8     01 3A 06 F1 | 	add	local15, #1
01cec                 | '   k+=1
01cec                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01cec     1D 21 02 F6 | 	mov	local02, local15
01cf0     7A 00 00 FF 
01cf4     10 E4 05 F1 | 	add	objptr, ##62480
01cf8     F2 5C 02 FB | 	rdlong	local32, objptr
01cfc     01 5C 06 F1 | 	add	local32, #1
01d00     25 00 00 FF 
01d04     04 E4 85 F1 | 	sub	objptr, ##18948
01d08     97 2E 48 FB | 	callpa	#(@LR__0097-@LR__0096)>>2,fcache_load_ptr_
01d0c                 | LR__0096
01d0c     10 29 02 F6 | 	mov	local06, local02
01d10     01 28 86 F1 | 	sub	local06, #1
01d14     03 28 66 F0 | 	shl	local06, #3
01d18     F2 28 02 F1 | 	add	local06, objptr
01d1c     14 23 02 FB | 	rdlong	local03, local06
01d20     10 33 02 F6 | 	mov	local11, local02
01d24     01 32 86 F1 | 	sub	local11, #1
01d28     03 32 66 F0 | 	shl	local11, #3
01d2c     F2 32 02 F1 | 	add	local11, objptr
01d30     04 32 06 F1 | 	add	local11, #4
01d34     19 2F 02 FB | 	rdlong	local09, local11
01d38     10 33 02 F6 | 	mov	local11, local02
01d3c     03 32 66 F0 | 	shl	local11, #3
01d40     F2 32 02 F1 | 	add	local11, objptr
01d44     19 23 62 FC | 	wrlong	local03, local11
01d48     10 4B 02 F6 | 	mov	local23, local02
01d4c     03 4A 66 F0 | 	shl	local23, #3
01d50     F2 4A 02 F1 | 	add	local23, objptr
01d54     04 4A 06 F1 | 	add	local23, #4
01d58     25 2F 62 FC | 	wrlong	local09, local23
01d5c     01 20 86 F1 | 	sub	local02, #1
01d60     2E 21 52 F2 | 	cmps	local02, local32 wc
01d64     A4 FF 9F 3D |  if_ae	jmp	#LR__0096
01d68                 | LR__0097
01d68     25 00 00 FF 
01d6c     04 E4 05 F1 | 	add	objptr, ##18948
01d70     F2 4A 02 FB | 	rdlong	local23, objptr
01d74     25 27 02 F6 | 	mov	local05, local23
01d78     01 26 06 F1 | 	add	local05, #1
01d7c     03 26 66 F0 | 	shl	local05, #3
01d80     25 00 00 FF 
01d84     04 E4 85 F1 | 	sub	objptr, ##18948
01d88     F2 26 02 F1 | 	add	local05, objptr
01d8c     03 4A 66 F0 | 	shl	local23, #3
01d90     F2 4A 02 F1 | 	add	local23, objptr
01d94     25 33 02 FB | 	rdlong	local11, local23
01d98     25 00 00 FF 
01d9c     04 E4 05 F1 | 	add	objptr, ##18948
01da0     F2 44 02 FB | 	rdlong	local20, objptr
01da4     22 47 02 F6 | 	mov	local21, local20
01da8     03 46 66 F0 | 	shl	local21, #3
01dac     25 00 00 FF 
01db0     04 E4 85 F1 | 	sub	objptr, ##18948
01db4     F2 4C 02 F6 | 	mov	local24, objptr
01db8     F2 46 02 F1 | 	add	local21, objptr
01dbc     23 13 02 FB | 	rdlong	arg01, local21
01dc0     55 00 00 FF 
01dc4     0C E4 85 F1 | 	sub	objptr, ##43532
01dc8     09 2B 02 F6 | 	mov	local07, arg01
01dcc     97 06 48 FB | 	callpa	#(@LR__0099-@LR__0098)>>2,fcache_load_ptr_
01dd0                 | LR__0098
01dd0     15 FB C9 FA | 	rdbyte	result1, local07 wz
01dd4     01 2A 06 51 |  if_ne	add	local07, #1
01dd8     F4 FF 9F 5D |  if_ne	jmp	#LR__0098
01ddc                 | LR__0099
01ddc     09 2B 82 F1 | 	sub	local07, arg01
01de0     15 15 02 F6 | 	mov	arg02, local07
01de4     7A 00 00 FF 
01de8     18 E4 05 F1 | 	add	objptr, ##62488
01dec     F2 4A 02 FB | 	rdlong	local23, objptr
01df0     7A 00 00 FF 
01df4     18 E4 85 F1 | 	sub	objptr, ##62488
01df8     25 15 82 F1 | 	sub	arg02, local23
01dfc     19 13 02 F6 | 	mov	arg01, local11
01e00     E4 ED B1 FD | 	call	#__system__Right_S
01e04     13 FB 61 FC | 	wrlong	result1, local05
01e08     7A 00 00 FF 
01e0c     10 E4 05 F1 | 	add	objptr, ##62480
01e10     F2 34 02 FB | 	rdlong	local12, objptr
01e14     1A 27 02 F6 | 	mov	local05, local12
01e18     03 26 66 F0 | 	shl	local05, #3
01e1c     25 00 00 FF 
01e20     04 E4 85 F1 | 	sub	objptr, ##18948
01e24     F2 26 02 F1 | 	add	local05, objptr
01e28     1A 4B 02 F6 | 	mov	local23, local12
01e2c     03 4A 66 F0 | 	shl	local23, #3
01e30     F2 42 02 F6 | 	mov	local19, objptr
01e34     F2 4A 02 F1 | 	add	local23, objptr
01e38     25 13 02 FB | 	rdlong	arg01, local23
01e3c     25 00 00 FF 
01e40     0C E4 05 F1 | 	add	objptr, ##18956
01e44     F2 36 02 FB | 	rdlong	local13, objptr
01e48     7A 00 00 FF 
01e4c     18 E4 85 F1 | 	sub	objptr, ##62488
01e50     1B 31 02 F6 | 	mov	local10, local13
01e54     18 15 02 F6 | 	mov	arg02, local10
01e58     04 ED B1 FD | 	call	#__system__Left_S
01e5c     13 FB 61 FC | 	wrlong	result1, local05
01e60                 | LR__0100
01e60                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then
01e60     7A 00 00 FF 
01e64     10 E4 05 F1 | 	add	objptr, ##62480
01e68     F2 28 02 FB | 	rdlong	local06, objptr
01e6c     03 28 66 F0 | 	shl	local06, #3
01e70     25 00 00 FF 
01e74     04 E4 85 F1 | 	sub	objptr, ##18948
01e78     F2 28 02 F1 | 	add	local06, objptr
01e7c     14 13 02 FB | 	rdlong	arg01, local06
01e80     01 14 06 F6 | 	mov	arg02, #1
01e84     55 00 00 FF 
01e88     0C E4 85 F1 | 	sub	objptr, ##43532
01e8c     D0 EC B1 FD | 	call	#__system__Left_S
01e90     FD 12 02 F6 | 	mov	arg01, result1
01e94     70 01 00 FF 
01e98     99 15 06 F6 | 	mov	arg02, ##@LR__4811
01e9c     A0 CC B1 FD | 	call	#__system___string_cmp
01ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
01ea4     9C 01 90 5D |  if_ne	jmp	#LR__0107
01ea8     7A 00 00 FF 
01eac     10 E4 05 F1 | 	add	objptr, ##62480
01eb0     F2 32 02 FB | 	rdlong	local11, objptr
01eb4     03 32 66 F0 | 	shl	local11, #3
01eb8     25 00 00 FF 
01ebc     04 E4 85 F1 | 	sub	objptr, ##18948
01ec0     F2 30 02 F6 | 	mov	local10, objptr
01ec4     F2 32 02 F1 | 	add	local11, objptr
01ec8     19 13 02 FB | 	rdlong	arg01, local11
01ecc     55 00 00 FF 
01ed0     0C E4 85 F1 | 	sub	objptr, ##43532
01ed4     09 2B 02 F6 | 	mov	local07, arg01
01ed8     97 06 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01edc                 | LR__0101
01edc     15 FB C9 FA | 	rdbyte	result1, local07 wz
01ee0     01 2A 06 51 |  if_ne	add	local07, #1
01ee4     F4 FF 9F 5D |  if_ne	jmp	#LR__0101
01ee8                 | LR__0102
01ee8     09 2B 82 F1 | 	sub	local07, arg01
01eec     02 2A 56 F2 | 	cmps	local07, #2 wc
01ef0     50 01 90 CD |  if_b	jmp	#LR__0107
01ef4     01 3A 06 F1 | 	add	local15, #1
01ef8                 | '   k+=1
01ef8                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01ef8     1D 21 02 F6 | 	mov	local02, local15
01efc     7A 00 00 FF 
01f00     10 E4 05 F1 | 	add	objptr, ##62480
01f04     F2 5E 02 FB | 	rdlong	local33, objptr
01f08     01 5E 06 F1 | 	add	local33, #1
01f0c     25 00 00 FF 
01f10     04 E4 85 F1 | 	sub	objptr, ##18948
01f14     97 2E 48 FB | 	callpa	#(@LR__0104-@LR__0103)>>2,fcache_load_ptr_
01f18                 | LR__0103
01f18     10 29 02 F6 | 	mov	local06, local02
01f1c     01 28 86 F1 | 	sub	local06, #1
01f20     03 28 66 F0 | 	shl	local06, #3
01f24     F2 28 02 F1 | 	add	local06, objptr
01f28     14 23 02 FB | 	rdlong	local03, local06
01f2c     10 33 02 F6 | 	mov	local11, local02
01f30     01 32 86 F1 | 	sub	local11, #1
01f34     03 32 66 F0 | 	shl	local11, #3
01f38     F2 32 02 F1 | 	add	local11, objptr
01f3c     04 32 06 F1 | 	add	local11, #4
01f40     19 2F 02 FB | 	rdlong	local09, local11
01f44     10 33 02 F6 | 	mov	local11, local02
01f48     03 32 66 F0 | 	shl	local11, #3
01f4c     F2 32 02 F1 | 	add	local11, objptr
01f50     19 23 62 FC | 	wrlong	local03, local11
01f54     10 4B 02 F6 | 	mov	local23, local02
01f58     03 4A 66 F0 | 	shl	local23, #3
01f5c     F2 4A 02 F1 | 	add	local23, objptr
01f60     04 4A 06 F1 | 	add	local23, #4
01f64     25 2F 62 FC | 	wrlong	local09, local23
01f68     01 20 86 F1 | 	sub	local02, #1
01f6c     2F 21 52 F2 | 	cmps	local02, local33 wc
01f70     A4 FF 9F 3D |  if_ae	jmp	#LR__0103
01f74                 | LR__0104
01f74     25 00 00 FF 
01f78     04 E4 05 F1 | 	add	objptr, ##18948
01f7c     F2 4A 02 FB | 	rdlong	local23, objptr
01f80     25 27 02 F6 | 	mov	local05, local23
01f84     01 26 06 F1 | 	add	local05, #1
01f88     03 26 66 F0 | 	shl	local05, #3
01f8c     25 00 00 FF 
01f90     04 E4 85 F1 | 	sub	objptr, ##18948
01f94     F2 26 02 F1 | 	add	local05, objptr
01f98     03 4A 66 F0 | 	shl	local23, #3
01f9c     F2 4A 02 F1 | 	add	local23, objptr
01fa0     25 33 02 FB | 	rdlong	local11, local23
01fa4     25 00 00 FF 
01fa8     04 E4 05 F1 | 	add	objptr, ##18948
01fac     F2 42 02 FB | 	rdlong	local19, objptr
01fb0     21 4B 02 F6 | 	mov	local23, local19
01fb4     25 45 02 F6 | 	mov	local20, local23
01fb8     22 47 02 F6 | 	mov	local21, local20
01fbc     03 46 66 F0 | 	shl	local21, #3
01fc0     25 00 00 FF 
01fc4     04 E4 85 F1 | 	sub	objptr, ##18948
01fc8     F2 4C 02 F6 | 	mov	local24, objptr
01fcc     F2 46 02 F1 | 	add	local21, objptr
01fd0     23 13 02 FB | 	rdlong	arg01, local21
01fd4     55 00 00 FF 
01fd8     0C E4 85 F1 | 	sub	objptr, ##43532
01fdc     09 2B 02 F6 | 	mov	local07, arg01
01fe0     97 06 48 FB | 	callpa	#(@LR__0106-@LR__0105)>>2,fcache_load_ptr_
01fe4                 | LR__0105
01fe4     15 FB C9 FA | 	rdbyte	result1, local07 wz
01fe8     01 2A 06 51 |  if_ne	add	local07, #1
01fec     F4 FF 9F 5D |  if_ne	jmp	#LR__0105
01ff0                 | LR__0106
01ff0     09 2B 82 F1 | 	sub	local07, arg01
01ff4     15 35 02 F6 | 	mov	local12, local07
01ff8     1A 37 02 F6 | 	mov	local13, local12
01ffc     01 36 86 F1 | 	sub	local13, #1
02000     1B 31 02 F6 | 	mov	local10, local13
02004     19 13 02 F6 | 	mov	arg01, local11
02008     18 15 02 F6 | 	mov	arg02, local10
0200c     D8 EB B1 FD | 	call	#__system__Right_S
02010     13 FB 61 FC | 	wrlong	result1, local05
02014     7A 00 00 FF 
02018     10 E4 05 F1 | 	add	objptr, ##62480
0201c     F2 26 02 FB | 	rdlong	local05, objptr
02020     03 26 66 F0 | 	shl	local05, #3
02024     25 00 00 FF 
02028     04 E4 85 F1 | 	sub	objptr, ##18948
0202c     F2 26 02 F1 | 	add	local05, objptr
02030     70 01 00 FF 
02034     9B 33 06 F6 | 	mov	local11, ##@LR__4812
02038     13 33 62 FC | 	wrlong	local11, local05
0203c     55 00 00 FF 
02040     0C E4 85 F1 | 	sub	objptr, ##43532
02044                 | LR__0107
02044     7A 00 00 FF 
02048     10 E4 05 F1 | 	add	objptr, ##62480
0204c     F2 26 02 FB | 	rdlong	local05, objptr
02050     03 26 66 F0 | 	shl	local05, #3
02054     25 00 00 FF 
02058     04 E4 85 F1 | 	sub	objptr, ##18948
0205c     F2 26 02 F1 | 	add	local05, objptr
02060     13 33 02 FB | 	rdlong	local11, local05
02064     25 00 00 FF 
02068     08 E4 05 F1 | 	add	objptr, ##18952
0206c     F2 32 62 FC | 	wrlong	local11, objptr
02070                 | ' 
02070                 | ' ' process the case when simple load or save is called without ""
02070                 | ' 
02070                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02070     7A 00 00 FF 
02074     14 E4 85 F1 | 	sub	objptr, ##62484
02078     70 01 00 FF 
0207c     9D 15 06 F6 | 	mov	arg02, ##@LR__4813
02080     19 13 02 F6 | 	mov	arg01, local11
02084     B8 CA B1 FD | 	call	#__system___string_cmp
02088     00 FA 0D F2 | 	cmp	result1, #0 wz
0208c     50 00 90 AD |  if_e	jmp	#LR__0108
02090     7A 00 00 FF 
02094     14 E4 05 F1 | 	add	objptr, ##62484
02098     F2 12 02 FB | 	rdlong	arg01, objptr
0209c     7A 00 00 FF 
020a0     14 E4 85 F1 | 	sub	objptr, ##62484
020a4     70 01 00 FF 
020a8     A3 15 06 F6 | 	mov	arg02, ##@LR__4814
020ac     90 CA B1 FD | 	call	#__system___string_cmp
020b0     00 FA 0D F2 | 	cmp	result1, #0 wz
020b4     28 00 90 AD |  if_e	jmp	#LR__0108
020b8     7A 00 00 FF 
020bc     14 E4 05 F1 | 	add	objptr, ##62484
020c0     F2 12 02 FB | 	rdlong	arg01, objptr
020c4     7A 00 00 FF 
020c8     14 E4 85 F1 | 	sub	objptr, ##62484
020cc     70 01 00 FF 
020d0     AA 15 06 F6 | 	mov	arg02, ##@LR__4815
020d4     68 CA B1 FD | 	call	#__system___string_cmp
020d8     00 FA 0D F2 | 	cmp	result1, #0 wz
020dc     48 01 90 5D |  if_ne	jmp	#LR__0111
020e0                 | LR__0108
020e0                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(addptr+1).token=token_decimal
020e0     7A 00 00 FF 
020e4     10 E4 05 F1 | 	add	objptr, ##62480
020e8     F2 28 02 FB | 	rdlong	local06, objptr
020ec     01 28 06 F1 | 	add	local06, #1
020f0     03 28 66 F0 | 	shl	local06, #3
020f4     25 00 00 FF 
020f8     04 E4 85 F1 | 	sub	objptr, ##18948
020fc     F2 28 02 F1 | 	add	local06, objptr
02100     14 13 02 FB | 	rdlong	arg01, local06
02104     70 01 00 FF 
02108     B0 15 06 F6 | 	mov	arg02, ##@LR__4816
0210c     55 00 00 FF 
02110     0C E4 85 F1 | 	sub	objptr, ##43532
02114     28 CA B1 FD | 	call	#__system___string_cmp
02118     00 FA 0D F2 | 	cmp	result1, #0 wz
0211c     60 00 90 5D |  if_ne	jmp	#LR__0109
02120     7A 00 00 FF 
02124     10 E4 05 F1 | 	add	objptr, ##62480
02128     F2 26 02 FB | 	rdlong	local05, objptr
0212c     01 26 06 F1 | 	add	local05, #1
02130     03 26 66 F0 | 	shl	local05, #3
02134     25 00 00 FF 
02138     04 E4 85 F1 | 	sub	objptr, ##18948
0213c     F2 26 02 F1 | 	add	local05, objptr
02140     70 01 00 FF 
02144     B3 33 06 F6 | 	mov	local11, ##@LR__4817
02148     13 33 62 FC | 	wrlong	local11, local05
0214c     25 00 00 FF 
02150     04 E4 05 F1 | 	add	objptr, ##18948
02154     F2 26 02 FB | 	rdlong	local05, objptr
02158     01 26 06 F1 | 	add	local05, #1
0215c     03 26 66 F0 | 	shl	local05, #3
02160     25 00 00 FF 
02164     04 E4 85 F1 | 	sub	objptr, ##18948
02168     F2 26 02 F1 | 	add	local05, objptr
0216c     04 26 06 F1 | 	add	local05, #4
02170     01 00 80 FF 
02174     13 01 68 FC | 	wrlong	##512, local05
02178     55 00 00 FF 
0217c     0C E4 85 F1 | 	sub	objptr, ##43532
02180                 | LR__0109
02180                 | '   if lparts(addptr+1).part$="off" then   lparts(addptr+1).part$="0" :lparts(addptr+1).token=token_decimal
02180     7A 00 00 FF 
02184     10 E4 05 F1 | 	add	objptr, ##62480
02188     F2 28 02 FB | 	rdlong	local06, objptr
0218c     01 28 06 F1 | 	add	local06, #1
02190     03 28 66 F0 | 	shl	local06, #3
02194     25 00 00 FF 
02198     04 E4 85 F1 | 	sub	objptr, ##18948
0219c     F2 32 02 F6 | 	mov	local11, objptr
021a0     F2 28 02 F1 | 	add	local06, objptr
021a4     14 13 02 FB | 	rdlong	arg01, local06
021a8     70 01 00 FF 
021ac     B5 15 06 F6 | 	mov	arg02, ##@LR__4818
021b0     55 00 00 FF 
021b4     0C E4 85 F1 | 	sub	objptr, ##43532
021b8     84 C9 B1 FD | 	call	#__system___string_cmp
021bc     00 FA 0D F2 | 	cmp	result1, #0 wz
021c0     64 00 90 5D |  if_ne	jmp	#LR__0110
021c4     7A 00 00 FF 
021c8     10 E4 05 F1 | 	add	objptr, ##62480
021cc     F2 26 02 FB | 	rdlong	local05, objptr
021d0     01 26 06 F1 | 	add	local05, #1
021d4     03 26 66 F0 | 	shl	local05, #3
021d8     25 00 00 FF 
021dc     04 E4 85 F1 | 	sub	objptr, ##18948
021e0     F2 26 02 F1 | 	add	local05, objptr
021e4     70 01 00 FF 
021e8     B9 33 06 F6 | 	mov	local11, ##@LR__4819
021ec     13 33 62 FC | 	wrlong	local11, local05
021f0     25 00 00 FF 
021f4     04 E4 05 F1 | 	add	objptr, ##18948
021f8     F2 26 02 FB | 	rdlong	local05, objptr
021fc     01 26 06 F1 | 	add	local05, #1
02200     03 26 66 F0 | 	shl	local05, #3
02204     25 00 00 FF 
02208     04 E4 85 F1 | 	sub	objptr, ##18948
0220c     F2 26 02 F1 | 	add	local05, objptr
02210     09 32 C6 F9 | 	decod	local11, #9
02214     04 26 06 F1 | 	add	local05, #4
02218     01 00 80 FF 
0221c     13 01 68 FC | 	wrlong	##512, local05
02220     55 00 00 FF 
02224     0C E4 85 F1 | 	sub	objptr, ##43532
02228                 | LR__0110
02228                 | LR__0111
02228                 | ' if (lp$="mode" orelse lp$="m.") then 
02228     7A 00 00 FF 
0222c     14 E4 05 F1 | 	add	objptr, ##62484
02230     F2 12 02 FB | 	rdlong	arg01, objptr
02234     7A 00 00 FF 
02238     14 E4 85 F1 | 	sub	objptr, ##62484
0223c     70 01 00 FF 
02240     BB 15 06 F6 | 	mov	arg02, ##@LR__4820
02244     F8 C8 B1 FD | 	call	#__system___string_cmp
02248     00 FA 0D F2 | 	cmp	result1, #0 wz
0224c     28 00 90 AD |  if_e	jmp	#LR__0112
02250     7A 00 00 FF 
02254     14 E4 05 F1 | 	add	objptr, ##62484
02258     F2 12 02 FB | 	rdlong	arg01, objptr
0225c     7A 00 00 FF 
02260     14 E4 85 F1 | 	sub	objptr, ##62484
02264     70 01 00 FF 
02268     C0 15 06 F6 | 	mov	arg02, ##@LR__4821
0226c     D0 C8 B1 FD | 	call	#__system___string_cmp
02270     00 FA 0D F2 | 	cmp	result1, #0 wz
02274     48 02 90 5D |  if_ne	jmp	#LR__0118
02278                 | LR__0112
02278                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"  
02278     7A 00 00 FF 
0227c     10 E4 05 F1 | 	add	objptr, ##62480
02280     F2 28 02 FB | 	rdlong	local06, objptr
02284     01 28 06 F1 | 	add	local06, #1
02288     03 28 66 F0 | 	shl	local06, #3
0228c     25 00 00 FF 
02290     04 E4 85 F1 | 	sub	objptr, ##18948
02294     F2 28 02 F1 | 	add	local06, objptr
02298     14 13 02 FB | 	rdlong	arg01, local06
0229c     70 01 00 FF 
022a0     C3 15 06 F6 | 	mov	arg02, ##@LR__4822
022a4     55 00 00 FF 
022a8     0C E4 85 F1 | 	sub	objptr, ##43532
022ac     90 C8 B1 FD | 	call	#__system___string_cmp
022b0     00 FA 0D F2 | 	cmp	result1, #0 wz
022b4     34 00 90 5D |  if_ne	jmp	#LR__0113
022b8     7A 00 00 FF 
022bc     10 E4 05 F1 | 	add	objptr, ##62480
022c0     F2 26 02 FB | 	rdlong	local05, objptr
022c4     01 26 06 F1 | 	add	local05, #1
022c8     03 26 66 F0 | 	shl	local05, #3
022cc     25 00 00 FF 
022d0     04 E4 85 F1 | 	sub	objptr, ##18948
022d4     F2 26 02 F1 | 	add	local05, objptr
022d8     70 01 00 FF 
022dc     C9 33 06 F6 | 	mov	local11, ##@LR__4823
022e0     13 33 62 FC | 	wrlong	local11, local05
022e4     55 00 00 FF 
022e8     0C E4 85 F1 | 	sub	objptr, ##43532
022ec                 | LR__0113
022ec                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
022ec     7A 00 00 FF 
022f0     10 E4 05 F1 | 	add	objptr, ##62480
022f4     F2 28 02 FB | 	rdlong	local06, objptr
022f8     01 28 06 F1 | 	add	local06, #1
022fc     03 28 66 F0 | 	shl	local06, #3
02300     25 00 00 FF 
02304     04 E4 85 F1 | 	sub	objptr, ##18948
02308     F2 28 02 F1 | 	add	local06, objptr
0230c     14 13 02 FB | 	rdlong	arg01, local06
02310     70 01 00 FF 
02314     CB 15 06 F6 | 	mov	arg02, ##@LR__4824
02318     55 00 00 FF 
0231c     0C E4 85 F1 | 	sub	objptr, ##43532
02320     1C C8 B1 FD | 	call	#__system___string_cmp
02324     00 FA 0D F2 | 	cmp	result1, #0 wz
02328     34 00 90 5D |  if_ne	jmp	#LR__0114
0232c     7A 00 00 FF 
02330     10 E4 05 F1 | 	add	objptr, ##62480
02334     F2 26 02 FB | 	rdlong	local05, objptr
02338     01 26 06 F1 | 	add	local05, #1
0233c     03 26 66 F0 | 	shl	local05, #3
02340     25 00 00 FF 
02344     04 E4 85 F1 | 	sub	objptr, ##18948
02348     F2 26 02 F1 | 	add	local05, objptr
0234c     70 01 00 FF 
02350     D4 33 06 F6 | 	mov	local11, ##@LR__4825
02354     13 33 62 FC | 	wrlong	local11, local05
02358     55 00 00 FF 
0235c     0C E4 85 F1 | 	sub	objptr, ##43532
02360                 | LR__0114
02360                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02360     7A 00 00 FF 
02364     10 E4 05 F1 | 	add	objptr, ##62480
02368     F2 28 02 FB | 	rdlong	local06, objptr
0236c     01 28 06 F1 | 	add	local06, #1
02370     03 28 66 F0 | 	shl	local06, #3
02374     25 00 00 FF 
02378     04 E4 85 F1 | 	sub	objptr, ##18948
0237c     F2 28 02 F1 | 	add	local06, objptr
02380     14 13 02 FB | 	rdlong	arg01, local06
02384     70 01 00 FF 
02388     D6 15 06 F6 | 	mov	arg02, ##@LR__4826
0238c     55 00 00 FF 
02390     0C E4 85 F1 | 	sub	objptr, ##43532
02394     A8 C7 B1 FD | 	call	#__system___string_cmp
02398     00 FA 0D F2 | 	cmp	result1, #0 wz
0239c     34 00 90 5D |  if_ne	jmp	#LR__0115
023a0     7A 00 00 FF 
023a4     10 E4 05 F1 | 	add	objptr, ##62480
023a8     F2 26 02 FB | 	rdlong	local05, objptr
023ac     01 26 06 F1 | 	add	local05, #1
023b0     03 26 66 F0 | 	shl	local05, #3
023b4     25 00 00 FF 
023b8     04 E4 85 F1 | 	sub	objptr, ##18948
023bc     F2 26 02 F1 | 	add	local05, objptr
023c0     70 01 00 FF 
023c4     DF 33 06 F6 | 	mov	local11, ##@LR__4827
023c8     13 33 62 FC | 	wrlong	local11, local05
023cc     55 00 00 FF 
023d0     0C E4 85 F1 | 	sub	objptr, ##43532
023d4                 | LR__0115
023d4                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
023d4     7A 00 00 FF 
023d8     10 E4 05 F1 | 	add	objptr, ##62480
023dc     F2 28 02 FB | 	rdlong	local06, objptr
023e0     01 28 06 F1 | 	add	local06, #1
023e4     03 28 66 F0 | 	shl	local06, #3
023e8     25 00 00 FF 
023ec     04 E4 85 F1 | 	sub	objptr, ##18948
023f0     F2 28 02 F1 | 	add	local06, objptr
023f4     14 13 02 FB | 	rdlong	arg01, local06
023f8     70 01 00 FF 
023fc     E1 15 06 F6 | 	mov	arg02, ##@LR__4828
02400     55 00 00 FF 
02404     0C E4 85 F1 | 	sub	objptr, ##43532
02408     34 C7 B1 FD | 	call	#__system___string_cmp
0240c     00 FA 0D F2 | 	cmp	result1, #0 wz
02410     34 00 90 5D |  if_ne	jmp	#LR__0116
02414     7A 00 00 FF 
02418     10 E4 05 F1 | 	add	objptr, ##62480
0241c     F2 26 02 FB | 	rdlong	local05, objptr
02420     01 26 06 F1 | 	add	local05, #1
02424     03 26 66 F0 | 	shl	local05, #3
02428     25 00 00 FF 
0242c     04 E4 85 F1 | 	sub	objptr, ##18948
02430     F2 26 02 F1 | 	add	local05, objptr
02434     70 01 00 FF 
02438     EA 33 06 F6 | 	mov	local11, ##@LR__4829
0243c     13 33 62 FC | 	wrlong	local11, local05
02440     55 00 00 FF 
02444     0C E4 85 F1 | 	sub	objptr, ##43532
02448                 | LR__0116
02448                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02448     7A 00 00 FF 
0244c     10 E4 05 F1 | 	add	objptr, ##62480
02450     F2 28 02 FB | 	rdlong	local06, objptr
02454     01 28 06 F1 | 	add	local06, #1
02458     03 28 66 F0 | 	shl	local06, #3
0245c     25 00 00 FF 
02460     04 E4 85 F1 | 	sub	objptr, ##18948
02464     F2 32 02 F6 | 	mov	local11, objptr
02468     F2 28 02 F1 | 	add	local06, objptr
0246c     14 13 02 FB | 	rdlong	arg01, local06
02470     70 01 00 FF 
02474     EC 15 06 F6 | 	mov	arg02, ##@LR__4830
02478     55 00 00 FF 
0247c     0C E4 85 F1 | 	sub	objptr, ##43532
02480     BC C6 B1 FD | 	call	#__system___string_cmp
02484     00 FA 0D F2 | 	cmp	result1, #0 wz
02488     34 00 90 5D |  if_ne	jmp	#LR__0117
0248c     7A 00 00 FF 
02490     10 E4 05 F1 | 	add	objptr, ##62480
02494     F2 26 02 FB | 	rdlong	local05, objptr
02498     01 26 06 F1 | 	add	local05, #1
0249c     03 26 66 F0 | 	shl	local05, #3
024a0     25 00 00 FF 
024a4     04 E4 85 F1 | 	sub	objptr, ##18948
024a8     F2 26 02 F1 | 	add	local05, objptr
024ac     70 01 00 FF 
024b0     EF 33 06 F6 | 	mov	local11, ##@LR__4831
024b4     13 33 62 FC | 	wrlong	local11, local05
024b8     55 00 00 FF 
024bc     0C E4 85 F1 | 	sub	objptr, ##43532
024c0                 | LR__0117
024c0                 | LR__0118
024c0                 | ' 
024c0                 | ' 
024c0                 | ' 
024c0                 | ' 
024c0                 | ' 
024c0                 | ' 
024c0                 | ' ' 2a find part types 
024c0                 | ' 
024c0                 | ' for i=0 to k-1
024c0     00 20 06 F6 | 	mov	local02, #0
024c4     1D 61 02 F6 | 	mov	local34, local15
024c8                 | LR__0119
024c8     30 21 52 F2 | 	cmps	local02, local34 wc
024cc     74 06 90 3D |  if_ae	jmp	#LR__0129
024d0     10 2F 02 F6 | 	mov	local09, local02
024d4     03 2E 66 F0 | 	shl	local09, #3
024d8     55 00 00 FF 
024dc     0C E4 05 F1 | 	add	objptr, ##43532
024e0     F2 2E 02 F1 | 	add	local09, objptr
024e4     10 31 02 F6 | 	mov	local10, local02
024e8     18 35 02 F6 | 	mov	local12, local10
024ec     03 34 66 F0 | 	shl	local12, #3
024f0     F2 4A 02 F6 | 	mov	local23, objptr
024f4     F2 34 02 F1 | 	add	local12, objptr
024f8     1A 13 02 FB | 	rdlong	arg01, local12
024fc     55 00 00 FF 
02500     0C E4 85 F1 | 	sub	objptr, ##43532
02504     B0 14 B0 FD | 	call	#_isseparator
02508     FD FA E1 F8 | 	getbyte	result1, result1, #0
0250c     04 2E 06 F1 | 	add	local09, #4
02510     17 FB 61 FC | 	wrlong	result1, local09
02514                 | ' lparts(i).token=isseparator(lparts(i).part$): if lparts(i).token>0 then goto 102
02514     10 2F 02 F6 | 	mov	local09, local02
02518     03 2E 66 F0 | 	shl	local09, #3
0251c     55 00 00 FF 
02520     0C E4 05 F1 | 	add	objptr, ##43532
02524     F2 2E 02 F1 | 	add	local09, objptr
02528     04 2E 06 F1 | 	add	local09, #4
0252c     17 33 02 FB | 	rdlong	local11, local09
02530     01 32 56 F2 | 	cmps	local11, #1 wc
02534     55 00 00 FF 
02538     0C E4 85 F1 | 	sub	objptr, ##43532
0253c     FC 05 90 3D |  if_ae	jmp	#LR__0128
02540     10 2F 02 F6 | 	mov	local09, local02
02544     03 2E 66 F0 | 	shl	local09, #3
02548     55 00 00 FF 
0254c     0C E4 05 F1 | 	add	objptr, ##43532
02550     F2 2E 02 F1 | 	add	local09, objptr
02554     10 31 02 F6 | 	mov	local10, local02
02558     18 35 02 F6 | 	mov	local12, local10
0255c     03 34 66 F0 | 	shl	local12, #3
02560     F2 4A 02 F6 | 	mov	local23, objptr
02564     F2 34 02 F1 | 	add	local12, objptr
02568     1A 13 02 FB | 	rdlong	arg01, local12
0256c     55 00 00 FF 
02570     0C E4 85 F1 | 	sub	objptr, ##43532
02574     F4 0D B0 FD | 	call	#_isoperator
02578     FD FA E1 F8 | 	getbyte	result1, result1, #0
0257c     04 2E 06 F1 | 	add	local09, #4
02580     17 FB 61 FC | 	wrlong	result1, local09
02584                 | ' lparts(i).token=isoperator(lparts(i).part$): if lparts(i).token>0 then goto 102
02584     10 2F 02 F6 | 	mov	local09, local02
02588     03 2E 66 F0 | 	shl	local09, #3
0258c     55 00 00 FF 
02590     0C E4 05 F1 | 	add	objptr, ##43532
02594     F2 2E 02 F1 | 	add	local09, objptr
02598     04 2E 06 F1 | 	add	local09, #4
0259c     17 33 02 FB | 	rdlong	local11, local09
025a0     01 32 56 F2 | 	cmps	local11, #1 wc
025a4     55 00 00 FF 
025a8     0C E4 85 F1 | 	sub	objptr, ##43532
025ac     8C 05 90 3D |  if_ae	jmp	#LR__0128
025b0     10 2F 02 F6 | 	mov	local09, local02
025b4     03 2E 66 F0 | 	shl	local09, #3
025b8     55 00 00 FF 
025bc     0C E4 05 F1 | 	add	objptr, ##43532
025c0     F2 2E 02 F1 | 	add	local09, objptr
025c4     10 31 02 F6 | 	mov	local10, local02
025c8     18 35 02 F6 | 	mov	local12, local10
025cc     03 34 66 F0 | 	shl	local12, #3
025d0     F2 4A 02 F6 | 	mov	local23, objptr
025d4     F2 34 02 F1 | 	add	local12, objptr
025d8     1A 13 02 FB | 	rdlong	arg01, local12
025dc     55 00 00 FF 
025e0     0C E4 85 F1 | 	sub	objptr, ##43532
025e4                 | ' 
025e4                 | ' select case s
025e4     71 01 00 FF 
025e8     D0 14 06 F6 | 	mov	arg02, ##@LR__4902
025ec     50 C5 B1 FD | 	call	#__system___string_cmp
025f0     00 FA 0D F2 | 	cmp	result1, #0 wz
025f4     1B FA 05 A6 |  if_e	mov	result1, #27
025f8     00 FA 05 56 |  if_ne	mov	result1, #0
025fc     FD FA E1 F8 | 	getbyte	result1, result1, #0
02600     04 2E 06 F1 | 	add	local09, #4
02604     17 FB 61 FC | 	wrlong	result1, local09
02608                 | ' lparts(i).token=isassign(lparts(i).part$) : if lparts(i).token>0 then goto 102
02608     10 2F 02 F6 | 	mov	local09, local02
0260c     03 2E 66 F0 | 	shl	local09, #3
02610     55 00 00 FF 
02614     0C E4 05 F1 | 	add	objptr, ##43532
02618     F2 2E 02 F1 | 	add	local09, objptr
0261c     04 2E 06 F1 | 	add	local09, #4
02620     17 33 02 FB | 	rdlong	local11, local09
02624     01 32 56 F2 | 	cmps	local11, #1 wc
02628     55 00 00 FF 
0262c     0C E4 85 F1 | 	sub	objptr, ##43532
02630     08 05 90 3D |  if_ae	jmp	#LR__0128
02634     10 2F 02 F6 | 	mov	local09, local02
02638     03 2E 66 F0 | 	shl	local09, #3
0263c     55 00 00 FF 
02640     0C E4 05 F1 | 	add	objptr, ##43532
02644     F2 2E 02 F1 | 	add	local09, objptr
02648     10 31 02 F6 | 	mov	local10, local02
0264c     18 35 02 F6 | 	mov	local12, local10
02650     03 34 66 F0 | 	shl	local12, #3
02654     F2 4A 02 F6 | 	mov	local23, objptr
02658     F2 34 02 F1 | 	add	local12, objptr
0265c     1A 13 02 FB | 	rdlong	arg01, local12
02660     55 00 00 FF 
02664     0C E4 85 F1 | 	sub	objptr, ##43532
02668     4C 15 B0 FD | 	call	#_iscommand
0266c     FD FA E1 F8 | 	getbyte	result1, result1, #0
02670     04 2E 06 F1 | 	add	local09, #4
02674     17 FB 61 FC | 	wrlong	result1, local09
02678                 | ' lparts(i).token=iscommand(lparts(i).part$): if lparts(i).token>0 then goto 102
02678     10 2F 02 F6 | 	mov	local09, local02
0267c     03 2E 66 F0 | 	shl	local09, #3
02680     55 00 00 FF 
02684     0C E4 05 F1 | 	add	objptr, ##43532
02688     F2 2E 02 F1 | 	add	local09, objptr
0268c     04 2E 06 F1 | 	add	local09, #4
02690     17 33 02 FB | 	rdlong	local11, local09
02694     01 32 56 F2 | 	cmps	local11, #1 wc
02698     55 00 00 FF 
0269c     0C E4 85 F1 | 	sub	objptr, ##43532
026a0     98 04 90 3D |  if_ae	jmp	#LR__0128
026a4     10 2F 02 F6 | 	mov	local09, local02
026a8     03 2E 66 F0 | 	shl	local09, #3
026ac     55 00 00 FF 
026b0     0C E4 05 F1 | 	add	objptr, ##43532
026b4     F2 2E 02 F1 | 	add	local09, objptr
026b8     10 31 02 F6 | 	mov	local10, local02
026bc     18 35 02 F6 | 	mov	local12, local10
026c0     03 34 66 F0 | 	shl	local12, #3
026c4     F2 4A 02 F6 | 	mov	local23, objptr
026c8     F2 34 02 F1 | 	add	local12, objptr
026cc     1A 13 02 FB | 	rdlong	arg01, local12
026d0     55 00 00 FF 
026d4     0C E4 85 F1 | 	sub	objptr, ##43532
026d8     FC 20 B0 FD | 	call	#_isfunction
026dc     FD FA E1 F8 | 	getbyte	result1, result1, #0
026e0     04 2E 06 F1 | 	add	local09, #4
026e4     17 FB 61 FC | 	wrlong	result1, local09
026e8                 | ' lparts(i).token=isfunction(lparts(i).part$): if lparts(i).token>0 then goto 102
026e8     10 2F 02 F6 | 	mov	local09, local02
026ec     03 2E 66 F0 | 	shl	local09, #3
026f0     55 00 00 FF 
026f4     0C E4 05 F1 | 	add	objptr, ##43532
026f8     F2 2E 02 F1 | 	add	local09, objptr
026fc     04 2E 06 F1 | 	add	local09, #4
02700     17 33 02 FB | 	rdlong	local11, local09
02704     01 32 56 F2 | 	cmps	local11, #1 wc
02708     55 00 00 FF 
0270c     0C E4 85 F1 | 	sub	objptr, ##43532
02710     28 04 90 3D |  if_ae	jmp	#LR__0128
02714     10 2F 02 F6 | 	mov	local09, local02
02718     03 2E 66 F0 | 	shl	local09, #3
0271c     55 00 00 FF 
02720     0C E4 05 F1 | 	add	objptr, ##43532
02724     F2 2E 02 F1 | 	add	local09, objptr
02728     10 31 02 F6 | 	mov	local10, local02
0272c     18 37 02 F6 | 	mov	local13, local10
02730     03 36 66 F0 | 	shl	local13, #3
02734     F2 34 02 F6 | 	mov	local12, objptr
02738     F2 36 02 F1 | 	add	local13, objptr
0273c     1B 13 02 FB | 	rdlong	arg01, local13
02740     55 00 00 FF 
02744     0C E4 85 F1 | 	sub	objptr, ##43532
02748     00 0F B0 FD | 	call	#_isnotename
0274c     04 2E 06 F1 | 	add	local09, #4
02750     17 FB 61 FC | 	wrlong	result1, local09
02754                 | ' lparts(i).token=isnotename(lparts(i).part$) 
02754                 | ' if lparts(i).token>0 then 
02754     10 2F 02 F6 | 	mov	local09, local02
02758     03 2E 66 F0 | 	shl	local09, #3
0275c     55 00 00 FF 
02760     0C E4 05 F1 | 	add	objptr, ##43532
02764     F2 2E 02 F1 | 	add	local09, objptr
02768     04 2E 06 F1 | 	add	local09, #4
0276c     17 33 02 FB | 	rdlong	local11, local09
02770     01 32 56 F2 | 	cmps	local11, #1 wc
02774     55 00 00 FF 
02778     0C E4 85 F1 | 	sub	objptr, ##43532
0277c     88 00 90 CD |  if_b	jmp	#LR__0120
02780     10 27 02 F6 | 	mov	local05, local02
02784     03 26 66 F0 | 	shl	local05, #3
02788     55 00 00 FF 
0278c     0C E4 05 F1 | 	add	objptr, ##43532
02790     F2 26 02 F1 | 	add	local05, objptr
02794     04 26 06 F1 | 	add	local05, #4
02798     13 33 02 FB | 	rdlong	local11, local05
0279c     19 13 02 F6 | 	mov	arg01, local11
027a0     55 00 00 FF 
027a4     0C E4 85 F1 | 	sub	objptr, ##43532
027a8     38 7B B1 FD | 	call	#_getnoteval
027ac     FD 62 02 F6 | 	mov	local35, result1
027b0     10 2F 02 F6 | 	mov	local09, local02
027b4     03 2E 66 F0 | 	shl	local09, #3
027b8     55 00 00 FF 
027bc     0C E4 05 F1 | 	add	objptr, ##43532
027c0     F2 2E 02 F1 | 	add	local09, objptr
027c4     31 13 02 F6 | 	mov	arg01, local35
027c8     55 00 00 FF 
027cc     0C E4 85 F1 | 	sub	objptr, ##43532
027d0     84 E5 B1 FD | 	call	#__system__str_S
027d4     17 FB 61 FC | 	wrlong	result1, local09
027d8     10 23 02 F6 | 	mov	local03, local02
027dc     11 2F 02 F6 | 	mov	local09, local03
027e0     03 2E 66 F0 | 	shl	local09, #3
027e4     55 00 00 FF 
027e8     0C E4 05 F1 | 	add	objptr, ##43532
027ec     F2 2E 02 F1 | 	add	local09, objptr
027f0     04 2E 06 F1 | 	add	local09, #4
027f4     01 00 80 FF 
027f8     17 05 68 FC | 	wrlong	##514, local09
027fc     55 00 00 FF 
02800     0C E4 85 F1 | 	sub	objptr, ##43532
02804     34 03 90 FD | 	jmp	#LR__0128
02808                 | LR__0120
02808     10 27 02 F6 | 	mov	local05, local02
0280c     03 26 66 F0 | 	shl	local05, #3
02810     55 00 00 FF 
02814     0C E4 05 F1 | 	add	objptr, ##43532
02818     F2 26 02 F1 | 	add	local05, objptr
0281c     13 13 02 FB | 	rdlong	arg01, local05
02820     55 00 00 FF 
02824     0C E4 85 F1 | 	sub	objptr, ##43532
02828     60 27 B0 FD | 	call	#_isnum
0282c     FD 24 02 F6 | 	mov	local04, result1
02830     7A 00 00 FF 
02834     1C E4 05 F1 | 	add	objptr, ##62492
02838     F2 24 62 FC | 	wrlong	local04, objptr
0283c     10 27 02 F6 | 	mov	local05, local02
02840     03 26 66 F0 | 	shl	local05, #3
02844     25 00 00 FF 
02848     10 E4 85 F1 | 	sub	objptr, ##18960
0284c     F2 26 02 F1 | 	add	local05, objptr
02850     13 13 02 FB | 	rdlong	arg01, local05
02854     55 00 00 FF 
02858     0C E4 85 F1 | 	sub	objptr, ##43532
0285c     04 2A B0 FD | 	call	#_isint
02860     FD 24 02 F6 | 	mov	local04, result1
02864     7A 00 00 FF 
02868     20 E4 05 F1 | 	add	objptr, ##62496
0286c     F2 24 62 FC | 	wrlong	local04, objptr
02870     10 27 02 F6 | 	mov	local05, local02
02874     03 26 66 F0 | 	shl	local05, #3
02878     25 00 00 FF 
0287c     14 E4 85 F1 | 	sub	objptr, ##18964
02880     F2 28 02 F6 | 	mov	local06, objptr
02884     F2 26 02 F1 | 	add	local05, objptr
02888     13 13 02 FB | 	rdlong	arg01, local05
0288c     55 00 00 FF 
02890     0C E4 85 F1 | 	sub	objptr, ##43532
02894     24 2B B0 FD | 	call	#_isdec
02898     7A 00 00 FF 
0289c     24 E4 05 F1 | 	add	objptr, ##62500
028a0     F2 FA 61 FC | 	wrlong	result1, objptr
028a4                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal : goto 102 					' pure decimal for line num
028a4     08 E4 85 F1 | 	sub	objptr, #8
028a8     F2 24 0A FB | 	rdlong	local04, objptr wz
028ac     7A 00 00 FF 
028b0     1C E4 85 F1 | 	sub	objptr, ##62492
028b4     60 00 90 AD |  if_e	jmp	#LR__0121
028b8     7A 00 00 FF 
028bc     20 E4 05 F1 | 	add	objptr, ##62496
028c0     F2 2E 0A FB | 	rdlong	local09, objptr wz
028c4     7A 00 00 FF 
028c8     20 E4 85 F1 | 	sub	objptr, ##62496
028cc     48 00 90 AD |  if_e	jmp	#LR__0121
028d0     7A 00 00 FF 
028d4     24 E4 05 F1 | 	add	objptr, ##62500
028d8     F2 32 0A FB | 	rdlong	local11, objptr wz
028dc     7A 00 00 FF 
028e0     24 E4 85 F1 | 	sub	objptr, ##62500
028e4     30 00 90 AD |  if_e	jmp	#LR__0121
028e8     10 23 02 F6 | 	mov	local03, local02
028ec     11 2F 02 F6 | 	mov	local09, local03
028f0     03 2E 66 F0 | 	shl	local09, #3
028f4     55 00 00 FF 
028f8     0C E4 05 F1 | 	add	objptr, ##43532
028fc     F2 2E 02 F1 | 	add	local09, objptr
02900     04 2E 06 F1 | 	add	local09, #4
02904     01 00 80 FF 
02908     17 01 68 FC | 	wrlong	##512, local09
0290c     55 00 00 FF 
02910     0C E4 85 F1 | 	sub	objptr, ##43532
02914     24 02 90 FD | 	jmp	#LR__0128
02918                 | LR__0121
02918                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer : goto 102 				' integer
02918     7A 00 00 FF 
0291c     1C E4 05 F1 | 	add	objptr, ##62492
02920     F2 24 0A FB | 	rdlong	local04, objptr wz
02924     7A 00 00 FF 
02928     1C E4 85 F1 | 	sub	objptr, ##62492
0292c     64 00 90 AD |  if_e	jmp	#LR__0122
02930     7A 00 00 FF 
02934     20 E4 05 F1 | 	add	objptr, ##62496
02938     F2 2E 0A FB | 	rdlong	local09, objptr wz
0293c     7A 00 00 FF 
02940     20 E4 85 F1 | 	sub	objptr, ##62496
02944     7A 00 00 5F 
02948     24 E4 05 51 |  if_ne	add	objptr, ##62500
0294c     F2 32 02 5B |  if_ne	rdlong	local11, objptr
02950     7A 00 00 5F 
02954     24 E4 85 51 |  if_ne	sub	objptr, ##62500
02958     19 29 22 56 |  if_ne	not	local06, local11
0295c     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
02960     30 00 90 AD |  if_e	jmp	#LR__0122
02964     10 23 02 F6 | 	mov	local03, local02
02968     11 2F 02 F6 | 	mov	local09, local03
0296c     03 2E 66 F0 | 	shl	local09, #3
02970     55 00 00 FF 
02974     0C E4 05 F1 | 	add	objptr, ##43532
02978     F2 2E 02 F1 | 	add	local09, objptr
0297c     04 2E 06 F1 | 	add	local09, #4
02980     01 00 80 FF 
02984     17 03 68 FC | 	wrlong	##513, local09
02988     55 00 00 FF 
0298c     0C E4 85 F1 | 	sub	objptr, ##43532
02990     A8 01 90 FD | 	jmp	#LR__0128
02994                 | LR__0122
02994                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float :goto 102 				' float
02994     7A 00 00 FF 
02998     1C E4 05 F1 | 	add	objptr, ##62492
0299c     F2 24 0A FB | 	rdlong	local04, objptr wz
029a0     7A 00 00 FF 
029a4     1C E4 85 F1 | 	sub	objptr, ##62492
029a8     7A 00 00 5F 
029ac     20 E4 05 51 |  if_ne	add	objptr, ##62496
029b0     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
029b4     7A 00 00 5F 
029b8     20 E4 85 51 |  if_ne	sub	objptr, ##62496
029bc     17 2F 22 56 |  if_ne	not	local09, local09
029c0     00 2E 0E 52 |  if_ne	cmp	local09, #0 wz
029c4     7A 00 00 5F 
029c8     24 E4 05 51 |  if_ne	add	objptr, ##62500
029cc     F2 32 02 5B |  if_ne	rdlong	local11, objptr
029d0     7A 00 00 5F 
029d4     24 E4 85 51 |  if_ne	sub	objptr, ##62500
029d8     19 29 22 56 |  if_ne	not	local06, local11
029dc     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
029e0     30 00 90 AD |  if_e	jmp	#LR__0123
029e4     10 23 02 F6 | 	mov	local03, local02
029e8     11 2F 02 F6 | 	mov	local09, local03
029ec     03 2E 66 F0 | 	shl	local09, #3
029f0     55 00 00 FF 
029f4     0C E4 05 F1 | 	add	objptr, ##43532
029f8     F2 2E 02 F1 | 	add	local09, objptr
029fc     04 2E 06 F1 | 	add	local09, #4
02a00     01 00 80 FF 
02a04     17 05 68 FC | 	wrlong	##514, local09
02a08     55 00 00 FF 
02a0c     0C E4 85 F1 | 	sub	objptr, ##43532
02a10     28 01 90 FD | 	jmp	#LR__0128
02a14                 | LR__0123
02a14                 | ' 
02a14                 | ' if isstring(lparts(i).part$) then 
02a14     10 27 02 F6 | 	mov	local05, local02
02a18     03 26 66 F0 | 	shl	local05, #3
02a1c     55 00 00 FF 
02a20     0C E4 05 F1 | 	add	objptr, ##43532
02a24     F2 26 02 F1 | 	add	local05, objptr
02a28     13 13 02 FB | 	rdlong	arg01, local05
02a2c     55 00 00 FF 
02a30     0C E4 85 F1 | 	sub	objptr, ##43532
02a34     44 2A B0 FD | 	call	#_isstring
02a38     00 FA 0D F2 | 	cmp	result1, #0 wz
02a3c     A0 00 90 AD |  if_e	jmp	#LR__0126
02a40     10 2F 02 F6 | 	mov	local09, local02
02a44     03 2E 66 F0 | 	shl	local09, #3
02a48     55 00 00 FF 
02a4c     0C E4 05 F1 | 	add	objptr, ##43532
02a50     F2 2E 02 F1 | 	add	local09, objptr
02a54     04 2E 06 F1 | 	add	local09, #4
02a58     01 00 80 FF 
02a5c     17 07 68 FC | 	wrlong	##515, local09
02a60     10 23 02 F6 | 	mov	local03, local02
02a64     11 2F 02 F6 | 	mov	local09, local03
02a68     03 2E 66 F0 | 	shl	local09, #3
02a6c     F2 2E 02 F1 | 	add	local09, objptr
02a70     10 37 02 F6 | 	mov	local13, local02
02a74     03 36 66 F0 | 	shl	local13, #3
02a78     F2 36 02 F1 | 	add	local13, objptr
02a7c     1B 29 02 FB | 	rdlong	local06, local13
02a80     02 32 06 F6 | 	mov	local11, #2
02a84     10 4B 02 F6 | 	mov	local23, local02
02a88     25 43 02 F6 | 	mov	local19, local23
02a8c     21 45 02 F6 | 	mov	local20, local19
02a90     03 44 66 F0 | 	shl	local20, #3
02a94     F2 46 02 F6 | 	mov	local21, objptr
02a98     F2 44 02 F1 | 	add	local20, objptr
02a9c     22 13 02 FB | 	rdlong	arg01, local20
02aa0     55 00 00 FF 
02aa4     0C E4 85 F1 | 	sub	objptr, ##43532
02aa8     09 2B 02 F6 | 	mov	local07, arg01
02aac     97 06 48 FB | 	callpa	#(@LR__0125-@LR__0124)>>2,fcache_load_ptr_
02ab0                 | LR__0124
02ab0     15 FB C9 FA | 	rdbyte	result1, local07 wz
02ab4     01 2A 06 51 |  if_ne	add	local07, #1
02ab8     F4 FF 9F 5D |  if_ne	jmp	#LR__0124
02abc                 | LR__0125
02abc     09 2B 82 F1 | 	sub	local07, arg01
02ac0     15 31 02 F6 | 	mov	local10, local07
02ac4     02 30 86 F1 | 	sub	local10, #2
02ac8     14 13 02 F6 | 	mov	arg01, local06
02acc     19 15 02 F6 | 	mov	arg02, local11
02ad0     18 17 02 F6 | 	mov	arg03, local10
02ad4     A0 E1 B1 FD | 	call	#__system__Mid_S
02ad8     17 FB 61 FC | 	wrlong	result1, local09
02adc     5C 00 90 FD | 	jmp	#LR__0128
02ae0                 | LR__0126
02ae0                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
02ae0     10 23 02 F6 | 	mov	local03, local02
02ae4     11 27 02 F6 | 	mov	local05, local03
02ae8     03 26 66 F0 | 	shl	local05, #3
02aec     55 00 00 FF 
02af0     0C E4 05 F1 | 	add	objptr, ##43532
02af4     F2 26 02 F1 | 	add	local05, objptr
02af8     13 13 02 FB | 	rdlong	arg01, local05
02afc     55 00 00 FF 
02b00     0C E4 85 F1 | 	sub	objptr, ##43532
02b04     10 22 B0 FD | 	call	#_isname
02b08     00 FA 4D F2 | 	cmps	result1, #0 wz
02b0c     2C 00 90 AD |  if_e	jmp	#LR__0127
02b10     10 23 02 F6 | 	mov	local03, local02
02b14     11 2F 02 F6 | 	mov	local09, local03
02b18     03 2E 66 F0 | 	shl	local09, #3
02b1c     55 00 00 FF 
02b20     0C E4 05 F1 | 	add	objptr, ##43532
02b24     F2 2E 02 F1 | 	add	local09, objptr
02b28     04 2E 06 F1 | 	add	local09, #4
02b2c     01 00 80 FF 
02b30     17 09 68 FC | 	wrlong	##516, local09
02b34     55 00 00 FF 
02b38     0C E4 85 F1 | 	sub	objptr, ##43532
02b3c                 | LR__0127
02b3c                 | LR__0128
02b3c     01 20 06 F1 | 	add	local02, #1
02b40     84 F9 9F FD | 	jmp	#LR__0119
02b44                 | LR__0129
02b44     1D 2F 02 F6 | 	mov	local09, local15
02b48     03 2E 66 F0 | 	shl	local09, #3
02b4c     55 00 00 FF 
02b50     0C E4 05 F1 | 	add	objptr, ##43532
02b54     F2 2E 02 F1 | 	add	local09, objptr
02b58     04 2E 06 F1 | 	add	local09, #4
02b5c     17 FD 6B FC | 	wrlong	#510, local09
02b60     1D 2F 02 F6 | 	mov	local09, local15
02b64     03 2E 66 F0 | 	shl	local09, #3
02b68     F2 26 02 F6 | 	mov	local05, objptr
02b6c     F2 2E 02 F1 | 	add	local09, objptr
02b70     70 01 00 FF 
02b74     F1 29 06 F6 | 	mov	local06, ##@LR__4832
02b78     17 29 62 FC | 	wrlong	local06, local09
02b7c     10 00 00 FF 
02b80     54 E4 05 F1 | 	add	objptr, ##8276
02b84     F2 3A 62 FC | 	wrlong	local15, objptr
02b88                 | ' 
02b88                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
02b88                 | ' 
02b88                 | '  '                                      					 	for i=0 to k: print lparts(i).token,lparts(i).part$ : next i
02b88                 | '  
02b88                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
02b88     14 00 00 FF 
02b8c     B4 E5 05 F1 | 	add	objptr, ##10676
02b90     F2 12 02 FB | 	rdlong	arg01, objptr
02b94     7A 00 00 FF 
02b98     14 E4 85 F1 | 	sub	objptr, ##62484
02b9c     70 01 00 FF 
02ba0     F2 2F 06 F6 | 	mov	local09, ##@LR__4833
02ba4     17 15 02 F6 | 	mov	arg02, local09
02ba8     94 BF B1 FD | 	call	#__system___string_cmp
02bac     00 FA 0D F2 | 	cmp	result1, #0 wz
02bb0     1C 01 90 AD |  if_e	jmp	#LR__0130
02bb4     7A 00 00 FF 
02bb8     14 E4 05 F1 | 	add	objptr, ##62484
02bbc     F2 12 02 FB | 	rdlong	arg01, objptr
02bc0     7A 00 00 FF 
02bc4     14 E4 85 F1 | 	sub	objptr, ##62484
02bc8     70 01 00 FF 
02bcc     F7 27 06 F6 | 	mov	local05, ##@LR__4834
02bd0     13 2F 02 F6 | 	mov	local09, local05
02bd4     17 15 02 F6 | 	mov	arg02, local09
02bd8     64 BF B1 FD | 	call	#__system___string_cmp
02bdc     00 FA 0D F2 | 	cmp	result1, #0 wz
02be0     EC 00 90 AD |  if_e	jmp	#LR__0130
02be4     7A 00 00 FF 
02be8     14 E4 05 F1 | 	add	objptr, ##62484
02bec     F2 12 02 FB | 	rdlong	arg01, objptr
02bf0     7A 00 00 FF 
02bf4     14 E4 85 F1 | 	sub	objptr, ##62484
02bf8     70 01 00 FF 
02bfc     FC 29 06 F6 | 	mov	local06, ##@LR__4835
02c00     14 27 02 F6 | 	mov	local05, local06
02c04     13 15 02 F6 | 	mov	arg02, local05
02c08     34 BF B1 FD | 	call	#__system___string_cmp
02c0c     FD 2E 0A F6 | 	mov	local09, result1 wz
02c10     BC 00 90 AD |  if_e	jmp	#LR__0130
02c14     7A 00 00 FF 
02c18     14 E4 05 F1 | 	add	objptr, ##62484
02c1c     F2 12 02 FB | 	rdlong	arg01, objptr
02c20     7A 00 00 FF 
02c24     14 E4 85 F1 | 	sub	objptr, ##62484
02c28     71 01 00 FF 
02c2c     01 32 06 F6 | 	mov	local11, ##@LR__4836
02c30     19 29 02 F6 | 	mov	local06, local11
02c34     14 15 02 F6 | 	mov	arg02, local06
02c38     04 BF B1 FD | 	call	#__system___string_cmp
02c3c     FD 26 0A F6 | 	mov	local05, result1 wz
02c40     8C 00 90 AD |  if_e	jmp	#LR__0130
02c44     7A 00 00 FF 
02c48     14 E4 05 F1 | 	add	objptr, ##62484
02c4c     F2 12 02 FB | 	rdlong	arg01, objptr
02c50     7A 00 00 FF 
02c54     14 E4 85 F1 | 	sub	objptr, ##62484
02c58     71 01 00 FF 
02c5c     05 30 06 F6 | 	mov	local10, ##@LR__4837
02c60     18 33 02 F6 | 	mov	local11, local10
02c64     19 15 02 F6 | 	mov	arg02, local11
02c68     D4 BE B1 FD | 	call	#__system___string_cmp
02c6c     FD 28 0A F6 | 	mov	local06, result1 wz
02c70     5C 00 90 AD |  if_e	jmp	#LR__0130
02c74     7A 00 00 FF 
02c78     14 E4 05 F1 | 	add	objptr, ##62484
02c7c     F2 12 02 FB | 	rdlong	arg01, objptr
02c80     7A 00 00 FF 
02c84     14 E4 85 F1 | 	sub	objptr, ##62484
02c88     71 01 00 FF 
02c8c     09 30 06 F6 | 	mov	local10, ##@LR__4838
02c90     18 15 02 F6 | 	mov	arg02, local10
02c94     A8 BE B1 FD | 	call	#__system___string_cmp
02c98     FD 32 0A F6 | 	mov	local11, result1 wz
02c9c     30 00 90 AD |  if_e	jmp	#LR__0130
02ca0     7A 00 00 FF 
02ca4     14 E4 05 F1 | 	add	objptr, ##62484
02ca8     F2 12 02 FB | 	rdlong	arg01, objptr
02cac     7A 00 00 FF 
02cb0     14 E4 85 F1 | 	sub	objptr, ##62484
02cb4     71 01 00 FF 
02cb8     0C 34 06 F6 | 	mov	local12, ##@LR__4839
02cbc     1A 37 02 F6 | 	mov	local13, local12
02cc0     1B 15 02 F6 | 	mov	arg02, local13
02cc4     78 BE B1 FD | 	call	#__system___string_cmp
02cc8     FD 30 0A F6 | 	mov	local10, result1 wz
02ccc     9C 00 90 5D |  if_ne	jmp	#LR__0131
02cd0                 | LR__0130
02cd0     7A 00 00 FF 
02cd4     10 E4 05 F1 | 	add	objptr, ##62480
02cd8     F2 34 02 FB | 	rdlong	local12, objptr
02cdc     1A 37 02 F6 | 	mov	local13, local12
02ce0     01 36 06 F1 | 	add	local13, #1
02ce4     1B 4B 02 F6 | 	mov	local23, local13
02ce8     25 43 02 F6 | 	mov	local19, local23
02cec     03 42 66 F0 | 	shl	local19, #3
02cf0     25 00 00 FF 
02cf4     04 E4 85 F1 | 	sub	objptr, ##18948
02cf8     F2 44 02 F6 | 	mov	local20, objptr
02cfc     F2 42 02 F1 | 	add	local19, objptr
02d00     04 42 06 F1 | 	add	local19, #4
02d04     21 4D 02 FB | 	rdlong	local24, local19
02d08     04 42 86 F1 | 	sub	local19, #4
02d0c     26 47 02 F6 | 	mov	local21, local24
02d10     01 00 00 FF 
02d14     04 46 0E F2 | 	cmp	local21, ##516 wz
02d18     55 00 00 FF 
02d1c     0C E4 85 F1 | 	sub	objptr, ##43532
02d20     48 00 90 5D |  if_ne	jmp	#LR__0131
02d24     7A 00 00 FF 
02d28     10 E4 05 F1 | 	add	objptr, ##62480
02d2c     F2 2E 02 FB | 	rdlong	local09, objptr
02d30     01 2E 06 F1 | 	add	local09, #1
02d34     17 27 02 F6 | 	mov	local05, local09
02d38     03 26 66 F0 | 	shl	local05, #3
02d3c     25 00 00 FF 
02d40     04 E4 85 F1 | 	sub	objptr, ##18948
02d44     F2 28 02 F6 | 	mov	local06, objptr
02d48     F2 26 02 F1 | 	add	local05, objptr
02d4c     01 00 00 FF 
02d50     03 32 06 F6 | 	mov	local11, ##515
02d54     04 26 06 F1 | 	add	local05, #4
02d58     01 00 80 FF 
02d5c     13 07 68 FC | 	wrlong	##515, local05
02d60     04 26 86 F1 | 	sub	local05, #4
02d64     55 00 00 FF 
02d68     0C E4 85 F1 | 	sub	objptr, ##43532
02d6c                 | LR__0131
02d6c                 | ' 
02d6c                 | ' ' abbreviated command has to be at the position addptr
02d6c                 | ' 
02d6c                 | ' 
02d6c                 | ' 
02d6c                 | ' '2b determine a type of the line
02d6c                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
02d6c     55 00 00 FF 
02d70     0C E4 05 F1 | 	add	objptr, ##43532
02d74     F2 12 02 FB | 	rdlong	arg01, objptr
02d78     55 00 00 FF 
02d7c     0C E4 85 F1 | 	sub	objptr, ##43532
02d80     38 26 B0 FD | 	call	#_isdec
02d84     00 FA 0D F2 | 	cmp	result1, #0 wz
02d88     30 00 90 AD |  if_e	jmp	#LR__0132
02d8c     55 00 00 FF 
02d90     0C E4 05 F1 | 	add	objptr, ##43532
02d94     F2 12 02 FB | 	rdlong	arg01, objptr
02d98     55 00 00 FF 
02d9c     0C E4 85 F1 | 	sub	objptr, ##43532
02da0     00 14 06 F6 | 	mov	arg02, #0
02da4     68 EF B1 FD | 	call	#__system____builtin_atoi
02da8     79 00 00 FF 
02dac     A0 E5 05 F1 | 	add	objptr, ##62368
02db0     F2 FA 61 FC | 	wrlong	result1, objptr
02db4     79 00 00 FF 
02db8     A0 E5 85 F1 | 	sub	objptr, ##62368
02dbc                 | LR__0132
02dbc                 | ' 
02dbc                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104
02dbc     79 00 00 FF 
02dc0     A0 E5 05 F1 | 	add	objptr, ##62368
02dc4     F2 24 02 FB | 	rdlong	local04, objptr
02dc8     79 00 00 FF 
02dcc     A0 E5 85 F1 | 	sub	objptr, ##62368
02dd0     01 24 16 F2 | 	cmp	local04, #1 wc
02dd4     3C 00 90 CD |  if_b	jmp	#LR__0133
02dd8     01 3A 0E F2 | 	cmp	local15, #1 wz
02ddc     57 00 00 AF 
02de0     24 E4 05 A1 |  if_e	add	objptr, ##44580
02de4     F2 26 02 AB |  if_e	rdlong	local05, objptr
02de8     57 00 00 AF 
02dec     24 E4 85 A1 |  if_e	sub	objptr, ##44580
02df0     03 26 0E A2 |  if_e	cmp	local05, #3 wz
02df4     1C 00 90 5D |  if_ne	jmp	#LR__0133
02df8     79 00 00 FF 
02dfc     A0 E5 05 F1 | 	add	objptr, ##62368
02e00     F2 12 02 FB | 	rdlong	arg01, objptr
02e04     79 00 00 FF 
02e08     A0 E5 85 F1 | 	sub	objptr, ##62368
02e0c     D0 26 B0 FD | 	call	#_deleteline
02e10     4C 05 90 FD | 	jmp	#LR__0150
02e14                 | LR__0133
02e14                 | ' 
02e14                 | ' if linenum>0  andalso (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  
02e14     79 00 00 FF 
02e18     A0 E5 05 F1 | 	add	objptr, ##62368
02e1c     F2 24 02 FB | 	rdlong	local04, objptr
02e20     79 00 00 FF 
02e24     A0 E5 85 F1 | 	sub	objptr, ##62368
02e28     01 24 16 F2 | 	cmp	local04, #1 wc
02e2c     EC 00 90 CD |  if_b	jmp	#LR__0136
02e30     57 00 00 FF 
02e34     24 E4 05 F1 | 	add	objptr, ##44580
02e38     F2 26 02 FB | 	rdlong	local05, objptr
02e3c     57 00 00 FF 
02e40     24 E4 85 F1 | 	sub	objptr, ##44580
02e44     13 2F 0A F6 | 	mov	local09, local05 wz
02e48     20 00 90 AD |  if_e	jmp	#LR__0134
02e4c     57 00 00 FF 
02e50     24 E4 05 F1 | 	add	objptr, ##44580
02e54     F2 32 02 FB | 	rdlong	local11, objptr
02e58     57 00 00 FF 
02e5c     24 E4 85 F1 | 	sub	objptr, ##44580
02e60     19 29 02 F6 | 	mov	local06, local11
02e64     03 28 0E F2 | 	cmp	local06, #3 wz
02e68     B0 00 90 5D |  if_ne	jmp	#LR__0136
02e6c                 | LR__0134
02e6c     55 00 00 FF 
02e70     20 E4 05 F1 | 	add	objptr, ##43552
02e74     F2 36 02 FB | 	rdlong	local13, objptr
02e78     55 00 00 FF 
02e7c     20 E4 85 F1 | 	sub	objptr, ##43552
02e80     1B 31 02 F6 | 	mov	local10, local13
02e84     1B 30 0E F2 | 	cmp	local10, #27 wz
02e88     90 00 90 AD |  if_e	jmp	#LR__0136
02e8c     79 00 00 FF 
02e90     A0 E5 05 F1 | 	add	objptr, ##62368
02e94     F2 12 02 FB | 	rdlong	arg01, objptr
02e98     22 00 00 FF 
02e9c     7C E5 85 F1 | 	sub	objptr, ##17788
02ea0     F2 16 02 FB | 	rdlong	arg03, objptr
02ea4     57 00 00 FF 
02ea8     24 E4 85 F1 | 	sub	objptr, ##44580
02eac     00 14 06 F6 | 	mov	arg02, #0
02eb0     94 3A B0 FD | 	call	#_compile
02eb4     FD 1E 0A F6 | 	mov	local01, result1 wz
02eb8                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02eb8                 | '   if err<>0 then printerror(err): goto 104
02eb8     0C 00 90 AD |  if_e	jmp	#LR__0135
02ebc     0F 13 02 F6 | 	mov	arg01, local01
02ec0     D8 77 B1 FD | 	call	#_printerror
02ec4     98 04 90 FD | 	jmp	#LR__0150
02ec8                 | LR__0135
02ec8                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
02ec8     79 00 00 FF 
02ecc     EC E5 05 F1 | 	add	objptr, ##62444
02ed0     F2 12 02 FB | 	rdlong	arg01, objptr
02ed4     79 00 00 FF 
02ed8     EC E5 85 F1 | 	sub	objptr, ##62444
02edc     71 01 00 FF 
02ee0     10 14 06 F6 | 	mov	arg02, ##@LR__4840
02ee4     58 BC B1 FD | 	call	#__system___string_cmp
02ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
02eec     70 04 90 AD |  if_e	jmp	#LR__0150
02ef0     79 00 00 FF 
02ef4     EC E5 05 F1 | 	add	objptr, ##62444
02ef8     F2 24 02 FB | 	rdlong	local04, objptr
02efc     22 00 00 FF 
02f00     D0 E5 85 F1 | 	sub	objptr, ##17872
02f04     F2 24 62 FC | 	wrlong	local04, objptr
02f08     08 E4 05 F1 | 	add	objptr, #8
02f0c     F2 08 68 FC | 	wrlong	#4, objptr
02f10     57 00 00 FF 
02f14     24 E4 85 F1 | 	sub	objptr, ##44580
02f18     6C DB 9F FD | 	jmp	#LR__0020
02f1c                 | LR__0136
02f1c                 | '       							
02f1c                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 
02f1c     79 00 00 FF 
02f20     A0 E5 05 F1 | 	add	objptr, ##62368
02f24     F2 24 02 FB | 	rdlong	local04, objptr
02f28     79 00 00 FF 
02f2c     A0 E5 85 F1 | 	sub	objptr, ##62368
02f30     01 24 16 F2 | 	cmp	local04, #1 wc
02f34     EC 00 90 CD |  if_b	jmp	#LR__0139
02f38     57 00 00 FF 
02f3c     24 E4 05 F1 | 	add	objptr, ##44580
02f40     F2 26 02 FB | 	rdlong	local05, objptr
02f44     57 00 00 FF 
02f48     24 E4 85 F1 | 	sub	objptr, ##44580
02f4c     01 26 0E F2 | 	cmp	local05, #1 wz
02f50     20 00 90 AD |  if_e	jmp	#LR__0137
02f54     57 00 00 FF 
02f58     24 E4 05 F1 | 	add	objptr, ##44580
02f5c     F2 32 02 FB | 	rdlong	local11, objptr
02f60     57 00 00 FF 
02f64     24 E4 85 F1 | 	sub	objptr, ##44580
02f68     19 29 02 F6 | 	mov	local06, local11
02f6c     02 28 0E F2 | 	cmp	local06, #2 wz
02f70     B0 00 90 5D |  if_ne	jmp	#LR__0139
02f74                 | LR__0137
02f74     55 00 00 FF 
02f78     18 E4 05 F1 | 	add	objptr, ##43544
02f7c     F2 36 02 FB | 	rdlong	local13, objptr
02f80     55 00 00 FF 
02f84     18 E4 85 F1 | 	sub	objptr, ##43544
02f88     1B 31 02 F6 | 	mov	local10, local13
02f8c     1B 30 0E F2 | 	cmp	local10, #27 wz
02f90     90 00 90 AD |  if_e	jmp	#LR__0139
02f94     79 00 00 FF 
02f98     A0 E5 05 F1 | 	add	objptr, ##62368
02f9c     F2 12 02 FB | 	rdlong	arg01, objptr
02fa0     22 00 00 FF 
02fa4     7C E5 85 F1 | 	sub	objptr, ##17788
02fa8     F2 16 02 FB | 	rdlong	arg03, objptr
02fac     57 00 00 FF 
02fb0     24 E4 85 F1 | 	sub	objptr, ##44580
02fb4     00 14 06 F6 | 	mov	arg02, #0
02fb8     8C 39 B0 FD | 	call	#_compile
02fbc     FD 1E 0A F6 | 	mov	local01, result1 wz
02fc0                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02fc0                 | '   if err<>0 then printerror(err): goto 104
02fc0     0C 00 90 AD |  if_e	jmp	#LR__0138
02fc4     0F 13 02 F6 | 	mov	arg01, local01
02fc8     D0 76 B1 FD | 	call	#_printerror
02fcc     90 03 90 FD | 	jmp	#LR__0150
02fd0                 | LR__0138
02fd0                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
02fd0     79 00 00 FF 
02fd4     EC E5 05 F1 | 	add	objptr, ##62444
02fd8     F2 12 02 FB | 	rdlong	arg01, objptr
02fdc     79 00 00 FF 
02fe0     EC E5 85 F1 | 	sub	objptr, ##62444
02fe4     71 01 00 FF 
02fe8     11 14 06 F6 | 	mov	arg02, ##@LR__4841
02fec     50 BB B1 FD | 	call	#__system___string_cmp
02ff0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ff4     68 03 90 AD |  if_e	jmp	#LR__0150
02ff8     79 00 00 FF 
02ffc     EC E5 05 F1 | 	add	objptr, ##62444
03000     F2 24 02 FB | 	rdlong	local04, objptr
03004     22 00 00 FF 
03008     D0 E5 85 F1 | 	sub	objptr, ##17872
0300c     F2 24 62 FC | 	wrlong	local04, objptr
03010     08 E4 05 F1 | 	add	objptr, #8
03014     F2 08 68 FC | 	wrlong	#4, objptr
03018     57 00 00 FF 
0301c     24 E4 85 F1 | 	sub	objptr, ##44580
03020     64 DA 9F FD | 	jmp	#LR__0020
03024                 | LR__0139
03024                 | ' 							 
03024                 | ' if linenum>0 andalso (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  
03024     79 00 00 FF 
03028     A0 E5 05 F1 | 	add	objptr, ##62368
0302c     F2 24 02 FB | 	rdlong	local04, objptr
03030     79 00 00 FF 
03034     A0 E5 85 F1 | 	sub	objptr, ##62368
03038     01 24 16 F2 | 	cmp	local04, #1 wc
0303c     D4 00 90 CD |  if_b	jmp	#LR__0141
03040     57 00 00 FF 
03044     24 E4 05 F1 | 	add	objptr, ##44580
03048     F2 26 0A FB | 	rdlong	local05, objptr wz
0304c     57 00 00 FF 
03050     24 E4 85 F1 | 	sub	objptr, ##44580
03054     20 00 90 AD |  if_e	jmp	#LR__0140
03058     57 00 00 FF 
0305c     24 E4 05 F1 | 	add	objptr, ##44580
03060     F2 32 02 FB | 	rdlong	local11, objptr
03064     57 00 00 FF 
03068     24 E4 85 F1 | 	sub	objptr, ##44580
0306c     19 29 02 F6 | 	mov	local06, local11
03070     03 28 0E F2 | 	cmp	local06, #3 wz
03074     9C 00 90 5D |  if_ne	jmp	#LR__0141
03078                 | LR__0140
03078     55 00 00 FF 
0307c     20 E4 05 F1 | 	add	objptr, ##43552
03080     F2 36 02 FB | 	rdlong	local13, objptr
03084     55 00 00 FF 
03088     20 E4 85 F1 | 	sub	objptr, ##43552
0308c     1B 31 02 F6 | 	mov	local10, local13
03090     1B 30 0E F2 | 	cmp	local10, #27 wz
03094     7C 00 90 5D |  if_ne	jmp	#LR__0141
03098     79 00 00 FF 
0309c     A0 E5 05 F1 | 	add	objptr, ##62368
030a0     F2 12 02 FB | 	rdlong	arg01, objptr
030a4     22 00 00 FF 
030a8     7C E5 85 F1 | 	sub	objptr, ##17788
030ac     F2 16 02 FB | 	rdlong	arg03, objptr
030b0     57 00 00 FF 
030b4     24 E4 85 F1 | 	sub	objptr, ##44580
030b8     00 14 06 F6 | 	mov	arg02, #0
030bc     58 39 B0 FD | 	call	#_compile_assign
030c0                 | '   compile_assign(linenum,0,cont)': print "called compile_assign with cont=";cont, "line$=";line$
030c0                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
030c0     79 00 00 FF 
030c4     EC E5 05 F1 | 	add	objptr, ##62444
030c8     F2 12 02 FB | 	rdlong	arg01, objptr
030cc     79 00 00 FF 
030d0     EC E5 85 F1 | 	sub	objptr, ##62444
030d4     71 01 00 FF 
030d8     12 14 06 F6 | 	mov	arg02, ##@LR__4842
030dc     60 BA B1 FD | 	call	#__system___string_cmp
030e0     00 FA 0D F2 | 	cmp	result1, #0 wz
030e4     78 02 90 AD |  if_e	jmp	#LR__0150
030e8     79 00 00 FF 
030ec     EC E5 05 F1 | 	add	objptr, ##62444
030f0     F2 24 02 FB | 	rdlong	local04, objptr
030f4     22 00 00 FF 
030f8     D0 E5 85 F1 | 	sub	objptr, ##17872
030fc     F2 24 62 FC | 	wrlong	local04, objptr
03100     08 E4 05 F1 | 	add	objptr, #8
03104     F2 08 68 FC | 	wrlong	#4, objptr
03108     57 00 00 FF 
0310c     24 E4 85 F1 | 	sub	objptr, ##44580
03110     74 D9 9F FD | 	jmp	#LR__0020
03114                 | LR__0141
03114                 | '     							 
03114                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 
03114     79 00 00 FF 
03118     A0 E5 05 F1 | 	add	objptr, ##62368
0311c     F2 24 02 FB | 	rdlong	local04, objptr
03120     79 00 00 FF 
03124     A0 E5 85 F1 | 	sub	objptr, ##62368
03128     01 24 16 F2 | 	cmp	local04, #1 wc
0312c     CC 00 90 CD |  if_b	jmp	#LR__0142
03130     57 00 00 FF 
03134     24 E4 05 F1 | 	add	objptr, ##44580
03138     F2 26 02 FB | 	rdlong	local05, objptr
0313c     57 00 00 FF 
03140     24 E4 85 F1 | 	sub	objptr, ##44580
03144     01 26 0E F2 | 	cmp	local05, #1 wz
03148     57 00 00 5F 
0314c     24 E4 05 51 |  if_ne	add	objptr, ##44580
03150     F2 32 02 5B |  if_ne	rdlong	local11, objptr
03154     57 00 00 5F 
03158     24 E4 85 51 |  if_ne	sub	objptr, ##44580
0315c     02 32 0E 52 |  if_ne	cmp	local11, #2 wz
03160     55 00 00 AF 
03164     18 E4 05 A1 |  if_e	add	objptr, ##43544
03168     F2 36 02 AB |  if_e	rdlong	local13, objptr
0316c     55 00 00 AF 
03170     18 E4 85 A1 |  if_e	sub	objptr, ##43544
03174     1B 31 02 A6 |  if_e	mov	local10, local13
03178     1B 30 0E A2 |  if_e	cmp	local10, #27 wz
0317c     7C 00 90 5D |  if_ne	jmp	#LR__0142
03180     79 00 00 FF 
03184     A0 E5 05 F1 | 	add	objptr, ##62368
03188     F2 12 02 FB | 	rdlong	arg01, objptr
0318c     22 00 00 FF 
03190     7C E5 85 F1 | 	sub	objptr, ##17788
03194     F2 16 02 FB | 	rdlong	arg03, objptr
03198     57 00 00 FF 
0319c     24 E4 85 F1 | 	sub	objptr, ##44580
031a0     00 14 06 F6 | 	mov	arg02, #0
031a4     70 38 B0 FD | 	call	#_compile_assign
031a8                 | '   compile_assign(linenum,0,cont) ': print "called compile_assign with cont=";cont, "line$=";line$
031a8                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								'<-- TODO: add a line to a program
031a8     79 00 00 FF 
031ac     EC E5 05 F1 | 	add	objptr, ##62444
031b0     F2 12 02 FB | 	rdlong	arg01, objptr
031b4     79 00 00 FF 
031b8     EC E5 85 F1 | 	sub	objptr, ##62444
031bc     71 01 00 FF 
031c0     13 14 06 F6 | 	mov	arg02, ##@LR__4843
031c4     78 B9 B1 FD | 	call	#__system___string_cmp
031c8     00 FA 0D F2 | 	cmp	result1, #0 wz
031cc     90 01 90 AD |  if_e	jmp	#LR__0150
031d0     79 00 00 FF 
031d4     EC E5 05 F1 | 	add	objptr, ##62444
031d8     F2 24 02 FB | 	rdlong	local04, objptr
031dc     22 00 00 FF 
031e0     D0 E5 85 F1 | 	sub	objptr, ##17872
031e4     F2 24 62 FC | 	wrlong	local04, objptr
031e8     08 E4 05 F1 | 	add	objptr, #8
031ec     F2 08 68 FC | 	wrlong	#4, objptr
031f0     57 00 00 FF 
031f4     24 E4 85 F1 | 	sub	objptr, ##44580
031f8     8C D8 9F FD | 	jmp	#LR__0020
031fc                 | LR__0142
031fc                 | ' 
031fc                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_eq then compile_assign(0) : goto 103    					' assign a variable
031fc     55 00 00 FF 
03200     10 E4 05 F1 | 	add	objptr, ##43536
03204     F2 24 02 FB | 	rdlong	local04, objptr
03208     55 00 00 FF 
0320c     10 E4 85 F1 | 	sub	objptr, ##43536
03210     01 00 00 FF 
03214     04 24 0E F2 | 	cmp	local04, ##516 wz
03218     55 00 00 AF 
0321c     18 E4 05 A1 |  if_e	add	objptr, ##43544
03220     F2 2E 02 AB |  if_e	rdlong	local09, objptr
03224     55 00 00 AF 
03228     18 E4 85 A1 |  if_e	sub	objptr, ##43544
0322c     1B 2E 0E A2 |  if_e	cmp	local09, #27 wz
03230     14 00 90 5D |  if_ne	jmp	#LR__0143
03234     00 12 06 F6 | 	mov	arg01, #0
03238     00 14 06 F6 | 	mov	arg02, #0
0323c     00 16 06 F6 | 	mov	arg03, #0
03240     D4 37 B0 FD | 	call	#_compile_assign
03244     90 00 90 FD | 	jmp	#LR__0145
03248                 | LR__0143
03248                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_rpar then print " User functions and arrays not yet implemented" : goto 101
03248     55 00 00 FF 
0324c     10 E4 05 F1 | 	add	objptr, ##43536
03250     F2 24 02 FB | 	rdlong	local04, objptr
03254     55 00 00 FF 
03258     10 E4 85 F1 | 	sub	objptr, ##43536
0325c     01 00 00 FF 
03260     04 24 0E F2 | 	cmp	local04, ##516 wz
03264     55 00 00 AF 
03268     18 E4 05 A1 |  if_e	add	objptr, ##43544
0326c     F2 2E 02 AB |  if_e	rdlong	local09, objptr
03270     55 00 00 AF 
03274     18 E4 85 A1 |  if_e	sub	objptr, ##43544
03278     14 2E 0E A2 |  if_e	cmp	local09, #20 wz
0327c     44 00 90 5D |  if_ne	jmp	#LR__0144
03280     00 12 06 F6 | 	mov	arg01, #0
03284     28 12 B2 FD | 	call	#__system___getiolock_0484
03288     FD 12 02 F6 | 	mov	arg01, result1
0328c     88 B8 B1 FD | 	call	#__system___lockmem
03290     71 01 00 FF 
03294     14 14 06 F6 | 	mov	arg02, ##@LR__4844
03298     00 12 06 F6 | 	mov	arg01, #0
0329c     00 16 06 F6 | 	mov	arg03, #0
032a0     7C C5 B1 FD | 	call	#__system___basic_print_string
032a4     00 12 06 F6 | 	mov	arg01, #0
032a8     0A 14 06 F6 | 	mov	arg02, #10
032ac     00 16 06 F6 | 	mov	arg03, #0
032b0     14 C5 B1 FD | 	call	#__system___basic_print_char
032b4     00 12 06 F6 | 	mov	arg01, #0
032b8     F4 11 B2 FD | 	call	#__system___getiolock_0484
032bc     FD 00 68 FC | 	wrlong	#0, result1
032c0     7C 00 90 FD | 	jmp	#LR__0149
032c4                 | LR__0144
032c4     00 12 06 F6 | 	mov	arg01, #0
032c8     00 14 06 F6 | 	mov	arg02, #0
032cc     00 16 06 F6 | 	mov	arg03, #0
032d0     74 36 B0 FD | 	call	#_compile
032d4     FD 1E 02 F6 | 	mov	local01, result1
032d8                 | LR__0145
032d8                 | ' 
032d8                 | ' ' if we are here, this is not a program line to add, so try to execute this
032d8                 | ' 
032d8                 | ' err=compile(0) : '' execute(0) ' print "  this is a command to execute"  ''' param=line to compile
032d8                 | ' 103  'for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, : next i
032d8                 | ' if err=0 then execute_line() else printerror(err)
032d8     00 1E 0E F2 | 	cmp	local01, #0 wz
032dc     0C 00 90 5D |  if_ne	jmp	#LR__0146
032e0     00 12 06 F6 | 	mov	arg01, #0
032e4     74 74 B0 FD | 	call	#_execute_line
032e8     08 00 90 FD | 	jmp	#LR__0147
032ec                 | LR__0146
032ec     0F 13 02 F6 | 	mov	arg01, local01
032f0     A8 73 B1 FD | 	call	#_printerror
032f4                 | LR__0147
032f4                 | ' if rest$<>"" then line$=rest$:  goto 108 
032f4     79 00 00 FF 
032f8     EC E5 05 F1 | 	add	objptr, ##62444
032fc     F2 12 02 FB | 	rdlong	arg01, objptr
03300     79 00 00 FF 
03304     EC E5 85 F1 | 	sub	objptr, ##62444
03308     71 01 00 FF 
0330c     43 14 06 F6 | 	mov	arg02, ##@LR__4845
03310     2C B8 B1 FD | 	call	#__system___string_cmp
03314     00 FA 0D F2 | 	cmp	result1, #0 wz
03318     24 00 90 AD |  if_e	jmp	#LR__0148
0331c     79 00 00 FF 
03320     EC E5 05 F1 | 	add	objptr, ##62444
03324     F2 24 02 FB | 	rdlong	local04, objptr
03328     22 00 00 FF 
0332c     D0 E5 85 F1 | 	sub	objptr, ##17872
03330     F2 24 62 FC | 	wrlong	local04, objptr
03334     57 00 00 FF 
03338     1C E4 85 F1 | 	sub	objptr, ##44572
0333c     48 D7 9F FD | 	jmp	#LR__0020
03340                 | LR__0148
03340                 | LR__0149
03340     71 01 00 FF 
03344     44 12 06 F6 | 	mov	arg01, ##@LR__4846
03348                 | ' 
03348                 | ' write(text)
03348     00 A5 B1 FD | 	call	#_hg010b_spin2_write
0334c                 | ' crlf
0334c     C8 A7 B1 FD | 	call	#_hg010b_spin2_crlf
03350     71 01 00 FF 
03354     45 12 06 F6 | 	mov	arg01, ##@LR__4847
03358                 | ' 
03358                 | ' write(text)
03358     F0 A4 B1 FD | 	call	#_hg010b_spin2_write
0335c                 | ' crlf
0335c     B8 A7 B1 FD | 	call	#_hg010b_spin2_crlf
03360                 | LR__0150
03360     A7 F0 03 F6 | 	mov	ptra, fp
03364     B2 00 A0 FD | 	call	#popregs_
03368                 | _interpret_ret
03368     2D 00 64 FD | 	ret
0336c                 | 
0336c                 | ' 
0336c                 | ' 
0336c                 | ' '------------------------------ Helper functions for the tokenizer -------------------------------------------
0336c                 | ' 
0336c                 | ' function isoperator(s as string) as ubyte
0336c                 | _isoperator
0336c     01 4A 05 F6 | 	mov	COUNT_, #1
03370     A8 00 A0 FD | 	call	#pushregs_
03374                 | ' 
03374                 | ' select case s
03374     09 1F 02 F6 | 	mov	local01, arg01
03378     71 01 00 FF 
0337c     4B 14 06 F6 | 	mov	arg02, ##@LR__4848
03380     0F 13 02 F6 | 	mov	arg01, local01
03384     B8 B7 B1 FD | 	call	#__system___string_cmp
03388     00 FA 0D F2 | 	cmp	result1, #0 wz
0338c     FC 01 90 AD |  if_e	jmp	#LR__0160
03390     71 01 00 FF 
03394     4D 14 06 F6 | 	mov	arg02, ##@LR__4849
03398     0F 13 02 F6 | 	mov	arg01, local01
0339c     A0 B7 B1 FD | 	call	#__system___string_cmp
033a0     00 FA 0D F2 | 	cmp	result1, #0 wz
033a4     EC 01 90 AD |  if_e	jmp	#LR__0161
033a8     71 01 00 FF 
033ac     4F 14 06 F6 | 	mov	arg02, ##@LR__4850
033b0     0F 13 02 F6 | 	mov	arg01, local01
033b4     88 B7 B1 FD | 	call	#__system___string_cmp
033b8     00 FA 0D F2 | 	cmp	result1, #0 wz
033bc     DC 01 90 AD |  if_e	jmp	#LR__0162
033c0     71 01 00 FF 
033c4     52 14 06 F6 | 	mov	arg02, ##@LR__4851
033c8     0F 13 02 F6 | 	mov	arg01, local01
033cc     70 B7 B1 FD | 	call	#__system___string_cmp
033d0     00 FA 0D F2 | 	cmp	result1, #0 wz
033d4     CC 01 90 AD |  if_e	jmp	#LR__0163
033d8     71 01 00 FF 
033dc     56 14 06 F6 | 	mov	arg02, ##@LR__4852
033e0     0F 13 02 F6 | 	mov	arg01, local01
033e4     58 B7 B1 FD | 	call	#__system___string_cmp
033e8     00 FA 0D F2 | 	cmp	result1, #0 wz
033ec     BC 01 90 AD |  if_e	jmp	#LR__0164
033f0     71 01 00 FF 
033f4     58 14 06 F6 | 	mov	arg02, ##@LR__4853
033f8     0F 13 02 F6 | 	mov	arg01, local01
033fc     40 B7 B1 FD | 	call	#__system___string_cmp
03400     00 FA 0D F2 | 	cmp	result1, #0 wz
03404     AC 01 90 AD |  if_e	jmp	#LR__0165
03408     71 01 00 FF 
0340c     5A 14 06 F6 | 	mov	arg02, ##@LR__4854
03410     0F 13 02 F6 | 	mov	arg01, local01
03414     28 B7 B1 FD | 	call	#__system___string_cmp
03418     00 FA 0D F2 | 	cmp	result1, #0 wz
0341c     9C 01 90 AD |  if_e	jmp	#LR__0166
03420     71 01 00 FF 
03424     5E 14 06 F6 | 	mov	arg02, ##@LR__4855
03428     0F 13 02 F6 | 	mov	arg01, local01
0342c     10 B7 B1 FD | 	call	#__system___string_cmp
03430     00 FA 0D F2 | 	cmp	result1, #0 wz
03434     8C 01 90 AD |  if_e	jmp	#LR__0167
03438     71 01 00 FF 
0343c     62 14 06 F6 | 	mov	arg02, ##@LR__4856
03440     0F 13 02 F6 | 	mov	arg01, local01
03444     F8 B6 B1 FD | 	call	#__system___string_cmp
03448     00 FA 0D F2 | 	cmp	result1, #0 wz
0344c     7C 01 90 AD |  if_e	jmp	#LR__0168
03450     71 01 00 FF 
03454     66 14 06 F6 | 	mov	arg02, ##@LR__4857
03458     0F 13 02 F6 | 	mov	arg01, local01
0345c     E0 B6 B1 FD | 	call	#__system___string_cmp
03460     00 FA 0D F2 | 	cmp	result1, #0 wz
03464     6C 01 90 AD |  if_e	jmp	#LR__0169
03468     71 01 00 FF 
0346c     6A 14 06 F6 | 	mov	arg02, ##@LR__4858
03470     0F 13 02 F6 | 	mov	arg01, local01
03474     C8 B6 B1 FD | 	call	#__system___string_cmp
03478     00 FA 0D F2 | 	cmp	result1, #0 wz
0347c     5C 01 90 AD |  if_e	jmp	#LR__0170
03480     71 01 00 FF 
03484     6E 14 06 F6 | 	mov	arg02, ##@LR__4859
03488     0F 13 02 F6 | 	mov	arg01, local01
0348c     B0 B6 B1 FD | 	call	#__system___string_cmp
03490     00 FA 0D F2 | 	cmp	result1, #0 wz
03494     4C 01 90 AD |  if_e	jmp	#LR__0171
03498     71 01 00 FF 
0349c     70 14 06 F6 | 	mov	arg02, ##@LR__4860
034a0     0F 13 02 F6 | 	mov	arg01, local01
034a4     98 B6 B1 FD | 	call	#__system___string_cmp
034a8     00 FA 0D F2 | 	cmp	result1, #0 wz
034ac     3C 01 90 AD |  if_e	jmp	#LR__0172
034b0     71 01 00 FF 
034b4     74 14 06 F6 | 	mov	arg02, ##@LR__4861
034b8     0F 13 02 F6 | 	mov	arg01, local01
034bc     80 B6 B1 FD | 	call	#__system___string_cmp
034c0     00 FA 0D F2 | 	cmp	result1, #0 wz
034c4     2C 01 90 AD |  if_e	jmp	#LR__0173
034c8     71 01 00 FF 
034cc     76 14 06 F6 | 	mov	arg02, ##@LR__4862
034d0     0F 13 02 F6 | 	mov	arg01, local01
034d4     68 B6 B1 FD | 	call	#__system___string_cmp
034d8     00 FA 0D F2 | 	cmp	result1, #0 wz
034dc     1C 01 90 AD |  if_e	jmp	#LR__0174
034e0     71 01 00 FF 
034e4     78 14 06 F6 | 	mov	arg02, ##@LR__4863
034e8     0F 13 02 F6 | 	mov	arg01, local01
034ec     50 B6 B1 FD | 	call	#__system___string_cmp
034f0     00 FA 0D F2 | 	cmp	result1, #0 wz
034f4     0C 01 90 AD |  if_e	jmp	#LR__0175
034f8     71 01 00 FF 
034fc     7B 14 06 F6 | 	mov	arg02, ##@LR__4864
03500     0F 13 02 F6 | 	mov	arg01, local01
03504     38 B6 B1 FD | 	call	#__system___string_cmp
03508     00 FA 0D F2 | 	cmp	result1, #0 wz
0350c     FC 00 90 AD |  if_e	jmp	#LR__0176
03510     71 01 00 FF 
03514     7E 14 06 F6 | 	mov	arg02, ##@LR__4865
03518     0F 13 02 F6 | 	mov	arg01, local01
0351c     20 B6 B1 FD | 	call	#__system___string_cmp
03520     00 FA 0D F2 | 	cmp	result1, #0 wz
03524     EC 00 90 AD |  if_e	jmp	#LR__0177
03528     71 01 00 FF 
0352c     80 14 06 F6 | 	mov	arg02, ##@LR__4866
03530     0F 13 02 F6 | 	mov	arg01, local01
03534     08 B6 B1 FD | 	call	#__system___string_cmp
03538     00 FA 0D F2 | 	cmp	result1, #0 wz
0353c     DC 00 90 AD |  if_e	jmp	#LR__0178
03540     71 01 00 FF 
03544     82 14 06 F6 | 	mov	arg02, ##@LR__4867
03548     0F 13 02 F6 | 	mov	arg01, local01
0354c     F0 B5 B1 FD | 	call	#__system___string_cmp
03550     00 FA 0D F2 | 	cmp	result1, #0 wz
03554     CC 00 90 AD |  if_e	jmp	#LR__0179
03558     71 01 00 FF 
0355c     85 14 06 F6 | 	mov	arg02, ##@LR__4868
03560     0F 13 02 F6 | 	mov	arg01, local01
03564     D8 B5 B1 FD | 	call	#__system___string_cmp
03568     00 FA 0D F2 | 	cmp	result1, #0 wz
0356c     BC 00 90 AD |  if_e	jmp	#LR__0180
03570     71 01 00 FF 
03574     88 14 06 F6 | 	mov	arg02, ##@LR__4869
03578     0F 13 02 F6 | 	mov	arg01, local01
0357c     C0 B5 B1 FD | 	call	#__system___string_cmp
03580     00 FA 0D F2 | 	cmp	result1, #0 wz
03584     AC 00 90 AD |  if_e	jmp	#LR__0181
03588     B0 00 90 FD | 	jmp	#LR__0182
0358c                 | LR__0160
0358c     01 FA 05 F6 | 	mov	result1, #1
03590     AC 00 90 FD | 	jmp	#LR__0183
03594                 | LR__0161
03594     02 FA 05 F6 | 	mov	result1, #2
03598     A4 00 90 FD | 	jmp	#LR__0183
0359c                 | LR__0162
0359c     03 FA 05 F6 | 	mov	result1, #3
035a0     9C 00 90 FD | 	jmp	#LR__0183
035a4                 | LR__0163
035a4     04 FA 05 F6 | 	mov	result1, #4
035a8     94 00 90 FD | 	jmp	#LR__0183
035ac                 | LR__0164
035ac     05 FA 05 F6 | 	mov	result1, #5
035b0     8C 00 90 FD | 	jmp	#LR__0183
035b4                 | LR__0165
035b4     06 FA 05 F6 | 	mov	result1, #6
035b8     84 00 90 FD | 	jmp	#LR__0183
035bc                 | LR__0166
035bc     07 FA 05 F6 | 	mov	result1, #7
035c0     7C 00 90 FD | 	jmp	#LR__0183
035c4                 | LR__0167
035c4     08 FA 05 F6 | 	mov	result1, #8
035c8     74 00 90 FD | 	jmp	#LR__0183
035cc                 | LR__0168
035cc     09 FA 05 F6 | 	mov	result1, #9
035d0     6C 00 90 FD | 	jmp	#LR__0183
035d4                 | LR__0169
035d4     0A FA 05 F6 | 	mov	result1, #10
035d8     64 00 90 FD | 	jmp	#LR__0183
035dc                 | LR__0170
035dc     0B FA 05 F6 | 	mov	result1, #11
035e0     5C 00 90 FD | 	jmp	#LR__0183
035e4                 | LR__0171
035e4     0C FA 05 F6 | 	mov	result1, #12
035e8     54 00 90 FD | 	jmp	#LR__0183
035ec                 | LR__0172
035ec     0D FA 05 F6 | 	mov	result1, #13
035f0     4C 00 90 FD | 	jmp	#LR__0183
035f4                 | LR__0173
035f4     0E FA 05 F6 | 	mov	result1, #14
035f8     44 00 90 FD | 	jmp	#LR__0183
035fc                 | LR__0174
035fc     1B FA 05 F6 | 	mov	result1, #27
03600     3C 00 90 FD | 	jmp	#LR__0183
03604                 | LR__0175
03604     27 FA 05 F6 | 	mov	result1, #39
03608     34 00 90 FD | 	jmp	#LR__0183
0360c                 | LR__0176
0360c     26 FA 05 F6 | 	mov	result1, #38
03610     2C 00 90 FD | 	jmp	#LR__0183
03614                 | LR__0177
03614     10 FA 05 F6 | 	mov	result1, #16
03618     24 00 90 FD | 	jmp	#LR__0183
0361c                 | LR__0178
0361c     0F FA 05 F6 | 	mov	result1, #15
03620     1C 00 90 FD | 	jmp	#LR__0183
03624                 | LR__0179
03624     2A FA 05 F6 | 	mov	result1, #42
03628     14 00 90 FD | 	jmp	#LR__0183
0362c                 | LR__0180
0362c     28 FA 05 F6 | 	mov	result1, #40
03630     0C 00 90 FD | 	jmp	#LR__0183
03634                 | LR__0181
03634     29 FA 05 F6 | 	mov	result1, #41
03638     04 00 90 FD | 	jmp	#LR__0183
0363c                 | LR__0182
0363c     00 FA 05 F6 | 	mov	result1, #0
03640                 | LR__0183
03640     A7 F0 03 F6 | 	mov	ptra, fp
03644     B2 00 A0 FD | 	call	#popregs_
03648                 | _isoperator_ret
03648     2D 00 64 FD | 	ret
0364c                 | 
0364c                 | ' 
0364c                 | ' 
0364c                 | ' function isnotename(s as string) as ulong
0364c                 | _isnotename
0364c     07 4A 05 F6 | 	mov	COUNT_, #7
03650     A8 00 A0 FD | 	call	#pushregs_
03654                 | ' if left$(s,1)<>"#" then return 0
03654     09 1F 02 F6 | 	mov	local01, arg01
03658     01 14 06 F6 | 	mov	arg02, #1
0365c     00 D5 B1 FD | 	call	#__system__Left_S
03660     FD 12 02 F6 | 	mov	arg01, result1
03664     71 01 00 FF 
03668     8B 14 06 F6 | 	mov	arg02, ##@LR__4870
0366c     D0 B4 B1 FD | 	call	#__system___string_cmp
03670     00 FA 0D F2 | 	cmp	result1, #0 wz
03674     00 FA 05 56 |  if_ne	mov	result1, #0
03678     30 03 90 5D |  if_ne	jmp	#LR__0213
0367c                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
0367c     0F 13 02 F6 | 	mov	arg01, local01
03680     03 14 06 F6 | 	mov	arg02, #3
03684     01 16 06 F6 | 	mov	arg03, #1
03688     EC D5 B1 FD | 	call	#__system__Mid_S
0368c     FD 12 02 F6 | 	mov	arg01, result1
03690     71 01 00 FF 
03694     8D 14 06 F6 | 	mov	arg02, ##@LR__4871
03698     A4 B4 B1 FD | 	call	#__system___string_cmp
0369c     00 FA 0D F2 | 	cmp	result1, #0 wz
036a0     18 00 90 5D |  if_ne	jmp	#LR__0190
036a4     0F 13 02 F6 | 	mov	arg01, local01
036a8     02 14 06 F6 | 	mov	arg02, #2
036ac     02 16 06 F6 | 	mov	arg03, #2
036b0     C4 D5 B1 FD | 	call	#__system__Mid_S
036b4     FD 20 02 F6 | 	mov	local02, result1
036b8     14 00 90 FD | 	jmp	#LR__0191
036bc                 | LR__0190
036bc     0F 13 02 F6 | 	mov	arg01, local01
036c0     02 14 06 F6 | 	mov	arg02, #2
036c4     01 16 06 F6 | 	mov	arg03, #1
036c8     AC D5 B1 FD | 	call	#__system__Mid_S
036cc     FD 20 02 F6 | 	mov	local02, result1
036d0                 | LR__0191
036d0                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
036d0     0F 13 02 F6 | 	mov	arg01, local01
036d4     09 23 02 F6 | 	mov	local03, arg01
036d8     97 06 48 FB | 	callpa	#(@LR__0193-@LR__0192)>>2,fcache_load_ptr_
036dc                 | LR__0192
036dc     11 FB C9 FA | 	rdbyte	result1, local03 wz
036e0     01 22 06 51 |  if_ne	add	local03, #1
036e4     F4 FF 9F 5D |  if_ne	jmp	#LR__0192
036e8                 | LR__0193
036e8     09 23 82 F1 | 	sub	local03, arg01
036ec     11 15 02 F6 | 	mov	arg02, local03
036f0     01 14 86 F1 | 	sub	arg02, #1
036f4     0F 13 02 F6 | 	mov	arg01, local01
036f8     01 16 06 F6 | 	mov	arg03, #1
036fc     78 D5 B1 FD | 	call	#__system__Mid_S
03700     FD 12 02 F6 | 	mov	arg01, result1
03704     71 01 00 FF 
03708     8F 14 06 F6 | 	mov	arg02, ##@LR__4872
0370c     30 B4 B1 FD | 	call	#__system___string_cmp
03710     00 FA 0D F2 | 	cmp	result1, #0 wz
03714     28 00 90 AD |  if_e	jmp	#LR__0194
03718     0F 13 02 F6 | 	mov	arg01, local01
0371c     01 14 06 F6 | 	mov	arg02, #1
03720     C4 D4 B1 FD | 	call	#__system__Right_S
03724     FD 12 02 F6 | 	mov	arg01, result1
03728     54 E7 B1 FD | 	call	#__system____builtin_atof
0372c     FD 12 02 F6 | 	mov	arg01, result1
03730     00 14 06 F6 | 	mov	arg02, #0
03734     28 E4 B1 FD | 	call	#__system___float_tointeger
03738     FD 24 02 F6 | 	mov	local04, result1
0373c     34 00 90 FD | 	jmp	#LR__0195
03740                 | LR__0194
03740     0F 13 02 F6 | 	mov	arg01, local01
03744     01 14 06 F6 | 	mov	arg02, #1
03748     9C D4 B1 FD | 	call	#__system__Right_S
0374c     FD 12 02 F6 | 	mov	arg01, result1
03750     2C E7 B1 FD | 	call	#__system____builtin_atof
03754     FD 14 02 F6 | 	mov	arg02, result1
03758     00 C0 5F FF 
0375c     00 12 06 F6 | 	mov	arg01, ##-1082130432
03760     34 DF B1 FD | 	call	#__system___float_mul
03764     FD 12 02 F6 | 	mov	arg01, result1
03768     00 14 06 F6 | 	mov	arg02, #0
0376c     F0 E3 B1 FD | 	call	#__system___float_tointeger
03770     FD 24 02 F6 | 	mov	local04, result1
03774                 | LR__0195
03774                 | ' 
03774                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
03774     00 24 0E F2 | 	cmp	local04, #0 wz
03778     24 00 90 5D |  if_ne	jmp	#LR__0196
0377c     0F 13 02 F6 | 	mov	arg01, local01
03780     01 14 06 F6 | 	mov	arg02, #1
03784     60 D4 B1 FD | 	call	#__system__Right_S
03788     FD 12 02 F6 | 	mov	arg01, result1
0378c     71 01 00 FF 
03790     91 14 06 F6 | 	mov	arg02, ##@LR__4873
03794     A8 B3 B1 FD | 	call	#__system___string_cmp
03798     00 FA 0D F2 | 	cmp	result1, #0 wz
0379c     04 24 06 56 |  if_ne	mov	local04, #4
037a0                 | LR__0196
037a0                 | ' 
037a0                 | ' select case s1
037a0     10 27 02 F6 | 	mov	local05, local02
037a4     71 01 00 FF 
037a8     93 14 06 F6 | 	mov	arg02, ##@LR__4874
037ac     13 13 02 F6 | 	mov	arg01, local05
037b0     8C B3 B1 FD | 	call	#__system___string_cmp
037b4     00 FA 0D F2 | 	cmp	result1, #0 wz
037b8     24 01 90 AD |  if_e	jmp	#LR__0197
037bc     71 01 00 FF 
037c0     95 14 06 F6 | 	mov	arg02, ##@LR__4875
037c4     13 13 02 F6 | 	mov	arg01, local05
037c8     74 B3 B1 FD | 	call	#__system___string_cmp
037cc     00 FA 0D F2 | 	cmp	result1, #0 wz
037d0     18 01 90 AD |  if_e	jmp	#LR__0198
037d4     71 01 00 FF 
037d8     98 14 06 F6 | 	mov	arg02, ##@LR__4876
037dc     13 13 02 F6 | 	mov	arg01, local05
037e0     5C B3 B1 FD | 	call	#__system___string_cmp
037e4     00 FA 0D F2 | 	cmp	result1, #0 wz
037e8     0C 01 90 AD |  if_e	jmp	#LR__0199
037ec     71 01 00 FF 
037f0     9A 14 06 F6 | 	mov	arg02, ##@LR__4877
037f4     13 13 02 F6 | 	mov	arg01, local05
037f8     44 B3 B1 FD | 	call	#__system___string_cmp
037fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03800     00 01 90 AD |  if_e	jmp	#LR__0200
03804     71 01 00 FF 
03808     9D 14 06 F6 | 	mov	arg02, ##@LR__4878
0380c     13 13 02 F6 | 	mov	arg01, local05
03810     2C B3 B1 FD | 	call	#__system___string_cmp
03814     00 FA 0D F2 | 	cmp	result1, #0 wz
03818     F4 00 90 AD |  if_e	jmp	#LR__0201
0381c     71 01 00 FF 
03820     9F 14 06 F6 | 	mov	arg02, ##@LR__4879
03824     13 13 02 F6 | 	mov	arg01, local05
03828     14 B3 B1 FD | 	call	#__system___string_cmp
0382c     00 FA 0D F2 | 	cmp	result1, #0 wz
03830     E8 00 90 AD |  if_e	jmp	#LR__0202
03834     71 01 00 FF 
03838     A1 14 06 F6 | 	mov	arg02, ##@LR__4880
0383c     13 13 02 F6 | 	mov	arg01, local05
03840     FC B2 B1 FD | 	call	#__system___string_cmp
03844     00 FA 0D F2 | 	cmp	result1, #0 wz
03848     DC 00 90 AD |  if_e	jmp	#LR__0203
0384c     71 01 00 FF 
03850     A4 14 06 F6 | 	mov	arg02, ##@LR__4881
03854     13 13 02 F6 | 	mov	arg01, local05
03858     E4 B2 B1 FD | 	call	#__system___string_cmp
0385c     00 FA 0D F2 | 	cmp	result1, #0 wz
03860     D0 00 90 AD |  if_e	jmp	#LR__0204
03864     71 01 00 FF 
03868     A6 14 06 F6 | 	mov	arg02, ##@LR__4882
0386c     13 13 02 F6 | 	mov	arg01, local05
03870     CC B2 B1 FD | 	call	#__system___string_cmp
03874     00 FA 0D F2 | 	cmp	result1, #0 wz
03878     C4 00 90 AD |  if_e	jmp	#LR__0205
0387c     71 01 00 FF 
03880     A9 14 06 F6 | 	mov	arg02, ##@LR__4883
03884     13 13 02 F6 | 	mov	arg01, local05
03888     B4 B2 B1 FD | 	call	#__system___string_cmp
0388c     00 FA 0D F2 | 	cmp	result1, #0 wz
03890     B8 00 90 AD |  if_e	jmp	#LR__0206
03894     71 01 00 FF 
03898     AB 14 06 F6 | 	mov	arg02, ##@LR__4884
0389c     13 13 02 F6 | 	mov	arg01, local05
038a0     9C B2 B1 FD | 	call	#__system___string_cmp
038a4     00 FA 0D F2 | 	cmp	result1, #0 wz
038a8     AC 00 90 AD |  if_e	jmp	#LR__0207
038ac     71 01 00 FF 
038b0     AE 14 06 F6 | 	mov	arg02, ##@LR__4885
038b4     13 13 02 F6 | 	mov	arg01, local05
038b8     84 B2 B1 FD | 	call	#__system___string_cmp
038bc     00 FA 0D F2 | 	cmp	result1, #0 wz
038c0     A0 00 90 AD |  if_e	jmp	#LR__0208
038c4     71 01 00 FF 
038c8     B0 14 06 F6 | 	mov	arg02, ##@LR__4886
038cc     13 13 02 F6 | 	mov	arg01, local05
038d0     6C B2 B1 FD | 	call	#__system___string_cmp
038d4     00 FA 0D F2 | 	cmp	result1, #0 wz
038d8     94 00 90 AD |  if_e	jmp	#LR__0209
038dc     9C 00 90 FD | 	jmp	#LR__0210
038e0                 | LR__0197
038e0     01 00 00 FF 
038e4     00 29 06 F6 | 	mov	local06, ##768
038e8     98 00 90 FD | 	jmp	#LR__0211
038ec                 | LR__0198
038ec     01 00 00 FF 
038f0     01 29 06 F6 | 	mov	local06, ##769
038f4     8C 00 90 FD | 	jmp	#LR__0211
038f8                 | LR__0199
038f8     01 00 00 FF 
038fc     02 29 06 F6 | 	mov	local06, ##770
03900     80 00 90 FD | 	jmp	#LR__0211
03904                 | LR__0200
03904     01 00 00 FF 
03908     03 29 06 F6 | 	mov	local06, ##771
0390c     74 00 90 FD | 	jmp	#LR__0211
03910                 | LR__0201
03910     01 00 00 FF 
03914     04 29 06 F6 | 	mov	local06, ##772
03918     68 00 90 FD | 	jmp	#LR__0211
0391c                 | LR__0202
0391c     01 00 00 FF 
03920     05 29 06 F6 | 	mov	local06, ##773
03924     5C 00 90 FD | 	jmp	#LR__0211
03928                 | LR__0203
03928     01 00 00 FF 
0392c     06 29 06 F6 | 	mov	local06, ##774
03930     50 00 90 FD | 	jmp	#LR__0211
03934                 | LR__0204
03934     01 00 00 FF 
03938     07 29 06 F6 | 	mov	local06, ##775
0393c     44 00 90 FD | 	jmp	#LR__0211
03940                 | LR__0205
03940     01 00 00 FF 
03944     08 29 06 F6 | 	mov	local06, ##776
03948     38 00 90 FD | 	jmp	#LR__0211
0394c                 | LR__0206
0394c     01 00 00 FF 
03950     09 29 06 F6 | 	mov	local06, ##777
03954     2C 00 90 FD | 	jmp	#LR__0211
03958                 | LR__0207
03958     01 00 00 FF 
0395c     0A 29 06 F6 | 	mov	local06, ##778
03960     20 00 90 FD | 	jmp	#LR__0211
03964                 | LR__0208
03964     01 00 00 FF 
03968     0B 29 06 F6 | 	mov	local06, ##779
0396c     14 00 90 FD | 	jmp	#LR__0211
03970                 | LR__0209
03970     01 00 00 FF 
03974     0B 29 06 F6 | 	mov	local06, ##779
03978     08 00 90 FD | 	jmp	#LR__0211
0397c                 | LR__0210
0397c     00 FA 05 F6 | 	mov	result1, #0
03980     28 00 90 FD | 	jmp	#LR__0213
03984                 | LR__0211
03984                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
03984     FF FF 7F FF 
03988     FF 25 56 F2 | 	cmps	local04, ##-1 wc
0398c     18 00 90 CD |  if_b	jmp	#LR__0212
03990     0A 24 56 F2 | 	cmps	local04, #10 wc
03994     12 2B 02 C6 |  if_b	mov	local07, local04
03998     01 2A 66 C0 |  if_b	shl	local07, #1
0399c     12 2B 02 C1 |  if_b	add	local07, local04
039a0     02 2A 66 C0 |  if_b	shl	local07, #2
039a4     15 29 02 C1 |  if_b	add	local06, local07
039a8                 | LR__0212
039a8                 | ' return token
039a8     14 FB 01 F6 | 	mov	result1, local06
039ac                 | LR__0213
039ac     A7 F0 03 F6 | 	mov	ptra, fp
039b0     B2 00 A0 FD | 	call	#popregs_
039b4                 | _isnotename_ret
039b4     2D 00 64 FD | 	ret
039b8                 | 
039b8                 | ' 
039b8                 | ' 
039b8                 | ' function isseparator(s as string) as ubyte
039b8                 | _isseparator
039b8     01 4A 05 F6 | 	mov	COUNT_, #1
039bc     A8 00 A0 FD | 	call	#pushregs_
039c0                 | ' 
039c0                 | ' select case s
039c0     09 1F 02 F6 | 	mov	local01, arg01
039c4     71 01 00 FF 
039c8     B2 14 06 F6 | 	mov	arg02, ##@LR__4887
039cc     0F 13 02 F6 | 	mov	arg01, local01
039d0     6C B1 B1 FD | 	call	#__system___string_cmp
039d4     00 FA 0D F2 | 	cmp	result1, #0 wz
039d8     54 01 90 AD |  if_e	jmp	#LR__0220
039dc     71 01 00 FF 
039e0     B4 14 06 F6 | 	mov	arg02, ##@LR__4888
039e4     0F 13 02 F6 | 	mov	arg01, local01
039e8     54 B1 B1 FD | 	call	#__system___string_cmp
039ec     00 FA 0D F2 | 	cmp	result1, #0 wz
039f0     44 01 90 AD |  if_e	jmp	#LR__0221
039f4     71 01 00 FF 
039f8     B6 14 06 F6 | 	mov	arg02, ##@LR__4889
039fc     0F 13 02 F6 | 	mov	arg01, local01
03a00     3C B1 B1 FD | 	call	#__system___string_cmp
03a04     00 FA 0D F2 | 	cmp	result1, #0 wz
03a08     34 01 90 AD |  if_e	jmp	#LR__0222
03a0c     71 01 00 FF 
03a10     B8 14 06 F6 | 	mov	arg02, ##@LR__4890
03a14     0F 13 02 F6 | 	mov	arg01, local01
03a18     24 B1 B1 FD | 	call	#__system___string_cmp
03a1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a20     24 01 90 AD |  if_e	jmp	#LR__0223
03a24     71 01 00 FF 
03a28     BA 14 06 F6 | 	mov	arg02, ##@LR__4891
03a2c     0F 13 02 F6 | 	mov	arg01, local01
03a30     0C B1 B1 FD | 	call	#__system___string_cmp
03a34     00 FA 0D F2 | 	cmp	result1, #0 wz
03a38     14 01 90 AD |  if_e	jmp	#LR__0224
03a3c     71 01 00 FF 
03a40     BC 14 06 F6 | 	mov	arg02, ##@LR__4892
03a44     0F 13 02 F6 | 	mov	arg01, local01
03a48     F4 B0 B1 FD | 	call	#__system___string_cmp
03a4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a50     04 01 90 AD |  if_e	jmp	#LR__0225
03a54     71 01 00 FF 
03a58     BE 14 06 F6 | 	mov	arg02, ##@LR__4893
03a5c     0F 13 02 F6 | 	mov	arg01, local01
03a60     DC B0 B1 FD | 	call	#__system___string_cmp
03a64     00 FA 0D F2 | 	cmp	result1, #0 wz
03a68     F4 00 90 AD |  if_e	jmp	#LR__0226
03a6c     71 01 00 FF 
03a70     C0 14 06 F6 | 	mov	arg02, ##@LR__4894
03a74     0F 13 02 F6 | 	mov	arg01, local01
03a78     C4 B0 B1 FD | 	call	#__system___string_cmp
03a7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a80     E4 00 90 AD |  if_e	jmp	#LR__0227
03a84     71 01 00 FF 
03a88     C2 14 06 F6 | 	mov	arg02, ##@LR__4895
03a8c     0F 13 02 F6 | 	mov	arg01, local01
03a90     AC B0 B1 FD | 	call	#__system___string_cmp
03a94     00 FA 0D F2 | 	cmp	result1, #0 wz
03a98     D4 00 90 AD |  if_e	jmp	#LR__0228
03a9c     71 01 00 FF 
03aa0     C4 14 06 F6 | 	mov	arg02, ##@LR__4896
03aa4     0F 13 02 F6 | 	mov	arg01, local01
03aa8     94 B0 B1 FD | 	call	#__system___string_cmp
03aac     00 FA 0D F2 | 	cmp	result1, #0 wz
03ab0     C4 00 90 AD |  if_e	jmp	#LR__0229
03ab4     71 01 00 FF 
03ab8     C6 14 06 F6 | 	mov	arg02, ##@LR__4897
03abc     0F 13 02 F6 | 	mov	arg01, local01
03ac0     7C B0 B1 FD | 	call	#__system___string_cmp
03ac4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ac8     B4 00 90 AD |  if_e	jmp	#LR__0230
03acc     71 01 00 FF 
03ad0     C8 14 06 F6 | 	mov	arg02, ##@LR__4898
03ad4     0F 13 02 F6 | 	mov	arg01, local01
03ad8     64 B0 B1 FD | 	call	#__system___string_cmp
03adc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ae0     A4 00 90 AD |  if_e	jmp	#LR__0231
03ae4     71 01 00 FF 
03ae8     CA 14 06 F6 | 	mov	arg02, ##@LR__4899
03aec     0F 13 02 F6 | 	mov	arg01, local01
03af0     4C B0 B1 FD | 	call	#__system___string_cmp
03af4     00 FA 0D F2 | 	cmp	result1, #0 wz
03af8     94 00 90 AD |  if_e	jmp	#LR__0232
03afc     71 01 00 FF 
03b00     CC 14 06 F6 | 	mov	arg02, ##@LR__4900
03b04     0F 13 02 F6 | 	mov	arg01, local01
03b08     34 B0 B1 FD | 	call	#__system___string_cmp
03b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b10     84 00 90 AD |  if_e	jmp	#LR__0233
03b14     71 01 00 FF 
03b18     CE 14 06 F6 | 	mov	arg02, ##@LR__4901
03b1c     0F 13 02 F6 | 	mov	arg01, local01
03b20     1C B0 B1 FD | 	call	#__system___string_cmp
03b24     00 FA 0D F2 | 	cmp	result1, #0 wz
03b28     74 00 90 AD |  if_e	jmp	#LR__0234
03b2c     78 00 90 FD | 	jmp	#LR__0235
03b30                 | LR__0220
03b30     01 FA 05 F6 | 	mov	result1, #1
03b34     74 00 90 FD | 	jmp	#LR__0236
03b38                 | LR__0221
03b38     02 FA 05 F6 | 	mov	result1, #2
03b3c     6C 00 90 FD | 	jmp	#LR__0236
03b40                 | LR__0222
03b40     1B FA 05 F6 | 	mov	result1, #27
03b44     64 00 90 FD | 	jmp	#LR__0236
03b48                 | LR__0223
03b48     11 FA 05 F6 | 	mov	result1, #17
03b4c     5C 00 90 FD | 	jmp	#LR__0236
03b50                 | LR__0224
03b50     05 FA 05 F6 | 	mov	result1, #5
03b54     54 00 90 FD | 	jmp	#LR__0236
03b58                 | LR__0225
03b58     06 FA 05 F6 | 	mov	result1, #6
03b5c     4C 00 90 FD | 	jmp	#LR__0236
03b60                 | LR__0226
03b60     12 FA 05 F6 | 	mov	result1, #18
03b64     44 00 90 FD | 	jmp	#LR__0236
03b68                 | LR__0227
03b68     13 FA 05 F6 | 	mov	result1, #19
03b6c     3C 00 90 FD | 	jmp	#LR__0236
03b70                 | LR__0228
03b70     0C FA 05 F6 | 	mov	result1, #12
03b74     34 00 90 FD | 	jmp	#LR__0236
03b78                 | LR__0229
03b78     14 FA 05 F6 | 	mov	result1, #20
03b7c     2C 00 90 FD | 	jmp	#LR__0236
03b80                 | LR__0230
03b80     15 FA 05 F6 | 	mov	result1, #21
03b84     24 00 90 FD | 	jmp	#LR__0236
03b88                 | LR__0231
03b88     16 FA 05 F6 | 	mov	result1, #22
03b8c     1C 00 90 FD | 	jmp	#LR__0236
03b90                 | LR__0232
03b90     FF FB 05 F6 | 	mov	result1, #511
03b94     14 00 90 FD | 	jmp	#LR__0236
03b98                 | LR__0233
03b98     0F FA 05 F6 | 	mov	result1, #15
03b9c     0C 00 90 FD | 	jmp	#LR__0236
03ba0                 | LR__0234
03ba0     10 FA 05 F6 | 	mov	result1, #16
03ba4     04 00 90 FD | 	jmp	#LR__0236
03ba8                 | LR__0235
03ba8     00 FA 05 F6 | 	mov	result1, #0
03bac                 | LR__0236
03bac     A7 F0 03 F6 | 	mov	ptra, fp
03bb0     B2 00 A0 FD | 	call	#popregs_
03bb4                 | _isseparator_ret
03bb4     2D 00 64 FD | 	ret
03bb8                 | 
03bb8                 | ' 
03bb8                 | ' 
03bb8                 | ' function iscommand(s as string) as ubyte
03bb8                 | _iscommand
03bb8     01 4A 05 F6 | 	mov	COUNT_, #1
03bbc     A8 00 A0 FD | 	call	#pushregs_
03bc0                 | ' 
03bc0                 | ' select case s
03bc0     09 1F 02 F6 | 	mov	local01, arg01
03bc4     71 01 00 FF 
03bc8     D2 14 06 F6 | 	mov	arg02, ##@LR__4903
03bcc     0F 13 02 F6 | 	mov	arg01, local01
03bd0     6C AF B1 FD | 	call	#__system___string_cmp
03bd4     00 FA 0D F2 | 	cmp	result1, #0 wz
03bd8     EC 08 90 AD |  if_e	jmp	#LR__0240
03bdc     71 01 00 FF 
03be0     D7 14 06 F6 | 	mov	arg02, ##@LR__4904
03be4     0F 13 02 F6 | 	mov	arg01, local01
03be8     54 AF B1 FD | 	call	#__system___string_cmp
03bec     00 FA 0D F2 | 	cmp	result1, #0 wz
03bf0     DC 08 90 AD |  if_e	jmp	#LR__0241
03bf4     71 01 00 FF 
03bf8     DA 14 06 F6 | 	mov	arg02, ##@LR__4905
03bfc     0F 13 02 F6 | 	mov	arg01, local01
03c00     3C AF B1 FD | 	call	#__system___string_cmp
03c04     00 FA 0D F2 | 	cmp	result1, #0 wz
03c08     CC 08 90 AD |  if_e	jmp	#LR__0242
03c0c     71 01 00 FF 
03c10     DE 14 06 F6 | 	mov	arg02, ##@LR__4906
03c14     0F 13 02 F6 | 	mov	arg01, local01
03c18     24 AF B1 FD | 	call	#__system___string_cmp
03c1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c20     BC 08 90 AD |  if_e	jmp	#LR__0243
03c24     71 01 00 FF 
03c28     E3 14 06 F6 | 	mov	arg02, ##@LR__4907
03c2c     0F 13 02 F6 | 	mov	arg01, local01
03c30     0C AF B1 FD | 	call	#__system___string_cmp
03c34     00 FA 0D F2 | 	cmp	result1, #0 wz
03c38     AC 08 90 AD |  if_e	jmp	#LR__0244
03c3c     71 01 00 FF 
03c40     E7 14 06 F6 | 	mov	arg02, ##@LR__4908
03c44     0F 13 02 F6 | 	mov	arg01, local01
03c48     F4 AE B1 FD | 	call	#__system___string_cmp
03c4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c50     9C 08 90 AD |  if_e	jmp	#LR__0245
03c54     71 01 00 FF 
03c58     EE 14 06 F6 | 	mov	arg02, ##@LR__4909
03c5c     0F 13 02 F6 | 	mov	arg01, local01
03c60     DC AE B1 FD | 	call	#__system___string_cmp
03c64     00 FA 0D F2 | 	cmp	result1, #0 wz
03c68     8C 08 90 AD |  if_e	jmp	#LR__0246
03c6c     71 01 00 FF 
03c70     F2 14 06 F6 | 	mov	arg02, ##@LR__4910
03c74     0F 13 02 F6 | 	mov	arg01, local01
03c78     C4 AE B1 FD | 	call	#__system___string_cmp
03c7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c80     7C 08 90 AD |  if_e	jmp	#LR__0247
03c84     71 01 00 FF 
03c88     F8 14 06 F6 | 	mov	arg02, ##@LR__4911
03c8c     0F 13 02 F6 | 	mov	arg01, local01
03c90     AC AE B1 FD | 	call	#__system___string_cmp
03c94     00 FA 0D F2 | 	cmp	result1, #0 wz
03c98     6C 08 90 AD |  if_e	jmp	#LR__0248
03c9c     71 01 00 FF 
03ca0     FC 14 06 F6 | 	mov	arg02, ##@LR__4912
03ca4     0F 13 02 F6 | 	mov	arg01, local01
03ca8     94 AE B1 FD | 	call	#__system___string_cmp
03cac     00 FA 0D F2 | 	cmp	result1, #0 wz
03cb0     5C 08 90 AD |  if_e	jmp	#LR__0249
03cb4     71 01 00 FF 
03cb8     02 15 06 F6 | 	mov	arg02, ##@LR__4913
03cbc     0F 13 02 F6 | 	mov	arg01, local01
03cc0     7C AE B1 FD | 	call	#__system___string_cmp
03cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cc8     4C 08 90 AD |  if_e	jmp	#LR__0250
03ccc     71 01 00 FF 
03cd0     05 15 06 F6 | 	mov	arg02, ##@LR__4914
03cd4     0F 13 02 F6 | 	mov	arg01, local01
03cd8     64 AE B1 FD | 	call	#__system___string_cmp
03cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ce0     3C 08 90 AD |  if_e	jmp	#LR__0251
03ce4     71 01 00 FF 
03ce8     0B 15 06 F6 | 	mov	arg02, ##@LR__4915
03cec     0F 13 02 F6 | 	mov	arg01, local01
03cf0     4C AE B1 FD | 	call	#__system___string_cmp
03cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cf8     2C 08 90 AD |  if_e	jmp	#LR__0252
03cfc     71 01 00 FF 
03d00     0F 15 06 F6 | 	mov	arg02, ##@LR__4916
03d04     0F 13 02 F6 | 	mov	arg01, local01
03d08     34 AE B1 FD | 	call	#__system___string_cmp
03d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d10     1C 08 90 AD |  if_e	jmp	#LR__0253
03d14     71 01 00 FF 
03d18     16 15 06 F6 | 	mov	arg02, ##@LR__4917
03d1c     0F 13 02 F6 | 	mov	arg01, local01
03d20     1C AE B1 FD | 	call	#__system___string_cmp
03d24     00 FA 0D F2 | 	cmp	result1, #0 wz
03d28     0C 08 90 AD |  if_e	jmp	#LR__0254
03d2c     71 01 00 FF 
03d30     1D 15 06 F6 | 	mov	arg02, ##@LR__4918
03d34     0F 13 02 F6 | 	mov	arg01, local01
03d38     04 AE B1 FD | 	call	#__system___string_cmp
03d3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d40     FC 07 90 AD |  if_e	jmp	#LR__0255
03d44     71 01 00 FF 
03d48     24 15 06 F6 | 	mov	arg02, ##@LR__4919
03d4c     0F 13 02 F6 | 	mov	arg01, local01
03d50     EC AD B1 FD | 	call	#__system___string_cmp
03d54     00 FA 0D F2 | 	cmp	result1, #0 wz
03d58     EC 07 90 AD |  if_e	jmp	#LR__0256
03d5c     71 01 00 FF 
03d60     2E 15 06 F6 | 	mov	arg02, ##@LR__4920
03d64     0F 13 02 F6 | 	mov	arg01, local01
03d68     D4 AD B1 FD | 	call	#__system___string_cmp
03d6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d70     DC 07 90 AD |  if_e	jmp	#LR__0257
03d74     71 01 00 FF 
03d78     32 15 06 F6 | 	mov	arg02, ##@LR__4921
03d7c     0F 13 02 F6 | 	mov	arg01, local01
03d80     BC AD B1 FD | 	call	#__system___string_cmp
03d84     00 FA 0D F2 | 	cmp	result1, #0 wz
03d88     CC 07 90 AD |  if_e	jmp	#LR__0258
03d8c     71 01 00 FF 
03d90     36 15 06 F6 | 	mov	arg02, ##@LR__4922
03d94     0F 13 02 F6 | 	mov	arg01, local01
03d98     A4 AD B1 FD | 	call	#__system___string_cmp
03d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03da0     BC 07 90 AD |  if_e	jmp	#LR__0259
03da4     71 01 00 FF 
03da8     3A 15 06 F6 | 	mov	arg02, ##@LR__4923
03dac     0F 13 02 F6 | 	mov	arg01, local01
03db0     8C AD B1 FD | 	call	#__system___string_cmp
03db4     00 FA 0D F2 | 	cmp	result1, #0 wz
03db8     AC 07 90 AD |  if_e	jmp	#LR__0260
03dbc     71 01 00 FF 
03dc0     3E 15 06 F6 | 	mov	arg02, ##@LR__4924
03dc4     0F 13 02 F6 | 	mov	arg01, local01
03dc8     74 AD B1 FD | 	call	#__system___string_cmp
03dcc     00 FA 0D F2 | 	cmp	result1, #0 wz
03dd0     9C 07 90 AD |  if_e	jmp	#LR__0261
03dd4     71 01 00 FF 
03dd8     44 15 06 F6 | 	mov	arg02, ##@LR__4925
03ddc     0F 13 02 F6 | 	mov	arg01, local01
03de0     5C AD B1 FD | 	call	#__system___string_cmp
03de4     00 FA 0D F2 | 	cmp	result1, #0 wz
03de8     8C 07 90 AD |  if_e	jmp	#LR__0262
03dec     71 01 00 FF 
03df0     49 15 06 F6 | 	mov	arg02, ##@LR__4926
03df4     0F 13 02 F6 | 	mov	arg01, local01
03df8     44 AD B1 FD | 	call	#__system___string_cmp
03dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
03e00     7C 07 90 AD |  if_e	jmp	#LR__0263
03e04     71 01 00 FF 
03e08     4D 15 06 F6 | 	mov	arg02, ##@LR__4927
03e0c     0F 13 02 F6 | 	mov	arg01, local01
03e10     2C AD B1 FD | 	call	#__system___string_cmp
03e14     00 FA 0D F2 | 	cmp	result1, #0 wz
03e18     6C 07 90 AD |  if_e	jmp	#LR__0264
03e1c     71 01 00 FF 
03e20     52 15 06 F6 | 	mov	arg02, ##@LR__4928
03e24     0F 13 02 F6 | 	mov	arg01, local01
03e28     14 AD B1 FD | 	call	#__system___string_cmp
03e2c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e30     5C 07 90 AD |  if_e	jmp	#LR__0265
03e34     71 01 00 FF 
03e38     56 15 06 F6 | 	mov	arg02, ##@LR__4929
03e3c     0F 13 02 F6 | 	mov	arg01, local01
03e40     FC AC B1 FD | 	call	#__system___string_cmp
03e44     00 FA 0D F2 | 	cmp	result1, #0 wz
03e48     4C 07 90 AD |  if_e	jmp	#LR__0266
03e4c     71 01 00 FF 
03e50     5E 15 06 F6 | 	mov	arg02, ##@LR__4930
03e54     0F 13 02 F6 | 	mov	arg01, local01
03e58     E4 AC B1 FD | 	call	#__system___string_cmp
03e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e60     3C 07 90 AD |  if_e	jmp	#LR__0267
03e64     71 01 00 FF 
03e68     62 15 06 F6 | 	mov	arg02, ##@LR__4931
03e6c     0F 13 02 F6 | 	mov	arg01, local01
03e70     CC AC B1 FD | 	call	#__system___string_cmp
03e74     00 FA 0D F2 | 	cmp	result1, #0 wz
03e78     2C 07 90 AD |  if_e	jmp	#LR__0268
03e7c     71 01 00 FF 
03e80     67 15 06 F6 | 	mov	arg02, ##@LR__4932
03e84     0F 13 02 F6 | 	mov	arg01, local01
03e88     B4 AC B1 FD | 	call	#__system___string_cmp
03e8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e90     1C 07 90 AD |  if_e	jmp	#LR__0269
03e94     71 01 00 FF 
03e98     6B 15 06 F6 | 	mov	arg02, ##@LR__4933
03e9c     0F 13 02 F6 | 	mov	arg01, local01
03ea0     9C AC B1 FD | 	call	#__system___string_cmp
03ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ea8     0C 07 90 AD |  if_e	jmp	#LR__0270
03eac     71 01 00 FF 
03eb0     70 15 06 F6 | 	mov	arg02, ##@LR__4934
03eb4     0F 13 02 F6 | 	mov	arg01, local01
03eb8     84 AC B1 FD | 	call	#__system___string_cmp
03ebc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ec0     FC 06 90 AD |  if_e	jmp	#LR__0271
03ec4     71 01 00 FF 
03ec8     74 15 06 F6 | 	mov	arg02, ##@LR__4935
03ecc     0F 13 02 F6 | 	mov	arg01, local01
03ed0     6C AC B1 FD | 	call	#__system___string_cmp
03ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ed8     EC 06 90 AD |  if_e	jmp	#LR__0272
03edc     71 01 00 FF 
03ee0     77 15 06 F6 | 	mov	arg02, ##@LR__4936
03ee4     0F 13 02 F6 | 	mov	arg01, local01
03ee8     54 AC B1 FD | 	call	#__system___string_cmp
03eec     00 FA 0D F2 | 	cmp	result1, #0 wz
03ef0     DC 06 90 AD |  if_e	jmp	#LR__0273
03ef4     71 01 00 FF 
03ef8     7D 15 06 F6 | 	mov	arg02, ##@LR__4937
03efc     0F 13 02 F6 | 	mov	arg01, local01
03f00     3C AC B1 FD | 	call	#__system___string_cmp
03f04     00 FA 0D F2 | 	cmp	result1, #0 wz
03f08     CC 06 90 AD |  if_e	jmp	#LR__0274
03f0c     71 01 00 FF 
03f10     81 15 06 F6 | 	mov	arg02, ##@LR__4938
03f14     0F 13 02 F6 | 	mov	arg01, local01
03f18     24 AC B1 FD | 	call	#__system___string_cmp
03f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f20     BC 06 90 AD |  if_e	jmp	#LR__0275
03f24     71 01 00 FF 
03f28     87 15 06 F6 | 	mov	arg02, ##@LR__4939
03f2c     0F 13 02 F6 | 	mov	arg01, local01
03f30     0C AC B1 FD | 	call	#__system___string_cmp
03f34     00 FA 0D F2 | 	cmp	result1, #0 wz
03f38     AC 06 90 AD |  if_e	jmp	#LR__0276
03f3c     71 01 00 FF 
03f40     8C 15 06 F6 | 	mov	arg02, ##@LR__4940
03f44     0F 13 02 F6 | 	mov	arg01, local01
03f48     F4 AB B1 FD | 	call	#__system___string_cmp
03f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f50     9C 06 90 AD |  if_e	jmp	#LR__0277
03f54     71 01 00 FF 
03f58     8F 15 06 F6 | 	mov	arg02, ##@LR__4941
03f5c     0F 13 02 F6 | 	mov	arg01, local01
03f60     DC AB B1 FD | 	call	#__system___string_cmp
03f64     00 FA 0D F2 | 	cmp	result1, #0 wz
03f68     8C 06 90 AD |  if_e	jmp	#LR__0278
03f6c     71 01 00 FF 
03f70     92 15 06 F6 | 	mov	arg02, ##@LR__4942
03f74     0F 13 02 F6 | 	mov	arg01, local01
03f78     C4 AB B1 FD | 	call	#__system___string_cmp
03f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f80     7C 06 90 AD |  if_e	jmp	#LR__0279
03f84     71 01 00 FF 
03f88     96 15 06 F6 | 	mov	arg02, ##@LR__4943
03f8c     0F 13 02 F6 | 	mov	arg01, local01
03f90     AC AB B1 FD | 	call	#__system___string_cmp
03f94     00 FA 0D F2 | 	cmp	result1, #0 wz
03f98     6C 06 90 AD |  if_e	jmp	#LR__0280
03f9c     71 01 00 FF 
03fa0     99 15 06 F6 | 	mov	arg02, ##@LR__4944
03fa4     0F 13 02 F6 | 	mov	arg01, local01
03fa8     94 AB B1 FD | 	call	#__system___string_cmp
03fac     00 FA 0D F2 | 	cmp	result1, #0 wz
03fb0     5C 06 90 AD |  if_e	jmp	#LR__0281
03fb4     71 01 00 FF 
03fb8     9D 15 06 F6 | 	mov	arg02, ##@LR__4945
03fbc     0F 13 02 F6 | 	mov	arg01, local01
03fc0     7C AB B1 FD | 	call	#__system___string_cmp
03fc4     00 FA 0D F2 | 	cmp	result1, #0 wz
03fc8     4C 06 90 AD |  if_e	jmp	#LR__0282
03fcc     71 01 00 FF 
03fd0     A2 15 06 F6 | 	mov	arg02, ##@LR__4946
03fd4     0F 13 02 F6 | 	mov	arg01, local01
03fd8     64 AB B1 FD | 	call	#__system___string_cmp
03fdc     00 FA 0D F2 | 	cmp	result1, #0 wz
03fe0     3C 06 90 AD |  if_e	jmp	#LR__0283
03fe4     71 01 00 FF 
03fe8     A5 15 06 F6 | 	mov	arg02, ##@LR__4947
03fec     0F 13 02 F6 | 	mov	arg01, local01
03ff0     4C AB B1 FD | 	call	#__system___string_cmp
03ff4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ff8     2C 06 90 AD |  if_e	jmp	#LR__0284
03ffc     71 01 00 FF 
04000     AA 15 06 F6 | 	mov	arg02, ##@LR__4948
04004     0F 13 02 F6 | 	mov	arg01, local01
04008     34 AB B1 FD | 	call	#__system___string_cmp
0400c     00 FA 0D F2 | 	cmp	result1, #0 wz
04010     1C 06 90 AD |  if_e	jmp	#LR__0285
04014     71 01 00 FF 
04018     AE 15 06 F6 | 	mov	arg02, ##@LR__4949
0401c     0F 13 02 F6 | 	mov	arg01, local01
04020     1C AB B1 FD | 	call	#__system___string_cmp
04024     00 FA 0D F2 | 	cmp	result1, #0 wz
04028     0C 06 90 AD |  if_e	jmp	#LR__0286
0402c     71 01 00 FF 
04030     B4 15 06 F6 | 	mov	arg02, ##@LR__4950
04034     0F 13 02 F6 | 	mov	arg01, local01
04038     04 AB B1 FD | 	call	#__system___string_cmp
0403c     00 FA 0D F2 | 	cmp	result1, #0 wz
04040     FC 05 90 AD |  if_e	jmp	#LR__0287
04044     71 01 00 FF 
04048     B9 15 06 F6 | 	mov	arg02, ##@LR__4951
0404c     0F 13 02 F6 | 	mov	arg01, local01
04050     EC AA B1 FD | 	call	#__system___string_cmp
04054     00 FA 0D F2 | 	cmp	result1, #0 wz
04058     EC 05 90 AD |  if_e	jmp	#LR__0288
0405c     71 01 00 FF 
04060     BC 15 06 F6 | 	mov	arg02, ##@LR__4952
04064     0F 13 02 F6 | 	mov	arg01, local01
04068     D4 AA B1 FD | 	call	#__system___string_cmp
0406c     00 FA 0D F2 | 	cmp	result1, #0 wz
04070     DC 05 90 AD |  if_e	jmp	#LR__0289
04074     71 01 00 FF 
04078     C2 15 06 F6 | 	mov	arg02, ##@LR__4953
0407c     0F 13 02 F6 | 	mov	arg01, local01
04080     BC AA B1 FD | 	call	#__system___string_cmp
04084     00 FA 0D F2 | 	cmp	result1, #0 wz
04088     CC 05 90 AD |  if_e	jmp	#LR__0290
0408c     71 01 00 FF 
04090     C6 15 06 F6 | 	mov	arg02, ##@LR__4954
04094     0F 13 02 F6 | 	mov	arg01, local01
04098     A4 AA B1 FD | 	call	#__system___string_cmp
0409c     00 FA 0D F2 | 	cmp	result1, #0 wz
040a0     BC 05 90 AD |  if_e	jmp	#LR__0291
040a4     71 01 00 FF 
040a8     CB 15 06 F6 | 	mov	arg02, ##@LR__4955
040ac     0F 13 02 F6 | 	mov	arg01, local01
040b0     8C AA B1 FD | 	call	#__system___string_cmp
040b4     00 FA 0D F2 | 	cmp	result1, #0 wz
040b8     AC 05 90 AD |  if_e	jmp	#LR__0292
040bc     71 01 00 FF 
040c0     CE 15 06 F6 | 	mov	arg02, ##@LR__4956
040c4     0F 13 02 F6 | 	mov	arg01, local01
040c8     74 AA B1 FD | 	call	#__system___string_cmp
040cc     00 FA 0D F2 | 	cmp	result1, #0 wz
040d0     9C 05 90 AD |  if_e	jmp	#LR__0293
040d4     71 01 00 FF 
040d8     D4 15 06 F6 | 	mov	arg02, ##@LR__4957
040dc     0F 13 02 F6 | 	mov	arg01, local01
040e0     5C AA B1 FD | 	call	#__system___string_cmp
040e4     00 FA 0D F2 | 	cmp	result1, #0 wz
040e8     8C 05 90 AD |  if_e	jmp	#LR__0294
040ec     71 01 00 FF 
040f0     D8 15 06 F6 | 	mov	arg02, ##@LR__4958
040f4     0F 13 02 F6 | 	mov	arg01, local01
040f8     44 AA B1 FD | 	call	#__system___string_cmp
040fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04100     7C 05 90 AD |  if_e	jmp	#LR__0295
04104     71 01 00 FF 
04108     E1 15 06 F6 | 	mov	arg02, ##@LR__4959
0410c     0F 13 02 F6 | 	mov	arg01, local01
04110     2C AA B1 FD | 	call	#__system___string_cmp
04114     00 FA 0D F2 | 	cmp	result1, #0 wz
04118     6C 05 90 AD |  if_e	jmp	#LR__0296
0411c     71 01 00 FF 
04120     E7 15 06 F6 | 	mov	arg02, ##@LR__4960
04124     0F 13 02 F6 | 	mov	arg01, local01
04128     14 AA B1 FD | 	call	#__system___string_cmp
0412c     00 FA 0D F2 | 	cmp	result1, #0 wz
04130     5C 05 90 AD |  if_e	jmp	#LR__0297
04134     71 01 00 FF 
04138     ED 15 06 F6 | 	mov	arg02, ##@LR__4961
0413c     0F 13 02 F6 | 	mov	arg01, local01
04140     FC A9 B1 FD | 	call	#__system___string_cmp
04144     00 FA 0D F2 | 	cmp	result1, #0 wz
04148     4C 05 90 AD |  if_e	jmp	#LR__0298
0414c     71 01 00 FF 
04150     F6 15 06 F6 | 	mov	arg02, ##@LR__4962
04154     0F 13 02 F6 | 	mov	arg01, local01
04158     E4 A9 B1 FD | 	call	#__system___string_cmp
0415c     00 FA 0D F2 | 	cmp	result1, #0 wz
04160     3C 05 90 AD |  if_e	jmp	#LR__0299
04164     72 01 00 FF 
04168     00 14 06 F6 | 	mov	arg02, ##@LR__4963
0416c     0F 13 02 F6 | 	mov	arg01, local01
04170     CC A9 B1 FD | 	call	#__system___string_cmp
04174     00 FA 0D F2 | 	cmp	result1, #0 wz
04178     2C 05 90 AD |  if_e	jmp	#LR__0300
0417c     72 01 00 FF 
04180     09 14 06 F6 | 	mov	arg02, ##@LR__4964
04184     0F 13 02 F6 | 	mov	arg01, local01
04188     B4 A9 B1 FD | 	call	#__system___string_cmp
0418c     00 FA 0D F2 | 	cmp	result1, #0 wz
04190     1C 05 90 AD |  if_e	jmp	#LR__0301
04194     72 01 00 FF 
04198     0E 14 06 F6 | 	mov	arg02, ##@LR__4965
0419c     0F 13 02 F6 | 	mov	arg01, local01
041a0     9C A9 B1 FD | 	call	#__system___string_cmp
041a4     00 FA 0D F2 | 	cmp	result1, #0 wz
041a8     0C 05 90 AD |  if_e	jmp	#LR__0302
041ac     72 01 00 FF 
041b0     11 14 06 F6 | 	mov	arg02, ##@LR__4966
041b4     0F 13 02 F6 | 	mov	arg01, local01
041b8     84 A9 B1 FD | 	call	#__system___string_cmp
041bc     00 FA 0D F2 | 	cmp	result1, #0 wz
041c0     FC 04 90 AD |  if_e	jmp	#LR__0303
041c4     72 01 00 FF 
041c8     16 14 06 F6 | 	mov	arg02, ##@LR__4967
041cc     0F 13 02 F6 | 	mov	arg01, local01
041d0     6C A9 B1 FD | 	call	#__system___string_cmp
041d4     00 FA 0D F2 | 	cmp	result1, #0 wz
041d8     EC 04 90 AD |  if_e	jmp	#LR__0304
041dc     72 01 00 FF 
041e0     1A 14 06 F6 | 	mov	arg02, ##@LR__4968
041e4     0F 13 02 F6 | 	mov	arg01, local01
041e8     54 A9 B1 FD | 	call	#__system___string_cmp
041ec     00 FA 0D F2 | 	cmp	result1, #0 wz
041f0     DC 04 90 AD |  if_e	jmp	#LR__0305
041f4     72 01 00 FF 
041f8     1F 14 06 F6 | 	mov	arg02, ##@LR__4969
041fc     0F 13 02 F6 | 	mov	arg01, local01
04200     3C A9 B1 FD | 	call	#__system___string_cmp
04204     00 FA 0D F2 | 	cmp	result1, #0 wz
04208     CC 04 90 AD |  if_e	jmp	#LR__0306
0420c     72 01 00 FF 
04210     23 14 06 F6 | 	mov	arg02, ##@LR__4970
04214     0F 13 02 F6 | 	mov	arg01, local01
04218     24 A9 B1 FD | 	call	#__system___string_cmp
0421c     00 FA 0D F2 | 	cmp	result1, #0 wz
04220     BC 04 90 AD |  if_e	jmp	#LR__0307
04224     72 01 00 FF 
04228     2C 14 06 F6 | 	mov	arg02, ##@LR__4971
0422c     0F 13 02 F6 | 	mov	arg01, local01
04230     0C A9 B1 FD | 	call	#__system___string_cmp
04234     00 FA 0D F2 | 	cmp	result1, #0 wz
04238     AC 04 90 AD |  if_e	jmp	#LR__0308
0423c     72 01 00 FF 
04240     31 14 06 F6 | 	mov	arg02, ##@LR__4972
04244     0F 13 02 F6 | 	mov	arg01, local01
04248     F4 A8 B1 FD | 	call	#__system___string_cmp
0424c     00 FA 0D F2 | 	cmp	result1, #0 wz
04250     9C 04 90 AD |  if_e	jmp	#LR__0309
04254     72 01 00 FF 
04258     37 14 06 F6 | 	mov	arg02, ##@LR__4973
0425c     0F 13 02 F6 | 	mov	arg01, local01
04260     DC A8 B1 FD | 	call	#__system___string_cmp
04264     00 FA 0D F2 | 	cmp	result1, #0 wz
04268     8C 04 90 AD |  if_e	jmp	#LR__0310
0426c     72 01 00 FF 
04270     39 14 06 F6 | 	mov	arg02, ##@LR__4974
04274     0F 13 02 F6 | 	mov	arg01, local01
04278     C4 A8 B1 FD | 	call	#__system___string_cmp
0427c     00 FA 0D F2 | 	cmp	result1, #0 wz
04280     7C 04 90 AD |  if_e	jmp	#LR__0311
04284     72 01 00 FF 
04288     3D 14 06 F6 | 	mov	arg02, ##@LR__4975
0428c     0F 13 02 F6 | 	mov	arg01, local01
04290     AC A8 B1 FD | 	call	#__system___string_cmp
04294     00 FA 0D F2 | 	cmp	result1, #0 wz
04298     6C 04 90 AD |  if_e	jmp	#LR__0312
0429c     72 01 00 FF 
042a0     45 14 06 F6 | 	mov	arg02, ##@LR__4976
042a4     0F 13 02 F6 | 	mov	arg01, local01
042a8     94 A8 B1 FD | 	call	#__system___string_cmp
042ac     00 FA 0D F2 | 	cmp	result1, #0 wz
042b0     5C 04 90 AD |  if_e	jmp	#LR__0313
042b4     72 01 00 FF 
042b8     4C 14 06 F6 | 	mov	arg02, ##@LR__4977
042bc     0F 13 02 F6 | 	mov	arg01, local01
042c0     7C A8 B1 FD | 	call	#__system___string_cmp
042c4     00 FA 0D F2 | 	cmp	result1, #0 wz
042c8     4C 04 90 AD |  if_e	jmp	#LR__0314
042cc     72 01 00 FF 
042d0     50 14 06 F6 | 	mov	arg02, ##@LR__4978
042d4     0F 13 02 F6 | 	mov	arg01, local01
042d8     64 A8 B1 FD | 	call	#__system___string_cmp
042dc     00 FA 0D F2 | 	cmp	result1, #0 wz
042e0     3C 04 90 AD |  if_e	jmp	#LR__0315
042e4     72 01 00 FF 
042e8     55 14 06 F6 | 	mov	arg02, ##@LR__4979
042ec     0F 13 02 F6 | 	mov	arg01, local01
042f0     4C A8 B1 FD | 	call	#__system___string_cmp
042f4     00 FA 0D F2 | 	cmp	result1, #0 wz
042f8     2C 04 90 AD |  if_e	jmp	#LR__0316
042fc     72 01 00 FF 
04300     58 14 06 F6 | 	mov	arg02, ##@LR__4980
04304     0F 13 02 F6 | 	mov	arg01, local01
04308     34 A8 B1 FD | 	call	#__system___string_cmp
0430c     00 FA 0D F2 | 	cmp	result1, #0 wz
04310     1C 04 90 AD |  if_e	jmp	#LR__0317
04314     72 01 00 FF 
04318     61 14 06 F6 | 	mov	arg02, ##@LR__4981
0431c     0F 13 02 F6 | 	mov	arg01, local01
04320     1C A8 B1 FD | 	call	#__system___string_cmp
04324     00 FA 0D F2 | 	cmp	result1, #0 wz
04328     0C 04 90 AD |  if_e	jmp	#LR__0318
0432c     72 01 00 FF 
04330     68 14 06 F6 | 	mov	arg02, ##@LR__4982
04334     0F 13 02 F6 | 	mov	arg01, local01
04338     04 A8 B1 FD | 	call	#__system___string_cmp
0433c     00 FA 0D F2 | 	cmp	result1, #0 wz
04340     FC 03 90 AD |  if_e	jmp	#LR__0319
04344     72 01 00 FF 
04348     6F 14 06 F6 | 	mov	arg02, ##@LR__4983
0434c     0F 13 02 F6 | 	mov	arg01, local01
04350     EC A7 B1 FD | 	call	#__system___string_cmp
04354     00 FA 0D F2 | 	cmp	result1, #0 wz
04358     EC 03 90 AD |  if_e	jmp	#LR__0320
0435c     72 01 00 FF 
04360     76 14 06 F6 | 	mov	arg02, ##@LR__4984
04364     0F 13 02 F6 | 	mov	arg01, local01
04368     D4 A7 B1 FD | 	call	#__system___string_cmp
0436c     00 FA 0D F2 | 	cmp	result1, #0 wz
04370     DC 03 90 AD |  if_e	jmp	#LR__0321
04374     72 01 00 FF 
04378     81 14 06 F6 | 	mov	arg02, ##@LR__4985
0437c     0F 13 02 F6 | 	mov	arg01, local01
04380     BC A7 B1 FD | 	call	#__system___string_cmp
04384     00 FA 0D F2 | 	cmp	result1, #0 wz
04388     CC 03 90 AD |  if_e	jmp	#LR__0322
0438c     72 01 00 FF 
04390     88 14 06 F6 | 	mov	arg02, ##@LR__4986
04394     0F 13 02 F6 | 	mov	arg01, local01
04398     A4 A7 B1 FD | 	call	#__system___string_cmp
0439c     00 FA 0D F2 | 	cmp	result1, #0 wz
043a0     BC 03 90 AD |  if_e	jmp	#LR__0323
043a4     72 01 00 FF 
043a8     90 14 06 F6 | 	mov	arg02, ##@LR__4987
043ac     0F 13 02 F6 | 	mov	arg01, local01
043b0     8C A7 B1 FD | 	call	#__system___string_cmp
043b4     00 FA 0D F2 | 	cmp	result1, #0 wz
043b8     AC 03 90 AD |  if_e	jmp	#LR__0324
043bc     72 01 00 FF 
043c0     96 14 06 F6 | 	mov	arg02, ##@LR__4988
043c4     0F 13 02 F6 | 	mov	arg01, local01
043c8     74 A7 B1 FD | 	call	#__system___string_cmp
043cc     00 FA 0D F2 | 	cmp	result1, #0 wz
043d0     9C 03 90 AD |  if_e	jmp	#LR__0325
043d4     72 01 00 FF 
043d8     9A 14 06 F6 | 	mov	arg02, ##@LR__4989
043dc     0F 13 02 F6 | 	mov	arg01, local01
043e0     5C A7 B1 FD | 	call	#__system___string_cmp
043e4     00 FA 0D F2 | 	cmp	result1, #0 wz
043e8     8C 03 90 AD |  if_e	jmp	#LR__0326
043ec     72 01 00 FF 
043f0     A1 14 06 F6 | 	mov	arg02, ##@LR__4990
043f4     0F 13 02 F6 | 	mov	arg01, local01
043f8     44 A7 B1 FD | 	call	#__system___string_cmp
043fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04400     7C 03 90 AD |  if_e	jmp	#LR__0327
04404     72 01 00 FF 
04408     A5 14 06 F6 | 	mov	arg02, ##@LR__4991
0440c     0F 13 02 F6 | 	mov	arg01, local01
04410     2C A7 B1 FD | 	call	#__system___string_cmp
04414     00 FA 0D F2 | 	cmp	result1, #0 wz
04418     6C 03 90 AD |  if_e	jmp	#LR__0328
0441c     72 01 00 FF 
04420     AA 14 06 F6 | 	mov	arg02, ##@LR__4992
04424     0F 13 02 F6 | 	mov	arg01, local01
04428     14 A7 B1 FD | 	call	#__system___string_cmp
0442c     00 FA 0D F2 | 	cmp	result1, #0 wz
04430     5C 03 90 AD |  if_e	jmp	#LR__0329
04434     72 01 00 FF 
04438     B1 14 06 F6 | 	mov	arg02, ##@LR__4993
0443c     0F 13 02 F6 | 	mov	arg01, local01
04440     FC A6 B1 FD | 	call	#__system___string_cmp
04444     00 FA 0D F2 | 	cmp	result1, #0 wz
04448     4C 03 90 AD |  if_e	jmp	#LR__0330
0444c     72 01 00 FF 
04450     BB 14 06 F6 | 	mov	arg02, ##@LR__4994
04454     0F 13 02 F6 | 	mov	arg01, local01
04458     E4 A6 B1 FD | 	call	#__system___string_cmp
0445c     00 FA 0D F2 | 	cmp	result1, #0 wz
04460     3C 03 90 AD |  if_e	jmp	#LR__0331
04464     72 01 00 FF 
04468     BF 14 06 F6 | 	mov	arg02, ##@LR__4995
0446c     0F 13 02 F6 | 	mov	arg01, local01
04470     CC A6 B1 FD | 	call	#__system___string_cmp
04474     00 FA 0D F2 | 	cmp	result1, #0 wz
04478     2C 03 90 AD |  if_e	jmp	#LR__0332
0447c     72 01 00 FF 
04480     C7 14 06 F6 | 	mov	arg02, ##@LR__4996
04484     0F 13 02 F6 | 	mov	arg01, local01
04488     B4 A6 B1 FD | 	call	#__system___string_cmp
0448c     00 FA 0D F2 | 	cmp	result1, #0 wz
04490     1C 03 90 AD |  if_e	jmp	#LR__0333
04494     72 01 00 FF 
04498     CB 14 06 F6 | 	mov	arg02, ##@LR__4997
0449c     0F 13 02 F6 | 	mov	arg01, local01
044a0     9C A6 B1 FD | 	call	#__system___string_cmp
044a4     00 FA 0D F2 | 	cmp	result1, #0 wz
044a8     0C 03 90 AD |  if_e	jmp	#LR__0334
044ac     72 01 00 FF 
044b0     D1 14 06 F6 | 	mov	arg02, ##@LR__4998
044b4     0F 13 02 F6 | 	mov	arg01, local01
044b8     84 A6 B1 FD | 	call	#__system___string_cmp
044bc     00 FA 0D F2 | 	cmp	result1, #0 wz
044c0     FC 02 90 AD |  if_e	jmp	#LR__0335
044c4     00 03 90 FD | 	jmp	#LR__0336
044c8                 | LR__0240
044c8     5C FA 05 F6 | 	mov	result1, #92
044cc     FC 02 90 FD | 	jmp	#LR__0337
044d0                 | LR__0241
044d0     5C FA 05 F6 | 	mov	result1, #92
044d4     F4 02 90 FD | 	jmp	#LR__0337
044d8                 | LR__0242
044d8     47 FA 05 F6 | 	mov	result1, #71
044dc     EC 02 90 FD | 	jmp	#LR__0337
044e0                 | LR__0243
044e0     59 FA 05 F6 | 	mov	result1, #89
044e4     E4 02 90 FD | 	jmp	#LR__0337
044e8                 | LR__0244
044e8     59 FA 05 F6 | 	mov	result1, #89
044ec     DC 02 90 FD | 	jmp	#LR__0337
044f0                 | LR__0245
044f0     45 FA 05 F6 | 	mov	result1, #69
044f4     D4 02 90 FD | 	jmp	#LR__0337
044f8                 | LR__0246
044f8     45 FA 05 F6 | 	mov	result1, #69
044fc     CC 02 90 FD | 	jmp	#LR__0337
04500                 | LR__0247
04500     69 FA 05 F6 | 	mov	result1, #105
04504     C4 02 90 FD | 	jmp	#LR__0337
04508                 | LR__0248
04508     40 FA 05 F6 | 	mov	result1, #64
0450c     BC 02 90 FD | 	jmp	#LR__0337
04510                 | LR__0249
04510     49 FA 05 F6 | 	mov	result1, #73
04514     B4 02 90 FD | 	jmp	#LR__0337
04518                 | LR__0250
04518     49 FA 05 F6 | 	mov	result1, #73
0451c     AC 02 90 FD | 	jmp	#LR__0337
04520                 | LR__0251
04520     50 FA 05 F6 | 	mov	result1, #80
04524     A4 02 90 FD | 	jmp	#LR__0337
04528                 | LR__0252
04528     50 FA 05 F6 | 	mov	result1, #80
0452c     9C 02 90 FD | 	jmp	#LR__0337
04530                 | LR__0253
04530     68 FA 05 F6 | 	mov	result1, #104
04534     94 02 90 FD | 	jmp	#LR__0337
04538                 | LR__0254
04538     73 FA 05 F6 | 	mov	result1, #115
0453c     8C 02 90 FD | 	jmp	#LR__0337
04540                 | LR__0255
04540     74 FA 05 F6 | 	mov	result1, #116
04544     84 02 90 FD | 	jmp	#LR__0337
04548                 | LR__0256
04548     6C FA 05 F6 | 	mov	result1, #108
0454c     7C 02 90 FD | 	jmp	#LR__0337
04550                 | LR__0257
04550     6C FA 05 F6 | 	mov	result1, #108
04554     74 02 90 FD | 	jmp	#LR__0337
04558                 | LR__0258
04558     89 FA 05 F6 | 	mov	result1, #137
0455c     6C 02 90 FD | 	jmp	#LR__0337
04560                 | LR__0259
04560     72 FA 05 F6 | 	mov	result1, #114
04564     64 02 90 FD | 	jmp	#LR__0337
04568                 | LR__0260
04568     5D FA 05 F6 | 	mov	result1, #93
0456c     5C 02 90 FD | 	jmp	#LR__0337
04570                 | LR__0261
04570     96 FA 05 F6 | 	mov	result1, #150
04574     54 02 90 FD | 	jmp	#LR__0337
04578                 | LR__0262
04578     43 FA 05 F6 | 	mov	result1, #67
0457c     4C 02 90 FD | 	jmp	#LR__0337
04580                 | LR__0263
04580     43 FA 05 F6 | 	mov	result1, #67
04584     44 02 90 FD | 	jmp	#LR__0337
04588                 | LR__0264
04588     5A FA 05 F6 | 	mov	result1, #90
0458c     3C 02 90 FD | 	jmp	#LR__0337
04590                 | LR__0265
04590     AB FA 05 F6 | 	mov	result1, #171
04594     34 02 90 FD | 	jmp	#LR__0337
04598                 | LR__0266
04598     46 FA 05 F6 | 	mov	result1, #70
0459c     2C 02 90 FD | 	jmp	#LR__0337
045a0                 | LR__0267
045a0     46 FA 05 F6 | 	mov	result1, #70
045a4     24 02 90 FD | 	jmp	#LR__0337
045a8                 | LR__0268
045a8     71 FA 05 F6 | 	mov	result1, #113
045ac     1C 02 90 FD | 	jmp	#LR__0337
045b0                 | LR__0269
045b0     71 FA 05 F6 | 	mov	result1, #113
045b4     14 02 90 FD | 	jmp	#LR__0337
045b8                 | LR__0270
045b8     60 FA 05 F6 | 	mov	result1, #96
045bc     0C 02 90 FD | 	jmp	#LR__0337
045c0                 | LR__0271
045c0     4A FA 05 F6 | 	mov	result1, #74
045c4     04 02 90 FD | 	jmp	#LR__0337
045c8                 | LR__0272
045c8     4A FA 05 F6 | 	mov	result1, #74
045cc     FC 01 90 FD | 	jmp	#LR__0337
045d0                 | LR__0273
045d0     48 FA 05 F6 | 	mov	result1, #72
045d4     F4 01 90 FD | 	jmp	#LR__0337
045d8                 | LR__0274
045d8     48 FA 05 F6 | 	mov	result1, #72
045dc     EC 01 90 FD | 	jmp	#LR__0337
045e0                 | LR__0275
045e0     A9 FA 05 F6 | 	mov	result1, #169
045e4     E4 01 90 FD | 	jmp	#LR__0337
045e8                 | LR__0276
045e8     4E FA 05 F6 | 	mov	result1, #78
045ec     DC 01 90 FD | 	jmp	#LR__0337
045f0                 | LR__0277
045f0     4E FA 05 F6 | 	mov	result1, #78
045f4     D4 01 90 FD | 	jmp	#LR__0337
045f8                 | LR__0278
045f8     58 FA 05 F6 | 	mov	result1, #88
045fc     CC 01 90 FD | 	jmp	#LR__0337
04600                 | LR__0279
04600     5F FA 05 F6 | 	mov	result1, #95
04604     C4 01 90 FD | 	jmp	#LR__0337
04608                 | LR__0280
04608     5F FA 05 F6 | 	mov	result1, #95
0460c     BC 01 90 FD | 	jmp	#LR__0337
04610                 | LR__0281
04610     8A FA 05 F6 | 	mov	result1, #138
04614     B4 01 90 FD | 	jmp	#LR__0337
04618                 | LR__0282
04618     4C FA 05 F6 | 	mov	result1, #76
0461c     AC 01 90 FD | 	jmp	#LR__0337
04620                 | LR__0283
04620     4C FA 05 F6 | 	mov	result1, #76
04624     A4 01 90 FD | 	jmp	#LR__0337
04628                 | LR__0284
04628     52 FA 05 F6 | 	mov	result1, #82
0462c     9C 01 90 FD | 	jmp	#LR__0337
04630                 | LR__0285
04630     52 FA 05 F6 | 	mov	result1, #82
04634     94 01 90 FD | 	jmp	#LR__0337
04638                 | LR__0286
04638     97 FA 05 F6 | 	mov	result1, #151
0463c     8C 01 90 FD | 	jmp	#LR__0337
04640                 | LR__0287
04640     61 FA 05 F6 | 	mov	result1, #97
04644     84 01 90 FD | 	jmp	#LR__0337
04648                 | LR__0288
04648     61 FA 05 F6 | 	mov	result1, #97
0464c     7C 01 90 FD | 	jmp	#LR__0337
04650                 | LR__0289
04650     63 FA 05 F6 | 	mov	result1, #99
04654     74 01 90 FD | 	jmp	#LR__0337
04658                 | LR__0290
04658     41 FA 05 F6 | 	mov	result1, #65
0465c     6C 01 90 FD | 	jmp	#LR__0337
04660                 | LR__0291
04660     4B FA 05 F6 | 	mov	result1, #75
04664     64 01 90 FD | 	jmp	#LR__0337
04668                 | LR__0292
04668     4B FA 05 F6 | 	mov	result1, #75
0466c     5C 01 90 FD | 	jmp	#LR__0337
04670                 | LR__0293
04670     5E FA 05 F6 | 	mov	result1, #94
04674     54 01 90 FD | 	jmp	#LR__0337
04678                 | LR__0294
04678     5E FA 05 F6 | 	mov	result1, #94
0467c     4C 01 90 FD | 	jmp	#LR__0337
04680                 | LR__0295
04680     7C FA 05 F6 | 	mov	result1, #124
04684     44 01 90 FD | 	jmp	#LR__0337
04688                 | LR__0296
04688     7E FA 05 F6 | 	mov	result1, #126
0468c     3C 01 90 FD | 	jmp	#LR__0337
04690                 | LR__0297
04690     7D FA 05 F6 | 	mov	result1, #125
04694     34 01 90 FD | 	jmp	#LR__0337
04698                 | LR__0298
04698     7F FA 05 F6 | 	mov	result1, #127
0469c     2C 01 90 FD | 	jmp	#LR__0337
046a0                 | LR__0299
046a0     80 FA 05 F6 | 	mov	result1, #128
046a4     24 01 90 FD | 	jmp	#LR__0337
046a8                 | LR__0300
046a8     55 FA 05 F6 | 	mov	result1, #85
046ac     1C 01 90 FD | 	jmp	#LR__0337
046b0                 | LR__0301
046b0     75 FA 05 F6 | 	mov	result1, #117
046b4     14 01 90 FD | 	jmp	#LR__0337
046b8                 | LR__0302
046b8     75 FA 05 F6 | 	mov	result1, #117
046bc     0C 01 90 FD | 	jmp	#LR__0337
046c0                 | LR__0303
046c0     42 FA 05 F6 | 	mov	result1, #66
046c4     04 01 90 FD | 	jmp	#LR__0337
046c8                 | LR__0304
046c8     42 FA 05 F6 | 	mov	result1, #66
046cc     FC 00 90 FD | 	jmp	#LR__0337
046d0                 | LR__0305
046d0     95 FA 05 F6 | 	mov	result1, #149
046d4     F4 00 90 FD | 	jmp	#LR__0337
046d8                 | LR__0306
046d8     AC FA 05 F6 | 	mov	result1, #172
046dc     EC 00 90 FD | 	jmp	#LR__0337
046e0                 | LR__0307
046e0     81 FA 05 F6 | 	mov	result1, #129
046e4     E4 00 90 FD | 	jmp	#LR__0337
046e8                 | LR__0308
046e8     81 FA 05 F6 | 	mov	result1, #129
046ec     DC 00 90 FD | 	jmp	#LR__0337
046f0                 | LR__0309
046f0     44 FA 05 F6 | 	mov	result1, #68
046f4     D4 00 90 FD | 	jmp	#LR__0337
046f8                 | LR__0310
046f8     44 FA 05 F6 | 	mov	result1, #68
046fc     CC 00 90 FD | 	jmp	#LR__0337
04700                 | LR__0311
04700     88 FA 05 F6 | 	mov	result1, #136
04704     C4 00 90 FD | 	jmp	#LR__0337
04708                 | LR__0312
04708     92 FA 05 F6 | 	mov	result1, #146
0470c     BC 00 90 FD | 	jmp	#LR__0337
04710                 | LR__0313
04710     AA FA 05 F6 | 	mov	result1, #170
04714     B4 00 90 FD | 	jmp	#LR__0337
04718                 | LR__0314
04718     4D FA 05 F6 | 	mov	result1, #77
0471c     AC 00 90 FD | 	jmp	#LR__0337
04720                 | LR__0315
04720     51 FA 05 F6 | 	mov	result1, #81
04724     A4 00 90 FD | 	jmp	#LR__0337
04728                 | LR__0316
04728     51 FA 05 F6 | 	mov	result1, #81
0472c     9C 00 90 FD | 	jmp	#LR__0337
04730                 | LR__0317
04730     8E FA 05 F6 | 	mov	result1, #142
04734     94 00 90 FD | 	jmp	#LR__0337
04738                 | LR__0318
04738     90 FA 05 F6 | 	mov	result1, #144
0473c     8C 00 90 FD | 	jmp	#LR__0337
04740                 | LR__0319
04740     8D FA 05 F6 | 	mov	result1, #141
04744     84 00 90 FD | 	jmp	#LR__0337
04748                 | LR__0320
04748     8C FA 05 F6 | 	mov	result1, #140
0474c     7C 00 90 FD | 	jmp	#LR__0337
04750                 | LR__0321
04750     91 FA 05 F6 | 	mov	result1, #145
04754     74 00 90 FD | 	jmp	#LR__0337
04758                 | LR__0322
04758     8B FA 05 F6 | 	mov	result1, #139
0475c     6C 00 90 FD | 	jmp	#LR__0337
04760                 | LR__0323
04760     8F FA 05 F6 | 	mov	result1, #143
04764     64 00 90 FD | 	jmp	#LR__0337
04768                 | LR__0324
04768     75 FA 05 F6 | 	mov	result1, #117
0476c     5C 00 90 FD | 	jmp	#LR__0337
04770                 | LR__0325
04770     75 FA 05 F6 | 	mov	result1, #117
04774     54 00 90 FD | 	jmp	#LR__0337
04778                 | LR__0326
04778     6D FA 05 F6 | 	mov	result1, #109
0477c     4C 00 90 FD | 	jmp	#LR__0337
04780                 | LR__0327
04780     6D FA 05 F6 | 	mov	result1, #109
04784     44 00 90 FD | 	jmp	#LR__0337
04788                 | LR__0328
04788     5B FA 05 F6 | 	mov	result1, #91
0478c     3C 00 90 FD | 	jmp	#LR__0337
04790                 | LR__0329
04790     56 FA 05 F6 | 	mov	result1, #86
04794     34 00 90 FD | 	jmp	#LR__0337
04798                 | LR__0330
04798     70 FA 05 F6 | 	mov	result1, #112
0479c     2C 00 90 FD | 	jmp	#LR__0337
047a0                 | LR__0331
047a0     70 FA 05 F6 | 	mov	result1, #112
047a4     24 00 90 FD | 	jmp	#LR__0337
047a8                 | LR__0332
047a8     57 FA 05 F6 | 	mov	result1, #87
047ac     1C 00 90 FD | 	jmp	#LR__0337
047b0                 | LR__0333
047b0     57 FA 05 F6 | 	mov	result1, #87
047b4     14 00 90 FD | 	jmp	#LR__0337
047b8                 | LR__0334
047b8     77 FA 05 F6 | 	mov	result1, #119
047bc     0C 00 90 FD | 	jmp	#LR__0337
047c0                 | LR__0335
047c0     78 FA 05 F6 | 	mov	result1, #120
047c4     04 00 90 FD | 	jmp	#LR__0337
047c8                 | LR__0336
047c8     00 FA 05 F6 | 	mov	result1, #0
047cc                 | LR__0337
047cc     A7 F0 03 F6 | 	mov	ptra, fp
047d0     B2 00 A0 FD | 	call	#popregs_
047d4                 | _iscommand_ret
047d4     2D 00 64 FD | 	ret
047d8                 | 
047d8                 | ' 
047d8                 | ' function isfunction(s as string) as ubyte
047d8                 | _isfunction
047d8     01 4A 05 F6 | 	mov	COUNT_, #1
047dc     A8 00 A0 FD | 	call	#pushregs_
047e0                 | ' 
047e0                 | ' select case s
047e0     09 1F 02 F6 | 	mov	local01, arg01
047e4     72 01 00 FF 
047e8     D7 14 06 F6 | 	mov	arg02, ##@LR__4999
047ec     0F 13 02 F6 | 	mov	arg01, local01
047f0     4C A3 B1 FD | 	call	#__system___string_cmp
047f4     00 FA 0D F2 | 	cmp	result1, #0 wz
047f8     C4 03 90 AD |  if_e	jmp	#LR__0340
047fc     72 01 00 FF 
04800     DB 14 06 F6 | 	mov	arg02, ##@LR__5000
04804     0F 13 02 F6 | 	mov	arg01, local01
04808     34 A3 B1 FD | 	call	#__system___string_cmp
0480c     00 FA 0D F2 | 	cmp	result1, #0 wz
04810     B4 03 90 AD |  if_e	jmp	#LR__0341
04814     72 01 00 FF 
04818     E0 14 06 F6 | 	mov	arg02, ##@LR__5001
0481c     0F 13 02 F6 | 	mov	arg01, local01
04820     1C A3 B1 FD | 	call	#__system___string_cmp
04824     00 FA 0D F2 | 	cmp	result1, #0 wz
04828     A4 03 90 AD |  if_e	jmp	#LR__0342
0482c     72 01 00 FF 
04830     E4 14 06 F6 | 	mov	arg02, ##@LR__5002
04834     0F 13 02 F6 | 	mov	arg01, local01
04838     04 A3 B1 FD | 	call	#__system___string_cmp
0483c     00 FA 0D F2 | 	cmp	result1, #0 wz
04840     94 03 90 AD |  if_e	jmp	#LR__0343
04844     72 01 00 FF 
04848     E9 14 06 F6 | 	mov	arg02, ##@LR__5003
0484c     0F 13 02 F6 | 	mov	arg01, local01
04850     EC A2 B1 FD | 	call	#__system___string_cmp
04854     00 FA 0D F2 | 	cmp	result1, #0 wz
04858     84 03 90 AD |  if_e	jmp	#LR__0344
0485c     72 01 00 FF 
04860     ED 14 06 F6 | 	mov	arg02, ##@LR__5004
04864     0F 13 02 F6 | 	mov	arg01, local01
04868     D4 A2 B1 FD | 	call	#__system___string_cmp
0486c     00 FA 0D F2 | 	cmp	result1, #0 wz
04870     74 03 90 AD |  if_e	jmp	#LR__0345
04874     72 01 00 FF 
04878     F2 14 06 F6 | 	mov	arg02, ##@LR__5005
0487c     0F 13 02 F6 | 	mov	arg01, local01
04880     BC A2 B1 FD | 	call	#__system___string_cmp
04884     00 FA 0D F2 | 	cmp	result1, #0 wz
04888     64 03 90 AD |  if_e	jmp	#LR__0346
0488c     72 01 00 FF 
04890     F6 14 06 F6 | 	mov	arg02, ##@LR__5006
04894     0F 13 02 F6 | 	mov	arg01, local01
04898     A4 A2 B1 FD | 	call	#__system___string_cmp
0489c     00 FA 0D F2 | 	cmp	result1, #0 wz
048a0     54 03 90 AD |  if_e	jmp	#LR__0347
048a4     72 01 00 FF 
048a8     FB 14 06 F6 | 	mov	arg02, ##@LR__5007
048ac     0F 13 02 F6 | 	mov	arg01, local01
048b0     8C A2 B1 FD | 	call	#__system___string_cmp
048b4     00 FA 0D F2 | 	cmp	result1, #0 wz
048b8     44 03 90 AD |  if_e	jmp	#LR__0348
048bc     72 01 00 FF 
048c0     00 15 06 F6 | 	mov	arg02, ##@LR__5008
048c4     0F 13 02 F6 | 	mov	arg01, local01
048c8     74 A2 B1 FD | 	call	#__system___string_cmp
048cc     00 FA 0D F2 | 	cmp	result1, #0 wz
048d0     34 03 90 AD |  if_e	jmp	#LR__0349
048d4     72 01 00 FF 
048d8     04 15 06 F6 | 	mov	arg02, ##@LR__5009
048dc     0F 13 02 F6 | 	mov	arg01, local01
048e0     5C A2 B1 FD | 	call	#__system___string_cmp
048e4     00 FA 0D F2 | 	cmp	result1, #0 wz
048e8     24 03 90 AD |  if_e	jmp	#LR__0350
048ec     72 01 00 FF 
048f0     0A 15 06 F6 | 	mov	arg02, ##@LR__5010
048f4     0F 13 02 F6 | 	mov	arg01, local01
048f8     44 A2 B1 FD | 	call	#__system___string_cmp
048fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04900     14 03 90 AD |  if_e	jmp	#LR__0351
04904     72 01 00 FF 
04908     0E 15 06 F6 | 	mov	arg02, ##@LR__5011
0490c     0F 13 02 F6 | 	mov	arg01, local01
04910     2C A2 B1 FD | 	call	#__system___string_cmp
04914     00 FA 0D F2 | 	cmp	result1, #0 wz
04918     04 03 90 AD |  if_e	jmp	#LR__0352
0491c     72 01 00 FF 
04920     17 15 06 F6 | 	mov	arg02, ##@LR__5012
04924     0F 13 02 F6 | 	mov	arg01, local01
04928     14 A2 B1 FD | 	call	#__system___string_cmp
0492c     00 FA 0D F2 | 	cmp	result1, #0 wz
04930     F4 02 90 AD |  if_e	jmp	#LR__0353
04934     72 01 00 FF 
04938     1B 15 06 F6 | 	mov	arg02, ##@LR__5013
0493c     0F 13 02 F6 | 	mov	arg01, local01
04940     FC A1 B1 FD | 	call	#__system___string_cmp
04944     00 FA 0D F2 | 	cmp	result1, #0 wz
04948     E4 02 90 AD |  if_e	jmp	#LR__0354
0494c     72 01 00 FF 
04950     29 15 06 F6 | 	mov	arg02, ##@LR__5014
04954     0F 13 02 F6 | 	mov	arg01, local01
04958     E4 A1 B1 FD | 	call	#__system___string_cmp
0495c     00 FA 0D F2 | 	cmp	result1, #0 wz
04960     D4 02 90 AD |  if_e	jmp	#LR__0355
04964     72 01 00 FF 
04968     36 15 06 F6 | 	mov	arg02, ##@LR__5015
0496c     0F 13 02 F6 | 	mov	arg01, local01
04970     CC A1 B1 FD | 	call	#__system___string_cmp
04974     00 FA 0D F2 | 	cmp	result1, #0 wz
04978     C4 02 90 AD |  if_e	jmp	#LR__0356
0497c     72 01 00 FF 
04980     3E 15 06 F6 | 	mov	arg02, ##@LR__5016
04984     0F 13 02 F6 | 	mov	arg01, local01
04988     B4 A1 B1 FD | 	call	#__system___string_cmp
0498c     00 FA 0D F2 | 	cmp	result1, #0 wz
04990     B4 02 90 AD |  if_e	jmp	#LR__0357
04994     72 01 00 FF 
04998     43 15 06 F6 | 	mov	arg02, ##@LR__5017
0499c     0F 13 02 F6 | 	mov	arg01, local01
049a0     9C A1 B1 FD | 	call	#__system___string_cmp
049a4     00 FA 0D F2 | 	cmp	result1, #0 wz
049a8     A4 02 90 AD |  if_e	jmp	#LR__0358
049ac     72 01 00 FF 
049b0     4A 15 06 F6 | 	mov	arg02, ##@LR__5018
049b4     0F 13 02 F6 | 	mov	arg01, local01
049b8     84 A1 B1 FD | 	call	#__system___string_cmp
049bc     00 FA 0D F2 | 	cmp	result1, #0 wz
049c0     94 02 90 AD |  if_e	jmp	#LR__0359
049c4     72 01 00 FF 
049c8     50 15 06 F6 | 	mov	arg02, ##@LR__5019
049cc     0F 13 02 F6 | 	mov	arg01, local01
049d0     6C A1 B1 FD | 	call	#__system___string_cmp
049d4     00 FA 0D F2 | 	cmp	result1, #0 wz
049d8     84 02 90 AD |  if_e	jmp	#LR__0360
049dc     72 01 00 FF 
049e0     54 15 06 F6 | 	mov	arg02, ##@LR__5020
049e4     0F 13 02 F6 | 	mov	arg01, local01
049e8     54 A1 B1 FD | 	call	#__system___string_cmp
049ec     00 FA 0D F2 | 	cmp	result1, #0 wz
049f0     74 02 90 AD |  if_e	jmp	#LR__0361
049f4     72 01 00 FF 
049f8     5A 15 06 F6 | 	mov	arg02, ##@LR__5021
049fc     0F 13 02 F6 | 	mov	arg01, local01
04a00     3C A1 B1 FD | 	call	#__system___string_cmp
04a04     00 FA 0D F2 | 	cmp	result1, #0 wz
04a08     64 02 90 AD |  if_e	jmp	#LR__0362
04a0c     72 01 00 FF 
04a10     5F 15 06 F6 | 	mov	arg02, ##@LR__5022
04a14     0F 13 02 F6 | 	mov	arg01, local01
04a18     24 A1 B1 FD | 	call	#__system___string_cmp
04a1c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a20     54 02 90 AD |  if_e	jmp	#LR__0363
04a24     72 01 00 FF 
04a28     66 15 06 F6 | 	mov	arg02, ##@LR__5023
04a2c     0F 13 02 F6 | 	mov	arg01, local01
04a30     0C A1 B1 FD | 	call	#__system___string_cmp
04a34     00 FA 0D F2 | 	cmp	result1, #0 wz
04a38     44 02 90 AD |  if_e	jmp	#LR__0364
04a3c     72 01 00 FF 
04a40     6D 15 06 F6 | 	mov	arg02, ##@LR__5024
04a44     0F 13 02 F6 | 	mov	arg01, local01
04a48     F4 A0 B1 FD | 	call	#__system___string_cmp
04a4c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a50     34 02 90 AD |  if_e	jmp	#LR__0365
04a54     72 01 00 FF 
04a58     74 15 06 F6 | 	mov	arg02, ##@LR__5025
04a5c     0F 13 02 F6 | 	mov	arg01, local01
04a60     DC A0 B1 FD | 	call	#__system___string_cmp
04a64     00 FA 0D F2 | 	cmp	result1, #0 wz
04a68     24 02 90 AD |  if_e	jmp	#LR__0366
04a6c     72 01 00 FF 
04a70     7B 15 06 F6 | 	mov	arg02, ##@LR__5026
04a74     0F 13 02 F6 | 	mov	arg01, local01
04a78     C4 A0 B1 FD | 	call	#__system___string_cmp
04a7c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a80     14 02 90 AD |  if_e	jmp	#LR__0367
04a84     72 01 00 FF 
04a88     80 15 06 F6 | 	mov	arg02, ##@LR__5027
04a8c     0F 13 02 F6 | 	mov	arg01, local01
04a90     AC A0 B1 FD | 	call	#__system___string_cmp
04a94     00 FA 0D F2 | 	cmp	result1, #0 wz
04a98     04 02 90 AD |  if_e	jmp	#LR__0368
04a9c     72 01 00 FF 
04aa0     88 15 06 F6 | 	mov	arg02, ##@LR__5028
04aa4     0F 13 02 F6 | 	mov	arg01, local01
04aa8     94 A0 B1 FD | 	call	#__system___string_cmp
04aac     00 FA 0D F2 | 	cmp	result1, #0 wz
04ab0     F4 01 90 AD |  if_e	jmp	#LR__0369
04ab4     72 01 00 FF 
04ab8     8E 15 06 F6 | 	mov	arg02, ##@LR__5029
04abc     0F 13 02 F6 | 	mov	arg01, local01
04ac0     7C A0 B1 FD | 	call	#__system___string_cmp
04ac4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ac8     E4 01 90 AD |  if_e	jmp	#LR__0370
04acc     72 01 00 FF 
04ad0     95 15 06 F6 | 	mov	arg02, ##@LR__5030
04ad4     0F 13 02 F6 | 	mov	arg01, local01
04ad8     64 A0 B1 FD | 	call	#__system___string_cmp
04adc     00 FA 0D F2 | 	cmp	result1, #0 wz
04ae0     D4 01 90 AD |  if_e	jmp	#LR__0371
04ae4     72 01 00 FF 
04ae8     9B 15 06 F6 | 	mov	arg02, ##@LR__5031
04aec     0F 13 02 F6 | 	mov	arg01, local01
04af0     4C A0 B1 FD | 	call	#__system___string_cmp
04af4     00 FA 0D F2 | 	cmp	result1, #0 wz
04af8     C4 01 90 AD |  if_e	jmp	#LR__0372
04afc     72 01 00 FF 
04b00     9F 15 06 F6 | 	mov	arg02, ##@LR__5032
04b04     0F 13 02 F6 | 	mov	arg01, local01
04b08     34 A0 B1 FD | 	call	#__system___string_cmp
04b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b10     B4 01 90 AD |  if_e	jmp	#LR__0373
04b14     72 01 00 FF 
04b18     A3 15 06 F6 | 	mov	arg02, ##@LR__5033
04b1c     0F 13 02 F6 | 	mov	arg01, local01
04b20     1C A0 B1 FD | 	call	#__system___string_cmp
04b24     00 FA 0D F2 | 	cmp	result1, #0 wz
04b28     A4 01 90 AD |  if_e	jmp	#LR__0374
04b2c     72 01 00 FF 
04b30     A7 15 06 F6 | 	mov	arg02, ##@LR__5034
04b34     0F 13 02 F6 | 	mov	arg01, local01
04b38     04 A0 B1 FD | 	call	#__system___string_cmp
04b3c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b40     94 01 90 AD |  if_e	jmp	#LR__0375
04b44     72 01 00 FF 
04b48     AD 15 06 F6 | 	mov	arg02, ##@LR__5035
04b4c     0F 13 02 F6 | 	mov	arg01, local01
04b50     EC 9F B1 FD | 	call	#__system___string_cmp
04b54     00 FA 0D F2 | 	cmp	result1, #0 wz
04b58     84 01 90 AD |  if_e	jmp	#LR__0376
04b5c     72 01 00 FF 
04b60     B3 15 06 F6 | 	mov	arg02, ##@LR__5036
04b64     0F 13 02 F6 | 	mov	arg01, local01
04b68     D4 9F B1 FD | 	call	#__system___string_cmp
04b6c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b70     74 01 90 AD |  if_e	jmp	#LR__0377
04b74     72 01 00 FF 
04b78     B8 15 06 F6 | 	mov	arg02, ##@LR__5037
04b7c     0F 13 02 F6 | 	mov	arg01, local01
04b80     BC 9F B1 FD | 	call	#__system___string_cmp
04b84     00 FA 0D F2 | 	cmp	result1, #0 wz
04b88     64 01 90 AD |  if_e	jmp	#LR__0378
04b8c     72 01 00 FF 
04b90     BC 15 06 F6 | 	mov	arg02, ##@LR__5038
04b94     0F 13 02 F6 | 	mov	arg01, local01
04b98     A4 9F B1 FD | 	call	#__system___string_cmp
04b9c     00 FA 0D F2 | 	cmp	result1, #0 wz
04ba0     54 01 90 AD |  if_e	jmp	#LR__0379
04ba4     72 01 00 FF 
04ba8     C0 15 06 F6 | 	mov	arg02, ##@LR__5039
04bac     0F 13 02 F6 | 	mov	arg01, local01
04bb0     8C 9F B1 FD | 	call	#__system___string_cmp
04bb4     00 FA 0D F2 | 	cmp	result1, #0 wz
04bb8     44 01 90 AD |  if_e	jmp	#LR__0380
04bbc     48 01 90 FD | 	jmp	#LR__0381
04bc0                 | LR__0340
04bc0     9E FA 05 F6 | 	mov	result1, #158
04bc4     44 01 90 FD | 	jmp	#LR__0382
04bc8                 | LR__0341
04bc8     85 FA 05 F6 | 	mov	result1, #133
04bcc     3C 01 90 FD | 	jmp	#LR__0382
04bd0                 | LR__0342
04bd0     9B FA 05 F6 | 	mov	result1, #155
04bd4     34 01 90 FD | 	jmp	#LR__0382
04bd8                 | LR__0343
04bd8     9B FA 05 F6 | 	mov	result1, #155
04bdc     2C 01 90 FD | 	jmp	#LR__0382
04be0                 | LR__0344
04be0     A7 FA 05 F6 | 	mov	result1, #167
04be4     24 01 90 FD | 	jmp	#LR__0382
04be8                 | LR__0345
04be8     84 FA 05 F6 | 	mov	result1, #132
04bec     1C 01 90 FD | 	jmp	#LR__0382
04bf0                 | LR__0346
04bf0     86 FA 05 F6 | 	mov	result1, #134
04bf4     14 01 90 FD | 	jmp	#LR__0382
04bf8                 | LR__0347
04bf8     A2 FA 05 F6 | 	mov	result1, #162
04bfc     0C 01 90 FD | 	jmp	#LR__0382
04c00                 | LR__0348
04c00     9F FA 05 F6 | 	mov	result1, #159
04c04     04 01 90 FD | 	jmp	#LR__0382
04c08                 | LR__0349
04c08     82 FA 05 F6 | 	mov	result1, #130
04c0c     FC 00 90 FD | 	jmp	#LR__0382
04c10                 | LR__0350
04c10     99 FA 05 F6 | 	mov	result1, #153
04c14     F4 00 90 FD | 	jmp	#LR__0382
04c18                 | LR__0351
04c18     9C FA 05 F6 | 	mov	result1, #156
04c1c     EC 00 90 FD | 	jmp	#LR__0382
04c20                 | LR__0352
04c20     6F FA 05 F6 | 	mov	result1, #111
04c24     E4 00 90 FD | 	jmp	#LR__0382
04c28                 | LR__0353
04c28     6F FA 05 F6 | 	mov	result1, #111
04c2c     DC 00 90 FD | 	jmp	#LR__0382
04c30                 | LR__0354
04c30     93 FA 05 F6 | 	mov	result1, #147
04c34     D4 00 90 FD | 	jmp	#LR__0382
04c38                 | LR__0355
04c38     94 FA 05 F6 | 	mov	result1, #148
04c3c     CC 00 90 FD | 	jmp	#LR__0382
04c40                 | LR__0356
04c40     62 FA 05 F6 | 	mov	result1, #98
04c44     C4 00 90 FD | 	jmp	#LR__0382
04c48                 | LR__0357
04c48     A3 FA 05 F6 | 	mov	result1, #163
04c4c     BC 00 90 FD | 	jmp	#LR__0382
04c50                 | LR__0358
04c50     9D FA 05 F6 | 	mov	result1, #157
04c54     B4 00 90 FD | 	jmp	#LR__0382
04c58                 | LR__0359
04c58     A4 FA 05 F6 | 	mov	result1, #164
04c5c     AC 00 90 FD | 	jmp	#LR__0382
04c60                 | LR__0360
04c60     A8 FA 05 F6 | 	mov	result1, #168
04c64     A4 00 90 FD | 	jmp	#LR__0382
04c68                 | LR__0361
04c68     9A FA 05 F6 | 	mov	result1, #154
04c6c     9C 00 90 FD | 	jmp	#LR__0382
04c70                 | LR__0362
04c70     A6 FA 05 F6 | 	mov	result1, #166
04c74     94 00 90 FD | 	jmp	#LR__0382
04c78                 | LR__0363
04c78     66 FA 05 F6 | 	mov	result1, #102
04c7c     8C 00 90 FD | 	jmp	#LR__0382
04c80                 | LR__0364
04c80     67 FA 05 F6 | 	mov	result1, #103
04c84     84 00 90 FD | 	jmp	#LR__0382
04c88                 | LR__0365
04c88     64 FA 05 F6 | 	mov	result1, #100
04c8c     7C 00 90 FD | 	jmp	#LR__0382
04c90                 | LR__0366
04c90     65 FA 05 F6 | 	mov	result1, #101
04c94     74 00 90 FD | 	jmp	#LR__0382
04c98                 | LR__0367
04c98     98 FA 05 F6 | 	mov	result1, #152
04c9c     6C 00 90 FD | 	jmp	#LR__0382
04ca0                 | LR__0368
04ca0     7B FA 05 F6 | 	mov	result1, #123
04ca4     64 00 90 FD | 	jmp	#LR__0382
04ca8                 | LR__0369
04ca8     76 FA 05 F6 | 	mov	result1, #118
04cac     5C 00 90 FD | 	jmp	#LR__0382
04cb0                 | LR__0370
04cb0     A5 FA 05 F6 | 	mov	result1, #165
04cb4     54 00 90 FD | 	jmp	#LR__0382
04cb8                 | LR__0371
04cb8     7A FA 05 F6 | 	mov	result1, #122
04cbc     4C 00 90 FD | 	jmp	#LR__0382
04cc0                 | LR__0372
04cc0     54 FA 05 F6 | 	mov	result1, #84
04cc4     44 00 90 FD | 	jmp	#LR__0382
04cc8                 | LR__0373
04cc8     6B FA 05 F6 | 	mov	result1, #107
04ccc     3C 00 90 FD | 	jmp	#LR__0382
04cd0                 | LR__0374
04cd0     87 FA 05 F6 | 	mov	result1, #135
04cd4     34 00 90 FD | 	jmp	#LR__0382
04cd8                 | LR__0375
04cd8     6A FA 05 F6 | 	mov	result1, #106
04cdc     2C 00 90 FD | 	jmp	#LR__0382
04ce0                 | LR__0376
04ce0     6E FA 05 F6 | 	mov	result1, #110
04ce4     24 00 90 FD | 	jmp	#LR__0382
04ce8                 | LR__0377
04ce8     A1 FA 05 F6 | 	mov	result1, #161
04cec     1C 00 90 FD | 	jmp	#LR__0382
04cf0                 | LR__0378
04cf0     83 FA 05 F6 | 	mov	result1, #131
04cf4     14 00 90 FD | 	jmp	#LR__0382
04cf8                 | LR__0379
04cf8     A0 FA 05 F6 | 	mov	result1, #160
04cfc     0C 00 90 FD | 	jmp	#LR__0382
04d00                 | LR__0380
04d00     9B FA 05 F6 | 	mov	result1, #155
04d04     04 00 90 FD | 	jmp	#LR__0382
04d08                 | LR__0381
04d08     00 FA 05 F6 | 	mov	result1, #0
04d0c                 | LR__0382
04d0c     A7 F0 03 F6 | 	mov	ptra, fp
04d10     B2 00 A0 FD | 	call	#popregs_
04d14                 | _isfunction_ret
04d14     2D 00 64 FD | 	ret
04d18                 | 
04d18                 | ' 
04d18                 | ' function isname(s as string) as boolean
04d18                 | _isname
04d18     0D 4A 05 F6 | 	mov	COUNT_, #13
04d1c     A8 00 A0 FD | 	call	#pushregs_
04d20     09 1F 02 F6 | 	mov	local01, arg01
04d24     09 21 02 F6 | 	mov	local02, arg01
04d28     97 06 48 FB | 	callpa	#(@LR__0391-@LR__0390)>>2,fcache_load_ptr_
04d2c                 | LR__0390
04d2c     10 FB C9 FA | 	rdbyte	result1, local02 wz
04d30     01 20 06 51 |  if_ne	add	local02, #1
04d34     F4 FF 9F 5D |  if_ne	jmp	#LR__0390
04d38                 | LR__0391
04d38     09 21 82 F1 | 	sub	local02, arg01
04d3c     10 FB 01 F6 | 	mov	result1, local02
04d40     FD 22 0A F6 | 	mov	local03, result1 wz
04d44     00 FA 05 A6 |  if_e	mov	result1, #0
04d48     34 02 90 AD |  if_e	jmp	#LR__0403
04d4c     0F 13 02 F6 | 	mov	arg01, local01
04d50     01 14 06 F6 | 	mov	arg02, #1
04d54     01 16 06 F6 | 	mov	arg03, #1
04d58     1C BF B1 FD | 	call	#__system__Mid_S
04d5c     FD 24 02 F6 | 	mov	local04, result1
04d60                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
04d60     72 01 00 FF 
04d64     C7 15 06 F6 | 	mov	arg02, ##@LR__5040
04d68     12 13 02 F6 | 	mov	arg01, local04
04d6c     D0 9D B1 FD | 	call	#__system___string_cmp
04d70     00 FA 55 F2 | 	cmps	result1, #0 wc
04d74     18 00 90 CD |  if_b	jmp	#LR__0392
04d78     72 01 00 FF 
04d7c     C9 15 06 F6 | 	mov	arg02, ##@LR__5041
04d80     12 13 02 F6 | 	mov	arg01, local04
04d84     B8 9D B1 FD | 	call	#__system___string_cmp
04d88     01 FA 55 F2 | 	cmps	result1, #1 wc
04d8c     1C 00 90 CD |  if_b	jmp	#LR__0393
04d90                 | LR__0392
04d90     72 01 00 FF 
04d94     CB 15 06 F6 | 	mov	arg02, ##@LR__5042
04d98     12 13 02 F6 | 	mov	arg01, local04
04d9c     A0 9D B1 FD | 	call	#__system___string_cmp
04da0     00 FA 0D F2 | 	cmp	result1, #0 wz
04da4     00 FA 05 56 |  if_ne	mov	result1, #0
04da8     D4 01 90 5D |  if_ne	jmp	#LR__0403
04dac                 | LR__0393
04dac                 | ' if l>2 then 
04dac     03 22 56 F2 | 	cmps	local03, #3 wc
04db0     C8 01 90 CD |  if_b	jmp	#LR__0402
04db4                 | '   for i=2 to l
04db4     02 26 06 F6 | 	mov	local05, #2
04db8     11 29 02 F6 | 	mov	local06, local03
04dbc     01 28 06 F1 | 	add	local06, #1
04dc0                 | LR__0394
04dc0     14 27 52 F2 | 	cmps	local05, local06 wc
04dc4     B4 01 90 3D |  if_ae	jmp	#LR__0401
04dc8     0F 13 02 F6 | 	mov	arg01, local01
04dcc     13 15 02 F6 | 	mov	arg02, local05
04dd0     01 16 06 F6 | 	mov	arg03, #1
04dd4     A0 BE B1 FD | 	call	#__system__Mid_S
04dd8     FD 24 02 F6 | 	mov	local04, result1
04ddc                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false
04ddc     11 27 52 F2 | 	cmps	local05, local03 wc
04de0     9C 00 90 3D |  if_ae	jmp	#LR__0397
04de4     72 01 00 FF 
04de8     CD 15 06 F6 | 	mov	arg02, ##@LR__5043
04dec     12 13 02 F6 | 	mov	arg01, local04
04df0     4C 9D B1 FD | 	call	#__system___string_cmp
04df4     00 FA 55 F2 | 	cmps	result1, #0 wc
04df8     18 00 90 CD |  if_b	jmp	#LR__0395
04dfc     72 01 00 FF 
04e00     CF 15 06 F6 | 	mov	arg02, ##@LR__5044
04e04     12 13 02 F6 | 	mov	arg01, local04
04e08     34 9D B1 FD | 	call	#__system___string_cmp
04e0c     01 FA 55 F2 | 	cmps	result1, #1 wc
04e10     6C 00 90 CD |  if_b	jmp	#LR__0397
04e14                 | LR__0395
04e14     72 01 00 FF 
04e18     D1 15 06 F6 | 	mov	arg02, ##@LR__5045
04e1c     12 13 02 F6 | 	mov	arg01, local04
04e20     1C 9D B1 FD | 	call	#__system___string_cmp
04e24     00 FA 55 F2 | 	cmps	result1, #0 wc
04e28     18 00 90 CD |  if_b	jmp	#LR__0396
04e2c     72 01 00 FF 
04e30     D3 15 06 F6 | 	mov	arg02, ##@LR__5046
04e34     12 13 02 F6 | 	mov	arg01, local04
04e38     04 9D B1 FD | 	call	#__system___string_cmp
04e3c     01 FA 55 F2 | 	cmps	result1, #1 wc
04e40     3C 00 90 CD |  if_b	jmp	#LR__0397
04e44                 | LR__0396
04e44     72 01 00 FF 
04e48     D5 2B 06 F6 | 	mov	local07, ##@LR__5047
04e4c     12 13 02 F6 | 	mov	arg01, local04
04e50     15 15 02 F6 | 	mov	arg02, local07
04e54     E8 9C B1 FD | 	call	#__system___string_cmp
04e58     00 FA 0D F2 | 	cmp	result1, #0 wz
04e5c     20 00 90 AD |  if_e	jmp	#LR__0397
04e60     72 01 00 FF 
04e64     D7 2D 06 F6 | 	mov	local08, ##@LR__5048
04e68     12 13 02 F6 | 	mov	arg01, local04
04e6c     16 15 02 F6 | 	mov	arg02, local08
04e70     CC 9C B1 FD | 	call	#__system___string_cmp
04e74     FD 2E 0A F6 | 	mov	local09, result1 wz
04e78     00 FA 05 56 |  if_ne	mov	result1, #0
04e7c     00 01 90 5D |  if_ne	jmp	#LR__0403
04e80                 | LR__0397
04e80                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
04e80     11 27 0A F2 | 	cmp	local05, local03 wz
04e84     EC 00 90 5D |  if_ne	jmp	#LR__0400
04e88     72 01 00 FF 
04e8c     D9 31 06 F6 | 	mov	local10, ##@LR__5049
04e90     12 13 02 F6 | 	mov	arg01, local04
04e94     18 15 02 F6 | 	mov	arg02, local10
04e98     A4 9C B1 FD | 	call	#__system___string_cmp
04e9c     FD 32 02 F6 | 	mov	local11, result1
04ea0     00 32 56 F2 | 	cmps	local11, #0 wc
04ea4     1C 00 90 CD |  if_b	jmp	#LR__0398
04ea8     72 01 00 FF 
04eac     DB 15 06 F6 | 	mov	arg02, ##@LR__5050
04eb0     12 13 02 F6 | 	mov	arg01, local04
04eb4     88 9C B1 FD | 	call	#__system___string_cmp
04eb8     FD 30 02 F6 | 	mov	local10, result1
04ebc     01 30 56 F2 | 	cmps	local10, #1 wc
04ec0     B0 00 90 CD |  if_b	jmp	#LR__0400
04ec4                 | LR__0398
04ec4     72 01 00 FF 
04ec8     DD 15 06 F6 | 	mov	arg02, ##@LR__5051
04ecc     12 13 02 F6 | 	mov	arg01, local04
04ed0     6C 9C B1 FD | 	call	#__system___string_cmp
04ed4     00 FA 55 F2 | 	cmps	result1, #0 wc
04ed8     1C 00 90 CD |  if_b	jmp	#LR__0399
04edc     72 01 00 FF 
04ee0     DF 2F 06 F6 | 	mov	local09, ##@LR__5052
04ee4     12 13 02 F6 | 	mov	arg01, local04
04ee8     17 15 02 F6 | 	mov	arg02, local09
04eec     50 9C B1 FD | 	call	#__system___string_cmp
04ef0     01 FA 55 F2 | 	cmps	result1, #1 wc
04ef4     7C 00 90 CD |  if_b	jmp	#LR__0400
04ef8                 | LR__0399
04ef8     72 01 00 FF 
04efc     E1 2F 06 F6 | 	mov	local09, ##@LR__5053
04f00     12 13 02 F6 | 	mov	arg01, local04
04f04     17 15 02 F6 | 	mov	arg02, local09
04f08     34 9C B1 FD | 	call	#__system___string_cmp
04f0c     00 FA 4D F2 | 	cmps	result1, #0 wz
04f10     60 00 90 AD |  if_e	jmp	#LR__0400
04f14     72 01 00 FF 
04f18     E3 2D 06 F6 | 	mov	local08, ##@LR__5054
04f1c     12 13 02 F6 | 	mov	arg01, local04
04f20     16 15 02 F6 | 	mov	arg02, local08
04f24     18 9C B1 FD | 	call	#__system___string_cmp
04f28     FD 2E 0A F6 | 	mov	local09, result1 wz
04f2c     44 00 90 AD |  if_e	jmp	#LR__0400
04f30     72 01 00 FF 
04f34     E5 35 06 F6 | 	mov	local12, ##@LR__5055
04f38     1A 2D 02 F6 | 	mov	local08, local12
04f3c     12 13 02 F6 | 	mov	arg01, local04
04f40     16 15 02 F6 | 	mov	arg02, local08
04f44     F8 9B B1 FD | 	call	#__system___string_cmp
04f48     FD 2A 0A F6 | 	mov	local07, result1 wz
04f4c     24 00 90 AD |  if_e	jmp	#LR__0400
04f50     72 01 00 FF 
04f54     E7 37 06 F6 | 	mov	local13, ##@LR__5056
04f58     1B 35 02 F6 | 	mov	local12, local13
04f5c     12 13 02 F6 | 	mov	arg01, local04
04f60     1A 15 02 F6 | 	mov	arg02, local12
04f64     D8 9B B1 FD | 	call	#__system___string_cmp
04f68     FD 2C 0A F6 | 	mov	local08, result1 wz
04f6c     00 FA 05 56 |  if_ne	mov	result1, #0
04f70     0C 00 90 5D |  if_ne	jmp	#LR__0403
04f74                 | LR__0400
04f74     01 26 06 F1 | 	add	local05, #1
04f78     44 FE 9F FD | 	jmp	#LR__0394
04f7c                 | LR__0401
04f7c                 | LR__0402
04f7c                 | ' return true
04f7c     01 FA 65 F6 | 	neg	result1, #1
04f80                 | LR__0403
04f80     A7 F0 03 F6 | 	mov	ptra, fp
04f84     B2 00 A0 FD | 	call	#popregs_
04f88                 | _isname_ret
04f88     2D 00 64 FD | 	ret
04f8c                 | 
04f8c                 | ' 
04f8c                 | ' function isnum(s as string) as boolean
04f8c                 | _isnum
04f8c     0D 4A 05 F6 | 	mov	COUNT_, #13
04f90     A8 00 A0 FD | 	call	#pushregs_
04f94     09 1F 02 F6 | 	mov	local01, arg01
04f98     00 20 06 F6 | 	mov	local02, #0
04f9c     00 22 06 F6 | 	mov	local03, #0
04fa0     0F 13 02 F6 | 	mov	arg01, local01
04fa4     09 25 02 F6 | 	mov	local04, arg01
04fa8     97 06 48 FB | 	callpa	#(@LR__0411-@LR__0410)>>2,fcache_load_ptr_
04fac                 | LR__0410
04fac     12 FB C9 FA | 	rdbyte	result1, local04 wz
04fb0     01 24 06 51 |  if_ne	add	local04, #1
04fb4     F4 FF 9F 5D |  if_ne	jmp	#LR__0410
04fb8                 | LR__0411
04fb8     09 25 82 F1 | 	sub	local04, arg01
04fbc     12 FB 01 F6 | 	mov	result1, local04
04fc0     FD 26 0A F6 | 	mov	local05, result1 wz
04fc4     00 FA 05 A6 |  if_e	mov	result1, #0
04fc8     8C 02 90 AD |  if_e	jmp	#LR__0422
04fcc     0F 13 02 F6 | 	mov	arg01, local01
04fd0     01 14 06 F6 | 	mov	arg02, #1
04fd4     01 16 06 F6 | 	mov	arg03, #1
04fd8     9C BC B1 FD | 	call	#__system__Mid_S
04fdc     FD 28 02 F6 | 	mov	local06, result1
04fe0                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
04fe0     72 01 00 FF 
04fe4     E9 15 06 F6 | 	mov	arg02, ##@LR__5057
04fe8     14 13 02 F6 | 	mov	arg01, local06
04fec     50 9B B1 FD | 	call	#__system___string_cmp
04ff0     00 FA 55 F2 | 	cmps	result1, #0 wc
04ff4     18 00 90 CD |  if_b	jmp	#LR__0412
04ff8     72 01 00 FF 
04ffc     EB 15 06 F6 | 	mov	arg02, ##@LR__5058
05000     14 13 02 F6 | 	mov	arg01, local06
05004     38 9B B1 FD | 	call	#__system___string_cmp
05008     01 FA 55 F2 | 	cmps	result1, #1 wc
0500c     78 00 90 CD |  if_b	jmp	#LR__0413
05010                 | LR__0412
05010     72 01 00 FF 
05014     ED 15 06 F6 | 	mov	arg02, ##@LR__5059
05018     14 13 02 F6 | 	mov	arg01, local06
0501c     20 9B B1 FD | 	call	#__system___string_cmp
05020     00 FA 0D F2 | 	cmp	result1, #0 wz
05024     60 00 90 AD |  if_e	jmp	#LR__0413
05028     72 01 00 FF 
0502c     EF 2B 06 F6 | 	mov	local07, ##@LR__5060
05030     14 13 02 F6 | 	mov	arg01, local06
05034     15 15 02 F6 | 	mov	arg02, local07
05038     04 9B B1 FD | 	call	#__system___string_cmp
0503c     00 FA 0D F2 | 	cmp	result1, #0 wz
05040     44 00 90 AD |  if_e	jmp	#LR__0413
05044     72 01 00 FF 
05048     F1 2D 06 F6 | 	mov	local08, ##@LR__5061
0504c     16 2B 02 F6 | 	mov	local07, local08
05050     14 13 02 F6 | 	mov	arg01, local06
05054     15 15 02 F6 | 	mov	arg02, local07
05058     E4 9A B1 FD | 	call	#__system___string_cmp
0505c     00 FA 4D F2 | 	cmps	result1, #0 wz
05060     24 00 90 AD |  if_e	jmp	#LR__0413
05064     72 01 00 FF 
05068     F3 2F 06 F6 | 	mov	local09, ##@LR__5062
0506c     17 2D 02 F6 | 	mov	local08, local09
05070     14 13 02 F6 | 	mov	arg01, local06
05074     16 15 02 F6 | 	mov	arg02, local08
05078     C4 9A B1 FD | 	call	#__system___string_cmp
0507c     FD 2A 0A F6 | 	mov	local07, result1 wz
05080     00 FA 05 56 |  if_ne	mov	result1, #0
05084     D0 01 90 5D |  if_ne	jmp	#LR__0422
05088                 | LR__0413
05088                 | ' if m$="." then ds=1
05088     72 01 00 FF 
0508c     F5 15 06 F6 | 	mov	arg02, ##@LR__5063
05090     14 13 02 F6 | 	mov	arg01, local06
05094     A8 9A B1 FD | 	call	#__system___string_cmp
05098     00 FA 0D F2 | 	cmp	result1, #0 wz
0509c     01 20 06 A6 |  if_e	mov	local02, #1
050a0                 | ' if l>1 then 
050a0     02 26 56 F2 | 	cmps	local05, #2 wc
050a4     AC 01 90 CD |  if_b	jmp	#LR__0421
050a8                 | '   for i=2 to l
050a8     02 30 06 F6 | 	mov	local10, #2
050ac     13 33 02 F6 | 	mov	local11, local05
050b0     01 32 06 F1 | 	add	local11, #1
050b4                 | LR__0414
050b4     19 31 52 F2 | 	cmps	local10, local11 wc
050b8     98 01 90 3D |  if_ae	jmp	#LR__0420
050bc     0F 13 02 F6 | 	mov	arg01, local01
050c0     18 15 02 F6 | 	mov	arg02, local10
050c4     01 16 06 F6 | 	mov	arg03, #1
050c8     AC BB B1 FD | 	call	#__system__Mid_S
050cc     FD 28 02 F6 | 	mov	local06, result1
050d0                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." andalso m$<>"E" andalso m$<>"e" andalso m$<>"-" then return false
050d0     72 01 00 FF 
050d4     F7 15 06 F6 | 	mov	arg02, ##@LR__5064
050d8     14 13 02 F6 | 	mov	arg01, local06
050dc     60 9A B1 FD | 	call	#__system___string_cmp
050e0     00 FA 55 F2 | 	cmps	result1, #0 wc
050e4     18 00 90 CD |  if_b	jmp	#LR__0415
050e8     72 01 00 FF 
050ec     F9 15 06 F6 | 	mov	arg02, ##@LR__5065
050f0     14 13 02 F6 | 	mov	arg01, local06
050f4     48 9A B1 FD | 	call	#__system___string_cmp
050f8     01 FA 55 F2 | 	cmps	result1, #1 wc
050fc     98 00 90 CD |  if_b	jmp	#LR__0416
05100                 | LR__0415
05100     72 01 00 FF 
05104     FB 15 06 F6 | 	mov	arg02, ##@LR__5066
05108     14 13 02 F6 | 	mov	arg01, local06
0510c     30 9A B1 FD | 	call	#__system___string_cmp
05110     00 FA 0D F2 | 	cmp	result1, #0 wz
05114     80 00 90 AD |  if_e	jmp	#LR__0416
05118     72 01 00 FF 
0511c     FD 2B 06 F6 | 	mov	local07, ##@LR__5067
05120     14 13 02 F6 | 	mov	arg01, local06
05124     15 15 02 F6 | 	mov	arg02, local07
05128     14 9A B1 FD | 	call	#__system___string_cmp
0512c     00 FA 4D F2 | 	cmps	result1, #0 wz
05130     64 00 90 AD |  if_e	jmp	#LR__0416
05134     72 01 00 FF 
05138     FF 2D 06 F6 | 	mov	local08, ##@LR__5068
0513c     16 2B 02 F6 | 	mov	local07, local08
05140     14 13 02 F6 | 	mov	arg01, local06
05144     15 15 02 F6 | 	mov	arg02, local07
05148     F4 99 B1 FD | 	call	#__system___string_cmp
0514c     FD 34 0A F6 | 	mov	local12, result1 wz
05150     44 00 90 AD |  if_e	jmp	#LR__0416
05154     73 01 00 FF 
05158     01 2E 06 F6 | 	mov	local09, ##@LR__5069
0515c     17 2D 02 F6 | 	mov	local08, local09
05160     14 13 02 F6 | 	mov	arg01, local06
05164     16 15 02 F6 | 	mov	arg02, local08
05168     D4 99 B1 FD | 	call	#__system___string_cmp
0516c     FD 2A 0A F6 | 	mov	local07, result1 wz
05170     24 00 90 AD |  if_e	jmp	#LR__0416
05174     73 01 00 FF 
05178     03 36 06 F6 | 	mov	local13, ##@LR__5070
0517c     1B 2F 02 F6 | 	mov	local09, local13
05180     14 13 02 F6 | 	mov	arg01, local06
05184     17 15 02 F6 | 	mov	arg02, local09
05188     B4 99 B1 FD | 	call	#__system___string_cmp
0518c     FD 2C 0A F6 | 	mov	local08, result1 wz
05190     00 FA 05 56 |  if_ne	mov	result1, #0
05194     C0 00 90 5D |  if_ne	jmp	#LR__0422
05198                 | LR__0416
05198                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
05198     73 01 00 FF 
0519c     05 14 06 F6 | 	mov	arg02, ##@LR__5071
051a0     14 13 02 F6 | 	mov	arg01, local06
051a4     98 99 B1 FD | 	call	#__system___string_cmp
051a8     00 FA 0D F2 | 	cmp	result1, #0 wz
051ac     38 00 90 5D |  if_ne	jmp	#LR__0417
051b0     18 15 02 F6 | 	mov	arg02, local10
051b4     01 14 86 F1 | 	sub	arg02, #1
051b8     0F 13 02 F6 | 	mov	arg01, local01
051bc     01 16 06 F6 | 	mov	arg03, #1
051c0     B4 BA B1 FD | 	call	#__system__Mid_S
051c4     FD 12 02 F6 | 	mov	arg01, result1
051c8     A4 BC B1 FD | 	call	#__system__LCase_S
051cc     FD 12 02 F6 | 	mov	arg01, result1
051d0     73 01 00 FF 
051d4     07 14 06 F6 | 	mov	arg02, ##@LR__5072
051d8     64 99 B1 FD | 	call	#__system___string_cmp
051dc     00 FA 0D F2 | 	cmp	result1, #0 wz
051e0     00 FA 05 56 |  if_ne	mov	result1, #0
051e4     70 00 90 5D |  if_ne	jmp	#LR__0422
051e8                 | LR__0417
051e8                 | '     if m$="." then ds+=1: if ds>1 then return false
051e8     73 01 00 FF 
051ec     09 14 06 F6 | 	mov	arg02, ##@LR__5073
051f0     14 13 02 F6 | 	mov	arg01, local06
051f4     48 99 B1 FD | 	call	#__system___string_cmp
051f8     00 FA 0D F2 | 	cmp	result1, #0 wz
051fc     01 20 06 A1 |  if_e	add	local02, #1
05200     02 20 56 A2 |  if_e	cmps	local02, #2 wc
05204     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
05208     4C 00 90 2D |  if_nc_and_z	jmp	#LR__0422
0520c                 | '     if m$="E" orelse m$="e" then es+=1: if es>1 then return false
0520c     73 01 00 FF 
05210     0B 14 06 F6 | 	mov	arg02, ##@LR__5074
05214     14 13 02 F6 | 	mov	arg01, local06
05218     24 99 B1 FD | 	call	#__system___string_cmp
0521c     00 FA 4D F2 | 	cmps	result1, #0 wz
05220     18 00 90 AD |  if_e	jmp	#LR__0418
05224     73 01 00 FF 
05228     0D 14 06 F6 | 	mov	arg02, ##@LR__5075
0522c     14 13 02 F6 | 	mov	arg01, local06
05230     0C 99 B1 FD | 	call	#__system___string_cmp
05234     00 FA 4D F2 | 	cmps	result1, #0 wz
05238     10 00 90 5D |  if_ne	jmp	#LR__0419
0523c                 | LR__0418
0523c     01 22 06 F1 | 	add	local03, #1
05240     02 22 56 F2 | 	cmps	local03, #2 wc
05244     00 FA 05 36 |  if_ae	mov	result1, #0
05248     0C 00 90 3D |  if_ae	jmp	#LR__0422
0524c                 | LR__0419
0524c     01 30 06 F1 | 	add	local10, #1
05250     60 FE 9F FD | 	jmp	#LR__0414
05254                 | LR__0420
05254                 | LR__0421
05254                 | ' return true
05254     01 FA 65 F6 | 	neg	result1, #1
05258                 | LR__0422
05258     A7 F0 03 F6 | 	mov	ptra, fp
0525c     B2 00 A0 FD | 	call	#popregs_
05260                 | _isnum_ret
05260     2D 00 64 FD | 	ret
05264                 | 
05264                 | '   
05264                 | ' function isint(s as string) as boolean
05264                 | _isint
05264     05 4A 05 F6 | 	mov	COUNT_, #5
05268     A8 00 A0 FD | 	call	#pushregs_
0526c     09 1F 02 F6 | 	mov	local01, arg01
05270     09 21 02 F6 | 	mov	local02, arg01
05274     97 06 48 FB | 	callpa	#(@LR__0431-@LR__0430)>>2,fcache_load_ptr_
05278                 | LR__0430
05278     10 FB C9 FA | 	rdbyte	result1, local02 wz
0527c     01 20 06 51 |  if_ne	add	local02, #1
05280     F4 FF 9F 5D |  if_ne	jmp	#LR__0430
05284                 | LR__0431
05284     09 21 82 F1 | 	sub	local02, arg01
05288     10 FB 01 F6 | 	mov	result1, local02
0528c     FD 20 0A F6 | 	mov	local02, result1 wz
05290     00 FA 05 A6 |  if_e	mov	result1, #0
05294     18 01 90 AD |  if_e	jmp	#LR__0439
05298     0F 13 02 F6 | 	mov	arg01, local01
0529c     01 14 06 F6 | 	mov	arg02, #1
052a0     01 16 06 F6 | 	mov	arg03, #1
052a4     D0 B9 B1 FD | 	call	#__system__Mid_S
052a8     FD 22 02 F6 | 	mov	local03, result1
052ac                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
052ac     73 01 00 FF 
052b0     0F 14 06 F6 | 	mov	arg02, ##@LR__5076
052b4     11 13 02 F6 | 	mov	arg01, local03
052b8     84 98 B1 FD | 	call	#__system___string_cmp
052bc     00 FA 55 F2 | 	cmps	result1, #0 wc
052c0     18 00 90 CD |  if_b	jmp	#LR__0432
052c4     73 01 00 FF 
052c8     11 14 06 F6 | 	mov	arg02, ##@LR__5077
052cc     11 13 02 F6 | 	mov	arg01, local03
052d0     6C 98 B1 FD | 	call	#__system___string_cmp
052d4     01 FA 55 F2 | 	cmps	result1, #1 wc
052d8     4C 00 90 CD |  if_b	jmp	#LR__0433
052dc                 | LR__0432
052dc     73 01 00 FF 
052e0     13 14 06 F6 | 	mov	arg02, ##@LR__5078
052e4     11 13 02 F6 | 	mov	arg01, local03
052e8     54 98 B1 FD | 	call	#__system___string_cmp
052ec     00 FA 0D F2 | 	cmp	result1, #0 wz
052f0     34 00 90 AD |  if_e	jmp	#LR__0433
052f4     73 01 00 FF 
052f8     15 14 06 F6 | 	mov	arg02, ##@LR__5079
052fc     11 13 02 F6 | 	mov	arg01, local03
05300     3C 98 B1 FD | 	call	#__system___string_cmp
05304     00 FA 0D F2 | 	cmp	result1, #0 wz
05308     1C 00 90 AD |  if_e	jmp	#LR__0433
0530c     73 01 00 FF 
05310     17 14 06 F6 | 	mov	arg02, ##@LR__5080
05314     11 13 02 F6 | 	mov	arg01, local03
05318     24 98 B1 FD | 	call	#__system___string_cmp
0531c     00 FA 0D F2 | 	cmp	result1, #0 wz
05320     00 FA 05 56 |  if_ne	mov	result1, #0
05324     88 00 90 5D |  if_ne	jmp	#LR__0439
05328                 | LR__0433
05328                 | ' 
05328                 | ' if l>1 then 
05328     02 20 56 F2 | 	cmps	local02, #2 wc
0532c     7C 00 90 CD |  if_b	jmp	#LR__0438
05330                 | '   for i=2 to l
05330     02 24 06 F6 | 	mov	local04, #2
05334     10 27 02 F6 | 	mov	local05, local02
05338     01 26 06 F1 | 	add	local05, #1
0533c                 | LR__0434
0533c     13 25 52 F2 | 	cmps	local04, local05 wc
05340     68 00 90 3D |  if_ae	jmp	#LR__0437
05344     0F 13 02 F6 | 	mov	arg01, local01
05348     12 15 02 F6 | 	mov	arg02, local04
0534c     01 16 06 F6 | 	mov	arg03, #1
05350     24 B9 B1 FD | 	call	#__system__Mid_S
05354     FD 22 02 F6 | 	mov	local03, result1
05358                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
05358     73 01 00 FF 
0535c     19 14 06 F6 | 	mov	arg02, ##@LR__5081
05360     11 13 02 F6 | 	mov	arg01, local03
05364     D8 97 B1 FD | 	call	#__system___string_cmp
05368     00 FA 55 F2 | 	cmps	result1, #0 wc
0536c     18 00 90 CD |  if_b	jmp	#LR__0435
05370     73 01 00 FF 
05374     1B 14 06 F6 | 	mov	arg02, ##@LR__5082
05378     11 13 02 F6 | 	mov	arg01, local03
0537c     C0 97 B1 FD | 	call	#__system___string_cmp
05380     01 FA 55 F2 | 	cmps	result1, #1 wc
05384     1C 00 90 CD |  if_b	jmp	#LR__0436
05388                 | LR__0435
05388     73 01 00 FF 
0538c     1D 14 06 F6 | 	mov	arg02, ##@LR__5083
05390     11 13 02 F6 | 	mov	arg01, local03
05394     A8 97 B1 FD | 	call	#__system___string_cmp
05398     00 FA 0D F2 | 	cmp	result1, #0 wz
0539c     00 FA 05 56 |  if_ne	mov	result1, #0
053a0     0C 00 90 5D |  if_ne	jmp	#LR__0439
053a4                 | LR__0436
053a4     01 24 06 F1 | 	add	local04, #1
053a8     90 FF 9F FD | 	jmp	#LR__0434
053ac                 | LR__0437
053ac                 | LR__0438
053ac                 | ' return true
053ac     01 FA 65 F6 | 	neg	result1, #1
053b0                 | LR__0439
053b0     A7 F0 03 F6 | 	mov	ptra, fp
053b4     B2 00 A0 FD | 	call	#popregs_
053b8                 | _isint_ret
053b8     2D 00 64 FD | 	ret
053bc                 | 
053bc                 | ' 
053bc                 | ' function isdec(s as string) as boolean
053bc                 | _isdec
053bc     05 4A 05 F6 | 	mov	COUNT_, #5
053c0     A8 00 A0 FD | 	call	#pushregs_
053c4     09 1F 02 F6 | 	mov	local01, arg01
053c8     09 21 02 F6 | 	mov	local02, arg01
053cc     97 06 48 FB | 	callpa	#(@LR__0441-@LR__0440)>>2,fcache_load_ptr_
053d0                 | LR__0440
053d0     10 FB C9 FA | 	rdbyte	result1, local02 wz
053d4     01 20 06 51 |  if_ne	add	local02, #1
053d8     F4 FF 9F 5D |  if_ne	jmp	#LR__0440
053dc                 | LR__0441
053dc     09 21 82 F1 | 	sub	local02, arg01
053e0     10 FB 01 F6 | 	mov	result1, local02
053e4     FD 20 0A F6 | 	mov	local02, result1 wz
053e8     00 FA 05 A6 |  if_e	mov	result1, #0
053ec     80 00 90 AD |  if_e	jmp	#LR__0446
053f0                 | ' for i=1 to l
053f0     01 22 06 F6 | 	mov	local03, #1
053f4     10 25 02 F6 | 	mov	local04, local02
053f8     01 24 06 F1 | 	add	local04, #1
053fc                 | LR__0442
053fc     12 23 52 F2 | 	cmps	local03, local04 wc
05400     68 00 90 3D |  if_ae	jmp	#LR__0445
05404     0F 13 02 F6 | 	mov	arg01, local01
05408     11 15 02 F6 | 	mov	arg02, local03
0540c     01 16 06 F6 | 	mov	arg03, #1
05410     64 B8 B1 FD | 	call	#__system__Mid_S
05414     FD 26 02 F6 | 	mov	local05, result1
05418                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
05418     73 01 00 FF 
0541c     1F 14 06 F6 | 	mov	arg02, ##@LR__5084
05420     13 13 02 F6 | 	mov	arg01, local05
05424     18 97 B1 FD | 	call	#__system___string_cmp
05428     00 FA 55 F2 | 	cmps	result1, #0 wc
0542c     18 00 90 CD |  if_b	jmp	#LR__0443
05430     73 01 00 FF 
05434     21 14 06 F6 | 	mov	arg02, ##@LR__5085
05438     13 13 02 F6 | 	mov	arg01, local05
0543c     00 97 B1 FD | 	call	#__system___string_cmp
05440     01 FA 55 F2 | 	cmps	result1, #1 wc
05444     1C 00 90 CD |  if_b	jmp	#LR__0444
05448                 | LR__0443
05448     73 01 00 FF 
0544c     23 14 06 F6 | 	mov	arg02, ##@LR__5086
05450     13 13 02 F6 | 	mov	arg01, local05
05454     E8 96 B1 FD | 	call	#__system___string_cmp
05458     00 FA 0D F2 | 	cmp	result1, #0 wz
0545c     00 FA 05 56 |  if_ne	mov	result1, #0
05460     0C 00 90 5D |  if_ne	jmp	#LR__0446
05464                 | LR__0444
05464     01 22 06 F1 | 	add	local03, #1
05468     90 FF 9F FD | 	jmp	#LR__0442
0546c                 | LR__0445
0546c                 | ' return true
0546c     01 FA 65 F6 | 	neg	result1, #1
05470                 | LR__0446
05470     A7 F0 03 F6 | 	mov	ptra, fp
05474     B2 00 A0 FD | 	call	#popregs_
05478                 | _isdec_ret
05478     2D 00 64 FD | 	ret
0547c                 | 
0547c                 | ' 
0547c                 | ' function isstring(s as string) as boolean
0547c                 | _isstring
0547c     01 4A 05 F6 | 	mov	COUNT_, #1
05480     A8 00 A0 FD | 	call	#pushregs_
05484                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
05484     09 1F 02 F6 | 	mov	local01, arg01
05488     01 14 06 F6 | 	mov	arg02, #1
0548c     D0 B6 B1 FD | 	call	#__system__Left_S
05490     FD 12 02 F6 | 	mov	arg01, result1
05494     73 01 00 FF 
05498     25 14 06 F6 | 	mov	arg02, ##@LR__5087
0549c     A0 96 B1 FD | 	call	#__system___string_cmp
054a0     00 FA 4D F2 | 	cmps	result1, #0 wz
054a4     28 00 90 5D |  if_ne	jmp	#LR__0450
054a8     0F 13 02 F6 | 	mov	arg01, local01
054ac     01 14 06 F6 | 	mov	arg02, #1
054b0     34 B7 B1 FD | 	call	#__system__Right_S
054b4     FD 12 02 F6 | 	mov	arg01, result1
054b8     73 01 00 FF 
054bc     27 14 06 F6 | 	mov	arg02, ##@LR__5088
054c0     7C 96 B1 FD | 	call	#__system___string_cmp
054c4     00 FA 4D F2 | 	cmps	result1, #0 wz
054c8     01 FA 65 A6 |  if_e	neg	result1, #1
054cc     04 00 90 AD |  if_e	jmp	#LR__0451
054d0                 | LR__0450
054d0     00 FA 05 F6 | 	mov	result1, #0
054d4                 | LR__0451
054d4     A7 F0 03 F6 | 	mov	ptra, fp
054d8     B2 00 A0 FD | 	call	#popregs_
054dc                 | _isstring_ret
054dc     2D 00 64 FD | 	ret
054e0                 | 
054e0                 | ' 
054e0                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
054e0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
054e0                 | ' 
054e0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
054e0                 | ' '----------------------Reverse Polish notation precompiler -----------------------------------------------------------------------------
054e0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
054e0                 | ' 
054e0                 | ' '----- delete a line from a program
054e0                 | ' 
054e0                 | ' function deleteline(aline as ulong) as integer
054e0                 | _deleteline
054e0     03 4A 05 F6 | 	mov	COUNT_, #3
054e4     A8 00 A0 FD | 	call	#pushregs_
054e8     2C F0 07 F1 | 	add	ptra, #44
054ec     04 4E 05 F1 | 	add	fp, #4
054f0     A7 12 62 FC | 	wrlong	arg01, fp
054f4     6A 00 00 FF 
054f8     84 E4 05 F1 | 	add	objptr, ##54404
054fc     F2 1E 02 FB | 	rdlong	local01, objptr
05500     0C 4E 05 F1 | 	add	fp, #12
05504     A7 1E 62 FC | 	wrlong	local01, fp
05508     10 4E 85 F1 | 	sub	fp, #16
0550c                 | ' 
0550c                 | ' 
0550c                 | ' searchptr=programstart
0550c                 | ' 
0550c                 | ' do
0550c     5E 00 00 FF 
05510     B8 E5 85 F1 | 	sub	objptr, ##48568
05514                 | LR__0460
05514     14 4E 05 F1 | 	add	fp, #20
05518     A7 12 02 F6 | 	mov	arg01, fp
0551c     04 4E 85 F1 | 	sub	fp, #4
05520     A7 14 02 FB | 	rdlong	arg02, fp
05524     10 4E 85 F1 | 	sub	fp, #16
05528     18 16 06 F6 | 	mov	arg03, #24
0552c     C4 89 B1 FD | 	call	#_psram_spin2_read1
05530     10 4E 05 F1 | 	add	fp, #16
05534     A7 1E 02 FB | 	rdlong	local01, fp
05538     08 4E 85 F1 | 	sub	fp, #8
0553c     A7 1E 62 FC | 	wrlong	local01, fp
05540     20 4E 05 F1 | 	add	fp, #32
05544     A7 1E 02 FB | 	rdlong	local01, fp
05548     18 4E 85 F1 | 	sub	fp, #24
0554c     A7 1E 62 FC | 	wrlong	local01, fp
05550     04 4E 05 F1 | 	add	fp, #4
05554     A7 1E 02 FB | 	rdlong	local01, fp
05558     10 4E 85 F1 | 	sub	fp, #16
0555c     A7 16 02 FB | 	rdlong	arg03, fp
05560     04 4E 85 F1 | 	sub	fp, #4
05564     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05568     28 4E 05 C1 |  if_b	add	fp, #40
0556c     A7 20 02 CB |  if_b	rdlong	local02, fp
05570     28 4E 85 C1 |  if_b	sub	fp, #40
05574     FF FF 3F CF 
05578     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
0557c     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0460
05580     0B 00 00 FF 
05584     CC E4 85 F1 | 	sub	objptr, ##5836
05588                 | ' 
05588                 | ' 
05588                 | ' if header(0)<>aline then return -1
05588     14 4E 05 F1 | 	add	fp, #20
0558c     A7 1E 02 FB | 	rdlong	local01, fp
05590     10 4E 85 F1 | 	sub	fp, #16
05594     A7 22 02 FB | 	rdlong	local03, fp
05598     04 4E 85 F1 | 	sub	fp, #4
0559c     11 1F 0A F2 | 	cmp	local01, local03 wz
055a0     01 FA 65 56 |  if_ne	neg	result1, #1
055a4     C8 02 90 5D |  if_ne	jmp	#LR__0466
055a8     08 4E 05 F1 | 	add	fp, #8
055ac     A7 12 02 FB | 	rdlong	arg01, fp
055b0     08 4E 85 F1 | 	sub	fp, #8
055b4     01 14 66 F6 | 	neg	arg02, #1
055b8     44 52 B1 FD | 	call	#_pslpoke
055bc                 | ' 
055bc                 | ' pslpoke(lineptr2,$FFFF_FFFF) ' flag the deleted line
055bc                 | ' 
055bc                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  ' this is one and only line in the program
055bc     28 4E 05 F1 | 	add	fp, #40
055c0     A7 1E 02 FB | 	rdlong	local01, fp
055c4     28 4E 85 F1 | 	sub	fp, #40
055c8     FF FF 3F FF 
055cc     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
055d0     24 4E 05 A1 |  if_e	add	fp, #36
055d4     A7 22 02 AB |  if_e	rdlong	local03, fp
055d8     24 4E 85 A1 |  if_e	sub	fp, #36
055dc     FF FF 7F AF 
055e0     FF 23 0E A2 |  if_e	cmp	local03, ##-1 wz
055e4     78 00 90 5D |  if_ne	jmp	#LR__0461
055e8     6A 00 00 FF 
055ec     84 E4 05 F1 | 	add	objptr, ##54404
055f0     F2 00 68 FC | 	wrlong	#0, objptr
055f4     07 00 00 FF 
055f8     28 E4 85 F1 | 	sub	objptr, ##3624
055fc     F2 00 68 FC | 	wrlong	#0, objptr
05600     07 00 00 FF 
05604     2C E4 05 F1 | 	add	objptr, ##3628
05608     F2 00 68 FC | 	wrlong	#0, objptr
0560c     04 E4 05 F1 | 	add	objptr, #4
05610     FF FF FF FF 
05614     F2 FE 6B FC | 	wrlong	##-1, objptr
05618     6A 00 00 FF 
0561c     8C E4 85 F1 | 	sub	objptr, ##54412
05620     00 12 06 F6 | 	mov	arg01, #0
05624     01 14 66 F6 | 	neg	arg02, #1
05628     D4 51 B1 FD | 	call	#_pslpoke
0562c     10 12 06 F6 | 	mov	arg01, #16
05630     01 14 66 F6 | 	neg	arg02, #1
05634     C8 51 B1 FD | 	call	#_pslpoke
05638     14 12 06 F6 | 	mov	arg01, #20
0563c     1E 14 CE F9 | 	bmask	arg02, #30
05640     BC 51 B1 FD | 	call	#_pslpoke
05644     78 00 00 FF 
05648     BC E4 05 F1 | 	add	objptr, ##61628
0564c     F2 00 68 FC | 	wrlong	#0, objptr
05650     04 E4 05 F1 | 	add	objptr, #4
05654     F2 00 68 FC | 	wrlong	#0, objptr
05658     78 00 00 FF 
0565c     C0 E4 85 F1 | 	sub	objptr, ##61632
05660                 | LR__0461
05660                 | ' 
05660                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' this is the last, and not first, line of the program
05660     28 4E 05 F1 | 	add	fp, #40
05664     A7 1E 02 FB | 	rdlong	local01, fp
05668     28 4E 85 F1 | 	sub	fp, #40
0566c     FF FF 3F FF 
05670     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
05674     74 00 90 5D |  if_ne	jmp	#LR__0462
05678     24 4E 05 F1 | 	add	fp, #36
0567c     A7 22 02 FB | 	rdlong	local03, fp
05680     24 4E 85 F1 | 	sub	fp, #36
05684     FF FF 7F FF 
05688     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0568c     5C 00 90 AD |  if_e	jmp	#LR__0462
05690     24 4E 05 F1 | 	add	fp, #36
05694     A7 12 02 FB | 	rdlong	arg01, fp
05698     24 4E 85 F1 | 	sub	fp, #36
0569c     14 12 06 F1 | 	add	arg01, #20
056a0     1E 14 CE F9 | 	bmask	arg02, #30
056a4     58 51 B1 FD | 	call	#_pslpoke
056a8     24 4E 05 F1 | 	add	fp, #36
056ac     A7 1E 02 FB | 	rdlong	local01, fp
056b0     6A 00 00 FF 
056b4     8C E4 05 F1 | 	add	objptr, ##54412
056b8     F2 1E 62 FC | 	wrlong	local01, objptr
056bc     6A 00 00 FF 
056c0     8C E4 85 F1 | 	sub	objptr, ##54412
056c4     A7 12 02 FB | 	rdlong	arg01, fp
056c8     24 4E 85 F1 | 	sub	fp, #36
056cc     60 52 B1 FD | 	call	#_pslpeek
056d0     6A 00 00 FF 
056d4     88 E4 05 F1 | 	add	objptr, ##54408
056d8     F2 FA 61 FC | 	wrlong	result1, objptr
056dc     6A 00 00 FF 
056e0     88 E4 85 F1 | 	sub	objptr, ##54408
056e4                 | '   pslpoke(header(4)+20,$7FFF_FFFF) ' unlink the previous line
056e4                 | '   lastlineptr=header(4)            ' keep last line pointer to avoid searching while sequentially adding a new line
056e4                 | '   lastline=pslpeek(header(4))
056e4                 | '   return 0
056e4     00 FA 05 F6 | 	mov	result1, #0
056e8     84 01 90 FD | 	jmp	#LR__0466
056ec                 | LR__0462
056ec                 | ' 
056ec                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is the first line, but not the last
056ec     28 4E 05 F1 | 	add	fp, #40
056f0     A7 1E 02 FB | 	rdlong	local01, fp
056f4     28 4E 85 F1 | 	sub	fp, #40
056f8     FF FF 3F FF 
056fc     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
05700     58 00 90 AD |  if_e	jmp	#LR__0463
05704     24 4E 05 F1 | 	add	fp, #36
05708     A7 22 02 FB | 	rdlong	local03, fp
0570c     24 4E 85 F1 | 	sub	fp, #36
05710     FF FF 7F FF 
05714     FF 23 0E F2 | 	cmp	local03, ##-1 wz
05718     40 00 90 5D |  if_ne	jmp	#LR__0463
0571c     28 4E 05 F1 | 	add	fp, #40
05720     A7 12 02 FB | 	rdlong	arg01, fp
05724     28 4E 85 F1 | 	sub	fp, #40
05728     10 12 06 F1 | 	add	arg01, #16
0572c     01 14 66 F6 | 	neg	arg02, #1
05730     CC 50 B1 FD | 	call	#_pslpoke
05734     28 4E 05 F1 | 	add	fp, #40
05738     A7 1E 02 FB | 	rdlong	local01, fp
0573c     28 4E 85 F1 | 	sub	fp, #40
05740     6A 00 00 FF 
05744     84 E4 05 F1 | 	add	objptr, ##54404
05748     F2 1E 62 FC | 	wrlong	local01, objptr
0574c     6A 00 00 FF 
05750     84 E4 85 F1 | 	sub	objptr, ##54404
05754                 | ' '   print "deleted first line"
05754                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
05754                 | '   programstart=header(5) ' adjust the program start to point on the first new line
05754                 | '   return 0
05754     00 FA 05 F6 | 	mov	result1, #0
05758     14 01 90 FD | 	jmp	#LR__0466
0575c                 | LR__0463
0575c                 | ' 
0575c                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' the line is not first and not last
0575c     28 4E 05 F1 | 	add	fp, #40
05760     A7 1E 02 FB | 	rdlong	local01, fp
05764     28 4E 85 F1 | 	sub	fp, #40
05768     FF FF 3F FF 
0576c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
05770     24 4E 05 51 |  if_ne	add	fp, #36
05774     A7 22 02 5B |  if_ne	rdlong	local03, fp
05778     24 4E 85 51 |  if_ne	sub	fp, #36
0577c     FF FF 7F 5F 
05780     FF 23 0E 52 |  if_ne	cmp	local03, ##-1 wz
05784     40 00 90 AD |  if_e	jmp	#LR__0464
05788     28 4E 05 F1 | 	add	fp, #40
0578c     A7 12 02 FB | 	rdlong	arg01, fp
05790     10 12 06 F1 | 	add	arg01, #16
05794     04 4E 85 F1 | 	sub	fp, #4
05798     A7 14 02 FB | 	rdlong	arg02, fp
0579c     24 4E 85 F1 | 	sub	fp, #36
057a0     5C 50 B1 FD | 	call	#_pslpoke
057a4     24 4E 05 F1 | 	add	fp, #36
057a8     A7 12 02 FB | 	rdlong	arg01, fp
057ac     14 12 06 F1 | 	add	arg01, #20
057b0     04 4E 05 F1 | 	add	fp, #4
057b4     A7 14 02 FB | 	rdlong	arg02, fp
057b8     28 4E 85 F1 | 	sub	fp, #40
057bc     40 50 B1 FD | 	call	#_pslpoke
057c0                 | '    pslpoke(header(5)+16,header(4))  
057c0                 | '    pslpoke(header(4)+20, header(5))
057c0                 | '    return 0
057c0     00 FA 05 F6 | 	mov	result1, #0
057c4     A8 00 90 FD | 	jmp	#LR__0466
057c8                 | LR__0464
057c8     10 4E 05 F1 | 	add	fp, #16
057cc     A7 1E 02 FB | 	rdlong	local01, fp
057d0     08 4E 85 F1 | 	sub	fp, #8
057d4     A7 1E 62 FC | 	wrlong	local01, fp
057d8     6A 00 00 FF 
057dc     84 E4 05 F1 | 	add	objptr, ##54404
057e0     F2 1E 02 FB | 	rdlong	local01, objptr
057e4     08 4E 05 F1 | 	add	fp, #8
057e8     A7 1E 62 FC | 	wrlong	local01, fp
057ec     10 4E 85 F1 | 	sub	fp, #16
057f0                 | ' 
057f0                 | ' 
057f0                 | ' 
057f0                 | ' ' now find if the deleted line was a target for goto and replace fast_goto with find_goto
057f0                 | ' 
057f0                 | ' lineptr2=searchptr
057f0                 | ' searchptr=programstart
057f0                 | ' 
057f0                 | ' do
057f0     5E 00 00 FF 
057f4     B8 E5 85 F1 | 	sub	objptr, ##48568
057f8                 | LR__0465
057f8     14 4E 05 F1 | 	add	fp, #20
057fc     A7 12 02 F6 | 	mov	arg01, fp
05800     04 4E 85 F1 | 	sub	fp, #4
05804     A7 14 02 FB | 	rdlong	arg02, fp
05808     10 4E 85 F1 | 	sub	fp, #16
0580c     18 16 06 F6 | 	mov	arg03, #24
05810     E0 86 B1 FD | 	call	#_psram_spin2_read1
05814     10 4E 05 F1 | 	add	fp, #16
05818     A7 1E 02 FB | 	rdlong	local01, fp
0581c     08 4E 85 F1 | 	sub	fp, #8
05820     A7 1E 62 FC | 	wrlong	local01, fp
05824     20 4E 05 F1 | 	add	fp, #32
05828     A7 1E 02 FB | 	rdlong	local01, fp
0582c     18 4E 85 F1 | 	sub	fp, #24
05830     A7 1E 62 FC | 	wrlong	local01, fp
05834     04 4E 05 F1 | 	add	fp, #4
05838     A7 1E 02 FB | 	rdlong	local01, fp
0583c     10 4E 85 F1 | 	sub	fp, #16
05840     A7 22 02 FB | 	rdlong	local03, fp
05844     04 4E 85 F1 | 	sub	fp, #4
05848     11 1F 12 F2 | 	cmp	local01, local03 wc
0584c     28 4E 05 C1 |  if_b	add	fp, #40
05850     A7 20 02 CB |  if_b	rdlong	local02, fp
05854     28 4E 85 C1 |  if_b	sub	fp, #40
05858     FF FF 3F CF 
0585c     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
05860     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0465
05864     0B 00 00 FF 
05868     CC E4 85 F1 | 	sub	objptr, ##5836
0586c     00 FA 05 F6 | 	mov	result1, #0
05870                 | LR__0466
05870     A7 F0 03 F6 | 	mov	ptra, fp
05874     B2 00 A0 FD | 	call	#popregs_
05878                 | _deleteline_ret
05878     2D 00 64 FD | 	ret
0587c                 | 
0587c                 | ' 
0587c                 | ' sub save_line
0587c                 | _save_line
0587c     03 4A 05 F6 | 	mov	COUNT_, #3
05880     A8 00 A0 FD | 	call	#pushregs_
05884     6A 00 00 FF 
05888     7C E4 05 F1 | 	add	objptr, ##54396
0588c     F2 16 02 FB | 	rdlong	arg03, objptr
05890     01 16 06 F1 | 	add	arg03, #1
05894     05 00 00 FF 
05898     18 E4 85 F1 | 	sub	objptr, ##2584
0589c     F2 14 02 FB | 	rdlong	arg02, objptr
058a0     0B 15 02 FD | 	qmul	arg02, arg03
058a4     0E 00 00 FF 
058a8     44 E4 85 F1 | 	sub	objptr, ##7236
058ac     F2 12 02 FB | 	rdlong	arg01, objptr
058b0     57 00 00 FF 
058b4     20 E4 85 F1 | 	sub	objptr, ##44576
058b8     09 1F 02 F6 | 	mov	local01, arg01
058bc     18 20 62 FD | 	getqx	local02
058c0     97 06 48 FB | 	callpa	#(@LR__0471-@LR__0470)>>2,fcache_load_ptr_
058c4                 | LR__0470
058c4     0F FB C9 FA | 	rdbyte	result1, local01 wz
058c8     01 1E 06 51 |  if_ne	add	local01, #1
058cc     F4 FF 9F 5D |  if_ne	jmp	#LR__0470
058d0                 | LR__0471
058d0     09 1F 82 F1 | 	sub	local01, arg01
058d4     03 1E CE F7 | 	test	local01, #3 wz
058d8     02 1E 46 50 |  if_ne	shr	local01, #2
058dc     01 1E 06 51 |  if_ne	add	local01, #1
058e0     02 1E 66 50 |  if_ne	shl	local01, #2
058e4     10 23 02 F6 | 	mov	local03, local02
058e8     0F 23 02 F1 | 	add	local03, local01
058ec     63 00 00 FF 
058f0     5C E4 05 F1 | 	add	objptr, ##50780
058f4     F2 16 02 FB | 	rdlong	arg03, objptr
058f8     10 17 02 F1 | 	add	arg03, local02
058fc     04 00 00 FF 
05900     28 E4 05 F1 | 	add	objptr, ##2088
05904     F2 16 62 FC | 	wrlong	arg03, objptr
05908     04 E4 05 F1 | 	add	objptr, #4
0590c     F2 1E 62 FC | 	wrlong	local01, objptr
05910     0C E4 85 F1 | 	sub	objptr, #12
05914     F2 12 02 F6 | 	mov	arg01, objptr
05918     04 00 00 FF 
0591c     20 E4 85 F1 | 	sub	objptr, ##2080
05920     F2 14 02 FB | 	rdlong	arg02, objptr
05924     10 17 02 F6 | 	mov	arg03, local02
05928     57 00 00 FF 
0592c     90 E5 85 F1 | 	sub	objptr, ##44944
05930     5C 86 B1 FD | 	call	#_psram_spin2_write
05934     4B 00 00 FF 
05938     54 E5 05 F1 | 	add	objptr, ##38740
0593c     F2 12 02 FB | 	rdlong	arg01, objptr
05940     0C 00 00 FF 
05944     3C E4 05 F1 | 	add	objptr, ##6204
05948     F2 14 02 FB | 	rdlong	arg02, objptr
0594c     10 15 02 F1 | 	add	arg02, local02
05950     0F 17 02 F6 | 	mov	arg03, local01
05954     57 00 00 FF 
05958     90 E5 85 F1 | 	sub	objptr, ##44944
0595c     30 86 B1 FD | 	call	#_psram_spin2_write
05960     57 00 00 FF 
05964     90 E5 05 F1 | 	add	objptr, ##44944
05968     F2 1E 02 FB | 	rdlong	local01, objptr
0596c     11 1F 02 F1 | 	add	local01, local03
05970     F2 1E 62 FC | 	wrlong	local01, objptr
05974     63 00 00 FF 
05978     5C E4 85 F1 | 	sub	objptr, ##50780
0597c     A7 F0 03 F6 | 	mov	ptra, fp
05980     B2 00 A0 FD | 	call	#popregs_
05984                 | _save_line_ret
05984     2D 00 64 FD | 	ret
05988                 | 
05988                 | ' 
05988                 | ' 
05988                 | ' function insertline(aline as ulong) as integer
05988                 | _insertline
05988     02 4A 05 F6 | 	mov	COUNT_, #2
0598c     A8 00 A0 FD | 	call	#pushregs_
05990     28 F0 07 F1 | 	add	ptra, #40
05994     04 4E 05 F1 | 	add	fp, #4
05998     A7 12 62 FC | 	wrlong	arg01, fp
0599c     6A 00 00 FF 
059a0     84 E4 05 F1 | 	add	objptr, ##54404
059a4     F2 1E 02 FB | 	rdlong	local01, objptr
059a8     04 4E 05 F1 | 	add	fp, #4
059ac     A7 1E 62 FC | 	wrlong	local01, fp
059b0     08 4E 85 F1 | 	sub	fp, #8
059b4                 | ' 
059b4                 | ' do
059b4     5E 00 00 FF 
059b8     B8 E5 85 F1 | 	sub	objptr, ##48568
059bc                 | LR__0480
059bc     10 4E 05 F1 | 	add	fp, #16
059c0     A7 12 02 F6 | 	mov	arg01, fp
059c4     08 4E 85 F1 | 	sub	fp, #8
059c8     A7 14 02 FB | 	rdlong	arg02, fp
059cc     08 4E 85 F1 | 	sub	fp, #8
059d0     18 16 06 F6 | 	mov	arg03, #24
059d4     1C 85 B1 FD | 	call	#_psram_spin2_read1
059d8     08 4E 05 F1 | 	add	fp, #8
059dc     A7 1E 02 FB | 	rdlong	local01, fp
059e0     04 4E 05 F1 | 	add	fp, #4
059e4     A7 1E 62 FC | 	wrlong	local01, fp
059e8     18 4E 05 F1 | 	add	fp, #24
059ec     A7 1E 02 FB | 	rdlong	local01, fp
059f0     1C 4E 85 F1 | 	sub	fp, #28
059f4     A7 1E 62 FC | 	wrlong	local01, fp
059f8     08 4E 05 F1 | 	add	fp, #8
059fc     A7 1E 02 FB | 	rdlong	local01, fp
05a00     0C 4E 85 F1 | 	sub	fp, #12
05a04     A7 16 02 FB | 	rdlong	arg03, fp
05a08     04 4E 85 F1 | 	sub	fp, #4
05a0c     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05a10     24 4E 05 C1 |  if_b	add	fp, #36
05a14     A7 20 02 CB |  if_b	rdlong	local02, fp
05a18     24 4E 85 C1 |  if_b	sub	fp, #36
05a1c     FF FF 3F CF 
05a20     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
05a24     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0480
05a28     0B 00 00 FF 
05a2c     CC E4 85 F1 | 	sub	objptr, ##5836
05a30                 | ' 
05a30                 | ' if header(0)=aline then return -1 ' delete it first
05a30     10 4E 05 F1 | 	add	fp, #16
05a34     A7 1E 02 FB | 	rdlong	local01, fp
05a38     0C 4E 85 F1 | 	sub	fp, #12
05a3c     A7 20 02 FB | 	rdlong	local02, fp
05a40     04 4E 85 F1 | 	sub	fp, #4
05a44     10 1F 0A F2 | 	cmp	local01, local02 wz
05a48     01 FA 65 A6 |  if_e	neg	result1, #1
05a4c     48 01 90 AD |  if_e	jmp	#LR__0483
05a50                 | ' if header(0)<aline then return -2 ' end of program reached
05a50     10 4E 05 F1 | 	add	fp, #16
05a54     A7 1E 02 FB | 	rdlong	local01, fp
05a58     0C 4E 85 F1 | 	sub	fp, #12
05a5c     A7 16 02 FB | 	rdlong	arg03, fp
05a60     04 4E 85 F1 | 	sub	fp, #4
05a64     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05a68     02 FA 65 C6 |  if_b	neg	result1, #2
05a6c     28 01 90 CD |  if_b	jmp	#LR__0483
05a70                 | ' 
05a70                 | ' if  header(4)=$FFFF_FFFF then ' this is one first line in the program so the inserted line will be new first
05a70     20 4E 05 F1 | 	add	fp, #32
05a74     A7 1E 02 FB | 	rdlong	local01, fp
05a78     20 4E 85 F1 | 	sub	fp, #32
05a7c     FF FF 7F FF 
05a80     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
05a84     78 00 90 5D |  if_ne	jmp	#LR__0481
05a88     63 00 00 FF 
05a8c     5C E4 05 F1 | 	add	objptr, ##50780
05a90     F2 1E 02 FB | 	rdlong	local01, objptr
05a94     07 00 00 FF 
05a98     28 E4 05 F1 | 	add	objptr, ##3624
05a9c     F2 1E 62 FC | 	wrlong	local01, objptr
05aa0     0C 4E 05 F1 | 	add	fp, #12
05aa4     A7 12 02 FB | 	rdlong	arg01, fp
05aa8     0C 4E 85 F1 | 	sub	fp, #12
05aac     10 12 06 F1 | 	add	arg01, #16
05ab0     07 00 00 FF 
05ab4     28 E4 85 F1 | 	sub	objptr, ##3624
05ab8     F2 14 02 FB | 	rdlong	arg02, objptr
05abc     63 00 00 FF 
05ac0     5C E4 85 F1 | 	sub	objptr, ##50780
05ac4     38 4D B1 FD | 	call	#_pslpoke
05ac8     67 00 00 FF 
05acc     8C E4 05 F1 | 	add	objptr, ##52876
05ad0     FF FF FF FF 
05ad4     F2 FE 6B FC | 	wrlong	##-1, objptr
05ad8     0C 4E 05 F1 | 	add	fp, #12
05adc     A7 1E 02 FB | 	rdlong	local01, fp
05ae0     0C 4E 85 F1 | 	sub	fp, #12
05ae4     04 E4 05 F1 | 	add	objptr, #4
05ae8     F2 1E 62 FC | 	wrlong	local01, objptr
05aec     67 00 00 FF 
05af0     90 E4 85 F1 | 	sub	objptr, ##52880
05af4     84 FD BF FD | 	call	#_save_line
05af8                 | '   programstart=programptr
05af8                 | '   pslpoke(lineptr2+16,programptr)
05af8                 | '   ucompiledline(4)=$FFFF_FFFF
05af8                 | '   ucompiledline(5)=lineptr2
05af8                 | '   save_line
05af8                 | '   return 0
05af8     00 FA 05 F6 | 	mov	result1, #0
05afc     98 00 90 FD | 	jmp	#LR__0483
05b00                 | LR__0481
05b00                 | ' 
05b00                 | ' if header(4)<>$FFFF_FFFF then ' this is not first line of the program. It doesn't matter if it is last as we will insert it before
05b00     20 4E 05 F1 | 	add	fp, #32
05b04     A7 1E 02 FB | 	rdlong	local01, fp
05b08     20 4E 85 F1 | 	sub	fp, #32
05b0c     FF FF 7F FF 
05b10     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
05b14     7C 00 90 AD |  if_e	jmp	#LR__0482
05b18     20 4E 05 F1 | 	add	fp, #32
05b1c     A7 1E 02 FB | 	rdlong	local01, fp
05b20     67 00 00 FF 
05b24     8C E4 05 F1 | 	add	objptr, ##52876
05b28     F2 1E 62 FC | 	wrlong	local01, objptr
05b2c     14 4E 85 F1 | 	sub	fp, #20
05b30     A7 1E 02 FB | 	rdlong	local01, fp
05b34     04 E4 05 F1 | 	add	objptr, #4
05b38     F2 1E 62 FC | 	wrlong	local01, objptr
05b3c     A7 12 02 FB | 	rdlong	arg01, fp
05b40     0C 4E 85 F1 | 	sub	fp, #12
05b44     10 12 06 F1 | 	add	arg01, #16
05b48     04 00 00 FF 
05b4c     34 E4 85 F1 | 	sub	objptr, ##2100
05b50     F2 14 02 FB | 	rdlong	arg02, objptr
05b54     63 00 00 FF 
05b58     5C E4 85 F1 | 	sub	objptr, ##50780
05b5c     A0 4C B1 FD | 	call	#_pslpoke
05b60     20 4E 05 F1 | 	add	fp, #32
05b64     A7 12 02 FB | 	rdlong	arg01, fp
05b68     20 4E 85 F1 | 	sub	fp, #32
05b6c     14 12 06 F1 | 	add	arg01, #20
05b70     63 00 00 FF 
05b74     5C E4 05 F1 | 	add	objptr, ##50780
05b78     F2 14 02 FB | 	rdlong	arg02, objptr
05b7c     63 00 00 FF 
05b80     5C E4 85 F1 | 	sub	objptr, ##50780
05b84     78 4C B1 FD | 	call	#_pslpoke
05b88     F0 FC BF FD | 	call	#_save_line
05b8c                 | '   ucompiledline(4)=header(4)
05b8c                 | '   ucompiledline(5)=lineptr2
05b8c                 | '   pslpoke(lineptr2+16,programptr)
05b8c                 | '   pslpoke(header(4)+20,programptr)
05b8c                 | '   save_line
05b8c                 | '   return 0
05b8c     00 FA 05 F6 | 	mov	result1, #0
05b90     04 00 90 FD | 	jmp	#LR__0483
05b94                 | LR__0482
05b94     00 FA 05 F6 | 	mov	result1, #0
05b98                 | LR__0483
05b98     A7 F0 03 F6 | 	mov	ptra, fp
05b9c     B2 00 A0 FD | 	call	#popregs_
05ba0                 | _insertline_ret
05ba0     2D 00 64 FD | 	ret
05ba4                 | 
05ba4                 | ' 
05ba4                 | ' sub add_line_at_end(aline) 
05ba4                 | _add_line_at_end
05ba4     6A 00 00 FF 
05ba8     88 E4 05 F1 | 	add	objptr, ##54408
05bac     F2 12 62 FC | 	wrlong	arg01, objptr
05bb0     04 E4 05 F1 | 	add	objptr, #4
05bb4     F2 14 02 FB | 	rdlong	arg02, objptr
05bb8     03 00 00 FF 
05bbc     00 E4 85 F1 | 	sub	objptr, ##1536
05bc0     F2 14 62 FC | 	wrlong	arg02, objptr
05bc4     03 00 00 FF 
05bc8     00 E4 05 F1 | 	add	objptr, ##1536
05bcc     F2 12 02 FB | 	rdlong	arg01, objptr
05bd0     14 12 06 F1 | 	add	arg01, #20
05bd4     07 00 00 FF 
05bd8     30 E4 85 F1 | 	sub	objptr, ##3632
05bdc     F2 14 02 FB | 	rdlong	arg02, objptr
05be0     63 00 00 FF 
05be4     5C E4 85 F1 | 	sub	objptr, ##50780
05be8     14 4C B1 FD | 	call	#_pslpoke
05bec     63 00 00 FF 
05bf0     5C E4 05 F1 | 	add	objptr, ##50780
05bf4     F2 14 02 FB | 	rdlong	arg02, objptr
05bf8     07 00 00 FF 
05bfc     30 E4 05 F1 | 	add	objptr, ##3632
05c00     F2 14 62 FC | 	wrlong	arg02, objptr
05c04     02 00 00 FF 
05c08     FC E5 85 F1 | 	sub	objptr, ##1532
05c0c     FF FF BF FF 
05c10     F2 FE 6B FC | 	wrlong	##2147483647, objptr
05c14                 | ' 
05c14                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
05c14                 | ' if programptr=0 then ucompiledline(4)=$FFFFFFFF ' that is the first line
05c14     04 00 00 FF 
05c18     34 E4 85 F1 | 	sub	objptr, ##2100
05c1c     F2 14 0A FB | 	rdlong	arg02, objptr wz
05c20     63 00 00 FF 
05c24     5C E4 85 F1 | 	sub	objptr, ##50780
05c28     67 00 00 AF 
05c2c     8C E4 05 A1 |  if_e	add	objptr, ##52876
05c30     FF FF FF AF 
05c34     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
05c38     67 00 00 AF 
05c3c     8C E4 85 A1 |  if_e	sub	objptr, ##52876
05c40     38 FC BF FD | 	call	#_save_line
05c44     63 00 00 FF 
05c48     5C E4 05 F1 | 	add	objptr, ##50780
05c4c     F2 12 02 FB | 	rdlong	arg01, objptr
05c50     63 00 00 FF 
05c54     5C E4 85 F1 | 	sub	objptr, ##50780
05c58     01 14 66 F6 | 	neg	arg02, #1
05c5c     A0 4B B1 FD | 	call	#_pslpoke
05c60                 | _add_line_at_end_ret
05c60     2D 00 64 FD | 	ret
05c64                 | 
05c64                 | ' 
05c64                 | ' function compile_immediate(linetype as ulong) as integer
05c64                 | _compile_immediate
05c64     09 4A 05 F6 | 	mov	COUNT_, #9
05c68     A8 00 A0 FD | 	call	#pushregs_
05c6c                 | _compile_immediate_enter
05c6c     09 25 0A F6 | 	mov	local04, arg01 wz
05c70     00 26 06 F6 | 	mov	local05, #0
05c74     00 28 06 F6 | 	mov	local06, #0
05c78                 | ' 
05c78                 | ' ' linetype=cont+1, linetype=0 immediate
05c78                 | ' '  : 1: this is the first part of the line that will continue
05c78                 | ' ' 2 - this is the continuation of the line
05c78                 | ' ' 3 - this is the last continued line
05c78                 | ' ' 4 - this is the one and only part
05c78                 | ' 
05c78                 | ' err=0
05c78                 | ' cmd=0
05c78                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
05c78     30 00 90 5D |  if_ne	jmp	#LR__0490
05c7c     55 00 00 FF 
05c80     10 E4 05 F1 | 	add	objptr, ##43536
05c84     F2 28 02 FB | 	rdlong	local06, objptr
05c88     02 00 00 FF 
05c8c     34 E4 05 F1 | 	add	objptr, ##1076
05c90     F2 02 68 FC | 	wrlong	#1, objptr
05c94     00 2A 06 F6 | 	mov	local07, #0
05c98     13 00 00 FF 
05c9c     38 E4 05 F1 | 	add	objptr, ##9784
05ca0     F2 00 68 FC | 	wrlong	#0, objptr
05ca4     6A 00 00 FF 
05ca8     7C E4 85 F1 | 	sub	objptr, ##54396
05cac                 | LR__0490
05cac                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
05cac     02 24 0E F2 | 	cmp	local04, #2 wz
05cb0     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05cb4     24 00 90 5D |  if_ne	jmp	#LR__0491
05cb8     55 00 00 FF 
05cbc     10 E4 05 F1 | 	add	objptr, ##43536
05cc0     F2 28 02 FB | 	rdlong	local06, objptr
05cc4     01 2A 06 F6 | 	mov	local07, #1
05cc8     02 00 00 FF 
05ccc     34 E4 05 F1 | 	add	objptr, ##1076
05cd0     F2 02 68 FC | 	wrlong	#1, objptr
05cd4     57 00 00 FF 
05cd8     44 E4 85 F1 | 	sub	objptr, ##44612
05cdc                 | LR__0491
05cdc                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
05cdc     04 24 0E F2 | 	cmp	local04, #4 wz
05ce0     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
05ce4     30 00 90 5D |  if_ne	jmp	#LR__0492
05ce8     55 00 00 FF 
05cec     18 E4 05 F1 | 	add	objptr, ##43544
05cf0     F2 28 02 FB | 	rdlong	local06, objptr
05cf4     02 2A 06 F6 | 	mov	local07, #2
05cf8     02 00 00 FF 
05cfc     2C E4 05 F1 | 	add	objptr, ##1068
05d00     F2 04 68 FC | 	wrlong	#2, objptr
05d04     13 00 00 FF 
05d08     38 E4 05 F1 | 	add	objptr, ##9784
05d0c     F2 04 68 FC | 	wrlong	#2, objptr
05d10     6A 00 00 FF 
05d14     7C E4 85 F1 | 	sub	objptr, ##54396
05d18                 | LR__0492
05d18                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
05d18     05 24 0E F2 | 	cmp	local04, #5 wz
05d1c     44 00 90 5D |  if_ne	jmp	#LR__0493
05d20     57 00 00 FF 
05d24     44 E4 05 F1 | 	add	objptr, ##44612
05d28     F2 FA 01 FB | 	rdlong	result1, objptr
05d2c     FD 2A 02 F6 | 	mov	local07, result1
05d30     03 2A 66 F0 | 	shl	local07, #3
05d34     02 00 00 FF 
05d38     38 E4 85 F1 | 	sub	objptr, ##1080
05d3c     F2 2A 02 F1 | 	add	local07, objptr
05d40     04 2A 06 F1 | 	add	local07, #4
05d44     15 29 02 FB | 	rdlong	local06, local07
05d48     FD 2A 02 F6 | 	mov	local07, result1
05d4c     01 2A 06 F1 | 	add	local07, #1
05d50     02 00 00 FF 
05d54     38 E4 05 F1 | 	add	objptr, ##1080
05d58     F2 2A 62 FC | 	wrlong	local07, objptr
05d5c     57 00 00 FF 
05d60     44 E4 85 F1 | 	sub	objptr, ##44612
05d64                 | LR__0493
05d64     00 2C 06 F6 | 	mov	local08, #0
05d68                 | ' vars=0
05d68                 | ' 'print  "In compile_immediate cmd=:", cmd
05d68                 | ' 451 select case cmd
05d68     5C 28 0E F2 | 	cmp	local06, #92 wz
05d6c     28 02 90 AD |  if_e	jmp	#LR__0494
05d70     47 28 0E F2 | 	cmp	local06, #71 wz
05d74     2C 02 90 AD |  if_e	jmp	#LR__0495
05d78     59 28 0E F2 | 	cmp	local06, #89 wz
05d7c     30 02 90 AD |  if_e	jmp	#LR__0496
05d80     45 28 0E F2 | 	cmp	local06, #69 wz
05d84     34 02 90 AD |  if_e	jmp	#LR__0497
05d88     69 28 0E F2 | 	cmp	local06, #105 wz
05d8c     38 02 90 AD |  if_e	jmp	#LR__0498
05d90     40 28 0E F2 | 	cmp	local06, #64 wz
05d94     B8 04 90 AD |  if_e	jmp	#LR__0555
05d98     49 28 0E F2 | 	cmp	local06, #73 wz
05d9c     34 02 90 AD |  if_e	jmp	#LR__0499
05da0     50 28 0E F2 | 	cmp	local06, #80 wz
05da4     38 02 90 AD |  if_e	jmp	#LR__0500
05da8     68 28 0E F2 | 	cmp	local06, #104 wz
05dac     3C 02 90 AD |  if_e	jmp	#LR__0501
05db0     74 28 0E F2 | 	cmp	local06, #116 wz
05db4     40 02 90 AD |  if_e	jmp	#LR__0502
05db8     73 28 0E F2 | 	cmp	local06, #115 wz
05dbc     44 02 90 AD |  if_e	jmp	#LR__0503
05dc0     6C 28 0E F2 | 	cmp	local06, #108 wz
05dc4     48 02 90 AD |  if_e	jmp	#LR__0504
05dc8     89 28 0E F2 | 	cmp	local06, #137 wz
05dcc     80 04 90 AD |  if_e	jmp	#LR__0555
05dd0     72 28 0E F2 | 	cmp	local06, #114 wz
05dd4     44 02 90 AD |  if_e	jmp	#LR__0505
05dd8     5D 28 0E F2 | 	cmp	local06, #93 wz
05ddc     70 04 90 AD |  if_e	jmp	#LR__0555
05de0     96 28 0E F2 | 	cmp	local06, #150 wz
05de4     3C 02 90 AD |  if_e	jmp	#LR__0506
05de8     43 28 0E F2 | 	cmp	local06, #67 wz
05dec     3C 02 90 AD |  if_e	jmp	#LR__0507
05df0     5A 28 0E F2 | 	cmp	local06, #90 wz
05df4     40 02 90 AD |  if_e	jmp	#LR__0508
05df8     AB 28 0E F2 | 	cmp	local06, #171 wz
05dfc     50 04 90 AD |  if_e	jmp	#LR__0555
05e00     4E 28 0E F2 | 	cmp	local06, #78 wz
05e04     38 02 90 AD |  if_e	jmp	#LR__0509
05e08     A9 28 0E F2 | 	cmp	local06, #169 wz
05e0c     4C 02 90 AD |  if_e	jmp	#LR__0511
05e10     46 28 0E F2 | 	cmp	local06, #70 wz
05e14     4C 02 90 AD |  if_e	jmp	#LR__0512
05e18     71 28 0E F2 | 	cmp	local06, #113 wz
05e1c     50 02 90 AD |  if_e	jmp	#LR__0513
05e20     60 28 0E F2 | 	cmp	local06, #96 wz
05e24     54 02 90 AD |  if_e	jmp	#LR__0514
05e28     4A 28 0E F2 | 	cmp	local06, #74 wz
05e2c     58 02 90 AD |  if_e	jmp	#LR__0515
05e30     48 28 0E F2 | 	cmp	local06, #72 wz
05e34     58 02 90 AD |  if_e	jmp	#LR__0516
05e38     58 28 0E F2 | 	cmp	local06, #88 wz
05e3c     5C 02 90 AD |  if_e	jmp	#LR__0517
05e40     5F 28 0E F2 | 	cmp	local06, #95 wz
05e44     5C 02 90 AD |  if_e	jmp	#LR__0518
05e48     8A 28 0E F2 | 	cmp	local06, #138 wz
05e4c     60 02 90 AD |  if_e	jmp	#LR__0519
05e50     4C 28 0E F2 | 	cmp	local06, #76 wz
05e54     64 02 90 AD |  if_e	jmp	#LR__0520
05e58     52 28 0E F2 | 	cmp	local06, #82 wz
05e5c     68 02 90 AD |  if_e	jmp	#LR__0521
05e60     97 28 0E F2 | 	cmp	local06, #151 wz
05e64     6C 02 90 AD |  if_e	jmp	#LR__0522
05e68     61 28 0E F2 | 	cmp	local06, #97 wz
05e6c     70 02 90 AD |  if_e	jmp	#LR__0523
05e70     63 28 0E F2 | 	cmp	local06, #99 wz
05e74     74 02 90 AD |  if_e	jmp	#LR__0524
05e78     41 28 0E F2 | 	cmp	local06, #65 wz
05e7c     D0 03 90 AD |  if_e	jmp	#LR__0555
05e80     4B 28 0E F2 | 	cmp	local06, #75 wz
05e84     70 02 90 AD |  if_e	jmp	#LR__0525
05e88     5E 28 0E F2 | 	cmp	local06, #94 wz
05e8c     70 02 90 AD |  if_e	jmp	#LR__0526
05e90     7C 28 0E F2 | 	cmp	local06, #124 wz
05e94     74 02 90 AD |  if_e	jmp	#LR__0527
05e98     7D 28 0E F2 | 	cmp	local06, #125 wz
05e9c     78 02 90 AD |  if_e	jmp	#LR__0528
05ea0     7E 28 0E F2 | 	cmp	local06, #126 wz
05ea4     7C 02 90 AD |  if_e	jmp	#LR__0529
05ea8     7F 28 0E F2 | 	cmp	local06, #127 wz
05eac     80 02 90 AD |  if_e	jmp	#LR__0530
05eb0     80 28 0E F2 | 	cmp	local06, #128 wz
05eb4     84 02 90 AD |  if_e	jmp	#LR__0531
05eb8     55 28 0E F2 | 	cmp	local06, #85 wz
05ebc     88 02 90 AD |  if_e	jmp	#LR__0532
05ec0     75 28 0E F2 | 	cmp	local06, #117 wz
05ec4     8C 02 90 AD |  if_e	jmp	#LR__0533
05ec8     42 28 0E F2 | 	cmp	local06, #66 wz
05ecc     90 02 90 AD |  if_e	jmp	#LR__0534
05ed0     95 28 0E F2 | 	cmp	local06, #149 wz
05ed4     94 02 90 AD |  if_e	jmp	#LR__0535
05ed8     AC 28 0E F2 | 	cmp	local06, #172 wz
05edc     70 03 90 AD |  if_e	jmp	#LR__0555
05ee0     81 28 0E F2 | 	cmp	local06, #129 wz
05ee4     90 02 90 AD |  if_e	jmp	#LR__0536
05ee8     44 28 0E F2 | 	cmp	local06, #68 wz
05eec     94 02 90 AD |  if_e	jmp	#LR__0537
05ef0     88 28 0E F2 | 	cmp	local06, #136 wz
05ef4     58 03 90 AD |  if_e	jmp	#LR__0555
05ef8     92 28 0E F2 | 	cmp	local06, #146 wz
05efc     90 02 90 AD |  if_e	jmp	#LR__0538
05f00     AA 28 0E F2 | 	cmp	local06, #170 wz
05f04     48 03 90 AD |  if_e	jmp	#LR__0555
05f08     4D 28 0E F2 | 	cmp	local06, #77 wz
05f0c     88 02 90 AD |  if_e	jmp	#LR__0539
05f10     51 28 0E F2 | 	cmp	local06, #81 wz
05f14     8C 02 90 AD |  if_e	jmp	#LR__0540
05f18     8E 28 0E F2 | 	cmp	local06, #142 wz
05f1c     90 02 90 AD |  if_e	jmp	#LR__0541
05f20     90 28 0E F2 | 	cmp	local06, #144 wz
05f24     94 02 90 AD |  if_e	jmp	#LR__0542
05f28     8D 28 0E F2 | 	cmp	local06, #141 wz
05f2c     98 02 90 AD |  if_e	jmp	#LR__0543
05f30     8C 28 0E F2 | 	cmp	local06, #140 wz
05f34     9C 02 90 AD |  if_e	jmp	#LR__0544
05f38     91 28 0E F2 | 	cmp	local06, #145 wz
05f3c     A0 02 90 AD |  if_e	jmp	#LR__0545
05f40     8B 28 0E F2 | 	cmp	local06, #139 wz
05f44     A4 02 90 AD |  if_e	jmp	#LR__0546
05f48     8F 28 0E F2 | 	cmp	local06, #143 wz
05f4c     A8 02 90 AD |  if_e	jmp	#LR__0547
05f50     6D 28 0E F2 | 	cmp	local06, #109 wz
05f54     AC 02 90 AD |  if_e	jmp	#LR__0548
05f58     70 28 0E F2 | 	cmp	local06, #112 wz
05f5c     F0 02 90 AD |  if_e	jmp	#LR__0555
05f60     56 28 0E F2 | 	cmp	local06, #86 wz
05f64     A8 02 90 AD |  if_e	jmp	#LR__0549
05f68     57 28 0E F2 | 	cmp	local06, #87 wz
05f6c     E0 02 90 AD |  if_e	jmp	#LR__0555
05f70     79 28 0E F2 | 	cmp	local06, #121 wz
05f74     A4 02 90 AD |  if_e	jmp	#LR__0550
05f78     77 28 0E F2 | 	cmp	local06, #119 wz
05f7c     A8 02 90 AD |  if_e	jmp	#LR__0551
05f80     78 28 0E F2 | 	cmp	local06, #120 wz
05f84     AC 02 90 AD |  if_e	jmp	#LR__0552
05f88     01 00 00 FF 
05f8c     04 28 0E F2 | 	cmp	local06, ##516 wz
05f90     AC 02 90 AD |  if_e	jmp	#LR__0553
05f94     B0 02 90 FD | 	jmp	#LR__0554
05f98                 | LR__0494
05f98     B4 0C B0 FD | 	call	#_compile_fun_2p
05f9c     FD 26 02 F6 | 	mov	local05, result1
05fa0     AC 02 90 FD | 	jmp	#LR__0555
05fa4                 | LR__0495
05fa4     E8 0D B0 FD | 	call	#_compile_fun_4p
05fa8     FD 26 02 F6 | 	mov	local05, result1
05fac     A0 02 90 FD | 	jmp	#LR__0555
05fb0                 | LR__0496
05fb0     6C 32 B0 FD | 	call	#_expr
05fb4                 | ' expr()
05fb4                 | ' return 0
05fb4     00 26 06 F6 | 	mov	local05, #0
05fb8     94 02 90 FD | 	jmp	#LR__0555
05fbc                 | LR__0497
05fbc     04 0D B0 FD | 	call	#_compile_fun_3p
05fc0     FD 26 02 F6 | 	mov	local05, result1
05fc4     88 02 90 FD | 	jmp	#LR__0555
05fc8                 | LR__0498
05fc8     54 32 B0 FD | 	call	#_expr
05fcc                 | ' expr()
05fcc                 | ' return 0
05fcc     00 26 06 F6 | 	mov	local05, #0
05fd0     7C 02 90 FD | 	jmp	#LR__0555
05fd4                 | LR__0499
05fd4     48 32 B0 FD | 	call	#_expr
05fd8                 | ' expr()
05fd8                 | ' return 0
05fd8     00 26 06 F6 | 	mov	local05, #0
05fdc     70 02 90 FD | 	jmp	#LR__0555
05fe0                 | LR__0500
05fe0     4C 10 B0 FD | 	call	#_compile_fun_varp
05fe4     FD 2C 02 F6 | 	mov	local08, result1
05fe8     64 02 90 FD | 	jmp	#LR__0555
05fec                 | LR__0501
05fec     30 32 B0 FD | 	call	#_expr
05ff0                 | ' expr()
05ff0                 | ' return 0
05ff0     00 26 06 F6 | 	mov	local05, #0
05ff4     58 02 90 FD | 	jmp	#LR__0555
05ff8                 | LR__0502
05ff8     34 10 B0 FD | 	call	#_compile_fun_varp
05ffc     FD 2C 02 F6 | 	mov	local08, result1
06000     4C 02 90 FD | 	jmp	#LR__0555
06004                 | LR__0503
06004     28 10 B0 FD | 	call	#_compile_fun_varp
06008     FD 2C 02 F6 | 	mov	local08, result1
0600c     40 02 90 FD | 	jmp	#LR__0555
06010                 | LR__0504
06010     A0 0E B0 FD | 	call	#_compile_fun_5p
06014     FD 26 02 F6 | 	mov	local05, result1
06018     34 02 90 FD | 	jmp	#LR__0555
0601c                 | LR__0505
0601c     FC 19 B0 FD | 	call	#_compile_dim
06020     E8 02 90 FD | 	jmp	#LR__0556
06024                 | LR__0506
06024     28 0C B0 FD | 	call	#_compile_fun_2p
06028     24 02 90 FD | 	jmp	#LR__0555
0602c                 | LR__0507
0602c     20 0C B0 FD | 	call	#_compile_fun_2p
06030     FD 26 02 F6 | 	mov	local05, result1
06034     18 02 90 FD | 	jmp	#LR__0555
06038                 | LR__0508
06038     B8 18 B0 FD | 	call	#_compile_else
0603c     CC 02 90 FD | 	jmp	#LR__0556
06040                 | LR__0509
06040     01 24 16 F2 | 	cmp	local04, #1 wc
06044     08 00 90 CD |  if_b	jmp	#LR__0510
06048     E4 2D B0 FD | 	call	#_compile_goto
0604c     BC 02 90 FD | 	jmp	#LR__0556
06050                 | LR__0510
06050     19 12 06 F6 | 	mov	arg01, #25
06054     44 46 B1 FD | 	call	#_printerror
06058     B0 02 90 FD | 	jmp	#LR__0556
0605c                 | LR__0511
0605c     68 2D B0 FD | 	call	#_compile_gosub
06060     A8 02 90 FD | 	jmp	#LR__0556
06064                 | LR__0512
06064     5C 0C B0 FD | 	call	#_compile_fun_3p
06068     FD 26 02 F6 | 	mov	local05, result1
0606c     E0 01 90 FD | 	jmp	#LR__0555
06070                 | LR__0513
06070     1C 0D B0 FD | 	call	#_compile_fun_4p
06074     FD 26 02 F6 | 	mov	local05, result1
06078     D4 01 90 FD | 	jmp	#LR__0555
0607c                 | LR__0514
0607c     A0 31 B0 FD | 	call	#_expr
06080                 | ' expr()
06080                 | ' return 0
06080     00 26 06 F6 | 	mov	local05, #0
06084     C8 01 90 FD | 	jmp	#LR__0555
06088                 | LR__0515
06088     A0 20 B0 FD | 	call	#_compile_for
0608c     7C 02 90 FD | 	jmp	#LR__0556
06090                 | LR__0516
06090     FC 0C B0 FD | 	call	#_compile_fun_4p
06094     FD 26 02 F6 | 	mov	local05, result1
06098     B4 01 90 FD | 	jmp	#LR__0555
0609c                 | LR__0517
0609c     14 17 B0 FD | 	call	#_compile_if
060a0     68 02 90 FD | 	jmp	#LR__0556
060a4                 | LR__0518
060a4     78 31 B0 FD | 	call	#_expr
060a8                 | ' expr()
060a8                 | ' return 0
060a8     00 26 06 F6 | 	mov	local05, #0
060ac     A0 01 90 FD | 	jmp	#LR__0555
060b0                 | LR__0519
060b0     6C 31 B0 FD | 	call	#_expr
060b4                 | ' expr()
060b4                 | ' return 0
060b4     00 26 06 F6 | 	mov	local05, #0
060b8     94 01 90 FD | 	jmp	#LR__0555
060bc                 | LR__0520
060bc     70 0F B0 FD | 	call	#_compile_fun_varp
060c0     FD 2C 02 F6 | 	mov	local08, result1
060c4     88 01 90 FD | 	jmp	#LR__0555
060c8                 | LR__0521
060c8     64 0F B0 FD | 	call	#_compile_fun_varp
060cc     FD 2C 02 F6 | 	mov	local08, result1
060d0     7C 01 90 FD | 	jmp	#LR__0555
060d4                 | LR__0522
060d4     78 0B B0 FD | 	call	#_compile_fun_2p
060d8     FD 26 02 F6 | 	mov	local05, result1
060dc     70 01 90 FD | 	jmp	#LR__0555
060e0                 | LR__0523
060e0     3C 31 B0 FD | 	call	#_expr
060e4                 | ' expr()
060e4                 | ' return 0
060e4     00 26 06 F6 | 	mov	local05, #0
060e8     64 01 90 FD | 	jmp	#LR__0555
060ec                 | LR__0524
060ec     30 31 B0 FD | 	call	#_expr
060f0                 | ' expr()
060f0                 | ' return 0
060f0     00 26 06 F6 | 	mov	local05, #0
060f4     58 01 90 FD | 	jmp	#LR__0555
060f8                 | LR__0525
060f8     1C 2B B0 FD | 	call	#_compile_next
060fc     0C 02 90 FD | 	jmp	#LR__0556
06100                 | LR__0526
06100     1C 31 B0 FD | 	call	#_expr
06104                 | ' expr()
06104                 | ' return 0
06104     00 26 06 F6 | 	mov	local05, #0
06108     44 01 90 FD | 	jmp	#LR__0555
0610c                 | LR__0527
0610c     10 31 B0 FD | 	call	#_expr
06110                 | ' expr()
06110                 | ' return 0
06110     00 26 06 F6 | 	mov	local05, #0
06114     38 01 90 FD | 	jmp	#LR__0555
06118                 | LR__0528
06118     04 31 B0 FD | 	call	#_expr
0611c                 | ' expr()
0611c                 | ' return 0
0611c     00 26 06 F6 | 	mov	local05, #0
06120     2C 01 90 FD | 	jmp	#LR__0555
06124                 | LR__0529
06124     F8 30 B0 FD | 	call	#_expr
06128                 | ' expr()
06128                 | ' return 0
06128     00 26 06 F6 | 	mov	local05, #0
0612c     20 01 90 FD | 	jmp	#LR__0555
06130                 | LR__0530
06130     5C 0C B0 FD | 	call	#_compile_fun_4p
06134     FD 26 02 F6 | 	mov	local05, result1
06138     14 01 90 FD | 	jmp	#LR__0555
0613c                 | LR__0531
0613c     E0 30 B0 FD | 	call	#_expr
06140                 | ' expr()
06140                 | ' return 0
06140     00 26 06 F6 | 	mov	local05, #0
06144     08 01 90 FD | 	jmp	#LR__0555
06148                 | LR__0532
06148     04 0B B0 FD | 	call	#_compile_fun_2p
0614c     FD 26 02 F6 | 	mov	local05, result1
06150     FC 00 90 FD | 	jmp	#LR__0555
06154                 | LR__0533
06154     D8 0E B0 FD | 	call	#_compile_fun_varp
06158     FD 2C 02 F6 | 	mov	local08, result1
0615c     F0 00 90 FD | 	jmp	#LR__0555
06160                 | LR__0534
06160     EC 0A B0 FD | 	call	#_compile_fun_2p
06164     FD 26 02 F6 | 	mov	local05, result1
06168     E4 00 90 FD | 	jmp	#LR__0555
0616c                 | LR__0535
0616c     E0 0A B0 FD | 	call	#_compile_fun_2p
06170     FD 26 02 F6 | 	mov	local05, result1
06174     D8 00 90 FD | 	jmp	#LR__0555
06178                 | LR__0536
06178     D4 0A B0 FD | 	call	#_compile_fun_2p
0617c     FD 26 02 F6 | 	mov	local05, result1
06180     CC 00 90 FD | 	jmp	#LR__0555
06184                 | LR__0537
06184     54 0F B0 FD | 	call	#_compile_print
06188     FD 26 02 F6 | 	mov	local05, result1
0618c     7C 01 90 FD | 	jmp	#LR__0556
06190                 | LR__0538
06190     8C 30 B0 FD | 	call	#_expr
06194                 | ' expr()
06194                 | ' return 0
06194     B8 00 90 FD | 	jmp	#LR__0555
06198                 | LR__0539
06198     94 0E B0 FD | 	call	#_compile_fun_varp
0619c     FD 2C 02 F6 | 	mov	local08, result1
061a0     AC 00 90 FD | 	jmp	#LR__0555
061a4                 | LR__0540
061a4     88 0E B0 FD | 	call	#_compile_fun_varp
061a8     FD 2C 02 F6 | 	mov	local08, result1
061ac     A0 00 90 FD | 	jmp	#LR__0555
061b0                 | LR__0541
061b0     9C 0A B0 FD | 	call	#_compile_fun_2p
061b4     FD 26 02 F6 | 	mov	local05, result1
061b8     94 00 90 FD | 	jmp	#LR__0555
061bc                 | LR__0542
061bc     90 0A B0 FD | 	call	#_compile_fun_2p
061c0     FD 26 02 F6 | 	mov	local05, result1
061c4     88 00 90 FD | 	jmp	#LR__0555
061c8                 | LR__0543
061c8     84 0A B0 FD | 	call	#_compile_fun_2p
061cc     FD 26 02 F6 | 	mov	local05, result1
061d0     7C 00 90 FD | 	jmp	#LR__0555
061d4                 | LR__0544
061d4     78 0A B0 FD | 	call	#_compile_fun_2p
061d8     FD 26 02 F6 | 	mov	local05, result1
061dc     70 00 90 FD | 	jmp	#LR__0555
061e0                 | LR__0545
061e0     6C 0A B0 FD | 	call	#_compile_fun_2p
061e4     FD 26 02 F6 | 	mov	local05, result1
061e8     64 00 90 FD | 	jmp	#LR__0555
061ec                 | LR__0546
061ec     60 0A B0 FD | 	call	#_compile_fun_2p
061f0     FD 26 02 F6 | 	mov	local05, result1
061f4     58 00 90 FD | 	jmp	#LR__0555
061f8                 | LR__0547
061f8     54 0A B0 FD | 	call	#_compile_fun_2p
061fc     FD 26 02 F6 | 	mov	local05, result1
06200     4C 00 90 FD | 	jmp	#LR__0555
06204                 | LR__0548
06204     BC 0A B0 FD | 	call	#_compile_fun_3p
06208     FD 26 02 F6 | 	mov	local05, result1
0620c     40 00 90 FD | 	jmp	#LR__0555
06210                 | LR__0549
06210     0C 30 B0 FD | 	call	#_expr
06214                 | ' expr()
06214                 | ' return 0
06214     00 26 06 F6 | 	mov	local05, #0
06218     34 00 90 FD | 	jmp	#LR__0555
0621c                 | LR__0550
0621c     30 0A B0 FD | 	call	#_compile_fun_2p
06220     FD 26 02 F6 | 	mov	local05, result1
06224     28 00 90 FD | 	jmp	#LR__0555
06228                 | LR__0551
06228     24 0A B0 FD | 	call	#_compile_fun_2p
0622c     FD 26 02 F6 | 	mov	local05, result1
06230     1C 00 90 FD | 	jmp	#LR__0555
06234                 | LR__0552
06234     18 0A B0 FD | 	call	#_compile_fun_2p
06238     FD 26 02 F6 | 	mov	local05, result1
0623c     10 00 90 FD | 	jmp	#LR__0555
06240                 | LR__0553
06240     E8 01 B0 FD | 	call	#_compile_array_assign
06244     C4 00 90 FD | 	jmp	#LR__0556
06248                 | LR__0554
06248     48 09 B0 FD | 	call	#_compile_unknown
0624c     BC 00 90 FD | 	jmp	#LR__0556
06250                 | LR__0555
06250     14 23 02 F6 | 	mov	local03, local06
06254     16 1F 02 F6 | 	mov	local01, local08
06258     0F 2B 02 F6 | 	mov	local07, local01
0625c     10 2F 02 F6 | 	mov	local09, local02
06260     11 29 02 F6 | 	mov	local06, local03
06264     6A 00 00 FF 
06268     7C E4 05 F1 | 	add	objptr, ##54396
0626c     F2 1E 02 FB | 	rdlong	local01, objptr
06270     0F 2D 02 F6 | 	mov	local08, local01
06274     01 2C 66 F0 | 	shl	local08, #1
06278     0F 2D 02 F1 | 	add	local08, local01
0627c     02 2C 66 F0 | 	shl	local08, #2
06280     03 00 00 FF 
06284     00 E4 85 F1 | 	sub	objptr, ##1536
06288     F2 2C 02 F1 | 	add	local08, objptr
0628c     16 2B 62 FC | 	wrlong	local07, local08
06290     03 00 00 FF 
06294     00 E4 05 F1 | 	add	objptr, ##1536
06298     F2 1E 02 FB | 	rdlong	local01, objptr
0629c     0F 2D 02 F6 | 	mov	local08, local01
062a0     01 2C 66 F0 | 	shl	local08, #1
062a4     0F 2D 02 F1 | 	add	local08, local01
062a8     02 2C 66 F0 | 	shl	local08, #2
062ac     03 00 00 FF 
062b0     00 E4 85 F1 | 	sub	objptr, ##1536
062b4     F2 2C 02 F1 | 	add	local08, objptr
062b8     04 2C 06 F1 | 	add	local08, #4
062bc     16 2F 62 FC | 	wrlong	local09, local08
062c0     03 00 00 FF 
062c4     00 E4 05 F1 | 	add	objptr, ##1536
062c8     F2 1E 02 FB | 	rdlong	local01, objptr
062cc     0F 2D 02 F6 | 	mov	local08, local01
062d0     01 2C 66 F0 | 	shl	local08, #1
062d4     0F 2D 02 F1 | 	add	local08, local01
062d8     02 2C 66 F0 | 	shl	local08, #2
062dc     03 00 00 FF 
062e0     00 E4 85 F1 | 	sub	objptr, ##1536
062e4     F2 2C 02 F1 | 	add	local08, objptr
062e8     08 2C 06 F1 | 	add	local08, #8
062ec     16 29 62 FC | 	wrlong	local06, local08
062f0     03 00 00 FF 
062f4     00 E4 05 F1 | 	add	objptr, ##1536
062f8     F2 2A 02 FB | 	rdlong	local07, objptr
062fc     01 2A 06 F1 | 	add	local07, #1
06300     F2 2A 62 FC | 	wrlong	local07, objptr
06304     6A 00 00 FF 
06308     7C E4 85 F1 | 	sub	objptr, ##54396
0630c                 | LR__0556
0630c                 | ' 
0630c                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
0630c                 | ' 450 if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
0630c     00 24 0E F2 | 	cmp	local04, #0 wz
06310     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
06314     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
06318     38 00 90 5D |  if_ne	jmp	#LR__0557
0631c     6A 00 00 FF 
06320     7C E4 05 F1 | 	add	objptr, ##54396
06324     F2 2C 02 FB | 	rdlong	local08, objptr
06328     16 1F 02 F6 | 	mov	local01, local08
0632c     01 1E 66 F0 | 	shl	local01, #1
06330     16 1F 02 F1 | 	add	local01, local08
06334     02 1E 66 F0 | 	shl	local01, #2
06338     03 00 00 FF 
0633c     00 E4 85 F1 | 	sub	objptr, ##1536
06340     F2 1E 02 F1 | 	add	local01, objptr
06344     08 1E 06 F1 | 	add	local01, #8
06348     0F FD 6B FC | 	wrlong	#510, local01
0634c     67 00 00 FF 
06350     7C E4 85 F1 | 	sub	objptr, ##52860
06354                 | LR__0557
06354                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
06354     6A 00 00 FF 
06358     7C E4 05 F1 | 	add	objptr, ##54396
0635c     F2 1E 02 FB | 	rdlong	local01, objptr
06360     6A 00 00 FF 
06364     7C E4 85 F1 | 	sub	objptr, ##54396
06368     97 58 48 FB | 	callpa	#(@LR__0560-@LR__0558)>>2,fcache_load_ptr_
0636c                 | LR__0558
0636c     0F 2D 02 F6 | 	mov	local08, local01
06370     01 2C 66 F0 | 	shl	local08, #1
06374     0F 2D 02 F1 | 	add	local08, local01
06378     02 2C 66 F0 | 	shl	local08, #2
0637c     67 00 00 FF 
06380     7C E4 05 F1 | 	add	objptr, ##52860
06384     F2 2C 02 F1 | 	add	local08, objptr
06388     08 2C 06 F1 | 	add	local08, #8
0638c     16 2D 02 FB | 	rdlong	local08, local08
06390     9B 2C 0E F2 | 	cmp	local08, #155 wz
06394     67 00 00 FF 
06398     7C E4 85 F1 | 	sub	objptr, ##52860
0639c     70 00 90 5D |  if_ne	jmp	#LR__0559
063a0     0F 2D 02 F6 | 	mov	local08, local01
063a4     01 2C 86 F1 | 	sub	local08, #1
063a8     16 2F 02 F6 | 	mov	local09, local08
063ac     01 2E 66 F0 | 	shl	local09, #1
063b0     16 2F 02 F1 | 	add	local09, local08
063b4     02 2E 66 F0 | 	shl	local09, #2
063b8     67 00 00 FF 
063bc     7C E4 05 F1 | 	add	objptr, ##52860
063c0     F2 2E 02 F1 | 	add	local09, objptr
063c4     08 2E 06 F1 | 	add	local09, #8
063c8     17 2D 02 FB | 	rdlong	local08, local09
063cc     11 2C 0E F2 | 	cmp	local08, #17 wz
063d0     67 00 00 FF 
063d4     7C E4 85 F1 | 	sub	objptr, ##52860
063d8     34 00 90 5D |  if_ne	jmp	#LR__0559
063dc     0F 2F 02 F6 | 	mov	local09, local01
063e0     01 2E 86 F1 | 	sub	local09, #1
063e4     17 2D 02 F6 | 	mov	local08, local09
063e8     01 2C 66 F0 | 	shl	local08, #1
063ec     17 2D 02 F1 | 	add	local08, local09
063f0     02 2C 66 F0 | 	shl	local08, #2
063f4     67 00 00 FF 
063f8     7C E4 05 F1 | 	add	objptr, ##52860
063fc     F2 2C 02 F1 | 	add	local08, objptr
06400     08 2C 06 F1 | 	add	local08, #8
06404     16 25 68 FC | 	wrlong	#18, local08
06408     67 00 00 FF 
0640c     7C E4 85 F1 | 	sub	objptr, ##52860
06410                 | LR__0559
06410     01 1E 86 F1 | 	sub	local01, #1
06414     01 1E 56 F2 | 	cmps	local01, #1 wc
06418     50 FF 9F 3D |  if_ae	jmp	#LR__0558
0641c                 | LR__0560
0641c                 | ' '  print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
0641c                 | ' return err
0641c     13 FB 01 F6 | 	mov	result1, local05
06420     A7 F0 03 F6 | 	mov	ptra, fp
06424     B2 00 A0 FD | 	call	#popregs_
06428                 | _compile_immediate_ret
06428     2D 00 64 FD | 	ret
0642c                 | 
0642c                 | ' 
0642c                 | ' sub compile_array_assign
0642c                 | _compile_array_assign
0642c     0A 4A 05 F6 | 	mov	COUNT_, #10
06430     A8 00 A0 FD | 	call	#pushregs_
06434     00 24 06 F6 | 	mov	local04, #0
06438     57 00 00 FF 
0643c     44 E4 05 F1 | 	add	objptr, ##44612
06440     F2 26 02 FB | 	rdlong	local05, objptr
06444     13 FB 01 F6 | 	mov	result1, local05
06448     01 FA 85 F1 | 	sub	result1, #1
0644c     03 FA 65 F0 | 	shl	result1, #3
06450     02 00 00 FF 
06454     38 E4 85 F1 | 	sub	objptr, ##1080
06458     F2 FA 01 F1 | 	add	result1, objptr
0645c     FD 28 02 FB | 	rdlong	local06, result1
06460                 | ' numpar=0
06460                 | ' 'print "In array_assign, lparts(ct).token=",lparts(ct).token,lparts(ct).part$
06460                 | ' ' todo here: recognize params and t1.result.twowords=numpar
06460                 | ' varname$=lparts(ct-1).part$' : print "In array_assign, varname$=";varname$
06460                 | ' if lparts(ct).token=token_lpar then
06460     03 26 66 F0 | 	shl	local05, #3
06464     F2 26 02 F1 | 	add	local05, objptr
06468     04 26 06 F1 | 	add	local05, #4
0646c     13 27 02 FB | 	rdlong	local05, local05
06470     15 26 0E F2 | 	cmp	local05, #21 wz
06474     55 00 00 FF 
06478     0C E4 85 F1 | 	sub	objptr, ##43532
0647c     D4 01 90 5D |  if_ne	jmp	#LR__0574
06480     57 00 00 FF 
06484     44 E4 05 F1 | 	add	objptr, ##44612
06488     F2 2A 02 FB | 	rdlong	local07, objptr
0648c     01 2A 06 F1 | 	add	local07, #1
06490     F2 2A 62 FC | 	wrlong	local07, objptr
06494     57 00 00 FF 
06498     44 E4 85 F1 | 	sub	objptr, ##44612
0649c                 | '   ct+=1 											' omit this lpar, this is for expr list
0649c                 | '   do
0649c                 | LR__0570
0649c     80 2D B0 FD | 	call	#_expr
064a0     57 00 00 FF 
064a4     44 E4 05 F1 | 	add	objptr, ##44612
064a8     F2 26 02 FB | 	rdlong	local05, objptr
064ac     01 26 06 F1 | 	add	local05, #1
064b0     F2 26 62 FC | 	wrlong	local05, objptr
064b4     01 24 06 F1 | 	add	local04, #1
064b8     01 26 86 F1 | 	sub	local05, #1
064bc     03 26 66 F0 | 	shl	local05, #3
064c0     02 00 00 FF 
064c4     38 E4 85 F1 | 	sub	objptr, ##1080
064c8     F2 26 02 F1 | 	add	local05, objptr
064cc     04 26 06 F1 | 	add	local05, #4
064d0     13 2B 02 FB | 	rdlong	local07, local05
064d4     14 2A 0E F2 | 	cmp	local07, #20 wz
064d8     55 00 00 FF 
064dc     0C E4 85 F1 | 	sub	objptr, ##43532
064e0     34 00 90 AD |  if_e	jmp	#LR__0571
064e4     57 00 00 FF 
064e8     44 E4 05 F1 | 	add	objptr, ##44612
064ec     F2 2A 02 FB | 	rdlong	local07, objptr
064f0     03 2A 66 F0 | 	shl	local07, #3
064f4     02 00 00 FF 
064f8     38 E4 85 F1 | 	sub	objptr, ##1080
064fc     F2 2A 02 F1 | 	add	local07, objptr
06500     04 2A 06 F1 | 	add	local07, #4
06504     15 2B 02 FB | 	rdlong	local07, local07
06508     FE 2B 0E F2 | 	cmp	local07, #510 wz
0650c     55 00 00 FF 
06510     0C E4 85 F1 | 	sub	objptr, ##43532
06514     84 FF 9F 5D |  if_ne	jmp	#LR__0570
06518                 | LR__0571
06518     57 00 00 FF 
0651c     44 E4 05 F1 | 	add	objptr, ##44612
06520     F2 2A 02 FB | 	rdlong	local07, objptr
06524     01 2A 06 F1 | 	add	local07, #1
06528     F2 2A 62 FC | 	wrlong	local07, objptr
0652c     57 00 00 FF 
06530     44 E4 85 F1 | 	sub	objptr, ##44612
06534     E8 2C B0 FD | 	call	#_expr
06538     01 2C 66 F6 | 	neg	local08, #1
0653c     00 2E 06 F6 | 	mov	local09, #0
06540                 | ' '   print "in array_assign, rpar found, numpar=",numpar
06540                 | '  'if lparts(ct).token=token_end then print "in getfun, end found, numpar=",numpar
06540                 | ' 'if lparts(ct).token<>token_eq then print "in array_assign,= expected" else print "in array_assign,= found"
06540                 | ' ct+=1 : expr()
06540                 | ' ' now find the vae
06540                 | ' 
06540                 | ' j=-1 : i=0 : do : 
06540                 | LR__0572
06540                 | '   if variables(i).name=varname$ then j=i: exit loop
06540     17 27 02 F6 | 	mov	local05, local09
06544     04 26 66 F0 | 	shl	local05, #4
06548     34 00 00 FF 
0654c     F8 E5 05 F1 | 	add	objptr, ##27128
06550     F2 26 02 F1 | 	add	local05, objptr
06554     13 13 02 FB | 	rdlong	arg01, local05
06558     14 15 02 F6 | 	mov	arg02, local06
0655c     34 00 00 FF 
06560     F8 E5 85 F1 | 	sub	objptr, ##27128
06564     D8 85 B1 FD | 	call	#__system___string_cmp
06568     00 FA 0D F2 | 	cmp	result1, #0 wz
0656c     17 2D 02 A6 |  if_e	mov	local08, local09
06570     20 00 90 AD |  if_e	jmp	#LR__0573
06574     01 2E 06 F1 | 	add	local09, #1
06578     55 00 00 FF 
0657c     08 E4 05 F1 | 	add	objptr, ##43528
06580     F2 2A 02 FB | 	rdlong	local07, objptr
06584     55 00 00 FF 
06588     08 E4 85 F1 | 	sub	objptr, ##43528
0658c     15 2F 5A F2 | 	cmps	local09, local07 wcz
06590     AC FF 9F ED |  if_be	jmp	#LR__0572
06594                 | LR__0573
06594     16 1F 02 F6 | 	mov	local01, local08
06598     12 21 02 F6 | 	mov	local02, local04
0659c     17 22 06 F6 | 	mov	local03, #23
065a0     0F 2B 02 F6 | 	mov	local07, local01
065a4     10 31 02 F6 | 	mov	local10, local02
065a8     11 2D 02 F6 | 	mov	local08, local03
065ac     6A 00 00 FF 
065b0     7C E4 05 F1 | 	add	objptr, ##54396
065b4     F2 1E 02 FB | 	rdlong	local01, objptr
065b8     0F 2F 02 F6 | 	mov	local09, local01
065bc     01 2E 66 F0 | 	shl	local09, #1
065c0     0F 2F 02 F1 | 	add	local09, local01
065c4     02 2E 66 F0 | 	shl	local09, #2
065c8     03 00 00 FF 
065cc     00 E4 85 F1 | 	sub	objptr, ##1536
065d0     F2 2E 02 F1 | 	add	local09, objptr
065d4     17 2B 62 FC | 	wrlong	local07, local09
065d8     03 00 00 FF 
065dc     00 E4 05 F1 | 	add	objptr, ##1536
065e0     F2 1E 02 FB | 	rdlong	local01, objptr
065e4     0F 2F 02 F6 | 	mov	local09, local01
065e8     01 2E 66 F0 | 	shl	local09, #1
065ec     0F 2F 02 F1 | 	add	local09, local01
065f0     02 2E 66 F0 | 	shl	local09, #2
065f4     03 00 00 FF 
065f8     00 E4 85 F1 | 	sub	objptr, ##1536
065fc     F2 2E 02 F1 | 	add	local09, objptr
06600     04 2E 06 F1 | 	add	local09, #4
06604     17 31 62 FC | 	wrlong	local10, local09
06608     03 00 00 FF 
0660c     00 E4 05 F1 | 	add	objptr, ##1536
06610     F2 30 02 FB | 	rdlong	local10, objptr
06614     18 1F 02 F6 | 	mov	local01, local10
06618     01 1E 66 F0 | 	shl	local01, #1
0661c     18 1F 02 F1 | 	add	local01, local10
06620     02 1E 66 F0 | 	shl	local01, #2
06624     03 00 00 FF 
06628     00 E4 85 F1 | 	sub	objptr, ##1536
0662c     F2 1E 02 F1 | 	add	local01, objptr
06630     08 1E 06 F1 | 	add	local01, #8
06634     0F 2D 62 FC | 	wrlong	local08, local01
06638     03 00 00 FF 
0663c     00 E4 05 F1 | 	add	objptr, ##1536
06640     F2 2A 02 FB | 	rdlong	local07, objptr
06644     01 2A 06 F1 | 	add	local07, #1
06648     F2 2A 62 FC | 	wrlong	local07, objptr
0664c     6A 00 00 FF 
06650     7C E4 85 F1 | 	sub	objptr, ##54396
06654                 | LR__0574
06654     A7 F0 03 F6 | 	mov	ptra, fp
06658     B2 00 A0 FD | 	call	#popregs_
0665c                 | _compile_array_assign_ret
0665c     2D 00 64 FD | 	ret
06660                 | 
06660                 | ' 
06660                 | ' 
06660                 | ' sub compile_immediate_assign(linetype as ulong)
06660                 | _compile_immediate_assign
06660     09 4A 05 F6 | 	mov	COUNT_, #9
06664     A8 00 A0 FD | 	call	#pushregs_
06668     09 25 0A F6 | 	mov	local04, arg01 wz
0666c     FF 22 06 F6 | 	mov	local03, #255
06670     01 26 66 F6 | 	neg	local05, #1
06674                 | ' 
06674                 | ' t1.result_type=result_error : t1.result.uresult=0
06674                 | ' i=-1: j=-1
06674                 | ' 
06674                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
06674     2C 00 90 5D |  if_ne	jmp	#LR__0580
06678     55 00 00 FF 
0667c     0C E4 05 F1 | 	add	objptr, ##43532
06680     F2 28 02 FB | 	rdlong	local06, objptr
06684     02 00 00 FF 
06688     38 E4 05 F1 | 	add	objptr, ##1080
0668c     F2 04 68 FC | 	wrlong	#2, objptr
06690     13 00 00 FF 
06694     38 E4 05 F1 | 	add	objptr, ##9784
06698     F2 00 68 FC | 	wrlong	#0, objptr
0669c     6A 00 00 FF 
066a0     7C E4 85 F1 | 	sub	objptr, ##54396
066a4                 | LR__0580
066a4                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
066a4     02 24 0E F2 | 	cmp	local04, #2 wz
066a8     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
066ac     55 00 00 AF 
066b0     0C E4 05 A1 |  if_e	add	objptr, ##43532
066b4     F2 28 02 AB |  if_e	rdlong	local06, objptr
066b8     02 00 00 AF 
066bc     38 E4 05 A1 |  if_e	add	objptr, ##1080
066c0     F2 04 68 AC |  if_e	wrlong	#2, objptr
066c4     57 00 00 AF 
066c8     44 E4 85 A1 |  if_e	sub	objptr, ##44612
066cc                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
066cc     04 24 0E F2 | 	cmp	local04, #4 wz
066d0     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
066d4     2C 00 90 5D |  if_ne	jmp	#LR__0581
066d8     55 00 00 FF 
066dc     14 E4 05 F1 | 	add	objptr, ##43540
066e0     F2 28 02 FB | 	rdlong	local06, objptr
066e4     02 00 00 FF 
066e8     30 E4 05 F1 | 	add	objptr, ##1072
066ec     F2 06 68 FC | 	wrlong	#3, objptr
066f0     13 00 00 FF 
066f4     38 E4 05 F1 | 	add	objptr, ##9784
066f8     F2 04 68 FC | 	wrlong	#2, objptr
066fc     6A 00 00 FF 
06700     7C E4 85 F1 | 	sub	objptr, ##54396
06704                 | LR__0581
06704                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
06704     05 24 0E F2 | 	cmp	local04, #5 wz
06708     3C 00 90 5D |  if_ne	jmp	#LR__0582
0670c     57 00 00 FF 
06710     44 E4 05 F1 | 	add	objptr, ##44612
06714     F2 FA 01 FB | 	rdlong	result1, objptr
06718     FD 28 02 F6 | 	mov	local06, result1
0671c     03 28 66 F0 | 	shl	local06, #3
06720     02 00 00 FF 
06724     38 E4 85 F1 | 	sub	objptr, ##1080
06728     F2 28 02 F1 | 	add	local06, objptr
0672c     14 29 02 FB | 	rdlong	local06, local06
06730     02 FA 05 F1 | 	add	result1, #2
06734     02 00 00 FF 
06738     38 E4 05 F1 | 	add	objptr, ##1080
0673c     F2 FA 61 FC | 	wrlong	result1, objptr
06740     57 00 00 FF 
06744     44 E4 85 F1 | 	sub	objptr, ##44612
06748                 | LR__0582
06748     14 13 02 F6 | 	mov	arg01, local06
0674c     01 14 06 F6 | 	mov	arg02, #1
06750     94 A4 B1 FD | 	call	#__system__Right_S
06754     C8 2A B0 FD | 	call	#_expr
06758                 | '  
06758                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
06758                 | ' 
06758                 | ' suffix2$=right$(varname2$,1)
06758                 | ' expr()
06758                 | ' 
06758                 | ' 
06758                 | ' if varnum>0 then
06758     55 00 00 FF 
0675c     08 E4 05 F1 | 	add	objptr, ##43528
06760     F2 2A 02 FB | 	rdlong	local07, objptr
06764     55 00 00 FF 
06768     08 E4 85 F1 | 	sub	objptr, ##43528
0676c     01 2A 56 F2 | 	cmps	local07, #1 wc
06770     58 00 90 CD |  if_b	jmp	#LR__0585
06774                 | '   for i=0 to varnum-1
06774     00 2C 06 F6 | 	mov	local08, #0
06778     55 00 00 FF 
0677c     08 E4 05 F1 | 	add	objptr, ##43528
06780     F2 2E 02 FB | 	rdlong	local09, objptr
06784     55 00 00 FF 
06788     08 E4 85 F1 | 	sub	objptr, ##43528
0678c                 | LR__0583
0678c     17 2D 52 F2 | 	cmps	local08, local09 wc
06790     38 00 90 3D |  if_ae	jmp	#LR__0584
06794                 | '     if variables(i).name=varname2$ then j=i : exit
06794     16 2B 02 F6 | 	mov	local07, local08
06798     04 2A 66 F0 | 	shl	local07, #4
0679c     34 00 00 FF 
067a0     F8 E5 05 F1 | 	add	objptr, ##27128
067a4     F2 2A 02 F1 | 	add	local07, objptr
067a8     15 13 02 FB | 	rdlong	arg01, local07
067ac     14 15 02 F6 | 	mov	arg02, local06
067b0     34 00 00 FF 
067b4     F8 E5 85 F1 | 	sub	objptr, ##27128
067b8     84 83 B1 FD | 	call	#__system___string_cmp
067bc     00 FA 0D F2 | 	cmp	result1, #0 wz
067c0     16 27 02 A6 |  if_e	mov	local05, local08
067c4     01 2C 06 51 |  if_ne	add	local08, #1
067c8     C0 FF 9F 5D |  if_ne	jmp	#LR__0583
067cc                 | LR__0584
067cc                 | LR__0585
067cc                 | ' if  j=-1 andalso varnum<maxvars then   
067cc     FF FF 7F FF 
067d0     FF 27 0E F2 | 	cmp	local05, ##-1 wz
067d4     60 00 90 5D |  if_ne	jmp	#LR__0586
067d8     55 00 00 FF 
067dc     08 E4 05 F1 | 	add	objptr, ##43528
067e0     F2 2A 02 FB | 	rdlong	local07, objptr
067e4     55 00 00 FF 
067e8     08 E4 85 F1 | 	sub	objptr, ##43528
067ec     02 00 00 FF 
067f0     00 2A 56 F2 | 	cmps	local07, ##1024 wc
067f4     40 00 90 3D |  if_ae	jmp	#LR__0586
067f8     55 00 00 FF 
067fc     08 E4 05 F1 | 	add	objptr, ##43528
06800     F2 2E 02 FB | 	rdlong	local09, objptr
06804     04 2E 66 F0 | 	shl	local09, #4
06808     20 00 00 FF 
0680c     10 E4 85 F1 | 	sub	objptr, ##16400
06810     F2 2E 02 F1 | 	add	local09, objptr
06814     17 29 62 FC | 	wrlong	local06, local09
06818     20 00 00 FF 
0681c     10 E4 05 F1 | 	add	objptr, ##16400
06820     F2 2A 02 FB | 	rdlong	local07, objptr
06824     15 27 02 F6 | 	mov	local05, local07
06828     01 2A 06 F1 | 	add	local07, #1
0682c     F2 2A 62 FC | 	wrlong	local07, objptr
06830     55 00 00 FF 
06834     08 E4 85 F1 | 	sub	objptr, ##43528
06838                 | LR__0586
06838     13 1F 02 F6 | 	mov	local01, local05
0683c     17 22 06 F6 | 	mov	local03, #23
06840     0F 2B 02 F6 | 	mov	local07, local01
06844     10 2F 02 F6 | 	mov	local09, local02
06848     11 1F 02 F6 | 	mov	local01, local03
0684c     6A 00 00 FF 
06850     7C E4 05 F1 | 	add	objptr, ##54396
06854     F2 2C 02 FB | 	rdlong	local08, objptr
06858     16 29 02 F6 | 	mov	local06, local08
0685c     01 28 66 F0 | 	shl	local06, #1
06860     16 29 02 F1 | 	add	local06, local08
06864     02 28 66 F0 | 	shl	local06, #2
06868     03 00 00 FF 
0686c     00 E4 85 F1 | 	sub	objptr, ##1536
06870     F2 28 02 F1 | 	add	local06, objptr
06874     14 2B 62 FC | 	wrlong	local07, local06
06878     03 00 00 FF 
0687c     00 E4 05 F1 | 	add	objptr, ##1536
06880     F2 2C 02 FB | 	rdlong	local08, objptr
06884     16 2B 02 F6 | 	mov	local07, local08
06888     01 2A 66 F0 | 	shl	local07, #1
0688c     16 2B 02 F1 | 	add	local07, local08
06890     02 2A 66 F0 | 	shl	local07, #2
06894     03 00 00 FF 
06898     00 E4 85 F1 | 	sub	objptr, ##1536
0689c     F2 2A 02 F1 | 	add	local07, objptr
068a0     04 2A 06 F1 | 	add	local07, #4
068a4     15 2F 62 FC | 	wrlong	local09, local07
068a8     03 00 00 FF 
068ac     00 E4 05 F1 | 	add	objptr, ##1536
068b0     F2 2E 02 FB | 	rdlong	local09, objptr
068b4     17 2D 02 F6 | 	mov	local08, local09
068b8     01 2C 66 F0 | 	shl	local08, #1
068bc     17 2D 02 F1 | 	add	local08, local09
068c0     02 2C 66 F0 | 	shl	local08, #2
068c4     03 00 00 FF 
068c8     00 E4 85 F1 | 	sub	objptr, ##1536
068cc     F2 2C 02 F1 | 	add	local08, objptr
068d0     08 2C 06 F1 | 	add	local08, #8
068d4     16 1F 62 FC | 	wrlong	local01, local08
068d8     03 00 00 FF 
068dc     00 E4 05 F1 | 	add	objptr, ##1536
068e0     F2 2A 02 FB | 	rdlong	local07, objptr
068e4     01 2A 06 F1 | 	add	local07, #1
068e8     F2 2A 62 FC | 	wrlong	local07, objptr
068ec     6A 00 00 FF 
068f0     7C E4 85 F1 | 	sub	objptr, ##54396
068f4                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
068f4                 | ' 
068f4                 | ' 
068f4                 | ' 
068f4                 | ' 
068f4                 | ' 
068f4                 | ' 
068f4                 | ' compiledline(lineptr)=t1:  lineptr+=1 
068f4                 | '  if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
068f4     00 24 0E F2 | 	cmp	local04, #0 wz
068f8     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
068fc     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
06900     38 00 90 5D |  if_ne	jmp	#LR__0587
06904     6A 00 00 FF 
06908     7C E4 05 F1 | 	add	objptr, ##54396
0690c     F2 1E 02 FB | 	rdlong	local01, objptr
06910     0F 2F 02 F6 | 	mov	local09, local01
06914     01 2E 66 F0 | 	shl	local09, #1
06918     0F 2F 02 F1 | 	add	local09, local01
0691c     02 2E 66 F0 | 	shl	local09, #2
06920     03 00 00 FF 
06924     00 E4 85 F1 | 	sub	objptr, ##1536
06928     F2 2E 02 F1 | 	add	local09, objptr
0692c     08 2E 06 F1 | 	add	local09, #8
06930     17 FD 6B FC | 	wrlong	#510, local09
06934     67 00 00 FF 
06938     7C E4 85 F1 | 	sub	objptr, ##52860
0693c                 | LR__0587
0693c     A7 F0 03 F6 | 	mov	ptra, fp
06940     B2 00 A0 FD | 	call	#popregs_
06944                 | _compile_immediate_assign_ret
06944     2D 00 64 FD | 	ret
06948                 | 
06948                 | ' 
06948                 | ' ' ------------------ compile the line that is calling a command 
06948                 | ' 
06948                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
06948                 | _compile
06948     04 4A 05 F6 | 	mov	COUNT_, #4
0694c     A8 00 A0 FD | 	call	#pushregs_
06950     09 1F 0A F6 | 	mov	local01, arg01 wz
06954     0A 21 02 F6 | 	mov	local02, arg02
06958     0B 23 02 F6 | 	mov	local03, arg03
0695c                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
0695c                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
0695c                 | '  
0695c                 | ' '  print "called compile with line= "; alinemajor;" and cont= "; cont 
0695c                 | ' if alinemajor=0 then err=compile_immediate(0) : return err  
0695c     0C 00 90 5D |  if_ne	jmp	#LR__0590
06960     00 12 06 F6 | 	mov	arg01, #0
06964     FC F2 BF FD | 	call	#_compile_immediate
06968     A0 00 90 FD | 	jmp	#LR__0597
0696c                 | LR__0590
0696c     67 00 00 FF 
06970     7C E4 05 F1 | 	add	objptr, ##52860
06974     F2 1E 62 FC | 	wrlong	local01, objptr
06978     04 E4 05 F1 | 	add	objptr, #4
0697c     F2 20 62 FC | 	wrlong	local02, objptr
06980     67 00 00 FF 
06984     80 E4 85 F1 | 	sub	objptr, ##52864
06988     11 13 02 F6 | 	mov	arg01, local03
0698c     01 12 06 F1 | 	add	arg01, #1
06990     D0 F2 BF FD | 	call	#_compile_immediate
06994     FD 24 0A F6 | 	mov	local04, result1 wz
06998                 | ' 
06998                 | ' ucompiledline(0)=alinemajor
06998                 | ' ucompiledline(1)=alineminor
06998                 | ' 
06998                 | ' 
06998                 | ' ' cont: 0: this is the first part of the line that will continue
06998                 | ' ' 1 - this is the continuation of the line
06998                 | ' ' 2 - this is the last continued line
06998                 | ' ' 3 - this is the ome and only part
06998                 | ' 
06998                 | ' err=compile_immediate(cont+1) 
06998                 | ' if err=0 then
06998     6C 00 90 5D |  if_ne	jmp	#LR__0596
0699c                 | '   if cont=3 orelse cont=2 then 
0699c     03 22 0E F2 | 	cmp	local03, #3 wz
069a0     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
069a4     60 00 90 5D |  if_ne	jmp	#LR__0595
069a8                 | '     if alinemajor >lastline then 
069a8     6A 00 00 FF 
069ac     88 E4 05 F1 | 	add	objptr, ##54408
069b0     F2 16 02 FB | 	rdlong	arg03, objptr
069b4     6A 00 00 FF 
069b8     88 E4 85 F1 | 	sub	objptr, ##54408
069bc     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
069c0     0C 00 90 ED |  if_be	jmp	#LR__0591
069c4     0F 13 02 F6 | 	mov	arg01, local01
069c8     D8 F1 BF FD | 	call	#_add_line_at_end
069cc     38 00 90 FD | 	jmp	#LR__0594
069d0                 | LR__0591
069d0     0F 13 02 F6 | 	mov	arg01, local01
069d4     08 EB BF FD | 	call	#_deleteline
069d8                 | '       deleteline(alinemajor)  
069d8                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' yes I know that's not optimal    
069d8     6A 00 00 FF 
069dc     88 E4 05 F1 | 	add	objptr, ##54408
069e0     F2 16 02 FB | 	rdlong	arg03, objptr
069e4     6A 00 00 FF 
069e8     88 E4 85 F1 | 	sub	objptr, ##54408
069ec     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
069f0     0C 00 90 ED |  if_be	jmp	#LR__0592
069f4     0F 13 02 F6 | 	mov	arg01, local01
069f8     A8 F1 BF FD | 	call	#_add_line_at_end
069fc     08 00 90 FD | 	jmp	#LR__0593
06a00                 | LR__0592
06a00     0F 13 02 F6 | 	mov	arg01, local01
06a04     80 EF BF FD | 	call	#_insertline
06a08                 | LR__0593
06a08                 | LR__0594
06a08                 | LR__0595
06a08                 | LR__0596
06a08                 | ' return err
06a08     12 FB 01 F6 | 	mov	result1, local04
06a0c                 | LR__0597
06a0c     A7 F0 03 F6 | 	mov	ptra, fp
06a10     B2 00 A0 FD | 	call	#popregs_
06a14                 | _compile_ret
06a14     2D 00 64 FD | 	ret
06a18                 | 
06a18                 | ' 
06a18                 | ' ' ------------------ compile the line that is assigning to a variable
06a18                 | ' 
06a18                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
06a18                 | _compile_assign
06a18     03 4A 05 F6 | 	mov	COUNT_, #3
06a1c     A8 00 A0 FD | 	call	#pushregs_
06a20     09 1F 0A F6 | 	mov	local01, arg01 wz
06a24     0A 21 02 F6 | 	mov	local02, arg02
06a28     0B 23 02 F6 | 	mov	local03, arg03
06a2c                 | ' 
06a2c                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
06a2c                 | ' if alinemajor=0 then compile_immediate_assign(0) : return  
06a2c     0C 00 90 5D |  if_ne	jmp	#LR__0600
06a30     00 12 06 F6 | 	mov	arg01, #0
06a34     28 FC BF FD | 	call	#_compile_immediate_assign
06a38     94 00 90 FD | 	jmp	#LR__0606
06a3c                 | LR__0600
06a3c     67 00 00 FF 
06a40     7C E4 05 F1 | 	add	objptr, ##52860
06a44     F2 1E 62 FC | 	wrlong	local01, objptr
06a48     04 E4 05 F1 | 	add	objptr, #4
06a4c     F2 20 62 FC | 	wrlong	local02, objptr
06a50     67 00 00 FF 
06a54     80 E4 85 F1 | 	sub	objptr, ##52864
06a58     11 13 02 F6 | 	mov	arg01, local03
06a5c     01 12 06 F1 | 	add	arg01, #1
06a60     FC FB BF FD | 	call	#_compile_immediate_assign
06a64                 | ' 
06a64                 | ' ucompiledline(0)=alinemajor
06a64                 | ' ucompiledline(1)=alineminor
06a64                 | ' 
06a64                 | ' compile_immediate_assign(cont+1) 
06a64                 | ' 
06a64                 | ' if cont=3 orelse cont=2 then 
06a64     03 22 0E F2 | 	cmp	local03, #3 wz
06a68     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
06a6c     60 00 90 5D |  if_ne	jmp	#LR__0605
06a70                 | '   if alinemajor >lastline then 
06a70     6A 00 00 FF 
06a74     88 E4 05 F1 | 	add	objptr, ##54408
06a78     F2 16 02 FB | 	rdlong	arg03, objptr
06a7c     6A 00 00 FF 
06a80     88 E4 85 F1 | 	sub	objptr, ##54408
06a84     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
06a88     0C 00 90 ED |  if_be	jmp	#LR__0601
06a8c     0F 13 02 F6 | 	mov	arg01, local01
06a90     10 F1 BF FD | 	call	#_add_line_at_end
06a94     38 00 90 FD | 	jmp	#LR__0604
06a98                 | LR__0601
06a98     0F 13 02 F6 | 	mov	arg01, local01
06a9c     40 EA BF FD | 	call	#_deleteline
06aa0                 | '     deleteline(alinemajor)  
06aa0                 | '     if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
06aa0     6A 00 00 FF 
06aa4     88 E4 05 F1 | 	add	objptr, ##54408
06aa8     F2 16 02 FB | 	rdlong	arg03, objptr
06aac     6A 00 00 FF 
06ab0     88 E4 85 F1 | 	sub	objptr, ##54408
06ab4     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
06ab8     0C 00 90 ED |  if_be	jmp	#LR__0602
06abc     0F 13 02 F6 | 	mov	arg01, local01
06ac0     E0 F0 BF FD | 	call	#_add_line_at_end
06ac4     08 00 90 FD | 	jmp	#LR__0603
06ac8                 | LR__0602
06ac8     0F 13 02 F6 | 	mov	arg01, local01
06acc     B8 EE BF FD | 	call	#_insertline
06ad0                 | LR__0603
06ad0                 | LR__0604
06ad0                 | LR__0605
06ad0                 | LR__0606
06ad0     A7 F0 03 F6 | 	mov	ptra, fp
06ad4     B2 00 A0 FD | 	call	#popregs_
06ad8                 | _compile_assign_ret
06ad8     2D 00 64 FD | 	ret
06adc                 | 
06adc                 | ' 
06adc                 | ' sub compile_error(errno)
06adc                 | _compile_error
06adc     FF 04 06 F6 | 	mov	_var03, #255
06ae0     01 07 02 F6 | 	mov	_var04, _var02
06ae4     02 09 02 F6 | 	mov	_var05, _var03
06ae8     6A 00 00 FF 
06aec     7C E4 05 F1 | 	add	objptr, ##54396
06af0     F2 0A 02 FB | 	rdlong	_var06, objptr
06af4     05 0D 02 F6 | 	mov	_var07, _var06
06af8     01 0C 66 F0 | 	shl	_var07, #1
06afc     05 0D 02 F1 | 	add	_var07, _var06
06b00     02 0C 66 F0 | 	shl	_var07, #2
06b04     03 00 00 FF 
06b08     00 E4 85 F1 | 	sub	objptr, ##1536
06b0c     F2 0C 02 F1 | 	add	_var07, objptr
06b10     06 13 62 FC | 	wrlong	arg01, _var07
06b14     03 00 00 FF 
06b18     00 E4 05 F1 | 	add	objptr, ##1536
06b1c     F2 0C 02 FB | 	rdlong	_var07, objptr
06b20     06 0B 02 F6 | 	mov	_var06, _var07
06b24     01 0A 66 F0 | 	shl	_var06, #1
06b28     06 0B 02 F1 | 	add	_var06, _var07
06b2c     02 0A 66 F0 | 	shl	_var06, #2
06b30     03 00 00 FF 
06b34     00 E4 85 F1 | 	sub	objptr, ##1536
06b38     F2 0A 02 F1 | 	add	_var06, objptr
06b3c     04 0A 06 F1 | 	add	_var06, #4
06b40     05 07 62 FC | 	wrlong	_var04, _var06
06b44     03 00 00 FF 
06b48     00 E4 05 F1 | 	add	objptr, ##1536
06b4c     F2 0C 02 FB | 	rdlong	_var07, objptr
06b50     06 0B 02 F6 | 	mov	_var06, _var07
06b54     01 0A 66 F0 | 	shl	_var06, #1
06b58     06 0B 02 F1 | 	add	_var06, _var07
06b5c     02 0A 66 F0 | 	shl	_var06, #2
06b60     03 00 00 FF 
06b64     00 E4 85 F1 | 	sub	objptr, ##1536
06b68     F2 0A 02 F1 | 	add	_var06, objptr
06b6c     08 0A 06 F1 | 	add	_var06, #8
06b70     05 09 62 FC | 	wrlong	_var05, _var06
06b74     03 00 00 FF 
06b78     00 E4 05 F1 | 	add	objptr, ##1536
06b7c     F2 12 02 FB | 	rdlong	arg01, objptr
06b80     01 12 06 F1 | 	add	arg01, #1
06b84     F2 12 62 FC | 	wrlong	arg01, objptr
06b88     6A 00 00 FF 
06b8c     7C E4 85 F1 | 	sub	objptr, ##54396
06b90                 | _compile_error_ret
06b90     2D 00 64 FD | 	ret
06b94                 | 
06b94                 | ' 
06b94                 | ' sub compile_unknown() 
06b94                 | _compile_unknown
06b94     FF 04 06 F6 | 	mov	_var03, #255
06b98     17 00 06 F6 | 	mov	_var01, #23
06b9c     01 07 02 F6 | 	mov	_var04, _var02
06ba0     02 01 02 F6 | 	mov	_var01, _var03
06ba4     6A 00 00 FF 
06ba8     7C E4 05 F1 | 	add	objptr, ##54396
06bac     F2 08 02 FB | 	rdlong	_var05, objptr
06bb0     04 0B 02 F6 | 	mov	_var06, _var05
06bb4     01 0A 66 F0 | 	shl	_var06, #1
06bb8     04 0B 02 F1 | 	add	_var06, _var05
06bbc     02 0A 66 F0 | 	shl	_var06, #2
06bc0     03 00 00 FF 
06bc4     00 E4 85 F1 | 	sub	objptr, ##1536
06bc8     F2 0A 02 F1 | 	add	_var06, objptr
06bcc     05 2F 68 FC | 	wrlong	#23, _var06
06bd0     03 00 00 FF 
06bd4     00 E4 05 F1 | 	add	objptr, ##1536
06bd8     F2 0A 02 FB | 	rdlong	_var06, objptr
06bdc     05 09 02 F6 | 	mov	_var05, _var06
06be0     01 08 66 F0 | 	shl	_var05, #1
06be4     05 09 02 F1 | 	add	_var05, _var06
06be8     02 08 66 F0 | 	shl	_var05, #2
06bec     03 00 00 FF 
06bf0     00 E4 85 F1 | 	sub	objptr, ##1536
06bf4     F2 08 02 F1 | 	add	_var05, objptr
06bf8     04 08 06 F1 | 	add	_var05, #4
06bfc     04 07 62 FC | 	wrlong	_var04, _var05
06c00     03 00 00 FF 
06c04     00 E4 05 F1 | 	add	objptr, ##1536
06c08     F2 0A 02 FB | 	rdlong	_var06, objptr
06c0c     05 09 02 F6 | 	mov	_var05, _var06
06c10     01 08 66 F0 | 	shl	_var05, #1
06c14     05 09 02 F1 | 	add	_var05, _var06
06c18     02 08 66 F0 | 	shl	_var05, #2
06c1c     03 00 00 FF 
06c20     00 E4 85 F1 | 	sub	objptr, ##1536
06c24     F2 08 02 F1 | 	add	_var05, objptr
06c28     08 08 06 F1 | 	add	_var05, #8
06c2c     04 01 62 FC | 	wrlong	_var01, _var05
06c30     03 00 00 FF 
06c34     00 E4 05 F1 | 	add	objptr, ##1536
06c38     F2 0A 02 FB | 	rdlong	_var06, objptr
06c3c     01 0A 06 F1 | 	add	_var06, #1
06c40     F2 0A 62 FC | 	wrlong	_var06, objptr
06c44     6A 00 00 FF 
06c48     7C E4 85 F1 | 	sub	objptr, ##54396
06c4c                 | _compile_unknown_ret
06c4c     2D 00 64 FD | 	ret
06c50                 | 
06c50                 | ' 
06c50                 | ' function compile_fun_2p() as ulong
06c50                 | _compile_fun_2p
06c50     01 4A 05 F6 | 	mov	COUNT_, #1
06c54     A8 00 A0 FD | 	call	#pushregs_
06c58     C4 25 B0 FD | 	call	#_expr
06c5c                 | ' 
06c5c                 | ' expr()
06c5c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06c5c     57 00 00 FF 
06c60     44 E4 05 F1 | 	add	objptr, ##44612
06c64     F2 1E 02 FB | 	rdlong	local01, objptr
06c68     03 1E 66 F0 | 	shl	local01, #3
06c6c     02 00 00 FF 
06c70     38 E4 85 F1 | 	sub	objptr, ##1080
06c74     F2 1E 02 F1 | 	add	local01, objptr
06c78     04 1E 06 F1 | 	add	local01, #4
06c7c     0F 1F 02 FB | 	rdlong	local01, local01
06c80     11 1E 0E F2 | 	cmp	local01, #17 wz
06c84     55 00 00 FF 
06c88     0C E4 85 F1 | 	sub	objptr, ##43532
06c8c     15 FA 05 56 |  if_ne	mov	result1, #21
06c90     24 00 90 5D |  if_ne	jmp	#LR__0610
06c94     57 00 00 FF 
06c98     44 E4 05 F1 | 	add	objptr, ##44612
06c9c     F2 1E 02 FB | 	rdlong	local01, objptr
06ca0     01 1E 06 F1 | 	add	local01, #1
06ca4     F2 1E 62 FC | 	wrlong	local01, objptr
06ca8     57 00 00 FF 
06cac     44 E4 85 F1 | 	sub	objptr, ##44612
06cb0     6C 25 B0 FD | 	call	#_expr
06cb4     00 FA 05 F6 | 	mov	result1, #0
06cb8                 | LR__0610
06cb8     A7 F0 03 F6 | 	mov	ptra, fp
06cbc     B2 00 A0 FD | 	call	#popregs_
06cc0                 | _compile_fun_2p_ret
06cc0     2D 00 64 FD | 	ret
06cc4                 | 
06cc4                 | ' 
06cc4                 | ' function compile_fun_3p() as ulong
06cc4                 | _compile_fun_3p
06cc4     01 4A 05 F6 | 	mov	COUNT_, #1
06cc8     A8 00 A0 FD | 	call	#pushregs_
06ccc     50 25 B0 FD | 	call	#_expr
06cd0                 | ' 
06cd0                 | ' expr()
06cd0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06cd0     57 00 00 FF 
06cd4     44 E4 05 F1 | 	add	objptr, ##44612
06cd8     F2 1E 02 FB | 	rdlong	local01, objptr
06cdc     03 1E 66 F0 | 	shl	local01, #3
06ce0     02 00 00 FF 
06ce4     38 E4 85 F1 | 	sub	objptr, ##1080
06ce8     F2 1E 02 F1 | 	add	local01, objptr
06cec     04 1E 06 F1 | 	add	local01, #4
06cf0     0F 1F 02 FB | 	rdlong	local01, local01
06cf4     11 1E 0E F2 | 	cmp	local01, #17 wz
06cf8     55 00 00 FF 
06cfc     0C E4 85 F1 | 	sub	objptr, ##43532
06d00     15 FA 05 56 |  if_ne	mov	result1, #21
06d04     7C 00 90 5D |  if_ne	jmp	#LR__0620
06d08     57 00 00 FF 
06d0c     44 E4 05 F1 | 	add	objptr, ##44612
06d10     F2 1E 02 FB | 	rdlong	local01, objptr
06d14     01 1E 06 F1 | 	add	local01, #1
06d18     F2 1E 62 FC | 	wrlong	local01, objptr
06d1c     57 00 00 FF 
06d20     44 E4 85 F1 | 	sub	objptr, ##44612
06d24     F8 24 B0 FD | 	call	#_expr
06d28                 | ' expr()
06d28                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06d28     57 00 00 FF 
06d2c     44 E4 05 F1 | 	add	objptr, ##44612
06d30     F2 1E 02 FB | 	rdlong	local01, objptr
06d34     03 1E 66 F0 | 	shl	local01, #3
06d38     02 00 00 FF 
06d3c     38 E4 85 F1 | 	sub	objptr, ##1080
06d40     F2 1E 02 F1 | 	add	local01, objptr
06d44     04 1E 06 F1 | 	add	local01, #4
06d48     0F 1F 02 FB | 	rdlong	local01, local01
06d4c     11 1E 0E F2 | 	cmp	local01, #17 wz
06d50     55 00 00 FF 
06d54     0C E4 85 F1 | 	sub	objptr, ##43532
06d58     15 FA 05 56 |  if_ne	mov	result1, #21
06d5c     24 00 90 5D |  if_ne	jmp	#LR__0620
06d60     57 00 00 FF 
06d64     44 E4 05 F1 | 	add	objptr, ##44612
06d68     F2 1E 02 FB | 	rdlong	local01, objptr
06d6c     01 1E 06 F1 | 	add	local01, #1
06d70     F2 1E 62 FC | 	wrlong	local01, objptr
06d74     57 00 00 FF 
06d78     44 E4 85 F1 | 	sub	objptr, ##44612
06d7c     A0 24 B0 FD | 	call	#_expr
06d80     00 FA 05 F6 | 	mov	result1, #0
06d84                 | LR__0620
06d84     A7 F0 03 F6 | 	mov	ptra, fp
06d88     B2 00 A0 FD | 	call	#popregs_
06d8c                 | _compile_fun_3p_ret
06d8c     2D 00 64 FD | 	ret
06d90                 | 
06d90                 | ' 
06d90                 | ' function compile_fun_4p() as ulong
06d90                 | _compile_fun_4p
06d90     01 4A 05 F6 | 	mov	COUNT_, #1
06d94     A8 00 A0 FD | 	call	#pushregs_
06d98     84 24 B0 FD | 	call	#_expr
06d9c                 | ' 
06d9c                 | ' expr()
06d9c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06d9c     57 00 00 FF 
06da0     44 E4 05 F1 | 	add	objptr, ##44612
06da4     F2 1E 02 FB | 	rdlong	local01, objptr
06da8     03 1E 66 F0 | 	shl	local01, #3
06dac     02 00 00 FF 
06db0     38 E4 85 F1 | 	sub	objptr, ##1080
06db4     F2 1E 02 F1 | 	add	local01, objptr
06db8     04 1E 06 F1 | 	add	local01, #4
06dbc     0F 1F 02 FB | 	rdlong	local01, local01
06dc0     11 1E 0E F2 | 	cmp	local01, #17 wz
06dc4     55 00 00 FF 
06dc8     0C E4 85 F1 | 	sub	objptr, ##43532
06dcc     15 FA 05 56 |  if_ne	mov	result1, #21
06dd0     D4 00 90 5D |  if_ne	jmp	#LR__0630
06dd4     57 00 00 FF 
06dd8     44 E4 05 F1 | 	add	objptr, ##44612
06ddc     F2 1E 02 FB | 	rdlong	local01, objptr
06de0     01 1E 06 F1 | 	add	local01, #1
06de4     F2 1E 62 FC | 	wrlong	local01, objptr
06de8     57 00 00 FF 
06dec     44 E4 85 F1 | 	sub	objptr, ##44612
06df0     2C 24 B0 FD | 	call	#_expr
06df4                 | ' expr()
06df4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06df4     57 00 00 FF 
06df8     44 E4 05 F1 | 	add	objptr, ##44612
06dfc     F2 1E 02 FB | 	rdlong	local01, objptr
06e00     03 1E 66 F0 | 	shl	local01, #3
06e04     02 00 00 FF 
06e08     38 E4 85 F1 | 	sub	objptr, ##1080
06e0c     F2 1E 02 F1 | 	add	local01, objptr
06e10     04 1E 06 F1 | 	add	local01, #4
06e14     0F 1F 02 FB | 	rdlong	local01, local01
06e18     11 1E 0E F2 | 	cmp	local01, #17 wz
06e1c     55 00 00 FF 
06e20     0C E4 85 F1 | 	sub	objptr, ##43532
06e24     15 FA 05 56 |  if_ne	mov	result1, #21
06e28     7C 00 90 5D |  if_ne	jmp	#LR__0630
06e2c     57 00 00 FF 
06e30     44 E4 05 F1 | 	add	objptr, ##44612
06e34     F2 1E 02 FB | 	rdlong	local01, objptr
06e38     01 1E 06 F1 | 	add	local01, #1
06e3c     F2 1E 62 FC | 	wrlong	local01, objptr
06e40     57 00 00 FF 
06e44     44 E4 85 F1 | 	sub	objptr, ##44612
06e48     D4 23 B0 FD | 	call	#_expr
06e4c                 | ' expr()
06e4c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06e4c     57 00 00 FF 
06e50     44 E4 05 F1 | 	add	objptr, ##44612
06e54     F2 1E 02 FB | 	rdlong	local01, objptr
06e58     03 1E 66 F0 | 	shl	local01, #3
06e5c     02 00 00 FF 
06e60     38 E4 85 F1 | 	sub	objptr, ##1080
06e64     F2 1E 02 F1 | 	add	local01, objptr
06e68     04 1E 06 F1 | 	add	local01, #4
06e6c     0F 1F 02 FB | 	rdlong	local01, local01
06e70     11 1E 0E F2 | 	cmp	local01, #17 wz
06e74     55 00 00 FF 
06e78     0C E4 85 F1 | 	sub	objptr, ##43532
06e7c     15 FA 05 56 |  if_ne	mov	result1, #21
06e80     24 00 90 5D |  if_ne	jmp	#LR__0630
06e84     57 00 00 FF 
06e88     44 E4 05 F1 | 	add	objptr, ##44612
06e8c     F2 1E 02 FB | 	rdlong	local01, objptr
06e90     01 1E 06 F1 | 	add	local01, #1
06e94     F2 1E 62 FC | 	wrlong	local01, objptr
06e98     57 00 00 FF 
06e9c     44 E4 85 F1 | 	sub	objptr, ##44612
06ea0     7C 23 B0 FD | 	call	#_expr
06ea4     00 FA 05 F6 | 	mov	result1, #0
06ea8                 | LR__0630
06ea8     A7 F0 03 F6 | 	mov	ptra, fp
06eac     B2 00 A0 FD | 	call	#popregs_
06eb0                 | _compile_fun_4p_ret
06eb0     2D 00 64 FD | 	ret
06eb4                 | 
06eb4                 | ' 
06eb4                 | ' 
06eb4                 | ' function compile_fun_5p() as ulong
06eb4                 | _compile_fun_5p
06eb4     01 4A 05 F6 | 	mov	COUNT_, #1
06eb8     A8 00 A0 FD | 	call	#pushregs_
06ebc     60 23 B0 FD | 	call	#_expr
06ec0                 | ' 
06ec0                 | ' expr()
06ec0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06ec0     57 00 00 FF 
06ec4     44 E4 05 F1 | 	add	objptr, ##44612
06ec8     F2 1E 02 FB | 	rdlong	local01, objptr
06ecc     03 1E 66 F0 | 	shl	local01, #3
06ed0     02 00 00 FF 
06ed4     38 E4 85 F1 | 	sub	objptr, ##1080
06ed8     F2 1E 02 F1 | 	add	local01, objptr
06edc     04 1E 06 F1 | 	add	local01, #4
06ee0     0F 1F 02 FB | 	rdlong	local01, local01
06ee4     11 1E 0E F2 | 	cmp	local01, #17 wz
06ee8     55 00 00 FF 
06eec     0C E4 85 F1 | 	sub	objptr, ##43532
06ef0     15 FA 05 56 |  if_ne	mov	result1, #21
06ef4     2C 01 90 5D |  if_ne	jmp	#LR__0640
06ef8     57 00 00 FF 
06efc     44 E4 05 F1 | 	add	objptr, ##44612
06f00     F2 1E 02 FB | 	rdlong	local01, objptr
06f04     01 1E 06 F1 | 	add	local01, #1
06f08     F2 1E 62 FC | 	wrlong	local01, objptr
06f0c     57 00 00 FF 
06f10     44 E4 85 F1 | 	sub	objptr, ##44612
06f14     08 23 B0 FD | 	call	#_expr
06f18                 | ' expr()
06f18                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06f18     57 00 00 FF 
06f1c     44 E4 05 F1 | 	add	objptr, ##44612
06f20     F2 1E 02 FB | 	rdlong	local01, objptr
06f24     03 1E 66 F0 | 	shl	local01, #3
06f28     02 00 00 FF 
06f2c     38 E4 85 F1 | 	sub	objptr, ##1080
06f30     F2 1E 02 F1 | 	add	local01, objptr
06f34     04 1E 06 F1 | 	add	local01, #4
06f38     0F 1F 02 FB | 	rdlong	local01, local01
06f3c     11 1E 0E F2 | 	cmp	local01, #17 wz
06f40     55 00 00 FF 
06f44     0C E4 85 F1 | 	sub	objptr, ##43532
06f48     15 FA 05 56 |  if_ne	mov	result1, #21
06f4c     D4 00 90 5D |  if_ne	jmp	#LR__0640
06f50     57 00 00 FF 
06f54     44 E4 05 F1 | 	add	objptr, ##44612
06f58     F2 1E 02 FB | 	rdlong	local01, objptr
06f5c     01 1E 06 F1 | 	add	local01, #1
06f60     F2 1E 62 FC | 	wrlong	local01, objptr
06f64     57 00 00 FF 
06f68     44 E4 85 F1 | 	sub	objptr, ##44612
06f6c     B0 22 B0 FD | 	call	#_expr
06f70                 | ' expr()
06f70                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06f70     57 00 00 FF 
06f74     44 E4 05 F1 | 	add	objptr, ##44612
06f78     F2 1E 02 FB | 	rdlong	local01, objptr
06f7c     03 1E 66 F0 | 	shl	local01, #3
06f80     02 00 00 FF 
06f84     38 E4 85 F1 | 	sub	objptr, ##1080
06f88     F2 1E 02 F1 | 	add	local01, objptr
06f8c     04 1E 06 F1 | 	add	local01, #4
06f90     0F 1F 02 FB | 	rdlong	local01, local01
06f94     11 1E 0E F2 | 	cmp	local01, #17 wz
06f98     55 00 00 FF 
06f9c     0C E4 85 F1 | 	sub	objptr, ##43532
06fa0     15 FA 05 56 |  if_ne	mov	result1, #21
06fa4     7C 00 90 5D |  if_ne	jmp	#LR__0640
06fa8     57 00 00 FF 
06fac     44 E4 05 F1 | 	add	objptr, ##44612
06fb0     F2 1E 02 FB | 	rdlong	local01, objptr
06fb4     01 1E 06 F1 | 	add	local01, #1
06fb8     F2 1E 62 FC | 	wrlong	local01, objptr
06fbc     57 00 00 FF 
06fc0     44 E4 85 F1 | 	sub	objptr, ##44612
06fc4     58 22 B0 FD | 	call	#_expr
06fc8                 | ' expr()
06fc8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06fc8     57 00 00 FF 
06fcc     44 E4 05 F1 | 	add	objptr, ##44612
06fd0     F2 1E 02 FB | 	rdlong	local01, objptr
06fd4     03 1E 66 F0 | 	shl	local01, #3
06fd8     02 00 00 FF 
06fdc     38 E4 85 F1 | 	sub	objptr, ##1080
06fe0     F2 1E 02 F1 | 	add	local01, objptr
06fe4     04 1E 06 F1 | 	add	local01, #4
06fe8     0F 1F 02 FB | 	rdlong	local01, local01
06fec     11 1E 0E F2 | 	cmp	local01, #17 wz
06ff0     55 00 00 FF 
06ff4     0C E4 85 F1 | 	sub	objptr, ##43532
06ff8     15 FA 05 56 |  if_ne	mov	result1, #21
06ffc     24 00 90 5D |  if_ne	jmp	#LR__0640
07000     57 00 00 FF 
07004     44 E4 05 F1 | 	add	objptr, ##44612
07008     F2 1E 02 FB | 	rdlong	local01, objptr
0700c     01 1E 06 F1 | 	add	local01, #1
07010     F2 1E 62 FC | 	wrlong	local01, objptr
07014     57 00 00 FF 
07018     44 E4 85 F1 | 	sub	objptr, ##44612
0701c     00 22 B0 FD | 	call	#_expr
07020     00 FA 05 F6 | 	mov	result1, #0
07024                 | LR__0640
07024     A7 F0 03 F6 | 	mov	ptra, fp
07028     B2 00 A0 FD | 	call	#popregs_
0702c                 | _compile_fun_5p_ret
0702c     2D 00 64 FD | 	ret
07030                 | 
07030                 | ' 
07030                 | ' function compile_fun_varp() as ulong 
07030                 | _compile_fun_varp
07030     02 4A 05 F6 | 	mov	COUNT_, #2
07034     A8 00 A0 FD | 	call	#pushregs_
07038     00 1E 06 F6 | 	mov	local01, #0
0703c                 | ' i=0
0703c                 | ' if lparts(ct).token<>token_end then
0703c     57 00 00 FF 
07040     44 E4 05 F1 | 	add	objptr, ##44612
07044     F2 20 02 FB | 	rdlong	local02, objptr
07048     03 20 66 F0 | 	shl	local02, #3
0704c     02 00 00 FF 
07050     38 E4 85 F1 | 	sub	objptr, ##1080
07054     F2 20 02 F1 | 	add	local02, objptr
07058     04 20 06 F1 | 	add	local02, #4
0705c     10 21 02 FB | 	rdlong	local02, local02
07060     FE 21 0E F2 | 	cmp	local02, #510 wz
07064     55 00 00 FF 
07068     0C E4 85 F1 | 	sub	objptr, ##43532
0706c     5C 00 90 AD |  if_e	jmp	#LR__0652
07070                 | '   do
07070                 | LR__0650
07070     AC 21 B0 FD | 	call	#_expr
07074     01 1E 06 F1 | 	add	local01, #1
07078                 | '   expr()
07078                 | '    i+=1
07078                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
07078     57 00 00 FF 
0707c     44 E4 05 F1 | 	add	objptr, ##44612
07080     F2 20 02 FB | 	rdlong	local02, objptr
07084     03 20 66 F0 | 	shl	local02, #3
07088     02 00 00 FF 
0708c     38 E4 85 F1 | 	sub	objptr, ##1080
07090     F2 20 02 F1 | 	add	local02, objptr
07094     04 20 06 F1 | 	add	local02, #4
07098     10 21 02 FB | 	rdlong	local02, local02
0709c     11 20 0E F2 | 	cmp	local02, #17 wz
070a0     55 00 00 FF 
070a4     0C E4 85 F1 | 	sub	objptr, ##43532
070a8     20 00 90 5D |  if_ne	jmp	#LR__0651
070ac     57 00 00 FF 
070b0     44 E4 05 F1 | 	add	objptr, ##44612
070b4     F2 20 02 FB | 	rdlong	local02, objptr
070b8     01 20 06 F1 | 	add	local02, #1
070bc     F2 20 62 FC | 	wrlong	local02, objptr
070c0     57 00 00 FF 
070c4     44 E4 85 F1 | 	sub	objptr, ##44612
070c8     A4 FF 9F FD | 	jmp	#LR__0650
070cc                 | LR__0651
070cc                 | LR__0652
070cc                 | ' return i
070cc     0F FB 01 F6 | 	mov	result1, local01
070d0     A7 F0 03 F6 | 	mov	ptra, fp
070d4     B2 00 A0 FD | 	call	#popregs_
070d8                 | _compile_fun_varp_ret
070d8     2D 00 64 FD | 	ret
070dc                 | 
070dc                 | ' 
070dc                 | ' 
070dc                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
070dc                 | _compile_print
070dc     0B 4A 05 F6 | 	mov	COUNT_, #11
070e0     A8 00 A0 FD | 	call	#pushregs_
070e4     00 1E 06 F6 | 	mov	local01, #0
070e8     1D 22 06 F6 | 	mov	local03, #29
070ec                 | ' t1.result.uresult=0 : t1.result_type=result_uint
070ec                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
070ec     57 00 00 FF 
070f0     44 E4 05 F1 | 	add	objptr, ##44612
070f4     F2 24 02 FB | 	rdlong	local04, objptr
070f8     03 24 66 F0 | 	shl	local04, #3
070fc     02 00 00 FF 
07100     38 E4 85 F1 | 	sub	objptr, ##1080
07104     F2 24 02 F1 | 	add	local04, objptr
07108     04 24 06 F1 | 	add	local04, #4
0710c     12 25 02 FB | 	rdlong	local04, local04
07110     FE 25 0E F2 | 	cmp	local04, #510 wz
07114     55 00 00 FF 
07118     0C E4 85 F1 | 	sub	objptr, ##43532
0711c     68 01 90 5D |  if_ne	jmp	#LR__0660
07120     20 22 06 F6 | 	mov	local03, #32
07124     0F 27 02 F6 | 	mov	local05, local01
07128     10 29 02 F6 | 	mov	local06, local02
0712c     11 2B 02 F6 | 	mov	local07, local03
07130     6A 00 00 FF 
07134     7C E4 05 F1 | 	add	objptr, ##54396
07138     F2 2C 02 FB | 	rdlong	local08, objptr
0713c     16 2F 02 F6 | 	mov	local09, local08
07140     01 2E 66 F0 | 	shl	local09, #1
07144     16 2F 02 F1 | 	add	local09, local08
07148     02 2E 66 F0 | 	shl	local09, #2
0714c     03 00 00 FF 
07150     00 E4 85 F1 | 	sub	objptr, ##1536
07154     F2 2E 02 F1 | 	add	local09, objptr
07158     17 27 62 FC | 	wrlong	local05, local09
0715c     03 00 00 FF 
07160     00 E4 05 F1 | 	add	objptr, ##1536
07164     F2 26 02 FB | 	rdlong	local05, objptr
07168     13 31 02 F6 | 	mov	local10, local05
0716c     01 30 66 F0 | 	shl	local10, #1
07170     13 31 02 F1 | 	add	local10, local05
07174     02 30 66 F0 | 	shl	local10, #2
07178     03 00 00 FF 
0717c     00 E4 85 F1 | 	sub	objptr, ##1536
07180     F2 30 02 F1 | 	add	local10, objptr
07184     04 30 06 F1 | 	add	local10, #4
07188     18 29 62 FC | 	wrlong	local06, local10
0718c     03 00 00 FF 
07190     00 E4 05 F1 | 	add	objptr, ##1536
07194     F2 26 02 FB | 	rdlong	local05, objptr
07198     13 33 02 F6 | 	mov	local11, local05
0719c     01 32 66 F0 | 	shl	local11, #1
071a0     13 33 02 F1 | 	add	local11, local05
071a4     02 32 66 F0 | 	shl	local11, #2
071a8     03 00 00 FF 
071ac     00 E4 85 F1 | 	sub	objptr, ##1536
071b0     F2 32 02 F1 | 	add	local11, objptr
071b4     08 32 06 F1 | 	add	local11, #8
071b8     19 2B 62 FC | 	wrlong	local07, local11
071bc     03 00 00 FF 
071c0     00 E4 05 F1 | 	add	objptr, ##1536
071c4     F2 26 02 FB | 	rdlong	local05, objptr
071c8     01 26 06 F1 | 	add	local05, #1
071cc     F2 26 62 FC | 	wrlong	local05, objptr
071d0     44 22 06 F6 | 	mov	local03, #68
071d4     0F 27 02 F6 | 	mov	local05, local01
071d8     10 29 02 F6 | 	mov	local06, local02
071dc     11 2B 02 F6 | 	mov	local07, local03
071e0     F2 2C 02 FB | 	rdlong	local08, objptr
071e4     16 2F 02 F6 | 	mov	local09, local08
071e8     01 2E 66 F0 | 	shl	local09, #1
071ec     16 2F 02 F1 | 	add	local09, local08
071f0     02 2E 66 F0 | 	shl	local09, #2
071f4     03 00 00 FF 
071f8     00 E4 85 F1 | 	sub	objptr, ##1536
071fc     F2 2E 02 F1 | 	add	local09, objptr
07200     17 27 62 FC | 	wrlong	local05, local09
07204     03 00 00 FF 
07208     00 E4 05 F1 | 	add	objptr, ##1536
0720c     F2 32 02 FB | 	rdlong	local11, objptr
07210     19 31 02 F6 | 	mov	local10, local11
07214     01 30 66 F0 | 	shl	local10, #1
07218     19 31 02 F1 | 	add	local10, local11
0721c     02 30 66 F0 | 	shl	local10, #2
07220     03 00 00 FF 
07224     00 E4 85 F1 | 	sub	objptr, ##1536
07228     F2 30 02 F1 | 	add	local10, objptr
0722c     04 30 06 F1 | 	add	local10, #4
07230     18 29 62 FC | 	wrlong	local06, local10
07234     03 00 00 FF 
07238     00 E4 05 F1 | 	add	objptr, ##1536
0723c     F2 30 02 FB | 	rdlong	local10, objptr
07240     18 33 02 F6 | 	mov	local11, local10
07244     01 32 66 F0 | 	shl	local11, #1
07248     18 33 02 F1 | 	add	local11, local10
0724c     02 32 66 F0 | 	shl	local11, #2
07250     03 00 00 FF 
07254     00 E4 85 F1 | 	sub	objptr, ##1536
07258     F2 32 02 F1 | 	add	local11, objptr
0725c     08 32 06 F1 | 	add	local11, #8
07260     19 2B 62 FC | 	wrlong	local07, local11
07264     03 00 00 FF 
07268     00 E4 05 F1 | 	add	objptr, ##1536
0726c     F2 26 02 FB | 	rdlong	local05, objptr
07270     01 26 06 F1 | 	add	local05, #1
07274     F2 26 62 FC | 	wrlong	local05, objptr
07278     6A 00 00 FF 
0727c     7C E4 85 F1 | 	sub	objptr, ##54396
07280     00 FA 05 F6 | 	mov	result1, #0
07284     20 05 90 FD | 	jmp	#LR__0667
07288                 | LR__0660
07288                 | ' do
07288                 | LR__0661
07288     94 1F B0 FD | 	call	#_expr
0728c                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
0728c                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
0728c     57 00 00 FF 
07290     44 E4 05 F1 | 	add	objptr, ##44612
07294     F2 24 02 FB | 	rdlong	local04, objptr
07298     03 24 66 F0 | 	shl	local04, #3
0729c     02 00 00 FF 
072a0     38 E4 85 F1 | 	sub	objptr, ##1080
072a4     F2 24 02 F1 | 	add	local04, objptr
072a8     04 24 06 F1 | 	add	local04, #4
072ac     12 2D 02 FB | 	rdlong	local08, local04
072b0     11 2C 0E F2 | 	cmp	local08, #17 wz
072b4     55 00 00 FF 
072b8     0C E4 85 F1 | 	sub	objptr, ##43532
072bc     60 01 90 5D |  if_ne	jmp	#LR__0662
072c0     21 22 06 F6 | 	mov	local03, #33
072c4     0F 27 02 F6 | 	mov	local05, local01
072c8     10 29 02 F6 | 	mov	local06, local02
072cc     11 2B 02 F6 | 	mov	local07, local03
072d0     6A 00 00 FF 
072d4     7C E4 05 F1 | 	add	objptr, ##54396
072d8     F2 2C 02 FB | 	rdlong	local08, objptr
072dc     16 2F 02 F6 | 	mov	local09, local08
072e0     01 2E 66 F0 | 	shl	local09, #1
072e4     16 2F 02 F1 | 	add	local09, local08
072e8     02 2E 66 F0 | 	shl	local09, #2
072ec     03 00 00 FF 
072f0     00 E4 85 F1 | 	sub	objptr, ##1536
072f4     F2 2E 02 F1 | 	add	local09, objptr
072f8     17 27 62 FC | 	wrlong	local05, local09
072fc     03 00 00 FF 
07300     00 E4 05 F1 | 	add	objptr, ##1536
07304     F2 32 02 FB | 	rdlong	local11, objptr
07308     19 31 02 F6 | 	mov	local10, local11
0730c     01 30 66 F0 | 	shl	local10, #1
07310     19 31 02 F1 | 	add	local10, local11
07314     02 30 66 F0 | 	shl	local10, #2
07318     03 00 00 FF 
0731c     00 E4 85 F1 | 	sub	objptr, ##1536
07320     F2 30 02 F1 | 	add	local10, objptr
07324     04 30 06 F1 | 	add	local10, #4
07328     18 29 62 FC | 	wrlong	local06, local10
0732c     03 00 00 FF 
07330     00 E4 05 F1 | 	add	objptr, ##1536
07334     F2 26 02 FB | 	rdlong	local05, objptr
07338     13 33 02 F6 | 	mov	local11, local05
0733c     01 32 66 F0 | 	shl	local11, #1
07340     13 33 02 F1 | 	add	local11, local05
07344     02 32 66 F0 | 	shl	local11, #2
07348     03 00 00 FF 
0734c     00 E4 85 F1 | 	sub	objptr, ##1536
07350     F2 32 02 F1 | 	add	local11, objptr
07354     08 32 06 F1 | 	add	local11, #8
07358     19 2B 62 FC | 	wrlong	local07, local11
0735c     03 00 00 FF 
07360     00 E4 05 F1 | 	add	objptr, ##1536
07364     F2 26 02 FB | 	rdlong	local05, objptr
07368     01 26 06 F1 | 	add	local05, #1
0736c     F2 26 62 FC | 	wrlong	local05, objptr
07370     44 22 06 F6 | 	mov	local03, #68
07374     0F 27 02 F6 | 	mov	local05, local01
07378     10 29 02 F6 | 	mov	local06, local02
0737c     11 2B 02 F6 | 	mov	local07, local03
07380     F2 2C 02 FB | 	rdlong	local08, objptr
07384     16 2F 02 F6 | 	mov	local09, local08
07388     01 2E 66 F0 | 	shl	local09, #1
0738c     16 2F 02 F1 | 	add	local09, local08
07390     02 2E 66 F0 | 	shl	local09, #2
07394     03 00 00 FF 
07398     00 E4 85 F1 | 	sub	objptr, ##1536
0739c     F2 2E 02 F1 | 	add	local09, objptr
073a0     17 27 62 FC | 	wrlong	local05, local09
073a4     03 00 00 FF 
073a8     00 E4 05 F1 | 	add	objptr, ##1536
073ac     F2 32 02 FB | 	rdlong	local11, objptr
073b0     19 31 02 F6 | 	mov	local10, local11
073b4     01 30 66 F0 | 	shl	local10, #1
073b8     19 31 02 F1 | 	add	local10, local11
073bc     02 30 66 F0 | 	shl	local10, #2
073c0     03 00 00 FF 
073c4     00 E4 85 F1 | 	sub	objptr, ##1536
073c8     F2 30 02 F1 | 	add	local10, objptr
073cc     04 30 06 F1 | 	add	local10, #4
073d0     18 29 62 FC | 	wrlong	local06, local10
073d4     03 00 00 FF 
073d8     00 E4 05 F1 | 	add	objptr, ##1536
073dc     F2 30 02 FB | 	rdlong	local10, objptr
073e0     18 33 02 F6 | 	mov	local11, local10
073e4     01 32 66 F0 | 	shl	local11, #1
073e8     18 33 02 F1 | 	add	local11, local10
073ec     02 32 66 F0 | 	shl	local11, #2
073f0     03 00 00 FF 
073f4     00 E4 85 F1 | 	sub	objptr, ##1536
073f8     F2 32 02 F1 | 	add	local11, objptr
073fc     08 32 06 F1 | 	add	local11, #8
07400     19 2B 62 FC | 	wrlong	local07, local11
07404     03 00 00 FF 
07408     00 E4 05 F1 | 	add	objptr, ##1536
0740c     F2 26 02 FB | 	rdlong	local05, objptr
07410     01 26 06 F1 | 	add	local05, #1
07414     F2 26 62 FC | 	wrlong	local05, objptr
07418     6A 00 00 FF 
0741c     7C E4 85 F1 | 	sub	objptr, ##54396
07420                 | LR__0662
07420                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
07420     57 00 00 FF 
07424     44 E4 05 F1 | 	add	objptr, ##44612
07428     F2 24 02 FB | 	rdlong	local04, objptr
0742c     03 24 66 F0 | 	shl	local04, #3
07430     02 00 00 FF 
07434     38 E4 85 F1 | 	sub	objptr, ##1080
07438     F2 24 02 F1 | 	add	local04, objptr
0743c     04 24 06 F1 | 	add	local04, #4
07440     12 2D 02 FB | 	rdlong	local08, local04
07444     12 2C 0E F2 | 	cmp	local08, #18 wz
07448     55 00 00 FF 
0744c     0C E4 85 F1 | 	sub	objptr, ##43532
07450     60 01 90 5D |  if_ne	jmp	#LR__0663
07454     22 22 06 F6 | 	mov	local03, #34
07458     0F 27 02 F6 | 	mov	local05, local01
0745c     10 29 02 F6 | 	mov	local06, local02
07460     11 2B 02 F6 | 	mov	local07, local03
07464     6A 00 00 FF 
07468     7C E4 05 F1 | 	add	objptr, ##54396
0746c     F2 2C 02 FB | 	rdlong	local08, objptr
07470     16 2F 02 F6 | 	mov	local09, local08
07474     01 2E 66 F0 | 	shl	local09, #1
07478     16 2F 02 F1 | 	add	local09, local08
0747c     02 2E 66 F0 | 	shl	local09, #2
07480     03 00 00 FF 
07484     00 E4 85 F1 | 	sub	objptr, ##1536
07488     F2 2E 02 F1 | 	add	local09, objptr
0748c     17 27 62 FC | 	wrlong	local05, local09
07490     03 00 00 FF 
07494     00 E4 05 F1 | 	add	objptr, ##1536
07498     F2 32 02 FB | 	rdlong	local11, objptr
0749c     19 31 02 F6 | 	mov	local10, local11
074a0     01 30 66 F0 | 	shl	local10, #1
074a4     19 31 02 F1 | 	add	local10, local11
074a8     02 30 66 F0 | 	shl	local10, #2
074ac     03 00 00 FF 
074b0     00 E4 85 F1 | 	sub	objptr, ##1536
074b4     F2 30 02 F1 | 	add	local10, objptr
074b8     04 30 06 F1 | 	add	local10, #4
074bc     18 29 62 FC | 	wrlong	local06, local10
074c0     03 00 00 FF 
074c4     00 E4 05 F1 | 	add	objptr, ##1536
074c8     F2 26 02 FB | 	rdlong	local05, objptr
074cc     13 33 02 F6 | 	mov	local11, local05
074d0     01 32 66 F0 | 	shl	local11, #1
074d4     13 33 02 F1 | 	add	local11, local05
074d8     02 32 66 F0 | 	shl	local11, #2
074dc     03 00 00 FF 
074e0     00 E4 85 F1 | 	sub	objptr, ##1536
074e4     F2 32 02 F1 | 	add	local11, objptr
074e8     08 32 06 F1 | 	add	local11, #8
074ec     19 2B 62 FC | 	wrlong	local07, local11
074f0     03 00 00 FF 
074f4     00 E4 05 F1 | 	add	objptr, ##1536
074f8     F2 26 02 FB | 	rdlong	local05, objptr
074fc     01 26 06 F1 | 	add	local05, #1
07500     F2 26 62 FC | 	wrlong	local05, objptr
07504     44 22 06 F6 | 	mov	local03, #68
07508     0F 27 02 F6 | 	mov	local05, local01
0750c     10 29 02 F6 | 	mov	local06, local02
07510     11 2B 02 F6 | 	mov	local07, local03
07514     F2 2C 02 FB | 	rdlong	local08, objptr
07518     16 2F 02 F6 | 	mov	local09, local08
0751c     01 2E 66 F0 | 	shl	local09, #1
07520     16 2F 02 F1 | 	add	local09, local08
07524     02 2E 66 F0 | 	shl	local09, #2
07528     03 00 00 FF 
0752c     00 E4 85 F1 | 	sub	objptr, ##1536
07530     F2 2E 02 F1 | 	add	local09, objptr
07534     17 27 62 FC | 	wrlong	local05, local09
07538     03 00 00 FF 
0753c     00 E4 05 F1 | 	add	objptr, ##1536
07540     F2 32 02 FB | 	rdlong	local11, objptr
07544     19 31 02 F6 | 	mov	local10, local11
07548     01 30 66 F0 | 	shl	local10, #1
0754c     19 31 02 F1 | 	add	local10, local11
07550     02 30 66 F0 | 	shl	local10, #2
07554     03 00 00 FF 
07558     00 E4 85 F1 | 	sub	objptr, ##1536
0755c     F2 30 02 F1 | 	add	local10, objptr
07560     04 30 06 F1 | 	add	local10, #4
07564     18 29 62 FC | 	wrlong	local06, local10
07568     03 00 00 FF 
0756c     00 E4 05 F1 | 	add	objptr, ##1536
07570     F2 30 02 FB | 	rdlong	local10, objptr
07574     18 33 02 F6 | 	mov	local11, local10
07578     01 32 66 F0 | 	shl	local11, #1
0757c     18 33 02 F1 | 	add	local11, local10
07580     02 32 66 F0 | 	shl	local11, #2
07584     03 00 00 FF 
07588     00 E4 85 F1 | 	sub	objptr, ##1536
0758c     F2 32 02 F1 | 	add	local11, objptr
07590     08 32 06 F1 | 	add	local11, #8
07594     19 2B 62 FC | 	wrlong	local07, local11
07598     03 00 00 FF 
0759c     00 E4 05 F1 | 	add	objptr, ##1536
075a0     F2 26 02 FB | 	rdlong	local05, objptr
075a4     01 26 06 F1 | 	add	local05, #1
075a8     F2 26 62 FC | 	wrlong	local05, objptr
075ac     6A 00 00 FF 
075b0     7C E4 85 F1 | 	sub	objptr, ##54396
075b4                 | LR__0663
075b4                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
075b4     57 00 00 FF 
075b8     44 E4 05 F1 | 	add	objptr, ##44612
075bc     F2 24 02 FB | 	rdlong	local04, objptr
075c0     03 24 66 F0 | 	shl	local04, #3
075c4     02 00 00 FF 
075c8     38 E4 85 F1 | 	sub	objptr, ##1080
075cc     F2 24 02 F1 | 	add	local04, objptr
075d0     04 24 06 F1 | 	add	local04, #4
075d4     12 2D 02 FB | 	rdlong	local08, local04
075d8     FE 2D 0E F2 | 	cmp	local08, #510 wz
075dc     55 00 00 FF 
075e0     0C E4 85 F1 | 	sub	objptr, ##43532
075e4     B8 00 90 5D |  if_ne	jmp	#LR__0664
075e8     44 22 06 F6 | 	mov	local03, #68
075ec     0F 27 02 F6 | 	mov	local05, local01
075f0     10 29 02 F6 | 	mov	local06, local02
075f4     11 2B 02 F6 | 	mov	local07, local03
075f8     6A 00 00 FF 
075fc     7C E4 05 F1 | 	add	objptr, ##54396
07600     F2 2C 02 FB | 	rdlong	local08, objptr
07604     16 2F 02 F6 | 	mov	local09, local08
07608     01 2E 66 F0 | 	shl	local09, #1
0760c     16 2F 02 F1 | 	add	local09, local08
07610     02 2E 66 F0 | 	shl	local09, #2
07614     03 00 00 FF 
07618     00 E4 85 F1 | 	sub	objptr, ##1536
0761c     F2 2E 02 F1 | 	add	local09, objptr
07620     17 27 62 FC | 	wrlong	local05, local09
07624     03 00 00 FF 
07628     00 E4 05 F1 | 	add	objptr, ##1536
0762c     F2 32 02 FB | 	rdlong	local11, objptr
07630     19 31 02 F6 | 	mov	local10, local11
07634     01 30 66 F0 | 	shl	local10, #1
07638     19 31 02 F1 | 	add	local10, local11
0763c     02 30 66 F0 | 	shl	local10, #2
07640     03 00 00 FF 
07644     00 E4 85 F1 | 	sub	objptr, ##1536
07648     F2 30 02 F1 | 	add	local10, objptr
0764c     04 30 06 F1 | 	add	local10, #4
07650     18 29 62 FC | 	wrlong	local06, local10
07654     03 00 00 FF 
07658     00 E4 05 F1 | 	add	objptr, ##1536
0765c     F2 30 02 FB | 	rdlong	local10, objptr
07660     18 33 02 F6 | 	mov	local11, local10
07664     01 32 66 F0 | 	shl	local11, #1
07668     18 33 02 F1 | 	add	local11, local10
0766c     02 32 66 F0 | 	shl	local11, #2
07670     03 00 00 FF 
07674     00 E4 85 F1 | 	sub	objptr, ##1536
07678     F2 32 02 F1 | 	add	local11, objptr
0767c     08 32 06 F1 | 	add	local11, #8
07680     19 2B 62 FC | 	wrlong	local07, local11
07684     03 00 00 FF 
07688     00 E4 05 F1 | 	add	objptr, ##1536
0768c     F2 26 02 FB | 	rdlong	local05, objptr
07690     01 26 06 F1 | 	add	local05, #1
07694     F2 26 62 FC | 	wrlong	local05, objptr
07698     6A 00 00 FF 
0769c     7C E4 85 F1 | 	sub	objptr, ##54396
076a0                 | LR__0664
076a0                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
076a0     57 00 00 FF 
076a4     44 E4 05 F1 | 	add	objptr, ##44612
076a8     F2 24 02 FB | 	rdlong	local04, objptr
076ac     03 24 66 F0 | 	shl	local04, #3
076b0     02 00 00 FF 
076b4     38 E4 85 F1 | 	sub	objptr, ##1080
076b8     F2 24 02 F1 | 	add	local04, objptr
076bc     04 24 06 F1 | 	add	local04, #4
076c0     12 2D 02 FB | 	rdlong	local08, local04
076c4     11 2C 0E F2 | 	cmp	local08, #17 wz
076c8     55 00 00 FF 
076cc     0C E4 85 F1 | 	sub	objptr, ##43532
076d0     6C 00 90 AD |  if_e	jmp	#LR__0665
076d4     57 00 00 FF 
076d8     44 E4 05 F1 | 	add	objptr, ##44612
076dc     F2 2C 02 FB | 	rdlong	local08, objptr
076e0     03 2C 66 F0 | 	shl	local08, #3
076e4     02 00 00 FF 
076e8     38 E4 85 F1 | 	sub	objptr, ##1080
076ec     F2 2C 02 F1 | 	add	local08, objptr
076f0     04 2C 06 F1 | 	add	local08, #4
076f4     16 2D 02 FB | 	rdlong	local08, local08
076f8     12 2C 0E F2 | 	cmp	local08, #18 wz
076fc     55 00 00 FF 
07700     0C E4 85 F1 | 	sub	objptr, ##43532
07704     38 00 90 AD |  if_e	jmp	#LR__0665
07708     57 00 00 FF 
0770c     44 E4 05 F1 | 	add	objptr, ##44612
07710     F2 32 02 FB | 	rdlong	local11, objptr
07714     03 32 66 F0 | 	shl	local11, #3
07718     02 00 00 FF 
0771c     38 E4 85 F1 | 	sub	objptr, ##1080
07720     F2 32 02 F1 | 	add	local11, objptr
07724     04 32 06 F1 | 	add	local11, #4
07728     19 33 02 FB | 	rdlong	local11, local11
0772c     FE 33 0E F2 | 	cmp	local11, #510 wz
07730     55 00 00 FF 
07734     0C E4 85 F1 | 	sub	objptr, ##43532
07738     16 FA 05 56 |  if_ne	mov	result1, #22
0773c     68 00 90 5D |  if_ne	jmp	#LR__0667
07740                 | LR__0665
07740     57 00 00 FF 
07744     44 E4 05 F1 | 	add	objptr, ##44612
07748     F2 24 02 FB | 	rdlong	local04, objptr
0774c     01 24 06 F1 | 	add	local04, #1
07750     F2 24 62 FC | 	wrlong	local04, objptr
07754     03 24 66 F0 | 	shl	local04, #3
07758     02 00 00 FF 
0775c     38 E4 85 F1 | 	sub	objptr, ##1080
07760     F2 24 02 F1 | 	add	local04, objptr
07764     04 24 06 F1 | 	add	local04, #4
07768     12 2D 02 FB | 	rdlong	local08, local04
0776c     FE 2D 0E F2 | 	cmp	local08, #510 wz
07770     55 00 00 FF 
07774     0C E4 85 F1 | 	sub	objptr, ##43532
07778     28 00 90 AD |  if_e	jmp	#LR__0666
0777c     57 00 00 FF 
07780     44 E4 05 F1 | 	add	objptr, ##44612
07784     F2 32 02 FB | 	rdlong	local11, objptr
07788     0E 00 00 FF 
0778c     1C E4 05 F1 | 	add	objptr, ##7196
07790     F2 30 02 FB | 	rdlong	local10, objptr
07794     65 00 00 FF 
07798     60 E4 85 F1 | 	sub	objptr, ##51808
0779c     18 33 52 F2 | 	cmps	local11, local10 wc
077a0     E4 FA 9F CD |  if_b	jmp	#LR__0661
077a4                 | LR__0666
077a4                 | ' return 0
077a4     00 FA 05 F6 | 	mov	result1, #0
077a8                 | LR__0667
077a8     A7 F0 03 F6 | 	mov	ptra, fp
077ac     B2 00 A0 FD | 	call	#popregs_
077b0                 | _compile_print_ret
077b0     2D 00 64 FD | 	ret
077b4                 | 
077b4                 | ' 
077b4                 | ' function compile_if() as ulong  
077b4                 | _compile_if
077b4     05 4A 05 F6 | 	mov	COUNT_, #5
077b8     A8 00 A0 FD | 	call	#pushregs_
077bc                 | _compile_if_enter
077bc     60 1A B0 FD | 	call	#_expr
077c0                 | ' expr()
077c0                 | ' return 0
077c0     57 00 00 FF 
077c4     44 E4 05 F1 | 	add	objptr, ##44612
077c8     F2 FA 01 FB | 	rdlong	result1, objptr
077cc     01 FA 05 F1 | 	add	result1, #1
077d0     F2 FA 61 FC | 	wrlong	result1, objptr
077d4     58 22 06 F6 | 	mov	local03, #88
077d8     0F 25 02 F6 | 	mov	local04, local01
077dc     10 27 02 F6 | 	mov	local05, local02
077e0     11 1F 02 F6 | 	mov	local01, local03
077e4     13 00 00 FF 
077e8     38 E4 05 F1 | 	add	objptr, ##9784
077ec     F2 12 02 FB | 	rdlong	arg01, objptr
077f0     09 FB 01 F6 | 	mov	result1, arg01
077f4     01 FA 65 F0 | 	shl	result1, #1
077f8     09 FB 01 F1 | 	add	result1, arg01
077fc     02 FA 65 F0 | 	shl	result1, #2
07800     03 00 00 FF 
07804     00 E4 85 F1 | 	sub	objptr, ##1536
07808     F2 FA 01 F1 | 	add	result1, objptr
0780c     FD 24 62 FC | 	wrlong	local04, result1
07810     03 00 00 FF 
07814     00 E4 05 F1 | 	add	objptr, ##1536
07818     F2 12 02 FB | 	rdlong	arg01, objptr
0781c     09 25 02 F6 | 	mov	local04, arg01
07820     01 24 66 F0 | 	shl	local04, #1
07824     09 25 02 F1 | 	add	local04, arg01
07828     02 24 66 F0 | 	shl	local04, #2
0782c     03 00 00 FF 
07830     00 E4 85 F1 | 	sub	objptr, ##1536
07834     F2 24 02 F1 | 	add	local04, objptr
07838     04 24 06 F1 | 	add	local04, #4
0783c     12 27 62 FC | 	wrlong	local05, local04
07840     03 00 00 FF 
07844     00 E4 05 F1 | 	add	objptr, ##1536
07848     F2 24 02 FB | 	rdlong	local04, objptr
0784c     12 27 02 F6 | 	mov	local05, local04
07850     01 26 66 F0 | 	shl	local05, #1
07854     12 27 02 F1 | 	add	local05, local04
07858     02 26 66 F0 | 	shl	local05, #2
0785c     03 00 00 FF 
07860     00 E4 85 F1 | 	sub	objptr, ##1536
07864     F2 26 02 F1 | 	add	local05, objptr
07868     08 26 06 F1 | 	add	local05, #8
0786c     13 1F 62 FC | 	wrlong	local01, local05
07870     03 00 00 FF 
07874     00 E4 05 F1 | 	add	objptr, ##1536
07878     F2 24 02 FB | 	rdlong	local04, objptr
0787c     01 24 06 F1 | 	add	local04, #1
07880     F2 24 62 FC | 	wrlong	local04, objptr
07884                 | ' 
07884                 | ' 'print "In compile_if"
07884                 | ' compile_fun_1p()
07884                 | ' cmd=lparts(ct).token : ct+=1
07884                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
07884                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
07884                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
07884     13 00 00 FF 
07888     38 E4 85 F1 | 	sub	objptr, ##9784
0788c     F2 26 02 FB | 	rdlong	local05, objptr
07890     01 26 06 F1 | 	add	local05, #1
07894     03 26 66 F0 | 	shl	local05, #3
07898     02 00 00 FF 
0789c     38 E4 85 F1 | 	sub	objptr, ##1080
078a0     F2 26 02 F1 | 	add	local05, objptr
078a4     13 13 02 FB | 	rdlong	arg01, local05
078a8     55 00 00 FF 
078ac     0C E4 85 F1 | 	sub	objptr, ##43532
078b0                 | ' 
078b0                 | ' select case s
078b0     71 01 00 FF 
078b4     D0 14 06 F6 | 	mov	arg02, ##@LR__4902
078b8     84 72 B1 FD | 	call	#__system___string_cmp
078bc     00 FA 0D F2 | 	cmp	result1, #0 wz
078c0     1B FA 05 A6 |  if_e	mov	result1, #27
078c4     00 FA 05 56 |  if_ne	mov	result1, #0
078c8     00 FA 0D F2 | 	cmp	result1, #0 wz
078cc     0C 00 90 AD |  if_e	jmp	#LR__0670
078d0     05 12 06 F6 | 	mov	arg01, #5
078d4     88 ED BF FD | 	call	#_compile_immediate_assign
078d8     08 00 90 FD | 	jmp	#LR__0671
078dc                 | LR__0670
078dc     05 12 06 F6 | 	mov	arg01, #5
078e0     80 E3 BF FD | 	call	#_compile_immediate
078e4                 | LR__0671
078e4                 | ' 
078e4                 | ' 
078e4                 | ' return 0
078e4     00 FA 05 F6 | 	mov	result1, #0
078e8     A7 F0 03 F6 | 	mov	ptra, fp
078ec     B2 00 A0 FD | 	call	#popregs_
078f0                 | _compile_if_ret
078f0     2D 00 64 FD | 	ret
078f4                 | 
078f4                 | ' 
078f4                 | ' function compile_else() as ulong  
078f4                 | _compile_else
078f4     05 4A 05 F6 | 	mov	COUNT_, #5
078f8     A8 00 A0 FD | 	call	#pushregs_
078fc                 | _compile_else_enter
078fc     5A 22 06 F6 | 	mov	local03, #90
07900     0F 25 02 F6 | 	mov	local04, local01
07904     10 27 02 F6 | 	mov	local05, local02
07908     11 1F 02 F6 | 	mov	local01, local03
0790c     6A 00 00 FF 
07910     7C E4 05 F1 | 	add	objptr, ##54396
07914     F2 12 02 FB | 	rdlong	arg01, objptr
07918     09 FB 01 F6 | 	mov	result1, arg01
0791c     01 FA 65 F0 | 	shl	result1, #1
07920     09 FB 01 F1 | 	add	result1, arg01
07924     02 FA 65 F0 | 	shl	result1, #2
07928     03 00 00 FF 
0792c     00 E4 85 F1 | 	sub	objptr, ##1536
07930     F2 FA 01 F1 | 	add	result1, objptr
07934     FD 24 62 FC | 	wrlong	local04, result1
07938     03 00 00 FF 
0793c     00 E4 05 F1 | 	add	objptr, ##1536
07940     F2 FA 01 FB | 	rdlong	result1, objptr
07944     FD 24 02 F6 | 	mov	local04, result1
07948     01 24 66 F0 | 	shl	local04, #1
0794c     FD 24 02 F1 | 	add	local04, result1
07950     02 24 66 F0 | 	shl	local04, #2
07954     03 00 00 FF 
07958     00 E4 85 F1 | 	sub	objptr, ##1536
0795c     F2 24 02 F1 | 	add	local04, objptr
07960     04 24 06 F1 | 	add	local04, #4
07964     12 27 62 FC | 	wrlong	local05, local04
07968     03 00 00 FF 
0796c     00 E4 05 F1 | 	add	objptr, ##1536
07970     F2 24 02 FB | 	rdlong	local04, objptr
07974     12 27 02 F6 | 	mov	local05, local04
07978     01 26 66 F0 | 	shl	local05, #1
0797c     12 27 02 F1 | 	add	local05, local04
07980     02 26 66 F0 | 	shl	local05, #2
07984     03 00 00 FF 
07988     00 E4 85 F1 | 	sub	objptr, ##1536
0798c     F2 26 02 F1 | 	add	local05, objptr
07990     08 26 06 F1 | 	add	local05, #8
07994     13 1F 62 FC | 	wrlong	local01, local05
07998     03 00 00 FF 
0799c     00 E4 05 F1 | 	add	objptr, ##1536
079a0     F2 24 02 FB | 	rdlong	local04, objptr
079a4     01 24 06 F1 | 	add	local04, #1
079a8     F2 24 62 FC | 	wrlong	local04, objptr
079ac                 | ' 
079ac                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
079ac                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
079ac     13 00 00 FF 
079b0     38 E4 85 F1 | 	sub	objptr, ##9784
079b4     F2 26 02 FB | 	rdlong	local05, objptr
079b8     01 26 06 F1 | 	add	local05, #1
079bc     03 26 66 F0 | 	shl	local05, #3
079c0     02 00 00 FF 
079c4     38 E4 85 F1 | 	sub	objptr, ##1080
079c8     F2 26 02 F1 | 	add	local05, objptr
079cc     13 13 02 FB | 	rdlong	arg01, local05
079d0     55 00 00 FF 
079d4     0C E4 85 F1 | 	sub	objptr, ##43532
079d8                 | ' 
079d8                 | ' select case s
079d8     71 01 00 FF 
079dc     D0 14 06 F6 | 	mov	arg02, ##@LR__4902
079e0     5C 71 B1 FD | 	call	#__system___string_cmp
079e4     00 FA 0D F2 | 	cmp	result1, #0 wz
079e8     1B FA 05 A6 |  if_e	mov	result1, #27
079ec     00 FA 05 56 |  if_ne	mov	result1, #0
079f0     00 FA 0D F2 | 	cmp	result1, #0 wz
079f4     0C 00 90 AD |  if_e	jmp	#LR__0680
079f8     05 12 06 F6 | 	mov	arg01, #5
079fc     60 EC BF FD | 	call	#_compile_immediate_assign
07a00     08 00 90 FD | 	jmp	#LR__0681
07a04                 | LR__0680
07a04     05 12 06 F6 | 	mov	arg01, #5
07a08     58 E2 BF FD | 	call	#_compile_immediate
07a0c                 | LR__0681
07a0c                 | ' 
07a0c                 | ' 
07a0c                 | ' return 0
07a0c     00 FA 05 F6 | 	mov	result1, #0
07a10     A7 F0 03 F6 | 	mov	ptra, fp
07a14     B2 00 A0 FD | 	call	#popregs_
07a18                 | _compile_else_ret
07a18     2D 00 64 FD | 	ret
07a1c                 | 
07a1c                 | ' 
07a1c                 | ' 
07a1c                 | ' function compile_dim() as ulong  
07a1c                 | _compile_dim
07a1c     11 4A 05 F6 | 	mov	COUNT_, #17
07a20     A8 00 A0 FD | 	call	#pushregs_
07a24     01 1E 06 F6 | 	mov	local01, #1
07a28     01 20 06 F6 | 	mov	local02, #1
07a2c     01 22 06 F6 | 	mov	local03, #1
07a30                 | ' 
07a30                 | ' dims(0)=1: dims(1)=1: dims(2)=1
07a30                 | ' 
07a30                 | ' if isname(lparts(ct).part$) then 
07a30     57 00 00 FF 
07a34     44 E4 05 F1 | 	add	objptr, ##44612
07a38     F2 18 02 FB | 	rdlong	arg04, objptr
07a3c     03 18 66 F0 | 	shl	arg04, #3
07a40     02 00 00 FF 
07a44     38 E4 85 F1 | 	sub	objptr, ##1080
07a48     F2 18 02 F1 | 	add	arg04, objptr
07a4c     0C 13 02 FB | 	rdlong	arg01, arg04
07a50     55 00 00 FF 
07a54     0C E4 85 F1 | 	sub	objptr, ##43532
07a58     BC D2 BF FD | 	call	#_isname
07a5c     00 FA 0D F2 | 	cmp	result1, #0 wz
07a60     AC 05 90 AD |  if_e	jmp	#LR__0714
07a64     57 00 00 FF 
07a68     44 E4 05 F1 | 	add	objptr, ##44612
07a6c     F2 24 02 FB | 	rdlong	local04, objptr
07a70     03 24 66 F0 | 	shl	local04, #3
07a74     02 00 00 FF 
07a78     38 E4 85 F1 | 	sub	objptr, ##1080
07a7c     F2 24 02 F1 | 	add	local04, objptr
07a80     12 27 02 FB | 	rdlong	local05, local04
07a84     01 28 66 F6 | 	neg	local06, #1
07a88                 | '   varname2$=lparts(ct).part$ 
07a88                 | '   j=-1
07a88                 | '   if varnum>0 then
07a88     04 E4 85 F1 | 	sub	objptr, #4
07a8c     F2 2A 02 FB | 	rdlong	local07, objptr
07a90     55 00 00 FF 
07a94     08 E4 85 F1 | 	sub	objptr, ##43528
07a98     01 2A 56 F2 | 	cmps	local07, #1 wc
07a9c     58 00 90 CD |  if_b	jmp	#LR__0692
07aa0                 | '  '   print "in dim, varnum=";varnum
07aa0                 | '     for i=0 to varnum-1
07aa0     00 2C 06 F6 | 	mov	local08, #0
07aa4     55 00 00 FF 
07aa8     08 E4 05 F1 | 	add	objptr, ##43528
07aac     F2 2E 02 FB | 	rdlong	local09, objptr
07ab0     55 00 00 FF 
07ab4     08 E4 85 F1 | 	sub	objptr, ##43528
07ab8                 | LR__0690
07ab8     17 2D 52 F2 | 	cmps	local08, local09 wc
07abc     38 00 90 3D |  if_ae	jmp	#LR__0691
07ac0                 | '       if variables(i).name=varname2$ then j=i : exit
07ac0     16 25 02 F6 | 	mov	local04, local08
07ac4     04 24 66 F0 | 	shl	local04, #4
07ac8     34 00 00 FF 
07acc     F8 E5 05 F1 | 	add	objptr, ##27128
07ad0     F2 24 02 F1 | 	add	local04, objptr
07ad4     12 13 02 FB | 	rdlong	arg01, local04
07ad8     13 15 02 F6 | 	mov	arg02, local05
07adc     34 00 00 FF 
07ae0     F8 E5 85 F1 | 	sub	objptr, ##27128
07ae4     58 70 B1 FD | 	call	#__system___string_cmp
07ae8     00 FA 0D F2 | 	cmp	result1, #0 wz
07aec     16 29 02 A6 |  if_e	mov	local06, local08
07af0     01 2C 06 51 |  if_ne	add	local08, #1
07af4     C0 FF 9F 5D |  if_ne	jmp	#LR__0690
07af8                 | LR__0691
07af8                 | LR__0692
07af8                 | ' '  if j<>-1 then printerror (42) : return 42
07af8                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
07af8     FF FF 7F FF 
07afc     FF 29 0E F2 | 	cmp	local06, ##-1 wz
07b00     55 00 00 AF 
07b04     08 E4 05 A1 |  if_e	add	objptr, ##43528
07b08     F2 28 02 AB |  if_e	rdlong	local06, objptr
07b0c     55 00 00 AF 
07b10     08 E4 85 A1 |  if_e	sub	objptr, ##43528
07b14     78 00 90 AD |  if_e	jmp	#LR__0693
07b18     00 12 06 F6 | 	mov	arg01, #0
07b1c     90 C9 B1 FD | 	call	#__system___getiolock_0484
07b20     FD 12 02 F6 | 	mov	arg01, result1
07b24     F0 6F B1 FD | 	call	#__system___lockmem
07b28     73 01 00 FF 
07b2c     29 14 06 F6 | 	mov	arg02, ##@LR__5089
07b30     00 12 06 F6 | 	mov	arg01, #0
07b34     00 16 06 F6 | 	mov	arg03, #0
07b38     E4 7C B1 FD | 	call	#__system___basic_print_string
07b3c     79 00 00 FF 
07b40     A0 E5 05 F1 | 	add	objptr, ##62368
07b44     F2 14 02 FB | 	rdlong	arg02, objptr
07b48     79 00 00 FF 
07b4c     A0 E5 85 F1 | 	sub	objptr, ##62368
07b50     00 12 06 F6 | 	mov	arg01, #0
07b54     00 16 06 F6 | 	mov	arg03, #0
07b58     0A 18 06 F6 | 	mov	arg04, #10
07b5c     44 7D B1 FD | 	call	#__system___basic_print_unsigned
07b60     73 01 00 FF 
07b64     37 14 06 F6 | 	mov	arg02, ##@LR__5090
07b68     00 12 06 F6 | 	mov	arg01, #0
07b6c     00 16 06 F6 | 	mov	arg03, #0
07b70     AC 7C B1 FD | 	call	#__system___basic_print_string
07b74     00 12 06 F6 | 	mov	arg01, #0
07b78     0A 14 06 F6 | 	mov	arg02, #10
07b7c     00 16 06 F6 | 	mov	arg03, #0
07b80     44 7C B1 FD | 	call	#__system___basic_print_char
07b84     00 12 06 F6 | 	mov	arg01, #0
07b88     24 C9 B1 FD | 	call	#__system___getiolock_0484
07b8c     FD 00 68 FC | 	wrlong	#0, result1
07b90                 | LR__0693
07b90                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then printerror(43) : return 43
07b90     57 00 00 FF 
07b94     44 E4 05 F1 | 	add	objptr, ##44612
07b98     F2 18 02 FB | 	rdlong	arg04, objptr
07b9c     01 18 06 F1 | 	add	arg04, #1
07ba0     03 18 66 F0 | 	shl	arg04, #3
07ba4     02 00 00 FF 
07ba8     38 E4 85 F1 | 	sub	objptr, ##1080
07bac     F2 18 02 F1 | 	add	arg04, objptr
07bb0     0C 13 02 FB | 	rdlong	arg01, arg04
07bb4     73 01 00 FF 
07bb8     58 14 06 F6 | 	mov	arg02, ##@LR__5091
07bbc     55 00 00 FF 
07bc0     0C E4 85 F1 | 	sub	objptr, ##43532
07bc4     78 6F B1 FD | 	call	#__system___string_cmp
07bc8     00 FA 0D F2 | 	cmp	result1, #0 wz
07bcc     50 00 90 AD |  if_e	jmp	#LR__0694
07bd0     57 00 00 FF 
07bd4     44 E4 05 F1 | 	add	objptr, ##44612
07bd8     F2 2E 02 FB | 	rdlong	local09, objptr
07bdc     01 2E 06 F1 | 	add	local09, #1
07be0     03 2E 66 F0 | 	shl	local09, #3
07be4     02 00 00 FF 
07be8     38 E4 85 F1 | 	sub	objptr, ##1080
07bec     F2 2E 02 F1 | 	add	local09, objptr
07bf0     17 13 02 FB | 	rdlong	arg01, local09
07bf4     73 01 00 FF 
07bf8     5A 14 06 F6 | 	mov	arg02, ##@LR__5092
07bfc     55 00 00 FF 
07c00     0C E4 85 F1 | 	sub	objptr, ##43532
07c04     38 6F B1 FD | 	call	#__system___string_cmp
07c08     00 FA 0D F2 | 	cmp	result1, #0 wz
07c0c     10 00 90 AD |  if_e	jmp	#LR__0694
07c10     2B 12 06 F6 | 	mov	arg01, #43
07c14     84 2A B1 FD | 	call	#_printerror
07c18     2B FA 05 F6 | 	mov	result1, #43
07c1c     00 05 90 FD | 	jmp	#LR__0716
07c20                 | LR__0694
07c20                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350
07c20     57 00 00 FF 
07c24     44 E4 05 F1 | 	add	objptr, ##44612
07c28     F2 14 02 FB | 	rdlong	arg02, objptr
07c2c     01 14 06 F1 | 	add	arg02, #1
07c30     03 14 66 F0 | 	shl	arg02, #3
07c34     02 00 00 FF 
07c38     38 E4 85 F1 | 	sub	objptr, ##1080
07c3c     F2 14 02 F1 | 	add	arg02, objptr
07c40     0A 13 02 FB | 	rdlong	arg01, arg02
07c44     73 01 00 FF 
07c48     5D 14 06 F6 | 	mov	arg02, ##@LR__5093
07c4c     55 00 00 FF 
07c50     0C E4 85 F1 | 	sub	objptr, ##43532
07c54     E8 6E B1 FD | 	call	#__system___string_cmp
07c58     00 FA 0D F2 | 	cmp	result1, #0 wz
07c5c     57 00 00 AF 
07c60     44 E4 05 A1 |  if_e	add	objptr, ##44612
07c64     F2 30 02 AB |  if_e	rdlong	local10, objptr
07c68     57 00 00 AF 
07c6c     44 E4 85 A1 |  if_e	sub	objptr, ##44612
07c70     01 30 06 A1 |  if_e	add	local10, #1
07c74     7C 01 90 AD |  if_e	jmp	#LR__0700
07c78     57 00 00 FF 
07c7c     44 E4 05 F1 | 	add	objptr, ##44612
07c80     F2 30 02 FB | 	rdlong	local10, objptr
07c84     57 00 00 FF 
07c88     44 E4 85 F1 | 	sub	objptr, ##44612
07c8c     02 30 06 F1 | 	add	local10, #2
07c90     00 32 06 F6 | 	mov	local11, #0
07c94                 | '   l=ct+2 : m=0 : do
07c94                 | LR__0695
07c94                 | '    ' print "in dim, lparts: ";lparts(l).part$, isdec(lparts(l).part$)
07c94                 | '     if isdec(lparts(l).part$) then 
07c94     18 25 02 F6 | 	mov	local04, local10
07c98     03 24 66 F0 | 	shl	local04, #3
07c9c     55 00 00 FF 
07ca0     0C E4 05 F1 | 	add	objptr, ##43532
07ca4     F2 24 02 F1 | 	add	local04, objptr
07ca8     12 13 02 FB | 	rdlong	arg01, local04
07cac     55 00 00 FF 
07cb0     0C E4 85 F1 | 	sub	objptr, ##43532
07cb4     04 D7 BF FD | 	call	#_isdec
07cb8     00 FA 0D F2 | 	cmp	result1, #0 wz
07cbc     44 00 90 AD |  if_e	jmp	#LR__0696
07cc0     19 35 02 F6 | 	mov	local12, local11
07cc4     0F 35 06 F1 | 	add	local12, #local01
07cc8     18 2F 02 F6 | 	mov	local09, local10
07ccc     03 2E 66 F0 | 	shl	local09, #3
07cd0     55 00 00 FF 
07cd4     0C E4 05 F1 | 	add	objptr, ##43532
07cd8     F2 2E 02 F1 | 	add	local09, objptr
07cdc     17 13 02 FB | 	rdlong	arg01, local09
07ce0     00 14 06 F6 | 	mov	arg02, #0
07ce4     55 00 00 FF 
07ce8     0C E4 85 F1 | 	sub	objptr, ##43532
07cec     20 A0 B1 FD | 	call	#__system____builtin_atoi
07cf0     FD 36 02 F6 | 	mov	local13, result1
07cf4                 | 	'.live	local13
07cf4                 | 	'.live	local12
07cf4     00 34 8E F9 | 	altd	local12, #0
07cf8     1B 35 02 F6 | 	mov	local12, local13
07cfc     01 32 06 F1 | 	add	local11, #1
07d00     10 00 90 FD | 	jmp	#LR__0697
07d04                 | LR__0696
07d04     11 12 06 F6 | 	mov	arg01, #17
07d08     90 29 B1 FD | 	call	#_printerror
07d0c                 | '       printerror (17)  : return(17)
07d0c     11 FA 05 F6 | 	mov	result1, #17
07d10     0C 04 90 FD | 	jmp	#LR__0716
07d14                 | LR__0697
07d14                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
07d14     18 25 02 F6 | 	mov	local04, local10
07d18     01 24 06 F1 | 	add	local04, #1
07d1c     03 24 66 F0 | 	shl	local04, #3
07d20     55 00 00 FF 
07d24     0C E4 05 F1 | 	add	objptr, ##43532
07d28     F2 24 02 F1 | 	add	local04, objptr
07d2c     12 13 02 FB | 	rdlong	arg01, local04
07d30     73 01 00 FF 
07d34     60 14 06 F6 | 	mov	arg02, ##@LR__5094
07d38     55 00 00 FF 
07d3c     0C E4 85 F1 | 	sub	objptr, ##43532
07d40     FC 6D B1 FD | 	call	#__system___string_cmp
07d44     00 FA 0D F2 | 	cmp	result1, #0 wz
07d48     48 00 90 AD |  if_e	jmp	#LR__0698
07d4c     18 37 02 F6 | 	mov	local13, local10
07d50     01 36 06 F1 | 	add	local13, #1
07d54     03 36 66 F0 | 	shl	local13, #3
07d58     55 00 00 FF 
07d5c     0C E4 05 F1 | 	add	objptr, ##43532
07d60     F2 36 02 F1 | 	add	local13, objptr
07d64     1B 13 02 FB | 	rdlong	arg01, local13
07d68     73 01 00 FF 
07d6c     62 14 06 F6 | 	mov	arg02, ##@LR__5095
07d70     55 00 00 FF 
07d74     0C E4 85 F1 | 	sub	objptr, ##43532
07d78     C4 6D B1 FD | 	call	#__system___string_cmp
07d7c     00 FA 0D F2 | 	cmp	result1, #0 wz
07d80     10 00 90 AD |  if_e	jmp	#LR__0698
07d84     2C 12 06 F6 | 	mov	arg01, #44
07d88     10 29 B1 FD | 	call	#_printerror
07d8c     2C FA 05 F6 | 	mov	result1, #44
07d90     8C 03 90 FD | 	jmp	#LR__0716
07d94                 | LR__0698
07d94     02 30 06 F1 | 	add	local10, #2
07d98     18 25 02 F6 | 	mov	local04, local10
07d9c     01 24 86 F1 | 	sub	local04, #1
07da0     03 24 66 F0 | 	shl	local04, #3
07da4     55 00 00 FF 
07da8     0C E4 05 F1 | 	add	objptr, ##43532
07dac     F2 24 02 F1 | 	add	local04, objptr
07db0     12 13 02 FB | 	rdlong	arg01, local04
07db4     73 01 00 FF 
07db8     64 14 06 F6 | 	mov	arg02, ##@LR__5096
07dbc     55 00 00 FF 
07dc0     0C E4 85 F1 | 	sub	objptr, ##43532
07dc4     78 6D B1 FD | 	call	#__system___string_cmp
07dc8     00 FA 0D F2 | 	cmp	result1, #0 wz
07dcc     03 32 56 52 |  if_ne	cmps	local11, #3 wc
07dd0     C0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0695
07dd4                 | '   if m>3 then printerror(45): return(45)
07dd4     04 32 56 F2 | 	cmps	local11, #4 wc
07dd8     10 00 90 CD |  if_b	jmp	#LR__0699
07ddc     2D 12 06 F6 | 	mov	arg01, #45
07de0     B8 28 B1 FD | 	call	#_printerror
07de4     2D FA 05 F6 | 	mov	result1, #45
07de8     34 03 90 FD | 	jmp	#LR__0716
07dec                 | LR__0699
07dec     00 39 06 F6 | 	mov	local14, #256
07df0     0C 3A 06 F6 | 	mov	local15, #12
07df4                 | LR__0700
07df4                 | '  ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' print lparts(l-1).part$,lparts(l).part$, lparts(l+1).part$
07df4                 | '   arraytype=array_no_type : esize=12
07df4                 | ' 1350 
07df4                 | '   if lparts(l).part$="as" then
07df4     18 25 02 F6 | 	mov	local04, local10
07df8     03 24 66 F0 | 	shl	local04, #3
07dfc     55 00 00 FF 
07e00     0C E4 05 F1 | 	add	objptr, ##43532
07e04     F2 24 02 F1 | 	add	local04, objptr
07e08     12 13 02 FB | 	rdlong	arg01, local04
07e0c     73 01 00 FF 
07e10     66 14 06 F6 | 	mov	arg02, ##@LR__5097
07e14     55 00 00 FF 
07e18     0C E4 85 F1 | 	sub	objptr, ##43532
07e1c     20 6D B1 FD | 	call	#__system___string_cmp
07e20     00 FA 0D F2 | 	cmp	result1, #0 wz
07e24     F8 01 90 5D |  if_ne	jmp	#LR__0715
07e28                 | '     select case lparts(l+1).part$
07e28     18 35 02 F6 | 	mov	local12, local10
07e2c     01 34 06 F1 | 	add	local12, #1
07e30     03 34 66 F0 | 	shl	local12, #3
07e34     55 00 00 FF 
07e38     0C E4 05 F1 | 	add	objptr, ##43532
07e3c     F2 34 02 F1 | 	add	local12, objptr
07e40     1A 3D 02 FB | 	rdlong	local16, local12
07e44     73 01 00 FF 
07e48     69 14 06 F6 | 	mov	arg02, ##@LR__5098
07e4c     1E 13 02 F6 | 	mov	arg01, local16
07e50     55 00 00 FF 
07e54     0C E4 85 F1 | 	sub	objptr, ##43532
07e58     E4 6C B1 FD | 	call	#__system___string_cmp
07e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
07e60     0C 01 90 AD |  if_e	jmp	#LR__0701
07e64     73 01 00 FF 
07e68     6E 14 06 F6 | 	mov	arg02, ##@LR__5099
07e6c     1E 13 02 F6 | 	mov	arg01, local16
07e70     CC 6C B1 FD | 	call	#__system___string_cmp
07e74     00 FA 0D F2 | 	cmp	result1, #0 wz
07e78     00 01 90 AD |  if_e	jmp	#LR__0702
07e7c     73 01 00 FF 
07e80     74 14 06 F6 | 	mov	arg02, ##@LR__5100
07e84     1E 13 02 F6 | 	mov	arg01, local16
07e88     B4 6C B1 FD | 	call	#__system___string_cmp
07e8c     00 FA 0D F2 | 	cmp	result1, #0 wz
07e90     F4 00 90 AD |  if_e	jmp	#LR__0703
07e94     73 01 00 FF 
07e98     7A 14 06 F6 | 	mov	arg02, ##@LR__5101
07e9c     1E 13 02 F6 | 	mov	arg01, local16
07ea0     9C 6C B1 FD | 	call	#__system___string_cmp
07ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
07ea8     E8 00 90 AD |  if_e	jmp	#LR__0704
07eac     73 01 00 FF 
07eb0     81 14 06 F6 | 	mov	arg02, ##@LR__5102
07eb4     1E 13 02 F6 | 	mov	arg01, local16
07eb8     84 6C B1 FD | 	call	#__system___string_cmp
07ebc     00 FA 0D F2 | 	cmp	result1, #0 wz
07ec0     DC 00 90 AD |  if_e	jmp	#LR__0705
07ec4     73 01 00 FF 
07ec8     86 14 06 F6 | 	mov	arg02, ##@LR__5103
07ecc     1E 13 02 F6 | 	mov	arg01, local16
07ed0     6C 6C B1 FD | 	call	#__system___string_cmp
07ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
07ed8     D0 00 90 AD |  if_e	jmp	#LR__0706
07edc     73 01 00 FF 
07ee0     8E 14 06 F6 | 	mov	arg02, ##@LR__5104
07ee4     1E 13 02 F6 | 	mov	arg01, local16
07ee8     54 6C B1 FD | 	call	#__system___string_cmp
07eec     00 FA 0D F2 | 	cmp	result1, #0 wz
07ef0     C4 00 90 AD |  if_e	jmp	#LR__0707
07ef4     73 01 00 FF 
07ef8     94 14 06 F6 | 	mov	arg02, ##@LR__5105
07efc     1E 13 02 F6 | 	mov	arg01, local16
07f00     3C 6C B1 FD | 	call	#__system___string_cmp
07f04     00 FA 0D F2 | 	cmp	result1, #0 wz
07f08     B8 00 90 AD |  if_e	jmp	#LR__0708
07f0c     73 01 00 FF 
07f10     9A 14 06 F6 | 	mov	arg02, ##@LR__5106
07f14     1E 13 02 F6 | 	mov	arg01, local16
07f18     24 6C B1 FD | 	call	#__system___string_cmp
07f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
07f20     AC 00 90 AD |  if_e	jmp	#LR__0709
07f24     73 01 00 FF 
07f28     A1 14 06 F6 | 	mov	arg02, ##@LR__5107
07f2c     1E 13 02 F6 | 	mov	arg01, local16
07f30     0C 6C B1 FD | 	call	#__system___string_cmp
07f34     00 FA 0D F2 | 	cmp	result1, #0 wz
07f38     A0 00 90 AD |  if_e	jmp	#LR__0710
07f3c     73 01 00 FF 
07f40     A8 14 06 F6 | 	mov	arg02, ##@LR__5108
07f44     1E 13 02 F6 | 	mov	arg01, local16
07f48     F4 6B B1 FD | 	call	#__system___string_cmp
07f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
07f50     94 00 90 AD |  if_e	jmp	#LR__0711
07f54     73 01 00 FF 
07f58     AF 14 06 F6 | 	mov	arg02, ##@LR__5109
07f5c     1E 13 02 F6 | 	mov	arg01, local16
07f60     DC 6B B1 FD | 	call	#__system___string_cmp
07f64     00 FA 0D F2 | 	cmp	result1, #0 wz
07f68     88 00 90 AD |  if_e	jmp	#LR__0712
07f6c     90 00 90 FD | 	jmp	#LR__0713
07f70                 | LR__0701
07f70     01 39 06 F6 | 	mov	local14, #257
07f74     01 3A 06 F6 | 	mov	local15, #1
07f78     A4 00 90 FD | 	jmp	#LR__0715
07f7c                 | LR__0702
07f7c     02 39 06 F6 | 	mov	local14, #258
07f80     01 3A 06 F6 | 	mov	local15, #1
07f84     98 00 90 FD | 	jmp	#LR__0715
07f88                 | LR__0703
07f88     03 39 06 F6 | 	mov	local14, #259
07f8c     02 3A 06 F6 | 	mov	local15, #2
07f90     8C 00 90 FD | 	jmp	#LR__0715
07f94                 | LR__0704
07f94     04 39 06 F6 | 	mov	local14, #260
07f98     02 3A 06 F6 | 	mov	local15, #2
07f9c     80 00 90 FD | 	jmp	#LR__0715
07fa0                 | LR__0705
07fa0     05 39 06 F6 | 	mov	local14, #261
07fa4     04 3A 06 F6 | 	mov	local15, #4
07fa8     74 00 90 FD | 	jmp	#LR__0715
07fac                 | LR__0706
07fac     05 39 06 F6 | 	mov	local14, #261
07fb0     04 3A 06 F6 | 	mov	local15, #4
07fb4     68 00 90 FD | 	jmp	#LR__0715
07fb8                 | LR__0707
07fb8     06 39 06 F6 | 	mov	local14, #262
07fbc     04 3A 06 F6 | 	mov	local15, #4
07fc0     5C 00 90 FD | 	jmp	#LR__0715
07fc4                 | LR__0708
07fc4     07 39 06 F6 | 	mov	local14, #263
07fc8     08 3A 06 F6 | 	mov	local15, #8
07fcc     50 00 90 FD | 	jmp	#LR__0715
07fd0                 | LR__0709
07fd0     08 39 06 F6 | 	mov	local14, #264
07fd4     08 3A 06 F6 | 	mov	local15, #8
07fd8     44 00 90 FD | 	jmp	#LR__0715
07fdc                 | LR__0710
07fdc     09 39 06 F6 | 	mov	local14, #265
07fe0     04 3A 06 F6 | 	mov	local15, #4
07fe4     38 00 90 FD | 	jmp	#LR__0715
07fe8                 | LR__0711
07fe8     0A 39 06 F6 | 	mov	local14, #266
07fec     08 3A 06 F6 | 	mov	local15, #8
07ff0     2C 00 90 FD | 	jmp	#LR__0715
07ff4                 | LR__0712
07ff4     0B 39 06 F6 | 	mov	local14, #267
07ff8     04 3A 06 F6 | 	mov	local15, #4
07ffc     20 00 90 FD | 	jmp	#LR__0715
08000                 | LR__0713
08000     2F 12 06 F6 | 	mov	arg01, #47
08004     94 26 B1 FD | 	call	#_printerror
08008     2F FA 05 F6 | 	mov	result1, #47
0800c     10 01 90 FD | 	jmp	#LR__0716
08010                 | LR__0714
08010     2E 12 06 F6 | 	mov	arg01, #46
08014     84 26 B1 FD | 	call	#_printerror
08018                 | '   printerror(46): return 46
08018     2E FA 05 F6 | 	mov	result1, #46
0801c     00 01 90 FD | 	jmp	#LR__0716
08020                 | LR__0715
08020     0F 3B 02 FD | 	qmul	local15, local01
08024     18 2A 62 FD | 	getqx	local07
08028     10 2B 02 FD | 	qmul	local07, local02
0802c     18 3C 62 FD | 	getqx	local16
08030     11 3D 02 FD | 	qmul	local16, local03
08034     79 00 00 FF 
08038     88 E5 05 F1 | 	add	objptr, ##62344
0803c     F2 3E 02 FB | 	rdlong	local17, objptr
08040     1C 15 02 F6 | 	mov	arg02, local14
08044     18 3C 62 FD | 	getqx	local16
08048     1E 3F 82 F1 | 	sub	local17, local16
0804c     10 3E 86 F1 | 	sub	local17, #16
08050     0F 3E 26 F5 | 	andn	local17, #15
08054     F2 3E 62 FC | 	wrlong	local17, objptr
08058     79 00 00 FF 
0805c     88 E5 85 F1 | 	sub	objptr, ##62344
08060     1F 13 02 F6 | 	mov	arg01, local17
08064     E0 27 B1 FD | 	call	#_psdpoke
08068     1F 13 02 F6 | 	mov	arg01, local17
0806c     02 12 06 F1 | 	add	arg01, #2
08070     1D 15 02 F6 | 	mov	arg02, local15
08074     D0 27 B1 FD | 	call	#_psdpoke
08078     1F 13 02 F6 | 	mov	arg01, local17
0807c     04 12 06 F1 | 	add	arg01, #4
08080     0F 15 02 F6 | 	mov	arg02, local01
08084     78 27 B1 FD | 	call	#_pslpoke
08088     1F 13 02 F6 | 	mov	arg01, local17
0808c     08 12 06 F1 | 	add	arg01, #8
08090     10 15 02 F6 | 	mov	arg02, local02
08094     68 27 B1 FD | 	call	#_pslpoke
08098     1F 13 02 F6 | 	mov	arg01, local17
0809c     0C 12 06 F1 | 	add	arg01, #12
080a0     11 15 02 F6 | 	mov	arg02, local03
080a4     58 27 B1 FD | 	call	#_pslpoke
080a8     14 35 02 F6 | 	mov	local12, local06
080ac     04 34 66 F0 | 	shl	local12, #4
080b0     34 00 00 FF 
080b4     F8 E5 05 F1 | 	add	objptr, ##27128
080b8     F2 34 02 F1 | 	add	local12, objptr
080bc     1A 27 62 FC | 	wrlong	local05, local12
080c0     14 35 02 F6 | 	mov	local12, local06
080c4     04 34 66 F0 | 	shl	local12, #4
080c8     F2 34 02 F1 | 	add	local12, objptr
080cc     04 34 06 F1 | 	add	local12, #4
080d0     1A 3F 62 FC | 	wrlong	local17, local12
080d4     14 35 02 F6 | 	mov	local12, local06
080d8     04 34 66 F0 | 	shl	local12, #4
080dc     F2 34 02 F1 | 	add	local12, objptr
080e0     0C 34 06 F1 | 	add	local12, #12
080e4     1A 39 62 FC | 	wrlong	local14, local12
080e8                 | ' memtop=arrayptr
080e8                 | ' 
080e8                 | ' psdpoke arrayptr,arraytype ': print arraytype, arrayptr
080e8                 | ' psdpoke arrayptr+2,esize ': print esize , psdpeek(arrayptr+2)
080e8                 | ' pslpoke arrayptr+4,dims(0)
080e8                 | ' pslpoke arrayptr+8,dims(1)
080e8                 | ' pslpoke arrayptr+12,dims(2)
080e8                 | ' 'for i=0 to 15: print hex$(pspeek(arrayptr+i),2), : next i
080e8                 | ' 'for i=0 to 3: print hex$(pslpeek(arrayptr+4*i),2), : next i
080e8                 | ' 
080e8                 | ' 
080e8                 | ' variables(j).name=varname2$
080e8                 | ' variables(j).value.uresult=arrayptr
080e8                 | ' variables(j).vartype=arraytype
080e8                 | ' if j=varnum then varnum+=1
080e8     20 00 00 FF 
080ec     10 E4 05 F1 | 	add	objptr, ##16400
080f0     F2 2A 02 FB | 	rdlong	local07, objptr
080f4     55 00 00 FF 
080f8     08 E4 85 F1 | 	sub	objptr, ##43528
080fc     15 29 0A F2 | 	cmp	local06, local07 wz
08100     55 00 00 AF 
08104     08 E4 05 A1 |  if_e	add	objptr, ##43528
08108     F2 2A 02 AB |  if_e	rdlong	local07, objptr
0810c     01 2A 06 A1 |  if_e	add	local07, #1
08110     F2 2A 62 AC |  if_e	wrlong	local07, objptr
08114     55 00 00 AF 
08118     08 E4 85 A1 |  if_e	sub	objptr, ##43528
0811c                 | ' 
0811c                 | ' return 0
0811c     00 FA 05 F6 | 	mov	result1, #0
08120                 | LR__0716
08120     A7 F0 03 F6 | 	mov	ptra, fp
08124     B2 00 A0 FD | 	call	#popregs_
08128                 | _compile_dim_ret
08128     2D 00 64 FD | 	ret
0812c                 | 
0812c                 | ' 
0812c                 | ' 
0812c                 | ' function compile_for() as ulong  
0812c                 | _compile_for
0812c     07 4A 05 F6 | 	mov	COUNT_, #7
08130     A8 00 A0 FD | 	call	#pushregs_
08134                 | ' 
08134                 | ' 
08134                 | ' 
08134                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
08134     57 00 00 FF 
08138     44 E4 05 F1 | 	add	objptr, ##44612
0813c     F2 14 02 FB | 	rdlong	arg02, objptr
08140     01 14 06 F1 | 	add	arg02, #1
08144     03 14 66 F0 | 	shl	arg02, #3
08148     02 00 00 FF 
0814c     38 E4 85 F1 | 	sub	objptr, ##1080
08150     F2 14 02 F1 | 	add	arg02, objptr
08154     0A 13 02 FB | 	rdlong	arg01, arg02
08158     55 00 00 FF 
0815c     0C E4 85 F1 | 	sub	objptr, ##43532
08160                 | ' 
08160                 | ' select case s
08160     71 01 00 FF 
08164     D0 14 06 F6 | 	mov	arg02, ##@LR__4902
08168     D4 69 B1 FD | 	call	#__system___string_cmp
0816c     00 FA 0D F2 | 	cmp	result1, #0 wz
08170     1B FA 05 A6 |  if_e	mov	result1, #27
08174     00 FA 05 56 |  if_ne	mov	result1, #0
08178     00 FA 0D F2 | 	cmp	result1, #0 wz
0817c     0C 00 90 AD |  if_e	jmp	#LR__0720
08180     05 12 06 F6 | 	mov	arg01, #5
08184     D8 E4 BF FD | 	call	#_compile_immediate_assign
08188     10 00 90 FD | 	jmp	#LR__0721
0818c                 | LR__0720
0818c     20 12 06 F6 | 	mov	arg01, #32
08190     48 E9 BF FD | 	call	#_compile_error
08194     20 FA 05 F6 | 	mov	result1, #32
08198     E8 02 90 FD | 	jmp	#LR__0727
0819c                 | LR__0721
0819c     6A 00 00 FF 
081a0     7C E4 05 F1 | 	add	objptr, ##54396
081a4     F2 12 02 FB | 	rdlong	arg01, objptr
081a8     09 25 02 F6 | 	mov	local04, arg01
081ac     01 24 86 F1 | 	sub	local04, #1
081b0     12 15 02 F6 | 	mov	arg02, local04
081b4     01 14 66 F0 | 	shl	arg02, #1
081b8     12 15 02 F1 | 	add	arg02, local04
081bc     02 14 66 F0 | 	shl	arg02, #2
081c0     03 00 00 FF 
081c4     00 E4 85 F1 | 	sub	objptr, ##1536
081c8     F2 14 02 F1 | 	add	arg02, objptr
081cc     0A 1F 02 FB | 	rdlong	local01, arg02
081d0     04 14 06 F1 | 	add	arg02, #4
081d4     0A 27 02 FB | 	rdlong	local05, arg02
081d8     01 12 86 F1 | 	sub	arg01, #1
081dc     09 29 02 F6 | 	mov	local06, arg01
081e0     01 28 66 F0 | 	shl	local06, #1
081e4     09 29 02 F1 | 	add	local06, arg01
081e8     02 28 66 F0 | 	shl	local06, #2
081ec     F2 28 02 F1 | 	add	local06, objptr
081f0     08 28 06 F1 | 	add	local06, #8
081f4     14 13 02 FB | 	rdlong	arg01, local06
081f8     13 21 02 F6 | 	mov	local02, local05
081fc     09 23 02 F6 | 	mov	local03, arg01
08200                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
08200                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
08200     17 22 0E F2 | 	cmp	local03, #23 wz
08204     67 00 00 FF 
08208     7C E4 85 F1 | 	sub	objptr, ##52860
0820c     10 00 90 AD |  if_e	jmp	#LR__0722
08210     22 12 06 F6 | 	mov	arg01, #34
08214     C4 E8 BF FD | 	call	#_compile_error
08218     22 FA 05 F6 | 	mov	result1, #34
0821c     64 02 90 FD | 	jmp	#LR__0727
08220                 | LR__0722
08220     0F 2B 02 F6 | 	mov	local07, local01
08224                 | ' varnum=t1.result.uresult
08224                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
08224     57 00 00 FF 
08228     44 E4 05 F1 | 	add	objptr, ##44612
0822c     F2 24 02 FB | 	rdlong	local04, objptr
08230     03 24 66 F0 | 	shl	local04, #3
08234     02 00 00 FF 
08238     38 E4 85 F1 | 	sub	objptr, ##1080
0823c     F2 24 02 F1 | 	add	local04, objptr
08240     12 13 02 FB | 	rdlong	arg01, local04
08244     73 01 00 FF 
08248     B6 14 06 F6 | 	mov	arg02, ##@LR__5110
0824c     55 00 00 FF 
08250     0C E4 85 F1 | 	sub	objptr, ##43532
08254     E8 68 B1 FD | 	call	#__system___string_cmp
08258     00 FA 0D F2 | 	cmp	result1, #0 wz
0825c     10 00 90 AD |  if_e	jmp	#LR__0723
08260     21 12 06 F6 | 	mov	arg01, #33
08264     74 E8 BF FD | 	call	#_compile_error
08268     21 FA 05 F6 | 	mov	result1, #33
0826c     14 02 90 FD | 	jmp	#LR__0727
08270                 | LR__0723
08270     57 00 00 FF 
08274     44 E4 05 F1 | 	add	objptr, ##44612
08278     F2 24 02 FB | 	rdlong	local04, objptr
0827c     01 24 06 F1 | 	add	local04, #1
08280     F2 24 62 FC | 	wrlong	local04, objptr
08284     57 00 00 FF 
08288     44 E4 85 F1 | 	sub	objptr, ##44612
0828c     90 0F B0 FD | 	call	#_expr
08290                 | ' ct+=1
08290                 | ' expr()  ' there is "to" value pushed on the stack
08290                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
08290     57 00 00 FF 
08294     44 E4 05 F1 | 	add	objptr, ##44612
08298     F2 24 02 FB | 	rdlong	local04, objptr
0829c     03 24 66 F0 | 	shl	local04, #3
082a0     02 00 00 FF 
082a4     38 E4 85 F1 | 	sub	objptr, ##1080
082a8     F2 24 02 F1 | 	add	local04, objptr
082ac     12 13 02 FB | 	rdlong	arg01, local04
082b0     73 01 00 FF 
082b4     B9 14 06 F6 | 	mov	arg02, ##@LR__5111
082b8     55 00 00 FF 
082bc     0C E4 85 F1 | 	sub	objptr, ##43532
082c0     7C 68 B1 FD | 	call	#__system___string_cmp
082c4     00 FA 0D F2 | 	cmp	result1, #0 wz
082c8     3C 00 90 AD |  if_e	jmp	#LR__0724
082cc     57 00 00 FF 
082d0     44 E4 05 F1 | 	add	objptr, ##44612
082d4     F2 28 02 FB | 	rdlong	local06, objptr
082d8     03 28 66 F0 | 	shl	local06, #3
082dc     02 00 00 FF 
082e0     38 E4 85 F1 | 	sub	objptr, ##1080
082e4     F2 28 02 F1 | 	add	local06, objptr
082e8     14 13 02 FB | 	rdlong	arg01, local06
082ec     73 01 00 FF 
082f0     BE 14 06 F6 | 	mov	arg02, ##@LR__5112
082f4     55 00 00 FF 
082f8     0C E4 85 F1 | 	sub	objptr, ##43532
082fc     40 68 B1 FD | 	call	#__system___string_cmp
08300     00 FA 0D F2 | 	cmp	result1, #0 wz
08304     24 00 90 5D |  if_ne	jmp	#LR__0725
08308                 | LR__0724
08308     57 00 00 FF 
0830c     44 E4 05 F1 | 	add	objptr, ##44612
08310     F2 28 02 FB | 	rdlong	local06, objptr
08314     01 28 06 F1 | 	add	local06, #1
08318     F2 28 62 FC | 	wrlong	local06, objptr
0831c     57 00 00 FF 
08320     44 E4 85 F1 | 	sub	objptr, ##44612
08324     F8 0E B0 FD | 	call	#_expr
08328     78 00 90 FD | 	jmp	#LR__0726
0832c                 | LR__0725
0832c     6A 00 00 FF 
08330     7C E4 05 F1 | 	add	objptr, ##54396
08334     F2 28 02 FB | 	rdlong	local06, objptr
08338     14 27 02 F6 | 	mov	local05, local06
0833c     01 26 66 F0 | 	shl	local05, #1
08340     14 27 02 F1 | 	add	local05, local06
08344     02 26 66 F0 | 	shl	local05, #2
08348     03 00 00 FF 
0834c     00 E4 85 F1 | 	sub	objptr, ##1536
08350     F2 26 02 F1 | 	add	local05, objptr
08354     08 26 06 F1 | 	add	local05, #8
08358     13 39 68 FC | 	wrlong	#28, local05
0835c     03 00 00 FF 
08360     00 E4 05 F1 | 	add	objptr, ##1536
08364     F2 28 02 FB | 	rdlong	local06, objptr
08368     14 27 02 F6 | 	mov	local05, local06
0836c     01 26 66 F0 | 	shl	local05, #1
08370     14 27 02 F1 | 	add	local05, local06
08374     02 26 66 F0 | 	shl	local05, #2
08378     03 00 00 FF 
0837c     00 E4 85 F1 | 	sub	objptr, ##1536
08380     F2 26 02 F1 | 	add	local05, objptr
08384     13 03 68 FC | 	wrlong	#1, local05
08388     03 00 00 FF 
0838c     00 E4 05 F1 | 	add	objptr, ##1536
08390     F2 28 02 FB | 	rdlong	local06, objptr
08394     01 28 06 F1 | 	add	local06, #1
08398     F2 28 62 FC | 	wrlong	local06, objptr
0839c     6A 00 00 FF 
083a0     7C E4 85 F1 | 	sub	objptr, ##54396
083a4                 | LR__0726
083a4     6A 00 00 FF 
083a8     7C E4 05 F1 | 	add	objptr, ##54396
083ac     F2 28 02 FB | 	rdlong	local06, objptr
083b0     14 27 02 F6 | 	mov	local05, local06
083b4     01 26 66 F0 | 	shl	local05, #1
083b8     14 27 02 F1 | 	add	local05, local06
083bc     02 26 66 F0 | 	shl	local05, #2
083c0     03 00 00 FF 
083c4     00 E4 85 F1 | 	sub	objptr, ##1536
083c8     F2 26 02 F1 | 	add	local05, objptr
083cc     08 26 06 F1 | 	add	local05, #8
083d0     13 39 68 FC | 	wrlong	#28, local05
083d4     03 00 00 FF 
083d8     00 E4 05 F1 | 	add	objptr, ##1536
083dc     F2 28 02 FB | 	rdlong	local06, objptr
083e0     14 27 02 F6 | 	mov	local05, local06
083e4     01 26 66 F0 | 	shl	local05, #1
083e8     14 27 02 F1 | 	add	local05, local06
083ec     02 26 66 F0 | 	shl	local05, #2
083f0     03 00 00 FF 
083f4     00 E4 85 F1 | 	sub	objptr, ##1536
083f8     F2 26 02 F1 | 	add	local05, objptr
083fc     13 2B 62 FC | 	wrlong	local07, local05
08400     03 00 00 FF 
08404     00 E4 05 F1 | 	add	objptr, ##1536
08408     F2 2A 02 FB | 	rdlong	local07, objptr
0840c     01 2A 06 F1 | 	add	local07, #1
08410     F2 2A 62 FC | 	wrlong	local07, objptr
08414     15 29 02 F6 | 	mov	local06, local07
08418     01 28 66 F0 | 	shl	local06, #1
0841c     15 29 02 F1 | 	add	local06, local07
08420     02 28 66 F0 | 	shl	local06, #2
08424     03 00 00 FF 
08428     00 E4 85 F1 | 	sub	objptr, ##1536
0842c     F2 28 02 F1 | 	add	local06, objptr
08430     08 28 06 F1 | 	add	local06, #8
08434     14 95 68 FC | 	wrlong	#74, local06
08438     03 00 00 FF 
0843c     00 E4 05 F1 | 	add	objptr, ##1536
08440     F2 2A 02 FB | 	rdlong	local07, objptr
08444     15 29 02 F6 | 	mov	local06, local07
08448     01 28 66 F0 | 	shl	local06, #1
0844c     15 29 02 F1 | 	add	local06, local07
08450     02 28 66 F0 | 	shl	local06, #2
08454     03 00 00 FF 
08458     00 E4 85 F1 | 	sub	objptr, ##1536
0845c     F2 28 02 F1 | 	add	local06, objptr
08460     14 01 68 FC | 	wrlong	#0, local06
08464     03 00 00 FF 
08468     00 E4 05 F1 | 	add	objptr, ##1536
0846c     F2 2A 02 FB | 	rdlong	local07, objptr
08470     01 2A 06 F1 | 	add	local07, #1
08474     F2 2A 62 FC | 	wrlong	local07, objptr
08478     6A 00 00 FF 
0847c     7C E4 85 F1 | 	sub	objptr, ##54396
08480                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
08480                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
08480                 | ' 
08480                 | ' 
08480                 | ' return 0
08480     00 FA 05 F6 | 	mov	result1, #0
08484                 | LR__0727
08484     A7 F0 03 F6 | 	mov	ptra, fp
08488     B2 00 A0 FD | 	call	#popregs_
0848c                 | _compile_for_ret
0848c     2D 00 64 FD | 	ret
08490                 | 
08490                 | ' 
08490                 | ' 
08490                 | ' sub do_gosub()
08490                 | _do_gosub
08490     78 00 00 FF 
08494     E8 E4 05 F1 | 	add	objptr, ##61672
08498     F2 00 02 FB | 	rdlong	_var01, objptr
0849c     01 00 06 F1 | 	add	_var01, #1
084a0     F2 00 62 FC | 	wrlong	_var01, objptr
084a4                 | ' gosubtop+=1
084a4                 | ' if compiledline(lineptr_e+1).result_type=token_end then
084a4     0E 00 00 FF 
084a8     68 E4 85 F1 | 	sub	objptr, ##7272
084ac     F2 00 02 FB | 	rdlong	_var01, objptr
084b0     01 00 06 F1 | 	add	_var01, #1
084b4     00 03 02 F6 | 	mov	_var02, _var01
084b8     01 02 66 F0 | 	shl	_var02, #1
084bc     00 03 02 F1 | 	add	_var02, _var01
084c0     02 02 66 F0 | 	shl	_var02, #2
084c4     03 00 00 FF 
084c8     04 E4 85 F1 | 	sub	objptr, ##1540
084cc     F2 02 02 F1 | 	add	_var02, objptr
084d0     08 02 06 F1 | 	add	_var02, #8
084d4     01 03 02 FB | 	rdlong	_var02, _var02
084d8     FE 03 0E F2 | 	cmp	_var02, #510 wz
084dc     67 00 00 FF 
084e0     7C E4 85 F1 | 	sub	objptr, ##52860
084e4     58 00 90 5D |  if_ne	jmp	#LR__0730
084e8     78 00 00 FF 
084ec     E8 E4 05 F1 | 	add	objptr, ##61672
084f0     F2 02 02 FB | 	rdlong	_var02, objptr
084f4     03 02 66 F0 | 	shl	_var02, #3
084f8     03 00 00 FF 
084fc     38 E5 85 F1 | 	sub	objptr, ##1848
08500     F2 02 02 F1 | 	add	_var02, objptr
08504     03 00 00 FF 
08508     0C E5 05 F1 | 	add	objptr, ##1804
0850c     F2 00 02 FB | 	rdlong	_var01, objptr
08510     01 01 62 FC | 	wrlong	_var01, _var02
08514     2C E4 05 F1 | 	add	objptr, #44
08518     F2 02 02 FB | 	rdlong	_var02, objptr
0851c     03 02 66 F0 | 	shl	_var02, #3
08520     03 00 00 FF 
08524     38 E5 85 F1 | 	sub	objptr, ##1848
08528     F2 02 02 F1 | 	add	_var02, objptr
0852c     04 02 06 F1 | 	add	_var02, #4
08530     01 01 68 FC | 	wrlong	#0, _var02
08534     74 00 00 FF 
08538     B0 E5 85 F1 | 	sub	objptr, ##59824
0853c     64 00 90 FD | 	jmp	#LR__0731
08540                 | LR__0730
08540     78 00 00 FF 
08544     E8 E4 05 F1 | 	add	objptr, ##61672
08548     F2 02 02 FB | 	rdlong	_var02, objptr
0854c     03 02 66 F0 | 	shl	_var02, #3
08550     03 00 00 FF 
08554     38 E5 85 F1 | 	sub	objptr, ##1848
08558     F2 02 02 F1 | 	add	_var02, objptr
0855c     03 00 00 FF 
08560     14 E5 05 F1 | 	add	objptr, ##1812
08564     F2 00 02 FB | 	rdlong	_var01, objptr
08568     01 01 62 FC | 	wrlong	_var01, _var02
0856c     24 E4 05 F1 | 	add	objptr, #36
08570     F2 02 02 FB | 	rdlong	_var02, objptr
08574     03 02 66 F0 | 	shl	_var02, #3
08578     03 00 00 FF 
0857c     38 E5 85 F1 | 	sub	objptr, ##1848
08580     F2 02 02 F1 | 	add	_var02, objptr
08584     0A 00 00 FF 
08588     30 E5 85 F1 | 	sub	objptr, ##5424
0858c     F2 00 02 FB | 	rdlong	_var01, objptr
08590     6A 00 00 FF 
08594     80 E4 85 F1 | 	sub	objptr, ##54400
08598     02 00 06 F1 | 	add	_var01, #2
0859c     04 02 06 F1 | 	add	_var02, #4
085a0     01 01 62 FC | 	wrlong	_var01, _var02
085a4                 | LR__0731
085a4                 | _do_gosub_ret
085a4     2D 00 64 FD | 	ret
085a8                 | 
085a8                 | ' 
085a8                 | ' 
085a8                 | ' sub do_for()
085a8                 | _do_for
085a8     01 4A 05 F6 | 	mov	COUNT_, #1
085ac     A8 00 A0 FD | 	call	#pushregs_
085b0     10 F0 07 F1 | 	add	ptra, #16
085b4     78 00 00 FF 
085b8     E4 E4 05 F1 | 	add	objptr, ##61668
085bc     F2 12 02 FB | 	rdlong	arg01, objptr
085c0     01 12 06 F1 | 	add	arg01, #1
085c4     F2 12 62 FC | 	wrlong	arg01, objptr
085c8     78 00 00 FF 
085cc     E4 E4 85 F1 | 	sub	objptr, ##61668
085d0     8C 22 B0 FD | 	call	#_pop
085d4     A7 FA 61 FC | 	wrlong	result1, fp
085d8     04 4E 05 F1 | 	add	fp, #4
085dc     A7 FC 61 FC | 	wrlong	result2, fp
085e0     04 4E 05 F1 | 	add	fp, #4
085e4     A7 FE 61 FC | 	wrlong	result3, fp
085e8     08 4E 85 F1 | 	sub	fp, #8
085ec     78 00 00 FF 
085f0     E4 E4 05 F1 | 	add	objptr, ##61668
085f4     F2 12 02 FB | 	rdlong	arg01, objptr
085f8     09 1F 02 F6 | 	mov	local01, arg01
085fc     02 1E 66 F0 | 	shl	local01, #2
08600     09 1F 02 F1 | 	add	local01, arg01
08604     02 1E 66 F0 | 	shl	local01, #2
08608     06 00 00 FF 
0860c     48 E4 85 F1 | 	sub	objptr, ##3144
08610     F2 1E 02 F1 | 	add	local01, objptr
08614     A7 12 02 FB | 	rdlong	arg01, fp
08618     08 1E 06 F1 | 	add	local01, #8
0861c     0F 13 62 FC | 	wrlong	arg01, local01
08620     72 00 00 FF 
08624     9C E4 85 F1 | 	sub	objptr, ##58524
08628     34 22 B0 FD | 	call	#_pop
0862c     A7 FA 61 FC | 	wrlong	result1, fp
08630     04 4E 05 F1 | 	add	fp, #4
08634     A7 FC 61 FC | 	wrlong	result2, fp
08638     04 4E 05 F1 | 	add	fp, #4
0863c     A7 FE 61 FC | 	wrlong	result3, fp
08640     08 4E 85 F1 | 	sub	fp, #8
08644     78 00 00 FF 
08648     E4 E4 05 F1 | 	add	objptr, ##61668
0864c     F2 12 02 FB | 	rdlong	arg01, objptr
08650     09 1F 02 F6 | 	mov	local01, arg01
08654     02 1E 66 F0 | 	shl	local01, #2
08658     09 1F 02 F1 | 	add	local01, arg01
0865c     02 1E 66 F0 | 	shl	local01, #2
08660     06 00 00 FF 
08664     48 E4 85 F1 | 	sub	objptr, ##3144
08668     F2 1E 02 F1 | 	add	local01, objptr
0866c     A7 12 02 F6 | 	mov	arg01, fp
08670     72 00 00 FF 
08674     9C E4 85 F1 | 	sub	objptr, ##58524
08678     3C AE B0 FD | 	call	#_converttoint
0867c     FD 12 02 F6 | 	mov	arg01, result1
08680     0C 1E 06 F1 | 	add	local01, #12
08684     0F 13 62 FC | 	wrlong	arg01, local01
08688     D4 21 B0 FD | 	call	#_pop
0868c     A7 FA 61 FC | 	wrlong	result1, fp
08690     04 4E 05 F1 | 	add	fp, #4
08694     A7 FC 61 FC | 	wrlong	result2, fp
08698     04 4E 05 F1 | 	add	fp, #4
0869c     A7 FE 61 FC | 	wrlong	result3, fp
086a0     08 4E 85 F1 | 	sub	fp, #8
086a4     78 00 00 FF 
086a8     E4 E4 05 F1 | 	add	objptr, ##61668
086ac     F2 12 02 FB | 	rdlong	arg01, objptr
086b0     09 1F 02 F6 | 	mov	local01, arg01
086b4     02 1E 66 F0 | 	shl	local01, #2
086b8     09 1F 02 F1 | 	add	local01, arg01
086bc     02 1E 66 F0 | 	shl	local01, #2
086c0     06 00 00 FF 
086c4     48 E4 85 F1 | 	sub	objptr, ##3144
086c8     F2 1E 02 F1 | 	add	local01, objptr
086cc     A7 12 02 F6 | 	mov	arg01, fp
086d0     72 00 00 FF 
086d4     9C E4 85 F1 | 	sub	objptr, ##58524
086d8     DC AD B0 FD | 	call	#_converttoint
086dc     10 1E 06 F1 | 	add	local01, #16
086e0     0F FB 61 FC | 	wrlong	result1, local01
086e4                 | ' fortop+=1
086e4                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
086e4                 | ' 'if i> maxfor then printerror(36) : return
086e4                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
086e4                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
086e4                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
086e4                 | ' if compiledline(lineptr_e).result_type=token_end then
086e4     6A 00 00 FF 
086e8     80 E4 05 F1 | 	add	objptr, ##54400
086ec     F2 12 02 FB | 	rdlong	arg01, objptr
086f0     09 1F 02 F6 | 	mov	local01, arg01
086f4     01 1E 66 F0 | 	shl	local01, #1
086f8     09 1F 02 F1 | 	add	local01, arg01
086fc     02 1E 66 F0 | 	shl	local01, #2
08700     03 00 00 FF 
08704     04 E4 85 F1 | 	sub	objptr, ##1540
08708     F2 1E 02 F1 | 	add	local01, objptr
0870c     08 1E 06 F1 | 	add	local01, #8
08710     0F 1F 02 FB | 	rdlong	local01, local01
08714     FE 1F 0E F2 | 	cmp	local01, #510 wz
08718     67 00 00 FF 
0871c     7C E4 85 F1 | 	sub	objptr, ##52860
08720     70 00 90 5D |  if_ne	jmp	#LR__0740
08724     78 00 00 FF 
08728     E4 E4 05 F1 | 	add	objptr, ##61668
0872c     F2 12 02 FB | 	rdlong	arg01, objptr
08730     09 1F 02 F6 | 	mov	local01, arg01
08734     02 1E 66 F0 | 	shl	local01, #2
08738     09 1F 02 F1 | 	add	local01, arg01
0873c     02 1E 66 F0 | 	shl	local01, #2
08740     06 00 00 FF 
08744     48 E4 85 F1 | 	sub	objptr, ##3144
08748     F2 1E 02 F1 | 	add	local01, objptr
0874c     06 00 00 FF 
08750     20 E4 05 F1 | 	add	objptr, ##3104
08754     F2 12 02 FB | 	rdlong	arg01, objptr
08758     0F 13 62 FC | 	wrlong	arg01, local01
0875c     28 E4 05 F1 | 	add	objptr, #40
08760     F2 12 02 FB | 	rdlong	arg01, objptr
08764     09 1F 02 F6 | 	mov	local01, arg01
08768     02 1E 66 F0 | 	shl	local01, #2
0876c     09 1F 02 F1 | 	add	local01, arg01
08770     02 1E 66 F0 | 	shl	local01, #2
08774     06 00 00 FF 
08778     48 E4 85 F1 | 	sub	objptr, ##3144
0877c     F2 1E 02 F1 | 	add	local01, objptr
08780     04 1E 06 F1 | 	add	local01, #4
08784     0F 01 68 FC | 	wrlong	#0, local01
08788     72 00 00 FF 
0878c     9C E4 85 F1 | 	sub	objptr, ##58524
08790     7C 00 90 FD | 	jmp	#LR__0741
08794                 | LR__0740
08794     78 00 00 FF 
08798     E4 E4 05 F1 | 	add	objptr, ##61668
0879c     F2 12 02 FB | 	rdlong	arg01, objptr
087a0     09 1F 02 F6 | 	mov	local01, arg01
087a4     02 1E 66 F0 | 	shl	local01, #2
087a8     09 1F 02 F1 | 	add	local01, arg01
087ac     02 1E 66 F0 | 	shl	local01, #2
087b0     06 00 00 FF 
087b4     48 E4 85 F1 | 	sub	objptr, ##3144
087b8     F2 1E 02 F1 | 	add	local01, objptr
087bc     06 00 00 FF 
087c0     28 E4 05 F1 | 	add	objptr, ##3112
087c4     F2 12 02 FB | 	rdlong	arg01, objptr
087c8     0F 13 62 FC | 	wrlong	arg01, local01
087cc     20 E4 05 F1 | 	add	objptr, #32
087d0     F2 12 02 FB | 	rdlong	arg01, objptr
087d4     09 1F 02 F6 | 	mov	local01, arg01
087d8     02 1E 66 F0 | 	shl	local01, #2
087dc     09 1F 02 F1 | 	add	local01, arg01
087e0     02 1E 66 F0 | 	shl	local01, #2
087e4     06 00 00 FF 
087e8     48 E4 85 F1 | 	sub	objptr, ##3144
087ec     F2 1E 02 F1 | 	add	local01, objptr
087f0     08 00 00 FF 
087f4     1C E4 85 F1 | 	sub	objptr, ##4124
087f8     F2 12 02 FB | 	rdlong	arg01, objptr
087fc     6A 00 00 FF 
08800     80 E4 85 F1 | 	sub	objptr, ##54400
08804     01 12 06 F1 | 	add	arg01, #1
08808     04 1E 06 F1 | 	add	local01, #4
0880c     0F 13 62 FC | 	wrlong	arg01, local01
08810                 | LR__0741
08810     A7 F0 03 F6 | 	mov	ptra, fp
08814     B2 00 A0 FD | 	call	#popregs_
08818                 | _do_for_ret
08818     2D 00 64 FD | 	ret
0881c                 | 
0881c                 | ' 
0881c                 | ' ' now do_next todo
0881c                 | ' 
0881c                 | ' sub do_return()
0881c                 | _do_return
0881c                 | ' if gosubtop>0 then
0881c     78 00 00 FF 
08820     E8 E4 05 F1 | 	add	objptr, ##61672
08824     F2 00 02 FB | 	rdlong	_var01, objptr
08828     78 00 00 FF 
0882c     E8 E4 85 F1 | 	sub	objptr, ##61672
08830     01 00 56 F2 | 	cmps	_var01, #1 wc
08834     8C 00 90 CD |  if_b	jmp	#LR__0750
08838     78 00 00 FF 
0883c     E8 E4 05 F1 | 	add	objptr, ##61672
08840     F2 00 02 FB | 	rdlong	_var01, objptr
08844     03 00 66 F0 | 	shl	_var01, #3
08848     03 00 00 FF 
0884c     38 E5 85 F1 | 	sub	objptr, ##1848
08850     F2 00 02 F1 | 	add	_var01, objptr
08854     00 01 02 FB | 	rdlong	_var01, _var01
08858     03 00 00 FF 
0885c     0C E5 05 F1 | 	add	objptr, ##1804
08860     F2 00 62 FC | 	wrlong	_var01, objptr
08864     2C E4 05 F1 | 	add	objptr, #44
08868     F2 00 02 FB | 	rdlong	_var01, objptr
0886c     03 00 66 F0 | 	shl	_var01, #3
08870     03 00 00 FF 
08874     38 E5 85 F1 | 	sub	objptr, ##1848
08878     F2 00 02 F1 | 	add	_var01, objptr
0887c     04 00 06 F1 | 	add	_var01, #4
08880     00 01 02 FB | 	rdlong	_var01, _var01
08884     03 00 00 FF 
08888     10 E5 05 F1 | 	add	objptr, ##1808
0888c     F2 00 62 FC | 	wrlong	_var01, objptr
08890     0E 00 00 FF 
08894     44 E4 85 F1 | 	sub	objptr, ##7236
08898     F2 00 02 FB | 	rdlong	_var01, objptr
0889c     01 00 86 F1 | 	sub	_var01, #1
088a0     04 E4 05 F1 | 	add	objptr, #4
088a4     F2 00 62 FC | 	wrlong	_var01, objptr
088a8     0E 00 00 FF 
088ac     68 E4 05 F1 | 	add	objptr, ##7272
088b0     F2 00 02 FB | 	rdlong	_var01, objptr
088b4     01 00 86 F1 | 	sub	_var01, #1
088b8     F2 00 62 FC | 	wrlong	_var01, objptr
088bc     78 00 00 FF 
088c0     E8 E4 85 F1 | 	sub	objptr, ##61672
088c4                 | LR__0750
088c4                 | _do_return_ret
088c4     2D 00 64 FD | 	ret
088c8                 | 
088c8                 | ' 
088c8                 | ' sub do_pop()
088c8                 | _do_pop
088c8                 | ' if gosubtop>0 then  gosubtop -=1 
088c8     78 00 00 FF 
088cc     E8 E4 05 F1 | 	add	objptr, ##61672
088d0     F2 00 02 FB | 	rdlong	_var01, objptr
088d4     78 00 00 FF 
088d8     E8 E4 85 F1 | 	sub	objptr, ##61672
088dc     01 00 56 F2 | 	cmps	_var01, #1 wc
088e0     78 00 00 3F 
088e4     E8 E4 05 31 |  if_ae	add	objptr, ##61672
088e8     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
088ec     01 00 86 31 |  if_ae	sub	_var01, #1
088f0     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
088f4     78 00 00 3F 
088f8     E8 E4 85 31 |  if_ae	sub	objptr, ##61672
088fc                 | _do_pop_ret
088fc     2D 00 64 FD | 	ret
08900                 | 
08900                 | ' 
08900                 | ' sub do_next()
08900                 | _do_next
08900     04 4A 05 F6 | 	mov	COUNT_, #4
08904     A8 00 A0 FD | 	call	#pushregs_
08908     54 1F B0 FD | 	call	#_pop
0890c     FD 1E 02 F6 | 	mov	local01, result1
08910     FE 20 02 F6 | 	mov	local02, result2
08914     FF 22 02 F6 | 	mov	local03, result3
08918                 | ' 
08918                 | ' t1=pop() :varnum=t1.result.uresult
08918                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
08918     78 00 00 FF 
0891c     E4 E4 05 F1 | 	add	objptr, ##61668
08920     F2 12 02 FB | 	rdlong	arg01, objptr
08924     09 15 02 F6 | 	mov	arg02, arg01
08928     02 14 66 F0 | 	shl	arg02, #2
0892c     09 15 02 F1 | 	add	arg02, arg01
08930     02 14 66 F0 | 	shl	arg02, #2
08934     06 00 00 FF 
08938     48 E4 85 F1 | 	sub	objptr, ##3144
0893c     F2 14 02 F1 | 	add	arg02, objptr
08940     08 14 06 F1 | 	add	arg02, #8
08944     0A 15 02 FB | 	rdlong	arg02, arg02
08948     0F 15 0A F2 | 	cmp	arg02, local01 wz
0894c     72 00 00 FF 
08950     9C E4 85 F1 | 	sub	objptr, ##58524
08954     0C 00 90 AD |  if_e	jmp	#LR__0760
08958     25 12 06 F6 | 	mov	arg01, #37
0895c     3C 1D B1 FD | 	call	#_printerror
08960     A8 02 90 FD | 	jmp	#LR__0765
08964                 | LR__0760
08964                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
08964     0F 15 02 F6 | 	mov	arg02, local01
08968     04 14 66 F0 | 	shl	arg02, #4
0896c     34 00 00 FF 
08970     F8 E5 05 F1 | 	add	objptr, ##27128
08974     F2 14 02 F1 | 	add	arg02, objptr
08978     0C 14 06 F1 | 	add	arg02, #12
0897c     0A 15 02 FB | 	rdlong	arg02, arg02
08980     1E 14 0E F2 | 	cmp	arg02, #30 wz
08984     34 00 00 FF 
08988     F8 E5 85 F1 | 	sub	objptr, ##27128
0898c     54 00 90 5D |  if_ne	jmp	#LR__0761
08990     0F 15 02 F6 | 	mov	arg02, local01
08994     04 14 66 F0 | 	shl	arg02, #4
08998     34 00 00 FF 
0899c     F8 E5 05 F1 | 	add	objptr, ##27128
089a0     F2 14 02 F1 | 	add	arg02, objptr
089a4     0C 14 06 F1 | 	add	arg02, #12
089a8     0A 39 68 FC | 	wrlong	#28, arg02
089ac     0F 25 02 F6 | 	mov	local04, local01
089b0     04 24 66 F0 | 	shl	local04, #4
089b4     F2 24 02 F1 | 	add	local04, objptr
089b8     0F 13 02 F6 | 	mov	arg01, local01
089bc     04 12 66 F0 | 	shl	arg01, #4
089c0     F2 12 02 F1 | 	add	arg01, objptr
089c4     04 12 06 F1 | 	add	arg01, #4
089c8     09 13 02 FB | 	rdlong	arg01, arg01
089cc     34 00 00 FF 
089d0     F8 E5 85 F1 | 	sub	objptr, ##27128
089d4     01 14 06 F6 | 	mov	arg02, #1
089d8     84 91 B1 FD | 	call	#__system___float_tointeger
089dc     04 24 06 F1 | 	add	local04, #4
089e0     12 FB 61 FC | 	wrlong	result1, local04
089e4                 | LR__0761
089e4     78 00 00 FF 
089e8     E4 E4 05 F1 | 	add	objptr, ##61668
089ec     F2 12 02 FB | 	rdlong	arg01, objptr
089f0     09 25 02 F6 | 	mov	local04, arg01
089f4     02 24 66 F0 | 	shl	local04, #2
089f8     09 25 02 F1 | 	add	local04, arg01
089fc     02 24 66 F0 | 	shl	local04, #2
08a00     06 00 00 FF 
08a04     48 E4 85 F1 | 	sub	objptr, ##3144
08a08     F2 24 02 F1 | 	add	local04, objptr
08a0c     0C 24 06 F1 | 	add	local04, #12
08a10     12 25 02 FB | 	rdlong	local04, local04
08a14     0F 13 02 F6 | 	mov	arg01, local01
08a18     04 12 66 F0 | 	shl	arg01, #4
08a1c     3D 00 00 FF 
08a20     A4 E4 85 F1 | 	sub	objptr, ##31396
08a24     F2 12 02 F1 | 	add	arg01, objptr
08a28     0F FF 01 F6 | 	mov	result3, local01
08a2c     04 FE 65 F0 | 	shl	result3, #4
08a30     F2 FE 01 F1 | 	add	result3, objptr
08a34     04 FE 05 F1 | 	add	result3, #4
08a38     FF FE 01 FB | 	rdlong	result3, result3
08a3c     12 FF 01 F1 | 	add	result3, local04
08a40     04 12 06 F1 | 	add	arg01, #4
08a44     09 FF 61 FC | 	wrlong	result3, arg01
08a48                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
08a48                 | ' if fortable(fortop).stepval>=0 then
08a48     43 00 00 FF 
08a4c     EC E4 05 F1 | 	add	objptr, ##34540
08a50     F2 12 02 FB | 	rdlong	arg01, objptr
08a54     09 25 02 F6 | 	mov	local04, arg01
08a58     02 24 66 F0 | 	shl	local04, #2
08a5c     09 25 02 F1 | 	add	local04, arg01
08a60     02 24 66 F0 | 	shl	local04, #2
08a64     06 00 00 FF 
08a68     48 E4 85 F1 | 	sub	objptr, ##3144
08a6c     F2 24 02 F1 | 	add	local04, objptr
08a70     0C 24 06 F1 | 	add	local04, #12
08a74     12 25 02 FB | 	rdlong	local04, local04
08a78     00 24 56 F2 | 	cmps	local04, #0 wc
08a7c     72 00 00 FF 
08a80     9C E4 85 F1 | 	sub	objptr, ##58524
08a84     78 00 90 CD |  if_b	jmp	#LR__0762
08a88                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
08a88     04 1E 66 F0 | 	shl	local01, #4
08a8c     34 00 00 FF 
08a90     F8 E5 05 F1 | 	add	objptr, ##27128
08a94     F2 1E 02 F1 | 	add	local01, objptr
08a98     43 00 00 FF 
08a9c     EC E4 05 F1 | 	add	objptr, ##34540
08aa0     F2 24 02 FB | 	rdlong	local04, objptr
08aa4     12 13 02 F6 | 	mov	arg01, local04
08aa8     02 12 66 F0 | 	shl	arg01, #2
08aac     12 13 02 F1 | 	add	arg01, local04
08ab0     02 12 66 F0 | 	shl	arg01, #2
08ab4     06 00 00 FF 
08ab8     48 E4 85 F1 | 	sub	objptr, ##3144
08abc     F2 12 02 F1 | 	add	arg01, objptr
08ac0     04 1E 06 F1 | 	add	local01, #4
08ac4     0F 25 02 FB | 	rdlong	local04, local01
08ac8     10 12 06 F1 | 	add	arg01, #16
08acc     09 13 02 FB | 	rdlong	arg01, arg01
08ad0     09 25 5A F2 | 	cmps	local04, arg01 wcz
08ad4     72 00 00 FF 
08ad8     9C E4 85 F1 | 	sub	objptr, ##58524
08adc     9C 00 90 ED |  if_be	jmp	#LR__0764
08ae0     78 00 00 FF 
08ae4     E4 E4 05 F1 | 	add	objptr, ##61668
08ae8     F2 24 02 FB | 	rdlong	local04, objptr
08aec     01 24 86 F1 | 	sub	local04, #1
08af0     F2 24 62 FC | 	wrlong	local04, objptr
08af4     78 00 00 FF 
08af8     E4 E4 85 F1 | 	sub	objptr, ##61668
08afc     0C 01 90 FD | 	jmp	#LR__0765
08b00                 | LR__0762
08b00                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
08b00     0F 13 02 F6 | 	mov	arg01, local01
08b04     04 12 66 F0 | 	shl	arg01, #4
08b08     34 00 00 FF 
08b0c     F8 E5 05 F1 | 	add	objptr, ##27128
08b10     F2 12 02 F1 | 	add	arg01, objptr
08b14     43 00 00 FF 
08b18     EC E4 05 F1 | 	add	objptr, ##34540
08b1c     F2 24 02 FB | 	rdlong	local04, objptr
08b20     12 1F 02 F6 | 	mov	local01, local04
08b24     02 1E 66 F0 | 	shl	local01, #2
08b28     12 1F 02 F1 | 	add	local01, local04
08b2c     02 1E 66 F0 | 	shl	local01, #2
08b30     06 00 00 FF 
08b34     48 E4 85 F1 | 	sub	objptr, ##3144
08b38     F2 1E 02 F1 | 	add	local01, objptr
08b3c     04 12 06 F1 | 	add	arg01, #4
08b40     09 13 02 FB | 	rdlong	arg01, arg01
08b44     10 1E 06 F1 | 	add	local01, #16
08b48     0F 1F 02 FB | 	rdlong	local01, local01
08b4c     0F 13 52 F2 | 	cmps	arg01, local01 wc
08b50     72 00 00 FF 
08b54     9C E4 85 F1 | 	sub	objptr, ##58524
08b58     20 00 90 3D |  if_ae	jmp	#LR__0763
08b5c     78 00 00 FF 
08b60     E4 E4 05 F1 | 	add	objptr, ##61668
08b64     F2 24 02 FB | 	rdlong	local04, objptr
08b68     01 24 86 F1 | 	sub	local04, #1
08b6c     F2 24 62 FC | 	wrlong	local04, objptr
08b70     78 00 00 FF 
08b74     E4 E4 85 F1 | 	sub	objptr, ##61668
08b78     90 00 90 FD | 	jmp	#LR__0765
08b7c                 | LR__0763
08b7c                 | LR__0764
08b7c     78 00 00 FF 
08b80     E4 E4 05 F1 | 	add	objptr, ##61668
08b84     F2 1E 02 FB | 	rdlong	local01, objptr
08b88     0F 25 02 F6 | 	mov	local04, local01
08b8c     02 24 66 F0 | 	shl	local04, #2
08b90     0F 25 02 F1 | 	add	local04, local01
08b94     02 24 66 F0 | 	shl	local04, #2
08b98     06 00 00 FF 
08b9c     48 E4 85 F1 | 	sub	objptr, ##3144
08ba0     F2 24 02 F1 | 	add	local04, objptr
08ba4     12 25 02 FB | 	rdlong	local04, local04
08ba8     06 00 00 FF 
08bac     20 E4 05 F1 | 	add	objptr, ##3104
08bb0     F2 24 62 FC | 	wrlong	local04, objptr
08bb4     28 E4 05 F1 | 	add	objptr, #40
08bb8     F2 1E 02 FB | 	rdlong	local01, objptr
08bbc     0F 25 02 F6 | 	mov	local04, local01
08bc0     02 24 66 F0 | 	shl	local04, #2
08bc4     0F 25 02 F1 | 	add	local04, local01
08bc8     02 24 66 F0 | 	shl	local04, #2
08bcc     06 00 00 FF 
08bd0     48 E4 85 F1 | 	sub	objptr, ##3144
08bd4     F2 24 02 F1 | 	add	local04, objptr
08bd8     04 24 06 F1 | 	add	local04, #4
08bdc     12 25 02 FB | 	rdlong	local04, local04
08be0     06 00 00 FF 
08be4     24 E4 05 F1 | 	add	objptr, ##3108
08be8     F2 24 62 FC | 	wrlong	local04, objptr
08bec     0E 00 00 FF 
08bf0     44 E4 85 F1 | 	sub	objptr, ##7236
08bf4     F2 24 02 FB | 	rdlong	local04, objptr
08bf8     01 24 86 F1 | 	sub	local04, #1
08bfc     04 E4 05 F1 | 	add	objptr, #4
08c00     F2 24 62 FC | 	wrlong	local04, objptr
08c04     6A 00 00 FF 
08c08     80 E4 85 F1 | 	sub	objptr, ##54400
08c0c                 | LR__0765
08c0c     A7 F0 03 F6 | 	mov	ptra, fp
08c10     B2 00 A0 FD | 	call	#popregs_
08c14                 | _do_next_ret
08c14     2D 00 64 FD | 	ret
08c18                 | 
08c18                 | ' 
08c18                 | ' 
08c18                 | ' function compile_next() as ulong
08c18                 | _compile_next
08c18     04 4A 05 F6 | 	mov	COUNT_, #4
08c1c     A8 00 A0 FD | 	call	#pushregs_
08c20     57 00 00 FF 
08c24     44 E4 05 F1 | 	add	objptr, ##44612
08c28     F2 12 02 FB | 	rdlong	arg01, objptr
08c2c     03 12 66 F0 | 	shl	arg01, #3
08c30     02 00 00 FF 
08c34     38 E4 85 F1 | 	sub	objptr, ##1080
08c38     F2 12 02 F1 | 	add	arg01, objptr
08c3c     09 1F 02 FB | 	rdlong	local01, arg01
08c40                 | ' 
08c40                 | ' varname$=lparts(ct).part$ 
08c40                 | ' 'suffix$=right$(varname$,1)
08c40                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
08c40                 | ' if varnum=0 then compile_error(35)  : return 35
08c40     04 E4 85 F1 | 	sub	objptr, #4
08c44     F2 14 0A FB | 	rdlong	arg02, objptr wz
08c48     55 00 00 FF 
08c4c     08 E4 85 F1 | 	sub	objptr, ##43528
08c50     10 00 90 5D |  if_ne	jmp	#LR__0770
08c54     23 12 06 F6 | 	mov	arg01, #35
08c58     80 DE BF FD | 	call	#_compile_error
08c5c     23 FA 05 F6 | 	mov	result1, #35
08c60     58 01 90 FD | 	jmp	#LR__0774
08c64                 | LR__0770
08c64     01 20 66 F6 | 	neg	local02, #1
08c68                 | ' j=-1
08c68                 | ' for i=0 to varnum-1
08c68     00 22 06 F6 | 	mov	local03, #0
08c6c     55 00 00 FF 
08c70     08 E4 05 F1 | 	add	objptr, ##43528
08c74     F2 24 02 FB | 	rdlong	local04, objptr
08c78     55 00 00 FF 
08c7c     08 E4 85 F1 | 	sub	objptr, ##43528
08c80                 | LR__0771
08c80     12 23 12 F2 | 	cmp	local03, local04 wc
08c84     38 00 90 3D |  if_ae	jmp	#LR__0772
08c88                 | '   if variables(i).name=varname$ then j=i : exit
08c88     11 15 02 F6 | 	mov	arg02, local03
08c8c     04 14 66 F0 | 	shl	arg02, #4
08c90     34 00 00 FF 
08c94     F8 E5 05 F1 | 	add	objptr, ##27128
08c98     F2 14 02 F1 | 	add	arg02, objptr
08c9c     0A 13 02 FB | 	rdlong	arg01, arg02
08ca0     0F 15 02 F6 | 	mov	arg02, local01
08ca4     34 00 00 FF 
08ca8     F8 E5 85 F1 | 	sub	objptr, ##27128
08cac     90 5E B1 FD | 	call	#__system___string_cmp
08cb0     00 FA 0D F2 | 	cmp	result1, #0 wz
08cb4     11 21 02 A6 |  if_e	mov	local02, local03
08cb8     01 22 06 51 |  if_ne	add	local03, #1
08cbc     C0 FF 9F 5D |  if_ne	jmp	#LR__0771
08cc0                 | LR__0772
08cc0                 | ' if j=-1 then compile_error(35) : return 35
08cc0     FF FF 7F FF 
08cc4     FF 21 0E F2 | 	cmp	local02, ##-1 wz
08cc8     10 00 90 5D |  if_ne	jmp	#LR__0773
08ccc     23 12 06 F6 | 	mov	arg01, #35
08cd0     08 DE BF FD | 	call	#_compile_error
08cd4     23 FA 05 F6 | 	mov	result1, #35
08cd8     E0 00 90 FD | 	jmp	#LR__0774
08cdc                 | LR__0773
08cdc     6A 00 00 FF 
08ce0     7C E4 05 F1 | 	add	objptr, ##54396
08ce4     F2 24 02 FB | 	rdlong	local04, objptr
08ce8     12 23 02 F6 | 	mov	local03, local04
08cec     01 22 66 F0 | 	shl	local03, #1
08cf0     12 23 02 F1 | 	add	local03, local04
08cf4     02 22 66 F0 | 	shl	local03, #2
08cf8     03 00 00 FF 
08cfc     00 E4 85 F1 | 	sub	objptr, ##1536
08d00     F2 22 02 F1 | 	add	local03, objptr
08d04     08 22 06 F1 | 	add	local03, #8
08d08     11 39 68 FC | 	wrlong	#28, local03
08d0c     03 00 00 FF 
08d10     00 E4 05 F1 | 	add	objptr, ##1536
08d14     F2 24 02 FB | 	rdlong	local04, objptr
08d18     12 23 02 F6 | 	mov	local03, local04
08d1c     01 22 66 F0 | 	shl	local03, #1
08d20     12 23 02 F1 | 	add	local03, local04
08d24     02 22 66 F0 | 	shl	local03, #2
08d28     03 00 00 FF 
08d2c     00 E4 85 F1 | 	sub	objptr, ##1536
08d30     F2 22 02 F1 | 	add	local03, objptr
08d34     11 21 62 FC | 	wrlong	local02, local03
08d38     03 00 00 FF 
08d3c     00 E4 05 F1 | 	add	objptr, ##1536
08d40     F2 24 02 FB | 	rdlong	local04, objptr
08d44     01 24 06 F1 | 	add	local04, #1
08d48     F2 24 62 FC | 	wrlong	local04, objptr
08d4c     12 23 02 F6 | 	mov	local03, local04
08d50     01 22 66 F0 | 	shl	local03, #1
08d54     12 23 02 F1 | 	add	local03, local04
08d58     02 22 66 F0 | 	shl	local03, #2
08d5c     03 00 00 FF 
08d60     00 E4 85 F1 | 	sub	objptr, ##1536
08d64     F2 22 02 F1 | 	add	local03, objptr
08d68     08 22 06 F1 | 	add	local03, #8
08d6c     11 97 68 FC | 	wrlong	#75, local03
08d70     03 00 00 FF 
08d74     00 E4 05 F1 | 	add	objptr, ##1536
08d78     F2 24 02 FB | 	rdlong	local04, objptr
08d7c     12 23 02 F6 | 	mov	local03, local04
08d80     01 22 66 F0 | 	shl	local03, #1
08d84     12 23 02 F1 | 	add	local03, local04
08d88     02 22 66 F0 | 	shl	local03, #2
08d8c     03 00 00 FF 
08d90     00 E4 85 F1 | 	sub	objptr, ##1536
08d94     F2 22 02 F1 | 	add	local03, objptr
08d98     11 01 68 FC | 	wrlong	#0, local03
08d9c     03 00 00 FF 
08da0     00 E4 05 F1 | 	add	objptr, ##1536
08da4     F2 24 02 FB | 	rdlong	local04, objptr
08da8     01 24 06 F1 | 	add	local04, #1
08dac     F2 24 62 FC | 	wrlong	local04, objptr
08db0     6A 00 00 FF 
08db4     7C E4 85 F1 | 	sub	objptr, ##54396
08db8                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
08db8                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
08db8                 | ' return 0
08db8     00 FA 05 F6 | 	mov	result1, #0
08dbc                 | LR__0774
08dbc     A7 F0 03 F6 | 	mov	ptra, fp
08dc0     B2 00 A0 FD | 	call	#popregs_
08dc4                 | _compile_next_ret
08dc4     2D 00 64 FD | 	ret
08dc8                 | 
08dc8                 | ' 
08dc8                 | ' 
08dc8                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
08dc8                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
08dc8                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
08dc8                 | ' 
08dc8                 | ' function compile_gosub() as ulong
08dc8                 | _compile_gosub
08dc8     01 4A 05 F6 | 	mov	COUNT_, #1
08dcc     A8 00 A0 FD | 	call	#pushregs_
08dd0     6A 00 00 FF 
08dd4     7C E4 05 F1 | 	add	objptr, ##54396
08dd8     F2 1E 02 FB | 	rdlong	local01, objptr
08ddc     0F FB 01 F6 | 	mov	result1, local01
08de0     01 FA 65 F0 | 	shl	result1, #1
08de4     0F FB 01 F1 | 	add	result1, local01
08de8     02 FA 65 F0 | 	shl	result1, #2
08dec     03 00 00 FF 
08df0     00 E4 85 F1 | 	sub	objptr, ##1536
08df4     F2 FA 01 F1 | 	add	result1, objptr
08df8     08 FA 05 F1 | 	add	result1, #8
08dfc     FD 52 69 FC | 	wrlong	#169, result1
08e00     03 00 00 FF 
08e04     00 E4 05 F1 | 	add	objptr, ##1536
08e08     F2 1E 02 FB | 	rdlong	local01, objptr
08e0c     01 1E 06 F1 | 	add	local01, #1
08e10     F2 1E 62 FC | 	wrlong	local01, objptr
08e14     6A 00 00 FF 
08e18     7C E4 85 F1 | 	sub	objptr, ##54396
08e1c     10 00 B0 FD | 	call	#_compile_goto
08e20                 | ' 
08e20                 | ' compiledline(lineptr).result_type=token_gosub
08e20                 | ' lineptr+=1
08e20                 | ' compile_goto()
08e20                 | ' return 0
08e20     00 FA 05 F6 | 	mov	result1, #0
08e24     A7 F0 03 F6 | 	mov	ptra, fp
08e28     B2 00 A0 FD | 	call	#popregs_
08e2c                 | _compile_gosub_ret
08e2c     2D 00 64 FD | 	ret
08e30                 | 
08e30                 | ' 
08e30                 | ' function compile_goto( ) as ulong
08e30                 | _compile_goto
08e30     03 4A 05 F6 | 	mov	COUNT_, #3
08e34     A8 00 A0 FD | 	call	#pushregs_
08e38     34 F0 07 F1 | 	add	ptra, #52
08e3c                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
08e3c     57 00 00 FF 
08e40     44 E4 05 F1 | 	add	objptr, ##44612
08e44     F2 16 02 FB | 	rdlong	arg03, objptr
08e48     03 16 66 F0 | 	shl	arg03, #3
08e4c     02 00 00 FF 
08e50     38 E4 85 F1 | 	sub	objptr, ##1080
08e54     F2 16 02 F1 | 	add	arg03, objptr
08e58     04 16 06 F1 | 	add	arg03, #4
08e5c     0B 17 02 FB | 	rdlong	arg03, arg03
08e60     01 00 00 FF 
08e64     00 16 0E F2 | 	cmp	arg03, ##512 wz
08e68     55 00 00 FF 
08e6c     0C E4 85 F1 | 	sub	objptr, ##43532
08e70     CC 02 90 5D |  if_ne	jmp	#LR__0785
08e74     57 00 00 FF 
08e78     44 E4 05 F1 | 	add	objptr, ##44612
08e7c     F2 16 02 FB | 	rdlong	arg03, objptr
08e80     01 16 06 F1 | 	add	arg03, #1
08e84     03 16 66 F0 | 	shl	arg03, #3
08e88     02 00 00 FF 
08e8c     38 E4 85 F1 | 	sub	objptr, ##1080
08e90     F2 16 02 F1 | 	add	arg03, objptr
08e94     04 16 06 F1 | 	add	arg03, #4
08e98     0B 17 02 FB | 	rdlong	arg03, arg03
08e9c     FE 17 0E F2 | 	cmp	arg03, #510 wz
08ea0     55 00 00 FF 
08ea4     0C E4 85 F1 | 	sub	objptr, ##43532
08ea8     94 02 90 5D |  if_ne	jmp	#LR__0785
08eac     57 00 00 FF 
08eb0     44 E4 05 F1 | 	add	objptr, ##44612
08eb4     F2 16 02 FB | 	rdlong	arg03, objptr
08eb8     03 16 66 F0 | 	shl	arg03, #3
08ebc     02 00 00 FF 
08ec0     38 E4 85 F1 | 	sub	objptr, ##1080
08ec4     F2 16 02 F1 | 	add	arg03, objptr
08ec8     0B 13 02 FB | 	rdlong	arg01, arg03
08ecc     00 14 06 F6 | 	mov	arg02, #0
08ed0     55 00 00 FF 
08ed4     0C E4 85 F1 | 	sub	objptr, ##43532
08ed8     34 8E B1 FD | 	call	#__system____builtin_atoi
08edc     04 4E 05 F1 | 	add	fp, #4
08ee0     A7 FA 61 FC | 	wrlong	result1, fp
08ee4     6A 00 00 FF 
08ee8     7C E4 05 F1 | 	add	objptr, ##54396
08eec     F2 1E 02 FB | 	rdlong	local01, objptr
08ef0     0F 21 02 F6 | 	mov	local02, local01
08ef4     01 20 66 F0 | 	shl	local02, #1
08ef8     0F 21 02 F1 | 	add	local02, local01
08efc     02 20 66 F0 | 	shl	local02, #2
08f00     03 00 00 FF 
08f04     00 E4 85 F1 | 	sub	objptr, ##1536
08f08     F2 20 02 F1 | 	add	local02, objptr
08f0c     08 20 06 F1 | 	add	local02, #8
08f10     10 9D 68 FC | 	wrlong	#78, local02
08f14     03 00 00 FF 
08f18     08 E4 05 F1 | 	add	objptr, ##1544
08f1c     F2 22 02 FB | 	rdlong	local03, objptr
08f20     6A 00 00 FF 
08f24     84 E4 85 F1 | 	sub	objptr, ##54404
08f28     04 4E 05 F1 | 	add	fp, #4
08f2c     A7 22 62 FC | 	wrlong	local03, fp
08f30     08 4E 85 F1 | 	sub	fp, #8
08f34                 | ' 
08f34                 | '   gotoline=val%(lparts(ct).part$) 
08f34                 | '   compiledline(lineptr).result_type=token_fast_goto
08f34                 | ' ' now find a pointer to goto
08f34                 | '   gotoptr=programstart
08f34                 | '   do
08f34                 | LR__0780
08f34     10 4E 05 F1 | 	add	fp, #16
08f38     A7 12 02 F6 | 	mov	arg01, fp
08f3c     08 4E 85 F1 | 	sub	fp, #8
08f40     A7 14 02 FB | 	rdlong	arg02, fp
08f44     08 4E 85 F1 | 	sub	fp, #8
08f48     18 16 06 F6 | 	mov	arg03, #24
08f4c     0B 00 00 FF 
08f50     CC E4 05 F1 | 	add	objptr, ##5836
08f54     9C 4F B1 FD | 	call	#_psram_spin2_read1
08f58     0B 00 00 FF 
08f5c     CC E4 85 F1 | 	sub	objptr, ##5836
08f60                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
08f60                 | '     if gotoheader(0)<>$FFFFFFFF then
08f60     10 4E 05 F1 | 	add	fp, #16
08f64     A7 22 02 FB | 	rdlong	local03, fp
08f68     10 4E 85 F1 | 	sub	fp, #16
08f6c     FF FF 7F FF 
08f70     FF 23 0E F2 | 	cmp	local03, ##-1 wz
08f74     24 00 90 AD |  if_e	jmp	#LR__0781
08f78     08 4E 05 F1 | 	add	fp, #8
08f7c     A7 22 02 FB | 	rdlong	local03, fp
08f80     04 4E 05 F1 | 	add	fp, #4
08f84     A7 22 62 FC | 	wrlong	local03, fp
08f88     18 4E 05 F1 | 	add	fp, #24
08f8c     A7 22 02 FB | 	rdlong	local03, fp
08f90     1C 4E 85 F1 | 	sub	fp, #28
08f94     A7 22 62 FC | 	wrlong	local03, fp
08f98     08 4E 85 F1 | 	sub	fp, #8
08f9c                 | LR__0781
08f9c     24 4E 05 F1 | 	add	fp, #36
08fa0     A7 22 02 FB | 	rdlong	local03, fp
08fa4     24 4E 85 F1 | 	sub	fp, #36
08fa8     FF FF 3F FF 
08fac     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
08fb0     10 4E 05 51 |  if_ne	add	fp, #16
08fb4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
08fb8     10 4E 85 51 |  if_ne	sub	fp, #16
08fbc     FF FF 7F 5F 
08fc0     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
08fc4     1C 00 90 AD |  if_e	jmp	#LR__0782
08fc8     10 4E 05 F1 | 	add	fp, #16
08fcc     A7 22 02 FB | 	rdlong	local03, fp
08fd0     0C 4E 85 F1 | 	sub	fp, #12
08fd4     A7 20 02 FB | 	rdlong	local02, fp
08fd8     04 4E 85 F1 | 	sub	fp, #4
08fdc     10 23 0A F2 | 	cmp	local03, local02 wz
08fe0     50 FF 9F 5D |  if_ne	jmp	#LR__0780
08fe4                 | LR__0782
08fe4                 | '   if gotoheader(0)=gotoline then
08fe4     10 4E 05 F1 | 	add	fp, #16
08fe8     A7 22 02 FB | 	rdlong	local03, fp
08fec     0C 4E 85 F1 | 	sub	fp, #12
08ff0     A7 1E 02 FB | 	rdlong	local01, fp
08ff4     04 4E 85 F1 | 	sub	fp, #4
08ff8     0F 23 0A F2 | 	cmp	local03, local01 wz
08ffc     7C 00 90 5D |  if_ne	jmp	#LR__0783
09000     6A 00 00 FF 
09004     7C E4 05 F1 | 	add	objptr, ##54396
09008     F2 1E 02 FB | 	rdlong	local01, objptr
0900c     0F 21 02 F6 | 	mov	local02, local01
09010     01 20 66 F0 | 	shl	local02, #1
09014     0F 21 02 F1 | 	add	local02, local01
09018     02 20 66 F0 | 	shl	local02, #2
0901c     03 00 00 FF 
09020     00 E4 85 F1 | 	sub	objptr, ##1536
09024     F2 20 02 F1 | 	add	local02, objptr
09028     0C 4E 05 F1 | 	add	fp, #12
0902c     A7 22 02 FB | 	rdlong	local03, fp
09030     10 23 62 FC | 	wrlong	local03, local02
09034     03 00 00 FF 
09038     00 E4 05 F1 | 	add	objptr, ##1536
0903c     F2 1E 02 FB | 	rdlong	local01, objptr
09040     0F 21 02 F6 | 	mov	local02, local01
09044     01 20 66 F0 | 	shl	local02, #1
09048     0F 21 02 F1 | 	add	local02, local01
0904c     02 20 66 F0 | 	shl	local02, #2
09050     03 00 00 FF 
09054     00 E4 85 F1 | 	sub	objptr, ##1536
09058     F2 20 02 F1 | 	add	local02, objptr
0905c     08 4E 85 F1 | 	sub	fp, #8
09060     A7 22 02 FB | 	rdlong	local03, fp
09064     04 4E 85 F1 | 	sub	fp, #4
09068     04 20 06 F1 | 	add	local02, #4
0906c     10 23 62 FC | 	wrlong	local03, local02
09070     67 00 00 FF 
09074     7C E4 85 F1 | 	sub	objptr, ##52860
09078     A4 00 90 FD | 	jmp	#LR__0784
0907c                 | LR__0783
0907c     6A 00 00 FF 
09080     7C E4 05 F1 | 	add	objptr, ##54396
09084     F2 1E 02 FB | 	rdlong	local01, objptr
09088     0F 21 02 F6 | 	mov	local02, local01
0908c     01 20 66 F0 | 	shl	local02, #1
09090     0F 21 02 F1 | 	add	local02, local01
09094     02 20 66 F0 | 	shl	local02, #2
09098     03 00 00 FF 
0909c     00 E4 85 F1 | 	sub	objptr, ##1536
090a0     F2 20 02 F1 | 	add	local02, objptr
090a4     00 00 C0 FF 
090a8     10 01 68 FC | 	wrlong	##-2147483648, local02
090ac     03 00 00 FF 
090b0     00 E4 05 F1 | 	add	objptr, ##1536
090b4     F2 1E 02 FB | 	rdlong	local01, objptr
090b8     0F 21 02 F6 | 	mov	local02, local01
090bc     01 20 66 F0 | 	shl	local02, #1
090c0     0F 21 02 F1 | 	add	local02, local01
090c4     02 20 66 F0 | 	shl	local02, #2
090c8     03 00 00 FF 
090cc     00 E4 85 F1 | 	sub	objptr, ##1536
090d0     F2 20 02 F1 | 	add	local02, objptr
090d4     04 4E 05 F1 | 	add	fp, #4
090d8     A7 22 02 FB | 	rdlong	local03, fp
090dc     04 4E 85 F1 | 	sub	fp, #4
090e0     04 20 06 F1 | 	add	local02, #4
090e4     10 23 62 FC | 	wrlong	local03, local02
090e8     03 00 00 FF 
090ec     00 E4 05 F1 | 	add	objptr, ##1536
090f0     F2 1E 02 FB | 	rdlong	local01, objptr
090f4     0F 21 02 F6 | 	mov	local02, local01
090f8     01 20 66 F0 | 	shl	local02, #1
090fc     0F 21 02 F1 | 	add	local02, local01
09100     02 20 66 F0 | 	shl	local02, #2
09104     03 00 00 FF 
09108     00 E4 85 F1 | 	sub	objptr, ##1536
0910c     F2 20 02 F1 | 	add	local02, objptr
09110     08 20 06 F1 | 	add	local02, #8
09114     10 A7 68 FC | 	wrlong	#83, local02
09118     67 00 00 FF 
0911c     7C E4 85 F1 | 	sub	objptr, ##52860
09120                 | LR__0784
09120     6A 00 00 FF 
09124     7C E4 05 F1 | 	add	objptr, ##54396
09128     F2 22 02 FB | 	rdlong	local03, objptr
0912c     01 22 06 F1 | 	add	local03, #1
09130     F2 22 62 FC | 	wrlong	local03, objptr
09134     6A 00 00 FF 
09138     7C E4 85 F1 | 	sub	objptr, ##54396
0913c     D0 00 90 FD | 	jmp	#LR__0786
09140                 | LR__0785
09140     DC 00 B0 FD | 	call	#_expr
09144     30 4E 05 F1 | 	add	fp, #48
09148     A7 9E 68 FC | 	wrlong	#79, fp
0914c     08 4E 85 F1 | 	sub	fp, #8
09150     A7 00 68 FC | 	wrlong	#0, fp
09154     04 4E 05 F1 | 	add	fp, #4
09158     A7 22 02 FB | 	rdlong	local03, fp
0915c     04 4E 05 F1 | 	add	fp, #4
09160     A7 1E 02 FB | 	rdlong	local01, fp
09164     30 4E 85 F1 | 	sub	fp, #48
09168     6A 00 00 FF 
0916c     7C E4 05 F1 | 	add	objptr, ##54396
09170     F2 20 02 FB | 	rdlong	local02, objptr
09174     10 17 02 F6 | 	mov	arg03, local02
09178     01 16 66 F0 | 	shl	arg03, #1
0917c     10 17 02 F1 | 	add	arg03, local02
09180     02 16 66 F0 | 	shl	arg03, #2
09184     03 00 00 FF 
09188     00 E4 85 F1 | 	sub	objptr, ##1536
0918c     F2 16 02 F1 | 	add	arg03, objptr
09190     0B 01 68 FC | 	wrlong	#0, arg03
09194     03 00 00 FF 
09198     00 E4 05 F1 | 	add	objptr, ##1536
0919c     F2 20 02 FB | 	rdlong	local02, objptr
091a0     10 17 02 F6 | 	mov	arg03, local02
091a4     01 16 66 F0 | 	shl	arg03, #1
091a8     10 17 02 F1 | 	add	arg03, local02
091ac     02 16 66 F0 | 	shl	arg03, #2
091b0     03 00 00 FF 
091b4     00 E4 85 F1 | 	sub	objptr, ##1536
091b8     F2 16 02 F1 | 	add	arg03, objptr
091bc     04 16 06 F1 | 	add	arg03, #4
091c0     0B 23 62 FC | 	wrlong	local03, arg03
091c4     03 00 00 FF 
091c8     00 E4 05 F1 | 	add	objptr, ##1536
091cc     F2 22 02 FB | 	rdlong	local03, objptr
091d0     11 21 02 F6 | 	mov	local02, local03
091d4     01 20 66 F0 | 	shl	local02, #1
091d8     11 21 02 F1 | 	add	local02, local03
091dc     02 20 66 F0 | 	shl	local02, #2
091e0     03 00 00 FF 
091e4     00 E4 85 F1 | 	sub	objptr, ##1536
091e8     F2 20 02 F1 | 	add	local02, objptr
091ec     08 20 06 F1 | 	add	local02, #8
091f0     10 1F 62 FC | 	wrlong	local01, local02
091f4     03 00 00 FF 
091f8     00 E4 05 F1 | 	add	objptr, ##1536
091fc     F2 22 02 FB | 	rdlong	local03, objptr
09200     01 22 06 F1 | 	add	local03, #1
09204     F2 22 62 FC | 	wrlong	local03, objptr
09208     6A 00 00 FF 
0920c     7C E4 85 F1 | 	sub	objptr, ##54396
09210                 | LR__0786
09210                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
09210                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
09210                 | ' return 0
09210     00 FA 05 F6 | 	mov	result1, #0
09214     A7 F0 03 F6 | 	mov	ptra, fp
09218     B2 00 A0 FD | 	call	#popregs_
0921c                 | _compile_goto_ret
0921c     2D 00 64 FD | 	ret
09220                 | 
09220                 | ' 
09220                 | ' 
09220                 | ' 
09220                 | ' 
09220                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09220                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
09220                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09220                 | ' 
09220                 | ' 
09220                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09220                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
09220                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09220                 | ' 
09220                 | ' 
09220                 | ' function expr() as integer 
09220                 | _expr
09220     07 4A 05 F6 | 	mov	COUNT_, #7
09224     A8 00 A0 FD | 	call	#pushregs_
09228                 | _expr_enter
09228     57 00 00 FF 
0922c     44 E4 05 F1 | 	add	objptr, ##44612
09230     F2 24 02 FB | 	rdlong	local04, objptr
09234     03 24 66 F0 | 	shl	local04, #3
09238     02 00 00 FF 
0923c     38 E4 85 F1 | 	sub	objptr, ##1080
09240     F2 24 02 F1 | 	add	local04, objptr
09244     04 24 06 F1 | 	add	local04, #4
09248     12 27 02 FB | 	rdlong	local05, local04
0924c                 | ' 
0924c                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0924c     FE 27 0E F2 | 	cmp	local05, #510 wz
09250     55 00 00 FF 
09254     0C E4 85 F1 | 	sub	objptr, ##43532
09258     C4 00 90 5D |  if_ne	jmp	#LR__0790
0925c     1D 1E 06 F6 | 	mov	local01, #29
09260     FF 22 06 F6 | 	mov	local03, #255
09264     0F 29 02 F6 | 	mov	local06, local01
09268     10 2B 02 F6 | 	mov	local07, local02
0926c     11 1F 02 F6 | 	mov	local01, local03
09270     6A 00 00 FF 
09274     7C E4 05 F1 | 	add	objptr, ##54396
09278     F2 26 02 FB | 	rdlong	local05, objptr
0927c     13 25 02 F6 | 	mov	local04, local05
09280     01 24 66 F0 | 	shl	local04, #1
09284     13 25 02 F1 | 	add	local04, local05
09288     02 24 66 F0 | 	shl	local04, #2
0928c     03 00 00 FF 
09290     00 E4 85 F1 | 	sub	objptr, ##1536
09294     F2 24 02 F1 | 	add	local04, objptr
09298     12 29 62 FC | 	wrlong	local06, local04
0929c     03 00 00 FF 
092a0     00 E4 05 F1 | 	add	objptr, ##1536
092a4     F2 28 02 FB | 	rdlong	local06, objptr
092a8     14 27 02 F6 | 	mov	local05, local06
092ac     01 26 66 F0 | 	shl	local05, #1
092b0     14 27 02 F1 | 	add	local05, local06
092b4     02 26 66 F0 | 	shl	local05, #2
092b8     03 00 00 FF 
092bc     00 E4 85 F1 | 	sub	objptr, ##1536
092c0     F2 26 02 F1 | 	add	local05, objptr
092c4     04 26 06 F1 | 	add	local05, #4
092c8     13 2B 62 FC | 	wrlong	local07, local05
092cc     03 00 00 FF 
092d0     00 E4 05 F1 | 	add	objptr, ##1536
092d4     F2 2A 02 FB | 	rdlong	local07, objptr
092d8     15 29 02 F6 | 	mov	local06, local07
092dc     01 28 66 F0 | 	shl	local06, #1
092e0     15 29 02 F1 | 	add	local06, local07
092e4     02 28 66 F0 | 	shl	local06, #2
092e8     03 00 00 FF 
092ec     00 E4 85 F1 | 	sub	objptr, ##1536
092f0     F2 28 02 F1 | 	add	local06, objptr
092f4     08 28 06 F1 | 	add	local06, #8
092f8     14 1F 62 FC | 	wrlong	local01, local06
092fc     03 00 00 FF 
09300     00 E4 05 F1 | 	add	objptr, ##1536
09304     F2 28 02 FB | 	rdlong	local06, objptr
09308     01 28 06 F1 | 	add	local06, #1
0930c     F2 28 62 FC | 	wrlong	local06, objptr
09310     6A 00 00 FF 
09314     7C E4 85 F1 | 	sub	objptr, ##54396
09318     1D FA 05 F6 | 	mov	result1, #29
0931c     54 01 90 FD | 	jmp	#LR__0793
09320                 | LR__0790
09320     00 1E 06 F6 | 	mov	local01, #0
09324     58 01 B0 FD | 	call	#_addsub
09328     57 00 00 FF 
0932c     44 E4 05 F1 | 	add	objptr, ##44612
09330     F2 24 02 FB | 	rdlong	local04, objptr
09334     03 24 66 F0 | 	shl	local04, #3
09338     02 00 00 FF 
0933c     38 E4 85 F1 | 	sub	objptr, ##1080
09340     F2 24 02 F1 | 	add	local04, objptr
09344     04 24 06 F1 | 	add	local04, #4
09348     12 27 02 FB | 	rdlong	local05, local04
0934c                 | ' t3.result.uresult=0
0934c                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
0934c                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
0934c                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0934c     55 00 00 FF 
09350     0C E4 85 F1 | 	sub	objptr, ##43532
09354                 | LR__0791
09354     1B 26 0E F2 | 	cmp	local05, #27 wz
09358     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
0935c     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
09360     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
09364     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
09368     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
0936c     00 01 90 5D |  if_ne	jmp	#LR__0792
09370     57 00 00 FF 
09374     44 E4 05 F1 | 	add	objptr, ##44612
09378     F2 28 02 FB | 	rdlong	local06, objptr
0937c     01 28 06 F1 | 	add	local06, #1
09380     F2 28 62 FC | 	wrlong	local06, objptr
09384     57 00 00 FF 
09388     44 E4 85 F1 | 	sub	objptr, ##44612
0938c     F0 00 B0 FD | 	call	#_addsub
09390     13 23 02 F6 | 	mov	local03, local05
09394     0F 29 02 F6 | 	mov	local06, local01
09398     10 2B 02 F6 | 	mov	local07, local02
0939c     11 27 02 F6 | 	mov	local05, local03
093a0     6A 00 00 FF 
093a4     7C E4 05 F1 | 	add	objptr, ##54396
093a8     F2 24 02 FB | 	rdlong	local04, objptr
093ac     12 FB 01 F6 | 	mov	result1, local04
093b0     01 FA 65 F0 | 	shl	result1, #1
093b4     12 FB 01 F1 | 	add	result1, local04
093b8     02 FA 65 F0 | 	shl	result1, #2
093bc     03 00 00 FF 
093c0     00 E4 85 F1 | 	sub	objptr, ##1536
093c4     F2 FA 01 F1 | 	add	result1, objptr
093c8     FD 28 62 FC | 	wrlong	local06, result1
093cc     03 00 00 FF 
093d0     00 E4 05 F1 | 	add	objptr, ##1536
093d4     F2 28 02 FB | 	rdlong	local06, objptr
093d8     14 25 02 F6 | 	mov	local04, local06
093dc     01 24 66 F0 | 	shl	local04, #1
093e0     14 25 02 F1 | 	add	local04, local06
093e4     02 24 66 F0 | 	shl	local04, #2
093e8     03 00 00 FF 
093ec     00 E4 85 F1 | 	sub	objptr, ##1536
093f0     F2 24 02 F1 | 	add	local04, objptr
093f4     04 24 06 F1 | 	add	local04, #4
093f8     12 2B 62 FC | 	wrlong	local07, local04
093fc     03 00 00 FF 
09400     00 E4 05 F1 | 	add	objptr, ##1536
09404     F2 2A 02 FB | 	rdlong	local07, objptr
09408     15 29 02 F6 | 	mov	local06, local07
0940c     01 28 66 F0 | 	shl	local06, #1
09410     15 29 02 F1 | 	add	local06, local07
09414     02 28 66 F0 | 	shl	local06, #2
09418     03 00 00 FF 
0941c     00 E4 85 F1 | 	sub	objptr, ##1536
09420     F2 28 02 F1 | 	add	local06, objptr
09424     08 28 06 F1 | 	add	local06, #8
09428     14 27 62 FC | 	wrlong	local05, local06
0942c     03 00 00 FF 
09430     00 E4 05 F1 | 	add	objptr, ##1536
09434     F2 28 02 FB | 	rdlong	local06, objptr
09438     01 28 06 F1 | 	add	local06, #1
0943c     F2 28 62 FC | 	wrlong	local06, objptr
09440     13 00 00 FF 
09444     38 E4 85 F1 | 	sub	objptr, ##9784
09448     F2 24 02 FB | 	rdlong	local04, objptr
0944c     03 24 66 F0 | 	shl	local04, #3
09450     02 00 00 FF 
09454     38 E4 85 F1 | 	sub	objptr, ##1080
09458     F2 24 02 F1 | 	add	local04, objptr
0945c     04 24 06 F1 | 	add	local04, #4
09460     12 27 02 FB | 	rdlong	local05, local04
09464     55 00 00 FF 
09468     0C E4 85 F1 | 	sub	objptr, ##43532
0946c     E4 FE 9F FD | 	jmp	#LR__0791
09470                 | LR__0792
09470                 | ' return 0  
09470     00 FA 05 F6 | 	mov	result1, #0
09474                 | LR__0793
09474     A7 F0 03 F6 | 	mov	ptra, fp
09478     B2 00 A0 FD | 	call	#popregs_
0947c                 | _expr_ret
0947c     2D 00 64 FD | 	ret
09480                 | 
09480                 | ' 
09480                 | ' 
09480                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
09480                 | ' 
09480                 | ' function addsub() as integer 
09480                 | _addsub
09480     07 4A 05 F6 | 	mov	COUNT_, #7
09484     A8 00 A0 FD | 	call	#pushregs_
09488                 | _addsub_enter
09488     00 1E 06 F6 | 	mov	local01, #0
0948c     50 01 B0 FD | 	call	#_muldiv
09490     57 00 00 FF 
09494     44 E4 05 F1 | 	add	objptr, ##44612
09498     F2 24 02 FB | 	rdlong	local04, objptr
0949c     03 24 66 F0 | 	shl	local04, #3
094a0     02 00 00 FF 
094a4     38 E4 85 F1 | 	sub	objptr, ##1080
094a8     F2 24 02 F1 | 	add	local04, objptr
094ac     04 24 06 F1 | 	add	local04, #4
094b0     12 27 02 FB | 	rdlong	local05, local04
094b4                 | ' t3.result.uresult=0
094b4                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
094b4                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
094b4                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
094b4     55 00 00 FF 
094b8     0C E4 85 F1 | 	sub	objptr, ##43532
094bc                 | LR__0800
094bc     01 26 0E F2 | 	cmp	local05, #1 wz
094c0     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
094c4     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
094c8     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
094cc     00 01 90 5D |  if_ne	jmp	#LR__0801
094d0     57 00 00 FF 
094d4     44 E4 05 F1 | 	add	objptr, ##44612
094d8     F2 24 02 FB | 	rdlong	local04, objptr
094dc     01 24 06 F1 | 	add	local04, #1
094e0     F2 24 62 FC | 	wrlong	local04, objptr
094e4     57 00 00 FF 
094e8     44 E4 85 F1 | 	sub	objptr, ##44612
094ec     F0 00 B0 FD | 	call	#_muldiv
094f0     13 23 02 F6 | 	mov	local03, local05
094f4     0F 29 02 F6 | 	mov	local06, local01
094f8     10 2B 02 F6 | 	mov	local07, local02
094fc     11 27 02 F6 | 	mov	local05, local03
09500     6A 00 00 FF 
09504     7C E4 05 F1 | 	add	objptr, ##54396
09508     F2 24 02 FB | 	rdlong	local04, objptr
0950c     12 FB 01 F6 | 	mov	result1, local04
09510     01 FA 65 F0 | 	shl	result1, #1
09514     12 FB 01 F1 | 	add	result1, local04
09518     02 FA 65 F0 | 	shl	result1, #2
0951c     03 00 00 FF 
09520     00 E4 85 F1 | 	sub	objptr, ##1536
09524     F2 FA 01 F1 | 	add	result1, objptr
09528     FD 28 62 FC | 	wrlong	local06, result1
0952c     03 00 00 FF 
09530     00 E4 05 F1 | 	add	objptr, ##1536
09534     F2 28 02 FB | 	rdlong	local06, objptr
09538     14 25 02 F6 | 	mov	local04, local06
0953c     01 24 66 F0 | 	shl	local04, #1
09540     14 25 02 F1 | 	add	local04, local06
09544     02 24 66 F0 | 	shl	local04, #2
09548     03 00 00 FF 
0954c     00 E4 85 F1 | 	sub	objptr, ##1536
09550     F2 24 02 F1 | 	add	local04, objptr
09554     04 24 06 F1 | 	add	local04, #4
09558     12 2B 62 FC | 	wrlong	local07, local04
0955c     03 00 00 FF 
09560     00 E4 05 F1 | 	add	objptr, ##1536
09564     F2 2A 02 FB | 	rdlong	local07, objptr
09568     15 29 02 F6 | 	mov	local06, local07
0956c     01 28 66 F0 | 	shl	local06, #1
09570     15 29 02 F1 | 	add	local06, local07
09574     02 28 66 F0 | 	shl	local06, #2
09578     03 00 00 FF 
0957c     00 E4 85 F1 | 	sub	objptr, ##1536
09580     F2 28 02 F1 | 	add	local06, objptr
09584     08 28 06 F1 | 	add	local06, #8
09588     14 27 62 FC | 	wrlong	local05, local06
0958c     03 00 00 FF 
09590     00 E4 05 F1 | 	add	objptr, ##1536
09594     F2 28 02 FB | 	rdlong	local06, objptr
09598     01 28 06 F1 | 	add	local06, #1
0959c     F2 28 62 FC | 	wrlong	local06, objptr
095a0     13 00 00 FF 
095a4     38 E4 85 F1 | 	sub	objptr, ##9784
095a8     F2 24 02 FB | 	rdlong	local04, objptr
095ac     03 24 66 F0 | 	shl	local04, #3
095b0     02 00 00 FF 
095b4     38 E4 85 F1 | 	sub	objptr, ##1080
095b8     F2 24 02 F1 | 	add	local04, objptr
095bc     04 24 06 F1 | 	add	local04, #4
095c0     12 27 02 FB | 	rdlong	local05, local04
095c4     55 00 00 FF 
095c8     0C E4 85 F1 | 	sub	objptr, ##43532
095cc     EC FE 9F FD | 	jmp	#LR__0800
095d0                 | LR__0801
095d0                 | '   return 0
095d0     00 FA 05 F6 | 	mov	result1, #0
095d4     A7 F0 03 F6 | 	mov	ptra, fp
095d8     B2 00 A0 FD | 	call	#popregs_
095dc                 | _addsub_ret
095dc     2D 00 64 FD | 	ret
095e0                 | 
095e0                 | ' 
095e0                 | ' sub muldiv()
095e0                 | _muldiv
095e0     08 4A 05 F6 | 	mov	COUNT_, #8
095e4     A8 00 A0 FD | 	call	#pushregs_
095e8                 | _muldiv_enter
095e8     00 1E 06 F6 | 	mov	local01, #0
095ec     58 01 B0 FD | 	call	#_getvalue
095f0     57 00 00 FF 
095f4     44 E4 05 F1 | 	add	objptr, ##44612
095f8     F2 24 02 FB | 	rdlong	local04, objptr
095fc     03 24 66 F0 | 	shl	local04, #3
09600     02 00 00 FF 
09604     38 E4 85 F1 | 	sub	objptr, ##1080
09608     F2 24 02 F1 | 	add	local04, objptr
0960c     04 24 06 F1 | 	add	local04, #4
09610     12 27 02 FB | 	rdlong	local05, local04
09614                 | ' t3.result.uresult=0
09614                 | ' getvalue()    
09614                 | ' op = lparts(ct).token
09614                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
09614     55 00 00 FF 
09618     0C E4 85 F1 | 	sub	objptr, ##43532
0961c                 | LR__0810
0961c     05 26 0E F2 | 	cmp	local05, #5 wz
09620     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
09624     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
09628     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
0962c     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
09630     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
09634     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
09638     00 01 90 5D |  if_ne	jmp	#LR__0811
0963c     57 00 00 FF 
09640     44 E4 05 F1 | 	add	objptr, ##44612
09644     F2 24 02 FB | 	rdlong	local04, objptr
09648     01 24 06 F1 | 	add	local04, #1
0964c     F2 24 62 FC | 	wrlong	local04, objptr
09650     57 00 00 FF 
09654     44 E4 85 F1 | 	sub	objptr, ##44612
09658     EC 00 B0 FD | 	call	#_getvalue
0965c     13 23 02 F6 | 	mov	local03, local05
09660     0F 29 02 F6 | 	mov	local06, local01
09664     10 2B 02 F6 | 	mov	local07, local02
09668     11 27 02 F6 | 	mov	local05, local03
0966c     6A 00 00 FF 
09670     7C E4 05 F1 | 	add	objptr, ##54396
09674     F2 24 02 FB | 	rdlong	local04, objptr
09678     12 2D 02 F6 | 	mov	local08, local04
0967c     01 2C 66 F0 | 	shl	local08, #1
09680     12 2D 02 F1 | 	add	local08, local04
09684     02 2C 66 F0 | 	shl	local08, #2
09688     03 00 00 FF 
0968c     00 E4 85 F1 | 	sub	objptr, ##1536
09690     F2 2C 02 F1 | 	add	local08, objptr
09694     16 29 62 FC | 	wrlong	local06, local08
09698     03 00 00 FF 
0969c     00 E4 05 F1 | 	add	objptr, ##1536
096a0     F2 2C 02 FB | 	rdlong	local08, objptr
096a4     16 29 02 F6 | 	mov	local06, local08
096a8     01 28 66 F0 | 	shl	local06, #1
096ac     16 29 02 F1 | 	add	local06, local08
096b0     02 28 66 F0 | 	shl	local06, #2
096b4     03 00 00 FF 
096b8     00 E4 85 F1 | 	sub	objptr, ##1536
096bc     F2 28 02 F1 | 	add	local06, objptr
096c0     04 28 06 F1 | 	add	local06, #4
096c4     14 2B 62 FC | 	wrlong	local07, local06
096c8     03 00 00 FF 
096cc     00 E4 05 F1 | 	add	objptr, ##1536
096d0     F2 2C 02 FB | 	rdlong	local08, objptr
096d4     16 2B 02 F6 | 	mov	local07, local08
096d8     01 2A 66 F0 | 	shl	local07, #1
096dc     16 2B 02 F1 | 	add	local07, local08
096e0     02 2A 66 F0 | 	shl	local07, #2
096e4     03 00 00 FF 
096e8     00 E4 85 F1 | 	sub	objptr, ##1536
096ec     F2 2A 02 F1 | 	add	local07, objptr
096f0     08 2A 06 F1 | 	add	local07, #8
096f4     15 27 62 FC | 	wrlong	local05, local07
096f8     03 00 00 FF 
096fc     00 E4 05 F1 | 	add	objptr, ##1536
09700     F2 28 02 FB | 	rdlong	local06, objptr
09704     01 28 06 F1 | 	add	local06, #1
09708     F2 28 62 FC | 	wrlong	local06, objptr
0970c     13 00 00 FF 
09710     38 E4 85 F1 | 	sub	objptr, ##9784
09714     F2 24 02 FB | 	rdlong	local04, objptr
09718     03 24 66 F0 | 	shl	local04, #3
0971c     02 00 00 FF 
09720     38 E4 85 F1 | 	sub	objptr, ##1080
09724     F2 24 02 F1 | 	add	local04, objptr
09728     04 24 06 F1 | 	add	local04, #4
0972c     12 27 02 FB | 	rdlong	local05, local04
09730     55 00 00 FF 
09734     0C E4 85 F1 | 	sub	objptr, ##43532
09738     E0 FE 9F FD | 	jmp	#LR__0810
0973c                 | LR__0811
0973c     A7 F0 03 F6 | 	mov	ptra, fp
09740     B2 00 A0 FD | 	call	#popregs_
09744                 | _muldiv_ret
09744     2D 00 64 FD | 	ret
09748                 | 
09748                 | ' 
09748                 | ' sub getvalue() 
09748                 | _getvalue
09748     0B 4A 05 F6 | 	mov	COUNT_, #11
0974c     A8 00 A0 FD | 	call	#pushregs_
09750                 | _getvalue_enter
09750     01 24 06 F6 | 	mov	local04, #1
09754     00 1E 06 F6 | 	mov	local01, #0
09758     1D 22 06 F6 | 	mov	local03, #29
0975c     57 00 00 FF 
09760     44 E4 05 F1 | 	add	objptr, ##44612
09764     F2 16 02 FB | 	rdlong	arg03, objptr
09768     03 16 66 F0 | 	shl	arg03, #3
0976c     02 00 00 FF 
09770     38 E4 85 F1 | 	sub	objptr, ##1080
09774     F2 16 02 F1 | 	add	arg03, objptr
09778     04 16 06 F1 | 	add	arg03, #4
0977c     0B 27 02 FB | 	rdlong	local05, arg03
09780                 | ' m=1
09780                 | ' t1.result.uresult=0: t1.result_type=result_uint
09780                 | ' op=lparts(ct).token
09780                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
09780     02 26 0E F2 | 	cmp	local05, #2 wz
09784     55 00 00 FF 
09788     0C E4 85 F1 | 	sub	objptr, ##43532
0978c     38 00 90 5D |  if_ne	jmp	#LR__0820
09790     01 24 66 F6 | 	neg	local04, #1
09794     57 00 00 FF 
09798     44 E4 05 F1 | 	add	objptr, ##44612
0979c     F2 26 02 FB | 	rdlong	local05, objptr
097a0     01 26 06 F1 | 	add	local05, #1
097a4     F2 26 62 FC | 	wrlong	local05, objptr
097a8     03 26 66 F0 | 	shl	local05, #3
097ac     02 00 00 FF 
097b0     38 E4 85 F1 | 	sub	objptr, ##1080
097b4     F2 26 02 F1 | 	add	local05, objptr
097b8     04 26 06 F1 | 	add	local05, #4
097bc     13 27 02 FB | 	rdlong	local05, local05
097c0     55 00 00 FF 
097c4     0C E4 85 F1 | 	sub	objptr, ##43532
097c8                 | LR__0820
097c8                 | ' select case op
097c8     01 00 00 FF 
097cc     00 26 0E F2 | 	cmp	local05, ##512 wz
097d0     3C 00 90 AD |  if_e	jmp	#LR__0821
097d4     01 00 00 FF 
097d8     01 26 0E F2 | 	cmp	local05, ##513 wz
097dc     88 01 90 AD |  if_e	jmp	#LR__0824
097e0     01 00 00 FF 
097e4     02 26 0E F2 | 	cmp	local05, ##514 wz
097e8     3C 04 90 AD |  if_e	jmp	#LR__0831
097ec     01 00 00 FF 
097f0     03 26 0E F2 | 	cmp	local05, ##515 wz
097f4     A0 05 90 AD |  if_e	jmp	#LR__0834
097f8     01 00 00 FF 
097fc     04 26 0E F2 | 	cmp	local05, ##516 wz
09800     70 07 90 AD |  if_e	jmp	#LR__0839
09804     15 26 0E F2 | 	cmp	local05, #21 wz
09808     90 07 90 AD |  if_e	jmp	#LR__0840
0980c     00 08 90 FD | 	jmp	#LR__0841
09810                 | LR__0821
09810                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
09810     01 24 0E F2 | 	cmp	local04, #1 wz
09814     3C 00 90 5D |  if_ne	jmp	#LR__0822
09818     57 00 00 FF 
0981c     44 E4 05 F1 | 	add	objptr, ##44612
09820     F2 26 02 FB | 	rdlong	local05, objptr
09824     03 26 66 F0 | 	shl	local05, #3
09828     02 00 00 FF 
0982c     38 E4 85 F1 | 	sub	objptr, ##1080
09830     F2 26 02 F1 | 	add	local05, objptr
09834     13 13 02 FB | 	rdlong	arg01, local05
09838     00 14 06 F6 | 	mov	arg02, #0
0983c     55 00 00 FF 
09840     0C E4 85 F1 | 	sub	objptr, ##43532
09844     C8 84 B1 FD | 	call	#__system____builtin_atoi
09848     FD 24 02 FD | 	qmul	local04, result1
0984c     18 1E 62 FD | 	getqx	local01
09850     1C 22 06 F6 | 	mov	local03, #28
09854                 | LR__0822
09854                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
09854     FF FF 7F FF 
09858     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0985c     3C 00 90 5D |  if_ne	jmp	#LR__0823
09860     57 00 00 FF 
09864     44 E4 05 F1 | 	add	objptr, ##44612
09868     F2 26 02 FB | 	rdlong	local05, objptr
0986c     03 26 66 F0 | 	shl	local05, #3
09870     02 00 00 FF 
09874     38 E4 85 F1 | 	sub	objptr, ##1080
09878     F2 26 02 F1 | 	add	local05, objptr
0987c     13 13 02 FB | 	rdlong	arg01, local05
09880     00 14 06 F6 | 	mov	arg02, #0
09884     55 00 00 FF 
09888     0C E4 85 F1 | 	sub	objptr, ##43532
0988c     80 84 B1 FD | 	call	#__system____builtin_atoi
09890     FD 24 02 FD | 	qmul	local04, result1
09894     18 1E 62 FD | 	getqx	local01
09898     1C 22 06 F6 | 	mov	local03, #28
0989c                 | LR__0823
0989c     0F 29 02 F6 | 	mov	local06, local01
098a0     10 2B 02 F6 | 	mov	local07, local02
098a4     11 27 02 F6 | 	mov	local05, local03
098a8     6A 00 00 FF 
098ac     7C E4 05 F1 | 	add	objptr, ##54396
098b0     F2 1E 02 FB | 	rdlong	local01, objptr
098b4     0F 25 02 F6 | 	mov	local04, local01
098b8     01 24 66 F0 | 	shl	local04, #1
098bc     0F 25 02 F1 | 	add	local04, local01
098c0     02 24 66 F0 | 	shl	local04, #2
098c4     03 00 00 FF 
098c8     00 E4 85 F1 | 	sub	objptr, ##1536
098cc     F2 24 02 F1 | 	add	local04, objptr
098d0     12 29 62 FC | 	wrlong	local06, local04
098d4     03 00 00 FF 
098d8     00 E4 05 F1 | 	add	objptr, ##1536
098dc     F2 28 02 FB | 	rdlong	local06, objptr
098e0     14 1F 02 F6 | 	mov	local01, local06
098e4     01 1E 66 F0 | 	shl	local01, #1
098e8     14 1F 02 F1 | 	add	local01, local06
098ec     02 1E 66 F0 | 	shl	local01, #2
098f0     03 00 00 FF 
098f4     00 E4 85 F1 | 	sub	objptr, ##1536
098f8     F2 1E 02 F1 | 	add	local01, objptr
098fc     04 1E 06 F1 | 	add	local01, #4
09900     0F 2B 62 FC | 	wrlong	local07, local01
09904     03 00 00 FF 
09908     00 E4 05 F1 | 	add	objptr, ##1536
0990c     F2 2A 02 FB | 	rdlong	local07, objptr
09910     15 29 02 F6 | 	mov	local06, local07
09914     01 28 66 F0 | 	shl	local06, #1
09918     15 29 02 F1 | 	add	local06, local07
0991c     02 28 66 F0 | 	shl	local06, #2
09920     03 00 00 FF 
09924     00 E4 85 F1 | 	sub	objptr, ##1536
09928     F2 28 02 F1 | 	add	local06, objptr
0992c     08 28 06 F1 | 	add	local06, #8
09930     14 27 62 FC | 	wrlong	local05, local06
09934     03 00 00 FF 
09938     00 E4 05 F1 | 	add	objptr, ##1536
0993c     F2 28 02 FB | 	rdlong	local06, objptr
09940     01 28 06 F1 | 	add	local06, #1
09944     F2 28 62 FC | 	wrlong	local06, objptr
09948     13 00 00 FF 
0994c     38 E4 85 F1 | 	sub	objptr, ##9784
09950     F2 28 02 FB | 	rdlong	local06, objptr
09954     01 28 06 F1 | 	add	local06, #1
09958     F2 28 62 FC | 	wrlong	local06, objptr
0995c     57 00 00 FF 
09960     44 E4 85 F1 | 	sub	objptr, ##44612
09964     CC 06 90 FD | 	jmp	#LR__0842
09968                 | LR__0824
09968                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
09968     57 00 00 FF 
0996c     44 E4 05 F1 | 	add	objptr, ##44612
09970     F2 16 02 FB | 	rdlong	arg03, objptr
09974     03 16 66 F0 | 	shl	arg03, #3
09978     02 00 00 FF 
0997c     38 E4 85 F1 | 	sub	objptr, ##1080
09980     F2 16 02 F1 | 	add	arg03, objptr
09984     0B 13 02 FB | 	rdlong	arg01, arg03
09988     01 14 06 F6 | 	mov	arg02, #1
0998c     55 00 00 FF 
09990     0C E4 85 F1 | 	sub	objptr, ##43532
09994     C8 71 B1 FD | 	call	#__system__Left_S
09998     FD 12 02 F6 | 	mov	arg01, result1
0999c     73 01 00 FF 
099a0     C1 14 06 F6 | 	mov	arg02, ##@LR__5113
099a4     98 51 B1 FD | 	call	#__system___string_cmp
099a8     00 FA 0D F2 | 	cmp	result1, #0 wz
099ac     94 00 90 5D |  if_ne	jmp	#LR__0827
099b0     57 00 00 FF 
099b4     44 E4 05 F1 | 	add	objptr, ##44612
099b8     F2 2A 02 FB | 	rdlong	local07, objptr
099bc     15 29 02 F6 | 	mov	local06, local07
099c0     03 28 66 F0 | 	shl	local06, #3
099c4     02 00 00 FF 
099c8     38 E4 85 F1 | 	sub	objptr, ##1080
099cc     F2 28 02 F1 | 	add	local06, objptr
099d0     73 01 00 FF 
099d4     C3 26 06 F6 | 	mov	local05, ##@LR__5114
099d8     03 2A 66 F0 | 	shl	local07, #3
099dc     F2 2A 02 F1 | 	add	local07, objptr
099e0     15 2B 02 FB | 	rdlong	local07, local07
099e4     02 00 00 FF 
099e8     38 E4 05 F1 | 	add	objptr, ##1080
099ec     F2 1E 02 FB | 	rdlong	local01, objptr
099f0     03 1E 66 F0 | 	shl	local01, #3
099f4     02 00 00 FF 
099f8     38 E4 85 F1 | 	sub	objptr, ##1080
099fc     F2 1E 02 F1 | 	add	local01, objptr
09a00     0F 13 02 FB | 	rdlong	arg01, local01
09a04     55 00 00 FF 
09a08     0C E4 85 F1 | 	sub	objptr, ##43532
09a0c     09 2D 02 F6 | 	mov	local08, arg01
09a10     97 06 48 FB | 	callpa	#(@LR__0826-@LR__0825)>>2,fcache_load_ptr_
09a14                 | LR__0825
09a14     16 FB C9 FA | 	rdbyte	result1, local08 wz
09a18     01 2C 06 51 |  if_ne	add	local08, #1
09a1c     F4 FF 9F 5D |  if_ne	jmp	#LR__0825
09a20                 | LR__0826
09a20     09 2D 82 F1 | 	sub	local08, arg01
09a24     16 15 02 F6 | 	mov	arg02, local08
09a28     01 14 86 F1 | 	sub	arg02, #1
09a2c     15 13 02 F6 | 	mov	arg01, local07
09a30     B4 71 B1 FD | 	call	#__system__Right_S
09a34     FD 14 02 F6 | 	mov	arg02, result1
09a38     13 13 02 F6 | 	mov	arg01, local05
09a3c     34 51 B1 FD | 	call	#__system___string_concat
09a40     14 FB 61 FC | 	wrlong	result1, local06
09a44                 | LR__0827
09a44                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
09a44     57 00 00 FF 
09a48     44 E4 05 F1 | 	add	objptr, ##44612
09a4c     F2 16 02 FB | 	rdlong	arg03, objptr
09a50     03 16 66 F0 | 	shl	arg03, #3
09a54     02 00 00 FF 
09a58     38 E4 85 F1 | 	sub	objptr, ##1080
09a5c     F2 16 02 F1 | 	add	arg03, objptr
09a60     0B 13 02 FB | 	rdlong	arg01, arg03
09a64     01 14 06 F6 | 	mov	arg02, #1
09a68     55 00 00 FF 
09a6c     0C E4 85 F1 | 	sub	objptr, ##43532
09a70     EC 70 B1 FD | 	call	#__system__Left_S
09a74     FD 12 02 F6 | 	mov	arg01, result1
09a78     73 01 00 FF 
09a7c     C6 14 06 F6 | 	mov	arg02, ##@LR__5115
09a80     BC 50 B1 FD | 	call	#__system___string_cmp
09a84     00 FA 0D F2 | 	cmp	result1, #0 wz
09a88     94 00 90 5D |  if_ne	jmp	#LR__0830
09a8c     57 00 00 FF 
09a90     44 E4 05 F1 | 	add	objptr, ##44612
09a94     F2 2A 02 FB | 	rdlong	local07, objptr
09a98     15 29 02 F6 | 	mov	local06, local07
09a9c     03 28 66 F0 | 	shl	local06, #3
09aa0     02 00 00 FF 
09aa4     38 E4 85 F1 | 	sub	objptr, ##1080
09aa8     F2 28 02 F1 | 	add	local06, objptr
09aac     73 01 00 FF 
09ab0     C8 26 06 F6 | 	mov	local05, ##@LR__5116
09ab4     03 2A 66 F0 | 	shl	local07, #3
09ab8     F2 2A 02 F1 | 	add	local07, objptr
09abc     15 2B 02 FB | 	rdlong	local07, local07
09ac0     02 00 00 FF 
09ac4     38 E4 05 F1 | 	add	objptr, ##1080
09ac8     F2 1E 02 FB | 	rdlong	local01, objptr
09acc     03 1E 66 F0 | 	shl	local01, #3
09ad0     02 00 00 FF 
09ad4     38 E4 85 F1 | 	sub	objptr, ##1080
09ad8     F2 1E 02 F1 | 	add	local01, objptr
09adc     0F 13 02 FB | 	rdlong	arg01, local01
09ae0     55 00 00 FF 
09ae4     0C E4 85 F1 | 	sub	objptr, ##43532
09ae8     09 2D 02 F6 | 	mov	local08, arg01
09aec     97 06 48 FB | 	callpa	#(@LR__0829-@LR__0828)>>2,fcache_load_ptr_
09af0                 | LR__0828
09af0     16 FB C9 FA | 	rdbyte	result1, local08 wz
09af4     01 2C 06 51 |  if_ne	add	local08, #1
09af8     F4 FF 9F 5D |  if_ne	jmp	#LR__0828
09afc                 | LR__0829
09afc     09 2D 82 F1 | 	sub	local08, arg01
09b00     16 15 02 F6 | 	mov	arg02, local08
09b04     01 14 86 F1 | 	sub	arg02, #1
09b08     15 13 02 F6 | 	mov	arg01, local07
09b0c     D8 70 B1 FD | 	call	#__system__Right_S
09b10     FD 14 02 F6 | 	mov	arg02, result1
09b14     13 13 02 F6 | 	mov	arg01, local05
09b18     58 50 B1 FD | 	call	#__system___string_concat
09b1c     14 FB 61 FC | 	wrlong	result1, local06
09b20                 | LR__0830
09b20     57 00 00 FF 
09b24     44 E4 05 F1 | 	add	objptr, ##44612
09b28     F2 28 02 FB | 	rdlong	local06, objptr
09b2c     03 28 66 F0 | 	shl	local06, #3
09b30     02 00 00 FF 
09b34     38 E4 85 F1 | 	sub	objptr, ##1080
09b38     F2 28 02 F1 | 	add	local06, objptr
09b3c     14 13 02 FB | 	rdlong	arg01, local06
09b40     00 14 06 F6 | 	mov	arg02, #0
09b44     55 00 00 FF 
09b48     0C E4 85 F1 | 	sub	objptr, ##43532
09b4c     C0 81 B1 FD | 	call	#__system____builtin_atoi
09b50     FD 24 02 FD | 	qmul	local04, result1
09b54     6A 00 00 FF 
09b58     7C E4 05 F1 | 	add	objptr, ##54396
09b5c     F2 28 02 FB | 	rdlong	local06, objptr
09b60     14 2F 02 F6 | 	mov	local09, local06
09b64     01 2E 66 F0 | 	shl	local09, #1
09b68     14 2F 02 F1 | 	add	local09, local06
09b6c     02 2E 66 F0 | 	shl	local09, #2
09b70     03 00 00 FF 
09b74     00 E4 85 F1 | 	sub	objptr, ##1536
09b78     F2 2E 02 F1 | 	add	local09, objptr
09b7c     03 00 00 FF 
09b80     00 E4 05 F1 | 	add	objptr, ##1536
09b84     18 1E 62 FD | 	getqx	local01
09b88     1C 22 06 F6 | 	mov	local03, #28
09b8c     0F 29 02 F6 | 	mov	local06, local01
09b90     10 2B 02 F6 | 	mov	local07, local02
09b94     17 29 62 FC | 	wrlong	local06, local09
09b98     11 2F 02 F6 | 	mov	local09, local03
09b9c     F2 28 02 FB | 	rdlong	local06, objptr
09ba0     14 27 02 F6 | 	mov	local05, local06
09ba4     01 26 66 F0 | 	shl	local05, #1
09ba8     14 27 02 F1 | 	add	local05, local06
09bac     02 26 66 F0 | 	shl	local05, #2
09bb0     03 00 00 FF 
09bb4     00 E4 85 F1 | 	sub	objptr, ##1536
09bb8     F2 26 02 F1 | 	add	local05, objptr
09bbc     04 26 06 F1 | 	add	local05, #4
09bc0     13 2B 62 FC | 	wrlong	local07, local05
09bc4     03 00 00 FF 
09bc8     00 E4 05 F1 | 	add	objptr, ##1536
09bcc     F2 2A 02 FB | 	rdlong	local07, objptr
09bd0     15 29 02 F6 | 	mov	local06, local07
09bd4     01 28 66 F0 | 	shl	local06, #1
09bd8     15 29 02 F1 | 	add	local06, local07
09bdc     02 28 66 F0 | 	shl	local06, #2
09be0     03 00 00 FF 
09be4     00 E4 85 F1 | 	sub	objptr, ##1536
09be8     F2 28 02 F1 | 	add	local06, objptr
09bec     08 28 06 F1 | 	add	local06, #8
09bf0     14 2F 62 FC | 	wrlong	local09, local06
09bf4     03 00 00 FF 
09bf8     00 E4 05 F1 | 	add	objptr, ##1536
09bfc     F2 28 02 FB | 	rdlong	local06, objptr
09c00     01 28 06 F1 | 	add	local06, #1
09c04     F2 28 62 FC | 	wrlong	local06, objptr
09c08     13 00 00 FF 
09c0c     38 E4 85 F1 | 	sub	objptr, ##9784
09c10     F2 28 02 FB | 	rdlong	local06, objptr
09c14     01 28 06 F1 | 	add	local06, #1
09c18     F2 28 62 FC | 	wrlong	local06, objptr
09c1c     57 00 00 FF 
09c20     44 E4 85 F1 | 	sub	objptr, ##44612
09c24     0C 04 90 FD | 	jmp	#LR__0842
09c28                 | LR__0831
09c28                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
09c28     01 24 0E F2 | 	cmp	local04, #1 wz
09c2c     48 00 90 5D |  if_ne	jmp	#LR__0832
09c30     00 C0 1F FF 
09c34     00 28 06 F6 | 	mov	local06, ##1065353216
09c38     57 00 00 FF 
09c3c     44 E4 05 F1 | 	add	objptr, ##44612
09c40     F2 2E 02 FB | 	rdlong	local09, objptr
09c44     03 2E 66 F0 | 	shl	local09, #3
09c48     02 00 00 FF 
09c4c     38 E4 85 F1 | 	sub	objptr, ##1080
09c50     F2 2E 02 F1 | 	add	local09, objptr
09c54     17 13 02 FB | 	rdlong	arg01, local09
09c58     55 00 00 FF 
09c5c     0C E4 85 F1 | 	sub	objptr, ##43532
09c60     1C 82 B1 FD | 	call	#__system____builtin_atof
09c64     FD 14 02 F6 | 	mov	arg02, result1
09c68     14 13 02 F6 | 	mov	arg01, local06
09c6c     28 7A B1 FD | 	call	#__system___float_mul
09c70     FD 1E 02 F6 | 	mov	local01, result1
09c74     1E 22 06 F6 | 	mov	local03, #30
09c78                 | LR__0832
09c78                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
09c78     FF FF 7F FF 
09c7c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
09c80     48 00 90 5D |  if_ne	jmp	#LR__0833
09c84     00 C0 5F FF 
09c88     00 28 06 F6 | 	mov	local06, ##-1082130432
09c8c     57 00 00 FF 
09c90     44 E4 05 F1 | 	add	objptr, ##44612
09c94     F2 2E 02 FB | 	rdlong	local09, objptr
09c98     03 2E 66 F0 | 	shl	local09, #3
09c9c     02 00 00 FF 
09ca0     38 E4 85 F1 | 	sub	objptr, ##1080
09ca4     F2 2E 02 F1 | 	add	local09, objptr
09ca8     17 13 02 FB | 	rdlong	arg01, local09
09cac     55 00 00 FF 
09cb0     0C E4 85 F1 | 	sub	objptr, ##43532
09cb4     C8 81 B1 FD | 	call	#__system____builtin_atof
09cb8     FD 14 02 F6 | 	mov	arg02, result1
09cbc     14 13 02 F6 | 	mov	arg01, local06
09cc0     D4 79 B1 FD | 	call	#__system___float_mul
09cc4     FD 1E 02 F6 | 	mov	local01, result1
09cc8     1E 22 06 F6 | 	mov	local03, #30
09ccc                 | LR__0833
09ccc     0F 29 02 F6 | 	mov	local06, local01
09cd0     10 2B 02 F6 | 	mov	local07, local02
09cd4     11 27 02 F6 | 	mov	local05, local03
09cd8     6A 00 00 FF 
09cdc     7C E4 05 F1 | 	add	objptr, ##54396
09ce0     F2 1E 02 FB | 	rdlong	local01, objptr
09ce4     0F 2F 02 F6 | 	mov	local09, local01
09ce8     01 2E 66 F0 | 	shl	local09, #1
09cec     0F 2F 02 F1 | 	add	local09, local01
09cf0     02 2E 66 F0 | 	shl	local09, #2
09cf4     03 00 00 FF 
09cf8     00 E4 85 F1 | 	sub	objptr, ##1536
09cfc     F2 2E 02 F1 | 	add	local09, objptr
09d00     17 29 62 FC | 	wrlong	local06, local09
09d04     03 00 00 FF 
09d08     00 E4 05 F1 | 	add	objptr, ##1536
09d0c     F2 2E 02 FB | 	rdlong	local09, objptr
09d10     17 29 02 F6 | 	mov	local06, local09
09d14     01 28 66 F0 | 	shl	local06, #1
09d18     17 29 02 F1 | 	add	local06, local09
09d1c     02 28 66 F0 | 	shl	local06, #2
09d20     03 00 00 FF 
09d24     00 E4 85 F1 | 	sub	objptr, ##1536
09d28     F2 28 02 F1 | 	add	local06, objptr
09d2c     04 28 06 F1 | 	add	local06, #4
09d30     14 2B 62 FC | 	wrlong	local07, local06
09d34     03 00 00 FF 
09d38     00 E4 05 F1 | 	add	objptr, ##1536
09d3c     F2 2E 02 FB | 	rdlong	local09, objptr
09d40     17 2B 02 F6 | 	mov	local07, local09
09d44     01 2A 66 F0 | 	shl	local07, #1
09d48     17 2B 02 F1 | 	add	local07, local09
09d4c     02 2A 66 F0 | 	shl	local07, #2
09d50     03 00 00 FF 
09d54     00 E4 85 F1 | 	sub	objptr, ##1536
09d58     F2 2A 02 F1 | 	add	local07, objptr
09d5c     08 2A 06 F1 | 	add	local07, #8
09d60     15 27 62 FC | 	wrlong	local05, local07
09d64     03 00 00 FF 
09d68     00 E4 05 F1 | 	add	objptr, ##1536
09d6c     F2 28 02 FB | 	rdlong	local06, objptr
09d70     01 28 06 F1 | 	add	local06, #1
09d74     F2 28 62 FC | 	wrlong	local06, objptr
09d78     13 00 00 FF 
09d7c     38 E4 85 F1 | 	sub	objptr, ##9784
09d80     F2 28 02 FB | 	rdlong	local06, objptr
09d84     01 28 06 F1 | 	add	local06, #1
09d88     F2 28 62 FC | 	wrlong	local06, objptr
09d8c     57 00 00 FF 
09d90     44 E4 85 F1 | 	sub	objptr, ##44612
09d94     9C 02 90 FD | 	jmp	#LR__0842
09d98                 | LR__0834
09d98     1F 22 06 F6 | 	mov	local03, #31
09d9c     57 00 00 FF 
09da0     44 E4 05 F1 | 	add	objptr, ##44612
09da4     F2 16 02 FB | 	rdlong	arg03, objptr
09da8     03 16 66 F0 | 	shl	arg03, #3
09dac     02 00 00 FF 
09db0     38 E4 85 F1 | 	sub	objptr, ##1080
09db4     F2 16 02 F1 | 	add	arg03, objptr
09db8     0B 13 02 FB | 	rdlong	arg01, arg03
09dbc     55 00 00 FF 
09dc0     0C E4 85 F1 | 	sub	objptr, ##43532
09dc4     09 2D 02 F6 | 	mov	local08, arg01
09dc8     97 06 48 FB | 	callpa	#(@LR__0836-@LR__0835)>>2,fcache_load_ptr_
09dcc                 | LR__0835
09dcc     16 FB C9 FA | 	rdbyte	result1, local08 wz
09dd0     01 2C 06 51 |  if_ne	add	local08, #1
09dd4     F4 FF 9F 5D |  if_ne	jmp	#LR__0835
09dd8                 | LR__0836
09dd8     09 2D 82 F1 | 	sub	local08, arg01
09ddc     16 FB 01 F6 | 	mov	result1, local08
09de0     79 00 00 FF 
09de4     E4 E5 05 F1 | 	add	objptr, ##62436
09de8     F2 FA 61 FC | 	wrlong	result1, objptr
09dec     5C E4 85 F1 | 	sub	objptr, #92
09df0     F2 12 02 FB | 	rdlong	arg01, objptr
09df4     FD 12 82 F1 | 	sub	arg01, result1
09df8     04 12 86 F1 | 	sub	arg01, #4
09dfc     03 12 26 F5 | 	andn	arg01, #3
09e00     F2 12 62 FC | 	wrlong	arg01, objptr
09e04     5C E4 05 F1 | 	add	objptr, #92
09e08     F2 14 02 FB | 	rdlong	arg02, objptr
09e0c     79 00 00 FF 
09e10     E4 E5 85 F1 | 	sub	objptr, ##62436
09e14     E8 09 B1 FD | 	call	#_pslpoke
09e18                 | '     pslpoke memtop,l
09e18                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
09e18     01 30 06 F6 | 	mov	local10, #1
09e1c     79 00 00 FF 
09e20     E4 E5 05 F1 | 	add	objptr, ##62436
09e24     F2 32 02 FB | 	rdlong	local11, objptr
09e28     79 00 00 FF 
09e2c     E4 E5 85 F1 | 	sub	objptr, ##62436
09e30     01 32 06 F1 | 	add	local11, #1
09e34                 | LR__0837
09e34     19 31 52 F2 | 	cmps	local10, local11 wc
09e38     5C 00 90 3D |  if_ae	jmp	#LR__0838
09e3c     79 00 00 FF 
09e40     88 E5 05 F1 | 	add	objptr, ##62344
09e44     F2 2A 02 FB | 	rdlong	local07, objptr
09e48     03 2A 06 F1 | 	add	local07, #3
09e4c     18 2B 02 F1 | 	add	local07, local10
09e50     22 00 00 FF 
09e54     44 E5 85 F1 | 	sub	objptr, ##17732
09e58     F2 2E 02 FB | 	rdlong	local09, objptr
09e5c     03 2E 66 F0 | 	shl	local09, #3
09e60     02 00 00 FF 
09e64     38 E4 85 F1 | 	sub	objptr, ##1080
09e68     F2 2E 02 F1 | 	add	local09, objptr
09e6c     17 13 02 FB | 	rdlong	arg01, local09
09e70     18 15 02 F6 | 	mov	arg02, local10
09e74     01 16 06 F6 | 	mov	arg03, #1
09e78     55 00 00 FF 
09e7c     0C E4 85 F1 | 	sub	objptr, ##43532
09e80     F4 6D B1 FD | 	call	#__system__Mid_S
09e84     FD 14 C2 FA | 	rdbyte	arg02, result1
09e88     15 13 02 F6 | 	mov	arg01, local07
09e8c     00 0A B1 FD | 	call	#_pspoke
09e90     01 30 06 F1 | 	add	local10, #1
09e94     9C FF 9F FD | 	jmp	#LR__0837
09e98                 | LR__0838
09e98     79 00 00 FF 
09e9c     88 E5 05 F1 | 	add	objptr, ##62344
09ea0     F2 1E 02 FB | 	rdlong	local01, objptr
09ea4     2B 22 06 F6 | 	mov	local03, #43
09ea8     0F 29 02 F6 | 	mov	local06, local01
09eac     10 2B 02 F6 | 	mov	local07, local02
09eb0     11 33 02 F6 | 	mov	local11, local03
09eb4     0F 00 00 FF 
09eb8     0C E5 85 F1 | 	sub	objptr, ##7948
09ebc     F2 30 02 FB | 	rdlong	local10, objptr
09ec0     18 2F 02 F6 | 	mov	local09, local10
09ec4     01 2E 66 F0 | 	shl	local09, #1
09ec8     18 2F 02 F1 | 	add	local09, local10
09ecc     02 2E 66 F0 | 	shl	local09, #2
09ed0     03 00 00 FF 
09ed4     00 E4 85 F1 | 	sub	objptr, ##1536
09ed8     F2 2E 02 F1 | 	add	local09, objptr
09edc     17 29 62 FC | 	wrlong	local06, local09
09ee0     03 00 00 FF 
09ee4     00 E4 05 F1 | 	add	objptr, ##1536
09ee8     F2 30 02 FB | 	rdlong	local10, objptr
09eec     18 2F 02 F6 | 	mov	local09, local10
09ef0     01 2E 66 F0 | 	shl	local09, #1
09ef4     18 2F 02 F1 | 	add	local09, local10
09ef8     02 2E 66 F0 | 	shl	local09, #2
09efc     03 00 00 FF 
09f00     00 E4 85 F1 | 	sub	objptr, ##1536
09f04     F2 2E 02 F1 | 	add	local09, objptr
09f08     04 2E 06 F1 | 	add	local09, #4
09f0c     17 2B 62 FC | 	wrlong	local07, local09
09f10     03 00 00 FF 
09f14     00 E4 05 F1 | 	add	objptr, ##1536
09f18     F2 30 02 FB | 	rdlong	local10, objptr
09f1c     18 2F 02 F6 | 	mov	local09, local10
09f20     01 2E 66 F0 | 	shl	local09, #1
09f24     18 2F 02 F1 | 	add	local09, local10
09f28     02 2E 66 F0 | 	shl	local09, #2
09f2c     03 00 00 FF 
09f30     00 E4 85 F1 | 	sub	objptr, ##1536
09f34     F2 2E 02 F1 | 	add	local09, objptr
09f38     08 2E 06 F1 | 	add	local09, #8
09f3c     17 33 62 FC | 	wrlong	local11, local09
09f40     03 00 00 FF 
09f44     00 E4 05 F1 | 	add	objptr, ##1536
09f48     F2 28 02 FB | 	rdlong	local06, objptr
09f4c     01 28 06 F1 | 	add	local06, #1
09f50     F2 28 62 FC | 	wrlong	local06, objptr
09f54     13 00 00 FF 
09f58     38 E4 85 F1 | 	sub	objptr, ##9784
09f5c     F2 28 02 FB | 	rdlong	local06, objptr
09f60     01 28 06 F1 | 	add	local06, #1
09f64     F2 28 62 FC | 	wrlong	local06, objptr
09f68     57 00 00 FF 
09f6c     44 E4 85 F1 | 	sub	objptr, ##44612
09f70     C0 00 90 FD | 	jmp	#LR__0842
09f74                 | LR__0839
09f74     12 13 02 F6 | 	mov	arg01, local04
09f78     B8 03 B0 FD | 	call	#_getvar
09f7c     57 00 00 FF 
09f80     44 E4 05 F1 | 	add	objptr, ##44612
09f84     F2 28 02 FB | 	rdlong	local06, objptr
09f88     01 28 06 F1 | 	add	local06, #1
09f8c     F2 28 62 FC | 	wrlong	local06, objptr
09f90     57 00 00 FF 
09f94     44 E4 85 F1 | 	sub	objptr, ##44612
09f98     98 00 90 FD | 	jmp	#LR__0842
09f9c                 | LR__0840
09f9c     57 00 00 FF 
09fa0     44 E4 05 F1 | 	add	objptr, ##44612
09fa4     F2 28 02 FB | 	rdlong	local06, objptr
09fa8     01 28 06 F1 | 	add	local06, #1
09fac     F2 28 62 FC | 	wrlong	local06, objptr
09fb0     57 00 00 FF 
09fb4     44 E4 85 F1 | 	sub	objptr, ##44612
09fb8     64 F2 BF FD | 	call	#_expr
09fbc                 | '     ct+=1
09fbc                 | '     expr() 
09fbc                 | '     if lparts(ct).token=token_rpar then ct+=1
09fbc     57 00 00 FF 
09fc0     44 E4 05 F1 | 	add	objptr, ##44612
09fc4     F2 32 02 FB | 	rdlong	local11, objptr
09fc8     03 32 66 F0 | 	shl	local11, #3
09fcc     02 00 00 FF 
09fd0     38 E4 85 F1 | 	sub	objptr, ##1080
09fd4     F2 32 02 F1 | 	add	local11, objptr
09fd8     04 32 06 F1 | 	add	local11, #4
09fdc     19 33 02 FB | 	rdlong	local11, local11
09fe0     14 32 0E F2 | 	cmp	local11, #20 wz
09fe4     55 00 00 FF 
09fe8     0C E4 85 F1 | 	sub	objptr, ##43532
09fec     44 00 90 5D |  if_ne	jmp	#LR__0842
09ff0     57 00 00 FF 
09ff4     44 E4 05 F1 | 	add	objptr, ##44612
09ff8     F2 28 02 FB | 	rdlong	local06, objptr
09ffc     01 28 06 F1 | 	add	local06, #1
0a000     F2 28 62 FC | 	wrlong	local06, objptr
0a004     57 00 00 FF 
0a008     44 E4 85 F1 | 	sub	objptr, ##44612
0a00c     24 00 90 FD | 	jmp	#LR__0842
0a010                 | LR__0841
0a010     12 13 02 F6 | 	mov	arg01, local04
0a014     28 00 B0 FD | 	call	#_getfun
0a018     57 00 00 FF 
0a01c     44 E4 05 F1 | 	add	objptr, ##44612
0a020     F2 28 02 FB | 	rdlong	local06, objptr
0a024     01 28 06 F1 | 	add	local06, #1
0a028     F2 28 62 FC | 	wrlong	local06, objptr
0a02c     57 00 00 FF 
0a030     44 E4 85 F1 | 	sub	objptr, ##44612
0a034                 | LR__0842
0a034     A7 F0 03 F6 | 	mov	ptra, fp
0a038     B2 00 A0 FD | 	call	#popregs_
0a03c                 | _getvalue_ret
0a03c     2D 00 64 FD | 	ret
0a040                 | 
0a040                 | ' 
0a040                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
0a040                 | _getfun
0a040     0A 4A 05 F6 | 	mov	COUNT_, #10
0a044     A8 00 A0 FD | 	call	#pushregs_
0a048                 | _getfun_enter
0a048     09 25 02 F6 | 	mov	local04, arg01
0a04c     57 00 00 FF 
0a050     44 E4 05 F1 | 	add	objptr, ##44612
0a054     F2 26 02 FB | 	rdlong	local05, objptr
0a058     13 29 02 F6 | 	mov	local06, local05
0a05c     00 2A 06 F6 | 	mov	local07, #0
0a060                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
0a060                 | ' oldct=ct
0a060                 | ' numpar=0
0a060                 | '   
0a060                 | ' if lparts(ct+1).token=token_lpar then
0a060     01 26 06 F1 | 	add	local05, #1
0a064     03 26 66 F0 | 	shl	local05, #3
0a068     02 00 00 FF 
0a06c     38 E4 85 F1 | 	sub	objptr, ##1080
0a070     F2 26 02 F1 | 	add	local05, objptr
0a074     04 26 06 F1 | 	add	local05, #4
0a078     13 27 02 FB | 	rdlong	local05, local05
0a07c     15 26 0E F2 | 	cmp	local05, #21 wz
0a080     55 00 00 FF 
0a084     0C E4 85 F1 | 	sub	objptr, ##43532
0a088     08 01 90 5D |  if_ne	jmp	#LR__0854
0a08c     57 00 00 FF 
0a090     44 E4 05 F1 | 	add	objptr, ##44612
0a094     F2 2C 02 FB | 	rdlong	local08, objptr
0a098     01 2C 06 F1 | 	add	local08, #1
0a09c     F2 2C 62 FC | 	wrlong	local08, objptr
0a0a0     57 00 00 FF 
0a0a4     44 E4 85 F1 | 	sub	objptr, ##44612
0a0a8                 | '   ct+=1 											' omit this lpar, this is for expr list
0a0a8                 | '   do
0a0a8                 | LR__0850
0a0a8     57 00 00 FF 
0a0ac     44 E4 05 F1 | 	add	objptr, ##44612
0a0b0     F2 26 02 FB | 	rdlong	local05, objptr
0a0b4     01 26 06 F1 | 	add	local05, #1
0a0b8     F2 26 62 FC | 	wrlong	local05, objptr
0a0bc                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0a0bc                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
0a0bc     03 26 66 F0 | 	shl	local05, #3
0a0c0     02 00 00 FF 
0a0c4     38 E4 85 F1 | 	sub	objptr, ##1080
0a0c8     F2 26 02 F1 | 	add	local05, objptr
0a0cc     04 26 06 F1 | 	add	local05, #4
0a0d0     13 2D 02 FB | 	rdlong	local08, local05
0a0d4     15 2C 0E F2 | 	cmp	local08, #21 wz
0a0d8     55 00 00 FF 
0a0dc     0C E4 85 F1 | 	sub	objptr, ##43532
0a0e0     40 00 90 5D |  if_ne	jmp	#LR__0851
0a0e4     57 00 00 FF 
0a0e8     44 E4 05 F1 | 	add	objptr, ##44612
0a0ec     F2 2C 02 FB | 	rdlong	local08, objptr
0a0f0     01 2C 06 F1 | 	add	local08, #1
0a0f4     F2 2C 62 FC | 	wrlong	local08, objptr
0a0f8     57 00 00 FF 
0a0fc     44 E4 85 F1 | 	sub	objptr, ##44612
0a100     1C F1 BF FD | 	call	#_expr
0a104     57 00 00 FF 
0a108     44 E4 05 F1 | 	add	objptr, ##44612
0a10c     F2 2C 02 FB | 	rdlong	local08, objptr
0a110     01 2C 06 F1 | 	add	local08, #1
0a114     F2 2C 62 FC | 	wrlong	local08, objptr
0a118     57 00 00 FF 
0a11c     44 E4 85 F1 | 	sub	objptr, ##44612
0a120     04 00 90 FD | 	jmp	#LR__0852
0a124                 | LR__0851
0a124     F8 F0 BF FD | 	call	#_expr
0a128                 | LR__0852
0a128     01 2A 06 F1 | 	add	local07, #1
0a12c     57 00 00 FF 
0a130     44 E4 05 F1 | 	add	objptr, ##44612
0a134     F2 26 02 FB | 	rdlong	local05, objptr
0a138     03 26 66 F0 | 	shl	local05, #3
0a13c     02 00 00 FF 
0a140     38 E4 85 F1 | 	sub	objptr, ##1080
0a144     F2 26 02 F1 | 	add	local05, objptr
0a148     04 26 06 F1 | 	add	local05, #4
0a14c     13 2D 02 FB | 	rdlong	local08, local05
0a150     14 2C 0E F2 | 	cmp	local08, #20 wz
0a154     55 00 00 FF 
0a158     0C E4 85 F1 | 	sub	objptr, ##43532
0a15c     34 00 90 AD |  if_e	jmp	#LR__0853
0a160     57 00 00 FF 
0a164     44 E4 05 F1 | 	add	objptr, ##44612
0a168     F2 2C 02 FB | 	rdlong	local08, objptr
0a16c     03 2C 66 F0 | 	shl	local08, #3
0a170     02 00 00 FF 
0a174     38 E4 85 F1 | 	sub	objptr, ##1080
0a178     F2 2C 02 F1 | 	add	local08, objptr
0a17c     04 2C 06 F1 | 	add	local08, #4
0a180     16 2D 02 FB | 	rdlong	local08, local08
0a184     FE 2D 0E F2 | 	cmp	local08, #510 wz
0a188     55 00 00 FF 
0a18c     0C E4 85 F1 | 	sub	objptr, ##43532
0a190     14 FF 9F 5D |  if_ne	jmp	#LR__0850
0a194                 | LR__0853
0a194                 | LR__0854
0a194     15 1F 02 F6 | 	mov	local01, local07
0a198     03 28 66 F0 | 	shl	local06, #3
0a19c     55 00 00 FF 
0a1a0     0C E4 05 F1 | 	add	objptr, ##43532
0a1a4     F2 28 02 F1 | 	add	local06, objptr
0a1a8     04 28 06 F1 | 	add	local06, #4
0a1ac     14 23 02 FB | 	rdlong	local03, local06
0a1b0     0F 2D 02 F6 | 	mov	local08, local01
0a1b4     10 2B 02 F6 | 	mov	local07, local02
0a1b8     11 29 02 F6 | 	mov	local06, local03
0a1bc     15 00 00 FF 
0a1c0     70 E4 05 F1 | 	add	objptr, ##10864
0a1c4     F2 26 02 FB | 	rdlong	local05, objptr
0a1c8     13 13 02 F6 | 	mov	arg01, local05
0a1cc     01 12 66 F0 | 	shl	arg01, #1
0a1d0     13 13 02 F1 | 	add	arg01, local05
0a1d4     02 12 66 F0 | 	shl	arg01, #2
0a1d8     03 00 00 FF 
0a1dc     00 E4 85 F1 | 	sub	objptr, ##1536
0a1e0     F2 12 02 F1 | 	add	arg01, objptr
0a1e4     09 2D 62 FC | 	wrlong	local08, arg01
0a1e8     03 00 00 FF 
0a1ec     00 E4 05 F1 | 	add	objptr, ##1536
0a1f0     F2 2C 02 FB | 	rdlong	local08, objptr
0a1f4     16 2F 02 F6 | 	mov	local09, local08
0a1f8     01 2E 66 F0 | 	shl	local09, #1
0a1fc     16 2F 02 F1 | 	add	local09, local08
0a200     02 2E 66 F0 | 	shl	local09, #2
0a204     03 00 00 FF 
0a208     00 E4 85 F1 | 	sub	objptr, ##1536
0a20c     F2 2E 02 F1 | 	add	local09, objptr
0a210     04 2E 06 F1 | 	add	local09, #4
0a214     17 2B 62 FC | 	wrlong	local07, local09
0a218     03 00 00 FF 
0a21c     00 E4 05 F1 | 	add	objptr, ##1536
0a220     F2 2C 02 FB | 	rdlong	local08, objptr
0a224     16 31 02 F6 | 	mov	local10, local08
0a228     01 30 66 F0 | 	shl	local10, #1
0a22c     16 31 02 F1 | 	add	local10, local08
0a230     02 30 66 F0 | 	shl	local10, #2
0a234     03 00 00 FF 
0a238     00 E4 85 F1 | 	sub	objptr, ##1536
0a23c     F2 30 02 F1 | 	add	local10, objptr
0a240     08 30 06 F1 | 	add	local10, #8
0a244     18 29 62 FC | 	wrlong	local06, local10
0a248     03 00 00 FF 
0a24c     00 E4 05 F1 | 	add	objptr, ##1536
0a250     F2 2C 02 FB | 	rdlong	local08, objptr
0a254     01 2C 06 F1 | 	add	local08, #1
0a258     F2 2C 62 FC | 	wrlong	local08, objptr
0a25c     6A 00 00 FF 
0a260     7C E4 85 F1 | 	sub	objptr, ##54396
0a264                 | ' 
0a264                 | ' t2.result.uresult=numpar
0a264                 | ' 
0a264                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0a264                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0a264                 | ' 
0a264                 | '   
0a264                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0a264     FF FF 7F FF 
0a268     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0a26c     B8 00 90 5D |  if_ne	jmp	#LR__0855
0a270     15 22 06 F6 | 	mov	local03, #21
0a274     0F 2D 02 F6 | 	mov	local08, local01
0a278     10 2B 02 F6 | 	mov	local07, local02
0a27c     11 29 02 F6 | 	mov	local06, local03
0a280     6A 00 00 FF 
0a284     7C E4 05 F1 | 	add	objptr, ##54396
0a288     F2 26 02 FB | 	rdlong	local05, objptr
0a28c     13 13 02 F6 | 	mov	arg01, local05
0a290     01 12 66 F0 | 	shl	arg01, #1
0a294     13 13 02 F1 | 	add	arg01, local05
0a298     02 12 66 F0 | 	shl	arg01, #2
0a29c     03 00 00 FF 
0a2a0     00 E4 85 F1 | 	sub	objptr, ##1536
0a2a4     F2 12 02 F1 | 	add	arg01, objptr
0a2a8     09 2D 62 FC | 	wrlong	local08, arg01
0a2ac     03 00 00 FF 
0a2b0     00 E4 05 F1 | 	add	objptr, ##1536
0a2b4     F2 30 02 FB | 	rdlong	local10, objptr
0a2b8     18 2F 02 F6 | 	mov	local09, local10
0a2bc     01 2E 66 F0 | 	shl	local09, #1
0a2c0     18 2F 02 F1 | 	add	local09, local10
0a2c4     02 2E 66 F0 | 	shl	local09, #2
0a2c8     03 00 00 FF 
0a2cc     00 E4 85 F1 | 	sub	objptr, ##1536
0a2d0     F2 2E 02 F1 | 	add	local09, objptr
0a2d4     04 2E 06 F1 | 	add	local09, #4
0a2d8     17 2B 62 FC | 	wrlong	local07, local09
0a2dc     03 00 00 FF 
0a2e0     00 E4 05 F1 | 	add	objptr, ##1536
0a2e4     F2 2E 02 FB | 	rdlong	local09, objptr
0a2e8     17 31 02 F6 | 	mov	local10, local09
0a2ec     01 30 66 F0 | 	shl	local10, #1
0a2f0     17 31 02 F1 | 	add	local10, local09
0a2f4     02 30 66 F0 | 	shl	local10, #2
0a2f8     03 00 00 FF 
0a2fc     00 E4 85 F1 | 	sub	objptr, ##1536
0a300     F2 30 02 F1 | 	add	local10, objptr
0a304     08 30 06 F1 | 	add	local10, #8
0a308     18 29 62 FC | 	wrlong	local06, local10
0a30c     03 00 00 FF 
0a310     00 E4 05 F1 | 	add	objptr, ##1536
0a314     F2 2C 02 FB | 	rdlong	local08, objptr
0a318     01 2C 06 F1 | 	add	local08, #1
0a31c     F2 2C 62 FC | 	wrlong	local08, objptr
0a320     6A 00 00 FF 
0a324     7C E4 85 F1 | 	sub	objptr, ##54396
0a328                 | LR__0855
0a328     A7 F0 03 F6 | 	mov	ptra, fp
0a32c     B2 00 A0 FD | 	call	#popregs_
0a330                 | _getfun_ret
0a330     2D 00 64 FD | 	ret
0a334                 | 
0a334                 | '   
0a334                 | '   
0a334                 | ' sub getvar(m as integer) 
0a334                 | _getvar
0a334     0A 4A 05 F6 | 	mov	COUNT_, #10
0a338     A8 00 A0 FD | 	call	#pushregs_
0a33c                 | _getvar_enter
0a33c     09 25 02 F6 | 	mov	local04, arg01
0a340     57 00 00 FF 
0a344     44 E4 05 F1 | 	add	objptr, ##44612
0a348     F2 14 02 FB | 	rdlong	arg02, objptr
0a34c     03 14 66 F0 | 	shl	arg02, #3
0a350     02 00 00 FF 
0a354     38 E4 85 F1 | 	sub	objptr, ##1080
0a358     F2 14 02 F1 | 	add	arg02, objptr
0a35c     0A 27 02 FB | 	rdlong	local05, arg02
0a360     13 13 02 F6 | 	mov	arg01, local05
0a364     01 14 06 F6 | 	mov	arg02, #1
0a368     55 00 00 FF 
0a36c     0C E4 85 F1 | 	sub	objptr, ##43532
0a370     74 68 B1 FD | 	call	#__system__Right_S
0a374     FD 28 02 F6 | 	mov	local06, result1
0a378     01 2A 66 F6 | 	neg	local07, #1
0a37c                 | ' 
0a37c                 | ' varname$=lparts(ct).part$
0a37c                 | ' suffix$=right$(varname$,1)
0a37c                 | ' j=-1
0a37c                 | ' 
0a37c                 | ' for i=0 to varnum-1
0a37c     00 2C 06 F6 | 	mov	local08, #0
0a380     55 00 00 FF 
0a384     08 E4 05 F1 | 	add	objptr, ##43528
0a388     F2 2E 02 FB | 	rdlong	local09, objptr
0a38c     55 00 00 FF 
0a390     08 E4 85 F1 | 	sub	objptr, ##43528
0a394                 | LR__0860
0a394     17 2D 52 F2 | 	cmps	local08, local09 wc
0a398     38 00 90 3D |  if_ae	jmp	#LR__0861
0a39c                 | '   if variables(i).name=varname$ then j=i : exit
0a39c     16 15 02 F6 | 	mov	arg02, local08
0a3a0     04 14 66 F0 | 	shl	arg02, #4
0a3a4     34 00 00 FF 
0a3a8     F8 E5 05 F1 | 	add	objptr, ##27128
0a3ac     F2 14 02 F1 | 	add	arg02, objptr
0a3b0     0A 13 02 FB | 	rdlong	arg01, arg02
0a3b4     13 15 02 F6 | 	mov	arg02, local05
0a3b8     34 00 00 FF 
0a3bc     F8 E5 85 F1 | 	sub	objptr, ##27128
0a3c0     7C 47 B1 FD | 	call	#__system___string_cmp
0a3c4     00 FA 0D F2 | 	cmp	result1, #0 wz
0a3c8     16 2B 02 A6 |  if_e	mov	local07, local08
0a3cc     01 2C 06 51 |  if_ne	add	local08, #1
0a3d0     C0 FF 9F 5D |  if_ne	jmp	#LR__0860
0a3d4                 | LR__0861
0a3d4                 | ' if  j=-1 andalso varnum<maxvars then   
0a3d4     FF FF 7F FF 
0a3d8     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
0a3dc     A8 00 90 5D |  if_ne	jmp	#LR__0862
0a3e0     55 00 00 FF 
0a3e4     08 E4 05 F1 | 	add	objptr, ##43528
0a3e8     F2 2E 02 FB | 	rdlong	local09, objptr
0a3ec     55 00 00 FF 
0a3f0     08 E4 85 F1 | 	sub	objptr, ##43528
0a3f4     02 00 00 FF 
0a3f8     00 2E 56 F2 | 	cmps	local09, ##1024 wc
0a3fc     88 00 90 3D |  if_ae	jmp	#LR__0862
0a400     55 00 00 FF 
0a404     08 E4 05 F1 | 	add	objptr, ##43528
0a408     F2 2E 02 FB | 	rdlong	local09, objptr
0a40c     04 2E 66 F0 | 	shl	local09, #4
0a410     20 00 00 FF 
0a414     10 E4 85 F1 | 	sub	objptr, ##16400
0a418     F2 2E 02 F1 | 	add	local09, objptr
0a41c     17 27 62 FC | 	wrlong	local05, local09
0a420     20 00 00 FF 
0a424     10 E4 05 F1 | 	add	objptr, ##16400
0a428     F2 2E 02 FB | 	rdlong	local09, objptr
0a42c     04 2E 66 F0 | 	shl	local09, #4
0a430     20 00 00 FF 
0a434     10 E4 85 F1 | 	sub	objptr, ##16400
0a438     F2 2E 02 F1 | 	add	local09, objptr
0a43c     04 2E 06 F1 | 	add	local09, #4
0a440     17 01 68 FC | 	wrlong	#0, local09
0a444     20 00 00 FF 
0a448     10 E4 05 F1 | 	add	objptr, ##16400
0a44c     F2 2E 02 FB | 	rdlong	local09, objptr
0a450     04 2E 66 F0 | 	shl	local09, #4
0a454     20 00 00 FF 
0a458     10 E4 85 F1 | 	sub	objptr, ##16400
0a45c     F2 2E 02 F1 | 	add	local09, objptr
0a460     0C 2E 06 F1 | 	add	local09, #12
0a464     17 39 68 FC | 	wrlong	#28, local09
0a468     20 00 00 FF 
0a46c     10 E4 05 F1 | 	add	objptr, ##16400
0a470     F2 2E 02 FB | 	rdlong	local09, objptr
0a474     17 2B 02 F6 | 	mov	local07, local09
0a478     01 2E 06 F1 | 	add	local09, #1
0a47c     F2 2E 62 FC | 	wrlong	local09, objptr
0a480     55 00 00 FF 
0a484     08 E4 85 F1 | 	sub	objptr, ##43528
0a488                 | LR__0862
0a488     00 2E 06 F6 | 	mov	local09, #0
0a48c                 | ' numpar=0
0a48c                 | ' ' check if it is an array
0a48c                 | ' 
0a48c                 | ' if lparts(ct+1).token=token_lpar then
0a48c     57 00 00 FF 
0a490     44 E4 05 F1 | 	add	objptr, ##44612
0a494     F2 2C 02 FB | 	rdlong	local08, objptr
0a498     01 2C 06 F1 | 	add	local08, #1
0a49c     03 2C 66 F0 | 	shl	local08, #3
0a4a0     02 00 00 FF 
0a4a4     38 E4 85 F1 | 	sub	objptr, ##1080
0a4a8     F2 2C 02 F1 | 	add	local08, objptr
0a4ac     04 2C 06 F1 | 	add	local08, #4
0a4b0     16 2D 02 FB | 	rdlong	local08, local08
0a4b4     15 2C 0E F2 | 	cmp	local08, #21 wz
0a4b8     55 00 00 FF 
0a4bc     0C E4 85 F1 | 	sub	objptr, ##43532
0a4c0     08 01 90 5D |  if_ne	jmp	#LR__0867
0a4c4     57 00 00 FF 
0a4c8     44 E4 05 F1 | 	add	objptr, ##44612
0a4cc     F2 30 02 FB | 	rdlong	local10, objptr
0a4d0     01 30 06 F1 | 	add	local10, #1
0a4d4     F2 30 62 FC | 	wrlong	local10, objptr
0a4d8     57 00 00 FF 
0a4dc     44 E4 85 F1 | 	sub	objptr, ##44612
0a4e0                 | '   ct+=1 											' omit this lpar, this is for expr list
0a4e0                 | '   do
0a4e0                 | LR__0863
0a4e0     57 00 00 FF 
0a4e4     44 E4 05 F1 | 	add	objptr, ##44612
0a4e8     F2 2C 02 FB | 	rdlong	local08, objptr
0a4ec     01 2C 06 F1 | 	add	local08, #1
0a4f0     F2 2C 62 FC | 	wrlong	local08, objptr
0a4f4                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0a4f4                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
0a4f4     03 2C 66 F0 | 	shl	local08, #3
0a4f8     02 00 00 FF 
0a4fc     38 E4 85 F1 | 	sub	objptr, ##1080
0a500     F2 2C 02 F1 | 	add	local08, objptr
0a504     04 2C 06 F1 | 	add	local08, #4
0a508     16 31 02 FB | 	rdlong	local10, local08
0a50c     15 30 0E F2 | 	cmp	local10, #21 wz
0a510     55 00 00 FF 
0a514     0C E4 85 F1 | 	sub	objptr, ##43532
0a518     40 00 90 5D |  if_ne	jmp	#LR__0864
0a51c     57 00 00 FF 
0a520     44 E4 05 F1 | 	add	objptr, ##44612
0a524     F2 30 02 FB | 	rdlong	local10, objptr
0a528     01 30 06 F1 | 	add	local10, #1
0a52c     F2 30 62 FC | 	wrlong	local10, objptr
0a530     57 00 00 FF 
0a534     44 E4 85 F1 | 	sub	objptr, ##44612
0a538     E4 EC BF FD | 	call	#_expr
0a53c     57 00 00 FF 
0a540     44 E4 05 F1 | 	add	objptr, ##44612
0a544     F2 30 02 FB | 	rdlong	local10, objptr
0a548     01 30 06 F1 | 	add	local10, #1
0a54c     F2 30 62 FC | 	wrlong	local10, objptr
0a550     57 00 00 FF 
0a554     44 E4 85 F1 | 	sub	objptr, ##44612
0a558     04 00 90 FD | 	jmp	#LR__0865
0a55c                 | LR__0864
0a55c     C0 EC BF FD | 	call	#_expr
0a560                 | LR__0865
0a560     01 2E 06 F1 | 	add	local09, #1
0a564     57 00 00 FF 
0a568     44 E4 05 F1 | 	add	objptr, ##44612
0a56c     F2 2C 02 FB | 	rdlong	local08, objptr
0a570     03 2C 66 F0 | 	shl	local08, #3
0a574     02 00 00 FF 
0a578     38 E4 85 F1 | 	sub	objptr, ##1080
0a57c     F2 2C 02 F1 | 	add	local08, objptr
0a580     04 2C 06 F1 | 	add	local08, #4
0a584     16 31 02 FB | 	rdlong	local10, local08
0a588     14 30 0E F2 | 	cmp	local10, #20 wz
0a58c     55 00 00 FF 
0a590     0C E4 85 F1 | 	sub	objptr, ##43532
0a594     34 00 90 AD |  if_e	jmp	#LR__0866
0a598     57 00 00 FF 
0a59c     44 E4 05 F1 | 	add	objptr, ##44612
0a5a0     F2 30 02 FB | 	rdlong	local10, objptr
0a5a4     03 30 66 F0 | 	shl	local10, #3
0a5a8     02 00 00 FF 
0a5ac     38 E4 85 F1 | 	sub	objptr, ##1080
0a5b0     F2 30 02 F1 | 	add	local10, objptr
0a5b4     04 30 06 F1 | 	add	local10, #4
0a5b8     18 31 02 FB | 	rdlong	local10, local10
0a5bc     FE 31 0E F2 | 	cmp	local10, #510 wz
0a5c0     55 00 00 FF 
0a5c4     0C E4 85 F1 | 	sub	objptr, ##43532
0a5c8     14 FF 9F 5D |  if_ne	jmp	#LR__0863
0a5cc                 | LR__0866
0a5cc                 | LR__0867
0a5cc     17 21 02 F6 | 	mov	local02, local09
0a5d0     11 22 06 F6 | 	mov	local03, #17
0a5d4     15 1F 02 F6 | 	mov	local01, local07
0a5d8     0F 31 02 F6 | 	mov	local10, local01
0a5dc     10 2F 02 F6 | 	mov	local09, local02
0a5e0     11 2D 02 F6 | 	mov	local08, local03
0a5e4     6A 00 00 FF 
0a5e8     7C E4 05 F1 | 	add	objptr, ##54396
0a5ec     F2 2A 02 FB | 	rdlong	local07, objptr
0a5f0     15 29 02 F6 | 	mov	local06, local07
0a5f4     01 28 66 F0 | 	shl	local06, #1
0a5f8     15 29 02 F1 | 	add	local06, local07
0a5fc     02 28 66 F0 | 	shl	local06, #2
0a600     03 00 00 FF 
0a604     00 E4 85 F1 | 	sub	objptr, ##1536
0a608     F2 28 02 F1 | 	add	local06, objptr
0a60c     14 31 62 FC | 	wrlong	local10, local06
0a610     03 00 00 FF 
0a614     00 E4 05 F1 | 	add	objptr, ##1536
0a618     F2 30 02 FB | 	rdlong	local10, objptr
0a61c     18 27 02 F6 | 	mov	local05, local10
0a620     01 26 66 F0 | 	shl	local05, #1
0a624     18 27 02 F1 | 	add	local05, local10
0a628     02 26 66 F0 | 	shl	local05, #2
0a62c     03 00 00 FF 
0a630     00 E4 85 F1 | 	sub	objptr, ##1536
0a634     F2 26 02 F1 | 	add	local05, objptr
0a638     04 26 06 F1 | 	add	local05, #4
0a63c     13 2F 62 FC | 	wrlong	local09, local05
0a640     03 00 00 FF 
0a644     00 E4 05 F1 | 	add	objptr, ##1536
0a648     F2 30 02 FB | 	rdlong	local10, objptr
0a64c     18 FB 01 F6 | 	mov	result1, local10
0a650     01 FA 65 F0 | 	shl	result1, #1
0a654     18 FB 01 F1 | 	add	result1, local10
0a658     02 FA 65 F0 | 	shl	result1, #2
0a65c     03 00 00 FF 
0a660     00 E4 85 F1 | 	sub	objptr, ##1536
0a664     F2 FA 01 F1 | 	add	result1, objptr
0a668     08 FA 05 F1 | 	add	result1, #8
0a66c     FD 2C 62 FC | 	wrlong	local08, result1
0a670     03 00 00 FF 
0a674     00 E4 05 F1 | 	add	objptr, ##1536
0a678     F2 30 02 FB | 	rdlong	local10, objptr
0a67c     01 30 06 F1 | 	add	local10, #1
0a680     F2 30 62 FC | 	wrlong	local10, objptr
0a684     6A 00 00 FF 
0a688     7C E4 85 F1 | 	sub	objptr, ##54396
0a68c                 | ' 
0a68c                 | ' t2.result.twowords(1)=numpar
0a68c                 | ' 
0a68c                 | ' 
0a68c                 | ' 
0a68c                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0a68c                 | ' 
0a68c                 | ' 
0a68c                 | '  
0a68c                 | ' 
0a68c                 | ' 701 
0a68c                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0a68c                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0a68c     FF FF 7F FF 
0a690     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0a694     B8 00 90 5D |  if_ne	jmp	#LR__0868
0a698     15 22 06 F6 | 	mov	local03, #21
0a69c     0F 31 02 F6 | 	mov	local10, local01
0a6a0     10 2F 02 F6 | 	mov	local09, local02
0a6a4     11 2D 02 F6 | 	mov	local08, local03
0a6a8     6A 00 00 FF 
0a6ac     7C E4 05 F1 | 	add	objptr, ##54396
0a6b0     F2 2A 02 FB | 	rdlong	local07, objptr
0a6b4     15 29 02 F6 | 	mov	local06, local07
0a6b8     01 28 66 F0 | 	shl	local06, #1
0a6bc     15 29 02 F1 | 	add	local06, local07
0a6c0     02 28 66 F0 | 	shl	local06, #2
0a6c4     03 00 00 FF 
0a6c8     00 E4 85 F1 | 	sub	objptr, ##1536
0a6cc     F2 28 02 F1 | 	add	local06, objptr
0a6d0     14 31 62 FC | 	wrlong	local10, local06
0a6d4     03 00 00 FF 
0a6d8     00 E4 05 F1 | 	add	objptr, ##1536
0a6dc     F2 1E 02 FB | 	rdlong	local01, objptr
0a6e0     0F 27 02 F6 | 	mov	local05, local01
0a6e4     01 26 66 F0 | 	shl	local05, #1
0a6e8     0F 27 02 F1 | 	add	local05, local01
0a6ec     02 26 66 F0 | 	shl	local05, #2
0a6f0     03 00 00 FF 
0a6f4     00 E4 85 F1 | 	sub	objptr, ##1536
0a6f8     F2 26 02 F1 | 	add	local05, objptr
0a6fc     04 26 06 F1 | 	add	local05, #4
0a700     13 2F 62 FC | 	wrlong	local09, local05
0a704     03 00 00 FF 
0a708     00 E4 05 F1 | 	add	objptr, ##1536
0a70c     F2 1E 02 FB | 	rdlong	local01, objptr
0a710     0F FB 01 F6 | 	mov	result1, local01
0a714     01 FA 65 F0 | 	shl	result1, #1
0a718     0F FB 01 F1 | 	add	result1, local01
0a71c     02 FA 65 F0 | 	shl	result1, #2
0a720     03 00 00 FF 
0a724     00 E4 85 F1 | 	sub	objptr, ##1536
0a728     F2 FA 01 F1 | 	add	result1, objptr
0a72c     08 FA 05 F1 | 	add	result1, #8
0a730     FD 2C 62 FC | 	wrlong	local08, result1
0a734     03 00 00 FF 
0a738     00 E4 05 F1 | 	add	objptr, ##1536
0a73c     F2 30 02 FB | 	rdlong	local10, objptr
0a740     01 30 06 F1 | 	add	local10, #1
0a744     F2 30 62 FC | 	wrlong	local10, objptr
0a748     6A 00 00 FF 
0a74c     7C E4 85 F1 | 	sub	objptr, ##54396
0a750                 | LR__0868
0a750     A7 F0 03 F6 | 	mov	ptra, fp
0a754     B2 00 A0 FD | 	call	#popregs_
0a758                 | _getvar_ret
0a758     2D 00 64 FD | 	ret
0a75c                 | 
0a75c                 | ' 
0a75c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0a75c                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0a75c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0a75c                 | ' 
0a75c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0a75c                 | ' '--------------------------------------------- Runtime functions ------------------------------------------------------------------------ 
0a75c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0a75c                 | ' 
0a75c                 | ' function execute_line (astart=0 as integer) as integer
0a75c                 | _execute_line
0a75c     04 4A 05 F6 | 	mov	COUNT_, #4
0a760     A8 00 A0 FD | 	call	#pushregs_
0a764     78 00 00 FF 
0a768     C0 E4 05 F1 | 	add	objptr, ##61632
0a76c     F2 00 68 FC | 	wrlong	#0, objptr
0a770                 | ' runptr2=0
0a770                 | ' for lineptr_e=astart to lineptr-1
0a770     0E 00 00 FF 
0a774     40 E4 85 F1 | 	sub	objptr, ##7232
0a778     F2 12 62 FC | 	wrlong	arg01, objptr
0a77c     04 E4 85 F1 | 	sub	objptr, #4
0a780     F2 1E 02 FB | 	rdlong	local01, objptr
0a784     6A 00 00 FF 
0a788     7C E4 85 F1 | 	sub	objptr, ##54396
0a78c                 | LR__0870
0a78c     6A 00 00 FF 
0a790     80 E4 05 F1 | 	add	objptr, ##54400
0a794     F2 FA 01 FB | 	rdlong	result1, objptr
0a798     6A 00 00 FF 
0a79c     80 E4 85 F1 | 	sub	objptr, ##54400
0a7a0     0F FB 51 F2 | 	cmps	result1, local01 wc
0a7a4     98 00 90 3D |  if_ae	jmp	#LR__0871
0a7a8     6A 00 00 FF 
0a7ac     80 E4 05 F1 | 	add	objptr, ##54400
0a7b0     F2 FA 01 FB | 	rdlong	result1, objptr
0a7b4     FD 20 02 F6 | 	mov	local02, result1
0a7b8     01 20 66 F0 | 	shl	local02, #1
0a7bc     FD 20 02 F1 | 	add	local02, result1
0a7c0     02 20 66 F0 | 	shl	local02, #2
0a7c4     03 00 00 FF 
0a7c8     04 E4 85 F1 | 	sub	objptr, ##1540
0a7cc     F2 20 02 F1 | 	add	local02, objptr
0a7d0     08 20 06 F1 | 	add	local02, #8
0a7d4     10 21 02 FB | 	rdlong	local02, local02
0a7d8     10 21 E2 F8 | 	getbyte	local02, local02, #0
0a7dc     02 20 66 F0 | 	shl	local02, #2
0a7e0     04 00 00 FF 
0a7e4     1C E4 85 F1 | 	sub	objptr, ##2076
0a7e8     F2 20 02 F1 | 	add	local02, objptr
0a7ec     10 21 02 FB | 	rdlong	local02, local02
0a7f0     10 23 02 F6 | 	mov	local03, local02
0a7f4     13 20 46 F7 | 	zerox	local02, #19
0a7f8     14 22 46 F0 | 	shr	local03, #20
0a7fc     02 22 66 F0 | 	shl	local03, #2
0a800     ED 22 02 F1 | 	add	local03, __methods__
0a804     11 23 02 FB | 	rdlong	local03, local03
0a808     63 00 00 FF 
0a80c     60 E4 85 F1 | 	sub	objptr, ##50784
0a810     F2 24 02 F6 | 	mov	local04, objptr
0a814     10 E5 01 F6 | 	mov	objptr, local02
0a818     2D 22 62 FD | 	call	local03
0a81c     12 E5 01 F6 | 	mov	objptr, local04
0a820     6A 00 00 FF 
0a824     80 E4 05 F1 | 	add	objptr, ##54400
0a828     F2 24 02 FB | 	rdlong	local04, objptr
0a82c     01 24 06 F1 | 	add	local04, #1
0a830     F2 24 62 FC | 	wrlong	local04, objptr
0a834     6A 00 00 FF 
0a838     80 E4 85 F1 | 	sub	objptr, ##54400
0a83c     4C FF 9F FD | 	jmp	#LR__0870
0a840                 | LR__0871
0a840                 | ' return runptr2
0a840     78 00 00 FF 
0a844     C0 E4 05 F1 | 	add	objptr, ##61632
0a848     F2 FA 01 FB | 	rdlong	result1, objptr
0a84c     78 00 00 FF 
0a850     C0 E4 85 F1 | 	sub	objptr, ##61632
0a854     A7 F0 03 F6 | 	mov	ptra, fp
0a858     B2 00 A0 FD | 	call	#popregs_
0a85c                 | _execute_line_ret
0a85c     2D 00 64 FD | 	ret
0a860                 | 
0a860                 | ' 
0a860                 | ' 
0a860                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0a860                 | ' 
0a860                 | ' function pop() as expr_result
0a860                 | _pop
0a860                 | ' 
0a860                 | ' if stackpointer=0 then
0a860     63 00 00 FF 
0a864     58 E4 05 F1 | 	add	objptr, ##50776
0a868     F2 FA 09 FB | 	rdlong	result1, objptr wz
0a86c     63 00 00 FF 
0a870     58 E4 85 F1 | 	sub	objptr, ##50776
0a874     FF 04 06 A6 |  if_e	mov	_var03, #255
0a878     18 00 06 A6 |  if_e	mov	_var01, #24
0a87c     68 00 90 AD |  if_e	jmp	#LR__0880
0a880     63 00 00 FF 
0a884     58 E4 05 F1 | 	add	objptr, ##50776
0a888     F2 FA 01 FB | 	rdlong	result1, objptr
0a88c     01 FA 85 F1 | 	sub	result1, #1
0a890     F2 FA 61 FC | 	wrlong	result1, objptr
0a894     FD FE 01 F6 | 	mov	result3, result1
0a898     01 FE 65 F0 | 	shl	result3, #1
0a89c     FD FE 01 F1 | 	add	result3, result1
0a8a0     02 FE 65 F0 | 	shl	result3, #2
0a8a4     0C 00 00 FF 
0a8a8     0C E4 85 F1 | 	sub	objptr, ##6156
0a8ac     F2 FE 01 F1 | 	add	result3, objptr
0a8b0     FF 00 02 FB | 	rdlong	_var01, result3
0a8b4     04 FE 05 F1 | 	add	result3, #4
0a8b8     FF FE 01 FB | 	rdlong	result3, result3
0a8bc     FD FC 01 F6 | 	mov	result2, result1
0a8c0     01 FC 65 F0 | 	shl	result2, #1
0a8c4     FD FC 01 F1 | 	add	result2, result1
0a8c8     02 FC 65 F0 | 	shl	result2, #2
0a8cc     F2 FC 01 F1 | 	add	result2, objptr
0a8d0     08 FC 05 F1 | 	add	result2, #8
0a8d4     FE FA 01 FB | 	rdlong	result1, result2
0a8d8     FF 02 02 F6 | 	mov	_var02, result3
0a8dc     FD 04 02 F6 | 	mov	_var03, result1
0a8e0     57 00 00 FF 
0a8e4     4C E4 85 F1 | 	sub	objptr, ##44620
0a8e8                 | LR__0880
0a8e8                 | ' return t1
0a8e8     01 FD 01 F6 | 	mov	result2, _var02
0a8ec     02 FF 01 F6 | 	mov	result3, _var03
0a8f0     00 FB 01 F6 | 	mov	result1, _var01
0a8f4                 | _pop_ret
0a8f4     2D 00 64 FD | 	ret
0a8f8                 | 
0a8f8                 | ' 
0a8f8                 | ' sub push(t1 as expr_result )
0a8f8                 | _push
0a8f8                 | ' 
0a8f8                 | ' 'print "In push: "; t1.result_type
0a8f8                 | ' 'print "In push: "; t1.result.uresult
0a8f8                 | ' 
0a8f8                 | ' if stackpointer<maxstack then 
0a8f8     63 00 00 FF 
0a8fc     58 E4 05 F1 | 	add	objptr, ##50776
0a900     F2 00 02 FB | 	rdlong	_var01, objptr
0a904     63 00 00 FF 
0a908     58 E4 85 F1 | 	sub	objptr, ##50776
0a90c     01 00 00 FF 
0a910     00 00 56 F2 | 	cmps	_var01, ##512 wc
0a914     BC 00 90 3D |  if_ae	jmp	#LR__0890
0a918     09 01 02 FB | 	rdlong	_var01, arg01
0a91c     04 12 06 F1 | 	add	arg01, #4
0a920     09 03 02 FB | 	rdlong	_var02, arg01
0a924     04 12 06 F1 | 	add	arg01, #4
0a928     09 13 02 FB | 	rdlong	arg01, arg01
0a92c     63 00 00 FF 
0a930     58 E4 05 F1 | 	add	objptr, ##50776
0a934     F2 04 02 FB | 	rdlong	_var03, objptr
0a938     02 07 02 F6 | 	mov	_var04, _var03
0a93c     01 06 66 F0 | 	shl	_var04, #1
0a940     02 07 02 F1 | 	add	_var04, _var03
0a944     02 06 66 F0 | 	shl	_var04, #2
0a948     0C 00 00 FF 
0a94c     0C E4 85 F1 | 	sub	objptr, ##6156
0a950     F2 06 02 F1 | 	add	_var04, objptr
0a954     03 01 62 FC | 	wrlong	_var01, _var04
0a958     0C 00 00 FF 
0a95c     0C E4 05 F1 | 	add	objptr, ##6156
0a960     F2 06 02 FB | 	rdlong	_var04, objptr
0a964     03 05 02 F6 | 	mov	_var03, _var04
0a968     01 04 66 F0 | 	shl	_var03, #1
0a96c     03 05 02 F1 | 	add	_var03, _var04
0a970     02 04 66 F0 | 	shl	_var03, #2
0a974     0C 00 00 FF 
0a978     0C E4 85 F1 | 	sub	objptr, ##6156
0a97c     F2 04 02 F1 | 	add	_var03, objptr
0a980     04 04 06 F1 | 	add	_var03, #4
0a984     02 03 62 FC | 	wrlong	_var02, _var03
0a988     0C 00 00 FF 
0a98c     0C E4 05 F1 | 	add	objptr, ##6156
0a990     F2 06 02 FB | 	rdlong	_var04, objptr
0a994     03 05 02 F6 | 	mov	_var03, _var04
0a998     01 04 66 F0 | 	shl	_var03, #1
0a99c     03 05 02 F1 | 	add	_var03, _var04
0a9a0     02 04 66 F0 | 	shl	_var03, #2
0a9a4     0C 00 00 FF 
0a9a8     0C E4 85 F1 | 	sub	objptr, ##6156
0a9ac     F2 04 02 F1 | 	add	_var03, objptr
0a9b0     08 04 06 F1 | 	add	_var03, #8
0a9b4     02 13 62 FC | 	wrlong	arg01, _var03
0a9b8     0C 00 00 FF 
0a9bc     0C E4 05 F1 | 	add	objptr, ##6156
0a9c0     F2 00 02 FB | 	rdlong	_var01, objptr
0a9c4     01 00 06 F1 | 	add	_var01, #1
0a9c8     F2 00 62 FC | 	wrlong	_var01, objptr
0a9cc     63 00 00 FF 
0a9d0     58 E4 85 F1 | 	sub	objptr, ##50776
0a9d4                 | LR__0890
0a9d4                 | _push_ret
0a9d4     2D 00 64 FD | 	ret
0a9d8                 | 
0a9d8                 | ' 
0a9d8                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
0a9d8                 | ' 
0a9d8                 | ' sub do_push
0a9d8                 | _do_push
0a9d8                 | ' if stackpointer<maxstack then 
0a9d8     63 00 00 FF 
0a9dc     58 E4 05 F1 | 	add	objptr, ##50776
0a9e0     F2 00 02 FB | 	rdlong	_var01, objptr
0a9e4     63 00 00 FF 
0a9e8     58 E4 85 F1 | 	sub	objptr, ##50776
0a9ec     01 00 00 FF 
0a9f0     00 00 56 F2 | 	cmps	_var01, ##512 wc
0a9f4     F8 00 90 3D |  if_ae	jmp	#LR__0900
0a9f8     6A 00 00 FF 
0a9fc     80 E4 05 F1 | 	add	objptr, ##54400
0aa00     F2 02 02 FB | 	rdlong	_var02, objptr
0aa04     01 05 02 F6 | 	mov	_var03, _var02
0aa08     01 04 66 F0 | 	shl	_var03, #1
0aa0c     01 05 02 F1 | 	add	_var03, _var02
0aa10     02 04 66 F0 | 	shl	_var03, #2
0aa14     03 00 00 FF 
0aa18     04 E4 85 F1 | 	sub	objptr, ##1540
0aa1c     F2 04 02 F1 | 	add	_var03, objptr
0aa20     02 01 02 FB | 	rdlong	_var01, _var03
0aa24     04 04 06 F1 | 	add	_var03, #4
0aa28     02 07 02 FB | 	rdlong	_var04, _var03
0aa2c     01 05 02 F6 | 	mov	_var03, _var02
0aa30     01 04 66 F0 | 	shl	_var03, #1
0aa34     01 05 02 F1 | 	add	_var03, _var02
0aa38     02 04 66 F0 | 	shl	_var03, #2
0aa3c     F2 04 02 F1 | 	add	_var03, objptr
0aa40     08 04 06 F1 | 	add	_var03, #8
0aa44     02 03 02 FB | 	rdlong	_var02, _var03
0aa48     04 00 00 FF 
0aa4c     24 E4 85 F1 | 	sub	objptr, ##2084
0aa50     F2 04 02 FB | 	rdlong	_var03, objptr
0aa54     02 09 02 F6 | 	mov	_var05, _var03
0aa58     01 08 66 F0 | 	shl	_var05, #1
0aa5c     02 09 02 F1 | 	add	_var05, _var03
0aa60     02 08 66 F0 | 	shl	_var05, #2
0aa64     0C 00 00 FF 
0aa68     0C E4 85 F1 | 	sub	objptr, ##6156
0aa6c     F2 08 02 F1 | 	add	_var05, objptr
0aa70     04 01 62 FC | 	wrlong	_var01, _var05
0aa74     0C 00 00 FF 
0aa78     0C E4 05 F1 | 	add	objptr, ##6156
0aa7c     F2 08 02 FB | 	rdlong	_var05, objptr
0aa80     04 05 02 F6 | 	mov	_var03, _var05
0aa84     01 04 66 F0 | 	shl	_var03, #1
0aa88     04 05 02 F1 | 	add	_var03, _var05
0aa8c     02 04 66 F0 | 	shl	_var03, #2
0aa90     0C 00 00 FF 
0aa94     0C E4 85 F1 | 	sub	objptr, ##6156
0aa98     F2 04 02 F1 | 	add	_var03, objptr
0aa9c     04 04 06 F1 | 	add	_var03, #4
0aaa0     02 07 62 FC | 	wrlong	_var04, _var03
0aaa4     0C 00 00 FF 
0aaa8     0C E4 05 F1 | 	add	objptr, ##6156
0aaac     F2 08 02 FB | 	rdlong	_var05, objptr
0aab0     04 07 02 F6 | 	mov	_var04, _var05
0aab4     01 06 66 F0 | 	shl	_var04, #1
0aab8     04 07 02 F1 | 	add	_var04, _var05
0aabc     02 06 66 F0 | 	shl	_var04, #2
0aac0     0C 00 00 FF 
0aac4     0C E4 85 F1 | 	sub	objptr, ##6156
0aac8     F2 06 02 F1 | 	add	_var04, objptr
0aacc     08 06 06 F1 | 	add	_var04, #8
0aad0     03 03 62 FC | 	wrlong	_var02, _var04
0aad4     0C 00 00 FF 
0aad8     0C E4 05 F1 | 	add	objptr, ##6156
0aadc     F2 00 02 FB | 	rdlong	_var01, objptr
0aae0     01 00 06 F1 | 	add	_var01, #1
0aae4     F2 00 62 FC | 	wrlong	_var01, objptr
0aae8     63 00 00 FF 
0aaec     58 E4 85 F1 | 	sub	objptr, ##50776
0aaf0                 | LR__0900
0aaf0                 | _do_push_ret
0aaf0     2D 00 64 FD | 	ret
0aaf4                 | 
0aaf4                 | ' 
0aaf4                 | '   
0aaf4                 | ' sub csave_block(address as ulong)
0aaf4                 | _csave_block
0aaf4     09 01 02 F6 | 	mov	_var01, arg01
0aaf8                 | ' 
0aaf8                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
0aaf8                 | ' ' we enter it at the state of playing 1 kHz header tone
0aaf8                 | ' 
0aaf8                 | ' for i=0 to 63 step 2
0aaf8     00 02 06 F6 | 	mov	_var02, #0
0aafc                 | LR__0910
0aafc                 | '   do: loop until lpeek(base+32*7)>32768
0aafc     57 00 00 FF 
0ab00     10 E4 05 F1 | 	add	objptr, ##44560
0ab04     97 0C 48 FB | 	callpa	#(@LR__0912-@LR__0911)>>2,fcache_load_ptr_
0ab08                 | LR__0911
0ab08     F2 12 02 FB | 	rdlong	arg01, objptr
0ab0c     E0 12 06 F1 | 	add	arg01, #224
0ab10     09 FB 01 FB | 	rdlong	result1, arg01
0ab14     40 00 00 FF 
0ab18     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0ab1c     E8 FF 9F CD |  if_b	jmp	#LR__0911
0ab20                 | LR__0912
0ab20     00 13 02 F6 | 	mov	arg01, _var01
0ab24     01 05 02 F6 | 	mov	_var03, _var02
0ab28     02 04 66 F0 | 	shl	_var03, #2
0ab2c     02 13 02 F1 | 	add	arg01, _var03
0ab30     09 07 02 FB | 	rdlong	_var04, arg01
0ab34     22 00 00 FF 
0ab38     F4 E5 05 F1 | 	add	objptr, ##17908
0ab3c     F2 06 62 FC | 	wrlong	_var04, objptr
0ab40     7A 00 00 FF 
0ab44     04 E4 85 F1 | 	sub	objptr, ##62468
0ab48                 | '   q=lpeek(address+4*i)
0ab48                 | '      for bit=0 to 31
0ab48     00 08 06 F6 | 	mov	_var05, #0
0ab4c     97 84 48 FB | 	callpa	#(@LR__0917-@LR__0913)>>2,fcache_load_ptr_
0ab50                 | LR__0913
0ab50                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
0ab50     7A 00 00 FF 
0ab54     04 E4 05 F1 | 	add	objptr, ##62468
0ab58     F2 06 02 FB | 	rdlong	_var04, objptr
0ab5c     7A 00 00 FF 
0ab60     04 E4 85 F1 | 	sub	objptr, ##62468
0ab64     04 05 C2 F9 | 	decod	_var03, _var05
0ab68     02 07 CA F7 | 	test	_var04, _var03 wz
0ab6c     60 00 90 AD |  if_e	jmp	#LR__0914
0ab70     04 05 02 F6 | 	mov	_var03, _var05
0ab74     02 04 66 F0 | 	shl	_var03, #2
0ab78     75 00 00 FF 
0ab7c     B8 E5 05 F1 | 	add	objptr, ##60344
0ab80     F2 04 02 F1 | 	add	_var03, objptr
0ab84     02 FF 48 FC | 	wrbyte	#127, _var03
0ab88     04 05 02 F6 | 	mov	_var03, _var05
0ab8c     02 04 66 F0 | 	shl	_var03, #2
0ab90     01 04 06 F1 | 	add	_var03, #1
0ab94     F2 04 02 F1 | 	add	_var03, objptr
0ab98     02 01 49 FC | 	wrbyte	#128, _var03
0ab9c     04 05 02 F6 | 	mov	_var03, _var05
0aba0     02 04 66 F0 | 	shl	_var03, #2
0aba4     02 04 06 F1 | 	add	_var03, #2
0aba8     F2 04 02 F1 | 	add	_var03, objptr
0abac     02 FF 48 FC | 	wrbyte	#127, _var03
0abb0     04 05 02 F6 | 	mov	_var03, _var05
0abb4     02 04 66 F0 | 	shl	_var03, #2
0abb8     03 04 06 F1 | 	add	_var03, #3
0abbc     F2 04 02 F1 | 	add	_var03, objptr
0abc0     02 01 49 FC | 	wrbyte	#128, _var03
0abc4     75 00 00 FF 
0abc8     B8 E5 85 F1 | 	sub	objptr, ##60344
0abcc     5C 00 90 FD | 	jmp	#LR__0915
0abd0                 | LR__0914
0abd0     04 05 02 F6 | 	mov	_var03, _var05
0abd4     02 04 66 F0 | 	shl	_var03, #2
0abd8     75 00 00 FF 
0abdc     B8 E5 05 F1 | 	add	objptr, ##60344
0abe0     F2 04 02 F1 | 	add	_var03, objptr
0abe4     02 01 49 FC | 	wrbyte	#128, _var03
0abe8     04 05 02 F6 | 	mov	_var03, _var05
0abec     02 04 66 F0 | 	shl	_var03, #2
0abf0     01 04 06 F1 | 	add	_var03, #1
0abf4     F2 04 02 F1 | 	add	_var03, objptr
0abf8     02 01 49 FC | 	wrbyte	#128, _var03
0abfc     04 05 02 F6 | 	mov	_var03, _var05
0ac00     02 04 66 F0 | 	shl	_var03, #2
0ac04     02 04 06 F1 | 	add	_var03, #2
0ac08     F2 04 02 F1 | 	add	_var03, objptr
0ac0c     02 FF 48 FC | 	wrbyte	#127, _var03
0ac10     04 05 02 F6 | 	mov	_var03, _var05
0ac14     02 04 66 F0 | 	shl	_var03, #2
0ac18     03 04 06 F1 | 	add	_var03, #3
0ac1c     F2 04 02 F1 | 	add	_var03, objptr
0ac20     02 FF 48 FC | 	wrbyte	#127, _var03
0ac24     75 00 00 FF 
0ac28     B8 E5 85 F1 | 	sub	objptr, ##60344
0ac2c                 | LR__0915
0ac2c     01 08 06 F1 | 	add	_var05, #1
0ac30     20 08 56 F2 | 	cmps	_var05, #32 wc
0ac34     18 FF 9F CD |  if_b	jmp	#LR__0913
0ac38                 | '   do: loop until lpeek(base+32*7)<32768
0ac38     57 00 00 FF 
0ac3c     10 E4 05 F1 | 	add	objptr, ##44560
0ac40                 | LR__0916
0ac40     F2 12 02 FB | 	rdlong	arg01, objptr
0ac44     E0 12 06 F1 | 	add	arg01, #224
0ac48     09 FB 01 FB | 	rdlong	result1, arg01
0ac4c     40 00 00 FF 
0ac50     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0ac54     E8 FF 9F 3D |  if_ae	jmp	#LR__0916
0ac58                 | LR__0917
0ac58     00 13 02 F6 | 	mov	arg01, _var01
0ac5c     04 12 06 F1 | 	add	arg01, #4
0ac60     01 05 02 F6 | 	mov	_var03, _var02
0ac64     02 04 66 F0 | 	shl	_var03, #2
0ac68     02 13 02 F1 | 	add	arg01, _var03
0ac6c     09 07 02 FB | 	rdlong	_var04, arg01
0ac70     22 00 00 FF 
0ac74     F4 E5 05 F1 | 	add	objptr, ##17908
0ac78     F2 06 62 FC | 	wrlong	_var04, objptr
0ac7c     7A 00 00 FF 
0ac80     04 E4 85 F1 | 	sub	objptr, ##62468
0ac84                 | '   q=lpeek(address+4+4*i)
0ac84                 | '      for bit=0 to 31
0ac84     00 08 06 F6 | 	mov	_var05, #0
0ac88     97 94 48 FB | 	callpa	#(@LR__0921-@LR__0918)>>2,fcache_load_ptr_
0ac8c                 | LR__0918
0ac8c                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
0ac8c     7A 00 00 FF 
0ac90     04 E4 05 F1 | 	add	objptr, ##62468
0ac94     F2 06 02 FB | 	rdlong	_var04, objptr
0ac98     7A 00 00 FF 
0ac9c     04 E4 85 F1 | 	sub	objptr, ##62468
0aca0     04 05 C2 F9 | 	decod	_var03, _var05
0aca4     02 07 CA F7 | 	test	_var04, _var03 wz
0aca8     80 00 90 AD |  if_e	jmp	#LR__0919
0acac     04 0B 02 F6 | 	mov	_var06, _var05
0acb0     02 0A 66 F0 | 	shl	_var06, #2
0acb4     80 04 06 F6 | 	mov	_var03, #128
0acb8     05 05 02 F1 | 	add	_var03, _var06
0acbc     75 00 00 FF 
0acc0     B8 E5 05 F1 | 	add	objptr, ##60344
0acc4     F2 04 02 F1 | 	add	_var03, objptr
0acc8     02 FF 48 FC | 	wrbyte	#127, _var03
0accc     04 0B 02 F6 | 	mov	_var06, _var05
0acd0     02 0A 66 F0 | 	shl	_var06, #2
0acd4     80 04 06 F6 | 	mov	_var03, #128
0acd8     05 05 02 F1 | 	add	_var03, _var06
0acdc     01 04 06 F1 | 	add	_var03, #1
0ace0     F2 04 02 F1 | 	add	_var03, objptr
0ace4     02 01 49 FC | 	wrbyte	#128, _var03
0ace8     04 0B 02 F6 | 	mov	_var06, _var05
0acec     02 0A 66 F0 | 	shl	_var06, #2
0acf0     80 04 06 F6 | 	mov	_var03, #128
0acf4     05 05 02 F1 | 	add	_var03, _var06
0acf8     02 04 06 F1 | 	add	_var03, #2
0acfc     F2 04 02 F1 | 	add	_var03, objptr
0ad00     02 FF 48 FC | 	wrbyte	#127, _var03
0ad04     04 0B 02 F6 | 	mov	_var06, _var05
0ad08     02 0A 66 F0 | 	shl	_var06, #2
0ad0c     80 04 06 F6 | 	mov	_var03, #128
0ad10     05 05 02 F1 | 	add	_var03, _var06
0ad14     03 04 06 F1 | 	add	_var03, #3
0ad18     F2 04 02 F1 | 	add	_var03, objptr
0ad1c     02 01 49 FC | 	wrbyte	#128, _var03
0ad20     75 00 00 FF 
0ad24     B8 E5 85 F1 | 	sub	objptr, ##60344
0ad28     7C 00 90 FD | 	jmp	#LR__0920
0ad2c                 | LR__0919
0ad2c     04 0B 02 F6 | 	mov	_var06, _var05
0ad30     02 0A 66 F0 | 	shl	_var06, #2
0ad34     80 04 06 F6 | 	mov	_var03, #128
0ad38     05 05 02 F1 | 	add	_var03, _var06
0ad3c     75 00 00 FF 
0ad40     B8 E5 05 F1 | 	add	objptr, ##60344
0ad44     F2 04 02 F1 | 	add	_var03, objptr
0ad48     02 01 49 FC | 	wrbyte	#128, _var03
0ad4c     04 0B 02 F6 | 	mov	_var06, _var05
0ad50     02 0A 66 F0 | 	shl	_var06, #2
0ad54     80 04 06 F6 | 	mov	_var03, #128
0ad58     05 05 02 F1 | 	add	_var03, _var06
0ad5c     01 04 06 F1 | 	add	_var03, #1
0ad60     F2 04 02 F1 | 	add	_var03, objptr
0ad64     02 01 49 FC | 	wrbyte	#128, _var03
0ad68     04 0B 02 F6 | 	mov	_var06, _var05
0ad6c     02 0A 66 F0 | 	shl	_var06, #2
0ad70     80 04 06 F6 | 	mov	_var03, #128
0ad74     05 05 02 F1 | 	add	_var03, _var06
0ad78     02 04 06 F1 | 	add	_var03, #2
0ad7c     F2 04 02 F1 | 	add	_var03, objptr
0ad80     02 FF 48 FC | 	wrbyte	#127, _var03
0ad84     04 0B 02 F6 | 	mov	_var06, _var05
0ad88     02 0A 66 F0 | 	shl	_var06, #2
0ad8c     80 04 06 F6 | 	mov	_var03, #128
0ad90     05 05 02 F1 | 	add	_var03, _var06
0ad94     03 04 06 F1 | 	add	_var03, #3
0ad98     F2 04 02 F1 | 	add	_var03, objptr
0ad9c     02 FF 48 FC | 	wrbyte	#127, _var03
0ada0     75 00 00 FF 
0ada4     B8 E5 85 F1 | 	sub	objptr, ##60344
0ada8                 | LR__0920
0ada8     01 08 06 F1 | 	add	_var05, #1
0adac     20 08 56 F2 | 	cmps	_var05, #32 wc
0adb0     D8 FE 9F CD |  if_b	jmp	#LR__0918
0adb4                 | LR__0921
0adb4     02 02 06 F1 | 	add	_var02, #2
0adb8     40 02 56 F2 | 	cmps	_var02, #64 wc
0adbc     3C FD 9F CD |  if_b	jmp	#LR__0910
0adc0                 | ' do: loop until lpeek(base+32*7)>32768
0adc0     57 00 00 FF 
0adc4     10 E4 05 F1 | 	add	objptr, ##44560
0adc8     97 84 48 FB | 	callpa	#(@LR__0930-@LR__0922)>>2,fcache_load_ptr_
0adcc                 | LR__0922
0adcc     F2 12 02 FB | 	rdlong	arg01, objptr
0add0     E0 12 06 F1 | 	add	arg01, #224
0add4     09 FB 01 FB | 	rdlong	result1, arg01
0add8     40 00 00 FF 
0addc     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0ade0     E8 FF 9F CD |  if_b	jmp	#LR__0922
0ade4     57 00 00 FF 
0ade8     10 E4 85 F1 | 	sub	objptr, ##44560
0adec                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0adec     00 02 06 F6 | 	mov	_var02, #0
0adf0                 | LR__0923
0adf0     01 07 52 F6 | 	abs	_var04, _var02 wc
0adf4     07 06 06 F5 | 	and	_var04, #7
0adf8     03 07 82 F6 | 	negc	_var04, _var04
0adfc     04 06 56 F2 | 	cmps	_var04, #4 wc
0ae00     20 00 90 3D |  if_ae	jmp	#LR__0924
0ae04     01 0B 02 F6 | 	mov	_var06, _var02
0ae08     75 00 00 FF 
0ae0c     B8 E5 05 F1 | 	add	objptr, ##60344
0ae10     F2 0A 02 F1 | 	add	_var06, objptr
0ae14     05 FF 48 FC | 	wrbyte	#127, _var06
0ae18     75 00 00 FF 
0ae1c     B8 E5 85 F1 | 	sub	objptr, ##60344
0ae20     1C 00 90 FD | 	jmp	#LR__0925
0ae24                 | LR__0924
0ae24     01 0B 02 F6 | 	mov	_var06, _var02
0ae28     75 00 00 FF 
0ae2c     B8 E5 05 F1 | 	add	objptr, ##60344
0ae30     F2 0A 02 F1 | 	add	_var06, objptr
0ae34     05 01 49 FC | 	wrbyte	#128, _var06
0ae38     75 00 00 FF 
0ae3c     B8 E5 85 F1 | 	sub	objptr, ##60344
0ae40                 | LR__0925
0ae40     01 02 06 F1 | 	add	_var02, #1
0ae44     80 02 56 F2 | 	cmps	_var02, #128 wc
0ae48     A4 FF 9F CD |  if_b	jmp	#LR__0923
0ae4c                 | ' 
0ae4c                 | ' do: loop until lpeek(base+32*7)<32768
0ae4c     57 00 00 FF 
0ae50     10 E4 05 F1 | 	add	objptr, ##44560
0ae54                 | LR__0926
0ae54     F2 12 02 FB | 	rdlong	arg01, objptr
0ae58     E0 12 06 F1 | 	add	arg01, #224
0ae5c     09 FB 01 FB | 	rdlong	result1, arg01
0ae60     40 00 00 FF 
0ae64     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0ae68     E8 FF 9F 3D |  if_ae	jmp	#LR__0926
0ae6c     57 00 00 FF 
0ae70     10 E4 85 F1 | 	sub	objptr, ##44560
0ae74                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0ae74     80 02 06 F6 | 	mov	_var02, #128
0ae78                 | LR__0927
0ae78     01 07 52 F6 | 	abs	_var04, _var02 wc
0ae7c     07 06 06 F5 | 	and	_var04, #7
0ae80     03 07 82 F6 | 	negc	_var04, _var04
0ae84     04 06 56 F2 | 	cmps	_var04, #4 wc
0ae88     20 00 90 3D |  if_ae	jmp	#LR__0928
0ae8c     01 0B 02 F6 | 	mov	_var06, _var02
0ae90     75 00 00 FF 
0ae94     B8 E5 05 F1 | 	add	objptr, ##60344
0ae98     F2 0A 02 F1 | 	add	_var06, objptr
0ae9c     05 FF 48 FC | 	wrbyte	#127, _var06
0aea0     75 00 00 FF 
0aea4     B8 E5 85 F1 | 	sub	objptr, ##60344
0aea8     1C 00 90 FD | 	jmp	#LR__0929
0aeac                 | LR__0928
0aeac     01 0B 02 F6 | 	mov	_var06, _var02
0aeb0     75 00 00 FF 
0aeb4     B8 E5 05 F1 | 	add	objptr, ##60344
0aeb8     F2 0A 02 F1 | 	add	_var06, objptr
0aebc     05 01 49 FC | 	wrbyte	#128, _var06
0aec0     75 00 00 FF 
0aec4     B8 E5 85 F1 | 	sub	objptr, ##60344
0aec8                 | LR__0929
0aec8     01 02 06 F1 | 	add	_var02, #1
0aecc     00 03 16 F2 | 	cmp	_var02, #256 wc
0aed0     A4 FF 9F CD |  if_b	jmp	#LR__0927
0aed4                 | LR__0930
0aed4                 | _csave_block_ret
0aed4     2D 00 64 FD | 	ret
0aed8                 | 
0aed8                 | ' 
0aed8                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
0aed8                 | _csave_addtoblock
0aed8     04 4A 05 F6 | 	mov	COUNT_, #4
0aedc     A8 00 A0 FD | 	call	#pushregs_
0aee0     09 1F 02 F6 | 	mov	local01, arg01
0aee4                 | ' 
0aee4                 | ' 
0aee4                 | ' if force=0 then
0aee4     07 14 4E F7 | 	zerox	arg02, #7 wz
0aee8     78 00 90 5D |  if_ne	jmp	#LR__0940
0aeec     78 00 00 FF 
0aef0     B8 E4 05 F1 | 	add	objptr, ##61624
0aef4     F2 14 02 FB | 	rdlong	arg02, objptr
0aef8     02 00 00 FF 
0aefc     00 E4 85 F1 | 	sub	objptr, ##1024
0af00     F2 14 02 F1 | 	add	arg02, objptr
0af04     0A 1F 42 FC | 	wrbyte	local01, arg02
0af08     02 00 00 FF 
0af0c     00 E4 05 F1 | 	add	objptr, ##1024
0af10     F2 1E 02 FB | 	rdlong	local01, objptr
0af14     01 1E 06 F1 | 	add	local01, #1
0af18     F2 1E 62 FC | 	wrlong	local01, objptr
0af1c                 | '   block(blockptr)=d
0af1c                 | '   blockptr+=1
0af1c                 | '   if blockptr>=255 then
0af1c     78 00 00 FF 
0af20     B8 E4 85 F1 | 	sub	objptr, ##61624
0af24     FF 1E 16 F2 | 	cmp	local01, #255 wc
0af28     E4 00 90 CD |  if_b	jmp	#LR__0944
0af2c     76 00 00 FF 
0af30     B8 E4 05 F1 | 	add	objptr, ##60600
0af34     F2 12 02 F6 | 	mov	arg01, objptr
0af38     76 00 00 FF 
0af3c     B8 E4 85 F1 | 	sub	objptr, ##60600
0af40     B0 FB BF FD | 	call	#_csave_block
0af44     78 00 00 FF 
0af48     B8 E4 05 F1 | 	add	objptr, ##61624
0af4c     F2 00 68 FC | 	wrlong	#0, objptr
0af50     78 00 00 FF 
0af54     B8 E4 85 F1 | 	sub	objptr, ##61624
0af58     2C 13 06 F6 | 	mov	arg01, #300
0af5c     AC 3E B1 FD | 	call	#__system___waitms
0af60     AC 00 90 FD | 	jmp	#LR__0944
0af64                 | LR__0940
0af64     78 00 00 FF 
0af68     B8 E4 05 F1 | 	add	objptr, ##61624
0af6c     F2 20 02 FB | 	rdlong	local02, objptr
0af70     02 00 00 FF 
0af74     00 E4 85 F1 | 	sub	objptr, ##1024
0af78     F2 20 02 F1 | 	add	local02, objptr
0af7c     10 1F 42 FC | 	wrbyte	local01, local02
0af80                 | '   block(blockptr)=d
0af80                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0af80     02 00 00 FF 
0af84     00 E4 05 F1 | 	add	objptr, ##1024
0af88     F2 22 02 FB | 	rdlong	local03, objptr
0af8c     78 00 00 FF 
0af90     B8 E4 85 F1 | 	sub	objptr, ##61624
0af94     FF 22 16 F2 | 	cmp	local03, #255 wc
0af98     40 00 90 3D |  if_ae	jmp	#LR__0943
0af9c     78 00 00 FF 
0afa0     B8 E4 05 F1 | 	add	objptr, ##61624
0afa4     F2 24 02 FB | 	rdlong	local04, objptr
0afa8     78 00 00 FF 
0afac     B8 E4 85 F1 | 	sub	objptr, ##61624
0afb0                 | LR__0941
0afb0     00 25 56 F2 | 	cmps	local04, #256 wc
0afb4     24 00 90 3D |  if_ae	jmp	#LR__0942
0afb8     12 21 02 F6 | 	mov	local02, local04
0afbc     76 00 00 FF 
0afc0     B8 E4 05 F1 | 	add	objptr, ##60600
0afc4     F2 20 02 F1 | 	add	local02, objptr
0afc8     10 01 48 FC | 	wrbyte	#0, local02
0afcc     01 24 06 F1 | 	add	local04, #1
0afd0     76 00 00 FF 
0afd4     B8 E4 85 F1 | 	sub	objptr, ##60600
0afd8     D4 FF 9F FD | 	jmp	#LR__0941
0afdc                 | LR__0942
0afdc                 | LR__0943
0afdc     76 00 00 FF 
0afe0     B8 E4 05 F1 | 	add	objptr, ##60600
0afe4     F2 12 02 F6 | 	mov	arg01, objptr
0afe8     76 00 00 FF 
0afec     B8 E4 85 F1 | 	sub	objptr, ##60600
0aff0     00 FB BF FD | 	call	#_csave_block
0aff4     78 00 00 FF 
0aff8     B8 E4 05 F1 | 	add	objptr, ##61624
0affc     F2 00 68 FC | 	wrlong	#0, objptr
0b000     78 00 00 FF 
0b004     B8 E4 85 F1 | 	sub	objptr, ##61624
0b008     2C 13 06 F6 | 	mov	arg01, #300
0b00c     FC 3D B1 FD | 	call	#__system___waitms
0b010                 | LR__0944
0b010     A7 F0 03 F6 | 	mov	ptra, fp
0b014     B2 00 A0 FD | 	call	#popregs_
0b018                 | _csave_addtoblock_ret
0b018     2D 00 64 FD | 	ret
0b01c                 | 
0b01c                 | ' 
0b01c                 | ' sub test_csave
0b01c                 | _test_csave
0b01c     04 4A 05 F6 | 	mov	COUNT_, #4
0b020     A8 00 A0 FD | 	call	#pushregs_
0b024     C0 F0 07 F1 | 	add	ptra, #192
0b028                 | ' 'dim fileheader,savestart, saveptr as ulong
0b028                 | ' 
0b028                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0b028     6A 00 00 FF 
0b02c     84 E4 05 F1 | 	add	objptr, ##54404
0b030     F2 12 02 FB | 	rdlong	arg01, objptr
0b034     6A 00 00 FF 
0b038     84 E4 85 F1 | 	sub	objptr, ##54404
0b03c     F0 F8 B0 FD | 	call	#_pslpeek
0b040     FF FF 7F FF 
0b044     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0b048     0C 00 90 5D |  if_ne	jmp	#LR__0950
0b04c     1B 12 06 F6 | 	mov	arg01, #27
0b050     48 F6 B0 FD | 	call	#_printerror
0b054     1C 03 90 FD | 	jmp	#LR__0964
0b058                 | LR__0950
0b058     04 F8 BF FD | 	call	#_pop
0b05c     90 4E 05 F1 | 	add	fp, #144
0b060     A7 FA 61 FC | 	wrlong	result1, fp
0b064     04 4E 05 F1 | 	add	fp, #4
0b068     A7 FC 61 FC | 	wrlong	result2, fp
0b06c     04 4E 05 F1 | 	add	fp, #4
0b070     A7 FE 61 FC | 	wrlong	result3, fp
0b074                 | ' t1=pop()
0b074                 | ' if t1.result_type<>result_string then name$=loadname else name$=t1.result.sresult
0b074     98 4E 85 F1 | 	sub	fp, #152
0b078     1F FE 0D F2 | 	cmp	result3, #31 wz
0b07c     24 00 90 AD |  if_e	jmp	#LR__0951
0b080     79 00 00 FF 
0b084     B4 E5 05 F1 | 	add	objptr, ##62388
0b088     F2 1C 02 FB | 	rdlong	arg06, objptr
0b08c     79 00 00 FF 
0b090     B4 E5 85 F1 | 	sub	objptr, ##62388
0b094     8C 4E 05 F1 | 	add	fp, #140
0b098     A7 1C 62 FC | 	wrlong	arg06, fp
0b09c     8C 4E 85 F1 | 	sub	fp, #140
0b0a0     14 00 90 FD | 	jmp	#LR__0952
0b0a4                 | LR__0951
0b0a4     90 4E 05 F1 | 	add	fp, #144
0b0a8     A7 1C 02 FB | 	rdlong	arg06, fp
0b0ac     04 4E 85 F1 | 	sub	fp, #4
0b0b0     A7 1C 62 FC | 	wrlong	arg06, fp
0b0b4     8C 4E 85 F1 | 	sub	fp, #140
0b0b8                 | LR__0952
0b0b8                 | ' 
0b0b8                 | ' ' prepare 1 kHz header wave
0b0b8                 | ' 
0b0b8                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0b0b8     A7 00 68 FC | 	wrlong	#0, fp
0b0bc     97 34 48 FB | 	callpa	#(@LR__0956-@LR__0953)>>2,fcache_load_ptr_
0b0c0                 | LR__0953
0b0c0     A7 1C 02 FB | 	rdlong	arg06, fp
0b0c4     0E 1B 52 F6 | 	abs	arg05, arg06 wc
0b0c8     07 1A 06 F5 | 	and	arg05, #7
0b0cc     0D 1B 82 F6 | 	negc	arg05, arg05
0b0d0     04 1A 56 F2 | 	cmps	arg05, #4 wc
0b0d4     20 00 90 3D |  if_ae	jmp	#LR__0954
0b0d8     A7 1A 02 FB | 	rdlong	arg05, fp
0b0dc     75 00 00 FF 
0b0e0     B8 E5 05 F1 | 	add	objptr, ##60344
0b0e4     F2 1A 02 F1 | 	add	arg05, objptr
0b0e8     0D FF 48 FC | 	wrbyte	#127, arg05
0b0ec     75 00 00 FF 
0b0f0     B8 E5 85 F1 | 	sub	objptr, ##60344
0b0f4     1C 00 90 FD | 	jmp	#LR__0955
0b0f8                 | LR__0954
0b0f8     A7 1A 02 FB | 	rdlong	arg05, fp
0b0fc     75 00 00 FF 
0b100     B8 E5 05 F1 | 	add	objptr, ##60344
0b104     F2 1A 02 F1 | 	add	arg05, objptr
0b108     0D 01 49 FC | 	wrbyte	#128, arg05
0b10c     75 00 00 FF 
0b110     B8 E5 85 F1 | 	sub	objptr, ##60344
0b114                 | LR__0955
0b114     A7 1A 02 FB | 	rdlong	arg05, fp
0b118     01 1A 06 F1 | 	add	arg05, #1
0b11c     A7 1A 62 FC | 	wrlong	arg05, fp
0b120     00 1B 56 F2 | 	cmps	arg05, #256 wc
0b124     98 FF 9F CD |  if_b	jmp	#LR__0953
0b128                 | LR__0956
0b128     75 00 00 FF 
0b12c     B8 E5 05 F1 | 	add	objptr, ##60344
0b130     F2 14 02 F6 | 	mov	arg02, objptr
0b134     07 12 06 F6 | 	mov	arg01, #7
0b138     0F 00 00 FF 
0b13c     40 17 06 F6 | 	mov	arg03, ##8000
0b140     0E 18 C6 F9 | 	decod	arg04, #14
0b144     00 1B 06 F6 | 	mov	arg05, #256
0b148     00 1C 06 F6 | 	mov	arg06, #0
0b14c     6A 00 00 FF 
0b150     EC E4 85 F1 | 	sub	objptr, ##54508
0b154     0C 36 B1 FD | 	call	#_audio096_spin2_play8
0b158     0B 00 00 FF 
0b15c     CC E4 85 F1 | 	sub	objptr, ##5836
0b160     05 00 00 FF 
0b164     B8 13 06 F6 | 	mov	arg01, ##3000
0b168     A0 3C B1 FD | 	call	#__system___waitms
0b16c     78 00 00 FF 
0b170     B8 E4 05 F1 | 	add	objptr, ##61624
0b174     F2 00 68 FC | 	wrlong	#0, objptr
0b178     78 00 00 FF 
0b17c     B8 E4 85 F1 | 	sub	objptr, ##61624
0b180     72 12 06 F6 | 	mov	arg01, #114
0b184     00 14 06 F6 | 	mov	arg02, #0
0b188     4C FD BF FD | 	call	#_csave_addtoblock
0b18c     62 12 06 F6 | 	mov	arg01, #98
0b190     00 14 06 F6 | 	mov	arg02, #0
0b194     40 FD BF FD | 	call	#_csave_addtoblock
0b198     61 12 06 F6 | 	mov	arg01, #97
0b19c     00 14 06 F6 | 	mov	arg02, #0
0b1a0     34 FD BF FD | 	call	#_csave_addtoblock
0b1a4     0D 12 06 F6 | 	mov	arg01, #13
0b1a8     00 14 06 F6 | 	mov	arg02, #0
0b1ac     28 FD BF FD | 	call	#_csave_addtoblock
0b1b0                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0b1b0                 | ' waitms 3000 
0b1b0                 | ' 
0b1b0                 | ' blockptr=0
0b1b0                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0b1b0                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0b1b0     A7 02 68 FC | 	wrlong	#1, fp
0b1b4     8C 4E 05 F1 | 	add	fp, #140
0b1b8     A7 12 02 FB | 	rdlong	arg01, fp
0b1bc     8C 4E 85 F1 | 	sub	fp, #140
0b1c0     09 1F 02 F6 | 	mov	local01, arg01
0b1c4     97 06 48 FB | 	callpa	#(@LR__0958-@LR__0957)>>2,fcache_load_ptr_
0b1c8                 | LR__0957
0b1c8     0F FB C9 FA | 	rdbyte	result1, local01 wz
0b1cc     01 1E 06 51 |  if_ne	add	local01, #1
0b1d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0957
0b1d4                 | LR__0958
0b1d4     09 1F 82 F1 | 	sub	local01, arg01
0b1d8     0F 21 02 F6 | 	mov	local02, local01
0b1dc     01 20 06 F1 | 	add	local02, #1
0b1e0                 | LR__0959
0b1e0     A7 1A 02 FB | 	rdlong	arg05, fp
0b1e4     10 1B 52 F2 | 	cmps	arg05, local02 wc
0b1e8     34 00 90 3D |  if_ae	jmp	#LR__0960
0b1ec     8C 4E 05 F1 | 	add	fp, #140
0b1f0     A7 12 02 FB | 	rdlong	arg01, fp
0b1f4     8C 4E 85 F1 | 	sub	fp, #140
0b1f8     A7 14 02 FB | 	rdlong	arg02, fp
0b1fc     01 16 06 F6 | 	mov	arg03, #1
0b200     74 5A B1 FD | 	call	#__system__Mid_S
0b204     FD 12 C2 FA | 	rdbyte	arg01, result1
0b208     00 14 06 F6 | 	mov	arg02, #0
0b20c     C8 FC BF FD | 	call	#_csave_addtoblock
0b210     A7 1A 02 FB | 	rdlong	arg05, fp
0b214     01 1A 06 F1 | 	add	arg05, #1
0b218     A7 1A 62 FC | 	wrlong	arg05, fp
0b21c     C0 FF 9F FD | 	jmp	#LR__0959
0b220                 | LR__0960
0b220     00 12 06 F6 | 	mov	arg01, #0
0b224     00 14 06 F6 | 	mov	arg02, #0
0b228     AC FC BF FD | 	call	#_csave_addtoblock
0b22c     72 12 06 F6 | 	mov	arg01, #114
0b230     00 14 06 F6 | 	mov	arg02, #0
0b234     A0 FC BF FD | 	call	#_csave_addtoblock
0b238     62 12 06 F6 | 	mov	arg01, #98
0b23c     00 14 06 F6 | 	mov	arg02, #0
0b240     94 FC BF FD | 	call	#_csave_addtoblock
0b244     73 12 06 F6 | 	mov	arg01, #115
0b248     00 14 06 F6 | 	mov	arg02, #0
0b24c     88 FC BF FD | 	call	#_csave_addtoblock
0b250     0D 12 06 F6 | 	mov	arg01, #13
0b254     00 14 06 F6 | 	mov	arg02, #0
0b258     7C FC BF FD | 	call	#_csave_addtoblock
0b25c     6A 00 00 FF 
0b260     84 E4 05 F1 | 	add	objptr, ##54404
0b264     F2 22 02 FB | 	rdlong	local03, objptr
0b268     6A 00 00 FF 
0b26c     84 E4 85 F1 | 	sub	objptr, ##54404
0b270     9C 4E 05 F1 | 	add	fp, #156
0b274     A7 22 62 FC | 	wrlong	local03, fp
0b278     9C 4E 85 F1 | 	sub	fp, #156
0b27c                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0b27c                 | ' 
0b27c                 | ' saveptr=programstart
0b27c                 | ' do
0b27c                 | LR__0961
0b27c     A0 4E 05 F1 | 	add	fp, #160
0b280     A7 12 02 F6 | 	mov	arg01, fp
0b284     04 4E 85 F1 | 	sub	fp, #4
0b288     A7 14 02 FB | 	rdlong	arg02, fp
0b28c     9C 4E 85 F1 | 	sub	fp, #156
0b290     18 16 06 F6 | 	mov	arg03, #24
0b294     0B 00 00 FF 
0b298     CC E4 05 F1 | 	add	objptr, ##5836
0b29c     54 2C B1 FD | 	call	#_psram_spin2_read1
0b2a0     0C 4E 05 F1 | 	add	fp, #12
0b2a4     A7 12 02 F6 | 	mov	arg01, fp
0b2a8     9C 4E 05 F1 | 	add	fp, #156
0b2ac     A7 14 02 FB | 	rdlong	arg02, fp
0b2b0     04 4E 05 F1 | 	add	fp, #4
0b2b4     A7 16 02 FB | 	rdlong	arg03, fp
0b2b8     AC 4E 85 F1 | 	sub	fp, #172
0b2bc     34 2C B1 FD | 	call	#_psram_spin2_read1
0b2c0     0B 00 00 FF 
0b2c4     CC E4 85 F1 | 	sub	objptr, ##5836
0b2c8     AC 4E 05 F1 | 	add	fp, #172
0b2cc     A7 12 02 FB | 	rdlong	arg01, fp
0b2d0     AC 4E 85 F1 | 	sub	fp, #172
0b2d4     00 14 06 F6 | 	mov	arg02, #0
0b2d8     FC FB BF FD | 	call	#_csave_addtoblock
0b2dc                 | '   psram.read1(varptr(header(0)),saveptr,24)
0b2dc                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0b2dc                 | '   csave_addtoblock(header(3),0) ' that's always <255
0b2dc                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)    :next i
0b2dc     A7 00 68 FC | 	wrlong	#0, fp
0b2e0     AC 4E 05 F1 | 	add	fp, #172
0b2e4     A7 24 02 FB | 	rdlong	local04, fp
0b2e8     AC 4E 85 F1 | 	sub	fp, #172
0b2ec                 | LR__0962
0b2ec     A7 22 02 FB | 	rdlong	local03, fp
0b2f0     12 23 52 F2 | 	cmps	local03, local04 wc
0b2f4     2C 00 90 3D |  if_ae	jmp	#LR__0963
0b2f8     A7 22 02 FB | 	rdlong	local03, fp
0b2fc     0C 4E 05 F1 | 	add	fp, #12
0b300     A7 22 02 F1 | 	add	local03, fp
0b304     11 13 C2 FA | 	rdbyte	arg01, local03
0b308     00 14 06 F6 | 	mov	arg02, #0
0b30c     0C 4E 85 F1 | 	sub	fp, #12
0b310     C4 FB BF FD | 	call	#_csave_addtoblock
0b314     A7 22 02 FB | 	rdlong	local03, fp
0b318     01 22 06 F1 | 	add	local03, #1
0b31c     A7 22 62 FC | 	wrlong	local03, fp
0b320     C8 FF 9F FD | 	jmp	#LR__0962
0b324                 | LR__0963
0b324     B4 4E 05 F1 | 	add	fp, #180
0b328     A7 22 02 FB | 	rdlong	local03, fp
0b32c     18 4E 85 F1 | 	sub	fp, #24
0b330     A7 22 62 FC | 	wrlong	local03, fp
0b334     18 4E 05 F1 | 	add	fp, #24
0b338     A7 22 02 FB | 	rdlong	local03, fp
0b33c     B4 4E 85 F1 | 	sub	fp, #180
0b340     FF FF 3F FF 
0b344     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0b348     30 FF 9F 5D |  if_ne	jmp	#LR__0961
0b34c     00 12 06 F6 | 	mov	arg01, #0
0b350     01 14 06 F6 | 	mov	arg02, #1
0b354     80 FB BF FD | 	call	#_csave_addtoblock
0b358     57 00 00 FF 
0b35c     10 E4 05 F1 | 	add	objptr, ##44560
0b360     F2 12 02 FB | 	rdlong	arg01, objptr
0b364     57 00 00 FF 
0b368     10 E4 85 F1 | 	sub	objptr, ##44560
0b36c     F4 12 06 F1 | 	add	arg01, #244
0b370     09 01 58 FC | 	wrword	#0, arg01
0b374                 | LR__0964
0b374     A7 F0 03 F6 | 	mov	ptra, fp
0b378     B2 00 A0 FD | 	call	#popregs_
0b37c                 | _test_csave_ret
0b37c     2D 00 64 FD | 	ret
0b380                 | 
0b380                 | ' 
0b380                 | ' ' ----------------- Save the program
0b380                 | ' 
0b380                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
0b380                 | _do_save
0b380     04 4A 05 F6 | 	mov	COUNT_, #4
0b384     A8 00 A0 FD | 	call	#pushregs_
0b388     01 00 00 FF 
0b38c     C0 F0 07 F1 | 	add	ptra, ##704
0b390     6A 00 00 FF 
0b394     80 E4 05 F1 | 	add	objptr, ##54400
0b398     F2 1E 02 FB | 	rdlong	local01, objptr
0b39c     0F 21 02 F6 | 	mov	local02, local01
0b3a0     01 20 66 F0 | 	shl	local02, #1
0b3a4     0F 21 02 F1 | 	add	local02, local01
0b3a8     02 20 66 F0 | 	shl	local02, #2
0b3ac     03 00 00 FF 
0b3b0     04 E4 85 F1 | 	sub	objptr, ##1540
0b3b4     F2 20 02 F1 | 	add	local02, objptr
0b3b8     10 23 02 FB | 	rdlong	local03, local02
0b3bc     01 00 00 FF 
0b3c0     10 4E 05 F1 | 	add	fp, ##528
0b3c4     A7 22 62 FC | 	wrlong	local03, fp
0b3c8                 | ' 
0b3c8                 | ' numpar=compiledline(lineptr_e).result.uresult
0b3c8                 | ' 
0b3c8                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
0b3c8     01 00 00 FF 
0b3cc     10 4E 85 F1 | 	sub	fp, ##528
0b3d0     01 22 56 F2 | 	cmps	local03, #1 wc
0b3d4     67 00 00 FF 
0b3d8     7C E4 85 F1 | 	sub	objptr, ##52860
0b3dc     20 00 90 CD |  if_b	jmp	#LR__0970
0b3e0     7C F4 BF FD | 	call	#_pop
0b3e4     A7 FA 61 FC | 	wrlong	result1, fp
0b3e8     04 4E 05 F1 | 	add	fp, #4
0b3ec     A7 FC 61 FC | 	wrlong	result2, fp
0b3f0     04 4E 05 F1 | 	add	fp, #4
0b3f4     A7 FE 61 FC | 	wrlong	result3, fp
0b3f8     08 4E 85 F1 | 	sub	fp, #8
0b3fc     24 00 90 FD | 	jmp	#LR__0971
0b400                 | LR__0970
0b400     79 00 00 FF 
0b404     B4 E5 05 F1 | 	add	objptr, ##62388
0b408     F2 22 02 FB | 	rdlong	local03, objptr
0b40c     79 00 00 FF 
0b410     B4 E5 85 F1 | 	sub	objptr, ##62388
0b414     A7 22 62 FC | 	wrlong	local03, fp
0b418     08 4E 05 F1 | 	add	fp, #8
0b41c     A7 3E 68 FC | 	wrlong	#31, fp
0b420     08 4E 85 F1 | 	sub	fp, #8
0b424                 | LR__0971
0b424                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0b424     6A 00 00 FF 
0b428     84 E4 05 F1 | 	add	objptr, ##54404
0b42c     F2 12 02 FB | 	rdlong	arg01, objptr
0b430     6A 00 00 FF 
0b434     84 E4 85 F1 | 	sub	objptr, ##54404
0b438     F4 F4 B0 FD | 	call	#_pslpeek
0b43c     FF FF 7F FF 
0b440     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0b444     0C 00 90 5D |  if_ne	jmp	#LR__0972
0b448     1B 12 06 F6 | 	mov	arg01, #27
0b44c     4C F2 B0 FD | 	call	#_printerror
0b450     1C 03 90 FD | 	jmp	#LR__0978
0b454                 | LR__0972
0b454                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0b454     08 4E 05 F1 | 	add	fp, #8
0b458     A7 22 02 FB | 	rdlong	local03, fp
0b45c     08 4E 85 F1 | 	sub	fp, #8
0b460     2B 22 0E F2 | 	cmp	local03, #43 wz
0b464     18 00 90 5D |  if_ne	jmp	#LR__0973
0b468     A7 12 02 FB | 	rdlong	arg01, fp
0b46c     24 38 B0 FD | 	call	#_convertstring
0b470     A7 FA 61 FC | 	wrlong	result1, fp
0b474     08 4E 05 F1 | 	add	fp, #8
0b478     A7 3E 68 FC | 	wrlong	#31, fp
0b47c     08 4E 85 F1 | 	sub	fp, #8
0b480                 | LR__0973
0b480                 | ' if t1.result_type=result_string then
0b480     08 4E 05 F1 | 	add	fp, #8
0b484     A7 22 02 FB | 	rdlong	local03, fp
0b488     08 4E 85 F1 | 	sub	fp, #8
0b48c     1F 22 0E F2 | 	cmp	local03, #31 wz
0b490     DC 02 90 5D |  if_ne	jmp	#LR__0977
0b494                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
0b494     A7 12 02 FB | 	rdlong	arg01, fp
0b498     73 01 00 FF 
0b49c     CB 14 06 F6 | 	mov	arg02, ##@LR__5117
0b4a0     9C 36 B1 FD | 	call	#__system___string_cmp
0b4a4     00 FA 0D F2 | 	cmp	result1, #0 wz
0b4a8     79 00 00 AF 
0b4ac     B4 E5 05 A1 |  if_e	add	objptr, ##62388
0b4b0     F2 22 02 AB |  if_e	rdlong	local03, objptr
0b4b4     A7 22 62 AC |  if_e	wrlong	local03, fp
0b4b8     79 00 00 AF 
0b4bc     B4 E5 85 A1 |  if_e	sub	objptr, ##62388
0b4c0     A7 22 02 5B |  if_ne	rdlong	local03, fp
0b4c4     79 00 00 5F 
0b4c8     B4 E5 05 51 |  if_ne	add	objptr, ##62388
0b4cc     F2 22 62 5C |  if_ne	wrlong	local03, objptr
0b4d0     79 00 00 5F 
0b4d4     B4 E5 85 51 |  if_ne	sub	objptr, ##62388
0b4d8                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
0b4d8     09 12 06 F6 | 	mov	arg01, #9
0b4dc     00 86 B1 FD | 	call	#__system__close
0b4e0     09 22 06 F6 | 	mov	local03, #9
0b4e4     72 00 00 FF 
0b4e8     98 E4 05 F1 | 	add	objptr, ##58520
0b4ec     F2 12 02 FB | 	rdlong	arg01, objptr
0b4f0     72 00 00 FF 
0b4f4     98 E4 85 F1 | 	sub	objptr, ##58520
0b4f8     73 01 00 FF 
0b4fc     CC 14 06 F6 | 	mov	arg02, ##@LR__5118
0b500     70 36 B1 FD | 	call	#__system___string_concat
0b504     FD 12 02 F6 | 	mov	arg01, result1
0b508     A7 14 02 FB | 	rdlong	arg02, fp
0b50c     64 36 B1 FD | 	call	#__system___string_concat
0b510     FD 14 02 F6 | 	mov	arg02, result1
0b514     11 13 02 F6 | 	mov	arg01, local03
0b518     0D 16 06 F6 | 	mov	arg03, #13
0b51c     FC 41 B1 FD | 	call	#__system___basic_open_string
0b520     01 00 00 FF 
0b524     0C 4E 05 F1 | 	add	fp, ##524
0b528     A7 0A 68 FC | 	wrlong	#5, fp
0b52c     6A 00 00 FF 
0b530     84 E4 05 F1 | 	add	objptr, ##54404
0b534     F2 22 02 FB | 	rdlong	local03, objptr
0b538     6A 00 00 FF 
0b53c     84 E4 85 F1 | 	sub	objptr, ##54404
0b540     10 4E 05 F1 | 	add	fp, #16
0b544     A7 22 62 FC | 	wrlong	local03, fp
0b548     01 00 00 FF 
0b54c     1C 4E 85 F1 | 	sub	fp, ##540
0b550                 | ' '  put #9,1,fileheader,1
0b550                 | '   i=5
0b550                 | '   saveptr=programstart
0b550                 | '   do
0b550                 | LR__0974
0b550     01 00 00 FF 
0b554     20 4E 05 F1 | 	add	fp, ##544
0b558     A7 12 02 F6 | 	mov	arg01, fp
0b55c     04 4E 85 F1 | 	sub	fp, #4
0b560     A7 14 02 FB | 	rdlong	arg02, fp
0b564     01 00 00 FF 
0b568     1C 4E 85 F1 | 	sub	fp, ##540
0b56c     18 16 06 F6 | 	mov	arg03, #24
0b570     0B 00 00 FF 
0b574     CC E4 05 F1 | 	add	objptr, ##5836
0b578     78 29 B1 FD | 	call	#_psram_spin2_read1
0b57c     01 00 00 FF 
0b580     38 4E 05 F1 | 	add	fp, ##568
0b584     A7 12 02 F6 | 	mov	arg01, fp
0b588     10 4E 85 F1 | 	sub	fp, #16
0b58c     A7 14 02 FB | 	rdlong	arg02, fp
0b590     04 4E 05 F1 | 	add	fp, #4
0b594     A7 16 02 FB | 	rdlong	arg03, fp
0b598     01 00 00 FF 
0b59c     2C 4E 85 F1 | 	sub	fp, ##556
0b5a0     50 29 B1 FD | 	call	#_psram_spin2_read1
0b5a4     0B 00 00 FF 
0b5a8     CC E4 85 F1 | 	sub	objptr, ##5836
0b5ac     73 01 00 FF 
0b5b0     CE 22 06 F6 | 	mov	local03, ##@LR__5119
0b5b4     01 00 00 FF 
0b5b8     B8 4E 05 F1 | 	add	fp, ##696
0b5bc     A7 22 62 FC | 	wrlong	local03, fp
0b5c0                 | '     psram.read1(varptr(header(0)),saveptr,24)
0b5c0                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
0b5c0                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
0b5c0     AC 4E 85 F1 | 	sub	fp, #172
0b5c4     A7 02 68 FC | 	wrlong	#1, fp
0b5c8     20 4E 05 F1 | 	add	fp, #32
0b5cc     A7 24 02 FB | 	rdlong	local04, fp
0b5d0     01 00 00 FF 
0b5d4     2C 4E 85 F1 | 	sub	fp, ##556
0b5d8     01 24 06 F1 | 	add	local04, #1
0b5dc                 | LR__0975
0b5dc     01 00 00 FF 
0b5e0     0C 4E 05 F1 | 	add	fp, ##524
0b5e4     A7 22 02 FB | 	rdlong	local03, fp
0b5e8     01 00 00 FF 
0b5ec     0C 4E 85 F1 | 	sub	fp, ##524
0b5f0     12 23 52 F2 | 	cmps	local03, local04 wc
0b5f4     64 00 90 3D |  if_ae	jmp	#LR__0976
0b5f8     01 00 00 FF 
0b5fc     B8 4E 05 F1 | 	add	fp, ##696
0b600     A7 1E 02 FB | 	rdlong	local01, fp
0b604     AC 4E 85 F1 | 	sub	fp, #172
0b608     A7 22 02 FB | 	rdlong	local03, fp
0b60c     01 22 86 F1 | 	sub	local03, #1
0b610     2C 4E 05 F1 | 	add	fp, #44
0b614     A7 22 02 F1 | 	add	local03, fp
0b618     11 13 C2 FA | 	rdbyte	arg01, local03
0b61c     01 00 00 FF 
0b620     38 4E 85 F1 | 	sub	fp, ##568
0b624     FC 56 B1 FD | 	call	#__system__Chr_S
0b628     FD 14 02 F6 | 	mov	arg02, result1
0b62c     0F 13 02 F6 | 	mov	arg01, local01
0b630     40 35 B1 FD | 	call	#__system___string_concat
0b634     01 00 00 FF 
0b638     B8 4E 05 F1 | 	add	fp, ##696
0b63c     A7 FA 61 FC | 	wrlong	result1, fp
0b640     AC 4E 85 F1 | 	sub	fp, #172
0b644     A7 22 02 FB | 	rdlong	local03, fp
0b648     01 22 06 F1 | 	add	local03, #1
0b64c     A7 22 62 FC | 	wrlong	local03, fp
0b650     01 00 00 FF 
0b654     0C 4E 85 F1 | 	sub	fp, ##524
0b658     80 FF 9F FD | 	jmp	#LR__0975
0b65c                 | LR__0976
0b65c                 | '  '   put #9,i,header(3),1 : i+=4
0b65c                 | '  '   put #9,i,linebuf(0),header(3) : i+=header(3)
0b65c                 | '      print #9, saveline$
0b65c     09 12 06 F6 | 	mov	arg01, #9
0b660     4C 8E B1 FD | 	call	#__system___getiolock_0484
0b664     FD 12 02 F6 | 	mov	arg01, result1
0b668     AC 34 B1 FD | 	call	#__system___lockmem
0b66c     01 00 00 FF 
0b670     B8 4E 05 F1 | 	add	fp, ##696
0b674     A7 14 02 FB | 	rdlong	arg02, fp
0b678     01 00 00 FF 
0b67c     B8 4E 85 F1 | 	sub	fp, ##696
0b680     09 12 06 F6 | 	mov	arg01, #9
0b684     00 16 06 F6 | 	mov	arg03, #0
0b688     94 41 B1 FD | 	call	#__system___basic_print_string
0b68c     09 12 06 F6 | 	mov	arg01, #9
0b690     0A 14 06 F6 | 	mov	arg02, #10
0b694     00 16 06 F6 | 	mov	arg03, #0
0b698     2C 41 B1 FD | 	call	#__system___basic_print_char
0b69c     09 12 06 F6 | 	mov	arg01, #9
0b6a0     0C 8E B1 FD | 	call	#__system___getiolock_0484
0b6a4     FD 00 68 FC | 	wrlong	#0, result1
0b6a8     01 00 00 FF 
0b6ac     34 4E 05 F1 | 	add	fp, ##564
0b6b0     A7 22 02 FB | 	rdlong	local03, fp
0b6b4     18 4E 85 F1 | 	sub	fp, #24
0b6b8     A7 22 62 FC | 	wrlong	local03, fp
0b6bc     18 4E 05 F1 | 	add	fp, #24
0b6c0     A7 22 02 FB | 	rdlong	local03, fp
0b6c4     01 00 00 FF 
0b6c8     34 4E 85 F1 | 	sub	fp, ##564
0b6cc     FF FF 3F FF 
0b6d0     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0b6d4     78 FE 9F 5D |  if_ne	jmp	#LR__0974
0b6d8                 | '   close #9  
0b6d8     09 12 06 F6 | 	mov	arg01, #9
0b6dc     00 84 B1 FD | 	call	#__system__close
0b6e0                 | '   print "Saved as ";currentdir$+"/"+loadname
0b6e0     00 12 06 F6 | 	mov	arg01, #0
0b6e4     C8 8D B1 FD | 	call	#__system___getiolock_0484
0b6e8     FD 12 02 F6 | 	mov	arg01, result1
0b6ec     28 34 B1 FD | 	call	#__system___lockmem
0b6f0     73 01 00 FF 
0b6f4     CF 14 06 F6 | 	mov	arg02, ##@LR__5120
0b6f8     00 12 06 F6 | 	mov	arg01, #0
0b6fc     00 16 06 F6 | 	mov	arg03, #0
0b700     1C 41 B1 FD | 	call	#__system___basic_print_string
0b704     00 20 06 F6 | 	mov	local02, #0
0b708     72 00 00 FF 
0b70c     98 E4 05 F1 | 	add	objptr, ##58520
0b710     F2 12 02 FB | 	rdlong	arg01, objptr
0b714     72 00 00 FF 
0b718     98 E4 85 F1 | 	sub	objptr, ##58520
0b71c     73 01 00 FF 
0b720     D9 14 06 F6 | 	mov	arg02, ##@LR__5121
0b724     4C 34 B1 FD | 	call	#__system___string_concat
0b728     FD 12 02 F6 | 	mov	arg01, result1
0b72c     79 00 00 FF 
0b730     B4 E5 05 F1 | 	add	objptr, ##62388
0b734     F2 14 02 FB | 	rdlong	arg02, objptr
0b738     79 00 00 FF 
0b73c     B4 E5 85 F1 | 	sub	objptr, ##62388
0b740     30 34 B1 FD | 	call	#__system___string_concat
0b744     FD 14 02 F6 | 	mov	arg02, result1
0b748     10 13 02 F6 | 	mov	arg01, local02
0b74c     00 16 06 F6 | 	mov	arg03, #0
0b750     CC 40 B1 FD | 	call	#__system___basic_print_string
0b754     00 12 06 F6 | 	mov	arg01, #0
0b758     0A 14 06 F6 | 	mov	arg02, #10
0b75c     00 16 06 F6 | 	mov	arg03, #0
0b760     64 40 B1 FD | 	call	#__system___basic_print_char
0b764     00 12 06 F6 | 	mov	arg01, #0
0b768     44 8D B1 FD | 	call	#__system___getiolock_0484
0b76c     FD 00 68 FC | 	wrlong	#0, result1
0b770                 | LR__0977
0b770                 | LR__0978
0b770     A7 F0 03 F6 | 	mov	ptra, fp
0b774     B2 00 A0 FD | 	call	#popregs_
0b778                 | _do_save_ret
0b778     2D 00 64 FD | 	ret
0b77c                 | 
0b77c                 | ' 
0b77c                 | ' '----------------- Load the program
0b77c                 | ' 'lo todo: errors while loading
0b77c                 | ' sub do_load
0b77c                 | _do_load
0b77c     01 4A 05 F6 | 	mov	COUNT_, #1
0b780     A8 00 A0 FD | 	call	#pushregs_
0b784     A8 F0 07 F1 | 	add	ptra, #168
0b788     6A 00 00 FF 
0b78c     80 E4 05 F1 | 	add	objptr, ##54400
0b790     F2 14 02 FB | 	rdlong	arg02, objptr
0b794     0A 13 02 F6 | 	mov	arg01, arg02
0b798     01 12 66 F0 | 	shl	arg01, #1
0b79c     0A 13 02 F1 | 	add	arg01, arg02
0b7a0     02 12 66 F0 | 	shl	arg01, #2
0b7a4     03 00 00 FF 
0b7a8     04 E4 85 F1 | 	sub	objptr, ##1540
0b7ac     F2 12 02 F1 | 	add	arg01, objptr
0b7b0     09 15 02 FB | 	rdlong	arg02, arg01
0b7b4     18 4E 05 F1 | 	add	fp, #24
0b7b8     A7 14 62 FC | 	wrlong	arg02, fp
0b7bc     8C 4E 05 F1 | 	add	fp, #140
0b7c0     A7 12 02 F6 | 	mov	arg01, fp
0b7c4     67 00 00 FF 
0b7c8     7C E4 85 F1 | 	sub	objptr, ##52860
0b7cc     80 4E 85 F1 | 	sub	fp, #128
0b7d0     09 4F 61 FC | 	wrlong	fp, arg01
0b7d4                 | ' numpar=compiledline(lineptr_e).result.uresult
0b7d4                 | ' lpoke varptr(line2$),varptr(line2)
0b7d4                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
0b7d4     0C 4E 85 F1 | 	sub	fp, #12
0b7d8     A7 1E 02 FB | 	rdlong	local01, fp
0b7dc     18 4E 85 F1 | 	sub	fp, #24
0b7e0     01 1E 56 F2 | 	cmps	local01, #1 wc
0b7e4     20 00 90 CD |  if_b	jmp	#LR__0980
0b7e8     74 F0 BF FD | 	call	#_pop
0b7ec     A7 FA 61 FC | 	wrlong	result1, fp
0b7f0     04 4E 05 F1 | 	add	fp, #4
0b7f4     A7 FC 61 FC | 	wrlong	result2, fp
0b7f8     04 4E 05 F1 | 	add	fp, #4
0b7fc     A7 FE 61 FC | 	wrlong	result3, fp
0b800     08 4E 85 F1 | 	sub	fp, #8
0b804     24 00 90 FD | 	jmp	#LR__0981
0b808                 | LR__0980
0b808     79 00 00 FF 
0b80c     B4 E5 05 F1 | 	add	objptr, ##62388
0b810     F2 1E 02 FB | 	rdlong	local01, objptr
0b814     79 00 00 FF 
0b818     B4 E5 85 F1 | 	sub	objptr, ##62388
0b81c     A7 1E 62 FC | 	wrlong	local01, fp
0b820     08 4E 05 F1 | 	add	fp, #8
0b824     A7 3E 68 FC | 	wrlong	#31, fp
0b828     08 4E 85 F1 | 	sub	fp, #8
0b82c                 | LR__0981
0b82c                 | ' 'print "popped "; t1.result.uresult, t1.result_type
0b82c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
0b82c     08 4E 05 F1 | 	add	fp, #8
0b830     A7 1E 02 FB | 	rdlong	local01, fp
0b834     08 4E 85 F1 | 	sub	fp, #8
0b838     2B 1E 0E F2 | 	cmp	local01, #43 wz
0b83c     18 00 90 5D |  if_ne	jmp	#LR__0982
0b840     A7 12 02 FB | 	rdlong	arg01, fp
0b844     4C 34 B0 FD | 	call	#_convertstring
0b848     A7 FA 61 FC | 	wrlong	result1, fp
0b84c     08 4E 05 F1 | 	add	fp, #8
0b850     A7 3E 68 FC | 	wrlong	#31, fp
0b854     08 4E 85 F1 | 	sub	fp, #8
0b858                 | LR__0982
0b858                 | ' if t1.result_type=result_string then
0b858     08 4E 05 F1 | 	add	fp, #8
0b85c     A7 1E 02 FB | 	rdlong	local01, fp
0b860     08 4E 85 F1 | 	sub	fp, #8
0b864     1F 1E 0E F2 | 	cmp	local01, #31 wz
0b868     20 04 90 5D |  if_ne	jmp	#LR__0990
0b86c     EC 2C B0 FD | 	call	#_do_new
0b870                 | '   do_new
0b870                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
0b870     A7 12 02 FB | 	rdlong	arg01, fp
0b874     73 01 00 FF 
0b878     DB 14 06 F6 | 	mov	arg02, ##@LR__5122
0b87c     C0 32 B1 FD | 	call	#__system___string_cmp
0b880     00 FA 0D F2 | 	cmp	result1, #0 wz
0b884     79 00 00 AF 
0b888     B4 E5 05 A1 |  if_e	add	objptr, ##62388
0b88c     F2 1E 02 AB |  if_e	rdlong	local01, objptr
0b890     A7 1E 62 AC |  if_e	wrlong	local01, fp
0b894     79 00 00 AF 
0b898     B4 E5 85 A1 |  if_e	sub	objptr, ##62388
0b89c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0b8a0     79 00 00 5F 
0b8a4     B4 E5 05 51 |  if_ne	add	objptr, ##62388
0b8a8     F2 1E 62 5C |  if_ne	wrlong	local01, objptr
0b8ac     79 00 00 5F 
0b8b0     B4 E5 85 51 |  if_ne	sub	objptr, ##62388
0b8b4                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0b8b4     09 12 06 F6 | 	mov	arg01, #9
0b8b8     24 82 B1 FD | 	call	#__system__close
0b8bc     09 1E 06 F6 | 	mov	local01, #9
0b8c0     72 00 00 FF 
0b8c4     98 E4 05 F1 | 	add	objptr, ##58520
0b8c8     F2 12 02 FB | 	rdlong	arg01, objptr
0b8cc     72 00 00 FF 
0b8d0     98 E4 85 F1 | 	sub	objptr, ##58520
0b8d4     73 01 00 FF 
0b8d8     DC 14 06 F6 | 	mov	arg02, ##@LR__5123
0b8dc     94 32 B1 FD | 	call	#__system___string_concat
0b8e0     FD 12 02 F6 | 	mov	arg01, result1
0b8e4     A7 14 02 FB | 	rdlong	arg02, fp
0b8e8     88 32 B1 FD | 	call	#__system___string_concat
0b8ec     FD 14 02 F6 | 	mov	arg02, result1
0b8f0     0F 13 02 F6 | 	mov	arg01, local01
0b8f4     00 16 06 F6 | 	mov	arg03, #0
0b8f8     20 3E B1 FD | 	call	#__system___basic_open_string
0b8fc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0b900     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0b904     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0b908     10 4E 05 F1 | 	add	fp, #16
0b90c     A7 FA 61 FC | 	wrlong	result1, fp
0b910                 | '   r=geterr() 
0b910                 | '   if r then 
0b910     10 4E 85 F1 | 	sub	fp, #16
0b914     48 01 90 AD |  if_e	jmp	#LR__0984
0b918                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
0b918     09 12 06 F6 | 	mov	arg01, #9
0b91c     C0 81 B1 FD | 	call	#__system__close
0b920     09 1E 06 F6 | 	mov	local01, #9
0b924     72 00 00 FF 
0b928     98 E4 05 F1 | 	add	objptr, ##58520
0b92c     F2 12 02 FB | 	rdlong	arg01, objptr
0b930     72 00 00 FF 
0b934     98 E4 85 F1 | 	sub	objptr, ##58520
0b938     73 01 00 FF 
0b93c     DE 14 06 F6 | 	mov	arg02, ##@LR__5124
0b940     30 32 B1 FD | 	call	#__system___string_concat
0b944     FD 12 02 F6 | 	mov	arg01, result1
0b948     A7 14 02 FB | 	rdlong	arg02, fp
0b94c     24 32 B1 FD | 	call	#__system___string_concat
0b950     FD 12 02 F6 | 	mov	arg01, result1
0b954     73 01 00 FF 
0b958     E0 14 06 F6 | 	mov	arg02, ##@LR__5125
0b95c     14 32 B1 FD | 	call	#__system___string_concat
0b960     FD 14 02 F6 | 	mov	arg02, result1
0b964     0F 13 02 F6 | 	mov	arg01, local01
0b968     00 16 06 F6 | 	mov	arg03, #0
0b96c     AC 3D B1 FD | 	call	#__system___basic_open_string
0b970     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0b974     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0b978     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0b97c     10 4E 05 F1 | 	add	fp, #16
0b980     A7 FA 61 FC | 	wrlong	result1, fp
0b984                 | '     r=geterr() 
0b984                 | '     if r then 
0b984     10 4E 85 F1 | 	sub	fp, #16
0b988     A0 00 90 AD |  if_e	jmp	#LR__0983
0b98c                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
0b98c     00 12 06 F6 | 	mov	arg01, #0
0b990     1C 8B B1 FD | 	call	#__system___getiolock_0484
0b994     FD 12 02 F6 | 	mov	arg01, result1
0b998     7C 31 B1 FD | 	call	#__system___lockmem
0b99c     73 01 00 FF 
0b9a0     E5 14 06 F6 | 	mov	arg02, ##@LR__5126
0b9a4     00 12 06 F6 | 	mov	arg01, #0
0b9a8     00 16 06 F6 | 	mov	arg03, #0
0b9ac     70 3E B1 FD | 	call	#__system___basic_print_string
0b9b0     10 4E 05 F1 | 	add	fp, #16
0b9b4     A7 14 02 FB | 	rdlong	arg02, fp
0b9b8     10 4E 85 F1 | 	sub	fp, #16
0b9bc     00 12 06 F6 | 	mov	arg01, #0
0b9c0     00 16 06 F6 | 	mov	arg03, #0
0b9c4     0A 18 06 F6 | 	mov	arg04, #10
0b9c8     98 3E B1 FD | 	call	#__system___basic_print_integer
0b9cc     73 01 00 FF 
0b9d0     F3 14 06 F6 | 	mov	arg02, ##@LR__5127
0b9d4     00 12 06 F6 | 	mov	arg01, #0
0b9d8     00 16 06 F6 | 	mov	arg03, #0
0b9dc     40 3E B1 FD | 	call	#__system___basic_print_string
0b9e0     00 1E 06 F6 | 	mov	local01, #0
0b9e4     10 4E 05 F1 | 	add	fp, #16
0b9e8     A7 12 02 FB | 	rdlong	arg01, fp
0b9ec     10 4E 85 F1 | 	sub	fp, #16
0b9f0     B8 57 B1 FD | 	call	#__system___strerror
0b9f4     FD 14 02 F6 | 	mov	arg02, result1
0b9f8     0F 13 02 F6 | 	mov	arg01, local01
0b9fc     00 16 06 F6 | 	mov	arg03, #0
0ba00     1C 3E B1 FD | 	call	#__system___basic_print_string
0ba04     00 12 06 F6 | 	mov	arg01, #0
0ba08     0A 14 06 F6 | 	mov	arg02, #10
0ba0c     00 16 06 F6 | 	mov	arg03, #0
0ba10     B4 3D B1 FD | 	call	#__system___basic_print_char
0ba14     00 12 06 F6 | 	mov	arg01, #0
0ba18     94 8A B1 FD | 	call	#__system___getiolock_0484
0ba1c     FD 00 68 FC | 	wrlong	#0, result1
0ba20     09 12 06 F6 | 	mov	arg01, #9
0ba24     B8 80 B1 FD | 	call	#__system__close
0ba28     F8 02 90 FD | 	jmp	#LR__0992
0ba2c                 | LR__0983
0ba2c     79 00 00 FF 
0ba30     B4 E5 05 F1 | 	add	objptr, ##62388
0ba34     F2 12 02 FB | 	rdlong	arg01, objptr
0ba38     79 00 00 FF 
0ba3c     B4 E5 85 F1 | 	sub	objptr, ##62388
0ba40     73 01 00 FF 
0ba44     F6 14 06 F6 | 	mov	arg02, ##@LR__5128
0ba48     28 31 B1 FD | 	call	#__system___string_concat
0ba4c     79 00 00 FF 
0ba50     B4 E5 05 F1 | 	add	objptr, ##62388
0ba54     F2 FA 61 FC | 	wrlong	result1, objptr
0ba58     79 00 00 FF 
0ba5c     B4 E5 85 F1 | 	sub	objptr, ##62388
0ba60                 | LR__0984
0ba60     0C 4E 05 F1 | 	add	fp, #12
0ba64     A7 0A 68 FC | 	wrlong	#5, fp
0ba68                 | '   i=5
0ba68                 | '   get #9,1,header,1   
0ba68     10 4E 05 F1 | 	add	fp, #16
0ba6c     A7 16 02 F6 | 	mov	arg03, fp
0ba70     1C 4E 85 F1 | 	sub	fp, #28
0ba74     09 12 06 F6 | 	mov	arg01, #9
0ba78     01 14 06 F6 | 	mov	arg02, #1
0ba7c     01 18 06 F6 | 	mov	arg04, #1
0ba80     04 1A 06 F6 | 	mov	arg05, #4
0ba84     A8 3E B1 FD | 	call	#__system___basic_get
0ba88                 | '   
0ba88                 | '   if header<>$0D616272 then 
0ba88     1C 4E 05 F1 | 	add	fp, #28
0ba8c     A7 1E 02 FB | 	rdlong	local01, fp
0ba90     1C 4E 85 F1 | 	sub	fp, #28
0ba94     B1 B0 06 FF 
0ba98     72 1E 0E F2 | 	cmp	local01, ##224486002 wz
0ba9c     00 01 90 AD |  if_e	jmp	#LR__0987
0baa0                 | '     close #9: open currentdir$+"/"+loadname for input as #9
0baa0     09 12 06 F6 | 	mov	arg01, #9
0baa4     38 80 B1 FD | 	call	#__system__close
0baa8     09 1E 06 F6 | 	mov	local01, #9
0baac     72 00 00 FF 
0bab0     98 E4 05 F1 | 	add	objptr, ##58520
0bab4     F2 12 02 FB | 	rdlong	arg01, objptr
0bab8     72 00 00 FF 
0babc     98 E4 85 F1 | 	sub	objptr, ##58520
0bac0     73 01 00 FF 
0bac4     FB 14 06 F6 | 	mov	arg02, ##@LR__5129
0bac8     A8 30 B1 FD | 	call	#__system___string_concat
0bacc     FD 12 02 F6 | 	mov	arg01, result1
0bad0     79 00 00 FF 
0bad4     B4 E5 05 F1 | 	add	objptr, ##62388
0bad8     F2 14 02 FB | 	rdlong	arg02, objptr
0badc     79 00 00 FF 
0bae0     B4 E5 85 F1 | 	sub	objptr, ##62388
0bae4     8C 30 B1 FD | 	call	#__system___string_concat
0bae8     FD 14 02 F6 | 	mov	arg02, result1
0baec     0F 13 02 F6 | 	mov	arg01, local01
0baf0     00 16 06 F6 | 	mov	arg03, #0
0baf4     24 3C B1 FD | 	call	#__system___basic_open_string
0baf8                 | '     do
0baf8                 | LR__0985
0baf8     09 12 06 F6 | 	mov	arg01, #9
0bafc     24 32 B1 FD | 	call	#__system___basic_read_line
0bb00     57 00 00 FF 
0bb04     1C E4 05 F1 | 	add	objptr, ##44572
0bb08     F2 FA 61 FC | 	wrlong	result1, objptr
0bb0c                 | '       if left$(line$,1) >="0" andalso left$(line$,1)<="9" then interpret
0bb0c     57 00 00 FF 
0bb10     1C E4 85 F1 | 	sub	objptr, ##44572
0bb14     FD 12 02 F6 | 	mov	arg01, result1
0bb18     01 14 06 F6 | 	mov	arg02, #1
0bb1c     40 50 B1 FD | 	call	#__system__Left_S
0bb20     FD 12 02 F6 | 	mov	arg01, result1
0bb24     73 01 00 FF 
0bb28     FD 14 06 F6 | 	mov	arg02, ##@LR__5130
0bb2c     10 30 B1 FD | 	call	#__system___string_cmp
0bb30     00 FA 55 F2 | 	cmps	result1, #0 wc
0bb34     34 00 90 CD |  if_b	jmp	#LR__0986
0bb38     57 00 00 FF 
0bb3c     1C E4 05 F1 | 	add	objptr, ##44572
0bb40     F2 12 02 FB | 	rdlong	arg01, objptr
0bb44     57 00 00 FF 
0bb48     1C E4 85 F1 | 	sub	objptr, ##44572
0bb4c     01 14 06 F6 | 	mov	arg02, #1
0bb50     0C 50 B1 FD | 	call	#__system__Left_S
0bb54     FD 12 02 F6 | 	mov	arg01, result1
0bb58     73 01 00 FF 
0bb5c     FF 14 06 F6 | 	mov	arg02, ##@LR__5131
0bb60     DC 2F B1 FD | 	call	#__system___string_cmp
0bb64     01 FA 55 F2 | 	cmps	result1, #1 wc
0bb68     B0 4E BF CD |  if_b	call	#_interpret
0bb6c                 | LR__0986
0bb6c     57 00 00 FF 
0bb70     1C E4 05 F1 | 	add	objptr, ##44572
0bb74     F2 12 02 FB | 	rdlong	arg01, objptr
0bb78     57 00 00 FF 
0bb7c     1C E4 85 F1 | 	sub	objptr, ##44572
0bb80     73 01 00 FF 
0bb84     01 15 06 F6 | 	mov	arg02, ##@LR__5132
0bb88     B4 2F B1 FD | 	call	#__system___string_cmp
0bb8c     00 FA 0D F2 | 	cmp	result1, #0 wz
0bb90     64 FF 9F 5D |  if_ne	jmp	#LR__0985
0bb94                 | '     close #9
0bb94     09 12 06 F6 | 	mov	arg01, #9
0bb98     44 7F B1 FD | 	call	#__system__close
0bb9c     F4 00 90 FD | 	jmp	#LR__0991
0bba0                 | LR__0987
0bba0                 | '   'printerror(26) : close #9 : return
0bba0                 | '     do
0bba0                 | LR__0988
0bba0                 | '       get #9,i,linelength,1,amount : i+=4 : line2(linelength)=0
0bba0     0C 4E 05 F1 | 	add	fp, #12
0bba4     A7 14 02 FB | 	rdlong	arg02, fp
0bba8     14 4E 05 F1 | 	add	fp, #20
0bbac     A7 16 02 F6 | 	mov	arg03, fp
0bbb0     20 4E 85 F1 | 	sub	fp, #32
0bbb4     09 12 06 F6 | 	mov	arg01, #9
0bbb8     01 18 06 F6 | 	mov	arg04, #1
0bbbc     04 1A 06 F6 | 	mov	arg05, #4
0bbc0     6C 3D B1 FD | 	call	#__system___basic_get
0bbc4     14 4E 05 F1 | 	add	fp, #20
0bbc8     A7 FA 61 FC | 	wrlong	result1, fp
0bbcc     08 4E 85 F1 | 	sub	fp, #8
0bbd0     A7 1E 02 FB | 	rdlong	local01, fp
0bbd4     04 1E 06 F1 | 	add	local01, #4
0bbd8     A7 1E 62 FC | 	wrlong	local01, fp
0bbdc     14 4E 05 F1 | 	add	fp, #20
0bbe0     A7 1E 02 FB | 	rdlong	local01, fp
0bbe4     04 4E 05 F1 | 	add	fp, #4
0bbe8     A7 1E 02 F1 | 	add	local01, fp
0bbec     0F 01 48 FC | 	wrbyte	#0, local01
0bbf0                 | '       if amount=1 then  
0bbf0     10 4E 85 F1 | 	sub	fp, #16
0bbf4     A7 1E 02 FB | 	rdlong	local01, fp
0bbf8     14 4E 85 F1 | 	sub	fp, #20
0bbfc     01 1E 0E F2 | 	cmp	local01, #1 wz
0bc00     68 00 90 5D |  if_ne	jmp	#LR__0989
0bc04                 | '         get #9,i,line2(0),linelength : i+=linelength
0bc04     0C 4E 05 F1 | 	add	fp, #12
0bc08     A7 14 02 FB | 	rdlong	arg02, fp
0bc0c     18 4E 05 F1 | 	add	fp, #24
0bc10     A7 16 02 F6 | 	mov	arg03, fp
0bc14     04 4E 85 F1 | 	sub	fp, #4
0bc18     A7 18 02 FB | 	rdlong	arg04, fp
0bc1c     20 4E 85 F1 | 	sub	fp, #32
0bc20     09 12 06 F6 | 	mov	arg01, #9
0bc24     01 1A 06 F6 | 	mov	arg05, #1
0bc28     04 3D B1 FD | 	call	#__system___basic_get
0bc2c     0C 4E 05 F1 | 	add	fp, #12
0bc30     A7 1E 02 FB | 	rdlong	local01, fp
0bc34     14 4E 05 F1 | 	add	fp, #20
0bc38     A7 1A 02 FB | 	rdlong	arg05, fp
0bc3c     0D 1F 02 F1 | 	add	local01, arg05
0bc40     14 4E 85 F1 | 	sub	fp, #20
0bc44     A7 1E 62 FC | 	wrlong	local01, fp
0bc48     98 4E 05 F1 | 	add	fp, #152
0bc4c     A7 1E 02 FB | 	rdlong	local01, fp
0bc50     A4 4E 85 F1 | 	sub	fp, #164
0bc54     57 00 00 FF 
0bc58     1C E4 05 F1 | 	add	objptr, ##44572
0bc5c     F2 1E 62 FC | 	wrlong	local01, objptr
0bc60     57 00 00 FF 
0bc64     1C E4 85 F1 | 	sub	objptr, ##44572
0bc68     B0 4D BF FD | 	call	#_interpret
0bc6c                 | LR__0989
0bc6c     14 4E 05 F1 | 	add	fp, #20
0bc70     A7 1E 02 FB | 	rdlong	local01, fp
0bc74     14 4E 85 F1 | 	sub	fp, #20
0bc78     01 1E 56 F2 | 	cmps	local01, #1 wc
0bc7c     20 FF 9F 3D |  if_ae	jmp	#LR__0988
0bc80                 | '     close #9 
0bc80     09 12 06 F6 | 	mov	arg01, #9
0bc84     58 7E B1 FD | 	call	#__system__close
0bc88     08 00 90 FD | 	jmp	#LR__0991
0bc8c                 | LR__0990
0bc8c     1E 12 06 F6 | 	mov	arg01, #30
0bc90     08 EA B0 FD | 	call	#_printerror
0bc94                 | LR__0991
0bc94                 | '   print "Loaded ";currentdir$+"/"+loadname
0bc94     00 12 06 F6 | 	mov	arg01, #0
0bc98     14 88 B1 FD | 	call	#__system___getiolock_0484
0bc9c     FD 12 02 F6 | 	mov	arg01, result1
0bca0     74 2E B1 FD | 	call	#__system___lockmem
0bca4     73 01 00 FF 
0bca8     02 15 06 F6 | 	mov	arg02, ##@LR__5133
0bcac     00 12 06 F6 | 	mov	arg01, #0
0bcb0     00 16 06 F6 | 	mov	arg03, #0
0bcb4     68 3B B1 FD | 	call	#__system___basic_print_string
0bcb8     00 1E 06 F6 | 	mov	local01, #0
0bcbc     72 00 00 FF 
0bcc0     98 E4 05 F1 | 	add	objptr, ##58520
0bcc4     F2 12 02 FB | 	rdlong	arg01, objptr
0bcc8     72 00 00 FF 
0bccc     98 E4 85 F1 | 	sub	objptr, ##58520
0bcd0     73 01 00 FF 
0bcd4     0A 15 06 F6 | 	mov	arg02, ##@LR__5134
0bcd8     98 2E B1 FD | 	call	#__system___string_concat
0bcdc     FD 12 02 F6 | 	mov	arg01, result1
0bce0     79 00 00 FF 
0bce4     B4 E5 05 F1 | 	add	objptr, ##62388
0bce8     F2 14 02 FB | 	rdlong	arg02, objptr
0bcec     79 00 00 FF 
0bcf0     B4 E5 85 F1 | 	sub	objptr, ##62388
0bcf4     7C 2E B1 FD | 	call	#__system___string_concat
0bcf8     FD 14 02 F6 | 	mov	arg02, result1
0bcfc     0F 13 02 F6 | 	mov	arg01, local01
0bd00     00 16 06 F6 | 	mov	arg03, #0
0bd04     18 3B B1 FD | 	call	#__system___basic_print_string
0bd08     00 12 06 F6 | 	mov	arg01, #0
0bd0c     0A 14 06 F6 | 	mov	arg02, #10
0bd10     00 16 06 F6 | 	mov	arg03, #0
0bd14     B0 3A B1 FD | 	call	#__system___basic_print_char
0bd18     00 12 06 F6 | 	mov	arg01, #0
0bd1c     90 87 B1 FD | 	call	#__system___getiolock_0484
0bd20     FD 00 68 FC | 	wrlong	#0, result1
0bd24                 | LR__0992
0bd24     A7 F0 03 F6 | 	mov	ptra, fp
0bd28     B2 00 A0 FD | 	call	#popregs_
0bd2c                 | _do_load_ret
0bd2c     2D 00 64 FD | 	ret
0bd30                 | 
0bd30                 | ' 
0bd30                 | ' sub do_end
0bd30                 | _do_end
0bd30     6A 00 00 FF 
0bd34     7C E4 05 F1 | 	add	objptr, ##54396
0bd38     F2 00 02 FB | 	rdlong	_var01, objptr
0bd3c     01 00 86 F1 | 	sub	_var01, #1
0bd40     04 E4 05 F1 | 	add	objptr, #4
0bd44     F2 00 62 FC | 	wrlong	_var01, objptr
0bd48     0E 00 00 FF 
0bd4c     3C E4 05 F1 | 	add	objptr, ##7228
0bd50     FF FF BF FF 
0bd54     F2 FE 6B FC | 	wrlong	##2147483647, objptr
0bd58     78 00 00 FF 
0bd5c     BC E4 85 F1 | 	sub	objptr, ##61628
0bd60                 | _do_end_ret
0bd60     2D 00 64 FD | 	ret
0bd64                 | 
0bd64                 | ' 
0bd64                 | ' '----------------- Run the program 
0bd64                 | ' 
0bd64                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
0bd64                 | ' 
0bd64                 | ' sub do_run
0bd64                 | _do_run
0bd64     01 4A 05 F6 | 	mov	COUNT_, #1
0bd68     A8 00 A0 FD | 	call	#pushregs_
0bd6c     6A 00 00 FF 
0bd70     80 E4 05 F1 | 	add	objptr, ##54400
0bd74     F2 18 02 FB | 	rdlong	arg04, objptr
0bd78     0C 17 02 F6 | 	mov	arg03, arg04
0bd7c     01 16 66 F0 | 	shl	arg03, #1
0bd80     0C 17 02 F1 | 	add	arg03, arg04
0bd84     02 16 66 F0 | 	shl	arg03, #2
0bd88     03 00 00 FF 
0bd8c     04 E4 85 F1 | 	sub	objptr, ##1540
0bd90     F2 16 02 F1 | 	add	arg03, objptr
0bd94     0B 15 02 FB | 	rdlong	arg02, arg03
0bd98                 | ' numpar=compiledline(lineptr_e).result.uresult
0bd98                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
0bd98     01 14 0E F2 | 	cmp	arg02, #1 wz
0bd9c     67 00 00 FF 
0bda0     7C E4 85 F1 | 	sub	objptr, ##52860
0bda4     D4 F9 BF AD |  if_e	call	#_do_load
0bda8     6A 00 00 FF 
0bdac     84 E4 05 F1 | 	add	objptr, ##54404
0bdb0     F2 18 02 FB | 	rdlong	arg04, objptr
0bdb4     0E 00 00 FF 
0bdb8     38 E4 05 F1 | 	add	objptr, ##7224
0bdbc     F2 18 62 FC | 	wrlong	arg04, objptr
0bdc0     04 E4 05 F1 | 	add	objptr, #4
0bdc4     F2 00 68 FC | 	wrlong	#0, objptr
0bdc8     04 E4 05 F1 | 	add	objptr, #4
0bdcc     FF FF FF FF 
0bdd0     F2 FE 6B FC | 	wrlong	##-1, objptr
0bdd4                 | ' if inrun>0 then 
0bdd4     04 E4 05 F1 | 	add	objptr, #4
0bdd8     F2 18 02 FB | 	rdlong	arg04, objptr
0bddc     78 00 00 FF 
0bde0     C8 E4 85 F1 | 	sub	objptr, ##61640
0bde4     01 18 16 F2 | 	cmp	arg04, #1 wc
0bde8     30 00 90 CD |  if_b	jmp	#LR__1000
0bdec     78 00 00 FF 
0bdf0     CC E4 05 F1 | 	add	objptr, ##61644
0bdf4     F2 12 02 F6 | 	mov	arg01, objptr
0bdf8     10 E4 85 F1 | 	sub	objptr, #16
0bdfc     F2 14 02 FB | 	rdlong	arg02, objptr
0be00     18 16 06 F6 | 	mov	arg03, #24
0be04     6C 00 00 FF 
0be08     F0 E5 85 F1 | 	sub	objptr, ##55792
0be0c     E4 20 B1 FD | 	call	#_psram_spin2_read1
0be10     0B 00 00 FF 
0be14     CC E4 85 F1 | 	sub	objptr, ##5836
0be18                 | '   psram.read1(varptr(runheader),runptr,24)  
0be18                 | '   return
0be18     88 02 90 FD | 	jmp	#LR__1006
0be1c                 | LR__1000
0be1c     78 00 00 FF 
0be20     C8 E4 05 F1 | 	add	objptr, ##61640
0be24     F2 02 68 FC | 	wrlong	#1, objptr
0be28     04 E4 05 F1 | 	add	objptr, #4
0be2c     F2 12 02 F6 | 	mov	arg01, objptr
0be30     10 E4 85 F1 | 	sub	objptr, #16
0be34     F2 14 02 FB | 	rdlong	arg02, objptr
0be38     18 16 06 F6 | 	mov	arg03, #24
0be3c     6C 00 00 FF 
0be40     F0 E5 85 F1 | 	sub	objptr, ##55792
0be44     AC 20 B1 FD | 	call	#_psram_spin2_read1
0be48                 | ' inrun=1
0be48                 | ' psram.read1(varptr(runheader),runptr,24) 
0be48                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
0be48     6D 00 00 FF 
0be4c     00 E4 05 F1 | 	add	objptr, ##55808
0be50     F2 1E 02 FB | 	rdlong	local01, objptr
0be54     78 00 00 FF 
0be58     CC E4 85 F1 | 	sub	objptr, ##61644
0be5c     FF FF 7F FF 
0be60     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0be64     78 00 00 AF 
0be68     C8 E4 05 A1 |  if_e	add	objptr, ##61640
0be6c     F2 00 68 AC |  if_e	wrlong	#0, objptr
0be70     78 00 00 AF 
0be74     C8 E4 85 A1 |  if_e	sub	objptr, ##61640
0be78     28 02 90 AD |  if_e	jmp	#LR__1006
0be7c                 | ' do 
0be7c                 | LR__1001
0be7c                 | '   if runptr<>oldrunptr then
0be7c     78 00 00 FF 
0be80     BC E4 05 F1 | 	add	objptr, ##61628
0be84     F2 1E 02 FB | 	rdlong	local01, objptr
0be88     08 E4 05 F1 | 	add	objptr, #8
0be8c     F2 18 02 FB | 	rdlong	arg04, objptr
0be90     78 00 00 FF 
0be94     C4 E4 85 F1 | 	sub	objptr, ##61636
0be98     0C 1F 0A F2 | 	cmp	local01, arg04 wz
0be9c     CC 00 90 AD |  if_e	jmp	#LR__1002
0bea0     78 00 00 FF 
0bea4     CC E4 05 F1 | 	add	objptr, ##61644
0bea8     F2 12 02 F6 | 	mov	arg01, objptr
0beac     10 E4 85 F1 | 	sub	objptr, #16
0beb0     F2 14 02 FB | 	rdlong	arg02, objptr
0beb4     18 16 06 F6 | 	mov	arg03, #24
0beb8     6C 00 00 FF 
0bebc     F0 E5 85 F1 | 	sub	objptr, ##55792
0bec0     30 20 B1 FD | 	call	#_psram_spin2_read1
0bec4     5B 00 00 FF 
0bec8     B0 E5 05 F1 | 	add	objptr, ##47024
0becc     F2 12 02 F6 | 	mov	arg01, objptr
0bed0     11 00 00 FF 
0bed4     40 E4 05 F1 | 	add	objptr, ##8768
0bed8     F2 14 02 FB | 	rdlong	arg02, objptr
0bedc     13 00 00 FF 
0bee0     58 E4 85 F1 | 	sub	objptr, ##9816
0bee4     F2 1E 02 FB | 	rdlong	local01, objptr
0bee8     01 1E 66 F0 | 	shl	local01, #1
0beec     0F 15 02 F1 | 	add	arg02, local01
0bef0     13 00 00 FF 
0bef4     70 E4 05 F1 | 	add	objptr, ##9840
0bef8     F2 16 02 FB | 	rdlong	arg03, objptr
0befc     18 E4 85 F1 | 	sub	objptr, #24
0bf00     F2 1E 02 FB | 	rdlong	local01, objptr
0bf04     0F 17 82 F1 | 	sub	arg03, local01
0bf08     6C 00 00 FF 
0bf0c     F0 E5 85 F1 | 	sub	objptr, ##55792
0bf10     E0 1F B1 FD | 	call	#_psram_spin2_read1
0bf14     6D 00 00 FF 
0bf18     08 E4 05 F1 | 	add	objptr, ##55816
0bf1c     F2 1E 02 FB | 	rdlong	local01, objptr
0bf20     18 E4 85 F1 | 	sub	objptr, #24
0bf24     F2 FA 01 FB | 	rdlong	result1, objptr
0bf28     FD 1E 82 F1 | 	sub	local01, result1
0bf2c     13 00 00 FF 
0bf30     58 E4 85 F1 | 	sub	objptr, ##9816
0bf34     F2 FA 01 FB | 	rdlong	result1, objptr
0bf38     FD 1E 12 FD | 	qdiv	local01, result1
0bf3c     05 00 00 FF 
0bf40     18 E4 05 F1 | 	add	objptr, ##2584
0bf44     18 1E 62 FD | 	getqx	local01
0bf48     03 1E 86 F1 | 	sub	local01, #3
0bf4c     F2 1E 62 FC | 	wrlong	local01, objptr
0bf50     0E 00 00 FF 
0bf54     40 E4 05 F1 | 	add	objptr, ##7232
0bf58     F2 1E 02 FB | 	rdlong	local01, objptr
0bf5c     08 E4 05 F1 | 	add	objptr, #8
0bf60     F2 1E 62 FC | 	wrlong	local01, objptr
0bf64     78 00 00 FF 
0bf68     C4 E4 85 F1 | 	sub	objptr, ##61636
0bf6c                 | LR__1002
0bf6c     78 00 00 FF 
0bf70     E0 E4 05 F1 | 	add	objptr, ##61664
0bf74     F2 1E 02 FB | 	rdlong	local01, objptr
0bf78     24 E4 85 F1 | 	sub	objptr, #36
0bf7c     F2 1E 62 FC | 	wrlong	local01, objptr
0bf80     04 E4 05 F1 | 	add	objptr, #4
0bf84     F2 12 02 FB | 	rdlong	arg01, objptr
0bf88     78 00 00 FF 
0bf8c     C0 E4 85 F1 | 	sub	objptr, ##61632
0bf90     C8 E7 BF FD | 	call	#_execute_line
0bf94     78 00 00 FF 
0bf98     C0 E4 05 F1 | 	add	objptr, ##61632
0bf9c     F2 FA 61 FC | 	wrlong	result1, objptr
0bfa0     04 E4 85 F1 | 	sub	objptr, #4
0bfa4     F2 1E 02 FB | 	rdlong	local01, objptr
0bfa8     78 00 00 FF 
0bfac     BC E4 85 F1 | 	sub	objptr, ##61628
0bfb0     FF FF 3F FF 
0bfb4     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0bfb8     30 00 90 AD |  if_e	jmp	#LR__1004
0bfbc     E0 12 06 F6 | 	mov	arg01, #224
0bfc0     C0 22 B1 FD | 	call	#_usbnew_spin2_keystate
0bfc4     00 FA 0D F2 | 	cmp	result1, #0 wz
0bfc8     10 00 90 5D |  if_ne	jmp	#LR__1003
0bfcc     E4 12 06 F6 | 	mov	arg01, #228
0bfd0     B0 22 B1 FD | 	call	#_usbnew_spin2_keystate
0bfd4     00 FA 0D F2 | 	cmp	result1, #0 wz
0bfd8     A0 FE 9F AD |  if_e	jmp	#LR__1001
0bfdc                 | LR__1003
0bfdc     06 12 06 F6 | 	mov	arg01, #6
0bfe0     A0 22 B1 FD | 	call	#_usbnew_spin2_keystate
0bfe4     00 FA 0D F2 | 	cmp	result1, #0 wz
0bfe8     90 FE 9F AD |  if_e	jmp	#LR__1001
0bfec                 | LR__1004
0bfec                 | '   ''do whatever kbm.peek_latest_key()=$106 
0bfec                 | ' if runptr<>$7FFF_FFFF then 
0bfec     78 00 00 FF 
0bff0     BC E4 05 F1 | 	add	objptr, ##61628
0bff4     F2 1E 02 FB | 	rdlong	local01, objptr
0bff8     78 00 00 FF 
0bffc     BC E4 85 F1 | 	sub	objptr, ##61628
0c000     FF FF 3F FF 
0c004     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0c008     64 00 90 AD |  if_e	jmp	#LR__1005
0c00c                 | '     print "Stopped at line ";runheader(0)
0c00c     00 12 06 F6 | 	mov	arg01, #0
0c010     9C 84 B1 FD | 	call	#__system___getiolock_0484
0c014     FD 12 02 F6 | 	mov	arg01, result1
0c018     FC 2A B1 FD | 	call	#__system___lockmem
0c01c     73 01 00 FF 
0c020     0C 15 06 F6 | 	mov	arg02, ##@LR__5135
0c024     00 12 06 F6 | 	mov	arg01, #0
0c028     00 16 06 F6 | 	mov	arg03, #0
0c02c     F0 37 B1 FD | 	call	#__system___basic_print_string
0c030     78 00 00 FF 
0c034     CC E4 05 F1 | 	add	objptr, ##61644
0c038     F2 14 02 FB | 	rdlong	arg02, objptr
0c03c     78 00 00 FF 
0c040     CC E4 85 F1 | 	sub	objptr, ##61644
0c044     00 12 06 F6 | 	mov	arg01, #0
0c048     00 16 06 F6 | 	mov	arg03, #0
0c04c     0A 18 06 F6 | 	mov	arg04, #10
0c050     50 38 B1 FD | 	call	#__system___basic_print_unsigned
0c054     00 12 06 F6 | 	mov	arg01, #0
0c058     0A 14 06 F6 | 	mov	arg02, #10
0c05c     00 16 06 F6 | 	mov	arg03, #0
0c060     64 37 B1 FD | 	call	#__system___basic_print_char
0c064     00 12 06 F6 | 	mov	arg01, #0
0c068     44 84 B1 FD | 	call	#__system___getiolock_0484
0c06c     FD 00 68 FC | 	wrlong	#0, result1
0c070                 | LR__1005
0c070     78 00 00 FF 
0c074     C8 E4 05 F1 | 	add	objptr, ##61640
0c078     F2 00 68 FC | 	wrlong	#0, objptr
0c07c     78 00 00 FF 
0c080     C8 E4 85 F1 | 	sub	objptr, ##61640
0c084     11 12 06 F6 | 	mov	arg01, #17
0c088     08 14 06 F6 | 	mov	arg02, #8
0c08c     10 16 06 F6 | 	mov	arg03, #16
0c090     D8 06 B1 FD | 	call	#_hg010b_spin2_setspritesize
0c094     10 12 06 F6 | 	mov	arg01, #16
0c098     20 14 06 F6 | 	mov	arg02, #32
0c09c     20 16 06 F6 | 	mov	arg03, #32
0c0a0     C8 06 B1 FD | 	call	#_hg010b_spin2_setspritesize
0c0a4                 | LR__1006
0c0a4     A7 F0 03 F6 | 	mov	ptra, fp
0c0a8     B2 00 A0 FD | 	call	#popregs_
0c0ac                 | _do_run_ret
0c0ac     2D 00 64 FD | 	ret
0c0b0                 | 
0c0b0                 | ' 
0c0b0                 | ' 
0c0b0                 | ' 
0c0b0                 | ' 
0c0b0                 | ' 
0c0b0                 | ' 
0c0b0                 | ' 
0c0b0                 | ' sub do_defenv
0c0b0                 | _do_defenv
0c0b0     09 4A 05 F6 | 	mov	COUNT_, #9
0c0b4     A8 00 A0 FD | 	call	#pushregs_
0c0b8     B4 F0 07 F1 | 	add	ptra, #180
0c0bc     6A 00 00 FF 
0c0c0     80 E4 05 F1 | 	add	objptr, ##54400
0c0c4     F2 1E 02 FB | 	rdlong	local01, objptr
0c0c8     0F 1B 02 F6 | 	mov	arg05, local01
0c0cc     01 1A 66 F0 | 	shl	arg05, #1
0c0d0     0F 1B 02 F1 | 	add	arg05, local01
0c0d4     02 1A 66 F0 | 	shl	arg05, #2
0c0d8     03 00 00 FF 
0c0dc     04 E4 85 F1 | 	sub	objptr, ##1540
0c0e0     F2 20 02 F6 | 	mov	local02, objptr
0c0e4     F2 1A 02 F1 | 	add	arg05, objptr
0c0e8     0D 1B 02 FB | 	rdlong	arg05, arg05
0c0ec     10 4E 05 F1 | 	add	fp, #16
0c0f0     A7 1A 62 FC | 	wrlong	arg05, fp
0c0f4                 | ' 
0c0f4                 | ' numpar=compiledline(lineptr_e).result.uresult
0c0f4                 | ' 
0c0f4                 | ' 
0c0f4                 | ' ' defenv channel, string - tries to load from /media/h a h2 file from PC-Softsynth
0c0f4                 | ' 'TODO for 2.0: ' defenv channel, l1,r1,l2,r2,l3,r3,l4,r4 - defines ADSR in Yamaha DX  style, except these are linear values
0c0f4                 | ' ' defsnd channel, a,d,s,r - defines ADSR attack time, decay time, sus level, release time. Sus point has to be returned - how?
0c0f4                 | ' 
0c0f4                 | ' 
0c0f4                 | ' if numpar<>2 andalso numpar<>5 andalso numpar<>9 then return ' and print error
0c0f4     10 4E 85 F1 | 	sub	fp, #16
0c0f8     02 1A 0E F2 | 	cmp	arg05, #2 wz
0c0fc     67 00 00 FF 
0c100     7C E4 85 F1 | 	sub	objptr, ##52860
0c104     10 4E 05 51 |  if_ne	add	fp, #16
0c108     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0c10c     10 4E 85 51 |  if_ne	sub	fp, #16
0c110     05 1E 0E 52 |  if_ne	cmp	local01, #5 wz
0c114     10 4E 05 51 |  if_ne	add	fp, #16
0c118     0F 21 02 56 |  if_ne	mov	local02, local01
0c11c     10 4E 85 51 |  if_ne	sub	fp, #16
0c120     09 20 0E 52 |  if_ne	cmp	local02, #9 wz
0c124     24 0C 90 5D |  if_ne	jmp	#LR__1031
0c128                 | ' 
0c128                 | '  
0c128                 | ' if numpar=2 then
0c128     10 4E 05 F1 | 	add	fp, #16
0c12c     A7 20 02 FB | 	rdlong	local02, fp
0c130     10 4E 85 F1 | 	sub	fp, #16
0c134     02 20 0E F2 | 	cmp	local02, #2 wz
0c138     CC 03 90 5D |  if_ne	jmp	#LR__1022
0c13c     20 E7 BF FD | 	call	#_pop
0c140     FF 1A 02 F6 | 	mov	arg05, result3
0c144     5C 4E 05 F1 | 	add	fp, #92
0c148     A7 FA 61 FC | 	wrlong	result1, fp
0c14c     04 4E 05 F1 | 	add	fp, #4
0c150     A7 FC 61 FC | 	wrlong	result2, fp
0c154     04 4E 05 F1 | 	add	fp, #4
0c158     A7 1A 62 FC | 	wrlong	arg05, fp
0c15c                 | '   t1=pop()
0c15c                 | '   if t1.result_type=result_string2 then 
0c15c     64 4E 85 F1 | 	sub	fp, #100
0c160     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0c164     20 00 90 5D |  if_ne	jmp	#LR__1010
0c168     5C 4E 05 F1 | 	add	fp, #92
0c16c     A7 12 02 FB | 	rdlong	arg01, fp
0c170     5C 4E 85 F1 | 	sub	fp, #92
0c174     1C 2B B0 FD | 	call	#_convertstring
0c178     68 4E 05 F1 | 	add	fp, #104
0c17c     A7 FA 61 FC | 	wrlong	result1, fp
0c180     68 4E 85 F1 | 	sub	fp, #104
0c184     58 00 90 FD | 	jmp	#LR__1013
0c188                 | LR__1010
0c188     64 4E 05 F1 | 	add	fp, #100
0c18c     A7 20 02 FB | 	rdlong	local02, fp
0c190     64 4E 85 F1 | 	sub	fp, #100
0c194     1F 20 0E F2 | 	cmp	local02, #31 wz
0c198     18 00 90 5D |  if_ne	jmp	#LR__1011
0c19c     5C 4E 05 F1 | 	add	fp, #92
0c1a0     A7 20 02 FB | 	rdlong	local02, fp
0c1a4     0C 4E 05 F1 | 	add	fp, #12
0c1a8     A7 20 62 FC | 	wrlong	local02, fp
0c1ac     68 4E 85 F1 | 	sub	fp, #104
0c1b0     2C 00 90 FD | 	jmp	#LR__1012
0c1b4                 | LR__1011
0c1b4     73 01 00 FF 
0c1b8     1D 21 06 F6 | 	mov	local02, ##@LR__5136
0c1bc     68 4E 05 F1 | 	add	fp, #104
0c1c0     A7 20 62 FC | 	wrlong	local02, fp
0c1c4     0C 4E 85 F1 | 	sub	fp, #12
0c1c8     A7 12 02 F6 | 	mov	arg01, fp
0c1cc     5C 4E 85 F1 | 	sub	fp, #92
0c1d0     E4 72 B0 FD | 	call	#_converttoint
0c1d4     24 4E 05 F1 | 	add	fp, #36
0c1d8     A7 FA 61 FC | 	wrlong	result1, fp
0c1dc     24 4E 85 F1 | 	sub	fp, #36
0c1e0                 | LR__1012
0c1e0                 | LR__1013
0c1e0                 | ' 
0c1e0                 | '     
0c1e0                 | '   if s1<>"" then 
0c1e0     68 4E 05 F1 | 	add	fp, #104
0c1e4     A7 12 02 FB | 	rdlong	arg01, fp
0c1e8     68 4E 85 F1 | 	sub	fp, #104
0c1ec     73 01 00 FF 
0c1f0     1E 15 06 F6 | 	mov	arg02, ##@LR__5137
0c1f4     48 29 B1 FD | 	call	#__system___string_cmp
0c1f8     00 FA 0D F2 | 	cmp	result1, #0 wz
0c1fc     F8 01 90 AD |  if_e	jmp	#LR__1017
0c200     5C E6 BF FD | 	call	#_pop
0c204     FF 1E 02 F6 | 	mov	local01, result3
0c208     5C 4E 05 F1 | 	add	fp, #92
0c20c     A7 FA 61 FC | 	wrlong	result1, fp
0c210     04 4E 05 F1 | 	add	fp, #4
0c214     A7 FC 61 FC | 	wrlong	result2, fp
0c218     04 4E 05 F1 | 	add	fp, #4
0c21c     A7 1E 62 FC | 	wrlong	local01, fp
0c220     08 4E 85 F1 | 	sub	fp, #8
0c224     A7 12 02 F6 | 	mov	arg01, fp
0c228     5C 4E 85 F1 | 	sub	fp, #92
0c22c     88 72 B0 FD | 	call	#_converttoint
0c230     20 4E 05 F1 | 	add	fp, #32
0c234     A7 FA 61 FC | 	wrlong	result1, fp
0c238     20 4E 85 F1 | 	sub	fp, #32
0c23c                 | '     t1=pop()
0c23c                 | '     channel=converttoint(t1) 
0c23c                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0c23c     09 12 06 F6 | 	mov	arg01, #9
0c240     9C 78 B1 FD | 	call	#__system__close
0c244     09 20 06 F6 | 	mov	local02, #9
0c248     73 01 00 FF 
0c24c     1F 13 06 F6 | 	mov	arg01, ##@LR__5138
0c250     68 4E 05 F1 | 	add	fp, #104
0c254     A7 14 02 FB | 	rdlong	arg02, fp
0c258     68 4E 85 F1 | 	sub	fp, #104
0c25c     14 29 B1 FD | 	call	#__system___string_concat
0c260     FD 14 02 F6 | 	mov	arg02, result1
0c264     10 13 02 F6 | 	mov	arg01, local02
0c268     00 16 06 F6 | 	mov	arg03, #0
0c26c     AC 34 B1 FD | 	call	#__system___basic_open_string
0c270     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0c274     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0c278     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0c27c     0C 4E 05 F1 | 	add	fp, #12
0c280     A7 FA 61 FC | 	wrlong	result1, fp
0c284                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0c284     0C 4E 85 F1 | 	sub	fp, #12
0c288     A0 00 90 AD |  if_e	jmp	#LR__1014
0c28c     00 12 06 F6 | 	mov	arg01, #0
0c290     1C 82 B1 FD | 	call	#__system___getiolock_0484
0c294     FD 12 02 F6 | 	mov	arg01, result1
0c298     7C 28 B1 FD | 	call	#__system___lockmem
0c29c     73 01 00 FF 
0c2a0     2C 15 06 F6 | 	mov	arg02, ##@LR__5139
0c2a4     00 12 06 F6 | 	mov	arg01, #0
0c2a8     00 16 06 F6 | 	mov	arg03, #0
0c2ac     70 35 B1 FD | 	call	#__system___basic_print_string
0c2b0     0C 4E 05 F1 | 	add	fp, #12
0c2b4     A7 14 02 FB | 	rdlong	arg02, fp
0c2b8     0C 4E 85 F1 | 	sub	fp, #12
0c2bc     00 12 06 F6 | 	mov	arg01, #0
0c2c0     00 16 06 F6 | 	mov	arg03, #0
0c2c4     0A 18 06 F6 | 	mov	arg04, #10
0c2c8     98 35 B1 FD | 	call	#__system___basic_print_integer
0c2cc     73 01 00 FF 
0c2d0     3A 15 06 F6 | 	mov	arg02, ##@LR__5140
0c2d4     00 12 06 F6 | 	mov	arg01, #0
0c2d8     00 16 06 F6 | 	mov	arg03, #0
0c2dc     40 35 B1 FD | 	call	#__system___basic_print_string
0c2e0     00 20 06 F6 | 	mov	local02, #0
0c2e4     0C 4E 05 F1 | 	add	fp, #12
0c2e8     A7 12 02 FB | 	rdlong	arg01, fp
0c2ec     0C 4E 85 F1 | 	sub	fp, #12
0c2f0     B8 4E B1 FD | 	call	#__system___strerror
0c2f4     FD 14 02 F6 | 	mov	arg02, result1
0c2f8     10 13 02 F6 | 	mov	arg01, local02
0c2fc     00 16 06 F6 | 	mov	arg03, #0
0c300     1C 35 B1 FD | 	call	#__system___basic_print_string
0c304     00 12 06 F6 | 	mov	arg01, #0
0c308     0A 14 06 F6 | 	mov	arg02, #10
0c30c     00 16 06 F6 | 	mov	arg03, #0
0c310     B4 34 B1 FD | 	call	#__system___basic_print_char
0c314     00 12 06 F6 | 	mov	arg01, #0
0c318     94 81 B1 FD | 	call	#__system___getiolock_0484
0c31c     FD 00 68 FC | 	wrlong	#0, result1
0c320     09 12 06 F6 | 	mov	arg01, #9
0c324     B8 77 B1 FD | 	call	#__system__close
0c328     20 0A 90 FD | 	jmp	#LR__1031
0c32c                 | LR__1014
0c32c                 | '     get #9,17,envbuf8(channel,0),256
0c32c     20 4E 05 F1 | 	add	fp, #32
0c330     A7 1A 02 FB | 	rdlong	arg05, fp
0c334     20 4E 85 F1 | 	sub	fp, #32
0c338     0D 17 02 F6 | 	mov	arg03, arg05
0c33c     09 16 66 F0 | 	shl	arg03, #9
0c340     0D 17 02 F1 | 	add	arg03, arg05
0c344     2C 00 00 FF 
0c348     D8 E4 05 F1 | 	add	objptr, ##22744
0c34c     F2 16 02 F1 | 	add	arg03, objptr
0c350     09 12 06 F6 | 	mov	arg01, #9
0c354     11 14 06 F6 | 	mov	arg02, #17
0c358     00 19 06 F6 | 	mov	arg04, #256
0c35c     01 1A 06 F6 | 	mov	arg05, #1
0c360     2C 00 00 FF 
0c364     D8 E4 85 F1 | 	sub	objptr, ##22744
0c368     C4 35 B1 FD | 	call	#__system___basic_get
0c36c                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0c36c     14 4E 05 F1 | 	add	fp, #20
0c370     A7 FE 69 FC | 	wrlong	#255, fp
0c374     14 4E 85 F1 | 	sub	fp, #20
0c378     2C 00 00 FF 
0c37c     D8 E4 05 F1 | 	add	objptr, ##22744
0c380     97 30 48 FB | 	callpa	#(@LR__1016-@LR__1015)>>2,fcache_load_ptr_
0c384                 | LR__1015
0c384     20 4E 05 F1 | 	add	fp, #32
0c388     A7 18 02 FB | 	rdlong	arg04, fp
0c38c     0C 21 02 F6 | 	mov	local02, arg04
0c390     09 20 66 F0 | 	shl	local02, #9
0c394     F2 20 02 F1 | 	add	local02, objptr
0c398     0C 4E 85 F1 | 	sub	fp, #12
0c39c     A7 1E 02 FB | 	rdlong	local01, fp
0c3a0     0F 1B 02 F6 | 	mov	arg05, local01
0c3a4     01 1A 66 F0 | 	shl	arg05, #1
0c3a8     10 1B 02 F1 | 	add	arg05, local02
0c3ac     0C 21 02 F6 | 	mov	local02, arg04
0c3b0     09 20 66 F0 | 	shl	local02, #9
0c3b4     0C 21 02 F1 | 	add	local02, arg04
0c3b8     F2 20 02 F1 | 	add	local02, objptr
0c3bc     10 1F 02 F1 | 	add	local01, local02
0c3c0     0F 21 C2 FA | 	rdbyte	local02, local01
0c3c4     00 21 06 FA | 	mul	local02, #256
0c3c8     0D 21 52 FC | 	wrword	local02, arg05
0c3cc     A7 20 02 FB | 	rdlong	local02, fp
0c3d0     01 20 86 F1 | 	sub	local02, #1
0c3d4     A7 20 62 FC | 	wrlong	local02, fp
0c3d8     14 4E 85 F1 | 	sub	fp, #20
0c3dc     00 20 56 F2 | 	cmps	local02, #0 wc
0c3e0     A0 FF 9F 3D |  if_ae	jmp	#LR__1015
0c3e4                 | LR__1016
0c3e4     2C 00 00 FF 
0c3e8     D8 E4 85 F1 | 	sub	objptr, ##22744
0c3ec                 | '     close #9
0c3ec     09 12 06 F6 | 	mov	arg01, #9
0c3f0     EC 76 B1 FD | 	call	#__system__close
0c3f4                 | '                                                                     '  for i=0 to 255: v.putpixel(i,288-envbuf(channel,i)/400,40) : next i
0c3f4                 | '     return
0c3f4     54 09 90 FD | 	jmp	#LR__1031
0c3f8                 | LR__1017
0c3f8                 | '     if wptr < ($80000 - 2048) then 
0c3f8     24 4E 05 F1 | 	add	fp, #36
0c3fc     A7 22 02 FB | 	rdlong	local03, fp
0c400     24 4E 85 F1 | 	sub	fp, #36
0c404     FC 03 00 FF 
0c408     00 22 56 F2 | 	cmps	local03, ##522240 wc
0c40c     7C 00 90 3D |  if_ae	jmp	#LR__1020
0c410                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0c410     14 4E 05 F1 | 	add	fp, #20
0c414     A7 00 68 FC | 	wrlong	#0, fp
0c418     14 4E 85 F1 | 	sub	fp, #20
0c41c     2C 00 00 FF 
0c420     D8 E4 05 F1 | 	add	objptr, ##22744
0c424     97 2C 48 FB | 	callpa	#(@LR__1019-@LR__1018)>>2,fcache_load_ptr_
0c428                 | LR__1018
0c428     20 4E 05 F1 | 	add	fp, #32
0c42c     A7 22 02 FB | 	rdlong	local03, fp
0c430     09 22 66 F0 | 	shl	local03, #9
0c434     F2 22 02 F1 | 	add	local03, objptr
0c438     0C 4E 85 F1 | 	sub	fp, #12
0c43c     A7 20 02 FB | 	rdlong	local02, fp
0c440     10 1F 02 F6 | 	mov	local01, local02
0c444     01 1E 66 F0 | 	shl	local01, #1
0c448     11 1F 02 F1 | 	add	local01, local03
0c44c     10 4E 05 F1 | 	add	fp, #16
0c450     A7 12 02 FB | 	rdlong	arg01, fp
0c454     01 20 66 F0 | 	shl	local02, #1
0c458     10 13 02 F1 | 	add	arg01, local02
0c45c     09 FB E1 FA | 	rdword	result1, arg01
0c460     0F FB 51 FC | 	wrword	result1, local01
0c464     10 4E 85 F1 | 	sub	fp, #16
0c468     A7 22 02 FB | 	rdlong	local03, fp
0c46c     01 22 06 F1 | 	add	local03, #1
0c470     A7 22 62 FC | 	wrlong	local03, fp
0c474     14 4E 85 F1 | 	sub	fp, #20
0c478     00 23 56 F2 | 	cmps	local03, #256 wc
0c47c     A8 FF 9F CD |  if_b	jmp	#LR__1018
0c480                 | LR__1019
0c480     2C 00 00 FF 
0c484     D8 E4 85 F1 | 	sub	objptr, ##22744
0c488     C0 08 90 FD | 	jmp	#LR__1031
0c48c                 | LR__1020
0c48c                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0c48c     14 4E 05 F1 | 	add	fp, #20
0c490     A7 00 68 FC | 	wrlong	#0, fp
0c494     14 4E 85 F1 | 	sub	fp, #20
0c498                 | LR__1021
0c498     20 4E 05 F1 | 	add	fp, #32
0c49c     A7 22 02 FB | 	rdlong	local03, fp
0c4a0     09 22 66 F0 | 	shl	local03, #9
0c4a4     2C 00 00 FF 
0c4a8     D8 E4 05 F1 | 	add	objptr, ##22744
0c4ac     F2 22 02 F1 | 	add	local03, objptr
0c4b0     0C 4E 85 F1 | 	sub	fp, #12
0c4b4     A7 20 02 FB | 	rdlong	local02, fp
0c4b8     10 1F 02 F6 | 	mov	local01, local02
0c4bc     01 1E 66 F0 | 	shl	local01, #1
0c4c0     11 1F 02 F1 | 	add	local01, local03
0c4c4     10 4E 05 F1 | 	add	fp, #16
0c4c8     A7 12 02 FB | 	rdlong	arg01, fp
0c4cc     24 4E 85 F1 | 	sub	fp, #36
0c4d0     01 20 66 F0 | 	shl	local02, #1
0c4d4     10 13 02 F1 | 	add	arg01, local02
0c4d8     2C 00 00 FF 
0c4dc     D8 E4 85 F1 | 	sub	objptr, ##22744
0c4e0     A4 E4 B0 FD | 	call	#_psdpeek
0c4e4     0F FB 51 FC | 	wrword	result1, local01
0c4e8     14 4E 05 F1 | 	add	fp, #20
0c4ec     A7 24 02 FB | 	rdlong	local04, fp
0c4f0     01 24 06 F1 | 	add	local04, #1
0c4f4     A7 24 62 FC | 	wrlong	local04, fp
0c4f8     14 4E 85 F1 | 	sub	fp, #20
0c4fc     00 25 56 F2 | 	cmps	local04, #256 wc
0c500     94 FF 9F CD |  if_b	jmp	#LR__1021
0c504                 | '     return   
0c504     44 08 90 FD | 	jmp	#LR__1031
0c508                 | LR__1022
0c508                 | ' 
0c508                 | ' if numpar=5 then    'simple adsr
0c508     10 4E 05 F1 | 	add	fp, #16
0c50c     A7 22 02 FB | 	rdlong	local03, fp
0c510     10 4E 85 F1 | 	sub	fp, #16
0c514     05 22 0E F2 | 	cmp	local03, #5 wz
0c518     30 08 90 5D |  if_ne	jmp	#LR__1030
0c51c     40 E3 BF FD | 	call	#_pop
0c520     FF 1E 02 F6 | 	mov	local01, result3
0c524     5C 4E 05 F1 | 	add	fp, #92
0c528     A7 FA 61 FC | 	wrlong	result1, fp
0c52c     04 4E 05 F1 | 	add	fp, #4
0c530     A7 FC 61 FC | 	wrlong	result2, fp
0c534     04 4E 05 F1 | 	add	fp, #4
0c538     A7 1E 62 FC | 	wrlong	local01, fp
0c53c     08 4E 85 F1 | 	sub	fp, #8
0c540     A7 12 02 F6 | 	mov	arg01, fp
0c544     5C 4E 85 F1 | 	sub	fp, #92
0c548     18 70 B0 FD | 	call	#_converttofloat
0c54c     FD 22 02 F6 | 	mov	local03, result1
0c550     34 4E 05 F1 | 	add	fp, #52
0c554     A7 22 62 FC | 	wrlong	local03, fp
0c558     34 4E 85 F1 | 	sub	fp, #52
0c55c     00 E3 BF FD | 	call	#_pop
0c560     FF 1E 02 F6 | 	mov	local01, result3
0c564     5C 4E 05 F1 | 	add	fp, #92
0c568     A7 FA 61 FC | 	wrlong	result1, fp
0c56c     04 4E 05 F1 | 	add	fp, #4
0c570     A7 FC 61 FC | 	wrlong	result2, fp
0c574     04 4E 05 F1 | 	add	fp, #4
0c578     A7 1E 62 FC | 	wrlong	local01, fp
0c57c     08 4E 85 F1 | 	sub	fp, #8
0c580     A7 12 02 F6 | 	mov	arg01, fp
0c584     5C 4E 85 F1 | 	sub	fp, #92
0c588     D8 6F B0 FD | 	call	#_converttofloat
0c58c     FD 22 02 F6 | 	mov	local03, result1
0c590     30 4E 05 F1 | 	add	fp, #48
0c594     A7 22 62 FC | 	wrlong	local03, fp
0c598     30 4E 85 F1 | 	sub	fp, #48
0c59c     C0 E2 BF FD | 	call	#_pop
0c5a0     FF 1E 02 F6 | 	mov	local01, result3
0c5a4     5C 4E 05 F1 | 	add	fp, #92
0c5a8     A7 FA 61 FC | 	wrlong	result1, fp
0c5ac     04 4E 05 F1 | 	add	fp, #4
0c5b0     A7 FC 61 FC | 	wrlong	result2, fp
0c5b4     04 4E 05 F1 | 	add	fp, #4
0c5b8     A7 1E 62 FC | 	wrlong	local01, fp
0c5bc     08 4E 85 F1 | 	sub	fp, #8
0c5c0     A7 12 02 F6 | 	mov	arg01, fp
0c5c4     5C 4E 85 F1 | 	sub	fp, #92
0c5c8     98 6F B0 FD | 	call	#_converttofloat
0c5cc     FD 22 02 F6 | 	mov	local03, result1
0c5d0     2C 4E 05 F1 | 	add	fp, #44
0c5d4     A7 22 62 FC | 	wrlong	local03, fp
0c5d8     2C 4E 85 F1 | 	sub	fp, #44
0c5dc     80 E2 BF FD | 	call	#_pop
0c5e0     FF 1E 02 F6 | 	mov	local01, result3
0c5e4     5C 4E 05 F1 | 	add	fp, #92
0c5e8     A7 FA 61 FC | 	wrlong	result1, fp
0c5ec     04 4E 05 F1 | 	add	fp, #4
0c5f0     A7 FC 61 FC | 	wrlong	result2, fp
0c5f4     04 4E 05 F1 | 	add	fp, #4
0c5f8     A7 1E 62 FC | 	wrlong	local01, fp
0c5fc     08 4E 85 F1 | 	sub	fp, #8
0c600     A7 12 02 F6 | 	mov	arg01, fp
0c604     5C 4E 85 F1 | 	sub	fp, #92
0c608     58 6F B0 FD | 	call	#_converttofloat
0c60c     FD 22 02 F6 | 	mov	local03, result1
0c610     28 4E 05 F1 | 	add	fp, #40
0c614     A7 22 62 FC | 	wrlong	local03, fp
0c618     28 4E 85 F1 | 	sub	fp, #40
0c61c     40 E2 BF FD | 	call	#_pop
0c620     FF 1E 02 F6 | 	mov	local01, result3
0c624     5C 4E 05 F1 | 	add	fp, #92
0c628     A7 FA 61 FC | 	wrlong	result1, fp
0c62c     04 4E 05 F1 | 	add	fp, #4
0c630     A7 FC 61 FC | 	wrlong	result2, fp
0c634     04 4E 05 F1 | 	add	fp, #4
0c638     A7 1E 62 FC | 	wrlong	local01, fp
0c63c     08 4E 85 F1 | 	sub	fp, #8
0c640     A7 12 02 F6 | 	mov	arg01, fp
0c644     5C 4E 85 F1 | 	sub	fp, #92
0c648     6C 6E B0 FD | 	call	#_converttoint
0c64c     20 4E 05 F1 | 	add	fp, #32
0c650     A7 FA 61 FC | 	wrlong	result1, fp
0c654                 | ' 
0c654                 | '   t1=pop() : rr=converttofloat(t1)
0c654                 | '   t1=pop() : ss=converttofloat(t1) 
0c654                 | '   t1=pop() : dd=converttofloat(t1)
0c654                 | '   t1=pop() : aa=converttofloat(t1)
0c654                 | '   t1=pop() : channel=converttoint(t1)
0c654                 | '   if ss<0.0 then ss=0.0 
0c654     10 4E 05 F1 | 	add	fp, #16
0c658     A7 12 02 FB | 	rdlong	arg01, fp
0c65c     30 4E 85 F1 | 	sub	fp, #48
0c660     00 14 06 F6 | 	mov	arg02, #0
0c664     01 16 06 F6 | 	mov	arg03, #1
0c668     60 54 B1 FD | 	call	#__system___float_cmp
0c66c     00 FA 55 F2 | 	cmps	result1, #0 wc
0c670     30 4E 05 C1 |  if_b	add	fp, #48
0c674     A7 00 68 CC |  if_b	wrlong	#0, fp
0c678     30 4E 85 C1 |  if_b	sub	fp, #48
0c67c                 | '   if ss>1.0 then ss=1.0
0c67c     30 4E 05 F1 | 	add	fp, #48
0c680     A7 12 02 FB | 	rdlong	arg01, fp
0c684     30 4E 85 F1 | 	sub	fp, #48
0c688     00 C0 1F FF 
0c68c     00 14 06 F6 | 	mov	arg02, ##1065353216
0c690     01 16 66 F6 | 	neg	arg03, #1
0c694     34 54 B1 FD | 	call	#__system___float_cmp
0c698     01 FA 55 F2 | 	cmps	result1, #1 wc
0c69c     30 4E 05 31 |  if_ae	add	fp, #48
0c6a0     00 C0 9F 3F 
0c6a4     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
0c6a8     30 4E 85 31 |  if_ae	sub	fp, #48
0c6ac     28 4E 05 F1 | 	add	fp, #40
0c6b0     A7 12 02 FB | 	rdlong	arg01, fp
0c6b4     04 4E 05 F1 | 	add	fp, #4
0c6b8     A7 14 02 FB | 	rdlong	arg02, fp
0c6bc     2C 4E 85 F1 | 	sub	fp, #44
0c6c0     04 4C B1 FD | 	call	#__system___float_add
0c6c4     FD 12 02 F6 | 	mov	arg01, result1
0c6c8     34 4E 05 F1 | 	add	fp, #52
0c6cc     A7 14 02 FB | 	rdlong	arg02, fp
0c6d0     34 4E 85 F1 | 	sub	fp, #52
0c6d4     F0 4B B1 FD | 	call	#__system___float_add
0c6d8     4C 4E 05 F1 | 	add	fp, #76
0c6dc     A7 FA 61 FC | 	wrlong	result1, fp
0c6e0     FD 14 02 F6 | 	mov	arg02, result1
0c6e4     4C 4E 85 F1 | 	sub	fp, #76
0c6e8     00 C0 21 FF 
0c6ec     00 12 06 F6 | 	mov	arg01, ##1132462080
0c6f0     A8 51 B1 FD | 	call	#__system___float_div
0c6f4     50 4E 05 F1 | 	add	fp, #80
0c6f8     A7 FA 61 FC | 	wrlong	result1, fp
0c6fc     28 4E 85 F1 | 	sub	fp, #40
0c700     A7 12 02 FB | 	rdlong	arg01, fp
0c704     FD 14 02 F6 | 	mov	arg02, result1
0c708     28 4E 85 F1 | 	sub	fp, #40
0c70c     88 4F B1 FD | 	call	#__system___float_mul
0c710     FD 12 02 F6 | 	mov	arg01, result1
0c714     01 14 06 F6 | 	mov	arg02, #1
0c718     44 54 B1 FD | 	call	#__system___float_tointeger
0c71c     A7 FA 61 FC | 	wrlong	result1, fp
0c720     2C 4E 05 F1 | 	add	fp, #44
0c724     A7 12 02 FB | 	rdlong	arg01, fp
0c728     24 4E 05 F1 | 	add	fp, #36
0c72c     A7 14 02 FB | 	rdlong	arg02, fp
0c730     50 4E 85 F1 | 	sub	fp, #80
0c734     60 4F B1 FD | 	call	#__system___float_mul
0c738     FD 12 02 F6 | 	mov	arg01, result1
0c73c     01 14 06 F6 | 	mov	arg02, #1
0c740     1C 54 B1 FD | 	call	#__system___float_tointeger
0c744     04 4E 05 F1 | 	add	fp, #4
0c748     A7 FA 61 FC | 	wrlong	result1, fp
0c74c     30 4E 05 F1 | 	add	fp, #48
0c750     A7 12 02 FB | 	rdlong	arg01, fp
0c754     1C 4E 05 F1 | 	add	fp, #28
0c758     A7 14 02 FB | 	rdlong	arg02, fp
0c75c     50 4E 85 F1 | 	sub	fp, #80
0c760     34 4F B1 FD | 	call	#__system___float_mul
0c764     FD 12 02 F6 | 	mov	arg01, result1
0c768     01 14 06 F6 | 	mov	arg02, #1
0c76c     F0 53 B1 FD | 	call	#__system___float_tointeger
0c770     FD 22 02 F6 | 	mov	local03, result1
0c774     0C 4E 05 F1 | 	add	fp, #12
0c778     A7 22 62 FC | 	wrlong	local03, fp
0c77c     0C 4E 85 F1 | 	sub	fp, #12
0c780                 | '   fulltime=aa+dd+rr
0c780                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit) :print a,d,r,a+d+r
0c780     00 12 06 F6 | 	mov	arg01, #0
0c784     28 7D B1 FD | 	call	#__system___getiolock_0484
0c788     FD 12 02 F6 | 	mov	arg01, result1
0c78c     88 23 B1 FD | 	call	#__system___lockmem
0c790     A7 14 02 FB | 	rdlong	arg02, fp
0c794     00 12 06 F6 | 	mov	arg01, #0
0c798     00 16 06 F6 | 	mov	arg03, #0
0c79c     0A 18 06 F6 | 	mov	arg04, #10
0c7a0     C0 30 B1 FD | 	call	#__system___basic_print_integer
0c7a4     00 12 06 F6 | 	mov	arg01, #0
0c7a8     09 14 06 F6 | 	mov	arg02, #9
0c7ac     00 16 06 F6 | 	mov	arg03, #0
0c7b0     14 30 B1 FD | 	call	#__system___basic_print_char
0c7b4     04 4E 05 F1 | 	add	fp, #4
0c7b8     A7 14 02 FB | 	rdlong	arg02, fp
0c7bc     04 4E 85 F1 | 	sub	fp, #4
0c7c0     00 12 06 F6 | 	mov	arg01, #0
0c7c4     00 16 06 F6 | 	mov	arg03, #0
0c7c8     0A 18 06 F6 | 	mov	arg04, #10
0c7cc     94 30 B1 FD | 	call	#__system___basic_print_integer
0c7d0     00 12 06 F6 | 	mov	arg01, #0
0c7d4     09 14 06 F6 | 	mov	arg02, #9
0c7d8     00 16 06 F6 | 	mov	arg03, #0
0c7dc     E8 2F B1 FD | 	call	#__system___basic_print_char
0c7e0     0C 4E 05 F1 | 	add	fp, #12
0c7e4     A7 14 02 FB | 	rdlong	arg02, fp
0c7e8     0C 4E 85 F1 | 	sub	fp, #12
0c7ec     00 12 06 F6 | 	mov	arg01, #0
0c7f0     00 16 06 F6 | 	mov	arg03, #0
0c7f4     0A 18 06 F6 | 	mov	arg04, #10
0c7f8     68 30 B1 FD | 	call	#__system___basic_print_integer
0c7fc     00 12 06 F6 | 	mov	arg01, #0
0c800     09 14 06 F6 | 	mov	arg02, #9
0c804     00 16 06 F6 | 	mov	arg03, #0
0c808     BC 2F B1 FD | 	call	#__system___basic_print_char
0c80c     A7 14 02 FB | 	rdlong	arg02, fp
0c810     04 4E 05 F1 | 	add	fp, #4
0c814     A7 22 02 FB | 	rdlong	local03, fp
0c818     11 15 02 F1 | 	add	arg02, local03
0c81c     08 4E 05 F1 | 	add	fp, #8
0c820     A7 22 02 FB | 	rdlong	local03, fp
0c824     0C 4E 85 F1 | 	sub	fp, #12
0c828     11 15 02 F1 | 	add	arg02, local03
0c82c     00 12 06 F6 | 	mov	arg01, #0
0c830     00 16 06 F6 | 	mov	arg03, #0
0c834     0A 18 06 F6 | 	mov	arg04, #10
0c838     28 30 B1 FD | 	call	#__system___basic_print_integer
0c83c     00 12 06 F6 | 	mov	arg01, #0
0c840     0A 14 06 F6 | 	mov	arg02, #10
0c844     00 16 06 F6 | 	mov	arg03, #0
0c848     7C 2F B1 FD | 	call	#__system___basic_print_char
0c84c     00 12 06 F6 | 	mov	arg01, #0
0c850     5C 7C B1 FD | 	call	#__system___getiolock_0484
0c854     FD 00 68 FC | 	wrlong	#0, result1
0c858     F8 BF 23 FF 
0c85c     00 22 06 F6 | 	mov	local03, ##1199566848
0c860     A7 12 02 FB | 	rdlong	arg01, fp
0c864     09 13 52 F6 | 	abs	arg01, arg01 wc
0c868     1F 26 C6 C9 |  if_b	decod	local05, #31
0c86c     00 26 06 36 |  if_ae	mov	local05, #0
0c870     20 4A B1 FD | 	call	#__system___float_fromuns
0c874     13 FB 61 F5 | 	xor	result1, local05
0c878     FD 14 02 F6 | 	mov	arg02, result1
0c87c     11 13 02 F6 | 	mov	arg01, local03
0c880     18 50 B1 FD | 	call	#__system___float_div
0c884     54 4E 05 F1 | 	add	fp, #84
0c888     A7 FA 61 FC | 	wrlong	result1, fp
0c88c     F8 BF 23 FF 
0c890     00 22 06 F6 | 	mov	local03, ##1199566848
0c894     24 4E 85 F1 | 	sub	fp, #36
0c898     A7 14 02 FB | 	rdlong	arg02, fp
0c89c     30 4E 85 F1 | 	sub	fp, #48
0c8a0     F8 BF 23 FF 
0c8a4     00 12 06 F6 | 	mov	arg01, ##1199566848
0c8a8     EC 4D B1 FD | 	call	#__system___float_mul
0c8ac     FD 14 02 F6 | 	mov	arg02, result1
0c8b0     11 13 02 F6 | 	mov	arg01, local03
0c8b4     1F 14 E6 F4 | 	bitnot	arg02, #31
0c8b8     0C 4A B1 FD | 	call	#__system___float_add
0c8bc     FD 22 02 F6 | 	mov	local03, result1
0c8c0     04 4E 05 F1 | 	add	fp, #4
0c8c4     A7 12 02 FB | 	rdlong	arg01, fp
0c8c8     04 4E 85 F1 | 	sub	fp, #4
0c8cc     09 13 52 F6 | 	abs	arg01, arg01 wc
0c8d0     1F 26 C6 C9 |  if_b	decod	local05, #31
0c8d4     00 26 06 36 |  if_ae	mov	local05, #0
0c8d8     B8 49 B1 FD | 	call	#__system___float_fromuns
0c8dc     13 FB 61 F5 | 	xor	result1, local05
0c8e0     FD 14 02 F6 | 	mov	arg02, result1
0c8e4     11 13 02 F6 | 	mov	arg01, local03
0c8e8     B0 4F B1 FD | 	call	#__system___float_div
0c8ec     2C 4E 05 F1 | 	add	fp, #44
0c8f0     A7 FA 61 FC | 	wrlong	result1, fp
0c8f4     04 4E 05 F1 | 	add	fp, #4
0c8f8     A7 14 02 FB | 	rdlong	arg02, fp
0c8fc     30 4E 85 F1 | 	sub	fp, #48
0c900     F8 BF 23 FF 
0c904     00 12 06 F6 | 	mov	arg01, ##1199566848
0c908     8C 4D B1 FD | 	call	#__system___float_mul
0c90c     FD 22 02 F6 | 	mov	local03, result1
0c910     0C 4E 05 F1 | 	add	fp, #12
0c914     A7 12 02 FB | 	rdlong	arg01, fp
0c918     0C 4E 85 F1 | 	sub	fp, #12
0c91c     09 13 52 F6 | 	abs	arg01, arg01 wc
0c920     1F 26 C6 C9 |  if_b	decod	local05, #31
0c924     00 26 06 36 |  if_ae	mov	local05, #0
0c928     68 49 B1 FD | 	call	#__system___float_fromuns
0c92c     13 FB 61 F5 | 	xor	result1, local05
0c930     FD 14 02 F6 | 	mov	arg02, result1
0c934     11 13 02 F6 | 	mov	arg01, local03
0c938     60 4F B1 FD | 	call	#__system___float_div
0c93c     FD 22 02 F6 | 	mov	local03, result1
0c940     58 4E 05 F1 | 	add	fp, #88
0c944     A7 22 62 FC | 	wrlong	local03, fp
0c948     58 4E 85 F1 | 	sub	fp, #88
0c94c                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r : print da,dd,dr
0c94c     00 12 06 F6 | 	mov	arg01, #0
0c950     5C 7B B1 FD | 	call	#__system___getiolock_0484
0c954     FD 12 02 F6 | 	mov	arg01, result1
0c958     BC 21 B1 FD | 	call	#__system___lockmem
0c95c     54 4E 05 F1 | 	add	fp, #84
0c960     A7 14 02 FB | 	rdlong	arg02, fp
0c964     54 4E 85 F1 | 	sub	fp, #84
0c968     00 12 06 F6 | 	mov	arg01, #0
0c96c     00 16 06 F6 | 	mov	arg03, #0
0c970     23 18 06 F6 | 	mov	arg04, #35
0c974     38 53 B1 FD | 	call	#__system___basic_print_float
0c978     00 12 06 F6 | 	mov	arg01, #0
0c97c     09 14 06 F6 | 	mov	arg02, #9
0c980     00 16 06 F6 | 	mov	arg03, #0
0c984     40 2E B1 FD | 	call	#__system___basic_print_char
0c988     2C 4E 05 F1 | 	add	fp, #44
0c98c     A7 14 02 FB | 	rdlong	arg02, fp
0c990     2C 4E 85 F1 | 	sub	fp, #44
0c994     00 12 06 F6 | 	mov	arg01, #0
0c998     00 16 06 F6 | 	mov	arg03, #0
0c99c     23 18 06 F6 | 	mov	arg04, #35
0c9a0     0C 53 B1 FD | 	call	#__system___basic_print_float
0c9a4     00 12 06 F6 | 	mov	arg01, #0
0c9a8     09 14 06 F6 | 	mov	arg02, #9
0c9ac     00 16 06 F6 | 	mov	arg03, #0
0c9b0     14 2E B1 FD | 	call	#__system___basic_print_char
0c9b4     58 4E 05 F1 | 	add	fp, #88
0c9b8     A7 14 02 FB | 	rdlong	arg02, fp
0c9bc     58 4E 85 F1 | 	sub	fp, #88
0c9c0     00 12 06 F6 | 	mov	arg01, #0
0c9c4     00 16 06 F6 | 	mov	arg03, #0
0c9c8     23 18 06 F6 | 	mov	arg04, #35
0c9cc     E0 52 B1 FD | 	call	#__system___basic_print_float
0c9d0     00 12 06 F6 | 	mov	arg01, #0
0c9d4     0A 14 06 F6 | 	mov	arg02, #10
0c9d8     00 16 06 F6 | 	mov	arg03, #0
0c9dc     E8 2D B1 FD | 	call	#__system___basic_print_char
0c9e0     00 12 06 F6 | 	mov	arg01, #0
0c9e4     C8 7A B1 FD | 	call	#__system___getiolock_0484
0c9e8     FD 00 68 FC | 	wrlong	#0, result1
0c9ec     20 4E 05 F1 | 	add	fp, #32
0c9f0     A7 28 02 FB | 	rdlong	local06, fp
0c9f4     20 4E 85 F1 | 	sub	fp, #32
0c9f8     01 28 66 F0 | 	shl	local06, #1
0c9fc     79 00 00 FF 
0ca00     A4 E5 05 F1 | 	add	objptr, ##62372
0ca04     F2 28 02 F1 | 	add	local06, objptr
0ca08     A7 2A 02 FB | 	rdlong	local07, fp
0ca0c     04 4E 05 F1 | 	add	fp, #4
0ca10     A7 22 02 FB | 	rdlong	local03, fp
0ca14     11 2B 02 F1 | 	add	local07, local03
0ca18     14 2B 52 FC | 	wrword	local07, local06
0ca1c     24 4E 05 F1 | 	add	fp, #36
0ca20     A7 00 68 FC | 	wrlong	#0, fp
0ca24                 | '   suspoints(channel)=a+d
0ca24                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
0ca24     14 4E 85 F1 | 	sub	fp, #20
0ca28     A7 00 68 FC | 	wrlong	#0, fp
0ca2c     14 4E 85 F1 | 	sub	fp, #20
0ca30     A7 2C 02 FB | 	rdlong	local08, fp
0ca34     79 00 00 FF 
0ca38     A4 E5 85 F1 | 	sub	objptr, ##62372
0ca3c                 | LR__1023
0ca3c     14 4E 05 F1 | 	add	fp, #20
0ca40     A7 22 02 FB | 	rdlong	local03, fp
0ca44     14 4E 85 F1 | 	sub	fp, #20
0ca48     16 23 52 F2 | 	cmps	local03, local08 wc
0ca4c     80 00 90 3D |  if_ae	jmp	#LR__1024
0ca50     20 4E 05 F1 | 	add	fp, #32
0ca54     A7 28 02 FB | 	rdlong	local06, fp
0ca58     09 28 66 F0 | 	shl	local06, #9
0ca5c     2C 00 00 FF 
0ca60     D8 E4 05 F1 | 	add	objptr, ##22744
0ca64     F2 28 02 F1 | 	add	local06, objptr
0ca68     0C 4E 85 F1 | 	sub	fp, #12
0ca6c     A7 22 02 FB | 	rdlong	local03, fp
0ca70     01 22 66 F0 | 	shl	local03, #1
0ca74     14 23 02 F1 | 	add	local03, local06
0ca78     14 4E 05 F1 | 	add	fp, #20
0ca7c     A7 12 02 FB | 	rdlong	arg01, fp
0ca80     28 4E 85 F1 | 	sub	fp, #40
0ca84     2C 00 00 FF 
0ca88     D8 E4 85 F1 | 	sub	objptr, ##22744
0ca8c     01 14 06 F6 | 	mov	arg02, #1
0ca90     CC 50 B1 FD | 	call	#__system___float_tointeger
0ca94     11 FB 51 FC | 	wrword	result1, local03
0ca98     28 4E 05 F1 | 	add	fp, #40
0ca9c     A7 12 02 FB | 	rdlong	arg01, fp
0caa0     2C 4E 05 F1 | 	add	fp, #44
0caa4     A7 14 02 FB | 	rdlong	arg02, fp
0caa8     54 4E 85 F1 | 	sub	fp, #84
0caac     18 48 B1 FD | 	call	#__system___float_add
0cab0     28 4E 05 F1 | 	add	fp, #40
0cab4     A7 FA 61 FC | 	wrlong	result1, fp
0cab8     14 4E 85 F1 | 	sub	fp, #20
0cabc     A7 20 02 FB | 	rdlong	local02, fp
0cac0     01 20 06 F1 | 	add	local02, #1
0cac4     A7 20 62 FC | 	wrlong	local02, fp
0cac8     14 4E 85 F1 | 	sub	fp, #20
0cacc     6C FF 9F FD | 	jmp	#LR__1023
0cad0                 | LR__1024
0cad0                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
0cad0     A7 22 02 FB | 	rdlong	local03, fp
0cad4     14 4E 05 F1 | 	add	fp, #20
0cad8     A7 22 62 FC | 	wrlong	local03, fp
0cadc     14 4E 85 F1 | 	sub	fp, #20
0cae0     A7 2E 02 FB | 	rdlong	local09, fp
0cae4     04 4E 05 F1 | 	add	fp, #4
0cae8     A7 22 02 FB | 	rdlong	local03, fp
0caec     04 4E 85 F1 | 	sub	fp, #4
0caf0     11 2F 02 F1 | 	add	local09, local03
0caf4                 | LR__1025
0caf4     14 4E 05 F1 | 	add	fp, #20
0caf8     A7 22 02 FB | 	rdlong	local03, fp
0cafc     14 4E 85 F1 | 	sub	fp, #20
0cb00     17 23 52 F2 | 	cmps	local03, local09 wc
0cb04     A8 00 90 3D |  if_ae	jmp	#LR__1026
0cb08     20 4E 05 F1 | 	add	fp, #32
0cb0c     A7 2C 02 FB | 	rdlong	local08, fp
0cb10     09 2C 66 F0 | 	shl	local08, #9
0cb14     2C 00 00 FF 
0cb18     D8 E4 05 F1 | 	add	objptr, ##22744
0cb1c     F2 2C 02 F1 | 	add	local08, objptr
0cb20     0C 4E 85 F1 | 	sub	fp, #12
0cb24     A7 2A 02 FB | 	rdlong	local07, fp
0cb28     01 2A 66 F0 | 	shl	local07, #1
0cb2c     16 2B 02 F1 | 	add	local07, local08
0cb30     14 4E 05 F1 | 	add	fp, #20
0cb34     A7 12 02 FB | 	rdlong	arg01, fp
0cb38     28 4E 85 F1 | 	sub	fp, #40
0cb3c     2C 00 00 FF 
0cb40     D8 E4 85 F1 | 	sub	objptr, ##22744
0cb44     01 14 06 F6 | 	mov	arg02, #1
0cb48     14 50 B1 FD | 	call	#__system___float_tointeger
0cb4c     15 FB 51 FC | 	wrword	result1, local07
0cb50     28 4E 05 F1 | 	add	fp, #40
0cb54     A7 12 02 FB | 	rdlong	arg01, fp
0cb58     04 4E 05 F1 | 	add	fp, #4
0cb5c     A7 14 02 FB | 	rdlong	arg02, fp
0cb60     2C 4E 85 F1 | 	sub	fp, #44
0cb64     1F 14 E6 F4 | 	bitnot	arg02, #31
0cb68     5C 47 B1 FD | 	call	#__system___float_add
0cb6c     28 4E 05 F1 | 	add	fp, #40
0cb70     A7 FA 61 FC | 	wrlong	result1, fp
0cb74     28 4E 85 F1 | 	sub	fp, #40
0cb78     FD 12 02 F6 | 	mov	arg01, result1
0cb7c     00 14 06 F6 | 	mov	arg02, #0
0cb80     01 16 06 F6 | 	mov	arg03, #1
0cb84     44 4F B1 FD | 	call	#__system___float_cmp
0cb88     00 FA 55 F2 | 	cmps	result1, #0 wc
0cb8c     28 4E 05 C1 |  if_b	add	fp, #40
0cb90     A7 00 68 CC |  if_b	wrlong	#0, fp
0cb94     28 4E 85 C1 |  if_b	sub	fp, #40
0cb98     14 4E 05 F1 | 	add	fp, #20
0cb9c     A7 20 02 FB | 	rdlong	local02, fp
0cba0     01 20 06 F1 | 	add	local02, #1
0cba4     A7 20 62 FC | 	wrlong	local02, fp
0cba8     14 4E 85 F1 | 	sub	fp, #20
0cbac     44 FF 9F FD | 	jmp	#LR__1025
0cbb0                 | LR__1026
0cbb0                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
0cbb0     A7 22 02 FB | 	rdlong	local03, fp
0cbb4     04 4E 05 F1 | 	add	fp, #4
0cbb8     A7 2E 02 FB | 	rdlong	local09, fp
0cbbc     17 23 02 F1 | 	add	local03, local09
0cbc0     10 4E 05 F1 | 	add	fp, #16
0cbc4     A7 22 62 FC | 	wrlong	local03, fp
0cbc8     14 4E 85 F1 | 	sub	fp, #20
0cbcc                 | LR__1027
0cbcc     14 4E 05 F1 | 	add	fp, #20
0cbd0     A7 28 02 FB | 	rdlong	local06, fp
0cbd4     14 4E 85 F1 | 	sub	fp, #20
0cbd8     00 29 56 F2 | 	cmps	local06, #256 wc
0cbdc     A8 00 90 3D |  if_ae	jmp	#LR__1028
0cbe0     20 4E 05 F1 | 	add	fp, #32
0cbe4     A7 2E 02 FB | 	rdlong	local09, fp
0cbe8     09 2E 66 F0 | 	shl	local09, #9
0cbec     2C 00 00 FF 
0cbf0     D8 E4 05 F1 | 	add	objptr, ##22744
0cbf4     F2 2E 02 F1 | 	add	local09, objptr
0cbf8     0C 4E 85 F1 | 	sub	fp, #12
0cbfc     A7 2C 02 FB | 	rdlong	local08, fp
0cc00     01 2C 66 F0 | 	shl	local08, #1
0cc04     17 2D 02 F1 | 	add	local08, local09
0cc08     14 4E 05 F1 | 	add	fp, #20
0cc0c     A7 12 02 FB | 	rdlong	arg01, fp
0cc10     28 4E 85 F1 | 	sub	fp, #40
0cc14     2C 00 00 FF 
0cc18     D8 E4 85 F1 | 	sub	objptr, ##22744
0cc1c     01 14 06 F6 | 	mov	arg02, #1
0cc20     3C 4F B1 FD | 	call	#__system___float_tointeger
0cc24     16 FB 51 FC | 	wrword	result1, local08
0cc28     28 4E 05 F1 | 	add	fp, #40
0cc2c     A7 12 02 FB | 	rdlong	arg01, fp
0cc30     30 4E 05 F1 | 	add	fp, #48
0cc34     A7 14 02 FB | 	rdlong	arg02, fp
0cc38     58 4E 85 F1 | 	sub	fp, #88
0cc3c     1F 14 E6 F4 | 	bitnot	arg02, #31
0cc40     84 46 B1 FD | 	call	#__system___float_add
0cc44     28 4E 05 F1 | 	add	fp, #40
0cc48     A7 FA 61 FC | 	wrlong	result1, fp
0cc4c     28 4E 85 F1 | 	sub	fp, #40
0cc50     FD 12 02 F6 | 	mov	arg01, result1
0cc54     00 14 06 F6 | 	mov	arg02, #0
0cc58     01 16 06 F6 | 	mov	arg03, #1
0cc5c     6C 4E B1 FD | 	call	#__system___float_cmp
0cc60     00 FA 55 F2 | 	cmps	result1, #0 wc
0cc64     28 4E 05 C1 |  if_b	add	fp, #40
0cc68     A7 00 68 CC |  if_b	wrlong	#0, fp
0cc6c     28 4E 85 C1 |  if_b	sub	fp, #40
0cc70     14 4E 05 F1 | 	add	fp, #20
0cc74     A7 2E 02 FB | 	rdlong	local09, fp
0cc78     01 2E 06 F1 | 	add	local09, #1
0cc7c     A7 2E 62 FC | 	wrlong	local09, fp
0cc80     14 4E 85 F1 | 	sub	fp, #20
0cc84     44 FF 9F FD | 	jmp	#LR__1027
0cc88                 | LR__1028
0cc88     20 4E 05 F1 | 	add	fp, #32
0cc8c     A7 28 02 FB | 	rdlong	local06, fp
0cc90     09 28 66 F0 | 	shl	local06, #9
0cc94     2C 00 00 FF 
0cc98     D8 E4 05 F1 | 	add	objptr, ##22744
0cc9c     F2 28 02 F1 | 	add	local06, objptr
0cca0     FE 29 06 F1 | 	add	local06, #510
0cca4     14 01 58 FC | 	wrword	#0, local06
0cca8                 | '   envbuf(channel,255)=0
0cca8                 | '   for i=0 to 255 : print envbuf(channel,i), : next i
0cca8     0C 4E 85 F1 | 	sub	fp, #12
0ccac     A7 00 68 FC | 	wrlong	#0, fp
0ccb0     14 4E 85 F1 | 	sub	fp, #20
0ccb4     2C 00 00 FF 
0ccb8     D8 E4 85 F1 | 	sub	objptr, ##22744
0ccbc                 | LR__1029
0ccbc     00 12 06 F6 | 	mov	arg01, #0
0ccc0     EC 77 B1 FD | 	call	#__system___getiolock_0484
0ccc4     FD 12 02 F6 | 	mov	arg01, result1
0ccc8     4C 1E B1 FD | 	call	#__system___lockmem
0cccc     20 4E 05 F1 | 	add	fp, #32
0ccd0     A7 2E 02 FB | 	rdlong	local09, fp
0ccd4     09 2E 66 F0 | 	shl	local09, #9
0ccd8     2C 00 00 FF 
0ccdc     D8 E4 05 F1 | 	add	objptr, ##22744
0cce0     F2 2E 02 F1 | 	add	local09, objptr
0cce4     0C 4E 85 F1 | 	sub	fp, #12
0cce8     A7 2C 02 FB | 	rdlong	local08, fp
0ccec     14 4E 85 F1 | 	sub	fp, #20
0ccf0     01 2C 66 F0 | 	shl	local08, #1
0ccf4     17 2D 02 F1 | 	add	local08, local09
0ccf8     16 15 E2 FA | 	rdword	arg02, local08
0ccfc     00 12 06 F6 | 	mov	arg01, #0
0cd00     00 16 06 F6 | 	mov	arg03, #0
0cd04     0A 18 06 F6 | 	mov	arg04, #10
0cd08     2C 00 00 FF 
0cd0c     D8 E4 85 F1 | 	sub	objptr, ##22744
0cd10     90 2B B1 FD | 	call	#__system___basic_print_unsigned
0cd14     00 12 06 F6 | 	mov	arg01, #0
0cd18     09 14 06 F6 | 	mov	arg02, #9
0cd1c     00 16 06 F6 | 	mov	arg03, #0
0cd20     A4 2A B1 FD | 	call	#__system___basic_print_char
0cd24     00 12 06 F6 | 	mov	arg01, #0
0cd28     84 77 B1 FD | 	call	#__system___getiolock_0484
0cd2c     FD 00 68 FC | 	wrlong	#0, result1
0cd30     14 4E 05 F1 | 	add	fp, #20
0cd34     A7 2E 02 FB | 	rdlong	local09, fp
0cd38     01 2E 06 F1 | 	add	local09, #1
0cd3c     A7 2E 62 FC | 	wrlong	local09, fp
0cd40     14 4E 85 F1 | 	sub	fp, #20
0cd44     00 2F 56 F2 | 	cmps	local09, #256 wc
0cd48     70 FF 9F CD |  if_b	jmp	#LR__1029
0cd4c                 | LR__1030
0cd4c                 | LR__1031
0cd4c     A7 F0 03 F6 | 	mov	ptra, fp
0cd50     B2 00 A0 FD | 	call	#popregs_
0cd54                 | _do_defenv_ret
0cd54     2D 00 64 FD | 	ret
0cd58                 | 
0cd58                 | ' 
0cd58                 | ' 
0cd58                 | ' sub do_play
0cd58                 | _do_play
0cd58     05 4A 05 F6 | 	mov	COUNT_, #5
0cd5c     A8 00 A0 FD | 	call	#pushregs_
0cd60     74 F0 07 F1 | 	add	ptra, #116
0cd64     60 4E 05 F1 | 	add	fp, #96
0cd68     F5 25 A2 FF 
0cd6c     A7 AA 68 FC | 	wrlong	##1145825877, fp
0cd70                 | ' speed_coeff=815.6614449376854599406528189911
0cd70                 | ' 
0cd70                 | ' for i=0 to 8 : params(i)=-2.0 : next i
0cd70     5C 4E 85 F1 | 	sub	fp, #92
0cd74     A7 00 68 FC | 	wrlong	#0, fp
0cd78     97 18 48 FB | 	callpa	#(@LR__1041-@LR__1040)>>2,fcache_load_ptr_
0cd7c                 | LR__1040
0cd7c     A7 16 02 FB | 	rdlong	arg03, fp
0cd80     02 16 66 F0 | 	shl	arg03, #2
0cd84     2C 4E 05 F1 | 	add	fp, #44
0cd88     A7 16 02 F1 | 	add	arg03, fp
0cd8c     00 00 E0 FF 
0cd90     0B 01 68 FC | 	wrlong	##-1073741824, arg03
0cd94     2C 4E 85 F1 | 	sub	fp, #44
0cd98     A7 1E 02 FB | 	rdlong	local01, fp
0cd9c     01 1E 06 F1 | 	add	local01, #1
0cda0     A7 1E 62 FC | 	wrlong	local01, fp
0cda4     09 1E 56 F2 | 	cmps	local01, #9 wc
0cda8     D0 FF 9F CD |  if_b	jmp	#LR__1040
0cdac                 | LR__1041
0cdac     04 4E 85 F1 | 	sub	fp, #4
0cdb0     6A 00 00 FF 
0cdb4     80 E4 05 F1 | 	add	objptr, ##54400
0cdb8     F2 20 02 FB | 	rdlong	local02, objptr
0cdbc     10 23 02 F6 | 	mov	local03, local02
0cdc0     01 22 66 F0 | 	shl	local03, #1
0cdc4     10 23 02 F1 | 	add	local03, local02
0cdc8     02 22 66 F0 | 	shl	local03, #2
0cdcc     03 00 00 FF 
0cdd0     04 E4 85 F1 | 	sub	objptr, ##1540
0cdd4     F2 22 02 F1 | 	add	local03, objptr
0cdd8     11 25 02 FB | 	rdlong	local04, local03
0cddc     A7 24 62 FC | 	wrlong	local04, fp
0cde0                 | ' 'params(0)=0: params(1)=440.0 : params(2)=16.0 : params(3)=0.0 : params(4)=0.0 : params(5)=1.0 : params(6)=0.0 : params(7)=0.0 : 
0cde0                 | ' 'chn		freq		   vol		   wave#	   env#		   len		   delay	   pan		: sus 
0cde0                 | ' numpar=compiledline(lineptr_e).result.uresult
0cde0                 | ' for i=numpar to 1 step -1 
0cde0     04 4E 05 F1 | 	add	fp, #4
0cde4     A7 24 62 FC | 	wrlong	local04, fp
0cde8     04 4E 85 F1 | 	sub	fp, #4
0cdec     67 00 00 FF 
0cdf0     7C E4 85 F1 | 	sub	objptr, ##52860
0cdf4                 | LR__1042
0cdf4     68 DA BF FD | 	call	#_pop
0cdf8     54 4E 05 F1 | 	add	fp, #84
0cdfc     A7 FA 61 FC | 	wrlong	result1, fp
0ce00     04 4E 05 F1 | 	add	fp, #4
0ce04     A7 FC 61 FC | 	wrlong	result2, fp
0ce08     04 4E 05 F1 | 	add	fp, #4
0ce0c     A7 FE 61 FC | 	wrlong	result3, fp
0ce10     58 4E 85 F1 | 	sub	fp, #88
0ce14     A7 22 02 FB | 	rdlong	local03, fp
0ce18     01 22 86 F1 | 	sub	local03, #1
0ce1c     02 22 66 F0 | 	shl	local03, #2
0ce20     2C 4E 05 F1 | 	add	fp, #44
0ce24     A7 22 02 F1 | 	add	local03, fp
0ce28     24 4E 05 F1 | 	add	fp, #36
0ce2c     A7 26 02 F6 | 	mov	local05, fp
0ce30     13 13 02 F6 | 	mov	arg01, local05
0ce34     54 4E 85 F1 | 	sub	fp, #84
0ce38     28 67 B0 FD | 	call	#_converttofloat
0ce3c     11 FB 61 FC | 	wrlong	result1, local03
0ce40     04 4E 05 F1 | 	add	fp, #4
0ce44     A7 1E 02 FB | 	rdlong	local01, fp
0ce48     01 1E 86 F1 | 	sub	local01, #1
0ce4c     A7 1E 62 FC | 	wrlong	local01, fp
0ce50     04 4E 85 F1 | 	sub	fp, #4
0ce54     01 1E 56 F2 | 	cmps	local01, #1 wc
0ce58     98 FF 9F 3D |  if_ae	jmp	#LR__1042
0ce5c                 | ' if params(0)<0 then channel=0 else channel=round(params(0))
0ce5c     30 4E 05 F1 | 	add	fp, #48
0ce60     A7 12 02 FB | 	rdlong	arg01, fp
0ce64     30 4E 85 F1 | 	sub	fp, #48
0ce68     00 14 06 F6 | 	mov	arg02, #0
0ce6c     01 16 06 F6 | 	mov	arg03, #1
0ce70     58 4C B1 FD | 	call	#__system___float_cmp
0ce74     00 FA 55 F2 | 	cmps	result1, #0 wc
0ce78     0C 4E 05 C1 |  if_b	add	fp, #12
0ce7c     A7 00 68 CC |  if_b	wrlong	#0, fp
0ce80     0C 4E 85 C1 |  if_b	sub	fp, #12
0ce84     20 00 90 CD |  if_b	jmp	#LR__1043
0ce88     30 4E 05 F1 | 	add	fp, #48
0ce8c     A7 12 02 FB | 	rdlong	arg01, fp
0ce90     30 4E 85 F1 | 	sub	fp, #48
0ce94     01 14 06 F6 | 	mov	arg02, #1
0ce98     C4 4C B1 FD | 	call	#__system___float_tointeger
0ce9c     0C 4E 05 F1 | 	add	fp, #12
0cea0     A7 FA 61 FC | 	wrlong	result1, fp
0cea4     0C 4E 85 F1 | 	sub	fp, #12
0cea8                 | LR__1043
0cea8                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
0cea8     34 4E 05 F1 | 	add	fp, #52
0ceac     A7 12 02 FB | 	rdlong	arg01, fp
0ceb0     34 4E 85 F1 | 	sub	fp, #52
0ceb4     00 14 06 F6 | 	mov	arg02, #0
0ceb8     01 16 06 F6 | 	mov	arg03, #1
0cebc     0C 4C B1 FD | 	call	#__system___float_cmp
0cec0     00 FA 55 F2 | 	cmps	result1, #0 wc
0cec4     40 00 90 3D |  if_ae	jmp	#LR__1044
0cec8     0C 4E 05 F1 | 	add	fp, #12
0cecc     A7 20 02 FB | 	rdlong	local02, fp
0ced0     10 23 02 F6 | 	mov	local03, local02
0ced4     01 22 66 F0 | 	shl	local03, #1
0ced8     10 23 02 F1 | 	add	local03, local02
0cedc     03 22 66 F0 | 	shl	local03, #3
0cee0     34 00 00 FF 
0cee4     38 E5 05 F1 | 	add	objptr, ##26936
0cee8     F2 22 02 F1 | 	add	local03, objptr
0ceec     11 23 02 FB | 	rdlong	local03, local03
0cef0     58 4E 05 F1 | 	add	fp, #88
0cef4     A7 22 62 FC | 	wrlong	local03, fp
0cef8     64 4E 85 F1 | 	sub	fp, #100
0cefc     34 00 00 FF 
0cf00     38 E5 85 F1 | 	sub	objptr, ##26936
0cf04     44 00 90 FD | 	jmp	#LR__1045
0cf08                 | LR__1044
0cf08     34 4E 05 F1 | 	add	fp, #52
0cf0c     A7 24 02 FB | 	rdlong	local04, fp
0cf10     30 4E 05 F1 | 	add	fp, #48
0cf14     A7 24 62 FC | 	wrlong	local04, fp
0cf18     58 4E 85 F1 | 	sub	fp, #88
0cf1c     A7 20 02 FB | 	rdlong	local02, fp
0cf20     10 23 02 F6 | 	mov	local03, local02
0cf24     01 22 66 F0 | 	shl	local03, #1
0cf28     10 23 02 F1 | 	add	local03, local02
0cf2c     03 22 66 F0 | 	shl	local03, #3
0cf30     34 00 00 FF 
0cf34     38 E5 05 F1 | 	add	objptr, ##26936
0cf38     F2 22 02 F1 | 	add	local03, objptr
0cf3c     0C 4E 85 F1 | 	sub	fp, #12
0cf40     11 25 62 FC | 	wrlong	local04, local03
0cf44     34 00 00 FF 
0cf48     38 E5 85 F1 | 	sub	objptr, ##26936
0cf4c                 | LR__1045
0cf4c                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
0cf4c     3C 4E 05 F1 | 	add	fp, #60
0cf50     A7 12 02 FB | 	rdlong	arg01, fp
0cf54     3C 4E 85 F1 | 	sub	fp, #60
0cf58     00 14 06 F6 | 	mov	arg02, #0
0cf5c     01 16 06 F6 | 	mov	arg03, #1
0cf60     68 4B B1 FD | 	call	#__system___float_cmp
0cf64     00 FA 55 F2 | 	cmps	result1, #0 wc
0cf68     24 00 90 CD |  if_b	jmp	#LR__1046
0cf6c     3C 4E 05 F1 | 	add	fp, #60
0cf70     A7 12 02 FB | 	rdlong	arg01, fp
0cf74     3C 4E 85 F1 | 	sub	fp, #60
0cf78     89 C1 20 FF 
0cf7c     6F 14 06 F6 | 	mov	arg02, ##1099108975
0cf80     01 16 66 F6 | 	neg	arg03, #1
0cf84     44 4B B1 FD | 	call	#__system___float_cmp
0cf88     01 FA 55 F2 | 	cmps	result1, #1 wc
0cf8c     44 00 90 CD |  if_b	jmp	#LR__1047
0cf90                 | LR__1046
0cf90     0C 4E 05 F1 | 	add	fp, #12
0cf94     A7 20 02 FB | 	rdlong	local02, fp
0cf98     10 23 02 F6 | 	mov	local03, local02
0cf9c     01 22 66 F0 | 	shl	local03, #1
0cfa0     10 23 02 F1 | 	add	local03, local02
0cfa4     03 22 66 F0 | 	shl	local03, #3
0cfa8     34 00 00 FF 
0cfac     38 E5 05 F1 | 	add	objptr, ##26936
0cfb0     F2 22 02 F1 | 	add	local03, objptr
0cfb4     0C 22 06 F1 | 	add	local03, #12
0cfb8     11 23 02 FB | 	rdlong	local03, local03
0cfbc     60 4E 05 F1 | 	add	fp, #96
0cfc0     A7 22 62 FC | 	wrlong	local03, fp
0cfc4     6C 4E 85 F1 | 	sub	fp, #108
0cfc8     34 00 00 FF 
0cfcc     38 E5 85 F1 | 	sub	objptr, ##26936
0cfd0     48 00 90 FD | 	jmp	#LR__1048
0cfd4                 | LR__1047
0cfd4     3C 4E 05 F1 | 	add	fp, #60
0cfd8     A7 24 02 FB | 	rdlong	local04, fp
0cfdc     30 4E 05 F1 | 	add	fp, #48
0cfe0     A7 24 62 FC | 	wrlong	local04, fp
0cfe4     60 4E 85 F1 | 	sub	fp, #96
0cfe8     A7 20 02 FB | 	rdlong	local02, fp
0cfec     10 23 02 F6 | 	mov	local03, local02
0cff0     01 22 66 F0 | 	shl	local03, #1
0cff4     10 23 02 F1 | 	add	local03, local02
0cff8     03 22 66 F0 | 	shl	local03, #3
0cffc     34 00 00 FF 
0d000     38 E5 05 F1 | 	add	objptr, ##26936
0d004     F2 22 02 F1 | 	add	local03, objptr
0d008     0C 4E 85 F1 | 	sub	fp, #12
0d00c     0C 22 06 F1 | 	add	local03, #12
0d010     11 25 62 FC | 	wrlong	local04, local03
0d014     34 00 00 FF 
0d018     38 E5 85 F1 | 	sub	objptr, ##26936
0d01c                 | LR__1048
0d01c                 | ' if params(4)<0 orelse params(4)>8.0 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
0d01c     40 4E 05 F1 | 	add	fp, #64
0d020     A7 12 02 FB | 	rdlong	arg01, fp
0d024     40 4E 85 F1 | 	sub	fp, #64
0d028     00 14 06 F6 | 	mov	arg02, #0
0d02c     01 16 06 F6 | 	mov	arg03, #1
0d030     98 4A B1 FD | 	call	#__system___float_cmp
0d034     00 FA 55 F2 | 	cmps	result1, #0 wc
0d038     24 00 90 CD |  if_b	jmp	#LR__1049
0d03c     40 4E 05 F1 | 	add	fp, #64
0d040     A7 12 02 FB | 	rdlong	arg01, fp
0d044     40 4E 85 F1 | 	sub	fp, #64
0d048     00 80 20 FF 
0d04c     00 14 06 F6 | 	mov	arg02, ##1090519040
0d050     01 16 66 F6 | 	neg	arg03, #1
0d054     74 4A B1 FD | 	call	#__system___float_cmp
0d058     01 FA 55 F2 | 	cmps	result1, #1 wc
0d05c     48 00 90 CD |  if_b	jmp	#LR__1050
0d060                 | LR__1049
0d060     0C 4E 05 F1 | 	add	fp, #12
0d064     A7 22 02 FB | 	rdlong	local03, fp
0d068     11 27 02 F6 | 	mov	local05, local03
0d06c     01 26 66 F0 | 	shl	local05, #1
0d070     11 27 02 F1 | 	add	local05, local03
0d074     03 26 66 F0 | 	shl	local05, #3
0d078     34 00 00 FF 
0d07c     38 E5 05 F1 | 	add	objptr, ##26936
0d080     F2 26 02 F1 | 	add	local05, objptr
0d084     04 26 06 F1 | 	add	local05, #4
0d088     13 27 C2 FA | 	rdbyte	local05, local05
0d08c     13 25 E2 F8 | 	getbyte	local04, local05, #0
0d090     14 4E 05 F1 | 	add	fp, #20
0d094     A7 24 62 FC | 	wrlong	local04, fp
0d098     20 4E 85 F1 | 	sub	fp, #32
0d09c     34 00 00 FF 
0d0a0     38 E5 85 F1 | 	sub	objptr, ##26936
0d0a4     54 00 90 FD | 	jmp	#LR__1051
0d0a8                 | LR__1050
0d0a8     40 4E 05 F1 | 	add	fp, #64
0d0ac     A7 12 02 FB | 	rdlong	arg01, fp
0d0b0     40 4E 85 F1 | 	sub	fp, #64
0d0b4     01 14 06 F6 | 	mov	arg02, #1
0d0b8     A4 4A B1 FD | 	call	#__system___float_tointeger
0d0bc     20 4E 05 F1 | 	add	fp, #32
0d0c0     A7 FA 61 FC | 	wrlong	result1, fp
0d0c4     14 4E 85 F1 | 	sub	fp, #20
0d0c8     A7 20 02 FB | 	rdlong	local02, fp
0d0cc     10 23 02 F6 | 	mov	local03, local02
0d0d0     01 22 66 F0 | 	shl	local03, #1
0d0d4     10 23 02 F1 | 	add	local03, local02
0d0d8     03 22 66 F0 | 	shl	local03, #3
0d0dc     34 00 00 FF 
0d0e0     38 E5 05 F1 | 	add	objptr, ##26936
0d0e4     F2 22 02 F1 | 	add	local03, objptr
0d0e8     0C 4E 85 F1 | 	sub	fp, #12
0d0ec     04 22 06 F1 | 	add	local03, #4
0d0f0     11 FB 41 FC | 	wrbyte	result1, local03
0d0f4     34 00 00 FF 
0d0f8     38 E5 85 F1 | 	sub	objptr, ##26936
0d0fc                 | LR__1051
0d0fc                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
0d0fc     44 4E 05 F1 | 	add	fp, #68
0d100     A7 12 02 FB | 	rdlong	arg01, fp
0d104     44 4E 85 F1 | 	sub	fp, #68
0d108     00 14 06 F6 | 	mov	arg02, #0
0d10c     01 16 06 F6 | 	mov	arg03, #1
0d110     B8 49 B1 FD | 	call	#__system___float_cmp
0d114     00 FA 55 F2 | 	cmps	result1, #0 wc
0d118     24 00 90 CD |  if_b	jmp	#LR__1052
0d11c     44 4E 05 F1 | 	add	fp, #68
0d120     A7 12 02 FB | 	rdlong	arg01, fp
0d124     44 4E 85 F1 | 	sub	fp, #68
0d128     00 80 20 FF 
0d12c     00 14 06 F6 | 	mov	arg02, ##1090519040
0d130     01 16 66 F6 | 	neg	arg03, #1
0d134     94 49 B1 FD | 	call	#__system___float_cmp
0d138     01 FA 55 F2 | 	cmps	result1, #1 wc
0d13c     48 00 90 CD |  if_b	jmp	#LR__1053
0d140                 | LR__1052
0d140     0C 4E 05 F1 | 	add	fp, #12
0d144     A7 22 02 FB | 	rdlong	local03, fp
0d148     11 27 02 F6 | 	mov	local05, local03
0d14c     01 26 66 F0 | 	shl	local05, #1
0d150     11 27 02 F1 | 	add	local05, local03
0d154     03 26 66 F0 | 	shl	local05, #3
0d158     34 00 00 FF 
0d15c     38 E5 05 F1 | 	add	objptr, ##26936
0d160     F2 26 02 F1 | 	add	local05, objptr
0d164     05 26 06 F1 | 	add	local05, #5
0d168     13 27 C2 FA | 	rdbyte	local05, local05
0d16c     13 25 E2 F8 | 	getbyte	local04, local05, #0
0d170     18 4E 05 F1 | 	add	fp, #24
0d174     A7 24 62 FC | 	wrlong	local04, fp
0d178     24 4E 85 F1 | 	sub	fp, #36
0d17c     34 00 00 FF 
0d180     38 E5 85 F1 | 	sub	objptr, ##26936
0d184     54 00 90 FD | 	jmp	#LR__1054
0d188                 | LR__1053
0d188     44 4E 05 F1 | 	add	fp, #68
0d18c     A7 12 02 FB | 	rdlong	arg01, fp
0d190     44 4E 85 F1 | 	sub	fp, #68
0d194     01 14 06 F6 | 	mov	arg02, #1
0d198     C4 49 B1 FD | 	call	#__system___float_tointeger
0d19c     24 4E 05 F1 | 	add	fp, #36
0d1a0     A7 FA 61 FC | 	wrlong	result1, fp
0d1a4     18 4E 85 F1 | 	sub	fp, #24
0d1a8     A7 20 02 FB | 	rdlong	local02, fp
0d1ac     10 23 02 F6 | 	mov	local03, local02
0d1b0     01 22 66 F0 | 	shl	local03, #1
0d1b4     10 23 02 F1 | 	add	local03, local02
0d1b8     03 22 66 F0 | 	shl	local03, #3
0d1bc     34 00 00 FF 
0d1c0     38 E5 05 F1 | 	add	objptr, ##26936
0d1c4     F2 22 02 F1 | 	add	local03, objptr
0d1c8     0C 4E 85 F1 | 	sub	fp, #12
0d1cc     05 22 06 F1 | 	add	local03, #5
0d1d0     11 FB 41 FC | 	wrbyte	result1, local03
0d1d4     34 00 00 FF 
0d1d8     38 E5 85 F1 | 	sub	objptr, ##26936
0d1dc                 | LR__1054
0d1dc                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
0d1dc     48 4E 05 F1 | 	add	fp, #72
0d1e0     A7 12 02 FB | 	rdlong	arg01, fp
0d1e4     48 4E 85 F1 | 	sub	fp, #72
0d1e8     00 14 06 F6 | 	mov	arg02, #0
0d1ec     01 16 06 F6 | 	mov	arg03, #1
0d1f0     D8 48 B1 FD | 	call	#__system___float_cmp
0d1f4     00 FA 55 F2 | 	cmps	result1, #0 wc
0d1f8     24 00 90 CD |  if_b	jmp	#LR__1055
0d1fc     48 4E 05 F1 | 	add	fp, #72
0d200     A7 12 02 FB | 	rdlong	arg01, fp
0d204     48 4E 85 F1 | 	sub	fp, #72
0d208     00 3D 22 FF 
0d20c     00 14 06 F6 | 	mov	arg02, ##1148846080
0d210     01 16 66 F6 | 	neg	arg03, #1
0d214     B4 48 B1 FD | 	call	#__system___float_cmp
0d218     01 FA 55 F2 | 	cmps	result1, #1 wc
0d21c     44 00 90 CD |  if_b	jmp	#LR__1056
0d220                 | LR__1055
0d220     0C 4E 05 F1 | 	add	fp, #12
0d224     A7 20 02 FB | 	rdlong	local02, fp
0d228     10 23 02 F6 | 	mov	local03, local02
0d22c     01 22 66 F0 | 	shl	local03, #1
0d230     10 23 02 F1 | 	add	local03, local02
0d234     03 22 66 F0 | 	shl	local03, #3
0d238     34 00 00 FF 
0d23c     38 E5 05 F1 | 	add	objptr, ##26936
0d240     F2 22 02 F1 | 	add	local03, objptr
0d244     08 22 06 F1 | 	add	local03, #8
0d248     11 25 02 FB | 	rdlong	local04, local03
0d24c     64 4E 05 F1 | 	add	fp, #100
0d250     A7 24 62 FC | 	wrlong	local04, fp
0d254     70 4E 85 F1 | 	sub	fp, #112
0d258     34 00 00 FF 
0d25c     38 E5 85 F1 | 	sub	objptr, ##26936
0d260     48 00 90 FD | 	jmp	#LR__1057
0d264                 | LR__1056
0d264     48 4E 05 F1 | 	add	fp, #72
0d268     A7 24 02 FB | 	rdlong	local04, fp
0d26c     28 4E 05 F1 | 	add	fp, #40
0d270     A7 24 62 FC | 	wrlong	local04, fp
0d274     64 4E 85 F1 | 	sub	fp, #100
0d278     A7 20 02 FB | 	rdlong	local02, fp
0d27c     10 23 02 F6 | 	mov	local03, local02
0d280     01 22 66 F0 | 	shl	local03, #1
0d284     10 23 02 F1 | 	add	local03, local02
0d288     03 22 66 F0 | 	shl	local03, #3
0d28c     34 00 00 FF 
0d290     38 E5 05 F1 | 	add	objptr, ##26936
0d294     F2 22 02 F1 | 	add	local03, objptr
0d298     0C 4E 85 F1 | 	sub	fp, #12
0d29c     08 22 06 F1 | 	add	local03, #8
0d2a0     11 25 62 FC | 	wrlong	local04, local03
0d2a4     34 00 00 FF 
0d2a8     38 E5 85 F1 | 	sub	objptr, ##26936
0d2ac                 | LR__1057
0d2ac                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
0d2ac     38 4E 05 F1 | 	add	fp, #56
0d2b0     A7 12 02 FB | 	rdlong	arg01, fp
0d2b4     38 4E 85 F1 | 	sub	fp, #56
0d2b8     00 14 06 F6 | 	mov	arg02, #0
0d2bc     01 16 06 F6 | 	mov	arg03, #1
0d2c0     08 48 B1 FD | 	call	#__system___float_cmp
0d2c4     00 FA 55 F2 | 	cmps	result1, #0 wc
0d2c8     24 00 90 CD |  if_b	jmp	#LR__1058
0d2cc     38 4E 05 F1 | 	add	fp, #56
0d2d0     A7 12 02 FB | 	rdlong	arg01, fp
0d2d4     38 4E 85 F1 | 	sub	fp, #56
0d2d8     20 0E 23 FF 
0d2dc     00 14 06 F6 | 	mov	arg02, ##1176256512
0d2e0     01 16 66 F6 | 	neg	arg03, #1
0d2e4     E4 47 B1 FD | 	call	#__system___float_cmp
0d2e8     01 FA 55 F2 | 	cmps	result1, #1 wc
0d2ec     48 00 90 CD |  if_b	jmp	#LR__1059
0d2f0                 | LR__1058
0d2f0     0C 4E 05 F1 | 	add	fp, #12
0d2f4     A7 22 02 FB | 	rdlong	local03, fp
0d2f8     11 27 02 F6 | 	mov	local05, local03
0d2fc     01 26 66 F0 | 	shl	local05, #1
0d300     11 27 02 F1 | 	add	local05, local03
0d304     03 26 66 F0 | 	shl	local05, #3
0d308     34 00 00 FF 
0d30c     38 E5 05 F1 | 	add	objptr, ##26936
0d310     F2 26 02 F1 | 	add	local05, objptr
0d314     06 26 06 F1 | 	add	local05, #6
0d318     13 27 E2 FA | 	rdword	local05, local05
0d31c     13 25 32 F9 | 	getword	local04, local05, #0
0d320     1C 4E 05 F1 | 	add	fp, #28
0d324     A7 24 62 FC | 	wrlong	local04, fp
0d328     28 4E 85 F1 | 	sub	fp, #40
0d32c     34 00 00 FF 
0d330     38 E5 85 F1 | 	sub	objptr, ##26936
0d334     54 00 90 FD | 	jmp	#LR__1060
0d338                 | LR__1059
0d338     38 4E 05 F1 | 	add	fp, #56
0d33c     A7 12 02 FB | 	rdlong	arg01, fp
0d340     38 4E 85 F1 | 	sub	fp, #56
0d344     01 14 06 F6 | 	mov	arg02, #1
0d348     14 48 B1 FD | 	call	#__system___float_tointeger
0d34c     28 4E 05 F1 | 	add	fp, #40
0d350     A7 FA 61 FC | 	wrlong	result1, fp
0d354     1C 4E 85 F1 | 	sub	fp, #28
0d358     A7 20 02 FB | 	rdlong	local02, fp
0d35c     10 23 02 F6 | 	mov	local03, local02
0d360     01 22 66 F0 | 	shl	local03, #1
0d364     10 23 02 F1 | 	add	local03, local02
0d368     03 22 66 F0 | 	shl	local03, #3
0d36c     34 00 00 FF 
0d370     38 E5 05 F1 | 	add	objptr, ##26936
0d374     F2 22 02 F1 | 	add	local03, objptr
0d378     0C 4E 85 F1 | 	sub	fp, #12
0d37c     06 22 06 F1 | 	add	local03, #6
0d380     11 FB 51 FC | 	wrword	result1, local03
0d384     34 00 00 FF 
0d388     38 E5 85 F1 | 	sub	objptr, ##26936
0d38c                 | LR__1060
0d38c                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
0d38c     4C 4E 05 F1 | 	add	fp, #76
0d390     A7 12 02 FB | 	rdlong	arg01, fp
0d394     4C 4E 85 F1 | 	sub	fp, #76
0d398     00 C0 5F FF 
0d39c     00 14 06 F6 | 	mov	arg02, ##-1082130432
0d3a0     01 16 06 F6 | 	mov	arg03, #1
0d3a4     24 47 B1 FD | 	call	#__system___float_cmp
0d3a8     00 FA 55 F2 | 	cmps	result1, #0 wc
0d3ac     24 00 90 CD |  if_b	jmp	#LR__1061
0d3b0     4C 4E 05 F1 | 	add	fp, #76
0d3b4     A7 12 02 FB | 	rdlong	arg01, fp
0d3b8     4C 4E 85 F1 | 	sub	fp, #76
0d3bc     00 C0 1F FF 
0d3c0     00 14 06 F6 | 	mov	arg02, ##1065353216
0d3c4     01 16 66 F6 | 	neg	arg03, #1
0d3c8     00 47 B1 FD | 	call	#__system___float_cmp
0d3cc     01 FA 55 F2 | 	cmps	result1, #1 wc
0d3d0     44 00 90 CD |  if_b	jmp	#LR__1062
0d3d4                 | LR__1061
0d3d4     0C 4E 05 F1 | 	add	fp, #12
0d3d8     A7 20 02 FB | 	rdlong	local02, fp
0d3dc     10 23 02 F6 | 	mov	local03, local02
0d3e0     01 22 66 F0 | 	shl	local03, #1
0d3e4     10 23 02 F1 | 	add	local03, local02
0d3e8     03 22 66 F0 | 	shl	local03, #3
0d3ec     34 00 00 FF 
0d3f0     38 E5 05 F1 | 	add	objptr, ##26936
0d3f4     F2 22 02 F1 | 	add	local03, objptr
0d3f8     10 22 06 F1 | 	add	local03, #16
0d3fc     11 27 02 FB | 	rdlong	local05, local03
0d400     5C 4E 05 F1 | 	add	fp, #92
0d404     A7 26 62 FC | 	wrlong	local05, fp
0d408     68 4E 85 F1 | 	sub	fp, #104
0d40c     34 00 00 FF 
0d410     38 E5 85 F1 | 	sub	objptr, ##26936
0d414     48 00 90 FD | 	jmp	#LR__1063
0d418                 | LR__1062
0d418     4C 4E 05 F1 | 	add	fp, #76
0d41c     A7 26 02 FB | 	rdlong	local05, fp
0d420     1C 4E 05 F1 | 	add	fp, #28
0d424     A7 26 62 FC | 	wrlong	local05, fp
0d428     5C 4E 85 F1 | 	sub	fp, #92
0d42c     A7 20 02 FB | 	rdlong	local02, fp
0d430     10 23 02 F6 | 	mov	local03, local02
0d434     01 22 66 F0 | 	shl	local03, #1
0d438     10 23 02 F1 | 	add	local03, local02
0d43c     03 22 66 F0 | 	shl	local03, #3
0d440     34 00 00 FF 
0d444     38 E5 05 F1 | 	add	objptr, ##26936
0d448     F2 22 02 F1 | 	add	local03, objptr
0d44c     0C 4E 85 F1 | 	sub	fp, #12
0d450     10 22 06 F1 | 	add	local03, #16
0d454     11 27 62 FC | 	wrlong	local05, local03
0d458     34 00 00 FF 
0d45c     38 E5 85 F1 | 	sub	objptr, ##26936
0d460                 | LR__1063
0d460                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
0d460     50 4E 05 F1 | 	add	fp, #80
0d464     A7 12 02 FB | 	rdlong	arg01, fp
0d468     50 4E 85 F1 | 	sub	fp, #80
0d46c     00 14 06 F6 | 	mov	arg02, #0
0d470     01 16 06 F6 | 	mov	arg03, #1
0d474     54 46 B1 FD | 	call	#__system___float_cmp
0d478     00 FA 55 F2 | 	cmps	result1, #0 wc
0d47c     24 00 90 CD |  if_b	jmp	#LR__1064
0d480     50 4E 05 F1 | 	add	fp, #80
0d484     A7 12 02 FB | 	rdlong	arg01, fp
0d488     50 4E 85 F1 | 	sub	fp, #80
0d48c     80 BF 21 FF 
0d490     00 14 06 F6 | 	mov	arg02, ##1132396544
0d494     01 16 66 F6 | 	neg	arg03, #1
0d498     30 46 B1 FD | 	call	#__system___float_cmp
0d49c     01 FA 55 F2 | 	cmps	result1, #1 wc
0d4a0     44 00 90 CD |  if_b	jmp	#LR__1065
0d4a4                 | LR__1064
0d4a4     0C 4E 05 F1 | 	add	fp, #12
0d4a8     A7 22 02 FB | 	rdlong	local03, fp
0d4ac     11 27 02 F6 | 	mov	local05, local03
0d4b0     01 26 66 F0 | 	shl	local05, #1
0d4b4     11 27 02 F1 | 	add	local05, local03
0d4b8     03 26 66 F0 | 	shl	local05, #3
0d4bc     34 00 00 FF 
0d4c0     38 E5 05 F1 | 	add	objptr, ##26936
0d4c4     F2 26 02 F1 | 	add	local05, objptr
0d4c8     14 26 06 F1 | 	add	local05, #20
0d4cc     13 25 E2 FA | 	rdword	local04, local05
0d4d0     20 4E 05 F1 | 	add	fp, #32
0d4d4     A7 24 62 FC | 	wrlong	local04, fp
0d4d8     2C 4E 85 F1 | 	sub	fp, #44
0d4dc     34 00 00 FF 
0d4e0     38 E5 85 F1 | 	sub	objptr, ##26936
0d4e4     54 00 90 FD | 	jmp	#LR__1066
0d4e8                 | LR__1065
0d4e8     50 4E 05 F1 | 	add	fp, #80
0d4ec     A7 12 02 FB | 	rdlong	arg01, fp
0d4f0     50 4E 85 F1 | 	sub	fp, #80
0d4f4     01 14 06 F6 | 	mov	arg02, #1
0d4f8     64 46 B1 FD | 	call	#__system___float_tointeger
0d4fc     2C 4E 05 F1 | 	add	fp, #44
0d500     A7 FA 61 FC | 	wrlong	result1, fp
0d504     20 4E 85 F1 | 	sub	fp, #32
0d508     A7 20 02 FB | 	rdlong	local02, fp
0d50c     10 23 02 F6 | 	mov	local03, local02
0d510     01 22 66 F0 | 	shl	local03, #1
0d514     10 23 02 F1 | 	add	local03, local02
0d518     03 22 66 F0 | 	shl	local03, #3
0d51c     34 00 00 FF 
0d520     38 E5 05 F1 | 	add	objptr, ##26936
0d524     F2 22 02 F1 | 	add	local03, objptr
0d528     0C 4E 85 F1 | 	sub	fp, #12
0d52c     14 22 06 F1 | 	add	local03, #20
0d530     11 FB 51 FC | 	wrword	result1, local03
0d534     34 00 00 FF 
0d538     38 E5 85 F1 | 	sub	objptr, ##26936
0d53c                 | LR__1066
0d53c     60 4E 05 F1 | 	add	fp, #96
0d540     A7 12 02 FB | 	rdlong	arg01, fp
0d544     10 4E 05 F1 | 	add	fp, #16
0d548     A7 14 02 FB | 	rdlong	arg02, fp
0d54c     70 4E 85 F1 | 	sub	fp, #112
0d550     48 43 B1 FD | 	call	#__system___float_div
0d554     FD 12 02 F6 | 	mov	arg01, result1
0d558     01 14 06 F6 | 	mov	arg02, #1
0d55c     00 46 B1 FD | 	call	#__system___float_tointeger
0d560     FD 24 02 F6 | 	mov	local04, result1
0d564     14 4E 05 F1 | 	add	fp, #20
0d568     A7 24 62 FC | 	wrlong	local04, fp
0d56c     54 4E 05 F1 | 	add	fp, #84
0d570     A7 14 02 FB | 	rdlong	arg02, fp
0d574     68 4E 85 F1 | 	sub	fp, #104
0d578     00 00 23 FF 
0d57c     00 12 06 F6 | 	mov	arg01, ##1174405120
0d580     14 41 B1 FD | 	call	#__system___float_mul
0d584     FD 12 02 F6 | 	mov	arg01, result1
0d588     01 14 06 F6 | 	mov	arg02, #1
0d58c     D0 45 B1 FD | 	call	#__system___float_tointeger
0d590     0D 24 C6 F9 | 	decod	local04, #13
0d594     FD 24 02 F1 | 	add	local04, result1
0d598     18 4E 05 F1 | 	add	fp, #24
0d59c     A7 24 62 FC | 	wrlong	local04, fp
0d5a0     54 4E 05 F1 | 	add	fp, #84
0d5a4     A7 14 02 FB | 	rdlong	arg02, fp
0d5a8     6C 4E 85 F1 | 	sub	fp, #108
0d5ac     00 3D 22 FF 
0d5b0     00 12 06 F6 | 	mov	arg01, ##1148846080
0d5b4     E0 40 B1 FD | 	call	#__system___float_mul
0d5b8     FD 12 02 F6 | 	mov	arg01, result1
0d5bc     01 14 06 F6 | 	mov	arg02, #1
0d5c0     9C 45 B1 FD | 	call	#__system___float_tointeger
0d5c4     1C 4E 05 F1 | 	add	fp, #28
0d5c8     A7 FA 61 FC | 	wrlong	result1, fp
0d5cc     57 00 00 FF 
0d5d0     10 E4 05 F1 | 	add	objptr, ##44560
0d5d4     F2 24 02 FB | 	rdlong	local04, objptr
0d5d8     57 00 00 FF 
0d5dc     10 E4 85 F1 | 	sub	objptr, ##44560
0d5e0     10 4E 85 F1 | 	sub	fp, #16
0d5e4     A7 20 02 FB | 	rdlong	local02, fp
0d5e8     06 20 66 F0 | 	shl	local02, #6
0d5ec     10 25 02 F1 | 	add	local04, local02
0d5f0     04 4E 85 F1 | 	sub	fp, #4
0d5f4     A7 24 62 FC | 	wrlong	local04, fp
0d5f8     5C 4E 05 F1 | 	add	fp, #92
0d5fc     A7 12 02 FB | 	rdlong	arg01, fp
0d600     64 4E 85 F1 | 	sub	fp, #100
0d604     72 3F 20 FF 
0d608     EA 14 06 F6 | 	mov	arg02, ##1082057962
0d60c     88 40 B1 FD | 	call	#__system___float_mul
0d610     FD 12 02 F6 | 	mov	arg01, result1
0d614     01 14 06 F6 | 	mov	arg02, #1
0d618     44 45 B1 FD | 	call	#__system___float_tointeger
0d61c     10 4E 05 F1 | 	add	fp, #16
0d620     A7 FA 61 FC | 	wrlong	result1, fp
0d624                 | ' 
0d624                 | ' speed=round(speed_coeff/slen)
0d624                 | ' ipan=8192+round(8192*pan)
0d624                 | ' ivol=round(1000.0*vol)
0d624                 | ' base2=base+64*channel
0d624                 | ' skip=round(freq*3.9827219) 
0d624                 | ' if wave <8 then 
0d624     10 4E 05 F1 | 	add	fp, #16
0d628     A7 24 02 FB | 	rdlong	local04, fp
0d62c     20 4E 85 F1 | 	sub	fp, #32
0d630     08 24 56 F2 | 	cmps	local04, #8 wc
0d634     40 00 90 3D |  if_ae	jmp	#LR__1067
0d638     08 4E 05 F1 | 	add	fp, #8
0d63c     A7 12 02 FB | 	rdlong	arg01, fp
0d640     08 12 06 F1 | 	add	arg01, #8
0d644     18 4E 05 F1 | 	add	fp, #24
0d648     A7 14 02 FB | 	rdlong	arg02, fp
0d64c     20 4E 85 F1 | 	sub	fp, #32
0d650     0B 14 66 F0 | 	shl	arg02, #11
0d654     0C 00 00 FF 
0d658     D8 E4 05 F1 | 	add	objptr, ##6360
0d65c     F2 14 02 F1 | 	add	arg02, objptr
0d660     0C 00 00 FF 
0d664     D8 E4 85 F1 | 	sub	objptr, ##6360
0d668     00 00 60 FF 
0d66c     00 14 06 F1 | 	add	arg02, ##-1073741824
0d670     09 15 62 FC | 	wrlong	arg02, arg01
0d674     18 00 90 FD | 	jmp	#LR__1068
0d678                 | LR__1067
0d678     08 4E 05 F1 | 	add	fp, #8
0d67c     A7 12 02 FB | 	rdlong	arg01, fp
0d680     08 4E 85 F1 | 	sub	fp, #8
0d684     08 12 06 F1 | 	add	arg01, #8
0d688     00 00 E4 FF 
0d68c     09 01 68 FC | 	wrlong	##-939524096, arg01
0d690                 | LR__1068
0d690     08 4E 05 F1 | 	add	fp, #8
0d694     A7 12 02 FB | 	rdlong	arg01, fp
0d698     10 12 06 F1 | 	add	arg01, #16
0d69c     04 00 80 FF 
0d6a0     09 01 68 FC | 	wrlong	##2048, arg01
0d6a4     A7 12 02 FB | 	rdlong	arg01, fp
0d6a8     0C 12 06 F1 | 	add	arg01, #12
0d6ac     09 01 68 FC | 	wrlong	#0, arg01
0d6b0     A7 12 02 FB | 	rdlong	arg01, fp
0d6b4     14 12 06 F1 | 	add	arg01, #20
0d6b8     14 4E 05 F1 | 	add	fp, #20
0d6bc     A7 14 02 FB | 	rdlong	arg02, fp
0d6c0     09 15 52 FC | 	wrword	arg02, arg01
0d6c4     14 4E 85 F1 | 	sub	fp, #20
0d6c8     A7 12 02 FB | 	rdlong	arg01, fp
0d6cc     16 12 06 F1 | 	add	arg01, #22
0d6d0     10 4E 05 F1 | 	add	fp, #16
0d6d4     A7 14 02 FB | 	rdlong	arg02, fp
0d6d8     09 15 52 FC | 	wrword	arg02, arg01
0d6dc                 | '   
0d6dc                 | ' lpoke base2+16,2048
0d6dc                 | ' lpoke base2+12,0
0d6dc                 | ' dpoke base2+20,ivol 
0d6dc                 | ' dpoke base2+22,ipan 
0d6dc                 | ' if wave<8 then
0d6dc     08 4E 05 F1 | 	add	fp, #8
0d6e0     A7 24 02 FB | 	rdlong	local04, fp
0d6e4     20 4E 85 F1 | 	sub	fp, #32
0d6e8     08 24 56 F2 | 	cmps	local04, #8 wc
0d6ec     2C 00 90 3D |  if_ae	jmp	#LR__1069
0d6f0     08 4E 05 F1 | 	add	fp, #8
0d6f4     A7 12 02 FB | 	rdlong	arg01, fp
0d6f8     18 12 06 F1 | 	add	arg01, #24
0d6fc     09 29 58 FC | 	wrword	#20, arg01
0d700     A7 12 02 FB | 	rdlong	arg01, fp
0d704     1A 12 06 F1 | 	add	arg01, #26
0d708     08 4E 05 F1 | 	add	fp, #8
0d70c     A7 14 02 FB | 	rdlong	arg02, fp
0d710     10 4E 85 F1 | 	sub	fp, #16
0d714     09 15 52 FC | 	wrword	arg02, arg01
0d718     48 00 90 FD | 	jmp	#LR__1070
0d71c                 | LR__1069
0d71c     08 4E 05 F1 | 	add	fp, #8
0d720     A7 24 02 FB | 	rdlong	local04, fp
0d724     18 24 06 F1 | 	add	local04, #24
0d728     5C 4E 05 F1 | 	add	fp, #92
0d72c     A7 14 02 FB | 	rdlong	arg02, fp
0d730     64 4E 85 F1 | 	sub	fp, #100
0d734     58 D0 24 FF 
0d738     B0 13 06 F6 | 	mov	arg01, ##1235268016
0d73c     5C 41 B1 FD | 	call	#__system___float_div
0d740     FD 12 02 F6 | 	mov	arg01, result1
0d744     01 14 06 F6 | 	mov	arg02, #1
0d748     14 44 B1 FD | 	call	#__system___float_tointeger
0d74c     12 FB 51 FC | 	wrword	result1, local04
0d750     08 4E 05 F1 | 	add	fp, #8
0d754     A7 12 02 FB | 	rdlong	arg01, fp
0d758     08 4E 85 F1 | 	sub	fp, #8
0d75c     1A 12 06 F1 | 	add	arg01, #26
0d760     09 01 5A FC | 	wrword	#256, arg01
0d764                 | LR__1070
0d764     08 4E 05 F1 | 	add	fp, #8
0d768     A7 12 02 FB | 	rdlong	arg01, fp
0d76c     20 12 06 F1 | 	add	arg01, #32
0d770     09 01 68 FC | 	wrlong	#0, arg01
0d774                 | ' 'dpoke base2+28,$4000_0000
0d774                 | ' lpoke base2+32,0 
0d774                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
0d774     1C 4E 05 F1 | 	add	fp, #28
0d778     A7 24 02 FB | 	rdlong	local04, fp
0d77c     24 4E 85 F1 | 	sub	fp, #36
0d780     08 24 0E F2 | 	cmp	local04, #8 wz
0d784     18 00 90 5D |  if_ne	jmp	#LR__1071
0d788     08 4E 05 F1 | 	add	fp, #8
0d78c     A7 12 02 FB | 	rdlong	arg01, fp
0d790     08 4E 85 F1 | 	sub	fp, #8
0d794     24 12 06 F1 | 	add	arg01, #36
0d798     09 01 68 FC | 	wrlong	#0, arg01
0d79c     34 00 90 FD | 	jmp	#LR__1072
0d7a0                 | LR__1071
0d7a0     08 4E 05 F1 | 	add	fp, #8
0d7a4     A7 12 02 FB | 	rdlong	arg01, fp
0d7a8     24 12 06 F1 | 	add	arg01, #36
0d7ac     1C 4E 05 F1 | 	add	fp, #28
0d7b0     A7 14 02 FB | 	rdlong	arg02, fp
0d7b4     24 4E 85 F1 | 	sub	fp, #36
0d7b8     09 14 66 F0 | 	shl	arg02, #9
0d7bc     2C 00 00 FF 
0d7c0     D8 E4 05 F1 | 	add	objptr, ##22744
0d7c4     F2 14 02 F1 | 	add	arg02, objptr
0d7c8     2C 00 00 FF 
0d7cc     D8 E4 85 F1 | 	sub	objptr, ##22744
0d7d0     09 15 62 FC | 	wrlong	arg02, arg01
0d7d4                 | LR__1072
0d7d4     08 4E 05 F1 | 	add	fp, #8
0d7d8     A7 12 02 FB | 	rdlong	arg01, fp
0d7dc     28 12 06 F1 | 	add	arg01, #40
0d7e0     0C 4E 05 F1 | 	add	fp, #12
0d7e4     A7 14 02 FB | 	rdlong	arg02, fp
0d7e8     09 15 62 FC | 	wrlong	arg02, arg01
0d7ec     0C 4E 85 F1 | 	sub	fp, #12
0d7f0     A7 12 02 FB | 	rdlong	arg01, fp
0d7f4     2C 12 06 F1 | 	add	arg01, #44
0d7f8     24 4E 05 F1 | 	add	fp, #36
0d7fc     A7 14 02 FB | 	rdlong	arg02, fp
0d800     09 15 62 FC | 	wrlong	arg02, arg01
0d804                 | ' lpoke base2+40,speed' speed
0d804                 | ' lpoke base2+44,sus 'len
0d804                 | ' 
0d804                 | ' if delay>0 then waitms(delay) ' : print "wait "; round(params(6)) : l
0d804     04 4E 85 F1 | 	sub	fp, #4
0d808     A7 24 02 FB | 	rdlong	local04, fp
0d80c     28 4E 85 F1 | 	sub	fp, #40
0d810     01 24 56 F2 | 	cmps	local04, #1 wc
0d814     28 4E 05 31 |  if_ae	add	fp, #40
0d818     A7 12 02 3B |  if_ae	rdlong	arg01, fp
0d81c     28 4E 85 31 |  if_ae	sub	fp, #40
0d820     E8 15 B1 3D |  if_ae	call	#__system___waitms
0d824     A7 F0 03 F6 | 	mov	ptra, fp
0d828     B2 00 A0 FD | 	call	#popregs_
0d82c                 | _do_play_ret
0d82c     2D 00 64 FD | 	ret
0d830                 | 
0d830                 | ' 
0d830                 | ' sub do_release
0d830                 | _do_release
0d830     00 4A 05 F6 | 	mov	COUNT_, #0
0d834     A8 00 A0 FD | 	call	#pushregs_
0d838     10 F0 07 F1 | 	add	ptra, #16
0d83c     20 D0 BF FD | 	call	#_pop
0d840     FF 14 02 F6 | 	mov	arg02, result3
0d844     A7 FA 61 FC | 	wrlong	result1, fp
0d848     04 4E 05 F1 | 	add	fp, #4
0d84c     A7 FC 61 FC | 	wrlong	result2, fp
0d850     04 4E 05 F1 | 	add	fp, #4
0d854     A7 14 62 FC | 	wrlong	arg02, fp
0d858     08 4E 85 F1 | 	sub	fp, #8
0d85c     A7 12 02 F6 | 	mov	arg01, fp
0d860     54 5C B0 FD | 	call	#_converttoint
0d864     0C 4E 05 F1 | 	add	fp, #12
0d868     A7 FA 61 FC | 	wrlong	result1, fp
0d86c                 | ' t1=pop()
0d86c                 | ' channel=converttoint(t1)
0d86c                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255 ' else printerror
0d86c     0C 4E 85 F1 | 	sub	fp, #12
0d870     00 FA 55 F2 | 	cmps	result1, #0 wc
0d874     44 00 90 CD |  if_b	jmp	#LR__1080
0d878     0C 4E 05 F1 | 	add	fp, #12
0d87c     A7 14 02 FB | 	rdlong	arg02, fp
0d880     0C 4E 85 F1 | 	sub	fp, #12
0d884     08 14 56 F2 | 	cmps	arg02, #8 wc
0d888     30 00 90 3D |  if_ae	jmp	#LR__1080
0d88c     57 00 00 FF 
0d890     10 E4 05 F1 | 	add	objptr, ##44560
0d894     F2 12 02 FB | 	rdlong	arg01, objptr
0d898     57 00 00 FF 
0d89c     10 E4 85 F1 | 	sub	objptr, ##44560
0d8a0     0C 4E 05 F1 | 	add	fp, #12
0d8a4     A7 14 02 FB | 	rdlong	arg02, fp
0d8a8     0C 4E 85 F1 | 	sub	fp, #12
0d8ac     06 14 66 F0 | 	shl	arg02, #6
0d8b0     0A 13 02 F1 | 	add	arg01, arg02
0d8b4     2C 12 06 F1 | 	add	arg01, #44
0d8b8     09 FF 69 FC | 	wrlong	#255, arg01
0d8bc                 | LR__1080
0d8bc     A7 F0 03 F6 | 	mov	ptra, fp
0d8c0     B2 00 A0 FD | 	call	#popregs_
0d8c4                 | _do_release_ret
0d8c4     2D 00 64 FD | 	ret
0d8c8                 | 
0d8c8                 | ' 
0d8c8                 | ' 
0d8c8                 | ' sub do_defsnd
0d8c8                 | _do_defsnd
0d8c8     05 4A 05 F6 | 	mov	COUNT_, #5
0d8cc     A8 00 A0 FD | 	call	#pushregs_
0d8d0     88 F0 07 F1 | 	add	ptra, #136
0d8d4     6A 00 00 FF 
0d8d8     80 E4 05 F1 | 	add	objptr, ##54400
0d8dc     F2 1A 02 FB | 	rdlong	arg05, objptr
0d8e0     0D 19 02 F6 | 	mov	arg04, arg05
0d8e4     01 18 66 F0 | 	shl	arg04, #1
0d8e8     0D 19 02 F1 | 	add	arg04, arg05
0d8ec     02 18 66 F0 | 	shl	arg04, #2
0d8f0     03 00 00 FF 
0d8f4     04 E4 85 F1 | 	sub	objptr, ##1540
0d8f8     F2 18 02 F1 | 	add	arg04, objptr
0d8fc     0C 1B 02 FB | 	rdlong	arg05, arg04
0d900     A7 1A 62 FC | 	wrlong	arg05, fp
0d904                 | ' 
0d904                 | ' numpar=compiledline(lineptr_e).result.uresult
0d904                 | ' 
0d904                 | ' 
0d904                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0d904                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0d904                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0d904                 | ' ' defsnd channel, oneint - loads the wave from the pointer
0d904                 | ' 
0d904                 | ' if numpar<2 then return
0d904     02 1A 56 F2 | 	cmps	arg05, #2 wc
0d908     67 00 00 FF 
0d90c     7C E4 85 F1 | 	sub	objptr, ##52860
0d910     A0 09 90 CD |  if_b	jmp	#LR__1118
0d914                 | ' 
0d914                 | '   
0d914                 | ' if numpar=2 then
0d914     A7 1A 02 FB | 	rdlong	arg05, fp
0d918     02 1A 0E F2 | 	cmp	arg05, #2 wz
0d91c     0C 04 90 5D |  if_ne	jmp	#LR__1101
0d920     3C CF BF FD | 	call	#_pop
0d924     FF 1A 02 F6 | 	mov	arg05, result3
0d928     2C 4E 05 F1 | 	add	fp, #44
0d92c     A7 FA 61 FC | 	wrlong	result1, fp
0d930     04 4E 05 F1 | 	add	fp, #4
0d934     A7 FC 61 FC | 	wrlong	result2, fp
0d938     04 4E 05 F1 | 	add	fp, #4
0d93c     A7 1A 62 FC | 	wrlong	arg05, fp
0d940                 | '   t1=pop()
0d940                 | '   if t1.result_type=result_string2 then 
0d940     34 4E 85 F1 | 	sub	fp, #52
0d944     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0d948     20 00 90 5D |  if_ne	jmp	#LR__1090
0d94c     2C 4E 05 F1 | 	add	fp, #44
0d950     A7 12 02 FB | 	rdlong	arg01, fp
0d954     2C 4E 85 F1 | 	sub	fp, #44
0d958     38 13 B0 FD | 	call	#_convertstring
0d95c     38 4E 05 F1 | 	add	fp, #56
0d960     A7 FA 61 FC | 	wrlong	result1, fp
0d964     38 4E 85 F1 | 	sub	fp, #56
0d968     58 00 90 FD | 	jmp	#LR__1093
0d96c                 | LR__1090
0d96c     34 4E 05 F1 | 	add	fp, #52
0d970     A7 1A 02 FB | 	rdlong	arg05, fp
0d974     34 4E 85 F1 | 	sub	fp, #52
0d978     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0d97c     18 00 90 5D |  if_ne	jmp	#LR__1091
0d980     2C 4E 05 F1 | 	add	fp, #44
0d984     A7 1A 02 FB | 	rdlong	arg05, fp
0d988     0C 4E 05 F1 | 	add	fp, #12
0d98c     A7 1A 62 FC | 	wrlong	arg05, fp
0d990     38 4E 85 F1 | 	sub	fp, #56
0d994     2C 00 90 FD | 	jmp	#LR__1092
0d998                 | LR__1091
0d998     73 01 00 FF 
0d99c     3D 1B 06 F6 | 	mov	arg05, ##@LR__5141
0d9a0     38 4E 05 F1 | 	add	fp, #56
0d9a4     A7 1A 62 FC | 	wrlong	arg05, fp
0d9a8     0C 4E 85 F1 | 	sub	fp, #12
0d9ac     A7 12 02 F6 | 	mov	arg01, fp
0d9b0     2C 4E 85 F1 | 	sub	fp, #44
0d9b4     00 5B B0 FD | 	call	#_converttoint
0d9b8     14 4E 05 F1 | 	add	fp, #20
0d9bc     A7 FA 61 FC | 	wrlong	result1, fp
0d9c0     14 4E 85 F1 | 	sub	fp, #20
0d9c4                 | LR__1092
0d9c4                 | LR__1093
0d9c4                 | ' 
0d9c4                 | '     
0d9c4                 | '   if s<>"" then 
0d9c4     38 4E 05 F1 | 	add	fp, #56
0d9c8     A7 12 02 FB | 	rdlong	arg01, fp
0d9cc     38 4E 85 F1 | 	sub	fp, #56
0d9d0     73 01 00 FF 
0d9d4     3E 15 06 F6 | 	mov	arg02, ##@LR__5142
0d9d8     64 11 B1 FD | 	call	#__system___string_cmp
0d9dc     00 FA 0D F2 | 	cmp	result1, #0 wz
0d9e0     88 01 90 AD |  if_e	jmp	#LR__1095
0d9e4     78 CE BF FD | 	call	#_pop
0d9e8     FF 1A 02 F6 | 	mov	arg05, result3
0d9ec     2C 4E 05 F1 | 	add	fp, #44
0d9f0     A7 FA 61 FC | 	wrlong	result1, fp
0d9f4     04 4E 05 F1 | 	add	fp, #4
0d9f8     A7 FC 61 FC | 	wrlong	result2, fp
0d9fc     04 4E 05 F1 | 	add	fp, #4
0da00     A7 1A 62 FC | 	wrlong	arg05, fp
0da04     08 4E 85 F1 | 	sub	fp, #8
0da08     A7 12 02 F6 | 	mov	arg01, fp
0da0c     2C 4E 85 F1 | 	sub	fp, #44
0da10     A4 5A B0 FD | 	call	#_converttoint
0da14     10 4E 05 F1 | 	add	fp, #16
0da18     A7 FA 61 FC | 	wrlong	result1, fp
0da1c     10 4E 85 F1 | 	sub	fp, #16
0da20                 | '     t1=pop()
0da20                 | '     channel=converttoint(t1) 
0da20                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0da20     09 12 06 F6 | 	mov	arg01, #9
0da24     B8 60 B1 FD | 	call	#__system__close
0da28     09 1E 06 F6 | 	mov	local01, #9
0da2c     73 01 00 FF 
0da30     3F 13 06 F6 | 	mov	arg01, ##@LR__5143
0da34     38 4E 05 F1 | 	add	fp, #56
0da38     A7 14 02 FB | 	rdlong	arg02, fp
0da3c     38 4E 85 F1 | 	sub	fp, #56
0da40     30 11 B1 FD | 	call	#__system___string_concat
0da44     FD 14 02 F6 | 	mov	arg02, result1
0da48     0F 13 02 F6 | 	mov	arg01, local01
0da4c     00 16 06 F6 | 	mov	arg03, #0
0da50     C8 1C B1 FD | 	call	#__system___basic_open_string
0da54     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0da58     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0da5c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0da60     7A 00 00 FF 
0da64     30 E4 05 F1 | 	add	objptr, ##62512
0da68     F2 FA 61 FC | 	wrlong	result1, objptr
0da6c                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0da6c     7A 00 00 FF 
0da70     30 E4 85 F1 | 	sub	objptr, ##62512
0da74     B0 00 90 AD |  if_e	jmp	#LR__1094
0da78     00 12 06 F6 | 	mov	arg01, #0
0da7c     30 6A B1 FD | 	call	#__system___getiolock_0484
0da80     FD 12 02 F6 | 	mov	arg01, result1
0da84     90 10 B1 FD | 	call	#__system___lockmem
0da88     73 01 00 FF 
0da8c     4C 15 06 F6 | 	mov	arg02, ##@LR__5144
0da90     00 12 06 F6 | 	mov	arg01, #0
0da94     00 16 06 F6 | 	mov	arg03, #0
0da98     84 1D B1 FD | 	call	#__system___basic_print_string
0da9c     7A 00 00 FF 
0daa0     30 E4 05 F1 | 	add	objptr, ##62512
0daa4     F2 14 02 FB | 	rdlong	arg02, objptr
0daa8     7A 00 00 FF 
0daac     30 E4 85 F1 | 	sub	objptr, ##62512
0dab0     00 12 06 F6 | 	mov	arg01, #0
0dab4     00 16 06 F6 | 	mov	arg03, #0
0dab8     0A 18 06 F6 | 	mov	arg04, #10
0dabc     A4 1D B1 FD | 	call	#__system___basic_print_integer
0dac0     73 01 00 FF 
0dac4     5A 15 06 F6 | 	mov	arg02, ##@LR__5145
0dac8     00 12 06 F6 | 	mov	arg01, #0
0dacc     00 16 06 F6 | 	mov	arg03, #0
0dad0     4C 1D B1 FD | 	call	#__system___basic_print_string
0dad4     00 1E 06 F6 | 	mov	local01, #0
0dad8     7A 00 00 FF 
0dadc     30 E4 05 F1 | 	add	objptr, ##62512
0dae0     F2 12 02 FB | 	rdlong	arg01, objptr
0dae4     7A 00 00 FF 
0dae8     30 E4 85 F1 | 	sub	objptr, ##62512
0daec     BC 36 B1 FD | 	call	#__system___strerror
0daf0     FD 14 02 F6 | 	mov	arg02, result1
0daf4     0F 13 02 F6 | 	mov	arg01, local01
0daf8     00 16 06 F6 | 	mov	arg03, #0
0dafc     20 1D B1 FD | 	call	#__system___basic_print_string
0db00     00 12 06 F6 | 	mov	arg01, #0
0db04     0A 14 06 F6 | 	mov	arg02, #10
0db08     00 16 06 F6 | 	mov	arg03, #0
0db0c     B8 1C B1 FD | 	call	#__system___basic_print_char
0db10     00 12 06 F6 | 	mov	arg01, #0
0db14     98 69 B1 FD | 	call	#__system___getiolock_0484
0db18     FD 00 68 FC | 	wrlong	#0, result1
0db1c     09 12 06 F6 | 	mov	arg01, #9
0db20     BC 5F B1 FD | 	call	#__system__close
0db24     8C 07 90 FD | 	jmp	#LR__1118
0db28                 | LR__1094
0db28                 | '     get #9,17,samplebuf(channel,0),1024
0db28     10 4E 05 F1 | 	add	fp, #16
0db2c     A7 16 02 FB | 	rdlong	arg03, fp
0db30     10 4E 85 F1 | 	sub	fp, #16
0db34     0B 16 66 F0 | 	shl	arg03, #11
0db38     0C 00 00 FF 
0db3c     D8 E4 05 F1 | 	add	objptr, ##6360
0db40     F2 16 02 F1 | 	add	arg03, objptr
0db44     09 12 06 F6 | 	mov	arg01, #9
0db48     11 14 06 F6 | 	mov	arg02, #17
0db4c     0A 18 C6 F9 | 	decod	arg04, #10
0db50     02 1A 06 F6 | 	mov	arg05, #2
0db54     0C 00 00 FF 
0db58     D8 E4 85 F1 | 	sub	objptr, ##6360
0db5c     D0 1D B1 FD | 	call	#__system___basic_get
0db60                 | '     close #9
0db60     09 12 06 F6 | 	mov	arg01, #9
0db64     78 5F B1 FD | 	call	#__system__close
0db68                 | '                                                                        'for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0db68                 | '     return
0db68     48 07 90 FD | 	jmp	#LR__1118
0db6c                 | LR__1095
0db6c                 | '     if wptr < ($80000 - 2048) then 
0db6c     14 4E 05 F1 | 	add	fp, #20
0db70     A7 1E 02 FB | 	rdlong	local01, fp
0db74     14 4E 85 F1 | 	sub	fp, #20
0db78     FC 03 00 FF 
0db7c     00 1E 56 F2 | 	cmps	local01, ##522240 wc
0db80     80 00 90 3D |  if_ae	jmp	#LR__1098
0db84                 | '       for i=0 to 1023: samplebuf(channel,i)=dpeek(wptr+2*i): next i
0db84     04 4E 05 F1 | 	add	fp, #4
0db88     A7 00 68 FC | 	wrlong	#0, fp
0db8c     04 4E 85 F1 | 	sub	fp, #4
0db90     0C 00 00 FF 
0db94     D8 E4 05 F1 | 	add	objptr, ##6360
0db98     97 2E 48 FB | 	callpa	#(@LR__1097-@LR__1096)>>2,fcache_load_ptr_
0db9c                 | LR__1096
0db9c     10 4E 05 F1 | 	add	fp, #16
0dba0     A7 1E 02 FB | 	rdlong	local01, fp
0dba4     0B 1E 66 F0 | 	shl	local01, #11
0dba8     F2 1E 02 F1 | 	add	local01, objptr
0dbac     0C 4E 85 F1 | 	sub	fp, #12
0dbb0     A7 1A 02 FB | 	rdlong	arg05, fp
0dbb4     0D 19 02 F6 | 	mov	arg04, arg05
0dbb8     01 18 66 F0 | 	shl	arg04, #1
0dbbc     0F 19 02 F1 | 	add	arg04, local01
0dbc0     10 4E 05 F1 | 	add	fp, #16
0dbc4     A7 12 02 FB | 	rdlong	arg01, fp
0dbc8     01 1A 66 F0 | 	shl	arg05, #1
0dbcc     0D 13 02 F1 | 	add	arg01, arg05
0dbd0     09 FB E1 FA | 	rdword	result1, arg01
0dbd4     0C FB 51 FC | 	wrword	result1, arg04
0dbd8     10 4E 85 F1 | 	sub	fp, #16
0dbdc     A7 1E 02 FB | 	rdlong	local01, fp
0dbe0     01 1E 06 F1 | 	add	local01, #1
0dbe4     A7 1E 62 FC | 	wrlong	local01, fp
0dbe8     04 4E 85 F1 | 	sub	fp, #4
0dbec     02 00 00 FF 
0dbf0     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0dbf4     A4 FF 9F CD |  if_b	jmp	#LR__1096
0dbf8                 | LR__1097
0dbf8     0C 00 00 FF 
0dbfc     D8 E4 85 F1 | 	sub	objptr, ##6360
0dc00     B0 06 90 FD | 	jmp	#LR__1118
0dc04                 | LR__1098
0dc04                 | '       for i=0 to 1023 : samplebuf(channel,i)=psdpeek(wptr+2*i) : next i
0dc04     04 4E 05 F1 | 	add	fp, #4
0dc08     A7 00 68 FC | 	wrlong	#0, fp
0dc0c     04 4E 85 F1 | 	sub	fp, #4
0dc10                 | LR__1099
0dc10     10 4E 05 F1 | 	add	fp, #16
0dc14     A7 1A 02 FB | 	rdlong	arg05, fp
0dc18     0B 1A 66 F0 | 	shl	arg05, #11
0dc1c     0C 00 00 FF 
0dc20     D8 E4 05 F1 | 	add	objptr, ##6360
0dc24     F2 1A 02 F1 | 	add	arg05, objptr
0dc28     0C 4E 85 F1 | 	sub	fp, #12
0dc2c     A7 18 02 FB | 	rdlong	arg04, fp
0dc30     0C 21 02 F6 | 	mov	local02, arg04
0dc34     01 20 66 F0 | 	shl	local02, #1
0dc38     0D 21 02 F1 | 	add	local02, arg05
0dc3c     10 4E 05 F1 | 	add	fp, #16
0dc40     A7 12 02 FB | 	rdlong	arg01, fp
0dc44     14 4E 85 F1 | 	sub	fp, #20
0dc48     01 18 66 F0 | 	shl	arg04, #1
0dc4c     0C 13 02 F1 | 	add	arg01, arg04
0dc50     0C 00 00 FF 
0dc54     D8 E4 85 F1 | 	sub	objptr, ##6360
0dc58     2C CD B0 FD | 	call	#_psdpeek
0dc5c     10 FB 51 FC | 	wrword	result1, local02
0dc60     04 4E 05 F1 | 	add	fp, #4
0dc64     A7 22 02 FB | 	rdlong	local03, fp
0dc68     01 22 06 F1 | 	add	local03, #1
0dc6c     A7 22 62 FC | 	wrlong	local03, fp
0dc70     04 4E 85 F1 | 	sub	fp, #4
0dc74     02 00 00 FF 
0dc78     00 22 56 F2 | 	cmps	local03, ##1024 wc
0dc7c     90 FF 9F CD |  if_b	jmp	#LR__1099
0dc80                 | '     return 
0dc80     30 06 90 FD | 	jmp	#LR__1118
0dc84                 | '   
0dc84                 | '   par=converttoint(t1)  : print par
0dc84                 | '   t1=pop()
0dc84                 | '   channel=converttoint(t1)  
0dc84                 | '   if par=0 then for i=0 to 1023: samplebuf(channel,i)=round(32600*sin(1.0/512*3.14159265359*i)) : next i
0dc84                 | LR__1100
0dc84     10 4E 05 F1 | 	add	fp, #16
0dc88     A7 22 02 FB | 	rdlong	local03, fp
0dc8c     0B 22 66 F0 | 	shl	local03, #11
0dc90     0C 00 00 FF 
0dc94     D8 E4 05 F1 | 	add	objptr, ##6360
0dc98     F2 22 02 F1 | 	add	local03, objptr
0dc9c     0C 4E 85 F1 | 	sub	fp, #12
0dca0     A7 12 02 FB | 	rdlong	arg01, fp
0dca4     09 21 02 F6 | 	mov	local02, arg01
0dca8     01 20 66 F0 | 	shl	local02, #1
0dcac     11 21 02 F1 | 	add	local02, local03
0dcb0     04 4E 85 F1 | 	sub	fp, #4
0dcb4     0C 00 00 FF 
0dcb8     D8 E4 85 F1 | 	sub	objptr, ##6360
0dcbc     09 13 52 F6 | 	abs	arg01, arg01 wc
0dcc0     1F 24 C6 C9 |  if_b	decod	local04, #31
0dcc4     00 24 06 36 |  if_ae	mov	local04, #0
0dcc8     C8 35 B1 FD | 	call	#__system___float_fromuns
0dccc     12 FB 61 F5 | 	xor	result1, local04
0dcd0     FD 14 02 F6 | 	mov	arg02, result1
0dcd4     87 E4 1D FF 
0dcd8     DB 13 06 F6 | 	mov	arg01, ##1003032539
0dcdc     B8 39 B1 FD | 	call	#__system___float_mul
0dce0     FD 12 02 F6 | 	mov	arg01, result1
0dce4     EC 42 B1 FD | 	call	#__system____builtin_sinf
0dce8     FD 14 02 F6 | 	mov	arg02, result1
0dcec     58 7F 23 FF 
0dcf0     00 12 06 F6 | 	mov	arg01, ##1191096320
0dcf4     A0 39 B1 FD | 	call	#__system___float_mul
0dcf8     FD 12 02 F6 | 	mov	arg01, result1
0dcfc     01 14 06 F6 | 	mov	arg02, #1
0dd00     5C 3E B1 FD | 	call	#__system___float_tointeger
0dd04     10 FB 51 FC | 	wrword	result1, local02
0dd08     04 4E 05 F1 | 	add	fp, #4
0dd0c     A7 22 02 FB | 	rdlong	local03, fp
0dd10     01 22 06 F1 | 	add	local03, #1
0dd14     A7 22 62 FC | 	wrlong	local03, fp
0dd18     04 4E 85 F1 | 	sub	fp, #4
0dd1c     02 00 00 FF 
0dd20     00 22 56 F2 | 	cmps	local03, ##1024 wc
0dd24     5C FF 9F CD |  if_b	jmp	#LR__1100
0dd28                 | '                                                                            '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0dd28                 | '   return
0dd28     88 05 90 FD | 	jmp	#LR__1118
0dd2c                 | LR__1101
0dd2c                 | ' for i=0 to 15 : harm(i)=0: next i  
0dd2c     04 4E 05 F1 | 	add	fp, #4
0dd30     A7 00 68 FC | 	wrlong	#0, fp
0dd34     97 16 48 FB | 	callpa	#(@LR__1103-@LR__1102)>>2,fcache_load_ptr_
0dd38                 | LR__1102
0dd38     A7 22 02 FB | 	rdlong	local03, fp
0dd3c     02 22 66 F0 | 	shl	local03, #2
0dd40     38 4E 05 F1 | 	add	fp, #56
0dd44     A7 22 02 F1 | 	add	local03, fp
0dd48     11 01 68 FC | 	wrlong	#0, local03
0dd4c     38 4E 85 F1 | 	sub	fp, #56
0dd50     A7 22 02 FB | 	rdlong	local03, fp
0dd54     01 22 06 F1 | 	add	local03, #1
0dd58     A7 22 62 FC | 	wrlong	local03, fp
0dd5c     10 22 56 F2 | 	cmps	local03, #16 wc
0dd60     D4 FF 9F CD |  if_b	jmp	#LR__1102
0dd64                 | LR__1103
0dd64     04 4E 85 F1 | 	sub	fp, #4
0dd68                 | ' for i=numpar to 2 step -1 
0dd68     A7 1E 02 FB | 	rdlong	local01, fp
0dd6c     04 4E 05 F1 | 	add	fp, #4
0dd70     A7 1E 62 FC | 	wrlong	local01, fp
0dd74     04 4E 85 F1 | 	sub	fp, #4
0dd78                 | LR__1104
0dd78     E4 CA BF FD | 	call	#_pop
0dd7c     2C 4E 05 F1 | 	add	fp, #44
0dd80     A7 FA 61 FC | 	wrlong	result1, fp
0dd84     04 4E 05 F1 | 	add	fp, #4
0dd88     A7 FC 61 FC | 	wrlong	result2, fp
0dd8c     04 4E 05 F1 | 	add	fp, #4
0dd90     A7 FE 61 FC | 	wrlong	result3, fp
0dd94     30 4E 85 F1 | 	sub	fp, #48
0dd98     A7 22 02 FB | 	rdlong	local03, fp
0dd9c     02 22 86 F1 | 	sub	local03, #2
0dda0     02 22 66 F0 | 	shl	local03, #2
0dda4     38 4E 05 F1 | 	add	fp, #56
0dda8     A7 22 02 F1 | 	add	local03, fp
0ddac     10 4E 85 F1 | 	sub	fp, #16
0ddb0     A7 12 02 F6 | 	mov	arg01, fp
0ddb4     2C 4E 85 F1 | 	sub	fp, #44
0ddb8     A8 57 B0 FD | 	call	#_converttofloat
0ddbc     11 FB 61 FC | 	wrlong	result1, local03
0ddc0     04 4E 05 F1 | 	add	fp, #4
0ddc4     A7 22 02 FB | 	rdlong	local03, fp
0ddc8     01 22 86 F1 | 	sub	local03, #1
0ddcc     A7 22 62 FC | 	wrlong	local03, fp
0ddd0     04 4E 85 F1 | 	sub	fp, #4
0ddd4     02 22 56 F2 | 	cmps	local03, #2 wc
0ddd8     9C FF 9F 3D |  if_ae	jmp	#LR__1104
0dddc     80 CA BF FD | 	call	#_pop
0dde0     FF 1E 02 F6 | 	mov	local01, result3
0dde4     2C 4E 05 F1 | 	add	fp, #44
0dde8     A7 FA 61 FC | 	wrlong	result1, fp
0ddec     04 4E 05 F1 | 	add	fp, #4
0ddf0     A7 FC 61 FC | 	wrlong	result2, fp
0ddf4     04 4E 05 F1 | 	add	fp, #4
0ddf8     A7 1E 62 FC | 	wrlong	local01, fp
0ddfc     08 4E 85 F1 | 	sub	fp, #8
0de00     A7 12 02 F6 | 	mov	arg01, fp
0de04     2C 4E 85 F1 | 	sub	fp, #44
0de08     AC 56 B0 FD | 	call	#_converttoint
0de0c     FD 1E 02 F6 | 	mov	local01, result1
0de10     10 4E 05 F1 | 	add	fp, #16
0de14     A7 1E 62 FC | 	wrlong	local01, fp
0de18     10 4E 85 F1 | 	sub	fp, #16
0de1c                 | ' t1=pop()
0de1c                 | ' channel=converttoint(t1) : print channel
0de1c     00 12 06 F6 | 	mov	arg01, #0
0de20     8C 66 B1 FD | 	call	#__system___getiolock_0484
0de24     FD 12 02 F6 | 	mov	arg01, result1
0de28     EC 0C B1 FD | 	call	#__system___lockmem
0de2c     10 4E 05 F1 | 	add	fp, #16
0de30     A7 14 02 FB | 	rdlong	arg02, fp
0de34     10 4E 85 F1 | 	sub	fp, #16
0de38     00 12 06 F6 | 	mov	arg01, #0
0de3c     00 16 06 F6 | 	mov	arg03, #0
0de40     0A 18 06 F6 | 	mov	arg04, #10
0de44     1C 1A B1 FD | 	call	#__system___basic_print_integer
0de48     00 12 06 F6 | 	mov	arg01, #0
0de4c     0A 14 06 F6 | 	mov	arg02, #10
0de50     00 16 06 F6 | 	mov	arg03, #0
0de54     70 19 B1 FD | 	call	#__system___basic_print_char
0de58     00 12 06 F6 | 	mov	arg01, #0
0de5c     50 66 B1 FD | 	call	#__system___getiolock_0484
0de60     FD 00 68 FC | 	wrlong	#0, result1
0de64                 | ' for j=0 to 1023: samplebuf(channel, i) =0 : next j
0de64     08 4E 05 F1 | 	add	fp, #8
0de68     02 00 80 FF 
0de6c     A7 00 68 FC | 	wrlong	##1024, fp
0de70     08 4E 85 F1 | 	sub	fp, #8
0de74     0C 00 00 FF 
0de78     D8 E4 05 F1 | 	add	objptr, ##6360
0de7c     97 18 48 FB | 	callpa	#(@LR__1107-@LR__1105)>>2,fcache_load_ptr_
0de80                 | LR__1105
0de80     02 00 00 FF 
0de84     00 14 DC FC | 	rep	@LR__1108, ##1024
0de88                 | LR__1106
0de88     10 4E 05 F1 | 	add	fp, #16
0de8c     A7 20 02 FB | 	rdlong	local02, fp
0de90     0B 20 66 F0 | 	shl	local02, #11
0de94     F2 20 02 F1 | 	add	local02, objptr
0de98     0C 4E 85 F1 | 	sub	fp, #12
0de9c     A7 22 02 FB | 	rdlong	local03, fp
0dea0     04 4E 85 F1 | 	sub	fp, #4
0dea4     01 22 66 F0 | 	shl	local03, #1
0dea8     10 23 02 F1 | 	add	local03, local02
0deac     11 01 58 FC | 	wrword	#0, local03
0deb0                 | LR__1107
0deb0                 | LR__1108
0deb0     0C 00 00 FF 
0deb4     D8 E4 85 F1 | 	sub	objptr, ##6360
0deb8     20 4E 05 F1 | 	add	fp, #32
0debc     A7 00 68 FC | 	wrlong	#0, fp
0dec0                 | ' max=0
0dec0                 | ' if harm(0)<0 then
0dec0     1C 4E 05 F1 | 	add	fp, #28
0dec4     A7 12 02 FB | 	rdlong	arg01, fp
0dec8     3C 4E 85 F1 | 	sub	fp, #60
0decc     00 14 06 F6 | 	mov	arg02, #0
0ded0     01 16 06 F6 | 	mov	arg03, #1
0ded4     F4 3B B1 FD | 	call	#__system___float_cmp
0ded8     00 FA 55 F2 | 	cmps	result1, #0 wc
0dedc     04 01 90 3D |  if_ae	jmp	#LR__1111
0dee0     3C 4E 05 F1 | 	add	fp, #60
0dee4     A7 FA 01 FB | 	rdlong	result1, fp
0dee8     1F FA 05 F4 | 	bitl	result1, #31
0deec     24 4E 85 F1 | 	sub	fp, #36
0def0     A7 FA 61 FC | 	wrlong	result1, fp
0def4     28 4E 05 F1 | 	add	fp, #40
0def8     A7 FA 01 FB | 	rdlong	result1, fp
0defc     1F FA 05 F4 | 	bitl	result1, #31
0df00     24 4E 85 F1 | 	sub	fp, #36
0df04     A7 FA 61 FC | 	wrlong	result1, fp
0df08     20 4E 05 F1 | 	add	fp, #32
0df0c     00 C0 9F FF 
0df10     A7 00 68 FC | 	wrlong	##1065353216, fp
0df14     24 4E 85 F1 | 	sub	fp, #36
0df18     A7 1E 02 FB | 	rdlong	local01, fp
0df1c     28 4E 05 F1 | 	add	fp, #40
0df20     A7 1E 62 FC | 	wrlong	local01, fp
0df24     24 4E 85 F1 | 	sub	fp, #36
0df28     A7 1E 02 FB | 	rdlong	local01, fp
0df2c     28 4E 05 F1 | 	add	fp, #40
0df30     A7 1E 62 FC | 	wrlong	local01, fp
0df34                 | '   harm(0)=1
0df34                 | '   harm(1)=even
0df34                 | '   harm(2)=odd
0df34                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0df34     40 4E 85 F1 | 	sub	fp, #64
0df38     A7 06 68 FC | 	wrlong	#3, fp
0df3c                 | LR__1109
0df3c     A7 22 02 FB | 	rdlong	local03, fp
0df40     11 27 02 F6 | 	mov	local05, local03
0df44     02 26 66 F0 | 	shl	local05, #2
0df48     38 4E 05 F1 | 	add	fp, #56
0df4c     A7 26 02 F1 | 	add	local05, fp
0df50     02 22 86 F1 | 	sub	local03, #2
0df54     02 22 66 F0 | 	shl	local03, #2
0df58     A7 22 02 F1 | 	add	local03, fp
0df5c     11 13 02 FB | 	rdlong	arg01, local03
0df60     24 4E 85 F1 | 	sub	fp, #36
0df64     A7 14 02 FB | 	rdlong	arg02, fp
0df68     18 4E 85 F1 | 	sub	fp, #24
0df6c     28 37 B1 FD | 	call	#__system___float_mul
0df70     13 FB 61 FC | 	wrlong	result1, local05
0df74     04 4E 05 F1 | 	add	fp, #4
0df78     A7 22 02 FB | 	rdlong	local03, fp
0df7c     02 22 06 F1 | 	add	local03, #2
0df80     A7 22 62 FC | 	wrlong	local03, fp
0df84     10 22 56 F2 | 	cmps	local03, #16 wc
0df88     B0 FF 9F CD |  if_b	jmp	#LR__1109
0df8c                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0df8c     A7 08 68 FC | 	wrlong	#4, fp
0df90                 | LR__1110
0df90     A7 22 02 FB | 	rdlong	local03, fp
0df94     11 27 02 F6 | 	mov	local05, local03
0df98     02 26 66 F0 | 	shl	local05, #2
0df9c     38 4E 05 F1 | 	add	fp, #56
0dfa0     A7 26 02 F1 | 	add	local05, fp
0dfa4     02 22 86 F1 | 	sub	local03, #2
0dfa8     02 22 66 F0 | 	shl	local03, #2
0dfac     A7 22 02 F1 | 	add	local03, fp
0dfb0     11 13 02 FB | 	rdlong	arg01, local03
0dfb4     20 4E 85 F1 | 	sub	fp, #32
0dfb8     A7 14 02 FB | 	rdlong	arg02, fp
0dfbc     1C 4E 85 F1 | 	sub	fp, #28
0dfc0     D4 36 B1 FD | 	call	#__system___float_mul
0dfc4     13 FB 61 FC | 	wrlong	result1, local05
0dfc8     04 4E 05 F1 | 	add	fp, #4
0dfcc     A7 22 02 FB | 	rdlong	local03, fp
0dfd0     02 22 06 F1 | 	add	local03, #2
0dfd4     A7 22 62 FC | 	wrlong	local03, fp
0dfd8     0F 22 56 F2 | 	cmps	local03, #15 wc
0dfdc     B0 FF 9F CD |  if_b	jmp	#LR__1110
0dfe0     04 4E 85 F1 | 	sub	fp, #4
0dfe4                 | LR__1111
0dfe4                 | ' if harm(0)>=0 then ' synthesize with harmonics
0dfe4     3C 4E 05 F1 | 	add	fp, #60
0dfe8     A7 12 02 FB | 	rdlong	arg01, fp
0dfec     3C 4E 85 F1 | 	sub	fp, #60
0dff0     00 14 06 F6 | 	mov	arg02, #0
0dff4     01 16 66 F6 | 	neg	arg03, #1
0dff8     D0 3A B1 FD | 	call	#__system___float_cmp
0dffc     00 FA 55 F2 | 	cmps	result1, #0 wc
0e000     B0 02 90 CD |  if_b	jmp	#LR__1117
0e004                 | '   for i=0 to 1023
0e004     04 4E 05 F1 | 	add	fp, #4
0e008     A7 00 68 FC | 	wrlong	#0, fp
0e00c     04 4E 85 F1 | 	sub	fp, #4
0e010                 | LR__1112
0e010     24 4E 05 F1 | 	add	fp, #36
0e014     A7 00 68 FC | 	wrlong	#0, fp
0e018                 | '     spl=0
0e018                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0e018     1C 4E 85 F1 | 	sub	fp, #28
0e01c     A7 00 68 FC | 	wrlong	#0, fp
0e020                 | LR__1113
0e020     A7 26 02 FB | 	rdlong	local05, fp
0e024     02 26 66 F0 | 	shl	local05, #2
0e028     34 4E 05 F1 | 	add	fp, #52
0e02c     A7 26 02 F1 | 	add	local05, fp
0e030     13 23 02 FB | 	rdlong	local03, local05
0e034     87 E4 1D FF 
0e038     DB 27 06 F6 | 	mov	local05, ##1003032539
0e03c     38 4E 85 F1 | 	sub	fp, #56
0e040     A7 12 02 FB | 	rdlong	arg01, fp
0e044     04 4E 85 F1 | 	sub	fp, #4
0e048     09 13 52 F6 | 	abs	arg01, arg01 wc
0e04c     1F 24 C6 C9 |  if_b	decod	local04, #31
0e050     00 24 06 36 |  if_ae	mov	local04, #0
0e054     3C 32 B1 FD | 	call	#__system___float_fromuns
0e058     12 FB 61 F5 | 	xor	result1, local04
0e05c     FD 14 02 F6 | 	mov	arg02, result1
0e060     13 13 02 F6 | 	mov	arg01, local05
0e064     30 36 B1 FD | 	call	#__system___float_mul
0e068     FD 26 02 F6 | 	mov	local05, result1
0e06c     08 4E 05 F1 | 	add	fp, #8
0e070     A7 12 02 FB | 	rdlong	arg01, fp
0e074     08 4E 85 F1 | 	sub	fp, #8
0e078     01 12 06 F1 | 	add	arg01, #1
0e07c     09 13 52 F6 | 	abs	arg01, arg01 wc
0e080     1F 24 C6 C9 |  if_b	decod	local04, #31
0e084     00 24 06 36 |  if_ae	mov	local04, #0
0e088     08 32 B1 FD | 	call	#__system___float_fromuns
0e08c     12 FB 61 F5 | 	xor	result1, local04
0e090     FD 14 02 F6 | 	mov	arg02, result1
0e094     13 13 02 F6 | 	mov	arg01, local05
0e098     FC 35 B1 FD | 	call	#__system___float_mul
0e09c     FD 12 02 F6 | 	mov	arg01, result1
0e0a0     30 3F B1 FD | 	call	#__system____builtin_sinf
0e0a4     FD 14 02 F6 | 	mov	arg02, result1
0e0a8     11 13 02 F6 | 	mov	arg01, local03
0e0ac     E8 35 B1 FD | 	call	#__system___float_mul
0e0b0     FD 14 02 F6 | 	mov	arg02, result1
0e0b4     24 4E 05 F1 | 	add	fp, #36
0e0b8     A7 12 02 FB | 	rdlong	arg01, fp
0e0bc     24 4E 85 F1 | 	sub	fp, #36
0e0c0     04 32 B1 FD | 	call	#__system___float_add
0e0c4     24 4E 05 F1 | 	add	fp, #36
0e0c8     A7 FA 61 FC | 	wrlong	result1, fp
0e0cc     1C 4E 85 F1 | 	sub	fp, #28
0e0d0     A7 16 02 FB | 	rdlong	arg03, fp
0e0d4     01 16 06 F1 | 	add	arg03, #1
0e0d8     A7 16 62 FC | 	wrlong	arg03, fp
0e0dc     10 16 56 F2 | 	cmps	arg03, #16 wc
0e0e0     3C FF 9F CD |  if_b	jmp	#LR__1113
0e0e4                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0e0e4     1C 4E 05 F1 | 	add	fp, #28
0e0e8     A7 12 02 FB | 	rdlong	arg01, fp
0e0ec     1F 12 06 F4 | 	bitl	arg01, #31
0e0f0     04 4E 85 F1 | 	sub	fp, #4
0e0f4     A7 14 02 FB | 	rdlong	arg02, fp
0e0f8     20 4E 85 F1 | 	sub	fp, #32
0e0fc     01 16 66 F6 | 	neg	arg03, #1
0e100     C8 39 B1 FD | 	call	#__system___float_cmp
0e104     01 FA 55 F2 | 	cmps	result1, #1 wc
0e108     18 00 90 CD |  if_b	jmp	#LR__1114
0e10c     24 4E 05 F1 | 	add	fp, #36
0e110     A7 FA 01 FB | 	rdlong	result1, fp
0e114     1F FA 05 F4 | 	bitl	result1, #31
0e118     04 4E 85 F1 | 	sub	fp, #4
0e11c     A7 FA 61 FC | 	wrlong	result1, fp
0e120     20 4E 85 F1 | 	sub	fp, #32
0e124                 | LR__1114
0e124     04 4E 05 F1 | 	add	fp, #4
0e128     A7 22 02 FB | 	rdlong	local03, fp
0e12c     01 22 06 F1 | 	add	local03, #1
0e130     A7 22 62 FC | 	wrlong	local03, fp
0e134     04 4E 85 F1 | 	sub	fp, #4
0e138     02 00 00 FF 
0e13c     00 22 56 F2 | 	cmps	local03, ##1024 wc
0e140     CC FE 9F CD |  if_b	jmp	#LR__1112
0e144                 | '   for i=0 to 1023
0e144     04 4E 05 F1 | 	add	fp, #4
0e148     A7 00 68 FC | 	wrlong	#0, fp
0e14c     04 4E 85 F1 | 	sub	fp, #4
0e150                 | LR__1115
0e150     24 4E 05 F1 | 	add	fp, #36
0e154     A7 00 68 FC | 	wrlong	#0, fp
0e158                 | '     spl=0
0e158                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0e158     1C 4E 85 F1 | 	sub	fp, #28
0e15c     A7 00 68 FC | 	wrlong	#0, fp
0e160                 | LR__1116
0e160     A7 26 02 FB | 	rdlong	local05, fp
0e164     02 26 66 F0 | 	shl	local05, #2
0e168     34 4E 05 F1 | 	add	fp, #52
0e16c     A7 26 02 F1 | 	add	local05, fp
0e170     13 27 02 FB | 	rdlong	local05, local05
0e174     1C 4E 85 F1 | 	sub	fp, #28
0e178     A7 14 02 FB | 	rdlong	arg02, fp
0e17c     20 4E 85 F1 | 	sub	fp, #32
0e180     58 7F 23 FF 
0e184     00 12 06 F6 | 	mov	arg01, ##1191096320
0e188     10 37 B1 FD | 	call	#__system___float_div
0e18c     FD 14 02 F6 | 	mov	arg02, result1
0e190     13 13 02 F6 | 	mov	arg01, local05
0e194     00 35 B1 FD | 	call	#__system___float_mul
0e198     FD 22 02 F6 | 	mov	local03, result1
0e19c     87 E4 1D FF 
0e1a0     DB 27 06 F6 | 	mov	local05, ##1003032539
0e1a4     04 4E 05 F1 | 	add	fp, #4
0e1a8     A7 12 02 FB | 	rdlong	arg01, fp
0e1ac     04 4E 85 F1 | 	sub	fp, #4
0e1b0     09 13 52 F6 | 	abs	arg01, arg01 wc
0e1b4     1F 24 C6 C9 |  if_b	decod	local04, #31
0e1b8     00 24 06 36 |  if_ae	mov	local04, #0
0e1bc     D4 30 B1 FD | 	call	#__system___float_fromuns
0e1c0     12 FB 61 F5 | 	xor	result1, local04
0e1c4     FD 14 02 F6 | 	mov	arg02, result1
0e1c8     13 13 02 F6 | 	mov	arg01, local05
0e1cc     C8 34 B1 FD | 	call	#__system___float_mul
0e1d0     FD 26 02 F6 | 	mov	local05, result1
0e1d4     08 4E 05 F1 | 	add	fp, #8
0e1d8     A7 12 02 FB | 	rdlong	arg01, fp
0e1dc     08 4E 85 F1 | 	sub	fp, #8
0e1e0     01 12 06 F1 | 	add	arg01, #1
0e1e4     09 13 52 F6 | 	abs	arg01, arg01 wc
0e1e8     1F 24 C6 C9 |  if_b	decod	local04, #31
0e1ec     00 24 06 36 |  if_ae	mov	local04, #0
0e1f0     A0 30 B1 FD | 	call	#__system___float_fromuns
0e1f4     12 FB 61 F5 | 	xor	result1, local04
0e1f8     FD 14 02 F6 | 	mov	arg02, result1
0e1fc     13 13 02 F6 | 	mov	arg01, local05
0e200     94 34 B1 FD | 	call	#__system___float_mul
0e204     FD 12 02 F6 | 	mov	arg01, result1
0e208     C8 3D B1 FD | 	call	#__system____builtin_sinf
0e20c     FD 14 02 F6 | 	mov	arg02, result1
0e210     11 13 02 F6 | 	mov	arg01, local03
0e214     80 34 B1 FD | 	call	#__system___float_mul
0e218     FD 14 02 F6 | 	mov	arg02, result1
0e21c     24 4E 05 F1 | 	add	fp, #36
0e220     A7 12 02 FB | 	rdlong	arg01, fp
0e224     24 4E 85 F1 | 	sub	fp, #36
0e228     9C 30 B1 FD | 	call	#__system___float_add
0e22c     24 4E 05 F1 | 	add	fp, #36
0e230     A7 FA 61 FC | 	wrlong	result1, fp
0e234     1C 4E 85 F1 | 	sub	fp, #28
0e238     A7 26 02 FB | 	rdlong	local05, fp
0e23c     01 26 06 F1 | 	add	local05, #1
0e240     A7 26 62 FC | 	wrlong	local05, fp
0e244     10 26 56 F2 | 	cmps	local05, #16 wc
0e248     14 FF 9F CD |  if_b	jmp	#LR__1116
0e24c     08 4E 05 F1 | 	add	fp, #8
0e250     A7 26 02 FB | 	rdlong	local05, fp
0e254     0B 26 66 F0 | 	shl	local05, #11
0e258     0C 00 00 FF 
0e25c     D8 E4 05 F1 | 	add	objptr, ##6360
0e260     F2 26 02 F1 | 	add	local05, objptr
0e264     0C 4E 85 F1 | 	sub	fp, #12
0e268     A7 20 02 FB | 	rdlong	local02, fp
0e26c     01 20 66 F0 | 	shl	local02, #1
0e270     13 21 02 F1 | 	add	local02, local05
0e274     20 4E 05 F1 | 	add	fp, #32
0e278     A7 12 02 FB | 	rdlong	arg01, fp
0e27c     24 4E 85 F1 | 	sub	fp, #36
0e280     0C 00 00 FF 
0e284     D8 E4 85 F1 | 	sub	objptr, ##6360
0e288     01 14 06 F6 | 	mov	arg02, #1
0e28c     D0 38 B1 FD | 	call	#__system___float_tointeger
0e290     10 FB 51 FC | 	wrword	result1, local02
0e294     04 4E 05 F1 | 	add	fp, #4
0e298     A7 22 02 FB | 	rdlong	local03, fp
0e29c     01 22 06 F1 | 	add	local03, #1
0e2a0     A7 22 62 FC | 	wrlong	local03, fp
0e2a4     04 4E 85 F1 | 	sub	fp, #4
0e2a8     02 00 00 FF 
0e2ac     00 22 56 F2 | 	cmps	local03, ##1024 wc
0e2b0     9C FE 9F CD |  if_b	jmp	#LR__1115
0e2b4                 | LR__1117
0e2b4                 | LR__1118
0e2b4     A7 F0 03 F6 | 	mov	ptra, fp
0e2b8     B2 00 A0 FD | 	call	#popregs_
0e2bc                 | _do_defsnd_ret
0e2bc     2D 00 64 FD | 	ret
0e2c0                 | 
0e2c0                 | ' 
0e2c0                 | ' ' ---------------  List the program. 
0e2c0                 | ' 
0e2c0                 | ' sub do_list
0e2c0                 | _do_list
0e2c0     02 4A 05 F6 | 	mov	COUNT_, #2
0e2c4     A8 00 A0 FD | 	call	#pushregs_
0e2c8     B8 F0 07 F1 | 	add	ptra, #184
0e2cc     04 4E 05 F1 | 	add	fp, #4
0e2d0     A7 00 68 FC | 	wrlong	#0, fp
0e2d4     04 4E 05 F1 | 	add	fp, #4
0e2d8     FF FF BF FF 
0e2dc     A7 FE 6B FC | 	wrlong	##2147483647, fp
0e2e0     08 4E 85 F1 | 	sub	fp, #8
0e2e4     6A 00 00 FF 
0e2e8     80 E4 05 F1 | 	add	objptr, ##54400
0e2ec     F2 1E 02 FB | 	rdlong	local01, objptr
0e2f0     0F 17 02 F6 | 	mov	arg03, local01
0e2f4     01 16 66 F0 | 	shl	arg03, #1
0e2f8     0F 17 02 F1 | 	add	arg03, local01
0e2fc     02 16 66 F0 | 	shl	arg03, #2
0e300     03 00 00 FF 
0e304     04 E4 85 F1 | 	sub	objptr, ##1540
0e308     F2 16 02 F1 | 	add	arg03, objptr
0e30c     0B 17 02 FB | 	rdlong	arg03, arg03
0e310     A7 16 62 FC | 	wrlong	arg03, fp
0e314                 | ' 
0e314                 | ' startline=0 : endline=$7FFFFFFF
0e314                 | ' numpar=compiledline(lineptr_e).result.uresult
0e314                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
0e314     01 16 0E F2 | 	cmp	arg03, #1 wz
0e318     67 00 00 FF 
0e31c     7C E4 85 F1 | 	sub	objptr, ##52860
0e320     3C 00 90 5D |  if_ne	jmp	#LR__1120
0e324     38 C5 BF FD | 	call	#_pop
0e328     FF 1E 02 F6 | 	mov	local01, result3
0e32c     0C 4E 05 F1 | 	add	fp, #12
0e330     A7 FA 61 FC | 	wrlong	result1, fp
0e334     04 4E 05 F1 | 	add	fp, #4
0e338     A7 FC 61 FC | 	wrlong	result2, fp
0e33c     04 4E 05 F1 | 	add	fp, #4
0e340     A7 1E 62 FC | 	wrlong	local01, fp
0e344     08 4E 85 F1 | 	sub	fp, #8
0e348     A7 12 02 F6 | 	mov	arg01, fp
0e34c     0C 4E 85 F1 | 	sub	fp, #12
0e350     64 51 B0 FD | 	call	#_converttoint
0e354     04 4E 05 F1 | 	add	fp, #4
0e358     A7 FA 61 FC | 	wrlong	result1, fp
0e35c     04 4E 85 F1 | 	sub	fp, #4
0e360                 | LR__1120
0e360                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
0e360     A7 16 02 FB | 	rdlong	arg03, fp
0e364     02 16 0E F2 | 	cmp	arg03, #2 wz
0e368     7C 00 90 5D |  if_ne	jmp	#LR__1121
0e36c     F0 C4 BF FD | 	call	#_pop
0e370     FF 1E 02 F6 | 	mov	local01, result3
0e374     0C 4E 05 F1 | 	add	fp, #12
0e378     A7 FA 61 FC | 	wrlong	result1, fp
0e37c     04 4E 05 F1 | 	add	fp, #4
0e380     A7 FC 61 FC | 	wrlong	result2, fp
0e384     04 4E 05 F1 | 	add	fp, #4
0e388     A7 1E 62 FC | 	wrlong	local01, fp
0e38c     08 4E 85 F1 | 	sub	fp, #8
0e390     A7 12 02 F6 | 	mov	arg01, fp
0e394     0C 4E 85 F1 | 	sub	fp, #12
0e398     1C 51 B0 FD | 	call	#_converttoint
0e39c     FD 1E 02 F6 | 	mov	local01, result1
0e3a0     08 4E 05 F1 | 	add	fp, #8
0e3a4     A7 1E 62 FC | 	wrlong	local01, fp
0e3a8     08 4E 85 F1 | 	sub	fp, #8
0e3ac     B0 C4 BF FD | 	call	#_pop
0e3b0     FF 1E 02 F6 | 	mov	local01, result3
0e3b4     0C 4E 05 F1 | 	add	fp, #12
0e3b8     A7 FA 61 FC | 	wrlong	result1, fp
0e3bc     04 4E 05 F1 | 	add	fp, #4
0e3c0     A7 FC 61 FC | 	wrlong	result2, fp
0e3c4     04 4E 05 F1 | 	add	fp, #4
0e3c8     A7 1E 62 FC | 	wrlong	local01, fp
0e3cc     08 4E 85 F1 | 	sub	fp, #8
0e3d0     A7 12 02 F6 | 	mov	arg01, fp
0e3d4     0C 4E 85 F1 | 	sub	fp, #12
0e3d8     DC 50 B0 FD | 	call	#_converttoint
0e3dc     04 4E 05 F1 | 	add	fp, #4
0e3e0     A7 FA 61 FC | 	wrlong	result1, fp
0e3e4     04 4E 85 F1 | 	sub	fp, #4
0e3e8                 | LR__1121
0e3e8                 | ' 
0e3e8                 | ' 
0e3e8                 | ' print
0e3e8     00 12 06 F6 | 	mov	arg01, #0
0e3ec     C0 60 B1 FD | 	call	#__system___getiolock_0484
0e3f0     FD 12 02 F6 | 	mov	arg01, result1
0e3f4     20 07 B1 FD | 	call	#__system___lockmem
0e3f8     00 12 06 F6 | 	mov	arg01, #0
0e3fc     0A 14 06 F6 | 	mov	arg02, #10
0e400     00 16 06 F6 | 	mov	arg03, #0
0e404     C0 13 B1 FD | 	call	#__system___basic_print_char
0e408     00 12 06 F6 | 	mov	arg01, #0
0e40c     A0 60 B1 FD | 	call	#__system___getiolock_0484
0e410     FD 00 68 FC | 	wrlong	#0, result1
0e414     6A 00 00 FF 
0e418     84 E4 05 F1 | 	add	objptr, ##54404
0e41c     F2 20 02 FB | 	rdlong	local02, objptr
0e420     0F 00 00 FF 
0e424     A4 E5 05 F1 | 	add	objptr, ##8100
0e428     F2 20 62 FC | 	wrlong	local02, objptr
0e42c     7A 00 00 FF 
0e430     28 E4 85 F1 | 	sub	objptr, ##62504
0e434                 | ' do 
0e434                 | LR__1122
0e434     20 4E 05 F1 | 	add	fp, #32
0e438     A7 12 02 F6 | 	mov	arg01, fp
0e43c     20 4E 85 F1 | 	sub	fp, #32
0e440     7A 00 00 FF 
0e444     28 E4 05 F1 | 	add	objptr, ##62504
0e448     F2 14 02 FB | 	rdlong	arg02, objptr
0e44c     18 16 06 F6 | 	mov	arg03, #24
0e450     6E 00 00 FF 
0e454     5C E5 85 F1 | 	sub	objptr, ##56668
0e458     98 FA B0 FD | 	call	#_psram_spin2_read1
0e45c     0B 00 00 FF 
0e460     CC E4 85 F1 | 	sub	objptr, ##5836
0e464                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
0e464                 | '   
0e464                 | '   if header(0)<> $FFFFFFFF then
0e464     20 4E 05 F1 | 	add	fp, #32
0e468     A7 20 02 FB | 	rdlong	local02, fp
0e46c     20 4E 85 F1 | 	sub	fp, #32
0e470     FF FF 7F FF 
0e474     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0e478     A8 00 90 AD |  if_e	jmp	#LR__1124
0e47c     38 4E 05 F1 | 	add	fp, #56
0e480     3F 16 06 F6 | 	mov	arg03, #63
0e484     28 16 62 FD | 	setq	arg03
0e488     A7 00 68 FC | 	wrlong	#0, fp
0e48c     A7 12 02 F6 | 	mov	arg01, fp
0e490     10 4E 85 F1 | 	sub	fp, #16
0e494     A7 14 02 FB | 	rdlong	arg02, fp
0e498     04 4E 05 F1 | 	add	fp, #4
0e49c     A7 16 02 FB | 	rdlong	arg03, fp
0e4a0     2C 4E 85 F1 | 	sub	fp, #44
0e4a4     0B 00 00 FF 
0e4a8     CC E4 05 F1 | 	add	objptr, ##5836
0e4ac     44 FA B0 FD | 	call	#_psram_spin2_read1
0e4b0     0B 00 00 FF 
0e4b4     CC E4 85 F1 | 	sub	objptr, ##5836
0e4b8                 | '     longfill(linebuf,0,64)
0e4b8                 | '     psram.read1(varptr(linebuf),header(2),header(3))
0e4b8                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
0e4b8     20 4E 05 F1 | 	add	fp, #32
0e4bc     A7 20 02 FB | 	rdlong	local02, fp
0e4c0     1C 4E 85 F1 | 	sub	fp, #28
0e4c4     A7 1E 02 FB | 	rdlong	local01, fp
0e4c8     04 4E 85 F1 | 	sub	fp, #4
0e4cc     0F 21 52 F2 | 	cmps	local02, local01 wc
0e4d0     30 00 90 CD |  if_b	jmp	#LR__1123
0e4d4     20 4E 05 F1 | 	add	fp, #32
0e4d8     A7 20 02 FB | 	rdlong	local02, fp
0e4dc     18 4E 85 F1 | 	sub	fp, #24
0e4e0     A7 16 02 FB | 	rdlong	arg03, fp
0e4e4     08 4E 85 F1 | 	sub	fp, #8
0e4e8     0B 21 5A F2 | 	cmps	local02, arg03 wcz
0e4ec     14 00 90 1D |  if_a	jmp	#LR__1123
0e4f0     38 4E 05 F1 | 	add	fp, #56
0e4f4     A7 12 02 F6 | 	mov	arg01, fp
0e4f8     38 4E 85 F1 | 	sub	fp, #56
0e4fc                 | ' 
0e4fc                 | ' write(text)
0e4fc     4C F3 B0 FD | 	call	#_hg010b_spin2_write
0e500                 | ' crlf
0e500     14 F6 B0 FD | 	call	#_hg010b_spin2_crlf
0e504                 | LR__1123
0e504     34 4E 05 F1 | 	add	fp, #52
0e508     A7 20 02 FB | 	rdlong	local02, fp
0e50c     34 4E 85 F1 | 	sub	fp, #52
0e510     7A 00 00 FF 
0e514     28 E4 05 F1 | 	add	objptr, ##62504
0e518     F2 20 62 FC | 	wrlong	local02, objptr
0e51c     7A 00 00 FF 
0e520     28 E4 85 F1 | 	sub	objptr, ##62504
0e524                 | LR__1124
0e524     34 4E 05 F1 | 	add	fp, #52
0e528     A7 20 02 FB | 	rdlong	local02, fp
0e52c     34 4E 85 F1 | 	sub	fp, #52
0e530     FF FF 3F FF 
0e534     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0e538     20 4E 05 51 |  if_ne	add	fp, #32
0e53c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e540     20 4E 85 51 |  if_ne	sub	fp, #32
0e544     FF FF 7F 5F 
0e548     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0e54c     E4 FE 9F 5D |  if_ne	jmp	#LR__1122
0e550     A7 F0 03 F6 | 	mov	ptra, fp
0e554     B2 00 A0 FD | 	call	#popregs_
0e558                 | _do_list_ret
0e558     2D 00 64 FD | 	ret
0e55c                 | 
0e55c                 | ' 
0e55c                 | ' '---------------- Clear the program
0e55c                 | ' 
0e55c                 | ' sub do_new
0e55c                 | _do_new
0e55c     03 4A 05 F6 | 	mov	COUNT_, #3
0e560     A8 00 A0 FD | 	call	#pushregs_
0e564     00 12 06 F6 | 	mov	arg01, #0
0e568     01 14 66 F6 | 	neg	arg02, #1
0e56c     90 C2 B0 FD | 	call	#_pslpoke
0e570     55 00 00 FF 
0e574     08 E4 05 F1 | 	add	objptr, ##43528
0e578     F2 00 68 FC | 	wrlong	#0, objptr
0e57c     15 00 00 FF 
0e580     7C E4 05 F1 | 	add	objptr, ##10876
0e584     F2 00 68 FC | 	wrlong	#0, objptr
0e588     0E 00 00 FF 
0e58c     38 E4 05 F1 | 	add	objptr, ##7224
0e590     F2 00 68 FC | 	wrlong	#0, objptr
0e594     04 E4 05 F1 | 	add	objptr, #4
0e598     F2 00 68 FC | 	wrlong	#0, objptr
0e59c     15 00 00 FF 
0e5a0     68 E4 85 F1 | 	sub	objptr, ##10856
0e5a4     F2 00 68 FC | 	wrlong	#0, objptr
0e5a8     07 00 00 FF 
0e5ac     24 E4 05 F1 | 	add	objptr, ##3620
0e5b0     F2 00 68 FC | 	wrlong	#0, objptr
0e5b4     07 00 00 FF 
0e5b8     20 E4 85 F1 | 	sub	objptr, ##3616
0e5bc     F2 00 68 FC | 	wrlong	#0, objptr
0e5c0     0F 00 00 FF 
0e5c4     38 E4 05 F1 | 	add	objptr, ##7736
0e5c8     F2 00 68 FC | 	wrlong	#0, objptr
0e5cc     08 00 00 FF 
0e5d0     0C E4 85 F1 | 	sub	objptr, ##4108
0e5d4     F2 00 68 FC | 	wrlong	#0, objptr
0e5d8     04 E4 05 F1 | 	add	objptr, #4
0e5dc     FF FF FF FF 
0e5e0     F2 FE 6B FC | 	wrlong	##-1, objptr
0e5e4     0E 00 00 FF 
0e5e8     58 E4 05 F1 | 	add	objptr, ##7256
0e5ec     F2 00 68 FC | 	wrlong	#0, objptr
0e5f0     04 E4 05 F1 | 	add	objptr, #4
0e5f4     F2 00 68 FC | 	wrlong	#0, objptr
0e5f8                 | ' 
0e5f8                 | ' pslpoke(0,$FFFFFFFF)
0e5f8                 | ' varnum=0
0e5f8                 | ' programstart=0 :runptr=0 : runptr2=0
0e5f8                 | ' stackpointer=0
0e5f8                 | ' lineptr=0 
0e5f8                 | ' programptr=0 : stringptr=0
0e5f8                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
0e5f8                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
0e5f8     00 1E 06 F6 | 	mov	local01, #0
0e5fc     06 00 00 FF 
0e600     4C E4 85 F1 | 	sub	objptr, ##3148
0e604     97 16 48 FB | 	callpa	#(@LR__1131-@LR__1130)>>2,fcache_load_ptr_
0e608                 | LR__1130
0e608     0F 21 02 F6 | 	mov	local02, local01
0e60c     02 20 66 F0 | 	shl	local02, #2
0e610     0F 21 02 F1 | 	add	local02, local01
0e614     02 20 66 F0 | 	shl	local02, #2
0e618     F2 20 02 F1 | 	add	local02, objptr
0e61c     08 20 06 F1 | 	add	local02, #8
0e620     FF FF FF FF 
0e624     10 FF 6B FC | 	wrlong	##-1, local02
0e628     01 1E 06 F1 | 	add	local01, #1
0e62c     41 1E 56 F2 | 	cmps	local01, #65 wc
0e630     D4 FF 9F CD |  if_b	jmp	#LR__1130
0e634                 | LR__1131
0e634     72 00 00 FF 
0e638     9C E4 85 F1 | 	sub	objptr, ##58524
0e63c                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
0e63c     00 1E 06 F6 | 	mov	local01, #0
0e640                 | LR__1132
0e640     0F 21 02 F6 | 	mov	local02, local01
0e644     02 20 66 F0 | 	shl	local02, #2
0e648     79 00 00 FF 
0e64c     44 E5 05 F1 | 	add	objptr, ##62276
0e650     F2 20 02 F1 | 	add	local02, objptr
0e654     10 21 0A FB | 	rdlong	local02, local02 wz
0e658     79 00 00 FF 
0e65c     44 E5 85 F1 | 	sub	objptr, ##62276
0e660     34 00 90 AD |  if_e	jmp	#LR__1133
0e664     0F 13 02 F6 | 	mov	arg01, local01
0e668     00 14 06 F6 | 	mov	arg02, #0
0e66c     00 16 06 F6 | 	mov	arg03, #0
0e670     F8 E0 B0 FD | 	call	#_hg010b_spin2_setspritesize
0e674     0F 21 02 F6 | 	mov	local02, local01
0e678     02 20 66 F0 | 	shl	local02, #2
0e67c     79 00 00 FF 
0e680     44 E5 05 F1 | 	add	objptr, ##62276
0e684     F2 20 02 F1 | 	add	local02, objptr
0e688     10 13 02 FB | 	rdlong	arg01, local02
0e68c     79 00 00 FF 
0e690     44 E5 85 F1 | 	sub	objptr, ##62276
0e694     08 44 B1 FD | 	call	#__system___gc_free
0e698                 | LR__1133
0e698     01 1E 06 F1 | 	add	local01, #1
0e69c     10 1E 56 F2 | 	cmps	local01, #16 wc
0e6a0     9C FF 9F CD |  if_b	jmp	#LR__1132
0e6a4     79 00 00 FF 
0e6a8     98 E5 05 F1 | 	add	objptr, ##62360
0e6ac     00 C0 9F FF 
0e6b0     F2 00 68 FC | 	wrlong	##1065353216, objptr
0e6b4     04 E4 05 F1 | 	add	objptr, #4
0e6b8     00 C0 9F FF 
0e6bc     F2 00 68 FC | 	wrlong	##1065353216, objptr
0e6c0     79 00 00 FF 
0e6c4     98 E5 85 F1 | 	sub	objptr, ##62360
0e6c8     F2 22 02 FB | 	rdlong	local03, objptr
0e6cc     79 00 00 FF 
0e6d0     84 E5 05 F1 | 	add	objptr, ##62340
0e6d4     F2 22 62 FC | 	wrlong	local03, objptr
0e6d8     79 00 00 FF 
0e6dc     88 E5 85 F1 | 	sub	objptr, ##62344
0e6e0     11 12 06 F6 | 	mov	arg01, #17
0e6e4     08 14 06 F6 | 	mov	arg02, #8
0e6e8     10 16 06 F6 | 	mov	arg03, #16
0e6ec     7C E0 B0 FD | 	call	#_hg010b_spin2_setspritesize
0e6f0     10 12 06 F6 | 	mov	arg01, #16
0e6f4     20 14 06 F6 | 	mov	arg02, #32
0e6f8     20 16 06 F6 | 	mov	arg03, #32
0e6fc     6C E0 B0 FD | 	call	#_hg010b_spin2_setspritesize
0e700     73 01 00 FF 
0e704     5D 23 06 F6 | 	mov	local03, ##@LR__5146
0e708     79 00 00 FF 
0e70c     B4 E5 05 F1 | 	add	objptr, ##62388
0e710     F2 22 62 FC | 	wrlong	local03, objptr
0e714     79 00 00 FF 
0e718     B4 E5 85 F1 | 	sub	objptr, ##62388
0e71c     EC B3 B0 FD | 	call	#_init_audio
0e720     A7 F0 03 F6 | 	mov	ptra, fp
0e724     B2 00 A0 FD | 	call	#popregs_
0e728                 | _do_new_ret
0e728     2D 00 64 FD | 	ret
0e72c                 | 
0e72c                 | ' 
0e72c                 | ' '----------------------- goto
0e72c                 | ' sub do_fast_goto
0e72c                 | _do_fast_goto
0e72c     02 4A 05 F6 | 	mov	COUNT_, #2
0e730     A8 00 A0 FD | 	call	#pushregs_
0e734                 | _do_fast_goto_enter
0e734     6A 00 00 FF 
0e738     80 E4 05 F1 | 	add	objptr, ##54400
0e73c     F2 12 02 FB | 	rdlong	arg01, objptr
0e740     09 1F 02 F6 | 	mov	local01, arg01
0e744     01 1E 66 F0 | 	shl	local01, #1
0e748     09 1F 02 F1 | 	add	local01, arg01
0e74c     02 1E 66 F0 | 	shl	local01, #2
0e750     03 00 00 FF 
0e754     04 E4 85 F1 | 	sub	objptr, ##1540
0e758     F2 1E 02 F1 | 	add	local01, objptr
0e75c     0F 21 02 FB | 	rdlong	local02, local01
0e760     10 13 02 F6 | 	mov	arg01, local02
0e764     67 00 00 FF 
0e768     7C E4 85 F1 | 	sub	objptr, ##52860
0e76c     C0 C1 B0 FD | 	call	#_pslpeek
0e770     FD 12 02 F6 | 	mov	arg01, result1
0e774                 | ' 
0e774                 | ' testptr=compiledline(lineptr_e).result.uresult
0e774                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
0e774                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
0e774     6A 00 00 FF 
0e778     80 E4 05 F1 | 	add	objptr, ##54400
0e77c     F2 FA 01 FB | 	rdlong	result1, objptr
0e780     FD 1E 02 F6 | 	mov	local01, result1
0e784     01 1E 66 F0 | 	shl	local01, #1
0e788     FD 1E 02 F1 | 	add	local01, result1
0e78c     02 1E 66 F0 | 	shl	local01, #2
0e790     03 00 00 FF 
0e794     04 E4 85 F1 | 	sub	objptr, ##1540
0e798     F2 1E 02 F1 | 	add	local01, objptr
0e79c     04 1E 06 F1 | 	add	local01, #4
0e7a0     0F 1F 02 FB | 	rdlong	local01, local01
0e7a4     0F 13 0A F2 | 	cmp	arg01, local01 wz
0e7a8     67 00 00 FF 
0e7ac     7C E4 85 F1 | 	sub	objptr, ##52860
0e7b0     58 00 90 5D |  if_ne	jmp	#LR__1140
0e7b4     78 00 00 FF 
0e7b8     BC E4 05 F1 | 	add	objptr, ##61628
0e7bc     F2 20 62 FC | 	wrlong	local02, objptr
0e7c0     0E 00 00 FF 
0e7c4     40 E4 85 F1 | 	sub	objptr, ##7232
0e7c8     F2 20 02 FB | 	rdlong	local02, objptr
0e7cc     01 20 86 F1 | 	sub	local02, #1
0e7d0     04 E4 05 F1 | 	add	objptr, #4
0e7d4     F2 20 62 FC | 	wrlong	local02, objptr
0e7d8                 | '   runptr=testptr
0e7d8                 | '   lineptr_e=lineptr-1
0e7d8                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
0e7d8     0E 00 00 FF 
0e7dc     60 E4 05 F1 | 	add	objptr, ##7264
0e7e0     F2 20 02 FB | 	rdlong	local02, objptr
0e7e4     78 00 00 FF 
0e7e8     E0 E4 85 F1 | 	sub	objptr, ##61664
0e7ec     FF FF 3F FF 
0e7f0     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0e7f4     78 00 00 AF 
0e7f8     E0 E4 05 A1 |  if_e	add	objptr, ##61664
0e7fc     F2 00 68 AC |  if_e	wrlong	#0, objptr
0e800     78 00 00 AF 
0e804     E0 E4 85 A1 |  if_e	sub	objptr, ##61664
0e808     04 00 90 FD | 	jmp	#LR__1141
0e80c                 | LR__1140
0e80c     0C 00 B0 FD | 	call	#_do_find_goto
0e810                 | LR__1141
0e810     A7 F0 03 F6 | 	mov	ptra, fp
0e814     B2 00 A0 FD | 	call	#popregs_
0e818                 | _do_fast_goto_ret
0e818     2D 00 64 FD | 	ret
0e81c                 | 
0e81c                 | ' 
0e81c                 | ' 
0e81c                 | ' 
0e81c                 | ' 
0e81c                 | ' sub do_find_goto
0e81c                 | _do_find_goto
0e81c     03 4A 05 F6 | 	mov	COUNT_, #3
0e820     A8 00 A0 FD | 	call	#pushregs_
0e824     24 F0 07 F1 | 	add	ptra, #36
0e828                 | _do_find_goto_enter
0e828     6A 00 00 FF 
0e82c     80 E4 05 F1 | 	add	objptr, ##54400
0e830     F2 1E 02 FB | 	rdlong	local01, objptr
0e834     0F 21 02 F6 | 	mov	local02, local01
0e838     01 20 66 F0 | 	shl	local02, #1
0e83c     0F 21 02 F1 | 	add	local02, local01
0e840     02 20 66 F0 | 	shl	local02, #2
0e844     03 00 00 FF 
0e848     04 E4 85 F1 | 	sub	objptr, ##1540
0e84c     F2 20 02 F1 | 	add	local02, objptr
0e850     04 20 06 F1 | 	add	local02, #4
0e854     10 21 02 FB | 	rdlong	local02, local02
0e858     A7 20 62 FC | 	wrlong	local02, fp
0e85c     03 00 00 FF 
0e860     08 E4 05 F1 | 	add	objptr, ##1544
0e864     F2 22 02 FB | 	rdlong	local03, objptr
0e868     6A 00 00 FF 
0e86c     84 E4 85 F1 | 	sub	objptr, ##54404
0e870     04 4E 05 F1 | 	add	fp, #4
0e874     A7 22 62 FC | 	wrlong	local03, fp
0e878     04 4E 85 F1 | 	sub	fp, #4
0e87c                 | ' 
0e87c                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
0e87c                 | '  ' print "find goto"                                                                     'print gotoline 
0e87c                 | ' gotoptr=programstart
0e87c                 | ' do
0e87c                 | LR__1150
0e87c     0C 4E 05 F1 | 	add	fp, #12
0e880     A7 12 02 F6 | 	mov	arg01, fp
0e884     08 4E 85 F1 | 	sub	fp, #8
0e888     A7 14 02 FB | 	rdlong	arg02, fp
0e88c     04 4E 85 F1 | 	sub	fp, #4
0e890     18 16 06 F6 | 	mov	arg03, #24
0e894     0B 00 00 FF 
0e898     CC E4 05 F1 | 	add	objptr, ##5836
0e89c     54 F6 B0 FD | 	call	#_psram_spin2_read1
0e8a0     0B 00 00 FF 
0e8a4     CC E4 85 F1 | 	sub	objptr, ##5836
0e8a8                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
0e8a8                 | '   if gotoheader(0)<>$FFFFFFFF then
0e8a8     0C 4E 05 F1 | 	add	fp, #12
0e8ac     A7 22 02 FB | 	rdlong	local03, fp
0e8b0     0C 4E 85 F1 | 	sub	fp, #12
0e8b4     FF FF 7F FF 
0e8b8     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0e8bc     24 00 90 AD |  if_e	jmp	#LR__1151
0e8c0     04 4E 05 F1 | 	add	fp, #4
0e8c4     A7 22 02 FB | 	rdlong	local03, fp
0e8c8     04 4E 05 F1 | 	add	fp, #4
0e8cc     A7 22 62 FC | 	wrlong	local03, fp
0e8d0     18 4E 05 F1 | 	add	fp, #24
0e8d4     A7 22 02 FB | 	rdlong	local03, fp
0e8d8     1C 4E 85 F1 | 	sub	fp, #28
0e8dc     A7 22 62 FC | 	wrlong	local03, fp
0e8e0     04 4E 85 F1 | 	sub	fp, #4
0e8e4                 | LR__1151
0e8e4     20 4E 05 F1 | 	add	fp, #32
0e8e8     A7 22 02 FB | 	rdlong	local03, fp
0e8ec     20 4E 85 F1 | 	sub	fp, #32
0e8f0     FF FF 3F FF 
0e8f4     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0e8f8     0C 4E 05 51 |  if_ne	add	fp, #12
0e8fc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e900     0C 4E 85 51 |  if_ne	sub	fp, #12
0e904     FF FF 7F 5F 
0e908     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0e90c     18 00 90 AD |  if_e	jmp	#LR__1152
0e910     0C 4E 05 F1 | 	add	fp, #12
0e914     A7 22 02 FB | 	rdlong	local03, fp
0e918     0C 4E 85 F1 | 	sub	fp, #12
0e91c     A7 20 02 FB | 	rdlong	local02, fp
0e920     10 23 0A F2 | 	cmp	local03, local02 wz
0e924     54 FF 9F 5D |  if_ne	jmp	#LR__1150
0e928                 | LR__1152
0e928                 | ' 
0e928                 | ' if gotoheader(0)=gotoline then
0e928     0C 4E 05 F1 | 	add	fp, #12
0e92c     A7 22 02 FB | 	rdlong	local03, fp
0e930     0C 4E 85 F1 | 	sub	fp, #12
0e934     A7 1E 02 FB | 	rdlong	local01, fp
0e938     0F 23 0A F2 | 	cmp	local03, local01 wz
0e93c     D8 00 90 5D |  if_ne	jmp	#LR__1153
0e940     6A 00 00 FF 
0e944     80 E4 05 F1 | 	add	objptr, ##54400
0e948     F2 1E 02 FB | 	rdlong	local01, objptr
0e94c     0F 21 02 F6 | 	mov	local02, local01
0e950     01 20 66 F0 | 	shl	local02, #1
0e954     0F 21 02 F1 | 	add	local02, local01
0e958     02 20 66 F0 | 	shl	local02, #2
0e95c     03 00 00 FF 
0e960     04 E4 85 F1 | 	sub	objptr, ##1540
0e964     F2 20 02 F1 | 	add	local02, objptr
0e968     08 4E 05 F1 | 	add	fp, #8
0e96c     A7 22 02 FB | 	rdlong	local03, fp
0e970     10 23 62 FC | 	wrlong	local03, local02
0e974     03 00 00 FF 
0e978     04 E4 05 F1 | 	add	objptr, ##1540
0e97c     F2 1E 02 FB | 	rdlong	local01, objptr
0e980     0F 21 02 F6 | 	mov	local02, local01
0e984     01 20 66 F0 | 	shl	local02, #1
0e988     0F 21 02 F1 | 	add	local02, local01
0e98c     02 20 66 F0 | 	shl	local02, #2
0e990     03 00 00 FF 
0e994     04 E4 85 F1 | 	sub	objptr, ##1540
0e998     F2 20 02 F1 | 	add	local02, objptr
0e99c     08 20 06 F1 | 	add	local02, #8
0e9a0     10 9D 68 FC | 	wrlong	#78, local02
0e9a4     03 00 00 FF 
0e9a8     04 E4 05 F1 | 	add	objptr, ##1540
0e9ac     F2 20 02 FB | 	rdlong	local02, objptr
0e9b0     10 13 02 F6 | 	mov	arg01, local02
0e9b4     01 12 66 F0 | 	shl	arg01, #1
0e9b8     10 13 02 F1 | 	add	arg01, local02
0e9bc     02 12 66 F0 | 	shl	arg01, #2
0e9c0     03 00 00 FF 
0e9c4     04 E4 85 F1 | 	sub	objptr, ##1540
0e9c8     F2 12 02 F1 | 	add	arg01, objptr
0e9cc     11 00 00 FF 
0e9d0     48 E4 05 F1 | 	add	objptr, ##8776
0e9d4     F2 14 02 FB | 	rdlong	arg02, objptr
0e9d8     02 22 06 F6 | 	mov	local03, #2
0e9dc     10 23 02 F1 | 	add	local03, local02
0e9e0     13 00 00 FF 
0e9e4     60 E4 85 F1 | 	sub	objptr, ##9824
0e9e8     F2 16 02 FB | 	rdlong	arg03, objptr
0e9ec     0B 23 02 FD | 	qmul	local03, arg03
0e9f0     08 4E 85 F1 | 	sub	fp, #8
0e9f4     59 00 00 FF 
0e9f8     98 E5 85 F1 | 	sub	objptr, ##45976
0e9fc     18 22 62 FD | 	getqx	local03
0ea00     11 15 02 F1 | 	add	arg02, local03
0ea04     88 F5 B0 FD | 	call	#_psram_spin2_write
0ea08     0B 00 00 FF 
0ea0c     CC E4 85 F1 | 	sub	objptr, ##5836
0ea10     18 FD BF FD | 	call	#_do_fast_goto
0ea14     08 00 90 FD | 	jmp	#LR__1154
0ea18                 | LR__1153
0ea18     26 12 06 F6 | 	mov	arg01, #38
0ea1c     7C BC B0 FD | 	call	#_printerror
0ea20                 | LR__1154
0ea20     A7 F0 03 F6 | 	mov	ptra, fp
0ea24     B2 00 A0 FD | 	call	#popregs_
0ea28                 | _do_find_goto_ret
0ea28     2D 00 64 FD | 	ret
0ea2c                 | 
0ea2c                 | ' 
0ea2c                 | ' sub do_slow_goto
0ea2c                 | _do_slow_goto
0ea2c     02 4A 05 F6 | 	mov	COUNT_, #2
0ea30     A8 00 A0 FD | 	call	#pushregs_
0ea34     30 F0 07 F1 | 	add	ptra, #48
0ea38     24 BE BF FD | 	call	#_pop
0ea3c     FF 1E 02 F6 | 	mov	local01, result3
0ea40     24 4E 05 F1 | 	add	fp, #36
0ea44     A7 FA 61 FC | 	wrlong	result1, fp
0ea48     04 4E 05 F1 | 	add	fp, #4
0ea4c     A7 FC 61 FC | 	wrlong	result2, fp
0ea50     04 4E 05 F1 | 	add	fp, #4
0ea54     A7 1E 62 FC | 	wrlong	local01, fp
0ea58     08 4E 85 F1 | 	sub	fp, #8
0ea5c     A7 12 02 F6 | 	mov	arg01, fp
0ea60     24 4E 85 F1 | 	sub	fp, #36
0ea64     50 4A B0 FD | 	call	#_converttoint
0ea68     A7 FA 61 FC | 	wrlong	result1, fp
0ea6c     6A 00 00 FF 
0ea70     84 E4 05 F1 | 	add	objptr, ##54404
0ea74     F2 20 02 FB | 	rdlong	local02, objptr
0ea78     6A 00 00 FF 
0ea7c     84 E4 85 F1 | 	sub	objptr, ##54404
0ea80     04 4E 05 F1 | 	add	fp, #4
0ea84     A7 20 62 FC | 	wrlong	local02, fp
0ea88     04 4E 85 F1 | 	sub	fp, #4
0ea8c                 | ' 
0ea8c                 | ' t1=pop() : gotoline=converttoint(t1)
0ea8c                 | ' gotoptr=programstart
0ea8c                 | ' do
0ea8c                 | LR__1160
0ea8c     0C 4E 05 F1 | 	add	fp, #12
0ea90     A7 12 02 F6 | 	mov	arg01, fp
0ea94     08 4E 85 F1 | 	sub	fp, #8
0ea98     A7 14 02 FB | 	rdlong	arg02, fp
0ea9c     04 4E 85 F1 | 	sub	fp, #4
0eaa0     18 16 06 F6 | 	mov	arg03, #24
0eaa4     0B 00 00 FF 
0eaa8     CC E4 05 F1 | 	add	objptr, ##5836
0eaac     44 F4 B0 FD | 	call	#_psram_spin2_read1
0eab0     0B 00 00 FF 
0eab4     CC E4 85 F1 | 	sub	objptr, ##5836
0eab8                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
0eab8                 | '   if gotoheader(0)<>$FFFFFFFF then
0eab8     0C 4E 05 F1 | 	add	fp, #12
0eabc     A7 20 02 FB | 	rdlong	local02, fp
0eac0     0C 4E 85 F1 | 	sub	fp, #12
0eac4     FF FF 7F FF 
0eac8     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0eacc     24 00 90 AD |  if_e	jmp	#LR__1161
0ead0     04 4E 05 F1 | 	add	fp, #4
0ead4     A7 20 02 FB | 	rdlong	local02, fp
0ead8     04 4E 05 F1 | 	add	fp, #4
0eadc     A7 20 62 FC | 	wrlong	local02, fp
0eae0     18 4E 05 F1 | 	add	fp, #24
0eae4     A7 20 02 FB | 	rdlong	local02, fp
0eae8     1C 4E 85 F1 | 	sub	fp, #28
0eaec     A7 20 62 FC | 	wrlong	local02, fp
0eaf0     04 4E 85 F1 | 	sub	fp, #4
0eaf4                 | LR__1161
0eaf4     20 4E 05 F1 | 	add	fp, #32
0eaf8     A7 20 02 FB | 	rdlong	local02, fp
0eafc     20 4E 85 F1 | 	sub	fp, #32
0eb00     FF FF 3F FF 
0eb04     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0eb08     0C 4E 05 51 |  if_ne	add	fp, #12
0eb0c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0eb10     0C 4E 85 51 |  if_ne	sub	fp, #12
0eb14     FF FF 7F 5F 
0eb18     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0eb1c     18 00 90 AD |  if_e	jmp	#LR__1162
0eb20     0C 4E 05 F1 | 	add	fp, #12
0eb24     A7 20 02 FB | 	rdlong	local02, fp
0eb28     0C 4E 85 F1 | 	sub	fp, #12
0eb2c     A7 16 02 FB | 	rdlong	arg03, fp
0eb30     0B 21 0A F2 | 	cmp	local02, arg03 wz
0eb34     54 FF 9F 5D |  if_ne	jmp	#LR__1160
0eb38                 | LR__1162
0eb38                 | ' if gotoheader(0)=gotoline then  
0eb38     0C 4E 05 F1 | 	add	fp, #12
0eb3c     A7 20 02 FB | 	rdlong	local02, fp
0eb40     0C 4E 85 F1 | 	sub	fp, #12
0eb44     A7 1E 02 FB | 	rdlong	local01, fp
0eb48     0F 21 0A F2 | 	cmp	local02, local01 wz
0eb4c     60 00 90 5D |  if_ne	jmp	#LR__1163
0eb50     08 4E 05 F1 | 	add	fp, #8
0eb54     A7 20 02 FB | 	rdlong	local02, fp
0eb58     08 4E 85 F1 | 	sub	fp, #8
0eb5c     78 00 00 FF 
0eb60     BC E4 05 F1 | 	add	objptr, ##61628
0eb64     F2 20 62 FC | 	wrlong	local02, objptr
0eb68     0E 00 00 FF 
0eb6c     40 E4 85 F1 | 	sub	objptr, ##7232
0eb70     F2 20 02 FB | 	rdlong	local02, objptr
0eb74     01 20 86 F1 | 	sub	local02, #1
0eb78     04 E4 05 F1 | 	add	objptr, #4
0eb7c     F2 20 62 FC | 	wrlong	local02, objptr
0eb80                 | '    runptr=oldgotoptr
0eb80                 | '    lineptr_e=lineptr-1
0eb80                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
0eb80     0E 00 00 FF 
0eb84     60 E4 05 F1 | 	add	objptr, ##7264
0eb88     F2 20 02 FB | 	rdlong	local02, objptr
0eb8c     78 00 00 FF 
0eb90     E0 E4 85 F1 | 	sub	objptr, ##61664
0eb94     FF FF 3F FF 
0eb98     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0eb9c     78 00 00 AF 
0eba0     E0 E4 05 A1 |  if_e	add	objptr, ##61664
0eba4     F2 00 68 AC |  if_e	wrlong	#0, objptr
0eba8     78 00 00 AF 
0ebac     E0 E4 85 A1 |  if_e	sub	objptr, ##61664
0ebb0                 | LR__1163
0ebb0     A7 F0 03 F6 | 	mov	ptra, fp
0ebb4     B2 00 A0 FD | 	call	#popregs_
0ebb8                 | _do_slow_goto_ret
0ebb8     2D 00 64 FD | 	ret
0ebbc                 | 
0ebbc                 | ' 
0ebbc                 | ' '----------------------- Error processing
0ebbc                 | ' 
0ebbc                 | ' sub do_error
0ebbc                 | _do_error
0ebbc     01 4A 05 F6 | 	mov	COUNT_, #1
0ebc0     A8 00 A0 FD | 	call	#pushregs_
0ebc4     6A 00 00 FF 
0ebc8     80 E4 05 F1 | 	add	objptr, ##54400
0ebcc     F2 18 02 FB | 	rdlong	arg04, objptr
0ebd0     0C 17 02 F6 | 	mov	arg03, arg04
0ebd4     01 16 66 F0 | 	shl	arg03, #1
0ebd8     0C 17 02 F1 | 	add	arg03, arg04
0ebdc     02 16 66 F0 | 	shl	arg03, #2
0ebe0     03 00 00 FF 
0ebe4     04 E4 85 F1 | 	sub	objptr, ##1540
0ebe8     F2 16 02 F1 | 	add	arg03, objptr
0ebec     0B 1F 02 FB | 	rdlong	local01, arg03
0ebf0                 | ' r=compiledline(lineptr_e).result.uresult
0ebf0                 | ' print "Error ";r;": ";errors$(r)
0ebf0     00 12 06 F6 | 	mov	arg01, #0
0ebf4     67 00 00 FF 
0ebf8     7C E4 85 F1 | 	sub	objptr, ##52860
0ebfc     B0 58 B1 FD | 	call	#__system___getiolock_0484
0ec00     FD 12 02 F6 | 	mov	arg01, result1
0ec04     10 FF B0 FD | 	call	#__system___lockmem
0ec08     73 01 00 FF 
0ec0c     68 15 06 F6 | 	mov	arg02, ##@LR__5147
0ec10     00 12 06 F6 | 	mov	arg01, #0
0ec14     00 16 06 F6 | 	mov	arg03, #0
0ec18     04 0C B1 FD | 	call	#__system___basic_print_string
0ec1c     00 12 06 F6 | 	mov	arg01, #0
0ec20     0F 15 02 F6 | 	mov	arg02, local01
0ec24     00 16 06 F6 | 	mov	arg03, #0
0ec28     0A 18 06 F6 | 	mov	arg04, #10
0ec2c     74 0C B1 FD | 	call	#__system___basic_print_unsigned
0ec30     73 01 00 FF 
0ec34     6F 15 06 F6 | 	mov	arg02, ##@LR__5148
0ec38     00 12 06 F6 | 	mov	arg01, #0
0ec3c     00 16 06 F6 | 	mov	arg03, #0
0ec40     DC 0B B1 FD | 	call	#__system___basic_print_string
0ec44     02 1E 66 F0 | 	shl	local01, #2
0ec48     65 00 00 FF 
0ec4c     7C E4 05 F1 | 	add	objptr, ##51836
0ec50     F2 1E 02 F1 | 	add	local01, objptr
0ec54     0F 15 02 FB | 	rdlong	arg02, local01
0ec58     00 12 06 F6 | 	mov	arg01, #0
0ec5c     00 16 06 F6 | 	mov	arg03, #0
0ec60     65 00 00 FF 
0ec64     7C E4 85 F1 | 	sub	objptr, ##51836
0ec68     B4 0B B1 FD | 	call	#__system___basic_print_string
0ec6c     00 12 06 F6 | 	mov	arg01, #0
0ec70     0A 14 06 F6 | 	mov	arg02, #10
0ec74     00 16 06 F6 | 	mov	arg03, #0
0ec78     4C 0B B1 FD | 	call	#__system___basic_print_char
0ec7c     00 12 06 F6 | 	mov	arg01, #0
0ec80     2C 58 B1 FD | 	call	#__system___getiolock_0484
0ec84     FD 00 68 FC | 	wrlong	#0, result1
0ec88     A7 F0 03 F6 | 	mov	ptra, fp
0ec8c     B2 00 A0 FD | 	call	#popregs_
0ec90                 | _do_error_ret
0ec90     2D 00 64 FD | 	ret
0ec94                 | 
0ec94                 | ' 
0ec94                 | ' 
0ec94                 | ' '------------------ Assigning to a variable  
0ec94                 | ' 
0ec94                 | ' function  convertstring(psaddr as ulong) as string
0ec94                 | _convertstring
0ec94     04 4A 05 F6 | 	mov	COUNT_, #4
0ec98     A8 00 A0 FD | 	call	#pushregs_
0ec9c     09 1F 02 F6 | 	mov	local01, arg01
0eca0     8C BC B0 FD | 	call	#_pslpeek
0eca4     FD 20 02 F6 | 	mov	local02, result1
0eca8     73 01 00 FF 
0ecac     72 23 06 F6 | 	mov	local03, ##@LR__5149
0ecb0                 | ' 'print "in convertstring: psaddr=";psaddr
0ecb0                 | ' l=pslpeek(psaddr)
0ecb0                 | ' 'print "in convertstring: len=";l
0ecb0                 | ' s="" 
0ecb0                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0ecb0     01 24 06 F6 | 	mov	local04, #1
0ecb4     01 20 06 F1 | 	add	local02, #1
0ecb8                 | LR__1170
0ecb8     10 25 52 F2 | 	cmps	local04, local02 wc
0ecbc     30 00 90 3D |  if_ae	jmp	#LR__1171
0ecc0     0F 13 02 F6 | 	mov	arg01, local01
0ecc4     03 12 06 F1 | 	add	arg01, #3
0ecc8     12 13 02 F1 | 	add	arg01, local04
0eccc     08 BC B0 FD | 	call	#_pspeek
0ecd0     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0ecd4     4C 20 B1 FD | 	call	#__system__Chr_S
0ecd8     FD 14 02 F6 | 	mov	arg02, result1
0ecdc     11 13 02 F6 | 	mov	arg01, local03
0ece0     90 FE B0 FD | 	call	#__system___string_concat
0ece4     FD 22 02 F6 | 	mov	local03, result1
0ece8     01 24 06 F1 | 	add	local04, #1
0ecec     C8 FF 9F FD | 	jmp	#LR__1170
0ecf0                 | LR__1171
0ecf0                 | ' 'print "in convertstring: str=";s
0ecf0                 | ' return s
0ecf0     11 FB 01 F6 | 	mov	result1, local03
0ecf4     A7 F0 03 F6 | 	mov	ptra, fp
0ecf8     B2 00 A0 FD | 	call	#popregs_
0ecfc                 | _convertstring_ret
0ecfc     2D 00 64 FD | 	ret
0ed00                 | 
0ed00                 | ' 
0ed00                 | ' sub do_assign
0ed00                 | _do_assign
0ed00     05 4A 05 F6 | 	mov	COUNT_, #5
0ed04     A8 00 A0 FD | 	call	#pushregs_
0ed08     44 F0 07 F1 | 	add	ptra, #68
0ed0c     6A 00 00 FF 
0ed10     80 E4 05 F1 | 	add	objptr, ##54400
0ed14     F2 16 02 FB | 	rdlong	arg03, objptr
0ed18     0B 15 02 F6 | 	mov	arg02, arg03
0ed1c     01 14 66 F0 | 	shl	arg02, #1
0ed20     0B 15 02 F1 | 	add	arg02, arg03
0ed24     02 14 66 F0 | 	shl	arg02, #2
0ed28     03 00 00 FF 
0ed2c     04 E4 85 F1 | 	sub	objptr, ##1540
0ed30     F2 14 02 F1 | 	add	arg02, objptr
0ed34     0A 15 02 FB | 	rdlong	arg02, arg02
0ed38     18 4E 05 F1 | 	add	fp, #24
0ed3c     A7 14 62 FC | 	wrlong	arg02, fp
0ed40                 | ' 
0ed40                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
0ed40                 | ' 
0ed40                 | ' if variables(varnum).vartype<array_no_type then 
0ed40     18 4E 85 F1 | 	sub	fp, #24
0ed44     04 14 66 F0 | 	shl	arg02, #4
0ed48     32 00 00 FF 
0ed4c     84 E4 85 F1 | 	sub	objptr, ##25732
0ed50     F2 14 02 F1 | 	add	arg02, objptr
0ed54     0C 14 06 F1 | 	add	arg02, #12
0ed58     0A 17 02 FB | 	rdlong	arg03, arg02
0ed5c     00 17 16 F2 | 	cmp	arg03, #256 wc
0ed60     34 00 00 FF 
0ed64     F8 E5 85 F1 | 	sub	objptr, ##27128
0ed68     18 01 90 3D |  if_ae	jmp	#LR__1180
0ed6c     F0 BA BF FD | 	call	#_pop
0ed70     A7 FA 61 FC | 	wrlong	result1, fp
0ed74     04 4E 05 F1 | 	add	fp, #4
0ed78     A7 FC 61 FC | 	wrlong	result2, fp
0ed7c     04 4E 05 F1 | 	add	fp, #4
0ed80     A7 FE 61 FC | 	wrlong	result3, fp
0ed84     08 4E 85 F1 | 	sub	fp, #8
0ed88     A7 16 02 FB | 	rdlong	arg03, fp
0ed8c     04 4E 05 F1 | 	add	fp, #4
0ed90     A7 14 02 FB | 	rdlong	arg02, fp
0ed94     14 4E 05 F1 | 	add	fp, #20
0ed98     A7 12 02 FB | 	rdlong	arg01, fp
0ed9c     04 12 66 F0 | 	shl	arg01, #4
0eda0     34 00 00 FF 
0eda4     F8 E5 05 F1 | 	add	objptr, ##27128
0eda8     F2 12 02 F1 | 	add	arg01, objptr
0edac     04 12 06 F1 | 	add	arg01, #4
0edb0     09 17 62 FC | 	wrlong	arg03, arg01
0edb4     A7 16 02 FB | 	rdlong	arg03, fp
0edb8     04 16 66 F0 | 	shl	arg03, #4
0edbc     F2 16 02 F1 | 	add	arg03, objptr
0edc0     08 16 06 F1 | 	add	arg03, #8
0edc4     0B 15 62 FC | 	wrlong	arg02, arg03
0edc8     A7 16 02 FB | 	rdlong	arg03, fp
0edcc     04 16 66 F0 | 	shl	arg03, #4
0edd0     F2 16 02 F1 | 	add	arg03, objptr
0edd4     10 4E 85 F1 | 	sub	fp, #16
0edd8     A7 14 02 FB | 	rdlong	arg02, fp
0eddc     0C 16 06 F1 | 	add	arg03, #12
0ede0     0B 15 62 FC | 	wrlong	arg02, arg03
0ede4                 | '   t1=pop() 
0ede4                 | ' 'print "In do_assign value to assign=";t1.result.uresult, "type to assign=";t1.result_type  
0ede4                 | '    variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
0ede4                 | '   if variables(varnum).vartype<>result_string2 then return
0ede4     10 4E 05 F1 | 	add	fp, #16
0ede8     A7 16 02 FB | 	rdlong	arg03, fp
0edec     18 4E 85 F1 | 	sub	fp, #24
0edf0     04 16 66 F0 | 	shl	arg03, #4
0edf4     F2 16 02 F1 | 	add	arg03, objptr
0edf8     0C 16 06 F1 | 	add	arg03, #12
0edfc     0B 17 02 FB | 	rdlong	arg03, arg03
0ee00     2B 16 0E F2 | 	cmp	arg03, #43 wz
0ee04     34 00 00 FF 
0ee08     F8 E5 85 F1 | 	sub	objptr, ##27128
0ee0c     E4 04 90 5D |  if_ne	jmp	#LR__1203
0ee10     18 4E 05 F1 | 	add	fp, #24
0ee14     A7 16 02 FB | 	rdlong	arg03, fp
0ee18     0B 1F 02 F6 | 	mov	local01, arg03
0ee1c     04 1E 66 F0 | 	shl	local01, #4
0ee20     34 00 00 FF 
0ee24     F8 E5 05 F1 | 	add	objptr, ##27128
0ee28     F2 1E 02 F1 | 	add	local01, objptr
0ee2c     18 4E 85 F1 | 	sub	fp, #24
0ee30     04 16 66 F0 | 	shl	arg03, #4
0ee34     F2 16 02 F1 | 	add	arg03, objptr
0ee38     04 16 06 F1 | 	add	arg03, #4
0ee3c     0B 13 02 FB | 	rdlong	arg01, arg03
0ee40     34 00 00 FF 
0ee44     F8 E5 85 F1 | 	sub	objptr, ##27128
0ee48     48 FE BF FD | 	call	#_convertstring
0ee4c     04 1E 06 F1 | 	add	local01, #4
0ee50     0F FB 61 FC | 	wrlong	result1, local01
0ee54     18 4E 05 F1 | 	add	fp, #24
0ee58     A7 1E 02 FB | 	rdlong	local01, fp
0ee5c     18 4E 85 F1 | 	sub	fp, #24
0ee60     04 1E 66 F0 | 	shl	local01, #4
0ee64     34 00 00 FF 
0ee68     F8 E5 05 F1 | 	add	objptr, ##27128
0ee6c     F2 1E 02 F1 | 	add	local01, objptr
0ee70     0C 1E 06 F1 | 	add	local01, #12
0ee74     0F 3F 68 FC | 	wrlong	#31, local01
0ee78                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
0ee78                 | '   variables(varnum).vartype=result_string
0ee78                 | '   return
0ee78     34 00 00 FF 
0ee7c     F8 E5 85 F1 | 	sub	objptr, ##27128
0ee80     70 04 90 FD | 	jmp	#LR__1203
0ee84                 | LR__1180
0ee84                 | ' for i=0 to 2 : arrid(i)=0 : next i
0ee84     1C 4E 05 F1 | 	add	fp, #28
0ee88     A7 00 68 FC | 	wrlong	#0, fp
0ee8c     97 16 48 FB | 	callpa	#(@LR__1182-@LR__1181)>>2,fcache_load_ptr_
0ee90                 | LR__1181
0ee90     A7 1E 02 FB | 	rdlong	local01, fp
0ee94     02 1E 66 F0 | 	shl	local01, #2
0ee98     18 4E 05 F1 | 	add	fp, #24
0ee9c     A7 1E 02 F1 | 	add	local01, fp
0eea0     0F 01 68 FC | 	wrlong	#0, local01
0eea4     18 4E 85 F1 | 	sub	fp, #24
0eea8     A7 1E 02 FB | 	rdlong	local01, fp
0eeac     01 1E 06 F1 | 	add	local01, #1
0eeb0     A7 1E 62 FC | 	wrlong	local01, fp
0eeb4     03 1E 16 F2 | 	cmp	local01, #3 wc
0eeb8     D4 FF 9F CD |  if_b	jmp	#LR__1181
0eebc                 | LR__1182
0eebc     6A 00 00 FF 
0eec0     80 E4 05 F1 | 	add	objptr, ##54400
0eec4     F2 16 02 FB | 	rdlong	arg03, objptr
0eec8     0B 1F 02 F6 | 	mov	local01, arg03
0eecc     01 1E 66 F0 | 	shl	local01, #1
0eed0     0B 1F 02 F1 | 	add	local01, arg03
0eed4     02 1E 66 F0 | 	shl	local01, #2
0eed8     03 00 00 FF 
0eedc     04 E4 85 F1 | 	sub	objptr, ##1540
0eee0     F2 1E 02 F1 | 	add	local01, objptr
0eee4     04 1E 06 F1 | 	add	local01, #4
0eee8     0F 21 02 FB | 	rdlong	local02, local01
0eeec     04 4E 05 F1 | 	add	fp, #4
0eef0     A7 20 62 FC | 	wrlong	local02, fp
0eef4     20 4E 85 F1 | 	sub	fp, #32
0eef8     67 00 00 FF 
0eefc     7C E4 85 F1 | 	sub	objptr, ##52860
0ef00     5C B9 BF FD | 	call	#_pop
0ef04     A7 FA 61 FC | 	wrlong	result1, fp
0ef08     04 4E 05 F1 | 	add	fp, #4
0ef0c     A7 FC 61 FC | 	wrlong	result2, fp
0ef10     04 4E 05 F1 | 	add	fp, #4
0ef14     A7 FE 61 FC | 	wrlong	result3, fp
0ef18                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
0ef18                 | ' t1=pop() ' var value
0ef18                 | ' if numpar>0 then
0ef18     18 4E 05 F1 | 	add	fp, #24
0ef1c     A7 22 02 FB | 	rdlong	local03, fp
0ef20     20 4E 85 F1 | 	sub	fp, #32
0ef24     01 22 16 F2 | 	cmp	local03, #1 wc
0ef28     78 00 90 CD |  if_b	jmp	#LR__1185
0ef2c                 | '   for i=numpar to 1 step -1
0ef2c     20 4E 05 F1 | 	add	fp, #32
0ef30     A7 24 0A FB | 	rdlong	local04, fp wz
0ef34     04 4E 85 F1 | 	sub	fp, #4
0ef38     A7 24 62 FC | 	wrlong	local04, fp
0ef3c     1C 4E 85 F1 | 	sub	fp, #28
0ef40     60 00 90 AD |  if_e	jmp	#LR__1184
0ef44                 | LR__1183
0ef44     18 B9 BF FD | 	call	#_pop
0ef48     0C 4E 05 F1 | 	add	fp, #12
0ef4c     A7 FA 61 FC | 	wrlong	result1, fp
0ef50     04 4E 05 F1 | 	add	fp, #4
0ef54     A7 FC 61 FC | 	wrlong	result2, fp
0ef58     04 4E 05 F1 | 	add	fp, #4
0ef5c     A7 FE 61 FC | 	wrlong	result3, fp
0ef60     08 4E 05 F1 | 	add	fp, #8
0ef64     A7 22 02 FB | 	rdlong	local03, fp
0ef68     01 22 86 F1 | 	sub	local03, #1
0ef6c     02 22 66 F0 | 	shl	local03, #2
0ef70     18 4E 05 F1 | 	add	fp, #24
0ef74     A7 22 02 F1 | 	add	local03, fp
0ef78     28 4E 85 F1 | 	sub	fp, #40
0ef7c     A7 12 02 F6 | 	mov	arg01, fp
0ef80     0C 4E 85 F1 | 	sub	fp, #12
0ef84     30 45 B0 FD | 	call	#_converttoint
0ef88     11 FB 61 FC | 	wrlong	result1, local03
0ef8c     1C 4E 05 F1 | 	add	fp, #28
0ef90     A7 24 02 FB | 	rdlong	local04, fp
0ef94     01 24 8E F1 | 	sub	local04, #1 wz
0ef98     A7 24 62 FC | 	wrlong	local04, fp
0ef9c     1C 4E 85 F1 | 	sub	fp, #28
0efa0     A0 FF 9F 5D |  if_ne	jmp	#LR__1183
0efa4                 | LR__1184
0efa4                 | LR__1185
0efa4     18 4E 05 F1 | 	add	fp, #24
0efa8     A7 1E 02 FB | 	rdlong	local01, fp
0efac     04 1E 66 F0 | 	shl	local01, #4
0efb0     34 00 00 FF 
0efb4     F8 E5 05 F1 | 	add	objptr, ##27128
0efb8     F2 1E 02 F1 | 	add	local01, objptr
0efbc     04 1E 06 F1 | 	add	local01, #4
0efc0     0F 13 02 FB | 	rdlong	arg01, local01
0efc4     0C 4E 05 F1 | 	add	fp, #12
0efc8     A7 12 62 FC | 	wrlong	arg01, fp
0efcc     24 4E 85 F1 | 	sub	fp, #36
0efd0     34 00 00 FF 
0efd4     F8 E5 85 F1 | 	sub	objptr, ##27128
0efd8     54 B9 B0 FD | 	call	#_pslpeek
0efdc     FD 24 32 F9 | 	getword	local04, result1, #0
0efe0     28 4E 05 F1 | 	add	fp, #40
0efe4     A7 24 62 FC | 	wrlong	local04, fp
0efe8     04 4E 85 F1 | 	sub	fp, #4
0efec     A7 12 02 FB | 	rdlong	arg01, fp
0eff0     24 4E 85 F1 | 	sub	fp, #36
0eff4     02 12 06 F1 | 	add	arg01, #2
0eff8     DC B8 B0 FD | 	call	#_pspeek
0effc     FD FA E1 F8 | 	getbyte	result1, result1, #0
0f000     2C 4E 05 F1 | 	add	fp, #44
0f004     A7 FA 61 FC | 	wrlong	result1, fp
0f008                 | ' esize=pspeek(arrptr+2)
0f008                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
0f008     08 4E 85 F1 | 	sub	fp, #8
0f00c     A7 12 02 FB | 	rdlong	arg01, fp
0f010     24 4E 85 F1 | 	sub	fp, #36
0f014     04 12 06 F1 | 	add	arg01, #4
0f018     14 B9 B0 FD | 	call	#_pslpeek
0f01c     FD 24 02 F6 | 	mov	local04, result1
0f020     34 4E 05 F1 | 	add	fp, #52
0f024     A7 1E 02 FB | 	rdlong	local01, fp
0f028     34 4E 85 F1 | 	sub	fp, #52
0f02c     12 1F 12 F2 | 	cmp	local01, local04 wc
0f030     54 00 90 3D |  if_ae	jmp	#LR__1186
0f034     24 4E 05 F1 | 	add	fp, #36
0f038     A7 12 02 FB | 	rdlong	arg01, fp
0f03c     24 4E 85 F1 | 	sub	fp, #36
0f040     08 12 06 F1 | 	add	arg01, #8
0f044     E8 B8 B0 FD | 	call	#_pslpeek
0f048     FD 1E 02 F6 | 	mov	local01, result1
0f04c     38 4E 05 F1 | 	add	fp, #56
0f050     A7 24 02 FB | 	rdlong	local04, fp
0f054     38 4E 85 F1 | 	sub	fp, #56
0f058     0F 25 12 F2 | 	cmp	local04, local01 wc
0f05c     28 00 90 3D |  if_ae	jmp	#LR__1186
0f060     24 4E 05 F1 | 	add	fp, #36
0f064     A7 12 02 FB | 	rdlong	arg01, fp
0f068     24 4E 85 F1 | 	sub	fp, #36
0f06c     0C 12 06 F1 | 	add	arg01, #12
0f070     BC B8 B0 FD | 	call	#_pslpeek
0f074     3C 4E 05 F1 | 	add	fp, #60
0f078     A7 24 02 FB | 	rdlong	local04, fp
0f07c     3C 4E 85 F1 | 	sub	fp, #60
0f080     FD 24 12 F2 | 	cmp	local04, result1 wc
0f084     0C 00 90 CD |  if_b	jmp	#LR__1187
0f088                 | LR__1186
0f088     31 12 06 F6 | 	mov	arg01, #49
0f08c     0C B6 B0 FD | 	call	#_printerror
0f090     60 02 90 FD | 	jmp	#LR__1203
0f094                 | LR__1187
0f094     24 4E 05 F1 | 	add	fp, #36
0f098     A7 12 02 FB | 	rdlong	arg01, fp
0f09c     09 25 02 F6 | 	mov	local04, arg01
0f0a0     10 24 06 F1 | 	add	local04, #16
0f0a4     24 4E 85 F1 | 	sub	fp, #36
0f0a8     04 12 06 F1 | 	add	arg01, #4
0f0ac     80 B8 B0 FD | 	call	#_pslpeek
0f0b0     FD 1E 02 F6 | 	mov	local01, result1
0f0b4     38 4E 05 F1 | 	add	fp, #56
0f0b8     A7 20 02 FB | 	rdlong	local02, fp
0f0bc     10 1F 02 FD | 	qmul	local01, local02
0f0c0     04 4E 85 F1 | 	sub	fp, #4
0f0c4     A7 22 02 FB | 	rdlong	local03, fp
0f0c8     10 4E 85 F1 | 	sub	fp, #16
0f0cc     A7 12 02 FB | 	rdlong	arg01, fp
0f0d0     24 4E 85 F1 | 	sub	fp, #36
0f0d4     08 12 06 F1 | 	add	arg01, #8
0f0d8     18 20 62 FD | 	getqx	local02
0f0dc     10 23 02 F1 | 	add	local03, local02
0f0e0     4C B8 B0 FD | 	call	#_pslpeek
0f0e4     FD 20 02 F6 | 	mov	local02, result1
0f0e8     24 4E 05 F1 | 	add	fp, #36
0f0ec     A7 12 02 FB | 	rdlong	arg01, fp
0f0f0     24 4E 85 F1 | 	sub	fp, #36
0f0f4     04 12 06 F1 | 	add	arg01, #4
0f0f8     34 B8 B0 FD | 	call	#_pslpeek
0f0fc     FD 20 02 FD | 	qmul	local02, result1
0f100     3C 4E 05 F1 | 	add	fp, #60
0f104     A7 20 02 FB | 	rdlong	local02, fp
0f108     18 1E 62 FD | 	getqx	local01
0f10c     10 1F 02 FD | 	qmul	local01, local02
0f110     10 4E 85 F1 | 	sub	fp, #16
0f114     A7 20 02 FB | 	rdlong	local02, fp
0f118     18 1E 62 FD | 	getqx	local01
0f11c     0F 23 02 F1 | 	add	local03, local01
0f120     11 21 02 FD | 	qmul	local02, local03
0f124     04 4E 05 F1 | 	add	fp, #4
0f128                 | ' 
0f128                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
0f128                 | ' select case arrtype
0f128     18 22 62 FD | 	getqx	local03
0f12c     11 25 02 F1 | 	add	local04, local03
0f130     A7 24 62 FC | 	wrlong	local04, fp
0f134     08 4E 85 F1 | 	sub	fp, #8
0f138     A7 26 02 FB | 	rdlong	local05, fp
0f13c     28 4E 85 F1 | 	sub	fp, #40
0f140     00 27 86 F1 | 	sub	local05, #256
0f144     0C 26 26 F3 | 	fle	local05, #12
0f148     30 26 62 FD | 	jmprel	local05
0f14c                 | LR__1188
0f14c     30 00 90 FD | 	jmp	#LR__1189
0f150     58 00 90 FD | 	jmp	#LR__1190
0f154     6C 00 90 FD | 	jmp	#LR__1191
0f158     80 00 90 FD | 	jmp	#LR__1192
0f15c     B0 00 90 FD | 	jmp	#LR__1193
0f160     E0 00 90 FD | 	jmp	#LR__1194
0f164     F4 00 90 FD | 	jmp	#LR__1195
0f168     08 01 90 FD | 	jmp	#LR__1196
0f16c     1C 01 90 FD | 	jmp	#LR__1197
0f170     30 01 90 FD | 	jmp	#LR__1198
0f174     44 01 90 FD | 	jmp	#LR__1199
0f178     58 01 90 FD | 	jmp	#LR__1200
0f17c     6C 01 90 FD | 	jmp	#LR__1201
0f180                 | LR__1189
0f180     A7 12 02 F6 | 	mov	arg01, fp
0f184     30 4E 05 F1 | 	add	fp, #48
0f188     A7 14 02 FB | 	rdlong	arg02, fp
0f18c     30 4E 85 F1 | 	sub	fp, #48
0f190     0C 16 06 F6 | 	mov	arg03, #12
0f194     0B 00 00 FF 
0f198     CC E4 05 F1 | 	add	objptr, ##5836
0f19c     F0 ED B0 FD | 	call	#_psram_spin2_write
0f1a0     0B 00 00 FF 
0f1a4     CC E4 85 F1 | 	sub	objptr, ##5836
0f1a8     48 01 90 FD | 	jmp	#LR__1202
0f1ac                 | LR__1190
0f1ac     30 4E 05 F1 | 	add	fp, #48
0f1b0     A7 12 02 FB | 	rdlong	arg01, fp
0f1b4     30 4E 85 F1 | 	sub	fp, #48
0f1b8     A7 14 02 FB | 	rdlong	arg02, fp
0f1bc     D0 B6 B0 FD | 	call	#_pspoke
0f1c0     30 01 90 FD | 	jmp	#LR__1202
0f1c4                 | LR__1191
0f1c4     30 4E 05 F1 | 	add	fp, #48
0f1c8     A7 12 02 FB | 	rdlong	arg01, fp
0f1cc     30 4E 85 F1 | 	sub	fp, #48
0f1d0     A7 14 02 FB | 	rdlong	arg02, fp
0f1d4     B8 B6 B0 FD | 	call	#_pspoke
0f1d8     18 01 90 FD | 	jmp	#LR__1202
0f1dc                 | LR__1192
0f1dc     30 4E 05 F1 | 	add	fp, #48
0f1e0     A7 12 02 FB | 	rdlong	arg01, fp
0f1e4     30 4E 85 F1 | 	sub	fp, #48
0f1e8     A7 14 02 FB | 	rdlong	arg02, fp
0f1ec     A0 B6 B0 FD | 	call	#_pspoke
0f1f0     30 4E 05 F1 | 	add	fp, #48
0f1f4     A7 12 02 FB | 	rdlong	arg01, fp
0f1f8     30 4E 85 F1 | 	sub	fp, #48
0f1fc     01 12 06 F1 | 	add	arg01, #1
0f200     A7 14 02 FB | 	rdlong	arg02, fp
0f204     08 14 46 F0 | 	shr	arg02, #8
0f208     84 B6 B0 FD | 	call	#_pspoke
0f20c     E4 00 90 FD | 	jmp	#LR__1202
0f210                 | LR__1193
0f210     30 4E 05 F1 | 	add	fp, #48
0f214     A7 12 02 FB | 	rdlong	arg01, fp
0f218     30 4E 85 F1 | 	sub	fp, #48
0f21c     A7 14 02 FB | 	rdlong	arg02, fp
0f220     6C B6 B0 FD | 	call	#_pspoke
0f224     30 4E 05 F1 | 	add	fp, #48
0f228     A7 12 02 FB | 	rdlong	arg01, fp
0f22c     30 4E 85 F1 | 	sub	fp, #48
0f230     01 12 06 F1 | 	add	arg01, #1
0f234     A7 14 02 FB | 	rdlong	arg02, fp
0f238     08 14 46 F0 | 	shr	arg02, #8
0f23c     50 B6 B0 FD | 	call	#_pspoke
0f240     B0 00 90 FD | 	jmp	#LR__1202
0f244                 | LR__1194
0f244     30 4E 05 F1 | 	add	fp, #48
0f248     A7 12 02 FB | 	rdlong	arg01, fp
0f24c     30 4E 85 F1 | 	sub	fp, #48
0f250     A7 14 02 FB | 	rdlong	arg02, fp
0f254     A8 B5 B0 FD | 	call	#_pslpoke
0f258     98 00 90 FD | 	jmp	#LR__1202
0f25c                 | LR__1195
0f25c     30 4E 05 F1 | 	add	fp, #48
0f260     A7 12 02 FB | 	rdlong	arg01, fp
0f264     30 4E 85 F1 | 	sub	fp, #48
0f268     A7 14 02 FB | 	rdlong	arg02, fp
0f26c     90 B5 B0 FD | 	call	#_pslpoke
0f270     80 00 90 FD | 	jmp	#LR__1202
0f274                 | LR__1196
0f274     30 4E 05 F1 | 	add	fp, #48
0f278     A7 12 02 FB | 	rdlong	arg01, fp
0f27c     30 4E 85 F1 | 	sub	fp, #48
0f280     A7 14 02 FB | 	rdlong	arg02, fp
0f284     78 B5 B0 FD | 	call	#_pslpoke
0f288     68 00 90 FD | 	jmp	#LR__1202
0f28c                 | LR__1197
0f28c     30 4E 05 F1 | 	add	fp, #48
0f290     A7 12 02 FB | 	rdlong	arg01, fp
0f294     30 4E 85 F1 | 	sub	fp, #48
0f298     A7 14 02 FB | 	rdlong	arg02, fp
0f29c     60 B5 B0 FD | 	call	#_pslpoke
0f2a0     50 00 90 FD | 	jmp	#LR__1202
0f2a4                 | LR__1198
0f2a4     30 4E 05 F1 | 	add	fp, #48
0f2a8     A7 12 02 FB | 	rdlong	arg01, fp
0f2ac     30 4E 85 F1 | 	sub	fp, #48
0f2b0     A7 14 02 FB | 	rdlong	arg02, fp
0f2b4     48 B5 B0 FD | 	call	#_pslpoke
0f2b8     38 00 90 FD | 	jmp	#LR__1202
0f2bc                 | LR__1199
0f2bc     30 4E 05 F1 | 	add	fp, #48
0f2c0     A7 12 02 FB | 	rdlong	arg01, fp
0f2c4     30 4E 85 F1 | 	sub	fp, #48
0f2c8     A7 14 02 FB | 	rdlong	arg02, fp
0f2cc     30 B5 B0 FD | 	call	#_pslpoke
0f2d0     20 00 90 FD | 	jmp	#LR__1202
0f2d4                 | LR__1200
0f2d4     30 4E 05 F1 | 	add	fp, #48
0f2d8     A7 12 02 FB | 	rdlong	arg01, fp
0f2dc     30 4E 85 F1 | 	sub	fp, #48
0f2e0     A7 14 02 FB | 	rdlong	arg02, fp
0f2e4     18 B5 B0 FD | 	call	#_pslpoke
0f2e8     08 00 90 FD | 	jmp	#LR__1202
0f2ec                 | LR__1201
0f2ec     2F 12 06 F6 | 	mov	arg01, #47
0f2f0     A8 B3 B0 FD | 	call	#_printerror
0f2f4                 | LR__1202
0f2f4                 | LR__1203
0f2f4     A7 F0 03 F6 | 	mov	ptra, fp
0f2f8     B2 00 A0 FD | 	call	#popregs_
0f2fc                 | _do_assign_ret
0f2fc     2D 00 64 FD | 	ret
0f300                 | 
0f300                 | ' 
0f300                 | ' 
0f300                 | ' ' --------------------- Read a variable and push to the stack
0f300                 | ' 
0f300                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
0f300                 | ' 
0f300                 | ' sub do_getvar
0f300                 | _do_getvar
0f300     04 4A 05 F6 | 	mov	COUNT_, #4
0f304     A8 00 A0 FD | 	call	#pushregs_
0f308     3C F0 07 F1 | 	add	ptra, #60
0f30c                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0f30c                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0f30c     6A 00 00 FF 
0f310     80 E4 05 F1 | 	add	objptr, ##54400
0f314     F2 1E 02 FB | 	rdlong	local01, objptr
0f318     0F 17 02 F6 | 	mov	arg03, local01
0f31c     01 16 66 F0 | 	shl	arg03, #1
0f320     0F 17 02 F1 | 	add	arg03, local01
0f324     02 16 66 F0 | 	shl	arg03, #2
0f328     03 00 00 FF 
0f32c     04 E4 85 F1 | 	sub	objptr, ##1540
0f330     F2 16 02 F1 | 	add	arg03, objptr
0f334     04 16 06 F1 | 	add	arg03, #4
0f338     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0f33c     67 00 00 FF 
0f340     7C E4 85 F1 | 	sub	objptr, ##52860
0f344     C4 00 90 5D |  if_ne	jmp	#LR__1211
0f348     6A 00 00 FF 
0f34c     80 E4 05 F1 | 	add	objptr, ##54400
0f350     F2 1E 02 FB | 	rdlong	local01, objptr
0f354     0F 13 02 F6 | 	mov	arg01, local01
0f358     01 12 66 F0 | 	shl	arg01, #1
0f35c     0F 13 02 F1 | 	add	arg01, local01
0f360     02 12 66 F0 | 	shl	arg01, #2
0f364     03 00 00 FF 
0f368     04 E4 85 F1 | 	sub	objptr, ##1540
0f36c     F2 12 02 F1 | 	add	arg01, objptr
0f370     09 1F 02 FB | 	rdlong	local01, arg01
0f374     04 1E 66 F0 | 	shl	local01, #4
0f378     32 00 00 FF 
0f37c     84 E4 85 F1 | 	sub	objptr, ##25732
0f380     F2 1E 02 F1 | 	add	local01, objptr
0f384     04 1E 06 F1 | 	add	local01, #4
0f388     0F 13 02 FB | 	rdlong	arg01, local01
0f38c     04 1E 06 F1 | 	add	local01, #4
0f390     0F 1F 02 FB | 	rdlong	local01, local01
0f394     A7 12 62 FC | 	wrlong	arg01, fp
0f398     04 4E 05 F1 | 	add	fp, #4
0f39c     A7 1E 62 FC | 	wrlong	local01, fp
0f3a0     35 00 00 FF 
0f3a4     88 E4 05 F1 | 	add	objptr, ##27272
0f3a8     F2 1E 02 FB | 	rdlong	local01, objptr
0f3ac     0F 13 02 F6 | 	mov	arg01, local01
0f3b0     01 12 66 F0 | 	shl	arg01, #1
0f3b4     0F 13 02 F1 | 	add	arg01, local01
0f3b8     02 12 66 F0 | 	shl	arg01, #2
0f3bc     03 00 00 FF 
0f3c0     04 E4 85 F1 | 	sub	objptr, ##1540
0f3c4     F2 12 02 F1 | 	add	arg01, objptr
0f3c8     09 1F 02 FB | 	rdlong	local01, arg01
0f3cc     04 1E 66 F0 | 	shl	local01, #4
0f3d0     32 00 00 FF 
0f3d4     84 E4 85 F1 | 	sub	objptr, ##25732
0f3d8     F2 1E 02 F1 | 	add	local01, objptr
0f3dc     0C 1E 06 F1 | 	add	local01, #12
0f3e0     0F 1F 02 FB | 	rdlong	local01, local01
0f3e4     04 4E 05 F1 | 	add	fp, #4
0f3e8     A7 1E 62 FC | 	wrlong	local01, fp
0f3ec                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
0f3ec                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0f3ec                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
0f3ec     08 4E 85 F1 | 	sub	fp, #8
0f3f0     00 1F 16 F2 | 	cmp	local01, #256 wc
0f3f4     34 00 00 FF 
0f3f8     F8 E5 85 F1 | 	sub	objptr, ##27128
0f3fc     0C 00 90 3D |  if_ae	jmp	#LR__1210
0f400     A7 12 02 F6 | 	mov	arg01, fp
0f404     F0 B4 BF FD | 	call	#_push
0f408     A0 04 90 FD | 	jmp	#LR__1232
0f40c                 | LR__1210
0f40c                 | LR__1211
0f40c     6A 00 00 FF 
0f410     80 E4 05 F1 | 	add	objptr, ##54400
0f414     F2 16 02 FB | 	rdlong	arg03, objptr
0f418     0B 15 02 F6 | 	mov	arg02, arg03
0f41c     01 14 66 F0 | 	shl	arg02, #1
0f420     0B 15 02 F1 | 	add	arg02, arg03
0f424     02 14 66 F0 | 	shl	arg02, #2
0f428     03 00 00 FF 
0f42c     04 E4 85 F1 | 	sub	objptr, ##1540
0f430     F2 14 02 F1 | 	add	arg02, objptr
0f434     0A 17 02 FB | 	rdlong	arg03, arg02
0f438     04 16 66 F0 | 	shl	arg03, #4
0f43c     32 00 00 FF 
0f440     84 E4 85 F1 | 	sub	objptr, ##25732
0f444     F2 16 02 F1 | 	add	arg03, objptr
0f448     04 16 06 F1 | 	add	arg03, #4
0f44c     0B 13 02 FB | 	rdlong	arg01, arg03
0f450     0C 4E 05 F1 | 	add	fp, #12
0f454     A7 12 62 FC | 	wrlong	arg01, fp
0f458     0C 4E 85 F1 | 	sub	fp, #12
0f45c     34 00 00 FF 
0f460     F8 E5 85 F1 | 	sub	objptr, ##27128
0f464     C8 B4 B0 FD | 	call	#_pslpeek
0f468     FD FA 31 F9 | 	getword	result1, result1, #0
0f46c     10 4E 05 F1 | 	add	fp, #16
0f470     A7 FA 61 FC | 	wrlong	result1, fp
0f474     6A 00 00 FF 
0f478     80 E4 05 F1 | 	add	objptr, ##54400
0f47c     F2 16 02 FB | 	rdlong	arg03, objptr
0f480     0B 15 02 F6 | 	mov	arg02, arg03
0f484     01 14 66 F0 | 	shl	arg02, #1
0f488     0B 15 02 F1 | 	add	arg02, arg03
0f48c     02 14 66 F0 | 	shl	arg02, #2
0f490     03 00 00 FF 
0f494     04 E4 85 F1 | 	sub	objptr, ##1540
0f498     F2 14 02 F1 | 	add	arg02, objptr
0f49c     04 14 06 F1 | 	add	arg02, #4
0f4a0     0A 17 02 FB | 	rdlong	arg03, arg02
0f4a4     04 4E 05 F1 | 	add	fp, #4
0f4a8     A7 16 62 FC | 	wrlong	arg03, fp
0f4ac     08 4E 85 F1 | 	sub	fp, #8
0f4b0     A7 12 02 FB | 	rdlong	arg01, fp
0f4b4     0C 4E 85 F1 | 	sub	fp, #12
0f4b8     02 12 06 F1 | 	add	arg01, #2
0f4bc     67 00 00 FF 
0f4c0     7C E4 85 F1 | 	sub	objptr, ##52860
0f4c4     10 B4 B0 FD | 	call	#_pspeek
0f4c8     FD FA E1 F8 | 	getbyte	result1, result1, #0
0f4cc     18 4E 05 F1 | 	add	fp, #24
0f4d0     A7 FA 61 FC | 	wrlong	result1, fp
0f4d4     0C 4E 85 F1 | 	sub	fp, #12
0f4d8     A7 12 02 FB | 	rdlong	arg01, fp
0f4dc     0C 4E 85 F1 | 	sub	fp, #12
0f4e0     04 12 06 F1 | 	add	arg01, #4
0f4e4     48 B4 B0 FD | 	call	#_pslpeek
0f4e8     1C 4E 05 F1 | 	add	fp, #28
0f4ec     A7 FA 61 FC | 	wrlong	result1, fp
0f4f0     10 4E 85 F1 | 	sub	fp, #16
0f4f4     A7 12 02 FB | 	rdlong	arg01, fp
0f4f8     0C 4E 85 F1 | 	sub	fp, #12
0f4fc     08 12 06 F1 | 	add	arg01, #8
0f500     2C B4 B0 FD | 	call	#_pslpeek
0f504     20 4E 05 F1 | 	add	fp, #32
0f508     A7 FA 61 FC | 	wrlong	result1, fp
0f50c     14 4E 85 F1 | 	sub	fp, #20
0f510     A7 12 02 FB | 	rdlong	arg01, fp
0f514     0C 4E 85 F1 | 	sub	fp, #12
0f518     0C 12 06 F1 | 	add	arg01, #12
0f51c     10 B4 B0 FD | 	call	#_pslpeek
0f520     24 4E 05 F1 | 	add	fp, #36
0f524     A7 FA 61 FC | 	wrlong	result1, fp
0f528                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0f528                 | ' esize=pspeek(arrptr+2)
0f528                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0f528                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0f528                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0f528                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
0f528     10 4E 85 F1 | 	sub	fp, #16
0f52c     A7 16 02 FB | 	rdlong	arg03, fp
0f530     14 4E 85 F1 | 	sub	fp, #20
0f534     03 16 16 F2 | 	cmp	arg03, #3 wc
0f538     38 00 90 CD |  if_b	jmp	#LR__1212
0f53c     20 B3 BF FD | 	call	#_pop
0f540     FF 16 02 F6 | 	mov	arg03, result3
0f544     A7 FA 61 FC | 	wrlong	result1, fp
0f548     04 4E 05 F1 | 	add	fp, #4
0f54c     A7 FC 61 FC | 	wrlong	result2, fp
0f550     04 4E 05 F1 | 	add	fp, #4
0f554     A7 16 62 FC | 	wrlong	arg03, fp
0f558     08 4E 85 F1 | 	sub	fp, #8
0f55c     A7 12 02 F6 | 	mov	arg01, fp
0f560     54 3F B0 FD | 	call	#_converttoint
0f564     30 4E 05 F1 | 	add	fp, #48
0f568     A7 FA 61 FC | 	wrlong	result1, fp
0f56c     30 4E 85 F1 | 	sub	fp, #48
0f570     0C 00 90 FD | 	jmp	#LR__1213
0f574                 | LR__1212
0f574     30 4E 05 F1 | 	add	fp, #48
0f578     A7 00 68 FC | 	wrlong	#0, fp
0f57c     30 4E 85 F1 | 	sub	fp, #48
0f580                 | LR__1213
0f580                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
0f580     14 4E 05 F1 | 	add	fp, #20
0f584     A7 16 02 FB | 	rdlong	arg03, fp
0f588     14 4E 85 F1 | 	sub	fp, #20
0f58c     02 16 16 F2 | 	cmp	arg03, #2 wc
0f590     38 00 90 CD |  if_b	jmp	#LR__1214
0f594     C8 B2 BF FD | 	call	#_pop
0f598     FF 16 02 F6 | 	mov	arg03, result3
0f59c     A7 FA 61 FC | 	wrlong	result1, fp
0f5a0     04 4E 05 F1 | 	add	fp, #4
0f5a4     A7 FC 61 FC | 	wrlong	result2, fp
0f5a8     04 4E 05 F1 | 	add	fp, #4
0f5ac     A7 16 62 FC | 	wrlong	arg03, fp
0f5b0     08 4E 85 F1 | 	sub	fp, #8
0f5b4     A7 12 02 F6 | 	mov	arg01, fp
0f5b8     FC 3E B0 FD | 	call	#_converttoint
0f5bc     2C 4E 05 F1 | 	add	fp, #44
0f5c0     A7 FA 61 FC | 	wrlong	result1, fp
0f5c4     2C 4E 85 F1 | 	sub	fp, #44
0f5c8     0C 00 90 FD | 	jmp	#LR__1215
0f5cc                 | LR__1214
0f5cc     2C 4E 05 F1 | 	add	fp, #44
0f5d0     A7 00 68 FC | 	wrlong	#0, fp
0f5d4     2C 4E 85 F1 | 	sub	fp, #44
0f5d8                 | LR__1215
0f5d8                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
0f5d8     14 4E 05 F1 | 	add	fp, #20
0f5dc     A7 16 02 FB | 	rdlong	arg03, fp
0f5e0     14 4E 85 F1 | 	sub	fp, #20
0f5e4     01 16 16 F2 | 	cmp	arg03, #1 wc
0f5e8     38 00 90 CD |  if_b	jmp	#LR__1216
0f5ec     70 B2 BF FD | 	call	#_pop
0f5f0     FF 16 02 F6 | 	mov	arg03, result3
0f5f4     A7 FA 61 FC | 	wrlong	result1, fp
0f5f8     04 4E 05 F1 | 	add	fp, #4
0f5fc     A7 FC 61 FC | 	wrlong	result2, fp
0f600     04 4E 05 F1 | 	add	fp, #4
0f604     A7 16 62 FC | 	wrlong	arg03, fp
0f608     08 4E 85 F1 | 	sub	fp, #8
0f60c     A7 12 02 F6 | 	mov	arg01, fp
0f610     A4 3E B0 FD | 	call	#_converttoint
0f614     28 4E 05 F1 | 	add	fp, #40
0f618     A7 FA 61 FC | 	wrlong	result1, fp
0f61c     28 4E 85 F1 | 	sub	fp, #40
0f620     0C 00 90 FD | 	jmp	#LR__1217
0f624                 | LR__1216
0f624     28 4E 05 F1 | 	add	fp, #40
0f628     A7 00 68 FC | 	wrlong	#0, fp
0f62c     28 4E 85 F1 | 	sub	fp, #40
0f630                 | LR__1217
0f630     0C 4E 05 F1 | 	add	fp, #12
0f634     A7 20 02 FB | 	rdlong	local02, fp
0f638     1C 4E 05 F1 | 	add	fp, #28
0f63c     A7 22 02 FB | 	rdlong	local03, fp
0f640     04 4E 05 F1 | 	add	fp, #4
0f644     A7 FC 01 FB | 	rdlong	result2, fp
0f648     10 4E 85 F1 | 	sub	fp, #16
0f64c     A7 FE 01 FB | 	rdlong	result3, fp
0f650     FF FC 01 FD | 	qmul	result2, result3
0f654     10 20 06 F1 | 	add	local02, #16
0f658     14 4E 05 F1 | 	add	fp, #20
0f65c     A7 FC 01 FB | 	rdlong	result2, fp
0f660     18 FA 61 FD | 	getqx	result1
0f664     FF FC 01 FD | 	qmul	result2, result3
0f668     FD 22 02 F1 | 	add	local03, result1
0f66c     10 4E 85 F1 | 	sub	fp, #16
0f670     A7 FE 01 FB | 	rdlong	result3, fp
0f674     18 FC 61 FD | 	getqx	result2
0f678     FF FC 01 FD | 	qmul	result2, result3
0f67c     08 4E 85 F1 | 	sub	fp, #8
0f680     A7 FE 01 FB | 	rdlong	result3, fp
0f684     18 FC 61 FD | 	getqx	result2
0f688     FE 22 02 F1 | 	add	local03, result2
0f68c     FF 22 02 FD | 	qmul	local03, result3
0f690     1C 4E 05 F1 | 	add	fp, #28
0f694                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0f694                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize ': print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
0f694                 | ' 
0f694                 | ' select case vartype
0f694     18 FC 61 FD | 	getqx	result2
0f698     FE 20 02 F1 | 	add	local02, result2
0f69c     A7 20 62 FC | 	wrlong	local02, fp
0f6a0     24 4E 85 F1 | 	sub	fp, #36
0f6a4     A7 24 02 FB | 	rdlong	local04, fp
0f6a8     10 4E 85 F1 | 	sub	fp, #16
0f6ac     00 25 86 F1 | 	sub	local04, #256
0f6b0     0C 24 26 F3 | 	fle	local04, #12
0f6b4     30 24 62 FD | 	jmprel	local04
0f6b8                 | LR__1218
0f6b8     30 00 90 FD | 	jmp	#LR__1219
0f6bc     58 00 90 FD | 	jmp	#LR__1220
0f6c0     8C 00 90 FD | 	jmp	#LR__1221
0f6c4     AC 00 90 FD | 	jmp	#LR__1222
0f6c8     E8 00 90 FD | 	jmp	#LR__1223
0f6cc     08 01 90 FD | 	jmp	#LR__1224
0f6d0     24 01 90 FD | 	jmp	#LR__1225
0f6d4     40 01 90 FD | 	jmp	#LR__1226
0f6d8     50 01 90 FD | 	jmp	#LR__1227
0f6dc     60 01 90 FD | 	jmp	#LR__1228
0f6e0     7C 01 90 FD | 	jmp	#LR__1229
0f6e4     8C 01 90 FD | 	jmp	#LR__1230
0f6e8     B8 01 90 FD | 	jmp	#LR__1231
0f6ec                 | LR__1219
0f6ec     A7 12 02 F6 | 	mov	arg01, fp
0f6f0     34 4E 05 F1 | 	add	fp, #52
0f6f4     A7 14 02 FB | 	rdlong	arg02, fp
0f6f8     34 4E 85 F1 | 	sub	fp, #52
0f6fc     0C 16 06 F6 | 	mov	arg03, #12
0f700     0B 00 00 FF 
0f704     CC E4 05 F1 | 	add	objptr, ##5836
0f708     E8 E7 B0 FD | 	call	#_psram_spin2_read1
0f70c     0B 00 00 FF 
0f710     CC E4 85 F1 | 	sub	objptr, ##5836
0f714     8C 01 90 FD | 	jmp	#LR__1231
0f718                 | LR__1220
0f718     08 4E 05 F1 | 	add	fp, #8
0f71c     A7 38 68 FC | 	wrlong	#28, fp
0f720     2C 4E 05 F1 | 	add	fp, #44
0f724     A7 12 02 FB | 	rdlong	arg01, fp
0f728     34 4E 85 F1 | 	sub	fp, #52
0f72c     A8 B1 B0 FD | 	call	#_pspeek
0f730     FD FA E1 F8 | 	getbyte	result1, result1, #0
0f734     A7 FA 61 FC | 	wrlong	result1, fp
0f738     80 FA 15 F2 | 	cmp	result1, #128 wc
0f73c     00 1F 66 36 |  if_ae	neg	local01, #256
0f740     A7 22 02 3B |  if_ae	rdlong	local03, fp
0f744     11 1F 42 35 |  if_ae	or	local01, local03
0f748     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0f74c     54 01 90 FD | 	jmp	#LR__1231
0f750                 | LR__1221
0f750     08 4E 05 F1 | 	add	fp, #8
0f754     A7 3A 68 FC | 	wrlong	#29, fp
0f758     2C 4E 05 F1 | 	add	fp, #44
0f75c     A7 12 02 FB | 	rdlong	arg01, fp
0f760     34 4E 85 F1 | 	sub	fp, #52
0f764     70 B1 B0 FD | 	call	#_pspeek
0f768     FD FA E1 F8 | 	getbyte	result1, result1, #0
0f76c     A7 FA 61 FC | 	wrlong	result1, fp
0f770     30 01 90 FD | 	jmp	#LR__1231
0f774                 | LR__1222
0f774     08 4E 05 F1 | 	add	fp, #8
0f778     A7 38 68 FC | 	wrlong	#28, fp
0f77c     2C 4E 05 F1 | 	add	fp, #44
0f780     A7 12 02 FB | 	rdlong	arg01, fp
0f784     34 4E 85 F1 | 	sub	fp, #52
0f788     A4 B1 B0 FD | 	call	#_pslpeek
0f78c     FD FA 31 F9 | 	getword	result1, result1, #0
0f790     A7 FA 61 FC | 	wrlong	result1, fp
0f794     40 00 00 FF 
0f798     00 FA 15 F2 | 	cmp	result1, ##32768 wc
0f79c     FF 7F 00 3F 
0f7a0     00 1F 06 36 |  if_ae	mov	local01, ##16776960
0f7a4     A7 22 02 3B |  if_ae	rdlong	local03, fp
0f7a8     11 1F 42 35 |  if_ae	or	local01, local03
0f7ac     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0f7b0     F0 00 90 FD | 	jmp	#LR__1231
0f7b4                 | LR__1223
0f7b4     08 4E 05 F1 | 	add	fp, #8
0f7b8     A7 3A 68 FC | 	wrlong	#29, fp
0f7bc     2C 4E 05 F1 | 	add	fp, #44
0f7c0     A7 12 02 FB | 	rdlong	arg01, fp
0f7c4     34 4E 85 F1 | 	sub	fp, #52
0f7c8     64 B1 B0 FD | 	call	#_pslpeek
0f7cc     FD FA 31 F9 | 	getword	result1, result1, #0
0f7d0     A7 FA 61 FC | 	wrlong	result1, fp
0f7d4     CC 00 90 FD | 	jmp	#LR__1231
0f7d8                 | LR__1224
0f7d8     08 4E 05 F1 | 	add	fp, #8
0f7dc     A7 38 68 FC | 	wrlong	#28, fp
0f7e0     2C 4E 05 F1 | 	add	fp, #44
0f7e4     A7 12 02 FB | 	rdlong	arg01, fp
0f7e8     34 4E 85 F1 | 	sub	fp, #52
0f7ec     40 B1 B0 FD | 	call	#_pslpeek
0f7f0     A7 FA 61 FC | 	wrlong	result1, fp
0f7f4     AC 00 90 FD | 	jmp	#LR__1231
0f7f8                 | LR__1225
0f7f8     08 4E 05 F1 | 	add	fp, #8
0f7fc     A7 3A 68 FC | 	wrlong	#29, fp
0f800     2C 4E 05 F1 | 	add	fp, #44
0f804     A7 12 02 FB | 	rdlong	arg01, fp
0f808     34 4E 85 F1 | 	sub	fp, #52
0f80c     20 B1 B0 FD | 	call	#_pslpeek
0f810     A7 FA 61 FC | 	wrlong	result1, fp
0f814     8C 00 90 FD | 	jmp	#LR__1231
0f818                 | LR__1226
0f818     08 4E 05 F1 | 	add	fp, #8
0f81c     A7 FE 69 FC | 	wrlong	#255, fp
0f820     08 4E 85 F1 | 	sub	fp, #8
0f824     A7 60 68 FC | 	wrlong	#48, fp
0f828     78 00 90 FD | 	jmp	#LR__1231
0f82c                 | LR__1227
0f82c     08 4E 05 F1 | 	add	fp, #8
0f830     A7 FE 69 FC | 	wrlong	#255, fp
0f834     08 4E 85 F1 | 	sub	fp, #8
0f838     A7 60 68 FC | 	wrlong	#48, fp
0f83c     64 00 90 FD | 	jmp	#LR__1231
0f840                 | LR__1228
0f840     08 4E 05 F1 | 	add	fp, #8
0f844     A7 3C 68 FC | 	wrlong	#30, fp
0f848     2C 4E 05 F1 | 	add	fp, #44
0f84c     A7 12 02 FB | 	rdlong	arg01, fp
0f850     34 4E 85 F1 | 	sub	fp, #52
0f854     D8 B0 B0 FD | 	call	#_pslpeek
0f858     A7 FA 61 FC | 	wrlong	result1, fp
0f85c     44 00 90 FD | 	jmp	#LR__1231
0f860                 | LR__1229
0f860     08 4E 05 F1 | 	add	fp, #8
0f864     A7 FE 69 FC | 	wrlong	#255, fp
0f868     08 4E 85 F1 | 	sub	fp, #8
0f86c     A7 60 68 FC | 	wrlong	#48, fp
0f870     30 00 90 FD | 	jmp	#LR__1231
0f874                 | LR__1230
0f874     08 4E 05 F1 | 	add	fp, #8
0f878     A7 3E 68 FC | 	wrlong	#31, fp
0f87c     2C 4E 05 F1 | 	add	fp, #44
0f880     A7 12 02 FB | 	rdlong	arg01, fp
0f884     34 4E 85 F1 | 	sub	fp, #52
0f888     A4 B0 B0 FD | 	call	#_pslpeek
0f88c     A7 FA 61 FC | 	wrlong	result1, fp
0f890     00 04 00 FF 
0f894     00 FA 15 F2 | 	cmp	result1, ##524288 wc
0f898     08 4E 05 31 |  if_ae	add	fp, #8
0f89c     A7 56 68 3C |  if_ae	wrlong	#43, fp
0f8a0     08 4E 85 31 |  if_ae	sub	fp, #8
0f8a4                 | LR__1231
0f8a4     A7 12 02 F6 | 	mov	arg01, fp
0f8a8     4C B0 BF FD | 	call	#_push
0f8ac                 | LR__1232
0f8ac     A7 F0 03 F6 | 	mov	ptra, fp
0f8b0     B2 00 A0 FD | 	call	#popregs_
0f8b4                 | _do_getvar_ret
0f8b4     2D 00 64 FD | 	ret
0f8b8                 | 
0f8b8                 | ' 
0f8b8                 | ' 
0f8b8                 | ' sub do_getaddr
0f8b8                 | _do_getaddr
0f8b8     01 4A 05 F6 | 	mov	COUNT_, #1
0f8bc     A8 00 A0 FD | 	call	#pushregs_
0f8c0     38 F0 07 F1 | 	add	ptra, #56
0f8c4                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0f8c4                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0f8c4     6A 00 00 FF 
0f8c8     80 E4 05 F1 | 	add	objptr, ##54400
0f8cc     F2 12 02 FB | 	rdlong	arg01, objptr
0f8d0     09 FD 01 F6 | 	mov	result2, arg01
0f8d4     01 FC 65 F0 | 	shl	result2, #1
0f8d8     09 FD 01 F1 | 	add	result2, arg01
0f8dc     02 FC 65 F0 | 	shl	result2, #2
0f8e0     03 00 00 FF 
0f8e4     04 E4 85 F1 | 	sub	objptr, ##1540
0f8e8     F2 FC 01 F1 | 	add	result2, objptr
0f8ec     04 FC 05 F1 | 	add	result2, #4
0f8f0     FE FC 09 FB | 	rdlong	result2, result2 wz
0f8f4     67 00 00 FF 
0f8f8     7C E4 85 F1 | 	sub	objptr, ##52860
0f8fc     C4 00 90 5D |  if_ne	jmp	#LR__1240
0f900     6A 00 00 FF 
0f904     80 E4 05 F1 | 	add	objptr, ##54400
0f908     F2 12 02 FB | 	rdlong	arg01, objptr
0f90c     09 FD 01 F6 | 	mov	result2, arg01
0f910     01 FC 65 F0 | 	shl	result2, #1
0f914     09 FD 01 F1 | 	add	result2, arg01
0f918     02 FC 65 F0 | 	shl	result2, #2
0f91c     03 00 00 FF 
0f920     04 E4 85 F1 | 	sub	objptr, ##1540
0f924     F2 FC 01 F1 | 	add	result2, objptr
0f928     FE 12 02 FB | 	rdlong	arg01, result2
0f92c     04 12 66 F0 | 	shl	arg01, #4
0f930     32 00 00 FF 
0f934     84 E4 85 F1 | 	sub	objptr, ##25732
0f938     F2 12 02 F1 | 	add	arg01, objptr
0f93c     0C 12 06 F1 | 	add	arg01, #12
0f940     09 13 02 FB | 	rdlong	arg01, arg01
0f944     08 4E 05 F1 | 	add	fp, #8
0f948     A7 12 62 FC | 	wrlong	arg01, fp
0f94c                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0f94c                 | '    if t1.result_type>=array_no_type then goto 2200
0f94c     08 4E 85 F1 | 	sub	fp, #8
0f950     00 13 16 F2 | 	cmp	arg01, #256 wc
0f954     34 00 00 FF 
0f958     F8 E5 85 F1 | 	sub	objptr, ##27128
0f95c     64 00 90 3D |  if_ae	jmp	#LR__1241
0f960     6A 00 00 FF 
0f964     80 E4 05 F1 | 	add	objptr, ##54400
0f968     F2 12 02 FB | 	rdlong	arg01, objptr
0f96c     09 FB 01 F6 | 	mov	result1, arg01
0f970     01 FA 65 F0 | 	shl	result1, #1
0f974     09 FB 01 F1 | 	add	result1, arg01
0f978     02 FA 65 F0 | 	shl	result1, #2
0f97c     03 00 00 FF 
0f980     04 E4 85 F1 | 	sub	objptr, ##1540
0f984     F2 FA 01 F1 | 	add	result1, objptr
0f988     FD FA 01 FB | 	rdlong	result1, result1
0f98c     04 FA 65 F0 | 	shl	result1, #4
0f990     32 00 00 FF 
0f994     84 E4 85 F1 | 	sub	objptr, ##25732
0f998     F2 FA 01 F1 | 	add	result1, objptr
0f99c     04 FA 05 F1 | 	add	result1, #4
0f9a0     34 00 00 FF 
0f9a4     F8 E5 85 F1 | 	sub	objptr, ##27128
0f9a8     A7 FA 61 FC | 	wrlong	result1, fp
0f9ac     08 4E 05 F1 | 	add	fp, #8
0f9b0     A7 3A 68 FC | 	wrlong	#29, fp
0f9b4     08 4E 85 F1 | 	sub	fp, #8
0f9b8     A7 12 02 F6 | 	mov	arg01, fp
0f9bc     38 AF BF FD | 	call	#_push
0f9c0                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
0f9c0                 | '   t1.result_type=result_uint
0f9c0                 | '   push t1 : return
0f9c0     D8 02 90 FD | 	jmp	#LR__1250
0f9c4                 | LR__1240
0f9c4                 | LR__1241
0f9c4     6A 00 00 FF 
0f9c8     80 E4 05 F1 | 	add	objptr, ##54400
0f9cc     F2 FE 01 FB | 	rdlong	result3, objptr
0f9d0     FF 12 02 F6 | 	mov	arg01, result3
0f9d4     01 12 66 F0 | 	shl	arg01, #1
0f9d8     FF 12 02 F1 | 	add	arg01, result3
0f9dc     02 12 66 F0 | 	shl	arg01, #2
0f9e0     03 00 00 FF 
0f9e4     04 E4 85 F1 | 	sub	objptr, ##1540
0f9e8     F2 12 02 F1 | 	add	arg01, objptr
0f9ec     09 13 02 FB | 	rdlong	arg01, arg01
0f9f0     04 12 66 F0 | 	shl	arg01, #4
0f9f4     32 00 00 FF 
0f9f8     84 E4 85 F1 | 	sub	objptr, ##25732
0f9fc     F2 12 02 F1 | 	add	arg01, objptr
0fa00     04 12 06 F1 | 	add	arg01, #4
0fa04     09 13 02 FB | 	rdlong	arg01, arg01
0fa08     0C 4E 05 F1 | 	add	fp, #12
0fa0c     A7 12 62 FC | 	wrlong	arg01, fp
0fa10     0C 4E 85 F1 | 	sub	fp, #12
0fa14     34 00 00 FF 
0fa18     F8 E5 85 F1 | 	sub	objptr, ##27128
0fa1c     10 AF B0 FD | 	call	#_pslpeek
0fa20     FD FA 31 F9 | 	getword	result1, result1, #0
0fa24     10 4E 05 F1 | 	add	fp, #16
0fa28     A7 FA 61 FC | 	wrlong	result1, fp
0fa2c     6A 00 00 FF 
0fa30     80 E4 05 F1 | 	add	objptr, ##54400
0fa34     F2 FE 01 FB | 	rdlong	result3, objptr
0fa38     FF 12 02 F6 | 	mov	arg01, result3
0fa3c     01 12 66 F0 | 	shl	arg01, #1
0fa40     FF 12 02 F1 | 	add	arg01, result3
0fa44     02 12 66 F0 | 	shl	arg01, #2
0fa48     03 00 00 FF 
0fa4c     04 E4 85 F1 | 	sub	objptr, ##1540
0fa50     F2 12 02 F1 | 	add	arg01, objptr
0fa54     04 12 06 F1 | 	add	arg01, #4
0fa58     09 13 02 FB | 	rdlong	arg01, arg01
0fa5c     04 4E 05 F1 | 	add	fp, #4
0fa60     A7 12 62 FC | 	wrlong	arg01, fp
0fa64     08 4E 85 F1 | 	sub	fp, #8
0fa68     A7 12 02 FB | 	rdlong	arg01, fp
0fa6c     0C 4E 85 F1 | 	sub	fp, #12
0fa70     02 12 06 F1 | 	add	arg01, #2
0fa74     67 00 00 FF 
0fa78     7C E4 85 F1 | 	sub	objptr, ##52860
0fa7c     58 AE B0 FD | 	call	#_pspeek
0fa80     FD FA E1 F8 | 	getbyte	result1, result1, #0
0fa84     18 4E 05 F1 | 	add	fp, #24
0fa88     A7 FA 61 FC | 	wrlong	result1, fp
0fa8c     0C 4E 85 F1 | 	sub	fp, #12
0fa90     A7 12 02 FB | 	rdlong	arg01, fp
0fa94     0C 4E 85 F1 | 	sub	fp, #12
0fa98     04 12 06 F1 | 	add	arg01, #4
0fa9c     90 AE B0 FD | 	call	#_pslpeek
0faa0     1C 4E 05 F1 | 	add	fp, #28
0faa4     A7 FA 61 FC | 	wrlong	result1, fp
0faa8     10 4E 85 F1 | 	sub	fp, #16
0faac     A7 12 02 FB | 	rdlong	arg01, fp
0fab0     0C 4E 85 F1 | 	sub	fp, #12
0fab4     08 12 06 F1 | 	add	arg01, #8
0fab8     74 AE B0 FD | 	call	#_pslpeek
0fabc     20 4E 05 F1 | 	add	fp, #32
0fac0     A7 FA 61 FC | 	wrlong	result1, fp
0fac4     14 4E 85 F1 | 	sub	fp, #20
0fac8     A7 12 02 FB | 	rdlong	arg01, fp
0facc     0C 4E 85 F1 | 	sub	fp, #12
0fad0     0C 12 06 F1 | 	add	arg01, #12
0fad4     58 AE B0 FD | 	call	#_pslpeek
0fad8     24 4E 05 F1 | 	add	fp, #36
0fadc     A7 FA 61 FC | 	wrlong	result1, fp
0fae0                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0fae0                 | ' esize=pspeek(arrptr+2)
0fae0                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0fae0                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0fae0                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0fae0                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
0fae0     10 4E 85 F1 | 	sub	fp, #16
0fae4     A7 12 02 FB | 	rdlong	arg01, fp
0fae8     14 4E 85 F1 | 	sub	fp, #20
0faec     03 12 16 F2 | 	cmp	arg01, #3 wc
0faf0     34 00 90 CD |  if_b	jmp	#LR__1242
0faf4     68 AD BF FD | 	call	#_pop
0faf8     A7 FA 61 FC | 	wrlong	result1, fp
0fafc     04 4E 05 F1 | 	add	fp, #4
0fb00     A7 FC 61 FC | 	wrlong	result2, fp
0fb04     04 4E 05 F1 | 	add	fp, #4
0fb08     A7 FE 61 FC | 	wrlong	result3, fp
0fb0c     08 4E 85 F1 | 	sub	fp, #8
0fb10     A7 12 02 F6 | 	mov	arg01, fp
0fb14     A0 39 B0 FD | 	call	#_converttoint
0fb18     30 4E 05 F1 | 	add	fp, #48
0fb1c     A7 FA 61 FC | 	wrlong	result1, fp
0fb20     30 4E 85 F1 | 	sub	fp, #48
0fb24     0C 00 90 FD | 	jmp	#LR__1243
0fb28                 | LR__1242
0fb28     30 4E 05 F1 | 	add	fp, #48
0fb2c     A7 00 68 FC | 	wrlong	#0, fp
0fb30     30 4E 85 F1 | 	sub	fp, #48
0fb34                 | LR__1243
0fb34                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
0fb34     14 4E 05 F1 | 	add	fp, #20
0fb38     A7 12 02 FB | 	rdlong	arg01, fp
0fb3c     14 4E 85 F1 | 	sub	fp, #20
0fb40     02 12 16 F2 | 	cmp	arg01, #2 wc
0fb44     34 00 90 CD |  if_b	jmp	#LR__1244
0fb48     14 AD BF FD | 	call	#_pop
0fb4c     A7 FA 61 FC | 	wrlong	result1, fp
0fb50     04 4E 05 F1 | 	add	fp, #4
0fb54     A7 FC 61 FC | 	wrlong	result2, fp
0fb58     04 4E 05 F1 | 	add	fp, #4
0fb5c     A7 FE 61 FC | 	wrlong	result3, fp
0fb60     08 4E 85 F1 | 	sub	fp, #8
0fb64     A7 12 02 F6 | 	mov	arg01, fp
0fb68     4C 39 B0 FD | 	call	#_converttoint
0fb6c     2C 4E 05 F1 | 	add	fp, #44
0fb70     A7 FA 61 FC | 	wrlong	result1, fp
0fb74     2C 4E 85 F1 | 	sub	fp, #44
0fb78     0C 00 90 FD | 	jmp	#LR__1245
0fb7c                 | LR__1244
0fb7c     2C 4E 05 F1 | 	add	fp, #44
0fb80     A7 00 68 FC | 	wrlong	#0, fp
0fb84     2C 4E 85 F1 | 	sub	fp, #44
0fb88                 | LR__1245
0fb88                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
0fb88     14 4E 05 F1 | 	add	fp, #20
0fb8c     A7 12 02 FB | 	rdlong	arg01, fp
0fb90     14 4E 85 F1 | 	sub	fp, #20
0fb94     01 12 16 F2 | 	cmp	arg01, #1 wc
0fb98     34 00 90 CD |  if_b	jmp	#LR__1246
0fb9c     C0 AC BF FD | 	call	#_pop
0fba0     A7 FA 61 FC | 	wrlong	result1, fp
0fba4     04 4E 05 F1 | 	add	fp, #4
0fba8     A7 FC 61 FC | 	wrlong	result2, fp
0fbac     04 4E 05 F1 | 	add	fp, #4
0fbb0     A7 FE 61 FC | 	wrlong	result3, fp
0fbb4     08 4E 85 F1 | 	sub	fp, #8
0fbb8     A7 12 02 F6 | 	mov	arg01, fp
0fbbc     F8 38 B0 FD | 	call	#_converttoint
0fbc0     28 4E 05 F1 | 	add	fp, #40
0fbc4     A7 FA 61 FC | 	wrlong	result1, fp
0fbc8     28 4E 85 F1 | 	sub	fp, #40
0fbcc     0C 00 90 FD | 	jmp	#LR__1247
0fbd0                 | LR__1246
0fbd0     28 4E 05 F1 | 	add	fp, #40
0fbd4     A7 00 68 FC | 	wrlong	#0, fp
0fbd8     28 4E 85 F1 | 	sub	fp, #40
0fbdc                 | LR__1247
0fbdc                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0fbdc                 | ' if numpar>0 then
0fbdc     14 4E 05 F1 | 	add	fp, #20
0fbe0     A7 FE 01 FB | 	rdlong	result3, fp
0fbe4     14 4E 85 F1 | 	sub	fp, #20
0fbe8     01 FE 15 F2 | 	cmp	result3, #1 wc
0fbec     8C 00 90 CD |  if_b	jmp	#LR__1248
0fbf0     0C 4E 05 F1 | 	add	fp, #12
0fbf4     A7 FC 01 FB | 	rdlong	result2, fp
0fbf8     1C 4E 05 F1 | 	add	fp, #28
0fbfc     A7 FE 01 FB | 	rdlong	result3, fp
0fc00     04 4E 05 F1 | 	add	fp, #4
0fc04     A7 12 02 FB | 	rdlong	arg01, fp
0fc08     10 4E 85 F1 | 	sub	fp, #16
0fc0c     A7 FA 01 FB | 	rdlong	result1, fp
0fc10     FD 12 02 FD | 	qmul	arg01, result1
0fc14     10 FC 05 F1 | 	add	result2, #16
0fc18     14 4E 05 F1 | 	add	fp, #20
0fc1c     A7 1E 02 FB | 	rdlong	local01, fp
0fc20     18 12 62 FD | 	getqx	arg01
0fc24     FD 1E 02 FD | 	qmul	local01, result1
0fc28     09 FF 01 F1 | 	add	result3, arg01
0fc2c     10 4E 85 F1 | 	sub	fp, #16
0fc30     A7 1E 02 FB | 	rdlong	local01, fp
0fc34     18 FA 61 FD | 	getqx	result1
0fc38     0F FB 01 FD | 	qmul	result1, local01
0fc3c     08 4E 85 F1 | 	sub	fp, #8
0fc40     A7 1E 02 FB | 	rdlong	local01, fp
0fc44     18 FA 61 FD | 	getqx	result1
0fc48     FD FE 01 F1 | 	add	result3, result1
0fc4c     0F FF 01 FD | 	qmul	result3, local01
0fc50     1C 4E 05 F1 | 	add	fp, #28
0fc54     18 1E 62 FD | 	getqx	local01
0fc58     0F FD 01 F1 | 	add	result2, local01
0fc5c     A7 FC 61 FC | 	wrlong	result2, fp
0fc60     2C 4E 85 F1 | 	sub	fp, #44
0fc64     A7 3A 68 FC | 	wrlong	#29, fp
0fc68     2C 4E 05 F1 | 	add	fp, #44
0fc6c     A7 1E 02 FB | 	rdlong	local01, fp
0fc70     34 4E 85 F1 | 	sub	fp, #52
0fc74     A7 1E 62 FC | 	wrlong	local01, fp
0fc78     18 00 90 FD | 	jmp	#LR__1249
0fc7c                 | LR__1248
0fc7c     08 4E 05 F1 | 	add	fp, #8
0fc80     A7 3A 68 FC | 	wrlong	#29, fp
0fc84     04 4E 05 F1 | 	add	fp, #4
0fc88     A7 1E 02 FB | 	rdlong	local01, fp
0fc8c     0C 4E 85 F1 | 	sub	fp, #12
0fc90     A7 1E 62 FC | 	wrlong	local01, fp
0fc94                 | LR__1249
0fc94     A7 12 02 F6 | 	mov	arg01, fp
0fc98     5C AC BF FD | 	call	#_push
0fc9c                 | LR__1250
0fc9c     A7 F0 03 F6 | 	mov	ptra, fp
0fca0     B2 00 A0 FD | 	call	#popregs_
0fca4                 | _do_getaddr_ret
0fca4     2D 00 64 FD | 	ret
0fca8                 | 
0fca8                 | ' 
0fca8                 | ' 
0fca8                 | ' sub do_inkey
0fca8                 | _do_inkey
0fca8     02 4A 05 F6 | 	mov	COUNT_, #2
0fcac     A8 00 A0 FD | 	call	#pushregs_
0fcb0     0C F0 07 F1 | 	add	ptra, #12
0fcb4     68 E6 B0 FD | 	call	#_usbnew_spin2_get_key
0fcb8     65 00 00 FF 
0fcbc     74 E4 05 F1 | 	add	objptr, ##51828
0fcc0     F2 FA 61 FC | 	wrlong	result1, objptr
0fcc4                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
0fcc4     65 00 00 FF 
0fcc8     74 E4 85 F1 | 	sub	objptr, ##51828
0fccc     00 FA 0D F2 | 	cmp	result1, #0 wz
0fcd0     94 00 90 AD |  if_e	jmp	#LR__1261
0fcd4     65 00 00 FF 
0fcd8     74 E4 05 F1 | 	add	objptr, ##51828
0fcdc     F2 1C 02 FB | 	rdlong	arg06, objptr
0fce0     65 00 00 FF 
0fce4     74 E4 85 F1 | 	sub	objptr, ##51828
0fce8     00 00 40 FF 
0fcec     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
0fcf0     65 00 00 CF 
0fcf4     74 E4 05 C1 |  if_b	add	objptr, ##51828
0fcf8     F2 1E 02 CB |  if_b	rdlong	local01, objptr
0fcfc     65 00 00 CF 
0fd00     74 E4 85 C1 |  if_b	sub	objptr, ##51828
0fd04     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
0fd08     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
0fd0c     58 00 90 3D |  if_ae	jmp	#LR__1261
0fd10                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
0fd10     78 00 00 FF 
0fd14     F0 E4 05 F1 | 	add	objptr, ##61680
0fd18     F2 1C 02 FB | 	rdlong	arg06, objptr
0fd1c     78 00 00 FF 
0fd20     F0 E4 85 F1 | 	sub	objptr, ##61680
0fd24     01 1C 0E F2 | 	cmp	arg06, #1 wz
0fd28     3C 00 90 5D |  if_ne	jmp	#LR__1260
0fd2c     79 00 00 FF 
0fd30     94 E5 05 F1 | 	add	objptr, ##62356
0fd34     F2 14 02 FB | 	rdlong	arg02, objptr
0fd38     04 E4 85 F1 | 	sub	objptr, #4
0fd3c     F2 1A 02 FB | 	rdlong	arg05, objptr
0fd40     07 12 06 F6 | 	mov	arg01, #7
0fd44     56 00 00 FF 
0fd48     44 16 06 F6 | 	mov	arg03, ##44100
0fd4c     0C 18 C6 F9 | 	decod	arg04, #12
0fd50     01 1C 66 F6 | 	neg	arg06, #1
0fd54     6E 00 00 FF 
0fd58     C4 E4 85 F1 | 	sub	objptr, ##56516
0fd5c     48 E9 B0 FD | 	call	#_audio096_spin2_play
0fd60     0B 00 00 FF 
0fd64     CC E4 85 F1 | 	sub	objptr, ##5836
0fd68                 | LR__1260
0fd68                 | LR__1261
0fd68                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
0fd68     65 00 00 FF 
0fd6c     74 E4 05 F1 | 	add	objptr, ##51828
0fd70     F2 1C 0A FB | 	rdlong	arg06, objptr wz
0fd74     65 00 00 FF 
0fd78     74 E4 85 F1 | 	sub	objptr, ##51828
0fd7c     D4 01 90 AD |  if_e	jmp	#LR__1270
0fd80     65 00 00 FF 
0fd84     74 E4 05 F1 | 	add	objptr, ##51828
0fd88     F2 1C 02 FB | 	rdlong	arg06, objptr
0fd8c     65 00 00 FF 
0fd90     74 E4 85 F1 | 	sub	objptr, ##51828
0fd94     00 00 40 FF 
0fd98     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
0fd9c     65 00 00 CF 
0fda0     74 E4 05 C1 |  if_b	add	objptr, ##51828
0fda4     F2 1E 02 CB |  if_b	rdlong	local01, objptr
0fda8     65 00 00 CF 
0fdac     74 E4 85 C1 |  if_b	sub	objptr, ##51828
0fdb0     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
0fdb4     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
0fdb8     98 01 90 3D |  if_ae	jmp	#LR__1270
0fdbc                 | '   if leds and 2 = 2 then 
0fdbc     79 00 00 FF 
0fdc0     BC E5 05 F1 | 	add	objptr, ##62396
0fdc4     F2 1E 0A FB | 	rdlong	local01, objptr wz
0fdc8     79 00 00 FF 
0fdcc     BC E5 85 F1 | 	sub	objptr, ##62396
0fdd0     58 01 90 AD |  if_e	jmp	#LR__1269
0fdd4                 | '     if key>96 andalso key<123 then
0fdd4     65 00 00 FF 
0fdd8     74 E4 05 F1 | 	add	objptr, ##51828
0fddc     F2 1E 02 FB | 	rdlong	local01, objptr
0fde0     65 00 00 FF 
0fde4     74 E4 85 F1 | 	sub	objptr, ##51828
0fde8     61 1E 16 F2 | 	cmp	local01, #97 wc
0fdec     3C 00 90 CD |  if_b	jmp	#LR__1262
0fdf0     65 00 00 FF 
0fdf4     74 E4 05 F1 | 	add	objptr, ##51828
0fdf8     F2 1E 02 FB | 	rdlong	local01, objptr
0fdfc     65 00 00 FF 
0fe00     74 E4 85 F1 | 	sub	objptr, ##51828
0fe04     7B 1E 16 F2 | 	cmp	local01, #123 wc
0fe08     20 00 90 3D |  if_ae	jmp	#LR__1262
0fe0c     65 00 00 FF 
0fe10     74 E4 05 F1 | 	add	objptr, ##51828
0fe14     F2 1E 02 FB | 	rdlong	local01, objptr
0fe18     20 1E 86 F1 | 	sub	local01, #32
0fe1c     F2 1E 62 FC | 	wrlong	local01, objptr
0fe20     65 00 00 FF 
0fe24     74 E4 85 F1 | 	sub	objptr, ##51828
0fe28     00 01 90 FD | 	jmp	#LR__1268
0fe2c                 | LR__1262
0fe2c     65 00 00 FF 
0fe30     74 E4 05 F1 | 	add	objptr, ##51828
0fe34     F2 1E 02 FB | 	rdlong	local01, objptr
0fe38     65 00 00 FF 
0fe3c     74 E4 85 F1 | 	sub	objptr, ##51828
0fe40     41 1E 16 F2 | 	cmp	local01, #65 wc
0fe44     3C 00 90 CD |  if_b	jmp	#LR__1263
0fe48     65 00 00 FF 
0fe4c     74 E4 05 F1 | 	add	objptr, ##51828
0fe50     F2 1E 02 FB | 	rdlong	local01, objptr
0fe54     65 00 00 FF 
0fe58     74 E4 85 F1 | 	sub	objptr, ##51828
0fe5c     5B 1E 16 F2 | 	cmp	local01, #91 wc
0fe60     20 00 90 3D |  if_ae	jmp	#LR__1263
0fe64     65 00 00 FF 
0fe68     74 E4 05 F1 | 	add	objptr, ##51828
0fe6c     F2 1E 02 FB | 	rdlong	local01, objptr
0fe70     20 1E 06 F1 | 	add	local01, #32
0fe74     F2 1E 62 FC | 	wrlong	local01, objptr
0fe78     65 00 00 FF 
0fe7c     74 E4 85 F1 | 	sub	objptr, ##51828
0fe80     A8 00 90 FD | 	jmp	#LR__1267
0fe84                 | LR__1263
0fe84     65 00 00 FF 
0fe88     74 E4 05 F1 | 	add	objptr, ##51828
0fe8c     F2 1E 02 FB | 	rdlong	local01, objptr
0fe90     65 00 00 FF 
0fe94     74 E4 85 F1 | 	sub	objptr, ##51828
0fe98     17 1E 16 F2 | 	cmp	local01, #23 wc
0fe9c     3C 00 90 CD |  if_b	jmp	#LR__1264
0fea0     65 00 00 FF 
0fea4     74 E4 05 F1 | 	add	objptr, ##51828
0fea8     F2 1E 02 FB | 	rdlong	local01, objptr
0feac     65 00 00 FF 
0feb0     74 E4 85 F1 | 	sub	objptr, ##51828
0feb4     20 1E 16 F2 | 	cmp	local01, #32 wc
0feb8     20 00 90 3D |  if_ae	jmp	#LR__1264
0febc     65 00 00 FF 
0fec0     74 E4 05 F1 | 	add	objptr, ##51828
0fec4     F2 1E 02 FB | 	rdlong	local01, objptr
0fec8     09 1E 86 F1 | 	sub	local01, #9
0fecc     F2 1E 62 FC | 	wrlong	local01, objptr
0fed0     65 00 00 FF 
0fed4     74 E4 85 F1 | 	sub	objptr, ##51828
0fed8     50 00 90 FD | 	jmp	#LR__1266
0fedc                 | LR__1264
0fedc     65 00 00 FF 
0fee0     74 E4 05 F1 | 	add	objptr, ##51828
0fee4     F2 20 02 FB | 	rdlong	local02, objptr
0fee8     65 00 00 FF 
0feec     74 E4 85 F1 | 	sub	objptr, ##51828
0fef0     0E 20 16 F2 | 	cmp	local02, #14 wc
0fef4     34 00 90 CD |  if_b	jmp	#LR__1265
0fef8     65 00 00 FF 
0fefc     74 E4 05 F1 | 	add	objptr, ##51828
0ff00     F2 1E 02 FB | 	rdlong	local01, objptr
0ff04     65 00 00 FF 
0ff08     74 E4 85 F1 | 	sub	objptr, ##51828
0ff0c     17 1E 16 F2 | 	cmp	local01, #23 wc
0ff10     79 00 00 CF 
0ff14     CC E5 05 C1 |  if_b	add	objptr, ##62412
0ff18     F2 20 02 CB |  if_b	rdlong	local02, objptr
0ff1c     27 20 06 C1 |  if_b	add	local02, #39
0ff20     F2 20 62 CC |  if_b	wrlong	local02, objptr
0ff24     79 00 00 CF 
0ff28     CC E5 85 C1 |  if_b	sub	objptr, ##62412
0ff2c                 | LR__1265
0ff2c                 | LR__1266
0ff2c                 | LR__1267
0ff2c                 | LR__1268
0ff2c                 | LR__1269
0ff2c     65 00 00 FF 
0ff30     74 E4 05 F1 | 	add	objptr, ##51828
0ff34     F2 12 02 FB | 	rdlong	arg01, objptr
0ff38     65 00 00 FF 
0ff3c     74 E4 85 F1 | 	sub	objptr, ##51828
0ff40     9C AA B0 FD | 	call	#_scantochar
0ff44     FD 12 02 F6 | 	mov	arg01, result1
0ff48     D8 0D B1 FD | 	call	#__system__Chr_S
0ff4c     A7 FA 61 FC | 	wrlong	result1, fp
0ff50     0C 00 90 FD | 	jmp	#LR__1271
0ff54                 | LR__1270
0ff54     73 01 00 FF 
0ff58     73 21 06 F6 | 	mov	local02, ##@LR__5150
0ff5c     A7 20 62 FC | 	wrlong	local02, fp
0ff60                 | LR__1271
0ff60     08 4E 05 F1 | 	add	fp, #8
0ff64     A7 3E 68 FC | 	wrlong	#31, fp
0ff68     08 4E 85 F1 | 	sub	fp, #8
0ff6c     A7 12 02 F6 | 	mov	arg01, fp
0ff70     84 A9 BF FD | 	call	#_push
0ff74     A7 F0 03 F6 | 	mov	ptra, fp
0ff78     B2 00 A0 FD | 	call	#popregs_
0ff7c                 | _do_inkey_ret
0ff7c     2D 00 64 FD | 	ret
0ff80                 | 
0ff80                 | '  
0ff80                 | ' '------------------------ Operators 
0ff80                 | ' 
0ff80                 | ' sub do_plus 
0ff80                 | _do_plus
0ff80     05 4A 05 F6 | 	mov	COUNT_, #5
0ff84     A8 00 A0 FD | 	call	#pushregs_
0ff88     18 F0 07 F1 | 	add	ptra, #24
0ff8c     D0 A8 BF FD | 	call	#_pop
0ff90     FD 1E 02 F6 | 	mov	local01, result1
0ff94     FE 20 02 F6 | 	mov	local02, result2
0ff98     FF 22 02 F6 | 	mov	local03, result3
0ff9c     0C 4E 05 F1 | 	add	fp, #12
0ffa0     A7 1E 62 FC | 	wrlong	local01, fp
0ffa4     04 4E 05 F1 | 	add	fp, #4
0ffa8     A7 20 62 FC | 	wrlong	local02, fp
0ffac     04 4E 05 F1 | 	add	fp, #4
0ffb0     A7 22 62 FC | 	wrlong	local03, fp
0ffb4     14 4E 85 F1 | 	sub	fp, #20
0ffb8     A4 A8 BF FD | 	call	#_pop
0ffbc     FF 22 02 F6 | 	mov	local03, result3
0ffc0     A7 FA 61 FC | 	wrlong	result1, fp
0ffc4     04 4E 05 F1 | 	add	fp, #4
0ffc8     A7 FC 61 FC | 	wrlong	result2, fp
0ffcc     04 4E 05 F1 | 	add	fp, #4
0ffd0     A7 22 62 FC | 	wrlong	local03, fp
0ffd4                 | ' 
0ffd4                 | ' t2=pop()
0ffd4                 | ' t1=pop()
0ffd4                 | ' 
0ffd4                 | ' 
0ffd4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
0ffd4     08 4E 85 F1 | 	sub	fp, #8
0ffd8     1D 22 0E F2 | 	cmp	local03, #29 wz
0ffdc     14 4E 05 A1 |  if_e	add	fp, #20
0ffe0     A7 24 02 AB |  if_e	rdlong	local04, fp
0ffe4     14 4E 85 A1 |  if_e	sub	fp, #20
0ffe8     12 23 02 A6 |  if_e	mov	local03, local04
0ffec     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0fff0     1C 00 90 5D |  if_ne	jmp	#LR__1280
0fff4     A7 1E 02 FB | 	rdlong	local01, fp
0fff8     0C 4E 05 F1 | 	add	fp, #12
0fffc     A7 20 02 FB | 	rdlong	local02, fp
10000     0C 4E 85 F1 | 	sub	fp, #12
10004     10 1F 02 F1 | 	add	local01, local02
10008     A7 1E 62 FC | 	wrlong	local01, fp
1000c     48 04 90 FD | 	jmp	#LR__1295
10010                 | LR__1280
10010                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
10010     08 4E 05 F1 | 	add	fp, #8
10014     A7 1E 02 FB | 	rdlong	local01, fp
10018     08 4E 85 F1 | 	sub	fp, #8
1001c     1D 1E 0E F2 | 	cmp	local01, #29 wz
10020     14 4E 05 A1 |  if_e	add	fp, #20
10024     A7 24 02 AB |  if_e	rdlong	local04, fp
10028     14 4E 85 A1 |  if_e	sub	fp, #20
1002c     12 23 02 A6 |  if_e	mov	local03, local04
10030     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10034     28 00 90 5D |  if_ne	jmp	#LR__1281
10038     A7 1E 02 FB | 	rdlong	local01, fp
1003c     0C 4E 05 F1 | 	add	fp, #12
10040     A7 20 02 FB | 	rdlong	local02, fp
10044     0C 4E 85 F1 | 	sub	fp, #12
10048     10 1F 02 F1 | 	add	local01, local02
1004c     A7 1E 62 FC | 	wrlong	local01, fp
10050     08 4E 05 F1 | 	add	fp, #8
10054     A7 38 68 FC | 	wrlong	#28, fp
10058     08 4E 85 F1 | 	sub	fp, #8
1005c     F8 03 90 FD | 	jmp	#LR__1295
10060                 | LR__1281
10060                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
10060     08 4E 05 F1 | 	add	fp, #8
10064     A7 1E 02 FB | 	rdlong	local01, fp
10068     08 4E 85 F1 | 	sub	fp, #8
1006c     1D 1E 0E F2 | 	cmp	local01, #29 wz
10070     14 4E 05 A1 |  if_e	add	fp, #20
10074     A7 24 02 AB |  if_e	rdlong	local04, fp
10078     14 4E 85 A1 |  if_e	sub	fp, #20
1007c     12 23 02 A6 |  if_e	mov	local03, local04
10080     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10084     30 00 90 5D |  if_ne	jmp	#LR__1282
10088     A7 12 02 FB | 	rdlong	arg01, fp
1008c     04 12 B1 FD | 	call	#__system___float_fromuns
10090     FD 12 02 F6 | 	mov	arg01, result1
10094     0C 4E 05 F1 | 	add	fp, #12
10098     A7 14 02 FB | 	rdlong	arg02, fp
1009c     0C 4E 85 F1 | 	sub	fp, #12
100a0     24 12 B1 FD | 	call	#__system___float_add
100a4     A7 FA 61 FC | 	wrlong	result1, fp
100a8     08 4E 05 F1 | 	add	fp, #8
100ac     A7 3C 68 FC | 	wrlong	#30, fp
100b0     08 4E 85 F1 | 	sub	fp, #8
100b4     A0 03 90 FD | 	jmp	#LR__1295
100b8                 | LR__1282
100b8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
100b8     08 4E 05 F1 | 	add	fp, #8
100bc     A7 1E 02 FB | 	rdlong	local01, fp
100c0     08 4E 85 F1 | 	sub	fp, #8
100c4     1C 1E 0E F2 | 	cmp	local01, #28 wz
100c8     14 4E 05 A1 |  if_e	add	fp, #20
100cc     A7 24 02 AB |  if_e	rdlong	local04, fp
100d0     14 4E 85 A1 |  if_e	sub	fp, #20
100d4     12 23 02 A6 |  if_e	mov	local03, local04
100d8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
100dc     1C 00 90 5D |  if_ne	jmp	#LR__1283
100e0     A7 1E 02 FB | 	rdlong	local01, fp
100e4     0C 4E 05 F1 | 	add	fp, #12
100e8     A7 20 02 FB | 	rdlong	local02, fp
100ec     0C 4E 85 F1 | 	sub	fp, #12
100f0     10 1F 02 F1 | 	add	local01, local02
100f4     A7 1E 62 FC | 	wrlong	local01, fp
100f8     5C 03 90 FD | 	jmp	#LR__1295
100fc                 | LR__1283
100fc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
100fc     08 4E 05 F1 | 	add	fp, #8
10100     A7 1E 02 FB | 	rdlong	local01, fp
10104     08 4E 85 F1 | 	sub	fp, #8
10108     1C 1E 0E F2 | 	cmp	local01, #28 wz
1010c     14 4E 05 A1 |  if_e	add	fp, #20
10110     A7 24 02 AB |  if_e	rdlong	local04, fp
10114     14 4E 85 A1 |  if_e	sub	fp, #20
10118     12 23 02 A6 |  if_e	mov	local03, local04
1011c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10120     1C 00 90 5D |  if_ne	jmp	#LR__1284
10124     A7 1E 02 FB | 	rdlong	local01, fp
10128     0C 4E 05 F1 | 	add	fp, #12
1012c     A7 20 02 FB | 	rdlong	local02, fp
10130     0C 4E 85 F1 | 	sub	fp, #12
10134     10 1F 02 F1 | 	add	local01, local02
10138     A7 1E 62 FC | 	wrlong	local01, fp
1013c     18 03 90 FD | 	jmp	#LR__1295
10140                 | LR__1284
10140                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
10140     08 4E 05 F1 | 	add	fp, #8
10144     A7 1E 02 FB | 	rdlong	local01, fp
10148     08 4E 85 F1 | 	sub	fp, #8
1014c     1C 1E 0E F2 | 	cmp	local01, #28 wz
10150     14 4E 05 A1 |  if_e	add	fp, #20
10154     A7 24 02 AB |  if_e	rdlong	local04, fp
10158     14 4E 85 A1 |  if_e	sub	fp, #20
1015c     12 23 02 A6 |  if_e	mov	local03, local04
10160     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10164     40 00 90 5D |  if_ne	jmp	#LR__1285
10168     A7 12 02 FB | 	rdlong	arg01, fp
1016c     09 13 52 F6 | 	abs	arg01, arg01 wc
10170     1F 26 C6 C9 |  if_b	decod	local05, #31
10174     00 26 06 36 |  if_ae	mov	local05, #0
10178     18 11 B1 FD | 	call	#__system___float_fromuns
1017c     13 FB 61 F5 | 	xor	result1, local05
10180     FD 12 02 F6 | 	mov	arg01, result1
10184     0C 4E 05 F1 | 	add	fp, #12
10188     A7 14 02 FB | 	rdlong	arg02, fp
1018c     0C 4E 85 F1 | 	sub	fp, #12
10190     34 11 B1 FD | 	call	#__system___float_add
10194     A7 FA 61 FC | 	wrlong	result1, fp
10198     08 4E 05 F1 | 	add	fp, #8
1019c     A7 3C 68 FC | 	wrlong	#30, fp
101a0     08 4E 85 F1 | 	sub	fp, #8
101a4     B0 02 90 FD | 	jmp	#LR__1295
101a8                 | LR__1285
101a8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
101a8     08 4E 05 F1 | 	add	fp, #8
101ac     A7 1E 02 FB | 	rdlong	local01, fp
101b0     08 4E 85 F1 | 	sub	fp, #8
101b4     1E 1E 0E F2 | 	cmp	local01, #30 wz
101b8     14 4E 05 A1 |  if_e	add	fp, #20
101bc     A7 24 02 AB |  if_e	rdlong	local04, fp
101c0     14 4E 85 A1 |  if_e	sub	fp, #20
101c4     12 23 02 A6 |  if_e	mov	local03, local04
101c8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
101cc     28 00 90 5D |  if_ne	jmp	#LR__1286
101d0     A7 1E 02 FB | 	rdlong	local01, fp
101d4     0C 4E 05 F1 | 	add	fp, #12
101d8     A7 12 02 FB | 	rdlong	arg01, fp
101dc     0C 4E 85 F1 | 	sub	fp, #12
101e0     B0 10 B1 FD | 	call	#__system___float_fromuns
101e4     FD 14 02 F6 | 	mov	arg02, result1
101e8     0F 13 02 F6 | 	mov	arg01, local01
101ec     D8 10 B1 FD | 	call	#__system___float_add
101f0     A7 FA 61 FC | 	wrlong	result1, fp
101f4     60 02 90 FD | 	jmp	#LR__1295
101f8                 | LR__1286
101f8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
101f8     08 4E 05 F1 | 	add	fp, #8
101fc     A7 1E 02 FB | 	rdlong	local01, fp
10200     08 4E 85 F1 | 	sub	fp, #8
10204     1E 1E 0E F2 | 	cmp	local01, #30 wz
10208     14 4E 05 A1 |  if_e	add	fp, #20
1020c     A7 24 02 AB |  if_e	rdlong	local04, fp
10210     14 4E 85 A1 |  if_e	sub	fp, #20
10214     12 23 02 A6 |  if_e	mov	local03, local04
10218     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1021c     38 00 90 5D |  if_ne	jmp	#LR__1287
10220     A7 1E 02 FB | 	rdlong	local01, fp
10224     0C 4E 05 F1 | 	add	fp, #12
10228     A7 12 02 FB | 	rdlong	arg01, fp
1022c     0C 4E 85 F1 | 	sub	fp, #12
10230     09 13 52 F6 | 	abs	arg01, arg01 wc
10234     1F 26 C6 C9 |  if_b	decod	local05, #31
10238     00 26 06 36 |  if_ae	mov	local05, #0
1023c     54 10 B1 FD | 	call	#__system___float_fromuns
10240     13 FB 61 F5 | 	xor	result1, local05
10244     FD 14 02 F6 | 	mov	arg02, result1
10248     0F 13 02 F6 | 	mov	arg01, local01
1024c     78 10 B1 FD | 	call	#__system___float_add
10250     A7 FA 61 FC | 	wrlong	result1, fp
10254     00 02 90 FD | 	jmp	#LR__1295
10258                 | LR__1287
10258                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
10258     08 4E 05 F1 | 	add	fp, #8
1025c     A7 1E 02 FB | 	rdlong	local01, fp
10260     08 4E 85 F1 | 	sub	fp, #8
10264     1E 1E 0E F2 | 	cmp	local01, #30 wz
10268     14 4E 05 A1 |  if_e	add	fp, #20
1026c     A7 24 02 AB |  if_e	rdlong	local04, fp
10270     14 4E 85 A1 |  if_e	sub	fp, #20
10274     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
10278     1C 00 90 5D |  if_ne	jmp	#LR__1288
1027c     A7 12 02 FB | 	rdlong	arg01, fp
10280     0C 4E 05 F1 | 	add	fp, #12
10284     A7 14 02 FB | 	rdlong	arg02, fp
10288     0C 4E 85 F1 | 	sub	fp, #12
1028c     38 10 B1 FD | 	call	#__system___float_add
10290     A7 FA 61 FC | 	wrlong	result1, fp
10294     C0 01 90 FD | 	jmp	#LR__1295
10298                 | LR__1288
10298                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
10298     08 4E 05 F1 | 	add	fp, #8
1029c     A7 1E 02 FB | 	rdlong	local01, fp
102a0     08 4E 85 F1 | 	sub	fp, #8
102a4     1F 1E 0E F2 | 	cmp	local01, #31 wz
102a8     24 00 90 5D |  if_ne	jmp	#LR__1289
102ac     14 4E 05 F1 | 	add	fp, #20
102b0     A7 22 02 FB | 	rdlong	local03, fp
102b4     14 4E 85 F1 | 	sub	fp, #20
102b8     1F 22 0E F2 | 	cmp	local03, #31 wz
102bc     A7 04 68 5C |  if_ne	wrlong	#2, fp
102c0     08 4E 05 51 |  if_ne	add	fp, #8
102c4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
102c8     08 4E 85 51 |  if_ne	sub	fp, #8
102cc     88 01 90 5D |  if_ne	jmp	#LR__1295
102d0                 | LR__1289
102d0                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
102d0     14 4E 05 F1 | 	add	fp, #20
102d4     A7 1E 02 FB | 	rdlong	local01, fp
102d8     14 4E 85 F1 | 	sub	fp, #20
102dc     1F 1E 0E F2 | 	cmp	local01, #31 wz
102e0     24 00 90 5D |  if_ne	jmp	#LR__1290
102e4     08 4E 05 F1 | 	add	fp, #8
102e8     A7 22 02 FB | 	rdlong	local03, fp
102ec     08 4E 85 F1 | 	sub	fp, #8
102f0     1F 22 0E F2 | 	cmp	local03, #31 wz
102f4     A7 04 68 5C |  if_ne	wrlong	#2, fp
102f8     08 4E 05 51 |  if_ne	add	fp, #8
102fc     A7 FE 69 5C |  if_ne	wrlong	#255, fp
10300     08 4E 85 51 |  if_ne	sub	fp, #8
10304     50 01 90 5D |  if_ne	jmp	#LR__1295
10308                 | LR__1290
10308                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
10308     08 4E 05 F1 | 	add	fp, #8
1030c     A7 1E 02 FB | 	rdlong	local01, fp
10310     08 4E 85 F1 | 	sub	fp, #8
10314     1F 1E 0E F2 | 	cmp	local01, #31 wz
10318     14 4E 05 A1 |  if_e	add	fp, #20
1031c     A7 22 02 AB |  if_e	rdlong	local03, fp
10320     14 4E 85 A1 |  if_e	sub	fp, #20
10324     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10328     1C 00 90 5D |  if_ne	jmp	#LR__1291
1032c     A7 12 02 FB | 	rdlong	arg01, fp
10330     0C 4E 05 F1 | 	add	fp, #12
10334     A7 14 02 FB | 	rdlong	arg02, fp
10338     0C 4E 85 F1 | 	sub	fp, #12
1033c     34 E8 B0 FD | 	call	#__system___string_concat
10340     A7 FA 61 FC | 	wrlong	result1, fp
10344     10 01 90 FD | 	jmp	#LR__1295
10348                 | LR__1291
10348                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
10348     08 4E 05 F1 | 	add	fp, #8
1034c     A7 1E 02 FB | 	rdlong	local01, fp
10350     08 4E 85 F1 | 	sub	fp, #8
10354     2B 1E 0E F2 | 	cmp	local01, #43 wz
10358     14 4E 05 A1 |  if_e	add	fp, #20
1035c     A7 22 02 AB |  if_e	rdlong	local03, fp
10360     14 4E 85 A1 |  if_e	sub	fp, #20
10364     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10368     30 00 90 5D |  if_ne	jmp	#LR__1292
1036c     A7 12 02 FB | 	rdlong	arg01, fp
10370     20 E9 BF FD | 	call	#_convertstring
10374     FD 12 02 F6 | 	mov	arg01, result1
10378     0C 4E 05 F1 | 	add	fp, #12
1037c     A7 14 02 FB | 	rdlong	arg02, fp
10380     0C 4E 85 F1 | 	sub	fp, #12
10384     EC E7 B0 FD | 	call	#__system___string_concat
10388     A7 FA 61 FC | 	wrlong	result1, fp
1038c     08 4E 05 F1 | 	add	fp, #8
10390     A7 3E 68 FC | 	wrlong	#31, fp
10394     08 4E 85 F1 | 	sub	fp, #8
10398     BC 00 90 FD | 	jmp	#LR__1295
1039c                 | LR__1292
1039c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
1039c     08 4E 05 F1 | 	add	fp, #8
103a0     A7 1E 02 FB | 	rdlong	local01, fp
103a4     08 4E 85 F1 | 	sub	fp, #8
103a8     1F 1E 0E F2 | 	cmp	local01, #31 wz
103ac     14 4E 05 A1 |  if_e	add	fp, #20
103b0     A7 22 02 AB |  if_e	rdlong	local03, fp
103b4     14 4E 85 A1 |  if_e	sub	fp, #20
103b8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
103bc     28 00 90 5D |  if_ne	jmp	#LR__1293
103c0     A7 1E 02 FB | 	rdlong	local01, fp
103c4     0C 4E 05 F1 | 	add	fp, #12
103c8     A7 12 02 FB | 	rdlong	arg01, fp
103cc     0C 4E 85 F1 | 	sub	fp, #12
103d0     C0 E8 BF FD | 	call	#_convertstring
103d4     FD 14 02 F6 | 	mov	arg02, result1
103d8     0F 13 02 F6 | 	mov	arg01, local01
103dc     94 E7 B0 FD | 	call	#__system___string_concat
103e0     A7 FA 61 FC | 	wrlong	result1, fp
103e4     70 00 90 FD | 	jmp	#LR__1295
103e8                 | LR__1293
103e8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
103e8     08 4E 05 F1 | 	add	fp, #8
103ec     A7 1E 02 FB | 	rdlong	local01, fp
103f0     08 4E 85 F1 | 	sub	fp, #8
103f4     2B 1E 0E F2 | 	cmp	local01, #43 wz
103f8     14 4E 05 A1 |  if_e	add	fp, #20
103fc     A7 22 02 AB |  if_e	rdlong	local03, fp
10400     14 4E 85 A1 |  if_e	sub	fp, #20
10404     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10408     3C 00 90 5D |  if_ne	jmp	#LR__1294
1040c     A7 12 02 FB | 	rdlong	arg01, fp
10410     80 E8 BF FD | 	call	#_convertstring
10414     FD 1E 02 F6 | 	mov	local01, result1
10418     0C 4E 05 F1 | 	add	fp, #12
1041c     A7 12 02 FB | 	rdlong	arg01, fp
10420     0C 4E 85 F1 | 	sub	fp, #12
10424     6C E8 BF FD | 	call	#_convertstring
10428     FD 14 02 F6 | 	mov	arg02, result1
1042c     0F 13 02 F6 | 	mov	arg01, local01
10430     40 E7 B0 FD | 	call	#__system___string_concat
10434     A7 FA 61 FC | 	wrlong	result1, fp
10438     08 4E 05 F1 | 	add	fp, #8
1043c     A7 3E 68 FC | 	wrlong	#31, fp
10440     08 4E 85 F1 | 	sub	fp, #8
10444     10 00 90 FD | 	jmp	#LR__1295
10448                 | LR__1294
10448     A7 08 68 FC | 	wrlong	#4, fp
1044c     08 4E 05 F1 | 	add	fp, #8
10450     A7 FE 69 FC | 	wrlong	#255, fp
10454     08 4E 85 F1 | 	sub	fp, #8
10458                 | LR__1295
10458     A7 12 02 F6 | 	mov	arg01, fp
1045c     98 A4 BF FD | 	call	#_push
10460     A7 F0 03 F6 | 	mov	ptra, fp
10464     B2 00 A0 FD | 	call	#popregs_
10468                 | _do_plus_ret
10468     2D 00 64 FD | 	ret
1046c                 | 
1046c                 | ' 
1046c                 | ' sub do_minus
1046c                 | _do_minus
1046c     05 4A 05 F6 | 	mov	COUNT_, #5
10470     A8 00 A0 FD | 	call	#pushregs_
10474     18 F0 07 F1 | 	add	ptra, #24
10478     E4 A3 BF FD | 	call	#_pop
1047c     FD 1E 02 F6 | 	mov	local01, result1
10480     FE 20 02 F6 | 	mov	local02, result2
10484     FF 22 02 F6 | 	mov	local03, result3
10488     0C 4E 05 F1 | 	add	fp, #12
1048c     A7 1E 62 FC | 	wrlong	local01, fp
10490     04 4E 05 F1 | 	add	fp, #4
10494     A7 20 62 FC | 	wrlong	local02, fp
10498     04 4E 05 F1 | 	add	fp, #4
1049c     A7 22 62 FC | 	wrlong	local03, fp
104a0     14 4E 85 F1 | 	sub	fp, #20
104a4     B8 A3 BF FD | 	call	#_pop
104a8     FF 22 02 F6 | 	mov	local03, result3
104ac     A7 FA 61 FC | 	wrlong	result1, fp
104b0     04 4E 05 F1 | 	add	fp, #4
104b4     A7 FC 61 FC | 	wrlong	result2, fp
104b8     04 4E 05 F1 | 	add	fp, #4
104bc     A7 22 62 FC | 	wrlong	local03, fp
104c0                 | ' 
104c0                 | ' t2=pop()
104c0                 | ' t1=pop()
104c0                 | ' 
104c0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
104c0     08 4E 85 F1 | 	sub	fp, #8
104c4     1D 22 0E F2 | 	cmp	local03, #29 wz
104c8     14 4E 05 A1 |  if_e	add	fp, #20
104cc     A7 24 02 AB |  if_e	rdlong	local04, fp
104d0     14 4E 85 A1 |  if_e	sub	fp, #20
104d4     12 23 02 A6 |  if_e	mov	local03, local04
104d8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
104dc     5C 00 90 5D |  if_ne	jmp	#LR__1301
104e0                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
104e0     0C 4E 05 F1 | 	add	fp, #12
104e4     A7 1E 02 FB | 	rdlong	local01, fp
104e8     0C 4E 85 F1 | 	sub	fp, #12
104ec     A7 22 02 FB | 	rdlong	local03, fp
104f0     11 1F 12 F2 | 	cmp	local01, local03 wc
104f4     1C 00 90 3D |  if_ae	jmp	#LR__1300
104f8     A7 1E 02 FB | 	rdlong	local01, fp
104fc     0C 4E 05 F1 | 	add	fp, #12
10500     A7 20 02 FB | 	rdlong	local02, fp
10504     0C 4E 85 F1 | 	sub	fp, #12
10508     10 1F 82 F1 | 	sub	local01, local02
1050c     A7 1E 62 FC | 	wrlong	local01, fp
10510     F4 02 90 FD | 	jmp	#LR__1310
10514                 | LR__1300
10514     A7 1E 02 FB | 	rdlong	local01, fp
10518     0C 4E 05 F1 | 	add	fp, #12
1051c     A7 20 02 FB | 	rdlong	local02, fp
10520     0C 4E 85 F1 | 	sub	fp, #12
10524     10 1F 82 F1 | 	sub	local01, local02
10528     A7 1E 62 FC | 	wrlong	local01, fp
1052c     08 4E 05 F1 | 	add	fp, #8
10530     A7 38 68 FC | 	wrlong	#28, fp
10534     08 4E 85 F1 | 	sub	fp, #8
10538     CC 02 90 FD | 	jmp	#LR__1310
1053c                 | LR__1301
1053c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
1053c     08 4E 05 F1 | 	add	fp, #8
10540     A7 1E 02 FB | 	rdlong	local01, fp
10544     08 4E 85 F1 | 	sub	fp, #8
10548     1D 1E 0E F2 | 	cmp	local01, #29 wz
1054c     14 4E 05 A1 |  if_e	add	fp, #20
10550     A7 24 02 AB |  if_e	rdlong	local04, fp
10554     14 4E 85 A1 |  if_e	sub	fp, #20
10558     12 23 02 A6 |  if_e	mov	local03, local04
1055c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10560     28 00 90 5D |  if_ne	jmp	#LR__1302
10564     A7 1E 02 FB | 	rdlong	local01, fp
10568     0C 4E 05 F1 | 	add	fp, #12
1056c     A7 20 02 FB | 	rdlong	local02, fp
10570     0C 4E 85 F1 | 	sub	fp, #12
10574     10 1F 82 F1 | 	sub	local01, local02
10578     A7 1E 62 FC | 	wrlong	local01, fp
1057c     08 4E 05 F1 | 	add	fp, #8
10580     A7 38 68 FC | 	wrlong	#28, fp
10584     08 4E 85 F1 | 	sub	fp, #8
10588     7C 02 90 FD | 	jmp	#LR__1310
1058c                 | LR__1302
1058c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1058c     08 4E 05 F1 | 	add	fp, #8
10590     A7 1E 02 FB | 	rdlong	local01, fp
10594     08 4E 85 F1 | 	sub	fp, #8
10598     1D 1E 0E F2 | 	cmp	local01, #29 wz
1059c     14 4E 05 A1 |  if_e	add	fp, #20
105a0     A7 24 02 AB |  if_e	rdlong	local04, fp
105a4     14 4E 85 A1 |  if_e	sub	fp, #20
105a8     12 23 02 A6 |  if_e	mov	local03, local04
105ac     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
105b0     34 00 90 5D |  if_ne	jmp	#LR__1303
105b4     A7 12 02 FB | 	rdlong	arg01, fp
105b8     D8 0C B1 FD | 	call	#__system___float_fromuns
105bc     FD 12 02 F6 | 	mov	arg01, result1
105c0     0C 4E 05 F1 | 	add	fp, #12
105c4     A7 14 02 FB | 	rdlong	arg02, fp
105c8     0C 4E 85 F1 | 	sub	fp, #12
105cc     1F 14 E6 F4 | 	bitnot	arg02, #31
105d0     F4 0C B1 FD | 	call	#__system___float_add
105d4     A7 FA 61 FC | 	wrlong	result1, fp
105d8     08 4E 05 F1 | 	add	fp, #8
105dc     A7 3C 68 FC | 	wrlong	#30, fp
105e0     08 4E 85 F1 | 	sub	fp, #8
105e4     20 02 90 FD | 	jmp	#LR__1310
105e8                 | LR__1303
105e8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
105e8     08 4E 05 F1 | 	add	fp, #8
105ec     A7 1E 02 FB | 	rdlong	local01, fp
105f0     08 4E 85 F1 | 	sub	fp, #8
105f4     1C 1E 0E F2 | 	cmp	local01, #28 wz
105f8     14 4E 05 A1 |  if_e	add	fp, #20
105fc     A7 24 02 AB |  if_e	rdlong	local04, fp
10600     14 4E 85 A1 |  if_e	sub	fp, #20
10604     12 23 02 A6 |  if_e	mov	local03, local04
10608     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1060c     1C 00 90 5D |  if_ne	jmp	#LR__1304
10610     A7 1E 02 FB | 	rdlong	local01, fp
10614     0C 4E 05 F1 | 	add	fp, #12
10618     A7 20 02 FB | 	rdlong	local02, fp
1061c     0C 4E 85 F1 | 	sub	fp, #12
10620     10 1F 82 F1 | 	sub	local01, local02
10624     A7 1E 62 FC | 	wrlong	local01, fp
10628     DC 01 90 FD | 	jmp	#LR__1310
1062c                 | LR__1304
1062c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
1062c     08 4E 05 F1 | 	add	fp, #8
10630     A7 1E 02 FB | 	rdlong	local01, fp
10634     08 4E 85 F1 | 	sub	fp, #8
10638     1C 1E 0E F2 | 	cmp	local01, #28 wz
1063c     14 4E 05 A1 |  if_e	add	fp, #20
10640     A7 24 02 AB |  if_e	rdlong	local04, fp
10644     14 4E 85 A1 |  if_e	sub	fp, #20
10648     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
1064c     1C 00 90 5D |  if_ne	jmp	#LR__1305
10650     A7 1E 02 FB | 	rdlong	local01, fp
10654     0C 4E 05 F1 | 	add	fp, #12
10658     A7 20 02 FB | 	rdlong	local02, fp
1065c     0C 4E 85 F1 | 	sub	fp, #12
10660     10 1F 82 F1 | 	sub	local01, local02
10664     A7 1E 62 FC | 	wrlong	local01, fp
10668     9C 01 90 FD | 	jmp	#LR__1310
1066c                 | LR__1305
1066c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1066c     08 4E 05 F1 | 	add	fp, #8
10670     A7 1E 02 FB | 	rdlong	local01, fp
10674     08 4E 85 F1 | 	sub	fp, #8
10678     1C 1E 0E F2 | 	cmp	local01, #28 wz
1067c     14 4E 05 A1 |  if_e	add	fp, #20
10680     A7 22 02 AB |  if_e	rdlong	local03, fp
10684     14 4E 85 A1 |  if_e	sub	fp, #20
10688     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1068c     44 00 90 5D |  if_ne	jmp	#LR__1306
10690     A7 12 02 FB | 	rdlong	arg01, fp
10694     09 13 52 F6 | 	abs	arg01, arg01 wc
10698     1F 26 C6 C9 |  if_b	decod	local05, #31
1069c     00 26 06 36 |  if_ae	mov	local05, #0
106a0     F0 0B B1 FD | 	call	#__system___float_fromuns
106a4     13 FB 61 F5 | 	xor	result1, local05
106a8     FD 12 02 F6 | 	mov	arg01, result1
106ac     0C 4E 05 F1 | 	add	fp, #12
106b0     A7 14 02 FB | 	rdlong	arg02, fp
106b4     0C 4E 85 F1 | 	sub	fp, #12
106b8     1F 14 E6 F4 | 	bitnot	arg02, #31
106bc     08 0C B1 FD | 	call	#__system___float_add
106c0     A7 FA 61 FC | 	wrlong	result1, fp
106c4     08 4E 05 F1 | 	add	fp, #8
106c8     A7 3C 68 FC | 	wrlong	#30, fp
106cc     08 4E 85 F1 | 	sub	fp, #8
106d0     34 01 90 FD | 	jmp	#LR__1310
106d4                 | LR__1306
106d4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
106d4     08 4E 05 F1 | 	add	fp, #8
106d8     A7 1E 02 FB | 	rdlong	local01, fp
106dc     08 4E 85 F1 | 	sub	fp, #8
106e0     1E 1E 0E F2 | 	cmp	local01, #30 wz
106e4     14 4E 05 A1 |  if_e	add	fp, #20
106e8     A7 22 02 AB |  if_e	rdlong	local03, fp
106ec     14 4E 85 A1 |  if_e	sub	fp, #20
106f0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
106f4     2C 00 90 5D |  if_ne	jmp	#LR__1307
106f8     A7 1E 02 FB | 	rdlong	local01, fp
106fc     0C 4E 05 F1 | 	add	fp, #12
10700     A7 12 02 FB | 	rdlong	arg01, fp
10704     0C 4E 85 F1 | 	sub	fp, #12
10708     88 0B B1 FD | 	call	#__system___float_fromuns
1070c     FD 14 02 F6 | 	mov	arg02, result1
10710     0F 13 02 F6 | 	mov	arg01, local01
10714     1F 14 E6 F4 | 	bitnot	arg02, #31
10718     AC 0B B1 FD | 	call	#__system___float_add
1071c     A7 FA 61 FC | 	wrlong	result1, fp
10720     E4 00 90 FD | 	jmp	#LR__1310
10724                 | LR__1307
10724                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
10724     08 4E 05 F1 | 	add	fp, #8
10728     A7 1E 02 FB | 	rdlong	local01, fp
1072c     08 4E 85 F1 | 	sub	fp, #8
10730     1E 1E 0E F2 | 	cmp	local01, #30 wz
10734     14 4E 05 A1 |  if_e	add	fp, #20
10738     A7 22 02 AB |  if_e	rdlong	local03, fp
1073c     14 4E 85 A1 |  if_e	sub	fp, #20
10740     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10744     3C 00 90 5D |  if_ne	jmp	#LR__1308
10748     A7 1E 02 FB | 	rdlong	local01, fp
1074c     0C 4E 05 F1 | 	add	fp, #12
10750     A7 12 02 FB | 	rdlong	arg01, fp
10754     0C 4E 85 F1 | 	sub	fp, #12
10758     09 13 52 F6 | 	abs	arg01, arg01 wc
1075c     1F 26 C6 C9 |  if_b	decod	local05, #31
10760     00 26 06 36 |  if_ae	mov	local05, #0
10764     2C 0B B1 FD | 	call	#__system___float_fromuns
10768     13 FB 61 F5 | 	xor	result1, local05
1076c     FD 14 02 F6 | 	mov	arg02, result1
10770     0F 13 02 F6 | 	mov	arg01, local01
10774     1F 14 E6 F4 | 	bitnot	arg02, #31
10778     4C 0B B1 FD | 	call	#__system___float_add
1077c     A7 FA 61 FC | 	wrlong	result1, fp
10780     84 00 90 FD | 	jmp	#LR__1310
10784                 | LR__1308
10784                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
10784     08 4E 05 F1 | 	add	fp, #8
10788     A7 1E 02 FB | 	rdlong	local01, fp
1078c     08 4E 85 F1 | 	sub	fp, #8
10790     1E 1E 0E F2 | 	cmp	local01, #30 wz
10794     14 4E 05 A1 |  if_e	add	fp, #20
10798     A7 22 02 AB |  if_e	rdlong	local03, fp
1079c     14 4E 85 A1 |  if_e	sub	fp, #20
107a0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
107a4     20 00 90 5D |  if_ne	jmp	#LR__1309
107a8     A7 12 02 FB | 	rdlong	arg01, fp
107ac     0C 4E 05 F1 | 	add	fp, #12
107b0     A7 14 02 FB | 	rdlong	arg02, fp
107b4     0C 4E 85 F1 | 	sub	fp, #12
107b8     1F 14 E6 F4 | 	bitnot	arg02, #31
107bc     08 0B B1 FD | 	call	#__system___float_add
107c0     A7 FA 61 FC | 	wrlong	result1, fp
107c4     40 00 90 FD | 	jmp	#LR__1310
107c8                 | LR__1309
107c8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
107c8     08 4E 05 F1 | 	add	fp, #8
107cc     A7 1E 02 FB | 	rdlong	local01, fp
107d0     08 4E 85 F1 | 	sub	fp, #8
107d4     1F 1E 0E F2 | 	cmp	local01, #31 wz
107d8     14 4E 05 51 |  if_ne	add	fp, #20
107dc     A7 22 02 5B |  if_ne	rdlong	local03, fp
107e0     14 4E 85 51 |  if_ne	sub	fp, #20
107e4     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
107e8     A7 06 68 AC |  if_e	wrlong	#3, fp
107ec     08 4E 05 A1 |  if_e	add	fp, #8
107f0     A7 FE 69 AC |  if_e	wrlong	#255, fp
107f4     08 4E 85 A1 |  if_e	sub	fp, #8
107f8     A7 0A 68 5C |  if_ne	wrlong	#5, fp
107fc     08 4E 05 51 |  if_ne	add	fp, #8
10800     A7 FE 69 5C |  if_ne	wrlong	#255, fp
10804     08 4E 85 51 |  if_ne	sub	fp, #8
10808                 | LR__1310
10808     A7 12 02 F6 | 	mov	arg01, fp
1080c     E8 A0 BF FD | 	call	#_push
10810     A7 F0 03 F6 | 	mov	ptra, fp
10814     B2 00 A0 FD | 	call	#popregs_
10818                 | _do_minus_ret
10818     2D 00 64 FD | 	ret
1081c                 | 
1081c                 | ' 
1081c                 | ' sub do_and 
1081c                 | _do_and
1081c     03 4A 05 F6 | 	mov	COUNT_, #3
10820     A8 00 A0 FD | 	call	#pushregs_
10824     18 F0 07 F1 | 	add	ptra, #24
10828     34 A0 BF FD | 	call	#_pop
1082c     FD 12 02 F6 | 	mov	arg01, result1
10830     FE 1E 02 F6 | 	mov	local01, result2
10834     FF 20 02 F6 | 	mov	local02, result3
10838     0C 4E 05 F1 | 	add	fp, #12
1083c     A7 12 62 FC | 	wrlong	arg01, fp
10840     04 4E 05 F1 | 	add	fp, #4
10844     A7 1E 62 FC | 	wrlong	local01, fp
10848     04 4E 05 F1 | 	add	fp, #4
1084c     A7 20 62 FC | 	wrlong	local02, fp
10850     14 4E 85 F1 | 	sub	fp, #20
10854     08 A0 BF FD | 	call	#_pop
10858     FF 22 02 F6 | 	mov	local03, result3
1085c     A7 FA 61 FC | 	wrlong	result1, fp
10860     04 4E 05 F1 | 	add	fp, #4
10864     A7 FC 61 FC | 	wrlong	result2, fp
10868     04 4E 05 F1 | 	add	fp, #4
1086c     A7 22 62 FC | 	wrlong	local03, fp
10870                 | ' 
10870                 | ' t2=pop()
10870                 | ' t1=pop()
10870                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
10870     08 4E 85 F1 | 	sub	fp, #8
10874     1C 22 0E F2 | 	cmp	local03, #28 wz
10878     A7 22 02 AB |  if_e	rdlong	local03, fp
1087c     A7 22 62 AC |  if_e	wrlong	local03, fp
10880     08 4E 05 A1 |  if_e	add	fp, #8
10884     A7 3A 68 AC |  if_e	wrlong	#29, fp
10888     08 4E 85 A1 |  if_e	sub	fp, #8
1088c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1088c     14 4E 05 F1 | 	add	fp, #20
10890     A7 22 02 FB | 	rdlong	local03, fp
10894     14 4E 85 F1 | 	sub	fp, #20
10898     1C 22 0E F2 | 	cmp	local03, #28 wz
1089c     18 00 90 5D |  if_ne	jmp	#LR__1320
108a0     0C 4E 05 F1 | 	add	fp, #12
108a4     A7 22 02 FB | 	rdlong	local03, fp
108a8     A7 22 62 FC | 	wrlong	local03, fp
108ac     08 4E 05 F1 | 	add	fp, #8
108b0     A7 3A 68 FC | 	wrlong	#29, fp
108b4     14 4E 85 F1 | 	sub	fp, #20
108b8                 | LR__1320
108b8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
108b8     08 4E 05 F1 | 	add	fp, #8
108bc     A7 22 02 FB | 	rdlong	local03, fp
108c0     08 4E 85 F1 | 	sub	fp, #8
108c4     1F 22 0E F2 | 	cmp	local03, #31 wz
108c8     14 4E 05 51 |  if_ne	add	fp, #20
108cc     A7 20 02 5B |  if_ne	rdlong	local02, fp
108d0     14 4E 85 51 |  if_ne	sub	fp, #20
108d4     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
108d8     08 4E 05 51 |  if_ne	add	fp, #8
108dc     A7 22 02 5B |  if_ne	rdlong	local03, fp
108e0     08 4E 85 51 |  if_ne	sub	fp, #8
108e4     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
108e8     14 4E 05 51 |  if_ne	add	fp, #20
108ec     14 4E 85 51 |  if_ne	sub	fp, #20
108f0     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
108f4     A7 0C 68 AC |  if_e	wrlong	#6, fp
108f8     08 4E 05 A1 |  if_e	add	fp, #8
108fc     A7 FE 69 AC |  if_e	wrlong	#255, fp
10900     08 4E 85 A1 |  if_e	sub	fp, #8
10904     18 00 90 AD |  if_e	jmp	#LR__1321
10908     A7 22 02 FB | 	rdlong	local03, fp
1090c     0C 4E 05 F1 | 	add	fp, #12
10910     A7 1E 02 FB | 	rdlong	local01, fp
10914     0C 4E 85 F1 | 	sub	fp, #12
10918     0F 23 02 F5 | 	and	local03, local01
1091c     A7 22 62 FC | 	wrlong	local03, fp
10920                 | LR__1321
10920     A7 12 02 F6 | 	mov	arg01, fp
10924     D0 9F BF FD | 	call	#_push
10928     A7 F0 03 F6 | 	mov	ptra, fp
1092c     B2 00 A0 FD | 	call	#popregs_
10930                 | _do_and_ret
10930     2D 00 64 FD | 	ret
10934                 | 
10934                 | ' 
10934                 | ' sub do_or 
10934                 | _do_or
10934     03 4A 05 F6 | 	mov	COUNT_, #3
10938     A8 00 A0 FD | 	call	#pushregs_
1093c     18 F0 07 F1 | 	add	ptra, #24
10940     1C 9F BF FD | 	call	#_pop
10944     FD 12 02 F6 | 	mov	arg01, result1
10948     FE 1E 02 F6 | 	mov	local01, result2
1094c     FF 20 02 F6 | 	mov	local02, result3
10950     0C 4E 05 F1 | 	add	fp, #12
10954     A7 12 62 FC | 	wrlong	arg01, fp
10958     04 4E 05 F1 | 	add	fp, #4
1095c     A7 1E 62 FC | 	wrlong	local01, fp
10960     04 4E 05 F1 | 	add	fp, #4
10964     A7 20 62 FC | 	wrlong	local02, fp
10968     14 4E 85 F1 | 	sub	fp, #20
1096c     F0 9E BF FD | 	call	#_pop
10970     FF 22 02 F6 | 	mov	local03, result3
10974     A7 FA 61 FC | 	wrlong	result1, fp
10978     04 4E 05 F1 | 	add	fp, #4
1097c     A7 FC 61 FC | 	wrlong	result2, fp
10980     04 4E 05 F1 | 	add	fp, #4
10984     A7 22 62 FC | 	wrlong	local03, fp
10988                 | ' 
10988                 | ' t2=pop()
10988                 | ' t1=pop()
10988                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
10988     08 4E 85 F1 | 	sub	fp, #8
1098c     1C 22 0E F2 | 	cmp	local03, #28 wz
10990     A7 22 02 AB |  if_e	rdlong	local03, fp
10994     A7 22 62 AC |  if_e	wrlong	local03, fp
10998     08 4E 05 A1 |  if_e	add	fp, #8
1099c     A7 3A 68 AC |  if_e	wrlong	#29, fp
109a0     08 4E 85 A1 |  if_e	sub	fp, #8
109a4                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
109a4     14 4E 05 F1 | 	add	fp, #20
109a8     A7 22 02 FB | 	rdlong	local03, fp
109ac     14 4E 85 F1 | 	sub	fp, #20
109b0     1C 22 0E F2 | 	cmp	local03, #28 wz
109b4     18 00 90 5D |  if_ne	jmp	#LR__1330
109b8     0C 4E 05 F1 | 	add	fp, #12
109bc     A7 22 02 FB | 	rdlong	local03, fp
109c0     A7 22 62 FC | 	wrlong	local03, fp
109c4     08 4E 05 F1 | 	add	fp, #8
109c8     A7 3A 68 FC | 	wrlong	#29, fp
109cc     14 4E 85 F1 | 	sub	fp, #20
109d0                 | LR__1330
109d0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
109d0     08 4E 05 F1 | 	add	fp, #8
109d4     A7 22 02 FB | 	rdlong	local03, fp
109d8     08 4E 85 F1 | 	sub	fp, #8
109dc     1F 22 0E F2 | 	cmp	local03, #31 wz
109e0     14 4E 05 51 |  if_ne	add	fp, #20
109e4     A7 20 02 5B |  if_ne	rdlong	local02, fp
109e8     14 4E 85 51 |  if_ne	sub	fp, #20
109ec     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
109f0     08 4E 05 51 |  if_ne	add	fp, #8
109f4     A7 22 02 5B |  if_ne	rdlong	local03, fp
109f8     08 4E 85 51 |  if_ne	sub	fp, #8
109fc     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
10a00     14 4E 05 51 |  if_ne	add	fp, #20
10a04     14 4E 85 51 |  if_ne	sub	fp, #20
10a08     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
10a0c     A7 0C 68 AC |  if_e	wrlong	#6, fp
10a10     08 4E 05 A1 |  if_e	add	fp, #8
10a14     A7 FE 69 AC |  if_e	wrlong	#255, fp
10a18     08 4E 85 A1 |  if_e	sub	fp, #8
10a1c     18 00 90 AD |  if_e	jmp	#LR__1331
10a20     A7 22 02 FB | 	rdlong	local03, fp
10a24     0C 4E 05 F1 | 	add	fp, #12
10a28     A7 1E 02 FB | 	rdlong	local01, fp
10a2c     0C 4E 85 F1 | 	sub	fp, #12
10a30     0F 23 42 F5 | 	or	local03, local01
10a34     A7 22 62 FC | 	wrlong	local03, fp
10a38                 | LR__1331
10a38     A7 12 02 F6 | 	mov	arg01, fp
10a3c     B8 9E BF FD | 	call	#_push
10a40     A7 F0 03 F6 | 	mov	ptra, fp
10a44     B2 00 A0 FD | 	call	#popregs_
10a48                 | _do_or_ret
10a48     2D 00 64 FD | 	ret
10a4c                 | 
10a4c                 | ' 
10a4c                 | ' sub do_mul
10a4c                 | _do_mul
10a4c     05 4A 05 F6 | 	mov	COUNT_, #5
10a50     A8 00 A0 FD | 	call	#pushregs_
10a54     18 F0 07 F1 | 	add	ptra, #24
10a58     04 9E BF FD | 	call	#_pop
10a5c     FD 1E 02 F6 | 	mov	local01, result1
10a60     FE 20 02 F6 | 	mov	local02, result2
10a64     FF 22 02 F6 | 	mov	local03, result3
10a68     0C 4E 05 F1 | 	add	fp, #12
10a6c     A7 1E 62 FC | 	wrlong	local01, fp
10a70     04 4E 05 F1 | 	add	fp, #4
10a74     A7 20 62 FC | 	wrlong	local02, fp
10a78     04 4E 05 F1 | 	add	fp, #4
10a7c     A7 22 62 FC | 	wrlong	local03, fp
10a80     14 4E 85 F1 | 	sub	fp, #20
10a84     D8 9D BF FD | 	call	#_pop
10a88     FF 22 02 F6 | 	mov	local03, result3
10a8c     A7 FA 61 FC | 	wrlong	result1, fp
10a90     04 4E 05 F1 | 	add	fp, #4
10a94     A7 FC 61 FC | 	wrlong	result2, fp
10a98     04 4E 05 F1 | 	add	fp, #4
10a9c     A7 22 62 FC | 	wrlong	local03, fp
10aa0                 | ' 
10aa0                 | ' t2=pop()
10aa0                 | ' t1=pop()
10aa0                 | ' 
10aa0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
10aa0     08 4E 85 F1 | 	sub	fp, #8
10aa4     1D 22 0E F2 | 	cmp	local03, #29 wz
10aa8     14 4E 05 A1 |  if_e	add	fp, #20
10aac     A7 24 02 AB |  if_e	rdlong	local04, fp
10ab0     14 4E 85 A1 |  if_e	sub	fp, #20
10ab4     12 23 02 A6 |  if_e	mov	local03, local04
10ab8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10abc     20 00 90 5D |  if_ne	jmp	#LR__1340
10ac0     A7 20 02 FB | 	rdlong	local02, fp
10ac4     0C 4E 05 F1 | 	add	fp, #12
10ac8     A7 22 02 FB | 	rdlong	local03, fp
10acc     11 21 02 FD | 	qmul	local02, local03
10ad0     0C 4E 85 F1 | 	sub	fp, #12
10ad4     18 1E 62 FD | 	getqx	local01
10ad8     A7 1E 62 FC | 	wrlong	local01, fp
10adc     C4 02 90 FD | 	jmp	#LR__1349
10ae0                 | LR__1340
10ae0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
10ae0     08 4E 05 F1 | 	add	fp, #8
10ae4     A7 1E 02 FB | 	rdlong	local01, fp
10ae8     08 4E 85 F1 | 	sub	fp, #8
10aec     1D 1E 0E F2 | 	cmp	local01, #29 wz
10af0     14 4E 05 A1 |  if_e	add	fp, #20
10af4     A7 24 02 AB |  if_e	rdlong	local04, fp
10af8     14 4E 85 A1 |  if_e	sub	fp, #20
10afc     12 23 02 A6 |  if_e	mov	local03, local04
10b00     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10b04     2C 00 90 5D |  if_ne	jmp	#LR__1341
10b08     A7 20 02 FB | 	rdlong	local02, fp
10b0c     0C 4E 05 F1 | 	add	fp, #12
10b10     A7 22 02 FB | 	rdlong	local03, fp
10b14     11 21 02 FD | 	qmul	local02, local03
10b18     0C 4E 85 F1 | 	sub	fp, #12
10b1c     18 1E 62 FD | 	getqx	local01
10b20     A7 1E 62 FC | 	wrlong	local01, fp
10b24     08 4E 05 F1 | 	add	fp, #8
10b28     A7 38 68 FC | 	wrlong	#28, fp
10b2c     08 4E 85 F1 | 	sub	fp, #8
10b30     70 02 90 FD | 	jmp	#LR__1349
10b34                 | LR__1341
10b34                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
10b34     08 4E 05 F1 | 	add	fp, #8
10b38     A7 1E 02 FB | 	rdlong	local01, fp
10b3c     08 4E 85 F1 | 	sub	fp, #8
10b40     1D 1E 0E F2 | 	cmp	local01, #29 wz
10b44     14 4E 05 A1 |  if_e	add	fp, #20
10b48     A7 24 02 AB |  if_e	rdlong	local04, fp
10b4c     14 4E 85 A1 |  if_e	sub	fp, #20
10b50     12 23 02 A6 |  if_e	mov	local03, local04
10b54     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10b58     30 00 90 5D |  if_ne	jmp	#LR__1342
10b5c     A7 12 02 FB | 	rdlong	arg01, fp
10b60     30 07 B1 FD | 	call	#__system___float_fromuns
10b64     FD 12 02 F6 | 	mov	arg01, result1
10b68     0C 4E 05 F1 | 	add	fp, #12
10b6c     A7 14 02 FB | 	rdlong	arg02, fp
10b70     0C 4E 85 F1 | 	sub	fp, #12
10b74     20 0B B1 FD | 	call	#__system___float_mul
10b78     A7 FA 61 FC | 	wrlong	result1, fp
10b7c     08 4E 05 F1 | 	add	fp, #8
10b80     A7 3C 68 FC | 	wrlong	#30, fp
10b84     08 4E 85 F1 | 	sub	fp, #8
10b88     18 02 90 FD | 	jmp	#LR__1349
10b8c                 | LR__1342
10b8c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
10b8c     08 4E 05 F1 | 	add	fp, #8
10b90     A7 1E 02 FB | 	rdlong	local01, fp
10b94     08 4E 85 F1 | 	sub	fp, #8
10b98     1C 1E 0E F2 | 	cmp	local01, #28 wz
10b9c     14 4E 05 A1 |  if_e	add	fp, #20
10ba0     A7 24 02 AB |  if_e	rdlong	local04, fp
10ba4     14 4E 85 A1 |  if_e	sub	fp, #20
10ba8     12 23 02 A6 |  if_e	mov	local03, local04
10bac     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10bb0     20 00 90 5D |  if_ne	jmp	#LR__1343
10bb4     A7 20 02 FB | 	rdlong	local02, fp
10bb8     0C 4E 05 F1 | 	add	fp, #12
10bbc     A7 22 02 FB | 	rdlong	local03, fp
10bc0     11 21 02 FD | 	qmul	local02, local03
10bc4     0C 4E 85 F1 | 	sub	fp, #12
10bc8     18 1E 62 FD | 	getqx	local01
10bcc     A7 1E 62 FC | 	wrlong	local01, fp
10bd0     D0 01 90 FD | 	jmp	#LR__1349
10bd4                 | LR__1343
10bd4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
10bd4     08 4E 05 F1 | 	add	fp, #8
10bd8     A7 1E 02 FB | 	rdlong	local01, fp
10bdc     08 4E 85 F1 | 	sub	fp, #8
10be0     1C 1E 0E F2 | 	cmp	local01, #28 wz
10be4     14 4E 05 A1 |  if_e	add	fp, #20
10be8     A7 24 02 AB |  if_e	rdlong	local04, fp
10bec     14 4E 85 A1 |  if_e	sub	fp, #20
10bf0     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
10bf4     20 00 90 5D |  if_ne	jmp	#LR__1344
10bf8     A7 20 02 FB | 	rdlong	local02, fp
10bfc     0C 4E 05 F1 | 	add	fp, #12
10c00     A7 22 02 FB | 	rdlong	local03, fp
10c04     11 21 02 FD | 	qmul	local02, local03
10c08     0C 4E 85 F1 | 	sub	fp, #12
10c0c     18 1E 62 FD | 	getqx	local01
10c10     A7 1E 62 FC | 	wrlong	local01, fp
10c14     8C 01 90 FD | 	jmp	#LR__1349
10c18                 | LR__1344
10c18                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
10c18     08 4E 05 F1 | 	add	fp, #8
10c1c     A7 1E 02 FB | 	rdlong	local01, fp
10c20     08 4E 85 F1 | 	sub	fp, #8
10c24     1C 1E 0E F2 | 	cmp	local01, #28 wz
10c28     14 4E 05 A1 |  if_e	add	fp, #20
10c2c     A7 22 02 AB |  if_e	rdlong	local03, fp
10c30     14 4E 85 A1 |  if_e	sub	fp, #20
10c34     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10c38     40 00 90 5D |  if_ne	jmp	#LR__1345
10c3c     A7 12 02 FB | 	rdlong	arg01, fp
10c40     09 13 52 F6 | 	abs	arg01, arg01 wc
10c44     1F 26 C6 C9 |  if_b	decod	local05, #31
10c48     00 26 06 36 |  if_ae	mov	local05, #0
10c4c     44 06 B1 FD | 	call	#__system___float_fromuns
10c50     13 FB 61 F5 | 	xor	result1, local05
10c54     FD 12 02 F6 | 	mov	arg01, result1
10c58     0C 4E 05 F1 | 	add	fp, #12
10c5c     A7 14 02 FB | 	rdlong	arg02, fp
10c60     0C 4E 85 F1 | 	sub	fp, #12
10c64     30 0A B1 FD | 	call	#__system___float_mul
10c68     A7 FA 61 FC | 	wrlong	result1, fp
10c6c     08 4E 05 F1 | 	add	fp, #8
10c70     A7 3C 68 FC | 	wrlong	#30, fp
10c74     08 4E 85 F1 | 	sub	fp, #8
10c78     28 01 90 FD | 	jmp	#LR__1349
10c7c                 | LR__1345
10c7c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
10c7c     08 4E 05 F1 | 	add	fp, #8
10c80     A7 1E 02 FB | 	rdlong	local01, fp
10c84     08 4E 85 F1 | 	sub	fp, #8
10c88     1E 1E 0E F2 | 	cmp	local01, #30 wz
10c8c     14 4E 05 A1 |  if_e	add	fp, #20
10c90     A7 22 02 AB |  if_e	rdlong	local03, fp
10c94     14 4E 85 A1 |  if_e	sub	fp, #20
10c98     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10c9c     28 00 90 5D |  if_ne	jmp	#LR__1346
10ca0     A7 1E 02 FB | 	rdlong	local01, fp
10ca4     0C 4E 05 F1 | 	add	fp, #12
10ca8     A7 12 02 FB | 	rdlong	arg01, fp
10cac     0C 4E 85 F1 | 	sub	fp, #12
10cb0     E0 05 B1 FD | 	call	#__system___float_fromuns
10cb4     FD 14 02 F6 | 	mov	arg02, result1
10cb8     0F 13 02 F6 | 	mov	arg01, local01
10cbc     D8 09 B1 FD | 	call	#__system___float_mul
10cc0     A7 FA 61 FC | 	wrlong	result1, fp
10cc4     DC 00 90 FD | 	jmp	#LR__1349
10cc8                 | LR__1346
10cc8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
10cc8     08 4E 05 F1 | 	add	fp, #8
10ccc     A7 1E 02 FB | 	rdlong	local01, fp
10cd0     08 4E 85 F1 | 	sub	fp, #8
10cd4     1E 1E 0E F2 | 	cmp	local01, #30 wz
10cd8     14 4E 05 A1 |  if_e	add	fp, #20
10cdc     A7 22 02 AB |  if_e	rdlong	local03, fp
10ce0     14 4E 85 A1 |  if_e	sub	fp, #20
10ce4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10ce8     38 00 90 5D |  if_ne	jmp	#LR__1347
10cec     A7 1E 02 FB | 	rdlong	local01, fp
10cf0     0C 4E 05 F1 | 	add	fp, #12
10cf4     A7 12 02 FB | 	rdlong	arg01, fp
10cf8     0C 4E 85 F1 | 	sub	fp, #12
10cfc     09 13 52 F6 | 	abs	arg01, arg01 wc
10d00     1F 26 C6 C9 |  if_b	decod	local05, #31
10d04     00 26 06 36 |  if_ae	mov	local05, #0
10d08     88 05 B1 FD | 	call	#__system___float_fromuns
10d0c     13 FB 61 F5 | 	xor	result1, local05
10d10     FD 14 02 F6 | 	mov	arg02, result1
10d14     0F 13 02 F6 | 	mov	arg01, local01
10d18     7C 09 B1 FD | 	call	#__system___float_mul
10d1c     A7 FA 61 FC | 	wrlong	result1, fp
10d20     80 00 90 FD | 	jmp	#LR__1349
10d24                 | LR__1347
10d24                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
10d24     08 4E 05 F1 | 	add	fp, #8
10d28     A7 1E 02 FB | 	rdlong	local01, fp
10d2c     08 4E 85 F1 | 	sub	fp, #8
10d30     1E 1E 0E F2 | 	cmp	local01, #30 wz
10d34     14 4E 05 A1 |  if_e	add	fp, #20
10d38     A7 22 02 AB |  if_e	rdlong	local03, fp
10d3c     14 4E 85 A1 |  if_e	sub	fp, #20
10d40     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10d44     1C 00 90 5D |  if_ne	jmp	#LR__1348
10d48     A7 12 02 FB | 	rdlong	arg01, fp
10d4c     0C 4E 05 F1 | 	add	fp, #12
10d50     A7 14 02 FB | 	rdlong	arg02, fp
10d54     0C 4E 85 F1 | 	sub	fp, #12
10d58     3C 09 B1 FD | 	call	#__system___float_mul
10d5c     A7 FA 61 FC | 	wrlong	result1, fp
10d60     40 00 90 FD | 	jmp	#LR__1349
10d64                 | LR__1348
10d64                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
10d64     08 4E 05 F1 | 	add	fp, #8
10d68     A7 1E 02 FB | 	rdlong	local01, fp
10d6c     08 4E 85 F1 | 	sub	fp, #8
10d70     1F 1E 0E F2 | 	cmp	local01, #31 wz
10d74     14 4E 05 51 |  if_ne	add	fp, #20
10d78     A7 22 02 5B |  if_ne	rdlong	local03, fp
10d7c     14 4E 85 51 |  if_ne	sub	fp, #20
10d80     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
10d84     A7 10 68 AC |  if_e	wrlong	#8, fp
10d88     08 4E 05 A1 |  if_e	add	fp, #8
10d8c     A7 FE 69 AC |  if_e	wrlong	#255, fp
10d90     08 4E 85 A1 |  if_e	sub	fp, #8
10d94     A7 12 68 5C |  if_ne	wrlong	#9, fp
10d98     08 4E 05 51 |  if_ne	add	fp, #8
10d9c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
10da0     08 4E 85 51 |  if_ne	sub	fp, #8
10da4                 | LR__1349
10da4     A7 12 02 F6 | 	mov	arg01, fp
10da8     4C 9B BF FD | 	call	#_push
10dac     A7 F0 03 F6 | 	mov	ptra, fp
10db0     B2 00 A0 FD | 	call	#popregs_
10db4                 | _do_mul_ret
10db4     2D 00 64 FD | 	ret
10db8                 | 
10db8                 | ' 
10db8                 | ' sub do_div 
10db8                 | _do_div
10db8     01 4A 05 F6 | 	mov	COUNT_, #1
10dbc     A8 00 A0 FD | 	call	#pushregs_
10dc0     18 F0 07 F1 | 	add	ptra, #24
10dc4     98 9A BF FD | 	call	#_pop
10dc8     FD 66 02 F6 | 	mov	muldivb_, result1
10dcc     FE 64 02 F6 | 	mov	muldiva_, result2
10dd0     FF 1E 02 F6 | 	mov	local01, result3
10dd4     0C 4E 05 F1 | 	add	fp, #12
10dd8     A7 66 62 FC | 	wrlong	muldivb_, fp
10ddc     04 4E 05 F1 | 	add	fp, #4
10de0     A7 64 62 FC | 	wrlong	muldiva_, fp
10de4     04 4E 05 F1 | 	add	fp, #4
10de8     A7 1E 62 FC | 	wrlong	local01, fp
10dec     14 4E 85 F1 | 	sub	fp, #20
10df0     6C 9A BF FD | 	call	#_pop
10df4     A7 FA 61 FC | 	wrlong	result1, fp
10df8     04 4E 05 F1 | 	add	fp, #4
10dfc     A7 FC 61 FC | 	wrlong	result2, fp
10e00     04 4E 05 F1 | 	add	fp, #4
10e04     A7 FE 61 FC | 	wrlong	result3, fp
10e08                 | ' 
10e08                 | ' t2=pop()
10e08                 | ' t1=pop()
10e08                 | ' 
10e08                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
10e08     08 4E 85 F1 | 	sub	fp, #8
10e0c     1F FE 0D F2 | 	cmp	result3, #31 wz
10e10     14 4E 05 51 |  if_ne	add	fp, #20
10e14     A7 12 02 5B |  if_ne	rdlong	arg01, fp
10e18     14 4E 85 51 |  if_ne	sub	fp, #20
10e1c     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
10e20     A7 14 68 AC |  if_e	wrlong	#10, fp
10e24     08 4E 05 A1 |  if_e	add	fp, #8
10e28     A7 FE 69 AC |  if_e	wrlong	#255, fp
10e2c     08 4E 85 A1 |  if_e	sub	fp, #8
10e30     90 01 90 AD |  if_e	jmp	#LR__1356
10e34                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
10e34     08 4E 05 F1 | 	add	fp, #8
10e38     A7 66 02 FB | 	rdlong	muldivb_, fp
10e3c     08 4E 85 F1 | 	sub	fp, #8
10e40     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
10e44     1C 00 90 5D |  if_ne	jmp	#LR__1350
10e48     08 4E 05 F1 | 	add	fp, #8
10e4c     A7 38 68 FC | 	wrlong	#28, fp
10e50     08 4E 85 F1 | 	sub	fp, #8
10e54     A7 12 02 FB | 	rdlong	arg01, fp
10e58     00 14 06 F6 | 	mov	arg02, #0
10e5c     00 0D B1 FD | 	call	#__system___float_tointeger
10e60     A7 FA 61 FC | 	wrlong	result1, fp
10e64                 | LR__1350
10e64                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
10e64     14 4E 05 F1 | 	add	fp, #20
10e68     A7 66 02 FB | 	rdlong	muldivb_, fp
10e6c     14 4E 85 F1 | 	sub	fp, #20
10e70     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
10e74     28 00 90 5D |  if_ne	jmp	#LR__1351
10e78     14 4E 05 F1 | 	add	fp, #20
10e7c     A7 38 68 FC | 	wrlong	#28, fp
10e80     08 4E 85 F1 | 	sub	fp, #8
10e84     A7 12 02 FB | 	rdlong	arg01, fp
10e88     0C 4E 85 F1 | 	sub	fp, #12
10e8c     00 14 06 F6 | 	mov	arg02, #0
10e90     CC 0C B1 FD | 	call	#__system___float_tointeger
10e94     0C 4E 05 F1 | 	add	fp, #12
10e98     A7 FA 61 FC | 	wrlong	result1, fp
10e9c     0C 4E 85 F1 | 	sub	fp, #12
10ea0                 | LR__1351
10ea0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
10ea0     08 4E 05 F1 | 	add	fp, #8
10ea4     A7 66 02 FB | 	rdlong	muldivb_, fp
10ea8     08 4E 85 F1 | 	sub	fp, #8
10eac     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
10eb0     14 4E 05 A1 |  if_e	add	fp, #20
10eb4     A7 1E 02 AB |  if_e	rdlong	local01, fp
10eb8     14 4E 85 A1 |  if_e	sub	fp, #20
10ebc     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
10ec0     20 00 90 5D |  if_ne	jmp	#LR__1352
10ec4     0C 4E 05 F1 | 	add	fp, #12
10ec8     A7 1E 02 FB | 	rdlong	local01, fp
10ecc     0C 4E 85 F1 | 	sub	fp, #12
10ed0     A7 66 02 FB | 	rdlong	muldivb_, fp
10ed4     0F 67 12 FD | 	qdiv	muldivb_, local01
10ed8     18 1E 62 FD | 	getqx	local01
10edc     A7 1E 62 FC | 	wrlong	local01, fp
10ee0     E0 00 90 FD | 	jmp	#LR__1356
10ee4                 | LR__1352
10ee4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
10ee4     08 4E 05 F1 | 	add	fp, #8
10ee8     A7 66 02 FB | 	rdlong	muldivb_, fp
10eec     08 4E 85 F1 | 	sub	fp, #8
10ef0     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
10ef4     14 4E 05 A1 |  if_e	add	fp, #20
10ef8     A7 1E 02 AB |  if_e	rdlong	local01, fp
10efc     14 4E 85 A1 |  if_e	sub	fp, #20
10f00     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
10f04     2C 00 90 5D |  if_ne	jmp	#LR__1353
10f08     0C 4E 05 F1 | 	add	fp, #12
10f0c     A7 1E 02 FB | 	rdlong	local01, fp
10f10     0C 4E 85 F1 | 	sub	fp, #12
10f14     A7 66 02 FB | 	rdlong	muldivb_, fp
10f18     0F 67 12 FD | 	qdiv	muldivb_, local01
10f1c     18 1E 62 FD | 	getqx	local01
10f20     A7 1E 62 FC | 	wrlong	local01, fp
10f24     08 4E 05 F1 | 	add	fp, #8
10f28     A7 38 68 FC | 	wrlong	#28, fp
10f2c     08 4E 85 F1 | 	sub	fp, #8
10f30     90 00 90 FD | 	jmp	#LR__1356
10f34                 | LR__1353
10f34                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
10f34     08 4E 05 F1 | 	add	fp, #8
10f38     A7 66 02 FB | 	rdlong	muldivb_, fp
10f3c     08 4E 85 F1 | 	sub	fp, #8
10f40     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
10f44     14 4E 05 A1 |  if_e	add	fp, #20
10f48     A7 1E 02 AB |  if_e	rdlong	local01, fp
10f4c     14 4E 85 A1 |  if_e	sub	fp, #20
10f50     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
10f54     1C 00 90 5D |  if_ne	jmp	#LR__1354
10f58     A7 64 02 FB | 	rdlong	muldiva_, fp
10f5c     0C 4E 05 F1 | 	add	fp, #12
10f60     A7 66 02 FB | 	rdlong	muldivb_, fp
10f64     0C 4E 85 F1 | 	sub	fp, #12
10f68     BA 00 A0 FD | 	call	#divide_
10f6c     A7 66 62 FC | 	wrlong	muldivb_, fp
10f70     50 00 90 FD | 	jmp	#LR__1356
10f74                 | LR__1354
10f74                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
10f74     08 4E 05 F1 | 	add	fp, #8
10f78     A7 66 02 FB | 	rdlong	muldivb_, fp
10f7c     08 4E 85 F1 | 	sub	fp, #8
10f80     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
10f84     14 4E 05 A1 |  if_e	add	fp, #20
10f88     A7 1E 02 AB |  if_e	rdlong	local01, fp
10f8c     14 4E 85 A1 |  if_e	sub	fp, #20
10f90     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
10f94     1C 00 90 5D |  if_ne	jmp	#LR__1355
10f98     A7 64 02 FB | 	rdlong	muldiva_, fp
10f9c     0C 4E 05 F1 | 	add	fp, #12
10fa0     A7 66 02 FB | 	rdlong	muldivb_, fp
10fa4     0C 4E 85 F1 | 	sub	fp, #12
10fa8     BA 00 A0 FD | 	call	#divide_
10fac     A7 66 62 FC | 	wrlong	muldivb_, fp
10fb0     10 00 90 FD | 	jmp	#LR__1356
10fb4                 | LR__1355
10fb4     A7 16 68 FC | 	wrlong	#11, fp
10fb8     08 4E 05 F1 | 	add	fp, #8
10fbc     A7 FE 69 FC | 	wrlong	#255, fp
10fc0     08 4E 85 F1 | 	sub	fp, #8
10fc4                 | LR__1356
10fc4     A7 12 02 F6 | 	mov	arg01, fp
10fc8     2C 99 BF FD | 	call	#_push
10fcc     A7 F0 03 F6 | 	mov	ptra, fp
10fd0     B2 00 A0 FD | 	call	#popregs_
10fd4                 | _do_div_ret
10fd4     2D 00 64 FD | 	ret
10fd8                 | 
10fd8                 | ' 
10fd8                 | ' sub do_fdiv 
10fd8                 | _do_fdiv
10fd8     02 4A 05 F6 | 	mov	COUNT_, #2
10fdc     A8 00 A0 FD | 	call	#pushregs_
10fe0     18 F0 07 F1 | 	add	ptra, #24
10fe4     78 98 BF FD | 	call	#_pop
10fe8     FD 14 02 F6 | 	mov	arg02, result1
10fec     FE 12 02 F6 | 	mov	arg01, result2
10ff0     FF 1E 02 F6 | 	mov	local01, result3
10ff4     0C 4E 05 F1 | 	add	fp, #12
10ff8     A7 14 62 FC | 	wrlong	arg02, fp
10ffc     04 4E 05 F1 | 	add	fp, #4
11000     A7 12 62 FC | 	wrlong	arg01, fp
11004     04 4E 05 F1 | 	add	fp, #4
11008     A7 1E 62 FC | 	wrlong	local01, fp
1100c     14 4E 85 F1 | 	sub	fp, #20
11010     4C 98 BF FD | 	call	#_pop
11014     A7 FA 61 FC | 	wrlong	result1, fp
11018     04 4E 05 F1 | 	add	fp, #4
1101c     A7 FC 61 FC | 	wrlong	result2, fp
11020     04 4E 05 F1 | 	add	fp, #4
11024     A7 FE 61 FC | 	wrlong	result3, fp
11028                 | ' 
11028                 | ' t2=pop()
11028                 | ' t1=pop()
11028                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
11028     08 4E 85 F1 | 	sub	fp, #8
1102c     1F FE 0D F2 | 	cmp	result3, #31 wz
11030     14 4E 05 51 |  if_ne	add	fp, #20
11034     A7 1E 02 5B |  if_ne	rdlong	local01, fp
11038     14 4E 85 51 |  if_ne	sub	fp, #20
1103c     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
11040     A7 14 68 AC |  if_e	wrlong	#10, fp
11044     08 4E 05 A1 |  if_e	add	fp, #8
11048     A7 FE 69 AC |  if_e	wrlong	#255, fp
1104c     08 4E 85 A1 |  if_e	sub	fp, #8
11050     38 01 90 AD |  if_e	jmp	#LR__1365
11054                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
11054     08 4E 05 F1 | 	add	fp, #8
11058     A7 14 02 FB | 	rdlong	arg02, fp
1105c     08 4E 85 F1 | 	sub	fp, #8
11060     1C 14 0E F2 | 	cmp	arg02, #28 wz
11064     28 00 90 5D |  if_ne	jmp	#LR__1360
11068     08 4E 05 F1 | 	add	fp, #8
1106c     A7 3C 68 FC | 	wrlong	#30, fp
11070     08 4E 85 F1 | 	sub	fp, #8
11074     A7 12 02 FB | 	rdlong	arg01, fp
11078     09 13 52 F6 | 	abs	arg01, arg01 wc
1107c     1F 20 C6 C9 |  if_b	decod	local02, #31
11080     00 20 06 36 |  if_ae	mov	local02, #0
11084     0C 02 B1 FD | 	call	#__system___float_fromuns
11088     10 FB 61 F5 | 	xor	result1, local02
1108c     A7 FA 61 FC | 	wrlong	result1, fp
11090                 | LR__1360
11090                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
11090     08 4E 05 F1 | 	add	fp, #8
11094     A7 14 02 FB | 	rdlong	arg02, fp
11098     08 4E 85 F1 | 	sub	fp, #8
1109c     1D 14 0E F2 | 	cmp	arg02, #29 wz
110a0     18 00 90 5D |  if_ne	jmp	#LR__1361
110a4     08 4E 05 F1 | 	add	fp, #8
110a8     A7 3C 68 FC | 	wrlong	#30, fp
110ac     08 4E 85 F1 | 	sub	fp, #8
110b0     A7 12 02 FB | 	rdlong	arg01, fp
110b4     DC 01 B1 FD | 	call	#__system___float_fromuns
110b8     A7 FA 61 FC | 	wrlong	result1, fp
110bc                 | LR__1361
110bc                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
110bc     14 4E 05 F1 | 	add	fp, #20
110c0     A7 14 02 FB | 	rdlong	arg02, fp
110c4     14 4E 85 F1 | 	sub	fp, #20
110c8     1C 14 0E F2 | 	cmp	arg02, #28 wz
110cc     34 00 90 5D |  if_ne	jmp	#LR__1362
110d0     14 4E 05 F1 | 	add	fp, #20
110d4     A7 3C 68 FC | 	wrlong	#30, fp
110d8     08 4E 85 F1 | 	sub	fp, #8
110dc     A7 12 02 FB | 	rdlong	arg01, fp
110e0     0C 4E 85 F1 | 	sub	fp, #12
110e4     09 13 52 F6 | 	abs	arg01, arg01 wc
110e8     1F 20 C6 C9 |  if_b	decod	local02, #31
110ec     00 20 06 36 |  if_ae	mov	local02, #0
110f0     A0 01 B1 FD | 	call	#__system___float_fromuns
110f4     10 FB 61 F5 | 	xor	result1, local02
110f8     0C 4E 05 F1 | 	add	fp, #12
110fc     A7 FA 61 FC | 	wrlong	result1, fp
11100     0C 4E 85 F1 | 	sub	fp, #12
11104                 | LR__1362
11104                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
11104     14 4E 05 F1 | 	add	fp, #20
11108     A7 14 02 FB | 	rdlong	arg02, fp
1110c     14 4E 85 F1 | 	sub	fp, #20
11110     1D 14 0E F2 | 	cmp	arg02, #29 wz
11114     24 00 90 5D |  if_ne	jmp	#LR__1363
11118     14 4E 05 F1 | 	add	fp, #20
1111c     A7 3C 68 FC | 	wrlong	#30, fp
11120     08 4E 85 F1 | 	sub	fp, #8
11124     A7 12 02 FB | 	rdlong	arg01, fp
11128     0C 4E 85 F1 | 	sub	fp, #12
1112c     64 01 B1 FD | 	call	#__system___float_fromuns
11130     0C 4E 05 F1 | 	add	fp, #12
11134     A7 FA 61 FC | 	wrlong	result1, fp
11138     0C 4E 85 F1 | 	sub	fp, #12
1113c                 | LR__1363
1113c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
1113c     08 4E 05 F1 | 	add	fp, #8
11140     A7 14 02 FB | 	rdlong	arg02, fp
11144     08 4E 85 F1 | 	sub	fp, #8
11148     1E 14 0E F2 | 	cmp	arg02, #30 wz
1114c     14 4E 05 A1 |  if_e	add	fp, #20
11150     A7 1E 02 AB |  if_e	rdlong	local01, fp
11154     14 4E 85 A1 |  if_e	sub	fp, #20
11158     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
1115c     1C 00 90 5D |  if_ne	jmp	#LR__1364
11160     A7 12 02 FB | 	rdlong	arg01, fp
11164     0C 4E 05 F1 | 	add	fp, #12
11168     A7 14 02 FB | 	rdlong	arg02, fp
1116c     0C 4E 85 F1 | 	sub	fp, #12
11170     28 07 B1 FD | 	call	#__system___float_div
11174     A7 FA 61 FC | 	wrlong	result1, fp
11178     10 00 90 FD | 	jmp	#LR__1365
1117c                 | LR__1364
1117c     A7 16 68 FC | 	wrlong	#11, fp
11180     08 4E 05 F1 | 	add	fp, #8
11184     A7 FE 69 FC | 	wrlong	#255, fp
11188     08 4E 85 F1 | 	sub	fp, #8
1118c                 | LR__1365
1118c     A7 12 02 F6 | 	mov	arg01, fp
11190     64 97 BF FD | 	call	#_push
11194     A7 F0 03 F6 | 	mov	ptra, fp
11198     B2 00 A0 FD | 	call	#popregs_
1119c                 | _do_fdiv_ret
1119c     2D 00 64 FD | 	ret
111a0                 | 
111a0                 | ' 
111a0                 | ' 
111a0                 | ' sub do_mod 
111a0                 | _do_mod
111a0     01 4A 05 F6 | 	mov	COUNT_, #1
111a4     A8 00 A0 FD | 	call	#pushregs_
111a8     18 F0 07 F1 | 	add	ptra, #24
111ac     B0 96 BF FD | 	call	#_pop
111b0     FD 66 02 F6 | 	mov	muldivb_, result1
111b4     FE 64 02 F6 | 	mov	muldiva_, result2
111b8     FF 1E 02 F6 | 	mov	local01, result3
111bc     0C 4E 05 F1 | 	add	fp, #12
111c0     A7 66 62 FC | 	wrlong	muldivb_, fp
111c4     04 4E 05 F1 | 	add	fp, #4
111c8     A7 64 62 FC | 	wrlong	muldiva_, fp
111cc     04 4E 05 F1 | 	add	fp, #4
111d0     A7 1E 62 FC | 	wrlong	local01, fp
111d4     14 4E 85 F1 | 	sub	fp, #20
111d8     84 96 BF FD | 	call	#_pop
111dc     A7 FA 61 FC | 	wrlong	result1, fp
111e0     04 4E 05 F1 | 	add	fp, #4
111e4     A7 FC 61 FC | 	wrlong	result2, fp
111e8     04 4E 05 F1 | 	add	fp, #4
111ec     A7 FE 61 FC | 	wrlong	result3, fp
111f0                 | ' 
111f0                 | ' t2=pop()
111f0                 | ' t1=pop()
111f0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
111f0     08 4E 85 F1 | 	sub	fp, #8
111f4     1F FE 0D F2 | 	cmp	result3, #31 wz
111f8     14 4E 05 51 |  if_ne	add	fp, #20
111fc     A7 12 02 5B |  if_ne	rdlong	arg01, fp
11200     14 4E 85 51 |  if_ne	sub	fp, #20
11204     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
11208     A7 14 68 AC |  if_e	wrlong	#10, fp
1120c     08 4E 05 A1 |  if_e	add	fp, #8
11210     A7 FE 69 AC |  if_e	wrlong	#255, fp
11214     08 4E 85 A1 |  if_e	sub	fp, #8
11218     90 01 90 AD |  if_e	jmp	#LR__1376
1121c                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1121c     08 4E 05 F1 | 	add	fp, #8
11220     A7 66 02 FB | 	rdlong	muldivb_, fp
11224     08 4E 85 F1 | 	sub	fp, #8
11228     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
1122c     1C 00 90 5D |  if_ne	jmp	#LR__1370
11230     08 4E 05 F1 | 	add	fp, #8
11234     A7 38 68 FC | 	wrlong	#28, fp
11238     08 4E 85 F1 | 	sub	fp, #8
1123c     A7 12 02 FB | 	rdlong	arg01, fp
11240     00 14 06 F6 | 	mov	arg02, #0
11244     18 09 B1 FD | 	call	#__system___float_tointeger
11248     A7 FA 61 FC | 	wrlong	result1, fp
1124c                 | LR__1370
1124c                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1124c     14 4E 05 F1 | 	add	fp, #20
11250     A7 66 02 FB | 	rdlong	muldivb_, fp
11254     14 4E 85 F1 | 	sub	fp, #20
11258     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
1125c     28 00 90 5D |  if_ne	jmp	#LR__1371
11260     14 4E 05 F1 | 	add	fp, #20
11264     A7 38 68 FC | 	wrlong	#28, fp
11268     08 4E 85 F1 | 	sub	fp, #8
1126c     A7 12 02 FB | 	rdlong	arg01, fp
11270     0C 4E 85 F1 | 	sub	fp, #12
11274     00 14 06 F6 | 	mov	arg02, #0
11278     E4 08 B1 FD | 	call	#__system___float_tointeger
1127c     0C 4E 05 F1 | 	add	fp, #12
11280     A7 FA 61 FC | 	wrlong	result1, fp
11284     0C 4E 85 F1 | 	sub	fp, #12
11288                 | LR__1371
11288                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
11288     08 4E 05 F1 | 	add	fp, #8
1128c     A7 66 02 FB | 	rdlong	muldivb_, fp
11290     08 4E 85 F1 | 	sub	fp, #8
11294     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
11298     14 4E 05 A1 |  if_e	add	fp, #20
1129c     A7 1E 02 AB |  if_e	rdlong	local01, fp
112a0     14 4E 85 A1 |  if_e	sub	fp, #20
112a4     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
112a8     20 00 90 5D |  if_ne	jmp	#LR__1372
112ac     0C 4E 05 F1 | 	add	fp, #12
112b0     A7 1E 02 FB | 	rdlong	local01, fp
112b4     0C 4E 85 F1 | 	sub	fp, #12
112b8     A7 66 02 FB | 	rdlong	muldivb_, fp
112bc     0F 67 12 FD | 	qdiv	muldivb_, local01
112c0     19 1E 62 FD | 	getqy	local01
112c4     A7 1E 62 FC | 	wrlong	local01, fp
112c8     E0 00 90 FD | 	jmp	#LR__1376
112cc                 | LR__1372
112cc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
112cc     08 4E 05 F1 | 	add	fp, #8
112d0     A7 66 02 FB | 	rdlong	muldivb_, fp
112d4     08 4E 85 F1 | 	sub	fp, #8
112d8     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
112dc     14 4E 05 A1 |  if_e	add	fp, #20
112e0     A7 1E 02 AB |  if_e	rdlong	local01, fp
112e4     14 4E 85 A1 |  if_e	sub	fp, #20
112e8     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
112ec     2C 00 90 5D |  if_ne	jmp	#LR__1373
112f0     0C 4E 05 F1 | 	add	fp, #12
112f4     A7 1E 02 FB | 	rdlong	local01, fp
112f8     0C 4E 85 F1 | 	sub	fp, #12
112fc     A7 66 02 FB | 	rdlong	muldivb_, fp
11300     0F 67 12 FD | 	qdiv	muldivb_, local01
11304     19 1E 62 FD | 	getqy	local01
11308     A7 1E 62 FC | 	wrlong	local01, fp
1130c     08 4E 05 F1 | 	add	fp, #8
11310     A7 38 68 FC | 	wrlong	#28, fp
11314     08 4E 85 F1 | 	sub	fp, #8
11318     90 00 90 FD | 	jmp	#LR__1376
1131c                 | LR__1373
1131c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
1131c     08 4E 05 F1 | 	add	fp, #8
11320     A7 66 02 FB | 	rdlong	muldivb_, fp
11324     08 4E 85 F1 | 	sub	fp, #8
11328     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
1132c     14 4E 05 A1 |  if_e	add	fp, #20
11330     A7 1E 02 AB |  if_e	rdlong	local01, fp
11334     14 4E 85 A1 |  if_e	sub	fp, #20
11338     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
1133c     1C 00 90 5D |  if_ne	jmp	#LR__1374
11340     A7 64 02 FB | 	rdlong	muldiva_, fp
11344     0C 4E 05 F1 | 	add	fp, #12
11348     A7 66 02 FB | 	rdlong	muldivb_, fp
1134c     0C 4E 85 F1 | 	sub	fp, #12
11350     BA 00 A0 FD | 	call	#divide_
11354     A7 64 62 FC | 	wrlong	muldiva_, fp
11358     50 00 90 FD | 	jmp	#LR__1376
1135c                 | LR__1374
1135c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
1135c     08 4E 05 F1 | 	add	fp, #8
11360     A7 66 02 FB | 	rdlong	muldivb_, fp
11364     08 4E 85 F1 | 	sub	fp, #8
11368     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
1136c     14 4E 05 A1 |  if_e	add	fp, #20
11370     A7 1E 02 AB |  if_e	rdlong	local01, fp
11374     14 4E 85 A1 |  if_e	sub	fp, #20
11378     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
1137c     1C 00 90 5D |  if_ne	jmp	#LR__1375
11380     A7 64 02 FB | 	rdlong	muldiva_, fp
11384     0C 4E 05 F1 | 	add	fp, #12
11388     A7 66 02 FB | 	rdlong	muldivb_, fp
1138c     0C 4E 85 F1 | 	sub	fp, #12
11390     BA 00 A0 FD | 	call	#divide_
11394     A7 64 62 FC | 	wrlong	muldiva_, fp
11398     10 00 90 FD | 	jmp	#LR__1376
1139c                 | LR__1375
1139c     A7 16 68 FC | 	wrlong	#11, fp
113a0     08 4E 05 F1 | 	add	fp, #8
113a4     A7 FE 69 FC | 	wrlong	#255, fp
113a8     08 4E 85 F1 | 	sub	fp, #8
113ac                 | LR__1376
113ac     A7 12 02 F6 | 	mov	arg01, fp
113b0     44 95 BF FD | 	call	#_push
113b4     A7 F0 03 F6 | 	mov	ptra, fp
113b8     B2 00 A0 FD | 	call	#popregs_
113bc                 | _do_mod_ret
113bc     2D 00 64 FD | 	ret
113c0                 | 
113c0                 | ' 
113c0                 | ' sub do_shl 
113c0                 | _do_shl
113c0     03 4A 05 F6 | 	mov	COUNT_, #3
113c4     A8 00 A0 FD | 	call	#pushregs_
113c8     18 F0 07 F1 | 	add	ptra, #24
113cc     90 94 BF FD | 	call	#_pop
113d0     FD 12 02 F6 | 	mov	arg01, result1
113d4     FE 1E 02 F6 | 	mov	local01, result2
113d8     FF 20 02 F6 | 	mov	local02, result3
113dc     0C 4E 05 F1 | 	add	fp, #12
113e0     A7 12 62 FC | 	wrlong	arg01, fp
113e4     04 4E 05 F1 | 	add	fp, #4
113e8     A7 1E 62 FC | 	wrlong	local01, fp
113ec     04 4E 05 F1 | 	add	fp, #4
113f0     A7 20 62 FC | 	wrlong	local02, fp
113f4     14 4E 85 F1 | 	sub	fp, #20
113f8     64 94 BF FD | 	call	#_pop
113fc     FF 22 02 F6 | 	mov	local03, result3
11400     A7 FA 61 FC | 	wrlong	result1, fp
11404     04 4E 05 F1 | 	add	fp, #4
11408     A7 FC 61 FC | 	wrlong	result2, fp
1140c     04 4E 05 F1 | 	add	fp, #4
11410     A7 22 62 FC | 	wrlong	local03, fp
11414                 | ' 
11414                 | ' t2=pop()
11414                 | ' t1=pop()
11414                 | ' 
11414                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
11414     08 4E 85 F1 | 	sub	fp, #8
11418     1C 22 0E F2 | 	cmp	local03, #28 wz
1141c     A7 22 02 AB |  if_e	rdlong	local03, fp
11420     A7 22 62 AC |  if_e	wrlong	local03, fp
11424     08 4E 05 A1 |  if_e	add	fp, #8
11428     A7 3A 68 AC |  if_e	wrlong	#29, fp
1142c     08 4E 85 A1 |  if_e	sub	fp, #8
11430                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
11430     14 4E 05 F1 | 	add	fp, #20
11434     A7 22 02 FB | 	rdlong	local03, fp
11438     14 4E 85 F1 | 	sub	fp, #20
1143c     1C 22 0E F2 | 	cmp	local03, #28 wz
11440     18 00 90 5D |  if_ne	jmp	#LR__1380
11444     0C 4E 05 F1 | 	add	fp, #12
11448     A7 22 02 FB | 	rdlong	local03, fp
1144c     A7 22 62 FC | 	wrlong	local03, fp
11450     08 4E 05 F1 | 	add	fp, #8
11454     A7 3A 68 FC | 	wrlong	#29, fp
11458     14 4E 85 F1 | 	sub	fp, #20
1145c                 | LR__1380
1145c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
1145c     08 4E 05 F1 | 	add	fp, #8
11460     A7 22 02 FB | 	rdlong	local03, fp
11464     08 4E 85 F1 | 	sub	fp, #8
11468     1F 22 0E F2 | 	cmp	local03, #31 wz
1146c     14 4E 05 51 |  if_ne	add	fp, #20
11470     A7 20 02 5B |  if_ne	rdlong	local02, fp
11474     14 4E 85 51 |  if_ne	sub	fp, #20
11478     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
1147c     08 4E 05 51 |  if_ne	add	fp, #8
11480     A7 22 02 5B |  if_ne	rdlong	local03, fp
11484     08 4E 85 51 |  if_ne	sub	fp, #8
11488     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
1148c     14 4E 05 51 |  if_ne	add	fp, #20
11490     14 4E 85 51 |  if_ne	sub	fp, #20
11494     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
11498     A7 0C 68 AC |  if_e	wrlong	#6, fp
1149c     08 4E 05 A1 |  if_e	add	fp, #8
114a0     A7 FE 69 AC |  if_e	wrlong	#255, fp
114a4     08 4E 85 A1 |  if_e	sub	fp, #8
114a8     18 00 90 AD |  if_e	jmp	#LR__1381
114ac     A7 22 02 FB | 	rdlong	local03, fp
114b0     0C 4E 05 F1 | 	add	fp, #12
114b4     A7 1E 02 FB | 	rdlong	local01, fp
114b8     0C 4E 85 F1 | 	sub	fp, #12
114bc     0F 23 62 F0 | 	shl	local03, local01
114c0     A7 22 62 FC | 	wrlong	local03, fp
114c4                 | LR__1381
114c4     A7 12 02 F6 | 	mov	arg01, fp
114c8     2C 94 BF FD | 	call	#_push
114cc     A7 F0 03 F6 | 	mov	ptra, fp
114d0     B2 00 A0 FD | 	call	#popregs_
114d4                 | _do_shl_ret
114d4     2D 00 64 FD | 	ret
114d8                 | 
114d8                 | ' 
114d8                 | ' sub do_shr 
114d8                 | _do_shr
114d8     03 4A 05 F6 | 	mov	COUNT_, #3
114dc     A8 00 A0 FD | 	call	#pushregs_
114e0     18 F0 07 F1 | 	add	ptra, #24
114e4     78 93 BF FD | 	call	#_pop
114e8     FD 12 02 F6 | 	mov	arg01, result1
114ec     FE 1E 02 F6 | 	mov	local01, result2
114f0     FF 20 02 F6 | 	mov	local02, result3
114f4     0C 4E 05 F1 | 	add	fp, #12
114f8     A7 12 62 FC | 	wrlong	arg01, fp
114fc     04 4E 05 F1 | 	add	fp, #4
11500     A7 1E 62 FC | 	wrlong	local01, fp
11504     04 4E 05 F1 | 	add	fp, #4
11508     A7 20 62 FC | 	wrlong	local02, fp
1150c     14 4E 85 F1 | 	sub	fp, #20
11510     4C 93 BF FD | 	call	#_pop
11514     FF 22 02 F6 | 	mov	local03, result3
11518     A7 FA 61 FC | 	wrlong	result1, fp
1151c     04 4E 05 F1 | 	add	fp, #4
11520     A7 FC 61 FC | 	wrlong	result2, fp
11524     04 4E 05 F1 | 	add	fp, #4
11528     A7 22 62 FC | 	wrlong	local03, fp
1152c                 | ' t2=pop()
1152c                 | ' t1=pop()
1152c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1152c     08 4E 85 F1 | 	sub	fp, #8
11530     1C 22 0E F2 | 	cmp	local03, #28 wz
11534     A7 22 02 AB |  if_e	rdlong	local03, fp
11538     A7 22 62 AC |  if_e	wrlong	local03, fp
1153c     08 4E 05 A1 |  if_e	add	fp, #8
11540     A7 3A 68 AC |  if_e	wrlong	#29, fp
11544     08 4E 85 A1 |  if_e	sub	fp, #8
11548                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
11548     14 4E 05 F1 | 	add	fp, #20
1154c     A7 22 02 FB | 	rdlong	local03, fp
11550     14 4E 85 F1 | 	sub	fp, #20
11554     1C 22 0E F2 | 	cmp	local03, #28 wz
11558     18 00 90 5D |  if_ne	jmp	#LR__1390
1155c     0C 4E 05 F1 | 	add	fp, #12
11560     A7 22 02 FB | 	rdlong	local03, fp
11564     A7 22 62 FC | 	wrlong	local03, fp
11568     08 4E 05 F1 | 	add	fp, #8
1156c     A7 3A 68 FC | 	wrlong	#29, fp
11570     14 4E 85 F1 | 	sub	fp, #20
11574                 | LR__1390
11574                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
11574     08 4E 05 F1 | 	add	fp, #8
11578     A7 22 02 FB | 	rdlong	local03, fp
1157c     08 4E 85 F1 | 	sub	fp, #8
11580     1F 22 0E F2 | 	cmp	local03, #31 wz
11584     14 4E 05 51 |  if_ne	add	fp, #20
11588     A7 20 02 5B |  if_ne	rdlong	local02, fp
1158c     14 4E 85 51 |  if_ne	sub	fp, #20
11590     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
11594     08 4E 05 51 |  if_ne	add	fp, #8
11598     A7 22 02 5B |  if_ne	rdlong	local03, fp
1159c     08 4E 85 51 |  if_ne	sub	fp, #8
115a0     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
115a4     14 4E 05 51 |  if_ne	add	fp, #20
115a8     14 4E 85 51 |  if_ne	sub	fp, #20
115ac     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
115b0     A7 0C 68 AC |  if_e	wrlong	#6, fp
115b4     08 4E 05 A1 |  if_e	add	fp, #8
115b8     A7 FE 69 AC |  if_e	wrlong	#255, fp
115bc     08 4E 85 A1 |  if_e	sub	fp, #8
115c0     18 00 90 AD |  if_e	jmp	#LR__1391
115c4     A7 22 02 FB | 	rdlong	local03, fp
115c8     0C 4E 05 F1 | 	add	fp, #12
115cc     A7 1E 02 FB | 	rdlong	local01, fp
115d0     0C 4E 85 F1 | 	sub	fp, #12
115d4     0F 23 42 F0 | 	shr	local03, local01
115d8     A7 22 62 FC | 	wrlong	local03, fp
115dc                 | LR__1391
115dc     A7 12 02 F6 | 	mov	arg01, fp
115e0     14 93 BF FD | 	call	#_push
115e4     A7 F0 03 F6 | 	mov	ptra, fp
115e8     B2 00 A0 FD | 	call	#popregs_
115ec                 | _do_shr_ret
115ec     2D 00 64 FD | 	ret
115f0                 | 
115f0                 | ' 
115f0                 | ' sub do_power 
115f0                 | _do_power
115f0     02 4A 05 F6 | 	mov	COUNT_, #2
115f4     A8 00 A0 FD | 	call	#pushregs_
115f8     18 F0 07 F1 | 	add	ptra, #24
115fc     60 92 BF FD | 	call	#_pop
11600     FD 14 02 F6 | 	mov	arg02, result1
11604     FE 12 02 F6 | 	mov	arg01, result2
11608     FF 1E 02 F6 | 	mov	local01, result3
1160c     0C 4E 05 F1 | 	add	fp, #12
11610     A7 14 62 FC | 	wrlong	arg02, fp
11614     04 4E 05 F1 | 	add	fp, #4
11618     A7 12 62 FC | 	wrlong	arg01, fp
1161c     04 4E 05 F1 | 	add	fp, #4
11620     A7 1E 62 FC | 	wrlong	local01, fp
11624     14 4E 85 F1 | 	sub	fp, #20
11628     34 92 BF FD | 	call	#_pop
1162c     A7 FA 61 FC | 	wrlong	result1, fp
11630     04 4E 05 F1 | 	add	fp, #4
11634     A7 FC 61 FC | 	wrlong	result2, fp
11638     04 4E 05 F1 | 	add	fp, #4
1163c     A7 FE 61 FC | 	wrlong	result3, fp
11640                 | ' t2=pop()
11640                 | ' t1=pop()
11640                 | ' 
11640                 | ' 
11640                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
11640     08 4E 85 F1 | 	sub	fp, #8
11644     1F FE 0D F2 | 	cmp	result3, #31 wz
11648     14 4E 05 51 |  if_ne	add	fp, #20
1164c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
11650     14 4E 85 51 |  if_ne	sub	fp, #20
11654     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
11658     A7 18 68 AC |  if_e	wrlong	#12, fp
1165c     08 4E 05 A1 |  if_e	add	fp, #8
11660     A7 FE 69 AC |  if_e	wrlong	#255, fp
11664     08 4E 85 A1 |  if_e	sub	fp, #8
11668     38 01 90 AD |  if_e	jmp	#LR__1405
1166c                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1166c     08 4E 05 F1 | 	add	fp, #8
11670     A7 14 02 FB | 	rdlong	arg02, fp
11674     08 4E 85 F1 | 	sub	fp, #8
11678     1C 14 0E F2 | 	cmp	arg02, #28 wz
1167c     28 00 90 5D |  if_ne	jmp	#LR__1400
11680     08 4E 05 F1 | 	add	fp, #8
11684     A7 3C 68 FC | 	wrlong	#30, fp
11688     08 4E 85 F1 | 	sub	fp, #8
1168c     A7 12 02 FB | 	rdlong	arg01, fp
11690     09 13 52 F6 | 	abs	arg01, arg01 wc
11694     1F 20 C6 C9 |  if_b	decod	local02, #31
11698     00 20 06 36 |  if_ae	mov	local02, #0
1169c     F4 FB B0 FD | 	call	#__system___float_fromuns
116a0     10 FB 61 F5 | 	xor	result1, local02
116a4     A7 FA 61 FC | 	wrlong	result1, fp
116a8                 | LR__1400
116a8                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
116a8     08 4E 05 F1 | 	add	fp, #8
116ac     A7 14 02 FB | 	rdlong	arg02, fp
116b0     08 4E 85 F1 | 	sub	fp, #8
116b4     1D 14 0E F2 | 	cmp	arg02, #29 wz
116b8     18 00 90 5D |  if_ne	jmp	#LR__1401
116bc     08 4E 05 F1 | 	add	fp, #8
116c0     A7 3C 68 FC | 	wrlong	#30, fp
116c4     08 4E 85 F1 | 	sub	fp, #8
116c8     A7 12 02 FB | 	rdlong	arg01, fp
116cc     C4 FB B0 FD | 	call	#__system___float_fromuns
116d0     A7 FA 61 FC | 	wrlong	result1, fp
116d4                 | LR__1401
116d4                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
116d4     14 4E 05 F1 | 	add	fp, #20
116d8     A7 14 02 FB | 	rdlong	arg02, fp
116dc     14 4E 85 F1 | 	sub	fp, #20
116e0     1C 14 0E F2 | 	cmp	arg02, #28 wz
116e4     34 00 90 5D |  if_ne	jmp	#LR__1402
116e8     14 4E 05 F1 | 	add	fp, #20
116ec     A7 3C 68 FC | 	wrlong	#30, fp
116f0     08 4E 85 F1 | 	sub	fp, #8
116f4     A7 12 02 FB | 	rdlong	arg01, fp
116f8     0C 4E 85 F1 | 	sub	fp, #12
116fc     09 13 52 F6 | 	abs	arg01, arg01 wc
11700     1F 20 C6 C9 |  if_b	decod	local02, #31
11704     00 20 06 36 |  if_ae	mov	local02, #0
11708     88 FB B0 FD | 	call	#__system___float_fromuns
1170c     10 FB 61 F5 | 	xor	result1, local02
11710     0C 4E 05 F1 | 	add	fp, #12
11714     A7 FA 61 FC | 	wrlong	result1, fp
11718     0C 4E 85 F1 | 	sub	fp, #12
1171c                 | LR__1402
1171c                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1171c     14 4E 05 F1 | 	add	fp, #20
11720     A7 14 02 FB | 	rdlong	arg02, fp
11724     14 4E 85 F1 | 	sub	fp, #20
11728     1D 14 0E F2 | 	cmp	arg02, #29 wz
1172c     24 00 90 5D |  if_ne	jmp	#LR__1403
11730     14 4E 05 F1 | 	add	fp, #20
11734     A7 3C 68 FC | 	wrlong	#30, fp
11738     08 4E 85 F1 | 	sub	fp, #8
1173c     A7 12 02 FB | 	rdlong	arg01, fp
11740     0C 4E 85 F1 | 	sub	fp, #12
11744     4C FB B0 FD | 	call	#__system___float_fromuns
11748     0C 4E 05 F1 | 	add	fp, #12
1174c     A7 FA 61 FC | 	wrlong	result1, fp
11750     0C 4E 85 F1 | 	sub	fp, #12
11754                 | LR__1403
11754                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
11754     08 4E 05 F1 | 	add	fp, #8
11758     A7 14 02 FB | 	rdlong	arg02, fp
1175c     08 4E 85 F1 | 	sub	fp, #8
11760     1E 14 0E F2 | 	cmp	arg02, #30 wz
11764     14 4E 05 A1 |  if_e	add	fp, #20
11768     A7 1E 02 AB |  if_e	rdlong	local01, fp
1176c     14 4E 85 A1 |  if_e	sub	fp, #20
11770     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
11774     1C 00 90 5D |  if_ne	jmp	#LR__1404
11778     A7 12 02 FB | 	rdlong	arg01, fp
1177c     0C 4E 05 F1 | 	add	fp, #12
11780     A7 14 02 FB | 	rdlong	arg02, fp
11784     0C 4E 85 F1 | 	sub	fp, #12
11788     F0 0D B1 FD | 	call	#__system____builtin_powf
1178c     A7 FA 61 FC | 	wrlong	result1, fp
11790     10 00 90 FD | 	jmp	#LR__1405
11794                 | LR__1404
11794     A7 1A 68 FC | 	wrlong	#13, fp
11798     08 4E 05 F1 | 	add	fp, #8
1179c     A7 FE 69 FC | 	wrlong	#255, fp
117a0     08 4E 85 F1 | 	sub	fp, #8
117a4                 | LR__1405
117a4     A7 12 02 F6 | 	mov	arg01, fp
117a8     4C 91 BF FD | 	call	#_push
117ac     A7 F0 03 F6 | 	mov	ptra, fp
117b0     B2 00 A0 FD | 	call	#popregs_
117b4                 | _do_power_ret
117b4     2D 00 64 FD | 	ret
117b8                 | 
117b8                 | ' 
117b8                 | ' 
117b8                 | ' sub do_eq
117b8                 | _do_eq
117b8     05 4A 05 F6 | 	mov	COUNT_, #5
117bc     A8 00 A0 FD | 	call	#pushregs_
117c0     18 F0 07 F1 | 	add	ptra, #24
117c4     98 90 BF FD | 	call	#_pop
117c8     FD 1E 02 F6 | 	mov	local01, result1
117cc     FE 20 02 F6 | 	mov	local02, result2
117d0     FF 22 02 F6 | 	mov	local03, result3
117d4     0C 4E 05 F1 | 	add	fp, #12
117d8     A7 1E 62 FC | 	wrlong	local01, fp
117dc     04 4E 05 F1 | 	add	fp, #4
117e0     A7 20 62 FC | 	wrlong	local02, fp
117e4     04 4E 05 F1 | 	add	fp, #4
117e8     A7 22 62 FC | 	wrlong	local03, fp
117ec     14 4E 85 F1 | 	sub	fp, #20
117f0     6C 90 BF FD | 	call	#_pop
117f4     FF 22 02 F6 | 	mov	local03, result3
117f8     A7 FA 61 FC | 	wrlong	result1, fp
117fc     04 4E 05 F1 | 	add	fp, #4
11800     A7 FC 61 FC | 	wrlong	result2, fp
11804     04 4E 05 F1 | 	add	fp, #4
11808     A7 22 62 FC | 	wrlong	local03, fp
1180c                 | ' t2=pop()
1180c                 | ' t1=pop()
1180c                 | ' 
1180c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
1180c     08 4E 85 F1 | 	sub	fp, #8
11810     1F 22 0E F2 | 	cmp	local03, #31 wz
11814     14 4E 05 A1 |  if_e	add	fp, #20
11818     A7 24 02 AB |  if_e	rdlong	local04, fp
1181c     14 4E 85 A1 |  if_e	sub	fp, #20
11820     12 23 02 A6 |  if_e	mov	local03, local04
11824     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11828     28 00 90 5D |  if_ne	jmp	#LR__1410
1182c     00 1E 06 F6 | 	mov	local01, #0
11830     A7 12 02 FB | 	rdlong	arg01, fp
11834     0C 4E 05 F1 | 	add	fp, #12
11838     A7 14 02 FB | 	rdlong	arg02, fp
1183c     0C 4E 85 F1 | 	sub	fp, #12
11840     FC D2 B0 FD | 	call	#__system___string_cmp
11844     00 FA 0D F2 | 	cmp	result1, #0 wz
11848     00 1E 26 A6 |  if_e	not	local01, #0
1184c     A7 1E 62 FC | 	wrlong	local01, fp
11850     1C 04 90 FD | 	jmp	#LR__1423
11854                 | LR__1410
11854                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
11854     08 4E 05 F1 | 	add	fp, #8
11858     A7 1E 02 FB | 	rdlong	local01, fp
1185c     08 4E 85 F1 | 	sub	fp, #8
11860     1E 1E 0E F2 | 	cmp	local01, #30 wz
11864     14 4E 05 A1 |  if_e	add	fp, #20
11868     A7 24 02 AB |  if_e	rdlong	local04, fp
1186c     14 4E 85 A1 |  if_e	sub	fp, #20
11870     12 23 02 A6 |  if_e	mov	local03, local04
11874     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11878     2C 00 90 5D |  if_ne	jmp	#LR__1411
1187c     00 1E 06 F6 | 	mov	local01, #0
11880     A7 12 02 FB | 	rdlong	arg01, fp
11884     0C 4E 05 F1 | 	add	fp, #12
11888     A7 14 02 FB | 	rdlong	arg02, fp
1188c     0C 4E 85 F1 | 	sub	fp, #12
11890     01 16 06 F6 | 	mov	arg03, #1
11894     34 02 B1 FD | 	call	#__system___float_cmp
11898     00 FA 0D F2 | 	cmp	result1, #0 wz
1189c     00 1E 26 A6 |  if_e	not	local01, #0
118a0     A7 1E 62 FC | 	wrlong	local01, fp
118a4     C8 03 90 FD | 	jmp	#LR__1423
118a8                 | LR__1411
118a8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
118a8     08 4E 05 F1 | 	add	fp, #8
118ac     A7 1E 02 FB | 	rdlong	local01, fp
118b0     08 4E 85 F1 | 	sub	fp, #8
118b4     1E 1E 0E F2 | 	cmp	local01, #30 wz
118b8     14 4E 05 A1 |  if_e	add	fp, #20
118bc     A7 24 02 AB |  if_e	rdlong	local04, fp
118c0     14 4E 85 A1 |  if_e	sub	fp, #20
118c4     12 23 02 A6 |  if_e	mov	local03, local04
118c8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
118cc     48 00 90 5D |  if_ne	jmp	#LR__1412
118d0     00 1E 06 F6 | 	mov	local01, #0
118d4     A7 20 02 FB | 	rdlong	local02, fp
118d8     0C 4E 05 F1 | 	add	fp, #12
118dc     A7 12 02 FB | 	rdlong	arg01, fp
118e0     0C 4E 85 F1 | 	sub	fp, #12
118e4     09 13 52 F6 | 	abs	arg01, arg01 wc
118e8     1F 26 C6 C9 |  if_b	decod	local05, #31
118ec     00 26 06 36 |  if_ae	mov	local05, #0
118f0     A0 F9 B0 FD | 	call	#__system___float_fromuns
118f4     13 FB 61 F5 | 	xor	result1, local05
118f8     FD 14 02 F6 | 	mov	arg02, result1
118fc     10 13 02 F6 | 	mov	arg01, local02
11900     01 16 06 F6 | 	mov	arg03, #1
11904     C4 01 B1 FD | 	call	#__system___float_cmp
11908     00 FA 0D F2 | 	cmp	result1, #0 wz
1190c     00 1E 26 A6 |  if_e	not	local01, #0
11910     A7 1E 62 FC | 	wrlong	local01, fp
11914     58 03 90 FD | 	jmp	#LR__1423
11918                 | LR__1412
11918                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
11918     08 4E 05 F1 | 	add	fp, #8
1191c     A7 1E 02 FB | 	rdlong	local01, fp
11920     08 4E 85 F1 | 	sub	fp, #8
11924     1E 1E 0E F2 | 	cmp	local01, #30 wz
11928     14 4E 05 A1 |  if_e	add	fp, #20
1192c     A7 24 02 AB |  if_e	rdlong	local04, fp
11930     14 4E 85 A1 |  if_e	sub	fp, #20
11934     12 23 02 A6 |  if_e	mov	local03, local04
11938     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1193c     38 00 90 5D |  if_ne	jmp	#LR__1413
11940     00 1E 06 F6 | 	mov	local01, #0
11944     A7 20 02 FB | 	rdlong	local02, fp
11948     0C 4E 05 F1 | 	add	fp, #12
1194c     A7 12 02 FB | 	rdlong	arg01, fp
11950     0C 4E 85 F1 | 	sub	fp, #12
11954     3C F9 B0 FD | 	call	#__system___float_fromuns
11958     FD 14 02 F6 | 	mov	arg02, result1
1195c     10 13 02 F6 | 	mov	arg01, local02
11960     01 16 06 F6 | 	mov	arg03, #1
11964     64 01 B1 FD | 	call	#__system___float_cmp
11968     00 FA 0D F2 | 	cmp	result1, #0 wz
1196c     00 1E 26 A6 |  if_e	not	local01, #0
11970     A7 1E 62 FC | 	wrlong	local01, fp
11974     F8 02 90 FD | 	jmp	#LR__1423
11978                 | LR__1413
11978                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
11978     08 4E 05 F1 | 	add	fp, #8
1197c     A7 1E 02 FB | 	rdlong	local01, fp
11980     08 4E 85 F1 | 	sub	fp, #8
11984     1C 1E 0E F2 | 	cmp	local01, #28 wz
11988     14 4E 05 A1 |  if_e	add	fp, #20
1198c     A7 24 02 AB |  if_e	rdlong	local04, fp
11990     14 4E 85 A1 |  if_e	sub	fp, #20
11994     12 23 02 A6 |  if_e	mov	local03, local04
11998     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1199c     44 00 90 5D |  if_ne	jmp	#LR__1414
119a0     00 1E 06 F6 | 	mov	local01, #0
119a4     A7 12 02 FB | 	rdlong	arg01, fp
119a8     09 13 52 F6 | 	abs	arg01, arg01 wc
119ac     1F 26 C6 C9 |  if_b	decod	local05, #31
119b0     00 26 06 36 |  if_ae	mov	local05, #0
119b4     DC F8 B0 FD | 	call	#__system___float_fromuns
119b8     13 FB 61 F5 | 	xor	result1, local05
119bc     FD 12 02 F6 | 	mov	arg01, result1
119c0     0C 4E 05 F1 | 	add	fp, #12
119c4     A7 14 02 FB | 	rdlong	arg02, fp
119c8     0C 4E 85 F1 | 	sub	fp, #12
119cc     01 16 06 F6 | 	mov	arg03, #1
119d0     F8 00 B1 FD | 	call	#__system___float_cmp
119d4     00 FA 0D F2 | 	cmp	result1, #0 wz
119d8     00 1E 26 A6 |  if_e	not	local01, #0
119dc     A7 1E 62 FC | 	wrlong	local01, fp
119e0     8C 02 90 FD | 	jmp	#LR__1423
119e4                 | LR__1414
119e4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
119e4     08 4E 05 F1 | 	add	fp, #8
119e8     A7 1E 02 FB | 	rdlong	local01, fp
119ec     08 4E 85 F1 | 	sub	fp, #8
119f0     1C 1E 0E F2 | 	cmp	local01, #28 wz
119f4     14 4E 05 A1 |  if_e	add	fp, #20
119f8     A7 24 02 AB |  if_e	rdlong	local04, fp
119fc     14 4E 85 A1 |  if_e	sub	fp, #20
11a00     12 23 02 A6 |  if_e	mov	local03, local04
11a04     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11a08     24 00 90 5D |  if_ne	jmp	#LR__1415
11a0c     00 1E 06 F6 | 	mov	local01, #0
11a10     A7 20 02 FB | 	rdlong	local02, fp
11a14     0C 4E 05 F1 | 	add	fp, #12
11a18     A7 22 02 FB | 	rdlong	local03, fp
11a1c     0C 4E 85 F1 | 	sub	fp, #12
11a20     11 21 0A F2 | 	cmp	local02, local03 wz
11a24     01 1E 66 A6 |  if_e	neg	local01, #1
11a28     A7 1E 62 FC | 	wrlong	local01, fp
11a2c     40 02 90 FD | 	jmp	#LR__1423
11a30                 | LR__1415
11a30                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
11a30     08 4E 05 F1 | 	add	fp, #8
11a34     A7 1E 02 FB | 	rdlong	local01, fp
11a38     08 4E 85 F1 | 	sub	fp, #8
11a3c     1C 1E 0E F2 | 	cmp	local01, #28 wz
11a40     14 4E 05 A1 |  if_e	add	fp, #20
11a44     A7 24 02 AB |  if_e	rdlong	local04, fp
11a48     14 4E 85 A1 |  if_e	sub	fp, #20
11a4c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
11a50     24 00 90 5D |  if_ne	jmp	#LR__1416
11a54     00 1E 06 F6 | 	mov	local01, #0
11a58     A7 20 02 FB | 	rdlong	local02, fp
11a5c     0C 4E 05 F1 | 	add	fp, #12
11a60     A7 22 02 FB | 	rdlong	local03, fp
11a64     0C 4E 85 F1 | 	sub	fp, #12
11a68     11 21 0A F2 | 	cmp	local02, local03 wz
11a6c     01 1E 66 A6 |  if_e	neg	local01, #1
11a70     A7 1E 62 FC | 	wrlong	local01, fp
11a74     F8 01 90 FD | 	jmp	#LR__1423
11a78                 | LR__1416
11a78                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
11a78     08 4E 05 F1 | 	add	fp, #8
11a7c     A7 1E 02 FB | 	rdlong	local01, fp
11a80     08 4E 85 F1 | 	sub	fp, #8
11a84     1D 1E 0E F2 | 	cmp	local01, #29 wz
11a88     14 4E 05 A1 |  if_e	add	fp, #20
11a8c     A7 22 02 AB |  if_e	rdlong	local03, fp
11a90     14 4E 85 A1 |  if_e	sub	fp, #20
11a94     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11a98     34 00 90 5D |  if_ne	jmp	#LR__1417
11a9c     00 1E 06 F6 | 	mov	local01, #0
11aa0     A7 12 02 FB | 	rdlong	arg01, fp
11aa4     EC F7 B0 FD | 	call	#__system___float_fromuns
11aa8     FD 12 02 F6 | 	mov	arg01, result1
11aac     0C 4E 05 F1 | 	add	fp, #12
11ab0     A7 14 02 FB | 	rdlong	arg02, fp
11ab4     0C 4E 85 F1 | 	sub	fp, #12
11ab8     01 16 06 F6 | 	mov	arg03, #1
11abc     0C 00 B1 FD | 	call	#__system___float_cmp
11ac0     00 FA 0D F2 | 	cmp	result1, #0 wz
11ac4     00 1E 26 A6 |  if_e	not	local01, #0
11ac8     A7 1E 62 FC | 	wrlong	local01, fp
11acc     A0 01 90 FD | 	jmp	#LR__1423
11ad0                 | LR__1417
11ad0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
11ad0     08 4E 05 F1 | 	add	fp, #8
11ad4     A7 1E 02 FB | 	rdlong	local01, fp
11ad8     08 4E 85 F1 | 	sub	fp, #8
11adc     1D 1E 0E F2 | 	cmp	local01, #29 wz
11ae0     14 4E 05 A1 |  if_e	add	fp, #20
11ae4     A7 22 02 AB |  if_e	rdlong	local03, fp
11ae8     14 4E 85 A1 |  if_e	sub	fp, #20
11aec     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11af0     24 00 90 5D |  if_ne	jmp	#LR__1418
11af4     00 1E 06 F6 | 	mov	local01, #0
11af8     A7 20 02 FB | 	rdlong	local02, fp
11afc     0C 4E 05 F1 | 	add	fp, #12
11b00     A7 22 02 FB | 	rdlong	local03, fp
11b04     0C 4E 85 F1 | 	sub	fp, #12
11b08     11 21 0A F2 | 	cmp	local02, local03 wz
11b0c     01 1E 66 A6 |  if_e	neg	local01, #1
11b10     A7 1E 62 FC | 	wrlong	local01, fp
11b14     58 01 90 FD | 	jmp	#LR__1423
11b18                 | LR__1418
11b18                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
11b18     08 4E 05 F1 | 	add	fp, #8
11b1c     A7 1E 02 FB | 	rdlong	local01, fp
11b20     08 4E 85 F1 | 	sub	fp, #8
11b24     1D 1E 0E F2 | 	cmp	local01, #29 wz
11b28     14 4E 05 A1 |  if_e	add	fp, #20
11b2c     A7 22 02 AB |  if_e	rdlong	local03, fp
11b30     14 4E 85 A1 |  if_e	sub	fp, #20
11b34     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11b38     24 00 90 5D |  if_ne	jmp	#LR__1419
11b3c     00 1E 06 F6 | 	mov	local01, #0
11b40     A7 20 02 FB | 	rdlong	local02, fp
11b44     0C 4E 05 F1 | 	add	fp, #12
11b48     A7 22 02 FB | 	rdlong	local03, fp
11b4c     0C 4E 85 F1 | 	sub	fp, #12
11b50     11 21 0A F2 | 	cmp	local02, local03 wz
11b54     01 1E 66 A6 |  if_e	neg	local01, #1
11b58     A7 1E 62 FC | 	wrlong	local01, fp
11b5c     10 01 90 FD | 	jmp	#LR__1423
11b60                 | LR__1419
11b60                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
11b60     08 4E 05 F1 | 	add	fp, #8
11b64     A7 1E 02 FB | 	rdlong	local01, fp
11b68     08 4E 85 F1 | 	sub	fp, #8
11b6c     2B 1E 0E F2 | 	cmp	local01, #43 wz
11b70     14 4E 05 A1 |  if_e	add	fp, #20
11b74     A7 22 02 AB |  if_e	rdlong	local03, fp
11b78     14 4E 85 A1 |  if_e	sub	fp, #20
11b7c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11b80     30 00 90 5D |  if_ne	jmp	#LR__1420
11b84     00 1E 06 F6 | 	mov	local01, #0
11b88     A7 12 02 FB | 	rdlong	arg01, fp
11b8c     04 D1 BF FD | 	call	#_convertstring
11b90     FD 12 02 F6 | 	mov	arg01, result1
11b94     0C 4E 05 F1 | 	add	fp, #12
11b98     A7 14 02 FB | 	rdlong	arg02, fp
11b9c     0C 4E 85 F1 | 	sub	fp, #12
11ba0     9C CF B0 FD | 	call	#__system___string_cmp
11ba4     00 FA 0D F2 | 	cmp	result1, #0 wz
11ba8     00 1E 26 A6 |  if_e	not	local01, #0
11bac     A7 1E 62 FC | 	wrlong	local01, fp
11bb0     BC 00 90 FD | 	jmp	#LR__1423
11bb4                 | LR__1420
11bb4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
11bb4     08 4E 05 F1 | 	add	fp, #8
11bb8     A7 1E 02 FB | 	rdlong	local01, fp
11bbc     08 4E 85 F1 | 	sub	fp, #8
11bc0     1F 1E 0E F2 | 	cmp	local01, #31 wz
11bc4     14 4E 05 A1 |  if_e	add	fp, #20
11bc8     A7 22 02 AB |  if_e	rdlong	local03, fp
11bcc     14 4E 85 A1 |  if_e	sub	fp, #20
11bd0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11bd4     34 00 90 5D |  if_ne	jmp	#LR__1421
11bd8     00 1E 06 F6 | 	mov	local01, #0
11bdc     A7 20 02 FB | 	rdlong	local02, fp
11be0     0C 4E 05 F1 | 	add	fp, #12
11be4     A7 12 02 FB | 	rdlong	arg01, fp
11be8     0C 4E 85 F1 | 	sub	fp, #12
11bec     A4 D0 BF FD | 	call	#_convertstring
11bf0     FD 14 02 F6 | 	mov	arg02, result1
11bf4     10 13 02 F6 | 	mov	arg01, local02
11bf8     44 CF B0 FD | 	call	#__system___string_cmp
11bfc     00 FA 0D F2 | 	cmp	result1, #0 wz
11c00     00 1E 26 A6 |  if_e	not	local01, #0
11c04     A7 1E 62 FC | 	wrlong	local01, fp
11c08     64 00 90 FD | 	jmp	#LR__1423
11c0c                 | LR__1421
11c0c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
11c0c     08 4E 05 F1 | 	add	fp, #8
11c10     A7 1E 02 FB | 	rdlong	local01, fp
11c14     08 4E 85 F1 | 	sub	fp, #8
11c18     2B 1E 0E F2 | 	cmp	local01, #43 wz
11c1c     14 4E 05 A1 |  if_e	add	fp, #20
11c20     A7 22 02 AB |  if_e	rdlong	local03, fp
11c24     14 4E 85 A1 |  if_e	sub	fp, #20
11c28     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11c2c     3C 00 90 5D |  if_ne	jmp	#LR__1422
11c30     00 1E 06 F6 | 	mov	local01, #0
11c34     A7 12 02 FB | 	rdlong	arg01, fp
11c38     58 D0 BF FD | 	call	#_convertstring
11c3c     FD 20 02 F6 | 	mov	local02, result1
11c40     0C 4E 05 F1 | 	add	fp, #12
11c44     A7 12 02 FB | 	rdlong	arg01, fp
11c48     0C 4E 85 F1 | 	sub	fp, #12
11c4c     44 D0 BF FD | 	call	#_convertstring
11c50     FD 14 02 F6 | 	mov	arg02, result1
11c54     10 13 02 F6 | 	mov	arg01, local02
11c58     E4 CE B0 FD | 	call	#__system___string_cmp
11c5c     00 FA 0D F2 | 	cmp	result1, #0 wz
11c60     00 1E 26 A6 |  if_e	not	local01, #0
11c64     A7 1E 62 FC | 	wrlong	local01, fp
11c68     04 00 90 FD | 	jmp	#LR__1423
11c6c                 | LR__1422
11c6c     A7 00 68 FC | 	wrlong	#0, fp
11c70                 | LR__1423
11c70     08 4E 05 F1 | 	add	fp, #8
11c74     A7 38 68 FC | 	wrlong	#28, fp
11c78     08 4E 85 F1 | 	sub	fp, #8
11c7c     A7 12 02 F6 | 	mov	arg01, fp
11c80     74 8C BF FD | 	call	#_push
11c84     A7 F0 03 F6 | 	mov	ptra, fp
11c88     B2 00 A0 FD | 	call	#popregs_
11c8c                 | _do_eq_ret
11c8c     2D 00 64 FD | 	ret
11c90                 | 
11c90                 | ' 
11c90                 | ' sub do_gt
11c90                 | _do_gt
11c90     05 4A 05 F6 | 	mov	COUNT_, #5
11c94     A8 00 A0 FD | 	call	#pushregs_
11c98     18 F0 07 F1 | 	add	ptra, #24
11c9c     C0 8B BF FD | 	call	#_pop
11ca0     FD 1E 02 F6 | 	mov	local01, result1
11ca4     FE 20 02 F6 | 	mov	local02, result2
11ca8     FF 22 02 F6 | 	mov	local03, result3
11cac     0C 4E 05 F1 | 	add	fp, #12
11cb0     A7 1E 62 FC | 	wrlong	local01, fp
11cb4     04 4E 05 F1 | 	add	fp, #4
11cb8     A7 20 62 FC | 	wrlong	local02, fp
11cbc     04 4E 05 F1 | 	add	fp, #4
11cc0     A7 22 62 FC | 	wrlong	local03, fp
11cc4     14 4E 85 F1 | 	sub	fp, #20
11cc8     94 8B BF FD | 	call	#_pop
11ccc     FF 22 02 F6 | 	mov	local03, result3
11cd0     A7 FA 61 FC | 	wrlong	result1, fp
11cd4     04 4E 05 F1 | 	add	fp, #4
11cd8     A7 FC 61 FC | 	wrlong	result2, fp
11cdc     04 4E 05 F1 | 	add	fp, #4
11ce0     A7 22 62 FC | 	wrlong	local03, fp
11ce4                 | ' t2=pop()
11ce4                 | ' t1=pop()
11ce4                 | ' 
11ce4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
11ce4     08 4E 85 F1 | 	sub	fp, #8
11ce8     1F 22 0E F2 | 	cmp	local03, #31 wz
11cec     14 4E 05 A1 |  if_e	add	fp, #20
11cf0     A7 24 02 AB |  if_e	rdlong	local04, fp
11cf4     14 4E 85 A1 |  if_e	sub	fp, #20
11cf8     12 23 02 A6 |  if_e	mov	local03, local04
11cfc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11d00     28 00 90 5D |  if_ne	jmp	#LR__1430
11d04     00 1E 06 F6 | 	mov	local01, #0
11d08     A7 12 02 FB | 	rdlong	arg01, fp
11d0c     0C 4E 05 F1 | 	add	fp, #12
11d10     A7 14 02 FB | 	rdlong	arg02, fp
11d14     0C 4E 85 F1 | 	sub	fp, #12
11d18     24 CE B0 FD | 	call	#__system___string_cmp
11d1c     01 FA 55 F2 | 	cmps	result1, #1 wc
11d20     00 1E 26 36 |  if_ae	not	local01, #0
11d24     A7 1E 62 FC | 	wrlong	local01, fp
11d28     1C 04 90 FD | 	jmp	#LR__1443
11d2c                 | LR__1430
11d2c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
11d2c     08 4E 05 F1 | 	add	fp, #8
11d30     A7 1E 02 FB | 	rdlong	local01, fp
11d34     08 4E 85 F1 | 	sub	fp, #8
11d38     1E 1E 0E F2 | 	cmp	local01, #30 wz
11d3c     14 4E 05 A1 |  if_e	add	fp, #20
11d40     A7 24 02 AB |  if_e	rdlong	local04, fp
11d44     14 4E 85 A1 |  if_e	sub	fp, #20
11d48     12 23 02 A6 |  if_e	mov	local03, local04
11d4c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11d50     2C 00 90 5D |  if_ne	jmp	#LR__1431
11d54     00 1E 06 F6 | 	mov	local01, #0
11d58     A7 12 02 FB | 	rdlong	arg01, fp
11d5c     0C 4E 05 F1 | 	add	fp, #12
11d60     A7 14 02 FB | 	rdlong	arg02, fp
11d64     0C 4E 85 F1 | 	sub	fp, #12
11d68     01 16 66 F6 | 	neg	arg03, #1
11d6c     5C FD B0 FD | 	call	#__system___float_cmp
11d70     01 FA 55 F2 | 	cmps	result1, #1 wc
11d74     00 1E 26 36 |  if_ae	not	local01, #0
11d78     A7 1E 62 FC | 	wrlong	local01, fp
11d7c     C8 03 90 FD | 	jmp	#LR__1443
11d80                 | LR__1431
11d80                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
11d80     08 4E 05 F1 | 	add	fp, #8
11d84     A7 1E 02 FB | 	rdlong	local01, fp
11d88     08 4E 85 F1 | 	sub	fp, #8
11d8c     1E 1E 0E F2 | 	cmp	local01, #30 wz
11d90     14 4E 05 A1 |  if_e	add	fp, #20
11d94     A7 24 02 AB |  if_e	rdlong	local04, fp
11d98     14 4E 85 A1 |  if_e	sub	fp, #20
11d9c     12 23 02 A6 |  if_e	mov	local03, local04
11da0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11da4     48 00 90 5D |  if_ne	jmp	#LR__1432
11da8     00 1E 06 F6 | 	mov	local01, #0
11dac     A7 20 02 FB | 	rdlong	local02, fp
11db0     0C 4E 05 F1 | 	add	fp, #12
11db4     A7 12 02 FB | 	rdlong	arg01, fp
11db8     0C 4E 85 F1 | 	sub	fp, #12
11dbc     09 13 52 F6 | 	abs	arg01, arg01 wc
11dc0     1F 26 C6 C9 |  if_b	decod	local05, #31
11dc4     00 26 06 36 |  if_ae	mov	local05, #0
11dc8     C8 F4 B0 FD | 	call	#__system___float_fromuns
11dcc     13 FB 61 F5 | 	xor	result1, local05
11dd0     FD 14 02 F6 | 	mov	arg02, result1
11dd4     10 13 02 F6 | 	mov	arg01, local02
11dd8     01 16 66 F6 | 	neg	arg03, #1
11ddc     EC FC B0 FD | 	call	#__system___float_cmp
11de0     01 FA 55 F2 | 	cmps	result1, #1 wc
11de4     00 1E 26 36 |  if_ae	not	local01, #0
11de8     A7 1E 62 FC | 	wrlong	local01, fp
11dec     58 03 90 FD | 	jmp	#LR__1443
11df0                 | LR__1432
11df0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
11df0     08 4E 05 F1 | 	add	fp, #8
11df4     A7 1E 02 FB | 	rdlong	local01, fp
11df8     08 4E 85 F1 | 	sub	fp, #8
11dfc     1E 1E 0E F2 | 	cmp	local01, #30 wz
11e00     14 4E 05 A1 |  if_e	add	fp, #20
11e04     A7 24 02 AB |  if_e	rdlong	local04, fp
11e08     14 4E 85 A1 |  if_e	sub	fp, #20
11e0c     12 23 02 A6 |  if_e	mov	local03, local04
11e10     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11e14     38 00 90 5D |  if_ne	jmp	#LR__1433
11e18     00 1E 06 F6 | 	mov	local01, #0
11e1c     A7 20 02 FB | 	rdlong	local02, fp
11e20     0C 4E 05 F1 | 	add	fp, #12
11e24     A7 12 02 FB | 	rdlong	arg01, fp
11e28     0C 4E 85 F1 | 	sub	fp, #12
11e2c     64 F4 B0 FD | 	call	#__system___float_fromuns
11e30     FD 14 02 F6 | 	mov	arg02, result1
11e34     10 13 02 F6 | 	mov	arg01, local02
11e38     01 16 66 F6 | 	neg	arg03, #1
11e3c     8C FC B0 FD | 	call	#__system___float_cmp
11e40     01 FA 55 F2 | 	cmps	result1, #1 wc
11e44     00 1E 26 36 |  if_ae	not	local01, #0
11e48     A7 1E 62 FC | 	wrlong	local01, fp
11e4c     F8 02 90 FD | 	jmp	#LR__1443
11e50                 | LR__1433
11e50                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
11e50     08 4E 05 F1 | 	add	fp, #8
11e54     A7 1E 02 FB | 	rdlong	local01, fp
11e58     08 4E 85 F1 | 	sub	fp, #8
11e5c     1C 1E 0E F2 | 	cmp	local01, #28 wz
11e60     14 4E 05 A1 |  if_e	add	fp, #20
11e64     A7 24 02 AB |  if_e	rdlong	local04, fp
11e68     14 4E 85 A1 |  if_e	sub	fp, #20
11e6c     12 23 02 A6 |  if_e	mov	local03, local04
11e70     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11e74     44 00 90 5D |  if_ne	jmp	#LR__1434
11e78     00 1E 06 F6 | 	mov	local01, #0
11e7c     A7 12 02 FB | 	rdlong	arg01, fp
11e80     09 13 52 F6 | 	abs	arg01, arg01 wc
11e84     1F 26 C6 C9 |  if_b	decod	local05, #31
11e88     00 26 06 36 |  if_ae	mov	local05, #0
11e8c     04 F4 B0 FD | 	call	#__system___float_fromuns
11e90     13 FB 61 F5 | 	xor	result1, local05
11e94     FD 12 02 F6 | 	mov	arg01, result1
11e98     0C 4E 05 F1 | 	add	fp, #12
11e9c     A7 14 02 FB | 	rdlong	arg02, fp
11ea0     0C 4E 85 F1 | 	sub	fp, #12
11ea4     01 16 66 F6 | 	neg	arg03, #1
11ea8     20 FC B0 FD | 	call	#__system___float_cmp
11eac     01 FA 55 F2 | 	cmps	result1, #1 wc
11eb0     00 1E 26 36 |  if_ae	not	local01, #0
11eb4     A7 1E 62 FC | 	wrlong	local01, fp
11eb8     8C 02 90 FD | 	jmp	#LR__1443
11ebc                 | LR__1434
11ebc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
11ebc     08 4E 05 F1 | 	add	fp, #8
11ec0     A7 1E 02 FB | 	rdlong	local01, fp
11ec4     08 4E 85 F1 | 	sub	fp, #8
11ec8     1C 1E 0E F2 | 	cmp	local01, #28 wz
11ecc     14 4E 05 A1 |  if_e	add	fp, #20
11ed0     A7 24 02 AB |  if_e	rdlong	local04, fp
11ed4     14 4E 85 A1 |  if_e	sub	fp, #20
11ed8     12 23 02 A6 |  if_e	mov	local03, local04
11edc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11ee0     24 00 90 5D |  if_ne	jmp	#LR__1435
11ee4     00 1E 06 F6 | 	mov	local01, #0
11ee8     A7 20 02 FB | 	rdlong	local02, fp
11eec     0C 4E 05 F1 | 	add	fp, #12
11ef0     A7 22 02 FB | 	rdlong	local03, fp
11ef4     0C 4E 85 F1 | 	sub	fp, #12
11ef8     11 21 5A F2 | 	cmps	local02, local03 wcz
11efc     01 1E 66 16 |  if_a	neg	local01, #1
11f00     A7 1E 62 FC | 	wrlong	local01, fp
11f04     40 02 90 FD | 	jmp	#LR__1443
11f08                 | LR__1435
11f08                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
11f08     08 4E 05 F1 | 	add	fp, #8
11f0c     A7 1E 02 FB | 	rdlong	local01, fp
11f10     08 4E 85 F1 | 	sub	fp, #8
11f14     1C 1E 0E F2 | 	cmp	local01, #28 wz
11f18     14 4E 05 A1 |  if_e	add	fp, #20
11f1c     A7 24 02 AB |  if_e	rdlong	local04, fp
11f20     14 4E 85 A1 |  if_e	sub	fp, #20
11f24     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
11f28     24 00 90 5D |  if_ne	jmp	#LR__1436
11f2c     00 1E 06 F6 | 	mov	local01, #0
11f30     A7 20 02 FB | 	rdlong	local02, fp
11f34     0C 4E 05 F1 | 	add	fp, #12
11f38     A7 22 02 FB | 	rdlong	local03, fp
11f3c     0C 4E 85 F1 | 	sub	fp, #12
11f40     11 21 5A F2 | 	cmps	local02, local03 wcz
11f44     01 1E 66 16 |  if_a	neg	local01, #1
11f48     A7 1E 62 FC | 	wrlong	local01, fp
11f4c     F8 01 90 FD | 	jmp	#LR__1443
11f50                 | LR__1436
11f50                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
11f50     08 4E 05 F1 | 	add	fp, #8
11f54     A7 1E 02 FB | 	rdlong	local01, fp
11f58     08 4E 85 F1 | 	sub	fp, #8
11f5c     1D 1E 0E F2 | 	cmp	local01, #29 wz
11f60     14 4E 05 A1 |  if_e	add	fp, #20
11f64     A7 22 02 AB |  if_e	rdlong	local03, fp
11f68     14 4E 85 A1 |  if_e	sub	fp, #20
11f6c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11f70     34 00 90 5D |  if_ne	jmp	#LR__1437
11f74     00 1E 06 F6 | 	mov	local01, #0
11f78     A7 12 02 FB | 	rdlong	arg01, fp
11f7c     14 F3 B0 FD | 	call	#__system___float_fromuns
11f80     FD 12 02 F6 | 	mov	arg01, result1
11f84     0C 4E 05 F1 | 	add	fp, #12
11f88     A7 14 02 FB | 	rdlong	arg02, fp
11f8c     0C 4E 85 F1 | 	sub	fp, #12
11f90     01 16 66 F6 | 	neg	arg03, #1
11f94     34 FB B0 FD | 	call	#__system___float_cmp
11f98     01 FA 55 F2 | 	cmps	result1, #1 wc
11f9c     00 1E 26 36 |  if_ae	not	local01, #0
11fa0     A7 1E 62 FC | 	wrlong	local01, fp
11fa4     A0 01 90 FD | 	jmp	#LR__1443
11fa8                 | LR__1437
11fa8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
11fa8     08 4E 05 F1 | 	add	fp, #8
11fac     A7 1E 02 FB | 	rdlong	local01, fp
11fb0     08 4E 85 F1 | 	sub	fp, #8
11fb4     1D 1E 0E F2 | 	cmp	local01, #29 wz
11fb8     14 4E 05 A1 |  if_e	add	fp, #20
11fbc     A7 22 02 AB |  if_e	rdlong	local03, fp
11fc0     14 4E 85 A1 |  if_e	sub	fp, #20
11fc4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11fc8     24 00 90 5D |  if_ne	jmp	#LR__1438
11fcc     00 1E 06 F6 | 	mov	local01, #0
11fd0     A7 20 02 FB | 	rdlong	local02, fp
11fd4     0C 4E 05 F1 | 	add	fp, #12
11fd8     A7 22 02 FB | 	rdlong	local03, fp
11fdc     0C 4E 85 F1 | 	sub	fp, #12
11fe0     11 21 5A F2 | 	cmps	local02, local03 wcz
11fe4     01 1E 66 16 |  if_a	neg	local01, #1
11fe8     A7 1E 62 FC | 	wrlong	local01, fp
11fec     58 01 90 FD | 	jmp	#LR__1443
11ff0                 | LR__1438
11ff0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
11ff0     08 4E 05 F1 | 	add	fp, #8
11ff4     A7 1E 02 FB | 	rdlong	local01, fp
11ff8     08 4E 85 F1 | 	sub	fp, #8
11ffc     1D 1E 0E F2 | 	cmp	local01, #29 wz
12000     14 4E 05 A1 |  if_e	add	fp, #20
12004     A7 22 02 AB |  if_e	rdlong	local03, fp
12008     14 4E 85 A1 |  if_e	sub	fp, #20
1200c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12010     24 00 90 5D |  if_ne	jmp	#LR__1439
12014     00 1E 06 F6 | 	mov	local01, #0
12018     A7 20 02 FB | 	rdlong	local02, fp
1201c     0C 4E 05 F1 | 	add	fp, #12
12020     A7 22 02 FB | 	rdlong	local03, fp
12024     0C 4E 85 F1 | 	sub	fp, #12
12028     11 21 1A F2 | 	cmp	local02, local03 wcz
1202c     01 1E 66 16 |  if_a	neg	local01, #1
12030     A7 1E 62 FC | 	wrlong	local01, fp
12034     10 01 90 FD | 	jmp	#LR__1443
12038                 | LR__1439
12038                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
12038     08 4E 05 F1 | 	add	fp, #8
1203c     A7 1E 02 FB | 	rdlong	local01, fp
12040     08 4E 85 F1 | 	sub	fp, #8
12044     2B 1E 0E F2 | 	cmp	local01, #43 wz
12048     14 4E 05 A1 |  if_e	add	fp, #20
1204c     A7 22 02 AB |  if_e	rdlong	local03, fp
12050     14 4E 85 A1 |  if_e	sub	fp, #20
12054     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12058     30 00 90 5D |  if_ne	jmp	#LR__1440
1205c     00 1E 06 F6 | 	mov	local01, #0
12060     A7 12 02 FB | 	rdlong	arg01, fp
12064     2C CC BF FD | 	call	#_convertstring
12068     FD 12 02 F6 | 	mov	arg01, result1
1206c     0C 4E 05 F1 | 	add	fp, #12
12070     A7 14 02 FB | 	rdlong	arg02, fp
12074     0C 4E 85 F1 | 	sub	fp, #12
12078     C4 CA B0 FD | 	call	#__system___string_cmp
1207c     01 FA 55 F2 | 	cmps	result1, #1 wc
12080     00 1E 26 36 |  if_ae	not	local01, #0
12084     A7 1E 62 FC | 	wrlong	local01, fp
12088     BC 00 90 FD | 	jmp	#LR__1443
1208c                 | LR__1440
1208c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
1208c     08 4E 05 F1 | 	add	fp, #8
12090     A7 1E 02 FB | 	rdlong	local01, fp
12094     08 4E 85 F1 | 	sub	fp, #8
12098     1F 1E 0E F2 | 	cmp	local01, #31 wz
1209c     14 4E 05 A1 |  if_e	add	fp, #20
120a0     A7 22 02 AB |  if_e	rdlong	local03, fp
120a4     14 4E 85 A1 |  if_e	sub	fp, #20
120a8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
120ac     34 00 90 5D |  if_ne	jmp	#LR__1441
120b0     00 1E 06 F6 | 	mov	local01, #0
120b4     A7 20 02 FB | 	rdlong	local02, fp
120b8     0C 4E 05 F1 | 	add	fp, #12
120bc     A7 12 02 FB | 	rdlong	arg01, fp
120c0     0C 4E 85 F1 | 	sub	fp, #12
120c4     CC CB BF FD | 	call	#_convertstring
120c8     FD 14 02 F6 | 	mov	arg02, result1
120cc     10 13 02 F6 | 	mov	arg01, local02
120d0     6C CA B0 FD | 	call	#__system___string_cmp
120d4     01 FA 55 F2 | 	cmps	result1, #1 wc
120d8     00 1E 26 36 |  if_ae	not	local01, #0
120dc     A7 1E 62 FC | 	wrlong	local01, fp
120e0     64 00 90 FD | 	jmp	#LR__1443
120e4                 | LR__1441
120e4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
120e4     08 4E 05 F1 | 	add	fp, #8
120e8     A7 1E 02 FB | 	rdlong	local01, fp
120ec     08 4E 85 F1 | 	sub	fp, #8
120f0     2B 1E 0E F2 | 	cmp	local01, #43 wz
120f4     14 4E 05 A1 |  if_e	add	fp, #20
120f8     A7 22 02 AB |  if_e	rdlong	local03, fp
120fc     14 4E 85 A1 |  if_e	sub	fp, #20
12100     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12104     3C 00 90 5D |  if_ne	jmp	#LR__1442
12108     00 1E 06 F6 | 	mov	local01, #0
1210c     A7 12 02 FB | 	rdlong	arg01, fp
12110     80 CB BF FD | 	call	#_convertstring
12114     FD 20 02 F6 | 	mov	local02, result1
12118     0C 4E 05 F1 | 	add	fp, #12
1211c     A7 12 02 FB | 	rdlong	arg01, fp
12120     0C 4E 85 F1 | 	sub	fp, #12
12124     6C CB BF FD | 	call	#_convertstring
12128     FD 14 02 F6 | 	mov	arg02, result1
1212c     10 13 02 F6 | 	mov	arg01, local02
12130     0C CA B0 FD | 	call	#__system___string_cmp
12134     01 FA 55 F2 | 	cmps	result1, #1 wc
12138     00 1E 26 36 |  if_ae	not	local01, #0
1213c     A7 1E 62 FC | 	wrlong	local01, fp
12140     04 00 90 FD | 	jmp	#LR__1443
12144                 | LR__1442
12144     A7 00 68 FC | 	wrlong	#0, fp
12148                 | LR__1443
12148     08 4E 05 F1 | 	add	fp, #8
1214c     A7 38 68 FC | 	wrlong	#28, fp
12150     08 4E 85 F1 | 	sub	fp, #8
12154     A7 12 02 F6 | 	mov	arg01, fp
12158     9C 87 BF FD | 	call	#_push
1215c     A7 F0 03 F6 | 	mov	ptra, fp
12160     B2 00 A0 FD | 	call	#popregs_
12164                 | _do_gt_ret
12164     2D 00 64 FD | 	ret
12168                 | 
12168                 | ' 
12168                 | ' sub do_lt
12168                 | _do_lt
12168     05 4A 05 F6 | 	mov	COUNT_, #5
1216c     A8 00 A0 FD | 	call	#pushregs_
12170     18 F0 07 F1 | 	add	ptra, #24
12174     E8 86 BF FD | 	call	#_pop
12178     FD 1E 02 F6 | 	mov	local01, result1
1217c     FE 20 02 F6 | 	mov	local02, result2
12180     FF 22 02 F6 | 	mov	local03, result3
12184     0C 4E 05 F1 | 	add	fp, #12
12188     A7 1E 62 FC | 	wrlong	local01, fp
1218c     04 4E 05 F1 | 	add	fp, #4
12190     A7 20 62 FC | 	wrlong	local02, fp
12194     04 4E 05 F1 | 	add	fp, #4
12198     A7 22 62 FC | 	wrlong	local03, fp
1219c     14 4E 85 F1 | 	sub	fp, #20
121a0     BC 86 BF FD | 	call	#_pop
121a4     FF 22 02 F6 | 	mov	local03, result3
121a8     A7 FA 61 FC | 	wrlong	result1, fp
121ac     04 4E 05 F1 | 	add	fp, #4
121b0     A7 FC 61 FC | 	wrlong	result2, fp
121b4     04 4E 05 F1 | 	add	fp, #4
121b8     A7 22 62 FC | 	wrlong	local03, fp
121bc                 | ' t2=pop()
121bc                 | ' t1=pop()
121bc                 | ' 
121bc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
121bc     08 4E 85 F1 | 	sub	fp, #8
121c0     1F 22 0E F2 | 	cmp	local03, #31 wz
121c4     14 4E 05 A1 |  if_e	add	fp, #20
121c8     A7 24 02 AB |  if_e	rdlong	local04, fp
121cc     14 4E 85 A1 |  if_e	sub	fp, #20
121d0     12 23 02 A6 |  if_e	mov	local03, local04
121d4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
121d8     28 00 90 5D |  if_ne	jmp	#LR__1450
121dc     00 1E 06 F6 | 	mov	local01, #0
121e0     A7 12 02 FB | 	rdlong	arg01, fp
121e4     0C 4E 05 F1 | 	add	fp, #12
121e8     A7 14 02 FB | 	rdlong	arg02, fp
121ec     0C 4E 85 F1 | 	sub	fp, #12
121f0     4C C9 B0 FD | 	call	#__system___string_cmp
121f4     00 FA 55 F2 | 	cmps	result1, #0 wc
121f8     00 1E 26 C6 |  if_b	not	local01, #0
121fc     A7 1E 62 FC | 	wrlong	local01, fp
12200     0C 04 90 FD | 	jmp	#LR__1463
12204                 | LR__1450
12204                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
12204     08 4E 05 F1 | 	add	fp, #8
12208     A7 1E 02 FB | 	rdlong	local01, fp
1220c     08 4E 85 F1 | 	sub	fp, #8
12210     1E 1E 0E F2 | 	cmp	local01, #30 wz
12214     14 4E 05 A1 |  if_e	add	fp, #20
12218     A7 24 02 AB |  if_e	rdlong	local04, fp
1221c     14 4E 85 A1 |  if_e	sub	fp, #20
12220     12 23 02 A6 |  if_e	mov	local03, local04
12224     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12228     2C 00 90 5D |  if_ne	jmp	#LR__1451
1222c     00 1E 06 F6 | 	mov	local01, #0
12230     A7 12 02 FB | 	rdlong	arg01, fp
12234     0C 4E 05 F1 | 	add	fp, #12
12238     A7 14 02 FB | 	rdlong	arg02, fp
1223c     0C 4E 85 F1 | 	sub	fp, #12
12240     01 16 06 F6 | 	mov	arg03, #1
12244     84 F8 B0 FD | 	call	#__system___float_cmp
12248     00 FA 55 F2 | 	cmps	result1, #0 wc
1224c     00 1E 26 C6 |  if_b	not	local01, #0
12250     A7 1E 62 FC | 	wrlong	local01, fp
12254     B8 03 90 FD | 	jmp	#LR__1463
12258                 | LR__1451
12258                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
12258     08 4E 05 F1 | 	add	fp, #8
1225c     A7 1E 02 FB | 	rdlong	local01, fp
12260     08 4E 85 F1 | 	sub	fp, #8
12264     1E 1E 0E F2 | 	cmp	local01, #30 wz
12268     14 4E 05 A1 |  if_e	add	fp, #20
1226c     A7 24 02 AB |  if_e	rdlong	local04, fp
12270     14 4E 85 A1 |  if_e	sub	fp, #20
12274     12 23 02 A6 |  if_e	mov	local03, local04
12278     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1227c     48 00 90 5D |  if_ne	jmp	#LR__1452
12280     00 1E 06 F6 | 	mov	local01, #0
12284     A7 20 02 FB | 	rdlong	local02, fp
12288     0C 4E 05 F1 | 	add	fp, #12
1228c     A7 12 02 FB | 	rdlong	arg01, fp
12290     0C 4E 85 F1 | 	sub	fp, #12
12294     09 13 52 F6 | 	abs	arg01, arg01 wc
12298     1F 26 C6 C9 |  if_b	decod	local05, #31
1229c     00 26 06 36 |  if_ae	mov	local05, #0
122a0     F0 EF B0 FD | 	call	#__system___float_fromuns
122a4     13 FB 61 F5 | 	xor	result1, local05
122a8     FD 14 02 F6 | 	mov	arg02, result1
122ac     10 13 02 F6 | 	mov	arg01, local02
122b0     01 16 06 F6 | 	mov	arg03, #1
122b4     14 F8 B0 FD | 	call	#__system___float_cmp
122b8     00 FA 55 F2 | 	cmps	result1, #0 wc
122bc     00 1E 26 C6 |  if_b	not	local01, #0
122c0     A7 1E 62 FC | 	wrlong	local01, fp
122c4     48 03 90 FD | 	jmp	#LR__1463
122c8                 | LR__1452
122c8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
122c8     08 4E 05 F1 | 	add	fp, #8
122cc     A7 1E 02 FB | 	rdlong	local01, fp
122d0     08 4E 85 F1 | 	sub	fp, #8
122d4     1E 1E 0E F2 | 	cmp	local01, #30 wz
122d8     14 4E 05 A1 |  if_e	add	fp, #20
122dc     A7 24 02 AB |  if_e	rdlong	local04, fp
122e0     14 4E 85 A1 |  if_e	sub	fp, #20
122e4     12 23 02 A6 |  if_e	mov	local03, local04
122e8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
122ec     38 00 90 5D |  if_ne	jmp	#LR__1453
122f0     00 1E 06 F6 | 	mov	local01, #0
122f4     A7 20 02 FB | 	rdlong	local02, fp
122f8     0C 4E 05 F1 | 	add	fp, #12
122fc     A7 12 02 FB | 	rdlong	arg01, fp
12300     0C 4E 85 F1 | 	sub	fp, #12
12304     8C EF B0 FD | 	call	#__system___float_fromuns
12308     FD 14 02 F6 | 	mov	arg02, result1
1230c     10 13 02 F6 | 	mov	arg01, local02
12310     01 16 06 F6 | 	mov	arg03, #1
12314     B4 F7 B0 FD | 	call	#__system___float_cmp
12318     00 FA 55 F2 | 	cmps	result1, #0 wc
1231c     00 1E 26 C6 |  if_b	not	local01, #0
12320     A7 1E 62 FC | 	wrlong	local01, fp
12324     E8 02 90 FD | 	jmp	#LR__1463
12328                 | LR__1453
12328                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
12328     08 4E 05 F1 | 	add	fp, #8
1232c     A7 1E 02 FB | 	rdlong	local01, fp
12330     08 4E 85 F1 | 	sub	fp, #8
12334     1C 1E 0E F2 | 	cmp	local01, #28 wz
12338     14 4E 05 A1 |  if_e	add	fp, #20
1233c     A7 24 02 AB |  if_e	rdlong	local04, fp
12340     14 4E 85 A1 |  if_e	sub	fp, #20
12344     12 23 02 A6 |  if_e	mov	local03, local04
12348     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1234c     44 00 90 5D |  if_ne	jmp	#LR__1454
12350     00 1E 06 F6 | 	mov	local01, #0
12354     A7 12 02 FB | 	rdlong	arg01, fp
12358     09 13 52 F6 | 	abs	arg01, arg01 wc
1235c     1F 26 C6 C9 |  if_b	decod	local05, #31
12360     00 26 06 36 |  if_ae	mov	local05, #0
12364     2C EF B0 FD | 	call	#__system___float_fromuns
12368     13 FB 61 F5 | 	xor	result1, local05
1236c     FD 12 02 F6 | 	mov	arg01, result1
12370     0C 4E 05 F1 | 	add	fp, #12
12374     A7 14 02 FB | 	rdlong	arg02, fp
12378     0C 4E 85 F1 | 	sub	fp, #12
1237c     01 16 06 F6 | 	mov	arg03, #1
12380     48 F7 B0 FD | 	call	#__system___float_cmp
12384     00 FA 55 F2 | 	cmps	result1, #0 wc
12388     00 1E 26 C6 |  if_b	not	local01, #0
1238c     A7 1E 62 FC | 	wrlong	local01, fp
12390     7C 02 90 FD | 	jmp	#LR__1463
12394                 | LR__1454
12394                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
12394     08 4E 05 F1 | 	add	fp, #8
12398     A7 1E 02 FB | 	rdlong	local01, fp
1239c     08 4E 85 F1 | 	sub	fp, #8
123a0     1C 1E 0E F2 | 	cmp	local01, #28 wz
123a4     14 4E 05 A1 |  if_e	add	fp, #20
123a8     A7 24 02 AB |  if_e	rdlong	local04, fp
123ac     14 4E 85 A1 |  if_e	sub	fp, #20
123b0     12 23 02 A6 |  if_e	mov	local03, local04
123b4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
123b8     20 00 90 5D |  if_ne	jmp	#LR__1455
123bc     A7 20 02 FB | 	rdlong	local02, fp
123c0     0C 4E 05 F1 | 	add	fp, #12
123c4     A7 22 02 FB | 	rdlong	local03, fp
123c8     0C 4E 85 F1 | 	sub	fp, #12
123cc     11 21 52 F2 | 	cmps	local02, local03 wc
123d0     0F 1F A2 F1 | 	subx	local01, local01
123d4     A7 1E 62 FC | 	wrlong	local01, fp
123d8     34 02 90 FD | 	jmp	#LR__1463
123dc                 | LR__1455
123dc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
123dc     08 4E 05 F1 | 	add	fp, #8
123e0     A7 1E 02 FB | 	rdlong	local01, fp
123e4     08 4E 85 F1 | 	sub	fp, #8
123e8     1C 1E 0E F2 | 	cmp	local01, #28 wz
123ec     14 4E 05 A1 |  if_e	add	fp, #20
123f0     A7 24 02 AB |  if_e	rdlong	local04, fp
123f4     14 4E 85 A1 |  if_e	sub	fp, #20
123f8     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
123fc     20 00 90 5D |  if_ne	jmp	#LR__1456
12400     A7 20 02 FB | 	rdlong	local02, fp
12404     0C 4E 05 F1 | 	add	fp, #12
12408     A7 22 02 FB | 	rdlong	local03, fp
1240c     0C 4E 85 F1 | 	sub	fp, #12
12410     11 21 52 F2 | 	cmps	local02, local03 wc
12414     0F 1F A2 F1 | 	subx	local01, local01
12418     A7 1E 62 FC | 	wrlong	local01, fp
1241c     F0 01 90 FD | 	jmp	#LR__1463
12420                 | LR__1456
12420                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
12420     08 4E 05 F1 | 	add	fp, #8
12424     A7 1E 02 FB | 	rdlong	local01, fp
12428     08 4E 85 F1 | 	sub	fp, #8
1242c     1D 1E 0E F2 | 	cmp	local01, #29 wz
12430     14 4E 05 A1 |  if_e	add	fp, #20
12434     A7 22 02 AB |  if_e	rdlong	local03, fp
12438     14 4E 85 A1 |  if_e	sub	fp, #20
1243c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12440     34 00 90 5D |  if_ne	jmp	#LR__1457
12444     00 1E 06 F6 | 	mov	local01, #0
12448     A7 12 02 FB | 	rdlong	arg01, fp
1244c     44 EE B0 FD | 	call	#__system___float_fromuns
12450     FD 12 02 F6 | 	mov	arg01, result1
12454     0C 4E 05 F1 | 	add	fp, #12
12458     A7 14 02 FB | 	rdlong	arg02, fp
1245c     0C 4E 85 F1 | 	sub	fp, #12
12460     01 16 06 F6 | 	mov	arg03, #1
12464     64 F6 B0 FD | 	call	#__system___float_cmp
12468     00 FA 55 F2 | 	cmps	result1, #0 wc
1246c     00 1E 26 C6 |  if_b	not	local01, #0
12470     A7 1E 62 FC | 	wrlong	local01, fp
12474     98 01 90 FD | 	jmp	#LR__1463
12478                 | LR__1457
12478                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
12478     08 4E 05 F1 | 	add	fp, #8
1247c     A7 1E 02 FB | 	rdlong	local01, fp
12480     08 4E 85 F1 | 	sub	fp, #8
12484     1D 1E 0E F2 | 	cmp	local01, #29 wz
12488     14 4E 05 A1 |  if_e	add	fp, #20
1248c     A7 22 02 AB |  if_e	rdlong	local03, fp
12490     14 4E 85 A1 |  if_e	sub	fp, #20
12494     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12498     20 00 90 5D |  if_ne	jmp	#LR__1458
1249c     A7 20 02 FB | 	rdlong	local02, fp
124a0     0C 4E 05 F1 | 	add	fp, #12
124a4     A7 22 02 FB | 	rdlong	local03, fp
124a8     0C 4E 85 F1 | 	sub	fp, #12
124ac     11 21 52 F2 | 	cmps	local02, local03 wc
124b0     0F 1F A2 F1 | 	subx	local01, local01
124b4     A7 1E 62 FC | 	wrlong	local01, fp
124b8     54 01 90 FD | 	jmp	#LR__1463
124bc                 | LR__1458
124bc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
124bc     08 4E 05 F1 | 	add	fp, #8
124c0     A7 1E 02 FB | 	rdlong	local01, fp
124c4     08 4E 85 F1 | 	sub	fp, #8
124c8     1D 1E 0E F2 | 	cmp	local01, #29 wz
124cc     14 4E 05 A1 |  if_e	add	fp, #20
124d0     A7 22 02 AB |  if_e	rdlong	local03, fp
124d4     14 4E 85 A1 |  if_e	sub	fp, #20
124d8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
124dc     20 00 90 5D |  if_ne	jmp	#LR__1459
124e0     A7 20 02 FB | 	rdlong	local02, fp
124e4     0C 4E 05 F1 | 	add	fp, #12
124e8     A7 22 02 FB | 	rdlong	local03, fp
124ec     0C 4E 85 F1 | 	sub	fp, #12
124f0     11 21 12 F2 | 	cmp	local02, local03 wc
124f4     0F 1F A2 F1 | 	subx	local01, local01
124f8     A7 1E 62 FC | 	wrlong	local01, fp
124fc     10 01 90 FD | 	jmp	#LR__1463
12500                 | LR__1459
12500                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
12500     08 4E 05 F1 | 	add	fp, #8
12504     A7 1E 02 FB | 	rdlong	local01, fp
12508     08 4E 85 F1 | 	sub	fp, #8
1250c     2B 1E 0E F2 | 	cmp	local01, #43 wz
12510     14 4E 05 A1 |  if_e	add	fp, #20
12514     A7 22 02 AB |  if_e	rdlong	local03, fp
12518     14 4E 85 A1 |  if_e	sub	fp, #20
1251c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12520     30 00 90 5D |  if_ne	jmp	#LR__1460
12524     00 1E 06 F6 | 	mov	local01, #0
12528     A7 12 02 FB | 	rdlong	arg01, fp
1252c     64 C7 BF FD | 	call	#_convertstring
12530     FD 12 02 F6 | 	mov	arg01, result1
12534     0C 4E 05 F1 | 	add	fp, #12
12538     A7 14 02 FB | 	rdlong	arg02, fp
1253c     0C 4E 85 F1 | 	sub	fp, #12
12540     FC C5 B0 FD | 	call	#__system___string_cmp
12544     00 FA 55 F2 | 	cmps	result1, #0 wc
12548     00 1E 26 C6 |  if_b	not	local01, #0
1254c     A7 1E 62 FC | 	wrlong	local01, fp
12550     BC 00 90 FD | 	jmp	#LR__1463
12554                 | LR__1460
12554                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
12554     08 4E 05 F1 | 	add	fp, #8
12558     A7 1E 02 FB | 	rdlong	local01, fp
1255c     08 4E 85 F1 | 	sub	fp, #8
12560     1F 1E 0E F2 | 	cmp	local01, #31 wz
12564     14 4E 05 A1 |  if_e	add	fp, #20
12568     A7 22 02 AB |  if_e	rdlong	local03, fp
1256c     14 4E 85 A1 |  if_e	sub	fp, #20
12570     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12574     34 00 90 5D |  if_ne	jmp	#LR__1461
12578     00 1E 06 F6 | 	mov	local01, #0
1257c     A7 20 02 FB | 	rdlong	local02, fp
12580     0C 4E 05 F1 | 	add	fp, #12
12584     A7 12 02 FB | 	rdlong	arg01, fp
12588     0C 4E 85 F1 | 	sub	fp, #12
1258c     04 C7 BF FD | 	call	#_convertstring
12590     FD 14 02 F6 | 	mov	arg02, result1
12594     10 13 02 F6 | 	mov	arg01, local02
12598     A4 C5 B0 FD | 	call	#__system___string_cmp
1259c     00 FA 55 F2 | 	cmps	result1, #0 wc
125a0     00 1E 26 C6 |  if_b	not	local01, #0
125a4     A7 1E 62 FC | 	wrlong	local01, fp
125a8     64 00 90 FD | 	jmp	#LR__1463
125ac                 | LR__1461
125ac                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
125ac     08 4E 05 F1 | 	add	fp, #8
125b0     A7 1E 02 FB | 	rdlong	local01, fp
125b4     08 4E 85 F1 | 	sub	fp, #8
125b8     2B 1E 0E F2 | 	cmp	local01, #43 wz
125bc     14 4E 05 A1 |  if_e	add	fp, #20
125c0     A7 22 02 AB |  if_e	rdlong	local03, fp
125c4     14 4E 85 A1 |  if_e	sub	fp, #20
125c8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
125cc     3C 00 90 5D |  if_ne	jmp	#LR__1462
125d0     00 1E 06 F6 | 	mov	local01, #0
125d4     A7 12 02 FB | 	rdlong	arg01, fp
125d8     B8 C6 BF FD | 	call	#_convertstring
125dc     FD 20 02 F6 | 	mov	local02, result1
125e0     0C 4E 05 F1 | 	add	fp, #12
125e4     A7 12 02 FB | 	rdlong	arg01, fp
125e8     0C 4E 85 F1 | 	sub	fp, #12
125ec     A4 C6 BF FD | 	call	#_convertstring
125f0     FD 14 02 F6 | 	mov	arg02, result1
125f4     10 13 02 F6 | 	mov	arg01, local02
125f8     44 C5 B0 FD | 	call	#__system___string_cmp
125fc     00 FA 55 F2 | 	cmps	result1, #0 wc
12600     00 1E 26 C6 |  if_b	not	local01, #0
12604     A7 1E 62 FC | 	wrlong	local01, fp
12608     04 00 90 FD | 	jmp	#LR__1463
1260c                 | LR__1462
1260c     A7 00 68 FC | 	wrlong	#0, fp
12610                 | LR__1463
12610     08 4E 05 F1 | 	add	fp, #8
12614     A7 38 68 FC | 	wrlong	#28, fp
12618     08 4E 85 F1 | 	sub	fp, #8
1261c     A7 12 02 F6 | 	mov	arg01, fp
12620     D4 82 BF FD | 	call	#_push
12624     A7 F0 03 F6 | 	mov	ptra, fp
12628     B2 00 A0 FD | 	call	#popregs_
1262c                 | _do_lt_ret
1262c     2D 00 64 FD | 	ret
12630                 | 
12630                 | ' 
12630                 | ' sub do_ge
12630                 | _do_ge
12630     05 4A 05 F6 | 	mov	COUNT_, #5
12634     A8 00 A0 FD | 	call	#pushregs_
12638     18 F0 07 F1 | 	add	ptra, #24
1263c     20 82 BF FD | 	call	#_pop
12640     FD 1E 02 F6 | 	mov	local01, result1
12644     FE 20 02 F6 | 	mov	local02, result2
12648     FF 22 02 F6 | 	mov	local03, result3
1264c     0C 4E 05 F1 | 	add	fp, #12
12650     A7 1E 62 FC | 	wrlong	local01, fp
12654     04 4E 05 F1 | 	add	fp, #4
12658     A7 20 62 FC | 	wrlong	local02, fp
1265c     04 4E 05 F1 | 	add	fp, #4
12660     A7 22 62 FC | 	wrlong	local03, fp
12664     14 4E 85 F1 | 	sub	fp, #20
12668     F4 81 BF FD | 	call	#_pop
1266c     FF 22 02 F6 | 	mov	local03, result3
12670     A7 FA 61 FC | 	wrlong	result1, fp
12674     04 4E 05 F1 | 	add	fp, #4
12678     A7 FC 61 FC | 	wrlong	result2, fp
1267c     04 4E 05 F1 | 	add	fp, #4
12680     A7 22 62 FC | 	wrlong	local03, fp
12684                 | ' t2=pop()
12684                 | ' t1=pop()
12684                 | ' 
12684                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
12684     08 4E 85 F1 | 	sub	fp, #8
12688     1F 22 0E F2 | 	cmp	local03, #31 wz
1268c     14 4E 05 A1 |  if_e	add	fp, #20
12690     A7 24 02 AB |  if_e	rdlong	local04, fp
12694     14 4E 85 A1 |  if_e	sub	fp, #20
12698     12 23 02 A6 |  if_e	mov	local03, local04
1269c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
126a0     28 00 90 5D |  if_ne	jmp	#LR__1470
126a4     00 1E 06 F6 | 	mov	local01, #0
126a8     A7 12 02 FB | 	rdlong	arg01, fp
126ac     0C 4E 05 F1 | 	add	fp, #12
126b0     A7 14 02 FB | 	rdlong	arg02, fp
126b4     0C 4E 85 F1 | 	sub	fp, #12
126b8     84 C4 B0 FD | 	call	#__system___string_cmp
126bc     00 FA 55 F2 | 	cmps	result1, #0 wc
126c0     00 1E 26 36 |  if_ae	not	local01, #0
126c4     A7 1E 62 FC | 	wrlong	local01, fp
126c8     1C 04 90 FD | 	jmp	#LR__1483
126cc                 | LR__1470
126cc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
126cc     08 4E 05 F1 | 	add	fp, #8
126d0     A7 1E 02 FB | 	rdlong	local01, fp
126d4     08 4E 85 F1 | 	sub	fp, #8
126d8     1E 1E 0E F2 | 	cmp	local01, #30 wz
126dc     14 4E 05 A1 |  if_e	add	fp, #20
126e0     A7 24 02 AB |  if_e	rdlong	local04, fp
126e4     14 4E 85 A1 |  if_e	sub	fp, #20
126e8     12 23 02 A6 |  if_e	mov	local03, local04
126ec     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
126f0     2C 00 90 5D |  if_ne	jmp	#LR__1471
126f4     00 1E 06 F6 | 	mov	local01, #0
126f8     A7 12 02 FB | 	rdlong	arg01, fp
126fc     0C 4E 05 F1 | 	add	fp, #12
12700     A7 14 02 FB | 	rdlong	arg02, fp
12704     0C 4E 85 F1 | 	sub	fp, #12
12708     01 16 66 F6 | 	neg	arg03, #1
1270c     BC F3 B0 FD | 	call	#__system___float_cmp
12710     00 FA 55 F2 | 	cmps	result1, #0 wc
12714     00 1E 26 36 |  if_ae	not	local01, #0
12718     A7 1E 62 FC | 	wrlong	local01, fp
1271c     C8 03 90 FD | 	jmp	#LR__1483
12720                 | LR__1471
12720                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
12720     08 4E 05 F1 | 	add	fp, #8
12724     A7 1E 02 FB | 	rdlong	local01, fp
12728     08 4E 85 F1 | 	sub	fp, #8
1272c     1E 1E 0E F2 | 	cmp	local01, #30 wz
12730     14 4E 05 A1 |  if_e	add	fp, #20
12734     A7 24 02 AB |  if_e	rdlong	local04, fp
12738     14 4E 85 A1 |  if_e	sub	fp, #20
1273c     12 23 02 A6 |  if_e	mov	local03, local04
12740     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12744     48 00 90 5D |  if_ne	jmp	#LR__1472
12748     00 1E 06 F6 | 	mov	local01, #0
1274c     A7 20 02 FB | 	rdlong	local02, fp
12750     0C 4E 05 F1 | 	add	fp, #12
12754     A7 12 02 FB | 	rdlong	arg01, fp
12758     0C 4E 85 F1 | 	sub	fp, #12
1275c     09 13 52 F6 | 	abs	arg01, arg01 wc
12760     1F 26 C6 C9 |  if_b	decod	local05, #31
12764     00 26 06 36 |  if_ae	mov	local05, #0
12768     28 EB B0 FD | 	call	#__system___float_fromuns
1276c     13 FB 61 F5 | 	xor	result1, local05
12770     FD 14 02 F6 | 	mov	arg02, result1
12774     10 13 02 F6 | 	mov	arg01, local02
12778     01 16 66 F6 | 	neg	arg03, #1
1277c     4C F3 B0 FD | 	call	#__system___float_cmp
12780     00 FA 55 F2 | 	cmps	result1, #0 wc
12784     00 1E 26 36 |  if_ae	not	local01, #0
12788     A7 1E 62 FC | 	wrlong	local01, fp
1278c     58 03 90 FD | 	jmp	#LR__1483
12790                 | LR__1472
12790                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
12790     08 4E 05 F1 | 	add	fp, #8
12794     A7 1E 02 FB | 	rdlong	local01, fp
12798     08 4E 85 F1 | 	sub	fp, #8
1279c     1E 1E 0E F2 | 	cmp	local01, #30 wz
127a0     14 4E 05 A1 |  if_e	add	fp, #20
127a4     A7 24 02 AB |  if_e	rdlong	local04, fp
127a8     14 4E 85 A1 |  if_e	sub	fp, #20
127ac     12 23 02 A6 |  if_e	mov	local03, local04
127b0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
127b4     38 00 90 5D |  if_ne	jmp	#LR__1473
127b8     00 1E 06 F6 | 	mov	local01, #0
127bc     A7 20 02 FB | 	rdlong	local02, fp
127c0     0C 4E 05 F1 | 	add	fp, #12
127c4     A7 12 02 FB | 	rdlong	arg01, fp
127c8     0C 4E 85 F1 | 	sub	fp, #12
127cc     C4 EA B0 FD | 	call	#__system___float_fromuns
127d0     FD 14 02 F6 | 	mov	arg02, result1
127d4     10 13 02 F6 | 	mov	arg01, local02
127d8     01 16 66 F6 | 	neg	arg03, #1
127dc     EC F2 B0 FD | 	call	#__system___float_cmp
127e0     00 FA 55 F2 | 	cmps	result1, #0 wc
127e4     00 1E 26 36 |  if_ae	not	local01, #0
127e8     A7 1E 62 FC | 	wrlong	local01, fp
127ec     F8 02 90 FD | 	jmp	#LR__1483
127f0                 | LR__1473
127f0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
127f0     08 4E 05 F1 | 	add	fp, #8
127f4     A7 1E 02 FB | 	rdlong	local01, fp
127f8     08 4E 85 F1 | 	sub	fp, #8
127fc     1C 1E 0E F2 | 	cmp	local01, #28 wz
12800     14 4E 05 A1 |  if_e	add	fp, #20
12804     A7 24 02 AB |  if_e	rdlong	local04, fp
12808     14 4E 85 A1 |  if_e	sub	fp, #20
1280c     12 23 02 A6 |  if_e	mov	local03, local04
12810     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12814     44 00 90 5D |  if_ne	jmp	#LR__1474
12818     00 1E 06 F6 | 	mov	local01, #0
1281c     A7 12 02 FB | 	rdlong	arg01, fp
12820     09 13 52 F6 | 	abs	arg01, arg01 wc
12824     1F 26 C6 C9 |  if_b	decod	local05, #31
12828     00 26 06 36 |  if_ae	mov	local05, #0
1282c     64 EA B0 FD | 	call	#__system___float_fromuns
12830     13 FB 61 F5 | 	xor	result1, local05
12834     FD 12 02 F6 | 	mov	arg01, result1
12838     0C 4E 05 F1 | 	add	fp, #12
1283c     A7 14 02 FB | 	rdlong	arg02, fp
12840     0C 4E 85 F1 | 	sub	fp, #12
12844     01 16 66 F6 | 	neg	arg03, #1
12848     80 F2 B0 FD | 	call	#__system___float_cmp
1284c     00 FA 55 F2 | 	cmps	result1, #0 wc
12850     00 1E 26 36 |  if_ae	not	local01, #0
12854     A7 1E 62 FC | 	wrlong	local01, fp
12858     8C 02 90 FD | 	jmp	#LR__1483
1285c                 | LR__1474
1285c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
1285c     08 4E 05 F1 | 	add	fp, #8
12860     A7 1E 02 FB | 	rdlong	local01, fp
12864     08 4E 85 F1 | 	sub	fp, #8
12868     1C 1E 0E F2 | 	cmp	local01, #28 wz
1286c     14 4E 05 A1 |  if_e	add	fp, #20
12870     A7 24 02 AB |  if_e	rdlong	local04, fp
12874     14 4E 85 A1 |  if_e	sub	fp, #20
12878     12 23 02 A6 |  if_e	mov	local03, local04
1287c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12880     24 00 90 5D |  if_ne	jmp	#LR__1475
12884     00 1E 06 F6 | 	mov	local01, #0
12888     A7 20 02 FB | 	rdlong	local02, fp
1288c     0C 4E 05 F1 | 	add	fp, #12
12890     A7 22 02 FB | 	rdlong	local03, fp
12894     0C 4E 85 F1 | 	sub	fp, #12
12898     11 21 52 F2 | 	cmps	local02, local03 wc
1289c     01 1E 66 36 |  if_ae	neg	local01, #1
128a0     A7 1E 62 FC | 	wrlong	local01, fp
128a4     40 02 90 FD | 	jmp	#LR__1483
128a8                 | LR__1475
128a8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
128a8     08 4E 05 F1 | 	add	fp, #8
128ac     A7 1E 02 FB | 	rdlong	local01, fp
128b0     08 4E 85 F1 | 	sub	fp, #8
128b4     1C 1E 0E F2 | 	cmp	local01, #28 wz
128b8     14 4E 05 A1 |  if_e	add	fp, #20
128bc     A7 24 02 AB |  if_e	rdlong	local04, fp
128c0     14 4E 85 A1 |  if_e	sub	fp, #20
128c4     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
128c8     24 00 90 5D |  if_ne	jmp	#LR__1476
128cc     00 1E 06 F6 | 	mov	local01, #0
128d0     A7 20 02 FB | 	rdlong	local02, fp
128d4     0C 4E 05 F1 | 	add	fp, #12
128d8     A7 22 02 FB | 	rdlong	local03, fp
128dc     0C 4E 85 F1 | 	sub	fp, #12
128e0     11 21 52 F2 | 	cmps	local02, local03 wc
128e4     01 1E 66 36 |  if_ae	neg	local01, #1
128e8     A7 1E 62 FC | 	wrlong	local01, fp
128ec     F8 01 90 FD | 	jmp	#LR__1483
128f0                 | LR__1476
128f0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
128f0     08 4E 05 F1 | 	add	fp, #8
128f4     A7 1E 02 FB | 	rdlong	local01, fp
128f8     08 4E 85 F1 | 	sub	fp, #8
128fc     1D 1E 0E F2 | 	cmp	local01, #29 wz
12900     14 4E 05 A1 |  if_e	add	fp, #20
12904     A7 22 02 AB |  if_e	rdlong	local03, fp
12908     14 4E 85 A1 |  if_e	sub	fp, #20
1290c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12910     34 00 90 5D |  if_ne	jmp	#LR__1477
12914     00 1E 06 F6 | 	mov	local01, #0
12918     A7 12 02 FB | 	rdlong	arg01, fp
1291c     74 E9 B0 FD | 	call	#__system___float_fromuns
12920     FD 12 02 F6 | 	mov	arg01, result1
12924     0C 4E 05 F1 | 	add	fp, #12
12928     A7 14 02 FB | 	rdlong	arg02, fp
1292c     0C 4E 85 F1 | 	sub	fp, #12
12930     01 16 66 F6 | 	neg	arg03, #1
12934     94 F1 B0 FD | 	call	#__system___float_cmp
12938     00 FA 55 F2 | 	cmps	result1, #0 wc
1293c     00 1E 26 36 |  if_ae	not	local01, #0
12940     A7 1E 62 FC | 	wrlong	local01, fp
12944     A0 01 90 FD | 	jmp	#LR__1483
12948                 | LR__1477
12948                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
12948     08 4E 05 F1 | 	add	fp, #8
1294c     A7 1E 02 FB | 	rdlong	local01, fp
12950     08 4E 85 F1 | 	sub	fp, #8
12954     1D 1E 0E F2 | 	cmp	local01, #29 wz
12958     14 4E 05 A1 |  if_e	add	fp, #20
1295c     A7 22 02 AB |  if_e	rdlong	local03, fp
12960     14 4E 85 A1 |  if_e	sub	fp, #20
12964     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12968     24 00 90 5D |  if_ne	jmp	#LR__1478
1296c     00 1E 06 F6 | 	mov	local01, #0
12970     A7 20 02 FB | 	rdlong	local02, fp
12974     0C 4E 05 F1 | 	add	fp, #12
12978     A7 22 02 FB | 	rdlong	local03, fp
1297c     0C 4E 85 F1 | 	sub	fp, #12
12980     11 21 52 F2 | 	cmps	local02, local03 wc
12984     01 1E 66 36 |  if_ae	neg	local01, #1
12988     A7 1E 62 FC | 	wrlong	local01, fp
1298c     58 01 90 FD | 	jmp	#LR__1483
12990                 | LR__1478
12990                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
12990     08 4E 05 F1 | 	add	fp, #8
12994     A7 1E 02 FB | 	rdlong	local01, fp
12998     08 4E 85 F1 | 	sub	fp, #8
1299c     1D 1E 0E F2 | 	cmp	local01, #29 wz
129a0     14 4E 05 A1 |  if_e	add	fp, #20
129a4     A7 22 02 AB |  if_e	rdlong	local03, fp
129a8     14 4E 85 A1 |  if_e	sub	fp, #20
129ac     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
129b0     24 00 90 5D |  if_ne	jmp	#LR__1479
129b4     00 1E 06 F6 | 	mov	local01, #0
129b8     A7 20 02 FB | 	rdlong	local02, fp
129bc     0C 4E 05 F1 | 	add	fp, #12
129c0     A7 22 02 FB | 	rdlong	local03, fp
129c4     0C 4E 85 F1 | 	sub	fp, #12
129c8     11 21 12 F2 | 	cmp	local02, local03 wc
129cc     01 1E 66 36 |  if_ae	neg	local01, #1
129d0     A7 1E 62 FC | 	wrlong	local01, fp
129d4     10 01 90 FD | 	jmp	#LR__1483
129d8                 | LR__1479
129d8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
129d8     08 4E 05 F1 | 	add	fp, #8
129dc     A7 1E 02 FB | 	rdlong	local01, fp
129e0     08 4E 85 F1 | 	sub	fp, #8
129e4     2B 1E 0E F2 | 	cmp	local01, #43 wz
129e8     14 4E 05 A1 |  if_e	add	fp, #20
129ec     A7 22 02 AB |  if_e	rdlong	local03, fp
129f0     14 4E 85 A1 |  if_e	sub	fp, #20
129f4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
129f8     30 00 90 5D |  if_ne	jmp	#LR__1480
129fc     00 1E 06 F6 | 	mov	local01, #0
12a00     A7 12 02 FB | 	rdlong	arg01, fp
12a04     8C C2 BF FD | 	call	#_convertstring
12a08     FD 12 02 F6 | 	mov	arg01, result1
12a0c     0C 4E 05 F1 | 	add	fp, #12
12a10     A7 14 02 FB | 	rdlong	arg02, fp
12a14     0C 4E 85 F1 | 	sub	fp, #12
12a18     24 C1 B0 FD | 	call	#__system___string_cmp
12a1c     00 FA 55 F2 | 	cmps	result1, #0 wc
12a20     00 1E 26 36 |  if_ae	not	local01, #0
12a24     A7 1E 62 FC | 	wrlong	local01, fp
12a28     BC 00 90 FD | 	jmp	#LR__1483
12a2c                 | LR__1480
12a2c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
12a2c     08 4E 05 F1 | 	add	fp, #8
12a30     A7 1E 02 FB | 	rdlong	local01, fp
12a34     08 4E 85 F1 | 	sub	fp, #8
12a38     1F 1E 0E F2 | 	cmp	local01, #31 wz
12a3c     14 4E 05 A1 |  if_e	add	fp, #20
12a40     A7 22 02 AB |  if_e	rdlong	local03, fp
12a44     14 4E 85 A1 |  if_e	sub	fp, #20
12a48     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12a4c     34 00 90 5D |  if_ne	jmp	#LR__1481
12a50     00 1E 06 F6 | 	mov	local01, #0
12a54     A7 20 02 FB | 	rdlong	local02, fp
12a58     0C 4E 05 F1 | 	add	fp, #12
12a5c     A7 12 02 FB | 	rdlong	arg01, fp
12a60     0C 4E 85 F1 | 	sub	fp, #12
12a64     2C C2 BF FD | 	call	#_convertstring
12a68     FD 14 02 F6 | 	mov	arg02, result1
12a6c     10 13 02 F6 | 	mov	arg01, local02
12a70     CC C0 B0 FD | 	call	#__system___string_cmp
12a74     00 FA 55 F2 | 	cmps	result1, #0 wc
12a78     00 1E 26 36 |  if_ae	not	local01, #0
12a7c     A7 1E 62 FC | 	wrlong	local01, fp
12a80     64 00 90 FD | 	jmp	#LR__1483
12a84                 | LR__1481
12a84                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
12a84     08 4E 05 F1 | 	add	fp, #8
12a88     A7 1E 02 FB | 	rdlong	local01, fp
12a8c     08 4E 85 F1 | 	sub	fp, #8
12a90     2B 1E 0E F2 | 	cmp	local01, #43 wz
12a94     14 4E 05 A1 |  if_e	add	fp, #20
12a98     A7 22 02 AB |  if_e	rdlong	local03, fp
12a9c     14 4E 85 A1 |  if_e	sub	fp, #20
12aa0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12aa4     3C 00 90 5D |  if_ne	jmp	#LR__1482
12aa8     00 1E 06 F6 | 	mov	local01, #0
12aac     A7 12 02 FB | 	rdlong	arg01, fp
12ab0     E0 C1 BF FD | 	call	#_convertstring
12ab4     FD 20 02 F6 | 	mov	local02, result1
12ab8     0C 4E 05 F1 | 	add	fp, #12
12abc     A7 12 02 FB | 	rdlong	arg01, fp
12ac0     0C 4E 85 F1 | 	sub	fp, #12
12ac4     CC C1 BF FD | 	call	#_convertstring
12ac8     FD 14 02 F6 | 	mov	arg02, result1
12acc     10 13 02 F6 | 	mov	arg01, local02
12ad0     6C C0 B0 FD | 	call	#__system___string_cmp
12ad4     00 FA 55 F2 | 	cmps	result1, #0 wc
12ad8     00 1E 26 36 |  if_ae	not	local01, #0
12adc     A7 1E 62 FC | 	wrlong	local01, fp
12ae0     04 00 90 FD | 	jmp	#LR__1483
12ae4                 | LR__1482
12ae4     A7 00 68 FC | 	wrlong	#0, fp
12ae8                 | LR__1483
12ae8     08 4E 05 F1 | 	add	fp, #8
12aec     A7 38 68 FC | 	wrlong	#28, fp
12af0     08 4E 85 F1 | 	sub	fp, #8
12af4     A7 12 02 F6 | 	mov	arg01, fp
12af8     FC 7D BF FD | 	call	#_push
12afc     A7 F0 03 F6 | 	mov	ptra, fp
12b00     B2 00 A0 FD | 	call	#popregs_
12b04                 | _do_ge_ret
12b04     2D 00 64 FD | 	ret
12b08                 | 
12b08                 | ' 
12b08                 | ' sub do_le
12b08                 | _do_le
12b08     05 4A 05 F6 | 	mov	COUNT_, #5
12b0c     A8 00 A0 FD | 	call	#pushregs_
12b10     18 F0 07 F1 | 	add	ptra, #24
12b14     48 7D BF FD | 	call	#_pop
12b18     FD 1E 02 F6 | 	mov	local01, result1
12b1c     FE 20 02 F6 | 	mov	local02, result2
12b20     FF 22 02 F6 | 	mov	local03, result3
12b24     0C 4E 05 F1 | 	add	fp, #12
12b28     A7 1E 62 FC | 	wrlong	local01, fp
12b2c     04 4E 05 F1 | 	add	fp, #4
12b30     A7 20 62 FC | 	wrlong	local02, fp
12b34     04 4E 05 F1 | 	add	fp, #4
12b38     A7 22 62 FC | 	wrlong	local03, fp
12b3c     14 4E 85 F1 | 	sub	fp, #20
12b40     1C 7D BF FD | 	call	#_pop
12b44     FF 22 02 F6 | 	mov	local03, result3
12b48     A7 FA 61 FC | 	wrlong	result1, fp
12b4c     04 4E 05 F1 | 	add	fp, #4
12b50     A7 FC 61 FC | 	wrlong	result2, fp
12b54     04 4E 05 F1 | 	add	fp, #4
12b58     A7 22 62 FC | 	wrlong	local03, fp
12b5c                 | ' t2=pop()
12b5c                 | ' t1=pop()
12b5c                 | ' 
12b5c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
12b5c     08 4E 85 F1 | 	sub	fp, #8
12b60     1F 22 0E F2 | 	cmp	local03, #31 wz
12b64     14 4E 05 A1 |  if_e	add	fp, #20
12b68     A7 24 02 AB |  if_e	rdlong	local04, fp
12b6c     14 4E 85 A1 |  if_e	sub	fp, #20
12b70     12 23 02 A6 |  if_e	mov	local03, local04
12b74     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12b78     28 00 90 5D |  if_ne	jmp	#LR__1490
12b7c     00 1E 06 F6 | 	mov	local01, #0
12b80     A7 12 02 FB | 	rdlong	arg01, fp
12b84     0C 4E 05 F1 | 	add	fp, #12
12b88     A7 14 02 FB | 	rdlong	arg02, fp
12b8c     0C 4E 85 F1 | 	sub	fp, #12
12b90     AC BF B0 FD | 	call	#__system___string_cmp
12b94     01 FA 55 F2 | 	cmps	result1, #1 wc
12b98     00 1E 26 C6 |  if_b	not	local01, #0
12b9c     A7 1E 62 FC | 	wrlong	local01, fp
12ba0     1C 04 90 FD | 	jmp	#LR__1503
12ba4                 | LR__1490
12ba4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
12ba4     08 4E 05 F1 | 	add	fp, #8
12ba8     A7 1E 02 FB | 	rdlong	local01, fp
12bac     08 4E 85 F1 | 	sub	fp, #8
12bb0     1E 1E 0E F2 | 	cmp	local01, #30 wz
12bb4     14 4E 05 A1 |  if_e	add	fp, #20
12bb8     A7 24 02 AB |  if_e	rdlong	local04, fp
12bbc     14 4E 85 A1 |  if_e	sub	fp, #20
12bc0     12 23 02 A6 |  if_e	mov	local03, local04
12bc4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12bc8     2C 00 90 5D |  if_ne	jmp	#LR__1491
12bcc     00 1E 06 F6 | 	mov	local01, #0
12bd0     A7 12 02 FB | 	rdlong	arg01, fp
12bd4     0C 4E 05 F1 | 	add	fp, #12
12bd8     A7 14 02 FB | 	rdlong	arg02, fp
12bdc     0C 4E 85 F1 | 	sub	fp, #12
12be0     01 16 06 F6 | 	mov	arg03, #1
12be4     E4 EE B0 FD | 	call	#__system___float_cmp
12be8     01 FA 55 F2 | 	cmps	result1, #1 wc
12bec     00 1E 26 C6 |  if_b	not	local01, #0
12bf0     A7 1E 62 FC | 	wrlong	local01, fp
12bf4     C8 03 90 FD | 	jmp	#LR__1503
12bf8                 | LR__1491
12bf8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
12bf8     08 4E 05 F1 | 	add	fp, #8
12bfc     A7 1E 02 FB | 	rdlong	local01, fp
12c00     08 4E 85 F1 | 	sub	fp, #8
12c04     1E 1E 0E F2 | 	cmp	local01, #30 wz
12c08     14 4E 05 A1 |  if_e	add	fp, #20
12c0c     A7 24 02 AB |  if_e	rdlong	local04, fp
12c10     14 4E 85 A1 |  if_e	sub	fp, #20
12c14     12 23 02 A6 |  if_e	mov	local03, local04
12c18     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12c1c     48 00 90 5D |  if_ne	jmp	#LR__1492
12c20     00 1E 06 F6 | 	mov	local01, #0
12c24     A7 20 02 FB | 	rdlong	local02, fp
12c28     0C 4E 05 F1 | 	add	fp, #12
12c2c     A7 12 02 FB | 	rdlong	arg01, fp
12c30     0C 4E 85 F1 | 	sub	fp, #12
12c34     09 13 52 F6 | 	abs	arg01, arg01 wc
12c38     1F 26 C6 C9 |  if_b	decod	local05, #31
12c3c     00 26 06 36 |  if_ae	mov	local05, #0
12c40     50 E6 B0 FD | 	call	#__system___float_fromuns
12c44     13 FB 61 F5 | 	xor	result1, local05
12c48     FD 14 02 F6 | 	mov	arg02, result1
12c4c     10 13 02 F6 | 	mov	arg01, local02
12c50     01 16 06 F6 | 	mov	arg03, #1
12c54     74 EE B0 FD | 	call	#__system___float_cmp
12c58     01 FA 55 F2 | 	cmps	result1, #1 wc
12c5c     00 1E 26 C6 |  if_b	not	local01, #0
12c60     A7 1E 62 FC | 	wrlong	local01, fp
12c64     58 03 90 FD | 	jmp	#LR__1503
12c68                 | LR__1492
12c68                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
12c68     08 4E 05 F1 | 	add	fp, #8
12c6c     A7 1E 02 FB | 	rdlong	local01, fp
12c70     08 4E 85 F1 | 	sub	fp, #8
12c74     1E 1E 0E F2 | 	cmp	local01, #30 wz
12c78     14 4E 05 A1 |  if_e	add	fp, #20
12c7c     A7 24 02 AB |  if_e	rdlong	local04, fp
12c80     14 4E 85 A1 |  if_e	sub	fp, #20
12c84     12 23 02 A6 |  if_e	mov	local03, local04
12c88     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12c8c     38 00 90 5D |  if_ne	jmp	#LR__1493
12c90     00 1E 06 F6 | 	mov	local01, #0
12c94     A7 20 02 FB | 	rdlong	local02, fp
12c98     0C 4E 05 F1 | 	add	fp, #12
12c9c     A7 12 02 FB | 	rdlong	arg01, fp
12ca0     0C 4E 85 F1 | 	sub	fp, #12
12ca4     EC E5 B0 FD | 	call	#__system___float_fromuns
12ca8     FD 14 02 F6 | 	mov	arg02, result1
12cac     10 13 02 F6 | 	mov	arg01, local02
12cb0     01 16 06 F6 | 	mov	arg03, #1
12cb4     14 EE B0 FD | 	call	#__system___float_cmp
12cb8     01 FA 55 F2 | 	cmps	result1, #1 wc
12cbc     00 1E 26 C6 |  if_b	not	local01, #0
12cc0     A7 1E 62 FC | 	wrlong	local01, fp
12cc4     F8 02 90 FD | 	jmp	#LR__1503
12cc8                 | LR__1493
12cc8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
12cc8     08 4E 05 F1 | 	add	fp, #8
12ccc     A7 1E 02 FB | 	rdlong	local01, fp
12cd0     08 4E 85 F1 | 	sub	fp, #8
12cd4     1C 1E 0E F2 | 	cmp	local01, #28 wz
12cd8     14 4E 05 A1 |  if_e	add	fp, #20
12cdc     A7 24 02 AB |  if_e	rdlong	local04, fp
12ce0     14 4E 85 A1 |  if_e	sub	fp, #20
12ce4     12 23 02 A6 |  if_e	mov	local03, local04
12ce8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12cec     44 00 90 5D |  if_ne	jmp	#LR__1494
12cf0     00 1E 06 F6 | 	mov	local01, #0
12cf4     A7 12 02 FB | 	rdlong	arg01, fp
12cf8     09 13 52 F6 | 	abs	arg01, arg01 wc
12cfc     1F 26 C6 C9 |  if_b	decod	local05, #31
12d00     00 26 06 36 |  if_ae	mov	local05, #0
12d04     8C E5 B0 FD | 	call	#__system___float_fromuns
12d08     13 FB 61 F5 | 	xor	result1, local05
12d0c     FD 12 02 F6 | 	mov	arg01, result1
12d10     0C 4E 05 F1 | 	add	fp, #12
12d14     A7 14 02 FB | 	rdlong	arg02, fp
12d18     0C 4E 85 F1 | 	sub	fp, #12
12d1c     01 16 06 F6 | 	mov	arg03, #1
12d20     A8 ED B0 FD | 	call	#__system___float_cmp
12d24     01 FA 55 F2 | 	cmps	result1, #1 wc
12d28     00 1E 26 C6 |  if_b	not	local01, #0
12d2c     A7 1E 62 FC | 	wrlong	local01, fp
12d30     8C 02 90 FD | 	jmp	#LR__1503
12d34                 | LR__1494
12d34                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
12d34     08 4E 05 F1 | 	add	fp, #8
12d38     A7 1E 02 FB | 	rdlong	local01, fp
12d3c     08 4E 85 F1 | 	sub	fp, #8
12d40     1C 1E 0E F2 | 	cmp	local01, #28 wz
12d44     14 4E 05 A1 |  if_e	add	fp, #20
12d48     A7 24 02 AB |  if_e	rdlong	local04, fp
12d4c     14 4E 85 A1 |  if_e	sub	fp, #20
12d50     12 23 02 A6 |  if_e	mov	local03, local04
12d54     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12d58     24 00 90 5D |  if_ne	jmp	#LR__1495
12d5c     00 1E 06 F6 | 	mov	local01, #0
12d60     A7 20 02 FB | 	rdlong	local02, fp
12d64     0C 4E 05 F1 | 	add	fp, #12
12d68     A7 22 02 FB | 	rdlong	local03, fp
12d6c     0C 4E 85 F1 | 	sub	fp, #12
12d70     11 21 5A F2 | 	cmps	local02, local03 wcz
12d74     01 1E 66 E6 |  if_be	neg	local01, #1
12d78     A7 1E 62 FC | 	wrlong	local01, fp
12d7c     40 02 90 FD | 	jmp	#LR__1503
12d80                 | LR__1495
12d80                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
12d80     08 4E 05 F1 | 	add	fp, #8
12d84     A7 1E 02 FB | 	rdlong	local01, fp
12d88     08 4E 85 F1 | 	sub	fp, #8
12d8c     1C 1E 0E F2 | 	cmp	local01, #28 wz
12d90     14 4E 05 A1 |  if_e	add	fp, #20
12d94     A7 24 02 AB |  if_e	rdlong	local04, fp
12d98     14 4E 85 A1 |  if_e	sub	fp, #20
12d9c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
12da0     24 00 90 5D |  if_ne	jmp	#LR__1496
12da4     00 1E 06 F6 | 	mov	local01, #0
12da8     A7 20 02 FB | 	rdlong	local02, fp
12dac     0C 4E 05 F1 | 	add	fp, #12
12db0     A7 22 02 FB | 	rdlong	local03, fp
12db4     0C 4E 85 F1 | 	sub	fp, #12
12db8     11 21 5A F2 | 	cmps	local02, local03 wcz
12dbc     01 1E 66 E6 |  if_be	neg	local01, #1
12dc0     A7 1E 62 FC | 	wrlong	local01, fp
12dc4     F8 01 90 FD | 	jmp	#LR__1503
12dc8                 | LR__1496
12dc8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
12dc8     08 4E 05 F1 | 	add	fp, #8
12dcc     A7 1E 02 FB | 	rdlong	local01, fp
12dd0     08 4E 85 F1 | 	sub	fp, #8
12dd4     1D 1E 0E F2 | 	cmp	local01, #29 wz
12dd8     14 4E 05 A1 |  if_e	add	fp, #20
12ddc     A7 22 02 AB |  if_e	rdlong	local03, fp
12de0     14 4E 85 A1 |  if_e	sub	fp, #20
12de4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12de8     34 00 90 5D |  if_ne	jmp	#LR__1497
12dec     00 1E 06 F6 | 	mov	local01, #0
12df0     A7 12 02 FB | 	rdlong	arg01, fp
12df4     9C E4 B0 FD | 	call	#__system___float_fromuns
12df8     FD 12 02 F6 | 	mov	arg01, result1
12dfc     0C 4E 05 F1 | 	add	fp, #12
12e00     A7 14 02 FB | 	rdlong	arg02, fp
12e04     0C 4E 85 F1 | 	sub	fp, #12
12e08     01 16 06 F6 | 	mov	arg03, #1
12e0c     BC EC B0 FD | 	call	#__system___float_cmp
12e10     01 FA 55 F2 | 	cmps	result1, #1 wc
12e14     00 1E 26 C6 |  if_b	not	local01, #0
12e18     A7 1E 62 FC | 	wrlong	local01, fp
12e1c     A0 01 90 FD | 	jmp	#LR__1503
12e20                 | LR__1497
12e20                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
12e20     08 4E 05 F1 | 	add	fp, #8
12e24     A7 1E 02 FB | 	rdlong	local01, fp
12e28     08 4E 85 F1 | 	sub	fp, #8
12e2c     1D 1E 0E F2 | 	cmp	local01, #29 wz
12e30     14 4E 05 A1 |  if_e	add	fp, #20
12e34     A7 22 02 AB |  if_e	rdlong	local03, fp
12e38     14 4E 85 A1 |  if_e	sub	fp, #20
12e3c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12e40     24 00 90 5D |  if_ne	jmp	#LR__1498
12e44     00 1E 06 F6 | 	mov	local01, #0
12e48     A7 20 02 FB | 	rdlong	local02, fp
12e4c     0C 4E 05 F1 | 	add	fp, #12
12e50     A7 22 02 FB | 	rdlong	local03, fp
12e54     0C 4E 85 F1 | 	sub	fp, #12
12e58     11 21 5A F2 | 	cmps	local02, local03 wcz
12e5c     01 1E 66 E6 |  if_be	neg	local01, #1
12e60     A7 1E 62 FC | 	wrlong	local01, fp
12e64     58 01 90 FD | 	jmp	#LR__1503
12e68                 | LR__1498
12e68                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
12e68     08 4E 05 F1 | 	add	fp, #8
12e6c     A7 1E 02 FB | 	rdlong	local01, fp
12e70     08 4E 85 F1 | 	sub	fp, #8
12e74     1D 1E 0E F2 | 	cmp	local01, #29 wz
12e78     14 4E 05 A1 |  if_e	add	fp, #20
12e7c     A7 22 02 AB |  if_e	rdlong	local03, fp
12e80     14 4E 85 A1 |  if_e	sub	fp, #20
12e84     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12e88     24 00 90 5D |  if_ne	jmp	#LR__1499
12e8c     00 1E 06 F6 | 	mov	local01, #0
12e90     A7 20 02 FB | 	rdlong	local02, fp
12e94     0C 4E 05 F1 | 	add	fp, #12
12e98     A7 22 02 FB | 	rdlong	local03, fp
12e9c     0C 4E 85 F1 | 	sub	fp, #12
12ea0     11 21 1A F2 | 	cmp	local02, local03 wcz
12ea4     01 1E 66 E6 |  if_be	neg	local01, #1
12ea8     A7 1E 62 FC | 	wrlong	local01, fp
12eac     10 01 90 FD | 	jmp	#LR__1503
12eb0                 | LR__1499
12eb0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
12eb0     08 4E 05 F1 | 	add	fp, #8
12eb4     A7 1E 02 FB | 	rdlong	local01, fp
12eb8     08 4E 85 F1 | 	sub	fp, #8
12ebc     2B 1E 0E F2 | 	cmp	local01, #43 wz
12ec0     14 4E 05 A1 |  if_e	add	fp, #20
12ec4     A7 22 02 AB |  if_e	rdlong	local03, fp
12ec8     14 4E 85 A1 |  if_e	sub	fp, #20
12ecc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12ed0     30 00 90 5D |  if_ne	jmp	#LR__1500
12ed4     00 1E 06 F6 | 	mov	local01, #0
12ed8     A7 12 02 FB | 	rdlong	arg01, fp
12edc     B4 BD BF FD | 	call	#_convertstring
12ee0     FD 12 02 F6 | 	mov	arg01, result1
12ee4     0C 4E 05 F1 | 	add	fp, #12
12ee8     A7 14 02 FB | 	rdlong	arg02, fp
12eec     0C 4E 85 F1 | 	sub	fp, #12
12ef0     4C BC B0 FD | 	call	#__system___string_cmp
12ef4     01 FA 55 F2 | 	cmps	result1, #1 wc
12ef8     00 1E 26 C6 |  if_b	not	local01, #0
12efc     A7 1E 62 FC | 	wrlong	local01, fp
12f00     BC 00 90 FD | 	jmp	#LR__1503
12f04                 | LR__1500
12f04                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
12f04     08 4E 05 F1 | 	add	fp, #8
12f08     A7 1E 02 FB | 	rdlong	local01, fp
12f0c     08 4E 85 F1 | 	sub	fp, #8
12f10     1F 1E 0E F2 | 	cmp	local01, #31 wz
12f14     14 4E 05 A1 |  if_e	add	fp, #20
12f18     A7 22 02 AB |  if_e	rdlong	local03, fp
12f1c     14 4E 85 A1 |  if_e	sub	fp, #20
12f20     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12f24     34 00 90 5D |  if_ne	jmp	#LR__1501
12f28     00 1E 06 F6 | 	mov	local01, #0
12f2c     A7 20 02 FB | 	rdlong	local02, fp
12f30     0C 4E 05 F1 | 	add	fp, #12
12f34     A7 12 02 FB | 	rdlong	arg01, fp
12f38     0C 4E 85 F1 | 	sub	fp, #12
12f3c     54 BD BF FD | 	call	#_convertstring
12f40     FD 14 02 F6 | 	mov	arg02, result1
12f44     10 13 02 F6 | 	mov	arg01, local02
12f48     F4 BB B0 FD | 	call	#__system___string_cmp
12f4c     01 FA 55 F2 | 	cmps	result1, #1 wc
12f50     00 1E 26 C6 |  if_b	not	local01, #0
12f54     A7 1E 62 FC | 	wrlong	local01, fp
12f58     64 00 90 FD | 	jmp	#LR__1503
12f5c                 | LR__1501
12f5c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
12f5c     08 4E 05 F1 | 	add	fp, #8
12f60     A7 1E 02 FB | 	rdlong	local01, fp
12f64     08 4E 85 F1 | 	sub	fp, #8
12f68     2B 1E 0E F2 | 	cmp	local01, #43 wz
12f6c     14 4E 05 A1 |  if_e	add	fp, #20
12f70     A7 22 02 AB |  if_e	rdlong	local03, fp
12f74     14 4E 85 A1 |  if_e	sub	fp, #20
12f78     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12f7c     3C 00 90 5D |  if_ne	jmp	#LR__1502
12f80     00 1E 06 F6 | 	mov	local01, #0
12f84     A7 12 02 FB | 	rdlong	arg01, fp
12f88     08 BD BF FD | 	call	#_convertstring
12f8c     FD 20 02 F6 | 	mov	local02, result1
12f90     0C 4E 05 F1 | 	add	fp, #12
12f94     A7 12 02 FB | 	rdlong	arg01, fp
12f98     0C 4E 85 F1 | 	sub	fp, #12
12f9c     F4 BC BF FD | 	call	#_convertstring
12fa0     FD 14 02 F6 | 	mov	arg02, result1
12fa4     10 13 02 F6 | 	mov	arg01, local02
12fa8     94 BB B0 FD | 	call	#__system___string_cmp
12fac     01 FA 55 F2 | 	cmps	result1, #1 wc
12fb0     00 1E 26 C6 |  if_b	not	local01, #0
12fb4     A7 1E 62 FC | 	wrlong	local01, fp
12fb8     04 00 90 FD | 	jmp	#LR__1503
12fbc                 | LR__1502
12fbc     A7 00 68 FC | 	wrlong	#0, fp
12fc0                 | LR__1503
12fc0     08 4E 05 F1 | 	add	fp, #8
12fc4     A7 38 68 FC | 	wrlong	#28, fp
12fc8     08 4E 85 F1 | 	sub	fp, #8
12fcc     A7 12 02 F6 | 	mov	arg01, fp
12fd0     24 79 BF FD | 	call	#_push
12fd4     A7 F0 03 F6 | 	mov	ptra, fp
12fd8     B2 00 A0 FD | 	call	#popregs_
12fdc                 | _do_le_ret
12fdc     2D 00 64 FD | 	ret
12fe0                 | 
12fe0                 | ' 
12fe0                 | ' 
12fe0                 | ' sub do_ne
12fe0                 | _do_ne
12fe0     05 4A 05 F6 | 	mov	COUNT_, #5
12fe4     A8 00 A0 FD | 	call	#pushregs_
12fe8     18 F0 07 F1 | 	add	ptra, #24
12fec     70 78 BF FD | 	call	#_pop
12ff0     FD 1E 02 F6 | 	mov	local01, result1
12ff4     FE 20 02 F6 | 	mov	local02, result2
12ff8     FF 22 02 F6 | 	mov	local03, result3
12ffc     0C 4E 05 F1 | 	add	fp, #12
13000     A7 1E 62 FC | 	wrlong	local01, fp
13004     04 4E 05 F1 | 	add	fp, #4
13008     A7 20 62 FC | 	wrlong	local02, fp
1300c     04 4E 05 F1 | 	add	fp, #4
13010     A7 22 62 FC | 	wrlong	local03, fp
13014     14 4E 85 F1 | 	sub	fp, #20
13018     44 78 BF FD | 	call	#_pop
1301c     FF 22 02 F6 | 	mov	local03, result3
13020     A7 FA 61 FC | 	wrlong	result1, fp
13024     04 4E 05 F1 | 	add	fp, #4
13028     A7 FC 61 FC | 	wrlong	result2, fp
1302c     04 4E 05 F1 | 	add	fp, #4
13030     A7 22 62 FC | 	wrlong	local03, fp
13034                 | ' t2=pop()
13034                 | ' t1=pop()
13034                 | ' 
13034                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
13034     08 4E 85 F1 | 	sub	fp, #8
13038     1F 22 0E F2 | 	cmp	local03, #31 wz
1303c     14 4E 05 A1 |  if_e	add	fp, #20
13040     A7 24 02 AB |  if_e	rdlong	local04, fp
13044     14 4E 85 A1 |  if_e	sub	fp, #20
13048     12 23 02 A6 |  if_e	mov	local03, local04
1304c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
13050     28 00 90 5D |  if_ne	jmp	#LR__1510
13054     00 1E 06 F6 | 	mov	local01, #0
13058     A7 12 02 FB | 	rdlong	arg01, fp
1305c     0C 4E 05 F1 | 	add	fp, #12
13060     A7 14 02 FB | 	rdlong	arg02, fp
13064     0C 4E 85 F1 | 	sub	fp, #12
13068     D4 BA B0 FD | 	call	#__system___string_cmp
1306c     00 FA 0D F2 | 	cmp	result1, #0 wz
13070     00 1E 26 56 |  if_ne	not	local01, #0
13074     A7 1E 62 FC | 	wrlong	local01, fp
13078     1C 04 90 FD | 	jmp	#LR__1523
1307c                 | LR__1510
1307c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
1307c     08 4E 05 F1 | 	add	fp, #8
13080     A7 1E 02 FB | 	rdlong	local01, fp
13084     08 4E 85 F1 | 	sub	fp, #8
13088     1E 1E 0E F2 | 	cmp	local01, #30 wz
1308c     14 4E 05 A1 |  if_e	add	fp, #20
13090     A7 24 02 AB |  if_e	rdlong	local04, fp
13094     14 4E 85 A1 |  if_e	sub	fp, #20
13098     12 23 02 A6 |  if_e	mov	local03, local04
1309c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
130a0     2C 00 90 5D |  if_ne	jmp	#LR__1511
130a4     00 1E 06 F6 | 	mov	local01, #0
130a8     A7 12 02 FB | 	rdlong	arg01, fp
130ac     0C 4E 05 F1 | 	add	fp, #12
130b0     A7 14 02 FB | 	rdlong	arg02, fp
130b4     0C 4E 85 F1 | 	sub	fp, #12
130b8     01 16 06 F6 | 	mov	arg03, #1
130bc     0C EA B0 FD | 	call	#__system___float_cmp
130c0     00 FA 0D F2 | 	cmp	result1, #0 wz
130c4     00 1E 26 56 |  if_ne	not	local01, #0
130c8     A7 1E 62 FC | 	wrlong	local01, fp
130cc     C8 03 90 FD | 	jmp	#LR__1523
130d0                 | LR__1511
130d0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
130d0     08 4E 05 F1 | 	add	fp, #8
130d4     A7 1E 02 FB | 	rdlong	local01, fp
130d8     08 4E 85 F1 | 	sub	fp, #8
130dc     1E 1E 0E F2 | 	cmp	local01, #30 wz
130e0     14 4E 05 A1 |  if_e	add	fp, #20
130e4     A7 24 02 AB |  if_e	rdlong	local04, fp
130e8     14 4E 85 A1 |  if_e	sub	fp, #20
130ec     12 23 02 A6 |  if_e	mov	local03, local04
130f0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
130f4     48 00 90 5D |  if_ne	jmp	#LR__1512
130f8     00 1E 06 F6 | 	mov	local01, #0
130fc     A7 20 02 FB | 	rdlong	local02, fp
13100     0C 4E 05 F1 | 	add	fp, #12
13104     A7 12 02 FB | 	rdlong	arg01, fp
13108     0C 4E 85 F1 | 	sub	fp, #12
1310c     09 13 52 F6 | 	abs	arg01, arg01 wc
13110     1F 26 C6 C9 |  if_b	decod	local05, #31
13114     00 26 06 36 |  if_ae	mov	local05, #0
13118     78 E1 B0 FD | 	call	#__system___float_fromuns
1311c     13 FB 61 F5 | 	xor	result1, local05
13120     FD 14 02 F6 | 	mov	arg02, result1
13124     10 13 02 F6 | 	mov	arg01, local02
13128     01 16 06 F6 | 	mov	arg03, #1
1312c     9C E9 B0 FD | 	call	#__system___float_cmp
13130     00 FA 0D F2 | 	cmp	result1, #0 wz
13134     00 1E 26 56 |  if_ne	not	local01, #0
13138     A7 1E 62 FC | 	wrlong	local01, fp
1313c     58 03 90 FD | 	jmp	#LR__1523
13140                 | LR__1512
13140                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
13140     08 4E 05 F1 | 	add	fp, #8
13144     A7 1E 02 FB | 	rdlong	local01, fp
13148     08 4E 85 F1 | 	sub	fp, #8
1314c     1E 1E 0E F2 | 	cmp	local01, #30 wz
13150     14 4E 05 A1 |  if_e	add	fp, #20
13154     A7 24 02 AB |  if_e	rdlong	local04, fp
13158     14 4E 85 A1 |  if_e	sub	fp, #20
1315c     12 23 02 A6 |  if_e	mov	local03, local04
13160     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
13164     38 00 90 5D |  if_ne	jmp	#LR__1513
13168     00 1E 06 F6 | 	mov	local01, #0
1316c     A7 20 02 FB | 	rdlong	local02, fp
13170     0C 4E 05 F1 | 	add	fp, #12
13174     A7 12 02 FB | 	rdlong	arg01, fp
13178     0C 4E 85 F1 | 	sub	fp, #12
1317c     14 E1 B0 FD | 	call	#__system___float_fromuns
13180     FD 14 02 F6 | 	mov	arg02, result1
13184     10 13 02 F6 | 	mov	arg01, local02
13188     01 16 06 F6 | 	mov	arg03, #1
1318c     3C E9 B0 FD | 	call	#__system___float_cmp
13190     00 FA 0D F2 | 	cmp	result1, #0 wz
13194     00 1E 26 56 |  if_ne	not	local01, #0
13198     A7 1E 62 FC | 	wrlong	local01, fp
1319c     F8 02 90 FD | 	jmp	#LR__1523
131a0                 | LR__1513
131a0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
131a0     08 4E 05 F1 | 	add	fp, #8
131a4     A7 1E 02 FB | 	rdlong	local01, fp
131a8     08 4E 85 F1 | 	sub	fp, #8
131ac     1C 1E 0E F2 | 	cmp	local01, #28 wz
131b0     14 4E 05 A1 |  if_e	add	fp, #20
131b4     A7 24 02 AB |  if_e	rdlong	local04, fp
131b8     14 4E 85 A1 |  if_e	sub	fp, #20
131bc     12 23 02 A6 |  if_e	mov	local03, local04
131c0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
131c4     44 00 90 5D |  if_ne	jmp	#LR__1514
131c8     00 1E 06 F6 | 	mov	local01, #0
131cc     A7 12 02 FB | 	rdlong	arg01, fp
131d0     09 13 52 F6 | 	abs	arg01, arg01 wc
131d4     1F 26 C6 C9 |  if_b	decod	local05, #31
131d8     00 26 06 36 |  if_ae	mov	local05, #0
131dc     B4 E0 B0 FD | 	call	#__system___float_fromuns
131e0     13 FB 61 F5 | 	xor	result1, local05
131e4     FD 12 02 F6 | 	mov	arg01, result1
131e8     0C 4E 05 F1 | 	add	fp, #12
131ec     A7 14 02 FB | 	rdlong	arg02, fp
131f0     0C 4E 85 F1 | 	sub	fp, #12
131f4     01 16 06 F6 | 	mov	arg03, #1
131f8     D0 E8 B0 FD | 	call	#__system___float_cmp
131fc     00 FA 0D F2 | 	cmp	result1, #0 wz
13200     00 1E 26 56 |  if_ne	not	local01, #0
13204     A7 1E 62 FC | 	wrlong	local01, fp
13208     8C 02 90 FD | 	jmp	#LR__1523
1320c                 | LR__1514
1320c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
1320c     08 4E 05 F1 | 	add	fp, #8
13210     A7 1E 02 FB | 	rdlong	local01, fp
13214     08 4E 85 F1 | 	sub	fp, #8
13218     1C 1E 0E F2 | 	cmp	local01, #28 wz
1321c     14 4E 05 A1 |  if_e	add	fp, #20
13220     A7 24 02 AB |  if_e	rdlong	local04, fp
13224     14 4E 85 A1 |  if_e	sub	fp, #20
13228     12 23 02 A6 |  if_e	mov	local03, local04
1322c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
13230     24 00 90 5D |  if_ne	jmp	#LR__1515
13234     00 1E 06 F6 | 	mov	local01, #0
13238     A7 20 02 FB | 	rdlong	local02, fp
1323c     0C 4E 05 F1 | 	add	fp, #12
13240     A7 22 02 FB | 	rdlong	local03, fp
13244     0C 4E 85 F1 | 	sub	fp, #12
13248     11 21 0A F2 | 	cmp	local02, local03 wz
1324c     01 1E 66 56 |  if_ne	neg	local01, #1
13250     A7 1E 62 FC | 	wrlong	local01, fp
13254     40 02 90 FD | 	jmp	#LR__1523
13258                 | LR__1515
13258                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
13258     08 4E 05 F1 | 	add	fp, #8
1325c     A7 1E 02 FB | 	rdlong	local01, fp
13260     08 4E 85 F1 | 	sub	fp, #8
13264     1C 1E 0E F2 | 	cmp	local01, #28 wz
13268     14 4E 05 A1 |  if_e	add	fp, #20
1326c     A7 24 02 AB |  if_e	rdlong	local04, fp
13270     14 4E 85 A1 |  if_e	sub	fp, #20
13274     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
13278     24 00 90 5D |  if_ne	jmp	#LR__1516
1327c     00 1E 06 F6 | 	mov	local01, #0
13280     A7 20 02 FB | 	rdlong	local02, fp
13284     0C 4E 05 F1 | 	add	fp, #12
13288     A7 22 02 FB | 	rdlong	local03, fp
1328c     0C 4E 85 F1 | 	sub	fp, #12
13290     11 21 0A F2 | 	cmp	local02, local03 wz
13294     01 1E 66 56 |  if_ne	neg	local01, #1
13298     A7 1E 62 FC | 	wrlong	local01, fp
1329c     F8 01 90 FD | 	jmp	#LR__1523
132a0                 | LR__1516
132a0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
132a0     08 4E 05 F1 | 	add	fp, #8
132a4     A7 1E 02 FB | 	rdlong	local01, fp
132a8     08 4E 85 F1 | 	sub	fp, #8
132ac     1D 1E 0E F2 | 	cmp	local01, #29 wz
132b0     14 4E 05 A1 |  if_e	add	fp, #20
132b4     A7 22 02 AB |  if_e	rdlong	local03, fp
132b8     14 4E 85 A1 |  if_e	sub	fp, #20
132bc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
132c0     34 00 90 5D |  if_ne	jmp	#LR__1517
132c4     00 1E 06 F6 | 	mov	local01, #0
132c8     A7 12 02 FB | 	rdlong	arg01, fp
132cc     C4 DF B0 FD | 	call	#__system___float_fromuns
132d0     FD 12 02 F6 | 	mov	arg01, result1
132d4     0C 4E 05 F1 | 	add	fp, #12
132d8     A7 14 02 FB | 	rdlong	arg02, fp
132dc     0C 4E 85 F1 | 	sub	fp, #12
132e0     01 16 06 F6 | 	mov	arg03, #1
132e4     E4 E7 B0 FD | 	call	#__system___float_cmp
132e8     00 FA 0D F2 | 	cmp	result1, #0 wz
132ec     00 1E 26 56 |  if_ne	not	local01, #0
132f0     A7 1E 62 FC | 	wrlong	local01, fp
132f4     A0 01 90 FD | 	jmp	#LR__1523
132f8                 | LR__1517
132f8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
132f8     08 4E 05 F1 | 	add	fp, #8
132fc     A7 1E 02 FB | 	rdlong	local01, fp
13300     08 4E 85 F1 | 	sub	fp, #8
13304     1D 1E 0E F2 | 	cmp	local01, #29 wz
13308     14 4E 05 A1 |  if_e	add	fp, #20
1330c     A7 22 02 AB |  if_e	rdlong	local03, fp
13310     14 4E 85 A1 |  if_e	sub	fp, #20
13314     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
13318     24 00 90 5D |  if_ne	jmp	#LR__1518
1331c     00 1E 06 F6 | 	mov	local01, #0
13320     A7 20 02 FB | 	rdlong	local02, fp
13324     0C 4E 05 F1 | 	add	fp, #12
13328     A7 22 02 FB | 	rdlong	local03, fp
1332c     0C 4E 85 F1 | 	sub	fp, #12
13330     11 21 0A F2 | 	cmp	local02, local03 wz
13334     01 1E 66 56 |  if_ne	neg	local01, #1
13338     A7 1E 62 FC | 	wrlong	local01, fp
1333c     58 01 90 FD | 	jmp	#LR__1523
13340                 | LR__1518
13340                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
13340     08 4E 05 F1 | 	add	fp, #8
13344     A7 1E 02 FB | 	rdlong	local01, fp
13348     08 4E 85 F1 | 	sub	fp, #8
1334c     1D 1E 0E F2 | 	cmp	local01, #29 wz
13350     14 4E 05 A1 |  if_e	add	fp, #20
13354     A7 22 02 AB |  if_e	rdlong	local03, fp
13358     14 4E 85 A1 |  if_e	sub	fp, #20
1335c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
13360     24 00 90 5D |  if_ne	jmp	#LR__1519
13364     00 1E 06 F6 | 	mov	local01, #0
13368     A7 20 02 FB | 	rdlong	local02, fp
1336c     0C 4E 05 F1 | 	add	fp, #12
13370     A7 22 02 FB | 	rdlong	local03, fp
13374     0C 4E 85 F1 | 	sub	fp, #12
13378     11 21 0A F2 | 	cmp	local02, local03 wz
1337c     01 1E 66 56 |  if_ne	neg	local01, #1
13380     A7 1E 62 FC | 	wrlong	local01, fp
13384     10 01 90 FD | 	jmp	#LR__1523
13388                 | LR__1519
13388                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
13388     08 4E 05 F1 | 	add	fp, #8
1338c     A7 1E 02 FB | 	rdlong	local01, fp
13390     08 4E 85 F1 | 	sub	fp, #8
13394     2B 1E 0E F2 | 	cmp	local01, #43 wz
13398     14 4E 05 A1 |  if_e	add	fp, #20
1339c     A7 22 02 AB |  if_e	rdlong	local03, fp
133a0     14 4E 85 A1 |  if_e	sub	fp, #20
133a4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
133a8     30 00 90 5D |  if_ne	jmp	#LR__1520
133ac     00 1E 06 F6 | 	mov	local01, #0
133b0     A7 12 02 FB | 	rdlong	arg01, fp
133b4     DC B8 BF FD | 	call	#_convertstring
133b8     FD 12 02 F6 | 	mov	arg01, result1
133bc     0C 4E 05 F1 | 	add	fp, #12
133c0     A7 14 02 FB | 	rdlong	arg02, fp
133c4     0C 4E 85 F1 | 	sub	fp, #12
133c8     74 B7 B0 FD | 	call	#__system___string_cmp
133cc     00 FA 0D F2 | 	cmp	result1, #0 wz
133d0     00 1E 26 56 |  if_ne	not	local01, #0
133d4     A7 1E 62 FC | 	wrlong	local01, fp
133d8     BC 00 90 FD | 	jmp	#LR__1523
133dc                 | LR__1520
133dc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
133dc     08 4E 05 F1 | 	add	fp, #8
133e0     A7 1E 02 FB | 	rdlong	local01, fp
133e4     08 4E 85 F1 | 	sub	fp, #8
133e8     1F 1E 0E F2 | 	cmp	local01, #31 wz
133ec     14 4E 05 A1 |  if_e	add	fp, #20
133f0     A7 22 02 AB |  if_e	rdlong	local03, fp
133f4     14 4E 85 A1 |  if_e	sub	fp, #20
133f8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
133fc     34 00 90 5D |  if_ne	jmp	#LR__1521
13400     00 1E 06 F6 | 	mov	local01, #0
13404     A7 20 02 FB | 	rdlong	local02, fp
13408     0C 4E 05 F1 | 	add	fp, #12
1340c     A7 12 02 FB | 	rdlong	arg01, fp
13410     0C 4E 85 F1 | 	sub	fp, #12
13414     7C B8 BF FD | 	call	#_convertstring
13418     FD 14 02 F6 | 	mov	arg02, result1
1341c     10 13 02 F6 | 	mov	arg01, local02
13420     1C B7 B0 FD | 	call	#__system___string_cmp
13424     00 FA 0D F2 | 	cmp	result1, #0 wz
13428     00 1E 26 56 |  if_ne	not	local01, #0
1342c     A7 1E 62 FC | 	wrlong	local01, fp
13430     64 00 90 FD | 	jmp	#LR__1523
13434                 | LR__1521
13434                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
13434     08 4E 05 F1 | 	add	fp, #8
13438     A7 1E 02 FB | 	rdlong	local01, fp
1343c     08 4E 85 F1 | 	sub	fp, #8
13440     2B 1E 0E F2 | 	cmp	local01, #43 wz
13444     14 4E 05 A1 |  if_e	add	fp, #20
13448     A7 22 02 AB |  if_e	rdlong	local03, fp
1344c     14 4E 85 A1 |  if_e	sub	fp, #20
13450     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
13454     3C 00 90 5D |  if_ne	jmp	#LR__1522
13458     00 1E 06 F6 | 	mov	local01, #0
1345c     A7 12 02 FB | 	rdlong	arg01, fp
13460     30 B8 BF FD | 	call	#_convertstring
13464     FD 20 02 F6 | 	mov	local02, result1
13468     0C 4E 05 F1 | 	add	fp, #12
1346c     A7 12 02 FB | 	rdlong	arg01, fp
13470     0C 4E 85 F1 | 	sub	fp, #12
13474     1C B8 BF FD | 	call	#_convertstring
13478     FD 14 02 F6 | 	mov	arg02, result1
1347c     10 13 02 F6 | 	mov	arg01, local02
13480     BC B6 B0 FD | 	call	#__system___string_cmp
13484     00 FA 0D F2 | 	cmp	result1, #0 wz
13488     00 1E 26 56 |  if_ne	not	local01, #0
1348c     A7 1E 62 FC | 	wrlong	local01, fp
13490     04 00 90 FD | 	jmp	#LR__1523
13494                 | LR__1522
13494     A7 00 68 FC | 	wrlong	#0, fp
13498                 | LR__1523
13498     08 4E 05 F1 | 	add	fp, #8
1349c     A7 38 68 FC | 	wrlong	#28, fp
134a0     08 4E 85 F1 | 	sub	fp, #8
134a4     A7 12 02 F6 | 	mov	arg01, fp
134a8     4C 74 BF FD | 	call	#_push
134ac     A7 F0 03 F6 | 	mov	ptra, fp
134b0     B2 00 A0 FD | 	call	#popregs_
134b4                 | _do_ne_ret
134b4     2D 00 64 FD | 	ret
134b8                 | 
134b8                 | ' 
134b8                 | ' 
134b8                 | ' 
134b8                 | ' ' -------------------   convert a variable on the top of stack to integer
134b8                 | ' 
134b8                 | ' 'sub do_converttoint'
134b8                 | ' 
134b8                 | ' 'dim t1 as expr_result 
134b8                 | ' 'dim a1,r as integer
134b8                 | ' 't1=pop() 
134b8                 | ' 'select case t1.result_type
134b8                 | ' '  case result_int: a1=t1.result.iresult : r=result_int
134b8                 | ' '  case result_uint: a1=t1.result.uresult : r=result_int
134b8                 | ' '  case result_float: a1=round(t1.result.fresult) : r=result_int
134b8                 | ' '  case result_string: a1=val(t1.result.sresult) :r=result_int
134b8                 | ' '  case result_string2: a1=val(convertstring(t1.result.uresult)) :r=result_int
134b8                 | ' '  case result_error: a1=0: r=t1.result.uresult
134b8                 | ' '  case else : a1=0 : r=1
134b8                 | ' 
134b8                 | ' 'end select
134b8                 | ' 't1.result.iresult=a1 : t1.result_type=r : push t1 
134b8                 | ' 
134b8                 | ' 'end sub
134b8                 | ' 
134b8                 | ' function converttoint (t1 as expr_result) as integer
134b8                 | _converttoint
134b8     02 4A 05 F6 | 	mov	COUNT_, #2
134bc     A8 00 A0 FD | 	call	#pushregs_
134c0     09 1F 02 F6 | 	mov	local01, arg01
134c4                 | ' 
134c4                 | ' select case t1.result_type
134c4     08 1E 06 F1 | 	add	local01, #8
134c8     0F 21 02 FB | 	rdlong	local02, local01
134cc     08 1E 86 F1 | 	sub	local01, #8
134d0     1C 20 0E F2 | 	cmp	local02, #28 wz
134d4     24 00 90 AD |  if_e	jmp	#LR__1530
134d8     1D 20 0E F2 | 	cmp	local02, #29 wz
134dc     24 00 90 AD |  if_e	jmp	#LR__1531
134e0     1E 20 0E F2 | 	cmp	local02, #30 wz
134e4     24 00 90 AD |  if_e	jmp	#LR__1532
134e8     1F 20 0E F2 | 	cmp	local02, #31 wz
134ec     2C 00 90 AD |  if_e	jmp	#LR__1533
134f0     2B 20 0E F2 | 	cmp	local02, #43 wz
134f4     3C 00 90 AD |  if_e	jmp	#LR__1534
134f8     58 00 90 FD | 	jmp	#LR__1535
134fc                 | LR__1530
134fc     0F FB 01 FB | 	rdlong	result1, local01
13500     54 00 90 FD | 	jmp	#LR__1536
13504                 | LR__1531
13504     0F FB 01 FB | 	rdlong	result1, local01
13508     4C 00 90 FD | 	jmp	#LR__1536
1350c                 | LR__1532
1350c     0F 13 02 FB | 	rdlong	arg01, local01
13510     01 14 06 F6 | 	mov	arg02, #1
13514     48 E6 B0 FD | 	call	#__system___float_tointeger
13518     3C 00 90 FD | 	jmp	#LR__1536
1351c                 | LR__1533
1351c     0F 13 02 FB | 	rdlong	arg01, local01
13520     5C E9 B0 FD | 	call	#__system____builtin_atof
13524     FD 12 02 F6 | 	mov	arg01, result1
13528     00 14 06 F6 | 	mov	arg02, #0
1352c     30 E6 B0 FD | 	call	#__system___float_tointeger
13530     24 00 90 FD | 	jmp	#LR__1536
13534                 | LR__1534
13534     0F 13 02 FB | 	rdlong	arg01, local01
13538     58 B7 BF FD | 	call	#_convertstring
1353c     FD 12 02 F6 | 	mov	arg01, result1
13540     3C E9 B0 FD | 	call	#__system____builtin_atof
13544     FD 12 02 F6 | 	mov	arg01, result1
13548     00 14 06 F6 | 	mov	arg02, #0
1354c     10 E6 B0 FD | 	call	#__system___float_tointeger
13550     04 00 90 FD | 	jmp	#LR__1536
13554                 | LR__1535
13554     00 FA 05 F6 | 	mov	result1, #0
13558                 | LR__1536
13558     A7 F0 03 F6 | 	mov	ptra, fp
1355c     B2 00 A0 FD | 	call	#popregs_
13560                 | _converttoint_ret
13560     2D 00 64 FD | 	ret
13564                 | 
13564                 | ' 
13564                 | ' function converttofloat (t1 as expr_result) as single
13564                 | _converttofloat
13564     03 4A 05 F6 | 	mov	COUNT_, #3
13568     A8 00 A0 FD | 	call	#pushregs_
1356c     09 1F 02 F6 | 	mov	local01, arg01
13570                 | ' 
13570                 | ' select case t1.result_type
13570     08 1E 06 F1 | 	add	local01, #8
13574     0F 21 02 FB | 	rdlong	local02, local01
13578     08 1E 86 F1 | 	sub	local01, #8
1357c     1C 20 0E F2 | 	cmp	local02, #28 wz
13580     24 00 90 AD |  if_e	jmp	#LR__1540
13584     1D 20 0E F2 | 	cmp	local02, #29 wz
13588     38 00 90 AD |  if_e	jmp	#LR__1541
1358c     1E 20 0E F2 | 	cmp	local02, #30 wz
13590     3C 00 90 AD |  if_e	jmp	#LR__1542
13594     1F 20 0E F2 | 	cmp	local02, #31 wz
13598     3C 00 90 AD |  if_e	jmp	#LR__1543
1359c     2B 20 0E F2 | 	cmp	local02, #43 wz
135a0     40 00 90 AD |  if_e	jmp	#LR__1544
135a4     50 00 90 FD | 	jmp	#LR__1545
135a8                 | LR__1540
135a8     0F 13 02 FB | 	rdlong	arg01, local01
135ac     09 13 52 F6 | 	abs	arg01, arg01 wc
135b0     1F 22 C6 C9 |  if_b	decod	local03, #31
135b4     00 22 06 36 |  if_ae	mov	local03, #0
135b8     D8 DC B0 FD | 	call	#__system___float_fromuns
135bc     11 FB 61 F5 | 	xor	result1, local03
135c0     38 00 90 FD | 	jmp	#LR__1546
135c4                 | LR__1541
135c4     0F 13 02 FB | 	rdlong	arg01, local01
135c8     C8 DC B0 FD | 	call	#__system___float_fromuns
135cc     2C 00 90 FD | 	jmp	#LR__1546
135d0                 | LR__1542
135d0     0F FB 01 FB | 	rdlong	result1, local01
135d4     24 00 90 FD | 	jmp	#LR__1546
135d8                 | LR__1543
135d8     0F 13 02 FB | 	rdlong	arg01, local01
135dc     A0 E8 B0 FD | 	call	#__system____builtin_atof
135e0     18 00 90 FD | 	jmp	#LR__1546
135e4                 | LR__1544
135e4     0F 13 02 FB | 	rdlong	arg01, local01
135e8     A8 B6 BF FD | 	call	#_convertstring
135ec     FD 12 02 F6 | 	mov	arg01, result1
135f0     8C E8 B0 FD | 	call	#__system____builtin_atof
135f4     04 00 90 FD | 	jmp	#LR__1546
135f8                 | LR__1545
135f8     00 FA 05 F6 | 	mov	result1, #0
135fc                 | LR__1546
135fc     A7 F0 03 F6 | 	mov	ptra, fp
13600     B2 00 A0 FD | 	call	#popregs_
13604                 | _converttofloat_ret
13604     2D 00 64 FD | 	ret
13608                 | 
13608                 | ' 
13608                 | ' sub do_rnd
13608                 | _do_rnd
13608     01 4A 05 F6 | 	mov	COUNT_, #1
1360c     A8 00 A0 FD | 	call	#pushregs_
13610     10 F0 07 F1 | 	add	ptra, #16
13614     6A 00 00 FF 
13618     80 E4 05 F1 | 	add	objptr, ##54400
1361c     F2 1E 02 FB | 	rdlong	local01, objptr
13620     0F 17 02 F6 | 	mov	arg03, local01
13624     01 16 66 F0 | 	shl	arg03, #1
13628     0F 17 02 F1 | 	add	arg03, local01
1362c     02 16 66 F0 | 	shl	arg03, #2
13630     03 00 00 FF 
13634     04 E4 85 F1 | 	sub	objptr, ##1540
13638     F2 16 02 F1 | 	add	arg03, objptr
1363c     0B 17 02 FB | 	rdlong	arg03, arg03
13640     0C 4E 05 F1 | 	add	fp, #12
13644     A7 16 62 FC | 	wrlong	arg03, fp
13648                 | ' 
13648                 | ' numpar=compiledline(lineptr_e).result.uresult
13648                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
13648     0C 4E 85 F1 | 	sub	fp, #12
1364c     02 16 16 F2 | 	cmp	arg03, #2 wc
13650     67 00 00 FF 
13654     7C E4 85 F1 | 	sub	objptr, ##52860
13658     3C 00 90 CD |  if_b	jmp	#LR__1550
1365c     00 12 06 F6 | 	mov	arg01, #0
13660     4C 0E B1 FD | 	call	#__system___getiolock_0484
13664     FD 12 02 F6 | 	mov	arg01, result1
13668     AC B4 B0 FD | 	call	#__system___lockmem
1366c     73 01 00 FF 
13670     74 15 06 F6 | 	mov	arg02, ##@LR__5151
13674     00 12 06 F6 | 	mov	arg01, #0
13678     00 16 06 F6 | 	mov	arg03, #0
1367c     A0 C1 B0 FD | 	call	#__system___basic_print_string
13680     00 12 06 F6 | 	mov	arg01, #0
13684     28 0E B1 FD | 	call	#__system___getiolock_0484
13688     FD 00 68 FC | 	wrlong	#0, result1
1368c     27 12 06 F6 | 	mov	arg01, #39
13690     08 70 B0 FD | 	call	#_printerror
13694     2C 01 90 FD | 	jmp	#LR__1557
13698                 | LR__1550
13698                 | ' if numpar=0 then
13698     0C 4E 05 F1 | 	add	fp, #12
1369c     A7 FE 09 FB | 	rdlong	result3, fp wz
136a0     0C 4E 85 F1 | 	sub	fp, #12
136a4     20 00 90 5D |  if_ne	jmp	#LR__1551
136a8     08 4E 05 F1 | 	add	fp, #8
136ac     A7 3A 68 FC | 	wrlong	#29, fp
136b0     08 4E 85 F1 | 	sub	fp, #8
136b4     1B FA 61 FD | 	getrnd	result1
136b8     A7 FA 61 FC | 	wrlong	result1, fp
136bc     A7 12 02 F6 | 	mov	arg01, fp
136c0     34 72 BF FD | 	call	#_push
136c4     FC 00 90 FD | 	jmp	#LR__1556
136c8                 | LR__1551
136c8     94 71 BF FD | 	call	#_pop
136cc     A7 FA 61 FC | 	wrlong	result1, fp
136d0     04 4E 05 F1 | 	add	fp, #4
136d4     A7 FC 61 FC | 	wrlong	result2, fp
136d8     04 4E 05 F1 | 	add	fp, #4
136dc     A7 FE 61 FC | 	wrlong	result3, fp
136e0                 | '   t1=pop()
136e0                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
136e0     08 4E 85 F1 | 	sub	fp, #8
136e4     1C FE 0D F2 | 	cmp	result3, #28 wz
136e8     08 4E 05 51 |  if_ne	add	fp, #8
136ec     A7 1E 02 5B |  if_ne	rdlong	local01, fp
136f0     08 4E 85 51 |  if_ne	sub	fp, #8
136f4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
136f8     2C 00 90 5D |  if_ne	jmp	#LR__1552
136fc     1B FA 61 FD | 	getrnd	result1
13700     A7 1E 02 FB | 	rdlong	local01, fp
13704     0F FB 11 FD | 	qdiv	result1, local01
13708     A7 12 02 F6 | 	mov	arg01, fp
1370c     19 1E 62 FD | 	getqy	local01
13710     A7 1E 62 FC | 	wrlong	local01, fp
13714     08 4E 05 F1 | 	add	fp, #8
13718     A7 3A 68 FC | 	wrlong	#29, fp
1371c     08 4E 85 F1 | 	sub	fp, #8
13720     D4 71 BF FD | 	call	#_push
13724     9C 00 90 FD | 	jmp	#LR__1555
13728                 | LR__1552
13728     08 4E 05 F1 | 	add	fp, #8
1372c     A7 1E 02 FB | 	rdlong	local01, fp
13730     08 4E 85 F1 | 	sub	fp, #8
13734     1E 1E 0E F2 | 	cmp	local01, #30 wz
13738     48 00 90 5D |  if_ne	jmp	#LR__1553
1373c     A7 12 02 FB | 	rdlong	arg01, fp
13740     00 C0 24 FF 
13744     00 14 06 F6 | 	mov	arg02, ##1233125376
13748     50 E1 B0 FD | 	call	#__system___float_div
1374c     FD 1E 02 F6 | 	mov	local01, result1
13750     1B 12 62 FD | 	getrnd	arg01
13754     74 13 06 F4 | 	bitl	arg01, #372
13758     38 DB B0 FD | 	call	#__system___float_fromuns
1375c     FD 14 02 F6 | 	mov	arg02, result1
13760     0F 13 02 F6 | 	mov	arg01, local01
13764     30 DF B0 FD | 	call	#__system___float_mul
13768     A7 FA 61 FC | 	wrlong	result1, fp
1376c     08 4E 05 F1 | 	add	fp, #8
13770     A7 3C 68 FC | 	wrlong	#30, fp
13774     08 4E 85 F1 | 	sub	fp, #8
13778     A7 12 02 F6 | 	mov	arg01, fp
1377c     78 71 BF FD | 	call	#_push
13780     40 00 90 FD | 	jmp	#LR__1554
13784                 | LR__1553
13784                 | '     print "rnd: "; : printerror(40) 
13784     00 12 06 F6 | 	mov	arg01, #0
13788     24 0D B1 FD | 	call	#__system___getiolock_0484
1378c     FD 12 02 F6 | 	mov	arg01, result1
13790     84 B3 B0 FD | 	call	#__system___lockmem
13794     73 01 00 FF 
13798     7A 15 06 F6 | 	mov	arg02, ##@LR__5152
1379c     00 12 06 F6 | 	mov	arg01, #0
137a0     00 16 06 F6 | 	mov	arg03, #0
137a4     78 C0 B0 FD | 	call	#__system___basic_print_string
137a8     00 12 06 F6 | 	mov	arg01, #0
137ac     00 0D B1 FD | 	call	#__system___getiolock_0484
137b0     FD 00 68 FC | 	wrlong	#0, result1
137b4     28 12 06 F6 | 	mov	arg01, #40
137b8     E0 6E B0 FD | 	call	#_printerror
137bc     A7 12 02 F6 | 	mov	arg01, fp
137c0     34 71 BF FD | 	call	#_push
137c4                 | LR__1554
137c4                 | LR__1555
137c4                 | LR__1556
137c4                 | LR__1557
137c4     A7 F0 03 F6 | 	mov	ptra, fp
137c8     B2 00 A0 FD | 	call	#popregs_
137cc                 | _do_rnd_ret
137cc     2D 00 64 FD | 	ret
137d0                 | 
137d0                 | ' 
137d0                 | ' sub do_getenvsustain
137d0                 | _do_getenvsustain
137d0     01 4A 05 F6 | 	mov	COUNT_, #1
137d4     A8 00 A0 FD | 	call	#pushregs_
137d8     10 F0 07 F1 | 	add	ptra, #16
137dc     6A 00 00 FF 
137e0     80 E4 05 F1 | 	add	objptr, ##54400
137e4     F2 1E 02 FB | 	rdlong	local01, objptr
137e8     0F 17 02 F6 | 	mov	arg03, local01
137ec     01 16 66 F0 | 	shl	arg03, #1
137f0     0F 17 02 F1 | 	add	arg03, local01
137f4     02 16 66 F0 | 	shl	arg03, #2
137f8     03 00 00 FF 
137fc     04 E4 85 F1 | 	sub	objptr, ##1540
13800     F2 16 02 F1 | 	add	arg03, objptr
13804     0B 17 02 FB | 	rdlong	arg03, arg03
13808     0C 4E 05 F1 | 	add	fp, #12
1380c     A7 16 62 FC | 	wrlong	arg03, fp
13810                 | ' 
13810                 | ' numpar=compiledline(lineptr_e).result.uresult
13810                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
13810     0C 4E 85 F1 | 	sub	fp, #12
13814     02 16 16 F2 | 	cmp	arg03, #2 wc
13818     67 00 00 FF 
1381c     7C E4 85 F1 | 	sub	objptr, ##52860
13820     0C 4E 05 C1 |  if_b	add	fp, #12
13824     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
13828     0C 4E 85 C1 |  if_b	sub	fp, #12
1382c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1560
13830     00 12 06 F6 | 	mov	arg01, #0
13834     78 0C B1 FD | 	call	#__system___getiolock_0484
13838     FD 12 02 F6 | 	mov	arg01, result1
1383c     D8 B2 B0 FD | 	call	#__system___lockmem
13840     73 01 00 FF 
13844     80 15 06 F6 | 	mov	arg02, ##@LR__5153
13848     00 12 06 F6 | 	mov	arg01, #0
1384c     00 16 06 F6 | 	mov	arg03, #0
13850     CC BF B0 FD | 	call	#__system___basic_print_string
13854     00 12 06 F6 | 	mov	arg01, #0
13858     54 0C B1 FD | 	call	#__system___getiolock_0484
1385c     FD 00 68 FC | 	wrlong	#0, result1
13860     27 12 06 F6 | 	mov	arg01, #39
13864     34 6E B0 FD | 	call	#_printerror
13868     64 00 90 FD | 	jmp	#LR__1561
1386c                 | LR__1560
1386c     F0 6F BF FD | 	call	#_pop
13870     FD 1E 02 F6 | 	mov	local01, result1
13874     FE 16 02 F6 | 	mov	arg03, result2
13878     A7 1E 62 FC | 	wrlong	local01, fp
1387c     04 4E 05 F1 | 	add	fp, #4
13880     A7 16 62 FC | 	wrlong	arg03, fp
13884     04 4E 05 F1 | 	add	fp, #4
13888     A7 FE 61 FC | 	wrlong	result3, fp
1388c     08 4E 85 F1 | 	sub	fp, #8
13890     A7 12 02 F6 | 	mov	arg01, fp
13894     20 FC BF FD | 	call	#_converttoint
13898     FD 1E 02 F6 | 	mov	local01, result1
1389c     01 1E 66 F0 | 	shl	local01, #1
138a0     79 00 00 FF 
138a4     A4 E5 05 F1 | 	add	objptr, ##62372
138a8     F2 1E 02 F1 | 	add	local01, objptr
138ac     0F 1F E2 FA | 	rdword	local01, local01
138b0     A7 1E 62 FC | 	wrlong	local01, fp
138b4     08 4E 05 F1 | 	add	fp, #8
138b8     A7 38 68 FC | 	wrlong	#28, fp
138bc     08 4E 85 F1 | 	sub	fp, #8
138c0     A7 12 02 F6 | 	mov	arg01, fp
138c4     79 00 00 FF 
138c8     A4 E5 85 F1 | 	sub	objptr, ##62372
138cc     28 70 BF FD | 	call	#_push
138d0                 | LR__1561
138d0     A7 F0 03 F6 | 	mov	ptra, fp
138d4     B2 00 A0 FD | 	call	#popregs_
138d8                 | _do_getenvsustain_ret
138d8     2D 00 64 FD | 	ret
138dc                 | 
138dc                 | ' 
138dc                 | ' sub do_sin
138dc                 | _do_sin
138dc     01 4A 05 F6 | 	mov	COUNT_, #1
138e0     A8 00 A0 FD | 	call	#pushregs_
138e4     10 F0 07 F1 | 	add	ptra, #16
138e8     6A 00 00 FF 
138ec     80 E4 05 F1 | 	add	objptr, ##54400
138f0     F2 1E 02 FB | 	rdlong	local01, objptr
138f4     0F 17 02 F6 | 	mov	arg03, local01
138f8     01 16 66 F0 | 	shl	arg03, #1
138fc     0F 17 02 F1 | 	add	arg03, local01
13900     02 16 66 F0 | 	shl	arg03, #2
13904     03 00 00 FF 
13908     04 E4 85 F1 | 	sub	objptr, ##1540
1390c     F2 16 02 F1 | 	add	arg03, objptr
13910     0B 17 02 FB | 	rdlong	arg03, arg03
13914     0C 4E 05 F1 | 	add	fp, #12
13918     A7 16 62 FC | 	wrlong	arg03, fp
1391c                 | ' 
1391c                 | ' numpar=compiledline(lineptr_e).result.uresult
1391c                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
1391c     0C 4E 85 F1 | 	sub	fp, #12
13920     02 16 16 F2 | 	cmp	arg03, #2 wc
13924     67 00 00 FF 
13928     7C E4 85 F1 | 	sub	objptr, ##52860
1392c     0C 4E 05 C1 |  if_b	add	fp, #12
13930     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
13934     0C 4E 85 C1 |  if_b	sub	fp, #12
13938     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1570
1393c     00 12 06 F6 | 	mov	arg01, #0
13940     6C 0B B1 FD | 	call	#__system___getiolock_0484
13944     FD 12 02 F6 | 	mov	arg01, result1
13948     CC B1 B0 FD | 	call	#__system___lockmem
1394c     73 01 00 FF 
13950     90 15 06 F6 | 	mov	arg02, ##@LR__5154
13954     00 12 06 F6 | 	mov	arg01, #0
13958     00 16 06 F6 | 	mov	arg03, #0
1395c     C0 BE B0 FD | 	call	#__system___basic_print_string
13960     00 12 06 F6 | 	mov	arg01, #0
13964     48 0B B1 FD | 	call	#__system___getiolock_0484
13968     FD 00 68 FC | 	wrlong	#0, result1
1396c     27 12 06 F6 | 	mov	arg01, #39
13970     28 6D B0 FD | 	call	#_printerror
13974     64 00 90 FD | 	jmp	#LR__1571
13978                 | LR__1570
13978     E4 6E BF FD | 	call	#_pop
1397c     A7 FA 61 FC | 	wrlong	result1, fp
13980     04 4E 05 F1 | 	add	fp, #4
13984     A7 FC 61 FC | 	wrlong	result2, fp
13988     04 4E 05 F1 | 	add	fp, #4
1398c     A7 FE 61 FC | 	wrlong	result3, fp
13990     08 4E 85 F1 | 	sub	fp, #8
13994     79 00 00 FF 
13998     98 E5 05 F1 | 	add	objptr, ##62360
1399c     F2 1E 02 FB | 	rdlong	local01, objptr
139a0     79 00 00 FF 
139a4     98 E5 85 F1 | 	sub	objptr, ##62360
139a8     A7 12 02 F6 | 	mov	arg01, fp
139ac     B4 FB BF FD | 	call	#_converttofloat
139b0     FD 14 02 F6 | 	mov	arg02, result1
139b4     0F 13 02 F6 | 	mov	arg01, local01
139b8     DC DC B0 FD | 	call	#__system___float_mul
139bc     FD 12 02 F6 | 	mov	arg01, result1
139c0     10 E6 B0 FD | 	call	#__system____builtin_sinf
139c4     A7 FA 61 FC | 	wrlong	result1, fp
139c8     08 4E 05 F1 | 	add	fp, #8
139cc     A7 3C 68 FC | 	wrlong	#30, fp
139d0     08 4E 85 F1 | 	sub	fp, #8
139d4     A7 12 02 F6 | 	mov	arg01, fp
139d8     1C 6F BF FD | 	call	#_push
139dc                 | LR__1571
139dc     A7 F0 03 F6 | 	mov	ptra, fp
139e0     B2 00 A0 FD | 	call	#popregs_
139e4                 | _do_sin_ret
139e4     2D 00 64 FD | 	ret
139e8                 | 
139e8                 | ' 
139e8                 | ' 
139e8                 | ' sub do_mid
139e8                 | _do_mid
139e8     00 4A 05 F6 | 	mov	COUNT_, #0
139ec     A8 00 A0 FD | 	call	#pushregs_
139f0     18 F0 07 F1 | 	add	ptra, #24
139f4     6A 00 00 FF 
139f8     80 E4 05 F1 | 	add	objptr, ##54400
139fc     F2 16 02 FB | 	rdlong	arg03, objptr
13a00     0B 15 02 F6 | 	mov	arg02, arg03
13a04     01 14 66 F0 | 	shl	arg02, #1
13a08     0B 15 02 F1 | 	add	arg02, arg03
13a0c     02 14 66 F0 | 	shl	arg02, #2
13a10     03 00 00 FF 
13a14     04 E4 85 F1 | 	sub	objptr, ##1540
13a18     F2 14 02 F1 | 	add	arg02, objptr
13a1c     0A 17 02 FB | 	rdlong	arg03, arg02
13a20     0C 4E 05 F1 | 	add	fp, #12
13a24     A7 16 62 FC | 	wrlong	arg03, fp
13a28                 | ' 
13a28                 | ' numpar=compiledline(lineptr_e).result.uresult
13a28                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
13a28     0C 4E 85 F1 | 	sub	fp, #12
13a2c     03 16 0E F2 | 	cmp	arg03, #3 wz
13a30     67 00 00 FF 
13a34     7C E4 85 F1 | 	sub	objptr, ##52860
13a38     3C 00 90 AD |  if_e	jmp	#LR__1580
13a3c     00 12 06 F6 | 	mov	arg01, #0
13a40     6C 0A B1 FD | 	call	#__system___getiolock_0484
13a44     FD 12 02 F6 | 	mov	arg01, result1
13a48     CC B0 B0 FD | 	call	#__system___lockmem
13a4c     73 01 00 FF 
13a50     96 15 06 F6 | 	mov	arg02, ##@LR__5155
13a54     00 12 06 F6 | 	mov	arg01, #0
13a58     00 16 06 F6 | 	mov	arg03, #0
13a5c     C0 BD B0 FD | 	call	#__system___basic_print_string
13a60     00 12 06 F6 | 	mov	arg01, #0
13a64     48 0A B1 FD | 	call	#__system___getiolock_0484
13a68     FD 00 68 FC | 	wrlong	#0, result1
13a6c     27 12 06 F6 | 	mov	arg01, #39
13a70     28 6C B0 FD | 	call	#_printerror
13a74     28 01 90 FD | 	jmp	#LR__1583
13a78                 | LR__1580
13a78     E4 6D BF FD | 	call	#_pop
13a7c     FF 16 02 F6 | 	mov	arg03, result3
13a80     A7 FA 61 FC | 	wrlong	result1, fp
13a84     04 4E 05 F1 | 	add	fp, #4
13a88     A7 FC 61 FC | 	wrlong	result2, fp
13a8c     04 4E 05 F1 | 	add	fp, #4
13a90     A7 16 62 FC | 	wrlong	arg03, fp
13a94     08 4E 85 F1 | 	sub	fp, #8
13a98     A7 12 02 F6 | 	mov	arg01, fp
13a9c     18 FA BF FD | 	call	#_converttoint
13aa0     FD 16 02 F6 | 	mov	arg03, result1
13aa4     14 4E 05 F1 | 	add	fp, #20
13aa8     A7 16 62 FC | 	wrlong	arg03, fp
13aac     14 4E 85 F1 | 	sub	fp, #20
13ab0     AC 6D BF FD | 	call	#_pop
13ab4     FF 16 02 F6 | 	mov	arg03, result3
13ab8     A7 FA 61 FC | 	wrlong	result1, fp
13abc     04 4E 05 F1 | 	add	fp, #4
13ac0     A7 FC 61 FC | 	wrlong	result2, fp
13ac4     04 4E 05 F1 | 	add	fp, #4
13ac8     A7 16 62 FC | 	wrlong	arg03, fp
13acc     08 4E 85 F1 | 	sub	fp, #8
13ad0     A7 12 02 F6 | 	mov	arg01, fp
13ad4     E0 F9 BF FD | 	call	#_converttoint
13ad8     FD 16 02 F6 | 	mov	arg03, result1
13adc     10 4E 05 F1 | 	add	fp, #16
13ae0     A7 16 62 FC | 	wrlong	arg03, fp
13ae4     10 4E 85 F1 | 	sub	fp, #16
13ae8     74 6D BF FD | 	call	#_pop
13aec     FF 16 02 F6 | 	mov	arg03, result3
13af0     A7 FA 61 FC | 	wrlong	result1, fp
13af4     04 4E 05 F1 | 	add	fp, #4
13af8     A7 FC 61 FC | 	wrlong	result2, fp
13afc     04 4E 05 F1 | 	add	fp, #4
13b00     A7 16 62 FC | 	wrlong	arg03, fp
13b04                 | ' t1=pop() : arg2=converttoint(t1)
13b04                 | ' t1=pop() : arg1=converttoint(t1)
13b04                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
13b04     08 4E 85 F1 | 	sub	fp, #8
13b08     2B 16 0E F2 | 	cmp	arg03, #43 wz
13b0c     18 00 90 5D |  if_ne	jmp	#LR__1581
13b10     A7 12 02 FB | 	rdlong	arg01, fp
13b14     7C B1 BF FD | 	call	#_convertstring
13b18     A7 FA 61 FC | 	wrlong	result1, fp
13b1c     08 4E 05 F1 | 	add	fp, #8
13b20     A7 3E 68 FC | 	wrlong	#31, fp
13b24     08 4E 85 F1 | 	sub	fp, #8
13b28                 | LR__1581
13b28                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
13b28     08 4E 05 F1 | 	add	fp, #8
13b2c     A7 16 02 FB | 	rdlong	arg03, fp
13b30     08 4E 85 F1 | 	sub	fp, #8
13b34     1F 16 0E F2 | 	cmp	arg03, #31 wz
13b38     3C 00 90 AD |  if_e	jmp	#LR__1582
13b3c     00 12 06 F6 | 	mov	arg01, #0
13b40     6C 09 B1 FD | 	call	#__system___getiolock_0484
13b44     FD 12 02 F6 | 	mov	arg01, result1
13b48     CC AF B0 FD | 	call	#__system___lockmem
13b4c     73 01 00 FF 
13b50     9D 15 06 F6 | 	mov	arg02, ##@LR__5156
13b54     00 12 06 F6 | 	mov	arg01, #0
13b58     00 16 06 F6 | 	mov	arg03, #0
13b5c     C0 BC B0 FD | 	call	#__system___basic_print_string
13b60     00 12 06 F6 | 	mov	arg01, #0
13b64     48 09 B1 FD | 	call	#__system___getiolock_0484
13b68     FD 00 68 FC | 	wrlong	#0, result1
13b6c     0F 12 06 F6 | 	mov	arg01, #15
13b70     28 6B B0 FD | 	call	#_printerror
13b74     28 00 90 FD | 	jmp	#LR__1583
13b78                 | LR__1582
13b78     A7 12 02 FB | 	rdlong	arg01, fp
13b7c     10 4E 05 F1 | 	add	fp, #16
13b80     A7 14 02 FB | 	rdlong	arg02, fp
13b84     04 4E 05 F1 | 	add	fp, #4
13b88     A7 16 02 FB | 	rdlong	arg03, fp
13b8c     14 4E 85 F1 | 	sub	fp, #20
13b90     E4 D0 B0 FD | 	call	#__system__Mid_S
13b94     A7 FA 61 FC | 	wrlong	result1, fp
13b98     A7 12 02 F6 | 	mov	arg01, fp
13b9c     58 6D BF FD | 	call	#_push
13ba0                 | LR__1583
13ba0     A7 F0 03 F6 | 	mov	ptra, fp
13ba4     B2 00 A0 FD | 	call	#popregs_
13ba8                 | _do_mid_ret
13ba8     2D 00 64 FD | 	ret
13bac                 | 
13bac                 | ' 
13bac                 | ' sub do_right
13bac                 | _do_right
13bac     00 4A 05 F6 | 	mov	COUNT_, #0
13bb0     A8 00 A0 FD | 	call	#pushregs_
13bb4     14 F0 07 F1 | 	add	ptra, #20
13bb8     6A 00 00 FF 
13bbc     80 E4 05 F1 | 	add	objptr, ##54400
13bc0     F2 16 02 FB | 	rdlong	arg03, objptr
13bc4     0B 15 02 F6 | 	mov	arg02, arg03
13bc8     01 14 66 F0 | 	shl	arg02, #1
13bcc     0B 15 02 F1 | 	add	arg02, arg03
13bd0     02 14 66 F0 | 	shl	arg02, #2
13bd4     03 00 00 FF 
13bd8     04 E4 85 F1 | 	sub	objptr, ##1540
13bdc     F2 14 02 F1 | 	add	arg02, objptr
13be0     0A 17 02 FB | 	rdlong	arg03, arg02
13be4     0C 4E 05 F1 | 	add	fp, #12
13be8     A7 16 62 FC | 	wrlong	arg03, fp
13bec                 | ' 
13bec                 | ' numpar=compiledline(lineptr_e).result.uresult
13bec                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
13bec     0C 4E 85 F1 | 	sub	fp, #12
13bf0     02 16 0E F2 | 	cmp	arg03, #2 wz
13bf4     67 00 00 FF 
13bf8     7C E4 85 F1 | 	sub	objptr, ##52860
13bfc     3C 00 90 AD |  if_e	jmp	#LR__1590
13c00     00 12 06 F6 | 	mov	arg01, #0
13c04     A8 08 B1 FD | 	call	#__system___getiolock_0484
13c08     FD 12 02 F6 | 	mov	arg01, result1
13c0c     08 AF B0 FD | 	call	#__system___lockmem
13c10     73 01 00 FF 
13c14     A4 15 06 F6 | 	mov	arg02, ##@LR__5157
13c18     00 12 06 F6 | 	mov	arg01, #0
13c1c     00 16 06 F6 | 	mov	arg03, #0
13c20     FC BB B0 FD | 	call	#__system___basic_print_string
13c24     00 12 06 F6 | 	mov	arg01, #0
13c28     84 08 B1 FD | 	call	#__system___getiolock_0484
13c2c     FD 00 68 FC | 	wrlong	#0, result1
13c30     27 12 06 F6 | 	mov	arg01, #39
13c34     64 6A B0 FD | 	call	#_printerror
13c38     E8 00 90 FD | 	jmp	#LR__1593
13c3c                 | LR__1590
13c3c     20 6C BF FD | 	call	#_pop
13c40     FF 16 02 F6 | 	mov	arg03, result3
13c44     A7 FA 61 FC | 	wrlong	result1, fp
13c48     04 4E 05 F1 | 	add	fp, #4
13c4c     A7 FC 61 FC | 	wrlong	result2, fp
13c50     04 4E 05 F1 | 	add	fp, #4
13c54     A7 16 62 FC | 	wrlong	arg03, fp
13c58     08 4E 85 F1 | 	sub	fp, #8
13c5c     A7 12 02 F6 | 	mov	arg01, fp
13c60     54 F8 BF FD | 	call	#_converttoint
13c64     FD 16 02 F6 | 	mov	arg03, result1
13c68     10 4E 05 F1 | 	add	fp, #16
13c6c     A7 16 62 FC | 	wrlong	arg03, fp
13c70     10 4E 85 F1 | 	sub	fp, #16
13c74     E8 6B BF FD | 	call	#_pop
13c78     FF 16 02 F6 | 	mov	arg03, result3
13c7c     A7 FA 61 FC | 	wrlong	result1, fp
13c80     04 4E 05 F1 | 	add	fp, #4
13c84     A7 FC 61 FC | 	wrlong	result2, fp
13c88     04 4E 05 F1 | 	add	fp, #4
13c8c     A7 16 62 FC | 	wrlong	arg03, fp
13c90                 | ' t1=pop() : arg=converttoint(t1)
13c90                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
13c90     08 4E 85 F1 | 	sub	fp, #8
13c94     2B 16 0E F2 | 	cmp	arg03, #43 wz
13c98     18 00 90 5D |  if_ne	jmp	#LR__1591
13c9c     A7 12 02 FB | 	rdlong	arg01, fp
13ca0     F0 AF BF FD | 	call	#_convertstring
13ca4     A7 FA 61 FC | 	wrlong	result1, fp
13ca8     08 4E 05 F1 | 	add	fp, #8
13cac     A7 3E 68 FC | 	wrlong	#31, fp
13cb0     08 4E 85 F1 | 	sub	fp, #8
13cb4                 | LR__1591
13cb4                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
13cb4     08 4E 05 F1 | 	add	fp, #8
13cb8     A7 16 02 FB | 	rdlong	arg03, fp
13cbc     08 4E 85 F1 | 	sub	fp, #8
13cc0     1F 16 0E F2 | 	cmp	arg03, #31 wz
13cc4     3C 00 90 AD |  if_e	jmp	#LR__1592
13cc8     00 12 06 F6 | 	mov	arg01, #0
13ccc     E0 07 B1 FD | 	call	#__system___getiolock_0484
13cd0     FD 12 02 F6 | 	mov	arg01, result1
13cd4     40 AE B0 FD | 	call	#__system___lockmem
13cd8     73 01 00 FF 
13cdc     AD 15 06 F6 | 	mov	arg02, ##@LR__5158
13ce0     00 12 06 F6 | 	mov	arg01, #0
13ce4     00 16 06 F6 | 	mov	arg03, #0
13ce8     34 BB B0 FD | 	call	#__system___basic_print_string
13cec     00 12 06 F6 | 	mov	arg01, #0
13cf0     BC 07 B1 FD | 	call	#__system___getiolock_0484
13cf4     FD 00 68 FC | 	wrlong	#0, result1
13cf8     0F 12 06 F6 | 	mov	arg01, #15
13cfc     9C 69 B0 FD | 	call	#_printerror
13d00     20 00 90 FD | 	jmp	#LR__1593
13d04                 | LR__1592
13d04     A7 12 02 FB | 	rdlong	arg01, fp
13d08     10 4E 05 F1 | 	add	fp, #16
13d0c     A7 14 02 FB | 	rdlong	arg02, fp
13d10     10 4E 85 F1 | 	sub	fp, #16
13d14     D0 CE B0 FD | 	call	#__system__Right_S
13d18     A7 FA 61 FC | 	wrlong	result1, fp
13d1c     A7 12 02 F6 | 	mov	arg01, fp
13d20     D4 6B BF FD | 	call	#_push
13d24                 | LR__1593
13d24     A7 F0 03 F6 | 	mov	ptra, fp
13d28     B2 00 A0 FD | 	call	#popregs_
13d2c                 | _do_right_ret
13d2c     2D 00 64 FD | 	ret
13d30                 | 
13d30                 | ' 
13d30                 | ' sub do_left
13d30                 | _do_left
13d30     00 4A 05 F6 | 	mov	COUNT_, #0
13d34     A8 00 A0 FD | 	call	#pushregs_
13d38     14 F0 07 F1 | 	add	ptra, #20
13d3c     6A 00 00 FF 
13d40     80 E4 05 F1 | 	add	objptr, ##54400
13d44     F2 16 02 FB | 	rdlong	arg03, objptr
13d48     0B 15 02 F6 | 	mov	arg02, arg03
13d4c     01 14 66 F0 | 	shl	arg02, #1
13d50     0B 15 02 F1 | 	add	arg02, arg03
13d54     02 14 66 F0 | 	shl	arg02, #2
13d58     03 00 00 FF 
13d5c     04 E4 85 F1 | 	sub	objptr, ##1540
13d60     F2 14 02 F1 | 	add	arg02, objptr
13d64     0A 17 02 FB | 	rdlong	arg03, arg02
13d68     0C 4E 05 F1 | 	add	fp, #12
13d6c     A7 16 62 FC | 	wrlong	arg03, fp
13d70                 | ' 
13d70                 | ' numpar=compiledline(lineptr_e).result.uresult
13d70                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
13d70     0C 4E 85 F1 | 	sub	fp, #12
13d74     02 16 0E F2 | 	cmp	arg03, #2 wz
13d78     67 00 00 FF 
13d7c     7C E4 85 F1 | 	sub	objptr, ##52860
13d80     3C 00 90 AD |  if_e	jmp	#LR__1600
13d84     00 12 06 F6 | 	mov	arg01, #0
13d88     24 07 B1 FD | 	call	#__system___getiolock_0484
13d8c     FD 12 02 F6 | 	mov	arg01, result1
13d90     84 AD B0 FD | 	call	#__system___lockmem
13d94     73 01 00 FF 
13d98     B6 15 06 F6 | 	mov	arg02, ##@LR__5159
13d9c     00 12 06 F6 | 	mov	arg01, #0
13da0     00 16 06 F6 | 	mov	arg03, #0
13da4     78 BA B0 FD | 	call	#__system___basic_print_string
13da8     00 12 06 F6 | 	mov	arg01, #0
13dac     00 07 B1 FD | 	call	#__system___getiolock_0484
13db0     FD 00 68 FC | 	wrlong	#0, result1
13db4     27 12 06 F6 | 	mov	arg01, #39
13db8     E0 68 B0 FD | 	call	#_printerror
13dbc     E8 00 90 FD | 	jmp	#LR__1603
13dc0                 | LR__1600
13dc0     9C 6A BF FD | 	call	#_pop
13dc4     FF 16 02 F6 | 	mov	arg03, result3
13dc8     A7 FA 61 FC | 	wrlong	result1, fp
13dcc     04 4E 05 F1 | 	add	fp, #4
13dd0     A7 FC 61 FC | 	wrlong	result2, fp
13dd4     04 4E 05 F1 | 	add	fp, #4
13dd8     A7 16 62 FC | 	wrlong	arg03, fp
13ddc     08 4E 85 F1 | 	sub	fp, #8
13de0     A7 12 02 F6 | 	mov	arg01, fp
13de4     D0 F6 BF FD | 	call	#_converttoint
13de8     FD 16 02 F6 | 	mov	arg03, result1
13dec     10 4E 05 F1 | 	add	fp, #16
13df0     A7 16 62 FC | 	wrlong	arg03, fp
13df4     10 4E 85 F1 | 	sub	fp, #16
13df8     64 6A BF FD | 	call	#_pop
13dfc     FF 16 02 F6 | 	mov	arg03, result3
13e00     A7 FA 61 FC | 	wrlong	result1, fp
13e04     04 4E 05 F1 | 	add	fp, #4
13e08     A7 FC 61 FC | 	wrlong	result2, fp
13e0c     04 4E 05 F1 | 	add	fp, #4
13e10     A7 16 62 FC | 	wrlong	arg03, fp
13e14                 | ' t1=pop() : arg=converttoint(t1)
13e14                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
13e14     08 4E 85 F1 | 	sub	fp, #8
13e18     2B 16 0E F2 | 	cmp	arg03, #43 wz
13e1c     18 00 90 5D |  if_ne	jmp	#LR__1601
13e20     A7 12 02 FB | 	rdlong	arg01, fp
13e24     6C AE BF FD | 	call	#_convertstring
13e28     A7 FA 61 FC | 	wrlong	result1, fp
13e2c     08 4E 05 F1 | 	add	fp, #8
13e30     A7 3E 68 FC | 	wrlong	#31, fp
13e34     08 4E 85 F1 | 	sub	fp, #8
13e38                 | LR__1601
13e38                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
13e38     08 4E 05 F1 | 	add	fp, #8
13e3c     A7 16 02 FB | 	rdlong	arg03, fp
13e40     08 4E 85 F1 | 	sub	fp, #8
13e44     1F 16 0E F2 | 	cmp	arg03, #31 wz
13e48     3C 00 90 AD |  if_e	jmp	#LR__1602
13e4c     00 12 06 F6 | 	mov	arg01, #0
13e50     5C 06 B1 FD | 	call	#__system___getiolock_0484
13e54     FD 12 02 F6 | 	mov	arg01, result1
13e58     BC AC B0 FD | 	call	#__system___lockmem
13e5c     73 01 00 FF 
13e60     BE 15 06 F6 | 	mov	arg02, ##@LR__5160
13e64     00 12 06 F6 | 	mov	arg01, #0
13e68     00 16 06 F6 | 	mov	arg03, #0
13e6c     B0 B9 B0 FD | 	call	#__system___basic_print_string
13e70     00 12 06 F6 | 	mov	arg01, #0
13e74     38 06 B1 FD | 	call	#__system___getiolock_0484
13e78     FD 00 68 FC | 	wrlong	#0, result1
13e7c     0F 12 06 F6 | 	mov	arg01, #15
13e80     18 68 B0 FD | 	call	#_printerror
13e84     20 00 90 FD | 	jmp	#LR__1603
13e88                 | LR__1602
13e88     A7 12 02 FB | 	rdlong	arg01, fp
13e8c     10 4E 05 F1 | 	add	fp, #16
13e90     A7 14 02 FB | 	rdlong	arg02, fp
13e94     10 4E 85 F1 | 	sub	fp, #16
13e98     C4 CC B0 FD | 	call	#__system__Left_S
13e9c     A7 FA 61 FC | 	wrlong	result1, fp
13ea0     A7 12 02 F6 | 	mov	arg01, fp
13ea4     50 6A BF FD | 	call	#_push
13ea8                 | LR__1603
13ea8     A7 F0 03 F6 | 	mov	ptra, fp
13eac     B2 00 A0 FD | 	call	#popregs_
13eb0                 | _do_left_ret
13eb0     2D 00 64 FD | 	ret
13eb4                 | 
13eb4                 | ' 
13eb4                 | ' sub do_asc
13eb4                 | _do_asc
13eb4     01 4A 05 F6 | 	mov	COUNT_, #1
13eb8     A8 00 A0 FD | 	call	#pushregs_
13ebc     14 F0 07 F1 | 	add	ptra, #20
13ec0     6A 00 00 FF 
13ec4     80 E4 05 F1 | 	add	objptr, ##54400
13ec8     F2 1E 02 FB | 	rdlong	local01, objptr
13ecc     0F 17 02 F6 | 	mov	arg03, local01
13ed0     01 16 66 F0 | 	shl	arg03, #1
13ed4     0F 17 02 F1 | 	add	arg03, local01
13ed8     02 16 66 F0 | 	shl	arg03, #2
13edc     03 00 00 FF 
13ee0     04 E4 85 F1 | 	sub	objptr, ##1540
13ee4     F2 16 02 F1 | 	add	arg03, objptr
13ee8     0B 17 02 FB | 	rdlong	arg03, arg03
13eec     0C 4E 05 F1 | 	add	fp, #12
13ef0     A7 16 62 FC | 	wrlong	arg03, fp
13ef4                 | ' 
13ef4                 | ' numpar=compiledline(lineptr_e).result.uresult
13ef4                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
13ef4     0C 4E 85 F1 | 	sub	fp, #12
13ef8     02 16 16 F2 | 	cmp	arg03, #2 wc
13efc     67 00 00 FF 
13f00     7C E4 85 F1 | 	sub	objptr, ##52860
13f04     0C 4E 05 C1 |  if_b	add	fp, #12
13f08     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
13f0c     0C 4E 85 C1 |  if_b	sub	fp, #12
13f10     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1610
13f14     00 12 06 F6 | 	mov	arg01, #0
13f18     94 05 B1 FD | 	call	#__system___getiolock_0484
13f1c     FD 12 02 F6 | 	mov	arg01, result1
13f20     F4 AB B0 FD | 	call	#__system___lockmem
13f24     73 01 00 FF 
13f28     C6 15 06 F6 | 	mov	arg02, ##@LR__5161
13f2c     00 12 06 F6 | 	mov	arg01, #0
13f30     00 16 06 F6 | 	mov	arg03, #0
13f34     E8 B8 B0 FD | 	call	#__system___basic_print_string
13f38     00 12 06 F6 | 	mov	arg01, #0
13f3c     70 05 B1 FD | 	call	#__system___getiolock_0484
13f40     FD 00 68 FC | 	wrlong	#0, result1
13f44     27 12 06 F6 | 	mov	arg01, #39
13f48     50 67 B0 FD | 	call	#_printerror
13f4c     B0 00 90 FD | 	jmp	#LR__1613
13f50                 | LR__1610
13f50     0C 69 BF FD | 	call	#_pop
13f54     FF 16 02 F6 | 	mov	arg03, result3
13f58     A7 FA 61 FC | 	wrlong	result1, fp
13f5c     04 4E 05 F1 | 	add	fp, #4
13f60     A7 FC 61 FC | 	wrlong	result2, fp
13f64     04 4E 05 F1 | 	add	fp, #4
13f68     A7 16 62 FC | 	wrlong	arg03, fp
13f6c                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
13f6c     08 4E 85 F1 | 	sub	fp, #8
13f70     2B 16 0E F2 | 	cmp	arg03, #43 wz
13f74     18 00 90 5D |  if_ne	jmp	#LR__1611
13f78     A7 12 02 FB | 	rdlong	arg01, fp
13f7c     14 AD BF FD | 	call	#_convertstring
13f80     A7 FA 61 FC | 	wrlong	result1, fp
13f84     08 4E 05 F1 | 	add	fp, #8
13f88     A7 3E 68 FC | 	wrlong	#31, fp
13f8c     08 4E 85 F1 | 	sub	fp, #8
13f90                 | LR__1611
13f90                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
13f90     08 4E 05 F1 | 	add	fp, #8
13f94     A7 16 02 FB | 	rdlong	arg03, fp
13f98     08 4E 85 F1 | 	sub	fp, #8
13f9c     1F 16 0E F2 | 	cmp	arg03, #31 wz
13fa0     3C 00 90 AD |  if_e	jmp	#LR__1612
13fa4     00 12 06 F6 | 	mov	arg01, #0
13fa8     04 05 B1 FD | 	call	#__system___getiolock_0484
13fac     FD 12 02 F6 | 	mov	arg01, result1
13fb0     64 AB B0 FD | 	call	#__system___lockmem
13fb4     73 01 00 FF 
13fb8     CC 15 06 F6 | 	mov	arg02, ##@LR__5162
13fbc     00 12 06 F6 | 	mov	arg01, #0
13fc0     00 16 06 F6 | 	mov	arg03, #0
13fc4     58 B8 B0 FD | 	call	#__system___basic_print_string
13fc8     00 12 06 F6 | 	mov	arg01, #0
13fcc     E0 04 B1 FD | 	call	#__system___getiolock_0484
13fd0     FD 00 68 FC | 	wrlong	#0, result1
13fd4     0F 12 06 F6 | 	mov	arg01, #15
13fd8     C0 66 B0 FD | 	call	#_printerror
13fdc     20 00 90 FD | 	jmp	#LR__1613
13fe0                 | LR__1612
13fe0     A7 1E 02 FB | 	rdlong	local01, fp
13fe4     0F 1F C2 FA | 	rdbyte	local01, local01
13fe8     A7 1E 62 FC | 	wrlong	local01, fp
13fec     08 4E 05 F1 | 	add	fp, #8
13ff0     A7 38 68 FC | 	wrlong	#28, fp
13ff4     08 4E 85 F1 | 	sub	fp, #8
13ff8     A7 12 02 F6 | 	mov	arg01, fp
13ffc     F8 68 BF FD | 	call	#_push
14000                 | LR__1613
14000     A7 F0 03 F6 | 	mov	ptra, fp
14004     B2 00 A0 FD | 	call	#popregs_
14008                 | _do_asc_ret
14008     2D 00 64 FD | 	ret
1400c                 | 
1400c                 | ' 
1400c                 | ' sub do_len
1400c                 | _do_len
1400c     02 4A 05 F6 | 	mov	COUNT_, #2
14010     A8 00 A0 FD | 	call	#pushregs_
14014     14 F0 07 F1 | 	add	ptra, #20
14018     6A 00 00 FF 
1401c     80 E4 05 F1 | 	add	objptr, ##54400
14020     F2 1E 02 FB | 	rdlong	local01, objptr
14024     0F 17 02 F6 | 	mov	arg03, local01
14028     01 16 66 F0 | 	shl	arg03, #1
1402c     0F 17 02 F1 | 	add	arg03, local01
14030     02 16 66 F0 | 	shl	arg03, #2
14034     03 00 00 FF 
14038     04 E4 85 F1 | 	sub	objptr, ##1540
1403c     F2 16 02 F1 | 	add	arg03, objptr
14040     0B 17 02 FB | 	rdlong	arg03, arg03
14044     0C 4E 05 F1 | 	add	fp, #12
14048     A7 16 62 FC | 	wrlong	arg03, fp
1404c                 | ' 
1404c                 | ' numpar=compiledline(lineptr_e).result.uresult
1404c                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
1404c     0C 4E 85 F1 | 	sub	fp, #12
14050     02 16 16 F2 | 	cmp	arg03, #2 wc
14054     67 00 00 FF 
14058     7C E4 85 F1 | 	sub	objptr, ##52860
1405c     0C 4E 05 C1 |  if_b	add	fp, #12
14060     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
14064     0C 4E 85 C1 |  if_b	sub	fp, #12
14068     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1620
1406c     00 12 06 F6 | 	mov	arg01, #0
14070     3C 04 B1 FD | 	call	#__system___getiolock_0484
14074     FD 12 02 F6 | 	mov	arg01, result1
14078     9C AA B0 FD | 	call	#__system___lockmem
1407c     73 01 00 FF 
14080     D2 15 06 F6 | 	mov	arg02, ##@LR__5163
14084     00 12 06 F6 | 	mov	arg01, #0
14088     00 16 06 F6 | 	mov	arg03, #0
1408c     90 B7 B0 FD | 	call	#__system___basic_print_string
14090     00 12 06 F6 | 	mov	arg01, #0
14094     18 04 B1 FD | 	call	#__system___getiolock_0484
14098     FD 00 68 FC | 	wrlong	#0, result1
1409c     27 12 06 F6 | 	mov	arg01, #39
140a0     F8 65 B0 FD | 	call	#_printerror
140a4     C4 00 90 FD | 	jmp	#LR__1625
140a8                 | LR__1620
140a8     B4 67 BF FD | 	call	#_pop
140ac     FF 16 02 F6 | 	mov	arg03, result3
140b0     A7 FA 61 FC | 	wrlong	result1, fp
140b4     04 4E 05 F1 | 	add	fp, #4
140b8     A7 FC 61 FC | 	wrlong	result2, fp
140bc     04 4E 05 F1 | 	add	fp, #4
140c0     A7 16 62 FC | 	wrlong	arg03, fp
140c4                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
140c4     08 4E 85 F1 | 	sub	fp, #8
140c8     2B 16 0E F2 | 	cmp	arg03, #43 wz
140cc     18 00 90 5D |  if_ne	jmp	#LR__1621
140d0     A7 12 02 FB | 	rdlong	arg01, fp
140d4     BC AB BF FD | 	call	#_convertstring
140d8     A7 FA 61 FC | 	wrlong	result1, fp
140dc     08 4E 05 F1 | 	add	fp, #8
140e0     A7 3E 68 FC | 	wrlong	#31, fp
140e4     08 4E 85 F1 | 	sub	fp, #8
140e8                 | LR__1621
140e8                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
140e8     08 4E 05 F1 | 	add	fp, #8
140ec     A7 16 02 FB | 	rdlong	arg03, fp
140f0     08 4E 85 F1 | 	sub	fp, #8
140f4     1F 16 0E F2 | 	cmp	arg03, #31 wz
140f8     3C 00 90 AD |  if_e	jmp	#LR__1622
140fc     00 12 06 F6 | 	mov	arg01, #0
14100     AC 03 B1 FD | 	call	#__system___getiolock_0484
14104     FD 12 02 F6 | 	mov	arg01, result1
14108     0C AA B0 FD | 	call	#__system___lockmem
1410c     73 01 00 FF 
14110     D8 15 06 F6 | 	mov	arg02, ##@LR__5164
14114     00 12 06 F6 | 	mov	arg01, #0
14118     00 16 06 F6 | 	mov	arg03, #0
1411c     00 B7 B0 FD | 	call	#__system___basic_print_string
14120     00 12 06 F6 | 	mov	arg01, #0
14124     88 03 B1 FD | 	call	#__system___getiolock_0484
14128     FD 00 68 FC | 	wrlong	#0, result1
1412c     0F 12 06 F6 | 	mov	arg01, #15
14130     68 65 B0 FD | 	call	#_printerror
14134     34 00 90 FD | 	jmp	#LR__1625
14138                 | LR__1622
14138     A7 12 02 FB | 	rdlong	arg01, fp
1413c     09 21 02 F6 | 	mov	local02, arg01
14140     97 06 48 FB | 	callpa	#(@LR__1624-@LR__1623)>>2,fcache_load_ptr_
14144                 | LR__1623
14144     10 FB C9 FA | 	rdbyte	result1, local02 wz
14148     01 20 06 51 |  if_ne	add	local02, #1
1414c     F4 FF 9F 5D |  if_ne	jmp	#LR__1623
14150                 | LR__1624
14150     09 21 82 F1 | 	sub	local02, arg01
14154     A7 20 62 FC | 	wrlong	local02, fp
14158     08 4E 05 F1 | 	add	fp, #8
1415c     A7 38 68 FC | 	wrlong	#28, fp
14160     08 4E 85 F1 | 	sub	fp, #8
14164     A7 12 02 F6 | 	mov	arg01, fp
14168     8C 67 BF FD | 	call	#_push
1416c                 | LR__1625
1416c     A7 F0 03 F6 | 	mov	ptra, fp
14170     B2 00 A0 FD | 	call	#popregs_
14174                 | _do_len_ret
14174     2D 00 64 FD | 	ret
14178                 | 
14178                 | ' 
14178                 | ' sub do_chr
14178                 | _do_chr
14178     01 4A 05 F6 | 	mov	COUNT_, #1
1417c     A8 00 A0 FD | 	call	#pushregs_
14180     14 F0 07 F1 | 	add	ptra, #20
14184     6A 00 00 FF 
14188     80 E4 05 F1 | 	add	objptr, ##54400
1418c     F2 1E 02 FB | 	rdlong	local01, objptr
14190     0F 17 02 F6 | 	mov	arg03, local01
14194     01 16 66 F0 | 	shl	arg03, #1
14198     0F 17 02 F1 | 	add	arg03, local01
1419c     02 16 66 F0 | 	shl	arg03, #2
141a0     03 00 00 FF 
141a4     04 E4 85 F1 | 	sub	objptr, ##1540
141a8     F2 16 02 F1 | 	add	arg03, objptr
141ac     0B 17 02 FB | 	rdlong	arg03, arg03
141b0     0C 4E 05 F1 | 	add	fp, #12
141b4     A7 16 62 FC | 	wrlong	arg03, fp
141b8                 | ' 
141b8                 | ' numpar=compiledline(lineptr_e).result.uresult
141b8                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
141b8     0C 4E 85 F1 | 	sub	fp, #12
141bc     02 16 16 F2 | 	cmp	arg03, #2 wc
141c0     67 00 00 FF 
141c4     7C E4 85 F1 | 	sub	objptr, ##52860
141c8     0C 4E 05 C1 |  if_b	add	fp, #12
141cc     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
141d0     0C 4E 85 C1 |  if_b	sub	fp, #12
141d4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1630
141d8     00 12 06 F6 | 	mov	arg01, #0
141dc     D0 02 B1 FD | 	call	#__system___getiolock_0484
141e0     FD 12 02 F6 | 	mov	arg01, result1
141e4     30 A9 B0 FD | 	call	#__system___lockmem
141e8     73 01 00 FF 
141ec     DE 15 06 F6 | 	mov	arg02, ##@LR__5165
141f0     00 12 06 F6 | 	mov	arg01, #0
141f4     00 16 06 F6 | 	mov	arg03, #0
141f8     24 B6 B0 FD | 	call	#__system___basic_print_string
141fc     00 12 06 F6 | 	mov	arg01, #0
14200     AC 02 B1 FD | 	call	#__system___getiolock_0484
14204     FD 00 68 FC | 	wrlong	#0, result1
14208     27 12 06 F6 | 	mov	arg01, #39
1420c     8C 64 B0 FD | 	call	#_printerror
14210     54 00 90 FD | 	jmp	#LR__1631
14214                 | LR__1630
14214     48 66 BF FD | 	call	#_pop
14218     FF 1E 02 F6 | 	mov	local01, result3
1421c     A7 FA 61 FC | 	wrlong	result1, fp
14220     04 4E 05 F1 | 	add	fp, #4
14224     A7 FC 61 FC | 	wrlong	result2, fp
14228     04 4E 05 F1 | 	add	fp, #4
1422c     A7 1E 62 FC | 	wrlong	local01, fp
14230     08 4E 85 F1 | 	sub	fp, #8
14234     A7 12 02 F6 | 	mov	arg01, fp
14238     7C F2 BF FD | 	call	#_converttoint
1423c     10 4E 05 F1 | 	add	fp, #16
14240     A7 FA 61 FC | 	wrlong	result1, fp
14244     FD 12 02 F6 | 	mov	arg01, result1
14248     10 4E 85 F1 | 	sub	fp, #16
1424c     D4 CA B0 FD | 	call	#__system__Chr_S
14250     A7 FA 61 FC | 	wrlong	result1, fp
14254     08 4E 05 F1 | 	add	fp, #8
14258     A7 3E 68 FC | 	wrlong	#31, fp
1425c     08 4E 85 F1 | 	sub	fp, #8
14260     A7 12 02 F6 | 	mov	arg01, fp
14264     90 66 BF FD | 	call	#_push
14268                 | LR__1631
14268     A7 F0 03 F6 | 	mov	ptra, fp
1426c     B2 00 A0 FD | 	call	#popregs_
14270                 | _do_chr_ret
14270     2D 00 64 FD | 	ret
14274                 | 
14274                 | ' 
14274                 | ' sub do_val
14274                 | _do_val
14274     03 4A 05 F6 | 	mov	COUNT_, #3
14278     A8 00 A0 FD | 	call	#pushregs_
1427c     20 F0 07 F1 | 	add	ptra, #32
14280     6A 00 00 FF 
14284     80 E4 05 F1 | 	add	objptr, ##54400
14288     F2 16 02 FB | 	rdlong	arg03, objptr
1428c     0B 1F 02 F6 | 	mov	local01, arg03
14290     01 1E 66 F0 | 	shl	local01, #1
14294     0B 1F 02 F1 | 	add	local01, arg03
14298     02 1E 66 F0 | 	shl	local01, #2
1429c     03 00 00 FF 
142a0     04 E4 85 F1 | 	sub	objptr, ##1540
142a4     F2 1E 02 F1 | 	add	local01, objptr
142a8     0F 17 02 FB | 	rdlong	arg03, local01
142ac     0C 4E 05 F1 | 	add	fp, #12
142b0     A7 16 62 FC | 	wrlong	arg03, fp
142b4                 | ' 
142b4                 | ' numpar=compiledline(lineptr_e).result.uresult
142b4                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
142b4     0C 4E 85 F1 | 	sub	fp, #12
142b8     02 16 16 F2 | 	cmp	arg03, #2 wc
142bc     67 00 00 FF 
142c0     7C E4 85 F1 | 	sub	objptr, ##52860
142c4     0C 4E 05 C1 |  if_b	add	fp, #12
142c8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
142cc     0C 4E 85 C1 |  if_b	sub	fp, #12
142d0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1640
142d4     00 12 06 F6 | 	mov	arg01, #0
142d8     D4 01 B1 FD | 	call	#__system___getiolock_0484
142dc     FD 12 02 F6 | 	mov	arg01, result1
142e0     34 A8 B0 FD | 	call	#__system___lockmem
142e4     73 01 00 FF 
142e8     E5 15 06 F6 | 	mov	arg02, ##@LR__5166
142ec     00 12 06 F6 | 	mov	arg01, #0
142f0     00 16 06 F6 | 	mov	arg03, #0
142f4     28 B5 B0 FD | 	call	#__system___basic_print_string
142f8     00 12 06 F6 | 	mov	arg01, #0
142fc     B0 01 B1 FD | 	call	#__system___getiolock_0484
14300     FD 00 68 FC | 	wrlong	#0, result1
14304     27 12 06 F6 | 	mov	arg01, #39
14308     90 63 B0 FD | 	call	#_printerror
1430c     5C 02 90 FD | 	jmp	#LR__1653
14310                 | LR__1640
14310     4C 65 BF FD | 	call	#_pop
14314     FF 16 02 F6 | 	mov	arg03, result3
14318     A7 FA 61 FC | 	wrlong	result1, fp
1431c     04 4E 05 F1 | 	add	fp, #4
14320     A7 FC 61 FC | 	wrlong	result2, fp
14324     04 4E 05 F1 | 	add	fp, #4
14328     A7 16 62 FC | 	wrlong	arg03, fp
1432c                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1432c     08 4E 85 F1 | 	sub	fp, #8
14330     2B 16 0E F2 | 	cmp	arg03, #43 wz
14334     18 00 90 5D |  if_ne	jmp	#LR__1641
14338     A7 12 02 FB | 	rdlong	arg01, fp
1433c     54 A9 BF FD | 	call	#_convertstring
14340     A7 FA 61 FC | 	wrlong	result1, fp
14344     08 4E 05 F1 | 	add	fp, #8
14348     A7 3E 68 FC | 	wrlong	#31, fp
1434c     08 4E 85 F1 | 	sub	fp, #8
14350                 | LR__1641
14350                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
14350     08 4E 05 F1 | 	add	fp, #8
14354     A7 16 02 FB | 	rdlong	arg03, fp
14358     08 4E 85 F1 | 	sub	fp, #8
1435c     1F 16 0E F2 | 	cmp	arg03, #31 wz
14360     3C 00 90 AD |  if_e	jmp	#LR__1642
14364     00 12 06 F6 | 	mov	arg01, #0
14368     44 01 B1 FD | 	call	#__system___getiolock_0484
1436c     FD 12 02 F6 | 	mov	arg01, result1
14370     A4 A7 B0 FD | 	call	#__system___lockmem
14374     73 01 00 FF 
14378     EB 15 06 F6 | 	mov	arg02, ##@LR__5167
1437c     00 12 06 F6 | 	mov	arg01, #0
14380     00 16 06 F6 | 	mov	arg03, #0
14384     98 B4 B0 FD | 	call	#__system___basic_print_string
14388     00 12 06 F6 | 	mov	arg01, #0
1438c     20 01 B1 FD | 	call	#__system___getiolock_0484
14390     FD 00 68 FC | 	wrlong	#0, result1
14394     0F 12 06 F6 | 	mov	arg01, #15
14398     00 63 B0 FD | 	call	#_printerror
1439c     CC 01 90 FD | 	jmp	#LR__1653
143a0                 | LR__1642
143a0                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
143a0     A7 12 02 FB | 	rdlong	arg01, fp
143a4     01 14 06 F6 | 	mov	arg02, #1
143a8     B4 C7 B0 FD | 	call	#__system__Left_S
143ac     FD 12 02 F6 | 	mov	arg01, result1
143b0     73 01 00 FF 
143b4     F1 15 06 F6 | 	mov	arg02, ##@LR__5168
143b8     84 A7 B0 FD | 	call	#__system___string_cmp
143bc     00 FA 0D F2 | 	cmp	result1, #0 wz
143c0     48 00 90 5D |  if_ne	jmp	#LR__1645
143c4     73 01 00 FF 
143c8     F3 1F 06 F6 | 	mov	local01, ##@LR__5169
143cc     A7 16 02 FB | 	rdlong	arg03, fp
143d0     0B 13 02 F6 | 	mov	arg01, arg03
143d4     09 21 02 F6 | 	mov	local02, arg01
143d8     97 06 48 FB | 	callpa	#(@LR__1644-@LR__1643)>>2,fcache_load_ptr_
143dc                 | LR__1643
143dc     10 FB C9 FA | 	rdbyte	result1, local02 wz
143e0     01 20 06 51 |  if_ne	add	local02, #1
143e4     F4 FF 9F 5D |  if_ne	jmp	#LR__1643
143e8                 | LR__1644
143e8     09 21 82 F1 | 	sub	local02, arg01
143ec     10 15 02 F6 | 	mov	arg02, local02
143f0     01 14 86 F1 | 	sub	arg02, #1
143f4     0B 13 02 F6 | 	mov	arg01, arg03
143f8     EC C7 B0 FD | 	call	#__system__Right_S
143fc     FD 14 02 F6 | 	mov	arg02, result1
14400     0F 13 02 F6 | 	mov	arg01, local01
14404     6C A7 B0 FD | 	call	#__system___string_concat
14408     A7 FA 61 FC | 	wrlong	result1, fp
1440c                 | LR__1645
1440c                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1440c     A7 12 02 FB | 	rdlong	arg01, fp
14410     01 14 06 F6 | 	mov	arg02, #1
14414     48 C7 B0 FD | 	call	#__system__Left_S
14418     FD 12 02 F6 | 	mov	arg01, result1
1441c     73 01 00 FF 
14420     F6 15 06 F6 | 	mov	arg02, ##@LR__5170
14424     18 A7 B0 FD | 	call	#__system___string_cmp
14428     00 FA 0D F2 | 	cmp	result1, #0 wz
1442c     48 00 90 5D |  if_ne	jmp	#LR__1648
14430     73 01 00 FF 
14434     F8 1F 06 F6 | 	mov	local01, ##@LR__5171
14438     A7 16 02 FB | 	rdlong	arg03, fp
1443c     0B 13 02 F6 | 	mov	arg01, arg03
14440     09 21 02 F6 | 	mov	local02, arg01
14444     97 06 48 FB | 	callpa	#(@LR__1647-@LR__1646)>>2,fcache_load_ptr_
14448                 | LR__1646
14448     10 FB C9 FA | 	rdbyte	result1, local02 wz
1444c     01 20 06 51 |  if_ne	add	local02, #1
14450     F4 FF 9F 5D |  if_ne	jmp	#LR__1646
14454                 | LR__1647
14454     09 21 82 F1 | 	sub	local02, arg01
14458     10 15 02 F6 | 	mov	arg02, local02
1445c     01 14 86 F1 | 	sub	arg02, #1
14460     0B 13 02 F6 | 	mov	arg01, arg03
14464     80 C7 B0 FD | 	call	#__system__Right_S
14468     FD 14 02 F6 | 	mov	arg02, result1
1446c     0F 13 02 F6 | 	mov	arg01, local01
14470     00 A7 B0 FD | 	call	#__system___string_concat
14474     A7 FA 61 FC | 	wrlong	result1, fp
14478                 | LR__1648
14478     A7 12 02 FB | 	rdlong	arg01, fp
1447c     00 DA B0 FD | 	call	#__system____builtin_atof
14480     1C 4E 05 F1 | 	add	fp, #28
14484     A7 FA 61 FC | 	wrlong	result1, fp
14488     1C 4E 85 F1 | 	sub	fp, #28
1448c     A7 12 02 FB | 	rdlong	arg01, fp
14490     00 14 06 F6 | 	mov	arg02, #0
14494     78 D8 B0 FD | 	call	#__system____builtin_atoi
14498     18 4E 05 F1 | 	add	fp, #24
1449c     A7 FA 61 FC | 	wrlong	result1, fp
144a0                 | ' fval=val(t1.result.sresult)
144a0                 | ' ival=val%(t1.result.sresult)
144a0                 | ' if fval=ival then
144a0     04 4E 05 F1 | 	add	fp, #4
144a4     A7 1E 02 FB | 	rdlong	local01, fp
144a8     1C 4E 85 F1 | 	sub	fp, #28
144ac     FD 12 52 F6 | 	abs	arg01, result1 wc
144b0     1F 22 C6 C9 |  if_b	decod	local03, #31
144b4     00 22 06 36 |  if_ae	mov	local03, #0
144b8     D8 CD B0 FD | 	call	#__system___float_fromuns
144bc     11 FB 61 F5 | 	xor	result1, local03
144c0     FD 14 02 F6 | 	mov	arg02, result1
144c4     0F 13 02 F6 | 	mov	arg01, local01
144c8     01 16 06 F6 | 	mov	arg03, #1
144cc     FC D5 B0 FD | 	call	#__system___float_cmp
144d0     00 FA 0D F2 | 	cmp	result1, #0 wz
144d4     20 00 90 5D |  if_ne	jmp	#LR__1649
144d8     18 4E 05 F1 | 	add	fp, #24
144dc     A7 1E 02 FB | 	rdlong	local01, fp
144e0     18 4E 85 F1 | 	sub	fp, #24
144e4     A7 1E 62 FC | 	wrlong	local01, fp
144e8     08 4E 05 F1 | 	add	fp, #8
144ec     A7 38 68 FC | 	wrlong	#28, fp
144f0     08 4E 85 F1 | 	sub	fp, #8
144f4     6C 00 90 FD | 	jmp	#LR__1652
144f8                 | LR__1649
144f8                 | '   if fval=0 andalso ival<>0 then
144f8     1C 4E 05 F1 | 	add	fp, #28
144fc     A7 12 02 FB | 	rdlong	arg01, fp
14500     1C 4E 85 F1 | 	sub	fp, #28
14504     00 14 06 F6 | 	mov	arg02, #0
14508     01 16 06 F6 | 	mov	arg03, #1
1450c     BC D5 B0 FD | 	call	#__system___float_cmp
14510     00 FA 0D F2 | 	cmp	result1, #0 wz
14514     30 00 90 5D |  if_ne	jmp	#LR__1650
14518     18 4E 05 F1 | 	add	fp, #24
1451c     A7 1E 0A FB | 	rdlong	local01, fp wz
14520     18 4E 85 F1 | 	sub	fp, #24
14524     20 00 90 AD |  if_e	jmp	#LR__1650
14528     18 4E 05 F1 | 	add	fp, #24
1452c     A7 1E 02 FB | 	rdlong	local01, fp
14530     18 4E 85 F1 | 	sub	fp, #24
14534     A7 1E 62 FC | 	wrlong	local01, fp
14538     08 4E 05 F1 | 	add	fp, #8
1453c     A7 38 68 FC | 	wrlong	#28, fp
14540     08 4E 85 F1 | 	sub	fp, #8
14544     1C 00 90 FD | 	jmp	#LR__1651
14548                 | LR__1650
14548     1C 4E 05 F1 | 	add	fp, #28
1454c     A7 1E 02 FB | 	rdlong	local01, fp
14550     1C 4E 85 F1 | 	sub	fp, #28
14554     A7 1E 62 FC | 	wrlong	local01, fp
14558     08 4E 05 F1 | 	add	fp, #8
1455c     A7 3C 68 FC | 	wrlong	#30, fp
14560     08 4E 85 F1 | 	sub	fp, #8
14564                 | LR__1651
14564                 | LR__1652
14564     A7 12 02 F6 | 	mov	arg01, fp
14568     8C 63 BF FD | 	call	#_push
1456c                 | LR__1653
1456c     A7 F0 03 F6 | 	mov	ptra, fp
14570     B2 00 A0 FD | 	call	#popregs_
14574                 | _do_val_ret
14574     2D 00 64 FD | 	ret
14578                 | 
14578                 | ' 
14578                 | ' 
14578                 | ' sub do_hex
14578                 | _do_hex
14578     01 4A 05 F6 | 	mov	COUNT_, #1
1457c     A8 00 A0 FD | 	call	#pushregs_
14580     18 F0 07 F1 | 	add	ptra, #24
14584     6A 00 00 FF 
14588     80 E4 05 F1 | 	add	objptr, ##54400
1458c     F2 1E 02 FB | 	rdlong	local01, objptr
14590     0F 17 02 F6 | 	mov	arg03, local01
14594     01 16 66 F0 | 	shl	arg03, #1
14598     0F 17 02 F1 | 	add	arg03, local01
1459c     02 16 66 F0 | 	shl	arg03, #2
145a0     03 00 00 FF 
145a4     04 E4 85 F1 | 	sub	objptr, ##1540
145a8     F2 16 02 F1 | 	add	arg03, objptr
145ac     0B 17 02 FB | 	rdlong	arg03, arg03
145b0     0C 4E 05 F1 | 	add	fp, #12
145b4     A7 16 62 FC | 	wrlong	arg03, fp
145b8                 | ' 
145b8                 | ' numpar=compiledline(lineptr_e).result.uresult
145b8                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
145b8     0C 4E 85 F1 | 	sub	fp, #12
145bc     03 16 16 F2 | 	cmp	arg03, #3 wc
145c0     67 00 00 FF 
145c4     7C E4 85 F1 | 	sub	objptr, ##52860
145c8     0C 4E 05 C1 |  if_b	add	fp, #12
145cc     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
145d0     0C 4E 85 C1 |  if_b	sub	fp, #12
145d4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1660
145d8     00 12 06 F6 | 	mov	arg01, #0
145dc     D0 FE B0 FD | 	call	#__system___getiolock_0484
145e0     FD 12 02 F6 | 	mov	arg01, result1
145e4     30 A5 B0 FD | 	call	#__system___lockmem
145e8     73 01 00 FF 
145ec     FB 15 06 F6 | 	mov	arg02, ##@LR__5172
145f0     00 12 06 F6 | 	mov	arg01, #0
145f4     00 16 06 F6 | 	mov	arg03, #0
145f8     24 B2 B0 FD | 	call	#__system___basic_print_string
145fc     00 12 06 F6 | 	mov	arg01, #0
14600     AC FE B0 FD | 	call	#__system___getiolock_0484
14604     FD 00 68 FC | 	wrlong	#0, result1
14608     27 12 06 F6 | 	mov	arg01, #39
1460c     8C 60 B0 FD | 	call	#_printerror
14610     B8 00 90 FD | 	jmp	#LR__1663
14614                 | LR__1660
14614                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
14614     0C 4E 05 F1 | 	add	fp, #12
14618     A7 1E 02 FB | 	rdlong	local01, fp
1461c     0C 4E 85 F1 | 	sub	fp, #12
14620     02 1E 0E F2 | 	cmp	local01, #2 wz
14624     38 00 90 5D |  if_ne	jmp	#LR__1661
14628     34 62 BF FD | 	call	#_pop
1462c     FF 1E 02 F6 | 	mov	local01, result3
14630     A7 FA 61 FC | 	wrlong	result1, fp
14634     04 4E 05 F1 | 	add	fp, #4
14638     A7 FC 61 FC | 	wrlong	result2, fp
1463c     04 4E 05 F1 | 	add	fp, #4
14640     A7 1E 62 FC | 	wrlong	local01, fp
14644     08 4E 85 F1 | 	sub	fp, #8
14648     A7 12 02 F6 | 	mov	arg01, fp
1464c     68 EE BF FD | 	call	#_converttoint
14650     14 4E 05 F1 | 	add	fp, #20
14654     A7 FA 61 FC | 	wrlong	result1, fp
14658     14 4E 85 F1 | 	sub	fp, #20
1465c     0C 00 90 FD | 	jmp	#LR__1662
14660                 | LR__1661
14660     14 4E 05 F1 | 	add	fp, #20
14664     A7 10 68 FC | 	wrlong	#8, fp
14668     14 4E 85 F1 | 	sub	fp, #20
1466c                 | LR__1662
1466c     F0 61 BF FD | 	call	#_pop
14670     FF 1E 02 F6 | 	mov	local01, result3
14674     A7 FA 61 FC | 	wrlong	result1, fp
14678     04 4E 05 F1 | 	add	fp, #4
1467c     A7 FC 61 FC | 	wrlong	result2, fp
14680     04 4E 05 F1 | 	add	fp, #4
14684     A7 1E 62 FC | 	wrlong	local01, fp
14688     08 4E 85 F1 | 	sub	fp, #8
1468c     A7 12 02 F6 | 	mov	arg01, fp
14690     24 EE BF FD | 	call	#_converttoint
14694     10 4E 05 F1 | 	add	fp, #16
14698     A7 FA 61 FC | 	wrlong	result1, fp
1469c     FD 12 02 F6 | 	mov	arg01, result1
146a0     04 4E 05 F1 | 	add	fp, #4
146a4     A7 14 02 FB | 	rdlong	arg02, fp
146a8     14 4E 85 F1 | 	sub	fp, #20
146ac     10 16 06 F6 | 	mov	arg03, #16
146b0     00 C7 B0 FD | 	call	#__system__Number_S
146b4     A7 FA 61 FC | 	wrlong	result1, fp
146b8     08 4E 05 F1 | 	add	fp, #8
146bc     A7 3E 68 FC | 	wrlong	#31, fp
146c0     08 4E 85 F1 | 	sub	fp, #8
146c4     A7 12 02 F6 | 	mov	arg01, fp
146c8     2C 62 BF FD | 	call	#_push
146cc                 | LR__1663
146cc     A7 F0 03 F6 | 	mov	ptra, fp
146d0     B2 00 A0 FD | 	call	#popregs_
146d4                 | _do_hex_ret
146d4     2D 00 64 FD | 	ret
146d8                 | 
146d8                 | ' 
146d8                 | ' sub do_bin
146d8                 | _do_bin
146d8     01 4A 05 F6 | 	mov	COUNT_, #1
146dc     A8 00 A0 FD | 	call	#pushregs_
146e0     18 F0 07 F1 | 	add	ptra, #24
146e4     6A 00 00 FF 
146e8     80 E4 05 F1 | 	add	objptr, ##54400
146ec     F2 1E 02 FB | 	rdlong	local01, objptr
146f0     0F 17 02 F6 | 	mov	arg03, local01
146f4     01 16 66 F0 | 	shl	arg03, #1
146f8     0F 17 02 F1 | 	add	arg03, local01
146fc     02 16 66 F0 | 	shl	arg03, #2
14700     03 00 00 FF 
14704     04 E4 85 F1 | 	sub	objptr, ##1540
14708     F2 16 02 F1 | 	add	arg03, objptr
1470c     0B 17 02 FB | 	rdlong	arg03, arg03
14710     0C 4E 05 F1 | 	add	fp, #12
14714     A7 16 62 FC | 	wrlong	arg03, fp
14718                 | ' 
14718                 | ' numpar=compiledline(lineptr_e).result.uresult
14718                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
14718     0C 4E 85 F1 | 	sub	fp, #12
1471c     03 16 16 F2 | 	cmp	arg03, #3 wc
14720     67 00 00 FF 
14724     7C E4 85 F1 | 	sub	objptr, ##52860
14728     0C 4E 05 C1 |  if_b	add	fp, #12
1472c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
14730     0C 4E 85 C1 |  if_b	sub	fp, #12
14734     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1670
14738     00 12 06 F6 | 	mov	arg01, #0
1473c     70 FD B0 FD | 	call	#__system___getiolock_0484
14740     FD 12 02 F6 | 	mov	arg01, result1
14744     D0 A3 B0 FD | 	call	#__system___lockmem
14748     74 01 00 FF 
1474c     02 14 06 F6 | 	mov	arg02, ##@LR__5173
14750     00 12 06 F6 | 	mov	arg01, #0
14754     00 16 06 F6 | 	mov	arg03, #0
14758     C4 B0 B0 FD | 	call	#__system___basic_print_string
1475c     00 12 06 F6 | 	mov	arg01, #0
14760     4C FD B0 FD | 	call	#__system___getiolock_0484
14764     FD 00 68 FC | 	wrlong	#0, result1
14768     27 12 06 F6 | 	mov	arg01, #39
1476c     2C 5F B0 FD | 	call	#_printerror
14770     B8 00 90 FD | 	jmp	#LR__1673
14774                 | LR__1670
14774                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
14774     0C 4E 05 F1 | 	add	fp, #12
14778     A7 1E 02 FB | 	rdlong	local01, fp
1477c     0C 4E 85 F1 | 	sub	fp, #12
14780     02 1E 0E F2 | 	cmp	local01, #2 wz
14784     38 00 90 5D |  if_ne	jmp	#LR__1671
14788     D4 60 BF FD | 	call	#_pop
1478c     FF 1E 02 F6 | 	mov	local01, result3
14790     A7 FA 61 FC | 	wrlong	result1, fp
14794     04 4E 05 F1 | 	add	fp, #4
14798     A7 FC 61 FC | 	wrlong	result2, fp
1479c     04 4E 05 F1 | 	add	fp, #4
147a0     A7 1E 62 FC | 	wrlong	local01, fp
147a4     08 4E 85 F1 | 	sub	fp, #8
147a8     A7 12 02 F6 | 	mov	arg01, fp
147ac     08 ED BF FD | 	call	#_converttoint
147b0     14 4E 05 F1 | 	add	fp, #20
147b4     A7 FA 61 FC | 	wrlong	result1, fp
147b8     14 4E 85 F1 | 	sub	fp, #20
147bc     0C 00 90 FD | 	jmp	#LR__1672
147c0                 | LR__1671
147c0     14 4E 05 F1 | 	add	fp, #20
147c4     A7 00 68 FC | 	wrlong	#0, fp
147c8     14 4E 85 F1 | 	sub	fp, #20
147cc                 | LR__1672
147cc     90 60 BF FD | 	call	#_pop
147d0     FF 1E 02 F6 | 	mov	local01, result3
147d4     A7 FA 61 FC | 	wrlong	result1, fp
147d8     04 4E 05 F1 | 	add	fp, #4
147dc     A7 FC 61 FC | 	wrlong	result2, fp
147e0     04 4E 05 F1 | 	add	fp, #4
147e4     A7 1E 62 FC | 	wrlong	local01, fp
147e8     08 4E 85 F1 | 	sub	fp, #8
147ec     A7 12 02 F6 | 	mov	arg01, fp
147f0     C4 EC BF FD | 	call	#_converttoint
147f4     10 4E 05 F1 | 	add	fp, #16
147f8     A7 FA 61 FC | 	wrlong	result1, fp
147fc     FD 12 02 F6 | 	mov	arg01, result1
14800     04 4E 05 F1 | 	add	fp, #4
14804     A7 14 02 FB | 	rdlong	arg02, fp
14808     14 4E 85 F1 | 	sub	fp, #20
1480c     02 16 06 F6 | 	mov	arg03, #2
14810     A0 C5 B0 FD | 	call	#__system__Number_S
14814     A7 FA 61 FC | 	wrlong	result1, fp
14818     08 4E 05 F1 | 	add	fp, #8
1481c     A7 3E 68 FC | 	wrlong	#31, fp
14820     08 4E 85 F1 | 	sub	fp, #8
14824     A7 12 02 F6 | 	mov	arg01, fp
14828     CC 60 BF FD | 	call	#_push
1482c                 | LR__1673
1482c     A7 F0 03 F6 | 	mov	ptra, fp
14830     B2 00 A0 FD | 	call	#popregs_
14834                 | _do_bin_ret
14834     2D 00 64 FD | 	ret
14838                 | 
14838                 | ' 
14838                 | ' sub do_cos
14838                 | _do_cos
14838     01 4A 05 F6 | 	mov	COUNT_, #1
1483c     A8 00 A0 FD | 	call	#pushregs_
14840     10 F0 07 F1 | 	add	ptra, #16
14844     6A 00 00 FF 
14848     80 E4 05 F1 | 	add	objptr, ##54400
1484c     F2 1E 02 FB | 	rdlong	local01, objptr
14850     0F 17 02 F6 | 	mov	arg03, local01
14854     01 16 66 F0 | 	shl	arg03, #1
14858     0F 17 02 F1 | 	add	arg03, local01
1485c     02 16 66 F0 | 	shl	arg03, #2
14860     03 00 00 FF 
14864     04 E4 85 F1 | 	sub	objptr, ##1540
14868     F2 16 02 F1 | 	add	arg03, objptr
1486c     0B 17 02 FB | 	rdlong	arg03, arg03
14870     0C 4E 05 F1 | 	add	fp, #12
14874     A7 16 62 FC | 	wrlong	arg03, fp
14878                 | ' 
14878                 | ' numpar=compiledline(lineptr_e).result.uresult
14878                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
14878     0C 4E 85 F1 | 	sub	fp, #12
1487c     02 16 16 F2 | 	cmp	arg03, #2 wc
14880     67 00 00 FF 
14884     7C E4 85 F1 | 	sub	objptr, ##52860
14888     0C 4E 05 C1 |  if_b	add	fp, #12
1488c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
14890     0C 4E 85 C1 |  if_b	sub	fp, #12
14894     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1680
14898     00 12 06 F6 | 	mov	arg01, #0
1489c     10 FC B0 FD | 	call	#__system___getiolock_0484
148a0     FD 12 02 F6 | 	mov	arg01, result1
148a4     70 A2 B0 FD | 	call	#__system___lockmem
148a8     74 01 00 FF 
148ac     09 14 06 F6 | 	mov	arg02, ##@LR__5174
148b0     00 12 06 F6 | 	mov	arg01, #0
148b4     00 16 06 F6 | 	mov	arg03, #0
148b8     64 AF B0 FD | 	call	#__system___basic_print_string
148bc     00 12 06 F6 | 	mov	arg01, #0
148c0     EC FB B0 FD | 	call	#__system___getiolock_0484
148c4     FD 00 68 FC | 	wrlong	#0, result1
148c8     27 12 06 F6 | 	mov	arg01, #39
148cc     CC 5D B0 FD | 	call	#_printerror
148d0     78 00 90 FD | 	jmp	#LR__1681
148d4                 | LR__1680
148d4     88 5F BF FD | 	call	#_pop
148d8     A7 FA 61 FC | 	wrlong	result1, fp
148dc     04 4E 05 F1 | 	add	fp, #4
148e0     A7 FC 61 FC | 	wrlong	result2, fp
148e4     04 4E 05 F1 | 	add	fp, #4
148e8     A7 FE 61 FC | 	wrlong	result3, fp
148ec     08 4E 85 F1 | 	sub	fp, #8
148f0     79 00 00 FF 
148f4     98 E5 05 F1 | 	add	objptr, ##62360
148f8     F2 1E 02 FB | 	rdlong	local01, objptr
148fc     79 00 00 FF 
14900     98 E5 85 F1 | 	sub	objptr, ##62360
14904     A7 12 02 F6 | 	mov	arg01, fp
14908     58 EC BF FD | 	call	#_converttofloat
1490c     FD 14 02 F6 | 	mov	arg02, result1
14910     0F 13 02 F6 | 	mov	arg01, local01
14914     80 CD B0 FD | 	call	#__system___float_mul
14918     FD 14 02 F6 | 	mov	arg02, result1
1491c     87 E4 1F FF 
14920     DB 13 06 F6 | 	mov	arg01, ##1070141403
14924     1F 14 E6 F4 | 	bitnot	arg02, #31
14928     9C C9 B0 FD | 	call	#__system___float_add
1492c     FD 12 02 F6 | 	mov	arg01, result1
14930     A0 D6 B0 FD | 	call	#__system____builtin_sinf
14934     A7 FA 61 FC | 	wrlong	result1, fp
14938     08 4E 05 F1 | 	add	fp, #8
1493c     A7 3C 68 FC | 	wrlong	#30, fp
14940     08 4E 85 F1 | 	sub	fp, #8
14944     A7 12 02 F6 | 	mov	arg01, fp
14948     AC 5F BF FD | 	call	#_push
1494c                 | LR__1681
1494c     A7 F0 03 F6 | 	mov	ptra, fp
14950     B2 00 A0 FD | 	call	#popregs_
14954                 | _do_cos_ret
14954     2D 00 64 FD | 	ret
14958                 | 
14958                 | ' 
14958                 | ' sub do_tan
14958                 | _do_tan
14958     01 4A 05 F6 | 	mov	COUNT_, #1
1495c     A8 00 A0 FD | 	call	#pushregs_
14960     10 F0 07 F1 | 	add	ptra, #16
14964     6A 00 00 FF 
14968     80 E4 05 F1 | 	add	objptr, ##54400
1496c     F2 1E 02 FB | 	rdlong	local01, objptr
14970     0F 17 02 F6 | 	mov	arg03, local01
14974     01 16 66 F0 | 	shl	arg03, #1
14978     0F 17 02 F1 | 	add	arg03, local01
1497c     02 16 66 F0 | 	shl	arg03, #2
14980     03 00 00 FF 
14984     04 E4 85 F1 | 	sub	objptr, ##1540
14988     F2 16 02 F1 | 	add	arg03, objptr
1498c     0B 17 02 FB | 	rdlong	arg03, arg03
14990     0C 4E 05 F1 | 	add	fp, #12
14994     A7 16 62 FC | 	wrlong	arg03, fp
14998                 | ' 
14998                 | ' numpar=compiledline(lineptr_e).result.uresult
14998                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
14998     0C 4E 85 F1 | 	sub	fp, #12
1499c     02 16 16 F2 | 	cmp	arg03, #2 wc
149a0     67 00 00 FF 
149a4     7C E4 85 F1 | 	sub	objptr, ##52860
149a8     0C 4E 05 C1 |  if_b	add	fp, #12
149ac     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
149b0     0C 4E 85 C1 |  if_b	sub	fp, #12
149b4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1690
149b8     00 12 06 F6 | 	mov	arg01, #0
149bc     F0 FA B0 FD | 	call	#__system___getiolock_0484
149c0     FD 12 02 F6 | 	mov	arg01, result1
149c4     50 A1 B0 FD | 	call	#__system___lockmem
149c8     74 01 00 FF 
149cc     0F 14 06 F6 | 	mov	arg02, ##@LR__5175
149d0     00 12 06 F6 | 	mov	arg01, #0
149d4     00 16 06 F6 | 	mov	arg03, #0
149d8     44 AE B0 FD | 	call	#__system___basic_print_string
149dc     00 12 06 F6 | 	mov	arg01, #0
149e0     CC FA B0 FD | 	call	#__system___getiolock_0484
149e4     FD 00 68 FC | 	wrlong	#0, result1
149e8     27 12 06 F6 | 	mov	arg01, #39
149ec     AC 5C B0 FD | 	call	#_printerror
149f0     64 00 90 FD | 	jmp	#LR__1691
149f4                 | LR__1690
149f4     68 5E BF FD | 	call	#_pop
149f8     A7 FA 61 FC | 	wrlong	result1, fp
149fc     04 4E 05 F1 | 	add	fp, #4
14a00     A7 FC 61 FC | 	wrlong	result2, fp
14a04     04 4E 05 F1 | 	add	fp, #4
14a08     A7 FE 61 FC | 	wrlong	result3, fp
14a0c     08 4E 85 F1 | 	sub	fp, #8
14a10     79 00 00 FF 
14a14     98 E5 05 F1 | 	add	objptr, ##62360
14a18     F2 1E 02 FB | 	rdlong	local01, objptr
14a1c     79 00 00 FF 
14a20     98 E5 85 F1 | 	sub	objptr, ##62360
14a24     A7 12 02 F6 | 	mov	arg01, fp
14a28     38 EB BF FD | 	call	#_converttofloat
14a2c     FD 14 02 F6 | 	mov	arg02, result1
14a30     0F 13 02 F6 | 	mov	arg01, local01
14a34     60 CC B0 FD | 	call	#__system___float_mul
14a38     FD 12 02 F6 | 	mov	arg01, result1
14a3c     E0 D6 B0 FD | 	call	#__system____builtin_tanf
14a40     A7 FA 61 FC | 	wrlong	result1, fp
14a44     08 4E 05 F1 | 	add	fp, #8
14a48     A7 3C 68 FC | 	wrlong	#30, fp
14a4c     08 4E 85 F1 | 	sub	fp, #8
14a50     A7 12 02 F6 | 	mov	arg01, fp
14a54     A0 5E BF FD | 	call	#_push
14a58                 | LR__1691
14a58     A7 F0 03 F6 | 	mov	ptra, fp
14a5c     B2 00 A0 FD | 	call	#popregs_
14a60                 | _do_tan_ret
14a60     2D 00 64 FD | 	ret
14a64                 | 
14a64                 | ' 
14a64                 | ' sub do_asin
14a64                 | _do_asin
14a64     01 4A 05 F6 | 	mov	COUNT_, #1
14a68     A8 00 A0 FD | 	call	#pushregs_
14a6c     10 F0 07 F1 | 	add	ptra, #16
14a70     6A 00 00 FF 
14a74     80 E4 05 F1 | 	add	objptr, ##54400
14a78     F2 1E 02 FB | 	rdlong	local01, objptr
14a7c     0F 17 02 F6 | 	mov	arg03, local01
14a80     01 16 66 F0 | 	shl	arg03, #1
14a84     0F 17 02 F1 | 	add	arg03, local01
14a88     02 16 66 F0 | 	shl	arg03, #2
14a8c     03 00 00 FF 
14a90     04 E4 85 F1 | 	sub	objptr, ##1540
14a94     F2 16 02 F1 | 	add	arg03, objptr
14a98     0B 17 02 FB | 	rdlong	arg03, arg03
14a9c     0C 4E 05 F1 | 	add	fp, #12
14aa0     A7 16 62 FC | 	wrlong	arg03, fp
14aa4                 | ' 
14aa4                 | ' numpar=compiledline(lineptr_e).result.uresult
14aa4                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
14aa4     0C 4E 85 F1 | 	sub	fp, #12
14aa8     02 16 16 F2 | 	cmp	arg03, #2 wc
14aac     67 00 00 FF 
14ab0     7C E4 85 F1 | 	sub	objptr, ##52860
14ab4     0C 4E 05 C1 |  if_b	add	fp, #12
14ab8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
14abc     0C 4E 85 C1 |  if_b	sub	fp, #12
14ac0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1700
14ac4     00 12 06 F6 | 	mov	arg01, #0
14ac8     E4 F9 B0 FD | 	call	#__system___getiolock_0484
14acc     FD 12 02 F6 | 	mov	arg01, result1
14ad0     44 A0 B0 FD | 	call	#__system___lockmem
14ad4     74 01 00 FF 
14ad8     15 14 06 F6 | 	mov	arg02, ##@LR__5176
14adc     00 12 06 F6 | 	mov	arg01, #0
14ae0     00 16 06 F6 | 	mov	arg03, #0
14ae4     38 AD B0 FD | 	call	#__system___basic_print_string
14ae8     00 12 06 F6 | 	mov	arg01, #0
14aec     C0 F9 B0 FD | 	call	#__system___getiolock_0484
14af0     FD 00 68 FC | 	wrlong	#0, result1
14af4     27 12 06 F6 | 	mov	arg01, #39
14af8     A0 5B B0 FD | 	call	#_printerror
14afc     64 00 90 FD | 	jmp	#LR__1701
14b00                 | LR__1700
14b00     5C 5D BF FD | 	call	#_pop
14b04     FF 1E 02 F6 | 	mov	local01, result3
14b08     A7 FA 61 FC | 	wrlong	result1, fp
14b0c     04 4E 05 F1 | 	add	fp, #4
14b10     A7 FC 61 FC | 	wrlong	result2, fp
14b14     04 4E 05 F1 | 	add	fp, #4
14b18     A7 1E 62 FC | 	wrlong	local01, fp
14b1c     08 4E 85 F1 | 	sub	fp, #8
14b20     A7 12 02 F6 | 	mov	arg01, fp
14b24     3C EA BF FD | 	call	#_converttofloat
14b28     FD 12 02 F6 | 	mov	arg01, result1
14b2c     38 D6 B0 FD | 	call	#__system____builtin_asinf
14b30     FD 12 02 F6 | 	mov	arg01, result1
14b34     79 00 00 FF 
14b38     9C E5 05 F1 | 	add	objptr, ##62364
14b3c     F2 14 02 FB | 	rdlong	arg02, objptr
14b40     79 00 00 FF 
14b44     9C E5 85 F1 | 	sub	objptr, ##62364
14b48     4C CB B0 FD | 	call	#__system___float_mul
14b4c     A7 FA 61 FC | 	wrlong	result1, fp
14b50     08 4E 05 F1 | 	add	fp, #8
14b54     A7 3C 68 FC | 	wrlong	#30, fp
14b58     08 4E 85 F1 | 	sub	fp, #8
14b5c     A7 12 02 F6 | 	mov	arg01, fp
14b60     94 5D BF FD | 	call	#_push
14b64                 | LR__1701
14b64     A7 F0 03 F6 | 	mov	ptra, fp
14b68     B2 00 A0 FD | 	call	#popregs_
14b6c                 | _do_asin_ret
14b6c     2D 00 64 FD | 	ret
14b70                 | 
14b70                 | ' 
14b70                 | ' sub do_acos
14b70                 | _do_acos
14b70     01 4A 05 F6 | 	mov	COUNT_, #1
14b74     A8 00 A0 FD | 	call	#pushregs_
14b78     10 F0 07 F1 | 	add	ptra, #16
14b7c     6A 00 00 FF 
14b80     80 E4 05 F1 | 	add	objptr, ##54400
14b84     F2 1E 02 FB | 	rdlong	local01, objptr
14b88     0F 17 02 F6 | 	mov	arg03, local01
14b8c     01 16 66 F0 | 	shl	arg03, #1
14b90     0F 17 02 F1 | 	add	arg03, local01
14b94     02 16 66 F0 | 	shl	arg03, #2
14b98     03 00 00 FF 
14b9c     04 E4 85 F1 | 	sub	objptr, ##1540
14ba0     F2 16 02 F1 | 	add	arg03, objptr
14ba4     0B 17 02 FB | 	rdlong	arg03, arg03
14ba8     0C 4E 05 F1 | 	add	fp, #12
14bac     A7 16 62 FC | 	wrlong	arg03, fp
14bb0                 | ' 
14bb0                 | ' numpar=compiledline(lineptr_e).result.uresult
14bb0                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
14bb0     0C 4E 85 F1 | 	sub	fp, #12
14bb4     02 16 16 F2 | 	cmp	arg03, #2 wc
14bb8     67 00 00 FF 
14bbc     7C E4 85 F1 | 	sub	objptr, ##52860
14bc0     0C 4E 05 C1 |  if_b	add	fp, #12
14bc4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
14bc8     0C 4E 85 C1 |  if_b	sub	fp, #12
14bcc     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1710
14bd0     00 12 06 F6 | 	mov	arg01, #0
14bd4     D8 F8 B0 FD | 	call	#__system___getiolock_0484
14bd8     FD 12 02 F6 | 	mov	arg01, result1
14bdc     38 9F B0 FD | 	call	#__system___lockmem
14be0     74 01 00 FF 
14be4     1C 14 06 F6 | 	mov	arg02, ##@LR__5177
14be8     00 12 06 F6 | 	mov	arg01, #0
14bec     00 16 06 F6 | 	mov	arg03, #0
14bf0     2C AC B0 FD | 	call	#__system___basic_print_string
14bf4     00 12 06 F6 | 	mov	arg01, #0
14bf8     B4 F8 B0 FD | 	call	#__system___getiolock_0484
14bfc     FD 00 68 FC | 	wrlong	#0, result1
14c00     27 12 06 F6 | 	mov	arg01, #39
14c04     94 5A B0 FD | 	call	#_printerror
14c08     64 00 90 FD | 	jmp	#LR__1711
14c0c                 | LR__1710
14c0c     50 5C BF FD | 	call	#_pop
14c10     FF 1E 02 F6 | 	mov	local01, result3
14c14     A7 FA 61 FC | 	wrlong	result1, fp
14c18     04 4E 05 F1 | 	add	fp, #4
14c1c     A7 FC 61 FC | 	wrlong	result2, fp
14c20     04 4E 05 F1 | 	add	fp, #4
14c24     A7 1E 62 FC | 	wrlong	local01, fp
14c28     08 4E 85 F1 | 	sub	fp, #8
14c2c     A7 12 02 F6 | 	mov	arg01, fp
14c30     30 E9 BF FD | 	call	#_converttofloat
14c34     FD 12 02 F6 | 	mov	arg01, result1
14c38     78 D5 B0 FD | 	call	#__system____builtin_acosf
14c3c     FD 12 02 F6 | 	mov	arg01, result1
14c40     79 00 00 FF 
14c44     9C E5 05 F1 | 	add	objptr, ##62364
14c48     F2 14 02 FB | 	rdlong	arg02, objptr
14c4c     79 00 00 FF 
14c50     9C E5 85 F1 | 	sub	objptr, ##62364
14c54     40 CA B0 FD | 	call	#__system___float_mul
14c58     A7 FA 61 FC | 	wrlong	result1, fp
14c5c     08 4E 05 F1 | 	add	fp, #8
14c60     A7 3C 68 FC | 	wrlong	#30, fp
14c64     08 4E 85 F1 | 	sub	fp, #8
14c68     A7 12 02 F6 | 	mov	arg01, fp
14c6c     88 5C BF FD | 	call	#_push
14c70                 | LR__1711
14c70     A7 F0 03 F6 | 	mov	ptra, fp
14c74     B2 00 A0 FD | 	call	#popregs_
14c78                 | _do_acos_ret
14c78     2D 00 64 FD | 	ret
14c7c                 | 
14c7c                 | ' 
14c7c                 | ' sub do_atn
14c7c                 | _do_atn
14c7c     01 4A 05 F6 | 	mov	COUNT_, #1
14c80     A8 00 A0 FD | 	call	#pushregs_
14c84     10 F0 07 F1 | 	add	ptra, #16
14c88     6A 00 00 FF 
14c8c     80 E4 05 F1 | 	add	objptr, ##54400
14c90     F2 1E 02 FB | 	rdlong	local01, objptr
14c94     0F 17 02 F6 | 	mov	arg03, local01
14c98     01 16 66 F0 | 	shl	arg03, #1
14c9c     0F 17 02 F1 | 	add	arg03, local01
14ca0     02 16 66 F0 | 	shl	arg03, #2
14ca4     03 00 00 FF 
14ca8     04 E4 85 F1 | 	sub	objptr, ##1540
14cac     F2 16 02 F1 | 	add	arg03, objptr
14cb0     0B 17 02 FB | 	rdlong	arg03, arg03
14cb4     0C 4E 05 F1 | 	add	fp, #12
14cb8     A7 16 62 FC | 	wrlong	arg03, fp
14cbc                 | ' 
14cbc                 | ' numpar=compiledline(lineptr_e).result.uresult
14cbc                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
14cbc     0C 4E 85 F1 | 	sub	fp, #12
14cc0     02 16 16 F2 | 	cmp	arg03, #2 wc
14cc4     67 00 00 FF 
14cc8     7C E4 85 F1 | 	sub	objptr, ##52860
14ccc     0C 4E 05 C1 |  if_b	add	fp, #12
14cd0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
14cd4     0C 4E 85 C1 |  if_b	sub	fp, #12
14cd8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1720
14cdc     00 12 06 F6 | 	mov	arg01, #0
14ce0     CC F7 B0 FD | 	call	#__system___getiolock_0484
14ce4     FD 12 02 F6 | 	mov	arg01, result1
14ce8     2C 9E B0 FD | 	call	#__system___lockmem
14cec     74 01 00 FF 
14cf0     23 14 06 F6 | 	mov	arg02, ##@LR__5178
14cf4     00 12 06 F6 | 	mov	arg01, #0
14cf8     00 16 06 F6 | 	mov	arg03, #0
14cfc     20 AB B0 FD | 	call	#__system___basic_print_string
14d00     00 12 06 F6 | 	mov	arg01, #0
14d04     A8 F7 B0 FD | 	call	#__system___getiolock_0484
14d08     FD 00 68 FC | 	wrlong	#0, result1
14d0c     27 12 06 F6 | 	mov	arg01, #39
14d10     88 59 B0 FD | 	call	#_printerror
14d14     6C 00 90 FD | 	jmp	#LR__1721
14d18                 | LR__1720
14d18     44 5B BF FD | 	call	#_pop
14d1c     FF 1E 02 F6 | 	mov	local01, result3
14d20     A7 FA 61 FC | 	wrlong	result1, fp
14d24     04 4E 05 F1 | 	add	fp, #4
14d28     A7 FC 61 FC | 	wrlong	result2, fp
14d2c     04 4E 05 F1 | 	add	fp, #4
14d30     A7 1E 62 FC | 	wrlong	local01, fp
14d34     08 4E 85 F1 | 	sub	fp, #8
14d38     A7 12 02 F6 | 	mov	arg01, fp
14d3c     24 E8 BF FD | 	call	#_converttofloat
14d40     FD 12 02 F6 | 	mov	arg01, result1
14d44     00 C0 1F FF 
14d48     00 14 06 F6 | 	mov	arg02, ##1065353216
14d4c     B0 D4 B0 FD | 	call	#__system____builtin_atan2f
14d50     FD 12 02 F6 | 	mov	arg01, result1
14d54     79 00 00 FF 
14d58     9C E5 05 F1 | 	add	objptr, ##62364
14d5c     F2 14 02 FB | 	rdlong	arg02, objptr
14d60     79 00 00 FF 
14d64     9C E5 85 F1 | 	sub	objptr, ##62364
14d68     2C C9 B0 FD | 	call	#__system___float_mul
14d6c     A7 FA 61 FC | 	wrlong	result1, fp
14d70     08 4E 05 F1 | 	add	fp, #8
14d74     A7 3C 68 FC | 	wrlong	#30, fp
14d78     08 4E 85 F1 | 	sub	fp, #8
14d7c     A7 12 02 F6 | 	mov	arg01, fp
14d80     74 5B BF FD | 	call	#_push
14d84                 | LR__1721
14d84     A7 F0 03 F6 | 	mov	ptra, fp
14d88     B2 00 A0 FD | 	call	#popregs_
14d8c                 | _do_atn_ret
14d8c     2D 00 64 FD | 	ret
14d90                 | 
14d90                 | ' 
14d90                 | ' sub do_sqr
14d90                 | _do_sqr
14d90     01 4A 05 F6 | 	mov	COUNT_, #1
14d94     A8 00 A0 FD | 	call	#pushregs_
14d98     10 F0 07 F1 | 	add	ptra, #16
14d9c     6A 00 00 FF 
14da0     80 E4 05 F1 | 	add	objptr, ##54400
14da4     F2 1E 02 FB | 	rdlong	local01, objptr
14da8     0F 17 02 F6 | 	mov	arg03, local01
14dac     01 16 66 F0 | 	shl	arg03, #1
14db0     0F 17 02 F1 | 	add	arg03, local01
14db4     02 16 66 F0 | 	shl	arg03, #2
14db8     03 00 00 FF 
14dbc     04 E4 85 F1 | 	sub	objptr, ##1540
14dc0     F2 16 02 F1 | 	add	arg03, objptr
14dc4     0B 17 02 FB | 	rdlong	arg03, arg03
14dc8     0C 4E 05 F1 | 	add	fp, #12
14dcc     A7 16 62 FC | 	wrlong	arg03, fp
14dd0                 | ' 
14dd0                 | ' numpar=compiledline(lineptr_e).result.uresult
14dd0                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
14dd0     0C 4E 85 F1 | 	sub	fp, #12
14dd4     02 16 16 F2 | 	cmp	arg03, #2 wc
14dd8     67 00 00 FF 
14ddc     7C E4 85 F1 | 	sub	objptr, ##52860
14de0     0C 4E 05 C1 |  if_b	add	fp, #12
14de4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
14de8     0C 4E 85 C1 |  if_b	sub	fp, #12
14dec     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1730
14df0     00 12 06 F6 | 	mov	arg01, #0
14df4     B8 F6 B0 FD | 	call	#__system___getiolock_0484
14df8     FD 12 02 F6 | 	mov	arg01, result1
14dfc     18 9D B0 FD | 	call	#__system___lockmem
14e00     74 01 00 FF 
14e04     29 14 06 F6 | 	mov	arg02, ##@LR__5179
14e08     00 12 06 F6 | 	mov	arg01, #0
14e0c     00 16 06 F6 | 	mov	arg03, #0
14e10     0C AA B0 FD | 	call	#__system___basic_print_string
14e14     00 12 06 F6 | 	mov	arg01, #0
14e18     94 F6 B0 FD | 	call	#__system___getiolock_0484
14e1c     FD 00 68 FC | 	wrlong	#0, result1
14e20     27 12 06 F6 | 	mov	arg01, #39
14e24     74 58 B0 FD | 	call	#_printerror
14e28     48 00 90 FD | 	jmp	#LR__1731
14e2c                 | LR__1730
14e2c     30 5A BF FD | 	call	#_pop
14e30     FF 1E 02 F6 | 	mov	local01, result3
14e34     A7 FA 61 FC | 	wrlong	result1, fp
14e38     04 4E 05 F1 | 	add	fp, #4
14e3c     A7 FC 61 FC | 	wrlong	result2, fp
14e40     04 4E 05 F1 | 	add	fp, #4
14e44     A7 1E 62 FC | 	wrlong	local01, fp
14e48     08 4E 85 F1 | 	sub	fp, #8
14e4c     A7 12 02 F6 | 	mov	arg01, fp
14e50     10 E7 BF FD | 	call	#_converttofloat
14e54     FD 12 02 F6 | 	mov	arg01, result1
14e58     64 C7 B0 FD | 	call	#__system___float_sqrt
14e5c     A7 FA 61 FC | 	wrlong	result1, fp
14e60     08 4E 05 F1 | 	add	fp, #8
14e64     A7 3C 68 FC | 	wrlong	#30, fp
14e68     08 4E 85 F1 | 	sub	fp, #8
14e6c     A7 12 02 F6 | 	mov	arg01, fp
14e70     84 5A BF FD | 	call	#_push
14e74                 | LR__1731
14e74     A7 F0 03 F6 | 	mov	ptra, fp
14e78     B2 00 A0 FD | 	call	#popregs_
14e7c                 | _do_sqr_ret
14e7c     2D 00 64 FD | 	ret
14e80                 | 
14e80                 | ' 
14e80                 | ' sub do_stick
14e80                 | _do_stick
14e80     01 4A 05 F6 | 	mov	COUNT_, #1
14e84     A8 00 A0 FD | 	call	#pushregs_
14e88     10 F0 07 F1 | 	add	ptra, #16
14e8c     6A 00 00 FF 
14e90     80 E4 05 F1 | 	add	objptr, ##54400
14e94     F2 1E 02 FB | 	rdlong	local01, objptr
14e98     0F 17 02 F6 | 	mov	arg03, local01
14e9c     01 16 66 F0 | 	shl	arg03, #1
14ea0     0F 17 02 F1 | 	add	arg03, local01
14ea4     02 16 66 F0 | 	shl	arg03, #2
14ea8     03 00 00 FF 
14eac     04 E4 85 F1 | 	sub	objptr, ##1540
14eb0     F2 16 02 F1 | 	add	arg03, objptr
14eb4     0B 17 02 FB | 	rdlong	arg03, arg03
14eb8     0C 4E 05 F1 | 	add	fp, #12
14ebc     A7 16 62 FC | 	wrlong	arg03, fp
14ec0                 | ' 
14ec0                 | ' numpar=compiledline(lineptr_e).result.uresult
14ec0                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
14ec0     0C 4E 85 F1 | 	sub	fp, #12
14ec4     02 16 16 F2 | 	cmp	arg03, #2 wc
14ec8     67 00 00 FF 
14ecc     7C E4 85 F1 | 	sub	objptr, ##52860
14ed0     3C 00 90 CD |  if_b	jmp	#LR__1740
14ed4     00 12 06 F6 | 	mov	arg01, #0
14ed8     D4 F5 B0 FD | 	call	#__system___getiolock_0484
14edc     FD 12 02 F6 | 	mov	arg01, result1
14ee0     34 9C B0 FD | 	call	#__system___lockmem
14ee4     74 01 00 FF 
14ee8     2F 14 06 F6 | 	mov	arg02, ##@LR__5180
14eec     00 12 06 F6 | 	mov	arg01, #0
14ef0     00 16 06 F6 | 	mov	arg03, #0
14ef4     28 A9 B0 FD | 	call	#__system___basic_print_string
14ef8     00 12 06 F6 | 	mov	arg01, #0
14efc     B0 F5 B0 FD | 	call	#__system___getiolock_0484
14f00     FD 00 68 FC | 	wrlong	#0, result1
14f04     27 12 06 F6 | 	mov	arg01, #39
14f08     90 57 B0 FD | 	call	#_printerror
14f0c     E8 00 90 FD | 	jmp	#LR__1744
14f10                 | LR__1740
14f10                 | ' 
14f10                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
14f10     0C 4E 05 F1 | 	add	fp, #12
14f14     A7 FE 09 FB | 	rdlong	result3, fp wz
14f18     0C 4E 85 F1 | 	sub	fp, #12
14f1c     30 00 90 5D |  if_ne	jmp	#LR__1741
14f20     79 00 00 FF 
14f24     0C E5 05 F1 | 	add	objptr, ##62220
14f28     F2 1E 02 FB | 	rdlong	local01, objptr
14f2c     79 00 00 FF 
14f30     0C E5 85 F1 | 	sub	objptr, ##62220
14f34     A7 1E 62 FC | 	wrlong	local01, fp
14f38     08 4E 05 F1 | 	add	fp, #8
14f3c     A7 3A 68 FC | 	wrlong	#29, fp
14f40     08 4E 85 F1 | 	sub	fp, #8
14f44     A7 12 02 F6 | 	mov	arg01, fp
14f48     AC 59 BF FD | 	call	#_push
14f4c     A8 00 90 FD | 	jmp	#LR__1744
14f50                 | LR__1741
14f50     0C 59 BF FD | 	call	#_pop
14f54     A7 FA 61 FC | 	wrlong	result1, fp
14f58     04 4E 05 F1 | 	add	fp, #4
14f5c     A7 FC 61 FC | 	wrlong	result2, fp
14f60     04 4E 05 F1 | 	add	fp, #4
14f64     A7 FE 61 FC | 	wrlong	result3, fp
14f68                 | ' 
14f68                 | ' t1=pop()
14f68                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
14f68     08 4E 85 F1 | 	sub	fp, #8
14f6c     1C FE 0D F2 | 	cmp	result3, #28 wz
14f70     08 4E 05 51 |  if_ne	add	fp, #8
14f74     A7 1E 02 5B |  if_ne	rdlong	local01, fp
14f78     08 4E 85 51 |  if_ne	sub	fp, #8
14f7c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
14f80     6C 00 90 5D |  if_ne	jmp	#LR__1743
14f84     A7 1E 02 FB | 	rdlong	local01, fp
14f88     7A 00 00 FF 
14f8c     04 E4 05 F1 | 	add	objptr, ##62468
14f90     F2 1E 62 FC | 	wrlong	local01, objptr
14f94                 | '   q=t1.result.uresult
14f94                 | '   if q<7 then 
14f94     7A 00 00 FF 
14f98     04 E4 85 F1 | 	sub	objptr, ##62468
14f9c     07 1E 56 F2 | 	cmps	local01, #7 wc
14fa0     40 00 90 3D |  if_ae	jmp	#LR__1742
14fa4     7A 00 00 FF 
14fa8     04 E4 05 F1 | 	add	objptr, ##62468
14fac     F2 1E 02 FB | 	rdlong	local01, objptr
14fb0     02 1E 66 F0 | 	shl	local01, #2
14fb4     F8 E4 85 F1 | 	sub	objptr, #248
14fb8     F2 1E 02 F1 | 	add	local01, objptr
14fbc     0F 1F 02 FB | 	rdlong	local01, local01
14fc0     A7 1E 62 FC | 	wrlong	local01, fp
14fc4     08 4E 05 F1 | 	add	fp, #8
14fc8     A7 3A 68 FC | 	wrlong	#29, fp
14fcc     08 4E 85 F1 | 	sub	fp, #8
14fd0     A7 12 02 F6 | 	mov	arg01, fp
14fd4     79 00 00 FF 
14fd8     0C E5 85 F1 | 	sub	objptr, ##62220
14fdc     18 59 BF FD | 	call	#_push
14fe0                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
14fe0     14 00 90 FD | 	jmp	#LR__1744
14fe4                 | LR__1742
14fe4     29 12 06 F6 | 	mov	arg01, #41
14fe8     B0 56 B0 FD | 	call	#_printerror
14fec                 | '      printerror(41) : return
14fec     08 00 90 FD | 	jmp	#LR__1744
14ff0                 | LR__1743
14ff0     29 12 06 F6 | 	mov	arg01, #41
14ff4     A4 56 B0 FD | 	call	#_printerror
14ff8                 | LR__1744
14ff8     A7 F0 03 F6 | 	mov	ptra, fp
14ffc     B2 00 A0 FD | 	call	#popregs_
15000                 | _do_stick_ret
15000     2D 00 64 FD | 	ret
15004                 | 
15004                 | ' 
15004                 | ' sub do_strig
15004                 | _do_strig
15004     01 4A 05 F6 | 	mov	COUNT_, #1
15008     A8 00 A0 FD | 	call	#pushregs_
1500c     10 F0 07 F1 | 	add	ptra, #16
15010     6A 00 00 FF 
15014     80 E4 05 F1 | 	add	objptr, ##54400
15018     F2 1E 02 FB | 	rdlong	local01, objptr
1501c     0F 17 02 F6 | 	mov	arg03, local01
15020     01 16 66 F0 | 	shl	arg03, #1
15024     0F 17 02 F1 | 	add	arg03, local01
15028     02 16 66 F0 | 	shl	arg03, #2
1502c     03 00 00 FF 
15030     04 E4 85 F1 | 	sub	objptr, ##1540
15034     F2 16 02 F1 | 	add	arg03, objptr
15038     0B 17 02 FB | 	rdlong	arg03, arg03
1503c     0C 4E 05 F1 | 	add	fp, #12
15040     A7 16 62 FC | 	wrlong	arg03, fp
15044                 | ' 
15044                 | ' numpar=compiledline(lineptr_e).result.uresult
15044                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
15044     0C 4E 85 F1 | 	sub	fp, #12
15048     02 16 16 F2 | 	cmp	arg03, #2 wc
1504c     67 00 00 FF 
15050     7C E4 85 F1 | 	sub	objptr, ##52860
15054     3C 00 90 CD |  if_b	jmp	#LR__1750
15058     00 12 06 F6 | 	mov	arg01, #0
1505c     50 F4 B0 FD | 	call	#__system___getiolock_0484
15060     FD 12 02 F6 | 	mov	arg01, result1
15064     B0 9A B0 FD | 	call	#__system___lockmem
15068     74 01 00 FF 
1506c     37 14 06 F6 | 	mov	arg02, ##@LR__5181
15070     00 12 06 F6 | 	mov	arg01, #0
15074     00 16 06 F6 | 	mov	arg03, #0
15078     A4 A7 B0 FD | 	call	#__system___basic_print_string
1507c     00 12 06 F6 | 	mov	arg01, #0
15080     2C F4 B0 FD | 	call	#__system___getiolock_0484
15084     FD 00 68 FC | 	wrlong	#0, result1
15088     27 12 06 F6 | 	mov	arg01, #39
1508c     0C 56 B0 FD | 	call	#_printerror
15090     E8 00 90 FD | 	jmp	#LR__1754
15094                 | LR__1750
15094                 | ' 
15094                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
15094     0C 4E 05 F1 | 	add	fp, #12
15098     A7 FE 09 FB | 	rdlong	result3, fp wz
1509c     0C 4E 85 F1 | 	sub	fp, #12
150a0     30 00 90 5D |  if_ne	jmp	#LR__1751
150a4     79 00 00 FF 
150a8     28 E5 05 F1 | 	add	objptr, ##62248
150ac     F2 1E 02 FB | 	rdlong	local01, objptr
150b0     79 00 00 FF 
150b4     28 E5 85 F1 | 	sub	objptr, ##62248
150b8     A7 1E 62 FC | 	wrlong	local01, fp
150bc     08 4E 05 F1 | 	add	fp, #8
150c0     A7 3A 68 FC | 	wrlong	#29, fp
150c4     08 4E 85 F1 | 	sub	fp, #8
150c8     A7 12 02 F6 | 	mov	arg01, fp
150cc     28 58 BF FD | 	call	#_push
150d0     A8 00 90 FD | 	jmp	#LR__1754
150d4                 | LR__1751
150d4     88 57 BF FD | 	call	#_pop
150d8     A7 FA 61 FC | 	wrlong	result1, fp
150dc     04 4E 05 F1 | 	add	fp, #4
150e0     A7 FC 61 FC | 	wrlong	result2, fp
150e4     04 4E 05 F1 | 	add	fp, #4
150e8     A7 FE 61 FC | 	wrlong	result3, fp
150ec                 | ' 
150ec                 | ' t1=pop()
150ec                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
150ec     08 4E 85 F1 | 	sub	fp, #8
150f0     1C FE 0D F2 | 	cmp	result3, #28 wz
150f4     08 4E 05 51 |  if_ne	add	fp, #8
150f8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
150fc     08 4E 85 51 |  if_ne	sub	fp, #8
15100     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
15104     6C 00 90 5D |  if_ne	jmp	#LR__1753
15108     A7 1E 02 FB | 	rdlong	local01, fp
1510c     7A 00 00 FF 
15110     04 E4 05 F1 | 	add	objptr, ##62468
15114     F2 1E 62 FC | 	wrlong	local01, objptr
15118                 | '   q=t1.result.uresult
15118                 | '   if q<7 then 
15118     7A 00 00 FF 
1511c     04 E4 85 F1 | 	sub	objptr, ##62468
15120     07 1E 56 F2 | 	cmps	local01, #7 wc
15124     40 00 90 3D |  if_ae	jmp	#LR__1752
15128     7A 00 00 FF 
1512c     04 E4 05 F1 | 	add	objptr, ##62468
15130     F2 1E 02 FB | 	rdlong	local01, objptr
15134     02 1E 66 F0 | 	shl	local01, #2
15138     DC E4 85 F1 | 	sub	objptr, #220
1513c     F2 1E 02 F1 | 	add	local01, objptr
15140     0F 1F 02 FB | 	rdlong	local01, local01
15144     A7 1E 62 FC | 	wrlong	local01, fp
15148     08 4E 05 F1 | 	add	fp, #8
1514c     A7 3A 68 FC | 	wrlong	#29, fp
15150     08 4E 85 F1 | 	sub	fp, #8
15154     A7 12 02 F6 | 	mov	arg01, fp
15158     79 00 00 FF 
1515c     28 E5 85 F1 | 	sub	objptr, ##62248
15160     94 57 BF FD | 	call	#_push
15164                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
15164     14 00 90 FD | 	jmp	#LR__1754
15168                 | LR__1752
15168     29 12 06 F6 | 	mov	arg01, #41
1516c     2C 55 B0 FD | 	call	#_printerror
15170                 | '      printerror(41) : return
15170     08 00 90 FD | 	jmp	#LR__1754
15174                 | LR__1753
15174     29 12 06 F6 | 	mov	arg01, #41
15178     20 55 B0 FD | 	call	#_printerror
1517c                 | LR__1754
1517c     A7 F0 03 F6 | 	mov	ptra, fp
15180     B2 00 A0 FD | 	call	#popregs_
15184                 | _do_strig_ret
15184     2D 00 64 FD | 	ret
15188                 | 
15188                 | ' 
15188                 | ' sub do_getpixel
15188                 | _do_getpixel
15188     00 4A 05 F6 | 	mov	COUNT_, #0
1518c     A8 00 A0 FD | 	call	#pushregs_
15190     24 F0 07 F1 | 	add	ptra, #36
15194     6A 00 00 FF 
15198     80 E4 05 F1 | 	add	objptr, ##54400
1519c     F2 16 02 FB | 	rdlong	arg03, objptr
151a0     0B 15 02 F6 | 	mov	arg02, arg03
151a4     01 14 66 F0 | 	shl	arg02, #1
151a8     0B 15 02 F1 | 	add	arg02, arg03
151ac     02 14 66 F0 | 	shl	arg02, #2
151b0     03 00 00 FF 
151b4     04 E4 85 F1 | 	sub	objptr, ##1540
151b8     F2 14 02 F1 | 	add	arg02, objptr
151bc     0A 17 02 FB | 	rdlong	arg03, arg02
151c0     18 4E 05 F1 | 	add	fp, #24
151c4     A7 16 62 FC | 	wrlong	arg03, fp
151c8                 | ' 
151c8                 | ' numpar=compiledline(lineptr_e).result.uresult
151c8                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
151c8     18 4E 85 F1 | 	sub	fp, #24
151cc     02 16 0E F2 | 	cmp	arg03, #2 wz
151d0     67 00 00 FF 
151d4     7C E4 85 F1 | 	sub	objptr, ##52860
151d8     3C 00 90 AD |  if_e	jmp	#LR__1760
151dc     00 12 06 F6 | 	mov	arg01, #0
151e0     CC F2 B0 FD | 	call	#__system___getiolock_0484
151e4     FD 12 02 F6 | 	mov	arg01, result1
151e8     2C 99 B0 FD | 	call	#__system___lockmem
151ec     74 01 00 FF 
151f0     3F 14 06 F6 | 	mov	arg02, ##@LR__5182
151f4     00 12 06 F6 | 	mov	arg01, #0
151f8     00 16 06 F6 | 	mov	arg03, #0
151fc     20 A6 B0 FD | 	call	#__system___basic_print_string
15200     00 12 06 F6 | 	mov	arg01, #0
15204     A8 F2 B0 FD | 	call	#__system___getiolock_0484
15208     FD 00 68 FC | 	wrlong	#0, result1
1520c     27 12 06 F6 | 	mov	arg01, #39
15210     88 54 B0 FD | 	call	#_printerror
15214     B4 00 90 FD | 	jmp	#LR__1761
15218                 | LR__1760
15218     44 56 BF FD | 	call	#_pop
1521c     FD 16 02 F6 | 	mov	arg03, result1
15220     FE 14 02 F6 | 	mov	arg02, result2
15224     FF 12 02 F6 | 	mov	arg01, result3
15228     0C 4E 05 F1 | 	add	fp, #12
1522c     A7 16 62 FC | 	wrlong	arg03, fp
15230     04 4E 05 F1 | 	add	fp, #4
15234     A7 14 62 FC | 	wrlong	arg02, fp
15238     04 4E 05 F1 | 	add	fp, #4
1523c     A7 12 62 FC | 	wrlong	arg01, fp
15240     14 4E 85 F1 | 	sub	fp, #20
15244     18 56 BF FD | 	call	#_pop
15248     FF 16 02 F6 | 	mov	arg03, result3
1524c     A7 FA 61 FC | 	wrlong	result1, fp
15250     04 4E 05 F1 | 	add	fp, #4
15254     A7 FC 61 FC | 	wrlong	result2, fp
15258     04 4E 05 F1 | 	add	fp, #4
1525c     A7 16 62 FC | 	wrlong	arg03, fp
15260     08 4E 85 F1 | 	sub	fp, #8
15264     A7 12 02 F6 | 	mov	arg01, fp
15268     4C E2 BF FD | 	call	#_converttoint
1526c     1C 4E 05 F1 | 	add	fp, #28
15270     A7 FA 61 FC | 	wrlong	result1, fp
15274     10 4E 85 F1 | 	sub	fp, #16
15278     A7 12 02 F6 | 	mov	arg01, fp
1527c     0C 4E 85 F1 | 	sub	fp, #12
15280     34 E2 BF FD | 	call	#_converttoint
15284     FD 16 02 F6 | 	mov	arg03, result1
15288     20 4E 05 F1 | 	add	fp, #32
1528c     A7 16 62 FC | 	wrlong	arg03, fp
15290     F2 12 02 FB | 	rdlong	arg01, objptr
15294     04 4E 85 F1 | 	sub	fp, #4
15298     A7 FE 01 FB | 	rdlong	result3, fp
1529c     FF 12 02 F1 | 	add	arg01, result3
152a0     1C 4E 85 F1 | 	sub	fp, #28
152a4     0A 16 66 F0 | 	shl	arg03, #10
152a8     0B 13 02 F1 | 	add	arg01, arg03
152ac     28 56 B0 FD | 	call	#_pspeek
152b0     FD FA E1 F8 | 	getbyte	result1, result1, #0
152b4     A7 FA 61 FC | 	wrlong	result1, fp
152b8     08 4E 05 F1 | 	add	fp, #8
152bc     A7 3A 68 FC | 	wrlong	#29, fp
152c0     08 4E 85 F1 | 	sub	fp, #8
152c4     A7 12 02 F6 | 	mov	arg01, fp
152c8     2C 56 BF FD | 	call	#_push
152cc                 | LR__1761
152cc     A7 F0 03 F6 | 	mov	ptra, fp
152d0     B2 00 A0 FD | 	call	#popregs_
152d4                 | _do_getpixel_ret
152d4     2D 00 64 FD | 	ret
152d8                 | 
152d8                 | ' 
152d8                 | ' 
152d8                 | ' 
152d8                 | ' sub do_defsprite
152d8                 | _do_defsprite
152d8     07 4A 05 F6 | 	mov	COUNT_, #7
152dc     A8 00 A0 FD | 	call	#pushregs_
152e0     60 F0 07 F1 | 	add	ptra, #96
152e4     78 55 BF FD | 	call	#_pop
152e8     FD 16 02 F6 | 	mov	arg03, result1
152ec     FE 14 02 F6 | 	mov	arg02, result2
152f0     FF 12 02 F6 | 	mov	arg01, result3
152f4     30 4E 05 F1 | 	add	fp, #48
152f8     A7 16 62 FC | 	wrlong	arg03, fp
152fc     04 4E 05 F1 | 	add	fp, #4
15300     A7 14 62 FC | 	wrlong	arg02, fp
15304     04 4E 05 F1 | 	add	fp, #4
15308     A7 12 62 FC | 	wrlong	arg01, fp
1530c     38 4E 85 F1 | 	sub	fp, #56
15310     4C 55 BF FD | 	call	#_pop
15314     FD 16 02 F6 | 	mov	arg03, result1
15318     FE 14 02 F6 | 	mov	arg02, result2
1531c     FF 12 02 F6 | 	mov	arg01, result3
15320     24 4E 05 F1 | 	add	fp, #36
15324     A7 16 62 FC | 	wrlong	arg03, fp
15328     04 4E 05 F1 | 	add	fp, #4
1532c     A7 14 62 FC | 	wrlong	arg02, fp
15330     04 4E 05 F1 | 	add	fp, #4
15334     A7 12 62 FC | 	wrlong	arg01, fp
15338     2C 4E 85 F1 | 	sub	fp, #44
1533c     20 55 BF FD | 	call	#_pop
15340     FD 16 02 F6 | 	mov	arg03, result1
15344     FE 14 02 F6 | 	mov	arg02, result2
15348     FF 12 02 F6 | 	mov	arg01, result3
1534c     18 4E 05 F1 | 	add	fp, #24
15350     A7 16 62 FC | 	wrlong	arg03, fp
15354     04 4E 05 F1 | 	add	fp, #4
15358     A7 14 62 FC | 	wrlong	arg02, fp
1535c     04 4E 05 F1 | 	add	fp, #4
15360     A7 12 62 FC | 	wrlong	arg01, fp
15364     20 4E 85 F1 | 	sub	fp, #32
15368     F4 54 BF FD | 	call	#_pop
1536c     FD 16 02 F6 | 	mov	arg03, result1
15370     FE 14 02 F6 | 	mov	arg02, result2
15374     FF 12 02 F6 | 	mov	arg01, result3
15378     0C 4E 05 F1 | 	add	fp, #12
1537c     A7 16 62 FC | 	wrlong	arg03, fp
15380     04 4E 05 F1 | 	add	fp, #4
15384     A7 14 62 FC | 	wrlong	arg02, fp
15388     04 4E 05 F1 | 	add	fp, #4
1538c     A7 12 62 FC | 	wrlong	arg01, fp
15390     14 4E 85 F1 | 	sub	fp, #20
15394     C8 54 BF FD | 	call	#_pop
15398     FF 16 02 F6 | 	mov	arg03, result3
1539c     A7 FA 61 FC | 	wrlong	result1, fp
153a0     04 4E 05 F1 | 	add	fp, #4
153a4     A7 FC 61 FC | 	wrlong	result2, fp
153a8     04 4E 05 F1 | 	add	fp, #4
153ac     A7 16 62 FC | 	wrlong	arg03, fp
153b0     08 4E 85 F1 | 	sub	fp, #8
153b4     A7 12 02 F6 | 	mov	arg01, fp
153b8     FC E0 BF FD | 	call	#_converttoint
153bc     3C 4E 05 F1 | 	add	fp, #60
153c0     A7 FA 61 FC | 	wrlong	result1, fp
153c4     30 4E 85 F1 | 	sub	fp, #48
153c8     A7 12 02 F6 | 	mov	arg01, fp
153cc     0C 4E 85 F1 | 	sub	fp, #12
153d0     E4 E0 BF FD | 	call	#_converttoint
153d4     40 4E 05 F1 | 	add	fp, #64
153d8     A7 FA 61 FC | 	wrlong	result1, fp
153dc     28 4E 85 F1 | 	sub	fp, #40
153e0     A7 12 02 F6 | 	mov	arg01, fp
153e4     18 4E 85 F1 | 	sub	fp, #24
153e8     CC E0 BF FD | 	call	#_converttoint
153ec     44 4E 05 F1 | 	add	fp, #68
153f0     A7 FA 61 FC | 	wrlong	result1, fp
153f4     20 4E 85 F1 | 	sub	fp, #32
153f8     A7 12 02 F6 | 	mov	arg01, fp
153fc     24 4E 85 F1 | 	sub	fp, #36
15400     B4 E0 BF FD | 	call	#_converttoint
15404     48 4E 05 F1 | 	add	fp, #72
15408     A7 FA 61 FC | 	wrlong	result1, fp
1540c     18 4E 85 F1 | 	sub	fp, #24
15410     A7 12 02 F6 | 	mov	arg01, fp
15414     30 4E 85 F1 | 	sub	fp, #48
15418     9C E0 BF FD | 	call	#_converttoint
1541c     4C 4E 05 F1 | 	add	fp, #76
15420     A7 FA 61 FC | 	wrlong	result1, fp
15424                 | ' 
15424                 | ' t5=pop()
15424                 | ' t4=pop()
15424                 | ' t3=pop()
15424                 | ' t2=pop()
15424                 | ' t1=pop()
15424                 | ' 
15424                 | ' ' do convert, defsprite is not a racing command
15424                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
15424                 | '  
15424                 | ' ' todo: check parameters for linits
15424                 | ' if sprite(a1)<> nil then delete(sprite(a1))
15424     10 4E 85 F1 | 	sub	fp, #16
15428     A7 16 02 FB | 	rdlong	arg03, fp
1542c     3C 4E 85 F1 | 	sub	fp, #60
15430     02 16 66 F0 | 	shl	arg03, #2
15434     79 00 00 FF 
15438     44 E5 05 F1 | 	add	objptr, ##62276
1543c     F2 16 02 F1 | 	add	arg03, objptr
15440     0B 17 0A FB | 	rdlong	arg03, arg03 wz
15444     79 00 00 FF 
15448     44 E5 85 F1 | 	sub	objptr, ##62276
1544c     2C 00 90 AD |  if_e	jmp	#LR__1770
15450     3C 4E 05 F1 | 	add	fp, #60
15454     A7 16 02 FB | 	rdlong	arg03, fp
15458     3C 4E 85 F1 | 	sub	fp, #60
1545c     02 16 66 F0 | 	shl	arg03, #2
15460     79 00 00 FF 
15464     44 E5 05 F1 | 	add	objptr, ##62276
15468     F2 16 02 F1 | 	add	arg03, objptr
1546c     0B 13 02 FB | 	rdlong	arg01, arg03
15470     79 00 00 FF 
15474     44 E5 85 F1 | 	sub	objptr, ##62276
15478     24 D6 B0 FD | 	call	#__system___gc_free
1547c                 | LR__1770
1547c     3C 4E 05 F1 | 	add	fp, #60
15480     A7 1E 02 FB | 	rdlong	local01, fp
15484     0C 4E 05 F1 | 	add	fp, #12
15488     A7 16 02 FB | 	rdlong	arg03, fp
1548c     04 4E 05 F1 | 	add	fp, #4
15490     A7 14 02 FB | 	rdlong	arg02, fp
15494     0A 17 02 FD | 	qmul	arg03, arg02
15498     02 1E 66 F0 | 	shl	local01, #2
1549c     79 00 00 FF 
154a0     44 E5 05 F1 | 	add	objptr, ##62276
154a4     F2 1E 02 F1 | 	add	local01, objptr
154a8     4C 4E 85 F1 | 	sub	fp, #76
154ac     79 00 00 FF 
154b0     44 E5 85 F1 | 	sub	objptr, ##62276
154b4     18 12 62 FD | 	getqx	arg01
154b8     A8 D4 B0 FD | 	call	#__system___gc_alloc_managed
154bc     0F FB 61 FC | 	wrlong	result1, local01
154c0                 | ' for y=a3 to a3+a5-1
154c0     44 4E 05 F1 | 	add	fp, #68
154c4     A7 20 02 FB | 	rdlong	local02, fp
154c8     0C 4E 05 F1 | 	add	fp, #12
154cc     A7 20 62 FC | 	wrlong	local02, fp
154d0     0C 4E 85 F1 | 	sub	fp, #12
154d4     A7 22 02 FB | 	rdlong	local03, fp
154d8     08 4E 05 F1 | 	add	fp, #8
154dc     A7 24 02 FB | 	rdlong	local04, fp
154e0     4C 4E 85 F1 | 	sub	fp, #76
154e4     12 23 02 F1 | 	add	local03, local04
154e8                 | LR__1771
154e8     50 4E 05 F1 | 	add	fp, #80
154ec     A7 20 02 FB | 	rdlong	local02, fp
154f0     50 4E 85 F1 | 	sub	fp, #80
154f4     11 21 52 F2 | 	cmps	local02, local03 wc
154f8     F4 00 90 3D |  if_ae	jmp	#LR__1774
154fc                 | '   for x=a2 to a4+a2-1
154fc     40 4E 05 F1 | 	add	fp, #64
15500     A7 1E 02 FB | 	rdlong	local01, fp
15504     14 4E 05 F1 | 	add	fp, #20
15508     A7 1E 62 FC | 	wrlong	local01, fp
1550c     0C 4E 85 F1 | 	sub	fp, #12
15510     A7 26 02 FB | 	rdlong	local05, fp
15514     08 4E 85 F1 | 	sub	fp, #8
15518     A7 28 02 FB | 	rdlong	local06, fp
1551c     40 4E 85 F1 | 	sub	fp, #64
15520     14 27 02 F1 | 	add	local05, local06
15524                 | LR__1772
15524     54 4E 05 F1 | 	add	fp, #84
15528     A7 1E 02 FB | 	rdlong	local01, fp
1552c     54 4E 85 F1 | 	sub	fp, #84
15530     13 1F 52 F2 | 	cmps	local01, local05 wc
15534     A0 00 90 3D |  if_ae	jmp	#LR__1773
15538     3C 4E 05 F1 | 	add	fp, #60
1553c     A7 28 02 FB | 	rdlong	local06, fp
15540     18 4E 05 F1 | 	add	fp, #24
15544     A7 24 02 FB | 	rdlong	local04, fp
15548     14 4E 85 F1 | 	sub	fp, #20
1554c     A7 20 02 FB | 	rdlong	local02, fp
15550     10 4E 05 F1 | 	add	fp, #16
15554     A7 1E 02 FB | 	rdlong	local01, fp
15558     0F 17 02 F6 | 	mov	arg03, local01
1555c     0C 4E 85 F1 | 	sub	fp, #12
15560     A7 14 02 FB | 	rdlong	arg02, fp
15564     0A 17 82 F1 | 	sub	arg03, arg02
15568     04 4E 05 F1 | 	add	fp, #4
1556c     A7 14 02 FB | 	rdlong	arg02, fp
15570     0A 17 02 FD | 	qmul	arg03, arg02
15574     02 28 66 F0 | 	shl	local06, #2
15578     79 00 00 FF 
1557c     44 E5 05 F1 | 	add	objptr, ##62276
15580     F2 28 02 F1 | 	add	local06, objptr
15584     14 29 02 FB | 	rdlong	local06, local06
15588     12 2B 02 F6 | 	mov	local07, local04
1558c     10 2B 82 F1 | 	sub	local07, local02
15590     79 00 00 FF 
15594     44 E5 85 F1 | 	sub	objptr, ##62276
15598     F2 12 02 FB | 	rdlong	arg01, objptr
1559c     12 13 02 F1 | 	add	arg01, local04
155a0     48 4E 85 F1 | 	sub	fp, #72
155a4     0A 1E 66 F0 | 	shl	local01, #10
155a8     0F 13 02 F1 | 	add	arg01, local01
155ac     18 24 62 FD | 	getqx	local04
155b0     12 2B 02 F1 | 	add	local07, local04
155b4     14 2B 02 F1 | 	add	local07, local06
155b8     1C 53 B0 FD | 	call	#_pspeek
155bc     15 FB 41 FC | 	wrbyte	result1, local07
155c0     54 4E 05 F1 | 	add	fp, #84
155c4     A7 2A 02 FB | 	rdlong	local07, fp
155c8     01 2A 06 F1 | 	add	local07, #1
155cc     A7 2A 62 FC | 	wrlong	local07, fp
155d0     54 4E 85 F1 | 	sub	fp, #84
155d4     4C FF 9F FD | 	jmp	#LR__1772
155d8                 | LR__1773
155d8     50 4E 05 F1 | 	add	fp, #80
155dc     A7 2A 02 FB | 	rdlong	local07, fp
155e0     01 2A 06 F1 | 	add	local07, #1
155e4     A7 2A 62 FC | 	wrlong	local07, fp
155e8     50 4E 85 F1 | 	sub	fp, #80
155ec     F8 FE 9F FD | 	jmp	#LR__1771
155f0                 | LR__1774
155f0     3C 4E 05 F1 | 	add	fp, #60
155f4     A7 2A 02 FB | 	rdlong	local07, fp
155f8     15 13 02 F6 | 	mov	arg01, local07
155fc     3C 4E 85 F1 | 	sub	fp, #60
15600     02 2A 66 F0 | 	shl	local07, #2
15604     79 00 00 FF 
15608     44 E5 05 F1 | 	add	objptr, ##62276
1560c     F2 2A 02 F1 | 	add	local07, objptr
15610     15 15 02 FB | 	rdlong	arg02, local07
15614     79 00 00 FF 
15618     44 E5 85 F1 | 	sub	objptr, ##62276
1561c     BC 70 B0 FD | 	call	#_hg010b_spin2_setspriteptr
15620     3C 4E 05 F1 | 	add	fp, #60
15624     A7 12 02 FB | 	rdlong	arg01, fp
15628     0C 4E 05 F1 | 	add	fp, #12
1562c     A7 14 02 FB | 	rdlong	arg02, fp
15630     04 4E 05 F1 | 	add	fp, #4
15634     A7 16 02 FB | 	rdlong	arg03, fp
15638     4C 4E 85 F1 | 	sub	fp, #76
1563c     2C 71 B0 FD | 	call	#_hg010b_spin2_setspritesize
15640     A7 F0 03 F6 | 	mov	ptra, fp
15644     B2 00 A0 FD | 	call	#popregs_
15648                 | _do_defsprite_ret
15648     2D 00 64 FD | 	ret
1564c                 | 
1564c                 | ' 
1564c                 | ' sub do_sprite
1564c                 | _do_sprite
1564c     00 4A 05 F6 | 	mov	COUNT_, #0
15650     A8 00 A0 FD | 	call	#pushregs_
15654     30 F0 07 F1 | 	add	ptra, #48
15658     04 52 BF FD | 	call	#_pop
1565c     FD 16 02 F6 | 	mov	arg03, result1
15660     FE 14 02 F6 | 	mov	arg02, result2
15664     FF 12 02 F6 | 	mov	arg01, result3
15668     18 4E 05 F1 | 	add	fp, #24
1566c     A7 16 62 FC | 	wrlong	arg03, fp
15670     04 4E 05 F1 | 	add	fp, #4
15674     A7 14 62 FC | 	wrlong	arg02, fp
15678     04 4E 05 F1 | 	add	fp, #4
1567c     A7 12 62 FC | 	wrlong	arg01, fp
15680     20 4E 85 F1 | 	sub	fp, #32
15684     D8 51 BF FD | 	call	#_pop
15688     FD 16 02 F6 | 	mov	arg03, result1
1568c     FE 14 02 F6 | 	mov	arg02, result2
15690     FF 12 02 F6 | 	mov	arg01, result3
15694     0C 4E 05 F1 | 	add	fp, #12
15698     A7 16 62 FC | 	wrlong	arg03, fp
1569c     04 4E 05 F1 | 	add	fp, #4
156a0     A7 14 62 FC | 	wrlong	arg02, fp
156a4     04 4E 05 F1 | 	add	fp, #4
156a8     A7 12 62 FC | 	wrlong	arg01, fp
156ac     14 4E 85 F1 | 	sub	fp, #20
156b0     AC 51 BF FD | 	call	#_pop
156b4     FF 16 02 F6 | 	mov	arg03, result3
156b8     A7 FA 61 FC | 	wrlong	result1, fp
156bc     04 4E 05 F1 | 	add	fp, #4
156c0     A7 FC 61 FC | 	wrlong	result2, fp
156c4     04 4E 05 F1 | 	add	fp, #4
156c8     A7 16 62 FC | 	wrlong	arg03, fp
156cc     08 4E 85 F1 | 	sub	fp, #8
156d0     A7 12 02 F6 | 	mov	arg01, fp
156d4     E0 DD BF FD | 	call	#_converttoint
156d8     24 4E 05 F1 | 	add	fp, #36
156dc     A7 FA 61 FC | 	wrlong	result1, fp
156e0     18 4E 85 F1 | 	sub	fp, #24
156e4     A7 12 02 F6 | 	mov	arg01, fp
156e8     0C 4E 85 F1 | 	sub	fp, #12
156ec     C8 DD BF FD | 	call	#_converttoint
156f0     28 4E 05 F1 | 	add	fp, #40
156f4     A7 FA 61 FC | 	wrlong	result1, fp
156f8     10 4E 85 F1 | 	sub	fp, #16
156fc     A7 12 02 F6 | 	mov	arg01, fp
15700     18 4E 85 F1 | 	sub	fp, #24
15704     B0 DD BF FD | 	call	#_converttoint
15708     2C 4E 05 F1 | 	add	fp, #44
1570c     A7 FA 61 FC | 	wrlong	result1, fp
15710     08 4E 85 F1 | 	sub	fp, #8
15714     A7 12 02 FB | 	rdlong	arg01, fp
15718     04 4E 05 F1 | 	add	fp, #4
1571c     A7 14 02 FB | 	rdlong	arg02, fp
15720     FD 16 02 F6 | 	mov	arg03, result1
15724     28 4E 85 F1 | 	sub	fp, #40
15728     D8 6F B0 FD | 	call	#_hg010b_spin2_setspritepos
1572c     A7 F0 03 F6 | 	mov	ptra, fp
15730     B2 00 A0 FD | 	call	#popregs_
15734                 | _do_sprite_ret
15734     2D 00 64 FD | 	ret
15738                 | 
15738                 | ' 
15738                 | ' sub do_mousex
15738                 | _do_mousex
15738     00 4A 05 F6 | 	mov	COUNT_, #0
1573c     A8 00 A0 FD | 	call	#pushregs_
15740     0C F0 07 F1 | 	add	ptra, #12
15744     08 4E 05 F1 | 	add	fp, #8
15748     A7 3A 68 FC | 	wrlong	#29, fp
1574c     08 4E 85 F1 | 	sub	fp, #8
15750     79 00 00 FF 
15754     FC E4 05 F1 | 	add	objptr, ##62204
15758     F2 12 02 FB | 	rdlong	arg01, objptr
1575c     79 00 00 FF 
15760     FC E4 85 F1 | 	sub	objptr, ##62204
15764     A7 12 62 FC | 	wrlong	arg01, fp
15768     A7 12 02 F6 | 	mov	arg01, fp
1576c     88 51 BF FD | 	call	#_push
15770     A7 F0 03 F6 | 	mov	ptra, fp
15774     B2 00 A0 FD | 	call	#popregs_
15778                 | _do_mousex_ret
15778     2D 00 64 FD | 	ret
1577c                 | 
1577c                 | ' 
1577c                 | ' sub do_mousey
1577c                 | _do_mousey
1577c     00 4A 05 F6 | 	mov	COUNT_, #0
15780     A8 00 A0 FD | 	call	#pushregs_
15784     0C F0 07 F1 | 	add	ptra, #12
15788     08 4E 05 F1 | 	add	fp, #8
1578c     A7 3A 68 FC | 	wrlong	#29, fp
15790     08 4E 85 F1 | 	sub	fp, #8
15794     79 00 00 FF 
15798     00 E5 05 F1 | 	add	objptr, ##62208
1579c     F2 12 02 FB | 	rdlong	arg01, objptr
157a0     79 00 00 FF 
157a4     00 E5 85 F1 | 	sub	objptr, ##62208
157a8     A7 12 62 FC | 	wrlong	arg01, fp
157ac     A7 12 02 F6 | 	mov	arg01, fp
157b0     44 51 BF FD | 	call	#_push
157b4     A7 F0 03 F6 | 	mov	ptra, fp
157b8     B2 00 A0 FD | 	call	#popregs_
157bc                 | _do_mousey_ret
157bc     2D 00 64 FD | 	ret
157c0                 | 
157c0                 | ' 
157c0                 | ' sub do_mousew
157c0                 | _do_mousew
157c0     00 4A 05 F6 | 	mov	COUNT_, #0
157c4     A8 00 A0 FD | 	call	#pushregs_
157c8     0C F0 07 F1 | 	add	ptra, #12
157cc     08 4E 05 F1 | 	add	fp, #8
157d0     A7 38 68 FC | 	wrlong	#28, fp
157d4     08 4E 85 F1 | 	sub	fp, #8
157d8     79 00 00 FF 
157dc     08 E5 05 F1 | 	add	objptr, ##62216
157e0     F2 12 02 FB | 	rdlong	arg01, objptr
157e4     79 00 00 FF 
157e8     08 E5 85 F1 | 	sub	objptr, ##62216
157ec     A7 12 62 FC | 	wrlong	arg01, fp
157f0     A7 12 02 F6 | 	mov	arg01, fp
157f4     00 51 BF FD | 	call	#_push
157f8     A7 F0 03 F6 | 	mov	ptra, fp
157fc     B2 00 A0 FD | 	call	#popregs_
15800                 | _do_mousew_ret
15800     2D 00 64 FD | 	ret
15804                 | 
15804                 | ' 
15804                 | ' sub do_mousek
15804                 | _do_mousek
15804     00 4A 05 F6 | 	mov	COUNT_, #0
15808     A8 00 A0 FD | 	call	#pushregs_
1580c     0C F0 07 F1 | 	add	ptra, #12
15810     08 4E 05 F1 | 	add	fp, #8
15814     A7 3A 68 FC | 	wrlong	#29, fp
15818     08 4E 85 F1 | 	sub	fp, #8
1581c     79 00 00 FF 
15820     04 E5 05 F1 | 	add	objptr, ##62212
15824     F2 12 02 FB | 	rdlong	arg01, objptr
15828     79 00 00 FF 
1582c     04 E5 85 F1 | 	sub	objptr, ##62212
15830     A7 12 62 FC | 	wrlong	arg01, fp
15834     A7 12 02 F6 | 	mov	arg01, fp
15838     BC 50 BF FD | 	call	#_push
1583c     A7 F0 03 F6 | 	mov	ptra, fp
15840     B2 00 A0 FD | 	call	#popregs_
15844                 | _do_mousek_ret
15844     2D 00 64 FD | 	ret
15848                 | 
15848                 | ' 
15848                 | ' 
15848                 | ' sub do_rdpin
15848                 | _do_rdpin
15848     00 4A 05 F6 | 	mov	COUNT_, #0
1584c     A8 00 A0 FD | 	call	#pushregs_
15850     0C F0 07 F1 | 	add	ptra, #12
15854     08 50 BF FD | 	call	#_pop
15858     A7 FA 61 FC | 	wrlong	result1, fp
1585c     04 4E 05 F1 | 	add	fp, #4
15860     A7 FC 61 FC | 	wrlong	result2, fp
15864     04 4E 05 F1 | 	add	fp, #4
15868     A7 FE 61 FC | 	wrlong	result3, fp
1586c     08 4E 85 F1 | 	sub	fp, #8
15870     A7 12 02 F6 | 	mov	arg01, fp
15874     40 DC BF FD | 	call	#_converttoint
15878     FD FA 89 FA | 	rdpin	result1, result1
1587c     7A 00 00 FF 
15880     30 E4 05 F1 | 	add	objptr, ##62512
15884     F2 FA 61 FC | 	wrlong	result1, objptr
15888     7A 00 00 FF 
1588c     30 E4 85 F1 | 	sub	objptr, ##62512
15890     08 4E 05 F1 | 	add	fp, #8
15894     A7 3A 68 FC | 	wrlong	#29, fp
15898     08 4E 85 F1 | 	sub	fp, #8
1589c     A7 08 68 FC | 	wrlong	#4, fp
158a0     A7 12 02 F6 | 	mov	arg01, fp
158a4     50 50 BF FD | 	call	#_push
158a8     A7 F0 03 F6 | 	mov	ptra, fp
158ac     B2 00 A0 FD | 	call	#popregs_
158b0                 | _do_rdpin_ret
158b0     2D 00 64 FD | 	ret
158b4                 | 
158b4                 | ' 
158b4                 | ' sub do_rqpin
158b4                 | _do_rqpin
158b4     00 4A 05 F6 | 	mov	COUNT_, #0
158b8     A8 00 A0 FD | 	call	#pushregs_
158bc     0C F0 07 F1 | 	add	ptra, #12
158c0     9C 4F BF FD | 	call	#_pop
158c4     A7 FA 61 FC | 	wrlong	result1, fp
158c8     04 4E 05 F1 | 	add	fp, #4
158cc     A7 FC 61 FC | 	wrlong	result2, fp
158d0     04 4E 05 F1 | 	add	fp, #4
158d4     A7 FE 61 FC | 	wrlong	result3, fp
158d8     08 4E 85 F1 | 	sub	fp, #8
158dc     A7 12 02 F6 | 	mov	arg01, fp
158e0     D4 DB BF FD | 	call	#_converttoint
158e4     FD 12 02 F6 | 	mov	arg01, result1
158e8     00 FA 05 F6 | 	mov	result1, #0
158ec     09 FB 81 FA | 	rqpin	result1, arg01
158f0     7A 00 00 FF 
158f4     30 E4 05 F1 | 	add	objptr, ##62512
158f8     F2 FA 61 FC | 	wrlong	result1, objptr
158fc     7A 00 00 FF 
15900     30 E4 85 F1 | 	sub	objptr, ##62512
15904     08 4E 05 F1 | 	add	fp, #8
15908     A7 3A 68 FC | 	wrlong	#29, fp
1590c     08 4E 85 F1 | 	sub	fp, #8
15910     A7 08 68 FC | 	wrlong	#4, fp
15914     A7 12 02 F6 | 	mov	arg01, fp
15918     DC 4F BF FD | 	call	#_push
1591c     A7 F0 03 F6 | 	mov	ptra, fp
15920     B2 00 A0 FD | 	call	#popregs_
15924                 | _do_rqpin_ret
15924     2D 00 64 FD | 	ret
15928                 | 
15928                 | ' 
15928                 | ' sub do_pinread
15928                 | _do_pinread
15928     00 4A 05 F6 | 	mov	COUNT_, #0
1592c     A8 00 A0 FD | 	call	#pushregs_
15930     0C F0 07 F1 | 	add	ptra, #12
15934     28 4F BF FD | 	call	#_pop
15938     A7 FA 61 FC | 	wrlong	result1, fp
1593c     04 4E 05 F1 | 	add	fp, #4
15940     A7 FC 61 FC | 	wrlong	result2, fp
15944     04 4E 05 F1 | 	add	fp, #4
15948     A7 FE 61 FC | 	wrlong	result3, fp
1594c     08 4E 85 F1 | 	sub	fp, #8
15950     A7 12 02 F6 | 	mov	arg01, fp
15954     60 DB BF FD | 	call	#_converttoint
15958     FD 12 02 F6 | 	mov	arg01, result1
1595c     20 12 CE F7 | 	test	arg01, #32 wz
15960     FF FB 01 56 |  if_ne	mov	result1, inb
15964     FE FB 01 A6 |  if_e	mov	result1, ina
15968     09 FB 41 F0 | 	shr	result1, arg01
1596c     06 12 46 F0 | 	shr	arg01, #6
15970     09 FB 41 F7 | 	zerox	result1, arg01
15974     7A 00 00 FF 
15978     30 E4 05 F1 | 	add	objptr, ##62512
1597c     F2 FA 61 FC | 	wrlong	result1, objptr
15980     7A 00 00 FF 
15984     30 E4 85 F1 | 	sub	objptr, ##62512
15988     08 4E 05 F1 | 	add	fp, #8
1598c     A7 3A 68 FC | 	wrlong	#29, fp
15990     08 4E 85 F1 | 	sub	fp, #8
15994     A7 08 68 FC | 	wrlong	#4, fp
15998     A7 12 02 F6 | 	mov	arg01, fp
1599c     58 4F BF FD | 	call	#_push
159a0     A7 F0 03 F6 | 	mov	ptra, fp
159a4     B2 00 A0 FD | 	call	#popregs_
159a8                 | _do_pinread_ret
159a8     2D 00 64 FD | 	ret
159ac                 | 
159ac                 | ' 
159ac                 | ' sub do_gettime
159ac                 | _do_gettime
159ac     02 4A 05 F6 | 	mov	COUNT_, #2
159b0     A8 00 A0 FD | 	call	#pushregs_
159b4     14 F0 07 F1 | 	add	ptra, #20
159b8                 | ' 
159b8                 | ' const asm 
159b8     1A 1E 72 FD | 	getct	local01 wc
159bc     1A 20 62 FD | 	getct	local02
159c0                 | ' 
159c0                 | ' return hi1, lo1
159c0     10 FD 01 F6 | 	mov	result2, local02
159c4     A7 1E 62 FC | 	wrlong	local01, fp
159c8     04 4E 05 F1 | 	add	fp, #4
159cc     A7 FC 61 FC | 	wrlong	result2, fp
159d0     0C 4E 05 F1 | 	add	fp, #12
159d4     A7 3A 68 FC | 	wrlong	#29, fp
159d8     0C 4E 85 F1 | 	sub	fp, #12
159dc     A7 12 02 FB | 	rdlong	arg01, fp
159e0     04 4E 05 F1 | 	add	fp, #4
159e4     A7 12 62 FC | 	wrlong	arg01, fp
159e8     08 4E 85 F1 | 	sub	fp, #8
159ec     A7 12 02 FB | 	rdlong	arg01, fp
159f0     0C 4E 05 F1 | 	add	fp, #12
159f4     A7 12 62 FC | 	wrlong	arg01, fp
159f8     04 4E 85 F1 | 	sub	fp, #4
159fc     A7 12 02 F6 | 	mov	arg01, fp
15a00     08 4E 85 F1 | 	sub	fp, #8
15a04     F0 4E BF FD | 	call	#_push
15a08     A7 F0 03 F6 | 	mov	ptra, fp
15a0c     B2 00 A0 FD | 	call	#popregs_
15a10                 | _do_gettime_ret
15a10     2D 00 64 FD | 	ret
15a14                 | 
15a14                 | '    
15a14                 | ' 
15a14                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
15a14                 | ' 
15a14                 | ' '' ----------------------------- Clear the screen
15a14                 | ' 
15a14                 | ' sub do_cls
15a14                 | _do_cls
15a14     57 00 00 FF 
15a18     3C E4 05 F1 | 	add	objptr, ##44604
15a1c     F2 12 02 FB | 	rdlong	arg01, objptr
15a20     04 E4 85 F1 | 	sub	objptr, #4
15a24     F2 14 02 FB | 	rdlong	arg02, objptr
15a28     57 00 00 FF 
15a2c     38 E4 85 F1 | 	sub	objptr, ##44600
15a30     58 7A B0 FD | 	call	#_hg010b_spin2_cls
15a34     57 00 00 FF 
15a38     3C E4 05 F1 | 	add	objptr, ##44604
15a3c     F2 14 02 FB | 	rdlong	arg02, objptr
15a40     14 E4 85 F1 | 	sub	objptr, #20
15a44     F2 14 62 FC | 	wrlong	arg02, objptr
15a48     57 00 00 FF 
15a4c     28 E4 85 F1 | 	sub	objptr, ##44584
15a50                 | ' cls(ink,paper): plot_color=ink: print
15a50     00 12 06 F6 | 	mov	arg01, #0
15a54     58 EA B0 FD | 	call	#__system___getiolock_0484
15a58     FD 12 02 F6 | 	mov	arg01, result1
15a5c     B8 90 B0 FD | 	call	#__system___lockmem
15a60     00 12 06 F6 | 	mov	arg01, #0
15a64     0A 14 06 F6 | 	mov	arg02, #10
15a68     00 16 06 F6 | 	mov	arg03, #0
15a6c     58 9D B0 FD | 	call	#__system___basic_print_char
15a70     00 12 06 F6 | 	mov	arg01, #0
15a74     38 EA B0 FD | 	call	#__system___getiolock_0484
15a78     FD 00 68 FC | 	wrlong	#0, result1
15a7c                 | _do_cls_ret
15a7c     2D 00 64 FD | 	ret
15a80                 | 
15a80                 | ' 
15a80                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
15a80                 | ' 
15a80                 | ' sub do_color
15a80                 | _do_color
15a80     03 4A 05 F6 | 	mov	COUNT_, #3
15a84     A8 00 A0 FD | 	call	#pushregs_
15a88     D4 4D BF FD | 	call	#_pop
15a8c     FD 1E 02 F6 | 	mov	local01, result1
15a90     FE 20 02 F6 | 	mov	local02, result2
15a94     FF 22 02 F6 | 	mov	local03, result3
15a98     57 00 00 FF 
15a9c     28 E4 05 F1 | 	add	objptr, ##44584
15aa0     F2 1E 62 FC | 	wrlong	local01, objptr
15aa4     57 00 00 FF 
15aa8     28 E4 85 F1 | 	sub	objptr, ##44584
15aac     A7 F0 03 F6 | 	mov	ptra, fp
15ab0     B2 00 A0 FD | 	call	#popregs_
15ab4                 | _do_color_ret
15ab4     2D 00 64 FD | 	ret
15ab8                 | 
15ab8                 | ' 
15ab8                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
15ab8                 | ' 
15ab8                 | ' sub do_plot
15ab8                 | _do_plot
15ab8     00 4A 05 F6 | 	mov	COUNT_, #0
15abc     A8 00 A0 FD | 	call	#pushregs_
15ac0     20 F0 07 F1 | 	add	ptra, #32
15ac4     98 4D BF FD | 	call	#_pop
15ac8     FD 16 02 F6 | 	mov	arg03, result1
15acc     FE 14 02 F6 | 	mov	arg02, result2
15ad0     FF 12 02 F6 | 	mov	arg01, result3
15ad4     0C 4E 05 F1 | 	add	fp, #12
15ad8     A7 16 62 FC | 	wrlong	arg03, fp
15adc     04 4E 05 F1 | 	add	fp, #4
15ae0     A7 14 62 FC | 	wrlong	arg02, fp
15ae4     04 4E 05 F1 | 	add	fp, #4
15ae8     A7 12 62 FC | 	wrlong	arg01, fp
15aec     14 4E 85 F1 | 	sub	fp, #20
15af0     6C 4D BF FD | 	call	#_pop
15af4     FF 16 02 F6 | 	mov	arg03, result3
15af8     A7 FA 61 FC | 	wrlong	result1, fp
15afc     04 4E 05 F1 | 	add	fp, #4
15b00     A7 FC 61 FC | 	wrlong	result2, fp
15b04     04 4E 05 F1 | 	add	fp, #4
15b08     A7 16 62 FC | 	wrlong	arg03, fp
15b0c     08 4E 85 F1 | 	sub	fp, #8
15b10     A7 12 02 F6 | 	mov	arg01, fp
15b14     A0 D9 BF FD | 	call	#_converttoint
15b18     18 4E 05 F1 | 	add	fp, #24
15b1c     A7 FA 61 FC | 	wrlong	result1, fp
15b20     0C 4E 85 F1 | 	sub	fp, #12
15b24     A7 12 02 F6 | 	mov	arg01, fp
15b28     0C 4E 85 F1 | 	sub	fp, #12
15b2c     88 D9 BF FD | 	call	#_converttoint
15b30     1C 4E 05 F1 | 	add	fp, #28
15b34     A7 FA 61 FC | 	wrlong	result1, fp
15b38     04 4E 85 F1 | 	sub	fp, #4
15b3c     A7 16 02 FB | 	rdlong	arg03, fp
15b40     57 00 00 FF 
15b44     2C E4 05 F1 | 	add	objptr, ##44588
15b48     F2 16 62 FC | 	wrlong	arg03, objptr
15b4c     04 4E 05 F1 | 	add	fp, #4
15b50     A7 14 02 FB | 	rdlong	arg02, fp
15b54     1C 4E 85 F1 | 	sub	fp, #28
15b58     04 E4 05 F1 | 	add	objptr, #4
15b5c     F2 14 62 FC | 	wrlong	arg02, objptr
15b60     04 E4 85 F1 | 	sub	objptr, #4
15b64     F2 12 02 FB | 	rdlong	arg01, objptr
15b68     04 E4 85 F1 | 	sub	objptr, #4
15b6c     F2 16 02 FB | 	rdlong	arg03, objptr
15b70     57 00 00 FF 
15b74     28 E4 85 F1 | 	sub	objptr, ##44584
15b78     3C 6C B0 FD | 	call	#_hg010b_spin2_putpixel
15b7c     A7 F0 03 F6 | 	mov	ptra, fp
15b80     B2 00 A0 FD | 	call	#popregs_
15b84                 | _do_plot_ret
15b84     2D 00 64 FD | 	ret
15b88                 | 
15b88                 | ' 
15b88                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
15b88                 | ' 
15b88                 | ' sub do_draw
15b88                 | _do_draw
15b88     00 4A 05 F6 | 	mov	COUNT_, #0
15b8c     A8 00 A0 FD | 	call	#pushregs_
15b90     20 F0 07 F1 | 	add	ptra, #32
15b94     C8 4C BF FD | 	call	#_pop
15b98     FD 1A 02 F6 | 	mov	arg05, result1
15b9c     FE 18 02 F6 | 	mov	arg04, result2
15ba0     FF 16 02 F6 | 	mov	arg03, result3
15ba4     0C 4E 05 F1 | 	add	fp, #12
15ba8     A7 1A 62 FC | 	wrlong	arg05, fp
15bac     04 4E 05 F1 | 	add	fp, #4
15bb0     A7 18 62 FC | 	wrlong	arg04, fp
15bb4     04 4E 05 F1 | 	add	fp, #4
15bb8     A7 16 62 FC | 	wrlong	arg03, fp
15bbc     14 4E 85 F1 | 	sub	fp, #20
15bc0     9C 4C BF FD | 	call	#_pop
15bc4     FF 1A 02 F6 | 	mov	arg05, result3
15bc8     A7 FA 61 FC | 	wrlong	result1, fp
15bcc     04 4E 05 F1 | 	add	fp, #4
15bd0     A7 FC 61 FC | 	wrlong	result2, fp
15bd4     04 4E 05 F1 | 	add	fp, #4
15bd8     A7 1A 62 FC | 	wrlong	arg05, fp
15bdc     08 4E 85 F1 | 	sub	fp, #8
15be0     A7 12 02 F6 | 	mov	arg01, fp
15be4     D0 D8 BF FD | 	call	#_converttoint
15be8     18 4E 05 F1 | 	add	fp, #24
15bec     A7 FA 61 FC | 	wrlong	result1, fp
15bf0     0C 4E 85 F1 | 	sub	fp, #12
15bf4     A7 12 02 F6 | 	mov	arg01, fp
15bf8     0C 4E 85 F1 | 	sub	fp, #12
15bfc     B8 D8 BF FD | 	call	#_converttoint
15c00     1C 4E 05 F1 | 	add	fp, #28
15c04     A7 FA 61 FC | 	wrlong	result1, fp
15c08     57 00 00 FF 
15c0c     2C E4 05 F1 | 	add	objptr, ##44588
15c10     F2 12 02 FB | 	rdlong	arg01, objptr
15c14     04 E4 05 F1 | 	add	objptr, #4
15c18     F2 14 02 FB | 	rdlong	arg02, objptr
15c1c     04 4E 85 F1 | 	sub	fp, #4
15c20     A7 16 02 FB | 	rdlong	arg03, fp
15c24     FD 18 02 F6 | 	mov	arg04, result1
15c28     18 4E 85 F1 | 	sub	fp, #24
15c2c     08 E4 85 F1 | 	sub	objptr, #8
15c30     F2 1A 02 FB | 	rdlong	arg05, objptr
15c34     57 00 00 FF 
15c38     28 E4 85 F1 | 	sub	objptr, ##44584
15c3c     28 6E B0 FD | 	call	#_hg010b_spin2_draw
15c40     18 4E 05 F1 | 	add	fp, #24
15c44     A7 1A 02 FB | 	rdlong	arg05, fp
15c48     57 00 00 FF 
15c4c     2C E4 05 F1 | 	add	objptr, ##44588
15c50     F2 1A 62 FC | 	wrlong	arg05, objptr
15c54     04 4E 05 F1 | 	add	fp, #4
15c58     A7 1A 02 FB | 	rdlong	arg05, fp
15c5c     1C 4E 85 F1 | 	sub	fp, #28
15c60     04 E4 05 F1 | 	add	objptr, #4
15c64     F2 1A 62 FC | 	wrlong	arg05, objptr
15c68     57 00 00 FF 
15c6c     30 E4 85 F1 | 	sub	objptr, ##44592
15c70     A7 F0 03 F6 | 	mov	ptra, fp
15c74     B2 00 A0 FD | 	call	#popregs_
15c78                 | _do_draw_ret
15c78     2D 00 64 FD | 	ret
15c7c                 | 
15c7c                 | ' 
15c7c                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
15c7c                 | ' 
15c7c                 | ' sub do_fcircle
15c7c                 | _do_fcircle
15c7c     02 4A 05 F6 | 	mov	COUNT_, #2
15c80     A8 00 A0 FD | 	call	#pushregs_
15c84     24 F0 07 F1 | 	add	ptra, #36
15c88     D4 4B BF FD | 	call	#_pop
15c8c     FD 18 02 F6 | 	mov	arg04, result1
15c90     FE 16 02 F6 | 	mov	arg03, result2
15c94     FF 14 02 F6 | 	mov	arg02, result3
15c98     18 4E 05 F1 | 	add	fp, #24
15c9c     A7 18 62 FC | 	wrlong	arg04, fp
15ca0     04 4E 05 F1 | 	add	fp, #4
15ca4     A7 16 62 FC | 	wrlong	arg03, fp
15ca8     04 4E 05 F1 | 	add	fp, #4
15cac     A7 14 62 FC | 	wrlong	arg02, fp
15cb0     20 4E 85 F1 | 	sub	fp, #32
15cb4     A8 4B BF FD | 	call	#_pop
15cb8     FD 18 02 F6 | 	mov	arg04, result1
15cbc     FE 16 02 F6 | 	mov	arg03, result2
15cc0     FF 1E 02 F6 | 	mov	local01, result3
15cc4     0C 4E 05 F1 | 	add	fp, #12
15cc8     A7 18 62 FC | 	wrlong	arg04, fp
15ccc     04 4E 05 F1 | 	add	fp, #4
15cd0     A7 16 62 FC | 	wrlong	arg03, fp
15cd4     04 4E 05 F1 | 	add	fp, #4
15cd8     A7 1E 62 FC | 	wrlong	local01, fp
15cdc     14 4E 85 F1 | 	sub	fp, #20
15ce0     7C 4B BF FD | 	call	#_pop
15ce4     A7 FA 61 FC | 	wrlong	result1, fp
15ce8     04 4E 05 F1 | 	add	fp, #4
15cec     A7 FC 61 FC | 	wrlong	result2, fp
15cf0     04 4E 05 F1 | 	add	fp, #4
15cf4     A7 FE 61 FC | 	wrlong	result3, fp
15cf8                 | ' 
15cf8                 | ' t3=pop()
15cf8                 | ' t2=pop()
15cf8                 | ' t1=pop()
15cf8                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
15cf8     FF 18 02 F6 | 	mov	arg04, result3
15cfc     08 4E 85 F1 | 	sub	fp, #8
15d00     1C 18 0E F2 | 	cmp	arg04, #28 wz
15d04     08 4E 05 51 |  if_ne	add	fp, #8
15d08     A7 1E 02 5B |  if_ne	rdlong	local01, fp
15d0c     08 4E 85 51 |  if_ne	sub	fp, #8
15d10     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
15d14     7C 00 90 5D |  if_ne	jmp	#LR__1780
15d18     14 4E 05 F1 | 	add	fp, #20
15d1c     A7 1E 02 FB | 	rdlong	local01, fp
15d20     14 4E 85 F1 | 	sub	fp, #20
15d24     1C 1E 0E F2 | 	cmp	local01, #28 wz
15d28     14 4E 05 51 |  if_ne	add	fp, #20
15d2c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
15d30     14 4E 85 51 |  if_ne	sub	fp, #20
15d34     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
15d38     58 00 90 5D |  if_ne	jmp	#LR__1780
15d3c     20 4E 05 F1 | 	add	fp, #32
15d40     A7 1E 02 FB | 	rdlong	local01, fp
15d44     20 4E 85 F1 | 	sub	fp, #32
15d48     1C 1E 0E F2 | 	cmp	local01, #28 wz
15d4c     20 4E 05 51 |  if_ne	add	fp, #32
15d50     A7 18 02 5B |  if_ne	rdlong	arg04, fp
15d54     20 4E 85 51 |  if_ne	sub	fp, #32
15d58     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
15d5c     34 00 90 5D |  if_ne	jmp	#LR__1780
15d60     A7 12 02 FB | 	rdlong	arg01, fp
15d64     0C 4E 05 F1 | 	add	fp, #12
15d68     A7 14 02 FB | 	rdlong	arg02, fp
15d6c     0C 4E 05 F1 | 	add	fp, #12
15d70     A7 16 02 FB | 	rdlong	arg03, fp
15d74     18 4E 85 F1 | 	sub	fp, #24
15d78     57 00 00 FF 
15d7c     28 E4 05 F1 | 	add	objptr, ##44584
15d80     F2 18 02 FB | 	rdlong	arg04, objptr
15d84     57 00 00 FF 
15d88     28 E4 85 F1 | 	sub	objptr, ##44584
15d8c     5C 71 B0 FD | 	call	#_hg010b_spin2_fcircle
15d90                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
15d90     54 00 90 FD | 	jmp	#LR__1781
15d94                 | LR__1780
15d94     A7 12 02 F6 | 	mov	arg01, fp
15d98     1C D7 BF FD | 	call	#_converttoint
15d9c     FD 1E 02 F6 | 	mov	local01, result1
15da0     0C 4E 05 F1 | 	add	fp, #12
15da4     A7 12 02 F6 | 	mov	arg01, fp
15da8     0C 4E 85 F1 | 	sub	fp, #12
15dac     08 D7 BF FD | 	call	#_converttoint
15db0     FD 20 02 F6 | 	mov	local02, result1
15db4     18 4E 05 F1 | 	add	fp, #24
15db8     A7 12 02 F6 | 	mov	arg01, fp
15dbc     18 4E 85 F1 | 	sub	fp, #24
15dc0     F4 D6 BF FD | 	call	#_converttoint
15dc4     FD 16 02 F6 | 	mov	arg03, result1
15dc8     57 00 00 FF 
15dcc     28 E4 05 F1 | 	add	objptr, ##44584
15dd0     F2 18 02 FB | 	rdlong	arg04, objptr
15dd4     57 00 00 FF 
15dd8     28 E4 85 F1 | 	sub	objptr, ##44584
15ddc     0F 13 02 F6 | 	mov	arg01, local01
15de0     10 15 02 F6 | 	mov	arg02, local02
15de4     04 71 B0 FD | 	call	#_hg010b_spin2_fcircle
15de8                 | LR__1781
15de8     A7 F0 03 F6 | 	mov	ptra, fp
15dec     B2 00 A0 FD | 	call	#popregs_
15df0                 | _do_fcircle_ret
15df0     2D 00 64 FD | 	ret
15df4                 | 
15df4                 | ' 
15df4                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
15df4                 | ' 
15df4                 | ' sub do_circle
15df4                 | _do_circle
15df4     02 4A 05 F6 | 	mov	COUNT_, #2
15df8     A8 00 A0 FD | 	call	#pushregs_
15dfc     24 F0 07 F1 | 	add	ptra, #36
15e00     5C 4A BF FD | 	call	#_pop
15e04     FD 18 02 F6 | 	mov	arg04, result1
15e08     FE 16 02 F6 | 	mov	arg03, result2
15e0c     FF 14 02 F6 | 	mov	arg02, result3
15e10     18 4E 05 F1 | 	add	fp, #24
15e14     A7 18 62 FC | 	wrlong	arg04, fp
15e18     04 4E 05 F1 | 	add	fp, #4
15e1c     A7 16 62 FC | 	wrlong	arg03, fp
15e20     04 4E 05 F1 | 	add	fp, #4
15e24     A7 14 62 FC | 	wrlong	arg02, fp
15e28     20 4E 85 F1 | 	sub	fp, #32
15e2c     30 4A BF FD | 	call	#_pop
15e30     FD 18 02 F6 | 	mov	arg04, result1
15e34     FE 16 02 F6 | 	mov	arg03, result2
15e38     FF 1E 02 F6 | 	mov	local01, result3
15e3c     0C 4E 05 F1 | 	add	fp, #12
15e40     A7 18 62 FC | 	wrlong	arg04, fp
15e44     04 4E 05 F1 | 	add	fp, #4
15e48     A7 16 62 FC | 	wrlong	arg03, fp
15e4c     04 4E 05 F1 | 	add	fp, #4
15e50     A7 1E 62 FC | 	wrlong	local01, fp
15e54     14 4E 85 F1 | 	sub	fp, #20
15e58     04 4A BF FD | 	call	#_pop
15e5c     A7 FA 61 FC | 	wrlong	result1, fp
15e60     04 4E 05 F1 | 	add	fp, #4
15e64     A7 FC 61 FC | 	wrlong	result2, fp
15e68     04 4E 05 F1 | 	add	fp, #4
15e6c     A7 FE 61 FC | 	wrlong	result3, fp
15e70                 | ' 
15e70                 | ' t3=pop()
15e70                 | ' t2=pop()
15e70                 | ' t1=pop()
15e70                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
15e70     FF 18 02 F6 | 	mov	arg04, result3
15e74     08 4E 85 F1 | 	sub	fp, #8
15e78     1C 18 0E F2 | 	cmp	arg04, #28 wz
15e7c     08 4E 05 51 |  if_ne	add	fp, #8
15e80     A7 1E 02 5B |  if_ne	rdlong	local01, fp
15e84     08 4E 85 51 |  if_ne	sub	fp, #8
15e88     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
15e8c     7C 00 90 5D |  if_ne	jmp	#LR__1790
15e90     14 4E 05 F1 | 	add	fp, #20
15e94     A7 1E 02 FB | 	rdlong	local01, fp
15e98     14 4E 85 F1 | 	sub	fp, #20
15e9c     1C 1E 0E F2 | 	cmp	local01, #28 wz
15ea0     14 4E 05 51 |  if_ne	add	fp, #20
15ea4     A7 18 02 5B |  if_ne	rdlong	arg04, fp
15ea8     14 4E 85 51 |  if_ne	sub	fp, #20
15eac     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
15eb0     58 00 90 5D |  if_ne	jmp	#LR__1790
15eb4     20 4E 05 F1 | 	add	fp, #32
15eb8     A7 1E 02 FB | 	rdlong	local01, fp
15ebc     20 4E 85 F1 | 	sub	fp, #32
15ec0     1C 1E 0E F2 | 	cmp	local01, #28 wz
15ec4     20 4E 05 51 |  if_ne	add	fp, #32
15ec8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
15ecc     20 4E 85 51 |  if_ne	sub	fp, #32
15ed0     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
15ed4     34 00 90 5D |  if_ne	jmp	#LR__1790
15ed8     A7 12 02 FB | 	rdlong	arg01, fp
15edc     0C 4E 05 F1 | 	add	fp, #12
15ee0     A7 14 02 FB | 	rdlong	arg02, fp
15ee4     0C 4E 05 F1 | 	add	fp, #12
15ee8     A7 16 02 FB | 	rdlong	arg03, fp
15eec     18 4E 85 F1 | 	sub	fp, #24
15ef0     57 00 00 FF 
15ef4     28 E4 05 F1 | 	add	objptr, ##44584
15ef8     F2 18 02 FB | 	rdlong	arg04, objptr
15efc     57 00 00 FF 
15f00     28 E4 85 F1 | 	sub	objptr, ##44584
15f04     F0 70 B0 FD | 	call	#_hg010b_spin2_circle
15f08                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
15f08     54 00 90 FD | 	jmp	#LR__1791
15f0c                 | LR__1790
15f0c     A7 12 02 F6 | 	mov	arg01, fp
15f10     A4 D5 BF FD | 	call	#_converttoint
15f14     FD 1E 02 F6 | 	mov	local01, result1
15f18     0C 4E 05 F1 | 	add	fp, #12
15f1c     A7 12 02 F6 | 	mov	arg01, fp
15f20     0C 4E 85 F1 | 	sub	fp, #12
15f24     90 D5 BF FD | 	call	#_converttoint
15f28     FD 20 02 F6 | 	mov	local02, result1
15f2c     18 4E 05 F1 | 	add	fp, #24
15f30     A7 12 02 F6 | 	mov	arg01, fp
15f34     18 4E 85 F1 | 	sub	fp, #24
15f38     7C D5 BF FD | 	call	#_converttoint
15f3c     FD 16 02 F6 | 	mov	arg03, result1
15f40     57 00 00 FF 
15f44     28 E4 05 F1 | 	add	objptr, ##44584
15f48     F2 18 02 FB | 	rdlong	arg04, objptr
15f4c     57 00 00 FF 
15f50     28 E4 85 F1 | 	sub	objptr, ##44584
15f54     0F 13 02 F6 | 	mov	arg01, local01
15f58     10 15 02 F6 | 	mov	arg02, local02
15f5c     98 70 B0 FD | 	call	#_hg010b_spin2_circle
15f60                 | LR__1791
15f60     A7 F0 03 F6 | 	mov	ptra, fp
15f64     B2 00 A0 FD | 	call	#popregs_
15f68                 | _do_circle_ret
15f68     2D 00 64 FD | 	ret
15f6c                 | 
15f6c                 | ' 
15f6c                 | ' ' -------------------------- Draw a rectangle
15f6c                 | ' 
15f6c                 | ' sub do_box
15f6c                 | _do_box
15f6c     03 4A 05 F6 | 	mov	COUNT_, #3
15f70     A8 00 A0 FD | 	call	#pushregs_
15f74     30 F0 07 F1 | 	add	ptra, #48
15f78     E4 48 BF FD | 	call	#_pop
15f7c     FD 1A 02 F6 | 	mov	arg05, result1
15f80     FE 18 02 F6 | 	mov	arg04, result2
15f84     FF 16 02 F6 | 	mov	arg03, result3
15f88     24 4E 05 F1 | 	add	fp, #36
15f8c     A7 1A 62 FC | 	wrlong	arg05, fp
15f90     04 4E 05 F1 | 	add	fp, #4
15f94     A7 18 62 FC | 	wrlong	arg04, fp
15f98     04 4E 05 F1 | 	add	fp, #4
15f9c     A7 16 62 FC | 	wrlong	arg03, fp
15fa0     2C 4E 85 F1 | 	sub	fp, #44
15fa4     B8 48 BF FD | 	call	#_pop
15fa8     FD 1A 02 F6 | 	mov	arg05, result1
15fac     FE 18 02 F6 | 	mov	arg04, result2
15fb0     FF 16 02 F6 | 	mov	arg03, result3
15fb4     18 4E 05 F1 | 	add	fp, #24
15fb8     A7 1A 62 FC | 	wrlong	arg05, fp
15fbc     04 4E 05 F1 | 	add	fp, #4
15fc0     A7 18 62 FC | 	wrlong	arg04, fp
15fc4     04 4E 05 F1 | 	add	fp, #4
15fc8     A7 16 62 FC | 	wrlong	arg03, fp
15fcc     20 4E 85 F1 | 	sub	fp, #32
15fd0     8C 48 BF FD | 	call	#_pop
15fd4     FD 1A 02 F6 | 	mov	arg05, result1
15fd8     FE 18 02 F6 | 	mov	arg04, result2
15fdc     FF 1E 02 F6 | 	mov	local01, result3
15fe0     0C 4E 05 F1 | 	add	fp, #12
15fe4     A7 1A 62 FC | 	wrlong	arg05, fp
15fe8     04 4E 05 F1 | 	add	fp, #4
15fec     A7 18 62 FC | 	wrlong	arg04, fp
15ff0     04 4E 05 F1 | 	add	fp, #4
15ff4     A7 1E 62 FC | 	wrlong	local01, fp
15ff8     14 4E 85 F1 | 	sub	fp, #20
15ffc     60 48 BF FD | 	call	#_pop
16000     A7 FA 61 FC | 	wrlong	result1, fp
16004     04 4E 05 F1 | 	add	fp, #4
16008     A7 FC 61 FC | 	wrlong	result2, fp
1600c     04 4E 05 F1 | 	add	fp, #4
16010     A7 FE 61 FC | 	wrlong	result3, fp
16014                 | ' 
16014                 | ' t4=pop()
16014                 | ' t3=pop()
16014                 | ' t2=pop()
16014                 | ' t1=pop()
16014                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
16014     FF 1A 02 F6 | 	mov	arg05, result3
16018     08 4E 85 F1 | 	sub	fp, #8
1601c     1C 1A 0E F2 | 	cmp	arg05, #28 wz
16020     08 4E 05 51 |  if_ne	add	fp, #8
16024     A7 1E 02 5B |  if_ne	rdlong	local01, fp
16028     08 4E 85 51 |  if_ne	sub	fp, #8
1602c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
16030     A8 00 90 5D |  if_ne	jmp	#LR__1800
16034     14 4E 05 F1 | 	add	fp, #20
16038     A7 1E 02 FB | 	rdlong	local01, fp
1603c     14 4E 85 F1 | 	sub	fp, #20
16040     1C 1E 0E F2 | 	cmp	local01, #28 wz
16044     14 4E 05 51 |  if_ne	add	fp, #20
16048     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
1604c     14 4E 85 51 |  if_ne	sub	fp, #20
16050     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
16054     84 00 90 5D |  if_ne	jmp	#LR__1800
16058     20 4E 05 F1 | 	add	fp, #32
1605c     A7 1E 02 FB | 	rdlong	local01, fp
16060     20 4E 85 F1 | 	sub	fp, #32
16064     1C 1E 0E F2 | 	cmp	local01, #28 wz
16068     20 4E 05 51 |  if_ne	add	fp, #32
1606c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
16070     20 4E 85 51 |  if_ne	sub	fp, #32
16074     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
16078     60 00 90 5D |  if_ne	jmp	#LR__1800
1607c     2C 4E 05 F1 | 	add	fp, #44
16080     A7 1E 02 FB | 	rdlong	local01, fp
16084     2C 4E 85 F1 | 	sub	fp, #44
16088     1C 1E 0E F2 | 	cmp	local01, #28 wz
1608c     2C 4E 05 51 |  if_ne	add	fp, #44
16090     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
16094     2C 4E 85 51 |  if_ne	sub	fp, #44
16098     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
1609c     3C 00 90 5D |  if_ne	jmp	#LR__1800
160a0     A7 12 02 FB | 	rdlong	arg01, fp
160a4     0C 4E 05 F1 | 	add	fp, #12
160a8     A7 14 02 FB | 	rdlong	arg02, fp
160ac     0C 4E 05 F1 | 	add	fp, #12
160b0     A7 16 02 FB | 	rdlong	arg03, fp
160b4     0C 4E 05 F1 | 	add	fp, #12
160b8     A7 18 02 FB | 	rdlong	arg04, fp
160bc     24 4E 85 F1 | 	sub	fp, #36
160c0     57 00 00 FF 
160c4     28 E4 05 F1 | 	add	objptr, ##44584
160c8     F2 1A 02 FB | 	rdlong	arg05, objptr
160cc     57 00 00 FF 
160d0     28 E4 85 F1 | 	sub	objptr, ##44584
160d4     EC 70 B0 FD | 	call	#_hg010b_spin2_box
160d8                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
160d8     6C 00 90 FD | 	jmp	#LR__1801
160dc                 | LR__1800
160dc     A7 12 02 F6 | 	mov	arg01, fp
160e0     D4 D3 BF FD | 	call	#_converttoint
160e4     FD 20 02 F6 | 	mov	local02, result1
160e8     0C 4E 05 F1 | 	add	fp, #12
160ec     A7 12 02 F6 | 	mov	arg01, fp
160f0     0C 4E 85 F1 | 	sub	fp, #12
160f4     C0 D3 BF FD | 	call	#_converttoint
160f8     FD 22 02 F6 | 	mov	local03, result1
160fc     18 4E 05 F1 | 	add	fp, #24
16100     A7 12 02 F6 | 	mov	arg01, fp
16104     18 4E 85 F1 | 	sub	fp, #24
16108     AC D3 BF FD | 	call	#_converttoint
1610c     FD 1E 02 F6 | 	mov	local01, result1
16110     24 4E 05 F1 | 	add	fp, #36
16114     A7 12 02 F6 | 	mov	arg01, fp
16118     24 4E 85 F1 | 	sub	fp, #36
1611c     98 D3 BF FD | 	call	#_converttoint
16120     FD 18 02 F6 | 	mov	arg04, result1
16124     57 00 00 FF 
16128     28 E4 05 F1 | 	add	objptr, ##44584
1612c     F2 1A 02 FB | 	rdlong	arg05, objptr
16130     57 00 00 FF 
16134     28 E4 85 F1 | 	sub	objptr, ##44584
16138     10 13 02 F6 | 	mov	arg01, local02
1613c     11 15 02 F6 | 	mov	arg02, local03
16140     0F 17 02 F6 | 	mov	arg03, local01
16144     7C 70 B0 FD | 	call	#_hg010b_spin2_box
16148                 | LR__1801
16148     A7 F0 03 F6 | 	mov	ptra, fp
1614c     B2 00 A0 FD | 	call	#popregs_
16150                 | _do_box_ret
16150     2D 00 64 FD | 	ret
16154                 | 
16154                 | ' 
16154                 | ' sub do_fill
16154                 | _do_fill
16154     03 4A 05 F6 | 	mov	COUNT_, #3
16158     A8 00 A0 FD | 	call	#pushregs_
1615c     30 F0 07 F1 | 	add	ptra, #48
16160     FC 46 BF FD | 	call	#_pop
16164     FD 18 02 F6 | 	mov	arg04, result1
16168     FE 16 02 F6 | 	mov	arg03, result2
1616c     FF 14 02 F6 | 	mov	arg02, result3
16170     24 4E 05 F1 | 	add	fp, #36
16174     A7 18 62 FC | 	wrlong	arg04, fp
16178     04 4E 05 F1 | 	add	fp, #4
1617c     A7 16 62 FC | 	wrlong	arg03, fp
16180     04 4E 05 F1 | 	add	fp, #4
16184     A7 14 62 FC | 	wrlong	arg02, fp
16188     2C 4E 85 F1 | 	sub	fp, #44
1618c     D0 46 BF FD | 	call	#_pop
16190     FD 18 02 F6 | 	mov	arg04, result1
16194     FE 16 02 F6 | 	mov	arg03, result2
16198     FF 14 02 F6 | 	mov	arg02, result3
1619c     18 4E 05 F1 | 	add	fp, #24
161a0     A7 18 62 FC | 	wrlong	arg04, fp
161a4     04 4E 05 F1 | 	add	fp, #4
161a8     A7 16 62 FC | 	wrlong	arg03, fp
161ac     04 4E 05 F1 | 	add	fp, #4
161b0     A7 14 62 FC | 	wrlong	arg02, fp
161b4     20 4E 85 F1 | 	sub	fp, #32
161b8     A4 46 BF FD | 	call	#_pop
161bc     FD 18 02 F6 | 	mov	arg04, result1
161c0     FE 16 02 F6 | 	mov	arg03, result2
161c4     FF 1E 02 F6 | 	mov	local01, result3
161c8     0C 4E 05 F1 | 	add	fp, #12
161cc     A7 18 62 FC | 	wrlong	arg04, fp
161d0     04 4E 05 F1 | 	add	fp, #4
161d4     A7 16 62 FC | 	wrlong	arg03, fp
161d8     04 4E 05 F1 | 	add	fp, #4
161dc     A7 1E 62 FC | 	wrlong	local01, fp
161e0     14 4E 85 F1 | 	sub	fp, #20
161e4     78 46 BF FD | 	call	#_pop
161e8     A7 FA 61 FC | 	wrlong	result1, fp
161ec     04 4E 05 F1 | 	add	fp, #4
161f0     A7 FC 61 FC | 	wrlong	result2, fp
161f4     04 4E 05 F1 | 	add	fp, #4
161f8     A7 FE 61 FC | 	wrlong	result3, fp
161fc                 | ' 
161fc                 | ' t4=pop()
161fc                 | ' t3=pop()
161fc                 | ' t2=pop()
161fc                 | ' t1=pop()
161fc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
161fc     FF 18 02 F6 | 	mov	arg04, result3
16200     08 4E 85 F1 | 	sub	fp, #8
16204     1C 18 0E F2 | 	cmp	arg04, #28 wz
16208     08 4E 05 51 |  if_ne	add	fp, #8
1620c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
16210     08 4E 85 51 |  if_ne	sub	fp, #8
16214     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
16218     94 00 90 5D |  if_ne	jmp	#LR__1810
1621c     14 4E 05 F1 | 	add	fp, #20
16220     A7 1E 02 FB | 	rdlong	local01, fp
16224     14 4E 85 F1 | 	sub	fp, #20
16228     1C 1E 0E F2 | 	cmp	local01, #28 wz
1622c     14 4E 05 51 |  if_ne	add	fp, #20
16230     A7 18 02 5B |  if_ne	rdlong	arg04, fp
16234     14 4E 85 51 |  if_ne	sub	fp, #20
16238     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
1623c     70 00 90 5D |  if_ne	jmp	#LR__1810
16240     20 4E 05 F1 | 	add	fp, #32
16244     A7 1E 02 FB | 	rdlong	local01, fp
16248     20 4E 85 F1 | 	sub	fp, #32
1624c     1C 1E 0E F2 | 	cmp	local01, #28 wz
16250     20 4E 05 51 |  if_ne	add	fp, #32
16254     A7 18 02 5B |  if_ne	rdlong	arg04, fp
16258     20 4E 85 51 |  if_ne	sub	fp, #32
1625c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
16260     4C 00 90 5D |  if_ne	jmp	#LR__1810
16264     2C 4E 05 F1 | 	add	fp, #44
16268     A7 1E 02 FB | 	rdlong	local01, fp
1626c     2C 4E 85 F1 | 	sub	fp, #44
16270     1C 1E 0E F2 | 	cmp	local01, #28 wz
16274     2C 4E 05 51 |  if_ne	add	fp, #44
16278     A7 18 02 5B |  if_ne	rdlong	arg04, fp
1627c     2C 4E 85 51 |  if_ne	sub	fp, #44
16280     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
16284     28 00 90 5D |  if_ne	jmp	#LR__1810
16288     A7 12 02 FB | 	rdlong	arg01, fp
1628c     0C 4E 05 F1 | 	add	fp, #12
16290     A7 14 02 FB | 	rdlong	arg02, fp
16294     0C 4E 05 F1 | 	add	fp, #12
16298     A7 16 02 FB | 	rdlong	arg03, fp
1629c     0C 4E 05 F1 | 	add	fp, #12
162a0     A7 18 02 FB | 	rdlong	arg04, fp
162a4     24 4E 85 F1 | 	sub	fp, #36
162a8     AC 69 B0 FD | 	call	#_hg010b_spin2_fill
162ac                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
162ac     58 00 90 FD | 	jmp	#LR__1811
162b0                 | LR__1810
162b0     A7 12 02 F6 | 	mov	arg01, fp
162b4     00 D2 BF FD | 	call	#_converttoint
162b8     FD 20 02 F6 | 	mov	local02, result1
162bc     0C 4E 05 F1 | 	add	fp, #12
162c0     A7 12 02 F6 | 	mov	arg01, fp
162c4     0C 4E 85 F1 | 	sub	fp, #12
162c8     EC D1 BF FD | 	call	#_converttoint
162cc     FD 22 02 F6 | 	mov	local03, result1
162d0     18 4E 05 F1 | 	add	fp, #24
162d4     A7 12 02 F6 | 	mov	arg01, fp
162d8     18 4E 85 F1 | 	sub	fp, #24
162dc     D8 D1 BF FD | 	call	#_converttoint
162e0     FD 1E 02 F6 | 	mov	local01, result1
162e4     24 4E 05 F1 | 	add	fp, #36
162e8     A7 12 02 F6 | 	mov	arg01, fp
162ec     24 4E 85 F1 | 	sub	fp, #36
162f0     C4 D1 BF FD | 	call	#_converttoint
162f4     FD 18 02 F6 | 	mov	arg04, result1
162f8     10 13 02 F6 | 	mov	arg01, local02
162fc     11 15 02 F6 | 	mov	arg02, local03
16300     0F 17 02 F6 | 	mov	arg03, local01
16304     50 69 B0 FD | 	call	#_hg010b_spin2_fill
16308                 | LR__1811
16308     A7 F0 03 F6 | 	mov	ptra, fp
1630c     B2 00 A0 FD | 	call	#popregs_
16310                 | _do_fill_ret
16310     2D 00 64 FD | 	ret
16314                 | 
16314                 | ' 
16314                 | ' ' -------------------------- Draw a frane
16314                 | ' 
16314                 | ' sub do_frame
16314                 | _do_frame
16314     03 4A 05 F6 | 	mov	COUNT_, #3
16318     A8 00 A0 FD | 	call	#pushregs_
1631c     30 F0 07 F1 | 	add	ptra, #48
16320     3C 45 BF FD | 	call	#_pop
16324     FD 1A 02 F6 | 	mov	arg05, result1
16328     FE 18 02 F6 | 	mov	arg04, result2
1632c     FF 16 02 F6 | 	mov	arg03, result3
16330     24 4E 05 F1 | 	add	fp, #36
16334     A7 1A 62 FC | 	wrlong	arg05, fp
16338     04 4E 05 F1 | 	add	fp, #4
1633c     A7 18 62 FC | 	wrlong	arg04, fp
16340     04 4E 05 F1 | 	add	fp, #4
16344     A7 16 62 FC | 	wrlong	arg03, fp
16348     2C 4E 85 F1 | 	sub	fp, #44
1634c     10 45 BF FD | 	call	#_pop
16350     FD 1A 02 F6 | 	mov	arg05, result1
16354     FE 18 02 F6 | 	mov	arg04, result2
16358     FF 16 02 F6 | 	mov	arg03, result3
1635c     18 4E 05 F1 | 	add	fp, #24
16360     A7 1A 62 FC | 	wrlong	arg05, fp
16364     04 4E 05 F1 | 	add	fp, #4
16368     A7 18 62 FC | 	wrlong	arg04, fp
1636c     04 4E 05 F1 | 	add	fp, #4
16370     A7 16 62 FC | 	wrlong	arg03, fp
16374     20 4E 85 F1 | 	sub	fp, #32
16378     E4 44 BF FD | 	call	#_pop
1637c     FD 1A 02 F6 | 	mov	arg05, result1
16380     FE 18 02 F6 | 	mov	arg04, result2
16384     FF 1E 02 F6 | 	mov	local01, result3
16388     0C 4E 05 F1 | 	add	fp, #12
1638c     A7 1A 62 FC | 	wrlong	arg05, fp
16390     04 4E 05 F1 | 	add	fp, #4
16394     A7 18 62 FC | 	wrlong	arg04, fp
16398     04 4E 05 F1 | 	add	fp, #4
1639c     A7 1E 62 FC | 	wrlong	local01, fp
163a0     14 4E 85 F1 | 	sub	fp, #20
163a4     B8 44 BF FD | 	call	#_pop
163a8     A7 FA 61 FC | 	wrlong	result1, fp
163ac     04 4E 05 F1 | 	add	fp, #4
163b0     A7 FC 61 FC | 	wrlong	result2, fp
163b4     04 4E 05 F1 | 	add	fp, #4
163b8     A7 FE 61 FC | 	wrlong	result3, fp
163bc                 | ' 
163bc                 | ' t4=pop()
163bc                 | ' t3=pop()
163bc                 | ' t2=pop()
163bc                 | ' t1=pop()
163bc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
163bc     FF 1A 02 F6 | 	mov	arg05, result3
163c0     08 4E 85 F1 | 	sub	fp, #8
163c4     1C 1A 0E F2 | 	cmp	arg05, #28 wz
163c8     08 4E 05 51 |  if_ne	add	fp, #8
163cc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
163d0     08 4E 85 51 |  if_ne	sub	fp, #8
163d4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
163d8     A8 00 90 5D |  if_ne	jmp	#LR__1820
163dc     14 4E 05 F1 | 	add	fp, #20
163e0     A7 1E 02 FB | 	rdlong	local01, fp
163e4     14 4E 85 F1 | 	sub	fp, #20
163e8     1C 1E 0E F2 | 	cmp	local01, #28 wz
163ec     14 4E 05 51 |  if_ne	add	fp, #20
163f0     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
163f4     14 4E 85 51 |  if_ne	sub	fp, #20
163f8     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
163fc     84 00 90 5D |  if_ne	jmp	#LR__1820
16400     20 4E 05 F1 | 	add	fp, #32
16404     A7 1E 02 FB | 	rdlong	local01, fp
16408     20 4E 85 F1 | 	sub	fp, #32
1640c     1C 1E 0E F2 | 	cmp	local01, #28 wz
16410     20 4E 05 51 |  if_ne	add	fp, #32
16414     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
16418     20 4E 85 51 |  if_ne	sub	fp, #32
1641c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
16420     60 00 90 5D |  if_ne	jmp	#LR__1820
16424     2C 4E 05 F1 | 	add	fp, #44
16428     A7 1E 02 FB | 	rdlong	local01, fp
1642c     2C 4E 85 F1 | 	sub	fp, #44
16430     1C 1E 0E F2 | 	cmp	local01, #28 wz
16434     2C 4E 05 51 |  if_ne	add	fp, #44
16438     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
1643c     2C 4E 85 51 |  if_ne	sub	fp, #44
16440     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
16444     3C 00 90 5D |  if_ne	jmp	#LR__1820
16448     A7 12 02 FB | 	rdlong	arg01, fp
1644c     0C 4E 05 F1 | 	add	fp, #12
16450     A7 14 02 FB | 	rdlong	arg02, fp
16454     0C 4E 05 F1 | 	add	fp, #12
16458     A7 16 02 FB | 	rdlong	arg03, fp
1645c     0C 4E 05 F1 | 	add	fp, #12
16460     A7 18 02 FB | 	rdlong	arg04, fp
16464     24 4E 85 F1 | 	sub	fp, #36
16468     57 00 00 FF 
1646c     28 E4 05 F1 | 	add	objptr, ##44584
16470     F2 1A 02 FB | 	rdlong	arg05, objptr
16474     57 00 00 FF 
16478     28 E4 85 F1 | 	sub	objptr, ##44584
1647c     C4 6C B0 FD | 	call	#_hg010b_spin2_frame
16480                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
16480     6C 00 90 FD | 	jmp	#LR__1821
16484                 | LR__1820
16484     A7 12 02 F6 | 	mov	arg01, fp
16488     2C D0 BF FD | 	call	#_converttoint
1648c     FD 20 02 F6 | 	mov	local02, result1
16490     0C 4E 05 F1 | 	add	fp, #12
16494     A7 12 02 F6 | 	mov	arg01, fp
16498     0C 4E 85 F1 | 	sub	fp, #12
1649c     18 D0 BF FD | 	call	#_converttoint
164a0     FD 22 02 F6 | 	mov	local03, result1
164a4     18 4E 05 F1 | 	add	fp, #24
164a8     A7 12 02 F6 | 	mov	arg01, fp
164ac     18 4E 85 F1 | 	sub	fp, #24
164b0     04 D0 BF FD | 	call	#_converttoint
164b4     FD 1E 02 F6 | 	mov	local01, result1
164b8     24 4E 05 F1 | 	add	fp, #36
164bc     A7 12 02 F6 | 	mov	arg01, fp
164c0     24 4E 85 F1 | 	sub	fp, #36
164c4     F0 CF BF FD | 	call	#_converttoint
164c8     FD 18 02 F6 | 	mov	arg04, result1
164cc     57 00 00 FF 
164d0     28 E4 05 F1 | 	add	objptr, ##44584
164d4     F2 1A 02 FB | 	rdlong	arg05, objptr
164d8     57 00 00 FF 
164dc     28 E4 85 F1 | 	sub	objptr, ##44584
164e0     10 13 02 F6 | 	mov	arg01, local02
164e4     11 15 02 F6 | 	mov	arg02, local03
164e8     0F 17 02 F6 | 	mov	arg03, local01
164ec     54 6C B0 FD | 	call	#_hg010b_spin2_frame
164f0                 | LR__1821
164f0     A7 F0 03 F6 | 	mov	ptra, fp
164f4     B2 00 A0 FD | 	call	#popregs_
164f8                 | _do_frame_ret
164f8     2D 00 64 FD | 	ret
164fc                 | 
164fc                 | ' 
164fc                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
164fc                 | ' 
164fc                 | ' ' ------------------------- Print to the screem
164fc                 | ' 
164fc                 | ' sub do_print  
164fc                 | _do_print
164fc     0A 4A 05 F6 | 	mov	COUNT_, #10
16500     A8 00 A0 FD | 	call	#pushregs_
16504     00 24 06 F6 | 	mov	local04, #0
16508     54 43 BF FD | 	call	#_pop
1650c     FD 26 02 F6 | 	mov	local05, result1
16510     FE 28 02 F6 | 	mov	local06, result2
16514     FF 2A 02 F6 | 	mov	local07, result3
16518     13 1F 02 F6 | 	mov	local01, local05
1651c     14 21 02 F6 | 	mov	local02, local06
16520     15 23 02 F6 | 	mov	local03, local07
16524                 | '  
16524                 | ' r=0
16524                 | ' t1=pop() 
16524                 | ' 'print t1.result_type,t1.result.uresult
16524                 | ' 
16524                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
16524     21 22 0E F2 | 	cmp	local03, #33 wz
16528     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
1652c     20 00 90 5D |  if_ne	jmp	#LR__1830
16530     11 25 02 F6 | 	mov	local04, local03
16534     28 43 BF FD | 	call	#_pop
16538     FD 26 02 F6 | 	mov	local05, result1
1653c     FE 28 02 F6 | 	mov	local06, result2
16540     FF 2A 02 F6 | 	mov	local07, result3
16544     13 1F 02 F6 | 	mov	local01, local05
16548     14 21 02 F6 | 	mov	local02, local06
1654c     15 23 02 F6 | 	mov	local03, local07
16550                 | LR__1830
16550                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
16550     20 22 0E F2 | 	cmp	local03, #32 wz
16554     11 25 02 A6 |  if_e	mov	local04, local03
16558                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
16558     FF 22 0E F2 | 	cmp	local03, #255 wz
1655c     0C 00 90 5D |  if_ne	jmp	#LR__1831
16560     0F 13 02 F6 | 	mov	arg01, local01
16564     34 41 B0 FD | 	call	#_printerror
16568     4C 04 90 FD | 	jmp	#LR__1849
1656c                 | LR__1831
1656c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
1656c     2B 22 0E F2 | 	cmp	local03, #43 wz
16570     14 00 90 5D |  if_ne	jmp	#LR__1832
16574     0F 13 02 F6 | 	mov	arg01, local01
16578     18 87 BF FD | 	call	#_convertstring
1657c     FD 26 02 F6 | 	mov	local05, result1
16580     13 1F 02 F6 | 	mov	local01, local05
16584     1F 22 06 F6 | 	mov	local03, #31
16588                 | LR__1832
16588                 | ' 
16588                 | ' if r=print_mod_comma  then
16588     21 24 0E F2 | 	cmp	local04, #33 wz
1658c     AC 01 90 5D |  if_ne	jmp	#LR__1837
16590                 | '   if t1.result_type=result_int then print t1.result.iresult,
16590     1C 22 0E F2 | 	cmp	local03, #28 wz
16594     64 00 90 5D |  if_ne	jmp	#LR__1833
16598     00 12 06 F6 | 	mov	arg01, #0
1659c     10 DF B0 FD | 	call	#__system___getiolock_0484
165a0     FD 12 02 F6 | 	mov	arg01, result1
165a4     70 85 B0 FD | 	call	#__system___lockmem
165a8     00 28 06 F6 | 	mov	local06, #0
165ac     00 12 06 F6 | 	mov	arg01, #0
165b0     0F 15 02 F6 | 	mov	arg02, local01
165b4     00 16 06 F6 | 	mov	arg03, #0
165b8     0A 18 06 F6 | 	mov	arg04, #10
165bc     A4 92 B0 FD | 	call	#__system___basic_print_integer
165c0     FD 2A 02 F6 | 	mov	local07, result1
165c4     14 27 02 F6 | 	mov	local05, local06
165c8     15 27 02 F1 | 	add	local05, local07
165cc     00 2C 06 F6 | 	mov	local08, #0
165d0     00 12 06 F6 | 	mov	arg01, #0
165d4     09 14 06 F6 | 	mov	arg02, #9
165d8     00 16 06 F6 | 	mov	arg03, #0
165dc     E8 91 B0 FD | 	call	#__system___basic_print_char
165e0     FD 2E 02 F6 | 	mov	local09, result1
165e4     FD 26 02 F1 | 	add	local05, result1
165e8     00 12 06 F6 | 	mov	arg01, #0
165ec     C0 DE B0 FD | 	call	#__system___getiolock_0484
165f0     FD 00 68 FC | 	wrlong	#0, result1
165f4     00 FA 05 F6 | 	mov	result1, #0
165f8     00 30 06 F6 | 	mov	local10, #0
165fc                 | LR__1833
165fc                 | '   if t1.result_type=result_uint then print t1.result.uresult,
165fc     1D 22 0E F2 | 	cmp	local03, #29 wz
16600     64 00 90 5D |  if_ne	jmp	#LR__1834
16604     00 12 06 F6 | 	mov	arg01, #0
16608     A4 DE B0 FD | 	call	#__system___getiolock_0484
1660c     FD 12 02 F6 | 	mov	arg01, result1
16610     04 85 B0 FD | 	call	#__system___lockmem
16614     00 28 06 F6 | 	mov	local06, #0
16618     00 12 06 F6 | 	mov	arg01, #0
1661c     0F 15 02 F6 | 	mov	arg02, local01
16620     00 16 06 F6 | 	mov	arg03, #0
16624     0A 18 06 F6 | 	mov	arg04, #10
16628     78 92 B0 FD | 	call	#__system___basic_print_unsigned
1662c     FD 2A 02 F6 | 	mov	local07, result1
16630     14 27 02 F6 | 	mov	local05, local06
16634     15 27 02 F1 | 	add	local05, local07
16638     00 2C 06 F6 | 	mov	local08, #0
1663c     00 12 06 F6 | 	mov	arg01, #0
16640     09 14 06 F6 | 	mov	arg02, #9
16644     00 16 06 F6 | 	mov	arg03, #0
16648     7C 91 B0 FD | 	call	#__system___basic_print_char
1664c     FD 2E 02 F6 | 	mov	local09, result1
16650     FD 26 02 F1 | 	add	local05, result1
16654     00 12 06 F6 | 	mov	arg01, #0
16658     54 DE B0 FD | 	call	#__system___getiolock_0484
1665c     FD 00 68 FC | 	wrlong	#0, result1
16660     00 FA 05 F6 | 	mov	result1, #0
16664     00 30 06 F6 | 	mov	local10, #0
16668                 | LR__1834
16668                 | '   if t1.result_type=result_float then print t1.result.fresult,
16668     1E 22 0E F2 | 	cmp	local03, #30 wz
1666c     64 00 90 5D |  if_ne	jmp	#LR__1835
16670     00 12 06 F6 | 	mov	arg01, #0
16674     38 DE B0 FD | 	call	#__system___getiolock_0484
16678     FD 12 02 F6 | 	mov	arg01, result1
1667c     98 84 B0 FD | 	call	#__system___lockmem
16680     00 28 06 F6 | 	mov	local06, #0
16684     00 12 06 F6 | 	mov	arg01, #0
16688     0F 15 02 F6 | 	mov	arg02, local01
1668c     00 16 06 F6 | 	mov	arg03, #0
16690     23 18 06 F6 | 	mov	arg04, #35
16694     18 B6 B0 FD | 	call	#__system___basic_print_float
16698     FD 2A 02 F6 | 	mov	local07, result1
1669c     14 27 02 F6 | 	mov	local05, local06
166a0     15 27 02 F1 | 	add	local05, local07
166a4     00 2C 06 F6 | 	mov	local08, #0
166a8     00 12 06 F6 | 	mov	arg01, #0
166ac     09 14 06 F6 | 	mov	arg02, #9
166b0     00 16 06 F6 | 	mov	arg03, #0
166b4     10 91 B0 FD | 	call	#__system___basic_print_char
166b8     FD 2E 02 F6 | 	mov	local09, result1
166bc     FD 26 02 F1 | 	add	local05, result1
166c0     00 12 06 F6 | 	mov	arg01, #0
166c4     E8 DD B0 FD | 	call	#__system___getiolock_0484
166c8     FD 00 68 FC | 	wrlong	#0, result1
166cc     00 FA 05 F6 | 	mov	result1, #0
166d0     00 30 06 F6 | 	mov	local10, #0
166d4                 | LR__1835
166d4                 | '   if t1.result_type=result_string then print t1.result.sresult,
166d4     1F 22 0E F2 | 	cmp	local03, #31 wz
166d8     60 00 90 5D |  if_ne	jmp	#LR__1836
166dc     00 12 06 F6 | 	mov	arg01, #0
166e0     CC DD B0 FD | 	call	#__system___getiolock_0484
166e4     FD 12 02 F6 | 	mov	arg01, result1
166e8     2C 84 B0 FD | 	call	#__system___lockmem
166ec     00 28 06 F6 | 	mov	local06, #0
166f0     00 12 06 F6 | 	mov	arg01, #0
166f4     0F 15 02 F6 | 	mov	arg02, local01
166f8     00 16 06 F6 | 	mov	arg03, #0
166fc     20 91 B0 FD | 	call	#__system___basic_print_string
16700     FD 2A 02 F6 | 	mov	local07, result1
16704     14 27 02 F6 | 	mov	local05, local06
16708     15 27 02 F1 | 	add	local05, local07
1670c     00 2C 06 F6 | 	mov	local08, #0
16710     00 12 06 F6 | 	mov	arg01, #0
16714     09 14 06 F6 | 	mov	arg02, #9
16718     00 16 06 F6 | 	mov	arg03, #0
1671c     A8 90 B0 FD | 	call	#__system___basic_print_char
16720     FD 2E 02 F6 | 	mov	local09, result1
16724     FD 26 02 F1 | 	add	local05, result1
16728     00 12 06 F6 | 	mov	arg01, #0
1672c     80 DD B0 FD | 	call	#__system___getiolock_0484
16730     FD 00 68 FC | 	wrlong	#0, result1
16734     00 FA 05 F6 | 	mov	result1, #0
16738     00 30 06 F6 | 	mov	local10, #0
1673c                 | LR__1836
1673c                 | LR__1837
1673c                 | ' if r=print_mod_semicolon then 
1673c     22 24 0E F2 | 	cmp	local04, #34 wz
16740     1C 01 90 5D |  if_ne	jmp	#LR__1842
16744                 | '   if t1.result_type=result_int then print t1.result.iresult;
16744     1C 22 0E F2 | 	cmp	local03, #28 wz
16748     50 00 90 5D |  if_ne	jmp	#LR__1838
1674c     00 12 06 F6 | 	mov	arg01, #0
16750     5C DD B0 FD | 	call	#__system___getiolock_0484
16754     FD 12 02 F6 | 	mov	arg01, result1
16758     BC 83 B0 FD | 	call	#__system___lockmem
1675c     00 28 06 F6 | 	mov	local06, #0
16760     00 30 06 F6 | 	mov	local10, #0
16764     0A 2C 06 F6 | 	mov	local08, #10
16768     00 12 06 F6 | 	mov	arg01, #0
1676c     0F 15 02 F6 | 	mov	arg02, local01
16770     00 16 06 F6 | 	mov	arg03, #0
16774     0A 18 06 F6 | 	mov	arg04, #10
16778     E8 90 B0 FD | 	call	#__system___basic_print_integer
1677c     FD 2A 02 F6 | 	mov	local07, result1
16780     14 27 02 F6 | 	mov	local05, local06
16784     15 27 02 F1 | 	add	local05, local07
16788     00 12 06 F6 | 	mov	arg01, #0
1678c     20 DD B0 FD | 	call	#__system___getiolock_0484
16790     FD 00 68 FC | 	wrlong	#0, result1
16794     00 FA 05 F6 | 	mov	result1, #0
16798     00 2E 06 F6 | 	mov	local09, #0
1679c                 | LR__1838
1679c                 | '   if t1.result_type=result_uint then print t1.result.uresult;
1679c     1D 22 0E F2 | 	cmp	local03, #29 wz
167a0     50 00 90 5D |  if_ne	jmp	#LR__1839
167a4     00 12 06 F6 | 	mov	arg01, #0
167a8     04 DD B0 FD | 	call	#__system___getiolock_0484
167ac     FD 12 02 F6 | 	mov	arg01, result1
167b0     64 83 B0 FD | 	call	#__system___lockmem
167b4     00 28 06 F6 | 	mov	local06, #0
167b8     00 30 06 F6 | 	mov	local10, #0
167bc     0A 2C 06 F6 | 	mov	local08, #10
167c0     00 12 06 F6 | 	mov	arg01, #0
167c4     0F 15 02 F6 | 	mov	arg02, local01
167c8     00 16 06 F6 | 	mov	arg03, #0
167cc     0A 18 06 F6 | 	mov	arg04, #10
167d0     D0 90 B0 FD | 	call	#__system___basic_print_unsigned
167d4     FD 2A 02 F6 | 	mov	local07, result1
167d8     14 27 02 F6 | 	mov	local05, local06
167dc     15 27 02 F1 | 	add	local05, local07
167e0     00 12 06 F6 | 	mov	arg01, #0
167e4     C8 DC B0 FD | 	call	#__system___getiolock_0484
167e8     FD 00 68 FC | 	wrlong	#0, result1
167ec     00 FA 05 F6 | 	mov	result1, #0
167f0     00 2E 06 F6 | 	mov	local09, #0
167f4                 | LR__1839
167f4                 | '   if t1.result_type=result_float then print t1.result.fresult;
167f4     1E 22 0E F2 | 	cmp	local03, #30 wz
167f8     30 00 90 5D |  if_ne	jmp	#LR__1840
167fc     00 12 06 F6 | 	mov	arg01, #0
16800     AC DC B0 FD | 	call	#__system___getiolock_0484
16804     FD 12 02 F6 | 	mov	arg01, result1
16808     0C 83 B0 FD | 	call	#__system___lockmem
1680c     00 12 06 F6 | 	mov	arg01, #0
16810     0F 15 02 F6 | 	mov	arg02, local01
16814     00 16 06 F6 | 	mov	arg03, #0
16818     23 18 06 F6 | 	mov	arg04, #35
1681c     90 B4 B0 FD | 	call	#__system___basic_print_float
16820     00 12 06 F6 | 	mov	arg01, #0
16824     88 DC B0 FD | 	call	#__system___getiolock_0484
16828     FD 00 68 FC | 	wrlong	#0, result1
1682c                 | LR__1840
1682c                 | '   if t1.result_type=result_string then print t1.result.sresult;
1682c     1F 22 0E F2 | 	cmp	local03, #31 wz
16830     2C 00 90 5D |  if_ne	jmp	#LR__1841
16834     00 12 06 F6 | 	mov	arg01, #0
16838     74 DC B0 FD | 	call	#__system___getiolock_0484
1683c     FD 12 02 F6 | 	mov	arg01, result1
16840     D4 82 B0 FD | 	call	#__system___lockmem
16844     00 12 06 F6 | 	mov	arg01, #0
16848     0F 15 02 F6 | 	mov	arg02, local01
1684c     00 16 06 F6 | 	mov	arg03, #0
16850     CC 8F B0 FD | 	call	#__system___basic_print_string
16854     00 12 06 F6 | 	mov	arg01, #0
16858     54 DC B0 FD | 	call	#__system___getiolock_0484
1685c     FD 00 68 FC | 	wrlong	#0, result1
16860                 | LR__1841
16860                 | LR__1842
16860                 | ' if r=0 then 
16860     00 24 0E F2 | 	cmp	local04, #0 wz
16864     1C 01 90 5D |  if_ne	jmp	#LR__1847
16868                 | '   if t1.result_type=result_int then print t1.result.iresult
16868     1C 22 0E F2 | 	cmp	local03, #28 wz
1686c     40 00 90 5D |  if_ne	jmp	#LR__1843
16870     00 12 06 F6 | 	mov	arg01, #0
16874     38 DC B0 FD | 	call	#__system___getiolock_0484
16878     FD 12 02 F6 | 	mov	arg01, result1
1687c     98 82 B0 FD | 	call	#__system___lockmem
16880     00 12 06 F6 | 	mov	arg01, #0
16884     0F 15 02 F6 | 	mov	arg02, local01
16888     00 16 06 F6 | 	mov	arg03, #0
1688c     0A 18 06 F6 | 	mov	arg04, #10
16890     D0 8F B0 FD | 	call	#__system___basic_print_integer
16894     00 12 06 F6 | 	mov	arg01, #0
16898     0A 14 06 F6 | 	mov	arg02, #10
1689c     00 16 06 F6 | 	mov	arg03, #0
168a0     24 8F B0 FD | 	call	#__system___basic_print_char
168a4     00 12 06 F6 | 	mov	arg01, #0
168a8     04 DC B0 FD | 	call	#__system___getiolock_0484
168ac     FD 00 68 FC | 	wrlong	#0, result1
168b0                 | LR__1843
168b0                 | '   if t1.result_type=result_uint then print t1.result.uresult
168b0     1D 22 0E F2 | 	cmp	local03, #29 wz
168b4     40 00 90 5D |  if_ne	jmp	#LR__1844
168b8     00 12 06 F6 | 	mov	arg01, #0
168bc     F0 DB B0 FD | 	call	#__system___getiolock_0484
168c0     FD 12 02 F6 | 	mov	arg01, result1
168c4     50 82 B0 FD | 	call	#__system___lockmem
168c8     00 12 06 F6 | 	mov	arg01, #0
168cc     0F 15 02 F6 | 	mov	arg02, local01
168d0     00 16 06 F6 | 	mov	arg03, #0
168d4     0A 18 06 F6 | 	mov	arg04, #10
168d8     C8 8F B0 FD | 	call	#__system___basic_print_unsigned
168dc     00 12 06 F6 | 	mov	arg01, #0
168e0     0A 14 06 F6 | 	mov	arg02, #10
168e4     00 16 06 F6 | 	mov	arg03, #0
168e8     DC 8E B0 FD | 	call	#__system___basic_print_char
168ec     00 12 06 F6 | 	mov	arg01, #0
168f0     BC DB B0 FD | 	call	#__system___getiolock_0484
168f4     FD 00 68 FC | 	wrlong	#0, result1
168f8                 | LR__1844
168f8                 | '   if t1.result_type=result_float then print t1.result.fresult
168f8     1E 22 0E F2 | 	cmp	local03, #30 wz
168fc     40 00 90 5D |  if_ne	jmp	#LR__1845
16900     00 12 06 F6 | 	mov	arg01, #0
16904     A8 DB B0 FD | 	call	#__system___getiolock_0484
16908     FD 12 02 F6 | 	mov	arg01, result1
1690c     08 82 B0 FD | 	call	#__system___lockmem
16910     00 12 06 F6 | 	mov	arg01, #0
16914     0F 15 02 F6 | 	mov	arg02, local01
16918     00 16 06 F6 | 	mov	arg03, #0
1691c     23 18 06 F6 | 	mov	arg04, #35
16920     8C B3 B0 FD | 	call	#__system___basic_print_float
16924     00 12 06 F6 | 	mov	arg01, #0
16928     0A 14 06 F6 | 	mov	arg02, #10
1692c     00 16 06 F6 | 	mov	arg03, #0
16930     94 8E B0 FD | 	call	#__system___basic_print_char
16934     00 12 06 F6 | 	mov	arg01, #0
16938     74 DB B0 FD | 	call	#__system___getiolock_0484
1693c     FD 00 68 FC | 	wrlong	#0, result1
16940                 | LR__1845
16940                 | '   if t1.result_type=result_string then print t1.result.sresult
16940     1F 22 0E F2 | 	cmp	local03, #31 wz
16944     3C 00 90 5D |  if_ne	jmp	#LR__1846
16948     00 12 06 F6 | 	mov	arg01, #0
1694c     60 DB B0 FD | 	call	#__system___getiolock_0484
16950     FD 12 02 F6 | 	mov	arg01, result1
16954     C0 81 B0 FD | 	call	#__system___lockmem
16958     00 12 06 F6 | 	mov	arg01, #0
1695c     0F 15 02 F6 | 	mov	arg02, local01
16960     00 16 06 F6 | 	mov	arg03, #0
16964     B8 8E B0 FD | 	call	#__system___basic_print_string
16968     00 12 06 F6 | 	mov	arg01, #0
1696c     0A 14 06 F6 | 	mov	arg02, #10
16970     00 16 06 F6 | 	mov	arg03, #0
16974     50 8E B0 FD | 	call	#__system___basic_print_char
16978     00 12 06 F6 | 	mov	arg01, #0
1697c     30 DB B0 FD | 	call	#__system___getiolock_0484
16980     FD 00 68 FC | 	wrlong	#0, result1
16984                 | LR__1846
16984                 | LR__1847
16984                 | ' if r=print_mod_empty then print
16984     20 24 0E F2 | 	cmp	local04, #32 wz
16988     2C 00 90 5D |  if_ne	jmp	#LR__1848
1698c     00 12 06 F6 | 	mov	arg01, #0
16990     1C DB B0 FD | 	call	#__system___getiolock_0484
16994     FD 12 02 F6 | 	mov	arg01, result1
16998     7C 81 B0 FD | 	call	#__system___lockmem
1699c     00 12 06 F6 | 	mov	arg01, #0
169a0     0A 14 06 F6 | 	mov	arg02, #10
169a4     00 16 06 F6 | 	mov	arg03, #0
169a8     1C 8E B0 FD | 	call	#__system___basic_print_char
169ac     00 12 06 F6 | 	mov	arg01, #0
169b0     FC DA B0 FD | 	call	#__system___getiolock_0484
169b4     FD 00 68 FC | 	wrlong	#0, result1
169b8                 | LR__1848
169b8                 | LR__1849
169b8     A7 F0 03 F6 | 	mov	ptra, fp
169bc     B2 00 A0 FD | 	call	#popregs_
169c0                 | _do_print_ret
169c0     2D 00 64 FD | 	ret
169c4                 | 
169c4                 | ' 
169c4                 | ' 
169c4                 | ' sub do_paper
169c4                 | _do_paper
169c4     03 4A 05 F6 | 	mov	COUNT_, #3
169c8     A8 00 A0 FD | 	call	#pushregs_
169cc     90 3E BF FD | 	call	#_pop
169d0     FD 1E 02 F6 | 	mov	local01, result1
169d4     FE 20 02 F6 | 	mov	local02, result2
169d8     FF 22 02 F6 | 	mov	local03, result3
169dc                 | ' t1=pop() 
169dc                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
169dc     1E 22 0E F2 | 	cmp	local03, #30 wz
169e0     10 00 90 5D |  if_ne	jmp	#LR__1850
169e4     0F 13 02 F6 | 	mov	arg01, local01
169e8     00 14 06 F6 | 	mov	arg02, #0
169ec     70 B1 B0 FD | 	call	#__system___float_tointeger
169f0     FD 1E 02 F6 | 	mov	local01, result1
169f4                 | LR__1850
169f4                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
169f4     1F 22 0E F2 | 	cmp	local03, #31 wz
169f8     18 00 90 5D |  if_ne	jmp	#LR__1851
169fc     0F 13 02 F6 | 	mov	arg01, local01
16a00     7C B4 B0 FD | 	call	#__system____builtin_atof
16a04     FD 12 02 F6 | 	mov	arg01, result1
16a08     00 14 06 F6 | 	mov	arg02, #0
16a0c     50 B1 B0 FD | 	call	#__system___float_tointeger
16a10     FD 1E 02 F6 | 	mov	local01, result1
16a14                 | LR__1851
16a14     57 00 00 FF 
16a18     38 E4 05 F1 | 	add	objptr, ##44600
16a1c     F2 1E 62 FC | 	wrlong	local01, objptr
16a20     04 E4 05 F1 | 	add	objptr, #4
16a24     F2 12 02 FB | 	rdlong	arg01, objptr
16a28                 | ' 
16a28                 | ' write_color:=ff
16a28     56 00 00 FF 
16a2c     FB E5 85 F1 | 	sub	objptr, ##44539
16a30     F2 12 62 FC | 	wrlong	arg01, objptr
16a34                 | ' write_background:=bb
16a34     04 E4 05 F1 | 	add	objptr, #4
16a38     F2 1E 62 FC | 	wrlong	local01, objptr
16a3c     45 E4 85 F1 | 	sub	objptr, #69
16a40     A7 F0 03 F6 | 	mov	ptra, fp
16a44     B2 00 A0 FD | 	call	#popregs_
16a48                 | _do_paper_ret
16a48     2D 00 64 FD | 	ret
16a4c                 | 
16a4c                 | ' 
16a4c                 | ' sub do_ink
16a4c                 | _do_ink
16a4c     03 4A 05 F6 | 	mov	COUNT_, #3
16a50     A8 00 A0 FD | 	call	#pushregs_
16a54     08 3E BF FD | 	call	#_pop
16a58     FD 1E 02 F6 | 	mov	local01, result1
16a5c     FE 20 02 F6 | 	mov	local02, result2
16a60     FF 22 02 F6 | 	mov	local03, result3
16a64                 | ' t1=pop() 
16a64                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
16a64     1E 22 0E F2 | 	cmp	local03, #30 wz
16a68     10 00 90 5D |  if_ne	jmp	#LR__1860
16a6c     0F 13 02 F6 | 	mov	arg01, local01
16a70     00 14 06 F6 | 	mov	arg02, #0
16a74     E8 B0 B0 FD | 	call	#__system___float_tointeger
16a78     FD 1E 02 F6 | 	mov	local01, result1
16a7c                 | LR__1860
16a7c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
16a7c     1F 22 0E F2 | 	cmp	local03, #31 wz
16a80     18 00 90 5D |  if_ne	jmp	#LR__1861
16a84     0F 13 02 F6 | 	mov	arg01, local01
16a88     F4 B3 B0 FD | 	call	#__system____builtin_atof
16a8c     FD 12 02 F6 | 	mov	arg01, result1
16a90     00 14 06 F6 | 	mov	arg02, #0
16a94     C8 B0 B0 FD | 	call	#__system___float_tointeger
16a98     FD 1E 02 F6 | 	mov	local01, result1
16a9c                 | LR__1861
16a9c     57 00 00 FF 
16aa0     3C E4 05 F1 | 	add	objptr, ##44604
16aa4     F2 1E 62 FC | 	wrlong	local01, objptr
16aa8     04 E4 85 F1 | 	sub	objptr, #4
16aac     F2 14 02 FB | 	rdlong	arg02, objptr
16ab0                 | ' 
16ab0                 | ' write_color:=ff
16ab0     56 00 00 FF 
16ab4     F7 E5 85 F1 | 	sub	objptr, ##44535
16ab8     F2 1E 62 FC | 	wrlong	local01, objptr
16abc                 | ' write_background:=bb
16abc     04 E4 05 F1 | 	add	objptr, #4
16ac0     F2 14 62 FC | 	wrlong	arg02, objptr
16ac4     56 00 00 FF 
16ac8     F7 E5 05 F1 | 	add	objptr, ##44535
16acc     F2 12 02 FB | 	rdlong	arg01, objptr
16ad0     57 00 00 FF 
16ad4     3C E4 85 F1 | 	sub	objptr, ##44604
16ad8     1C 58 B0 FD | 	call	#_hg010b_spin2_setcursorcolor
16adc     A7 F0 03 F6 | 	mov	ptra, fp
16ae0     B2 00 A0 FD | 	call	#popregs_
16ae4                 | _do_ink_ret
16ae4     2D 00 64 FD | 	ret
16ae8                 | 
16ae8                 | ' 
16ae8                 | ' 
16ae8                 | ' sub do_font
16ae8                 | _do_font
16ae8     03 4A 05 F6 | 	mov	COUNT_, #3
16aec     A8 00 A0 FD | 	call	#pushregs_
16af0     6C 3D BF FD | 	call	#_pop
16af4     FD 1E 02 F6 | 	mov	local01, result1
16af8     FE 20 02 F6 | 	mov	local02, result2
16afc     FF 22 02 F6 | 	mov	local03, result3
16b00                 | ' t1=pop() 
16b00                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
16b00     1E 22 0E F2 | 	cmp	local03, #30 wz
16b04     10 00 90 5D |  if_ne	jmp	#LR__1870
16b08     0F 13 02 F6 | 	mov	arg01, local01
16b0c     00 14 06 F6 | 	mov	arg02, #0
16b10     4C B0 B0 FD | 	call	#__system___float_tointeger
16b14     FD 1E 02 F6 | 	mov	local01, result1
16b18                 | LR__1870
16b18                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
16b18     1F 22 0E F2 | 	cmp	local03, #31 wz
16b1c     18 00 90 5D |  if_ne	jmp	#LR__1871
16b20     0F 13 02 F6 | 	mov	arg01, local01
16b24     58 B3 B0 FD | 	call	#__system____builtin_atof
16b28     FD 12 02 F6 | 	mov	arg01, result1
16b2c     00 14 06 F6 | 	mov	arg02, #0
16b30     2C B0 B0 FD | 	call	#__system___float_tointeger
16b34     FD 1E 02 F6 | 	mov	local01, result1
16b38                 | LR__1871
16b38     57 00 00 FF 
16b3c     40 E4 05 F1 | 	add	objptr, ##44608
16b40     F2 1E 62 FC | 	wrlong	local01, objptr
16b44     57 00 00 FF 
16b48     40 E4 85 F1 | 	sub	objptr, ##44608
16b4c     02 1E 66 F0 | 	shl	local01, #2
16b50     0F 13 02 F6 | 	mov	arg01, local01
16b54     E4 67 B0 FD | 	call	#_hg010b_spin2_setfontfamily
16b58     A7 F0 03 F6 | 	mov	ptra, fp
16b5c     B2 00 A0 FD | 	call	#popregs_
16b60                 | _do_font_ret
16b60     2D 00 64 FD | 	ret
16b64                 | 
16b64                 | ' 
16b64                 | ' sub do_mode
16b64                 | _do_mode
16b64     05 4A 05 F6 | 	mov	COUNT_, #5
16b68     A8 00 A0 FD | 	call	#pushregs_
16b6c     F0 3C BF FD | 	call	#_pop
16b70     FD 1E 02 F6 | 	mov	local01, result1
16b74     FE 20 02 F6 | 	mov	local02, result2
16b78     FF 22 02 F6 | 	mov	local03, result3
16b7c                 | ' t1=pop() 
16b7c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
16b7c     1E 22 0E F2 | 	cmp	local03, #30 wz
16b80     10 00 90 5D |  if_ne	jmp	#LR__1880
16b84     0F 13 02 F6 | 	mov	arg01, local01
16b88     00 14 06 F6 | 	mov	arg02, #0
16b8c     D0 AF B0 FD | 	call	#__system___float_tointeger
16b90     FD 1E 02 F6 | 	mov	local01, result1
16b94                 | LR__1880
16b94                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
16b94     1F 22 0E F2 | 	cmp	local03, #31 wz
16b98     18 00 90 5D |  if_ne	jmp	#LR__1881
16b9c     0F 13 02 F6 | 	mov	arg01, local01
16ba0     DC B2 B0 FD | 	call	#__system____builtin_atof
16ba4     FD 12 02 F6 | 	mov	arg01, result1
16ba8     00 14 06 F6 | 	mov	arg02, #0
16bac     B0 AF B0 FD | 	call	#__system___float_tointeger
16bb0     FD 1E 02 F6 | 	mov	local01, result1
16bb4                 | LR__1881
16bb4                 | ' select case t1.result.iresult
16bb4     0F 25 02 F6 | 	mov	local04, local01
16bb8     05 24 26 F3 | 	fle	local04, #5
16bbc     30 24 62 FD | 	jmprel	local04
16bc0                 | LR__1882
16bc0     14 00 90 FD | 	jmp	#LR__1883
16bc4     A8 00 90 FD | 	jmp	#LR__1884
16bc8     10 01 90 FD | 	jmp	#LR__1885
16bcc     78 01 90 FD | 	jmp	#LR__1886
16bd0     E0 01 90 FD | 	jmp	#LR__1887
16bd4     70 02 90 FD | 	jmp	#LR__1888
16bd8                 | LR__1883
16bd8     57 00 00 FF 
16bdc     40 E4 05 F1 | 	add	objptr, ##44608
16be0     F2 02 68 FC | 	wrlong	#1, objptr
16be4     04 E4 85 F1 | 	sub	objptr, #4
16be8     F2 34 69 FC | 	wrlong	#154, objptr
16bec     21 00 00 FF 
16bf0     B4 E4 05 F1 | 	add	objptr, ##17076
16bf4     F2 02 68 FC | 	wrlong	#1, objptr
16bf8     21 00 00 FF 
16bfc     B8 E4 85 F1 | 	sub	objptr, ##17080
16c00     F2 26 69 FC | 	wrlong	#147, objptr
16c04     57 00 00 FF 
16c08     38 E4 85 F1 | 	sub	objptr, ##44600
16c0c     04 12 06 F6 | 	mov	arg01, #4
16c10     28 67 B0 FD | 	call	#_hg010b_spin2_setfontfamily
16c14     57 00 00 FF 
16c18     3C E4 05 F1 | 	add	objptr, ##44604
16c1c     F2 12 02 FB | 	rdlong	arg01, objptr
16c20     04 E4 85 F1 | 	sub	objptr, #4
16c24     F2 14 02 FB | 	rdlong	arg02, objptr
16c28                 | ' 
16c28                 | ' write_color:=ff
16c28     56 00 00 FF 
16c2c     F7 E5 85 F1 | 	sub	objptr, ##44535
16c30     F2 12 62 FC | 	wrlong	arg01, objptr
16c34                 | ' write_background:=bb
16c34     04 E4 05 F1 | 	add	objptr, #4
16c38     F2 14 62 FC | 	wrlong	arg02, objptr
16c3c     01 00 00 FF 
16c40     00 EA 05 F1 | 	add	ptr__dat__, ##512
16c44     79 00 00 FF 
16c48     4F E5 05 F1 | 	add	objptr, ##62287
16c4c     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
16c50     04 E4 85 F1 | 	sub	objptr, #4
16c54     03 00 80 FF 
16c58     F2 30 69 FC | 	wrlong	##1688, objptr
16c5c     79 00 00 FF 
16c60     90 E5 85 F1 | 	sub	objptr, ##62352
16c64     01 00 00 FF 
16c68     00 EA 85 F1 | 	sub	ptr__dat__, ##512
16c6c     D8 01 90 FD | 	jmp	#LR__1888
16c70                 | LR__1884
16c70     57 00 00 FF 
16c74     40 E4 05 F1 | 	add	objptr, ##44608
16c78     F2 00 68 FC | 	wrlong	#0, objptr
16c7c     04 E4 85 F1 | 	sub	objptr, #4
16c80     F2 2E 68 FC | 	wrlong	#23, objptr
16c84     21 00 00 FF 
16c88     B4 E4 05 F1 | 	add	objptr, ##17076
16c8c     F2 00 68 FC | 	wrlong	#0, objptr
16c90     21 00 00 FF 
16c94     B8 E4 85 F1 | 	sub	objptr, ##17080
16c98     F2 00 68 FC | 	wrlong	#0, objptr
16c9c     57 00 00 FF 
16ca0     38 E4 85 F1 | 	sub	objptr, ##44600
16ca4     00 12 06 F6 | 	mov	arg01, #0
16ca8     90 66 B0 FD | 	call	#_hg010b_spin2_setfontfamily
16cac     57 00 00 FF 
16cb0     3C E4 05 F1 | 	add	objptr, ##44604
16cb4     F2 12 02 FB | 	rdlong	arg01, objptr
16cb8     04 E4 85 F1 | 	sub	objptr, #4
16cbc     F2 14 02 FB | 	rdlong	arg02, objptr
16cc0                 | ' 
16cc0                 | ' write_color:=ff
16cc0     56 00 00 FF 
16cc4     F7 E5 85 F1 | 	sub	objptr, ##44535
16cc8     F2 12 62 FC | 	wrlong	arg01, objptr
16ccc                 | ' write_background:=bb
16ccc     04 E4 05 F1 | 	add	objptr, #4
16cd0     F2 14 62 FC | 	wrlong	arg02, objptr
16cd4     45 E4 85 F1 | 	sub	objptr, #69
16cd8     6C 01 90 FD | 	jmp	#LR__1888
16cdc                 | LR__1885
16cdc     57 00 00 FF 
16ce0     40 E4 05 F1 | 	add	objptr, ##44608
16ce4     F2 00 68 FC | 	wrlong	#0, objptr
16ce8     04 E4 85 F1 | 	sub	objptr, #4
16cec     F2 6A 69 FC | 	wrlong	#181, objptr
16cf0     21 00 00 FF 
16cf4     B4 E4 05 F1 | 	add	objptr, ##17076
16cf8     F2 00 68 FC | 	wrlong	#0, objptr
16cfc     21 00 00 FF 
16d00     B8 E4 85 F1 | 	sub	objptr, ##17080
16d04     F2 00 68 FC | 	wrlong	#0, objptr
16d08     57 00 00 FF 
16d0c     38 E4 85 F1 | 	sub	objptr, ##44600
16d10     00 12 06 F6 | 	mov	arg01, #0
16d14     24 66 B0 FD | 	call	#_hg010b_spin2_setfontfamily
16d18     57 00 00 FF 
16d1c     3C E4 05 F1 | 	add	objptr, ##44604
16d20     F2 12 02 FB | 	rdlong	arg01, objptr
16d24     04 E4 85 F1 | 	sub	objptr, #4
16d28     F2 14 02 FB | 	rdlong	arg02, objptr
16d2c                 | ' 
16d2c                 | ' write_color:=ff
16d2c     56 00 00 FF 
16d30     F7 E5 85 F1 | 	sub	objptr, ##44535
16d34     F2 12 62 FC | 	wrlong	arg01, objptr
16d38                 | ' write_background:=bb
16d38     04 E4 05 F1 | 	add	objptr, #4
16d3c     F2 14 62 FC | 	wrlong	arg02, objptr
16d40     45 E4 85 F1 | 	sub	objptr, #69
16d44     00 01 90 FD | 	jmp	#LR__1888
16d48                 | LR__1886
16d48     57 00 00 FF 
16d4c     40 E4 05 F1 | 	add	objptr, ##44608
16d50     F2 00 68 FC | 	wrlong	#0, objptr
16d54     04 E4 85 F1 | 	sub	objptr, #4
16d58     F2 1E 68 FC | 	wrlong	#15, objptr
16d5c     21 00 00 FF 
16d60     B4 E4 05 F1 | 	add	objptr, ##17076
16d64     F2 00 68 FC | 	wrlong	#0, objptr
16d68     21 00 00 FF 
16d6c     B8 E4 85 F1 | 	sub	objptr, ##17080
16d70     F2 00 68 FC | 	wrlong	#0, objptr
16d74     57 00 00 FF 
16d78     38 E4 85 F1 | 	sub	objptr, ##44600
16d7c     00 12 06 F6 | 	mov	arg01, #0
16d80     B8 65 B0 FD | 	call	#_hg010b_spin2_setfontfamily
16d84     57 00 00 FF 
16d88     3C E4 05 F1 | 	add	objptr, ##44604
16d8c     F2 12 02 FB | 	rdlong	arg01, objptr
16d90     04 E4 85 F1 | 	sub	objptr, #4
16d94     F2 14 02 FB | 	rdlong	arg02, objptr
16d98                 | ' 
16d98                 | ' write_color:=ff
16d98     56 00 00 FF 
16d9c     F7 E5 85 F1 | 	sub	objptr, ##44535
16da0     F2 12 62 FC | 	wrlong	arg01, objptr
16da4                 | ' write_background:=bb
16da4     04 E4 05 F1 | 	add	objptr, #4
16da8     F2 14 62 FC | 	wrlong	arg02, objptr
16dac     45 E4 85 F1 | 	sub	objptr, #69
16db0     94 00 90 FD | 	jmp	#LR__1888
16db4                 | LR__1887
16db4     57 00 00 FF 
16db8     40 E4 05 F1 | 	add	objptr, ##44608
16dbc     F2 02 68 FC | 	wrlong	#1, objptr
16dc0     04 E4 85 F1 | 	sub	objptr, #4
16dc4     F2 02 68 FC | 	wrlong	#1, objptr
16dc8     21 00 00 FF 
16dcc     B4 E4 05 F1 | 	add	objptr, ##17076
16dd0     F2 02 68 FC | 	wrlong	#1, objptr
16dd4     21 00 00 FF 
16dd8     B8 E4 85 F1 | 	sub	objptr, ##17080
16ddc     F2 1C 68 FC | 	wrlong	#14, objptr
16de0     57 00 00 FF 
16de4     38 E4 85 F1 | 	sub	objptr, ##44600
16de8     04 12 06 F6 | 	mov	arg01, #4
16dec     4C 65 B0 FD | 	call	#_hg010b_spin2_setfontfamily
16df0     57 00 00 FF 
16df4     3C E4 05 F1 | 	add	objptr, ##44604
16df8     F2 12 02 FB | 	rdlong	arg01, objptr
16dfc     04 E4 85 F1 | 	sub	objptr, #4
16e00     F2 14 02 FB | 	rdlong	arg02, objptr
16e04                 | ' 
16e04                 | ' write_color:=ff
16e04     56 00 00 FF 
16e08     F7 E5 85 F1 | 	sub	objptr, ##44535
16e0c     F2 12 62 FC | 	wrlong	arg01, objptr
16e10                 | ' write_background:=bb
16e10     04 E4 05 F1 | 	add	objptr, #4
16e14     F2 14 62 FC | 	wrlong	arg02, objptr
16e18     07 00 00 FF 
16e1c     8A EB 05 F1 | 	add	ptr__dat__, ##3978
16e20     79 00 00 FF 
16e24     4F E5 05 F1 | 	add	objptr, ##62287
16e28     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
16e2c     04 E4 85 F1 | 	sub	objptr, #4
16e30     03 00 80 FF 
16e34     F2 30 69 FC | 	wrlong	##1688, objptr
16e38     79 00 00 FF 
16e3c     90 E5 85 F1 | 	sub	objptr, ##62352
16e40     07 00 00 FF 
16e44     8A EB 85 F1 | 	sub	ptr__dat__, ##3978
16e48                 | LR__1888
16e48     79 00 00 FF 
16e4c     8C E5 05 F1 | 	add	objptr, ##62348
16e50     F2 1E 62 FC | 	wrlong	local01, objptr
16e54     04 E4 85 F1 | 	sub	objptr, #4
16e58     F2 12 02 FB | 	rdlong	arg01, objptr
16e5c     16 00 00 FF 
16e60     2C E5 85 F1 | 	sub	objptr, ##11564
16e64     F2 26 02 FB | 	rdlong	local05, objptr
16e68     63 00 00 FF 
16e6c     5C E4 85 F1 | 	sub	objptr, ##50780
16e70     13 13 82 F1 | 	sub	arg01, local05
16e74     00 14 06 F6 | 	mov	arg02, #0
16e78     0A 16 06 F6 | 	mov	arg03, #10
16e7c     34 9F B0 FD | 	call	#__system__Number_S
16e80     FD 12 02 F6 | 	mov	arg01, result1
16e84     74 01 00 FF 
16e88     4A 14 06 F6 | 	mov	arg02, ##@LR__5183
16e8c     E4 7C B0 FD | 	call	#__system___string_concat
16e90     78 00 00 FF 
16e94     EC E4 05 F1 | 	add	objptr, ##61676
16e98     F2 FA 61 FC | 	wrlong	result1, objptr
16e9c     21 00 00 FF 
16ea0     B0 E4 85 F1 | 	sub	objptr, ##17072
16ea4     F2 12 02 FB | 	rdlong	arg01, objptr
16ea8     04 E4 85 F1 | 	sub	objptr, #4
16eac     F2 14 02 FB | 	rdlong	arg02, objptr
16eb0     57 00 00 FF 
16eb4     38 E4 85 F1 | 	sub	objptr, ##44600
16eb8     D0 65 B0 FD | 	call	#_hg010b_spin2_cls
16ebc     74 01 00 FF 
16ec0     5C 12 06 F6 | 	mov	arg01, ##@LR__5184
16ec4                 | ' 
16ec4                 | ' write(text)
16ec4     84 69 B0 FD | 	call	#_hg010b_spin2_write
16ec8                 | ' crlf
16ec8     4C 6C B0 FD | 	call	#_hg010b_spin2_crlf
16ecc     18 00 00 FF 
16ed0     4C EB 05 F1 | 	add	ptr__dat__, ##12620
16ed4     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
16ed8     18 00 00 FF 
16edc     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
16ee0                 | ' 
16ee0                 | ' write(text)
16ee0     68 69 B0 FD | 	call	#_hg010b_spin2_write
16ee4                 | ' crlf
16ee4     30 6C B0 FD | 	call	#_hg010b_spin2_crlf
16ee8     78 00 00 FF 
16eec     EC E4 05 F1 | 	add	objptr, ##61676
16ef0     F2 12 02 FB | 	rdlong	arg01, objptr
16ef4     78 00 00 FF 
16ef8     EC E4 85 F1 | 	sub	objptr, ##61676
16efc                 | ' 
16efc                 | ' write(text)
16efc     4C 69 B0 FD | 	call	#_hg010b_spin2_write
16f00                 | ' crlf
16f00     14 6C B0 FD | 	call	#_hg010b_spin2_crlf
16f04     A7 F0 03 F6 | 	mov	ptra, fp
16f08     B2 00 A0 FD | 	call	#popregs_
16f0c                 | _do_mode_ret
16f0c     2D 00 64 FD | 	ret
16f10                 | 
16f10                 | ' 
16f10                 | ' sub do_setwave
16f10                 | _do_setwave
16f10     02 4A 05 F6 | 	mov	COUNT_, #2
16f14     A8 00 A0 FD | 	call	#pushregs_
16f18     18 F0 07 F1 | 	add	ptra, #24
16f1c     40 39 BF FD | 	call	#_pop
16f20     FD 12 02 F6 | 	mov	arg01, result1
16f24     FE 1E 02 F6 | 	mov	local01, result2
16f28     FF 20 02 F6 | 	mov	local02, result3
16f2c     A7 12 62 FC | 	wrlong	arg01, fp
16f30     04 4E 05 F1 | 	add	fp, #4
16f34     A7 1E 62 FC | 	wrlong	local01, fp
16f38     04 4E 05 F1 | 	add	fp, #4
16f3c     A7 20 62 FC | 	wrlong	local02, fp
16f40     08 4E 85 F1 | 	sub	fp, #8
16f44     18 39 BF FD | 	call	#_pop
16f48     FD 20 02 F6 | 	mov	local02, result1
16f4c     0C 4E 05 F1 | 	add	fp, #12
16f50     A7 20 62 FC | 	wrlong	local02, fp
16f54     04 4E 05 F1 | 	add	fp, #4
16f58     A7 FC 61 FC | 	wrlong	result2, fp
16f5c     04 4E 05 F1 | 	add	fp, #4
16f60     A7 FE 61 FC | 	wrlong	result3, fp
16f64     08 4E 85 F1 | 	sub	fp, #8
16f68     A7 12 02 F6 | 	mov	arg01, fp
16f6c     0C 4E 85 F1 | 	sub	fp, #12
16f70     44 C5 BF FD | 	call	#_converttoint
16f74     FD 20 02 F6 | 	mov	local02, result1
16f78     10 1F 02 F6 | 	mov	local01, local02
16f7c     01 1E 66 F0 | 	shl	local01, #1
16f80     10 1F 02 F1 | 	add	local01, local02
16f84     03 1E 66 F0 | 	shl	local01, #3
16f88     34 00 00 FF 
16f8c     38 E5 05 F1 | 	add	objptr, ##26936
16f90     F2 1E 02 F1 | 	add	local01, objptr
16f94     A7 12 02 F6 | 	mov	arg01, fp
16f98     34 00 00 FF 
16f9c     38 E5 85 F1 | 	sub	objptr, ##26936
16fa0     14 C5 BF FD | 	call	#_converttoint
16fa4     04 1E 06 F1 | 	add	local01, #4
16fa8     0F FB 41 FC | 	wrbyte	result1, local01
16fac     A7 F0 03 F6 | 	mov	ptra, fp
16fb0     B2 00 A0 FD | 	call	#popregs_
16fb4                 | _do_setwave_ret
16fb4     2D 00 64 FD | 	ret
16fb8                 | 
16fb8                 | ' 
16fb8                 | ' sub do_setsustain
16fb8                 | _do_setsustain
16fb8     02 4A 05 F6 | 	mov	COUNT_, #2
16fbc     A8 00 A0 FD | 	call	#pushregs_
16fc0     18 F0 07 F1 | 	add	ptra, #24
16fc4     98 38 BF FD | 	call	#_pop
16fc8     FD 12 02 F6 | 	mov	arg01, result1
16fcc     FE 1E 02 F6 | 	mov	local01, result2
16fd0     FF 20 02 F6 | 	mov	local02, result3
16fd4     A7 12 62 FC | 	wrlong	arg01, fp
16fd8     04 4E 05 F1 | 	add	fp, #4
16fdc     A7 1E 62 FC | 	wrlong	local01, fp
16fe0     04 4E 05 F1 | 	add	fp, #4
16fe4     A7 20 62 FC | 	wrlong	local02, fp
16fe8     08 4E 85 F1 | 	sub	fp, #8
16fec     70 38 BF FD | 	call	#_pop
16ff0     FD 20 02 F6 | 	mov	local02, result1
16ff4     0C 4E 05 F1 | 	add	fp, #12
16ff8     A7 20 62 FC | 	wrlong	local02, fp
16ffc     04 4E 05 F1 | 	add	fp, #4
17000     A7 FC 61 FC | 	wrlong	result2, fp
17004     04 4E 05 F1 | 	add	fp, #4
17008     A7 FE 61 FC | 	wrlong	result3, fp
1700c     08 4E 85 F1 | 	sub	fp, #8
17010     A7 12 02 F6 | 	mov	arg01, fp
17014     0C 4E 85 F1 | 	sub	fp, #12
17018     9C C4 BF FD | 	call	#_converttoint
1701c     FD 20 02 F6 | 	mov	local02, result1
17020     10 1F 02 F6 | 	mov	local01, local02
17024     01 1E 66 F0 | 	shl	local01, #1
17028     10 1F 02 F1 | 	add	local01, local02
1702c     03 1E 66 F0 | 	shl	local01, #3
17030     34 00 00 FF 
17034     38 E5 05 F1 | 	add	objptr, ##26936
17038     F2 1E 02 F1 | 	add	local01, objptr
1703c     A7 12 02 F6 | 	mov	arg01, fp
17040     34 00 00 FF 
17044     38 E5 85 F1 | 	sub	objptr, ##26936
17048     6C C4 BF FD | 	call	#_converttoint
1704c     14 1E 06 F1 | 	add	local01, #20
17050     0F FB 51 FC | 	wrword	result1, local01
17054     A7 F0 03 F6 | 	mov	ptra, fp
17058     B2 00 A0 FD | 	call	#popregs_
1705c                 | _do_setsustain_ret
1705c     2D 00 64 FD | 	ret
17060                 | 
17060                 | ' 
17060                 | ' sub do_setenv
17060                 | _do_setenv
17060     02 4A 05 F6 | 	mov	COUNT_, #2
17064     A8 00 A0 FD | 	call	#pushregs_
17068     18 F0 07 F1 | 	add	ptra, #24
1706c     F0 37 BF FD | 	call	#_pop
17070     FD 12 02 F6 | 	mov	arg01, result1
17074     FE 1E 02 F6 | 	mov	local01, result2
17078     FF 20 02 F6 | 	mov	local02, result3
1707c     A7 12 62 FC | 	wrlong	arg01, fp
17080     04 4E 05 F1 | 	add	fp, #4
17084     A7 1E 62 FC | 	wrlong	local01, fp
17088     04 4E 05 F1 | 	add	fp, #4
1708c     A7 20 62 FC | 	wrlong	local02, fp
17090     08 4E 85 F1 | 	sub	fp, #8
17094     C8 37 BF FD | 	call	#_pop
17098     FD 20 02 F6 | 	mov	local02, result1
1709c     0C 4E 05 F1 | 	add	fp, #12
170a0     A7 20 62 FC | 	wrlong	local02, fp
170a4     04 4E 05 F1 | 	add	fp, #4
170a8     A7 FC 61 FC | 	wrlong	result2, fp
170ac     04 4E 05 F1 | 	add	fp, #4
170b0     A7 FE 61 FC | 	wrlong	result3, fp
170b4     08 4E 85 F1 | 	sub	fp, #8
170b8     A7 12 02 F6 | 	mov	arg01, fp
170bc     0C 4E 85 F1 | 	sub	fp, #12
170c0     F4 C3 BF FD | 	call	#_converttoint
170c4     FD 20 02 F6 | 	mov	local02, result1
170c8     10 1F 02 F6 | 	mov	local01, local02
170cc     01 1E 66 F0 | 	shl	local01, #1
170d0     10 1F 02 F1 | 	add	local01, local02
170d4     03 1E 66 F0 | 	shl	local01, #3
170d8     34 00 00 FF 
170dc     38 E5 05 F1 | 	add	objptr, ##26936
170e0     F2 1E 02 F1 | 	add	local01, objptr
170e4     A7 12 02 F6 | 	mov	arg01, fp
170e8     34 00 00 FF 
170ec     38 E5 85 F1 | 	sub	objptr, ##26936
170f0     C4 C3 BF FD | 	call	#_converttoint
170f4     05 1E 06 F1 | 	add	local01, #5
170f8     0F FB 41 FC | 	wrbyte	result1, local01
170fc     A7 F0 03 F6 | 	mov	ptra, fp
17100     B2 00 A0 FD | 	call	#popregs_
17104                 | _do_setenv_ret
17104     2D 00 64 FD | 	ret
17108                 | 
17108                 | ' 
17108                 | ' sub do_setdelay
17108                 | _do_setdelay
17108     02 4A 05 F6 | 	mov	COUNT_, #2
1710c     A8 00 A0 FD | 	call	#pushregs_
17110     18 F0 07 F1 | 	add	ptra, #24
17114     48 37 BF FD | 	call	#_pop
17118     FD 12 02 F6 | 	mov	arg01, result1
1711c     FE 1E 02 F6 | 	mov	local01, result2
17120     FF 20 02 F6 | 	mov	local02, result3
17124     A7 12 62 FC | 	wrlong	arg01, fp
17128     04 4E 05 F1 | 	add	fp, #4
1712c     A7 1E 62 FC | 	wrlong	local01, fp
17130     04 4E 05 F1 | 	add	fp, #4
17134     A7 20 62 FC | 	wrlong	local02, fp
17138     08 4E 85 F1 | 	sub	fp, #8
1713c     20 37 BF FD | 	call	#_pop
17140     FD 20 02 F6 | 	mov	local02, result1
17144     0C 4E 05 F1 | 	add	fp, #12
17148     A7 20 62 FC | 	wrlong	local02, fp
1714c     04 4E 05 F1 | 	add	fp, #4
17150     A7 FC 61 FC | 	wrlong	result2, fp
17154     04 4E 05 F1 | 	add	fp, #4
17158     A7 FE 61 FC | 	wrlong	result3, fp
1715c     08 4E 85 F1 | 	sub	fp, #8
17160     A7 12 02 F6 | 	mov	arg01, fp
17164     0C 4E 85 F1 | 	sub	fp, #12
17168     4C C3 BF FD | 	call	#_converttoint
1716c     FD 20 02 F6 | 	mov	local02, result1
17170     10 1F 02 F6 | 	mov	local01, local02
17174     01 1E 66 F0 | 	shl	local01, #1
17178     10 1F 02 F1 | 	add	local01, local02
1717c     03 1E 66 F0 | 	shl	local01, #3
17180     34 00 00 FF 
17184     38 E5 05 F1 | 	add	objptr, ##26936
17188     F2 1E 02 F1 | 	add	local01, objptr
1718c     A7 12 02 F6 | 	mov	arg01, fp
17190     34 00 00 FF 
17194     38 E5 85 F1 | 	sub	objptr, ##26936
17198     1C C3 BF FD | 	call	#_converttoint
1719c     06 1E 06 F1 | 	add	local01, #6
171a0     0F FB 51 FC | 	wrword	result1, local01
171a4     A7 F0 03 F6 | 	mov	ptra, fp
171a8     B2 00 A0 FD | 	call	#popregs_
171ac                 | _do_setdelay_ret
171ac     2D 00 64 FD | 	ret
171b0                 | 
171b0                 | ' 
171b0                 | ' sub do_setlen
171b0                 | _do_setlen
171b0     02 4A 05 F6 | 	mov	COUNT_, #2
171b4     A8 00 A0 FD | 	call	#pushregs_
171b8     18 F0 07 F1 | 	add	ptra, #24
171bc     A0 36 BF FD | 	call	#_pop
171c0     FD 12 02 F6 | 	mov	arg01, result1
171c4     FE 1E 02 F6 | 	mov	local01, result2
171c8     FF 20 02 F6 | 	mov	local02, result3
171cc     A7 12 62 FC | 	wrlong	arg01, fp
171d0     04 4E 05 F1 | 	add	fp, #4
171d4     A7 1E 62 FC | 	wrlong	local01, fp
171d8     04 4E 05 F1 | 	add	fp, #4
171dc     A7 20 62 FC | 	wrlong	local02, fp
171e0     08 4E 85 F1 | 	sub	fp, #8
171e4     78 36 BF FD | 	call	#_pop
171e8     FD 20 02 F6 | 	mov	local02, result1
171ec     0C 4E 05 F1 | 	add	fp, #12
171f0     A7 20 62 FC | 	wrlong	local02, fp
171f4     04 4E 05 F1 | 	add	fp, #4
171f8     A7 FC 61 FC | 	wrlong	result2, fp
171fc     04 4E 05 F1 | 	add	fp, #4
17200     A7 FE 61 FC | 	wrlong	result3, fp
17204     08 4E 85 F1 | 	sub	fp, #8
17208     A7 12 02 F6 | 	mov	arg01, fp
1720c     0C 4E 85 F1 | 	sub	fp, #12
17210     A4 C2 BF FD | 	call	#_converttoint
17214     FD 20 02 F6 | 	mov	local02, result1
17218     10 1F 02 F6 | 	mov	local01, local02
1721c     01 1E 66 F0 | 	shl	local01, #1
17220     10 1F 02 F1 | 	add	local01, local02
17224     03 1E 66 F0 | 	shl	local01, #3
17228     34 00 00 FF 
1722c     38 E5 05 F1 | 	add	objptr, ##26936
17230     F2 1E 02 F1 | 	add	local01, objptr
17234     A7 12 02 F6 | 	mov	arg01, fp
17238     34 00 00 FF 
1723c     38 E5 85 F1 | 	sub	objptr, ##26936
17240     20 C3 BF FD | 	call	#_converttofloat
17244     08 1E 06 F1 | 	add	local01, #8
17248     0F FB 61 FC | 	wrlong	result1, local01
1724c     A7 F0 03 F6 | 	mov	ptra, fp
17250     B2 00 A0 FD | 	call	#popregs_
17254                 | _do_setlen_ret
17254     2D 00 64 FD | 	ret
17258                 | 
17258                 | ' 
17258                 | ' sub do_setvol
17258                 | _do_setvol
17258     02 4A 05 F6 | 	mov	COUNT_, #2
1725c     A8 00 A0 FD | 	call	#pushregs_
17260     18 F0 07 F1 | 	add	ptra, #24
17264     F8 35 BF FD | 	call	#_pop
17268     FD 12 02 F6 | 	mov	arg01, result1
1726c     FE 1E 02 F6 | 	mov	local01, result2
17270     FF 20 02 F6 | 	mov	local02, result3
17274     A7 12 62 FC | 	wrlong	arg01, fp
17278     04 4E 05 F1 | 	add	fp, #4
1727c     A7 1E 62 FC | 	wrlong	local01, fp
17280     04 4E 05 F1 | 	add	fp, #4
17284     A7 20 62 FC | 	wrlong	local02, fp
17288     08 4E 85 F1 | 	sub	fp, #8
1728c     D0 35 BF FD | 	call	#_pop
17290     FD 20 02 F6 | 	mov	local02, result1
17294     0C 4E 05 F1 | 	add	fp, #12
17298     A7 20 62 FC | 	wrlong	local02, fp
1729c     04 4E 05 F1 | 	add	fp, #4
172a0     A7 FC 61 FC | 	wrlong	result2, fp
172a4     04 4E 05 F1 | 	add	fp, #4
172a8     A7 FE 61 FC | 	wrlong	result3, fp
172ac     08 4E 85 F1 | 	sub	fp, #8
172b0     A7 12 02 F6 | 	mov	arg01, fp
172b4     0C 4E 85 F1 | 	sub	fp, #12
172b8     FC C1 BF FD | 	call	#_converttoint
172bc     FD 20 02 F6 | 	mov	local02, result1
172c0     10 1F 02 F6 | 	mov	local01, local02
172c4     01 1E 66 F0 | 	shl	local01, #1
172c8     10 1F 02 F1 | 	add	local01, local02
172cc     03 1E 66 F0 | 	shl	local01, #3
172d0     34 00 00 FF 
172d4     38 E5 05 F1 | 	add	objptr, ##26936
172d8     F2 1E 02 F1 | 	add	local01, objptr
172dc     A7 12 02 F6 | 	mov	arg01, fp
172e0     34 00 00 FF 
172e4     38 E5 85 F1 | 	sub	objptr, ##26936
172e8     78 C2 BF FD | 	call	#_converttofloat
172ec     0C 1E 06 F1 | 	add	local01, #12
172f0     0F FB 61 FC | 	wrlong	result1, local01
172f4     A7 F0 03 F6 | 	mov	ptra, fp
172f8     B2 00 A0 FD | 	call	#popregs_
172fc                 | _do_setvol_ret
172fc     2D 00 64 FD | 	ret
17300                 | 
17300                 | ' 
17300                 | ' sub do_setpan
17300                 | _do_setpan
17300     02 4A 05 F6 | 	mov	COUNT_, #2
17304     A8 00 A0 FD | 	call	#pushregs_
17308     18 F0 07 F1 | 	add	ptra, #24
1730c     50 35 BF FD | 	call	#_pop
17310     FD 12 02 F6 | 	mov	arg01, result1
17314     FE 1E 02 F6 | 	mov	local01, result2
17318     FF 20 02 F6 | 	mov	local02, result3
1731c     A7 12 62 FC | 	wrlong	arg01, fp
17320     04 4E 05 F1 | 	add	fp, #4
17324     A7 1E 62 FC | 	wrlong	local01, fp
17328     04 4E 05 F1 | 	add	fp, #4
1732c     A7 20 62 FC | 	wrlong	local02, fp
17330     08 4E 85 F1 | 	sub	fp, #8
17334     28 35 BF FD | 	call	#_pop
17338     FD 20 02 F6 | 	mov	local02, result1
1733c     0C 4E 05 F1 | 	add	fp, #12
17340     A7 20 62 FC | 	wrlong	local02, fp
17344     04 4E 05 F1 | 	add	fp, #4
17348     A7 FC 61 FC | 	wrlong	result2, fp
1734c     04 4E 05 F1 | 	add	fp, #4
17350     A7 FE 61 FC | 	wrlong	result3, fp
17354     08 4E 85 F1 | 	sub	fp, #8
17358     A7 12 02 F6 | 	mov	arg01, fp
1735c     0C 4E 85 F1 | 	sub	fp, #12
17360     54 C1 BF FD | 	call	#_converttoint
17364     FD 20 02 F6 | 	mov	local02, result1
17368     10 1F 02 F6 | 	mov	local01, local02
1736c     01 1E 66 F0 | 	shl	local01, #1
17370     10 1F 02 F1 | 	add	local01, local02
17374     03 1E 66 F0 | 	shl	local01, #3
17378     34 00 00 FF 
1737c     38 E5 05 F1 | 	add	objptr, ##26936
17380     F2 1E 02 F1 | 	add	local01, objptr
17384     A7 12 02 F6 | 	mov	arg01, fp
17388     34 00 00 FF 
1738c     38 E5 85 F1 | 	sub	objptr, ##26936
17390     D0 C1 BF FD | 	call	#_converttofloat
17394     10 1E 06 F1 | 	add	local01, #16
17398     0F FB 61 FC | 	wrlong	result1, local01
1739c     A7 F0 03 F6 | 	mov	ptra, fp
173a0     B2 00 A0 FD | 	call	#popregs_
173a4                 | _do_setpan_ret
173a4     2D 00 64 FD | 	ret
173a8                 | 
173a8                 | ' 
173a8                 | ' 
173a8                 | ' sub do_pinwrite
173a8                 | _do_pinwrite
173a8     01 4A 05 F6 | 	mov	COUNT_, #1
173ac     A8 00 A0 FD | 	call	#pushregs_
173b0     18 F0 07 F1 | 	add	ptra, #24
173b4     A8 34 BF FD | 	call	#_pop
173b8     FD 14 02 F6 | 	mov	arg02, result1
173bc     FE 12 02 F6 | 	mov	arg01, result2
173c0     FF 1E 02 F6 | 	mov	local01, result3
173c4     A7 14 62 FC | 	wrlong	arg02, fp
173c8     04 4E 05 F1 | 	add	fp, #4
173cc     A7 12 62 FC | 	wrlong	arg01, fp
173d0     04 4E 05 F1 | 	add	fp, #4
173d4     A7 1E 62 FC | 	wrlong	local01, fp
173d8     08 4E 85 F1 | 	sub	fp, #8
173dc     80 34 BF FD | 	call	#_pop
173e0     FF 1E 02 F6 | 	mov	local01, result3
173e4     0C 4E 05 F1 | 	add	fp, #12
173e8     A7 FA 61 FC | 	wrlong	result1, fp
173ec     04 4E 05 F1 | 	add	fp, #4
173f0     A7 FC 61 FC | 	wrlong	result2, fp
173f4     04 4E 05 F1 | 	add	fp, #4
173f8     A7 1E 62 FC | 	wrlong	local01, fp
173fc     08 4E 85 F1 | 	sub	fp, #8
17400     A7 12 02 F6 | 	mov	arg01, fp
17404     0C 4E 85 F1 | 	sub	fp, #12
17408     AC C0 BF FD | 	call	#_converttoint
1740c     FD 1E 02 F6 | 	mov	local01, result1
17410     A7 12 02 F6 | 	mov	arg01, fp
17414     A0 C0 BF FD | 	call	#_converttoint
17418     FD 14 02 F6 | 	mov	arg02, result1
1741c     0F 13 02 F6 | 	mov	arg01, local01
17420     A8 78 B0 FD | 	call	#__system___pinwrite
17424     A7 F0 03 F6 | 	mov	ptra, fp
17428     B2 00 A0 FD | 	call	#popregs_
1742c                 | _do_pinwrite_ret
1742c     2D 00 64 FD | 	ret
17430                 | 
17430                 | ' 
17430                 | ' sub do_pinfloat
17430                 | _do_pinfloat
17430     00 4A 05 F6 | 	mov	COUNT_, #0
17434     A8 00 A0 FD | 	call	#pushregs_
17438     0C F0 07 F1 | 	add	ptra, #12
1743c     20 34 BF FD | 	call	#_pop
17440     A7 FA 61 FC | 	wrlong	result1, fp
17444     04 4E 05 F1 | 	add	fp, #4
17448     A7 FC 61 FC | 	wrlong	result2, fp
1744c     04 4E 05 F1 | 	add	fp, #4
17450     A7 FE 61 FC | 	wrlong	result3, fp
17454     08 4E 85 F1 | 	sub	fp, #8
17458     A7 12 02 F6 | 	mov	arg01, fp
1745c     58 C0 BF FD | 	call	#_converttoint
17460     50 FA 61 FD | 	fltl	result1
17464     A7 F0 03 F6 | 	mov	ptra, fp
17468     B2 00 A0 FD | 	call	#popregs_
1746c                 | _do_pinfloat_ret
1746c     2D 00 64 FD | 	ret
17470                 | 
17470                 | ' 
17470                 | ' sub do_pinlo
17470                 | _do_pinlo
17470     00 4A 05 F6 | 	mov	COUNT_, #0
17474     A8 00 A0 FD | 	call	#pushregs_
17478     0C F0 07 F1 | 	add	ptra, #12
1747c     E0 33 BF FD | 	call	#_pop
17480     A7 FA 61 FC | 	wrlong	result1, fp
17484     04 4E 05 F1 | 	add	fp, #4
17488     A7 FC 61 FC | 	wrlong	result2, fp
1748c     04 4E 05 F1 | 	add	fp, #4
17490     A7 FE 61 FC | 	wrlong	result3, fp
17494     08 4E 85 F1 | 	sub	fp, #8
17498     A7 12 02 F6 | 	mov	arg01, fp
1749c     18 C0 BF FD | 	call	#_converttoint
174a0     58 FA 61 FD | 	drvl	result1
174a4     A7 F0 03 F6 | 	mov	ptra, fp
174a8     B2 00 A0 FD | 	call	#popregs_
174ac                 | _do_pinlo_ret
174ac     2D 00 64 FD | 	ret
174b0                 | 
174b0                 | ' 
174b0                 | ' sub do_pinhi
174b0                 | _do_pinhi
174b0     00 4A 05 F6 | 	mov	COUNT_, #0
174b4     A8 00 A0 FD | 	call	#pushregs_
174b8     0C F0 07 F1 | 	add	ptra, #12
174bc     A0 33 BF FD | 	call	#_pop
174c0     A7 FA 61 FC | 	wrlong	result1, fp
174c4     04 4E 05 F1 | 	add	fp, #4
174c8     A7 FC 61 FC | 	wrlong	result2, fp
174cc     04 4E 05 F1 | 	add	fp, #4
174d0     A7 FE 61 FC | 	wrlong	result3, fp
174d4     08 4E 85 F1 | 	sub	fp, #8
174d8     A7 12 02 F6 | 	mov	arg01, fp
174dc     D8 BF BF FD | 	call	#_converttoint
174e0     59 FA 61 FD | 	drvh	result1
174e4     A7 F0 03 F6 | 	mov	ptra, fp
174e8     B2 00 A0 FD | 	call	#popregs_
174ec                 | _do_pinhi_ret
174ec     2D 00 64 FD | 	ret
174f0                 | 
174f0                 | ' 
174f0                 | ' sub do_pintoggle
174f0                 | _do_pintoggle
174f0     00 4A 05 F6 | 	mov	COUNT_, #0
174f4     A8 00 A0 FD | 	call	#pushregs_
174f8     0C F0 07 F1 | 	add	ptra, #12
174fc     60 33 BF FD | 	call	#_pop
17500     A7 FA 61 FC | 	wrlong	result1, fp
17504     04 4E 05 F1 | 	add	fp, #4
17508     A7 FC 61 FC | 	wrlong	result2, fp
1750c     04 4E 05 F1 | 	add	fp, #4
17510     A7 FE 61 FC | 	wrlong	result3, fp
17514     08 4E 85 F1 | 	sub	fp, #8
17518     A7 12 02 F6 | 	mov	arg01, fp
1751c     98 BF BF FD | 	call	#_converttoint
17520     5F FA 61 FD | 	drvnot	result1
17524     A7 F0 03 F6 | 	mov	ptra, fp
17528     B2 00 A0 FD | 	call	#popregs_
1752c                 | _do_pintoggle_ret
1752c     2D 00 64 FD | 	ret
17530                 | 
17530                 | ' 
17530                 | ' 
17530                 | ' sub do_pinstart
17530                 | _do_pinstart
17530     03 4A 05 F6 | 	mov	COUNT_, #3
17534     A8 00 A0 FD | 	call	#pushregs_
17538     30 F0 07 F1 | 	add	ptra, #48
1753c     20 33 BF FD | 	call	#_pop
17540     FD 16 02 F6 | 	mov	arg03, result1
17544     FE 14 02 F6 | 	mov	arg02, result2
17548     FF 18 02 F6 | 	mov	arg04, result3
1754c     A7 16 62 FC | 	wrlong	arg03, fp
17550     04 4E 05 F1 | 	add	fp, #4
17554     A7 14 62 FC | 	wrlong	arg02, fp
17558     04 4E 05 F1 | 	add	fp, #4
1755c     A7 18 62 FC | 	wrlong	arg04, fp
17560     08 4E 85 F1 | 	sub	fp, #8
17564     F8 32 BF FD | 	call	#_pop
17568     FD 16 02 F6 | 	mov	arg03, result1
1756c     FE 14 02 F6 | 	mov	arg02, result2
17570     FF 18 02 F6 | 	mov	arg04, result3
17574     0C 4E 05 F1 | 	add	fp, #12
17578     A7 16 62 FC | 	wrlong	arg03, fp
1757c     04 4E 05 F1 | 	add	fp, #4
17580     A7 14 62 FC | 	wrlong	arg02, fp
17584     04 4E 05 F1 | 	add	fp, #4
17588     A7 18 62 FC | 	wrlong	arg04, fp
1758c     14 4E 85 F1 | 	sub	fp, #20
17590     CC 32 BF FD | 	call	#_pop
17594     FD 16 02 F6 | 	mov	arg03, result1
17598     FE 14 02 F6 | 	mov	arg02, result2
1759c     FF 18 02 F6 | 	mov	arg04, result3
175a0     18 4E 05 F1 | 	add	fp, #24
175a4     A7 16 62 FC | 	wrlong	arg03, fp
175a8     04 4E 05 F1 | 	add	fp, #4
175ac     A7 14 62 FC | 	wrlong	arg02, fp
175b0     04 4E 05 F1 | 	add	fp, #4
175b4     A7 18 62 FC | 	wrlong	arg04, fp
175b8     20 4E 85 F1 | 	sub	fp, #32
175bc     A0 32 BF FD | 	call	#_pop
175c0     FF 16 02 F6 | 	mov	arg03, result3
175c4     24 4E 05 F1 | 	add	fp, #36
175c8     A7 FA 61 FC | 	wrlong	result1, fp
175cc     04 4E 05 F1 | 	add	fp, #4
175d0     A7 FC 61 FC | 	wrlong	result2, fp
175d4     04 4E 05 F1 | 	add	fp, #4
175d8     A7 16 62 FC | 	wrlong	arg03, fp
175dc     08 4E 85 F1 | 	sub	fp, #8
175e0     A7 12 02 F6 | 	mov	arg01, fp
175e4     24 4E 85 F1 | 	sub	fp, #36
175e8     CC BE BF FD | 	call	#_converttoint
175ec     FD 1E 02 F6 | 	mov	local01, result1
175f0     18 4E 05 F1 | 	add	fp, #24
175f4     A7 12 02 F6 | 	mov	arg01, fp
175f8     18 4E 85 F1 | 	sub	fp, #24
175fc     B8 BE BF FD | 	call	#_converttoint
17600     FD 20 02 F6 | 	mov	local02, result1
17604     0C 4E 05 F1 | 	add	fp, #12
17608     A7 12 02 F6 | 	mov	arg01, fp
1760c     0C 4E 85 F1 | 	sub	fp, #12
17610     A4 BE BF FD | 	call	#_converttoint
17614     FD 22 02 F6 | 	mov	local03, result1
17618     A7 12 02 F6 | 	mov	arg01, fp
1761c     98 BE BF FD | 	call	#_converttoint
17620     40 1E 62 FD | 	dirl	local01
17624     0F 21 02 FC | 	wrpin	local02, local01
17628     0F 23 12 FC | 	wxpin	local03, local01
1762c     0F FB 21 FC | 	wypin	result1, local01
17630     41 1E 62 FD | 	dirh	local01
17634     A7 F0 03 F6 | 	mov	ptra, fp
17638     B2 00 A0 FD | 	call	#popregs_
1763c                 | _do_pinstart_ret
1763c     2D 00 64 FD | 	ret
17640                 | 
17640                 | ' 
17640                 | ' 
17640                 | ' sub do_wrpin
17640                 | _do_wrpin
17640     01 4A 05 F6 | 	mov	COUNT_, #1
17644     A8 00 A0 FD | 	call	#pushregs_
17648     18 F0 07 F1 | 	add	ptra, #24
1764c     10 32 BF FD | 	call	#_pop
17650     FD 14 02 F6 | 	mov	arg02, result1
17654     FE 12 02 F6 | 	mov	arg01, result2
17658     FF 1E 02 F6 | 	mov	local01, result3
1765c     A7 14 62 FC | 	wrlong	arg02, fp
17660     04 4E 05 F1 | 	add	fp, #4
17664     A7 12 62 FC | 	wrlong	arg01, fp
17668     04 4E 05 F1 | 	add	fp, #4
1766c     A7 1E 62 FC | 	wrlong	local01, fp
17670     08 4E 85 F1 | 	sub	fp, #8
17674     E8 31 BF FD | 	call	#_pop
17678     FF 1E 02 F6 | 	mov	local01, result3
1767c     0C 4E 05 F1 | 	add	fp, #12
17680     A7 FA 61 FC | 	wrlong	result1, fp
17684     04 4E 05 F1 | 	add	fp, #4
17688     A7 FC 61 FC | 	wrlong	result2, fp
1768c     04 4E 05 F1 | 	add	fp, #4
17690     A7 1E 62 FC | 	wrlong	local01, fp
17694     08 4E 85 F1 | 	sub	fp, #8
17698     A7 12 02 F6 | 	mov	arg01, fp
1769c     0C 4E 85 F1 | 	sub	fp, #12
176a0     14 BE BF FD | 	call	#_converttoint
176a4     FD 1E 02 F6 | 	mov	local01, result1
176a8     A7 12 02 F6 | 	mov	arg01, fp
176ac     08 BE BF FD | 	call	#_converttoint
176b0     0F FB 01 FC | 	wrpin	result1, local01
176b4     A7 F0 03 F6 | 	mov	ptra, fp
176b8     B2 00 A0 FD | 	call	#popregs_
176bc                 | _do_wrpin_ret
176bc     2D 00 64 FD | 	ret
176c0                 | 
176c0                 | ' 
176c0                 | ' sub do_wxpin
176c0                 | _do_wxpin
176c0     01 4A 05 F6 | 	mov	COUNT_, #1
176c4     A8 00 A0 FD | 	call	#pushregs_
176c8     18 F0 07 F1 | 	add	ptra, #24
176cc     90 31 BF FD | 	call	#_pop
176d0     FD 14 02 F6 | 	mov	arg02, result1
176d4     FE 12 02 F6 | 	mov	arg01, result2
176d8     FF 1E 02 F6 | 	mov	local01, result3
176dc     A7 14 62 FC | 	wrlong	arg02, fp
176e0     04 4E 05 F1 | 	add	fp, #4
176e4     A7 12 62 FC | 	wrlong	arg01, fp
176e8     04 4E 05 F1 | 	add	fp, #4
176ec     A7 1E 62 FC | 	wrlong	local01, fp
176f0     08 4E 85 F1 | 	sub	fp, #8
176f4     68 31 BF FD | 	call	#_pop
176f8     FF 1E 02 F6 | 	mov	local01, result3
176fc     0C 4E 05 F1 | 	add	fp, #12
17700     A7 FA 61 FC | 	wrlong	result1, fp
17704     04 4E 05 F1 | 	add	fp, #4
17708     A7 FC 61 FC | 	wrlong	result2, fp
1770c     04 4E 05 F1 | 	add	fp, #4
17710     A7 1E 62 FC | 	wrlong	local01, fp
17714     08 4E 85 F1 | 	sub	fp, #8
17718     A7 12 02 F6 | 	mov	arg01, fp
1771c     0C 4E 85 F1 | 	sub	fp, #12
17720     94 BD BF FD | 	call	#_converttoint
17724     FD 1E 02 F6 | 	mov	local01, result1
17728     A7 12 02 F6 | 	mov	arg01, fp
1772c     88 BD BF FD | 	call	#_converttoint
17730     0F FB 11 FC | 	wxpin	result1, local01
17734     A7 F0 03 F6 | 	mov	ptra, fp
17738     B2 00 A0 FD | 	call	#popregs_
1773c                 | _do_wxpin_ret
1773c     2D 00 64 FD | 	ret
17740                 | 
17740                 | ' 
17740                 | ' sub do_wypin
17740                 | _do_wypin
17740     01 4A 05 F6 | 	mov	COUNT_, #1
17744     A8 00 A0 FD | 	call	#pushregs_
17748     18 F0 07 F1 | 	add	ptra, #24
1774c     10 31 BF FD | 	call	#_pop
17750     FD 14 02 F6 | 	mov	arg02, result1
17754     FE 12 02 F6 | 	mov	arg01, result2
17758     FF 1E 02 F6 | 	mov	local01, result3
1775c     A7 14 62 FC | 	wrlong	arg02, fp
17760     04 4E 05 F1 | 	add	fp, #4
17764     A7 12 62 FC | 	wrlong	arg01, fp
17768     04 4E 05 F1 | 	add	fp, #4
1776c     A7 1E 62 FC | 	wrlong	local01, fp
17770     08 4E 85 F1 | 	sub	fp, #8
17774     E8 30 BF FD | 	call	#_pop
17778     FF 1E 02 F6 | 	mov	local01, result3
1777c     0C 4E 05 F1 | 	add	fp, #12
17780     A7 FA 61 FC | 	wrlong	result1, fp
17784     04 4E 05 F1 | 	add	fp, #4
17788     A7 FC 61 FC | 	wrlong	result2, fp
1778c     04 4E 05 F1 | 	add	fp, #4
17790     A7 1E 62 FC | 	wrlong	local01, fp
17794     08 4E 85 F1 | 	sub	fp, #8
17798     A7 12 02 F6 | 	mov	arg01, fp
1779c     0C 4E 85 F1 | 	sub	fp, #12
177a0     14 BD BF FD | 	call	#_converttoint
177a4     FD 1E 02 F6 | 	mov	local01, result1
177a8     A7 12 02 F6 | 	mov	arg01, fp
177ac     08 BD BF FD | 	call	#_converttoint
177b0     0F FB 21 FC | 	wypin	result1, local01
177b4     A7 F0 03 F6 | 	mov	ptra, fp
177b8     B2 00 A0 FD | 	call	#popregs_
177bc                 | _do_wypin_ret
177bc     2D 00 64 FD | 	ret
177c0                 | 
177c0                 | ' 
177c0                 | ' sub do_position
177c0                 | _do_position
177c0     01 4A 05 F6 | 	mov	COUNT_, #1
177c4     A8 00 A0 FD | 	call	#pushregs_
177c8     18 F0 07 F1 | 	add	ptra, #24
177cc     90 30 BF FD | 	call	#_pop
177d0     FD 14 02 F6 | 	mov	arg02, result1
177d4     FE 12 02 F6 | 	mov	arg01, result2
177d8     FF 1E 02 F6 | 	mov	local01, result3
177dc     A7 14 62 FC | 	wrlong	arg02, fp
177e0     04 4E 05 F1 | 	add	fp, #4
177e4     A7 12 62 FC | 	wrlong	arg01, fp
177e8     04 4E 05 F1 | 	add	fp, #4
177ec     A7 1E 62 FC | 	wrlong	local01, fp
177f0     08 4E 85 F1 | 	sub	fp, #8
177f4     68 30 BF FD | 	call	#_pop
177f8     FF 1E 02 F6 | 	mov	local01, result3
177fc     0C 4E 05 F1 | 	add	fp, #12
17800     A7 FA 61 FC | 	wrlong	result1, fp
17804     04 4E 05 F1 | 	add	fp, #4
17808     A7 FC 61 FC | 	wrlong	result2, fp
1780c     04 4E 05 F1 | 	add	fp, #4
17810     A7 1E 62 FC | 	wrlong	local01, fp
17814     08 4E 85 F1 | 	sub	fp, #8
17818     A7 12 02 F6 | 	mov	arg01, fp
1781c     0C 4E 85 F1 | 	sub	fp, #12
17820     94 BC BF FD | 	call	#_converttoint
17824     FD 1E 02 F6 | 	mov	local01, result1
17828     A7 12 02 F6 | 	mov	arg01, fp
1782c     88 BC BF FD | 	call	#_converttoint
17830     FD 14 02 F6 | 	mov	arg02, result1
17834     0F 13 02 F6 | 	mov	arg01, local01
17838     40 5B B0 FD | 	call	#_hg010b_spin2_setcursorpos
1783c     A7 F0 03 F6 | 	mov	ptra, fp
17840     B2 00 A0 FD | 	call	#popregs_
17844                 | _do_position_ret
17844     2D 00 64 FD | 	ret
17848                 | 
17848                 | ' 
17848                 | ' sub do_poke
17848                 | _do_poke
17848     01 4A 05 F6 | 	mov	COUNT_, #1
1784c     A8 00 A0 FD | 	call	#pushregs_
17850     20 F0 07 F1 | 	add	ptra, #32
17854     08 30 BF FD | 	call	#_pop
17858     FD 14 02 F6 | 	mov	arg02, result1
1785c     FE 12 02 F6 | 	mov	arg01, result2
17860     FF 1E 02 F6 | 	mov	local01, result3
17864     A7 14 62 FC | 	wrlong	arg02, fp
17868     04 4E 05 F1 | 	add	fp, #4
1786c     A7 12 62 FC | 	wrlong	arg01, fp
17870     04 4E 05 F1 | 	add	fp, #4
17874     A7 1E 62 FC | 	wrlong	local01, fp
17878     08 4E 85 F1 | 	sub	fp, #8
1787c     E0 2F BF FD | 	call	#_pop
17880     FF 1E 02 F6 | 	mov	local01, result3
17884     0C 4E 05 F1 | 	add	fp, #12
17888     A7 FA 61 FC | 	wrlong	result1, fp
1788c     04 4E 05 F1 | 	add	fp, #4
17890     A7 FC 61 FC | 	wrlong	result2, fp
17894     04 4E 05 F1 | 	add	fp, #4
17898     A7 1E 62 FC | 	wrlong	local01, fp
1789c     08 4E 85 F1 | 	sub	fp, #8
178a0     A7 12 02 F6 | 	mov	arg01, fp
178a4     0C 4E 85 F1 | 	sub	fp, #12
178a8     0C BC BF FD | 	call	#_converttoint
178ac     18 4E 05 F1 | 	add	fp, #24
178b0     A7 FA 61 FC | 	wrlong	result1, fp
178b4     18 4E 85 F1 | 	sub	fp, #24
178b8     A7 12 02 F6 | 	mov	arg01, fp
178bc     F8 BB BF FD | 	call	#_converttoint
178c0     1C 4E 05 F1 | 	add	fp, #28
178c4     A7 FA 61 FC | 	wrlong	result1, fp
178c8                 | ' t1=pop() 'value
178c8                 | ' t2=pop() 
178c8                 | ' a=converttoint(t2) : v=converttoint(t1)
178c8                 | ' if a<$80000 then poke a,v else pspoke a,v
178c8     04 4E 85 F1 | 	sub	fp, #4
178cc     A7 1E 02 FB | 	rdlong	local01, fp
178d0     18 4E 85 F1 | 	sub	fp, #24
178d4     00 04 00 FF 
178d8     00 1E 16 F2 | 	cmp	local01, ##524288 wc
178dc     1C 00 90 3D |  if_ae	jmp	#LR__1890
178e0     18 4E 05 F1 | 	add	fp, #24
178e4     A7 12 02 FB | 	rdlong	arg01, fp
178e8     04 4E 05 F1 | 	add	fp, #4
178ec     A7 14 02 FB | 	rdlong	arg02, fp
178f0     1C 4E 85 F1 | 	sub	fp, #28
178f4     09 15 42 FC | 	wrbyte	arg02, arg01
178f8     18 00 90 FD | 	jmp	#LR__1891
178fc                 | LR__1890
178fc     18 4E 05 F1 | 	add	fp, #24
17900     A7 12 02 FB | 	rdlong	arg01, fp
17904     04 4E 05 F1 | 	add	fp, #4
17908     A7 14 02 FB | 	rdlong	arg02, fp
1790c     1C 4E 85 F1 | 	sub	fp, #28
17910     7C 2F B0 FD | 	call	#_pspoke
17914                 | LR__1891
17914     A7 F0 03 F6 | 	mov	ptra, fp
17918     B2 00 A0 FD | 	call	#popregs_
1791c                 | _do_poke_ret
1791c     2D 00 64 FD | 	ret
17920                 | 
17920                 | ' 
17920                 | ' sub do_dpoke
17920                 | _do_dpoke
17920     01 4A 05 F6 | 	mov	COUNT_, #1
17924     A8 00 A0 FD | 	call	#pushregs_
17928     20 F0 07 F1 | 	add	ptra, #32
1792c     30 2F BF FD | 	call	#_pop
17930     FD 14 02 F6 | 	mov	arg02, result1
17934     FE 12 02 F6 | 	mov	arg01, result2
17938     FF 1E 02 F6 | 	mov	local01, result3
1793c     A7 14 62 FC | 	wrlong	arg02, fp
17940     04 4E 05 F1 | 	add	fp, #4
17944     A7 12 62 FC | 	wrlong	arg01, fp
17948     04 4E 05 F1 | 	add	fp, #4
1794c     A7 1E 62 FC | 	wrlong	local01, fp
17950     08 4E 85 F1 | 	sub	fp, #8
17954     08 2F BF FD | 	call	#_pop
17958     FF 1E 02 F6 | 	mov	local01, result3
1795c     0C 4E 05 F1 | 	add	fp, #12
17960     A7 FA 61 FC | 	wrlong	result1, fp
17964     04 4E 05 F1 | 	add	fp, #4
17968     A7 FC 61 FC | 	wrlong	result2, fp
1796c     04 4E 05 F1 | 	add	fp, #4
17970     A7 1E 62 FC | 	wrlong	local01, fp
17974     08 4E 85 F1 | 	sub	fp, #8
17978     A7 12 02 F6 | 	mov	arg01, fp
1797c     0C 4E 85 F1 | 	sub	fp, #12
17980     34 BB BF FD | 	call	#_converttoint
17984     18 4E 05 F1 | 	add	fp, #24
17988     A7 FA 61 FC | 	wrlong	result1, fp
1798c     18 4E 85 F1 | 	sub	fp, #24
17990     A7 12 02 F6 | 	mov	arg01, fp
17994     20 BB BF FD | 	call	#_converttoint
17998     1C 4E 05 F1 | 	add	fp, #28
1799c     A7 FA 61 FC | 	wrlong	result1, fp
179a0                 | ' t1=pop() 'value
179a0                 | ' t2=pop() 
179a0                 | ' a=converttoint(t2) : v=converttoint(t1)
179a0                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
179a0     04 4E 85 F1 | 	sub	fp, #4
179a4     A7 1E 02 FB | 	rdlong	local01, fp
179a8     18 4E 85 F1 | 	sub	fp, #24
179ac     00 04 00 FF 
179b0     00 1E 16 F2 | 	cmp	local01, ##524288 wc
179b4     1C 00 90 3D |  if_ae	jmp	#LR__1900
179b8     18 4E 05 F1 | 	add	fp, #24
179bc     A7 12 02 FB | 	rdlong	arg01, fp
179c0     04 4E 05 F1 | 	add	fp, #4
179c4     A7 14 02 FB | 	rdlong	arg02, fp
179c8     1C 4E 85 F1 | 	sub	fp, #28
179cc     09 15 52 FC | 	wrword	arg02, arg01
179d0     18 00 90 FD | 	jmp	#LR__1901
179d4                 | LR__1900
179d4     18 4E 05 F1 | 	add	fp, #24
179d8     A7 12 02 FB | 	rdlong	arg01, fp
179dc     04 4E 05 F1 | 	add	fp, #4
179e0     A7 14 02 FB | 	rdlong	arg02, fp
179e4     1C 4E 85 F1 | 	sub	fp, #28
179e8     5C 2E B0 FD | 	call	#_psdpoke
179ec                 | LR__1901
179ec     A7 F0 03 F6 | 	mov	ptra, fp
179f0     B2 00 A0 FD | 	call	#popregs_
179f4                 | _do_dpoke_ret
179f4     2D 00 64 FD | 	ret
179f8                 | 
179f8                 | ' 
179f8                 | ' sub do_lpoke
179f8                 | _do_lpoke
179f8     01 4A 05 F6 | 	mov	COUNT_, #1
179fc     A8 00 A0 FD | 	call	#pushregs_
17a00     20 F0 07 F1 | 	add	ptra, #32
17a04     58 2E BF FD | 	call	#_pop
17a08     FD 14 02 F6 | 	mov	arg02, result1
17a0c     FE 12 02 F6 | 	mov	arg01, result2
17a10     FF 1E 02 F6 | 	mov	local01, result3
17a14     A7 14 62 FC | 	wrlong	arg02, fp
17a18     04 4E 05 F1 | 	add	fp, #4
17a1c     A7 12 62 FC | 	wrlong	arg01, fp
17a20     04 4E 05 F1 | 	add	fp, #4
17a24     A7 1E 62 FC | 	wrlong	local01, fp
17a28     08 4E 85 F1 | 	sub	fp, #8
17a2c     30 2E BF FD | 	call	#_pop
17a30     FF 1E 02 F6 | 	mov	local01, result3
17a34     0C 4E 05 F1 | 	add	fp, #12
17a38     A7 FA 61 FC | 	wrlong	result1, fp
17a3c     04 4E 05 F1 | 	add	fp, #4
17a40     A7 FC 61 FC | 	wrlong	result2, fp
17a44     04 4E 05 F1 | 	add	fp, #4
17a48     A7 1E 62 FC | 	wrlong	local01, fp
17a4c     08 4E 85 F1 | 	sub	fp, #8
17a50     A7 12 02 F6 | 	mov	arg01, fp
17a54     0C 4E 85 F1 | 	sub	fp, #12
17a58     5C BA BF FD | 	call	#_converttoint
17a5c     18 4E 05 F1 | 	add	fp, #24
17a60     A7 FA 61 FC | 	wrlong	result1, fp
17a64     18 4E 85 F1 | 	sub	fp, #24
17a68     A7 12 02 F6 | 	mov	arg01, fp
17a6c     48 BA BF FD | 	call	#_converttoint
17a70     1C 4E 05 F1 | 	add	fp, #28
17a74     A7 FA 61 FC | 	wrlong	result1, fp
17a78                 | ' t1=pop() 'value
17a78                 | ' t2=pop() 
17a78                 | ' a=converttoint(t2) : v=converttoint(t1)
17a78                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
17a78     04 4E 85 F1 | 	sub	fp, #4
17a7c     A7 1E 02 FB | 	rdlong	local01, fp
17a80     18 4E 85 F1 | 	sub	fp, #24
17a84     00 04 00 FF 
17a88     00 1E 16 F2 | 	cmp	local01, ##524288 wc
17a8c     1C 00 90 3D |  if_ae	jmp	#LR__1910
17a90     18 4E 05 F1 | 	add	fp, #24
17a94     A7 12 02 FB | 	rdlong	arg01, fp
17a98     04 4E 05 F1 | 	add	fp, #4
17a9c     A7 14 02 FB | 	rdlong	arg02, fp
17aa0     1C 4E 85 F1 | 	sub	fp, #28
17aa4     09 15 62 FC | 	wrlong	arg02, arg01
17aa8     18 00 90 FD | 	jmp	#LR__1911
17aac                 | LR__1910
17aac     18 4E 05 F1 | 	add	fp, #24
17ab0     A7 12 02 FB | 	rdlong	arg01, fp
17ab4     04 4E 05 F1 | 	add	fp, #4
17ab8     A7 14 02 FB | 	rdlong	arg02, fp
17abc     1C 4E 85 F1 | 	sub	fp, #28
17ac0     3C 2D B0 FD | 	call	#_pslpoke
17ac4                 | LR__1911
17ac4     A7 F0 03 F6 | 	mov	ptra, fp
17ac8     B2 00 A0 FD | 	call	#popregs_
17acc                 | _do_lpoke_ret
17acc     2D 00 64 FD | 	ret
17ad0                 | 
17ad0                 | ' 
17ad0                 | ' sub do_peek
17ad0                 | _do_peek
17ad0     00 4A 05 F6 | 	mov	COUNT_, #0
17ad4     A8 00 A0 FD | 	call	#pushregs_
17ad8     14 F0 07 F1 | 	add	ptra, #20
17adc     80 2D BF FD | 	call	#_pop
17ae0     A7 FA 61 FC | 	wrlong	result1, fp
17ae4     04 4E 05 F1 | 	add	fp, #4
17ae8     A7 FC 61 FC | 	wrlong	result2, fp
17aec     04 4E 05 F1 | 	add	fp, #4
17af0     A7 FE 61 FC | 	wrlong	result3, fp
17af4     08 4E 85 F1 | 	sub	fp, #8
17af8     A7 12 02 F6 | 	mov	arg01, fp
17afc     B8 B9 BF FD | 	call	#_converttoint
17b00     0C 4E 05 F1 | 	add	fp, #12
17b04     A7 FA 61 FC | 	wrlong	result1, fp
17b08                 | ' t1=pop()
17b08                 | ' a=converttoint(t1)
17b08                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
17b08     0C 4E 85 F1 | 	sub	fp, #12
17b0c     00 04 00 FF 
17b10     00 FA 15 F2 | 	cmp	result1, ##524288 wc
17b14     1C 00 90 3D |  if_ae	jmp	#LR__1920
17b18     0C 4E 05 F1 | 	add	fp, #12
17b1c     A7 12 02 FB | 	rdlong	arg01, fp
17b20     09 FB C1 FA | 	rdbyte	result1, arg01
17b24     04 4E 05 F1 | 	add	fp, #4
17b28     A7 FA 61 FC | 	wrlong	result1, fp
17b2c     10 4E 85 F1 | 	sub	fp, #16
17b30     20 00 90 FD | 	jmp	#LR__1921
17b34                 | LR__1920
17b34     0C 4E 05 F1 | 	add	fp, #12
17b38     A7 12 02 FB | 	rdlong	arg01, fp
17b3c     0C 4E 85 F1 | 	sub	fp, #12
17b40     94 2D B0 FD | 	call	#_pspeek
17b44     FD FA E1 F8 | 	getbyte	result1, result1, #0
17b48     10 4E 05 F1 | 	add	fp, #16
17b4c     A7 FA 61 FC | 	wrlong	result1, fp
17b50     10 4E 85 F1 | 	sub	fp, #16
17b54                 | LR__1921
17b54     08 4E 05 F1 | 	add	fp, #8
17b58     A7 3A 68 FC | 	wrlong	#29, fp
17b5c     08 4E 05 F1 | 	add	fp, #8
17b60     A7 12 02 FB | 	rdlong	arg01, fp
17b64     10 4E 85 F1 | 	sub	fp, #16
17b68     A7 12 62 FC | 	wrlong	arg01, fp
17b6c     A7 12 02 F6 | 	mov	arg01, fp
17b70     84 2D BF FD | 	call	#_push
17b74     A7 F0 03 F6 | 	mov	ptra, fp
17b78     B2 00 A0 FD | 	call	#popregs_
17b7c                 | _do_peek_ret
17b7c     2D 00 64 FD | 	ret
17b80                 | 
17b80                 | ' 
17b80                 | ' sub do_dpeek
17b80                 | _do_dpeek
17b80     00 4A 05 F6 | 	mov	COUNT_, #0
17b84     A8 00 A0 FD | 	call	#pushregs_
17b88     14 F0 07 F1 | 	add	ptra, #20
17b8c     D0 2C BF FD | 	call	#_pop
17b90     A7 FA 61 FC | 	wrlong	result1, fp
17b94     04 4E 05 F1 | 	add	fp, #4
17b98     A7 FC 61 FC | 	wrlong	result2, fp
17b9c     04 4E 05 F1 | 	add	fp, #4
17ba0     A7 FE 61 FC | 	wrlong	result3, fp
17ba4     08 4E 85 F1 | 	sub	fp, #8
17ba8     A7 12 02 F6 | 	mov	arg01, fp
17bac     08 B9 BF FD | 	call	#_converttoint
17bb0     0C 4E 05 F1 | 	add	fp, #12
17bb4     A7 FA 61 FC | 	wrlong	result1, fp
17bb8                 | ' t1=pop()
17bb8                 | ' a=converttoint(t1)
17bb8                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
17bb8     0C 4E 85 F1 | 	sub	fp, #12
17bbc     00 04 00 FF 
17bc0     00 FA 15 F2 | 	cmp	result1, ##524288 wc
17bc4     1C 00 90 3D |  if_ae	jmp	#LR__1930
17bc8     0C 4E 05 F1 | 	add	fp, #12
17bcc     A7 12 02 FB | 	rdlong	arg01, fp
17bd0     09 FB E1 FA | 	rdword	result1, arg01
17bd4     04 4E 05 F1 | 	add	fp, #4
17bd8     A7 FA 61 FC | 	wrlong	result1, fp
17bdc     10 4E 85 F1 | 	sub	fp, #16
17be0     1C 00 90 FD | 	jmp	#LR__1931
17be4                 | LR__1930
17be4     0C 4E 05 F1 | 	add	fp, #12
17be8     A7 12 02 FB | 	rdlong	arg01, fp
17bec     0C 4E 85 F1 | 	sub	fp, #12
17bf0     94 2D B0 FD | 	call	#_psdpeek
17bf4     10 4E 05 F1 | 	add	fp, #16
17bf8     A7 FA 61 FC | 	wrlong	result1, fp
17bfc     10 4E 85 F1 | 	sub	fp, #16
17c00                 | LR__1931
17c00     08 4E 05 F1 | 	add	fp, #8
17c04     A7 3A 68 FC | 	wrlong	#29, fp
17c08     08 4E 05 F1 | 	add	fp, #8
17c0c     A7 12 02 FB | 	rdlong	arg01, fp
17c10     10 4E 85 F1 | 	sub	fp, #16
17c14     A7 12 62 FC | 	wrlong	arg01, fp
17c18     A7 12 02 F6 | 	mov	arg01, fp
17c1c     D8 2C BF FD | 	call	#_push
17c20     A7 F0 03 F6 | 	mov	ptra, fp
17c24     B2 00 A0 FD | 	call	#popregs_
17c28                 | _do_dpeek_ret
17c28     2D 00 64 FD | 	ret
17c2c                 | 
17c2c                 | ' 
17c2c                 | ' 
17c2c                 | ' sub do_lpeek
17c2c                 | _do_lpeek
17c2c     00 4A 05 F6 | 	mov	COUNT_, #0
17c30     A8 00 A0 FD | 	call	#pushregs_
17c34     14 F0 07 F1 | 	add	ptra, #20
17c38     24 2C BF FD | 	call	#_pop
17c3c     A7 FA 61 FC | 	wrlong	result1, fp
17c40     04 4E 05 F1 | 	add	fp, #4
17c44     A7 FC 61 FC | 	wrlong	result2, fp
17c48     04 4E 05 F1 | 	add	fp, #4
17c4c     A7 FE 61 FC | 	wrlong	result3, fp
17c50     08 4E 85 F1 | 	sub	fp, #8
17c54     A7 12 02 F6 | 	mov	arg01, fp
17c58     5C B8 BF FD | 	call	#_converttoint
17c5c     0C 4E 05 F1 | 	add	fp, #12
17c60     A7 FA 61 FC | 	wrlong	result1, fp
17c64                 | ' t1=pop()
17c64                 | ' a=converttoint(t1)
17c64                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
17c64     0C 4E 85 F1 | 	sub	fp, #12
17c68     00 04 00 FF 
17c6c     00 FA 15 F2 | 	cmp	result1, ##524288 wc
17c70     1C 00 90 3D |  if_ae	jmp	#LR__1940
17c74     0C 4E 05 F1 | 	add	fp, #12
17c78     A7 12 02 FB | 	rdlong	arg01, fp
17c7c     09 FB 01 FB | 	rdlong	result1, arg01
17c80     04 4E 05 F1 | 	add	fp, #4
17c84     A7 FA 61 FC | 	wrlong	result1, fp
17c88     10 4E 85 F1 | 	sub	fp, #16
17c8c     1C 00 90 FD | 	jmp	#LR__1941
17c90                 | LR__1940
17c90     0C 4E 05 F1 | 	add	fp, #12
17c94     A7 12 02 FB | 	rdlong	arg01, fp
17c98     0C 4E 85 F1 | 	sub	fp, #12
17c9c     90 2C B0 FD | 	call	#_pslpeek
17ca0     10 4E 05 F1 | 	add	fp, #16
17ca4     A7 FA 61 FC | 	wrlong	result1, fp
17ca8     10 4E 85 F1 | 	sub	fp, #16
17cac                 | LR__1941
17cac     08 4E 05 F1 | 	add	fp, #8
17cb0     A7 3A 68 FC | 	wrlong	#29, fp
17cb4     08 4E 05 F1 | 	add	fp, #8
17cb8     A7 12 02 FB | 	rdlong	arg01, fp
17cbc     10 4E 85 F1 | 	sub	fp, #16
17cc0     A7 12 62 FC | 	wrlong	arg01, fp
17cc4     A7 12 02 F6 | 	mov	arg01, fp
17cc8     2C 2C BF FD | 	call	#_push
17ccc     A7 F0 03 F6 | 	mov	ptra, fp
17cd0     B2 00 A0 FD | 	call	#popregs_
17cd4                 | _do_lpeek_ret
17cd4     2D 00 64 FD | 	ret
17cd8                 | 
17cd8                 | ' 
17cd8                 | ' sub do_fre
17cd8                 | _do_fre
17cd8     01 4A 05 F6 | 	mov	COUNT_, #1
17cdc     A8 00 A0 FD | 	call	#pushregs_
17ce0     0C F0 07 F1 | 	add	ptra, #12
17ce4     79 00 00 FF 
17ce8     88 E5 05 F1 | 	add	objptr, ##62344
17cec     F2 12 02 FB | 	rdlong	arg01, objptr
17cf0     16 00 00 FF 
17cf4     2C E5 85 F1 | 	sub	objptr, ##11564
17cf8     F2 1E 02 FB | 	rdlong	local01, objptr
17cfc     0F 13 82 F1 | 	sub	arg01, local01
17d00     16 00 00 FF 
17d04     D4 E5 05 F1 | 	add	objptr, ##11732
17d08     F2 12 62 FC | 	wrlong	arg01, objptr
17d0c     08 4E 05 F1 | 	add	fp, #8
17d10     A7 3A 68 FC | 	wrlong	#29, fp
17d14     08 4E 85 F1 | 	sub	fp, #8
17d18     F2 1E 02 FB | 	rdlong	local01, objptr
17d1c     7A 00 00 FF 
17d20     30 E4 85 F1 | 	sub	objptr, ##62512
17d24     A7 1E 62 FC | 	wrlong	local01, fp
17d28     A7 12 02 F6 | 	mov	arg01, fp
17d2c     C8 2B BF FD | 	call	#_push
17d30     A7 F0 03 F6 | 	mov	ptra, fp
17d34     B2 00 A0 FD | 	call	#popregs_
17d38                 | _do_fre_ret
17d38     2D 00 64 FD | 	ret
17d3c                 | 
17d3c                 | ' 
17d3c                 | ' sub do_adr
17d3c                 | _do_adr
17d3c                 | _do_adr_ret
17d3c     2D 00 64 FD | 	ret
17d40                 | 
17d40                 | ' 
17d40                 | ' sub do_getnotevalue
17d40                 | _do_getnotevalue
17d40     01 4A 05 F6 | 	mov	COUNT_, #1
17d44     A8 00 A0 FD | 	call	#pushregs_
17d48     1C F0 07 F1 | 	add	ptra, #28
17d4c     10 2B BF FD | 	call	#_pop
17d50     FF 14 02 F6 | 	mov	arg02, result3
17d54     10 4E 05 F1 | 	add	fp, #16
17d58     A7 FA 61 FC | 	wrlong	result1, fp
17d5c     04 4E 05 F1 | 	add	fp, #4
17d60     A7 FC 61 FC | 	wrlong	result2, fp
17d64     04 4E 05 F1 | 	add	fp, #4
17d68     A7 14 62 FC | 	wrlong	arg02, fp
17d6c     08 4E 85 F1 | 	sub	fp, #8
17d70     A7 12 02 F6 | 	mov	arg01, fp
17d74     10 4E 85 F1 | 	sub	fp, #16
17d78     3C B7 BF FD | 	call	#_converttoint
17d7c     FD 14 52 F6 | 	abs	arg02, result1 wc
17d80     0C 14 16 FD | 	qdiv	arg02, #12
17d84     0C 4E 05 F1 | 	add	fp, #12
17d88     A7 FA 61 FC | 	wrlong	result1, fp
17d8c     34 00 00 FF 
17d90     D8 E4 05 F1 | 	add	objptr, ##26840
17d94     08 4E 85 F1 | 	sub	fp, #8
17d98     19 14 62 FD | 	getqy	arg02
17d9c     0A 15 82 F6 | 	negc	arg02, arg02
17da0     02 14 66 F0 | 	shl	arg02, #2
17da4     F2 14 02 F1 | 	add	arg02, objptr
17da8     0A 15 02 FB | 	rdlong	arg02, arg02
17dac     A7 14 62 FC | 	wrlong	arg02, fp
17db0     08 4E 05 F1 | 	add	fp, #8
17db4     A7 14 02 FB | 	rdlong	arg02, fp
17db8     0A 15 52 F6 | 	abs	arg02, arg02 wc
17dbc     0C 14 16 FD | 	qdiv	arg02, #12
17dc0     0C 4E 85 F1 | 	sub	fp, #12
17dc4     34 00 00 FF 
17dc8     D8 E4 85 F1 | 	sub	objptr, ##26840
17dcc     18 14 62 FD | 	getqx	arg02
17dd0     0A 13 82 F6 | 	negc	arg01, arg02
17dd4     09 13 52 F6 | 	abs	arg01, arg01 wc
17dd8     1F 1E C6 C9 |  if_b	decod	local01, #31
17ddc     00 1E 06 36 |  if_ae	mov	local01, #0
17de0     B0 94 B0 FD | 	call	#__system___float_fromuns
17de4     0F FB 61 F5 | 	xor	result1, local01
17de8     08 4E 05 F1 | 	add	fp, #8
17dec     A7 FA 61 FC | 	wrlong	result1, fp
17df0     FD 14 02 F6 | 	mov	arg02, result1
17df4     08 4E 85 F1 | 	sub	fp, #8
17df8     1E 12 C6 F9 | 	decod	arg01, #30
17dfc     7C A7 B0 FD | 	call	#__system____builtin_powf
17e00     FD 12 02 F6 | 	mov	arg01, result1
17e04     04 4E 05 F1 | 	add	fp, #4
17e08     A7 14 02 FB | 	rdlong	arg02, fp
17e0c     04 4E 85 F1 | 	sub	fp, #4
17e10     84 98 B0 FD | 	call	#__system___float_mul
17e14     A7 FA 61 FC | 	wrlong	result1, fp
17e18     10 4E 05 F1 | 	add	fp, #16
17e1c     A7 FA 61 FC | 	wrlong	result1, fp
17e20     08 4E 05 F1 | 	add	fp, #8
17e24     A7 3C 68 FC | 	wrlong	#30, fp
17e28     08 4E 85 F1 | 	sub	fp, #8
17e2c     A7 12 02 F6 | 	mov	arg01, fp
17e30     10 4E 85 F1 | 	sub	fp, #16
17e34     C0 2A BF FD | 	call	#_push
17e38     A7 F0 03 F6 | 	mov	ptra, fp
17e3c     B2 00 A0 FD | 	call	#popregs_
17e40                 | _do_getnotevalue_ret
17e40     2D 00 64 FD | 	ret
17e44                 | 
17e44                 | ' 
17e44                 | ' 
17e44                 | ' sub do_waitms
17e44                 | _do_waitms
17e44     01 4A 05 F6 | 	mov	COUNT_, #1
17e48     A8 00 A0 FD | 	call	#pushregs_
17e4c     18 F0 07 F1 | 	add	ptra, #24
17e50     0C 2A BF FD | 	call	#_pop
17e54     A7 FA 61 FC | 	wrlong	result1, fp
17e58     04 4E 05 F1 | 	add	fp, #4
17e5c     A7 FC 61 FC | 	wrlong	result2, fp
17e60     04 4E 05 F1 | 	add	fp, #4
17e64     A7 FE 61 FC | 	wrlong	result3, fp
17e68                 | ' 
17e68                 | ' t1=pop() 'value
17e68                 | ' 
17e68                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
17e68     08 4E 85 F1 | 	sub	fp, #8
17e6c     1C FE 0D F2 | 	cmp	result3, #28 wz
17e70     08 4E 05 51 |  if_ne	add	fp, #8
17e74     A7 12 02 5B |  if_ne	rdlong	arg01, fp
17e78     08 4E 85 51 |  if_ne	sub	fp, #8
17e7c     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
17e80     A7 12 02 AB |  if_e	rdlong	arg01, fp
17e84     0C 4E 05 A1 |  if_e	add	fp, #12
17e88     A7 12 62 AC |  if_e	wrlong	arg01, fp
17e8c     0C 4E 85 A1 |  if_e	sub	fp, #12
17e90     14 00 90 AD |  if_e	jmp	#LR__1950
17e94     A7 12 02 F6 | 	mov	arg01, fp
17e98     1C B6 BF FD | 	call	#_converttoint
17e9c     0C 4E 05 F1 | 	add	fp, #12
17ea0     A7 FA 61 FC | 	wrlong	result1, fp
17ea4     0C 4E 85 F1 | 	sub	fp, #12
17ea8                 | LR__1950
17ea8                 | ' if t<0 then return
17ea8     0C 4E 05 F1 | 	add	fp, #12
17eac     A7 12 02 FB | 	rdlong	arg01, fp
17eb0     0C 4E 85 F1 | 	sub	fp, #12
17eb4     00 12 56 F2 | 	cmps	arg01, #0 wc
17eb8     B8 00 90 CD |  if_b	jmp	#LR__1955
17ebc                 | ' if t < 5000 then 
17ebc     0C 4E 05 F1 | 	add	fp, #12
17ec0     A7 12 02 FB | 	rdlong	arg01, fp
17ec4     0C 4E 85 F1 | 	sub	fp, #12
17ec8     09 00 00 FF 
17ecc     88 13 56 F2 | 	cmps	arg01, ##5000 wc
17ed0     14 00 90 3D |  if_ae	jmp	#LR__1951
17ed4     0C 4E 05 F1 | 	add	fp, #12
17ed8     A7 12 02 FB | 	rdlong	arg01, fp
17edc     0C 4E 85 F1 | 	sub	fp, #12
17ee0     28 6F B0 FD | 	call	#__system___waitms
17ee4     8C 00 90 FD | 	jmp	#LR__1954
17ee8                 | LR__1951
17ee8     10 4E 05 F1 | 	add	fp, #16
17eec     A7 02 68 FC | 	wrlong	#1, fp
17ef0     04 4E 85 F1 | 	sub	fp, #4
17ef4     A7 12 02 FB | 	rdlong	arg01, fp
17ef8     09 13 52 F6 | 	abs	arg01, arg01 wc
17efc     09 00 00 FF 
17f00     88 13 16 FD | 	qdiv	arg01, ##5000
17f04                 | '   for i=1 to t/5000
17f04     0C 4E 85 F1 | 	sub	fp, #12
17f08     18 1E 62 FD | 	getqx	local01
17f0c     0F 1F 82 F6 | 	negc	local01, local01
17f10     01 1E 06 F1 | 	add	local01, #1
17f14                 | LR__1952
17f14     10 4E 05 F1 | 	add	fp, #16
17f18     A7 12 02 FB | 	rdlong	arg01, fp
17f1c     10 4E 85 F1 | 	sub	fp, #16
17f20     0F 13 52 F2 | 	cmps	arg01, local01 wc
17f24     28 00 90 3D |  if_ae	jmp	#LR__1953
17f28     0C 4E 05 F1 | 	add	fp, #12
17f2c     A7 12 02 FB | 	rdlong	arg01, fp
17f30     0C 4E 85 F1 | 	sub	fp, #12
17f34     D4 6E B0 FD | 	call	#__system___waitms
17f38     10 4E 05 F1 | 	add	fp, #16
17f3c     A7 12 02 FB | 	rdlong	arg01, fp
17f40     01 12 06 F1 | 	add	arg01, #1
17f44     A7 12 62 FC | 	wrlong	arg01, fp
17f48     10 4E 85 F1 | 	sub	fp, #16
17f4c     C4 FF 9F FD | 	jmp	#LR__1952
17f50                 | LR__1953
17f50     0C 4E 05 F1 | 	add	fp, #12
17f54     A7 1E 02 FB | 	rdlong	local01, fp
17f58     0F 1F 52 F6 | 	abs	local01, local01 wc
17f5c     09 00 00 FF 
17f60     88 1F 16 FD | 	qdiv	local01, ##5000
17f64     0C 4E 85 F1 | 	sub	fp, #12
17f68     19 1E 62 FD | 	getqy	local01
17f6c     0F 13 82 F6 | 	negc	arg01, local01
17f70     98 6E B0 FD | 	call	#__system___waitms
17f74                 | LR__1954
17f74                 | LR__1955
17f74     A7 F0 03 F6 | 	mov	ptra, fp
17f78     B2 00 A0 FD | 	call	#popregs_
17f7c                 | _do_waitms_ret
17f7c     2D 00 64 FD | 	ret
17f80                 | 
17f80                 | ' 
17f80                 | ' sub do_waitvbl
17f80                 | _do_waitvbl
17f80     01 12 06 F6 | 	mov	arg01, #1
17f84     94 54 B0 FD | 	call	#_hg010b_spin2_waitvbl
17f88                 | _do_waitvbl_ret
17f88     2D 00 64 FD | 	ret
17f8c                 | 
17f8c                 | ' 
17f8c                 | ' sub do_waitclock
17f8c                 | _do_waitclock
17f8c     79 00 00 FF 
17f90     84 E5 05 F1 | 	add	objptr, ##62340
17f94     F2 00 02 FB | 	rdlong	_var01, objptr
17f98                 | ' c=hkcnt
17f98                 | ' do: loop until hkcnt<>c
17f98                 | LR__1960
17f98     F2 02 02 FB | 	rdlong	_var02, objptr
17f9c     00 03 0A F2 | 	cmp	_var02, _var01 wz
17fa0     F4 FF 9F AD |  if_e	jmp	#LR__1960
17fa4     79 00 00 FF 
17fa8     84 E5 85 F1 | 	sub	objptr, ##62340
17fac                 | _do_waitclock_ret
17fac     2D 00 64 FD | 	ret
17fb0                 | 
17fb0                 | ' 
17fb0                 | ' sub do_dir
17fb0                 | _do_dir
17fb0     05 4A 05 F6 | 	mov	COUNT_, #5
17fb4     A8 00 A0 FD | 	call	#pushregs_
17fb8     74 01 00 FF 
17fbc     5D 12 06 F6 | 	mov	arg01, ##@LR__5185
17fc0     E0 71 B0 FD | 	call	#__system___chdir
17fc4                 | ' chdir("/sd/bas")       ' set working directory
17fc4                 | ' print "Working directory: "; currentdir$ 
17fc4     00 12 06 F6 | 	mov	arg01, #0
17fc8     E4 C4 B0 FD | 	call	#__system___getiolock_0484
17fcc     FD 12 02 F6 | 	mov	arg01, result1
17fd0     44 6B B0 FD | 	call	#__system___lockmem
17fd4     74 01 00 FF 
17fd8     65 14 06 F6 | 	mov	arg02, ##@LR__5186
17fdc     00 12 06 F6 | 	mov	arg01, #0
17fe0     00 16 06 F6 | 	mov	arg03, #0
17fe4     38 78 B0 FD | 	call	#__system___basic_print_string
17fe8     72 00 00 FF 
17fec     98 E4 05 F1 | 	add	objptr, ##58520
17ff0     F2 14 02 FB | 	rdlong	arg02, objptr
17ff4     72 00 00 FF 
17ff8     98 E4 85 F1 | 	sub	objptr, ##58520
17ffc     00 12 06 F6 | 	mov	arg01, #0
18000     00 16 06 F6 | 	mov	arg03, #0
18004     18 78 B0 FD | 	call	#__system___basic_print_string
18008     00 12 06 F6 | 	mov	arg01, #0
1800c     0A 14 06 F6 | 	mov	arg02, #10
18010     00 16 06 F6 | 	mov	arg03, #0
18014     B0 77 B0 FD | 	call	#__system___basic_print_char
18018     00 12 06 F6 | 	mov	arg01, #0
1801c     90 C4 B0 FD | 	call	#__system___getiolock_0484
18020     FD 00 68 FC | 	wrlong	#0, result1
18024     00 1E 06 F6 | 	mov	local01, #0
18028     74 01 00 FF 
1802c     79 12 06 F6 | 	mov	arg01, ##@LR__5187
18030     10 14 06 F6 | 	mov	arg02, #16
18034     B0 C5 B0 FD | 	call	#__system___basic_dir
18038     FD 20 02 F6 | 	mov	local02, result1
1803c                 | ' px=0:
1803c                 | ' filename=dir$("*", fbDirectory)
1803c                 | ' while filename <> "" and filename <> nil
1803c                 | LR__1970
1803c     00 22 06 F6 | 	mov	local03, #0
18040     74 01 00 FF 
18044     7B 14 06 F6 | 	mov	arg02, ##@LR__5188
18048     10 13 02 F6 | 	mov	arg01, local02
1804c     F0 6A B0 FD | 	call	#__system___string_cmp
18050     00 FA 0D F2 | 	cmp	result1, #0 wz
18054     00 22 26 56 |  if_ne	not	local03, #0
18058     00 24 06 F6 | 	mov	local04, #0
1805c     10 13 02 F6 | 	mov	arg01, local02
18060     00 14 06 F6 | 	mov	arg02, #0
18064     D8 6A B0 FD | 	call	#__system___string_cmp
18068     00 FA 0D F2 | 	cmp	result1, #0 wz
1806c     00 24 26 56 |  if_ne	not	local04, #0
18070     12 23 CA F7 | 	test	local03, local04 wz
18074     9C 00 90 AD |  if_e	jmp	#LR__1972
18078                 | '   print "[dir] ";filename; : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
18078     00 12 06 F6 | 	mov	arg01, #0
1807c     30 C4 B0 FD | 	call	#__system___getiolock_0484
18080     FD 12 02 F6 | 	mov	arg01, result1
18084     90 6A B0 FD | 	call	#__system___lockmem
18088     74 01 00 FF 
1808c     7C 14 06 F6 | 	mov	arg02, ##@LR__5189
18090     00 12 06 F6 | 	mov	arg01, #0
18094     00 16 06 F6 | 	mov	arg03, #0
18098     84 77 B0 FD | 	call	#__system___basic_print_string
1809c     00 26 06 F6 | 	mov	local05, #0
180a0     00 12 06 F6 | 	mov	arg01, #0
180a4     10 15 02 F6 | 	mov	arg02, local02
180a8     00 16 06 F6 | 	mov	arg03, #0
180ac     70 77 B0 FD | 	call	#__system___basic_print_string
180b0     00 12 06 F6 | 	mov	arg01, #0
180b4     F8 C3 B0 FD | 	call	#__system___getiolock_0484
180b8     FD 00 68 FC | 	wrlong	#0, result1
180bc     40 1E 06 F1 | 	add	local01, #64
180c0     0F 13 02 F6 | 	mov	arg01, local01
180c4     F0 52 B0 FD | 	call	#_hg010b_spin2_setcursorx
180c8     00 1F 56 F2 | 	cmps	local01, #256 wc
180cc     30 00 90 CD |  if_b	jmp	#LR__1971
180d0     00 1E 06 F6 | 	mov	local01, #0
180d4     00 12 06 F6 | 	mov	arg01, #0
180d8     D4 C3 B0 FD | 	call	#__system___getiolock_0484
180dc     FD 12 02 F6 | 	mov	arg01, result1
180e0     34 6A B0 FD | 	call	#__system___lockmem
180e4     00 12 06 F6 | 	mov	arg01, #0
180e8     0A 14 06 F6 | 	mov	arg02, #10
180ec     00 16 06 F6 | 	mov	arg03, #0
180f0     D4 76 B0 FD | 	call	#__system___basic_print_char
180f4     00 12 06 F6 | 	mov	arg01, #0
180f8     B4 C3 B0 FD | 	call	#__system___getiolock_0484
180fc     FD 00 68 FC | 	wrlong	#0, result1
18100                 | LR__1971
18100     00 12 06 F6 | 	mov	arg01, #0
18104     00 14 06 F6 | 	mov	arg02, #0
18108     DC C4 B0 FD | 	call	#__system___basic_dir
1810c     FD 20 02 F6 | 	mov	local02, result1
18110     28 FF 9F FD | 	jmp	#LR__1970
18114                 | LR__1972
18114                 | ' print
18114     00 12 06 F6 | 	mov	arg01, #0
18118     94 C3 B0 FD | 	call	#__system___getiolock_0484
1811c     FD 12 02 F6 | 	mov	arg01, result1
18120     F4 69 B0 FD | 	call	#__system___lockmem
18124     00 12 06 F6 | 	mov	arg01, #0
18128     0A 14 06 F6 | 	mov	arg02, #10
1812c     00 16 06 F6 | 	mov	arg03, #0
18130     94 76 B0 FD | 	call	#__system___basic_print_char
18134     00 12 06 F6 | 	mov	arg01, #0
18138     74 C3 B0 FD | 	call	#__system___getiolock_0484
1813c     FD 00 68 FC | 	wrlong	#0, result1
18140     00 1E 06 F6 | 	mov	local01, #0
18144                 | ' return cursor_y
18144     74 01 00 FF 
18148     83 12 06 F6 | 	mov	arg01, ##@LR__5190
1814c     21 14 06 F6 | 	mov	arg02, #33
18150     94 C4 B0 FD | 	call	#__system___basic_dir
18154     FD 20 02 F6 | 	mov	local02, result1
18158                 | ' px=0: py=v.getcursory()
18158                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
18158                 | ' do while filename <> "" and filename <> nil
18158                 | LR__1973
18158     00 22 06 F6 | 	mov	local03, #0
1815c     74 01 00 FF 
18160     85 14 06 F6 | 	mov	arg02, ##@LR__5191
18164     10 13 02 F6 | 	mov	arg01, local02
18168     D4 69 B0 FD | 	call	#__system___string_cmp
1816c     00 FA 0D F2 | 	cmp	result1, #0 wz
18170     00 22 26 56 |  if_ne	not	local03, #0
18174     00 24 06 F6 | 	mov	local04, #0
18178     10 13 02 F6 | 	mov	arg01, local02
1817c     00 14 06 F6 | 	mov	arg02, #0
18180     BC 69 B0 FD | 	call	#__system___string_cmp
18184     00 FA 0D F2 | 	cmp	result1, #0 wz
18188     00 24 26 56 |  if_ne	not	local04, #0
1818c     12 23 CA F7 | 	test	local03, local04 wz
18190     80 01 90 AD |  if_e	jmp	#LR__1978
18194                 | '   print filename; : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
18194     00 12 06 F6 | 	mov	arg01, #0
18198     14 C3 B0 FD | 	call	#__system___getiolock_0484
1819c     FD 12 02 F6 | 	mov	arg01, result1
181a0     74 69 B0 FD | 	call	#__system___lockmem
181a4     00 12 06 F6 | 	mov	arg01, #0
181a8     10 15 02 F6 | 	mov	arg02, local02
181ac     00 16 06 F6 | 	mov	arg03, #0
181b0     6C 76 B0 FD | 	call	#__system___basic_print_string
181b4     00 12 06 F6 | 	mov	arg01, #0
181b8     F4 C2 B0 FD | 	call	#__system___getiolock_0484
181bc     FD 00 68 FC | 	wrlong	#0, result1
181c0     40 1E 06 F1 | 	add	local01, #64
181c4     0F 13 02 F6 | 	mov	arg01, local01
181c8     EC 51 B0 FD | 	call	#_hg010b_spin2_setcursorx
181cc     00 1F 56 F2 | 	cmps	local01, #256 wc
181d0     30 00 90 CD |  if_b	jmp	#LR__1974
181d4     00 1E 06 F6 | 	mov	local01, #0
181d8     00 12 06 F6 | 	mov	arg01, #0
181dc     D0 C2 B0 FD | 	call	#__system___getiolock_0484
181e0     FD 12 02 F6 | 	mov	arg01, result1
181e4     30 69 B0 FD | 	call	#__system___lockmem
181e8     00 12 06 F6 | 	mov	arg01, #0
181ec     0A 14 06 F6 | 	mov	arg02, #10
181f0     00 16 06 F6 | 	mov	arg03, #0
181f4     D0 75 B0 FD | 	call	#__system___basic_print_char
181f8     00 12 06 F6 | 	mov	arg01, #0
181fc     B0 C2 B0 FD | 	call	#__system___getiolock_0484
18200     FD 00 68 FC | 	wrlong	#0, result1
18204                 | LR__1974
18204     00 12 06 F6 | 	mov	arg01, #0
18208     00 14 06 F6 | 	mov	arg02, #0
1820c     D8 C3 B0 FD | 	call	#__system___basic_dir
18210     FD 20 02 F6 | 	mov	local02, result1
18214                 | '   filename = dir$()      ' continue scan
18214                 | '     if v.getcursory()=34 then    'bug, after first break, cursory is always 35
18214                 | ' return cursor_y
18214     3E E4 05 F1 | 	add	objptr, #62
18218     F2 FA C1 FA | 	rdbyte	result1, objptr
1821c     3E E4 85 F1 | 	sub	objptr, #62
18220     22 FA 0D F2 | 	cmp	result1, #34 wz
18224     30 FF 9F 5D |  if_ne	jmp	#LR__1973
18228                 | '     print "-----more, press any key";
18228     00 12 06 F6 | 	mov	arg01, #0
1822c     80 C2 B0 FD | 	call	#__system___getiolock_0484
18230     FD 12 02 F6 | 	mov	arg01, result1
18234     E0 68 B0 FD | 	call	#__system___lockmem
18238     74 01 00 FF 
1823c     86 14 06 F6 | 	mov	arg02, ##@LR__5192
18240     00 12 06 F6 | 	mov	arg01, #0
18244     00 16 06 F6 | 	mov	arg03, #0
18248     D4 75 B0 FD | 	call	#__system___basic_print_string
1824c     00 12 06 F6 | 	mov	arg01, #0
18250     5C C2 B0 FD | 	call	#__system___getiolock_0484
18254     FD 00 68 FC | 	wrlong	#0, result1
18258                 | '     do 
18258                 | LR__1975
18258     C4 60 B0 FD | 	call	#_usbnew_spin2_get_key
1825c     00 FA 0D F2 | 	cmp	result1, #0 wz
18260     F4 FF 9F 5D |  if_ne	jmp	#LR__1975
18264                 | '     do
18264                 | LR__1976
18264     B8 60 B0 FD | 	call	#_usbnew_spin2_get_key
18268     00 FA 0D F2 | 	cmp	result1, #0 wz
1826c     F4 FF 9F AD |  if_e	jmp	#LR__1976
18270                 | '       if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
18270     78 00 00 FF 
18274     F0 E4 05 F1 | 	add	objptr, ##61680
18278     F2 22 02 FB | 	rdlong	local03, objptr
1827c     78 00 00 FF 
18280     F0 E4 85 F1 | 	sub	objptr, ##61680
18284     01 22 0E F2 | 	cmp	local03, #1 wz
18288     3C 00 90 5D |  if_ne	jmp	#LR__1977
1828c     79 00 00 FF 
18290     94 E5 05 F1 | 	add	objptr, ##62356
18294     F2 14 02 FB | 	rdlong	arg02, objptr
18298     04 E4 85 F1 | 	sub	objptr, #4
1829c     F2 1A 02 FB | 	rdlong	arg05, objptr
182a0     07 12 06 F6 | 	mov	arg01, #7
182a4     56 00 00 FF 
182a8     44 16 06 F6 | 	mov	arg03, ##44100
182ac     0C 18 C6 F9 | 	decod	arg04, #12
182b0     01 1C 66 F6 | 	neg	arg06, #1
182b4     6E 00 00 FF 
182b8     C4 E4 85 F1 | 	sub	objptr, ##56516
182bc     E8 63 B0 FD | 	call	#_audio096_spin2_play
182c0     0B 00 00 FF 
182c4     CC E4 85 F1 | 	sub	objptr, ##5836
182c8                 | LR__1977
182c8     00 12 06 F6 | 	mov	arg01, #0
182cc     23 14 06 F6 | 	mov	arg02, #35
182d0     A8 50 B0 FD | 	call	#_hg010b_spin2_setcursorpos
182d4                 | '     position 0,35: print "                             ";: position 4,35  
182d4     00 12 06 F6 | 	mov	arg01, #0
182d8     D4 C1 B0 FD | 	call	#__system___getiolock_0484
182dc     FD 12 02 F6 | 	mov	arg01, result1
182e0     34 68 B0 FD | 	call	#__system___lockmem
182e4     74 01 00 FF 
182e8     9F 14 06 F6 | 	mov	arg02, ##@LR__5193
182ec     00 12 06 F6 | 	mov	arg01, #0
182f0     00 16 06 F6 | 	mov	arg03, #0
182f4     28 75 B0 FD | 	call	#__system___basic_print_string
182f8     00 12 06 F6 | 	mov	arg01, #0
182fc     B0 C1 B0 FD | 	call	#__system___getiolock_0484
18300     FD 00 68 FC | 	wrlong	#0, result1
18304     04 12 06 F6 | 	mov	arg01, #4
18308     23 14 06 F6 | 	mov	arg02, #35
1830c     6C 50 B0 FD | 	call	#_hg010b_spin2_setcursorpos
18310     44 FE 9F FD | 	jmp	#LR__1973
18314                 | LR__1978
18314     A7 F0 03 F6 | 	mov	ptra, fp
18318     B2 00 A0 FD | 	call	#popregs_
1831c                 | _do_dir_ret
1831c     2D 00 64 FD | 	ret
18320                 | 
18320                 | ' 
18320                 | ' sub do_if
18320                 | _do_if
18320     05 4A 05 F6 | 	mov	COUNT_, #5
18324     A8 00 A0 FD | 	call	#pushregs_
18328     34 25 BF FD | 	call	#_pop
1832c     FD 1E 0A F6 | 	mov	local01, result1 wz
18330     FE 20 02 F6 | 	mov	local02, result2
18334     FF 22 02 F6 | 	mov	local03, result3
18338                 | ' t1=pop()
18338                 | ' ' if uresult=0, jump over else
18338                 | ' if t1.result.uresult = 0 then 
18338     BC 00 90 5D |  if_ne	jmp	#LR__1982
1833c                 | '   for i=lineptr_e to lineptr-1
1833c     6A 00 00 FF 
18340     80 E4 05 F1 | 	add	objptr, ##54400
18344     F2 24 02 FB | 	rdlong	local04, objptr
18348     04 E4 85 F1 | 	sub	objptr, #4
1834c     F2 26 02 FB | 	rdlong	local05, objptr
18350     6A 00 00 FF 
18354     7C E4 85 F1 | 	sub	objptr, ##54396
18358                 | LR__1980
18358     13 25 52 F2 | 	cmps	local04, local05 wc
1835c     78 00 90 3D |  if_ae	jmp	#LR__1981
18360     12 FF 01 F6 | 	mov	result3, local04
18364     01 FE 65 F0 | 	shl	result3, #1
18368     12 FF 01 F1 | 	add	result3, local04
1836c     02 FE 65 F0 | 	shl	result3, #2
18370     67 00 00 FF 
18374     7C E4 05 F1 | 	add	objptr, ##52860
18378     F2 FE 01 F1 | 	add	result3, objptr
1837c     FF 1E 02 FB | 	rdlong	local01, result3
18380     04 FE 05 F1 | 	add	result3, #4
18384     FF FC 01 FB | 	rdlong	result2, result3
18388     12 FF 01 F6 | 	mov	result3, local04
1838c     01 FE 65 F0 | 	shl	result3, #1
18390     12 FF 01 F1 | 	add	result3, local04
18394     02 FE 65 F0 | 	shl	result3, #2
18398     F2 FE 01 F1 | 	add	result3, objptr
1839c     08 FE 05 F1 | 	add	result3, #8
183a0     FF FE 01 FB | 	rdlong	result3, result3
183a4     FE 20 02 F6 | 	mov	local02, result2
183a8     FF 22 02 F6 | 	mov	local03, result3
183ac                 | '     t1=compiledline(i)
183ac                 | '     if t1.result_type=token_else then lineptr_e=i : return
183ac     5A 22 0E F2 | 	cmp	local03, #90 wz
183b0     67 00 00 FF 
183b4     7C E4 85 F1 | 	sub	objptr, ##52860
183b8     6A 00 00 AF 
183bc     80 E4 05 A1 |  if_e	add	objptr, ##54400
183c0     F2 24 62 AC |  if_e	wrlong	local04, objptr
183c4     6A 00 00 AF 
183c8     80 E4 85 A1 |  if_e	sub	objptr, ##54400
183cc     28 00 90 AD |  if_e	jmp	#LR__1983
183d0     01 24 06 F1 | 	add	local04, #1
183d4     80 FF 9F FD | 	jmp	#LR__1980
183d8                 | LR__1981
183d8     6A 00 00 FF 
183dc     7C E4 05 F1 | 	add	objptr, ##54396
183e0     F2 26 02 FB | 	rdlong	local05, objptr
183e4     01 26 86 F1 | 	sub	local05, #1
183e8     04 E4 05 F1 | 	add	objptr, #4
183ec     F2 26 62 FC | 	wrlong	local05, objptr
183f0     6A 00 00 FF 
183f4     80 E4 85 F1 | 	sub	objptr, ##54400
183f8                 | LR__1982
183f8                 | LR__1983
183f8     A7 F0 03 F6 | 	mov	ptra, fp
183fc     B2 00 A0 FD | 	call	#popregs_
18400                 | _do_if_ret
18400     2D 00 64 FD | 	ret
18404                 | 
18404                 | ' 
18404                 | ' sub do_else
18404                 | _do_else
18404     6A 00 00 FF 
18408     7C E4 05 F1 | 	add	objptr, ##54396
1840c     F2 00 02 FB | 	rdlong	_var01, objptr
18410     01 00 86 F1 | 	sub	_var01, #1
18414     04 E4 05 F1 | 	add	objptr, #4
18418     F2 00 62 FC | 	wrlong	_var01, objptr
1841c     6A 00 00 FF 
18420     80 E4 85 F1 | 	sub	objptr, ##54400
18424                 | _do_else_ret
18424     2D 00 64 FD | 	ret
18428                 | 
18428                 | ' 
18428                 | ' sub do_rad
18428                 | _do_rad
18428     79 00 00 FF 
1842c     98 E5 05 F1 | 	add	objptr, ##62360
18430     00 C0 9F FF 
18434     F2 00 68 FC | 	wrlong	##1065353216, objptr
18438     04 E4 05 F1 | 	add	objptr, #4
1843c     00 C0 9F FF 
18440     F2 00 68 FC | 	wrlong	##1065353216, objptr
18444     79 00 00 FF 
18448     9C E5 85 F1 | 	sub	objptr, ##62364
1844c                 | _do_rad_ret
1844c     2D 00 64 FD | 	ret
18450                 | 
18450                 | ' 
18450                 | ' sub do_deg
18450                 | _do_deg
18450     79 00 00 FF 
18454     98 E5 05 F1 | 	add	objptr, ##62360
18458     7D 47 9E FF 
1845c     F2 6A 68 FC | 	wrlong	##1016003125, objptr
18460     04 E4 05 F1 | 	add	objptr, #4
18464     97 32 A1 FF 
18468     F2 C2 69 FC | 	wrlong	##1113927393, objptr
1846c     79 00 00 FF 
18470     9C E5 85 F1 | 	sub	objptr, ##62364
18474                 | _do_deg_ret
18474     2D 00 64 FD | 	ret
18478                 | 
18478                 | ' 
18478                 | ' sub do_int
18478                 | _do_int
18478     00 4A 05 F6 | 	mov	COUNT_, #0
1847c     A8 00 A0 FD | 	call	#pushregs_
18480     0C F0 07 F1 | 	add	ptra, #12
18484     D8 23 BF FD | 	call	#_pop
18488     A7 FA 61 FC | 	wrlong	result1, fp
1848c     04 4E 05 F1 | 	add	fp, #4
18490     A7 FC 61 FC | 	wrlong	result2, fp
18494     04 4E 05 F1 | 	add	fp, #4
18498     A7 FE 61 FC | 	wrlong	result3, fp
1849c     08 4E 85 F1 | 	sub	fp, #8
184a0     A7 12 02 F6 | 	mov	arg01, fp
184a4     10 B0 BF FD | 	call	#_converttoint
184a8     A7 FA 61 FC | 	wrlong	result1, fp
184ac     08 4E 05 F1 | 	add	fp, #8
184b0     A7 38 68 FC | 	wrlong	#28, fp
184b4     08 4E 85 F1 | 	sub	fp, #8
184b8     A7 12 02 F6 | 	mov	arg01, fp
184bc     38 24 BF FD | 	call	#_push
184c0     A7 F0 03 F6 | 	mov	ptra, fp
184c4     B2 00 A0 FD | 	call	#popregs_
184c8                 | _do_int_ret
184c8     2D 00 64 FD | 	ret
184cc                 | 
184cc                 | ' 
184cc                 | ' sub do_nothing
184cc                 | _do_nothing
184cc                 | _do_nothing_ret
184cc     2D 00 64 FD | 	ret
184d0                 | 
184d0                 | ' 
184d0                 | ' sub do_brun
184d0                 | _do_brun
184d0     08 4A 05 F6 | 	mov	COUNT_, #8
184d4     A8 00 A0 FD | 	call	#pushregs_
184d8     84 23 BF FD | 	call	#_pop
184dc     FE 1A 02 F6 | 	mov	arg05, result2
184e0     FF 18 02 F6 | 	mov	arg04, result3
184e4     FD 1E 02 F6 | 	mov	local01, result1
184e8     0D 21 02 F6 | 	mov	local02, arg05
184ec     0C 23 02 F6 | 	mov	local03, arg04
184f0                 | ' 
184f0                 | ' t1=pop() 
184f0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
184f0     2B 22 0E F2 | 	cmp	local03, #43 wz
184f4     10 00 90 5D |  if_ne	jmp	#LR__1990
184f8     0F 13 02 F6 | 	mov	arg01, local01
184fc     94 67 BF FD | 	call	#_convertstring
18500     FD 1E 02 F6 | 	mov	local01, result1
18504     1F 22 06 F6 | 	mov	local03, #31
18508                 | LR__1990
18508                 | ' if t1.result_type=result_string then
18508     1F 22 0E F2 | 	cmp	local03, #31 wz
1850c     EC 01 90 5D |  if_ne	jmp	#LR__1994
18510     0F 25 02 F6 | 	mov	local04, local01
18514                 | '   filename=t1.result.sresult
18514                 | '   if left$(filename,1)="/" then 
18514     12 13 02 F6 | 	mov	arg01, local04
18518     01 14 06 F6 | 	mov	arg02, #1
1851c     40 86 B0 FD | 	call	#__system__Left_S
18520     FD 12 02 F6 | 	mov	arg01, result1
18524     74 01 00 FF 
18528     BD 14 06 F6 | 	mov	arg02, ##@LR__5194
1852c     10 66 B0 FD | 	call	#__system___string_cmp
18530     00 FA 0D F2 | 	cmp	result1, #0 wz
18534     12 27 02 A6 |  if_e	mov	local05, local04
18538     14 00 90 AD |  if_e	jmp	#LR__1991
1853c     74 01 00 FF 
18540     BF 12 06 F6 | 	mov	arg01, ##@LR__5195
18544     12 15 02 F6 | 	mov	arg02, local04
18548     28 66 B0 FD | 	call	#__system___string_concat
1854c     FD 26 02 F6 | 	mov	local05, result1
18550                 | LR__1991
18550                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
18550                 | '   open fullfilename for input as #9
18550     09 12 06 F6 | 	mov	arg01, #9
18554     13 15 02 F6 | 	mov	arg02, local05
18558     00 16 06 F6 | 	mov	arg03, #0
1855c     BC 71 B0 FD | 	call	#__system___basic_open_string
18560     20 E6 05 F1 | 	add	ptr___system__dat__, #32
18564     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
18568     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1856c     FD 28 0A F6 | 	mov	local06, result1 wz
18570                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
18570     8C 00 90 AD |  if_e	jmp	#LR__1992
18574     00 12 06 F6 | 	mov	arg01, #0
18578     34 BF B0 FD | 	call	#__system___getiolock_0484
1857c     FD 12 02 F6 | 	mov	arg01, result1
18580     94 65 B0 FD | 	call	#__system___lockmem
18584     74 01 00 FF 
18588     C8 14 06 F6 | 	mov	arg02, ##@LR__5196
1858c     00 12 06 F6 | 	mov	arg01, #0
18590     00 16 06 F6 | 	mov	arg03, #0
18594     88 72 B0 FD | 	call	#__system___basic_print_string
18598     00 12 06 F6 | 	mov	arg01, #0
1859c     14 15 02 F6 | 	mov	arg02, local06
185a0     00 16 06 F6 | 	mov	arg03, #0
185a4     0A 18 06 F6 | 	mov	arg04, #10
185a8     B8 72 B0 FD | 	call	#__system___basic_print_integer
185ac     74 01 00 FF 
185b0     D6 14 06 F6 | 	mov	arg02, ##@LR__5197
185b4     00 12 06 F6 | 	mov	arg01, #0
185b8     00 16 06 F6 | 	mov	arg03, #0
185bc     60 72 B0 FD | 	call	#__system___basic_print_string
185c0     14 13 02 F6 | 	mov	arg01, local06
185c4     E4 8B B0 FD | 	call	#__system___strerror
185c8     FD 14 02 F6 | 	mov	arg02, result1
185cc     00 12 06 F6 | 	mov	arg01, #0
185d0     00 16 06 F6 | 	mov	arg03, #0
185d4     48 72 B0 FD | 	call	#__system___basic_print_string
185d8     00 12 06 F6 | 	mov	arg01, #0
185dc     0A 14 06 F6 | 	mov	arg02, #10
185e0     00 16 06 F6 | 	mov	arg03, #0
185e4     E0 71 B0 FD | 	call	#__system___basic_print_char
185e8     00 12 06 F6 | 	mov	arg01, #0
185ec     C0 BE B0 FD | 	call	#__system___getiolock_0484
185f0     FD 00 68 FC | 	wrlong	#0, result1
185f4     09 12 06 F6 | 	mov	arg01, #9
185f8     E4 B4 B0 FD | 	call	#__system__close
185fc     FC 00 90 FD | 	jmp	#LR__1995
18600                 | LR__1992
18600     01 2A 06 F6 | 	mov	local07, #1
18604     00 2C 06 F6 | 	mov	local08, #0
18608                 | '   do
18608                 | LR__1993
18608                 | '     get #9,pos,block(0),1024,r : pos+=r	
18608     76 00 00 FF 
1860c     B8 E4 05 F1 | 	add	objptr, ##60600
18610     F2 16 02 F6 | 	mov	arg03, objptr
18614     76 00 00 FF 
18618     B8 E4 85 F1 | 	sub	objptr, ##60600
1861c     09 12 06 F6 | 	mov	arg01, #9
18620     15 15 02 F6 | 	mov	arg02, local07
18624     0A 18 C6 F9 | 	decod	arg04, #10
18628     01 1A 06 F6 | 	mov	arg05, #1
1862c     00 73 B0 FD | 	call	#__system___basic_get
18630     FD 28 02 F6 | 	mov	local06, result1
18634     FD 2A 02 F1 | 	add	local07, result1
18638     76 00 00 FF 
1863c     B8 E4 05 F1 | 	add	objptr, ##60600
18640     F2 12 02 F6 | 	mov	arg01, objptr
18644     16 15 02 F6 | 	mov	arg02, local08
18648     0A 16 C6 F9 | 	decod	arg03, #10
1864c     6A 00 00 FF 
18650     EC E5 85 F1 | 	sub	objptr, ##54764
18654     38 59 B0 FD | 	call	#_psram_spin2_write
18658     0B 00 00 FF 
1865c     CC E4 85 F1 | 	sub	objptr, ##5836
18660     14 2D 02 F1 | 	add	local08, local06
18664     02 00 00 FF 
18668     00 28 0E F2 | 	cmp	local06, ##1024 wz
1866c     E0 03 00 AF 
18670     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
18674     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1993
18678     56 00 00 FF 
1867c     FC E5 05 F1 | 	add	objptr, ##44540
18680     F2 12 02 FB | 	rdlong	arg01, objptr
18684     03 12 62 FD | 	cogstop	arg01
18688     04 E4 05 F1 | 	add	objptr, #4
1868c     F2 12 02 FB | 	rdlong	arg01, objptr
18690     03 12 62 FD | 	cogstop	arg01
18694     04 E4 05 F1 | 	add	objptr, #4
18698     F2 12 02 FB | 	rdlong	arg01, objptr
1869c     03 12 62 FD | 	cogstop	arg01
186a0     21 00 00 FF 
186a4     F0 E4 05 F1 | 	add	objptr, ##17136
186a8     F2 12 02 FB | 	rdlong	arg01, objptr
186ac     03 12 62 FD | 	cogstop	arg01
186b0     18 00 00 FF 
186b4     D8 EA 05 F1 | 	add	ptr__dat__, ##12504
186b8     F5 14 02 F6 | 	mov	arg02, ptr__dat__
186bc     18 00 00 FF 
186c0     D8 EA 85 F1 | 	sub	ptr__dat__, ##12504
186c4     21 00 00 FF 
186c8     E8 E4 85 F1 | 	sub	objptr, ##17128
186cc     1E 2C 06 F6 | 	mov	local08, #30
186d0     28 E4 61 FD | 	setq	objptr
186d4     0A 2D F2 FC | 	coginit	local08, arg02 wc
186d8     01 2C 66 C6 |  if_b	neg	local08, #1
186dc     23 00 00 FF 
186e0     2C E4 05 F1 | 	add	objptr, ##17964
186e4     F2 2C 62 FC | 	wrlong	local08, objptr
186e8     7A 00 00 FF 
186ec     38 E4 85 F1 | 	sub	objptr, ##62520
186f0     00 12 06 F6 | 	mov	arg01, #0
186f4     01 12 62 FD | 	cogid	arg01
186f8     03 12 62 FD | 	cogstop	arg01
186fc                 | LR__1994
186fc                 | LR__1995
186fc     A7 F0 03 F6 | 	mov	ptra, fp
18700     B2 00 A0 FD | 	call	#popregs_
18704                 | _do_brun_ret
18704     2D 00 64 FD | 	ret
18708                 | 
18708                 | ' 
18708                 | ' 
18708                 | ' sub do_mouse
18708                 | _do_mouse
18708     54 21 BF FD | 	call	#_pop
1870c     00 FA 4D F2 | 	cmps	result1, #0 wz
18710                 | ' t1=pop()
18710                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
18710     14 00 90 5D |  if_ne	jmp	#LR__2000
18714     10 12 06 F6 | 	mov	arg01, #16
18718     00 14 06 F6 | 	mov	arg02, #0
1871c     00 16 06 F6 | 	mov	arg03, #0
18720     48 40 B0 FD | 	call	#_hg010b_spin2_setspritesize
18724     10 00 90 FD | 	jmp	#LR__2001
18728                 | LR__2000
18728     10 12 06 F6 | 	mov	arg01, #16
1872c     20 14 06 F6 | 	mov	arg02, #32
18730     20 16 06 F6 | 	mov	arg03, #32
18734     34 40 B0 FD | 	call	#_hg010b_spin2_setspritesize
18738                 | LR__2001
18738                 | _do_mouse_ret
18738     2D 00 64 FD | 	ret
1873c                 | 
1873c                 | ' 
1873c                 | ' sub do_cursor
1873c                 | _do_cursor
1873c     20 21 BF FD | 	call	#_pop
18740     00 FA 4D F2 | 	cmps	result1, #0 wz
18744                 | ' t1=pop()
18744                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
18744     14 00 90 5D |  if_ne	jmp	#LR__2010
18748     11 12 06 F6 | 	mov	arg01, #17
1874c     00 14 06 F6 | 	mov	arg02, #0
18750     00 16 06 F6 | 	mov	arg03, #0
18754     14 40 B0 FD | 	call	#_hg010b_spin2_setspritesize
18758     10 00 90 FD | 	jmp	#LR__2011
1875c                 | LR__2010
1875c     11 12 06 F6 | 	mov	arg01, #17
18760     08 14 06 F6 | 	mov	arg02, #8
18764     10 16 06 F6 | 	mov	arg03, #16
18768     00 40 B0 FD | 	call	#_hg010b_spin2_setspritesize
1876c                 | LR__2011
1876c                 | _do_cursor_ret
1876c     2D 00 64 FD | 	ret
18770                 | 
18770                 | ' 
18770                 | ' 
18770                 | ' sub do_click
18770                 | _do_click
18770     EC 20 BF FD | 	call	#_pop
18774     00 FA 4D F2 | 	cmps	result1, #0 wz
18778                 | ' t1=pop()
18778                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
18778     78 00 00 AF 
1877c     F0 E4 05 A1 |  if_e	add	objptr, ##61680
18780     F2 00 68 AC |  if_e	wrlong	#0, objptr
18784     78 00 00 FF 
18788     F0 E4 C5 F3 | 	sumz	objptr, ##61680
1878c     F2 02 68 5C |  if_ne	wrlong	#1, objptr
18790     78 00 00 5F 
18794     F0 E4 85 51 |  if_ne	sub	objptr, ##61680
18798                 | _do_click_ret
18798     2D 00 64 FD | 	ret
1879c                 | 
1879c                 | ' 
1879c                 | ' 
1879c                 | ' sub do_beep
1879c                 | _do_beep
1879c     02 4A 05 F6 | 	mov	COUNT_, #2
187a0     A8 00 A0 FD | 	call	#pushregs_
187a4     20 F0 07 F1 | 	add	ptra, #32
187a8     B4 20 BF FD | 	call	#_pop
187ac     FD 1E 02 F6 | 	mov	local01, result1
187b0     FE 1C 02 F6 | 	mov	arg06, result2
187b4     FF 20 02 F6 | 	mov	local02, result3
187b8     0C 4E 05 F1 | 	add	fp, #12
187bc     A7 1E 62 FC | 	wrlong	local01, fp
187c0     04 4E 05 F1 | 	add	fp, #4
187c4     A7 1C 62 FC | 	wrlong	arg06, fp
187c8     04 4E 05 F1 | 	add	fp, #4
187cc     A7 20 62 FC | 	wrlong	local02, fp
187d0     14 4E 85 F1 | 	sub	fp, #20
187d4     88 20 BF FD | 	call	#_pop
187d8     A7 FA 61 FC | 	wrlong	result1, fp
187dc     04 4E 05 F1 | 	add	fp, #4
187e0     A7 FC 61 FC | 	wrlong	result2, fp
187e4     04 4E 05 F1 | 	add	fp, #4
187e8     A7 FE 61 FC | 	wrlong	result3, fp
187ec                 | ' 
187ec                 | ' t2=pop()
187ec                 | ' t1=pop()
187ec                 | ' 
187ec                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
187ec     08 4E 85 F1 | 	sub	fp, #8
187f0     1C FE 0D F2 | 	cmp	result3, #28 wz
187f4     08 4E 05 51 |  if_ne	add	fp, #8
187f8     A7 20 02 5B |  if_ne	rdlong	local02, fp
187fc     08 4E 85 51 |  if_ne	sub	fp, #8
18800     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
18804     A7 1E 02 AB |  if_e	rdlong	local01, fp
18808     18 4E 05 A1 |  if_e	add	fp, #24
1880c     A7 1E 62 AC |  if_e	wrlong	local01, fp
18810     18 4E 85 A1 |  if_e	sub	fp, #24
18814     14 00 90 AD |  if_e	jmp	#LR__2020
18818     A7 12 02 F6 | 	mov	arg01, fp
1881c     98 AC BF FD | 	call	#_converttoint
18820     18 4E 05 F1 | 	add	fp, #24
18824     A7 FA 61 FC | 	wrlong	result1, fp
18828     18 4E 85 F1 | 	sub	fp, #24
1882c                 | LR__2020
1882c     1C 4E 05 F1 | 	add	fp, #28
18830     A7 FE 48 FC | 	wrbyte	#127, fp
18834     01 4E 05 F1 | 	add	fp, #1
18838     A7 00 49 FC | 	wrbyte	#128, fp
1883c     01 4E 85 F1 | 	sub	fp, #1
18840     A7 14 02 F6 | 	mov	arg02, fp
18844     04 4E 85 F1 | 	sub	fp, #4
18848     A7 16 02 FB | 	rdlong	arg03, fp
1884c     18 4E 85 F1 | 	sub	fp, #24
18850     01 16 66 F0 | 	shl	arg03, #1
18854     07 12 06 F6 | 	mov	arg01, #7
18858     0E 18 C6 F9 | 	decod	arg04, #14
1885c     02 1A 06 F6 | 	mov	arg05, #2
18860     00 1C 06 F6 | 	mov	arg06, #0
18864     0B 00 00 FF 
18868     CC E4 05 F1 | 	add	objptr, ##5836
1886c     F4 5E B0 FD | 	call	#_audio096_spin2_play8
18870     0B 00 00 FF 
18874     CC E4 85 F1 | 	sub	objptr, ##5836
18878     0C 4E 05 F1 | 	add	fp, #12
1887c     A7 12 02 F6 | 	mov	arg01, fp
18880     0C 4E 85 F1 | 	sub	fp, #12
18884     70 20 BF FD | 	call	#_push
18888     B8 F5 BF FD | 	call	#_do_waitms
1888c     07 12 06 F6 | 	mov	arg01, #7
18890     0B 00 00 FF 
18894     CC E4 05 F1 | 	add	objptr, ##5836
18898     7C 5F B0 FD | 	call	#_audio096_spin2_stop
1889c     0B 00 00 FF 
188a0     CC E4 85 F1 | 	sub	objptr, ##5836
188a4     A7 F0 03 F6 | 	mov	ptra, fp
188a8     B2 00 A0 FD | 	call	#popregs_
188ac                 | _do_beep_ret
188ac     2D 00 64 FD | 	ret
188b0                 | 
188b0                 | ' 
188b0                 | ' sub do_no_command
188b0                 | _do_no_command
188b0     17 12 06 F6 | 	mov	arg01, #23
188b4     E4 1D B0 FD | 	call	#_printerror
188b8                 | _do_no_command_ret
188b8     2D 00 64 FD | 	ret
188bc                 | 
188bc                 | ' 
188bc                 | ' sub do_negative
188bc                 | _do_negative
188bc     02 4A 05 F6 | 	mov	COUNT_, #2
188c0     A8 00 A0 FD | 	call	#pushregs_
188c4     0C F0 07 F1 | 	add	ptra, #12
188c8     94 1F BF FD | 	call	#_pop
188cc     FF 1E 02 F6 | 	mov	local01, result3
188d0     A7 FA 61 FC | 	wrlong	result1, fp
188d4     04 4E 05 F1 | 	add	fp, #4
188d8     A7 FC 61 FC | 	wrlong	result2, fp
188dc     04 4E 05 F1 | 	add	fp, #4
188e0     A7 1E 62 FC | 	wrlong	local01, fp
188e4                 | ' t1=pop()
188e4                 | ' if t1.result_type=result_int then 
188e4     08 4E 85 F1 | 	sub	fp, #8
188e8     1C 1E 0E F2 | 	cmp	local01, #28 wz
188ec     A7 20 02 AB |  if_e	rdlong	local02, fp
188f0     10 1F 62 A6 |  if_e	neg	local01, local02
188f4     A7 1E 62 AC |  if_e	wrlong	local01, fp
188f8     5C 00 90 AD |  if_e	jmp	#LR__2032
188fc     08 4E 05 F1 | 	add	fp, #8
18900     A7 1E 02 FB | 	rdlong	local01, fp
18904     08 4E 85 F1 | 	sub	fp, #8
18908     1D 1E 0E F2 | 	cmp	local01, #29 wz
1890c     1C 00 90 5D |  if_ne	jmp	#LR__2030
18910     A7 20 02 FB | 	rdlong	local02, fp
18914     10 1F 62 F6 | 	neg	local01, local02
18918     A7 1E 62 FC | 	wrlong	local01, fp
1891c     08 4E 05 F1 | 	add	fp, #8
18920     A7 38 68 FC | 	wrlong	#28, fp
18924     08 4E 85 F1 | 	sub	fp, #8
18928     2C 00 90 FD | 	jmp	#LR__2031
1892c                 | LR__2030
1892c     08 4E 05 F1 | 	add	fp, #8
18930     A7 1E 02 FB | 	rdlong	local01, fp
18934     08 4E 85 F1 | 	sub	fp, #8
18938     1E 1E 0E F2 | 	cmp	local01, #30 wz
1893c     A7 FA 01 AB |  if_e	rdlong	result1, fp
18940     1F FA E5 A4 |  if_e	bitnot	result1, #31
18944     A7 FA 61 AC |  if_e	wrlong	result1, fp
18948     08 4E 05 51 |  if_ne	add	fp, #8
1894c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
18950     08 4E 85 51 |  if_ne	sub	fp, #8
18954     A7 50 68 5C |  if_ne	wrlong	#40, fp
18958                 | LR__2031
18958                 | LR__2032
18958     A7 12 02 F6 | 	mov	arg01, fp
1895c     98 1F BF FD | 	call	#_push
18960     A7 F0 03 F6 | 	mov	ptra, fp
18964     B2 00 A0 FD | 	call	#popregs_
18968                 | _do_negative_ret
18968     2D 00 64 FD | 	ret
1896c                 | 
1896c                 | ' 
1896c                 | ' sub do_abs
1896c                 | _do_abs
1896c     01 4A 05 F6 | 	mov	COUNT_, #1
18970     A8 00 A0 FD | 	call	#pushregs_
18974     0C F0 07 F1 | 	add	ptra, #12
18978     E4 1E BF FD | 	call	#_pop
1897c     FF 1E 02 F6 | 	mov	local01, result3
18980     A7 FA 61 FC | 	wrlong	result1, fp
18984     04 4E 05 F1 | 	add	fp, #4
18988     A7 FC 61 FC | 	wrlong	result2, fp
1898c     04 4E 05 F1 | 	add	fp, #4
18990     A7 1E 62 FC | 	wrlong	local01, fp
18994                 | ' t1=pop()
18994                 | ' if t1.result_type=result_int then 
18994     08 4E 85 F1 | 	sub	fp, #8
18998     1C 1E 0E F2 | 	cmp	local01, #28 wz
1899c     A7 12 02 AB |  if_e	rdlong	arg01, fp
189a0     09 1F 42 A6 |  if_e	abs	local01, arg01
189a4     A7 1E 62 AC |  if_e	wrlong	local01, fp
189a8     2C 00 90 AD |  if_e	jmp	#LR__2040
189ac     08 4E 05 F1 | 	add	fp, #8
189b0     A7 1E 02 FB | 	rdlong	local01, fp
189b4     08 4E 85 F1 | 	sub	fp, #8
189b8     1E 1E 0E F2 | 	cmp	local01, #30 wz
189bc     A7 FA 01 AB |  if_e	rdlong	result1, fp
189c0     1F FA 05 A4 |  if_e	bitl	result1, #31
189c4     A7 FA 61 AC |  if_e	wrlong	result1, fp
189c8     08 4E 05 51 |  if_ne	add	fp, #8
189cc     A7 FE 69 5C |  if_ne	wrlong	#255, fp
189d0     08 4E 85 51 |  if_ne	sub	fp, #8
189d4     A7 50 68 5C |  if_ne	wrlong	#40, fp
189d8                 | LR__2040
189d8     A7 12 02 F6 | 	mov	arg01, fp
189dc     18 1F BF FD | 	call	#_push
189e0     A7 F0 03 F6 | 	mov	ptra, fp
189e4     B2 00 A0 FD | 	call	#popregs_
189e8                 | _do_abs_ret
189e8     2D 00 64 FD | 	ret
189ec                 | 
189ec                 | ' 
189ec                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
189ec                 | ' 
189ec                 | ' ''----------------------------------------------------------------------------------------------------
189ec                 | ' ''------------------ Initialization procedures -------------------------------------------------------
189ec                 | ' ''----------------------------------------------------------------------------------------------------
189ec                 | ' 
189ec                 | ' ''--------------------------- Command function pointers
189ec                 | ' 
189ec                 | ' sub init_commands
189ec                 | _init_commands
189ec                 | ' 
189ec                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
189ec     00 00 06 F6 | 	mov	_var01, #0
189f0     97 16 48 FB | 	callpa	#(@LR__2051-@LR__2050)>>2,fcache_load_ptr_
189f4                 | LR__2050
189f4     00 FB 01 F6 | 	mov	result1, _var01
189f8     02 FA 65 F0 | 	shl	result1, #2
189fc     63 00 00 FF 
18a00     60 E4 05 F1 | 	add	objptr, ##50784
18a04     F2 FA 01 F1 | 	add	result1, objptr
18a08     63 00 00 FF 
18a0c     60 E4 85 F1 | 	sub	objptr, ##50784
18a10     FD E4 61 FC | 	wrlong	objptr, result1
18a14     01 00 06 F1 | 	add	_var01, #1
18a18     00 01 56 F2 | 	cmps	_var01, #256 wc
18a1c     D4 FF 9F CD |  if_b	jmp	#LR__2050
18a20                 | LR__2051
18a20     F2 FA 01 F6 | 	mov	result1, objptr
18a24     14 FA 25 F4 | 	bith	result1, #20
18a28     63 00 00 FF 
18a2c     64 E4 05 F1 | 	add	objptr, ##50788
18a30     F2 FA 61 FC | 	wrlong	result1, objptr
18a34     63 00 00 FF 
18a38     64 E4 85 F1 | 	sub	objptr, ##50788
18a3c     F2 FA 01 F6 | 	mov	result1, objptr
18a40     15 FA 25 F4 | 	bith	result1, #21
18a44     63 00 00 FF 
18a48     68 E4 05 F1 | 	add	objptr, ##50792
18a4c     F2 FA 61 FC | 	wrlong	result1, objptr
18a50     63 00 00 FF 
18a54     68 E4 85 F1 | 	sub	objptr, ##50792
18a58     F2 FA 01 F6 | 	mov	result1, objptr
18a5c     34 FA 25 F4 | 	bith	result1, #52
18a60     63 00 00 FF 
18a64     6C E4 05 F1 | 	add	objptr, ##50796
18a68     F2 FA 61 FC | 	wrlong	result1, objptr
18a6c     63 00 00 FF 
18a70     6C E4 85 F1 | 	sub	objptr, ##50796
18a74     F2 FA 01 F6 | 	mov	result1, objptr
18a78     16 FA 25 F4 | 	bith	result1, #22
18a7c     63 00 00 FF 
18a80     74 E4 05 F1 | 	add	objptr, ##50804
18a84     F2 FA 61 FC | 	wrlong	result1, objptr
18a88     63 00 00 FF 
18a8c     74 E4 85 F1 | 	sub	objptr, ##50804
18a90     F2 FA 01 F6 | 	mov	result1, objptr
18a94     00 28 00 FF 
18a98     00 FA 45 F5 | 	or	result1, ##5242880
18a9c     63 00 00 FF 
18aa0     78 E4 05 F1 | 	add	objptr, ##50808
18aa4     F2 FA 61 FC | 	wrlong	result1, objptr
18aa8     63 00 00 FF 
18aac     78 E4 85 F1 | 	sub	objptr, ##50808
18ab0     F2 FA 01 F6 | 	mov	result1, objptr
18ab4     35 FA 25 F4 | 	bith	result1, #53
18ab8     63 00 00 FF 
18abc     7C E4 05 F1 | 	add	objptr, ##50812
18ac0     F2 FA 61 FC | 	wrlong	result1, objptr
18ac4     63 00 00 FF 
18ac8     7C E4 85 F1 | 	sub	objptr, ##50812
18acc     F2 FA 01 F6 | 	mov	result1, objptr
18ad0     54 FA 25 F4 | 	bith	result1, #84
18ad4     63 00 00 FF 
18ad8     80 E4 05 F1 | 	add	objptr, ##50816
18adc     F2 FA 61 FC | 	wrlong	result1, objptr
18ae0     63 00 00 FF 
18ae4     80 E4 85 F1 | 	sub	objptr, ##50816
18ae8     F2 FA 01 F6 | 	mov	result1, objptr
18aec     17 FA 25 F4 | 	bith	result1, #23
18af0     63 00 00 FF 
18af4     84 E4 05 F1 | 	add	objptr, ##50820
18af8     F2 FA 61 FC | 	wrlong	result1, objptr
18afc     63 00 00 FF 
18b00     84 E4 85 F1 | 	sub	objptr, ##50820
18b04     F2 FA 01 F6 | 	mov	result1, objptr
18b08     00 48 00 FF 
18b0c     00 FA 45 F5 | 	or	result1, ##9437184
18b10     63 00 00 FF 
18b14     88 E4 05 F1 | 	add	objptr, ##50824
18b18     F2 FA 61 FC | 	wrlong	result1, objptr
18b1c     63 00 00 FF 
18b20     88 E4 85 F1 | 	sub	objptr, ##50824
18b24     F2 FA 01 F6 | 	mov	result1, objptr
18b28     00 50 00 FF 
18b2c     00 FA 45 F5 | 	or	result1, ##10485760
18b30     63 00 00 FF 
18b34     8C E4 05 F1 | 	add	objptr, ##50828
18b38     F2 FA 61 FC | 	wrlong	result1, objptr
18b3c     63 00 00 FF 
18b40     8C E4 85 F1 | 	sub	objptr, ##50828
18b44     F2 FA 01 F6 | 	mov	result1, objptr
18b48     00 58 00 FF 
18b4c     00 FA 45 F5 | 	or	result1, ##11534336
18b50     63 00 00 FF 
18b54     90 E4 05 F1 | 	add	objptr, ##50832
18b58     F2 FA 61 FC | 	wrlong	result1, objptr
18b5c     63 00 00 FF 
18b60     90 E4 85 F1 | 	sub	objptr, ##50832
18b64     F2 FA 01 F6 | 	mov	result1, objptr
18b68     36 FA 25 F4 | 	bith	result1, #54
18b6c     63 00 00 FF 
18b70     A4 E4 05 F1 | 	add	objptr, ##50852
18b74     F2 FA 61 FC | 	wrlong	result1, objptr
18b78     63 00 00 FF 
18b7c     A4 E4 85 F1 | 	sub	objptr, ##50852
18b80     F2 FA 01 F6 | 	mov	result1, objptr
18b84     00 68 00 FF 
18b88     00 FA 45 F5 | 	or	result1, ##13631488
18b8c     63 00 00 FF 
18b90     D4 E4 05 F1 | 	add	objptr, ##50900
18b94     F2 FA 61 FC | 	wrlong	result1, objptr
18b98     63 00 00 FF 
18b9c     D4 E4 85 F1 | 	sub	objptr, ##50900
18ba0     F2 FA 01 F6 | 	mov	result1, objptr
18ba4     00 68 00 FF 
18ba8     00 FA 45 F5 | 	or	result1, ##13631488
18bac     63 00 00 FF 
18bb0     D0 E4 05 F1 | 	add	objptr, ##50896
18bb4     F2 FA 61 FC | 	wrlong	result1, objptr
18bb8     63 00 00 FF 
18bbc     D0 E4 85 F1 | 	sub	objptr, ##50896
18bc0     F2 FA 01 F6 | 	mov	result1, objptr
18bc4     00 68 00 FF 
18bc8     00 FA 45 F5 | 	or	result1, ##13631488
18bcc     63 00 00 FF 
18bd0     D8 E4 05 F1 | 	add	objptr, ##50904
18bd4     F2 FA 61 FC | 	wrlong	result1, objptr
18bd8     63 00 00 FF 
18bdc     D8 E4 85 F1 | 	sub	objptr, ##50904
18be0     F2 FA 01 F6 | 	mov	result1, objptr
18be4     00 68 00 FF 
18be8     00 FA 45 F5 | 	or	result1, ##13631488
18bec     63 00 00 FF 
18bf0     DC E4 05 F1 | 	add	objptr, ##50908
18bf4     F2 FA 61 FC | 	wrlong	result1, objptr
18bf8     63 00 00 FF 
18bfc     DC E4 85 F1 | 	sub	objptr, ##50908
18c00     F2 FA 01 F6 | 	mov	result1, objptr
18c04     00 68 00 FF 
18c08     00 FA 45 F5 | 	or	result1, ##13631488
18c0c     63 00 00 FF 
18c10     0C E5 05 F1 | 	add	objptr, ##50956
18c14     F2 FA 61 FC | 	wrlong	result1, objptr
18c18     63 00 00 FF 
18c1c     0C E5 85 F1 | 	sub	objptr, ##50956
18c20     F2 FA 01 F6 | 	mov	result1, objptr
18c24     55 FA 25 F4 | 	bith	result1, #85
18c28     63 00 00 FF 
18c2c     BC E4 05 F1 | 	add	objptr, ##50876
18c30     F2 FA 61 FC | 	wrlong	result1, objptr
18c34     63 00 00 FF 
18c38     BC E4 85 F1 | 	sub	objptr, ##50876
18c3c     F2 FA 01 F6 | 	mov	result1, objptr
18c40     00 68 00 FF 
18c44     00 FA 45 F5 | 	or	result1, ##13631488
18c48     63 00 00 FF 
18c4c     E0 E4 05 F1 | 	add	objptr, ##50912
18c50     F2 FA 61 FC | 	wrlong	result1, objptr
18c54     63 00 00 FF 
18c58     E0 E4 85 F1 | 	sub	objptr, ##50912
18c5c     F2 FA 01 F6 | 	mov	result1, objptr
18c60     00 68 00 FF 
18c64     00 FA 45 F5 | 	or	result1, ##13631488
18c68     63 00 00 FF 
18c6c     E4 E4 05 F1 | 	add	objptr, ##50916
18c70     F2 FA 61 FC | 	wrlong	result1, objptr
18c74     63 00 00 FF 
18c78     E4 E4 85 F1 | 	sub	objptr, ##50916
18c7c     F2 FA 01 F6 | 	mov	result1, objptr
18c80     00 68 00 FF 
18c84     00 FA 45 F5 | 	or	result1, ##13631488
18c88     63 00 00 FF 
18c8c     E8 E4 05 F1 | 	add	objptr, ##50920
18c90     F2 FA 61 FC | 	wrlong	result1, objptr
18c94     63 00 00 FF 
18c98     E8 E4 85 F1 | 	sub	objptr, ##50920
18c9c     F2 FA 01 F6 | 	mov	result1, objptr
18ca0     74 FA 25 F4 | 	bith	result1, #116
18ca4     63 00 00 FF 
18ca8     60 E5 05 F1 | 	add	objptr, ##51040
18cac     F2 FA 61 FC | 	wrlong	result1, objptr
18cb0     63 00 00 FF 
18cb4     60 E5 85 F1 | 	sub	objptr, ##51040
18cb8     F2 FA 01 F6 | 	mov	result1, objptr
18cbc     18 FA 25 F4 | 	bith	result1, #24
18cc0     63 00 00 FF 
18cc4     64 E5 05 F1 | 	add	objptr, ##51044
18cc8     F2 FA 61 FC | 	wrlong	result1, objptr
18ccc     63 00 00 FF 
18cd0     64 E5 85 F1 | 	sub	objptr, ##51044
18cd4     F2 FA 01 F6 | 	mov	result1, objptr
18cd8     00 88 00 FF 
18cdc     00 FA 45 F5 | 	or	result1, ##17825792
18ce0     63 00 00 FF 
18ce4     68 E5 05 F1 | 	add	objptr, ##51048
18ce8     F2 FA 61 FC | 	wrlong	result1, objptr
18cec     63 00 00 FF 
18cf0     68 E5 85 F1 | 	sub	objptr, ##51048
18cf4     F2 FA 01 F6 | 	mov	result1, objptr
18cf8     00 90 00 FF 
18cfc     00 FA 45 F5 | 	or	result1, ##18874368
18d00     63 00 00 FF 
18d04     6C E5 05 F1 | 	add	objptr, ##51052
18d08     F2 FA 61 FC | 	wrlong	result1, objptr
18d0c     63 00 00 FF 
18d10     6C E5 85 F1 | 	sub	objptr, ##51052
18d14     F2 FA 01 F6 | 	mov	result1, objptr
18d18     00 98 00 FF 
18d1c     00 FA 45 F5 | 	or	result1, ##19922944
18d20     63 00 00 FF 
18d24     70 E5 05 F1 | 	add	objptr, ##51056
18d28     F2 FA 61 FC | 	wrlong	result1, objptr
18d2c     63 00 00 FF 
18d30     70 E5 85 F1 | 	sub	objptr, ##51056
18d34     F2 FA 01 F6 | 	mov	result1, objptr
18d38     00 A0 00 FF 
18d3c     00 FA 45 F5 | 	or	result1, ##20971520
18d40     63 00 00 FF 
18d44     74 E5 05 F1 | 	add	objptr, ##51060
18d48     F2 FA 61 FC | 	wrlong	result1, objptr
18d4c     63 00 00 FF 
18d50     74 E5 85 F1 | 	sub	objptr, ##51060
18d54     F2 FA 01 F6 | 	mov	result1, objptr
18d58     00 A8 00 FF 
18d5c     00 FA 45 F5 | 	or	result1, ##22020096
18d60     63 00 00 FF 
18d64     78 E5 05 F1 | 	add	objptr, ##51064
18d68     F2 FA 61 FC | 	wrlong	result1, objptr
18d6c     63 00 00 FF 
18d70     78 E5 85 F1 | 	sub	objptr, ##51064
18d74     F2 FA 01 F6 | 	mov	result1, objptr
18d78     00 B0 00 FF 
18d7c     00 FA 45 F5 | 	or	result1, ##23068672
18d80     63 00 00 FF 
18d84     7C E5 05 F1 | 	add	objptr, ##51068
18d88     F2 FA 61 FC | 	wrlong	result1, objptr
18d8c     63 00 00 FF 
18d90     7C E5 85 F1 | 	sub	objptr, ##51068
18d94     F2 FA 01 F6 | 	mov	result1, objptr
18d98     00 B8 00 FF 
18d9c     00 FA 45 F5 | 	or	result1, ##24117248
18da0     63 00 00 FF 
18da4     80 E5 05 F1 | 	add	objptr, ##51072
18da8     F2 FA 61 FC | 	wrlong	result1, objptr
18dac     63 00 00 FF 
18db0     80 E5 85 F1 | 	sub	objptr, ##51072
18db4     F2 FA 01 F6 | 	mov	result1, objptr
18db8     37 FA 25 F4 | 	bith	result1, #55
18dbc     63 00 00 FF 
18dc0     84 E5 05 F1 | 	add	objptr, ##51076
18dc4     F2 FA 61 FC | 	wrlong	result1, objptr
18dc8     63 00 00 FF 
18dcc     84 E5 85 F1 | 	sub	objptr, ##51076
18dd0     F2 FA 01 F6 | 	mov	result1, objptr
18dd4     00 C8 00 FF 
18dd8     00 FA 45 F5 | 	or	result1, ##26214400
18ddc     63 00 00 FF 
18de0     88 E5 05 F1 | 	add	objptr, ##51080
18de4     F2 FA 61 FC | 	wrlong	result1, objptr
18de8     63 00 00 FF 
18dec     88 E5 85 F1 | 	sub	objptr, ##51080
18df0     F2 FA 01 F6 | 	mov	result1, objptr
18df4     00 D0 00 FF 
18df8     00 FA 45 F5 | 	or	result1, ##27262976
18dfc     63 00 00 FF 
18e00     8C E5 05 F1 | 	add	objptr, ##51084
18e04     F2 FA 61 FC | 	wrlong	result1, objptr
18e08     63 00 00 FF 
18e0c     8C E5 85 F1 | 	sub	objptr, ##51084
18e10     F2 FA 01 F6 | 	mov	result1, objptr
18e14     00 D8 00 FF 
18e18     00 FA 45 F5 | 	or	result1, ##28311552
18e1c     63 00 00 FF 
18e20     90 E5 05 F1 | 	add	objptr, ##51088
18e24     F2 FA 61 FC | 	wrlong	result1, objptr
18e28     63 00 00 FF 
18e2c     90 E5 85 F1 | 	sub	objptr, ##51088
18e30     F2 FA 01 F6 | 	mov	result1, objptr
18e34     56 FA 25 F4 | 	bith	result1, #86
18e38     63 00 00 FF 
18e3c     94 E5 05 F1 | 	add	objptr, ##51092
18e40     F2 FA 61 FC | 	wrlong	result1, objptr
18e44     63 00 00 FF 
18e48     94 E5 85 F1 | 	sub	objptr, ##51092
18e4c     F2 FA 01 F6 | 	mov	result1, objptr
18e50     00 E8 00 FF 
18e54     00 FA 45 F5 | 	or	result1, ##30408704
18e58     65 00 00 FF 
18e5c     5C E4 05 F1 | 	add	objptr, ##51804
18e60     F2 FA 61 FC | 	wrlong	result1, objptr
18e64     65 00 00 FF 
18e68     5C E4 85 F1 | 	sub	objptr, ##51804
18e6c     F2 FA 01 F6 | 	mov	result1, objptr
18e70     75 FA 25 F4 | 	bith	result1, #117
18e74     63 00 00 FF 
18e78     98 E5 05 F1 | 	add	objptr, ##51096
18e7c     F2 FA 61 FC | 	wrlong	result1, objptr
18e80     63 00 00 FF 
18e84     98 E5 85 F1 | 	sub	objptr, ##51096
18e88     F2 FA 01 F6 | 	mov	result1, objptr
18e8c     94 FA 25 F4 | 	bith	result1, #148
18e90     63 00 00 FF 
18e94     AC E5 05 F1 | 	add	objptr, ##51116
18e98     F2 FA 61 FC | 	wrlong	result1, objptr
18e9c     63 00 00 FF 
18ea0     AC E5 85 F1 | 	sub	objptr, ##51116
18ea4     F2 FA 01 F6 | 	mov	result1, objptr
18ea8     19 FA 25 F4 | 	bith	result1, #25
18eac     63 00 00 FF 
18eb0     9C E5 05 F1 | 	add	objptr, ##51100
18eb4     F2 FA 61 FC | 	wrlong	result1, objptr
18eb8     63 00 00 FF 
18ebc     9C E5 85 F1 | 	sub	objptr, ##51100
18ec0     F2 FA 01 F6 | 	mov	result1, objptr
18ec4     00 08 01 FF 
18ec8     00 FA 45 F5 | 	or	result1, ##34603008
18ecc     63 00 00 FF 
18ed0     B8 E4 05 F1 | 	add	objptr, ##50872
18ed4     F2 FA 61 FC | 	wrlong	result1, objptr
18ed8     63 00 00 FF 
18edc     B8 E4 85 F1 | 	sub	objptr, ##50872
18ee0     F2 FA 01 F6 | 	mov	result1, objptr
18ee4     00 10 01 FF 
18ee8     00 FA 45 F5 | 	or	result1, ##35651584
18eec     63 00 00 FF 
18ef0     A0 E5 05 F1 | 	add	objptr, ##51104
18ef4     F2 FA 61 FC | 	wrlong	result1, objptr
18ef8     63 00 00 FF 
18efc     A0 E5 85 F1 | 	sub	objptr, ##51104
18f00     F2 FA 01 F6 | 	mov	result1, objptr
18f04     00 18 01 FF 
18f08     00 FA 45 F5 | 	or	result1, ##36700160
18f0c     63 00 00 FF 
18f10     A4 E5 05 F1 | 	add	objptr, ##51108
18f14     F2 FA 61 FC | 	wrlong	result1, objptr
18f18     63 00 00 FF 
18f1c     A4 E5 85 F1 | 	sub	objptr, ##51108
18f20     F2 FA 01 F6 | 	mov	result1, objptr
18f24     00 20 01 FF 
18f28     00 FA 45 F5 | 	or	result1, ##37748736
18f2c     63 00 00 FF 
18f30     A8 E5 05 F1 | 	add	objptr, ##51112
18f34     F2 FA 61 FC | 	wrlong	result1, objptr
18f38     63 00 00 FF 
18f3c     A8 E5 85 F1 | 	sub	objptr, ##51112
18f40     F2 FA 01 F6 | 	mov	result1, objptr
18f44     00 28 01 FF 
18f48     00 FA 45 F5 | 	or	result1, ##38797312
18f4c     63 00 00 FF 
18f50     B4 E5 05 F1 | 	add	objptr, ##51124
18f54     F2 FA 61 FC | 	wrlong	result1, objptr
18f58     63 00 00 FF 
18f5c     B4 E5 85 F1 | 	sub	objptr, ##51124
18f60     F2 FA 01 F6 | 	mov	result1, objptr
18f64     00 30 01 FF 
18f68     00 FA 45 F5 | 	or	result1, ##39845888
18f6c     63 00 00 FF 
18f70     B8 E5 05 F1 | 	add	objptr, ##51128
18f74     F2 FA 61 FC | 	wrlong	result1, objptr
18f78     63 00 00 FF 
18f7c     B8 E5 85 F1 | 	sub	objptr, ##51128
18f80     F2 FA 01 F6 | 	mov	result1, objptr
18f84     00 38 01 FF 
18f88     00 FA 45 F5 | 	or	result1, ##40894464
18f8c     63 00 00 FF 
18f90     BC E5 05 F1 | 	add	objptr, ##51132
18f94     F2 FA 61 FC | 	wrlong	result1, objptr
18f98     63 00 00 FF 
18f9c     BC E5 85 F1 | 	sub	objptr, ##51132
18fa0     F2 FA 01 F6 | 	mov	result1, objptr
18fa4     00 40 01 FF 
18fa8     00 FA 45 F5 | 	or	result1, ##41943040
18fac     63 00 00 FF 
18fb0     C0 E5 05 F1 | 	add	objptr, ##51136
18fb4     F2 FA 61 FC | 	wrlong	result1, objptr
18fb8     63 00 00 FF 
18fbc     C0 E5 85 F1 | 	sub	objptr, ##51136
18fc0     F2 FA 01 F6 | 	mov	result1, objptr
18fc4     00 48 01 FF 
18fc8     00 FA 45 F5 | 	or	result1, ##42991616
18fcc     63 00 00 FF 
18fd0     C8 E5 05 F1 | 	add	objptr, ##51144
18fd4     F2 FA 61 FC | 	wrlong	result1, objptr
18fd8     63 00 00 FF 
18fdc     C8 E5 85 F1 | 	sub	objptr, ##51144
18fe0     F2 FA 01 F6 | 	mov	result1, objptr
18fe4     00 08 01 FF 
18fe8     00 FA 45 F5 | 	or	result1, ##34603008
18fec     63 00 00 FF 
18ff0     CC E5 05 F1 | 	add	objptr, ##51148
18ff4     F2 FA 61 FC | 	wrlong	result1, objptr
18ff8     63 00 00 FF 
18ffc     CC E5 85 F1 | 	sub	objptr, ##51148
19000     F2 FA 01 F6 | 	mov	result1, objptr
19004     00 50 01 FF 
19008     00 FA 45 F5 | 	or	result1, ##44040192
1900c     63 00 00 FF 
19010     CC E4 05 F1 | 	add	objptr, ##50892
19014     F2 FA 61 FC | 	wrlong	result1, objptr
19018     63 00 00 FF 
1901c     CC E4 85 F1 | 	sub	objptr, ##50892
19020     F2 FA 01 F6 | 	mov	result1, objptr
19024     00 58 01 FF 
19028     00 FA 45 F5 | 	or	result1, ##45088768
1902c     63 00 00 FF 
19030     FC E4 05 F1 | 	add	objptr, ##50940
19034     F2 FA 61 FC | 	wrlong	result1, objptr
19038     63 00 00 FF 
1903c     FC E4 85 F1 | 	sub	objptr, ##50940
19040     F2 FA 01 F6 | 	mov	result1, objptr
19044     00 60 01 FF 
19048     00 FA 45 F5 | 	or	result1, ##46137344
1904c     63 00 00 FF 
19050     F8 E4 05 F1 | 	add	objptr, ##50936
19054     F2 FA 61 FC | 	wrlong	result1, objptr
19058     63 00 00 FF 
1905c     F8 E4 85 F1 | 	sub	objptr, ##50936
19060     F2 FA 01 F6 | 	mov	result1, objptr
19064     00 68 01 FF 
19068     00 FA 45 F5 | 	or	result1, ##47185920
1906c     63 00 00 FF 
19070     9C E4 05 F1 | 	add	objptr, ##50844
19074     F2 FA 61 FC | 	wrlong	result1, objptr
19078     63 00 00 FF 
1907c     9C E4 85 F1 | 	sub	objptr, ##50844
19080     F2 FA 01 F6 | 	mov	result1, objptr
19084     00 70 01 FF 
19088     00 FA 45 F5 | 	or	result1, ##48234496
1908c     63 00 00 FF 
19090     A0 E4 05 F1 | 	add	objptr, ##50848
19094     F2 FA 61 FC | 	wrlong	result1, objptr
19098     63 00 00 FF 
1909c     A0 E4 85 F1 | 	sub	objptr, ##50848
190a0     F2 FA 01 F6 | 	mov	result1, objptr
190a4     00 78 01 FF 
190a8     00 FA 45 F5 | 	or	result1, ##49283072
190ac     63 00 00 FF 
190b0     08 E5 05 F1 | 	add	objptr, ##50952
190b4     F2 FA 61 FC | 	wrlong	result1, objptr
190b8     63 00 00 FF 
190bc     08 E5 85 F1 | 	sub	objptr, ##50952
190c0     F2 FA 01 F6 | 	mov	result1, objptr
190c4     38 FA 25 F4 | 	bith	result1, #56
190c8     63 00 00 FF 
190cc     B0 E5 05 F1 | 	add	objptr, ##51120
190d0     F2 FA 61 FC | 	wrlong	result1, objptr
190d4     63 00 00 FF 
190d8     B0 E5 85 F1 | 	sub	objptr, ##51120
190dc     F2 FA 01 F6 | 	mov	result1, objptr
190e0     00 88 01 FF 
190e4     00 FA 45 F5 | 	or	result1, ##51380224
190e8     63 00 00 FF 
190ec     C4 E5 05 F1 | 	add	objptr, ##51140
190f0     F2 FA 61 FC | 	wrlong	result1, objptr
190f4     63 00 00 FF 
190f8     C4 E5 85 F1 | 	sub	objptr, ##51140
190fc     F2 FA 01 F6 | 	mov	result1, objptr
19100     00 90 01 FF 
19104     00 FA 45 F5 | 	or	result1, ##52428800
19108     63 00 00 FF 
1910c     D0 E5 05 F1 | 	add	objptr, ##51152
19110     F2 FA 61 FC | 	wrlong	result1, objptr
19114     63 00 00 FF 
19118     D0 E5 85 F1 | 	sub	objptr, ##51152
1911c     F2 FA 01 F6 | 	mov	result1, objptr
19120     00 98 01 FF 
19124     00 FA 45 F5 | 	or	result1, ##53477376
19128     63 00 00 FF 
1912c     D4 E5 05 F1 | 	add	objptr, ##51156
19130     F2 FA 61 FC | 	wrlong	result1, objptr
19134     63 00 00 FF 
19138     D4 E5 85 F1 | 	sub	objptr, ##51156
1913c     F2 FA 01 F6 | 	mov	result1, objptr
19140     00 A0 01 FF 
19144     00 FA 45 F5 | 	or	result1, ##54525952
19148     63 00 00 FF 
1914c     D8 E5 05 F1 | 	add	objptr, ##51160
19150     F2 FA 61 FC | 	wrlong	result1, objptr
19154     63 00 00 FF 
19158     D8 E5 85 F1 | 	sub	objptr, ##51160
1915c     F2 FA 01 F6 | 	mov	result1, objptr
19160     00 A8 01 FF 
19164     00 FA 45 F5 | 	or	result1, ##55574528
19168     63 00 00 FF 
1916c     DC E5 05 F1 | 	add	objptr, ##51164
19170     F2 FA 61 FC | 	wrlong	result1, objptr
19174     63 00 00 FF 
19178     DC E5 85 F1 | 	sub	objptr, ##51164
1917c     F2 FA 01 F6 | 	mov	result1, objptr
19180     00 B0 01 FF 
19184     00 FA 45 F5 | 	or	result1, ##56623104
19188     63 00 00 FF 
1918c     E0 E5 05 F1 | 	add	objptr, ##51168
19190     F2 FA 61 FC | 	wrlong	result1, objptr
19194     63 00 00 FF 
19198     E0 E5 85 F1 | 	sub	objptr, ##51168
1919c     F2 FA 01 F6 | 	mov	result1, objptr
191a0     00 B8 01 FF 
191a4     00 FA 45 F5 | 	or	result1, ##57671680
191a8     63 00 00 FF 
191ac     E4 E5 05 F1 | 	add	objptr, ##51172
191b0     F2 FA 61 FC | 	wrlong	result1, objptr
191b4     63 00 00 FF 
191b8     E4 E5 85 F1 | 	sub	objptr, ##51172
191bc     F2 FA 01 F6 | 	mov	result1, objptr
191c0     94 FA 25 F4 | 	bith	result1, #148
191c4     63 00 00 FF 
191c8     AC E5 05 F1 | 	add	objptr, ##51116
191cc     F2 FA 61 FC | 	wrlong	result1, objptr
191d0     63 00 00 FF 
191d4     AC E5 85 F1 | 	sub	objptr, ##51116
191d8     F2 FA 01 F6 | 	mov	result1, objptr
191dc     57 FA 25 F4 | 	bith	result1, #87
191e0     63 00 00 FF 
191e4     EC E5 05 F1 | 	add	objptr, ##51180
191e8     F2 FA 61 FC | 	wrlong	result1, objptr
191ec     63 00 00 FF 
191f0     EC E5 85 F1 | 	sub	objptr, ##51180
191f4     F2 FA 01 F6 | 	mov	result1, objptr
191f8     00 C8 01 FF 
191fc     00 FA 45 F5 | 	or	result1, ##59768832
19200     63 00 00 FF 
19204     E8 E5 05 F1 | 	add	objptr, ##51176
19208     F2 FA 61 FC | 	wrlong	result1, objptr
1920c     63 00 00 FF 
19210     E8 E5 85 F1 | 	sub	objptr, ##51176
19214     F2 FA 01 F6 | 	mov	result1, objptr
19218     00 D0 01 FF 
1921c     00 FA 45 F5 | 	or	result1, ##60817408
19220     64 00 00 FF 
19224     00 E4 05 F1 | 	add	objptr, ##51200
19228     F2 FA 61 FC | 	wrlong	result1, objptr
1922c     64 00 00 FF 
19230     00 E4 85 F1 | 	sub	objptr, ##51200
19234     F2 FA 01 F6 | 	mov	result1, objptr
19238     00 D8 01 FF 
1923c     00 FA 45 F5 | 	or	result1, ##61865984
19240     64 00 00 FF 
19244     04 E4 05 F1 | 	add	objptr, ##51204
19248     F2 FA 61 FC | 	wrlong	result1, objptr
1924c     64 00 00 FF 
19250     04 E4 85 F1 | 	sub	objptr, ##51204
19254     F2 FA 01 F6 | 	mov	result1, objptr
19258     76 FA 25 F4 | 	bith	result1, #118
1925c     63 00 00 FF 
19260     F0 E5 05 F1 | 	add	objptr, ##51184
19264     F2 FA 61 FC | 	wrlong	result1, objptr
19268     63 00 00 FF 
1926c     F0 E5 85 F1 | 	sub	objptr, ##51184
19270     F2 FA 01 F6 | 	mov	result1, objptr
19274     00 E8 01 FF 
19278     00 FA 45 F5 | 	or	result1, ##63963136
1927c     63 00 00 FF 
19280     F4 E5 05 F1 | 	add	objptr, ##51188
19284     F2 FA 61 FC | 	wrlong	result1, objptr
19288     63 00 00 FF 
1928c     F4 E5 85 F1 | 	sub	objptr, ##51188
19290     F2 FA 01 F6 | 	mov	result1, objptr
19294     95 FA 25 F4 | 	bith	result1, #149
19298     63 00 00 FF 
1929c     F8 E5 05 F1 | 	add	objptr, ##51192
192a0     F2 FA 61 FC | 	wrlong	result1, objptr
192a4     63 00 00 FF 
192a8     F8 E5 85 F1 | 	sub	objptr, ##51192
192ac     F2 FA 01 F6 | 	mov	result1, objptr
192b0     B4 FA 25 F4 | 	bith	result1, #180
192b4     63 00 00 FF 
192b8     FC E5 05 F1 | 	add	objptr, ##51196
192bc     F2 FA 61 FC | 	wrlong	result1, objptr
192c0     63 00 00 FF 
192c4     FC E5 85 F1 | 	sub	objptr, ##51196
192c8     F2 FA 01 F6 | 	mov	result1, objptr
192cc     1A FA 25 F4 | 	bith	result1, #26
192d0     64 00 00 FF 
192d4     0C E4 05 F1 | 	add	objptr, ##51212
192d8     F2 FA 61 FC | 	wrlong	result1, objptr
192dc     64 00 00 FF 
192e0     0C E4 85 F1 | 	sub	objptr, ##51212
192e4     F2 FA 01 F6 | 	mov	result1, objptr
192e8     00 08 02 FF 
192ec     00 FA 45 F5 | 	or	result1, ##68157440
192f0     64 00 00 FF 
192f4     08 E4 05 F1 | 	add	objptr, ##51208
192f8     F2 FA 61 FC | 	wrlong	result1, objptr
192fc     64 00 00 FF 
19300     08 E4 85 F1 | 	sub	objptr, ##51208
19304     F2 FA 01 F6 | 	mov	result1, objptr
19308     00 10 02 FF 
1930c     00 FA 45 F5 | 	or	result1, ##69206016
19310     64 00 00 FF 
19314     18 E4 05 F1 | 	add	objptr, ##51224
19318     F2 FA 61 FC | 	wrlong	result1, objptr
1931c     64 00 00 FF 
19320     18 E4 85 F1 | 	sub	objptr, ##51224
19324     F2 FA 01 F6 | 	mov	result1, objptr
19328     00 18 02 FF 
1932c     00 FA 45 F5 | 	or	result1, ##70254592
19330     64 00 00 FF 
19334     14 E4 05 F1 | 	add	objptr, ##51220
19338     F2 FA 61 FC | 	wrlong	result1, objptr
1933c     64 00 00 FF 
19340     14 E4 85 F1 | 	sub	objptr, ##51220
19344     F2 FA 01 F6 | 	mov	result1, objptr
19348     00 20 02 FF 
1934c     00 FA 45 F5 | 	or	result1, ##71303168
19350     64 00 00 FF 
19354     10 E4 05 F1 | 	add	objptr, ##51216
19358     F2 FA 61 FC | 	wrlong	result1, objptr
1935c     64 00 00 FF 
19360     10 E4 85 F1 | 	sub	objptr, ##51216
19364     F2 FA 01 F6 | 	mov	result1, objptr
19368     00 28 02 FF 
1936c     00 FA 45 F5 | 	or	result1, ##72351744
19370     64 00 00 FF 
19374     1C E4 05 F1 | 	add	objptr, ##51228
19378     F2 FA 61 FC | 	wrlong	result1, objptr
1937c     64 00 00 FF 
19380     1C E4 85 F1 | 	sub	objptr, ##51228
19384     F2 FA 01 F6 | 	mov	result1, objptr
19388     00 30 02 FF 
1938c     00 FA 45 F5 | 	or	result1, ##73400320
19390     64 00 00 FF 
19394     20 E4 05 F1 | 	add	objptr, ##51232
19398     F2 FA 61 FC | 	wrlong	result1, objptr
1939c     64 00 00 FF 
193a0     20 E4 85 F1 | 	sub	objptr, ##51232
193a4     F2 FA 01 F6 | 	mov	result1, objptr
193a8     00 38 02 FF 
193ac     00 FA 45 F5 | 	or	result1, ##74448896
193b0     63 00 00 FF 
193b4     B4 E4 05 F1 | 	add	objptr, ##50868
193b8     F2 FA 61 FC | 	wrlong	result1, objptr
193bc     63 00 00 FF 
193c0     B4 E4 85 F1 | 	sub	objptr, ##50868
193c4     F2 FA 01 F6 | 	mov	result1, objptr
193c8     00 40 02 FF 
193cc     00 FA 45 F5 | 	or	result1, ##75497472
193d0     64 00 00 FF 
193d4     38 E4 05 F1 | 	add	objptr, ##51256
193d8     F2 FA 61 FC | 	wrlong	result1, objptr
193dc     64 00 00 FF 
193e0     38 E4 85 F1 | 	sub	objptr, ##51256
193e4     F2 FA 01 F6 | 	mov	result1, objptr
193e8     00 48 02 FF 
193ec     00 FA 45 F5 | 	or	result1, ##76546048
193f0     64 00 00 FF 
193f4     48 E4 05 F1 | 	add	objptr, ##51272
193f8     F2 FA 61 FC | 	wrlong	result1, objptr
193fc     64 00 00 FF 
19400     48 E4 85 F1 | 	sub	objptr, ##51272
19404     F2 FA 01 F6 | 	mov	result1, objptr
19408     00 50 02 FF 
1940c     00 FA 45 F5 | 	or	result1, ##77594624
19410     64 00 00 FF 
19414     4C E4 05 F1 | 	add	objptr, ##51276
19418     F2 FA 61 FC | 	wrlong	result1, objptr
1941c     64 00 00 FF 
19420     4C E4 85 F1 | 	sub	objptr, ##51276
19424     F2 FA 01 F6 | 	mov	result1, objptr
19428     00 58 02 FF 
1942c     00 FA 45 F5 | 	or	result1, ##78643200
19430     64 00 00 FF 
19434     44 E4 05 F1 | 	add	objptr, ##51268
19438     F2 FA 61 FC | 	wrlong	result1, objptr
1943c     64 00 00 FF 
19440     44 E4 85 F1 | 	sub	objptr, ##51268
19444     F2 FA 01 F6 | 	mov	result1, objptr
19448     00 60 02 FF 
1944c     00 FA 45 F5 | 	or	result1, ##79691776
19450     64 00 00 FF 
19454     3C E4 05 F1 | 	add	objptr, ##51260
19458     F2 FA 61 FC | 	wrlong	result1, objptr
1945c     64 00 00 FF 
19460     3C E4 85 F1 | 	sub	objptr, ##51260
19464     F2 FA 01 F6 | 	mov	result1, objptr
19468     00 68 02 FF 
1946c     00 FA 45 F5 | 	or	result1, ##80740352
19470     64 00 00 FF 
19474     40 E4 05 F1 | 	add	objptr, ##51264
19478     F2 FA 61 FC | 	wrlong	result1, objptr
1947c     64 00 00 FF 
19480     40 E4 85 F1 | 	sub	objptr, ##51264
19484     F2 FA 01 F6 | 	mov	result1, objptr
19488     00 70 02 FF 
1948c     00 FA 45 F5 | 	or	result1, ##81788928
19490     64 00 00 FF 
19494     50 E4 05 F1 | 	add	objptr, ##51280
19498     F2 FA 61 FC | 	wrlong	result1, objptr
1949c     64 00 00 FF 
194a0     50 E4 85 F1 | 	sub	objptr, ##51280
194a4     F2 FA 01 F6 | 	mov	result1, objptr
194a8     00 78 02 FF 
194ac     00 FA 45 F5 | 	or	result1, ##82837504
194b0     64 00 00 FF 
194b4     54 E4 05 F1 | 	add	objptr, ##51284
194b8     F2 FA 61 FC | 	wrlong	result1, objptr
194bc     64 00 00 FF 
194c0     54 E4 85 F1 | 	sub	objptr, ##51284
194c4     F2 FA 01 F6 | 	mov	result1, objptr
194c8     00 80 02 FF 
194cc     00 FA 45 F5 | 	or	result1, ##83886080
194d0     64 00 00 FF 
194d4     58 E4 05 F1 | 	add	objptr, ##51288
194d8     F2 FA 61 FC | 	wrlong	result1, objptr
194dc     64 00 00 FF 
194e0     58 E4 85 F1 | 	sub	objptr, ##51288
194e4     F2 FA 01 F6 | 	mov	result1, objptr
194e8     00 88 02 FF 
194ec     00 FA 45 F5 | 	or	result1, ##84934656
194f0     64 00 00 FF 
194f4     5C E4 05 F1 | 	add	objptr, ##51292
194f8     F2 FA 61 FC | 	wrlong	result1, objptr
194fc     64 00 00 FF 
19500     5C E4 85 F1 | 	sub	objptr, ##51292
19504     F2 FA 01 F6 | 	mov	result1, objptr
19508     00 90 02 FF 
1950c     00 FA 45 F5 | 	or	result1, ##85983232
19510     64 00 00 FF 
19514     60 E4 05 F1 | 	add	objptr, ##51296
19518     F2 FA 61 FC | 	wrlong	result1, objptr
1951c     64 00 00 FF 
19520     60 E4 85 F1 | 	sub	objptr, ##51296
19524     F2 FA 01 F6 | 	mov	result1, objptr
19528     00 98 02 FF 
1952c     00 FA 45 F5 | 	or	result1, ##87031808
19530     64 00 00 FF 
19534     64 E4 05 F1 | 	add	objptr, ##51300
19538     F2 FA 61 FC | 	wrlong	result1, objptr
1953c     64 00 00 FF 
19540     64 E4 85 F1 | 	sub	objptr, ##51300
19544     F2 FA 01 F6 | 	mov	result1, objptr
19548     00 A0 02 FF 
1954c     00 FA 45 F5 | 	or	result1, ##88080384
19550     64 00 00 FF 
19554     68 E4 05 F1 | 	add	objptr, ##51304
19558     F2 FA 61 FC | 	wrlong	result1, objptr
1955c     64 00 00 FF 
19560     68 E4 85 F1 | 	sub	objptr, ##51304
19564     F2 FA 01 F6 | 	mov	result1, objptr
19568     00 A8 02 FF 
1956c     00 FA 45 F5 | 	or	result1, ##89128960
19570     64 00 00 FF 
19574     6C E4 05 F1 | 	add	objptr, ##51308
19578     F2 FA 61 FC | 	wrlong	result1, objptr
1957c     64 00 00 FF 
19580     6C E4 85 F1 | 	sub	objptr, ##51308
19584     F2 FA 01 F6 | 	mov	result1, objptr
19588     00 B0 02 FF 
1958c     00 FA 45 F5 | 	or	result1, ##90177536
19590     64 00 00 FF 
19594     78 E4 05 F1 | 	add	objptr, ##51320
19598     F2 FA 61 FC | 	wrlong	result1, objptr
1959c     64 00 00 FF 
195a0     78 E4 85 F1 | 	sub	objptr, ##51320
195a4     F2 FA 01 F6 | 	mov	result1, objptr
195a8     00 B8 02 FF 
195ac     00 FA 45 F5 | 	or	result1, ##91226112
195b0     64 00 00 FF 
195b4     70 E4 05 F1 | 	add	objptr, ##51312
195b8     F2 FA 61 FC | 	wrlong	result1, objptr
195bc     64 00 00 FF 
195c0     70 E4 85 F1 | 	sub	objptr, ##51312
195c4     F2 FA 01 F6 | 	mov	result1, objptr
195c8     00 C0 02 FF 
195cc     00 FA 45 F5 | 	or	result1, ##92274688
195d0     64 00 00 FF 
195d4     74 E4 05 F1 | 	add	objptr, ##51316
195d8     F2 FA 61 FC | 	wrlong	result1, objptr
195dc     64 00 00 FF 
195e0     74 E4 85 F1 | 	sub	objptr, ##51316
195e4     F2 FA 01 F6 | 	mov	result1, objptr
195e8     00 C8 02 FF 
195ec     00 FA 45 F5 | 	or	result1, ##93323264
195f0     64 00 00 FF 
195f4     7C E4 05 F1 | 	add	objptr, ##51324
195f8     F2 FA 61 FC | 	wrlong	result1, objptr
195fc     64 00 00 FF 
19600     7C E4 85 F1 | 	sub	objptr, ##51324
19604     F2 FA 01 F6 | 	mov	result1, objptr
19608     00 D0 02 FF 
1960c     00 FA 45 F5 | 	or	result1, ##94371840
19610     64 00 00 FF 
19614     24 E4 05 F1 | 	add	objptr, ##51236
19618     F2 FA 61 FC | 	wrlong	result1, objptr
1961c     64 00 00 FF 
19620     24 E4 85 F1 | 	sub	objptr, ##51236
19624     F2 FA 01 F6 | 	mov	result1, objptr
19628     00 D8 02 FF 
1962c     00 FA 45 F5 | 	or	result1, ##95420416
19630     64 00 00 FF 
19634     2C E4 05 F1 | 	add	objptr, ##51244
19638     F2 FA 61 FC | 	wrlong	result1, objptr
1963c     64 00 00 FF 
19640     2C E4 85 F1 | 	sub	objptr, ##51244
19644     F2 FA 01 F6 | 	mov	result1, objptr
19648     00 E0 02 FF 
1964c     00 FA 45 F5 | 	or	result1, ##96468992
19650     64 00 00 FF 
19654     30 E4 05 F1 | 	add	objptr, ##51248
19658     F2 FA 61 FC | 	wrlong	result1, objptr
1965c     64 00 00 FF 
19660     30 E4 85 F1 | 	sub	objptr, ##51248
19664     F2 FA 01 F6 | 	mov	result1, objptr
19668     00 E8 02 FF 
1966c     00 FA 45 F5 | 	or	result1, ##97517568
19670     64 00 00 FF 
19674     80 E4 05 F1 | 	add	objptr, ##51328
19678     F2 FA 61 FC | 	wrlong	result1, objptr
1967c     64 00 00 FF 
19680     80 E4 85 F1 | 	sub	objptr, ##51328
19684     F2 FA 01 F6 | 	mov	result1, objptr
19688     00 F0 02 FF 
1968c     00 FA 45 F5 | 	or	result1, ##98566144
19690     64 00 00 FF 
19694     84 E4 05 F1 | 	add	objptr, ##51332
19698     F2 FA 61 FC | 	wrlong	result1, objptr
1969c     64 00 00 FF 
196a0     84 E4 85 F1 | 	sub	objptr, ##51332
196a4     F2 FA 01 F6 | 	mov	result1, objptr
196a8     00 F8 02 FF 
196ac     00 FA 45 F5 | 	or	result1, ##99614720
196b0     64 00 00 FF 
196b4     88 E4 05 F1 | 	add	objptr, ##51336
196b8     F2 FA 61 FC | 	wrlong	result1, objptr
196bc     64 00 00 FF 
196c0     88 E4 85 F1 | 	sub	objptr, ##51336
196c4     F2 FA 01 F6 | 	mov	result1, objptr
196c8     39 FA 25 F4 | 	bith	result1, #57
196cc     64 00 00 FF 
196d0     34 E4 05 F1 | 	add	objptr, ##51252
196d4     F2 FA 61 FC | 	wrlong	result1, objptr
196d8     64 00 00 FF 
196dc     34 E4 85 F1 | 	sub	objptr, ##51252
196e0     F2 FA 01 F6 | 	mov	result1, objptr
196e4     00 08 03 FF 
196e8     00 FA 45 F5 | 	or	result1, ##101711872
196ec     64 00 00 FF 
196f0     98 E4 05 F1 | 	add	objptr, ##51352
196f4     F2 FA 61 FC | 	wrlong	result1, objptr
196f8     64 00 00 FF 
196fc     98 E4 85 F1 | 	sub	objptr, ##51352
19700     F2 FA 01 F6 | 	mov	result1, objptr
19704     00 10 03 FF 
19708     00 FA 45 F5 | 	or	result1, ##102760448
1970c     64 00 00 FF 
19710     A0 E4 05 F1 | 	add	objptr, ##51360
19714     F2 FA 61 FC | 	wrlong	result1, objptr
19718     64 00 00 FF 
1971c     A0 E4 85 F1 | 	sub	objptr, ##51360
19720     F2 FA 01 F6 | 	mov	result1, objptr
19724     00 18 03 FF 
19728     00 FA 45 F5 | 	or	result1, ##103809024
1972c     64 00 00 FF 
19730     94 E4 05 F1 | 	add	objptr, ##51348
19734     F2 FA 61 FC | 	wrlong	result1, objptr
19738     64 00 00 FF 
1973c     94 E4 85 F1 | 	sub	objptr, ##51348
19740     F2 FA 01 F6 | 	mov	result1, objptr
19744     00 20 03 FF 
19748     00 FA 45 F5 | 	or	result1, ##104857600
1974c     64 00 00 FF 
19750     90 E4 05 F1 | 	add	objptr, ##51344
19754     F2 FA 61 FC | 	wrlong	result1, objptr
19758     64 00 00 FF 
1975c     90 E4 85 F1 | 	sub	objptr, ##51344
19760     F2 FA 01 F6 | 	mov	result1, objptr
19764     00 28 03 FF 
19768     00 FA 45 F5 | 	or	result1, ##105906176
1976c     64 00 00 FF 
19770     8C E4 05 F1 | 	add	objptr, ##51340
19774     F2 FA 61 FC | 	wrlong	result1, objptr
19778     64 00 00 FF 
1977c     8C E4 85 F1 | 	sub	objptr, ##51340
19780     F2 FA 01 F6 | 	mov	result1, objptr
19784     00 30 03 FF 
19788     00 FA 45 F5 | 	or	result1, ##106954752
1978c     64 00 00 FF 
19790     9C E4 05 F1 | 	add	objptr, ##51356
19794     F2 FA 61 FC | 	wrlong	result1, objptr
19798     64 00 00 FF 
1979c     9C E4 85 F1 | 	sub	objptr, ##51356
197a0     F2 FA 01 F6 | 	mov	result1, objptr
197a4     00 38 03 FF 
197a8     00 FA 45 F5 | 	or	result1, ##108003328
197ac     64 00 00 FF 
197b0     A4 E4 05 F1 | 	add	objptr, ##51364
197b4     F2 FA 61 FC | 	wrlong	result1, objptr
197b8     64 00 00 FF 
197bc     A4 E4 85 F1 | 	sub	objptr, ##51364
197c0     F2 FA 01 F6 | 	mov	result1, objptr
197c4     00 40 03 FF 
197c8     00 FA 45 F5 | 	or	result1, ##109051904
197cc     64 00 00 FF 
197d0     A8 E4 05 F1 | 	add	objptr, ##51368
197d4     F2 FA 61 FC | 	wrlong	result1, objptr
197d8     64 00 00 FF 
197dc     A8 E4 85 F1 | 	sub	objptr, ##51368
197e0     F2 FA 01 F6 | 	mov	result1, objptr
197e4     00 48 03 FF 
197e8     00 FA 45 F5 | 	or	result1, ##110100480
197ec     64 00 00 FF 
197f0     AC E4 05 F1 | 	add	objptr, ##51372
197f4     F2 FA 61 FC | 	wrlong	result1, objptr
197f8     64 00 00 FF 
197fc     AC E4 85 F1 | 	sub	objptr, ##51372
19800     F2 FA 01 F6 | 	mov	result1, objptr
19804     00 50 03 FF 
19808     00 FA 45 F5 | 	or	result1, ##111149056
1980c     64 00 00 FF 
19810     B4 E4 05 F1 | 	add	objptr, ##51380
19814     F2 FA 61 FC | 	wrlong	result1, objptr
19818     64 00 00 FF 
1981c     B4 E4 85 F1 | 	sub	objptr, ##51380
19820     F2 FA 01 F6 | 	mov	result1, objptr
19824     00 58 03 FF 
19828     00 FA 45 F5 | 	or	result1, ##112197632
1982c     64 00 00 FF 
19830     B8 E4 05 F1 | 	add	objptr, ##51384
19834     F2 FA 61 FC | 	wrlong	result1, objptr
19838     64 00 00 FF 
1983c     B8 E4 85 F1 | 	sub	objptr, ##51384
19840     F2 FA 01 F6 | 	mov	result1, objptr
19844     00 60 03 FF 
19848     00 FA 45 F5 | 	or	result1, ##113246208
1984c     64 00 00 FF 
19850     BC E4 05 F1 | 	add	objptr, ##51388
19854     F2 FA 61 FC | 	wrlong	result1, objptr
19858     64 00 00 FF 
1985c     BC E4 85 F1 | 	sub	objptr, ##51388
19860     F2 FA 01 F6 | 	mov	result1, objptr
19864     00 68 03 FF 
19868     00 FA 45 F5 | 	or	result1, ##114294784
1986c     64 00 00 FF 
19870     C0 E4 05 F1 | 	add	objptr, ##51392
19874     F2 FA 61 FC | 	wrlong	result1, objptr
19878     64 00 00 FF 
1987c     C0 E4 85 F1 | 	sub	objptr, ##51392
19880     F2 FA 01 F6 | 	mov	result1, objptr
19884     00 70 03 FF 
19888     00 FA 45 F5 | 	or	result1, ##115343360
1988c     64 00 00 FF 
19890     C4 E4 05 F1 | 	add	objptr, ##51396
19894     F2 FA 61 FC | 	wrlong	result1, objptr
19898     64 00 00 FF 
1989c     C4 E4 85 F1 | 	sub	objptr, ##51396
198a0     F2 FA 01 F6 | 	mov	result1, objptr
198a4     00 78 03 FF 
198a8     00 FA 45 F5 | 	or	result1, ##116391936
198ac     64 00 00 FF 
198b0     C8 E4 05 F1 | 	add	objptr, ##51400
198b4     F2 FA 61 FC | 	wrlong	result1, objptr
198b8     64 00 00 FF 
198bc     C8 E4 85 F1 | 	sub	objptr, ##51400
198c0     F2 FA 01 F6 | 	mov	result1, objptr
198c4     58 FA 25 F4 | 	bith	result1, #88
198c8     64 00 00 FF 
198cc     CC E4 05 F1 | 	add	objptr, ##51404
198d0     F2 FA 61 FC | 	wrlong	result1, objptr
198d4     64 00 00 FF 
198d8     CC E4 85 F1 | 	sub	objptr, ##51404
198dc     F2 FA 01 F6 | 	mov	result1, objptr
198e0     00 88 03 FF 
198e4     00 FA 45 F5 | 	or	result1, ##118489088
198e8     64 00 00 FF 
198ec     D0 E4 05 F1 | 	add	objptr, ##51408
198f0     F2 FA 61 FC | 	wrlong	result1, objptr
198f4     64 00 00 FF 
198f8     D0 E4 85 F1 | 	sub	objptr, ##51408
198fc     F2 FA 01 F6 | 	mov	result1, objptr
19900     00 90 03 FF 
19904     00 FA 45 F5 | 	or	result1, ##119537664
19908     64 00 00 FF 
1990c     B0 E4 05 F1 | 	add	objptr, ##51376
19910     F2 FA 61 FC | 	wrlong	result1, objptr
19914     64 00 00 FF 
19918     B0 E4 85 F1 | 	sub	objptr, ##51376
1991c     F2 FA 01 F6 | 	mov	result1, objptr
19920     00 98 03 FF 
19924     00 FA 45 F5 | 	or	result1, ##120586240
19928     63 00 00 FF 
1992c     A8 E4 05 F1 | 	add	objptr, ##50856
19930     F2 FA 61 FC | 	wrlong	result1, objptr
19934     63 00 00 FF 
19938     A8 E4 85 F1 | 	sub	objptr, ##50856
1993c     F2 FA 01 F6 | 	mov	result1, objptr
19940     00 A0 03 FF 
19944     00 FA 45 F5 | 	or	result1, ##121634816
19948     64 00 00 FF 
1994c     D4 E4 05 F1 | 	add	objptr, ##51412
19950     F2 FA 61 FC | 	wrlong	result1, objptr
19954     64 00 00 FF 
19958     D4 E4 85 F1 | 	sub	objptr, ##51412
1995c     F2 FA 01 F6 | 	mov	result1, objptr
19960     00 A8 03 FF 
19964     00 FA 45 F5 | 	or	result1, ##122683392
19968     64 00 00 FF 
1996c     D8 E4 05 F1 | 	add	objptr, ##51416
19970     F2 FA 61 FC | 	wrlong	result1, objptr
19974     64 00 00 FF 
19978     D8 E4 85 F1 | 	sub	objptr, ##51416
1997c     F2 FA 01 F6 | 	mov	result1, objptr
19980     00 B0 03 FF 
19984     00 FA 45 F5 | 	or	result1, ##123731968
19988     64 00 00 FF 
1998c     EC E4 05 F1 | 	add	objptr, ##51436
19990     F2 FA 61 FC | 	wrlong	result1, objptr
19994     64 00 00 FF 
19998     EC E4 85 F1 | 	sub	objptr, ##51436
1999c     F2 FA 01 F6 | 	mov	result1, objptr
199a0     00 B8 03 FF 
199a4     00 FA 45 F5 | 	or	result1, ##124780544
199a8     64 00 00 FF 
199ac     E8 E4 05 F1 | 	add	objptr, ##51432
199b0     F2 FA 61 FC | 	wrlong	result1, objptr
199b4     64 00 00 FF 
199b8     E8 E4 85 F1 | 	sub	objptr, ##51432
199bc     F2 FA 01 F6 | 	mov	result1, objptr
199c0     77 FA 25 F4 | 	bith	result1, #119
199c4     64 00 00 FF 
199c8     E0 E4 05 F1 | 	add	objptr, ##51424
199cc     F2 FA 61 FC | 	wrlong	result1, objptr
199d0     64 00 00 FF 
199d4     E0 E4 85 F1 | 	sub	objptr, ##51424
199d8     F2 FA 01 F6 | 	mov	result1, objptr
199dc     00 C8 03 FF 
199e0     00 FA 45 F5 | 	or	result1, ##126877696
199e4     64 00 00 FF 
199e8     DC E4 05 F1 | 	add	objptr, ##51420
199ec     F2 FA 61 FC | 	wrlong	result1, objptr
199f0     64 00 00 FF 
199f4     DC E4 85 F1 | 	sub	objptr, ##51420
199f8     F2 FA 01 F6 | 	mov	result1, objptr
199fc     00 D0 03 FF 
19a00     00 FA 45 F5 | 	or	result1, ##127926272
19a04     64 00 00 FF 
19a08     FC E4 05 F1 | 	add	objptr, ##51452
19a0c     F2 FA 61 FC | 	wrlong	result1, objptr
19a10     64 00 00 FF 
19a14     FC E4 85 F1 | 	sub	objptr, ##51452
19a18     F2 FA 01 F6 | 	mov	result1, objptr
19a1c     00 D8 03 FF 
19a20     00 FA 45 F5 | 	or	result1, ##128974848
19a24     64 00 00 FF 
19a28     F0 E4 05 F1 | 	add	objptr, ##51440
19a2c     F2 FA 61 FC | 	wrlong	result1, objptr
19a30     64 00 00 FF 
19a34     F0 E4 85 F1 | 	sub	objptr, ##51440
19a38     F2 FA 01 F6 | 	mov	result1, objptr
19a3c     96 FA 25 F4 | 	bith	result1, #150
19a40     64 00 00 FF 
19a44     F4 E4 05 F1 | 	add	objptr, ##51444
19a48     F2 FA 61 FC | 	wrlong	result1, objptr
19a4c     64 00 00 FF 
19a50     F4 E4 85 F1 | 	sub	objptr, ##51444
19a54     F2 FA 01 F6 | 	mov	result1, objptr
19a58     00 E8 03 FF 
19a5c     00 FA 45 F5 | 	or	result1, ##131072000
19a60     64 00 00 FF 
19a64     F8 E4 05 F1 | 	add	objptr, ##51448
19a68     F2 FA 61 FC | 	wrlong	result1, objptr
19a6c     64 00 00 FF 
19a70     F8 E4 85 F1 | 	sub	objptr, ##51448
19a74     F2 FA 01 F6 | 	mov	result1, objptr
19a78     B5 FA 25 F4 | 	bith	result1, #181
19a7c     64 00 00 FF 
19a80     00 E5 05 F1 | 	add	objptr, ##51456
19a84     F2 FA 61 FC | 	wrlong	result1, objptr
19a88     64 00 00 FF 
19a8c     00 E5 85 F1 | 	sub	objptr, ##51456
19a90     F2 FA 01 F6 | 	mov	result1, objptr
19a94     D4 FA 25 F4 | 	bith	result1, #212
19a98     64 00 00 FF 
19a9c     04 E5 05 F1 | 	add	objptr, ##51460
19aa0     F2 FA 61 FC | 	wrlong	result1, objptr
19aa4     64 00 00 FF 
19aa8     04 E5 85 F1 | 	sub	objptr, ##51460
19aac     F2 FA 01 F6 | 	mov	result1, objptr
19ab0     1B FA 25 F4 | 	bith	result1, #27
19ab4     64 00 00 FF 
19ab8     08 E5 05 F1 | 	add	objptr, ##51464
19abc     F2 FA 61 FC | 	wrlong	result1, objptr
19ac0     64 00 00 FF 
19ac4     08 E5 85 F1 | 	sub	objptr, ##51464
19ac8     F2 FA 01 F6 | 	mov	result1, objptr
19acc     00 08 04 FF 
19ad0     00 FA 45 F5 | 	or	result1, ##135266304
19ad4     64 00 00 FF 
19ad8     0C E5 05 F1 | 	add	objptr, ##51468
19adc     F2 FA 61 FC | 	wrlong	result1, objptr
19ae0     64 00 00 FF 
19ae4     0C E5 85 F1 | 	sub	objptr, ##51468
19ae8     F2 FA 01 F6 | 	mov	result1, objptr
19aec     00 10 04 FF 
19af0     00 FA 45 F5 | 	or	result1, ##136314880
19af4     64 00 00 FF 
19af8     10 E5 05 F1 | 	add	objptr, ##51472
19afc     F2 FA 61 FC | 	wrlong	result1, objptr
19b00     64 00 00 FF 
19b04     10 E5 85 F1 | 	sub	objptr, ##51472
19b08                 | _init_commands_ret
19b08     2D 00 64 FD | 	ret
19b0c                 | 
19b0c                 | ' 
19b0c                 | ' ''--------------------------------Error strings -------------------------------------
19b0c                 | ' sub init_audio
19b0c                 | _init_audio
19b0c     05 4A 05 F6 | 	mov	COUNT_, #5
19b10     A8 00 A0 FD | 	call	#pushregs_
19b14     00 C0 1F FF 
19b18     00 1E 06 F6 | 	mov	local01, ##1065353216
19b1c                 | ' for i=0 to 1023 : samplebuf(0,i)=round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
19b1c     00 20 06 F6 | 	mov	local02, #0
19b20                 | LR__2060
19b20     10 23 02 F6 | 	mov	local03, local02
19b24     01 22 66 F0 | 	shl	local03, #1
19b28     0C 00 00 FF 
19b2c     D8 E4 05 F1 | 	add	objptr, ##6360
19b30     F2 22 02 F1 | 	add	local03, objptr
19b34     58 7F 23 FF 
19b38     00 24 06 F6 | 	mov	local04, ##1191096320
19b3c     0C 00 00 FF 
19b40     D8 E4 85 F1 | 	sub	objptr, ##6360
19b44     10 13 52 F6 | 	abs	arg01, local02 wc
19b48     1F 26 C6 C9 |  if_b	decod	local05, #31
19b4c     00 26 06 36 |  if_ae	mov	local05, #0
19b50     40 77 B0 FD | 	call	#__system___float_fromuns
19b54     13 FB 61 F5 | 	xor	result1, local05
19b58     FD 12 02 F6 | 	mov	arg01, result1
19b5c     87 24 20 FF 
19b60     DB 15 06 F6 | 	mov	arg02, ##1078530011
19b64     30 7B B0 FD | 	call	#__system___float_mul
19b68     FD 12 02 F6 | 	mov	arg01, result1
19b6c     00 00 22 FF 
19b70     00 14 06 F6 | 	mov	arg02, ##1140850688
19b74     24 7D B0 FD | 	call	#__system___float_div
19b78     FD 12 02 F6 | 	mov	arg01, result1
19b7c     54 84 B0 FD | 	call	#__system____builtin_sinf
19b80     FD 14 02 F6 | 	mov	arg02, result1
19b84     12 13 02 F6 | 	mov	arg01, local04
19b88     0C 7B B0 FD | 	call	#__system___float_mul
19b8c     FD 12 02 F6 | 	mov	arg01, result1
19b90     01 14 06 F6 | 	mov	arg02, #1
19b94     C8 7F B0 FD | 	call	#__system___float_tointeger
19b98     11 FB 51 FC | 	wrword	result1, local03
19b9c     01 20 06 F1 | 	add	local02, #1
19ba0     02 00 00 FF 
19ba4     00 20 56 F2 | 	cmps	local02, ##1024 wc
19ba8     74 FF 9F CD |  if_b	jmp	#LR__2060
19bac                 | ' for i=0 to 511  : samplebuf(1,i)= -32512+127*i: samplebuf(1,512+i)=-samplebuf(1,i) : next i   		' 1 : triangle 
19bac     00 20 06 F6 | 	mov	local02, #0
19bb0     10 00 00 FF 
19bb4     D8 E4 05 F1 | 	add	objptr, ##8408
19bb8     97 6A 48 FB | 	callpa	#(@LR__2064-@LR__2061)>>2,fcache_load_ptr_
19bbc                 | LR__2061
19bbc     10 23 02 F6 | 	mov	local03, local02
19bc0     01 22 66 F0 | 	shl	local03, #1
19bc4     F2 22 02 F1 | 	add	local03, objptr
19bc8     10 27 02 F6 | 	mov	local05, local02
19bcc     07 26 66 F0 | 	shl	local05, #7
19bd0     10 27 82 F1 | 	sub	local05, local02
19bd4     C0 FF 7F FF 
19bd8     00 25 06 F6 | 	mov	local04, ##-32512
19bdc     13 25 02 F1 | 	add	local04, local05
19be0     11 25 52 FC | 	wrword	local04, local03
19be4     09 22 C6 F9 | 	decod	local03, #9
19be8     10 23 02 F1 | 	add	local03, local02
19bec     01 22 66 F0 | 	shl	local03, #1
19bf0     F2 22 02 F1 | 	add	local03, objptr
19bf4     10 25 02 F6 | 	mov	local04, local02
19bf8     01 24 66 F0 | 	shl	local04, #1
19bfc     F2 24 02 F1 | 	add	local04, objptr
19c00     12 25 E2 FA | 	rdword	local04, local04
19c04     0F 24 66 F7 | 	signx	local04, #15
19c08     12 25 62 F6 | 	neg	local04, local04
19c0c     11 25 52 FC | 	wrword	local04, local03
19c10     01 20 06 F1 | 	add	local02, #1
19c14     01 00 00 FF 
19c18     00 20 56 F2 | 	cmps	local02, ##512 wc
19c1c     9C FF 9F CD |  if_b	jmp	#LR__2061
19c20                 | ' for i=0 to 1023 : samplebuf(2,i)= -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
19c20     00 20 06 F6 | 	mov	local02, #0
19c24     04 00 00 FF 
19c28     00 E4 05 F1 | 	add	objptr, ##2048
19c2c                 | LR__2062
19c2c     10 23 02 F6 | 	mov	local03, local02
19c30     01 22 66 F0 | 	shl	local03, #1
19c34     F2 22 02 F1 | 	add	local03, objptr
19c38     10 27 02 F6 | 	mov	local05, local02
19c3c     06 26 66 F0 | 	shl	local05, #6
19c40     10 27 82 F1 | 	sub	local05, local02
19c44     C1 FF 7F FF 
19c48     00 24 06 F6 | 	mov	local04, ##-32256
19c4c     13 25 02 F1 | 	add	local04, local05
19c50     11 25 52 FC | 	wrword	local04, local03
19c54     01 20 06 F1 | 	add	local02, #1
19c58     02 00 00 FF 
19c5c     00 20 56 F2 | 	cmps	local02, ##1024 wc
19c60     C8 FF 9F CD |  if_b	jmp	#LR__2062
19c64                 | ' for i=0 to 127  : samplebuf(3,i)= -32600 : next i : for i=128 to 1023 : samplebuf(3,i) =32600 : next i 	' 3 pulse 12.5%
19c64     00 20 06 F6 | 	mov	local02, #0
19c68     04 00 00 FF 
19c6c     00 E4 05 F1 | 	add	objptr, ##2048
19c70                 | LR__2063
19c70     10 23 02 F6 | 	mov	local03, local02
19c74     01 22 66 F0 | 	shl	local03, #1
19c78     F2 22 02 F1 | 	add	local03, objptr
19c7c     40 00 80 FF 
19c80     11 51 59 FC | 	wrword	##32936, local03
19c84     01 20 06 F1 | 	add	local02, #1
19c88     80 20 56 F2 | 	cmps	local02, #128 wc
19c8c     E0 FF 9F CD |  if_b	jmp	#LR__2063
19c90                 | LR__2064
19c90     80 20 06 F6 | 	mov	local02, #128
19c94     97 68 48 FB | 	callpa	#(@LR__2070-@LR__2065)>>2,fcache_load_ptr_
19c98                 | LR__2065
19c98     10 23 02 F6 | 	mov	local03, local02
19c9c     01 22 66 F0 | 	shl	local03, #1
19ca0     F2 22 02 F1 | 	add	local03, objptr
19ca4     3F 00 80 FF 
19ca8     11 B1 5A FC | 	wrword	##32600, local03
19cac     01 20 06 F1 | 	add	local02, #1
19cb0     02 00 00 FF 
19cb4     00 20 16 F2 | 	cmp	local02, ##1024 wc
19cb8     DC FF 9F CD |  if_b	jmp	#LR__2065
19cbc                 | ' for i=0 to 511  : samplebuf(4,i)= -32600 : next i : for i=512 to 1023 : samplebuf(4,i) =32600 : next i 	' 4 square
19cbc     00 20 06 F6 | 	mov	local02, #0
19cc0     04 00 00 FF 
19cc4     00 E4 05 F1 | 	add	objptr, ##2048
19cc8                 | LR__2066
19cc8     10 23 02 F6 | 	mov	local03, local02
19ccc     01 22 66 F0 | 	shl	local03, #1
19cd0     F2 22 02 F1 | 	add	local03, objptr
19cd4     40 00 80 FF 
19cd8     11 51 59 FC | 	wrword	##32936, local03
19cdc     01 20 06 F1 | 	add	local02, #1
19ce0     01 00 00 FF 
19ce4     00 20 56 F2 | 	cmps	local02, ##512 wc
19ce8     DC FF 9F CD |  if_b	jmp	#LR__2066
19cec     09 20 C6 F9 | 	decod	local02, #9
19cf0                 | LR__2067
19cf0     10 23 02 F6 | 	mov	local03, local02
19cf4     01 22 66 F0 | 	shl	local03, #1
19cf8     F2 22 02 F1 | 	add	local03, objptr
19cfc     3F 00 80 FF 
19d00     11 B1 5A FC | 	wrword	##32600, local03
19d04     01 20 06 F1 | 	add	local02, #1
19d08     02 00 00 FF 
19d0c     00 20 16 F2 | 	cmp	local02, ##1024 wc
19d10     DC FF 9F CD |  if_b	jmp	#LR__2067
19d14                 | ' for i=0 to 255  : samplebuf(5,i)= -32600 : next i : for i=256 to 1023 : samplebuf(5,i) =32600 : next i 	' 5 pulse 25%
19d14     00 20 06 F6 | 	mov	local02, #0
19d18     04 00 00 FF 
19d1c     00 E4 05 F1 | 	add	objptr, ##2048
19d20                 | LR__2068
19d20     10 23 02 F6 | 	mov	local03, local02
19d24     01 22 66 F0 | 	shl	local03, #1
19d28     F2 22 02 F1 | 	add	local03, objptr
19d2c     40 00 80 FF 
19d30     11 51 59 FC | 	wrword	##32936, local03
19d34     01 20 06 F1 | 	add	local02, #1
19d38     00 21 56 F2 | 	cmps	local02, #256 wc
19d3c     E0 FF 9F CD |  if_b	jmp	#LR__2068
19d40     00 21 06 F6 | 	mov	local02, #256
19d44                 | LR__2069
19d44     10 23 02 F6 | 	mov	local03, local02
19d48     01 22 66 F0 | 	shl	local03, #1
19d4c     F2 22 02 F1 | 	add	local03, objptr
19d50     3F 00 80 FF 
19d54     11 B1 5A FC | 	wrword	##32600, local03
19d58     01 20 06 F1 | 	add	local02, #1
19d5c     02 00 00 FF 
19d60     00 20 16 F2 | 	cmp	local02, ##1024 wc
19d64     DC FF 9F CD |  if_b	jmp	#LR__2069
19d68                 | LR__2070
19d68                 | ' for i=0 to 1023 : samplebuf(6,i)= dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
19d68     00 20 06 F6 | 	mov	local02, #0
19d6c     04 00 00 FF 
19d70     00 E4 05 F1 | 	add	objptr, ##2048
19d74     14 00 00 FF 
19d78     C6 EA 05 F1 | 	add	ptr__dat__, ##10438
19d7c     97 1C 48 FB | 	callpa	#(@LR__2072-@LR__2071)>>2,fcache_load_ptr_
19d80                 | LR__2071
19d80     10 23 02 F6 | 	mov	local03, local02
19d84     01 22 66 F0 | 	shl	local03, #1
19d88     F2 22 02 F1 | 	add	local03, objptr
19d8c     F5 12 02 F6 | 	mov	arg01, ptr__dat__
19d90     10 12 06 F1 | 	add	arg01, #16
19d94     10 FB 01 F6 | 	mov	result1, local02
19d98     01 FA 65 F0 | 	shl	result1, #1
19d9c     FD 12 02 F1 | 	add	arg01, result1
19da0     09 FB E1 FA | 	rdword	result1, arg01
19da4     11 FB 51 FC | 	wrword	result1, local03
19da8     01 20 06 F1 | 	add	local02, #1
19dac     02 00 00 FF 
19db0     00 20 56 F2 | 	cmps	local02, ##1024 wc
19db4     C8 FF 9F CD |  if_b	jmp	#LR__2071
19db8                 | LR__2072
19db8                 | ' for i=0 to 1023 : samplebuf(7,i)= dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
19db8     00 20 06 F6 | 	mov	local02, #0
19dbc     04 00 00 FF 
19dc0     00 E4 05 F1 | 	add	objptr, ##2048
19dc4     04 00 00 FF 
19dc8     10 EA 85 F1 | 	sub	ptr__dat__, ##2064
19dcc     97 1C 48 FB | 	callpa	#(@LR__2074-@LR__2073)>>2,fcache_load_ptr_
19dd0                 | LR__2073
19dd0     10 23 02 F6 | 	mov	local03, local02
19dd4     01 22 66 F0 | 	shl	local03, #1
19dd8     F2 22 02 F1 | 	add	local03, objptr
19ddc     F5 12 02 F6 | 	mov	arg01, ptr__dat__
19de0     10 12 06 F1 | 	add	arg01, #16
19de4     10 FB 01 F6 | 	mov	result1, local02
19de8     01 FA 65 F0 | 	shl	result1, #1
19dec     FD 12 02 F1 | 	add	arg01, result1
19df0     09 FB E1 FA | 	rdword	result1, arg01
19df4     11 FB 51 FC | 	wrword	result1, local03
19df8     01 20 06 F1 | 	add	local02, #1
19dfc     02 00 00 FF 
19e00     00 20 56 F2 | 	cmps	local02, ##1024 wc
19e04     C8 FF 9F CD |  if_b	jmp	#LR__2073
19e08                 | LR__2074
19e08     10 00 00 FF 
19e0c     B6 EA 85 F1 | 	sub	ptr__dat__, ##8374
19e10                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
19e10     00 20 06 F6 | 	mov	local02, #0
19e14     04 00 00 FF 
19e18     00 E4 05 F1 | 	add	objptr, ##2048
19e1c     97 18 48 FB | 	callpa	#(@LR__2076-@LR__2075)>>2,fcache_load_ptr_
19e20                 | LR__2075
19e20     10 23 02 F6 | 	mov	local03, local02
19e24     01 22 66 F0 | 	shl	local03, #1
19e28     F2 22 02 F1 | 	add	local03, objptr
19e2c     10 27 02 F6 | 	mov	local05, local02
19e30     08 26 66 F0 | 	shl	local05, #8
19e34     7F 00 00 FF 
19e38     00 25 06 F6 | 	mov	local04, ##65280
19e3c     13 25 82 F1 | 	sub	local04, local05
19e40     11 25 52 FC | 	wrword	local04, local03
19e44     01 20 06 F1 | 	add	local02, #1
19e48     00 21 56 F2 | 	cmps	local02, #256 wc
19e4c     D0 FF 9F CD |  if_b	jmp	#LR__2075
19e50                 | LR__2076
19e50     2C 00 00 FF 
19e54     D8 E4 85 F1 | 	sub	objptr, ##22744
19e58                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
19e58     00 20 06 F6 | 	mov	local02, #0
19e5c                 | LR__2077
19e5c     10 23 02 F6 | 	mov	local03, local02
19e60     01 22 66 F0 | 	shl	local03, #1
19e64     2D 00 00 FF 
19e68     D8 E4 05 F1 | 	add	objptr, ##23256
19e6c     F2 22 02 F1 | 	add	local03, objptr
19e70     80 BF 23 FF 
19e74     00 12 06 F6 | 	mov	arg01, ##1199505408
19e78     0F 15 02 F6 | 	mov	arg02, local01
19e7c     2D 00 00 FF 
19e80     D8 E4 85 F1 | 	sub	objptr, ##23256
19e84     10 78 B0 FD | 	call	#__system___float_mul
19e88     FD 12 02 F6 | 	mov	arg01, result1
19e8c     01 14 06 F6 | 	mov	arg02, #1
19e90     CC 7C B0 FD | 	call	#__system___float_tointeger
19e94     11 FB 51 FC | 	wrword	result1, local03
19e98     0F 13 02 F6 | 	mov	arg01, local01
19e9c     CC BC 1F FF 
19ea0     9A 15 06 F6 | 	mov	arg02, ##1064933786
19ea4     F0 77 B0 FD | 	call	#__system___float_mul
19ea8     FD 1E 02 F6 | 	mov	local01, result1
19eac     01 20 06 F1 | 	add	local02, #1
19eb0     00 21 56 F2 | 	cmps	local02, #256 wc
19eb4     A4 FF 9F CD |  if_b	jmp	#LR__2077
19eb8     2E 00 00 FF 
19ebc     D6 E4 05 F1 | 	add	objptr, ##23766
19ec0     F2 00 58 FC | 	wrword	#0, objptr
19ec4                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
19ec4     00 20 06 F6 | 	mov	local02, #0
19ec8     02 E4 05 F1 | 	add	objptr, #2
19ecc     97 10 48 FB | 	callpa	#(@LR__2079-@LR__2078)>>2,fcache_load_ptr_
19ed0                 | LR__2078
19ed0     10 23 02 F6 | 	mov	local03, local02
19ed4     01 22 66 F0 | 	shl	local03, #1
19ed8     F2 22 02 F1 | 	add	local03, objptr
19edc     7F 00 80 FF 
19ee0     11 01 5A FC | 	wrword	##65280, local03
19ee4     01 20 06 F1 | 	add	local02, #1
19ee8     FF 20 56 F2 | 	cmps	local02, #255 wc
19eec     E0 FF 9F CD |  if_b	jmp	#LR__2078
19ef0                 | LR__2079
19ef0     FE E5 05 F1 | 	add	objptr, #510
19ef4     F2 00 58 FC | 	wrword	#0, objptr
19ef8                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
19ef8     00 20 06 F6 | 	mov	local02, #0
19efc     02 E4 05 F1 | 	add	objptr, #2
19f00     97 52 48 FB | 	callpa	#(@LR__2084-@LR__2080)>>2,fcache_load_ptr_
19f04                 | LR__2080
19f04     10 23 02 F6 | 	mov	local03, local02
19f08     01 22 66 F0 | 	shl	local03, #1
19f0c     F2 22 02 F1 | 	add	local03, objptr
19f10     10 25 02 F6 | 	mov	local04, local02
19f14     0C 24 66 F0 | 	shl	local04, #12
19f18     11 25 52 FC | 	wrword	local04, local03
19f1c     01 20 06 F1 | 	add	local02, #1
19f20     10 20 56 F2 | 	cmps	local02, #16 wc
19f24     DC FF 9F CD |  if_b	jmp	#LR__2080
19f28                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
19f28     10 20 06 F6 | 	mov	local02, #16
19f2c                 | LR__2081
19f2c     10 23 02 F6 | 	mov	local03, local02
19f30     01 22 66 F0 | 	shl	local03, #1
19f34     F2 22 02 F1 | 	add	local03, objptr
19f38     7F 00 80 FF 
19f3c     11 01 5A FC | 	wrword	##65280, local03
19f40     01 20 06 F1 | 	add	local02, #1
19f44     F0 20 16 F2 | 	cmp	local02, #240 wc
19f48     E0 FF 9F CD |  if_b	jmp	#LR__2081
19f4c                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
19f4c     F0 20 06 F6 | 	mov	local02, #240
19f50                 | LR__2082
19f50     10 23 02 F6 | 	mov	local03, local02
19f54     01 22 66 F0 | 	shl	local03, #1
19f58     F2 22 02 F1 | 	add	local03, objptr
19f5c     FF 26 06 F6 | 	mov	local05, #255
19f60     10 27 82 F1 | 	sub	local05, local02
19f64     0C 26 66 F0 | 	shl	local05, #12
19f68     11 27 52 FC | 	wrword	local05, local03
19f6c     01 20 06 F1 | 	add	local02, #1
19f70     00 21 16 F2 | 	cmp	local02, #256 wc
19f74     D8 FF 9F CD |  if_b	jmp	#LR__2082
19f78                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
19f78     00 20 06 F6 | 	mov	local02, #0
19f7c     01 00 00 FF 
19f80     00 E4 05 F1 | 	add	objptr, ##512
19f84                 | LR__2083
19f84     10 23 02 F6 | 	mov	local03, local02
19f88     01 22 66 F0 | 	shl	local03, #1
19f8c     F2 22 02 F1 | 	add	local03, objptr
19f90     10 25 02 F6 | 	mov	local04, local02
19f94     08 24 66 F0 | 	shl	local04, #8
19f98     11 25 52 FC | 	wrword	local04, local03
19f9c     01 20 06 F1 | 	add	local02, #1
19fa0     00 21 56 F2 | 	cmps	local02, #256 wc
19fa4     DC FF 9F CD |  if_b	jmp	#LR__2083
19fa8                 | LR__2084
19fa8     FE E5 05 F1 | 	add	objptr, #510
19fac     F2 00 58 FC | 	wrword	#0, objptr
19fb0                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
19fb0     00 20 06 F6 | 	mov	local02, #0
19fb4     02 E4 05 F1 | 	add	objptr, #2
19fb8     97 6A 48 FB | 	callpa	#(@LR__2089-@LR__2085)>>2,fcache_load_ptr_
19fbc                 | LR__2085
19fbc     10 23 02 F6 | 	mov	local03, local02
19fc0     01 22 66 F0 | 	shl	local03, #1
19fc4     F2 22 02 F1 | 	add	local03, objptr
19fc8     10 25 02 F6 | 	mov	local04, local02
19fcc     04 24 66 F0 | 	shl	local04, #4
19fd0     10 25 02 F1 | 	add	local04, local02
19fd4     04 24 66 F0 | 	shl	local04, #4
19fd8     11 25 52 FC | 	wrword	local04, local03
19fdc     01 20 06 F1 | 	add	local02, #1
19fe0     F0 20 56 F2 | 	cmps	local02, #240 wc
19fe4     D4 FF 9F CD |  if_b	jmp	#LR__2085
19fe8     F0 20 06 F6 | 	mov	local02, #240
19fec                 | LR__2086
19fec     10 23 02 F6 | 	mov	local03, local02
19ff0     01 22 66 F0 | 	shl	local03, #1
19ff4     F2 22 02 F1 | 	add	local03, objptr
19ff8     FF 26 06 F6 | 	mov	local05, #255
19ffc     10 27 82 F1 | 	sub	local05, local02
1a000     0C 26 66 F0 | 	shl	local05, #12
1a004     11 27 52 FC | 	wrword	local05, local03
1a008     01 20 06 F1 | 	add	local02, #1
1a00c     00 21 16 F2 | 	cmp	local02, #256 wc
1a010     D8 FF 9F CD |  if_b	jmp	#LR__2086
1a014                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
1a014     00 20 06 F6 | 	mov	local02, #0
1a018     01 00 00 FF 
1a01c     00 E4 05 F1 | 	add	objptr, ##512
1a020                 | LR__2087
1a020     10 23 02 F6 | 	mov	local03, local02
1a024     01 22 66 F0 | 	shl	local03, #1
1a028     F2 22 02 F1 | 	add	local03, objptr
1a02c     10 25 02 F6 | 	mov	local04, local02
1a030     09 24 66 F0 | 	shl	local04, #9
1a034     11 25 52 FC | 	wrword	local04, local03
1a038     FF 22 06 F6 | 	mov	local03, #255
1a03c     10 23 82 F1 | 	sub	local03, local02
1a040     01 22 66 F0 | 	shl	local03, #1
1a044     F2 22 02 F1 | 	add	local03, objptr
1a048     10 25 02 F6 | 	mov	local04, local02
1a04c     09 24 66 F0 | 	shl	local04, #9
1a050     11 25 52 FC | 	wrword	local04, local03
1a054     01 20 06 F1 | 	add	local02, #1
1a058     80 20 56 F2 | 	cmps	local02, #128 wc
1a05c     C0 FF 9F CD |  if_b	jmp	#LR__2087
1a060                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
1a060     00 20 06 F6 | 	mov	local02, #0
1a064     01 00 00 FF 
1a068     00 E4 05 F1 | 	add	objptr, ##512
1a06c                 | LR__2088
1a06c     10 23 02 F6 | 	mov	local03, local02
1a070     01 22 66 F0 | 	shl	local03, #1
1a074     F2 22 02 F1 | 	add	local03, objptr
1a078     10 25 02 F6 | 	mov	local04, local02
1a07c     0D 24 66 F0 | 	shl	local04, #13
1a080     11 25 52 FC | 	wrword	local04, local03
1a084     01 20 06 F1 | 	add	local02, #1
1a088     08 20 56 F2 | 	cmps	local02, #8 wc
1a08c     DC FF 9F CD |  if_b	jmp	#LR__2088
1a090                 | LR__2089
1a090                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
1a090     08 20 06 F6 | 	mov	local02, #8
1a094     97 42 48 FB | 	callpa	#(@LR__2093-@LR__2090)>>2,fcache_load_ptr_
1a098                 | LR__2090
1a098     10 23 02 F6 | 	mov	local03, local02
1a09c     01 22 66 F0 | 	shl	local03, #1
1a0a0     F2 22 02 F1 | 	add	local03, objptr
1a0a4     10 1F 02 F6 | 	mov	local01, local02
1a0a8     08 1E 86 F1 | 	sub	local01, #8
1a0ac     0B 1E 66 F0 | 	shl	local01, #11
1a0b0     7F 00 00 FF 
1a0b4     00 25 06 F6 | 	mov	local04, ##65280
1a0b8     0F 25 82 F1 | 	sub	local04, local01
1a0bc     11 25 52 FC | 	wrword	local04, local03
1a0c0     01 20 06 F1 | 	add	local02, #1
1a0c4     18 20 16 F2 | 	cmp	local02, #24 wc
1a0c8     CC FF 9F CD |  if_b	jmp	#LR__2090
1a0cc                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
1a0cc     18 20 06 F6 | 	mov	local02, #24
1a0d0                 | LR__2091
1a0d0     10 23 02 F6 | 	mov	local03, local02
1a0d4     01 22 66 F0 | 	shl	local03, #1
1a0d8     F2 22 02 F1 | 	add	local03, objptr
1a0dc     40 00 80 FF 
1a0e0     11 01 58 FC | 	wrword	##32768, local03
1a0e4     01 20 06 F1 | 	add	local02, #1
1a0e8     81 20 16 F2 | 	cmp	local02, #129 wc
1a0ec     E0 FF 9F CD |  if_b	jmp	#LR__2091
1a0f0                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
1a0f0     81 20 06 F6 | 	mov	local02, #129
1a0f4                 | LR__2092
1a0f4     10 23 02 F6 | 	mov	local03, local02
1a0f8     01 22 66 F0 | 	shl	local03, #1
1a0fc     F2 22 02 F1 | 	add	local03, objptr
1a100     FF 26 06 F6 | 	mov	local05, #255
1a104     10 27 82 F1 | 	sub	local05, local02
1a108     08 26 66 F0 | 	shl	local05, #8
1a10c     11 27 52 FC | 	wrword	local05, local03
1a110     01 20 06 F1 | 	add	local02, #1
1a114     00 21 16 F2 | 	cmp	local02, #256 wc
1a118     D8 FF 9F CD |  if_b	jmp	#LR__2092
1a11c                 | LR__2093
1a11c     46 00 00 FF 
1a120     DA E4 05 F1 | 	add	objptr, ##36058
1a124     F2 00 59 FC | 	wrword	#128, objptr
1a128     79 00 00 FF 
1a12c     B2 E5 85 F1 | 	sub	objptr, ##62386
1a130                 | ' for i=0 to 7
1a130     00 20 06 F6 | 	mov	local02, #0
1a134     97 8E 48 FB | 	callpa	#(@LR__2095-@LR__2094)>>2,fcache_load_ptr_
1a138                 | LR__2094
1a138     10 23 02 F6 | 	mov	local03, local02
1a13c     01 22 66 F0 | 	shl	local03, #1
1a140     10 23 02 F1 | 	add	local03, local02
1a144     03 22 66 F0 | 	shl	local03, #3
1a148     34 00 00 FF 
1a14c     38 E5 05 F1 | 	add	objptr, ##26936
1a150     F2 22 02 F1 | 	add	local03, objptr
1a154     00 EE A1 FF 
1a158     11 01 68 FC | 	wrlong	##1138491392, local03
1a15c     10 23 02 F6 | 	mov	local03, local02
1a160     01 22 66 F0 | 	shl	local03, #1
1a164     10 23 02 F1 | 	add	local03, local02
1a168     03 22 66 F0 | 	shl	local03, #3
1a16c     F2 22 02 F1 | 	add	local03, objptr
1a170     04 22 06 F1 | 	add	local03, #4
1a174     11 21 42 FC | 	wrbyte	local02, local03
1a178     10 23 02 F6 | 	mov	local03, local02
1a17c     01 22 66 F0 | 	shl	local03, #1
1a180     10 23 02 F1 | 	add	local03, local02
1a184     03 22 66 F0 | 	shl	local03, #3
1a188     F2 22 02 F1 | 	add	local03, objptr
1a18c     05 22 06 F1 | 	add	local03, #5
1a190     11 21 42 FC | 	wrbyte	local02, local03
1a194     10 23 02 F6 | 	mov	local03, local02
1a198     01 22 66 F0 | 	shl	local03, #1
1a19c     10 23 02 F1 | 	add	local03, local02
1a1a0     03 22 66 F0 | 	shl	local03, #3
1a1a4     F2 22 02 F1 | 	add	local03, objptr
1a1a8     06 22 06 F1 | 	add	local03, #6
1a1ac     11 01 58 FC | 	wrword	#0, local03
1a1b0     10 23 02 F6 | 	mov	local03, local02
1a1b4     01 22 66 F0 | 	shl	local03, #1
1a1b8     10 23 02 F1 | 	add	local03, local02
1a1bc     03 22 66 F0 | 	shl	local03, #3
1a1c0     F2 22 02 F1 | 	add	local03, objptr
1a1c4     08 22 06 F1 | 	add	local03, #8
1a1c8     00 C0 9F FF 
1a1cc     11 01 68 FC | 	wrlong	##1065353216, local03
1a1d0     10 23 02 F6 | 	mov	local03, local02
1a1d4     01 22 66 F0 | 	shl	local03, #1
1a1d8     10 23 02 F1 | 	add	local03, local02
1a1dc     03 22 66 F0 | 	shl	local03, #3
1a1e0     F2 22 02 F1 | 	add	local03, objptr
1a1e4     0C 22 06 F1 | 	add	local03, #12
1a1e8     00 40 A0 FF 
1a1ec     11 01 68 FC | 	wrlong	##1082130432, local03
1a1f0     10 23 02 F6 | 	mov	local03, local02
1a1f4     01 22 66 F0 | 	shl	local03, #1
1a1f8     10 23 02 F1 | 	add	local03, local02
1a1fc     03 22 66 F0 | 	shl	local03, #3
1a200     F2 22 02 F1 | 	add	local03, objptr
1a204     10 22 06 F1 | 	add	local03, #16
1a208     11 01 68 FC | 	wrlong	#0, local03
1a20c     10 23 02 F6 | 	mov	local03, local02
1a210     01 22 66 F0 | 	shl	local03, #1
1a214     10 23 02 F1 | 	add	local03, local02
1a218     03 22 66 F0 | 	shl	local03, #3
1a21c     F2 22 02 F1 | 	add	local03, objptr
1a220     14 22 06 F1 | 	add	local03, #20
1a224     11 FF 59 FC | 	wrword	#255, local03
1a228     10 23 02 F6 | 	mov	local03, local02
1a22c     01 22 66 F0 | 	shl	local03, #1
1a230     45 00 00 FF 
1a234     6C E4 05 F1 | 	add	objptr, ##35436
1a238     F2 22 02 F1 | 	add	local03, objptr
1a23c     11 FF 59 FC | 	wrword	#255, local03
1a240     01 20 06 F1 | 	add	local02, #1
1a244     08 20 56 F2 | 	cmps	local02, #8 wc
1a248     79 00 00 FF 
1a24c     A4 E5 85 F1 | 	sub	objptr, ##62372
1a250     E4 FE 9F CD |  if_b	jmp	#LR__2094
1a254                 | LR__2095
1a254     00 6E 20 FF 
1a258     00 1E 06 F6 | 	mov	local01, ##1088159744
1a25c                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
1a25c     03 26 06 F6 | 	mov	local05, #3
1a260                 | LR__2096
1a260     0F 13 02 F6 | 	mov	arg01, local01
1a264     CE C3 1F FF 
1a268     7D 14 06 F6 | 	mov	arg02, ##1065852029
1a26c     28 74 B0 FD | 	call	#__system___float_mul
1a270     FD 1E 02 F6 | 	mov	local01, result1
1a274     FA 27 6E FB | 	djnz	local05, #LR__2096
1a278     00 20 06 F6 | 	mov	local02, #0
1a27c                 | LR__2097
1a27c     10 27 02 F6 | 	mov	local05, local02
1a280     02 26 66 F0 | 	shl	local05, #2
1a284     34 00 00 FF 
1a288     D8 E4 05 F1 | 	add	objptr, ##26840
1a28c     F2 26 02 F1 | 	add	local05, objptr
1a290     13 1F 62 FC | 	wrlong	local01, local05
1a294     0F 13 02 F6 | 	mov	arg01, local01
1a298     CE C3 1F FF 
1a29c     7D 14 06 F6 | 	mov	arg02, ##1065852029
1a2a0     34 00 00 FF 
1a2a4     D8 E4 85 F1 | 	sub	objptr, ##26840
1a2a8     EC 73 B0 FD | 	call	#__system___float_mul
1a2ac     FD 1E 02 F6 | 	mov	local01, result1
1a2b0     01 20 06 F1 | 	add	local02, #1
1a2b4     0C 20 56 F2 | 	cmps	local02, #12 wc
1a2b8     C0 FF 9F CD |  if_b	jmp	#LR__2097
1a2bc     79 00 00 FF 
1a2c0     B2 E5 05 F1 | 	add	objptr, ##62386
1a2c4     F2 00 59 FC | 	wrword	#128, objptr
1a2c8     02 E4 85 F1 | 	sub	objptr, #2
1a2cc     F2 00 59 FC | 	wrword	#128, objptr
1a2d0     79 00 00 FF 
1a2d4     B0 E5 85 F1 | 	sub	objptr, ##62384
1a2d8     A7 F0 03 F6 | 	mov	ptra, fp
1a2dc     B2 00 A0 FD | 	call	#popregs_
1a2e0                 | _init_audio_ret
1a2e0     2D 00 64 FD | 	ret
1a2e4                 | 
1a2e4                 | ' 
1a2e4                 | ' 
1a2e4                 | ' function getnoteval(token) as single
1a2e4                 | _getnoteval
1a2e4     02 4A 05 F6 | 	mov	COUNT_, #2
1a2e8     A8 00 A0 FD | 	call	#pushregs_
1a2ec     01 00 00 FF 
1a2f0     00 13 86 F1 | 	sub	arg01, ##768
1a2f4     09 15 52 F6 | 	abs	arg02, arg01 wc
1a2f8     0C 14 16 FD | 	qdiv	arg02, #12
1a2fc     34 00 00 FF 
1a300     D8 E4 05 F1 | 	add	objptr, ##26840
1a304     19 14 62 FD | 	getqy	arg02
1a308     0A 15 82 F6 | 	negc	arg02, arg02
1a30c     02 14 66 F0 | 	shl	arg02, #2
1a310     F2 14 02 F1 | 	add	arg02, objptr
1a314     0A 1F 02 FB | 	rdlong	local01, arg02
1a318     09 15 52 F6 | 	abs	arg02, arg01 wc
1a31c     0C 14 16 FD | 	qdiv	arg02, #12
1a320     34 00 00 FF 
1a324     D8 E4 85 F1 | 	sub	objptr, ##26840
1a328     01 12 06 F6 | 	mov	arg01, #1
1a32c                 | ' noteexp=1+(note/12) 
1a32c                 | ' return (2.0^noteexp)*notebase
1a32c     18 14 62 FD | 	getqx	arg02
1a330     0A 13 82 F3 | 	sumc	arg01, arg02
1a334     09 13 52 F6 | 	abs	arg01, arg01 wc
1a338     1F 20 C6 C9 |  if_b	decod	local02, #31
1a33c     00 20 06 36 |  if_ae	mov	local02, #0
1a340     50 6F B0 FD | 	call	#__system___float_fromuns
1a344     10 FB 61 F5 | 	xor	result1, local02
1a348     FD 14 02 F6 | 	mov	arg02, result1
1a34c     1E 12 C6 F9 | 	decod	arg01, #30
1a350     28 82 B0 FD | 	call	#__system____builtin_powf
1a354     FD 12 02 F6 | 	mov	arg01, result1
1a358     0F 15 02 F6 | 	mov	arg02, local01
1a35c     38 73 B0 FD | 	call	#__system___float_mul
1a360     A7 F0 03 F6 | 	mov	ptra, fp
1a364     B2 00 A0 FD | 	call	#popregs_
1a368                 | _getnoteval_ret
1a368     2D 00 64 FD | 	ret
1a36c                 | 
1a36c                 | ' 
1a36c                 | ' 
1a36c                 | ' 
1a36c                 | ' sub init_error_strings
1a36c                 | _init_error_strings
1a36c     74 01 00 FF 
1a370     D9 00 06 F6 | 	mov	_var01, ##@LR__5198
1a374     65 00 00 FF 
1a378     7C E4 05 F1 | 	add	objptr, ##51836
1a37c     F2 00 62 FC | 	wrlong	_var01, objptr
1a380     74 01 00 FF 
1a384     DA 00 06 F6 | 	mov	_var01, ##@LR__5199
1a388     04 E4 05 F1 | 	add	objptr, #4
1a38c     F2 00 62 FC | 	wrlong	_var01, objptr
1a390     74 01 00 FF 
1a394     FF 00 06 F6 | 	mov	_var01, ##@LR__5200
1a398     04 E4 05 F1 | 	add	objptr, #4
1a39c     F2 00 62 FC | 	wrlong	_var01, objptr
1a3a0     74 01 00 FF 
1a3a4     20 01 06 F6 | 	mov	_var01, ##@LR__5201
1a3a8     04 E4 05 F1 | 	add	objptr, #4
1a3ac     F2 00 62 FC | 	wrlong	_var01, objptr
1a3b0     74 01 00 FF 
1a3b4     3A 01 06 F6 | 	mov	_var01, ##@LR__5202
1a3b8     04 E4 05 F1 | 	add	objptr, #4
1a3bc     F2 00 62 FC | 	wrlong	_var01, objptr
1a3c0     74 01 00 FF 
1a3c4     56 01 06 F6 | 	mov	_var01, ##@LR__5203
1a3c8     04 E4 05 F1 | 	add	objptr, #4
1a3cc     F2 00 62 FC | 	wrlong	_var01, objptr
1a3d0     74 01 00 FF 
1a3d4     78 01 06 F6 | 	mov	_var01, ##@LR__5204
1a3d8     04 E4 05 F1 | 	add	objptr, #4
1a3dc     F2 00 62 FC | 	wrlong	_var01, objptr
1a3e0     74 01 00 FF 
1a3e4     A6 01 06 F6 | 	mov	_var01, ##@LR__5205
1a3e8     04 E4 05 F1 | 	add	objptr, #4
1a3ec     F2 00 62 FC | 	wrlong	_var01, objptr
1a3f0     74 01 00 FF 
1a3f4     D1 01 06 F6 | 	mov	_var01, ##@LR__5206
1a3f8     04 E4 05 F1 | 	add	objptr, #4
1a3fc     F2 00 62 FC | 	wrlong	_var01, objptr
1a400     74 01 00 FF 
1a404     EA 01 06 F6 | 	mov	_var01, ##@LR__5207
1a408     04 E4 05 F1 | 	add	objptr, #4
1a40c     F2 00 62 FC | 	wrlong	_var01, objptr
1a410     75 01 00 FF 
1a414     0B 00 06 F6 | 	mov	_var01, ##@LR__5208
1a418     04 E4 05 F1 | 	add	objptr, #4
1a41c     F2 00 62 FC | 	wrlong	_var01, objptr
1a420     75 01 00 FF 
1a424     22 00 06 F6 | 	mov	_var01, ##@LR__5209
1a428     04 E4 05 F1 | 	add	objptr, #4
1a42c     F2 00 62 FC | 	wrlong	_var01, objptr
1a430     75 01 00 FF 
1a434     40 00 06 F6 | 	mov	_var01, ##@LR__5210
1a438     04 E4 05 F1 | 	add	objptr, #4
1a43c     F2 00 62 FC | 	wrlong	_var01, objptr
1a440     75 01 00 FF 
1a444     64 00 06 F6 | 	mov	_var01, ##@LR__5211
1a448     04 E4 05 F1 | 	add	objptr, #4
1a44c     F2 00 62 FC | 	wrlong	_var01, objptr
1a450     75 01 00 FF 
1a454     8B 00 06 F6 | 	mov	_var01, ##@LR__5212
1a458     04 E4 05 F1 | 	add	objptr, #4
1a45c     F2 00 62 FC | 	wrlong	_var01, objptr
1a460     75 01 00 FF 
1a464     A7 00 06 F6 | 	mov	_var01, ##@LR__5213
1a468     04 E4 05 F1 | 	add	objptr, #4
1a46c     F2 00 62 FC | 	wrlong	_var01, objptr
1a470     75 01 00 FF 
1a474     B8 00 06 F6 | 	mov	_var01, ##@LR__5214
1a478     04 E4 05 F1 | 	add	objptr, #4
1a47c     F2 00 62 FC | 	wrlong	_var01, objptr
1a480     75 01 00 FF 
1a484     C8 00 06 F6 | 	mov	_var01, ##@LR__5215
1a488     04 E4 05 F1 | 	add	objptr, #4
1a48c     F2 00 62 FC | 	wrlong	_var01, objptr
1a490     75 01 00 FF 
1a494     E3 00 06 F6 | 	mov	_var01, ##@LR__5216
1a498     04 E4 05 F1 | 	add	objptr, #4
1a49c     F2 00 62 FC | 	wrlong	_var01, objptr
1a4a0     75 01 00 FF 
1a4a4     F5 00 06 F6 | 	mov	_var01, ##@LR__5217
1a4a8     04 E4 05 F1 | 	add	objptr, #4
1a4ac     F2 00 62 FC | 	wrlong	_var01, objptr
1a4b0     75 01 00 FF 
1a4b4     0D 01 06 F6 | 	mov	_var01, ##@LR__5218
1a4b8     04 E4 05 F1 | 	add	objptr, #4
1a4bc     F2 00 62 FC | 	wrlong	_var01, objptr
1a4c0     75 01 00 FF 
1a4c4     21 01 06 F6 | 	mov	_var01, ##@LR__5219
1a4c8     04 E4 05 F1 | 	add	objptr, #4
1a4cc     F2 00 62 FC | 	wrlong	_var01, objptr
1a4d0     75 01 00 FF 
1a4d4     31 01 06 F6 | 	mov	_var01, ##@LR__5220
1a4d8     04 E4 05 F1 | 	add	objptr, #4
1a4dc     F2 00 62 FC | 	wrlong	_var01, objptr
1a4e0     75 01 00 FF 
1a4e4     4E 01 06 F6 | 	mov	_var01, ##@LR__5221
1a4e8     04 E4 05 F1 | 	add	objptr, #4
1a4ec     F2 00 62 FC | 	wrlong	_var01, objptr
1a4f0     75 01 00 FF 
1a4f4     5F 01 06 F6 | 	mov	_var01, ##@LR__5222
1a4f8     04 E4 05 F1 | 	add	objptr, #4
1a4fc     F2 00 62 FC | 	wrlong	_var01, objptr
1a500     75 01 00 FF 
1a504     70 01 06 F6 | 	mov	_var01, ##@LR__5223
1a508     04 E4 05 F1 | 	add	objptr, #4
1a50c     F2 00 62 FC | 	wrlong	_var01, objptr
1a510     75 01 00 FF 
1a514     9B 01 06 F6 | 	mov	_var01, ##@LR__5224
1a518     04 E4 05 F1 | 	add	objptr, #4
1a51c     F2 00 62 FC | 	wrlong	_var01, objptr
1a520     75 01 00 FF 
1a524     B7 01 06 F6 | 	mov	_var01, ##@LR__5225
1a528     04 E4 05 F1 | 	add	objptr, #4
1a52c     F2 00 62 FC | 	wrlong	_var01, objptr
1a530     75 01 00 FF 
1a534     CD 01 06 F6 | 	mov	_var01, ##@LR__5226
1a538     04 E4 05 F1 | 	add	objptr, #4
1a53c     F2 00 62 FC | 	wrlong	_var01, objptr
1a540     75 01 00 FF 
1a544     DA 01 06 F6 | 	mov	_var01, ##@LR__5227
1a548     04 E4 05 F1 | 	add	objptr, #4
1a54c     F2 00 62 FC | 	wrlong	_var01, objptr
1a550     75 01 00 FF 
1a554     EC 01 06 F6 | 	mov	_var01, ##@LR__5228
1a558     04 E4 05 F1 | 	add	objptr, #4
1a55c     F2 00 62 FC | 	wrlong	_var01, objptr
1a560     75 01 00 FF 
1a564     FD 01 06 F6 | 	mov	_var01, ##@LR__5229
1a568     04 E4 05 F1 | 	add	objptr, #4
1a56c     F2 00 62 FC | 	wrlong	_var01, objptr
1a570     76 01 00 FF 
1a574     19 00 06 F6 | 	mov	_var01, ##@LR__5230
1a578     04 E4 05 F1 | 	add	objptr, #4
1a57c     F2 00 62 FC | 	wrlong	_var01, objptr
1a580     76 01 00 FF 
1a584     2A 00 06 F6 | 	mov	_var01, ##@LR__5231
1a588     04 E4 05 F1 | 	add	objptr, #4
1a58c     F2 00 62 FC | 	wrlong	_var01, objptr
1a590     76 01 00 FF 
1a594     39 00 06 F6 | 	mov	_var01, ##@LR__5232
1a598     04 E4 05 F1 | 	add	objptr, #4
1a59c     F2 00 62 FC | 	wrlong	_var01, objptr
1a5a0     76 01 00 FF 
1a5a4     54 00 06 F6 | 	mov	_var01, ##@LR__5233
1a5a8     04 E4 05 F1 | 	add	objptr, #4
1a5ac     F2 00 62 FC | 	wrlong	_var01, objptr
1a5b0     76 01 00 FF 
1a5b4     88 00 06 F6 | 	mov	_var01, ##@LR__5234
1a5b8     04 E4 05 F1 | 	add	objptr, #4
1a5bc     F2 00 62 FC | 	wrlong	_var01, objptr
1a5c0     76 01 00 FF 
1a5c4     A1 00 06 F6 | 	mov	_var01, ##@LR__5235
1a5c8     04 E4 05 F1 | 	add	objptr, #4
1a5cc     F2 00 62 FC | 	wrlong	_var01, objptr
1a5d0     76 01 00 FF 
1a5d4     BD 00 06 F6 | 	mov	_var01, ##@LR__5236
1a5d8     04 E4 05 F1 | 	add	objptr, #4
1a5dc     F2 00 62 FC | 	wrlong	_var01, objptr
1a5e0     76 01 00 FF 
1a5e4     DB 00 06 F6 | 	mov	_var01, ##@LR__5237
1a5e8     04 E4 05 F1 | 	add	objptr, #4
1a5ec     F2 00 62 FC | 	wrlong	_var01, objptr
1a5f0     76 01 00 FF 
1a5f4     F4 00 06 F6 | 	mov	_var01, ##@LR__5238
1a5f8     04 E4 05 F1 | 	add	objptr, #4
1a5fc     F2 00 62 FC | 	wrlong	_var01, objptr
1a600     76 01 00 FF 
1a604     13 01 06 F6 | 	mov	_var01, ##@LR__5239
1a608     04 E4 05 F1 | 	add	objptr, #4
1a60c     F2 00 62 FC | 	wrlong	_var01, objptr
1a610     76 01 00 FF 
1a614     22 01 06 F6 | 	mov	_var01, ##@LR__5240
1a618     04 E4 05 F1 | 	add	objptr, #4
1a61c     F2 00 62 FC | 	wrlong	_var01, objptr
1a620     76 01 00 FF 
1a624     50 01 06 F6 | 	mov	_var01, ##@LR__5241
1a628     04 E4 05 F1 | 	add	objptr, #4
1a62c     F2 00 62 FC | 	wrlong	_var01, objptr
1a630     76 01 00 FF 
1a634     5E 01 06 F6 | 	mov	_var01, ##@LR__5242
1a638     04 E4 05 F1 | 	add	objptr, #4
1a63c     F2 00 62 FC | 	wrlong	_var01, objptr
1a640     76 01 00 FF 
1a644     73 01 06 F6 | 	mov	_var01, ##@LR__5243
1a648     04 E4 05 F1 | 	add	objptr, #4
1a64c     F2 00 62 FC | 	wrlong	_var01, objptr
1a650     76 01 00 FF 
1a654     97 01 06 F6 | 	mov	_var01, ##@LR__5244
1a658     04 E4 05 F1 | 	add	objptr, #4
1a65c     F2 00 62 FC | 	wrlong	_var01, objptr
1a660     76 01 00 FF 
1a664     AE 01 06 F6 | 	mov	_var01, ##@LR__5245
1a668     04 E4 05 F1 | 	add	objptr, #4
1a66c     F2 00 62 FC | 	wrlong	_var01, objptr
1a670     76 01 00 FF 
1a674     C1 01 06 F6 | 	mov	_var01, ##@LR__5246
1a678     04 E4 05 F1 | 	add	objptr, #4
1a67c     F2 00 62 FC | 	wrlong	_var01, objptr
1a680     76 01 00 FF 
1a684     D8 01 06 F6 | 	mov	_var01, ##@LR__5247
1a688     04 E4 05 F1 | 	add	objptr, #4
1a68c     F2 00 62 FC | 	wrlong	_var01, objptr
1a690     65 00 00 FF 
1a694     40 E5 85 F1 | 	sub	objptr, ##52032
1a698                 | _init_error_strings_ret
1a698     2D 00 64 FD | 	ret
1a69c                 | 
1a69c                 | '         
1a69c                 | ' sub printerror(err as integer)
1a69c                 | _printerror
1a69c     01 4A 05 F6 | 	mov	COUNT_, #1
1a6a0     A8 00 A0 FD | 	call	#pushregs_
1a6a4     09 1F 02 F6 | 	mov	local01, arg01
1a6a8     76 01 00 FF 
1a6ac     F1 13 06 F6 | 	mov	arg01, ##@LR__5248
1a6b0     98 31 B0 FD | 	call	#_hg010b_spin2_write
1a6b4     0F 13 02 F6 | 	mov	arg01, local01
1a6b8     00 35 B0 FD | 	call	#_hg010b_spin2_inttostr
1a6bc     FD 12 02 F6 | 	mov	arg01, result1
1a6c0     88 31 B0 FD | 	call	#_hg010b_spin2_write
1a6c4     76 01 00 FF 
1a6c8     F8 13 06 F6 | 	mov	arg01, ##@LR__5249
1a6cc     7C 31 B0 FD | 	call	#_hg010b_spin2_write
1a6d0     02 1E 66 F0 | 	shl	local01, #2
1a6d4     65 00 00 FF 
1a6d8     7C E4 05 F1 | 	add	objptr, ##51836
1a6dc     F2 1E 02 F1 | 	add	local01, objptr
1a6e0     0F 13 02 FB | 	rdlong	arg01, local01
1a6e4     65 00 00 FF 
1a6e8     7C E4 85 F1 | 	sub	objptr, ##51836
1a6ec                 | ' 
1a6ec                 | ' write(text)
1a6ec     5C 31 B0 FD | 	call	#_hg010b_spin2_write
1a6f0                 | ' crlf
1a6f0     24 34 B0 FD | 	call	#_hg010b_spin2_crlf
1a6f4     A7 F0 03 F6 | 	mov	ptra, fp
1a6f8     B2 00 A0 FD | 	call	#popregs_
1a6fc                 | _printerror_ret
1a6fc     2D 00 64 FD | 	ret
1a700                 | 
1a700                 | ' 
1a700                 | ' '' ------------------------------- Hardware start/stop/initialization 
1a700                 | ' 
1a700                 | ' sub startpsram
1a700                 | _startpsram
1a700     00 12 06 F6 | 	mov	arg01, #0
1a704     0A 14 C6 F9 | 	decod	arg02, #10
1a708     0B 16 06 F6 | 	mov	arg03, #11
1a70c     07 18 06 F6 | 	mov	arg04, #7
1a710     0B 00 00 FF 
1a714     CC E4 05 F1 | 	add	objptr, ##5836
1a718     AC 35 B0 FD | 	call	#_psram_spin2_startx
1a71c     4B 00 00 FF 
1a720     3C E5 05 F1 | 	add	objptr, ##38716
1a724     F2 FA 61 FC | 	wrlong	result1, objptr
1a728                 | '     return $7FF00 + cog*12
1a728     0C E4 05 F1 | 	add	objptr, #12
1a72c     FF 03 80 FF 
1a730     F2 00 6A FC | 	wrlong	##524032, objptr
1a734     57 00 00 FF 
1a738     14 E4 85 F1 | 	sub	objptr, ##44564
1a73c                 | _startpsram_ret
1a73c     2D 00 64 FD | 	ret
1a740                 | 
1a740                 | ' 
1a740                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
1a740                 | _startvideo
1a740     01 4A 05 F6 | 	mov	COUNT_, #1
1a744     A8 00 A0 FD | 	call	#pushregs_
1a748     57 00 00 FF 
1a74c     14 E4 05 F1 | 	add	objptr, ##44564
1a750     F2 18 02 FB | 	rdlong	arg04, objptr
1a754     57 00 00 FF 
1a758     14 E4 85 F1 | 	sub	objptr, ##44564
1a75c     0A 13 02 F6 | 	mov	arg01, arg02
1a760     0C 15 02 F6 | 	mov	arg02, arg04
1a764     DC 18 B0 FD | 	call	#_hg010b_spin2_start
1a768     57 00 00 FF 
1a76c     00 E4 05 F1 | 	add	objptr, ##44544
1a770     F2 FA 61 FC | 	wrlong	result1, objptr
1a774                 | ' 
1a774                 | ' videocog=v.start(pin,mbox)
1a774                 | ' 
1a774                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
1a774     00 1E 06 F6 | 	mov	local01, #0
1a778     4B 00 00 FF 
1a77c     34 E5 85 F1 | 	sub	objptr, ##38708
1a780                 | LR__2100
1a780     0F 13 02 F6 | 	mov	arg01, local01
1a784     00 28 00 FF 
1a788     00 14 06 F6 | 	mov	arg02, ##5242880
1a78c     90 39 B0 FD | 	call	#_psram_spin2_setQos
1a790     01 1E 06 F1 | 	add	local01, #1
1a794     08 1E 56 F2 | 	cmps	local01, #8 wc
1a798     E4 FF 9F CD |  if_b	jmp	#LR__2100
1a79c     4B 00 00 FF 
1a7a0     34 E5 05 F1 | 	add	objptr, ##38708
1a7a4     F2 12 02 FB | 	rdlong	arg01, objptr
1a7a8     7A 00 02 FF 
1a7ac     00 14 06 F6 | 	mov	arg02, ##67171328
1a7b0     4B 00 00 FF 
1a7b4     34 E5 85 F1 | 	sub	objptr, ##38708
1a7b8     64 39 B0 FD | 	call	#_psram_spin2_setQos
1a7bc     0B 00 00 FF 
1a7c0     CC E4 85 F1 | 	sub	objptr, ##5836
1a7c4                 | ' psram.setQoS(videocog, $0400f400) 
1a7c4                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
1a7c4     F2 14 02 F6 | 	mov	arg02, objptr
1a7c8     00 18 04 FF 
1a7cc     00 14 46 F5 | 	or	arg02, ##137363456
1a7d0     00 16 06 F6 | 	mov	arg03, #0
1a7d4     00 18 06 F6 | 	mov	arg04, #0
1a7d8     00 12 06 F6 | 	mov	arg01, #0
1a7dc     E0 4D B0 FD | 	call	#__system___basic_open
1a7e0                 | ' return videocog
1a7e0     57 00 00 FF 
1a7e4     00 E4 05 F1 | 	add	objptr, ##44544
1a7e8     F2 FA 01 FB | 	rdlong	result1, objptr
1a7ec     57 00 00 FF 
1a7f0     00 E4 85 F1 | 	sub	objptr, ##44544
1a7f4     A7 F0 03 F6 | 	mov	ptra, fp
1a7f8     B2 00 A0 FD | 	call	#popregs_
1a7fc                 | _startvideo_ret
1a7fc     2D 00 64 FD | 	ret
1a800                 | 
1a800                 | ' 
1a800                 | ' 
1a800                 | ' 
1a800                 | ' 
1a800                 | ' '' ------------------------------- Convenient psram peek/poke
1a800                 | ' 
1a800                 | ' sub pslpoke(addr as ulong,value as ulong)
1a800                 | _pslpoke
1a800     00 4A 05 F6 | 	mov	COUNT_, #0
1a804     A8 00 A0 FD | 	call	#pushregs_
1a808     08 F0 07 F1 | 	add	ptra, #8
1a80c     A7 12 62 FC | 	wrlong	arg01, fp
1a810     04 4E 05 F1 | 	add	fp, #4
1a814     A7 14 62 FC | 	wrlong	arg02, fp
1a818     A7 12 02 F6 | 	mov	arg01, fp
1a81c     04 4E 85 F1 | 	sub	fp, #4
1a820     A7 14 02 FB | 	rdlong	arg02, fp
1a824     04 16 06 F6 | 	mov	arg03, #4
1a828     0B 00 00 FF 
1a82c     CC E4 05 F1 | 	add	objptr, ##5836
1a830     5C 37 B0 FD | 	call	#_psram_spin2_write
1a834     0B 00 00 FF 
1a838     CC E4 85 F1 | 	sub	objptr, ##5836
1a83c     A7 F0 03 F6 | 	mov	ptra, fp
1a840     B2 00 A0 FD | 	call	#popregs_
1a844                 | _pslpoke_ret
1a844     2D 00 64 FD | 	ret
1a848                 | 
1a848                 | ' 
1a848                 | ' sub psdpoke(addr as ulong,value as ulong)
1a848                 | _psdpoke
1a848     00 4A 05 F6 | 	mov	COUNT_, #0
1a84c     A8 00 A0 FD | 	call	#pushregs_
1a850     08 F0 07 F1 | 	add	ptra, #8
1a854     A7 12 62 FC | 	wrlong	arg01, fp
1a858     04 4E 05 F1 | 	add	fp, #4
1a85c     A7 14 62 FC | 	wrlong	arg02, fp
1a860     A7 12 02 F6 | 	mov	arg01, fp
1a864     04 4E 85 F1 | 	sub	fp, #4
1a868     A7 14 02 FB | 	rdlong	arg02, fp
1a86c     02 16 06 F6 | 	mov	arg03, #2
1a870     0B 00 00 FF 
1a874     CC E4 05 F1 | 	add	objptr, ##5836
1a878     14 37 B0 FD | 	call	#_psram_spin2_write
1a87c     0B 00 00 FF 
1a880     CC E4 85 F1 | 	sub	objptr, ##5836
1a884     A7 F0 03 F6 | 	mov	ptra, fp
1a888     B2 00 A0 FD | 	call	#popregs_
1a88c                 | _psdpoke_ret
1a88c     2D 00 64 FD | 	ret
1a890                 | 
1a890                 | ' 
1a890                 | ' sub pspoke(addr as ulong,value as ulong)
1a890                 | _pspoke
1a890     00 4A 05 F6 | 	mov	COUNT_, #0
1a894     A8 00 A0 FD | 	call	#pushregs_
1a898     08 F0 07 F1 | 	add	ptra, #8
1a89c     A7 12 62 FC | 	wrlong	arg01, fp
1a8a0     04 4E 05 F1 | 	add	fp, #4
1a8a4     A7 14 62 FC | 	wrlong	arg02, fp
1a8a8     A7 12 02 F6 | 	mov	arg01, fp
1a8ac     04 4E 85 F1 | 	sub	fp, #4
1a8b0     A7 14 02 FB | 	rdlong	arg02, fp
1a8b4     01 16 06 F6 | 	mov	arg03, #1
1a8b8     0B 00 00 FF 
1a8bc     CC E4 05 F1 | 	add	objptr, ##5836
1a8c0     CC 36 B0 FD | 	call	#_psram_spin2_write
1a8c4     0B 00 00 FF 
1a8c8     CC E4 85 F1 | 	sub	objptr, ##5836
1a8cc     A7 F0 03 F6 | 	mov	ptra, fp
1a8d0     B2 00 A0 FD | 	call	#popregs_
1a8d4                 | _pspoke_ret
1a8d4     2D 00 64 FD | 	ret
1a8d8                 | 
1a8d8                 | ' 
1a8d8                 | ' function pspeek(adr as ulong) as ubyte
1a8d8                 | _pspeek
1a8d8     00 4A 05 F6 | 	mov	COUNT_, #0
1a8dc     A8 00 A0 FD | 	call	#pushregs_
1a8e0     0C F0 07 F1 | 	add	ptra, #12
1a8e4     04 4E 05 F1 | 	add	fp, #4
1a8e8     A7 12 62 FC | 	wrlong	arg01, fp
1a8ec     04 4E 05 F1 | 	add	fp, #4
1a8f0     A7 12 02 F6 | 	mov	arg01, fp
1a8f4     04 4E 85 F1 | 	sub	fp, #4
1a8f8     A7 14 02 FB | 	rdlong	arg02, fp
1a8fc     04 4E 85 F1 | 	sub	fp, #4
1a900     01 16 06 F6 | 	mov	arg03, #1
1a904     0B 00 00 FF 
1a908     CC E4 05 F1 | 	add	objptr, ##5836
1a90c     E4 35 B0 FD | 	call	#_psram_spin2_read1
1a910     0B 00 00 FF 
1a914     CC E4 85 F1 | 	sub	objptr, ##5836
1a918                 | ' psram.read1(varptr(res),adr,1)
1a918                 | ' return res
1a918     08 4E 05 F1 | 	add	fp, #8
1a91c     A7 FA C1 FA | 	rdbyte	result1, fp
1a920     08 4E 85 F1 | 	sub	fp, #8
1a924     A7 F0 03 F6 | 	mov	ptra, fp
1a928     B2 00 A0 FD | 	call	#popregs_
1a92c                 | _pspeek_ret
1a92c     2D 00 64 FD | 	ret
1a930                 | 
1a930                 | ' 
1a930                 | ' function pslpeek(adr as ulong) as ulong
1a930                 | _pslpeek
1a930     00 4A 05 F6 | 	mov	COUNT_, #0
1a934     A8 00 A0 FD | 	call	#pushregs_
1a938     0C F0 07 F1 | 	add	ptra, #12
1a93c     04 4E 05 F1 | 	add	fp, #4
1a940     A7 12 62 FC | 	wrlong	arg01, fp
1a944     04 4E 05 F1 | 	add	fp, #4
1a948     A7 12 02 F6 | 	mov	arg01, fp
1a94c     04 4E 85 F1 | 	sub	fp, #4
1a950     A7 14 02 FB | 	rdlong	arg02, fp
1a954     04 4E 85 F1 | 	sub	fp, #4
1a958     04 16 06 F6 | 	mov	arg03, #4
1a95c     0B 00 00 FF 
1a960     CC E4 05 F1 | 	add	objptr, ##5836
1a964     8C 35 B0 FD | 	call	#_psram_spin2_read1
1a968     0B 00 00 FF 
1a96c     CC E4 85 F1 | 	sub	objptr, ##5836
1a970                 | ' psram.read1(varptr(res),adr,4)
1a970                 | ' return res
1a970     08 4E 05 F1 | 	add	fp, #8
1a974     A7 FA 01 FB | 	rdlong	result1, fp
1a978     08 4E 85 F1 | 	sub	fp, #8
1a97c     A7 F0 03 F6 | 	mov	ptra, fp
1a980     B2 00 A0 FD | 	call	#popregs_
1a984                 | _pslpeek_ret
1a984     2D 00 64 FD | 	ret
1a988                 | 
1a988                 | ' 
1a988                 | ' function psdpeek(adr as ulong) as ulong
1a988                 | _psdpeek
1a988     00 4A 05 F6 | 	mov	COUNT_, #0
1a98c     A8 00 A0 FD | 	call	#pushregs_
1a990     0C F0 07 F1 | 	add	ptra, #12
1a994     04 4E 05 F1 | 	add	fp, #4
1a998     A7 12 62 FC | 	wrlong	arg01, fp
1a99c     04 4E 05 F1 | 	add	fp, #4
1a9a0     A7 12 02 F6 | 	mov	arg01, fp
1a9a4     04 4E 85 F1 | 	sub	fp, #4
1a9a8     A7 14 02 FB | 	rdlong	arg02, fp
1a9ac     04 4E 85 F1 | 	sub	fp, #4
1a9b0     02 16 06 F6 | 	mov	arg03, #2
1a9b4     0B 00 00 FF 
1a9b8     CC E4 05 F1 | 	add	objptr, ##5836
1a9bc     34 35 B0 FD | 	call	#_psram_spin2_read1
1a9c0     0B 00 00 FF 
1a9c4     CC E4 85 F1 | 	sub	objptr, ##5836
1a9c8                 | ' psram.read1(varptr(res),adr,2)
1a9c8                 | ' return res
1a9c8     08 4E 05 F1 | 	add	fp, #8
1a9cc     A7 FA E1 FA | 	rdword	result1, fp
1a9d0     08 4E 85 F1 | 	sub	fp, #8
1a9d4     A7 F0 03 F6 | 	mov	ptra, fp
1a9d8     B2 00 A0 FD | 	call	#popregs_
1a9dc                 | _psdpeek_ret
1a9dc     2D 00 64 FD | 	ret
1a9e0                 | 
1a9e0                 | ' 
1a9e0                 | ' '' ------------------------------- USB keyboard scan to char translator
1a9e0                 | ' 
1a9e0                 | ' function scantochar(key)
1a9e0                 | _scantochar
1a9e0                 | ' 
1a9e0                 | ' select case (key shr 8) and 255
1a9e0     09 01 02 F6 | 	mov	_var01, arg01
1a9e4     08 00 C6 F0 | 	sar	_var01, #8
1a9e8     FF 00 0E F5 | 	and	_var01, #255 wz
1a9ec     24 00 90 AD |  if_e	jmp	#LR__2110
1a9f0     02 00 0E F2 | 	cmp	_var01, #2 wz
1a9f4     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
1a9f8     30 00 90 AD |  if_e	jmp	#LR__2111
1a9fc     40 00 0E F2 | 	cmp	_var01, #64 wz
1aa00     44 00 90 AD |  if_e	jmp	#LR__2112
1aa04     42 00 0E F2 | 	cmp	_var01, #66 wz
1aa08     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
1aa0c     70 00 90 5D |  if_ne	jmp	#LR__2114
1aa10     50 00 90 FD | 	jmp	#LR__2113
1aa14                 | LR__2110
1aa14     09 FB 01 F6 | 	mov	result1, arg01
1aa18     7F FA 05 F5 | 	and	result1, #127
1aa1c     02 FA 65 F0 | 	shl	result1, #2
1aa20     F5 FA 01 F1 | 	add	result1, ptr__dat__
1aa24     FD FA C1 FA | 	rdbyte	result1, result1
1aa28     54 00 90 FD | 	jmp	#_scantochar_ret
1aa2c                 | LR__2111
1aa2c     09 FB 01 F6 | 	mov	result1, arg01
1aa30     7F FA 05 F5 | 	and	result1, #127
1aa34     02 FA 65 F0 | 	shl	result1, #2
1aa38     01 FA 05 F1 | 	add	result1, #1
1aa3c     F5 FA 01 F1 | 	add	result1, ptr__dat__
1aa40     FD FA C1 FA | 	rdbyte	result1, result1
1aa44     38 00 90 FD | 	jmp	#_scantochar_ret
1aa48                 | LR__2112
1aa48     09 FB 01 F6 | 	mov	result1, arg01
1aa4c     7F FA 05 F5 | 	and	result1, #127
1aa50     02 FA 65 F0 | 	shl	result1, #2
1aa54     02 FA 05 F1 | 	add	result1, #2
1aa58     F5 FA 01 F1 | 	add	result1, ptr__dat__
1aa5c     FD FA C1 FA | 	rdbyte	result1, result1
1aa60     1C 00 90 FD | 	jmp	#_scantochar_ret
1aa64                 | LR__2113
1aa64     09 FB 01 F6 | 	mov	result1, arg01
1aa68     7F FA 05 F5 | 	and	result1, #127
1aa6c     02 FA 65 F0 | 	shl	result1, #2
1aa70     03 FA 05 F1 | 	add	result1, #3
1aa74     F5 FA 01 F1 | 	add	result1, ptr__dat__
1aa78     FD FA C1 FA | 	rdbyte	result1, result1
1aa7c     00 00 90 FD | 	jmp	#_scantochar_ret
1aa80                 | LR__2114
1aa80                 | _scantochar_ret
1aa80     2D 00 64 FD | 	ret
1aa84                 | 
1aa84                 | _program
1aa84     13 4A 05 F6 | 	mov	COUNT_, #19
1aa88     A8 00 A0 FD | 	call	#pushregs_
1aa8c     70 FC BF FD | 	call	#_startpsram
1aa90     40 12 06 F6 | 	mov	arg01, #64
1aa94     00 14 06 F6 | 	mov	arg02, #0
1aa98     00 16 06 F6 | 	mov	arg03, #0
1aa9c     A0 FC BF FD | 	call	#_startvideo
1aaa0     00 12 06 F6 | 	mov	arg01, #0
1aaa4     00 14 06 F6 | 	mov	arg02, #0
1aaa8     00 16 06 F6 | 	mov	arg03, #0
1aaac     0B 00 00 FF 
1aab0     CC E4 05 F1 | 	add	objptr, ##5836
1aab4     18 3A B0 FD | 	call	#_audio096_spin2_start
1aab8     FE 1C 02 F6 | 	mov	arg06, result2
1aabc     4B 00 00 FF 
1aac0     30 E5 05 F1 | 	add	objptr, ##38704
1aac4     F2 FA 61 FC | 	wrlong	result1, objptr
1aac8     14 E4 05 F1 | 	add	objptr, #20
1aacc     F2 1C 62 FC | 	wrlong	arg06, objptr
1aad0     57 00 00 FF 
1aad4     10 E4 85 F1 | 	sub	objptr, ##44560
1aad8     32 12 06 F6 | 	mov	arg01, #50
1aadc     2C 43 B0 FD | 	call	#__system___waitms
1aae0     57 00 00 FF 
1aae4     10 E4 05 F1 | 	add	objptr, ##44560
1aae8     F2 12 02 FB | 	rdlong	arg01, objptr
1aaec     57 00 00 FF 
1aaf0     10 E4 85 F1 | 	sub	objptr, ##44560
1aaf4     14 12 06 F1 | 	add	arg01, #20
1aaf8     20 00 80 FF 
1aafc     09 01 58 FC | 	wrword	##16384, arg01
1ab00     24 37 B0 FD | 	call	#_usbnew_spin2_start
1ab04     57 00 00 FF 
1ab08     04 E4 05 F1 | 	add	objptr, ##44548
1ab0c     F2 FA 61 FC | 	wrlong	result1, objptr
1ab10                 | '   mouse_limits[0] := xlim
1ab10     0F 00 00 FF 
1ab14     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
1ab18     01 00 80 FF 
1ab1c     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
1ab20                 | '   mouse_limits[1] := ylim
1ab20     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1ab24     01 00 80 FF 
1ab28     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
1ab2c     56 00 00 FF 
1ab30     F3 E4 85 F1 | 	sub	objptr, ##44275
1ab34     F2 12 02 F6 | 	mov	arg01, objptr
1ab38     11 E5 85 F1 | 	sub	objptr, #273
1ab3c     C4 12 06 F1 | 	add	arg01, #196
1ab40                 | '   mouse_outptr := ptr
1ab40     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1ab44     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
1ab48     0F 00 00 FF 
1ab4c     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1ab50     0E 00 00 FF 
1ab54     B6 EA 05 F1 | 	add	ptr__dat__, ##7350
1ab58     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1ab5c     0E 00 00 FF 
1ab60     B6 EA 85 F1 | 	sub	ptr__dat__, ##7350
1ab64     10 12 06 F6 | 	mov	arg01, #16
1ab68     70 1B B0 FD | 	call	#_hg010b_spin2_setspriteptr
1ab6c     10 12 06 F6 | 	mov	arg01, #16
1ab70     20 14 06 F6 | 	mov	arg02, #32
1ab74     20 16 06 F6 | 	mov	arg03, #32
1ab78     F0 1B B0 FD | 	call	#_hg010b_spin2_setspritesize
1ab7c     09 12 C6 F9 | 	decod	arg01, #9
1ab80     2C 15 06 F6 | 	mov	arg02, #300
1ab84     F8 37 B0 FD | 	call	#_usbnew_spin2_mouse_move
1ab88     F2 1C 02 F6 | 	mov	arg06, objptr
1ab8c     78 00 00 FF 
1ab90     F8 E4 05 F1 | 	add	objptr, ##61688
1ab94     F2 1A 02 F6 | 	mov	arg05, objptr
1ab98     0D 1D 62 FC | 	wrlong	arg06, arg05
1ab9c     04 1A 06 F1 | 	add	arg05, #4
1aba0     0D F1 61 FC | 	wrlong	ptr__housekeeper_, arg05
1aba4     EF 14 02 F6 | 	mov	arg02, entryptr__
1aba8     F2 1E 02 F6 | 	mov	local01, objptr
1abac     1E FA 05 F6 | 	mov	result1, #30
1abb0     28 1E 62 FD | 	setq	local01
1abb4     0A FB F1 FC | 	coginit	result1, arg02 wc
1abb8     01 FA 65 C6 |  if_b	neg	result1, #1
1abbc     04 E4 85 F1 | 	sub	objptr, #4
1abc0     F2 FA 61 FC | 	wrlong	result1, objptr
1abc4     01 00 00 FF 
1abc8     90 E4 05 F1 | 	add	objptr, ##656
1abcc     F2 00 68 FC | 	wrlong	#0, objptr
1abd0     22 00 00 FF 
1abd4     50 E5 85 F1 | 	sub	objptr, ##17744
1abd8     F2 04 68 FC | 	wrlong	#2, objptr
1abdc     04 E4 05 F1 | 	add	objptr, #4
1abe0     F2 26 69 FC | 	wrlong	#147, objptr
1abe4     04 E4 05 F1 | 	add	objptr, #4
1abe8     F2 34 69 FC | 	wrlong	#154, objptr
1abec     04 E4 05 F1 | 	add	objptr, #4
1abf0     F2 08 68 FC | 	wrlong	#4, objptr
1abf4     04 E4 85 F1 | 	sub	objptr, #4
1abf8     F2 1C 02 FB | 	rdlong	arg06, objptr
1abfc     14 E4 85 F1 | 	sub	objptr, #20
1ac00     F2 1C 62 FC | 	wrlong	arg06, objptr
1ac04     04 E4 05 F1 | 	add	objptr, #4
1ac08     F2 00 68 FC | 	wrlong	#0, objptr
1ac0c     04 E4 05 F1 | 	add	objptr, #4
1ac10     F2 00 68 FC | 	wrlong	#0, objptr
1ac14     21 00 00 FF 
1ac18     C0 E4 05 F1 | 	add	objptr, ##17088
1ac1c     F2 02 68 FC | 	wrlong	#1, objptr
1ac20     01 00 00 FF 
1ac24     9C E4 05 F1 | 	add	objptr, ##668
1ac28     F2 00 68 FC | 	wrlong	#0, objptr
1ac2c     01 00 00 FF 
1ac30     00 EA 05 F1 | 	add	ptr__dat__, ##512
1ac34     08 E4 05 F1 | 	add	objptr, #8
1ac38     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1ac3c     04 E4 85 F1 | 	sub	objptr, #4
1ac40     03 00 80 FF 
1ac44     F2 3C 69 FC | 	wrlong	##1694, objptr
1ac48     14 00 00 FF 
1ac4c     2C E5 85 F1 | 	sub	objptr, ##10540
1ac50     F2 18 68 FC | 	wrlong	#12, objptr
1ac54     65 00 00 FF 
1ac58     64 E4 85 F1 | 	sub	objptr, ##51812
1ac5c     01 00 00 FF 
1ac60     00 EA 85 F1 | 	sub	ptr__dat__, ##512
1ac64     84 DD BF FD | 	call	#_init_commands
1ac68     00 F7 BF FD | 	call	#_init_error_strings
1ac6c     9C EE BF FD | 	call	#_init_audio
1ac70     E8 38 BF FD | 	call	#_do_new
1ac74     57 00 00 FF 
1ac78     3C E4 05 F1 | 	add	objptr, ##44604
1ac7c     F2 12 02 FB | 	rdlong	arg01, objptr
1ac80     04 E4 85 F1 | 	sub	objptr, #4
1ac84     F2 14 02 FB | 	rdlong	arg02, objptr
1ac88     57 00 00 FF 
1ac8c     38 E4 85 F1 | 	sub	objptr, ##44600
1ac90     F8 27 B0 FD | 	call	#_hg010b_spin2_cls
1ac94     57 00 00 FF 
1ac98     40 E4 05 F1 | 	add	objptr, ##44608
1ac9c     F2 12 02 FB | 	rdlong	arg01, objptr
1aca0     57 00 00 FF 
1aca4     40 E4 85 F1 | 	sub	objptr, ##44608
1aca8     90 26 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1acac                 | ' 
1acac                 | ' leading_spaces:=amount
1acac     01 00 00 FF 
1acb0     B6 E4 05 F1 | 	add	objptr, ##694
1acb4     F2 04 68 FC | 	wrlong	#2, objptr
1acb8     01 00 00 FF 
1acbc     B6 E4 85 F1 | 	sub	objptr, ##694
1acc0     76 01 00 FF 
1acc4     FB 21 06 F6 | 	mov	local02, ##@LR__5250
1acc8     3D 12 06 F6 | 	mov	arg01, #61
1accc     3C 14 06 F6 | 	mov	arg02, #60
1acd0     3B 16 06 F6 | 	mov	arg03, #59
1acd4     3A 18 06 F6 | 	mov	arg04, #58
1acd8     6C 88 B0 FD | 	call	#__system___vfs_open_sdcardx
1acdc     FD 14 02 F6 | 	mov	arg02, result1
1ace0     10 13 02 F6 | 	mov	arg01, local02
1ace4     FC 41 B0 FD | 	call	#__system___mount
1ace8     76 01 00 FF 
1acec     FF 13 06 F6 | 	mov	arg01, ##@LR__5251
1acf0     B0 44 B0 FD | 	call	#__system___chdir
1acf4     77 01 00 FF 
1acf8     07 20 06 F6 | 	mov	local02, ##@LR__5252
1acfc     72 00 00 FF 
1ad00     98 E4 05 F1 | 	add	objptr, ##58520
1ad04     F2 20 62 FC | 	wrlong	local02, objptr
1ad08     1B 00 00 FF 
1ad0c     64 E4 85 F1 | 	sub	objptr, ##13924
1ad10     F2 12 02 FB | 	rdlong	arg01, objptr
1ad14     57 00 00 FF 
1ad18     34 E4 85 F1 | 	sub	objptr, ##44596
1ad1c     01 12 66 F0 | 	shl	arg01, #1
1ad20     01 14 06 F6 | 	mov	arg02, #1
1ad24     54 26 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1ad28                 | ' 
1ad28                 | ' init_commands
1ad28                 | ' init_error_strings
1ad28                 | ' init_audio
1ad28                 | ' do_new
1ad28                 | ' 
1ad28                 | ' 
1ad28                 | ' cls(ink, paper)
1ad28                 | ' v.setfontfamily(font) 				' use ST Mono font
1ad28                 | ' v.setleadingspaces(2)
1ad28                 | ' mount "/sd", _vfs_open_sdcard()
1ad28                 | ' chdir "/sd/bas"
1ad28                 | ' 
1ad28                 | ' currentdir$="/sd/bas"
1ad28                 | ' 
1ad28                 | ' position 2*editor_spaces,1 : print ver$
1ad28     00 12 06 F6 | 	mov	arg01, #0
1ad2c     80 97 B0 FD | 	call	#__system___getiolock_0484
1ad30     FD 12 02 F6 | 	mov	arg01, result1
1ad34     E0 3D B0 FD | 	call	#__system___lockmem
1ad38     18 00 00 FF 
1ad3c     4C EB 05 F1 | 	add	ptr__dat__, ##12620
1ad40     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
1ad44     18 00 00 FF 
1ad48     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
1ad4c     00 12 06 F6 | 	mov	arg01, #0
1ad50     00 16 06 F6 | 	mov	arg03, #0
1ad54     C8 4A B0 FD | 	call	#__system___basic_print_string
1ad58     00 12 06 F6 | 	mov	arg01, #0
1ad5c     0A 14 06 F6 | 	mov	arg02, #10
1ad60     00 16 06 F6 | 	mov	arg03, #0
1ad64     60 4A B0 FD | 	call	#__system___basic_print_char
1ad68     00 12 06 F6 | 	mov	arg01, #0
1ad6c     40 97 B0 FD | 	call	#__system___getiolock_0484
1ad70     FD 00 68 FC | 	wrlong	#0, result1
1ad74     79 00 00 FF 
1ad78     88 E5 05 F1 | 	add	objptr, ##62344
1ad7c     F2 12 02 FB | 	rdlong	arg01, objptr
1ad80     16 00 00 FF 
1ad84     2C E5 85 F1 | 	sub	objptr, ##11564
1ad88     F2 20 02 FB | 	rdlong	local02, objptr
1ad8c     63 00 00 FF 
1ad90     5C E4 85 F1 | 	sub	objptr, ##50780
1ad94     10 13 82 F1 | 	sub	arg01, local02
1ad98     00 14 06 F6 | 	mov	arg02, #0
1ad9c     0A 16 06 F6 | 	mov	arg03, #10
1ada0     10 60 B0 FD | 	call	#__system__Number_S
1ada4     FD 12 02 F6 | 	mov	arg01, result1
1ada8     77 01 00 FF 
1adac     0F 14 06 F6 | 	mov	arg02, ##@LR__5253
1adb0     C0 3D B0 FD | 	call	#__system___string_concat
1adb4     FD 20 02 F6 | 	mov	local02, result1
1adb8     78 00 00 FF 
1adbc     EC E4 05 F1 | 	add	objptr, ##61676
1adc0     F2 20 62 FC | 	wrlong	local02, objptr
1adc4     78 00 00 FF 
1adc8     EC E4 85 F1 | 	sub	objptr, ##61676
1adcc                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
1adcc     00 12 06 F6 | 	mov	arg01, #0
1add0     DC 96 B0 FD | 	call	#__system___getiolock_0484
1add4     FD 12 02 F6 | 	mov	arg01, result1
1add8     3C 3D B0 FD | 	call	#__system___lockmem
1addc     78 00 00 FF 
1ade0     EC E4 05 F1 | 	add	objptr, ##61676
1ade4     F2 14 02 FB | 	rdlong	arg02, objptr
1ade8     78 00 00 FF 
1adec     EC E4 85 F1 | 	sub	objptr, ##61676
1adf0     00 12 06 F6 | 	mov	arg01, #0
1adf4     00 16 06 F6 | 	mov	arg03, #0
1adf8     24 4A B0 FD | 	call	#__system___basic_print_string
1adfc     00 12 06 F6 | 	mov	arg01, #0
1ae00     0A 14 06 F6 | 	mov	arg02, #10
1ae04     00 16 06 F6 | 	mov	arg03, #0
1ae08     BC 49 B0 FD | 	call	#__system___basic_print_char
1ae0c     00 12 06 F6 | 	mov	arg01, #0
1ae10     9C 96 B0 FD | 	call	#__system___getiolock_0484
1ae14     FD 00 68 FC | 	wrlong	#0, result1
1ae18     57 00 00 FF 
1ae1c     34 E4 05 F1 | 	add	objptr, ##44596
1ae20     F2 12 02 FB | 	rdlong	arg01, objptr
1ae24     57 00 00 FF 
1ae28     34 E4 85 F1 | 	sub	objptr, ##44596
1ae2c     01 12 66 F0 | 	shl	arg01, #1
1ae30     04 14 06 F6 | 	mov	arg02, #4
1ae34     44 25 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1ae38                 | ' position 2*editor_spaces,4 : print "Ready"
1ae38     00 12 06 F6 | 	mov	arg01, #0
1ae3c     70 96 B0 FD | 	call	#__system___getiolock_0484
1ae40     FD 12 02 F6 | 	mov	arg01, result1
1ae44     D0 3C B0 FD | 	call	#__system___lockmem
1ae48     77 01 00 FF 
1ae4c     21 14 06 F6 | 	mov	arg02, ##@LR__5254
1ae50     00 12 06 F6 | 	mov	arg01, #0
1ae54     00 16 06 F6 | 	mov	arg03, #0
1ae58     C4 49 B0 FD | 	call	#__system___basic_print_string
1ae5c     FD 22 02 F6 | 	mov	local03, result1
1ae60     00 12 06 F6 | 	mov	arg01, #0
1ae64     0A 14 06 F6 | 	mov	arg02, #10
1ae68     00 16 06 F6 | 	mov	arg03, #0
1ae6c     58 49 B0 FD | 	call	#__system___basic_print_char
1ae70     01 24 06 F6 | 	mov	local04, #1
1ae74     00 12 06 F6 | 	mov	arg01, #0
1ae78     34 96 B0 FD | 	call	#__system___getiolock_0484
1ae7c     FD 00 68 FC | 	wrlong	#0, result1
1ae80     00 26 06 F6 | 	mov	local05, #0
1ae84     00 14 06 F6 | 	mov	arg02, #0
1ae88     01 14 D6 F7 | 	test	arg02, #1 wc
1ae8c     5A 4C 64 FD | 	drvc	#38
1ae90     01 14 D6 F7 | 	test	arg02, #1 wc
1ae94     5A 4E 64 FD | 	drvc	#39
1ae98     77 01 00 FF 
1ae9c     27 20 06 F6 | 	mov	local02, ##@LR__5255
1aea0     79 00 00 FF 
1aea4     B4 E5 05 F1 | 	add	objptr, ##62388
1aea8     F2 20 62 FC | 	wrlong	local02, objptr
1aeac     04 E4 05 F1 | 	add	objptr, #4
1aeb0     FF FF FF FF 
1aeb4     F2 FE 6B FC | 	wrlong	##-1, objptr
1aeb8     79 00 00 FF 
1aebc     B8 E5 85 F1 | 	sub	objptr, ##62392
1aec0                 | ' 'hubset( %1_000001__00_0001_1010__1111_1011)
1aec0                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
1aec0                 | ' 
1aec0                 | ' loadname="noname.bas"
1aec0                 | ' do_insert=-1
1aec0                 | ' 
1aec0                 | ' 
1aec0                 | ' '-------------------------------------------------------------------------------------------------------- 
1aec0                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
1aec0                 | ' '--------------------------------------------------------------------------------------------------------
1aec0                 | ' 
1aec0                 | ' do
1aec0                 | LR__2120
1aec0     01 12 06 F6 | 	mov	arg01, #1
1aec4     54 25 B0 FD | 	call	#_hg010b_spin2_waitvbl
1aec8     07 12 06 F6 | 	mov	arg01, #7
1aecc     0B 00 00 FF 
1aed0     CC E4 05 F1 | 	add	objptr, ##5836
1aed4     40 39 B0 FD | 	call	#_audio096_spin2_stop
1aed8     0B 00 00 FF 
1aedc     CC E4 85 F1 | 	sub	objptr, ##5836
1aee0     3C 34 B0 FD | 	call	#_usbnew_spin2_get_key
1aee4     65 00 00 FF 
1aee8     74 E4 05 F1 | 	add	objptr, ##51828
1aeec     F2 FA 61 FC | 	wrlong	result1, objptr
1aef0                 | '   return hkbd_led_rep
1aef0     13 00 00 FF 
1aef4     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
1aef8     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
1aefc     13 00 00 FF 
1af00     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
1af04     14 00 00 FF 
1af08     48 E5 05 F1 | 	add	objptr, ##10568
1af0c     F2 FA 61 FC | 	wrlong	result1, objptr
1af10                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
1af10     14 00 00 FF 
1af14     48 E5 85 F1 | 	sub	objptr, ##10568
1af18     F2 20 02 FB | 	rdlong	local02, objptr
1af1c     65 00 00 FF 
1af20     74 E4 85 F1 | 	sub	objptr, ##51828
1af24     01 20 16 F2 | 	cmp	local02, #1 wc
1af28     BC 00 90 CD |  if_b	jmp	#LR__2121
1af2c     65 00 00 FF 
1af30     74 E4 05 F1 | 	add	objptr, ##51828
1af34     F2 24 02 FB | 	rdlong	local04, objptr
1af38     65 00 00 FF 
1af3c     74 E4 85 F1 | 	sub	objptr, ##51828
1af40     12 23 02 F6 | 	mov	local03, local04
1af44     04 22 16 F2 | 	cmp	local03, #4 wc
1af48     9C 00 90 3D |  if_ae	jmp	#LR__2121
1af4c     78 00 00 FF 
1af50     F0 E4 05 F1 | 	add	objptr, ##61680
1af54     F2 1E 02 FB | 	rdlong	local01, objptr
1af58     78 00 00 FF 
1af5c     F0 E4 85 F1 | 	sub	objptr, ##61680
1af60     0F 27 02 F6 | 	mov	local05, local01
1af64     01 26 0E F2 | 	cmp	local05, #1 wz
1af68     7C 00 90 5D |  if_ne	jmp	#LR__2121
1af6c     04 00 00 FF 
1af70     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
1af74     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1af78     04 00 00 FF 
1af7c     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
1af80     56 00 00 FF 
1af84     44 22 06 F6 | 	mov	local03, ##44100
1af88     0C 24 C6 F9 | 	decod	local04, #12
1af8c     00 26 06 F6 | 	mov	local05, #0
1af90     03 00 00 FF 
1af94     DE 1E 06 F6 | 	mov	local01, ##1758
1af98     07 12 06 F6 | 	mov	arg01, #7
1af9c     56 00 00 FF 
1afa0     44 16 06 F6 | 	mov	arg03, ##44100
1afa4     0C 18 C6 F9 | 	decod	arg04, #12
1afa8     00 1A 06 F6 | 	mov	arg05, #0
1afac     03 00 00 FF 
1afb0     DE 1C 06 F6 | 	mov	arg06, ##1758
1afb4     0B 00 00 FF 
1afb8     CC E4 05 F1 | 	add	objptr, ##5836
1afbc     E8 36 B0 FD | 	call	#_audio096_spin2_play
1afc0     0B 00 00 FF 
1afc4     CC E4 85 F1 | 	sub	objptr, ##5836
1afc8     0A 12 06 F6 | 	mov	arg01, #10
1afcc     3C 3E B0 FD | 	call	#__system___waitms
1afd0     07 12 06 F6 | 	mov	arg01, #7
1afd4     0B 00 00 FF 
1afd8     CC E4 05 F1 | 	add	objptr, ##5836
1afdc     38 38 B0 FD | 	call	#_audio096_spin2_stop
1afe0     0B 00 00 FF 
1afe4     CC E4 85 F1 | 	sub	objptr, ##5836
1afe8                 | LR__2121
1afe8                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then let key2=key : let rpt=1 : let key3=key2
1afe8     65 00 00 FF 
1afec     74 E4 05 F1 | 	add	objptr, ##51828
1aff0     F2 20 02 FB | 	rdlong	local02, objptr
1aff4     65 00 00 FF 
1aff8     74 E4 85 F1 | 	sub	objptr, ##51828
1affc     04 20 16 F2 | 	cmp	local02, #4 wc
1b000     80 00 90 CD |  if_b	jmp	#LR__2122
1b004     65 00 00 FF 
1b008     74 E4 05 F1 | 	add	objptr, ##51828
1b00c     F2 24 02 FB | 	rdlong	local04, objptr
1b010     65 00 00 FF 
1b014     74 E4 85 F1 | 	sub	objptr, ##51828
1b018     12 23 02 F6 | 	mov	local03, local04
1b01c     00 00 40 FF 
1b020     00 22 16 F2 | 	cmp	local03, ##-2147483648 wc
1b024     65 00 00 CF 
1b028     74 E4 05 C1 |  if_b	add	objptr, ##51828
1b02c     F2 1E 02 CB |  if_b	rdlong	local01, objptr
1b030     65 00 00 CF 
1b034     74 E4 85 C1 |  if_b	sub	objptr, ##51828
1b038     0F 27 E2 C8 |  if_b	getbyte	local05, local01, #0
1b03c     E0 26 16 C2 |  if_b	cmp	local05, #224 wc
1b040     40 00 90 3D |  if_ae	jmp	#LR__2122
1b044     65 00 00 FF 
1b048     74 E4 05 F1 | 	add	objptr, ##51828
1b04c     F2 20 02 FB | 	rdlong	local02, objptr
1b050     04 E4 05 F1 | 	add	objptr, #4
1b054     F2 20 62 FC | 	wrlong	local02, objptr
1b058     14 00 00 FF 
1b05c     48 E5 05 F1 | 	add	objptr, ##10568
1b060     F2 02 68 FC | 	wrlong	#1, objptr
1b064     14 00 00 FF 
1b068     48 E5 85 F1 | 	sub	objptr, ##10568
1b06c     F2 20 02 FB | 	rdlong	local02, objptr
1b070     14 00 00 FF 
1b074     4C E5 05 F1 | 	add	objptr, ##10572
1b078     F2 20 62 FC | 	wrlong	local02, objptr
1b07c     79 00 00 FF 
1b080     C4 E5 85 F1 | 	sub	objptr, ##62404
1b084                 | LR__2122
1b084                 | ' if key>$80000000 then let rptcnt=0 : let rpt=0
1b084     65 00 00 FF 
1b088     74 E4 05 F1 | 	add	objptr, ##51828
1b08c     F2 20 02 FB | 	rdlong	local02, objptr
1b090     65 00 00 FF 
1b094     74 E4 85 F1 | 	sub	objptr, ##51828
1b098     00 00 40 FF 
1b09c     01 20 16 F2 | 	cmp	local02, ##-2147483647 wc
1b0a0     79 00 00 3F 
1b0a4     C8 E5 05 31 |  if_ae	add	objptr, ##62408
1b0a8     F2 00 68 3C |  if_ae	wrlong	#0, objptr
1b0ac     08 E4 85 31 |  if_ae	sub	objptr, #8
1b0b0     F2 00 68 3C |  if_ae	wrlong	#0, objptr
1b0b4     79 00 00 3F 
1b0b8     C0 E5 85 31 |  if_ae	sub	objptr, ##62400
1b0bc                 | ' if key=0 andalso rpt=1 then rptcnt+=1
1b0bc     65 00 00 FF 
1b0c0     74 E4 05 F1 | 	add	objptr, ##51828
1b0c4     F2 20 0A FB | 	rdlong	local02, objptr wz
1b0c8     65 00 00 FF 
1b0cc     74 E4 85 F1 | 	sub	objptr, ##51828
1b0d0     79 00 00 AF 
1b0d4     C0 E5 05 A1 |  if_e	add	objptr, ##62400
1b0d8     F2 24 02 AB |  if_e	rdlong	local04, objptr
1b0dc     79 00 00 AF 
1b0e0     C0 E5 85 A1 |  if_e	sub	objptr, ##62400
1b0e4     12 23 02 A6 |  if_e	mov	local03, local04
1b0e8     01 22 0E A2 |  if_e	cmp	local03, #1 wz
1b0ec     79 00 00 AF 
1b0f0     C8 E5 05 A1 |  if_e	add	objptr, ##62408
1b0f4     F2 20 02 AB |  if_e	rdlong	local02, objptr
1b0f8     01 20 06 A1 |  if_e	add	local02, #1
1b0fc     F2 20 62 AC |  if_e	wrlong	local02, objptr
1b100     79 00 00 AF 
1b104     C8 E5 85 A1 |  if_e	sub	objptr, ##62408
1b108                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
1b108     65 00 00 FF 
1b10c     74 E4 05 F1 | 	add	objptr, ##51828
1b110     F2 20 02 FB | 	rdlong	local02, objptr
1b114     65 00 00 FF 
1b118     74 E4 85 F1 | 	sub	objptr, ##51828
1b11c     00 00 40 FF 
1b120     00 20 16 F2 | 	cmp	local02, ##-2147483648 wc
1b124     44 00 90 3D |  if_ae	jmp	#LR__2124
1b128     79 00 00 FF 
1b12c     C8 E5 05 F1 | 	add	objptr, ##62408
1b130     F2 20 02 FB | 	rdlong	local02, objptr
1b134     79 00 00 FF 
1b138     C8 E5 85 F1 | 	sub	objptr, ##62408
1b13c     19 20 0E F2 | 	cmp	local02, #25 wz
1b140     28 00 90 5D |  if_ne	jmp	#LR__2123
1b144     65 00 00 FF 
1b148     78 E4 05 F1 | 	add	objptr, ##51832
1b14c     F2 20 02 FB | 	rdlong	local02, objptr
1b150     14 00 00 FF 
1b154     4C E5 05 F1 | 	add	objptr, ##10572
1b158     F2 20 62 FC | 	wrlong	local02, objptr
1b15c     04 E4 05 F1 | 	add	objptr, #4
1b160     F2 2A 68 FC | 	wrlong	#21, objptr
1b164     79 00 00 FF 
1b168     C8 E5 85 F1 | 	sub	objptr, ##62408
1b16c                 | LR__2123
1b16c                 | LR__2124
1b16c                 | ' 
1b16c                 | ' 
1b16c                 | ' if key3<>0 then
1b16c     79 00 00 FF 
1b170     C4 E5 05 F1 | 	add	objptr, ##62404
1b174     F2 28 0A FB | 	rdlong	local06, objptr wz
1b178     79 00 00 FF 
1b17c     C4 E5 85 F1 | 	sub	objptr, ##62404
1b180     3C FD 9F AD |  if_e	jmp	#LR__2120
1b184                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
1b184     78 00 00 FF 
1b188     F0 E4 05 F1 | 	add	objptr, ##61680
1b18c     F2 20 02 FB | 	rdlong	local02, objptr
1b190     78 00 00 FF 
1b194     F0 E4 85 F1 | 	sub	objptr, ##61680
1b198     01 20 0E F2 | 	cmp	local02, #1 wz
1b19c     50 00 90 5D |  if_ne	jmp	#LR__2125
1b1a0     79 00 00 FF 
1b1a4     94 E5 05 F1 | 	add	objptr, ##62356
1b1a8     F2 14 02 FB | 	rdlong	arg02, objptr
1b1ac     56 00 00 FF 
1b1b0     44 22 06 F6 | 	mov	local03, ##44100
1b1b4     0C 24 C6 F9 | 	decod	local04, #12
1b1b8     04 E4 85 F1 | 	sub	objptr, #4
1b1bc     F2 26 02 FB | 	rdlong	local05, objptr
1b1c0     01 1E 66 F6 | 	neg	local01, #1
1b1c4     07 12 06 F6 | 	mov	arg01, #7
1b1c8     56 00 00 FF 
1b1cc     44 16 06 F6 | 	mov	arg03, ##44100
1b1d0     0C 18 C6 F9 | 	decod	arg04, #12
1b1d4     13 1B 02 F6 | 	mov	arg05, local05
1b1d8     01 1C 66 F6 | 	neg	arg06, #1
1b1dc     6E 00 00 FF 
1b1e0     C4 E4 85 F1 | 	sub	objptr, ##56516
1b1e4     C0 34 B0 FD | 	call	#_audio096_spin2_play
1b1e8     0B 00 00 FF 
1b1ec     CC E4 85 F1 | 	sub	objptr, ##5836
1b1f0                 | LR__2125
1b1f0     79 00 00 FF 
1b1f4     C4 E5 05 F1 | 	add	objptr, ##62404
1b1f8     F2 12 02 FB | 	rdlong	arg01, objptr
1b1fc     79 00 00 FF 
1b200     C4 E5 85 F1 | 	sub	objptr, ##62404
1b204     D8 F7 BF FD | 	call	#_scantochar
1b208     79 00 00 FF 
1b20c     CC E5 05 F1 | 	add	objptr, ##62412
1b210     F2 FA 61 FC | 	wrlong	result1, objptr
1b214                 | '   if leds and 2 = 2 then 
1b214     10 E4 85 F1 | 	sub	objptr, #16
1b218     F2 20 0A FB | 	rdlong	local02, objptr wz
1b21c     79 00 00 FF 
1b220     BC E5 85 F1 | 	sub	objptr, ##62396
1b224     68 01 90 AD |  if_e	jmp	#LR__2133
1b228                 | '     if key4>96 andalso key4<123 then
1b228     79 00 00 FF 
1b22c     CC E5 05 F1 | 	add	objptr, ##62412
1b230     F2 20 02 FB | 	rdlong	local02, objptr
1b234     79 00 00 FF 
1b238     CC E5 85 F1 | 	sub	objptr, ##62412
1b23c     61 20 56 F2 | 	cmps	local02, #97 wc
1b240     40 00 90 CD |  if_b	jmp	#LR__2126
1b244     79 00 00 FF 
1b248     CC E5 05 F1 | 	add	objptr, ##62412
1b24c     F2 24 02 FB | 	rdlong	local04, objptr
1b250     79 00 00 FF 
1b254     CC E5 85 F1 | 	sub	objptr, ##62412
1b258     12 23 02 F6 | 	mov	local03, local04
1b25c     7B 22 56 F2 | 	cmps	local03, #123 wc
1b260     20 00 90 3D |  if_ae	jmp	#LR__2126
1b264     79 00 00 FF 
1b268     CC E5 05 F1 | 	add	objptr, ##62412
1b26c     F2 20 02 FB | 	rdlong	local02, objptr
1b270     20 20 86 F1 | 	sub	local02, #32
1b274     F2 20 62 FC | 	wrlong	local02, objptr
1b278     79 00 00 FF 
1b27c     CC E5 85 F1 | 	sub	objptr, ##62412
1b280     0C 01 90 FD | 	jmp	#LR__2132
1b284                 | LR__2126
1b284     79 00 00 FF 
1b288     CC E5 05 F1 | 	add	objptr, ##62412
1b28c     F2 20 02 FB | 	rdlong	local02, objptr
1b290     79 00 00 FF 
1b294     CC E5 85 F1 | 	sub	objptr, ##62412
1b298     41 20 56 F2 | 	cmps	local02, #65 wc
1b29c     40 00 90 CD |  if_b	jmp	#LR__2127
1b2a0     79 00 00 FF 
1b2a4     CC E5 05 F1 | 	add	objptr, ##62412
1b2a8     F2 24 02 FB | 	rdlong	local04, objptr
1b2ac     79 00 00 FF 
1b2b0     CC E5 85 F1 | 	sub	objptr, ##62412
1b2b4     12 23 02 F6 | 	mov	local03, local04
1b2b8     5B 22 56 F2 | 	cmps	local03, #91 wc
1b2bc     20 00 90 3D |  if_ae	jmp	#LR__2127
1b2c0     79 00 00 FF 
1b2c4     CC E5 05 F1 | 	add	objptr, ##62412
1b2c8     F2 20 02 FB | 	rdlong	local02, objptr
1b2cc     20 20 06 F1 | 	add	local02, #32
1b2d0     F2 20 62 FC | 	wrlong	local02, objptr
1b2d4     79 00 00 FF 
1b2d8     CC E5 85 F1 | 	sub	objptr, ##62412
1b2dc     B0 00 90 FD | 	jmp	#LR__2131
1b2e0                 | LR__2127
1b2e0     79 00 00 FF 
1b2e4     CC E5 05 F1 | 	add	objptr, ##62412
1b2e8     F2 20 02 FB | 	rdlong	local02, objptr
1b2ec     79 00 00 FF 
1b2f0     CC E5 85 F1 | 	sub	objptr, ##62412
1b2f4     17 20 56 F2 | 	cmps	local02, #23 wc
1b2f8     40 00 90 CD |  if_b	jmp	#LR__2128
1b2fc     79 00 00 FF 
1b300     CC E5 05 F1 | 	add	objptr, ##62412
1b304     F2 24 02 FB | 	rdlong	local04, objptr
1b308     79 00 00 FF 
1b30c     CC E5 85 F1 | 	sub	objptr, ##62412
1b310     12 23 02 F6 | 	mov	local03, local04
1b314     20 22 56 F2 | 	cmps	local03, #32 wc
1b318     20 00 90 3D |  if_ae	jmp	#LR__2128
1b31c     79 00 00 FF 
1b320     CC E5 05 F1 | 	add	objptr, ##62412
1b324     F2 20 02 FB | 	rdlong	local02, objptr
1b328     09 20 86 F1 | 	sub	local02, #9
1b32c     F2 20 62 FC | 	wrlong	local02, objptr
1b330     79 00 00 FF 
1b334     CC E5 85 F1 | 	sub	objptr, ##62412
1b338     54 00 90 FD | 	jmp	#LR__2130
1b33c                 | LR__2128
1b33c     79 00 00 FF 
1b340     CC E5 05 F1 | 	add	objptr, ##62412
1b344     F2 20 02 FB | 	rdlong	local02, objptr
1b348     79 00 00 FF 
1b34c     CC E5 85 F1 | 	sub	objptr, ##62412
1b350     0E 20 56 F2 | 	cmps	local02, #14 wc
1b354     38 00 90 CD |  if_b	jmp	#LR__2129
1b358     79 00 00 FF 
1b35c     CC E5 05 F1 | 	add	objptr, ##62412
1b360     F2 24 02 FB | 	rdlong	local04, objptr
1b364     79 00 00 FF 
1b368     CC E5 85 F1 | 	sub	objptr, ##62412
1b36c     12 23 02 F6 | 	mov	local03, local04
1b370     17 22 56 F2 | 	cmps	local03, #23 wc
1b374     79 00 00 CF 
1b378     CC E5 05 C1 |  if_b	add	objptr, ##62412
1b37c     F2 20 02 CB |  if_b	rdlong	local02, objptr
1b380     27 20 06 C1 |  if_b	add	local02, #39
1b384     F2 20 62 CC |  if_b	wrlong	local02, objptr
1b388     79 00 00 CF 
1b38c     CC E5 85 C1 |  if_b	sub	objptr, ##62412
1b390                 | LR__2129
1b390                 | LR__2130
1b390                 | LR__2131
1b390                 | LR__2132
1b390                 | LR__2133
1b390                 | '  
1b390                 | '  
1b390                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then 
1b390     79 00 00 FF 
1b394     CC E5 05 F1 | 	add	objptr, ##62412
1b398     F2 20 02 FB | 	rdlong	local02, objptr
1b39c     79 00 00 FF 
1b3a0     CC E5 85 F1 | 	sub	objptr, ##62412
1b3a4     01 20 56 F2 | 	cmps	local02, #1 wc
1b3a8     E4 01 90 CD |  if_b	jmp	#LR__2138
1b3ac     79 00 00 FF 
1b3b0     CC E5 05 F1 | 	add	objptr, ##62412
1b3b4     F2 24 02 FB | 	rdlong	local04, objptr
1b3b8     79 00 00 FF 
1b3bc     CC E5 85 F1 | 	sub	objptr, ##62412
1b3c0     12 23 02 F6 | 	mov	local03, local04
1b3c4     7F 22 56 F2 | 	cmps	local03, #127 wc
1b3c8     3C E4 05 C1 |  if_b	add	objptr, #60
1b3cc     F2 1E E2 CA |  if_b	rdword	local01, objptr
1b3d0     3C E4 85 C1 |  if_b	sub	objptr, #60
1b3d4     0F 27 32 C9 |  if_b	getword	local05, local01, #0
1b3d8     FE 26 16 C2 |  if_b	cmp	local05, #254 wc
1b3dc     B0 01 90 3D |  if_ae	jmp	#LR__2138
1b3e0                 | '     if do_insert then
1b3e0     79 00 00 FF 
1b3e4     B8 E5 05 F1 | 	add	objptr, ##62392
1b3e8     F2 20 0A FB | 	rdlong	local02, objptr wz
1b3ec     79 00 00 FF 
1b3f0     B8 E5 85 F1 | 	sub	objptr, ##62392
1b3f4     80 01 90 AD |  if_e	jmp	#LR__2137
1b3f8                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) step -1 : pspoke i,pspeek(i-1) : next i 
1b3f8     3E E4 05 F1 | 	add	objptr, #62
1b3fc     F2 22 C2 FA | 	rdbyte	local03, objptr
1b400     11 25 E2 F8 | 	getbyte	local04, local03, #0
1b404     80 24 06 FA | 	mul	local04, #128
1b408     3A E4 85 F1 | 	sub	objptr, #58
1b40c     F2 2A 02 FB | 	rdlong	local07, objptr
1b410     15 2D 02 F6 | 	mov	local08, local07
1b414     12 2D 02 F1 | 	add	local08, local04
1b418     7F 2C 06 F1 | 	add	local08, #127
1b41c     11 23 E2 F8 | 	getbyte	local03, local03, #0
1b420     80 22 06 FA | 	mul	local03, #128
1b424     11 2B 02 F1 | 	add	local07, local03
1b428     38 E4 05 F1 | 	add	objptr, #56
1b42c     F2 26 E2 FA | 	rdword	local05, objptr
1b430     3C E4 85 F1 | 	sub	objptr, #60
1b434     13 2F 52 F6 | 	abs	local09, local05 wc
1b438     01 2E 46 F0 | 	shr	local09, #1
1b43c     17 2B 82 F3 | 	sumc	local07, local09
1b440                 | LR__2134
1b440     16 31 02 F6 | 	mov	local10, local08
1b444     01 30 86 F1 | 	sub	local10, #1
1b448     18 13 02 F6 | 	mov	arg01, local10
1b44c     88 F4 BF FD | 	call	#_pspeek
1b450     FD 32 02 F6 | 	mov	local11, result1
1b454     19 35 E2 F8 | 	getbyte	local12, local11, #0
1b458     1A 37 02 F6 | 	mov	local13, local12
1b45c     16 13 02 F6 | 	mov	arg01, local08
1b460     1B 15 02 F6 | 	mov	arg02, local13
1b464     28 F4 BF FD | 	call	#_pspoke
1b468     01 2C 86 F1 | 	sub	local08, #1
1b46c     15 2D 52 F2 | 	cmps	local08, local07 wc
1b470     CC FF 9F 3D |  if_ae	jmp	#LR__2134
1b474     79 00 00 FF 
1b478     D0 E5 05 F1 | 	add	objptr, ##62416
1b47c     F2 00 68 FC | 	wrlong	#0, objptr
1b480     79 00 00 FF 
1b484     92 E5 85 F1 | 	sub	objptr, ##62354
1b488     F2 22 C2 FA | 	rdbyte	local03, objptr
1b48c     11 25 E2 F8 | 	getbyte	local04, local03, #0
1b490     80 24 06 FA | 	mul	local04, #128
1b494     3A E4 85 F1 | 	sub	objptr, #58
1b498     F2 26 02 FB | 	rdlong	local05, objptr
1b49c     13 2D 02 F6 | 	mov	local08, local05
1b4a0     12 2D 02 F1 | 	add	local08, local04
1b4a4     38 E4 05 F1 | 	add	objptr, #56
1b4a8     F2 2E E2 FA | 	rdword	local09, objptr
1b4ac     17 1F 32 F9 | 	getword	local01, local09, #0
1b4b0     0F 39 52 F6 | 	abs	local14, local01 wc
1b4b4     01 38 46 F0 | 	shr	local14, #1
1b4b8     1C 39 82 F6 | 	negc	local14, local14
1b4bc     1C 2D 02 F1 | 	add	local08, local14
1b4c0     11 23 E2 F8 | 	getbyte	local03, local03, #0
1b4c4     80 22 06 FA | 	mul	local03, #128
1b4c8     13 25 02 F6 | 	mov	local04, local05
1b4cc     3C E4 85 F1 | 	sub	objptr, #60
1b4d0     12 3B 02 F6 | 	mov	local15, local04
1b4d4     11 3B 02 F1 | 	add	local15, local03
1b4d8     80 3A 06 F1 | 	add	local15, #128
1b4dc                 | LR__2135
1b4dc     1D 2D 52 F2 | 	cmps	local08, local15 wc
1b4e0     94 00 90 3D |  if_ae	jmp	#LR__2136
1b4e4     3C E4 05 F1 | 	add	objptr, #60
1b4e8     F2 20 E2 FA | 	rdword	local02, objptr
1b4ec     79 00 00 FF 
1b4f0     94 E5 05 F1 | 	add	objptr, ##62356
1b4f4     F2 24 02 FB | 	rdlong	local04, objptr
1b4f8     01 24 66 F0 | 	shl	local04, #1
1b4fc     12 21 02 F1 | 	add	local02, local04
1b500     79 00 00 FF 
1b504     92 E5 85 F1 | 	sub	objptr, ##62354
1b508     F2 28 C2 FA | 	rdbyte	local06, objptr
1b50c     3E E4 85 F1 | 	sub	objptr, #62
1b510     10 28 06 FA | 	mul	local06, #16
1b514     04 28 06 F1 | 	add	local06, #4
1b518     16 13 02 F6 | 	mov	arg01, local08
1b51c     B8 F3 BF FD | 	call	#_pspeek
1b520     FD 22 E2 F8 | 	getbyte	local03, result1, #0
1b524     41 E4 05 F1 | 	add	objptr, #65
1b528     F2 24 02 FB | 	rdlong	local04, objptr
1b52c     04 E4 05 F1 | 	add	objptr, #4
1b530     F2 1E 02 FB | 	rdlong	local01, objptr
1b534     45 E4 85 F1 | 	sub	objptr, #69
1b538     0F 27 02 F6 | 	mov	local05, local01
1b53c     10 13 02 F6 | 	mov	arg01, local02
1b540     14 15 02 F6 | 	mov	arg02, local06
1b544     11 17 02 F6 | 	mov	arg03, local03
1b548     12 19 02 F6 | 	mov	arg04, local04
1b54c     13 1B 02 F6 | 	mov	arg05, local05
1b550     C4 1C B0 FD | 	call	#_hg010b_spin2_putcharxycgf
1b554     79 00 00 FF 
1b558     D0 E5 05 F1 | 	add	objptr, ##62416
1b55c     F2 20 02 FB | 	rdlong	local02, objptr
1b560     01 20 06 F1 | 	add	local02, #1
1b564     F2 20 62 FC | 	wrlong	local02, objptr
1b568     79 00 00 FF 
1b56c     D0 E5 85 F1 | 	sub	objptr, ##62416
1b570     01 2C 06 F1 | 	add	local08, #1
1b574     64 FF 9F FD | 	jmp	#LR__2135
1b578                 | LR__2136
1b578                 | LR__2137
1b578     79 00 00 FF 
1b57c     CC E5 05 F1 | 	add	objptr, ##62412
1b580     F2 12 02 FB | 	rdlong	arg01, objptr
1b584     79 00 00 FF 
1b588     CC E5 85 F1 | 	sub	objptr, ##62412
1b58c     D0 1F B0 FD | 	call	#_hg010b_spin2_putchar
1b590                 | LR__2138
1b590                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
1b590     79 00 00 FF 
1b594     CC E5 05 F1 | 	add	objptr, ##62412
1b598     F2 20 02 FB | 	rdlong	local02, objptr
1b59c     79 00 00 FF 
1b5a0     CC E5 85 F1 | 	sub	objptr, ##62412
1b5a4     01 20 56 F2 | 	cmps	local02, #1 wc
1b5a8     D0 00 90 CD |  if_b	jmp	#LR__2139
1b5ac     79 00 00 FF 
1b5b0     CC E5 05 F1 | 	add	objptr, ##62412
1b5b4     F2 24 02 FB | 	rdlong	local04, objptr
1b5b8     79 00 00 FF 
1b5bc     CC E5 85 F1 | 	sub	objptr, ##62412
1b5c0     12 23 02 F6 | 	mov	local03, local04
1b5c4     7F 22 56 F2 | 	cmps	local03, #127 wc
1b5c8     B0 00 90 3D |  if_ae	jmp	#LR__2139
1b5cc     3C E4 05 F1 | 	add	objptr, #60
1b5d0     F2 1E E2 FA | 	rdword	local01, objptr
1b5d4     3C E4 85 F1 | 	sub	objptr, #60
1b5d8     0F 27 32 F9 | 	getword	local05, local01, #0
1b5dc     FE 26 0E F2 | 	cmp	local05, #254 wz
1b5e0     78 00 00 AF 
1b5e4     F0 E4 05 A1 |  if_e	add	objptr, ##61680
1b5e8     F2 38 02 AB |  if_e	rdlong	local14, objptr
1b5ec     78 00 00 AF 
1b5f0     F0 E4 85 A1 |  if_e	sub	objptr, ##61680
1b5f4     1C 2F 02 A6 |  if_e	mov	local09, local14
1b5f8     01 2E 0E A2 |  if_e	cmp	local09, #1 wz
1b5fc     7C 00 90 5D |  if_ne	jmp	#LR__2139
1b600     04 00 00 FF 
1b604     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
1b608     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1b60c     04 00 00 FF 
1b610     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
1b614     56 00 00 FF 
1b618     44 22 06 F6 | 	mov	local03, ##44100
1b61c     0C 24 C6 F9 | 	decod	local04, #12
1b620     00 26 06 F6 | 	mov	local05, #0
1b624     03 00 00 FF 
1b628     DE 1E 06 F6 | 	mov	local01, ##1758
1b62c     07 12 06 F6 | 	mov	arg01, #7
1b630     56 00 00 FF 
1b634     44 16 06 F6 | 	mov	arg03, ##44100
1b638     0C 18 C6 F9 | 	decod	arg04, #12
1b63c     00 1A 06 F6 | 	mov	arg05, #0
1b640     03 00 00 FF 
1b644     DE 1C 06 F6 | 	mov	arg06, ##1758
1b648     0B 00 00 FF 
1b64c     CC E4 05 F1 | 	add	objptr, ##5836
1b650     54 30 B0 FD | 	call	#_audio096_spin2_play
1b654     0B 00 00 FF 
1b658     CC E4 85 F1 | 	sub	objptr, ##5836
1b65c     2C 13 06 F6 | 	mov	arg01, #300
1b660     A8 37 B0 FD | 	call	#__system___waitms
1b664     07 12 06 F6 | 	mov	arg01, #7
1b668     0B 00 00 FF 
1b66c     CC E4 05 F1 | 	add	objptr, ##5836
1b670     A4 31 B0 FD | 	call	#_audio096_spin2_stop
1b674     0B 00 00 FF 
1b678     CC E4 85 F1 | 	sub	objptr, ##5836
1b67c                 | LR__2139
1b67c                 | '  
1b67c                 | '   if key4=key_enter then 
1b67c     79 00 00 FF 
1b680     CC E5 05 F1 | 	add	objptr, ##62412
1b684     F2 20 02 FB | 	rdlong	local02, objptr
1b688     79 00 00 FF 
1b68c     CC E5 85 F1 | 	sub	objptr, ##62412
1b690     8D 20 0E F2 | 	cmp	local02, #141 wz
1b694     F0 00 90 5D |  if_ne	jmp	#LR__2142
1b698     77 01 00 FF 
1b69c     32 20 06 F6 | 	mov	local02, ##@LR__5256
1b6a0     57 00 00 FF 
1b6a4     1C E4 05 F1 | 	add	objptr, ##44572
1b6a8     F2 20 62 FC | 	wrlong	local02, objptr
1b6ac                 | ' 
1b6ac                 | ' ''      interpret: line$="" :let t1=getct()-t1 :rpt=0: rptcnt=0
1b6ac                 | '     line$="" : for i=editor_spaces to 127
1b6ac     18 E4 05 F1 | 	add	objptr, #24
1b6b0     F2 2C 02 FB | 	rdlong	local08, objptr
1b6b4     57 00 00 FF 
1b6b8     34 E4 85 F1 | 	sub	objptr, ##44596
1b6bc                 | LR__2140
1b6bc     80 2C 56 F2 | 	cmps	local08, #128 wc
1b6c0     8C 00 90 3D |  if_ae	jmp	#LR__2141
1b6c4     3E E4 05 F1 | 	add	objptr, #62
1b6c8     F2 1E C2 FA | 	rdbyte	local01, objptr
1b6cc     0F 27 E2 F8 | 	getbyte	local05, local01, #0
1b6d0     13 2F 02 F6 | 	mov	local09, local05
1b6d4     80 2E 06 FA | 	mul	local09, #128
1b6d8     3A E4 85 F1 | 	sub	objptr, #58
1b6dc     F2 38 02 FB | 	rdlong	local14, objptr
1b6e0     04 E4 85 F1 | 	sub	objptr, #4
1b6e4     1C 13 02 F6 | 	mov	arg01, local14
1b6e8     17 13 02 F1 | 	add	arg01, local09
1b6ec     16 13 02 F1 | 	add	arg01, local08
1b6f0     E4 F1 BF FD | 	call	#_pspeek
1b6f4     FD 24 E2 F8 | 	getbyte	local04, result1, #0
1b6f8     79 00 00 FF 
1b6fc     D4 E5 05 F1 | 	add	objptr, ##62420
1b700     F2 24 62 FC | 	wrlong	local04, objptr
1b704     22 00 00 FF 
1b708     B8 E5 85 F1 | 	sub	objptr, ##17848
1b70c     F2 28 02 FB | 	rdlong	local06, objptr
1b710     57 00 00 FF 
1b714     1C E4 85 F1 | 	sub	objptr, ##44572
1b718     12 13 02 F6 | 	mov	arg01, local04
1b71c     04 56 B0 FD | 	call	#__system__Chr_S
1b720     FD 14 02 F6 | 	mov	arg02, result1
1b724     14 13 02 F6 | 	mov	arg01, local06
1b728     48 34 B0 FD | 	call	#__system___string_concat
1b72c     57 00 00 FF 
1b730     1C E4 05 F1 | 	add	objptr, ##44572
1b734     F2 FA 61 FC | 	wrlong	result1, objptr
1b738     57 00 00 FF 
1b73c     1C E4 85 F1 | 	sub	objptr, ##44572
1b740     16 23 02 F6 | 	mov	local03, local08
1b744     01 22 06 F1 | 	add	local03, #1
1b748     11 2D 02 F6 | 	mov	local08, local03
1b74c     6C FF 9F FD | 	jmp	#LR__2140
1b750                 | LR__2141
1b750     C4 23 B0 FD | 	call	#_hg010b_spin2_crlf
1b754     C4 52 BE FD | 	call	#_interpret
1b758     77 01 00 FF 
1b75c     33 20 06 F6 | 	mov	local02, ##@LR__5257
1b760     57 00 00 FF 
1b764     1C E4 05 F1 | 	add	objptr, ##44572
1b768     F2 20 62 FC | 	wrlong	local02, objptr
1b76c     22 00 00 FF 
1b770     A4 E5 05 F1 | 	add	objptr, ##17828
1b774     F2 00 68 FC | 	wrlong	#0, objptr
1b778     08 E4 05 F1 | 	add	objptr, #8
1b77c     F2 00 68 FC | 	wrlong	#0, objptr
1b780     79 00 00 FF 
1b784     C8 E5 85 F1 | 	sub	objptr, ##62408
1b788                 | LR__2142
1b788     79 00 00 FF 
1b78c     C4 E5 05 F1 | 	add	objptr, ##62404
1b790     F2 20 02 FB | 	rdlong	local02, objptr
1b794     10 21 E2 F8 | 	getbyte	local02, local02, #0
1b798     08 E4 05 F1 | 	add	objptr, #8
1b79c     F2 20 62 FC | 	wrlong	local02, objptr
1b7a0                 | '   'tab
1b7a0                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)
1b7a0     79 00 00 FF 
1b7a4     CC E5 85 F1 | 	sub	objptr, ##62412
1b7a8     2B 20 0E F2 | 	cmp	local02, #43 wz
1b7ac     B4 00 90 5D |  if_ne	jmp	#LR__2143
1b7b0     3C E4 05 F1 | 	add	objptr, #60
1b7b4     F2 24 E2 FA | 	rdword	local04, objptr
1b7b8     3C E4 85 F1 | 	sub	objptr, #60
1b7bc     12 23 32 F9 | 	getword	local03, local04, #0
1b7c0     F0 22 16 F2 | 	cmp	local03, #240 wc
1b7c4     9C 00 90 CD |  if_b	jmp	#LR__2143
1b7c8     78 00 00 FF 
1b7cc     F0 E4 05 F1 | 	add	objptr, ##61680
1b7d0     F2 1E 02 FB | 	rdlong	local01, objptr
1b7d4     78 00 00 FF 
1b7d8     F0 E4 85 F1 | 	sub	objptr, ##61680
1b7dc     0F 27 02 F6 | 	mov	local05, local01
1b7e0     01 26 0E F2 | 	cmp	local05, #1 wz
1b7e4     7C 00 90 5D |  if_ne	jmp	#LR__2143
1b7e8     04 00 00 FF 
1b7ec     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
1b7f0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1b7f4     04 00 00 FF 
1b7f8     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
1b7fc     56 00 00 FF 
1b800     44 22 06 F6 | 	mov	local03, ##44100
1b804     0E 24 C6 F9 | 	decod	local04, #14
1b808     00 26 06 F6 | 	mov	local05, #0
1b80c     03 00 00 FF 
1b810     DE 1E 06 F6 | 	mov	local01, ##1758
1b814     00 12 06 F6 | 	mov	arg01, #0
1b818     56 00 00 FF 
1b81c     44 16 06 F6 | 	mov	arg03, ##44100
1b820     0E 18 C6 F9 | 	decod	arg04, #14
1b824     00 1A 06 F6 | 	mov	arg05, #0
1b828     03 00 00 FF 
1b82c     DE 1C 06 F6 | 	mov	arg06, ##1758
1b830     0B 00 00 FF 
1b834     CC E4 05 F1 | 	add	objptr, ##5836
1b838     6C 2E B0 FD | 	call	#_audio096_spin2_play
1b83c     0B 00 00 FF 
1b840     CC E4 85 F1 | 	sub	objptr, ##5836
1b844     2C 13 06 F6 | 	mov	arg01, #300
1b848     C0 35 B0 FD | 	call	#__system___waitms
1b84c     00 12 06 F6 | 	mov	arg01, #0
1b850     0B 00 00 FF 
1b854     CC E4 05 F1 | 	add	objptr, ##5836
1b858     BC 2F B0 FD | 	call	#_audio096_spin2_stop
1b85c     0B 00 00 FF 
1b860     CC E4 85 F1 | 	sub	objptr, ##5836
1b864                 | LR__2143
1b864                 | '   if key4 = 43 andalso v.cursor_x<240 then v.setcursorx((v.cursor_x+8) and $F8)  
1b864     79 00 00 FF 
1b868     CC E5 05 F1 | 	add	objptr, ##62412
1b86c     F2 20 02 FB | 	rdlong	local02, objptr
1b870     79 00 00 FF 
1b874     CC E5 85 F1 | 	sub	objptr, ##62412
1b878     2B 20 0E F2 | 	cmp	local02, #43 wz
1b87c     34 00 90 5D |  if_ne	jmp	#LR__2144
1b880     3C E4 05 F1 | 	add	objptr, #60
1b884     F2 24 E2 FA | 	rdword	local04, objptr
1b888     3C E4 85 F1 | 	sub	objptr, #60
1b88c     12 23 32 F9 | 	getword	local03, local04, #0
1b890     F0 22 16 F2 | 	cmp	local03, #240 wc
1b894     1C 00 90 3D |  if_ae	jmp	#LR__2144
1b898     3C E4 05 F1 | 	add	objptr, #60
1b89c     F2 22 E2 FA | 	rdword	local03, objptr
1b8a0     3C E4 85 F1 | 	sub	objptr, #60
1b8a4     11 13 32 F9 | 	getword	arg01, local03, #0
1b8a8     08 12 06 F1 | 	add	arg01, #8
1b8ac     F8 12 06 F5 | 	and	arg01, #248
1b8b0     04 1B B0 FD | 	call	#_hg010b_spin2_setcursorx
1b8b4                 | LR__2144
1b8b4                 | '  ' tab43 del 76 home74 end 77 pgup=75 pgdn 78
1b8b4                 | '   if key4=77 then i=127 : do: 
1b8b4     79 00 00 FF 
1b8b8     CC E5 05 F1 | 	add	objptr, ##62412
1b8bc     F2 20 02 FB | 	rdlong	local02, objptr
1b8c0     79 00 00 FF 
1b8c4     CC E5 85 F1 | 	sub	objptr, ##62412
1b8c8     4D 20 0E F2 | 	cmp	local02, #77 wz
1b8cc     90 00 90 5D |  if_ne	jmp	#LR__2149
1b8d0     7F 2C 06 F6 | 	mov	local08, #127
1b8d4                 | LR__2145
1b8d4                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
1b8d4     3E E4 05 F1 | 	add	objptr, #62
1b8d8     F2 26 C2 FA | 	rdbyte	local05, objptr
1b8dc     13 25 E2 F8 | 	getbyte	local04, local05, #0
1b8e0     12 1F 02 F6 | 	mov	local01, local04
1b8e4     80 1E 06 FA | 	mul	local01, #128
1b8e8     3A E4 85 F1 | 	sub	objptr, #58
1b8ec     F2 2E 02 FB | 	rdlong	local09, objptr
1b8f0     04 E4 85 F1 | 	sub	objptr, #4
1b8f4     17 23 02 F6 | 	mov	local03, local09
1b8f8     0F 23 02 F1 | 	add	local03, local01
1b8fc     16 23 02 F1 | 	add	local03, local08
1b900     11 13 02 F6 | 	mov	arg01, local03
1b904     D0 EF BF FD | 	call	#_pspeek
1b908     FD 20 E2 F8 | 	getbyte	local02, result1, #0
1b90c     20 20 0E F2 | 	cmp	local02, #32 wz
1b910     2C 00 90 AD |  if_e	jmp	#LR__2147
1b914                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
1b914     7F 2C 56 F2 | 	cmps	local08, #127 wc
1b918     18 00 90 3D |  if_ae	jmp	#LR__2146
1b91c     16 23 02 F6 | 	mov	local03, local08
1b920     01 22 66 F0 | 	shl	local03, #1
1b924     11 13 02 F6 | 	mov	arg01, local03
1b928     02 12 06 F1 | 	add	arg01, #2
1b92c     88 1A B0 FD | 	call	#_hg010b_spin2_setcursorx
1b930     2C 00 90 FD | 	jmp	#LR__2148
1b934                 | LR__2146
1b934     FE 12 06 F6 | 	mov	arg01, #254
1b938     7C 1A B0 FD | 	call	#_hg010b_spin2_setcursorx
1b93c     20 00 90 FD | 	jmp	#LR__2148
1b940                 | LR__2147
1b940     01 2C 86 F1 | 	sub	local08, #1
1b944     57 00 00 FF 
1b948     34 E4 05 F1 | 	add	objptr, ##44596
1b94c     F2 20 02 FB | 	rdlong	local02, objptr
1b950     57 00 00 FF 
1b954     34 E4 85 F1 | 	sub	objptr, ##44596
1b958     10 2D 0A F2 | 	cmp	local08, local02 wz
1b95c     74 FF 9F 5D |  if_ne	jmp	#LR__2145
1b960                 | LR__2148
1b960                 | LR__2149
1b960                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
1b960     57 00 00 FF 
1b964     34 E4 05 F1 | 	add	objptr, ##44596
1b968     F2 20 02 FB | 	rdlong	local02, objptr
1b96c     57 00 00 FF 
1b970     34 E4 85 F1 | 	sub	objptr, ##44596
1b974     10 2D 0A F2 | 	cmp	local08, local02 wz
1b978     24 00 90 5D |  if_ne	jmp	#LR__2150
1b97c     57 00 00 FF 
1b980     34 E4 05 F1 | 	add	objptr, ##44596
1b984     F2 24 02 FB | 	rdlong	local04, objptr
1b988     57 00 00 FF 
1b98c     34 E4 85 F1 | 	sub	objptr, ##44596
1b990     12 23 02 F6 | 	mov	local03, local04
1b994     11 13 02 F6 | 	mov	arg01, local03
1b998     01 12 66 F0 | 	shl	arg01, #1
1b99c     18 1A B0 FD | 	call	#_hg010b_spin2_setcursorx
1b9a0                 | LR__2150
1b9a0                 | '   
1b9a0                 | '   
1b9a0                 | '   if key4=74 then v.setcursorx(editor_spaces*2)
1b9a0     79 00 00 FF 
1b9a4     CC E5 05 F1 | 	add	objptr, ##62412
1b9a8     F2 20 02 FB | 	rdlong	local02, objptr
1b9ac     79 00 00 FF 
1b9b0     CC E5 85 F1 | 	sub	objptr, ##62412
1b9b4     4A 20 0E F2 | 	cmp	local02, #74 wz
1b9b8     24 00 90 5D |  if_ne	jmp	#LR__2151
1b9bc     57 00 00 FF 
1b9c0     34 E4 05 F1 | 	add	objptr, ##44596
1b9c4     F2 24 02 FB | 	rdlong	local04, objptr
1b9c8     57 00 00 FF 
1b9cc     34 E4 85 F1 | 	sub	objptr, ##44596
1b9d0     12 23 02 F6 | 	mov	local03, local04
1b9d4     11 13 02 F6 | 	mov	arg01, local03
1b9d8     01 12 66 F0 | 	shl	arg01, #1
1b9dc     D8 19 B0 FD | 	call	#_hg010b_spin2_setcursorx
1b9e0                 | LR__2151
1b9e0                 | '   if key4=75 then v.setcursory(0)
1b9e0     79 00 00 FF 
1b9e4     CC E5 05 F1 | 	add	objptr, ##62412
1b9e8     F2 20 02 FB | 	rdlong	local02, objptr
1b9ec     79 00 00 FF 
1b9f0     CC E5 85 F1 | 	sub	objptr, ##62412
1b9f4     4B 20 0E F2 | 	cmp	local02, #75 wz
1b9f8     00 12 06 A6 |  if_e	mov	arg01, #0
1b9fc     E8 19 B0 AD |  if_e	call	#_hg010b_spin2_setcursory
1ba00                 | '   if key4=78 then v.setcursory(36) ' todo: parameter instead 36
1ba00     79 00 00 FF 
1ba04     CC E5 05 F1 | 	add	objptr, ##62412
1ba08     F2 20 02 FB | 	rdlong	local02, objptr
1ba0c     79 00 00 FF 
1ba10     CC E5 85 F1 | 	sub	objptr, ##62412
1ba14     4E 20 0E F2 | 	cmp	local02, #78 wz
1ba18     24 12 06 A6 |  if_e	mov	arg01, #36
1ba1c     C8 19 B0 AD |  if_e	call	#_hg010b_spin2_setcursory
1ba20                 | '   
1ba20                 | '   if key4=76 then 'del
1ba20     79 00 00 FF 
1ba24     CC E5 05 F1 | 	add	objptr, ##62412
1ba28     F2 20 02 FB | 	rdlong	local02, objptr
1ba2c     79 00 00 FF 
1ba30     CC E5 85 F1 | 	sub	objptr, ##62412
1ba34     4C 20 0E F2 | 	cmp	local02, #76 wz
1ba38     9C 01 90 5D |  if_ne	jmp	#LR__2156
1ba3c                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
1ba3c     3E E4 05 F1 | 	add	objptr, #62
1ba40     F2 22 C2 FA | 	rdbyte	local03, objptr
1ba44     11 25 E2 F8 | 	getbyte	local04, local03, #0
1ba48     80 24 06 FA | 	mul	local04, #128
1ba4c     3A E4 85 F1 | 	sub	objptr, #58
1ba50     F2 3C 02 FB | 	rdlong	local16, objptr
1ba54     1E 2D 02 F6 | 	mov	local08, local16
1ba58     12 2D 02 F1 | 	add	local08, local04
1ba5c     38 E4 05 F1 | 	add	objptr, #56
1ba60     F2 1E E2 FA | 	rdword	local01, objptr
1ba64     0F 39 52 F6 | 	abs	local14, local01 wc
1ba68     01 38 46 F0 | 	shr	local14, #1
1ba6c     1C 2D 82 F3 | 	sumc	local08, local14
1ba70     11 23 E2 F8 | 	getbyte	local03, local03, #0
1ba74     80 22 06 FA | 	mul	local03, #128
1ba78     3C E4 85 F1 | 	sub	objptr, #60
1ba7c     11 3D 02 F1 | 	add	local16, local03
1ba80     80 3C 06 F1 | 	add	local16, #128
1ba84                 | LR__2152
1ba84     1E 2D 52 F2 | 	cmps	local08, local16 wc
1ba88     20 00 90 3D |  if_ae	jmp	#LR__2153
1ba8c     16 13 02 F6 | 	mov	arg01, local08
1ba90     01 12 06 F1 | 	add	arg01, #1
1ba94     40 EE BF FD | 	call	#_pspeek
1ba98     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
1ba9c     16 13 02 F6 | 	mov	arg01, local08
1baa0     EC ED BF FD | 	call	#_pspoke
1baa4     01 2C 06 F1 | 	add	local08, #1
1baa8     D8 FF 9F FD | 	jmp	#LR__2152
1baac                 | LR__2153
1baac     3E E4 05 F1 | 	add	objptr, #62
1bab0     F2 26 C2 FA | 	rdbyte	local05, objptr
1bab4     80 26 06 FA | 	mul	local05, #128
1bab8     3A E4 85 F1 | 	sub	objptr, #58
1babc     F2 12 02 FB | 	rdlong	arg01, objptr
1bac0     04 E4 85 F1 | 	sub	objptr, #4
1bac4     13 13 02 F1 | 	add	arg01, local05
1bac8     7F 12 06 F1 | 	add	arg01, #127
1bacc     20 14 06 F6 | 	mov	arg02, #32
1bad0     BC ED BF FD | 	call	#_pspoke
1bad4     79 00 00 FF 
1bad8     D0 E5 05 F1 | 	add	objptr, ##62416
1badc     F2 00 68 FC | 	wrlong	#0, objptr
1bae0     79 00 00 FF 
1bae4     92 E5 85 F1 | 	sub	objptr, ##62354
1bae8     F2 22 C2 FA | 	rdbyte	local03, objptr
1baec     11 25 E2 F8 | 	getbyte	local04, local03, #0
1baf0     80 24 06 FA | 	mul	local04, #128
1baf4     3A E4 85 F1 | 	sub	objptr, #58
1baf8     F2 26 02 FB | 	rdlong	local05, objptr
1bafc     13 2D 02 F6 | 	mov	local08, local05
1bb00     12 2D 02 F1 | 	add	local08, local04
1bb04     38 E4 05 F1 | 	add	objptr, #56
1bb08     F2 2E E2 FA | 	rdword	local09, objptr
1bb0c     17 1F 32 F9 | 	getword	local01, local09, #0
1bb10     0F 39 52 F6 | 	abs	local14, local01 wc
1bb14     01 38 46 F0 | 	shr	local14, #1
1bb18     1C 39 82 F6 | 	negc	local14, local14
1bb1c     1C 2D 02 F1 | 	add	local08, local14
1bb20     11 23 E2 F8 | 	getbyte	local03, local03, #0
1bb24     80 22 06 FA | 	mul	local03, #128
1bb28     13 25 02 F6 | 	mov	local04, local05
1bb2c     3C E4 85 F1 | 	sub	objptr, #60
1bb30     12 3F 02 F6 | 	mov	local17, local04
1bb34     11 3F 02 F1 | 	add	local17, local03
1bb38     80 3E 06 F1 | 	add	local17, #128
1bb3c                 | LR__2154
1bb3c     1F 2D 52 F2 | 	cmps	local08, local17 wc
1bb40     94 00 90 3D |  if_ae	jmp	#LR__2155
1bb44     3C E4 05 F1 | 	add	objptr, #60
1bb48     F2 20 E2 FA | 	rdword	local02, objptr
1bb4c     79 00 00 FF 
1bb50     94 E5 05 F1 | 	add	objptr, ##62356
1bb54     F2 24 02 FB | 	rdlong	local04, objptr
1bb58     01 24 66 F0 | 	shl	local04, #1
1bb5c     12 21 02 F1 | 	add	local02, local04
1bb60     79 00 00 FF 
1bb64     92 E5 85 F1 | 	sub	objptr, ##62354
1bb68     F2 28 C2 FA | 	rdbyte	local06, objptr
1bb6c     3E E4 85 F1 | 	sub	objptr, #62
1bb70     10 28 06 FA | 	mul	local06, #16
1bb74     04 28 06 F1 | 	add	local06, #4
1bb78     16 13 02 F6 | 	mov	arg01, local08
1bb7c     58 ED BF FD | 	call	#_pspeek
1bb80     FD 22 E2 F8 | 	getbyte	local03, result1, #0
1bb84     41 E4 05 F1 | 	add	objptr, #65
1bb88     F2 24 02 FB | 	rdlong	local04, objptr
1bb8c     04 E4 05 F1 | 	add	objptr, #4
1bb90     F2 1E 02 FB | 	rdlong	local01, objptr
1bb94     45 E4 85 F1 | 	sub	objptr, #69
1bb98     0F 27 02 F6 | 	mov	local05, local01
1bb9c     10 13 02 F6 | 	mov	arg01, local02
1bba0     14 15 02 F6 | 	mov	arg02, local06
1bba4     11 17 02 F6 | 	mov	arg03, local03
1bba8     12 19 02 F6 | 	mov	arg04, local04
1bbac     13 1B 02 F6 | 	mov	arg05, local05
1bbb0     64 16 B0 FD | 	call	#_hg010b_spin2_putcharxycgf
1bbb4     79 00 00 FF 
1bbb8     D0 E5 05 F1 | 	add	objptr, ##62416
1bbbc     F2 20 02 FB | 	rdlong	local02, objptr
1bbc0     01 20 06 F1 | 	add	local02, #1
1bbc4     F2 20 62 FC | 	wrlong	local02, objptr
1bbc8     79 00 00 FF 
1bbcc     D0 E5 85 F1 | 	sub	objptr, ##62416
1bbd0     01 2C 06 F1 | 	add	local08, #1
1bbd4     64 FF 9F FD | 	jmp	#LR__2154
1bbd8                 | LR__2155
1bbd8                 | LR__2156
1bbd8                 | '    
1bbd8                 | '   'backspace
1bbd8                 | '   if key4 = 42 then 
1bbd8     79 00 00 FF 
1bbdc     CC E5 05 F1 | 	add	objptr, ##62412
1bbe0     F2 20 02 FB | 	rdlong	local02, objptr
1bbe4     79 00 00 FF 
1bbe8     CC E5 85 F1 | 	sub	objptr, ##62412
1bbec     2A 20 0E F2 | 	cmp	local02, #42 wz
1bbf0     0C 02 90 5D |  if_ne	jmp	#LR__2162
1bbf4                 | '       if v.cursor_x>editor_spaces*2 then 
1bbf4     3C E4 05 F1 | 	add	objptr, #60
1bbf8     F2 20 E2 FA | 	rdword	local02, objptr
1bbfc     56 00 00 FF 
1bc00     F8 E5 05 F1 | 	add	objptr, ##44536
1bc04     F2 26 02 FB | 	rdlong	local05, objptr
1bc08     57 00 00 FF 
1bc0c     34 E4 85 F1 | 	sub	objptr, ##44596
1bc10     13 25 02 F6 | 	mov	local04, local05
1bc14     12 23 02 F6 | 	mov	local03, local04
1bc18     01 22 66 F0 | 	shl	local03, #1
1bc1c     11 21 5A F2 | 	cmps	local02, local03 wcz
1bc20     B8 01 90 ED |  if_be	jmp	#LR__2160
1bc24     3C E4 05 F1 | 	add	objptr, #60
1bc28     F2 12 E2 FA | 	rdword	arg01, objptr
1bc2c     02 12 86 F1 | 	sub	arg01, #2
1bc30     02 E4 05 F1 | 	add	objptr, #2
1bc34     F2 14 C2 FA | 	rdbyte	arg02, objptr
1bc38     3E E4 85 F1 | 	sub	objptr, #62
1bc3c     3C 17 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1bc40                 | '          position v.cursor_x-2,v.cursor_y
1bc40                 | '          for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
1bc40     3E E4 05 F1 | 	add	objptr, #62
1bc44     F2 22 C2 FA | 	rdbyte	local03, objptr
1bc48     11 25 E2 F8 | 	getbyte	local04, local03, #0
1bc4c     80 24 06 FA | 	mul	local04, #128
1bc50     3A E4 85 F1 | 	sub	objptr, #58
1bc54     F2 40 02 FB | 	rdlong	local18, objptr
1bc58     20 2D 02 F6 | 	mov	local08, local18
1bc5c     12 2D 02 F1 | 	add	local08, local04
1bc60     38 E4 05 F1 | 	add	objptr, #56
1bc64     F2 1E E2 FA | 	rdword	local01, objptr
1bc68     0F 39 52 F6 | 	abs	local14, local01 wc
1bc6c     01 38 46 F0 | 	shr	local14, #1
1bc70     1C 2D 82 F3 | 	sumc	local08, local14
1bc74     11 23 E2 F8 | 	getbyte	local03, local03, #0
1bc78     80 22 06 FA | 	mul	local03, #128
1bc7c     3C E4 85 F1 | 	sub	objptr, #60
1bc80     11 41 02 F1 | 	add	local18, local03
1bc84     80 40 06 F1 | 	add	local18, #128
1bc88                 | LR__2157
1bc88     20 2D 52 F2 | 	cmps	local08, local18 wc
1bc8c     20 00 90 3D |  if_ae	jmp	#LR__2158
1bc90     16 13 02 F6 | 	mov	arg01, local08
1bc94     01 12 06 F1 | 	add	arg01, #1
1bc98     3C EC BF FD | 	call	#_pspeek
1bc9c     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
1bca0     16 13 02 F6 | 	mov	arg01, local08
1bca4     E8 EB BF FD | 	call	#_pspoke
1bca8     01 2C 06 F1 | 	add	local08, #1
1bcac     D8 FF 9F FD | 	jmp	#LR__2157
1bcb0                 | LR__2158
1bcb0     3E E4 05 F1 | 	add	objptr, #62
1bcb4     F2 26 C2 FA | 	rdbyte	local05, objptr
1bcb8     80 26 06 FA | 	mul	local05, #128
1bcbc     3A E4 85 F1 | 	sub	objptr, #58
1bcc0     F2 12 02 FB | 	rdlong	arg01, objptr
1bcc4     04 E4 85 F1 | 	sub	objptr, #4
1bcc8     13 13 02 F1 | 	add	arg01, local05
1bccc     7F 12 06 F1 | 	add	arg01, #127
1bcd0     20 14 06 F6 | 	mov	arg02, #32
1bcd4     B8 EB BF FD | 	call	#_pspoke
1bcd8     79 00 00 FF 
1bcdc     D0 E5 05 F1 | 	add	objptr, ##62416
1bce0     F2 00 68 FC | 	wrlong	#0, objptr
1bce4     79 00 00 FF 
1bce8     92 E5 85 F1 | 	sub	objptr, ##62354
1bcec     F2 22 C2 FA | 	rdbyte	local03, objptr
1bcf0     11 25 E2 F8 | 	getbyte	local04, local03, #0
1bcf4     80 24 06 FA | 	mul	local04, #128
1bcf8     3A E4 85 F1 | 	sub	objptr, #58
1bcfc     F2 26 02 FB | 	rdlong	local05, objptr
1bd00     13 2D 02 F6 | 	mov	local08, local05
1bd04     12 2D 02 F1 | 	add	local08, local04
1bd08     38 E4 05 F1 | 	add	objptr, #56
1bd0c     F2 2E E2 FA | 	rdword	local09, objptr
1bd10     17 1F 32 F9 | 	getword	local01, local09, #0
1bd14     0F 39 52 F6 | 	abs	local14, local01 wc
1bd18     01 38 46 F0 | 	shr	local14, #1
1bd1c     1C 39 82 F6 | 	negc	local14, local14
1bd20     1C 2D 02 F1 | 	add	local08, local14
1bd24     11 23 E2 F8 | 	getbyte	local03, local03, #0
1bd28     80 22 06 FA | 	mul	local03, #128
1bd2c     13 25 02 F6 | 	mov	local04, local05
1bd30     3C E4 85 F1 | 	sub	objptr, #60
1bd34     12 43 02 F6 | 	mov	local19, local04
1bd38     11 43 02 F1 | 	add	local19, local03
1bd3c     80 42 06 F1 | 	add	local19, #128
1bd40                 | LR__2159
1bd40     21 2D 52 F2 | 	cmps	local08, local19 wc
1bd44     B8 00 90 3D |  if_ae	jmp	#LR__2161
1bd48     3C E4 05 F1 | 	add	objptr, #60
1bd4c     F2 20 E2 FA | 	rdword	local02, objptr
1bd50     79 00 00 FF 
1bd54     94 E5 05 F1 | 	add	objptr, ##62356
1bd58     F2 24 02 FB | 	rdlong	local04, objptr
1bd5c     01 24 66 F0 | 	shl	local04, #1
1bd60     12 21 02 F1 | 	add	local02, local04
1bd64     79 00 00 FF 
1bd68     92 E5 85 F1 | 	sub	objptr, ##62354
1bd6c     F2 28 C2 FA | 	rdbyte	local06, objptr
1bd70     3E E4 85 F1 | 	sub	objptr, #62
1bd74     10 28 06 FA | 	mul	local06, #16
1bd78     04 28 06 F1 | 	add	local06, #4
1bd7c     16 13 02 F6 | 	mov	arg01, local08
1bd80     54 EB BF FD | 	call	#_pspeek
1bd84     FD 22 E2 F8 | 	getbyte	local03, result1, #0
1bd88     41 E4 05 F1 | 	add	objptr, #65
1bd8c     F2 24 02 FB | 	rdlong	local04, objptr
1bd90     04 E4 05 F1 | 	add	objptr, #4
1bd94     F2 1E 02 FB | 	rdlong	local01, objptr
1bd98     45 E4 85 F1 | 	sub	objptr, #69
1bd9c     0F 27 02 F6 | 	mov	local05, local01
1bda0     10 13 02 F6 | 	mov	arg01, local02
1bda4     14 15 02 F6 | 	mov	arg02, local06
1bda8     11 17 02 F6 | 	mov	arg03, local03
1bdac     12 19 02 F6 | 	mov	arg04, local04
1bdb0     13 1B 02 F6 | 	mov	arg05, local05
1bdb4     60 14 B0 FD | 	call	#_hg010b_spin2_putcharxycgf
1bdb8     79 00 00 FF 
1bdbc     D0 E5 05 F1 | 	add	objptr, ##62416
1bdc0     F2 20 02 FB | 	rdlong	local02, objptr
1bdc4     01 20 06 F1 | 	add	local02, #1
1bdc8     F2 20 62 FC | 	wrlong	local02, objptr
1bdcc     79 00 00 FF 
1bdd0     D0 E5 85 F1 | 	sub	objptr, ##62416
1bdd4     01 2C 06 F1 | 	add	local08, #1
1bdd8     64 FF 9F FD | 	jmp	#LR__2159
1bddc                 | LR__2160
1bddc     77 01 00 FF 
1bde0     34 20 06 F6 | 	mov	local02, ##@LR__5258
1bde4     57 00 00 FF 
1bde8     1C E4 05 F1 | 	add	objptr, ##44572
1bdec     F2 20 62 FC | 	wrlong	local02, objptr
1bdf0     56 00 00 FF 
1bdf4     E0 E5 85 F1 | 	sub	objptr, ##44512
1bdf8     F2 08 58 FC | 	wrword	#4, objptr
1bdfc     3C E4 85 F1 | 	sub	objptr, #60
1be00                 | LR__2161
1be00                 | LR__2162
1be00                 | '      if key4= 82 then 
1be00     79 00 00 FF 
1be04     CC E5 05 F1 | 	add	objptr, ##62412
1be08     F2 20 02 FB | 	rdlong	local02, objptr
1be0c     79 00 00 FF 
1be10     CC E5 85 F1 | 	sub	objptr, ##62412
1be14     52 20 0E F2 | 	cmp	local02, #82 wz
1be18     50 00 90 5D |  if_ne	jmp	#LR__2163
1be1c                 | ' return cursor_y
1be1c     3E E4 05 F1 | 	add	objptr, #62
1be20     F2 20 C2 FA | 	rdbyte	local02, objptr
1be24     01 20 86 F1 | 	sub	local02, #1
1be28     79 00 00 FF 
1be2c     9A E5 05 F1 | 	add	objptr, ##62362
1be30     F2 20 62 FC | 	wrlong	local02, objptr
1be34     79 00 00 FF 
1be38     D8 E5 85 F1 | 	sub	objptr, ##62424
1be3c     00 20 56 F2 | 	cmps	local02, #0 wc
1be40     79 00 00 CF 
1be44     D8 E5 05 C1 |  if_b	add	objptr, ##62424
1be48     F2 00 68 CC |  if_b	wrlong	#0, objptr
1be4c     79 00 00 CF 
1be50     D8 E5 85 C1 |  if_b	sub	objptr, ##62424
1be54     79 00 00 FF 
1be58     D8 E5 05 F1 | 	add	objptr, ##62424
1be5c     F2 12 02 FB | 	rdlong	arg01, objptr
1be60     79 00 00 FF 
1be64     D8 E5 85 F1 | 	sub	objptr, ##62424
1be68     7C 15 B0 FD | 	call	#_hg010b_spin2_setcursory
1be6c                 | LR__2163
1be6c                 | '    if key4= 81 then
1be6c     79 00 00 FF 
1be70     CC E5 05 F1 | 	add	objptr, ##62412
1be74     F2 20 02 FB | 	rdlong	local02, objptr
1be78     79 00 00 FF 
1be7c     CC E5 85 F1 | 	sub	objptr, ##62412
1be80     51 20 0E F2 | 	cmp	local02, #81 wz
1be84     50 00 90 5D |  if_ne	jmp	#LR__2164
1be88                 | ' return cursor_y
1be88     3E E4 05 F1 | 	add	objptr, #62
1be8c     F2 20 C2 FA | 	rdbyte	local02, objptr
1be90     01 20 06 F1 | 	add	local02, #1
1be94     79 00 00 FF 
1be98     9A E5 05 F1 | 	add	objptr, ##62362
1be9c     F2 20 62 FC | 	wrlong	local02, objptr
1bea0     79 00 00 FF 
1bea4     D8 E5 85 F1 | 	sub	objptr, ##62424
1bea8     25 20 56 F2 | 	cmps	local02, #37 wc
1beac     79 00 00 3F 
1beb0     D8 E5 05 31 |  if_ae	add	objptr, ##62424
1beb4     F2 48 68 3C |  if_ae	wrlong	#36, objptr
1beb8     79 00 00 3F 
1bebc     D8 E5 85 31 |  if_ae	sub	objptr, ##62424
1bec0     79 00 00 FF 
1bec4     D8 E5 05 F1 | 	add	objptr, ##62424
1bec8     F2 12 02 FB | 	rdlong	arg01, objptr
1becc     79 00 00 FF 
1bed0     D8 E5 85 F1 | 	sub	objptr, ##62424
1bed4     10 15 B0 FD | 	call	#_hg010b_spin2_setcursory
1bed8                 | LR__2164
1bed8                 | '    if key4= 80 then
1bed8     79 00 00 FF 
1bedc     CC E5 05 F1 | 	add	objptr, ##62412
1bee0     F2 20 02 FB | 	rdlong	local02, objptr
1bee4     79 00 00 FF 
1bee8     CC E5 85 F1 | 	sub	objptr, ##62412
1beec     50 20 0E F2 | 	cmp	local02, #80 wz
1bef0     6C 00 90 5D |  if_ne	jmp	#LR__2165
1bef4                 | ' return cursor_x
1bef4     3C E4 05 F1 | 	add	objptr, #60
1bef8     F2 20 E2 FA | 	rdword	local02, objptr
1befc     02 20 86 F1 | 	sub	local02, #2
1bf00     79 00 00 FF 
1bf04     A0 E5 05 F1 | 	add	objptr, ##62368
1bf08     F2 20 62 FC | 	wrlong	local02, objptr
1bf0c                 | '      if cx<editor_spaces then cx=editor_spaces
1bf0c     22 00 00 FF 
1bf10     A8 E5 85 F1 | 	sub	objptr, ##17832
1bf14     F2 24 02 FB | 	rdlong	local04, objptr
1bf18     57 00 00 FF 
1bf1c     34 E4 85 F1 | 	sub	objptr, ##44596
1bf20     12 23 02 F6 | 	mov	local03, local04
1bf24     11 21 52 F2 | 	cmps	local02, local03 wc
1bf28     57 00 00 CF 
1bf2c     34 E4 05 C1 |  if_b	add	objptr, ##44596
1bf30     F2 20 02 CB |  if_b	rdlong	local02, objptr
1bf34     22 00 00 CF 
1bf38     A8 E5 05 C1 |  if_b	add	objptr, ##17832
1bf3c     F2 20 62 CC |  if_b	wrlong	local02, objptr
1bf40     79 00 00 CF 
1bf44     DC E5 85 C1 |  if_b	sub	objptr, ##62428
1bf48     79 00 00 FF 
1bf4c     DC E5 05 F1 | 	add	objptr, ##62428
1bf50     F2 12 02 FB | 	rdlong	arg01, objptr
1bf54     79 00 00 FF 
1bf58     DC E5 85 F1 | 	sub	objptr, ##62428
1bf5c     58 14 B0 FD | 	call	#_hg010b_spin2_setcursorx
1bf60                 | LR__2165
1bf60                 | '    if key4= 79 then
1bf60     79 00 00 FF 
1bf64     CC E5 05 F1 | 	add	objptr, ##62412
1bf68     F2 20 02 FB | 	rdlong	local02, objptr
1bf6c     79 00 00 FF 
1bf70     CC E5 85 F1 | 	sub	objptr, ##62412
1bf74     4F 20 0E F2 | 	cmp	local02, #79 wz
1bf78     50 00 90 5D |  if_ne	jmp	#LR__2166
1bf7c                 | ' return cursor_x
1bf7c     3C E4 05 F1 | 	add	objptr, #60
1bf80     F2 20 E2 FA | 	rdword	local02, objptr
1bf84     02 20 06 F1 | 	add	local02, #2
1bf88     79 00 00 FF 
1bf8c     A0 E5 05 F1 | 	add	objptr, ##62368
1bf90     F2 20 62 FC | 	wrlong	local02, objptr
1bf94                 | '      if cx>254  then cx=254 
1bf94     79 00 00 FF 
1bf98     DC E5 85 F1 | 	sub	objptr, ##62428
1bf9c     FF 20 56 F2 | 	cmps	local02, #255 wc
1bfa0     79 00 00 3F 
1bfa4     DC E5 05 31 |  if_ae	add	objptr, ##62428
1bfa8     F2 FC 69 3C |  if_ae	wrlong	#254, objptr
1bfac     79 00 00 3F 
1bfb0     DC E5 85 31 |  if_ae	sub	objptr, ##62428
1bfb4     79 00 00 FF 
1bfb8     DC E5 05 F1 | 	add	objptr, ##62428
1bfbc     F2 12 02 FB | 	rdlong	arg01, objptr
1bfc0     79 00 00 FF 
1bfc4     DC E5 85 F1 | 	sub	objptr, ##62428
1bfc8     EC 13 B0 FD | 	call	#_hg010b_spin2_setcursorx
1bfcc                 | LR__2166
1bfcc                 | '   ' print key3 and 255
1bfcc                 | '    
1bfcc                 | '    if key4=73 then ' ins
1bfcc     79 00 00 FF 
1bfd0     CC E5 05 F1 | 	add	objptr, ##62412
1bfd4     F2 28 02 FB | 	rdlong	local06, objptr
1bfd8     79 00 00 FF 
1bfdc     CC E5 85 F1 | 	sub	objptr, ##62412
1bfe0     49 28 0E F2 | 	cmp	local06, #73 wz
1bfe4     38 00 90 5D |  if_ne	jmp	#LR__2169
1bfe8     79 00 00 FF 
1bfec     B8 E5 05 F1 | 	add	objptr, ##62392
1bff0     F2 20 02 FB | 	rdlong	local02, objptr
1bff4     10 29 22 F6 | 	not	local06, local02
1bff8     F2 28 62 FC | 	wrlong	local06, objptr
1bffc                 | '      if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
1bffc     79 00 00 FF 
1c000     B8 E5 85 F1 | 	sub	objptr, ##62392
1c004     00 28 0E F2 | 	cmp	local06, #0 wz
1c008     0C 00 90 AD |  if_e	jmp	#LR__2167
1c00c     0E 12 06 F6 | 	mov	arg01, #14
1c010     28 02 B0 FD | 	call	#_hg010b_spin2_setcursorshape
1c014     08 00 90 FD | 	jmp	#LR__2168
1c018                 | LR__2167
1c018     00 12 06 F6 | 	mov	arg01, #0
1c01c     1C 02 B0 FD | 	call	#_hg010b_spin2_setcursorshape
1c020                 | LR__2168
1c020                 | LR__2169
1c020     79 00 00 FF 
1c024     C4 E5 05 F1 | 	add	objptr, ##62404
1c028     F2 00 68 FC | 	wrlong	#0, objptr
1c02c     79 00 00 FF 
1c030     C4 E5 85 F1 | 	sub	objptr, ##62404
1c034     88 EE 9F FD | 	jmp	#LR__2120
1c038     A7 F0 03 F6 | 	mov	ptra, fp
1c03c     B2 00 A0 FD | 	call	#popregs_
1c040                 | _program_ret
1c040     2D 00 64 FD | 	ret
1c044                 | 
1c044                 | ' '' this is not a main program.
1c044                 | ' 
1c044                 | ' '****************************************************************************************************************
1c044                 | ' '                                                                                                             	*
1c044                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
1c044                 | ' '                                                                                                            	*
1c044                 | ' ' base - HDMI base pin												*
1c044                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
1c044                 | ' '														*
1c044                 | ' '														*
1c044                 | ' '****************************************************************************************************************
1c044                 | ' 
1c044                 | ' pub start(base,mb):result |i
1c044                 | _hg010b_spin2_start
1c044                 | ' 
1c044                 | ' '--------------------------- initialize pointers and variables
1c044                 | ' 
1c044                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
1c044     34 E4 05 F1 | 	add	objptr, #52
1c048     F2 FA 01 F6 | 	mov	result1, objptr
1c04c     28 E4 85 F1 | 	sub	objptr, #40
1c050     F2 FA 61 FC | 	wrlong	result1, objptr
1c054                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
1c054                 | ' hdmibase:=base							' HDMI base pin, 8*n
1c054     18 E4 05 F1 | 	add	objptr, #24
1c058     F2 12 62 FC | 	wrlong	arg01, objptr
1c05c                 | ' mailbox_ptr:=mb		
1c05c     04 E4 05 F1 | 	add	objptr, #4
1c060     F2 14 62 FC | 	wrlong	arg02, objptr
1c064                 | ' mailbox0:=mb				' PSRAM mailbox pointer
1c064     C1 E5 05 F1 | 	add	objptr, #449
1c068     F2 14 62 FC | 	wrlong	arg02, objptr
1c06c                 | ' sprite_ptr:=@spr1ptr
1c06c     D8 E4 85 F1 | 	sub	objptr, #216
1c070     F2 FA 01 F6 | 	mov	result1, objptr
1c074     E5 E4 85 F1 | 	sub	objptr, #229
1c078     F2 FA 61 FC | 	wrlong	result1, objptr
1c07c                 | ' 
1c07c                 | ' 		'
1c07c                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
1c07c     E5 E4 05 F1 | 	add	objptr, #229
1c080     F2 FA 01 FB | 	rdlong	result1, objptr
1c084     D0 FA 05 F1 | 	add	result1, #208
1c088     FD 10 58 FC | 	wrword	#8, result1
1c08c                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
1c08c     F2 16 02 FB | 	rdlong	arg03, objptr
1c090     D2 16 06 F1 | 	add	arg03, #210
1c094     0B 21 58 FC | 	wrword	#16, arg03
1c098                 | ' leading_spaces:=0				'
1c098     A5 E5 05 F1 | 	add	objptr, #421
1c09c     F2 00 68 FC | 	wrlong	#0, objptr
1c0a0                 | ' 
1c0a0                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
1c0a0     99 E4 85 F1 | 	sub	objptr, #153
1c0a4     00 00 A0 FF 
1c0a8     F2 0E 68 FC | 	wrlong	##1073741831, objptr
1c0ac                 | ' emptydl[1]:=0
1c0ac     04 E4 05 F1 | 	add	objptr, #4
1c0b0     F2 00 68 FC | 	wrlong	#0, objptr
1c0b4                 | ' 
1c0b4                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
1c0b4                 | ' 
1c0b4                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
1c0b4     28 E5 85 F1 | 	sub	objptr, #296
1c0b8     F2 02 68 FC | 	wrlong	#1, objptr
1c0bc                 | ' if s_debug<>0
1c0bc                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
1c0bc     20 00 80 FF 
1c0c0     F2 00 68 FC | 	wrlong	##16384, objptr
1c0c4     F9 E4 85 F1 | 	sub	objptr, #249
1c0c8                 | ' setmode()							' set the mode, see below
1c0c8     EC 02 B0 FD | 	call	#_hg010b_spin2_setmode
1c0cc                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
1c0cc     49 E4 05 F1 | 	add	objptr, #73
1c0d0     F2 FA 01 F6 | 	mov	result1, objptr
1c0d4     35 E4 85 F1 | 	sub	objptr, #53
1c0d8     F2 FA 61 FC | 	wrlong	result1, objptr
1c0dc                 | ' cursor_ptr:=@cursor_x						
1c0dc     28 E4 05 F1 | 	add	objptr, #40
1c0e0     F2 16 02 F6 | 	mov	arg03, objptr
1c0e4     2C E4 85 F1 | 	sub	objptr, #44
1c0e8     F2 16 62 FC | 	wrlong	arg03, objptr
1c0ec                 | ' fontnum:=0  							' start with a PC type font 
1c0ec     55 E4 05 F1 | 	add	objptr, #85
1c0f0     F2 00 68 FC | 	wrlong	#0, objptr
1c0f4                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
1c0f4     1C E4 05 F1 | 	add	objptr, #28
1c0f8     F2 12 02 F6 | 	mov	arg01, objptr
1c0fc     81 E4 85 F1 | 	sub	objptr, #129
1c100     10 00 00 FF 
1c104     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
1c108     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1c10c     10 00 00 FF 
1c110     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
1c114     10 16 06 F6 | 	mov	arg03, #16
1c118     1C 29 B0 FD | 	call	#__system____builtin_memmove
1c11c                 | ' leading_spaces:=0
1c11c     01 00 00 FF 
1c120     B6 E4 05 F1 | 	add	objptr, ##694
1c124     F2 00 68 FC | 	wrlong	#0, objptr
1c128     01 00 00 FF 
1c12c     B6 E4 85 F1 | 	sub	objptr, ##694
1c130                 | ' '---------------------------- initialize a cursor (MSDOS type)
1c130                 | ' 
1c130                 | ' initcursor(154)
1c130     9A 12 06 F6 | 	mov	arg01, #154
1c134     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
1c138                 | ' 
1c138                 | ' '---------------------------- start the cog
1c138                 | ' 
1c138                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
1c138     10 00 00 FF 
1c13c     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
1c140     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1c144     10 00 00 FF 
1c148     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
1c14c     14 E4 05 F1 | 	add	objptr, #20
1c150     10 FA 05 F6 | 	mov	result1, #16
1c154     28 E4 61 FD | 	setq	objptr
1c158     0A FB F1 FC | 	coginit	result1, arg02 wc
1c15c     01 FA 65 C6 |  if_b	neg	result1, #1
1c160     1C E4 05 F1 | 	add	objptr, #28
1c164     F2 FA 61 FC | 	wrlong	result1, objptr
1c168     30 E4 85 F1 | 	sub	objptr, #48
1c16c                 | ' waitms(40)							' wait for stabilize
1c16c     28 12 06 F6 | 	mov	arg01, #40
1c170     98 2C B0 FD | 	call	#__system___waitms
1c174                 | ' return cog							' return the driver's cog #
1c174     30 E4 05 F1 | 	add	objptr, #48
1c178     F2 FA 01 FB | 	rdlong	result1, objptr
1c17c     30 E4 85 F1 | 	sub	objptr, #48
1c180                 | _hg010b_spin2_start_ret
1c180     2D 00 64 FD | 	ret
1c184                 | 
1c184                 | ' 
1c184                 | ' 
1c184                 | ' '**************************************************************************************************************** 
1c184                 | ' '                                                                                                             	*
1c184                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
1c184                 | ' '  Mode number - see start() above or bits below								*
1c184                 | ' '                                                                                                             	*
1c184                 | ' '****************************************************************************************************************
1c184                 | ' 
1c184                 | ' '---------------------------- initialize a cursor (MSDOS type)
1c184                 | ' pub initcursor(color) |i
1c184                 | _hg010b_spin2_initcursor
1c184     03 4A 05 F6 | 	mov	COUNT_, #3
1c188     A8 00 A0 FD | 	call	#pushregs_
1c18c     09 1F 02 F6 | 	mov	local01, arg01
1c190                 | ' 
1c190                 | ' cursor_x:=0							' place the cursor at 0:0
1c190     3C E4 05 F1 | 	add	objptr, #60
1c194     F2 00 58 FC | 	wrword	#0, objptr
1c198                 | ' cursor_y:=0
1c198     02 E4 05 F1 | 	add	objptr, #2
1c19c     F2 00 48 FC | 	wrbyte	#0, objptr
1c1a0                 | ' repeat i from 0 to 111
1c1a0     00 20 06 F6 | 	mov	local02, #0
1c1a4     F8 E5 05 F1 | 	add	objptr, #504
1c1a8     97 1A 48 FB | 	callpa	#(@LR__2172-@LR__2170)>>2,fcache_load_ptr_
1c1ac                 | LR__2170
1c1ac                 | '   cursor[i]:=0
1c1ac     10 23 02 F6 | 	mov	local03, local02
1c1b0     F2 22 02 F1 | 	add	local03, objptr
1c1b4     11 01 48 FC | 	wrbyte	#0, local03
1c1b8     01 20 06 F1 | 	add	local02, #1
1c1bc     70 20 56 F2 | 	cmps	local02, #112 wc
1c1c0     E8 FF 9F CD |  if_b	jmp	#LR__2170
1c1c4                 | ' repeat i from 112 to 127
1c1c4     70 20 06 F6 | 	mov	local02, #112
1c1c8                 | LR__2171
1c1c8                 | '   cursor[i]:=color  
1c1c8     10 23 02 F6 | 	mov	local03, local02
1c1cc     F2 22 02 F1 | 	add	local03, objptr
1c1d0     11 1F 42 FC | 	wrbyte	local01, local03
1c1d4     01 20 06 F1 | 	add	local02, #1
1c1d8     80 20 16 F2 | 	cmp	local02, #128 wc
1c1dc     E8 FF 9F CD |  if_b	jmp	#LR__2171
1c1e0                 | LR__2172
1c1e0                 | ' 'repeat i from 0 to 127
1c1e0                 | ' '  if ((i/8)//2)
1c1e0                 | ' '    cursor[i]:=15
1c1e0                 | ' '  else
1c1e0                 | ' '    cursor[i]:=0
1c1e0                 | ' '  if i>=120    
1c1e0                 | ' '    cursor[i]:=40
1c1e0                 | ' setspriteptr(17,@cursor)
1c1e0     F2 14 02 F6 | 	mov	arg02, objptr
1c1e4     01 00 00 FF 
1c1e8     36 E4 85 F1 | 	sub	objptr, ##566
1c1ec     11 12 06 F6 | 	mov	arg01, #17
1c1f0     E8 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
1c1f4                 | ' setspritesize(17,8,16)
1c1f4     11 12 06 F6 | 	mov	arg01, #17
1c1f8     08 14 06 F6 | 	mov	arg02, #8
1c1fc     10 16 06 F6 | 	mov	arg03, #16
1c200     68 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
1c204                 | ' setspritepos(17,0,0)
1c204     11 12 06 F6 | 	mov	arg01, #17
1c208     00 14 06 F6 | 	mov	arg02, #0
1c20c     00 16 06 F6 | 	mov	arg03, #0
1c210     F0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
1c214                 | ' cursorshape:=14
1c214     0B 00 00 FF 
1c218     C6 E4 05 F1 | 	add	objptr, ##5830
1c21c     F2 1C 68 FC | 	wrlong	#14, objptr
1c220                 | ' cursorcolor:=color
1c220     04 E4 85 F1 | 	sub	objptr, #4
1c224     F2 1E 62 FC | 	wrlong	local01, objptr
1c228     0B 00 00 FF 
1c22c     C2 E4 85 F1 | 	sub	objptr, ##5826
1c230     A7 F0 03 F6 | 	mov	ptra, fp
1c234     B2 00 A0 FD | 	call	#popregs_
1c238                 | _hg010b_spin2_initcursor_ret
1c238     2D 00 64 FD | 	ret
1c23c                 | 
1c23c                 | ' 
1c23c                 | ' pub setcursorshape(shape) | i
1c23c                 | _hg010b_spin2_setcursorshape
1c23c                 | ' 
1c23c                 | ' cursorshape:=shape
1c23c     0B 00 00 FF 
1c240     C6 E4 05 F1 | 	add	objptr, ##5830
1c244     F2 12 62 FC | 	wrlong	arg01, objptr
1c248                 | ' repeat i from 0 to (8*cursorshape)-1
1c248     00 00 06 F6 | 	mov	_var01, #0
1c24c     09 03 02 F6 | 	mov	_var02, arg01
1c250     03 02 66 F0 | 	shl	_var02, #3
1c254     01 02 86 F1 | 	sub	_var02, #1
1c258     00 02 56 F2 | 	cmps	_var02, #0 wc
1c25c     01 04 86 F6 | 	negc	_var03, #1
1c260     02 07 02 F6 | 	mov	_var04, _var03
1c264     02 03 02 F1 | 	add	_var02, _var03
1c268     0A 00 00 FF 
1c26c     90 E4 85 F1 | 	sub	objptr, ##5264
1c270     97 0C 48 FB | 	callpa	#(@LR__2181-@LR__2180)>>2,fcache_load_ptr_
1c274                 | LR__2180
1c274                 | '   cursor[i]:=0
1c274     00 05 02 F6 | 	mov	_var03, _var01
1c278     F2 04 02 F1 | 	add	_var03, objptr
1c27c     02 01 48 FC | 	wrbyte	#0, _var03
1c280     03 01 02 F1 | 	add	_var01, _var04
1c284     01 01 0A F2 | 	cmp	_var01, _var02 wz
1c288     E8 FF 9F 5D |  if_ne	jmp	#LR__2180
1c28c                 | LR__2181
1c28c                 | ' repeat i from 8*cursorshape to 127
1c28c     0A 00 00 FF 
1c290     90 E4 05 F1 | 	add	objptr, ##5264
1c294     F2 06 02 FB | 	rdlong	_var04, objptr
1c298     03 01 02 F6 | 	mov	_var01, _var04
1c29c     03 00 66 F0 | 	shl	_var01, #3
1c2a0     0B 00 00 FF 
1c2a4     C6 E4 85 F1 | 	sub	objptr, ##5830
1c2a8     03 06 66 F0 | 	shl	_var04, #3
1c2ac     80 06 56 F2 | 	cmps	_var04, #128 wc
1c2b0     01 04 A6 F6 | 	negnc	_var03, #1
1c2b4     7F 02 06 F6 | 	mov	_var02, #127
1c2b8     02 03 02 F1 | 	add	_var02, _var03
1c2bc     97 1A 48 FB | 	callpa	#(@LR__2183-@LR__2182)>>2,fcache_load_ptr_
1c2c0                 | LR__2182
1c2c0                 | '   cursor[i]:=cursorcolor
1c2c0     00 07 02 F6 | 	mov	_var04, _var01
1c2c4     01 00 00 FF 
1c2c8     36 E4 05 F1 | 	add	objptr, ##566
1c2cc     F2 06 02 F1 | 	add	_var04, objptr
1c2d0     0A 00 00 FF 
1c2d4     8C E4 05 F1 | 	add	objptr, ##5260
1c2d8     F2 12 02 FB | 	rdlong	arg01, objptr
1c2dc     0B 00 00 FF 
1c2e0     C2 E4 85 F1 | 	sub	objptr, ##5826
1c2e4     03 13 42 FC | 	wrbyte	arg01, _var04
1c2e8     02 01 02 F1 | 	add	_var01, _var03
1c2ec     01 01 0A F2 | 	cmp	_var01, _var02 wz
1c2f0     CC FF 9F 5D |  if_ne	jmp	#LR__2182
1c2f4                 | LR__2183
1c2f4                 | _hg010b_spin2_setcursorshape_ret
1c2f4     2D 00 64 FD | 	ret
1c2f8                 | 
1c2f8                 | ' 
1c2f8                 | ' pub setcursorcolor(color) | i
1c2f8                 | _hg010b_spin2_setcursorcolor
1c2f8                 | ' 
1c2f8                 | ' cursorcolor:=color
1c2f8     0B 00 00 FF 
1c2fc     C2 E4 05 F1 | 	add	objptr, ##5826
1c300     F2 12 62 FC | 	wrlong	arg01, objptr
1c304                 | ' repeat i from 0 to (8*cursorshape)-1
1c304     00 12 06 F6 | 	mov	arg01, #0
1c308     04 E4 05 F1 | 	add	objptr, #4
1c30c     F2 00 02 FB | 	rdlong	_var01, objptr
1c310     03 00 66 F0 | 	shl	_var01, #3
1c314     01 00 86 F1 | 	sub	_var01, #1
1c318     00 00 56 F2 | 	cmps	_var01, #0 wc
1c31c     01 02 86 F6 | 	negc	_var02, #1
1c320     01 05 02 F6 | 	mov	_var03, _var02
1c324     01 01 02 F1 | 	add	_var01, _var02
1c328     0A 00 00 FF 
1c32c     90 E4 85 F1 | 	sub	objptr, ##5264
1c330     97 0C 48 FB | 	callpa	#(@LR__2191-@LR__2190)>>2,fcache_load_ptr_
1c334                 | LR__2190
1c334                 | '   cursor[i]:=0
1c334     09 03 02 F6 | 	mov	_var02, arg01
1c338     F2 02 02 F1 | 	add	_var02, objptr
1c33c     01 01 48 FC | 	wrbyte	#0, _var02
1c340     02 13 02 F1 | 	add	arg01, _var03
1c344     00 13 0A F2 | 	cmp	arg01, _var01 wz
1c348     E8 FF 9F 5D |  if_ne	jmp	#LR__2190
1c34c                 | LR__2191
1c34c                 | ' repeat i from 8*cursorshape to 127
1c34c     0A 00 00 FF 
1c350     90 E4 05 F1 | 	add	objptr, ##5264
1c354     F2 04 02 FB | 	rdlong	_var03, objptr
1c358     02 13 02 F6 | 	mov	arg01, _var03
1c35c     03 12 66 F0 | 	shl	arg01, #3
1c360     0B 00 00 FF 
1c364     C6 E4 85 F1 | 	sub	objptr, ##5830
1c368     03 04 66 F0 | 	shl	_var03, #3
1c36c     80 04 56 F2 | 	cmps	_var03, #128 wc
1c370     01 02 A6 F6 | 	negnc	_var02, #1
1c374     7F 00 06 F6 | 	mov	_var01, #127
1c378     01 01 02 F1 | 	add	_var01, _var02
1c37c     97 1A 48 FB | 	callpa	#(@LR__2193-@LR__2192)>>2,fcache_load_ptr_
1c380                 | LR__2192
1c380                 | '   cursor[i]:=cursorcolor
1c380     09 05 02 F6 | 	mov	_var03, arg01
1c384     01 00 00 FF 
1c388     36 E4 05 F1 | 	add	objptr, ##566
1c38c     F2 04 02 F1 | 	add	_var03, objptr
1c390     0A 00 00 FF 
1c394     8C E4 05 F1 | 	add	objptr, ##5260
1c398     F2 06 02 FB | 	rdlong	_var04, objptr
1c39c     0B 00 00 FF 
1c3a0     C2 E4 85 F1 | 	sub	objptr, ##5826
1c3a4     02 07 42 FC | 	wrbyte	_var04, _var03
1c3a8     01 13 02 F1 | 	add	arg01, _var02
1c3ac     00 13 0A F2 | 	cmp	arg01, _var01 wz
1c3b0     CC FF 9F 5D |  if_ne	jmp	#LR__2192
1c3b4                 | LR__2193
1c3b4                 | _hg010b_spin2_setcursorcolor_ret
1c3b4     2D 00 64 FD | 	ret
1c3b8                 | 
1c3b8                 | '   
1c3b8                 | '   
1c3b8                 | '   
1c3b8                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
1c3b8                 | _hg010b_spin2_setmode
1c3b8     02 4A 05 F6 | 	mov	COUNT_, #2
1c3bc     A8 00 A0 FD | 	call	#pushregs_
1c3c0                 | ' 
1c3c0                 | ' 
1c3c0                 | ' dl_ptr:=@emptydl[0]
1c3c0     01 00 00 FF 
1c3c4     1D E4 05 F1 | 	add	objptr, ##541
1c3c8     F2 1A 02 F6 | 	mov	arg05, objptr
1c3cc     FD E5 85 F1 | 	sub	objptr, #509
1c3d0     F2 1A 62 FC | 	wrlong	arg05, objptr
1c3d4                 | ' 
1c3d4                 | ' if cog>0 
1c3d4     10 E4 05 F1 | 	add	objptr, #16
1c3d8     F2 1A 02 FB | 	rdlong	arg05, objptr
1c3dc     30 E4 85 F1 | 	sub	objptr, #48
1c3e0     01 1A 56 F2 | 	cmps	arg05, #1 wc
1c3e4                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
1c3e4     01 12 06 36 |  if_ae	mov	arg01, #1
1c3e8     30 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
1c3ec                 | ' xres:=1024
1c3ec     01 00 00 FF 
1c3f0     26 E4 05 F1 | 	add	objptr, ##550
1c3f4     02 00 80 FF 
1c3f8     F2 00 68 FC | 	wrlong	##1024, objptr
1c3fc                 | ' yres:=600
1c3fc     04 E4 05 F1 | 	add	objptr, #4
1c400     01 00 80 FF 
1c404     F2 B0 68 FC | 	wrlong	##600, objptr
1c408                 | ' ppl:=(timings[3])
1c408     10 00 00 FF 
1c40c     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
1c410     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1c414     51 E5 85 F1 | 	sub	objptr, #337
1c418     F2 1A 62 FC | 	wrlong	arg05, objptr
1c41c                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
1c41c     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
1c420     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1c424     01 1E 66 F0 | 	shl	local01, #1
1c428     80 E4 85 F1 | 	sub	objptr, #128
1c42c     F2 1E 62 FC | 	wrlong	local01, objptr
1c430                 | ' cpl1:=cpl '' todo remove
1c430     04 E4 05 F1 | 	add	objptr, #4
1c434     F2 1E 62 FC | 	wrlong	local01, objptr
1c438                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
1c438     02 00 00 FF 
1c43c     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
1c440     41 E4 85 F1 | 	sub	objptr, #65
1c444     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1c448                 | ' repeat i from 0 to 3
1c448     00 20 06 F6 | 	mov	local02, #0
1c44c     02 00 00 FF 
1c450     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
1c454     08 E4 05 F1 | 	add	objptr, #8
1c458     97 20 48 FB | 	callpa	#(@LR__2201-@LR__2200)>>2,fcache_load_ptr_
1c45c                 | LR__2200
1c45c                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
1c45c     10 1F 02 F6 | 	mov	local01, local02
1c460     02 1E 66 F0 | 	shl	local01, #2
1c464     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
1c468     F2 1A 02 FB | 	rdlong	arg05, objptr
1c46c     11 1A 66 F0 | 	shl	arg05, #17
1c470     0F 1F 02 FB | 	rdlong	local01, local01
1c474     0D 1F 02 F1 | 	add	local01, arg05
1c478     80 40 38 FF 
1c47c     00 1E 06 F1 | 	add	local01, ##1887502336
1c480     10 1B 02 F6 | 	mov	arg05, local02
1c484     02 1A 66 F0 | 	shl	arg05, #2
1c488     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
1c48c     0D 1F 62 FC | 	wrlong	local01, arg05
1c490     01 20 06 F1 | 	add	local02, #1
1c494     04 20 56 F2 | 	cmps	local02, #4 wc
1c498     C0 FF 9F CD |  if_b	jmp	#LR__2200
1c49c                 | LR__2201
1c49c     24 E4 85 F1 | 	sub	objptr, #36
1c4a0                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
1c4a0     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
1c4a4     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1c4a8     14 1E 66 FC | 	wrlong	local01, #20
1c4ac                 | ' hubset(timings[10])
1c4ac     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
1c4b0     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
1c4b4     10 00 00 FF 
1c4b8     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
1c4bc     00 12 62 FD | 	hubset	arg01
1c4c0                 | ' waitms(1)                                                   	' wait for stabilization
1c4c0     01 12 06 F6 | 	mov	arg01, #1
1c4c4     44 29 B0 FD | 	call	#__system___waitms
1c4c8     10 00 00 FF 
1c4cc     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
1c4d0     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1c4d4     61 E4 05 F1 | 	add	objptr, #97
1c4d8     F2 20 62 FC | 	wrlong	local02, objptr
1c4dc     10 1F 52 F6 | 	abs	local01, local02 wc
1c4e0     04 1E 46 F0 | 	shr	local01, #4
1c4e4     0F 1F 82 F6 | 	negc	local01, local01
1c4e8     9C E4 05 F1 | 	add	objptr, #156
1c4ec     F2 1E 62 FC | 	wrlong	local01, objptr
1c4f0     A4 E4 85 F1 | 	sub	objptr, #164
1c4f4     F2 20 02 FB | 	rdlong	local02, objptr
1c4f8     08 E4 05 F1 | 	add	objptr, #8
1c4fc     F2 1E 02 FB | 	rdlong	local01, objptr
1c500     0F 21 02 FD | 	qmul	local02, local01
1c504                 | ' lines:=timings[11]
1c504                 | ' t_lines:=lines/16
1c504                 | ' buflen:=cpl*lines						' framebuffer length in longs
1c504     29 E4 85 F1 | 	sub	objptr, #41
1c508     19 1E C6 F9 | 	decod	local01, #25
1c50c     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
1c510     18 20 62 FD | 	getqx	local02
1c514     F2 20 62 FC | 	wrlong	local02, objptr
1c518     38 E4 85 F1 | 	sub	objptr, #56
1c51c     02 20 66 F0 | 	shl	local02, #2
1c520     10 1F 82 F1 | 	sub	local01, local02
1c524     F2 1E 62 FC | 	wrlong	local01, objptr
1c528     FD E4 05 F1 | 	add	objptr, #253
1c52c     F2 20 02 FB | 	rdlong	local02, objptr
1c530     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1c534     0D 21 02 FD | 	qmul	local02, arg05
1c538                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
1c538                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
1c538     F9 E4 85 F1 | 	sub	objptr, #249
1c53c                 | ' mode_ptr:=@timings						' set pointers to timings
1c53c     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
1c540                 | ' graphmode:=1024+512+192+48							' det global variable
1c540                 | ' makedl(graphmode)							' make a DL for the mode
1c540     03 00 00 FF 
1c544     F0 12 06 F6 | 	mov	arg01, ##1776
1c548     18 20 62 FD | 	getqx	local02
1c54c     10 1F 82 F1 | 	sub	local01, local02
1c550     F2 1E 62 FC | 	wrlong	local01, objptr
1c554     14 E4 05 F1 | 	add	objptr, #20
1c558     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1c55c     79 E4 05 F1 | 	add	objptr, #121
1c560     03 00 80 FF 
1c564     F2 E0 69 FC | 	wrlong	##1776, objptr
1c568     91 E4 85 F1 | 	sub	objptr, #145
1c56c     10 00 00 FF 
1c570     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
1c574     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
1c578                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
1c578     F2 1E 02 FB | 	rdlong	local01, objptr
1c57c     DD E4 05 F1 | 	add	objptr, #221
1c580     F2 1E 62 FC | 	wrlong	local01, objptr
1c584                 | ' s_font_ptr:=font_ptr
1c584     D5 E4 85 F1 | 	sub	objptr, #213
1c588     F2 1E 02 FB | 	rdlong	local01, objptr
1c58c     D9 E4 05 F1 | 	add	objptr, #217
1c590     F2 1E 62 FC | 	wrlong	local01, objptr
1c594                 | ' s_lines:=lines
1c594     80 E4 85 F1 | 	sub	objptr, #128
1c598     F2 1E 02 FB | 	rdlong	local01, objptr
1c59c     84 E4 05 F1 | 	add	objptr, #132
1c5a0     F2 1E 62 FC | 	wrlong	local01, objptr
1c5a4                 | ' s_buflen:=buflen
1c5a4     AD E4 85 F1 | 	sub	objptr, #173
1c5a8     F2 1E 02 FB | 	rdlong	local01, objptr
1c5ac     B5 E4 05 F1 | 	add	objptr, #181
1c5b0     F2 1E 62 FC | 	wrlong	local01, objptr
1c5b4                 | ' s_cpl:=cpl
1c5b4     94 E4 85 F1 | 	sub	objptr, #148
1c5b8     F2 1E 02 FB | 	rdlong	local01, objptr
1c5bc     90 E4 05 F1 | 	add	objptr, #144
1c5c0     F2 1E 62 FC | 	wrlong	local01, objptr
1c5c4                 | ' s_cpl1:=cpl
1c5c4     90 E4 85 F1 | 	sub	objptr, #144
1c5c8     F2 1E 02 FB | 	rdlong	local01, objptr
1c5cc     98 E4 05 F1 | 	add	objptr, #152
1c5d0     F2 1E 62 FC | 	wrlong	local01, objptr
1c5d4                 | ' st_lines:=t_lines
1c5d4     0C E4 05 F1 | 	add	objptr, #12
1c5d8     F2 1E 02 FB | 	rdlong	local01, objptr
1c5dc     04 E4 05 F1 | 	add	objptr, #4
1c5e0     F2 1E 62 FC | 	wrlong	local01, objptr
1c5e4                 | ' ppl:=ppl/xzoom  
1c5e4     28 E4 85 F1 | 	sub	objptr, #40
1c5e8     F2 64 02 FB | 	rdlong	muldiva_, objptr
1c5ec     2C E4 05 F1 | 	add	objptr, #44
1c5f0     F2 66 02 FB | 	rdlong	muldivb_, objptr
1c5f4     05 E5 85 F1 | 	sub	objptr, #261
1c5f8     BA 00 A0 FD | 	call	#divide_
1c5fc     D9 E4 05 F1 | 	add	objptr, #217
1c600     F2 66 62 FC | 	wrlong	muldivb_, objptr
1c604                 | ' s_ppl:=ppl
1c604     1C E4 05 F1 | 	add	objptr, #28
1c608     F2 66 62 FC | 	wrlong	muldivb_, objptr
1c60c     F5 E4 85 F1 | 	sub	objptr, #245
1c610                 | ' waitms(20)							' wait 
1c610     14 12 06 F6 | 	mov	arg01, #20
1c614     F4 27 B0 FD | 	call	#__system___waitms
1c618                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1c618     04 E4 05 F1 | 	add	objptr, #4
1c61c     F2 12 02 FB | 	rdlong	arg01, objptr
1c620     04 E4 85 F1 | 	sub	objptr, #4
1c624     F2 16 02 FB | 	rdlong	arg03, objptr
1c628     09 17 82 F1 | 	sub	arg03, arg01
1c62c     20 14 06 F6 | 	mov	arg02, #32
1c630     00 18 06 F6 | 	mov	arg04, #0
1c634     01 1A 06 F6 | 	mov	arg05, #1
1c638     0B 00 00 FF 
1c63c     CC E4 05 F1 | 	add	objptr, ##5836
1c640     E8 19 B0 FD | 	call	#_psram_spin2_fill
1c644     0B 00 00 FF 
1c648     CC E4 85 F1 | 	sub	objptr, ##5836
1c64c     A7 F0 03 F6 | 	mov	ptra, fp
1c650     B2 00 A0 FD | 	call	#popregs_
1c654                 | _hg010b_spin2_setmode_ret
1c654     2D 00 64 FD | 	ret
1c658                 | 
1c658                 | ' 
1c658                 | ' '****************************************************************************************************************
1c658                 | ' '                                                                                                             	*
1c658                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
1c658                 | ' '                                                                                                             	*
1c658                 | ' '****************************************************************************************************************
1c658                 | ' 
1c658                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
1c658                 | _hg010b_spin2_makedl
1c658                 | ' 
1c658                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
1c658                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
1c658                 | ' repeat i from 0 to 11                                                           ' clear DL
1c658     00 00 06 F6 | 	mov	_var01, #0
1c65c     ED E5 05 F1 | 	add	objptr, #493
1c660     97 0E 48 FB | 	callpa	#(@LR__2211-@LR__2210)>>2,fcache_load_ptr_
1c664                 | LR__2210
1c664                 | '   displaylist[i]:=0 
1c664     00 03 02 F6 | 	mov	_var02, _var01
1c668     02 02 66 F0 | 	shl	_var02, #2
1c66c     F2 02 02 F1 | 	add	_var02, objptr
1c670     01 01 68 FC | 	wrlong	#0, _var02
1c674     01 00 06 F1 | 	add	_var01, #1
1c678     0C 00 56 F2 | 	cmps	_var01, #12 wc
1c67c     E4 FF 9F CD |  if_b	jmp	#LR__2210
1c680                 | LR__2211
1c680                 | '                         ' 
1c680                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
1c680     8C E5 85 F1 | 	sub	objptr, #396
1c684     F2 02 02 FB | 	rdlong	_var02, objptr
1c688     14 02 66 F0 | 	shl	_var02, #20
1c68c     01 02 06 F1 | 	add	_var02, #1
1c690     04 E4 85 F1 | 	sub	objptr, #4
1c694     F2 00 02 FB | 	rdlong	_var01, objptr
1c698     02 00 66 F0 | 	shl	_var01, #2
1c69c     04 00 66 F0 | 	shl	_var01, #4
1c6a0     00 03 02 F1 | 	add	_var02, _var01
1c6a4     90 E5 05 F1 | 	add	objptr, #400
1c6a8     F2 02 62 FC | 	wrlong	_var02, objptr
1c6ac     ED E5 85 F1 | 	sub	objptr, #493
1c6b0                 | ' displaylist[1]:=buf_ptr<<4+%10  
1c6b0     F2 02 02 FB | 	rdlong	_var02, objptr
1c6b4     04 02 66 F0 | 	shl	_var02, #4
1c6b8     02 02 06 F1 | 	add	_var02, #2
1c6bc     F1 E5 05 F1 | 	add	objptr, #497
1c6c0     F2 02 62 FC | 	wrlong	_var02, objptr
1c6c4                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
1c6c4     04 E4 85 F1 | 	sub	objptr, #4
1c6c8     F2 02 02 F6 | 	mov	_var02, objptr
1c6cc     CD E5 85 F1 | 	sub	objptr, #461
1c6d0     F2 02 62 FC | 	wrlong	_var02, objptr
1c6d4     20 E4 85 F1 | 	sub	objptr, #32
1c6d8                 | _hg010b_spin2_makedl_ret
1c6d8     2D 00 64 FD | 	ret
1c6dc                 | 
1c6dc                 | ' 
1c6dc                 | ' 
1c6dc                 | ' '****************************************************************************************************************
1c6dc                 | ' '                                                                        					*
1c6dc                 | ' '  Graphic primitives                                                    					*
1c6dc                 | ' '                                                                        					*
1c6dc                 | ' '****************************************************************************************************************
1c6dc                 | ' 
1c6dc                 | ' pub setspriteptr(num,ptr)
1c6dc                 | _hg010b_spin2_setspriteptr
1c6dc                 | ' long[@spr1ptr+12*num]:=ptr
1c6dc     11 E5 05 F1 | 	add	objptr, #273
1c6e0     F2 00 02 F6 | 	mov	_var01, objptr
1c6e4     09 03 02 F6 | 	mov	_var02, arg01
1c6e8     01 02 66 F0 | 	shl	_var02, #1
1c6ec     09 03 02 F1 | 	add	_var02, arg01
1c6f0     02 02 66 F0 | 	shl	_var02, #2
1c6f4     01 01 02 F1 | 	add	_var01, _var02
1c6f8     00 15 62 FC | 	wrlong	arg02, _var01
1c6fc     11 E5 85 F1 | 	sub	objptr, #273
1c700                 | _hg010b_spin2_setspriteptr_ret
1c700     2D 00 64 FD | 	ret
1c704                 | 
1c704                 | ' 
1c704                 | ' pub setspritepos(num,x,y)
1c704                 | _hg010b_spin2_setspritepos
1c704                 | ' if y>601
1c704     01 00 00 FF 
1c708     5A 16 56 F2 | 	cmps	arg03, ##602 wc
1c70c                 | '   y:=601
1c70c     01 00 00 3F 
1c710     59 16 06 36 |  if_ae	mov	arg03, ##601
1c714                 | ' if x>1024
1c714     02 00 00 FF 
1c718     01 14 56 F2 | 	cmps	arg02, ##1025 wc
1c71c                 | '   x:=1024
1c71c     0A 14 C6 39 |  if_ae	decod	arg02, #10
1c720                 | ' word[@spr1ptr+12*num+4]:=x
1c720     11 E5 05 F1 | 	add	objptr, #273
1c724     F2 00 02 F6 | 	mov	_var01, objptr
1c728     09 03 02 F6 | 	mov	_var02, arg01
1c72c     01 02 66 F0 | 	shl	_var02, #1
1c730     09 03 02 F1 | 	add	_var02, arg01
1c734     02 02 66 F0 | 	shl	_var02, #2
1c738     01 01 02 F1 | 	add	_var01, _var02
1c73c     04 00 06 F1 | 	add	_var01, #4
1c740     00 15 52 FC | 	wrword	arg02, _var01
1c744                 | ' word[@spr1ptr+12*num+6]:=y
1c744     F2 00 02 F6 | 	mov	_var01, objptr
1c748     09 03 02 F6 | 	mov	_var02, arg01
1c74c     01 02 66 F0 | 	shl	_var02, #1
1c750     09 03 02 F1 | 	add	_var02, arg01
1c754     02 02 66 F0 | 	shl	_var02, #2
1c758     01 01 02 F1 | 	add	_var01, _var02
1c75c     06 00 06 F1 | 	add	_var01, #6
1c760     00 17 52 FC | 	wrword	arg03, _var01
1c764     11 E5 85 F1 | 	sub	objptr, #273
1c768                 | _hg010b_spin2_setspritepos_ret
1c768     2D 00 64 FD | 	ret
1c76c                 | 
1c76c                 | ' 
1c76c                 | ' pub setspritesize(num,w,h)
1c76c                 | _hg010b_spin2_setspritesize
1c76c                 | ' word[@spr1ptr+12*num+8]:=w
1c76c     11 E5 05 F1 | 	add	objptr, #273
1c770     F2 00 02 F6 | 	mov	_var01, objptr
1c774     09 03 02 F6 | 	mov	_var02, arg01
1c778     01 02 66 F0 | 	shl	_var02, #1
1c77c     09 03 02 F1 | 	add	_var02, arg01
1c780     02 02 66 F0 | 	shl	_var02, #2
1c784     01 01 02 F1 | 	add	_var01, _var02
1c788     08 00 06 F1 | 	add	_var01, #8
1c78c     00 15 52 FC | 	wrword	arg02, _var01
1c790                 | ' word[@spr1ptr+12*num+10]:=h
1c790     F2 00 02 F6 | 	mov	_var01, objptr
1c794     09 03 02 F6 | 	mov	_var02, arg01
1c798     01 02 66 F0 | 	shl	_var02, #1
1c79c     09 03 02 F1 | 	add	_var02, arg01
1c7a0     02 02 66 F0 | 	shl	_var02, #2
1c7a4     01 01 02 F1 | 	add	_var01, _var02
1c7a8     0A 00 06 F1 | 	add	_var01, #10
1c7ac     00 17 52 FC | 	wrword	arg03, _var01
1c7b0     11 E5 85 F1 | 	sub	objptr, #273
1c7b4                 | _hg010b_spin2_setspritesize_ret
1c7b4     2D 00 64 FD | 	ret
1c7b8                 | 
1c7b8                 | ' 
1c7b8                 | ' 
1c7b8                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
1c7b8                 | ' 
1c7b8                 | ' 
1c7b8                 | ' pub putpixel(x,y,c)
1c7b8                 | _hg010b_spin2_putpixel
1c7b8     04 4A 05 F6 | 	mov	COUNT_, #4
1c7bc     A8 00 A0 FD | 	call	#pushregs_
1c7c0     09 1F 02 F6 | 	mov	local01, arg01
1c7c4                 | ' 
1c7c4                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
1c7c4     00 20 06 F6 | 	mov	local02, #0
1c7c8     00 1E 56 F2 | 	cmps	local01, #0 wc
1c7cc     01 20 66 36 |  if_ae	neg	local02, #1
1c7d0     E9 E4 05 F1 | 	add	objptr, #233
1c7d4     F2 1A 02 FB | 	rdlong	arg05, objptr
1c7d8     02 1A 66 F0 | 	shl	arg05, #2
1c7dc     0D 1F 52 F2 | 	cmps	local01, arg05 wc
1c7e0     11 23 A2 F1 | 	subx	local03, local03
1c7e4     11 21 02 F5 | 	and	local02, local03
1c7e8     00 22 06 F6 | 	mov	local03, #0
1c7ec     00 14 56 F2 | 	cmps	arg02, #0 wc
1c7f0     01 22 66 36 |  if_ae	neg	local03, #1
1c7f4     11 21 02 F5 | 	and	local02, local03
1c7f8     04 E4 85 F1 | 	sub	objptr, #4
1c7fc     F2 22 02 FB | 	rdlong	local03, objptr
1c800     E5 E4 85 F1 | 	sub	objptr, #229
1c804     11 15 52 F2 | 	cmps	arg02, local03 wc
1c808     12 25 A2 F1 | 	subx	local04, local04
1c80c     12 21 CA F7 | 	test	local02, local04 wz
1c810     48 00 90 AD |  if_e	jmp	#LR__2220
1c814     DD E4 05 F1 | 	add	objptr, #221
1c818     F2 12 02 FB | 	rdlong	arg01, objptr
1c81c     14 E4 05 F1 | 	add	objptr, #20
1c820     F2 24 02 FB | 	rdlong	local04, objptr
1c824     02 24 66 F0 | 	shl	local04, #2
1c828     0A 25 02 FD | 	qmul	local04, arg02
1c82c                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1c82c     0B 15 02 F6 | 	mov	arg02, arg03
1c830     01 16 06 F6 | 	mov	arg03, #1
1c834     00 18 06 F6 | 	mov	arg04, #0
1c838     01 1A 06 F6 | 	mov	arg05, #1
1c83c     0A 00 00 FF 
1c840     DB E5 05 F1 | 	add	objptr, ##5595
1c844     18 24 62 FD | 	getqx	local04
1c848     0F 25 02 F1 | 	add	local04, local01
1c84c     12 13 02 F1 | 	add	arg01, local04
1c850     D8 17 B0 FD | 	call	#_psram_spin2_fill
1c854     0B 00 00 FF 
1c858     CC E4 85 F1 | 	sub	objptr, ##5836
1c85c                 | LR__2220
1c85c     A7 F0 03 F6 | 	mov	ptra, fp
1c860     B2 00 A0 FD | 	call	#popregs_
1c864                 | _hg010b_spin2_putpixel_ret
1c864     2D 00 64 FD | 	ret
1c868                 | 
1c868                 | ' 
1c868                 | ' pub putpixel2(x,y,c)
1c868                 | _hg010b_spin2_putpixel2
1c868     02 4A 05 F6 | 	mov	COUNT_, #2
1c86c     A8 00 A0 FD | 	call	#pushregs_
1c870     DD E4 05 F1 | 	add	objptr, #221
1c874     F2 1E 02 FB | 	rdlong	local01, objptr
1c878     14 E4 05 F1 | 	add	objptr, #20
1c87c     F2 1A 02 FB | 	rdlong	arg05, objptr
1c880     02 1A 66 F0 | 	shl	arg05, #2
1c884     0A 1B 02 FD | 	qmul	arg05, arg02
1c888                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1c888     0B 15 02 F6 | 	mov	arg02, arg03
1c88c     01 16 06 F6 | 	mov	arg03, #1
1c890     00 18 06 F6 | 	mov	arg04, #0
1c894     01 1A 06 F6 | 	mov	arg05, #1
1c898     0A 00 00 FF 
1c89c     DB E5 05 F1 | 	add	objptr, ##5595
1c8a0     18 20 62 FD | 	getqx	local02
1c8a4     09 21 02 F1 | 	add	local02, arg01
1c8a8     10 1F 02 F1 | 	add	local01, local02
1c8ac     0F 13 02 F6 | 	mov	arg01, local01
1c8b0     78 17 B0 FD | 	call	#_psram_spin2_fill
1c8b4     0B 00 00 FF 
1c8b8     CC E4 85 F1 | 	sub	objptr, ##5836
1c8bc     A7 F0 03 F6 | 	mov	ptra, fp
1c8c0     B2 00 A0 FD | 	call	#popregs_
1c8c4                 | _hg010b_spin2_putpixel2_ret
1c8c4     2D 00 64 FD | 	ret
1c8c8                 | 
1c8c8                 | ' 
1c8c8                 | ' pub getpixel2(x,y): c 
1c8c8                 | _hg010b_spin2_getpixel2
1c8c8     02 4A 05 F6 | 	mov	COUNT_, #2
1c8cc     A8 00 A0 FD | 	call	#pushregs_
1c8d0     0C F0 07 F1 | 	add	ptra, #12
1c8d4     04 4E 05 F1 | 	add	fp, #4
1c8d8     A7 12 62 FC | 	wrlong	arg01, fp
1c8dc     04 4E 05 F1 | 	add	fp, #4
1c8e0     A7 14 62 FC | 	wrlong	arg02, fp
1c8e4     08 4E 85 F1 | 	sub	fp, #8
1c8e8     A7 00 68 FC | 	wrlong	#0, fp
1c8ec     A7 12 02 F6 | 	mov	arg01, fp
1c8f0     DD E4 05 F1 | 	add	objptr, #221
1c8f4     F2 14 02 FB | 	rdlong	arg02, objptr
1c8f8     14 E4 05 F1 | 	add	objptr, #20
1c8fc     F2 16 02 FB | 	rdlong	arg03, objptr
1c900     02 16 66 F0 | 	shl	arg03, #2
1c904     08 4E 05 F1 | 	add	fp, #8
1c908     A7 FA 01 FB | 	rdlong	result1, fp
1c90c     FD 16 02 FD | 	qmul	arg03, result1
1c910                 | ' 
1c910                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
1c910     04 4E 85 F1 | 	sub	fp, #4
1c914     A7 1E 02 FB | 	rdlong	local01, fp
1c918     04 4E 85 F1 | 	sub	fp, #4
1c91c     01 16 06 F6 | 	mov	arg03, #1
1c920     0A 00 00 FF 
1c924     DB E5 05 F1 | 	add	objptr, ##5595
1c928     18 20 62 FD | 	getqx	local02
1c92c     0F 21 02 F1 | 	add	local02, local01
1c930     10 15 02 F1 | 	add	arg02, local02
1c934     BC 15 B0 FD | 	call	#_psram_spin2_read1
1c938     0B 00 00 FF 
1c93c     CC E4 85 F1 | 	sub	objptr, ##5836
1c940                 | ' return c
1c940     A7 FA 01 FB | 	rdlong	result1, fp
1c944     A7 F0 03 F6 | 	mov	ptra, fp
1c948     B2 00 A0 FD | 	call	#popregs_
1c94c                 | _hg010b_spin2_getpixel2_ret
1c94c     2D 00 64 FD | 	ret
1c950                 | 
1c950                 | '   
1c950                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
1c950                 | ' 
1c950                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
1c950                 | _hg010b_spin2_fastline
1c950     02 4A 05 F6 | 	mov	COUNT_, #2
1c954     A8 00 A0 FD | 	call	#pushregs_
1c958     09 1F 02 F6 | 	mov	local01, arg01
1c95c     0A 21 02 F6 | 	mov	local02, arg02
1c960                 | ' 
1c960                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
1c960     00 16 56 F2 | 	cmps	arg03, #0 wc
1c964     F4 00 90 CD |  if_b	jmp	#LR__2230
1c968     01 00 00 FF 
1c96c     2A E4 05 F1 | 	add	objptr, ##554
1c970     F2 1A 02 FB | 	rdlong	arg05, objptr
1c974     01 00 00 FF 
1c978     2A E4 85 F1 | 	sub	objptr, ##554
1c97c     0D 17 52 F2 | 	cmps	arg03, arg05 wc
1c980     D8 00 90 3D |  if_ae	jmp	#LR__2230
1c984     00 1E 56 F2 | 	cmps	local01, #0 wc
1c988     00 20 56 C2 |  if_b	cmps	local02, #0 wc
1c98c     CC 00 90 CD |  if_b	jmp	#LR__2230
1c990     01 00 00 FF 
1c994     26 E4 05 F1 | 	add	objptr, ##550
1c998     F2 1A 02 FB | 	rdlong	arg05, objptr
1c99c     01 00 00 FF 
1c9a0     26 E4 85 F1 | 	sub	objptr, ##550
1c9a4     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
1c9a8     01 00 00 1F 
1c9ac     26 E4 05 11 |  if_a	add	objptr, ##550
1c9b0     F2 12 02 1B |  if_a	rdlong	arg01, objptr
1c9b4     01 00 00 1F 
1c9b8     26 E4 85 11 |  if_a	sub	objptr, ##550
1c9bc     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
1c9c0                 | '   return
1c9c0     98 00 90 1D |  if_a	jmp	#LR__2230
1c9c4     10 1F 5A F2 | 	cmps	local01, local02 wcz
1c9c8     0F 1B 02 16 |  if_a	mov	arg05, local01
1c9cc     10 1F 02 16 |  if_a	mov	local01, local02
1c9d0     0D 21 02 16 |  if_a	mov	local02, arg05
1c9d4     00 1E 56 F2 | 	cmps	local01, #0 wc
1c9d8     00 1E 06 C6 |  if_b	mov	local01, #0
1c9dc     01 00 00 FF 
1c9e0     26 E4 05 F1 | 	add	objptr, ##550
1c9e4     F2 1A 02 FB | 	rdlong	arg05, objptr
1c9e8     01 00 00 FF 
1c9ec     26 E4 85 F1 | 	sub	objptr, ##550
1c9f0     0D 21 52 F2 | 	cmps	local02, arg05 wc
1c9f4     01 00 00 3F 
1c9f8     26 E4 05 31 |  if_ae	add	objptr, ##550
1c9fc     F2 20 02 3B |  if_ae	rdlong	local02, objptr
1ca00     01 00 00 3F 
1ca04     26 E4 85 31 |  if_ae	sub	objptr, ##550
1ca08     DD E4 05 F1 | 	add	objptr, #221
1ca0c     F2 12 02 FB | 	rdlong	arg01, objptr
1ca10     14 E4 05 F1 | 	add	objptr, #20
1ca14     F2 1A 02 FB | 	rdlong	arg05, objptr
1ca18     02 1A 66 F0 | 	shl	arg05, #2
1ca1c     0B 1B 02 FD | 	qmul	arg05, arg03
1ca20                 | ' if x1>x2
1ca20                 | '   x1,x2:=x2,x1
1ca20                 | ' if x1<0 
1ca20                 | '   x1:=0
1ca20                 | ' if x2>=xres
1ca20                 | '   x2:=xres-1  
1ca20     01 20 86 31 |  if_ae	sub	local02, #1
1ca24                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
1ca24     01 16 06 F6 | 	mov	arg03, #1
1ca28     10 17 02 F1 | 	add	arg03, local02
1ca2c     0F 17 82 F1 | 	sub	arg03, local01
1ca30     0C 15 02 F6 | 	mov	arg02, arg04
1ca34     00 18 06 F6 | 	mov	arg04, #0
1ca38     01 1A 06 F6 | 	mov	arg05, #1
1ca3c     0A 00 00 FF 
1ca40     DB E5 05 F1 | 	add	objptr, ##5595
1ca44     18 20 62 FD | 	getqx	local02
1ca48     0F 21 02 F1 | 	add	local02, local01
1ca4c     10 13 02 F1 | 	add	arg01, local02
1ca50     D8 15 B0 FD | 	call	#_psram_spin2_fill
1ca54     0B 00 00 FF 
1ca58     CC E4 85 F1 | 	sub	objptr, ##5836
1ca5c                 | LR__2230
1ca5c     A7 F0 03 F6 | 	mov	ptra, fp
1ca60     B2 00 A0 FD | 	call	#popregs_
1ca64                 | _hg010b_spin2_fastline_ret
1ca64     2D 00 64 FD | 	ret
1ca68                 | 
1ca68                 | ' 
1ca68                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
1ca68                 | _hg010b_spin2_draw
1ca68     0E 4A 05 F6 | 	mov	COUNT_, #14
1ca6c     A8 00 A0 FD | 	call	#pushregs_
1ca70     09 1F 02 F6 | 	mov	local01, arg01
1ca74     0A 21 02 F6 | 	mov	local02, arg02
1ca78     0B 23 02 F6 | 	mov	local03, arg03
1ca7c     0C 25 02 F6 | 	mov	local04, arg04
1ca80     0D 27 02 F6 | 	mov	local05, arg05
1ca84                 | ' 
1ca84                 | ' if (y1==y2)
1ca84     12 21 0A F2 | 	cmp	local02, local04 wz
1ca88     18 00 90 5D |  if_ne	jmp	#LR__2240
1ca8c                 | '   fastline(x1,x2,y1,c)
1ca8c     0F 13 02 F6 | 	mov	arg01, local01
1ca90     11 15 02 F6 | 	mov	arg02, local03
1ca94     10 17 02 F6 | 	mov	arg03, local02
1ca98     13 19 02 F6 | 	mov	arg04, local05
1ca9c     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
1caa0     F8 00 90 FD | 	jmp	#LR__2246
1caa4                 | LR__2240
1caa4                 | ' else  
1caa4                 | '   x:=x1
1caa4     0F 29 02 F6 | 	mov	local06, local01
1caa8                 | '   y:=y1
1caa8     10 2B 02 F6 | 	mov	local07, local02
1caac                 | ' 
1caac                 | '   if (x1<x2) 
1caac     11 1F 52 F2 | 	cmps	local01, local03 wc
1cab0                 | '     xi:=1
1cab0     01 2C 06 C6 |  if_b	mov	local08, #1
1cab4                 | '     dx:=x2-x1
1cab4     11 2F 02 C6 |  if_b	mov	local09, local03
1cab8     0F 2F 82 C1 |  if_b	sub	local09, local01
1cabc                 | '   else
1cabc                 | '     xi:=-1
1cabc     01 2C 66 36 |  if_ae	neg	local08, #1
1cac0                 | '     dx:=x1-x2
1cac0     11 1F 82 31 |  if_ae	sub	local01, local03
1cac4     0F 2F 02 36 |  if_ae	mov	local09, local01
1cac8                 | '   
1cac8                 | '   if (y1<y2) 
1cac8     12 21 52 F2 | 	cmps	local02, local04 wc
1cacc                 | '     yi:=1
1cacc     01 30 06 C6 |  if_b	mov	local10, #1
1cad0                 | '     dy:=y2-y1
1cad0     12 33 02 C6 |  if_b	mov	local11, local04
1cad4     10 33 82 C1 |  if_b	sub	local11, local02
1cad8                 | '   else
1cad8                 | '     yi:=-1
1cad8     01 30 66 36 |  if_ae	neg	local10, #1
1cadc                 | '     dy:=y1-y2
1cadc     12 21 82 31 |  if_ae	sub	local02, local04
1cae0     10 33 02 36 |  if_ae	mov	local11, local02
1cae4                 | ' 
1cae4                 | '   putpixel(x,y,c)
1cae4     13 17 02 F6 | 	mov	arg03, local05
1cae8     14 13 02 F6 | 	mov	arg01, local06
1caec     15 15 02 F6 | 	mov	arg02, local07
1caf0     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
1caf4                 | ' 
1caf4                 | '   if (dx>dy)
1caf4     19 2F 5A F2 | 	cmps	local09, local11 wcz
1caf8     50 00 90 ED |  if_be	jmp	#LR__2242
1cafc                 | '     ai:=(dy-dx)*2
1cafc     19 35 02 F6 | 	mov	local12, local11
1cb00     17 35 82 F1 | 	sub	local12, local09
1cb04     01 34 66 F0 | 	shl	local12, #1
1cb08                 | '     bi:=dy*2
1cb08     01 32 66 F0 | 	shl	local11, #1
1cb0c     19 37 02 F6 | 	mov	local13, local11
1cb10                 | '     d:= bi-dx
1cb10     1B 39 02 F6 | 	mov	local14, local13
1cb14     17 39 82 F1 | 	sub	local14, local09
1cb18                 | '     repeat while (x<>x2) 
1cb18                 | LR__2241
1cb18     11 29 0A F2 | 	cmp	local06, local03 wz
1cb1c     7C 00 90 AD |  if_e	jmp	#LR__2245
1cb20                 | '       if (d>=0) 
1cb20     00 38 56 F2 | 	cmps	local14, #0 wc
1cb24                 | '         x+=xi
1cb24     16 29 02 31 |  if_ae	add	local06, local08
1cb28                 | '         y+=yi
1cb28     18 2B 02 31 |  if_ae	add	local07, local10
1cb2c                 | '         d+=ai
1cb2c     1A 39 02 31 |  if_ae	add	local14, local12
1cb30                 | '       else
1cb30                 | '         d+=bi
1cb30     1B 39 02 C1 |  if_b	add	local14, local13
1cb34                 | '         x+=xi
1cb34     16 29 02 C1 |  if_b	add	local06, local08
1cb38                 | '       putpixel(x,y,c)
1cb38     14 13 02 F6 | 	mov	arg01, local06
1cb3c     15 15 02 F6 | 	mov	arg02, local07
1cb40     13 17 02 F6 | 	mov	arg03, local05
1cb44     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
1cb48     CC FF 9F FD | 	jmp	#LR__2241
1cb4c                 | LR__2242
1cb4c                 | '   else
1cb4c                 | '     ai:=(dx-dy)*2
1cb4c     17 35 02 F6 | 	mov	local12, local09
1cb50     19 35 82 F1 | 	sub	local12, local11
1cb54     01 34 66 F0 | 	shl	local12, #1
1cb58                 | '     bi:=dx*2
1cb58     01 2E 66 F0 | 	shl	local09, #1
1cb5c     17 37 02 F6 | 	mov	local13, local09
1cb60                 | '     d:=bi-dy
1cb60     1B 39 02 F6 | 	mov	local14, local13
1cb64     19 39 82 F1 | 	sub	local14, local11
1cb68                 | '     repeat while (y<>y2)
1cb68                 | LR__2243
1cb68     12 2B 0A F2 | 	cmp	local07, local04 wz
1cb6c     2C 00 90 AD |  if_e	jmp	#LR__2244
1cb70                 | '       if (d>=0)
1cb70     00 38 56 F2 | 	cmps	local14, #0 wc
1cb74                 | '         x+=xi
1cb74     16 29 02 31 |  if_ae	add	local06, local08
1cb78                 | '         y+=yi
1cb78     18 2B 02 31 |  if_ae	add	local07, local10
1cb7c                 | '         d+=ai
1cb7c     1A 39 02 31 |  if_ae	add	local14, local12
1cb80                 | '       else
1cb80                 | '         d+=bi
1cb80     1B 39 02 C1 |  if_b	add	local14, local13
1cb84                 | '         y+=yi
1cb84     18 2B 02 C1 |  if_b	add	local07, local10
1cb88                 | '       putpixel(x, y,c)
1cb88     14 13 02 F6 | 	mov	arg01, local06
1cb8c     15 15 02 F6 | 	mov	arg02, local07
1cb90     13 17 02 F6 | 	mov	arg03, local05
1cb94     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
1cb98     CC FF 9F FD | 	jmp	#LR__2243
1cb9c                 | LR__2244
1cb9c                 | LR__2245
1cb9c                 | LR__2246
1cb9c     A7 F0 03 F6 | 	mov	ptra, fp
1cba0     B2 00 A0 FD | 	call	#popregs_
1cba4                 | _hg010b_spin2_draw_ret
1cba4     2D 00 64 FD | 	ret
1cba8                 | 
1cba8                 | '  
1cba8                 | ' pub fillpush(val) 
1cba8                 | _hg010b_spin2_fillpush
1cba8                 | ' fillstack[fillptr]:=val
1cba8     0B 00 00 FF 
1cbac     BA E4 05 F1 | 	add	objptr, ##5818
1cbb0     F2 00 02 FB | 	rdlong	_var01, objptr
1cbb4     02 00 66 F0 | 	shl	_var01, #2
1cbb8     0A 00 00 FF 
1cbbc     00 E4 85 F1 | 	sub	objptr, ##5120
1cbc0     F2 00 02 F1 | 	add	_var01, objptr
1cbc4     00 13 62 FC | 	wrlong	arg01, _var01
1cbc8                 | ' fillptr+=1   
1cbc8     0A 00 00 FF 
1cbcc     00 E4 05 F1 | 	add	objptr, ##5120
1cbd0     F2 00 02 FB | 	rdlong	_var01, objptr
1cbd4     01 00 06 F1 | 	add	_var01, #1
1cbd8     F2 00 62 FC | 	wrlong	_var01, objptr
1cbdc     0B 00 00 FF 
1cbe0     BA E4 85 F1 | 	sub	objptr, ##5818
1cbe4                 | _hg010b_spin2_fillpush_ret
1cbe4     2D 00 64 FD | 	ret
1cbe8                 | 
1cbe8                 | ' 
1cbe8                 | '     
1cbe8                 | ' pub fillpop() : val
1cbe8                 | _hg010b_spin2_fillpop
1cbe8                 | ' 
1cbe8                 | ' fillptr-=1
1cbe8     0B 00 00 FF 
1cbec     BA E4 05 F1 | 	add	objptr, ##5818
1cbf0     F2 FA 01 FB | 	rdlong	result1, objptr
1cbf4     01 FA 85 F1 | 	sub	result1, #1
1cbf8     F2 FA 61 FC | 	wrlong	result1, objptr
1cbfc                 | ' if fillptr<0
1cbfc     0B 00 00 FF 
1cc00     BA E4 85 F1 | 	sub	objptr, ##5818
1cc04     00 FA 55 F2 | 	cmps	result1, #0 wc
1cc08                 | '   fillptr:=0
1cc08     0B 00 00 CF 
1cc0c     BA E4 05 C1 |  if_b	add	objptr, ##5818
1cc10     F2 00 68 CC |  if_b	wrlong	#0, objptr
1cc14     0B 00 00 CF 
1cc18     BA E4 85 C1 |  if_b	sub	objptr, ##5818
1cc1c                 | '   val:=-12345
1cc1c     E7 FF 7F CF 
1cc20     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
1cc24     28 00 90 CD |  if_b	jmp	#LR__2250
1cc28                 | ' else 
1cc28                 | '   val:=fillstack[fillptr]
1cc28     0B 00 00 FF 
1cc2c     BA E4 05 F1 | 	add	objptr, ##5818
1cc30     F2 00 02 FB | 	rdlong	_var01, objptr
1cc34     02 00 66 F0 | 	shl	_var01, #2
1cc38     0A 00 00 FF 
1cc3c     00 E4 85 F1 | 	sub	objptr, ##5120
1cc40     F2 00 02 F1 | 	add	_var01, objptr
1cc44     00 01 02 FB | 	rdlong	_var01, _var01
1cc48     01 00 00 FF 
1cc4c     BA E4 85 F1 | 	sub	objptr, ##698
1cc50                 | LR__2250
1cc50                 | ' return val
1cc50     00 FB 01 F6 | 	mov	result1, _var01
1cc54                 | _hg010b_spin2_fillpop_ret
1cc54     2D 00 64 FD | 	ret
1cc58                 | 
1cc58                 | ' 
1cc58                 | '       
1cc58                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
1cc58                 | _hg010b_spin2_fill
1cc58     0B 4A 05 F6 | 	mov	COUNT_, #11
1cc5c     A8 00 A0 FD | 	call	#pushregs_
1cc60                 | ' 
1cc60                 | ' newcolor:=newcolor & 255
1cc60     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
1cc64                 | ' oldcolor:=oldcolor & 255
1cc64     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
1cc68                 | ' 
1cc68                 | ' if (oldcolor == newcolor) 
1cc68     0F 21 0A F2 | 	cmp	local02, local01 wz
1cc6c                 | '   return
1cc6c     70 02 90 AD |  if_e	jmp	#LR__2269
1cc70                 | ' 
1cc70                 | ' fillptr:=0
1cc70     0B 00 00 FF 
1cc74     BA E4 05 F1 | 	add	objptr, ##5818
1cc78     F2 00 68 FC | 	wrlong	#0, objptr
1cc7c                 | ' fillmax:=0
1cc7c     04 E4 05 F1 | 	add	objptr, #4
1cc80     F2 00 68 FC | 	wrlong	#0, objptr
1cc84     0B 00 00 FF 
1cc88     BE E4 85 F1 | 	sub	objptr, ##5822
1cc8c                 | ' fillpush(x)
1cc8c     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
1cc90                 | ' fillpush(y)
1cc90     0A 13 02 F6 | 	mov	arg01, arg02
1cc94     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
1cc98                 | ' y:=fillpop()
1cc98     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
1cc9c     FD 22 02 F6 | 	mov	local03, result1
1cca0                 | ' x:=fillpop()
1cca0     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
1cca4     FD 24 02 F6 | 	mov	local04, result1
1cca8                 | ' 'pinhigh(38)
1cca8                 | ' repeat while (x>-1)       
1cca8                 | LR__2260
1cca8     00 24 56 F2 | 	cmps	local04, #0 wc
1ccac     30 02 90 CD |  if_b	jmp	#LR__2268
1ccb0                 | '  ' pintoggle(39)
1ccb0                 | '   x1 := x
1ccb0     12 27 02 F6 | 	mov	local05, local04
1ccb4                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
1ccb4                 | LR__2261
1ccb4     00 28 06 F6 | 	mov	local06, #0
1ccb8     00 2A 06 F6 | 	mov	local07, #0
1ccbc     00 26 56 F2 | 	cmps	local05, #0 wc
1ccc0     01 2A 66 36 |  if_ae	neg	local07, #1
1ccc4     00 2A 0E F2 | 	cmp	local07, #0 wz
1ccc8     00 28 26 56 |  if_ne	not	local06, #0
1cccc     00 2C 06 F6 | 	mov	local08, #0
1ccd0     00 2E 06 F6 | 	mov	local09, #0
1ccd4     11 15 02 F6 | 	mov	arg02, local03
1ccd8     13 13 02 F6 | 	mov	arg01, local05
1ccdc     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1cce0     10 FB 09 F2 | 	cmp	result1, local02 wz
1cce4     00 2E 26 A6 |  if_e	not	local09, #0
1cce8     00 2E 0E F2 | 	cmp	local09, #0 wz
1ccec     00 2C 26 56 |  if_ne	not	local08, #0
1ccf0     16 29 CA F7 | 	test	local06, local08 wz
1ccf4                 | '     x1--
1ccf4     01 26 86 51 |  if_ne	sub	local05, #1
1ccf8     B8 FF 9F 5D |  if_ne	jmp	#LR__2261
1ccfc                 | '   x1++
1ccfc     01 26 06 F1 | 	add	local05, #1
1cd00                 | '   spanabove := 0
1cd00     00 30 06 F6 | 	mov	local10, #0
1cd04                 | '   spanbelow := 0
1cd04     00 32 06 F6 | 	mov	local11, #0
1cd08                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
1cd08                 | LR__2262
1cd08     00 28 06 F6 | 	mov	local06, #0
1cd0c     02 00 00 FF 
1cd10     00 26 56 F2 | 	cmps	local05, ##1024 wc
1cd14     00 28 26 C6 |  if_b	not	local06, #0
1cd18     00 2C 06 F6 | 	mov	local08, #0
1cd1c     00 2E 06 F6 | 	mov	local09, #0
1cd20     11 15 02 F6 | 	mov	arg02, local03
1cd24     13 13 02 F6 | 	mov	arg01, local05
1cd28     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
1cd2c     10 FB 09 F2 | 	cmp	result1, local02 wz
1cd30     00 2E 26 A6 |  if_e	not	local09, #0
1cd34     00 2E 0E F2 | 	cmp	local09, #0 wz
1cd38     00 2C 26 56 |  if_ne	not	local08, #0
1cd3c     16 29 CA F7 | 	test	local06, local08 wz
1cd40     88 01 90 AD |  if_e	jmp	#LR__2267
1cd44                 | '     putpixel2 (x1,y, newcolor & 255)
1cd44     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
1cd48     13 13 02 F6 | 	mov	arg01, local05
1cd4c     11 15 02 F6 | 	mov	arg02, local03
1cd50     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
1cd54                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
1cd54     00 28 06 F6 | 	mov	local06, #0
1cd58     00 2A 06 F6 | 	mov	local07, #0
1cd5c     00 30 0E F2 | 	cmp	local10, #0 wz
1cd60     01 22 56 A2 |  if_e	cmps	local03, #1 wc
1cd64     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
1cd68     00 2A 0E F2 | 	cmp	local07, #0 wz
1cd6c     00 28 26 56 |  if_ne	not	local06, #0
1cd70     00 2C 06 F6 | 	mov	local08, #0
1cd74     00 2E 06 F6 | 	mov	local09, #0
1cd78     11 15 02 F6 | 	mov	arg02, local03
1cd7c     01 14 86 F1 | 	sub	arg02, #1
1cd80     13 13 02 F6 | 	mov	arg01, local05
1cd84     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1cd88     10 FB 09 F2 | 	cmp	result1, local02 wz
1cd8c     00 2E 26 A6 |  if_e	not	local09, #0
1cd90     00 2E 0E F2 | 	cmp	local09, #0 wz
1cd94     00 2C 26 56 |  if_ne	not	local08, #0
1cd98     16 29 CA F7 | 	test	local06, local08 wz
1cd9c     1C 00 90 AD |  if_e	jmp	#LR__2263
1cda0                 | '       fillpush(x1)
1cda0     13 13 02 F6 | 	mov	arg01, local05
1cda4     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
1cda8                 | '       fillpush(y-1)
1cda8     11 13 02 F6 | 	mov	arg01, local03
1cdac     01 12 86 F1 | 	sub	arg01, #1
1cdb0     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
1cdb4                 | '       spanabove := 1 
1cdb4     01 30 06 F6 | 	mov	local10, #1
1cdb8     4C 00 90 FD | 	jmp	#LR__2264
1cdbc                 | LR__2263
1cdbc                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
1cdbc     00 28 06 F6 | 	mov	local06, #0
1cdc0     00 2A 06 F6 | 	mov	local07, #0
1cdc4     00 30 0E F2 | 	cmp	local10, #0 wz
1cdc8     01 22 56 52 |  if_ne	cmps	local03, #1 wc
1cdcc     01 2A 66 16 |  if_a	neg	local07, #1
1cdd0     00 2A 0E F2 | 	cmp	local07, #0 wz
1cdd4     00 28 26 56 |  if_ne	not	local06, #0
1cdd8     00 2C 06 F6 | 	mov	local08, #0
1cddc     00 2E 06 F6 | 	mov	local09, #0
1cde0     11 15 02 F6 | 	mov	arg02, local03
1cde4     01 14 86 F1 | 	sub	arg02, #1
1cde8     13 13 02 F6 | 	mov	arg01, local05
1cdec     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1cdf0     10 FB 09 F2 | 	cmp	result1, local02 wz
1cdf4     00 2E 26 56 |  if_ne	not	local09, #0
1cdf8     00 2E 0E F2 | 	cmp	local09, #0 wz
1cdfc     00 2C 26 56 |  if_ne	not	local08, #0
1ce00     16 29 CA F7 | 	test	local06, local08 wz
1ce04                 | '       spanabove := 0 
1ce04     00 30 06 56 |  if_ne	mov	local10, #0
1ce08                 | LR__2264
1ce08                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
1ce08     00 28 06 F6 | 	mov	local06, #0
1ce0c     00 2A 06 F6 | 	mov	local07, #0
1ce10     00 32 0E F2 | 	cmp	local11, #0 wz
1ce14     01 00 00 AF 
1ce18     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
1ce1c     01 2A 66 86 |  if_c_and_z	neg	local07, #1
1ce20     00 2A 0E F2 | 	cmp	local07, #0 wz
1ce24     00 28 26 56 |  if_ne	not	local06, #0
1ce28     00 2C 06 F6 | 	mov	local08, #0
1ce2c     00 2E 06 F6 | 	mov	local09, #0
1ce30     11 15 02 F6 | 	mov	arg02, local03
1ce34     01 14 06 F1 | 	add	arg02, #1
1ce38     13 13 02 F6 | 	mov	arg01, local05
1ce3c     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1ce40     10 FB 09 F2 | 	cmp	result1, local02 wz
1ce44     00 2E 26 A6 |  if_e	not	local09, #0
1ce48     00 2E 0E F2 | 	cmp	local09, #0 wz
1ce4c     00 2C 26 56 |  if_ne	not	local08, #0
1ce50     16 29 CA F7 | 	test	local06, local08 wz
1ce54     1C 00 90 AD |  if_e	jmp	#LR__2265
1ce58                 | '       fillpush(x1)
1ce58     13 13 02 F6 | 	mov	arg01, local05
1ce5c     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
1ce60                 | '       fillpush(y + 1)
1ce60     11 13 02 F6 | 	mov	arg01, local03
1ce64     01 12 06 F1 | 	add	arg01, #1
1ce68     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
1ce6c                 | '       spanBelow := 1
1ce6c     01 32 06 F6 | 	mov	local11, #1
1ce70     50 00 90 FD | 	jmp	#LR__2266
1ce74                 | LR__2265
1ce74                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
1ce74     00 28 06 F6 | 	mov	local06, #0
1ce78     00 2A 06 F6 | 	mov	local07, #0
1ce7c     00 32 0E F2 | 	cmp	local11, #0 wz
1ce80     01 00 00 5F 
1ce84     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
1ce88     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
1ce8c     00 2A 0E F2 | 	cmp	local07, #0 wz
1ce90     00 28 26 56 |  if_ne	not	local06, #0
1ce94     00 2C 06 F6 | 	mov	local08, #0
1ce98     00 2E 06 F6 | 	mov	local09, #0
1ce9c     11 15 02 F6 | 	mov	arg02, local03
1cea0     01 14 06 F1 | 	add	arg02, #1
1cea4     13 13 02 F6 | 	mov	arg01, local05
1cea8     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
1ceac     10 FB 09 F2 | 	cmp	result1, local02 wz
1ceb0     00 2E 26 56 |  if_ne	not	local09, #0
1ceb4     00 2E 0E F2 | 	cmp	local09, #0 wz
1ceb8     00 2C 26 56 |  if_ne	not	local08, #0
1cebc     16 29 CA F7 | 	test	local06, local08 wz
1cec0                 | '       spanbelow := 0
1cec0     00 32 06 56 |  if_ne	mov	local11, #0
1cec4                 | LR__2266
1cec4                 | '     x1++
1cec4     01 26 06 F1 | 	add	local05, #1
1cec8     3C FE 9F FD | 	jmp	#LR__2262
1cecc                 | LR__2267
1cecc                 | '   y:=fillpop()
1cecc     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
1ced0     FD 22 02 F6 | 	mov	local03, result1
1ced4                 | '   x:=fillpop()
1ced4     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
1ced8     FD 24 02 F6 | 	mov	local04, result1
1cedc     C8 FD 9F FD | 	jmp	#LR__2260
1cee0                 | LR__2268
1cee0                 | LR__2269
1cee0     A7 F0 03 F6 | 	mov	ptra, fp
1cee4     B2 00 A0 FD | 	call	#popregs_
1cee8                 | _hg010b_spin2_fill_ret
1cee8     2D 00 64 FD | 	ret
1ceec                 | 
1ceec                 | ' 'pinlow(38)    
1ceec                 | ' 
1ceec                 | ' '-- A filled circle -----------------------------------------------------
1ceec                 | ' 
1ceec                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
1ceec                 | _hg010b_spin2_fcircle
1ceec     08 4A 05 F6 | 	mov	COUNT_, #8
1cef0     A8 00 A0 FD | 	call	#pushregs_
1cef4     0B 1F 02 F6 | 	mov	local01, arg03
1cef8     FF FF 7F FF 
1cefc     FE 1F 06 FD | 	qmul	local01, ##-2
1cf00     09 21 02 F6 | 	mov	local02, arg01
1cf04     0A 23 02 F6 | 	mov	local03, arg02
1cf08     0C 25 02 F6 | 	mov	local04, arg04
1cf0c                 | ' 
1cf0c                 | ' d:=5-4*r
1cf0c     0F 19 02 F6 | 	mov	arg04, local01
1cf10     02 18 66 F0 | 	shl	arg04, #2
1cf14     05 26 06 F6 | 	mov	local05, #5
1cf18     0C 27 82 F1 | 	sub	local05, arg04
1cf1c                 | ' x:=0
1cf1c     00 28 06 F6 | 	mov	local06, #0
1cf20                 | ' y:=r
1cf20                 | ' da:=(-2*r+5)*4
1cf20                 | ' db:=3*4
1cf20     0C 2A 06 F6 | 	mov	local07, #12
1cf24                 | ' repeat while (x<=y) 
1cf24     18 2C 62 FD | 	getqx	local08
1cf28     05 2C 06 F1 | 	add	local08, #5
1cf2c     02 2C 66 F0 | 	shl	local08, #2
1cf30                 | LR__2270
1cf30     0F 29 5A F2 | 	cmps	local06, local01 wcz
1cf34     B4 00 90 1D |  if_a	jmp	#LR__2272
1cf38                 | '   fastline(x0-x,x0+x,y0-y,c)
1cf38     10 13 02 F6 | 	mov	arg01, local02
1cf3c     14 13 82 F1 | 	sub	arg01, local06
1cf40     10 15 02 F6 | 	mov	arg02, local02
1cf44     14 15 02 F1 | 	add	arg02, local06
1cf48     11 17 02 F6 | 	mov	arg03, local03
1cf4c     0F 17 82 F1 | 	sub	arg03, local01
1cf50     12 19 02 F6 | 	mov	arg04, local04
1cf54     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1cf58                 | '   fastline(x0-x,x0+x,y0+y,c)
1cf58     10 13 02 F6 | 	mov	arg01, local02
1cf5c     14 13 82 F1 | 	sub	arg01, local06
1cf60     10 15 02 F6 | 	mov	arg02, local02
1cf64     14 15 02 F1 | 	add	arg02, local06
1cf68     11 17 02 F6 | 	mov	arg03, local03
1cf6c     0F 17 02 F1 | 	add	arg03, local01
1cf70     12 19 02 F6 | 	mov	arg04, local04
1cf74     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1cf78                 | '   fastline(x0-y,x0+y,y0-x,c)
1cf78     10 13 02 F6 | 	mov	arg01, local02
1cf7c     0F 13 82 F1 | 	sub	arg01, local01
1cf80     10 15 02 F6 | 	mov	arg02, local02
1cf84     0F 15 02 F1 | 	add	arg02, local01
1cf88     11 17 02 F6 | 	mov	arg03, local03
1cf8c     14 17 82 F1 | 	sub	arg03, local06
1cf90     12 19 02 F6 | 	mov	arg04, local04
1cf94     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1cf98                 | '   fastline(x0-y,x0+y,y0+x,c)
1cf98     10 13 02 F6 | 	mov	arg01, local02
1cf9c     0F 13 82 F1 | 	sub	arg01, local01
1cfa0     10 15 02 F6 | 	mov	arg02, local02
1cfa4     0F 15 02 F1 | 	add	arg02, local01
1cfa8     11 17 02 F6 | 	mov	arg03, local03
1cfac     14 17 02 F1 | 	add	arg03, local06
1cfb0     12 19 02 F6 | 	mov	arg04, local04
1cfb4     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
1cfb8                 | '   if d>0 
1cfb8     01 26 56 F2 | 	cmps	local05, #1 wc
1cfbc     18 00 90 CD |  if_b	jmp	#LR__2271
1cfc0                 | '     d+=da
1cfc0     16 27 02 F1 | 	add	local05, local08
1cfc4                 | '     y-=1
1cfc4     01 1E 86 F1 | 	sub	local01, #1
1cfc8                 | '     x+=1
1cfc8     01 28 06 F1 | 	add	local06, #1
1cfcc                 | '     da+=4*4
1cfcc     10 2C 06 F1 | 	add	local08, #16
1cfd0                 | '     db+=2*4
1cfd0     08 2A 06 F1 | 	add	local07, #8
1cfd4     58 FF 9F FD | 	jmp	#LR__2270
1cfd8                 | LR__2271
1cfd8                 | '   else
1cfd8                 | '     d+=db
1cfd8     15 27 02 F1 | 	add	local05, local07
1cfdc                 | '     x+=1
1cfdc     01 28 06 F1 | 	add	local06, #1
1cfe0                 | '     da+=2*4
1cfe0     08 2C 06 F1 | 	add	local08, #8
1cfe4                 | '     db+=2*4
1cfe4     08 2A 06 F1 | 	add	local07, #8
1cfe8     44 FF 9F FD | 	jmp	#LR__2270
1cfec                 | LR__2272
1cfec     A7 F0 03 F6 | 	mov	ptra, fp
1cff0     B2 00 A0 FD | 	call	#popregs_
1cff4                 | _hg010b_spin2_fcircle_ret
1cff4     2D 00 64 FD | 	ret
1cff8                 | 
1cff8                 | '  
1cff8                 | ' '-- A circle ------------------------------------------------------------ 
1cff8                 | '  
1cff8                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
1cff8                 | _hg010b_spin2_circle
1cff8     08 4A 05 F6 | 	mov	COUNT_, #8
1cffc     A8 00 A0 FD | 	call	#pushregs_
1d000     0B 1F 02 F6 | 	mov	local01, arg03
1d004     FF FF 7F FF 
1d008     FE 1F 06 FD | 	qmul	local01, ##-2
1d00c     09 21 02 F6 | 	mov	local02, arg01
1d010     0A 23 02 F6 | 	mov	local03, arg02
1d014     0C 25 02 F6 | 	mov	local04, arg04
1d018                 | ' 
1d018                 | '  
1d018                 | ' d:=5-4*r
1d018     0F 19 02 F6 | 	mov	arg04, local01
1d01c     02 18 66 F0 | 	shl	arg04, #2
1d020     05 26 06 F6 | 	mov	local05, #5
1d024     0C 27 82 F1 | 	sub	local05, arg04
1d028                 | ' x:=0
1d028     00 28 06 F6 | 	mov	local06, #0
1d02c                 | ' y:=r
1d02c                 | ' da:=(-2*r+5)*4
1d02c                 | ' db:=3*4
1d02c     0C 2A 06 F6 | 	mov	local07, #12
1d030                 | ' repeat while (x<=y) 
1d030     18 2C 62 FD | 	getqx	local08
1d034     05 2C 06 F1 | 	add	local08, #5
1d038     02 2C 66 F0 | 	shl	local08, #2
1d03c                 | LR__2280
1d03c     0F 29 5A F2 | 	cmps	local06, local01 wcz
1d040     F4 00 90 1D |  if_a	jmp	#LR__2282
1d044                 | '   putpixel(x0-x,y0-y,c)
1d044     10 13 02 F6 | 	mov	arg01, local02
1d048     14 13 82 F1 | 	sub	arg01, local06
1d04c     11 15 02 F6 | 	mov	arg02, local03
1d050     0F 15 82 F1 | 	sub	arg02, local01
1d054     12 17 02 F6 | 	mov	arg03, local04
1d058     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1d05c                 | '   putpixel(x0-x,y0+y,c)
1d05c     10 13 02 F6 | 	mov	arg01, local02
1d060     14 13 82 F1 | 	sub	arg01, local06
1d064     11 15 02 F6 | 	mov	arg02, local03
1d068     0F 15 02 F1 | 	add	arg02, local01
1d06c     12 17 02 F6 | 	mov	arg03, local04
1d070     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1d074                 | '   putpixel(x0+x,y0-y,c)
1d074     10 13 02 F6 | 	mov	arg01, local02
1d078     14 13 02 F1 | 	add	arg01, local06
1d07c     11 15 02 F6 | 	mov	arg02, local03
1d080     0F 15 82 F1 | 	sub	arg02, local01
1d084     12 17 02 F6 | 	mov	arg03, local04
1d088     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1d08c                 | '   putpixel(x0+x,y0+y,c)
1d08c     10 13 02 F6 | 	mov	arg01, local02
1d090     14 13 02 F1 | 	add	arg01, local06
1d094     11 15 02 F6 | 	mov	arg02, local03
1d098     0F 15 02 F1 | 	add	arg02, local01
1d09c     12 17 02 F6 | 	mov	arg03, local04
1d0a0     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1d0a4                 | '   putpixel(x0-y,y0-x,c)
1d0a4     10 13 02 F6 | 	mov	arg01, local02
1d0a8     0F 13 82 F1 | 	sub	arg01, local01
1d0ac     11 15 02 F6 | 	mov	arg02, local03
1d0b0     14 15 82 F1 | 	sub	arg02, local06
1d0b4     12 17 02 F6 | 	mov	arg03, local04
1d0b8     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1d0bc                 | '   putpixel(x0-y,y0+x,c)
1d0bc     10 13 02 F6 | 	mov	arg01, local02
1d0c0     0F 13 82 F1 | 	sub	arg01, local01
1d0c4     11 15 02 F6 | 	mov	arg02, local03
1d0c8     14 15 02 F1 | 	add	arg02, local06
1d0cc     12 17 02 F6 | 	mov	arg03, local04
1d0d0     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1d0d4                 | '   putpixel(x0+y,y0-x,c)
1d0d4     10 13 02 F6 | 	mov	arg01, local02
1d0d8     0F 13 02 F1 | 	add	arg01, local01
1d0dc     11 15 02 F6 | 	mov	arg02, local03
1d0e0     14 15 82 F1 | 	sub	arg02, local06
1d0e4     12 17 02 F6 | 	mov	arg03, local04
1d0e8     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1d0ec                 | '   putpixel(x0+y,y0+x,c)
1d0ec     10 13 02 F6 | 	mov	arg01, local02
1d0f0     0F 13 02 F1 | 	add	arg01, local01
1d0f4     11 15 02 F6 | 	mov	arg02, local03
1d0f8     14 15 02 F1 | 	add	arg02, local06
1d0fc     12 17 02 F6 | 	mov	arg03, local04
1d100     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1d104                 | '   if d>0 
1d104     01 26 56 F2 | 	cmps	local05, #1 wc
1d108     18 00 90 CD |  if_b	jmp	#LR__2281
1d10c                 | '     d+=da
1d10c     16 27 02 F1 | 	add	local05, local08
1d110                 | '     y-=1
1d110     01 1E 86 F1 | 	sub	local01, #1
1d114                 | '     x+=1
1d114     01 28 06 F1 | 	add	local06, #1
1d118                 | '     da+=4*4
1d118     10 2C 06 F1 | 	add	local08, #16
1d11c                 | '     db+=2*4
1d11c     08 2A 06 F1 | 	add	local07, #8
1d120     18 FF 9F FD | 	jmp	#LR__2280
1d124                 | LR__2281
1d124                 | '   else
1d124                 | '     d+=db
1d124     15 27 02 F1 | 	add	local05, local07
1d128                 | '     x+=1
1d128     01 28 06 F1 | 	add	local06, #1
1d12c                 | '     da+=2*4
1d12c     08 2C 06 F1 | 	add	local08, #8
1d130                 | '     db+=2*4
1d130     08 2A 06 F1 | 	add	local07, #8
1d134     04 FF 9F FD | 	jmp	#LR__2280
1d138                 | LR__2282
1d138     A7 F0 03 F6 | 	mov	ptra, fp
1d13c     B2 00 A0 FD | 	call	#popregs_
1d140                 | _hg010b_spin2_circle_ret
1d140     2D 00 64 FD | 	ret
1d144                 | 
1d144                 | '     
1d144                 | ' '-- A frame (an empty rectangle) ---------------------------------------
1d144                 | ' 
1d144                 | ' pub frame(x1,y1,x2,y2,c)
1d144                 | _hg010b_spin2_frame
1d144     05 4A 05 F6 | 	mov	COUNT_, #5
1d148     A8 00 A0 FD | 	call	#pushregs_
1d14c     09 1F 02 F6 | 	mov	local01, arg01
1d150     0A 21 02 F6 | 	mov	local02, arg02
1d154     0B 23 02 F6 | 	mov	local03, arg03
1d158     0C 25 02 F6 | 	mov	local04, arg04
1d15c     0D 27 02 F6 | 	mov	local05, arg05
1d160                 | ' 
1d160                 | ' fastline(x1,x2,y1,c)
1d160     0F 13 02 F6 | 	mov	arg01, local01
1d164     11 15 02 F6 | 	mov	arg02, local03
1d168     10 17 02 F6 | 	mov	arg03, local02
1d16c     13 19 02 F6 | 	mov	arg04, local05
1d170     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
1d174                 | ' fastline(x1,x2,y2,c)
1d174     0F 13 02 F6 | 	mov	arg01, local01
1d178     11 15 02 F6 | 	mov	arg02, local03
1d17c     12 17 02 F6 | 	mov	arg03, local04
1d180     13 19 02 F6 | 	mov	arg04, local05
1d184     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
1d188                 | ' line(x1,y1,x1,y2,c)
1d188     0F 13 02 F6 | 	mov	arg01, local01
1d18c     10 15 02 F6 | 	mov	arg02, local02
1d190     0F 17 02 F6 | 	mov	arg03, local01
1d194     12 19 02 F6 | 	mov	arg04, local04
1d198     13 1B 02 F6 | 	mov	arg05, local05
1d19c                 | ' draw(x1,y1,x2,y2,c)
1d19c     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
1d1a0                 | ' line(x2,y1,x2,y2,c)
1d1a0     11 13 02 F6 | 	mov	arg01, local03
1d1a4     10 15 02 F6 | 	mov	arg02, local02
1d1a8     11 17 02 F6 | 	mov	arg03, local03
1d1ac     12 19 02 F6 | 	mov	arg04, local04
1d1b0     13 1B 02 F6 | 	mov	arg05, local05
1d1b4                 | ' draw(x1,y1,x2,y2,c)
1d1b4     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
1d1b8     A7 F0 03 F6 | 	mov	ptra, fp
1d1bc     B2 00 A0 FD | 	call	#popregs_
1d1c0                 | _hg010b_spin2_frame_ret
1d1c0     2D 00 64 FD | 	ret
1d1c4                 | 
1d1c4                 | ' 
1d1c4                 | ' '-- A box (a filled rectangle) ----------------------------------------
1d1c4                 | ' 
1d1c4                 | ' pub box(x1,y1,x2,y2,c) |yy
1d1c4                 | _hg010b_spin2_box
1d1c4     06 4A 05 F6 | 	mov	COUNT_, #6
1d1c8     A8 00 A0 FD | 	call	#pushregs_
1d1cc     09 1F 02 F6 | 	mov	local01, arg01
1d1d0     0A 21 02 F6 | 	mov	local02, arg02
1d1d4     0B 23 02 F6 | 	mov	local03, arg03
1d1d8     0C 25 02 F6 | 	mov	local04, arg04
1d1dc     0D 27 02 F6 | 	mov	local05, arg05
1d1e0                 | ' 
1d1e0                 | ' repeat yy from y1 to y2
1d1e0     10 25 52 F2 | 	cmps	local04, local02 wc
1d1e4     01 28 86 F6 | 	negc	local06, #1
1d1e8     14 25 02 F1 | 	add	local04, local06
1d1ec                 | LR__2290
1d1ec                 | '   fastline(x1,x2,yy,c)
1d1ec     0F 13 02 F6 | 	mov	arg01, local01
1d1f0     11 15 02 F6 | 	mov	arg02, local03
1d1f4     13 19 02 F6 | 	mov	arg04, local05
1d1f8     10 17 02 F6 | 	mov	arg03, local02
1d1fc     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
1d200     14 21 02 F1 | 	add	local02, local06
1d204     12 21 0A F2 | 	cmp	local02, local04 wz
1d208     E0 FF 9F 5D |  if_ne	jmp	#LR__2290
1d20c     A7 F0 03 F6 | 	mov	ptra, fp
1d210     B2 00 A0 FD | 	call	#popregs_
1d214                 | _hg010b_spin2_box_ret
1d214     2D 00 64 FD | 	ret
1d218                 | 
1d218                 | '       
1d218                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
1d218                 | _hg010b_spin2_putcharxycgf
1d218                 | ' 
1d218                 | '  
1d218                 | ' repeat yy from 0 to 15
1d218     00 00 06 F6 | 	mov	_var01, #0
1d21c     97 8C 48 FB | 	callpa	#(@LR__2302-@LR__2300)>>2,fcache_load_ptr_
1d220                 | LR__2300
1d220                 | ' 
1d220                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
1d220     95 E4 05 F1 | 	add	objptr, #149
1d224     F2 02 02 FB | 	rdlong	_var02, objptr
1d228     0A 02 66 F0 | 	shl	_var02, #10
1d22c     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
1d230     01 05 02 F1 | 	add	_var03, _var02
1d234     0B 03 02 F6 | 	mov	_var02, arg03
1d238     04 02 66 F0 | 	shl	_var02, #4
1d23c     01 05 02 F1 | 	add	_var03, _var02
1d240     00 05 02 F1 | 	add	_var03, _var01
1d244     02 05 C2 FA | 	rdbyte	_var03, _var03
1d248                 | '   asm
1d248     00 04 0E F4 | 	testb	_var03, #0 wz
1d24c     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
1d250     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
1d254     01 04 0E F4 | 	testb	_var03, #1 wz
1d258     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
1d25c     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
1d260     02 04 0E F4 | 	testb	_var03, #2 wz
1d264     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
1d268     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
1d26c     03 04 0E F4 | 	testb	_var03, #3 wz
1d270     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
1d274     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
1d278     04 04 0E F4 | 	testb	_var03, #4 wz
1d27c     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
1d280     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
1d284     05 04 0E F4 | 	testb	_var03, #5 wz
1d288     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
1d28c     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
1d290     06 04 0E F4 | 	testb	_var03, #6 wz
1d294     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
1d298     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
1d29c     07 04 0E F4 | 	testb	_var03, #7 wz
1d2a0     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
1d2a4     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
1d2a8                 | '   
1d2a8                 | '   ccc[0]:=c1
1d2a8     99 E5 05 F1 | 	add	objptr, #409
1d2ac     F2 06 62 FC | 	wrlong	_var04, objptr
1d2b0                 | '   ccc[1]:=c2 
1d2b0     04 E4 05 F1 | 	add	objptr, #4
1d2b4     F2 08 62 FC | 	wrlong	_var05, objptr
1d2b8                 | '   long[mailbox0][2]:=8
1d2b8     49 E4 85 F1 | 	sub	objptr, #73
1d2bc     F2 04 02 FB | 	rdlong	_var03, objptr
1d2c0     08 04 06 F1 | 	add	_var03, #8
1d2c4     02 11 68 FC | 	wrlong	#8, _var03
1d2c8                 | '   long[mailbox0][1]:=@ccc
1d2c8     45 E4 05 F1 | 	add	objptr, #69
1d2cc     F2 04 02 F6 | 	mov	_var03, objptr
1d2d0     45 E4 85 F1 | 	sub	objptr, #69
1d2d4     F2 02 02 FB | 	rdlong	_var02, objptr
1d2d8     04 02 06 F1 | 	add	_var02, #4
1d2dc     01 05 62 FC | 	wrlong	_var03, _var02
1d2e0                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
1d2e0     0C E5 85 F1 | 	sub	objptr, #268
1d2e4     F2 04 02 FB | 	rdlong	_var03, objptr
1d2e8     0A 03 02 F6 | 	mov	_var02, arg02
1d2ec     00 03 02 F1 | 	add	_var02, _var01
1d2f0     0A 02 66 F0 | 	shl	_var02, #10
1d2f4     09 0B 02 F6 | 	mov	_var06, arg01
1d2f8     02 0A 66 F0 | 	shl	_var06, #2
1d2fc     05 03 02 F1 | 	add	_var02, _var06
1d300     01 05 02 F1 | 	add	_var03, _var02
1d304     00 00 78 FF 
1d308     00 04 06 F1 | 	add	_var03, ##-268435456
1d30c     0C E5 05 F1 | 	add	objptr, #268
1d310     F2 0A 02 FB | 	rdlong	_var06, objptr
1d314     05 05 62 FC | 	wrlong	_var03, _var06
1d318                 | '   repeat
1d318                 | LR__2301
1d318     F2 04 02 FB | 	rdlong	_var03, objptr
1d31c     02 03 02 FB | 	rdlong	_var02, _var03
1d320     00 02 56 F2 | 	cmps	_var02, #0 wc
1d324     F0 FF 9F CD |  if_b	jmp	#LR__2301
1d328     E9 E5 85 F1 | 	sub	objptr, #489
1d32c     01 00 06 F1 | 	add	_var01, #1
1d330     10 00 56 F2 | 	cmps	_var01, #16 wc
1d334     E8 FE 9F CD |  if_b	jmp	#LR__2300
1d338                 | LR__2302
1d338                 | _hg010b_spin2_putcharxycgf_ret
1d338     2D 00 64 FD | 	ret
1d33c                 | 
1d33c                 | ' 
1d33c                 | ' 
1d33c                 | ' '**********************************************************************r***
1d33c                 | ' '                                                                        *
1d33c                 | ' ' Font related functions                                                 *
1d33c                 | ' '                                                                        *
1d33c                 | ' '*************************************************************************
1d33c                 | ' 
1d33c                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
1d33c                 | ' 
1d33c                 | ' pub setfontfamily(afontnum)
1d33c                 | _hg010b_spin2_setfontfamily
1d33c                 | ' 
1d33c                 | ' font_family:=afontnum
1d33c     95 E4 05 F1 | 	add	objptr, #149
1d340     F2 12 62 FC | 	wrlong	arg01, objptr
1d344     95 E4 85 F1 | 	sub	objptr, #149
1d348                 | ' 'if afontnum==8
1d348                 | ' '  font_ptr:=@amiga_font
1d348                 | ' 
1d348                 | ' if afontnum==4
1d348     04 12 0E F2 | 	cmp	arg01, #4 wz
1d34c                 | '   font_ptr:=@st_font
1d34c     08 00 00 AF 
1d350     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
1d354     08 E4 05 A1 |  if_e	add	objptr, #8
1d358     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1d35c     08 E4 85 A1 |  if_e	sub	objptr, #8
1d360     08 00 00 AF 
1d364     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
1d368                 | ' if afontnum==0
1d368     00 12 0E F2 | 	cmp	arg01, #0 wz
1d36c                 | '   font_ptr:=@vga_font
1d36c     08 E4 05 A1 |  if_e	add	objptr, #8
1d370     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1d374     08 E4 85 A1 |  if_e	sub	objptr, #8
1d378                 | _hg010b_spin2_setfontfamily_ret
1d378     2D 00 64 FD | 	ret
1d37c                 | 
1d37c                 | ' 
1d37c                 | ' '*************************************************************************
1d37c                 | ' '                                                                        *
1d37c                 | ' '  Cursor functions                                                      *
1d37c                 | ' '                                                                        *
1d37c                 | ' '*************************************************************************
1d37c                 | ' 
1d37c                 | ' 
1d37c                 | ' pub setcursorpos(x,y)
1d37c                 | _hg010b_spin2_setcursorpos
1d37c                 | ' 
1d37c                 | ' ''---------- Set the (x,y) position of cursor
1d37c                 | ' 
1d37c                 | ' cursor_x:=x
1d37c     3C E4 05 F1 | 	add	objptr, #60
1d380     F2 12 52 FC | 	wrword	arg01, objptr
1d384                 | ' cursor_y:=y
1d384     02 E4 05 F1 | 	add	objptr, #2
1d388     F2 14 42 FC | 	wrbyte	arg02, objptr
1d38c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1d38c     02 E4 85 F1 | 	sub	objptr, #2
1d390     F2 14 E2 FA | 	rdword	arg02, objptr
1d394     02 14 66 F0 | 	shl	arg02, #2
1d398     02 E4 05 F1 | 	add	objptr, #2
1d39c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d3a0     3E E4 85 F1 | 	sub	objptr, #62
1d3a4     04 16 66 F0 | 	shl	arg03, #4
1d3a8     04 16 06 F1 | 	add	arg03, #4
1d3ac     11 12 06 F6 | 	mov	arg01, #17
1d3b0     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1d3b4                 | _hg010b_spin2_setcursorpos_ret
1d3b4     2D 00 64 FD | 	ret
1d3b8                 | 
1d3b8                 | ' 
1d3b8                 | ' pub setcursorx(x)
1d3b8                 | _hg010b_spin2_setcursorx
1d3b8                 | ' cursor_x:=x
1d3b8     3C E4 05 F1 | 	add	objptr, #60
1d3bc     F2 12 52 FC | 	wrword	arg01, objptr
1d3c0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1d3c0     F2 14 E2 FA | 	rdword	arg02, objptr
1d3c4     02 14 66 F0 | 	shl	arg02, #2
1d3c8     02 E4 05 F1 | 	add	objptr, #2
1d3cc     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d3d0     3E E4 85 F1 | 	sub	objptr, #62
1d3d4     04 16 66 F0 | 	shl	arg03, #4
1d3d8     04 16 06 F1 | 	add	arg03, #4
1d3dc     11 12 06 F6 | 	mov	arg01, #17
1d3e0     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1d3e4                 | _hg010b_spin2_setcursorx_ret
1d3e4     2D 00 64 FD | 	ret
1d3e8                 | 
1d3e8                 | ' 
1d3e8                 | ' pub setcursory(y) 
1d3e8                 | _hg010b_spin2_setcursory
1d3e8                 | ' cursor_y:=y
1d3e8     3E E4 05 F1 | 	add	objptr, #62
1d3ec     F2 12 42 FC | 	wrbyte	arg01, objptr
1d3f0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
1d3f0     02 E4 85 F1 | 	sub	objptr, #2
1d3f4     F2 14 E2 FA | 	rdword	arg02, objptr
1d3f8     02 14 66 F0 | 	shl	arg02, #2
1d3fc     02 E4 05 F1 | 	add	objptr, #2
1d400     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d404     3E E4 85 F1 | 	sub	objptr, #62
1d408     04 16 66 F0 | 	shl	arg03, #4
1d40c     04 16 06 F1 | 	add	arg03, #4
1d410     11 12 06 F6 | 	mov	arg01, #17
1d414     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
1d418                 | _hg010b_spin2_setcursory_ret
1d418     2D 00 64 FD | 	ret
1d41c                 | 
1d41c                 | ' 
1d41c                 | ' '*************************************************************************
1d41c                 | ' '                                                                        *
1d41c                 | ' '  VBlank functions                                                      *
1d41c                 | ' '                                                                        *
1d41c                 | ' '*************************************************************************
1d41c                 | ' 
1d41c                 | ' pub waitvbl(amount) | i
1d41c                 | _hg010b_spin2_waitvbl
1d41c     03 4A 05 F6 | 	mov	COUNT_, #3
1d420     A8 00 A0 FD | 	call	#pushregs_
1d424     09 1F 02 F6 | 	mov	local01, arg01
1d428                 | ' 
1d428                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
1d428                 | ' 
1d428                 | ' repeat i from 1 to amount
1d428     01 20 06 F6 | 	mov	local02, #1
1d42c     01 1E 56 F2 | 	cmps	local01, #1 wc
1d430     01 22 86 F6 | 	negc	local03, #1
1d434     11 1F 02 F1 | 	add	local01, local03
1d438                 | LR__2310
1d438                 | '   repeat until vblank==0
1d438                 | LR__2311
1d438     49 E4 05 F1 | 	add	objptr, #73
1d43c     F2 12 0A FB | 	rdlong	arg01, objptr wz
1d440     49 E4 85 F1 | 	sub	objptr, #73
1d444     0C 00 90 AD |  if_e	jmp	#LR__2312
1d448                 | '     waitus(100)
1d448     64 12 06 F6 | 	mov	arg01, #100
1d44c     28 1A B0 FD | 	call	#__system___waitus
1d450     E4 FF 9F FD | 	jmp	#LR__2311
1d454                 | LR__2312
1d454                 | '   repeat until vblank==1
1d454                 | LR__2313
1d454     49 E4 05 F1 | 	add	objptr, #73
1d458     F2 12 02 FB | 	rdlong	arg01, objptr
1d45c     49 E4 85 F1 | 	sub	objptr, #73
1d460     01 12 0E F2 | 	cmp	arg01, #1 wz
1d464     0C 00 90 AD |  if_e	jmp	#LR__2314
1d468                 | '     waitus(100)
1d468     64 12 06 F6 | 	mov	arg01, #100
1d46c     08 1A B0 FD | 	call	#__system___waitus
1d470     E0 FF 9F FD | 	jmp	#LR__2313
1d474                 | LR__2314
1d474     11 21 02 F1 | 	add	local02, local03
1d478     0F 21 0A F2 | 	cmp	local02, local01 wz
1d47c     B8 FF 9F 5D |  if_ne	jmp	#LR__2310
1d480     A7 F0 03 F6 | 	mov	ptra, fp
1d484     B2 00 A0 FD | 	call	#popregs_
1d488                 | _hg010b_spin2_waitvbl_ret
1d488     2D 00 64 FD | 	ret
1d48c                 | 
1d48c                 | ' 
1d48c                 | ' 
1d48c                 | ' pub cls(fc,bc)   :c,i
1d48c                 | _hg010b_spin2_cls
1d48c     02 4A 05 F6 | 	mov	COUNT_, #2
1d490     A8 00 A0 FD | 	call	#pushregs_
1d494     09 1F 02 F6 | 	mov	local01, arg01
1d498     0A 21 02 F6 | 	mov	local02, arg02
1d49c                 | ' 
1d49c                 | ' c:=bc
1d49c                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
1d49c     DD E4 05 F1 | 	add	objptr, #221
1d4a0     F2 12 02 FB | 	rdlong	arg01, objptr
1d4a4     A5 E4 85 F1 | 	sub	objptr, #165
1d4a8     F2 16 02 FB | 	rdlong	arg03, objptr
1d4ac     02 16 66 F0 | 	shl	arg03, #2
1d4b0     10 15 02 F6 | 	mov	arg02, local02
1d4b4     00 18 06 F6 | 	mov	arg04, #0
1d4b8     01 1A 06 F6 | 	mov	arg05, #1
1d4bc     0B 00 00 FF 
1d4c0     94 E4 05 F1 | 	add	objptr, ##5780
1d4c4     64 0B B0 FD | 	call	#_psram_spin2_fill
1d4c8                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1d4c8     0B 00 00 FF 
1d4cc     C8 E4 85 F1 | 	sub	objptr, ##5832
1d4d0     F2 12 02 FB | 	rdlong	arg01, objptr
1d4d4     04 E4 85 F1 | 	sub	objptr, #4
1d4d8     F2 16 02 FB | 	rdlong	arg03, objptr
1d4dc     09 17 82 F1 | 	sub	arg03, arg01
1d4e0     20 14 06 F6 | 	mov	arg02, #32
1d4e4     00 18 06 F6 | 	mov	arg04, #0
1d4e8     01 1A 06 F6 | 	mov	arg05, #1
1d4ec     0B 00 00 FF 
1d4f0     CC E4 05 F1 | 	add	objptr, ##5836
1d4f4     34 0B B0 FD | 	call	#_psram_spin2_fill
1d4f8                 | ' setwritecolors(fc,bc)
1d4f8                 | ' 
1d4f8                 | ' write_color:=ff
1d4f8     0B 00 00 FF 
1d4fc     8B E4 85 F1 | 	sub	objptr, ##5771
1d500     F2 1E 62 FC | 	wrlong	local01, objptr
1d504                 | ' write_background:=bb
1d504     04 E4 05 F1 | 	add	objptr, #4
1d508     F2 20 62 FC | 	wrlong	local02, objptr
1d50c                 | ' cursor_x:=0
1d50c     09 E4 85 F1 | 	sub	objptr, #9
1d510     F2 00 58 FC | 	wrword	#0, objptr
1d514                 | ' cursor_y:=0
1d514     02 E4 05 F1 | 	add	objptr, #2
1d518     F2 00 48 FC | 	wrbyte	#0, objptr
1d51c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1d51c     02 E4 85 F1 | 	sub	objptr, #2
1d520     F2 14 E2 FA | 	rdword	arg02, objptr
1d524     02 14 66 F0 | 	shl	arg02, #2
1d528     02 E4 05 F1 | 	add	objptr, #2
1d52c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d530     3E E4 85 F1 | 	sub	objptr, #62
1d534     04 16 66 F0 | 	shl	arg03, #4
1d538     04 16 06 F1 | 	add	arg03, #4
1d53c     11 12 06 F6 | 	mov	arg01, #17
1d540     C0 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
1d544                 | ' setcursorcolor(fc)
1d544     0F 13 02 F6 | 	mov	arg01, local01
1d548     AC ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
1d54c     10 FB 01 F6 | 	mov	result1, local02
1d550     00 FC 05 F6 | 	mov	result2, #0
1d554     A7 F0 03 F6 | 	mov	ptra, fp
1d558     B2 00 A0 FD | 	call	#popregs_
1d55c                 | _hg010b_spin2_cls_ret
1d55c     2D 00 64 FD | 	ret
1d560                 | 
1d560                 | ' 
1d560                 | ' ''---------- Output a char at the cursor position, move the cursor 
1d560                 | ' 
1d560                 | ' pub putchar(achar) | c,x,y,l,newcpl
1d560                 | _hg010b_spin2_putchar
1d560     02 4A 05 F6 | 	mov	COUNT_, #2
1d564     A8 00 A0 FD | 	call	#pushregs_
1d568     09 1F 02 F6 | 	mov	local01, arg01
1d56c                 | ' 
1d56c                 | ' if achar==10
1d56c     0A 1E 0E F2 | 	cmp	local01, #10 wz
1d570                 | '   crlf()
1d570     A4 05 B0 AD |  if_e	call	#_hg010b_spin2_crlf
1d574                 | ' if achar==9
1d574     09 1E 0E F2 | 	cmp	local01, #9 wz
1d578     18 00 90 5D |  if_ne	jmp	#LR__2320
1d57c                 | '   cursor_x:=(cursor_x& %11110000)+16
1d57c     3C E4 05 F1 | 	add	objptr, #60
1d580     F2 16 E2 FA | 	rdword	arg03, objptr
1d584     F0 16 06 F5 | 	and	arg03, #240
1d588     10 16 06 F1 | 	add	arg03, #16
1d58c     F2 16 52 FC | 	wrword	arg03, objptr
1d590     3C E4 85 F1 | 	sub	objptr, #60
1d594                 | LR__2320
1d594                 | '   
1d594                 | ' if (achar<>9) && (achar<>10) 
1d594     09 1E 0E F2 | 	cmp	local01, #9 wz
1d598     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
1d59c     A8 00 90 AD |  if_e	jmp	#LR__2321
1d5a0                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1d5a0     3C E4 05 F1 | 	add	objptr, #60
1d5a4     F2 12 E2 FA | 	rdword	arg01, objptr
1d5a8     02 E4 05 F1 | 	add	objptr, #2
1d5ac     F2 14 C2 FA | 	rdbyte	arg02, objptr
1d5b0     04 14 66 F0 | 	shl	arg02, #4
1d5b4     04 14 06 F1 | 	add	arg02, #4
1d5b8     03 E4 05 F1 | 	add	objptr, #3
1d5bc     F2 18 02 FB | 	rdlong	arg04, objptr
1d5c0     04 E4 05 F1 | 	add	objptr, #4
1d5c4     F2 1A 02 FB | 	rdlong	arg05, objptr
1d5c8     45 E4 85 F1 | 	sub	objptr, #69
1d5cc     0F 17 02 F6 | 	mov	arg03, local01
1d5d0     44 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
1d5d4     04 E4 05 F1 | 	add	objptr, #4
1d5d8     F2 12 02 FB | 	rdlong	arg01, objptr
1d5dc     10 00 00 FF 
1d5e0     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1d5e4     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1d5e8     3A E4 05 F1 | 	add	objptr, #58
1d5ec     F2 1A C2 FA | 	rdbyte	arg05, objptr
1d5f0     0D 17 02 FD | 	qmul	arg03, arg05
1d5f4                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1d5f4     10 00 00 FF 
1d5f8     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1d5fc     02 E4 85 F1 | 	sub	objptr, #2
1d600     F2 20 E2 FA | 	rdword	local02, objptr
1d604     01 20 46 F0 | 	shr	local02, #1
1d608     0F 15 02 F6 | 	mov	arg02, local01
1d60c     01 16 06 F6 | 	mov	arg03, #1
1d610     00 18 06 F6 | 	mov	arg04, #0
1d614     01 1A 06 F6 | 	mov	arg05, #1
1d618     0B 00 00 FF 
1d61c     90 E4 05 F1 | 	add	objptr, ##5776
1d620     18 1E 62 FD | 	getqx	local01
1d624     10 1F 02 F1 | 	add	local01, local02
1d628     0F 13 02 F1 | 	add	arg01, local01
1d62c     FC 09 B0 FD | 	call	#_psram_spin2_fill
1d630                 | '   cursor_x+=2
1d630     0B 00 00 FF 
1d634     90 E4 85 F1 | 	sub	objptr, ##5776
1d638     F2 20 E2 FA | 	rdword	local02, objptr
1d63c     02 20 06 F1 | 	add	local02, #2
1d640     F2 20 52 FC | 	wrword	local02, objptr
1d644     3C E4 85 F1 | 	sub	objptr, #60
1d648                 | LR__2321
1d648                 | ' 
1d648                 | ' if cursor_x>=256
1d648     3C E4 05 F1 | 	add	objptr, #60
1d64c     F2 20 E2 FA | 	rdword	local02, objptr
1d650     3C E4 85 F1 | 	sub	objptr, #60
1d654     00 21 56 F2 | 	cmps	local02, #256 wc
1d658     64 00 90 CD |  if_b	jmp	#LR__2323
1d65c                 | '   cursor_x:=0
1d65c     3C E4 05 F1 | 	add	objptr, #60
1d660     F2 00 58 FC | 	wrword	#0, objptr
1d664                 | '   cursor_y+=1
1d664     02 E4 05 F1 | 	add	objptr, #2
1d668     F2 20 C2 FA | 	rdbyte	local02, objptr
1d66c     01 20 06 F1 | 	add	local02, #1
1d670     F2 20 42 FC | 	wrbyte	local02, objptr
1d674                 | '   if cursor_y>st_lines-1
1d674     C3 E4 05 F1 | 	add	objptr, #195
1d678     F2 20 02 FB | 	rdlong	local02, objptr
1d67c     01 20 86 F1 | 	sub	local02, #1
1d680     C3 E4 85 F1 | 	sub	objptr, #195
1d684     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d688     3E E4 85 F1 | 	sub	objptr, #62
1d68c     10 17 5A F2 | 	cmps	arg03, local02 wcz
1d690     2C 00 90 ED |  if_be	jmp	#LR__2322
1d694                 | '     scrollup2()
1d694     00 12 06 F6 | 	mov	arg01, #0
1d698     01 00 00 FF 
1d69c     58 14 06 F6 | 	mov	arg02, ##600
1d6a0     10 16 06 F6 | 	mov	arg03, #16
1d6a4     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
1d6a8                 | '     cursor_y:=st_lines-1
1d6a8     01 E5 05 F1 | 	add	objptr, #257
1d6ac     F2 20 02 FB | 	rdlong	local02, objptr
1d6b0     01 20 86 F1 | 	sub	local02, #1
1d6b4     C3 E4 85 F1 | 	sub	objptr, #195
1d6b8     F2 20 42 FC | 	wrbyte	local02, objptr
1d6bc     3E E4 85 F1 | 	sub	objptr, #62
1d6c0                 | LR__2322
1d6c0                 | LR__2323
1d6c0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1d6c0     3C E4 05 F1 | 	add	objptr, #60
1d6c4     F2 14 E2 FA | 	rdword	arg02, objptr
1d6c8     02 14 66 F0 | 	shl	arg02, #2
1d6cc     02 E4 05 F1 | 	add	objptr, #2
1d6d0     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d6d4     3E E4 85 F1 | 	sub	objptr, #62
1d6d8     04 16 66 F0 | 	shl	arg03, #4
1d6dc     04 16 06 F1 | 	add	arg03, #4
1d6e0     11 12 06 F6 | 	mov	arg01, #17
1d6e4     1C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
1d6e8     A7 F0 03 F6 | 	mov	ptra, fp
1d6ec     B2 00 A0 FD | 	call	#popregs_
1d6f0                 | _hg010b_spin2_putchar_ret
1d6f0     2D 00 64 FD | 	ret
1d6f4                 | 
1d6f4                 | '     
1d6f4                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
1d6f4                 | ' 
1d6f4                 | ' pub putchar2(achar) | c,x,y,l,newcpl
1d6f4                 | _hg010b_spin2_putchar2
1d6f4     02 4A 05 F6 | 	mov	COUNT_, #2
1d6f8     A8 00 A0 FD | 	call	#pushregs_
1d6fc     09 1F 02 F6 | 	mov	local01, arg01
1d700                 | ' 
1d700                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1d700     3C E4 05 F1 | 	add	objptr, #60
1d704     F2 12 E2 FA | 	rdword	arg01, objptr
1d708     02 E4 05 F1 | 	add	objptr, #2
1d70c     F2 14 C2 FA | 	rdbyte	arg02, objptr
1d710     04 14 66 F0 | 	shl	arg02, #4
1d714     04 14 06 F1 | 	add	arg02, #4
1d718     03 E4 05 F1 | 	add	objptr, #3
1d71c     F2 18 02 FB | 	rdlong	arg04, objptr
1d720     04 E4 05 F1 | 	add	objptr, #4
1d724     F2 1A 02 FB | 	rdlong	arg05, objptr
1d728     45 E4 85 F1 | 	sub	objptr, #69
1d72c     0F 17 02 F6 | 	mov	arg03, local01
1d730     E4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
1d734     04 E4 05 F1 | 	add	objptr, #4
1d738     F2 12 02 FB | 	rdlong	arg01, objptr
1d73c     10 00 00 FF 
1d740     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1d744     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1d748     3A E4 05 F1 | 	add	objptr, #58
1d74c     F2 1A C2 FA | 	rdbyte	arg05, objptr
1d750     0D 17 02 FD | 	qmul	arg03, arg05
1d754                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1d754     10 00 00 FF 
1d758     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1d75c     02 E4 85 F1 | 	sub	objptr, #2
1d760     F2 20 E2 FA | 	rdword	local02, objptr
1d764     01 20 46 F0 | 	shr	local02, #1
1d768     0F 15 02 F6 | 	mov	arg02, local01
1d76c     01 16 06 F6 | 	mov	arg03, #1
1d770     00 18 06 F6 | 	mov	arg04, #0
1d774     01 1A 06 F6 | 	mov	arg05, #1
1d778     0B 00 00 FF 
1d77c     90 E4 05 F1 | 	add	objptr, ##5776
1d780     18 1E 62 FD | 	getqx	local01
1d784     10 1F 02 F1 | 	add	local01, local02
1d788     0F 13 02 F1 | 	add	arg01, local01
1d78c     9C 08 B0 FD | 	call	#_psram_spin2_fill
1d790                 | ' 
1d790                 | ' cursor_x+=2
1d790     0B 00 00 FF 
1d794     90 E4 85 F1 | 	sub	objptr, ##5776
1d798     F2 20 E2 FA | 	rdword	local02, objptr
1d79c     02 20 06 F1 | 	add	local02, #2
1d7a0     F2 20 52 FC | 	wrword	local02, objptr
1d7a4                 | ' if cursor_x>=256
1d7a4     F2 20 E2 FA | 	rdword	local02, objptr
1d7a8     3C E4 85 F1 | 	sub	objptr, #60
1d7ac     00 21 56 F2 | 	cmps	local02, #256 wc
1d7b0     64 00 90 CD |  if_b	jmp	#LR__2331
1d7b4                 | '   cursor_x:=0
1d7b4     3C E4 05 F1 | 	add	objptr, #60
1d7b8     F2 00 58 FC | 	wrword	#0, objptr
1d7bc                 | '   cursor_y+=1
1d7bc     02 E4 05 F1 | 	add	objptr, #2
1d7c0     F2 20 C2 FA | 	rdbyte	local02, objptr
1d7c4     01 20 06 F1 | 	add	local02, #1
1d7c8     F2 20 42 FC | 	wrbyte	local02, objptr
1d7cc                 | '   if cursor_y>st_lines-1
1d7cc     C3 E4 05 F1 | 	add	objptr, #195
1d7d0     F2 20 02 FB | 	rdlong	local02, objptr
1d7d4     01 20 86 F1 | 	sub	local02, #1
1d7d8     C3 E4 85 F1 | 	sub	objptr, #195
1d7dc     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d7e0     3E E4 85 F1 | 	sub	objptr, #62
1d7e4     10 17 5A F2 | 	cmps	arg03, local02 wcz
1d7e8     2C 00 90 ED |  if_be	jmp	#LR__2330
1d7ec                 | '     scrollup2()
1d7ec     00 12 06 F6 | 	mov	arg01, #0
1d7f0     01 00 00 FF 
1d7f4     58 14 06 F6 | 	mov	arg02, ##600
1d7f8     10 16 06 F6 | 	mov	arg03, #16
1d7fc     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
1d800                 | '     cursor_y:=st_lines-1
1d800     01 E5 05 F1 | 	add	objptr, #257
1d804     F2 20 02 FB | 	rdlong	local02, objptr
1d808     01 20 86 F1 | 	sub	local02, #1
1d80c     C3 E4 85 F1 | 	sub	objptr, #195
1d810     F2 20 42 FC | 	wrbyte	local02, objptr
1d814     3E E4 85 F1 | 	sub	objptr, #62
1d818                 | LR__2330
1d818                 | LR__2331
1d818                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
1d818     3C E4 05 F1 | 	add	objptr, #60
1d81c     F2 14 E2 FA | 	rdword	arg02, objptr
1d820     02 14 66 F0 | 	shl	arg02, #2
1d824     02 E4 05 F1 | 	add	objptr, #2
1d828     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d82c     3E E4 85 F1 | 	sub	objptr, #62
1d830     04 16 66 F0 | 	shl	arg03, #4
1d834     04 16 06 F1 | 	add	arg03, #4
1d838     11 12 06 F6 | 	mov	arg01, #17
1d83c     C4 EE BF FD | 	call	#_hg010b_spin2_setspritepos
1d840     A7 F0 03 F6 | 	mov	ptra, fp
1d844     B2 00 A0 FD | 	call	#popregs_
1d848                 | _hg010b_spin2_putchar2_ret
1d848     2D 00 64 FD | 	ret
1d84c                 | 
1d84c                 | ' ''--------- Output a string at the cursor position, move the cursor  
1d84c                 | ' 
1d84c                 | ' pub write(text) | iii,c,ncx,ncy
1d84c                 | _hg010b_spin2_write
1d84c     04 4A 05 F6 | 	mov	COUNT_, #4
1d850     A8 00 A0 FD | 	call	#pushregs_
1d854     09 1F 02 F6 | 	mov	local01, arg01
1d858                 | ' 
1d858                 | ' repeat iii from 0 to strsize(text)-1
1d858     00 20 06 F6 | 	mov	local02, #0
1d85c     0F 13 02 F6 | 	mov	arg01, local01
1d860     09 23 02 F6 | 	mov	local03, arg01
1d864     97 06 48 FB | 	callpa	#(@LR__2341-@LR__2340)>>2,fcache_load_ptr_
1d868                 | LR__2340
1d868     11 FB C9 FA | 	rdbyte	result1, local03 wz
1d86c     01 22 06 51 |  if_ne	add	local03, #1
1d870     F4 FF 9F 5D |  if_ne	jmp	#LR__2340
1d874                 | LR__2341
1d874     09 23 82 F1 | 	sub	local03, arg01
1d878     01 22 86 F1 | 	sub	local03, #1
1d87c     00 22 56 F2 | 	cmps	local03, #0 wc
1d880     01 24 86 F6 | 	negc	local04, #1
1d884     12 23 02 F1 | 	add	local03, local04
1d888                 | LR__2342
1d888                 | '   putchar2(byte[text+iii])
1d888     0F 13 02 F6 | 	mov	arg01, local01
1d88c     10 13 02 F1 | 	add	arg01, local02
1d890     09 13 C2 FA | 	rdbyte	arg01, arg01
1d894     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
1d898     12 21 02 F1 | 	add	local02, local04
1d89c     11 21 0A F2 | 	cmp	local02, local03 wz
1d8a0     E4 FF 9F 5D |  if_ne	jmp	#LR__2342
1d8a4     A7 F0 03 F6 | 	mov	ptra, fp
1d8a8     B2 00 A0 FD | 	call	#popregs_
1d8ac                 | _hg010b_spin2_write_ret
1d8ac     2D 00 64 FD | 	ret
1d8b0                 | 
1d8b0                 | '    
1d8b0                 | ' ' a version for text scrolling in Basic shifted 4 lines down
1d8b0                 | ' 
1d8b0                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
1d8b0                 | _hg010b_spin2_scrollup2
1d8b0     03 4A 05 F6 | 	mov	COUNT_, #3
1d8b4     A8 00 A0 FD | 	call	#pushregs_
1d8b8                 | ' 	
1d8b8                 | ' repeat i from 4 to 579 
1d8b8     04 1E 06 F6 | 	mov	local01, #4
1d8bc                 | LR__2350
1d8bc     F9 E4 05 F1 | 	add	objptr, #249
1d8c0     F2 1A 02 FB | 	rdlong	arg05, objptr
1d8c4     1C E4 85 F1 | 	sub	objptr, #28
1d8c8     F2 14 02 FB | 	rdlong	arg02, objptr
1d8cc     0F 19 02 F6 | 	mov	arg04, local01
1d8d0     10 18 06 F1 | 	add	arg04, #16
1d8d4     02 18 66 F0 | 	shl	arg04, #2
1d8d8     14 E4 05 F1 | 	add	objptr, #20
1d8dc     F2 16 02 FB | 	rdlong	arg03, objptr
1d8e0     0B 19 02 FD | 	qmul	arg04, arg03
1d8e4                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
1d8e4     F6 03 00 FF 
1d8e8     00 12 06 F6 | 	mov	arg01, ##519168
1d8ec     0D 13 82 F1 | 	sub	arg01, arg05
1d8f0     02 16 66 F0 | 	shl	arg03, #2
1d8f4     0A 00 00 FF 
1d8f8     DB E5 05 F1 | 	add	objptr, ##5595
1d8fc     18 1A 62 FD | 	getqx	arg05
1d900     0D 15 02 F1 | 	add	arg02, arg05
1d904     EC 05 B0 FD | 	call	#_psram_spin2_read1
1d908     0A 00 00 FF 
1d90c     D3 E5 85 F1 | 	sub	objptr, ##5587
1d910     F2 1A 02 FB | 	rdlong	arg05, objptr
1d914     1C E4 85 F1 | 	sub	objptr, #28
1d918     F2 14 02 FB | 	rdlong	arg02, objptr
1d91c     0F 19 02 F6 | 	mov	arg04, local01
1d920     02 18 66 F0 | 	shl	arg04, #2
1d924     14 E4 05 F1 | 	add	objptr, #20
1d928     F2 16 02 FB | 	rdlong	arg03, objptr
1d92c     0B 19 02 FD | 	qmul	arg04, arg03
1d930                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
1d930     F6 03 00 FF 
1d934     00 12 06 F6 | 	mov	arg01, ##519168
1d938     0D 13 82 F1 | 	sub	arg01, arg05
1d93c     02 16 66 F0 | 	shl	arg03, #2
1d940     0A 00 00 FF 
1d944     DB E5 05 F1 | 	add	objptr, ##5595
1d948     18 1A 62 FD | 	getqx	arg05
1d94c     0D 15 02 F1 | 	add	arg02, arg05
1d950     3C 06 B0 FD | 	call	#_psram_spin2_write
1d954     0B 00 00 FF 
1d958     CC E4 85 F1 | 	sub	objptr, ##5836
1d95c     01 1E 06 F1 | 	add	local01, #1
1d960     01 00 00 FF 
1d964     44 1E 16 F2 | 	cmp	local01, ##580 wc
1d968     50 FF 9F CD |  if_b	jmp	#LR__2350
1d96c                 | ' 
1d96c                 | ' repeat i from 580 to 599
1d96c     01 00 00 FF 
1d970     44 1E 06 F6 | 	mov	local01, ##580
1d974                 | LR__2351
1d974                 | '    fastline(0,1023,i,write_background)   
1d974     45 E4 05 F1 | 	add	objptr, #69
1d978     F2 18 02 FB | 	rdlong	arg04, objptr
1d97c     45 E4 85 F1 | 	sub	objptr, #69
1d980     00 12 06 F6 | 	mov	arg01, #0
1d984     09 14 CE F9 | 	bmask	arg02, #9
1d988     0F 17 02 F6 | 	mov	arg03, local01
1d98c     C0 EF BF FD | 	call	#_hg010b_spin2_fastline
1d990     01 1E 06 F1 | 	add	local01, #1
1d994     01 00 00 FF 
1d998     58 1E 16 F2 | 	cmp	local01, ##600 wc
1d99c     D4 FF 9F CD |  if_b	jmp	#LR__2351
1d9a0                 | ' repeat i from 0 to 3
1d9a0     00 1E 06 F6 | 	mov	local01, #0
1d9a4                 | LR__2352
1d9a4                 | '    fastline(0,1023,i,write_background)      
1d9a4     45 E4 05 F1 | 	add	objptr, #69
1d9a8     F2 18 02 FB | 	rdlong	arg04, objptr
1d9ac     45 E4 85 F1 | 	sub	objptr, #69
1d9b0     00 12 06 F6 | 	mov	arg01, #0
1d9b4     09 14 CE F9 | 	bmask	arg02, #9
1d9b8     0F 17 02 F6 | 	mov	arg03, local01
1d9bc     90 EF BF FD | 	call	#_hg010b_spin2_fastline
1d9c0     01 1E 06 F1 | 	add	local01, #1
1d9c4     04 1E 56 F2 | 	cmps	local01, #4 wc
1d9c8     D8 FF 9F CD |  if_b	jmp	#LR__2352
1d9cc                 | ' 
1d9cc                 | ' repeat i from 0 to 35
1d9cc     00 1E 06 F6 | 	mov	local01, #0
1d9d0                 | LR__2353
1d9d0     0F 1B 02 F6 | 	mov	arg05, local01
1d9d4     01 1A 06 F1 | 	add	arg05, #1
1d9d8     10 00 00 FF 
1d9dc     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1d9e0     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1d9e4     0B 1B 02 FD | 	qmul	arg05, arg03
1d9e8                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
1d9e8     F6 03 00 FF 
1d9ec     00 12 06 F6 | 	mov	arg01, ##519168
1d9f0     F9 E4 05 F1 | 	add	objptr, #249
1d9f4     F2 1A 02 FB | 	rdlong	arg05, objptr
1d9f8     0D 13 82 F1 | 	sub	arg01, arg05
1d9fc     F5 E4 85 F1 | 	sub	objptr, #245
1da00     F2 14 02 FB | 	rdlong	arg02, objptr
1da04     10 00 00 FF 
1da08     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1da0c     0B 00 00 FF 
1da10     C8 E4 05 F1 | 	add	objptr, ##5832
1da14     18 1A 62 FD | 	getqx	arg05
1da18     0D 15 02 F1 | 	add	arg02, arg05
1da1c     D4 04 B0 FD | 	call	#_psram_spin2_read1
1da20     10 00 00 FF 
1da24     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1da28     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1da2c     0B 1F 02 FD | 	qmul	local01, arg03
1da30                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
1da30     F6 03 00 FF 
1da34     00 12 06 F6 | 	mov	arg01, ##519168
1da38     0A 00 00 FF 
1da3c     D3 E5 85 F1 | 	sub	objptr, ##5587
1da40     F2 1A 02 FB | 	rdlong	arg05, objptr
1da44     0D 13 82 F1 | 	sub	arg01, arg05
1da48     F5 E4 85 F1 | 	sub	objptr, #245
1da4c     F2 14 02 FB | 	rdlong	arg02, objptr
1da50     10 00 00 FF 
1da54     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1da58     0B 00 00 FF 
1da5c     C8 E4 05 F1 | 	add	objptr, ##5832
1da60     18 1A 62 FD | 	getqx	arg05
1da64     0D 15 02 F1 | 	add	arg02, arg05
1da68     24 05 B0 FD | 	call	#_psram_spin2_write
1da6c     0B 00 00 FF 
1da70     CC E4 85 F1 | 	sub	objptr, ##5836
1da74     01 1E 06 F1 | 	add	local01, #1
1da78     24 1E 56 F2 | 	cmps	local01, #36 wc
1da7c     50 FF 9F CD |  if_b	jmp	#LR__2353
1da80                 | ' repeat i from 0 to timings[7]-1
1da80     00 1E 06 F6 | 	mov	local01, #0
1da84     10 00 00 FF 
1da88     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1da8c     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1da90     10 00 00 FF 
1da94     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1da98     01 20 86 F1 | 	sub	local02, #1
1da9c     00 20 56 F2 | 	cmps	local02, #0 wc
1daa0     01 22 86 F6 | 	negc	local03, #1
1daa4     11 21 02 F1 | 	add	local02, local03
1daa8                 | LR__2354
1daa8                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
1daa8     04 E4 05 F1 | 	add	objptr, #4
1daac     F2 12 02 FB | 	rdlong	arg01, objptr
1dab0     10 00 00 FF 
1dab4     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1dab8     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1dabc     10 00 00 FF 
1dac0     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1dac4     0D 19 02 F6 | 	mov	arg04, arg05
1dac8     03 18 66 F0 | 	shl	arg04, #3
1dacc     0D 19 02 F1 | 	add	arg04, arg05
1dad0     02 18 66 F0 | 	shl	arg04, #2
1dad4     0F 19 02 F1 | 	add	arg04, local01
1dad8     0C 13 02 F1 | 	add	arg01, arg04
1dadc     20 14 06 F6 | 	mov	arg02, #32
1dae0     01 16 06 F6 | 	mov	arg03, #1
1dae4     00 18 06 F6 | 	mov	arg04, #0
1dae8     01 1A 06 F6 | 	mov	arg05, #1
1daec     0B 00 00 FF 
1daf0     C8 E4 05 F1 | 	add	objptr, ##5832
1daf4     34 05 B0 FD | 	call	#_psram_spin2_fill
1daf8     0B 00 00 FF 
1dafc     CC E4 85 F1 | 	sub	objptr, ##5836
1db00     11 1F 02 F1 | 	add	local01, local03
1db04     10 1F 0A F2 | 	cmp	local01, local02 wz
1db08     9C FF 9F 5D |  if_ne	jmp	#LR__2354
1db0c     A7 F0 03 F6 | 	mov	ptra, fp
1db10     B2 00 A0 FD | 	call	#popregs_
1db14                 | _hg010b_spin2_scrollup2_ret
1db14     2D 00 64 FD | 	ret
1db18                 | 
1db18                 | ' 
1db18                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
1db18                 | ' 
1db18                 | ' pub crlf()
1db18                 | _hg010b_spin2_crlf
1db18                 | ' 
1db18                 | ' cursor_x:=leading_spaces*2
1db18     01 00 00 FF 
1db1c     B6 E4 05 F1 | 	add	objptr, ##694
1db20     F2 16 02 FB | 	rdlong	arg03, objptr
1db24     01 16 66 F0 | 	shl	arg03, #1
1db28     01 00 00 FF 
1db2c     7A E4 85 F1 | 	sub	objptr, ##634
1db30     F2 16 52 FC | 	wrword	arg03, objptr
1db34                 | ' cursor_y+=1
1db34     02 E4 05 F1 | 	add	objptr, #2
1db38     F2 16 C2 FA | 	rdbyte	arg03, objptr
1db3c     01 16 06 F1 | 	add	arg03, #1
1db40     F2 16 42 FC | 	wrbyte	arg03, objptr
1db44                 | ' if cursor_y>st_lines-1
1db44     C3 E4 05 F1 | 	add	objptr, #195
1db48     F2 16 02 FB | 	rdlong	arg03, objptr
1db4c     01 16 86 F1 | 	sub	arg03, #1
1db50     C3 E4 85 F1 | 	sub	objptr, #195
1db54     F2 14 C2 FA | 	rdbyte	arg02, objptr
1db58     3E E4 85 F1 | 	sub	objptr, #62
1db5c     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
1db60     2C 00 90 ED |  if_be	jmp	#LR__2360
1db64                 | '   scrollup2()
1db64     00 12 06 F6 | 	mov	arg01, #0
1db68     01 00 00 FF 
1db6c     58 14 06 F6 | 	mov	arg02, ##600
1db70     10 16 06 F6 | 	mov	arg03, #16
1db74     38 FD BF FD | 	call	#_hg010b_spin2_scrollup2
1db78                 | '   cursor_y:=st_lines-1
1db78     01 E5 05 F1 | 	add	objptr, #257
1db7c     F2 16 02 FB | 	rdlong	arg03, objptr
1db80     01 16 86 F1 | 	sub	arg03, #1
1db84     C3 E4 85 F1 | 	sub	objptr, #195
1db88     F2 16 42 FC | 	wrbyte	arg03, objptr
1db8c     3E E4 85 F1 | 	sub	objptr, #62
1db90                 | LR__2360
1db90                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
1db90     3C E4 05 F1 | 	add	objptr, #60
1db94     F2 14 E2 FA | 	rdword	arg02, objptr
1db98     02 14 66 F0 | 	shl	arg02, #2
1db9c     02 E4 05 F1 | 	add	objptr, #2
1dba0     F2 16 C2 FA | 	rdbyte	arg03, objptr
1dba4     3E E4 85 F1 | 	sub	objptr, #62
1dba8     04 16 66 F0 | 	shl	arg03, #4
1dbac     04 16 06 F1 | 	add	arg03, #4
1dbb0     11 12 06 F6 | 	mov	arg01, #17
1dbb4     4C EB BF FD | 	call	#_hg010b_spin2_setspritepos
1dbb8                 | _hg010b_spin2_crlf_ret
1dbb8     2D 00 64 FD | 	ret
1dbbc                 | 
1dbbc                 | ' 
1dbbc                 | ' 
1dbbc                 | ' '*************************************************************************
1dbbc                 | ' '                                                                        *
1dbbc                 | ' '  Conversions                                                           *
1dbbc                 | ' '                                                                        *
1dbbc                 | ' '*************************************************************************
1dbbc                 | ' 
1dbbc                 | ' ''---------- Convert a integer to dec string, return a pointer
1dbbc                 | ' 
1dbbc                 | ' pub inttostr(i):result |q,pos,k,j
1dbbc                 | _hg010b_spin2_inttostr
1dbbc     03 4A 05 F6 | 	mov	COUNT_, #3
1dbc0     A8 00 A0 FD | 	call	#pushregs_
1dbc4     09 1F 0A F6 | 	mov	local01, arg01 wz
1dbc8                 | ' 
1dbc8                 | ' j:=i
1dbc8                 | ' pos:=10
1dbc8     0A 20 06 F6 | 	mov	local02, #10
1dbcc                 | ' k:=0
1dbcc     00 22 06 F6 | 	mov	local03, #0
1dbd0                 | ' 
1dbd0                 | ' if (j==0)
1dbd0     18 00 90 5D |  if_ne	jmp	#LR__2370
1dbd4                 | '   n_string[0]:=48
1dbd4     4D E4 05 F1 | 	add	objptr, #77
1dbd8     F2 60 48 FC | 	wrbyte	#48, objptr
1dbdc                 | '   n_string[1]:=0
1dbdc     01 E4 05 F1 | 	add	objptr, #1
1dbe0     F2 00 48 FC | 	wrbyte	#0, objptr
1dbe4     4E E4 85 F1 | 	sub	objptr, #78
1dbe8     C4 00 90 FD | 	jmp	#LR__2377
1dbec                 | LR__2370
1dbec                 | ' 
1dbec                 | ' else
1dbec                 | '   if (j<0)
1dbec     0F 1F 52 F6 | 	abs	local01, local01 wc
1dbf0                 | '     j:=0-j
1dbf0                 | '     k:=45
1dbf0     2D 22 06 C6 |  if_b	mov	local03, #45
1dbf4                 | ' 
1dbf4                 | '   n_string[11]:=0
1dbf4     58 E4 05 F1 | 	add	objptr, #88
1dbf8     F2 00 48 FC | 	wrbyte	#0, objptr
1dbfc     58 E4 85 F1 | 	sub	objptr, #88
1dc00     97 24 48 FB | 	callpa	#(@LR__2372-@LR__2371)>>2,fcache_load_ptr_
1dc04                 | '   repeat while (pos>-1)
1dc04                 | LR__2371
1dc04     00 20 56 F2 | 	cmps	local02, #0 wc
1dc08     40 00 90 CD |  if_b	jmp	#LR__2373
1dc0c     0F FB 51 F6 | 	abs	result1, local01 wc
1dc10     0A FA 15 FD | 	qdiv	result1, #10
1dc14                 | '     q:=j//10
1dc14     19 FA 61 FD | 	getqy	result1
1dc18     FD FA 81 F6 | 	negc	result1, result1
1dc1c     0F 1F 52 F6 | 	abs	local01, local01 wc
1dc20     0A 1E 16 FD | 	qdiv	local01, #10
1dc24                 | '     q:=48+q
1dc24     30 FA 05 F1 | 	add	result1, #48
1dc28                 | '     n_string[pos]:=q
1dc28     10 1F 02 F6 | 	mov	local01, local02
1dc2c     4D E4 05 F1 | 	add	objptr, #77
1dc30     F2 1E 02 F1 | 	add	local01, objptr
1dc34     0F FB 41 FC | 	wrbyte	result1, local01
1dc38                 | '     j:=j/10
1dc38     4D E4 85 F1 | 	sub	objptr, #77
1dc3c                 | '     pos-=1
1dc3c     01 20 86 F1 | 	sub	local02, #1
1dc40     18 1E 62 FD | 	getqx	local01
1dc44     0F 1F 82 F6 | 	negc	local01, local01
1dc48     B8 FF 9F FD | 	jmp	#LR__2371
1dc4c                 | LR__2372
1dc4c                 | LR__2373
1dc4c                 | '   repeat while n_string[0]==48
1dc4c                 | LR__2374
1dc4c     4D E4 05 F1 | 	add	objptr, #77
1dc50     F2 16 C2 FA | 	rdbyte	arg03, objptr
1dc54     4D E4 85 F1 | 	sub	objptr, #77
1dc58     30 16 0E F2 | 	cmp	arg03, #48 wz
1dc5c     20 00 90 5D |  if_ne	jmp	#LR__2375
1dc60                 | '     bytemove(@n_string,@n_string+1,12)
1dc60     4D E4 05 F1 | 	add	objptr, #77
1dc64     F2 12 02 F6 | 	mov	arg01, objptr
1dc68     F2 14 02 F6 | 	mov	arg02, objptr
1dc6c     4D E4 85 F1 | 	sub	objptr, #77
1dc70     01 14 06 F1 | 	add	arg02, #1
1dc74     0C 16 06 F6 | 	mov	arg03, #12
1dc78     BC 0D B0 FD | 	call	#__system____builtin_memmove
1dc7c     CC FF 9F FD | 	jmp	#LR__2374
1dc80                 | LR__2375
1dc80                 | ' 
1dc80                 | '   if k==45
1dc80     2D 22 0E F2 | 	cmp	local03, #45 wz
1dc84     28 00 90 5D |  if_ne	jmp	#LR__2376
1dc88                 | '      bytemove(@n_string+1,@n_string,12)
1dc88     4D E4 05 F1 | 	add	objptr, #77
1dc8c     F2 12 02 F6 | 	mov	arg01, objptr
1dc90     01 12 06 F1 | 	add	arg01, #1
1dc94     F2 14 02 F6 | 	mov	arg02, objptr
1dc98     4D E4 85 F1 | 	sub	objptr, #77
1dc9c     0C 16 06 F6 | 	mov	arg03, #12
1dca0     94 0D B0 FD | 	call	#__system____builtin_memmove
1dca4                 | '      n_string[0]:=k
1dca4     4D E4 05 F1 | 	add	objptr, #77
1dca8     F2 22 42 FC | 	wrbyte	local03, objptr
1dcac     4D E4 85 F1 | 	sub	objptr, #77
1dcb0                 | LR__2376
1dcb0                 | LR__2377
1dcb0                 | ' 
1dcb0                 | ' q:=@n_string
1dcb0     4D E4 05 F1 | 	add	objptr, #77
1dcb4     F2 FA 01 F6 | 	mov	result1, objptr
1dcb8     4D E4 85 F1 | 	sub	objptr, #77
1dcbc                 | ' return q
1dcbc     A7 F0 03 F6 | 	mov	ptra, fp
1dcc0     B2 00 A0 FD | 	call	#popregs_
1dcc4                 | _hg010b_spin2_inttostr_ret
1dcc4     2D 00 64 FD | 	ret
1dcc8                 | 
1dcc8                 | ' 
1dcc8                 | ' '..............................................................................
1dcc8                 | ' 
1dcc8                 | ' {{
1dcc8                 | ' }}
1dcc8                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
1dcc8                 | _psram_spin2_startx
1dcc8     04 4A 05 F6 | 	mov	COUNT_, #4
1dccc     A8 00 A0 FD | 	call	#pushregs_
1dcd0     09 1F 02 F6 | 	mov	local01, arg01
1dcd4     0B 21 02 F6 | 	mov	local02, arg03
1dcd8     0C 23 02 F6 | 	mov	local03, arg04
1dcdc                 | '     stop() ' restart driver if required
1dcdc     54 01 B0 FD | 	call	#_psram_spin2_stop
1dce0     00 1E 0E F2 | 	cmp	local01, #0 wz
1dce4     14 1E 06 AB |  if_e	rdlong	local01, #20
1dce8     0F 15 52 F6 | 	abs	arg02, local01 wc
1dcec     A1 07 00 FF 
1dcf0     40 14 16 FD | 	qdiv	arg02, ##1000000
1dcf4                 | ' 
1dcf4                 | '     ' use current frequency if none specified
1dcf4                 | ' 
1dcf4                 | '     if freq == 0 
1dcf4                 | '         freq := clkfreq 
1dcf4                 | ' 
1dcf4                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
1dcf4                 | ' 
1dcf4                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
1dcf4                 | '     if burst < 0
1dcf4                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
1dcf4     18 14 62 FD | 	getqx	arg02
1dcf8     0A 19 82 F6 | 	negc	arg04, arg02
1dcfc     03 18 66 F0 | 	shl	arg04, #3
1dd00     84 18 86 F1 | 	sub	arg04, #132
1dd04     04 18 46 F0 | 	shr	arg04, #4
1dd08     04 18 66 F0 | 	shl	arg04, #4
1dd0c     00 18 56 F2 | 	cmps	arg04, #0 wc
1dd10     0E FA 65 C6 |  if_b	neg	result1, #14
1dd14     10 01 90 CD |  if_b	jmp	#LR__2383
1dd18                 | ' 
1dd18                 | '     ' compute the input delay
1dd18                 | ' 
1dd18                 | '     if delay <= 0
1dd18     01 20 56 F2 | 	cmps	local02, #1 wc
1dd1c     10 00 90 3D |  if_ae	jmp	#LR__2380
1dd20                 | '         delay := lookupDelay(freq)
1dd20     0F 13 02 F6 | 	mov	arg01, local01
1dd24     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
1dd28     FD 20 02 F6 | 	mov	local02, result1
1dd2c     04 00 90 FD | 	jmp	#LR__2381
1dd30                 | LR__2380
1dd30                 | '     else
1dd30                 | '         delay <#= $f ' limit to 15
1dd30     0F 20 66 F3 | 	fles	local02, #15
1dd34                 | LR__2381
1dd34                 | ' 
1dd34                 | '     ' create our lock
1dd34                 | ' 
1dd34                 | '     driverlock := LOCKNEW()  
1dd34     00 FA 05 F6 | 	mov	result1, #0
1dd38     04 FA 61 FD | 	locknew	result1
1dd3c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1dd40     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
1dd44                 | '     if driverlock == -1
1dd44     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1dd48     FF FF 7F FF 
1dd4c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1dd50                 | '         return ERR_NO_LOCK
1dd50     1A FA 65 A6 |  if_e	neg	result1, #26
1dd54     D0 00 90 AD |  if_e	jmp	#LR__2383
1dd58                 | ' 
1dd58                 | '     ' patch in the proper data and HUB addresses to the startup structure
1dd58                 | ' 
1dd58                 | '     long[@startupData][0]:=clkfreq
1dd58     14 1E 06 FB | 	rdlong	local01, #20
1dd5c     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
1dd60     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
1dd64                 | ' '    long[@startupData][1]:=$1000_0000
1dd64                 | '     long[@startupData][5]:=@deviceData
1dd64     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1dd68     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1dd6c     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
1dd70     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1dd74     14 14 06 F1 | 	add	arg02, #20
1dd78     0A 1F 62 FC | 	wrlong	local01, arg02
1dd7c                 | '     long[@startupData][6]:=@qosData
1dd7c     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
1dd80     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1dd84     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1dd88     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1dd8c     18 14 06 F1 | 	add	arg02, #24
1dd90     0A 1F 62 FC | 	wrlong	local01, arg02
1dd94                 | '     long[@startupData][7]:=$7FF00
1dd94     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1dd98     1C 1E 06 F1 | 	add	local01, #28
1dd9c     FF 03 80 FF 
1dda0     0F 01 6A FC | 	wrlong	##524032, local01
1dda4                 | ' 
1dda4                 | '     ' setup some default bank and QoS parameter values
1dda4                 | ' 
1dda4                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
1dda4     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1dda8     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
1ddac     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
1ddb0     10 18 66 F0 | 	shl	arg04, #16
1ddb4     0C 20 66 F0 | 	shl	local02, #12
1ddb8     10 19 42 F5 | 	or	arg04, local02
1ddbc     18 18 46 F5 | 	or	arg04, #24
1ddc0     0C 15 02 F6 | 	mov	arg02, arg04
1ddc4     02 16 06 F6 | 	mov	arg03, #2
1ddc8     A0 00 A0 FD | 	call	#\builtin_longfill_
1ddcc                 | '     longfill(@qosData, $FFFF0000, 8)
1ddcc     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1ddd0     07 16 06 F6 | 	mov	arg03, #7
1ddd4     28 16 62 FD | 	setq	arg03
1ddd8     80 FF FF FF 
1dddc     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
1dde0                 | ' 
1dde0                 | '     ' get the address of the PSRAM memory driver so we can start it
1dde0                 | ' 
1dde0                 | '     driverAddr:= driver.getDriverAddr()
1dde0                 | '     return @driver_start
1dde0     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
1dde4     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
1dde8     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
1ddec                 | ' 
1ddec                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
1ddec                 | ' 
1ddec                 | '     if desiredcog < 0
1ddec     00 22 56 F2 | 	cmps	local03, #0 wc
1ddf0                 | '         desiredcog := NEWCOG
1ddf0     10 22 06 C6 |  if_b	mov	local03, #16
1ddf4                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
1ddf4     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1ddf8     11 25 02 F6 | 	mov	local04, local03
1ddfc     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
1de00     0A 25 F2 FC | 	coginit	local04, arg02 wc
1de04     01 24 66 C6 |  if_b	neg	local04, #1
1de08     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1de0c     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
1de10                 | '     repeat until long[@startupData] == 0 
1de10     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
1de14                 | LR__2382
1de14     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
1de18     F8 FF 9F 5D |  if_ne	jmp	#LR__2382
1de1c                 | ' 
1de1c                 | '     return drivercog
1de1c     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1de20     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
1de24     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1de28                 | LR__2383
1de28     A7 F0 03 F6 | 	mov	ptra, fp
1de2c     B2 00 A0 FD | 	call	#popregs_
1de30                 | _psram_spin2_startx_ret
1de30     2D 00 64 FD | 	ret
1de34                 | 
1de34                 | ' 
1de34                 | ' '..............................................................................
1de34                 | ' 
1de34                 | ' {{
1de34                 | ' }}
1de34                 | ' PUB stop() : i
1de34                 | _psram_spin2_stop
1de34     00 00 06 F6 | 	mov	_var01, #0
1de38                 | '     if drivercog <> -1
1de38     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1de3c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1de40     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1de44     FF FF 7F FF 
1de48     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
1de4c     70 00 90 AD |  if_e	jmp	#LR__2393
1de50                 | '         cogstop(drivercog) ' a rather brutal stop
1de50     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1de54     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1de58     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1de5c     03 12 62 FD | 	cogstop	arg01
1de60     97 26 48 FB | 	callpa	#(@LR__2392-@LR__2390)>>2,fcache_load_ptr_
1de64                 | '         repeat i from 0 to 7
1de64                 | LR__2390
1de64                 | '             if long[$7FF00][i*3] < 0
1de64     00 FB 01 F6 | 	mov	result1, _var01
1de68     01 FA 65 F0 | 	shl	result1, #1
1de6c     00 FB 01 F1 | 	add	result1, _var01
1de70     02 FA 65 F0 | 	shl	result1, #2
1de74     FF 03 00 FF 
1de78     00 FB 05 F1 | 	add	result1, ##524032
1de7c     FD FA 01 FB | 	rdlong	result1, result1
1de80     00 FA 55 F2 | 	cmps	result1, #0 wc
1de84     1C 00 90 3D |  if_ae	jmp	#LR__2391
1de88                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
1de88     00 FB 01 F6 | 	mov	result1, _var01
1de8c     01 FA 65 F0 | 	shl	result1, #1
1de90     00 FB 01 F1 | 	add	result1, _var01
1de94     02 FA 65 F0 | 	shl	result1, #2
1de98     FF 03 00 FF 
1de9c     00 FB 05 F1 | 	add	result1, ##524032
1dea0     FD 20 68 FC | 	wrlong	#16, result1
1dea4                 | LR__2391
1dea4     01 00 06 F1 | 	add	_var01, #1
1dea8     08 00 56 F2 | 	cmps	_var01, #8 wc
1deac     B4 FF 9F CD |  if_b	jmp	#LR__2390
1deb0                 | LR__2392
1deb0                 | '         drivercog := -1
1deb0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1deb4     FF FF FF FF 
1deb8     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
1debc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1dec0                 | LR__2393
1dec0                 | '     if driverlock <> -1
1dec0     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1dec4     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1dec8     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1decc     FF FF 7F FF 
1ded0     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1ded4                 | '         LOCKRET(driverlock)
1ded4     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
1ded8     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
1dedc     05 12 62 5D |  if_ne	lockret	arg01
1dee0                 | '         driverlock := -1
1dee0     FF FF FF 5F 
1dee4     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
1dee8     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
1deec     00 FB 01 F6 | 	mov	result1, _var01
1def0                 | _psram_spin2_stop_ret
1def0     2D 00 64 FD | 	ret
1def4                 | 
1def4                 | ' 
1def4                 | ' '..............................................................................
1def4                 | ' 
1def4                 | ' {{
1def4                 | ' }}
1def4                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
1def4                 | _psram_spin2_read1
1def4                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1def4                 | '     if drivercog == -1 ' driver must be running
1def4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1def8     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1defc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1df00     FF FF 7F FF 
1df04     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1df08                 | '         return ERR_INACTIVE
1df08     0F FA 65 A6 |  if_e	neg	result1, #15
1df0c     7C 00 90 AD |  if_e	jmp	#LR__2401
1df10                 | '     if count == 0 ' don't even bother reading
1df10     00 16 0E F2 | 	cmp	arg03, #0 wz
1df14                 | '         return 0
1df14     00 FA 05 A6 |  if_e	mov	result1, #0
1df18     70 00 90 AD |  if_e	jmp	#LR__2401
1df1c                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1df1c     00 FA 05 F6 | 	mov	result1, #0
1df20     01 FA 61 FD | 	cogid	result1
1df24     FD 00 02 F6 | 	mov	_var01, result1
1df28     01 00 66 F0 | 	shl	_var01, #1
1df2c     FD 00 02 F1 | 	add	_var01, result1
1df30     02 00 66 F0 | 	shl	_var01, #2
1df34     FF 03 00 FF 
1df38     00 03 06 F6 | 	mov	_var02, ##524032
1df3c     00 03 02 F1 | 	add	_var02, _var01
1df40                 | '     if long[mailbox] < 0
1df40     01 01 02 FB | 	rdlong	_var01, _var02
1df44     00 00 56 F2 | 	cmps	_var01, #0 wc
1df48                 | '         return ERR_MAILBOX_BUSY
1df48     1C FA 65 C6 |  if_b	neg	result1, #28
1df4c     3C 00 90 CD |  if_b	jmp	#LR__2401
1df50                 | '     long[mailbox][2] := count
1df50     08 02 06 F1 | 	add	_var02, #8
1df54     01 17 62 FC | 	wrlong	arg03, _var02
1df58                 | '     long[mailbox][1] := dstHubAddr
1df58     04 02 86 F1 | 	sub	_var02, #4
1df5c     01 13 62 FC | 	wrlong	arg01, _var02
1df60     04 02 86 F1 | 	sub	_var02, #4
1df64                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
1df64     0A 05 02 F6 | 	mov	_var03, arg02
1df68     D9 04 06 F4 | 	bitl	_var03, #217
1df6c     00 00 58 FF 
1df70     00 00 06 F6 | 	mov	_var01, ##-1342177280
1df74     02 01 02 F1 | 	add	_var01, _var03
1df78     01 01 62 FC | 	wrlong	_var01, _var02
1df7c                 | '     repeat
1df7c                 | LR__2400
1df7c                 | '         result := long[mailbox]    
1df7c     01 05 02 FB | 	rdlong	_var03, _var02
1df80     00 04 56 F2 | 	cmps	_var03, #0 wc
1df84     F4 FF 9F CD |  if_b	jmp	#LR__2400
1df88                 | '     while result < 0   
1df88                 | '     return -result                       'return success or error
1df88     02 FB 61 F6 | 	neg	result1, _var03
1df8c                 | LR__2401
1df8c                 | _psram_spin2_read1_ret
1df8c     2D 00 64 FD | 	ret
1df90                 | 
1df90                 | ' 
1df90                 | ' '..............................................................................
1df90                 | ' 
1df90                 | ' {{
1df90                 | ' }}
1df90                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
1df90                 | _psram_spin2_write
1df90                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1df90                 | '     if drivercog == -1 ' driver must be running
1df90     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1df94     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1df98     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1df9c     FF FF 7F FF 
1dfa0     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1dfa4                 | '         return ERR_INACTIVE
1dfa4     0F FA 65 A6 |  if_e	neg	result1, #15
1dfa8     7C 00 90 AD |  if_e	jmp	#LR__2411
1dfac                 | '     if count == 0 ' don't even bother writing
1dfac     00 16 0E F2 | 	cmp	arg03, #0 wz
1dfb0                 | '         return 0
1dfb0     00 FA 05 A6 |  if_e	mov	result1, #0
1dfb4     70 00 90 AD |  if_e	jmp	#LR__2411
1dfb8                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1dfb8     00 FA 05 F6 | 	mov	result1, #0
1dfbc     01 FA 61 FD | 	cogid	result1
1dfc0     FD 00 02 F6 | 	mov	_var01, result1
1dfc4     01 00 66 F0 | 	shl	_var01, #1
1dfc8     FD 00 02 F1 | 	add	_var01, result1
1dfcc     02 00 66 F0 | 	shl	_var01, #2
1dfd0     FF 03 00 FF 
1dfd4     00 03 06 F6 | 	mov	_var02, ##524032
1dfd8     00 03 02 F1 | 	add	_var02, _var01
1dfdc                 | '     if long[mailbox] < 0
1dfdc     01 01 02 FB | 	rdlong	_var01, _var02
1dfe0     00 00 56 F2 | 	cmps	_var01, #0 wc
1dfe4                 | '         return ERR_MAILBOX_BUSY
1dfe4     1C FA 65 C6 |  if_b	neg	result1, #28
1dfe8     3C 00 90 CD |  if_b	jmp	#LR__2411
1dfec                 | '     long[mailbox][2] := count
1dfec     08 02 06 F1 | 	add	_var02, #8
1dff0     01 17 62 FC | 	wrlong	arg03, _var02
1dff4                 | '     long[mailbox][1] := srcHubAddr
1dff4     04 02 86 F1 | 	sub	_var02, #4
1dff8     01 13 62 FC | 	wrlong	arg01, _var02
1dffc     04 02 86 F1 | 	sub	_var02, #4
1e000                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
1e000     0A 05 02 F6 | 	mov	_var03, arg02
1e004     D9 04 06 F4 | 	bitl	_var03, #217
1e008     00 00 78 FF 
1e00c     00 00 06 F6 | 	mov	_var01, ##-268435456
1e010     02 01 02 F1 | 	add	_var01, _var03
1e014     01 01 62 FC | 	wrlong	_var01, _var02
1e018                 | '     repeat
1e018                 | LR__2410
1e018                 | '         result := long[mailbox]    
1e018     01 05 02 FB | 	rdlong	_var03, _var02
1e01c     00 04 56 F2 | 	cmps	_var03, #0 wc
1e020     F4 FF 9F CD |  if_b	jmp	#LR__2410
1e024                 | '     while result < 0   
1e024                 | '     return -result                       'return success or error
1e024     02 FB 61 F6 | 	neg	result1, _var03
1e028                 | LR__2411
1e028                 | _psram_spin2_write_ret
1e028     2D 00 64 FD | 	ret
1e02c                 | 
1e02c                 | ' 
1e02c                 | ' ' generalized fill
1e02c                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
1e02c                 | _psram_spin2_fill
1e02c     09 01 02 F6 | 	mov	_var01, arg01
1e030     0A 03 02 F6 | 	mov	_var02, arg02
1e034     0B 05 02 F6 | 	mov	_var03, arg03
1e038     0D 07 02 F6 | 	mov	_var04, arg05
1e03c                 | '     case datasize 
1e03c     01 06 86 F1 | 	sub	_var04, #1
1e040     04 06 26 F3 | 	fle	_var04, #4
1e044     30 06 62 FD | 	jmprel	_var04
1e048                 | LR__2420
1e048     10 00 90 FD | 	jmp	#LR__2421
1e04c     18 00 90 FD | 	jmp	#LR__2422
1e050     2C 00 90 FD | 	jmp	#LR__2424
1e054     1C 00 90 FD | 	jmp	#LR__2423
1e058     24 00 90 FD | 	jmp	#LR__2424
1e05c                 | LR__2421
1e05c                 | '         1: req := driver.R_WRITEBYTE
1e05c     00 00 60 FF 
1e060     00 08 06 F6 | 	mov	_var05, ##-1073741824
1e064     20 00 90 FD | 	jmp	#LR__2425
1e068                 | LR__2422
1e068                 | '         2: req := driver.R_WRITEWORD
1e068     00 00 68 FF 
1e06c     00 08 06 F6 | 	mov	_var05, ##-805306368
1e070     14 00 90 FD | 	jmp	#LR__2425
1e074                 | LR__2423
1e074                 | '         4: req := driver.R_WRITELONG
1e074     00 00 70 FF 
1e078     00 08 06 F6 | 	mov	_var05, ##-536870912
1e07c     08 00 90 FD | 	jmp	#LR__2425
1e080                 | LR__2424
1e080                 | '         other : return ERR_INVALID
1e080     06 FA 65 F6 | 	neg	result1, #6
1e084     94 00 90 FD | 	jmp	#LR__2427
1e088                 | LR__2425
1e088                 | '     if count == 0   ' nothing to do
1e088     00 04 0E F2 | 	cmp	_var03, #0 wz
1e08c                 | '         return 0
1e08c     00 FA 05 A6 |  if_e	mov	result1, #0
1e090     88 00 90 AD |  if_e	jmp	#LR__2427
1e094                 | '     if drivercog == -1
1e094     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1e098     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
1e09c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1e0a0     FF FF 7F FF 
1e0a4     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
1e0a8                 | '         return ERR_INACTIVE
1e0a8     0F FA 65 A6 |  if_e	neg	result1, #15
1e0ac     6C 00 90 AD |  if_e	jmp	#LR__2427
1e0b0                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
1e0b0     00 FA 05 F6 | 	mov	result1, #0
1e0b4     01 FA 61 FD | 	cogid	result1
1e0b8     FD 06 02 F6 | 	mov	_var04, result1
1e0bc     01 06 66 F0 | 	shl	_var04, #1
1e0c0     FD 06 02 F1 | 	add	_var04, result1
1e0c4     02 06 66 F0 | 	shl	_var04, #2
1e0c8     FF 03 00 FF 
1e0cc     00 0B 06 F6 | 	mov	_var06, ##524032
1e0d0     03 0B 02 F1 | 	add	_var06, _var04
1e0d4                 | '     if long[mailbox] < 0
1e0d4     05 07 02 FB | 	rdlong	_var04, _var06
1e0d8     00 06 56 F2 | 	cmps	_var04, #0 wc
1e0dc                 | '         return ERR_MAILBOX_BUSY
1e0dc     1C FA 65 C6 |  if_b	neg	result1, #28
1e0e0     38 00 90 CD |  if_b	jmp	#LR__2427
1e0e4                 | '     long[mailbox][2] := count
1e0e4     08 0A 06 F1 | 	add	_var06, #8
1e0e8     05 05 62 FC | 	wrlong	_var03, _var06
1e0ec                 | '     long[mailbox][1] := pattern
1e0ec     04 0A 86 F1 | 	sub	_var06, #4
1e0f0     05 03 62 FC | 	wrlong	_var02, _var06
1e0f4     04 0A 86 F1 | 	sub	_var06, #4
1e0f8                 | '     long[mailbox] := req + (addr & $1ffffff)
1e0f8     04 0D 02 F6 | 	mov	_var07, _var05
1e0fc     00 0F 02 F6 | 	mov	_var08, _var01
1e100     D9 0E 06 F4 | 	bitl	_var08, #217
1e104     07 0D 02 F1 | 	add	_var07, _var08
1e108     05 0D 62 FC | 	wrlong	_var07, _var06
1e10c                 | '     repeat
1e10c                 | LR__2426
1e10c                 | '         r := long[mailbox]
1e10c     05 0F 02 FB | 	rdlong	_var08, _var06
1e110     00 0E 56 F2 | 	cmps	_var08, #0 wc
1e114     F4 FF 9F CD |  if_b	jmp	#LR__2426
1e118                 | '     while r < 0
1e118                 | '     return -r                  ' return 0 for success or negated error code
1e118     07 FB 61 F6 | 	neg	result1, _var08
1e11c                 | LR__2427
1e11c                 | _psram_spin2_fill_ret
1e11c     2D 00 64 FD | 	ret
1e120                 | 
1e120                 | ' 
1e120                 | ' '..............................................................................
1e120                 | ' 
1e120                 | ' {{
1e120                 | ' }}
1e120                 | ' PUB setQos(cog, qos) : result | mailbox
1e120                 | _psram_spin2_setQos
1e120     09 01 02 F6 | 	mov	_var01, arg01
1e124                 | '     if drivercog == -1 ' driver must be running
1e124     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1e128     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1e12c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1e130     FF FF 7F FF 
1e134     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1e138                 | '         return ERR_INACTIVE
1e138     0F FA 65 A6 |  if_e	neg	result1, #15
1e13c     9C 00 90 AD |  if_e	jmp	#LR__2434
1e140                 | '     if cog < 0 or cog > 7 ' enforce cog id range
1e140     00 00 56 F2 | 	cmps	_var01, #0 wc
1e144     08 00 90 CD |  if_b	jmp	#LR__2430
1e148     08 00 56 F2 | 	cmps	_var01, #8 wc
1e14c     08 00 90 CD |  if_b	jmp	#LR__2431
1e150                 | LR__2430
1e150                 | '         return ERR_INVALID
1e150     06 FA 65 F6 | 	neg	result1, #6
1e154     84 00 90 FD | 	jmp	#LR__2434
1e158                 | LR__2431
1e158                 | '     long[@qosData][cog] := qos & !$1ff
1e158     FF 15 26 F5 | 	andn	arg02, #511
1e15c     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1e160     02 00 66 F0 | 	shl	_var01, #2
1e164     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
1e168     00 15 62 FC | 	wrlong	arg02, _var01
1e16c                 | '     mailbox := $7FF00 + drivercog*12
1e16c     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
1e170     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
1e174     02 07 02 F6 | 	mov	_var04, _var03
1e178     01 06 66 F0 | 	shl	_var04, #1
1e17c     02 07 02 F1 | 	add	_var04, _var03
1e180     02 06 66 F0 | 	shl	_var04, #2
1e184     FF 03 00 FF 
1e188     00 09 06 F6 | 	mov	_var05, ##524032
1e18c     03 09 02 F1 | 	add	_var05, _var04
1e190                 | '     repeat until LOCKTRY(driverlock)
1e190     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
1e194                 | LR__2432
1e194     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1e198     06 12 72 FD | 	locktry	arg01 wc
1e19c     F4 FF 9F 3D |  if_ae	jmp	#LR__2432
1e1a0     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1e1a4                 | '     long[mailbox] := driver.R_CONFIG + cogid()
1e1a4     00 06 06 F6 | 	mov	_var04, #0
1e1a8     01 06 62 FD | 	cogid	_var04
1e1ac     00 00 78 FF 
1e1b0     00 02 06 F6 | 	mov	_var02, ##-268435456
1e1b4     03 03 02 F1 | 	add	_var02, _var04
1e1b8     04 03 62 FC | 	wrlong	_var02, _var05
1e1bc                 | '     repeat while long[mailbox] < 0
1e1bc                 | LR__2433
1e1bc     04 03 02 FB | 	rdlong	_var02, _var05
1e1c0     00 02 56 F2 | 	cmps	_var02, #0 wc
1e1c4     F4 FF 9F CD |  if_b	jmp	#LR__2433
1e1c8                 | '     LOCKREL(driverlock)
1e1c8     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1e1cc     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1e1d0     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1e1d4     07 12 72 FD | 	lockrel	arg01 wc
1e1d8     00 FA 05 F6 | 	mov	result1, #0
1e1dc                 | LR__2434
1e1dc                 | _psram_spin2_setQos_ret
1e1dc     2D 00 64 FD | 	ret
1e1e0                 | 
1e1e0                 | ' 
1e1e0                 | ' '..............................................................................
1e1e0                 | ' 
1e1e0                 | ' {{
1e1e0                 | ' }}
1e1e0                 | ' PRI lookupDelay(freq) : delay | profile
1e1e0                 | _psram_spin2_lookupDelay
1e1e0                 | '     profile := @delayTable
1e1e0     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
1e1e4     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
1e1e8                 | '     delay := long[profile][0]
1e1e8     00 03 02 FB | 	rdlong	_var02, _var01
1e1ec                 | '     repeat while long[profile][1] 
1e1ec     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
1e1f0     97 16 48 FB | 	callpa	#(@LR__2441-@LR__2440)>>2,fcache_load_ptr_
1e1f4                 | LR__2440
1e1f4     04 00 06 F1 | 	add	_var01, #4
1e1f8     00 FB 09 FB | 	rdlong	result1, _var01 wz
1e1fc     04 00 86 F1 | 	sub	_var01, #4
1e200     1C 00 90 AD |  if_e	jmp	#LR__2442
1e204                 | '         if freq +< long[profile][1] 
1e204     04 00 06 F1 | 	add	_var01, #4
1e208     00 FB 01 FB | 	rdlong	result1, _var01
1e20c     04 00 86 F1 | 	sub	_var01, #4
1e210     FD 12 12 F2 | 	cmp	arg01, result1 wc
1e214                 | '             quit
1e214                 | '         profile += 4
1e214     04 00 06 31 |  if_ae	add	_var01, #4
1e218                 | '         delay++
1e218     01 02 06 31 |  if_ae	add	_var02, #1
1e21c     D4 FF 9F 3D |  if_ae	jmp	#LR__2440
1e220                 | LR__2441
1e220                 | LR__2442
1e220     01 FB 01 F6 | 	mov	result1, _var02
1e224                 | _psram_spin2_lookupDelay_ret
1e224     2D 00 64 FD | 	ret
1e228                 | 
1e228                 | ' 
1e228                 | ' PUB start() : r
1e228                 | _usbnew_spin2_start
1e228     00 00 06 F6 | 	mov	_var01, #0
1e22c                 | '   ifnot driver_cog
1e22c     15 00 00 FF 
1e230     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
1e234     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
1e238     15 00 00 FF 
1e23c     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
1e240     38 00 90 5D |  if_ne	jmp	#LR__2450
1e244                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
1e244     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
1e248     10 00 06 F6 | 	mov	_var01, #16
1e24c     00 16 06 F6 | 	mov	arg03, #0
1e250     28 16 62 FD | 	setq	arg03
1e254     0A 01 F2 FC | 	coginit	_var01, arg02 wc
1e258     01 00 66 C6 |  if_b	neg	_var01, #1
1e25c                 | '     if r >= 0
1e25c     00 00 56 F2 | 	cmps	_var01, #0 wc
1e260                 | '       driver_cog := r+1
1e260     00 03 02 36 |  if_ae	mov	_var02, _var01
1e264     01 02 06 31 |  if_ae	add	_var02, #1
1e268     15 00 00 3F 
1e26c     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
1e270     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
1e274     15 00 00 3F 
1e278     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
1e27c                 | LR__2450
1e27c     00 FB 01 F6 | 	mov	result1, _var01
1e280                 | _usbnew_spin2_start_ret
1e280     2D 00 64 FD | 	ret
1e284                 | 
1e284                 | '     '' (Always enabled)
1e284                 | ' 
1e284                 | ' '' Get current pressed state of a keyboard key
1e284                 | ' PUB keystate(key) : r | buf[2],tmp
1e284                 | _usbnew_spin2_keystate
1e284     00 04 06 F6 | 	mov	_var03, #0
1e288                 | '   if key >= $E0 && key < $E8
1e288     E0 12 56 F2 | 	cmps	arg01, #224 wc
1e28c     34 00 90 CD |  if_b	jmp	#LR__2460
1e290     E8 12 56 F2 | 	cmps	arg01, #232 wc
1e294     2C 00 90 3D |  if_ae	jmp	#LR__2460
1e298                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
1e298     00 FA 05 F6 | 	mov	result1, #0
1e29c     13 00 00 FF 
1e2a0     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
1e2a4     09 07 02 F6 | 	mov	_var04, arg01
1e2a8     E0 06 86 F1 | 	sub	_var04, #224
1e2ac     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
1e2b0     03 09 4A F0 | 	shr	_var05, _var04 wz
1e2b4     13 00 00 FF 
1e2b8     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
1e2bc     01 FA 65 56 |  if_ne	neg	result1, #1
1e2c0     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
1e2c4                 | LR__2460
1e2c4                 | '   else
1e2c4                 | '     '' Do this in inline ASM to ensure atomicity
1e2c4                 | '     tmp := @hkbd_report
1e2c4     13 00 00 FF 
1e2c8     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
1e2cc     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
1e2d0                 | '     org
1e2d0     13 00 00 FF 
1e2d4     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
1e2d8     97 1E 48 FB | 	callpa	#(@LR__2462-@LR__2461)>>2,fcache_load_ptr_
1e2dc                 | LR__2461
1e2dc 000             | 	org	0
1e2dc 000 28 02 64 FD | 	setq	#1
1e2e0 001 04 01 02 FB | 	rdlong	_var01, _var05
1e2e4 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
1e2e8 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
1e2ec 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
1e2f0 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1e2f4 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
1e2f8 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1e2fc 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
1e300 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1e304 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
1e308 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1e30c 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
1e310 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1e314 00e 01 04 66 A6 |  if_e	neg	_var03, #1
1e318 00f             | LR__2462
1e318                 | 	orgh
1e318     02 FB 01 F6 | 	mov	result1, _var03
1e31c                 | _usbnew_spin2_keystate_ret
1e31c     2D 00 64 FD | 	ret
1e320                 | 
1e320                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
1e320                 | ' 
1e320                 | ' '' Return key event from buffer if there is one
1e320                 | ' PUB get_key() : r | tail
1e320                 | _usbnew_spin2_get_key
1e320                 | '   tail := keyq_tail
1e320     0F 00 00 FF 
1e324     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
1e328     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
1e32c                 | '   if keyq_head == tail
1e32c     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
1e330     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
1e334     0F 00 00 FF 
1e338     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
1e33c     00 03 0A F2 | 	cmp	_var02, _var01 wz
1e340                 | '     return 0 ' No event
1e340     00 FA 05 A6 |  if_e	mov	result1, #0
1e344     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
1e348                 | '   r := keyq_data[tail]
1e348     00 03 02 F6 | 	mov	_var02, _var01
1e34c     02 02 66 F0 | 	shl	_var02, #2
1e350     0F 00 00 FF 
1e354     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
1e358     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
1e35c     01 FB 01 FB | 	rdlong	result1, _var02
1e360                 | '   if ++tail == KEYQUEUE_SIZE
1e360     01 00 06 F1 | 	add	_var01, #1
1e364     80 00 0E F2 | 	cmp	_var01, #128 wz
1e368                 | '     tail := 0
1e368     00 00 06 A6 |  if_e	mov	_var01, #0
1e36c                 | '   keyq_tail := tail
1e36c     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
1e370     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
1e374     0F 00 00 FF 
1e378     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
1e37c                 | _usbnew_spin2_get_key_ret
1e37c     2D 00 64 FD | 	ret
1e380                 | 
1e380                 | ' 
1e380                 | ' '' Emulate mouse movement
1e380                 | ' PUB mouse_move(x,y)
1e380                 | _usbnew_spin2_mouse_move
1e380     02 4A 05 F6 | 	mov	COUNT_, #2
1e384     A8 00 A0 FD | 	call	#pushregs_
1e388     09 1F 02 F6 | 	mov	local01, arg01
1e38c     0A 21 02 F6 | 	mov	local02, arg02
1e390                 | '   mouse_lock := 1
1e390     14 00 00 FF 
1e394     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
1e398     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
1e39c     14 00 00 FF 
1e3a0     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
1e3a4                 | '   waitus(2) ' hope driver is now done
1e3a4     02 12 06 F6 | 	mov	arg01, #2
1e3a8     CC 0A B0 FD | 	call	#__system___waitus
1e3ac                 | '   mouse_xacc := x
1e3ac     14 00 00 FF 
1e3b0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
1e3b4     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
1e3b8                 | '   mouse_yacc := y
1e3b8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1e3bc     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
1e3c0                 | '   if mouse_outptr
1e3c0     04 00 00 FF 
1e3c4     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
1e3c8     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
1e3cc     0F 00 00 FF 
1e3d0     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1e3d4     24 00 90 AD |  if_e	jmp	#LR__2470
1e3d8                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
1e3d8     10 20 66 F0 | 	shl	local02, #16
1e3dc     0F 1F 32 F9 | 	getword	local01, local01, #0
1e3e0     0F 21 42 F5 | 	or	local02, local01
1e3e4     0F 00 00 FF 
1e3e8     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
1e3ec     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
1e3f0     0F 00 00 FF 
1e3f4     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1e3f8     0F 21 62 FC | 	wrlong	local02, local01
1e3fc                 | LR__2470
1e3fc                 | '   mouse_lock := 0
1e3fc     14 00 00 FF 
1e400     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
1e404     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
1e408     14 00 00 FF 
1e40c     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
1e410     A7 F0 03 F6 | 	mov	ptra, fp
1e414     B2 00 A0 FD | 	call	#popregs_
1e418                 | _usbnew_spin2_mouse_move_ret
1e418     2D 00 64 FD | 	ret
1e41c                 | 
1e41c                 | '     '' Set HAVE_HIDPAD to enable.
1e41c                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
1e41c                 | ' 
1e41c                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
1e41c                 | ' PUB hidpad_id(dev) : r
1e41c                 | _usbnew_spin2_hidpad_id
1e41c                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
1e41c     13 00 00 FF 
1e420     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1e424     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1e428     09 01 02 F6 | 	mov	_var01, arg01
1e42c     03 00 66 F0 | 	shl	_var01, #3
1e430     09 01 82 F1 | 	sub	_var01, arg01
1e434     02 00 66 F0 | 	shl	_var01, #2
1e438     00 FB 01 F1 | 	add	result1, _var01
1e43c     FD FA 01 FB | 	rdlong	result1, result1
1e440     13 00 00 FF 
1e444     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1e448                 | _usbnew_spin2_hidpad_id_ret
1e448     2D 00 64 FD | 	ret
1e44c                 | 
1e44c                 | ' 
1e44c                 | ' '' Get all button states for a device
1e44c                 | ' PUB hidpad_buttons(dev) : r 
1e44c                 | _usbnew_spin2_hidpad_buttons
1e44c                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
1e44c     13 00 00 FF 
1e450     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1e454     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1e458     09 01 02 F6 | 	mov	_var01, arg01
1e45c     03 00 66 F0 | 	shl	_var01, #3
1e460     09 01 82 F1 | 	sub	_var01, arg01
1e464     02 00 66 F0 | 	shl	_var01, #2
1e468     00 FB 01 F1 | 	add	result1, _var01
1e46c     14 FA 05 F1 | 	add	result1, #20
1e470     FD FA 01 FB | 	rdlong	result1, result1
1e474     13 00 00 FF 
1e478     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1e47c                 | _usbnew_spin2_hidpad_buttons_ret
1e47c     2D 00 64 FD | 	ret
1e480                 | 
1e480                 | ' 
1e480                 | ' '' Get state of an axis (normalized between -32768 and 32767)
1e480                 | ' PUB hidpad_axis(dev,axnum) : r
1e480                 | _usbnew_spin2_hidpad_axis
1e480                 | '   if axnum +>= 6
1e480     06 14 16 F2 | 	cmp	arg02, #6 wc
1e484                 | '     return 0
1e484     00 FA 05 36 |  if_ae	mov	result1, #0
1e488     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
1e48c                 | '   else 
1e48c                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
1e48c     13 00 00 FF 
1e490     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1e494     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1e498     09 01 02 F6 | 	mov	_var01, arg01
1e49c     03 00 66 F0 | 	shl	_var01, #3
1e4a0     09 01 82 F1 | 	sub	_var01, arg01
1e4a4     02 00 66 F0 | 	shl	_var01, #2
1e4a8     00 FB 01 F1 | 	add	result1, _var01
1e4ac     04 00 06 F6 | 	mov	_var01, #4
1e4b0     0A 01 02 F1 | 	add	_var01, arg02
1e4b4     01 00 66 F0 | 	shl	_var01, #1
1e4b8     FD 00 02 F1 | 	add	_var01, result1
1e4bc     00 FB E1 FA | 	rdword	result1, _var01
1e4c0     0F FA 65 F7 | 	signx	result1, #15
1e4c4     13 00 00 FF 
1e4c8     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1e4cc                 | _usbnew_spin2_hidpad_axis_ret
1e4cc     2D 00 64 FD | 	ret
1e4d0                 | 
1e4d0                 | ' 
1e4d0                 | ' 
1e4d0                 | ' '--------------------------------------------------------------
1e4d0                 | ' '---------- Init the variables, start the cog. ----------------
1e4d0                 | ' '--------------------------------------------------------------
1e4d0                 | ' 
1e4d0                 | ' pub start(mbox,scope,cache) :cog,base | iii
1e4d0                 | _audio096_spin2_start
1e4d0     04 4A 05 F6 | 	mov	COUNT_, #4
1e4d4     A8 00 A0 FD | 	call	#pushregs_
1e4d8     09 1F 02 F6 | 	mov	local01, arg01
1e4dc                 | ' 
1e4dc                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
1e4dc                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
1e4dc                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
1e4dc                 | ' 
1e4dc                 | ' mailboxaddr:=mbox 
1e4dc     F2 1E 62 FC | 	wrlong	local01, objptr
1e4e0                 | ' scope_ptr:=scope
1e4e0     04 E4 05 F1 | 	add	objptr, #4
1e4e4     F2 14 62 FC | 	wrlong	arg02, objptr
1e4e8                 | ' cache_ptr:=cache
1e4e8     04 E4 05 F1 | 	add	objptr, #4
1e4ec     F2 16 62 FC | 	wrlong	arg03, objptr
1e4f0                 | ' base:=@channel1[0]
1e4f0     04 E4 05 F1 | 	add	objptr, #4
1e4f4     F2 20 02 F6 | 	mov	local02, objptr
1e4f8                 | ' 
1e4f8                 | ' repeat iii from 0 to 7
1e4f8     00 22 06 F6 | 	mov	local03, #0
1e4fc     02 00 00 FF 
1e500     94 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1172
1e504     0C E4 85 F1 | 	sub	objptr, #12
1e508     97 B0 48 FB | 	callpa	#(@LR__2481-@LR__2480)>>2,fcache_load_ptr_
1e50c                 | LR__2480
1e50c                 | '   long[base+64*iii]:=0
1e50c     10 1F 02 F6 | 	mov	local01, local02
1e510     11 FD 01 F6 | 	mov	result2, local03
1e514     06 FC 65 F0 | 	shl	result2, #6
1e518     FE 1E 02 F1 | 	add	local01, result2
1e51c     0F 01 68 FC | 	wrlong	#0, local01
1e520                 | '   long[base+64*iii+4]:=0
1e520     10 1F 02 F6 | 	mov	local01, local02
1e524     11 FD 01 F6 | 	mov	result2, local03
1e528     06 FC 65 F0 | 	shl	result2, #6
1e52c     FE 1E 02 F1 | 	add	local01, result2
1e530     04 1E 06 F1 | 	add	local01, #4
1e534     0F 01 68 FC | 	wrlong	#0, local01
1e538                 | '   long[base+64*iii+12]:=0
1e538     10 25 02 F6 | 	mov	local04, local02
1e53c     11 1F 02 F6 | 	mov	local01, local03
1e540     06 1E 66 F0 | 	shl	local01, #6
1e544     0F 25 02 F1 | 	add	local04, local01
1e548     0C 24 06 F1 | 	add	local04, #12
1e54c     12 01 68 FC | 	wrlong	#0, local04
1e550                 | '   long[base+64*iii+16]:=2 
1e550     10 25 02 F6 | 	mov	local04, local02
1e554     11 1F 02 F6 | 	mov	local01, local03
1e558     06 1E 66 F0 | 	shl	local01, #6
1e55c     0F 25 02 F1 | 	add	local04, local01
1e560     10 24 06 F1 | 	add	local04, #16
1e564     12 05 68 FC | 	wrlong	#2, local04
1e568                 | '   word[base+64*iii+20]:=0
1e568     10 25 02 F6 | 	mov	local04, local02
1e56c     11 1F 02 F6 | 	mov	local01, local03
1e570     06 1E 66 F0 | 	shl	local01, #6
1e574     0F 25 02 F1 | 	add	local04, local01
1e578     14 24 06 F1 | 	add	local04, #20
1e57c     12 01 58 FC | 	wrword	#0, local04
1e580                 | '   word[base+64*iii+22]:=8192
1e580     10 25 02 F6 | 	mov	local04, local02
1e584     11 1F 02 F6 | 	mov	local01, local03
1e588     06 1E 66 F0 | 	shl	local01, #6
1e58c     0F 25 02 F1 | 	add	local04, local01
1e590     16 24 06 F1 | 	add	local04, #22
1e594     10 00 80 FF 
1e598     12 01 58 FC | 	wrword	##8192, local04
1e59c                 | '   word[base+64*iii+24]:=4000+2*iii
1e59c     11 25 02 F6 | 	mov	local04, local03
1e5a0     01 24 66 F0 | 	shl	local04, #1
1e5a4     07 00 00 FF 
1e5a8     A0 1F 06 F6 | 	mov	local01, ##4000
1e5ac     12 1F 02 F1 | 	add	local01, local04
1e5b0     10 25 02 F6 | 	mov	local04, local02
1e5b4     11 FD 01 F6 | 	mov	result2, local03
1e5b8     06 FC 65 F0 | 	shl	result2, #6
1e5bc     FE 24 02 F1 | 	add	local04, result2
1e5c0     18 24 06 F1 | 	add	local04, #24
1e5c4     12 1F 52 FC | 	wrword	local01, local04
1e5c8                 | '   word[base+64*iii+26]:=2
1e5c8     10 25 02 F6 | 	mov	local04, local02
1e5cc     11 1F 02 F6 | 	mov	local01, local03
1e5d0     06 1E 66 F0 | 	shl	local01, #6
1e5d4     0F 25 02 F1 | 	add	local04, local01
1e5d8     1A 24 06 F1 | 	add	local04, #26
1e5dc     12 05 58 FC | 	wrword	#2, local04
1e5e0                 | '   long [base+64*iii+8]:=@null | $C0000000
1e5e0     F4 1E 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
1e5e4     3E 1E 26 F4 | 	bith	local01, #62
1e5e8     10 25 02 F6 | 	mov	local04, local02
1e5ec     11 17 02 F6 | 	mov	arg03, local03
1e5f0     06 16 66 F0 | 	shl	arg03, #6
1e5f4     0B 25 02 F1 | 	add	local04, arg03
1e5f8     08 24 06 F1 | 	add	local04, #8
1e5fc     12 1F 62 FC | 	wrlong	local01, local04
1e600                 | '   long[base+64*iii+32]:=0
1e600     10 25 02 F6 | 	mov	local04, local02
1e604     11 1F 02 F6 | 	mov	local01, local03
1e608     06 1E 66 F0 | 	shl	local01, #6
1e60c     0F 25 02 F1 | 	add	local04, local01
1e610     20 24 06 F1 | 	add	local04, #32
1e614     12 01 68 FC | 	wrlong	#0, local04
1e618                 | '   long[base+64*iii+36]:=0
1e618     10 25 02 F6 | 	mov	local04, local02
1e61c     11 1F 02 F6 | 	mov	local01, local03
1e620     06 1E 66 F0 | 	shl	local01, #6
1e624     0F 25 02 F1 | 	add	local04, local01
1e628     24 24 06 F1 | 	add	local04, #36
1e62c     12 01 68 FC | 	wrlong	#0, local04
1e630                 | '   long[base+64*iii+40]:=0
1e630     10 25 02 F6 | 	mov	local04, local02
1e634     11 1F 02 F6 | 	mov	local01, local03
1e638     06 1E 66 F0 | 	shl	local01, #6
1e63c     0F 25 02 F1 | 	add	local04, local01
1e640     28 24 06 F1 | 	add	local04, #40
1e644     12 01 68 FC | 	wrlong	#0, local04
1e648                 | '   long[base+64*iii+44]:=0
1e648     10 25 02 F6 | 	mov	local04, local02
1e64c     11 1F 02 F6 | 	mov	local01, local03
1e650     06 1E 66 F0 | 	shl	local01, #6
1e654     0F 25 02 F1 | 	add	local04, local01
1e658     2C 24 06 F1 | 	add	local04, #44
1e65c     12 01 68 FC | 	wrlong	#0, local04
1e660     01 22 06 F1 | 	add	local03, #1
1e664     08 22 56 F2 | 	cmps	local03, #8 wc
1e668     A0 FE 9F CD |  if_b	jmp	#LR__2480
1e66c                 | LR__2481
1e66c     02 00 00 FF 
1e670     94 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1172
1e674                 | '   
1e674                 | ' cog:=coginit(16,@audio,@mailboxaddr)
1e674     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
1e678     F2 16 02 F6 | 	mov	arg03, objptr
1e67c     10 24 06 F6 | 	mov	local04, #16
1e680     28 16 62 FD | 	setq	arg03
1e684     0A 25 F2 FC | 	coginit	local04, arg02 wc
1e688     01 24 66 C6 |  if_b	neg	local04, #1
1e68c                 | ' waitms(100)
1e68c     64 12 06 F6 | 	mov	arg01, #100
1e690     78 07 B0 FD | 	call	#__system___waitms
1e694                 | ' return cog,base
1e694     10 FD 01 F6 | 	mov	result2, local02
1e698     12 FB 01 F6 | 	mov	result1, local04
1e69c     A7 F0 03 F6 | 	mov	ptra, fp
1e6a0     B2 00 A0 FD | 	call	#popregs_
1e6a4                 | _audio096_spin2_start_ret
1e6a4     2D 00 64 FD | 	ret
1e6a8                 | 
1e6a8                 | ' 
1e6a8                 | ' ' a simple play procedure to not poke everything. 
1e6a8                 | ' 
1e6a8                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
1e6a8                 | _audio096_spin2_play
1e6a8     0C E4 05 F1 | 	add	objptr, #12
1e6ac     F2 00 02 F6 | 	mov	_var01, objptr
1e6b0     06 12 66 F0 | 	shl	arg01, #6
1e6b4     09 01 02 F1 | 	add	_var01, arg01
1e6b8     00 13 02 F6 | 	mov	arg01, _var01
1e6bc     0C 12 06 F1 | 	add	arg01, #12
1e6c0     09 1B 62 FC | 	wrlong	arg05, arg01
1e6c4     00 1C 56 F2 | 	cmps	arg06, #0 wc
1e6c8     00 13 02 36 |  if_ae	mov	arg01, _var01
1e6cc     10 12 06 31 |  if_ae	add	arg01, #16
1e6d0     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
1e6d4     02 1A 06 C1 |  if_b	add	arg05, #2
1e6d8     00 13 02 C6 |  if_b	mov	arg01, _var01
1e6dc     10 12 06 C1 |  if_b	add	arg01, #16
1e6e0     09 1B 62 CC |  if_b	wrlong	arg05, arg01
1e6e4     0B 13 52 F6 | 	abs	arg01, arg03 wc
1e6e8     0B 0A 80 FF 
1e6ec     09 6D 18 FD | 	qdiv	##1316406, arg01
1e6f0                 | ' 
1e6f0                 | ' base2:=@channel1[0]+64*channel
1e6f0                 | ' 
1e6f0                 | ' 
1e6f0                 | ' long[base2+12]:= len
1e6f0                 | ' if loop >=0 
1e6f0                 | '   long[base2+16]:= loop
1e6f0     0C E4 85 F1 | 	sub	objptr, #12
1e6f4                 | ' else
1e6f4                 | '   long[base2+16]:= len+2
1e6f4                 | ' word[base2+20]:=vol
1e6f4     00 13 02 F6 | 	mov	arg01, _var01
1e6f8     14 12 06 F1 | 	add	arg01, #20
1e6fc     09 19 52 FC | 	wrword	arg04, arg01
1e700                 | ' word[base2+24]:= 1316406/splfreq 
1e700     00 19 02 F6 | 	mov	arg04, _var01
1e704     18 18 06 F1 | 	add	arg04, #24
1e708                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
1e708                 | ' long[base2+32]:=0    
1e708                 | ' long[base2+36]:=0    
1e708                 | ' long[base2+40]:=0    
1e708                 | ' long[base2+44]:=0    
1e708                 | ' long[base2+8]:=sample+$C0000000     
1e708     00 00 60 FF 
1e70c     00 14 06 F1 | 	add	arg02, ##-1073741824
1e710     18 12 62 FD | 	getqx	arg01
1e714     09 13 82 F6 | 	negc	arg01, arg01
1e718     0C 13 52 FC | 	wrword	arg01, arg04
1e71c     00 13 02 F6 | 	mov	arg01, _var01
1e720     1A 12 06 F1 | 	add	arg01, #26
1e724     09 01 5A FC | 	wrword	#256, arg01
1e728     00 13 02 F6 | 	mov	arg01, _var01
1e72c     20 12 06 F1 | 	add	arg01, #32
1e730     09 01 68 FC | 	wrlong	#0, arg01
1e734     00 13 02 F6 | 	mov	arg01, _var01
1e738     24 12 06 F1 | 	add	arg01, #36
1e73c     09 01 68 FC | 	wrlong	#0, arg01
1e740     00 13 02 F6 | 	mov	arg01, _var01
1e744     28 12 06 F1 | 	add	arg01, #40
1e748     09 01 68 FC | 	wrlong	#0, arg01
1e74c     00 13 02 F6 | 	mov	arg01, _var01
1e750     2C 12 06 F1 | 	add	arg01, #44
1e754     09 01 68 FC | 	wrlong	#0, arg01
1e758     08 00 06 F1 | 	add	_var01, #8
1e75c     00 15 62 FC | 	wrlong	arg02, _var01
1e760                 | _audio096_spin2_play_ret
1e760     2D 00 64 FD | 	ret
1e764                 | 
1e764                 | ' 
1e764                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
1e764                 | _audio096_spin2_play8
1e764                 | ' 
1e764                 | ' base2:=@channel1[0]+64*channel
1e764     0C E4 05 F1 | 	add	objptr, #12
1e768     F2 00 02 F6 | 	mov	_var01, objptr
1e76c     06 12 66 F0 | 	shl	arg01, #6
1e770     09 01 02 F1 | 	add	_var01, arg01
1e774                 | ' long[base2]:=0
1e774     00 01 68 FC | 	wrlong	#0, _var01
1e778                 | ' long[base2+8]:=sample+$40000000 
1e778     00 00 20 FF 
1e77c     00 14 06 F1 | 	add	arg02, ##1073741824
1e780     00 13 02 F6 | 	mov	arg01, _var01
1e784     08 12 06 F1 | 	add	arg01, #8
1e788     09 15 62 FC | 	wrlong	arg02, arg01
1e78c                 | ' if loop>=0
1e78c     00 1C 56 F2 | 	cmps	arg06, #0 wc
1e790     0C E4 85 F1 | 	sub	objptr, #12
1e794     1C 00 90 CD |  if_b	jmp	#LR__2490
1e798                 | '   long[base2+12]:=loop
1e798     00 15 02 F6 | 	mov	arg02, _var01
1e79c     0C 14 06 F1 | 	add	arg02, #12
1e7a0     0A 1D 62 FC | 	wrlong	arg06, arg02
1e7a4                 | '   long[base2+16]:= len
1e7a4     00 1D 02 F6 | 	mov	arg06, _var01
1e7a8     10 1C 06 F1 | 	add	arg06, #16
1e7ac     0E 1B 62 FC | 	wrlong	arg05, arg06
1e7b0     1C 00 90 FD | 	jmp	#LR__2491
1e7b4                 | LR__2490
1e7b4                 | ' else
1e7b4                 | '   long[base2+12]:= len
1e7b4     00 1D 02 F6 | 	mov	arg06, _var01
1e7b8     0C 1C 06 F1 | 	add	arg06, #12
1e7bc     0E 1B 62 FC | 	wrlong	arg05, arg06
1e7c0                 | '   long[base2+16]:= len+1
1e7c0     01 1A 06 F1 | 	add	arg05, #1
1e7c4     00 13 02 F6 | 	mov	arg01, _var01
1e7c8     10 12 06 F1 | 	add	arg01, #16
1e7cc     09 1B 62 FC | 	wrlong	arg05, arg01
1e7d0                 | LR__2491
1e7d0     0B 17 52 F6 | 	abs	arg03, arg03 wc
1e7d4     0B 0A 80 FF 
1e7d8     0B 6D 18 FD | 	qdiv	##1316406, arg03
1e7dc                 | ' word[base2+20]:=vol
1e7dc     00 17 02 F6 | 	mov	arg03, _var01
1e7e0     14 16 06 F1 | 	add	arg03, #20
1e7e4     0B 19 52 FC | 	wrword	arg04, arg03
1e7e8                 | ' word[base2+24]:= 1316406 /splfreq 
1e7e8     00 13 02 F6 | 	mov	arg01, _var01
1e7ec     18 12 06 F1 | 	add	arg01, #24
1e7f0                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
1e7f0                 | ' long[base2+28]:=$40000000
1e7f0     18 18 62 FD | 	getqx	arg04
1e7f4     0C 19 82 F6 | 	negc	arg04, arg04
1e7f8     09 19 52 FC | 	wrword	arg04, arg01
1e7fc     00 19 02 F6 | 	mov	arg04, _var01
1e800     1A 18 06 F1 | 	add	arg04, #26
1e804     0C 01 5A FC | 	wrword	#256, arg04
1e808     1C 00 06 F1 | 	add	_var01, #28
1e80c     00 00 A0 FF 
1e810     00 01 68 FC | 	wrlong	##1073741824, _var01
1e814                 | _audio096_spin2_play8_ret
1e814     2D 00 64 FD | 	ret
1e818                 | 
1e818                 | ' 
1e818                 | '     
1e818                 | ' pub stop(channel) 'silence it
1e818                 | _audio096_spin2_stop
1e818                 | ' 
1e818                 | ' word[@channel1[0]+64*channel+20]:=0
1e818     0C E4 05 F1 | 	add	objptr, #12
1e81c     F2 00 02 F6 | 	mov	_var01, objptr
1e820     09 03 02 F6 | 	mov	_var02, arg01
1e824     06 02 66 F0 | 	shl	_var02, #6
1e828     01 01 02 F1 | 	add	_var01, _var02
1e82c     14 00 06 F1 | 	add	_var01, #20
1e830     00 01 58 FC | 	wrword	#0, _var01
1e834                 | ' word[@channel1[0]+64*channel+20]:=0
1e834     F2 00 02 F6 | 	mov	_var01, objptr
1e838     06 12 66 F0 | 	shl	arg01, #6
1e83c     09 01 02 F1 | 	add	_var01, arg01
1e840     14 00 06 F1 | 	add	_var01, #20
1e844     00 01 58 FC | 	wrword	#0, _var01
1e848     0C E4 85 F1 | 	sub	objptr, #12
1e84c                 | _audio096_spin2_stop_ret
1e84c     2D 00 64 FD | 	ret
1e850                 | hubexit
1e850     81 00 80 FD | 	jmp	#cogexit
1e854                 | 
1e854                 | __system___setbaud
1e854     14 64 06 FB | 	rdlong	muldiva_, #20
1e858     09 67 02 F6 | 	mov	muldivb_, arg01
1e85c     BA 00 A0 FD | 	call	#divide_
1e860     97 06 48 FB | 	callpa	#(@LR__2501-@LR__2500)>>2,fcache_load_ptr_
1e864                 | LR__2500
1e864     3E FA 9D FA | 	rdpin	result1, #62 wc
1e868     FE FC A1 F1 | 	subx	result2, result2
1e86c     F4 FF 9F CD |  if_b	jmp	#LR__2500
1e870                 | LR__2501
1e870     40 7C 64 FD | 	dirl	#62
1e874     40 7E 64 FD | 	dirl	#63
1e878     F3 66 62 FC | 	wrlong	muldivb_, ptr___system__dat__
1e87c     10 66 66 F0 | 	shl	muldivb_, #16
1e880     07 14 06 F6 | 	mov	arg02, #7
1e884     33 15 02 F1 | 	add	arg02, muldivb_
1e888     3E F8 0C FC | 	wrpin	#124, #62
1e88c     3E 14 16 FC | 	wxpin	arg02, #62
1e890     3F 7C 0C FC | 	wrpin	#62, #63
1e894     14 14 06 F1 | 	add	arg02, #20
1e898     3F 14 16 FC | 	wxpin	arg02, #63
1e89c     41 7C 64 FD | 	dirh	#62
1e8a0     41 7E 64 FD | 	dirh	#63
1e8a4                 | __system___setbaud_ret
1e8a4     2D 00 64 FD | 	ret
1e8a8                 | 
1e8a8                 | __system___txraw
1e8a8     01 4A 05 F6 | 	mov	COUNT_, #1
1e8ac     A8 00 A0 FD | 	call	#pushregs_
1e8b0     09 1F 02 F6 | 	mov	local01, arg01
1e8b4     97 06 48 FB | 	callpa	#(@LR__2511-@LR__2510)>>2,fcache_load_ptr_
1e8b8                 | LR__2510
1e8b8     3E FA 9D FA | 	rdpin	result1, #62 wc
1e8bc     FE FC A1 F1 | 	subx	result2, result2
1e8c0     F4 FF 9F CD |  if_b	jmp	#LR__2510
1e8c4                 | LR__2511
1e8c4     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
1e8c8     C2 01 00 AF 
1e8cc     00 12 06 A6 |  if_e	mov	arg01, ##230400
1e8d0     80 FF BF AD |  if_e	call	#__system___setbaud
1e8d4     58 7C 64 FD | 	drvl	#62
1e8d8     3E 1E 26 FC | 	wypin	local01, #62
1e8dc     01 FA 05 F6 | 	mov	result1, #1
1e8e0     A7 F0 03 F6 | 	mov	ptra, fp
1e8e4     B2 00 A0 FD | 	call	#popregs_
1e8e8                 | __system___txraw_ret
1e8e8     2D 00 64 FD | 	ret
1e8ec                 | 
1e8ec                 | __system___rxraw
1e8ec     0D 4A 05 F6 | 	mov	COUNT_, #13
1e8f0     A8 00 A0 FD | 	call	#pushregs_
1e8f4     09 1F 02 F6 | 	mov	local01, arg01
1e8f8     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1e8fc     C2 01 00 AF 
1e900     00 12 06 A6 |  if_e	mov	arg01, ##230400
1e904     4C FF BF AD |  if_e	call	#__system___setbaud
1e908     00 1E 0E F2 | 	cmp	local01, #0 wz
1e90c     20 00 90 AD |  if_e	jmp	#LR__2520
1e910     14 22 06 FB | 	rdlong	local03, #20
1e914     0A 22 46 F0 | 	shr	local03, #10
1e918     11 1F 02 FD | 	qmul	local01, local03
1e91c     1A FA 61 FD | 	getct	result1
1e920     18 24 62 FD | 	getqx	local04
1e924     12 FB 01 F1 | 	add	result1, local04
1e928     FD 26 02 F6 | 	mov	local05, result1
1e92c     04 00 90 FD | 	jmp	#LR__2521
1e930                 | LR__2520
1e930     00 26 06 F6 | 	mov	local05, #0
1e934                 | LR__2521
1e934     01 28 66 F6 | 	neg	local06, #1
1e938     3F 2A 06 F6 | 	mov	local07, #63
1e93c     00 2C 06 F6 | 	mov	local08, #0
1e940     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1e944     F3 2E 02 FB | 	rdlong	local09, ptr___system__dat__
1e948     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
1e94c                 | LR__2522
1e94c     08 2E 16 F4 | 	testb	local09, #8 wc
1e950     09 2E 76 F4 | 	testbn	local09, #9 andc
1e954     0A 2E 46 F0 | 	shr	local09, #10
1e958     01 2C 06 C6 |  if_b	mov	local08, #1
1e95c     40 7E 6C 3D |  if_ae	testp	#63 wz
1e960     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
1e964     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
1e968     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
1e96c                 | LR__2523
1e96c     00 20 06 F6 | 	mov	local02, #0
1e970     00 2C 0E F2 | 	cmp	local08, #0 wz
1e974     01 20 66 56 |  if_ne	neg	local02, #1
1e978     00 30 06 F6 | 	mov	local10, #0
1e97c     00 22 06 F6 | 	mov	local03, #0
1e980     00 1E 0E F2 | 	cmp	local01, #0 wz
1e984     01 22 66 56 |  if_ne	neg	local03, #1
1e988     00 24 06 F6 | 	mov	local04, #0
1e98c     00 32 06 F6 | 	mov	local11, #0
1e990     1A FA 61 FD | 	getct	result1
1e994     FD 34 02 F6 | 	mov	local12, result1
1e998     1A 37 02 F6 | 	mov	local13, local12
1e99c     13 37 82 F1 | 	sub	local13, local05
1e9a0     00 36 56 F2 | 	cmps	local13, #0 wc
1e9a4     00 32 26 C6 |  if_b	not	local11, #0
1e9a8     00 32 0E F2 | 	cmp	local11, #0 wz
1e9ac     00 24 26 56 |  if_ne	not	local04, #0
1e9b0     12 23 CA F7 | 	test	local03, local04 wz
1e9b4     00 30 26 56 |  if_ne	not	local10, #0
1e9b8     18 21 4A F5 | 	or	local02, local10 wz
1e9bc     8C FF 9F AD |  if_e	jmp	#LR__2522
1e9c0     00 2C 0E F2 | 	cmp	local08, #0 wz
1e9c4     17 29 02 56 |  if_ne	mov	local06, local09
1e9c8     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
1e9cc     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1e9d0     F3 2E 62 FC | 	wrlong	local09, ptr___system__dat__
1e9d4     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
1e9d8     14 FB 01 F6 | 	mov	result1, local06
1e9dc     A7 F0 03 F6 | 	mov	ptra, fp
1e9e0     B2 00 A0 FD | 	call	#popregs_
1e9e4                 | __system___rxraw_ret
1e9e4     2D 00 64 FD | 	ret
1e9e8                 | 
1e9e8                 | __system___getus
1e9e8     1A FC 71 FD | 	getct	result2 wc
1e9ec     1A 00 62 FD | 	getct	_var01
1e9f0     10 E6 05 F1 | 	add	ptr___system__dat__, #16
1e9f4     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
1e9f8     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1e9fc     20 00 90 5D |  if_ne	jmp	#LR__2530
1ea00     14 02 06 FB | 	rdlong	_var02, #20
1ea04     A1 07 00 FF 
1ea08     40 02 16 FD | 	qdiv	_var02, ##1000000
1ea0c     10 E6 05 F1 | 	add	ptr___system__dat__, #16
1ea10     18 FA 61 FD | 	getqx	result1
1ea14     FD 02 02 F6 | 	mov	_var02, result1
1ea18     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
1ea1c     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1ea20                 | LR__2530
1ea20     01 FD 11 FD | 	qdiv	result2, _var02
1ea24     19 FC 61 FD | 	getqy	result2
1ea28     28 FC 61 FD | 	setq	result2
1ea2c     01 01 12 FD | 	qdiv	_var01, _var02
1ea30     18 FA 61 FD | 	getqx	result1
1ea34                 | __system___getus_ret
1ea34     2D 00 64 FD | 	ret
1ea38                 | 
1ea38                 | __system____builtin_memmove
1ea38     09 01 02 F6 | 	mov	_var01, arg01
1ea3c     0A 13 52 F2 | 	cmps	arg01, arg02 wc
1ea40     10 00 90 CD |  if_b	jmp	#LR__2540
1ea44     0A 03 02 F6 | 	mov	_var02, arg02
1ea48     0B 03 02 F1 | 	add	_var02, arg03
1ea4c     01 13 52 F2 | 	cmps	arg01, _var02 wc
1ea50     48 00 90 CD |  if_b	jmp	#LR__2546
1ea54                 | LR__2540
1ea54     0B 05 02 F6 | 	mov	_var03, arg03
1ea58     02 04 4E F0 | 	shr	_var03, #2 wz
1ea5c     18 00 90 AD |  if_e	jmp	#LR__2545
1ea60     97 0A 48 FB | 	callpa	#(@LR__2543-@LR__2541)>>2,fcache_load_ptr_
1ea64                 | LR__2541
1ea64     02 09 D8 FC | 	rep	@LR__2544, _var03
1ea68                 | LR__2542
1ea68     0A 05 02 FB | 	rdlong	_var03, arg02
1ea6c     09 05 62 FC | 	wrlong	_var03, arg01
1ea70     04 12 06 F1 | 	add	arg01, #4
1ea74     04 14 06 F1 | 	add	arg02, #4
1ea78                 | LR__2543
1ea78                 | LR__2544
1ea78                 | LR__2545
1ea78     02 16 CE F7 | 	test	arg03, #2 wz
1ea7c     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
1ea80     09 03 52 5C |  if_ne	wrword	_var02, arg01
1ea84     02 12 06 51 |  if_ne	add	arg01, #2
1ea88     02 14 06 51 |  if_ne	add	arg02, #2
1ea8c     01 16 CE F7 | 	test	arg03, #1 wz
1ea90     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
1ea94     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
1ea98     28 00 90 FD | 	jmp	#LR__2552
1ea9c                 | LR__2546
1ea9c     0B 13 02 F1 | 	add	arg01, arg03
1eaa0     0B 15 02 F1 | 	add	arg02, arg03
1eaa4     0B 07 0A F6 | 	mov	_var04, arg03 wz
1eaa8     18 00 90 AD |  if_e	jmp	#LR__2551
1eaac     97 0A 48 FB | 	callpa	#(@LR__2549-@LR__2547)>>2,fcache_load_ptr_
1eab0                 | LR__2547
1eab0     03 09 D8 FC | 	rep	@LR__2550, _var04
1eab4                 | LR__2548
1eab4     01 12 86 F1 | 	sub	arg01, #1
1eab8     01 14 86 F1 | 	sub	arg02, #1
1eabc     0A 03 C2 FA | 	rdbyte	_var02, arg02
1eac0     09 03 42 FC | 	wrbyte	_var02, arg01
1eac4                 | LR__2549
1eac4                 | LR__2550
1eac4                 | LR__2551
1eac4                 | LR__2552
1eac4     00 FB 01 F6 | 	mov	result1, _var01
1eac8                 | __system____builtin_memmove_ret
1eac8     2D 00 64 FD | 	ret
1eacc                 | 
1eacc                 | __system____builtin_strcpy
1eacc     09 01 02 F6 | 	mov	_var01, arg01
1ead0     97 0A 48 FB | 	callpa	#(@LR__2561-@LR__2560)>>2,fcache_load_ptr_
1ead4                 | LR__2560
1ead4     0A FB C9 FA | 	rdbyte	result1, arg02 wz
1ead8     09 FB 41 FC | 	wrbyte	result1, arg01
1eadc     01 14 06 F1 | 	add	arg02, #1
1eae0     01 12 06 F1 | 	add	arg01, #1
1eae4     EC FF 9F 5D |  if_ne	jmp	#LR__2560
1eae8                 | LR__2561
1eae8     00 FB 01 F6 | 	mov	result1, _var01
1eaec                 | __system____builtin_strcpy_ret
1eaec     2D 00 64 FD | 	ret
1eaf0                 | 
1eaf0                 | __system____topofstack
1eaf0     00 4A 05 F6 | 	mov	COUNT_, #0
1eaf4     A8 00 A0 FD | 	call	#pushregs_
1eaf8     08 F0 07 F1 | 	add	ptra, #8
1eafc     04 4E 05 F1 | 	add	fp, #4
1eb00     A7 12 62 FC | 	wrlong	arg01, fp
1eb04     A7 FA 01 F6 | 	mov	result1, fp
1eb08     04 4E 85 F1 | 	sub	fp, #4
1eb0c     A7 F0 03 F6 | 	mov	ptra, fp
1eb10     B2 00 A0 FD | 	call	#popregs_
1eb14                 | __system____topofstack_ret
1eb14     2D 00 64 FD | 	ret
1eb18                 | 
1eb18                 | __system___lockmem
1eb18     00 FA 05 F6 | 	mov	result1, #0
1eb1c     01 FA 61 FD | 	cogid	result1
1eb20     00 FB 05 F1 | 	add	result1, #256
1eb24                 | LR__2570
1eb24     09 01 0A FB | 	rdlong	_var01, arg01 wz
1eb28     09 FB 61 AC |  if_e	wrlong	result1, arg01
1eb2c     09 01 02 AB |  if_e	rdlong	_var01, arg01
1eb30     09 01 02 AB |  if_e	rdlong	_var01, arg01
1eb34     FD 00 0A F2 | 	cmp	_var01, result1 wz
1eb38     E8 FF 9F 5D |  if_ne	jmp	#LR__2570
1eb3c                 | __system___lockmem_ret
1eb3c     2D 00 64 FD | 	ret
1eb40                 | 
1eb40                 | __system___string_cmp
1eb40     97 14 48 FB | 	callpa	#(@LR__2581-@LR__2580)>>2,fcache_load_ptr_
1eb44                 | LR__2580
1eb44     09 01 C2 FA | 	rdbyte	_var01, arg01
1eb48     0A 03 C2 FA | 	rdbyte	_var02, arg02
1eb4c     00 05 02 F6 | 	mov	_var03, _var01
1eb50     01 05 8A F1 | 	sub	_var03, _var02 wz
1eb54     01 12 06 F1 | 	add	arg01, #1
1eb58     01 14 06 F1 | 	add	arg02, #1
1eb5c     0C 00 90 5D |  if_ne	jmp	#LR__2582
1eb60     00 00 0E F2 | 	cmp	_var01, #0 wz
1eb64     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
1eb68     D8 FF 9F 5D |  if_ne	jmp	#LR__2580
1eb6c                 | LR__2581
1eb6c                 | LR__2582
1eb6c     02 FB 01 F6 | 	mov	result1, _var03
1eb70                 | __system___string_cmp_ret
1eb70     2D 00 64 FD | 	ret
1eb74                 | 
1eb74                 | __system___string_concat
1eb74     05 4A 05 F6 | 	mov	COUNT_, #5
1eb78     A8 00 A0 FD | 	call	#pushregs_
1eb7c     09 1F 02 F6 | 	mov	local01, arg01
1eb80     0A 21 02 F6 | 	mov	local02, arg02
1eb84     0F 13 02 F6 | 	mov	arg01, local01
1eb88     09 23 02 F6 | 	mov	local03, arg01
1eb8c     97 06 48 FB | 	callpa	#(@LR__2591-@LR__2590)>>2,fcache_load_ptr_
1eb90                 | LR__2590
1eb90     11 FB C9 FA | 	rdbyte	result1, local03 wz
1eb94     01 22 06 51 |  if_ne	add	local03, #1
1eb98     F4 FF 9F 5D |  if_ne	jmp	#LR__2590
1eb9c                 | LR__2591
1eb9c     09 23 82 F1 | 	sub	local03, arg01
1eba0     11 25 02 F6 | 	mov	local04, local03
1eba4     10 13 02 F6 | 	mov	arg01, local02
1eba8     09 23 02 F6 | 	mov	local03, arg01
1ebac     97 06 48 FB | 	callpa	#(@LR__2593-@LR__2592)>>2,fcache_load_ptr_
1ebb0                 | LR__2592
1ebb0     11 FB C9 FA | 	rdbyte	result1, local03 wz
1ebb4     01 22 06 51 |  if_ne	add	local03, #1
1ebb8     F4 FF 9F 5D |  if_ne	jmp	#LR__2592
1ebbc                 | LR__2593
1ebbc     09 23 82 F1 | 	sub	local03, arg01
1ebc0     12 13 02 F6 | 	mov	arg01, local04
1ebc4     11 13 02 F1 | 	add	arg01, local03
1ebc8     01 12 06 F1 | 	add	arg01, #1
1ebcc     94 3D B0 FD | 	call	#__system___gc_alloc_managed
1ebd0     FD 26 0A F6 | 	mov	local05, result1 wz
1ebd4     28 00 90 AD |  if_e	jmp	#LR__2594
1ebd8     13 13 02 F6 | 	mov	arg01, local05
1ebdc     0F 15 02 F6 | 	mov	arg02, local01
1ebe0     12 17 02 F6 | 	mov	arg03, local04
1ebe4     50 FE BF FD | 	call	#__system____builtin_memmove
1ebe8     13 13 02 F6 | 	mov	arg01, local05
1ebec     12 13 02 F1 | 	add	arg01, local04
1ebf0     01 22 06 F1 | 	add	local03, #1
1ebf4     10 15 02 F6 | 	mov	arg02, local02
1ebf8     11 17 02 F6 | 	mov	arg03, local03
1ebfc     38 FE BF FD | 	call	#__system____builtin_memmove
1ec00                 | LR__2594
1ec00     13 FB 01 F6 | 	mov	result1, local05
1ec04     A7 F0 03 F6 | 	mov	ptra, fp
1ec08     B2 00 A0 FD | 	call	#popregs_
1ec0c                 | __system___string_concat_ret
1ec0c     2D 00 64 FD | 	ret
1ec10                 | 
1ec10                 | __system___tx
1ec10     02 4A 05 F6 | 	mov	COUNT_, #2
1ec14     A8 00 A0 FD | 	call	#pushregs_
1ec18     09 1F 02 F6 | 	mov	local01, arg01
1ec1c     0A 1E 0E F2 | 	cmp	local01, #10 wz
1ec20     18 00 90 5D |  if_ne	jmp	#LR__2600
1ec24     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1ec28     F3 20 02 FB | 	rdlong	local02, ptr___system__dat__
1ec2c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1ec30     02 20 CE F7 | 	test	local02, #2 wz
1ec34     0D 12 06 56 |  if_ne	mov	arg01, #13
1ec38     6C FC BF 5D |  if_ne	call	#__system___txraw
1ec3c                 | LR__2600
1ec3c     0F 13 02 F6 | 	mov	arg01, local01
1ec40     64 FC BF FD | 	call	#__system___txraw
1ec44     A7 F0 03 F6 | 	mov	ptra, fp
1ec48     B2 00 A0 FD | 	call	#popregs_
1ec4c                 | __system___tx_ret
1ec4c     2D 00 64 FD | 	ret
1ec50                 | 
1ec50                 | __system___rx
1ec50     01 4A 05 F6 | 	mov	COUNT_, #1
1ec54     A8 00 A0 FD | 	call	#pushregs_
1ec58                 | LR__2610
1ec58     00 12 06 F6 | 	mov	arg01, #0
1ec5c     8C FC BF FD | 	call	#__system___rxraw
1ec60     FD 1E 02 F6 | 	mov	local01, result1
1ec64     FF FF 7F FF 
1ec68     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
1ec6c     E8 FF 9F AD |  if_e	jmp	#LR__2610
1ec70     0D 1E 0E F2 | 	cmp	local01, #13 wz
1ec74     14 00 90 5D |  if_ne	jmp	#LR__2611
1ec78     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1ec7c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1ec80     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1ec84     02 FA CD F7 | 	test	result1, #2 wz
1ec88     0A 1E 06 56 |  if_ne	mov	local01, #10
1ec8c                 | LR__2611
1ec8c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1ec90     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1ec94     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1ec98     01 12 CE F7 | 	test	arg01, #1 wz
1ec9c     1C 00 90 AD |  if_e	jmp	#LR__2614
1eca0     7F 1E 0E F2 | 	cmp	local01, #127 wz
1eca4     0C 00 90 5D |  if_ne	jmp	#LR__2612
1eca8     08 12 06 F6 | 	mov	arg01, #8
1ecac     60 FF BF FD | 	call	#__system___tx
1ecb0     08 00 90 FD | 	jmp	#LR__2613
1ecb4                 | LR__2612
1ecb4     0F 13 02 F6 | 	mov	arg01, local01
1ecb8     54 FF BF FD | 	call	#__system___tx
1ecbc                 | LR__2613
1ecbc                 | LR__2614
1ecbc     0F FB 01 F6 | 	mov	result1, local01
1ecc0     A7 F0 03 F6 | 	mov	ptra, fp
1ecc4     B2 00 A0 FD | 	call	#popregs_
1ecc8                 | __system___rx_ret
1ecc8     2D 00 64 FD | 	ret
1eccc                 | 
1eccc                 | __system___pinwrite
1eccc     09 01 02 F6 | 	mov	_var01, arg01
1ecd0     1F 00 06 F5 | 	and	_var01, #31
1ecd4     20 12 CE F7 | 	test	arg01, #32 wz
1ecd8     06 12 46 F0 | 	shr	arg01, #6
1ecdc     09 13 CA F9 | 	bmask	arg01, arg01
1ece0     00 13 62 F0 | 	shl	arg01, _var01
1ece4     00 15 62 F0 | 	shl	arg02, _var01
1ece8     1C 00 90 AD |  if_e	jmp	#LR__2620
1ecec     09 F7 43 F5 | 	or	dirb, arg01
1ecf0     FD 01 02 F6 | 	mov	_var01, outb
1ecf4     09 01 22 F5 | 	andn	_var01, arg01
1ecf8     09 15 02 F5 | 	and	arg02, arg01
1ecfc     0A 01 42 F5 | 	or	_var01, arg02
1ed00     00 FB 03 F6 | 	mov	outb, _var01
1ed04     18 00 90 FD | 	jmp	#LR__2621
1ed08                 | LR__2620
1ed08     09 F5 43 F5 | 	or	dira, arg01
1ed0c     FC 01 02 F6 | 	mov	_var01, outa
1ed10     09 01 22 F5 | 	andn	_var01, arg01
1ed14     09 15 02 F5 | 	and	arg02, arg01
1ed18     0A 01 42 F5 | 	or	_var01, arg02
1ed1c     00 F9 03 F6 | 	mov	outa, _var01
1ed20                 | LR__2621
1ed20                 | __system___pinwrite_ret
1ed20     2D 00 64 FD | 	ret
1ed24                 | 
1ed24                 | __system___basic_read_line
1ed24     06 4A 05 F6 | 	mov	COUNT_, #6
1ed28     A8 00 A0 FD | 	call	#pushregs_
1ed2c     09 1F 02 F6 | 	mov	local01, arg01
1ed30     00 20 06 F6 | 	mov	local02, #0
1ed34     18 22 06 F6 | 	mov	local03, #24
1ed38     00 24 06 F6 | 	mov	local04, #0
1ed3c     18 12 06 F6 | 	mov	arg01, #24
1ed40     20 3C B0 FD | 	call	#__system___gc_alloc_managed
1ed44     FD 26 0A F6 | 	mov	local05, result1 wz
1ed48     13 FB 01 A6 |  if_e	mov	result1, local05
1ed4c     B0 00 90 AD |  if_e	jmp	#LR__2633
1ed50                 | LR__2630
1ed50     0F 13 02 F6 | 	mov	arg01, local01
1ed54     8C 0B B0 FD | 	call	#__system___basic_get_char
1ed58     FD 28 02 F6 | 	mov	local06, result1
1ed5c     01 28 56 F2 | 	cmps	local06, #1 wc
1ed60     8C 00 90 CD |  if_b	jmp	#LR__2632
1ed64     0A 28 0E F2 | 	cmp	local06, #10 wz
1ed68     10 00 90 5D |  if_ne	jmp	#LR__2631
1ed6c     00 24 0E F2 | 	cmp	local04, #0 wz
1ed70     01 20 56 52 |  if_ne	cmps	local02, #1 wc
1ed74     01 20 86 11 |  if_a	sub	local02, #1
1ed78     74 00 90 FD | 	jmp	#LR__2632
1ed7c                 | LR__2631
1ed7c     0D 28 0E F2 | 	cmp	local06, #13 wz
1ed80     01 24 06 A6 |  if_e	mov	local04, #1
1ed84     00 24 06 56 |  if_ne	mov	local04, #0
1ed88     08 28 0E F2 | 	cmp	local06, #8 wz
1ed8c     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
1ed90     01 20 56 A2 |  if_e	cmps	local02, #1 wc
1ed94     01 20 86 21 |  if_nc_and_z	sub	local02, #1
1ed98     B4 FF 9F AD |  if_e	jmp	#LR__2630
1ed9c     13 17 02 F6 | 	mov	arg03, local05
1eda0     10 17 02 F1 | 	add	arg03, local02
1eda4     0B 29 42 FC | 	wrbyte	local06, arg03
1eda8     01 20 06 F1 | 	add	local02, #1
1edac     11 21 0A F2 | 	cmp	local02, local03 wz
1edb0     9C FF 9F 5D |  if_ne	jmp	#LR__2630
1edb4     11 13 02 F6 | 	mov	arg01, local03
1edb8     20 12 06 F1 | 	add	arg01, #32
1edbc     A4 3B B0 FD | 	call	#__system___gc_alloc_managed
1edc0     FD 28 0A F6 | 	mov	local06, result1 wz
1edc4     14 FB 01 A6 |  if_e	mov	result1, local06
1edc8     34 00 90 AD |  if_e	jmp	#LR__2633
1edcc     14 13 02 F6 | 	mov	arg01, local06
1edd0     13 15 02 F6 | 	mov	arg02, local05
1edd4     11 17 02 F6 | 	mov	arg03, local03
1edd8     5C FC BF FD | 	call	#__system____builtin_memmove
1eddc     20 22 06 F1 | 	add	local03, #32
1ede0     13 13 02 F6 | 	mov	arg01, local05
1ede4     B8 3C B0 FD | 	call	#__system___gc_free
1ede8     14 27 02 F6 | 	mov	local05, local06
1edec     60 FF 9F FD | 	jmp	#LR__2630
1edf0                 | LR__2632
1edf0     13 29 02 F6 | 	mov	local06, local05
1edf4     10 29 02 F1 | 	add	local06, local02
1edf8     14 01 48 FC | 	wrbyte	#0, local06
1edfc     13 FB 01 F6 | 	mov	result1, local05
1ee00                 | LR__2633
1ee00     A7 F0 03 F6 | 	mov	ptra, fp
1ee04     B2 00 A0 FD | 	call	#popregs_
1ee08                 | __system___basic_read_line_ret
1ee08     2D 00 64 FD | 	ret
1ee0c                 | 
1ee0c                 | __system___waitms
1ee0c     09 01 02 F6 | 	mov	_var01, arg01
1ee10     1A 02 62 FD | 	getct	_var02
1ee14     14 04 06 FB | 	rdlong	_var03, #20
1ee18     97 14 48 FB | 	callpa	#(@LR__2641-@LR__2640)>>2,fcache_load_ptr_
1ee1c                 | LR__2640
1ee1c     01 00 00 FF 
1ee20     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
1ee24     1C 00 90 CD |  if_b	jmp	#LR__2642
1ee28     02 03 02 F1 | 	add	_var02, _var03
1ee2c     01 13 02 F6 | 	mov	arg01, _var02
1ee30     00 12 66 FA | 	addct1	arg01, #0
1ee34     24 22 60 FD | 	waitct1
1ee38     01 00 00 FF 
1ee3c     E8 01 86 F1 | 	sub	_var01, ##1000
1ee40     D8 FF 9F FD | 	jmp	#LR__2640
1ee44                 | LR__2641
1ee44                 | LR__2642
1ee44     01 00 56 F2 | 	cmps	_var01, #1 wc
1ee48     28 00 90 CD |  if_b	jmp	#LR__2643
1ee4c     02 01 02 FD | 	qmul	_var01, _var03
1ee50     01 00 00 FF 
1ee54     E8 17 06 F6 | 	mov	arg03, ##1000
1ee58     19 FA 61 FD | 	getqy	result1
1ee5c     18 12 62 FD | 	getqx	arg01
1ee60     28 FA 61 FD | 	setq	result1
1ee64     0B 13 12 FD | 	qdiv	arg01, arg03
1ee68     18 12 62 FD | 	getqx	arg01
1ee6c     01 13 62 FA | 	addct1	arg01, _var02
1ee70     24 22 60 FD | 	waitct1
1ee74                 | LR__2643
1ee74                 | __system___waitms_ret
1ee74     2D 00 64 FD | 	ret
1ee78                 | 
1ee78                 | __system___waitus
1ee78     09 01 02 F6 | 	mov	_var01, arg01
1ee7c     1A 02 62 FD | 	getct	_var02
1ee80     14 04 06 FB | 	rdlong	_var03, #20
1ee84     97 14 48 FB | 	callpa	#(@LR__2651-@LR__2650)>>2,fcache_load_ptr_
1ee88                 | LR__2650
1ee88     A1 07 00 FF 
1ee8c     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
1ee90     1C 00 90 CD |  if_b	jmp	#LR__2652
1ee94     02 03 02 F1 | 	add	_var02, _var03
1ee98     01 13 02 F6 | 	mov	arg01, _var02
1ee9c     00 12 66 FA | 	addct1	arg01, #0
1eea0     24 22 60 FD | 	waitct1
1eea4     A1 07 00 FF 
1eea8     40 00 86 F1 | 	sub	_var01, ##1000000
1eeac     D8 FF 9F FD | 	jmp	#LR__2650
1eeb0                 | LR__2651
1eeb0                 | LR__2652
1eeb0     01 00 56 F2 | 	cmps	_var01, #1 wc
1eeb4     28 00 90 CD |  if_b	jmp	#LR__2653
1eeb8     02 01 02 FD | 	qmul	_var01, _var03
1eebc     A1 07 00 FF 
1eec0     40 16 06 F6 | 	mov	arg03, ##1000000
1eec4     19 FA 61 FD | 	getqy	result1
1eec8     18 12 62 FD | 	getqx	arg01
1eecc     28 FA 61 FD | 	setq	result1
1eed0     0B 13 12 FD | 	qdiv	arg01, arg03
1eed4     18 FA 61 FD | 	getqx	result1
1eed8     FD 02 62 FA | 	addct1	_var02, result1
1eedc     24 22 60 FD | 	waitct1
1eee0                 | LR__2653
1eee0                 | __system___waitus_ret
1eee0     2D 00 64 FD | 	ret
1eee4                 | 
1eee4                 | __system___mount
1eee4     0B 4A 05 F6 | 	mov	COUNT_, #11
1eee8     A8 00 A0 FD | 	call	#pushregs_
1eeec     09 1F 02 F6 | 	mov	local01, arg01
1eef0     0A 21 0A F6 | 	mov	local02, arg02 wz
1eef4     01 22 66 F6 | 	neg	local03, #1
1eef8     01 FA 65 A6 |  if_e	neg	result1, #1
1eefc     98 02 90 AD |  if_e	jmp	#LR__2675
1ef00     0F FB C1 FA | 	rdbyte	result1, local01
1ef04     2F FA 0D F2 | 	cmp	result1, #47 wz
1ef08     28 00 90 5D |  if_ne	jmp	#LR__2662
1ef0c     0F 13 02 F6 | 	mov	arg01, local01
1ef10     09 25 02 F6 | 	mov	local04, arg01
1ef14     97 06 48 FB | 	callpa	#(@LR__2661-@LR__2660)>>2,fcache_load_ptr_
1ef18                 | LR__2660
1ef18     12 FB C9 FA | 	rdbyte	result1, local04 wz
1ef1c     01 24 06 51 |  if_ne	add	local04, #1
1ef20     F4 FF 9F 5D |  if_ne	jmp	#LR__2660
1ef24                 | LR__2661
1ef24     09 25 82 F1 | 	sub	local04, arg01
1ef28     12 FB 01 F6 | 	mov	result1, local04
1ef2c     10 FA 55 F2 | 	cmps	result1, #16 wc
1ef30     14 00 90 CD |  if_b	jmp	#LR__2663
1ef34                 | LR__2662
1ef34     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1ef38     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
1ef3c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1ef40     01 FA 65 F6 | 	neg	result1, #1
1ef44     50 02 90 FD | 	jmp	#LR__2675
1ef48                 | LR__2663
1ef48     00 26 06 F6 | 	mov	local05, #0
1ef4c                 | LR__2664
1ef4c     04 26 56 F2 | 	cmps	local05, #4 wc
1ef50     B0 00 90 3D |  if_ae	jmp	#LR__2669
1ef54     13 13 02 F6 | 	mov	arg01, local05
1ef58     02 12 66 F0 | 	shl	arg01, #2
1ef5c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1ef60     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1ef64     09 FB 09 FB | 	rdlong	result1, arg01 wz
1ef68     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1ef6c     00 22 56 A2 |  if_e	cmps	local03, #0 wc
1ef70     13 23 02 86 |  if_c_and_z	mov	local03, local05
1ef74     84 00 90 8D |  if_c_and_z	jmp	#LR__2668
1ef78     13 13 02 F6 | 	mov	arg01, local05
1ef7c     02 12 66 F0 | 	shl	arg01, #2
1ef80     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1ef84     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1ef88     09 13 02 FB | 	rdlong	arg01, arg01
1ef8c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1ef90     09 25 02 F6 | 	mov	local04, arg01
1ef94     97 06 48 FB | 	callpa	#(@LR__2666-@LR__2665)>>2,fcache_load_ptr_
1ef98                 | LR__2665
1ef98     12 FB C9 FA | 	rdbyte	result1, local04 wz
1ef9c     01 24 06 51 |  if_ne	add	local04, #1
1efa0     F4 FF 9F 5D |  if_ne	jmp	#LR__2665
1efa4                 | LR__2666
1efa4     09 25 82 F1 | 	sub	local04, arg01
1efa8     12 29 02 F6 | 	mov	local06, local04
1efac     14 13 02 F6 | 	mov	arg01, local06
1efb0     0F 13 02 F1 | 	add	arg01, local01
1efb4     09 FB C1 FA | 	rdbyte	result1, arg01
1efb8     2F FA 0D F2 | 	cmp	result1, #47 wz
1efbc     14 2B 02 56 |  if_ne	mov	local07, local06
1efc0     0F 2B 02 51 |  if_ne	add	local07, local01
1efc4     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
1efc8     30 00 90 5D |  if_ne	jmp	#LR__2667
1efcc     13 17 02 F6 | 	mov	arg03, local05
1efd0     02 16 66 F0 | 	shl	arg03, #2
1efd4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1efd8     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
1efdc     0B 15 02 FB | 	rdlong	arg02, arg03
1efe0     0F 13 02 F6 | 	mov	arg01, local01
1efe4     14 17 02 F6 | 	mov	arg03, local06
1efe8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1efec     B8 4D B0 FD | 	call	#__system__strncmp
1eff0     00 FA 0D F2 | 	cmp	result1, #0 wz
1eff4     13 23 02 A6 |  if_e	mov	local03, local05
1eff8     08 00 90 AD |  if_e	jmp	#LR__2669
1effc                 | LR__2667
1effc                 | LR__2668
1effc     01 26 06 F1 | 	add	local05, #1
1f000     48 FF 9F FD | 	jmp	#LR__2664
1f004                 | LR__2669
1f004     FF FF 7F FF 
1f008     FF 23 0E F2 | 	cmp	local03, ##-1 wz
1f00c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
1f010     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
1f014     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
1f018     01 FA 65 A6 |  if_e	neg	result1, #1
1f01c     78 01 90 AD |  if_e	jmp	#LR__2675
1f020     11 27 02 F6 | 	mov	local05, local03
1f024     13 2B 02 F6 | 	mov	local07, local05
1f028     02 2A 66 F0 | 	shl	local07, #2
1f02c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1f030     F3 2A 02 F1 | 	add	local07, ptr___system__dat__
1f034     15 29 0A FB | 	rdlong	local06, local07 wz
1f038     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1f03c     58 00 90 AD |  if_e	jmp	#LR__2670
1f040     4C 28 06 F1 | 	add	local06, #76
1f044     14 2B 0A FB | 	rdlong	local07, local06 wz
1f048     4C 28 86 F1 | 	sub	local06, #76
1f04c     48 00 90 AD |  if_e	jmp	#LR__2670
1f050     4C 28 06 F1 | 	add	local06, #76
1f054     14 2B 02 FB | 	rdlong	local07, local06
1f058     15 23 02 F6 | 	mov	local03, local07
1f05c     13 2A 46 F7 | 	zerox	local07, #19
1f060     14 22 46 F0 | 	shr	local03, #20
1f064     02 22 66 F0 | 	shl	local03, #2
1f068     ED 22 02 F1 | 	add	local03, __methods__
1f06c     11 23 02 FB | 	rdlong	local03, local03
1f070     13 29 02 F6 | 	mov	local06, local05
1f074     02 28 66 F0 | 	shl	local06, #2
1f078     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1f07c     F3 28 02 F1 | 	add	local06, ptr___system__dat__
1f080     14 13 02 FB | 	rdlong	arg01, local06
1f084     F2 28 02 F6 | 	mov	local06, objptr
1f088     15 E5 01 F6 | 	mov	objptr, local07
1f08c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1f090     2D 22 62 FD | 	call	local03
1f094     14 E5 01 F6 | 	mov	objptr, local06
1f098                 | LR__2670
1f098     13 2D 02 F6 | 	mov	local08, local05
1f09c     02 2C 66 F0 | 	shl	local08, #2
1f0a0     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1f0a4     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
1f0a8     16 21 62 FC | 	wrlong	local02, local08
1f0ac     00 20 0E F2 | 	cmp	local02, #0 wz
1f0b0     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1f0b4     18 00 90 5D |  if_ne	jmp	#LR__2671
1f0b8     02 26 66 F0 | 	shl	local05, #2
1f0bc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1f0c0     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1f0c4     13 01 68 FC | 	wrlong	#0, local05
1f0c8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1f0cc     C4 00 90 FD | 	jmp	#LR__2674
1f0d0                 | LR__2671
1f0d0     13 2F 02 F6 | 	mov	local09, local05
1f0d4     04 2E 66 F0 | 	shl	local09, #4
1f0d8     24 E6 05 F1 | 	add	ptr___system__dat__, #36
1f0dc     F3 2E 02 F1 | 	add	local09, ptr___system__dat__
1f0e0     17 13 02 F6 | 	mov	arg01, local09
1f0e4     0F 15 02 F6 | 	mov	arg02, local01
1f0e8     10 16 06 F6 | 	mov	arg03, #16
1f0ec     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
1f0f0     08 4C B0 FD | 	call	#__system__strncpy
1f0f4     48 20 06 F1 | 	add	local02, #72
1f0f8     10 2D 0A FB | 	rdlong	local08, local02 wz
1f0fc     48 20 86 F1 | 	sub	local02, #72
1f100     7C 00 90 AD |  if_e	jmp	#LR__2673
1f104     48 20 06 F1 | 	add	local02, #72
1f108     10 2D 02 FB | 	rdlong	local08, local02
1f10c     16 31 02 F6 | 	mov	local10, local08
1f110     13 2C 46 F7 | 	zerox	local08, #19
1f114     14 30 46 F0 | 	shr	local10, #20
1f118     02 30 66 F0 | 	shl	local10, #2
1f11c     ED 30 02 F1 | 	add	local10, __methods__
1f120     18 31 02 FB | 	rdlong	local10, local10
1f124     17 13 02 F6 | 	mov	arg01, local09
1f128     F2 32 02 F6 | 	mov	local11, objptr
1f12c     16 E5 01 F6 | 	mov	objptr, local08
1f130     2D 30 62 FD | 	call	local10
1f134     19 E5 01 F6 | 	mov	objptr, local11
1f138     FD 12 0A F6 | 	mov	arg01, result1 wz
1f13c     40 00 90 AD |  if_e	jmp	#LR__2672
1f140     13 2D 02 F6 | 	mov	local08, local05
1f144     02 2C 66 F0 | 	shl	local08, #2
1f148     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1f14c     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
1f150     16 01 68 FC | 	wrlong	#0, local08
1f154     02 26 66 F0 | 	shl	local05, #2
1f158     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1f15c     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1f160     13 01 68 FC | 	wrlong	#0, local05
1f164     09 13 6A F6 | 	neg	arg01, arg01 wz
1f168     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
1f16c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1f170     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1f174     01 FA 65 56 |  if_ne	neg	result1, #1
1f178     00 FA 05 A6 |  if_e	mov	result1, #0
1f17c     18 00 90 FD | 	jmp	#LR__2675
1f180                 | LR__2672
1f180                 | LR__2673
1f180     02 26 66 F0 | 	shl	local05, #2
1f184     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1f188     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1f18c     13 2F 62 FC | 	wrlong	local09, local05
1f190     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1f194                 | LR__2674
1f194     00 FA 05 F6 | 	mov	result1, #0
1f198                 | LR__2675
1f198     A7 F0 03 F6 | 	mov	ptra, fp
1f19c     B2 00 A0 FD | 	call	#popregs_
1f1a0                 | __system___mount_ret
1f1a0     2D 00 64 FD | 	ret
1f1a4                 | 
1f1a4                 | __system___chdir
1f1a4     00 4A 05 F6 | 	mov	COUNT_, #0
1f1a8     A8 00 A0 FD | 	call	#pushregs_
1f1ac     40 F0 07 F1 | 	add	ptra, #64
1f1b0     04 4E 05 F1 | 	add	fp, #4
1f1b4     A7 12 62 FC | 	wrlong	arg01, fp
1f1b8     04 4E 05 F1 | 	add	fp, #4
1f1bc     A7 14 02 F6 | 	mov	arg02, fp
1f1c0     08 4E 85 F1 | 	sub	fp, #8
1f1c4     14 48 B0 FD | 	call	#__system__stat
1f1c8     3C 4E 05 F1 | 	add	fp, #60
1f1cc     A7 FA 61 FC | 	wrlong	result1, fp
1f1d0     3C 4E 85 F1 | 	sub	fp, #60
1f1d4     00 FA 0D F2 | 	cmp	result1, #0 wz
1f1d8     3C 4E 05 51 |  if_ne	add	fp, #60
1f1dc     A7 FA 01 5B |  if_ne	rdlong	result1, fp
1f1e0     3C 4E 85 51 |  if_ne	sub	fp, #60
1f1e4     BC 00 90 5D |  if_ne	jmp	#LR__2682
1f1e8     10 4E 05 F1 | 	add	fp, #16
1f1ec     A7 12 02 FB | 	rdlong	arg01, fp
1f1f0     10 4E 85 F1 | 	sub	fp, #16
1f1f4     78 00 00 FF 
1f1f8     00 12 06 F5 | 	and	arg01, ##61440
1f1fc     08 00 00 FF 
1f200     00 12 0E F2 | 	cmp	arg01, ##4096 wz
1f204     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
1f208     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
1f20c     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
1f210     01 FA 65 56 |  if_ne	neg	result1, #1
1f214     8C 00 90 5D |  if_ne	jmp	#LR__2682
1f218     04 4E 05 F1 | 	add	fp, #4
1f21c     A7 16 02 FB | 	rdlong	arg03, fp
1f220     04 4E 85 F1 | 	sub	fp, #4
1f224     0B 17 C2 FA | 	rdbyte	arg03, arg03
1f228     2F 16 0E F2 | 	cmp	arg03, #47 wz
1f22c     24 00 90 5D |  if_ne	jmp	#LR__2680
1f230     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1f234     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1f238     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1f23c     04 4E 05 F1 | 	add	fp, #4
1f240     A7 14 02 FB | 	rdlong	arg02, fp
1f244     04 4E 85 F1 | 	sub	fp, #4
1f248     00 17 06 F6 | 	mov	arg03, #256
1f24c     AC 4A B0 FD | 	call	#__system__strncpy
1f250     4C 00 90 FD | 	jmp	#LR__2681
1f254                 | LR__2680
1f254     84 E7 05 F1 | 	add	ptr___system__dat__, #388
1f258     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1f25c     38 4E 05 F1 | 	add	fp, #56
1f260     A7 12 62 FC | 	wrlong	arg01, fp
1f264     38 4E 85 F1 | 	sub	fp, #56
1f268     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
1f26c     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
1f270     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1f274     00 17 06 F6 | 	mov	arg03, #256
1f278     80 4A B0 FD | 	call	#__system__strncpy
1f27c     38 4E 05 F1 | 	add	fp, #56
1f280     A7 12 02 FB | 	rdlong	arg01, fp
1f284     34 4E 85 F1 | 	sub	fp, #52
1f288     A7 14 02 FB | 	rdlong	arg02, fp
1f28c     04 4E 85 F1 | 	sub	fp, #4
1f290     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1f294     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
1f298     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1f29c     10 00 B0 FD | 	call	#__system____getvfsforfile
1f2a0                 | LR__2681
1f2a0     00 FA 05 F6 | 	mov	result1, #0
1f2a4                 | LR__2682
1f2a4     A7 F0 03 F6 | 	mov	ptra, fp
1f2a8     B2 00 A0 FD | 	call	#popregs_
1f2ac                 | __system___chdir_ret
1f2ac     2D 00 64 FD | 	ret
1f2b0                 | 
1f2b0                 | __system____getvfsforfile
1f2b0     0E 4A 05 F6 | 	mov	COUNT_, #14
1f2b4     A8 00 A0 FD | 	call	#pushregs_
1f2b8     09 1F 02 F6 | 	mov	local01, arg01
1f2bc     0A 21 02 F6 | 	mov	local02, arg02
1f2c0     0B 23 02 F6 | 	mov	local03, arg03
1f2c4     97 10 48 FB | 	callpa	#(@LR__2691-@LR__2690)>>2,fcache_load_ptr_
1f2c8                 | LR__2690
1f2c8     10 FB C1 FA | 	rdbyte	result1, local02
1f2cc     2F FA 0D F2 | 	cmp	result1, #47 wz
1f2d0     01 20 06 A1 |  if_e	add	local02, #1
1f2d4     10 25 C2 AA |  if_e	rdbyte	local04, local02
1f2d8     01 20 86 A1 |  if_e	sub	local02, #1
1f2dc     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
1f2e0     01 20 06 A1 |  if_e	add	local02, #1
1f2e4     E0 FF 9F AD |  if_e	jmp	#LR__2690
1f2e8                 | LR__2691
1f2e8     10 25 C2 FA | 	rdbyte	local04, local02
1f2ec     2F 24 0E F2 | 	cmp	local04, #47 wz
1f2f0     14 00 90 5D |  if_ne	jmp	#LR__2692
1f2f4     0F 13 02 F6 | 	mov	arg01, local01
1f2f8     10 15 02 F6 | 	mov	arg02, local02
1f2fc     00 17 06 F6 | 	mov	arg03, #256
1f300     F8 49 B0 FD | 	call	#__system__strncpy
1f304     7C 00 90 FD | 	jmp	#LR__2694
1f308                 | LR__2692
1f308     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1f30c     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
1f310     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1f314     0F 13 02 F6 | 	mov	arg01, local01
1f318     00 17 06 F6 | 	mov	arg03, #256
1f31c     DC 49 B0 FD | 	call	#__system__strncpy
1f320     10 25 CA FA | 	rdbyte	local04, local02 wz
1f324     5C 00 90 AD |  if_e	jmp	#LR__2693
1f328     10 25 C2 FA | 	rdbyte	local04, local02
1f32c     2E 24 0E F2 | 	cmp	local04, #46 wz
1f330     01 20 06 A1 |  if_e	add	local02, #1
1f334     10 27 C2 AA |  if_e	rdbyte	local05, local02
1f338     01 20 86 A1 |  if_e	sub	local02, #1
1f33c     13 29 02 A6 |  if_e	mov	local06, local05
1f340     07 28 4E A7 |  if_e	zerox	local06, #7 wz
1f344     3C 00 90 AD |  if_e	jmp	#LR__2693
1f348     0F 27 C2 FA | 	rdbyte	local05, local01
1f34c     2F 26 0E F2 | 	cmp	local05, #47 wz
1f350     01 1E 06 A1 |  if_e	add	local01, #1
1f354     0F 25 C2 AA |  if_e	rdbyte	local04, local01
1f358     01 1E 86 A1 |  if_e	sub	local01, #1
1f35c     00 24 4E A2 |  if_e	cmps	local04, #0 wz
1f360     70 01 00 5F 
1f364     CC 14 06 56 |  if_ne	mov	arg02, ##@LR__4750
1f368     0F 13 02 56 |  if_ne	mov	arg01, local01
1f36c     00 17 06 56 |  if_ne	mov	arg03, #256
1f370     D4 49 B0 5D |  if_ne	call	#__system__strncat
1f374     0F 13 02 F6 | 	mov	arg01, local01
1f378     10 15 02 F6 | 	mov	arg02, local02
1f37c     00 17 06 F6 | 	mov	arg03, #256
1f380     C4 49 B0 FD | 	call	#__system__strncat
1f384                 | LR__2693
1f384                 | LR__2694
1f384     0F 13 02 F6 | 	mov	arg01, local01
1f388     7C 4B B0 FD | 	call	#__system___normalizeName
1f38c     0F 25 CA FA | 	rdbyte	local04, local01 wz
1f390     1C 00 90 AD |  if_e	jmp	#LR__2695
1f394     0F 25 C2 FA | 	rdbyte	local04, local01
1f398     2F 24 0E F2 | 	cmp	local04, #47 wz
1f39c     01 1E 06 A1 |  if_e	add	local01, #1
1f3a0     0F 29 C2 AA |  if_e	rdbyte	local06, local01
1f3a4     01 1E 86 A1 |  if_e	sub	local01, #1
1f3a8     00 28 4E A2 |  if_e	cmps	local06, #0 wz
1f3ac     18 00 90 5D |  if_ne	jmp	#LR__2696
1f3b0                 | LR__2695
1f3b0     01 00 00 FF 
1f3b4     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
1f3b8     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
1f3bc     01 00 00 FF 
1f3c0     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
1f3c4     EC 01 90 FD | 	jmp	#LR__2710
1f3c8                 | LR__2696
1f3c8     00 2A 06 F6 | 	mov	local07, #0
1f3cc                 | LR__2697
1f3cc     04 2A 56 F2 | 	cmps	local07, #4 wc
1f3d0     CC 01 90 3D |  if_ae	jmp	#LR__2709
1f3d4     15 29 02 F6 | 	mov	local06, local07
1f3d8     02 28 66 F0 | 	shl	local06, #2
1f3dc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1f3e0     F3 28 02 F1 | 	add	local06, ptr___system__dat__
1f3e4     14 29 0A FB | 	rdlong	local06, local06 wz
1f3e8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1f3ec     A8 01 90 AD |  if_e	jmp	#LR__2708
1f3f0     15 25 02 F6 | 	mov	local04, local07
1f3f4     02 24 66 F0 | 	shl	local04, #2
1f3f8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1f3fc     F3 24 02 F1 | 	add	local04, ptr___system__dat__
1f400     12 13 02 FB | 	rdlong	arg01, local04
1f404     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1f408     09 2D 02 F6 | 	mov	local08, arg01
1f40c     97 06 48 FB | 	callpa	#(@LR__2699-@LR__2698)>>2,fcache_load_ptr_
1f410                 | LR__2698
1f410     16 FB C9 FA | 	rdbyte	result1, local08 wz
1f414     01 2C 06 51 |  if_ne	add	local08, #1
1f418     F4 FF 9F 5D |  if_ne	jmp	#LR__2698
1f41c                 | LR__2699
1f41c     09 2D 82 F1 | 	sub	local08, arg01
1f420     16 2F 02 F6 | 	mov	local09, local08
1f424     17 25 02 F6 | 	mov	local04, local09
1f428     0F 25 02 F1 | 	add	local04, local01
1f42c     12 29 C2 FA | 	rdbyte	local06, local04
1f430     2F 28 0E F2 | 	cmp	local06, #47 wz
1f434     17 31 02 56 |  if_ne	mov	local10, local09
1f438     0F 31 02 51 |  if_ne	add	local10, local01
1f43c     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
1f440     54 01 90 5D |  if_ne	jmp	#LR__2707
1f444     15 17 02 F6 | 	mov	arg03, local07
1f448     02 16 66 F0 | 	shl	arg03, #2
1f44c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1f450     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
1f454     0B 15 02 FB | 	rdlong	arg02, arg03
1f458     17 17 02 F6 | 	mov	arg03, local09
1f45c     0F 13 02 F6 | 	mov	arg01, local01
1f460     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1f464     40 49 B0 FD | 	call	#__system__strncmp
1f468     00 FA 4D F2 | 	cmps	result1, #0 wz
1f46c     28 01 90 5D |  if_ne	jmp	#LR__2707
1f470     15 33 02 F6 | 	mov	local11, local07
1f474     02 32 66 F0 | 	shl	local11, #2
1f478     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1f47c     F3 32 02 F1 | 	add	local11, ptr___system__dat__
1f480     19 35 02 FB | 	rdlong	local12, local11
1f484     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1f488     97 22 48 FB | 	callpa	#(@LR__2701-@LR__2700)>>2,fcache_load_ptr_
1f48c                 | LR__2700
1f48c     17 29 02 F6 | 	mov	local06, local09
1f490     01 28 06 F1 | 	add	local06, #1
1f494     0F 29 02 F1 | 	add	local06, local01
1f498     14 33 C2 FA | 	rdbyte	local11, local06
1f49c     2E 32 0E F2 | 	cmp	local11, #46 wz
1f4a0     2C 00 90 5D |  if_ne	jmp	#LR__2702
1f4a4     17 33 02 F6 | 	mov	local11, local09
1f4a8     02 32 06 F1 | 	add	local11, #2
1f4ac     0F 33 02 F1 | 	add	local11, local01
1f4b0     19 31 C2 FA | 	rdbyte	local10, local11
1f4b4     2F 30 0E F2 | 	cmp	local10, #47 wz
1f4b8     17 37 02 56 |  if_ne	mov	local13, local09
1f4bc     02 36 06 51 |  if_ne	add	local13, #2
1f4c0     0F 37 02 51 |  if_ne	add	local13, local01
1f4c4     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
1f4c8     01 2E 06 A1 |  if_e	add	local09, #1
1f4cc     BC FF 9F AD |  if_e	jmp	#LR__2700
1f4d0                 | LR__2701
1f4d0                 | LR__2702
1f4d0     00 22 0E F2 | 	cmp	local03, #0 wz
1f4d4     11 13 02 56 |  if_ne	mov	arg01, local03
1f4d8     0F 15 02 56 |  if_ne	mov	arg02, local01
1f4dc     00 17 06 56 |  if_ne	mov	arg03, #256
1f4e0     18 48 B0 5D |  if_ne	call	#__system__strncpy
1f4e4     0F 15 02 F6 | 	mov	arg02, local01
1f4e8     17 15 02 F1 | 	add	arg02, local09
1f4ec     01 14 06 F1 | 	add	arg02, #1
1f4f0     0F 13 02 F6 | 	mov	arg01, local01
1f4f4     D4 F5 BF FD | 	call	#__system____builtin_strcpy
1f4f8     0F 13 02 F6 | 	mov	arg01, local01
1f4fc     09 2D 02 F6 | 	mov	local08, arg01
1f500     97 06 48 FB | 	callpa	#(@LR__2704-@LR__2703)>>2,fcache_load_ptr_
1f504                 | LR__2703
1f504     16 FB C9 FA | 	rdbyte	result1, local08 wz
1f508     01 2C 06 51 |  if_ne	add	local08, #1
1f50c     F4 FF 9F 5D |  if_ne	jmp	#LR__2703
1f510                 | LR__2704
1f510     09 2D 82 F1 | 	sub	local08, arg01
1f514     16 2F 02 F6 | 	mov	local09, local08
1f518                 | LR__2705
1f518     01 2E 56 F2 | 	cmps	local09, #1 wc
1f51c     70 00 90 CD |  if_b	jmp	#LR__2706
1f520     17 25 02 F6 | 	mov	local04, local09
1f524     0F 25 02 F1 | 	add	local04, local01
1f528     12 33 C2 FA | 	rdbyte	local11, local04
1f52c     2F 32 0E F2 | 	cmp	local11, #47 wz
1f530     17 33 02 A6 |  if_e	mov	local11, local09
1f534     0F 33 02 A1 |  if_e	add	local11, local01
1f538     19 01 48 AC |  if_e	wrbyte	#0, local11
1f53c     01 2E 86 A1 |  if_e	sub	local09, #1
1f540     D4 FF 9F AD |  if_e	jmp	#LR__2705
1f544     17 25 02 F6 | 	mov	local04, local09
1f548     0F 25 02 F1 | 	add	local04, local01
1f54c     12 33 C2 FA | 	rdbyte	local11, local04
1f550     2E 32 0E F2 | 	cmp	local11, #46 wz
1f554     38 00 90 5D |  if_ne	jmp	#LR__2706
1f558     02 2E 56 F2 | 	cmps	local09, #2 wc
1f55c     30 00 90 CD |  if_b	jmp	#LR__2706
1f560     17 39 02 F6 | 	mov	local14, local09
1f564     01 38 86 F1 | 	sub	local14, #1
1f568     0F 39 02 F1 | 	add	local14, local01
1f56c     1C 27 C2 FA | 	rdbyte	local05, local14
1f570     2F 26 0E F2 | 	cmp	local05, #47 wz
1f574     18 00 90 5D |  if_ne	jmp	#LR__2706
1f578     17 25 02 F6 | 	mov	local04, local09
1f57c     01 24 86 F1 | 	sub	local04, #1
1f580     0F 25 02 F1 | 	add	local04, local01
1f584     12 01 48 FC | 	wrbyte	#0, local04
1f588     02 2E 86 F1 | 	sub	local09, #2
1f58c     88 FF 9F FD | 	jmp	#LR__2705
1f590                 | LR__2706
1f590     1A FB 01 F6 | 	mov	result1, local12
1f594     1C 00 90 FD | 	jmp	#LR__2710
1f598                 | LR__2707
1f598                 | LR__2708
1f598     01 2A 06 F1 | 	add	local07, #1
1f59c     2C FE 9F FD | 	jmp	#LR__2697
1f5a0                 | LR__2709
1f5a0     03 00 00 FF 
1f5a4     38 E7 05 F1 | 	add	ptr___system__dat__, ##1848
1f5a8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1f5ac     03 00 00 FF 
1f5b0     38 E7 85 F1 | 	sub	ptr___system__dat__, ##1848
1f5b4                 | LR__2710
1f5b4     A7 F0 03 F6 | 	mov	ptra, fp
1f5b8     B2 00 A0 FD | 	call	#popregs_
1f5bc                 | __system____getvfsforfile_ret
1f5bc     2D 00 64 FD | 	ret
1f5c0                 | 
1f5c0                 | __system___basic_open
1f5c0     05 4A 05 F6 | 	mov	COUNT_, #5
1f5c4     A8 00 A0 FD | 	call	#pushregs_
1f5c8     0A 1F 02 F6 | 	mov	local01, arg02
1f5cc     0B 21 02 F6 | 	mov	local02, arg03
1f5d0     0C 23 02 F6 | 	mov	local03, arg04
1f5d4     00 24 06 F6 | 	mov	local04, #0
1f5d8     F8 46 B0 FD | 	call	#__system____getftab
1f5dc     FD 26 0A F6 | 	mov	local05, result1 wz
1f5e0     18 00 90 5D |  if_ne	jmp	#LR__2720
1f5e4     EE 12 02 F6 | 	mov	arg01, abortchain
1f5e8     0C 14 06 F6 | 	mov	arg02, #12
1f5ec     01 16 06 F6 | 	mov	arg03, #1
1f5f0     DA 00 A0 FD | 	call	#__longjmp
1f5f4     01 FA 65 F6 | 	neg	result1, #1
1f5f8     14 01 90 FD | 	jmp	#LR__2729
1f5fc                 | LR__2720
1f5fc     08 26 06 F1 | 	add	local05, #8
1f600     13 FB 09 FB | 	rdlong	result1, local05 wz
1f604     08 26 86 F1 | 	sub	local05, #8
1f608     13 13 02 56 |  if_ne	mov	arg01, local05
1f60c     54 3E B0 5D |  if_ne	call	#__system___closeraw
1f610     00 1E 0E F2 | 	cmp	local01, #0 wz
1f614     00 20 0E A2 |  if_e	cmp	local02, #0 wz
1f618     00 22 0E A2 |  if_e	cmp	local03, #0 wz
1f61c     3C 00 90 AD |  if_e	jmp	#LR__2722
1f620     0C 12 06 F6 | 	mov	arg01, #12
1f624     3C 33 B0 FD | 	call	#__system___gc_alloc_managed
1f628     FD 24 0A F6 | 	mov	local04, result1 wz
1f62c     18 00 90 5D |  if_ne	jmp	#LR__2721
1f630     EE 12 02 F6 | 	mov	arg01, abortchain
1f634     07 14 06 F6 | 	mov	arg02, #7
1f638     01 16 06 F6 | 	mov	arg03, #1
1f63c     DA 00 A0 FD | 	call	#__longjmp
1f640     01 FA 65 F6 | 	neg	result1, #1
1f644     C8 00 90 FD | 	jmp	#LR__2729
1f648                 | LR__2721
1f648     12 01 68 FC | 	wrlong	#0, local04
1f64c     04 24 06 F1 | 	add	local04, #4
1f650     12 01 68 FC | 	wrlong	#0, local04
1f654     04 24 86 F1 | 	sub	local04, #4
1f658     13 25 62 FC | 	wrlong	local04, local05
1f65c                 | LR__2722
1f65c     00 1E 0E F2 | 	cmp	local01, #0 wz
1f660     20 00 90 AD |  if_e	jmp	#LR__2723
1f664     12 1F 62 FC | 	wrlong	local01, local04
1f668     12 FB 01 F6 | 	mov	result1, local04
1f66c     00 20 04 FF 
1f670     00 FA 45 F5 | 	or	result1, ##138412032
1f674     1C 26 06 F1 | 	add	local05, #28
1f678     13 FB 61 FC | 	wrlong	result1, local05
1f67c     1C 26 86 F1 | 	sub	local05, #28
1f680     0C 00 90 FD | 	jmp	#LR__2724
1f684                 | LR__2723
1f684     1C 26 06 F1 | 	add	local05, #28
1f688     13 01 68 FC | 	wrlong	#0, local05
1f68c     1C 26 86 F1 | 	sub	local05, #28
1f690                 | LR__2724
1f690     00 20 0E F2 | 	cmp	local02, #0 wz
1f694     28 00 90 AD |  if_e	jmp	#LR__2725
1f698     04 24 06 F1 | 	add	local04, #4
1f69c     12 21 62 FC | 	wrlong	local02, local04
1f6a0     04 24 86 F1 | 	sub	local04, #4
1f6a4     12 FB 01 F6 | 	mov	result1, local04
1f6a8     00 28 04 FF 
1f6ac     00 FA 45 F5 | 	or	result1, ##139460608
1f6b0     20 26 06 F1 | 	add	local05, #32
1f6b4     13 FB 61 FC | 	wrlong	result1, local05
1f6b8     20 26 86 F1 | 	sub	local05, #32
1f6bc     0C 00 90 FD | 	jmp	#LR__2726
1f6c0                 | LR__2725
1f6c0     20 26 06 F1 | 	add	local05, #32
1f6c4     13 01 68 FC | 	wrlong	#0, local05
1f6c8     20 26 86 F1 | 	sub	local05, #32
1f6cc                 | LR__2726
1f6cc     00 22 0E F2 | 	cmp	local03, #0 wz
1f6d0     24 00 90 AD |  if_e	jmp	#LR__2727
1f6d4     08 24 06 F1 | 	add	local04, #8
1f6d8     12 23 62 FC | 	wrlong	local03, local04
1f6dc     08 24 86 F1 | 	sub	local04, #8
1f6e0     00 30 04 FF 
1f6e4     00 24 46 F5 | 	or	local04, ##140509184
1f6e8     24 26 06 F1 | 	add	local05, #36
1f6ec     13 25 62 FC | 	wrlong	local04, local05
1f6f0     24 26 86 F1 | 	sub	local05, #36
1f6f4     0C 00 90 FD | 	jmp	#LR__2728
1f6f8                 | LR__2727
1f6f8     24 26 06 F1 | 	add	local05, #36
1f6fc     13 01 68 FC | 	wrlong	#0, local05
1f700     24 26 86 F1 | 	sub	local05, #36
1f704                 | LR__2728
1f704     08 26 06 F1 | 	add	local05, #8
1f708     13 0F 68 FC | 	wrlong	#7, local05
1f70c     00 FA 05 F6 | 	mov	result1, #0
1f710                 | LR__2729
1f710     A7 F0 03 F6 | 	mov	ptra, fp
1f714     B2 00 A0 FD | 	call	#popregs_
1f718                 | __system___basic_open_ret
1f718     2D 00 64 FD | 	ret
1f71c                 | 
1f71c                 | __system___basic_open_string
1f71c     04 4A 05 F6 | 	mov	COUNT_, #4
1f720     A8 00 A0 FD | 	call	#pushregs_
1f724     0A 1F 02 F6 | 	mov	local01, arg02
1f728     0B 21 02 F6 | 	mov	local02, arg03
1f72c     A4 45 B0 FD | 	call	#__system____getftab
1f730     FD 22 0A F6 | 	mov	local03, result1 wz
1f734     18 00 90 5D |  if_ne	jmp	#LR__2730
1f738     EE 12 02 F6 | 	mov	arg01, abortchain
1f73c     0C 14 06 F6 | 	mov	arg02, #12
1f740     01 16 06 F6 | 	mov	arg03, #1
1f744     DA 00 A0 FD | 	call	#__longjmp
1f748     01 FA 65 F6 | 	neg	result1, #1
1f74c     58 00 90 FD | 	jmp	#LR__2732
1f750                 | LR__2730
1f750     08 22 06 F1 | 	add	local03, #8
1f754     11 19 0A FB | 	rdlong	arg04, local03 wz
1f758     08 22 86 F1 | 	sub	local03, #8
1f75c     11 13 02 56 |  if_ne	mov	arg01, local03
1f760     00 3D B0 5D |  if_ne	call	#__system___closeraw
1f764     0F 15 02 F6 | 	mov	arg02, local01
1f768     10 17 02 F6 | 	mov	arg03, local02
1f76c     11 13 02 F6 | 	mov	arg01, local03
1f770     B6 19 06 F6 | 	mov	arg04, #438
1f774     E8 39 B0 FD | 	call	#__system___openraw
1f778     FD 24 02 F6 | 	mov	local04, result1
1f77c     00 24 56 F2 | 	cmps	local04, #0 wc
1f780     20 00 90 3D |  if_ae	jmp	#LR__2731
1f784     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1f788     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
1f78c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1f790     EE 12 02 F6 | 	mov	arg01, abortchain
1f794     01 16 06 F6 | 	mov	arg03, #1
1f798     DA 00 A0 FD | 	call	#__longjmp
1f79c     01 FA 65 F6 | 	neg	result1, #1
1f7a0     04 00 90 FD | 	jmp	#LR__2732
1f7a4                 | LR__2731
1f7a4     12 FB 01 F6 | 	mov	result1, local04
1f7a8                 | LR__2732
1f7a8     A7 F0 03 F6 | 	mov	ptra, fp
1f7ac     B2 00 A0 FD | 	call	#popregs_
1f7b0                 | __system___basic_open_string_ret
1f7b0     2D 00 64 FD | 	ret
1f7b4                 | 
1f7b4                 | __system___basic_print_nl
1f7b4     0A 14 06 F6 | 	mov	arg02, #10
1f7b8     00 16 06 F6 | 	mov	arg03, #0
1f7bc     08 00 B0 FD | 	call	#__system___basic_print_char
1f7c0     01 FA 05 F6 | 	mov	result1, #1
1f7c4                 | __system___basic_print_nl_ret
1f7c4     2D 00 64 FD | 	ret
1f7c8                 | 
1f7c8                 | __system___basic_print_char
1f7c8     03 4A 05 F6 | 	mov	COUNT_, #3
1f7cc     A8 00 A0 FD | 	call	#pushregs_
1f7d0     0A 1F 02 F6 | 	mov	local01, arg02
1f7d4     50 4C B0 FD | 	call	#__system___gettxfunc
1f7d8     FD 20 0A F6 | 	mov	local02, result1 wz
1f7dc     00 FA 05 A6 |  if_e	mov	result1, #0
1f7e0     30 00 90 AD |  if_e	jmp	#LR__2740
1f7e4     10 23 02 F6 | 	mov	local03, local02
1f7e8     13 20 46 F7 | 	zerox	local02, #19
1f7ec     14 22 46 F0 | 	shr	local03, #20
1f7f0     02 22 66 F0 | 	shl	local03, #2
1f7f4     ED 22 02 F1 | 	add	local03, __methods__
1f7f8     11 23 02 FB | 	rdlong	local03, local03
1f7fc     0F 13 02 F6 | 	mov	arg01, local01
1f800     F2 1E 02 F6 | 	mov	local01, objptr
1f804     10 E5 01 F6 | 	mov	objptr, local02
1f808     2D 22 62 FD | 	call	local03
1f80c     0F E5 01 F6 | 	mov	objptr, local01
1f810     01 FA 05 F6 | 	mov	result1, #1
1f814                 | LR__2740
1f814     A7 F0 03 F6 | 	mov	ptra, fp
1f818     B2 00 A0 FD | 	call	#popregs_
1f81c                 | __system___basic_print_char_ret
1f81c     2D 00 64 FD | 	ret
1f820                 | 
1f820                 | __system___basic_print_string
1f820     03 4A 05 F6 | 	mov	COUNT_, #3
1f824     A8 00 A0 FD | 	call	#pushregs_
1f828     0A 1F 02 F6 | 	mov	local01, arg02
1f82c     0B 21 02 F6 | 	mov	local02, arg03
1f830     F4 4B B0 FD | 	call	#__system___gettxfunc
1f834     FD 22 0A F6 | 	mov	local03, result1 wz
1f838     00 FA 05 A6 |  if_e	mov	result1, #0
1f83c     18 00 90 AD |  if_e	jmp	#LR__2750
1f840     00 1E 0E F2 | 	cmp	local01, #0 wz
1f844     00 FA 05 A6 |  if_e	mov	result1, #0
1f848     11 13 02 56 |  if_ne	mov	arg01, local03
1f84c     10 15 02 56 |  if_ne	mov	arg02, local02
1f850     0F 17 02 56 |  if_ne	mov	arg03, local01
1f854     C0 01 B0 5D |  if_ne	call	#__system___fmtstr
1f858                 | LR__2750
1f858     A7 F0 03 F6 | 	mov	ptra, fp
1f85c     B2 00 A0 FD | 	call	#popregs_
1f860                 | __system___basic_print_string_ret
1f860     2D 00 64 FD | 	ret
1f864                 | 
1f864                 | __system___basic_print_integer
1f864     04 4A 05 F6 | 	mov	COUNT_, #4
1f868     A8 00 A0 FD | 	call	#pushregs_
1f86c     0A 1F 02 F6 | 	mov	local01, arg02
1f870     0B 21 02 F6 | 	mov	local02, arg03
1f874     0C 23 02 F6 | 	mov	local03, arg04
1f878     AC 4B B0 FD | 	call	#__system___gettxfunc
1f87c     FD 24 0A F6 | 	mov	local04, result1 wz
1f880     00 FA 05 A6 |  if_e	mov	result1, #0
1f884     12 13 02 56 |  if_ne	mov	arg01, local04
1f888     10 15 02 56 |  if_ne	mov	arg02, local02
1f88c     0F 17 02 56 |  if_ne	mov	arg03, local01
1f890     11 19 02 56 |  if_ne	mov	arg04, local03
1f894     6C 02 B0 5D |  if_ne	call	#__system___fmtnum
1f898     A7 F0 03 F6 | 	mov	ptra, fp
1f89c     B2 00 A0 FD | 	call	#popregs_
1f8a0                 | __system___basic_print_integer_ret
1f8a0     2D 00 64 FD | 	ret
1f8a4                 | 
1f8a4                 | __system___basic_print_unsigned
1f8a4     03 4A 05 F6 | 	mov	COUNT_, #3
1f8a8     A8 00 A0 FD | 	call	#pushregs_
1f8ac     0A 1F 02 F6 | 	mov	local01, arg02
1f8b0     0B 21 02 F6 | 	mov	local02, arg03
1f8b4     0C 23 02 F6 | 	mov	local03, arg04
1f8b8     6C 4B B0 FD | 	call	#__system___gettxfunc
1f8bc     FD 12 0A F6 | 	mov	arg01, result1 wz
1f8c0     00 FA 05 A6 |  if_e	mov	result1, #0
1f8c4     3A 20 26 54 |  if_ne	bith	local02, #58
1f8c8     10 15 02 56 |  if_ne	mov	arg02, local02
1f8cc     0F 17 02 56 |  if_ne	mov	arg03, local01
1f8d0     11 19 02 56 |  if_ne	mov	arg04, local03
1f8d4     2C 02 B0 5D |  if_ne	call	#__system___fmtnum
1f8d8     A7 F0 03 F6 | 	mov	ptra, fp
1f8dc     B2 00 A0 FD | 	call	#popregs_
1f8e0                 | __system___basic_print_unsigned_ret
1f8e0     2D 00 64 FD | 	ret
1f8e4                 | 
1f8e4                 | __system___basic_get_char
1f8e4     03 4A 05 F6 | 	mov	COUNT_, #3
1f8e8     A8 00 A0 FD | 	call	#pushregs_
1f8ec     7C 4B B0 FD | 	call	#__system___getrxfunc
1f8f0     FD 1E 0A F6 | 	mov	local01, result1 wz
1f8f4     01 FA 65 A6 |  if_e	neg	result1, #1
1f8f8     28 00 90 AD |  if_e	jmp	#LR__2760
1f8fc     0F 21 02 F6 | 	mov	local02, local01
1f900     13 1E 46 F7 | 	zerox	local01, #19
1f904     14 20 46 F0 | 	shr	local02, #20
1f908     02 20 66 F0 | 	shl	local02, #2
1f90c     ED 20 02 F1 | 	add	local02, __methods__
1f910     10 21 02 FB | 	rdlong	local02, local02
1f914     F2 22 02 F6 | 	mov	local03, objptr
1f918     0F E5 01 F6 | 	mov	objptr, local01
1f91c     2D 20 62 FD | 	call	local02
1f920     11 E5 01 F6 | 	mov	objptr, local03
1f924                 | LR__2760
1f924     A7 F0 03 F6 | 	mov	ptra, fp
1f928     B2 00 A0 FD | 	call	#popregs_
1f92c                 | __system___basic_get_char_ret
1f92c     2D 00 64 FD | 	ret
1f930                 | 
1f930                 | __system___basic_get
1f930     04 4A 05 F6 | 	mov	COUNT_, #4
1f934     A8 00 A0 FD | 	call	#pushregs_
1f938     0D 1F 02 F6 | 	mov	local01, arg05
1f93c     0F 19 02 FD | 	qmul	arg04, local01
1f940     09 21 02 F6 | 	mov	local02, arg01
1f944     0B 23 02 F6 | 	mov	local03, arg03
1f948     00 14 0E F2 | 	cmp	arg02, #0 wz
1f94c     01 14 86 51 |  if_ne	sub	arg02, #1
1f950     10 13 02 56 |  if_ne	mov	arg01, local02
1f954     00 16 06 56 |  if_ne	mov	arg03, #0
1f958     18 24 62 FD | 	getqx	local04
1f95c     BC 41 B0 5D |  if_ne	call	#__system__lseek
1f960     11 15 02 F6 | 	mov	arg02, local03
1f964     12 17 02 F6 | 	mov	arg03, local04
1f968     10 13 02 F6 | 	mov	arg01, local02
1f96c     34 41 B0 FD | 	call	#__system__read
1f970     FD 24 02 F6 | 	mov	local04, result1
1f974     01 24 56 F2 | 	cmps	local04, #1 wc
1f978     10 00 90 CD |  if_b	jmp	#LR__2770
1f97c     12 65 02 F6 | 	mov	muldiva_, local04
1f980     0F 67 02 F6 | 	mov	muldivb_, local01
1f984     BA 00 A0 FD | 	call	#divide_
1f988     33 25 02 F6 | 	mov	local04, muldivb_
1f98c                 | LR__2770
1f98c     12 FB 01 F6 | 	mov	result1, local04
1f990     A7 F0 03 F6 | 	mov	ptra, fp
1f994     B2 00 A0 FD | 	call	#popregs_
1f998                 | __system___basic_get_ret
1f998     2D 00 64 FD | 	ret
1f99c                 | 
1f99c                 | __system____lockio
1f99c     10 4B B0 FD | 	call	#__system___getiolock_0484
1f9a0     FD 12 02 F6 | 	mov	arg01, result1
1f9a4     70 F1 BF FD | 	call	#__system___lockmem
1f9a8     00 FA 05 F6 | 	mov	result1, #0
1f9ac                 | __system____lockio_ret
1f9ac     2D 00 64 FD | 	ret
1f9b0                 | 
1f9b0                 | __system____unlockio
1f9b0     FC 4A B0 FD | 	call	#__system___getiolock_0484
1f9b4     FD 00 68 FC | 	wrlong	#0, result1
1f9b8     00 FA 05 F6 | 	mov	result1, #0
1f9bc                 | __system____unlockio_ret
1f9bc     2D 00 64 FD | 	ret
1f9c0                 | 
1f9c0                 | __system___fmtchar
1f9c0     00 4A 05 F6 | 	mov	COUNT_, #0
1f9c4     A8 00 A0 FD | 	call	#pushregs_
1f9c8     10 F0 07 F1 | 	add	ptra, #16
1f9cc     04 4E 05 F1 | 	add	fp, #4
1f9d0     A7 12 62 FC | 	wrlong	arg01, fp
1f9d4     04 4E 05 F1 | 	add	fp, #4
1f9d8     A7 14 62 FC | 	wrlong	arg02, fp
1f9dc     04 4E 05 F1 | 	add	fp, #4
1f9e0     A7 16 62 FC | 	wrlong	arg03, fp
1f9e4     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
1f9e8     A7 16 62 FC | 	wrlong	arg03, fp
1f9ec     08 4E 85 F1 | 	sub	fp, #8
1f9f0     A7 12 02 FB | 	rdlong	arg01, fp
1f9f4     04 4E 05 F1 | 	add	fp, #4
1f9f8     A7 14 02 FB | 	rdlong	arg02, fp
1f9fc     04 4E 05 F1 | 	add	fp, #4
1fa00     A7 16 02 F6 | 	mov	arg03, fp
1fa04     0C 4E 85 F1 | 	sub	fp, #12
1fa08     0C 00 B0 FD | 	call	#__system___fmtstr
1fa0c     A7 F0 03 F6 | 	mov	ptra, fp
1fa10     B2 00 A0 FD | 	call	#popregs_
1fa14                 | __system___fmtchar_ret
1fa14     2D 00 64 FD | 	ret
1fa18                 | 
1fa18                 | __system___fmtstr
1fa18     09 4A 05 F6 | 	mov	COUNT_, #9
1fa1c     A8 00 A0 FD | 	call	#pushregs_
1fa20     09 1F 02 F6 | 	mov	local01, arg01
1fa24     0A 21 02 F6 | 	mov	local02, arg02
1fa28     0B 23 02 F6 | 	mov	local03, arg03
1fa2c     10 19 E2 F8 | 	getbyte	arg04, local02, #0
1fa30     11 13 02 F6 | 	mov	arg01, local03
1fa34     09 25 02 F6 | 	mov	local04, arg01
1fa38     97 06 48 FB | 	callpa	#(@LR__2781-@LR__2780)>>2,fcache_load_ptr_
1fa3c                 | LR__2780
1fa3c     12 FB C9 FA | 	rdbyte	result1, local04 wz
1fa40     01 24 06 51 |  if_ne	add	local04, #1
1fa44     F4 FF 9F 5D |  if_ne	jmp	#LR__2780
1fa48                 | LR__2781
1fa48     09 25 82 F1 | 	sub	local04, arg01
1fa4c     00 18 0E F2 | 	cmp	arg04, #0 wz
1fa50     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
1fa54     10 15 02 F6 | 	mov	arg02, local02
1fa58     12 17 02 F6 | 	mov	arg03, local04
1fa5c     0F 13 02 F6 | 	mov	arg01, local01
1fa60     02 18 06 F6 | 	mov	arg04, #2
1fa64     60 46 B0 FD | 	call	#__system___fmtpad
1fa68     FD 26 02 F6 | 	mov	local05, result1
1fa6c     00 26 56 F2 | 	cmps	local05, #0 wc
1fa70     13 FB 01 C6 |  if_b	mov	result1, local05
1fa74     80 00 90 CD |  if_b	jmp	#LR__2784
1fa78     01 24 56 F2 | 	cmps	local04, #1 wc
1fa7c     50 00 90 CD |  if_b	jmp	#LR__2783
1fa80     12 29 02 F6 | 	mov	local06, local04
1fa84                 | LR__2782
1fa84     0F 2B 02 F6 | 	mov	local07, local01
1fa88     0F 2D 02 F6 | 	mov	local08, local01
1fa8c     13 2A 46 F7 | 	zerox	local07, #19
1fa90     14 2C 46 F0 | 	shr	local08, #20
1fa94     02 2C 66 F0 | 	shl	local08, #2
1fa98     ED 2C 02 F1 | 	add	local08, __methods__
1fa9c     16 2D 02 FB | 	rdlong	local08, local08
1faa0     11 13 C2 FA | 	rdbyte	arg01, local03
1faa4     F2 2E 02 F6 | 	mov	local09, objptr
1faa8     15 E5 01 F6 | 	mov	objptr, local07
1faac     01 22 06 F1 | 	add	local03, #1
1fab0     2D 2C 62 FD | 	call	local08
1fab4     17 E5 01 F6 | 	mov	objptr, local09
1fab8     FD 2E 02 F6 | 	mov	local09, result1
1fabc     00 2E 56 F2 | 	cmps	local09, #0 wc
1fac0     17 FB 01 C6 |  if_b	mov	result1, local09
1fac4     30 00 90 CD |  if_b	jmp	#LR__2784
1fac8     17 27 02 F1 | 	add	local05, local09
1facc     ED 29 6E FB | 	djnz	local06, #LR__2782
1fad0                 | LR__2783
1fad0     10 15 02 F6 | 	mov	arg02, local02
1fad4     12 17 02 F6 | 	mov	arg03, local04
1fad8     0F 13 02 F6 | 	mov	arg01, local01
1fadc     01 18 06 F6 | 	mov	arg04, #1
1fae0     E4 45 B0 FD | 	call	#__system___fmtpad
1fae4     FD 2E 02 F6 | 	mov	local09, result1
1fae8     00 2E 56 F2 | 	cmps	local09, #0 wc
1faec     17 FB 01 C6 |  if_b	mov	result1, local09
1faf0     17 27 02 31 |  if_ae	add	local05, local09
1faf4     13 FB 01 36 |  if_ae	mov	result1, local05
1faf8                 | LR__2784
1faf8     A7 F0 03 F6 | 	mov	ptra, fp
1fafc     B2 00 A0 FD | 	call	#popregs_
1fb00                 | __system___fmtstr_ret
1fb00     2D 00 64 FD | 	ret
1fb04                 | 
1fb04                 | __system___fmtnum
1fb04     0B 4A 05 F6 | 	mov	COUNT_, #11
1fb08     A8 00 A0 FD | 	call	#pushregs_
1fb0c     09 1F 02 F6 | 	mov	local01, arg01
1fb10     0A 21 02 F6 | 	mov	local02, arg02
1fb14     0B 23 02 F6 | 	mov	local03, arg03
1fb18     0C 25 02 F6 | 	mov	local04, arg04
1fb1c     F8 27 02 F6 | 	mov	local05, ptra
1fb20     13 29 02 F6 | 	mov	local06, local05
1fb24     00 2A 06 F6 | 	mov	local07, #0
1fb28     10 2D 02 F6 | 	mov	local08, local02
1fb2c     10 2C 46 F0 | 	shr	local08, #16
1fb30     3F 2C 06 F5 | 	and	local08, #63
1fb34     10 2F E2 F8 | 	getbyte	local09, local02, #0
1fb38     10 31 02 F6 | 	mov	local10, local02
1fb3c     1A 30 46 F0 | 	shr	local10, #26
1fb40     03 30 06 F5 | 	and	local10, #3
1fb44     18 33 02 F6 | 	mov	local11, local10
1fb48     01 2C 56 F2 | 	cmps	local08, #1 wc
1fb4c     44 F0 07 F1 | 	add	ptra, #68
1fb50     01 2C 86 31 |  if_ae	sub	local08, #1
1fb54     41 2E 56 F2 | 	cmps	local09, #65 wc
1fb58     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
1fb5c     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
1fb60     03 32 0E F2 | 	cmp	local11, #3 wz
1fb64     00 32 06 A6 |  if_e	mov	local11, #0
1fb68     00 22 56 52 |  if_ne	cmps	local03, #0 wc
1fb6c     04 32 06 46 |  if_c_and_nz	mov	local11, #4
1fb70     11 23 62 46 |  if_c_and_nz	neg	local03, local03
1fb74     00 32 0E F2 | 	cmp	local11, #0 wz
1fb78     4C 00 90 AD |  if_e	jmp	#LR__2793
1fb7c     01 2A 06 F6 | 	mov	local07, #1
1fb80     17 2D 0A F2 | 	cmp	local08, local09 wz
1fb84     18 00 90 5D |  if_ne	jmp	#LR__2791
1fb88     05 2C 6E FB | 	djnz	local08, #LR__2790
1fb8c     0F 13 02 F6 | 	mov	arg01, local01
1fb90     10 15 02 F6 | 	mov	arg02, local02
1fb94     23 16 06 F6 | 	mov	arg03, #35
1fb98     24 FE BF FD | 	call	#__system___fmtchar
1fb9c     88 00 90 FD | 	jmp	#LR__2797
1fba0                 | LR__2790
1fba0                 | LR__2791
1fba0     02 32 0E F2 | 	cmp	local11, #2 wz
1fba4     14 31 02 A6 |  if_e	mov	local10, local06
1fba8     01 28 06 A1 |  if_e	add	local06, #1
1fbac     18 41 48 AC |  if_e	wrbyte	#32, local10
1fbb0     14 00 90 AD |  if_e	jmp	#LR__2792
1fbb4     04 32 0E F2 | 	cmp	local11, #4 wz
1fbb8     14 5B 48 AC |  if_e	wrbyte	#45, local06
1fbbc     01 28 06 A1 |  if_e	add	local06, #1
1fbc0     14 57 48 5C |  if_ne	wrbyte	#43, local06
1fbc4     01 28 06 51 |  if_ne	add	local06, #1
1fbc8                 | LR__2792
1fbc8                 | LR__2793
1fbc8     14 13 02 F6 | 	mov	arg01, local06
1fbcc     11 15 02 F6 | 	mov	arg02, local03
1fbd0     12 17 02 F6 | 	mov	arg03, local04
1fbd4     16 19 02 F6 | 	mov	arg04, local08
1fbd8     00 1A 06 F6 | 	mov	arg05, #0
1fbdc     1D 20 2E F4 | 	testbn	local02, #29 wz
1fbe0     01 1A 06 56 |  if_ne	mov	arg05, #1
1fbe4     A8 45 B0 FD | 	call	#__system___uitoa
1fbe8     FD 2A 02 F1 | 	add	local07, result1
1fbec     17 2B 5A F2 | 	cmps	local07, local09 wcz
1fbf0     24 00 90 ED |  if_be	jmp	#LR__2796
1fbf4     97 0E 48 FB | 	callpa	#(@LR__2795-@LR__2794)>>2,fcache_load_ptr_
1fbf8                 | LR__2794
1fbf8     17 31 02 F6 | 	mov	local10, local09
1fbfc     01 30 56 F2 | 	cmps	local10, #1 wc
1fc00     01 2E 86 F1 | 	sub	local09, #1
1fc04     14 31 02 36 |  if_ae	mov	local10, local06
1fc08     01 28 06 31 |  if_ae	add	local06, #1
1fc0c     18 47 48 3C |  if_ae	wrbyte	#35, local10
1fc10     E4 FF 9F 3D |  if_ae	jmp	#LR__2794
1fc14                 | LR__2795
1fc14     14 01 48 FC | 	wrbyte	#0, local06
1fc18                 | LR__2796
1fc18     0F 13 02 F6 | 	mov	arg01, local01
1fc1c     10 15 02 F6 | 	mov	arg02, local02
1fc20     13 17 02 F6 | 	mov	arg03, local05
1fc24     F0 FD BF FD | 	call	#__system___fmtstr
1fc28                 | LR__2797
1fc28     A7 F0 03 F6 | 	mov	ptra, fp
1fc2c     B2 00 A0 FD | 	call	#popregs_
1fc30                 | __system___fmtnum_ret
1fc30     2D 00 64 FD | 	ret
1fc34                 | 
1fc34                 | __system___fmtfloat
1fc34     10 4A 05 F6 | 	mov	COUNT_, #16
1fc38     A8 00 A0 FD | 	call	#pushregs_
1fc3c     24 F1 07 F1 | 	add	ptra, #292
1fc40     04 4E 05 F1 | 	add	fp, #4
1fc44     A7 12 62 FC | 	wrlong	arg01, fp
1fc48     04 4E 05 F1 | 	add	fp, #4
1fc4c     A7 14 62 FC | 	wrlong	arg02, fp
1fc50     04 4E 05 F1 | 	add	fp, #4
1fc54     A7 16 62 FC | 	wrlong	arg03, fp
1fc58     04 4E 05 F1 | 	add	fp, #4
1fc5c     A7 18 62 FC | 	wrlong	arg04, fp
1fc60     0C 4E 05 F1 | 	add	fp, #12
1fc64     A7 14 68 FC | 	wrlong	#10, fp
1fc68     08 4E 05 F1 | 	add	fp, #8
1fc6c     A7 00 68 FC | 	wrlong	#0, fp
1fc70     08 4E 05 F1 | 	add	fp, #8
1fc74     A7 00 68 FC | 	wrlong	#0, fp
1fc78     08 4E 05 F1 | 	add	fp, #8
1fc7c     A7 00 68 FC | 	wrlong	#0, fp
1fc80     04 4E 05 F1 | 	add	fp, #4
1fc84     A7 04 68 FC | 	wrlong	#2, fp
1fc88     04 4E 05 F1 | 	add	fp, #4
1fc8c     A7 00 68 FC | 	wrlong	#0, fp
1fc90     04 4E 05 F1 | 	add	fp, #4
1fc94     A7 00 68 FC | 	wrlong	#0, fp
1fc98     04 4E 05 F1 | 	add	fp, #4
1fc9c     A7 00 68 FC | 	wrlong	#0, fp
1fca0     04 4E 05 F1 | 	add	fp, #4
1fca4     A7 00 68 FC | 	wrlong	#0, fp
1fca8     18 4E 05 F1 | 	add	fp, #24
1fcac     A7 00 68 FC | 	wrlong	#0, fp
1fcb0     68 4E 05 F1 | 	add	fp, #104
1fcb4     A7 1E 02 F6 | 	mov	local01, fp
1fcb8     08 4E 85 F1 | 	sub	fp, #8
1fcbc     A7 1E 62 FC | 	wrlong	local01, fp
1fcc0     04 4E 05 F1 | 	add	fp, #4
1fcc4     A7 1E 62 FC | 	wrlong	local01, fp
1fcc8     BC 4E 85 F1 | 	sub	fp, #188
1fccc     A7 1E 02 FB | 	rdlong	local01, fp
1fcd0     10 1E 46 F0 | 	shr	local01, #16
1fcd4     3F 1E 06 F5 | 	and	local01, #63
1fcd8     B0 4E 05 F1 | 	add	fp, #176
1fcdc     A7 1E 62 FC | 	wrlong	local01, fp
1fce0     B0 4E 85 F1 | 	sub	fp, #176
1fce4     A7 1E 02 FB | 	rdlong	local01, fp
1fce8     1C 1E 46 F0 | 	shr	local01, #28
1fcec     01 1E 06 F5 | 	and	local01, #1
1fcf0     08 4F 05 F1 | 	add	fp, #264
1fcf4     A7 1E 62 FC | 	wrlong	local01, fp
1fcf8     58 4E 85 F1 | 	sub	fp, #88
1fcfc     A7 1E 0A FB | 	rdlong	local01, fp wz
1fd00     B8 4E 85 F1 | 	sub	fp, #184
1fd04     3C 00 90 5D |  if_ne	jmp	#LR__2801
1fd08     10 4E 05 F1 | 	add	fp, #16
1fd0c     A7 1E 02 FB | 	rdlong	local01, fp
1fd10     10 4E 85 F1 | 	sub	fp, #16
1fd14     61 1E 0E F2 | 	cmp	local01, #97 wz
1fd18     18 00 90 5D |  if_ne	jmp	#LR__2800
1fd1c     B8 4E 05 F1 | 	add	fp, #184
1fd20     A7 1A 68 FC | 	wrlong	#13, fp
1fd24     84 4E 85 F1 | 	sub	fp, #132
1fd28     A7 02 68 FC | 	wrlong	#1, fp
1fd2c     34 4E 85 F1 | 	sub	fp, #52
1fd30     24 00 90 FD | 	jmp	#LR__2802
1fd34                 | LR__2800
1fd34     B8 4E 05 F1 | 	add	fp, #184
1fd38     A7 0C 68 FC | 	wrlong	#6, fp
1fd3c     B8 4E 85 F1 | 	sub	fp, #184
1fd40     14 00 90 FD | 	jmp	#LR__2802
1fd44                 | LR__2801
1fd44     B8 4E 05 F1 | 	add	fp, #184
1fd48     A7 1E 02 FB | 	rdlong	local01, fp
1fd4c     01 1E 86 F1 | 	sub	local01, #1
1fd50     A7 1E 62 FC | 	wrlong	local01, fp
1fd54     B8 4E 85 F1 | 	sub	fp, #184
1fd58                 | LR__2802
1fd58     08 4E 05 F1 | 	add	fp, #8
1fd5c     A7 1E 02 FB | 	rdlong	local01, fp
1fd60     16 1E 46 F0 | 	shr	local01, #22
1fd64     03 1E 06 F5 | 	and	local01, #3
1fd68     04 4F 05 F1 | 	add	fp, #260
1fd6c     A7 1E 62 FC | 	wrlong	local01, fp
1fd70     04 4F 85 F1 | 	sub	fp, #260
1fd74     A7 1E 02 FB | 	rdlong	local01, fp
1fd78     1D 1E 46 F0 | 	shr	local01, #29
1fd7c     01 1E 06 F5 | 	and	local01, #1
1fd80     B4 4E 05 F1 | 	add	fp, #180
1fd84     A7 1E 62 FC | 	wrlong	local01, fp
1fd88     B4 4E 85 F1 | 	sub	fp, #180
1fd8c     A7 1E 02 FB | 	rdlong	local01, fp
1fd90     0F 1F EA F8 | 	getbyte	local01, local01, #1
1fd94     60 4E 05 F1 | 	add	fp, #96
1fd98     A7 1E 62 FC | 	wrlong	local01, fp
1fd9c     60 4E 85 F1 | 	sub	fp, #96
1fda0     A7 1E 02 FB | 	rdlong	local01, fp
1fda4     0F 1F E2 F8 | 	getbyte	local01, local01, #0
1fda8     64 4E 05 F1 | 	add	fp, #100
1fdac     A7 1E 62 FC | 	wrlong	local01, fp
1fdb0     00 1E 06 F6 | 	mov	local01, #0
1fdb4     5C 4E 85 F1 | 	sub	fp, #92
1fdb8     A7 1A 02 FB | 	rdlong	arg05, fp
1fdbc     65 1A 0E F2 | 	cmp	arg05, #101 wz
1fdc0     01 1E 06 A6 |  if_e	mov	local01, #1
1fdc4     14 4E 05 F1 | 	add	fp, #20
1fdc8     A7 1E 62 FC | 	wrlong	local01, fp
1fdcc     98 4E 05 F1 | 	add	fp, #152
1fdd0     A7 20 0A FB | 	rdlong	local02, fp wz
1fdd4     45 1E 06 56 |  if_ne	mov	local01, #69
1fdd8     65 1E 06 A6 |  if_e	mov	local01, #101
1fddc     8C 4E 85 F1 | 	sub	fp, #140
1fde0     A7 1E 62 FC | 	wrlong	local01, fp
1fde4     20 4E 85 F1 | 	sub	fp, #32
1fde8     A7 1E 02 FB | 	rdlong	local01, fp
1fdec     10 4E 85 F1 | 	sub	fp, #16
1fdf0     61 1E 0E F2 | 	cmp	local01, #97 wz
1fdf4     4C 00 90 5D |  if_ne	jmp	#LR__2803
1fdf8     24 4E 05 F1 | 	add	fp, #36
1fdfc     A7 02 68 FC | 	wrlong	#1, fp
1fe00     98 4E 05 F1 | 	add	fp, #152
1fe04     A7 20 0A FB | 	rdlong	local02, fp wz
1fe08     50 1E 06 56 |  if_ne	mov	local01, #80
1fe0c     70 1E 06 A6 |  if_e	mov	local01, #112
1fe10     8C 4E 85 F1 | 	sub	fp, #140
1fe14     A7 1E 62 FC | 	wrlong	local01, fp
1fe18     14 4E 85 F1 | 	sub	fp, #20
1fe1c     A7 04 68 FC | 	wrlong	#2, fp
1fe20     1C 4E 05 F1 | 	add	fp, #28
1fe24     A7 02 68 FC | 	wrlong	#1, fp
1fe28     84 4E 05 F1 | 	add	fp, #132
1fe2c     A7 20 0A FB | 	rdlong	local02, fp wz
1fe30     58 1E 06 56 |  if_ne	mov	local01, #88
1fe34     78 1E 06 A6 |  if_e	mov	local01, #120
1fe38     7C 4E 85 F1 | 	sub	fp, #124
1fe3c     A7 1E 62 FC | 	wrlong	local01, fp
1fe40     40 4E 85 F1 | 	sub	fp, #64
1fe44                 | LR__2803
1fe44     10 4E 05 F1 | 	add	fp, #16
1fe48     A7 1E 02 FB | 	rdlong	local01, fp
1fe4c     10 4E 85 F1 | 	sub	fp, #16
1fe50     23 1E 0E F2 | 	cmp	local01, #35 wz
1fe54     3C 00 90 5D |  if_ne	jmp	#LR__2806
1fe58     48 4E 05 F1 | 	add	fp, #72
1fe5c     A7 02 68 FC | 	wrlong	#1, fp
1fe60     C8 4E 05 F1 | 	add	fp, #200
1fe64     A7 1E 0A FB | 	rdlong	local01, fp wz
1fe68     10 4F 85 F1 | 	sub	fp, #272
1fe6c     18 00 90 AD |  if_e	jmp	#LR__2804
1fe70     10 4E 05 F1 | 	add	fp, #16
1fe74     A7 CC 68 FC | 	wrlong	#102, fp
1fe78     00 4F 05 F1 | 	add	fp, #256
1fe7c     A7 00 68 FC | 	wrlong	#0, fp
1fe80     10 4F 85 F1 | 	sub	fp, #272
1fe84     0C 00 90 FD | 	jmp	#LR__2805
1fe88                 | LR__2804
1fe88     10 4F 05 F1 | 	add	fp, #272
1fe8c     A7 02 68 FC | 	wrlong	#1, fp
1fe90     10 4F 85 F1 | 	sub	fp, #272
1fe94                 | LR__2805
1fe94                 | LR__2806
1fe94     08 4E 05 F1 | 	add	fp, #8
1fe98     A7 1E 02 FB | 	rdlong	local01, fp
1fe9c     1A 1E 46 F0 | 	shr	local01, #26
1fea0     03 1E 06 F5 | 	and	local01, #3
1fea4     5C 4E 05 F1 | 	add	fp, #92
1fea8     A7 1E 62 FC | 	wrlong	local01, fp
1feac     58 4E 85 F1 | 	sub	fp, #88
1feb0     A7 FA 01 FB | 	rdlong	result1, fp
1feb4     0C 4E 85 F1 | 	sub	fp, #12
1feb8     1F FA 4D F0 | 	shr	result1, #31 wz
1febc     20 00 90 AD |  if_e	jmp	#LR__2807
1fec0     2C 4E 05 F1 | 	add	fp, #44
1fec4     A7 5A 68 FC | 	wrlong	#45, fp
1fec8     20 4E 85 F1 | 	sub	fp, #32
1fecc     A7 FA 01 FB | 	rdlong	result1, fp
1fed0     1F FA E5 F4 | 	bitnot	result1, #31
1fed4     A7 FA 61 FC | 	wrlong	result1, fp
1fed8     0C 4E 85 F1 | 	sub	fp, #12
1fedc     3C 00 90 FD | 	jmp	#LR__2809
1fee0                 | LR__2807
1fee0     64 4E 05 F1 | 	add	fp, #100
1fee4     A7 1E 02 FB | 	rdlong	local01, fp
1fee8     64 4E 85 F1 | 	sub	fp, #100
1feec     01 1E 0E F2 | 	cmp	local01, #1 wz
1fef0     2C 4E 05 A1 |  if_e	add	fp, #44
1fef4     A7 56 68 AC |  if_e	wrlong	#43, fp
1fef8     2C 4E 85 A1 |  if_e	sub	fp, #44
1fefc     1C 00 90 AD |  if_e	jmp	#LR__2808
1ff00     64 4E 05 F1 | 	add	fp, #100
1ff04     A7 1E 02 FB | 	rdlong	local01, fp
1ff08     64 4E 85 F1 | 	sub	fp, #100
1ff0c     02 1E 0E F2 | 	cmp	local01, #2 wz
1ff10     2C 4E 05 A1 |  if_e	add	fp, #44
1ff14     A7 40 68 AC |  if_e	wrlong	#32, fp
1ff18     2C 4E 85 A1 |  if_e	sub	fp, #44
1ff1c                 | LR__2808
1ff1c                 | LR__2809
1ff1c     08 4E 05 F1 | 	add	fp, #8
1ff20     A7 1E 02 FB | 	rdlong	local01, fp
1ff24     18 1E 46 F0 | 	shr	local01, #24
1ff28     03 1E 06 F5 | 	and	local01, #3
1ff2c     3C 4E 05 F1 | 	add	fp, #60
1ff30     A7 1E 62 FC | 	wrlong	local01, fp
1ff34     00 1E 06 F6 | 	mov	local01, #0
1ff38     18 4E 85 F1 | 	sub	fp, #24
1ff3c     A7 22 0A FB | 	rdlong	local03, fp wz
1ff40     2C 4E 85 F1 | 	sub	fp, #44
1ff44     18 00 90 5D |  if_ne	jmp	#LR__2810
1ff48     1C 4E 05 F1 | 	add	fp, #28
1ff4c     A7 24 02 FB | 	rdlong	local04, fp
1ff50     1C 4E 85 F1 | 	sub	fp, #28
1ff54     12 27 02 F6 | 	mov	local05, local04
1ff58     0A 26 0E F2 | 	cmp	local05, #10 wz
1ff5c     04 00 90 AD |  if_e	jmp	#LR__2811
1ff60                 | LR__2810
1ff60     01 1E 66 F5 | 	xor	local01, #1
1ff64                 | LR__2811
1ff64     3C 4E 05 F1 | 	add	fp, #60
1ff68     A7 1E 62 FC | 	wrlong	local01, fp
1ff6c     3C 4E 85 F1 | 	sub	fp, #60
1ff70     00 1E 0E F2 | 	cmp	local01, #0 wz
1ff74     0C 01 90 AD |  if_e	jmp	#LR__2813
1ff78     44 4E 05 F1 | 	add	fp, #68
1ff7c     A7 26 02 FB | 	rdlong	local05, fp
1ff80     44 4E 85 F1 | 	sub	fp, #68
1ff84     13 23 02 F6 | 	mov	local03, local05
1ff88     02 22 0E F2 | 	cmp	local03, #2 wz
1ff8c     F4 00 90 5D |  if_ne	jmp	#LR__2813
1ff90     0C 4F 05 F1 | 	add	fp, #268
1ff94     A7 28 02 FB | 	rdlong	local06, fp
1ff98     0C 4F 85 F1 | 	sub	fp, #268
1ff9c     14 25 02 F6 | 	mov	local04, local06
1ffa0     02 24 0E F2 | 	cmp	local04, #2 wz
1ffa4     DC 00 90 AD |  if_e	jmp	#LR__2813
1ffa8     C0 4E 05 F1 | 	add	fp, #192
1ffac     A7 12 02 FB | 	rdlong	arg01, fp
1ffb0     94 4E 85 F1 | 	sub	fp, #148
1ffb4     A7 14 02 FB | 	rdlong	arg02, fp
1ffb8     14 4E 05 F1 | 	add	fp, #20
1ffbc     A7 16 02 FB | 	rdlong	arg03, fp
1ffc0     40 4E 85 F1 | 	sub	fp, #64
1ffc4     30 44 B0 FD | 	call	#__system__emitsign_0444
1ffc8     14 4F 05 F1 | 	add	fp, #276
1ffcc     A7 FA 61 FC | 	wrlong	result1, fp
1ffd0     14 4F 85 F1 | 	sub	fp, #276
1ffd4     00 FA 55 F2 | 	cmps	result1, #0 wc
1ffd8     14 4F 05 C1 |  if_b	add	fp, #276
1ffdc     A7 FA 01 CB |  if_b	rdlong	result1, fp
1ffe0     14 4F 85 C1 |  if_b	sub	fp, #276
1ffe4     6C 0B 90 CD |  if_b	jmp	#LR__2863
1ffe8     C0 4E 05 F1 | 	add	fp, #192
1ffec     A7 1E 02 FB | 	rdlong	local01, fp
1fff0     54 4E 05 F1 | 	add	fp, #84
1fff4     A7 26 02 FB | 	rdlong	local05, fp
1fff8     13 23 02 F6 | 	mov	local03, local05
1fffc     13 1F 02 F1 | 	add	local01, local05
20000     54 4E 85 F1 | 	sub	fp, #84
20004     A7 1E 62 FC | 	wrlong	local01, fp
20008     58 4E 85 F1 | 	sub	fp, #88
2000c     A7 1E 0A FB | 	rdlong	local01, fp wz
20010     68 4E 85 F1 | 	sub	fp, #104
20014     60 00 90 AD |  if_e	jmp	#LR__2812
20018     68 4E 05 F1 | 	add	fp, #104
2001c     A7 1E 02 FB | 	rdlong	local01, fp
20020     AC 4E 05 F1 | 	add	fp, #172
20024     A7 22 02 FB | 	rdlong	local03, fp
20028     11 1F 82 F1 | 	sub	local01, local03
2002c     AC 4E 85 F1 | 	sub	fp, #172
20030     A7 1E 62 FC | 	wrlong	local01, fp
20034     68 4E 85 F1 | 	sub	fp, #104
20038     00 1E 56 F2 | 	cmps	local01, #0 wc
2003c     68 4E 05 C1 |  if_b	add	fp, #104
20040     A7 00 68 CC |  if_b	wrlong	#0, fp
20044     68 4E 85 C1 |  if_b	sub	fp, #104
20048     08 4E 05 F1 | 	add	fp, #8
2004c     A7 1E 02 FB | 	rdlong	local01, fp
20050     E8 1E 06 F4 | 	bitl	local01, #232
20054     A7 1E 62 FC | 	wrlong	local01, fp
20058     60 4E 05 F1 | 	add	fp, #96
2005c     A7 26 02 FB | 	rdlong	local05, fp
20060     13 23 02 F6 | 	mov	local03, local05
20064     08 22 66 F0 | 	shl	local03, #8
20068     11 1F 42 F5 | 	or	local01, local03
2006c     60 4E 85 F1 | 	sub	fp, #96
20070     A7 1E 62 FC | 	wrlong	local01, fp
20074     08 4E 85 F1 | 	sub	fp, #8
20078                 | LR__2812
20078     3C 4E 05 F1 | 	add	fp, #60
2007c     A7 00 68 FC | 	wrlong	#0, fp
20080     3C 4E 85 F1 | 	sub	fp, #60
20084                 | LR__2813
20084     0C 4E 05 F1 | 	add	fp, #12
20088     A7 12 02 FB | 	rdlong	arg01, fp
2008c     0C 4E 85 F1 | 	sub	fp, #12
20090     04 1F B0 FD | 	call	#__system____builtin_ilogb
20094     FF FF 3F FF 
20098     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
2009c     50 00 90 5D |  if_ne	jmp	#LR__2815
200a0     2C 4E 05 F1 | 	add	fp, #44
200a4     A7 1E 0A FB | 	rdlong	local01, fp wz
200a8     2C 4E 85 F1 | 	sub	fp, #44
200ac     24 00 90 AD |  if_e	jmp	#LR__2814
200b0     C0 4E 05 F1 | 	add	fp, #192
200b4     A7 20 02 FB | 	rdlong	local02, fp
200b8     10 23 02 F6 | 	mov	local03, local02
200bc     01 22 06 F1 | 	add	local03, #1
200c0     A7 22 62 FC | 	wrlong	local03, fp
200c4     94 4E 85 F1 | 	sub	fp, #148
200c8     A7 24 02 FB | 	rdlong	local04, fp
200cc     2C 4E 85 F1 | 	sub	fp, #44
200d0     10 25 42 FC | 	wrbyte	local04, local02
200d4                 | LR__2814
200d4     C0 4E 05 F1 | 	add	fp, #192
200d8     A7 12 02 FB | 	rdlong	arg01, fp
200dc     C0 4E 85 F1 | 	sub	fp, #192
200e0     70 01 00 FF 
200e4     CE 14 06 F6 | 	mov	arg02, ##@LR__4751
200e8     E0 E9 BF FD | 	call	#__system____builtin_strcpy
200ec     A4 08 90 FD | 	jmp	#LR__2851
200f0                 | LR__2815
200f0     0C 4E 05 F1 | 	add	fp, #12
200f4     A7 20 02 FB | 	rdlong	local02, fp
200f8     0C 4E 85 F1 | 	sub	fp, #12
200fc     10 13 02 F6 | 	mov	arg01, local02
20100     94 1E B0 FD | 	call	#__system____builtin_ilogb
20104     00 00 40 FF 
20108     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
2010c     50 00 90 5D |  if_ne	jmp	#LR__2817
20110     2C 4E 05 F1 | 	add	fp, #44
20114     A7 1E 0A FB | 	rdlong	local01, fp wz
20118     2C 4E 85 F1 | 	sub	fp, #44
2011c     24 00 90 AD |  if_e	jmp	#LR__2816
20120     C0 4E 05 F1 | 	add	fp, #192
20124     A7 20 02 FB | 	rdlong	local02, fp
20128     10 23 02 F6 | 	mov	local03, local02
2012c     01 22 06 F1 | 	add	local03, #1
20130     A7 22 62 FC | 	wrlong	local03, fp
20134     94 4E 85 F1 | 	sub	fp, #148
20138     A7 24 02 FB | 	rdlong	local04, fp
2013c     2C 4E 85 F1 | 	sub	fp, #44
20140     10 25 42 FC | 	wrbyte	local04, local02
20144                 | LR__2816
20144     C0 4E 05 F1 | 	add	fp, #192
20148     A7 12 02 FB | 	rdlong	arg01, fp
2014c     C0 4E 85 F1 | 	sub	fp, #192
20150     70 01 00 FF 
20154     D2 14 06 F6 | 	mov	arg02, ##@LR__4752
20158     70 E9 BF FD | 	call	#__system____builtin_strcpy
2015c     34 08 90 FD | 	jmp	#LR__2851
20160                 | LR__2817
20160     10 4E 05 F1 | 	add	fp, #16
20164     A7 1E 02 FB | 	rdlong	local01, fp
20168     10 4E 85 F1 | 	sub	fp, #16
2016c     67 1E 0E F2 | 	cmp	local01, #103 wz
20170     10 4E 05 51 |  if_ne	add	fp, #16
20174     A7 22 02 5B |  if_ne	rdlong	local03, fp
20178     10 4E 85 51 |  if_ne	sub	fp, #16
2017c     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
20180     94 01 90 5D |  if_ne	jmp	#LR__2822
20184     0C 4E 05 F1 | 	add	fp, #12
20188     A7 12 02 FB | 	rdlong	arg01, fp
2018c     08 4E 05 F1 | 	add	fp, #8
20190     A7 14 02 F6 | 	mov	arg02, fp
20194     0C 4E 05 F1 | 	add	fp, #12
20198     A7 16 02 F6 | 	mov	arg03, fp
2019c     98 4E 05 F1 | 	add	fp, #152
201a0     A7 18 02 FB | 	rdlong	arg04, fp
201a4     9C 4E 85 F1 | 	sub	fp, #156
201a8     A7 1A 02 FB | 	rdlong	arg05, fp
201ac     1C 4E 85 F1 | 	sub	fp, #28
201b0     50 40 B0 FD | 	call	#__system__disassemble_0442
201b4     10 4E 05 F1 | 	add	fp, #16
201b8     A7 1E 02 FB | 	rdlong	local01, fp
201bc     10 4E 85 F1 | 	sub	fp, #16
201c0     23 1E 0E F2 | 	cmp	local01, #35 wz
201c4     A0 00 90 5D |  if_ne	jmp	#LR__2819
201c8     20 4E 05 F1 | 	add	fp, #32
201cc     A7 1E 02 FB | 	rdlong	local01, fp
201d0     98 4E 05 F1 | 	add	fp, #152
201d4     A7 22 02 FB | 	rdlong	local03, fp
201d8     B8 4E 85 F1 | 	sub	fp, #184
201dc     11 1F 5A F2 | 	cmps	local01, local03 wcz
201e0     24 4E 05 11 |  if_a	add	fp, #36
201e4     A7 02 68 1C |  if_a	wrlong	#1, fp
201e8     24 4E 85 11 |  if_a	sub	fp, #36
201ec     A4 01 90 1D |  if_a	jmp	#LR__2825
201f0     20 4E 05 F1 | 	add	fp, #32
201f4     A7 1E 02 FB | 	rdlong	local01, fp
201f8     20 4E 85 F1 | 	sub	fp, #32
201fc     00 1E 56 F2 | 	cmps	local01, #0 wc
20200     2C 00 90 3D |  if_ae	jmp	#LR__2818
20204     B8 4E 05 F1 | 	add	fp, #184
20208     A7 1E 02 FB | 	rdlong	local01, fp
2020c     0F 1F 62 F6 | 	neg	local01, local01
20210     98 4E 85 F1 | 	sub	fp, #152
20214     A7 22 02 FB | 	rdlong	local03, fp
20218     20 4E 85 F1 | 	sub	fp, #32
2021c     0F 23 5A F2 | 	cmps	local03, local01 wcz
20220     24 4E 05 E1 |  if_be	add	fp, #36
20224     A7 02 68 EC |  if_be	wrlong	#1, fp
20228     24 4E 85 E1 |  if_be	sub	fp, #36
2022c     64 01 90 FD | 	jmp	#LR__2825
20230                 | LR__2818
20230     20 4E 05 F1 | 	add	fp, #32
20234     A7 1E 02 FB | 	rdlong	local01, fp
20238     20 4E 85 F1 | 	sub	fp, #32
2023c     01 1E 56 F2 | 	cmps	local01, #1 wc
20240     50 01 90 CD |  if_b	jmp	#LR__2825
20244     B8 4E 05 F1 | 	add	fp, #184
20248     A7 1E 02 FB | 	rdlong	local01, fp
2024c     98 4E 85 F1 | 	sub	fp, #152
20250     A7 22 02 FB | 	rdlong	local03, fp
20254     11 1F 82 F1 | 	sub	local01, local03
20258     98 4E 05 F1 | 	add	fp, #152
2025c     A7 1E 62 FC | 	wrlong	local01, fp
20260     B8 4E 85 F1 | 	sub	fp, #184
20264     2C 01 90 FD | 	jmp	#LR__2825
20268                 | LR__2819
20268     00 1E 06 F6 | 	mov	local01, #0
2026c     08 4E 05 F1 | 	add	fp, #8
20270     A7 20 02 FB | 	rdlong	local02, fp
20274     1C 20 46 F0 | 	shr	local02, #28
20278     01 20 0E F5 | 	and	local02, #1 wz
2027c     01 1E 06 A6 |  if_e	mov	local01, #1
20280     2C 4E 05 F1 | 	add	fp, #44
20284     A7 1E 62 FC | 	wrlong	local01, fp
20288     14 4E 85 F1 | 	sub	fp, #20
2028c     A7 1E 02 FB | 	rdlong	local01, fp
20290     98 4E 05 F1 | 	add	fp, #152
20294     A7 22 02 FB | 	rdlong	local03, fp
20298     B8 4E 85 F1 | 	sub	fp, #184
2029c     11 1F 52 F2 | 	cmps	local01, local03 wc
202a0     18 00 90 3D |  if_ae	jmp	#LR__2820
202a4     20 4E 05 F1 | 	add	fp, #32
202a8     A7 24 02 FB | 	rdlong	local04, fp
202ac     20 4E 85 F1 | 	sub	fp, #32
202b0     FF FF 7F FF 
202b4     FC 25 56 F2 | 	cmps	local04, ##-4 wc
202b8     10 00 90 3D |  if_ae	jmp	#LR__2821
202bc                 | LR__2820
202bc     24 4E 05 F1 | 	add	fp, #36
202c0     A7 02 68 FC | 	wrlong	#1, fp
202c4     24 4E 85 F1 | 	sub	fp, #36
202c8     C8 00 90 FD | 	jmp	#LR__2825
202cc                 | LR__2821
202cc     B8 4E 05 F1 | 	add	fp, #184
202d0     A7 24 02 FB | 	rdlong	local04, fp
202d4     98 4E 85 F1 | 	sub	fp, #152
202d8     A7 22 02 FB | 	rdlong	local03, fp
202dc     11 25 82 F1 | 	sub	local04, local03
202e0     98 4E 05 F1 | 	add	fp, #152
202e4     A7 24 62 FC | 	wrlong	local04, fp
202e8     AC 4E 85 F1 | 	sub	fp, #172
202ec     A7 12 02 FB | 	rdlong	arg01, fp
202f0     08 4E 05 F1 | 	add	fp, #8
202f4     A7 14 02 F6 | 	mov	arg02, fp
202f8     0C 4E 05 F1 | 	add	fp, #12
202fc     A7 16 02 F6 | 	mov	arg03, fp
20300     12 19 62 F6 | 	neg	arg04, local04
20304     04 4E 85 F1 | 	sub	fp, #4
20308     A7 1A 02 FB | 	rdlong	arg05, fp
2030c     1C 4E 85 F1 | 	sub	fp, #28
20310     F0 3E B0 FD | 	call	#__system__disassemble_0442
20314     7C 00 90 FD | 	jmp	#LR__2825
20318                 | LR__2822
20318     24 4E 05 F1 | 	add	fp, #36
2031c     A7 1E 0A FB | 	rdlong	local01, fp wz
20320     24 4E 85 F1 | 	sub	fp, #36
20324     34 00 90 AD |  if_e	jmp	#LR__2823
20328     0C 4E 05 F1 | 	add	fp, #12
2032c     A7 12 02 FB | 	rdlong	arg01, fp
20330     08 4E 05 F1 | 	add	fp, #8
20334     A7 14 02 F6 | 	mov	arg02, fp
20338     0C 4E 05 F1 | 	add	fp, #12
2033c     A7 16 02 F6 | 	mov	arg03, fp
20340     98 4E 05 F1 | 	add	fp, #152
20344     A7 18 02 FB | 	rdlong	arg04, fp
20348     9C 4E 85 F1 | 	sub	fp, #156
2034c     A7 1A 02 FB | 	rdlong	arg05, fp
20350     1C 4E 85 F1 | 	sub	fp, #28
20354     AC 3E B0 FD | 	call	#__system__disassemble_0442
20358     38 00 90 FD | 	jmp	#LR__2824
2035c                 | LR__2823
2035c     0C 4E 05 F1 | 	add	fp, #12
20360     A7 12 02 FB | 	rdlong	arg01, fp
20364     08 4E 05 F1 | 	add	fp, #8
20368     A7 14 02 F6 | 	mov	arg02, fp
2036c     0C 4E 05 F1 | 	add	fp, #12
20370     A7 16 02 F6 | 	mov	arg03, fp
20374     98 4E 05 F1 | 	add	fp, #152
20378     A7 24 02 FB | 	rdlong	local04, fp
2037c     01 24 06 F1 | 	add	local04, #1
20380     12 19 62 F6 | 	neg	arg04, local04
20384     9C 4E 85 F1 | 	sub	fp, #156
20388     A7 1A 02 FB | 	rdlong	arg05, fp
2038c     1C 4E 85 F1 | 	sub	fp, #28
20390     70 3E B0 FD | 	call	#__system__disassemble_0442
20394                 | LR__2824
20394                 | LR__2825
20394     1C 4E 05 F1 | 	add	fp, #28
20398     A7 1E 02 FB | 	rdlong	local01, fp
2039c     1C 4E 85 F1 | 	sub	fp, #28
203a0     02 1E 0E F2 | 	cmp	local01, #2 wz
203a4     4C 00 90 5D |  if_ne	jmp	#LR__2828
203a8     1C 4E 05 F1 | 	add	fp, #28
203ac     A7 20 68 FC | 	wrlong	#16, fp
203b0     1C 4E 85 F1 | 	sub	fp, #28
203b4                 | LR__2826
203b4     14 4E 05 F1 | 	add	fp, #20
203b8     A7 1E 0A FB | 	rdlong	local01, fp wz
203bc     14 4E 85 F1 | 	sub	fp, #20
203c0     30 00 90 AD |  if_e	jmp	#LR__2827
203c4     14 4E 05 F1 | 	add	fp, #20
203c8     A7 22 02 FB | 	rdlong	local03, fp
203cc     14 4E 85 F1 | 	sub	fp, #20
203d0     00 80 00 FF 
203d4     00 22 16 F2 | 	cmp	local03, ##16777216 wc
203d8     18 00 90 3D |  if_ae	jmp	#LR__2827
203dc     14 4E 05 F1 | 	add	fp, #20
203e0     A7 1E 02 FB | 	rdlong	local01, fp
203e4     01 1E 66 F0 | 	shl	local01, #1
203e8     A7 1E 62 FC | 	wrlong	local01, fp
203ec     14 4E 85 F1 | 	sub	fp, #20
203f0     C0 FF 9F FD | 	jmp	#LR__2826
203f4                 | LR__2827
203f4                 | LR__2828
203f4     70 4E 05 F1 | 	add	fp, #112
203f8     A7 12 02 F6 | 	mov	arg01, fp
203fc     5C 4E 85 F1 | 	sub	fp, #92
20400     A7 14 02 FB | 	rdlong	arg02, fp
20404     08 4E 05 F1 | 	add	fp, #8
20408     A7 16 02 FB | 	rdlong	arg03, fp
2040c     A0 4E 05 F1 | 	add	fp, #160
20410     A7 1A 02 FB | 	rdlong	arg05, fp
20414     BC 4E 85 F1 | 	sub	fp, #188
20418     01 18 06 F6 | 	mov	arg04, #1
2041c     70 3D B0 FD | 	call	#__system___uitoa
20420     58 4E 05 F1 | 	add	fp, #88
20424     A7 FA 61 FC | 	wrlong	result1, fp
20428     38 4E 85 F1 | 	sub	fp, #56
2042c     A7 1E 02 FB | 	rdlong	local01, fp
20430     20 4E 85 F1 | 	sub	fp, #32
20434     00 1E 56 F2 | 	cmps	local01, #0 wc
20438     50 00 90 3D |  if_ae	jmp	#LR__2829
2043c     60 4E 05 F1 | 	add	fp, #96
20440     A7 5A 68 FC | 	wrlong	#45, fp
20444     50 4E 05 F1 | 	add	fp, #80
20448     A7 12 02 F6 | 	mov	arg01, fp
2044c     90 4E 85 F1 | 	sub	fp, #144
20450     A7 22 02 FB | 	rdlong	local03, fp
20454     11 15 62 F6 | 	neg	arg02, local03
20458     18 4E 05 F1 | 	add	fp, #24
2045c     A7 18 02 FB | 	rdlong	arg04, fp
20460     84 4E 05 F1 | 	add	fp, #132
20464     A7 28 02 FB | 	rdlong	local06, fp
20468     BC 4E 85 F1 | 	sub	fp, #188
2046c     14 25 02 F6 | 	mov	local04, local06
20470     0A 16 06 F6 | 	mov	arg03, #10
20474     12 1B 02 F6 | 	mov	arg05, local04
20478     14 3D B0 FD | 	call	#__system___uitoa
2047c     5C 4E 05 F1 | 	add	fp, #92
20480     A7 FA 61 FC | 	wrlong	result1, fp
20484     5C 4E 85 F1 | 	sub	fp, #92
20488     48 00 90 FD | 	jmp	#LR__2830
2048c                 | LR__2829
2048c     60 4E 05 F1 | 	add	fp, #96
20490     A7 56 68 FC | 	wrlong	#43, fp
20494     50 4E 05 F1 | 	add	fp, #80
20498     A7 12 02 F6 | 	mov	arg01, fp
2049c     90 4E 85 F1 | 	sub	fp, #144
204a0     A7 14 02 FB | 	rdlong	arg02, fp
204a4     18 4E 05 F1 | 	add	fp, #24
204a8     A7 18 02 FB | 	rdlong	arg04, fp
204ac     84 4E 05 F1 | 	add	fp, #132
204b0     A7 28 02 FB | 	rdlong	local06, fp
204b4     BC 4E 85 F1 | 	sub	fp, #188
204b8     14 25 02 F6 | 	mov	local04, local06
204bc     0A 16 06 F6 | 	mov	arg03, #10
204c0     12 1B 02 F6 | 	mov	arg05, local04
204c4     C8 3C B0 FD | 	call	#__system___uitoa
204c8     5C 4E 05 F1 | 	add	fp, #92
204cc     A7 FA 61 FC | 	wrlong	result1, fp
204d0     5C 4E 85 F1 | 	sub	fp, #92
204d4                 | LR__2830
204d4     24 4E 05 F1 | 	add	fp, #36
204d8     A7 1E 0A FB | 	rdlong	local01, fp wz
204dc     24 4E 85 F1 | 	sub	fp, #36
204e0     2C 00 90 AD |  if_e	jmp	#LR__2831
204e4     50 4E 05 F1 | 	add	fp, #80
204e8     A7 00 68 FC | 	wrlong	#0, fp
204ec     04 4E 85 F1 | 	sub	fp, #4
204f0     A7 00 68 FC | 	wrlong	#0, fp
204f4     6C 4E 05 F1 | 	add	fp, #108
204f8     A7 1E 02 FB | 	rdlong	local01, fp
204fc     01 1E 06 F1 | 	add	local01, #1
20500     64 4E 85 F1 | 	sub	fp, #100
20504     A7 1E 62 FC | 	wrlong	local01, fp
20508     54 4E 85 F1 | 	sub	fp, #84
2050c     88 00 90 FD | 	jmp	#LR__2834
20510                 | LR__2831
20510     20 4E 05 F1 | 	add	fp, #32
20514     A7 1E 02 FB | 	rdlong	local01, fp
20518     20 4E 85 F1 | 	sub	fp, #32
2051c     00 1E 56 F2 | 	cmps	local01, #0 wc
20520     40 00 90 3D |  if_ae	jmp	#LR__2832
20524     20 4E 05 F1 | 	add	fp, #32
20528     A7 20 02 FB | 	rdlong	local02, fp
2052c     30 4E 05 F1 | 	add	fp, #48
20530     A7 20 62 FC | 	wrlong	local02, fp
20534     04 4E 85 F1 | 	sub	fp, #4
20538     A7 20 62 FC | 	wrlong	local02, fp
2053c     2C 4E 85 F1 | 	sub	fp, #44
20540     A7 1E 02 FB | 	rdlong	local01, fp
20544     98 4E 05 F1 | 	add	fp, #152
20548     A7 22 02 FB | 	rdlong	local03, fp
2054c     11 1F 02 F1 | 	add	local01, local03
20550     01 1E 06 F1 | 	add	local01, #1
20554     64 4E 85 F1 | 	sub	fp, #100
20558     A7 1E 62 FC | 	wrlong	local01, fp
2055c     54 4E 85 F1 | 	sub	fp, #84
20560     34 00 90 FD | 	jmp	#LR__2833
20564                 | LR__2832
20564     4C 4E 05 F1 | 	add	fp, #76
20568     A7 00 68 FC | 	wrlong	#0, fp
2056c     2C 4E 85 F1 | 	sub	fp, #44
20570     A7 1E 02 FB | 	rdlong	local01, fp
20574     30 4E 05 F1 | 	add	fp, #48
20578     A7 1E 62 FC | 	wrlong	local01, fp
2057c     68 4E 05 F1 | 	add	fp, #104
20580     A7 22 02 FB | 	rdlong	local03, fp
20584     11 1F 02 F1 | 	add	local01, local03
20588     01 1E 06 F1 | 	add	local01, #1
2058c     64 4E 85 F1 | 	sub	fp, #100
20590     A7 1E 62 FC | 	wrlong	local01, fp
20594     54 4E 85 F1 | 	sub	fp, #84
20598                 | LR__2833
20598                 | LR__2834
20598     54 4E 05 F1 | 	add	fp, #84
2059c     A7 1E 02 FB | 	rdlong	local01, fp
205a0     08 4E 85 F1 | 	sub	fp, #8
205a4     A7 22 02 FB | 	rdlong	local03, fp
205a8     11 1F 82 F1 | 	sub	local01, local03
205ac     01 1E 06 F1 | 	add	local01, #1
205b0     24 4E 85 F1 | 	sub	fp, #36
205b4     A7 1E 62 FC | 	wrlong	local01, fp
205b8     04 4E 05 F1 | 	add	fp, #4
205bc     A7 1E 0A FB | 	rdlong	local01, fp wz
205c0     2C 4E 85 F1 | 	sub	fp, #44
205c4     28 4E 05 51 |  if_ne	add	fp, #40
205c8     A7 22 02 5B |  if_ne	rdlong	local03, fp
205cc     01 22 06 51 |  if_ne	add	local03, #1
205d0     A7 22 62 5C |  if_ne	wrlong	local03, fp
205d4     28 4E 85 51 |  if_ne	sub	fp, #40
205d8     1C 4E 05 F1 | 	add	fp, #28
205dc     A7 1E 02 FB | 	rdlong	local01, fp
205e0     1C 4E 85 F1 | 	sub	fp, #28
205e4     10 1E 0E F2 | 	cmp	local01, #16 wz
205e8     28 4E 05 A1 |  if_e	add	fp, #40
205ec     A7 1E 02 AB |  if_e	rdlong	local01, fp
205f0     02 1E 06 A1 |  if_e	add	local01, #2
205f4     A7 1E 62 AC |  if_e	wrlong	local01, fp
205f8     28 4E 85 A1 |  if_e	sub	fp, #40
205fc     24 4E 05 F1 | 	add	fp, #36
20600     A7 1E 0A FB | 	rdlong	local01, fp wz
20604     24 4E 85 F1 | 	sub	fp, #36
20608     28 00 90 AD |  if_e	jmp	#LR__2835
2060c     28 4E 05 F1 | 	add	fp, #40
20610     A7 1E 02 FB | 	rdlong	local01, fp
20614     02 22 06 F6 | 	mov	local03, #2
20618     34 4E 05 F1 | 	add	fp, #52
2061c     A7 26 02 FB | 	rdlong	local05, fp
20620     13 23 02 F1 | 	add	local03, local05
20624     11 1F 02 F1 | 	add	local01, local03
20628     34 4E 85 F1 | 	sub	fp, #52
2062c     A7 1E 62 FC | 	wrlong	local01, fp
20630     28 4E 85 F1 | 	sub	fp, #40
20634                 | LR__2835
20634     28 4E 05 F1 | 	add	fp, #40
20638     A7 1E 02 FB | 	rdlong	local01, fp
2063c     28 4E 85 F1 | 	sub	fp, #40
20640     41 1E 56 F2 | 	cmps	local01, #65 wc
20644     01 FA 65 36 |  if_ae	neg	result1, #1
20648     08 05 90 3D |  if_ae	jmp	#LR__2863
2064c     3C 4E 05 F1 | 	add	fp, #60
20650     A7 1E 0A FB | 	rdlong	local01, fp wz
20654     3C 4E 85 F1 | 	sub	fp, #60
20658     60 00 90 AD |  if_e	jmp	#LR__2836
2065c     C0 4E 05 F1 | 	add	fp, #192
20660     A7 12 02 FB | 	rdlong	arg01, fp
20664     94 4E 85 F1 | 	sub	fp, #148
20668     A7 14 02 FB | 	rdlong	arg02, fp
2066c     14 4E 05 F1 | 	add	fp, #20
20670     A7 16 02 FB | 	rdlong	arg03, fp
20674     40 4E 85 F1 | 	sub	fp, #64
20678     7C 3D B0 FD | 	call	#__system__emitsign_0444
2067c     18 4F 05 F1 | 	add	fp, #280
20680     A7 FA 61 FC | 	wrlong	result1, fp
20684     18 4F 85 F1 | 	sub	fp, #280
20688     00 FA 55 F2 | 	cmps	result1, #0 wc
2068c     18 4F 05 C1 |  if_b	add	fp, #280
20690     A7 FA 01 CB |  if_b	rdlong	result1, fp
20694     18 4F 85 C1 |  if_b	sub	fp, #280
20698     B8 04 90 CD |  if_b	jmp	#LR__2863
2069c     C0 4E 05 F1 | 	add	fp, #192
206a0     A7 1E 02 FB | 	rdlong	local01, fp
206a4     58 4E 05 F1 | 	add	fp, #88
206a8     A7 22 02 FB | 	rdlong	local03, fp
206ac     11 1F 02 F1 | 	add	local01, local03
206b0     58 4E 85 F1 | 	sub	fp, #88
206b4     A7 1E 62 FC | 	wrlong	local01, fp
206b8     C0 4E 85 F1 | 	sub	fp, #192
206bc                 | LR__2836
206bc     4C 4E 05 F1 | 	add	fp, #76
206c0     A7 1E 02 FB | 	rdlong	local01, fp
206c4     34 4E 85 F1 | 	sub	fp, #52
206c8     A7 1E 62 FC | 	wrlong	local01, fp
206cc     18 4E 85 F1 | 	sub	fp, #24
206d0     97 9E 48 FB | 	callpa	#(@LR__2842-@LR__2837)>>2,fcache_load_ptr_
206d4                 | LR__2837
206d4     18 4E 05 F1 | 	add	fp, #24
206d8     A7 20 02 FB | 	rdlong	local02, fp
206dc     3C 4E 05 F1 | 	add	fp, #60
206e0     A7 26 02 FB | 	rdlong	local05, fp
206e4     54 4E 85 F1 | 	sub	fp, #84
206e8     13 21 52 F2 | 	cmps	local02, local05 wc
206ec     20 01 90 3D |  if_ae	jmp	#LR__2843
206f0     18 4E 05 F1 | 	add	fp, #24
206f4     A7 28 02 FB | 	rdlong	local06, fp
206f8     18 4E 85 F1 | 	sub	fp, #24
206fc     00 28 56 F2 | 	cmps	local06, #0 wc
20700     58 00 90 CD |  if_b	jmp	#LR__2838
20704     18 4E 05 F1 | 	add	fp, #24
20708     A7 28 02 FB | 	rdlong	local06, fp
2070c     40 4E 05 F1 | 	add	fp, #64
20710     A7 2A 02 FB | 	rdlong	local07, fp
20714     58 4E 85 F1 | 	sub	fp, #88
20718     15 29 52 F2 | 	cmps	local06, local07 wc
2071c     3C 00 90 3D |  if_ae	jmp	#LR__2838
20720     C0 4E 05 F1 | 	add	fp, #192
20724     A7 2C 02 FB | 	rdlong	local08, fp
20728     16 2B 02 F6 | 	mov	local07, local08
2072c     01 2A 06 F1 | 	add	local07, #1
20730     A7 2A 62 FC | 	wrlong	local07, fp
20734     A8 4E 85 F1 | 	sub	fp, #168
20738     A7 2A 02 FB | 	rdlong	local07, fp
2073c     15 2F 02 F6 | 	mov	local09, local07
20740     58 4E 05 F1 | 	add	fp, #88
20744     A7 30 02 F6 | 	mov	local10, fp
20748     A7 2E 02 F1 | 	add	local09, fp
2074c     17 33 C2 FA | 	rdbyte	local11, local09
20750     16 33 42 FC | 	wrbyte	local11, local08
20754     70 4E 85 F1 | 	sub	fp, #112
20758     20 00 90 FD | 	jmp	#LR__2839
2075c                 | LR__2838
2075c     C0 4E 05 F1 | 	add	fp, #192
20760     A7 2C 02 FB | 	rdlong	local08, fp
20764     16 2F 02 F6 | 	mov	local09, local08
20768     01 2E 06 F1 | 	add	local09, #1
2076c     A7 2E 62 FC | 	wrlong	local09, fp
20770     C0 4E 85 F1 | 	sub	fp, #192
20774     30 2E 06 F6 | 	mov	local09, #48
20778     16 61 48 FC | 	wrbyte	#48, local08
2077c                 | LR__2839
2077c     18 4E 05 F1 | 	add	fp, #24
20780     A7 28 02 FB | 	rdlong	local06, fp
20784     38 4E 05 F1 | 	add	fp, #56
20788     A7 34 02 FB | 	rdlong	local12, fp
2078c     50 4E 85 F1 | 	sub	fp, #80
20790     1A 29 0A F2 | 	cmp	local06, local12 wz
20794     5C 00 90 5D |  if_ne	jmp	#LR__2841
20798     10 4F 05 F1 | 	add	fp, #272
2079c     A7 2A 02 FB | 	rdlong	local07, fp
207a0     10 4F 85 F1 | 	sub	fp, #272
207a4     15 2F 0A F6 | 	mov	local09, local07 wz
207a8     28 00 90 5D |  if_ne	jmp	#LR__2840
207ac     54 4E 05 F1 | 	add	fp, #84
207b0     A7 32 02 FB | 	rdlong	local11, fp
207b4     19 31 02 F6 | 	mov	local10, local11
207b8     01 30 86 F1 | 	sub	local10, #1
207bc     3C 4E 85 F1 | 	sub	fp, #60
207c0     A7 36 02 FB | 	rdlong	local13, fp
207c4     18 4E 85 F1 | 	sub	fp, #24
207c8     1B 39 02 F6 | 	mov	local14, local13
207cc     18 39 52 F2 | 	cmps	local14, local10 wc
207d0     20 00 90 3D |  if_ae	jmp	#LR__2841
207d4                 | LR__2840
207d4     C0 4E 05 F1 | 	add	fp, #192
207d8     A7 2C 02 FB | 	rdlong	local08, fp
207dc     16 35 02 F6 | 	mov	local12, local08
207e0     01 34 06 F1 | 	add	local12, #1
207e4     A7 34 62 FC | 	wrlong	local12, fp
207e8     C0 4E 85 F1 | 	sub	fp, #192
207ec     2E 2E 06 F6 | 	mov	local09, #46
207f0     16 5D 48 FC | 	wrbyte	#46, local08
207f4                 | LR__2841
207f4     18 4E 05 F1 | 	add	fp, #24
207f8     A7 3A 02 FB | 	rdlong	local15, fp
207fc     1D 35 02 F6 | 	mov	local12, local15
20800     01 34 06 F1 | 	add	local12, #1
20804     A7 34 62 FC | 	wrlong	local12, fp
20808     18 4E 85 F1 | 	sub	fp, #24
2080c     C4 FE 9F FD | 	jmp	#LR__2837
20810                 | LR__2842
20810                 | LR__2843
20810     34 4E 05 F1 | 	add	fp, #52
20814     A7 1E 0A FB | 	rdlong	local01, fp wz
20818     34 4E 85 F1 | 	sub	fp, #52
2081c     A0 00 90 AD |  if_e	jmp	#LR__2847
20820     C0 4E 05 F1 | 	add	fp, #192
20824     A7 1E 02 FB | 	rdlong	local01, fp
20828     01 1E 86 F1 | 	sub	local01, #1
2082c     A7 1E 62 FC | 	wrlong	local01, fp
20830     C0 4E 85 F1 | 	sub	fp, #192
20834     97 26 48 FB | 	callpa	#(@LR__2845-@LR__2844)>>2,fcache_load_ptr_
20838                 | LR__2844
20838     C0 4E 05 F1 | 	add	fp, #192
2083c     A7 1E 02 FB | 	rdlong	local01, fp
20840     04 4E 05 F1 | 	add	fp, #4
20844     A7 22 02 FB | 	rdlong	local03, fp
20848     C4 4E 85 F1 | 	sub	fp, #196
2084c     11 1F 5A F2 | 	cmps	local01, local03 wcz
20850     30 00 90 ED |  if_be	jmp	#LR__2846
20854     C0 4E 05 F1 | 	add	fp, #192
20858     A7 28 02 FB | 	rdlong	local06, fp
2085c     C0 4E 85 F1 | 	sub	fp, #192
20860     14 25 C2 FA | 	rdbyte	local04, local06
20864     30 24 0E F2 | 	cmp	local04, #48 wz
20868     18 00 90 5D |  if_ne	jmp	#LR__2846
2086c     C0 4E 05 F1 | 	add	fp, #192
20870     A7 1E 02 FB | 	rdlong	local01, fp
20874     01 1E 86 F1 | 	sub	local01, #1
20878     A7 1E 62 FC | 	wrlong	local01, fp
2087c     C0 4E 85 F1 | 	sub	fp, #192
20880     B4 FF 9F FD | 	jmp	#LR__2844
20884                 | LR__2845
20884                 | LR__2846
20884     C0 4E 05 F1 | 	add	fp, #192
20888     A7 20 02 FB | 	rdlong	local02, fp
2088c     C0 4E 85 F1 | 	sub	fp, #192
20890     10 1F C2 FA | 	rdbyte	local01, local02
20894     2E 1E 0E F2 | 	cmp	local01, #46 wz
20898     C0 4E 05 A1 |  if_e	add	fp, #192
2089c     A7 1E 02 AB |  if_e	rdlong	local01, fp
208a0     01 1E 86 A1 |  if_e	sub	local01, #1
208a4     A7 1E 62 AC |  if_e	wrlong	local01, fp
208a8     C0 4E 85 A1 |  if_e	sub	fp, #192
208ac     C0 4E 05 F1 | 	add	fp, #192
208b0     A7 22 02 FB | 	rdlong	local03, fp
208b4     01 22 06 F1 | 	add	local03, #1
208b8     A7 22 62 FC | 	wrlong	local03, fp
208bc     C0 4E 85 F1 | 	sub	fp, #192
208c0                 | LR__2847
208c0     24 4E 05 F1 | 	add	fp, #36
208c4     A7 1E 0A FB | 	rdlong	local01, fp wz
208c8     24 4E 85 F1 | 	sub	fp, #36
208cc     B4 00 90 AD |  if_e	jmp	#LR__2850
208d0     C0 4E 05 F1 | 	add	fp, #192
208d4     A7 20 02 FB | 	rdlong	local02, fp
208d8     10 23 02 F6 | 	mov	local03, local02
208dc     01 22 06 F1 | 	add	local03, #1
208e0     A7 22 62 FC | 	wrlong	local03, fp
208e4     90 4E 85 F1 | 	sub	fp, #144
208e8     A7 24 02 FB | 	rdlong	local04, fp
208ec     10 25 42 FC | 	wrbyte	local04, local02
208f0     90 4E 05 F1 | 	add	fp, #144
208f4     A7 20 02 FB | 	rdlong	local02, fp
208f8     10 23 02 F6 | 	mov	local03, local02
208fc     01 22 06 F1 | 	add	local03, #1
20900     A7 22 62 FC | 	wrlong	local03, fp
20904     60 4E 85 F1 | 	sub	fp, #96
20908     A7 24 02 FB | 	rdlong	local04, fp
2090c     10 25 42 FC | 	wrbyte	local04, local02
20910     48 4E 85 F1 | 	sub	fp, #72
20914     A7 00 68 FC | 	wrlong	#0, fp
20918     18 4E 85 F1 | 	sub	fp, #24
2091c                 | LR__2848
2091c     18 4E 05 F1 | 	add	fp, #24
20920     A7 20 02 FB | 	rdlong	local02, fp
20924     44 4E 05 F1 | 	add	fp, #68
20928     A7 26 02 FB | 	rdlong	local05, fp
2092c     5C 4E 85 F1 | 	sub	fp, #92
20930     13 21 52 F2 | 	cmps	local02, local05 wc
20934     4C 00 90 3D |  if_ae	jmp	#LR__2849
20938     C0 4E 05 F1 | 	add	fp, #192
2093c     A7 2C 02 FB | 	rdlong	local08, fp
20940     16 35 02 F6 | 	mov	local12, local08
20944     01 34 06 F1 | 	add	local12, #1
20948     A7 34 62 FC | 	wrlong	local12, fp
2094c     A8 4E 85 F1 | 	sub	fp, #168
20950     A7 2A 02 FB | 	rdlong	local07, fp
20954     15 2F 02 F6 | 	mov	local09, local07
20958     98 4E 05 F1 | 	add	fp, #152
2095c     A7 30 02 F6 | 	mov	local10, fp
20960     A7 2E 02 F1 | 	add	local09, fp
20964     17 33 C2 FA | 	rdbyte	local11, local09
20968     16 33 42 FC | 	wrbyte	local11, local08
2096c     98 4E 85 F1 | 	sub	fp, #152
20970     A7 34 02 FB | 	rdlong	local12, fp
20974     01 34 06 F1 | 	add	local12, #1
20978     A7 34 62 FC | 	wrlong	local12, fp
2097c     18 4E 85 F1 | 	sub	fp, #24
20980     98 FF 9F FD | 	jmp	#LR__2848
20984                 | LR__2849
20984                 | LR__2850
20984     C0 4E 05 F1 | 	add	fp, #192
20988     A7 1E 02 FB | 	rdlong	local01, fp
2098c     C0 4E 85 F1 | 	sub	fp, #192
20990     0F 01 48 FC | 	wrbyte	#0, local01
20994                 | LR__2851
20994     6C 4E 05 F1 | 	add	fp, #108
20998     A7 1E 0A FB | 	rdlong	local01, fp wz
2099c     6C 4E 85 F1 | 	sub	fp, #108
209a0     90 01 90 AD |  if_e	jmp	#LR__2862
209a4     48 4E 05 F1 | 	add	fp, #72
209a8     A7 22 0A FB | 	rdlong	local03, fp wz
209ac     48 4E 85 F1 | 	sub	fp, #72
209b0     80 01 90 AD |  if_e	jmp	#LR__2862
209b4     C4 4E 05 F1 | 	add	fp, #196
209b8     A7 12 02 FB | 	rdlong	arg01, fp
209bc     C4 4E 85 F1 | 	sub	fp, #196
209c0     09 3D 02 F6 | 	mov	local16, arg01
209c4     97 06 48 FB | 	callpa	#(@LR__2853-@LR__2852)>>2,fcache_load_ptr_
209c8                 | LR__2852
209c8     1E FB C9 FA | 	rdbyte	result1, local16 wz
209cc     01 3C 06 51 |  if_ne	add	local16, #1
209d0     F4 FF 9F 5D |  if_ne	jmp	#LR__2852
209d4                 | LR__2853
209d4     09 3D 82 F1 | 	sub	local16, arg01
209d8     1E 25 02 F6 | 	mov	local04, local16
209dc     6C 4E 05 F1 | 	add	fp, #108
209e0     A7 28 02 FB | 	rdlong	local06, fp
209e4     6C 4E 85 F1 | 	sub	fp, #108
209e8     14 25 5A F2 | 	cmps	local04, local06 wcz
209ec     44 01 90 ED |  if_be	jmp	#LR__2862
209f0     C4 4E 05 F1 | 	add	fp, #196
209f4     A7 1E 02 FB | 	rdlong	local01, fp
209f8     5C 4E 05 F1 | 	add	fp, #92
209fc     A7 1E 62 FC | 	wrlong	local01, fp
20a00     FC 4E 85 F1 | 	sub	fp, #252
20a04     A7 1E 0A FB | 	rdlong	local01, fp wz
20a08     24 4E 85 F1 | 	sub	fp, #36
20a0c     20 00 90 AD |  if_e	jmp	#LR__2854
20a10     B8 4E 05 F1 | 	add	fp, #184
20a14     A7 00 68 FC | 	wrlong	#0, fp
20a18     4C 4E 85 F1 | 	sub	fp, #76
20a1c     A7 1E 02 FB | 	rdlong	local01, fp
20a20     B0 4E 05 F1 | 	add	fp, #176
20a24     A7 1E 62 FC | 	wrlong	local01, fp
20a28     1C 4F 85 F1 | 	sub	fp, #284
20a2c     24 00 90 FD | 	jmp	#LR__2855
20a30                 | LR__2854
20a30     6C 4E 05 F1 | 	add	fp, #108
20a34     A7 1E 02 FB | 	rdlong	local01, fp
20a38     01 1E 86 F1 | 	sub	local01, #1
20a3c     4C 4E 05 F1 | 	add	fp, #76
20a40     A7 22 02 FB | 	rdlong	local03, fp
20a44     11 1F 82 F1 | 	sub	local01, local03
20a48     64 4E 05 F1 | 	add	fp, #100
20a4c     A7 1E 62 FC | 	wrlong	local01, fp
20a50     1C 4F 85 F1 | 	sub	fp, #284
20a54                 | LR__2855
20a54     97 20 48 FB | 	callpa	#(@LR__2857-@LR__2856)>>2,fcache_load_ptr_
20a58                 | LR__2856
20a58     1C 4F 05 F1 | 	add	fp, #284
20a5c     A7 1E 0A FB | 	rdlong	local01, fp wz
20a60     1C 4F 85 F1 | 	sub	fp, #284
20a64     30 00 90 AD |  if_e	jmp	#LR__2858
20a68     20 4F 05 F1 | 	add	fp, #288
20a6c     A7 20 02 FB | 	rdlong	local02, fp
20a70     10 23 02 F6 | 	mov	local03, local02
20a74     01 22 06 F1 | 	add	local03, #1
20a78     A7 22 62 FC | 	wrlong	local03, fp
20a7c     10 55 48 FC | 	wrbyte	#42, local02
20a80     04 4E 85 F1 | 	sub	fp, #4
20a84     A7 1E 02 FB | 	rdlong	local01, fp
20a88     01 1E 86 F1 | 	sub	local01, #1
20a8c     A7 1E 62 FC | 	wrlong	local01, fp
20a90     1C 4F 85 F1 | 	sub	fp, #284
20a94     C0 FF 9F FD | 	jmp	#LR__2856
20a98                 | LR__2857
20a98                 | LR__2858
20a98     B8 4E 05 F1 | 	add	fp, #184
20a9c     A7 1E 0A FB | 	rdlong	local01, fp wz
20aa0     B8 4E 85 F1 | 	sub	fp, #184
20aa4     70 00 90 AD |  if_e	jmp	#LR__2861
20aa8     20 4F 05 F1 | 	add	fp, #288
20aac     A7 20 02 FB | 	rdlong	local02, fp
20ab0     10 23 02 F6 | 	mov	local03, local02
20ab4     01 22 06 F1 | 	add	local03, #1
20ab8     A7 22 62 FC | 	wrlong	local03, fp
20abc     10 5D 48 FC | 	wrbyte	#46, local02
20ac0     04 4E 85 F1 | 	sub	fp, #4
20ac4     A7 00 68 FC | 	wrlong	#0, fp
20ac8     1C 4F 85 F1 | 	sub	fp, #284
20acc                 | LR__2859
20acc     1C 4F 05 F1 | 	add	fp, #284
20ad0     A7 20 02 FB | 	rdlong	local02, fp
20ad4     64 4E 85 F1 | 	sub	fp, #100
20ad8     A7 26 02 FB | 	rdlong	local05, fp
20adc     B8 4E 85 F1 | 	sub	fp, #184
20ae0     13 21 52 F2 | 	cmps	local02, local05 wc
20ae4     30 00 90 3D |  if_ae	jmp	#LR__2860
20ae8     20 4F 05 F1 | 	add	fp, #288
20aec     A7 2C 02 FB | 	rdlong	local08, fp
20af0     16 35 02 F6 | 	mov	local12, local08
20af4     01 34 06 F1 | 	add	local12, #1
20af8     A7 34 62 FC | 	wrlong	local12, fp
20afc     16 55 48 FC | 	wrbyte	#42, local08
20b00     04 4E 85 F1 | 	sub	fp, #4
20b04     A7 34 02 FB | 	rdlong	local12, fp
20b08     01 34 06 F1 | 	add	local12, #1
20b0c     A7 34 62 FC | 	wrlong	local12, fp
20b10     1C 4F 85 F1 | 	sub	fp, #284
20b14     B4 FF 9F FD | 	jmp	#LR__2859
20b18                 | LR__2860
20b18                 | LR__2861
20b18     20 4F 05 F1 | 	add	fp, #288
20b1c     A7 20 02 FB | 	rdlong	local02, fp
20b20     10 23 02 F6 | 	mov	local03, local02
20b24     01 22 06 F1 | 	add	local03, #1
20b28     A7 22 62 FC | 	wrlong	local03, fp
20b2c     20 4F 85 F1 | 	sub	fp, #288
20b30     10 01 48 FC | 	wrbyte	#0, local02
20b34                 | LR__2862
20b34     04 4E 05 F1 | 	add	fp, #4
20b38     A7 12 02 FB | 	rdlong	arg01, fp
20b3c     04 4E 05 F1 | 	add	fp, #4
20b40     A7 14 02 FB | 	rdlong	arg02, fp
20b44     BC 4E 05 F1 | 	add	fp, #188
20b48     A7 16 02 FB | 	rdlong	arg03, fp
20b4c     C4 4E 85 F1 | 	sub	fp, #196
20b50     C4 EE BF FD | 	call	#__system___fmtstr
20b54                 | LR__2863
20b54     A7 F0 03 F6 | 	mov	ptra, fp
20b58     B2 00 A0 FD | 	call	#popregs_
20b5c                 | __system___fmtfloat_ret
20b5c     2D 00 64 FD | 	ret
20b60                 | 
20b60                 | __system__Left_S
20b60     04 4A 05 F6 | 	mov	COUNT_, #4
20b64     A8 00 A0 FD | 	call	#pushregs_
20b68     09 1F 02 F6 | 	mov	local01, arg01
20b6c     0A 21 02 F6 | 	mov	local02, arg02
20b70     01 20 56 F2 | 	cmps	local02, #1 wc
20b74     70 01 00 CF 
20b78     D6 FA 05 C6 |  if_b	mov	result1, ##@LR__4753
20b7c     5C 00 90 CD |  if_b	jmp	#LR__2873
20b80     0F 13 02 F6 | 	mov	arg01, local01
20b84     09 23 02 F6 | 	mov	local03, arg01
20b88     97 06 48 FB | 	callpa	#(@LR__2871-@LR__2870)>>2,fcache_load_ptr_
20b8c                 | LR__2870
20b8c     11 FB C9 FA | 	rdbyte	result1, local03 wz
20b90     01 22 06 51 |  if_ne	add	local03, #1
20b94     F4 FF 9F 5D |  if_ne	jmp	#LR__2870
20b98                 | LR__2871
20b98     09 23 82 F1 | 	sub	local03, arg01
20b9c     11 FB 01 F6 | 	mov	result1, local03
20ba0     10 FB 59 F2 | 	cmps	result1, local02 wcz
20ba4     0F FB 01 E6 |  if_be	mov	result1, local01
20ba8     30 00 90 ED |  if_be	jmp	#LR__2873
20bac     10 13 02 F6 | 	mov	arg01, local02
20bb0     02 12 06 F1 | 	add	arg01, #2
20bb4     AC 1D B0 FD | 	call	#__system___gc_alloc_managed
20bb8     FD 24 0A F6 | 	mov	local04, result1 wz
20bbc     18 00 90 AD |  if_e	jmp	#LR__2872
20bc0     12 13 02 F6 | 	mov	arg01, local04
20bc4     0F 15 02 F6 | 	mov	arg02, local01
20bc8     10 17 02 F6 | 	mov	arg03, local02
20bcc     68 DE BF FD | 	call	#__system____builtin_memmove
20bd0     12 21 02 F1 | 	add	local02, local04
20bd4     10 01 48 FC | 	wrbyte	#0, local02
20bd8                 | LR__2872
20bd8     12 FB 01 F6 | 	mov	result1, local04
20bdc                 | LR__2873
20bdc     A7 F0 03 F6 | 	mov	ptra, fp
20be0     B2 00 A0 FD | 	call	#popregs_
20be4                 | __system__Left_S_ret
20be4     2D 00 64 FD | 	ret
20be8                 | 
20be8                 | __system__Right_S
20be8     05 4A 05 F6 | 	mov	COUNT_, #5
20bec     A8 00 A0 FD | 	call	#pushregs_
20bf0     09 1F 02 F6 | 	mov	local01, arg01
20bf4     0A 21 02 F6 | 	mov	local02, arg02
20bf8     01 20 56 F2 | 	cmps	local02, #1 wc
20bfc     70 01 00 CF 
20c00     D7 FA 05 C6 |  if_b	mov	result1, ##@LR__4754
20c04     64 00 90 CD |  if_b	jmp	#LR__2883
20c08     0F 13 02 F6 | 	mov	arg01, local01
20c0c     09 23 02 F6 | 	mov	local03, arg01
20c10     97 06 48 FB | 	callpa	#(@LR__2881-@LR__2880)>>2,fcache_load_ptr_
20c14                 | LR__2880
20c14     11 FB C9 FA | 	rdbyte	result1, local03 wz
20c18     01 22 06 51 |  if_ne	add	local03, #1
20c1c     F4 FF 9F 5D |  if_ne	jmp	#LR__2880
20c20                 | LR__2881
20c20     09 23 82 F1 | 	sub	local03, arg01
20c24     11 FB 01 F6 | 	mov	result1, local03
20c28     FD 24 02 F6 | 	mov	local04, result1
20c2c     10 25 5A F2 | 	cmps	local04, local02 wcz
20c30     0F FB 01 E6 |  if_be	mov	result1, local01
20c34     34 00 90 ED |  if_be	jmp	#LR__2883
20c38     10 13 02 F6 | 	mov	arg01, local02
20c3c     02 12 06 F1 | 	add	arg01, #2
20c40     20 1D B0 FD | 	call	#__system___gc_alloc_managed
20c44     FD 26 0A F6 | 	mov	local05, result1 wz
20c48     1C 00 90 AD |  if_e	jmp	#LR__2882
20c4c     10 25 82 F1 | 	sub	local04, local02
20c50     0F 25 02 F1 | 	add	local04, local01
20c54     01 20 06 F1 | 	add	local02, #1
20c58     13 13 02 F6 | 	mov	arg01, local05
20c5c     12 15 02 F6 | 	mov	arg02, local04
20c60     10 17 02 F6 | 	mov	arg03, local02
20c64     D0 DD BF FD | 	call	#__system____builtin_memmove
20c68                 | LR__2882
20c68     13 FB 01 F6 | 	mov	result1, local05
20c6c                 | LR__2883
20c6c     A7 F0 03 F6 | 	mov	ptra, fp
20c70     B2 00 A0 FD | 	call	#popregs_
20c74                 | __system__Right_S_ret
20c74     2D 00 64 FD | 	ret
20c78                 | 
20c78                 | __system__Mid_S
20c78     05 4A 05 F6 | 	mov	COUNT_, #5
20c7c     A8 00 A0 FD | 	call	#pushregs_
20c80     09 1F 02 F6 | 	mov	local01, arg01
20c84     0A 21 02 F6 | 	mov	local02, arg02
20c88     01 16 56 F2 | 	cmps	arg03, #1 wc
20c8c     70 01 00 CF 
20c90     D8 FA 05 C6 |  if_b	mov	result1, ##@LR__4755
20c94     80 00 90 CD |  if_b	jmp	#LR__2893
20c98     01 20 86 F1 | 	sub	local02, #1
20c9c     00 20 56 F3 | 	fges	local02, #0 wc
20ca0     0F 13 02 F6 | 	mov	arg01, local01
20ca4     09 23 02 F6 | 	mov	local03, arg01
20ca8     97 06 48 FB | 	callpa	#(@LR__2891-@LR__2890)>>2,fcache_load_ptr_
20cac                 | LR__2890
20cac     11 FB C9 FA | 	rdbyte	result1, local03 wz
20cb0     01 22 06 51 |  if_ne	add	local03, #1
20cb4     F4 FF 9F 5D |  if_ne	jmp	#LR__2890
20cb8                 | LR__2891
20cb8     09 23 82 F1 | 	sub	local03, arg01
20cbc     11 FB 01 F6 | 	mov	result1, local03
20cc0     FD 14 02 F6 | 	mov	arg02, result1
20cc4     10 15 52 F2 | 	cmps	arg02, local02 wc
20cc8     70 01 00 CF 
20ccc     D9 FA 05 C6 |  if_b	mov	result1, ##@LR__4756
20cd0     44 00 90 CD |  if_b	jmp	#LR__2893
20cd4     0A 25 02 F6 | 	mov	local04, arg02
20cd8     10 25 82 F1 | 	sub	local04, local02
20cdc     0B 25 5A F2 | 	cmps	local04, arg03 wcz
20ce0     0B 25 02 16 |  if_a	mov	local04, arg03
20ce4     12 13 02 F6 | 	mov	arg01, local04
20ce8     02 12 06 F1 | 	add	arg01, #2
20cec     74 1C B0 FD | 	call	#__system___gc_alloc_managed
20cf0     FD 26 0A F6 | 	mov	local05, result1 wz
20cf4     1C 00 90 AD |  if_e	jmp	#LR__2892
20cf8     0F 21 02 F1 | 	add	local02, local01
20cfc     13 13 02 F6 | 	mov	arg01, local05
20d00     10 15 02 F6 | 	mov	arg02, local02
20d04     12 17 02 F6 | 	mov	arg03, local04
20d08     2C DD BF FD | 	call	#__system____builtin_memmove
20d0c     13 25 02 F1 | 	add	local04, local05
20d10     12 01 48 FC | 	wrbyte	#0, local04
20d14                 | LR__2892
20d14     13 FB 01 F6 | 	mov	result1, local05
20d18                 | LR__2893
20d18     A7 F0 03 F6 | 	mov	ptra, fp
20d1c     B2 00 A0 FD | 	call	#popregs_
20d20                 | __system__Mid_S_ret
20d20     2D 00 64 FD | 	ret
20d24                 | 
20d24                 | __system__Chr_S
20d24     01 4A 05 F6 | 	mov	COUNT_, #1
20d28     A8 00 A0 FD | 	call	#pushregs_
20d2c     09 1F 02 F6 | 	mov	local01, arg01
20d30     03 12 06 F6 | 	mov	arg01, #3
20d34     2C 1C B0 FD | 	call	#__system___gc_alloc_managed
20d38     00 FA 4D F2 | 	cmps	result1, #0 wz
20d3c     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
20d40     01 FA 05 51 |  if_ne	add	result1, #1
20d44     FD 00 48 5C |  if_ne	wrbyte	#0, result1
20d48     01 FA 85 51 |  if_ne	sub	result1, #1
20d4c     A7 F0 03 F6 | 	mov	ptra, fp
20d50     B2 00 A0 FD | 	call	#popregs_
20d54                 | __system__Chr_S_ret
20d54     2D 00 64 FD | 	ret
20d58                 | 
20d58                 | __system__str_S
20d58     02 4A 05 F6 | 	mov	COUNT_, #2
20d5c     A8 00 A0 FD | 	call	#pushregs_
20d60     09 1F 02 F6 | 	mov	local01, arg01
20d64     10 12 06 F6 | 	mov	arg01, #16
20d68     F8 1B B0 FD | 	call	#__system___gc_alloc_managed
20d6c     FD 20 0A F6 | 	mov	local02, result1 wz
20d70     30 00 90 AD |  if_e	jmp	#LR__2900
20d74     F8 13 02 F6 | 	mov	arg01, ptra
20d78     08 F0 07 F1 | 	add	ptra, #8
20d7c     09 21 62 FC | 	wrlong	local02, arg01
20d80     04 12 06 F1 | 	add	arg01, #4
20d84     09 01 68 FC | 	wrlong	#0, arg01
20d88     04 12 86 F1 | 	sub	arg01, #4
20d8c     00 48 04 FF 
20d90     00 12 46 F5 | 	or	arg01, ##143654912
20d94     00 14 06 F6 | 	mov	arg02, #0
20d98     0F 17 02 F6 | 	mov	arg03, local01
20d9c     67 18 06 F6 | 	mov	arg04, #103
20da0     90 EE BF FD | 	call	#__system___fmtfloat
20da4                 | LR__2900
20da4     10 FB 01 F6 | 	mov	result1, local02
20da8     A7 F0 03 F6 | 	mov	ptra, fp
20dac     B2 00 A0 FD | 	call	#popregs_
20db0                 | __system__str_S_ret
20db0     2D 00 64 FD | 	ret
20db4                 | 
20db4                 | __system__Number_S
20db4     08 4A 05 F6 | 	mov	COUNT_, #8
20db8     A8 00 A0 FD | 	call	#pushregs_
20dbc     09 1F 02 F6 | 	mov	local01, arg01
20dc0     0A 21 0A F6 | 	mov	local02, arg02 wz
20dc4     0B 23 02 F6 | 	mov	local03, arg03
20dc8     3C 00 90 5D |  if_ne	jmp	#LR__2912
20dcc     01 20 06 F6 | 	mov	local02, #1
20dd0     11 25 02 F6 | 	mov	local04, local03
20dd4     01 26 06 F6 | 	mov	local05, #1
20dd8     97 16 48 FB | 	callpa	#(@LR__2911-@LR__2910)>>2,fcache_load_ptr_
20ddc                 | LR__2910
20ddc     00 28 06 F6 | 	mov	local06, #0
20de0     0F 25 1A F2 | 	cmp	local04, local01 wcz
20de4     01 28 66 E6 |  if_be	neg	local06, #1
20de8     12 27 12 F2 | 	cmp	local05, local04 wc
20dec     15 2B A2 F1 | 	subx	local07, local07
20df0     15 29 CA F7 | 	test	local06, local07 wz
20df4     11 25 02 5D |  if_ne	qmul	local04, local03
20df8     12 27 02 56 |  if_ne	mov	local05, local04
20dfc     01 20 06 51 |  if_ne	add	local02, #1
20e00     18 24 62 5D |  if_ne	getqx	local04
20e04     D4 FF 9F 5D |  if_ne	jmp	#LR__2910
20e08                 | LR__2911
20e08                 | LR__2912
20e08     20 20 36 F3 | 	fle	local02, #32 wc
20e0c     10 13 02 F6 | 	mov	arg01, local02
20e10     02 12 06 F1 | 	add	arg01, #2
20e14     4C 1B B0 FD | 	call	#__system___gc_alloc_managed
20e18     FD 28 02 F6 | 	mov	local06, result1
20e1c     10 2B 02 F6 | 	mov	local07, local02
20e20     14 2B 02 F1 | 	add	local07, local06
20e24     15 01 48 FC | 	wrbyte	#0, local07
20e28     97 1A 48 FB | 	callpa	#(@LR__2914-@LR__2913)>>2,fcache_load_ptr_
20e2c                 | LR__2913
20e2c     01 20 16 F2 | 	cmp	local02, #1 wc
20e30     2C 00 90 CD |  if_b	jmp	#LR__2915
20e34     11 1F 12 FD | 	qdiv	local01, local03
20e38     01 20 86 F1 | 	sub	local02, #1
20e3c     10 2B 02 F6 | 	mov	local07, local02
20e40     14 2B 02 F1 | 	add	local07, local06
20e44     19 2C 62 FD | 	getqy	local08
20e48     0A 2C 16 F2 | 	cmp	local08, #10 wc
20e4c     30 2C 06 C1 |  if_b	add	local08, #48
20e50     37 2C 06 31 |  if_ae	add	local08, #55
20e54     15 2D 42 FC | 	wrbyte	local08, local07
20e58     18 1E 62 FD | 	getqx	local01
20e5c     CC FF 9F FD | 	jmp	#LR__2913
20e60                 | LR__2914
20e60                 | LR__2915
20e60     14 FB 01 F6 | 	mov	result1, local06
20e64     A7 F0 03 F6 | 	mov	ptra, fp
20e68     B2 00 A0 FD | 	call	#popregs_
20e6c                 | __system__Number_S_ret
20e6c     2D 00 64 FD | 	ret
20e70                 | 
20e70                 | __system__LCase_S
20e70     07 4A 05 F6 | 	mov	COUNT_, #7
20e74     A8 00 A0 FD | 	call	#pushregs_
20e78     09 1F 02 F6 | 	mov	local01, arg01
20e7c     09 21 02 F6 | 	mov	local02, arg01
20e80     97 06 48 FB | 	callpa	#(@LR__2921-@LR__2920)>>2,fcache_load_ptr_
20e84                 | LR__2920
20e84     10 FB C9 FA | 	rdbyte	result1, local02 wz
20e88     01 20 06 51 |  if_ne	add	local02, #1
20e8c     F4 FF 9F 5D |  if_ne	jmp	#LR__2920
20e90                 | LR__2921
20e90     09 21 82 F1 | 	sub	local02, arg01
20e94     10 FB 01 F6 | 	mov	result1, local02
20e98     FD 20 0A F6 | 	mov	local02, result1 wz
20e9c     70 01 00 AF 
20ea0     DA FA 05 A6 |  if_e	mov	result1, ##@LR__4757
20ea4     7C 00 90 AD |  if_e	jmp	#LR__2927
20ea8     10 13 02 F6 | 	mov	arg01, local02
20eac     02 12 06 F1 | 	add	arg01, #2
20eb0     B0 1A B0 FD | 	call	#__system___gc_alloc_managed
20eb4     FD 22 0A F6 | 	mov	local03, result1 wz
20eb8     64 00 90 AD |  if_e	jmp	#LR__2926
20ebc     01 24 66 F6 | 	neg	local04, #1
20ec0     97 26 48 FB | 	callpa	#(@LR__2925-@LR__2922)>>2,fcache_load_ptr_
20ec4                 | LR__2922
20ec4     01 24 06 F1 | 	add	local04, #1
20ec8     12 27 02 F6 | 	mov	local05, local04
20ecc     0F 27 02 F1 | 	add	local05, local01
20ed0     13 29 C2 FA | 	rdbyte	local06, local05
20ed4     41 28 56 F2 | 	cmps	local06, #65 wc
20ed8     18 00 90 CD |  if_b	jmp	#LR__2923
20edc     5B 28 56 F2 | 	cmps	local06, #91 wc
20ee0     12 2B 02 C6 |  if_b	mov	local07, local04
20ee4     11 2B 02 C1 |  if_b	add	local07, local03
20ee8     20 28 06 C1 |  if_b	add	local06, #32
20eec     15 29 42 CC |  if_b	wrbyte	local06, local07
20ef0     0C 00 90 CD |  if_b	jmp	#LR__2924
20ef4                 | LR__2923
20ef4     12 2B 02 F6 | 	mov	local07, local04
20ef8     11 2B 02 F1 | 	add	local07, local03
20efc     15 29 42 FC | 	wrbyte	local06, local07
20f00                 | LR__2924
20f00     10 29 02 F6 | 	mov	local06, local02
20f04     01 28 86 F1 | 	sub	local06, #1
20f08     14 25 0A F2 | 	cmp	local04, local06 wz
20f0c     B4 FF 9F 5D |  if_ne	jmp	#LR__2922
20f10                 | LR__2925
20f10     11 21 02 F1 | 	add	local02, local03
20f14     10 01 48 FC | 	wrbyte	#0, local02
20f18     11 FB 01 F6 | 	mov	result1, local03
20f1c     04 00 90 FD | 	jmp	#LR__2927
20f20                 | LR__2926
20f20     11 FB 01 F6 | 	mov	result1, local03
20f24                 | LR__2927
20f24     A7 F0 03 F6 | 	mov	ptra, fp
20f28     B2 00 A0 FD | 	call	#popregs_
20f2c                 | __system__LCase_S_ret
20f2c     2D 00 64 FD | 	ret
20f30                 | 
20f30                 | __system__LTrim_S
20f30     05 4A 05 F6 | 	mov	COUNT_, #5
20f34     A8 00 A0 FD | 	call	#pushregs_
20f38     09 1F 02 F6 | 	mov	local01, arg01
20f3c     09 21 02 F6 | 	mov	local02, arg01
20f40     97 06 48 FB | 	callpa	#(@LR__2931-@LR__2930)>>2,fcache_load_ptr_
20f44                 | LR__2930
20f44     10 FB C9 FA | 	rdbyte	result1, local02 wz
20f48     01 20 06 51 |  if_ne	add	local02, #1
20f4c     F4 FF 9F 5D |  if_ne	jmp	#LR__2930
20f50                 | LR__2931
20f50     09 21 82 F1 | 	sub	local02, arg01
20f54     10 FB 01 F6 | 	mov	result1, local02
20f58     FD 20 0A F6 | 	mov	local02, result1 wz
20f5c     70 01 00 AF 
20f60     DB FA 05 A6 |  if_e	mov	result1, ##@LR__4758
20f64     7C 00 90 AD |  if_e	jmp	#LR__2936
20f68     00 22 06 F6 | 	mov	local03, #0
20f6c     10 25 02 F6 | 	mov	local04, local02
20f70                 | LR__2932
20f70     12 23 52 F2 | 	cmps	local03, local04 wc
20f74     68 00 90 3D |  if_ae	jmp	#LR__2935
20f78     11 17 02 F6 | 	mov	arg03, local03
20f7c     0F 17 02 F1 | 	add	arg03, local01
20f80     0B 17 C2 FA | 	rdbyte	arg03, arg03
20f84     20 16 0E F2 | 	cmp	arg03, #32 wz
20f88     4C 00 90 AD |  if_e	jmp	#LR__2934
20f8c     10 13 02 F6 | 	mov	arg01, local02
20f90     11 13 82 F1 | 	sub	arg01, local03
20f94     02 12 06 F1 | 	add	arg01, #2
20f98     C8 19 B0 FD | 	call	#__system___gc_alloc_managed
20f9c     FD 26 0A F6 | 	mov	local05, result1 wz
20fa0     2C 00 90 AD |  if_e	jmp	#LR__2933
20fa4     11 15 02 F6 | 	mov	arg02, local03
20fa8     0F 15 02 F1 | 	add	arg02, local01
20fac     10 17 02 F6 | 	mov	arg03, local02
20fb0     11 17 82 F1 | 	sub	arg03, local03
20fb4     13 13 02 F6 | 	mov	arg01, local05
20fb8     7C DA BF FD | 	call	#__system____builtin_memmove
20fbc     11 21 82 F1 | 	sub	local02, local03
20fc0     13 21 02 F1 | 	add	local02, local05
20fc4     10 01 48 FC | 	wrbyte	#0, local02
20fc8     13 FB 01 F6 | 	mov	result1, local05
20fcc     14 00 90 FD | 	jmp	#LR__2936
20fd0                 | LR__2933
20fd0     13 FB 01 F6 | 	mov	result1, local05
20fd4     0C 00 90 FD | 	jmp	#LR__2936
20fd8                 | LR__2934
20fd8     01 22 06 F1 | 	add	local03, #1
20fdc     90 FF 9F FD | 	jmp	#LR__2932
20fe0                 | LR__2935
20fe0     0F FB 01 F6 | 	mov	result1, local01
20fe4                 | LR__2936
20fe4     A7 F0 03 F6 | 	mov	ptra, fp
20fe8     B2 00 A0 FD | 	call	#popregs_
20fec                 | __system__LTrim_S_ret
20fec     2D 00 64 FD | 	ret
20ff0                 | 
20ff0                 | __system__RTrim_S
20ff0     04 4A 05 F6 | 	mov	COUNT_, #4
20ff4     A8 00 A0 FD | 	call	#pushregs_
20ff8     09 1F 02 F6 | 	mov	local01, arg01
20ffc     09 21 02 F6 | 	mov	local02, arg01
21000     97 06 48 FB | 	callpa	#(@LR__2941-@LR__2940)>>2,fcache_load_ptr_
21004                 | LR__2940
21004     10 FB C9 FA | 	rdbyte	result1, local02 wz
21008     01 20 06 51 |  if_ne	add	local02, #1
2100c     F4 FF 9F 5D |  if_ne	jmp	#LR__2940
21010                 | LR__2941
21010     09 21 82 F1 | 	sub	local02, arg01
21014     10 FB 01 F6 | 	mov	result1, local02
21018     FD 20 0A F6 | 	mov	local02, result1 wz
2101c     70 01 00 AF 
21020     DC FA 05 A6 |  if_e	mov	result1, ##@LR__4759
21024     74 00 90 AD |  if_e	jmp	#LR__2945
21028     10 23 02 F6 | 	mov	local03, local02
2102c     01 22 86 F1 | 	sub	local03, #1
21030                 | LR__2942
21030     11 15 02 F6 | 	mov	arg02, local03
21034     0F 15 02 F1 | 	add	arg02, local01
21038     0A 21 C2 FA | 	rdbyte	local02, arg02
2103c     20 20 0E F2 | 	cmp	local02, #32 wz
21040     44 00 90 AD |  if_e	jmp	#LR__2944
21044     11 13 02 F6 | 	mov	arg01, local03
21048     02 12 06 F1 | 	add	arg01, #2
2104c     14 19 B0 FD | 	call	#__system___gc_alloc_managed
21050     FD 24 0A F6 | 	mov	local04, result1 wz
21054     28 00 90 AD |  if_e	jmp	#LR__2943
21058     11 17 02 F6 | 	mov	arg03, local03
2105c     01 16 06 F1 | 	add	arg03, #1
21060     12 13 02 F6 | 	mov	arg01, local04
21064     0F 15 02 F6 | 	mov	arg02, local01
21068     CC D9 BF FD | 	call	#__system____builtin_memmove
2106c     01 22 06 F1 | 	add	local03, #1
21070     12 23 02 F1 | 	add	local03, local04
21074     11 01 48 FC | 	wrbyte	#0, local03
21078     12 FB 01 F6 | 	mov	result1, local04
2107c     1C 00 90 FD | 	jmp	#LR__2945
21080                 | LR__2943
21080     12 FB 01 F6 | 	mov	result1, local04
21084     14 00 90 FD | 	jmp	#LR__2945
21088                 | LR__2944
21088     01 22 86 F1 | 	sub	local03, #1
2108c     00 22 56 F2 | 	cmps	local03, #0 wc
21090     9C FF 9F 3D |  if_ae	jmp	#LR__2942
21094     70 01 00 FF 
21098     DD FA 05 F6 | 	mov	result1, ##@LR__4760
2109c                 | LR__2945
2109c     A7 F0 03 F6 | 	mov	ptra, fp
210a0     B2 00 A0 FD | 	call	#popregs_
210a4                 | __system__RTrim_S_ret
210a4     2D 00 64 FD | 	ret
210a8                 | 
210a8                 | __system__Instr
210a8     07 4A 05 F6 | 	mov	COUNT_, #7
210ac     A8 00 A0 FD | 	call	#pushregs_
210b0     09 1F 02 F6 | 	mov	local01, arg01
210b4     0A 21 02 F6 | 	mov	local02, arg02
210b8     0B 23 02 F6 | 	mov	local03, arg03
210bc     11 13 02 F6 | 	mov	arg01, local03
210c0     09 25 02 F6 | 	mov	local04, arg01
210c4     97 06 48 FB | 	callpa	#(@LR__2951-@LR__2950)>>2,fcache_load_ptr_
210c8                 | LR__2950
210c8     12 FB C9 FA | 	rdbyte	result1, local04 wz
210cc     01 24 06 51 |  if_ne	add	local04, #1
210d0     F4 FF 9F 5D |  if_ne	jmp	#LR__2950
210d4                 | LR__2951
210d4     09 25 82 F1 | 	sub	local04, arg01
210d8     12 27 02 F6 | 	mov	local05, local04
210dc     10 13 02 F6 | 	mov	arg01, local02
210e0     09 25 02 F6 | 	mov	local04, arg01
210e4     97 06 48 FB | 	callpa	#(@LR__2953-@LR__2952)>>2,fcache_load_ptr_
210e8                 | LR__2952
210e8     12 FB C9 FA | 	rdbyte	result1, local04 wz
210ec     01 24 06 51 |  if_ne	add	local04, #1
210f0     F4 FF 9F 5D |  if_ne	jmp	#LR__2952
210f4                 | LR__2953
210f4     09 25 82 F1 | 	sub	local04, arg01
210f8     12 FB 01 F6 | 	mov	result1, local04
210fc     FD 18 0A F6 | 	mov	arg04, result1 wz
21100     00 FA 05 A6 |  if_e	mov	result1, #0
21104     98 00 90 AD |  if_e	jmp	#LR__2957
21108     00 26 0E F2 | 	cmp	local05, #0 wz
2110c     00 FA 05 A6 |  if_e	mov	result1, #0
21110     8C 00 90 AD |  if_e	jmp	#LR__2957
21114     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
21118     00 FA 05 16 |  if_a	mov	result1, #0
2111c     80 00 90 1D |  if_a	jmp	#LR__2957
21120     01 1E 56 F2 | 	cmps	local01, #1 wc
21124     01 1E 06 C6 |  if_b	mov	local01, #1
21128     11 29 C2 FA | 	rdbyte	local06, local03
2112c     01 26 0E F2 | 	cmp	local05, #1 wz
21130     18 00 90 5D |  if_ne	jmp	#LR__2954
21134     10 13 02 F6 | 	mov	arg01, local02
21138     14 15 02 F6 | 	mov	arg02, local06
2113c     0F 17 02 F6 | 	mov	arg03, local01
21140     00 18 06 F6 | 	mov	arg04, #0
21144     B8 33 B0 FD | 	call	#__system____ScanForChar
21148     54 00 90 FD | 	jmp	#LR__2957
2114c                 | LR__2954
2114c     0F 2B 02 F6 | 	mov	local07, local01
21150                 | LR__2955
21150     10 13 02 F6 | 	mov	arg01, local02
21154     14 15 02 F6 | 	mov	arg02, local06
21158     15 17 02 F6 | 	mov	arg03, local07
2115c     00 18 06 F6 | 	mov	arg04, #0
21160     9C 33 B0 FD | 	call	#__system____ScanForChar
21164     FD 2A 0A F6 | 	mov	local07, result1 wz
21168     30 00 90 AD |  if_e	jmp	#LR__2956
2116c     13 17 02 F6 | 	mov	arg03, local05
21170     10 13 02 F6 | 	mov	arg01, local02
21174     15 15 02 F6 | 	mov	arg02, local07
21178     FC FA BF FD | 	call	#__system__Mid_S
2117c     FD 12 02 F6 | 	mov	arg01, result1
21180     11 15 02 F6 | 	mov	arg02, local03
21184     B8 D9 BF FD | 	call	#__system___string_cmp
21188     00 FA 0D F2 | 	cmp	result1, #0 wz
2118c     15 FB 01 A6 |  if_e	mov	result1, local07
21190     0C 00 90 AD |  if_e	jmp	#LR__2957
21194     13 2B 02 F1 | 	add	local07, local05
21198     B4 FF 9F FD | 	jmp	#LR__2955
2119c                 | LR__2956
2119c     00 FA 05 F6 | 	mov	result1, #0
211a0                 | LR__2957
211a0     A7 F0 03 F6 | 	mov	ptra, fp
211a4     B2 00 A0 FD | 	call	#popregs_
211a8                 | __system__Instr_ret
211a8     2D 00 64 FD | 	ret
211ac                 | 
211ac                 | __system___strerror
211ac     00 12 56 F2 | 	cmps	arg01, #0 wc
211b0     08 00 90 CD |  if_b	jmp	#LR__2960
211b4     1A 12 56 F2 | 	cmps	arg01, #26 wc
211b8     04 00 90 CD |  if_b	jmp	#LR__2961
211bc                 | LR__2960
211bc     19 12 06 F6 | 	mov	arg01, #25
211c0                 | LR__2961
211c0     02 12 66 F0 | 	shl	arg01, #2
211c4     01 00 00 FF 
211c8     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
211cc     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
211d0     09 FB 01 FB | 	rdlong	result1, arg01
211d4     01 00 00 FF 
211d8     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
211dc                 | __system___strerror_ret
211dc     2D 00 64 FD | 	ret
211e0                 | 
211e0                 | __system___int64_shl
211e0     20 16 CE F7 | 	test	arg03, #32 wz
211e4     09 15 02 56 |  if_ne	mov	arg02, arg01
211e8     00 12 06 56 |  if_ne	mov	arg01, #0
211ec     1F 16 CE F7 | 	test	arg03, #31 wz
211f0     18 00 90 AD |  if_e	jmp	#LR__2970
211f4     0B 15 62 F0 | 	shl	arg02, arg03
211f8     09 FB 01 F6 | 	mov	result1, arg01
211fc     0B FD 61 F6 | 	neg	result2, arg03
21200     FE FA 41 F0 | 	shr	result1, result2
21204     FD 14 42 F5 | 	or	arg02, result1
21208     0B 13 62 F0 | 	shl	arg01, arg03
2120c                 | LR__2970
2120c     0A FD 01 F6 | 	mov	result2, arg02
21210     09 FB 01 F6 | 	mov	result1, arg01
21214                 | __system___int64_shl_ret
21214     2D 00 64 FD | 	ret
21218                 | 
21218                 | __system___usepins
21218     14 E6 05 F1 | 	add	ptr___system__dat__, #20
2121c     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
21220     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
21224     00 13 CA F7 | 	test	arg01, _var01 wz
21228     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
2122c     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
21230     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
21234     01 15 CA A7 |  if_e	test	arg02, _var02 wz
21238     00 FA 05 56 |  if_ne	mov	result1, #0
2123c     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
21240     14 E6 05 F1 | 	add	ptr___system__dat__, #20
21244     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
21248     09 03 42 F5 | 	or	_var02, arg01
2124c     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
21250     04 E6 05 F1 | 	add	ptr___system__dat__, #4
21254     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
21258     0A 03 42 F5 | 	or	_var02, arg02
2125c     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
21260     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
21264     01 FA 65 F6 | 	neg	result1, #1
21268                 | __system___usepins_ret
21268     2D 00 64 FD | 	ret
2126c                 | 
2126c                 | __system___freepins
2126c     14 E6 05 F1 | 	add	ptr___system__dat__, #20
21270     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
21274     09 01 22 F5 | 	andn	_var01, arg01
21278     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
2127c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
21280     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
21284     0A 01 22 F5 | 	andn	_var01, arg02
21288     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
2128c     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
21290                 | __system___freepins_ret
21290     2D 00 64 FD | 	ret
21294                 | 
21294                 | __system___float_fromuns
21294     09 17 0A F6 | 	mov	arg03, arg01 wz
21298     0B FB 01 A6 |  if_e	mov	result1, arg03
2129c     24 00 90 AD |  if_e	jmp	#LR__2980
212a0     0B 15 92 F7 | 	encod	arg02, arg03 wc
212a4     01 14 06 C1 |  if_b	add	arg02, #1
212a8     01 14 86 F1 | 	sub	arg02, #1
212ac     1F 12 06 F6 | 	mov	arg01, #31
212b0     0A 13 82 F1 | 	sub	arg01, arg02
212b4     09 17 62 F0 | 	shl	arg03, arg01
212b8     02 16 46 F0 | 	shr	arg03, #2
212bc     00 12 06 F6 | 	mov	arg01, #0
212c0     4C 09 B0 FD | 	call	#__system___float_Pack
212c4                 | LR__2980
212c4                 | __system___float_fromuns_ret
212c4     2D 00 64 FD | 	ret
212c8                 | 
212c8                 | __system___float_add
212c8     0F 4A 05 F6 | 	mov	COUNT_, #15
212cc     A8 00 A0 FD | 	call	#pushregs_
212d0     09 1F 02 F6 | 	mov	local01, arg01
212d4     0A 21 02 F6 | 	mov	local02, arg02
212d8     00 22 06 F6 | 	mov	local03, #0
212dc     0F 25 02 F6 | 	mov	local04, local01
212e0     12 27 02 F6 | 	mov	local05, local04
212e4     16 26 46 F7 | 	zerox	local05, #22
212e8     12 29 02 F6 | 	mov	local06, local04
212ec     01 28 66 F0 | 	shl	local06, #1
212f0     18 28 46 F0 | 	shr	local06, #24
212f4     1F 24 46 F0 | 	shr	local04, #31
212f8     10 13 02 F6 | 	mov	arg01, local02
212fc     09 FB 01 F6 | 	mov	result1, arg01
21300     FD 2A 02 F6 | 	mov	local07, result1
21304     15 2D 02 F6 | 	mov	local08, local07
21308     16 2C 46 F7 | 	zerox	local08, #22
2130c     15 2F 02 F6 | 	mov	local09, local07
21310     01 2E 66 F0 | 	shl	local09, #1
21314     18 2E 46 F0 | 	shr	local09, #24
21318     17 31 02 F6 | 	mov	local10, local09
2131c     1F 2A 46 F0 | 	shr	local07, #31
21320     00 32 06 F6 | 	mov	local11, #0
21324     00 34 06 F6 | 	mov	local12, #0
21328     18 29 12 F2 | 	cmp	local06, local10 wc
2132c     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
21330     2C 00 90 1D |  if_a	jmp	#LR__2990
21334     16 27 12 32 |  if_ae	cmp	local05, local08 wc
21338     24 00 90 3D |  if_ae	jmp	#LR__2990
2133c     13 37 02 F6 | 	mov	local13, local05
21340     16 27 02 F6 | 	mov	local05, local08
21344     1B 2D 02 F6 | 	mov	local08, local13
21348     14 37 02 F6 | 	mov	local13, local06
2134c     18 29 02 F6 | 	mov	local06, local10
21350     1B 31 02 F6 | 	mov	local10, local13
21354     12 37 02 F6 | 	mov	local13, local04
21358     15 25 02 F6 | 	mov	local04, local07
2135c     1B 2B 02 F6 | 	mov	local07, local13
21360                 | LR__2990
21360     FF 28 0E F2 | 	cmp	local06, #255 wz
21364     70 01 90 AD |  if_e	jmp	#LR__3005
21368     00 28 0E F2 | 	cmp	local06, #0 wz
2136c     AC 01 90 AD |  if_e	jmp	#LR__3007
21370     17 26 26 F4 | 	bith	local05, #23
21374                 | LR__2991
21374     00 30 0E F2 | 	cmp	local10, #0 wz
21378     F0 01 90 AD |  if_e	jmp	#LR__3011
2137c     17 2C 26 F4 | 	bith	local08, #23
21380                 | LR__2992
21380     7F 28 86 F1 | 	sub	local06, #127
21384     7F 30 86 F1 | 	sub	local10, #127
21388     14 39 02 F6 | 	mov	local14, local06
2138c     18 39 82 F1 | 	sub	local14, local10
21390     97 14 48 FB | 	callpa	#(@LR__2994-@LR__2993)>>2,fcache_load_ptr_
21394                 | LR__2993
21394     20 38 56 F2 | 	cmps	local14, #32 wc
21398     20 00 90 CD |  if_b	jmp	#LR__2995
2139c     16 2F 02 F6 | 	mov	local09, local08
213a0     00 32 0E F2 | 	cmp	local11, #0 wz
213a4     6F 32 62 FD | 	wrnz	local11
213a8     19 2F 42 F5 | 	or	local09, local11
213ac     17 33 02 F6 | 	mov	local11, local09
213b0     00 2C 06 F6 | 	mov	local08, #0
213b4     20 38 86 F1 | 	sub	local14, #32
213b8     D8 FF 9F FD | 	jmp	#LR__2993
213bc                 | LR__2994
213bc                 | LR__2995
213bc     00 38 0E F2 | 	cmp	local14, #0 wz
213c0     38 00 90 AD |  if_e	jmp	#LR__2996
213c4     16 37 02 F6 | 	mov	local13, local08
213c8     20 30 06 F6 | 	mov	local10, #32
213cc     1C 31 82 F1 | 	sub	local10, local14
213d0     18 37 62 F0 | 	shl	local13, local10
213d4     19 31 02 F6 | 	mov	local10, local11
213d8     20 2E 06 F6 | 	mov	local09, #32
213dc     1C 2F 82 F1 | 	sub	local09, local14
213e0     17 31 6A F0 | 	shl	local10, local09 wz
213e4     1C 33 42 F0 | 	shr	local11, local14
213e8     1C 2D 42 F0 | 	shr	local08, local14
213ec     1B 33 42 F5 | 	or	local11, local13
213f0     00 3A 06 F6 | 	mov	local15, #0
213f4     01 3A 06 56 |  if_ne	mov	local15, #1
213f8     1D 33 42 F5 | 	or	local11, local15
213fc                 | LR__2996
213fc     12 3B 02 F6 | 	mov	local15, local04
21400     15 3B 62 F5 | 	xor	local15, local07
21404     01 3A CE F7 | 	test	local15, #1 wz
21408     18 00 90 AD |  if_e	jmp	#LR__2997
2140c     16 2D 22 F6 | 	not	local08, local08
21410     19 33 22 F6 | 	not	local11, local11
21414     01 32 0E F1 | 	add	local11, #1 wz
21418     00 3A 06 F6 | 	mov	local15, #0
2141c     01 3A 06 A6 |  if_e	mov	local15, #1
21420     1D 2D 02 F1 | 	add	local08, local15
21424                 | LR__2997
21424     19 35 12 F1 | 	add	local12, local11 wc
21428     16 27 22 F1 | 	addx	local05, local08
2142c     00 26 56 F2 | 	cmps	local05, #0 wc
21430     1C 00 90 3D |  if_ae	jmp	#LR__2998
21434     01 24 66 F5 | 	xor	local04, #1
21438     13 27 22 F6 | 	not	local05, local05
2143c     1A 35 22 F6 | 	not	local12, local12
21440     01 34 0E F1 | 	add	local12, #1 wz
21444     00 3A 06 F6 | 	mov	local15, #0
21448     01 3A 06 A6 |  if_e	mov	local15, #1
2144c     1D 27 02 F1 | 	add	local05, local15
21450                 | LR__2998
21450     00 80 00 FF 
21454     00 26 16 F2 | 	cmp	local05, ##16777216 wc
21458     28 00 90 CD |  if_b	jmp	#LR__2999
2145c     01 28 06 F1 | 	add	local06, #1
21460     1A 39 02 F6 | 	mov	local14, local12
21464     01 38 06 F5 | 	and	local14, #1
21468     01 34 46 F0 | 	shr	local12, #1
2146c     13 3B 02 F6 | 	mov	local15, local05
21470     1F 3A 66 F0 | 	shl	local15, #31
21474     1D 35 42 F5 | 	or	local12, local15
21478     1C 35 42 F5 | 	or	local12, local14
2147c     01 26 46 F0 | 	shr	local05, #1
21480     3C 00 90 FD | 	jmp	#LR__3004
21484                 | LR__2999
21484     00 40 00 FF 
21488     00 26 16 F2 | 	cmp	local05, ##8388608 wc
2148c     30 00 90 3D |  if_ae	jmp	#LR__3003
21490     00 26 0E F2 | 	cmp	local05, #0 wz
21494     00 34 0E A2 |  if_e	cmp	local12, #0 wz
21498     08 24 46 A5 |  if_e	or	local04, #8
2149c     01 24 26 A5 |  if_e	andn	local04, #1
214a0     1C 00 90 AD |  if_e	jmp	#LR__3002
214a4                 | LR__3000
214a4     00 40 00 FF 
214a8     00 26 16 F2 | 	cmp	local05, ##8388608 wc
214ac     10 00 90 3D |  if_ae	jmp	#LR__3001
214b0     1A 35 12 F1 | 	add	local12, local12 wc
214b4     13 27 22 F1 | 	addx	local05, local05
214b8     01 28 86 F1 | 	sub	local06, #1
214bc     E4 FF 9F FD | 	jmp	#LR__3000
214c0                 | LR__3001
214c0                 | LR__3002
214c0                 | LR__3003
214c0                 | LR__3004
214c0     13 13 02 F6 | 	mov	arg01, local05
214c4     1A 15 02 F6 | 	mov	arg02, local12
214c8     14 17 02 F6 | 	mov	arg03, local06
214cc     12 19 02 F6 | 	mov	arg04, local04
214d0     70 34 B0 FD | 	call	#__system__pack_0550
214d4     DC 00 90 FD | 	jmp	#LR__3015
214d8                 | LR__3005
214d8     FF 30 0E F2 | 	cmp	local10, #255 wz
214dc     10 00 90 5D |  if_ne	jmp	#LR__3006
214e0     12 2B 0A F2 | 	cmp	local07, local04 wz
214e4     00 F8 3F 5F 
214e8     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
214ec     C4 00 90 5D |  if_ne	jmp	#LR__3015
214f0                 | LR__3006
214f0     00 26 0E F2 | 	cmp	local05, #0 wz
214f4     00 F8 3F 5F 
214f8     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
214fc     B4 00 90 5D |  if_ne	jmp	#LR__3015
21500     1A 15 02 F6 | 	mov	arg02, local12
21504     14 17 02 F6 | 	mov	arg03, local06
21508     12 19 02 F6 | 	mov	arg04, local04
2150c     02 18 46 F5 | 	or	arg04, #2
21510     13 13 02 F6 | 	mov	arg01, local05
21514     2C 34 B0 FD | 	call	#__system__pack_0550
21518     98 00 90 FD | 	jmp	#LR__3015
2151c                 | LR__3007
2151c     00 26 0E F2 | 	cmp	local05, #0 wz
21520     28 00 90 AD |  if_e	jmp	#LR__3010
21524     01 26 66 F0 | 	shl	local05, #1
21528     97 0E 48 FB | 	callpa	#(@LR__3009-@LR__3008)>>2,fcache_load_ptr_
2152c                 | LR__3008
2152c     00 40 00 FF 
21530     00 26 16 F2 | 	cmp	local05, ##8388608 wc
21534     14 3B 02 C6 |  if_b	mov	local15, local06
21538     01 3A 86 C1 |  if_b	sub	local15, #1
2153c     1D 29 02 C6 |  if_b	mov	local06, local15
21540     01 26 66 C0 |  if_b	shl	local05, #1
21544     E4 FF 9F CD |  if_b	jmp	#LR__3008
21548                 | LR__3009
21548     28 FE 9F FD | 	jmp	#LR__2991
2154c                 | LR__3010
2154c     15 25 02 F5 | 	and	local04, local07
21550     12 19 02 F6 | 	mov	arg04, local04
21554     08 18 46 F5 | 	or	arg04, #8
21558     00 12 06 F6 | 	mov	arg01, #0
2155c     00 14 06 F6 | 	mov	arg02, #0
21560     00 16 06 F6 | 	mov	arg03, #0
21564     DC 33 B0 FD | 	call	#__system__pack_0550
21568     48 00 90 FD | 	jmp	#LR__3015
2156c                 | LR__3011
2156c     00 2C 0E F2 | 	cmp	local08, #0 wz
21570     28 00 90 AD |  if_e	jmp	#LR__3014
21574     01 2C 66 F0 | 	shl	local08, #1
21578     97 0E 48 FB | 	callpa	#(@LR__3013-@LR__3012)>>2,fcache_load_ptr_
2157c                 | LR__3012
2157c     00 40 00 FF 
21580     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
21584     18 3B 02 C6 |  if_b	mov	local15, local10
21588     01 3A 86 C1 |  if_b	sub	local15, #1
2158c     1D 31 02 C6 |  if_b	mov	local10, local15
21590     01 2C 66 C0 |  if_b	shl	local08, #1
21594     E4 FF 9F CD |  if_b	jmp	#LR__3012
21598                 | LR__3013
21598     E4 FD 9F FD | 	jmp	#LR__2992
2159c                 | LR__3014
2159c     7F 28 86 F1 | 	sub	local06, #127
215a0     13 13 02 F6 | 	mov	arg01, local05
215a4     1A 15 02 F6 | 	mov	arg02, local12
215a8     14 17 02 F6 | 	mov	arg03, local06
215ac     12 19 02 F6 | 	mov	arg04, local04
215b0     90 33 B0 FD | 	call	#__system__pack_0550
215b4                 | LR__3015
215b4     A7 F0 03 F6 | 	mov	ptra, fp
215b8     B2 00 A0 FD | 	call	#popregs_
215bc                 | __system___float_add_ret
215bc     2D 00 64 FD | 	ret
215c0                 | 
215c0                 | __system___float_sqrt
215c0     04 4A 05 F6 | 	mov	COUNT_, #4
215c4     A8 00 A0 FD | 	call	#pushregs_
215c8     09 1F 02 F6 | 	mov	local01, arg01
215cc     09 FB 01 F6 | 	mov	result1, arg01
215d0     FD 20 02 F6 | 	mov	local02, result1
215d4     10 23 02 F6 | 	mov	local03, local02
215d8     16 22 46 F7 | 	zerox	local03, #22
215dc     10 25 02 F6 | 	mov	local04, local02
215e0     01 24 66 F0 | 	shl	local04, #1
215e4     18 24 4E F0 | 	shr	local04, #24 wz
215e8     1F 20 46 F0 | 	shr	local02, #31
215ec     70 00 90 AD |  if_e	jmp	#LR__3021
215f0     17 22 26 F4 | 	bith	local03, #23
215f4                 | LR__3020
215f4     00 20 0E F2 | 	cmp	local02, #0 wz
215f8     00 F8 3F 5F 
215fc     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
21600     88 00 90 5D |  if_ne	jmp	#LR__3024
21604     FF 24 0E F2 | 	cmp	local04, #255 wz
21608     0F FB 01 A6 |  if_e	mov	result1, local01
2160c     7C 00 90 AD |  if_e	jmp	#LR__3024
21610     7F 24 86 F1 | 	sub	local04, #127
21614     01 24 CE F7 | 	test	local04, #1 wz
21618     01 22 66 50 |  if_ne	shl	local03, #1
2161c     05 22 66 F0 | 	shl	local03, #5
21620     11 01 38 FD | 	qsqrt	#0, local03
21624     01 24 86 51 |  if_ne	sub	local04, #1
21628     12 25 52 F6 | 	abs	local04, local04 wc
2162c     01 24 46 F0 | 	shr	local04, #1
21630     12 17 82 F6 | 	negc	arg03, local04
21634     10 19 02 F6 | 	mov	arg04, local02
21638     18 12 62 FD | 	getqx	arg01
2163c     09 15 02 F6 | 	mov	arg02, arg01
21640     19 14 66 F0 | 	shl	arg02, #25
21644     07 12 46 F0 | 	shr	arg01, #7
21648     00 80 00 FF 
2164c     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
21650     01 16 06 31 |  if_ae	add	arg03, #1
21654     01 12 46 30 |  if_ae	shr	arg01, #1
21658     E8 32 B0 FD | 	call	#__system__pack_0550
2165c     2C 00 90 FD | 	jmp	#LR__3024
21660                 | LR__3021
21660     00 22 0E F2 | 	cmp	local03, #0 wz
21664     0F FB 01 A6 |  if_e	mov	result1, local01
21668     20 00 90 AD |  if_e	jmp	#LR__3024
2166c     01 22 66 F0 | 	shl	local03, #1
21670     97 0A 48 FB | 	callpa	#(@LR__3023-@LR__3022)>>2,fcache_load_ptr_
21674                 | LR__3022
21674     00 40 00 FF 
21678     00 22 16 F2 | 	cmp	local03, ##8388608 wc
2167c     01 24 86 C1 |  if_b	sub	local04, #1
21680     01 22 66 C0 |  if_b	shl	local03, #1
21684     EC FF 9F CD |  if_b	jmp	#LR__3022
21688                 | LR__3023
21688     68 FF 9F FD | 	jmp	#LR__3020
2168c                 | LR__3024
2168c     A7 F0 03 F6 | 	mov	ptra, fp
21690     B2 00 A0 FD | 	call	#popregs_
21694                 | __system___float_sqrt_ret
21694     2D 00 64 FD | 	ret
21698                 | 
21698                 | __system___float_mul
21698     0B 4A 05 F6 | 	mov	COUNT_, #11
2169c     A8 00 A0 FD | 	call	#pushregs_
216a0     09 1F 02 F6 | 	mov	local01, arg01
216a4     0A 21 02 F6 | 	mov	local02, arg02
216a8     0F 23 02 F6 | 	mov	local03, local01
216ac     11 25 02 F6 | 	mov	local04, local03
216b0     16 24 46 F7 | 	zerox	local04, #22
216b4     11 27 02 F6 | 	mov	local05, local03
216b8     01 26 66 F0 | 	shl	local05, #1
216bc     18 26 46 F0 | 	shr	local05, #24
216c0     1F 22 46 F0 | 	shr	local03, #31
216c4     10 FB 01 F6 | 	mov	result1, local02
216c8     FD 28 02 F6 | 	mov	local06, result1
216cc     14 2B 02 F6 | 	mov	local07, local06
216d0     16 2A 46 F7 | 	zerox	local07, #22
216d4     14 2D 02 F6 | 	mov	local08, local06
216d8     01 2C 66 F0 | 	shl	local08, #1
216dc     18 2C 46 F0 | 	shr	local08, #24
216e0     1F 28 46 F0 | 	shr	local06, #31
216e4     14 23 62 F5 | 	xor	local03, local06
216e8     FF 26 0E F2 | 	cmp	local05, #255 wz
216ec     90 00 90 AD |  if_e	jmp	#LR__3033
216f0     FF 2C 0E F2 | 	cmp	local08, #255 wz
216f4     D8 00 90 AD |  if_e	jmp	#LR__3035
216f8     00 26 0E F2 | 	cmp	local05, #0 wz
216fc     0C 01 90 AD |  if_e	jmp	#LR__3036
21700     17 24 26 F4 | 	bith	local04, #23
21704                 | LR__3030
21704     00 2C 0E F2 | 	cmp	local08, #0 wz
21708     44 01 90 AD |  if_e	jmp	#LR__3040
2170c     17 2A 26 F4 | 	bith	local07, #23
21710                 | LR__3031
21710     12 21 02 F6 | 	mov	local02, local04
21714     04 20 66 F0 | 	shl	local02, #4
21718     15 29 02 F6 | 	mov	local06, local07
2171c     05 28 66 F0 | 	shl	local06, #5
21720     14 21 02 FD | 	qmul	local02, local06
21724     16 27 02 F1 | 	add	local05, local08
21728     FE 26 86 F1 | 	sub	local05, #254
2172c     13 2F 02 F6 | 	mov	local09, local05
21730     04 24 66 F0 | 	shl	local04, #4
21734     05 2A 66 F0 | 	shl	local07, #5
21738     18 30 62 FD | 	getqx	local10
2173c     15 25 02 FD | 	qmul	local04, local07
21740     19 32 62 FD | 	getqy	local11
21744     00 80 00 FF 
21748     00 32 16 F2 | 	cmp	local11, ##16777216 wc
2174c     18 00 90 CD |  if_b	jmp	#LR__3032
21750     01 2E 06 F1 | 	add	local09, #1
21754     01 30 46 F0 | 	shr	local10, #1
21758     19 2D 02 F6 | 	mov	local08, local11
2175c     1F 2C 66 F0 | 	shl	local08, #31
21760     16 31 42 F5 | 	or	local10, local08
21764     01 32 46 F0 | 	shr	local11, #1
21768                 | LR__3032
21768     19 13 02 F6 | 	mov	arg01, local11
2176c     18 15 02 F6 | 	mov	arg02, local10
21770     17 17 02 F6 | 	mov	arg03, local09
21774     11 19 02 F6 | 	mov	arg04, local03
21778     C8 31 B0 FD | 	call	#__system__pack_0550
2177c     10 01 90 FD | 	jmp	#LR__3044
21780                 | LR__3033
21780     00 24 0E F2 | 	cmp	local04, #0 wz
21784     0F FB 01 56 |  if_ne	mov	result1, local01
21788     04 01 90 5D |  if_ne	jmp	#LR__3044
2178c     FF 2C 56 F2 | 	cmps	local08, #255 wc
21790     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
21794     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
21798     18 00 90 4D |  if_c_and_nz	jmp	#LR__3034
2179c     00 F8 3F CF 
217a0     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
217a4     E8 00 90 CD |  if_b	jmp	#LR__3044
217a8     00 2A 0E F2 | 	cmp	local07, #0 wz
217ac     10 FB 01 56 |  if_ne	mov	result1, local02
217b0     DC 00 90 5D |  if_ne	jmp	#LR__3044
217b4                 | LR__3034
217b4     02 22 46 F5 | 	or	local03, #2
217b8     00 12 06 F6 | 	mov	arg01, #0
217bc     00 14 06 F6 | 	mov	arg02, #0
217c0     13 17 02 F6 | 	mov	arg03, local05
217c4     11 19 02 F6 | 	mov	arg04, local03
217c8     78 31 B0 FD | 	call	#__system__pack_0550
217cc     C0 00 90 FD | 	jmp	#LR__3044
217d0                 | LR__3035
217d0     00 26 0E F2 | 	cmp	local05, #0 wz
217d4     00 24 0E A2 |  if_e	cmp	local04, #0 wz
217d8     00 F8 3F AF 
217dc     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
217e0     AC 00 90 AD |  if_e	jmp	#LR__3044
217e4     00 2A 0E F2 | 	cmp	local07, #0 wz
217e8     10 FB 01 56 |  if_ne	mov	result1, local02
217ec     A0 00 90 5D |  if_ne	jmp	#LR__3044
217f0     16 17 02 F6 | 	mov	arg03, local08
217f4     11 19 02 F6 | 	mov	arg04, local03
217f8     02 18 46 F5 | 	or	arg04, #2
217fc     00 12 06 F6 | 	mov	arg01, #0
21800     00 14 06 F6 | 	mov	arg02, #0
21804     3C 31 B0 FD | 	call	#__system__pack_0550
21808     84 00 90 FD | 	jmp	#LR__3044
2180c                 | LR__3036
2180c     00 24 0E F2 | 	cmp	local04, #0 wz
21810     20 00 90 AD |  if_e	jmp	#LR__3039
21814     01 24 66 F0 | 	shl	local04, #1
21818     97 0A 48 FB | 	callpa	#(@LR__3038-@LR__3037)>>2,fcache_load_ptr_
2181c                 | LR__3037
2181c     00 40 00 FF 
21820     00 24 16 F2 | 	cmp	local04, ##8388608 wc
21824     01 26 86 C1 |  if_b	sub	local05, #1
21828     01 24 66 C0 |  if_b	shl	local04, #1
2182c     EC FF 9F CD |  if_b	jmp	#LR__3037
21830                 | LR__3038
21830     D0 FE 9F FD | 	jmp	#LR__3030
21834                 | LR__3039
21834     08 22 46 F5 | 	or	local03, #8
21838     00 12 06 F6 | 	mov	arg01, #0
2183c     00 14 06 F6 | 	mov	arg02, #0
21840     00 16 06 F6 | 	mov	arg03, #0
21844     11 19 02 F6 | 	mov	arg04, local03
21848     F8 30 B0 FD | 	call	#__system__pack_0550
2184c     40 00 90 FD | 	jmp	#LR__3044
21850                 | LR__3040
21850     00 2A 0E F2 | 	cmp	local07, #0 wz
21854     20 00 90 AD |  if_e	jmp	#LR__3043
21858     01 2A 66 F0 | 	shl	local07, #1
2185c     97 0A 48 FB | 	callpa	#(@LR__3042-@LR__3041)>>2,fcache_load_ptr_
21860                 | LR__3041
21860     00 40 00 FF 
21864     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
21868     01 2C 86 C1 |  if_b	sub	local08, #1
2186c     01 2A 66 C0 |  if_b	shl	local07, #1
21870     EC FF 9F CD |  if_b	jmp	#LR__3041
21874                 | LR__3042
21874     98 FE 9F FD | 	jmp	#LR__3031
21878                 | LR__3043
21878     08 22 46 F5 | 	or	local03, #8
2187c     00 12 06 F6 | 	mov	arg01, #0
21880     00 14 06 F6 | 	mov	arg02, #0
21884     00 16 06 F6 | 	mov	arg03, #0
21888     11 19 02 F6 | 	mov	arg04, local03
2188c     B4 30 B0 FD | 	call	#__system__pack_0550
21890                 | LR__3044
21890     A7 F0 03 F6 | 	mov	ptra, fp
21894     B2 00 A0 FD | 	call	#popregs_
21898                 | __system___float_mul_ret
21898     2D 00 64 FD | 	ret
2189c                 | 
2189c                 | __system___float_div
2189c     0E 4A 05 F6 | 	mov	COUNT_, #14
218a0     A8 00 A0 FD | 	call	#pushregs_
218a4     09 23 02 F6 | 	mov	local03, arg01
218a8     0A 25 02 F6 | 	mov	local04, arg02
218ac     11 27 02 F6 | 	mov	local05, local03
218b0     13 29 02 F6 | 	mov	local06, local05
218b4     16 28 46 F7 | 	zerox	local06, #22
218b8     13 2B 02 F6 | 	mov	local07, local05
218bc     01 2A 66 F0 | 	shl	local07, #1
218c0     18 2A 46 F0 | 	shr	local07, #24
218c4     1F 26 46 F0 | 	shr	local05, #31
218c8     12 FB 01 F6 | 	mov	result1, local04
218cc     FD 2C 02 F6 | 	mov	local08, result1
218d0     16 2F 02 F6 | 	mov	local09, local08
218d4     16 2E 46 F7 | 	zerox	local09, #22
218d8     16 31 02 F6 | 	mov	local10, local08
218dc     01 30 66 F0 | 	shl	local10, #1
218e0     18 30 46 F0 | 	shr	local10, #24
218e4     1F 2C 46 F0 | 	shr	local08, #31
218e8     16 27 62 F5 | 	xor	local05, local08
218ec     FF 2A 0E F2 | 	cmp	local07, #255 wz
218f0     D4 00 90 AD |  if_e	jmp	#LR__3055
218f4     FF 30 0E F2 | 	cmp	local10, #255 wz
218f8     04 01 90 AD |  if_e	jmp	#LR__3056
218fc     00 2A 0E F2 | 	cmp	local07, #0 wz
21900     24 01 90 AD |  if_e	jmp	#LR__3057
21904     17 28 26 F4 | 	bith	local06, #23
21908                 | LR__3050
21908     00 30 0E F2 | 	cmp	local10, #0 wz
2190c     70 01 90 AD |  if_e	jmp	#LR__3061
21910     17 2E 26 F4 | 	bith	local09, #23
21914                 | LR__3051
21914     18 2B 82 F1 | 	sub	local07, local10
21918     15 33 02 F6 | 	mov	local11, local07
2191c     14 13 02 F6 | 	mov	arg01, local06
21920     02 12 46 F0 | 	shr	arg01, #2
21924     1E 28 66 F0 | 	shl	local06, #30
21928     14 15 02 F6 | 	mov	arg02, local06
2192c     17 17 02 F6 | 	mov	arg03, local09
21930     28 12 62 FD | 	setq	arg01
21934     0B 15 12 FD | 	qdiv	arg02, arg03
21938     00 34 06 F6 | 	mov	local12, #0
2193c     18 1E 62 FD | 	getqx	local01
21940     19 FC 61 FD | 	getqy	result2
21944     FE 20 02 F6 | 	mov	local02, result2
21948     0F 37 02 F6 | 	mov	local13, local01
2194c     00 20 4E F2 | 	cmps	local02, #0 wz
21950     1B 39 02 F6 | 	mov	local14, local13
21954     19 38 66 F0 | 	shl	local14, #25
21958     01 34 06 56 |  if_ne	mov	local12, #1
2195c     1A 39 42 F5 | 	or	local14, local12
21960     07 36 46 F0 | 	shr	local13, #7
21964     00 80 00 FF 
21968     00 36 16 F2 | 	cmp	local13, ##16777216 wc
2196c     1C 00 90 CD |  if_b	jmp	#LR__3052
21970     01 32 06 F1 | 	add	local11, #1
21974     01 38 46 F0 | 	shr	local14, #1
21978     1B 35 02 F6 | 	mov	local12, local13
2197c     1F 34 66 F0 | 	shl	local12, #31
21980     1A 39 42 F5 | 	or	local14, local12
21984     01 36 46 F0 | 	shr	local13, #1
21988     24 00 90 FD | 	jmp	#LR__3054
2198c                 | LR__3052
2198c     00 40 00 FF 
21990     00 36 16 F2 | 	cmp	local13, ##8388608 wc
21994     18 00 90 3D |  if_ae	jmp	#LR__3053
21998     01 32 86 F1 | 	sub	local11, #1
2199c     01 36 66 F0 | 	shl	local13, #1
219a0     1C 35 02 F6 | 	mov	local12, local14
219a4     1F 34 46 F0 | 	shr	local12, #31
219a8     1A 37 42 F5 | 	or	local13, local12
219ac     01 38 66 F0 | 	shl	local14, #1
219b0                 | LR__3053
219b0                 | LR__3054
219b0     1B 13 02 F6 | 	mov	arg01, local13
219b4     1C 15 02 F6 | 	mov	arg02, local14
219b8     19 17 02 F6 | 	mov	arg03, local11
219bc     13 19 02 F6 | 	mov	arg04, local05
219c0     80 2F B0 FD | 	call	#__system__pack_0550
219c4     F8 00 90 FD | 	jmp	#LR__3065
219c8                 | LR__3055
219c8     00 28 0E F2 | 	cmp	local06, #0 wz
219cc     11 FB 01 56 |  if_ne	mov	result1, local03
219d0     EC 00 90 5D |  if_ne	jmp	#LR__3065
219d4     FF 30 0E F2 | 	cmp	local10, #255 wz
219d8     00 F8 3F AF 
219dc     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
219e0     DC 00 90 AD |  if_e	jmp	#LR__3065
219e4     02 26 46 F5 | 	or	local05, #2
219e8     00 12 06 F6 | 	mov	arg01, #0
219ec     00 14 06 F6 | 	mov	arg02, #0
219f0     15 17 02 F6 | 	mov	arg03, local07
219f4     13 19 02 F6 | 	mov	arg04, local05
219f8     48 2F B0 FD | 	call	#__system__pack_0550
219fc     C0 00 90 FD | 	jmp	#LR__3065
21a00                 | LR__3056
21a00     00 2E 0E F2 | 	cmp	local09, #0 wz
21a04     12 FB 01 56 |  if_ne	mov	result1, local04
21a08     B4 00 90 5D |  if_ne	jmp	#LR__3065
21a0c     13 19 02 F6 | 	mov	arg04, local05
21a10     08 18 46 F5 | 	or	arg04, #8
21a14     00 12 06 F6 | 	mov	arg01, #0
21a18     00 14 06 F6 | 	mov	arg02, #0
21a1c     00 16 06 F6 | 	mov	arg03, #0
21a20     20 2F B0 FD | 	call	#__system__pack_0550
21a24     98 00 90 FD | 	jmp	#LR__3065
21a28                 | LR__3057
21a28     00 28 0E F2 | 	cmp	local06, #0 wz
21a2c     20 00 90 AD |  if_e	jmp	#LR__3060
21a30     01 28 66 F0 | 	shl	local06, #1
21a34     97 0A 48 FB | 	callpa	#(@LR__3059-@LR__3058)>>2,fcache_load_ptr_
21a38                 | LR__3058
21a38     00 40 00 FF 
21a3c     00 28 16 F2 | 	cmp	local06, ##8388608 wc
21a40     01 2A 86 C1 |  if_b	sub	local07, #1
21a44     01 28 66 C0 |  if_b	shl	local06, #1
21a48     EC FF 9F CD |  if_b	jmp	#LR__3058
21a4c                 | LR__3059
21a4c     B8 FE 9F FD | 	jmp	#LR__3050
21a50                 | LR__3060
21a50     00 30 0E F2 | 	cmp	local10, #0 wz
21a54     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
21a58     00 F8 3F AF 
21a5c     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
21a60     5C 00 90 AD |  if_e	jmp	#LR__3065
21a64     13 19 02 F6 | 	mov	arg04, local05
21a68     08 18 46 F5 | 	or	arg04, #8
21a6c     00 12 06 F6 | 	mov	arg01, #0
21a70     00 14 06 F6 | 	mov	arg02, #0
21a74     00 16 06 F6 | 	mov	arg03, #0
21a78     C8 2E B0 FD | 	call	#__system__pack_0550
21a7c     40 00 90 FD | 	jmp	#LR__3065
21a80                 | LR__3061
21a80     00 2E 0E F2 | 	cmp	local09, #0 wz
21a84     20 00 90 AD |  if_e	jmp	#LR__3064
21a88     01 2E 66 F0 | 	shl	local09, #1
21a8c     97 0A 48 FB | 	callpa	#(@LR__3063-@LR__3062)>>2,fcache_load_ptr_
21a90                 | LR__3062
21a90     00 40 00 FF 
21a94     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
21a98     01 30 86 C1 |  if_b	sub	local10, #1
21a9c     01 2E 66 C0 |  if_b	shl	local09, #1
21aa0     EC FF 9F CD |  if_b	jmp	#LR__3062
21aa4                 | LR__3063
21aa4     6C FE 9F FD | 	jmp	#LR__3051
21aa8                 | LR__3064
21aa8     02 26 46 F5 | 	or	local05, #2
21aac     00 12 06 F6 | 	mov	arg01, #0
21ab0     00 14 06 F6 | 	mov	arg02, #0
21ab4     00 16 06 F6 | 	mov	arg03, #0
21ab8     13 19 02 F6 | 	mov	arg04, local05
21abc     84 2E B0 FD | 	call	#__system__pack_0550
21ac0                 | LR__3065
21ac0     A7 F0 03 F6 | 	mov	ptra, fp
21ac4     B2 00 A0 FD | 	call	#popregs_
21ac8                 | __system___float_div_ret
21ac8     2D 00 64 FD | 	ret
21acc                 | 
21acc                 | __system___float_cmp
21acc     00 C0 3F FF 
21ad0     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
21ad4     00 C0 3F CF 
21ad8     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
21adc     0B FB 01 36 |  if_ae	mov	result1, arg03
21ae0     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
21ae4     00 C0 7F FF 
21ae8     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
21aec     00 C0 7F CF 
21af0     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
21af4     0B FB 01 36 |  if_ae	mov	result1, arg03
21af8     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
21afc     00 12 56 F2 | 	cmps	arg01, #0 wc
21b00     2C 00 90 3D |  if_ae	jmp	#LR__3070
21b04     00 14 56 F2 | 	cmps	arg02, #0 wc
21b08     0A FB 01 C6 |  if_b	mov	result1, arg02
21b0c     09 FB 81 C1 |  if_b	sub	result1, arg01
21b10     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
21b14     00 14 0E F2 | 	cmp	arg02, #0 wz
21b18     00 00 40 AF 
21b1c     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
21b20     00 FA 05 A6 |  if_e	mov	result1, #0
21b24     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
21b28     01 FA 65 F6 | 	neg	result1, #1
21b2c     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
21b30                 | LR__3070
21b30     00 14 56 F2 | 	cmps	arg02, #0 wc
21b34     1C 00 90 3D |  if_ae	jmp	#LR__3071
21b38     00 12 0E F2 | 	cmp	arg01, #0 wz
21b3c     00 00 40 AF 
21b40     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
21b44     00 FA 05 A6 |  if_e	mov	result1, #0
21b48     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
21b4c     01 FA 05 F6 | 	mov	result1, #1
21b50     08 00 90 FD | 	jmp	#__system___float_cmp_ret
21b54                 | LR__3071
21b54     0A 13 82 F1 | 	sub	arg01, arg02
21b58     09 FB 01 F6 | 	mov	result1, arg01
21b5c                 | __system___float_cmp_ret
21b5c     2D 00 64 FD | 	ret
21b60                 | 
21b60                 | __system___float_tointeger
21b60     02 4A 05 F6 | 	mov	COUNT_, #2
21b64     A8 00 A0 FD | 	call	#pushregs_
21b68     50 00 B0 FD | 	call	#__system___float_Unpack
21b6c     FF FF 7F FF 
21b70     FF FD 55 F2 | 	cmps	result2, ##-1 wc
21b74     34 00 90 CD |  if_b	jmp	#LR__3080
21b78     1F FC 55 F2 | 	cmps	result2, #31 wc
21b7c     2C 00 90 3D |  if_ae	jmp	#LR__3080
21b80     02 FE 65 F0 | 	shl	result3, #2
21b84     1E 1E 06 F6 | 	mov	local01, #30
21b88     FE 1E 82 F1 | 	sub	local01, result2
21b8c     0F FF 41 F0 | 	shr	result3, local01
21b90     FF 20 02 F6 | 	mov	local02, result3
21b94     0A 21 02 F1 | 	add	local02, arg02
21b98     01 20 46 F0 | 	shr	local02, #1
21b9c     00 FA 0D F2 | 	cmp	result1, #0 wz
21ba0     10 21 62 56 |  if_ne	neg	local02, local02
21ba4     10 FB 01 F6 | 	mov	result1, local02
21ba8     04 00 90 FD | 	jmp	#LR__3081
21bac                 | LR__3080
21bac     00 FA 05 F6 | 	mov	result1, #0
21bb0                 | LR__3081
21bb0     A7 F0 03 F6 | 	mov	ptra, fp
21bb4     B2 00 A0 FD | 	call	#popregs_
21bb8                 | __system___float_tointeger_ret
21bb8     2D 00 64 FD | 	ret
21bbc                 | 
21bbc                 | __system___float_Unpack
21bbc     09 01 02 F6 | 	mov	_var01, arg01
21bc0     1F 00 46 F0 | 	shr	_var01, #31
21bc4     09 03 02 F6 | 	mov	_var02, arg01
21bc8     01 02 66 F0 | 	shl	_var02, #1
21bcc     18 02 4E F0 | 	shr	_var02, #24 wz
21bd0     17 13 06 F4 | 	bitl	arg01, #279
21bd4     06 12 66 50 |  if_ne	shl	arg01, #6
21bd8     1D 12 26 54 |  if_ne	bith	arg01, #29
21bdc     1C 00 90 5D |  if_ne	jmp	#LR__3090
21be0     09 05 92 F7 | 	encod	_var03, arg01 wc
21be4     01 04 06 C1 |  if_b	add	_var03, #1
21be8     17 04 86 F1 | 	sub	_var03, #23
21bec     02 03 02 F6 | 	mov	_var02, _var03
21bf0     07 FC 05 F6 | 	mov	result2, #7
21bf4     02 FD 81 F1 | 	sub	result2, _var03
21bf8     FE 12 62 F0 | 	shl	arg01, result2
21bfc                 | LR__3090
21bfc     7F 02 86 F1 | 	sub	_var02, #127
21c00     09 FF 01 F6 | 	mov	result3, arg01
21c04     00 FB 01 F6 | 	mov	result1, _var01
21c08     01 FD 01 F6 | 	mov	result2, _var02
21c0c                 | __system___float_Unpack_ret
21c0c     2D 00 64 FD | 	ret
21c10                 | 
21c10                 | __system___float_Pack
21c10     00 00 06 F6 | 	mov	_var01, #0
21c14     00 16 0E F2 | 	cmp	arg03, #0 wz
21c18     8C 00 90 AD |  if_e	jmp	#LR__3101
21c1c     0B 03 92 F7 | 	encod	_var02, arg03 wc
21c20     01 02 06 C1 |  if_b	add	_var02, #1
21c24     21 00 06 F6 | 	mov	_var01, #33
21c28     01 01 82 F1 | 	sub	_var01, _var02
21c2c     00 17 62 F0 | 	shl	arg03, _var01
21c30     03 02 06 F6 | 	mov	_var02, #3
21c34     00 03 82 F1 | 	sub	_var02, _var01
21c38     01 15 02 F1 | 	add	arg02, _var02
21c3c     0A 05 02 F6 | 	mov	_var03, arg02
21c40     00 17 06 F1 | 	add	arg03, #256
21c44     0B 03 02 F6 | 	mov	_var02, arg03
21c48     FF 02 2E F5 | 	andn	_var02, #255 wz
21c4c     01 04 06 A1 |  if_e	add	_var03, #1
21c50     7F 04 06 F1 | 	add	_var03, #127
21c54     FF FF 7F FF 
21c58     E9 05 46 F3 | 	fges	_var03, ##-23
21c5c     FF 04 66 F3 | 	fles	_var03, #255
21c60     01 04 56 F2 | 	cmps	_var03, #1 wc
21c64     1C 00 90 3D |  if_ae	jmp	#LR__3100
21c68     01 16 46 F0 | 	shr	arg03, #1
21c6c     1F 02 C6 F9 | 	decod	_var02, #31
21c70     0B 03 02 F1 | 	add	_var02, arg03
21c74     02 05 62 F6 | 	neg	_var03, _var03
21c78     02 03 42 F0 | 	shr	_var02, _var03
21c7c     01 17 02 F6 | 	mov	arg03, _var02
21c80     00 04 06 F6 | 	mov	_var03, #0
21c84                 | LR__3100
21c84     09 FB 01 F6 | 	mov	result1, arg01
21c88     1F FA 65 F0 | 	shl	result1, #31
21c8c     02 03 02 F6 | 	mov	_var02, _var03
21c90     17 02 66 F0 | 	shl	_var02, #23
21c94     01 FB 41 F5 | 	or	result1, _var02
21c98     0B 07 02 F6 | 	mov	_var04, arg03
21c9c     09 06 46 F0 | 	shr	_var04, #9
21ca0     03 FB 41 F5 | 	or	result1, _var04
21ca4     04 00 90 FD | 	jmp	#__system___float_Pack_ret
21ca8                 | LR__3101
21ca8     00 FB 01 F6 | 	mov	result1, _var01
21cac                 | __system___float_Pack_ret
21cac     2D 00 64 FD | 	ret
21cb0                 | 
21cb0                 | __system___basic_print_float
21cb0     05 4A 05 F6 | 	mov	COUNT_, #5
21cb4     A8 00 A0 FD | 	call	#pushregs_
21cb8     09 1F 02 F6 | 	mov	local01, arg01
21cbc     0A 21 02 F6 | 	mov	local02, arg02
21cc0     0B 23 0A F6 | 	mov	local03, arg03 wz
21cc4     0C 25 02 F6 | 	mov	local04, arg04
21cc8     14 00 90 5D |  if_ne	jmp	#LR__3110
21ccc     23 24 0E F2 | 	cmp	local04, #35 wz
21cd0     80 02 10 AF 
21cd4     00 26 06 A6 |  if_e	mov	local05, ##537198592
21cd8     1D 26 C6 59 |  if_ne	decod	local05, #29
21cdc     13 23 02 F6 | 	mov	local03, local05
21ce0                 | LR__3110
21ce0     0F 13 02 F6 | 	mov	arg01, local01
21ce4     40 27 B0 FD | 	call	#__system___gettxfunc
21ce8     FD 26 0A F6 | 	mov	local05, result1 wz
21cec     00 FA 05 A6 |  if_e	mov	result1, #0
21cf0     13 13 02 56 |  if_ne	mov	arg01, local05
21cf4     11 15 02 56 |  if_ne	mov	arg02, local03
21cf8     10 17 02 56 |  if_ne	mov	arg03, local02
21cfc     12 19 02 56 |  if_ne	mov	arg04, local04
21d00     30 DF BF 5D |  if_ne	call	#__system___fmtfloat
21d04     A7 F0 03 F6 | 	mov	ptra, fp
21d08     B2 00 A0 FD | 	call	#popregs_
21d0c                 | __system___basic_print_float_ret
21d0c     2D 00 64 FD | 	ret
21d10                 | 
21d10                 | __system____builtin_atoi
21d10     07 4A 05 F6 | 	mov	COUNT_, #7
21d14     A8 00 A0 FD | 	call	#pushregs_
21d18                 | __system____builtin_atoi_enter
21d18     09 1F 02 F6 | 	mov	local01, arg01
21d1c     0A 21 02 F6 | 	mov	local02, arg02
21d20     00 22 06 F6 | 	mov	local03, #0
21d24     00 24 06 F6 | 	mov	local04, #0
21d28     00 26 06 F6 | 	mov	local05, #0
21d2c     97 08 48 FB | 	callpa	#(@LR__3121-@LR__3120)>>2,fcache_load_ptr_
21d30                 | LR__3120
21d30     0F 29 C2 FA | 	rdbyte	local06, local01
21d34     20 28 0E F2 | 	cmp	local06, #32 wz
21d38     01 1E 06 A1 |  if_e	add	local01, #1
21d3c     F0 FF 9F AD |  if_e	jmp	#LR__3120
21d40                 | LR__3121
21d40     0F 2B C2 FA | 	rdbyte	local07, local01
21d44                 | LR__3122
21d44     2D 2A 0E F2 | 	cmp	local07, #45 wz
21d48     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
21d4c     18 00 90 5D |  if_ne	jmp	#LR__3123
21d50     01 1E 06 F1 | 	add	local01, #1
21d54     2D 2A 0E F2 | 	cmp	local07, #45 wz
21d58     01 28 06 A6 |  if_e	mov	local06, #1
21d5c     14 27 C2 A2 |  if_e	subr	local05, local06
21d60     0F 2B C2 FA | 	rdbyte	local07, local01
21d64     DC FF 9F FD | 	jmp	#LR__3122
21d68                 | LR__3123
21d68     97 48 48 FB | 	callpa	#(@LR__3131-@LR__3124)>>2,fcache_load_ptr_
21d6c                 | LR__3124
21d6c                 | LR__3125
21d6c     0F 2B C2 FA | 	rdbyte	local07, local01
21d70     5F 2A 0E F2 | 	cmp	local07, #95 wz
21d74     01 1E 06 F1 | 	add	local01, #1
21d78     F0 FF 9F AD |  if_e	jmp	#LR__3125
21d7c     30 2A 0E F2 | 	cmp	local07, #48 wz
21d80     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
21d84     00 24 06 A6 |  if_e	mov	local04, #0
21d88     60 00 90 AD |  if_e	jmp	#LR__3130
21d8c     31 2A 56 F2 | 	cmps	local07, #49 wc
21d90     18 00 90 CD |  if_b	jmp	#LR__3126
21d94     3A 2A 56 F2 | 	cmps	local07, #58 wc
21d98     15 25 02 C6 |  if_b	mov	local04, local07
21d9c     30 24 86 C1 |  if_b	sub	local04, #48
21da0     00 20 0E C2 |  if_b	cmp	local02, #0 wz
21da4     0A 20 06 86 |  if_c_and_z	mov	local02, #10
21da8     40 00 90 CD |  if_b	jmp	#LR__3129
21dac                 | LR__3126
21dac     0B 20 56 F2 | 	cmps	local02, #11 wc
21db0     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
21db4     14 00 90 CD |  if_b	jmp	#LR__3127
21db8     67 2A 56 F2 | 	cmps	local07, #103 wc
21dbc     61 2A 86 C1 |  if_b	sub	local07, #97
21dc0     0A 24 06 C6 |  if_b	mov	local04, #10
21dc4     15 25 02 C1 |  if_b	add	local04, local07
21dc8     20 00 90 CD |  if_b	jmp	#LR__3128
21dcc                 | LR__3127
21dcc     0B 20 56 F2 | 	cmps	local02, #11 wc
21dd0     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
21dd4     24 00 90 CD |  if_b	jmp	#LR__3132
21dd8     47 2A 56 F2 | 	cmps	local07, #71 wc
21ddc     41 2A 86 C1 |  if_b	sub	local07, #65
21de0     0A 24 06 C6 |  if_b	mov	local04, #10
21de4     15 25 02 C1 |  if_b	add	local04, local07
21de8     10 00 90 3D |  if_ae	jmp	#LR__3132
21dec                 | LR__3128
21dec                 | LR__3129
21dec                 | LR__3130
21dec     11 21 02 FD | 	qmul	local02, local03
21df0     18 22 62 FD | 	getqx	local03
21df4     12 23 02 F1 | 	add	local03, local04
21df8     70 FF 9F FD | 	jmp	#LR__3124
21dfc                 | LR__3131
21dfc                 | LR__3132
21dfc     00 20 0E F2 | 	cmp	local02, #0 wz
21e00     64 00 90 5D |  if_ne	jmp	#LR__3138
21e04     78 2A 0E F2 | 	cmp	local07, #120 wz
21e08     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
21e0c     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
21e10     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
21e14     14 00 90 5D |  if_ne	jmp	#LR__3133
21e18     0F 13 02 F6 | 	mov	arg01, local01
21e1c     10 14 06 F6 | 	mov	arg02, #16
21e20     EC FE BF FD | 	call	#__system____builtin_atoi
21e24     FD 22 02 F6 | 	mov	local03, result1
21e28     3C 00 90 FD | 	jmp	#LR__3137
21e2c                 | LR__3133
21e2c     62 2A 0E F2 | 	cmp	local07, #98 wz
21e30     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
21e34     14 00 90 5D |  if_ne	jmp	#LR__3134
21e38     0F 13 02 F6 | 	mov	arg01, local01
21e3c     02 14 06 F6 | 	mov	arg02, #2
21e40     CC FE BF FD | 	call	#__system____builtin_atoi
21e44     FD 22 02 F6 | 	mov	local03, result1
21e48     1C 00 90 FD | 	jmp	#LR__3136
21e4c                 | LR__3134
21e4c     6F 2A 0E F2 | 	cmp	local07, #111 wz
21e50     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
21e54     10 00 90 5D |  if_ne	jmp	#LR__3135
21e58     0F 13 02 F6 | 	mov	arg01, local01
21e5c     08 14 06 F6 | 	mov	arg02, #8
21e60     AC FE BF FD | 	call	#__system____builtin_atoi
21e64     FD 22 02 F6 | 	mov	local03, result1
21e68                 | LR__3135
21e68                 | LR__3136
21e68                 | LR__3137
21e68                 | LR__3138
21e68     00 26 0E F2 | 	cmp	local05, #0 wz
21e6c     11 23 62 56 |  if_ne	neg	local03, local03
21e70     11 FB 01 F6 | 	mov	result1, local03
21e74     A7 F0 03 F6 | 	mov	ptra, fp
21e78     B2 00 A0 FD | 	call	#popregs_
21e7c                 | __system____builtin_atoi_ret
21e7c     2D 00 64 FD | 	ret
21e80                 | 
21e80                 | __system____builtin_atof
21e80     07 4A 05 F6 | 	mov	COUNT_, #7
21e84     A8 00 A0 FD | 	call	#pushregs_
21e88     09 1F 02 F6 | 	mov	local01, arg01
21e8c     00 20 06 F6 | 	mov	local02, #0
21e90     00 22 06 F6 | 	mov	local03, #0
21e94     00 24 06 F6 | 	mov	local04, #0
21e98     00 26 06 F6 | 	mov	local05, #0
21e9c     97 08 48 FB | 	callpa	#(@LR__3141-@LR__3140)>>2,fcache_load_ptr_
21ea0                 | LR__3140
21ea0     0F 17 C2 FA | 	rdbyte	arg03, local01
21ea4     20 16 0E F2 | 	cmp	arg03, #32 wz
21ea8     01 1E 06 A1 |  if_e	add	local01, #1
21eac     F0 FF 9F AD |  if_e	jmp	#LR__3140
21eb0                 | LR__3141
21eb0     0F 29 C2 FA | 	rdbyte	local06, local01
21eb4                 | LR__3142
21eb4     2B 28 0E F2 | 	cmp	local06, #43 wz
21eb8     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
21ebc     14 00 90 5D |  if_ne	jmp	#LR__3143
21ec0     2D 28 0E F2 | 	cmp	local06, #45 wz
21ec4     1F 24 E6 A4 |  if_e	bitnot	local04, #31
21ec8     01 1E 06 F1 | 	add	local01, #1
21ecc     0F 29 C2 FA | 	rdbyte	local06, local01
21ed0     E0 FF 9F FD | 	jmp	#LR__3142
21ed4                 | LR__3143
21ed4                 | LR__3144
21ed4     97 08 48 FB | 	callpa	#(@LR__3146-@LR__3145)>>2,fcache_load_ptr_
21ed8                 | LR__3145
21ed8     0F 29 C2 FA | 	rdbyte	local06, local01
21edc     5F 28 0E F2 | 	cmp	local06, #95 wz
21ee0     01 1E 06 F1 | 	add	local01, #1
21ee4     F0 FF 9F AD |  if_e	jmp	#LR__3145
21ee8                 | LR__3146
21ee8     00 28 0E F2 | 	cmp	local06, #0 wz
21eec     5C 00 90 AD |  if_e	jmp	#LR__3148
21ef0     30 28 56 F2 | 	cmps	local06, #48 wc
21ef4     44 00 90 CD |  if_b	jmp	#LR__3147
21ef8     3A 28 56 F2 | 	cmps	local06, #58 wc
21efc     3C 00 90 3D |  if_ae	jmp	#LR__3147
21f00     10 13 02 F6 | 	mov	arg01, local02
21f04     00 90 20 FF 
21f08     00 14 06 F6 | 	mov	arg02, ##1092616192
21f0c     88 F7 BF FD | 	call	#__system___float_mul
21f10     FD 20 02 F6 | 	mov	local02, result1
21f14     30 28 86 F1 | 	sub	local06, #48
21f18     14 13 02 F6 | 	mov	arg01, local06
21f1c     74 F3 BF FD | 	call	#__system___float_fromuns
21f20     FD 14 02 F6 | 	mov	arg02, result1
21f24     10 13 02 F6 | 	mov	arg01, local02
21f28     9C F3 BF FD | 	call	#__system___float_add
21f2c     FD 20 02 F6 | 	mov	local02, result1
21f30     00 26 0E F2 | 	cmp	local05, #0 wz
21f34     01 22 86 51 |  if_ne	sub	local03, #1
21f38     98 FF 9F FD | 	jmp	#LR__3144
21f3c                 | LR__3147
21f3c     2E 28 0E F2 | 	cmp	local06, #46 wz
21f40     00 26 0E A2 |  if_e	cmp	local05, #0 wz
21f44     01 26 06 A6 |  if_e	mov	local05, #1
21f48     88 FF 9F AD |  if_e	jmp	#LR__3144
21f4c                 | LR__3148
21f4c     45 28 0E F2 | 	cmp	local06, #69 wz
21f50     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
21f54     18 00 90 5D |  if_ne	jmp	#LR__3149
21f58     0F 13 02 F6 | 	mov	arg01, local01
21f5c     00 14 06 F6 | 	mov	arg02, #0
21f60     AC FD BF FD | 	call	#__system____builtin_atoi
21f64     11 FB 01 F1 | 	add	result1, local03
21f68     FD 2A 02 F6 | 	mov	local07, result1
21f6c     04 00 90 FD | 	jmp	#LR__3150
21f70                 | LR__3149
21f70     11 2B 02 F6 | 	mov	local07, local03
21f74                 | LR__3150
21f74     15 17 02 F6 | 	mov	arg03, local07
21f78     10 13 02 F6 | 	mov	arg01, local02
21f7c     00 90 20 FF 
21f80     00 14 06 F6 | 	mov	arg02, ##1092616192
21f84     BC 06 B0 FD | 	call	#__system___float_pow_n
21f88     12 FB 61 F5 | 	xor	result1, local04
21f8c     A7 F0 03 F6 | 	mov	ptra, fp
21f90     B2 00 A0 FD | 	call	#popregs_
21f94                 | __system____builtin_atof_ret
21f94     2D 00 64 FD | 	ret
21f98                 | 
21f98                 | __system____builtin_ilogb
21f98     20 FC BF FD | 	call	#__system___float_Unpack
21f9c     00 FE 0D F2 | 	cmp	result3, #0 wz
21fa0     00 00 40 AF 
21fa4     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
21fa8     24 00 90 AD |  if_e	jmp	#LR__3161
21fac     80 FC 0D F2 | 	cmp	result2, #128 wz
21fb0     18 00 90 5D |  if_ne	jmp	#LR__3160
21fb4     00 00 10 FF 
21fb8     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
21fbc     1E FA CD A9 |  if_e	bmask	result1, #30
21fc0     0C 00 90 AD |  if_e	jmp	#LR__3161
21fc4     1F FA C5 F9 | 	decod	result1, #31
21fc8     04 00 90 FD | 	jmp	#LR__3161
21fcc                 | LR__3160
21fcc     FE FA 01 F6 | 	mov	result1, result2
21fd0                 | LR__3161
21fd0                 | __system____builtin_ilogb_ret
21fd0     2D 00 64 FD | 	ret
21fd4                 | 
21fd4                 | __system____builtin_sinf
21fd4     03 4A 05 F6 | 	mov	COUNT_, #3
21fd8     A8 00 A0 FD | 	call	#pushregs_
21fdc     09 1F 02 F6 | 	mov	local01, arg01
21fe0     87 64 20 FF 
21fe4     DB 15 06 F6 | 	mov	arg02, ##1086918619
21fe8     B0 F8 BF FD | 	call	#__system___float_div
21fec     FD 12 02 F6 | 	mov	arg01, result1
21ff0     00 14 06 F6 | 	mov	arg02, #0
21ff4     68 FB BF FD | 	call	#__system___float_tointeger
21ff8     FD 16 0A F6 | 	mov	arg03, result1 wz
21ffc     44 00 90 AD |  if_e	jmp	#LR__3170
22000     0B 13 52 F6 | 	abs	arg01, arg03 wc
22004     1F 20 C6 C9 |  if_b	decod	local02, #31
22008     00 20 06 36 |  if_ae	mov	local02, #0
2200c     84 F2 BF FD | 	call	#__system___float_fromuns
22010     10 FB 61 F5 | 	xor	result1, local02
22014     FD 12 02 F6 | 	mov	arg01, result1
22018     1E 14 C6 F9 | 	decod	arg02, #30
2201c     78 F6 BF FD | 	call	#__system___float_mul
22020     FD 12 02 F6 | 	mov	arg01, result1
22024     87 24 20 FF 
22028     DB 15 06 F6 | 	mov	arg02, ##1078530011
2202c     68 F6 BF FD | 	call	#__system___float_mul
22030     FD 14 02 F6 | 	mov	arg02, result1
22034     0F 13 02 F6 | 	mov	arg01, local01
22038     1F 14 E6 F4 | 	bitnot	arg02, #31
2203c     88 F2 BF FD | 	call	#__system___float_add
22040     FD 1E 02 F6 | 	mov	local01, result1
22044                 | LR__3170
22044     0F 13 02 F6 | 	mov	arg01, local01
22048     66 E6 1E FF 
2204c     CD 14 06 F6 | 	mov	arg02, ##1036831949
22050     01 16 06 F6 | 	mov	arg03, #1
22054     74 FA BF FD | 	call	#__system___float_cmp
22058     00 FA 55 F2 | 	cmps	result1, #0 wc
2205c     5C 00 90 3D |  if_ae	jmp	#LR__3171
22060     0F 13 02 F6 | 	mov	arg01, local01
22064     66 E6 5E FF 
22068     CD 14 06 F6 | 	mov	arg02, ##-1110651699
2206c     01 16 66 F6 | 	neg	arg03, #1
22070     58 FA BF FD | 	call	#__system___float_cmp
22074     01 FA 55 F2 | 	cmps	result1, #1 wc
22078     40 00 90 CD |  if_b	jmp	#LR__3171
2207c     0F 13 02 F6 | 	mov	arg01, local01
22080     0F 15 02 F6 | 	mov	arg02, local01
22084     10 F6 BF FD | 	call	#__system___float_mul
22088     FD 12 02 F6 | 	mov	arg01, result1
2208c     0F 15 02 F6 | 	mov	arg02, local01
22090     04 F6 BF FD | 	call	#__system___float_mul
22094     FD 12 02 F6 | 	mov	arg01, result1
22098     00 60 20 FF 
2209c     00 14 06 F6 | 	mov	arg02, ##1086324736
220a0     F8 F7 BF FD | 	call	#__system___float_div
220a4     FD 14 02 F6 | 	mov	arg02, result1
220a8     0F 13 02 F6 | 	mov	arg01, local01
220ac     1F 14 E6 F4 | 	bitnot	arg02, #31
220b0     14 F2 BF FD | 	call	#__system___float_add
220b4     FD 22 02 F6 | 	mov	local03, result1
220b8     54 00 90 FD | 	jmp	#LR__3172
220bc                 | LR__3171
220bc     0F 13 02 F6 | 	mov	arg01, local01
220c0     7C 91 26 FF 
220c4     83 15 06 F6 | 	mov	arg02, ##1294137731
220c8     CC F5 BF FD | 	call	#__system___float_mul
220cc     FD 12 02 F6 | 	mov	arg01, result1
220d0     00 14 06 F6 | 	mov	arg02, #0
220d4     88 FA BF FD | 	call	#__system___float_tointeger
220d8     02 FA 65 F0 | 	shl	result1, #2
220dc     00 00 A0 FF 
220e0     FD 00 48 FD | 	qrotate	##1073741824, result1
220e4     19 12 62 FD | 	getqy	arg01
220e8     09 13 52 F6 | 	abs	arg01, arg01 wc
220ec     1F 20 C6 C9 |  if_b	decod	local02, #31
220f0     00 20 06 36 |  if_ae	mov	local02, #0
220f4     9C F1 BF FD | 	call	#__system___float_fromuns
220f8     10 FB 61 F5 | 	xor	result1, local02
220fc     FD 12 02 F6 | 	mov	arg01, result1
22100     00 40 27 FF 
22104     00 14 06 F6 | 	mov	arg02, ##1317011456
22108     90 F7 BF FD | 	call	#__system___float_div
2210c     FD 22 02 F6 | 	mov	local03, result1
22110                 | LR__3172
22110     11 FB 01 F6 | 	mov	result1, local03
22114     A7 F0 03 F6 | 	mov	ptra, fp
22118     B2 00 A0 FD | 	call	#popregs_
2211c                 | __system____builtin_sinf_ret
2211c     2D 00 64 FD | 	ret
22120                 | 
22120                 | __system____builtin_tanf
22120     02 4A 05 F6 | 	mov	COUNT_, #2
22124     A8 00 A0 FD | 	call	#pushregs_
22128     09 1F 02 F6 | 	mov	local01, arg01
2212c     A4 FE BF FD | 	call	#__system____builtin_sinf
22130     FD 20 02 F6 | 	mov	local02, result1
22134     0F 15 02 F6 | 	mov	arg02, local01
22138     87 E4 1F FF 
2213c     DB 13 06 F6 | 	mov	arg01, ##1070141403
22140     1F 14 E6 F4 | 	bitnot	arg02, #31
22144     80 F1 BF FD | 	call	#__system___float_add
22148     FD 12 02 F6 | 	mov	arg01, result1
2214c     84 FE BF FD | 	call	#__system____builtin_sinf
22150     FD 14 02 F6 | 	mov	arg02, result1
22154     10 13 02 F6 | 	mov	arg01, local02
22158     40 F7 BF FD | 	call	#__system___float_div
2215c     A7 F0 03 F6 | 	mov	ptra, fp
22160     B2 00 A0 FD | 	call	#popregs_
22164                 | __system____builtin_tanf_ret
22164     2D 00 64 FD | 	ret
22168                 | 
22168                 | __system____builtin_asinf
22168     01 4A 05 F6 | 	mov	COUNT_, #1
2216c     A8 00 A0 FD | 	call	#pushregs_
22170     09 1F 02 F6 | 	mov	local01, arg01
22174     0F 15 02 F6 | 	mov	arg02, local01
22178     0F 13 02 F6 | 	mov	arg01, local01
2217c     18 F5 BF FD | 	call	#__system___float_mul
22180     FD 14 02 F6 | 	mov	arg02, result1
22184     00 C0 1F FF 
22188     00 12 06 F6 | 	mov	arg01, ##1065353216
2218c     1F 14 E6 F4 | 	bitnot	arg02, #31
22190     34 F1 BF FD | 	call	#__system___float_add
22194     FD 12 02 F6 | 	mov	arg01, result1
22198     24 F4 BF FD | 	call	#__system___float_sqrt
2219c     FD 14 02 F6 | 	mov	arg02, result1
221a0     0F 13 02 F6 | 	mov	arg01, local01
221a4     58 00 B0 FD | 	call	#__system____builtin_atan2f
221a8     A7 F0 03 F6 | 	mov	ptra, fp
221ac     B2 00 A0 FD | 	call	#popregs_
221b0                 | __system____builtin_asinf_ret
221b0     2D 00 64 FD | 	ret
221b4                 | 
221b4                 | __system____builtin_acosf
221b4     01 4A 05 F6 | 	mov	COUNT_, #1
221b8     A8 00 A0 FD | 	call	#pushregs_
221bc     09 1F 02 F6 | 	mov	local01, arg01
221c0     0F 15 02 F6 | 	mov	arg02, local01
221c4     0F 13 02 F6 | 	mov	arg01, local01
221c8     CC F4 BF FD | 	call	#__system___float_mul
221cc     FD 14 02 F6 | 	mov	arg02, result1
221d0     00 C0 1F FF 
221d4     00 12 06 F6 | 	mov	arg01, ##1065353216
221d8     1F 14 E6 F4 | 	bitnot	arg02, #31
221dc     E8 F0 BF FD | 	call	#__system___float_add
221e0     FD 12 02 F6 | 	mov	arg01, result1
221e4     D8 F3 BF FD | 	call	#__system___float_sqrt
221e8     FD 12 02 F6 | 	mov	arg01, result1
221ec     0F 15 02 F6 | 	mov	arg02, local01
221f0     0C 00 B0 FD | 	call	#__system____builtin_atan2f
221f4     A7 F0 03 F6 | 	mov	ptra, fp
221f8     B2 00 A0 FD | 	call	#popregs_
221fc                 | __system____builtin_acosf_ret
221fc     2D 00 64 FD | 	ret
22200                 | 
22200                 | __system____builtin_atan2f
22200     04 4A 05 F6 | 	mov	COUNT_, #4
22204     A8 00 A0 FD | 	call	#pushregs_
22208     09 1F 02 F6 | 	mov	local01, arg01
2220c     0A 21 02 F6 | 	mov	local02, arg02
22210     0F 13 02 F6 | 	mov	arg01, local01
22214     00 14 06 F6 | 	mov	arg02, #0
22218     01 16 06 F6 | 	mov	arg03, #1
2221c     AC F8 BF FD | 	call	#__system___float_cmp
22220     00 FA 0D F2 | 	cmp	result1, #0 wz
22224     28 00 90 5D |  if_ne	jmp	#LR__3180
22228     10 13 02 F6 | 	mov	arg01, local02
2222c     00 14 06 F6 | 	mov	arg02, #0
22230     01 16 06 F6 | 	mov	arg03, #1
22234     94 F8 BF FD | 	call	#__system___float_cmp
22238     00 FA 55 F2 | 	cmps	result1, #0 wc
2223c     87 24 60 CF 
22240     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
22244     DC 00 90 CD |  if_b	jmp	#LR__3181
22248     00 FA 05 F6 | 	mov	result1, #0
2224c     D4 00 90 FD | 	jmp	#LR__3181
22250                 | LR__3180
22250     10 13 02 F6 | 	mov	arg01, local02
22254     10 15 02 F6 | 	mov	arg02, local02
22258     3C F4 BF FD | 	call	#__system___float_mul
2225c     FD 22 02 F6 | 	mov	local03, result1
22260     0F 13 02 F6 | 	mov	arg01, local01
22264     0F 15 02 F6 | 	mov	arg02, local01
22268     2C F4 BF FD | 	call	#__system___float_mul
2226c     FD 14 02 F6 | 	mov	arg02, result1
22270     11 13 02 F6 | 	mov	arg01, local03
22274     50 F0 BF FD | 	call	#__system___float_add
22278     FD 12 02 F6 | 	mov	arg01, result1
2227c     40 F3 BF FD | 	call	#__system___float_sqrt
22280     FD 22 02 F6 | 	mov	local03, result1
22284     10 13 02 F6 | 	mov	arg01, local02
22288     11 15 02 F6 | 	mov	arg02, local03
2228c     0C F6 BF FD | 	call	#__system___float_div
22290     FD 20 02 F6 | 	mov	local02, result1
22294     0F 13 02 F6 | 	mov	arg01, local01
22298     11 15 02 F6 | 	mov	arg02, local03
2229c     FC F5 BF FD | 	call	#__system___float_div
222a0     FD 1E 02 F6 | 	mov	local01, result1
222a4     00 40 27 FF 
222a8     00 12 06 F6 | 	mov	arg01, ##1317011456
222ac     10 15 02 F6 | 	mov	arg02, local02
222b0     E4 F3 BF FD | 	call	#__system___float_mul
222b4     FD 12 02 F6 | 	mov	arg01, result1
222b8     00 14 06 F6 | 	mov	arg02, #0
222bc     A0 F8 BF FD | 	call	#__system___float_tointeger
222c0     FD 22 02 F6 | 	mov	local03, result1
222c4     00 40 27 FF 
222c8     00 12 06 F6 | 	mov	arg01, ##1317011456
222cc     0F 15 02 F6 | 	mov	arg02, local01
222d0     C4 F3 BF FD | 	call	#__system___float_mul
222d4     FD 12 02 F6 | 	mov	arg01, result1
222d8     00 14 06 F6 | 	mov	arg02, #0
222dc     80 F8 BF FD | 	call	#__system___float_tointeger
222e0     FD 22 52 FD | 	qvector	local03, result1
222e4     87 24 20 FF 
222e8     DB 23 06 F6 | 	mov	local03, ##1078530011
222ec     19 12 62 FD | 	getqy	arg01
222f0     01 12 C6 F0 | 	sar	arg01, #1
222f4     09 13 52 F6 | 	abs	arg01, arg01 wc
222f8     1F 24 C6 C9 |  if_b	decod	local04, #31
222fc     00 24 06 36 |  if_ae	mov	local04, #0
22300     90 EF BF FD | 	call	#__system___float_fromuns
22304     12 FB 61 F5 | 	xor	result1, local04
22308     FD 12 02 F6 | 	mov	arg01, result1
2230c     00 40 27 FF 
22310     00 14 06 F6 | 	mov	arg02, ##1317011456
22314     84 F5 BF FD | 	call	#__system___float_div
22318     FD 14 02 F6 | 	mov	arg02, result1
2231c     11 13 02 F6 | 	mov	arg01, local03
22320     74 F3 BF FD | 	call	#__system___float_mul
22324                 | LR__3181
22324     A7 F0 03 F6 | 	mov	ptra, fp
22328     B2 00 A0 FD | 	call	#popregs_
2232c                 | __system____builtin_atan2f_ret
2232c     2D 00 64 FD | 	ret
22330                 | 
22330                 | __system____builtin_exp2f
22330     04 4A 05 F6 | 	mov	COUNT_, #4
22334     A8 00 A0 FD | 	call	#pushregs_
22338     09 1F 02 F6 | 	mov	local01, arg01
2233c     00 7F 21 FF 
22340     00 14 06 F6 | 	mov	arg02, ##1123942400
22344     01 16 66 F6 | 	neg	arg03, #1
22348     80 F7 BF FD | 	call	#__system___float_cmp
2234c     00 FA 55 F2 | 	cmps	result1, #0 wc
22350     00 C0 3F 3F 
22354     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
22358     DC 00 90 3D |  if_ae	jmp	#LR__3191
2235c     0F 13 02 F6 | 	mov	arg01, local01
22360     00 7F 61 FF 
22364     00 14 06 F6 | 	mov	arg02, ##-1023541248
22368     01 16 06 F6 | 	mov	arg03, #1
2236c     5C F7 BF FD | 	call	#__system___float_cmp
22370     00 FA 55 F2 | 	cmps	result1, #0 wc
22374     00 FA 05 C6 |  if_b	mov	result1, #0
22378     BC 00 90 CD |  if_b	jmp	#LR__3191
2237c     0F 13 02 F6 | 	mov	arg01, local01
22380     00 14 06 F6 | 	mov	arg02, #0
22384     D8 F7 BF FD | 	call	#__system___float_tointeger
22388     FD 20 02 F6 | 	mov	local02, result1
2238c     10 13 52 F6 | 	abs	arg01, local02 wc
22390     1F 22 C6 C9 |  if_b	decod	local03, #31
22394     00 22 06 36 |  if_ae	mov	local03, #0
22398     F8 EE BF FD | 	call	#__system___float_fromuns
2239c     11 FB 61 F5 | 	xor	result1, local03
223a0     FD 14 02 F6 | 	mov	arg02, result1
223a4     0F 13 02 F6 | 	mov	arg01, local01
223a8     1F 14 E6 F4 | 	bitnot	arg02, #31
223ac     18 EF BF FD | 	call	#__system___float_add
223b0     FD 24 02 F6 | 	mov	local04, result1
223b4     12 13 02 F6 | 	mov	arg01, local04
223b8     00 14 06 F6 | 	mov	arg02, #0
223bc     01 16 06 F6 | 	mov	arg03, #1
223c0     08 F7 BF FD | 	call	#__system___float_cmp
223c4     00 FA 55 F2 | 	cmps	result1, #0 wc
223c8     18 00 90 3D |  if_ae	jmp	#LR__3190
223cc     12 13 02 F6 | 	mov	arg01, local04
223d0     00 C0 1F FF 
223d4     00 14 06 F6 | 	mov	arg02, ##1065353216
223d8     EC EE BF FD | 	call	#__system___float_add
223dc     FD 24 02 F6 | 	mov	local04, result1
223e0     01 20 86 F1 | 	sub	local02, #1
223e4                 | LR__3190
223e4     7F 20 06 F1 | 	add	local02, #127
223e8     17 20 66 F0 | 	shl	local02, #23
223ec     12 13 02 F6 | 	mov	arg01, local04
223f0     00 80 26 FF 
223f4     00 14 06 F6 | 	mov	arg02, ##1291845632
223f8     9C F2 BF FD | 	call	#__system___float_mul
223fc     FD 12 02 F6 | 	mov	arg01, result1
22400     00 14 06 F6 | 	mov	arg02, #0
22404     58 F7 BF FD | 	call	#__system___float_tointeger
22408     FD 24 0A F6 | 	mov	local04, result1 wz
2240c     10 FB 01 A6 |  if_e	mov	result1, local02
22410     24 00 90 AD |  if_e	jmp	#LR__3191
22414     3E 24 26 F4 | 	bith	local04, #62
22418     0F 24 62 FD | 	qexp	local04
2241c     10 13 02 F6 | 	mov	arg01, local02
22420     18 14 62 FD | 	getqx	arg02
22424     01 14 06 F1 | 	add	arg02, #1
22428     01 14 46 F0 | 	shr	arg02, #1
2242c     00 80 1F FF 
22430     00 14 06 F1 | 	add	arg02, ##1056964608
22434     60 F2 BF FD | 	call	#__system___float_mul
22438                 | LR__3191
22438     A7 F0 03 F6 | 	mov	ptra, fp
2243c     B2 00 A0 FD | 	call	#popregs_
22440                 | __system____builtin_exp2f_ret
22440     2D 00 64 FD | 	ret
22444                 | 
22444                 | __system____builtin_log2f
22444     06 4A 05 F6 | 	mov	COUNT_, #6
22448     A8 00 A0 FD | 	call	#pushregs_
2244c     09 1F 02 F6 | 	mov	local01, arg01
22450     09 21 0A F6 | 	mov	local02, arg01 wz
22454     00 00 40 5F 
22458     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
2245c     00 40 00 AF 
22460     00 FA 65 A6 |  if_e	neg	result1, ##8388608
22464     08 01 90 AD |  if_e	jmp	#LR__3204
22468     00 20 56 F2 | 	cmps	local02, #0 wc
2246c     00 E0 3F CF 
22470     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
22474     F8 00 90 CD |  if_b	jmp	#LR__3204
22478     0F 13 02 F6 | 	mov	arg01, local01
2247c     00 90 20 FF 
22480     00 14 06 F6 | 	mov	arg02, ##1092616192
22484     01 16 06 F6 | 	mov	arg03, #1
22488     40 F6 BF FD | 	call	#__system___float_cmp
2248c     00 FA 0D F2 | 	cmp	result1, #0 wz
22490     4D 2A 20 AF 
22494     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
22498     D4 00 90 AD |  if_e	jmp	#LR__3204
2249c     0F 13 02 F6 | 	mov	arg01, local01
224a0     FC 16 20 FF 
224a4     54 14 06 F6 | 	mov	arg02, ##1076754516
224a8     01 16 06 F6 | 	mov	arg03, #1
224ac     1C F6 BF FD | 	call	#__system___float_cmp
224b0     00 FA 0D F2 | 	cmp	result1, #0 wz
224b4     55 DC 1F AF 
224b8     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
224bc     B0 00 90 AD |  if_e	jmp	#LR__3204
224c0     10 23 02 F6 | 	mov	local03, local02
224c4     17 22 46 F0 | 	shr	local03, #23
224c8     11 23 E2 F8 | 	getbyte	local03, local03, #0
224cc     17 21 06 F4 | 	bitl	local02, #279
224d0     10 25 02 F6 | 	mov	local04, local02
224d4     FF 22 0E F2 | 	cmp	local03, #255 wz
224d8     1C 00 90 5D |  if_ne	jmp	#LR__3200
224dc     00 24 0E F2 | 	cmp	local04, #0 wz
224e0     00 C0 3F 5F 
224e4     00 26 06 56 |  if_ne	mov	local05, ##2139095040
224e8     00 E0 3F AF 
224ec     00 26 06 A6 |  if_e	mov	local05, ##2143289344
224f0     13 FB 01 F6 | 	mov	result1, local05
224f4     78 00 90 FD | 	jmp	#LR__3204
224f8                 | LR__3200
224f8     00 22 0E F2 | 	cmp	local03, #0 wz
224fc     17 24 26 54 |  if_ne	bith	local04, #23
22500     7F 22 86 51 |  if_ne	sub	local03, #127
22504     28 00 90 5D |  if_ne	jmp	#LR__3203
22508     00 24 0E F2 | 	cmp	local04, #0 wz
2250c     00 40 00 AF 
22510     00 FA 65 A6 |  if_e	neg	result1, ##8388608
22514     58 00 90 AD |  if_e	jmp	#LR__3204
22518     7E 22 66 F6 | 	neg	local03, #126
2251c     97 08 48 FB | 	callpa	#(@LR__3202-@LR__3201)>>2,fcache_load_ptr_
22520                 | LR__3201
22520     17 24 2E F4 | 	testbn	local04, #23 wz
22524     01 24 66 A0 |  if_e	shl	local04, #1
22528     01 22 06 A1 |  if_e	add	local03, #1
2252c     F0 FF 9F AD |  if_e	jmp	#LR__3201
22530                 | LR__3202
22530                 | LR__3203
22530     0E 24 62 FD | 	qlog	local04
22534     01 22 86 F1 | 	sub	local03, #1
22538     11 13 52 F6 | 	abs	arg01, local03 wc
2253c     1F 28 C6 C9 |  if_b	decod	local06, #31
22540     00 28 06 36 |  if_ae	mov	local06, #0
22544     18 26 62 FD | 	getqx	local05
22548     9B 26 06 F4 | 	bitl	local05, #155
2254c     08 26 06 F1 | 	add	local05, #8
22550     04 26 46 F0 | 	shr	local05, #4
22554     00 C0 1F FF 
22558     00 26 06 F1 | 	add	local05, ##1065353216
2255c     34 ED BF FD | 	call	#__system___float_fromuns
22560     14 FB 61 F5 | 	xor	result1, local06
22564     FD 14 02 F6 | 	mov	arg02, result1
22568     13 13 02 F6 | 	mov	arg01, local05
2256c     58 ED BF FD | 	call	#__system___float_add
22570                 | LR__3204
22570     A7 F0 03 F6 | 	mov	ptra, fp
22574     B2 00 A0 FD | 	call	#popregs_
22578                 | __system____builtin_log2f_ret
22578     2D 00 64 FD | 	ret
2257c                 | 
2257c                 | __system____builtin_powf
2257c     04 4A 05 F6 | 	mov	COUNT_, #4
22580     A8 00 A0 FD | 	call	#pushregs_
22584     09 1F 02 F6 | 	mov	local01, arg01
22588     0A 21 02 F6 | 	mov	local02, arg02
2258c     10 13 02 F6 | 	mov	arg01, local02
22590     00 14 06 F6 | 	mov	arg02, #0
22594     C8 F5 BF FD | 	call	#__system___float_tointeger
22598     FD 22 02 F6 | 	mov	local03, result1
2259c     11 13 52 F6 | 	abs	arg01, local03 wc
225a0     1F 24 C6 C9 |  if_b	decod	local04, #31
225a4     00 24 06 36 |  if_ae	mov	local04, #0
225a8     E8 EC BF FD | 	call	#__system___float_fromuns
225ac     12 FB 61 F5 | 	xor	result1, local04
225b0     FD 12 02 F6 | 	mov	arg01, result1
225b4     10 15 02 F6 | 	mov	arg02, local02
225b8     01 16 06 F6 | 	mov	arg03, #1
225bc     0C F5 BF FD | 	call	#__system___float_cmp
225c0     00 FA 0D F2 | 	cmp	result1, #0 wz
225c4     18 00 90 5D |  if_ne	jmp	#LR__3210
225c8     00 C0 1F FF 
225cc     00 12 06 F6 | 	mov	arg01, ##1065353216
225d0     0F 15 02 F6 | 	mov	arg02, local01
225d4     11 17 02 F6 | 	mov	arg03, local03
225d8     68 00 B0 FD | 	call	#__system___float_pow_n
225dc     58 00 90 FD | 	jmp	#LR__3211
225e0                 | LR__3210
225e0     0F 13 02 F6 | 	mov	arg01, local01
225e4     00 14 06 F6 | 	mov	arg02, #0
225e8     01 16 06 F6 | 	mov	arg03, #1
225ec     DC F4 BF FD | 	call	#__system___float_cmp
225f0     00 FA 55 F2 | 	cmps	result1, #0 wc
225f4     00 E0 3F CF 
225f8     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
225fc     38 00 90 CD |  if_b	jmp	#LR__3211
22600     0F 13 02 F6 | 	mov	arg01, local01
22604     00 14 06 F6 | 	mov	arg02, #0
22608     01 16 06 F6 | 	mov	arg03, #1
2260c     BC F4 BF FD | 	call	#__system___float_cmp
22610     00 FA 0D F2 | 	cmp	result1, #0 wz
22614     00 FA 05 A6 |  if_e	mov	result1, #0
22618     1C 00 90 AD |  if_e	jmp	#LR__3211
2261c     0F 13 02 F6 | 	mov	arg01, local01
22620     20 FE BF FD | 	call	#__system____builtin_log2f
22624     FD 12 02 F6 | 	mov	arg01, result1
22628     10 15 02 F6 | 	mov	arg02, local02
2262c     68 F0 BF FD | 	call	#__system___float_mul
22630     FD 12 02 F6 | 	mov	arg01, result1
22634     F8 FC BF FD | 	call	#__system____builtin_exp2f
22638                 | LR__3211
22638     A7 F0 03 F6 | 	mov	ptra, fp
2263c     B2 00 A0 FD | 	call	#popregs_
22640                 | __system____builtin_powf_ret
22640     2D 00 64 FD | 	ret
22644                 | 
22644                 | __system___float_pow_n
22644     05 4A 05 F6 | 	mov	COUNT_, #5
22648     A8 00 A0 FD | 	call	#pushregs_
2264c     09 1F 02 F6 | 	mov	local01, arg01
22650     0A 21 02 F6 | 	mov	local02, arg02
22654     0B 23 02 F6 | 	mov	local03, arg03
22658     00 22 56 F2 | 	cmps	local03, #0 wc
2265c     18 00 90 3D |  if_ae	jmp	#LR__3220
22660     01 24 06 F6 | 	mov	local04, #1
22664     11 23 62 F6 | 	neg	local03, local03
22668     00 22 56 F2 | 	cmps	local03, #0 wc
2266c     00 FA 05 C6 |  if_b	mov	result1, #0
22670     94 00 90 CD |  if_b	jmp	#LR__3228
22674     04 00 90 FD | 	jmp	#LR__3221
22678                 | LR__3220
22678     00 24 06 F6 | 	mov	local04, #0
2267c                 | LR__3221
2267c     00 C0 1F FF 
22680     00 26 06 F6 | 	mov	local05, ##1065353216
22684                 | LR__3222
22684     01 22 56 F2 | 	cmps	local03, #1 wc
22688     30 00 90 CD |  if_b	jmp	#LR__3224
2268c     01 22 CE F7 | 	test	local03, #1 wz
22690     10 00 90 AD |  if_e	jmp	#LR__3223
22694     13 13 02 F6 | 	mov	arg01, local05
22698     10 15 02 F6 | 	mov	arg02, local02
2269c     F8 EF BF FD | 	call	#__system___float_mul
226a0     FD 26 02 F6 | 	mov	local05, result1
226a4                 | LR__3223
226a4     01 22 C6 F0 | 	sar	local03, #1
226a8     10 13 02 F6 | 	mov	arg01, local02
226ac     10 15 02 F6 | 	mov	arg02, local02
226b0     E4 EF BF FD | 	call	#__system___float_mul
226b4     FD 20 02 F6 | 	mov	local02, result1
226b8     C8 FF 9F FD | 	jmp	#LR__3222
226bc                 | LR__3224
226bc     00 24 0E F2 | 	cmp	local04, #0 wz
226c0     14 00 90 AD |  if_e	jmp	#LR__3225
226c4     0F 13 02 F6 | 	mov	arg01, local01
226c8     13 15 02 F6 | 	mov	arg02, local05
226cc     CC F1 BF FD | 	call	#__system___float_div
226d0     FD 26 02 F6 | 	mov	local05, result1
226d4     2C 00 90 FD | 	jmp	#LR__3227
226d8                 | LR__3225
226d8     0F 13 02 F6 | 	mov	arg01, local01
226dc     00 C0 1F FF 
226e0     00 14 06 F6 | 	mov	arg02, ##1065353216
226e4     01 16 06 F6 | 	mov	arg03, #1
226e8     E0 F3 BF FD | 	call	#__system___float_cmp
226ec     00 FA 0D F2 | 	cmp	result1, #0 wz
226f0     10 00 90 AD |  if_e	jmp	#LR__3226
226f4     0F 13 02 F6 | 	mov	arg01, local01
226f8     13 15 02 F6 | 	mov	arg02, local05
226fc     98 EF BF FD | 	call	#__system___float_mul
22700     FD 26 02 F6 | 	mov	local05, result1
22704                 | LR__3226
22704                 | LR__3227
22704     13 FB 01 F6 | 	mov	result1, local05
22708                 | LR__3228
22708     A7 F0 03 F6 | 	mov	ptra, fp
2270c     B2 00 A0 FD | 	call	#popregs_
22710                 | __system___float_pow_n_ret
22710     2D 00 64 FD | 	ret
22714                 | 
22714                 | __system___gc_ptrs
22714     EC 00 02 F6 | 	mov	_var01, __heap_ptr
22718     00 03 02 F6 | 	mov	_var02, _var01
2271c     76 01 00 FF 
22720     F8 03 06 F1 | 	add	_var02, ##191992
22724     00 FD 09 FB | 	rdlong	result2, _var01 wz
22728     74 00 90 5D |  if_ne	jmp	#LR__3230
2272c     01 FD 01 F6 | 	mov	result2, _var02
22730     00 FD 81 F1 | 	sub	result2, _var01
22734     00 03 58 FC | 	wrword	#1, _var01
22738     00 FB 01 F6 | 	mov	result1, _var01
2273c     02 FA 05 F1 | 	add	result1, #2
22740     36 00 80 FF 
22744     FD 20 59 FC | 	wrword	##27792, result1
22748     00 FB 01 F6 | 	mov	result1, _var01
2274c     04 FA 05 F1 | 	add	result1, #4
22750     FD 00 58 FC | 	wrword	#0, result1
22754     00 FB 01 F6 | 	mov	result1, _var01
22758     06 FA 05 F1 | 	add	result1, #6
2275c     FD 02 58 FC | 	wrword	#1, result1
22760     10 00 06 F1 | 	add	_var01, #16
22764     FE FC 51 F6 | 	abs	result2, result2 wc
22768     04 FC 45 F0 | 	shr	result2, #4
2276c     FE FC 81 F6 | 	negc	result2, result2
22770     00 FD 51 FC | 	wrword	result2, _var01
22774     00 FD 01 F6 | 	mov	result2, _var01
22778     02 FC 05 F1 | 	add	result2, #2
2277c     36 00 80 FF 
22780     FE 1E 59 FC | 	wrword	##27791, result2
22784     00 FD 01 F6 | 	mov	result2, _var01
22788     04 FC 05 F1 | 	add	result2, #4
2278c     FE 00 58 FC | 	wrword	#0, result2
22790     00 FD 01 F6 | 	mov	result2, _var01
22794     06 FC 05 F1 | 	add	result2, #6
22798     FE 00 58 FC | 	wrword	#0, result2
2279c     10 00 86 F1 | 	sub	_var01, #16
227a0                 | LR__3230
227a0     00 FB 01 F6 | 	mov	result1, _var01
227a4     01 FD 01 F6 | 	mov	result2, _var02
227a8                 | __system___gc_ptrs_ret
227a8     2D 00 64 FD | 	ret
227ac                 | 
227ac                 | __system___gc_tryalloc
227ac     0B 4A 05 F6 | 	mov	COUNT_, #11
227b0     A8 00 A0 FD | 	call	#pushregs_
227b4     09 1F 02 F6 | 	mov	local01, arg01
227b8     0A 21 02 F6 | 	mov	local02, arg02
227bc     54 FF BF FD | 	call	#__system___gc_ptrs
227c0     FD 22 02 F6 | 	mov	local03, result1
227c4     FE 24 02 F6 | 	mov	local04, result2
227c8     11 27 02 F6 | 	mov	local05, local03
227cc     00 28 06 F6 | 	mov	local06, #0
227d0     97 1E 48 FB | 	callpa	#(@LR__3241-@LR__3240)>>2,fcache_load_ptr_
227d4                 | LR__3240
227d4     13 2B 02 F6 | 	mov	local07, local05
227d8     06 26 06 F1 | 	add	local05, #6
227dc     13 15 EA FA | 	rdword	arg02, local05 wz
227e0     11 13 02 F6 | 	mov	arg01, local03
227e4     00 FA 05 A6 |  if_e	mov	result1, #0
227e8     04 14 66 50 |  if_ne	shl	arg02, #4
227ec     0A 13 02 51 |  if_ne	add	arg01, arg02
227f0     09 FB 01 56 |  if_ne	mov	result1, arg01
227f4     FD 26 0A F6 | 	mov	local05, result1 wz
227f8     13 29 E2 5A |  if_ne	rdword	local06, local05
227fc     00 26 0E F2 | 	cmp	local05, #0 wz
22800     12 27 52 52 |  if_ne	cmps	local05, local04 wc
22804     08 00 90 1D |  if_a	jmp	#LR__3242
22808     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
2280c     C4 FF 9F 1D |  if_a	jmp	#LR__3240
22810                 | LR__3241
22810                 | LR__3242
22810     00 26 0E F2 | 	cmp	local05, #0 wz
22814     13 FB 01 A6 |  if_e	mov	result1, local05
22818     3C 01 90 AD |  if_e	jmp	#LR__3245
2281c     13 FD 01 F6 | 	mov	result2, local05
22820     06 FC 05 F1 | 	add	result2, #6
22824     FE 2C E2 FA | 	rdword	local08, result2
22828     14 1F 52 F2 | 	cmps	local01, local06 wc
2282c     C0 00 90 3D |  if_ae	jmp	#LR__3244
22830     13 1F 52 FC | 	wrword	local01, local05
22834     13 13 02 F6 | 	mov	arg01, local05
22838     0F 2D 02 F6 | 	mov	local08, local01
2283c     04 2C 66 F0 | 	shl	local08, #4
22840     16 13 02 F1 | 	add	arg01, local08
22844     0F 29 82 F1 | 	sub	local06, local01
22848     09 29 52 FC | 	wrword	local06, arg01
2284c     09 2D 02 F6 | 	mov	local08, arg01
22850     02 2C 06 F1 | 	add	local08, #2
22854     36 00 80 FF 
22858     16 1F 59 FC | 	wrword	##27791, local08
2285c     13 15 0A F6 | 	mov	arg02, local05 wz
22860     00 FA 05 A6 |  if_e	mov	result1, #0
22864     11 15 82 51 |  if_ne	sub	arg02, local03
22868     04 14 46 50 |  if_ne	shr	arg02, #4
2286c     0A FB 01 56 |  if_ne	mov	result1, arg02
22870     09 2D 02 F6 | 	mov	local08, arg01
22874     04 2C 06 F1 | 	add	local08, #4
22878     16 FB 51 FC | 	wrword	result1, local08
2287c     13 2D 02 F6 | 	mov	local08, local05
22880     06 2C 06 F1 | 	add	local08, #6
22884     09 15 02 F6 | 	mov	arg02, arg01
22888     16 2D E2 FA | 	rdword	local08, local08
2288c     06 14 06 F1 | 	add	arg02, #6
22890     0A 2D 52 FC | 	wrword	local08, arg02
22894     09 2F 02 F6 | 	mov	local09, arg01
22898     17 15 0A F6 | 	mov	arg02, local09 wz
2289c     00 FA 05 A6 |  if_e	mov	result1, #0
228a0     11 15 82 51 |  if_ne	sub	arg02, local03
228a4     04 14 46 50 |  if_ne	shr	arg02, #4
228a8     0A FB 01 56 |  if_ne	mov	result1, arg02
228ac     FD 2C 02 F6 | 	mov	local08, result1
228b0     09 31 EA FA | 	rdword	local10, arg01 wz
228b4     00 FA 05 A6 |  if_e	mov	result1, #0
228b8     04 30 66 50 |  if_ne	shl	local10, #4
228bc     18 13 02 51 |  if_ne	add	arg01, local10
228c0     09 FB 01 56 |  if_ne	mov	result1, arg01
228c4     FD 32 0A F6 | 	mov	local11, result1 wz
228c8     24 00 90 AD |  if_e	jmp	#LR__3243
228cc     12 33 52 F2 | 	cmps	local11, local04 wc
228d0     1C 00 90 3D |  if_ae	jmp	#LR__3243
228d4     17 15 0A F6 | 	mov	arg02, local09 wz
228d8     00 FA 05 A6 |  if_e	mov	result1, #0
228dc     11 15 82 51 |  if_ne	sub	arg02, local03
228e0     04 14 46 50 |  if_ne	shr	arg02, #4
228e4     0A FB 01 56 |  if_ne	mov	result1, arg02
228e8     04 32 06 F1 | 	add	local11, #4
228ec     19 FB 51 FC | 	wrword	result1, local11
228f0                 | LR__3243
228f0                 | LR__3244
228f0     06 2A 06 F1 | 	add	local07, #6
228f4     15 2D 52 FC | 	wrword	local08, local07
228f8     36 00 00 FF 
228fc     80 2E 06 F6 | 	mov	local09, ##27776
22900     10 2F 42 F5 | 	or	local09, local02
22904     00 FA 05 F6 | 	mov	result1, #0
22908     01 FA 61 FD | 	cogid	result1
2290c     FD 2E 42 F5 | 	or	local09, result1
22910     13 33 02 F6 | 	mov	local11, local05
22914     02 32 06 F1 | 	add	local11, #2
22918     19 2F 52 FC | 	wrword	local09, local11
2291c     11 2F 02 F6 | 	mov	local09, local03
22920     08 2E 06 F1 | 	add	local09, #8
22924     13 33 02 F6 | 	mov	local11, local05
22928     17 2F E2 FA | 	rdword	local09, local09
2292c     06 32 06 F1 | 	add	local11, #6
22930     19 2F 52 FC | 	wrword	local09, local11
22934     13 15 0A F6 | 	mov	arg02, local05 wz
22938     00 FA 05 A6 |  if_e	mov	result1, #0
2293c     11 15 82 51 |  if_ne	sub	arg02, local03
22940     04 14 46 50 |  if_ne	shr	arg02, #4
22944     0A FB 01 56 |  if_ne	mov	result1, arg02
22948     08 22 06 F1 | 	add	local03, #8
2294c     11 FB 51 FC | 	wrword	result1, local03
22950     08 26 06 F1 | 	add	local05, #8
22954     13 FB 01 F6 | 	mov	result1, local05
22958                 | LR__3245
22958     A7 F0 03 F6 | 	mov	ptra, fp
2295c     B2 00 A0 FD | 	call	#popregs_
22960                 | __system___gc_tryalloc_ret
22960     2D 00 64 FD | 	ret
22964                 | 
22964                 | __system___gc_alloc_managed
22964     01 4A 05 F6 | 	mov	COUNT_, #1
22968     A8 00 A0 FD | 	call	#pushregs_
2296c     09 1F 02 F6 | 	mov	local01, arg01
22970     00 14 06 F6 | 	mov	arg02, #0
22974     1C 00 B0 FD | 	call	#__system___gc_doalloc
22978     FD 14 0A F6 | 	mov	arg02, result1 wz
2297c     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
22980     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
22984     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
22988     A7 F0 03 F6 | 	mov	ptra, fp
2298c     B2 00 A0 FD | 	call	#popregs_
22990                 | __system___gc_alloc_managed_ret
22990     2D 00 64 FD | 	ret
22994                 | 
22994                 | __system___gc_doalloc
22994     06 4A 05 F6 | 	mov	COUNT_, #6
22998     A8 00 A0 FD | 	call	#pushregs_
2299c     09 1F 0A F6 | 	mov	local01, arg01 wz
229a0     0A 21 02 F6 | 	mov	local02, arg02
229a4     00 FA 05 A6 |  if_e	mov	result1, #0
229a8     8C 00 90 AD |  if_e	jmp	#LR__3257
229ac     17 1E 06 F1 | 	add	local01, #23
229b0     0F 1E 26 F5 | 	andn	local01, #15
229b4     04 1E 46 F0 | 	shr	local01, #4
229b8     1C E6 05 F1 | 	add	ptr___system__dat__, #28
229bc     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
229c0     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
229c4     50 C1 BF FD | 	call	#__system___lockmem
229c8     0F 13 02 F6 | 	mov	arg01, local01
229cc     10 15 02 F6 | 	mov	arg02, local02
229d0     D8 FD BF FD | 	call	#__system___gc_tryalloc
229d4     FD 22 0A F6 | 	mov	local03, result1 wz
229d8     14 00 90 5D |  if_ne	jmp	#LR__3250
229dc     70 03 B0 FD | 	call	#__system___gc_docollect
229e0     0F 13 02 F6 | 	mov	arg01, local01
229e4     10 15 02 F6 | 	mov	arg02, local02
229e8     C0 FD BF FD | 	call	#__system___gc_tryalloc
229ec     FD 22 02 F6 | 	mov	local03, result1
229f0                 | LR__3250
229f0     1C E6 05 F1 | 	add	ptr___system__dat__, #28
229f4     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
229f8     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
229fc     09 01 68 FC | 	wrlong	#0, arg01
22a00     00 22 0E F2 | 	cmp	local03, #0 wz
22a04     2C 00 90 AD |  if_e	jmp	#LR__3256
22a08     04 1E 66 F0 | 	shl	local01, #4
22a0c     08 1E 86 F1 | 	sub	local01, #8
22a10     0F 25 52 F6 | 	abs	local04, local01 wc
22a14     02 24 46 F0 | 	shr	local04, #2
22a18     12 27 8A F6 | 	negc	local05, local04 wz
22a1c     11 29 02 F6 | 	mov	local06, local03
22a20     10 00 90 AD |  if_e	jmp	#LR__3255
22a24     97 06 48 FB | 	callpa	#(@LR__3253-@LR__3251)>>2,fcache_load_ptr_
22a28                 | LR__3251
22a28     13 05 D8 FC | 	rep	@LR__3254, local05
22a2c                 | LR__3252
22a2c     14 01 68 FC | 	wrlong	#0, local06
22a30     04 28 06 F1 | 	add	local06, #4
22a34                 | LR__3253
22a34                 | LR__3254
22a34                 | LR__3255
22a34                 | LR__3256
22a34     11 FB 01 F6 | 	mov	result1, local03
22a38                 | LR__3257
22a38     A7 F0 03 F6 | 	mov	ptra, fp
22a3c     B2 00 A0 FD | 	call	#popregs_
22a40                 | __system___gc_doalloc_ret
22a40     2D 00 64 FD | 	ret
22a44                 | 
22a44                 | __system___gc_isvalidptr
22a44     F8 16 06 F4 | 	bitl	arg03, #248
22a48     08 16 86 F1 | 	sub	arg03, #8
22a4c     09 17 52 F2 | 	cmps	arg03, arg01 wc
22a50     08 00 90 CD |  if_b	jmp	#LR__3260
22a54     0A 17 52 F2 | 	cmps	arg03, arg02 wc
22a58     08 00 90 CD |  if_b	jmp	#LR__3261
22a5c                 | LR__3260
22a5c     00 FA 05 F6 | 	mov	result1, #0
22a60     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
22a64                 | LR__3261
22a64     0B 01 02 F6 | 	mov	_var01, arg03
22a68     09 01 62 F5 | 	xor	_var01, arg01
22a6c     0F 00 CE F7 | 	test	_var01, #15 wz
22a70     00 FA 05 56 |  if_ne	mov	result1, #0
22a74     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
22a78     0B 01 02 F6 | 	mov	_var01, arg03
22a7c     02 00 06 F1 | 	add	_var01, #2
22a80     00 01 E2 FA | 	rdword	_var01, _var01
22a84     7F 00 00 FF 
22a88     C0 01 06 F5 | 	and	_var01, ##65472
22a8c     36 00 00 FF 
22a90     80 00 0E F2 | 	cmp	_var01, ##27776 wz
22a94     00 FA 05 56 |  if_ne	mov	result1, #0
22a98     0B FB 01 A6 |  if_e	mov	result1, arg03
22a9c                 | __system___gc_isvalidptr_ret
22a9c     2D 00 64 FD | 	ret
22aa0                 | 
22aa0                 | __system___gc_free
22aa0     09 17 02 F6 | 	mov	arg03, arg01
22aa4     6C FC BF FD | 	call	#__system___gc_ptrs
22aa8     FD 12 02 F6 | 	mov	arg01, result1
22aac     FE 14 02 F6 | 	mov	arg02, result2
22ab0     90 FF BF FD | 	call	#__system___gc_isvalidptr
22ab4     FD 14 0A F6 | 	mov	arg02, result1 wz
22ab8     28 00 90 AD |  if_e	jmp	#LR__3270
22abc     1C E6 05 F1 | 	add	ptr___system__dat__, #28
22ac0     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
22ac4     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
22ac8     4C C0 BF FD | 	call	#__system___lockmem
22acc     0A 13 02 F6 | 	mov	arg01, arg02
22ad0     14 00 B0 FD | 	call	#__system___gc_dofree
22ad4     1C E6 05 F1 | 	add	ptr___system__dat__, #28
22ad8     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
22adc     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
22ae0     09 01 68 FC | 	wrlong	#0, arg01
22ae4                 | LR__3270
22ae4                 | __system___gc_free_ret
22ae4     2D 00 64 FD | 	ret
22ae8                 | 
22ae8                 | __system___gc_dofree
22ae8     06 4A 05 F6 | 	mov	COUNT_, #6
22aec     A8 00 A0 FD | 	call	#pushregs_
22af0     09 1F 02 F6 | 	mov	local01, arg01
22af4     1C FC BF FD | 	call	#__system___gc_ptrs
22af8     FD 20 02 F6 | 	mov	local02, result1
22afc     FE 22 02 F6 | 	mov	local03, result2
22b00     0F 15 02 F6 | 	mov	arg02, local01
22b04     02 14 06 F1 | 	add	arg02, #2
22b08     36 00 80 FF 
22b0c     0A 1F 59 FC | 	wrword	##27791, arg02
22b10     0F 25 02 F6 | 	mov	local04, local01
22b14     0F 13 02 F6 | 	mov	arg01, local01
22b18     09 27 EA FA | 	rdword	local05, arg01 wz
22b1c     00 FA 05 A6 |  if_e	mov	result1, #0
22b20     04 26 66 50 |  if_ne	shl	local05, #4
22b24     13 13 02 51 |  if_ne	add	arg01, local05
22b28     09 FB 01 56 |  if_ne	mov	result1, arg01
22b2c     FD 28 02 F6 | 	mov	local06, result1
22b30     97 24 48 FB | 	callpa	#(@LR__3281-@LR__3280)>>2,fcache_load_ptr_
22b34                 | LR__3280
22b34     04 24 06 F1 | 	add	local04, #4
22b38     12 15 EA FA | 	rdword	arg02, local04 wz
22b3c     10 13 02 F6 | 	mov	arg01, local02
22b40     00 FA 05 A6 |  if_e	mov	result1, #0
22b44     04 14 66 50 |  if_ne	shl	arg02, #4
22b48     0A 13 02 51 |  if_ne	add	arg01, arg02
22b4c     09 FB 01 56 |  if_ne	mov	result1, arg01
22b50     FD 24 0A F6 | 	mov	local04, result1 wz
22b54     24 00 90 AD |  if_e	jmp	#LR__3282
22b58     12 13 02 F6 | 	mov	arg01, local04
22b5c     00 FA 05 F6 | 	mov	result1, #0
22b60     02 12 06 F1 | 	add	arg01, #2
22b64     09 13 E2 FA | 	rdword	arg01, arg01
22b68     36 00 00 FF 
22b6c     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
22b70     01 FA 65 A6 |  if_e	neg	result1, #1
22b74     00 FA 0D F2 | 	cmp	result1, #0 wz
22b78     B8 FF 9F AD |  if_e	jmp	#LR__3280
22b7c                 | LR__3281
22b7c                 | LR__3282
22b7c     00 24 0E F2 | 	cmp	local04, #0 wz
22b80     10 25 02 A6 |  if_e	mov	local04, local02
22b84     12 15 02 F6 | 	mov	arg02, local04
22b88     06 14 06 F1 | 	add	arg02, #6
22b8c     0F 13 02 F6 | 	mov	arg01, local01
22b90     0A 15 E2 FA | 	rdword	arg02, arg02
22b94     06 12 06 F1 | 	add	arg01, #6
22b98     09 15 52 FC | 	wrword	arg02, arg01
22b9c     0F 15 0A F6 | 	mov	arg02, local01 wz
22ba0     00 FA 05 A6 |  if_e	mov	result1, #0
22ba4     10 15 82 51 |  if_ne	sub	arg02, local02
22ba8     04 14 46 50 |  if_ne	shr	arg02, #4
22bac     0A FB 01 56 |  if_ne	mov	result1, arg02
22bb0     12 15 02 F6 | 	mov	arg02, local04
22bb4     06 14 06 F1 | 	add	arg02, #6
22bb8     0A FB 51 FC | 	wrword	result1, arg02
22bbc     10 25 0A F2 | 	cmp	local04, local02 wz
22bc0     A4 00 90 AD |  if_e	jmp	#LR__3285
22bc4     12 13 02 F6 | 	mov	arg01, local04
22bc8     09 27 EA FA | 	rdword	local05, arg01 wz
22bcc     00 FA 05 A6 |  if_e	mov	result1, #0
22bd0     04 26 66 50 |  if_ne	shl	local05, #4
22bd4     13 13 02 51 |  if_ne	add	arg01, local05
22bd8     09 FB 01 56 |  if_ne	mov	result1, arg01
22bdc     0F FB 09 F2 | 	cmp	result1, local01 wz
22be0     84 00 90 5D |  if_ne	jmp	#LR__3284
22be4     12 29 E2 FA | 	rdword	local06, local04
22be8     0F 15 E2 FA | 	rdword	arg02, local01
22bec     0A 29 02 F1 | 	add	local06, arg02
22bf0     12 29 52 FC | 	wrword	local06, local04
22bf4     0F 29 02 F6 | 	mov	local06, local01
22bf8     02 28 06 F1 | 	add	local06, #2
22bfc     14 01 58 FC | 	wrword	#0, local06
22c00     0F 13 02 F6 | 	mov	arg01, local01
22c04     09 27 EA FA | 	rdword	local05, arg01 wz
22c08     00 FA 05 A6 |  if_e	mov	result1, #0
22c0c     04 26 66 50 |  if_ne	shl	local05, #4
22c10     13 13 02 51 |  if_ne	add	arg01, local05
22c14     09 FB 01 56 |  if_ne	mov	result1, arg01
22c18     FD 28 02 F6 | 	mov	local06, result1
22c1c     11 29 52 F2 | 	cmps	local06, local03 wc
22c20     20 00 90 3D |  if_ae	jmp	#LR__3283
22c24     12 15 0A F6 | 	mov	arg02, local04 wz
22c28     00 FA 05 A6 |  if_e	mov	result1, #0
22c2c     10 15 82 51 |  if_ne	sub	arg02, local02
22c30     04 14 46 50 |  if_ne	shr	arg02, #4
22c34     0A FB 01 56 |  if_ne	mov	result1, arg02
22c38     14 15 02 F6 | 	mov	arg02, local06
22c3c     04 14 06 F1 | 	add	arg02, #4
22c40     0A FB 51 FC | 	wrword	result1, arg02
22c44                 | LR__3283
22c44     0F 15 02 F6 | 	mov	arg02, local01
22c48     06 14 06 F1 | 	add	arg02, #6
22c4c     12 FD 01 F6 | 	mov	result2, local04
22c50     0A 15 E2 FA | 	rdword	arg02, arg02
22c54     06 FC 05 F1 | 	add	result2, #6
22c58     FE 14 52 FC | 	wrword	arg02, result2
22c5c     06 1E 06 F1 | 	add	local01, #6
22c60     0F 01 58 FC | 	wrword	#0, local01
22c64     12 1F 02 F6 | 	mov	local01, local04
22c68                 | LR__3284
22c68                 | LR__3285
22c68     0F 13 02 F6 | 	mov	arg01, local01
22c6c     09 27 EA FA | 	rdword	local05, arg01 wz
22c70     00 FA 05 A6 |  if_e	mov	result1, #0
22c74     04 26 66 50 |  if_ne	shl	local05, #4
22c78     13 13 02 51 |  if_ne	add	arg01, local05
22c7c     09 FB 01 56 |  if_ne	mov	result1, arg01
22c80     FD 14 0A F6 | 	mov	arg02, result1 wz
22c84     B8 00 90 AD |  if_e	jmp	#LR__3287
22c88     11 15 52 F2 | 	cmps	arg02, local03 wc
22c8c     B0 00 90 3D |  if_ae	jmp	#LR__3287
22c90     0A 13 02 F6 | 	mov	arg01, arg02
22c94     00 FA 05 F6 | 	mov	result1, #0
22c98     02 12 06 F1 | 	add	arg01, #2
22c9c     09 13 E2 FA | 	rdword	arg01, arg01
22ca0     36 00 00 FF 
22ca4     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
22ca8     01 FA 65 A6 |  if_e	neg	result1, #1
22cac     00 FA 0D F2 | 	cmp	result1, #0 wz
22cb0     8C 00 90 AD |  if_e	jmp	#LR__3287
22cb4     0F 25 02 F6 | 	mov	local04, local01
22cb8     12 29 E2 FA | 	rdword	local06, local04
22cbc     0A 13 02 F6 | 	mov	arg01, arg02
22cc0     09 1F E2 FA | 	rdword	local01, arg01
22cc4     0F 29 02 F1 | 	add	local06, local01
22cc8     12 29 52 FC | 	wrword	local06, local04
22ccc     09 29 02 F6 | 	mov	local06, arg01
22cd0     06 28 06 F1 | 	add	local06, #6
22cd4     12 1F 02 F6 | 	mov	local01, local04
22cd8     14 29 E2 FA | 	rdword	local06, local06
22cdc     06 1E 06 F1 | 	add	local01, #6
22ce0     0F 29 52 FC | 	wrword	local06, local01
22ce4     09 29 02 F6 | 	mov	local06, arg01
22ce8     02 28 06 F1 | 	add	local06, #2
22cec     14 55 59 FC | 	wrword	#170, local06
22cf0     09 29 02 F6 | 	mov	local06, arg01
22cf4     06 28 06 F1 | 	add	local06, #6
22cf8     14 01 58 FC | 	wrword	#0, local06
22cfc     09 27 EA FA | 	rdword	local05, arg01 wz
22d00     00 FA 05 A6 |  if_e	mov	result1, #0
22d04     04 26 66 50 |  if_ne	shl	local05, #4
22d08     13 13 02 51 |  if_ne	add	arg01, local05
22d0c     09 FB 01 56 |  if_ne	mov	result1, arg01
22d10     FD 28 0A F6 | 	mov	local06, result1 wz
22d14     28 00 90 AD |  if_e	jmp	#LR__3286
22d18     11 29 52 F2 | 	cmps	local06, local03 wc
22d1c     20 00 90 3D |  if_ae	jmp	#LR__3286
22d20     12 15 0A F6 | 	mov	arg02, local04 wz
22d24     00 FA 05 A6 |  if_e	mov	result1, #0
22d28     10 15 82 51 |  if_ne	sub	arg02, local02
22d2c     04 14 46 50 |  if_ne	shr	arg02, #4
22d30     0A FB 01 56 |  if_ne	mov	result1, arg02
22d34     14 25 02 F6 | 	mov	local04, local06
22d38     04 24 06 F1 | 	add	local04, #4
22d3c     12 FB 51 FC | 	wrword	result1, local04
22d40                 | LR__3286
22d40                 | LR__3287
22d40     14 FB 01 F6 | 	mov	result1, local06
22d44     A7 F0 03 F6 | 	mov	ptra, fp
22d48     B2 00 A0 FD | 	call	#popregs_
22d4c                 | __system___gc_dofree_ret
22d4c     2D 00 64 FD | 	ret
22d50                 | 
22d50                 | __system___gc_docollect
22d50     05 4A 05 F6 | 	mov	COUNT_, #5
22d54     A8 00 A0 FD | 	call	#pushregs_
22d58     B8 F9 BF FD | 	call	#__system___gc_ptrs
22d5c     FE 1E 02 F6 | 	mov	local01, result2
22d60     FD 20 02 F6 | 	mov	local02, result1
22d64     10 13 02 F6 | 	mov	arg01, local02
22d68     09 23 EA FA | 	rdword	local03, arg01 wz
22d6c     00 FA 05 A6 |  if_e	mov	result1, #0
22d70     04 22 66 50 |  if_ne	shl	local03, #4
22d74     11 13 02 51 |  if_ne	add	arg01, local03
22d78     09 FB 01 56 |  if_ne	mov	result1, arg01
22d7c     FD 24 0A F6 | 	mov	local04, result1 wz
22d80     00 FA 05 F6 | 	mov	result1, #0
22d84     01 FA 61 FD | 	cogid	result1
22d88     FD 26 02 F6 | 	mov	local05, result1
22d8c     48 00 90 AD |  if_e	jmp	#LR__3292
22d90     97 22 48 FB | 	callpa	#(@LR__3291-@LR__3290)>>2,fcache_load_ptr_
22d94                 | LR__3290
22d94     0F 25 52 F2 | 	cmps	local04, local01 wc
22d98     3C 00 90 3D |  if_ae	jmp	#LR__3292
22d9c     12 15 02 F6 | 	mov	arg02, local04
22da0     02 14 06 F1 | 	add	arg02, #2
22da4     0A 15 E2 FA | 	rdword	arg02, arg02
22da8     20 14 26 F5 | 	andn	arg02, #32
22dac     12 13 02 F6 | 	mov	arg01, local04
22db0     02 12 06 F1 | 	add	arg01, #2
22db4     09 15 52 FC | 	wrword	arg02, arg01
22db8     12 13 02 F6 | 	mov	arg01, local04
22dbc     09 23 EA FA | 	rdword	local03, arg01 wz
22dc0     00 FA 05 A6 |  if_e	mov	result1, #0
22dc4     04 22 66 50 |  if_ne	shl	local03, #4
22dc8     11 13 02 51 |  if_ne	add	arg01, local03
22dcc     09 FB 01 56 |  if_ne	mov	result1, arg01
22dd0     FD 24 0A F6 | 	mov	local04, result1 wz
22dd4     BC FF 9F 5D |  if_ne	jmp	#LR__3290
22dd8                 | LR__3291
22dd8                 | LR__3292
22dd8     00 22 06 F6 | 	mov	local03, #0
22ddc     00 12 06 F6 | 	mov	arg01, #0
22de0     0C BD BF FD | 	call	#__system____topofstack
22de4     FD 14 02 F6 | 	mov	arg02, result1
22de8     11 13 02 F6 | 	mov	arg01, local03
22dec     90 00 B0 FD | 	call	#__system___gc_markhub
22df0     1C 01 B0 FD | 	call	#__system___gc_markcog
22df4     10 13 02 F6 | 	mov	arg01, local02
22df8     09 23 EA FA | 	rdword	local03, arg01 wz
22dfc     00 FA 05 A6 |  if_e	mov	result1, #0
22e00     04 22 66 50 |  if_ne	shl	local03, #4
22e04     11 13 02 51 |  if_ne	add	arg01, local03
22e08     09 FB 01 56 |  if_ne	mov	result1, arg01
22e0c     FD 20 0A F6 | 	mov	local02, result1 wz
22e10     60 00 90 AD |  if_e	jmp	#LR__3296
22e14                 | LR__3293
22e14     10 25 02 F6 | 	mov	local04, local02
22e18     12 13 02 F6 | 	mov	arg01, local04
22e1c     09 23 EA FA | 	rdword	local03, arg01 wz
22e20     00 FA 05 A6 |  if_e	mov	result1, #0
22e24     04 22 66 50 |  if_ne	shl	local03, #4
22e28     11 13 02 51 |  if_ne	add	arg01, local03
22e2c     09 FB 01 56 |  if_ne	mov	result1, arg01
22e30     FD 20 02 F6 | 	mov	local02, result1
22e34     12 15 02 F6 | 	mov	arg02, local04
22e38     02 14 06 F1 | 	add	arg02, #2
22e3c     0A 15 E2 FA | 	rdword	arg02, arg02
22e40     20 14 CE F7 | 	test	arg02, #32 wz
22e44     10 14 CE A7 |  if_e	test	arg02, #16 wz
22e48     1C 00 90 5D |  if_ne	jmp	#LR__3295
22e4c     0A 15 42 F8 | 	getnib	arg02, arg02, #0
22e50     13 15 0A F2 | 	cmp	arg02, local05 wz
22e54     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
22e58     0C 00 90 5D |  if_ne	jmp	#LR__3294
22e5c     12 13 02 F6 | 	mov	arg01, local04
22e60     84 FC BF FD | 	call	#__system___gc_dofree
22e64     FD 20 02 F6 | 	mov	local02, result1
22e68                 | LR__3294
22e68                 | LR__3295
22e68     00 20 0E F2 | 	cmp	local02, #0 wz
22e6c     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
22e70     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3293
22e74                 | LR__3296
22e74     A7 F0 03 F6 | 	mov	ptra, fp
22e78     B2 00 A0 FD | 	call	#popregs_
22e7c                 | __system___gc_docollect_ret
22e7c     2D 00 64 FD | 	ret
22e80                 | 
22e80                 | __system___gc_markhub
22e80     04 4A 05 F6 | 	mov	COUNT_, #4
22e84     A8 00 A0 FD | 	call	#pushregs_
22e88     09 1F 02 F6 | 	mov	local01, arg01
22e8c     0A 21 02 F6 | 	mov	local02, arg02
22e90     80 F8 BF FD | 	call	#__system___gc_ptrs
22e94     FD 22 02 F6 | 	mov	local03, result1
22e98     FE 24 02 F6 | 	mov	local04, result2
22e9c                 | LR__3300
22e9c     10 1F 52 F2 | 	cmps	local01, local02 wc
22ea0     60 00 90 3D |  if_ae	jmp	#LR__3301
22ea4     0F 17 02 FB | 	rdlong	arg03, local01
22ea8     04 1E 06 F1 | 	add	local01, #4
22eac     12 15 02 F6 | 	mov	arg02, local04
22eb0     11 13 02 F6 | 	mov	arg01, local03
22eb4     8C FB BF FD | 	call	#__system___gc_isvalidptr
22eb8     FD 16 0A F6 | 	mov	arg03, result1 wz
22ebc     DC FF 9F AD |  if_e	jmp	#LR__3300
22ec0     0B 13 02 F6 | 	mov	arg01, arg03
22ec4     00 FA 05 F6 | 	mov	result1, #0
22ec8     02 12 06 F1 | 	add	arg01, #2
22ecc     09 13 E2 FA | 	rdword	arg01, arg01
22ed0     36 00 00 FF 
22ed4     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
22ed8     01 FA 65 A6 |  if_e	neg	result1, #1
22edc     00 FA 0D F2 | 	cmp	result1, #0 wz
22ee0     B8 FF 9F 5D |  if_ne	jmp	#LR__3300
22ee4     0B FD 01 F6 | 	mov	result2, arg03
22ee8     02 FC 05 F1 | 	add	result2, #2
22eec     FE FC E1 FA | 	rdword	result2, result2
22ef0     0F FC 25 F5 | 	andn	result2, #15
22ef4     2E FC 45 F5 | 	or	result2, #46
22ef8     02 16 06 F1 | 	add	arg03, #2
22efc     0B FD 51 FC | 	wrword	result2, arg03
22f00     98 FF 9F FD | 	jmp	#LR__3300
22f04                 | LR__3301
22f04     A7 F0 03 F6 | 	mov	ptra, fp
22f08     B2 00 A0 FD | 	call	#popregs_
22f0c                 | __system___gc_markhub_ret
22f0c     2D 00 64 FD | 	ret
22f10                 | 
22f10                 | __system___gc_markcog
22f10     04 4A 05 F6 | 	mov	COUNT_, #4
22f14     A8 00 A0 FD | 	call	#pushregs_
22f18     F8 F7 BF FD | 	call	#__system___gc_ptrs
22f1c     FD 1E 02 F6 | 	mov	local01, result1
22f20     FE 20 02 F6 | 	mov	local02, result2
22f24     EF 23 06 F6 | 	mov	local03, #495
22f28                 | LR__3310
22f28                 | 	'.live	local03
22f28     00 22 96 F9 | 	alts	local03, #0
22f2c     11 25 02 F6 | 	mov	local04, local03
22f30     0F 13 02 F6 | 	mov	arg01, local01
22f34     10 15 02 F6 | 	mov	arg02, local02
22f38     12 17 02 F6 | 	mov	arg03, local04
22f3c     04 FB BF FD | 	call	#__system___gc_isvalidptr
22f40     00 FA 0D F2 | 	cmp	result1, #0 wz
22f44     18 00 90 AD |  if_e	jmp	#LR__3311
22f48     FD 24 02 F6 | 	mov	local04, result1
22f4c     02 24 06 F1 | 	add	local04, #2
22f50     12 25 E2 FA | 	rdword	local04, local04
22f54     20 24 46 F5 | 	or	local04, #32
22f58     02 FA 05 F1 | 	add	result1, #2
22f5c     FD 24 52 FC | 	wrword	local04, result1
22f60                 | LR__3311
22f60     01 22 86 F1 | 	sub	local03, #1
22f64     00 22 56 F2 | 	cmps	local03, #0 wc
22f68     BC FF 9F 3D |  if_ae	jmp	#LR__3310
22f6c     A7 F0 03 F6 | 	mov	ptra, fp
22f70     B2 00 A0 FD | 	call	#popregs_
22f74                 | __system___gc_markcog_ret
22f74     2D 00 64 FD | 	ret
22f78                 | 
22f78                 | __system__opendir
22f78     06 4A 05 F6 | 	mov	COUNT_, #6
22f7c     A8 00 A0 FD | 	call	#pushregs_
22f80     84 E7 05 F1 | 	add	ptr___system__dat__, #388
22f84     F3 1E 02 F6 | 	mov	local01, ptr___system__dat__
22f88     09 15 02 F6 | 	mov	arg02, arg01
22f8c     0F 13 02 F6 | 	mov	arg01, local01
22f90     00 16 06 F6 | 	mov	arg03, #0
22f94     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
22f98     14 C3 BF FD | 	call	#__system____getvfsforfile
22f9c     FD 20 0A F6 | 	mov	local02, result1 wz
22fa0     10 00 90 AD |  if_e	jmp	#LR__3320
22fa4     28 20 06 F1 | 	add	local02, #40
22fa8     10 17 0A FB | 	rdlong	arg03, local02 wz
22fac     28 20 86 F1 | 	sub	local02, #40
22fb0     14 00 90 5D |  if_ne	jmp	#LR__3321
22fb4                 | LR__3320
22fb4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
22fb8     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
22fbc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
22fc0     00 FA 05 F6 | 	mov	result1, #0
22fc4     90 00 90 FD | 	jmp	#LR__3323
22fc8                 | LR__3321
22fc8     5C 12 06 F6 | 	mov	arg01, #92
22fcc     10 14 06 F6 | 	mov	arg02, #16
22fd0     C0 F9 BF FD | 	call	#__system___gc_doalloc
22fd4     FD 22 0A F6 | 	mov	local03, result1 wz
22fd8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
22fdc     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
22fe0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
22fe4     00 FA 05 A6 |  if_e	mov	result1, #0
22fe8     6C 00 90 AD |  if_e	jmp	#LR__3323
22fec     28 20 06 F1 | 	add	local02, #40
22ff0     10 25 02 FB | 	rdlong	local04, local02
22ff4     12 27 02 F6 | 	mov	local05, local04
22ff8     28 20 86 F1 | 	sub	local02, #40
22ffc     13 26 46 F7 | 	zerox	local05, #19
23000     14 24 46 F0 | 	shr	local04, #20
23004     02 24 66 F0 | 	shl	local04, #2
23008     ED 24 02 F1 | 	add	local04, __methods__
2300c     12 25 02 FB | 	rdlong	local04, local04
23010     11 13 02 F6 | 	mov	arg01, local03
23014     0F 15 02 F6 | 	mov	arg02, local01
23018     F2 28 02 F6 | 	mov	local06, objptr
2301c     13 E5 01 F6 | 	mov	objptr, local05
23020     2D 24 62 FD | 	call	local04
23024     14 E5 01 F6 | 	mov	objptr, local06
23028     FD 16 0A F6 | 	mov	arg03, result1 wz
2302c     20 00 90 AD |  if_e	jmp	#LR__3322
23030     00 16 4E F2 | 	cmps	arg03, #0 wz
23034     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23038     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
2303c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23040     11 13 02 F6 | 	mov	arg01, local03
23044     58 FA BF FD | 	call	#__system___gc_free
23048     00 FA 05 F6 | 	mov	result1, #0
2304c     08 00 90 FD | 	jmp	#LR__3323
23050                 | LR__3322
23050     11 21 62 FC | 	wrlong	local02, local03
23054     11 FB 01 F6 | 	mov	result1, local03
23058                 | LR__3323
23058     A7 F0 03 F6 | 	mov	ptra, fp
2305c     B2 00 A0 FD | 	call	#popregs_
23060                 | __system__opendir_ret
23060     2D 00 64 FD | 	ret
23064                 | 
23064                 | __system__closedir
23064     04 4A 05 F6 | 	mov	COUNT_, #4
23068     A8 00 A0 FD | 	call	#pushregs_
2306c     09 1F 02 F6 | 	mov	local01, arg01
23070     0F 13 02 FB | 	rdlong	arg01, local01
23074     2C 12 06 F1 | 	add	arg01, #44
23078     09 21 02 FB | 	rdlong	local02, arg01
2307c     10 23 02 F6 | 	mov	local03, local02
23080     13 22 46 F7 | 	zerox	local03, #19
23084     14 20 46 F0 | 	shr	local02, #20
23088     02 20 66 F0 | 	shl	local02, #2
2308c     ED 20 02 F1 | 	add	local02, __methods__
23090     10 21 02 FB | 	rdlong	local02, local02
23094     0F 13 02 F6 | 	mov	arg01, local01
23098     F2 24 02 F6 | 	mov	local04, objptr
2309c     11 E5 01 F6 | 	mov	objptr, local03
230a0     2D 20 62 FD | 	call	local02
230a4     12 E5 01 F6 | 	mov	objptr, local04
230a8     FD 24 02 F6 | 	mov	local04, result1
230ac     0F 13 02 F6 | 	mov	arg01, local01
230b0     EC F9 BF FD | 	call	#__system___gc_free
230b4     00 24 4E F2 | 	cmps	local04, #0 wz
230b8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
230bc     F3 24 62 FC | 	wrlong	local04, ptr___system__dat__
230c0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
230c4     01 FA 65 56 |  if_ne	neg	result1, #1
230c8     00 FA 05 A6 |  if_e	mov	result1, #0
230cc     A7 F0 03 F6 | 	mov	ptra, fp
230d0     B2 00 A0 FD | 	call	#popregs_
230d4                 | __system__closedir_ret
230d4     2D 00 64 FD | 	ret
230d8                 | 
230d8                 | __system__readdir
230d8     04 4A 05 F6 | 	mov	COUNT_, #4
230dc     A8 00 A0 FD | 	call	#pushregs_
230e0     09 15 0A FB | 	rdlong	arg02, arg01 wz
230e4     08 12 06 F1 | 	add	arg01, #8
230e8     09 1F 02 F6 | 	mov	local01, arg01
230ec     08 12 86 F1 | 	sub	arg01, #8
230f0     00 FA 05 A6 |  if_e	mov	result1, #0
230f4     5C 00 90 AD |  if_e	jmp	#LR__3331
230f8     30 14 06 F1 | 	add	arg02, #48
230fc     0A 21 02 FB | 	rdlong	local02, arg02
23100     10 23 02 F6 | 	mov	local03, local02
23104     13 22 46 F7 | 	zerox	local03, #19
23108     14 20 46 F0 | 	shr	local02, #20
2310c     02 20 66 F0 | 	shl	local02, #2
23110     ED 20 02 F1 | 	add	local02, __methods__
23114     10 21 02 FB | 	rdlong	local02, local02
23118     0F 15 02 F6 | 	mov	arg02, local01
2311c     F2 24 02 F6 | 	mov	local04, objptr
23120     11 E5 01 F6 | 	mov	objptr, local03
23124     2D 20 62 FD | 	call	local02
23128     12 E5 01 F6 | 	mov	objptr, local04
2312c     00 FA 4D F2 | 	cmps	result1, #0 wz
23130     1C 00 90 AD |  if_e	jmp	#LR__3330
23134     01 FA 55 F2 | 	cmps	result1, #1 wc
23138     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
2313c     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
23140     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
23144     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
23148     00 FA 05 F6 | 	mov	result1, #0
2314c     04 00 90 FD | 	jmp	#LR__3331
23150                 | LR__3330
23150     0F FB 01 F6 | 	mov	result1, local01
23154                 | LR__3331
23154     A7 F0 03 F6 | 	mov	ptra, fp
23158     B2 00 A0 FD | 	call	#popregs_
2315c                 | __system__readdir_ret
2315c     2D 00 64 FD | 	ret
23160                 | 
23160                 | __system___openraw
23160     15 4A 05 F6 | 	mov	COUNT_, #21
23164     A8 00 A0 FD | 	call	#pushregs_
23168     09 1F 02 F6 | 	mov	local01, arg01
2316c     0A 21 02 F6 | 	mov	local02, arg02
23170     0B 23 02 F6 | 	mov	local03, arg03
23174     0C 25 02 F6 | 	mov	local04, arg04
23178     04 26 06 F6 | 	mov	local05, #4
2317c     0F 29 02 F6 | 	mov	local06, local01
23180     00 2A 06 F6 | 	mov	local07, #0
23184     84 E7 05 F1 | 	add	ptr___system__dat__, #388
23188     F3 2C 02 F6 | 	mov	local08, ptr___system__dat__
2318c     16 13 02 F6 | 	mov	arg01, local08
23190     10 15 02 F6 | 	mov	arg02, local02
23194     00 16 06 F6 | 	mov	arg03, #0
23198     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2319c     10 C1 BF FD | 	call	#__system____getvfsforfile
231a0     FD 2E 0A F6 | 	mov	local09, result1 wz
231a4     10 00 90 AD |  if_e	jmp	#LR__3340
231a8     20 2E 06 F1 | 	add	local09, #32
231ac     17 FB 09 FB | 	rdlong	result1, local09 wz
231b0     20 2E 86 F1 | 	sub	local09, #32
231b4     14 00 90 5D |  if_ne	jmp	#LR__3341
231b8                 | LR__3340
231b8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
231bc     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
231c0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
231c4     01 FA 65 F6 | 	neg	result1, #1
231c8     8C 02 90 FD | 	jmp	#LR__3354
231cc                 | LR__3341
231cc     14 13 02 F6 | 	mov	arg01, local06
231d0     00 14 06 F6 | 	mov	arg02, #0
231d4     34 16 06 F6 | 	mov	arg03, #52
231d8     09 31 02 F6 | 	mov	local10, arg01
231dc     98 00 A0 FD | 	call	#\builtin_bytefill_
231e0     20 2E 06 F1 | 	add	local09, #32
231e4     17 33 02 FB | 	rdlong	local11, local09
231e8     19 35 02 F6 | 	mov	local12, local11
231ec     19 37 02 F6 | 	mov	local13, local11
231f0     20 2E 86 F1 | 	sub	local09, #32
231f4     1B 39 02 F6 | 	mov	local14, local13
231f8     13 34 46 F7 | 	zerox	local12, #19
231fc     14 38 46 F0 | 	shr	local14, #20
23200     02 38 66 F0 | 	shl	local14, #2
23204     ED 38 02 F1 | 	add	local14, __methods__
23208     1C 39 02 FB | 	rdlong	local14, local14
2320c     14 3B 02 F6 | 	mov	local15, local06
23210     16 3D 02 F6 | 	mov	local16, local08
23214     11 3F 02 F6 | 	mov	local17, local03
23218     1D 13 02 F6 | 	mov	arg01, local15
2321c     1E 15 02 F6 | 	mov	arg02, local16
23220     1F 17 02 F6 | 	mov	arg03, local17
23224     F2 40 02 F6 | 	mov	local18, objptr
23228     1A E5 01 F6 | 	mov	objptr, local12
2322c     2D 38 62 FD | 	call	local14
23230     20 E5 01 F6 | 	mov	objptr, local18
23234     FD 42 0A F6 | 	mov	local19, result1 wz
23238     04 22 CE 57 |  if_ne	test	local03, #4 wz
2323c     58 00 90 AD |  if_e	jmp	#LR__3342
23240     24 2E 06 F1 | 	add	local09, #36
23244     17 33 02 FB | 	rdlong	local11, local09
23248     19 35 02 F6 | 	mov	local12, local11
2324c     19 37 02 F6 | 	mov	local13, local11
23250     24 2E 86 F1 | 	sub	local09, #36
23254     1B 39 02 F6 | 	mov	local14, local13
23258     13 34 46 F7 | 	zerox	local12, #19
2325c     14 38 46 F0 | 	shr	local14, #20
23260     02 38 66 F0 | 	shl	local14, #2
23264     ED 38 02 F1 | 	add	local14, __methods__
23268     1C 39 02 FB | 	rdlong	local14, local14
2326c     14 3B 02 F6 | 	mov	local15, local06
23270     16 3D 02 F6 | 	mov	local16, local08
23274     12 3F 02 F6 | 	mov	local17, local04
23278     1D 13 02 F6 | 	mov	arg01, local15
2327c     1E 15 02 F6 | 	mov	arg02, local16
23280     1F 17 02 F6 | 	mov	arg03, local17
23284     F2 40 02 F6 | 	mov	local18, objptr
23288     1A E5 01 F6 | 	mov	objptr, local12
2328c     2D 38 62 FD | 	call	local14
23290     20 E5 01 F6 | 	mov	objptr, local18
23294     FD 42 02 F6 | 	mov	local19, result1
23298                 | LR__3342
23298     00 42 0E F2 | 	cmp	local19, #0 wz
2329c     8C 01 90 5D |  if_ne	jmp	#LR__3352
232a0     11 45 02 F6 | 	mov	local20, local03
232a4     03 44 0E F5 | 	and	local20, #3 wz
232a8     02 26 46 55 |  if_ne	or	local05, #2
232ac     01 44 0E F2 | 	cmp	local20, #1 wz
232b0     01 26 46 55 |  if_ne	or	local05, #1
232b4     20 22 CE F7 | 	test	local03, #32 wz
232b8     C0 26 46 55 |  if_ne	or	local05, #192
232bc     08 28 06 F1 | 	add	local06, #8
232c0     14 27 62 FC | 	wrlong	local05, local06
232c4     0C 28 06 F1 | 	add	local06, #12
232c8     14 47 0A FB | 	rdlong	local21, local06 wz
232cc     14 28 86 F1 | 	sub	local06, #20
232d0     18 00 90 5D |  if_ne	jmp	#LR__3343
232d4     04 2E 06 F1 | 	add	local09, #4
232d8     17 47 02 FB | 	rdlong	local21, local09
232dc     04 2E 86 F1 | 	sub	local09, #4
232e0     14 28 06 F1 | 	add	local06, #20
232e4     14 47 62 FC | 	wrlong	local21, local06
232e8     14 28 86 F1 | 	sub	local06, #20
232ec                 | LR__3343
232ec     18 28 06 F1 | 	add	local06, #24
232f0     14 47 0A FB | 	rdlong	local21, local06 wz
232f4     18 28 86 F1 | 	sub	local06, #24
232f8     18 00 90 5D |  if_ne	jmp	#LR__3344
232fc     08 2E 06 F1 | 	add	local09, #8
23300     17 47 02 FB | 	rdlong	local21, local09
23304     08 2E 86 F1 | 	sub	local09, #8
23308     18 28 06 F1 | 	add	local06, #24
2330c     14 47 62 FC | 	wrlong	local21, local06
23310     18 28 86 F1 | 	sub	local06, #24
23314                 | LR__3344
23314     24 28 06 F1 | 	add	local06, #36
23318     14 47 0A FB | 	rdlong	local21, local06 wz
2331c     24 28 86 F1 | 	sub	local06, #36
23320     17 47 02 AB |  if_e	rdlong	local21, local09
23324     24 28 06 A1 |  if_e	add	local06, #36
23328     14 47 62 AC |  if_e	wrlong	local21, local06
2332c     24 28 86 A1 |  if_e	sub	local06, #36
23330     28 28 06 F1 | 	add	local06, #40
23334     14 47 0A FB | 	rdlong	local21, local06 wz
23338     28 28 86 F1 | 	sub	local06, #40
2333c     18 00 90 5D |  if_ne	jmp	#LR__3345
23340     10 2E 06 F1 | 	add	local09, #16
23344     17 47 02 FB | 	rdlong	local21, local09
23348     10 2E 86 F1 | 	sub	local09, #16
2334c     28 28 06 F1 | 	add	local06, #40
23350     14 47 62 FC | 	wrlong	local21, local06
23354     28 28 86 F1 | 	sub	local06, #40
23358                 | LR__3345
23358     30 28 06 F1 | 	add	local06, #48
2335c     14 47 0A FB | 	rdlong	local21, local06 wz
23360     30 28 86 F1 | 	sub	local06, #48
23364     18 00 90 5D |  if_ne	jmp	#LR__3346
23368     0C 2E 06 F1 | 	add	local09, #12
2336c     17 47 02 FB | 	rdlong	local21, local09
23370     0C 2E 86 F1 | 	sub	local09, #12
23374     30 28 06 F1 | 	add	local06, #48
23378     14 47 62 FC | 	wrlong	local21, local06
2337c     30 28 86 F1 | 	sub	local06, #48
23380                 | LR__3346
23380     1C 28 06 F1 | 	add	local06, #28
23384     14 47 0A FB | 	rdlong	local21, local06 wz
23388     1C 28 86 F1 | 	sub	local06, #28
2338c     1C 00 90 5D |  if_ne	jmp	#LR__3347
23390     01 2A 06 F6 | 	mov	local07, #1
23394     F2 12 02 F6 | 	mov	arg01, objptr
23398     00 70 04 FF 
2339c     00 12 46 F5 | 	or	arg01, ##148897792
233a0     1C 28 06 F1 | 	add	local06, #28
233a4     14 13 62 FC | 	wrlong	arg01, local06
233a8     1C 28 86 F1 | 	sub	local06, #28
233ac                 | LR__3347
233ac     20 28 06 F1 | 	add	local06, #32
233b0     14 47 0A FB | 	rdlong	local21, local06 wz
233b4     20 28 86 F1 | 	sub	local06, #32
233b8     1C 00 90 5D |  if_ne	jmp	#LR__3348
233bc     01 2A 06 F6 | 	mov	local07, #1
233c0     F2 12 02 F6 | 	mov	arg01, objptr
233c4     00 78 04 FF 
233c8     00 12 46 F5 | 	or	arg01, ##149946368
233cc     20 28 06 F1 | 	add	local06, #32
233d0     14 13 62 FC | 	wrlong	arg01, local06
233d4     20 28 86 F1 | 	sub	local06, #32
233d8                 | LR__3348
233d8     2C 28 06 F1 | 	add	local06, #44
233dc     14 47 0A FB | 	rdlong	local21, local06 wz
233e0     2C 28 86 F1 | 	sub	local06, #44
233e4     44 00 90 5D |  if_ne	jmp	#LR__3351
233e8     14 2E 06 F1 | 	add	local09, #20
233ec     17 47 0A FB | 	rdlong	local21, local09 wz
233f0     14 2E 86 F1 | 	sub	local09, #20
233f4     18 00 90 AD |  if_e	jmp	#LR__3349
233f8     14 2E 06 F1 | 	add	local09, #20
233fc     17 47 02 FB | 	rdlong	local21, local09
23400     2C 28 06 F1 | 	add	local06, #44
23404     14 47 62 FC | 	wrlong	local21, local06
23408     2C 28 86 F1 | 	sub	local06, #44
2340c     1C 00 90 FD | 	jmp	#LR__3350
23410                 | LR__3349
23410     01 2A 06 F6 | 	mov	local07, #1
23414     F2 12 02 F6 | 	mov	arg01, objptr
23418     00 80 04 FF 
2341c     00 12 46 F5 | 	or	arg01, ##150994944
23420     2C 28 06 F1 | 	add	local06, #44
23424     14 13 62 FC | 	wrlong	arg01, local06
23428     2C 28 86 F1 | 	sub	local06, #44
2342c                 | LR__3350
2342c                 | LR__3351
2342c                 | LR__3352
2342c     00 2A 0E F2 | 	cmp	local07, #0 wz
23430     14 13 02 56 |  if_ne	mov	arg01, local06
23434     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
23438     00 42 0E F2 | 	cmp	local19, #0 wz
2343c     00 12 06 A6 |  if_e	mov	arg01, #0
23440     10 00 90 5D |  if_ne	jmp	#LR__3353
23444     00 12 4E F2 | 	cmps	arg01, #0 wz
23448     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2344c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
23450     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23454                 | LR__3353
23454     21 FB 01 F6 | 	mov	result1, local19
23458                 | LR__3354
23458     A7 F0 03 F6 | 	mov	ptra, fp
2345c     B2 00 A0 FD | 	call	#popregs_
23460                 | __system___openraw_ret
23460     2D 00 64 FD | 	ret
23464                 | 
23464                 | __system___closeraw
23464     05 4A 05 F6 | 	mov	COUNT_, #5
23468     A8 00 A0 FD | 	call	#pushregs_
2346c     09 1F 02 F6 | 	mov	local01, arg01
23470     00 20 06 F6 | 	mov	local02, #0
23474     08 1E 06 F1 | 	add	local01, #8
23478     0F FB 09 FB | 	rdlong	result1, local01 wz
2347c     08 1E 86 F1 | 	sub	local01, #8
23480     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
23484     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
23488     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2348c     01 FA 65 A6 |  if_e	neg	result1, #1
23490     A8 00 90 AD |  if_e	jmp	#LR__3362
23494     2C 1E 06 F1 | 	add	local01, #44
23498     0F FB 09 FB | 	rdlong	result1, local01 wz
2349c     2C 1E 86 F1 | 	sub	local01, #44
234a0     38 00 90 AD |  if_e	jmp	#LR__3360
234a4     2C 1E 06 F1 | 	add	local01, #44
234a8     0F 23 02 FB | 	rdlong	local03, local01
234ac     11 25 02 F6 | 	mov	local04, local03
234b0     2C 1E 86 F1 | 	sub	local01, #44
234b4     13 24 46 F7 | 	zerox	local04, #19
234b8     14 22 46 F0 | 	shr	local03, #20
234bc     02 22 66 F0 | 	shl	local03, #2
234c0     ED 22 02 F1 | 	add	local03, __methods__
234c4     11 23 02 FB | 	rdlong	local03, local03
234c8     0F 13 02 F6 | 	mov	arg01, local01
234cc     F2 26 02 F6 | 	mov	local05, objptr
234d0     12 E5 01 F6 | 	mov	objptr, local04
234d4     2D 22 62 FD | 	call	local03
234d8     13 E5 01 F6 | 	mov	objptr, local05
234dc                 | LR__3360
234dc     24 1E 06 F1 | 	add	local01, #36
234e0     0F 27 0A FB | 	rdlong	local05, local01 wz
234e4     24 1E 86 F1 | 	sub	local01, #36
234e8     3C 00 90 AD |  if_e	jmp	#LR__3361
234ec     24 1E 06 F1 | 	add	local01, #36
234f0     0F 23 02 FB | 	rdlong	local03, local01
234f4     11 25 02 F6 | 	mov	local04, local03
234f8     24 1E 86 F1 | 	sub	local01, #36
234fc     13 24 46 F7 | 	zerox	local04, #19
23500     14 22 46 F0 | 	shr	local03, #20
23504     02 22 66 F0 | 	shl	local03, #2
23508     ED 22 02 F1 | 	add	local03, __methods__
2350c     11 23 02 FB | 	rdlong	local03, local03
23510     0F 13 02 F6 | 	mov	arg01, local01
23514     F2 26 02 F6 | 	mov	local05, objptr
23518     12 E5 01 F6 | 	mov	objptr, local04
2351c     2D 22 62 FD | 	call	local03
23520     13 E5 01 F6 | 	mov	objptr, local05
23524     FD 20 02 F6 | 	mov	local02, result1
23528                 | LR__3361
23528     0F 13 02 F6 | 	mov	arg01, local01
2352c     00 14 06 F6 | 	mov	arg02, #0
23530     34 16 06 F6 | 	mov	arg03, #52
23534     98 00 A0 FD | 	call	#\builtin_bytefill_
23538     10 FB 01 F6 | 	mov	result1, local02
2353c                 | LR__3362
2353c     A7 F0 03 F6 | 	mov	ptra, fp
23540     B2 00 A0 FD | 	call	#popregs_
23544                 | __system___closeraw_ret
23544     2D 00 64 FD | 	ret
23548                 | 
23548                 | __system___vfs_open_sdcardx
23548     0B 4A 05 F6 | 	mov	COUNT_, #11
2354c     A8 00 A0 FD | 	call	#pushregs_
23550     09 23 02 F6 | 	mov	local03, arg01
23554     0A 25 02 F6 | 	mov	local04, arg02
23558     0B 27 02 F6 | 	mov	local05, arg03
2355c     0C 29 02 F6 | 	mov	local06, arg04
23560     01 00 00 FF 
23564     24 12 06 F6 | 	mov	arg01, ##548
23568     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
2356c     FD 2A 02 F6 | 	mov	local07, result1
23570     01 00 00 FF 
23574     34 12 06 F6 | 	mov	arg01, ##564
23578     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
2357c     FD 2C 02 F6 | 	mov	local08, result1
23580     11 19 02 F6 | 	mov	arg04, local03
23584     1F 18 C6 F0 | 	sar	arg04, #31
23588     11 17 02 F6 | 	mov	arg03, local03
2358c     01 12 06 F6 | 	mov	arg01, #1
23590     00 14 06 F6 | 	mov	arg02, #0
23594     48 DC BF FD | 	call	#__system___int64_shl
23598     FD 1E 02 F6 | 	mov	local01, result1
2359c     FE 2E 02 F6 | 	mov	local09, result2
235a0     12 19 02 F6 | 	mov	arg04, local04
235a4     1F 18 C6 F0 | 	sar	arg04, #31
235a8     12 17 02 F6 | 	mov	arg03, local04
235ac     01 12 06 F6 | 	mov	arg01, #1
235b0     00 14 06 F6 | 	mov	arg02, #0
235b4     28 DC BF FD | 	call	#__system___int64_shl
235b8     FD 1E 42 F5 | 	or	local01, result1
235bc     FE 2E 42 F5 | 	or	local09, result2
235c0     13 19 02 F6 | 	mov	arg04, local05
235c4     1F 18 C6 F0 | 	sar	arg04, #31
235c8     13 17 02 F6 | 	mov	arg03, local05
235cc     01 12 06 F6 | 	mov	arg01, #1
235d0     00 14 06 F6 | 	mov	arg02, #0
235d4     08 DC BF FD | 	call	#__system___int64_shl
235d8     FD 1E 42 F5 | 	or	local01, result1
235dc     FE 2E 42 F5 | 	or	local09, result2
235e0     14 19 02 F6 | 	mov	arg04, local06
235e4     1F 18 C6 F0 | 	sar	arg04, #31
235e8     14 17 02 F6 | 	mov	arg03, local06
235ec     01 12 06 F6 | 	mov	arg01, #1
235f0     00 14 06 F6 | 	mov	arg02, #0
235f4     E8 DB BF FD | 	call	#__system___int64_shl
235f8     17 15 02 F6 | 	mov	arg02, local09
235fc     FD 1E 42 F5 | 	or	local01, result1
23600     0A FD 41 F5 | 	or	result2, arg02
23604     FE 20 02 F6 | 	mov	local02, result2
23608     0F 13 02 F6 | 	mov	arg01, local01
2360c     10 15 02 F6 | 	mov	arg02, local02
23610     04 DC BF FD | 	call	#__system___usepins
23614     00 FA 0D F2 | 	cmp	result1, #0 wz
23618     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2361c     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
23620     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
23624     00 FA 05 A6 |  if_e	mov	result1, #0
23628     B4 00 90 AD |  if_e	jmp	#LR__3372
2362c     0F 31 02 F6 | 	mov	local10, local01
23630     10 2F 02 F6 | 	mov	local09, local02
23634     01 00 00 FF 
23638     08 2A 06 F1 | 	add	local07, ##520
2363c     15 31 62 FC | 	wrlong	local10, local07
23640     04 2A 06 F1 | 	add	local07, #4
23644     15 2F 62 FC | 	wrlong	local09, local07
23648     01 00 00 FF 
2364c     0C 2A 86 F1 | 	sub	local07, ##524
23650     14 1B 02 F6 | 	mov	arg05, local06
23654     00 12 06 F6 | 	mov	arg01, #0
23658     11 15 02 F6 | 	mov	arg02, local03
2365c     12 17 02 F6 | 	mov	arg03, local04
23660     13 19 02 F6 | 	mov	arg04, local05
23664     F2 30 02 F6 | 	mov	local10, objptr
23668     15 E5 01 F6 | 	mov	objptr, local07
2366c     7C 27 B0 FD | 	call	#_fatfs_cc_disk_setpins
23670     18 E5 01 F6 | 	mov	objptr, local10
23674     FD 32 0A F6 | 	mov	local11, result1 wz
23678     24 00 90 5D |  if_ne	jmp	#LR__3370
2367c     70 01 00 FF 
23680     36 15 06 F6 | 	mov	arg02, ##@LR__4767
23684     16 13 02 F6 | 	mov	arg01, local08
23688     00 16 06 F6 | 	mov	arg03, #0
2368c     F2 32 02 F6 | 	mov	local11, objptr
23690     15 E5 01 F6 | 	mov	objptr, local07
23694     AC 5E B0 FD | 	call	#_fatfs_cc_f_mount
23698     19 E5 01 F6 | 	mov	objptr, local11
2369c     FD 32 02 F6 | 	mov	local11, result1
236a0                 | LR__3370
236a0     00 32 0E F2 | 	cmp	local11, #0 wz
236a4     24 00 90 AD |  if_e	jmp	#LR__3371
236a8     0F 13 02 F6 | 	mov	arg01, local01
236ac     10 15 02 F6 | 	mov	arg02, local02
236b0     B8 DB BF FD | 	call	#__system___freepins
236b4     19 13 6A F6 | 	neg	arg01, local11 wz
236b8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
236bc     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
236c0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
236c4     00 FA 05 F6 | 	mov	result1, #0
236c8     14 00 90 FD | 	jmp	#LR__3372
236cc                 | LR__3371
236cc     15 13 02 F6 | 	mov	arg01, local07
236d0     F2 32 02 F6 | 	mov	local11, objptr
236d4     15 E5 01 F6 | 	mov	objptr, local07
236d8     48 9B B0 FD | 	call	#_fatfs_cc_get_vfs
236dc     19 E5 01 F6 | 	mov	objptr, local11
236e0                 | LR__3372
236e0     A7 F0 03 F6 | 	mov	ptra, fp
236e4     B2 00 A0 FD | 	call	#popregs_
236e8                 | __system___vfs_open_sdcardx_ret
236e8     2D 00 64 FD | 	ret
236ec                 | 
236ec                 | __system____default_getc
236ec     03 4A 05 F6 | 	mov	COUNT_, #3
236f0     A8 00 A0 FD | 	call	#pushregs_
236f4     09 1F 02 F6 | 	mov	local01, arg01
236f8     0F 21 02 FB | 	rdlong	local02, local01
236fc     08 20 06 F1 | 	add	local02, #8
23700     10 23 02 FB | 	rdlong	local03, local02
23704     02 22 CE F7 | 	test	local03, #2 wz
23708     0F 13 02 56 |  if_ne	mov	arg01, local01
2370c     00 01 B0 5D |  if_ne	call	#__system____default_flush
23710     10 23 02 FB | 	rdlong	local03, local02
23714     01 22 46 F5 | 	or	local03, #1
23718     10 23 62 FC | 	wrlong	local03, local02
2371c     08 20 86 F1 | 	sub	local02, #8
23720     10 23 0A FB | 	rdlong	local03, local02 wz
23724     0C 00 90 5D |  if_ne	jmp	#LR__3380
23728     0F 13 02 F6 | 	mov	arg01, local01
2372c     64 16 B0 FD | 	call	#__system____default_filbuf
23730     FD 22 02 F6 | 	mov	local03, result1
23734                 | LR__3380
23734     01 22 56 F2 | 	cmps	local03, #1 wc
23738     01 FA 65 C6 |  if_b	neg	result1, #1
2373c     1C 00 90 CD |  if_b	jmp	#LR__3381
23740     01 22 86 F1 | 	sub	local03, #1
23744     10 23 62 FC | 	wrlong	local03, local02
23748     04 20 06 F1 | 	add	local02, #4
2374c     10 23 02 FB | 	rdlong	local03, local02
23750     11 FB C1 FA | 	rdbyte	result1, local03
23754     01 22 06 F1 | 	add	local03, #1
23758     10 23 62 FC | 	wrlong	local03, local02
2375c                 | LR__3381
2375c     A7 F0 03 F6 | 	mov	ptra, fp
23760     B2 00 A0 FD | 	call	#popregs_
23764                 | __system____default_getc_ret
23764     2D 00 64 FD | 	ret
23768                 | 
23768                 | __system____default_putc
23768     06 4A 05 F6 | 	mov	COUNT_, #6
2376c     A8 00 A0 FD | 	call	#pushregs_
23770     09 1F 02 F6 | 	mov	local01, arg01
23774     0A 21 02 F6 | 	mov	local02, arg02
23778     10 23 02 FB | 	rdlong	local03, local02
2377c     08 22 06 F1 | 	add	local03, #8
23780     11 FB 01 FB | 	rdlong	result1, local03
23784     01 FA CD F7 | 	test	result1, #1 wz
23788     10 13 02 56 |  if_ne	mov	arg01, local02
2378c     80 00 B0 5D |  if_ne	call	#__system____default_flush
23790     11 25 02 FB | 	rdlong	local04, local03
23794     02 24 46 F5 | 	or	local04, #2
23798     11 25 62 FC | 	wrlong	local04, local03
2379c     08 22 86 F1 | 	sub	local03, #8
237a0     11 27 02 FB | 	rdlong	local05, local03
237a4     10 22 06 F1 | 	add	local03, #16
237a8     11 15 02 FB | 	rdlong	arg02, local03
237ac     10 22 86 F1 | 	sub	local03, #16
237b0     13 FB 01 F6 | 	mov	result1, local05
237b4     0A FB 01 F1 | 	add	result1, arg02
237b8     FD 1E 42 FC | 	wrbyte	local01, result1
237bc     0F 1F E2 F8 | 	getbyte	local01, local01, #0
237c0     01 26 06 F1 | 	add	local05, #1
237c4     11 27 62 FC | 	wrlong	local05, local03
237c8     06 20 06 F1 | 	add	local02, #6
237cc     10 29 EA FA | 	rdword	local06, local02 wz
237d0     06 20 86 F1 | 	sub	local02, #6
237d4     0C 22 06 51 |  if_ne	add	local03, #12
237d8     11 25 02 5B |  if_ne	rdlong	local04, local03
237dc     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
237e0     0C 00 90 AD |  if_e	jmp	#LR__3390
237e4     0A 1E 0E F2 | 	cmp	local01, #10 wz
237e8     01 28 0E A2 |  if_e	cmp	local06, #1 wz
237ec     10 00 90 5D |  if_ne	jmp	#LR__3391
237f0                 | LR__3390
237f0     10 13 02 F6 | 	mov	arg01, local02
237f4     18 00 B0 FD | 	call	#__system____default_flush
237f8     00 FA 0D F2 | 	cmp	result1, #0 wz
237fc     01 1E 66 56 |  if_ne	neg	local01, #1
23800                 | LR__3391
23800     0F FB 01 F6 | 	mov	result1, local01
23804     A7 F0 03 F6 | 	mov	ptra, fp
23808     B2 00 A0 FD | 	call	#popregs_
2380c                 | __system____default_putc_ret
2380c     2D 00 64 FD | 	ret
23810                 | 
23810                 | __system____default_flush
23810     06 4A 05 F6 | 	mov	COUNT_, #6
23814     A8 00 A0 FD | 	call	#pushregs_
23818     09 1F 02 F6 | 	mov	local01, arg01
2381c     0F 21 02 FB | 	rdlong	local02, local01
23820     10 23 02 FB | 	rdlong	local03, local02
23824     08 20 06 F1 | 	add	local02, #8
23828     10 FB 01 FB | 	rdlong	result1, local02
2382c     08 20 86 F1 | 	sub	local02, #8
23830     02 FA CD F7 | 	test	result1, #2 wz
23834     D0 00 90 AD |  if_e	jmp	#LR__3402
23838     01 22 56 F2 | 	cmps	local03, #1 wc
2383c     20 01 90 CD |  if_b	jmp	#LR__3404
23840     08 1E 06 F1 | 	add	local01, #8
23844     0F FB 01 FB | 	rdlong	result1, local01
23848     08 1E 86 F1 | 	sub	local01, #8
2384c     40 FA CD F7 | 	test	result1, #64 wz
23850     68 00 90 AD |  if_e	jmp	#LR__3401
23854     08 1E 06 F1 | 	add	local01, #8
23858     0F 17 02 FB | 	rdlong	arg03, local01
2385c     08 1E 86 F1 | 	sub	local01, #8
23860     80 16 CE F7 | 	test	arg03, #128 wz
23864     54 00 90 AD |  if_e	jmp	#LR__3400
23868     30 1E 06 F1 | 	add	local01, #48
2386c     0F 25 02 FB | 	rdlong	local04, local01
23870     12 27 02 F6 | 	mov	local05, local04
23874     30 1E 86 F1 | 	sub	local01, #48
23878     13 26 46 F7 | 	zerox	local05, #19
2387c     14 24 46 F0 | 	shr	local04, #20
23880     02 24 66 F0 | 	shl	local04, #2
23884     ED 24 02 F1 | 	add	local04, __methods__
23888     12 25 02 FB | 	rdlong	local04, local04
2388c     0F 13 02 F6 | 	mov	arg01, local01
23890     00 14 06 F6 | 	mov	arg02, #0
23894     02 16 06 F6 | 	mov	arg03, #2
23898     F2 28 02 F6 | 	mov	local06, objptr
2389c     13 E5 01 F6 | 	mov	objptr, local05
238a0     2D 24 62 FD | 	call	local04
238a4     14 E5 01 F6 | 	mov	objptr, local06
238a8     08 1E 06 F1 | 	add	local01, #8
238ac     0F 29 02 FB | 	rdlong	local06, local01
238b0     80 28 26 F5 | 	andn	local06, #128
238b4     0F 29 62 FC | 	wrlong	local06, local01
238b8     08 1E 86 F1 | 	sub	local01, #8
238bc                 | LR__3400
238bc                 | LR__3401
238bc     18 1E 06 F1 | 	add	local01, #24
238c0     0F 25 02 FB | 	rdlong	local04, local01
238c4     12 27 02 F6 | 	mov	local05, local04
238c8     18 1E 86 F1 | 	sub	local01, #24
238cc     13 26 46 F7 | 	zerox	local05, #19
238d0     14 24 46 F0 | 	shr	local04, #20
238d4     02 24 66 F0 | 	shl	local04, #2
238d8     ED 24 02 F1 | 	add	local04, __methods__
238dc     12 25 02 FB | 	rdlong	local04, local04
238e0     10 20 06 F1 | 	add	local02, #16
238e4     10 15 02 FB | 	rdlong	arg02, local02
238e8     10 20 86 F1 | 	sub	local02, #16
238ec     0F 13 02 F6 | 	mov	arg01, local01
238f0     11 17 02 F6 | 	mov	arg03, local03
238f4     F2 28 02 F6 | 	mov	local06, objptr
238f8     13 E5 01 F6 | 	mov	objptr, local05
238fc     2D 24 62 FD | 	call	local04
23900     14 E5 01 F6 | 	mov	objptr, local06
23904     58 00 90 FD | 	jmp	#LR__3404
23908                 | LR__3402
23908     08 20 06 F1 | 	add	local02, #8
2390c     10 29 02 FB | 	rdlong	local06, local02
23910     08 20 86 F1 | 	sub	local02, #8
23914     01 28 CE F7 | 	test	local06, #1 wz
23918     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
2391c     40 00 90 AD |  if_e	jmp	#LR__3403
23920     30 1E 06 F1 | 	add	local01, #48
23924     0F 25 02 FB | 	rdlong	local04, local01
23928     12 27 02 F6 | 	mov	local05, local04
2392c     30 1E 86 F1 | 	sub	local01, #48
23930     13 26 46 F7 | 	zerox	local05, #19
23934     14 24 46 F0 | 	shr	local04, #20
23938     02 24 66 F0 | 	shl	local04, #2
2393c     ED 24 02 F1 | 	add	local04, __methods__
23940     12 25 02 FB | 	rdlong	local04, local04
23944     0F 13 02 F6 | 	mov	arg01, local01
23948     11 15 62 F6 | 	neg	arg02, local03
2394c     01 16 06 F6 | 	mov	arg03, #1
23950     F2 28 02 F6 | 	mov	local06, objptr
23954     13 E5 01 F6 | 	mov	objptr, local05
23958     2D 24 62 FD | 	call	local04
2395c     14 E5 01 F6 | 	mov	objptr, local06
23960                 | LR__3403
23960                 | LR__3404
23960     10 01 68 FC | 	wrlong	#0, local02
23964     04 20 06 F1 | 	add	local02, #4
23968     10 01 68 FC | 	wrlong	#0, local02
2396c     04 20 06 F1 | 	add	local02, #4
23970     10 01 68 FC | 	wrlong	#0, local02
23974     00 FA 05 F6 | 	mov	result1, #0
23978     A7 F0 03 F6 | 	mov	ptra, fp
2397c     B2 00 A0 FD | 	call	#popregs_
23980                 | __system____default_flush_ret
23980     2D 00 64 FD | 	ret
23984                 | 
23984                 | __system____default_buffer_init
23984     02 4A 05 F6 | 	mov	COUNT_, #2
23988     A8 00 A0 FD | 	call	#pushregs_
2398c     09 1F 02 F6 | 	mov	local01, arg01
23990     0F 21 02 FB | 	rdlong	local02, local01
23994     0F 13 02 F6 | 	mov	arg01, local01
23998     F8 02 B0 FD | 	call	#__system___isatty
2399c     00 FA 0D F2 | 	cmp	result1, #0 wz
239a0     06 1E 06 51 |  if_ne	add	local01, #6
239a4     0F 0B 58 5C |  if_ne	wrword	#5, local01
239a8     06 1E 06 A1 |  if_e	add	local01, #6
239ac     0F 0D 58 AC |  if_e	wrword	#6, local01
239b0     14 20 06 F1 | 	add	local02, #20
239b4     10 1F 02 F6 | 	mov	local01, local02
239b8     04 20 86 F1 | 	sub	local02, #4
239bc     10 1F 62 FC | 	wrlong	local01, local02
239c0     04 20 86 F1 | 	sub	local02, #4
239c4     02 00 80 FF 
239c8     10 01 68 FC | 	wrlong	##1024, local02
239cc     00 FA 05 F6 | 	mov	result1, #0
239d0     A7 F0 03 F6 | 	mov	ptra, fp
239d4     B2 00 A0 FD | 	call	#popregs_
239d8                 | __system____default_buffer_init_ret
239d8     2D 00 64 FD | 	ret
239dc                 | 
239dc                 | __system__stat
239dc     04 4A 05 F6 | 	mov	COUNT_, #4
239e0     A8 00 A0 FD | 	call	#pushregs_
239e4     0A 1F 02 F6 | 	mov	local01, arg02
239e8     84 E7 05 F1 | 	add	ptr___system__dat__, #388
239ec     F3 20 02 F6 | 	mov	local02, ptr___system__dat__
239f0     09 15 02 F6 | 	mov	arg02, arg01
239f4     10 13 02 F6 | 	mov	arg01, local02
239f8     00 16 06 F6 | 	mov	arg03, #0
239fc     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
23a00     AC B8 BF FD | 	call	#__system____getvfsforfile
23a04     FD 22 0A F6 | 	mov	local03, result1 wz
23a08     10 00 90 AD |  if_e	jmp	#LR__3410
23a0c     34 22 06 F1 | 	add	local03, #52
23a10     11 17 0A FB | 	rdlong	arg03, local03 wz
23a14     34 22 86 F1 | 	sub	local03, #52
23a18     14 00 90 5D |  if_ne	jmp	#LR__3411
23a1c                 | LR__3410
23a1c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23a20     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
23a24     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23a28     01 FA 65 F6 | 	neg	result1, #1
23a2c     68 00 90 FD | 	jmp	#LR__3412
23a30                 | LR__3411
23a30     0F 13 02 F6 | 	mov	arg01, local01
23a34     00 14 06 F6 | 	mov	arg02, #0
23a38     30 16 06 F6 | 	mov	arg03, #48
23a3c     09 25 02 F6 | 	mov	local04, arg01
23a40     98 00 A0 FD | 	call	#\builtin_bytefill_
23a44     12 FB 01 F6 | 	mov	result1, local04
23a48     10 13 CA FA | 	rdbyte	arg01, local02 wz
23a4c     08 1E 06 A1 |  if_e	add	local01, #8
23a50     08 00 80 AF 
23a54     0F FF 6B AC |  if_e	wrlong	##4607, local01
23a58     00 FA 05 A6 |  if_e	mov	result1, #0
23a5c     38 00 90 AD |  if_e	jmp	#LR__3412
23a60     34 22 06 F1 | 	add	local03, #52
23a64     11 23 02 FB | 	rdlong	local03, local03
23a68     11 25 02 F6 | 	mov	local04, local03
23a6c     13 22 46 F7 | 	zerox	local03, #19
23a70     14 24 46 F0 | 	shr	local04, #20
23a74     02 24 66 F0 | 	shl	local04, #2
23a78     ED 24 02 F1 | 	add	local04, __methods__
23a7c     12 25 02 FB | 	rdlong	local04, local04
23a80     10 13 02 F6 | 	mov	arg01, local02
23a84     0F 15 02 F6 | 	mov	arg02, local01
23a88     F2 20 02 F6 | 	mov	local02, objptr
23a8c     11 E5 01 F6 | 	mov	objptr, local03
23a90     2D 24 62 FD | 	call	local04
23a94     10 E5 01 F6 | 	mov	objptr, local02
23a98                 | LR__3412
23a98     A7 F0 03 F6 | 	mov	ptra, fp
23a9c     B2 00 A0 FD | 	call	#popregs_
23aa0                 | __system__stat_ret
23aa0     2D 00 64 FD | 	ret
23aa4                 | 
23aa4                 | __system__read
23aa4     0A 12 16 F2 | 	cmp	arg01, #10 wc
23aa8     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
23aac     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
23ab0     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
23ab4     01 FA 65 36 |  if_ae	neg	result1, #1
23ab8     20 00 90 3D |  if_ae	jmp	#LR__3420
23abc     34 12 06 FD | 	qmul	arg01, #52
23ac0     02 00 00 FF 
23ac4     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
23ac8     18 12 62 FD | 	getqx	arg01
23acc     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
23ad0     02 00 00 FF 
23ad4     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
23ad8     D0 0F B0 FD | 	call	#__system___vfsread
23adc                 | LR__3420
23adc                 | __system__read_ret
23adc     2D 00 64 FD | 	ret
23ae0                 | 
23ae0                 | __system__close
23ae0     0A 12 16 F2 | 	cmp	arg01, #10 wc
23ae4     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
23ae8     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
23aec     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
23af0     01 FA 65 36 |  if_ae	neg	result1, #1
23af4     20 00 90 3D |  if_ae	jmp	#LR__3430
23af8     34 12 06 FD | 	qmul	arg01, #52
23afc     02 00 00 FF 
23b00     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
23b04     18 12 62 FD | 	getqx	arg01
23b08     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
23b0c     02 00 00 FF 
23b10     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
23b14     4C F9 BF FD | 	call	#__system___closeraw
23b18                 | LR__3430
23b18                 | __system__close_ret
23b18     2D 00 64 FD | 	ret
23b1c                 | 
23b1c                 | __system__lseek
23b1c     06 4A 05 F6 | 	mov	COUNT_, #6
23b20     A8 00 A0 FD | 	call	#pushregs_
23b24     0A 12 16 F2 | 	cmp	arg01, #10 wc
23b28     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
23b2c     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
23b30     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
23b34     01 FA 65 36 |  if_ae	neg	result1, #1
23b38     C4 00 90 3D |  if_ae	jmp	#LR__3441
23b3c     34 12 06 FD | 	qmul	arg01, #52
23b40     02 00 00 FF 
23b44     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
23b48     18 1E 62 FD | 	getqx	local01
23b4c     F3 1E 02 F1 | 	add	local01, ptr___system__dat__
23b50     30 1E 06 F1 | 	add	local01, #48
23b54     0F 13 0A FB | 	rdlong	arg01, local01 wz
23b58     30 1E 86 F1 | 	sub	local01, #48
23b5c     02 00 00 FF 
23b60     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
23b64     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
23b68     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
23b6c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
23b70     01 FA 65 A6 |  if_e	neg	result1, #1
23b74     88 00 90 AD |  if_e	jmp	#LR__3441
23b78     08 1E 06 F1 | 	add	local01, #8
23b7c     0F 21 02 FB | 	rdlong	local02, local01
23b80     08 1E 86 F1 | 	sub	local01, #8
23b84     40 20 CE F7 | 	test	local02, #64 wz
23b88     08 1E 06 51 |  if_ne	add	local01, #8
23b8c     0F 21 02 5B |  if_ne	rdlong	local02, local01
23b90     80 20 46 55 |  if_ne	or	local02, #128
23b94     0F 21 62 5C |  if_ne	wrlong	local02, local01
23b98     08 1E 86 51 |  if_ne	sub	local01, #8
23b9c     30 1E 06 F1 | 	add	local01, #48
23ba0     0F 23 02 FB | 	rdlong	local03, local01
23ba4     11 25 02 F6 | 	mov	local04, local03
23ba8     30 1E 86 F1 | 	sub	local01, #48
23bac     13 24 46 F7 | 	zerox	local04, #19
23bb0     14 22 46 F0 | 	shr	local03, #20
23bb4     02 22 66 F0 | 	shl	local03, #2
23bb8     ED 22 02 F1 | 	add	local03, __methods__
23bbc     11 23 02 FB | 	rdlong	local03, local03
23bc0     0F 13 02 F6 | 	mov	arg01, local01
23bc4     F2 26 02 F6 | 	mov	local05, objptr
23bc8     12 E5 01 F6 | 	mov	objptr, local04
23bcc     2D 22 62 FD | 	call	local03
23bd0     13 E5 01 F6 | 	mov	objptr, local05
23bd4     FD 28 02 F6 | 	mov	local06, result1
23bd8     00 28 56 F2 | 	cmps	local06, #0 wc
23bdc     1C 00 90 3D |  if_ae	jmp	#LR__3440
23be0     14 13 6A F6 | 	neg	arg01, local06 wz
23be4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23be8     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
23bec     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23bf0     01 FA 65 56 |  if_ne	neg	result1, #1
23bf4     00 FA 05 A6 |  if_e	mov	result1, #0
23bf8     04 00 90 FD | 	jmp	#LR__3441
23bfc                 | LR__3440
23bfc     14 FB 01 F6 | 	mov	result1, local06
23c00                 | LR__3441
23c00     A7 F0 03 F6 | 	mov	ptra, fp
23c04     B2 00 A0 FD | 	call	#popregs_
23c08                 | __system__lseek_ret
23c08     2D 00 64 FD | 	ret
23c0c                 | 
23c0c                 | __system___ioctl
23c0c     03 4A 05 F6 | 	mov	COUNT_, #3
23c10     A8 00 A0 FD | 	call	#pushregs_
23c14     00 12 4E F2 | 	cmps	arg01, #0 wz
23c18     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
23c1c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
23c20     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
23c24     01 FA 65 A6 |  if_e	neg	result1, #1
23c28     5C 00 90 AD |  if_e	jmp	#LR__3451
23c2c     28 12 06 F1 | 	add	arg01, #40
23c30     09 1F 02 FB | 	rdlong	local01, arg01
23c34     0F 21 02 F6 | 	mov	local02, local01
23c38     28 12 86 F1 | 	sub	arg01, #40
23c3c     13 20 46 F7 | 	zerox	local02, #19
23c40     14 1E 46 F0 | 	shr	local01, #20
23c44     02 1E 66 F0 | 	shl	local01, #2
23c48     ED 1E 02 F1 | 	add	local01, __methods__
23c4c     0F 1F 02 FB | 	rdlong	local01, local01
23c50     F2 22 02 F6 | 	mov	local03, objptr
23c54     10 E5 01 F6 | 	mov	objptr, local02
23c58     2D 1E 62 FD | 	call	local01
23c5c     11 E5 01 F6 | 	mov	objptr, local03
23c60     FD 12 0A F6 | 	mov	arg01, result1 wz
23c64     1C 00 90 AD |  if_e	jmp	#LR__3450
23c68     00 12 4E F2 | 	cmps	arg01, #0 wz
23c6c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23c70     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
23c74     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23c78     01 FA 65 56 |  if_ne	neg	result1, #1
23c7c     00 FA 05 A6 |  if_e	mov	result1, #0
23c80     04 00 90 FD | 	jmp	#LR__3451
23c84                 | LR__3450
23c84     00 FA 05 F6 | 	mov	result1, #0
23c88                 | LR__3451
23c88     A7 F0 03 F6 | 	mov	ptra, fp
23c8c     B2 00 A0 FD | 	call	#popregs_
23c90                 | __system___ioctl_ret
23c90     2D 00 64 FD | 	ret
23c94                 | 
23c94                 | __system___isatty
23c94     00 4A 05 F6 | 	mov	COUNT_, #0
23c98     A8 00 A0 FD | 	call	#pushregs_
23c9c     0C F0 07 F1 | 	add	ptra, #12
23ca0     04 4E 05 F1 | 	add	fp, #4
23ca4     A7 12 62 FC | 	wrlong	arg01, fp
23ca8     04 4E 05 F1 | 	add	fp, #4
23cac     A7 16 02 F6 | 	mov	arg03, fp
23cb0     08 4E 85 F1 | 	sub	fp, #8
23cb4     00 15 06 F6 | 	mov	arg02, #256
23cb8     50 FF BF FD | 	call	#__system___ioctl
23cbc     00 FA 0D F2 | 	cmp	result1, #0 wz
23cc0     01 FA 05 A6 |  if_e	mov	result1, #1
23cc4     00 FA 05 56 |  if_ne	mov	result1, #0
23cc8     A7 F0 03 F6 | 	mov	ptra, fp
23ccc     B2 00 A0 FD | 	call	#popregs_
23cd0                 | __system___isatty_ret
23cd0     2D 00 64 FD | 	ret
23cd4                 | 
23cd4                 | __system____getftab
23cd4     0A 12 16 F2 | 	cmp	arg01, #10 wc
23cd8     34 12 06 CD |  if_b	qmul	arg01, #52
23cdc     00 FA 05 36 |  if_ae	mov	result1, #0
23ce0     02 00 00 CF 
23ce4     20 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1312
23ce8     18 FA 61 CD |  if_b	getqx	result1
23cec     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
23cf0     02 00 00 CF 
23cf4     20 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
23cf8                 | __system____getftab_ret
23cf8     2D 00 64 FD | 	ret
23cfc                 | 
23cfc                 | __system__strncpy
23cfc     09 01 02 F6 | 	mov	_var01, arg01
23d00                 | LR__3460
23d00     01 16 86 F1 | 	sub	arg03, #1
23d04     00 16 56 F2 | 	cmps	arg03, #0 wc
23d08     18 00 90 CD |  if_b	jmp	#LR__3461
23d0c     0A FB C1 FA | 	rdbyte	result1, arg02
23d10     00 FB 41 FC | 	wrbyte	result1, _var01
23d14     01 14 06 F1 | 	add	arg02, #1
23d18     00 FB C9 FA | 	rdbyte	result1, _var01 wz
23d1c     01 00 06 F1 | 	add	_var01, #1
23d20     DC FF 9F 5D |  if_ne	jmp	#LR__3460
23d24                 | LR__3461
23d24     97 0C 48 FB | 	callpa	#(@LR__3463-@LR__3462)>>2,fcache_load_ptr_
23d28                 | LR__3462
23d28     01 16 86 F1 | 	sub	arg03, #1
23d2c     00 16 56 F2 | 	cmps	arg03, #0 wc
23d30     00 03 02 36 |  if_ae	mov	_var02, _var01
23d34     01 00 06 31 |  if_ae	add	_var01, #1
23d38     01 01 48 3C |  if_ae	wrbyte	#0, _var02
23d3c     E8 FF 9F 3D |  if_ae	jmp	#LR__3462
23d40                 | LR__3463
23d40     09 FB 01 F6 | 	mov	result1, arg01
23d44                 | __system__strncpy_ret
23d44     2D 00 64 FD | 	ret
23d48                 | 
23d48                 | __system__strncat
23d48     00 14 4E F2 | 	cmps	arg02, #0 wz
23d4c     50 00 90 AD |  if_e	jmp	#LR__3474
23d50     01 16 16 F2 | 	cmp	arg03, #1 wc
23d54     48 00 90 CD |  if_b	jmp	#LR__3474
23d58     09 01 02 F6 | 	mov	_var01, arg01
23d5c     97 1E 48 FB | 	callpa	#(@LR__3472-@LR__3470)>>2,fcache_load_ptr_
23d60                 | LR__3470
23d60     00 FB C9 FA | 	rdbyte	result1, _var01 wz
23d64     01 00 06 51 |  if_ne	add	_var01, #1
23d68     F4 FF 9F 5D |  if_ne	jmp	#LR__3470
23d6c     0B 03 02 F6 | 	mov	_var02, arg03
23d70                 | LR__3471
23d70     0A 05 C2 FA | 	rdbyte	_var03, arg02
23d74     02 07 02 F6 | 	mov	_var04, _var03
23d78     07 06 4E F7 | 	zerox	_var04, #7 wz
23d7c     01 14 06 F1 | 	add	arg02, #1
23d80     18 00 90 AD |  if_e	jmp	#LR__3473
23d84     01 02 86 F1 | 	sub	_var02, #1
23d88     00 02 56 F2 | 	cmps	_var02, #0 wc
23d8c     00 07 02 36 |  if_ae	mov	_var04, _var01
23d90     01 00 06 31 |  if_ae	add	_var01, #1
23d94     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
23d98     D4 FF 9F 3D |  if_ae	jmp	#LR__3471
23d9c                 | LR__3472
23d9c                 | LR__3473
23d9c     00 01 48 FC | 	wrbyte	#0, _var01
23da0                 | LR__3474
23da0     09 FB 01 F6 | 	mov	result1, arg01
23da4                 | __system__strncat_ret
23da4     2D 00 64 FD | 	ret
23da8                 | 
23da8                 | __system__strncmp
23da8     09 01 0A F6 | 	mov	_var01, arg01 wz
23dac     14 00 90 5D |  if_ne	jmp	#LR__3480
23db0     00 14 0E F2 | 	cmp	arg02, #0 wz
23db4     01 02 66 56 |  if_ne	neg	_var02, #1
23db8     00 02 06 A6 |  if_e	mov	_var02, #0
23dbc     01 FB 01 F6 | 	mov	result1, _var02
23dc0     74 00 90 FD | 	jmp	#__system__strncmp_ret
23dc4                 | LR__3480
23dc4     00 14 0E F2 | 	cmp	arg02, #0 wz
23dc8     01 FA 05 A6 |  if_e	mov	result1, #1
23dcc     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
23dd0     0B 05 02 F6 | 	mov	_var03, arg03
23dd4     97 16 48 FB | 	callpa	#(@LR__3482-@LR__3481)>>2,fcache_load_ptr_
23dd8                 | LR__3481
23dd8     00 07 C2 FA | 	rdbyte	_var04, _var01
23ddc     0A 09 02 F6 | 	mov	_var05, arg02
23de0     04 0B C2 FA | 	rdbyte	_var06, _var05
23de4     01 04 86 F1 | 	sub	_var03, #1
23de8     00 04 56 F2 | 	cmps	_var03, #0 wc
23dec     01 00 06 F1 | 	add	_var01, #1
23df0     01 14 06 F1 | 	add	arg02, #1
23df4     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
23df8     08 00 90 2D |  if_nc_and_z	jmp	#LR__3483
23dfc     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
23e00     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3481
23e04                 | LR__3482
23e04                 | LR__3483
23e04     00 04 56 F2 | 	cmps	_var03, #0 wc
23e08     00 FA 05 C6 |  if_b	mov	result1, #0
23e0c     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
23e10     05 07 0A F2 | 	cmp	_var04, _var06 wz
23e14     00 FA 05 A6 |  if_e	mov	result1, #0
23e18     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
23e1c     00 06 0E F2 | 	cmp	_var04, #0 wz
23e20     01 FA 65 A6 |  if_e	neg	result1, #1
23e24     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
23e28     00 0A 0E F2 | 	cmp	_var06, #0 wz
23e2c     01 FA 05 A6 |  if_e	mov	result1, #1
23e30     03 FB 01 56 |  if_ne	mov	result1, _var04
23e34     05 FB 81 51 |  if_ne	sub	result1, _var06
23e38                 | __system__strncmp_ret
23e38     2D 00 64 FD | 	ret
23e3c                 | 
23e3c                 | __system____root_opendir
23e3c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
23e40     04 12 06 F1 | 	add	arg01, #4
23e44     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
23e48     00 FA 05 F6 | 	mov	result1, #0
23e4c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
23e50                 | __system____root_opendir_ret
23e50     2D 00 64 FD | 	ret
23e54                 | 
23e54                 | __system____root_readdir
23e54     03 4A 05 F6 | 	mov	COUNT_, #3
23e58     A8 00 A0 FD | 	call	#pushregs_
23e5c     09 1F 02 F6 | 	mov	local01, arg01
23e60     0A 21 02 F6 | 	mov	local02, arg02
23e64     04 1E 06 F1 | 	add	local01, #4
23e68     0F 23 02 FB | 	rdlong	local03, local01
23e6c     04 1E 86 F1 | 	sub	local01, #4
23e70                 | LR__3490
23e70     74 E6 05 F1 | 	add	ptr___system__dat__, #116
23e74     F3 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
23e78     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
23e7c     01 FA 65 A6 |  if_e	neg	result1, #1
23e80     48 00 90 AD |  if_e	jmp	#LR__3491
23e84     11 17 0A FB | 	rdlong	arg03, local03 wz
23e88     04 22 06 A1 |  if_e	add	local03, #4
23e8c     E0 FF 9F AD |  if_e	jmp	#LR__3490
23e90     11 15 02 FB | 	rdlong	arg02, local03
23e94     01 14 06 F1 | 	add	arg02, #1
23e98     10 13 02 F6 | 	mov	arg01, local02
23e9c     40 16 06 F6 | 	mov	arg03, #64
23ea0     58 FE BF FD | 	call	#__system__strncpy
23ea4     50 20 06 F1 | 	add	local02, #80
23ea8     10 03 48 FC | 	wrbyte	#1, local02
23eac     08 20 86 F1 | 	sub	local02, #8
23eb0     10 01 68 FC | 	wrlong	#0, local02
23eb4     04 20 06 F1 | 	add	local02, #4
23eb8     10 01 68 FC | 	wrlong	#0, local02
23ebc     04 22 06 F1 | 	add	local03, #4
23ec0     04 1E 06 F1 | 	add	local01, #4
23ec4     0F 23 62 FC | 	wrlong	local03, local01
23ec8     00 FA 05 F6 | 	mov	result1, #0
23ecc                 | LR__3491
23ecc     A7 F0 03 F6 | 	mov	ptra, fp
23ed0     B2 00 A0 FD | 	call	#popregs_
23ed4                 | __system____root_readdir_ret
23ed4     2D 00 64 FD | 	ret
23ed8                 | 
23ed8                 | __system____root_closedir
23ed8     00 FA 05 F6 | 	mov	result1, #0
23edc                 | __system____root_closedir_ret
23edc     2D 00 64 FD | 	ret
23ee0                 | 
23ee0                 | __system____root_stat
23ee0     0A 01 02 F6 | 	mov	_var01, arg02
23ee4     00 13 02 F6 | 	mov	arg01, _var01
23ee8     00 14 06 F6 | 	mov	arg02, #0
23eec     30 16 06 F6 | 	mov	arg03, #48
23ef0     98 00 A0 FD | 	call	#\builtin_bytefill_
23ef4     08 00 06 F1 | 	add	_var01, #8
23ef8     08 00 80 FF 
23efc     00 FF 6B FC | 	wrlong	##4607, _var01
23f00     00 FA 05 F6 | 	mov	result1, #0
23f04                 | __system____root_stat_ret
23f04     2D 00 64 FD | 	ret
23f08                 | 
23f08                 | __system___normalizeName
23f08     00 00 06 F6 | 	mov	_var01, #0
23f0c     09 03 02 F6 | 	mov	_var02, arg01
23f10     01 05 02 F6 | 	mov	_var03, _var02
23f14                 | LR__3500
23f14     01 07 CA FA | 	rdbyte	_var04, _var02 wz
23f18     5C 01 90 AD |  if_e	jmp	#LR__3519
23f1c     00 00 0E F2 | 	cmp	_var01, #0 wz
23f20     02 07 02 56 |  if_ne	mov	_var04, _var03
23f24     01 04 06 51 |  if_ne	add	_var03, #1
23f28     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
23f2c     00 00 06 56 |  if_ne	mov	_var01, #0
23f30     01 07 C2 FA | 	rdbyte	_var04, _var02
23f34     2E 06 0E F2 | 	cmp	_var04, #46 wz
23f38     D8 00 90 5D |  if_ne	jmp	#LR__3512
23f3c     01 02 06 F1 | 	add	_var02, #1
23f40     01 07 C2 FA | 	rdbyte	_var04, _var02
23f44     01 02 86 F1 | 	sub	_var02, #1
23f48     2F 06 0E F2 | 	cmp	_var04, #47 wz
23f4c     18 00 90 AD |  if_e	jmp	#LR__3501
23f50     01 02 06 F1 | 	add	_var02, #1
23f54     01 09 C2 FA | 	rdbyte	_var05, _var02
23f58     01 02 86 F1 | 	sub	_var02, #1
23f5c     04 0B 02 F6 | 	mov	_var06, _var05
23f60     07 0A 4E F7 | 	zerox	_var06, #7 wz
23f64     10 00 90 5D |  if_ne	jmp	#LR__3502
23f68                 | LR__3501
23f68     01 0D 02 F6 | 	mov	_var07, _var02
23f6c     01 0C 06 F1 | 	add	_var07, #1
23f70     06 03 02 F6 | 	mov	_var02, _var07
23f74     E0 00 90 FD | 	jmp	#LR__3516
23f78                 | LR__3502
23f78     01 02 06 F1 | 	add	_var02, #1
23f7c     01 0D C2 FA | 	rdbyte	_var07, _var02
23f80     01 02 86 F1 | 	sub	_var02, #1
23f84     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
23f88     2E 06 0E F2 | 	cmp	_var04, #46 wz
23f8c     84 00 90 5D |  if_ne	jmp	#LR__3511
23f90     02 02 06 F1 | 	add	_var02, #2
23f94     01 0D C2 FA | 	rdbyte	_var07, _var02
23f98     02 02 86 F1 | 	sub	_var02, #2
23f9c     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
23fa0     2F 06 0E F2 | 	cmp	_var04, #47 wz
23fa4     18 00 90 AD |  if_e	jmp	#LR__3503
23fa8     02 02 06 F1 | 	add	_var02, #2
23fac     01 09 C2 FA | 	rdbyte	_var05, _var02
23fb0     02 02 86 F1 | 	sub	_var02, #2
23fb4     04 0B 02 F6 | 	mov	_var06, _var05
23fb8     07 0A 4E F7 | 	zerox	_var06, #7 wz
23fbc     54 00 90 5D |  if_ne	jmp	#LR__3510
23fc0                 | LR__3503
23fc0     02 02 06 F1 | 	add	_var02, #2
23fc4     09 05 5A F2 | 	cmps	_var03, arg01 wcz
23fc8     40 00 90 ED |  if_be	jmp	#LR__3509
23fcc     02 0F 02 F6 | 	mov	_var08, _var03
23fd0     01 0E 86 F1 | 	sub	_var08, #1
23fd4                 | LR__3504
23fd4     07 07 C2 FA | 	rdbyte	_var04, _var08
23fd8     2F 06 0E F2 | 	cmp	_var04, #47 wz
23fdc     0C 00 90 5D |  if_ne	jmp	#LR__3505
23fe0     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
23fe4     01 0E 86 11 |  if_a	sub	_var08, #1
23fe8     E8 FF 9F 1D |  if_a	jmp	#LR__3504
23fec                 | LR__3505
23fec     97 0C 48 FB | 	callpa	#(@LR__3507-@LR__3506)>>2,fcache_load_ptr_
23ff0                 | LR__3506
23ff0     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
23ff4     10 00 90 ED |  if_be	jmp	#LR__3508
23ff8     07 07 C2 FA | 	rdbyte	_var04, _var08
23ffc     2F 06 0E F2 | 	cmp	_var04, #47 wz
24000     01 0E 86 51 |  if_ne	sub	_var08, #1
24004     E8 FF 9F 5D |  if_ne	jmp	#LR__3506
24008                 | LR__3507
24008                 | LR__3508
24008     07 05 02 F6 | 	mov	_var03, _var08
2400c                 | LR__3509
2400c     01 00 06 F6 | 	mov	_var01, #1
24010     44 00 90 FD | 	jmp	#LR__3516
24014                 | LR__3510
24014                 | LR__3511
24014                 | LR__3512
24014     97 18 48 FB | 	callpa	#(@LR__3514-@LR__3513)>>2,fcache_load_ptr_
24018                 | LR__3513
24018     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2401c     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
24020     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
24024     20 00 90 AD |  if_e	jmp	#LR__3515
24028     01 0B 02 F6 | 	mov	_var06, _var02
2402c     01 09 02 F6 | 	mov	_var05, _var02
24030     01 08 06 F1 | 	add	_var05, #1
24034     05 11 C2 FA | 	rdbyte	_var09, _var06
24038     04 03 02 F6 | 	mov	_var02, _var05
2403c     02 11 42 FC | 	wrbyte	_var09, _var03
24040     01 04 06 F1 | 	add	_var03, #1
24044     D0 FF 9F FD | 	jmp	#LR__3513
24048                 | LR__3514
24048                 | LR__3515
24048     01 07 C2 FA | 	rdbyte	_var04, _var02
2404c     2F 06 0E F2 | 	cmp	_var04, #47 wz
24050     C0 FE 9F 5D |  if_ne	jmp	#LR__3500
24054     01 00 06 F6 | 	mov	_var01, #1
24058                 | LR__3516
24058     97 0C 48 FB | 	callpa	#(@LR__3518-@LR__3517)>>2,fcache_load_ptr_
2405c                 | LR__3517
2405c     01 07 C2 FA | 	rdbyte	_var04, _var02
24060     2F 06 0E F2 | 	cmp	_var04, #47 wz
24064     01 0D 02 A6 |  if_e	mov	_var07, _var02
24068     01 0C 06 A1 |  if_e	add	_var07, #1
2406c     06 03 02 A6 |  if_e	mov	_var02, _var07
24070     E8 FF 9F AD |  if_e	jmp	#LR__3517
24074                 | LR__3518
24074     9C FE 9F FD | 	jmp	#LR__3500
24078                 | LR__3519
24078     02 01 48 FC | 	wrbyte	#0, _var03
2407c                 | __system___normalizeName_ret
2407c     2D 00 64 FD | 	ret
24080                 | 
24080                 | __system___strrev
24080     09 01 CA FA | 	rdbyte	_var01, arg01 wz
24084     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
24088     09 03 02 F6 | 	mov	_var02, arg01
2408c     97 1A 48 FB | 	callpa	#(@LR__3522-@LR__3520)>>2,fcache_load_ptr_
24090                 | LR__3520
24090     01 01 CA FA | 	rdbyte	_var01, _var02 wz
24094     01 02 06 51 |  if_ne	add	_var02, #1
24098     F4 FF 9F 5D |  if_ne	jmp	#LR__3520
2409c     01 02 86 F1 | 	sub	_var02, #1
240a0                 | LR__3521
240a0     09 03 5A F2 | 	cmps	_var02, arg01 wcz
240a4     1C 00 90 ED |  if_be	jmp	#LR__3523
240a8     09 01 C2 FA | 	rdbyte	_var01, arg01
240ac     01 05 C2 FA | 	rdbyte	_var03, _var02
240b0     09 05 42 FC | 	wrbyte	_var03, arg01
240b4     01 01 42 FC | 	wrbyte	_var01, _var02
240b8     01 12 06 F1 | 	add	arg01, #1
240bc     01 02 86 F1 | 	sub	_var02, #1
240c0     DC FF 9F FD | 	jmp	#LR__3521
240c4                 | LR__3522
240c4                 | LR__3523
240c4                 | __system___strrev_ret
240c4     2D 00 64 FD | 	ret
240c8                 | 
240c8                 | __system___fmtpad
240c8     06 4A 05 F6 | 	mov	COUNT_, #6
240cc     A8 00 A0 FD | 	call	#pushregs_
240d0     09 1F 02 F6 | 	mov	local01, arg01
240d4     0A 21 02 F6 | 	mov	local02, arg02
240d8     0B 23 02 F6 | 	mov	local03, arg03
240dc     10 13 EA F8 | 	getbyte	arg01, local02, #1
240e0     16 20 46 F0 | 	shr	local02, #22
240e4     03 20 0E F5 | 	and	local02, #3 wz
240e8     00 24 06 F6 | 	mov	local04, #0
240ec     01 20 06 A6 |  if_e	mov	local02, #1
240f0     0C 21 CA F7 | 	test	local02, arg04 wz
240f4     00 FA 05 A6 |  if_e	mov	result1, #0
240f8     88 00 90 AD |  if_e	jmp	#LR__3533
240fc     09 23 C2 F2 | 	subr	local03, arg01
24100     01 22 56 F2 | 	cmps	local03, #1 wc
24104     00 FA 05 C6 |  if_b	mov	result1, #0
24108     78 00 90 CD |  if_b	jmp	#LR__3533
2410c     03 20 0E F2 | 	cmp	local02, #3 wz
24110     18 00 90 5D |  if_ne	jmp	#LR__3530
24114     01 18 0E F2 | 	cmp	arg04, #1 wz
24118     6E 20 62 FD | 	wrz	local02
2411c     10 23 02 F1 | 	add	local03, local02
24120     11 23 52 F6 | 	abs	local03, local03 wc
24124     01 22 46 F0 | 	shr	local03, #1
24128     11 23 82 F6 | 	negc	local03, local03
2412c                 | LR__3530
2412c     01 22 56 F2 | 	cmps	local03, #1 wc
24130     4C 00 90 CD |  if_b	jmp	#LR__3532
24134     11 27 02 F6 | 	mov	local05, local03
24138                 | LR__3531
24138     0F 21 02 F6 | 	mov	local02, local01
2413c     0F 29 02 F6 | 	mov	local06, local01
24140     13 20 46 F7 | 	zerox	local02, #19
24144     14 28 46 F0 | 	shr	local06, #20
24148     02 28 66 F0 | 	shl	local06, #2
2414c     ED 28 02 F1 | 	add	local06, __methods__
24150     14 29 02 FB | 	rdlong	local06, local06
24154     20 12 06 F6 | 	mov	arg01, #32
24158     F2 22 02 F6 | 	mov	local03, objptr
2415c     10 E5 01 F6 | 	mov	objptr, local02
24160     2D 28 62 FD | 	call	local06
24164     11 E5 01 F6 | 	mov	objptr, local03
24168     FD 28 02 F6 | 	mov	local06, result1
2416c     00 28 56 F2 | 	cmps	local06, #0 wc
24170     14 FB 01 C6 |  if_b	mov	result1, local06
24174     0C 00 90 CD |  if_b	jmp	#LR__3533
24178     14 25 02 F1 | 	add	local04, local06
2417c     EE 27 6E FB | 	djnz	local05, #LR__3531
24180                 | LR__3532
24180     12 FB 01 F6 | 	mov	result1, local04
24184                 | LR__3533
24184     A7 F0 03 F6 | 	mov	ptra, fp
24188     B2 00 A0 FD | 	call	#popregs_
2418c                 | __system___fmtpad_ret
2418c     2D 00 64 FD | 	ret
24190                 | 
24190                 | __system___uitoa
24190     04 4A 05 F6 | 	mov	COUNT_, #4
24194     A8 00 A0 FD | 	call	#pushregs_
24198     09 1F 02 F6 | 	mov	local01, arg01
2419c     00 1A 4E F2 | 	cmps	arg05, #0 wz
241a0     0F 1B 02 F6 | 	mov	arg05, local01
241a4     00 20 06 F6 | 	mov	local02, #0
241a8     37 22 06 56 |  if_ne	mov	local03, #55
241ac     57 22 06 A6 |  if_e	mov	local03, #87
241b0                 | LR__3540
241b0     0B 15 12 FD | 	qdiv	arg02, arg03
241b4     19 24 62 FD | 	getqy	local04
241b8     0B 15 12 FD | 	qdiv	arg02, arg03
241bc     0A 24 16 F2 | 	cmp	local04, #10 wc
241c0     30 24 06 C1 |  if_b	add	local04, #48
241c4     11 25 02 31 |  if_ae	add	local04, local03
241c8     0D 25 42 FC | 	wrbyte	local04, arg05
241cc     01 1A 06 F1 | 	add	arg05, #1
241d0     01 20 06 F1 | 	add	local02, #1
241d4     18 14 62 FD | 	getqx	arg02
241d8     00 14 0E F2 | 	cmp	arg02, #0 wz
241dc     D0 FF 9F 5D |  if_ne	jmp	#LR__3540
241e0     0C 21 12 F2 | 	cmp	local02, arg04 wc
241e4     C8 FF 9F CD |  if_b	jmp	#LR__3540
241e8     0D 01 48 FC | 	wrbyte	#0, arg05
241ec     0F 13 02 F6 | 	mov	arg01, local01
241f0     8C FE BF FD | 	call	#__system___strrev
241f4     10 FB 01 F6 | 	mov	result1, local02
241f8     A7 F0 03 F6 | 	mov	ptra, fp
241fc     B2 00 A0 FD | 	call	#popregs_
24200                 | __system___uitoa_ret
24200     2D 00 64 FD | 	ret
24204                 | 
24204                 | __system__disassemble_0442
24204     10 4A 05 F6 | 	mov	COUNT_, #16
24208     A8 00 A0 FD | 	call	#pushregs_
2420c     09 1F 02 F6 | 	mov	local01, arg01
24210     0A 21 02 F6 | 	mov	local02, arg02
24214     0B 23 02 F6 | 	mov	local03, arg03
24218     0C 25 02 F6 | 	mov	local04, arg04
2421c     0D 27 02 F6 | 	mov	local05, arg05
24220     13 13 52 F6 | 	abs	arg01, local05 wc
24224     1F 28 C6 C9 |  if_b	decod	local06, #31
24228     00 28 06 36 |  if_ae	mov	local06, #0
2422c     64 D0 BF FD | 	call	#__system___float_fromuns
24230     14 FB 61 F5 | 	xor	result1, local06
24234     FD 2A 02 F6 | 	mov	local07, result1
24238     00 2C 06 F6 | 	mov	local08, #0
2423c     0F 13 02 F6 | 	mov	arg01, local01
24240     00 14 06 F6 | 	mov	arg02, #0
24244     01 16 06 F6 | 	mov	arg03, #1
24248     80 D8 BF FD | 	call	#__system___float_cmp
2424c     00 FA 0D F2 | 	cmp	result1, #0 wz
24250     00 2E 06 A6 |  if_e	mov	local09, #0
24254     10 01 68 AC |  if_e	wrlong	#0, local02
24258     11 2F 62 AC |  if_e	wrlong	local09, local03
2425c     8C 01 90 AD |  if_e	jmp	#LR__3562
24260     0F 13 02 F6 | 	mov	arg01, local01
24264     30 DD BF FD | 	call	#__system____builtin_ilogb
24268     FD 30 02 F6 | 	mov	local10, result1
2426c     0A 26 0E F2 | 	cmp	local05, #10 wz
24270     24 00 90 5D |  if_ne	jmp	#LR__3550
24274     18 2F 02 F6 | 	mov	local09, local10
24278     01 2E 66 F0 | 	shl	local09, #1
2427c     18 2F 02 F1 | 	add	local09, local10
24280     17 31 52 F6 | 	abs	local10, local09 wc
24284     0A 30 16 FD | 	qdiv	local10, #10
24288     09 32 06 F6 | 	mov	local11, #9
2428c     18 30 62 FD | 	getqx	local10
24290     18 31 82 F6 | 	negc	local10, local10
24294     04 00 90 FD | 	jmp	#LR__3551
24298                 | LR__3550
24298     18 32 06 F6 | 	mov	local11, #24
2429c                 | LR__3551
2429c                 | LR__3552
2429c     08 2C 56 F2 | 	cmps	local08, #8 wc
242a0     01 2C 06 F1 | 	add	local08, #1
242a4     60 00 90 3D |  if_ae	jmp	#LR__3553
242a8     00 C0 1F FF 
242ac     00 12 06 F6 | 	mov	arg01, ##1065353216
242b0     15 15 02 F6 | 	mov	arg02, local07
242b4     18 17 02 F6 | 	mov	arg03, local10
242b8     88 E3 BF FD | 	call	#__system___float_pow_n
242bc     FD 14 02 F6 | 	mov	arg02, result1
242c0     0F 13 02 F6 | 	mov	arg01, local01
242c4     D4 D5 BF FD | 	call	#__system___float_div
242c8     FD 34 02 F6 | 	mov	local12, result1
242cc     1A 13 02 F6 | 	mov	arg01, local12
242d0     00 C0 1F FF 
242d4     00 14 06 F6 | 	mov	arg02, ##1065353216
242d8     01 16 06 F6 | 	mov	arg03, #1
242dc     EC D7 BF FD | 	call	#__system___float_cmp
242e0     00 FA 55 F2 | 	cmps	result1, #0 wc
242e4     01 30 86 C1 |  if_b	sub	local10, #1
242e8     B0 FF 9F CD |  if_b	jmp	#LR__3552
242ec     15 15 02 F6 | 	mov	arg02, local07
242f0     1A 13 02 F6 | 	mov	arg01, local12
242f4     01 16 66 F6 | 	neg	arg03, #1
242f8     D0 D7 BF FD | 	call	#__system___float_cmp
242fc     00 FA 55 F2 | 	cmps	result1, #0 wc
24300     01 30 06 31 |  if_ae	add	local10, #1
24304     94 FF 9F 3D |  if_ae	jmp	#LR__3552
24308                 | LR__3553
24308     1A 13 02 F6 | 	mov	arg01, local12
2430c     88 DC BF FD | 	call	#__system____builtin_ilogb
24310     FD 36 02 F6 | 	mov	local13, result1
24314     1A 39 02 F6 | 	mov	local14, local12
24318     17 39 06 F4 | 	bitl	local14, #279
2431c     17 38 26 F4 | 	bith	local14, #23
24320     1B 39 62 F0 | 	shl	local14, local13
24324     02 26 0E F2 | 	cmp	local05, #2 wz
24328     02 24 66 A0 |  if_e	shl	local04, #2
2432c     00 3A 06 F6 | 	mov	local15, #0
24330     00 24 56 F2 | 	cmps	local04, #0 wc
24334     10 00 90 3D |  if_ae	jmp	#LR__3554
24338     18 25 C2 F2 | 	subr	local04, local10
2433c     00 24 56 F2 | 	cmps	local04, #0 wc
24340     A0 00 90 CD |  if_b	jmp	#LR__3561
24344     04 00 90 FD | 	jmp	#LR__3555
24348                 | LR__3554
24348     01 24 06 F1 | 	add	local04, #1
2434c                 | LR__3555
2434c     19 25 7A F3 | 	fles	local04, local11 wcz
24350     01 3C 06 F6 | 	mov	local16, #1
24354     97 22 48 FB | 	callpa	#(@LR__3557-@LR__3556)>>2,fcache_load_ptr_
24358                 | LR__3556
24358     00 40 00 FF 
2435c     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
24360     38 00 90 3D |  if_ae	jmp	#LR__3558
24364     01 24 56 F2 | 	cmps	local04, #1 wc
24368     01 24 86 F1 | 	sub	local04, #1
2436c     2C 00 90 CD |  if_b	jmp	#LR__3558
24370     13 3B 02 FD | 	qmul	local15, local05
24374     1C 37 02 F6 | 	mov	local13, local14
24378     17 36 46 F0 | 	shr	local13, #23
2437c     17 39 06 F4 | 	bitl	local14, #279
24380     18 3A 62 FD | 	getqx	local15
24384     13 3D 02 FD | 	qmul	local16, local05
24388     18 3C 62 FD | 	getqx	local16
2438c     13 39 02 FD | 	qmul	local14, local05
24390     1B 3B 02 F1 | 	add	local15, local13
24394     18 38 62 FD | 	getqx	local14
24398     BC FF 9F FD | 	jmp	#LR__3556
2439c                 | LR__3557
2439c                 | LR__3558
2439c     13 2F 02 F6 | 	mov	local09, local05
243a0     17 2E 66 F0 | 	shl	local09, #23
243a4     17 37 52 F6 | 	abs	local13, local09 wc
243a8     01 36 46 F0 | 	shr	local13, #1
243ac     1B 37 82 F6 | 	negc	local13, local13
243b0     1B 39 1A F2 | 	cmp	local14, local13 wcz
243b4     20 00 90 1D |  if_a	jmp	#LR__3559
243b8     17 26 66 F0 | 	shl	local05, #23
243bc     13 37 52 F6 | 	abs	local13, local05 wc
243c0     01 36 46 F0 | 	shr	local13, #1
243c4     1B 37 82 F6 | 	negc	local13, local13
243c8     1B 39 0A F2 | 	cmp	local14, local13 wz
243cc     14 00 90 5D |  if_ne	jmp	#LR__3560
243d0     01 3A CE F7 | 	test	local15, #1 wz
243d4     0C 00 90 AD |  if_e	jmp	#LR__3560
243d8                 | LR__3559
243d8     01 3A 06 F1 | 	add	local15, #1
243dc     1E 3B 0A F2 | 	cmp	local15, local16 wz
243e0     01 30 06 A1 |  if_e	add	local10, #1
243e4                 | LR__3560
243e4                 | LR__3561
243e4     10 3B 62 FC | 	wrlong	local15, local02
243e8     11 31 62 FC | 	wrlong	local10, local03
243ec                 | LR__3562
243ec     A7 F0 03 F6 | 	mov	ptra, fp
243f0     B2 00 A0 FD | 	call	#popregs_
243f4                 | __system__disassemble_0442_ret
243f4     2D 00 64 FD | 	ret
243f8                 | 
243f8                 | __system__emitsign_0444
243f8     00 FA 05 F6 | 	mov	result1, #0
243fc     00 14 0E F2 | 	cmp	arg02, #0 wz
24400     09 01 02 56 |  if_ne	mov	_var01, arg01
24404     01 12 06 51 |  if_ne	add	arg01, #1
24408     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
2440c     01 FA 05 56 |  if_ne	mov	result1, #1
24410     00 16 0E F2 | 	cmp	arg03, #0 wz
24414     09 61 48 5C |  if_ne	wrbyte	#48, arg01
24418     01 12 06 51 |  if_ne	add	arg01, #1
2441c     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
24420     02 FA 05 51 |  if_ne	add	result1, #2
24424                 | __system__emitsign_0444_ret
24424     2D 00 64 FD | 	ret
24428                 | 
24428                 | __system___gettxfunc
24428     01 4A 05 F6 | 	mov	COUNT_, #1
2442c     A8 00 A0 FD | 	call	#pushregs_
24430     A0 F8 BF FD | 	call	#__system____getftab
24434     FD 1E 0A F6 | 	mov	local01, result1 wz
24438     10 00 90 AD |  if_e	jmp	#LR__3570
2443c     08 1E 06 F1 | 	add	local01, #8
24440     0F 15 0A FB | 	rdlong	arg02, local01 wz
24444     08 1E 86 F1 | 	sub	local01, #8
24448     08 00 90 5D |  if_ne	jmp	#LR__3571
2444c                 | LR__3570
2444c     00 FA 05 F6 | 	mov	result1, #0
24450     0C 00 90 FD | 	jmp	#LR__3572
24454                 | LR__3571
24454     00 38 04 FF 
24458     00 1E 46 F5 | 	or	local01, ##141557760
2445c     0F FB 01 F6 | 	mov	result1, local01
24460                 | LR__3572
24460     A7 F0 03 F6 | 	mov	ptra, fp
24464     B2 00 A0 FD | 	call	#popregs_
24468                 | __system___gettxfunc_ret
24468     2D 00 64 FD | 	ret
2446c                 | 
2446c                 | __system___getrxfunc
2446c     01 4A 05 F6 | 	mov	COUNT_, #1
24470     A8 00 A0 FD | 	call	#pushregs_
24474     5C F8 BF FD | 	call	#__system____getftab
24478     FD 1E 0A F6 | 	mov	local01, result1 wz
2447c     10 00 90 AD |  if_e	jmp	#LR__3580
24480     08 1E 06 F1 | 	add	local01, #8
24484     0F 15 0A FB | 	rdlong	arg02, local01 wz
24488     08 1E 86 F1 | 	sub	local01, #8
2448c     08 00 90 5D |  if_ne	jmp	#LR__3581
24490                 | LR__3580
24490     00 FA 05 F6 | 	mov	result1, #0
24494     0C 00 90 FD | 	jmp	#LR__3582
24498                 | LR__3581
24498     00 40 04 FF 
2449c     00 1E 46 F5 | 	or	local01, ##142606336
244a0     0F FB 01 F6 | 	mov	result1, local01
244a4                 | LR__3582
244a4     A7 F0 03 F6 | 	mov	ptra, fp
244a8     B2 00 A0 FD | 	call	#popregs_
244ac                 | __system___getrxfunc_ret
244ac     2D 00 64 FD | 	ret
244b0                 | 
244b0                 | __system___getiolock_0484
244b0     01 4A 05 F6 | 	mov	COUNT_, #1
244b4     A8 00 A0 FD | 	call	#pushregs_
244b8     18 F8 BF FD | 	call	#__system____getftab
244bc     FD 1E 0A F6 | 	mov	local01, result1 wz
244c0     10 00 90 AD |  if_e	jmp	#LR__3590
244c4     08 1E 06 F1 | 	add	local01, #8
244c8     0F FB 09 FB | 	rdlong	result1, local01 wz
244cc     08 1E 86 F1 | 	sub	local01, #8
244d0     18 00 90 5D |  if_ne	jmp	#LR__3591
244d4                 | LR__3590
244d4     01 00 00 FF 
244d8     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
244dc     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
244e0     01 00 00 FF 
244e4     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
244e8     08 00 90 FD | 	jmp	#LR__3592
244ec                 | LR__3591
244ec     0C 1E 06 F1 | 	add	local01, #12
244f0     0F FB 01 F6 | 	mov	result1, local01
244f4                 | LR__3592
244f4     A7 F0 03 F6 | 	mov	ptra, fp
244f8     B2 00 A0 FD | 	call	#popregs_
244fc                 | __system___getiolock_0484_ret
244fc     2D 00 64 FD | 	ret
24500                 | 
24500                 | __system____ScanForChar
24500     09 01 02 F6 | 	mov	_var01, arg01
24504     09 03 02 F6 | 	mov	_var02, arg01
24508     97 06 48 FB | 	callpa	#(@LR__3601-@LR__3600)>>2,fcache_load_ptr_
2450c                 | LR__3600
2450c     01 FB C9 FA | 	rdbyte	result1, _var02 wz
24510     01 02 06 51 |  if_ne	add	_var02, #1
24514     F4 FF 9F 5D |  if_ne	jmp	#LR__3600
24518                 | LR__3601
24518     09 03 82 F1 | 	sub	_var02, arg01
2451c     01 FB 01 F6 | 	mov	result1, _var02
24520     FD 12 0A F6 | 	mov	arg01, result1 wz
24524     00 FA 05 A6 |  if_e	mov	result1, #0
24528     B8 00 90 AD |  if_e	jmp	#LR__3608
2452c     0A 05 02 F6 | 	mov	_var03, arg02
24530     07 04 4E F7 | 	zerox	_var03, #7 wz
24534     00 FA 05 A6 |  if_e	mov	result1, #0
24538     A8 00 90 AD |  if_e	jmp	#LR__3608
2453c     01 16 16 F2 | 	cmp	arg03, #1 wc
24540     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
24544     01 16 06 86 |  if_c_and_z	mov	arg03, #1
24548     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
2454c     94 00 90 4D |  if_c_and_nz	jmp	#LR__3608
24550     09 17 1A F2 | 	cmp	arg03, arg01 wcz
24554     10 00 90 ED |  if_be	jmp	#LR__3602
24558     00 18 0E F2 | 	cmp	arg04, #0 wz
2455c     00 FA 05 A6 |  if_e	mov	result1, #0
24560     80 00 90 AD |  if_e	jmp	#LR__3608
24564     09 17 02 F6 | 	mov	arg03, arg01
24568                 | LR__3602
24568     01 16 86 F1 | 	sub	arg03, #1
2456c     00 18 0E F2 | 	cmp	arg04, #0 wz
24570     38 00 90 5D |  if_ne	jmp	#LR__3604
24574     0B 07 02 F6 | 	mov	_var04, arg03
24578     09 09 02 F6 | 	mov	_var05, arg01
2457c                 | LR__3603
2457c     04 07 12 F2 | 	cmp	_var04, _var05 wc
24580     5C 00 90 3D |  if_ae	jmp	#LR__3607
24584     03 05 02 F6 | 	mov	_var03, _var04
24588     00 05 02 F1 | 	add	_var03, _var01
2458c     02 05 C2 FA | 	rdbyte	_var03, _var03
24590     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
24594     0C 05 0A F2 | 	cmp	_var03, arg04 wz
24598     01 06 06 A1 |  if_e	add	_var04, #1
2459c     03 FB 01 A6 |  if_e	mov	result1, _var04
245a0     40 00 90 AD |  if_e	jmp	#LR__3608
245a4     01 06 06 F1 | 	add	_var04, #1
245a8     D0 FF 9F FD | 	jmp	#LR__3603
245ac                 | LR__3604
245ac     0B 07 02 F6 | 	mov	_var04, arg03
245b0                 | LR__3605
245b0     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
245b4     28 00 90 1D |  if_a	jmp	#LR__3606
245b8     03 09 02 F6 | 	mov	_var05, _var04
245bc     00 09 02 F1 | 	add	_var05, _var01
245c0     04 05 C2 FA | 	rdbyte	_var03, _var05
245c4     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
245c8     04 05 0A F2 | 	cmp	_var03, _var05 wz
245cc     01 06 06 A1 |  if_e	add	_var04, #1
245d0     03 FB 01 A6 |  if_e	mov	result1, _var04
245d4     0C 00 90 AD |  if_e	jmp	#LR__3608
245d8     01 06 86 F1 | 	sub	_var04, #1
245dc     D0 FF 9F FD | 	jmp	#LR__3605
245e0                 | LR__3606
245e0                 | LR__3607
245e0     00 FA 05 F6 | 	mov	result1, #0
245e4                 | LR__3608
245e4                 | __system____ScanForChar_ret
245e4     2D 00 64 FD | 	ret
245e8                 | 
245e8                 | __system___basic_dir
245e8     05 4A 05 F6 | 	mov	COUNT_, #5
245ec     A8 00 A0 FD | 	call	#pushregs_
245f0     4C F0 07 F1 | 	add	ptra, #76
245f4     04 4E 05 F1 | 	add	fp, #4
245f8     A7 12 62 FC | 	wrlong	arg01, fp
245fc     04 4E 05 F1 | 	add	fp, #4
24600     A7 14 62 FC | 	wrlong	arg02, fp
24604     04 4E 85 F1 | 	sub	fp, #4
24608     A7 14 0A FB | 	rdlong	arg02, fp wz
2460c     04 4E 85 F1 | 	sub	fp, #4
24610     04 4E 05 51 |  if_ne	add	fp, #4
24614     A7 1E 02 5B |  if_ne	rdlong	local01, fp
24618     04 4E 85 51 |  if_ne	sub	fp, #4
2461c     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
24620     70 00 90 AD |  if_e	jmp	#LR__3610
24624     03 00 00 FF 
24628     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
2462c     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
24630     03 00 00 FF 
24634     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
24638     03 00 00 5F 
2463c     28 E7 05 51 |  if_ne	add	ptr___system__dat__, ##1832
24640     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
24644     03 00 00 5F 
24648     28 E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
2464c     14 EA BF 5D |  if_ne	call	#__system__closedir
24650     70 01 00 FF 
24654     38 13 06 F6 | 	mov	arg01, ##@LR__4768
24658     1C E9 BF FD | 	call	#__system__opendir
2465c     03 00 00 FF 
24660     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
24664     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
24668     08 4E 05 F1 | 	add	fp, #8
2466c     A7 20 02 FB | 	rdlong	local02, fp
24670     04 E6 05 F1 | 	add	ptr___system__dat__, #4
24674     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
24678     04 4E 85 F1 | 	sub	fp, #4
2467c     A7 20 02 FB | 	rdlong	local02, fp
24680     04 4E 85 F1 | 	sub	fp, #4
24684     04 E6 05 F1 | 	add	ptr___system__dat__, #4
24688     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
2468c     03 00 00 FF 
24690     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
24694                 | LR__3610
24694     03 00 00 FF 
24698     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
2469c     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
246a0     03 00 00 FF 
246a4     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
246a8     70 01 00 AF 
246ac     3A FB 05 A6 |  if_e	mov	result1, ##@LR__4769
246b0     84 02 90 AD |  if_e	jmp	#LR__3623
246b4                 | LR__3611
246b4     03 00 00 FF 
246b8     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
246bc     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
246c0     03 00 00 FF 
246c4     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
246c8     0C EA BF FD | 	call	#__system__readdir
246cc     0C 4E 05 F1 | 	add	fp, #12
246d0     A7 FA 61 FC | 	wrlong	result1, fp
246d4     0C 4E 85 F1 | 	sub	fp, #12
246d8     00 FA 0D F2 | 	cmp	result1, #0 wz
246dc     38 00 90 5D |  if_ne	jmp	#LR__3612
246e0     03 00 00 FF 
246e4     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
246e8     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
246ec     03 00 00 FF 
246f0     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
246f4     6C E9 BF FD | 	call	#__system__closedir
246f8     03 00 00 FF 
246fc     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
24700     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
24704     03 00 00 FF 
24708     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
2470c     70 01 00 FF 
24710     3C FB 05 F6 | 	mov	result1, ##@LR__4770
24714     20 02 90 FD | 	jmp	#LR__3623
24718                 | LR__3612
24718     0C 4E 05 F1 | 	add	fp, #12
2471c     A7 12 02 FB | 	rdlong	arg01, fp
24720     0C 4E 85 F1 | 	sub	fp, #12
24724     03 00 00 FF 
24728     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2472c     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
24730     03 00 00 FF 
24734     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
24738     48 07 B0 FD | 	call	#__system___pat_match
2473c     00 FA 0D F2 | 	cmp	result1, #0 wz
24740     70 FF 9F AD |  if_e	jmp	#LR__3611
24744     03 00 00 FF 
24748     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2474c     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
24750     03 00 00 FF 
24754     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
24758     78 01 90 AD |  if_e	jmp	#LR__3619
2475c     0C 4E 05 F1 | 	add	fp, #12
24760     A7 12 02 FB | 	rdlong	arg01, fp
24764     04 4E 05 F1 | 	add	fp, #4
24768     A7 14 02 F6 | 	mov	arg02, fp
2476c     10 4E 85 F1 | 	sub	fp, #16
24770     68 F2 BF FD | 	call	#__system__stat
24774     40 4E 05 F1 | 	add	fp, #64
24778     A7 FA 61 FC | 	wrlong	result1, fp
2477c     40 4E 85 F1 | 	sub	fp, #64
24780     00 FA 0D F2 | 	cmp	result1, #0 wz
24784     70 01 00 5F 
24788     3E FB 05 56 |  if_ne	mov	result1, ##@LR__4771
2478c     A8 01 90 5D |  if_ne	jmp	#LR__3623
24790     18 4E 05 F1 | 	add	fp, #24
24794     A7 20 02 FB | 	rdlong	local02, fp
24798     78 00 00 FF 
2479c     00 20 06 F5 | 	and	local02, ##61440
247a0     2C 4E 05 F1 | 	add	fp, #44
247a4     A7 20 62 FC | 	wrlong	local02, fp
247a8     38 4E 85 F1 | 	sub	fp, #56
247ac     A7 20 02 FB | 	rdlong	local02, fp
247b0     0C 4E 85 F1 | 	sub	fp, #12
247b4     10 21 C2 FA | 	rdbyte	local02, local02
247b8     2E 20 0E F2 | 	cmp	local02, #46 wz
247bc     08 4E 05 A1 |  if_e	add	fp, #8
247c0     A7 04 68 AC |  if_e	wrlong	#2, fp
247c4     08 4E C5 F3 | 	sumz	fp, #8
247c8     A7 00 68 5C |  if_ne	wrlong	#0, fp
247cc     08 4E 85 51 |  if_ne	sub	fp, #8
247d0     44 4E 05 F1 | 	add	fp, #68
247d4     A7 20 02 FB | 	rdlong	local02, fp
247d8     44 4E 85 F1 | 	sub	fp, #68
247dc     08 00 00 FF 
247e0     00 20 0E F2 | 	cmp	local02, ##4096 wz
247e4     18 00 90 5D |  if_ne	jmp	#LR__3613
247e8     08 4E 05 F1 | 	add	fp, #8
247ec     A7 20 02 FB | 	rdlong	local02, fp
247f0     10 20 46 F5 | 	or	local02, #16
247f4     A7 20 62 FC | 	wrlong	local02, fp
247f8     08 4E 85 F1 | 	sub	fp, #8
247fc     AC 00 90 FD | 	jmp	#LR__3618
24800                 | LR__3613
24800     44 4E 05 F1 | 	add	fp, #68
24804     A7 20 02 FB | 	rdlong	local02, fp
24808     44 4E 85 F1 | 	sub	fp, #68
2480c     10 00 00 FF 
24810     00 20 0E F2 | 	cmp	local02, ##8192 wz
24814     44 4E 05 51 |  if_ne	add	fp, #68
24818     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2481c     44 4E 85 51 |  if_ne	sub	fp, #68
24820     18 00 00 5F 
24824     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
24828     44 4E 05 51 |  if_ne	add	fp, #68
2482c     0F 23 02 56 |  if_ne	mov	local03, local01
24830     44 4E 85 51 |  if_ne	sub	fp, #68
24834     20 00 00 5F 
24838     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
2483c     18 00 90 5D |  if_ne	jmp	#LR__3614
24840     08 4E 05 F1 | 	add	fp, #8
24844     A7 20 02 FB | 	rdlong	local02, fp
24848     04 20 46 F5 | 	or	local02, #4
2484c     A7 20 62 FC | 	wrlong	local02, fp
24850     08 4E 85 F1 | 	sub	fp, #8
24854     54 00 90 FD | 	jmp	#LR__3617
24858                 | LR__3614
24858     18 4E 05 F1 | 	add	fp, #24
2485c     A7 20 02 FB | 	rdlong	local02, fp
24860     18 4E 85 F1 | 	sub	fp, #24
24864     92 20 CE F7 | 	test	local02, #146 wz
24868     18 00 90 5D |  if_ne	jmp	#LR__3615
2486c     08 4E 05 F1 | 	add	fp, #8
24870     A7 20 02 FB | 	rdlong	local02, fp
24874     01 20 46 F5 | 	or	local02, #1
24878     A7 20 62 FC | 	wrlong	local02, fp
2487c     08 4E 85 F1 | 	sub	fp, #8
24880     28 00 90 FD | 	jmp	#LR__3616
24884                 | LR__3615
24884     44 4E 05 F1 | 	add	fp, #68
24888     A7 24 02 FB | 	rdlong	local04, fp
2488c     44 4E 85 F1 | 	sub	fp, #68
24890     08 00 00 FF 
24894     00 24 0E F2 | 	cmp	local04, ##4096 wz
24898     08 4E 05 51 |  if_ne	add	fp, #8
2489c     A7 24 02 5B |  if_ne	rdlong	local04, fp
248a0     20 24 46 55 |  if_ne	or	local04, #32
248a4     A7 24 62 5C |  if_ne	wrlong	local04, fp
248a8     08 4E 85 51 |  if_ne	sub	fp, #8
248ac                 | LR__3616
248ac                 | LR__3617
248ac                 | LR__3618
248ac     08 4E 05 F1 | 	add	fp, #8
248b0     A7 24 02 FB | 	rdlong	local04, fp
248b4     08 4E 85 F1 | 	sub	fp, #8
248b8     03 00 00 FF 
248bc     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
248c0     F3 1E 02 FB | 	rdlong	local01, ptr___system__dat__
248c4     03 00 00 FF 
248c8     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
248cc     0F 25 CA F7 | 	test	local04, local01 wz
248d0     E0 FD 9F AD |  if_e	jmp	#LR__3611
248d4                 | LR__3619
248d4     0C 4E 05 F1 | 	add	fp, #12
248d8     A7 12 02 FB | 	rdlong	arg01, fp
248dc     0C 4E 85 F1 | 	sub	fp, #12
248e0     09 27 02 F6 | 	mov	local05, arg01
248e4     97 06 48 FB | 	callpa	#(@LR__3621-@LR__3620)>>2,fcache_load_ptr_
248e8                 | LR__3620
248e8     13 FB C9 FA | 	rdbyte	result1, local05 wz
248ec     01 26 06 51 |  if_ne	add	local05, #1
248f0     F4 FF 9F 5D |  if_ne	jmp	#LR__3620
248f4                 | LR__3621
248f4     13 13 C2 F2 | 	subr	arg01, local05
248f8     01 12 06 F1 | 	add	arg01, #1
248fc     64 E0 BF FD | 	call	#__system___gc_alloc_managed
24900     48 4E 05 F1 | 	add	fp, #72
24904     A7 FA 61 FC | 	wrlong	result1, fp
24908     48 4E 85 F1 | 	sub	fp, #72
2490c     00 FA 0D F2 | 	cmp	result1, #0 wz
24910     18 00 90 AD |  if_e	jmp	#LR__3622
24914     48 4E 05 F1 | 	add	fp, #72
24918     A7 12 02 FB | 	rdlong	arg01, fp
2491c     3C 4E 85 F1 | 	sub	fp, #60
24920     A7 14 02 FB | 	rdlong	arg02, fp
24924     0C 4E 85 F1 | 	sub	fp, #12
24928     A0 A1 BF FD | 	call	#__system____builtin_strcpy
2492c                 | LR__3622
2492c     48 4E 05 F1 | 	add	fp, #72
24930     A7 FA 01 FB | 	rdlong	result1, fp
24934     48 4E 85 F1 | 	sub	fp, #72
24938                 | LR__3623
24938     A7 F0 03 F6 | 	mov	ptra, fp
2493c     B2 00 A0 FD | 	call	#popregs_
24940                 | __system___basic_dir_ret
24940     2D 00 64 FD | 	ret
24944                 | 
24944                 | __system__pack_0550
24944     09 01 02 F6 | 	mov	_var01, arg01
24948     7F 16 06 F1 | 	add	arg03, #127
2494c     04 18 CE F7 | 	test	arg04, #4 wz
24950     10 00 90 AD |  if_e	jmp	#LR__3630
24954     00 00 0E F2 | 	cmp	_var01, #0 wz
24958     16 00 C6 A9 |  if_e	decod	_var01, #22
2495c     F7 00 26 F4 | 	bith	_var01, #247
24960     B4 00 90 FD | 	jmp	#LR__3639
24964                 | LR__3630
24964     02 18 CE F7 | 	test	arg04, #2 wz
24968     00 C0 3F 5F 
2496c     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
24970     00 14 06 56 |  if_ne	mov	arg02, #0
24974     A0 00 90 5D |  if_ne	jmp	#LR__3638
24978     08 18 CE F7 | 	test	arg04, #8 wz
2497c     00 00 06 56 |  if_ne	mov	_var01, #0
24980     94 00 90 5D |  if_ne	jmp	#LR__3637
24984     FF 16 56 F2 | 	cmps	arg03, #255 wc
24988     00 C0 3F 3F 
2498c     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
24990     00 14 06 36 |  if_ae	mov	arg02, #0
24994     80 00 90 3D |  if_ae	jmp	#LR__3636
24998     01 16 56 F2 | 	cmps	arg03, #1 wc
2499c     6C 00 90 3D |  if_ae	jmp	#LR__3634
249a0     01 14 46 F0 | 	shr	arg02, #1
249a4     00 03 02 F6 | 	mov	_var02, _var01
249a8     01 02 06 F5 | 	and	_var02, #1
249ac     1F 02 66 F0 | 	shl	_var02, #31
249b0     01 15 42 F5 | 	or	arg02, _var02
249b4     01 00 46 F0 | 	shr	_var01, #1
249b8     97 1E 48 FB | 	callpa	#(@LR__3632-@LR__3631)>>2,fcache_load_ptr_
249bc                 | LR__3631
249bc     00 16 56 F2 | 	cmps	arg03, #0 wc
249c0     34 00 90 3D |  if_ae	jmp	#LR__3633
249c4     00 00 0E F2 | 	cmp	_var01, #0 wz
249c8     2C 00 90 AD |  if_e	jmp	#LR__3633
249cc     0A 13 02 F6 | 	mov	arg01, arg02
249d0     01 12 06 F5 | 	and	arg01, #1
249d4     01 16 06 F1 | 	add	arg03, #1
249d8     01 14 46 F0 | 	shr	arg02, #1
249dc     00 03 02 F6 | 	mov	_var02, _var01
249e0     01 02 06 F5 | 	and	_var02, #1
249e4     1F 02 66 F0 | 	shl	_var02, #31
249e8     01 15 42 F5 | 	or	arg02, _var02
249ec     09 15 42 F5 | 	or	arg02, arg01
249f0     01 00 46 F0 | 	shr	_var01, #1
249f4     C4 FF 9F FD | 	jmp	#LR__3631
249f8                 | LR__3632
249f8                 | LR__3633
249f8     00 16 56 F2 | 	cmps	arg03, #0 wc
249fc     18 00 90 3D |  if_ae	jmp	#LR__3635
24a00     00 14 0E F2 | 	cmp	arg02, #0 wz
24a04     6F 14 62 FD | 	wrnz	arg02
24a08     0C 00 90 FD | 	jmp	#LR__3635
24a0c                 | LR__3634
24a0c     17 01 06 F4 | 	bitl	_var01, #279
24a10     17 16 66 F0 | 	shl	arg03, #23
24a14     0B 01 42 F5 | 	or	_var01, arg03
24a18                 | LR__3635
24a18                 | LR__3636
24a18                 | LR__3637
24a18                 | LR__3638
24a18                 | LR__3639
24a18     01 00 CE F7 | 	test	_var01, #1 wz
24a1c     01 14 46 55 |  if_ne	or	arg02, #1
24a20     0A 17 02 F6 | 	mov	arg03, arg02
24a24     00 02 06 F6 | 	mov	_var02, #0
24a28     FF FF 3F FF 
24a2c     FF 15 06 F1 | 	add	arg02, ##2147483647
24a30     0B 15 12 F2 | 	cmp	arg02, arg03 wc
24a34     01 02 06 C6 |  if_b	mov	_var02, #1
24a38     01 01 02 F1 | 	add	_var01, _var02
24a3c     01 18 CE F7 | 	test	arg04, #1 wz
24a40     1F 00 26 54 |  if_ne	bith	_var01, #31
24a44     00 FB 01 F6 | 	mov	result1, _var01
24a48                 | __system__pack_0550_ret
24a48     2D 00 64 FD | 	ret
24a4c                 | 
24a4c                 | __system___rxtxioctl_0640
24a4c     00 15 0E F2 | 	cmp	arg02, #256 wz
24a50     0C 00 90 AD |  if_e	jmp	#LR__3640
24a54     01 15 0E F2 | 	cmp	arg02, #257 wz
24a58     1C 00 90 AD |  if_e	jmp	#LR__3641
24a5c     30 00 90 FD | 	jmp	#LR__3642
24a60                 | LR__3640
24a60     08 E6 05 F1 | 	add	ptr___system__dat__, #8
24a64     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
24a68     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
24a6c     0B FB 61 FC | 	wrlong	result1, arg03
24a70     00 FA 05 F6 | 	mov	result1, #0
24a74     28 00 90 FD | 	jmp	#LR__3643
24a78                 | LR__3641
24a78     0B 13 02 FB | 	rdlong	arg01, arg03
24a7c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
24a80     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
24a84     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
24a88     00 FA 05 F6 | 	mov	result1, #0
24a8c     10 00 90 FD | 	jmp	#LR__3643
24a90                 | LR__3642
24a90     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24a94     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
24a98     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24a9c     01 FA 65 F6 | 	neg	result1, #1
24aa0                 | LR__3643
24aa0                 | __system___rxtxioctl_0640_ret
24aa0     2D 00 64 FD | 	ret
24aa4                 | 
24aa4                 | __system____dummy_flush_0641
24aa4     00 FA 05 F6 | 	mov	result1, #0
24aa8                 | __system____dummy_flush_0641_ret
24aa8     2D 00 64 FD | 	ret
24aac                 | 
24aac                 | __system___vfsread
24aac     03 4A 05 F6 | 	mov	COUNT_, #3
24ab0     A8 00 A0 FD | 	call	#pushregs_
24ab4     28 F0 07 F1 | 	add	ptra, #40
24ab8     04 4E 05 F1 | 	add	fp, #4
24abc     A7 12 62 FC | 	wrlong	arg01, fp
24ac0     04 4E 05 F1 | 	add	fp, #4
24ac4     A7 14 62 FC | 	wrlong	arg02, fp
24ac8     04 4E 05 F1 | 	add	fp, #4
24acc     A7 16 62 FC | 	wrlong	arg03, fp
24ad0     04 4E 85 F1 | 	sub	fp, #4
24ad4     A7 FA 01 FB | 	rdlong	result1, fp
24ad8     14 4E 05 F1 | 	add	fp, #20
24adc     A7 FA 61 FC | 	wrlong	result1, fp
24ae0     04 4E 05 F1 | 	add	fp, #4
24ae4     A7 00 68 FC | 	wrlong	#0, fp
24ae8     1C 4E 85 F1 | 	sub	fp, #28
24aec     A7 12 02 FB | 	rdlong	arg01, fp
24af0     04 4E 85 F1 | 	sub	fp, #4
24af4     08 12 06 F1 | 	add	arg01, #8
24af8     09 FB 01 FB | 	rdlong	result1, arg01
24afc     01 FA CD F7 | 	test	result1, #1 wz
24b00     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
24b04     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
24b08     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
24b0c     01 FA 65 A6 |  if_e	neg	result1, #1
24b10     74 02 90 AD |  if_e	jmp	#LR__3656
24b14     04 4E 05 F1 | 	add	fp, #4
24b18     A7 12 02 FB | 	rdlong	arg01, fp
24b1c     04 4E 85 F1 | 	sub	fp, #4
24b20     14 12 06 F1 | 	add	arg01, #20
24b24     09 FB 09 FB | 	rdlong	result1, arg01 wz
24b28     B8 00 90 AD |  if_e	jmp	#LR__3651
24b2c     04 4E 05 F1 | 	add	fp, #4
24b30     A7 12 02 FB | 	rdlong	arg01, fp
24b34     09 17 02 F6 | 	mov	arg03, arg01
24b38     14 16 06 F1 | 	add	arg03, #20
24b3c     0B 1F 02 FB | 	rdlong	local01, arg03
24b40     0F 21 02 F6 | 	mov	local02, local01
24b44     13 1E 46 F7 | 	zerox	local01, #19
24b48     14 20 46 F0 | 	shr	local02, #20
24b4c     02 20 66 F0 | 	shl	local02, #2
24b50     ED 20 02 F1 | 	add	local02, __methods__
24b54     10 21 02 FB | 	rdlong	local02, local02
24b58     04 4E 05 F1 | 	add	fp, #4
24b5c     A7 14 02 FB | 	rdlong	arg02, fp
24b60     04 4E 05 F1 | 	add	fp, #4
24b64     A7 16 02 FB | 	rdlong	arg03, fp
24b68     0C 4E 85 F1 | 	sub	fp, #12
24b6c     F2 22 02 F6 | 	mov	local03, objptr
24b70     0F E5 01 F6 | 	mov	objptr, local01
24b74     2D 20 62 FD | 	call	local02
24b78     11 E5 01 F6 | 	mov	objptr, local03
24b7c     10 4E 05 F1 | 	add	fp, #16
24b80     A7 FA 61 FC | 	wrlong	result1, fp
24b84     10 4E 85 F1 | 	sub	fp, #16
24b88     00 FA 55 F2 | 	cmps	result1, #0 wc
24b8c     44 00 90 3D |  if_ae	jmp	#LR__3650
24b90     04 4E 05 F1 | 	add	fp, #4
24b94     A7 22 02 FB | 	rdlong	local03, fp
24b98     11 1F 02 F6 | 	mov	local01, local03
24b9c     08 22 06 F1 | 	add	local03, #8
24ba0     11 21 02 FB | 	rdlong	local02, local03
24ba4     20 20 46 F5 | 	or	local02, #32
24ba8     08 1E 06 F1 | 	add	local01, #8
24bac     0F 21 62 FC | 	wrlong	local02, local01
24bb0     0C 4E 05 F1 | 	add	fp, #12
24bb4     A7 12 0A FB | 	rdlong	arg01, fp wz
24bb8     10 4E 85 F1 | 	sub	fp, #16
24bbc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24bc0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
24bc4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24bc8     01 FA 65 56 |  if_ne	neg	result1, #1
24bcc     00 FA 05 A6 |  if_e	mov	result1, #0
24bd0     B4 01 90 FD | 	jmp	#LR__3656
24bd4                 | LR__3650
24bd4     10 4E 05 F1 | 	add	fp, #16
24bd8     A7 FA 01 FB | 	rdlong	result1, fp
24bdc     10 4E 85 F1 | 	sub	fp, #16
24be0     A4 01 90 FD | 	jmp	#LR__3656
24be4                 | LR__3651
24be4     04 4E 05 F1 | 	add	fp, #4
24be8     A7 12 02 FB | 	rdlong	arg01, fp
24bec     20 12 06 F1 | 	add	arg01, #32
24bf0     09 13 0A FB | 	rdlong	arg01, arg01 wz
24bf4     14 4E 05 F1 | 	add	fp, #20
24bf8     A7 12 62 FC | 	wrlong	arg01, fp
24bfc     18 4E 85 F1 | 	sub	fp, #24
24c00     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
24c04     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
24c08     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
24c0c     01 FA 65 A6 |  if_e	neg	result1, #1
24c10     74 01 90 AD |  if_e	jmp	#LR__3656
24c14     04 4E 05 F1 | 	add	fp, #4
24c18     A7 22 02 FB | 	rdlong	local03, fp
24c1c     04 4E 85 F1 | 	sub	fp, #4
24c20     28 22 06 F1 | 	add	local03, #40
24c24     11 21 0A FB | 	rdlong	local02, local03 wz
24c28     7C 00 90 AD |  if_e	jmp	#LR__3653
24c2c     04 4E 05 F1 | 	add	fp, #4
24c30     A7 12 02 FB | 	rdlong	arg01, fp
24c34     09 23 02 F6 | 	mov	local03, arg01
24c38     28 22 06 F1 | 	add	local03, #40
24c3c     11 1F 02 FB | 	rdlong	local01, local03
24c40     0F 21 02 F6 | 	mov	local02, local01
24c44     13 1E 46 F7 | 	zerox	local01, #19
24c48     14 20 46 F0 | 	shr	local02, #20
24c4c     02 20 66 F0 | 	shl	local02, #2
24c50     ED 20 02 F1 | 	add	local02, __methods__
24c54     10 21 02 FB | 	rdlong	local02, local02
24c58     20 4E 05 F1 | 	add	fp, #32
24c5c     A7 16 02 F6 | 	mov	arg03, fp
24c60     24 4E 85 F1 | 	sub	fp, #36
24c64     00 15 06 F6 | 	mov	arg02, #256
24c68     F2 22 02 F6 | 	mov	local03, objptr
24c6c     0F E5 01 F6 | 	mov	objptr, local01
24c70     2D 20 62 FD | 	call	local02
24c74     11 E5 01 F6 | 	mov	objptr, local03
24c78     10 4E 05 F1 | 	add	fp, #16
24c7c     A7 FA 61 FC | 	wrlong	result1, fp
24c80     00 FA 4D F2 | 	cmps	result1, #0 wz
24c84     10 4E 85 F1 | 	sub	fp, #16
24c88     1C 00 90 5D |  if_ne	jmp	#LR__3652
24c8c     24 4E 05 F1 | 	add	fp, #36
24c90     A7 20 02 FB | 	rdlong	local02, fp
24c94     24 4E 85 F1 | 	sub	fp, #36
24c98     02 20 CE F7 | 	test	local02, #2 wz
24c9c     20 4E 05 51 |  if_ne	add	fp, #32
24ca0     A7 02 68 5C |  if_ne	wrlong	#1, fp
24ca4     20 4E 85 51 |  if_ne	sub	fp, #32
24ca8                 | LR__3652
24ca8                 | LR__3653
24ca8     10 4E 05 F1 | 	add	fp, #16
24cac     A7 00 68 FC | 	wrlong	#0, fp
24cb0     10 4E 85 F1 | 	sub	fp, #16
24cb4                 | LR__3654
24cb4     0C 4E 05 F1 | 	add	fp, #12
24cb8     A7 22 02 FB | 	rdlong	local03, fp
24cbc     0C 4E 85 F1 | 	sub	fp, #12
24cc0     01 22 16 F2 | 	cmp	local03, #1 wc
24cc4     B4 00 90 CD |  if_b	jmp	#LR__3655
24cc8     18 4E 05 F1 | 	add	fp, #24
24ccc     A7 20 02 FB | 	rdlong	local02, fp
24cd0     10 23 02 F6 | 	mov	local03, local02
24cd4     13 22 46 F7 | 	zerox	local03, #19
24cd8     14 20 46 F0 | 	shr	local02, #20
24cdc     02 20 66 F0 | 	shl	local02, #2
24ce0     ED 20 02 F1 | 	add	local02, __methods__
24ce4     10 21 02 FB | 	rdlong	local02, local02
24ce8     14 4E 85 F1 | 	sub	fp, #20
24cec     A7 12 02 FB | 	rdlong	arg01, fp
24cf0     04 4E 85 F1 | 	sub	fp, #4
24cf4     F2 1E 02 F6 | 	mov	local01, objptr
24cf8     11 E5 01 F6 | 	mov	objptr, local03
24cfc     2D 20 62 FD | 	call	local02
24d00     0F E5 01 F6 | 	mov	objptr, local01
24d04     14 4E 05 F1 | 	add	fp, #20
24d08     A7 FA 61 FC | 	wrlong	result1, fp
24d0c     14 4E 85 F1 | 	sub	fp, #20
24d10     00 FA 55 F2 | 	cmps	result1, #0 wc
24d14     64 00 90 CD |  if_b	jmp	#LR__3655
24d18     1C 4E 05 F1 | 	add	fp, #28
24d1c     A7 22 02 FB | 	rdlong	local03, fp
24d20     11 21 02 F6 | 	mov	local02, local03
24d24     01 20 06 F1 | 	add	local02, #1
24d28     A7 20 62 FC | 	wrlong	local02, fp
24d2c     08 4E 85 F1 | 	sub	fp, #8
24d30     A7 20 02 FB | 	rdlong	local02, fp
24d34     11 21 42 FC | 	wrbyte	local02, local03
24d38     04 4E 85 F1 | 	sub	fp, #4
24d3c     A7 22 02 FB | 	rdlong	local03, fp
24d40     01 22 06 F1 | 	add	local03, #1
24d44     A7 22 62 FC | 	wrlong	local03, fp
24d48     04 4E 85 F1 | 	sub	fp, #4
24d4c     A7 22 02 FB | 	rdlong	local03, fp
24d50     01 22 86 F1 | 	sub	local03, #1
24d54     A7 22 62 FC | 	wrlong	local03, fp
24d58     14 4E 05 F1 | 	add	fp, #20
24d5c     A7 22 0A FB | 	rdlong	local03, fp wz
24d60     20 4E 85 F1 | 	sub	fp, #32
24d64     4C FF 9F AD |  if_e	jmp	#LR__3654
24d68     14 4E 05 F1 | 	add	fp, #20
24d6c     A7 20 02 FB | 	rdlong	local02, fp
24d70     14 4E 85 F1 | 	sub	fp, #20
24d74     0A 20 0E F2 | 	cmp	local02, #10 wz
24d78     38 FF 9F 5D |  if_ne	jmp	#LR__3654
24d7c                 | LR__3655
24d7c     10 4E 05 F1 | 	add	fp, #16
24d80     A7 FA 01 FB | 	rdlong	result1, fp
24d84     10 4E 85 F1 | 	sub	fp, #16
24d88                 | LR__3656
24d88     A7 F0 03 F6 | 	mov	ptra, fp
24d8c     B2 00 A0 FD | 	call	#popregs_
24d90                 | __system___vfsread_ret
24d90     2D 00 64 FD | 	ret
24d94                 | 
24d94                 | __system____default_filbuf
24d94     04 4A 05 F6 | 	mov	COUNT_, #4
24d98     A8 00 A0 FD | 	call	#pushregs_
24d9c     09 1F 02 F6 | 	mov	local01, arg01
24da0     0F 21 02 FB | 	rdlong	local02, local01
24da4     0C 20 06 F1 | 	add	local02, #12
24da8     10 FB 09 FB | 	rdlong	result1, local02 wz
24dac     0C 20 86 F1 | 	sub	local02, #12
24db0     20 00 90 5D |  if_ne	jmp	#LR__3660
24db4     14 20 06 F1 | 	add	local02, #20
24db8     10 FB 01 F6 | 	mov	result1, local02
24dbc     04 20 86 F1 | 	sub	local02, #4
24dc0     10 FB 61 FC | 	wrlong	result1, local02
24dc4     04 20 86 F1 | 	sub	local02, #4
24dc8     02 00 80 FF 
24dcc     10 01 68 FC | 	wrlong	##1024, local02
24dd0     0C 20 86 F1 | 	sub	local02, #12
24dd4                 | LR__3660
24dd4     14 1E 06 F1 | 	add	local01, #20
24dd8     0F 23 02 FB | 	rdlong	local03, local01
24ddc     11 25 02 F6 | 	mov	local04, local03
24de0     14 1E 86 F1 | 	sub	local01, #20
24de4     13 24 46 F7 | 	zerox	local04, #19
24de8     14 22 46 F0 | 	shr	local03, #20
24dec     02 22 66 F0 | 	shl	local03, #2
24df0     ED 22 02 F1 | 	add	local03, __methods__
24df4     11 23 02 FB | 	rdlong	local03, local03
24df8     10 20 06 F1 | 	add	local02, #16
24dfc     10 15 02 FB | 	rdlong	arg02, local02
24e00     04 20 86 F1 | 	sub	local02, #4
24e04     10 17 02 FB | 	rdlong	arg03, local02
24e08     0C 20 86 F1 | 	sub	local02, #12
24e0c     0F 13 02 F6 | 	mov	arg01, local01
24e10     F2 1E 02 F6 | 	mov	local01, objptr
24e14     12 E5 01 F6 | 	mov	objptr, local04
24e18     2D 22 62 FD | 	call	local03
24e1c     0F E5 01 F6 | 	mov	objptr, local01
24e20     FD 24 02 F6 | 	mov	local04, result1
24e24     00 24 56 F2 | 	cmps	local04, #0 wc
24e28     01 FA 65 C6 |  if_b	neg	result1, #1
24e2c     28 00 90 CD |  if_b	jmp	#LR__3661
24e30     10 25 62 FC | 	wrlong	local04, local02
24e34     10 20 06 F1 | 	add	local02, #16
24e38     10 23 02 FB | 	rdlong	local03, local02
24e3c     0C 20 86 F1 | 	sub	local02, #12
24e40     10 23 62 FC | 	wrlong	local03, local02
24e44     04 20 06 F1 | 	add	local02, #4
24e48     10 23 02 FB | 	rdlong	local03, local02
24e4c     01 22 46 F5 | 	or	local03, #1
24e50     10 23 62 FC | 	wrlong	local03, local02
24e54     12 FB 01 F6 | 	mov	result1, local04
24e58                 | LR__3661
24e58     A7 F0 03 F6 | 	mov	ptra, fp
24e5c     B2 00 A0 FD | 	call	#popregs_
24e60                 | __system____default_filbuf_ret
24e60     2D 00 64 FD | 	ret
24e64                 | 
24e64                 | __system__getlower_1026
24e64     41 12 56 F2 | 	cmps	arg01, #65 wc
24e68     10 00 90 CD |  if_b	jmp	#LR__3670
24e6c     5B 12 56 F2 | 	cmps	arg01, #91 wc
24e70     09 FB 01 C6 |  if_b	mov	result1, arg01
24e74     20 FA 05 C1 |  if_b	add	result1, #32
24e78     04 00 90 CD |  if_b	jmp	#__system__getlower_1026_ret
24e7c                 | LR__3670
24e7c     09 FB 01 F6 | 	mov	result1, arg01
24e80                 | __system__getlower_1026_ret
24e80     2D 00 64 FD | 	ret
24e84                 | 
24e84                 | __system___pat_match
24e84     08 4A 05 F6 | 	mov	COUNT_, #8
24e88     A8 00 A0 FD | 	call	#pushregs_
24e8c     09 1F 02 F6 | 	mov	local01, arg01
24e90                 | LR__3680
24e90     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
24e94     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
24e98     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
24e9c     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
24ea0     2C 00 90 AD |  if_e	jmp	#LR__3681
24ea4     0A 13 C2 FA | 	rdbyte	arg01, arg02
24ea8     B8 FF BF FD | 	call	#__system__getlower_1026
24eac     FD 22 02 F6 | 	mov	local03, result1
24eb0     0F 13 C2 FA | 	rdbyte	arg01, local01
24eb4     AC FF BF FD | 	call	#__system__getlower_1026
24eb8     11 FB 09 F2 | 	cmp	result1, local03 wz
24ebc     00 FA 05 56 |  if_ne	mov	result1, #0
24ec0     FC 00 90 5D |  if_ne	jmp	#LR__3689
24ec4     01 1E 06 F1 | 	add	local01, #1
24ec8     01 14 06 F1 | 	add	arg02, #1
24ecc     C0 FF 9F FD | 	jmp	#LR__3680
24ed0                 | LR__3681
24ed0     0A 23 C2 FA | 	rdbyte	local03, arg02
24ed4     2A 22 0E F2 | 	cmp	local03, #42 wz
24ed8     D4 00 90 5D |  if_ne	jmp	#LR__3688
24edc     01 14 06 F1 | 	add	arg02, #1
24ee0     0A 21 C2 FA | 	rdbyte	local02, arg02
24ee4     01 14 86 F1 | 	sub	arg02, #1
24ee8     2E 20 0E F2 | 	cmp	local02, #46 wz
24eec     28 00 90 5D |  if_ne	jmp	#LR__3682
24ef0     02 14 06 F1 | 	add	arg02, #2
24ef4     0A 21 C2 FA | 	rdbyte	local02, arg02
24ef8     02 14 86 F1 | 	sub	arg02, #2
24efc     2A 20 0E F2 | 	cmp	local02, #42 wz
24f00     03 14 06 A1 |  if_e	add	arg02, #3
24f04     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
24f08     03 14 86 A1 |  if_e	sub	arg02, #3
24f0c     12 27 0A A6 |  if_e	mov	local05, local04 wz
24f10     01 FA 05 A6 |  if_e	mov	result1, #1
24f14     A8 00 90 AD |  if_e	jmp	#LR__3689
24f18                 | LR__3682
24f18     01 14 06 F1 | 	add	arg02, #1
24f1c     00 28 06 F6 | 	mov	local06, #0
24f20     97 1E 48 FB | 	callpa	#(@LR__3685-@LR__3683)>>2,fcache_load_ptr_
24f24                 | LR__3683
24f24     14 2B 02 F6 | 	mov	local07, local06
24f28     0A 2B 02 F1 | 	add	local07, arg02
24f2c     15 2B CA FA | 	rdbyte	local07, local07 wz
24f30     14 27 02 56 |  if_ne	mov	local05, local06
24f34     01 26 06 51 |  if_ne	add	local05, #1
24f38     13 29 02 56 |  if_ne	mov	local06, local05
24f3c     E4 FF 9F 5D |  if_ne	jmp	#LR__3683
24f40     00 2C 06 F6 | 	mov	local08, #0
24f44                 | LR__3684
24f44     16 2B 02 F6 | 	mov	local07, local08
24f48     0F 2B 02 F1 | 	add	local07, local01
24f4c     15 2B CA FA | 	rdbyte	local07, local07 wz
24f50     16 27 02 56 |  if_ne	mov	local05, local08
24f54     01 26 06 51 |  if_ne	add	local05, #1
24f58     13 2D 02 56 |  if_ne	mov	local08, local05
24f5c     E4 FF 9F 5D |  if_ne	jmp	#LR__3684
24f60                 | LR__3685
24f60     14 2D 52 F2 | 	cmps	local08, local06 wc
24f64     00 FA 05 C6 |  if_b	mov	result1, #0
24f68     54 00 90 CD |  if_b	jmp	#LR__3689
24f6c     16 21 02 F6 | 	mov	local02, local08
24f70     14 21 82 F1 | 	sub	local02, local06
24f74     10 1F 02 F1 | 	add	local01, local02
24f78                 | LR__3686
24f78     01 28 56 F2 | 	cmps	local06, #1 wc
24f7c     30 00 90 CD |  if_b	jmp	#LR__3687
24f80     0F 13 C2 FA | 	rdbyte	arg01, local01
24f84     DC FE BF FD | 	call	#__system__getlower_1026
24f88     FD 2C 02 F6 | 	mov	local08, result1
24f8c     0A 13 C2 FA | 	rdbyte	arg01, arg02
24f90     D0 FE BF FD | 	call	#__system__getlower_1026
24f94     FD 2C 0A F2 | 	cmp	local08, result1 wz
24f98     00 FA 05 56 |  if_ne	mov	result1, #0
24f9c     20 00 90 5D |  if_ne	jmp	#LR__3689
24fa0     01 1E 06 F1 | 	add	local01, #1
24fa4     01 14 06 F1 | 	add	arg02, #1
24fa8     01 28 86 F1 | 	sub	local06, #1
24fac     C8 FF 9F FD | 	jmp	#LR__3686
24fb0                 | LR__3687
24fb0                 | LR__3688
24fb0     0A 2D CA FA | 	rdbyte	local08, arg02 wz
24fb4     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
24fb8     01 FA 05 A6 |  if_e	mov	result1, #1
24fbc     00 FA 05 56 |  if_ne	mov	result1, #0
24fc0                 | LR__3689
24fc0     A7 F0 03 F6 | 	mov	ptra, fp
24fc4     B2 00 A0 FD | 	call	#popregs_
24fc8                 | __system___pat_match_ret
24fc8     2D 00 64 FD | 	ret
24fcc                 | 
24fcc                 | _fatfs_cc_ff_uni2oem
24fcc     00 00 06 F6 | 	mov	_var01, #0
24fd0     80 12 16 F2 | 	cmp	arg01, #128 wc
24fd4     09 01 02 C6 |  if_b	mov	_var01, arg01
24fd8     58 00 90 CD |  if_b	jmp	#LR__3694
24fdc     80 00 00 FF 
24fe0     00 12 16 F2 | 	cmp	arg01, ##65536 wc
24fe4     4C 00 90 3D |  if_ae	jmp	#LR__3693
24fe8     0A FB 31 F9 | 	getword	result1, arg02, #0
24fec     01 00 00 FF 
24ff0     52 FB 0D F2 | 	cmp	result1, ##850 wz
24ff4     3C 00 90 5D |  if_ne	jmp	#LR__3693
24ff8                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
24ff8     00 00 06 F6 | 	mov	_var01, #0
24ffc     97 14 48 FB | 	callpa	#(@LR__3691-@LR__3690)>>2,fcache_load_ptr_
25000                 | LR__3690
25000     00 FB 31 F9 | 	getword	result1, _var01, #0
25004     80 FA 15 F2 | 	cmp	result1, #128 wc
25008     1C 00 90 3D |  if_ae	jmp	#LR__3692
2500c     00 FB 31 F9 | 	getword	result1, _var01, #0
25010     01 FA 65 F0 | 	shl	result1, #1
25014     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
25018     FD FA E1 FA | 	rdword	result1, result1
2501c     FD 12 0A F2 | 	cmp	arg01, result1 wz
25020     01 00 06 51 |  if_ne	add	_var01, #1
25024     D8 FF 9F 5D |  if_ne	jmp	#LR__3690
25028                 | LR__3691
25028                 | LR__3692
25028     00 01 32 F9 | 	getword	_var01, _var01, #0
2502c     80 00 06 F1 | 	add	_var01, #128
25030     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
25034                 | LR__3693
25034                 | LR__3694
25034                 | ' 			c = (c + 0x80) & 0xFF;
25034                 | ' 		}
25034                 | ' 	}
25034                 | ' 
25034                 | ' 	return c;
25034     00 FB 01 F6 | 	mov	result1, _var01
25038                 | _fatfs_cc_ff_uni2oem_ret
25038     2D 00 64 FD | 	ret
2503c                 | 
2503c                 | _fatfs_cc_ff_oem2uni
2503c     00 00 06 F6 | 	mov	_var01, #0
25040     09 FB 31 F9 | 	getword	result1, arg01, #0
25044     80 FA 15 F2 | 	cmp	result1, #128 wc
25048     09 01 02 C6 |  if_b	mov	_var01, arg01
2504c     2C 00 90 CD |  if_b	jmp	#LR__3701
25050     0A 15 32 F9 | 	getword	arg02, arg02, #0
25054     01 00 00 FF 
25058     52 15 0E F2 | 	cmp	arg02, ##850 wz
2505c     1C 00 90 5D |  if_ne	jmp	#LR__3700
25060     09 FB 31 F9 | 	getword	result1, arg01, #0
25064     00 FB 15 F2 | 	cmp	result1, #256 wc
25068     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
2506c     80 12 86 C1 |  if_b	sub	arg01, #128
25070     01 12 66 C0 |  if_b	shl	arg01, #1
25074     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
25078     09 01 E2 CA |  if_b	rdword	_var01, arg01
2507c                 | LR__3700
2507c                 | LR__3701
2507c                 | ' 		}
2507c                 | ' 	}
2507c                 | ' 
2507c                 | ' 	return c;
2507c     00 FB 01 F6 | 	mov	result1, _var01
25080                 | _fatfs_cc_ff_oem2uni_ret
25080     2D 00 64 FD | 	ret
25084                 | 
25084                 | _fatfs_cc_ff_wtoupper
25084     09 01 02 F6 | 	mov	_var01, arg01
25088     80 00 00 FF 
2508c     00 00 16 F2 | 	cmp	_var01, ##65536 wc
25090     60 01 90 3D |  if_ae	jmp	#LR__3723
25094     00 03 02 F6 | 	mov	_var02, _var01
25098     01 01 32 F9 | 	getword	_var01, _var02, #0
2509c     08 00 00 FF 
250a0     00 00 16 F2 | 	cmp	_var01, ##4096 wc
250a4     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
250a8     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
250ac     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
250b0     01 00 00 3F 
250b4     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
250b8     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
250bc     01 00 00 3F 
250c0     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
250c4     02 07 02 F6 | 	mov	_var04, _var03
250c8                 | ' 		uc = (WORD)uni;
250c8                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
250c8                 | ' 		for (;;) {
250c8                 | LR__3710
250c8     03 09 E2 FA | 	rdword	_var05, _var04
250cc     04 05 02 F6 | 	mov	_var03, _var05
250d0     0F 04 4E F7 | 	zerox	_var03, #15 wz
250d4     02 06 06 F1 | 	add	_var04, #2
250d8     14 01 90 AD |  if_e	jmp	#LR__3722
250dc     01 05 32 F9 | 	getword	_var03, _var02, #0
250e0     04 01 32 F9 | 	getword	_var01, _var05, #0
250e4     00 05 12 F2 | 	cmp	_var03, _var01 wc
250e8     04 01 90 CD |  if_b	jmp	#LR__3722
250ec     03 0B E2 FA | 	rdword	_var06, _var04
250f0     05 0D 32 F9 | 	getword	_var07, _var06, #0
250f4     08 0C 46 F0 | 	shr	_var07, #8
250f8     05 0B 32 F9 | 	getword	_var06, _var06, #0
250fc     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
25100     01 05 32 F9 | 	getword	_var03, _var02, #0
25104     04 0F 32 F9 | 	getword	_var08, _var05, #0
25108     05 01 32 F9 | 	getword	_var01, _var06, #0
2510c     00 0F 02 F1 | 	add	_var08, _var01
25110     07 05 52 F2 | 	cmps	_var03, _var08 wc
25114     02 06 06 F1 | 	add	_var04, #2
25118     C4 00 90 3D |  if_ae	jmp	#LR__3721
2511c                 | ' 				switch (cmd) {
2511c     06 11 32 F9 | 	getword	_var09, _var07, #0
25120     09 10 26 F3 | 	fle	_var09, #9
25124     30 10 62 FD | 	jmprel	_var09
25128                 | LR__3711
25128     24 00 90 FD | 	jmp	#LR__3712
2512c     3C 00 90 FD | 	jmp	#LR__3713
25130     54 00 90 FD | 	jmp	#LR__3714
25134     5C 00 90 FD | 	jmp	#LR__3715
25138     64 00 90 FD | 	jmp	#LR__3716
2513c     6C 00 90 FD | 	jmp	#LR__3717
25140     74 00 90 FD | 	jmp	#LR__3718
25144     7C 00 90 FD | 	jmp	#LR__3719
25148     84 00 90 FD | 	jmp	#LR__3720
2514c     A0 00 90 FD | 	jmp	#LR__3722
25150                 | LR__3712
25150     01 03 32 F9 | 	getword	_var02, _var02, #0
25154     04 09 32 F9 | 	getword	_var05, _var05, #0
25158     04 03 82 F1 | 	sub	_var02, _var05
2515c     01 02 66 F0 | 	shl	_var02, #1
25160     03 03 02 F1 | 	add	_var02, _var04
25164     01 03 E2 FA | 	rdword	_var02, _var02
25168     84 00 90 FD | 	jmp	#LR__3722
2516c                 | LR__3713
2516c     01 05 32 F9 | 	getword	_var03, _var02, #0
25170     01 03 32 F9 | 	getword	_var02, _var02, #0
25174     04 09 32 F9 | 	getword	_var05, _var05, #0
25178     04 03 82 F1 | 	sub	_var02, _var05
2517c     01 02 06 F5 | 	and	_var02, #1
25180     02 03 C2 F2 | 	subr	_var02, _var03
25184     68 00 90 FD | 	jmp	#LR__3722
25188                 | LR__3714
25188     01 03 32 F9 | 	getword	_var02, _var02, #0
2518c     10 02 86 F1 | 	sub	_var02, #16
25190     5C 00 90 FD | 	jmp	#LR__3722
25194                 | LR__3715
25194     01 03 32 F9 | 	getword	_var02, _var02, #0
25198     20 02 86 F1 | 	sub	_var02, #32
2519c     50 00 90 FD | 	jmp	#LR__3722
251a0                 | LR__3716
251a0     01 03 32 F9 | 	getword	_var02, _var02, #0
251a4     30 02 86 F1 | 	sub	_var02, #48
251a8     44 00 90 FD | 	jmp	#LR__3722
251ac                 | LR__3717
251ac     01 03 32 F9 | 	getword	_var02, _var02, #0
251b0     1A 02 86 F1 | 	sub	_var02, #26
251b4     38 00 90 FD | 	jmp	#LR__3722
251b8                 | LR__3718
251b8     01 03 32 F9 | 	getword	_var02, _var02, #0
251bc     08 02 06 F1 | 	add	_var02, #8
251c0     2C 00 90 FD | 	jmp	#LR__3722
251c4                 | LR__3719
251c4     01 03 32 F9 | 	getword	_var02, _var02, #0
251c8     50 02 86 F1 | 	sub	_var02, #80
251cc     20 00 90 FD | 	jmp	#LR__3722
251d0                 | LR__3720
251d0     01 03 32 F9 | 	getword	_var02, _var02, #0
251d4     0E 00 00 FF 
251d8     60 02 86 F1 | 	sub	_var02, ##7264
251dc                 | ' 				}
251dc                 | ' 				break;
251dc     10 00 90 FD | 	jmp	#LR__3722
251e0                 | LR__3721
251e0     0F 0C 4E F7 | 	zerox	_var07, #15 wz
251e4     02 0A 06 AA |  if_e	mul	_var06, #2
251e8     05 07 02 A1 |  if_e	add	_var04, _var06
251ec     D8 FE 9F FD | 	jmp	#LR__3710
251f0                 | LR__3722
251f0     01 01 32 F9 | 	getword	_var01, _var02, #0
251f4                 | LR__3723
251f4                 | ' 		}
251f4                 | ' 		uni = uc;
251f4                 | ' 	}
251f4                 | ' 
251f4                 | ' 	return uni;
251f4     00 FB 01 F6 | 	mov	result1, _var01
251f8                 | _fatfs_cc_ff_wtoupper_ret
251f8     2D 00 64 FD | 	ret
251fc                 | 
251fc                 | _fatfs_cc_strncpy
251fc     09 01 02 F6 | 	mov	_var01, arg01
25200     97 12 48 FB | 	callpa	#(@LR__3731-@LR__3730)>>2,fcache_load_ptr_
25204                 | ' 
25204                 | ' 	dscan = dst;
25204                 | ' 	sscan = src;
25204                 | ' 	count = n;
25204                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
25204                 | LR__3730
25204     01 16 86 F1 | 	sub	arg03, #1
25208     00 16 56 F2 | 	cmps	arg03, #0 wc
2520c     18 00 90 CD |  if_b	jmp	#LR__3732
25210     0A FB C1 FA | 	rdbyte	result1, arg02
25214     00 FB 41 FC | 	wrbyte	result1, _var01
25218     01 14 06 F1 | 	add	arg02, #1
2521c     00 FB C9 FA | 	rdbyte	result1, _var01 wz
25220                 | ' 		continue;
25220     01 00 06 F1 | 	add	_var01, #1
25224     DC FF 9F 5D |  if_ne	jmp	#LR__3730
25228                 | LR__3731
25228                 | LR__3732
25228     97 0C 48 FB | 	callpa	#(@LR__3734-@LR__3733)>>2,fcache_load_ptr_
2522c                 | ' 	while (--count >= 0)
2522c                 | LR__3733
2522c     01 16 86 F1 | 	sub	arg03, #1
25230     00 16 56 F2 | 	cmps	arg03, #0 wc
25234     00 03 02 36 |  if_ae	mov	_var02, _var01
25238     01 00 06 31 |  if_ae	add	_var01, #1
2523c     01 01 48 3C |  if_ae	wrbyte	#0, _var02
25240     E8 FF 9F 3D |  if_ae	jmp	#LR__3733
25244                 | LR__3734
25244                 | ' 		*dscan++ = '\0';
25244                 | ' 	return(dst);
25244     09 FB 01 F6 | 	mov	result1, arg01
25248                 | _fatfs_cc_strncpy_ret
25248     2D 00 64 FD | 	ret
2524c                 | 
2524c                 | _fatfs_cc_memcmp
2524c                 | ' 	for (n = size; n > 0; n--)
2524c     00 16 0E F2 | 	cmp	arg03, #0 wz
25250     28 00 90 AD |  if_e	jmp	#LR__3741
25254                 | LR__3740
25254     09 01 C2 FA | 	rdbyte	_var01, arg01
25258     0A 03 C2 FA | 	rdbyte	_var02, arg02
2525c     01 01 0A F2 | 	cmp	_var01, _var02 wz
25260     01 12 06 A1 |  if_e	add	arg01, #1
25264     01 14 06 A1 |  if_e	add	arg02, #1
25268                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
25268     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
2526c     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
25270     01 FB 81 51 |  if_ne	sub	result1, _var02
25274     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
25278     F6 17 6E FB | 	djnz	arg03, #LR__3740
2527c                 | LR__3741
2527c                 | ' 
2527c                 | ' 	return(0);
2527c     00 FA 05 F6 | 	mov	result1, #0
25280                 | _fatfs_cc_memcmp_ret
25280     2D 00 64 FD | 	ret
25284                 | 
25284                 | _fatfs_cc_strncmp
25284     09 01 0A F6 | 	mov	_var01, arg01 wz
25288     14 00 90 5D |  if_ne	jmp	#LR__3750
2528c                 | ' 		return scan2 ? -1 : 0;
2528c     00 14 0E F2 | 	cmp	arg02, #0 wz
25290     01 02 66 56 |  if_ne	neg	_var02, #1
25294     00 02 06 A6 |  if_e	mov	_var02, #0
25298     01 FB 01 F6 | 	mov	result1, _var02
2529c     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
252a0                 | LR__3750
252a0     00 14 0E F2 | 	cmp	arg02, #0 wz
252a4     01 FA 05 A6 |  if_e	mov	result1, #1
252a8     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
252ac     0B 05 02 F6 | 	mov	_var03, arg03
252b0     97 16 48 FB | 	callpa	#(@LR__3752-@LR__3751)>>2,fcache_load_ptr_
252b4                 | ' 	count = n;
252b4                 | ' 	do {
252b4                 | LR__3751
252b4     00 07 C2 FA | 	rdbyte	_var04, _var01
252b8     0A 09 02 F6 | 	mov	_var05, arg02
252bc     04 0B C2 FA | 	rdbyte	_var06, _var05
252c0     01 04 86 F1 | 	sub	_var03, #1
252c4     00 04 56 F2 | 	cmps	_var03, #0 wc
252c8     01 00 06 F1 | 	add	_var01, #1
252cc     01 14 06 F1 | 	add	arg02, #1
252d0     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
252d4     08 00 90 2D |  if_nc_and_z	jmp	#LR__3753
252d8     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
252dc     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3751
252e0                 | LR__3752
252e0                 | LR__3753
252e0     00 04 56 F2 | 	cmps	_var03, #0 wc
252e4                 | ' 		return(0);
252e4     00 FA 05 C6 |  if_b	mov	result1, #0
252e8     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
252ec     05 07 0A F2 | 	cmp	_var04, _var06 wz
252f0                 | ' 		return(0);
252f0     00 FA 05 A6 |  if_e	mov	result1, #0
252f4     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
252f8     00 06 0E F2 | 	cmp	_var04, #0 wz
252fc                 | ' 		return(-1);
252fc     01 FA 65 A6 |  if_e	neg	result1, #1
25300     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
25304     00 0A 0E F2 | 	cmp	_var06, #0 wz
25308                 | ' 		return(1);
25308     01 FA 05 A6 |  if_e	mov	result1, #1
2530c                 | ' 		return(c1 - c2);
2530c     03 FB 01 56 |  if_ne	mov	result1, _var04
25310     05 FB 81 51 |  if_ne	sub	result1, _var06
25314                 | _fatfs_cc_strncmp_ret
25314     2D 00 64 FD | 	ret
25318                 | 
25318                 | _fatfs_cc_strchr
25318                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/libc/string/strchr.c"
25318                 | ' 	while ((c = *s++) != (char) charwanted)
25318                 | LR__3760
25318     09 01 02 F6 | 	mov	_var01, arg01
2531c     00 03 C2 FA | 	rdbyte	_var02, _var01
25320     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
25324     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
25328     03 05 0A F2 | 	cmp	_var03, _var04 wz
2532c     01 12 06 F1 | 	add	arg01, #1
25330     14 00 90 AD |  if_e	jmp	#LR__3761
25334     01 05 02 F6 | 	mov	_var03, _var02
25338     07 04 4E F7 | 	zerox	_var03, #7 wz
2533c     00 FA 05 A6 |  if_e	mov	result1, #0
25340     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
25344     D0 FF 9F FD | 	jmp	#LR__3760
25348                 | LR__3761
25348                 | ' 	return((char *)--s);
25348     01 12 86 F1 | 	sub	arg01, #1
2534c     09 FB 01 F6 | 	mov	result1, arg01
25350                 | _fatfs_cc_strchr_ret
25350     2D 00 64 FD | 	ret
25354                 | 
25354                 | _fatfs_cc_disk_initialize
25354     04 4A 05 F6 | 	mov	COUNT_, #4
25358     A8 00 A0 FD | 	call	#pushregs_
2535c     40 F0 07 F1 | 	add	ptra, #64
25360     04 4E 05 F1 | 	add	fp, #4
25364     A7 12 42 FC | 	wrbyte	arg01, fp
25368     01 00 00 FF 
2536c     14 E4 05 F1 | 	add	objptr, ##532
25370     F2 18 02 FB | 	rdlong	arg04, objptr
25374     2C 4E 05 F1 | 	add	fp, #44
25378     A7 18 62 FC | 	wrlong	arg04, fp
2537c     04 E4 85 F1 | 	sub	objptr, #4
25380     F2 18 02 FB | 	rdlong	arg04, objptr
25384     04 4E 05 F1 | 	add	fp, #4
25388     A7 18 62 FC | 	wrlong	arg04, fp
2538c     08 E4 05 F1 | 	add	objptr, #8
25390     F2 18 02 FB | 	rdlong	arg04, objptr
25394     04 4E 05 F1 | 	add	fp, #4
25398     A7 18 62 FC | 	wrlong	arg04, fp
2539c     04 E4 05 F1 | 	add	objptr, #4
253a0     F2 18 02 FB | 	rdlong	arg04, objptr
253a4     04 4E 05 F1 | 	add	fp, #4
253a8     A7 18 62 FC | 	wrlong	arg04, fp
253ac     04 E4 05 F1 | 	add	objptr, #4
253b0     F2 02 48 FC | 	wrbyte	#1, objptr
253b4     01 00 00 FF 
253b8     20 E4 85 F1 | 	sub	objptr, ##544
253bc     38 4E 85 F1 | 	sub	fp, #56
253c0     A7 18 CA FA | 	rdbyte	arg04, fp wz
253c4     04 4E 85 F1 | 	sub	fp, #4
253c8                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
253c8                 | '             return RES_NOTRDY;
253c8     03 FA 05 56 |  if_ne	mov	result1, #3
253cc     D8 05 90 5D |  if_ne	jmp	#LR__3788
253d0     13 00 00 FF 
253d4     10 13 06 F6 | 	mov	arg01, ##10000
253d8     9C 9A BF FD | 	call	#__system___waitus
253dc     30 4E 05 F1 | 	add	fp, #48
253e0     A7 12 02 FB | 	rdlong	arg01, fp
253e4     09 01 08 FC | 	wrpin	#0, arg01
253e8     04 4E 05 F1 | 	add	fp, #4
253ec     A7 12 02 FB | 	rdlong	arg01, fp
253f0     09 01 08 FC | 	wrpin	#0, arg01
253f4     04 4E 05 F1 | 	add	fp, #4
253f8     A7 12 02 FB | 	rdlong	arg01, fp
253fc     09 01 08 FC | 	wrpin	#0, arg01
25400     04 4E 05 F1 | 	add	fp, #4
25404     A7 12 02 FB | 	rdlong	arg01, fp
25408     09 00 80 FF 
2540c     09 01 08 FC | 	wrpin	##4608, arg01
25410     0C 4E 85 F1 | 	sub	fp, #12
25414     A7 12 02 FB | 	rdlong	arg01, fp
25418     59 12 62 FD | 	drvh	arg01
2541c     04 4E 05 F1 | 	add	fp, #4
25420     A7 12 02 FB | 	rdlong	arg01, fp
25424     59 12 62 FD | 	drvh	arg01
25428     04 4E 05 F1 | 	add	fp, #4
2542c     A7 12 02 FB | 	rdlong	arg01, fp
25430     59 12 62 FD | 	drvh	arg01
25434     04 4E 05 F1 | 	add	fp, #4
25438     A7 12 02 FB | 	rdlong	arg01, fp
2543c     59 12 62 FD | 	drvh	arg01
25440     20 4E 85 F1 | 	sub	fp, #32
25444     00 04 80 FF 
25448     A7 20 68 FC | 	wrlong	##524304, fp
2544c     04 4E 05 F1 | 	add	fp, #4
25450     20 03 80 FF 
25454     A7 90 68 FC | 	wrlong	##409672, fp
25458     14 4E 05 F1 | 	add	fp, #20
2545c     A7 1E 02 FB | 	rdlong	local01, fp
25460     18 4E 85 F1 | 	sub	fp, #24
25464     A7 16 02 FB | 	rdlong	arg03, fp
25468     40 1E 62 FD | 	dirl	local01
2546c     A0 03 80 FF 
25470     0F 91 08 FC | 	wrpin	##475208, local01
25474     0F 17 12 FC | 	wxpin	arg03, local01
25478     0F 01 28 FC | 	wypin	#0, local01
2547c     41 1E 62 FD | 	dirh	local01
25480     1C 4E 05 F1 | 	add	fp, #28
25484     A7 20 02 FB | 	rdlong	local02, fp
25488     10 1F 82 F1 | 	sub	local01, local02
2548c     07 1E 06 F5 | 	and	local01, #7
25490     18 1E 66 F0 | 	shl	local01, #24
25494     78 14 06 F6 | 	mov	arg02, #120
25498     0F 15 42 F5 | 	or	arg02, local01
2549c     14 4E 85 F1 | 	sub	fp, #20
254a0     A7 14 62 FC | 	wrlong	arg02, fp
254a4     14 4E 05 F1 | 	add	fp, #20
254a8     A7 12 02 FB | 	rdlong	arg01, fp
254ac     10 14 26 F4 | 	bith	arg02, #16
254b0     40 12 62 FD | 	dirl	arg01
254b4     09 15 02 FC | 	wrpin	arg02, arg01
254b8     09 3F 18 FC | 	wxpin	#31, arg01
254bc     FF FF FF FF 
254c0     09 FF 2B FC | 	wypin	##-1, arg01
254c4     41 12 62 FD | 	dirh	arg01
254c8     04 4E 85 F1 | 	sub	fp, #4
254cc     A7 14 02 FB | 	rdlong	arg02, fp
254d0     08 4E 05 F1 | 	add	fp, #8
254d4     A7 22 02 FB | 	rdlong	local03, fp
254d8     11 15 82 F1 | 	sub	arg02, local03
254dc     07 14 06 F5 | 	and	arg02, #7
254e0     18 14 66 F0 | 	shl	arg02, #24
254e4     14 4E 85 F1 | 	sub	fp, #20
254e8     A7 14 62 FC | 	wrlong	arg02, fp
254ec     29 00 00 FF 
254f0     7A 14 46 F5 | 	or	arg02, ##21114
254f4     A7 14 62 FC | 	wrlong	arg02, fp
254f8     14 4E 05 F1 | 	add	fp, #20
254fc     A7 12 02 FB | 	rdlong	arg01, fp
25500     40 12 62 FD | 	dirl	arg01
25504     09 15 02 FC | 	wrpin	arg02, arg01
25508     09 4F 18 FC | 	wxpin	#39, arg01
2550c     09 01 28 FC | 	wypin	#0, arg01
25510     41 12 62 FD | 	dirh	arg01
25514     28 4E 85 F1 | 	sub	fp, #40
25518     A7 12 02 F6 | 	mov	arg01, fp
2551c     14 4E 85 F1 | 	sub	fp, #20
25520     0A 14 06 F6 | 	mov	arg02, #10
25524     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1060
25528     00 12 06 F6 | 	mov	arg01, #0
2552c     00 14 06 F6 | 	mov	arg02, #0
25530     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1084
25534     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1070
25538     64 12 06 F6 | 	mov	arg01, #100
2553c     38 99 BF FD | 	call	#__system___waitus
25540     14 4E 05 F1 | 	add	fp, #20
25544     A7 12 02 F6 | 	mov	arg01, fp
25548     14 4E 85 F1 | 	sub	fp, #20
2554c     0A 14 06 F6 | 	mov	arg02, #10
25550     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1060
25554     0C 4E 05 F1 | 	add	fp, #12
25558     A7 00 48 FC | 	wrbyte	#0, fp
2555c     0C 4E 85 F1 | 	sub	fp, #12
25560     00 12 06 F6 | 	mov	arg01, #0
25564     00 14 06 F6 | 	mov	arg02, #0
25568     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1084
2556c     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
25570     01 18 0E F2 | 	cmp	arg04, #1 wz
25574     B8 03 90 5D |  if_ne	jmp	#LR__3787
25578     08 12 06 F6 | 	mov	arg01, #8
2557c     AA 15 06 F6 | 	mov	arg02, #426
25580     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1084
25584     FD FA E1 F8 | 	getbyte	result1, result1, #0
25588     01 FA 0D F2 | 	cmp	result1, #1 wz
2558c     98 01 90 5D |  if_ne	jmp	#LR__3773
25590     14 4E 05 F1 | 	add	fp, #20
25594     A7 12 02 F6 | 	mov	arg01, fp
25598     14 4E 85 F1 | 	sub	fp, #20
2559c     04 14 06 F6 | 	mov	arg02, #4
255a0     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1060
255a4     16 4E 05 F1 | 	add	fp, #22
255a8     A7 24 C2 FA | 	rdbyte	local04, fp
255ac     16 4E 85 F1 | 	sub	fp, #22
255b0     01 24 0E F2 | 	cmp	local04, #1 wz
255b4     17 4E 05 A1 |  if_e	add	fp, #23
255b8     A7 22 C2 AA |  if_e	rdbyte	local03, fp
255bc     17 4E 85 A1 |  if_e	sub	fp, #23
255c0     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
255c4     68 03 90 5D |  if_ne	jmp	#LR__3786
255c8                 | ' 				for (tmr = 1000; tmr; tmr--) {
255c8     18 4E 05 F1 | 	add	fp, #24
255cc     01 00 80 FF 
255d0     A7 D0 6B FC | 	wrlong	##1000, fp
255d4     18 4E 85 F1 | 	sub	fp, #24
255d8                 | LR__3770
255d8     18 4E 05 F1 | 	add	fp, #24
255dc     A7 1E 0A FB | 	rdlong	local01, fp wz
255e0     18 4E 85 F1 | 	sub	fp, #24
255e4     3C 00 90 AD |  if_e	jmp	#LR__3771
255e8     A9 12 06 F6 | 	mov	arg01, #169
255ec     1E 14 C6 F9 | 	decod	arg02, #30
255f0     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1084
255f4     FD 24 02 F6 | 	mov	local04, result1
255f8     07 24 4E F7 | 	zerox	local04, #7 wz
255fc     24 00 90 AD |  if_e	jmp	#LR__3771
25600     01 00 00 FF 
25604     E8 13 06 F6 | 	mov	arg01, ##1000
25608     6C 98 BF FD | 	call	#__system___waitus
2560c     18 4E 05 F1 | 	add	fp, #24
25610     A7 24 02 FB | 	rdlong	local04, fp
25614     01 24 86 F1 | 	sub	local04, #1
25618     A7 24 62 FC | 	wrlong	local04, fp
2561c     18 4E 85 F1 | 	sub	fp, #24
25620     B4 FF 9F FD | 	jmp	#LR__3770
25624                 | LR__3771
25624     18 4E 05 F1 | 	add	fp, #24
25628     A7 24 0A FB | 	rdlong	local04, fp wz
2562c     18 4E 85 F1 | 	sub	fp, #24
25630     4C 00 90 AD |  if_e	jmp	#LR__3772
25634     3A 12 06 F6 | 	mov	arg01, #58
25638     00 14 06 F6 | 	mov	arg02, #0
2563c     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1084
25640     FD 22 02 F6 | 	mov	local03, result1
25644     07 22 4E F7 | 	zerox	local03, #7 wz
25648     34 00 90 5D |  if_ne	jmp	#LR__3772
2564c     14 4E 05 F1 | 	add	fp, #20
25650     A7 12 02 F6 | 	mov	arg01, fp
25654     14 4E 85 F1 | 	sub	fp, #20
25658     04 14 06 F6 | 	mov	arg02, #4
2565c     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1060
25660     14 4E 05 F1 | 	add	fp, #20
25664     A7 1E C2 FA | 	rdbyte	local01, fp
25668     40 1E CE F7 | 	test	local01, #64 wz
2566c     0C 24 06 56 |  if_ne	mov	local04, #12
25670     04 24 06 A6 |  if_e	mov	local04, #4
25674     08 4E 85 F1 | 	sub	fp, #8
25678     A7 24 42 FC | 	wrbyte	local04, fp
2567c     0C 4E 85 F1 | 	sub	fp, #12
25680                 | LR__3772
25680     14 24 06 FB | 	rdlong	local04, #20
25684     18 4E 05 F1 | 	add	fp, #24
25688     A7 24 62 FC | 	wrlong	local04, fp
2568c     0C 4E 05 F1 | 	add	fp, #12
25690     A7 24 02 FB | 	rdlong	local04, fp
25694     1B 24 26 F4 | 	bith	local04, #27
25698     A7 24 62 FC | 	wrlong	local04, fp
2569c     0C 4E 85 F1 | 	sub	fp, #12
256a0     A7 24 02 FB | 	rdlong	local04, fp
256a4     18 4E 85 F1 | 	sub	fp, #24
256a8     68 78 04 FF 
256ac     81 25 16 F2 | 	cmp	local04, ##150000001 wc
256b0     1C 4E 05 C1 |  if_b	add	fp, #28
256b4     00 01 80 CF 
256b8     A7 08 68 CC |  if_b	wrlong	##131076, fp
256bc     1C 4E 85 C1 |  if_b	sub	fp, #28
256c0     6C 02 90 CD |  if_b	jmp	#LR__3786
256c4     18 4E 05 F1 | 	add	fp, #24
256c8     A7 24 02 FB | 	rdlong	local04, fp
256cc     18 4E 85 F1 | 	sub	fp, #24
256d0     E1 F5 05 FF 
256d4     01 24 16 F2 | 	cmp	local04, ##200000001 wc
256d8     1C 4E 05 C1 |  if_b	add	fp, #28
256dc     00 01 80 CF 
256e0     A7 0A 68 CC |  if_b	wrlong	##131077, fp
256e4     1C 4E 85 C1 |  if_b	sub	fp, #28
256e8     44 02 90 CD |  if_b	jmp	#LR__3786
256ec     18 4E 05 F1 | 	add	fp, #24
256f0     A7 24 02 FB | 	rdlong	local04, fp
256f4     18 4E 85 F1 | 	sub	fp, #24
256f8     3B 58 08 FF 
256fc     01 24 16 F2 | 	cmp	local04, ##280000001 wc
25700     1C 4E 05 C1 |  if_b	add	fp, #28
25704     00 01 80 CF 
25708     A7 0C 68 CC |  if_b	wrlong	##131078, fp
2570c     1C 4E 85 C1 |  if_b	sub	fp, #28
25710     1C 02 90 CD |  if_b	jmp	#LR__3786
25714     1C 4E 05 F1 | 	add	fp, #28
25718     80 01 80 FF 
2571c     A7 10 68 FC | 	wrlong	##196616, fp
25720     1C 4E 85 F1 | 	sub	fp, #28
25724     08 02 90 FD | 	jmp	#LR__3786
25728                 | LR__3773
25728     A9 12 06 F6 | 	mov	arg01, #169
2572c     00 14 06 F6 | 	mov	arg02, #0
25730     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1084
25734     FD 24 E2 F8 | 	getbyte	local04, result1, #0
25738     02 24 16 F2 | 	cmp	local04, #2 wc
2573c     18 00 90 3D |  if_ae	jmp	#LR__3774
25740     0C 4E 05 F1 | 	add	fp, #12
25744     A7 04 48 FC | 	wrbyte	#2, fp
25748     04 4E 05 F1 | 	add	fp, #4
2574c     A7 52 49 FC | 	wrbyte	#169, fp
25750     10 4E 85 F1 | 	sub	fp, #16
25754     14 00 90 FD | 	jmp	#LR__3775
25758                 | LR__3774
25758     0C 4E 05 F1 | 	add	fp, #12
2575c     A7 02 48 FC | 	wrbyte	#1, fp
25760     04 4E 05 F1 | 	add	fp, #4
25764     A7 02 48 FC | 	wrbyte	#1, fp
25768     10 4E 85 F1 | 	sub	fp, #16
2576c                 | LR__3775
2576c                 | ' 				ty =  0x01 ; cmd =  (1) ;
2576c                 | ' 			}
2576c                 | ' 			for (tmr = 1000; tmr; tmr--) {
2576c     18 4E 05 F1 | 	add	fp, #24
25770     01 00 80 FF 
25774     A7 D0 6B FC | 	wrlong	##1000, fp
25778     18 4E 85 F1 | 	sub	fp, #24
2577c                 | LR__3776
2577c     18 4E 05 F1 | 	add	fp, #24
25780     A7 22 0A FB | 	rdlong	local03, fp wz
25784     18 4E 85 F1 | 	sub	fp, #24
25788     44 00 90 AD |  if_e	jmp	#LR__3777
2578c     10 4E 05 F1 | 	add	fp, #16
25790     A7 12 C2 FA | 	rdbyte	arg01, fp
25794     10 4E 85 F1 | 	sub	fp, #16
25798     00 14 06 F6 | 	mov	arg02, #0
2579c     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1084
257a0     FD 24 02 F6 | 	mov	local04, result1
257a4     07 24 4E F7 | 	zerox	local04, #7 wz
257a8     24 00 90 AD |  if_e	jmp	#LR__3777
257ac     01 00 00 FF 
257b0     E8 13 06 F6 | 	mov	arg01, ##1000
257b4     C0 96 BF FD | 	call	#__system___waitus
257b8     18 4E 05 F1 | 	add	fp, #24
257bc     A7 24 02 FB | 	rdlong	local04, fp
257c0     01 24 86 F1 | 	sub	local04, #1
257c4     A7 24 62 FC | 	wrlong	local04, fp
257c8     18 4E 85 F1 | 	sub	fp, #24
257cc     AC FF 9F FD | 	jmp	#LR__3776
257d0                 | LR__3777
257d0     18 4E 05 F1 | 	add	fp, #24
257d4     A7 24 0A FB | 	rdlong	local04, fp wz
257d8     18 4E 85 F1 | 	sub	fp, #24
257dc     14 00 90 AD |  if_e	jmp	#LR__3778
257e0     10 12 06 F6 | 	mov	arg01, #16
257e4     09 14 C6 F9 | 	decod	arg02, #9
257e8     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1084
257ec     07 FA 4D F7 | 	zerox	result1, #7 wz
257f0     0C 00 90 AD |  if_e	jmp	#LR__3779
257f4                 | LR__3778
257f4     0C 4E 05 F1 | 	add	fp, #12
257f8     A7 00 48 FC | 	wrbyte	#0, fp
257fc     0C 4E 85 F1 | 	sub	fp, #12
25800                 | LR__3779
25800     14 24 06 FB | 	rdlong	local04, #20
25804     18 4E 05 F1 | 	add	fp, #24
25808     A7 24 62 FC | 	wrlong	local04, fp
2580c     18 4E 85 F1 | 	sub	fp, #24
25810     F0 FA 02 FF 
25814     01 25 16 F2 | 	cmp	local04, ##100000001 wc
25818     18 00 90 3D |  if_ae	jmp	#LR__3780
2581c     24 4E 05 F1 | 	add	fp, #36
25820     A7 24 02 FB | 	rdlong	local04, fp
25824     1B 24 26 F4 | 	bith	local04, #27
25828     A7 24 62 FC | 	wrlong	local04, fp
2582c     24 4E 85 F1 | 	sub	fp, #36
25830     2C 00 90 FD | 	jmp	#LR__3781
25834                 | LR__3780
25834     18 4E 05 F1 | 	add	fp, #24
25838     A7 24 02 FB | 	rdlong	local04, fp
2583c     18 4E 85 F1 | 	sub	fp, #24
25840     E1 F5 05 FF 
25844     01 24 16 F2 | 	cmp	local04, ##200000001 wc
25848     24 4E 05 C1 |  if_b	add	fp, #36
2584c     A7 24 02 CB |  if_b	rdlong	local04, fp
25850     80 00 04 CF 
25854     00 24 46 C5 |  if_b	or	local04, ##134283264
25858     A7 24 62 CC |  if_b	wrlong	local04, fp
2585c     24 4E 85 C1 |  if_b	sub	fp, #36
25860                 | LR__3781
25860     18 4E 05 F1 | 	add	fp, #24
25864     A7 24 02 FB | 	rdlong	local04, fp
25868     18 4E 85 F1 | 	sub	fp, #24
2586c     F0 FA 02 FF 
25870     01 25 16 F2 | 	cmp	local04, ##100000001 wc
25874     1C 4E 05 C1 |  if_b	add	fp, #28
25878     00 01 80 CF 
2587c     A7 08 68 CC |  if_b	wrlong	##131076, fp
25880     1C 4E 85 C1 |  if_b	sub	fp, #28
25884     A8 00 90 CD |  if_b	jmp	#LR__3785
25888     18 4E 05 F1 | 	add	fp, #24
2588c     A7 24 02 FB | 	rdlong	local04, fp
25890     18 4E 85 F1 | 	sub	fp, #24
25894     68 78 04 FF 
25898     81 25 16 F2 | 	cmp	local04, ##150000001 wc
2589c     1C 4E 05 C1 |  if_b	add	fp, #28
258a0     80 01 80 CF 
258a4     A7 0C 68 CC |  if_b	wrlong	##196614, fp
258a8     1C 4E 85 C1 |  if_b	sub	fp, #28
258ac     80 00 90 CD |  if_b	jmp	#LR__3784
258b0     18 4E 05 F1 | 	add	fp, #24
258b4     A7 24 02 FB | 	rdlong	local04, fp
258b8     18 4E 85 F1 | 	sub	fp, #24
258bc     E1 F5 05 FF 
258c0     01 24 16 F2 | 	cmp	local04, ##200000001 wc
258c4     1C 4E 05 C1 |  if_b	add	fp, #28
258c8     00 02 80 CF 
258cc     A7 10 68 CC |  if_b	wrlong	##262152, fp
258d0     1C 4E 85 C1 |  if_b	sub	fp, #28
258d4     58 00 90 CD |  if_b	jmp	#LR__3783
258d8     18 4E 05 F1 | 	add	fp, #24
258dc     A7 24 02 FB | 	rdlong	local04, fp
258e0     18 4E 85 F1 | 	sub	fp, #24
258e4     59 73 07 FF 
258e8     81 24 16 F2 | 	cmp	local04, ##250000001 wc
258ec     1C 4E 05 C1 |  if_b	add	fp, #28
258f0     80 02 80 CF 
258f4     A7 14 68 CC |  if_b	wrlong	##327690, fp
258f8     1C 4E 85 C1 |  if_b	sub	fp, #28
258fc     30 00 90 CD |  if_b	jmp	#LR__3782
25900     18 4E 05 F1 | 	add	fp, #24
25904     A7 24 02 FB | 	rdlong	local04, fp
25908     18 4E 85 F1 | 	sub	fp, #24
2590c     D1 F0 08 FF 
25910     01 25 16 F2 | 	cmp	local04, ##300000001 wc
25914     1C 4E 05 C1 |  if_b	add	fp, #28
25918     00 03 80 CF 
2591c     A7 18 68 CC |  if_b	wrlong	##393228, fp
25920     1C 4E 85 F3 | 	sumc	fp, #28
25924     80 03 80 3F 
25928     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
2592c     1C 4E 85 31 |  if_ae	sub	fp, #28
25930                 | LR__3782
25930                 | LR__3783
25930                 | LR__3784
25930                 | LR__3785
25930                 | LR__3786
25930                 | LR__3787
25930     0C 4E 05 F1 | 	add	fp, #12
25934     A7 24 C2 FA | 	rdbyte	local04, fp
25938     01 00 00 FF 
2593c     21 E4 05 F1 | 	add	objptr, ##545
25940     F2 24 42 FC | 	wrbyte	local04, objptr
25944     A7 1E CA FA | 	rdbyte	local01, fp wz
25948     00 24 06 56 |  if_ne	mov	local04, #0
2594c     01 24 06 A6 |  if_e	mov	local04, #1
25950     20 4E 05 F1 | 	add	fp, #32
25954     A7 24 42 FC | 	wrbyte	local04, fp
25958     A7 24 C2 FA | 	rdbyte	local04, fp
2595c     2C 4E 85 F1 | 	sub	fp, #44
25960     01 E4 85 F1 | 	sub	objptr, #1
25964     F2 24 42 FC | 	wrbyte	local04, objptr
25968     01 00 00 FF 
2596c     20 E4 85 F1 | 	sub	objptr, ##544
25970     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1070
25974     34 4E 05 F1 | 	add	fp, #52
25978     A7 12 02 FB | 	rdlong	arg01, fp
2597c     18 4E 85 F1 | 	sub	fp, #24
25980     A7 14 02 FB | 	rdlong	arg02, fp
25984     09 15 12 FC | 	wxpin	arg02, arg01
25988     1C 4E 05 F1 | 	add	fp, #28
2598c     A7 12 02 FB | 	rdlong	arg01, fp
25990     14 4E 85 F1 | 	sub	fp, #20
25994     A7 14 02 FB | 	rdlong	arg02, fp
25998     09 15 02 FC | 	wrpin	arg02, arg01
2599c                 | ' 
2599c                 | ' 		}
2599c                 | ' 	}
2599c                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2599c                 | ' 	CardType = ty;
2599c                 | ' 	s = ty ? 0 :  0x01 ;
2599c                 | ' 	Stat = s;
2599c                 | ' 
2599c                 | ' 	deselect();
2599c                 | ' 
2599c                 | ' 
2599c                 | ' 	_wxpin( PIN_CLK, ck_div );
2599c                 | ' 	_wrpin( PIN_DI, spm_tx );
2599c                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2599c                 | ' 	return s;
2599c     08 4E 05 F1 | 	add	fp, #8
259a0     A7 FA C1 FA | 	rdbyte	result1, fp
259a4     2C 4E 85 F1 | 	sub	fp, #44
259a8                 | LR__3788
259a8     A7 F0 03 F6 | 	mov	ptra, fp
259ac     B2 00 A0 FD | 	call	#popregs_
259b0                 | _fatfs_cc_disk_initialize_ret
259b0     2D 00 64 FD | 	ret
259b4                 | 
259b4                 | _fatfs_cc_disk_read
259b4     05 4A 05 F6 | 	mov	COUNT_, #5
259b8     A8 00 A0 FD | 	call	#pushregs_
259bc     0A 1F 02 F6 | 	mov	local01, arg02
259c0     0B 21 02 F6 | 	mov	local02, arg03
259c4     0C 23 02 F6 | 	mov	local03, arg04
259c8     00 12 0E F2 | 	cmp	arg01, #0 wz
259cc     01 FA 05 56 |  if_ne	mov	result1, #1
259d0                 | ' 
259d0                 | ' 	return Stat;
259d0     01 00 00 AF 
259d4     20 E4 05 A1 |  if_e	add	objptr, ##544
259d8     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
259dc     01 00 00 AF 
259e0     20 E4 85 A1 |  if_e	sub	objptr, ##544
259e4     FD FA E1 F8 | 	getbyte	result1, result1, #0
259e8     01 FA CD F7 | 	test	result1, #1 wz
259ec     03 FA 05 56 |  if_ne	mov	result1, #3
259f0     84 00 90 5D |  if_ne	jmp	#LR__3792
259f4     01 00 00 FF 
259f8     21 E4 05 F1 | 	add	objptr, ##545
259fc     F2 24 C2 FA | 	rdbyte	local04, objptr
25a00     01 00 00 FF 
25a04     21 E4 85 F1 | 	sub	objptr, ##545
25a08     08 24 CE F7 | 	test	local04, #8 wz
25a0c     09 20 66 A0 |  if_e	shl	local02, #9
25a10     02 22 16 F2 | 	cmp	local03, #2 wc
25a14     12 24 06 36 |  if_ae	mov	local04, #18
25a18     11 24 06 C6 |  if_b	mov	local04, #17
25a1c     10 15 02 F6 | 	mov	arg02, local02
25a20     12 13 02 F6 | 	mov	arg01, local04
25a24     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1084
25a28     FD 26 02 F6 | 	mov	local05, result1
25a2c     07 26 4E F7 | 	zerox	local05, #7 wz
25a30     30 00 90 5D |  if_ne	jmp	#LR__3791
25a34                 | ' 		do {
25a34                 | LR__3790
25a34     0F 13 02 F6 | 	mov	arg01, local01
25a38     09 14 C6 F9 | 	decod	arg02, #9
25a3c     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1078
25a40     00 FA 0D F2 | 	cmp	result1, #0 wz
25a44     01 00 00 5F 
25a48     00 1E 06 51 |  if_ne	add	local01, ##512
25a4c     F9 23 6E 5B |  if_ne	djnz	local03, #LR__3790
25a50     12 25 E2 F8 | 	getbyte	local04, local04, #0
25a54     12 24 0E F2 | 	cmp	local04, #18 wz
25a58     0C 12 06 A6 |  if_e	mov	arg01, #12
25a5c     00 14 06 A6 |  if_e	mov	arg02, #0
25a60     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1084
25a64                 | LR__3791
25a64     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1070
25a68                 | ' 	}
25a68                 | ' 	deselect();
25a68                 | ' 
25a68                 | ' 	return count ? RES_ERROR : RES_OK;
25a68     00 22 0E F2 | 	cmp	local03, #0 wz
25a6c     01 26 06 56 |  if_ne	mov	local05, #1
25a70     00 26 06 A6 |  if_e	mov	local05, #0
25a74     13 FB 01 F6 | 	mov	result1, local05
25a78                 | LR__3792
25a78     A7 F0 03 F6 | 	mov	ptra, fp
25a7c     B2 00 A0 FD | 	call	#popregs_
25a80                 | _fatfs_cc_disk_read_ret
25a80     2D 00 64 FD | 	ret
25a84                 | 
25a84                 | _fatfs_cc_disk_write
25a84     04 4A 05 F6 | 	mov	COUNT_, #4
25a88     A8 00 A0 FD | 	call	#pushregs_
25a8c     0A 1F 02 F6 | 	mov	local01, arg02
25a90     0C 21 02 F6 | 	mov	local02, arg04
25a94     0B 23 02 F6 | 	mov	local03, arg03
25a98     00 12 0E F2 | 	cmp	arg01, #0 wz
25a9c     01 FA 05 56 |  if_ne	mov	result1, #1
25aa0                 | ' 
25aa0                 | ' 	return Stat;
25aa0     01 00 00 AF 
25aa4     20 E4 05 A1 |  if_e	add	objptr, ##544
25aa8     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
25aac     01 00 00 AF 
25ab0     20 E4 85 A1 |  if_e	sub	objptr, ##544
25ab4     FD FA E1 F8 | 	getbyte	result1, result1, #0
25ab8     01 FA CD F7 | 	test	result1, #1 wz
25abc     03 FA 05 56 |  if_ne	mov	result1, #3
25ac0     D4 00 90 5D |  if_ne	jmp	#LR__3804
25ac4     01 00 00 FF 
25ac8     21 E4 05 F1 | 	add	objptr, ##545
25acc     F2 16 C2 FA | 	rdbyte	arg03, objptr
25ad0     01 00 00 FF 
25ad4     21 E4 85 F1 | 	sub	objptr, ##545
25ad8     08 16 CE F7 | 	test	arg03, #8 wz
25adc     09 22 66 A0 |  if_e	shl	local03, #9
25ae0     01 20 0E F2 | 	cmp	local02, #1 wz
25ae4     30 00 90 5D |  if_ne	jmp	#LR__3800
25ae8     18 12 06 F6 | 	mov	arg01, #24
25aec     11 15 02 F6 | 	mov	arg02, local03
25af0     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1084
25af4     FD 24 02 F6 | 	mov	local04, result1
25af8     07 24 4E F7 | 	zerox	local04, #7 wz
25afc     84 00 90 5D |  if_ne	jmp	#LR__3803
25b00     0F 13 02 F6 | 	mov	arg01, local01
25b04     FE 14 06 F6 | 	mov	arg02, #254
25b08     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1080
25b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
25b10     00 20 06 56 |  if_ne	mov	local02, #0
25b14     6C 00 90 FD | 	jmp	#LR__3803
25b18                 | LR__3800
25b18     01 00 00 FF 
25b1c     21 E4 05 F1 | 	add	objptr, ##545
25b20     F2 24 C2 FA | 	rdbyte	local04, objptr
25b24     01 00 00 FF 
25b28     21 E4 85 F1 | 	sub	objptr, ##545
25b2c     06 24 CE F7 | 	test	local04, #6 wz
25b30     97 12 06 56 |  if_ne	mov	arg01, #151
25b34     10 15 02 56 |  if_ne	mov	arg02, local02
25b38     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1084
25b3c     11 15 02 F6 | 	mov	arg02, local03
25b40     19 12 06 F6 | 	mov	arg01, #25
25b44     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1084
25b48     FD 24 02 F6 | 	mov	local04, result1
25b4c     07 24 4E F7 | 	zerox	local04, #7 wz
25b50     30 00 90 5D |  if_ne	jmp	#LR__3802
25b54                 | ' 			do {
25b54                 | LR__3801
25b54     0F 13 02 F6 | 	mov	arg01, local01
25b58     FC 14 06 F6 | 	mov	arg02, #252
25b5c     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1080
25b60     00 FA 0D F2 | 	cmp	result1, #0 wz
25b64     01 00 00 5F 
25b68     00 1E 06 51 |  if_ne	add	local01, ##512
25b6c     F9 21 6E 5B |  if_ne	djnz	local02, #LR__3801
25b70     00 12 06 F6 | 	mov	arg01, #0
25b74     FD 14 06 F6 | 	mov	arg02, #253
25b78     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1080
25b7c     00 FA 0D F2 | 	cmp	result1, #0 wz
25b80     01 20 06 A6 |  if_e	mov	local02, #1
25b84                 | LR__3802
25b84                 | LR__3803
25b84     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1070
25b88                 | ' 				count = 1;
25b88                 | ' 		}
25b88                 | ' 	}
25b88                 | ' 	deselect();
25b88                 | ' 
25b88                 | ' 	return count ? RES_ERROR : RES_OK;
25b88     00 20 0E F2 | 	cmp	local02, #0 wz
25b8c     01 24 06 56 |  if_ne	mov	local04, #1
25b90     00 24 06 A6 |  if_e	mov	local04, #0
25b94     12 FB 01 F6 | 	mov	result1, local04
25b98                 | LR__3804
25b98     A7 F0 03 F6 | 	mov	ptra, fp
25b9c     B2 00 A0 FD | 	call	#popregs_
25ba0                 | _fatfs_cc_disk_write_ret
25ba0     2D 00 64 FD | 	ret
25ba4                 | 
25ba4                 | _fatfs_cc_disk_ioctl
25ba4     01 4A 05 F6 | 	mov	COUNT_, #1
25ba8     A8 00 A0 FD | 	call	#pushregs_
25bac     30 F0 07 F1 | 	add	ptra, #48
25bb0     04 4E 05 F1 | 	add	fp, #4
25bb4     A7 12 42 FC | 	wrbyte	arg01, fp
25bb8     04 4E 05 F1 | 	add	fp, #4
25bbc     A7 14 42 FC | 	wrbyte	arg02, fp
25bc0     04 4E 05 F1 | 	add	fp, #4
25bc4     A7 16 62 FC | 	wrlong	arg03, fp
25bc8     08 4E 85 F1 | 	sub	fp, #8
25bcc     A7 12 CA FA | 	rdbyte	arg01, fp wz
25bd0     04 4E 85 F1 | 	sub	fp, #4
25bd4     01 FA 05 56 |  if_ne	mov	result1, #1
25bd8                 | ' 
25bd8                 | ' 	return Stat;
25bd8     01 00 00 AF 
25bdc     20 E4 05 A1 |  if_e	add	objptr, ##544
25be0     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
25be4     01 00 00 AF 
25be8     20 E4 85 A1 |  if_e	sub	objptr, ##544
25bec     FD FA E1 F8 | 	getbyte	result1, result1, #0
25bf0     01 FA CD F7 | 	test	result1, #1 wz
25bf4     03 FA 05 56 |  if_ne	mov	result1, #3
25bf8     E4 01 90 5D |  if_ne	jmp	#LR__3818
25bfc     10 4E 05 F1 | 	add	fp, #16
25c00     A7 02 68 FC | 	wrlong	#1, fp
25c04                 | ' 
25c04                 | ' 	res = RES_ERROR;
25c04                 | ' 	switch (ctrl) {
25c04     08 4E 85 F1 | 	sub	fp, #8
25c08     A7 1E C2 FA | 	rdbyte	local01, fp
25c0c     08 4E 85 F1 | 	sub	fp, #8
25c10     04 1E 26 F3 | 	fle	local01, #4
25c14     30 1E 62 FD | 	jmprel	local01
25c18                 | LR__3810
25c18     10 00 90 FD | 	jmp	#LR__3811
25c1c     24 00 90 FD | 	jmp	#LR__3812
25c20     A0 01 90 FD | 	jmp	#LR__3816
25c24     80 01 90 FD | 	jmp	#LR__3815
25c28     98 01 90 FD | 	jmp	#LR__3816
25c2c                 | LR__3811
25c2c     B4 79 B0 FD | 	call	#_fatfs_cc_select_1074
25c30     00 FA 0D F2 | 	cmp	result1, #0 wz
25c34     10 4E 05 51 |  if_ne	add	fp, #16
25c38     A7 00 68 5C |  if_ne	wrlong	#0, fp
25c3c     10 4E 85 51 |  if_ne	sub	fp, #16
25c40                 | ' 			break;
25c40     8C 01 90 FD | 	jmp	#LR__3817
25c44                 | LR__3812
25c44     09 12 06 F6 | 	mov	arg01, #9
25c48     00 14 06 F6 | 	mov	arg02, #0
25c4c     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1084
25c50     FD 1E 02 F6 | 	mov	local01, result1
25c54     07 1E 4E F7 | 	zerox	local01, #7 wz
25c58     74 01 90 5D |  if_ne	jmp	#LR__3817
25c5c     18 4E 05 F1 | 	add	fp, #24
25c60     A7 12 02 F6 | 	mov	arg01, fp
25c64     18 4E 85 F1 | 	sub	fp, #24
25c68     10 14 06 F6 | 	mov	arg02, #16
25c6c     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1078
25c70     00 FA 0D F2 | 	cmp	result1, #0 wz
25c74     58 01 90 AD |  if_e	jmp	#LR__3817
25c78     18 4E 05 F1 | 	add	fp, #24
25c7c     A7 1E C2 FA | 	rdbyte	local01, fp
25c80     18 4E 85 F1 | 	sub	fp, #24
25c84     06 1E 46 F0 | 	shr	local01, #6
25c88     01 1E 0E F2 | 	cmp	local01, #1 wz
25c8c     5C 00 90 5D |  if_ne	jmp	#LR__3813
25c90     21 4E 05 F1 | 	add	fp, #33
25c94     A7 1E C2 FA | 	rdbyte	local01, fp
25c98     01 4E 85 F1 | 	sub	fp, #1
25c9c     A7 FA C1 FA | 	rdbyte	result1, fp
25ca0     FD FA 31 F9 | 	getword	result1, result1, #0
25ca4     08 FA 65 F0 | 	shl	result1, #8
25ca8     FD 1E 02 F1 | 	add	local01, result1
25cac     01 4E 85 F1 | 	sub	fp, #1
25cb0     A7 FA C1 FA | 	rdbyte	result1, fp
25cb4     3F FA 05 F5 | 	and	result1, #63
25cb8     10 FA 65 F0 | 	shl	result1, #16
25cbc     FD 1E 02 F1 | 	add	local01, result1
25cc0     01 1E 06 F1 | 	add	local01, #1
25cc4     09 4E 05 F1 | 	add	fp, #9
25cc8     A7 1E 62 FC | 	wrlong	local01, fp
25ccc     1C 4E 85 F1 | 	sub	fp, #28
25cd0     A7 1E 02 FB | 	rdlong	local01, fp
25cd4     1C 4E 05 F1 | 	add	fp, #28
25cd8     A7 FA 01 FB | 	rdlong	result1, fp
25cdc     28 4E 85 F1 | 	sub	fp, #40
25ce0     0A FA 65 F0 | 	shl	result1, #10
25ce4     0F FB 61 FC | 	wrlong	result1, local01
25ce8     AC 00 90 FD | 	jmp	#LR__3814
25cec                 | LR__3813
25cec     1D 4E 05 F1 | 	add	fp, #29
25cf0     A7 1E C2 FA | 	rdbyte	local01, fp
25cf4     0F 1F 42 F8 | 	getnib	local01, local01, #0
25cf8     05 4E 05 F1 | 	add	fp, #5
25cfc     A7 FA C1 FA | 	rdbyte	result1, fp
25d00     80 FA 05 F5 | 	and	result1, #128
25d04     07 FA C5 F0 | 	sar	result1, #7
25d08     FD 1E 02 F1 | 	add	local01, result1
25d0c     01 4E 85 F1 | 	sub	fp, #1
25d10     A7 FA C1 FA | 	rdbyte	result1, fp
25d14     03 FA 05 F5 | 	and	result1, #3
25d18     01 FA 65 F0 | 	shl	result1, #1
25d1c     FD 1E 02 F1 | 	add	local01, result1
25d20     02 1E 06 F1 | 	add	local01, #2
25d24     0D 4E 85 F1 | 	sub	fp, #13
25d28     A7 1E 42 FC | 	wrbyte	local01, fp
25d2c     0C 4E 05 F1 | 	add	fp, #12
25d30     A7 1E C2 FA | 	rdbyte	local01, fp
25d34     06 1E 46 F0 | 	shr	local01, #6
25d38     01 4E 85 F1 | 	sub	fp, #1
25d3c     A7 FA C1 FA | 	rdbyte	result1, fp
25d40     FD FA 31 F9 | 	getword	result1, result1, #0
25d44     02 FA 65 F0 | 	shl	result1, #2
25d48     FD 1E 02 F1 | 	add	local01, result1
25d4c     01 4E 85 F1 | 	sub	fp, #1
25d50     A7 FA C1 FA | 	rdbyte	result1, fp
25d54     03 FA 05 F5 | 	and	result1, #3
25d58     FD FA 31 F9 | 	getword	result1, result1, #0
25d5c     0A FA 65 F0 | 	shl	result1, #10
25d60     FD 1E 02 F1 | 	add	local01, result1
25d64     01 1E 06 F1 | 	add	local01, #1
25d68     0A 4E 05 F1 | 	add	fp, #10
25d6c     A7 1E 62 FC | 	wrlong	local01, fp
25d70     1C 4E 85 F1 | 	sub	fp, #28
25d74     A7 1E 02 FB | 	rdlong	local01, fp
25d78     1C 4E 05 F1 | 	add	fp, #28
25d7c     A7 FA 01 FB | 	rdlong	result1, fp
25d80     14 4E 85 F1 | 	sub	fp, #20
25d84     A7 16 C2 FA | 	rdbyte	arg03, fp
25d88     14 4E 85 F1 | 	sub	fp, #20
25d8c     09 16 86 F1 | 	sub	arg03, #9
25d90     0B FB 61 F0 | 	shl	result1, arg03
25d94     0F FB 61 FC | 	wrlong	result1, local01
25d98                 | LR__3814
25d98     10 4E 05 F1 | 	add	fp, #16
25d9c     A7 00 68 FC | 	wrlong	#0, fp
25da0     10 4E 85 F1 | 	sub	fp, #16
25da4                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
25da4                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
25da4                 | ' 					*(LBA_t*)buff = cs << (n - 9);
25da4                 | ' 				}
25da4                 | ' 				res = RES_OK;
25da4                 | ' 			}
25da4                 | ' 			break;
25da4     28 00 90 FD | 	jmp	#LR__3817
25da8                 | LR__3815
25da8     0C 4E 05 F1 | 	add	fp, #12
25dac     A7 1E 02 FB | 	rdlong	local01, fp
25db0     0F 01 69 FC | 	wrlong	#128, local01
25db4     04 4E 05 F1 | 	add	fp, #4
25db8     A7 00 68 FC | 	wrlong	#0, fp
25dbc     10 4E 85 F1 | 	sub	fp, #16
25dc0                 | ' 			*(DWORD*)buff = 128;
25dc0                 | ' 			res = RES_OK;
25dc0                 | ' 			break;
25dc0     0C 00 90 FD | 	jmp	#LR__3817
25dc4                 | LR__3816
25dc4     10 4E 05 F1 | 	add	fp, #16
25dc8     A7 08 68 FC | 	wrlong	#4, fp
25dcc     10 4E 85 F1 | 	sub	fp, #16
25dd0                 | LR__3817
25dd0     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1070
25dd4                 | ' 			res = RES_PARERR;
25dd4                 | ' 	}
25dd4                 | ' 
25dd4                 | ' 	deselect();
25dd4                 | ' 
25dd4                 | ' 	return res;
25dd4     10 4E 05 F1 | 	add	fp, #16
25dd8     A7 FA 01 FB | 	rdlong	result1, fp
25ddc     10 4E 85 F1 | 	sub	fp, #16
25de0                 | LR__3818
25de0     A7 F0 03 F6 | 	mov	ptra, fp
25de4     B2 00 A0 FD | 	call	#popregs_
25de8                 | _fatfs_cc_disk_ioctl_ret
25de8     2D 00 64 FD | 	ret
25dec                 | 
25dec                 | _fatfs_cc_disk_setpins
25dec     00 12 0E F2 | 	cmp	arg01, #0 wz
25df0     01 FA 65 56 |  if_ne	neg	result1, #1
25df4     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
25df8     01 00 00 FF 
25dfc     10 E4 05 F1 | 	add	objptr, ##528
25e00     F2 14 62 FC | 	wrlong	arg02, objptr
25e04     04 E4 05 F1 | 	add	objptr, #4
25e08     F2 16 62 FC | 	wrlong	arg03, objptr
25e0c     04 E4 05 F1 | 	add	objptr, #4
25e10     F2 18 62 FC | 	wrlong	arg04, objptr
25e14     04 E4 05 F1 | 	add	objptr, #4
25e18     F2 1A 62 FC | 	wrlong	arg05, objptr
25e1c     01 00 00 FF 
25e20     1C E4 85 F1 | 	sub	objptr, ##540
25e24     00 FA 05 F6 | 	mov	result1, #0
25e28                 | _fatfs_cc_disk_setpins_ret
25e28     2D 00 64 FD | 	ret
25e2c                 | 
25e2c                 | _fatfs_cc_tchar2uni
25e2c     09 01 02 FB | 	rdlong	_var01, arg01
25e30     00 03 02 F6 | 	mov	_var02, _var01
25e34     01 00 06 F1 | 	add	_var01, #1
25e38     00 05 02 F6 | 	mov	_var03, _var01
25e3c     01 07 C2 FA | 	rdbyte	_var04, _var02
25e40     80 06 CE F7 | 	test	_var04, #128 wz
25e44     E8 00 90 AD |  if_e	jmp	#LR__3827
25e48     03 09 02 F6 | 	mov	_var05, _var04
25e4c     E0 08 06 F5 | 	and	_var05, #224
25e50     C0 08 0E F2 | 	cmp	_var05, #192 wz
25e54     1F 06 06 A5 |  if_e	and	_var04, #31
25e58     01 0A 06 A6 |  if_e	mov	_var06, #1
25e5c     34 00 90 AD |  if_e	jmp	#LR__3821
25e60     03 09 02 F6 | 	mov	_var05, _var04
25e64     F0 08 06 F5 | 	and	_var05, #240
25e68     E0 08 0E F2 | 	cmp	_var05, #224 wz
25e6c     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
25e70     02 0A 06 A6 |  if_e	mov	_var06, #2
25e74     1C 00 90 AD |  if_e	jmp	#LR__3820
25e78     03 09 02 F6 | 	mov	_var05, _var04
25e7c     F8 08 06 F5 | 	and	_var05, #248
25e80     F0 08 0E F2 | 	cmp	_var05, #240 wz
25e84     07 06 06 A5 |  if_e	and	_var04, #7
25e88     03 0A 06 A6 |  if_e	mov	_var06, #3
25e8c                 | ' 			return 0xFFFFFFFF;
25e8c     01 FA 65 56 |  if_ne	neg	result1, #1
25e90     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
25e94                 | LR__3820
25e94                 | LR__3821
25e94                 | ' 		}
25e94                 | ' 		do {
25e94                 | LR__3822
25e94     02 0D C2 FA | 	rdbyte	_var07, _var03
25e98     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
25e9c     C0 08 06 F5 | 	and	_var05, #192
25ea0     80 08 0E F2 | 	cmp	_var05, #128 wz
25ea4     01 04 06 F1 | 	add	_var03, #1
25ea8     01 FA 65 56 |  if_ne	neg	result1, #1
25eac     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
25eb0     06 06 66 F0 | 	shl	_var04, #6
25eb4     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
25eb8     3F 02 06 F5 | 	and	_var02, #63
25ebc     01 07 42 F5 | 	or	_var04, _var02
25ec0     F4 0B 6E FB | 	djnz	_var06, #LR__3822
25ec4     80 06 16 F2 | 	cmp	_var04, #128 wc
25ec8     24 00 90 CD |  if_b	jmp	#LR__3824
25ecc     6C 00 00 FF 
25ed0     00 06 16 F2 | 	cmp	_var04, ##55296 wc
25ed4     0C 00 90 CD |  if_b	jmp	#LR__3823
25ed8     70 00 00 FF 
25edc     00 06 16 F2 | 	cmp	_var04, ##57344 wc
25ee0     0C 00 90 CD |  if_b	jmp	#LR__3824
25ee4                 | LR__3823
25ee4     80 08 00 FF 
25ee8     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
25eec     08 00 90 CD |  if_b	jmp	#LR__3825
25ef0                 | LR__3824
25ef0     01 FA 65 F6 | 	neg	result1, #1
25ef4     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
25ef8                 | LR__3825
25ef8     80 00 00 FF 
25efc     00 06 16 F2 | 	cmp	_var04, ##65536 wc
25f00     2C 00 90 CD |  if_b	jmp	#LR__3826
25f04     03 03 02 F6 | 	mov	_var02, _var04
25f08     80 00 00 FF 
25f0c     00 02 86 F1 | 	sub	_var02, ##65536
25f10     06 02 66 F0 | 	shl	_var02, #6
25f14     80 FF 01 FF 
25f18     00 02 06 F5 | 	and	_var02, ##67043328
25f1c     6E 00 6C FF 
25f20     00 08 06 F6 | 	mov	_var05, ##-671032320
25f24     01 09 42 F5 | 	or	_var05, _var02
25f28     09 06 46 F7 | 	zerox	_var04, #9
25f2c     04 07 42 F5 | 	or	_var04, _var05
25f30                 | LR__3826
25f30                 | LR__3827
25f30     09 05 62 FC | 	wrlong	_var03, arg01
25f34                 | ' 	}
25f34                 | ' #line 811 "ff.c"
25f34                 | ' 	*str = p;
25f34                 | ' 	return uc;
25f34     03 FB 01 F6 | 	mov	result1, _var04
25f38                 | _fatfs_cc_tchar2uni_ret
25f38     2D 00 64 FD | 	ret
25f3c                 | 
25f3c                 | _fatfs_cc_put_utf
25f3c     80 12 16 F2 | 	cmp	arg01, #128 wc
25f40     18 00 90 3D |  if_ae	jmp	#LR__3830
25f44     01 16 16 F2 | 	cmp	arg03, #1 wc
25f48     00 FA 05 C6 |  if_b	mov	result1, #0
25f4c     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
25f50     0A 13 42 FC | 	wrbyte	arg01, arg02
25f54                 | ' 		*buf = (TCHAR)chr;
25f54                 | ' 		return 1;
25f54     01 FA 05 F6 | 	mov	result1, #1
25f58     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
25f5c                 | LR__3830
25f5c     04 00 00 FF 
25f60     00 12 16 F2 | 	cmp	arg01, ##2048 wc
25f64     40 00 90 3D |  if_ae	jmp	#LR__3831
25f68     02 16 16 F2 | 	cmp	arg03, #2 wc
25f6c     00 FA 05 C6 |  if_b	mov	result1, #0
25f70     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
25f74     09 FB 01 F6 | 	mov	result1, arg01
25f78     06 FA 45 F0 | 	shr	result1, #6
25f7c     1F FA 05 F5 | 	and	result1, #31
25f80     C0 16 06 F6 | 	mov	arg03, #192
25f84     FD 16 42 F5 | 	or	arg03, result1
25f88     0A 17 42 FC | 	wrbyte	arg03, arg02
25f8c     01 14 06 F1 | 	add	arg02, #1
25f90     3F 12 06 F5 | 	and	arg01, #63
25f94     80 FA 05 F6 | 	mov	result1, #128
25f98     09 FB 41 F5 | 	or	result1, arg01
25f9c     0A FB 41 FC | 	wrbyte	result1, arg02
25fa0                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
25fa0                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
25fa0                 | ' 		return 2;
25fa0     02 FA 05 F6 | 	mov	result1, #2
25fa4     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
25fa8                 | LR__3831
25fa8     80 00 00 FF 
25fac     00 12 16 F2 | 	cmp	arg01, ##65536 wc
25fb0     70 00 90 3D |  if_ae	jmp	#LR__3834
25fb4     03 16 16 F2 | 	cmp	arg03, #3 wc
25fb8     18 00 90 CD |  if_b	jmp	#LR__3832
25fbc     6C 00 00 FF 
25fc0     00 12 16 F2 | 	cmp	arg01, ##55296 wc
25fc4     14 00 90 CD |  if_b	jmp	#LR__3833
25fc8     70 00 00 FF 
25fcc     00 12 16 F2 | 	cmp	arg01, ##57344 wc
25fd0     08 00 90 3D |  if_ae	jmp	#LR__3833
25fd4                 | LR__3832
25fd4     00 FA 05 F6 | 	mov	result1, #0
25fd8     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
25fdc                 | LR__3833
25fdc     09 FB 59 F8 | 	getnib	result1, arg01, #3
25fe0     E0 16 06 F6 | 	mov	arg03, #224
25fe4     FD 16 42 F5 | 	or	arg03, result1
25fe8     0A 17 42 FC | 	wrbyte	arg03, arg02
25fec     01 14 06 F1 | 	add	arg02, #1
25ff0     09 FB 01 F6 | 	mov	result1, arg01
25ff4     06 FA 45 F0 | 	shr	result1, #6
25ff8     3F FA 05 F5 | 	and	result1, #63
25ffc     80 16 06 F6 | 	mov	arg03, #128
26000     FD 16 42 F5 | 	or	arg03, result1
26004     0A 17 42 FC | 	wrbyte	arg03, arg02
26008     01 14 06 F1 | 	add	arg02, #1
2600c     3F 12 06 F5 | 	and	arg01, #63
26010     80 FA 05 F6 | 	mov	result1, #128
26014     09 FB 41 F5 | 	or	result1, arg01
26018     0A FB 41 FC | 	wrbyte	result1, arg02
2601c                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
2601c                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2601c                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2601c                 | ' 		return 3;
2601c     03 FA 05 F6 | 	mov	result1, #3
26020     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
26024                 | LR__3834
26024     04 16 16 F2 | 	cmp	arg03, #4 wc
26028     00 FA 05 C6 |  if_b	mov	result1, #0
2602c     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
26030     09 01 02 F6 | 	mov	_var01, arg01
26034     E0 01 06 F4 | 	bitl	_var01, #480
26038     00 00 6C FF 
2603c     00 00 86 F1 | 	sub	_var01, ##-671088640
26040     06 00 46 F0 | 	shr	_var01, #6
26044     09 13 32 F9 | 	getword	arg01, arg01, #0
26048     6E 00 00 FF 
2604c     00 12 86 F1 | 	sub	arg01, ##56320
26050     00 08 00 FF 
26054     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
26058     02 00 00 CF 
2605c     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
26060     00 FA 05 36 |  if_ae	mov	result1, #0
26064     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
26068     09 01 42 F5 | 	or	_var01, arg01
2606c     80 00 00 FF 
26070     00 00 06 F1 | 	add	_var01, ##65536
26074     00 FB 01 F6 | 	mov	result1, _var01
26078     12 FA 45 F0 | 	shr	result1, #18
2607c     07 FA 05 F5 | 	and	result1, #7
26080     F0 16 06 F6 | 	mov	arg03, #240
26084     FD 16 42 F5 | 	or	arg03, result1
26088     0A 17 42 FC | 	wrbyte	arg03, arg02
2608c     01 14 06 F1 | 	add	arg02, #1
26090     00 FB 01 F6 | 	mov	result1, _var01
26094     0C FA 45 F0 | 	shr	result1, #12
26098     3F FA 05 F5 | 	and	result1, #63
2609c     80 16 06 F6 | 	mov	arg03, #128
260a0     FD 16 42 F5 | 	or	arg03, result1
260a4     0A 17 42 FC | 	wrbyte	arg03, arg02
260a8     01 14 06 F1 | 	add	arg02, #1
260ac     00 FB 01 F6 | 	mov	result1, _var01
260b0     06 FA 45 F0 | 	shr	result1, #6
260b4     3F FA 05 F5 | 	and	result1, #63
260b8     80 16 06 F6 | 	mov	arg03, #128
260bc     FD 16 42 F5 | 	or	arg03, result1
260c0     0A 17 42 FC | 	wrbyte	arg03, arg02
260c4     01 14 06 F1 | 	add	arg02, #1
260c8     3F 00 06 F5 | 	and	_var01, #63
260cc     80 FA 05 F6 | 	mov	result1, #128
260d0     00 FB 41 F5 | 	or	result1, _var01
260d4     0A FB 41 FC | 	wrbyte	result1, arg02
260d8                 | ' 	chr = (hc | chr) + 0x10000;
260d8                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
260d8                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
260d8                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
260d8                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
260d8                 | ' 	return 4;
260d8     04 FA 05 F6 | 	mov	result1, #4
260dc                 | _fatfs_cc_put_utf_ret
260dc     2D 00 64 FD | 	ret
260e0                 | 
260e0                 | _fatfs_cc_sync_window
260e0     02 4A 05 F6 | 	mov	COUNT_, #2
260e4     A8 00 A0 FD | 	call	#pushregs_
260e8     09 1F 02 F6 | 	mov	local01, arg01
260ec     00 20 06 F6 | 	mov	local02, #0
260f0     03 1E 06 F1 | 	add	local01, #3
260f4     0F FB C9 FA | 	rdbyte	result1, local01 wz
260f8     03 1E 86 F1 | 	sub	local01, #3
260fc     A4 00 90 AD |  if_e	jmp	#LR__3842
26100     01 1E 06 F1 | 	add	local01, #1
26104     0F 13 C2 FA | 	rdbyte	arg01, local01
26108     33 1E 06 F1 | 	add	local01, #51
2610c     0F 15 02 F6 | 	mov	arg02, local01
26110     04 1E 86 F1 | 	sub	local01, #4
26114     0F 17 02 FB | 	rdlong	arg03, local01
26118     30 1E 86 F1 | 	sub	local01, #48
2611c     01 18 06 F6 | 	mov	arg04, #1
26120     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
26124     00 FA 0D F2 | 	cmp	result1, #0 wz
26128     74 00 90 5D |  if_ne	jmp	#LR__3840
2612c     03 1E 06 F1 | 	add	local01, #3
26130     0F 01 48 FC | 	wrbyte	#0, local01
26134     2D 1E 06 F1 | 	add	local01, #45
26138     0F FB 01 FB | 	rdlong	result1, local01
2613c     0C 1E 86 F1 | 	sub	local01, #12
26140     0F 19 02 FB | 	rdlong	arg04, local01
26144     0C FB 81 F1 | 	sub	result1, arg04
26148     08 1E 86 F1 | 	sub	local01, #8
2614c     0F 19 02 FB | 	rdlong	arg04, local01
26150     1C 1E 86 F1 | 	sub	local01, #28
26154     0C FB 11 F2 | 	cmp	result1, arg04 wc
26158     48 00 90 3D |  if_ae	jmp	#LR__3841
2615c     02 1E 06 F1 | 	add	local01, #2
26160     0F 19 C2 FA | 	rdbyte	arg04, local01
26164     02 1E 86 F1 | 	sub	local01, #2
26168     02 18 0E F2 | 	cmp	arg04, #2 wz
2616c     34 00 90 5D |  if_ne	jmp	#LR__3841
26170     01 1E 06 F1 | 	add	local01, #1
26174     0F 13 C2 FA | 	rdbyte	arg01, local01
26178     33 1E 06 F1 | 	add	local01, #51
2617c     0F 15 02 F6 | 	mov	arg02, local01
26180     04 1E 86 F1 | 	sub	local01, #4
26184     0F 17 02 FB | 	rdlong	arg03, local01
26188     14 1E 86 F1 | 	sub	local01, #20
2618c     0F 1F 02 FB | 	rdlong	local01, local01
26190     0F 17 02 F1 | 	add	arg03, local01
26194     01 18 06 F6 | 	mov	arg04, #1
26198     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
2619c     04 00 90 FD | 	jmp	#LR__3841
261a0                 | LR__3840
261a0     01 20 06 F6 | 	mov	local02, #1
261a4                 | LR__3841
261a4                 | LR__3842
261a4                 | ' 			res = FR_DISK_ERR;
261a4                 | ' 		}
261a4                 | ' 	}
261a4                 | ' 	return res;
261a4     10 FB 01 F6 | 	mov	result1, local02
261a8     A7 F0 03 F6 | 	mov	ptra, fp
261ac     B2 00 A0 FD | 	call	#popregs_
261b0                 | _fatfs_cc_sync_window_ret
261b0     2D 00 64 FD | 	ret
261b4                 | 
261b4                 | _fatfs_cc_move_window
261b4     03 4A 05 F6 | 	mov	COUNT_, #3
261b8     A8 00 A0 FD | 	call	#pushregs_
261bc     09 1F 02 F6 | 	mov	local01, arg01
261c0     0A 21 02 F6 | 	mov	local02, arg02
261c4     00 22 06 F6 | 	mov	local03, #0
261c8     30 1E 06 F1 | 	add	local01, #48
261cc     0F 19 02 FB | 	rdlong	arg04, local01
261d0     30 1E 86 F1 | 	sub	local01, #48
261d4     0C 21 0A F2 | 	cmp	local02, arg04 wz
261d8     40 00 90 AD |  if_e	jmp	#LR__3851
261dc     0F 13 02 F6 | 	mov	arg01, local01
261e0     FC FE BF FD | 	call	#_fatfs_cc_sync_window
261e4     FD 22 0A F6 | 	mov	local03, result1 wz
261e8     30 00 90 5D |  if_ne	jmp	#LR__3850
261ec     01 1E 06 F1 | 	add	local01, #1
261f0     0F 13 C2 FA | 	rdbyte	arg01, local01
261f4     33 1E 06 F1 | 	add	local01, #51
261f8     0F 15 02 F6 | 	mov	arg02, local01
261fc     10 17 02 F6 | 	mov	arg03, local02
26200     01 18 06 F6 | 	mov	arg04, #1
26204     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
26208     00 FA 0D F2 | 	cmp	result1, #0 wz
2620c     01 20 66 56 |  if_ne	neg	local02, #1
26210     01 22 06 56 |  if_ne	mov	local03, #1
26214     04 1E 86 F1 | 	sub	local01, #4
26218     0F 21 62 FC | 	wrlong	local02, local01
2621c                 | LR__3850
2621c                 | LR__3851
2621c                 | ' 				sect = (LBA_t)0 - 1;
2621c                 | ' 				res = FR_DISK_ERR;
2621c                 | ' 			}
2621c                 | ' 			fs->winsect = sect;
2621c                 | ' 		}
2621c                 | ' 	}
2621c                 | ' 	return res;
2621c     11 FB 01 F6 | 	mov	result1, local03
26220     A7 F0 03 F6 | 	mov	ptra, fp
26224     B2 00 A0 FD | 	call	#popregs_
26228                 | _fatfs_cc_move_window_ret
26228     2D 00 64 FD | 	ret
2622c                 | 
2622c                 | _fatfs_cc_sync_fs
2622c     02 4A 05 F6 | 	mov	COUNT_, #2
26230     A8 00 A0 FD | 	call	#pushregs_
26234     09 1F 02 F6 | 	mov	local01, arg01
26238     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
2623c     FD 20 0A F6 | 	mov	local02, result1 wz
26240     D8 00 90 5D |  if_ne	jmp	#LR__3861
26244     0F 19 C2 FA | 	rdbyte	arg04, local01
26248     03 18 0E F2 | 	cmp	arg04, #3 wz
2624c     04 1E 06 A1 |  if_e	add	local01, #4
26250     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
26254     04 1E 86 A1 |  if_e	sub	local01, #4
26258     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
2625c     A0 00 90 5D |  if_ne	jmp	#LR__3860
26260     34 1E 06 F1 | 	add	local01, #52
26264     0F 13 02 F6 | 	mov	arg01, local01
26268     00 14 06 F6 | 	mov	arg02, #0
2626c     09 16 C6 F9 | 	decod	arg03, #9
26270     98 00 A0 FD | 	call	#\builtin_bytefill_
26274     0F 13 02 F6 | 	mov	arg01, local01
26278     FE 13 06 F1 | 	add	arg01, #510
2627c     55 00 80 FF 
26280     09 AB 58 FC | 	wrword	##43605, arg01
26284     A9 B0 A0 FF 
26288     0F A5 68 FC | 	wrlong	##1096897106, local01
2628c     0F 13 02 F6 | 	mov	arg01, local01
26290     E4 13 06 F1 | 	add	arg01, #484
26294     B9 A0 B0 FF 
26298     09 E5 68 FC | 	wrlong	##1631679090, arg01
2629c     0F 13 02 F6 | 	mov	arg01, local01
262a0     E8 13 06 F1 | 	add	arg01, #488
262a4     20 1E 86 F1 | 	sub	local01, #32
262a8     0F 15 02 FB | 	rdlong	arg02, local01
262ac     09 15 62 FC | 	wrlong	arg02, arg01
262b0     20 1E 06 F1 | 	add	local01, #32
262b4     0F 13 02 F6 | 	mov	arg01, local01
262b8     EC 13 06 F1 | 	add	arg01, #492
262bc     24 1E 86 F1 | 	sub	local01, #36
262c0     0F 15 02 FB | 	rdlong	arg02, local01
262c4     09 15 62 FC | 	wrlong	arg02, arg01
262c8     10 1E 06 F1 | 	add	local01, #16
262cc     0F 17 02 FB | 	rdlong	arg03, local01
262d0     01 16 06 F1 | 	add	arg03, #1
262d4     10 1E 06 F1 | 	add	local01, #16
262d8     0F 17 62 FC | 	wrlong	arg03, local01
262dc     2F 1E 86 F1 | 	sub	local01, #47
262e0     0F 13 C2 FA | 	rdbyte	arg01, local01
262e4     33 1E 06 F1 | 	add	local01, #51
262e8     0F 15 02 F6 | 	mov	arg02, local01
262ec     01 18 06 F6 | 	mov	arg04, #1
262f0     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
262f4     30 1E 86 F1 | 	sub	local01, #48
262f8     0F 01 48 FC | 	wrbyte	#0, local01
262fc     04 1E 86 F1 | 	sub	local01, #4
26300                 | LR__3860
26300     01 1E 06 F1 | 	add	local01, #1
26304     0F 13 C2 FA | 	rdbyte	arg01, local01
26308     00 14 06 F6 | 	mov	arg02, #0
2630c     00 16 06 F6 | 	mov	arg03, #0
26310     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
26314     00 FA 0D F2 | 	cmp	result1, #0 wz
26318     01 20 06 56 |  if_ne	mov	local02, #1
2631c                 | LR__3861
2631c                 | ' 	}
2631c                 | ' 
2631c                 | ' 	return res;
2631c     10 FB 01 F6 | 	mov	result1, local02
26320     A7 F0 03 F6 | 	mov	ptra, fp
26324     B2 00 A0 FD | 	call	#popregs_
26328                 | _fatfs_cc_sync_fs_ret
26328     2D 00 64 FD | 	ret
2632c                 | 
2632c                 | _fatfs_cc_clst2sect
2632c     02 14 86 F1 | 	sub	arg02, #2
26330     18 12 06 F1 | 	add	arg01, #24
26334     09 01 02 FB | 	rdlong	_var01, arg01
26338     18 12 86 F1 | 	sub	arg01, #24
2633c     02 00 86 F1 | 	sub	_var01, #2
26340     00 15 12 F2 | 	cmp	arg02, _var01 wc
26344     00 FA 05 36 |  if_ae	mov	result1, #0
26348     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
2634c     0A 12 06 F1 | 	add	arg01, #10
26350     09 01 E2 FA | 	rdword	_var01, arg01
26354     0A 01 02 FD | 	qmul	_var01, arg02
26358                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
26358     22 12 06 F1 | 	add	arg01, #34
2635c     09 FB 01 FB | 	rdlong	result1, arg01
26360     18 00 62 FD | 	getqx	_var01
26364     00 FB 01 F1 | 	add	result1, _var01
26368                 | _fatfs_cc_clst2sect_ret
26368     2D 00 64 FD | 	ret
2636c                 | 
2636c                 | _fatfs_cc_get_fat
2636c     07 4A 05 F6 | 	mov	COUNT_, #7
26370     A8 00 A0 FD | 	call	#pushregs_
26374     0A 1F 02 F6 | 	mov	local01, arg02
26378     09 21 02 FB | 	rdlong	local02, arg01
2637c     02 1E 16 F2 | 	cmp	local01, #2 wc
26380     14 00 90 CD |  if_b	jmp	#LR__3870
26384     18 20 06 F1 | 	add	local02, #24
26388     10 23 02 FB | 	rdlong	local03, local02
2638c     18 20 86 F1 | 	sub	local02, #24
26390     11 1F 12 F2 | 	cmp	local01, local03 wc
26394     08 00 90 CD |  if_b	jmp	#LR__3871
26398                 | LR__3870
26398     01 24 06 F6 | 	mov	local04, #1
2639c     60 01 90 FD | 	jmp	#LR__3878
263a0                 | LR__3871
263a0     01 24 66 F6 | 	neg	local04, #1
263a4                 | ' 		val = 0xFFFFFFFF;
263a4                 | ' 
263a4                 | ' 		switch (fs->fs_type) {
263a4     10 27 C2 FA | 	rdbyte	local05, local02
263a8     01 26 86 F1 | 	sub	local05, #1
263ac     03 26 26 F3 | 	fle	local05, #3
263b0     30 26 62 FD | 	jmprel	local05
263b4                 | LR__3872
263b4     0C 00 90 FD | 	jmp	#LR__3873
263b8     B8 00 90 FD | 	jmp	#LR__3874
263bc     F8 00 90 FD | 	jmp	#LR__3875
263c0     38 01 90 FD | 	jmp	#LR__3876
263c4                 | LR__3873
263c4     0F 27 02 F6 | 	mov	local05, local01
263c8     0F 13 02 F6 | 	mov	arg01, local01
263cc     01 12 46 F0 | 	shr	arg01, #1
263d0     09 27 02 F1 | 	add	local05, arg01
263d4     10 13 02 F6 | 	mov	arg01, local02
263d8     13 29 02 F6 | 	mov	local06, local05
263dc     09 28 46 F0 | 	shr	local06, #9
263e0     24 20 06 F1 | 	add	local02, #36
263e4     10 15 02 FB | 	rdlong	arg02, local02
263e8     24 20 86 F1 | 	sub	local02, #36
263ec     14 15 02 F1 | 	add	arg02, local06
263f0     C0 FD BF FD | 	call	#_fatfs_cc_move_window
263f4     00 FA 0D F2 | 	cmp	result1, #0 wz
263f8     04 01 90 5D |  if_ne	jmp	#LR__3877
263fc     13 29 02 F6 | 	mov	local06, local05
26400     FF 29 06 F5 | 	and	local06, #511
26404     34 20 06 F1 | 	add	local02, #52
26408     10 29 02 F1 | 	add	local06, local02
2640c     14 2B C2 FA | 	rdbyte	local07, local06
26410     34 20 86 F1 | 	sub	local02, #52
26414     10 13 02 F6 | 	mov	arg01, local02
26418     01 26 06 F1 | 	add	local05, #1
2641c     13 29 02 F6 | 	mov	local06, local05
26420     09 28 46 F0 | 	shr	local06, #9
26424     24 20 06 F1 | 	add	local02, #36
26428     10 15 02 FB | 	rdlong	arg02, local02
2642c     24 20 86 F1 | 	sub	local02, #36
26430     14 15 02 F1 | 	add	arg02, local06
26434     7C FD BF FD | 	call	#_fatfs_cc_move_window
26438     00 FA 0D F2 | 	cmp	result1, #0 wz
2643c     C0 00 90 5D |  if_ne	jmp	#LR__3877
26440     FF 27 06 F5 | 	and	local05, #511
26444     34 20 06 F1 | 	add	local02, #52
26448     10 27 02 F1 | 	add	local05, local02
2644c     13 29 C2 FA | 	rdbyte	local06, local05
26450     08 28 66 F0 | 	shl	local06, #8
26454     14 2B 42 F5 | 	or	local07, local06
26458     01 1E CE F7 | 	test	local01, #1 wz
2645c     04 2A 46 50 |  if_ne	shr	local07, #4
26460     15 23 02 56 |  if_ne	mov	local03, local07
26464     0B 2A 46 A7 |  if_e	zerox	local07, #11
26468     15 23 02 A6 |  if_e	mov	local03, local07
2646c     11 25 02 F6 | 	mov	local04, local03
26470                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
26470                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
26470                 | ' 			break;
26470     8C 00 90 FD | 	jmp	#LR__3877
26474                 | LR__3874
26474     10 13 02 F6 | 	mov	arg01, local02
26478     0F 29 02 F6 | 	mov	local06, local01
2647c     08 28 46 F0 | 	shr	local06, #8
26480     24 20 06 F1 | 	add	local02, #36
26484     10 15 02 FB | 	rdlong	arg02, local02
26488     24 20 86 F1 | 	sub	local02, #36
2648c     14 15 02 F1 | 	add	arg02, local06
26490     20 FD BF FD | 	call	#_fatfs_cc_move_window
26494     00 FA 0D F2 | 	cmp	result1, #0 wz
26498     64 00 90 5D |  if_ne	jmp	#LR__3877
2649c     34 20 06 F1 | 	add	local02, #52
264a0     01 1E 66 F0 | 	shl	local01, #1
264a4     FF 1F 06 F5 | 	and	local01, #511
264a8     0F 21 02 F1 | 	add	local02, local01
264ac                 | ' {
264ac                 | ' 
264ac                 | ' 	return *((WORD*)ptr);
264ac     10 FB E1 FA | 	rdword	result1, local02
264b0     FD 24 32 F9 | 	getword	local04, result1, #0
264b4                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
264b4                 | ' 			break;
264b4     48 00 90 FD | 	jmp	#LR__3877
264b8                 | LR__3875
264b8     10 13 02 F6 | 	mov	arg01, local02
264bc     0F 29 02 F6 | 	mov	local06, local01
264c0     07 28 46 F0 | 	shr	local06, #7
264c4     24 20 06 F1 | 	add	local02, #36
264c8     10 15 02 FB | 	rdlong	arg02, local02
264cc     24 20 86 F1 | 	sub	local02, #36
264d0     14 15 02 F1 | 	add	arg02, local06
264d4     DC FC BF FD | 	call	#_fatfs_cc_move_window
264d8     00 FA 0D F2 | 	cmp	result1, #0 wz
264dc     20 00 90 5D |  if_ne	jmp	#LR__3877
264e0     34 20 06 F1 | 	add	local02, #52
264e4     02 1E 66 F0 | 	shl	local01, #2
264e8     FF 1F 06 F5 | 	and	local01, #511
264ec     0F 21 02 F1 | 	add	local02, local01
264f0                 | ' {
264f0                 | ' 
264f0                 | ' 	return *((DWORD*)ptr);
264f0     10 25 02 FB | 	rdlong	local04, local02
264f4     7C 24 06 F4 | 	bitl	local04, #124
264f8                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
264f8                 | ' 			break;
264f8     04 00 90 FD | 	jmp	#LR__3877
264fc                 | LR__3876
264fc     01 24 06 F6 | 	mov	local04, #1
26500                 | LR__3877
26500                 | LR__3878
26500                 | ' 			val = 1;
26500                 | ' 		}
26500                 | ' 	}
26500                 | ' 
26500                 | ' 	return val;
26500     12 FB 01 F6 | 	mov	result1, local04
26504     A7 F0 03 F6 | 	mov	ptra, fp
26508     B2 00 A0 FD | 	call	#popregs_
2650c                 | _fatfs_cc_get_fat_ret
2650c     2D 00 64 FD | 	ret
26510                 | 
26510                 | _fatfs_cc_put_fat
26510     08 4A 05 F6 | 	mov	COUNT_, #8
26514     A8 00 A0 FD | 	call	#pushregs_
26518     09 1F 02 F6 | 	mov	local01, arg01
2651c     0A 21 02 F6 | 	mov	local02, arg02
26520     0B 23 02 F6 | 	mov	local03, arg03
26524     02 24 06 F6 | 	mov	local04, #2
26528     02 20 16 F2 | 	cmp	local02, #2 wc
2652c     E0 01 90 CD |  if_b	jmp	#LR__3887
26530     18 1E 06 F1 | 	add	local01, #24
26534     0F 27 02 FB | 	rdlong	local05, local01
26538     18 1E 86 F1 | 	sub	local01, #24
2653c     13 21 12 F2 | 	cmp	local02, local05 wc
26540     CC 01 90 3D |  if_ae	jmp	#LR__3887
26544                 | ' 		switch (fs->fs_type) {
26544     0F 29 C2 FA | 	rdbyte	local06, local01
26548     01 28 86 F1 | 	sub	local06, #1
2654c     03 28 26 F3 | 	fle	local06, #3
26550     30 28 62 FD | 	jmprel	local06
26554                 | LR__3880
26554     0C 00 90 FD | 	jmp	#LR__3881
26558     F8 00 90 FD | 	jmp	#LR__3884
2655c     40 01 90 FD | 	jmp	#LR__3885
26560     AC 01 90 FD | 	jmp	#LR__3886
26564                 | LR__3881
26564     10 2B 02 F6 | 	mov	local07, local02
26568     10 27 02 F6 | 	mov	local05, local02
2656c     01 26 46 F0 | 	shr	local05, #1
26570     13 2B 02 F1 | 	add	local07, local05
26574     0F 13 02 F6 | 	mov	arg01, local01
26578     15 29 02 F6 | 	mov	local06, local07
2657c     09 28 46 F0 | 	shr	local06, #9
26580     24 1E 06 F1 | 	add	local01, #36
26584     0F 15 02 FB | 	rdlong	arg02, local01
26588     24 1E 86 F1 | 	sub	local01, #36
2658c     14 15 02 F1 | 	add	arg02, local06
26590     20 FC BF FD | 	call	#_fatfs_cc_move_window
26594     FD 24 0A F6 | 	mov	local04, result1 wz
26598     74 01 90 5D |  if_ne	jmp	#LR__3886
2659c     34 1E 06 F1 | 	add	local01, #52
265a0     0F 2D 02 F6 | 	mov	local08, local01
265a4     15 27 02 F6 | 	mov	local05, local07
265a8     FF 27 06 F5 | 	and	local05, #511
265ac     13 2D 02 F1 | 	add	local08, local05
265b0     01 20 CE F7 | 	test	local02, #1 wz
265b4     34 1E 86 F1 | 	sub	local01, #52
265b8     01 2A 06 F1 | 	add	local07, #1
265bc     18 00 90 AD |  if_e	jmp	#LR__3882
265c0     16 27 C2 FA | 	rdbyte	local05, local08
265c4     13 27 42 F8 | 	getnib	local05, local05, #0
265c8     11 29 E2 F8 | 	getbyte	local06, local03, #0
265cc     04 28 66 F0 | 	shl	local06, #4
265d0     14 27 42 F5 | 	or	local05, local06
265d4     04 00 90 FD | 	jmp	#LR__3883
265d8                 | LR__3882
265d8     11 27 02 F6 | 	mov	local05, local03
265dc                 | LR__3883
265dc     16 27 42 FC | 	wrbyte	local05, local08
265e0     03 1E 06 F1 | 	add	local01, #3
265e4     0F 03 48 FC | 	wrbyte	#1, local01
265e8     03 1E 86 F1 | 	sub	local01, #3
265ec     0F 13 02 F6 | 	mov	arg01, local01
265f0     15 2D 02 F6 | 	mov	local08, local07
265f4     09 2C 46 F0 | 	shr	local08, #9
265f8     24 1E 06 F1 | 	add	local01, #36
265fc     0F 15 02 FB | 	rdlong	arg02, local01
26600     24 1E 86 F1 | 	sub	local01, #36
26604     16 15 02 F1 | 	add	arg02, local08
26608     A8 FB BF FD | 	call	#_fatfs_cc_move_window
2660c     FD 24 0A F6 | 	mov	local04, result1 wz
26610     FC 00 90 5D |  if_ne	jmp	#LR__3886
26614     34 1E 06 F1 | 	add	local01, #52
26618     0F 2D 02 F6 | 	mov	local08, local01
2661c     FF 2B 06 F5 | 	and	local07, #511
26620     15 2D 02 F1 | 	add	local08, local07
26624     01 20 CE F7 | 	test	local02, #1 wz
26628     04 22 46 50 |  if_ne	shr	local03, #4
2662c     11 27 02 56 |  if_ne	mov	local05, local03
26630     16 27 C2 AA |  if_e	rdbyte	local05, local08
26634     F0 26 06 A5 |  if_e	and	local05, #240
26638     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
2663c     11 23 42 A8 |  if_e	getnib	local03, local03, #0
26640     11 27 42 A5 |  if_e	or	local05, local03
26644     16 27 42 FC | 	wrbyte	local05, local08
26648     31 1E 86 F1 | 	sub	local01, #49
2664c     0F 03 48 FC | 	wrbyte	#1, local01
26650                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
26650                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
26650                 | ' 			fs->wflag = 1;
26650                 | ' 			break;
26650     BC 00 90 FD | 	jmp	#LR__3886
26654                 | LR__3884
26654     0F 13 02 F6 | 	mov	arg01, local01
26658     10 2D 02 F6 | 	mov	local08, local02
2665c     08 2C 46 F0 | 	shr	local08, #8
26660     24 1E 06 F1 | 	add	local01, #36
26664     0F 15 02 FB | 	rdlong	arg02, local01
26668     24 1E 86 F1 | 	sub	local01, #36
2666c     16 15 02 F1 | 	add	arg02, local08
26670     40 FB BF FD | 	call	#_fatfs_cc_move_window
26674     FD 24 0A F6 | 	mov	local04, result1 wz
26678     94 00 90 5D |  if_ne	jmp	#LR__3886
2667c     34 1E 06 F1 | 	add	local01, #52
26680     0F 13 02 F6 | 	mov	arg01, local01
26684     01 20 66 F0 | 	shl	local02, #1
26688     FF 21 06 F5 | 	and	local02, #511
2668c     10 13 02 F1 | 	add	arg01, local02
26690     09 23 52 FC | 	wrword	local03, arg01
26694     31 1E 86 F1 | 	sub	local01, #49
26698     0F 03 48 FC | 	wrbyte	#1, local01
2669c                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
2669c                 | ' 			fs->wflag = 1;
2669c                 | ' 			break;
2669c     70 00 90 FD | 	jmp	#LR__3886
266a0                 | LR__3885
266a0     0F 13 02 F6 | 	mov	arg01, local01
266a4     10 2D 02 F6 | 	mov	local08, local02
266a8     07 2C 46 F0 | 	shr	local08, #7
266ac     24 1E 06 F1 | 	add	local01, #36
266b0     0F 15 02 FB | 	rdlong	arg02, local01
266b4     24 1E 86 F1 | 	sub	local01, #36
266b8     16 15 02 F1 | 	add	arg02, local08
266bc     F4 FA BF FD | 	call	#_fatfs_cc_move_window
266c0     FD 24 0A F6 | 	mov	local04, result1 wz
266c4     48 00 90 5D |  if_ne	jmp	#LR__3886
266c8     7C 22 06 F4 | 	bitl	local03, #124
266cc     34 1E 06 F1 | 	add	local01, #52
266d0     10 2D 02 F6 | 	mov	local08, local02
266d4     02 2C 66 F0 | 	shl	local08, #2
266d8     FF 2D 06 F5 | 	and	local08, #511
266dc     0F 13 02 F6 | 	mov	arg01, local01
266e0     16 13 02 F1 | 	add	arg01, local08
266e4                 | ' {
266e4                 | ' 
266e4                 | ' 	return *((DWORD*)ptr);
266e4     09 2D 02 FB | 	rdlong	local08, arg01
266e8     00 00 78 FF 
266ec     00 2C 06 F5 | 	and	local08, ##-268435456
266f0     16 23 42 F5 | 	or	local03, local08
266f4     0F 13 02 F6 | 	mov	arg01, local01
266f8     02 20 66 F0 | 	shl	local02, #2
266fc     FF 21 06 F5 | 	and	local02, #511
26700     10 13 02 F1 | 	add	arg01, local02
26704     09 23 62 FC | 	wrlong	local03, arg01
26708     31 1E 86 F1 | 	sub	local01, #49
2670c     0F 03 48 FC | 	wrbyte	#1, local01
26710                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
26710                 | ' 			}
26710                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
26710                 | ' 			fs->wflag = 1;
26710                 | ' 			break;
26710                 | LR__3886
26710                 | LR__3887
26710                 | ' 		}
26710                 | ' 	}
26710                 | ' 	return res;
26710     12 FB 01 F6 | 	mov	result1, local04
26714     A7 F0 03 F6 | 	mov	ptra, fp
26718     B2 00 A0 FD | 	call	#popregs_
2671c                 | _fatfs_cc_put_fat_ret
2671c     2D 00 64 FD | 	ret
26720                 | 
26720                 | _fatfs_cc_remove_chain
26720     05 4A 05 F6 | 	mov	COUNT_, #5
26724     A8 00 A0 FD | 	call	#pushregs_
26728     09 1F 02 F6 | 	mov	local01, arg01
2672c     0A 21 02 F6 | 	mov	local02, arg02
26730     0B 23 02 F6 | 	mov	local03, arg03
26734     0F 25 02 FB | 	rdlong	local04, local01
26738     02 20 16 F2 | 	cmp	local02, #2 wc
2673c     14 00 90 CD |  if_b	jmp	#LR__3890
26740     18 24 06 F1 | 	add	local04, #24
26744     12 FB 01 FB | 	rdlong	result1, local04
26748     18 24 86 F1 | 	sub	local04, #24
2674c     FD 20 12 F2 | 	cmp	local02, result1 wc
26750     08 00 90 CD |  if_b	jmp	#LR__3891
26754                 | LR__3890
26754     02 FA 05 F6 | 	mov	result1, #2
26758     CC 00 90 FD | 	jmp	#LR__3896
2675c                 | LR__3891
2675c     00 22 0E F2 | 	cmp	local03, #0 wz
26760     18 00 90 AD |  if_e	jmp	#LR__3892
26764     11 15 02 F6 | 	mov	arg02, local03
26768     12 13 02 F6 | 	mov	arg01, local04
2676c     01 16 66 F6 | 	neg	arg03, #1
26770     9C FD BF FD | 	call	#_fatfs_cc_put_fat
26774     00 FA 0D F2 | 	cmp	result1, #0 wz
26778     AC 00 90 5D |  if_ne	jmp	#LR__3896
2677c                 | LR__3892
2677c                 | ' 	}
2677c                 | ' 
2677c                 | ' 
2677c                 | ' 	do {
2677c                 | LR__3893
2677c     10 15 02 F6 | 	mov	arg02, local02
26780     0F 13 02 F6 | 	mov	arg01, local01
26784     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
26788     FD 26 0A F6 | 	mov	local05, result1 wz
2678c     94 00 90 AD |  if_e	jmp	#LR__3895
26790     01 26 0E F2 | 	cmp	local05, #1 wz
26794     02 FA 05 A6 |  if_e	mov	result1, #2
26798     8C 00 90 AD |  if_e	jmp	#LR__3896
2679c     FF FF 7F FF 
267a0     FF 27 0E F2 | 	cmp	local05, ##-1 wz
267a4     01 FA 05 A6 |  if_e	mov	result1, #1
267a8     7C 00 90 AD |  if_e	jmp	#LR__3896
267ac     10 15 02 F6 | 	mov	arg02, local02
267b0     12 13 02 F6 | 	mov	arg01, local04
267b4     00 16 06 F6 | 	mov	arg03, #0
267b8     54 FD BF FD | 	call	#_fatfs_cc_put_fat
267bc     FD 22 0A F6 | 	mov	local03, result1 wz
267c0     11 FB 01 56 |  if_ne	mov	result1, local03
267c4     60 00 90 5D |  if_ne	jmp	#LR__3896
267c8     18 24 06 F1 | 	add	local04, #24
267cc     12 23 02 FB | 	rdlong	local03, local04
267d0     02 22 86 F1 | 	sub	local03, #2
267d4     04 24 86 F1 | 	sub	local04, #4
267d8     12 21 02 FB | 	rdlong	local02, local04
267dc     14 24 86 F1 | 	sub	local04, #20
267e0     11 21 12 F2 | 	cmp	local02, local03 wc
267e4     24 00 90 3D |  if_ae	jmp	#LR__3894
267e8     14 24 06 F1 | 	add	local04, #20
267ec     12 23 02 FB | 	rdlong	local03, local04
267f0     01 22 06 F1 | 	add	local03, #1
267f4     12 23 62 FC | 	wrlong	local03, local04
267f8     10 24 86 F1 | 	sub	local04, #16
267fc     12 23 C2 FA | 	rdbyte	local03, local04
26800     01 22 46 F5 | 	or	local03, #1
26804     12 23 42 FC | 	wrbyte	local03, local04
26808     04 24 86 F1 | 	sub	local04, #4
2680c                 | LR__3894
2680c     13 21 02 F6 | 	mov	local02, local05
26810     18 24 06 F1 | 	add	local04, #24
26814     12 27 02 FB | 	rdlong	local05, local04
26818     18 24 86 F1 | 	sub	local04, #24
2681c     13 21 12 F2 | 	cmp	local02, local05 wc
26820     58 FF 9F CD |  if_b	jmp	#LR__3893
26824                 | LR__3895
26824                 | ' #line 1500 "ff.c"
26824                 | ' 	return FR_OK;
26824     00 FA 05 F6 | 	mov	result1, #0
26828                 | LR__3896
26828     A7 F0 03 F6 | 	mov	ptra, fp
2682c     B2 00 A0 FD | 	call	#popregs_
26830                 | _fatfs_cc_remove_chain_ret
26830     2D 00 64 FD | 	ret
26834                 | 
26834                 | _fatfs_cc_create_chain
26834     09 4A 05 F6 | 	mov	COUNT_, #9
26838     A8 00 A0 FD | 	call	#pushregs_
2683c     09 1F 02 F6 | 	mov	local01, arg01
26840     0A 21 0A F6 | 	mov	local02, arg02 wz
26844     0F 23 02 FB | 	rdlong	local03, local01
26848     28 00 90 5D |  if_ne	jmp	#LR__3900
2684c     10 22 06 F1 | 	add	local03, #16
26850     11 25 0A FB | 	rdlong	local04, local03 wz
26854     10 22 86 F1 | 	sub	local03, #16
26858     18 22 06 51 |  if_ne	add	local03, #24
2685c     11 27 02 5B |  if_ne	rdlong	local05, local03
26860     18 22 86 51 |  if_ne	sub	local03, #24
26864     13 25 12 52 |  if_ne	cmp	local04, local05 wc
26868     50 00 90 4D |  if_c_and_nz	jmp	#LR__3901
2686c     01 24 06 F6 | 	mov	local04, #1
26870     48 00 90 FD | 	jmp	#LR__3901
26874                 | LR__3900
26874     10 15 02 F6 | 	mov	arg02, local02
26878     0F 13 02 F6 | 	mov	arg01, local01
2687c     EC FA BF FD | 	call	#_fatfs_cc_get_fat
26880     FD 24 02 F6 | 	mov	local04, result1
26884     02 24 16 F2 | 	cmp	local04, #2 wc
26888     01 FA 05 C6 |  if_b	mov	result1, #1
2688c     BC 01 90 CD |  if_b	jmp	#LR__3911
26890     FF FF 7F FF 
26894     FF 25 0E F2 | 	cmp	local04, ##-1 wz
26898     12 FB 01 A6 |  if_e	mov	result1, local04
2689c     AC 01 90 AD |  if_e	jmp	#LR__3911
268a0     18 22 06 F1 | 	add	local03, #24
268a4     11 27 02 FB | 	rdlong	local05, local03
268a8     18 22 86 F1 | 	sub	local03, #24
268ac     13 25 12 F2 | 	cmp	local04, local05 wc
268b0     12 FB 01 C6 |  if_b	mov	result1, local04
268b4     94 01 90 CD |  if_b	jmp	#LR__3911
268b8     10 25 02 F6 | 	mov	local04, local02
268bc                 | LR__3901
268bc     14 22 06 F1 | 	add	local03, #20
268c0     11 27 0A FB | 	rdlong	local05, local03 wz
268c4     14 22 86 F1 | 	sub	local03, #20
268c8     00 FA 05 A6 |  if_e	mov	result1, #0
268cc     7C 01 90 AD |  if_e	jmp	#LR__3911
268d0     00 28 06 F6 | 	mov	local06, #0
268d4     10 25 0A F2 | 	cmp	local04, local02 wz
268d8     74 00 90 5D |  if_ne	jmp	#LR__3904
268dc     12 29 02 F6 | 	mov	local06, local04
268e0     01 28 06 F1 | 	add	local06, #1
268e4     18 22 06 F1 | 	add	local03, #24
268e8     11 27 02 FB | 	rdlong	local05, local03
268ec     18 22 86 F1 | 	sub	local03, #24
268f0     13 29 12 F2 | 	cmp	local06, local05 wc
268f4     02 28 06 36 |  if_ae	mov	local06, #2
268f8     14 15 02 F6 | 	mov	arg02, local06
268fc     0F 13 02 F6 | 	mov	arg01, local01
26900     68 FA BF FD | 	call	#_fatfs_cc_get_fat
26904     FD 26 02 F6 | 	mov	local05, result1
26908     01 26 0E F2 | 	cmp	local05, #1 wz
2690c     FF FF 7F 5F 
26910     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
26914     13 FB 01 A6 |  if_e	mov	result1, local05
26918     30 01 90 AD |  if_e	jmp	#LR__3911
2691c     00 26 0E F2 | 	cmp	local05, #0 wz
26920     2C 00 90 AD |  if_e	jmp	#LR__3903
26924     10 22 06 F1 | 	add	local03, #16
26928     11 2B 02 FB | 	rdlong	local07, local03
2692c     10 22 86 F1 | 	sub	local03, #16
26930     02 2A 16 F2 | 	cmp	local07, #2 wc
26934     14 00 90 CD |  if_b	jmp	#LR__3902
26938     18 22 06 F1 | 	add	local03, #24
2693c     11 27 02 FB | 	rdlong	local05, local03
26940     18 22 86 F1 | 	sub	local03, #24
26944     13 2B 12 F2 | 	cmp	local07, local05 wc
26948     15 25 02 C6 |  if_b	mov	local04, local07
2694c                 | LR__3902
2694c     00 28 06 F6 | 	mov	local06, #0
26950                 | LR__3903
26950                 | LR__3904
26950     00 28 0E F2 | 	cmp	local06, #0 wz
26954     60 00 90 5D |  if_ne	jmp	#LR__3907
26958     12 29 02 F6 | 	mov	local06, local04
2695c                 | ' 			ncl = scl;
2695c                 | ' 			for (;;) {
2695c                 | LR__3905
2695c     01 28 06 F1 | 	add	local06, #1
26960     18 22 06 F1 | 	add	local03, #24
26964     11 27 02 FB | 	rdlong	local05, local03
26968     18 22 86 F1 | 	sub	local03, #24
2696c     13 29 12 F2 | 	cmp	local06, local05 wc
26970     02 28 06 36 |  if_ae	mov	local06, #2
26974     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
26978     00 FA 05 16 |  if_a	mov	result1, #0
2697c     CC 00 90 1D |  if_a	jmp	#LR__3911
26980     14 15 02 F6 | 	mov	arg02, local06
26984     0F 13 02 F6 | 	mov	arg01, local01
26988     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
2698c     FD 2A 0A F6 | 	mov	local07, result1 wz
26990     24 00 90 AD |  if_e	jmp	#LR__3906
26994     01 2A 0E F2 | 	cmp	local07, #1 wz
26998     FF FF 7F 5F 
2699c     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
269a0     15 FB 01 A6 |  if_e	mov	result1, local07
269a4     A4 00 90 AD |  if_e	jmp	#LR__3911
269a8     12 29 0A F2 | 	cmp	local06, local04 wz
269ac     00 FA 05 A6 |  if_e	mov	result1, #0
269b0     98 00 90 AD |  if_e	jmp	#LR__3911
269b4     A4 FF 9F FD | 	jmp	#LR__3905
269b8                 | LR__3906
269b8                 | LR__3907
269b8     11 13 02 F6 | 	mov	arg01, local03
269bc     14 15 02 F6 | 	mov	arg02, local06
269c0     01 16 66 F6 | 	neg	arg03, #1
269c4     48 FB BF FD | 	call	#_fatfs_cc_put_fat
269c8     FD 2C 0A F6 | 	mov	local08, result1 wz
269cc     1C 00 90 5D |  if_ne	jmp	#LR__3908
269d0     00 20 0E F2 | 	cmp	local02, #0 wz
269d4     14 00 90 AD |  if_e	jmp	#LR__3908
269d8     11 13 02 F6 | 	mov	arg01, local03
269dc     10 15 02 F6 | 	mov	arg02, local02
269e0     14 17 02 F6 | 	mov	arg03, local06
269e4     28 FB BF FD | 	call	#_fatfs_cc_put_fat
269e8     FD 2C 02 F6 | 	mov	local08, result1
269ec                 | LR__3908
269ec     00 2C 0E F2 | 	cmp	local08, #0 wz
269f0     4C 00 90 5D |  if_ne	jmp	#LR__3909
269f4     10 22 06 F1 | 	add	local03, #16
269f8     11 29 62 FC | 	wrlong	local06, local03
269fc     08 22 06 F1 | 	add	local03, #8
26a00     11 27 02 FB | 	rdlong	local05, local03
26a04     02 26 86 F1 | 	sub	local05, #2
26a08     04 22 86 F1 | 	sub	local03, #4
26a0c     11 2F 02 FB | 	rdlong	local09, local03
26a10     14 22 86 F1 | 	sub	local03, #20
26a14     13 2F 1A F2 | 	cmp	local09, local05 wcz
26a18     14 22 06 E1 |  if_be	add	local03, #20
26a1c     11 2F 02 EB |  if_be	rdlong	local09, local03
26a20     01 2E 86 E1 |  if_be	sub	local09, #1
26a24     11 2F 62 EC |  if_be	wrlong	local09, local03
26a28     14 22 86 E1 |  if_be	sub	local03, #20
26a2c     04 22 06 F1 | 	add	local03, #4
26a30     11 27 C2 FA | 	rdbyte	local05, local03
26a34     01 26 46 F5 | 	or	local05, #1
26a38     11 27 42 FC | 	wrbyte	local05, local03
26a3c     08 00 90 FD | 	jmp	#LR__3910
26a40                 | LR__3909
26a40     01 2C 0E F2 | 	cmp	local08, #1 wz
26a44     01 28 C6 F6 | 	negz	local06, #1
26a48                 | LR__3910
26a48                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
26a48                 | ' 	}
26a48                 | ' 
26a48                 | ' 	return ncl;
26a48     14 FB 01 F6 | 	mov	result1, local06
26a4c                 | LR__3911
26a4c     A7 F0 03 F6 | 	mov	ptra, fp
26a50     B2 00 A0 FD | 	call	#popregs_
26a54                 | _fatfs_cc_create_chain_ret
26a54     2D 00 64 FD | 	ret
26a58                 | 
26a58                 | _fatfs_cc_dir_clear
26a58     06 4A 05 F6 | 	mov	COUNT_, #6
26a5c     A8 00 A0 FD | 	call	#pushregs_
26a60     09 1F 02 F6 | 	mov	local01, arg01
26a64     0A 21 02 F6 | 	mov	local02, arg02
26a68     0F 13 02 F6 | 	mov	arg01, local01
26a6c     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
26a70     00 FA 0D F2 | 	cmp	result1, #0 wz
26a74     01 FA 05 56 |  if_ne	mov	result1, #1
26a78     90 00 90 5D |  if_ne	jmp	#LR__3922
26a7c     0F 13 02 F6 | 	mov	arg01, local01
26a80     10 15 02 F6 | 	mov	arg02, local02
26a84     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
26a88     FD 22 02 F6 | 	mov	local03, result1
26a8c     30 1E 06 F1 | 	add	local01, #48
26a90     0F 23 62 FC | 	wrlong	local03, local01
26a94     04 1E 06 F1 | 	add	local01, #4
26a98     0F 13 02 F6 | 	mov	arg01, local01
26a9c     00 14 06 F6 | 	mov	arg02, #0
26aa0     09 16 C6 F9 | 	decod	arg03, #9
26aa4     98 00 A0 FD | 	call	#\builtin_bytefill_
26aa8     0F 25 02 F6 | 	mov	local04, local01
26aac                 | ' #line 1667 "ff.c"
26aac                 | ' 	{
26aac                 | ' 		ibuf = fs->win; szb = 1;
26aac                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
26aac     00 26 06 F6 | 	mov	local05, #0
26ab0     34 1E 86 F1 | 	sub	local01, #52
26ab4                 | LR__3920
26ab4     0A 1E 06 F1 | 	add	local01, #10
26ab8     0F 29 E2 FA | 	rdword	local06, local01
26abc     0A 1E 86 F1 | 	sub	local01, #10
26ac0     14 27 12 F2 | 	cmp	local05, local06 wc
26ac4     2C 00 90 3D |  if_ae	jmp	#LR__3921
26ac8     01 1E 06 F1 | 	add	local01, #1
26acc     0F 13 C2 FA | 	rdbyte	arg01, local01
26ad0     01 1E 86 F1 | 	sub	local01, #1
26ad4     12 15 02 F6 | 	mov	arg02, local04
26ad8     11 17 02 F6 | 	mov	arg03, local03
26adc     13 17 02 F1 | 	add	arg03, local05
26ae0     01 18 06 F6 | 	mov	arg04, #1
26ae4     9C EF BF FD | 	call	#_fatfs_cc_disk_write
26ae8     00 FA 0D F2 | 	cmp	result1, #0 wz
26aec     01 26 06 A1 |  if_e	add	local05, #1
26af0     C0 FF 9F AD |  if_e	jmp	#LR__3920
26af4                 | LR__3921
26af4                 | ' 	}
26af4                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
26af4     0A 1E 06 F1 | 	add	local01, #10
26af8     0F 25 E2 FA | 	rdword	local04, local01
26afc     12 27 0A F2 | 	cmp	local05, local04 wz
26b00     00 28 06 A6 |  if_e	mov	local06, #0
26b04     01 28 06 56 |  if_ne	mov	local06, #1
26b08     14 FB 01 F6 | 	mov	result1, local06
26b0c                 | LR__3922
26b0c     A7 F0 03 F6 | 	mov	ptra, fp
26b10     B2 00 A0 FD | 	call	#popregs_
26b14                 | _fatfs_cc_dir_clear_ret
26b14     2D 00 64 FD | 	ret
26b18                 | 
26b18                 | _fatfs_cc_dir_sdi
26b18     06 4A 05 F6 | 	mov	COUNT_, #6
26b1c     A8 00 A0 FD | 	call	#pushregs_
26b20     09 1F 02 F6 | 	mov	local01, arg01
26b24     0A 21 02 F6 | 	mov	local02, arg02
26b28     0F 23 02 FB | 	rdlong	local03, local01
26b2c     00 10 00 FF 
26b30     00 20 16 F2 | 	cmp	local02, ##2097152 wc
26b34     1F 20 CE C7 |  if_b	test	local02, #31 wz
26b38                 | ' 		return FR_INT_ERR;
26b38     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
26b3c     34 01 90 7D |  if_nc_or_nz	jmp	#LR__3936
26b40     10 1E 06 F1 | 	add	local01, #16
26b44     0F 21 62 FC | 	wrlong	local02, local01
26b48     08 1E 86 F1 | 	sub	local01, #8
26b4c     0F 25 0A FB | 	rdlong	local04, local01 wz
26b50     08 1E 86 F1 | 	sub	local01, #8
26b54     11 27 C2 AA |  if_e	rdbyte	local05, local03
26b58     03 26 16 A2 |  if_e	cmp	local05, #3 wc
26b5c     28 22 06 21 |  if_nc_and_z	add	local03, #40
26b60     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
26b64     28 22 86 21 |  if_nc_and_z	sub	local03, #40
26b68     00 24 0E F2 | 	cmp	local04, #0 wz
26b6c     3C 00 90 5D |  if_ne	jmp	#LR__3930
26b70     10 27 02 F6 | 	mov	local05, local02
26b74     05 26 46 F0 | 	shr	local05, #5
26b78     08 22 06 F1 | 	add	local03, #8
26b7c     11 15 E2 FA | 	rdword	arg02, local03
26b80     08 22 86 F1 | 	sub	local03, #8
26b84     0A 27 12 F2 | 	cmp	local05, arg02 wc
26b88     02 FA 05 36 |  if_ae	mov	result1, #2
26b8c     E4 00 90 3D |  if_ae	jmp	#LR__3936
26b90     28 22 06 F1 | 	add	local03, #40
26b94     11 27 02 FB | 	rdlong	local05, local03
26b98     28 22 86 F1 | 	sub	local03, #40
26b9c     18 1E 06 F1 | 	add	local01, #24
26ba0     0F 27 62 FC | 	wrlong	local05, local01
26ba4     18 1E 86 F1 | 	sub	local01, #24
26ba8     7C 00 90 FD | 	jmp	#LR__3935
26bac                 | LR__3930
26bac     0A 22 06 F1 | 	add	local03, #10
26bb0     11 29 E2 FA | 	rdword	local06, local03
26bb4     0A 22 86 F1 | 	sub	local03, #10
26bb8     09 28 66 F0 | 	shl	local06, #9
26bbc                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
26bbc                 | ' 		while (ofs >= csz) {
26bbc                 | LR__3931
26bbc     14 21 12 F2 | 	cmp	local02, local06 wc
26bc0     4C 00 90 CD |  if_b	jmp	#LR__3934
26bc4     0F 13 02 F6 | 	mov	arg01, local01
26bc8     12 15 02 F6 | 	mov	arg02, local04
26bcc     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
26bd0     FD 24 02 F6 | 	mov	local04, result1
26bd4     FF FF 7F FF 
26bd8     FF 25 0E F2 | 	cmp	local04, ##-1 wz
26bdc     01 FA 05 A6 |  if_e	mov	result1, #1
26be0     90 00 90 AD |  if_e	jmp	#LR__3936
26be4     02 24 16 F2 | 	cmp	local04, #2 wc
26be8     14 00 90 CD |  if_b	jmp	#LR__3932
26bec     18 22 06 F1 | 	add	local03, #24
26bf0     11 27 02 FB | 	rdlong	local05, local03
26bf4     18 22 86 F1 | 	sub	local03, #24
26bf8     13 25 12 F2 | 	cmp	local04, local05 wc
26bfc     08 00 90 CD |  if_b	jmp	#LR__3933
26c00                 | LR__3932
26c00     02 FA 05 F6 | 	mov	result1, #2
26c04     6C 00 90 FD | 	jmp	#LR__3936
26c08                 | LR__3933
26c08     14 21 82 F1 | 	sub	local02, local06
26c0c     AC FF 9F FD | 	jmp	#LR__3931
26c10                 | LR__3934
26c10     11 13 02 F6 | 	mov	arg01, local03
26c14     12 15 02 F6 | 	mov	arg02, local04
26c18     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
26c1c     18 1E 06 F1 | 	add	local01, #24
26c20     0F FB 61 FC | 	wrlong	result1, local01
26c24     18 1E 86 F1 | 	sub	local01, #24
26c28                 | LR__3935
26c28     14 1E 06 F1 | 	add	local01, #20
26c2c     0F 25 62 FC | 	wrlong	local04, local01
26c30     04 1E 06 F1 | 	add	local01, #4
26c34     0F 27 0A FB | 	rdlong	local05, local01 wz
26c38     18 1E 86 F1 | 	sub	local01, #24
26c3c     02 FA 05 A6 |  if_e	mov	result1, #2
26c40     30 00 90 AD |  if_e	jmp	#LR__3936
26c44     10 29 02 F6 | 	mov	local06, local02
26c48     09 28 46 F0 | 	shr	local06, #9
26c4c     18 1E 06 F1 | 	add	local01, #24
26c50     0F 27 02 FB | 	rdlong	local05, local01
26c54     14 27 02 F1 | 	add	local05, local06
26c58     0F 27 62 FC | 	wrlong	local05, local01
26c5c     34 22 06 F1 | 	add	local03, #52
26c60     FF 21 06 F5 | 	and	local02, #511
26c64     10 23 02 F1 | 	add	local03, local02
26c68     04 1E 06 F1 | 	add	local01, #4
26c6c     0F 23 62 FC | 	wrlong	local03, local01
26c70                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
26c70                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
26c70                 | ' 
26c70                 | ' 	return FR_OK;
26c70     00 FA 05 F6 | 	mov	result1, #0
26c74                 | LR__3936
26c74     A7 F0 03 F6 | 	mov	ptra, fp
26c78     B2 00 A0 FD | 	call	#popregs_
26c7c                 | _fatfs_cc_dir_sdi_ret
26c7c     2D 00 64 FD | 	ret
26c80                 | 
26c80                 | _fatfs_cc_dir_next
26c80     05 4A 05 F6 | 	mov	COUNT_, #5
26c84     A8 00 A0 FD | 	call	#pushregs_
26c88     09 1F 02 F6 | 	mov	local01, arg01
26c8c     0A 21 02 F6 | 	mov	local02, arg02
26c90     0F 23 02 FB | 	rdlong	local03, local01
26c94     10 1E 06 F1 | 	add	local01, #16
26c98     0F 25 02 FB | 	rdlong	local04, local01
26c9c     10 1E 86 F1 | 	sub	local01, #16
26ca0     20 24 06 F1 | 	add	local04, #32
26ca4     00 10 00 FF 
26ca8     00 24 16 F2 | 	cmp	local04, ##2097152 wc
26cac     18 1E 06 31 |  if_ae	add	local01, #24
26cb0     0F 01 68 3C |  if_ae	wrlong	#0, local01
26cb4     18 1E 86 31 |  if_ae	sub	local01, #24
26cb8     18 1E 06 F1 | 	add	local01, #24
26cbc     0F 15 0A FB | 	rdlong	arg02, local01 wz
26cc0     18 1E 86 F1 | 	sub	local01, #24
26cc4     04 FA 05 A6 |  if_e	mov	result1, #4
26cc8     64 01 90 AD |  if_e	jmp	#LR__3945
26ccc     FF 25 CE F7 | 	test	local04, #511 wz
26cd0     3C 01 90 5D |  if_ne	jmp	#LR__3944
26cd4     18 1E 06 F1 | 	add	local01, #24
26cd8     0F 15 02 FB | 	rdlong	arg02, local01
26cdc     01 14 06 F1 | 	add	arg02, #1
26ce0     0F 15 62 FC | 	wrlong	arg02, local01
26ce4     04 1E 86 F1 | 	sub	local01, #4
26ce8     0F 15 0A FB | 	rdlong	arg02, local01 wz
26cec     14 1E 86 F1 | 	sub	local01, #20
26cf0     2C 00 90 5D |  if_ne	jmp	#LR__3940
26cf4     12 15 02 F6 | 	mov	arg02, local04
26cf8     05 14 46 F0 | 	shr	arg02, #5
26cfc     08 22 06 F1 | 	add	local03, #8
26d00     11 21 E2 FA | 	rdword	local02, local03
26d04     08 22 86 F1 | 	sub	local03, #8
26d08     10 15 12 F2 | 	cmp	arg02, local02 wc
26d0c     18 1E 06 31 |  if_ae	add	local01, #24
26d10     0F 01 68 3C |  if_ae	wrlong	#0, local01
26d14                 | ' 				dp->sect = 0; return FR_NO_FILE;
26d14     04 FA 05 36 |  if_ae	mov	result1, #4
26d18     14 01 90 3D |  if_ae	jmp	#LR__3945
26d1c     F0 00 90 FD | 	jmp	#LR__3943
26d20                 | LR__3940
26d20     12 13 02 F6 | 	mov	arg01, local04
26d24     09 12 46 F0 | 	shr	arg01, #9
26d28     0A 22 06 F1 | 	add	local03, #10
26d2c     11 15 E2 FA | 	rdword	arg02, local03
26d30     0A 22 86 F1 | 	sub	local03, #10
26d34     01 14 86 F1 | 	sub	arg02, #1
26d38     0A 13 CA F7 | 	test	arg01, arg02 wz
26d3c     D0 00 90 5D |  if_ne	jmp	#LR__3942
26d40     0F 13 02 F6 | 	mov	arg01, local01
26d44     14 1E 06 F1 | 	add	local01, #20
26d48     0F 15 02 FB | 	rdlong	arg02, local01
26d4c     14 1E 86 F1 | 	sub	local01, #20
26d50     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
26d54     FD 26 02 F6 | 	mov	local05, result1
26d58     02 26 16 F2 | 	cmp	local05, #2 wc
26d5c     02 FA 05 C6 |  if_b	mov	result1, #2
26d60     CC 00 90 CD |  if_b	jmp	#LR__3945
26d64     FF FF 7F FF 
26d68     FF 27 0E F2 | 	cmp	local05, ##-1 wz
26d6c     01 FA 05 A6 |  if_e	mov	result1, #1
26d70     BC 00 90 AD |  if_e	jmp	#LR__3945
26d74     18 22 06 F1 | 	add	local03, #24
26d78     11 15 02 FB | 	rdlong	arg02, local03
26d7c     18 22 86 F1 | 	sub	local03, #24
26d80     0A 27 12 F2 | 	cmp	local05, arg02 wc
26d84     68 00 90 CD |  if_b	jmp	#LR__3941
26d88     00 20 0E F2 | 	cmp	local02, #0 wz
26d8c     18 1E 06 A1 |  if_e	add	local01, #24
26d90     0F 01 68 AC |  if_e	wrlong	#0, local01
26d94                 | ' 						dp->sect = 0; return FR_NO_FILE;
26d94     04 FA 05 A6 |  if_e	mov	result1, #4
26d98     94 00 90 AD |  if_e	jmp	#LR__3945
26d9c     0F 13 02 F6 | 	mov	arg01, local01
26da0     14 1E 06 F1 | 	add	local01, #20
26da4     0F 15 02 FB | 	rdlong	arg02, local01
26da8     14 1E 86 F1 | 	sub	local01, #20
26dac     84 FA BF FD | 	call	#_fatfs_cc_create_chain
26db0     FD 26 0A F6 | 	mov	local05, result1 wz
26db4     07 FA 05 A6 |  if_e	mov	result1, #7
26db8     74 00 90 AD |  if_e	jmp	#LR__3945
26dbc     01 26 0E F2 | 	cmp	local05, #1 wz
26dc0     02 FA 05 A6 |  if_e	mov	result1, #2
26dc4     68 00 90 AD |  if_e	jmp	#LR__3945
26dc8     FF FF 7F FF 
26dcc     FF 27 0E F2 | 	cmp	local05, ##-1 wz
26dd0     01 FA 05 A6 |  if_e	mov	result1, #1
26dd4     58 00 90 AD |  if_e	jmp	#LR__3945
26dd8     13 15 02 F6 | 	mov	arg02, local05
26ddc     11 13 02 F6 | 	mov	arg01, local03
26de0     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
26de4     00 FA 0D F2 | 	cmp	result1, #0 wz
26de8     01 FA 05 56 |  if_ne	mov	result1, #1
26dec     40 00 90 5D |  if_ne	jmp	#LR__3945
26df0                 | LR__3941
26df0     14 1E 06 F1 | 	add	local01, #20
26df4     0F 27 62 FC | 	wrlong	local05, local01
26df8     11 13 02 F6 | 	mov	arg01, local03
26dfc     13 15 02 F6 | 	mov	arg02, local05
26e00     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
26e04     04 1E 06 F1 | 	add	local01, #4
26e08     0F FB 61 FC | 	wrlong	result1, local01
26e0c     18 1E 86 F1 | 	sub	local01, #24
26e10                 | LR__3942
26e10                 | LR__3943
26e10                 | LR__3944
26e10     10 1E 06 F1 | 	add	local01, #16
26e14     0F 25 62 FC | 	wrlong	local04, local01
26e18     34 22 06 F1 | 	add	local03, #52
26e1c     FF 25 06 F5 | 	and	local04, #511
26e20     12 23 02 F1 | 	add	local03, local04
26e24     0C 1E 06 F1 | 	add	local01, #12
26e28     0F 23 62 FC | 	wrlong	local03, local01
26e2c                 | ' #line 1771 "ff.c"
26e2c                 | ' 				}
26e2c                 | ' 				dp->clust = clst;
26e2c                 | ' 				dp->sect = clst2sect(fs, clst);
26e2c                 | ' 			}
26e2c                 | ' 		}
26e2c                 | ' 	}
26e2c                 | ' 	dp->dptr = ofs;
26e2c                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
26e2c                 | ' 
26e2c                 | ' 	return FR_OK;
26e2c     00 FA 05 F6 | 	mov	result1, #0
26e30                 | LR__3945
26e30     A7 F0 03 F6 | 	mov	ptra, fp
26e34     B2 00 A0 FD | 	call	#popregs_
26e38                 | _fatfs_cc_dir_next_ret
26e38     2D 00 64 FD | 	ret
26e3c                 | 
26e3c                 | _fatfs_cc_dir_alloc
26e3c     08 4A 05 F6 | 	mov	COUNT_, #8
26e40     A8 00 A0 FD | 	call	#pushregs_
26e44     09 1F 02 F6 | 	mov	local01, arg01
26e48     0A 21 02 F6 | 	mov	local02, arg02
26e4c     0F 23 02 FB | 	rdlong	local03, local01
26e50     0F 13 02 F6 | 	mov	arg01, local01
26e54     00 14 06 F6 | 	mov	arg02, #0
26e58     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
26e5c     FD 24 0A F6 | 	mov	local04, result1 wz
26e60     70 00 90 5D |  if_ne	jmp	#LR__3954
26e64     00 26 06 F6 | 	mov	local05, #0
26e68                 | ' 		n = 0;
26e68                 | ' 		do {
26e68                 | LR__3950
26e68     18 1E 06 F1 | 	add	local01, #24
26e6c     0F 15 02 FB | 	rdlong	arg02, local01
26e70     18 1E 86 F1 | 	sub	local01, #24
26e74     11 13 02 F6 | 	mov	arg01, local03
26e78     38 F3 BF FD | 	call	#_fatfs_cc_move_window
26e7c     FD 24 0A F6 | 	mov	local04, result1 wz
26e80     50 00 90 5D |  if_ne	jmp	#LR__3953
26e84     1C 1E 06 F1 | 	add	local01, #28
26e88     0F 29 02 FB | 	rdlong	local06, local01
26e8c     1C 1E 86 F1 | 	sub	local01, #28
26e90     14 29 C2 FA | 	rdbyte	local06, local06
26e94     E5 28 0E F2 | 	cmp	local06, #229 wz
26e98     1C 1E 06 51 |  if_ne	add	local01, #28
26e9c     0F 2B 02 5B |  if_ne	rdlong	local07, local01
26ea0     1C 1E 86 51 |  if_ne	sub	local01, #28
26ea4     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
26ea8     10 00 90 5D |  if_ne	jmp	#LR__3951
26eac     01 26 06 F1 | 	add	local05, #1
26eb0     10 27 0A F2 | 	cmp	local05, local02 wz
26eb4     1C 00 90 AD |  if_e	jmp	#LR__3953
26eb8     04 00 90 FD | 	jmp	#LR__3952
26ebc                 | LR__3951
26ebc     00 26 06 F6 | 	mov	local05, #0
26ec0                 | LR__3952
26ec0     0F 13 02 F6 | 	mov	arg01, local01
26ec4     01 14 06 F6 | 	mov	arg02, #1
26ec8     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
26ecc     FD 24 0A F6 | 	mov	local04, result1 wz
26ed0     94 FF 9F AD |  if_e	jmp	#LR__3950
26ed4                 | LR__3953
26ed4                 | LR__3954
26ed4     04 24 0E F2 | 	cmp	local04, #4 wz
26ed8     07 24 06 A6 |  if_e	mov	local04, #7
26edc                 | ' 	return res;
26edc     12 FB 01 F6 | 	mov	result1, local04
26ee0     A7 F0 03 F6 | 	mov	ptra, fp
26ee4     B2 00 A0 FD | 	call	#popregs_
26ee8                 | _fatfs_cc_dir_alloc_ret
26ee8     2D 00 64 FD | 	ret
26eec                 | 
26eec                 | _fatfs_cc_ld_clust
26eec     09 01 02 F6 | 	mov	_var01, arg01
26ef0     0A 13 02 F6 | 	mov	arg01, arg02
26ef4     1A 12 06 F1 | 	add	arg01, #26
26ef8                 | ' {
26ef8                 | ' 
26ef8                 | ' 	return *((WORD*)ptr);
26ef8     09 FB E1 FA | 	rdword	result1, arg01
26efc     FD 12 32 F9 | 	getword	arg01, result1, #0
26f00     00 01 C2 FA | 	rdbyte	_var01, _var01
26f04     03 00 0E F2 | 	cmp	_var01, #3 wz
26f08     14 14 06 A1 |  if_e	add	arg02, #20
26f0c                 | ' {
26f0c                 | ' 
26f0c                 | ' 	return *((WORD*)ptr);
26f0c     0A FB E1 AA |  if_e	rdword	result1, arg02
26f10     10 FA 65 A0 |  if_e	shl	result1, #16
26f14     FD 12 42 A5 |  if_e	or	arg01, result1
26f18                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
26f18                 | ' 	}
26f18                 | ' 
26f18                 | ' 	return cl;
26f18     09 FB 01 F6 | 	mov	result1, arg01
26f1c                 | _fatfs_cc_ld_clust_ret
26f1c     2D 00 64 FD | 	ret
26f20                 | 
26f20                 | _fatfs_cc_st_clust
26f20     09 01 02 F6 | 	mov	_var01, arg01
26f24     0A 13 02 F6 | 	mov	arg01, arg02
26f28     1A 12 06 F1 | 	add	arg01, #26
26f2c     09 17 52 FC | 	wrword	arg03, arg01
26f30     00 01 C2 FA | 	rdbyte	_var01, _var01
26f34     03 00 0E F2 | 	cmp	_var01, #3 wz
26f38     14 14 06 A1 |  if_e	add	arg02, #20
26f3c     10 16 46 A0 |  if_e	shr	arg03, #16
26f40     0A 17 52 AC |  if_e	wrword	arg03, arg02
26f44                 | _fatfs_cc_st_clust_ret
26f44     2D 00 64 FD | 	ret
26f48                 | 
26f48                 | _fatfs_cc_cmp_lfn
26f48     07 4A 05 F6 | 	mov	COUNT_, #7
26f4c     A8 00 A0 FD | 	call	#pushregs_
26f50     09 1F 02 F6 | 	mov	local01, arg01
26f54     0A 13 02 F6 | 	mov	arg01, arg02
26f58     1A 12 06 F1 | 	add	arg01, #26
26f5c                 | ' {
26f5c                 | ' 
26f5c                 | ' 	return *((WORD*)ptr);
26f5c     09 FB E9 FA | 	rdword	result1, arg01 wz
26f60     00 FA 05 56 |  if_ne	mov	result1, #0
26f64     E0 00 90 5D |  if_ne	jmp	#LR__3966
26f68     0A 21 C2 FA | 	rdbyte	local02, arg02
26f6c     3F 20 06 F5 | 	and	local02, #63
26f70     01 20 86 F1 | 	sub	local02, #1
26f74     0D 20 06 FD | 	qmul	local02, #13
26f78                 | ' 
26f78                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
26f78                 | ' 
26f78                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
26f78     01 22 06 F6 | 	mov	local03, #1
26f7c     00 24 06 F6 | 	mov	local04, #0
26f80     18 26 62 FD | 	getqx	local05
26f84                 | LR__3960
26f84     0D 24 16 F2 | 	cmp	local04, #13 wc
26f88     9C 00 90 3D |  if_ae	jmp	#LR__3965
26f8c     0A 13 02 F6 | 	mov	arg01, arg02
26f90     12 21 02 F6 | 	mov	local02, local04
26f94     01 00 00 FF 
26f98     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
26f9c     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
26fa0     10 21 C2 FA | 	rdbyte	local02, local02
26fa4     01 20 06 FA | 	mul	local02, #1
26fa8     10 13 02 F1 | 	add	arg01, local02
26fac     01 00 00 FF 
26fb0     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
26fb4                 | ' {
26fb4                 | ' 
26fb4                 | ' 	return *((WORD*)ptr);
26fb4     09 FB E1 FA | 	rdword	result1, arg01
26fb8     FD 28 02 F6 | 	mov	local06, result1
26fbc     11 21 02 F6 | 	mov	local02, local03
26fc0     0F 20 4E F7 | 	zerox	local02, #15 wz
26fc4     44 00 90 AD |  if_e	jmp	#LR__3963
26fc8     00 27 16 F2 | 	cmp	local05, #256 wc
26fcc     2C 00 90 3D |  if_ae	jmp	#LR__3961
26fd0     14 13 32 F9 | 	getword	arg01, local06, #0
26fd4     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
26fd8     FD 20 02 F6 | 	mov	local02, result1
26fdc     13 23 02 F6 | 	mov	local03, local05
26fe0     01 22 66 F0 | 	shl	local03, #1
26fe4     0F 23 02 F1 | 	add	local03, local01
26fe8     11 13 E2 FA | 	rdword	arg01, local03
26fec     01 26 06 F1 | 	add	local05, #1
26ff0     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
26ff4     FD 20 0A F2 | 	cmp	local02, result1 wz
26ff8     08 00 90 AD |  if_e	jmp	#LR__3962
26ffc                 | LR__3961
26ffc                 | ' 				return 0;
26ffc     00 FA 05 F6 | 	mov	result1, #0
27000     44 00 90 FD | 	jmp	#LR__3966
27004                 | LR__3962
27004     14 23 02 F6 | 	mov	local03, local06
27008     14 00 90 FD | 	jmp	#LR__3964
2700c                 | LR__3963
2700c     14 29 32 F9 | 	getword	local06, local06, #0
27010     7F 00 00 FF 
27014     FF 29 0E F2 | 	cmp	local06, ##65535 wz
27018     00 FA 05 56 |  if_ne	mov	result1, #0
2701c     28 00 90 5D |  if_ne	jmp	#LR__3966
27020                 | LR__3964
27020     01 24 06 F1 | 	add	local04, #1
27024     5C FF 9F FD | 	jmp	#LR__3960
27028                 | LR__3965
27028     0A 21 C2 FA | 	rdbyte	local02, arg02
2702c     40 20 CE F7 | 	test	local02, #64 wz
27030     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
27034     01 26 66 50 |  if_ne	shl	local05, #1
27038     0F 27 02 51 |  if_ne	add	local05, local01
2703c     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
27040     00 FA 05 56 |  if_ne	mov	result1, #0
27044                 | ' 
27044                 | ' 	return 1;
27044     01 FA 05 A6 |  if_e	mov	result1, #1
27048                 | LR__3966
27048     A7 F0 03 F6 | 	mov	ptra, fp
2704c     B2 00 A0 FD | 	call	#popregs_
27050                 | _fatfs_cc_cmp_lfn_ret
27050     2D 00 64 FD | 	ret
27054                 | 
27054                 | _fatfs_cc_pick_lfn
27054     09 01 02 F6 | 	mov	_var01, arg01
27058     0A 13 02 F6 | 	mov	arg01, arg02
2705c     1A 12 06 F1 | 	add	arg01, #26
27060                 | ' {
27060                 | ' 
27060                 | ' 	return *((WORD*)ptr);
27060     09 FB E9 FA | 	rdword	result1, arg01 wz
27064     00 FA 05 56 |  if_ne	mov	result1, #0
27068     D4 00 90 5D |  if_ne	jmp	#LR__3975
2706c     0A 03 C2 FA | 	rdbyte	_var02, arg02
27070     40 02 26 F5 | 	andn	_var02, #64
27074     01 02 86 F1 | 	sub	_var02, #1
27078     0D 02 06 FD | 	qmul	_var02, #13
2707c                 | ' 
2707c                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
2707c                 | ' 
2707c                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2707c     01 04 06 F6 | 	mov	_var03, #1
27080     00 06 06 F6 | 	mov	_var04, #0
27084     18 08 62 FD | 	getqx	_var05
27088                 | LR__3970
27088     0D 06 16 F2 | 	cmp	_var04, #13 wc
2708c     80 00 90 3D |  if_ae	jmp	#LR__3973
27090     0A 13 02 F6 | 	mov	arg01, arg02
27094     03 03 02 F6 | 	mov	_var02, _var04
27098     01 00 00 FF 
2709c     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
270a0     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
270a4     01 03 C2 FA | 	rdbyte	_var02, _var02
270a8     01 02 06 FA | 	mul	_var02, #1
270ac     01 13 02 F1 | 	add	arg01, _var02
270b0     01 00 00 FF 
270b4     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
270b8                 | ' {
270b8                 | ' 
270b8                 | ' 	return *((WORD*)ptr);
270b8     09 FB E1 FA | 	rdword	result1, arg01
270bc     FD 0A 02 F6 | 	mov	_var06, result1
270c0     02 03 02 F6 | 	mov	_var02, _var03
270c4     0F 02 4E F7 | 	zerox	_var02, #15 wz
270c8     28 00 90 AD |  if_e	jmp	#LR__3971
270cc     00 09 16 F2 | 	cmp	_var05, #256 wc
270d0     00 FA 05 36 |  if_ae	mov	result1, #0
270d4     68 00 90 3D |  if_ae	jmp	#LR__3975
270d8     04 03 02 F6 | 	mov	_var02, _var05
270dc     01 02 66 F0 | 	shl	_var02, #1
270e0     00 03 02 F1 | 	add	_var02, _var01
270e4     05 05 02 F6 | 	mov	_var03, _var06
270e8     01 05 52 FC | 	wrword	_var03, _var02
270ec     01 08 06 F1 | 	add	_var05, #1
270f0     14 00 90 FD | 	jmp	#LR__3972
270f4                 | LR__3971
270f4     05 0B 32 F9 | 	getword	_var06, _var06, #0
270f8     7F 00 00 FF 
270fc     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
27100     00 FA 05 56 |  if_ne	mov	result1, #0
27104     38 00 90 5D |  if_ne	jmp	#LR__3975
27108                 | LR__3972
27108     01 06 06 F1 | 	add	_var04, #1
2710c     78 FF 9F FD | 	jmp	#LR__3970
27110                 | LR__3973
27110     0A 03 C2 FA | 	rdbyte	_var02, arg02
27114     40 02 CE F7 | 	test	_var02, #64 wz
27118     02 0D 02 56 |  if_ne	mov	_var07, _var03
2711c     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
27120     18 00 90 AD |  if_e	jmp	#LR__3974
27124     00 09 16 F2 | 	cmp	_var05, #256 wc
27128     00 FA 05 36 |  if_ae	mov	result1, #0
2712c     10 00 90 3D |  if_ae	jmp	#LR__3975
27130     01 08 66 F0 | 	shl	_var05, #1
27134     00 09 02 F1 | 	add	_var05, _var01
27138     04 01 58 FC | 	wrword	#0, _var05
2713c                 | LR__3974
2713c                 | ' 		lfnbuf[i] = 0;
2713c                 | ' 	}
2713c                 | ' 
2713c                 | ' 	return 1;
2713c     01 FA 05 F6 | 	mov	result1, #1
27140                 | LR__3975
27140                 | _fatfs_cc_pick_lfn_ret
27140     2D 00 64 FD | 	ret
27144                 | 
27144                 | _fatfs_cc_put_lfn
27144     0D 14 06 F1 | 	add	arg02, #13
27148     0A 19 42 FC | 	wrbyte	arg04, arg02
2714c     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
27150     01 18 86 F1 | 	sub	arg04, #1
27154     0D 18 06 FD | 	qmul	arg04, #13
27158     09 01 02 F6 | 	mov	_var01, arg01
2715c     02 14 86 F1 | 	sub	arg02, #2
27160     0A 1F 48 FC | 	wrbyte	#15, arg02
27164     01 14 06 F1 | 	add	arg02, #1
27168     0A 01 48 FC | 	wrbyte	#0, arg02
2716c     0C 14 86 F1 | 	sub	arg02, #12
27170     0A 13 02 F6 | 	mov	arg01, arg02
27174     1A 12 06 F1 | 	add	arg01, #26
27178     09 01 58 FC | 	wrword	#0, arg01
2717c     00 02 06 F6 | 	mov	_var02, #0
27180     00 04 06 F6 | 	mov	_var03, #0
27184                 | ' 	BYTE* dir,
27184                 | ' 	BYTE ord,
27184                 | ' 	BYTE sum
27184                 | ' )
27184                 | ' {
27184                 | ' 	UINT i, s;
27184                 | ' 	WCHAR wc;
27184                 | ' 
27184                 | ' 
27184                 | ' 	dir[ 13 ] = sum;
27184                 | ' 	dir[ 11 ] =  0x0F ;
27184                 | ' 	dir[ 12 ] = 0;
27184                 | ' 	st_word(dir +  26 , 0);
27184                 | ' 
27184                 | ' 	i = (ord - 1) * 13;
27184                 | ' 	s = wc = 0;
27184                 | ' 	do {
27184     01 00 00 FF 
27188     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2718c     18 06 62 FD | 	getqx	_var04
27190     97 2A 48 FB | 	callpa	#(@LR__3981-@LR__3980)>>2,fcache_load_ptr_
27194                 | LR__3980
27194     01 19 32 F9 | 	getword	arg04, _var02, #0
27198     7F 00 00 FF 
2719c     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
271a0     03 13 02 56 |  if_ne	mov	arg01, _var04
271a4     01 06 06 51 |  if_ne	add	_var04, #1
271a8     01 12 66 50 |  if_ne	shl	arg01, #1
271ac     00 13 02 51 |  if_ne	add	arg01, _var01
271b0     09 03 E2 5A |  if_ne	rdword	_var02, arg01
271b4     0A 13 02 F6 | 	mov	arg01, arg02
271b8     02 19 02 F6 | 	mov	arg04, _var03
271bc     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
271c0     0C 19 C2 FA | 	rdbyte	arg04, arg04
271c4     01 18 06 FA | 	mul	arg04, #1
271c8     0C 13 02 F1 | 	add	arg01, arg04
271cc     09 03 52 FC | 	wrword	_var02, arg01
271d0     01 19 02 F6 | 	mov	arg04, _var02
271d4     0F 18 4E F7 | 	zerox	arg04, #15 wz
271d8     0F 02 CE A9 |  if_e	bmask	_var02, #15
271dc     01 04 06 F1 | 	add	_var03, #1
271e0     0D 04 16 F2 | 	cmp	_var03, #13 wc
271e4     AC FF 9F CD |  if_b	jmp	#LR__3980
271e8                 | LR__3981
271e8     01 00 00 FF 
271ec     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
271f0     01 03 32 F9 | 	getword	_var02, _var02, #0
271f4     7F 00 00 FF 
271f8     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
271fc     01 06 66 50 |  if_ne	shl	_var04, #1
27200     00 07 02 51 |  if_ne	add	_var04, _var01
27204     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
27208     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
2720c     40 16 46 A5 |  if_e	or	arg03, #64
27210     0A 17 42 FC | 	wrbyte	arg03, arg02
27214                 | _fatfs_cc_put_lfn_ret
27214     2D 00 64 FD | 	ret
27218                 | 
27218                 | _fatfs_cc_gen_numname
27218     08 4A 05 F6 | 	mov	COUNT_, #8
2721c     A8 00 A0 FD | 	call	#pushregs_
27220     2C F0 07 F1 | 	add	ptra, #44
27224     09 1F 02 F6 | 	mov	local01, arg01
27228     0A 21 02 F6 | 	mov	local02, arg02
2722c     0B 23 02 F6 | 	mov	local03, arg03
27230     0C 25 02 F6 | 	mov	local04, arg04
27234     0F 13 02 F6 | 	mov	arg01, local01
27238     10 15 02 F6 | 	mov	arg02, local02
2723c     0B 16 06 F6 | 	mov	arg03, #11
27240     F4 77 BF FD | 	call	#__system____builtin_memmove
27244     06 24 16 F2 | 	cmp	local04, #6 wc
27248     48 00 90 CD |  if_b	jmp	#LR__3995
2724c     12 27 02 F6 | 	mov	local05, local04
27250     97 1E 48 FB | 	callpa	#(@LR__3993-@LR__3990)>>2,fcache_load_ptr_
27254                 | ' 		sreg = seq;
27254                 | ' 		while (*lfn) {
27254                 | LR__3990
27254     11 29 EA FA | 	rdword	local06, local03 wz
27258     34 00 90 AD |  if_e	jmp	#LR__3994
2725c     11 2B E2 FA | 	rdword	local07, local03
27260                 | ' 			wc = *lfn++;
27260                 | ' 			for (i = 0; i < 16; i++) {
27260     02 22 06 F1 | 	add	local03, #2
27264     10 12 DC FC | 	rep	@LR__3992, #16
27268                 | LR__3991
27268     01 26 66 F0 | 	shl	local05, #1
2726c     15 29 32 F9 | 	getword	local06, local07, #0
27270     01 28 06 F5 | 	and	local06, #1
27274     14 27 02 F1 | 	add	local05, local06
27278     15 2B 32 F9 | 	getword	local07, local07, #0
2727c     01 2A 46 F0 | 	shr	local07, #1
27280     10 26 2E F4 | 	testbn	local05, #16 wz
27284     88 00 00 5F 
27288     21 26 66 55 |  if_ne	xor	local05, ##69665
2728c                 | LR__3992
2728c     C4 FF 9F FD | 	jmp	#LR__3990
27290                 | LR__3993
27290                 | LR__3994
27290     13 25 02 F6 | 	mov	local04, local05
27294                 | LR__3995
27294     07 2A 06 F6 | 	mov	local07, #7
27298                 | ' 			}
27298                 | ' 		}
27298                 | ' 		seq = (UINT)sreg;
27298                 | ' 	}
27298                 | ' 
27298                 | ' 
27298                 | ' 	i = 7;
27298                 | ' 	do {
27298     10 4E 05 F1 | 	add	fp, #16
2729c     97 1A 48 FB | 	callpa	#(@LR__3997-@LR__3996)>>2,fcache_load_ptr_
272a0                 | LR__3996
272a0     12 27 42 F8 | 	getnib	local05, local04, #0
272a4     30 26 06 F1 | 	add	local05, #48
272a8     04 24 46 F0 | 	shr	local04, #4
272ac     13 29 E2 F8 | 	getbyte	local06, local05, #0
272b0     3A 28 16 F2 | 	cmp	local06, #58 wc
272b4     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
272b8     07 26 06 31 |  if_ae	add	local05, #7
272bc     15 29 02 F6 | 	mov	local06, local07
272c0     01 2A 8E F1 | 	sub	local07, #1 wz
272c4     A7 28 02 F1 | 	add	local06, fp
272c8     14 27 42 FC | 	wrbyte	local05, local06
272cc     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
272d0     CC FF 9F 5D |  if_ne	jmp	#LR__3996
272d4                 | LR__3997
272d4     15 29 02 F6 | 	mov	local06, local07
272d8     A7 28 02 F1 | 	add	local06, fp
272dc     14 FD 48 FC | 	wrbyte	#126, local06
272e0                 | ' 	ns[i] = '~';
272e0                 | ' 
272e0                 | ' 
272e0                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
272e0     00 26 06 F6 | 	mov	local05, #0
272e4     10 4E 85 F1 | 	sub	fp, #16
272e8     97 2A 48 FB | 	callpa	#(@LR__4000-@LR__3998)>>2,fcache_load_ptr_
272ec                 | LR__3998
272ec     15 27 12 F2 | 	cmp	local05, local07 wc
272f0     4C 00 90 3D |  if_ae	jmp	#LR__4001
272f4     13 29 02 F6 | 	mov	local06, local05
272f8     0F 29 02 F1 | 	add	local06, local01
272fc     14 29 C2 FA | 	rdbyte	local06, local06
27300     20 28 0E F2 | 	cmp	local06, #32 wz
27304     38 00 90 AD |  if_e	jmp	#LR__4001
27308     13 13 02 F6 | 	mov	arg01, local05
2730c     0F 13 02 F1 | 	add	arg01, local01
27310     09 13 CA FA | 	rdbyte	arg01, arg01 wz
27314     00 FA 05 56 |  if_ne	mov	result1, #0
27318                 | ' 
27318                 | ' 	return 0;
27318     00 FA 05 A6 |  if_e	mov	result1, #0
2731c     00 FA 0D F2 | 	cmp	result1, #0 wz
27320     14 00 90 AD |  if_e	jmp	#LR__3999
27324     15 29 02 F6 | 	mov	local06, local07
27328     01 28 86 F1 | 	sub	local06, #1
2732c     14 27 0A F2 | 	cmp	local05, local06 wz
27330     0C 00 90 AD |  if_e	jmp	#LR__4001
27334     01 26 06 F1 | 	add	local05, #1
27338                 | LR__3999
27338     01 26 06 F1 | 	add	local05, #1
2733c     AC FF 9F FD | 	jmp	#LR__3998
27340                 | LR__4000
27340                 | LR__4001
27340     97 20 48 FB | 	callpa	#(@LR__4005-@LR__4002)>>2,fcache_load_ptr_
27344                 | ' 			j++;
27344                 | ' 		}
27344                 | ' 	}
27344                 | ' 	do {
27344                 | LR__4002
27344     13 29 02 F6 | 	mov	local06, local05
27348     0F 29 02 F1 | 	add	local06, local01
2734c     08 2A 16 F2 | 	cmp	local07, #8 wc
27350     01 26 06 F1 | 	add	local05, #1
27354     1C 00 90 3D |  if_ae	jmp	#LR__4003
27358     15 25 02 F6 | 	mov	local04, local07
2735c     10 4E 05 F1 | 	add	fp, #16
27360     A7 24 02 F1 | 	add	local04, fp
27364     12 2D C2 FA | 	rdbyte	local08, local04
27368     01 2A 06 F1 | 	add	local07, #1
2736c     10 4E 85 F1 | 	sub	fp, #16
27370     04 00 90 FD | 	jmp	#LR__4004
27374                 | LR__4003
27374     20 2C 06 F6 | 	mov	local08, #32
27378                 | LR__4004
27378     14 2D 42 FC | 	wrbyte	local08, local06
2737c     08 26 16 F2 | 	cmp	local05, #8 wc
27380     C0 FF 9F CD |  if_b	jmp	#LR__4002
27384                 | LR__4005
27384     A7 F0 03 F6 | 	mov	ptra, fp
27388     B2 00 A0 FD | 	call	#popregs_
2738c                 | _fatfs_cc_gen_numname_ret
2738c     2D 00 64 FD | 	ret
27390                 | 
27390                 | _fatfs_cc_sum_sfn
27390     00 00 06 F6 | 	mov	_var01, #0
27394                 | ' )
27394                 | ' {
27394                 | ' 	BYTE sum = 0;
27394                 | ' 	UINT n = 11;
27394                 | ' 
27394                 | ' 	do {
27394     97 12 48 FB | 	callpa	#(@LR__4012-@LR__4010)>>2,fcache_load_ptr_
27398                 | LR__4010
27398     0B 10 DC FC | 	rep	@LR__4013, #11
2739c                 | LR__4011
2739c     00 FB E1 F8 | 	getbyte	result1, _var01, #0
273a0     01 FA 45 F0 | 	shr	result1, #1
273a4     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
273a8     07 00 66 F0 | 	shl	_var01, #7
273ac     00 FB 01 F1 | 	add	result1, _var01
273b0     09 01 C2 FA | 	rdbyte	_var01, arg01
273b4     FD 00 02 F1 | 	add	_var01, result1
273b8     01 12 06 F1 | 	add	arg01, #1
273bc                 | LR__4012
273bc                 | LR__4013
273bc                 | ' 	return sum;
273bc     00 FB 01 F6 | 	mov	result1, _var01
273c0                 | _fatfs_cc_sum_sfn_ret
273c0     2D 00 64 FD | 	ret
273c4                 | 
273c4                 | _fatfs_cc_dir_read
273c4     0C 4A 05 F6 | 	mov	COUNT_, #12
273c8     A8 00 A0 FD | 	call	#pushregs_
273cc     09 1F 02 F6 | 	mov	local01, arg01
273d0     0A 21 02 F6 | 	mov	local02, arg02
273d4     04 22 06 F6 | 	mov	local03, #4
273d8     0F 25 02 FB | 	rdlong	local04, local01
273dc     FF 26 06 F6 | 	mov	local05, #255
273e0     FF 28 06 F6 | 	mov	local06, #255
273e4                 | ' )
273e4                 | ' {
273e4                 | ' 	FRESULT res = FR_NO_FILE;
273e4                 | ' 	FATFS *fs = dp->obj.fs;
273e4                 | ' 	BYTE attr, b;
273e4                 | ' 
273e4                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
273e4                 | ' 
273e4                 | ' 
273e4                 | ' 	while (dp->sect) {
273e4                 | LR__4020
273e4     18 1E 06 F1 | 	add	local01, #24
273e8     0F FB 09 FB | 	rdlong	result1, local01 wz
273ec     18 1E 86 F1 | 	sub	local01, #24
273f0     AC 01 90 AD |  if_e	jmp	#LR__4030
273f4     18 1E 06 F1 | 	add	local01, #24
273f8     0F 15 02 FB | 	rdlong	arg02, local01
273fc     18 1E 86 F1 | 	sub	local01, #24
27400     12 13 02 F6 | 	mov	arg01, local04
27404     AC ED BF FD | 	call	#_fatfs_cc_move_window
27408     FD 22 0A F6 | 	mov	local03, result1 wz
2740c     90 01 90 5D |  if_ne	jmp	#LR__4030
27410     1C 1E 06 F1 | 	add	local01, #28
27414     0F FB 01 FB | 	rdlong	result1, local01
27418     1C 1E 86 F1 | 	sub	local01, #28
2741c     FD 2A C2 FA | 	rdbyte	local07, result1
27420     15 FB 01 F6 | 	mov	result1, local07
27424     07 FA 4D F7 | 	zerox	result1, #7 wz
27428     04 22 06 A6 |  if_e	mov	local03, #4
2742c                 | ' 			res = FR_NO_FILE; break;
2742c     70 01 90 AD |  if_e	jmp	#LR__4030
27430     1C 1E 06 F1 | 	add	local01, #28
27434     0F 2D 02 FB | 	rdlong	local08, local01
27438     0B 2C 06 F1 | 	add	local08, #11
2743c     16 2F C2 FA | 	rdbyte	local09, local08
27440     3F 2E 06 F5 | 	and	local09, #63
27444     16 1E 86 F1 | 	sub	local01, #22
27448     0F 2F 42 FC | 	wrbyte	local09, local01
2744c     06 1E 86 F1 | 	sub	local01, #6
27450     15 FB E1 F8 | 	getbyte	result1, local07, #0
27454     E5 FA 0D F2 | 	cmp	result1, #229 wz
27458     15 2D 02 56 |  if_ne	mov	local08, local07
2745c     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
27460     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
27464     1C 00 90 AD |  if_e	jmp	#LR__4021
27468     00 30 06 F6 | 	mov	local10, #0
2746c     17 2D E2 F8 | 	getbyte	local08, local09, #0
27470     20 2C 26 F5 | 	andn	local08, #32
27474     08 2C 0E F2 | 	cmp	local08, #8 wz
27478     01 30 06 A6 |  if_e	mov	local10, #1
2747c     10 31 0A F2 | 	cmp	local10, local02 wz
27480     08 00 90 AD |  if_e	jmp	#LR__4022
27484                 | LR__4021
27484     FF 26 06 F6 | 	mov	local05, #255
27488     00 01 90 FD | 	jmp	#LR__4029
2748c                 | LR__4022
2748c     17 2F E2 F8 | 	getbyte	local09, local09, #0
27490     0F 2E 0E F2 | 	cmp	local09, #15 wz
27494     B4 00 90 5D |  if_ne	jmp	#LR__4026
27498     15 33 E2 F8 | 	getbyte	local11, local07, #0
2749c     40 32 CE F7 | 	test	local11, #64 wz
274a0     30 00 90 AD |  if_e	jmp	#LR__4023
274a4     1C 1E 06 F1 | 	add	local01, #28
274a8     0F 33 02 FB | 	rdlong	local11, local01
274ac     0D 32 06 F1 | 	add	local11, #13
274b0     19 29 C2 FA | 	rdbyte	local06, local11
274b4     15 2B E2 F8 | 	getbyte	local07, local07, #0
274b8     BF 2A 06 F5 | 	and	local07, #191
274bc     15 27 02 F6 | 	mov	local05, local07
274c0     0C 1E 86 F1 | 	sub	local01, #12
274c4     0F 33 02 FB | 	rdlong	local11, local01
274c8     1C 1E 06 F1 | 	add	local01, #28
274cc     0F 33 62 FC | 	wrlong	local11, local01
274d0     2C 1E 86 F1 | 	sub	local01, #44
274d4                 | LR__4023
274d4     15 2D E2 F8 | 	getbyte	local08, local07, #0
274d8     13 31 E2 F8 | 	getbyte	local10, local05, #0
274dc     18 2D 0A F2 | 	cmp	local08, local10 wz
274e0     5C 00 90 5D |  if_ne	jmp	#LR__4024
274e4     14 31 E2 F8 | 	getbyte	local10, local06, #0
274e8     1C 1E 06 F1 | 	add	local01, #28
274ec     0F 2F 02 FB | 	rdlong	local09, local01
274f0     1C 1E 86 F1 | 	sub	local01, #28
274f4     0D 2E 06 F1 | 	add	local09, #13
274f8     17 2D C2 FA | 	rdbyte	local08, local09
274fc     16 2F E2 F8 | 	getbyte	local09, local08, #0
27500     17 31 0A F2 | 	cmp	local10, local09 wz
27504     38 00 90 5D |  if_ne	jmp	#LR__4024
27508     0C 24 06 F1 | 	add	local04, #12
2750c     12 13 02 FB | 	rdlong	arg01, local04
27510     0C 24 86 F1 | 	sub	local04, #12
27514     1C 1E 06 F1 | 	add	local01, #28
27518     0F 35 02 FB | 	rdlong	local12, local01
2751c     1C 1E 86 F1 | 	sub	local01, #28
27520     1A 15 02 F6 | 	mov	arg02, local12
27524     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
27528     00 FA 4D F2 | 	cmps	result1, #0 wz
2752c     13 35 02 56 |  if_ne	mov	local12, local05
27530     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
27534     01 34 86 51 |  if_ne	sub	local12, #1
27538     1A 33 02 56 |  if_ne	mov	local11, local12
2753c     04 00 90 5D |  if_ne	jmp	#LR__4025
27540                 | LR__4024
27540     FF 32 06 F6 | 	mov	local11, #255
27544                 | LR__4025
27544     19 27 02 F6 | 	mov	local05, local11
27548     40 00 90 FD | 	jmp	#LR__4028
2754c                 | LR__4026
2754c     13 33 02 F6 | 	mov	local11, local05
27550     07 32 4E F7 | 	zerox	local11, #7 wz
27554     20 00 90 5D |  if_ne	jmp	#LR__4027
27558     14 29 E2 F8 | 	getbyte	local06, local06, #0
2755c     1C 1E 06 F1 | 	add	local01, #28
27560     0F 13 02 FB | 	rdlong	arg01, local01
27564     1C 1E 86 F1 | 	sub	local01, #28
27568     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
2756c     FD FA E1 F8 | 	getbyte	result1, result1, #0
27570     FD 28 0A F2 | 	cmp	local06, result1 wz
27574     28 00 90 AD |  if_e	jmp	#LR__4030
27578                 | LR__4027
27578     2C 1E 06 F1 | 	add	local01, #44
2757c     FF FF FF FF 
27580     0F FF 6B FC | 	wrlong	##-1, local01
27584     2C 1E 86 F1 | 	sub	local01, #44
27588                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
27588                 | ' 					}
27588                 | ' 					break;
27588     14 00 90 FD | 	jmp	#LR__4030
2758c                 | LR__4028
2758c                 | LR__4029
2758c     0F 13 02 F6 | 	mov	arg01, local01
27590     00 14 06 F6 | 	mov	arg02, #0
27594     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
27598     FD 22 0A F6 | 	mov	local03, result1 wz
2759c     44 FE 9F AD |  if_e	jmp	#LR__4020
275a0                 | LR__4030
275a0     00 22 0E F2 | 	cmp	local03, #0 wz
275a4     18 1E 06 51 |  if_ne	add	local01, #24
275a8     0F 01 68 5C |  if_ne	wrlong	#0, local01
275ac                 | ' 	return res;
275ac     11 FB 01 F6 | 	mov	result1, local03
275b0     A7 F0 03 F6 | 	mov	ptra, fp
275b4     B2 00 A0 FD | 	call	#popregs_
275b8                 | _fatfs_cc_dir_read_ret
275b8     2D 00 64 FD | 	ret
275bc                 | 
275bc                 | _fatfs_cc_dir_find
275bc     0B 4A 05 F6 | 	mov	COUNT_, #11
275c0     A8 00 A0 FD | 	call	#pushregs_
275c4     09 1F 02 F6 | 	mov	local01, arg01
275c8     0F 21 02 FB | 	rdlong	local02, local01
275cc     0F 13 02 F6 | 	mov	arg01, local01
275d0     00 14 06 F6 | 	mov	arg02, #0
275d4     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
275d8     00 FA 0D F2 | 	cmp	result1, #0 wz
275dc     18 02 90 5D |  if_ne	jmp	#LR__4052
275e0     FF 22 06 F6 | 	mov	local03, #255
275e4     FF 24 06 F6 | 	mov	local04, #255
275e8     2C 1E 06 F1 | 	add	local01, #44
275ec     FF FF FF FF 
275f0     0F FF 6B FC | 	wrlong	##-1, local01
275f4     2C 1E 86 F1 | 	sub	local01, #44
275f8                 | ' #line 2404 "ff.c"
275f8                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
275f8                 | ' 
275f8                 | ' 	do {
275f8                 | LR__4040
275f8     18 1E 06 F1 | 	add	local01, #24
275fc     0F 15 02 FB | 	rdlong	arg02, local01
27600     18 1E 86 F1 | 	sub	local01, #24
27604     10 13 02 F6 | 	mov	arg01, local02
27608     A8 EB BF FD | 	call	#_fatfs_cc_move_window
2760c     FD 26 0A F6 | 	mov	local05, result1 wz
27610     E0 01 90 5D |  if_ne	jmp	#LR__4051
27614     1C 1E 06 F1 | 	add	local01, #28
27618     0F 17 02 FB | 	rdlong	arg03, local01
2761c     1C 1E 86 F1 | 	sub	local01, #28
27620     0B 29 C2 FA | 	rdbyte	local06, arg03
27624     14 17 02 F6 | 	mov	arg03, local06
27628     07 16 4E F7 | 	zerox	arg03, #7 wz
2762c     04 26 06 A6 |  if_e	mov	local05, #4
27630     C0 01 90 AD |  if_e	jmp	#LR__4051
27634     1C 1E 06 F1 | 	add	local01, #28
27638     0F 2B 02 FB | 	rdlong	local07, local01
2763c     15 17 02 F6 | 	mov	arg03, local07
27640     0B 16 06 F1 | 	add	arg03, #11
27644     0B 2D C2 FA | 	rdbyte	local08, arg03
27648     3F 2C 06 F5 | 	and	local08, #63
2764c     16 1E 86 F1 | 	sub	local01, #22
27650     0F 2D 42 FC | 	wrbyte	local08, local01
27654     06 1E 86 F1 | 	sub	local01, #6
27658     14 17 E2 F8 | 	getbyte	arg03, local06, #0
2765c     E5 16 0E F2 | 	cmp	arg03, #229 wz
27660     18 00 90 AD |  if_e	jmp	#LR__4041
27664     16 17 E2 F8 | 	getbyte	arg03, local08, #0
27668     08 16 CE F7 | 	test	arg03, #8 wz
2766c     16 2B 02 56 |  if_ne	mov	local07, local08
27670     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
27674     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
27678     18 00 90 AD |  if_e	jmp	#LR__4042
2767c                 | LR__4041
2767c     FF 24 06 F6 | 	mov	local04, #255
27680     2C 1E 06 F1 | 	add	local01, #44
27684     FF FF FF FF 
27688     0F FF 6B FC | 	wrlong	##-1, local01
2768c     2C 1E 86 F1 | 	sub	local01, #44
27690     4C 01 90 FD | 	jmp	#LR__4050
27694                 | LR__4042
27694     16 2D E2 F8 | 	getbyte	local08, local08, #0
27698     0F 2C 0E F2 | 	cmp	local08, #15 wz
2769c     C8 00 90 5D |  if_ne	jmp	#LR__4046
276a0     2B 1E 06 F1 | 	add	local01, #43
276a4     0F 2D C2 FA | 	rdbyte	local08, local01
276a8     2B 1E 86 F1 | 	sub	local01, #43
276ac     40 2C CE F7 | 	test	local08, #64 wz
276b0     2C 01 90 5D |  if_ne	jmp	#LR__4049
276b4     14 2F E2 F8 | 	getbyte	local09, local06, #0
276b8     40 2E CE F7 | 	test	local09, #64 wz
276bc     30 00 90 AD |  if_e	jmp	#LR__4043
276c0     1C 1E 06 F1 | 	add	local01, #28
276c4     0F 2F 02 FB | 	rdlong	local09, local01
276c8     0D 2E 06 F1 | 	add	local09, #13
276cc     17 23 C2 FA | 	rdbyte	local03, local09
276d0     14 29 E2 F8 | 	getbyte	local06, local06, #0
276d4     BF 28 06 F5 | 	and	local06, #191
276d8     14 25 02 F6 | 	mov	local04, local06
276dc     0C 1E 86 F1 | 	sub	local01, #12
276e0     0F 2F 02 FB | 	rdlong	local09, local01
276e4     1C 1E 06 F1 | 	add	local01, #28
276e8     0F 2F 62 FC | 	wrlong	local09, local01
276ec     2C 1E 86 F1 | 	sub	local01, #44
276f0                 | LR__4043
276f0     14 31 E2 F8 | 	getbyte	local10, local06, #0
276f4     12 2B E2 F8 | 	getbyte	local07, local04, #0
276f8     15 31 0A F2 | 	cmp	local10, local07 wz
276fc     5C 00 90 5D |  if_ne	jmp	#LR__4044
27700     11 2D E2 F8 | 	getbyte	local08, local03, #0
27704     1C 1E 06 F1 | 	add	local01, #28
27708     0F 2B 02 FB | 	rdlong	local07, local01
2770c     1C 1E 86 F1 | 	sub	local01, #28
27710     0D 2A 06 F1 | 	add	local07, #13
27714     15 29 C2 FA | 	rdbyte	local06, local07
27718     14 2B E2 F8 | 	getbyte	local07, local06, #0
2771c     15 2D 0A F2 | 	cmp	local08, local07 wz
27720     38 00 90 5D |  if_ne	jmp	#LR__4044
27724     0C 20 06 F1 | 	add	local02, #12
27728     10 13 02 FB | 	rdlong	arg01, local02
2772c     0C 20 86 F1 | 	sub	local02, #12
27730     1C 1E 06 F1 | 	add	local01, #28
27734     0F 33 02 FB | 	rdlong	local11, local01
27738     1C 1E 86 F1 | 	sub	local01, #28
2773c     19 15 02 F6 | 	mov	arg02, local11
27740     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
27744     00 FA 4D F2 | 	cmps	result1, #0 wz
27748     12 33 02 56 |  if_ne	mov	local11, local04
2774c     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
27750     01 32 86 51 |  if_ne	sub	local11, #1
27754     19 2F 02 56 |  if_ne	mov	local09, local11
27758     04 00 90 5D |  if_ne	jmp	#LR__4045
2775c                 | LR__4044
2775c     FF 2E 06 F6 | 	mov	local09, #255
27760                 | LR__4045
27760     17 25 02 F6 | 	mov	local04, local09
27764     78 00 90 FD | 	jmp	#LR__4049
27768                 | LR__4046
27768     12 2F 02 F6 | 	mov	local09, local04
2776c     07 2E 4E F7 | 	zerox	local09, #7 wz
27770     20 00 90 5D |  if_ne	jmp	#LR__4047
27774     11 31 E2 F8 | 	getbyte	local10, local03, #0
27778     1C 1E 06 F1 | 	add	local01, #28
2777c     0F 13 02 FB | 	rdlong	arg01, local01
27780     1C 1E 86 F1 | 	sub	local01, #28
27784     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
27788     FD FA E1 F8 | 	getbyte	result1, result1, #0
2778c     FD 30 0A F2 | 	cmp	local10, result1 wz
27790     60 00 90 AD |  if_e	jmp	#LR__4051
27794                 | LR__4047
27794     2B 1E 06 F1 | 	add	local01, #43
27798     0F 2F C2 FA | 	rdbyte	local09, local01
2779c     2B 1E 86 F1 | 	sub	local01, #43
277a0     01 2E CE F7 | 	test	local09, #1 wz
277a4     24 00 90 5D |  if_ne	jmp	#LR__4048
277a8     1C 1E 06 F1 | 	add	local01, #28
277ac     0F 13 02 FB | 	rdlong	arg01, local01
277b0     04 1E 06 F1 | 	add	local01, #4
277b4     0F 15 02 F6 | 	mov	arg02, local01
277b8     20 1E 86 F1 | 	sub	local01, #32
277bc     0B 16 06 F6 | 	mov	arg03, #11
277c0     88 DA BF FD | 	call	#_fatfs_cc_memcmp
277c4     00 FA 0D F2 | 	cmp	result1, #0 wz
277c8     28 00 90 AD |  if_e	jmp	#LR__4051
277cc                 | LR__4048
277cc     FF 24 06 F6 | 	mov	local04, #255
277d0     2C 1E 06 F1 | 	add	local01, #44
277d4     FF FF FF FF 
277d8     0F FF 6B FC | 	wrlong	##-1, local01
277dc     2C 1E 86 F1 | 	sub	local01, #44
277e0                 | LR__4049
277e0                 | LR__4050
277e0     0F 13 02 F6 | 	mov	arg01, local01
277e4     00 14 06 F6 | 	mov	arg02, #0
277e8     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
277ec     FD 26 0A F6 | 	mov	local05, result1 wz
277f0     04 FE 9F AD |  if_e	jmp	#LR__4040
277f4                 | LR__4051
277f4                 | ' 
277f4                 | ' 	return res;
277f4     13 FB 01 F6 | 	mov	result1, local05
277f8                 | LR__4052
277f8     A7 F0 03 F6 | 	mov	ptra, fp
277fc     B2 00 A0 FD | 	call	#popregs_
27800                 | _fatfs_cc_dir_find_ret
27800     2D 00 64 FD | 	ret
27804                 | 
27804                 | _fatfs_cc_dir_register
27804     0A 4A 05 F6 | 	mov	COUNT_, #10
27808     A8 00 A0 FD | 	call	#pushregs_
2780c     2C F0 07 F1 | 	add	ptra, #44
27810     04 4E 05 F1 | 	add	fp, #4
27814     A7 12 62 FC | 	wrlong	arg01, fp
27818     09 1F 02 FB | 	rdlong	local01, arg01
2781c     08 4E 05 F1 | 	add	fp, #8
27820     A7 1E 62 FC | 	wrlong	local01, fp
27824     08 4E 85 F1 | 	sub	fp, #8
27828     A7 20 02 FB | 	rdlong	local02, fp
2782c     04 4E 85 F1 | 	sub	fp, #4
27830     2B 20 06 F1 | 	add	local02, #43
27834     10 21 C2 FA | 	rdbyte	local02, local02
27838     A0 20 CE F7 | 	test	local02, #160 wz
2783c     06 FA 05 56 |  if_ne	mov	result1, #6
27840     F8 03 90 5D |  if_ne	jmp	#LR__4075
27844                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
27844     14 4E 05 F1 | 	add	fp, #20
27848     A7 00 68 FC | 	wrlong	#0, fp
2784c     14 4E 85 F1 | 	sub	fp, #20
27850     97 28 48 FB | 	callpa	#(@LR__4061-@LR__4060)>>2,fcache_load_ptr_
27854                 | LR__4060
27854     0C 4E 05 F1 | 	add	fp, #12
27858     A7 20 02 FB | 	rdlong	local02, fp
2785c     0C 20 06 F1 | 	add	local02, #12
27860     10 23 02 FB | 	rdlong	local03, local02
27864     08 4E 05 F1 | 	add	fp, #8
27868     A7 24 02 FB | 	rdlong	local04, fp
2786c     14 4E 85 F1 | 	sub	fp, #20
27870     01 24 66 F0 | 	shl	local04, #1
27874     11 25 02 F1 | 	add	local04, local03
27878     12 21 EA FA | 	rdword	local02, local04 wz
2787c     24 00 90 AD |  if_e	jmp	#LR__4062
27880     14 4E 05 F1 | 	add	fp, #20
27884     A7 26 02 FB | 	rdlong	local05, fp
27888     13 29 02 F6 | 	mov	local06, local05
2788c     13 2B 02 F6 | 	mov	local07, local05
27890     15 2D 02 F6 | 	mov	local08, local07
27894     01 2C 06 F1 | 	add	local08, #1
27898     A7 2C 62 FC | 	wrlong	local08, fp
2789c     14 4E 85 F1 | 	sub	fp, #20
278a0     B0 FF 9F FD | 	jmp	#LR__4060
278a4                 | LR__4061
278a4                 | LR__4062
278a4     1C 4E 05 F1 | 	add	fp, #28
278a8     A7 12 02 F6 | 	mov	arg01, fp
278ac     18 4E 85 F1 | 	sub	fp, #24
278b0     A7 14 02 FB | 	rdlong	arg02, fp
278b4     04 4E 85 F1 | 	sub	fp, #4
278b8     20 14 06 F1 | 	add	arg02, #32
278bc     0C 16 06 F6 | 	mov	arg03, #12
278c0     74 71 BF FD | 	call	#__system____builtin_memmove
278c4     27 4E 05 F1 | 	add	fp, #39
278c8     A7 2E C2 FA | 	rdbyte	local09, fp
278cc     27 4E 85 F1 | 	sub	fp, #39
278d0     01 2E CE F7 | 	test	local09, #1 wz
278d4     F4 00 90 AD |  if_e	jmp	#LR__4065
278d8     04 4E 05 F1 | 	add	fp, #4
278dc     A7 30 02 FB | 	rdlong	local10, fp
278e0     2B 30 06 F1 | 	add	local10, #43
278e4     18 81 48 FC | 	wrbyte	#64, local10
278e8                 | ' 		dp->fn[ 11 ] =  0x40 ;
278e8                 | ' 		for (n = 1; n < 100; n++) {
278e8     0C 4E 05 F1 | 	add	fp, #12
278ec     A7 02 68 FC | 	wrlong	#1, fp
278f0     10 4E 85 F1 | 	sub	fp, #16
278f4                 | LR__4063
278f4     10 4E 05 F1 | 	add	fp, #16
278f8     A7 20 02 FB | 	rdlong	local02, fp
278fc     10 4E 85 F1 | 	sub	fp, #16
27900     64 20 16 F2 | 	cmp	local02, #100 wc
27904     70 00 90 3D |  if_ae	jmp	#LR__4064
27908     04 4E 05 F1 | 	add	fp, #4
2790c     A7 12 02 FB | 	rdlong	arg01, fp
27910     20 12 06 F1 | 	add	arg01, #32
27914     18 4E 05 F1 | 	add	fp, #24
27918     A7 14 02 F6 | 	mov	arg02, fp
2791c     10 4E 85 F1 | 	sub	fp, #16
27920     A7 30 02 FB | 	rdlong	local10, fp
27924     0C 30 06 F1 | 	add	local10, #12
27928     18 17 02 FB | 	rdlong	arg03, local10
2792c     04 4E 05 F1 | 	add	fp, #4
27930     A7 18 02 FB | 	rdlong	arg04, fp
27934     10 4E 85 F1 | 	sub	fp, #16
27938     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
2793c     04 4E 05 F1 | 	add	fp, #4
27940     A7 12 02 FB | 	rdlong	arg01, fp
27944     04 4E 85 F1 | 	sub	fp, #4
27948     70 FC BF FD | 	call	#_fatfs_cc_dir_find
2794c     08 4E 05 F1 | 	add	fp, #8
27950     A7 FA 61 FC | 	wrlong	result1, fp
27954     00 FA 4D F2 | 	cmps	result1, #0 wz
27958     08 4E 85 F1 | 	sub	fp, #8
2795c     18 00 90 5D |  if_ne	jmp	#LR__4064
27960     10 4E 05 F1 | 	add	fp, #16
27964     A7 30 02 FB | 	rdlong	local10, fp
27968     01 30 06 F1 | 	add	local10, #1
2796c     A7 30 62 FC | 	wrlong	local10, fp
27970     10 4E 85 F1 | 	sub	fp, #16
27974     7C FF 9F FD | 	jmp	#LR__4063
27978                 | LR__4064
27978     10 4E 05 F1 | 	add	fp, #16
2797c     A7 30 02 FB | 	rdlong	local10, fp
27980     10 4E 85 F1 | 	sub	fp, #16
27984     64 30 0E F2 | 	cmp	local10, #100 wz
27988     07 FA 05 A6 |  if_e	mov	result1, #7
2798c     AC 02 90 AD |  if_e	jmp	#LR__4075
27990     08 4E 05 F1 | 	add	fp, #8
27994     A7 30 02 FB | 	rdlong	local10, fp
27998     08 4E 85 F1 | 	sub	fp, #8
2799c     04 30 0E F2 | 	cmp	local10, #4 wz
279a0     08 4E 05 51 |  if_ne	add	fp, #8
279a4     A7 FA 01 5B |  if_ne	rdlong	result1, fp
279a8     08 4E 85 51 |  if_ne	sub	fp, #8
279ac     8C 02 90 5D |  if_ne	jmp	#LR__4075
279b0     04 4E 05 F1 | 	add	fp, #4
279b4     A7 30 02 FB | 	rdlong	local10, fp
279b8     23 4E 05 F1 | 	add	fp, #35
279bc     A7 1E C2 FA | 	rdbyte	local01, fp
279c0     27 4E 85 F1 | 	sub	fp, #39
279c4     2B 30 06 F1 | 	add	local10, #43
279c8     18 1F 42 FC | 	wrbyte	local01, local10
279cc                 | LR__4065
279cc     27 4E 05 F1 | 	add	fp, #39
279d0     A7 20 C2 FA | 	rdbyte	local02, fp
279d4     27 4E 85 F1 | 	sub	fp, #39
279d8     02 20 CE F7 | 	test	local02, #2 wz
279dc     20 00 90 AD |  if_e	jmp	#LR__4066
279e0     14 4E 05 F1 | 	add	fp, #20
279e4     A7 30 02 FB | 	rdlong	local10, fp
279e8     0C 30 06 F1 | 	add	local10, #12
279ec     0D 30 16 FD | 	qdiv	local10, #13
279f0     14 4E 85 F1 | 	sub	fp, #20
279f4     18 30 62 FD | 	getqx	local10
279f8     01 30 06 F1 | 	add	local10, #1
279fc     04 00 90 FD | 	jmp	#LR__4067
27a00                 | LR__4066
27a00     01 30 06 F6 | 	mov	local10, #1
27a04                 | LR__4067
27a04     18 4E 05 F1 | 	add	fp, #24
27a08     A7 30 62 FC | 	wrlong	local10, fp
27a0c     14 4E 85 F1 | 	sub	fp, #20
27a10     A7 12 02 FB | 	rdlong	arg01, fp
27a14     18 15 02 F6 | 	mov	arg02, local10
27a18     04 4E 85 F1 | 	sub	fp, #4
27a1c     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
27a20     08 4E 05 F1 | 	add	fp, #8
27a24     A7 FA 61 FC | 	wrlong	result1, fp
27a28     08 4E 85 F1 | 	sub	fp, #8
27a2c     00 FA 0D F2 | 	cmp	result1, #0 wz
27a30     38 01 90 5D |  if_ne	jmp	#LR__4072
27a34     18 4E 05 F1 | 	add	fp, #24
27a38     A7 30 02 FB | 	rdlong	local10, fp
27a3c     01 30 8E F1 | 	sub	local10, #1 wz
27a40     A7 30 62 FC | 	wrlong	local10, fp
27a44     18 4E 85 F1 | 	sub	fp, #24
27a48     20 01 90 AD |  if_e	jmp	#LR__4072
27a4c     04 4E 05 F1 | 	add	fp, #4
27a50     A7 30 02 FB | 	rdlong	local10, fp
27a54     18 13 02 F6 | 	mov	arg01, local10
27a58     14 4E 05 F1 | 	add	fp, #20
27a5c     A7 18 02 FB | 	rdlong	arg04, fp
27a60     18 4E 85 F1 | 	sub	fp, #24
27a64     05 18 66 F0 | 	shl	arg04, #5
27a68     10 30 06 F1 | 	add	local10, #16
27a6c     18 15 02 FB | 	rdlong	arg02, local10
27a70     0C 15 82 F1 | 	sub	arg02, arg04
27a74     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
27a78     08 4E 05 F1 | 	add	fp, #8
27a7c     A7 FA 61 FC | 	wrlong	result1, fp
27a80     08 4E 85 F1 | 	sub	fp, #8
27a84     00 FA 0D F2 | 	cmp	result1, #0 wz
27a88     E0 00 90 5D |  if_ne	jmp	#LR__4071
27a8c     04 4E 05 F1 | 	add	fp, #4
27a90     A7 12 02 FB | 	rdlong	arg01, fp
27a94     04 4E 85 F1 | 	sub	fp, #4
27a98     20 12 06 F1 | 	add	arg01, #32
27a9c     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
27aa0     FD 30 02 F6 | 	mov	local10, result1
27aa4     28 4E 05 F1 | 	add	fp, #40
27aa8     A7 30 42 FC | 	wrbyte	local10, fp
27aac     28 4E 85 F1 | 	sub	fp, #40
27ab0                 | ' 			sum = sum_sfn(dp->fn);
27ab0                 | ' 			do {
27ab0                 | LR__4068
27ab0     0C 4E 05 F1 | 	add	fp, #12
27ab4     A7 12 02 FB | 	rdlong	arg01, fp
27ab8     08 4E 85 F1 | 	sub	fp, #8
27abc     A7 1E 02 FB | 	rdlong	local01, fp
27ac0     04 4E 85 F1 | 	sub	fp, #4
27ac4     18 1E 06 F1 | 	add	local01, #24
27ac8     0F 15 02 FB | 	rdlong	arg02, local01
27acc     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
27ad0     08 4E 05 F1 | 	add	fp, #8
27ad4     A7 FA 61 FC | 	wrlong	result1, fp
27ad8     00 FA 4D F2 | 	cmps	result1, #0 wz
27adc     08 4E 85 F1 | 	sub	fp, #8
27ae0     88 00 90 5D |  if_ne	jmp	#LR__4070
27ae4     0C 4E 05 F1 | 	add	fp, #12
27ae8     A7 20 02 FB | 	rdlong	local02, fp
27aec     0C 20 06 F1 | 	add	local02, #12
27af0     10 13 02 FB | 	rdlong	arg01, local02
27af4     08 4E 85 F1 | 	sub	fp, #8
27af8     A7 1E 02 FB | 	rdlong	local01, fp
27afc     1C 1E 06 F1 | 	add	local01, #28
27b00     0F 15 02 FB | 	rdlong	arg02, local01
27b04     14 4E 05 F1 | 	add	fp, #20
27b08     A7 16 02 FB | 	rdlong	arg03, fp
27b0c     10 4E 05 F1 | 	add	fp, #16
27b10     A7 18 C2 FA | 	rdbyte	arg04, fp
27b14     28 4E 85 F1 | 	sub	fp, #40
27b18     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
27b1c     0C 4E 05 F1 | 	add	fp, #12
27b20     A7 30 02 FB | 	rdlong	local10, fp
27b24     03 30 06 F1 | 	add	local10, #3
27b28     18 03 48 FC | 	wrbyte	#1, local10
27b2c     08 4E 85 F1 | 	sub	fp, #8
27b30     A7 12 02 FB | 	rdlong	arg01, fp
27b34     04 4E 85 F1 | 	sub	fp, #4
27b38     00 14 06 F6 | 	mov	arg02, #0
27b3c     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
27b40     08 4E 05 F1 | 	add	fp, #8
27b44     A7 FA 61 FC | 	wrlong	result1, fp
27b48     00 FA 4D F2 | 	cmps	result1, #0 wz
27b4c     08 4E 85 F1 | 	sub	fp, #8
27b50     18 00 90 5D |  if_ne	jmp	#LR__4069
27b54     18 4E 05 F1 | 	add	fp, #24
27b58     A7 30 02 FB | 	rdlong	local10, fp
27b5c     01 30 8E F1 | 	sub	local10, #1 wz
27b60     A7 30 62 FC | 	wrlong	local10, fp
27b64     18 4E 85 F1 | 	sub	fp, #24
27b68     44 FF 9F 5D |  if_ne	jmp	#LR__4068
27b6c                 | LR__4069
27b6c                 | LR__4070
27b6c                 | LR__4071
27b6c                 | LR__4072
27b6c     08 4E 05 F1 | 	add	fp, #8
27b70     A7 30 0A FB | 	rdlong	local10, fp wz
27b74     08 4E 85 F1 | 	sub	fp, #8
27b78     B4 00 90 5D |  if_ne	jmp	#LR__4074
27b7c     0C 4E 05 F1 | 	add	fp, #12
27b80     A7 12 02 FB | 	rdlong	arg01, fp
27b84     08 4E 85 F1 | 	sub	fp, #8
27b88     A7 1E 02 FB | 	rdlong	local01, fp
27b8c     04 4E 85 F1 | 	sub	fp, #4
27b90     18 1E 06 F1 | 	add	local01, #24
27b94     0F 15 02 FB | 	rdlong	arg02, local01
27b98     18 E6 BF FD | 	call	#_fatfs_cc_move_window
27b9c     08 4E 05 F1 | 	add	fp, #8
27ba0     A7 FA 61 FC | 	wrlong	result1, fp
27ba4     08 4E 85 F1 | 	sub	fp, #8
27ba8     00 FA 0D F2 | 	cmp	result1, #0 wz
27bac     80 00 90 5D |  if_ne	jmp	#LR__4073
27bb0     04 4E 05 F1 | 	add	fp, #4
27bb4     A7 20 02 FB | 	rdlong	local02, fp
27bb8     04 4E 85 F1 | 	sub	fp, #4
27bbc     1C 20 06 F1 | 	add	local02, #28
27bc0     10 13 02 FB | 	rdlong	arg01, local02
27bc4     00 14 06 F6 | 	mov	arg02, #0
27bc8     20 16 06 F6 | 	mov	arg03, #32
27bcc     98 00 A0 FD | 	call	#\builtin_bytefill_
27bd0     04 4E 05 F1 | 	add	fp, #4
27bd4     A7 14 02 FB | 	rdlong	arg02, fp
27bd8     0A 1F 02 F6 | 	mov	local01, arg02
27bdc     1C 1E 06 F1 | 	add	local01, #28
27be0     0F 13 02 FB | 	rdlong	arg01, local01
27be4     04 4E 85 F1 | 	sub	fp, #4
27be8     20 14 06 F1 | 	add	arg02, #32
27bec     0B 16 06 F6 | 	mov	arg03, #11
27bf0     44 6E BF FD | 	call	#__system____builtin_memmove
27bf4     04 4E 05 F1 | 	add	fp, #4
27bf8     A7 2E 02 FB | 	rdlong	local09, fp
27bfc     17 31 02 F6 | 	mov	local10, local09
27c00     1C 30 06 F1 | 	add	local10, #28
27c04     18 1F 02 FB | 	rdlong	local01, local10
27c08     2B 2E 06 F1 | 	add	local09, #43
27c0c     17 31 C2 FA | 	rdbyte	local10, local09
27c10     18 30 06 F5 | 	and	local10, #24
27c14     0C 1E 06 F1 | 	add	local01, #12
27c18     0F 31 42 FC | 	wrbyte	local10, local01
27c1c     08 4E 05 F1 | 	add	fp, #8
27c20     A7 30 02 FB | 	rdlong	local10, fp
27c24     0C 4E 85 F1 | 	sub	fp, #12
27c28     03 30 06 F1 | 	add	local10, #3
27c2c     18 03 48 FC | 	wrbyte	#1, local10
27c30                 | LR__4073
27c30                 | LR__4074
27c30                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
27c30                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
27c30                 | ' 
27c30                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
27c30                 | ' 
27c30                 | ' 			fs->wflag = 1;
27c30                 | ' 		}
27c30                 | ' 	}
27c30                 | ' 
27c30                 | ' 	return res;
27c30     08 4E 05 F1 | 	add	fp, #8
27c34     A7 FA 01 FB | 	rdlong	result1, fp
27c38     08 4E 85 F1 | 	sub	fp, #8
27c3c                 | LR__4075
27c3c     A7 F0 03 F6 | 	mov	ptra, fp
27c40     B2 00 A0 FD | 	call	#popregs_
27c44                 | _fatfs_cc_dir_register_ret
27c44     2D 00 64 FD | 	ret
27c48                 | 
27c48                 | _fatfs_cc_dir_remove
27c48     05 4A 05 F6 | 	mov	COUNT_, #5
27c4c     A8 00 A0 FD | 	call	#pushregs_
27c50     09 1F 02 F6 | 	mov	local01, arg01
27c54     0F 21 02 FB | 	rdlong	local02, local01
27c58     10 1E 06 F1 | 	add	local01, #16
27c5c     0F 23 02 FB | 	rdlong	local03, local01
27c60     1C 1E 06 F1 | 	add	local01, #28
27c64     0F 15 02 FB | 	rdlong	arg02, local01
27c68     2C 1E 86 F1 | 	sub	local01, #44
27c6c     FF FF 7F FF 
27c70     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
27c74     00 24 06 A6 |  if_e	mov	local04, #0
27c78     18 00 90 AD |  if_e	jmp	#LR__4080
27c7c     0F 13 02 F6 | 	mov	arg01, local01
27c80     2C 1E 06 F1 | 	add	local01, #44
27c84     0F 15 02 FB | 	rdlong	arg02, local01
27c88     2C 1E 86 F1 | 	sub	local01, #44
27c8c     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
27c90     FD 24 02 F6 | 	mov	local04, result1
27c94                 | LR__4080
27c94     12 27 0A F6 | 	mov	local05, local04 wz
27c98     64 00 90 5D |  if_ne	jmp	#LR__4083
27c9c                 | ' 		do {
27c9c                 | LR__4081
27c9c     18 1E 06 F1 | 	add	local01, #24
27ca0     0F 15 02 FB | 	rdlong	arg02, local01
27ca4     18 1E 86 F1 | 	sub	local01, #24
27ca8     10 13 02 F6 | 	mov	arg01, local02
27cac     04 E5 BF FD | 	call	#_fatfs_cc_move_window
27cb0     FD 26 0A F6 | 	mov	local05, result1 wz
27cb4     40 00 90 5D |  if_ne	jmp	#LR__4082
27cb8     1C 1E 06 F1 | 	add	local01, #28
27cbc     0F 25 02 FB | 	rdlong	local04, local01
27cc0     12 CB 49 FC | 	wrbyte	#229, local04
27cc4     03 20 06 F1 | 	add	local02, #3
27cc8     10 03 48 FC | 	wrbyte	#1, local02
27ccc     03 20 86 F1 | 	sub	local02, #3
27cd0     0C 1E 86 F1 | 	sub	local01, #12
27cd4     0F 25 02 FB | 	rdlong	local04, local01
27cd8     10 1E 86 F1 | 	sub	local01, #16
27cdc     11 25 12 F2 | 	cmp	local04, local03 wc
27ce0     14 00 90 3D |  if_ae	jmp	#LR__4082
27ce4     0F 13 02 F6 | 	mov	arg01, local01
27ce8     00 14 06 F6 | 	mov	arg02, #0
27cec     90 EF BF FD | 	call	#_fatfs_cc_dir_next
27cf0     FD 26 0A F6 | 	mov	local05, result1 wz
27cf4     A4 FF 9F AD |  if_e	jmp	#LR__4081
27cf8                 | LR__4082
27cf8     04 26 0E F2 | 	cmp	local05, #4 wz
27cfc     02 26 06 A6 |  if_e	mov	local05, #2
27d00                 | LR__4083
27d00                 | ' 	}
27d00                 | ' #line 2590 "ff.c"
27d00                 | ' 	return res;
27d00     13 FB 01 F6 | 	mov	result1, local05
27d04     A7 F0 03 F6 | 	mov	ptra, fp
27d08     B2 00 A0 FD | 	call	#popregs_
27d0c                 | _fatfs_cc_dir_remove_ret
27d0c     2D 00 64 FD | 	ret
27d10                 | 
27d10                 | _fatfs_cc_get_fileinfo
27d10     0F 4A 05 F6 | 	mov	COUNT_, #15
27d14     A8 00 A0 FD | 	call	#pushregs_
27d18     09 1F 02 F6 | 	mov	local01, arg01
27d1c     0A 21 02 F6 | 	mov	local02, arg02
27d20     0F 23 02 FB | 	rdlong	local03, local01
27d24     1C 20 06 F1 | 	add	local02, #28
27d28     10 01 48 FC | 	wrbyte	#0, local02
27d2c     1C 20 86 F1 | 	sub	local02, #28
27d30     18 1E 06 F1 | 	add	local01, #24
27d34     0F 25 0A FB | 	rdlong	local04, local01 wz
27d38     18 1E 86 F1 | 	sub	local01, #24
27d3c     90 03 90 AD |  if_e	jmp	#LR__4104
27d40     2C 1E 06 F1 | 	add	local01, #44
27d44     0F 25 02 FB | 	rdlong	local04, local01
27d48     2C 1E 86 F1 | 	sub	local01, #44
27d4c     FF FF 7F FF 
27d50     FF 25 0E F2 | 	cmp	local04, ##-1 wz
27d54     D8 00 90 AD |  if_e	jmp	#LR__4093
27d58     00 26 06 F6 | 	mov	local05, #0
27d5c     00 28 06 F6 | 	mov	local06, #0
27d60     00 2A 06 F6 | 	mov	local07, #0
27d64                 | ' 			si = di = 0;
27d64                 | ' 			hs = 0;
27d64                 | ' 			while (fs->lfnbuf[si] != 0) {
27d64                 | LR__4090
27d64     0C 22 06 F1 | 	add	local03, #12
27d68     11 25 02 FB | 	rdlong	local04, local03
27d6c     0C 22 86 F1 | 	sub	local03, #12
27d70     14 2D 02 F6 | 	mov	local08, local06
27d74     01 2C 66 F0 | 	shl	local08, #1
27d78     12 2D 02 F1 | 	add	local08, local04
27d7c     16 25 EA FA | 	rdword	local04, local08 wz
27d80     90 00 90 AD |  if_e	jmp	#LR__4092
27d84     0C 22 06 F1 | 	add	local03, #12
27d88     11 2F 02 FB | 	rdlong	local09, local03
27d8c     0C 22 86 F1 | 	sub	local03, #12
27d90     14 31 02 F6 | 	mov	local10, local06
27d94     01 30 66 F0 | 	shl	local10, #1
27d98     17 31 02 F1 | 	add	local10, local09
27d9c     18 33 E2 FA | 	rdword	local11, local10
27da0     15 25 02 F6 | 	mov	local04, local07
27da4     0F 24 4E F7 | 	zerox	local04, #15 wz
27da8     01 28 06 F1 | 	add	local06, #1
27dac     24 00 90 5D |  if_ne	jmp	#LR__4091
27db0     19 35 32 F9 | 	getword	local12, local11, #0
27db4     6C 00 00 FF 
27db8     00 34 16 F2 | 	cmp	local12, ##55296 wc
27dbc     14 00 90 CD |  if_b	jmp	#LR__4091
27dc0     19 37 32 F9 | 	getword	local13, local11, #0
27dc4     70 00 00 FF 
27dc8     00 36 16 F2 | 	cmp	local13, ##57344 wc
27dcc     19 2B 02 C6 |  if_b	mov	local07, local11
27dd0                 | ' 					hs = wc; continue;
27dd0     90 FF 9F CD |  if_b	jmp	#LR__4090
27dd4                 | LR__4091
27dd4     15 13 32 F9 | 	getword	arg01, local07, #0
27dd8     10 12 66 F0 | 	shl	arg01, #16
27ddc     19 33 32 F9 | 	getword	local11, local11, #0
27de0     19 13 42 F5 | 	or	arg01, local11
27de4     13 15 02 F6 | 	mov	arg02, local05
27de8     1C 20 06 F1 | 	add	local02, #28
27dec     10 15 02 F1 | 	add	arg02, local02
27df0     FF 16 06 F6 | 	mov	arg03, #255
27df4     13 17 82 F1 | 	sub	arg03, local05
27df8     1C 20 86 F1 | 	sub	local02, #28
27dfc     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
27e00     FD 38 0A F6 | 	mov	local14, result1 wz
27e04     00 26 06 A6 |  if_e	mov	local05, #0
27e08     1C 27 02 51 |  if_ne	add	local05, local14
27e0c     00 2A 06 56 |  if_ne	mov	local07, #0
27e10     50 FF 9F 5D |  if_ne	jmp	#LR__4090
27e14                 | LR__4092
27e14     15 25 02 F6 | 	mov	local04, local07
27e18     0F 24 4E F7 | 	zerox	local04, #15 wz
27e1c     00 26 06 56 |  if_ne	mov	local05, #0
27e20     1C 20 06 F1 | 	add	local02, #28
27e24     10 27 02 F1 | 	add	local05, local02
27e28     13 01 48 FC | 	wrbyte	#0, local05
27e2c     1C 20 86 F1 | 	sub	local02, #28
27e30                 | LR__4093
27e30     00 26 06 F6 | 	mov	local05, #0
27e34     00 28 06 F6 | 	mov	local06, #0
27e38                 | ' 			fno->fname[di] = 0;
27e38                 | ' 		}
27e38                 | ' 	}
27e38                 | ' 
27e38                 | ' 	si = di = 0;
27e38                 | ' 	while (si < 11) {
27e38                 | LR__4094
27e38     0B 28 16 F2 | 	cmp	local06, #11 wc
27e3c     20 01 90 3D |  if_ae	jmp	#LR__4097
27e40     1C 1E 06 F1 | 	add	local01, #28
27e44     0F 2F 02 FB | 	rdlong	local09, local01
27e48     1C 1E 86 F1 | 	sub	local01, #28
27e4c     14 31 02 F6 | 	mov	local10, local06
27e50     17 31 02 F1 | 	add	local10, local09
27e54     18 33 C2 FA | 	rdbyte	local11, local10
27e58     19 25 32 F9 | 	getword	local04, local11, #0
27e5c     20 24 0E F2 | 	cmp	local04, #32 wz
27e60     01 28 06 F1 | 	add	local06, #1
27e64     D0 FF 9F AD |  if_e	jmp	#LR__4094
27e68     19 25 32 F9 | 	getword	local04, local11, #0
27e6c     05 24 0E F2 | 	cmp	local04, #5 wz
27e70     E5 32 06 A6 |  if_e	mov	local11, #229
27e74     09 28 0E F2 | 	cmp	local06, #9 wz
27e78     20 00 90 5D |  if_ne	jmp	#LR__4095
27e7c     0C 26 16 F2 | 	cmp	local05, #12 wc
27e80     18 00 90 3D |  if_ae	jmp	#LR__4095
27e84     13 37 02 F6 | 	mov	local13, local05
27e88     0C 20 06 F1 | 	add	local02, #12
27e8c     10 37 02 F1 | 	add	local13, local02
27e90     1B 5D 48 FC | 	wrbyte	#46, local13
27e94     01 26 06 F1 | 	add	local05, #1
27e98     0C 20 86 F1 | 	sub	local02, #12
27e9c                 | LR__4095
27e9c     19 13 32 F9 | 	getword	arg01, local11, #0
27ea0     07 12 4E F7 | 	zerox	arg01, #7 wz
27ea4     00 FA 05 56 |  if_ne	mov	result1, #0
27ea8                 | ' 
27ea8                 | ' 	return 0;
27ea8     00 FA 05 A6 |  if_e	mov	result1, #0
27eac     00 FA 0D F2 | 	cmp	result1, #0 wz
27eb0     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
27eb4     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
27eb8     50 00 90 AD |  if_e	jmp	#LR__4096
27ebc     1C 1E 06 F1 | 	add	local01, #28
27ec0     0F 31 02 FB | 	rdlong	local10, local01
27ec4     1C 1E 86 F1 | 	sub	local01, #28
27ec8     14 2D 02 F6 | 	mov	local08, local06
27ecc     18 2D 02 F1 | 	add	local08, local10
27ed0     16 13 CA FA | 	rdbyte	arg01, local08 wz
27ed4     00 FA 05 56 |  if_ne	mov	result1, #0
27ed8                 | ' 
27ed8                 | ' 	return 0;
27ed8     00 FA 05 A6 |  if_e	mov	result1, #0
27edc     00 FA 0D F2 | 	cmp	result1, #0 wz
27ee0     28 00 90 AD |  if_e	jmp	#LR__4096
27ee4     19 33 32 F9 | 	getword	local11, local11, #0
27ee8     08 32 66 F0 | 	shl	local11, #8
27eec     1C 1E 06 F1 | 	add	local01, #28
27ef0     0F 39 02 FB | 	rdlong	local14, local01
27ef4     1C 1E 86 F1 | 	sub	local01, #28
27ef8     14 2F 02 F6 | 	mov	local09, local06
27efc     1C 2F 02 F1 | 	add	local09, local14
27f00     17 35 C2 FA | 	rdbyte	local12, local09
27f04     1A 33 42 F5 | 	or	local11, local12
27f08     01 28 06 F1 | 	add	local06, #1
27f0c                 | LR__4096
27f0c     19 13 02 F6 | 	mov	arg01, local11
27f10     01 00 00 FF 
27f14     52 15 06 F6 | 	mov	arg02, ##850
27f18     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
27f1c     FD 32 02 F6 | 	mov	local11, result1
27f20     19 25 02 F6 | 	mov	local04, local11
27f24     0F 24 4E F7 | 	zerox	local04, #15 wz
27f28     00 26 06 A6 |  if_e	mov	local05, #0
27f2c     30 00 90 AD |  if_e	jmp	#LR__4097
27f30     19 13 32 F9 | 	getword	arg01, local11, #0
27f34     13 15 02 F6 | 	mov	arg02, local05
27f38     0C 20 06 F1 | 	add	local02, #12
27f3c     10 15 02 F1 | 	add	arg02, local02
27f40     0C 16 06 F6 | 	mov	arg03, #12
27f44     13 17 82 F1 | 	sub	arg03, local05
27f48     0C 20 86 F1 | 	sub	local02, #12
27f4c     EC DF BF FD | 	call	#_fatfs_cc_put_utf
27f50     FD 38 0A F6 | 	mov	local14, result1 wz
27f54     00 26 06 A6 |  if_e	mov	local05, #0
27f58     1C 27 02 51 |  if_ne	add	local05, local14
27f5c     D8 FE 9F 5D |  if_ne	jmp	#LR__4094
27f60                 | LR__4097
27f60     13 25 02 F6 | 	mov	local04, local05
27f64     0C 20 06 F1 | 	add	local02, #12
27f68     10 25 02 F1 | 	add	local04, local02
27f6c     12 01 48 FC | 	wrbyte	#0, local04
27f70     10 20 06 F1 | 	add	local02, #16
27f74     10 25 CA FA | 	rdbyte	local04, local02 wz
27f78     1C 20 86 F1 | 	sub	local02, #28
27f7c     F8 00 90 5D |  if_ne	jmp	#LR__4103
27f80     00 26 0E F2 | 	cmp	local05, #0 wz
27f84     1C 00 90 5D |  if_ne	jmp	#LR__4098
27f88     13 37 02 F6 | 	mov	local13, local05
27f8c     1C 20 06 F1 | 	add	local02, #28
27f90     10 37 02 F1 | 	add	local13, local02
27f94     1B 7F 48 FC | 	wrbyte	#63, local13
27f98     01 26 06 F1 | 	add	local05, #1
27f9c     1C 20 86 F1 | 	sub	local02, #28
27fa0     A4 00 90 FD | 	jmp	#LR__4102
27fa4                 | LR__4098
27fa4                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
27fa4     00 26 06 F6 | 	mov	local05, #0
27fa8     00 28 06 F6 | 	mov	local06, #0
27fac     08 3A 06 F6 | 	mov	local15, #8
27fb0                 | LR__4099
27fb0     14 25 02 F6 | 	mov	local04, local06
27fb4     0C 20 06 F1 | 	add	local02, #12
27fb8     10 25 02 F1 | 	add	local04, local02
27fbc     12 37 CA FA | 	rdbyte	local13, local04 wz
27fc0     0C 20 86 F1 | 	sub	local02, #12
27fc4     80 00 90 AD |  if_e	jmp	#LR__4101
27fc8     14 2D 02 F6 | 	mov	local08, local06
27fcc     0C 20 06 F1 | 	add	local02, #12
27fd0     10 2D 02 F1 | 	add	local08, local02
27fd4     16 33 C2 FA | 	rdbyte	local11, local08
27fd8     19 39 32 F9 | 	getword	local14, local11, #0
27fdc     2E 38 0E F2 | 	cmp	local14, #46 wz
27fe0     0C 20 86 F1 | 	sub	local02, #12
27fe4     10 3A 06 A6 |  if_e	mov	local15, #16
27fe8     19 39 32 F9 | 	getword	local14, local11, #0
27fec     41 38 16 F2 | 	cmp	local14, #65 wc
27ff0     30 00 90 CD |  if_b	jmp	#LR__4100
27ff4     19 2D 32 F9 | 	getword	local08, local11, #0
27ff8     5B 2C 16 F2 | 	cmp	local08, #91 wc
27ffc     24 00 90 3D |  if_ae	jmp	#LR__4100
28000     1C 1E 06 F1 | 	add	local01, #28
28004     0F 2F 02 FB | 	rdlong	local09, local01
28008     1C 1E 86 F1 | 	sub	local01, #28
2800c     0C 2E 06 F1 | 	add	local09, #12
28010     17 31 C2 FA | 	rdbyte	local10, local09
28014     1D 39 E2 F8 | 	getbyte	local14, local15, #0
28018     1C 31 CA F7 | 	test	local10, local14 wz
2801c     19 33 32 59 |  if_ne	getword	local11, local11, #0
28020     20 32 06 51 |  if_ne	add	local11, #32
28024                 | LR__4100
28024     13 39 02 F6 | 	mov	local14, local05
28028     1C 20 06 F1 | 	add	local02, #28
2802c     10 39 02 F1 | 	add	local14, local02
28030     19 33 32 F9 | 	getword	local11, local11, #0
28034     1C 33 42 FC | 	wrbyte	local11, local14
28038     01 28 06 F1 | 	add	local06, #1
2803c     01 26 06 F1 | 	add	local05, #1
28040     1C 20 86 F1 | 	sub	local02, #28
28044     68 FF 9F FD | 	jmp	#LR__4099
28048                 | LR__4101
28048                 | LR__4102
28048     1C 20 06 F1 | 	add	local02, #28
2804c     10 27 02 F1 | 	add	local05, local02
28050     13 01 48 FC | 	wrbyte	#0, local05
28054     1C 1E 06 F1 | 	add	local01, #28
28058     0F 25 02 FB | 	rdlong	local04, local01
2805c     1C 1E 86 F1 | 	sub	local01, #28
28060     0C 24 06 F1 | 	add	local04, #12
28064     12 37 CA FA | 	rdbyte	local13, local04 wz
28068     1C 20 86 F1 | 	sub	local02, #28
2806c     0C 20 06 A1 |  if_e	add	local02, #12
28070     10 01 48 AC |  if_e	wrbyte	#0, local02
28074     0C 20 86 A1 |  if_e	sub	local02, #12
28078                 | LR__4103
28078     1C 1E 06 F1 | 	add	local01, #28
2807c     0F 35 02 FB | 	rdlong	local12, local01
28080     0B 34 06 F1 | 	add	local12, #11
28084     1A 25 C2 FA | 	rdbyte	local04, local12
28088     3F 24 06 F5 | 	and	local04, #63
2808c     08 20 06 F1 | 	add	local02, #8
28090     10 25 42 FC | 	wrbyte	local04, local02
28094     08 20 86 F1 | 	sub	local02, #8
28098     0F 13 02 FB | 	rdlong	arg01, local01
2809c     1C 12 06 F1 | 	add	arg01, #28
280a0                 | ' {
280a0                 | ' 
280a0                 | ' 	return *((DWORD*)ptr);
280a0     09 FB 01 FB | 	rdlong	result1, arg01
280a4     10 FB 61 FC | 	wrlong	result1, local02
280a8     0F 13 02 FB | 	rdlong	arg01, local01
280ac     16 12 06 F1 | 	add	arg01, #22
280b0                 | ' {
280b0                 | ' 
280b0                 | ' 	return *((WORD*)ptr);
280b0     09 FB E1 FA | 	rdword	result1, arg01
280b4     06 20 06 F1 | 	add	local02, #6
280b8     10 FB 51 FC | 	wrword	result1, local02
280bc     0F 13 02 FB | 	rdlong	arg01, local01
280c0     18 12 06 F1 | 	add	arg01, #24
280c4                 | ' {
280c4                 | ' 
280c4                 | ' 	return *((WORD*)ptr);
280c4     09 FB E1 FA | 	rdword	result1, arg01
280c8     02 20 86 F1 | 	sub	local02, #2
280cc     10 FB 51 FC | 	wrword	result1, local02
280d0                 | LR__4104
280d0     A7 F0 03 F6 | 	mov	ptra, fp
280d4     B2 00 A0 FD | 	call	#popregs_
280d8                 | _fatfs_cc_get_fileinfo_ret
280d8     2D 00 64 FD | 	ret
280dc                 | 
280dc                 | _fatfs_cc_create_name
280dc     0D 4A 05 F6 | 	mov	COUNT_, #13
280e0     A8 00 A0 FD | 	call	#pushregs_
280e4     34 F0 07 F1 | 	add	ptra, #52
280e8     04 4E 05 F1 | 	add	fp, #4
280ec     A7 12 62 FC | 	wrlong	arg01, fp
280f0     04 4E 05 F1 | 	add	fp, #4
280f4     A7 14 62 FC | 	wrlong	arg02, fp
280f8     0A FB 01 FB | 	rdlong	result1, arg02
280fc     28 4E 05 F1 | 	add	fp, #40
28100     A7 FA 61 FC | 	wrlong	result1, fp
28104     2C 4E 85 F1 | 	sub	fp, #44
28108     A7 FA 01 FB | 	rdlong	result1, fp
2810c     FD 1E 02 FB | 	rdlong	local01, result1
28110     0C 1E 06 F1 | 	add	local01, #12
28114     0F 21 02 FB | 	rdlong	local02, local01
28118     14 4E 05 F1 | 	add	fp, #20
2811c     A7 20 62 FC | 	wrlong	local02, fp
28120     14 4E 05 F1 | 	add	fp, #20
28124     A7 00 68 FC | 	wrlong	#0, fp
28128     2C 4E 85 F1 | 	sub	fp, #44
2812c                 | ' 
2812c                 | ' 
2812c                 | ' 
2812c                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
2812c                 | ' 	for (;;) {
2812c                 | LR__4110
2812c     30 4E 05 F1 | 	add	fp, #48
28130     A7 12 02 F6 | 	mov	arg01, fp
28134     30 4E 85 F1 | 	sub	fp, #48
28138     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
2813c     1C 4E 05 F1 | 	add	fp, #28
28140     A7 FA 61 FC | 	wrlong	result1, fp
28144     1C 4E 85 F1 | 	sub	fp, #28
28148     FF FF 7F FF 
2814c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
28150     06 FA 05 A6 |  if_e	mov	result1, #6
28154     74 08 90 AD |  if_e	jmp	#LR__4150
28158     1C 4E 05 F1 | 	add	fp, #28
2815c     A7 1E 02 FB | 	rdlong	local01, fp
28160     1C 4E 85 F1 | 	sub	fp, #28
28164     80 00 00 FF 
28168     00 1E 16 F2 | 	cmp	local01, ##65536 wc
2816c     3C 00 90 CD |  if_b	jmp	#LR__4111
28170     18 4E 05 F1 | 	add	fp, #24
28174     A7 22 02 FB | 	rdlong	local03, fp
28178     14 4E 05 F1 | 	add	fp, #20
2817c     A7 1E 02 FB | 	rdlong	local01, fp
28180     0F 25 02 F6 | 	mov	local04, local01
28184     01 24 06 F1 | 	add	local04, #1
28188     A7 24 62 FC | 	wrlong	local04, fp
2818c     01 1E 66 F0 | 	shl	local01, #1
28190     11 1F 02 F1 | 	add	local01, local03
28194     10 4E 85 F1 | 	sub	fp, #16
28198     A7 26 02 FB | 	rdlong	local05, fp
2819c     1C 4E 85 F1 | 	sub	fp, #28
281a0     13 29 02 F6 | 	mov	local06, local05
281a4     10 28 46 F0 | 	shr	local06, #16
281a8     0F 29 52 FC | 	wrword	local06, local01
281ac                 | LR__4111
281ac     1C 4E 05 F1 | 	add	fp, #28
281b0     A7 1E 02 FB | 	rdlong	local01, fp
281b4     08 4E 85 F1 | 	sub	fp, #8
281b8     A7 1E 52 FC | 	wrword	local01, fp
281bc     A7 1E E2 FA | 	rdword	local01, fp
281c0     14 4E 85 F1 | 	sub	fp, #20
281c4     20 1E 16 F2 | 	cmp	local01, #32 wc
281c8     B0 00 90 CD |  if_b	jmp	#LR__4113
281cc     14 4E 05 F1 | 	add	fp, #20
281d0     A7 1E E2 FA | 	rdword	local01, fp
281d4     14 4E 85 F1 | 	sub	fp, #20
281d8     2F 1E 0E F2 | 	cmp	local01, #47 wz
281dc     14 4E 05 51 |  if_ne	add	fp, #20
281e0     A7 24 E2 5A |  if_ne	rdword	local04, fp
281e4     14 4E 85 51 |  if_ne	sub	fp, #20
281e8     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
281ec     8C 00 90 AD |  if_e	jmp	#LR__4113
281f0     14 4E 05 F1 | 	add	fp, #20
281f4     A7 12 E2 FA | 	rdword	arg01, fp
281f8     14 4E 85 F1 | 	sub	fp, #20
281fc     80 12 16 F2 | 	cmp	arg01, #128 wc
28200     24 00 90 3D |  if_ae	jmp	#LR__4112
28204     70 01 00 FF 
28208     40 13 06 F6 | 	mov	arg01, ##@LR__4772
2820c     14 4E 05 F1 | 	add	fp, #20
28210     A7 14 E2 FA | 	rdword	arg02, fp
28214     14 4E 85 F1 | 	sub	fp, #20
28218     FC D0 BF FD | 	call	#_fatfs_cc_strchr
2821c     00 FA 0D F2 | 	cmp	result1, #0 wz
28220     06 FA 05 56 |  if_ne	mov	result1, #6
28224     A4 07 90 5D |  if_ne	jmp	#LR__4150
28228                 | LR__4112
28228     2C 4E 05 F1 | 	add	fp, #44
2822c     A7 28 02 FB | 	rdlong	local06, fp
28230     2C 4E 85 F1 | 	sub	fp, #44
28234     FF 28 16 F2 | 	cmp	local06, #255 wc
28238     06 FA 05 36 |  if_ae	mov	result1, #6
2823c     8C 07 90 3D |  if_ae	jmp	#LR__4150
28240     18 4E 05 F1 | 	add	fp, #24
28244     A7 22 02 FB | 	rdlong	local03, fp
28248     14 4E 05 F1 | 	add	fp, #20
2824c     A7 20 02 FB | 	rdlong	local02, fp
28250     10 25 02 F6 | 	mov	local04, local02
28254     01 24 06 F1 | 	add	local04, #1
28258     A7 24 62 FC | 	wrlong	local04, fp
2825c     10 1F 02 F6 | 	mov	local01, local02
28260     01 1E 66 F0 | 	shl	local01, #1
28264     11 1F 02 F1 | 	add	local01, local03
28268     18 4E 85 F1 | 	sub	fp, #24
2826c     A7 28 E2 FA | 	rdword	local06, fp
28270     14 4E 85 F1 | 	sub	fp, #20
28274     0F 29 52 FC | 	wrword	local06, local01
28278     B0 FE 9F FD | 	jmp	#LR__4110
2827c                 | LR__4113
2827c     14 4E 05 F1 | 	add	fp, #20
28280     A7 2A E2 FA | 	rdword	local07, fp
28284     14 4E 85 F1 | 	sub	fp, #20
28288     20 2A 16 F2 | 	cmp	local07, #32 wc
2828c     10 4E 05 C1 |  if_b	add	fp, #16
28290     A7 08 48 CC |  if_b	wrbyte	#4, fp
28294     10 4E 85 C1 |  if_b	sub	fp, #16
28298     74 00 90 CD |  if_b	jmp	#LR__4118
2829c     97 24 48 FB | 	callpa	#(@LR__4116-@LR__4114)>>2,fcache_load_ptr_
282a0                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
282a0                 | LR__4114
282a0     30 4E 05 F1 | 	add	fp, #48
282a4     A7 24 02 FB | 	rdlong	local04, fp
282a8     30 4E 85 F1 | 	sub	fp, #48
282ac     12 2B C2 FA | 	rdbyte	local07, local04
282b0     2F 2A 0E F2 | 	cmp	local07, #47 wz
282b4     18 00 90 AD |  if_e	jmp	#LR__4115
282b8     30 4E 05 F1 | 	add	fp, #48
282bc     A7 24 02 FB | 	rdlong	local04, fp
282c0     30 4E 85 F1 | 	sub	fp, #48
282c4     12 21 C2 FA | 	rdbyte	local02, local04
282c8     5C 20 0E F2 | 	cmp	local02, #92 wz
282cc     18 00 90 5D |  if_ne	jmp	#LR__4117
282d0                 | LR__4115
282d0     30 4E 05 F1 | 	add	fp, #48
282d4     A7 1E 02 FB | 	rdlong	local01, fp
282d8     01 1E 06 F1 | 	add	local01, #1
282dc     A7 1E 62 FC | 	wrlong	local01, fp
282e0     30 4E 85 F1 | 	sub	fp, #48
282e4     B8 FF 9F FD | 	jmp	#LR__4114
282e8                 | LR__4116
282e8                 | LR__4117
282e8     10 4E 05 F1 | 	add	fp, #16
282ec     A7 00 48 FC | 	wrbyte	#0, fp
282f0     20 4E 05 F1 | 	add	fp, #32
282f4     A7 28 02 FB | 	rdlong	local06, fp
282f8     30 4E 85 F1 | 	sub	fp, #48
282fc     14 2B C2 FA | 	rdbyte	local07, local06
28300     20 2A 16 F2 | 	cmp	local07, #32 wc
28304     10 4E 05 C1 |  if_b	add	fp, #16
28308     A7 08 48 CC |  if_b	wrbyte	#4, fp
2830c     10 4E 85 C1 |  if_b	sub	fp, #16
28310                 | LR__4118
28310     08 4E 05 F1 | 	add	fp, #8
28314     A7 2A 02 FB | 	rdlong	local07, fp
28318     28 4E 05 F1 | 	add	fp, #40
2831c     A7 1E 02 FB | 	rdlong	local01, fp
28320     30 4E 85 F1 | 	sub	fp, #48
28324     15 1F 62 FC | 	wrlong	local01, local07
28328     97 38 48 FB | 	callpa	#(@LR__4120-@LR__4119)>>2,fcache_load_ptr_
2832c                 | ' 	}
2832c                 | ' 	*path = p;
2832c                 | ' #line 2862 "ff.c"
2832c                 | ' 	while (di) {
2832c                 | LR__4119
2832c     2C 4E 05 F1 | 	add	fp, #44
28330     A7 2A 0A FB | 	rdlong	local07, fp wz
28334     2C 4E 85 F1 | 	sub	fp, #44
28338     60 00 90 AD |  if_e	jmp	#LR__4121
2833c     18 4E 05 F1 | 	add	fp, #24
28340     A7 28 02 FB | 	rdlong	local06, fp
28344     14 4E 05 F1 | 	add	fp, #20
28348     A7 24 02 FB | 	rdlong	local04, fp
2834c     01 24 86 F1 | 	sub	local04, #1
28350     01 24 66 F0 | 	shl	local04, #1
28354     14 25 02 F1 | 	add	local04, local06
28358     12 29 E2 FA | 	rdword	local06, local04
2835c     18 4E 85 F1 | 	sub	fp, #24
28360     A7 28 52 FC | 	wrword	local06, fp
28364     A7 2A E2 FA | 	rdword	local07, fp
28368     14 4E 85 F1 | 	sub	fp, #20
2836c     20 2A 0E F2 | 	cmp	local07, #32 wz
28370     14 4E 05 51 |  if_ne	add	fp, #20
28374     A7 1E E2 5A |  if_ne	rdword	local01, fp
28378     14 4E 85 51 |  if_ne	sub	fp, #20
2837c     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
28380     18 00 90 5D |  if_ne	jmp	#LR__4121
28384     2C 4E 05 F1 | 	add	fp, #44
28388     A7 1E 02 FB | 	rdlong	local01, fp
2838c     01 1E 86 F1 | 	sub	local01, #1
28390     A7 1E 62 FC | 	wrlong	local01, fp
28394     2C 4E 85 F1 | 	sub	fp, #44
28398     90 FF 9F FD | 	jmp	#LR__4119
2839c                 | LR__4120
2839c                 | LR__4121
2839c     18 4E 05 F1 | 	add	fp, #24
283a0     A7 2C 02 FB | 	rdlong	local08, fp
283a4     14 4E 05 F1 | 	add	fp, #20
283a8     A7 24 02 FB | 	rdlong	local04, fp
283ac     01 24 66 F0 | 	shl	local04, #1
283b0     16 25 02 F1 | 	add	local04, local08
283b4     12 01 58 FC | 	wrword	#0, local04
283b8     A7 2A 0A FB | 	rdlong	local07, fp wz
283bc     2C 4E 85 F1 | 	sub	fp, #44
283c0     06 FA 05 A6 |  if_e	mov	result1, #6
283c4     04 06 90 AD |  if_e	jmp	#LR__4150
283c8                 | ' 
283c8                 | ' 
283c8                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
283c8     28 4E 05 F1 | 	add	fp, #40
283cc     A7 00 68 FC | 	wrlong	#0, fp
283d0     28 4E 85 F1 | 	sub	fp, #40
283d4     97 22 48 FB | 	callpa	#(@LR__4123-@LR__4122)>>2,fcache_load_ptr_
283d8                 | LR__4122
283d8     18 4E 05 F1 | 	add	fp, #24
283dc     A7 2E 02 FB | 	rdlong	local09, fp
283e0     10 4E 05 F1 | 	add	fp, #16
283e4     A7 30 02 FB | 	rdlong	local10, fp
283e8     28 4E 85 F1 | 	sub	fp, #40
283ec     01 30 66 F0 | 	shl	local10, #1
283f0     17 31 02 F1 | 	add	local10, local09
283f4     18 33 E2 FA | 	rdword	local11, local10
283f8     20 32 0E F2 | 	cmp	local11, #32 wz
283fc     1C 00 90 5D |  if_ne	jmp	#LR__4124
28400     28 4E 05 F1 | 	add	fp, #40
28404     A7 34 02 FB | 	rdlong	local12, fp
28408     1A 27 02 F6 | 	mov	local05, local12
2840c     01 26 06 F1 | 	add	local05, #1
28410     A7 26 62 FC | 	wrlong	local05, fp
28414     28 4E 85 F1 | 	sub	fp, #40
28418     BC FF 9F FD | 	jmp	#LR__4122
2841c                 | LR__4123
2841c                 | LR__4124
2841c     28 4E 05 F1 | 	add	fp, #40
28420     A7 2A 02 FB | 	rdlong	local07, fp
28424     28 4E 85 F1 | 	sub	fp, #40
28428     01 2A 16 F2 | 	cmp	local07, #1 wc
2842c     28 00 90 3D |  if_ae	jmp	#LR__4125
28430     18 4E 05 F1 | 	add	fp, #24
28434     A7 22 02 FB | 	rdlong	local03, fp
28438     10 4E 05 F1 | 	add	fp, #16
2843c     A7 2E 02 FB | 	rdlong	local09, fp
28440     28 4E 85 F1 | 	sub	fp, #40
28444     01 2E 66 F0 | 	shl	local09, #1
28448     11 2F 02 F1 | 	add	local09, local03
2844c     17 1F E2 FA | 	rdword	local01, local09
28450     2E 1E 0E F2 | 	cmp	local01, #46 wz
28454     14 00 90 5D |  if_ne	jmp	#LR__4126
28458                 | LR__4125
28458     10 4E 05 F1 | 	add	fp, #16
2845c     A7 2A C2 FA | 	rdbyte	local07, fp
28460     03 2A 46 F5 | 	or	local07, #3
28464     A7 2A 42 FC | 	wrbyte	local07, fp
28468     10 4E 85 F1 | 	sub	fp, #16
2846c                 | LR__4126
2846c     97 2C 48 FB | 	callpa	#(@LR__4128-@LR__4127)>>2,fcache_load_ptr_
28470                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
28470                 | LR__4127
28470     2C 4E 05 F1 | 	add	fp, #44
28474     A7 2A 02 FB | 	rdlong	local07, fp
28478     2C 4E 85 F1 | 	sub	fp, #44
2847c     01 2A 16 F2 | 	cmp	local07, #1 wc
28480     44 00 90 CD |  if_b	jmp	#LR__4129
28484     18 4E 05 F1 | 	add	fp, #24
28488     A7 28 02 FB | 	rdlong	local06, fp
2848c     14 4E 05 F1 | 	add	fp, #20
28490     A7 22 02 FB | 	rdlong	local03, fp
28494     2C 4E 85 F1 | 	sub	fp, #44
28498     01 22 86 F1 | 	sub	local03, #1
2849c     01 22 66 F0 | 	shl	local03, #1
284a0     14 23 02 F1 | 	add	local03, local06
284a4     11 1F E2 FA | 	rdword	local01, local03
284a8     2E 1E 0E F2 | 	cmp	local01, #46 wz
284ac     18 00 90 AD |  if_e	jmp	#LR__4129
284b0     2C 4E 05 F1 | 	add	fp, #44
284b4     A7 1E 02 FB | 	rdlong	local01, fp
284b8     01 1E 86 F1 | 	sub	local01, #1
284bc     A7 1E 62 FC | 	wrlong	local01, fp
284c0     2C 4E 85 F1 | 	sub	fp, #44
284c4     A8 FF 9F FD | 	jmp	#LR__4127
284c8                 | LR__4128
284c8                 | LR__4129
284c8     04 4E 05 F1 | 	add	fp, #4
284cc     A7 12 02 FB | 	rdlong	arg01, fp
284d0     04 4E 85 F1 | 	sub	fp, #4
284d4     20 12 06 F1 | 	add	arg01, #32
284d8     20 14 06 F6 | 	mov	arg02, #32
284dc     0B 16 06 F6 | 	mov	arg03, #11
284e0     09 37 02 F6 | 	mov	local13, arg01
284e4     98 00 A0 FD | 	call	#\builtin_bytefill_
284e8     1B FB 01 F6 | 	mov	result1, local13
284ec     0C 4E 05 F1 | 	add	fp, #12
284f0     A7 00 48 FC | 	wrbyte	#0, fp
284f4     A7 2A C2 FA | 	rdbyte	local07, fp
284f8     14 4E 05 F1 | 	add	fp, #20
284fc     A7 2A 62 FC | 	wrlong	local07, fp
28500     04 4E 05 F1 | 	add	fp, #4
28504     A7 10 68 FC | 	wrlong	#8, fp
28508     24 4E 85 F1 | 	sub	fp, #36
2850c                 | ' 
2850c                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
2850c                 | ' 	i = b = 0; ni = 8;
2850c                 | ' 	for (;;) {
2850c                 | LR__4130
2850c     18 4E 05 F1 | 	add	fp, #24
28510     A7 22 02 FB | 	rdlong	local03, fp
28514     10 4E 05 F1 | 	add	fp, #16
28518     A7 2E 02 FB | 	rdlong	local09, fp
2851c     17 25 02 F6 | 	mov	local04, local09
28520     01 24 06 F1 | 	add	local04, #1
28524     A7 24 62 FC | 	wrlong	local04, fp
28528     01 2E 66 F0 | 	shl	local09, #1
2852c     11 2F 02 F1 | 	add	local09, local03
28530     17 29 E2 FA | 	rdword	local06, local09
28534     14 4E 85 F1 | 	sub	fp, #20
28538     A7 28 52 FC | 	wrword	local06, fp
2853c     A7 2A EA FA | 	rdword	local07, fp wz
28540     14 4E 85 F1 | 	sub	fp, #20
28544     74 03 90 AD |  if_e	jmp	#LR__4146
28548     14 4E 05 F1 | 	add	fp, #20
2854c     A7 2A E2 FA | 	rdword	local07, fp
28550     14 4E 85 F1 | 	sub	fp, #20
28554     20 2A 0E F2 | 	cmp	local07, #32 wz
28558     30 00 90 AD |  if_e	jmp	#LR__4131
2855c     14 4E 05 F1 | 	add	fp, #20
28560     A7 1E E2 FA | 	rdword	local01, fp
28564     14 4E 85 F1 | 	sub	fp, #20
28568     2E 1E 0E F2 | 	cmp	local01, #46 wz
2856c     34 00 90 5D |  if_ne	jmp	#LR__4132
28570     28 4E 05 F1 | 	add	fp, #40
28574     A7 24 02 FB | 	rdlong	local04, fp
28578     04 4E 05 F1 | 	add	fp, #4
2857c     A7 30 02 FB | 	rdlong	local10, fp
28580     2C 4E 85 F1 | 	sub	fp, #44
28584     18 25 0A F2 | 	cmp	local04, local10 wz
28588     18 00 90 AD |  if_e	jmp	#LR__4132
2858c                 | LR__4131
2858c     10 4E 05 F1 | 	add	fp, #16
28590     A7 2A C2 FA | 	rdbyte	local07, fp
28594     03 2A 46 F5 | 	or	local07, #3
28598     A7 2A 42 FC | 	wrbyte	local07, fp
2859c     10 4E 85 F1 | 	sub	fp, #16
285a0                 | ' 			cf |=  0x01  |  0x02 ;
285a0                 | ' 			continue;
285a0     68 FF 9F FD | 	jmp	#LR__4130
285a4                 | LR__4132
285a4     20 4E 05 F1 | 	add	fp, #32
285a8     A7 2A 02 FB | 	rdlong	local07, fp
285ac     04 4E 05 F1 | 	add	fp, #4
285b0     A7 1E 02 FB | 	rdlong	local01, fp
285b4     24 4E 85 F1 | 	sub	fp, #36
285b8     0F 2B 12 F2 | 	cmp	local07, local01 wc
285bc     1C 00 90 3D |  if_ae	jmp	#LR__4133
285c0     28 4E 05 F1 | 	add	fp, #40
285c4     A7 2C 02 FB | 	rdlong	local08, fp
285c8     04 4E 05 F1 | 	add	fp, #4
285cc     A7 30 02 FB | 	rdlong	local10, fp
285d0     2C 4E 85 F1 | 	sub	fp, #44
285d4     18 2D 0A F2 | 	cmp	local08, local10 wz
285d8     B0 00 90 5D |  if_ne	jmp	#LR__4135
285dc                 | LR__4133
285dc     24 4E 05 F1 | 	add	fp, #36
285e0     A7 2A 02 FB | 	rdlong	local07, fp
285e4     24 4E 85 F1 | 	sub	fp, #36
285e8     0B 2A 0E F2 | 	cmp	local07, #11 wz
285ec     18 00 90 5D |  if_ne	jmp	#LR__4134
285f0     10 4E 05 F1 | 	add	fp, #16
285f4     A7 2A C2 FA | 	rdbyte	local07, fp
285f8     03 2A 46 F5 | 	or	local07, #3
285fc     A7 2A 42 FC | 	wrbyte	local07, fp
28600     10 4E 85 F1 | 	sub	fp, #16
28604                 | ' 				cf |=  0x01  |  0x02 ;
28604                 | ' 				break;
28604     B4 02 90 FD | 	jmp	#LR__4146
28608                 | LR__4134
28608     28 4E 05 F1 | 	add	fp, #40
2860c     A7 2A 02 FB | 	rdlong	local07, fp
28610     04 4E 05 F1 | 	add	fp, #4
28614     A7 1E 02 FB | 	rdlong	local01, fp
28618     2C 4E 85 F1 | 	sub	fp, #44
2861c     0F 2B 0A F2 | 	cmp	local07, local01 wz
28620     10 4E 05 51 |  if_ne	add	fp, #16
28624     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
28628     03 2A 46 55 |  if_ne	or	local07, #3
2862c     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
28630     10 4E 85 51 |  if_ne	sub	fp, #16
28634     28 4E 05 F1 | 	add	fp, #40
28638     A7 2A 02 FB | 	rdlong	local07, fp
2863c     04 4E 05 F1 | 	add	fp, #4
28640     A7 20 02 FB | 	rdlong	local02, fp
28644     2C 4E 85 F1 | 	sub	fp, #44
28648     10 2B 1A F2 | 	cmp	local07, local02 wcz
2864c     6C 02 90 1D |  if_a	jmp	#LR__4146
28650     2C 4E 05 F1 | 	add	fp, #44
28654     A7 2A 02 FB | 	rdlong	local07, fp
28658     04 4E 85 F1 | 	sub	fp, #4
2865c     A7 2A 62 FC | 	wrlong	local07, fp
28660     08 4E 85 F1 | 	sub	fp, #8
28664     A7 10 68 FC | 	wrlong	#8, fp
28668     04 4E 05 F1 | 	add	fp, #4
2866c     A7 16 68 FC | 	wrlong	#11, fp
28670     18 4E 85 F1 | 	sub	fp, #24
28674     A7 32 C2 FA | 	rdbyte	local11, fp
28678     19 2B E2 F8 | 	getbyte	local07, local11, #0
2867c     02 2A 66 F0 | 	shl	local07, #2
28680     A7 2A 42 FC | 	wrbyte	local07, fp
28684     0C 4E 85 F1 | 	sub	fp, #12
28688                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
28688                 | ' 			continue;
28688     80 FE 9F FD | 	jmp	#LR__4130
2868c                 | LR__4135
2868c     14 4E 05 F1 | 	add	fp, #20
28690     A7 2A E2 FA | 	rdword	local07, fp
28694     14 4E 85 F1 | 	sub	fp, #20
28698     80 2A 16 F2 | 	cmp	local07, #128 wc
2869c     6C 00 90 CD |  if_b	jmp	#LR__4137
286a0     10 4E 05 F1 | 	add	fp, #16
286a4     A7 2A C2 FA | 	rdbyte	local07, fp
286a8     02 2A 46 F5 | 	or	local07, #2
286ac     A7 2A 42 FC | 	wrbyte	local07, fp
286b0     04 4E 05 F1 | 	add	fp, #4
286b4     A7 12 E2 FA | 	rdword	arg01, fp
286b8     14 4E 85 F1 | 	sub	fp, #20
286bc     01 00 00 FF 
286c0     52 15 06 F6 | 	mov	arg02, ##850
286c4     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
286c8     14 4E 05 F1 | 	add	fp, #20
286cc     A7 FA 51 FC | 	wrword	result1, fp
286d0     A7 2A E2 FA | 	rdword	local07, fp
286d4     14 4E 85 F1 | 	sub	fp, #20
286d8     80 2A CE F7 | 	test	local07, #128 wz
286dc     2C 00 90 AD |  if_e	jmp	#LR__4136
286e0     14 4E 05 F1 | 	add	fp, #20
286e4     A7 20 E2 FA | 	rdword	local02, fp
286e8     7F 20 06 F5 | 	and	local02, #127
286ec     01 00 00 FF 
286f0     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
286f4     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
286f8     10 2B C2 FA | 	rdbyte	local07, local02
286fc     A7 2A 52 FC | 	wrword	local07, fp
28700     14 4E 85 F1 | 	sub	fp, #20
28704     01 00 00 FF 
28708     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
2870c                 | LR__4136
2870c                 | LR__4137
2870c     14 4E 05 F1 | 	add	fp, #20
28710     A7 2A E2 FA | 	rdword	local07, fp
28714     14 4E 85 F1 | 	sub	fp, #20
28718     00 2B 16 F2 | 	cmp	local07, #256 wc
2871c     88 00 90 CD |  if_b	jmp	#LR__4139
28720     24 4E 05 F1 | 	add	fp, #36
28724     A7 2A 02 FB | 	rdlong	local07, fp
28728     01 2A 86 F1 | 	sub	local07, #1
2872c     04 4E 85 F1 | 	sub	fp, #4
28730     A7 20 02 FB | 	rdlong	local02, fp
28734     20 4E 85 F1 | 	sub	fp, #32
28738     15 21 12 F2 | 	cmp	local02, local07 wc
2873c     2C 00 90 CD |  if_b	jmp	#LR__4138
28740     10 4E 05 F1 | 	add	fp, #16
28744     A7 32 C2 FA | 	rdbyte	local11, fp
28748     19 2B E2 F8 | 	getbyte	local07, local11, #0
2874c     03 2A 46 F5 | 	or	local07, #3
28750     A7 2A 42 FC | 	wrbyte	local07, fp
28754     14 4E 05 F1 | 	add	fp, #20
28758     A7 2A 02 FB | 	rdlong	local07, fp
2875c     04 4E 85 F1 | 	sub	fp, #4
28760     A7 2A 62 FC | 	wrlong	local07, fp
28764     20 4E 85 F1 | 	sub	fp, #32
28768                 | ' 				cf |=  0x01  |  0x02 ;
28768                 | ' 				i = ni; continue;
28768     A0 FD 9F FD | 	jmp	#LR__4130
2876c                 | LR__4138
2876c     04 4E 05 F1 | 	add	fp, #4
28770     A7 2E 02 FB | 	rdlong	local09, fp
28774     1C 4E 05 F1 | 	add	fp, #28
28778     A7 30 02 FB | 	rdlong	local10, fp
2877c     18 25 02 F6 | 	mov	local04, local10
28780     01 24 06 F1 | 	add	local04, #1
28784     A7 24 62 FC | 	wrlong	local04, fp
28788     20 2E 06 F1 | 	add	local09, #32
2878c     17 31 02 F1 | 	add	local10, local09
28790     0C 4E 85 F1 | 	sub	fp, #12
28794     A7 22 E2 FA | 	rdword	local03, fp
28798     14 4E 85 F1 | 	sub	fp, #20
2879c     08 22 46 F0 | 	shr	local03, #8
287a0     18 23 42 FC | 	wrbyte	local03, local10
287a4     D4 00 90 FD | 	jmp	#LR__4145
287a8                 | LR__4139
287a8     14 4E 05 F1 | 	add	fp, #20
287ac     A7 2A EA FA | 	rdword	local07, fp wz
287b0     14 4E 85 F1 | 	sub	fp, #20
287b4     20 00 90 AD |  if_e	jmp	#LR__4140
287b8     70 01 00 FF 
287bc     49 13 06 F6 | 	mov	arg01, ##@LR__4773
287c0     14 4E 05 F1 | 	add	fp, #20
287c4     A7 14 E2 FA | 	rdword	arg02, fp
287c8     14 4E 85 F1 | 	sub	fp, #20
287cc     48 CB BF FD | 	call	#_fatfs_cc_strchr
287d0     00 FA 0D F2 | 	cmp	result1, #0 wz
287d4     20 00 90 AD |  if_e	jmp	#LR__4141
287d8                 | LR__4140
287d8     14 4E 05 F1 | 	add	fp, #20
287dc     A7 BE 58 FC | 	wrword	#95, fp
287e0     04 4E 85 F1 | 	sub	fp, #4
287e4     A7 2A C2 FA | 	rdbyte	local07, fp
287e8     03 2A 46 F5 | 	or	local07, #3
287ec     A7 2A 42 FC | 	wrbyte	local07, fp
287f0     10 4E 85 F1 | 	sub	fp, #16
287f4     84 00 90 FD | 	jmp	#LR__4144
287f8                 | LR__4141
287f8     14 4E 05 F1 | 	add	fp, #20
287fc     A7 2A E2 FA | 	rdword	local07, fp
28800     14 4E 85 F1 | 	sub	fp, #20
28804     41 2A 16 F2 | 	cmp	local07, #65 wc
28808     24 00 90 CD |  if_b	jmp	#LR__4142
2880c     14 4E 05 F1 | 	add	fp, #20
28810     A7 1E E2 FA | 	rdword	local01, fp
28814     14 4E 85 F1 | 	sub	fp, #20
28818     5B 1E 16 F2 | 	cmp	local01, #91 wc
2881c     0C 4E 05 C1 |  if_b	add	fp, #12
28820     A7 2A C2 CA |  if_b	rdbyte	local07, fp
28824     02 2A 46 C5 |  if_b	or	local07, #2
28828     A7 2A 42 CC |  if_b	wrbyte	local07, fp
2882c     0C 4E 85 C1 |  if_b	sub	fp, #12
28830                 | LR__4142
28830     14 4E 05 F1 | 	add	fp, #20
28834     A7 2A E2 FA | 	rdword	local07, fp
28838     14 4E 85 F1 | 	sub	fp, #20
2883c     61 2A 16 F2 | 	cmp	local07, #97 wc
28840     38 00 90 CD |  if_b	jmp	#LR__4143
28844     14 4E 05 F1 | 	add	fp, #20
28848     A7 1E E2 FA | 	rdword	local01, fp
2884c     14 4E 85 F1 | 	sub	fp, #20
28850     7B 1E 16 F2 | 	cmp	local01, #123 wc
28854     24 00 90 3D |  if_ae	jmp	#LR__4143
28858     0C 4E 05 F1 | 	add	fp, #12
2885c     A7 2A C2 FA | 	rdbyte	local07, fp
28860     01 2A 46 F5 | 	or	local07, #1
28864     A7 2A 42 FC | 	wrbyte	local07, fp
28868     08 4E 05 F1 | 	add	fp, #8
2886c     A7 2A E2 FA | 	rdword	local07, fp
28870     20 2A 86 F1 | 	sub	local07, #32
28874     A7 2A 52 FC | 	wrword	local07, fp
28878     14 4E 85 F1 | 	sub	fp, #20
2887c                 | LR__4143
2887c                 | LR__4144
2887c                 | LR__4145
2887c     04 4E 05 F1 | 	add	fp, #4
28880     A7 32 02 FB | 	rdlong	local11, fp
28884     19 2F 02 F6 | 	mov	local09, local11
28888     1C 4E 05 F1 | 	add	fp, #28
2888c     A7 20 02 FB | 	rdlong	local02, fp
28890     10 25 02 F6 | 	mov	local04, local02
28894     01 24 06 F1 | 	add	local04, #1
28898     A7 24 62 FC | 	wrlong	local04, fp
2889c     10 31 02 F6 | 	mov	local10, local02
288a0     20 2E 06 F1 | 	add	local09, #32
288a4     17 31 02 F1 | 	add	local10, local09
288a8     0C 4E 85 F1 | 	sub	fp, #12
288ac     A7 22 E2 FA | 	rdword	local03, fp
288b0     14 4E 85 F1 | 	sub	fp, #20
288b4     18 23 42 FC | 	wrbyte	local03, local10
288b8     50 FC 9F FD | 	jmp	#LR__4130
288bc                 | LR__4146
288bc     04 4E 05 F1 | 	add	fp, #4
288c0     A7 32 02 FB | 	rdlong	local11, fp
288c4     04 4E 85 F1 | 	sub	fp, #4
288c8     20 32 06 F1 | 	add	local11, #32
288cc     19 2B C2 FA | 	rdbyte	local07, local11
288d0     E5 2A 0E F2 | 	cmp	local07, #229 wz
288d4     04 4E 05 A1 |  if_e	add	fp, #4
288d8     A7 2A 02 AB |  if_e	rdlong	local07, fp
288dc     04 4E 85 A1 |  if_e	sub	fp, #4
288e0     20 2A 06 A1 |  if_e	add	local07, #32
288e4     15 0B 48 AC |  if_e	wrbyte	#5, local07
288e8     24 4E 05 F1 | 	add	fp, #36
288ec     A7 2A 02 FB | 	rdlong	local07, fp
288f0     24 4E 85 F1 | 	sub	fp, #36
288f4     08 2A 0E F2 | 	cmp	local07, #8 wz
288f8     0C 4E 05 A1 |  if_e	add	fp, #12
288fc     A7 2A C2 AA |  if_e	rdbyte	local07, fp
28900     02 2A 66 A0 |  if_e	shl	local07, #2
28904     A7 2A 42 AC |  if_e	wrbyte	local07, fp
28908     0C 4E 85 A1 |  if_e	sub	fp, #12
2890c     0C 4E 05 F1 | 	add	fp, #12
28910     A7 2A C2 FA | 	rdbyte	local07, fp
28914     0C 4E 85 F1 | 	sub	fp, #12
28918     0C 2A 06 F5 | 	and	local07, #12
2891c     0C 2A 0E F2 | 	cmp	local07, #12 wz
28920     18 00 90 AD |  if_e	jmp	#LR__4147
28924     0C 4E 05 F1 | 	add	fp, #12
28928     A7 1E C2 FA | 	rdbyte	local01, fp
2892c     0C 4E 85 F1 | 	sub	fp, #12
28930     03 1E 06 F5 | 	and	local01, #3
28934     03 1E 0E F2 | 	cmp	local01, #3 wz
28938     14 00 90 5D |  if_ne	jmp	#LR__4148
2893c                 | LR__4147
2893c     10 4E 05 F1 | 	add	fp, #16
28940     A7 2A C2 FA | 	rdbyte	local07, fp
28944     02 2A 46 F5 | 	or	local07, #2
28948     A7 2A 42 FC | 	wrbyte	local07, fp
2894c     10 4E 85 F1 | 	sub	fp, #16
28950                 | LR__4148
28950     10 4E 05 F1 | 	add	fp, #16
28954     A7 2A C2 FA | 	rdbyte	local07, fp
28958     10 4E 85 F1 | 	sub	fp, #16
2895c     02 2A CE F7 | 	test	local07, #2 wz
28960     48 00 90 5D |  if_ne	jmp	#LR__4149
28964     0C 4E 05 F1 | 	add	fp, #12
28968     A7 2A C2 FA | 	rdbyte	local07, fp
2896c     0C 4E 85 F1 | 	sub	fp, #12
28970     01 2A CE F7 | 	test	local07, #1 wz
28974     10 4E 05 51 |  if_ne	add	fp, #16
28978     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2897c     10 2A 46 55 |  if_ne	or	local07, #16
28980     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
28984     10 4E 85 51 |  if_ne	sub	fp, #16
28988     0C 4E 05 F1 | 	add	fp, #12
2898c     A7 2A C2 FA | 	rdbyte	local07, fp
28990     0C 4E 85 F1 | 	sub	fp, #12
28994     04 2A CE F7 | 	test	local07, #4 wz
28998     10 4E 05 51 |  if_ne	add	fp, #16
2899c     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
289a0     08 2A 46 55 |  if_ne	or	local07, #8
289a4     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
289a8     10 4E 85 51 |  if_ne	sub	fp, #16
289ac                 | LR__4149
289ac     04 4E 05 F1 | 	add	fp, #4
289b0     A7 2A 02 FB | 	rdlong	local07, fp
289b4     0C 4E 05 F1 | 	add	fp, #12
289b8     A7 1E C2 FA | 	rdbyte	local01, fp
289bc     10 4E 85 F1 | 	sub	fp, #16
289c0     2B 2A 06 F1 | 	add	local07, #43
289c4     15 1F 42 FC | 	wrbyte	local01, local07
289c8                 | ' 	}
289c8                 | ' 
289c8                 | ' 	dp->fn[ 11 ] = cf;
289c8                 | ' 
289c8                 | ' 	return FR_OK;
289c8     00 FA 05 F6 | 	mov	result1, #0
289cc                 | LR__4150
289cc     A7 F0 03 F6 | 	mov	ptra, fp
289d0     B2 00 A0 FD | 	call	#popregs_
289d4                 | _fatfs_cc_create_name_ret
289d4     2D 00 64 FD | 	ret
289d8                 | 
289d8                 | _fatfs_cc_follow_path
289d8     02 4A 05 F6 | 	mov	COUNT_, #2
289dc     A8 00 A0 FD | 	call	#pushregs_
289e0     18 F0 07 F1 | 	add	ptra, #24
289e4     04 4E 05 F1 | 	add	fp, #4
289e8     A7 12 62 FC | 	wrlong	arg01, fp
289ec     04 4E 05 F1 | 	add	fp, #4
289f0     A7 14 62 FC | 	wrlong	arg02, fp
289f4     04 4E 85 F1 | 	sub	fp, #4
289f8     A7 FA 01 FB | 	rdlong	result1, fp
289fc     FD 1E 02 FB | 	rdlong	local01, result1
28a00     10 4E 05 F1 | 	add	fp, #16
28a04     A7 1E 62 FC | 	wrlong	local01, fp
28a08     14 4E 85 F1 | 	sub	fp, #20
28a0c     97 24 48 FB | 	callpa	#(@LR__4162-@LR__4160)>>2,fcache_load_ptr_
28a10                 | ' )
28a10                 | ' {
28a10                 | ' 	FRESULT res;
28a10                 | ' 	BYTE ns;
28a10                 | ' 	FATFS *fs = dp->obj.fs;
28a10                 | ' #line 3034 "ff.c"
28a10                 | ' 	{
28a10                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
28a10                 | LR__4160
28a10     08 4E 05 F1 | 	add	fp, #8
28a14     A7 1E 02 FB | 	rdlong	local01, fp
28a18     08 4E 85 F1 | 	sub	fp, #8
28a1c     0F 1F C2 FA | 	rdbyte	local01, local01
28a20     2F 1E 0E F2 | 	cmp	local01, #47 wz
28a24     18 00 90 AD |  if_e	jmp	#LR__4161
28a28     08 4E 05 F1 | 	add	fp, #8
28a2c     A7 1E 02 FB | 	rdlong	local01, fp
28a30     08 4E 85 F1 | 	sub	fp, #8
28a34     0F 1F C2 FA | 	rdbyte	local01, local01
28a38     5C 1E 0E F2 | 	cmp	local01, #92 wz
28a3c     18 00 90 5D |  if_ne	jmp	#LR__4163
28a40                 | LR__4161
28a40     08 4E 05 F1 | 	add	fp, #8
28a44     A7 1E 02 FB | 	rdlong	local01, fp
28a48     01 1E 06 F1 | 	add	local01, #1
28a4c     A7 1E 62 FC | 	wrlong	local01, fp
28a50     08 4E 85 F1 | 	sub	fp, #8
28a54     B8 FF 9F FD | 	jmp	#LR__4160
28a58                 | LR__4162
28a58                 | LR__4163
28a58     04 4E 05 F1 | 	add	fp, #4
28a5c     A7 1E 02 FB | 	rdlong	local01, fp
28a60     08 1E 06 F1 | 	add	local01, #8
28a64     0F 01 68 FC | 	wrlong	#0, local01
28a68     04 4E 05 F1 | 	add	fp, #4
28a6c     A7 1E 02 FB | 	rdlong	local01, fp
28a70     08 4E 85 F1 | 	sub	fp, #8
28a74     0F 1F C2 FA | 	rdbyte	local01, local01
28a78     20 1E 16 F2 | 	cmp	local01, #32 wc
28a7c     30 00 90 3D |  if_ae	jmp	#LR__4164
28a80     04 4E 05 F1 | 	add	fp, #4
28a84     A7 1E 02 FB | 	rdlong	local01, fp
28a88     2B 1E 06 F1 | 	add	local01, #43
28a8c     0F 01 49 FC | 	wrbyte	#128, local01
28a90     A7 12 02 FB | 	rdlong	arg01, fp
28a94     04 4E 85 F1 | 	sub	fp, #4
28a98     00 14 06 F6 | 	mov	arg02, #0
28a9c     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
28aa0     0C 4E 05 F1 | 	add	fp, #12
28aa4     A7 FA 61 FC | 	wrlong	result1, fp
28aa8     0C 4E 85 F1 | 	sub	fp, #12
28aac     1C 01 90 FD | 	jmp	#LR__4168
28ab0                 | LR__4164
28ab0                 | ' 		for (;;) {
28ab0                 | LR__4165
28ab0     04 4E 05 F1 | 	add	fp, #4
28ab4     A7 12 02 FB | 	rdlong	arg01, fp
28ab8     04 4E 05 F1 | 	add	fp, #4
28abc     A7 14 02 F6 | 	mov	arg02, fp
28ac0     08 4E 85 F1 | 	sub	fp, #8
28ac4     14 F6 BF FD | 	call	#_fatfs_cc_create_name
28ac8     0C 4E 05 F1 | 	add	fp, #12
28acc     A7 FA 61 FC | 	wrlong	result1, fp
28ad0     00 FA 4D F2 | 	cmps	result1, #0 wz
28ad4     0C 4E 85 F1 | 	sub	fp, #12
28ad8     F0 00 90 5D |  if_ne	jmp	#LR__4167
28adc     04 4E 05 F1 | 	add	fp, #4
28ae0     A7 12 02 FB | 	rdlong	arg01, fp
28ae4     04 4E 85 F1 | 	sub	fp, #4
28ae8     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
28aec     0C 4E 05 F1 | 	add	fp, #12
28af0     A7 FA 61 FC | 	wrlong	result1, fp
28af4     08 4E 85 F1 | 	sub	fp, #8
28af8     A7 1E 02 FB | 	rdlong	local01, fp
28afc     2B 1E 06 F1 | 	add	local01, #43
28b00     0F 1F C2 FA | 	rdbyte	local01, local01
28b04     0C 4E 05 F1 | 	add	fp, #12
28b08     A7 1E 42 FC | 	wrbyte	local01, fp
28b0c     04 4E 85 F1 | 	sub	fp, #4
28b10     A7 1E 0A FB | 	rdlong	local01, fp wz
28b14     0C 4E 85 F1 | 	sub	fp, #12
28b18     34 00 90 AD |  if_e	jmp	#LR__4166
28b1c     0C 4E 05 F1 | 	add	fp, #12
28b20     A7 1E 02 FB | 	rdlong	local01, fp
28b24     0C 4E 85 F1 | 	sub	fp, #12
28b28     04 1E 0E F2 | 	cmp	local01, #4 wz
28b2c     9C 00 90 5D |  if_ne	jmp	#LR__4167
28b30     10 4E 05 F1 | 	add	fp, #16
28b34     A7 1E C2 FA | 	rdbyte	local01, fp
28b38     10 4E 85 F1 | 	sub	fp, #16
28b3c     04 1E CE F7 | 	test	local01, #4 wz
28b40     0C 4E 05 A1 |  if_e	add	fp, #12
28b44     A7 0A 68 AC |  if_e	wrlong	#5, fp
28b48     0C 4E 85 A1 |  if_e	sub	fp, #12
28b4c                 | ' 					}
28b4c                 | ' 				}
28b4c                 | ' 				break;
28b4c     7C 00 90 FD | 	jmp	#LR__4167
28b50                 | LR__4166
28b50     10 4E 05 F1 | 	add	fp, #16
28b54     A7 1E C2 FA | 	rdbyte	local01, fp
28b58     10 4E 85 F1 | 	sub	fp, #16
28b5c     04 1E CE F7 | 	test	local01, #4 wz
28b60     68 00 90 5D |  if_ne	jmp	#LR__4167
28b64     04 4E 05 F1 | 	add	fp, #4
28b68     A7 1E 02 FB | 	rdlong	local01, fp
28b6c     04 4E 85 F1 | 	sub	fp, #4
28b70     06 1E 06 F1 | 	add	local01, #6
28b74     0F 1F C2 FA | 	rdbyte	local01, local01
28b78     10 1E CE F7 | 	test	local01, #16 wz
28b7c     0C 4E 05 A1 |  if_e	add	fp, #12
28b80     A7 0A 68 AC |  if_e	wrlong	#5, fp
28b84     0C 4E 85 A1 |  if_e	sub	fp, #12
28b88                 | ' 				res = FR_NO_PATH; break;
28b88     40 00 90 AD |  if_e	jmp	#LR__4167
28b8c     04 4E 05 F1 | 	add	fp, #4
28b90     A7 20 02 FB | 	rdlong	local02, fp
28b94     10 1F 02 F6 | 	mov	local01, local02
28b98     10 4E 05 F1 | 	add	fp, #16
28b9c     A7 14 02 FB | 	rdlong	arg02, fp
28ba0     0A 13 02 F6 | 	mov	arg01, arg02
28ba4     34 14 06 F1 | 	add	arg02, #52
28ba8     14 4E 85 F1 | 	sub	fp, #20
28bac     10 20 06 F1 | 	add	local02, #16
28bb0     10 21 02 FB | 	rdlong	local02, local02
28bb4     FF 21 06 F5 | 	and	local02, #511
28bb8     10 15 02 F1 | 	add	arg02, local02
28bbc     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
28bc0     08 1E 06 F1 | 	add	local01, #8
28bc4     0F FB 61 FC | 	wrlong	result1, local01
28bc8     E4 FE 9F FD | 	jmp	#LR__4165
28bcc                 | LR__4167
28bcc                 | LR__4168
28bcc                 | ' 			}
28bcc                 | ' #line 3090 "ff.c"
28bcc                 | ' 			{
28bcc                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
28bcc                 | ' 			}
28bcc                 | ' 		}
28bcc                 | ' 	}
28bcc                 | ' 
28bcc                 | ' 	return res;
28bcc     0C 4E 05 F1 | 	add	fp, #12
28bd0     A7 FA 01 FB | 	rdlong	result1, fp
28bd4     0C 4E 85 F1 | 	sub	fp, #12
28bd8     A7 F0 03 F6 | 	mov	ptra, fp
28bdc     B2 00 A0 FD | 	call	#popregs_
28be0                 | _fatfs_cc_follow_path_ret
28be0     2D 00 64 FD | 	ret
28be4                 | 
28be4                 | _fatfs_cc_get_ldnumber
28be4     01 00 66 F6 | 	neg	_var01, #1
28be8     09 03 0A FB | 	rdlong	_var02, arg01 wz
28bec     01 05 02 F6 | 	mov	_var03, _var02
28bf0     01 FA 65 A6 |  if_e	neg	result1, #1
28bf4     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
28bf8     97 10 48 FB | 	callpa	#(@LR__4171-@LR__4170)>>2,fcache_load_ptr_
28bfc                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
28bfc                 | LR__4170
28bfc     02 07 C2 FA | 	rdbyte	_var04, _var03
28c00     03 FB E1 F8 | 	getbyte	result1, _var04, #0
28c04     20 FA 15 F2 | 	cmp	result1, #32 wc
28c08     01 04 06 F1 | 	add	_var03, #1
28c0c     03 09 02 36 |  if_ae	mov	_var05, _var04
28c10     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
28c14     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
28c18     E0 FF 9F 1D |  if_a	jmp	#LR__4170
28c1c                 | LR__4171
28c1c     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
28c20     3A 06 0E F2 | 	cmp	_var04, #58 wz
28c24     40 00 90 5D |  if_ne	jmp	#LR__4173
28c28     01 0A 06 F6 | 	mov	_var06, #1
28c2c     01 09 C2 FA | 	rdbyte	_var05, _var02
28c30     30 08 16 F2 | 	cmp	_var05, #48 wc
28c34     1C 00 90 CD |  if_b	jmp	#LR__4172
28c38     01 09 C2 FA | 	rdbyte	_var05, _var02
28c3c     3A 08 16 F2 | 	cmp	_var05, #58 wc
28c40     01 0D 02 C6 |  if_b	mov	_var07, _var02
28c44     02 0C 06 C1 |  if_b	add	_var07, #2
28c48     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
28c4c     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
28c50     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
28c54                 | LR__4172
28c54     01 0A 56 F2 | 	cmps	_var06, #1 wc
28c58     05 01 02 C6 |  if_b	mov	_var01, _var06
28c5c     09 05 62 CC |  if_b	wrlong	_var03, arg01
28c60                 | ' 			vol = i;
28c60                 | ' 			*path = tt;
28c60                 | ' 		}
28c60                 | ' 		return vol;
28c60     00 FB 01 F6 | 	mov	result1, _var01
28c64     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
28c68                 | LR__4173
28c68                 | ' 	}
28c68                 | ' #line 3170 "ff.c"
28c68                 | ' 	vol = 0;
28c68                 | ' 
28c68                 | ' 	return vol;
28c68     00 FA 05 F6 | 	mov	result1, #0
28c6c                 | _fatfs_cc_get_ldnumber_ret
28c6c     2D 00 64 FD | 	ret
28c70                 | 
28c70                 | _fatfs_cc_check_fs
28c70     04 4A 05 F6 | 	mov	COUNT_, #4
28c74     A8 00 A0 FD | 	call	#pushregs_
28c78     09 1F 02 F6 | 	mov	local01, arg01
28c7c     03 1E 06 F1 | 	add	local01, #3
28c80     0F 01 48 FC | 	wrbyte	#0, local01
28c84     2D 1E 06 F1 | 	add	local01, #45
28c88     FF FF FF FF 
28c8c     0F FF 6B FC | 	wrlong	##-1, local01
28c90     30 1E 86 F1 | 	sub	local01, #48
28c94     0F 13 02 F6 | 	mov	arg01, local01
28c98     18 D5 BF FD | 	call	#_fatfs_cc_move_window
28c9c     00 FA 0D F2 | 	cmp	result1, #0 wz
28ca0     04 FA 05 56 |  if_ne	mov	result1, #4
28ca4     94 01 90 5D |  if_ne	jmp	#LR__4184
28ca8     34 1E 06 F1 | 	add	local01, #52
28cac     0F 13 02 F6 | 	mov	arg01, local01
28cb0     FE 13 06 F1 | 	add	arg01, #510
28cb4                 | ' {
28cb4                 | ' 
28cb4                 | ' 	return *((WORD*)ptr);
28cb4     09 21 E2 FA | 	rdword	local02, arg01
28cb8     0F 23 C2 FA | 	rdbyte	local03, local01
28cbc     34 1E 86 F1 | 	sub	local01, #52
28cc0     11 25 E2 F8 | 	getbyte	local04, local03, #0
28cc4     EB 24 0E F2 | 	cmp	local04, #235 wz
28cc8     11 17 02 56 |  if_ne	mov	arg03, local03
28ccc     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
28cd0     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
28cd4     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
28cd8     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
28cdc     44 01 90 5D |  if_ne	jmp	#LR__4183
28ce0     10 25 32 F9 | 	getword	local04, local02, #0
28ce4     55 00 00 FF 
28ce8     55 24 0E F2 | 	cmp	local04, ##43605 wz
28cec     2C 00 90 5D |  if_ne	jmp	#LR__4180
28cf0     34 1E 06 F1 | 	add	local01, #52
28cf4     0F 13 02 F6 | 	mov	arg01, local01
28cf8     34 1E 86 F1 | 	sub	local01, #52
28cfc     52 12 06 F1 | 	add	arg01, #82
28d00     70 01 00 FF 
28d04     50 15 06 F6 | 	mov	arg02, ##@LR__4774
28d08     08 16 06 F6 | 	mov	arg03, #8
28d0c     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
28d10     00 FA 0D F2 | 	cmp	result1, #0 wz
28d14                 | ' 			return 0;
28d14     00 FA 05 A6 |  if_e	mov	result1, #0
28d18     20 01 90 AD |  if_e	jmp	#LR__4184
28d1c                 | LR__4180
28d1c     34 1E 06 F1 | 	add	local01, #52
28d20     0F 13 02 F6 | 	mov	arg01, local01
28d24     0B 12 06 F1 | 	add	arg01, #11
28d28                 | ' {
28d28                 | ' 
28d28                 | ' 	return *((WORD*)ptr);
28d28     09 FB E1 FA | 	rdword	result1, arg01
28d2c     0D 1E 06 F1 | 	add	local01, #13
28d30     0F 23 C2 FA | 	rdbyte	local03, local01
28d34     41 1E 86 F1 | 	sub	local01, #65
28d38     FD 24 32 F9 | 	getword	local04, result1, #0
28d3c     FD 14 32 F9 | 	getword	arg02, result1, #0
28d40     01 14 86 F1 | 	sub	arg02, #1
28d44     0A 25 CA F7 | 	test	local04, arg02 wz
28d48     D8 00 90 5D |  if_ne	jmp	#LR__4182
28d4c     FD 14 32 F9 | 	getword	arg02, result1, #0
28d50     01 00 00 FF 
28d54     00 14 16 F2 | 	cmp	arg02, ##512 wc
28d58     C8 00 90 CD |  if_b	jmp	#LR__4182
28d5c     FD 14 32 F9 | 	getword	arg02, result1, #0
28d60     01 00 00 FF 
28d64     01 14 16 F2 | 	cmp	arg02, ##513 wc
28d68     B8 00 90 3D |  if_ae	jmp	#LR__4182
28d6c     11 13 02 F6 | 	mov	arg01, local03
28d70     07 12 4E F7 | 	zerox	arg01, #7 wz
28d74     AC 00 90 AD |  if_e	jmp	#LR__4182
28d78     11 13 E2 F8 | 	getbyte	arg01, local03, #0
28d7c     11 23 E2 F8 | 	getbyte	local03, local03, #0
28d80     01 22 86 F1 | 	sub	local03, #1
28d84     11 13 CA F7 | 	test	arg01, local03 wz
28d88     98 00 90 5D |  if_ne	jmp	#LR__4182
28d8c     34 1E 06 F1 | 	add	local01, #52
28d90     0F 13 02 F6 | 	mov	arg01, local01
28d94     34 1E 86 F1 | 	sub	local01, #52
28d98     0E 12 06 F1 | 	add	arg01, #14
28d9c                 | ' {
28d9c                 | ' 
28d9c                 | ' 	return *((WORD*)ptr);
28d9c     09 FB E9 FA | 	rdword	result1, arg01 wz
28da0     80 00 90 AD |  if_e	jmp	#LR__4182
28da4     44 1E 06 F1 | 	add	local01, #68
28da8     0F 13 C2 FA | 	rdbyte	arg01, local01
28dac     44 1E 86 F1 | 	sub	local01, #68
28db0     01 12 86 F1 | 	sub	arg01, #1
28db4     02 12 16 F2 | 	cmp	arg01, #2 wc
28db8     68 00 90 3D |  if_ae	jmp	#LR__4182
28dbc     34 1E 06 F1 | 	add	local01, #52
28dc0     0F 13 02 F6 | 	mov	arg01, local01
28dc4     34 1E 86 F1 | 	sub	local01, #52
28dc8     11 12 06 F1 | 	add	arg01, #17
28dcc                 | ' {
28dcc                 | ' 
28dcc                 | ' 	return *((WORD*)ptr);
28dcc     09 FB E9 FA | 	rdword	result1, arg01 wz
28dd0     50 00 90 AD |  if_e	jmp	#LR__4182
28dd4     34 1E 06 F1 | 	add	local01, #52
28dd8     0F 13 02 F6 | 	mov	arg01, local01
28ddc     34 1E 86 F1 | 	sub	local01, #52
28de0     13 12 06 F1 | 	add	arg01, #19
28de4                 | ' {
28de4                 | ' 
28de4                 | ' 	return *((WORD*)ptr);
28de4     09 FB E1 FA | 	rdword	result1, arg01
28de8     FD 22 32 F9 | 	getword	local03, result1, #0
28dec     80 22 16 F2 | 	cmp	local03, #128 wc
28df0     20 00 90 3D |  if_ae	jmp	#LR__4181
28df4     34 1E 06 F1 | 	add	local01, #52
28df8     0F 13 02 F6 | 	mov	arg01, local01
28dfc     34 1E 86 F1 | 	sub	local01, #52
28e00     20 12 06 F1 | 	add	arg01, #32
28e04                 | ' {
28e04                 | ' 
28e04                 | ' 	return *((DWORD*)ptr);
28e04     09 FB 01 FB | 	rdlong	result1, arg01
28e08     80 00 00 FF 
28e0c     00 FA 15 F2 | 	cmp	result1, ##65536 wc
28e10     10 00 90 CD |  if_b	jmp	#LR__4182
28e14                 | LR__4181
28e14     4A 1E 06 F1 | 	add	local01, #74
28e18                 | ' {
28e18                 | ' 
28e18                 | ' 	return *((WORD*)ptr);
28e18     0F FB E9 FA | 	rdword	result1, local01 wz
28e1c                 | ' 			&& b != 0 && (b & (b - 1)) == 0
28e1c                 | ' 			&& ld_word(fs->win +  14 ) != 0
28e1c                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
28e1c                 | ' 			&& ld_word(fs->win +  17 ) != 0
28e1c                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
28e1c                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
28e1c                 | ' 				return 0;
28e1c     00 FA 05 56 |  if_ne	mov	result1, #0
28e20     18 00 90 5D |  if_ne	jmp	#LR__4184
28e24                 | LR__4182
28e24                 | LR__4183
28e24                 | ' 		}
28e24                 | ' 	}
28e24                 | ' 	return sign == 0xAA55 ? 2 : 3;
28e24     10 23 32 F9 | 	getword	local03, local02, #0
28e28     55 00 00 FF 
28e2c     55 22 0E F2 | 	cmp	local03, ##43605 wz
28e30     02 24 06 A6 |  if_e	mov	local04, #2
28e34     03 24 06 56 |  if_ne	mov	local04, #3
28e38     12 FB 01 F6 | 	mov	result1, local04
28e3c                 | LR__4184
28e3c     A7 F0 03 F6 | 	mov	ptra, fp
28e40     B2 00 A0 FD | 	call	#popregs_
28e44                 | _fatfs_cc_check_fs_ret
28e44     2D 00 64 FD | 	ret
28e48                 | 
28e48                 | _fatfs_cc_find_volume
28e48     05 4A 05 F6 | 	mov	COUNT_, #5
28e4c     A8 00 A0 FD | 	call	#pushregs_
28e50     24 F0 07 F1 | 	add	ptra, #36
28e54     09 1F 02 F6 | 	mov	local01, arg01
28e58     0A 21 02 F6 | 	mov	local02, arg02
28e5c     0F 13 02 F6 | 	mov	arg01, local01
28e60     00 14 06 F6 | 	mov	arg02, #0
28e64     08 FE BF FD | 	call	#_fatfs_cc_check_fs
28e68     02 FA 0D F2 | 	cmp	result1, #2 wz
28e6c     0C 00 90 AD |  if_e	jmp	#LR__4190
28e70     03 FA 15 F2 | 	cmp	result1, #3 wc
28e74     00 20 0E C2 |  if_b	cmp	local02, #0 wz
28e78     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4198
28e7c                 | LR__4190
28e7c                 | ' 	for (i = 0; i < 4; i++) {
28e7c     00 22 06 F6 | 	mov	local03, #0
28e80     97 26 48 FB | 	callpa	#(@LR__4192-@LR__4191)>>2,fcache_load_ptr_
28e84                 | LR__4191
28e84     04 22 16 F2 | 	cmp	local03, #4 wc
28e88     44 00 90 3D |  if_ae	jmp	#LR__4193
28e8c     11 25 02 F6 | 	mov	local04, local03
28e90     02 24 66 F0 | 	shl	local04, #2
28e94     14 4E 05 F1 | 	add	fp, #20
28e98     A7 24 02 F1 | 	add	local04, fp
28e9c     34 1E 06 F1 | 	add	local01, #52
28ea0     0F 13 02 F6 | 	mov	arg01, local01
28ea4     34 1E 86 F1 | 	sub	local01, #52
28ea8     BE 13 06 F1 | 	add	arg01, #446
28eac     11 15 02 F6 | 	mov	arg02, local03
28eb0     04 14 66 F0 | 	shl	arg02, #4
28eb4     0A 13 02 F1 | 	add	arg01, arg02
28eb8     08 12 06 F1 | 	add	arg01, #8
28ebc                 | ' {
28ebc                 | ' 
28ebc                 | ' 	return *((DWORD*)ptr);
28ebc     09 FB 01 FB | 	rdlong	result1, arg01
28ec0     14 4E 85 F1 | 	sub	fp, #20
28ec4     12 FB 61 FC | 	wrlong	result1, local04
28ec8     01 22 06 F1 | 	add	local03, #1
28ecc     B4 FF 9F FD | 	jmp	#LR__4191
28ed0                 | LR__4192
28ed0                 | LR__4193
28ed0     00 20 0E F2 | 	cmp	local02, #0 wz
28ed4     10 25 02 56 |  if_ne	mov	local04, local02
28ed8     01 24 86 51 |  if_ne	sub	local04, #1
28edc     00 24 06 A6 |  if_e	mov	local04, #0
28ee0     12 23 02 F6 | 	mov	local03, local04
28ee4                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
28ee4                 | ' 	}
28ee4                 | ' 	i = part ? part - 1 : 0;
28ee4                 | ' 	do {
28ee4                 | LR__4194
28ee4     11 25 02 F6 | 	mov	local04, local03
28ee8     02 24 66 F0 | 	shl	local04, #2
28eec     14 4E 05 F1 | 	add	fp, #20
28ef0     A7 24 02 F1 | 	add	local04, fp
28ef4     12 25 0A FB | 	rdlong	local04, local04 wz
28ef8     14 4E 85 F1 | 	sub	fp, #20
28efc     28 00 90 AD |  if_e	jmp	#LR__4195
28f00     11 25 02 F6 | 	mov	local04, local03
28f04     02 24 66 F0 | 	shl	local04, #2
28f08     14 4E 05 F1 | 	add	fp, #20
28f0c     A7 24 02 F1 | 	add	local04, fp
28f10     12 15 02 FB | 	rdlong	arg02, local04
28f14     0F 13 02 F6 | 	mov	arg01, local01
28f18     14 4E 85 F1 | 	sub	fp, #20
28f1c     50 FD BF FD | 	call	#_fatfs_cc_check_fs
28f20     FD 24 02 F6 | 	mov	local04, result1
28f24     04 00 90 FD | 	jmp	#LR__4196
28f28                 | LR__4195
28f28     03 24 06 F6 | 	mov	local04, #3
28f2c                 | LR__4196
28f2c     12 27 02 F6 | 	mov	local05, local04
28f30     00 20 0E F2 | 	cmp	local02, #0 wz
28f34     02 26 16 A2 |  if_e	cmp	local05, #2 wc
28f38     0C 00 90 8D |  if_c_and_z	jmp	#LR__4197
28f3c     01 22 06 A1 |  if_e	add	local03, #1
28f40     04 22 16 A2 |  if_e	cmp	local03, #4 wc
28f44     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4194
28f48                 | LR__4197
28f48                 | ' 	return fmt;
28f48     13 FB 01 F6 | 	mov	result1, local05
28f4c                 | LR__4198
28f4c     A7 F0 03 F6 | 	mov	ptra, fp
28f50     B2 00 A0 FD | 	call	#popregs_
28f54                 | _fatfs_cc_find_volume_ret
28f54     2D 00 64 FD | 	ret
28f58                 | 
28f58                 | _fatfs_cc_mount_volume
28f58     0B 4A 05 F6 | 	mov	COUNT_, #11
28f5c     A8 00 A0 FD | 	call	#pushregs_
28f60     0A 1F 02 F6 | 	mov	local01, arg02
28f64     0B 21 02 F6 | 	mov	local02, arg03
28f68     0F 01 68 FC | 	wrlong	#0, local01
28f6c     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
28f70     FD 22 02 F6 | 	mov	local03, result1
28f74     00 22 56 F2 | 	cmps	local03, #0 wc
28f78     0B FA 05 C6 |  if_b	mov	result1, #11
28f7c     3C 05 90 CD |  if_b	jmp	#LR__4210
28f80     11 17 02 F6 | 	mov	arg03, local03
28f84     02 16 66 F0 | 	shl	arg03, #2
28f88     F2 16 02 F1 | 	add	arg03, objptr
28f8c     0B 25 0A FB | 	rdlong	local04, arg03 wz
28f90     0C FA 05 A6 |  if_e	mov	result1, #12
28f94     24 05 90 AD |  if_e	jmp	#LR__4210
28f98     0F 25 62 FC | 	wrlong	local04, local01
28f9c     10 21 E2 F8 | 	getbyte	local02, local02, #0
28fa0     FE 20 06 F5 | 	and	local02, #254
28fa4     12 17 CA FA | 	rdbyte	arg03, local04 wz
28fa8     4C 00 90 AD |  if_e	jmp	#LR__4201
28fac     01 24 06 F1 | 	add	local04, #1
28fb0     12 13 CA FA | 	rdbyte	arg01, local04 wz
28fb4     01 24 86 F1 | 	sub	local04, #1
28fb8     01 FA 05 56 |  if_ne	mov	result1, #1
28fbc                 | ' 
28fbc                 | ' 	return Stat;
28fbc     01 00 00 AF 
28fc0     20 E4 05 A1 |  if_e	add	objptr, ##544
28fc4     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
28fc8     01 00 00 AF 
28fcc     20 E4 85 A1 |  if_e	sub	objptr, ##544
28fd0     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
28fd4     01 16 CE F7 | 	test	arg03, #1 wz
28fd8     1C 00 90 5D |  if_ne	jmp	#LR__4200
28fdc     00 20 0E F2 | 	cmp	local02, #0 wz
28fe0     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
28fe4     04 FA CD 57 |  if_ne	test	result1, #4 wz
28fe8                 | ' 				return FR_WRITE_PROTECTED;
28fe8     0A FA 05 56 |  if_ne	mov	result1, #10
28fec     CC 04 90 5D |  if_ne	jmp	#LR__4210
28ff0                 | ' 			}
28ff0                 | ' 			return FR_OK;
28ff0     00 FA 05 F6 | 	mov	result1, #0
28ff4     C4 04 90 FD | 	jmp	#LR__4210
28ff8                 | LR__4200
28ff8                 | LR__4201
28ff8     12 01 48 FC | 	wrbyte	#0, local04
28ffc     01 24 06 F1 | 	add	local04, #1
29000     12 23 42 FC | 	wrbyte	local03, local04
29004     12 13 C2 FA | 	rdbyte	arg01, local04
29008     01 24 86 F1 | 	sub	local04, #1
2900c     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
29010     FD 16 02 F6 | 	mov	arg03, result1
29014     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
29018     01 26 CE F7 | 	test	local05, #1 wz
2901c                 | ' 		return FR_NOT_READY;
2901c     03 FA 05 56 |  if_ne	mov	result1, #3
29020     98 04 90 5D |  if_ne	jmp	#LR__4210
29024     00 20 0E F2 | 	cmp	local02, #0 wz
29028     0B 27 02 56 |  if_ne	mov	local05, arg03
2902c     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
29030     04 26 CE 57 |  if_ne	test	local05, #4 wz
29034                 | ' 		return FR_WRITE_PROTECTED;
29034     0A FA 05 56 |  if_ne	mov	result1, #10
29038     80 04 90 5D |  if_ne	jmp	#LR__4210
2903c     12 13 02 F6 | 	mov	arg01, local04
29040     00 14 06 F6 | 	mov	arg02, #0
29044     00 FE BF FD | 	call	#_fatfs_cc_find_volume
29048     FD 12 02 F6 | 	mov	arg01, result1
2904c     04 12 0E F2 | 	cmp	arg01, #4 wz
29050     01 FA 05 A6 |  if_e	mov	result1, #1
29054     64 04 90 AD |  if_e	jmp	#LR__4210
29058     02 12 16 F2 | 	cmp	arg01, #2 wc
2905c     0D FA 05 36 |  if_ae	mov	result1, #13
29060     58 04 90 3D |  if_ae	jmp	#LR__4210
29064     30 24 06 F1 | 	add	local04, #48
29068     12 29 02 FB | 	rdlong	local06, local04
2906c     04 24 06 F1 | 	add	local04, #4
29070     12 13 02 F6 | 	mov	arg01, local04
29074     34 24 86 F1 | 	sub	local04, #52
29078     0B 12 06 F1 | 	add	arg01, #11
2907c                 | ' {
2907c                 | ' 
2907c                 | ' 	return *((WORD*)ptr);
2907c     09 FB E1 FA | 	rdword	result1, arg01
29080     01 00 00 FF 
29084     00 FA 0D F2 | 	cmp	result1, ##512 wz
29088     0D FA 05 56 |  if_ne	mov	result1, #13
2908c     2C 04 90 5D |  if_ne	jmp	#LR__4210
29090     34 24 06 F1 | 	add	local04, #52
29094     12 13 02 F6 | 	mov	arg01, local04
29098     34 24 86 F1 | 	sub	local04, #52
2909c     16 12 06 F1 | 	add	arg01, #22
290a0                 | ' {
290a0                 | ' 
290a0                 | ' 	return *((WORD*)ptr);
290a0     09 FB E1 FA | 	rdword	result1, arg01
290a4     FD 2A 0A F6 | 	mov	local07, result1 wz
290a8     18 00 90 5D |  if_ne	jmp	#LR__4202
290ac     34 24 06 F1 | 	add	local04, #52
290b0     12 13 02 F6 | 	mov	arg01, local04
290b4     34 24 86 F1 | 	sub	local04, #52
290b8     24 12 06 F1 | 	add	arg01, #36
290bc                 | ' {
290bc                 | ' 
290bc                 | ' 	return *((DWORD*)ptr);
290bc     09 FB 01 FB | 	rdlong	result1, arg01
290c0     FD 2A 02 F6 | 	mov	local07, result1
290c4                 | LR__4202
290c4     1C 24 06 F1 | 	add	local04, #28
290c8     12 2B 62 FC | 	wrlong	local07, local04
290cc     28 24 06 F1 | 	add	local04, #40
290d0     12 27 C2 FA | 	rdbyte	local05, local04
290d4     42 24 86 F1 | 	sub	local04, #66
290d8     12 27 42 FC | 	wrbyte	local05, local04
290dc     12 27 C2 FA | 	rdbyte	local05, local04
290e0     02 24 86 F1 | 	sub	local04, #2
290e4     01 26 0E F2 | 	cmp	local05, #1 wz
290e8     02 24 06 51 |  if_ne	add	local04, #2
290ec     12 27 C2 5A |  if_ne	rdbyte	local05, local04
290f0     02 24 86 51 |  if_ne	sub	local04, #2
290f4     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
290f8     0D FA 05 56 |  if_ne	mov	result1, #13
290fc     BC 03 90 5D |  if_ne	jmp	#LR__4210
29100     02 24 06 F1 | 	add	local04, #2
29104     12 27 C2 FA | 	rdbyte	local05, local04
29108     13 2B 02 FD | 	qmul	local07, local05
2910c     3F 24 06 F1 | 	add	local04, #63
29110     12 27 C2 FA | 	rdbyte	local05, local04
29114     37 24 86 F1 | 	sub	local04, #55
29118     12 27 52 FC | 	wrword	local05, local04
2911c     12 27 EA FA | 	rdword	local05, local04 wz
29120     0A 24 86 F1 | 	sub	local04, #10
29124     18 2A 62 FD | 	getqx	local07
29128     20 00 90 AD |  if_e	jmp	#LR__4203
2912c     0A 24 06 F1 | 	add	local04, #10
29130     12 27 E2 FA | 	rdword	local05, local04
29134     13 23 32 F9 | 	getword	local03, local05, #0
29138     0A 24 86 F1 | 	sub	local04, #10
2913c     13 27 32 F9 | 	getword	local05, local05, #0
29140     01 26 86 F1 | 	sub	local05, #1
29144     13 23 CA F7 | 	test	local03, local05 wz
29148     08 00 90 AD |  if_e	jmp	#LR__4204
2914c                 | LR__4203
2914c     0D FA 05 F6 | 	mov	result1, #13
29150     68 03 90 FD | 	jmp	#LR__4210
29154                 | LR__4204
29154     34 24 06 F1 | 	add	local04, #52
29158     12 13 02 F6 | 	mov	arg01, local04
2915c     11 12 06 F1 | 	add	arg01, #17
29160                 | ' {
29160                 | ' 
29160                 | ' 	return *((WORD*)ptr);
29160     09 FB E1 FA | 	rdword	result1, arg01
29164     2C 24 86 F1 | 	sub	local04, #44
29168     12 FB 51 FC | 	wrword	result1, local04
2916c     12 27 E2 FA | 	rdword	local05, local04
29170     08 24 86 F1 | 	sub	local04, #8
29174     13 13 52 F6 | 	abs	arg01, local05 wc
29178     09 13 42 F8 | 	getnib	arg01, arg01, #0
2917c     09 13 8A F6 | 	negc	arg01, arg01 wz
29180     0D FA 05 56 |  if_ne	mov	result1, #13
29184     34 03 90 5D |  if_ne	jmp	#LR__4210
29188     34 24 06 F1 | 	add	local04, #52
2918c     12 13 02 F6 | 	mov	arg01, local04
29190     34 24 86 F1 | 	sub	local04, #52
29194     13 12 06 F1 | 	add	arg01, #19
29198                 | ' {
29198                 | ' 
29198                 | ' 	return *((WORD*)ptr);
29198     09 FB E1 FA | 	rdword	result1, arg01
2919c     FD 2C 0A F6 | 	mov	local08, result1 wz
291a0     34 24 06 A1 |  if_e	add	local04, #52
291a4     12 13 02 A6 |  if_e	mov	arg01, local04
291a8     34 24 86 A1 |  if_e	sub	local04, #52
291ac     20 12 06 A1 |  if_e	add	arg01, #32
291b0                 | ' {
291b0                 | ' 
291b0                 | ' 	return *((DWORD*)ptr);
291b0     09 2D 02 AB |  if_e	rdlong	local08, arg01
291b4     34 24 06 F1 | 	add	local04, #52
291b8     12 13 02 F6 | 	mov	arg01, local04
291bc     34 24 86 F1 | 	sub	local04, #52
291c0     0E 12 06 F1 | 	add	arg01, #14
291c4                 | ' {
291c4                 | ' 
291c4                 | ' 	return *((WORD*)ptr);
291c4     09 FB E1 FA | 	rdword	result1, arg01
291c8     FD 12 02 F6 | 	mov	arg01, result1
291cc     09 27 02 F6 | 	mov	local05, arg01
291d0     0F 26 4E F7 | 	zerox	local05, #15 wz
291d4     0D FA 05 A6 |  if_e	mov	result1, #13
291d8     E0 02 90 AD |  if_e	jmp	#LR__4210
291dc     09 2F 32 F9 | 	getword	local09, arg01, #0
291e0     15 2F 02 F1 | 	add	local09, local07
291e4     08 24 06 F1 | 	add	local04, #8
291e8     12 27 E2 FA | 	rdword	local05, local04
291ec     08 24 86 F1 | 	sub	local04, #8
291f0     13 27 52 F6 | 	abs	local05, local05 wc
291f4     04 26 46 F0 | 	shr	local05, #4
291f8     13 2F 82 F3 | 	sumc	local09, local05
291fc     17 2D 12 F2 | 	cmp	local08, local09 wc
29200     0D FA 05 C6 |  if_b	mov	result1, #13
29204     B4 02 90 CD |  if_b	jmp	#LR__4210
29208     17 2D 82 F1 | 	sub	local08, local09
2920c     0A 24 06 F1 | 	add	local04, #10
29210     12 27 E2 FA | 	rdword	local05, local04
29214     13 2D 12 FD | 	qdiv	local08, local05
29218     0A 24 86 F1 | 	sub	local04, #10
2921c     18 26 62 FD | 	getqx	local05
29220     00 26 0E F2 | 	cmp	local05, #0 wz
29224     0D FA 05 A6 |  if_e	mov	result1, #13
29228     90 02 90 AD |  if_e	jmp	#LR__4210
2922c     00 30 06 F6 | 	mov	local10, #0
29230     FF FF 07 FF 
29234     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
29238     03 30 06 C6 |  if_b	mov	local10, #3
2923c     7F 00 00 FF 
29240     F6 27 16 F2 | 	cmp	local05, ##65526 wc
29244     02 30 06 C6 |  if_b	mov	local10, #2
29248     07 00 00 FF 
2924c     F6 27 16 F2 | 	cmp	local05, ##4086 wc
29250     01 30 06 C6 |  if_b	mov	local10, #1
29254     00 30 0E F2 | 	cmp	local10, #0 wz
29258     0D FA 05 A6 |  if_e	mov	result1, #13
2925c     5C 02 90 AD |  if_e	jmp	#LR__4210
29260     02 26 06 F1 | 	add	local05, #2
29264     18 24 06 F1 | 	add	local04, #24
29268     12 27 62 FC | 	wrlong	local05, local04
2926c     08 24 06 F1 | 	add	local04, #8
29270     12 29 62 FC | 	wrlong	local06, local04
29274     14 27 02 F6 | 	mov	local05, local06
29278     09 13 32 F9 | 	getword	arg01, arg01, #0
2927c     09 27 02 F1 | 	add	local05, arg01
29280     04 24 06 F1 | 	add	local04, #4
29284     12 27 62 FC | 	wrlong	local05, local04
29288     14 27 02 F6 | 	mov	local05, local06
2928c     17 27 02 F1 | 	add	local05, local09
29290     08 24 06 F1 | 	add	local04, #8
29294     12 27 62 FC | 	wrlong	local05, local04
29298     2C 24 86 F1 | 	sub	local04, #44
2929c     03 30 0E F2 | 	cmp	local10, #3 wz
292a0     5C 00 90 5D |  if_ne	jmp	#LR__4205
292a4     34 24 06 F1 | 	add	local04, #52
292a8     12 13 02 F6 | 	mov	arg01, local04
292ac     34 24 86 F1 | 	sub	local04, #52
292b0     2A 12 06 F1 | 	add	arg01, #42
292b4                 | ' {
292b4                 | ' 
292b4                 | ' 	return *((WORD*)ptr);
292b4     09 FB E9 FA | 	rdword	result1, arg01 wz
292b8     0D FA 05 56 |  if_ne	mov	result1, #13
292bc     FC 01 90 5D |  if_ne	jmp	#LR__4210
292c0     08 24 06 F1 | 	add	local04, #8
292c4     12 27 EA FA | 	rdword	local05, local04 wz
292c8     08 24 86 F1 | 	sub	local04, #8
292cc     0D FA 05 56 |  if_ne	mov	result1, #13
292d0     E8 01 90 5D |  if_ne	jmp	#LR__4210
292d4     34 24 06 F1 | 	add	local04, #52
292d8     12 13 02 F6 | 	mov	arg01, local04
292dc     2C 12 06 F1 | 	add	arg01, #44
292e0                 | ' {
292e0                 | ' 
292e0                 | ' 	return *((DWORD*)ptr);
292e0     09 FB 01 FB | 	rdlong	result1, arg01
292e4     0C 24 86 F1 | 	sub	local04, #12
292e8     12 FB 61 FC | 	wrlong	result1, local04
292ec     10 24 86 F1 | 	sub	local04, #16
292f0     12 33 02 FB | 	rdlong	local11, local04
292f4     18 24 86 F1 | 	sub	local04, #24
292f8     02 32 66 F0 | 	shl	local11, #2
292fc     6C 00 90 FD | 	jmp	#LR__4207
29300                 | LR__4205
29300     08 24 06 F1 | 	add	local04, #8
29304     12 27 EA FA | 	rdword	local05, local04 wz
29308     08 24 86 F1 | 	sub	local04, #8
2930c     0D FA 05 A6 |  if_e	mov	result1, #13
29310     A8 01 90 AD |  if_e	jmp	#LR__4210
29314     24 24 06 F1 | 	add	local04, #36
29318     12 27 02 FB | 	rdlong	local05, local04
2931c     15 27 02 F1 | 	add	local05, local07
29320     04 24 06 F1 | 	add	local04, #4
29324     12 27 62 FC | 	wrlong	local05, local04
29328     28 24 86 F1 | 	sub	local04, #40
2932c     02 30 0E F2 | 	cmp	local10, #2 wz
29330     18 24 06 A1 |  if_e	add	local04, #24
29334     12 27 02 AB |  if_e	rdlong	local05, local04
29338     18 24 86 A1 |  if_e	sub	local04, #24
2933c     01 26 66 A0 |  if_e	shl	local05, #1
29340     24 00 90 AD |  if_e	jmp	#LR__4206
29344     18 24 06 F1 | 	add	local04, #24
29348     12 33 02 FB | 	rdlong	local11, local04
2934c     19 27 02 F6 | 	mov	local05, local11
29350     01 26 66 F0 | 	shl	local05, #1
29354     19 27 02 F1 | 	add	local05, local11
29358     01 26 46 F0 | 	shr	local05, #1
2935c     18 24 86 F1 | 	sub	local04, #24
29360     01 32 06 F5 | 	and	local11, #1
29364     19 27 02 F1 | 	add	local05, local11
29368                 | LR__4206
29368     13 33 02 F6 | 	mov	local11, local05
2936c                 | LR__4207
2936c     FF 33 06 F1 | 	add	local11, #511
29370     09 32 46 F0 | 	shr	local11, #9
29374     1C 24 06 F1 | 	add	local04, #28
29378     12 17 02 FB | 	rdlong	arg03, local04
2937c     1C 24 86 F1 | 	sub	local04, #28
29380     19 17 12 F2 | 	cmp	arg03, local11 wc
29384     0D FA 05 C6 |  if_b	mov	result1, #13
29388     30 01 90 CD |  if_b	jmp	#LR__4210
2938c     14 24 06 F1 | 	add	local04, #20
29390     FF FF FF FF 
29394     12 FF 6B FC | 	wrlong	##-1, local04
29398     04 24 86 F1 | 	sub	local04, #4
2939c     FF FF FF FF 
293a0     12 FF 6B FC | 	wrlong	##-1, local04
293a4     0C 24 86 F1 | 	sub	local04, #12
293a8     12 01 49 FC | 	wrbyte	#128, local04
293ac     04 24 86 F1 | 	sub	local04, #4
293b0     03 30 0E F2 | 	cmp	local10, #3 wz
293b4     D0 00 90 5D |  if_ne	jmp	#LR__4209
293b8     34 24 06 F1 | 	add	local04, #52
293bc     12 13 02 F6 | 	mov	arg01, local04
293c0     34 24 86 F1 | 	sub	local04, #52
293c4     30 12 06 F1 | 	add	arg01, #48
293c8                 | ' {
293c8                 | ' 
293c8                 | ' 	return *((WORD*)ptr);
293c8     09 FB E1 FA | 	rdword	result1, arg01
293cc     FD 26 32 F9 | 	getword	local05, result1, #0
293d0     01 26 0E F2 | 	cmp	local05, #1 wz
293d4     B0 00 90 5D |  if_ne	jmp	#LR__4209
293d8     01 28 06 F1 | 	add	local06, #1
293dc     12 13 02 F6 | 	mov	arg01, local04
293e0     14 15 02 F6 | 	mov	arg02, local06
293e4     CC CD BF FD | 	call	#_fatfs_cc_move_window
293e8     00 FA 0D F2 | 	cmp	result1, #0 wz
293ec     98 00 90 5D |  if_ne	jmp	#LR__4209
293f0     04 24 06 F1 | 	add	local04, #4
293f4     12 01 48 FC | 	wrbyte	#0, local04
293f8     30 24 06 F1 | 	add	local04, #48
293fc     12 13 02 F6 | 	mov	arg01, local04
29400     34 24 86 F1 | 	sub	local04, #52
29404     FE 13 06 F1 | 	add	arg01, #510
29408                 | ' {
29408                 | ' 
29408                 | ' 	return *((WORD*)ptr);
29408     09 FB E1 FA | 	rdword	result1, arg01
2940c     FD 26 32 F9 | 	getword	local05, result1, #0
29410     55 00 00 FF 
29414     55 26 0E F2 | 	cmp	local05, ##43605 wz
29418     34 24 06 A1 |  if_e	add	local04, #52
2941c     12 13 02 A6 |  if_e	mov	arg01, local04
29420     34 24 86 A1 |  if_e	sub	local04, #52
29424                 | ' {
29424                 | ' 
29424                 | ' 	return *((DWORD*)ptr);
29424     09 FB 01 AB |  if_e	rdlong	result1, arg01
29428     A9 B0 20 AF 
2942c     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
29430     54 00 90 5D |  if_ne	jmp	#LR__4208
29434     34 24 06 F1 | 	add	local04, #52
29438     12 13 02 F6 | 	mov	arg01, local04
2943c     34 24 86 F1 | 	sub	local04, #52
29440     E4 13 06 F1 | 	add	arg01, #484
29444                 | ' {
29444                 | ' 
29444                 | ' 	return *((DWORD*)ptr);
29444     09 FB 01 FB | 	rdlong	result1, arg01
29448     B9 A0 30 FF 
2944c     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
29450     34 00 90 5D |  if_ne	jmp	#LR__4208
29454     34 24 06 F1 | 	add	local04, #52
29458     12 13 02 F6 | 	mov	arg01, local04
2945c     E8 13 06 F1 | 	add	arg01, #488
29460                 | ' {
29460                 | ' 
29460                 | ' 	return *((DWORD*)ptr);
29460     09 FB 01 FB | 	rdlong	result1, arg01
29464     20 24 86 F1 | 	sub	local04, #32
29468     12 FB 61 FC | 	wrlong	result1, local04
2946c     20 24 06 F1 | 	add	local04, #32
29470     12 13 02 F6 | 	mov	arg01, local04
29474     EC 13 06 F1 | 	add	arg01, #492
29478                 | ' {
29478                 | ' 
29478                 | ' 	return *((DWORD*)ptr);
29478     09 FB 01 FB | 	rdlong	result1, arg01
2947c     24 24 86 F1 | 	sub	local04, #36
29480     12 FB 61 FC | 	wrlong	result1, local04
29484     10 24 86 F1 | 	sub	local04, #16
29488                 | LR__4208
29488                 | LR__4209
29488     12 31 42 FC | 	wrbyte	local10, local04
2948c     04 E4 05 F1 | 	add	objptr, #4
29490     F2 26 E2 FA | 	rdword	local05, objptr
29494     01 26 06 F1 | 	add	local05, #1
29498     F2 26 52 FC | 	wrword	local05, objptr
2949c     F2 32 E2 FA | 	rdword	local11, objptr
294a0     06 24 06 F1 | 	add	local04, #6
294a4     12 33 52 FC | 	wrword	local11, local04
294a8     04 E4 05 F1 | 	add	objptr, #4
294ac     06 24 06 F1 | 	add	local04, #6
294b0     12 E5 61 FC | 	wrlong	objptr, local04
294b4                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
294b4                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
294b4                 | ' 			{
294b4                 | ' 
294b4                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
294b4                 | ' 
294b4                 | ' 
294b4                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
294b4                 | ' 
294b4                 | ' 			}
294b4                 | ' 		}
294b4                 | ' 
294b4                 | ' 
294b4                 | ' 	}
294b4                 | ' 
294b4                 | ' 	fs->fs_type = (BYTE)fmt;
294b4                 | ' 	fs->id = ++Fsid;
294b4                 | ' 
294b4                 | ' 	fs->lfnbuf = LfnBuf;
294b4                 | ' #line 3567 "ff.c"
294b4                 | ' 	return FR_OK;
294b4     00 FA 05 F6 | 	mov	result1, #0
294b8     08 E4 85 F1 | 	sub	objptr, #8
294bc                 | LR__4210
294bc     A7 F0 03 F6 | 	mov	ptra, fp
294c0     B2 00 A0 FD | 	call	#popregs_
294c4                 | _fatfs_cc_mount_volume_ret
294c4     2D 00 64 FD | 	ret
294c8                 | 
294c8                 | _fatfs_cc_validate
294c8     09 01 0A F6 | 	mov	_var01, arg01 wz
294cc     09 02 06 F6 | 	mov	_var02, #9
294d0     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
294d4     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
294d8     50 00 90 AD |  if_e	jmp	#LR__4220
294dc     04 00 06 F1 | 	add	_var01, #4
294e0     00 07 E2 FA | 	rdword	_var04, _var01
294e4     04 00 86 F1 | 	sub	_var01, #4
294e8     00 13 02 FB | 	rdlong	arg01, _var01
294ec     06 12 06 F1 | 	add	arg01, #6
294f0     09 FB E1 FA | 	rdword	result1, arg01
294f4     FD 06 0A F2 | 	cmp	_var04, result1 wz
294f8     30 00 90 5D |  if_ne	jmp	#LR__4220
294fc     00 07 02 FB | 	rdlong	_var04, _var01
29500     01 06 06 F1 | 	add	_var04, #1
29504     03 13 CA FA | 	rdbyte	arg01, _var04 wz
29508     01 FA 05 56 |  if_ne	mov	result1, #1
2950c                 | ' 
2950c                 | ' 	return Stat;
2950c     01 00 00 AF 
29510     20 E4 05 A1 |  if_e	add	objptr, ##544
29514     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
29518     01 00 00 AF 
2951c     20 E4 85 A1 |  if_e	sub	objptr, ##544
29520     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
29524     01 04 CE F7 | 	test	_var03, #1 wz
29528     00 02 06 A6 |  if_e	mov	_var02, #0
2952c                 | LR__4220
2952c     00 02 0E F2 | 	cmp	_var02, #0 wz
29530     00 05 02 AB |  if_e	rdlong	_var03, _var01
29534     00 04 06 56 |  if_ne	mov	_var03, #0
29538     0A 05 62 FC | 	wrlong	_var03, arg02
2953c                 | ' 			res = FR_OK;
2953c                 | ' 		}
2953c                 | ' 
2953c                 | ' 	}
2953c                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
2953c                 | ' 	return res;
2953c     01 FB 01 F6 | 	mov	result1, _var02
29540                 | _fatfs_cc_validate_ret
29540     2D 00 64 FD | 	ret
29544                 | 
29544                 | _fatfs_cc_f_mount
29544     01 4A 05 F6 | 	mov	COUNT_, #1
29548     A8 00 A0 FD | 	call	#pushregs_
2954c     20 F0 07 F1 | 	add	ptra, #32
29550     04 4E 05 F1 | 	add	fp, #4
29554     A7 12 62 FC | 	wrlong	arg01, fp
29558     04 4E 05 F1 | 	add	fp, #4
2955c     A7 14 62 FC | 	wrlong	arg02, fp
29560     04 4E 05 F1 | 	add	fp, #4
29564     A7 16 42 FC | 	wrbyte	arg03, fp
29568     04 4E 85 F1 | 	sub	fp, #4
2956c     A7 16 02 FB | 	rdlong	arg03, fp
29570     14 4E 05 F1 | 	add	fp, #20
29574     A7 16 62 FC | 	wrlong	arg03, fp
29578     A7 12 02 F6 | 	mov	arg01, fp
2957c     1C 4E 85 F1 | 	sub	fp, #28
29580     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
29584     14 4E 05 F1 | 	add	fp, #20
29588     A7 FA 61 FC | 	wrlong	result1, fp
2958c     14 4E 85 F1 | 	sub	fp, #20
29590     00 FA 55 F2 | 	cmps	result1, #0 wc
29594     0B FA 05 C6 |  if_b	mov	result1, #11
29598     C0 00 90 CD |  if_b	jmp	#LR__4231
2959c     14 4E 05 F1 | 	add	fp, #20
295a0     A7 16 02 FB | 	rdlong	arg03, fp
295a4     02 16 66 F0 | 	shl	arg03, #2
295a8     F2 16 02 F1 | 	add	arg03, objptr
295ac     0B 17 0A FB | 	rdlong	arg03, arg03 wz
295b0     04 4E 85 F1 | 	sub	fp, #4
295b4     A7 16 62 FC | 	wrlong	arg03, fp
295b8     10 4E 85 F1 | 	sub	fp, #16
295bc     28 00 90 AD |  if_e	jmp	#LR__4230
295c0     10 4E 05 F1 | 	add	fp, #16
295c4     A7 16 02 FB | 	rdlong	arg03, fp
295c8     10 4E 85 F1 | 	sub	fp, #16
295cc     01 16 06 F1 | 	add	arg03, #1
295d0     0B 13 C2 FA | 	rdbyte	arg01, arg03
295d4     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
295d8     10 4E 05 F1 | 	add	fp, #16
295dc     A7 16 02 FB | 	rdlong	arg03, fp
295e0     10 4E 85 F1 | 	sub	fp, #16
295e4     0B 01 48 FC | 	wrbyte	#0, arg03
295e8                 | LR__4230
295e8     04 4E 05 F1 | 	add	fp, #4
295ec     A7 1E 0A FB | 	rdlong	local01, fp wz
295f0     04 4E 85 F1 | 	sub	fp, #4
295f4     04 4E 05 51 |  if_ne	add	fp, #4
295f8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
295fc     04 4E 85 51 |  if_ne	sub	fp, #4
29600     0F 01 48 5C |  if_ne	wrbyte	#0, local01
29604     14 4E 05 F1 | 	add	fp, #20
29608     A7 1E 02 FB | 	rdlong	local01, fp
2960c     02 1E 66 F0 | 	shl	local01, #2
29610     F2 1E 02 F1 | 	add	local01, objptr
29614     10 4E 85 F1 | 	sub	fp, #16
29618     A7 16 02 FB | 	rdlong	arg03, fp
2961c     0F 17 62 FC | 	wrlong	arg03, local01
29620     08 4E 05 F1 | 	add	fp, #8
29624     A7 1E CA FA | 	rdbyte	local01, fp wz
29628     0C 4E 85 F1 | 	sub	fp, #12
2962c     00 FA 05 A6 |  if_e	mov	result1, #0
29630     28 00 90 AD |  if_e	jmp	#LR__4231
29634     08 4E 05 F1 | 	add	fp, #8
29638     A7 12 02 F6 | 	mov	arg01, fp
2963c     04 4E 85 F1 | 	sub	fp, #4
29640     A7 14 02 F6 | 	mov	arg02, fp
29644     04 4E 85 F1 | 	sub	fp, #4
29648     00 16 06 F6 | 	mov	arg03, #0
2964c     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
29650     18 4E 05 F1 | 	add	fp, #24
29654     A7 FA 61 FC | 	wrlong	result1, fp
29658                 | ' 
29658                 | ' 	res = mount_volume(&path, &fs, 0);
29658                 | ' 	return res ;
29658     18 4E 85 F1 | 	sub	fp, #24
2965c                 | LR__4231
2965c     A7 F0 03 F6 | 	mov	ptra, fp
29660     B2 00 A0 FD | 	call	#popregs_
29664                 | _fatfs_cc_f_mount_ret
29664     2D 00 64 FD | 	ret
29668                 | 
29668                 | _fatfs_cc_f_open
29668     02 4A 05 F6 | 	mov	COUNT_, #2
2966c     A8 00 A0 FD | 	call	#pushregs_
29670     60 F0 07 F1 | 	add	ptra, #96
29674     04 4E 05 F1 | 	add	fp, #4
29678     A7 12 62 FC | 	wrlong	arg01, fp
2967c     04 4E 05 F1 | 	add	fp, #4
29680     A7 14 62 FC | 	wrlong	arg02, fp
29684     04 4E 05 F1 | 	add	fp, #4
29688     A7 16 42 FC | 	wrbyte	arg03, fp
2968c     08 4E 85 F1 | 	sub	fp, #8
29690     A7 18 0A FB | 	rdlong	arg04, fp wz
29694     04 4E 85 F1 | 	sub	fp, #4
29698     09 FA 05 A6 |  if_e	mov	result1, #9
2969c     98 06 90 AD |  if_e	jmp	#LR__4257
296a0     0C 4E 05 F1 | 	add	fp, #12
296a4     A7 18 C2 FA | 	rdbyte	arg04, fp
296a8     3F 18 06 F5 | 	and	arg04, #63
296ac     A7 18 42 FC | 	wrbyte	arg04, fp
296b0     04 4E 85 F1 | 	sub	fp, #4
296b4     A7 12 02 F6 | 	mov	arg01, fp
296b8     3C 4E 05 F1 | 	add	fp, #60
296bc     A7 14 02 F6 | 	mov	arg02, fp
296c0     38 4E 85 F1 | 	sub	fp, #56
296c4     A7 16 C2 FA | 	rdbyte	arg03, fp
296c8     0C 4E 85 F1 | 	sub	fp, #12
296cc     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
296d0     10 4E 05 F1 | 	add	fp, #16
296d4     A7 FA 61 FC | 	wrlong	result1, fp
296d8     10 4E 85 F1 | 	sub	fp, #16
296dc     00 FA 0D F2 | 	cmp	result1, #0 wz
296e0     2C 06 90 5D |  if_ne	jmp	#LR__4256
296e4     44 4E 05 F1 | 	add	fp, #68
296e8     A7 18 02 FB | 	rdlong	arg04, fp
296ec     30 4E 85 F1 | 	sub	fp, #48
296f0     A7 18 62 FC | 	wrlong	arg04, fp
296f4     A7 12 02 F6 | 	mov	arg01, fp
296f8     0C 4E 85 F1 | 	sub	fp, #12
296fc     A7 1E 02 FB | 	rdlong	local01, fp
29700     08 4E 85 F1 | 	sub	fp, #8
29704     0F 15 02 F6 | 	mov	arg02, local01
29708     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
2970c     10 4E 05 F1 | 	add	fp, #16
29710     A7 FA 61 FC | 	wrlong	result1, fp
29714     10 4E 85 F1 | 	sub	fp, #16
29718     00 FA 0D F2 | 	cmp	result1, #0 wz
2971c     1C 00 90 5D |  if_ne	jmp	#LR__4240
29720     3F 4E 05 F1 | 	add	fp, #63
29724     A7 18 C2 FA | 	rdbyte	arg04, fp
29728     3F 4E 85 F1 | 	sub	fp, #63
2972c     80 18 CE F7 | 	test	arg04, #128 wz
29730     10 4E 05 51 |  if_ne	add	fp, #16
29734     A7 0C 68 5C |  if_ne	wrlong	#6, fp
29738     10 4E 85 51 |  if_ne	sub	fp, #16
2973c                 | LR__4240
2973c     0C 4E 05 F1 | 	add	fp, #12
29740     A7 18 C2 FA | 	rdbyte	arg04, fp
29744     0C 4E 85 F1 | 	sub	fp, #12
29748     1C 18 CE F7 | 	test	arg04, #28 wz
2974c     F0 01 90 AD |  if_e	jmp	#LR__4245
29750     10 4E 05 F1 | 	add	fp, #16
29754     A7 1E 0A FB | 	rdlong	local01, fp wz
29758     10 4E 85 F1 | 	sub	fp, #16
2975c     48 00 90 AD |  if_e	jmp	#LR__4242
29760     10 4E 05 F1 | 	add	fp, #16
29764     A7 18 02 FB | 	rdlong	arg04, fp
29768     10 4E 85 F1 | 	sub	fp, #16
2976c     04 18 0E F2 | 	cmp	arg04, #4 wz
29770     1C 00 90 5D |  if_ne	jmp	#LR__4241
29774     14 4E 05 F1 | 	add	fp, #20
29778     A7 12 02 F6 | 	mov	arg01, fp
2977c     14 4E 85 F1 | 	sub	fp, #20
29780     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
29784     10 4E 05 F1 | 	add	fp, #16
29788     A7 FA 61 FC | 	wrlong	result1, fp
2978c     10 4E 85 F1 | 	sub	fp, #16
29790                 | LR__4241
29790     0C 4E 05 F1 | 	add	fp, #12
29794     A7 1E C2 FA | 	rdbyte	local01, fp
29798     08 1E 46 F5 | 	or	local01, #8
2979c     A7 1E 42 FC | 	wrbyte	local01, fp
297a0     0C 4E 85 F1 | 	sub	fp, #12
297a4     3C 00 90 FD | 	jmp	#LR__4244
297a8                 | LR__4242
297a8     1A 4E 05 F1 | 	add	fp, #26
297ac     A7 1E C2 FA | 	rdbyte	local01, fp
297b0     1A 4E 85 F1 | 	sub	fp, #26
297b4     11 1E CE F7 | 	test	local01, #17 wz
297b8     10 4E 05 51 |  if_ne	add	fp, #16
297bc     A7 0E 68 5C |  if_ne	wrlong	#7, fp
297c0     10 4E 85 51 |  if_ne	sub	fp, #16
297c4     1C 00 90 5D |  if_ne	jmp	#LR__4243
297c8     0C 4E 05 F1 | 	add	fp, #12
297cc     A7 1E C2 FA | 	rdbyte	local01, fp
297d0     0C 4E 85 F1 | 	sub	fp, #12
297d4     04 1E CE F7 | 	test	local01, #4 wz
297d8     10 4E 05 51 |  if_ne	add	fp, #16
297dc     A7 10 68 5C |  if_ne	wrlong	#8, fp
297e0     10 4E 85 51 |  if_ne	sub	fp, #16
297e4                 | LR__4243
297e4                 | LR__4244
297e4     10 4E 05 F1 | 	add	fp, #16
297e8     A7 1E 0A FB | 	rdlong	local01, fp wz
297ec     10 4E 85 F1 | 	sub	fp, #16
297f0     A8 01 90 5D |  if_ne	jmp	#LR__4248
297f4     0C 4E 05 F1 | 	add	fp, #12
297f8     A7 1E C2 FA | 	rdbyte	local01, fp
297fc     0C 4E 85 F1 | 	sub	fp, #12
29800     08 1E CE F7 | 	test	local01, #8 wz
29804     94 01 90 AD |  if_e	jmp	#LR__4248
29808     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
2980c     54 4E 05 F1 | 	add	fp, #84
29810     A7 FA 61 FC | 	wrlong	result1, fp
29814     24 4E 85 F1 | 	sub	fp, #36
29818     A7 12 02 FB | 	rdlong	arg01, fp
2981c     0E 12 06 F1 | 	add	arg01, #14
29820     09 FB 61 FC | 	wrlong	result1, arg01
29824     A7 12 02 FB | 	rdlong	arg01, fp
29828     16 12 06 F1 | 	add	arg01, #22
2982c     24 4E 05 F1 | 	add	fp, #36
29830     A7 14 02 FB | 	rdlong	arg02, fp
29834     09 15 62 FC | 	wrlong	arg02, arg01
29838     10 4E 85 F1 | 	sub	fp, #16
2983c     A7 12 02 FB | 	rdlong	arg01, fp
29840     14 4E 85 F1 | 	sub	fp, #20
29844     A7 14 02 FB | 	rdlong	arg02, fp
29848     30 4E 85 F1 | 	sub	fp, #48
2984c     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
29850     48 4E 05 F1 | 	add	fp, #72
29854     A7 FA 61 FC | 	wrlong	result1, fp
29858     18 4E 85 F1 | 	sub	fp, #24
2985c     A7 1E 02 FB | 	rdlong	local01, fp
29860     0B 1E 06 F1 | 	add	local01, #11
29864     0F 41 48 FC | 	wrbyte	#32, local01
29868     14 4E 05 F1 | 	add	fp, #20
2986c     A7 12 02 FB | 	rdlong	arg01, fp
29870     14 4E 85 F1 | 	sub	fp, #20
29874     A7 14 02 FB | 	rdlong	arg02, fp
29878     30 4E 85 F1 | 	sub	fp, #48
2987c     00 16 06 F6 | 	mov	arg03, #0
29880     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
29884     30 4E 05 F1 | 	add	fp, #48
29888     A7 12 02 FB | 	rdlong	arg01, fp
2988c     1C 12 06 F1 | 	add	arg01, #28
29890     09 01 68 FC | 	wrlong	#0, arg01
29894     14 4E 05 F1 | 	add	fp, #20
29898     A7 1E 02 FB | 	rdlong	local01, fp
2989c     03 1E 06 F1 | 	add	local01, #3
298a0     0F 03 48 FC | 	wrbyte	#1, local01
298a4     04 4E 05 F1 | 	add	fp, #4
298a8     A7 1E 0A FB | 	rdlong	local01, fp wz
298ac     48 4E 85 F1 | 	sub	fp, #72
298b0     E8 00 90 AD |  if_e	jmp	#LR__4248
298b4     44 4E 05 F1 | 	add	fp, #68
298b8     A7 1E 02 FB | 	rdlong	local01, fp
298bc     30 1E 06 F1 | 	add	local01, #48
298c0     0F 1F 02 FB | 	rdlong	local01, local01
298c4     14 4E 05 F1 | 	add	fp, #20
298c8     A7 1E 62 FC | 	wrlong	local01, fp
298cc     44 4E 85 F1 | 	sub	fp, #68
298d0     A7 12 02 F6 | 	mov	arg01, fp
298d4     34 4E 05 F1 | 	add	fp, #52
298d8     A7 14 02 FB | 	rdlong	arg02, fp
298dc     48 4E 85 F1 | 	sub	fp, #72
298e0     00 16 06 F6 | 	mov	arg03, #0
298e4     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
298e8     10 4E 05 F1 | 	add	fp, #16
298ec     A7 FA 61 FC | 	wrlong	result1, fp
298f0     10 4E 85 F1 | 	sub	fp, #16
298f4     00 FA 0D F2 | 	cmp	result1, #0 wz
298f8     A0 00 90 5D |  if_ne	jmp	#LR__4248
298fc     44 4E 05 F1 | 	add	fp, #68
29900     A7 12 02 FB | 	rdlong	arg01, fp
29904     14 4E 05 F1 | 	add	fp, #20
29908     A7 14 02 FB | 	rdlong	arg02, fp
2990c     58 4E 85 F1 | 	sub	fp, #88
29910     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
29914     10 4E 05 F1 | 	add	fp, #16
29918     A7 FA 61 FC | 	wrlong	result1, fp
2991c     34 4E 05 F1 | 	add	fp, #52
29920     A7 18 02 FB | 	rdlong	arg04, fp
29924     04 4E 05 F1 | 	add	fp, #4
29928     A7 1E 02 FB | 	rdlong	local01, fp
2992c     48 4E 85 F1 | 	sub	fp, #72
29930     01 1E 86 F1 | 	sub	local01, #1
29934     10 18 06 F1 | 	add	arg04, #16
29938     0C 1F 62 FC | 	wrlong	local01, arg04
2993c     5C 00 90 FD | 	jmp	#LR__4248
29940                 | LR__4245
29940     10 4E 05 F1 | 	add	fp, #16
29944     A7 18 0A FB | 	rdlong	arg04, fp wz
29948     10 4E 85 F1 | 	sub	fp, #16
2994c     4C 00 90 5D |  if_ne	jmp	#LR__4247
29950     1A 4E 05 F1 | 	add	fp, #26
29954     A7 18 C2 FA | 	rdbyte	arg04, fp
29958     1A 4E 85 F1 | 	sub	fp, #26
2995c     10 18 CE F7 | 	test	arg04, #16 wz
29960     10 4E 05 51 |  if_ne	add	fp, #16
29964     A7 08 68 5C |  if_ne	wrlong	#4, fp
29968     10 4E 85 51 |  if_ne	sub	fp, #16
2996c     2C 00 90 5D |  if_ne	jmp	#LR__4246
29970     0C 4E 05 F1 | 	add	fp, #12
29974     A7 18 C2 FA | 	rdbyte	arg04, fp
29978     0C 4E 85 F1 | 	sub	fp, #12
2997c     02 18 CE F7 | 	test	arg04, #2 wz
29980     1A 4E 05 51 |  if_ne	add	fp, #26
29984     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
29988     1A 4E 85 51 |  if_ne	sub	fp, #26
2998c     01 1E CE 57 |  if_ne	test	local01, #1 wz
29990     10 4E 05 51 |  if_ne	add	fp, #16
29994     A7 0E 68 5C |  if_ne	wrlong	#7, fp
29998     10 4E 85 51 |  if_ne	sub	fp, #16
2999c                 | LR__4246
2999c                 | LR__4247
2999c                 | LR__4248
2999c     10 4E 05 F1 | 	add	fp, #16
299a0     A7 1E 0A FB | 	rdlong	local01, fp wz
299a4     10 4E 85 F1 | 	sub	fp, #16
299a8     60 00 90 5D |  if_ne	jmp	#LR__4249
299ac     0C 4E 05 F1 | 	add	fp, #12
299b0     A7 20 C2 FA | 	rdbyte	local02, fp
299b4     0C 4E 85 F1 | 	sub	fp, #12
299b8     08 20 CE F7 | 	test	local02, #8 wz
299bc     0C 4E 05 51 |  if_ne	add	fp, #12
299c0     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
299c4     40 20 46 55 |  if_ne	or	local02, #64
299c8     A7 20 42 5C |  if_ne	wrbyte	local02, fp
299cc     0C 4E 85 51 |  if_ne	sub	fp, #12
299d0     04 4E 05 F1 | 	add	fp, #4
299d4     A7 20 02 FB | 	rdlong	local02, fp
299d8     40 4E 05 F1 | 	add	fp, #64
299dc     A7 1E 02 FB | 	rdlong	local01, fp
299e0     30 1E 06 F1 | 	add	local01, #48
299e4     0F 1F 02 FB | 	rdlong	local01, local01
299e8     20 20 06 F1 | 	add	local02, #32
299ec     10 1F 62 FC | 	wrlong	local01, local02
299f0     40 4E 85 F1 | 	sub	fp, #64
299f4     A7 20 02 FB | 	rdlong	local02, fp
299f8     2C 4E 05 F1 | 	add	fp, #44
299fc     A7 1E 02 FB | 	rdlong	local01, fp
29a00     30 4E 85 F1 | 	sub	fp, #48
29a04     24 20 06 F1 | 	add	local02, #36
29a08     10 1F 62 FC | 	wrlong	local01, local02
29a0c                 | LR__4249
29a0c     10 4E 05 F1 | 	add	fp, #16
29a10     A7 20 0A FB | 	rdlong	local02, fp wz
29a14     10 4E 85 F1 | 	sub	fp, #16
29a18     F4 02 90 5D |  if_ne	jmp	#LR__4255
29a1c     04 4E 05 F1 | 	add	fp, #4
29a20     A7 20 02 FB | 	rdlong	local02, fp
29a24     40 4E 05 F1 | 	add	fp, #64
29a28     A7 12 02 FB | 	rdlong	arg01, fp
29a2c     14 4E 85 F1 | 	sub	fp, #20
29a30     A7 14 02 FB | 	rdlong	arg02, fp
29a34     30 4E 85 F1 | 	sub	fp, #48
29a38     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
29a3c     08 20 06 F1 | 	add	local02, #8
29a40     10 FB 61 FC | 	wrlong	result1, local02
29a44     04 4E 05 F1 | 	add	fp, #4
29a48     A7 20 02 FB | 	rdlong	local02, fp
29a4c     2C 4E 05 F1 | 	add	fp, #44
29a50     A7 12 02 FB | 	rdlong	arg01, fp
29a54     1C 12 06 F1 | 	add	arg01, #28
29a58                 | ' {
29a58                 | ' 
29a58                 | ' 	return *((DWORD*)ptr);
29a58     09 FB 01 FB | 	rdlong	result1, arg01
29a5c     0C 20 06 F1 | 	add	local02, #12
29a60     10 FB 61 FC | 	wrlong	result1, local02
29a64     2C 4E 85 F1 | 	sub	fp, #44
29a68     A7 20 02 FB | 	rdlong	local02, fp
29a6c     40 4E 05 F1 | 	add	fp, #64
29a70     A7 1E 02 FB | 	rdlong	local01, fp
29a74     10 1F 62 FC | 	wrlong	local01, local02
29a78     40 4E 85 F1 | 	sub	fp, #64
29a7c     A7 20 02 FB | 	rdlong	local02, fp
29a80     40 4E 05 F1 | 	add	fp, #64
29a84     A7 1E 02 FB | 	rdlong	local01, fp
29a88     06 1E 06 F1 | 	add	local01, #6
29a8c     0F 1F E2 FA | 	rdword	local01, local01
29a90     04 20 06 F1 | 	add	local02, #4
29a94     10 1F 52 FC | 	wrword	local01, local02
29a98     40 4E 85 F1 | 	sub	fp, #64
29a9c     A7 20 02 FB | 	rdlong	local02, fp
29aa0     08 4E 05 F1 | 	add	fp, #8
29aa4     A7 1E C2 FA | 	rdbyte	local01, fp
29aa8     10 20 06 F1 | 	add	local02, #16
29aac     10 1F 42 FC | 	wrbyte	local01, local02
29ab0     08 4E 85 F1 | 	sub	fp, #8
29ab4     A7 20 02 FB | 	rdlong	local02, fp
29ab8     11 20 06 F1 | 	add	local02, #17
29abc     10 01 48 FC | 	wrbyte	#0, local02
29ac0     A7 20 02 FB | 	rdlong	local02, fp
29ac4     1C 20 06 F1 | 	add	local02, #28
29ac8     10 01 68 FC | 	wrlong	#0, local02
29acc     A7 20 02 FB | 	rdlong	local02, fp
29ad0     14 20 06 F1 | 	add	local02, #20
29ad4     10 01 68 FC | 	wrlong	#0, local02
29ad8     A7 12 02 FB | 	rdlong	arg01, fp
29adc     04 4E 85 F1 | 	sub	fp, #4
29ae0     28 12 06 F1 | 	add	arg01, #40
29ae4     00 14 06 F6 | 	mov	arg02, #0
29ae8     09 16 C6 F9 | 	decod	arg03, #9
29aec     98 00 A0 FD | 	call	#\builtin_bytefill_
29af0     0C 4E 05 F1 | 	add	fp, #12
29af4     A7 20 C2 FA | 	rdbyte	local02, fp
29af8     0C 4E 85 F1 | 	sub	fp, #12
29afc     20 20 CE F7 | 	test	local02, #32 wz
29b00     0C 02 90 AD |  if_e	jmp	#LR__4254
29b04     04 4E 05 F1 | 	add	fp, #4
29b08     A7 1E 02 FB | 	rdlong	local01, fp
29b0c     04 4E 85 F1 | 	sub	fp, #4
29b10     0C 1E 06 F1 | 	add	local01, #12
29b14     0F 21 02 FB | 	rdlong	local02, local01
29b18     01 20 16 F2 | 	cmp	local02, #1 wc
29b1c     F0 01 90 CD |  if_b	jmp	#LR__4254
29b20     04 4E 05 F1 | 	add	fp, #4
29b24     A7 1E 02 FB | 	rdlong	local01, fp
29b28     0F 21 02 F6 | 	mov	local02, local01
29b2c     0C 1E 06 F1 | 	add	local01, #12
29b30     0F 1F 02 FB | 	rdlong	local01, local01
29b34     14 20 06 F1 | 	add	local02, #20
29b38     10 1F 62 FC | 	wrlong	local01, local02
29b3c     40 4E 05 F1 | 	add	fp, #64
29b40     A7 20 02 FB | 	rdlong	local02, fp
29b44     0A 20 06 F1 | 	add	local02, #10
29b48     10 21 E2 FA | 	rdword	local02, local02
29b4c     09 20 66 F0 | 	shl	local02, #9
29b50     08 4E 05 F1 | 	add	fp, #8
29b54     A7 20 62 FC | 	wrlong	local02, fp
29b58     48 4E 85 F1 | 	sub	fp, #72
29b5c     A7 20 02 FB | 	rdlong	local02, fp
29b60     08 20 06 F1 | 	add	local02, #8
29b64     10 1F 02 FB | 	rdlong	local01, local02
29b68     4C 4E 05 F1 | 	add	fp, #76
29b6c     A7 1E 62 FC | 	wrlong	local01, fp
29b70                 | ' 				fp->fptr = fp->obj.objsize;
29b70                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
29b70                 | ' 				clst = fp->obj.sclust;
29b70                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
29b70     4C 4E 85 F1 | 	sub	fp, #76
29b74     A7 20 02 FB | 	rdlong	local02, fp
29b78     0C 20 06 F1 | 	add	local02, #12
29b7c     10 1F 02 FB | 	rdlong	local01, local02
29b80     58 4E 05 F1 | 	add	fp, #88
29b84     A7 1E 62 FC | 	wrlong	local01, fp
29b88     5C 4E 85 F1 | 	sub	fp, #92
29b8c                 | LR__4250
29b8c     10 4E 05 F1 | 	add	fp, #16
29b90     A7 20 0A FB | 	rdlong	local02, fp wz
29b94     10 4E 85 F1 | 	sub	fp, #16
29b98     94 00 90 5D |  if_ne	jmp	#LR__4251
29b9c     5C 4E 05 F1 | 	add	fp, #92
29ba0     A7 20 02 FB | 	rdlong	local02, fp
29ba4     10 4E 85 F1 | 	sub	fp, #16
29ba8     A7 1E 02 FB | 	rdlong	local01, fp
29bac     4C 4E 85 F1 | 	sub	fp, #76
29bb0     0F 21 1A F2 | 	cmp	local02, local01 wcz
29bb4     78 00 90 ED |  if_be	jmp	#LR__4251
29bb8     04 4E 05 F1 | 	add	fp, #4
29bbc     A7 12 02 FB | 	rdlong	arg01, fp
29bc0     4C 4E 05 F1 | 	add	fp, #76
29bc4     A7 14 02 FB | 	rdlong	arg02, fp
29bc8     50 4E 85 F1 | 	sub	fp, #80
29bcc     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
29bd0     50 4E 05 F1 | 	add	fp, #80
29bd4     A7 FA 61 FC | 	wrlong	result1, fp
29bd8     50 4E 85 F1 | 	sub	fp, #80
29bdc     02 FA 15 F2 | 	cmp	result1, #2 wc
29be0     10 4E 05 C1 |  if_b	add	fp, #16
29be4     A7 04 68 CC |  if_b	wrlong	#2, fp
29be8     10 4E 85 C1 |  if_b	sub	fp, #16
29bec     50 4E 05 F1 | 	add	fp, #80
29bf0     A7 20 02 FB | 	rdlong	local02, fp
29bf4     50 4E 85 F1 | 	sub	fp, #80
29bf8     FF FF 7F FF 
29bfc     FF 21 0E F2 | 	cmp	local02, ##-1 wz
29c00     10 4E 05 A1 |  if_e	add	fp, #16
29c04     A7 02 68 AC |  if_e	wrlong	#1, fp
29c08     10 4E 85 A1 |  if_e	sub	fp, #16
29c0c     5C 4E 05 F1 | 	add	fp, #92
29c10     A7 20 02 FB | 	rdlong	local02, fp
29c14     10 4E 85 F1 | 	sub	fp, #16
29c18     A7 1E 02 FB | 	rdlong	local01, fp
29c1c     0F 21 82 F1 | 	sub	local02, local01
29c20     10 4E 05 F1 | 	add	fp, #16
29c24     A7 20 62 FC | 	wrlong	local02, fp
29c28     5C 4E 85 F1 | 	sub	fp, #92
29c2c     5C FF 9F FD | 	jmp	#LR__4250
29c30                 | LR__4251
29c30     04 4E 05 F1 | 	add	fp, #4
29c34     A7 20 02 FB | 	rdlong	local02, fp
29c38     4C 4E 05 F1 | 	add	fp, #76
29c3c     A7 1E 02 FB | 	rdlong	local01, fp
29c40     18 20 06 F1 | 	add	local02, #24
29c44     10 1F 62 FC | 	wrlong	local01, local02
29c48     40 4E 85 F1 | 	sub	fp, #64
29c4c     A7 20 0A FB | 	rdlong	local02, fp wz
29c50     10 4E 85 F1 | 	sub	fp, #16
29c54     B8 00 90 5D |  if_ne	jmp	#LR__4253
29c58     5C 4E 05 F1 | 	add	fp, #92
29c5c     A7 1E 02 FB | 	rdlong	local01, fp
29c60     5C 4E 85 F1 | 	sub	fp, #92
29c64     FF 1F CE F7 | 	test	local01, #511 wz
29c68     A4 00 90 AD |  if_e	jmp	#LR__4253
29c6c     44 4E 05 F1 | 	add	fp, #68
29c70     A7 12 02 FB | 	rdlong	arg01, fp
29c74     0C 4E 05 F1 | 	add	fp, #12
29c78     A7 14 02 FB | 	rdlong	arg02, fp
29c7c     50 4E 85 F1 | 	sub	fp, #80
29c80     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
29c84     58 4E 05 F1 | 	add	fp, #88
29c88     A7 FA 61 FC | 	wrlong	result1, fp
29c8c     00 FA 4D F2 | 	cmps	result1, #0 wz
29c90     58 4E 85 F1 | 	sub	fp, #88
29c94     10 4E 05 A1 |  if_e	add	fp, #16
29c98     A7 04 68 AC |  if_e	wrlong	#2, fp
29c9c     10 4E 85 A1 |  if_e	sub	fp, #16
29ca0     6C 00 90 AD |  if_e	jmp	#LR__4252
29ca4     04 4E 05 F1 | 	add	fp, #4
29ca8     A7 20 02 FB | 	rdlong	local02, fp
29cac     54 4E 05 F1 | 	add	fp, #84
29cb0     A7 1E 02 FB | 	rdlong	local01, fp
29cb4     04 4E 05 F1 | 	add	fp, #4
29cb8     A7 18 02 FB | 	rdlong	arg04, fp
29cbc     09 18 46 F0 | 	shr	arg04, #9
29cc0     0C 1F 02 F1 | 	add	local01, arg04
29cc4     1C 20 06 F1 | 	add	local02, #28
29cc8     10 1F 62 FC | 	wrlong	local01, local02
29ccc     18 4E 85 F1 | 	sub	fp, #24
29cd0     A7 20 02 FB | 	rdlong	local02, fp
29cd4     01 20 06 F1 | 	add	local02, #1
29cd8     10 13 C2 FA | 	rdbyte	arg01, local02
29cdc     40 4E 85 F1 | 	sub	fp, #64
29ce0     A7 20 02 FB | 	rdlong	local02, fp
29ce4     10 15 02 F6 | 	mov	arg02, local02
29ce8     28 14 06 F1 | 	add	arg02, #40
29cec     04 4E 85 F1 | 	sub	fp, #4
29cf0     1C 20 06 F1 | 	add	local02, #28
29cf4     10 17 02 FB | 	rdlong	arg03, local02
29cf8     01 18 06 F6 | 	mov	arg04, #1
29cfc     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
29d00     00 FA 0D F2 | 	cmp	result1, #0 wz
29d04     10 4E 05 51 |  if_ne	add	fp, #16
29d08     A7 02 68 5C |  if_ne	wrlong	#1, fp
29d0c     10 4E 85 51 |  if_ne	sub	fp, #16
29d10                 | LR__4252
29d10                 | LR__4253
29d10                 | LR__4254
29d10                 | LR__4255
29d10                 | LR__4256
29d10     10 4E 05 F1 | 	add	fp, #16
29d14     A7 20 0A FB | 	rdlong	local02, fp wz
29d18     10 4E 85 F1 | 	sub	fp, #16
29d1c     04 4E 05 51 |  if_ne	add	fp, #4
29d20     A7 20 02 5B |  if_ne	rdlong	local02, fp
29d24     04 4E 85 51 |  if_ne	sub	fp, #4
29d28     10 01 68 5C |  if_ne	wrlong	#0, local02
29d2c                 | ' 
29d2c                 | ' 	return res ;
29d2c     10 4E 05 F1 | 	add	fp, #16
29d30     A7 FA 01 FB | 	rdlong	result1, fp
29d34     10 4E 85 F1 | 	sub	fp, #16
29d38                 | LR__4257
29d38     A7 F0 03 F6 | 	mov	ptra, fp
29d3c     B2 00 A0 FD | 	call	#popregs_
29d40                 | _fatfs_cc_f_open_ret
29d40     2D 00 64 FD | 	ret
29d44                 | 
29d44                 | _fatfs_cc_f_read
29d44     0E 4A 05 F6 | 	mov	COUNT_, #14
29d48     A8 00 A0 FD | 	call	#pushregs_
29d4c     38 F0 07 F1 | 	add	ptra, #56
29d50     04 4E 05 F1 | 	add	fp, #4
29d54     A7 12 62 FC | 	wrlong	arg01, fp
29d58     04 4E 05 F1 | 	add	fp, #4
29d5c     A7 14 62 FC | 	wrlong	arg02, fp
29d60     04 4E 05 F1 | 	add	fp, #4
29d64     A7 16 62 FC | 	wrlong	arg03, fp
29d68     04 4E 05 F1 | 	add	fp, #4
29d6c     A7 18 62 FC | 	wrlong	arg04, fp
29d70     08 4E 85 F1 | 	sub	fp, #8
29d74     A7 FA 01 FB | 	rdlong	result1, fp
29d78     2C 4E 05 F1 | 	add	fp, #44
29d7c     A7 FA 61 FC | 	wrlong	result1, fp
29d80     24 4E 85 F1 | 	sub	fp, #36
29d84     A7 FA 01 FB | 	rdlong	result1, fp
29d88     FD 00 68 FC | 	wrlong	#0, result1
29d8c     0C 4E 85 F1 | 	sub	fp, #12
29d90     A7 12 02 FB | 	rdlong	arg01, fp
29d94     14 4E 05 F1 | 	add	fp, #20
29d98     A7 14 02 F6 | 	mov	arg02, fp
29d9c     18 4E 85 F1 | 	sub	fp, #24
29da0     24 F7 BF FD | 	call	#_fatfs_cc_validate
29da4     14 4E 05 F1 | 	add	fp, #20
29da8     A7 FA 61 FC | 	wrlong	result1, fp
29dac     00 FA 4D F2 | 	cmps	result1, #0 wz
29db0     14 4E 85 F1 | 	sub	fp, #20
29db4     20 00 90 5D |  if_ne	jmp	#LR__4260
29db8     04 4E 05 F1 | 	add	fp, #4
29dbc     A7 14 02 FB | 	rdlong	arg02, fp
29dc0     11 14 06 F1 | 	add	arg02, #17
29dc4     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
29dc8     10 4E 05 F1 | 	add	fp, #16
29dcc     A7 14 62 FC | 	wrlong	arg02, fp
29dd0     14 4E 85 F1 | 	sub	fp, #20
29dd4     10 00 90 AD |  if_e	jmp	#LR__4261
29dd8                 | LR__4260
29dd8     14 4E 05 F1 | 	add	fp, #20
29ddc     A7 FA 01 FB | 	rdlong	result1, fp
29de0     14 4E 85 F1 | 	sub	fp, #20
29de4     EC 05 90 FD | 	jmp	#LR__4280
29de8                 | LR__4261
29de8     04 4E 05 F1 | 	add	fp, #4
29dec     A7 18 02 FB | 	rdlong	arg04, fp
29df0     04 4E 85 F1 | 	sub	fp, #4
29df4     10 18 06 F1 | 	add	arg04, #16
29df8     0C 19 C2 FA | 	rdbyte	arg04, arg04
29dfc     01 18 CE F7 | 	test	arg04, #1 wz
29e00     07 FA 05 A6 |  if_e	mov	result1, #7
29e04     CC 05 90 AD |  if_e	jmp	#LR__4280
29e08     04 4E 05 F1 | 	add	fp, #4
29e0c     A7 1E 02 FB | 	rdlong	local01, fp
29e10     0F 21 02 F6 | 	mov	local02, local01
29e14     0C 20 06 F1 | 	add	local02, #12
29e18     10 23 02 FB | 	rdlong	local03, local02
29e1c     14 1E 06 F1 | 	add	local01, #20
29e20     0F 1F 02 FB | 	rdlong	local01, local01
29e24     0F 23 82 F1 | 	sub	local03, local01
29e28     20 4E 05 F1 | 	add	fp, #32
29e2c     A7 22 62 FC | 	wrlong	local03, fp
29e30     18 4E 85 F1 | 	sub	fp, #24
29e34     A7 24 02 FB | 	rdlong	local04, fp
29e38     0C 4E 85 F1 | 	sub	fp, #12
29e3c     11 25 1A F2 | 	cmp	local04, local03 wcz
29e40     24 4E 05 11 |  if_a	add	fp, #36
29e44     A7 24 02 1B |  if_a	rdlong	local04, fp
29e48     18 4E 85 11 |  if_a	sub	fp, #24
29e4c     A7 24 62 1C |  if_a	wrlong	local04, fp
29e50     0C 4E 85 11 |  if_a	sub	fp, #12
29e54                 | ' 
29e54                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
29e54                 | LR__4262
29e54     0C 4E 05 F1 | 	add	fp, #12
29e58     A7 20 02 FB | 	rdlong	local02, fp
29e5c     0C 4E 85 F1 | 	sub	fp, #12
29e60     10 25 02 F6 | 	mov	local04, local02
29e64     01 24 16 F2 | 	cmp	local04, #1 wc
29e68     64 05 90 CD |  if_b	jmp	#LR__4279
29e6c     04 4E 05 F1 | 	add	fp, #4
29e70     A7 22 02 FB | 	rdlong	local03, fp
29e74     04 4E 85 F1 | 	sub	fp, #4
29e78     14 22 06 F1 | 	add	local03, #20
29e7c     11 23 02 FB | 	rdlong	local03, local03
29e80     FF 23 CE F7 | 	test	local03, #511 wz
29e84     3C 04 90 5D |  if_ne	jmp	#LR__4277
29e88     04 4E 05 F1 | 	add	fp, #4
29e8c     A7 1E 02 FB | 	rdlong	local01, fp
29e90     14 1E 06 F1 | 	add	local01, #20
29e94     0F 23 02 FB | 	rdlong	local03, local01
29e98     09 22 46 F0 | 	shr	local03, #9
29e9c     14 4E 05 F1 | 	add	fp, #20
29ea0     A7 26 02 FB | 	rdlong	local05, fp
29ea4     13 29 02 F6 | 	mov	local06, local05
29ea8     0A 28 06 F1 | 	add	local06, #10
29eac     14 2B E2 FA | 	rdword	local07, local06
29eb0     0A 28 86 F1 | 	sub	local06, #10
29eb4     15 2D 32 F9 | 	getword	local08, local07, #0
29eb8     01 2C 86 F1 | 	sub	local08, #1
29ebc     16 23 0A F5 | 	and	local03, local08 wz
29ec0     18 4E 05 F1 | 	add	fp, #24
29ec4     A7 22 62 FC | 	wrlong	local03, fp
29ec8     30 4E 85 F1 | 	sub	fp, #48
29ecc     E0 00 90 5D |  if_ne	jmp	#LR__4267
29ed0     04 4E 05 F1 | 	add	fp, #4
29ed4     A7 22 02 FB | 	rdlong	local03, fp
29ed8     04 4E 85 F1 | 	sub	fp, #4
29edc     14 22 06 F1 | 	add	local03, #20
29ee0     11 23 0A FB | 	rdlong	local03, local03 wz
29ee4     20 00 90 5D |  if_ne	jmp	#LR__4263
29ee8     04 4E 05 F1 | 	add	fp, #4
29eec     A7 22 02 FB | 	rdlong	local03, fp
29ef0     08 22 06 F1 | 	add	local03, #8
29ef4     11 23 02 FB | 	rdlong	local03, local03
29ef8     18 4E 05 F1 | 	add	fp, #24
29efc     A7 22 62 FC | 	wrlong	local03, fp
29f00     1C 4E 85 F1 | 	sub	fp, #28
29f04     28 00 90 FD | 	jmp	#LR__4264
29f08                 | LR__4263
29f08     04 4E 05 F1 | 	add	fp, #4
29f0c     A7 2C 02 FB | 	rdlong	local08, fp
29f10     16 13 02 F6 | 	mov	arg01, local08
29f14     04 4E 85 F1 | 	sub	fp, #4
29f18     18 2C 06 F1 | 	add	local08, #24
29f1c     16 15 02 FB | 	rdlong	arg02, local08
29f20     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
29f24     1C 4E 05 F1 | 	add	fp, #28
29f28     A7 FA 61 FC | 	wrlong	result1, fp
29f2c     1C 4E 85 F1 | 	sub	fp, #28
29f30                 | LR__4264
29f30     1C 4E 05 F1 | 	add	fp, #28
29f34     A7 22 02 FB | 	rdlong	local03, fp
29f38     1C 4E 85 F1 | 	sub	fp, #28
29f3c     02 22 16 F2 | 	cmp	local03, #2 wc
29f40     1C 00 90 3D |  if_ae	jmp	#LR__4265
29f44     04 4E 05 F1 | 	add	fp, #4
29f48     A7 22 02 FB | 	rdlong	local03, fp
29f4c     04 4E 85 F1 | 	sub	fp, #4
29f50     11 22 06 F1 | 	add	local03, #17
29f54     11 05 48 FC | 	wrbyte	#2, local03
29f58     02 FA 05 F6 | 	mov	result1, #2
29f5c     74 04 90 FD | 	jmp	#LR__4280
29f60                 | LR__4265
29f60     1C 4E 05 F1 | 	add	fp, #28
29f64     A7 22 02 FB | 	rdlong	local03, fp
29f68     1C 4E 85 F1 | 	sub	fp, #28
29f6c     FF FF 7F FF 
29f70     FF 23 0E F2 | 	cmp	local03, ##-1 wz
29f74     1C 00 90 5D |  if_ne	jmp	#LR__4266
29f78     04 4E 05 F1 | 	add	fp, #4
29f7c     A7 22 02 FB | 	rdlong	local03, fp
29f80     04 4E 85 F1 | 	sub	fp, #4
29f84     11 22 06 F1 | 	add	local03, #17
29f88     11 03 48 FC | 	wrbyte	#1, local03
29f8c     01 FA 05 F6 | 	mov	result1, #1
29f90     40 04 90 FD | 	jmp	#LR__4280
29f94                 | LR__4266
29f94     04 4E 05 F1 | 	add	fp, #4
29f98     A7 22 02 FB | 	rdlong	local03, fp
29f9c     18 4E 05 F1 | 	add	fp, #24
29fa0     A7 2C 02 FB | 	rdlong	local08, fp
29fa4     1C 4E 85 F1 | 	sub	fp, #28
29fa8     18 22 06 F1 | 	add	local03, #24
29fac     11 2D 62 FC | 	wrlong	local08, local03
29fb0                 | LR__4267
29fb0     18 4E 05 F1 | 	add	fp, #24
29fb4     A7 12 02 FB | 	rdlong	arg01, fp
29fb8     14 4E 85 F1 | 	sub	fp, #20
29fbc     A7 22 02 FB | 	rdlong	local03, fp
29fc0     04 4E 85 F1 | 	sub	fp, #4
29fc4     18 22 06 F1 | 	add	local03, #24
29fc8     11 15 02 FB | 	rdlong	arg02, local03
29fcc     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
29fd0     20 4E 05 F1 | 	add	fp, #32
29fd4     A7 FA 61 FC | 	wrlong	result1, fp
29fd8     20 4E 85 F1 | 	sub	fp, #32
29fdc     00 FA 0D F2 | 	cmp	result1, #0 wz
29fe0     1C 00 90 5D |  if_ne	jmp	#LR__4268
29fe4     04 4E 05 F1 | 	add	fp, #4
29fe8     A7 22 02 FB | 	rdlong	local03, fp
29fec     04 4E 85 F1 | 	sub	fp, #4
29ff0     11 22 06 F1 | 	add	local03, #17
29ff4     11 05 48 FC | 	wrbyte	#2, local03
29ff8     02 FA 05 F6 | 	mov	result1, #2
29ffc     D4 03 90 FD | 	jmp	#LR__4280
2a000                 | LR__4268
2a000     20 4E 05 F1 | 	add	fp, #32
2a004     A7 22 02 FB | 	rdlong	local03, fp
2a008     10 4E 05 F1 | 	add	fp, #16
2a00c     A7 2C 02 FB | 	rdlong	local08, fp
2a010     16 23 02 F1 | 	add	local03, local08
2a014     10 4E 85 F1 | 	sub	fp, #16
2a018     A7 22 62 FC | 	wrlong	local03, fp
2a01c     14 4E 85 F1 | 	sub	fp, #20
2a020     A7 22 02 FB | 	rdlong	local03, fp
2a024     09 22 46 F0 | 	shr	local03, #9
2a028     20 4E 05 F1 | 	add	fp, #32
2a02c     A7 22 62 FC | 	wrlong	local03, fp
2a030     2C 4E 85 F1 | 	sub	fp, #44
2a034     01 22 16 F2 | 	cmp	local03, #1 wc
2a038     5C 01 90 CD |  if_b	jmp	#LR__4272
2a03c     30 4E 05 F1 | 	add	fp, #48
2a040     A7 22 02 FB | 	rdlong	local03, fp
2a044     04 4E 85 F1 | 	sub	fp, #4
2a048     A7 2C 02 FB | 	rdlong	local08, fp
2a04c     16 23 02 F1 | 	add	local03, local08
2a050     14 4E 85 F1 | 	sub	fp, #20
2a054     A7 2C 02 FB | 	rdlong	local08, fp
2a058     18 4E 85 F1 | 	sub	fp, #24
2a05c     0A 2C 06 F1 | 	add	local08, #10
2a060     16 2D E2 FA | 	rdword	local08, local08
2a064     16 23 1A F2 | 	cmp	local03, local08 wcz
2a068     28 00 90 ED |  if_be	jmp	#LR__4269
2a06c     18 4E 05 F1 | 	add	fp, #24
2a070     A7 1E 02 FB | 	rdlong	local01, fp
2a074     0A 1E 06 F1 | 	add	local01, #10
2a078     0F 23 E2 FA | 	rdword	local03, local01
2a07c     18 4E 05 F1 | 	add	fp, #24
2a080     A7 2C 02 FB | 	rdlong	local08, fp
2a084     16 23 82 F1 | 	sub	local03, local08
2a088     04 4E 85 F1 | 	sub	fp, #4
2a08c     A7 22 62 FC | 	wrlong	local03, fp
2a090     2C 4E 85 F1 | 	sub	fp, #44
2a094                 | LR__4269
2a094     18 4E 05 F1 | 	add	fp, #24
2a098     A7 1E 02 FB | 	rdlong	local01, fp
2a09c     01 1E 06 F1 | 	add	local01, #1
2a0a0     0F 13 C2 FA | 	rdbyte	arg01, local01
2a0a4     1C 4E 05 F1 | 	add	fp, #28
2a0a8     A7 14 02 FB | 	rdlong	arg02, fp
2a0ac     14 4E 85 F1 | 	sub	fp, #20
2a0b0     A7 16 02 FB | 	rdlong	arg03, fp
2a0b4     0C 4E 05 F1 | 	add	fp, #12
2a0b8     A7 18 02 FB | 	rdlong	arg04, fp
2a0bc     2C 4E 85 F1 | 	sub	fp, #44
2a0c0     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
2a0c4     00 FA 0D F2 | 	cmp	result1, #0 wz
2a0c8     1C 00 90 AD |  if_e	jmp	#LR__4270
2a0cc     04 4E 05 F1 | 	add	fp, #4
2a0d0     A7 22 02 FB | 	rdlong	local03, fp
2a0d4     04 4E 85 F1 | 	sub	fp, #4
2a0d8     11 22 06 F1 | 	add	local03, #17
2a0dc     11 03 48 FC | 	wrbyte	#1, local03
2a0e0     01 FA 05 F6 | 	mov	result1, #1
2a0e4     EC 02 90 FD | 	jmp	#LR__4280
2a0e8                 | LR__4270
2a0e8     04 4E 05 F1 | 	add	fp, #4
2a0ec     A7 1E 02 FB | 	rdlong	local01, fp
2a0f0     04 4E 85 F1 | 	sub	fp, #4
2a0f4     10 1E 06 F1 | 	add	local01, #16
2a0f8     0F 23 C2 FA | 	rdbyte	local03, local01
2a0fc     80 22 CE F7 | 	test	local03, #128 wz
2a100     78 00 90 AD |  if_e	jmp	#LR__4271
2a104     04 4E 05 F1 | 	add	fp, #4
2a108     A7 2C 02 FB | 	rdlong	local08, fp
2a10c     1C 2C 06 F1 | 	add	local08, #28
2a110     16 2D 02 FB | 	rdlong	local08, local08
2a114     1C 4E 05 F1 | 	add	fp, #28
2a118     A7 2E 02 FB | 	rdlong	local09, fp
2a11c     17 2D 82 F1 | 	sub	local08, local09
2a120     0C 4E 05 F1 | 	add	fp, #12
2a124     A7 30 02 FB | 	rdlong	local10, fp
2a128     2C 4E 85 F1 | 	sub	fp, #44
2a12c     18 33 02 F6 | 	mov	local11, local10
2a130     19 2D 12 F2 | 	cmp	local08, local11 wc
2a134     44 00 90 3D |  if_ae	jmp	#LR__4271
2a138     34 4E 05 F1 | 	add	fp, #52
2a13c     A7 12 02 FB | 	rdlong	arg01, fp
2a140     30 4E 85 F1 | 	sub	fp, #48
2a144     A7 14 02 FB | 	rdlong	arg02, fp
2a148     0A 33 02 F6 | 	mov	local11, arg02
2a14c     1C 32 06 F1 | 	add	local11, #28
2a150     19 2F 02 FB | 	rdlong	local09, local11
2a154     1C 4E 05 F1 | 	add	fp, #28
2a158     A7 26 02 FB | 	rdlong	local05, fp
2a15c     13 2F 82 F1 | 	sub	local09, local05
2a160     09 2E 66 F0 | 	shl	local09, #9
2a164     17 33 02 F6 | 	mov	local11, local09
2a168     17 13 02 F1 | 	add	arg01, local09
2a16c     20 4E 85 F1 | 	sub	fp, #32
2a170     28 14 06 F1 | 	add	arg02, #40
2a174     09 16 C6 F9 | 	decod	arg03, #9
2a178     BC 48 BF FD | 	call	#__system____builtin_memmove
2a17c                 | LR__4271
2a17c     2C 4E 05 F1 | 	add	fp, #44
2a180     A7 22 02 FB | 	rdlong	local03, fp
2a184     09 22 66 F0 | 	shl	local03, #9
2a188     04 4E 85 F1 | 	sub	fp, #4
2a18c     A7 22 62 FC | 	wrlong	local03, fp
2a190     28 4E 85 F1 | 	sub	fp, #40
2a194                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
2a194                 | ' 				}
2a194                 | ' 
2a194                 | ' 
2a194                 | ' 				rcnt =  ((UINT) 512 )  * cc;
2a194                 | ' 				continue;
2a194     B4 01 90 FD | 	jmp	#LR__4278
2a198                 | LR__4272
2a198     04 4E 05 F1 | 	add	fp, #4
2a19c     A7 22 02 FB | 	rdlong	local03, fp
2a1a0     1C 22 06 F1 | 	add	local03, #28
2a1a4     11 23 02 FB | 	rdlong	local03, local03
2a1a8     1C 4E 05 F1 | 	add	fp, #28
2a1ac     A7 1E 02 FB | 	rdlong	local01, fp
2a1b0     20 4E 85 F1 | 	sub	fp, #32
2a1b4     0F 23 0A F2 | 	cmp	local03, local01 wz
2a1b8     EC 00 90 AD |  if_e	jmp	#LR__4276
2a1bc     04 4E 05 F1 | 	add	fp, #4
2a1c0     A7 1E 02 FB | 	rdlong	local01, fp
2a1c4     04 4E 85 F1 | 	sub	fp, #4
2a1c8     10 1E 06 F1 | 	add	local01, #16
2a1cc     0F 23 C2 FA | 	rdbyte	local03, local01
2a1d0     80 22 CE F7 | 	test	local03, #128 wz
2a1d4     7C 00 90 AD |  if_e	jmp	#LR__4274
2a1d8     18 4E 05 F1 | 	add	fp, #24
2a1dc     A7 1E 02 FB | 	rdlong	local01, fp
2a1e0     01 1E 06 F1 | 	add	local01, #1
2a1e4     0F 13 C2 FA | 	rdbyte	arg01, local01
2a1e8     14 4E 85 F1 | 	sub	fp, #20
2a1ec     A7 22 02 FB | 	rdlong	local03, fp
2a1f0     11 15 02 F6 | 	mov	arg02, local03
2a1f4     28 14 06 F1 | 	add	arg02, #40
2a1f8     04 4E 85 F1 | 	sub	fp, #4
2a1fc     1C 22 06 F1 | 	add	local03, #28
2a200     11 17 02 FB | 	rdlong	arg03, local03
2a204     01 18 06 F6 | 	mov	arg04, #1
2a208     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
2a20c     00 FA 0D F2 | 	cmp	result1, #0 wz
2a210     1C 00 90 AD |  if_e	jmp	#LR__4273
2a214     04 4E 05 F1 | 	add	fp, #4
2a218     A7 22 02 FB | 	rdlong	local03, fp
2a21c     04 4E 85 F1 | 	sub	fp, #4
2a220     11 22 06 F1 | 	add	local03, #17
2a224     11 03 48 FC | 	wrbyte	#1, local03
2a228     01 FA 05 F6 | 	mov	result1, #1
2a22c     A4 01 90 FD | 	jmp	#LR__4280
2a230                 | LR__4273
2a230     04 4E 05 F1 | 	add	fp, #4
2a234     A7 32 02 FB | 	rdlong	local11, fp
2a238     19 23 02 F6 | 	mov	local03, local11
2a23c     04 4E 85 F1 | 	sub	fp, #4
2a240     10 32 06 F1 | 	add	local11, #16
2a244     19 33 C2 FA | 	rdbyte	local11, local11
2a248     7F 32 06 F5 | 	and	local11, #127
2a24c     10 22 06 F1 | 	add	local03, #16
2a250     11 33 42 FC | 	wrbyte	local11, local03
2a254                 | LR__4274
2a254     18 4E 05 F1 | 	add	fp, #24
2a258     A7 1E 02 FB | 	rdlong	local01, fp
2a25c     01 1E 06 F1 | 	add	local01, #1
2a260     0F 13 C2 FA | 	rdbyte	arg01, local01
2a264     14 4E 85 F1 | 	sub	fp, #20
2a268     A7 14 02 FB | 	rdlong	arg02, fp
2a26c     28 14 06 F1 | 	add	arg02, #40
2a270     1C 4E 05 F1 | 	add	fp, #28
2a274     A7 16 02 FB | 	rdlong	arg03, fp
2a278     20 4E 85 F1 | 	sub	fp, #32
2a27c     01 18 06 F6 | 	mov	arg04, #1
2a280     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
2a284     00 FA 0D F2 | 	cmp	result1, #0 wz
2a288     1C 00 90 AD |  if_e	jmp	#LR__4275
2a28c     04 4E 05 F1 | 	add	fp, #4
2a290     A7 22 02 FB | 	rdlong	local03, fp
2a294     04 4E 85 F1 | 	sub	fp, #4
2a298     11 22 06 F1 | 	add	local03, #17
2a29c     11 03 48 FC | 	wrbyte	#1, local03
2a2a0     01 FA 05 F6 | 	mov	result1, #1
2a2a4     2C 01 90 FD | 	jmp	#LR__4280
2a2a8                 | LR__4275
2a2a8                 | LR__4276
2a2a8     04 4E 05 F1 | 	add	fp, #4
2a2ac     A7 22 02 FB | 	rdlong	local03, fp
2a2b0     1C 4E 05 F1 | 	add	fp, #28
2a2b4     A7 32 02 FB | 	rdlong	local11, fp
2a2b8     20 4E 85 F1 | 	sub	fp, #32
2a2bc     1C 22 06 F1 | 	add	local03, #28
2a2c0     11 33 62 FC | 	wrlong	local11, local03
2a2c4                 | LR__4277
2a2c4     04 4E 05 F1 | 	add	fp, #4
2a2c8     A7 1E 02 FB | 	rdlong	local01, fp
2a2cc     14 1E 06 F1 | 	add	local01, #20
2a2d0     0F 33 02 FB | 	rdlong	local11, local01
2a2d4     FF 33 06 F5 | 	and	local11, #511
2a2d8     09 22 C6 F9 | 	decod	local03, #9
2a2dc     19 23 82 F1 | 	sub	local03, local11
2a2e0     24 4E 05 F1 | 	add	fp, #36
2a2e4     A7 22 62 FC | 	wrlong	local03, fp
2a2e8     1C 4E 85 F1 | 	sub	fp, #28
2a2ec     A7 32 02 FB | 	rdlong	local11, fp
2a2f0     0C 4E 85 F1 | 	sub	fp, #12
2a2f4     19 23 1A F2 | 	cmp	local03, local11 wcz
2a2f8     0C 4E 05 11 |  if_a	add	fp, #12
2a2fc     A7 22 02 1B |  if_a	rdlong	local03, fp
2a300     1C 4E 05 11 |  if_a	add	fp, #28
2a304     A7 22 62 1C |  if_a	wrlong	local03, fp
2a308     28 4E 85 11 |  if_a	sub	fp, #40
2a30c     34 4E 05 F1 | 	add	fp, #52
2a310     A7 12 02 FB | 	rdlong	arg01, fp
2a314     30 4E 85 F1 | 	sub	fp, #48
2a318     A7 28 02 FB | 	rdlong	local06, fp
2a31c     14 15 02 F6 | 	mov	arg02, local06
2a320     28 14 06 F1 | 	add	arg02, #40
2a324     14 28 06 F1 | 	add	local06, #20
2a328     14 33 02 FB | 	rdlong	local11, local06
2a32c     19 2F 02 F6 | 	mov	local09, local11
2a330     17 31 02 F6 | 	mov	local10, local09
2a334     FF 31 06 F5 | 	and	local10, #511
2a338     18 15 02 F1 | 	add	arg02, local10
2a33c     24 4E 05 F1 | 	add	fp, #36
2a340     A7 16 02 FB | 	rdlong	arg03, fp
2a344     28 4E 85 F1 | 	sub	fp, #40
2a348     EC 46 BF FD | 	call	#__system____builtin_memmove
2a34c                 | LR__4278
2a34c     0C 4E 05 F1 | 	add	fp, #12
2a350     A7 22 02 FB | 	rdlong	local03, fp
2a354     1C 4E 05 F1 | 	add	fp, #28
2a358     A7 2C 02 FB | 	rdlong	local08, fp
2a35c     16 23 82 F1 | 	sub	local03, local08
2a360     1C 4E 85 F1 | 	sub	fp, #28
2a364     A7 22 62 FC | 	wrlong	local03, fp
2a368     04 4E 05 F1 | 	add	fp, #4
2a36c     A7 1E 02 FB | 	rdlong	local01, fp
2a370     0F 2B 02 FB | 	rdlong	local07, local01
2a374     18 4E 05 F1 | 	add	fp, #24
2a378     A7 2C 02 FB | 	rdlong	local08, fp
2a37c     16 2B 02 F1 | 	add	local07, local08
2a380     0F 2B 62 FC | 	wrlong	local07, local01
2a384     0C 4E 05 F1 | 	add	fp, #12
2a388     A7 22 02 FB | 	rdlong	local03, fp
2a38c     0C 4E 85 F1 | 	sub	fp, #12
2a390     A7 34 02 FB | 	rdlong	local12, fp
2a394     1A 23 02 F1 | 	add	local03, local12
2a398     0C 4E 05 F1 | 	add	fp, #12
2a39c     A7 22 62 FC | 	wrlong	local03, fp
2a3a0     30 4E 85 F1 | 	sub	fp, #48
2a3a4     A7 36 02 FB | 	rdlong	local13, fp
2a3a8     1B 23 02 F6 | 	mov	local03, local13
2a3ac     14 36 06 F1 | 	add	local13, #20
2a3b0     1B 39 02 FB | 	rdlong	local14, local13
2a3b4     24 4E 05 F1 | 	add	fp, #36
2a3b8     A7 28 02 FB | 	rdlong	local06, fp
2a3bc     28 4E 85 F1 | 	sub	fp, #40
2a3c0     14 39 02 F1 | 	add	local14, local06
2a3c4     14 22 06 F1 | 	add	local03, #20
2a3c8     11 39 62 FC | 	wrlong	local14, local03
2a3cc     84 FA 9F FD | 	jmp	#LR__4262
2a3d0                 | LR__4279
2a3d0                 | ' 
2a3d0                 | ' 
2a3d0                 | ' 
2a3d0                 | ' 
2a3d0                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
2a3d0                 | ' 
2a3d0                 | ' 	}
2a3d0                 | ' 
2a3d0                 | ' 	return FR_OK ;
2a3d0     00 FA 05 F6 | 	mov	result1, #0
2a3d4                 | LR__4280
2a3d4     A7 F0 03 F6 | 	mov	ptra, fp
2a3d8     B2 00 A0 FD | 	call	#popregs_
2a3dc                 | _fatfs_cc_f_read_ret
2a3dc     2D 00 64 FD | 	ret
2a3e0                 | 
2a3e0                 | _fatfs_cc_f_write
2a3e0     15 4A 05 F6 | 	mov	COUNT_, #21
2a3e4     A8 00 A0 FD | 	call	#pushregs_
2a3e8     34 F0 07 F1 | 	add	ptra, #52
2a3ec     04 4E 05 F1 | 	add	fp, #4
2a3f0     A7 12 62 FC | 	wrlong	arg01, fp
2a3f4     04 4E 05 F1 | 	add	fp, #4
2a3f8     A7 14 62 FC | 	wrlong	arg02, fp
2a3fc     04 4E 05 F1 | 	add	fp, #4
2a400     A7 16 62 FC | 	wrlong	arg03, fp
2a404     04 4E 05 F1 | 	add	fp, #4
2a408     A7 18 62 FC | 	wrlong	arg04, fp
2a40c     08 4E 85 F1 | 	sub	fp, #8
2a410     A7 FA 01 FB | 	rdlong	result1, fp
2a414     28 4E 05 F1 | 	add	fp, #40
2a418     A7 FA 61 FC | 	wrlong	result1, fp
2a41c     20 4E 85 F1 | 	sub	fp, #32
2a420     A7 FA 01 FB | 	rdlong	result1, fp
2a424     FD 00 68 FC | 	wrlong	#0, result1
2a428     0C 4E 85 F1 | 	sub	fp, #12
2a42c     A7 12 02 FB | 	rdlong	arg01, fp
2a430     14 4E 05 F1 | 	add	fp, #20
2a434     A7 14 02 F6 | 	mov	arg02, fp
2a438     18 4E 85 F1 | 	sub	fp, #24
2a43c     88 F0 BF FD | 	call	#_fatfs_cc_validate
2a440     14 4E 05 F1 | 	add	fp, #20
2a444     A7 FA 61 FC | 	wrlong	result1, fp
2a448     00 FA 4D F2 | 	cmps	result1, #0 wz
2a44c     14 4E 85 F1 | 	sub	fp, #20
2a450     20 00 90 5D |  if_ne	jmp	#LR__4290
2a454     04 4E 05 F1 | 	add	fp, #4
2a458     A7 14 02 FB | 	rdlong	arg02, fp
2a45c     11 14 06 F1 | 	add	arg02, #17
2a460     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2a464     10 4E 05 F1 | 	add	fp, #16
2a468     A7 14 62 FC | 	wrlong	arg02, fp
2a46c     14 4E 85 F1 | 	sub	fp, #20
2a470     10 00 90 AD |  if_e	jmp	#LR__4291
2a474                 | LR__4290
2a474     14 4E 05 F1 | 	add	fp, #20
2a478     A7 FA 01 FB | 	rdlong	result1, fp
2a47c     14 4E 85 F1 | 	sub	fp, #20
2a480     44 07 90 FD | 	jmp	#LR__4313
2a484                 | LR__4291
2a484     04 4E 05 F1 | 	add	fp, #4
2a488     A7 14 02 FB | 	rdlong	arg02, fp
2a48c     04 4E 85 F1 | 	sub	fp, #4
2a490     10 14 06 F1 | 	add	arg02, #16
2a494     0A 15 C2 FA | 	rdbyte	arg02, arg02
2a498     02 14 CE F7 | 	test	arg02, #2 wz
2a49c     07 FA 05 A6 |  if_e	mov	result1, #7
2a4a0     24 07 90 AD |  if_e	jmp	#LR__4313
2a4a4     04 4E 05 F1 | 	add	fp, #4
2a4a8     A7 14 02 FB | 	rdlong	arg02, fp
2a4ac     0A 13 02 F6 | 	mov	arg01, arg02
2a4b0     14 12 06 F1 | 	add	arg01, #20
2a4b4     09 13 02 FB | 	rdlong	arg01, arg01
2a4b8     08 4E 05 F1 | 	add	fp, #8
2a4bc     A7 FA 01 FB | 	rdlong	result1, fp
2a4c0     FD 12 02 F1 | 	add	arg01, result1
2a4c4     0C 4E 85 F1 | 	sub	fp, #12
2a4c8     14 14 06 F1 | 	add	arg02, #20
2a4cc     0A FB 01 FB | 	rdlong	result1, arg02
2a4d0     FD 12 12 F2 | 	cmp	arg01, result1 wc
2a4d4     24 00 90 3D |  if_ae	jmp	#LR__4292
2a4d8     04 4E 05 F1 | 	add	fp, #4
2a4dc     A7 14 02 FB | 	rdlong	arg02, fp
2a4e0     01 FA 65 F6 | 	neg	result1, #1
2a4e4     14 14 06 F1 | 	add	arg02, #20
2a4e8     0A 15 02 FB | 	rdlong	arg02, arg02
2a4ec     0A FB 81 F1 | 	sub	result1, arg02
2a4f0     08 4E 05 F1 | 	add	fp, #8
2a4f4     A7 FA 61 FC | 	wrlong	result1, fp
2a4f8     0C 4E 85 F1 | 	sub	fp, #12
2a4fc                 | LR__4292
2a4fc                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2a4fc                 | ' 	}
2a4fc                 | ' 
2a4fc                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
2a4fc                 | LR__4293
2a4fc     0C 4E 05 F1 | 	add	fp, #12
2a500     A7 FA 01 FB | 	rdlong	result1, fp
2a504     0C 4E 85 F1 | 	sub	fp, #12
2a508     01 FA 15 F2 | 	cmp	result1, #1 wc
2a50c     90 06 90 CD |  if_b	jmp	#LR__4312
2a510     04 4E 05 F1 | 	add	fp, #4
2a514     A7 FA 01 FB | 	rdlong	result1, fp
2a518     04 4E 85 F1 | 	sub	fp, #4
2a51c     14 FA 05 F1 | 	add	result1, #20
2a520     FD FA 01 FB | 	rdlong	result1, result1
2a524     FF FB CD F7 | 	test	result1, #511 wz
2a528     D8 04 90 5D |  if_ne	jmp	#LR__4308
2a52c     04 4E 05 F1 | 	add	fp, #4
2a530     A7 FA 01 FB | 	rdlong	result1, fp
2a534     14 FA 05 F1 | 	add	result1, #20
2a538     FD FA 01 FB | 	rdlong	result1, result1
2a53c     09 FA 45 F0 | 	shr	result1, #9
2a540     14 4E 05 F1 | 	add	fp, #20
2a544     A7 14 02 FB | 	rdlong	arg02, fp
2a548     0A 14 06 F1 | 	add	arg02, #10
2a54c     0A 19 E2 FA | 	rdword	arg04, arg02
2a550     0C 15 32 F9 | 	getword	arg02, arg04, #0
2a554     01 14 86 F1 | 	sub	arg02, #1
2a558     0A FB 09 F5 | 	and	result1, arg02 wz
2a55c     14 4E 05 F1 | 	add	fp, #20
2a560     A7 FA 61 FC | 	wrlong	result1, fp
2a564     2C 4E 85 F1 | 	sub	fp, #44
2a568     44 01 90 5D |  if_ne	jmp	#LR__4299
2a56c     04 4E 05 F1 | 	add	fp, #4
2a570     A7 FA 01 FB | 	rdlong	result1, fp
2a574     04 4E 85 F1 | 	sub	fp, #4
2a578     14 FA 05 F1 | 	add	result1, #20
2a57c     FD 14 0A FB | 	rdlong	arg02, result1 wz
2a580     44 00 90 5D |  if_ne	jmp	#LR__4294
2a584     04 4E 05 F1 | 	add	fp, #4
2a588     A7 14 02 FB | 	rdlong	arg02, fp
2a58c     08 14 06 F1 | 	add	arg02, #8
2a590     0A 15 0A FB | 	rdlong	arg02, arg02 wz
2a594     18 4E 05 F1 | 	add	fp, #24
2a598     A7 14 62 FC | 	wrlong	arg02, fp
2a59c     1C 4E 85 F1 | 	sub	fp, #28
2a5a0     4C 00 90 5D |  if_ne	jmp	#LR__4295
2a5a4     04 4E 05 F1 | 	add	fp, #4
2a5a8     A7 12 02 FB | 	rdlong	arg01, fp
2a5ac     04 4E 85 F1 | 	sub	fp, #4
2a5b0     00 14 06 F6 | 	mov	arg02, #0
2a5b4     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
2a5b8     1C 4E 05 F1 | 	add	fp, #28
2a5bc     A7 FA 61 FC | 	wrlong	result1, fp
2a5c0     1C 4E 85 F1 | 	sub	fp, #28
2a5c4     28 00 90 FD | 	jmp	#LR__4295
2a5c8                 | LR__4294
2a5c8     04 4E 05 F1 | 	add	fp, #4
2a5cc     A7 18 02 FB | 	rdlong	arg04, fp
2a5d0     0C 13 02 F6 | 	mov	arg01, arg04
2a5d4     04 4E 85 F1 | 	sub	fp, #4
2a5d8     18 18 06 F1 | 	add	arg04, #24
2a5dc     0C 15 02 FB | 	rdlong	arg02, arg04
2a5e0     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
2a5e4     1C 4E 05 F1 | 	add	fp, #28
2a5e8     A7 FA 61 FC | 	wrlong	result1, fp
2a5ec     1C 4E 85 F1 | 	sub	fp, #28
2a5f0                 | LR__4295
2a5f0     1C 4E 05 F1 | 	add	fp, #28
2a5f4     A7 FA 09 FB | 	rdlong	result1, fp wz
2a5f8     1C 4E 85 F1 | 	sub	fp, #28
2a5fc     A0 05 90 AD |  if_e	jmp	#LR__4312
2a600     1C 4E 05 F1 | 	add	fp, #28
2a604     A7 FA 01 FB | 	rdlong	result1, fp
2a608     1C 4E 85 F1 | 	sub	fp, #28
2a60c     01 FA 0D F2 | 	cmp	result1, #1 wz
2a610     1C 00 90 5D |  if_ne	jmp	#LR__4296
2a614     04 4E 05 F1 | 	add	fp, #4
2a618     A7 FA 01 FB | 	rdlong	result1, fp
2a61c     04 4E 85 F1 | 	sub	fp, #4
2a620     11 FA 05 F1 | 	add	result1, #17
2a624     FD 04 48 FC | 	wrbyte	#2, result1
2a628     02 FA 05 F6 | 	mov	result1, #2
2a62c     98 05 90 FD | 	jmp	#LR__4313
2a630                 | LR__4296
2a630     1C 4E 05 F1 | 	add	fp, #28
2a634     A7 FA 01 FB | 	rdlong	result1, fp
2a638     1C 4E 85 F1 | 	sub	fp, #28
2a63c     FF FF 7F FF 
2a640     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2a644     1C 00 90 5D |  if_ne	jmp	#LR__4297
2a648     04 4E 05 F1 | 	add	fp, #4
2a64c     A7 FA 01 FB | 	rdlong	result1, fp
2a650     04 4E 85 F1 | 	sub	fp, #4
2a654     11 FA 05 F1 | 	add	result1, #17
2a658     FD 02 48 FC | 	wrbyte	#1, result1
2a65c     01 FA 05 F6 | 	mov	result1, #1
2a660     64 05 90 FD | 	jmp	#LR__4313
2a664                 | LR__4297
2a664     04 4E 05 F1 | 	add	fp, #4
2a668     A7 FA 01 FB | 	rdlong	result1, fp
2a66c     18 4E 05 F1 | 	add	fp, #24
2a670     A7 18 02 FB | 	rdlong	arg04, fp
2a674     18 FA 05 F1 | 	add	result1, #24
2a678     FD 18 62 FC | 	wrlong	arg04, result1
2a67c     18 4E 85 F1 | 	sub	fp, #24
2a680     A7 FA 01 FB | 	rdlong	result1, fp
2a684     04 4E 85 F1 | 	sub	fp, #4
2a688     08 FA 05 F1 | 	add	result1, #8
2a68c     FD FA 09 FB | 	rdlong	result1, result1 wz
2a690     1C 00 90 5D |  if_ne	jmp	#LR__4298
2a694     04 4E 05 F1 | 	add	fp, #4
2a698     A7 18 02 FB | 	rdlong	arg04, fp
2a69c     18 4E 05 F1 | 	add	fp, #24
2a6a0     A7 FA 01 FB | 	rdlong	result1, fp
2a6a4     1C 4E 85 F1 | 	sub	fp, #28
2a6a8     08 18 06 F1 | 	add	arg04, #8
2a6ac     0C FB 61 FC | 	wrlong	result1, arg04
2a6b0                 | LR__4298
2a6b0                 | LR__4299
2a6b0     04 4E 05 F1 | 	add	fp, #4
2a6b4     A7 18 02 FB | 	rdlong	arg04, fp
2a6b8     04 4E 85 F1 | 	sub	fp, #4
2a6bc     10 18 06 F1 | 	add	arg04, #16
2a6c0     0C 19 C2 FA | 	rdbyte	arg04, arg04
2a6c4     80 18 CE F7 | 	test	arg04, #128 wz
2a6c8     7C 00 90 AD |  if_e	jmp	#LR__4301
2a6cc     18 4E 05 F1 | 	add	fp, #24
2a6d0     A7 18 02 FB | 	rdlong	arg04, fp
2a6d4     01 18 06 F1 | 	add	arg04, #1
2a6d8     0C 13 C2 FA | 	rdbyte	arg01, arg04
2a6dc     14 4E 85 F1 | 	sub	fp, #20
2a6e0     A7 18 02 FB | 	rdlong	arg04, fp
2a6e4     0C 15 02 F6 | 	mov	arg02, arg04
2a6e8     28 14 06 F1 | 	add	arg02, #40
2a6ec     04 4E 85 F1 | 	sub	fp, #4
2a6f0     1C 18 06 F1 | 	add	arg04, #28
2a6f4     0C 17 02 FB | 	rdlong	arg03, arg04
2a6f8     01 18 06 F6 | 	mov	arg04, #1
2a6fc     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
2a700     00 FA 0D F2 | 	cmp	result1, #0 wz
2a704     1C 00 90 AD |  if_e	jmp	#LR__4300
2a708     04 4E 05 F1 | 	add	fp, #4
2a70c     A7 FA 01 FB | 	rdlong	result1, fp
2a710     04 4E 85 F1 | 	sub	fp, #4
2a714     11 FA 05 F1 | 	add	result1, #17
2a718     FD 02 48 FC | 	wrbyte	#1, result1
2a71c     01 FA 05 F6 | 	mov	result1, #1
2a720     A4 04 90 FD | 	jmp	#LR__4313
2a724                 | LR__4300
2a724     04 4E 05 F1 | 	add	fp, #4
2a728     A7 18 02 FB | 	rdlong	arg04, fp
2a72c     0C FB 01 F6 | 	mov	result1, arg04
2a730     04 4E 85 F1 | 	sub	fp, #4
2a734     10 18 06 F1 | 	add	arg04, #16
2a738     0C 19 C2 FA | 	rdbyte	arg04, arg04
2a73c     7F 18 06 F5 | 	and	arg04, #127
2a740     10 FA 05 F1 | 	add	result1, #16
2a744     FD 18 42 FC | 	wrbyte	arg04, result1
2a748                 | LR__4301
2a748     18 4E 05 F1 | 	add	fp, #24
2a74c     A7 12 02 FB | 	rdlong	arg01, fp
2a750     14 4E 85 F1 | 	sub	fp, #20
2a754     A7 14 02 FB | 	rdlong	arg02, fp
2a758     04 4E 85 F1 | 	sub	fp, #4
2a75c     18 14 06 F1 | 	add	arg02, #24
2a760     0A 15 02 FB | 	rdlong	arg02, arg02
2a764     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
2a768     20 4E 05 F1 | 	add	fp, #32
2a76c     A7 FA 61 FC | 	wrlong	result1, fp
2a770     20 4E 85 F1 | 	sub	fp, #32
2a774     00 FA 0D F2 | 	cmp	result1, #0 wz
2a778     1C 00 90 5D |  if_ne	jmp	#LR__4302
2a77c     04 4E 05 F1 | 	add	fp, #4
2a780     A7 FA 01 FB | 	rdlong	result1, fp
2a784     04 4E 85 F1 | 	sub	fp, #4
2a788     11 FA 05 F1 | 	add	result1, #17
2a78c     FD 04 48 FC | 	wrbyte	#2, result1
2a790     02 FA 05 F6 | 	mov	result1, #2
2a794     30 04 90 FD | 	jmp	#LR__4313
2a798                 | LR__4302
2a798     20 4E 05 F1 | 	add	fp, #32
2a79c     A7 FA 01 FB | 	rdlong	result1, fp
2a7a0     0C 4E 05 F1 | 	add	fp, #12
2a7a4     A7 1E 02 FB | 	rdlong	local01, fp
2a7a8     0F FB 01 F1 | 	add	result1, local01
2a7ac     0C 4E 85 F1 | 	sub	fp, #12
2a7b0     A7 FA 61 FC | 	wrlong	result1, fp
2a7b4     14 4E 85 F1 | 	sub	fp, #20
2a7b8     A7 FA 01 FB | 	rdlong	result1, fp
2a7bc     09 FA 45 F0 | 	shr	result1, #9
2a7c0     1C 4E 05 F1 | 	add	fp, #28
2a7c4     A7 FA 61 FC | 	wrlong	result1, fp
2a7c8     28 4E 85 F1 | 	sub	fp, #40
2a7cc     01 FA 15 F2 | 	cmp	result1, #1 wc
2a7d0     60 01 90 CD |  if_b	jmp	#LR__4306
2a7d4     2C 4E 05 F1 | 	add	fp, #44
2a7d8     A7 FA 01 FB | 	rdlong	result1, fp
2a7dc     04 4E 85 F1 | 	sub	fp, #4
2a7e0     A7 18 02 FB | 	rdlong	arg04, fp
2a7e4     0C FB 01 F1 | 	add	result1, arg04
2a7e8     10 4E 85 F1 | 	sub	fp, #16
2a7ec     A7 18 02 FB | 	rdlong	arg04, fp
2a7f0     18 4E 85 F1 | 	sub	fp, #24
2a7f4     0A 18 06 F1 | 	add	arg04, #10
2a7f8     0C 19 E2 FA | 	rdword	arg04, arg04
2a7fc     0C FB 19 F2 | 	cmp	result1, arg04 wcz
2a800     28 00 90 ED |  if_be	jmp	#LR__4303
2a804     18 4E 05 F1 | 	add	fp, #24
2a808     A7 FA 01 FB | 	rdlong	result1, fp
2a80c     0A FA 05 F1 | 	add	result1, #10
2a810     FD FA E1 FA | 	rdword	result1, result1
2a814     14 4E 05 F1 | 	add	fp, #20
2a818     A7 18 02 FB | 	rdlong	arg04, fp
2a81c     0C FB 81 F1 | 	sub	result1, arg04
2a820     04 4E 85 F1 | 	sub	fp, #4
2a824     A7 FA 61 FC | 	wrlong	result1, fp
2a828     28 4E 85 F1 | 	sub	fp, #40
2a82c                 | LR__4303
2a82c     18 4E 05 F1 | 	add	fp, #24
2a830     A7 18 02 FB | 	rdlong	arg04, fp
2a834     01 18 06 F1 | 	add	arg04, #1
2a838     0C 13 C2 FA | 	rdbyte	arg01, arg04
2a83c     18 4E 05 F1 | 	add	fp, #24
2a840     A7 14 02 FB | 	rdlong	arg02, fp
2a844     10 4E 85 F1 | 	sub	fp, #16
2a848     A7 16 02 FB | 	rdlong	arg03, fp
2a84c     08 4E 05 F1 | 	add	fp, #8
2a850     A7 18 02 FB | 	rdlong	arg04, fp
2a854     28 4E 85 F1 | 	sub	fp, #40
2a858     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
2a85c     00 FA 0D F2 | 	cmp	result1, #0 wz
2a860     1C 00 90 AD |  if_e	jmp	#LR__4304
2a864     04 4E 05 F1 | 	add	fp, #4
2a868     A7 1E 02 FB | 	rdlong	local01, fp
2a86c     04 4E 85 F1 | 	sub	fp, #4
2a870     11 1E 06 F1 | 	add	local01, #17
2a874     0F 03 48 FC | 	wrbyte	#1, local01
2a878     01 FA 05 F6 | 	mov	result1, #1
2a87c     48 03 90 FD | 	jmp	#LR__4313
2a880                 | LR__4304
2a880     04 4E 05 F1 | 	add	fp, #4
2a884     A7 FA 01 FB | 	rdlong	result1, fp
2a888     1C FA 05 F1 | 	add	result1, #28
2a88c     FD FA 01 FB | 	rdlong	result1, result1
2a890     1C 4E 05 F1 | 	add	fp, #28
2a894     A7 20 02 FB | 	rdlong	local02, fp
2a898     10 FB 81 F1 | 	sub	result1, local02
2a89c     08 4E 05 F1 | 	add	fp, #8
2a8a0     A7 18 02 FB | 	rdlong	arg04, fp
2a8a4     28 4E 85 F1 | 	sub	fp, #40
2a8a8     0C FB 11 F2 | 	cmp	result1, arg04 wc
2a8ac     68 00 90 3D |  if_ae	jmp	#LR__4305
2a8b0     04 4E 05 F1 | 	add	fp, #4
2a8b4     A7 12 02 FB | 	rdlong	arg01, fp
2a8b8     28 12 06 F1 | 	add	arg01, #40
2a8bc     2C 4E 05 F1 | 	add	fp, #44
2a8c0     A7 14 02 FB | 	rdlong	arg02, fp
2a8c4     2C 4E 85 F1 | 	sub	fp, #44
2a8c8     A7 FA 01 FB | 	rdlong	result1, fp
2a8cc     1C FA 05 F1 | 	add	result1, #28
2a8d0     FD 22 02 FB | 	rdlong	local03, result1
2a8d4     1C 4E 05 F1 | 	add	fp, #28
2a8d8     A7 18 02 FB | 	rdlong	arg04, fp
2a8dc     20 4E 85 F1 | 	sub	fp, #32
2a8e0     0C 23 82 F1 | 	sub	local03, arg04
2a8e4     09 22 66 F0 | 	shl	local03, #9
2a8e8     11 15 02 F1 | 	add	arg02, local03
2a8ec     09 16 C6 F9 | 	decod	arg03, #9
2a8f0     44 41 BF FD | 	call	#__system____builtin_memmove
2a8f4     04 4E 05 F1 | 	add	fp, #4
2a8f8     A7 18 02 FB | 	rdlong	arg04, fp
2a8fc     0C FB 01 F6 | 	mov	result1, arg04
2a900     04 4E 85 F1 | 	sub	fp, #4
2a904     10 18 06 F1 | 	add	arg04, #16
2a908     0C 19 C2 FA | 	rdbyte	arg04, arg04
2a90c     7F 18 06 F5 | 	and	arg04, #127
2a910     10 FA 05 F1 | 	add	result1, #16
2a914     FD 18 42 FC | 	wrbyte	arg04, result1
2a918                 | LR__4305
2a918     28 4E 05 F1 | 	add	fp, #40
2a91c     A7 FA 01 FB | 	rdlong	result1, fp
2a920     09 FA 65 F0 | 	shl	result1, #9
2a924     04 4E 85 F1 | 	sub	fp, #4
2a928     A7 FA 61 FC | 	wrlong	result1, fp
2a92c     24 4E 85 F1 | 	sub	fp, #36
2a930                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
2a930                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
2a930                 | ' 				}
2a930                 | ' 
2a930                 | ' 
2a930                 | ' 				wcnt =  ((UINT) 512 )  * cc;
2a930                 | ' 				continue;
2a930     74 01 90 FD | 	jmp	#LR__4309
2a934                 | LR__4306
2a934     04 4E 05 F1 | 	add	fp, #4
2a938     A7 20 02 FB | 	rdlong	local02, fp
2a93c     1C 20 06 F1 | 	add	local02, #28
2a940     10 FB 01 FB | 	rdlong	result1, local02
2a944     1C 4E 05 F1 | 	add	fp, #28
2a948     A7 20 02 FB | 	rdlong	local02, fp
2a94c     20 4E 85 F1 | 	sub	fp, #32
2a950     10 FB 09 F2 | 	cmp	result1, local02 wz
2a954     90 00 90 AD |  if_e	jmp	#LR__4307
2a958     04 4E 05 F1 | 	add	fp, #4
2a95c     A7 FA 01 FB | 	rdlong	result1, fp
2a960     FD 22 02 F6 | 	mov	local03, result1
2a964     04 4E 85 F1 | 	sub	fp, #4
2a968     14 22 06 F1 | 	add	local03, #20
2a96c     11 23 02 FB | 	rdlong	local03, local03
2a970     0C FA 05 F1 | 	add	result1, #12
2a974     FD 24 02 FB | 	rdlong	local04, result1
2a978     12 27 02 F6 | 	mov	local05, local04
2a97c     13 23 12 F2 | 	cmp	local03, local05 wc
2a980     64 00 90 3D |  if_ae	jmp	#LR__4307
2a984     18 4E 05 F1 | 	add	fp, #24
2a988     A7 18 02 FB | 	rdlong	arg04, fp
2a98c     01 18 06 F1 | 	add	arg04, #1
2a990     0C 13 C2 FA | 	rdbyte	arg01, arg04
2a994     14 4E 85 F1 | 	sub	fp, #20
2a998     A7 28 02 FB | 	rdlong	local06, fp
2a99c     28 28 06 F1 | 	add	local06, #40
2a9a0     14 2B 02 F6 | 	mov	local07, local06
2a9a4     1C 4E 05 F1 | 	add	fp, #28
2a9a8     A7 2C 02 FB | 	rdlong	local08, fp
2a9ac     20 4E 85 F1 | 	sub	fp, #32
2a9b0     01 2E 06 F6 | 	mov	local09, #1
2a9b4     15 15 02 F6 | 	mov	arg02, local07
2a9b8     16 17 02 F6 | 	mov	arg03, local08
2a9bc     01 18 06 F6 | 	mov	arg04, #1
2a9c0     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
2a9c4     FD 30 0A F6 | 	mov	local10, result1 wz
2a9c8     1C 00 90 AD |  if_e	jmp	#LR__4307
2a9cc     04 4E 05 F1 | 	add	fp, #4
2a9d0     A7 30 02 FB | 	rdlong	local10, fp
2a9d4     04 4E 85 F1 | 	sub	fp, #4
2a9d8     11 30 06 F1 | 	add	local10, #17
2a9dc     18 03 48 FC | 	wrbyte	#1, local10
2a9e0                 | ' 				fp->fptr < fp->obj.objsize &&
2a9e0                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
2a9e0                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
2a9e0     01 FA 05 F6 | 	mov	result1, #1
2a9e4     E0 01 90 FD | 	jmp	#LR__4313
2a9e8                 | LR__4307
2a9e8     04 4E 05 F1 | 	add	fp, #4
2a9ec     A7 18 02 FB | 	rdlong	arg04, fp
2a9f0     1C 4E 05 F1 | 	add	fp, #28
2a9f4     A7 FA 01 FB | 	rdlong	result1, fp
2a9f8     20 4E 85 F1 | 	sub	fp, #32
2a9fc     1C 18 06 F1 | 	add	arg04, #28
2aa00     0C FB 61 FC | 	wrlong	result1, arg04
2aa04                 | LR__4308
2aa04     04 4E 05 F1 | 	add	fp, #4
2aa08     A7 FA 01 FB | 	rdlong	result1, fp
2aa0c     14 FA 05 F1 | 	add	result1, #20
2aa10     FD FA 01 FB | 	rdlong	result1, result1
2aa14     FF FB 05 F5 | 	and	result1, #511
2aa18     09 32 C6 F9 | 	decod	local11, #9
2aa1c     FD 32 82 F1 | 	sub	local11, result1
2aa20     20 4E 05 F1 | 	add	fp, #32
2aa24     A7 32 62 FC | 	wrlong	local11, fp
2aa28     18 4E 85 F1 | 	sub	fp, #24
2aa2c     A7 FA 01 FB | 	rdlong	result1, fp
2aa30     0C 4E 85 F1 | 	sub	fp, #12
2aa34     FD 32 1A F2 | 	cmp	local11, result1 wcz
2aa38     0C 4E 05 11 |  if_a	add	fp, #12
2aa3c     A7 32 02 1B |  if_a	rdlong	local11, fp
2aa40     18 4E 05 11 |  if_a	add	fp, #24
2aa44     A7 32 62 1C |  if_a	wrlong	local11, fp
2aa48     24 4E 85 11 |  if_a	sub	fp, #36
2aa4c     04 4E 05 F1 | 	add	fp, #4
2aa50     A7 32 02 FB | 	rdlong	local11, fp
2aa54     19 13 02 F6 | 	mov	arg01, local11
2aa58     28 12 06 F1 | 	add	arg01, #40
2aa5c     14 32 06 F1 | 	add	local11, #20
2aa60     19 33 02 FB | 	rdlong	local11, local11
2aa64     FF 33 06 F5 | 	and	local11, #511
2aa68     19 13 02 F1 | 	add	arg01, local11
2aa6c     2C 4E 05 F1 | 	add	fp, #44
2aa70     A7 14 02 FB | 	rdlong	arg02, fp
2aa74     0C 4E 85 F1 | 	sub	fp, #12
2aa78     A7 16 02 FB | 	rdlong	arg03, fp
2aa7c     24 4E 85 F1 | 	sub	fp, #36
2aa80     B4 3F BF FD | 	call	#__system____builtin_memmove
2aa84     04 4E 05 F1 | 	add	fp, #4
2aa88     A7 FA 01 FB | 	rdlong	result1, fp
2aa8c     FD 32 02 F6 | 	mov	local11, result1
2aa90     04 4E 85 F1 | 	sub	fp, #4
2aa94     10 FA 05 F1 | 	add	result1, #16
2aa98     FD FA C1 FA | 	rdbyte	result1, result1
2aa9c     80 FA 45 F5 | 	or	result1, #128
2aaa0     10 32 06 F1 | 	add	local11, #16
2aaa4     19 FB 41 FC | 	wrbyte	result1, local11
2aaa8                 | LR__4309
2aaa8     0C 4E 05 F1 | 	add	fp, #12
2aaac     A7 32 02 FB | 	rdlong	local11, fp
2aab0     18 4E 05 F1 | 	add	fp, #24
2aab4     A7 FA 01 FB | 	rdlong	result1, fp
2aab8     FD 32 82 F1 | 	sub	local11, result1
2aabc     18 4E 85 F1 | 	sub	fp, #24
2aac0     A7 32 62 FC | 	wrlong	local11, fp
2aac4     04 4E 05 F1 | 	add	fp, #4
2aac8     A7 34 02 FB | 	rdlong	local12, fp
2aacc     1A 33 02 FB | 	rdlong	local11, local12
2aad0     14 4E 05 F1 | 	add	fp, #20
2aad4     A7 36 02 FB | 	rdlong	local13, fp
2aad8     1B 33 02 F1 | 	add	local11, local13
2aadc     1A 33 62 FC | 	wrlong	local11, local12
2aae0     0C 4E 05 F1 | 	add	fp, #12
2aae4     A7 32 02 FB | 	rdlong	local11, fp
2aae8     0C 4E 85 F1 | 	sub	fp, #12
2aaec     A7 38 02 FB | 	rdlong	local14, fp
2aaf0     1C 33 02 F1 | 	add	local11, local14
2aaf4     0C 4E 05 F1 | 	add	fp, #12
2aaf8     A7 32 62 FC | 	wrlong	local11, fp
2aafc     2C 4E 85 F1 | 	sub	fp, #44
2ab00     A7 3A 02 FB | 	rdlong	local15, fp
2ab04     1D 33 02 F6 | 	mov	local11, local15
2ab08     14 3A 06 F1 | 	add	local15, #20
2ab0c     1D 3B 02 FB | 	rdlong	local15, local15
2ab10     20 4E 05 F1 | 	add	fp, #32
2ab14     A7 3C 02 FB | 	rdlong	local16, fp
2ab18     1E 3B 02 F1 | 	add	local15, local16
2ab1c     14 32 06 F1 | 	add	local11, #20
2ab20     19 3B 62 FC | 	wrlong	local15, local11
2ab24     20 4E 85 F1 | 	sub	fp, #32
2ab28     A7 3E 02 FB | 	rdlong	local17, fp
2ab2c     1F 33 02 F6 | 	mov	local11, local17
2ab30     1F 41 02 F6 | 	mov	local18, local17
2ab34     04 4E 85 F1 | 	sub	fp, #4
2ab38     14 3E 06 F1 | 	add	local17, #20
2ab3c     1F 43 02 FB | 	rdlong	local19, local17
2ab40     0C 40 06 F1 | 	add	local18, #12
2ab44     20 45 02 FB | 	rdlong	local20, local18
2ab48     22 43 1A F2 | 	cmp	local19, local20 wcz
2ab4c     24 00 90 ED |  if_be	jmp	#LR__4310
2ab50     04 4E 05 F1 | 	add	fp, #4
2ab54     A7 26 02 FB | 	rdlong	local05, fp
2ab58     04 4E 85 F1 | 	sub	fp, #4
2ab5c     13 23 02 F6 | 	mov	local03, local05
2ab60     14 22 06 F1 | 	add	local03, #20
2ab64     11 25 02 FB | 	rdlong	local04, local03
2ab68     14 22 86 F1 | 	sub	local03, #20
2ab6c     12 47 02 F6 | 	mov	local21, local04
2ab70     20 00 90 FD | 	jmp	#LR__4311
2ab74                 | LR__4310
2ab74     04 4E 05 F1 | 	add	fp, #4
2ab78     A7 2A 02 FB | 	rdlong	local07, fp
2ab7c     04 4E 85 F1 | 	sub	fp, #4
2ab80     15 31 02 F6 | 	mov	local10, local07
2ab84     0C 30 06 F1 | 	add	local10, #12
2ab88     18 2D 02 FB | 	rdlong	local08, local10
2ab8c     0C 30 86 F1 | 	sub	local10, #12
2ab90     16 47 02 F6 | 	mov	local21, local08
2ab94                 | LR__4311
2ab94     0C 32 06 F1 | 	add	local11, #12
2ab98     19 47 62 FC | 	wrlong	local21, local11
2ab9c     5C F9 9F FD | 	jmp	#LR__4293
2aba0                 | LR__4312
2aba0     04 4E 05 F1 | 	add	fp, #4
2aba4     A7 34 02 FB | 	rdlong	local12, fp
2aba8     1A 1F 02 F6 | 	mov	local01, local12
2abac     04 4E 85 F1 | 	sub	fp, #4
2abb0     10 34 06 F1 | 	add	local12, #16
2abb4     1A 33 C2 FA | 	rdbyte	local11, local12
2abb8     40 32 46 F5 | 	or	local11, #64
2abbc     10 1E 06 F1 | 	add	local01, #16
2abc0     0F 33 42 FC | 	wrbyte	local11, local01
2abc4                 | ' 
2abc4                 | ' 
2abc4                 | ' 
2abc4                 | ' 
2abc4                 | ' 
2abc4                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
2abc4                 | ' 		fp->flag |=  0x80 ;
2abc4                 | ' 
2abc4                 | ' 	}
2abc4                 | ' 
2abc4                 | ' 	fp->flag |=  0x40 ;
2abc4                 | ' 
2abc4                 | ' 	return FR_OK ;
2abc4     00 FA 05 F6 | 	mov	result1, #0
2abc8                 | LR__4313
2abc8     A7 F0 03 F6 | 	mov	ptra, fp
2abcc     B2 00 A0 FD | 	call	#popregs_
2abd0                 | _fatfs_cc_f_write_ret
2abd0     2D 00 64 FD | 	ret
2abd4                 | 
2abd4                 | _fatfs_cc_f_sync
2abd4     00 4A 05 F6 | 	mov	COUNT_, #0
2abd8     A8 00 A0 FD | 	call	#pushregs_
2abdc     18 F0 07 F1 | 	add	ptra, #24
2abe0     04 4E 05 F1 | 	add	fp, #4
2abe4     A7 12 62 FC | 	wrlong	arg01, fp
2abe8     08 4E 05 F1 | 	add	fp, #8
2abec     A7 14 02 F6 | 	mov	arg02, fp
2abf0     0C 4E 85 F1 | 	sub	fp, #12
2abf4     D0 E8 BF FD | 	call	#_fatfs_cc_validate
2abf8     08 4E 05 F1 | 	add	fp, #8
2abfc     A7 FA 61 FC | 	wrlong	result1, fp
2ac00     08 4E 85 F1 | 	sub	fp, #8
2ac04     00 FA 0D F2 | 	cmp	result1, #0 wz
2ac08     C0 01 90 5D |  if_ne	jmp	#LR__4323
2ac0c     04 4E 05 F1 | 	add	fp, #4
2ac10     A7 18 02 FB | 	rdlong	arg04, fp
2ac14     04 4E 85 F1 | 	sub	fp, #4
2ac18     10 18 06 F1 | 	add	arg04, #16
2ac1c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2ac20     40 18 CE F7 | 	test	arg04, #64 wz
2ac24     A4 01 90 AD |  if_e	jmp	#LR__4322
2ac28     04 4E 05 F1 | 	add	fp, #4
2ac2c     A7 18 02 FB | 	rdlong	arg04, fp
2ac30     04 4E 85 F1 | 	sub	fp, #4
2ac34     10 18 06 F1 | 	add	arg04, #16
2ac38     0C 19 C2 FA | 	rdbyte	arg04, arg04
2ac3c     80 18 CE F7 | 	test	arg04, #128 wz
2ac40     64 00 90 AD |  if_e	jmp	#LR__4320
2ac44     0C 4E 05 F1 | 	add	fp, #12
2ac48     A7 18 02 FB | 	rdlong	arg04, fp
2ac4c     01 18 06 F1 | 	add	arg04, #1
2ac50     0C 13 C2 FA | 	rdbyte	arg01, arg04
2ac54     08 4E 85 F1 | 	sub	fp, #8
2ac58     A7 18 02 FB | 	rdlong	arg04, fp
2ac5c     0C 15 02 F6 | 	mov	arg02, arg04
2ac60     28 14 06 F1 | 	add	arg02, #40
2ac64     04 4E 85 F1 | 	sub	fp, #4
2ac68     1C 18 06 F1 | 	add	arg04, #28
2ac6c     0C 17 02 FB | 	rdlong	arg03, arg04
2ac70     01 18 06 F6 | 	mov	arg04, #1
2ac74     0C AE BF FD | 	call	#_fatfs_cc_disk_write
2ac78     00 FA 0D F2 | 	cmp	result1, #0 wz
2ac7c     01 FA 05 56 |  if_ne	mov	result1, #1
2ac80     54 01 90 5D |  if_ne	jmp	#LR__4324
2ac84     04 4E 05 F1 | 	add	fp, #4
2ac88     A7 18 02 FB | 	rdlong	arg04, fp
2ac8c     0C 17 02 F6 | 	mov	arg03, arg04
2ac90     04 4E 85 F1 | 	sub	fp, #4
2ac94     10 18 06 F1 | 	add	arg04, #16
2ac98     0C 19 C2 FA | 	rdbyte	arg04, arg04
2ac9c     7F 18 06 F5 | 	and	arg04, #127
2aca0     10 16 06 F1 | 	add	arg03, #16
2aca4     0B 19 42 FC | 	wrbyte	arg04, arg03
2aca8                 | LR__4320
2aca8     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
2acac     10 4E 05 F1 | 	add	fp, #16
2acb0     A7 FA 61 FC | 	wrlong	result1, fp
2acb4     04 4E 85 F1 | 	sub	fp, #4
2acb8     A7 12 02 FB | 	rdlong	arg01, fp
2acbc     08 4E 85 F1 | 	sub	fp, #8
2acc0     A7 18 02 FB | 	rdlong	arg04, fp
2acc4     04 4E 85 F1 | 	sub	fp, #4
2acc8     20 18 06 F1 | 	add	arg04, #32
2accc     0C 15 02 FB | 	rdlong	arg02, arg04
2acd0     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
2acd4     08 4E 05 F1 | 	add	fp, #8
2acd8     A7 FA 61 FC | 	wrlong	result1, fp
2acdc     08 4E 85 F1 | 	sub	fp, #8
2ace0     00 FA 0D F2 | 	cmp	result1, #0 wz
2ace4     E4 00 90 5D |  if_ne	jmp	#LR__4321
2ace8     04 4E 05 F1 | 	add	fp, #4
2acec     A7 18 02 FB | 	rdlong	arg04, fp
2acf0     24 18 06 F1 | 	add	arg04, #36
2acf4     0C 19 02 FB | 	rdlong	arg04, arg04
2acf8     10 4E 05 F1 | 	add	fp, #16
2acfc     A7 18 62 FC | 	wrlong	arg04, fp
2ad00     0C 17 02 F6 | 	mov	arg03, arg04
2ad04     0B 16 06 F1 | 	add	arg03, #11
2ad08     0B 17 C2 FA | 	rdbyte	arg03, arg03
2ad0c     20 16 46 F5 | 	or	arg03, #32
2ad10     0B 18 06 F1 | 	add	arg04, #11
2ad14     0C 17 42 FC | 	wrbyte	arg03, arg04
2ad18     10 4E 85 F1 | 	sub	fp, #16
2ad1c     A7 18 02 FB | 	rdlong	arg04, fp
2ad20     0C 13 02 FB | 	rdlong	arg01, arg04
2ad24     10 4E 05 F1 | 	add	fp, #16
2ad28     A7 14 02 FB | 	rdlong	arg02, fp
2ad2c     14 4E 85 F1 | 	sub	fp, #20
2ad30     08 18 06 F1 | 	add	arg04, #8
2ad34     0C 17 02 FB | 	rdlong	arg03, arg04
2ad38     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
2ad3c     14 4E 05 F1 | 	add	fp, #20
2ad40     A7 12 02 FB | 	rdlong	arg01, fp
2ad44     1C 12 06 F1 | 	add	arg01, #28
2ad48     10 4E 85 F1 | 	sub	fp, #16
2ad4c     A7 18 02 FB | 	rdlong	arg04, fp
2ad50     0C 18 06 F1 | 	add	arg04, #12
2ad54     0C 15 02 FB | 	rdlong	arg02, arg04
2ad58     09 15 62 FC | 	wrlong	arg02, arg01
2ad5c     10 4E 05 F1 | 	add	fp, #16
2ad60     A7 12 02 FB | 	rdlong	arg01, fp
2ad64     16 12 06 F1 | 	add	arg01, #22
2ad68     04 4E 85 F1 | 	sub	fp, #4
2ad6c     A7 14 02 FB | 	rdlong	arg02, fp
2ad70     09 15 62 FC | 	wrlong	arg02, arg01
2ad74     04 4E 05 F1 | 	add	fp, #4
2ad78     A7 12 02 FB | 	rdlong	arg01, fp
2ad7c     12 12 06 F1 | 	add	arg01, #18
2ad80     09 01 58 FC | 	wrword	#0, arg01
2ad84     08 4E 85 F1 | 	sub	fp, #8
2ad88     A7 18 02 FB | 	rdlong	arg04, fp
2ad8c     03 18 06 F1 | 	add	arg04, #3
2ad90     0C 03 48 FC | 	wrbyte	#1, arg04
2ad94     A7 12 02 FB | 	rdlong	arg01, fp
2ad98     0C 4E 85 F1 | 	sub	fp, #12
2ad9c     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
2ada0     08 4E 05 F1 | 	add	fp, #8
2ada4     A7 FA 61 FC | 	wrlong	result1, fp
2ada8     04 4E 85 F1 | 	sub	fp, #4
2adac     A7 18 02 FB | 	rdlong	arg04, fp
2adb0     0C 17 02 F6 | 	mov	arg03, arg04
2adb4     04 4E 85 F1 | 	sub	fp, #4
2adb8     10 18 06 F1 | 	add	arg04, #16
2adbc     0C 19 C2 FA | 	rdbyte	arg04, arg04
2adc0     BF 18 06 F5 | 	and	arg04, #191
2adc4     10 16 06 F1 | 	add	arg03, #16
2adc8     0B 19 42 FC | 	wrbyte	arg04, arg03
2adcc                 | LR__4321
2adcc                 | LR__4322
2adcc                 | LR__4323
2adcc                 | ' 					dir = fp->dir_ptr;
2adcc                 | ' 					dir[ 11 ] |=  0x20 ;
2adcc                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
2adcc                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
2adcc                 | ' 					st_dword(dir +  22 , tm);
2adcc                 | ' 					st_word(dir +  18 , 0);
2adcc                 | ' 					fs->wflag = 1;
2adcc                 | ' 					res = sync_fs(fs);
2adcc                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
2adcc                 | ' 				}
2adcc                 | ' 			}
2adcc                 | ' 		}
2adcc                 | ' 	}
2adcc                 | ' 
2adcc                 | ' 	return res ;
2adcc     08 4E 05 F1 | 	add	fp, #8
2add0     A7 FA 01 FB | 	rdlong	result1, fp
2add4     08 4E 85 F1 | 	sub	fp, #8
2add8                 | LR__4324
2add8     A7 F0 03 F6 | 	mov	ptra, fp
2addc     B2 00 A0 FD | 	call	#popregs_
2ade0                 | _fatfs_cc_f_sync_ret
2ade0     2D 00 64 FD | 	ret
2ade4                 | 
2ade4                 | _fatfs_cc_f_close
2ade4     01 4A 05 F6 | 	mov	COUNT_, #1
2ade8     A8 00 A0 FD | 	call	#pushregs_
2adec     10 F0 07 F1 | 	add	ptra, #16
2adf0     04 4E 05 F1 | 	add	fp, #4
2adf4     A7 12 62 FC | 	wrlong	arg01, fp
2adf8     04 4E 85 F1 | 	sub	fp, #4
2adfc     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
2ae00     08 4E 05 F1 | 	add	fp, #8
2ae04     A7 FA 61 FC | 	wrlong	result1, fp
2ae08     08 4E 85 F1 | 	sub	fp, #8
2ae0c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ae10     38 00 90 5D |  if_ne	jmp	#LR__4330
2ae14     04 4E 05 F1 | 	add	fp, #4
2ae18     A7 12 02 FB | 	rdlong	arg01, fp
2ae1c     08 4E 05 F1 | 	add	fp, #8
2ae20     A7 14 02 F6 | 	mov	arg02, fp
2ae24     0C 4E 85 F1 | 	sub	fp, #12
2ae28     9C E6 BF FD | 	call	#_fatfs_cc_validate
2ae2c     08 4E 05 F1 | 	add	fp, #8
2ae30     A7 FA 61 FC | 	wrlong	result1, fp
2ae34     08 4E 85 F1 | 	sub	fp, #8
2ae38     00 FA 0D F2 | 	cmp	result1, #0 wz
2ae3c     04 4E 05 A1 |  if_e	add	fp, #4
2ae40     A7 1E 02 AB |  if_e	rdlong	local01, fp
2ae44     04 4E 85 A1 |  if_e	sub	fp, #4
2ae48     0F 01 68 AC |  if_e	wrlong	#0, local01
2ae4c                 | LR__4330
2ae4c                 | ' 
2ae4c                 | ' 
2ae4c                 | ' 
2ae4c                 | ' 
2ae4c                 | ' 			fp->obj.fs = 0;
2ae4c                 | ' #line 4192 "ff.c"
2ae4c                 | ' 		}
2ae4c                 | ' 	}
2ae4c                 | ' 	return res;
2ae4c     08 4E 05 F1 | 	add	fp, #8
2ae50     A7 FA 01 FB | 	rdlong	result1, fp
2ae54     08 4E 85 F1 | 	sub	fp, #8
2ae58     A7 F0 03 F6 | 	mov	ptra, fp
2ae5c     B2 00 A0 FD | 	call	#popregs_
2ae60                 | _fatfs_cc_f_close_ret
2ae60     2D 00 64 FD | 	ret
2ae64                 | 
2ae64                 | _fatfs_cc_f_lseek
2ae64     00 4A 05 F6 | 	mov	COUNT_, #0
2ae68     A8 00 A0 FD | 	call	#pushregs_
2ae6c     24 F0 07 F1 | 	add	ptra, #36
2ae70     04 4E 05 F1 | 	add	fp, #4
2ae74     A7 12 62 FC | 	wrlong	arg01, fp
2ae78     04 4E 05 F1 | 	add	fp, #4
2ae7c     A7 14 62 FC | 	wrlong	arg02, fp
2ae80     04 4E 85 F1 | 	sub	fp, #4
2ae84     A7 12 02 FB | 	rdlong	arg01, fp
2ae88     0C 4E 05 F1 | 	add	fp, #12
2ae8c     A7 14 02 F6 | 	mov	arg02, fp
2ae90     10 4E 85 F1 | 	sub	fp, #16
2ae94     30 E6 BF FD | 	call	#_fatfs_cc_validate
2ae98     0C 4E 05 F1 | 	add	fp, #12
2ae9c     A7 FA 61 FC | 	wrlong	result1, fp
2aea0     0C 4E 85 F1 | 	sub	fp, #12
2aea4     00 FA 0D F2 | 	cmp	result1, #0 wz
2aea8     1C 00 90 5D |  if_ne	jmp	#LR__4340
2aeac     04 4E 05 F1 | 	add	fp, #4
2aeb0     A7 18 02 FB | 	rdlong	arg04, fp
2aeb4     11 18 06 F1 | 	add	arg04, #17
2aeb8     0C 19 C2 FA | 	rdbyte	arg04, arg04
2aebc     08 4E 05 F1 | 	add	fp, #8
2aec0     A7 18 62 FC | 	wrlong	arg04, fp
2aec4     0C 4E 85 F1 | 	sub	fp, #12
2aec8                 | LR__4340
2aec8     0C 4E 05 F1 | 	add	fp, #12
2aecc     A7 18 0A FB | 	rdlong	arg04, fp wz
2aed0     0C 4E 85 F1 | 	sub	fp, #12
2aed4     0C 4E 05 51 |  if_ne	add	fp, #12
2aed8     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2aedc     0C 4E 85 51 |  if_ne	sub	fp, #12
2aee0     40 06 90 5D |  if_ne	jmp	#LR__4363
2aee4     04 4E 05 F1 | 	add	fp, #4
2aee8     A7 18 02 FB | 	rdlong	arg04, fp
2aeec     04 4E 05 F1 | 	add	fp, #4
2aef0     A7 16 02 FB | 	rdlong	arg03, fp
2aef4     08 4E 85 F1 | 	sub	fp, #8
2aef8     0C 18 06 F1 | 	add	arg04, #12
2aefc     0C 19 02 FB | 	rdlong	arg04, arg04
2af00     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2af04     3C 00 90 ED |  if_be	jmp	#LR__4341
2af08     04 4E 05 F1 | 	add	fp, #4
2af0c     A7 16 02 FB | 	rdlong	arg03, fp
2af10     04 4E 85 F1 | 	sub	fp, #4
2af14     10 16 06 F1 | 	add	arg03, #16
2af18     0B 17 C2 FA | 	rdbyte	arg03, arg03
2af1c     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
2af20     02 16 CE F7 | 	test	arg03, #2 wz
2af24     1C 00 90 5D |  if_ne	jmp	#LR__4341
2af28     04 4E 05 F1 | 	add	fp, #4
2af2c     A7 16 02 FB | 	rdlong	arg03, fp
2af30     0C 16 06 F1 | 	add	arg03, #12
2af34     0B 17 02 FB | 	rdlong	arg03, arg03
2af38     04 4E 05 F1 | 	add	fp, #4
2af3c     A7 16 62 FC | 	wrlong	arg03, fp
2af40     08 4E 85 F1 | 	sub	fp, #8
2af44                 | LR__4341
2af44     04 4E 05 F1 | 	add	fp, #4
2af48     A7 16 02 FB | 	rdlong	arg03, fp
2af4c     14 16 06 F1 | 	add	arg03, #20
2af50     0B 17 02 FB | 	rdlong	arg03, arg03
2af54     1C 4E 05 F1 | 	add	fp, #28
2af58     A7 16 62 FC | 	wrlong	arg03, fp
2af5c     1C 4E 85 F1 | 	sub	fp, #28
2af60     A7 16 02 FB | 	rdlong	arg03, fp
2af64     18 4E 05 F1 | 	add	fp, #24
2af68     A7 00 68 FC | 	wrlong	#0, fp
2af6c     14 16 06 F1 | 	add	arg03, #20
2af70     0B 01 68 FC | 	wrlong	#0, arg03
2af74     14 4E 85 F1 | 	sub	fp, #20
2af78     A7 16 02 FB | 	rdlong	arg03, fp
2af7c     08 4E 85 F1 | 	sub	fp, #8
2af80     01 16 16 F2 | 	cmp	arg03, #1 wc
2af84     E4 03 90 CD |  if_b	jmp	#LR__4357
2af88     10 4E 05 F1 | 	add	fp, #16
2af8c     A7 16 02 FB | 	rdlong	arg03, fp
2af90     0A 16 06 F1 | 	add	arg03, #10
2af94     0B 19 E2 FA | 	rdword	arg04, arg03
2af98     09 18 66 F0 | 	shl	arg04, #9
2af9c     08 4E 05 F1 | 	add	fp, #8
2afa0     A7 18 62 FC | 	wrlong	arg04, fp
2afa4     08 4E 05 F1 | 	add	fp, #8
2afa8     A7 18 02 FB | 	rdlong	arg04, fp
2afac     20 4E 85 F1 | 	sub	fp, #32
2afb0     01 18 16 F2 | 	cmp	arg04, #1 wc
2afb4     AC 00 90 CD |  if_b	jmp	#LR__4342
2afb8     08 4E 05 F1 | 	add	fp, #8
2afbc     A7 18 02 FB | 	rdlong	arg04, fp
2afc0     01 18 86 F1 | 	sub	arg04, #1
2afc4     10 4E 05 F1 | 	add	fp, #16
2afc8     A7 16 02 FB | 	rdlong	arg03, fp
2afcc     0B 19 12 FD | 	qdiv	arg04, arg03
2afd0     08 4E 05 F1 | 	add	fp, #8
2afd4     A7 FA 01 FB | 	rdlong	result1, fp
2afd8     01 FA 85 F1 | 	sub	result1, #1
2afdc     18 18 62 FD | 	getqx	arg04
2afe0     0B FB 11 FD | 	qdiv	result1, arg03
2afe4     20 4E 85 F1 | 	sub	fp, #32
2afe8     18 16 62 FD | 	getqx	arg03
2afec     0B 19 12 F2 | 	cmp	arg04, arg03 wc
2aff0     70 00 90 CD |  if_b	jmp	#LR__4342
2aff4     04 4E 05 F1 | 	add	fp, #4
2aff8     A7 16 02 FB | 	rdlong	arg03, fp
2affc     1C 4E 05 F1 | 	add	fp, #28
2b000     A7 FA 01 FB | 	rdlong	result1, fp
2b004     01 FA 85 F1 | 	sub	result1, #1
2b008     08 4E 85 F1 | 	sub	fp, #8
2b00c     A7 18 02 FB | 	rdlong	arg04, fp
2b010     01 18 86 F1 | 	sub	arg04, #1
2b014     0C FB 21 F5 | 	andn	result1, arg04
2b018     14 16 06 F1 | 	add	arg03, #20
2b01c     0B FB 61 FC | 	wrlong	result1, arg03
2b020     10 4E 85 F1 | 	sub	fp, #16
2b024     A7 16 02 FB | 	rdlong	arg03, fp
2b028     04 4E 85 F1 | 	sub	fp, #4
2b02c     A7 18 02 FB | 	rdlong	arg04, fp
2b030     14 18 06 F1 | 	add	arg04, #20
2b034     0C 19 02 FB | 	rdlong	arg04, arg04
2b038     0C 17 82 F1 | 	sub	arg03, arg04
2b03c     04 4E 05 F1 | 	add	fp, #4
2b040     A7 16 62 FC | 	wrlong	arg03, fp
2b044     04 4E 85 F1 | 	sub	fp, #4
2b048     A7 16 02 FB | 	rdlong	arg03, fp
2b04c     18 16 06 F1 | 	add	arg03, #24
2b050     0B 17 02 FB | 	rdlong	arg03, arg03
2b054     10 4E 05 F1 | 	add	fp, #16
2b058     A7 16 62 FC | 	wrlong	arg03, fp
2b05c     14 4E 85 F1 | 	sub	fp, #20
2b060     D0 00 90 FD | 	jmp	#LR__4346
2b064                 | LR__4342
2b064     04 4E 05 F1 | 	add	fp, #4
2b068     A7 16 02 FB | 	rdlong	arg03, fp
2b06c     08 16 06 F1 | 	add	arg03, #8
2b070     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2b074     10 4E 05 F1 | 	add	fp, #16
2b078     A7 16 62 FC | 	wrlong	arg03, fp
2b07c     14 4E 85 F1 | 	sub	fp, #20
2b080     94 00 90 5D |  if_ne	jmp	#LR__4345
2b084     04 4E 05 F1 | 	add	fp, #4
2b088     A7 12 02 FB | 	rdlong	arg01, fp
2b08c     04 4E 85 F1 | 	sub	fp, #4
2b090     00 14 06 F6 | 	mov	arg02, #0
2b094     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
2b098     14 4E 05 F1 | 	add	fp, #20
2b09c     A7 FA 61 FC | 	wrlong	result1, fp
2b0a0     14 4E 85 F1 | 	sub	fp, #20
2b0a4     01 FA 0D F2 | 	cmp	result1, #1 wz
2b0a8     1C 00 90 5D |  if_ne	jmp	#LR__4343
2b0ac     04 4E 05 F1 | 	add	fp, #4
2b0b0     A7 16 02 FB | 	rdlong	arg03, fp
2b0b4     04 4E 85 F1 | 	sub	fp, #4
2b0b8     11 16 06 F1 | 	add	arg03, #17
2b0bc     0B 05 48 FC | 	wrbyte	#2, arg03
2b0c0     02 FA 05 F6 | 	mov	result1, #2
2b0c4     5C 04 90 FD | 	jmp	#LR__4363
2b0c8                 | LR__4343
2b0c8     14 4E 05 F1 | 	add	fp, #20
2b0cc     A7 FA 01 FB | 	rdlong	result1, fp
2b0d0     14 4E 85 F1 | 	sub	fp, #20
2b0d4     FF FF 7F FF 
2b0d8     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2b0dc     1C 00 90 5D |  if_ne	jmp	#LR__4344
2b0e0     04 4E 05 F1 | 	add	fp, #4
2b0e4     A7 16 02 FB | 	rdlong	arg03, fp
2b0e8     04 4E 85 F1 | 	sub	fp, #4
2b0ec     11 16 06 F1 | 	add	arg03, #17
2b0f0     0B 03 48 FC | 	wrbyte	#1, arg03
2b0f4     01 FA 05 F6 | 	mov	result1, #1
2b0f8     28 04 90 FD | 	jmp	#LR__4363
2b0fc                 | LR__4344
2b0fc     04 4E 05 F1 | 	add	fp, #4
2b100     A7 16 02 FB | 	rdlong	arg03, fp
2b104     10 4E 05 F1 | 	add	fp, #16
2b108     A7 18 02 FB | 	rdlong	arg04, fp
2b10c     14 4E 85 F1 | 	sub	fp, #20
2b110     08 16 06 F1 | 	add	arg03, #8
2b114     0B 19 62 FC | 	wrlong	arg04, arg03
2b118                 | LR__4345
2b118     04 4E 05 F1 | 	add	fp, #4
2b11c     A7 16 02 FB | 	rdlong	arg03, fp
2b120     10 4E 05 F1 | 	add	fp, #16
2b124     A7 18 02 FB | 	rdlong	arg04, fp
2b128     14 4E 85 F1 | 	sub	fp, #20
2b12c     18 16 06 F1 | 	add	arg03, #24
2b130     0B 19 62 FC | 	wrlong	arg04, arg03
2b134                 | LR__4346
2b134     14 4E 05 F1 | 	add	fp, #20
2b138     A7 16 0A FB | 	rdlong	arg03, fp wz
2b13c     14 4E 85 F1 | 	sub	fp, #20
2b140     28 02 90 AD |  if_e	jmp	#LR__4356
2b144                 | ' 				while (ofs > bcs) {
2b144                 | LR__4347
2b144     08 4E 05 F1 | 	add	fp, #8
2b148     A7 18 02 FB | 	rdlong	arg04, fp
2b14c     10 4E 05 F1 | 	add	fp, #16
2b150     A7 16 02 FB | 	rdlong	arg03, fp
2b154     18 4E 85 F1 | 	sub	fp, #24
2b158     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
2b15c     68 01 90 ED |  if_be	jmp	#LR__4353
2b160     08 4E 05 F1 | 	add	fp, #8
2b164     A7 18 02 FB | 	rdlong	arg04, fp
2b168     10 4E 05 F1 | 	add	fp, #16
2b16c     A7 16 02 FB | 	rdlong	arg03, fp
2b170     0B 19 82 F1 | 	sub	arg04, arg03
2b174     10 4E 85 F1 | 	sub	fp, #16
2b178     A7 18 62 FC | 	wrlong	arg04, fp
2b17c     04 4E 85 F1 | 	sub	fp, #4
2b180     A7 18 02 FB | 	rdlong	arg04, fp
2b184     0C FB 01 F6 | 	mov	result1, arg04
2b188     14 18 06 F1 | 	add	arg04, #20
2b18c     0C 19 02 FB | 	rdlong	arg04, arg04
2b190     14 4E 05 F1 | 	add	fp, #20
2b194     A7 16 02 FB | 	rdlong	arg03, fp
2b198     0B 19 02 F1 | 	add	arg04, arg03
2b19c     14 FA 05 F1 | 	add	result1, #20
2b1a0     FD 18 62 FC | 	wrlong	arg04, result1
2b1a4     14 4E 85 F1 | 	sub	fp, #20
2b1a8     A7 16 02 FB | 	rdlong	arg03, fp
2b1ac     04 4E 85 F1 | 	sub	fp, #4
2b1b0     10 16 06 F1 | 	add	arg03, #16
2b1b4     0B 17 C2 FA | 	rdbyte	arg03, arg03
2b1b8     02 16 CE F7 | 	test	arg03, #2 wz
2b1bc     3C 00 90 AD |  if_e	jmp	#LR__4348
2b1c0     04 4E 05 F1 | 	add	fp, #4
2b1c4     A7 12 02 FB | 	rdlong	arg01, fp
2b1c8     10 4E 05 F1 | 	add	fp, #16
2b1cc     A7 14 02 FB | 	rdlong	arg02, fp
2b1d0     14 4E 85 F1 | 	sub	fp, #20
2b1d4     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
2b1d8     14 4E 05 F1 | 	add	fp, #20
2b1dc     A7 FA 61 FC | 	wrlong	result1, fp
2b1e0     00 FA 4D F2 | 	cmps	result1, #0 wz
2b1e4     14 4E 85 F1 | 	sub	fp, #20
2b1e8     08 4E 05 A1 |  if_e	add	fp, #8
2b1ec     A7 00 68 AC |  if_e	wrlong	#0, fp
2b1f0     08 4E 85 A1 |  if_e	sub	fp, #8
2b1f4                 | ' 							ofs = 0; break;
2b1f4     D0 00 90 AD |  if_e	jmp	#LR__4353
2b1f8     24 00 90 FD | 	jmp	#LR__4349
2b1fc                 | LR__4348
2b1fc     04 4E 05 F1 | 	add	fp, #4
2b200     A7 12 02 FB | 	rdlong	arg01, fp
2b204     10 4E 05 F1 | 	add	fp, #16
2b208     A7 14 02 FB | 	rdlong	arg02, fp
2b20c     14 4E 85 F1 | 	sub	fp, #20
2b210     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
2b214     14 4E 05 F1 | 	add	fp, #20
2b218     A7 FA 61 FC | 	wrlong	result1, fp
2b21c     14 4E 85 F1 | 	sub	fp, #20
2b220                 | LR__4349
2b220     14 4E 05 F1 | 	add	fp, #20
2b224     A7 16 02 FB | 	rdlong	arg03, fp
2b228     14 4E 85 F1 | 	sub	fp, #20
2b22c     FF FF 7F FF 
2b230     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2b234     1C 00 90 5D |  if_ne	jmp	#LR__4350
2b238     04 4E 05 F1 | 	add	fp, #4
2b23c     A7 16 02 FB | 	rdlong	arg03, fp
2b240     04 4E 85 F1 | 	sub	fp, #4
2b244     11 16 06 F1 | 	add	arg03, #17
2b248     0B 03 48 FC | 	wrbyte	#1, arg03
2b24c     01 FA 05 F6 | 	mov	result1, #1
2b250     D0 02 90 FD | 	jmp	#LR__4363
2b254                 | LR__4350
2b254     14 4E 05 F1 | 	add	fp, #20
2b258     A7 16 02 FB | 	rdlong	arg03, fp
2b25c     14 4E 85 F1 | 	sub	fp, #20
2b260     02 16 16 F2 | 	cmp	arg03, #2 wc
2b264     24 00 90 CD |  if_b	jmp	#LR__4351
2b268     10 4E 05 F1 | 	add	fp, #16
2b26c     A7 18 02 FB | 	rdlong	arg04, fp
2b270     04 4E 05 F1 | 	add	fp, #4
2b274     A7 16 02 FB | 	rdlong	arg03, fp
2b278     14 4E 85 F1 | 	sub	fp, #20
2b27c     18 18 06 F1 | 	add	arg04, #24
2b280     0C 19 02 FB | 	rdlong	arg04, arg04
2b284     0C 17 12 F2 | 	cmp	arg03, arg04 wc
2b288     1C 00 90 CD |  if_b	jmp	#LR__4352
2b28c                 | LR__4351
2b28c     04 4E 05 F1 | 	add	fp, #4
2b290     A7 16 02 FB | 	rdlong	arg03, fp
2b294     04 4E 85 F1 | 	sub	fp, #4
2b298     11 16 06 F1 | 	add	arg03, #17
2b29c     0B 05 48 FC | 	wrbyte	#2, arg03
2b2a0     02 FA 05 F6 | 	mov	result1, #2
2b2a4     7C 02 90 FD | 	jmp	#LR__4363
2b2a8                 | LR__4352
2b2a8     04 4E 05 F1 | 	add	fp, #4
2b2ac     A7 18 02 FB | 	rdlong	arg04, fp
2b2b0     10 4E 05 F1 | 	add	fp, #16
2b2b4     A7 16 02 FB | 	rdlong	arg03, fp
2b2b8     14 4E 85 F1 | 	sub	fp, #20
2b2bc     18 18 06 F1 | 	add	arg04, #24
2b2c0     0C 17 62 FC | 	wrlong	arg03, arg04
2b2c4     7C FE 9F FD | 	jmp	#LR__4347
2b2c8                 | LR__4353
2b2c8     04 4E 05 F1 | 	add	fp, #4
2b2cc     A7 16 02 FB | 	rdlong	arg03, fp
2b2d0     0B 13 02 F6 | 	mov	arg01, arg03
2b2d4     14 16 06 F1 | 	add	arg03, #20
2b2d8     0B 15 02 FB | 	rdlong	arg02, arg03
2b2dc     04 4E 05 F1 | 	add	fp, #4
2b2e0     A7 16 02 FB | 	rdlong	arg03, fp
2b2e4     0B 15 02 F1 | 	add	arg02, arg03
2b2e8     14 12 06 F1 | 	add	arg01, #20
2b2ec     09 15 62 FC | 	wrlong	arg02, arg01
2b2f0     A7 16 02 FB | 	rdlong	arg03, fp
2b2f4     08 4E 85 F1 | 	sub	fp, #8
2b2f8     FF 17 CE F7 | 	test	arg03, #511 wz
2b2fc     6C 00 90 AD |  if_e	jmp	#LR__4355
2b300     10 4E 05 F1 | 	add	fp, #16
2b304     A7 12 02 FB | 	rdlong	arg01, fp
2b308     04 4E 05 F1 | 	add	fp, #4
2b30c     A7 14 02 FB | 	rdlong	arg02, fp
2b310     14 4E 85 F1 | 	sub	fp, #20
2b314     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
2b318     1C 4E 05 F1 | 	add	fp, #28
2b31c     A7 FA 61 FC | 	wrlong	result1, fp
2b320     1C 4E 85 F1 | 	sub	fp, #28
2b324     00 FA 0D F2 | 	cmp	result1, #0 wz
2b328     1C 00 90 5D |  if_ne	jmp	#LR__4354
2b32c     04 4E 05 F1 | 	add	fp, #4
2b330     A7 16 02 FB | 	rdlong	arg03, fp
2b334     04 4E 85 F1 | 	sub	fp, #4
2b338     11 16 06 F1 | 	add	arg03, #17
2b33c     0B 05 48 FC | 	wrbyte	#2, arg03
2b340     02 FA 05 F6 | 	mov	result1, #2
2b344     DC 01 90 FD | 	jmp	#LR__4363
2b348                 | LR__4354
2b348     1C 4E 05 F1 | 	add	fp, #28
2b34c     A7 18 02 FB | 	rdlong	arg04, fp
2b350     14 4E 85 F1 | 	sub	fp, #20
2b354     A7 16 02 FB | 	rdlong	arg03, fp
2b358     09 16 46 F0 | 	shr	arg03, #9
2b35c     0B 19 02 F1 | 	add	arg04, arg03
2b360     14 4E 05 F1 | 	add	fp, #20
2b364     A7 18 62 FC | 	wrlong	arg04, fp
2b368     1C 4E 85 F1 | 	sub	fp, #28
2b36c                 | LR__4355
2b36c                 | LR__4356
2b36c                 | LR__4357
2b36c     04 4E 05 F1 | 	add	fp, #4
2b370     A7 18 02 FB | 	rdlong	arg04, fp
2b374     0C 17 02 F6 | 	mov	arg03, arg04
2b378     04 4E 85 F1 | 	sub	fp, #4
2b37c     14 16 06 F1 | 	add	arg03, #20
2b380     0B 17 02 FB | 	rdlong	arg03, arg03
2b384     0C 18 06 F1 | 	add	arg04, #12
2b388     0C 19 02 FB | 	rdlong	arg04, arg04
2b38c     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2b390     3C 00 90 ED |  if_be	jmp	#LR__4358
2b394     04 4E 05 F1 | 	add	fp, #4
2b398     A7 18 02 FB | 	rdlong	arg04, fp
2b39c     0C 17 02 F6 | 	mov	arg03, arg04
2b3a0     14 18 06 F1 | 	add	arg04, #20
2b3a4     0C 19 02 FB | 	rdlong	arg04, arg04
2b3a8     0C 16 06 F1 | 	add	arg03, #12
2b3ac     0B 19 62 FC | 	wrlong	arg04, arg03
2b3b0     A7 18 02 FB | 	rdlong	arg04, fp
2b3b4     0C 17 02 F6 | 	mov	arg03, arg04
2b3b8     04 4E 85 F1 | 	sub	fp, #4
2b3bc     10 18 06 F1 | 	add	arg04, #16
2b3c0     0C 19 C2 FA | 	rdbyte	arg04, arg04
2b3c4     40 18 46 F5 | 	or	arg04, #64
2b3c8     10 16 06 F1 | 	add	arg03, #16
2b3cc     0B 19 42 FC | 	wrbyte	arg04, arg03
2b3d0                 | LR__4358
2b3d0     04 4E 05 F1 | 	add	fp, #4
2b3d4     A7 16 02 FB | 	rdlong	arg03, fp
2b3d8     04 4E 85 F1 | 	sub	fp, #4
2b3dc     14 16 06 F1 | 	add	arg03, #20
2b3e0     0B 17 02 FB | 	rdlong	arg03, arg03
2b3e4     FF 17 CE F7 | 	test	arg03, #511 wz
2b3e8     2C 01 90 AD |  if_e	jmp	#LR__4362
2b3ec     04 4E 05 F1 | 	add	fp, #4
2b3f0     A7 18 02 FB | 	rdlong	arg04, fp
2b3f4     18 4E 05 F1 | 	add	fp, #24
2b3f8     A7 16 02 FB | 	rdlong	arg03, fp
2b3fc     1C 4E 85 F1 | 	sub	fp, #28
2b400     1C 18 06 F1 | 	add	arg04, #28
2b404     0C 19 02 FB | 	rdlong	arg04, arg04
2b408     0C 17 0A F2 | 	cmp	arg03, arg04 wz
2b40c     08 01 90 AD |  if_e	jmp	#LR__4362
2b410     04 4E 05 F1 | 	add	fp, #4
2b414     A7 16 02 FB | 	rdlong	arg03, fp
2b418     04 4E 85 F1 | 	sub	fp, #4
2b41c     10 16 06 F1 | 	add	arg03, #16
2b420     0B 17 C2 FA | 	rdbyte	arg03, arg03
2b424     80 16 CE F7 | 	test	arg03, #128 wz
2b428     7C 00 90 AD |  if_e	jmp	#LR__4360
2b42c     10 4E 05 F1 | 	add	fp, #16
2b430     A7 16 02 FB | 	rdlong	arg03, fp
2b434     01 16 06 F1 | 	add	arg03, #1
2b438     0B 13 C2 FA | 	rdbyte	arg01, arg03
2b43c     0C 4E 85 F1 | 	sub	fp, #12
2b440     A7 16 02 FB | 	rdlong	arg03, fp
2b444     0B 15 02 F6 | 	mov	arg02, arg03
2b448     28 14 06 F1 | 	add	arg02, #40
2b44c     04 4E 85 F1 | 	sub	fp, #4
2b450     1C 16 06 F1 | 	add	arg03, #28
2b454     0B 17 02 FB | 	rdlong	arg03, arg03
2b458     01 18 06 F6 | 	mov	arg04, #1
2b45c     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
2b460     00 FA 0D F2 | 	cmp	result1, #0 wz
2b464     1C 00 90 AD |  if_e	jmp	#LR__4359
2b468     04 4E 05 F1 | 	add	fp, #4
2b46c     A7 16 02 FB | 	rdlong	arg03, fp
2b470     04 4E 85 F1 | 	sub	fp, #4
2b474     11 16 06 F1 | 	add	arg03, #17
2b478     0B 03 48 FC | 	wrbyte	#1, arg03
2b47c     01 FA 05 F6 | 	mov	result1, #1
2b480     A0 00 90 FD | 	jmp	#LR__4363
2b484                 | LR__4359
2b484     04 4E 05 F1 | 	add	fp, #4
2b488     A7 18 02 FB | 	rdlong	arg04, fp
2b48c     0C 17 02 F6 | 	mov	arg03, arg04
2b490     04 4E 85 F1 | 	sub	fp, #4
2b494     10 18 06 F1 | 	add	arg04, #16
2b498     0C 19 C2 FA | 	rdbyte	arg04, arg04
2b49c     7F 18 06 F5 | 	and	arg04, #127
2b4a0     10 16 06 F1 | 	add	arg03, #16
2b4a4     0B 19 42 FC | 	wrbyte	arg04, arg03
2b4a8                 | LR__4360
2b4a8     10 4E 05 F1 | 	add	fp, #16
2b4ac     A7 16 02 FB | 	rdlong	arg03, fp
2b4b0     01 16 06 F1 | 	add	arg03, #1
2b4b4     0B 13 C2 FA | 	rdbyte	arg01, arg03
2b4b8     0C 4E 85 F1 | 	sub	fp, #12
2b4bc     A7 14 02 FB | 	rdlong	arg02, fp
2b4c0     28 14 06 F1 | 	add	arg02, #40
2b4c4     18 4E 05 F1 | 	add	fp, #24
2b4c8     A7 16 02 FB | 	rdlong	arg03, fp
2b4cc     1C 4E 85 F1 | 	sub	fp, #28
2b4d0     01 18 06 F6 | 	mov	arg04, #1
2b4d4     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
2b4d8     00 FA 0D F2 | 	cmp	result1, #0 wz
2b4dc     1C 00 90 AD |  if_e	jmp	#LR__4361
2b4e0     04 4E 05 F1 | 	add	fp, #4
2b4e4     A7 16 02 FB | 	rdlong	arg03, fp
2b4e8     04 4E 85 F1 | 	sub	fp, #4
2b4ec     11 16 06 F1 | 	add	arg03, #17
2b4f0     0B 03 48 FC | 	wrbyte	#1, arg03
2b4f4     01 FA 05 F6 | 	mov	result1, #1
2b4f8     28 00 90 FD | 	jmp	#LR__4363
2b4fc                 | LR__4361
2b4fc     04 4E 05 F1 | 	add	fp, #4
2b500     A7 18 02 FB | 	rdlong	arg04, fp
2b504     18 4E 05 F1 | 	add	fp, #24
2b508     A7 16 02 FB | 	rdlong	arg03, fp
2b50c     1C 4E 85 F1 | 	sub	fp, #28
2b510     1C 18 06 F1 | 	add	arg04, #28
2b514     0C 17 62 FC | 	wrlong	arg03, arg04
2b518                 | LR__4362
2b518                 | ' 
2b518                 | ' 			fp->sect = nsect;
2b518                 | ' 		}
2b518                 | ' 	}
2b518                 | ' 
2b518                 | ' 	return res ;
2b518     0C 4E 05 F1 | 	add	fp, #12
2b51c     A7 FA 01 FB | 	rdlong	result1, fp
2b520     0C 4E 85 F1 | 	sub	fp, #12
2b524                 | LR__4363
2b524     A7 F0 03 F6 | 	mov	ptra, fp
2b528     B2 00 A0 FD | 	call	#popregs_
2b52c                 | _fatfs_cc_f_lseek_ret
2b52c     2D 00 64 FD | 	ret
2b530                 | 
2b530                 | _fatfs_cc_f_opendir
2b530     01 4A 05 F6 | 	mov	COUNT_, #1
2b534     A8 00 A0 FD | 	call	#pushregs_
2b538     14 F0 07 F1 | 	add	ptra, #20
2b53c     04 4E 05 F1 | 	add	fp, #4
2b540     A7 12 62 FC | 	wrlong	arg01, fp
2b544     04 4E 05 F1 | 	add	fp, #4
2b548     A7 14 62 FC | 	wrlong	arg02, fp
2b54c     04 4E 85 F1 | 	sub	fp, #4
2b550     A7 16 0A FB | 	rdlong	arg03, fp wz
2b554     04 4E 85 F1 | 	sub	fp, #4
2b558     09 FA 05 A6 |  if_e	mov	result1, #9
2b55c     78 01 90 AD |  if_e	jmp	#LR__4376
2b560     08 4E 05 F1 | 	add	fp, #8
2b564     A7 12 02 F6 | 	mov	arg01, fp
2b568     08 4E 05 F1 | 	add	fp, #8
2b56c     A7 14 02 F6 | 	mov	arg02, fp
2b570     10 4E 85 F1 | 	sub	fp, #16
2b574     00 16 06 F6 | 	mov	arg03, #0
2b578     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
2b57c     0C 4E 05 F1 | 	add	fp, #12
2b580     A7 FA 61 FC | 	wrlong	result1, fp
2b584     0C 4E 85 F1 | 	sub	fp, #12
2b588     00 FA 0D F2 | 	cmp	result1, #0 wz
2b58c     20 01 90 5D |  if_ne	jmp	#LR__4375
2b590     04 4E 05 F1 | 	add	fp, #4
2b594     A7 16 02 FB | 	rdlong	arg03, fp
2b598     0C 4E 05 F1 | 	add	fp, #12
2b59c     A7 FA 01 FB | 	rdlong	result1, fp
2b5a0     0B FB 61 FC | 	wrlong	result1, arg03
2b5a4     0C 4E 85 F1 | 	sub	fp, #12
2b5a8     A7 12 02 FB | 	rdlong	arg01, fp
2b5ac     04 4E 05 F1 | 	add	fp, #4
2b5b0     A7 14 02 FB | 	rdlong	arg02, fp
2b5b4     08 4E 85 F1 | 	sub	fp, #8
2b5b8     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
2b5bc     0C 4E 05 F1 | 	add	fp, #12
2b5c0     A7 FA 61 FC | 	wrlong	result1, fp
2b5c4     0C 4E 85 F1 | 	sub	fp, #12
2b5c8     00 FA 0D F2 | 	cmp	result1, #0 wz
2b5cc     C4 00 90 5D |  if_ne	jmp	#LR__4374
2b5d0     04 4E 05 F1 | 	add	fp, #4
2b5d4     A7 16 02 FB | 	rdlong	arg03, fp
2b5d8     04 4E 85 F1 | 	sub	fp, #4
2b5dc     2B 16 06 F1 | 	add	arg03, #43
2b5e0     0B 17 C2 FA | 	rdbyte	arg03, arg03
2b5e4     80 16 CE F7 | 	test	arg03, #128 wz
2b5e8     58 00 90 5D |  if_ne	jmp	#LR__4372
2b5ec     04 4E 05 F1 | 	add	fp, #4
2b5f0     A7 16 02 FB | 	rdlong	arg03, fp
2b5f4     04 4E 85 F1 | 	sub	fp, #4
2b5f8     06 16 06 F1 | 	add	arg03, #6
2b5fc     0B 17 C2 FA | 	rdbyte	arg03, arg03
2b600     10 16 CE F7 | 	test	arg03, #16 wz
2b604     30 00 90 AD |  if_e	jmp	#LR__4370
2b608     04 4E 05 F1 | 	add	fp, #4
2b60c     A7 16 02 FB | 	rdlong	arg03, fp
2b610     0B 1F 02 F6 | 	mov	local01, arg03
2b614     0C 4E 05 F1 | 	add	fp, #12
2b618     A7 12 02 FB | 	rdlong	arg01, fp
2b61c     10 4E 85 F1 | 	sub	fp, #16
2b620     1C 16 06 F1 | 	add	arg03, #28
2b624     0B 15 02 FB | 	rdlong	arg02, arg03
2b628     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
2b62c     08 1E 06 F1 | 	add	local01, #8
2b630     0F FB 61 FC | 	wrlong	result1, local01
2b634     0C 00 90 FD | 	jmp	#LR__4371
2b638                 | LR__4370
2b638     0C 4E 05 F1 | 	add	fp, #12
2b63c     A7 0A 68 FC | 	wrlong	#5, fp
2b640     0C 4E 85 F1 | 	sub	fp, #12
2b644                 | LR__4371
2b644                 | LR__4372
2b644     0C 4E 05 F1 | 	add	fp, #12
2b648     A7 1E 0A FB | 	rdlong	local01, fp wz
2b64c     0C 4E 85 F1 | 	sub	fp, #12
2b650     40 00 90 5D |  if_ne	jmp	#LR__4373
2b654     04 4E 05 F1 | 	add	fp, #4
2b658     A7 1E 02 FB | 	rdlong	local01, fp
2b65c     0C 4E 05 F1 | 	add	fp, #12
2b660     A7 16 02 FB | 	rdlong	arg03, fp
2b664     06 16 06 F1 | 	add	arg03, #6
2b668     0B 17 E2 FA | 	rdword	arg03, arg03
2b66c     04 1E 06 F1 | 	add	local01, #4
2b670     0F 17 52 FC | 	wrword	arg03, local01
2b674     0C 4E 85 F1 | 	sub	fp, #12
2b678     A7 12 02 FB | 	rdlong	arg01, fp
2b67c     04 4E 85 F1 | 	sub	fp, #4
2b680     00 14 06 F6 | 	mov	arg02, #0
2b684     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
2b688     0C 4E 05 F1 | 	add	fp, #12
2b68c     A7 FA 61 FC | 	wrlong	result1, fp
2b690     0C 4E 85 F1 | 	sub	fp, #12
2b694                 | LR__4373
2b694                 | LR__4374
2b694     0C 4E 05 F1 | 	add	fp, #12
2b698     A7 1E 02 FB | 	rdlong	local01, fp
2b69c     0C 4E 85 F1 | 	sub	fp, #12
2b6a0     04 1E 0E F2 | 	cmp	local01, #4 wz
2b6a4     0C 4E 05 A1 |  if_e	add	fp, #12
2b6a8     A7 0A 68 AC |  if_e	wrlong	#5, fp
2b6ac     0C 4E 85 A1 |  if_e	sub	fp, #12
2b6b0                 | LR__4375
2b6b0     0C 4E 05 F1 | 	add	fp, #12
2b6b4     A7 1E 0A FB | 	rdlong	local01, fp wz
2b6b8     0C 4E 85 F1 | 	sub	fp, #12
2b6bc     04 4E 05 51 |  if_ne	add	fp, #4
2b6c0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2b6c4     04 4E 85 51 |  if_ne	sub	fp, #4
2b6c8     0F 01 68 5C |  if_ne	wrlong	#0, local01
2b6cc                 | ' 
2b6cc                 | ' 	return res ;
2b6cc     0C 4E 05 F1 | 	add	fp, #12
2b6d0     A7 FA 01 FB | 	rdlong	result1, fp
2b6d4     0C 4E 85 F1 | 	sub	fp, #12
2b6d8                 | LR__4376
2b6d8     A7 F0 03 F6 | 	mov	ptra, fp
2b6dc     B2 00 A0 FD | 	call	#popregs_
2b6e0                 | _fatfs_cc_f_opendir_ret
2b6e0     2D 00 64 FD | 	ret
2b6e4                 | 
2b6e4                 | _fatfs_cc_f_closedir
2b6e4     00 4A 05 F6 | 	mov	COUNT_, #0
2b6e8     A8 00 A0 FD | 	call	#pushregs_
2b6ec     10 F0 07 F1 | 	add	ptra, #16
2b6f0     04 4E 05 F1 | 	add	fp, #4
2b6f4     A7 12 62 FC | 	wrlong	arg01, fp
2b6f8     08 4E 05 F1 | 	add	fp, #8
2b6fc     A7 14 02 F6 | 	mov	arg02, fp
2b700     0C 4E 85 F1 | 	sub	fp, #12
2b704     C0 DD BF FD | 	call	#_fatfs_cc_validate
2b708     08 4E 05 F1 | 	add	fp, #8
2b70c     A7 FA 61 FC | 	wrlong	result1, fp
2b710     08 4E 85 F1 | 	sub	fp, #8
2b714     00 FA 0D F2 | 	cmp	result1, #0 wz
2b718     04 4E 05 A1 |  if_e	add	fp, #4
2b71c     A7 FA 01 AB |  if_e	rdlong	result1, fp
2b720     04 4E 85 A1 |  if_e	sub	fp, #4
2b724     FD 00 68 AC |  if_e	wrlong	#0, result1
2b728                 | ' 
2b728                 | ' 
2b728                 | ' 
2b728                 | ' 
2b728                 | ' 		dp->obj.fs = 0;
2b728                 | ' #line 4633 "ff.c"
2b728                 | ' 	}
2b728                 | ' 	return res;
2b728     08 4E 05 F1 | 	add	fp, #8
2b72c     A7 FA 01 FB | 	rdlong	result1, fp
2b730     08 4E 85 F1 | 	sub	fp, #8
2b734     A7 F0 03 F6 | 	mov	ptra, fp
2b738     B2 00 A0 FD | 	call	#popregs_
2b73c                 | _fatfs_cc_f_closedir_ret
2b73c     2D 00 64 FD | 	ret
2b740                 | 
2b740                 | _fatfs_cc_f_readdir
2b740     00 4A 05 F6 | 	mov	COUNT_, #0
2b744     A8 00 A0 FD | 	call	#pushregs_
2b748     14 F0 07 F1 | 	add	ptra, #20
2b74c     04 4E 05 F1 | 	add	fp, #4
2b750     A7 12 62 FC | 	wrlong	arg01, fp
2b754     04 4E 05 F1 | 	add	fp, #4
2b758     A7 14 62 FC | 	wrlong	arg02, fp
2b75c     04 4E 85 F1 | 	sub	fp, #4
2b760     A7 12 02 FB | 	rdlong	arg01, fp
2b764     0C 4E 05 F1 | 	add	fp, #12
2b768     A7 14 02 F6 | 	mov	arg02, fp
2b76c     10 4E 85 F1 | 	sub	fp, #16
2b770     54 DD BF FD | 	call	#_fatfs_cc_validate
2b774     0C 4E 05 F1 | 	add	fp, #12
2b778     A7 FA 61 FC | 	wrlong	result1, fp
2b77c     0C 4E 85 F1 | 	sub	fp, #12
2b780     00 FA 0D F2 | 	cmp	result1, #0 wz
2b784     BC 00 90 5D |  if_ne	jmp	#LR__4383
2b788     08 4E 05 F1 | 	add	fp, #8
2b78c     A7 FA 09 FB | 	rdlong	result1, fp wz
2b790     08 4E 85 F1 | 	sub	fp, #8
2b794     24 00 90 5D |  if_ne	jmp	#LR__4380
2b798     04 4E 05 F1 | 	add	fp, #4
2b79c     A7 12 02 FB | 	rdlong	arg01, fp
2b7a0     04 4E 85 F1 | 	sub	fp, #4
2b7a4     00 14 06 F6 | 	mov	arg02, #0
2b7a8     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
2b7ac     0C 4E 05 F1 | 	add	fp, #12
2b7b0     A7 FA 61 FC | 	wrlong	result1, fp
2b7b4     0C 4E 85 F1 | 	sub	fp, #12
2b7b8     88 00 90 FD | 	jmp	#LR__4382
2b7bc                 | LR__4380
2b7bc     04 4E 05 F1 | 	add	fp, #4
2b7c0     A7 12 02 FB | 	rdlong	arg01, fp
2b7c4     04 4E 85 F1 | 	sub	fp, #4
2b7c8     00 14 06 F6 | 	mov	arg02, #0
2b7cc     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
2b7d0     0C 4E 05 F1 | 	add	fp, #12
2b7d4     A7 FA 61 FC | 	wrlong	result1, fp
2b7d8     0C 4E 85 F1 | 	sub	fp, #12
2b7dc     04 FA 0D F2 | 	cmp	result1, #4 wz
2b7e0     0C 4E 05 A1 |  if_e	add	fp, #12
2b7e4     A7 00 68 AC |  if_e	wrlong	#0, fp
2b7e8     0C 4E 85 A1 |  if_e	sub	fp, #12
2b7ec     0C 4E 05 F1 | 	add	fp, #12
2b7f0     A7 FA 09 FB | 	rdlong	result1, fp wz
2b7f4     0C 4E 85 F1 | 	sub	fp, #12
2b7f8     48 00 90 5D |  if_ne	jmp	#LR__4381
2b7fc     04 4E 05 F1 | 	add	fp, #4
2b800     A7 12 02 FB | 	rdlong	arg01, fp
2b804     04 4E 05 F1 | 	add	fp, #4
2b808     A7 14 02 FB | 	rdlong	arg02, fp
2b80c     08 4E 85 F1 | 	sub	fp, #8
2b810     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
2b814     04 4E 05 F1 | 	add	fp, #4
2b818     A7 12 02 FB | 	rdlong	arg01, fp
2b81c     04 4E 85 F1 | 	sub	fp, #4
2b820     00 14 06 F6 | 	mov	arg02, #0
2b824     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
2b828     0C 4E 05 F1 | 	add	fp, #12
2b82c     A7 FA 61 FC | 	wrlong	result1, fp
2b830     0C 4E 85 F1 | 	sub	fp, #12
2b834     04 FA 0D F2 | 	cmp	result1, #4 wz
2b838     0C 4E 05 A1 |  if_e	add	fp, #12
2b83c     A7 00 68 AC |  if_e	wrlong	#0, fp
2b840     0C 4E 85 A1 |  if_e	sub	fp, #12
2b844                 | LR__4381
2b844                 | LR__4382
2b844                 | LR__4383
2b844                 | ' 			}
2b844                 | ' 			;
2b844                 | ' 		}
2b844                 | ' 	}
2b844                 | ' 	return res ;
2b844     0C 4E 05 F1 | 	add	fp, #12
2b848     A7 FA 01 FB | 	rdlong	result1, fp
2b84c     0C 4E 85 F1 | 	sub	fp, #12
2b850     A7 F0 03 F6 | 	mov	ptra, fp
2b854     B2 00 A0 FD | 	call	#popregs_
2b858                 | _fatfs_cc_f_readdir_ret
2b858     2D 00 64 FD | 	ret
2b85c                 | 
2b85c                 | _fatfs_cc_f_stat
2b85c     00 4A 05 F6 | 	mov	COUNT_, #0
2b860     A8 00 A0 FD | 	call	#pushregs_
2b864     40 F0 07 F1 | 	add	ptra, #64
2b868     04 4E 05 F1 | 	add	fp, #4
2b86c     A7 12 62 FC | 	wrlong	arg01, fp
2b870     04 4E 05 F1 | 	add	fp, #4
2b874     A7 14 62 FC | 	wrlong	arg02, fp
2b878     04 4E 85 F1 | 	sub	fp, #4
2b87c     A7 12 02 F6 | 	mov	arg01, fp
2b880     0C 4E 05 F1 | 	add	fp, #12
2b884     A7 14 02 F6 | 	mov	arg02, fp
2b888     10 4E 85 F1 | 	sub	fp, #16
2b88c     00 16 06 F6 | 	mov	arg03, #0
2b890     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
2b894     0C 4E 05 F1 | 	add	fp, #12
2b898     A7 FA 61 FC | 	wrlong	result1, fp
2b89c     0C 4E 85 F1 | 	sub	fp, #12
2b8a0     00 FA 0D F2 | 	cmp	result1, #0 wz
2b8a4     74 00 90 5D |  if_ne	jmp	#LR__4393
2b8a8     10 4E 05 F1 | 	add	fp, #16
2b8ac     A7 12 02 F6 | 	mov	arg01, fp
2b8b0     0C 4E 85 F1 | 	sub	fp, #12
2b8b4     A7 14 02 FB | 	rdlong	arg02, fp
2b8b8     04 4E 85 F1 | 	sub	fp, #4
2b8bc     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
2b8c0     0C 4E 05 F1 | 	add	fp, #12
2b8c4     A7 FA 61 FC | 	wrlong	result1, fp
2b8c8     0C 4E 85 F1 | 	sub	fp, #12
2b8cc     00 FA 0D F2 | 	cmp	result1, #0 wz
2b8d0     48 00 90 5D |  if_ne	jmp	#LR__4392
2b8d4     3B 4E 05 F1 | 	add	fp, #59
2b8d8     A7 FA C1 FA | 	rdbyte	result1, fp
2b8dc     3B 4E 85 F1 | 	sub	fp, #59
2b8e0     80 FA CD F7 | 	test	result1, #128 wz
2b8e4     0C 4E 05 51 |  if_ne	add	fp, #12
2b8e8     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2b8ec     0C 4E 85 51 |  if_ne	sub	fp, #12
2b8f0     28 00 90 5D |  if_ne	jmp	#LR__4391
2b8f4     08 4E 05 F1 | 	add	fp, #8
2b8f8     A7 FA 09 FB | 	rdlong	result1, fp wz
2b8fc     08 4E 85 F1 | 	sub	fp, #8
2b900     18 00 90 AD |  if_e	jmp	#LR__4390
2b904     10 4E 05 F1 | 	add	fp, #16
2b908     A7 12 02 F6 | 	mov	arg01, fp
2b90c     08 4E 85 F1 | 	sub	fp, #8
2b910     A7 14 02 FB | 	rdlong	arg02, fp
2b914     08 4E 85 F1 | 	sub	fp, #8
2b918     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
2b91c                 | LR__4390
2b91c                 | LR__4391
2b91c                 | LR__4392
2b91c                 | LR__4393
2b91c                 | ' 			}
2b91c                 | ' 		}
2b91c                 | ' 		;
2b91c                 | ' 	}
2b91c                 | ' 
2b91c                 | ' 	return res ;
2b91c     0C 4E 05 F1 | 	add	fp, #12
2b920     A7 FA 01 FB | 	rdlong	result1, fp
2b924     0C 4E 85 F1 | 	sub	fp, #12
2b928     A7 F0 03 F6 | 	mov	ptra, fp
2b92c     B2 00 A0 FD | 	call	#popregs_
2b930                 | _fatfs_cc_f_stat_ret
2b930     2D 00 64 FD | 	ret
2b934                 | 
2b934                 | _fatfs_cc_f_unlink
2b934     00 4A 05 F6 | 	mov	COUNT_, #0
2b938     A8 00 A0 FD | 	call	#pushregs_
2b93c     74 F0 07 F1 | 	add	ptra, #116
2b940     04 4E 05 F1 | 	add	fp, #4
2b944     A7 12 62 FC | 	wrlong	arg01, fp
2b948     68 4E 05 F1 | 	add	fp, #104
2b94c     A7 00 68 FC | 	wrlong	#0, fp
2b950     68 4E 85 F1 | 	sub	fp, #104
2b954     A7 12 02 F6 | 	mov	arg01, fp
2b958     6C 4E 05 F1 | 	add	fp, #108
2b95c     A7 14 02 F6 | 	mov	arg02, fp
2b960     70 4E 85 F1 | 	sub	fp, #112
2b964     02 16 06 F6 | 	mov	arg03, #2
2b968     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
2b96c     08 4E 05 F1 | 	add	fp, #8
2b970     A7 FA 61 FC | 	wrlong	result1, fp
2b974     08 4E 85 F1 | 	sub	fp, #8
2b978     00 FA 0D F2 | 	cmp	result1, #0 wz
2b97c     E4 01 90 5D |  if_ne	jmp	#LR__4408
2b980     70 4E 05 F1 | 	add	fp, #112
2b984     A7 16 02 FB | 	rdlong	arg03, fp
2b988     64 4E 85 F1 | 	sub	fp, #100
2b98c     A7 16 62 FC | 	wrlong	arg03, fp
2b990     A7 12 02 F6 | 	mov	arg01, fp
2b994     08 4E 85 F1 | 	sub	fp, #8
2b998     A7 14 02 FB | 	rdlong	arg02, fp
2b99c     04 4E 85 F1 | 	sub	fp, #4
2b9a0     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
2b9a4     08 4E 05 F1 | 	add	fp, #8
2b9a8     A7 FA 61 FC | 	wrlong	result1, fp
2b9ac     00 FA 4D F2 | 	cmps	result1, #0 wz
2b9b0     08 4E 85 F1 | 	sub	fp, #8
2b9b4     AC 01 90 5D |  if_ne	jmp	#LR__4407
2b9b8     37 4E 05 F1 | 	add	fp, #55
2b9bc     A7 FA C1 FA | 	rdbyte	result1, fp
2b9c0     37 4E 85 F1 | 	sub	fp, #55
2b9c4     80 FA CD F7 | 	test	result1, #128 wz
2b9c8     08 4E 05 51 |  if_ne	add	fp, #8
2b9cc     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2b9d0     08 4E 85 51 |  if_ne	sub	fp, #8
2b9d4     1C 00 90 5D |  if_ne	jmp	#LR__4400
2b9d8     12 4E 05 F1 | 	add	fp, #18
2b9dc     A7 FA C1 FA | 	rdbyte	result1, fp
2b9e0     12 4E 85 F1 | 	sub	fp, #18
2b9e4     01 FA CD F7 | 	test	result1, #1 wz
2b9e8     08 4E 05 51 |  if_ne	add	fp, #8
2b9ec     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2b9f0     08 4E 85 51 |  if_ne	sub	fp, #8
2b9f4                 | LR__4400
2b9f4     08 4E 05 F1 | 	add	fp, #8
2b9f8     A7 FA 09 FB | 	rdlong	result1, fp wz
2b9fc     08 4E 85 F1 | 	sub	fp, #8
2ba00     C8 00 90 5D |  if_ne	jmp	#LR__4403
2ba04     70 4E 05 F1 | 	add	fp, #112
2ba08     A7 12 02 FB | 	rdlong	arg01, fp
2ba0c     48 4E 85 F1 | 	sub	fp, #72
2ba10     A7 14 02 FB | 	rdlong	arg02, fp
2ba14     28 4E 85 F1 | 	sub	fp, #40
2ba18     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
2ba1c     6C 4E 05 F1 | 	add	fp, #108
2ba20     A7 FA 61 FC | 	wrlong	result1, fp
2ba24     5A 4E 85 F1 | 	sub	fp, #90
2ba28     A7 FA C1 FA | 	rdbyte	result1, fp
2ba2c     12 4E 85 F1 | 	sub	fp, #18
2ba30     10 FA CD F7 | 	test	result1, #16 wz
2ba34     94 00 90 AD |  if_e	jmp	#LR__4402
2ba38     70 4E 05 F1 | 	add	fp, #112
2ba3c     A7 FA 01 FB | 	rdlong	result1, fp
2ba40     34 4E 85 F1 | 	sub	fp, #52
2ba44     A7 FA 61 FC | 	wrlong	result1, fp
2ba48     30 4E 05 F1 | 	add	fp, #48
2ba4c     A7 16 02 FB | 	rdlong	arg03, fp
2ba50     28 4E 85 F1 | 	sub	fp, #40
2ba54     A7 16 62 FC | 	wrlong	arg03, fp
2ba58     08 4E 85 F1 | 	sub	fp, #8
2ba5c     A7 12 02 F6 | 	mov	arg01, fp
2ba60     3C 4E 85 F1 | 	sub	fp, #60
2ba64     00 14 06 F6 | 	mov	arg02, #0
2ba68     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
2ba6c     08 4E 05 F1 | 	add	fp, #8
2ba70     A7 FA 61 FC | 	wrlong	result1, fp
2ba74     08 4E 85 F1 | 	sub	fp, #8
2ba78     00 FA 0D F2 | 	cmp	result1, #0 wz
2ba7c     4C 00 90 5D |  if_ne	jmp	#LR__4401
2ba80     3C 4E 05 F1 | 	add	fp, #60
2ba84     A7 12 02 F6 | 	mov	arg01, fp
2ba88     3C 4E 85 F1 | 	sub	fp, #60
2ba8c     00 14 06 F6 | 	mov	arg02, #0
2ba90     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
2ba94     08 4E 05 F1 | 	add	fp, #8
2ba98     A7 FA 61 FC | 	wrlong	result1, fp
2ba9c     00 FA 4D F2 | 	cmps	result1, #0 wz
2baa0     08 4E 85 F1 | 	sub	fp, #8
2baa4     08 4E 05 A1 |  if_e	add	fp, #8
2baa8     A7 0E 68 AC |  if_e	wrlong	#7, fp
2baac     08 4E 85 A1 |  if_e	sub	fp, #8
2bab0     08 4E 05 F1 | 	add	fp, #8
2bab4     A7 FA 01 FB | 	rdlong	result1, fp
2bab8     08 4E 85 F1 | 	sub	fp, #8
2babc     04 FA 0D F2 | 	cmp	result1, #4 wz
2bac0     08 4E 05 A1 |  if_e	add	fp, #8
2bac4     A7 00 68 AC |  if_e	wrlong	#0, fp
2bac8     08 4E 85 A1 |  if_e	sub	fp, #8
2bacc                 | LR__4401
2bacc                 | LR__4402
2bacc                 | LR__4403
2bacc     08 4E 05 F1 | 	add	fp, #8
2bad0     A7 FA 09 FB | 	rdlong	result1, fp wz
2bad4     08 4E 85 F1 | 	sub	fp, #8
2bad8     88 00 90 5D |  if_ne	jmp	#LR__4406
2badc     0C 4E 05 F1 | 	add	fp, #12
2bae0     A7 12 02 F6 | 	mov	arg01, fp
2bae4     0C 4E 85 F1 | 	sub	fp, #12
2bae8     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
2baec     08 4E 05 F1 | 	add	fp, #8
2baf0     A7 FA 61 FC | 	wrlong	result1, fp
2baf4     08 4E 85 F1 | 	sub	fp, #8
2baf8     00 FA 0D F2 | 	cmp	result1, #0 wz
2bafc     38 00 90 5D |  if_ne	jmp	#LR__4404
2bb00     6C 4E 05 F1 | 	add	fp, #108
2bb04     A7 FA 09 FB | 	rdlong	result1, fp wz
2bb08     6C 4E 85 F1 | 	sub	fp, #108
2bb0c     28 00 90 AD |  if_e	jmp	#LR__4404
2bb10     0C 4E 05 F1 | 	add	fp, #12
2bb14     A7 12 02 F6 | 	mov	arg01, fp
2bb18     60 4E 05 F1 | 	add	fp, #96
2bb1c     A7 14 02 FB | 	rdlong	arg02, fp
2bb20     6C 4E 85 F1 | 	sub	fp, #108
2bb24     00 16 06 F6 | 	mov	arg03, #0
2bb28     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
2bb2c     08 4E 05 F1 | 	add	fp, #8
2bb30     A7 FA 61 FC | 	wrlong	result1, fp
2bb34     08 4E 85 F1 | 	sub	fp, #8
2bb38                 | LR__4404
2bb38     08 4E 05 F1 | 	add	fp, #8
2bb3c     A7 FA 09 FB | 	rdlong	result1, fp wz
2bb40     08 4E 85 F1 | 	sub	fp, #8
2bb44     1C 00 90 5D |  if_ne	jmp	#LR__4405
2bb48     70 4E 05 F1 | 	add	fp, #112
2bb4c     A7 12 02 FB | 	rdlong	arg01, fp
2bb50     70 4E 85 F1 | 	sub	fp, #112
2bb54     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
2bb58     08 4E 05 F1 | 	add	fp, #8
2bb5c     A7 FA 61 FC | 	wrlong	result1, fp
2bb60     08 4E 85 F1 | 	sub	fp, #8
2bb64                 | LR__4405
2bb64                 | LR__4406
2bb64                 | LR__4407
2bb64                 | LR__4408
2bb64                 | ' 			}
2bb64                 | ' 		}
2bb64                 | ' 		;
2bb64                 | ' 	}
2bb64                 | ' 
2bb64                 | ' 	return res ;
2bb64     08 4E 05 F1 | 	add	fp, #8
2bb68     A7 FA 01 FB | 	rdlong	result1, fp
2bb6c     08 4E 85 F1 | 	sub	fp, #8
2bb70     A7 F0 03 F6 | 	mov	ptra, fp
2bb74     B2 00 A0 FD | 	call	#popregs_
2bb78                 | _fatfs_cc_f_unlink_ret
2bb78     2D 00 64 FD | 	ret
2bb7c                 | 
2bb7c                 | _fatfs_cc_f_mkdir
2bb7c     00 4A 05 F6 | 	mov	COUNT_, #0
2bb80     A8 00 A0 FD | 	call	#pushregs_
2bb84     5C F0 07 F1 | 	add	ptra, #92
2bb88     04 4E 05 F1 | 	add	fp, #4
2bb8c     A7 12 62 FC | 	wrlong	arg01, fp
2bb90     A7 12 02 F6 | 	mov	arg01, fp
2bb94     48 4E 05 F1 | 	add	fp, #72
2bb98     A7 14 02 F6 | 	mov	arg02, fp
2bb9c     4C 4E 85 F1 | 	sub	fp, #76
2bba0     02 16 06 F6 | 	mov	arg03, #2
2bba4     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
2bba8     08 4E 05 F1 | 	add	fp, #8
2bbac     A7 FA 61 FC | 	wrlong	result1, fp
2bbb0     08 4E 85 F1 | 	sub	fp, #8
2bbb4     00 FA 0D F2 | 	cmp	result1, #0 wz
2bbb8     C4 02 90 5D |  if_ne	jmp	#LR__4415
2bbbc     4C 4E 05 F1 | 	add	fp, #76
2bbc0     A7 16 02 FB | 	rdlong	arg03, fp
2bbc4     40 4E 85 F1 | 	sub	fp, #64
2bbc8     A7 16 62 FC | 	wrlong	arg03, fp
2bbcc     A7 12 02 F6 | 	mov	arg01, fp
2bbd0     08 4E 85 F1 | 	sub	fp, #8
2bbd4     A7 14 02 FB | 	rdlong	arg02, fp
2bbd8     04 4E 85 F1 | 	sub	fp, #4
2bbdc     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
2bbe0     08 4E 05 F1 | 	add	fp, #8
2bbe4     A7 FA 61 FC | 	wrlong	result1, fp
2bbe8     00 FA 4D F2 | 	cmps	result1, #0 wz
2bbec     08 4E 85 F1 | 	sub	fp, #8
2bbf0     08 4E 05 A1 |  if_e	add	fp, #8
2bbf4     A7 10 68 AC |  if_e	wrlong	#8, fp
2bbf8     08 4E 85 A1 |  if_e	sub	fp, #8
2bbfc     08 4E 05 F1 | 	add	fp, #8
2bc00     A7 FA 01 FB | 	rdlong	result1, fp
2bc04     08 4E 85 F1 | 	sub	fp, #8
2bc08     04 FA 0D F2 | 	cmp	result1, #4 wz
2bc0c     70 02 90 5D |  if_ne	jmp	#LR__4414
2bc10     4C 4E 05 F1 | 	add	fp, #76
2bc14     A7 16 02 FB | 	rdlong	arg03, fp
2bc18     10 4E 85 F1 | 	sub	fp, #16
2bc1c     A7 16 62 FC | 	wrlong	arg03, fp
2bc20     A7 12 02 F6 | 	mov	arg01, fp
2bc24     3C 4E 85 F1 | 	sub	fp, #60
2bc28     00 14 06 F6 | 	mov	arg02, #0
2bc2c     04 AC BF FD | 	call	#_fatfs_cc_create_chain
2bc30     50 4E 05 F1 | 	add	fp, #80
2bc34     A7 FA 61 FC | 	wrlong	result1, fp
2bc38     48 4E 85 F1 | 	sub	fp, #72
2bc3c     A7 00 68 FC | 	wrlong	#0, fp
2bc40     48 4E 05 F1 | 	add	fp, #72
2bc44     A7 FA 09 FB | 	rdlong	result1, fp wz
2bc48     50 4E 85 F1 | 	sub	fp, #80
2bc4c     08 4E 05 A1 |  if_e	add	fp, #8
2bc50     A7 0E 68 AC |  if_e	wrlong	#7, fp
2bc54     08 4E 85 A1 |  if_e	sub	fp, #8
2bc58     50 4E 05 F1 | 	add	fp, #80
2bc5c     A7 FA 01 FB | 	rdlong	result1, fp
2bc60     50 4E 85 F1 | 	sub	fp, #80
2bc64     01 FA 0D F2 | 	cmp	result1, #1 wz
2bc68     08 4E 05 A1 |  if_e	add	fp, #8
2bc6c     A7 04 68 AC |  if_e	wrlong	#2, fp
2bc70     08 4E 85 A1 |  if_e	sub	fp, #8
2bc74     50 4E 05 F1 | 	add	fp, #80
2bc78     A7 16 02 FB | 	rdlong	arg03, fp
2bc7c     50 4E 85 F1 | 	sub	fp, #80
2bc80     FF FF 7F FF 
2bc84     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2bc88     08 4E 05 A1 |  if_e	add	fp, #8
2bc8c     A7 02 68 AC |  if_e	wrlong	#1, fp
2bc90     08 4E 85 A1 |  if_e	sub	fp, #8
2bc94     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
2bc98     58 4E 05 F1 | 	add	fp, #88
2bc9c     A7 FA 61 FC | 	wrlong	result1, fp
2bca0     50 4E 85 F1 | 	sub	fp, #80
2bca4     A7 FA 09 FB | 	rdlong	result1, fp wz
2bca8     08 4E 85 F1 | 	sub	fp, #8
2bcac     1C 01 90 5D |  if_ne	jmp	#LR__4411
2bcb0     4C 4E 05 F1 | 	add	fp, #76
2bcb4     A7 12 02 FB | 	rdlong	arg01, fp
2bcb8     04 4E 05 F1 | 	add	fp, #4
2bcbc     A7 14 02 FB | 	rdlong	arg02, fp
2bcc0     50 4E 85 F1 | 	sub	fp, #80
2bcc4     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
2bcc8     08 4E 05 F1 | 	add	fp, #8
2bccc     A7 FA 61 FC | 	wrlong	result1, fp
2bcd0     00 FA 4D F2 | 	cmps	result1, #0 wz
2bcd4     08 4E 85 F1 | 	sub	fp, #8
2bcd8     F0 00 90 5D |  if_ne	jmp	#LR__4410
2bcdc     4C 4E 05 F1 | 	add	fp, #76
2bce0     A7 12 02 FB | 	rdlong	arg01, fp
2bce4     4C 4E 85 F1 | 	sub	fp, #76
2bce8     34 12 06 F1 | 	add	arg01, #52
2bcec     20 14 06 F6 | 	mov	arg02, #32
2bcf0     0B 16 06 F6 | 	mov	arg03, #11
2bcf4     98 00 A0 FD | 	call	#\builtin_bytefill_
2bcf8     4C 4E 05 F1 | 	add	fp, #76
2bcfc     A7 FA 01 FB | 	rdlong	result1, fp
2bd00     34 FA 05 F1 | 	add	result1, #52
2bd04     FD 5C 48 FC | 	wrbyte	#46, result1
2bd08     A7 16 02 FB | 	rdlong	arg03, fp
2bd0c     3F 16 06 F1 | 	add	arg03, #63
2bd10     0B 21 48 FC | 	wrbyte	#16, arg03
2bd14     A7 12 02 FB | 	rdlong	arg01, fp
2bd18     4A 12 06 F1 | 	add	arg01, #74
2bd1c     0C 4E 05 F1 | 	add	fp, #12
2bd20     A7 14 02 FB | 	rdlong	arg02, fp
2bd24     09 15 62 FC | 	wrlong	arg02, arg01
2bd28     0C 4E 85 F1 | 	sub	fp, #12
2bd2c     A7 14 02 FB | 	rdlong	arg02, fp
2bd30     0A 13 02 F6 | 	mov	arg01, arg02
2bd34     34 14 06 F1 | 	add	arg02, #52
2bd38     04 4E 05 F1 | 	add	fp, #4
2bd3c     A7 16 02 FB | 	rdlong	arg03, fp
2bd40     50 4E 85 F1 | 	sub	fp, #80
2bd44     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
2bd48     4C 4E 05 F1 | 	add	fp, #76
2bd4c     A7 14 02 FB | 	rdlong	arg02, fp
2bd50     0A 13 02 F6 | 	mov	arg01, arg02
2bd54     54 12 06 F1 | 	add	arg01, #84
2bd58     4C 4E 85 F1 | 	sub	fp, #76
2bd5c     34 14 06 F1 | 	add	arg02, #52
2bd60     20 16 06 F6 | 	mov	arg03, #32
2bd64     D0 2C BF FD | 	call	#__system____builtin_memmove
2bd68     4C 4E 05 F1 | 	add	fp, #76
2bd6c     A7 16 02 FB | 	rdlong	arg03, fp
2bd70     55 16 06 F1 | 	add	arg03, #85
2bd74     0B 5D 48 FC | 	wrbyte	#46, arg03
2bd78     38 4E 85 F1 | 	sub	fp, #56
2bd7c     A7 16 02 FB | 	rdlong	arg03, fp
2bd80     40 4E 05 F1 | 	add	fp, #64
2bd84     A7 16 62 FC | 	wrlong	arg03, fp
2bd88     08 4E 85 F1 | 	sub	fp, #8
2bd8c     A7 14 02 FB | 	rdlong	arg02, fp
2bd90     0A 13 02 F6 | 	mov	arg01, arg02
2bd94     54 14 06 F1 | 	add	arg02, #84
2bd98     4C 4E 85 F1 | 	sub	fp, #76
2bd9c     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
2bda0     4C 4E 05 F1 | 	add	fp, #76
2bda4     A7 16 02 FB | 	rdlong	arg03, fp
2bda8     03 16 06 F1 | 	add	arg03, #3
2bdac     0B 03 48 FC | 	wrbyte	#1, arg03
2bdb0     40 4E 85 F1 | 	sub	fp, #64
2bdb4     A7 12 02 F6 | 	mov	arg01, fp
2bdb8     0C 4E 85 F1 | 	sub	fp, #12
2bdbc     44 BA BF FD | 	call	#_fatfs_cc_dir_register
2bdc0     08 4E 05 F1 | 	add	fp, #8
2bdc4     A7 FA 61 FC | 	wrlong	result1, fp
2bdc8     08 4E 85 F1 | 	sub	fp, #8
2bdcc                 | LR__4410
2bdcc                 | LR__4411
2bdcc     08 4E 05 F1 | 	add	fp, #8
2bdd0     A7 FA 09 FB | 	rdlong	result1, fp wz
2bdd4     08 4E 85 F1 | 	sub	fp, #8
2bdd8     88 00 90 5D |  if_ne	jmp	#LR__4412
2bddc     28 4E 05 F1 | 	add	fp, #40
2bde0     A7 12 02 FB | 	rdlong	arg01, fp
2bde4     16 12 06 F1 | 	add	arg01, #22
2bde8     30 4E 05 F1 | 	add	fp, #48
2bdec     A7 14 02 FB | 	rdlong	arg02, fp
2bdf0     09 15 62 FC | 	wrlong	arg02, arg01
2bdf4     0C 4E 85 F1 | 	sub	fp, #12
2bdf8     A7 12 02 FB | 	rdlong	arg01, fp
2bdfc     24 4E 85 F1 | 	sub	fp, #36
2be00     A7 14 02 FB | 	rdlong	arg02, fp
2be04     28 4E 05 F1 | 	add	fp, #40
2be08     A7 16 02 FB | 	rdlong	arg03, fp
2be0c     50 4E 85 F1 | 	sub	fp, #80
2be10     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
2be14     28 4E 05 F1 | 	add	fp, #40
2be18     A7 FA 01 FB | 	rdlong	result1, fp
2be1c     0B FA 05 F1 | 	add	result1, #11
2be20     FD 20 48 FC | 	wrbyte	#16, result1
2be24     24 4E 05 F1 | 	add	fp, #36
2be28     A7 FA 01 FB | 	rdlong	result1, fp
2be2c     03 FA 05 F1 | 	add	result1, #3
2be30     FD 02 48 FC | 	wrbyte	#1, result1
2be34     44 4E 85 F1 | 	sub	fp, #68
2be38     A7 FA 09 FB | 	rdlong	result1, fp wz
2be3c     08 4E 85 F1 | 	sub	fp, #8
2be40     3C 00 90 5D |  if_ne	jmp	#LR__4413
2be44     4C 4E 05 F1 | 	add	fp, #76
2be48     A7 12 02 FB | 	rdlong	arg01, fp
2be4c     4C 4E 85 F1 | 	sub	fp, #76
2be50     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
2be54     08 4E 05 F1 | 	add	fp, #8
2be58     A7 FA 61 FC | 	wrlong	result1, fp
2be5c     08 4E 85 F1 | 	sub	fp, #8
2be60     1C 00 90 FD | 	jmp	#LR__4413
2be64                 | LR__4412
2be64     3C 4E 05 F1 | 	add	fp, #60
2be68     A7 12 02 F6 | 	mov	arg01, fp
2be6c     14 4E 05 F1 | 	add	fp, #20
2be70     A7 14 02 FB | 	rdlong	arg02, fp
2be74     50 4E 85 F1 | 	sub	fp, #80
2be78     00 16 06 F6 | 	mov	arg03, #0
2be7c     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
2be80                 | LR__4413
2be80                 | LR__4414
2be80                 | LR__4415
2be80                 | ' 				remove_chain(&sobj, dcl, 0);
2be80                 | ' 			}
2be80                 | ' 		}
2be80                 | ' 		;
2be80                 | ' 	}
2be80                 | ' 
2be80                 | ' 	return res ;
2be80     08 4E 05 F1 | 	add	fp, #8
2be84     A7 FA 01 FB | 	rdlong	result1, fp
2be88     08 4E 85 F1 | 	sub	fp, #8
2be8c     A7 F0 03 F6 | 	mov	ptra, fp
2be90     B2 00 A0 FD | 	call	#popregs_
2be94                 | _fatfs_cc_f_mkdir_ret
2be94     2D 00 64 FD | 	ret
2be98                 | 
2be98                 | _fatfs_cc_f_rename
2be98     01 4A 05 F6 | 	mov	COUNT_, #1
2be9c     A8 00 A0 FD | 	call	#pushregs_
2bea0     9C F0 07 F1 | 	add	ptra, #156
2bea4     04 4E 05 F1 | 	add	fp, #4
2bea8     A7 12 62 FC | 	wrlong	arg01, fp
2beac     04 4E 05 F1 | 	add	fp, #4
2beb0     A7 14 62 FC | 	wrlong	arg02, fp
2beb4     A7 12 02 F6 | 	mov	arg01, fp
2beb8     08 4E 85 F1 | 	sub	fp, #8
2bebc     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
2bec0     04 4E 05 F1 | 	add	fp, #4
2bec4     A7 12 02 F6 | 	mov	arg01, fp
2bec8     6C 4E 05 F1 | 	add	fp, #108
2becc     A7 14 02 F6 | 	mov	arg02, fp
2bed0     70 4E 85 F1 | 	sub	fp, #112
2bed4     02 16 06 F6 | 	mov	arg03, #2
2bed8     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
2bedc     0C 4E 05 F1 | 	add	fp, #12
2bee0     A7 FA 61 FC | 	wrlong	result1, fp
2bee4     0C 4E 85 F1 | 	sub	fp, #12
2bee8     00 FA 0D F2 | 	cmp	result1, #0 wz
2beec     44 03 90 5D |  if_ne	jmp	#LR__4433
2bef0     70 4E 05 F1 | 	add	fp, #112
2bef4     A7 16 02 FB | 	rdlong	arg03, fp
2bef8     60 4E 85 F1 | 	sub	fp, #96
2befc     A7 16 62 FC | 	wrlong	arg03, fp
2bf00     A7 12 02 F6 | 	mov	arg01, fp
2bf04     0C 4E 85 F1 | 	sub	fp, #12
2bf08     A7 14 02 FB | 	rdlong	arg02, fp
2bf0c     04 4E 85 F1 | 	sub	fp, #4
2bf10     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
2bf14     0C 4E 05 F1 | 	add	fp, #12
2bf18     A7 FA 61 FC | 	wrlong	result1, fp
2bf1c     00 FA 4D F2 | 	cmps	result1, #0 wz
2bf20     0C 4E 85 F1 | 	sub	fp, #12
2bf24     1C 00 90 5D |  if_ne	jmp	#LR__4420
2bf28     3B 4E 05 F1 | 	add	fp, #59
2bf2c     A7 FA C1 FA | 	rdbyte	result1, fp
2bf30     3B 4E 85 F1 | 	sub	fp, #59
2bf34     A0 FA CD F7 | 	test	result1, #160 wz
2bf38     0C 4E 05 51 |  if_ne	add	fp, #12
2bf3c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2bf40     0C 4E 85 51 |  if_ne	sub	fp, #12
2bf44                 | LR__4420
2bf44     0C 4E 05 F1 | 	add	fp, #12
2bf48     A7 1E 0A FB | 	rdlong	local01, fp wz
2bf4c     0C 4E 85 F1 | 	sub	fp, #12
2bf50     E0 02 90 5D |  if_ne	jmp	#LR__4432
2bf54     74 4E 05 F1 | 	add	fp, #116
2bf58     A7 12 02 F6 | 	mov	arg01, fp
2bf5c     48 4E 85 F1 | 	sub	fp, #72
2bf60     A7 14 02 FB | 	rdlong	arg02, fp
2bf64     2C 4E 85 F1 | 	sub	fp, #44
2bf68     20 16 06 F6 | 	mov	arg03, #32
2bf6c     C8 2A BF FD | 	call	#__system____builtin_memmove
2bf70     40 4E 05 F1 | 	add	fp, #64
2bf74     A7 12 02 F6 | 	mov	arg01, fp
2bf78     30 4E 85 F1 | 	sub	fp, #48
2bf7c     A7 14 02 F6 | 	mov	arg02, fp
2bf80     10 4E 85 F1 | 	sub	fp, #16
2bf84     30 16 06 F6 | 	mov	arg03, #48
2bf88     AC 2A BF FD | 	call	#__system____builtin_memmove
2bf8c     40 4E 05 F1 | 	add	fp, #64
2bf90     A7 12 02 F6 | 	mov	arg01, fp
2bf94     38 4E 85 F1 | 	sub	fp, #56
2bf98     A7 14 02 FB | 	rdlong	arg02, fp
2bf9c     08 4E 85 F1 | 	sub	fp, #8
2bfa0     34 CA BF FD | 	call	#_fatfs_cc_follow_path
2bfa4     0C 4E 05 F1 | 	add	fp, #12
2bfa8     A7 FA 61 FC | 	wrlong	result1, fp
2bfac     0C 4E 85 F1 | 	sub	fp, #12
2bfb0     00 FA 0D F2 | 	cmp	result1, #0 wz
2bfb4     4C 00 90 5D |  if_ne	jmp	#LR__4423
2bfb8     48 4E 05 F1 | 	add	fp, #72
2bfbc     A7 FA 01 FB | 	rdlong	result1, fp
2bfc0     30 4E 85 F1 | 	sub	fp, #48
2bfc4     A7 16 02 FB | 	rdlong	arg03, fp
2bfc8     18 4E 85 F1 | 	sub	fp, #24
2bfcc     0B FB 09 F2 | 	cmp	result1, arg03 wz
2bfd0     20 00 90 5D |  if_ne	jmp	#LR__4421
2bfd4     50 4E 05 F1 | 	add	fp, #80
2bfd8     A7 FA 01 FB | 	rdlong	result1, fp
2bfdc     30 4E 85 F1 | 	sub	fp, #48
2bfe0     A7 16 02 FB | 	rdlong	arg03, fp
2bfe4     20 4E 85 F1 | 	sub	fp, #32
2bfe8     0B FB 09 F2 | 	cmp	result1, arg03 wz
2bfec     04 1E 06 A6 |  if_e	mov	local01, #4
2bff0     04 00 90 AD |  if_e	jmp	#LR__4422
2bff4                 | LR__4421
2bff4     08 1E 06 F6 | 	mov	local01, #8
2bff8                 | LR__4422
2bff8     0C 4E 05 F1 | 	add	fp, #12
2bffc     A7 1E 62 FC | 	wrlong	local01, fp
2c000     0C 4E 85 F1 | 	sub	fp, #12
2c004                 | LR__4423
2c004     0C 4E 05 F1 | 	add	fp, #12
2c008     A7 1E 02 FB | 	rdlong	local01, fp
2c00c     0C 4E 85 F1 | 	sub	fp, #12
2c010     04 1E 0E F2 | 	cmp	local01, #4 wz
2c014     CC 01 90 5D |  if_ne	jmp	#LR__4429
2c018     40 4E 05 F1 | 	add	fp, #64
2c01c     A7 12 02 F6 | 	mov	arg01, fp
2c020     40 4E 85 F1 | 	sub	fp, #64
2c024     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
2c028     0C 4E 05 F1 | 	add	fp, #12
2c02c     A7 FA 61 FC | 	wrlong	result1, fp
2c030     0C 4E 85 F1 | 	sub	fp, #12
2c034     00 FA 0D F2 | 	cmp	result1, #0 wz
2c038     A8 01 90 5D |  if_ne	jmp	#LR__4428
2c03c     5C 4E 05 F1 | 	add	fp, #92
2c040     A7 12 02 FB | 	rdlong	arg01, fp
2c044     38 4E 05 F1 | 	add	fp, #56
2c048     A7 12 62 FC | 	wrlong	arg01, fp
2c04c     0D 12 06 F1 | 	add	arg01, #13
2c050     20 4E 85 F1 | 	sub	fp, #32
2c054     A7 14 02 F6 | 	mov	arg02, fp
2c058     74 4E 85 F1 | 	sub	fp, #116
2c05c     0D 14 06 F1 | 	add	arg02, #13
2c060     13 16 06 F6 | 	mov	arg03, #19
2c064     D0 29 BF FD | 	call	#__system____builtin_memmove
2c068     94 4E 05 F1 | 	add	fp, #148
2c06c     A7 1E 02 FB | 	rdlong	local01, fp
2c070     15 4E 85 F1 | 	sub	fp, #21
2c074     A7 FA C1 FA | 	rdbyte	result1, fp
2c078     0B 1E 06 F1 | 	add	local01, #11
2c07c     0F FB 41 FC | 	wrbyte	result1, local01
2c080     15 4E 05 F1 | 	add	fp, #21
2c084     A7 1E 02 FB | 	rdlong	local01, fp
2c088     94 4E 85 F1 | 	sub	fp, #148
2c08c     0B 1E 06 F1 | 	add	local01, #11
2c090     0F 1F C2 FA | 	rdbyte	local01, local01
2c094     10 1E CE F7 | 	test	local01, #16 wz
2c098     24 00 90 5D |  if_ne	jmp	#LR__4424
2c09c     94 4E 05 F1 | 	add	fp, #148
2c0a0     A7 FA 01 FB | 	rdlong	result1, fp
2c0a4     FD 1E 02 F6 | 	mov	local01, result1
2c0a8     94 4E 85 F1 | 	sub	fp, #148
2c0ac     0B FA 05 F1 | 	add	result1, #11
2c0b0     FD FA C1 FA | 	rdbyte	result1, result1
2c0b4     20 FA 45 F5 | 	or	result1, #32
2c0b8     0B 1E 06 F1 | 	add	local01, #11
2c0bc     0F FB 41 FC | 	wrbyte	result1, local01
2c0c0                 | LR__4424
2c0c0     70 4E 05 F1 | 	add	fp, #112
2c0c4     A7 1E 02 FB | 	rdlong	local01, fp
2c0c8     03 1E 06 F1 | 	add	local01, #3
2c0cc     0F 03 48 FC | 	wrbyte	#1, local01
2c0d0     24 4E 05 F1 | 	add	fp, #36
2c0d4     A7 1E 02 FB | 	rdlong	local01, fp
2c0d8     94 4E 85 F1 | 	sub	fp, #148
2c0dc     0B 1E 06 F1 | 	add	local01, #11
2c0e0     0F 1F C2 FA | 	rdbyte	local01, local01
2c0e4     10 1E CE F7 | 	test	local01, #16 wz
2c0e8     F8 00 90 AD |  if_e	jmp	#LR__4427
2c0ec     18 4E 05 F1 | 	add	fp, #24
2c0f0     A7 16 02 FB | 	rdlong	arg03, fp
2c0f4     30 4E 05 F1 | 	add	fp, #48
2c0f8     A7 1E 02 FB | 	rdlong	local01, fp
2c0fc     48 4E 85 F1 | 	sub	fp, #72
2c100     0F 17 0A F2 | 	cmp	arg03, local01 wz
2c104     DC 00 90 AD |  if_e	jmp	#LR__4427
2c108     70 4E 05 F1 | 	add	fp, #112
2c10c     A7 12 02 FB | 	rdlong	arg01, fp
2c110     09 1F 02 F6 | 	mov	local01, arg01
2c114     24 4E 05 F1 | 	add	fp, #36
2c118     A7 14 02 FB | 	rdlong	arg02, fp
2c11c     94 4E 85 F1 | 	sub	fp, #148
2c120     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
2c124     FD 14 02 F6 | 	mov	arg02, result1
2c128     0F 13 02 F6 | 	mov	arg01, local01
2c12c     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
2c130     98 4E 05 F1 | 	add	fp, #152
2c134     A7 FA 61 FC | 	wrlong	result1, fp
2c138     00 FA 4D F2 | 	cmps	result1, #0 wz
2c13c     98 4E 85 F1 | 	sub	fp, #152
2c140     0C 4E 05 A1 |  if_e	add	fp, #12
2c144     A7 04 68 AC |  if_e	wrlong	#2, fp
2c148     0C 4E 85 A1 |  if_e	sub	fp, #12
2c14c     94 00 90 AD |  if_e	jmp	#LR__4426
2c150     70 4E 05 F1 | 	add	fp, #112
2c154     A7 12 02 FB | 	rdlong	arg01, fp
2c158     28 4E 05 F1 | 	add	fp, #40
2c15c     A7 14 02 FB | 	rdlong	arg02, fp
2c160     98 4E 85 F1 | 	sub	fp, #152
2c164     4C A0 BF FD | 	call	#_fatfs_cc_move_window
2c168     0C 4E 05 F1 | 	add	fp, #12
2c16c     A7 FA 61 FC | 	wrlong	result1, fp
2c170     64 4E 05 F1 | 	add	fp, #100
2c174     A7 1E 02 FB | 	rdlong	local01, fp
2c178     54 1E 06 F1 | 	add	local01, #84
2c17c     24 4E 05 F1 | 	add	fp, #36
2c180     A7 1E 62 FC | 	wrlong	local01, fp
2c184     88 4E 85 F1 | 	sub	fp, #136
2c188     A7 1E 0A FB | 	rdlong	local01, fp wz
2c18c     0C 4E 85 F1 | 	sub	fp, #12
2c190     50 00 90 5D |  if_ne	jmp	#LR__4425
2c194     94 4E 05 F1 | 	add	fp, #148
2c198     A7 1E 02 FB | 	rdlong	local01, fp
2c19c     94 4E 85 F1 | 	sub	fp, #148
2c1a0     01 1E 06 F1 | 	add	local01, #1
2c1a4     0F 1F C2 FA | 	rdbyte	local01, local01
2c1a8     2E 1E 0E F2 | 	cmp	local01, #46 wz
2c1ac     34 00 90 5D |  if_ne	jmp	#LR__4425
2c1b0     70 4E 05 F1 | 	add	fp, #112
2c1b4     A7 12 02 FB | 	rdlong	arg01, fp
2c1b8     24 4E 05 F1 | 	add	fp, #36
2c1bc     A7 14 02 FB | 	rdlong	arg02, fp
2c1c0     4C 4E 85 F1 | 	sub	fp, #76
2c1c4     A7 16 02 FB | 	rdlong	arg03, fp
2c1c8     48 4E 85 F1 | 	sub	fp, #72
2c1cc     50 AD BF FD | 	call	#_fatfs_cc_st_clust
2c1d0     70 4E 05 F1 | 	add	fp, #112
2c1d4     A7 1E 02 FB | 	rdlong	local01, fp
2c1d8     70 4E 85 F1 | 	sub	fp, #112
2c1dc     03 1E 06 F1 | 	add	local01, #3
2c1e0     0F 03 48 FC | 	wrbyte	#1, local01
2c1e4                 | LR__4425
2c1e4                 | LR__4426
2c1e4                 | LR__4427
2c1e4                 | LR__4428
2c1e4                 | LR__4429
2c1e4     0C 4E 05 F1 | 	add	fp, #12
2c1e8     A7 1E 0A FB | 	rdlong	local01, fp wz
2c1ec     0C 4E 85 F1 | 	sub	fp, #12
2c1f0     40 00 90 5D |  if_ne	jmp	#LR__4431
2c1f4     10 4E 05 F1 | 	add	fp, #16
2c1f8     A7 12 02 F6 | 	mov	arg01, fp
2c1fc     10 4E 85 F1 | 	sub	fp, #16
2c200     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
2c204     0C 4E 05 F1 | 	add	fp, #12
2c208     A7 FA 61 FC | 	wrlong	result1, fp
2c20c     0C 4E 85 F1 | 	sub	fp, #12
2c210     00 FA 0D F2 | 	cmp	result1, #0 wz
2c214     1C 00 90 5D |  if_ne	jmp	#LR__4430
2c218     70 4E 05 F1 | 	add	fp, #112
2c21c     A7 12 02 FB | 	rdlong	arg01, fp
2c220     70 4E 85 F1 | 	sub	fp, #112
2c224     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
2c228     0C 4E 05 F1 | 	add	fp, #12
2c22c     A7 FA 61 FC | 	wrlong	result1, fp
2c230     0C 4E 85 F1 | 	sub	fp, #12
2c234                 | LR__4430
2c234                 | LR__4431
2c234                 | LR__4432
2c234                 | LR__4433
2c234                 | ' 					res = sync_fs(fs);
2c234                 | ' 				}
2c234                 | ' 			}
2c234                 | ' 
2c234                 | ' 		}
2c234                 | ' 		;
2c234                 | ' 	}
2c234                 | ' 
2c234                 | ' 	return res ;
2c234     0C 4E 05 F1 | 	add	fp, #12
2c238     A7 FA 01 FB | 	rdlong	result1, fp
2c23c     0C 4E 85 F1 | 	sub	fp, #12
2c240     A7 F0 03 F6 | 	mov	ptra, fp
2c244     B2 00 A0 FD | 	call	#popregs_
2c248                 | _fatfs_cc_f_rename_ret
2c248     2D 00 64 FD | 	ret
2c24c                 | 
2c24c                 | _fatfs_cc_time
2c24c     00 4A 05 F6 | 	mov	COUNT_, #0
2c250     A8 00 A0 FD | 	call	#pushregs_
2c254     14 F0 07 F1 | 	add	ptra, #20
2c258     04 4E 05 F1 | 	add	fp, #4
2c25c     A7 12 62 FC | 	wrlong	arg01, fp
2c260     04 4E 05 F1 | 	add	fp, #4
2c264     A7 12 02 F6 | 	mov	arg01, fp
2c268     08 4E 85 F1 | 	sub	fp, #8
2c26c     00 14 06 F6 | 	mov	arg02, #0
2c270     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
2c274     08 4E 05 F1 | 	add	fp, #8
2c278     A7 FA 01 FB | 	rdlong	result1, fp
2c27c     08 4E 05 F1 | 	add	fp, #8
2c280     A7 FA 61 FC | 	wrlong	result1, fp
2c284     0C 4E 85 F1 | 	sub	fp, #12
2c288     A7 FA 09 FB | 	rdlong	result1, fp wz
2c28c     04 4E 85 F1 | 	sub	fp, #4
2c290     18 00 90 AD |  if_e	jmp	#LR__4440
2c294     04 4E 05 F1 | 	add	fp, #4
2c298     A7 FA 01 FB | 	rdlong	result1, fp
2c29c     0C 4E 05 F1 | 	add	fp, #12
2c2a0     A7 14 02 FB | 	rdlong	arg02, fp
2c2a4     10 4E 85 F1 | 	sub	fp, #16
2c2a8     FD 14 62 FC | 	wrlong	arg02, result1
2c2ac                 | LR__4440
2c2ac                 | '         *tp = now;
2c2ac                 | '     return now;
2c2ac     10 4E 05 F1 | 	add	fp, #16
2c2b0     A7 FA 01 FB | 	rdlong	result1, fp
2c2b4     10 4E 85 F1 | 	sub	fp, #16
2c2b8     A7 F0 03 F6 | 	mov	ptra, fp
2c2bc     B2 00 A0 FD | 	call	#popregs_
2c2c0                 | _fatfs_cc_time_ret
2c2c0     2D 00 64 FD | 	ret
2c2c4                 | 
2c2c4                 | _fatfs_cc_mktime
2c2c4     06 4A 05 F6 | 	mov	COUNT_, #6
2c2c8     A8 00 A0 FD | 	call	#pushregs_
2c2cc     09 1F 02 F6 | 	mov	local01, arg01
2c2d0     14 1E 06 F1 | 	add	local01, #20
2c2d4     0F 13 02 FB | 	rdlong	arg01, local01
2c2d8     14 1E 86 F1 | 	sub	local01, #20
2c2dc     46 12 56 F2 | 	cmps	arg01, #70 wc
2c2e0                 | '                 return (time_t) -1;
2c2e0     01 FA 65 C6 |  if_b	neg	result1, #1
2c2e4     7C 01 90 CD |  if_b	jmp	#LR__4454
2c2e8     03 00 00 FF 
2c2ec     6C 21 06 F6 | 	mov	local02, ##1900
2c2f0     14 1E 06 F1 | 	add	local01, #20
2c2f4     0F FB 01 FB | 	rdlong	result1, local01
2c2f8     FD 20 02 F1 | 	add	local02, result1
2c2fc     08 1E 86 F1 | 	sub	local01, #8
2c300     0F 23 02 FB | 	rdlong	local03, local01
2c304     01 22 86 F1 | 	sub	local03, #1
2c308     04 1E 06 F1 | 	add	local01, #4
2c30c     0F 13 02 FB | 	rdlong	arg01, local01
2c310     10 1E 86 F1 | 	sub	local01, #16
2c314     02 12 66 F0 | 	shl	arg01, #2
2c318     02 00 00 FF 
2c31c     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
2c320     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2c324     09 FB 01 FB | 	rdlong	result1, arg01
2c328     FD 22 02 F1 | 	add	local03, result1
2c32c     10 13 02 F6 | 	mov	arg01, local02
2c330     02 00 00 FF 
2c334     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
2c338     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
2c33c     00 FA 0D F2 | 	cmp	result1, #0 wz
2c340     1C 00 90 AD |  if_e	jmp	#LR__4450
2c344     00 24 06 F6 | 	mov	local04, #0
2c348     10 1E 06 F1 | 	add	local01, #16
2c34c     0F FB 01 FB | 	rdlong	result1, local01
2c350     10 1E 86 F1 | 	sub	local01, #16
2c354     02 FA 55 F2 | 	cmps	result1, #2 wc
2c358     01 24 06 36 |  if_ae	mov	local04, #1
2c35c     04 00 90 FD | 	jmp	#LR__4451
2c360                 | LR__4450
2c360     00 24 06 F6 | 	mov	local04, #0
2c364                 | LR__4451
2c364     04 1E 06 F1 | 	add	local01, #4
2c368     0F FB 01 FB | 	rdlong	result1, local01
2c36c     04 1E 86 F1 | 	sub	local01, #4
2c370     0F 27 02 FB | 	rdlong	local05, local01
2c374     08 1E 06 F1 | 	add	local01, #8
2c378     0F 13 02 FB | 	rdlong	arg01, local01
2c37c     07 00 00 FF 
2c380     10 12 06 FD | 	qmul	arg01, ##3600
2c384     12 23 02 F1 | 	add	local03, local04
2c388     FD 24 02 F6 | 	mov	local04, result1
2c38c     04 24 66 F0 | 	shl	local04, #4
2c390     FD 24 82 F1 | 	sub	local04, result1
2c394     02 24 66 F0 | 	shl	local04, #2
2c398     12 27 02 F1 | 	add	local05, local04
2c39c     08 1E 86 F1 | 	sub	local01, #8
2c3a0     18 24 62 FD | 	getqx	local04
2c3a4     A8 00 00 FF 
2c3a8     80 23 06 FD | 	qmul	local03, ##86400
2c3ac     12 27 02 F1 | 	add	local05, local04
2c3b0     10 23 02 F6 | 	mov	local03, local02
2c3b4     03 00 00 FF 
2c3b8     B2 23 86 F1 | 	sub	local03, ##1970
2c3bc     18 24 62 FD | 	getqx	local04
2c3c0     99 F0 00 FF 
2c3c4     80 23 06 FD | 	qmul	local03, ##31536000
2c3c8     12 27 02 F1 | 	add	local05, local04
2c3cc     10 23 02 F6 | 	mov	local03, local02
2c3d0     03 00 00 FF 
2c3d4     B1 23 86 F1 | 	sub	local03, ##1969
2c3d8     11 29 52 F6 | 	abs	local06, local03 wc
2c3dc     02 28 46 F0 | 	shr	local06, #2
2c3e0     14 29 82 F6 | 	negc	local06, local06
2c3e4     03 00 00 FF 
2c3e8     D1 21 56 F2 | 	cmps	local02, ##2001 wc
2c3ec     18 24 62 FD | 	getqx	local04
2c3f0     12 27 02 F1 | 	add	local05, local04
2c3f4     18 00 90 CD |  if_b	jmp	#LR__4452
2c3f8     03 00 00 FF 
2c3fc     D0 21 86 F1 | 	sub	local02, ##2000
2c400     10 25 52 F6 | 	abs	local04, local02 wc
2c404     64 24 16 FD | 	qdiv	local04, #100
2c408     18 24 62 FD | 	getqx	local04
2c40c     12 29 A2 F3 | 	sumnc	local06, local04
2c410                 | LR__4452
2c410     A8 00 00 FF 
2c414     80 29 06 FD | 	qmul	local06, ##86400
2c418     18 28 62 FD | 	getqx	local06
2c41c     14 27 02 F1 | 	add	local05, local06
2c420     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
2c424     02 00 00 FF 
2c428     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2c42c     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
2c430     14 27 02 F1 | 	add	local05, local06
2c434     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
2c438     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2c43c     02 00 00 FF 
2c440     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2c444     01 22 0E F2 | 	cmp	local03, #1 wz
2c448     14 00 90 5D |  if_ne	jmp	#LR__4453
2c44c     0F 13 02 F6 | 	mov	arg01, local01
2c450     DC 19 B0 FD | 	call	#_fatfs_cc___indst
2c454     00 FA 0D F2 | 	cmp	result1, #0 wz
2c458     07 00 00 5F 
2c45c     10 26 86 51 |  if_ne	sub	local05, ##3600
2c460                 | LR__4453
2c460                 | '                 s -=  (3600L) ;
2c460                 | ' 
2c460                 | '         return s;
2c460     13 FB 01 F6 | 	mov	result1, local05
2c464                 | LR__4454
2c464     A7 F0 03 F6 | 	mov	ptra, fp
2c468     B2 00 A0 FD | 	call	#popregs_
2c46c                 | _fatfs_cc_mktime_ret
2c46c     2D 00 64 FD | 	ret
2c470                 | 
2c470                 | _fatfs_cc__gmtime_r
2c470     03 4A 05 F6 | 	mov	COUNT_, #3
2c474     A8 00 A0 FD | 	call	#pushregs_
2c478     09 1F 02 FB | 	rdlong	local01, arg01
2c47c     A8 00 00 FF 
2c480     80 1F 16 FD | 	qdiv	local01, ##86400
2c484     18 FA 61 FD | 	getqx	result1
2c488     04 FA 05 F1 | 	add	result1, #4
2c48c     07 FA 15 FD | 	qdiv	result1, #7
2c490     18 14 06 F1 | 	add	arg02, #24
2c494     D1 7F 27 FF 
2c498     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
2c49c     D1 7F 27 3F 
2c4a0     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
2c4a4     03 00 00 3F 
2c4a8     DC 21 06 36 |  if_ae	mov	local02, ##2012
2c4ac     03 00 00 CF 
2c4b0     B2 21 06 C6 |  if_b	mov	local02, ##1970
2c4b4                 | ' 	  year = 1970;
2c4b4                 | ' 	}
2c4b4                 | ' 
2c4b4                 | ' 	for(;;) {
2c4b4     19 FA 61 FD | 	getqy	result1
2c4b8     0A FB 61 FC | 	wrlong	result1, arg02
2c4bc     18 14 86 F1 | 	sub	arg02, #24
2c4c0                 | LR__4460
2c4c0     10 13 02 F6 | 	mov	arg01, local02
2c4c4     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2c4c8     00 FA 0D F2 | 	cmp	result1, #0 wz
2c4cc     42 F1 00 5F 
2c4d0     00 23 06 56 |  if_ne	mov	local03, ##31622400
2c4d4     99 F0 00 AF 
2c4d8     80 23 06 A6 |  if_e	mov	local03, ##31536000
2c4dc     11 1F 12 F2 | 	cmp	local01, local03 wc
2c4e0                 | ' 	    break;
2c4e0     01 20 06 31 |  if_ae	add	local02, #1
2c4e4     11 1F 82 31 |  if_ae	sub	local01, local03
2c4e8     D4 FF 9F 3D |  if_ae	jmp	#LR__4460
2c4ec     A8 00 00 FF 
2c4f0     80 1F 16 FD | 	qdiv	local01, ##86400
2c4f4     10 23 02 F6 | 	mov	local03, local02
2c4f8     03 00 00 FF 
2c4fc     6C 23 86 F1 | 	sub	local03, ##1900
2c500     14 14 06 F1 | 	add	arg02, #20
2c504     0A 23 62 FC | 	wrlong	local03, arg02
2c508     08 14 06 F1 | 	add	arg02, #8
2c50c     10 13 02 F6 | 	mov	arg01, local02
2c510     18 20 62 FD | 	getqx	local02
2c514     0A 21 62 FC | 	wrlong	local02, arg02
2c518     1C 14 86 F1 | 	sub	arg02, #28
2c51c     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2c520     00 FA 0D F2 | 	cmp	result1, #0 wz
2c524     1D 22 06 56 |  if_ne	mov	local03, #29
2c528     1C 22 06 A6 |  if_e	mov	local03, #28
2c52c     02 00 00 FF 
2c530     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
2c534     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
2c538     02 00 00 FF 
2c53c     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
2c540                 | ' 
2c540                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
2c540                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
2c540     00 12 06 F6 | 	mov	arg01, #0
2c544     97 2A 48 FB | 	callpa	#(@LR__4462-@LR__4461)>>2,fcache_load_ptr_
2c548                 | LR__4461
2c548     09 23 02 F6 | 	mov	local03, arg01
2c54c     02 22 66 F0 | 	shl	local03, #2
2c550     02 00 00 FF 
2c554     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2c558     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2c55c     11 23 02 FB | 	rdlong	local03, local03
2c560     11 21 52 F2 | 	cmps	local02, local03 wc
2c564     02 00 00 FF 
2c568     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2c56c     2C 00 90 CD |  if_b	jmp	#LR__4463
2c570     09 23 02 F6 | 	mov	local03, arg01
2c574     02 22 66 F0 | 	shl	local03, #2
2c578     02 00 00 FF 
2c57c     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2c580     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2c584     11 23 02 FB | 	rdlong	local03, local03
2c588     11 21 82 F1 | 	sub	local02, local03
2c58c     01 12 06 F1 | 	add	arg01, #1
2c590     02 00 00 FF 
2c594     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2c598     AC FF 9F FD | 	jmp	#LR__4461
2c59c                 | LR__4462
2c59c                 | LR__4463
2c59c     A8 00 00 FF 
2c5a0     80 1F 16 FD | 	qdiv	local01, ##86400
2c5a4     10 14 06 F1 | 	add	arg02, #16
2c5a8     0A 13 62 FC | 	wrlong	arg01, arg02
2c5ac     01 20 06 F1 | 	add	local02, #1
2c5b0     04 14 86 F1 | 	sub	arg02, #4
2c5b4     0A 21 62 FC | 	wrlong	local02, arg02
2c5b8     19 1E 62 FD | 	getqy	local01
2c5bc     07 00 00 FF 
2c5c0     10 1E 16 FD | 	qdiv	local01, ##3600
2c5c4     18 22 62 FD | 	getqx	local03
2c5c8     07 00 00 FF 
2c5cc     10 1E 16 FD | 	qdiv	local01, ##3600
2c5d0     04 14 86 F1 | 	sub	arg02, #4
2c5d4     0A 23 62 FC | 	wrlong	local03, arg02
2c5d8     19 1E 62 FD | 	getqy	local01
2c5dc     3C 1E 16 FD | 	qdiv	local01, #60
2c5e0     18 22 62 FD | 	getqx	local03
2c5e4     3C 1E 16 FD | 	qdiv	local01, #60
2c5e8     04 14 86 F1 | 	sub	arg02, #4
2c5ec     0A 23 62 FC | 	wrlong	local03, arg02
2c5f0     04 14 86 F1 | 	sub	arg02, #4
2c5f4                 | '         stm->tm_isdst = 0;
2c5f4                 | ' 
2c5f4                 | ' ;
2c5f4                 | '         return stm;
2c5f4     0A FB 01 F6 | 	mov	result1, arg02
2c5f8     19 22 62 FD | 	getqy	local03
2c5fc     0A 23 62 FC | 	wrlong	local03, arg02
2c600     20 14 06 F1 | 	add	arg02, #32
2c604     0A 01 68 FC | 	wrlong	#0, arg02
2c608     A7 F0 03 F6 | 	mov	ptra, fp
2c60c     B2 00 A0 FD | 	call	#popregs_
2c610                 | _fatfs_cc__gmtime_r_ret
2c610     2D 00 64 FD | 	ret
2c614                 | 
2c614                 | _fatfs_cc__tzset
2c614     70 01 00 FF 
2c618     59 13 06 F6 | 	mov	arg01, ##@LR__4775
2c61c     34 00 B0 FD | 	call	#_fatfs_cc_getenv
2c620     FD 12 02 F6 | 	mov	arg01, result1
2c624     02 00 00 FF 
2c628     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
2c62c     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2c630     02 00 00 FF 
2c634     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2c638     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
2c63c     02 00 00 FF 
2c640     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2c644     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
2c648     02 00 00 FF 
2c64c     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
2c650                 | _fatfs_cc__tzset_ret
2c650     2D 00 64 FD | 	ret
2c654                 | 
2c654                 | _fatfs_cc_getenv
2c654     06 4A 05 F6 | 	mov	COUNT_, #6
2c658     A8 00 A0 FD | 	call	#pushregs_
2c65c     09 1F 02 F6 | 	mov	local01, arg01
2c660     09 21 02 F6 | 	mov	local02, arg01
2c664     97 06 48 FB | 	callpa	#(@LR__4471-@LR__4470)>>2,fcache_load_ptr_
2c668                 | LR__4470
2c668     10 FB C9 FA | 	rdbyte	result1, local02 wz
2c66c     01 20 06 51 |  if_ne	add	local02, #1
2c670     F4 FF 9F 5D |  if_ne	jmp	#LR__4470
2c674                 | LR__4471
2c674     09 21 82 F1 | 	sub	local02, arg01
2c678     10 FB 01 F6 | 	mov	result1, local02
2c67c     02 00 00 FF 
2c680     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2c684     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
2c688     02 00 00 FF 
2c68c     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2c690                 | '             return 0;
2c690     00 FA 05 A6 |  if_e	mov	result1, #0
2c694     5C 00 90 AD |  if_e	jmp	#LR__4474
2c698                 | ' 
2c698                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
2c698     02 00 00 FF 
2c69c     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2c6a0     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2c6a4     02 00 00 FF 
2c6a8     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2c6ac                 | LR__4472
2c6ac     11 25 0A FB | 	rdlong	local04, local03 wz
2c6b0     3C 00 90 AD |  if_e	jmp	#LR__4473
2c6b4     12 13 02 F6 | 	mov	arg01, local04
2c6b8     0F 15 02 F6 | 	mov	arg02, local01
2c6bc     10 17 02 F6 | 	mov	arg03, local02
2c6c0     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
2c6c4     00 FA 0D F2 | 	cmp	result1, #0 wz
2c6c8     10 27 02 A6 |  if_e	mov	local05, local02
2c6cc     12 27 02 A1 |  if_e	add	local05, local04
2c6d0     13 29 C2 AA |  if_e	rdbyte	local06, local05
2c6d4     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
2c6d8                 | ' 			return name+len+1;
2c6d8     10 25 02 A1 |  if_e	add	local04, local02
2c6dc     01 24 06 A1 |  if_e	add	local04, #1
2c6e0     12 FB 01 A6 |  if_e	mov	result1, local04
2c6e4     0C 00 90 AD |  if_e	jmp	#LR__4474
2c6e8     04 22 06 F1 | 	add	local03, #4
2c6ec     BC FF 9F FD | 	jmp	#LR__4472
2c6f0                 | LR__4473
2c6f0                 | ' 	}
2c6f0                 | ' 	return 0;
2c6f0     00 FA 05 F6 | 	mov	result1, #0
2c6f4                 | LR__4474
2c6f4     A7 F0 03 F6 | 	mov	ptra, fp
2c6f8     B2 00 A0 FD | 	call	#popregs_
2c6fc                 | _fatfs_cc_getenv_ret
2c6fc     2D 00 64 FD | 	ret
2c700                 | 
2c700                 | _fatfs_cc__get_fattime
2c700     00 4A 05 F6 | 	mov	COUNT_, #0
2c704     A8 00 A0 FD | 	call	#pushregs_
2c708     34 F0 07 F1 | 	add	ptra, #52
2c70c     00 12 06 F6 | 	mov	arg01, #0
2c710     38 FB BF FD | 	call	#_fatfs_cc_time
2c714     04 4E 05 F1 | 	add	fp, #4
2c718     A7 FA 61 FC | 	wrlong	result1, fp
2c71c     A7 12 02 F6 | 	mov	arg01, fp
2c720     0C 4E 05 F1 | 	add	fp, #12
2c724     A7 14 02 F6 | 	mov	arg02, fp
2c728     10 4E 85 F1 | 	sub	fp, #16
2c72c     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
2c730     24 4E 05 F1 | 	add	fp, #36
2c734     A7 14 02 FB | 	rdlong	arg02, fp
2c738     50 14 86 F1 | 	sub	arg02, #80
2c73c     09 14 66 F0 | 	shl	arg02, #9
2c740     04 4E 85 F1 | 	sub	fp, #4
2c744     A7 FA 01 FB | 	rdlong	result1, fp
2c748     01 FA 05 F1 | 	add	result1, #1
2c74c     05 FA 65 F0 | 	shl	result1, #5
2c750     FD 14 42 F5 | 	or	arg02, result1
2c754     04 4E 85 F1 | 	sub	fp, #4
2c758     A7 FA 01 FB | 	rdlong	result1, fp
2c75c     FD 14 42 F5 | 	or	arg02, result1
2c760     14 4E 85 F1 | 	sub	fp, #20
2c764     A7 14 62 FC | 	wrlong	arg02, fp
2c768     10 4E 05 F1 | 	add	fp, #16
2c76c     A7 14 02 FB | 	rdlong	arg02, fp
2c770     0B 14 66 F0 | 	shl	arg02, #11
2c774     04 4E 85 F1 | 	sub	fp, #4
2c778     A7 FA 01 FB | 	rdlong	result1, fp
2c77c     05 FA 65 F0 | 	shl	result1, #5
2c780     FD 14 42 F5 | 	or	arg02, result1
2c784     04 4E 85 F1 | 	sub	fp, #4
2c788     A7 FA 01 FB | 	rdlong	result1, fp
2c78c     FD 14 42 F5 | 	or	arg02, result1
2c790     04 4E 85 F1 | 	sub	fp, #4
2c794     A7 14 62 FC | 	wrlong	arg02, fp
2c798                 | ' 
2c798                 | '     now = time(0);
2c798                 | '     _gmtime_r (&now, &date);
2c798                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
2c798                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
2c798                 | '     return (ffdate << 16) | fftime;
2c798     04 4E 85 F1 | 	sub	fp, #4
2c79c     A7 FA 01 FB | 	rdlong	result1, fp
2c7a0     10 FA 65 F0 | 	shl	result1, #16
2c7a4     08 4E 85 F1 | 	sub	fp, #8
2c7a8     0A FB 41 F5 | 	or	result1, arg02
2c7ac     A7 F0 03 F6 | 	mov	ptra, fp
2c7b0     B2 00 A0 FD | 	call	#popregs_
2c7b4                 | _fatfs_cc__get_fattime_ret
2c7b4     2D 00 64 FD | 	ret
2c7b8                 | 
2c7b8                 | _fatfs_cc_unixtime_0904
2c7b8     00 4A 05 F6 | 	mov	COUNT_, #0
2c7bc     A8 00 A0 FD | 	call	#pushregs_
2c7c0     34 F0 07 F1 | 	add	ptra, #52
2c7c4     04 4E 05 F1 | 	add	fp, #4
2c7c8     A7 12 62 FC | 	wrlong	arg01, fp
2c7cc     04 4E 05 F1 | 	add	fp, #4
2c7d0     A7 14 62 FC | 	wrlong	arg02, fp
2c7d4     04 4E 85 F1 | 	sub	fp, #4
2c7d8     A7 14 02 FB | 	rdlong	arg02, fp
2c7dc     09 14 46 F0 | 	shr	arg02, #9
2c7e0     7F 14 06 F5 | 	and	arg02, #127
2c7e4     50 FA 05 F6 | 	mov	result1, #80
2c7e8     0A FB 01 F1 | 	add	result1, arg02
2c7ec     20 4E 05 F1 | 	add	fp, #32
2c7f0     A7 FA 61 FC | 	wrlong	result1, fp
2c7f4     20 4E 85 F1 | 	sub	fp, #32
2c7f8     A7 FA 01 FB | 	rdlong	result1, fp
2c7fc     05 FA 45 F0 | 	shr	result1, #5
2c800     FD FA 41 F8 | 	getnib	result1, result1, #0
2c804     01 FA 85 F1 | 	sub	result1, #1
2c808     1C 4E 05 F1 | 	add	fp, #28
2c80c     A7 FA 61 FC | 	wrlong	result1, fp
2c810     1C 4E 85 F1 | 	sub	fp, #28
2c814     A7 FA 01 FB | 	rdlong	result1, fp
2c818     1F FA 05 F5 | 	and	result1, #31
2c81c     18 4E 05 F1 | 	add	fp, #24
2c820     A7 FA 61 FC | 	wrlong	result1, fp
2c824     14 4E 85 F1 | 	sub	fp, #20
2c828     A7 FA 01 FB | 	rdlong	result1, fp
2c82c     0B FA 45 F0 | 	shr	result1, #11
2c830     1F FA 05 F5 | 	and	result1, #31
2c834     10 4E 05 F1 | 	add	fp, #16
2c838     A7 FA 61 FC | 	wrlong	result1, fp
2c83c     10 4E 85 F1 | 	sub	fp, #16
2c840     A7 FA 01 FB | 	rdlong	result1, fp
2c844     05 FA 45 F0 | 	shr	result1, #5
2c848     3F FA 05 F5 | 	and	result1, #63
2c84c     0C 4E 05 F1 | 	add	fp, #12
2c850     A7 FA 61 FC | 	wrlong	result1, fp
2c854     0C 4E 85 F1 | 	sub	fp, #12
2c858     A7 14 02 FB | 	rdlong	arg02, fp
2c85c     1F 14 06 F5 | 	and	arg02, #31
2c860     01 14 66 F0 | 	shl	arg02, #1
2c864     08 4E 05 F1 | 	add	fp, #8
2c868     A7 14 62 FC | 	wrlong	arg02, fp
2c86c     A7 12 02 F6 | 	mov	arg01, fp
2c870     10 4E 85 F1 | 	sub	fp, #16
2c874     4C FA BF FD | 	call	#_fatfs_cc_mktime
2c878     0C 4E 05 F1 | 	add	fp, #12
2c87c     A7 FA 61 FC | 	wrlong	result1, fp
2c880                 | ' 
2c880                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
2c880                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
2c880                 | '     date.tm_mday = (dosdate & 0x1f);
2c880                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
2c880                 | '     date.tm_min = (dostime >> 5) & 0x3f;
2c880                 | '     date.tm_sec = (dostime & 0x1f) << 1;
2c880                 | ' 
2c880                 | '     t = mktime(&date);
2c880                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2c880                 | '     return t;
2c880     0C 4E 85 F1 | 	sub	fp, #12
2c884     A7 F0 03 F6 | 	mov	ptra, fp
2c888     B2 00 A0 FD | 	call	#popregs_
2c88c                 | _fatfs_cc_unixtime_0904_ret
2c88c     2D 00 64 FD | 	ret
2c890                 | 
2c890                 | _fatfs_cc__set_dos_error_0906
2c890     09 01 02 F6 | 	mov	_var01, arg01
2c894                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2c894                 | '     switch (derr) {
2c894     14 00 26 F3 | 	fle	_var01, #20
2c898     30 00 62 FD | 	jmprel	_var01
2c89c                 | LR__4480
2c89c     50 00 90 FD | 	jmp	#LR__4481
2c8a0     84 00 90 FD | 	jmp	#LR__4495
2c8a4     80 00 90 FD | 	jmp	#LR__4496
2c8a8     7C 00 90 FD | 	jmp	#LR__4497
2c8ac     48 00 90 FD | 	jmp	#LR__4482
2c8b0     44 00 90 FD | 	jmp	#LR__4483
2c8b4     40 00 90 FD | 	jmp	#LR__4484
2c8b8     44 00 90 FD | 	jmp	#LR__4485
2c8bc     48 00 90 FD | 	jmp	#LR__4487
2c8c0     54 00 90 FD | 	jmp	#LR__4490
2c8c4     38 00 90 FD | 	jmp	#LR__4486
2c8c8     4C 00 90 FD | 	jmp	#LR__4491
2c8cc     48 00 90 FD | 	jmp	#LR__4492
2c8d0     44 00 90 FD | 	jmp	#LR__4493
2c8d4     50 00 90 FD | 	jmp	#LR__4498
2c8d8     4C 00 90 FD | 	jmp	#LR__4498
2c8dc     48 00 90 FD | 	jmp	#LR__4498
2c8e0     2C 00 90 FD | 	jmp	#LR__4488
2c8e4     38 00 90 FD | 	jmp	#LR__4494
2c8e8     2C 00 90 FD | 	jmp	#LR__4489
2c8ec     38 00 90 FD | 	jmp	#LR__4498
2c8f0                 | LR__4481
2c8f0     00 02 06 F6 | 	mov	_var02, #0
2c8f4                 | '         r = 0;
2c8f4                 | '         break;
2c8f4     34 00 90 FD | 	jmp	#LR__4499
2c8f8                 | LR__4482
2c8f8                 | LR__4483
2c8f8                 | LR__4484
2c8f8     04 02 06 F6 | 	mov	_var02, #4
2c8fc                 | '         r =  4 ;
2c8fc                 | '         break;
2c8fc     2C 00 90 FD | 	jmp	#LR__4499
2c900                 | LR__4485
2c900                 | LR__4486
2c900     06 02 06 F6 | 	mov	_var02, #6
2c904                 | '         r =  6 ;
2c904                 | '         break;
2c904     24 00 90 FD | 	jmp	#LR__4499
2c908                 | LR__4487
2c908     09 02 06 F6 | 	mov	_var02, #9
2c90c                 | '         r =  9 ;
2c90c                 | '         break;
2c90c     1C 00 90 FD | 	jmp	#LR__4499
2c910                 | LR__4488
2c910     07 02 06 F6 | 	mov	_var02, #7
2c914                 | '         r =  7 ;
2c914                 | '         break;
2c914     14 00 90 FD | 	jmp	#LR__4499
2c918                 | LR__4489
2c918                 | LR__4490
2c918                 | LR__4491
2c918                 | LR__4492
2c918                 | LR__4493
2c918     0A 02 06 F6 | 	mov	_var02, #10
2c91c                 | '         r =  10 ;
2c91c                 | '         break;
2c91c     0C 00 90 FD | 	jmp	#LR__4499
2c920                 | LR__4494
2c920     0B 02 06 F6 | 	mov	_var02, #11
2c924                 | '         r =  11 ;
2c924                 | '         break;
2c924     04 00 90 FD | 	jmp	#LR__4499
2c928                 | LR__4495
2c928                 | LR__4496
2c928                 | LR__4497
2c928                 | LR__4498
2c928     0C 02 06 F6 | 	mov	_var02, #12
2c92c                 | '         r =  12 ;
2c92c                 | '         break;
2c92c                 | LR__4499
2c92c                 | '     }
2c92c                 | '     return _seterror(r);
2c92c     00 02 4E F2 | 	cmps	_var02, #0 wz
2c930     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2c934     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2c938     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2c93c     01 FA 65 56 |  if_ne	neg	result1, #1
2c940     00 FA 05 A6 |  if_e	mov	result1, #0
2c944                 | _fatfs_cc__set_dos_error_0906_ret
2c944     2D 00 64 FD | 	ret
2c948                 | 
2c948                 | _fatfs_cc_v_creat
2c948     04 4A 05 F6 | 	mov	COUNT_, #4
2c94c     A8 00 A0 FD | 	call	#pushregs_
2c950     09 1F 02 F6 | 	mov	local01, arg01
2c954     0A 21 02 F6 | 	mov	local02, arg02
2c958     03 00 00 FF 
2c95c     3C 12 06 F6 | 	mov	arg01, ##1596
2c960                 | '     return _gc_alloc(size);
2c960     10 14 06 F6 | 	mov	arg02, #16
2c964     2C 60 BF FD | 	call	#__system___gc_doalloc
2c968     FD 22 0A F6 | 	mov	local03, result1 wz
2c96c                 | '       return _seterror( 7 );
2c96c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2c970     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2c974     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2c978     01 FA 65 A6 |  if_e	neg	result1, #1
2c97c     58 00 90 AD |  if_e	jmp	#LR__4501
2c980     11 13 02 F6 | 	mov	arg01, local03
2c984     00 14 06 F6 | 	mov	arg02, #0
2c988     03 00 00 FF 
2c98c     3C 16 06 F6 | 	mov	arg03, ##1596
2c990     98 00 A0 FD | 	call	#\builtin_bytefill_
2c994     02 00 00 FF 
2c998     14 22 06 F1 | 	add	local03, ##1044
2c99c     11 13 02 F6 | 	mov	arg01, local03
2c9a0     02 00 00 FF 
2c9a4     14 22 86 F1 | 	sub	local03, ##1044
2c9a8     10 15 02 F6 | 	mov	arg02, local02
2c9ac     07 16 06 F6 | 	mov	arg03, #7
2c9b0     B4 CC BF FD | 	call	#_fatfs_cc_f_open
2c9b4     FD 24 0A F6 | 	mov	local04, result1 wz
2c9b8     14 00 90 AD |  if_e	jmp	#LR__4500
2c9bc     11 13 02 F6 | 	mov	arg01, local03
2c9c0                 | '     return _gc_free(ptr);
2c9c0     DC 60 BF FD | 	call	#__system___gc_free
2c9c4                 | '     free(f);
2c9c4                 | '     return _set_dos_error(r);
2c9c4     12 13 02 F6 | 	mov	arg01, local04
2c9c8     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2c9cc     08 00 90 FD | 	jmp	#LR__4501
2c9d0                 | LR__4500
2c9d0     0F 23 62 FC | 	wrlong	local03, local01
2c9d4                 | '   }
2c9d4                 | '   fil->vfsdata = f;
2c9d4                 | '   return 0;
2c9d4     00 FA 05 F6 | 	mov	result1, #0
2c9d8                 | LR__4501
2c9d8     A7 F0 03 F6 | 	mov	ptra, fp
2c9dc     B2 00 A0 FD | 	call	#popregs_
2c9e0                 | _fatfs_cc_v_creat_ret
2c9e0     2D 00 64 FD | 	ret
2c9e4                 | 
2c9e4                 | _fatfs_cc_v_close
2c9e4     02 4A 05 F6 | 	mov	COUNT_, #2
2c9e8     A8 00 A0 FD | 	call	#pushregs_
2c9ec     09 1F 02 FB | 	rdlong	local01, arg01
2c9f0     02 00 00 FF 
2c9f4     14 1E 06 F1 | 	add	local01, ##1044
2c9f8     0F 13 02 F6 | 	mov	arg01, local01
2c9fc     02 00 00 FF 
2ca00     14 1E 86 F1 | 	sub	local01, ##1044
2ca04     DC E3 BF FD | 	call	#_fatfs_cc_f_close
2ca08     FD 20 02 F6 | 	mov	local02, result1
2ca0c     0F 13 02 F6 | 	mov	arg01, local01
2ca10                 | '     return _gc_free(ptr);
2ca10     8C 60 BF FD | 	call	#__system___gc_free
2ca14                 | '     FAT_FIL *f = fil->vfsdata;
2ca14                 | '     r=f_close(&f->fil);
2ca14                 | '     free(f);
2ca14                 | '     return _set_dos_error(r);
2ca14     10 13 02 F6 | 	mov	arg01, local02
2ca18     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2ca1c     A7 F0 03 F6 | 	mov	ptra, fp
2ca20     B2 00 A0 FD | 	call	#popregs_
2ca24                 | _fatfs_cc_v_close_ret
2ca24     2D 00 64 FD | 	ret
2ca28                 | 
2ca28                 | _fatfs_cc_v_opendir
2ca28     04 4A 05 F6 | 	mov	COUNT_, #4
2ca2c     A8 00 A0 FD | 	call	#pushregs_
2ca30     09 1F 02 F6 | 	mov	local01, arg01
2ca34     0A 21 02 F6 | 	mov	local02, arg02
2ca38     30 12 06 F6 | 	mov	arg01, #48
2ca3c                 | '     return _gc_alloc(size);
2ca3c     10 14 06 F6 | 	mov	arg02, #16
2ca40     50 5F BF FD | 	call	#__system___gc_doalloc
2ca44     FD 22 0A F6 | 	mov	local03, result1 wz
2ca48                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2ca48                 | '       return _seterror( 7 );
2ca48     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ca4c     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2ca50     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ca54     01 FA 65 A6 |  if_e	neg	result1, #1
2ca58     34 00 90 AD |  if_e	jmp	#LR__4511
2ca5c     10 15 02 F6 | 	mov	arg02, local02
2ca60     11 13 02 F6 | 	mov	arg01, local03
2ca64     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
2ca68     FD 24 0A F6 | 	mov	local04, result1 wz
2ca6c     14 00 90 AD |  if_e	jmp	#LR__4510
2ca70     11 13 02 F6 | 	mov	arg01, local03
2ca74                 | '     return _gc_free(ptr);
2ca74     28 60 BF FD | 	call	#__system___gc_free
2ca78                 | '         free(f);
2ca78                 | '         return _set_dos_error(r);
2ca78     12 13 02 F6 | 	mov	arg01, local04
2ca7c     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2ca80     0C 00 90 FD | 	jmp	#LR__4511
2ca84                 | LR__4510
2ca84     04 1E 06 F1 | 	add	local01, #4
2ca88     0F 23 62 FC | 	wrlong	local03, local01
2ca8c                 | '     }
2ca8c                 | '     dir->vfsdata = f;
2ca8c                 | '     return 0;
2ca8c     00 FA 05 F6 | 	mov	result1, #0
2ca90                 | LR__4511
2ca90     A7 F0 03 F6 | 	mov	ptra, fp
2ca94     B2 00 A0 FD | 	call	#popregs_
2ca98                 | _fatfs_cc_v_opendir_ret
2ca98     2D 00 64 FD | 	ret
2ca9c                 | 
2ca9c                 | _fatfs_cc_v_closedir
2ca9c     02 4A 05 F6 | 	mov	COUNT_, #2
2caa0     A8 00 A0 FD | 	call	#pushregs_
2caa4     04 12 06 F1 | 	add	arg01, #4
2caa8     09 1F 02 FB | 	rdlong	local01, arg01
2caac     0F 13 02 F6 | 	mov	arg01, local01
2cab0     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
2cab4     FD 20 02 F6 | 	mov	local02, result1
2cab8     0F 13 02 F6 | 	mov	arg01, local01
2cabc                 | '     return _gc_free(ptr);
2cabc     E0 5F BF FD | 	call	#__system___gc_free
2cac0     00 20 0E F2 | 	cmp	local02, #0 wz
2cac4     10 13 02 56 |  if_ne	mov	arg01, local02
2cac8     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0906
2cacc                 | '     return r;
2cacc     10 FB 01 F6 | 	mov	result1, local02
2cad0     A7 F0 03 F6 | 	mov	ptra, fp
2cad4     B2 00 A0 FD | 	call	#popregs_
2cad8                 | _fatfs_cc_v_closedir_ret
2cad8     2D 00 64 FD | 	ret
2cadc                 | 
2cadc                 | _fatfs_cc_v_readdir
2cadc     01 4A 05 F6 | 	mov	COUNT_, #1
2cae0     A8 00 A0 FD | 	call	#pushregs_
2cae4     2C F1 07 F1 | 	add	ptra, #300
2cae8     04 4E 05 F1 | 	add	fp, #4
2caec     A7 12 62 FC | 	wrlong	arg01, fp
2caf0     04 4E 05 F1 | 	add	fp, #4
2caf4     A7 14 62 FC | 	wrlong	arg02, fp
2caf8     04 4E 85 F1 | 	sub	fp, #4
2cafc     A7 16 02 FB | 	rdlong	arg03, fp
2cb00     04 16 06 F1 | 	add	arg03, #4
2cb04     0B 13 02 FB | 	rdlong	arg01, arg03
2cb08     08 4E 05 F1 | 	add	fp, #8
2cb0c     A7 14 02 F6 | 	mov	arg02, fp
2cb10     0C 4E 85 F1 | 	sub	fp, #12
2cb14     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
2cb18     28 4F 05 F1 | 	add	fp, #296
2cb1c     A7 FA 61 FC | 	wrlong	result1, fp
2cb20     28 4F 85 F1 | 	sub	fp, #296
2cb24     00 FA 0D F2 | 	cmp	result1, #0 wz
2cb28     14 00 90 AD |  if_e	jmp	#LR__4520
2cb2c                 | '         return _set_dos_error(r);
2cb2c     28 4F 05 F1 | 	add	fp, #296
2cb30     A7 12 02 FB | 	rdlong	arg01, fp
2cb34     28 4F 85 F1 | 	sub	fp, #296
2cb38     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2cb3c     C4 00 90 FD | 	jmp	#LR__4523
2cb40                 | LR__4520
2cb40     28 4E 05 F1 | 	add	fp, #40
2cb44     A7 16 CA FA | 	rdbyte	arg03, fp wz
2cb48     28 4E 85 F1 | 	sub	fp, #40
2cb4c                 | '         return -1;
2cb4c     01 FA 65 A6 |  if_e	neg	result1, #1
2cb50     B0 00 90 AD |  if_e	jmp	#LR__4523
2cb54     08 4E 05 F1 | 	add	fp, #8
2cb58     A7 12 02 FB | 	rdlong	arg01, fp
2cb5c     20 4E 05 F1 | 	add	fp, #32
2cb60     A7 14 02 F6 | 	mov	arg02, fp
2cb64     28 4E 85 F1 | 	sub	fp, #40
2cb68     3F 16 06 F6 | 	mov	arg03, #63
2cb6c     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
2cb70     08 4E 05 F1 | 	add	fp, #8
2cb74     A7 16 02 FB | 	rdlong	arg03, fp
2cb78     3F 16 06 F1 | 	add	arg03, #63
2cb7c     0B 01 48 FC | 	wrbyte	#0, arg03
2cb80     0C 4E 05 F1 | 	add	fp, #12
2cb84     A7 16 C2 FA | 	rdbyte	arg03, fp
2cb88     14 4E 85 F1 | 	sub	fp, #20
2cb8c     10 16 CE F7 | 	test	arg03, #16 wz
2cb90     18 00 90 AD |  if_e	jmp	#LR__4521
2cb94     08 4E 05 F1 | 	add	fp, #8
2cb98     A7 16 02 FB | 	rdlong	arg03, fp
2cb9c     08 4E 85 F1 | 	sub	fp, #8
2cba0     50 16 06 F1 | 	add	arg03, #80
2cba4     0B 03 48 FC | 	wrbyte	#1, arg03
2cba8     14 00 90 FD | 	jmp	#LR__4522
2cbac                 | LR__4521
2cbac     08 4E 05 F1 | 	add	fp, #8
2cbb0     A7 16 02 FB | 	rdlong	arg03, fp
2cbb4     08 4E 85 F1 | 	sub	fp, #8
2cbb8     50 16 06 F1 | 	add	arg03, #80
2cbbc     0B 01 48 FC | 	wrbyte	#0, arg03
2cbc0                 | LR__4522
2cbc0     08 4E 05 F1 | 	add	fp, #8
2cbc4     A7 16 02 FB | 	rdlong	arg03, fp
2cbc8     04 4E 05 F1 | 	add	fp, #4
2cbcc     A7 14 02 FB | 	rdlong	arg02, fp
2cbd0     48 16 06 F1 | 	add	arg03, #72
2cbd4     0B 15 62 FC | 	wrlong	arg02, arg03
2cbd8     04 4E 85 F1 | 	sub	fp, #4
2cbdc     A7 1E 02 FB | 	rdlong	local01, fp
2cbe0     08 4E 05 F1 | 	add	fp, #8
2cbe4     A7 12 E2 FA | 	rdword	arg01, fp
2cbe8     02 4E 05 F1 | 	add	fp, #2
2cbec     A7 14 E2 FA | 	rdword	arg02, fp
2cbf0     12 4E 85 F1 | 	sub	fp, #18
2cbf4     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0904
2cbf8     4C 1E 06 F1 | 	add	local01, #76
2cbfc     0F FB 61 FC | 	wrlong	result1, local01
2cc00                 | '         ent->d_type =  (0) ;
2cc00                 | '     }
2cc00                 | '     ent->d_size = finfo.fsize;
2cc00                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
2cc00                 | '     return 0;
2cc00     00 FA 05 F6 | 	mov	result1, #0
2cc04                 | LR__4523
2cc04     A7 F0 03 F6 | 	mov	ptra, fp
2cc08     B2 00 A0 FD | 	call	#popregs_
2cc0c                 | _fatfs_cc_v_readdir_ret
2cc0c     2D 00 64 FD | 	ret
2cc10                 | 
2cc10                 | _fatfs_cc_v_stat
2cc10     03 4A 05 F6 | 	mov	COUNT_, #3
2cc14     A8 00 A0 FD | 	call	#pushregs_
2cc18     30 F1 07 F1 | 	add	ptra, #304
2cc1c     04 4E 05 F1 | 	add	fp, #4
2cc20     A7 12 62 FC | 	wrlong	arg01, fp
2cc24     04 4E 05 F1 | 	add	fp, #4
2cc28     A7 14 62 FC | 	wrlong	arg02, fp
2cc2c     08 4E 85 F1 | 	sub	fp, #8
2cc30     0A 13 02 F6 | 	mov	arg01, arg02
2cc34     00 14 06 F6 | 	mov	arg02, #0
2cc38     30 16 06 F6 | 	mov	arg03, #48
2cc3c     98 00 A0 FD | 	call	#\builtin_bytefill_
2cc40     04 4E 05 F1 | 	add	fp, #4
2cc44     A7 FA 01 FB | 	rdlong	result1, fp
2cc48     04 4E 85 F1 | 	sub	fp, #4
2cc4c     FD FA C9 FA | 	rdbyte	result1, result1 wz
2cc50     2C 00 90 AD |  if_e	jmp	#LR__4530
2cc54     04 4E 05 F1 | 	add	fp, #4
2cc58     A7 FA 01 FB | 	rdlong	result1, fp
2cc5c     04 4E 85 F1 | 	sub	fp, #4
2cc60     FD FA C1 FA | 	rdbyte	result1, result1
2cc64     2E FA 0D F2 | 	cmp	result1, #46 wz
2cc68     04 4E 05 A1 |  if_e	add	fp, #4
2cc6c     A7 1E 02 AB |  if_e	rdlong	local01, fp
2cc70     04 4E 85 A1 |  if_e	sub	fp, #4
2cc74     01 1E 06 A1 |  if_e	add	local01, #1
2cc78     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
2cc7c     18 00 90 5D |  if_ne	jmp	#LR__4531
2cc80                 | LR__4530
2cc80     18 4E 05 F1 | 	add	fp, #24
2cc84     A7 20 48 FC | 	wrbyte	#16, fp
2cc88     0C 4E 85 F1 | 	sub	fp, #12
2cc8c     A7 00 68 FC | 	wrlong	#0, fp
2cc90     0C 4E 85 F1 | 	sub	fp, #12
2cc94     24 00 90 FD | 	jmp	#LR__4532
2cc98                 | LR__4531
2cc98     04 4E 05 F1 | 	add	fp, #4
2cc9c     A7 12 02 FB | 	rdlong	arg01, fp
2cca0     0C 4E 05 F1 | 	add	fp, #12
2cca4     A7 14 02 F6 | 	mov	arg02, fp
2cca8     10 4E 85 F1 | 	sub	fp, #16
2ccac     AC EB BF FD | 	call	#_fatfs_cc_f_stat
2ccb0     0C 4E 05 F1 | 	add	fp, #12
2ccb4     A7 FA 61 FC | 	wrlong	result1, fp
2ccb8     0C 4E 85 F1 | 	sub	fp, #12
2ccbc                 | LR__4532
2ccbc     0C 4E 05 F1 | 	add	fp, #12
2ccc0     A7 20 0A FB | 	rdlong	local02, fp wz
2ccc4     0C 4E 85 F1 | 	sub	fp, #12
2ccc8     14 00 90 AD |  if_e	jmp	#LR__4533
2cccc                 | '         return _set_dos_error(r);
2cccc     0C 4E 05 F1 | 	add	fp, #12
2ccd0     A7 12 02 FB | 	rdlong	arg01, fp
2ccd4     0C 4E 85 F1 | 	sub	fp, #12
2ccd8     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2ccdc     14 01 90 FD | 	jmp	#LR__4534
2cce0                 | LR__4533
2cce0     2C 4F 05 F1 | 	add	fp, #300
2cce4     A7 48 6A FC | 	wrlong	#292, fp
2cce8     14 4F 85 F1 | 	sub	fp, #276
2ccec     A7 22 C2 FA | 	rdbyte	local03, fp
2ccf0     18 4E 85 F1 | 	sub	fp, #24
2ccf4     01 22 CE F7 | 	test	local03, #1 wz
2ccf8     2C 4F 05 A1 |  if_e	add	fp, #300
2ccfc     A7 22 02 AB |  if_e	rdlong	local03, fp
2cd00     92 22 46 A5 |  if_e	or	local03, #146
2cd04     A7 22 62 AC |  if_e	wrlong	local03, fp
2cd08     2C 4F 85 A1 |  if_e	sub	fp, #300
2cd0c     18 4E 05 F1 | 	add	fp, #24
2cd10     A7 22 C2 FA | 	rdbyte	local03, fp
2cd14     18 4E 85 F1 | 	sub	fp, #24
2cd18     10 22 CE F7 | 	test	local03, #16 wz
2cd1c     2C 4F 05 51 |  if_ne	add	fp, #300
2cd20     A7 22 02 5B |  if_ne	rdlong	local03, fp
2cd24     08 00 00 5F 
2cd28     49 22 46 55 |  if_ne	or	local03, ##4169
2cd2c     A7 22 62 5C |  if_ne	wrlong	local03, fp
2cd30     2C 4F 85 51 |  if_ne	sub	fp, #300
2cd34     08 4E 05 F1 | 	add	fp, #8
2cd38     A7 22 02 FB | 	rdlong	local03, fp
2cd3c     24 4F 05 F1 | 	add	fp, #292
2cd40     A7 20 02 FB | 	rdlong	local02, fp
2cd44     08 22 06 F1 | 	add	local03, #8
2cd48     11 21 62 FC | 	wrlong	local02, local03
2cd4c     24 4F 85 F1 | 	sub	fp, #292
2cd50     A7 22 02 FB | 	rdlong	local03, fp
2cd54     0C 22 06 F1 | 	add	local03, #12
2cd58     11 03 68 FC | 	wrlong	#1, local03
2cd5c     A7 22 02 FB | 	rdlong	local03, fp
2cd60     08 4E 05 F1 | 	add	fp, #8
2cd64     A7 20 02 FB | 	rdlong	local02, fp
2cd68     18 22 06 F1 | 	add	local03, #24
2cd6c     11 21 62 FC | 	wrlong	local02, local03
2cd70     08 4E 85 F1 | 	sub	fp, #8
2cd74     A7 22 02 FB | 	rdlong	local03, fp
2cd78     1C 22 06 F1 | 	add	local03, #28
2cd7c     01 00 80 FF 
2cd80     11 01 68 FC | 	wrlong	##512, local03
2cd84     A7 20 02 FB | 	rdlong	local02, fp
2cd88     10 23 02 F6 | 	mov	local03, local02
2cd8c     18 20 06 F1 | 	add	local02, #24
2cd90     10 21 02 FB | 	rdlong	local02, local02
2cd94     FF 21 06 F1 | 	add	local02, #511
2cd98     10 21 52 F6 | 	abs	local02, local02 wc
2cd9c     09 20 46 F0 | 	shr	local02, #9
2cda0     10 21 82 F6 | 	negc	local02, local02
2cda4     20 22 06 F1 | 	add	local03, #32
2cda8     11 21 62 FC | 	wrlong	local02, local03
2cdac     A7 20 02 FB | 	rdlong	local02, fp
2cdb0     10 23 02 F6 | 	mov	local03, local02
2cdb4     10 1F 02 F6 | 	mov	local01, local02
2cdb8     0C 4E 05 F1 | 	add	fp, #12
2cdbc     A7 12 E2 FA | 	rdword	arg01, fp
2cdc0     02 4E 05 F1 | 	add	fp, #2
2cdc4     A7 14 E2 FA | 	rdword	arg02, fp
2cdc8     16 4E 85 F1 | 	sub	fp, #22
2cdcc     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0904
2cdd0     2C 1E 06 F1 | 	add	local01, #44
2cdd4     0F FB 61 FC | 	wrlong	result1, local01
2cdd8     28 20 06 F1 | 	add	local02, #40
2cddc     10 FB 61 FC | 	wrlong	result1, local02
2cde0     24 22 06 F1 | 	add	local03, #36
2cde4     11 FB 61 FC | 	wrlong	result1, local03
2cde8                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
2cde8                 | '     }
2cde8                 | '     buf->st_mode = mode;
2cde8                 | '     buf->st_nlink = 1;
2cde8                 | '     buf->st_size = finfo.fsize;
2cde8                 | '     buf->st_blksize = 512;
2cde8                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
2cde8                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
2cde8                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2cde8                 | '     return r;
2cde8     0C 4E 05 F1 | 	add	fp, #12
2cdec     A7 FA 01 FB | 	rdlong	result1, fp
2cdf0     0C 4E 85 F1 | 	sub	fp, #12
2cdf4                 | LR__4534
2cdf4     A7 F0 03 F6 | 	mov	ptra, fp
2cdf8     B2 00 A0 FD | 	call	#popregs_
2cdfc                 | _fatfs_cc_v_stat_ret
2cdfc     2D 00 64 FD | 	ret
2ce00                 | 
2ce00                 | _fatfs_cc_v_read
2ce00     00 4A 05 F6 | 	mov	COUNT_, #0
2ce04     A8 00 A0 FD | 	call	#pushregs_
2ce08     1C F0 07 F1 | 	add	ptra, #28
2ce0c     04 4E 05 F1 | 	add	fp, #4
2ce10     A7 12 62 FC | 	wrlong	arg01, fp
2ce14     04 4E 05 F1 | 	add	fp, #4
2ce18     A7 14 62 FC | 	wrlong	arg02, fp
2ce1c     04 4E 05 F1 | 	add	fp, #4
2ce20     A7 16 62 FC | 	wrlong	arg03, fp
2ce24     08 4E 85 F1 | 	sub	fp, #8
2ce28     A7 12 02 FB | 	rdlong	arg01, fp
2ce2c     09 13 0A FB | 	rdlong	arg01, arg01 wz
2ce30     0C 4E 05 F1 | 	add	fp, #12
2ce34     A7 12 62 FC | 	wrlong	arg01, fp
2ce38     10 4E 85 F1 | 	sub	fp, #16
2ce3c                 | '         return _seterror( 5 );
2ce3c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ce40     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2ce44     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ce48     01 FA 65 A6 |  if_e	neg	result1, #1
2ce4c     B8 00 90 AD |  if_e	jmp	#LR__4542
2ce50     10 4E 05 F1 | 	add	fp, #16
2ce54     A7 12 02 FB | 	rdlong	arg01, fp
2ce58     02 00 00 FF 
2ce5c     14 12 06 F1 | 	add	arg01, ##1044
2ce60     08 4E 85 F1 | 	sub	fp, #8
2ce64     A7 14 02 FB | 	rdlong	arg02, fp
2ce68     04 4E 05 F1 | 	add	fp, #4
2ce6c     A7 16 02 FB | 	rdlong	arg03, fp
2ce70     0C 4E 05 F1 | 	add	fp, #12
2ce74     A7 18 02 F6 | 	mov	arg04, fp
2ce78     18 4E 85 F1 | 	sub	fp, #24
2ce7c     C4 CE BF FD | 	call	#_fatfs_cc_f_read
2ce80     14 4E 05 F1 | 	add	fp, #20
2ce84     A7 FA 61 FC | 	wrlong	result1, fp
2ce88     14 4E 85 F1 | 	sub	fp, #20
2ce8c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ce90     34 00 90 AD |  if_e	jmp	#LR__4540
2ce94     04 4E 05 F1 | 	add	fp, #4
2ce98     A7 18 02 FB | 	rdlong	arg04, fp
2ce9c     0C 17 02 F6 | 	mov	arg03, arg04
2cea0     08 18 06 F1 | 	add	arg04, #8
2cea4     0C 19 02 FB | 	rdlong	arg04, arg04
2cea8     20 18 46 F5 | 	or	arg04, #32
2ceac     08 16 06 F1 | 	add	arg03, #8
2ceb0     0B 19 62 FC | 	wrlong	arg04, arg03
2ceb4                 | '         fil->state |=  (0x20) ;
2ceb4                 | '         return _set_dos_error(r);
2ceb4     10 4E 05 F1 | 	add	fp, #16
2ceb8     A7 12 02 FB | 	rdlong	arg01, fp
2cebc     14 4E 85 F1 | 	sub	fp, #20
2cec0     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2cec4     40 00 90 FD | 	jmp	#LR__4542
2cec8                 | LR__4540
2cec8     18 4E 05 F1 | 	add	fp, #24
2cecc     A7 FA 09 FB | 	rdlong	result1, fp wz
2ced0     18 4E 85 F1 | 	sub	fp, #24
2ced4     24 00 90 5D |  if_ne	jmp	#LR__4541
2ced8     04 4E 05 F1 | 	add	fp, #4
2cedc     A7 FA 01 FB | 	rdlong	result1, fp
2cee0     FD 18 02 F6 | 	mov	arg04, result1
2cee4     04 4E 85 F1 | 	sub	fp, #4
2cee8     08 FA 05 F1 | 	add	result1, #8
2ceec     FD FA 01 FB | 	rdlong	result1, result1
2cef0     10 FA 45 F5 | 	or	result1, #16
2cef4     08 18 06 F1 | 	add	arg04, #8
2cef8     0C FB 61 FC | 	wrlong	result1, arg04
2cefc                 | LR__4541
2cefc                 | '         fil->state |=  (0x10) ;
2cefc                 | '     }
2cefc                 | '     return x;
2cefc     18 4E 05 F1 | 	add	fp, #24
2cf00     A7 FA 01 FB | 	rdlong	result1, fp
2cf04     18 4E 85 F1 | 	sub	fp, #24
2cf08                 | LR__4542
2cf08     A7 F0 03 F6 | 	mov	ptra, fp
2cf0c     B2 00 A0 FD | 	call	#popregs_
2cf10                 | _fatfs_cc_v_read_ret
2cf10     2D 00 64 FD | 	ret
2cf14                 | 
2cf14                 | _fatfs_cc_v_write
2cf14     00 4A 05 F6 | 	mov	COUNT_, #0
2cf18     A8 00 A0 FD | 	call	#pushregs_
2cf1c     1C F0 07 F1 | 	add	ptra, #28
2cf20     04 4E 05 F1 | 	add	fp, #4
2cf24     A7 12 62 FC | 	wrlong	arg01, fp
2cf28     04 4E 05 F1 | 	add	fp, #4
2cf2c     A7 14 62 FC | 	wrlong	arg02, fp
2cf30     04 4E 05 F1 | 	add	fp, #4
2cf34     A7 16 62 FC | 	wrlong	arg03, fp
2cf38     08 4E 85 F1 | 	sub	fp, #8
2cf3c     A7 12 02 FB | 	rdlong	arg01, fp
2cf40     09 13 0A FB | 	rdlong	arg01, arg01 wz
2cf44     0C 4E 05 F1 | 	add	fp, #12
2cf48     A7 12 62 FC | 	wrlong	arg01, fp
2cf4c     10 4E 85 F1 | 	sub	fp, #16
2cf50                 | '         return _seterror( 5 );
2cf50     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2cf54     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2cf58     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2cf5c     01 FA 65 A6 |  if_e	neg	result1, #1
2cf60     84 00 90 AD |  if_e	jmp	#LR__4551
2cf64     10 4E 05 F1 | 	add	fp, #16
2cf68     A7 12 02 FB | 	rdlong	arg01, fp
2cf6c     02 00 00 FF 
2cf70     14 12 06 F1 | 	add	arg01, ##1044
2cf74     08 4E 85 F1 | 	sub	fp, #8
2cf78     A7 14 02 FB | 	rdlong	arg02, fp
2cf7c     04 4E 05 F1 | 	add	fp, #4
2cf80     A7 16 02 FB | 	rdlong	arg03, fp
2cf84     0C 4E 05 F1 | 	add	fp, #12
2cf88     A7 18 02 F6 | 	mov	arg04, fp
2cf8c     18 4E 85 F1 | 	sub	fp, #24
2cf90     4C D4 BF FD | 	call	#_fatfs_cc_f_write
2cf94     14 4E 05 F1 | 	add	fp, #20
2cf98     A7 FA 61 FC | 	wrlong	result1, fp
2cf9c     14 4E 85 F1 | 	sub	fp, #20
2cfa0     00 FA 0D F2 | 	cmp	result1, #0 wz
2cfa4     34 00 90 AD |  if_e	jmp	#LR__4550
2cfa8     04 4E 05 F1 | 	add	fp, #4
2cfac     A7 18 02 FB | 	rdlong	arg04, fp
2cfb0     0C 17 02 F6 | 	mov	arg03, arg04
2cfb4     08 18 06 F1 | 	add	arg04, #8
2cfb8     0C 19 02 FB | 	rdlong	arg04, arg04
2cfbc     20 18 46 F5 | 	or	arg04, #32
2cfc0     08 16 06 F1 | 	add	arg03, #8
2cfc4     0B 19 62 FC | 	wrlong	arg04, arg03
2cfc8                 | '         fil->state |=  (0x20) ;
2cfc8                 | '         return _set_dos_error(r);
2cfc8     10 4E 05 F1 | 	add	fp, #16
2cfcc     A7 12 02 FB | 	rdlong	arg01, fp
2cfd0     14 4E 85 F1 | 	sub	fp, #20
2cfd4     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2cfd8     0C 00 90 FD | 	jmp	#LR__4551
2cfdc                 | LR__4550
2cfdc                 | '     }
2cfdc                 | '     return x;
2cfdc     18 4E 05 F1 | 	add	fp, #24
2cfe0     A7 FA 01 FB | 	rdlong	result1, fp
2cfe4     18 4E 85 F1 | 	sub	fp, #24
2cfe8                 | LR__4551
2cfe8     A7 F0 03 F6 | 	mov	ptra, fp
2cfec     B2 00 A0 FD | 	call	#popregs_
2cff0                 | _fatfs_cc_v_write_ret
2cff0     2D 00 64 FD | 	ret
2cff4                 | 
2cff4                 | _fatfs_cc_v_lseek
2cff4     04 4A 05 F6 | 	mov	COUNT_, #4
2cff8     A8 00 A0 FD | 	call	#pushregs_
2cffc     0A 1F 02 F6 | 	mov	local01, arg02
2d000     0B 21 02 F6 | 	mov	local02, arg03
2d004     09 23 02 FB | 	rdlong	local03, arg01
2d008     02 00 00 FF 
2d00c     14 22 0E F1 | 	add	local03, ##1044 wz
2d010                 | '         return _seterror( 5 );
2d010     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d014     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2d018     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d01c     01 FA 65 A6 |  if_e	neg	result1, #1
2d020     4C 00 90 AD |  if_e	jmp	#LR__4562
2d024     00 20 0E F2 | 	cmp	local02, #0 wz
2d028     24 00 90 AD |  if_e	jmp	#LR__4560
2d02c     01 20 0E F2 | 	cmp	local02, #1 wz
2d030     14 22 06 A1 |  if_e	add	local03, #20
2d034     11 25 02 AB |  if_e	rdlong	local04, local03
2d038     14 22 86 A1 |  if_e	sub	local03, #20
2d03c     12 1F 02 A1 |  if_e	add	local01, local04
2d040     0C 22 06 51 |  if_ne	add	local03, #12
2d044     11 25 02 5B |  if_ne	rdlong	local04, local03
2d048     0C 22 86 51 |  if_ne	sub	local03, #12
2d04c     12 1F 02 51 |  if_ne	add	local01, local04
2d050                 | LR__4560
2d050     0F 15 02 F6 | 	mov	arg02, local01
2d054     11 13 02 F6 | 	mov	arg01, local03
2d058     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
2d05c     FD 12 0A F6 | 	mov	arg01, result1 wz
2d060     08 00 90 AD |  if_e	jmp	#LR__4561
2d064                 | '         return _set_dos_error(result);
2d064     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2d068     04 00 90 FD | 	jmp	#LR__4562
2d06c                 | LR__4561
2d06c                 | '     }
2d06c                 | '     return offset;
2d06c     0F FB 01 F6 | 	mov	result1, local01
2d070                 | LR__4562
2d070     A7 F0 03 F6 | 	mov	ptra, fp
2d074     B2 00 A0 FD | 	call	#popregs_
2d078                 | _fatfs_cc_v_lseek_ret
2d078     2D 00 64 FD | 	ret
2d07c                 | 
2d07c                 | _fatfs_cc_v_ioctl
2d07c                 | ' {
2d07c                 | '     return _seterror( 10 );
2d07c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2d080     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2d084     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2d088     01 FA 65 F6 | 	neg	result1, #1
2d08c                 | _fatfs_cc_v_ioctl_ret
2d08c     2D 00 64 FD | 	ret
2d090                 | 
2d090                 | _fatfs_cc_v_mkdir
2d090     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
2d094     FD 12 02 F6 | 	mov	arg01, result1
2d098                 | ' 
2d098                 | '     r = f_mkdir(name);
2d098                 | '     return _set_dos_error(r);
2d098     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2d09c                 | _fatfs_cc_v_mkdir_ret
2d09c     2D 00 64 FD | 	ret
2d0a0                 | 
2d0a0                 | _fatfs_cc_v_remove
2d0a0     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2d0a4     FD 12 02 F6 | 	mov	arg01, result1
2d0a8                 | ' 
2d0a8                 | '     r = f_unlink(name);
2d0a8                 | '     return _set_dos_error(r);
2d0a8     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2d0ac                 | _fatfs_cc_v_remove_ret
2d0ac     2D 00 64 FD | 	ret
2d0b0                 | 
2d0b0                 | _fatfs_cc_v_rmdir
2d0b0     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2d0b4     FD 12 02 F6 | 	mov	arg01, result1
2d0b8                 | ' 
2d0b8                 | '     r = f_unlink(name);
2d0b8                 | '     return _set_dos_error(r);
2d0b8     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2d0bc                 | _fatfs_cc_v_rmdir_ret
2d0bc     2D 00 64 FD | 	ret
2d0c0                 | 
2d0c0                 | _fatfs_cc_v_rename
2d0c0     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
2d0c4     FD 12 02 F6 | 	mov	arg01, result1
2d0c8                 | '     return _set_dos_error(r);
2d0c8     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2d0cc                 | _fatfs_cc_v_rename_ret
2d0cc     2D 00 64 FD | 	ret
2d0d0                 | 
2d0d0                 | _fatfs_cc_v_open
2d0d0     07 4A 05 F6 | 	mov	COUNT_, #7
2d0d4     A8 00 A0 FD | 	call	#pushregs_
2d0d8     09 1F 02 F6 | 	mov	local01, arg01
2d0dc     0A 21 02 F6 | 	mov	local02, arg02
2d0e0     0B 23 02 F6 | 	mov	local03, arg03
2d0e4     03 00 00 FF 
2d0e8     3C 12 06 F6 | 	mov	arg01, ##1596
2d0ec                 | '     return _gc_alloc(size);
2d0ec     10 14 06 F6 | 	mov	arg02, #16
2d0f0     A0 58 BF FD | 	call	#__system___gc_doalloc
2d0f4     FD 24 0A F6 | 	mov	local04, result1 wz
2d0f8                 | '       return _seterror( 7 );
2d0f8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d0fc     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2d100     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d104     01 FA 65 A6 |  if_e	neg	result1, #1
2d108     98 00 90 AD |  if_e	jmp	#LR__4576
2d10c     12 13 02 F6 | 	mov	arg01, local04
2d110     00 14 06 F6 | 	mov	arg02, #0
2d114     03 00 00 FF 
2d118     3C 16 06 F6 | 	mov	arg03, ##1596
2d11c     98 00 A0 FD | 	call	#\builtin_bytefill_
2d120                 | '   switch (flags & 3) {
2d120     11 27 02 F6 | 	mov	local05, local03
2d124     03 26 0E F5 | 	and	local05, #3 wz
2d128     0C 00 90 AD |  if_e	jmp	#LR__4570
2d12c     01 26 0E F2 | 	cmp	local05, #1 wz
2d130     0C 00 90 AD |  if_e	jmp	#LR__4571
2d134     10 00 90 FD | 	jmp	#LR__4572
2d138                 | LR__4570
2d138     01 28 06 F6 | 	mov	local06, #1
2d13c                 | '       fs_flags =  0x01 ;
2d13c                 | '       break;
2d13c     0C 00 90 FD | 	jmp	#LR__4573
2d140                 | LR__4571
2d140     02 28 06 F6 | 	mov	local06, #2
2d144                 | '       fs_flags =  0x02 ;
2d144                 | '       break;
2d144     04 00 90 FD | 	jmp	#LR__4573
2d148                 | LR__4572
2d148     03 28 06 F6 | 	mov	local06, #3
2d14c                 | '       fs_flags =  0x01  |  0x02 ;
2d14c                 | '       break;
2d14c                 | LR__4573
2d14c     08 22 CE F7 | 	test	local03, #8 wz
2d150     18 28 46 55 |  if_ne	or	local06, #24
2d154     08 00 90 5D |  if_ne	jmp	#LR__4574
2d158     20 22 CE F7 | 	test	local03, #32 wz
2d15c     30 28 46 55 |  if_ne	or	local06, #48
2d160                 | LR__4574
2d160     02 00 00 FF 
2d164     14 24 06 F1 | 	add	local04, ##1044
2d168     12 13 02 F6 | 	mov	arg01, local04
2d16c     02 00 00 FF 
2d170     14 24 86 F1 | 	sub	local04, ##1044
2d174     10 15 02 F6 | 	mov	arg02, local02
2d178     14 17 02 F6 | 	mov	arg03, local06
2d17c     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
2d180     FD 2A 0A F6 | 	mov	local07, result1 wz
2d184     14 00 90 AD |  if_e	jmp	#LR__4575
2d188     12 13 02 F6 | 	mov	arg01, local04
2d18c                 | '     return _gc_free(ptr);
2d18c     10 59 BF FD | 	call	#__system___gc_free
2d190                 | '     free(f);
2d190                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2d190                 | '     return _set_dos_error(r);
2d190     15 13 02 F6 | 	mov	arg01, local07
2d194     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2d198     08 00 90 FD | 	jmp	#LR__4576
2d19c                 | LR__4575
2d19c     0F 25 62 FC | 	wrlong	local04, local01
2d1a0                 | '   }
2d1a0                 | '   fil->vfsdata = f;
2d1a0                 | '   return 0;
2d1a0     00 FA 05 F6 | 	mov	result1, #0
2d1a4                 | LR__4576
2d1a4     A7 F0 03 F6 | 	mov	ptra, fp
2d1a8     B2 00 A0 FD | 	call	#popregs_
2d1ac                 | _fatfs_cc_v_open_ret
2d1ac     2D 00 64 FD | 	ret
2d1b0                 | 
2d1b0                 | _fatfs_cc_v_flush
2d1b0     09 13 02 FB | 	rdlong	arg01, arg01
2d1b4     02 00 00 FF 
2d1b8     14 12 0E F1 | 	add	arg01, ##1044 wz
2d1bc                 | '         return _seterror( 5 );
2d1bc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d1c0     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2d1c4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d1c8     01 FA 65 A6 |  if_e	neg	result1, #1
2d1cc     0C 00 90 AD |  if_e	jmp	#LR__4580
2d1d0     00 DA BF FD | 	call	#_fatfs_cc_f_sync
2d1d4     FD 12 02 F6 | 	mov	arg01, result1
2d1d8                 | '     }
2d1d8                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2d1d8                 | '     result = f_sync(f);
2d1d8                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2d1d8                 | '     return _set_dos_error(result);
2d1d8     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2d1dc                 | LR__4580
2d1dc                 | _fatfs_cc_v_flush_ret
2d1dc     2D 00 64 FD | 	ret
2d1e0                 | 
2d1e0                 | _fatfs_cc_v_init
2d1e0                 | ' {
2d1e0                 | '     return 0;
2d1e0     00 FA 05 F6 | 	mov	result1, #0
2d1e4                 | _fatfs_cc_v_init_ret
2d1e4     2D 00 64 FD | 	ret
2d1e8                 | 
2d1e8                 | _fatfs_cc_v_deinit
2d1e8     70 01 00 FF 
2d1ec     5C 15 06 F6 | 	mov	arg02, ##@LR__4776
2d1f0     00 12 06 F6 | 	mov	arg01, #0
2d1f4     00 16 06 F6 | 	mov	arg03, #0
2d1f8     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
2d1fc     01 00 00 FF 
2d200     08 E4 05 F1 | 	add	objptr, ##520
2d204     F2 12 02 FB | 	rdlong	arg01, objptr
2d208     04 E4 05 F1 | 	add	objptr, #4
2d20c     F2 14 02 FB | 	rdlong	arg02, objptr
2d210     01 00 00 FF 
2d214     0C E4 85 F1 | 	sub	objptr, ##524
2d218     50 40 BF FD | 	call	#__system___freepins
2d21c                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2d21c                 | '     _freepins(f_pinmask);
2d21c                 | '     return 0;
2d21c     00 FA 05 F6 | 	mov	result1, #0
2d220                 | _fatfs_cc_v_deinit_ret
2d220     2D 00 64 FD | 	ret
2d224                 | 
2d224                 | _fatfs_cc_get_vfs
2d224     01 4A 05 F6 | 	mov	COUNT_, #1
2d228     A8 00 A0 FD | 	call	#pushregs_
2d22c     09 1F 02 F6 | 	mov	local01, arg01
2d230     50 12 06 F6 | 	mov	arg01, #80
2d234     2C 57 BF FD | 	call	#__system___gc_alloc_managed
2d238     FD 12 02 F6 | 	mov	arg01, result1
2d23c     F2 FA 01 F6 | 	mov	result1, objptr
2d240     00 88 04 FF 
2d244     00 FA 45 F5 | 	or	result1, ##152043520
2d248     09 FB 61 FC | 	wrlong	result1, arg01
2d24c     F2 FA 01 F6 | 	mov	result1, objptr
2d250     00 90 04 FF 
2d254     00 FA 45 F5 | 	or	result1, ##153092096
2d258     04 12 06 F1 | 	add	arg01, #4
2d25c     09 FB 61 FC | 	wrlong	result1, arg01
2d260     F2 FA 01 F6 | 	mov	result1, objptr
2d264     00 98 04 FF 
2d268     00 FA 45 F5 | 	or	result1, ##154140672
2d26c     04 12 06 F1 | 	add	arg01, #4
2d270     09 FB 61 FC | 	wrlong	result1, arg01
2d274     F2 FA 01 F6 | 	mov	result1, objptr
2d278     00 A0 04 FF 
2d27c     00 FA 45 F5 | 	or	result1, ##155189248
2d280     04 12 06 F1 | 	add	arg01, #4
2d284     09 FB 61 FC | 	wrlong	result1, arg01
2d288     F2 FA 01 F6 | 	mov	result1, objptr
2d28c     00 A8 04 FF 
2d290     00 FA 45 F5 | 	or	result1, ##156237824
2d294     04 12 06 F1 | 	add	arg01, #4
2d298     09 FB 61 FC | 	wrlong	result1, arg01
2d29c     04 12 06 F1 | 	add	arg01, #4
2d2a0     09 01 68 FC | 	wrlong	#0, arg01
2d2a4     04 12 06 F1 | 	add	arg01, #4
2d2a8     09 1F 62 FC | 	wrlong	local01, arg01
2d2ac     04 12 06 F1 | 	add	arg01, #4
2d2b0     09 01 68 FC | 	wrlong	#0, arg01
2d2b4     F2 FA 01 F6 | 	mov	result1, objptr
2d2b8     00 B0 04 FF 
2d2bc     00 FA 45 F5 | 	or	result1, ##157286400
2d2c0     04 12 06 F1 | 	add	arg01, #4
2d2c4     09 FB 61 FC | 	wrlong	result1, arg01
2d2c8     F2 FA 01 F6 | 	mov	result1, objptr
2d2cc     00 B8 04 FF 
2d2d0     00 FA 45 F5 | 	or	result1, ##158334976
2d2d4     04 12 06 F1 | 	add	arg01, #4
2d2d8     09 FB 61 FC | 	wrlong	result1, arg01
2d2dc     F2 FA 01 F6 | 	mov	result1, objptr
2d2e0     00 C0 04 FF 
2d2e4     00 FA 45 F5 | 	or	result1, ##159383552
2d2e8     04 12 06 F1 | 	add	arg01, #4
2d2ec     09 FB 61 FC | 	wrlong	result1, arg01
2d2f0     F2 FA 01 F6 | 	mov	result1, objptr
2d2f4     00 C8 04 FF 
2d2f8     00 FA 45 F5 | 	or	result1, ##160432128
2d2fc     04 12 06 F1 | 	add	arg01, #4
2d300     09 FB 61 FC | 	wrlong	result1, arg01
2d304     F2 FA 01 F6 | 	mov	result1, objptr
2d308     00 D0 04 FF 
2d30c     00 FA 45 F5 | 	or	result1, ##161480704
2d310     04 12 06 F1 | 	add	arg01, #4
2d314     09 FB 61 FC | 	wrlong	result1, arg01
2d318     F2 FA 01 F6 | 	mov	result1, objptr
2d31c     00 D8 04 FF 
2d320     00 FA 45 F5 | 	or	result1, ##162529280
2d324     04 12 06 F1 | 	add	arg01, #4
2d328     09 FB 61 FC | 	wrlong	result1, arg01
2d32c     F2 FA 01 F6 | 	mov	result1, objptr
2d330     00 E0 04 FF 
2d334     00 FA 45 F5 | 	or	result1, ##163577856
2d338     04 12 06 F1 | 	add	arg01, #4
2d33c     09 FB 61 FC | 	wrlong	result1, arg01
2d340     F2 FA 01 F6 | 	mov	result1, objptr
2d344     00 E8 04 FF 
2d348     00 FA 45 F5 | 	or	result1, ##164626432
2d34c     04 12 06 F1 | 	add	arg01, #4
2d350     09 FB 61 FC | 	wrlong	result1, arg01
2d354     F2 FA 01 F6 | 	mov	result1, objptr
2d358     00 F0 04 FF 
2d35c     00 FA 45 F5 | 	or	result1, ##165675008
2d360     04 12 06 F1 | 	add	arg01, #4
2d364     09 FB 61 FC | 	wrlong	result1, arg01
2d368     F2 FA 01 F6 | 	mov	result1, objptr
2d36c     00 F8 04 FF 
2d370     00 FA 45 F5 | 	or	result1, ##166723584
2d374     04 12 06 F1 | 	add	arg01, #4
2d378     09 FB 61 FC | 	wrlong	result1, arg01
2d37c     F2 FA 01 F6 | 	mov	result1, objptr
2d380     00 00 05 FF 
2d384     00 FA 45 F5 | 	or	result1, ##167772160
2d388     04 12 06 F1 | 	add	arg01, #4
2d38c     09 FB 61 FC | 	wrlong	result1, arg01
2d390     F2 FA 01 F6 | 	mov	result1, objptr
2d394     00 08 05 FF 
2d398     00 FA 45 F5 | 	or	result1, ##168820736
2d39c     04 12 06 F1 | 	add	arg01, #4
2d3a0     09 FB 61 FC | 	wrlong	result1, arg01
2d3a4     4C 12 86 F1 | 	sub	arg01, #76
2d3a8                 | ' 
2d3a8                 | '     v->close = &v_close;
2d3a8                 | '     v->read = &v_read;
2d3a8                 | '     v->write = &v_write;
2d3a8                 | '     v->lseek = &v_lseek;
2d3a8                 | '     v->ioctl = &v_ioctl;
2d3a8                 | '     v->flush = 0;
2d3a8                 | '     v->vfs_data = ptr;
2d3a8                 | '     v->reserved = 0;
2d3a8                 | ' 
2d3a8                 | '     v->open = &v_open;
2d3a8                 | '     v->creat = &v_creat;
2d3a8                 | '     v->opendir = &v_opendir;
2d3a8                 | '     v->closedir = &v_closedir;
2d3a8                 | '     v->readdir = &v_readdir;
2d3a8                 | '     v->stat = &v_stat;
2d3a8                 | ' 
2d3a8                 | '     v->mkdir = &v_mkdir;
2d3a8                 | '     v->rmdir = &v_rmdir;
2d3a8                 | ' 
2d3a8                 | '     v->remove = &v_remove;
2d3a8                 | '     v->rename = &v_rename;
2d3a8                 | ' 
2d3a8                 | '     v->init = &v_init;
2d3a8                 | '     v->deinit = &v_deinit;
2d3a8                 | ' 
2d3a8                 | '     return v;
2d3a8     09 FB 01 F6 | 	mov	result1, arg01
2d3ac     A7 F0 03 F6 | 	mov	ptra, fp
2d3b0     B2 00 A0 FD | 	call	#popregs_
2d3b4                 | _fatfs_cc_get_vfs_ret
2d3b4     2D 00 64 FD | 	ret
2d3b8                 | 
2d3b8                 | _fatfs_cc_xmit_mmc_1053
2d3b8     01 00 00 FF 
2d3bc     10 E4 05 F1 | 	add	objptr, ##528
2d3c0     F2 00 02 FB | 	rdlong	_var01, objptr
2d3c4     08 E4 05 F1 | 	add	objptr, #8
2d3c8     F2 02 02 FB | 	rdlong	_var02, objptr
2d3cc     01 00 00 FF 
2d3d0     18 E4 85 F1 | 	sub	objptr, ##536
2d3d4     40 02 62 FD | 	dirl	_var02
2d3d8     28 02 64 FD | 	setq	#1
2d3dc     09 05 02 FB | 	rdlong	_var03, arg01
2d3e0     69 04 62 FD | 	rev	_var03
2d3e4     1B 04 FE F9 | 	movbyts	_var03, #27
2d3e8     01 05 22 FC | 	wypin	_var03, _var02
2d3ec     0A 05 02 F6 | 	mov	_var03, arg02
2d3f0     02 14 4E F0 | 	shr	arg02, #2 wz
2d3f4     03 04 66 F0 | 	shl	_var03, #3
2d3f8     00 05 22 FC | 	wypin	_var03, _var01
2d3fc     41 02 62 FD | 	dirh	_var02
2d400     08 12 06 F1 | 	add	arg01, #8
2d404     69 06 62 FD | 	rev	_var04
2d408     1B 06 FE F9 | 	movbyts	_var04, #27
2d40c                 | LR__4590
2d40c     01 07 22 5C |  if_ne	wypin	_var04, _var02
2d410     09 07 02 5B |  if_ne	rdlong	_var04, arg01
2d414     04 12 06 51 |  if_ne	add	arg01, #4
2d418     69 06 62 5D |  if_ne	rev	_var04
2d41c     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
2d420                 | LR__4591
2d420     40 02 72 5D |  if_ne	testp	_var02 wc
2d424     F8 FF 9F 1D |  if_a	jmp	#LR__4591
2d428     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4590
2d42c                 | LR__4592
2d42c     40 00 72 FD | 	testp	_var01 wc
2d430     F8 FF 9F 3D |  if_ae	jmp	#LR__4592
2d434     40 02 62 FD | 	dirl	_var02
2d438     FF FF FF FF 
2d43c     01 FF 2B FC | 	wypin	##-1, _var02
2d440     41 02 62 FD | 	dirh	_var02
2d444                 | _fatfs_cc_xmit_mmc_1053_ret
2d444     2D 00 64 FD | 	ret
2d448                 | 
2d448                 | _fatfs_cc_rcvr_mmc_1060
2d448     01 00 00 FF 
2d44c     10 E4 05 F1 | 	add	objptr, ##528
2d450     F2 00 02 FB | 	rdlong	_var01, objptr
2d454     0C E4 05 F1 | 	add	objptr, #12
2d458     F2 02 02 FB | 	rdlong	_var02, objptr
2d45c     01 00 00 FF 
2d460     1C E4 85 F1 | 	sub	objptr, ##540
2d464     01 03 08 FC | 	akpin	_var02
2d468     0A 05 0A F6 | 	mov	_var03, arg02 wz
2d46c     02 04 4E F0 | 	shr	_var03, #2 wz
2d470     30 00 90 AD |  if_e	jmp	#LR__4602
2d474     02 07 02 F6 | 	mov	_var04, _var03
2d478     05 06 66 F0 | 	shl	_var04, #5
2d47c     00 07 22 FC | 	wypin	_var04, _var01
2d480     01 7F 18 FC | 	wxpin	#63, _var02
2d484                 | LR__4600
2d484                 | LR__4601
2d484     40 02 72 FD | 	testp	_var02 wc
2d488     F8 FF 9F 3D |  if_ae	jmp	#LR__4601
2d48c     01 07 8A FA | 	rdpin	_var04, _var02
2d490     69 06 62 FD | 	rev	_var04
2d494     1B 06 FE F9 | 	movbyts	_var04, #27
2d498     09 07 62 FC | 	wrlong	_var04, arg01
2d49c     04 12 06 F1 | 	add	arg01, #4
2d4a0     F8 05 6E FB | 	djnz	_var03, #LR__4600
2d4a4                 | LR__4602
2d4a4     03 14 0E F5 | 	and	arg02, #3 wz
2d4a8     24 00 90 AD |  if_e	jmp	#LR__4605
2d4ac     01 4F 18 FC | 	wxpin	#39, _var02
2d4b0                 | LR__4603
2d4b0     00 11 28 FC | 	wypin	#8, _var01
2d4b4                 | LR__4604
2d4b4     40 02 72 FD | 	testp	_var02 wc
2d4b8     F8 FF 9F 3D |  if_ae	jmp	#LR__4604
2d4bc     01 07 8A FA | 	rdpin	_var04, _var02
2d4c0     69 06 62 FD | 	rev	_var04
2d4c4     09 07 42 FC | 	wrbyte	_var04, arg01
2d4c8     01 12 06 F1 | 	add	arg01, #1
2d4cc     F8 15 6E FB | 	djnz	arg02, #LR__4603
2d4d0                 | LR__4605
2d4d0                 | _fatfs_cc_rcvr_mmc_1060_ret
2d4d0     2D 00 64 FD | 	ret
2d4d4                 | 
2d4d4                 | _fatfs_cc_wait_ready_1064
2d4d4     01 4A 05 F6 | 	mov	COUNT_, #1
2d4d8     A8 00 A0 FD | 	call	#pushregs_
2d4dc     10 F0 07 F1 | 	add	ptra, #16
2d4e0     1A FA 61 FD | 	getct	result1
2d4e4     08 4E 05 F1 | 	add	fp, #8
2d4e8     A7 FA 61 FC | 	wrlong	result1, fp
2d4ec     14 1E 06 FB | 	rdlong	local01, #20
2d4f0     01 1E 46 F0 | 	shr	local01, #1
2d4f4     04 4E 05 F1 | 	add	fp, #4
2d4f8     A7 1E 62 FC | 	wrlong	local01, fp
2d4fc     0C 4E 85 F1 | 	sub	fp, #12
2d500                 | ' {
2d500                 | ' 	BYTE d;
2d500                 | ' 	UINT tmr, tmout;
2d500                 | ' 
2d500                 | ' 	tmr = _cnt();
2d500                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
2d500                 | ' 	for(;;) {
2d500                 | LR__4610
2d500     04 4E 05 F1 | 	add	fp, #4
2d504     A7 12 02 F6 | 	mov	arg01, fp
2d508     04 4E 85 F1 | 	sub	fp, #4
2d50c     01 14 06 F6 | 	mov	arg02, #1
2d510     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1060
2d514     04 4E 05 F1 | 	add	fp, #4
2d518     A7 1E C2 FA | 	rdbyte	local01, fp
2d51c     04 4E 85 F1 | 	sub	fp, #4
2d520     FF 1E 0E F2 | 	cmp	local01, #255 wz
2d524     01 FA 05 A6 |  if_e	mov	result1, #1
2d528     28 00 90 AD |  if_e	jmp	#LR__4611
2d52c     1A FA 61 FD | 	getct	result1
2d530     08 4E 05 F1 | 	add	fp, #8
2d534     A7 1E 02 FB | 	rdlong	local01, fp
2d538     0F FB 81 F1 | 	sub	result1, local01
2d53c     04 4E 05 F1 | 	add	fp, #4
2d540     A7 1E 02 FB | 	rdlong	local01, fp
2d544     0C 4E 85 F1 | 	sub	fp, #12
2d548     0F FB 11 F2 | 	cmp	result1, local01 wc
2d54c     00 FA 05 36 |  if_ae	mov	result1, #0
2d550     AC FF 9F CD |  if_b	jmp	#LR__4610
2d554                 | LR__4611
2d554     A7 F0 03 F6 | 	mov	ptra, fp
2d558     B2 00 A0 FD | 	call	#popregs_
2d55c                 | _fatfs_cc_wait_ready_1064_ret
2d55c     2D 00 64 FD | 	ret
2d560                 | 
2d560                 | _fatfs_cc_deselect_1070
2d560     00 4A 05 F6 | 	mov	COUNT_, #0
2d564     A8 00 A0 FD | 	call	#pushregs_
2d568     14 F0 07 F1 | 	add	ptra, #20
2d56c     01 00 00 FF 
2d570     14 E4 05 F1 | 	add	objptr, ##532
2d574     F2 14 02 FB | 	rdlong	arg02, objptr
2d578     04 4E 05 F1 | 	add	fp, #4
2d57c     A7 14 62 FC | 	wrlong	arg02, fp
2d580     04 E4 85 F1 | 	sub	objptr, #4
2d584     F2 14 02 FB | 	rdlong	arg02, objptr
2d588     04 4E 05 F1 | 	add	fp, #4
2d58c     A7 14 62 FC | 	wrlong	arg02, fp
2d590     08 E4 05 F1 | 	add	objptr, #8
2d594     F2 14 02 FB | 	rdlong	arg02, objptr
2d598     04 4E 05 F1 | 	add	fp, #4
2d59c     A7 14 62 FC | 	wrlong	arg02, fp
2d5a0     04 E4 05 F1 | 	add	objptr, #4
2d5a4     F2 14 02 FB | 	rdlong	arg02, objptr
2d5a8     01 00 00 FF 
2d5ac     1C E4 85 F1 | 	sub	objptr, ##540
2d5b0     04 4E 05 F1 | 	add	fp, #4
2d5b4     A7 14 62 FC | 	wrlong	arg02, fp
2d5b8     0C 4E 85 F1 | 	sub	fp, #12
2d5bc     A7 12 02 FB | 	rdlong	arg01, fp
2d5c0     04 4E 85 F1 | 	sub	fp, #4
2d5c4     59 12 62 FD | 	drvh	arg01
2d5c8     1F 20 64 FD | 	waitx	#16
2d5cc     A7 12 02 F6 | 	mov	arg01, fp
2d5d0     01 14 06 F6 | 	mov	arg02, #1
2d5d4     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1060
2d5d8     A7 F0 03 F6 | 	mov	ptra, fp
2d5dc     B2 00 A0 FD | 	call	#popregs_
2d5e0                 | _fatfs_cc_deselect_1070_ret
2d5e0     2D 00 64 FD | 	ret
2d5e4                 | 
2d5e4                 | _fatfs_cc_select_1074
2d5e4     00 4A 05 F6 | 	mov	COUNT_, #0
2d5e8     A8 00 A0 FD | 	call	#pushregs_
2d5ec     10 F0 07 F1 | 	add	ptra, #16
2d5f0     01 00 00 FF 
2d5f4     14 E4 05 F1 | 	add	objptr, ##532
2d5f8     F2 14 02 FB | 	rdlong	arg02, objptr
2d5fc     08 4E 05 F1 | 	add	fp, #8
2d600     A7 14 62 FC | 	wrlong	arg02, fp
2d604     08 E4 05 F1 | 	add	objptr, #8
2d608     F2 12 02 FB | 	rdlong	arg01, objptr
2d60c     01 00 00 FF 
2d610     1C E4 85 F1 | 	sub	objptr, ##540
2d614     04 4E 05 F1 | 	add	fp, #4
2d618     A7 12 62 FC | 	wrlong	arg01, fp
2d61c     50 12 62 FD | 	fltl	arg01
2d620     04 4E 85 F1 | 	sub	fp, #4
2d624     A7 12 02 FB | 	rdlong	arg01, fp
2d628     58 12 62 FD | 	drvl	arg01
2d62c     1F 20 64 FD | 	waitx	#16
2d630     04 4E 05 F1 | 	add	fp, #4
2d634     A7 12 02 FB | 	rdlong	arg01, fp
2d638     41 12 62 FD | 	dirh	arg01
2d63c     08 4E 85 F1 | 	sub	fp, #8
2d640     A7 12 02 F6 | 	mov	arg01, fp
2d644     04 4E 85 F1 | 	sub	fp, #4
2d648     01 14 06 F6 | 	mov	arg02, #1
2d64c     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1060
2d650     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1064
2d654     00 FA 0D F2 | 	cmp	result1, #0 wz
2d658     01 FA 05 56 |  if_ne	mov	result1, #1
2d65c     08 00 90 5D |  if_ne	jmp	#LR__4620
2d660     FC FE BF FD | 	call	#_fatfs_cc_deselect_1070
2d664                 | ' 
2d664                 | ' 	deselect();
2d664                 | ' 	return 0;
2d664     00 FA 05 F6 | 	mov	result1, #0
2d668                 | LR__4620
2d668     A7 F0 03 F6 | 	mov	ptra, fp
2d66c     B2 00 A0 FD | 	call	#popregs_
2d670                 | _fatfs_cc_select_1074_ret
2d670     2D 00 64 FD | 	ret
2d674                 | 
2d674                 | _fatfs_cc_rcvr_datablock_1078
2d674     01 4A 05 F6 | 	mov	COUNT_, #1
2d678     A8 00 A0 FD | 	call	#pushregs_
2d67c     18 F0 07 F1 | 	add	ptra, #24
2d680     04 4E 05 F1 | 	add	fp, #4
2d684     A7 12 62 FC | 	wrlong	arg01, fp
2d688     04 4E 05 F1 | 	add	fp, #4
2d68c     A7 14 62 FC | 	wrlong	arg02, fp
2d690     1A FA 61 FD | 	getct	result1
2d694     08 4E 05 F1 | 	add	fp, #8
2d698     A7 FA 61 FC | 	wrlong	result1, fp
2d69c     14 1E 06 FB | 	rdlong	local01, #20
2d6a0     03 1E 46 F0 | 	shr	local01, #3
2d6a4     04 4E 05 F1 | 	add	fp, #4
2d6a8     A7 1E 62 FC | 	wrlong	local01, fp
2d6ac     14 4E 85 F1 | 	sub	fp, #20
2d6b0                 | ' 	BYTE *buff,
2d6b0                 | ' 	UINT btr
2d6b0                 | ' )
2d6b0                 | ' {
2d6b0                 | ' 	BYTE d[2];
2d6b0                 | ' 	UINT tmr, tmout;
2d6b0                 | ' 
2d6b0                 | ' 	tmr = _cnt();
2d6b0                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
2d6b0                 | ' 	for(;;) {
2d6b0                 | LR__4630
2d6b0     0C 4E 05 F1 | 	add	fp, #12
2d6b4     A7 12 02 F6 | 	mov	arg01, fp
2d6b8     0C 4E 85 F1 | 	sub	fp, #12
2d6bc     01 14 06 F6 | 	mov	arg02, #1
2d6c0     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1060
2d6c4     0C 4E 05 F1 | 	add	fp, #12
2d6c8     A7 1E C2 FA | 	rdbyte	local01, fp
2d6cc     0C 4E 85 F1 | 	sub	fp, #12
2d6d0     FF 1E 0E F2 | 	cmp	local01, #255 wz
2d6d4     28 00 90 5D |  if_ne	jmp	#LR__4631
2d6d8     1A FA 61 FD | 	getct	result1
2d6dc     FD 1E 02 F6 | 	mov	local01, result1
2d6e0     10 4E 05 F1 | 	add	fp, #16
2d6e4     A7 14 02 FB | 	rdlong	arg02, fp
2d6e8     0A 1F 82 F1 | 	sub	local01, arg02
2d6ec     04 4E 05 F1 | 	add	fp, #4
2d6f0     A7 14 02 FB | 	rdlong	arg02, fp
2d6f4     14 4E 85 F1 | 	sub	fp, #20
2d6f8     0A 1F 12 F2 | 	cmp	local01, arg02 wc
2d6fc     B0 FF 9F CD |  if_b	jmp	#LR__4630
2d700                 | LR__4631
2d700     0C 4E 05 F1 | 	add	fp, #12
2d704     A7 1E C2 FA | 	rdbyte	local01, fp
2d708     0C 4E 85 F1 | 	sub	fp, #12
2d70c     FE 1E 0E F2 | 	cmp	local01, #254 wz
2d710     00 FA 05 56 |  if_ne	mov	result1, #0
2d714     30 00 90 5D |  if_ne	jmp	#LR__4632
2d718     04 4E 05 F1 | 	add	fp, #4
2d71c     A7 12 02 FB | 	rdlong	arg01, fp
2d720     04 4E 05 F1 | 	add	fp, #4
2d724     A7 14 02 FB | 	rdlong	arg02, fp
2d728     08 4E 85 F1 | 	sub	fp, #8
2d72c     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1060
2d730     0C 4E 05 F1 | 	add	fp, #12
2d734     A7 12 02 F6 | 	mov	arg01, fp
2d738     0C 4E 85 F1 | 	sub	fp, #12
2d73c     02 14 06 F6 | 	mov	arg02, #2
2d740     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1060
2d744                 | ' 
2d744                 | ' 	rcvr_mmc(buff, btr);
2d744                 | ' 	rcvr_mmc(d, 2);
2d744                 | ' 
2d744                 | ' 	return 1;
2d744     01 FA 05 F6 | 	mov	result1, #1
2d748                 | LR__4632
2d748     A7 F0 03 F6 | 	mov	ptra, fp
2d74c     B2 00 A0 FD | 	call	#popregs_
2d750                 | _fatfs_cc_rcvr_datablock_1078_ret
2d750     2D 00 64 FD | 	ret
2d754                 | 
2d754                 | _fatfs_cc_xmit_datablock_1080
2d754     00 4A 05 F6 | 	mov	COUNT_, #0
2d758     A8 00 A0 FD | 	call	#pushregs_
2d75c     10 F0 07 F1 | 	add	ptra, #16
2d760     04 4E 05 F1 | 	add	fp, #4
2d764     A7 12 62 FC | 	wrlong	arg01, fp
2d768     04 4E 05 F1 | 	add	fp, #4
2d76c     A7 14 42 FC | 	wrbyte	arg02, fp
2d770     08 4E 85 F1 | 	sub	fp, #8
2d774     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1064
2d778     00 FA 0D F2 | 	cmp	result1, #0 wz
2d77c     00 FA 05 A6 |  if_e	mov	result1, #0
2d780     90 00 90 AD |  if_e	jmp	#LR__4641
2d784     08 4E 05 F1 | 	add	fp, #8
2d788     A7 14 C2 FA | 	rdbyte	arg02, fp
2d78c     04 4E 05 F1 | 	add	fp, #4
2d790     A7 14 42 FC | 	wrbyte	arg02, fp
2d794     A7 12 02 F6 | 	mov	arg01, fp
2d798     0C 4E 85 F1 | 	sub	fp, #12
2d79c     01 14 06 F6 | 	mov	arg02, #1
2d7a0     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1053
2d7a4     08 4E 05 F1 | 	add	fp, #8
2d7a8     A7 14 C2 FA | 	rdbyte	arg02, fp
2d7ac     08 4E 85 F1 | 	sub	fp, #8
2d7b0     FD 14 0E F2 | 	cmp	arg02, #253 wz
2d7b4     58 00 90 AD |  if_e	jmp	#LR__4640
2d7b8     04 4E 05 F1 | 	add	fp, #4
2d7bc     A7 12 02 FB | 	rdlong	arg01, fp
2d7c0     04 4E 85 F1 | 	sub	fp, #4
2d7c4     09 14 C6 F9 | 	decod	arg02, #9
2d7c8     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1053
2d7cc     0C 4E 05 F1 | 	add	fp, #12
2d7d0     A7 12 02 F6 | 	mov	arg01, fp
2d7d4     0C 4E 85 F1 | 	sub	fp, #12
2d7d8     02 14 06 F6 | 	mov	arg02, #2
2d7dc     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1060
2d7e0     0C 4E 05 F1 | 	add	fp, #12
2d7e4     A7 12 02 F6 | 	mov	arg01, fp
2d7e8     0C 4E 85 F1 | 	sub	fp, #12
2d7ec     01 14 06 F6 | 	mov	arg02, #1
2d7f0     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1060
2d7f4     0C 4E 05 F1 | 	add	fp, #12
2d7f8     A7 14 C2 FA | 	rdbyte	arg02, fp
2d7fc     0C 4E 85 F1 | 	sub	fp, #12
2d800     1F 14 06 F5 | 	and	arg02, #31
2d804     05 14 0E F2 | 	cmp	arg02, #5 wz
2d808                 | ' 			return 0;
2d808     00 FA 05 56 |  if_ne	mov	result1, #0
2d80c     04 00 90 5D |  if_ne	jmp	#LR__4641
2d810                 | LR__4640
2d810                 | ' 	}
2d810                 | ' 
2d810                 | ' 	return 1;
2d810     01 FA 05 F6 | 	mov	result1, #1
2d814                 | LR__4641
2d814     A7 F0 03 F6 | 	mov	ptra, fp
2d818     B2 00 A0 FD | 	call	#popregs_
2d81c                 | _fatfs_cc_xmit_datablock_1080_ret
2d81c     2D 00 64 FD | 	ret
2d820                 | 
2d820                 | _fatfs_cc_send_cmd_1084
2d820     01 4A 05 F6 | 	mov	COUNT_, #1
2d824     A8 00 A0 FD | 	call	#pushregs_
2d828     1C F0 07 F1 | 	add	ptra, #28
2d82c                 | _fatfs_cc_send_cmd_1084_enter
2d82c     04 4E 05 F1 | 	add	fp, #4
2d830     A7 12 42 FC | 	wrbyte	arg01, fp
2d834     04 4E 05 F1 | 	add	fp, #4
2d838     A7 14 62 FC | 	wrlong	arg02, fp
2d83c     04 4E 85 F1 | 	sub	fp, #4
2d840     A7 FA C1 FA | 	rdbyte	result1, fp
2d844     04 4E 85 F1 | 	sub	fp, #4
2d848     80 FA CD F7 | 	test	result1, #128 wz
2d84c     44 00 90 AD |  if_e	jmp	#LR__4650
2d850     04 4E 05 F1 | 	add	fp, #4
2d854     A7 14 C2 FA | 	rdbyte	arg02, fp
2d858     7F 14 06 F5 | 	and	arg02, #127
2d85c     A7 14 42 FC | 	wrbyte	arg02, fp
2d860     04 4E 85 F1 | 	sub	fp, #4
2d864     37 12 06 F6 | 	mov	arg01, #55
2d868     00 14 06 F6 | 	mov	arg02, #0
2d86c     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1084
2d870     0C 4E 05 F1 | 	add	fp, #12
2d874     A7 FA 41 FC | 	wrbyte	result1, fp
2d878     A7 14 C2 FA | 	rdbyte	arg02, fp
2d87c     0C 4E 85 F1 | 	sub	fp, #12
2d880     02 14 16 F2 | 	cmp	arg02, #2 wc
2d884     0C 4E 05 31 |  if_ae	add	fp, #12
2d888     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
2d88c     0C 4E 85 31 |  if_ae	sub	fp, #12
2d890     6C 01 90 3D |  if_ae	jmp	#LR__4654
2d894                 | LR__4650
2d894     04 4E 05 F1 | 	add	fp, #4
2d898     A7 14 C2 FA | 	rdbyte	arg02, fp
2d89c     04 4E 85 F1 | 	sub	fp, #4
2d8a0     0C 14 0E F2 | 	cmp	arg02, #12 wz
2d8a4     14 00 90 AD |  if_e	jmp	#LR__4651
2d8a8     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1070
2d8ac     34 FD BF FD | 	call	#_fatfs_cc_select_1074
2d8b0     00 FA 0D F2 | 	cmp	result1, #0 wz
2d8b4     FF FA 05 A6 |  if_e	mov	result1, #255
2d8b8     44 01 90 AD |  if_e	jmp	#LR__4654
2d8bc                 | LR__4651
2d8bc     04 4E 05 F1 | 	add	fp, #4
2d8c0     A7 14 C2 FA | 	rdbyte	arg02, fp
2d8c4     40 FA 05 F6 | 	mov	result1, #64
2d8c8     0A FB 41 F5 | 	or	result1, arg02
2d8cc     10 4E 05 F1 | 	add	fp, #16
2d8d0     A7 FA 41 FC | 	wrbyte	result1, fp
2d8d4     0C 4E 85 F1 | 	sub	fp, #12
2d8d8     A7 FA 01 FB | 	rdlong	result1, fp
2d8dc     18 FA 45 F0 | 	shr	result1, #24
2d8e0     0D 4E 05 F1 | 	add	fp, #13
2d8e4     A7 FA 41 FC | 	wrbyte	result1, fp
2d8e8     0D 4E 85 F1 | 	sub	fp, #13
2d8ec     A7 FA 01 FB | 	rdlong	result1, fp
2d8f0     10 FA 45 F0 | 	shr	result1, #16
2d8f4     0E 4E 05 F1 | 	add	fp, #14
2d8f8     A7 FA 41 FC | 	wrbyte	result1, fp
2d8fc     0E 4E 85 F1 | 	sub	fp, #14
2d900     A7 FA 01 FB | 	rdlong	result1, fp
2d904     08 FA 45 F0 | 	shr	result1, #8
2d908     0F 4E 05 F1 | 	add	fp, #15
2d90c     A7 FA 41 FC | 	wrbyte	result1, fp
2d910     0F 4E 85 F1 | 	sub	fp, #15
2d914     A7 FA 01 FB | 	rdlong	result1, fp
2d918     10 4E 05 F1 | 	add	fp, #16
2d91c     A7 FA 41 FC | 	wrbyte	result1, fp
2d920     0C 4E 85 F1 | 	sub	fp, #12
2d924     A7 02 48 FC | 	wrbyte	#1, fp
2d928     08 4E 85 F1 | 	sub	fp, #8
2d92c     A7 FA C9 FA | 	rdbyte	result1, fp wz
2d930     04 4E 85 F1 | 	sub	fp, #4
2d934     0C 4E 05 A1 |  if_e	add	fp, #12
2d938     A7 2A 49 AC |  if_e	wrbyte	#149, fp
2d93c     0C 4E 85 A1 |  if_e	sub	fp, #12
2d940     04 4E 05 F1 | 	add	fp, #4
2d944     A7 FA C1 FA | 	rdbyte	result1, fp
2d948     04 4E 85 F1 | 	sub	fp, #4
2d94c     08 FA 0D F2 | 	cmp	result1, #8 wz
2d950     0C 4E 05 A1 |  if_e	add	fp, #12
2d954     A7 0E 49 AC |  if_e	wrbyte	#135, fp
2d958     0C 4E 85 A1 |  if_e	sub	fp, #12
2d95c     0C 4E 05 F1 | 	add	fp, #12
2d960     A7 14 C2 FA | 	rdbyte	arg02, fp
2d964     0D 4E 05 F1 | 	add	fp, #13
2d968     A7 14 42 FC | 	wrbyte	arg02, fp
2d96c     05 4E 85 F1 | 	sub	fp, #5
2d970     A7 12 02 F6 | 	mov	arg01, fp
2d974     14 4E 85 F1 | 	sub	fp, #20
2d978     06 14 06 F6 | 	mov	arg02, #6
2d97c     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1053
2d980     04 4E 05 F1 | 	add	fp, #4
2d984     A7 1E C2 FA | 	rdbyte	local01, fp
2d988     04 4E 85 F1 | 	sub	fp, #4
2d98c     0C 1E 0E F2 | 	cmp	local01, #12 wz
2d990     10 4E 05 A1 |  if_e	add	fp, #16
2d994     A7 12 02 A6 |  if_e	mov	arg01, fp
2d998     10 4E 85 A1 |  if_e	sub	fp, #16
2d99c     01 14 06 A6 |  if_e	mov	arg02, #1
2d9a0     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1060
2d9a4     0C 4E 05 F1 | 	add	fp, #12
2d9a8     A7 14 48 FC | 	wrbyte	#10, fp
2d9ac     0C 4E 85 F1 | 	sub	fp, #12
2d9b0                 | ' 	n = 10;
2d9b0                 | ' 	do
2d9b0                 | LR__4652
2d9b0     10 4E 05 F1 | 	add	fp, #16
2d9b4     A7 12 02 F6 | 	mov	arg01, fp
2d9b8     10 4E 85 F1 | 	sub	fp, #16
2d9bc     01 14 06 F6 | 	mov	arg02, #1
2d9c0     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1060
2d9c4     10 4E 05 F1 | 	add	fp, #16
2d9c8     A7 1E C2 FA | 	rdbyte	local01, fp
2d9cc     10 4E 85 F1 | 	sub	fp, #16
2d9d0     80 1E CE F7 | 	test	local01, #128 wz
2d9d4     1C 00 90 AD |  if_e	jmp	#LR__4653
2d9d8     0C 4E 05 F1 | 	add	fp, #12
2d9dc     A7 1E C2 FA | 	rdbyte	local01, fp
2d9e0     01 1E 86 F1 | 	sub	local01, #1
2d9e4     A7 1E 42 FC | 	wrbyte	local01, fp
2d9e8     A7 1E CA FA | 	rdbyte	local01, fp wz
2d9ec     0C 4E 85 F1 | 	sub	fp, #12
2d9f0     BC FF 9F 5D |  if_ne	jmp	#LR__4652
2d9f4                 | LR__4653
2d9f4                 | ' 
2d9f4                 | ' 	return d;
2d9f4     10 4E 05 F1 | 	add	fp, #16
2d9f8     A7 FA C1 FA | 	rdbyte	result1, fp
2d9fc     10 4E 85 F1 | 	sub	fp, #16
2da00                 | LR__4654
2da00     A7 F0 03 F6 | 	mov	ptra, fp
2da04     B2 00 A0 FD | 	call	#popregs_
2da08                 | _fatfs_cc_send_cmd_1084_ret
2da08     2D 00 64 FD | 	ret
2da0c                 | 
2da0c                 | _fatfs_cc_disk_deinitialize
2da0c     03 4A 05 F6 | 	mov	COUNT_, #3
2da10     A8 00 A0 FD | 	call	#pushregs_
2da14     00 12 4E F2 | 	cmps	arg01, #0 wz
2da18     01 00 00 FF 
2da1c     14 E4 05 F1 | 	add	objptr, ##532
2da20     F2 12 02 FB | 	rdlong	arg01, objptr
2da24     04 E4 85 F1 | 	sub	objptr, #4
2da28     F2 1E 02 FB | 	rdlong	local01, objptr
2da2c     08 E4 05 F1 | 	add	objptr, #8
2da30     F2 20 02 FB | 	rdlong	local02, objptr
2da34     04 E4 05 F1 | 	add	objptr, #4
2da38     F2 22 02 FB | 	rdlong	local03, objptr
2da3c     01 00 00 FF 
2da40     1C E4 85 F1 | 	sub	objptr, ##540
2da44                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2da44                 | '         return RES_NOTRDY;
2da44     03 FA 05 56 |  if_ne	mov	result1, #3
2da48     2C 00 90 5D |  if_ne	jmp	#LR__4660
2da4c     50 12 62 FD | 	fltl	arg01
2da50     09 01 08 FC | 	wrpin	#0, arg01
2da54     50 1E 62 FD | 	fltl	local01
2da58     0F 01 08 FC | 	wrpin	#0, local01
2da5c     50 20 62 FD | 	fltl	local02
2da60     10 01 08 FC | 	wrpin	#0, local02
2da64     50 22 62 FD | 	fltl	local03
2da68     11 01 08 FC | 	wrpin	#0, local03
2da6c     0A 12 06 F6 | 	mov	arg01, #10
2da70     98 13 BF FD | 	call	#__system___waitms
2da74                 | '     }
2da74                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2da74                 | '     _pinclear(PIN_SS);
2da74                 | '     _pinclear(PIN_CLK);
2da74                 | '     _pinclear(PIN_DI);
2da74                 | '     _pinclear(PIN_DO);
2da74                 | ' 
2da74                 | '     _waitms(10);
2da74                 | ' 
2da74                 | '     return 0;
2da74     00 FA 05 F6 | 	mov	result1, #0
2da78                 | LR__4660
2da78     A7 F0 03 F6 | 	mov	ptra, fp
2da7c     B2 00 A0 FD | 	call	#popregs_
2da80                 | _fatfs_cc_disk_deinitialize_ret
2da80     2D 00 64 FD | 	ret
2da84                 | 
2da84                 | _fatfs_cc_gettimeofday
2da84     04 4A 05 F6 | 	mov	COUNT_, #4
2da88     A8 00 A0 FD | 	call	#pushregs_
2da8c     09 1F 02 F6 | 	mov	local01, arg01
2da90     54 0F BF FD | 	call	#__system___getus
2da94     FD 12 02 F6 | 	mov	arg01, result1
2da98     02 00 00 FF 
2da9c     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
2daa0     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
2daa4     09 FB 01 F6 | 	mov	result1, arg01
2daa8     10 FB 81 F1 | 	sub	result1, local02
2daac     A1 07 00 FF 
2dab0     40 FA 15 FD | 	qdiv	result1, ##1000000
2dab4     02 00 00 FF 
2dab8     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2dabc     18 20 62 FD | 	getqx	local02
2dac0     A1 07 00 FF 
2dac4     40 FA 15 FD | 	qdiv	result1, ##1000000
2dac8     00 20 0E F2 | 	cmp	local02, #0 wz
2dacc     19 22 62 FD | 	getqy	local03
2dad0     28 00 90 AD |  if_e	jmp	#LR__4670
2dad4     02 00 00 FF 
2dad8     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2dadc     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2dae0     10 25 02 F1 | 	add	local04, local02
2dae4     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
2dae8     11 13 82 F1 | 	sub	arg01, local03
2daec     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
2daf0     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
2daf4     02 00 00 FF 
2daf8     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2dafc                 | LR__4670
2dafc     02 00 00 FF 
2db00     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2db04     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2db08     02 00 00 FF 
2db0c     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
2db10     0F 25 62 FC | 	wrlong	local04, local01
2db14     04 1E 06 F1 | 	add	local01, #4
2db18     0F 23 62 FC | 	wrlong	local03, local01
2db1c                 | '         lastsec += secs;
2db1c                 | '         lastus = now - leftover;
2db1c                 | '     }
2db1c                 | '     tv->tv_sec = lastsec;
2db1c                 | '     tv->tv_usec = leftover;
2db1c                 | '     return 0;
2db1c     00 FA 05 F6 | 	mov	result1, #0
2db20     A7 F0 03 F6 | 	mov	ptra, fp
2db24     B2 00 A0 FD | 	call	#popregs_
2db28                 | _fatfs_cc_gettimeofday_ret
2db28     2D 00 64 FD | 	ret
2db2c                 | 
2db2c                 | _fatfs_cc__is_leap_year
2db2c     09 FB 51 F6 | 	abs	result1, arg01 wc
2db30     03 FA 05 F5 | 	and	result1, #3
2db34     FD FA 89 F6 | 	negc	result1, result1 wz
2db38     38 00 90 5D |  if_ne	jmp	#LR__4681
2db3c     09 FB 51 F6 | 	abs	result1, arg01 wc
2db40     64 FA 15 FD | 	qdiv	result1, #100
2db44     19 FA 61 FD | 	getqy	result1
2db48     FD FA 89 F6 | 	negc	result1, result1 wz
2db4c     1C 00 90 5D |  if_ne	jmp	#LR__4680
2db50     09 FB 51 F6 | 	abs	result1, arg01 wc
2db54     90 FB 15 FD | 	qdiv	result1, #400
2db58                 | '       return (0 == y % 400);
2db58     00 FA 05 F6 | 	mov	result1, #0
2db5c     19 00 62 FD | 	getqy	_var01
2db60     00 01 8A F6 | 	negc	_var01, _var01 wz
2db64     01 FA 05 A6 |  if_e	mov	result1, #1
2db68     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2db6c                 | LR__4680
2db6c                 | '     return 1;
2db6c     01 FA 05 F6 | 	mov	result1, #1
2db70     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2db74                 | LR__4681
2db74                 | '   }
2db74                 | '   return 0;
2db74     00 FA 05 F6 | 	mov	result1, #0
2db78                 | _fatfs_cc__is_leap_year_ret
2db78     2D 00 64 FD | 	ret
2db7c                 | 
2db7c                 | _fatfs_cc___tzoffset
2db7c     09 01 0A F6 | 	mov	_var01, arg01 wz
2db80     FF FF FF FF 
2db84     0A FF 6B FC | 	wrlong	##-1, arg02
2db88     01 02 06 F6 | 	mov	_var02, #1
2db8c     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
2db90                 | '                 return 0;
2db90     00 FA 05 A6 |  if_e	mov	result1, #0
2db94     94 02 90 AD |  if_e	jmp	#LR__4707
2db98     0A 01 68 FC | 	wrlong	#0, arg02
2db9c     02 00 00 FF 
2dba0     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2dba4     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2dba8                 | ' 
2dba8                 | '        *hasdst = 0;
2dba8                 | ' 
2dba8                 | ' 	n = stdname;
2dba8                 | '         while (*s && isalpha(*s)) {
2dba8     02 00 00 FF 
2dbac     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2dbb0     97 28 48 FB | 	callpa	#(@LR__4691-@LR__4690)>>2,fcache_load_ptr_
2dbb4                 | LR__4690
2dbb4     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2dbb8     48 00 90 AD |  if_e	jmp	#LR__4692
2dbbc     00 13 C2 FA | 	rdbyte	arg01, _var01
2dbc0                 | ' {
2dbc0                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2dbc0     80 12 36 F3 | 	fle	arg01, #128 wc
2dbc4                 | '     return __ctype[c];
2dbc4     02 00 00 FF 
2dbc8     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2dbcc     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2dbd0     09 FB C1 FA | 	rdbyte	result1, arg01
2dbd4     02 00 00 FF 
2dbd8     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2dbdc     0C FA CD F7 | 	test	result1, #12 wz
2dbe0     20 00 90 AD |  if_e	jmp	#LR__4692
2dbe4     00 09 02 F6 | 	mov	_var05, _var01
2dbe8     00 0B 02 F6 | 	mov	_var06, _var01
2dbec     01 0A 06 F1 | 	add	_var06, #1
2dbf0     04 0D C2 FA | 	rdbyte	_var07, _var05
2dbf4     05 01 02 F6 | 	mov	_var01, _var06
2dbf8     03 0D 42 FC | 	wrbyte	_var07, _var04
2dbfc     01 06 06 F1 | 	add	_var04, #1
2dc00     B0 FF 9F FD | 	jmp	#LR__4690
2dc04                 | LR__4691
2dc04                 | LR__4692
2dc04     03 01 48 FC | 	wrbyte	#0, _var04
2dc08     00 0E 06 F6 | 	mov	_var08, #0
2dc0c     00 05 C2 FA | 	rdbyte	_var03, _var01
2dc10     2D 04 0E F2 | 	cmp	_var03, #45 wz
2dc14     01 02 66 A6 |  if_e	neg	_var02, #1
2dc18     01 00 06 A1 |  if_e	add	_var01, #1
2dc1c     97 28 48 FB | 	callpa	#(@LR__4694-@LR__4693)>>2,fcache_load_ptr_
2dc20                 | '                 sgn = -1;
2dc20                 | '                 s++;
2dc20                 | '         }
2dc20                 | '         while (isdigit(*s)) {
2dc20                 | LR__4693
2dc20     00 13 C2 FA | 	rdbyte	arg01, _var01
2dc24                 | ' {
2dc24                 | '   return  (__ctype_get(c) & 0x02 ) ;
2dc24     80 12 36 F3 | 	fle	arg01, #128 wc
2dc28                 | '     return __ctype[c];
2dc28     02 00 00 FF 
2dc2c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2dc30     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2dc34     09 FB C1 FA | 	rdbyte	result1, arg01
2dc38     02 00 00 FF 
2dc3c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2dc40     02 FA CD F7 | 	test	result1, #2 wz
2dc44     28 00 90 AD |  if_e	jmp	#LR__4695
2dc48     07 05 02 F6 | 	mov	_var03, _var08
2dc4c     02 04 66 F0 | 	shl	_var03, #2
2dc50     07 05 02 F1 | 	add	_var03, _var08
2dc54     01 04 66 F0 | 	shl	_var03, #1
2dc58     00 09 C2 FA | 	rdbyte	_var05, _var01
2dc5c     30 08 86 F1 | 	sub	_var05, #48
2dc60     04 05 02 F1 | 	add	_var03, _var05
2dc64     02 0F 02 F6 | 	mov	_var08, _var03
2dc68     01 00 06 F1 | 	add	_var01, #1
2dc6c     B0 FF 9F FD | 	jmp	#LR__4693
2dc70                 | LR__4694
2dc70                 | LR__4695
2dc70     07 00 00 FF 
2dc74     10 0E 06 FD | 	qmul	_var08, ##3600
2dc78     00 05 C2 FA | 	rdbyte	_var03, _var01
2dc7c     3A 04 0E F2 | 	cmp	_var03, #58 wz
2dc80     18 10 62 FD | 	getqx	_var09
2dc84     70 00 90 5D |  if_ne	jmp	#LR__4699
2dc88     00 0E 06 F6 | 	mov	_var08, #0
2dc8c     01 00 06 F1 | 	add	_var01, #1
2dc90     97 28 48 FB | 	callpa	#(@LR__4697-@LR__4696)>>2,fcache_load_ptr_
2dc94                 | '                 x = 0;
2dc94                 | '                 s++;
2dc94                 | '                 while (isdigit(*s)) {
2dc94                 | LR__4696
2dc94     00 13 C2 FA | 	rdbyte	arg01, _var01
2dc98                 | ' {
2dc98                 | '   return  (__ctype_get(c) & 0x02 ) ;
2dc98     80 12 36 F3 | 	fle	arg01, #128 wc
2dc9c                 | '     return __ctype[c];
2dc9c     02 00 00 FF 
2dca0     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2dca4     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2dca8     09 FB C1 FA | 	rdbyte	result1, arg01
2dcac     02 00 00 FF 
2dcb0     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2dcb4     02 FA CD F7 | 	test	result1, #2 wz
2dcb8     28 00 90 AD |  if_e	jmp	#LR__4698
2dcbc     07 05 02 F6 | 	mov	_var03, _var08
2dcc0     02 04 66 F0 | 	shl	_var03, #2
2dcc4     07 05 02 F1 | 	add	_var03, _var08
2dcc8     01 04 66 F0 | 	shl	_var03, #1
2dccc     00 09 C2 FA | 	rdbyte	_var05, _var01
2dcd0     30 08 86 F1 | 	sub	_var05, #48
2dcd4     04 05 02 F1 | 	add	_var03, _var05
2dcd8     02 0F 02 F6 | 	mov	_var08, _var03
2dcdc     01 00 06 F1 | 	add	_var01, #1
2dce0     B0 FF 9F FD | 	jmp	#LR__4696
2dce4                 | LR__4697
2dce4                 | LR__4698
2dce4     07 0D 02 F6 | 	mov	_var07, _var08
2dce8     04 0C 66 F0 | 	shl	_var07, #4
2dcec     07 0D 82 F1 | 	sub	_var07, _var08
2dcf0     02 0C 66 F0 | 	shl	_var07, #2
2dcf4     06 11 02 F1 | 	add	_var09, _var07
2dcf8                 | LR__4699
2dcf8     02 00 00 FF 
2dcfc     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2dd00     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2dd04     00 13 C2 FA | 	rdbyte	arg01, _var01
2dd08                 | ' {
2dd08                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2dd08     80 12 36 F3 | 	fle	arg01, #128 wc
2dd0c                 | '     return __ctype[c];
2dd0c     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
2dd10     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2dd14     09 FB C1 FA | 	rdbyte	result1, arg01
2dd18     02 00 00 FF 
2dd1c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2dd20     0C FA CD F7 | 	test	result1, #12 wz
2dd24     50 00 90 AD |  if_e	jmp	#LR__4702
2dd28     0A 03 68 FC | 	wrlong	#1, arg02
2dd2c                 | '                 *hasdst = 1;
2dd2c                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
2dd2c                 | LR__4700
2dd2c     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2dd30     44 00 90 AD |  if_e	jmp	#LR__4701
2dd34     00 13 C2 FA | 	rdbyte	arg01, _var01
2dd38                 | ' {
2dd38                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2dd38     80 12 36 F3 | 	fle	arg01, #128 wc
2dd3c                 | '     return __ctype[c];
2dd3c     02 00 00 FF 
2dd40     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2dd44     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2dd48     09 FB C1 FA | 	rdbyte	result1, arg01
2dd4c     02 00 00 FF 
2dd50     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2dd54     0C FA CD F7 | 	test	result1, #12 wz
2dd58     1C 00 90 AD |  if_e	jmp	#LR__4701
2dd5c     00 0B 02 F6 | 	mov	_var06, _var01
2dd60     01 0A 06 F1 | 	add	_var06, #1
2dd64     00 0D C2 FA | 	rdbyte	_var07, _var01
2dd68     05 01 02 F6 | 	mov	_var01, _var06
2dd6c     03 0D 42 FC | 	wrbyte	_var07, _var04
2dd70     01 06 06 F1 | 	add	_var04, #1
2dd74     B4 FF 9F FD | 	jmp	#LR__4700
2dd78                 | LR__4701
2dd78                 | LR__4702
2dd78     03 01 48 FC | 	wrbyte	#0, _var04
2dd7c     02 00 00 FF 
2dd80     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2dd84     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2dd88     02 00 00 FF 
2dd8c     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2dd90     20 00 90 AD |  if_e	jmp	#LR__4703
2dd94     02 00 00 FF 
2dd98     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2dd9c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2dda0     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
2dda4     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2dda8     02 00 00 FF 
2ddac     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2ddb0     1C 00 90 FD | 	jmp	#LR__4704
2ddb4                 | LR__4703
2ddb4     02 00 00 FF 
2ddb8     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
2ddbc     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2ddc0     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
2ddc4     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2ddc8     02 00 00 FF 
2ddcc     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2ddd0                 | LR__4704
2ddd0     02 00 00 FF 
2ddd4     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2ddd8     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2dddc     02 00 00 FF 
2dde0     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
2dde4     20 00 90 AD |  if_e	jmp	#LR__4705
2dde8     02 00 00 FF 
2ddec     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2ddf0     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2ddf4     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
2ddf8     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2ddfc     02 00 00 FF 
2de00     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2de04     1C 00 90 FD | 	jmp	#LR__4706
2de08                 | LR__4705
2de08     02 00 00 FF 
2de0c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2de10     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2de14     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
2de18     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2de1c     02 00 00 FF 
2de20     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2de24                 | LR__4706
2de24     08 03 02 FD | 	qmul	_var02, _var09
2de28                 | ' 		_tzname[1] = stdname;
2de28                 | ' 
2de28                 | '         return sgn * off;
2de28     18 FA 61 FD | 	getqx	result1
2de2c                 | LR__4707
2de2c                 | _fatfs_cc___tzoffset_ret
2de2c     2D 00 64 FD | 	ret
2de30                 | 
2de30                 | _fatfs_cc___indst
2de30     10 12 06 F1 | 	add	arg01, #16
2de34     09 01 02 FB | 	rdlong	_var01, arg01
2de38     10 12 86 F1 | 	sub	arg01, #16
2de3c     02 00 0E F2 | 	cmp	_var01, #2 wz
2de40     30 00 90 5D |  if_ne	jmp	#LR__4710
2de44     07 00 06 F6 | 	mov	_var01, #7
2de48     18 12 06 F1 | 	add	arg01, #24
2de4c     09 03 02 FB | 	rdlong	_var02, arg01
2de50     01 01 02 F1 | 	add	_var01, _var02
2de54     0C 12 86 F1 | 	sub	arg01, #12
2de58     09 05 02 FB | 	rdlong	_var03, arg01
2de5c     02 01 82 F1 | 	sub	_var01, _var03
2de60     00 00 56 F2 | 	cmps	_var01, #0 wc
2de64                 | '                         return 1;
2de64     01 FA 05 C6 |  if_b	mov	result1, #1
2de68     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2de6c                 | '                 return 0;
2de6c     00 FA 05 F6 | 	mov	result1, #0
2de70     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2de74                 | LR__4710
2de74     10 12 06 F1 | 	add	arg01, #16
2de78     09 01 02 FB | 	rdlong	_var01, arg01
2de7c     10 12 86 F1 | 	sub	arg01, #16
2de80     0A 00 0E F2 | 	cmp	_var01, #10 wz
2de84     28 00 90 5D |  if_ne	jmp	#LR__4711
2de88     18 12 06 F1 | 	add	arg01, #24
2de8c     09 01 02 FB | 	rdlong	_var01, arg01
2de90     0C 12 86 F1 | 	sub	arg01, #12
2de94     09 07 02 FB | 	rdlong	_var04, arg01
2de98     03 01 82 F1 | 	sub	_var01, _var04
2de9c     00 00 56 F2 | 	cmps	_var01, #0 wc
2dea0                 | '                         return 0;
2dea0     00 FA 05 C6 |  if_b	mov	result1, #0
2dea4     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2dea8                 | '                 return 1;
2dea8     01 FA 05 F6 | 	mov	result1, #1
2deac     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2deb0                 | LR__4711
2deb0                 | '         }
2deb0                 | ' 
2deb0                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
2deb0     00 00 06 F6 | 	mov	_var01, #0
2deb4     10 12 06 F1 | 	add	arg01, #16
2deb8     09 03 02 FB | 	rdlong	_var02, arg01
2debc     10 12 86 F1 | 	sub	arg01, #16
2dec0     03 02 56 F2 | 	cmps	_var02, #3 wc
2dec4     10 00 90 CD |  if_b	jmp	#LR__4712
2dec8     10 12 06 F1 | 	add	arg01, #16
2decc     09 05 02 FB | 	rdlong	_var03, arg01
2ded0     0A 04 56 F2 | 	cmps	_var03, #10 wc
2ded4     01 00 06 C6 |  if_b	mov	_var01, #1
2ded8                 | LR__4712
2ded8     00 FB 01 F6 | 	mov	result1, _var01
2dedc                 | _fatfs_cc___indst_ret
2dedc     2D 00 64 FD | 	ret
2dee0                 | 
2dee0                 | ' 	
2dee0                 | ' 	FUNCTION pfunc(c as integer) as integer
2dee0                 | ___strs_cl_pfunc
2dee0                 | ' 		if (i < 16) then
2dee0     04 E4 05 F1 | 	add	objptr, #4
2dee4     F2 FA 01 FB | 	rdlong	result1, objptr
2dee8     04 E4 85 F1 | 	sub	objptr, #4
2deec     10 FA 55 F2 | 	cmps	result1, #16 wc
2def0     2C 00 90 3D |  if_ae	jmp	#LR__4720
2def4     F2 FA 01 FB | 	rdlong	result1, objptr
2def8     04 E4 05 F1 | 	add	objptr, #4
2defc     F2 00 02 FB | 	rdlong	_var01, objptr
2df00     FD 00 02 F1 | 	add	_var01, result1
2df04     00 13 42 FC | 	wrbyte	arg01, _var01
2df08     F2 FA 01 FB | 	rdlong	result1, objptr
2df0c     01 FA 05 F1 | 	add	result1, #1
2df10     F2 FA 61 FC | 	wrlong	result1, objptr
2df14     04 E4 85 F1 | 	sub	objptr, #4
2df18                 | ' 			p(i) = c
2df18                 | ' 			i = i+1
2df18                 | ' 			return 1
2df18     01 FA 05 F6 | 	mov	result1, #1
2df1c     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
2df20                 | LR__4720
2df20                 | ' 			return -1
2df20     01 FA 65 F6 | 	neg	result1, #1
2df24                 | ___strs_cl_pfunc_ret
2df24     2D 00 64 FD | 	ret
2df28                 | 
2df28                 | __struct__s_vfs_file_t_putchar
2df28     04 4A 05 F6 | 	mov	COUNT_, #4
2df2c     A8 00 A0 FD | 	call	#pushregs_
2df30     1C E4 05 F1 | 	add	objptr, #28
2df34     F2 1E 0A FB | 	rdlong	local01, objptr wz
2df38     1C E4 85 F1 | 	sub	objptr, #28
2df3c     00 FA 05 A6 |  if_e	mov	result1, #0
2df40     48 00 90 AD |  if_e	jmp	#LR__4730
2df44     1C E4 05 F1 | 	add	objptr, #28
2df48     F2 20 02 FB | 	rdlong	local02, objptr
2df4c     10 23 02 F6 | 	mov	local03, local02
2df50     1C E4 85 F1 | 	sub	objptr, #28
2df54     13 22 46 F7 | 	zerox	local03, #19
2df58     14 20 46 F0 | 	shr	local02, #20
2df5c     02 20 66 F0 | 	shl	local02, #2
2df60     ED 20 02 F1 | 	add	local02, __methods__
2df64     10 21 02 FB | 	rdlong	local02, local02
2df68     F2 14 02 F6 | 	mov	arg02, objptr
2df6c     F2 24 02 F6 | 	mov	local04, objptr
2df70     11 E5 01 F6 | 	mov	objptr, local03
2df74     2D 20 62 FD | 	call	local02
2df78     12 E5 01 F6 | 	mov	objptr, local04
2df7c                 | '     return (i < 0) ? 0 : 1;
2df7c     00 FA 55 F2 | 	cmps	result1, #0 wc
2df80     00 1E 06 C6 |  if_b	mov	local01, #0
2df84     01 1E 06 36 |  if_ae	mov	local01, #1
2df88     0F FB 01 F6 | 	mov	result1, local01
2df8c                 | LR__4730
2df8c     A7 F0 03 F6 | 	mov	ptra, fp
2df90     B2 00 A0 FD | 	call	#popregs_
2df94                 | __struct__s_vfs_file_t_putchar_ret
2df94     2D 00 64 FD | 	ret
2df98                 | 
2df98                 | __struct__s_vfs_file_t_getchar
2df98     03 4A 05 F6 | 	mov	COUNT_, #3
2df9c     A8 00 A0 FD | 	call	#pushregs_
2dfa0     20 E4 05 F1 | 	add	objptr, #32
2dfa4     F2 12 0A FB | 	rdlong	arg01, objptr wz
2dfa8     20 E4 85 F1 | 	sub	objptr, #32
2dfac     01 FA 65 A6 |  if_e	neg	result1, #1
2dfb0     38 00 90 AD |  if_e	jmp	#LR__4740
2dfb4                 | '     return getcf(__this);
2dfb4     20 E4 05 F1 | 	add	objptr, #32
2dfb8     F2 1E 02 FB | 	rdlong	local01, objptr
2dfbc     0F 21 02 F6 | 	mov	local02, local01
2dfc0     20 E4 85 F1 | 	sub	objptr, #32
2dfc4     13 20 46 F7 | 	zerox	local02, #19
2dfc8     14 1E 46 F0 | 	shr	local01, #20
2dfcc     02 1E 66 F0 | 	shl	local01, #2
2dfd0     ED 1E 02 F1 | 	add	local01, __methods__
2dfd4     0F 1F 02 FB | 	rdlong	local01, local01
2dfd8     F2 12 02 F6 | 	mov	arg01, objptr
2dfdc     F2 22 02 F6 | 	mov	local03, objptr
2dfe0     10 E5 01 F6 | 	mov	objptr, local02
2dfe4     2D 1E 62 FD | 	call	local01
2dfe8     11 E5 01 F6 | 	mov	objptr, local03
2dfec                 | LR__4740
2dfec     A7 F0 03 F6 | 	mov	ptra, fp
2dff0     B2 00 A0 FD | 	call	#popregs_
2dff4                 | __struct__s_vfs_file_t_getchar_ret
2dff4     2D 00 64 FD | 	ret
2dff8                 | 
2dff8                 | __struct___bas_wrap_sender_tx
2dff8     03 4A 05 F6 | 	mov	COUNT_, #3
2dffc     A8 00 A0 FD | 	call	#pushregs_
2e000     F2 1E 02 FB | 	rdlong	local01, objptr
2e004     0F 21 02 F6 | 	mov	local02, local01
2e008     13 1E 46 F7 | 	zerox	local01, #19
2e00c     14 20 46 F0 | 	shr	local02, #20
2e010     02 20 66 F0 | 	shl	local02, #2
2e014     ED 20 02 F1 | 	add	local02, __methods__
2e018     10 21 02 FB | 	rdlong	local02, local02
2e01c     F2 22 02 F6 | 	mov	local03, objptr
2e020     0F E5 01 F6 | 	mov	objptr, local01
2e024     2D 20 62 FD | 	call	local02
2e028     11 E5 01 F6 | 	mov	objptr, local03
2e02c     01 FA 05 F6 | 	mov	result1, #1
2e030     A7 F0 03 F6 | 	mov	ptra, fp
2e034     B2 00 A0 FD | 	call	#popregs_
2e038                 | __struct___bas_wrap_sender_tx_ret
2e038     2D 00 64 FD | 	ret
2e03c                 | 
2e03c                 | __struct___bas_wrap_sender_rx
2e03c     03 4A 05 F6 | 	mov	COUNT_, #3
2e040     A8 00 A0 FD | 	call	#pushregs_
2e044     04 E4 05 F1 | 	add	objptr, #4
2e048     F2 1E 02 FB | 	rdlong	local01, objptr
2e04c     0F 21 02 F6 | 	mov	local02, local01
2e050     04 E4 85 F1 | 	sub	objptr, #4
2e054     13 20 46 F7 | 	zerox	local02, #19
2e058     14 1E 46 F0 | 	shr	local01, #20
2e05c     02 1E 66 F0 | 	shl	local01, #2
2e060     ED 1E 02 F1 | 	add	local01, __methods__
2e064     0F 1F 02 FB | 	rdlong	local01, local01
2e068     F2 22 02 F6 | 	mov	local03, objptr
2e06c     10 E5 01 F6 | 	mov	objptr, local02
2e070     2D 1E 62 FD | 	call	local01
2e074     11 E5 01 F6 | 	mov	objptr, local03
2e078     A7 F0 03 F6 | 	mov	ptra, fp
2e07c     B2 00 A0 FD | 	call	#popregs_
2e080                 | __struct___bas_wrap_sender_rx_ret
2e080     2D 00 64 FD | 	ret
2e084                 | 
2e084                 | __struct___bas_wrap_sender_close
2e084     03 4A 05 F6 | 	mov	COUNT_, #3
2e088     A8 00 A0 FD | 	call	#pushregs_
2e08c     08 E4 05 F1 | 	add	objptr, #8
2e090     F2 1E 02 FB | 	rdlong	local01, objptr
2e094     0F 21 02 F6 | 	mov	local02, local01
2e098     08 E4 85 F1 | 	sub	objptr, #8
2e09c     13 20 46 F7 | 	zerox	local02, #19
2e0a0     14 1E 46 F0 | 	shr	local01, #20
2e0a4     02 1E 66 F0 | 	shl	local01, #2
2e0a8     ED 1E 02 F1 | 	add	local01, __methods__
2e0ac     0F 1F 02 FB | 	rdlong	local01, local01
2e0b0     F2 22 02 F6 | 	mov	local03, objptr
2e0b4     10 E5 01 F6 | 	mov	objptr, local02
2e0b8     2D 1E 62 FD | 	call	local01
2e0bc     11 E5 01 F6 | 	mov	objptr, local03
2e0c0     A7 F0 03 F6 | 	mov	ptra, fp
2e0c4     B2 00 A0 FD | 	call	#popregs_
2e0c8                 | __struct___bas_wrap_sender_close_ret
2e0c8     2D 00 64 FD | 	ret
2e0cc                 | 
2e0cc                 | LR__4750
2e0cc     2F          | 	byte	"/"
2e0cd     00          | 	byte	0
2e0ce                 | LR__4751
2e0ce     69 6E 66    | 	byte	"inf"
2e0d1     00          | 	byte	0
2e0d2                 | LR__4752
2e0d2     6E 61 6E    | 	byte	"nan"
2e0d5     00          | 	byte	0
2e0d6                 | LR__4753
2e0d6                 | 	byte	
2e0d6     00          | 	byte	0
2e0d7                 | LR__4754
2e0d7                 | 	byte	
2e0d7     00          | 	byte	0
2e0d8                 | LR__4755
2e0d8                 | 	byte	
2e0d8     00          | 	byte	0
2e0d9                 | LR__4756
2e0d9                 | 	byte	
2e0d9     00          | 	byte	0
2e0da                 | LR__4757
2e0da                 | 	byte	
2e0da     00          | 	byte	0
2e0db                 | LR__4758
2e0db                 | 	byte	
2e0db     00          | 	byte	0
2e0dc                 | LR__4759
2e0dc                 | 	byte	
2e0dc     00          | 	byte	0
2e0dd                 | LR__4760
2e0dd                 | 	byte	
2e0dd     00          | 	byte	0
2e0de                 | LR__4761
2e0de     00          | 	byte	0
2e0df     00          | 	byte	0
2e0e0                 | LR__4762
2e0e0     00          | 	byte	0
2e0e1     00          | 	byte	0
2e0e2                 | LR__4763
2e0e2     00          | 	byte	0
2e0e3     00          | 	byte	0
2e0e4                 | LR__4764
2e0e4     20 21 21 21 
2e0e8     20 63 6F 72 
2e0ec     72 75 70 74 
2e0f0     65 64 20 68 
2e0f4     65 61 70 3F 
2e0f8     3F 3F 20 21 
2e0fc     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
2e0ff     00          | 	byte	0
2e100                 | LR__4765
2e100     20 21 21 21 
2e104     20 6F 75 74 
2e108     20 6F 66 20 
2e10c     68 65 61 70 
2e110     20 6D 65 6D 
2e114     6F 72 79 20 
2e118     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
2e11c     00          | 	byte	0
2e11d                 | LR__4766
2e11d     20 21 21 21 
2e121     20 63 6F 72 
2e125     72 75 70 74 
2e129     65 64 20 68 
2e12d     65 61 70 20 
2e131     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
2e135     00          | 	byte	0
2e136                 | LR__4767
2e136     00          | 	byte	0
2e137     00          | 	byte	0
2e138                 | LR__4768
2e138     2E          | 	byte	"."
2e139     00          | 	byte	0
2e13a                 | LR__4769
2e13a     00          | 	byte	0
2e13b     00          | 	byte	0
2e13c                 | LR__4770
2e13c     00          | 	byte	0
2e13d     00          | 	byte	0
2e13e                 | LR__4771
2e13e     00          | 	byte	0
2e13f     00          | 	byte	0
2e140                 | LR__4772
2e140     2A 3A 3C 3E 
2e144     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
2e148     00          | 	byte	0
2e149                 | LR__4773
2e149     2B 2C 3B 3D 
2e14d     5B 5D       | 	byte	"+,;=[]"
2e14f     00          | 	byte	0
2e150                 | LR__4774
2e150     46 41 54 33 
2e154     32 20 20 20 | 	byte	"FAT32   "
2e158     00          | 	byte	0
2e159                 | LR__4775
2e159     54 5A       | 	byte	"TZ"
2e15b     00          | 	byte	0
2e15c                 | LR__4776
2e15c     00          | 	byte	0
2e15d     00          | 	byte	0
2e15e                 | LR__4777
2e15e                 | 	byte	
2e15e     00          | 	byte	0
2e15f                 | LR__4778
2e15f                 | 	byte	
2e15f     00          | 	byte	0
2e160                 | LR__4779
2e160     22          | 	byte	34
2e161     00          | 	byte	0
2e162                 | LR__4780
2e162     22          | 	byte	34
2e163     00          | 	byte	0
2e164                 | LR__4781
2e164     3A          | 	byte	":"
2e165     00          | 	byte	0
2e166                 | LR__4782
2e166                 | 	byte	
2e166     00          | 	byte	0
2e167                 | LR__4783
2e167                 | 	byte	
2e167     00          | 	byte	0
2e168                 | LR__4784
2e168                 | 	byte	
2e168     00          | 	byte	0
2e169                 | LR__4785
2e169                 | 	byte	
2e169     00          | 	byte	0
2e16a                 | LR__4786
2e16a                 | 	byte	
2e16a     00          | 	byte	0
2e16b                 | LR__4787
2e16b                 | 	byte	
2e16b     00          | 	byte	0
2e16c                 | LR__4788
2e16c                 | 	byte	
2e16c     00          | 	byte	0
2e16d                 | LR__4789
2e16d     22          | 	byte	34
2e16e     00          | 	byte	0
2e16f                 | LR__4790
2e16f     22          | 	byte	34
2e170     00          | 	byte	0
2e171                 | LR__4791
2e171     22          | 	byte	34
2e172     00          | 	byte	0
2e173                 | LR__4792
2e173     22          | 	byte	34
2e174     00          | 	byte	0
2e175                 | LR__4793
2e175     22          | 	byte	34
2e176     00          | 	byte	0
2e177                 | LR__4794
2e177     3E          | 	byte	">"
2e178     00          | 	byte	0
2e179                 | LR__4795
2e179     3C          | 	byte	"<"
2e17a     00          | 	byte	0
2e17b                 | LR__4796
2e17b     2B          | 	byte	"+"
2e17c     00          | 	byte	0
2e17d                 | LR__4797
2e17d     2D          | 	byte	"-"
2e17e     00          | 	byte	0
2e17f                 | LR__4798
2e17f     2A          | 	byte	"*"
2e180     00          | 	byte	0
2e181                 | LR__4799
2e181     2F          | 	byte	"/"
2e182     00          | 	byte	0
2e183                 | LR__4800
2e183     5E          | 	byte	"^"
2e184     00          | 	byte	0
2e185                 | LR__4801
2e185     3D          | 	byte	"="
2e186     00          | 	byte	0
2e187                 | LR__4802
2e187     2B          | 	byte	"+"
2e188     00          | 	byte	0
2e189                 | LR__4803
2e189     2B          | 	byte	"+"
2e18a     00          | 	byte	0
2e18b                 | LR__4804
2e18b     2D          | 	byte	"-"
2e18c     00          | 	byte	0
2e18d                 | LR__4805
2e18d     2D          | 	byte	"-"
2e18e     00          | 	byte	0
2e18f                 | LR__4806
2e18f     3C          | 	byte	"<"
2e190     00          | 	byte	0
2e191                 | LR__4807
2e191     3E          | 	byte	">"
2e192     00          | 	byte	0
2e193                 | LR__4808
2e193     22          | 	byte	34
2e194     00          | 	byte	0
2e195                 | LR__4809
2e195     22          | 	byte	34
2e196     00          | 	byte	0
2e197                 | LR__4810
2e197     2E          | 	byte	"."
2e198     00          | 	byte	0
2e199                 | LR__4811
2e199     3F          | 	byte	"?"
2e19a     00          | 	byte	0
2e19b                 | LR__4812
2e19b     3F          | 	byte	"?"
2e19c     00          | 	byte	0
2e19d                 | LR__4813
2e19d     6D 6F 75 73 
2e1a1     65          | 	byte	"mouse"
2e1a2     00          | 	byte	0
2e1a3                 | LR__4814
2e1a3     63 75 72 73 
2e1a7     6F 72       | 	byte	"cursor"
2e1a9     00          | 	byte	0
2e1aa                 | LR__4815
2e1aa     63 6C 69 63 
2e1ae     6B          | 	byte	"click"
2e1af     00          | 	byte	0
2e1b0                 | LR__4816
2e1b0     6F 6E       | 	byte	"on"
2e1b2     00          | 	byte	0
2e1b3                 | LR__4817
2e1b3     31          | 	byte	"1"
2e1b4     00          | 	byte	0
2e1b5                 | LR__4818
2e1b5     6F 66 66    | 	byte	"off"
2e1b8     00          | 	byte	0
2e1b9                 | LR__4819
2e1b9     30          | 	byte	"0"
2e1ba     00          | 	byte	0
2e1bb                 | LR__4820
2e1bb     6D 6F 64 65 | 	byte	"mode"
2e1bf     00          | 	byte	0
2e1c0                 | LR__4821
2e1c0     6D 2E       | 	byte	"m."
2e1c2     00          | 	byte	0
2e1c3                 | LR__4822
2e1c3     61 74 61 72 
2e1c7     69          | 	byte	"atari"
2e1c8     00          | 	byte	0
2e1c9                 | LR__4823
2e1c9     30          | 	byte	"0"
2e1ca     00          | 	byte	0
2e1cb                 | LR__4824
2e1cb     70 63 5F 61 
2e1cf     6D 62 65 72 | 	byte	"pc_amber"
2e1d3     00          | 	byte	0
2e1d4                 | LR__4825
2e1d4     31          | 	byte	"1"
2e1d5     00          | 	byte	0
2e1d6                 | LR__4826
2e1d6     70 63 5F 67 
2e1da     72 65 65 6E | 	byte	"pc_green"
2e1de     00          | 	byte	0
2e1df                 | LR__4827
2e1df     32          | 	byte	"2"
2e1e0     00          | 	byte	0
2e1e1                 | LR__4828
2e1e1     70 63 5F 77 
2e1e5     68 69 74 65 | 	byte	"pc_white"
2e1e9     00          | 	byte	0
2e1ea                 | LR__4829
2e1ea     33          | 	byte	"3"
2e1eb     00          | 	byte	0
2e1ec                 | LR__4830
2e1ec     73 74       | 	byte	"st"
2e1ee     00          | 	byte	0
2e1ef                 | LR__4831
2e1ef     34          | 	byte	"4"
2e1f0     00          | 	byte	0
2e1f1                 | LR__4832
2e1f1                 | 	byte	
2e1f1     00          | 	byte	0
2e1f2                 | LR__4833
2e1f2     6C 6F 61 64 | 	byte	"load"
2e1f6     00          | 	byte	0
2e1f7                 | LR__4834
2e1f7     73 61 76 65 | 	byte	"save"
2e1fb     00          | 	byte	0
2e1fc                 | LR__4835
2e1fc     62 72 75 6E | 	byte	"brun"
2e200     00          | 	byte	0
2e201                 | LR__4836
2e201     72 75 6E    | 	byte	"run"
2e204     00          | 	byte	0
2e205                 | LR__4837
2e205     6C 6F 2E    | 	byte	"lo."
2e208     00          | 	byte	0
2e209                 | LR__4838
2e209     73 2E       | 	byte	"s."
2e20b     00          | 	byte	0
2e20c                 | LR__4839
2e20c     62 72 2E    | 	byte	"br."
2e20f     00          | 	byte	0
2e210                 | LR__4840
2e210                 | 	byte	
2e210     00          | 	byte	0
2e211                 | LR__4841
2e211                 | 	byte	
2e211     00          | 	byte	0
2e212                 | LR__4842
2e212                 | 	byte	
2e212     00          | 	byte	0
2e213                 | LR__4843
2e213                 | 	byte	
2e213     00          | 	byte	0
2e214                 | LR__4844
2e214     20 55 73 65 
2e218     72 20 66 75 
2e21c     6E 63 74 69 
2e220     6F 6E 73 20 
2e224     61 6E 64 20 
2e228     61 72 72 61 
2e22c     79 73 20 6E 
2e230     6F 74 20 79 
2e234     65 74 20 69 
2e238     6D 70 6C 65 
2e23c     6D 65 6E 74 
2e240     65 64       | 	byte	" User functions and arrays not yet implemented"
2e242     00          | 	byte	0
2e243                 | LR__4845
2e243                 | 	byte	
2e243     00          | 	byte	0
2e244                 | LR__4846
2e244                 | 	byte	
2e244     00          | 	byte	0
2e245                 | LR__4847
2e245     52 65 61 64 
2e249     79          | 	byte	"Ready"
2e24a     00          | 	byte	0
2e24b                 | LR__4848
2e24b     2B          | 	byte	"+"
2e24c     00          | 	byte	0
2e24d                 | LR__4849
2e24d     2D          | 	byte	"-"
2e24e     00          | 	byte	0
2e24f                 | LR__4850
2e24f     6F 72       | 	byte	"or"
2e251     00          | 	byte	0
2e252                 | LR__4851
2e252     78 6F 72    | 	byte	"xor"
2e255     00          | 	byte	0
2e256                 | LR__4852
2e256     2A          | 	byte	"*"
2e257     00          | 	byte	0
2e258                 | LR__4853
2e258     2F          | 	byte	"/"
2e259     00          | 	byte	0
2e25a                 | LR__4854
2e25a     61 6E 64    | 	byte	"and"
2e25d     00          | 	byte	0
2e25e                 | LR__4855
2e25e     64 69 76    | 	byte	"div"
2e261     00          | 	byte	0
2e262                 | LR__4856
2e262     6D 6F 64    | 	byte	"mod"
2e265     00          | 	byte	0
2e266                 | LR__4857
2e266     73 68 6C    | 	byte	"shl"
2e269     00          | 	byte	0
2e26a                 | LR__4858
2e26a     73 68 72    | 	byte	"shr"
2e26d     00          | 	byte	0
2e26e                 | LR__4859
2e26e     5E          | 	byte	"^"
2e26f     00          | 	byte	0
2e270                 | LR__4860
2e270     6E 6F 74    | 	byte	"not"
2e273     00          | 	byte	0
2e274                 | LR__4861
2e274     40          | 	byte	"@"
2e275     00          | 	byte	0
2e276                 | LR__4862
2e276     3D          | 	byte	"="
2e277     00          | 	byte	0
2e278                 | LR__4863
2e278     3E 3D       | 	byte	">="
2e27a     00          | 	byte	0
2e27b                 | LR__4864
2e27b     3C 3D       | 	byte	"<="
2e27d     00          | 	byte	0
2e27e                 | LR__4865
2e27e     3C          | 	byte	"<"
2e27f     00          | 	byte	0
2e280                 | LR__4866
2e280     3E          | 	byte	">"
2e281     00          | 	byte	0
2e282                 | LR__4867
2e282     3C 3E       | 	byte	"<>"
2e284     00          | 	byte	0
2e285                 | LR__4868
2e285     2B 2B       | 	byte	"++"
2e287     00          | 	byte	0
2e288                 | LR__4869
2e288     2D 2D       | 	byte	"--"
2e28a     00          | 	byte	0
2e28b                 | LR__4870
2e28b     23          | 	byte	"#"
2e28c     00          | 	byte	0
2e28d                 | LR__4871
2e28d     23          | 	byte	"#"
2e28e     00          | 	byte	0
2e28f                 | LR__4872
2e28f     2D          | 	byte	"-"
2e290     00          | 	byte	0
2e291                 | LR__4873
2e291     30          | 	byte	"0"
2e292     00          | 	byte	0
2e293                 | LR__4874
2e293     63          | 	byte	"c"
2e294     00          | 	byte	0
2e295                 | LR__4875
2e295     63 23       | 	byte	"c#"
2e297     00          | 	byte	0
2e298                 | LR__4876
2e298     64          | 	byte	"d"
2e299     00          | 	byte	0
2e29a                 | LR__4877
2e29a     64 23       | 	byte	"d#"
2e29c     00          | 	byte	0
2e29d                 | LR__4878
2e29d     65          | 	byte	"e"
2e29e     00          | 	byte	0
2e29f                 | LR__4879
2e29f     66          | 	byte	"f"
2e2a0     00          | 	byte	0
2e2a1                 | LR__4880
2e2a1     66 23       | 	byte	"f#"
2e2a3     00          | 	byte	0
2e2a4                 | LR__4881
2e2a4     67          | 	byte	"g"
2e2a5     00          | 	byte	0
2e2a6                 | LR__4882
2e2a6     67 23       | 	byte	"g#"
2e2a8     00          | 	byte	0
2e2a9                 | LR__4883
2e2a9     61          | 	byte	"a"
2e2aa     00          | 	byte	0
2e2ab                 | LR__4884
2e2ab     61 23       | 	byte	"a#"
2e2ad     00          | 	byte	0
2e2ae                 | LR__4885
2e2ae     68          | 	byte	"h"
2e2af     00          | 	byte	0
2e2b0                 | LR__4886
2e2b0     62          | 	byte	"b"
2e2b1     00          | 	byte	0
2e2b2                 | LR__4887
2e2b2     2B          | 	byte	"+"
2e2b3     00          | 	byte	0
2e2b4                 | LR__4888
2e2b4     2D          | 	byte	"-"
2e2b5     00          | 	byte	0
2e2b6                 | LR__4889
2e2b6     3D          | 	byte	"="
2e2b7     00          | 	byte	0
2e2b8                 | LR__4890
2e2b8     2C          | 	byte	","
2e2b9     00          | 	byte	0
2e2ba                 | LR__4891
2e2ba     2A          | 	byte	"*"
2e2bb     00          | 	byte	0
2e2bc                 | LR__4892
2e2bc     2F          | 	byte	"/"
2e2bd     00          | 	byte	0
2e2be                 | LR__4893
2e2be     3B          | 	byte	";"
2e2bf     00          | 	byte	0
2e2c0                 | LR__4894
2e2c0     22          | 	byte	34
2e2c1     00          | 	byte	0
2e2c2                 | LR__4895
2e2c2     5E          | 	byte	"^"
2e2c3     00          | 	byte	0
2e2c4                 | LR__4896
2e2c4     29          | 	byte	")"
2e2c5     00          | 	byte	0
2e2c6                 | LR__4897
2e2c6     28          | 	byte	"("
2e2c7     00          | 	byte	0
2e2c8                 | LR__4898
2e2c8     3A          | 	byte	":"
2e2c9     00          | 	byte	0
2e2ca                 | LR__4899
2e2ca     20          | 	byte	" "
2e2cb     00          | 	byte	0
2e2cc                 | LR__4900
2e2cc     3E          | 	byte	">"
2e2cd     00          | 	byte	0
2e2ce                 | LR__4901
2e2ce     3C          | 	byte	"<"
2e2cf     00          | 	byte	0
2e2d0                 | LR__4902
2e2d0     3D          | 	byte	"="
2e2d1     00          | 	byte	0
2e2d2                 | LR__4903
2e2d2     62 65 65 70 | 	byte	"beep"
2e2d6     00          | 	byte	0
2e2d7                 | LR__4904
2e2d7     62 2E       | 	byte	"b."
2e2d9     00          | 	byte	0
2e2da                 | LR__4905
2e2da     62 6F 78    | 	byte	"box"
2e2dd     00          | 	byte	0
2e2de                 | LR__4906
2e2de     62 72 75 6E | 	byte	"brun"
2e2e2     00          | 	byte	0
2e2e3                 | LR__4907
2e2e3     62 72 2E    | 	byte	"br."
2e2e6     00          | 	byte	0
2e2e7                 | LR__4908
2e2e7     63 69 72 63 
2e2eb     6C 65       | 	byte	"circle"
2e2ed     00          | 	byte	0
2e2ee                 | LR__4909
2e2ee     63 69 2E    | 	byte	"ci."
2e2f1     00          | 	byte	0
2e2f2                 | LR__4910
2e2f2     63 6C 69 63 
2e2f6     6B          | 	byte	"click"
2e2f7     00          | 	byte	0
2e2f8                 | LR__4911
2e2f8     63 6C 73    | 	byte	"cls"
2e2fb     00          | 	byte	0
2e2fc                 | LR__4912
2e2fc     63 6F 6C 6F 
2e300     72          | 	byte	"color"
2e301     00          | 	byte	0
2e302                 | LR__4913
2e302     63 2E       | 	byte	"c."
2e304     00          | 	byte	0
2e305                 | LR__4914
2e305     63 73 61 76 
2e309     65          | 	byte	"csave"
2e30a     00          | 	byte	0
2e30b                 | LR__4915
2e30b     63 73 2E    | 	byte	"cs."
2e30e     00          | 	byte	0
2e30f                 | LR__4916
2e30f     63 75 72 73 
2e313     6F 72       | 	byte	"cursor"
2e315     00          | 	byte	0
2e316                 | LR__4917
2e316     64 65 66 73 
2e31a     6E 64       | 	byte	"defsnd"
2e31c     00          | 	byte	0
2e31d                 | LR__4918
2e31d     64 65 66 65 
2e321     6E 76       | 	byte	"defenv"
2e323     00          | 	byte	0
2e324                 | LR__4919
2e324     64 65 66 73 
2e328     70 72 69 74 
2e32c     65          | 	byte	"defsprite"
2e32d     00          | 	byte	0
2e32e                 | LR__4920
2e32e     64 73 2E    | 	byte	"ds."
2e331     00          | 	byte	0
2e332                 | LR__4921
2e332     64 65 67    | 	byte	"deg"
2e335     00          | 	byte	0
2e336                 | LR__4922
2e336     64 69 6D    | 	byte	"dim"
2e339     00          | 	byte	0
2e33a                 | LR__4923
2e33a     64 69 72    | 	byte	"dir"
2e33d     00          | 	byte	0
2e33e                 | LR__4924
2e33e     64 70 6F 6B 
2e342     65          | 	byte	"dpoke"
2e343     00          | 	byte	0
2e344                 | LR__4925
2e344     64 72 61 77 | 	byte	"draw"
2e348     00          | 	byte	0
2e349                 | LR__4926
2e349     64 72 2E    | 	byte	"dr."
2e34c     00          | 	byte	0
2e34d                 | LR__4927
2e34d     65 6C 73 65 | 	byte	"else"
2e351     00          | 	byte	0
2e352                 | LR__4928
2e352     65 6E 64    | 	byte	"end"
2e355     00          | 	byte	0
2e356                 | LR__4929
2e356     66 63 69 72 
2e35a     63 6C 65    | 	byte	"fcircle"
2e35d     00          | 	byte	0
2e35e                 | LR__4930
2e35e     66 63 2E    | 	byte	"fc."
2e361     00          | 	byte	0
2e362                 | LR__4931
2e362     66 69 6C 6C | 	byte	"fill"
2e366     00          | 	byte	0
2e367                 | LR__4932
2e367     66 69 2E    | 	byte	"fi."
2e36a     00          | 	byte	0
2e36b                 | LR__4933
2e36b     66 6F 6E 74 | 	byte	"font"
2e36f     00          | 	byte	0
2e370                 | LR__4934
2e370     66 6F 72    | 	byte	"for"
2e373     00          | 	byte	0
2e374                 | LR__4935
2e374     66 2E       | 	byte	"f."
2e376     00          | 	byte	0
2e377                 | LR__4936
2e377     66 72 61 6D 
2e37b     65          | 	byte	"frame"
2e37c     00          | 	byte	0
2e37d                 | LR__4937
2e37d     66 72 2E    | 	byte	"fr."
2e380     00          | 	byte	0
2e381                 | LR__4938
2e381     67 6F 73 75 
2e385     62          | 	byte	"gosub"
2e386     00          | 	byte	0
2e387                 | LR__4939
2e387     67 6F 74 6F | 	byte	"goto"
2e38b     00          | 	byte	0
2e38c                 | LR__4940
2e38c     67 2E       | 	byte	"g."
2e38e     00          | 	byte	0
2e38f                 | LR__4941
2e38f     69 66       | 	byte	"if"
2e391     00          | 	byte	0
2e392                 | LR__4942
2e392     69 6E 6B    | 	byte	"ink"
2e395     00          | 	byte	0
2e396                 | LR__4943
2e396     69 2E       | 	byte	"i."
2e398     00          | 	byte	0
2e399                 | LR__4944
2e399     69 6E 74    | 	byte	"int"
2e39c     00          | 	byte	0
2e39d                 | LR__4945
2e39d     6C 69 73 74 | 	byte	"list"
2e3a1     00          | 	byte	0
2e3a2                 | LR__4946
2e3a2     6C 2E       | 	byte	"l."
2e3a4     00          | 	byte	0
2e3a5                 | LR__4947
2e3a5     6C 6F 61 64 | 	byte	"load"
2e3a9     00          | 	byte	0
2e3aa                 | LR__4948
2e3aa     6C 6F 2E    | 	byte	"lo."
2e3ad     00          | 	byte	0
2e3ae                 | LR__4949
2e3ae     6C 70 6F 6B 
2e3b2     65          | 	byte	"lpoke"
2e3b3     00          | 	byte	0
2e3b4                 | LR__4950
2e3b4     6D 6F 64 65 | 	byte	"mode"
2e3b8     00          | 	byte	0
2e3b9                 | LR__4951
2e3b9     6D 2E       | 	byte	"m."
2e3bb     00          | 	byte	0
2e3bc                 | LR__4952
2e3bc     6D 6F 75 73 
2e3c0     65          | 	byte	"mouse"
2e3c1     00          | 	byte	0
2e3c2                 | LR__4953
2e3c2     6E 65 77    | 	byte	"new"
2e3c5     00          | 	byte	0
2e3c6                 | LR__4954
2e3c6     6E 65 78 74 | 	byte	"next"
2e3ca     00          | 	byte	0
2e3cb                 | LR__4955
2e3cb     6E 2E       | 	byte	"n."
2e3cd     00          | 	byte	0
2e3ce                 | LR__4956
2e3ce     70 61 70 65 
2e3d2     72          | 	byte	"paper"
2e3d3     00          | 	byte	0
2e3d4                 | LR__4957
2e3d4     70 61 2E    | 	byte	"pa."
2e3d7     00          | 	byte	0
2e3d8                 | LR__4958
2e3d8     70 69 6E 66 
2e3dc     6C 6F 61 74 | 	byte	"pinfloat"
2e3e0     00          | 	byte	0
2e3e1                 | LR__4959
2e3e1     70 69 6E 68 
2e3e5     69          | 	byte	"pinhi"
2e3e6     00          | 	byte	0
2e3e7                 | LR__4960
2e3e7     70 69 6E 6C 
2e3eb     6F          | 	byte	"pinlo"
2e3ec     00          | 	byte	0
2e3ed                 | LR__4961
2e3ed     70 69 6E 73 
2e3f1     74 61 72 74 | 	byte	"pinstart"
2e3f5     00          | 	byte	0
2e3f6                 | LR__4962
2e3f6     70 69 6E 74 
2e3fa     6F 67 67 6C 
2e3fe     65          | 	byte	"pintoggle"
2e3ff     00          | 	byte	0
2e400                 | LR__4963
2e400     70 69 6E 77 
2e404     72 69 74 65 | 	byte	"pinwrite"
2e408     00          | 	byte	0
2e409                 | LR__4964
2e409     70 6C 61 79 | 	byte	"play"
2e40d     00          | 	byte	0
2e40e                 | LR__4965
2e40e     70 2E       | 	byte	"p."
2e410     00          | 	byte	0
2e411                 | LR__4966
2e411     70 6C 6F 74 | 	byte	"plot"
2e415     00          | 	byte	0
2e416                 | LR__4967
2e416     70 6C 2E    | 	byte	"pl."
2e419     00          | 	byte	0
2e41a                 | LR__4968
2e41a     70 6F 6B 65 | 	byte	"poke"
2e41e     00          | 	byte	0
2e41f                 | LR__4969
2e41f     70 6F 70    | 	byte	"pop"
2e422     00          | 	byte	0
2e423                 | LR__4970
2e423     70 6F 73 69 
2e427     74 69 6F 6E | 	byte	"position"
2e42b     00          | 	byte	0
2e42c                 | LR__4971
2e42c     70 6F 73 2E | 	byte	"pos."
2e430     00          | 	byte	0
2e431                 | LR__4972
2e431     70 72 69 6E 
2e435     74          | 	byte	"print"
2e436     00          | 	byte	0
2e437                 | LR__4973
2e437     3F          | 	byte	"?"
2e438     00          | 	byte	0
2e439                 | LR__4974
2e439     72 61 64    | 	byte	"rad"
2e43c     00          | 	byte	0
2e43d                 | LR__4975
2e43d     72 65 6C 65 
2e441     61 73 65    | 	byte	"release"
2e444     00          | 	byte	0
2e445                 | LR__4976
2e445     72 65 74 75 
2e449     72 6E       | 	byte	"return"
2e44b     00          | 	byte	0
2e44c                 | LR__4977
2e44c     72 75 6E    | 	byte	"run"
2e44f     00          | 	byte	0
2e450                 | LR__4978
2e450     73 61 76 65 | 	byte	"save"
2e454     00          | 	byte	0
2e455                 | LR__4979
2e455     73 2E       | 	byte	"s."
2e457     00          | 	byte	0
2e458                 | LR__4980
2e458     73 65 74 64 
2e45c     65 6C 61 79 | 	byte	"setdelay"
2e460     00          | 	byte	0
2e461                 | LR__4981
2e461     73 65 74 65 
2e465     6E 76       | 	byte	"setenv"
2e467     00          | 	byte	0
2e468                 | LR__4982
2e468     73 65 74 6C 
2e46c     65 6E       | 	byte	"setlen"
2e46e     00          | 	byte	0
2e46f                 | LR__4983
2e46f     73 65 74 70 
2e473     61 6E       | 	byte	"setpan"
2e475     00          | 	byte	0
2e476                 | LR__4984
2e476     73 65 74 73 
2e47a     75 73 74 61 
2e47e     69 6E       | 	byte	"setsustain"
2e480     00          | 	byte	0
2e481                 | LR__4985
2e481     73 65 74 76 
2e485     6F 6C       | 	byte	"setvol"
2e487     00          | 	byte	0
2e488                 | LR__4986
2e488     73 65 74 77 
2e48c     61 76 65    | 	byte	"setwave"
2e48f     00          | 	byte	0
2e490                 | LR__4987
2e490     73 6F 75 6E 
2e494     64          | 	byte	"sound"
2e495     00          | 	byte	0
2e496                 | LR__4988
2e496     73 6F 2E    | 	byte	"so."
2e499     00          | 	byte	0
2e49a                 | LR__4989
2e49a     73 70 72 69 
2e49e     74 65       | 	byte	"sprite"
2e4a0     00          | 	byte	0
2e4a1                 | LR__4990
2e4a1     73 70 2E    | 	byte	"sp."
2e4a4     00          | 	byte	0
2e4a5                 | LR__4991
2e4a5     74 68 65 6E | 	byte	"then"
2e4a9     00          | 	byte	0
2e4aa                 | LR__4992
2e4aa     77 61 69 74 
2e4ae     6D 73       | 	byte	"waitms"
2e4b0     00          | 	byte	0
2e4b1                 | LR__4993
2e4b1     77 61 69 74 
2e4b5     63 6C 6F 63 
2e4b9     6B          | 	byte	"waitclock"
2e4ba     00          | 	byte	0
2e4bb                 | LR__4994
2e4bb     77 63 2E    | 	byte	"wc."
2e4be     00          | 	byte	0
2e4bf                 | LR__4995
2e4bf     77 61 69 74 
2e4c3     76 62 6C    | 	byte	"waitvbl"
2e4c6     00          | 	byte	0
2e4c7                 | LR__4996
2e4c7     77 76 2E    | 	byte	"wv."
2e4ca     00          | 	byte	0
2e4cb                 | LR__4997
2e4cb     77 78 70 69 
2e4cf     6E          | 	byte	"wxpin"
2e4d0     00          | 	byte	0
2e4d1                 | LR__4998
2e4d1     77 79 70 69 
2e4d5     6E          | 	byte	"wypin"
2e4d6     00          | 	byte	0
2e4d7                 | LR__4999
2e4d7     61 62 73    | 	byte	"abs"
2e4da     00          | 	byte	0
2e4db                 | LR__5000
2e4db     61 63 6F 73 | 	byte	"acos"
2e4df     00          | 	byte	0
2e4e0                 | LR__5001
2e4e0     61 64 72    | 	byte	"adr"
2e4e3     00          | 	byte	0
2e4e4                 | LR__5002
2e4e4     61 64 64 72 | 	byte	"addr"
2e4e8     00          | 	byte	0
2e4e9                 | LR__5003
2e4e9     61 73 63    | 	byte	"asc"
2e4ec     00          | 	byte	0
2e4ed                 | LR__5004
2e4ed     61 73 69 6E | 	byte	"asin"
2e4f1     00          | 	byte	0
2e4f2                 | LR__5005
2e4f2     61 74 6E    | 	byte	"atn"
2e4f5     00          | 	byte	0
2e4f6                 | LR__5006
2e4f6     62 69 6E 24 | 	byte	"bin$"
2e4fa     00          | 	byte	0
2e4fb                 | LR__5007
2e4fb     63 68 72 24 | 	byte	"chr$"
2e4ff     00          | 	byte	0
2e500                 | LR__5008
2e500     63 6F 73    | 	byte	"cos"
2e503     00          | 	byte	0
2e504                 | LR__5009
2e504     64 70 65 65 
2e508     6B          | 	byte	"dpeek"
2e509     00          | 	byte	0
2e50a                 | LR__5010
2e50a     66 72 65    | 	byte	"fre"
2e50d     00          | 	byte	0
2e50e                 | LR__5011
2e50e     67 65 74 70 
2e512     69 78 65 6C | 	byte	"getpixel"
2e516     00          | 	byte	0
2e517                 | LR__5012
2e517     67 65 2E    | 	byte	"ge."
2e51a     00          | 	byte	0
2e51b                 | LR__5013
2e51b     67 65 74 65 
2e51f     6E 76 73 75 
2e523     73 74 61 69 
2e527     6E          | 	byte	"getenvsustain"
2e528     00          | 	byte	0
2e529                 | LR__5014
2e529     67 65 74 6E 
2e52d     6F 74 65 76 
2e531     61 6C 75 65 | 	byte	"getnotevalue"
2e535     00          | 	byte	0
2e536                 | LR__5015
2e536     67 65 74 74 
2e53a     69 6D 65    | 	byte	"gettime"
2e53d     00          | 	byte	0
2e53e                 | LR__5016
2e53e     68 65 78 24 | 	byte	"hex$"
2e542     00          | 	byte	0
2e543                 | LR__5017
2e543     69 6E 6B 65 
2e547     79 24       | 	byte	"inkey$"
2e549     00          | 	byte	0
2e54a                 | LR__5018
2e54a     6C 65 66 74 
2e54e     24          | 	byte	"left$"
2e54f     00          | 	byte	0
2e550                 | LR__5019
2e550     6C 65 6E    | 	byte	"len"
2e553     00          | 	byte	0
2e554                 | LR__5020
2e554     6C 70 65 65 
2e558     6B          | 	byte	"lpeek"
2e559     00          | 	byte	0
2e55a                 | LR__5021
2e55a     6D 69 64 24 | 	byte	"mid$"
2e55e     00          | 	byte	0
2e55f                 | LR__5022
2e55f     6D 6F 75 73 
2e563     65 6B       | 	byte	"mousek"
2e565     00          | 	byte	0
2e566                 | LR__5023
2e566     6D 6F 75 73 
2e56a     65 77       | 	byte	"mousew"
2e56c     00          | 	byte	0
2e56d                 | LR__5024
2e56d     6D 6F 75 73 
2e571     65 78       | 	byte	"mousex"
2e573     00          | 	byte	0
2e574                 | LR__5025
2e574     6D 6F 75 73 
2e578     65 79       | 	byte	"mousey"
2e57a     00          | 	byte	0
2e57b                 | LR__5026
2e57b     70 65 65 6B | 	byte	"peek"
2e57f     00          | 	byte	0
2e580                 | LR__5027
2e580     70 69 6E 72 
2e584     65 61 64    | 	byte	"pinread"
2e587     00          | 	byte	0
2e588                 | LR__5028
2e588     72 64 70 69 
2e58c     6E          | 	byte	"rdpin"
2e58d     00          | 	byte	0
2e58e                 | LR__5029
2e58e     72 69 67 68 
2e592     74 24       | 	byte	"right$"
2e594     00          | 	byte	0
2e595                 | LR__5030
2e595     72 71 70 69 
2e599     6E          | 	byte	"rqpin"
2e59a     00          | 	byte	0
2e59b                 | LR__5031
2e59b     72 6E 64    | 	byte	"rnd"
2e59e     00          | 	byte	0
2e59f                 | LR__5032
2e59f     73 69 6E    | 	byte	"sin"
2e5a2     00          | 	byte	0
2e5a3                 | LR__5033
2e5a3     73 71 72    | 	byte	"sqr"
2e5a6     00          | 	byte	0
2e5a7                 | LR__5034
2e5a7     73 74 69 63 
2e5ab     6B          | 	byte	"stick"
2e5ac     00          | 	byte	0
2e5ad                 | LR__5035
2e5ad     73 74 72 69 
2e5b1     67          | 	byte	"strig"
2e5b2     00          | 	byte	0
2e5b3                 | LR__5036
2e5b3     73 74 72 24 | 	byte	"str$"
2e5b7     00          | 	byte	0
2e5b8                 | LR__5037
2e5b8     74 61 6E    | 	byte	"tan"
2e5bb     00          | 	byte	0
2e5bc                 | LR__5038
2e5bc     76 61 6C    | 	byte	"val"
2e5bf     00          | 	byte	0
2e5c0                 | LR__5039
2e5c0     76 61 72 70 
2e5c4     74 72       | 	byte	"varptr"
2e5c6     00          | 	byte	0
2e5c7                 | LR__5040
2e5c7     61          | 	byte	"a"
2e5c8     00          | 	byte	0
2e5c9                 | LR__5041
2e5c9     7A          | 	byte	"z"
2e5ca     00          | 	byte	0
2e5cb                 | LR__5042
2e5cb     5F          | 	byte	"_"
2e5cc     00          | 	byte	0
2e5cd                 | LR__5043
2e5cd     61          | 	byte	"a"
2e5ce     00          | 	byte	0
2e5cf                 | LR__5044
2e5cf     7A          | 	byte	"z"
2e5d0     00          | 	byte	0
2e5d1                 | LR__5045
2e5d1     30          | 	byte	"0"
2e5d2     00          | 	byte	0
2e5d3                 | LR__5046
2e5d3     39          | 	byte	"9"
2e5d4     00          | 	byte	0
2e5d5                 | LR__5047
2e5d5     5F          | 	byte	"_"
2e5d6     00          | 	byte	0
2e5d7                 | LR__5048
2e5d7     2E          | 	byte	"."
2e5d8     00          | 	byte	0
2e5d9                 | LR__5049
2e5d9     61          | 	byte	"a"
2e5da     00          | 	byte	0
2e5db                 | LR__5050
2e5db     7A          | 	byte	"z"
2e5dc     00          | 	byte	0
2e5dd                 | LR__5051
2e5dd     30          | 	byte	"0"
2e5de     00          | 	byte	0
2e5df                 | LR__5052
2e5df     39          | 	byte	"9"
2e5e0     00          | 	byte	0
2e5e1                 | LR__5053
2e5e1     5F          | 	byte	"_"
2e5e2     00          | 	byte	0
2e5e3                 | LR__5054
2e5e3     24          | 	byte	"$"
2e5e4     00          | 	byte	0
2e5e5                 | LR__5055
2e5e5     25          | 	byte	"%"
2e5e6     00          | 	byte	0
2e5e7                 | LR__5056
2e5e7     21          | 	byte	"!"
2e5e8     00          | 	byte	0
2e5e9                 | LR__5057
2e5e9     30          | 	byte	"0"
2e5ea     00          | 	byte	0
2e5eb                 | LR__5058
2e5eb     39          | 	byte	"9"
2e5ec     00          | 	byte	0
2e5ed                 | LR__5059
2e5ed     2E          | 	byte	"."
2e5ee     00          | 	byte	0
2e5ef                 | LR__5060
2e5ef     24          | 	byte	"$"
2e5f0     00          | 	byte	0
2e5f1                 | LR__5061
2e5f1     25          | 	byte	"%"
2e5f2     00          | 	byte	0
2e5f3                 | LR__5062
2e5f3     2D          | 	byte	"-"
2e5f4     00          | 	byte	0
2e5f5                 | LR__5063
2e5f5     2E          | 	byte	"."
2e5f6     00          | 	byte	0
2e5f7                 | LR__5064
2e5f7     30          | 	byte	"0"
2e5f8     00          | 	byte	0
2e5f9                 | LR__5065
2e5f9     39          | 	byte	"9"
2e5fa     00          | 	byte	0
2e5fb                 | LR__5066
2e5fb     5F          | 	byte	"_"
2e5fc     00          | 	byte	0
2e5fd                 | LR__5067
2e5fd     2E          | 	byte	"."
2e5fe     00          | 	byte	0
2e5ff                 | LR__5068
2e5ff     45          | 	byte	"E"
2e600     00          | 	byte	0
2e601                 | LR__5069
2e601     65          | 	byte	"e"
2e602     00          | 	byte	0
2e603                 | LR__5070
2e603     2D          | 	byte	"-"
2e604     00          | 	byte	0
2e605                 | LR__5071
2e605     2D          | 	byte	"-"
2e606     00          | 	byte	0
2e607                 | LR__5072
2e607     65          | 	byte	"e"
2e608     00          | 	byte	0
2e609                 | LR__5073
2e609     2E          | 	byte	"."
2e60a     00          | 	byte	0
2e60b                 | LR__5074
2e60b     45          | 	byte	"E"
2e60c     00          | 	byte	0
2e60d                 | LR__5075
2e60d     65          | 	byte	"e"
2e60e     00          | 	byte	0
2e60f                 | LR__5076
2e60f     30          | 	byte	"0"
2e610     00          | 	byte	0
2e611                 | LR__5077
2e611     39          | 	byte	"9"
2e612     00          | 	byte	0
2e613                 | LR__5078
2e613     24          | 	byte	"$"
2e614     00          | 	byte	0
2e615                 | LR__5079
2e615     25          | 	byte	"%"
2e616     00          | 	byte	0
2e617                 | LR__5080
2e617     2D          | 	byte	"-"
2e618     00          | 	byte	0
2e619                 | LR__5081
2e619     30          | 	byte	"0"
2e61a     00          | 	byte	0
2e61b                 | LR__5082
2e61b     39          | 	byte	"9"
2e61c     00          | 	byte	0
2e61d                 | LR__5083
2e61d     5F          | 	byte	"_"
2e61e     00          | 	byte	0
2e61f                 | LR__5084
2e61f     30          | 	byte	"0"
2e620     00          | 	byte	0
2e621                 | LR__5085
2e621     39          | 	byte	"9"
2e622     00          | 	byte	0
2e623                 | LR__5086
2e623     5F          | 	byte	"_"
2e624     00          | 	byte	0
2e625                 | LR__5087
2e625     22          | 	byte	34
2e626     00          | 	byte	0
2e627                 | LR__5088
2e627     22          | 	byte	34
2e628     00          | 	byte	0
2e629                 | LR__5089
2e629     44 69 6D 3A 
2e62d     20 61 74 20 
2e631     6C 69 6E 65 
2e635     20          | 	byte	"Dim: at line "
2e636     00          | 	byte	0
2e637                 | LR__5090
2e637     3A 20 77 61 
2e63b     72 6E 69 6E 
2e63f     67 3A 20 74 
2e643     68 65 20 76 
2e647     61 72 69 61 
2e64b     62 6C 65 20 
2e64f     65 78 69 73 
2e653     74 65 64 2E | 	byte	": warning: the variable existed."
2e657     00          | 	byte	0
2e658                 | LR__5091
2e658     28          | 	byte	"("
2e659     00          | 	byte	0
2e65a                 | LR__5092
2e65a     61 73       | 	byte	"as"
2e65c     00          | 	byte	0
2e65d                 | LR__5093
2e65d     61 73       | 	byte	"as"
2e65f     00          | 	byte	0
2e660                 | LR__5094
2e660     2C          | 	byte	","
2e661     00          | 	byte	0
2e662                 | LR__5095
2e662     29          | 	byte	")"
2e663     00          | 	byte	0
2e664                 | LR__5096
2e664     29          | 	byte	")"
2e665     00          | 	byte	0
2e666                 | LR__5097
2e666     61 73       | 	byte	"as"
2e668     00          | 	byte	0
2e669                 | LR__5098
2e669     62 79 74 65 | 	byte	"byte"
2e66d     00          | 	byte	0
2e66e                 | LR__5099
2e66e     75 62 79 74 
2e672     65          | 	byte	"ubyte"
2e673     00          | 	byte	0
2e674                 | LR__5100
2e674     73 68 6F 72 
2e678     74          | 	byte	"short"
2e679     00          | 	byte	0
2e67a                 | LR__5101
2e67a     75 73 68 6F 
2e67e     72 74       | 	byte	"ushort"
2e680     00          | 	byte	0
2e681                 | LR__5102
2e681     6C 6F 6E 67 | 	byte	"long"
2e685     00          | 	byte	0
2e686                 | LR__5103
2e686     69 6E 74 65 
2e68a     67 65 72    | 	byte	"integer"
2e68d     00          | 	byte	0
2e68e                 | LR__5104
2e68e     75 6C 6F 6E 
2e692     67          | 	byte	"ulong"
2e693     00          | 	byte	0
2e694                 | LR__5105
2e694     69 6E 74 36 
2e698     34          | 	byte	"int64"
2e699     00          | 	byte	0
2e69a                 | LR__5106
2e69a     75 69 6E 74 
2e69e     36 34       | 	byte	"uint64"
2e6a0     00          | 	byte	0
2e6a1                 | LR__5107
2e6a1     73 69 6E 67 
2e6a5     6C 65       | 	byte	"single"
2e6a7     00          | 	byte	0
2e6a8                 | LR__5108
2e6a8     64 6F 75 62 
2e6ac     6C 65       | 	byte	"double"
2e6ae     00          | 	byte	0
2e6af                 | LR__5109
2e6af     73 74 72 69 
2e6b3     6E 67       | 	byte	"string"
2e6b5     00          | 	byte	0
2e6b6                 | LR__5110
2e6b6     74 6F       | 	byte	"to"
2e6b8     00          | 	byte	0
2e6b9                 | LR__5111
2e6b9     73 74 65 70 | 	byte	"step"
2e6bd     00          | 	byte	0
2e6be                 | LR__5112
2e6be     73 2E       | 	byte	"s."
2e6c0     00          | 	byte	0
2e6c1                 | LR__5113
2e6c1     24          | 	byte	"$"
2e6c2     00          | 	byte	0
2e6c3                 | LR__5114
2e6c3     26 68       | 	byte	"&h"
2e6c5     00          | 	byte	0
2e6c6                 | LR__5115
2e6c6     25          | 	byte	"%"
2e6c7     00          | 	byte	0
2e6c8                 | LR__5116
2e6c8     26 62       | 	byte	"&b"
2e6ca     00          | 	byte	0
2e6cb                 | LR__5117
2e6cb                 | 	byte	
2e6cb     00          | 	byte	0
2e6cc                 | LR__5118
2e6cc     2F          | 	byte	"/"
2e6cd     00          | 	byte	0
2e6ce                 | LR__5119
2e6ce                 | 	byte	
2e6ce     00          | 	byte	0
2e6cf                 | LR__5120
2e6cf     53 61 76 65 
2e6d3     64 20 61 73 
2e6d7     20          | 	byte	"Saved as "
2e6d8     00          | 	byte	0
2e6d9                 | LR__5121
2e6d9     2F          | 	byte	"/"
2e6da     00          | 	byte	0
2e6db                 | LR__5122
2e6db                 | 	byte	
2e6db     00          | 	byte	0
2e6dc                 | LR__5123
2e6dc     2F          | 	byte	"/"
2e6dd     00          | 	byte	0
2e6de                 | LR__5124
2e6de     2F          | 	byte	"/"
2e6df     00          | 	byte	0
2e6e0                 | LR__5125
2e6e0     2E 62 61 73 | 	byte	".bas"
2e6e4     00          | 	byte	0
2e6e5                 | LR__5126
2e6e5     53 79 73 74 
2e6e9     65 6D 20 65 
2e6ed     72 72 6F 72 
2e6f1     20          | 	byte	"System error "
2e6f2     00          | 	byte	0
2e6f3                 | LR__5127
2e6f3     3A 20       | 	byte	": "
2e6f5     00          | 	byte	0
2e6f6                 | LR__5128
2e6f6     2E 62 61 73 | 	byte	".bas"
2e6fa     00          | 	byte	0
2e6fb                 | LR__5129
2e6fb     2F          | 	byte	"/"
2e6fc     00          | 	byte	0
2e6fd                 | LR__5130
2e6fd     30          | 	byte	"0"
2e6fe     00          | 	byte	0
2e6ff                 | LR__5131
2e6ff     39          | 	byte	"9"
2e700     00          | 	byte	0
2e701                 | LR__5132
2e701                 | 	byte	
2e701     00          | 	byte	0
2e702                 | LR__5133
2e702     4C 6F 61 64 
2e706     65 64 20    | 	byte	"Loaded "
2e709     00          | 	byte	0
2e70a                 | LR__5134
2e70a     2F          | 	byte	"/"
2e70b     00          | 	byte	0
2e70c                 | LR__5135
2e70c     53 74 6F 70 
2e710     70 65 64 20 
2e714     61 74 20 6C 
2e718     69 6E 65 20 | 	byte	"Stopped at line "
2e71c     00          | 	byte	0
2e71d                 | LR__5136
2e71d                 | 	byte	
2e71d     00          | 	byte	0
2e71e                 | LR__5137
2e71e                 | 	byte	
2e71e     00          | 	byte	0
2e71f                 | LR__5138
2e71f     2F 73 64 2F 
2e723     6D 65 64 69 
2e727     61 2F 68 2F | 	byte	"/sd/media/h/"
2e72b     00          | 	byte	0
2e72c                 | LR__5139
2e72c     53 79 73 74 
2e730     65 6D 20 65 
2e734     72 72 6F 72 
2e738     20          | 	byte	"System error "
2e739     00          | 	byte	0
2e73a                 | LR__5140
2e73a     3A 20       | 	byte	": "
2e73c     00          | 	byte	0
2e73d                 | LR__5141
2e73d                 | 	byte	
2e73d     00          | 	byte	0
2e73e                 | LR__5142
2e73e                 | 	byte	
2e73e     00          | 	byte	0
2e73f                 | LR__5143
2e73f     2F 73 64 2F 
2e743     6D 65 64 69 
2e747     61 2F 73 2F | 	byte	"/sd/media/s/"
2e74b     00          | 	byte	0
2e74c                 | LR__5144
2e74c     53 79 73 74 
2e750     65 6D 20 65 
2e754     72 72 6F 72 
2e758     20          | 	byte	"System error "
2e759     00          | 	byte	0
2e75a                 | LR__5145
2e75a     3A 20       | 	byte	": "
2e75c     00          | 	byte	0
2e75d                 | LR__5146
2e75d     6E 6F 6E 61 
2e761     6D 65 2E 62 
2e765     61 73       | 	byte	"noname.bas"
2e767     00          | 	byte	0
2e768                 | LR__5147
2e768     45 72 72 6F 
2e76c     72 20       | 	byte	"Error "
2e76e     00          | 	byte	0
2e76f                 | LR__5148
2e76f     3A 20       | 	byte	": "
2e771     00          | 	byte	0
2e772                 | LR__5149
2e772                 | 	byte	
2e772     00          | 	byte	0
2e773                 | LR__5150
2e773                 | 	byte	
2e773     00          | 	byte	0
2e774                 | LR__5151
2e774     72 6E 64 3A 
2e778     20          | 	byte	"rnd: "
2e779     00          | 	byte	0
2e77a                 | LR__5152
2e77a     72 6E 64 3A 
2e77e     20          | 	byte	"rnd: "
2e77f     00          | 	byte	0
2e780                 | LR__5153
2e780     67 65 74 65 
2e784     6E 76 73 75 
2e788     73 74 61 69 
2e78c     6E 3A 20    | 	byte	"getenvsustain: "
2e78f     00          | 	byte	0
2e790                 | LR__5154
2e790     73 69 6E 3A 
2e794     20          | 	byte	"sin: "
2e795     00          | 	byte	0
2e796                 | LR__5155
2e796     6D 69 64 24 
2e79a     3A 20       | 	byte	"mid$: "
2e79c     00          | 	byte	0
2e79d                 | LR__5156
2e79d     6D 69 64 24 
2e7a1     3A 20       | 	byte	"mid$: "
2e7a3     00          | 	byte	0
2e7a4                 | LR__5157
2e7a4     72 69 67 68 
2e7a8     74 24 3A 20 | 	byte	"right$: "
2e7ac     00          | 	byte	0
2e7ad                 | LR__5158
2e7ad     72 69 67 68 
2e7b1     74 24 3A 20 | 	byte	"right$: "
2e7b5     00          | 	byte	0
2e7b6                 | LR__5159
2e7b6     6C 65 66 74 
2e7ba     24 3A 20    | 	byte	"left$: "
2e7bd     00          | 	byte	0
2e7be                 | LR__5160
2e7be     6C 65 66 74 
2e7c2     24 3A 20    | 	byte	"left$: "
2e7c5     00          | 	byte	0
2e7c6                 | LR__5161
2e7c6     61 73 63 3A 
2e7ca     20          | 	byte	"asc: "
2e7cb     00          | 	byte	0
2e7cc                 | LR__5162
2e7cc     61 73 63 3A 
2e7d0     20          | 	byte	"asc: "
2e7d1     00          | 	byte	0
2e7d2                 | LR__5163
2e7d2     6C 65 6E 3A 
2e7d6     20          | 	byte	"len: "
2e7d7     00          | 	byte	0
2e7d8                 | LR__5164
2e7d8     6C 65 6E 3A 
2e7dc     20          | 	byte	"len: "
2e7dd     00          | 	byte	0
2e7de                 | LR__5165
2e7de     63 68 72 24 
2e7e2     3A 20       | 	byte	"chr$: "
2e7e4     00          | 	byte	0
2e7e5                 | LR__5166
2e7e5     76 61 6C 3A 
2e7e9     20          | 	byte	"val: "
2e7ea     00          | 	byte	0
2e7eb                 | LR__5167
2e7eb     76 61 6C 3A 
2e7ef     20          | 	byte	"val: "
2e7f0     00          | 	byte	0
2e7f1                 | LR__5168
2e7f1     24          | 	byte	"$"
2e7f2     00          | 	byte	0
2e7f3                 | LR__5169
2e7f3     26 68       | 	byte	"&h"
2e7f5     00          | 	byte	0
2e7f6                 | LR__5170
2e7f6     25          | 	byte	"%"
2e7f7     00          | 	byte	0
2e7f8                 | LR__5171
2e7f8     26 62       | 	byte	"&b"
2e7fa     00          | 	byte	0
2e7fb                 | LR__5172
2e7fb     68 65 78 24 
2e7ff     3A 20       | 	byte	"hex$: "
2e801     00          | 	byte	0
2e802                 | LR__5173
2e802     62 69 6E 24 
2e806     3A 20       | 	byte	"bin$: "
2e808     00          | 	byte	0
2e809                 | LR__5174
2e809     63 6F 73 3A 
2e80d     20          | 	byte	"cos: "
2e80e     00          | 	byte	0
2e80f                 | LR__5175
2e80f     74 61 6E 3A 
2e813     20          | 	byte	"tan: "
2e814     00          | 	byte	0
2e815                 | LR__5176
2e815     61 73 69 6E 
2e819     3A 20       | 	byte	"asin: "
2e81b     00          | 	byte	0
2e81c                 | LR__5177
2e81c     61 63 6F 73 
2e820     3A 20       | 	byte	"acos: "
2e822     00          | 	byte	0
2e823                 | LR__5178
2e823     61 74 6E 3A 
2e827     20          | 	byte	"atn: "
2e828     00          | 	byte	0
2e829                 | LR__5179
2e829     73 71 72 3A 
2e82d     20          | 	byte	"sqr: "
2e82e     00          | 	byte	0
2e82f                 | LR__5180
2e82f     73 74 69 63 
2e833     6B 3A 20    | 	byte	"stick: "
2e836     00          | 	byte	0
2e837                 | LR__5181
2e837     73 74 72 69 
2e83b     67 3A 20    | 	byte	"strig: "
2e83e     00          | 	byte	0
2e83f                 | LR__5182
2e83f     67 65 74 70 
2e843     69 78 65 6C 
2e847     3A 20       | 	byte	"getpixel: "
2e849     00          | 	byte	0
2e84a                 | LR__5183
2e84a     20 42 41 53 
2e84e     49 43 20 62 
2e852     79 74 65 73 
2e856     20 66 72 65 
2e85a     65          | 	byte	" BASIC bytes free"
2e85b     00          | 	byte	0
2e85c                 | LR__5184
2e85c                 | 	byte	
2e85c     00          | 	byte	0
2e85d                 | LR__5185
2e85d     2F 73 64 2F 
2e861     62 61 73    | 	byte	"/sd/bas"
2e864     00          | 	byte	0
2e865                 | LR__5186
2e865     57 6F 72 6B 
2e869     69 6E 67 20 
2e86d     64 69 72 65 
2e871     63 74 6F 72 
2e875     79 3A 20    | 	byte	"Working directory: "
2e878     00          | 	byte	0
2e879                 | LR__5187
2e879     2A          | 	byte	"*"
2e87a     00          | 	byte	0
2e87b                 | LR__5188
2e87b                 | 	byte	
2e87b     00          | 	byte	0
2e87c                 | LR__5189
2e87c     5B 64 69 72 
2e880     5D 20       | 	byte	"[dir] "
2e882     00          | 	byte	0
2e883                 | LR__5190
2e883     2A          | 	byte	"*"
2e884     00          | 	byte	0
2e885                 | LR__5191
2e885                 | 	byte	
2e885     00          | 	byte	0
2e886                 | LR__5192
2e886     2D 2D 2D 2D 
2e88a     2D 6D 6F 72 
2e88e     65 2C 20 70 
2e892     72 65 73 73 
2e896     20 61 6E 79 
2e89a     20 6B 65 79 | 	byte	"-----more, press any key"
2e89e     00          | 	byte	0
2e89f                 | LR__5193
2e89f     20 20 20 20 
      ...             
2e8b7     20 20 20 20 
2e8bb     20          | 	byte	"                             "
2e8bc     00          | 	byte	0
2e8bd                 | LR__5194
2e8bd     2F          | 	byte	"/"
2e8be     00          | 	byte	0
2e8bf                 | LR__5195
2e8bf     2F 73 64 2F 
2e8c3     62 69 6E 2F | 	byte	"/sd/bin/"
2e8c7     00          | 	byte	0
2e8c8                 | LR__5196
2e8c8     53 79 73 74 
2e8cc     65 6D 20 65 
2e8d0     72 72 6F 72 
2e8d4     20          | 	byte	"System error "
2e8d5     00          | 	byte	0
2e8d6                 | LR__5197
2e8d6     3A 20       | 	byte	": "
2e8d8     00          | 	byte	0
2e8d9                 | LR__5198
2e8d9                 | 	byte	
2e8d9     00          | 	byte	0
2e8da                 | LR__5199
2e8da     45 78 70 65 
2e8de     63 74 65 64 
2e8e2     20 6E 75 6D 
2e8e6     62 65 72 2C 
2e8ea     20 67 6F 74 
2e8ee     20 73 6F 6D 
2e8f2     65 74 68 69 
2e8f6     6E 67 20 65 
2e8fa     6C 73 65 2E | 	byte	"Expected number, got something else."
2e8fe     00          | 	byte	0
2e8ff                 | LR__5200
2e8ff     43 61 6E 6E 
2e903     6F 74 20 61 
2e907     64 64 20 61 
2e90b     20 6E 75 6D 
2e90f     62 65 72 20 
2e913     74 6F 20 61 
2e917     20 73 74 72 
2e91b     69 6E 67 2E | 	byte	"Cannot add a number to a string."
2e91f     00          | 	byte	0
2e920                 | LR__5201
2e920     43 61 6E 6E 
2e924     6F 74 20 73 
2e928     75 62 73 74 
2e92c     72 61 63 74 
2e930     20 73 74 72 
2e934     69 6E 67 73 
2e938     2E          | 	byte	"Cannot substract strings."
2e939     00          | 	byte	0
2e93a                 | LR__5202
2e93a     55 6E 6B 6E 
2e93e     6F 77 6E 20 
2e942     65 72 72 6F 
2e946     72 20 77 68 
2e94a     69 6C 65 20 
2e94e     61 64 64 69 
2e952     6E 67 2E    | 	byte	"Unknown error while adding."
2e955     00          | 	byte	0
2e956                 | LR__5203
2e956     55 6E 6B 6E 
2e95a     6F 77 6E 20 
2e95e     65 72 72 6F 
2e962     72 20 77 68 
2e966     69 6C 65 20 
2e96a     73 75 62 73 
2e96e     74 72 61 63 
2e972     74 69 6E 67 
2e976     2E          | 	byte	"Unknown error while substracting."
2e977     00          | 	byte	0
2e978                 | LR__5204
2e978     43 61 6E 6E 
2e97c     6F 74 20 64 
2e980     6F 20 6C 6F 
2e984     67 69 63 20 
2e988     6F 70 65 72 
2e98c     61 74 69 6F 
2e990     6E 20 6F 6E 
2e994     20 73 74 72 
2e998     69 6E 67 20 
2e99c     6F 72 20 66 
2e9a0     6C 6F 61 74 
2e9a4     2E          | 	byte	"Cannot do logic operation on string or float."
2e9a5     00          | 	byte	0
2e9a6                 | LR__5205
2e9a6     55 6E 6B 6E 
2e9aa     6F 77 6E 20 
2e9ae     65 72 72 6F 
2e9b2     72 20 77 68 
2e9b6     69 6C 65 20 
2e9ba     64 6F 69 6E 
2e9be     67 20 6C 6F 
2e9c2     67 69 63 20 
2e9c6     6F 70 65 72 
2e9ca     61 74 69 6F 
2e9ce     6E 2E       | 	byte	"Unknown error while doing logic operation."
2e9d0     00          | 	byte	0
2e9d1                 | LR__5206
2e9d1     43 61 6E 6E 
2e9d5     6F 74 20 6D 
2e9d9     75 6C 74 69 
2e9dd     70 6C 79 20 
2e9e1     73 74 72 69 
2e9e5     6E 67 73 2E | 	byte	"Cannot multiply strings."
2e9e9     00          | 	byte	0
2e9ea                 | LR__5207
2e9ea     55 6E 6B 6E 
2e9ee     6F 77 6E 20 
2e9f2     65 72 72 6F 
2e9f6     72 20 77 68 
2e9fa     69 6C 65 20 
2e9fe     6D 75 6C 74 
2ea02     69 70 6C 79 
2ea06     69 6E 67 2E | 	byte	"Unknown error while multiplying."
2ea0a     00          | 	byte	0
2ea0b                 | LR__5208
2ea0b     43 61 6E 6E 
2ea0f     6F 74 20 64 
2ea13     69 76 69 64 
2ea17     65 20 73 74 
2ea1b     72 69 6E 67 
2ea1f     73 2E       | 	byte	"Cannot divide strings."
2ea21     00          | 	byte	0
2ea22                 | LR__5209
2ea22     55 6E 6B 6E 
2ea26     6F 77 6E 20 
2ea2a     65 72 72 6F 
2ea2e     72 20 77 68 
2ea32     69 6C 65 20 
2ea36     64 69 76 69 
2ea3a     64 69 6E 67 
2ea3e     2E          | 	byte	"Unknown error while dividing."
2ea3f     00          | 	byte	0
2ea40                 | LR__5210
2ea40     43 61 6E 6E 
2ea44     6F 74 20 63 
2ea48     6F 6D 70 75 
2ea4c     74 65 20 61 
2ea50     20 70 6F 77 
2ea54     65 72 20 6F 
2ea58     66 20 61 20 
2ea5c     73 74 72 69 
2ea60     6E 67 2E    | 	byte	"Cannot compute a power of a string."
2ea63     00          | 	byte	0
2ea64                 | LR__5211
2ea64     55 6E 6B 6E 
2ea68     6F 77 6E 20 
2ea6c     65 72 72 6F 
2ea70     72 20 77 68 
2ea74     69 6C 65 20 
2ea78     63 6F 6D 70 
2ea7c     75 74 69 6E 
2ea80     67 20 61 20 
2ea84     70 6F 77 65 
2ea88     72 2E       | 	byte	"Unknown error while computing a power."
2ea8a     00          | 	byte	0
2ea8b                 | LR__5212
2ea8b     52 69 67 68 
2ea8f     74 20 70 61 
2ea93     72 65 6E 74 
2ea97     68 65 73 69 
2ea9b     73 20 65 78 
2ea9f     70 65 63 74 
2eaa3     65 64 2E    | 	byte	"Right parenthesis expected."
2eaa6     00          | 	byte	0
2eaa7                 | LR__5213
2eaa7     45 78 70 65 
2eaab     63 74 65 64 
2eaaf     20 73 74 72 
2eab3     69 6E 67 2E | 	byte	"Expected string."
2eab7     00          | 	byte	0
2eab8                 | LR__5214
2eab8     45 78 70 65 
2eabc     63 74 65 64 
2eac0     20 66 6C 6F 
2eac4     61 74 2E    | 	byte	"Expected float."
2eac7     00          | 	byte	0
2eac8                 | LR__5215
2eac8     45 78 70 65 
2eacc     63 74 65 64 
2ead0     20 75 6E 73 
2ead4     69 67 6E 65 
2ead8     64 20 69 6E 
2eadc     74 65 67 65 
2eae0     72 2E       | 	byte	"Expected unsigned integer."
2eae2     00          | 	byte	0
2eae3                 | LR__5216
2eae3     45 78 70 65 
2eae7     63 74 65 64 
2eaeb     20 69 6E 74 
2eaef     65 67 65 72 
2eaf3     2E          | 	byte	"Expected integer."
2eaf4     00          | 	byte	0
2eaf5                 | LR__5217
2eaf5     4E 6F 20 6D 
2eaf9     6F 72 65 20 
2eafd     76 61 72 69 
2eb01     61 62 6C 65 
2eb05     20 73 6C 6F 
2eb09     74 73 2E    | 	byte	"No more variable slots."
2eb0c     00          | 	byte	0
2eb0d                 | LR__5218
2eb0d     56 61 72 69 
2eb11     61 62 6C 65 
2eb15     20 6E 6F 74 
2eb19     20 66 6F 75 
2eb1d     6E 64 2E    | 	byte	"Variable not found."
2eb20     00          | 	byte	0
2eb21                 | LR__5219
2eb21     43 6F 6D 6D 
2eb25     61 20 65 78 
2eb29     70 65 63 74 
2eb2d     65 64 2E    | 	byte	"Comma expected."
2eb30     00          | 	byte	0
2eb31                 | LR__5220
2eb31     43 6F 6D 6D 
2eb35     61 20 6F 72 
2eb39     20 73 65 6D 
2eb3d     69 63 6F 6C 
2eb41     6F 6E 20 65 
2eb45     78 70 65 63 
2eb49     74 65 64 2E | 	byte	"Comma or semicolon expected."
2eb4d     00          | 	byte	0
2eb4e                 | LR__5221
2eb4e     55 6E 6B 6E 
2eb52     6F 77 6E 20 
2eb56     63 6F 6D 6D 
2eb5a     61 6E 64 2E | 	byte	"Unknown command."
2eb5e     00          | 	byte	0
2eb5f                 | LR__5222
2eb5f     53 74 61 63 
2eb63     6B 20 75 6E 
2eb67     64 65 72 66 
2eb6b     6C 6F 77 2E | 	byte	"Stack underflow."
2eb6f     00          | 	byte	0
2eb70                 | LR__5223
2eb70     43 61 6E 6E 
2eb74     6F 74 20 65 
2eb78     78 65 63 75 
2eb7c     74 65 20 67 
2eb80     6F 74 6F 20 
2eb84     69 6E 20 74 
2eb88     68 65 20 69 
2eb8c     6D 6D 65 64 
2eb90     69 61 74 65 
2eb94     20 6D 6F 64 
2eb98     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
2eb9a     00          | 	byte	0
2eb9b                 | LR__5224
2eb9b     43 61 6E 6E 
2eb9f     6F 74 20 6C 
2eba3     6F 61 64 20 
2eba7     66 72 6F 6D 
2ebab     20 74 68 69 
2ebaf     73 20 66 69 
2ebb3     6C 65 2E    | 	byte	"Cannot load from this file."
2ebb6     00          | 	byte	0
2ebb7                 | LR__5225
2ebb7     54 68 65 20 
2ebbb     70 72 6F 67 
2ebbf     72 61 6D 20 
2ebc3     69 73 20 65 
2ebc7     6D 70 74 79 
2ebcb     2E          | 	byte	"The program is empty."
2ebcc     00          | 	byte	0
2ebcd                 | LR__5226
2ebcd     49 66 20 61 
2ebd1     66 74 65 72 
2ebd5     20 69 66 2E | 	byte	"If after if."
2ebd9     00          | 	byte	0
2ebda                 | LR__5227
2ebda     45 6D 70 74 
2ebde     79 20 65 78 
2ebe2     70 72 65 73 
2ebe6     73 69 6F 6E 
2ebea     2E          | 	byte	"Empty expression."
2ebeb     00          | 	byte	0
2ebec                 | LR__5228
2ebec     53 74 72 69 
2ebf0     6E 67 20 65 
2ebf4     78 70 65 63 
2ebf8     74 65 64 2E | 	byte	"String expected."
2ebfc     00          | 	byte	0
2ebfd                 | LR__5229
2ebfd     49 6E 74 65 
2ec01     72 70 72 65 
2ec05     74 65 72 20 
2ec09     69 6E 74 65 
2ec0d     72 6E 61 6C 
2ec11     20 65 72 72 
2ec15     6F 72 2E    | 	byte	"Interpreter internal error."
2ec18     00          | 	byte	0
2ec19                 | LR__5230
2ec19     45 78 70 65 
2ec1d     63 74 65 64 
2ec21     20 61 73 73 
2ec25     69 67 6E 2E | 	byte	"Expected assign."
2ec29     00          | 	byte	0
2ec2a                 | LR__5231
2ec2a     45 78 70 65 
2ec2e     63 74 65 64 
2ec32     20 27 74 6F 
2ec36     27 2E       | 	byte	"Expected 'to'."
2ec38     00          | 	byte	0
2ec39                 | LR__5232
2ec39     45 78 70 65 
2ec3d     63 74 65 64 
2ec41     20 69 6E 74 
2ec45     65 67 65 72 
2ec49     20 76 61 72 
2ec4d     69 61 62 6C 
2ec51     65 2E       | 	byte	"Expected integer variable."
2ec53     00          | 	byte	0
2ec54                 | LR__5233
2ec54     55 6E 69 6E 
2ec58     69 74 69 61 
2ec5c     6C 69 7A 65 
2ec60     64 20 76 61 
2ec64     72 69 61 62 
2ec68     6C 65 20 69 
2ec6c     6E 20 27 6E 
2ec70     65 78 74 27 
2ec74     2C 20 75 73 
2ec78     65 20 27 66 
2ec7c     6F 72 27 20 
2ec80     62 65 66 6F 
2ec84     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
2ec87     00          | 	byte	0
2ec88                 | LR__5234
2ec88     4E 6F 20 6D 
2ec8c     6F 72 65 20 
2ec90     73 6C 6F 74 
2ec94     73 20 66 6F 
2ec98     72 20 27 66 
2ec9c     6F 72 27 2E | 	byte	"No more slots for 'for'."
2eca0     00          | 	byte	0
2eca1                 | LR__5235
2eca1     27 4E 65 78 
2eca5     74 27 20 64 
2eca9     6F 65 73 6E 
2ecad     27 74 20 6D 
2ecb1     61 74 63 68 
2ecb5     20 27 66 6F 
2ecb9     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
2ecbc     00          | 	byte	0
2ecbd                 | LR__5236
2ecbd     27 47 6F 74 
2ecc1     6F 27 20 74 
2ecc5     61 72 67 65 
2ecc9     74 20 6C 69 
2eccd     6E 65 20 6E 
2ecd1     6F 74 20 66 
2ecd5     6F 75 6E 64 
2ecd9     2E          | 	byte	"'Goto' target line not found."
2ecda     00          | 	byte	0
2ecdb                 | LR__5237
2ecdb     42 61 64 20 
2ecdf     6E 75 6D 62 
2ece3     65 72 20 6F 
2ece7     66 20 70 61 
2eceb     72 61 6D 65 
2ecef     74 65 72 73 | 	byte	"Bad number of parameters"
2ecf3     00          | 	byte	0
2ecf4                 | LR__5238
2ecf4     46 75 6E 63 
2ecf8     74 69 6F 6E 
2ecfc     20 75 6E 64 
2ed00     65 66 69 6E 
2ed04     65 64 20 66 
2ed08     6F 72 20 73 
2ed0c     74 72 69 6E 
2ed10     67 73       | 	byte	"Function undefined for strings"
2ed12     00          | 	byte	0
2ed13                 | LR__5239
2ed13     42 61 64 20 
2ed17     70 61 72 61 
2ed1b     6D 65 74 65 
2ed1f     72 2E       | 	byte	"Bad parameter."
2ed21     00          | 	byte	0
2ed22                 | LR__5240
2ed22     43 61 6E 6E 
2ed26     6F 74 20 64 
2ed2a     65 63 6C 61 
2ed2e     72 65 20 61 
2ed32     6E 20 61 72 
2ed36     72 61 79 3A 
2ed3a     20 74 68 65 
2ed3e     20 76 61 72 
2ed42     69 61 62 6C 
2ed46     65 20 65 78 
2ed4a     69 73 74 73 
2ed4e     2E          | 	byte	"Cannot declare an array: the variable exists."
2ed4f     00          | 	byte	0
2ed50                 | LR__5241
2ed50     45 78 70 65 
2ed54     63 74 65 64 
2ed58     20 27 28 27 
2ed5c     2E          | 	byte	"Expected '('."
2ed5d     00          | 	byte	0
2ed5e                 | LR__5242
2ed5e     45 78 70 65 
2ed62     63 74 65 64 
2ed66     20 27 29 27 
2ed6a     20 6F 72 20 
2ed6e     27 2C 27 2E | 	byte	"Expected ')' or ','."
2ed72     00          | 	byte	0
2ed73                 | LR__5243
2ed73     4E 6F 20 6D 
2ed77     6F 72 65 20 
2ed7b     74 68 61 6E 
2ed7f     20 33 20 64 
2ed83     69 6D 65 6E 
2ed87     73 69 6F 6E 
2ed8b     73 20 73 75 
2ed8f     70 70 6F 72 
2ed93     74 65 64    | 	byte	"No more than 3 dimensions supported"
2ed96     00          | 	byte	0
2ed97                 | LR__5244
2ed97     56 61 72 69 
2ed9b     61 62 6C 65 
2ed9f     20 6E 61 6D 
2eda3     65 20 65 78 
2eda7     70 65 63 74 
2edab     65 64       | 	byte	"Variable name expected"
2edad     00          | 	byte	0
2edae                 | LR__5245
2edae     54 79 70 65 
2edb2     20 6E 61 6D 
2edb6     65 20 65 78 
2edba     70 65 63 74 
2edbe     65 64       | 	byte	"Type name expected"
2edc0     00          | 	byte	0
2edc1                 | LR__5246
2edc1     54 79 70 65 
2edc5     20 6E 6F 74 
2edc9     20 73 75 70 
2edcd     70 6F 72 74 
2edd1     65 64 20 79 
2edd5     65 74       | 	byte	"Type not supported yet"
2edd7     00          | 	byte	0
2edd8                 | LR__5247
2edd8     41 72 72 61 
2eddc     79 20 69 6E 
2ede0     64 65 78 20 
2ede4     6F 75 74 20 
2ede8     6F 66 20 72 
2edec     61 6E 67 65 | 	byte	"Array index out of range"
2edf0     00          | 	byte	0
2edf1                 | LR__5248
2edf1     45 72 72 6F 
2edf5     72 20       | 	byte	"Error "
2edf7     00          | 	byte	0
2edf8                 | LR__5249
2edf8     3A 20       | 	byte	": "
2edfa     00          | 	byte	0
2edfb                 | LR__5250
2edfb     2F 73 64    | 	byte	"/sd"
2edfe     00          | 	byte	0
2edff                 | LR__5251
2edff     2F 73 64 2F 
2ee03     62 61 73    | 	byte	"/sd/bas"
2ee06     00          | 	byte	0
2ee07                 | LR__5252
2ee07     2F 73 64 2F 
2ee0b     62 61 73    | 	byte	"/sd/bas"
2ee0e     00          | 	byte	0
2ee0f                 | LR__5253
2ee0f     20 42 41 53 
2ee13     49 43 20 62 
2ee17     79 74 65 73 
2ee1b     20 66 72 65 
2ee1f     65          | 	byte	" BASIC bytes free"
2ee20     00          | 	byte	0
2ee21                 | LR__5254
2ee21     52 65 61 64 
2ee25     79          | 	byte	"Ready"
2ee26     00          | 	byte	0
2ee27                 | LR__5255
2ee27     6E 6F 6E 61 
2ee2b     6D 65 2E 62 
2ee2f     61 73       | 	byte	"noname.bas"
2ee31     00          | 	byte	0
2ee32                 | LR__5256
2ee32                 | 	byte	
2ee32     00          | 	byte	0
2ee33                 | LR__5257
2ee33                 | 	byte	
2ee33     00          | 	byte	0
2ee34                 | LR__5258
2ee34                 | 	byte	
2ee34     00          | 	byte	0
2ee35     00 00 00    | 	alignl
2ee38                 | _dat_
2ee38     00 00 00 00 
2ee3c     00 00 00 00 
2ee40     00 00 00 00 
2ee44     00 00 00 00 | 	byte	$00[16]
2ee48     61 41 17 0E 
2ee4c     62 42 00 00 
2ee50     63 43 19 10 
2ee54     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
2ee58     65 45 18 0F 
2ee5c     66 46 00 00 
2ee60     67 47 00 00 
2ee64     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
2ee68     69 49 00 00 
2ee6c     6A 4A 00 00 
2ee70     6B 4B 00 00 
2ee74     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
2ee78     6D 4D 00 00 
2ee7c     6E 4E 1A 11 
2ee80     6F 4F 1E 15 
2ee84     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
2ee88     71 51 00 00 
2ee8c     72 52 00 00 
2ee90     73 53 1B 12 
2ee94     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
2ee98     75 55 00 00 
2ee9c     76 56 00 00 
2eea0     77 57 00 00 
2eea4     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
2eea8     79 59 00 00 
2eeac     7A 5A 1D 14 
2eeb0     31 21 04 00 
2eeb4     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
2eeb8     33 23 06 00 
2eebc     34 24 07 00 
2eec0     35 25 08 00 
2eec4     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
2eec8     37 26 0A 00 
2eecc     38 2A 0B 00 
2eed0     39 28 0C 00 
2eed4     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
2eed8     8D 8D 00 00 
2eedc     9B 9B 00 00 
2eee0     88 88 00 00 
2eee4     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
2eee8     20 20 00 00 
2eeec     2D 5F 00 00 
2eef0     3D 2B 00 00 
2eef4     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
2eef8     5D 7D 00 00 
2eefc     5C 7C 00 00 
2ef00     23 7E 00 00 
2ef04     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
2ef08     27 22 00 00 
2ef0c     60 7E 03 00 
2ef10     2C 3C 00 00 
2ef14     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
2ef18     2F 3F 00 00 
2ef1c     B9 B9 00 00 
2ef20     BA 00 00 00 
2ef24     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
2ef28     BC 00 00 00 
2ef2c     BD 00 00 00 
2ef30     BE 00 00 00 
2ef34     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
2ef38     C0 00 00 00 
2ef3c     C1 00 00 00 
2ef40     C2 00 00 00 
2ef44     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
2ef48     C4 00 00 00 
2ef4c     C5 00 00 00 
2ef50     C6 00 00 00 
2ef54     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
2ef58     C8 00 00 00 
2ef5c     C9 00 00 00 
2ef60     CA 00 00 00 
2ef64     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
2ef68     7F 7F 00 00 
2ef6c     CC 00 00 00 
2ef70     CD 00 00 00 
2ef74     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
2ef78     CF 00 00 00 
2ef7c     D0 00 00 00 
2ef80     D1 00 00 00 
2ef84     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
2ef88     2F 2F 00 00 
2ef8c     2A 2A 00 00 
2ef90     2D 2D 00 00 
2ef94     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
2ef98     8D 8D 00 00 
2ef9c     31 31 00 00 
2efa0     32 32 00 00 
2efa4     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
2efa8     34 34 00 00 
2efac     35 35 00 00 
2efb0     36 36 00 00 
2efb4     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
2efb8     38 38 00 00 
2efbc     39 39 00 00 
2efc0     30 30 00 00 
2efc4     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
2efc8     5C 7C 00 00 
2efcc     00 00 00 00 
2efd0     00 00 00 00 
2efd4     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
2efd8     00 00 00 00 
      ...             
2f030     00 00 00 00 
2f034     00 00 00 00 | 	byte	$00[96]
2f038     2B 00 A6 F2 
2f03c     24 A7 09 80 
2f040     5B 88 4D 89 
2f044     80 88 A5 88 | atari_spl file "atari.spl"
2f048     6D 88 B8 88 
2f04c     80 88 CB 88 
2f050     92 88 A5 88 
2f054     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
2f058     A5 88 CA 88 
2f05c     A6 88 DD 88 
2f060     B8 88 AB 89 
2f064     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
2f068     C8 AD C6 F1 
2f06c     91 06 B6 FF 
2f070     13 00 4A 00 
2f074     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
2f078     5D 00 5E 00 
2f07c     5D 00 5E 00 
2f080     5E 00 5D 00 
2f084     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
2f088     38 00 83 00 
2f08c     25 00 83 00 
2f090     C3 FE D1 04 
2f094     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
2f098     48 88 38 85 
2f09c     41 8A CB 88 
2f0a0     28 89 B8 88 
2f0a4     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
2f0a8     15 89 03 89 
2f0ac     02 89 15 89 
2f0b0     16 89 15 89 
2f0b4     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
2f0b8     15 89 3A 89 
2f0bc     72 89 E3 89 
2f0c0     52 83 AD 97 
2f0c4     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
2f0c8     0C 02 B6 FF 
2f0cc     E1 00 A8 00 
2f0d0     F3 00 A8 00 
2f0d4     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
2f0d8     CE 00 CD 00 
2f0dc     CD 00 BA 00 
2f0e0     E1 00 BB 00 
2f0e4     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
2f0e8     DF 00 C9 FF 
2f0ec     E6 01 B6 06 
2f0f0     EE DD 8D 98 
2f0f4     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
2f0f8     97 89 73 89 
2f0fc     3B 89 60 89 
2f100     60 89 60 89 
2f104     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
2f108     73 89 72 89 
2f10c     85 89 73 89 
2f110     AA 89 60 89 
2f114     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
2f118     E8 8A 18 86 
2f11c     92 88 A5 C2 
2f120     E0 00 C3 05 
2f124     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
2f128     F2 00 64 01 
2f12c     06 01 3E 01 
2f130     2B 01 2B 01 
2f134     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
2f138     2B 01 2A 01 
2f13c     2B 01 2B 01 
2f140     2B 01 18 01 
2f144     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
2f148     39 07 61 F3 
2f14c     C0 AF 37 85 
2f150     0F 88 8B 8A 
2f154     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
2f158     AB 89 D0 89 
2f15c     AB 89 D0 89 
2f160     D0 89 CF 89 
2f164     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
2f168     D0 89 F5 89 
2f16c     BD 89 08 8A 
2f170     CF 89 E8 8A 
2f174     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
2f178     53 B3 0D F8 
2f17c     F4 07 38 00 
2f180     63 01 63 01 
2f184     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
2f188     88 01 88 01 
2f18c     76 01 88 01 
2f190     88 01 89 01 
2f194     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
2f198     75 01 AE 01 
2f19c     76 01 88 01 
2f1a0     4A 00 46 06 
2f1a4     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
2f1a8     08 8A 9A 86 
2f1ac     33 8B 08 8A 
2f1b0     2D 8A F5 89 
2f1b4     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
2f1b8     2D 8A 2D 8A 
2f1bc     2E 8A 1B 8A 
2f1c0     40 8A 2D 8A 
2f1c4     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
2f1c8     2E 8A 79 8A 
2f1cc     66 8A C8 8B 
2f1d0     72 82 2B 97 
2f1d4     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
2f1d8     1D 02 05 01 
2f1dc     F8 01 C0 01 
2f1e0     0B 02 C0 01 
2f1e4     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
2f1e8     F9 01 D3 01 
2f1ec     F8 01 D3 01 
2f1f0     F8 01 D2 01 
2f1f4     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
2f1f8     E6 01 2B 01 
2f1fc     8E 02 5F 07 
2f200     F7 E2 ED 9C 
2f204     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
2f208     E8 8A 78 8A 
2f20c     78 8A 65 8A 
2f210     8B 8A 78 8A 
2f214     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
2f218     8B 8A 9D 8A 
2f21c     9D 8A 8B 8A 
2f220     C2 8A 78 8A 
2f224     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
2f228     70 8C 18 86 
2f22c     8B 8A 23 C9 
2f230     CB 03 C4 05 
2f234     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
2f238     0B 02 7B 02 
2f23c     1E 02 55 02 
2f240     30 02 43 02 
2f244     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
2f248     43 02 44 02 
2f24c     43 02 30 02 
2f250     68 02 31 02 
2f254     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
2f258     07 08 3F F7 
2f25c     73 B2 13 85 
2f260     15 89 ED 8B 
2f264     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
2f268     B0 8A FB 8A 
2f26c     D5 8A FA 8A 
2f270     E8 8A FB 8A 
2f274     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
2f278     E8 8A 21 8B 
2f27c     E7 8A 33 8B 
2f280     E8 8A 26 8C 
2f284     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
2f288     8D B0 27 F6 
2f28c     9C 08 AD 01 
2f290     7B 02 8D 02 
2f294     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
2f298     A1 02 A0 02 
2f29c     A1 02 A0 02 
2f2a0     A0 02 A0 02 
2f2a4     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
2f2a8     7B 02 D8 02 
2f2ac     7B 02 C6 02 
2f2b0     3E 01 C3 05 
2f2b4     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
2f2b8     00 8C 2A 86 
2f2bc     E0 8C FA 8A 
2f2c0     6A 8B FB 8A 
2f2c4     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
2f2c8     45 8B 45 8B 
2f2cc     45 8B 6B 8B 
2f2d0     46 8B 59 8B 
2f2d4     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
2f2d8     6B 8B 6B 8B 
2f2dc     6B 8B 6B 8B 
2f2e0     7D 8B 7D 8B 
2f2e4     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
2f2e8     90 8B 91 8B 
2f2ec     90 8B 90 8B 
2f2f0     A3 8B A3 8B 
2f2f4     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
2f2f8     B5 8B B6 8B 
2f2fc     B5 8B B5 8B 
2f300     B6 8B C8 8B 
2f304     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
2f308     C8 8B DA 8B 
2f30c     DB 8B DB 8B 
2f310     DB 8B DC 8B 
2f314     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
2f318     EE 8B EE 8B 
2f31c     00 8C 01 8C 
2f320     00 8C 01 8C 
2f324     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
2f328     12 8C 13 8C 
2f32c     13 8C 26 8C 
2f330     26 8C 26 8C 
2f334     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
2f338     38 8C 38 8C 
2f33c     38 8C 38 8C 
2f340     4B 8C 4B 8C 
2f344     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
2f348     5E 8C 5E 8C 
2f34c     5E 8C 5E 8C 
2f350     70 8C 70 8C 
2f354     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
2f358     70 8C 83 8C 
2f35c     83 8C 83 8C 
2f360     83 8C 96 8C 
2f364     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
2f368     95 8C A9 8C 
2f36c     A9 8C A8 8C 
2f370     A8 8C A8 8C 
2f374     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
2f378     BB 8C BB 8C 
2f37c     BB 8C CE 8C 
2f380     CE 8C CE 8C 
2f384     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
2f388     E0 8C E1 8C 
2f38c     E1 8C E0 8C 
2f390     F4 8C F2 8C 
2f394     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
2f398     05 8D 05 8D 
2f39c     06 8D 06 8D 
2f3a0     19 8D 19 8D 
2f3a4     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
2f3a8     18 8D 2B 8D 
2f3ac     2B 8D 2B 8D 
2f3b0     2A 8D 3E 8D 
2f3b4     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
2f3b8     3E 8D 51 8D 
2f3bc     50 8D 50 8D 
2f3c0     50 8D 51 8D 
2f3c4     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
2f3c8     63 8D 64 8D 
2f3cc     76 8D 75 8D 
2f3d0     75 8D 76 8D 
2f3d4     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
2f3d8     88 8D 88 8D 
2f3dc     89 8D 9B 8D 
2f3e0     9A 8D 9B 8D 
2f3e4     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
2f3e8     AD 8D AE 8D 
2f3ec     AD 8D AE 8D 
2f3f0     C1 8D C1 8D 
2f3f4     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
2f3f8     D3 8D D3 8D 
2f3fc     D3 8D D3 8D 
2f400     D3 8D E6 8D 
2f404     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
2f408     E6 8D E6 8D 
2f40c     F9 8D F9 8D 
2f410     F9 8D F8 8D 
2f414     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
2f418     0B 8E 0B 8E 
2f41c     1D 8E 1D 8E 
2f420     1E 8E 1E 8E 
2f424     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
2f428     31 8E 31 8E 
2f42c     31 8E 42 8E 
2f430     43 8E 43 8E 
2f434     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
2f438     56 8E 56 8E 
2f43c     55 8E 56 8E 
2f440     68 8E 69 8E 
2f444     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
2f448     69 8E 7B 8E 
2f44c     7C 8E 7B 8E 
2f450     7B 8E 8D 8E 
2f454     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
2f458     8D 8E A1 8E 
2f45c     A0 8E A1 8E 
2f460     A1 8E A0 8E 
2f464     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
2f468     B3 8E B3 8E 
2f46c     C6 8E C5 8E 
2f470     C6 8E C6 8E 
2f474     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
2f478     D8 8E D9 8E 
2f47c     D8 8E EC 8E 
2f480     EB 8E EC 8E 
2f484     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
2f488     FE 8E FE 8E 
2f48c     FE 8E FE 8E 
2f490     10 8F 10 8F 
2f494     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
2f498     11 8F 23 8F 
2f49c     24 8F 23 8F 
2f4a0     24 8F 37 8F 
2f4a4     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
2f4a8     36 8F 36 8F 
2f4ac     48 8F 49 8F 
2f4b0     49 8F 49 8F 
2f4b4     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
2f4b8     5B 8F 5C 8F 
2f4bc     5B 8F 6E 8F 
2f4c0     6E 8F 6E 8F 
2f4c4     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
2f4c8     81 8F 81 8F 
2f4cc     81 8F 81 8F 
2f4d0     93 8F 93 8F 
2f4d4     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
2f4d8     93 8F A6 8F 
2f4dc     A6 8F A6 8F 
2f4e0     A6 8F B9 8F 
2f4e4     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
2f4e8     B9 8F B9 8F 
2f4ec     CC 8F CB 8F 
2f4f0     CB 8F CC 8F 
2f4f4     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
2f4f8     DF 8F DE 8F 
2f4fc     DE 8F F1 8F 
2f500     F1 8F F1 8F 
2f504     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
2f508     03 90 04 90 
2f50c     04 90 04 90 
2f510     16 90 17 90 
2f514     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
2f518     29 90 28 90 
2f51c     29 90 28 90 
2f520     29 90 3C 90 
2f524     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
2f528     3C 90 4F 90 
2f52c     4E 90 4E 90 
2f530     4E 90 4E 90 
2f534     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
2f538     61 90 61 90 
2f53c     73 90 74 90 
2f540     74 90 74 90 
2f544     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
2f548     87 90 86 90 
2f54c     87 90 86 90 
2f550     99 90 99 90 
2f554     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
2f558     AB 90 AB 90 
2f55c     AC 90 AB 90 
2f560     AB 90 BF 90 
2f564     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
2f568     BE 90 D1 90 
2f56c     D0 90 D1 90 
2f570     D1 90 D1 90 
2f574     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
2f578     E3 90 E4 90 
2f57c     F6 90 F6 90 
2f580     F6 90 F6 90 
2f584     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
2f588     09 91 0A 91 
2f58c     0A 91 1C 91 
2f590     1C 91 1C 91 
2f594     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
2f598     2F 91 2E 91 
2f59c     2F 91 2F 91 
2f5a0     2E 91 41 91 
2f5a4     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
2f5a8     41 91 53 91 
2f5ac     54 91 54 91 
2f5b0     53 91 54 91 
2f5b4     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
2f5b8     67 91 67 91 
2f5bc     79 91 7A 91 
2f5c0     79 91 78 91 
2f5c4     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
2f5c8     8C 91 8B 91 
2f5cc     8C 91 8C 91 
2f5d0     9E 91 9E 91 
2f5d4     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
2f5d8     B1 91 B1 91 
2f5dc     B2 91 B1 91 
2f5e0     B1 91 C4 91 
2f5e4     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
2f5e8     C4 91 D6 91 
2f5ec     D7 91 D7 91 
2f5f0     D7 91 D6 91 
2f5f4     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
2f5f8     EA 91 EA 91 
2f5fc     EA 91 FC 91 
2f600     FC 91 FB 91 
2f604     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
2f608     0E 92 0F 92 
2f60c     0F 92 0E 92 
2f610     21 92 21 92 
2f614     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
2f618     21 92 34 92 
2f61c     33 92 34 92 
2f620     34 92 47 92 
2f624     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
2f628     46 92 47 92 
2f62c     59 92 59 92 
2f630     59 92 59 92 
2f634     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
2f638     6C 92 6C 92 
2f63c     6B 92 7E 92 
2f640     7E 92 7E 92 
2f644     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
2f648     92 92 91 92 
2f64c     91 92 90 92 
2f650     91 92 A4 92 
2f654     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
2f658     A3 92 B6 92 
2f65c     B6 92 B7 92 
2f660     B7 92 B6 92 
2f664     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
2f668     CA 92 C9 92 
2f66c     CA 92 DC 92 
2f670     DC 92 DC 92 
2f674     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
2f678     EF 92 EF 92 
2f67c     EF 92 EF 92 
2f680     01 93 01 93 
2f684     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
2f688     15 93 14 93 
2f68c     14 93 14 93 
2f690     14 93 27 93 
2f694     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
2f698     27 93 39 93 
2f69c     3A 93 39 93 
2f6a0     39 93 39 93 
2f6a4     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
2f6a8     4B 93 4C 93 
2f6ac     5F 93 5F 93 
2f6b0     5F 93 5E 93 
2f6b4     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
2f6b8     5F 93 84 93 
2f6bc     4C 93 96 93 
2f6c0     5F 93 AE 94 
2f6c4     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
2f6c8     7B C1 00 00 
2f6cc     00 00 00 00 
2f6d0     00 00 00 00 
2f6d4     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f6d8     00 00 00 00 | 	byte	$00, $00, $00, $00
2f6dc     00 00 00 00 | zero long 0
2f6e0     7A D7 00 80 
2f6e4     87 8A 48 8F 
2f6e8     EC 8C 76 8D 
2f6ec     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
2f6f0     3C 8D 82 8D 
2f6f4     42 8D 88 8D 
2f6f8     8C 8D 8E 8D 
2f6fc     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
2f700     97 8D DE 8D 
2f704     E1 8D F1 8E 
2f708     D8 8C A3 83 
2f70c     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
2f710     65 71 C9 65 
2f714     FC 64 C4 65 
2f718     C1 65 BF 65 
2f71c     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
2f720     B6 65 B4 65 
2f724     B2 65 AE 65 
2f728     AC 65 ED 65 
2f72c     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
2f730     5E 65 25 66 
2f734     FA 62 23 6B 
2f738     B5 6C 61 0A 
2f73c     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
2f740     5D 90 BE 8D 
2f744     47 8E C3 8D 
2f748     09 8E C9 8D 
2f74c     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
2f750     15 8E 19 8E 
2f754     1B 8E 62 8E 
2f758     64 8E 68 8E 
2f75c     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
2f760     B5 8E 4C 90 
2f764     FA 84 3C 9D 
2f768     98 13 79 6D 
2f76c     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
2f770     D9 66 50 66 
2f774     D4 66 4B 66 
2f778     8C 66 46 66 
2f77c     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
2f780     81 66 3A 66 
2f784     7C 66 36 66 
2f788     76 66 30 66 
2f78c     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
2f790     6B 66 88 72 
2f794     BF 37 E7 B7 
2f798     75 83 8B 8E 
2f79c     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
2f7a0     94 8E 96 8E 
2f7a4     DD 8E 9C 8E 
2f7a8     E2 8E A2 8E 
2f7ac     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
2f7b0     EE 8E AE 8E 
2f7b4     38 8F B5 8E 
2f7b8     3F 8F FD 8E 
2f7bc     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
2f7c0     A5 87 1E E3 
2f7c4     6D 5D FA 71 
2f7c8     41 64 25 67 
2f7cc     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
2f7d0     D9 66 1A 67 
2f7d4     18 67 15 67 
2f7d8     12 67 0F 67 
2f7dc     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
2f7e0     07 67 C0 66 
2f7e4     01 67 BC 66 
2f7e8     B8 66 DE 64 
2f7ec     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
2f7f0     43 E5 1F 8B 
2f7f4     14 8A F1 90 
2f7f8     1C 8F 63 8F 
2f7fc     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
2f800     29 8F 6E 8F 
2f804     72 8F 75 8F 
2f808     34 8F BE 8F 
2f80c     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
2f810     84 8F 87 8F 
2f814     CC 8F 56 90 
2f818     67 91 49 80 
2f81c     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
2f820     46 77 A6 66 
2f824     E8 66 B0 67 
2f828     AD 67 ED 67 
2f82c     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
2f830     A2 67 E3 67 
2f834     9D 67 9A 67 
2f838     98 67 94 67 
2f83c     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
2f840     49 67 CD 67 
2f844     28 65 5F 6E 
2f848     82 67 3A 01 
2f84c     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
2f850     C2 91 A9 8F 
2f854     EF 8F AE 8F 
2f858     F4 8F B5 8F 
2f85c     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
2f860     01 90 03 90 
2f864     07 90 09 90 
2f868     0C 90 53 90 
2f86c     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
2f870     18 90 44 93 
2f874     85 84 D6 9D 
2f878     87 1F 2F 75 
2f87c     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
2f880     C4 68 F6 67 
2f884     BE 68 F1 67 
2f888     76 68 2E 68 
2f88c     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
2f890     27 68 24 68 
2f894     64 68 1E 68 
2f898     5F 68 19 68 
2f89c     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
2f8a0     DC 68 56 72 
2f8a4     7E 36 C2 B8 
2f8a8     D7 84 73 90 
2f8ac     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
2f8b0     7B 90 7F 90 
2f8b4     82 90 84 90 
2f8b8     CB 90 8B 90 
2f8bc     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
2f8c0     D7 90 96 90 
2f8c4     20 91 59 90 
2f8c8     25 91 A2 90 
2f8cc     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
2f8d0     D0 89 40 EE 
2f8d4     12 64 C4 71 
2f8d8     29 66 0C 69 
2f8dc     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
2f8e0     C0 68 02 69 
2f8e4     FE 68 FB 68 
2f8e8     F9 68 F6 68 
2f8ec     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
2f8f0     EE 68 A8 68 
2f8f4     2C 69 5F 68 
2f8f8     E2 68 81 66 
2f8fc     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
2f900     1E EB A6 8A 
2f904     73 8B 5E 93 
2f908     7B 90 48 91 
2f90c     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
2f910     0D 91 11 91 
2f914     14 91 16 91 
2f918     5C 91 1C 91 
2f91c     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
2f920     68 91 AF 91 
2f924     2A 91 B5 91 
2f928     75 91 1A 94 
2f92c     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
2f930     70 0E CB 6C 
2f934     5D 6E C4 67 
2f938     99 69 54 69 
2f93c     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
2f940     D2 69 49 69 
2f944     89 69 86 69 
2f948     40 69 C4 69 
2f94c     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
2f950     35 69 76 69 
2f954     58 67 EB 6D 
2f958     E9 6D 89 0F 
2f95c     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
2f960     33 94 94 91 
2f964     D9 91 56 91 
2f968     E0 91 9F 91 
2f96c     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
2f970     EC 91 EE 91 
2f974     F1 91 F4 91 
2f978     F7 91 3D 92 
2f97c     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
2f980     46 92 21 94 
2f984     11 89 A4 9D 
2f988     FD 0E 8F 6C 
2f98c     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
2f990     28 6A E1 69 
2f994     65 6A 1F 6A 
2f998     5F 6A 1A 6A 
2f99c     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
2f9a0     54 6A 0F 6A 
2f9a4     4F 6A 09 6A 
2f9a8     06 6A 03 6A 
2f9ac     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
2f9b0     23 68 69 77 
2f9b4     3A 4D 38 CA 
2f9b8     38 86 4E 91 
2f9bc     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
2f9c0     64 92 24 92 
2f9c4     6A 92 2A 92 
2f9c8     70 92 30 92 
2f9cc     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
2f9d0     7B 92 7E 92 
2f9d4     C5 92 84 92 
2f9d8     CB 92 8A 92 
2f9dc     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
2f9e0     4D 8D F9 E2 
2f9e4     97 59 FE 74 
2f9e8     DB 68 6D 6A 
2f9ec     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
2f9f0     A8 6A A5 6A 
2f9f4     A3 6A 9F 6A 
2f9f8     9D 6A 9B 6A 
2f9fc     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
2fa00     D6 6A 8F 6A 
2fa04     CF 6A 46 6A 
2fa08     CA 6A E1 67 
2fa0c     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
2fa10     D3 F7 15 92 
2fa14     90 8C BF 94 
2fa18     A6 92 EB 92 
2fa1c     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
2fa20     B1 92 F7 92 
2fa24     FA 92 FD 92 
2fa28     00 93 02 93 
2fa2c     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
2fa30     4F 93 52 93 
2fa34     54 93 22 94 
2fa38     5A 93 8F 88 
2fa3c     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
2fa40     1C 77 07 6C 
2fa44     E8 69 7A 6B 
2fa48     34 6B 75 6B 
2fa4c     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
2fa50     29 6B 26 6B 
2fa54     24 6B 21 6B 
2fa58     1D 6B 5E 6B 
2fa5c     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
2fa60     12 6B 52 6B 
2fa64     34 69 34 6E 
2fa68     BA 73 A4 24 
2fa6c     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
2fa70     7A 94 B3 93 
2fa74     72 93 31 93 
2fa78     78 93 7A 93 
2fa7c     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
2fa80     83 93 86 93 
2fa84     89 93 D0 93 
2fa88     D2 93 D5 93 
2fa8c     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
2fa90     DD 93 40 96 
2fa94     30 8B 99 9C 
2fa98     52 10 94 71 
2fa9c     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
2faa0     46 6C 79 6B 
2faa4     40 6C B7 6B 
2faa8     F7 6B B1 6B 
2faac     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
2fab0     EC 6B A5 6B 
2fab4     A2 6B 9F 6B 
2fab8     9D 6B 9A 6B 
2fabc     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
2fac0     C8 6A E4 76 
2fac4     20 4B F9 CE 
2fac8     2E 8A 1A 92 
2facc     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
2fad0     FB 93 BA 93 
2fad4     01 94 03 94 
2fad8     4A 94 09 94 
2fadc     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
2fae0     55 94 14 94 
2fae4     9E 94 1A 94 
2fae8     61 94 20 94 
2faec     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
2faf0     3E 87 E5 CD 
2faf4     5F 50 6C 78 
2faf8     B5 6A 04 6C 
2fafc     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
2fb00     83 6C 7F 6C 
2fb04     7C 6C 36 6C 
2fb08     76 6C 74 6C 
2fb0c     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
2fb10     6B 6C 25 6C 
2fb14     66 6C 1F 6C 
2fb18     1D 6C 41 6A 
2fb1c     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
2fb20     BA FA FC 94 
2fb24     5B 8D 97 96 
2fb28     3B 94 C5 94 
2fb2c     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
2fb30     89 94 8C 94 
2fb34     8F 94 92 94 
2fb38     94 94 DB 94 
2fb3c     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
2fb40     E4 94 E7 94 
2fb44     2D 95 74 95 
2fb48     C8 96 15 89 
2fb4c     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
2fb50     CB 75 31 6F 
2fb54     7E 6B 10 6D 
2fb58     C9 6C 0A 6D 
2fb5c     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
2fb60     BD 6C FF 6C 
2fb64     FB 6C F9 6C 
2fb68     B2 6C F3 6C 
2fb6c     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
2fb70     A7 6C E8 6C 
2fb74     0D 6B 85 6F 
2fb78     C7 74 10 28 
2fb7c     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
2fb80     96 96 47 95 
2fb84     06 95 0A 95 
2fb88     0C 95 0F 95 
2fb8c     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
2fb90     17 95 5E 95 
2fb94     61 95 63 95 
2fb98     22 95 AC 95 
2fb9c     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
2fba0     72 95 17 98 
2fba4     59 8E 01 96 
2fba8     CF FC 5A 68 
2fbac     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
2fbb0     96 6D 50 6D 
2fbb4     D5 6D 4A 6D 
2fbb8     8C 6D 89 6D 
2fbbc     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
2fbc0     80 6D 3A 6D 
2fbc4     7A 6D 77 6D 
2fbc8     75 6D 71 6D 
2fbcc     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
2fbd0     18 6C BC 78 
2fbd4     9A 4F 7E CF 
2fbd8     1F 89 F1 93 
2fbdc     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
2fbe0     D2 95 4E 95 
2fbe4     D7 95 53 95 
2fbe8     DD 95 E0 95 
2fbec     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
2fbf0     A5 95 EB 95 
2fbf4     EE 95 F0 95 
2fbf8     37 96 B3 95 
2fbfc     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
2fc00     1A 98 D5 8D 
2fc04     C5 9F CD 0F 
2fc08     0F 71 F3 73 
2fc0c     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
2fc10     D9 6D 5E 6E 
2fc14     D3 6D 58 6E 
2fc18     12 6E 0F 6E 
2fc1c     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
2fc20     49 6E BF 6D 
2fc24     87 6E 76 6D 
2fc28     81 6E 11 6B 
2fc2c     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
2fc30     3F 09 44 95 
2fc34     E5 8D 3F 99 
2fc38     D4 95 A2 96 
2fc3c     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
2fc40     23 96 69 96 
2fc44     6B 96 6E 96 
2fc48     71 96 74 96 
2fc4c     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
2fc50     BF 96 3C 96 
2fc54     C6 96 C8 96 
2fc58     A3 98 51 8D 
2fc5c     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
2fc60     CF 75 29 73 
2fc64     90 6C EC 6E 
2fc68     62 6E E7 6E 
2fc6c     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
2fc70     9A 6E 98 6E 
2fc74     95 6E 91 6E 
2fc78     8E 6E CF 6E 
2fc7c     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
2fc80     40 6E C3 6E 
2fc84     E8 6C 45 6F 
2fc88     A5 7B C9 35 
2fc8c     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
2fc90     2D 98 23 97 
2fc94     E1 96 A0 96 
2fc98     A4 96 EA 96 
2fc9c     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
2fca0     AF 96 F4 96 
2fca4     F8 96 3E 97 
2fca8     FD 96 43 97 
2fcac     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
2fcb0     08 97 6B 99 
2fcb4     D6 92 88 91 
2fcb8     D8 EE 84 66 
2fcbc     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
2fcc0     2E 6F E7 6E 
2fcc4     6C 6F 24 6F 
2fcc8     21 6F 1F 6F 
2fccc     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
2fcd0     17 6F 13 6F 
2fcd4     54 6F 0E 6F 
2fcd8     0B 6F 4B 6F 
2fcdc     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
2fce0     27 6D 1C 7B 
2fce4     19 59 9F DB 
2fce8     66 8E BC 94 
2fcec     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
2fcf0     67 97 26 97 
2fcf4     6D 97 2B 97 
2fcf8     72 97 32 97 
2fcfc     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
2fd00     C1 97 7F 97 
2fd04     C6 97 85 97 
2fd08     CB 97 CE 97 
2fd0c     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
2fd10     EC 8A C4 C6 
2fd14     68 4C F4 7D 
2fd18     63 6E E8 6E 
2fd1c     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
2fd20     ED 6F A7 6F 
2fd24     E7 6F A0 6F 
2fd28     E1 6F 9B 6F 
2fd2c     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
2fd30     D5 6F 8F 6F 
2fd34     CE 6F 45 6F 
2fd38     86 6F 68 6D 
2fd3c     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
2fd40     C0 13 AD A2 
2fd44     A7 8E 79 99 
2fd48     E6 97 E8 97 
2fd4c     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
2fd50     F1 97 F3 97 
2fd54     F6 97 F9 97 
2fd58     FB 97 FE 97 
2fd5c     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
2fd60     4A 98 0A 98 
2fd64     93 98 0F 98 
2fd68     7F 9B BF 8C 
2fd6c     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
2fd70     91 7B 62 73 
2fd74     1A 6E B9 70 
2fd78     EB 6F B3 70 
2fd7c     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
2fd80     25 70 20 70 
2fd84     1E 70 1B 70 
2fd88     18 70 15 70 
2fd8c     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
2fd90     0D 70 09 70 
2fd94     07 70 03 70 
2fd98     01 70 FD 6F 
2fd9c     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
2fda0     F6 6F F2 6F 
2fda4     EF 6F EC 6F 
2fda8     2C 70 E6 6F 
2fdac     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
2fdb0     DD 6F 97 6F 
2fdb4     D7 6F 84 6E 
2fdb8     8F 6F 3F 7D 
2fdbc     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
2fdbe     00 00 00 00 | zero1 long 0
2fdc2     FF FF FF FF 
2fdc6     FF FF       | atarist_spl file "atarist.spl" '512
2fdc8     00 00 00 00 
2fdcc     00 00 00 00 
2fdd0     00 00       | 	byte	$00[10]
2fdd2     17 7F F2 7F 
2fdd6     B2 7F 72 7F 
2fdda     33 7F F4 7E 
2fdde     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
2fde2     36 7E F5 7D 
2fde6     E9 51 F2 0D 
2fdea     8E 00 F3 FD 
2fdee     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
2fdf2     57 FD 58 FD 
2fdf6     5B FD 5C FD 
2fdfa     5C FD 60 7D 
2fdfe     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
2fe02     D6 7C 98 7C 
2fe06     59 7C 1A 7C 
2fe0a     DC 7B 9E 7B 
2fe0e     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
2fe12     F3 05 00 FD 
2fe16     41 FB EA FA 
2fe1a     D9 FA DB FA 
2fe1e     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
2fe22     E4 FA 9B 36 
2fe26     F8 7A C0 7A 
2fe2a     84 7A 45 7A 
2fe2e     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
2fe32     8E 79 51 79 
2fe36     15 79 D7 78 
2fe3a     3C 1F EB FF 
2fe3e     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
2fe42     6D F8 65 F8 
2fe46     68 F8 6D F8 
2fe4a     70 F8 74 F8 
2fe4e     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
2fe52     AB 60 79 60 
2fe56     4B 60 1A 60 
2fe5a     E9 5F B9 5F 
2fe5e     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
2fe62     FB 59 B2 0B 
2fe66     92 FA 3A F7 
2fe6a     96 F6 79 F6 
2fe6e     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
2fe72     82 F6 86 F6 
2fe76     8C F6 DB 5D 
2fe7a     F1 5E C1 5E 
2fe7e     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
2fe82     34 5E 04 5E 
2fe86     D6 5D A6 5D 
2fe8a     78 5D D4 3E 
2fe8e     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
2fe92     27 F5 BA F4 
2fe96     AB F4 AD F4 
2fe9a     B2 F4 B8 F4 
2fe9e     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
2fea2     26 5D 2B 5D 
2fea6     FC 5C CD 5C 
2feaa     9F 5C 70 5C 
2feae     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
2feb2     E5 5B B8 5B 
2feb6     DB 24 A7 FC 
2feba     D1 F4 4D F3 
2febe     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
2fec2     04 F3 0B F3 
2fec6     11 F3 16 F3 
2feca     DE 18 98 5B 
2fece     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
2fed2     4E 4A 29 48 
2fed6     A0 47 6A 47 
2feda     43 47 20 47 
2fede     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
2fee2     E2 F6 98 F2 
2fee6     C5 F1 A3 F1 
2feea     A3 F1 A8 F1 
2feee     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
2fef2     BF F1 00 3D 
2fef6     EF 46 CD 46 
2fefa     AA 46 86 46 
2fefe     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
2ff02     1C 46 F9 45 
2ff06     D7 45 EE 43 
2ff0a     DE 02 E8 F3 
2ff0e     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
2ff12     61 F0 65 F0 
2ff16     6D F0 74 F0 
2ff1a     7C F0 84 F0 
2ff1e     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
2ff22     8E 45 6D 45 
2ff26     49 45 27 45 
2ff2a     05 45 E1 44 
2ff2e     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
2ff32     F1 2F A9 FB 
2ff36     8B F1 9B EF 
2ff3a     40 EF 36 EF 
2ff3e     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
2ff42     4D EF 56 EF 
2ff46     5E EF 7B 44 
2ff4a     8C 44 69 44 
2ff4e     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
2ff52     03 44 E1 43 
2ff56     C0 43 F5 37 
2ff5a     69 33 0F 11 
2ff5e     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
2ff62     66 EE 37 EE 
2ff66     38 EE 40 EE 
2ff6a     48 EE 51 EE 
2ff6e     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
2ff72     7D 32 6A 32 
2ff76     51 32 37 32 
2ff7a     1F 32 05 32 
2ff7e     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
2ff82     B9 31 A1 31 
2ff86     F1 04 F4 F1 
2ff8a     50 EE A0 ED 
2ff8e     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
2ff92     93 ED 9A ED 
2ff96     A4 ED AD ED 
2ff9a     F4 27 C1 31 
2ff9e     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
2ffa2     78 31 5F 31 
2ffa6     46 31 2E 31 
2ffaa     15 31 FC 30 
2ffae     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
2ffb2     C4 EF 4A ED 
2ffb6     DC EC CB EC 
2ffba     D2 EC DA EC 
2ffbe     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
2ffc2     F9 EC 64 2F 
2ffc6     0A 31 F1 30 
2ffca     D9 30 C0 30 
2ffce     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
2ffd2     78 30 5F 30 
2ffd6     46 30 38 23 
2ffda     A6 F6 19 EE 
2ffde     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
2ffe2     20 EC 28 EC 
2ffe6     32 EC 3C EC 
2ffea     47 EC 51 EC 
2ffee     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
2fff2     A3 22 93 22 
2fff6     7F 22 6E 22 
2fffa     5D 22 4C 22 
2fffe     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
30002     77 09 76 F1 
30006     CC EC F0 EB 
3000a     CD EB CE EB 
3000e     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
30012     ED EB F5 EB 
30016     3E F6 6B 22 
3001a     5F 22 4E 22 
3001e     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
30022     1B 22 0B 22 
30026     FA 21 E9 21 
3002a     D8 21 4D FF 
3002e     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
30032     92 EB 7B EB 
30036     82 EB 8C EB 
3003a     97 EB A1 EB 
3003e     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
30042     15 22 04 22 
30046     F3 21 E3 21 
3004a     D2 21 C0 21 
3004e     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
30052     8E 21 7D 21 
30056     9A F8 A4 ED 
3005a     8E EB 2F EB 
3005e     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
30062     37 EB 42 EB 
30066     4C EB 57 EB 
3006a     B2 17 22 19 
3006e     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
30072     FD 18 EF 18 
30076     E3 18 D6 18 
3007a     CA 18 BD 18 
3007e     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
30082     60 EC 35 EB 
30086     01 EB 01 EB 
3008a     0C EB 16 EB 
3008e     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
30092     34 EB D0 18 
30096     00 19 F4 18 
3009a     E8 18 DA 18 
3009e     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
300a2     B6 18 A9 18 
300a6     9D 18 91 05 
300aa     F0 EF CA EB 
300ae     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
300b2     E8 EA F2 EA 
300b6     FE EA 07 EB 
300ba     12 EB C2 EF 
300be     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
300c2     D9 18 CD 18 
300c6     C0 18 B3 18 
300ca     A7 18 9B 18 
300ce     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
300d2     B8 FC 30 EE 
300d6     61 EB DC EA 
300da     CD EA D2 EA 
300de     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
300e2     F3 EA FE EA 
300e6     D2 09 D1 18 
300ea     C3 18 17 18 
300ee     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
300f2     66 11 52 11 
300f6     49 11 41 11 
300fa     38 11 E0 F4 
300fe     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
30102     C9 EA C5 EA 
30106     CF EA DB EA 
3010a     E6 EA EF EA 
3010e     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
30112     89 11 80 11 
30116     78 11 6E 11 
3011a     67 11 5D 11 
3011e     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
30122     43 11 32 0D 
30126     9C F1 07 EC 
3012a     F8 EA CD EA 
3012e     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
30132     E4 EA ED EA 
30136     F8 EA 02 EB 
3013a     55 11 91 11 
3013e     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
30142     75 11 6E 11 
30146     64 11 5E 11 
3014a     54 11 4A 11 
3014e     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
30152     A8 EB F1 EA 
30156     D9 EA DC EA 
3015a     E8 EA F1 EA 
3015e     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
30162     A6 EB 9E 11 
30166     A0 11 96 11 
3016a     8D 11 85 11 
3016e     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
30172     6A 11 CA 0D 
30176     36 0B 57 F8 
3017a     6C ED 57 EB 
3017e     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
30182     F4 EA FF EA 
30186     09 EB 15 EB 
3018a     1E EB 1A FD 
3018e     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
30192     ED 0A E8 0A 
30196     E2 0A DC 0A 
3019a     D6 0A D1 0A 
3019e     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
301a2     F8 F3 BC EC 
301a6     57 EB 1E EB 
301aa     18 EB 24 EB 
301ae     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
301b2     42 EB 4D EB 
301b6     08 09 20 0B 
301ba     1A 0B 14 0B 
301be     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
301c2     04 0B FE 0A 
301c6     F9 0A F2 0A 
301ca     84 08 3A F1 
301ce     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
301d2     42 EB 42 EB 
301d6     4E EB 57 EB 
301da     62 EB 6B EB 
301de     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
301e2     48 0B 43 0B 
301e6     3C 0B 36 0B 
301ea     31 0B 2C 0B 
301ee     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
301f2     1B 0B 5C 00 
301f6     6A EF 1B EC 
301fa     81 EB 6A EB 
301fe     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
30202     85 EB 8E EB 
30206     99 EB A3 EB 
3020a     DD 05 E5 05 
3020e     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
30212     DB 05 D8 05 
30216     D5 05 D1 05 
3021a     D0 05 CB 05 
3021e     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
30222     0C EC BB EB 
30226     B3 EB BB EB 
3022a     C5 EB D0 EB 
3022e     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
30232     E4 F7 2C 06 
30236     28 06 24 06 
3023a     22 06 1F 06 
3023e     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
30242     16 06 14 06 
30246     0F 06 D0 F3 
3024a     65 ED 2D EC 
3024e     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
30252     01 EC 0A EC 
30256     14 EC 1E EC 
3025a     29 EC FB 03 
3025e     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
30262     63 06 60 06 
30266     5E 06 59 06 
3026a     58 06 54 06 
3026e     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
30272     69 F1 21 ED 
30276     55 EC 33 EC 
3027a     36 EC 40 EC 
3027e     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
30282     5C EC 68 EC 
30286     92 02 D9 02 
3028a     D7 02 D7 02 
3028e     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
30292     D1 02 D1 02 
30296     CE 02 CD 02 
3029a     5D FC 80 EF 
3029e     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
302a2     83 EC 8A EC 
302a6     93 EC 9C EC 
302aa     A5 EC B1 EC 
302ae     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
302b2     2B 03 2A 03 
302b6     29 03 26 03 
302ba     25 03 24 03 
302be     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
302c2     1F 03 70 F7 
302c6     D0 EE 27 ED 
302ca     DB EC D4 EC 
302ce     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
302d2     F0 EC FA EC 
302d6     02 ED F9 F4 
302da     7B 03 7C 03 
302de     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
302e2     75 03 73 03 
302e6     72 03 70 03 
302ea     6D 03 6C 03 
302ee     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
302f2     54 ED 22 ED 
302f6     22 ED 2C ED 
302fa     35 ED 3F ED 
302fe     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
30302     14 01 C3 03 
30306     C1 03 C0 03 
3030a     5F 01 A5 00 
3030e     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
30312     7B 00 7C 00 
30316     20 00 85 F1 
3031a     2A EE 89 ED 
3031e     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
30322     80 ED 87 ED 
30326     90 ED 9A ED 
3032a     A3 ED 73 00 
3032e     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
30332     D0 00 D0 00 
30336     D0 00 D0 00 
3033a     D0 00 CF 00 
3033e     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
30342     80 F0 3D EE 
30346     D5 ED C7 ED 
3034a     CD ED D6 ED 
3034e     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
30352     F2 ED FA ED 
30356     1D 01 29 01 
3035a     27 01 27 01 
3035e     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
30362     25 01 26 01 
30366     26 01 23 01 
3036a     D0 F7 EC EF 
3036e     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
30372     1C EE 24 EE 
30376     2D EE 37 EE 
3037a     40 EE 47 EE 
3037e     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
30382     7D 01 7B 01 
30386     7A 01 7A 01 
3038a     79 01 78 01 
3038e     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
30392     84 FE DE F3 
30396     6C EF 93 EE 
3039a     72 EE 72 EE 
3039e     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
303a2     8B EE 95 EE 
303a6     9E EE 15 FC 
303aa     67 FE 67 FE 
303ae     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
303b2     6B FE 6B FE 
303b6     6D FE 6D FE 
303ba     6D FE 6F FE 
303be     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
303c2     DF EE CC EE 
303c6     CF EE D9 EE 
303ca     E1 EE EA EE 
303ce     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
303d2     5A FE C4 FE 
303d6     C3 FE C5 FE 
303da     C6 FE C6 FE 
303de     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
303e2     C8 FE C7 FE 
303e6     DA FB 85 F1 
303ea     8D EF 31 EF 
303ee     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
303f2     34 EF 3E EF 
303f6     46 EF 4F EF 
303fa     57 EF 0D FF 
303fe     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
30402     1F FF 1F FF 
30406     21 FF 21 FF 
3040a     21 FF 21 FF 
3040e     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
30412     15 F1 BE EF 
30416     84 EF 7E EF 
3041a     88 EF 8F EF 
3041e     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
30422     A9 EF 06 F2 
30426     A6 FC AB FC 
3042a     AD FC AE FC 
3042e     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
30432     B2 FC B4 FC 
30436     B6 FC B7 FC 
3043a     8B F4 BD F0 
3043e     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
30442     E4 EF EE EF 
30446     F6 EF FD EF 
3044a     04 F0 0E F0 
3044e     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
30452     0B FD 0D FD 
30456     0F FD 11 FD 
3045a     11 FD 13 FD 
3045e     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
30462     17 FD 64 F3 
30466     CD F0 52 F0 
3046a     41 F0 45 F0 
3046e     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
30472     5B F0 64 F0 
30476     6D F0 FB FC 
3047a     65 FD 68 FD 
3047e     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
30482     6C FD 6D FD 
30486     6F FD 70 FD 
3048a     72 FD B3 FB 
3048e     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
30492     A4 F0 99 F0 
30496     A0 F0 A8 F0 
3049a     AE F0 B9 F0 
3049e     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
304a2     CB FB DD FB 
304a6     DE FB E0 FB 
304aa     E3 FB E3 FB 
304ae     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
304b2     E9 FB EC FB 
304b6     62 F7 27 F2 
304ba     2A F1 FF F0 
304be     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
304c2     0C F1 13 F1 
304c6     1B F1 23 F1 
304ca     33 F2 3C FC 
304ce     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
304d2     42 FC 45 FC 
304d6     47 FC 48 FC 
304da     4A FC 4C FC 
304de     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
304e2     20 F2 77 F1 
304e6     5C F1 5F F1 
304ea     64 F1 6C F1 
304ee     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
304f2     83 F1 DC F8 
304f6     9A FC 9A FC 
304fa     9B FC 9E FC 
304fe     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
30502     A3 FC A4 FC 
30506     A6 FC A9 FC 
3050a     90 F4 33 F2 
3050e     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
30512     BA F1 BF F1 
30516     C7 F1 CE F1 
3051a     D6 F1 DC F1 
3051e     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
30522     F3 FC F5 FC 
30526     FE FB 79 FB 
3052a     62 FB 5F FB 
3052e     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
30532     6F FA AF F3 
30536     53 F2 12 F2 
3053a     0F F2 15 F2 
3053e     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
30542     2A F2 32 F2 
30546     38 F2 9A FB 
3054a     AF FB B1 FB 
3054e     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
30552     B7 FB B8 FB 
30556     BA FB BC FB 
3055a     C1 FB 3B F8 
3055e     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
30562     6E F2 6C F2 
30566     74 F2 7A F2 
3056a     81 F2 87 F2 
3056e     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
30572     06 FC 09 FC 
30576     0C FC 0E FC 
3057a     0F FC 12 FC 
3057e     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
30582     17 FC 1A FC 
30586     B2 F6 7B F3 
3058a     DD F2 C5 F2 
3058e     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
30592     D4 F2 DB F2 
30596     E0 F2 E8 F2 
3059a     28 F8 60 FC 
3059e     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
305a2     64 FC 66 FC 
305a6     68 FC 6A FC 
305aa     6D FC 52 FC 
305ae     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
305b2     78 F3 24 F3 
305b6     1A F3 1E F3 
305ba     24 F3 2A F3 
305be     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
305c2     3D F3 80 FA 
305c6     0C FB 0F FB 
305ca     10 FB 14 FB 
305ce     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
305d2     1B FB 1D FB 
305d6     1F FB 92 FA 
305da     DE F4 AE F3 
305de     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
305e2     79 F3 7E F3 
305e6     84 F3 8C F3 
305ea     92 F3 97 F3 
305ee     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
305f2     67 FB 69 FB 
305f6     6B FB 6F FB 
305fa     71 FB 72 FB 
305fe     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
30602     E3 F8 BA F4 
30606     EE F3 CC F3 
3060a     CA F3 CF F3 
3060e     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
30612     E2 F3 E8 F3 
30616     ED F3 B7 FB 
3061a     BC FB BE FB 
3061e     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
30622     C4 FB C6 FB 
30626     C8 FB C9 FB 
3062a     CC FB 8F F7 
3062e     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
30632     1E F4 1E F4 
30636     24 F4 2A F4 
3063a     30 F4 38 F4 
3063e     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
30642     AD FA B1 FA 
30646     B4 FA B6 FA 
3064a     BA FA BB FA 
3064e     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
30652     C2 FA C6 FA 
30656     55 F6 C6 F4 
3065a     7D F4 72 F4 
3065e     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
30662     83 F4 89 F4 
30666     8F F4 94 F4 
3066a     66 FA 03 FB 
3066e     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
30672     0A FB 0E FB 
30676     10 FB 11 FB 
3067a     16 FB 18 FB 
3067e     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
30682     F9 F4 CA F4 
30686     C5 F4 CB F4 
3068a     D1 F4 D7 F4 
3068e     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
30692     E8 F4 3F FB 
30696     56 FB 58 FB 
3069a     5A FB 5E FB 
3069e     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
306a2     64 FB 64 FB 
306a6     69 FB 99 F9 
306aa     E9 F5 33 F5 
306ae     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
306b2     1D F5 22 F5 
306b6     27 F5 2E F5 
306ba     32 F5 37 F5 
306be     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
306c2     BC FA BC FA 
306c6     C1 FA C2 FA 
306ca     C4 FA C8 FA 
306ce     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
306d2     F9 F7 DB F5 
306d6     78 F5 69 F5 
306da     6A F5 70 F5 
306de     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
306e2     7F F5 85 F5 
306e6     6E F7 06 FB 
306ea     0A FB 0B FB 
306ee     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
306f2     14 FB 15 FB 
306f6     18 FB 1B FB 
306fa     1D FB 70 F7 
306fe     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
30702     B6 F5 BB F5 
30706     C0 F5 C6 F5 
3070a     CA F5 CF F5 
3070e     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
30712     54 FB 56 FB 
30716     5A FB 5B FB 
3071a     5E FB 5F FB 
3071e     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
30722     67 FB 52 FB 
30726     29 F7 33 F6 
3072a     06 F6 02 F6 
3072e     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
30732     10 F6 16 F6 
30736     1A F6 1F F6 
3073a     81 FB 9F FB 
3073e     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
30742     51 FB F2 FA 
30746     E3 FA E3 FA 
3074a     E5 FA E9 FA 
3074e     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
30752     64 F6 4D F6 
30756     4D F6 53 F6 
3075a     57 F6 5C F6 
3075e     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
30762     6A F6 19 FB 
30766     1E FB 22 FB 
3076a     23 FB 24 FB 
3076e     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
30772     2C FB 2E FB 
30776     32 FB F0 F8 
3077a     01 F7 A5 F6 
3077e     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
30782     9F F6 A3 F6 
30786     A6 F6 AC F6 
3078a     B0 F6 EB F7 
3078e     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
30792     68 FB 6C FB 
30796     6E FB 71 FB 
3079a     72 FB 74 FB 
3079e     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
307a2     71 F8 21 F7 
307a6     E5 F6 DD F6 
307aa     E1 F6 E6 F6 
307ae     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
307b2     F5 F6 F7 F6 
307b6     F7 FA AB FB 
307ba     AD FB AF FB 
307be     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
307c2     B6 FB B9 FB 
307c6     BB FB BC FB 
307ca     21 FB 07 F8 
307ce     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
307d2     22 F7 26 F7 
307d6     2B F7 2E F7 
307da     34 F7 38 F7 
307de     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
307e2     13 FB 16 FB 
307e6     17 FB 1B FB 
307ea     1E FB 20 FB 
307ee     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
307f2     26 FB 77 FA 
307f6     F3 F7 7C F7 
307fa     67 F7 6A F7 
307fe     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
30802     74 F7 7A F7 
30806     7E F7 82 F7 
3080a     53 FB 5A FB 
3080e     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
30812     5F FB 63 FB 
30816     65 FB 67 FB 
3081a     69 FB 6A FB 
3081e     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
30822     B5 F7 A9 F7 
30826     AD F7 B0 F7 
3082a     B5 F7 B8 F7 
3082e     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
30832     6E F8 99 FB 
30836     9C FB 9D FB 
3083a     9F FB A4 FB 
3083e     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
30842     A9 FB AB FB 
30846     AD FB 46 F9 
3084a     26 F8 F0 F7 
3084e     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
30852     F4 F7 F8 F7 
30856     FB F7 FF F7 
3085a     03 F8 65 FA 
3085e     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
30862     2B FB 2F FB 
30866     30 FB 32 FB 
3086a     34 FB 38 FB 
3086e     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
30872     E9 F8 4A F8 
30876     2E F8 2C F8 
3087a     2F F8 36 F8 
3087e     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
30882     41 F8 44 F8 
30886     4A FB 67 FB 
3088a     68 FB 6B FB 
3088e     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
30892     73 FB 74 FB 
30896     78 FB 7A FB 
3089a     14 FB E7 F8 
3089e     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
308a2     6D F8 70 F8 
308a6     73 F8 78 F8 
308aa     7C F8 80 F8 
308ae     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
308b2     A6 FB A7 FB 
308b6     A9 FB AC FB 
308ba     AF FB B1 FB 
308be     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
308c2     B7 FB 73 FA 
308c6     F8 F8 B4 F8 
308ca     A9 F8 AB F8 
308ce     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
308d2     B4 F8 B8 F8 
308d6     BB F8 FA F8 
308da     64 FB 65 FB 
308de     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
308e2     6D FB 6F FB 
308e6     70 FB 74 FB 
308ea     77 FB 77 FB 
308ee     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
308f2     E9 F8 E4 F8 
308f6     E8 F8 EB F8 
308fa     EE F8 F2 F8 
308fe     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
30902     B5 FA 9F FB 
30906     A1 FB A4 FB 
3090a     A5 FB A9 FB 
3090e     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
30912     AE FB B1 FB 
30916     B2 FB C7 F9 
3091a     39 F9 22 F9 
3091e     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
30922     26 F9 2A F9 
30926     2E F9 32 F9 
3092a     33 F9 BA FB 
3092e     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
30932     DE FB E1 FB 
30936     E2 FB E4 FB 
3093a     E5 FB E7 FB 
3093e     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
30942     C5 F9 67 F9 
30946     57 F9 56 F9 
3094a     5B F9 5F F9 
3094e     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
30952     68 F9 6C F9 
30956     0B FC 11 FC 
3095a     14 FC 15 FC 
3095e     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
30962     B5 FB B5 FB 
30966     B6 FB B8 FB 
3096a     E9 FA C8 F9 
3096e     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
30972     90 F9 94 F9 
30976     95 F9 99 F9 
3097a     9D F9 9F F9 
3097e     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
30982     DE FB DF FB 
30986     E2 FB E4 FB 
3098a     E6 FB E8 FB 
3098e     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
30992     EF FB AC FA 
30996     E9 F9 C7 F9 
3099a     C3 F9 C8 F9 
3099e     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
309a2     D0 F9 D4 F9 
309a6     D6 F9 0E FB 
309aa     11 FC 13 FC 
309ae     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
309b2     19 FC 1B FC 
309b6     1D FC 1E FC 
309ba     21 FC 22 FC 
309be     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
309c2     F7 F9 F7 F9 
309c6     FB F9 FE F9 
309ca     00 FA 03 FA 
309ce     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
309d2     1B FC 45 FC 
309d6     46 FC 48 FC 
309da     4A FC 4B FC 
309de     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
309e2     52 FC 54 FC 
309e6     F3 FB 82 FA 
309ea     35 FA 28 FA 
309ee     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
309f2     31 FA 32 FA 
309f6     37 FA 37 FA 
309fa     3C FA 00 FC 
309fe     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
30a02     09 FC 0B FC 
30a06     0F FC 12 FC 
30a0a     12 FC 15 FC 
30a0e     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
30a12     8D FA 60 FA 
30a16     5B FA 5C FA 
30a1a     60 FA 61 FA 
30a1e     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
30a22     6C FA 6D FA 
30a26     37 FC 3A FC 
30a2a     3B FC 3D FC 
30a2e     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
30a32     43 FC 44 FC 
30a36     45 FC 47 FC 
30a3a     51 FB AB FA 
30a3e     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
30a42     8E FA 91 FA 
30a46     93 FA 95 FA 
30a4a     98 FA 9B FA 
30a4e     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
30a52     68 FC 6A FC 
30a56     6C FC 6E FC 
30a5a     70 FC 72 FC 
30a5e     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
30a62     76 FC 3B FB 
30a66     D0 FA BB FA 
30a6a     B9 FA BD FA 
30a6e     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
30a72     C4 FA C6 FA 
30a76     CA FA 13 FC 
30a7a     3A FC 3A FC 
30a7e     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
30a82     41 FC 43 FC 
30a86     44 FC 47 FC 
30a8a     48 FC 3C FC 
30a8e     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
30a92     E6 FA E8 FA 
30a96     EB FA EE FA 
30a9a     F0 FA F2 FA 
30a9e     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
30aa2     61 FC 66 FC 
30aa6     68 FC 6B FC 
30aaa     6C FC 6E FC 
30aae     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
30ab2     73 FC 75 FC 
30ab6     13 FC 3F FB 
30aba     17 FB 12 FB 
30abe     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
30ac2     1A FB 1D FB 
30ac6     1F FB 20 FB 
30aca     23 FB 92 FC 
30ace     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
30ad2     96 FC 97 FC 
30ad6     9A FC 9C FC 
30ada     9E FC 9F FC 
30ade     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
30ae2     5A FB 41 FB 
30ae6     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
30aea     00 00 00 00 | zero2 long 0
30aee     01 00 00 00 
30af2     00 00 00 00 
30af6     00 00 00 00 
30afa     00 00 00 00 | mouse  file "mouse2.def"
30afe     00 00 00 00 
30b02     00 00 00 00 
30b06     00 00 00 00 
30b0a     00 00 00 00 | 	byte	$00[16]
30b0e     01 01 00 00 
30b12     00 00 00 00 
30b16     00 00 00 00 
30b1a     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30b1e     00 00 00 00 
30b22     00 00 00 00 
30b26     00 00 00 00 
30b2a     00 00 00 00 | 	byte	$00[16]
30b2e     01 0D 01 00 
30b32     00 00 00 00 
30b36     00 00 00 00 
30b3a     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30b3e     00 00 00 00 
30b42     00 00 00 00 
30b46     00 00 00 00 
30b4a     00 00 00 00 | 	byte	$00[16]
30b4e     01 0D 0D 01 
30b52     00 00 00 00 
30b56     00 00 00 00 
30b5a     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30b5e     00 00 00 00 
30b62     00 00 00 00 
30b66     00 00 00 00 
30b6a     00 00 00 00 | 	byte	$00[16]
30b6e     01 0D 0D 0D 
30b72     01 00 00 00 
30b76     00 00 00 00 
30b7a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30b7e     00 00 00 00 
30b82     00 00 00 00 
30b86     00 00 00 00 
30b8a     00 00 00 00 | 	byte	$00[16]
30b8e     01 0D 0D 0D 
30b92     0D 01 00 00 
30b96     00 00 00 00 
30b9a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30b9e     00 00 00 00 
30ba2     00 00 00 00 
30ba6     00 00 00 00 
30baa     00 00 00 00 | 	byte	$00[16]
30bae     01 0D 0D 0D 
30bb2     0D 0D 01 00 
30bb6     00 00 00 00 
30bba     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
30bbe     00 00 00 00 
30bc2     00 00 00 00 
30bc6     00 00 00 00 
30bca     00 00 00 00 | 	byte	$00[16]
30bce     01 0D 0D 0D 
30bd2     0D 0D 0D 01 
30bd6     00 00 00 00 
30bda     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
30bde     00 00 00 00 
30be2     00 00 00 00 
30be6     00 00 00 00 
30bea     00 00 00 00 | 	byte	$00[16]
30bee     01 0D 0D 0D 
30bf2     0D 0D 0D 0C 
30bf6     01 00 00 00 
30bfa     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
30bfe     00 00 00 00 
30c02     00 00 00 00 
30c06     00 00 00 00 
30c0a     00 00 00 00 | 	byte	$00[16]
30c0e     01 0D 0D 0D 
30c12     0D 0D 0D 0D 
30c16     0C 01 00 00 
30c1a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
30c1e     00 00 00 00 
30c22     00 00 00 00 
30c26     00 00 00 00 
30c2a     00 00 00 00 | 	byte	$00[16]
30c2e     01 0D 0D 0D 
30c32     0D 0D 0D 0D 
30c36     0D 0C 01 00 
30c3a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
30c3e     00 00 00 00 
30c42     00 00 00 00 
30c46     00 00 00 00 
30c4a     00 00 00 00 | 	byte	$00[16]
30c4e     01 0D 0D 0D 
30c52     0D 0D 0D 0D 
30c56     0D 0D 0B 01 
30c5a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
30c5e     00 00 00 00 
30c62     00 00 00 00 
30c66     00 00 00 00 
30c6a     00 00 00 00 | 	byte	$00[16]
30c6e     01 0D 0D 0D 
30c72     0C 0D 0D 03 
30c76     01 01 01 01 
30c7a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
30c7e     00 00 00 00 
30c82     00 00 00 00 
30c86     00 00 00 00 
30c8a     00 00 00 00 | 	byte	$00[16]
30c8e     01 0D 0D 0C 
30c92     01 09 0D 03 
30c96     00 00 00 00 
30c9a     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
30c9e     00 00 00 00 
30ca2     00 00 00 00 
30ca6     00 00 00 00 
30caa     00 00 00 00 | 	byte	$00[16]
30cae     01 0D 0C 01 
30cb2     00 01 0D 0B 
30cb6     01 00 00 00 
30cba     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
30cbe     00 00 00 00 
30cc2     00 00 00 00 
30cc6     00 00 00 00 
30cca     00 00 00 00 | 	byte	$00[16]
30cce     01 0C 01 00 
30cd2     00 01 0A 0D 
30cd6     01 00 00 00 
30cda     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
30cde     00 00 00 00 
30ce2     00 00 00 00 
30ce6     00 00 00 00 
30cea     00 00 00 00 | 	byte	$00[16]
30cee     01 01 00 00 
30cf2     00 00 01 0D 
30cf6     0B 01 00 00 
30cfa     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
30cfe     00 00 00 00 
30d02     00 00 00 00 
30d06     00 00 00 00 
30d0a     00 00 00 00 
30d0e     00 00 00 00 
30d12     00 00       | 	byte	$00[22]
30d14     01 0B 0D 01 
30d18     00 00 00 00 
30d1c     00 00 00 00 
30d20     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30d24     00 00 00 00 
30d28     00 00 00 00 
30d2c     00 00 00 00 
30d30     00 00 00 00 
30d34     00          | 	byte	$00[17]
30d35     01 01 00 00 
30d39     00 00 00 00 
30d3d     00 00 00 00 
30d41     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30d45     00 00 00 00 
      ...             
30ee9     00 00 00 00 
30eed     00          | 	byte	$00[425]
30eee     73 32 00 04 
30ef2     00 00 10 00 
30ef6     00 00 00 00 
30efa     00 00 00 00 | atari2 file "atari2.s2"
30efe     43 87 43 87 
30f02     43 87 44 87 
30f06     43 87 44 87 
30f0a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
30f0e     43 87 43 87 
30f12     43 87 44 87 
30f16     43 87 43 87 
30f1a     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
30f1e     44 87 43 87 
30f22     44 87 43 87 
30f26     43 87 43 87 
30f2a     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
30f2e     43 87 43 87 
30f32     44 87 43 87 
30f36     44 87 44 87 
30f3a     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
30f3e     43 87 43 87 
30f42     44 87 43 87 
30f46     43 87 42 87 
30f4a     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
30f4e     43 87 43 87 
30f52     43 87 43 87 
30f56     44 87 43 87 
30f5a     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
30f5e     44 87 44 87 
30f62     43 87 44 87 
30f66     43 87 44 87 
30f6a     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
30f6e     44 87 43 87 
30f72     44 87 44 87 
30f76     43 87 43 87 
30f7a     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
30f7e     43 87 44 87 
30f82     44 87 43 87 
30f86     43 87 44 87 
30f8a     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
30f8e     43 87 43 87 
30f92     43 87 43 87 
30f96     43 87 43 87 
30f9a     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
30f9e     42 87 43 87 
30fa2     44 87 42 87 
30fa6     43 87 43 87 
30faa     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
30fae     43 87 44 87 
30fb2     44 87 43 87 
30fb6     43 87 43 87 
30fba     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
30fbe     43 87 5C 87 
30fc2     EE 86 AC 87 
30fc6     4C 7C A3 78 
30fca     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
30fce     BC 78 BB 78 
30fd2     BD 78 BC 78 
30fd6     BB 78 BD 78 
30fda     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
30fde     BB 78 BB 78 
30fe2     BC 78 BC 78 
30fe6     BC 78 BB 78 
30fea     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
30fee     BC 78 BC 78 
30ff2     BC 78 BC 78 
30ff6     BC 78 BC 78 
30ffa     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
30ffe     BB 78 BC 78 
31002     A0 78 4C 7C 
31006     11 7A 29 89 
3100a     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
3100e     44 87 43 87 
31012     44 87 43 87 
31016     43 87 42 87 
3101a     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
3101e     43 87 43 87 
31022     44 87 ED 85 
31026     71 85 52 79 
3102a     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
3102e     BC 78 BC 78 
31032     BC 78 BC 78 
31036     BC 78 BC 78 
3103a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3103e     BC 78 BC 78 
31042     BC 78 A0 78 
31046     CF 7A B9 81 
3104a     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
3104e     44 87 43 87 
31052     43 87 44 87 
31056     43 87 44 87 
3105a     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
3105e     43 87 43 87 
31062     43 87 43 87 
31066     44 87 43 87 
3106a     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
3106e     43 87 43 87 
31072     44 87 43 87 
31076     44 87 43 87 
3107a     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
3107e     44 87 43 87 
31082     43 87 43 87 
31086     5A 87 39 81 
3108a     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
3108e     A5 78 BC 78 
31092     BB 78 BC 78 
31096     BB 78 BC 78 
3109a     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
3109e     BC 78 BC 78 
310a2     BC 78 BC 78 
310a6     BC 78 8F 79 
310aa     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
310ae     09 85 47 87 
310b2     43 87 43 87 
310b6     42 87 42 87 
310ba     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
310be     43 87 43 87 
310c2     43 87 43 87 
310c6     43 87 44 87 
310ca     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
310ce     43 87 43 87 
310d2     44 87 43 87 
310d6     42 87 43 87 
310da     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
310de     44 87 43 87 
310e2     43 87 43 87 
310e6     44 87 44 87 
310ea     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
310ee     94 78 55 7A 
310f2     B9 78 BC 78 
310f6     BC 78 BC 78 
310fa     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
310fe     BC 78 BB 78 
31102     BC 78 BC 78 
31106     BC 78 BC 78 
3110a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3110e     BB 78 BC 78 
31112     BC 78 BC 78 
31116     BB 78 BC 78 
3111a     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3111e     BC 78 BC 78 
31122     BD 78 BC 78 
31126     BC 78 BB 78 
3112a     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
3112e     94 78 B3 84 
31132     36 84 4A 87 
31136     43 87 43 87 
3113a     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
3113e     43 87 44 87 
31142     43 87 43 87 
31146     43 87 43 87 
3114a     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3114e     43 87 44 87 
31152     43 87 44 87 
31156     43 87 43 87 
3115a     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
3115e     43 87 43 87 
31162     43 87 45 87 
31166     43 87 43 87 
3116a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
3116e     43 87 44 87 
31172     44 87 44 87 
31176     43 87 43 87 
3117a     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
3117e     43 87 42 87 
31182     43 87 43 87 
31186     44 87 43 87 
3118a     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
3118e     54 87 3C 82 
31192     36 83 52 79 
31196     C6 78 BC 78 
3119a     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
3119e     BB 78 BB 78 
311a2     BC 78 BC 78 
311a6     BC 78 BC 78 
311aa     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
311ae     BD 78 ED 78 
311b2     1B 79 F4 83 
311b6     4D 83 4E 87 
311ba     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
311be     44 87 43 87 
311c2     42 87 44 87 
311c6     43 87 42 87 
311ca     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
311ce     43 87 54 87 
311d2     26 82 B3 84 
311d6     D6 77 BB 78 
311da     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
311de     BC 78 BB 78 
311e2     BB 78 BB 78 
311e6     BB 78 BB 78 
311ea     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
311ee     BC 78 BC 78 
311f2     26 79 18 75 
311f6     36 83 1F 84 
311fa     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
311fe     43 87 43 87 
31202     43 87 43 87 
31206     43 87 44 87 
3120a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3120e     43 87 44 87 
31212     44 87 43 87 
31216     43 87 43 87 
3121a     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
3121e     43 87 43 87 
31222     43 87 43 87 
31226     44 87 44 87 
3122a     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
3122e     44 87 43 87 
31232     43 87 43 87 
31236     43 87 44 87 
3123a     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3123e     44 87 44 87 
31242     44 87 43 87 
31246     44 87 43 87 
3124a     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3124e     43 87 43 87 
31252     43 87 44 87 
31256     44 87 43 87 
3125a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
3125e     43 87 43 87 
31262     43 87 43 87 
31266     43 87 44 87 
3126a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3126e     43 87 44 87 
31272     43 87 44 87 
31276     19 87 7D 86 
3127a     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
3127e     B1 78 BC 78 
31282     BC 78 BC 78 
31286     BC 78 BC 78 
3128a     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3128e     BC 78 BC 78 
31292     BD 78 BC 78 
31296     B7 78 3B 7B 
3129a     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
3129e     96 86 44 87 
312a2     43 87 43 87 
312a6     43 87 43 87 
312aa     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
312ae     44 87 44 87 
312b2     43 87 44 87 
312b6     43 87 44 87 
312ba     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
312be     43 87 44 87 
312c2     43 87 44 87 
312c6     43 87 44 87 
312ca     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
312ce     43 87 44 87 
312d2     43 87 43 87 
312d6     44 87 43 87 
312da     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
312de     44 87 44 87 
312e2     43 87 43 87 
312e6     43 87 44 87 
312ea     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
312ee     43 87 43 87 
312f2     43 87 43 87 
312f6     44 87 44 87 
312fa     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
312fe     36 83 CF 7A 
31302     AB 78 BB 78 
31306     BC 78 BC 78 
3130a     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
3130e     BB 78 BC 78 
31312     BC 78 BC 78 
31316     BC 78 BC 78 
3131a     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3131e     BC 78 BC 78 
31322     BC 78 BB 78 
31326     BC 78 BC 78 
3132a     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3132e     BB 78 BC 78 
31332     BB 78 BC 78 
31336     BC 78 BD 78 
3133a     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
3133e     BC 78 BC 78 
31342     BC 78 BC 78 
31346     BC 78 BD 78 
3134a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
3134e     BC 78 BB 78 
31352     BC 78 BB 78 
31356     BB 78 BC 78 
3135a     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
3135e     BC 78 BC 78 
31362     BC 78 BC 78 
31366     BC 78 BB 78 
3136a     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
3136e     BC 78 BC 78 
31372     BC 78 BD 78 
31376     BB 78 BC 78 
3137a     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
3137e     BC 78 BC 78 
31382     BC 78 BB 78 
31386     BC 78 BB 78 
3138a     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
3138e     BB 78 BC 78 
31392     BC 78 BC 78 
31396     BC 78 BB 78 
3139a     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3139e     BC 78 BC 78 
313a2     BC 78 BB 78 
313a6     BC 78 BB 78 
313aa     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
313ae     BC 78 BC 78 
313b2     BC 78 BC 78 
313b6     BB 78 BC 78 
313ba     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
313be     BC 78 9F 78 
313c2     52 79 B3 84 
313c6     2F 86 60 87 
313ca     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
313ce     44 87 43 87 
313d2     43 87 43 87 
313d6     43 87 43 87 
313da     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
313de     43 87 43 87 
313e2     43 87 44 87 
313e6     43 87 43 87 
313ea     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
313ee     43 87 43 87 
313f2     43 87 43 87 
313f6     43 87 44 87 
313fa     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
313fe     44 87 44 87 
31402     5E 87 BC 80 
31406     FB 80 94 78 
3140a     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
3140e     BD 78 BC 78 
31412     BB 78 BC 78 
31416     BB 78 BB 78 
3141a     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
3141e     BC 78 BB 78 
31422     BB 78 6B 79 
31426     D6 77 AC 87 
3142a     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
3142e     43 87 44 87 
31432     43 87 43 87 
31436     44 87 43 87 
3143a     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
3143e     43 87 44 87 
31442     43 87 5C 87 
31446     E7 80 00 80 
3144a     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
3144e     BC 78 BD 78 
31452     BC 78 BC 78 
31456     BC 78 BB 78 
3145a     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3145e     BC 78 BC 78 
31462     BB 78 BC 78 
31466     BB 78 BC 78 
3146a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3146e     BB 78 BC 78 
31472     BC 78 BC 78 
31476     BC 78 BC 78 
3147a     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3147e     BC 78 BC 78 
31482     BC 78 BC 78 
31486     A0 78 8D 7B 
3148a     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
3148e     60 87 43 87 
31492     44 87 44 87 
31496     43 87 43 87 
3149a     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
3149e     44 87 43 87 
314a2     43 87 43 87 
314a6     44 87 73 86 
314aa     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
314ae     51 7B B6 78 
314b2     BC 78 BD 78 
314b6     BC 78 BC 78 
314ba     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
314be     BB 78 BC 78 
314c2     BD 78 BB 78 
314c6     BC 78 BB 78 
314ca     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
314ce     BC 78 BC 78 
314d2     BC 78 BC 78 
314d6     BB 78 BC 78 
314da     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
314de     BC 78 BB 78 
314e2     BB 78 BC 78 
314e6     BC 78 BB 78 
314ea     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
314ee     22 8C AF 84 
314f2     48 87 43 87 
314f6     44 87 43 87 
314fa     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
314fe     43 87 42 87 
31502     43 87 43 87 
31506     44 87 43 87 
3150a     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3150e     43 87 43 87 
31512     44 87 44 87 
31516     43 87 43 87 
3151a     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3151e     43 87 43 87 
31522     43 87 43 87 
31526     44 87 43 87 
3152a     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
3152e     9F 8B D6 77 
31532     16 7C B3 78 
31536     BC 78 BB 78 
3153a     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
3153e     BB 78 BC 78 
31542     BB 78 BC 78 
31546     BC 78 BC 78 
3154a     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3154e     BC 78 BB 78 
31552     BB 78 BC 78 
31556     BB 78 BC 78 
3155a     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
3155e     BB 78 BB 78 
31562     BC 78 BC 78 
31566     BC 78 BB 78 
3156a     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
3156e     BC 78 BC 78 
31572     BC 78 BD 78 
31576     BB 78 BC 78 
3157a     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
3157e     BC 78 BC 78 
31582     BC 78 BB 78 
31586     BC 78 BC 78 
3158a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3158e     A8 78 54 7E 
31592     F4 83 17 82 
31596     50 87 43 87 
3159a     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
3159e     44 87 43 87 
315a2     44 87 43 87 
315a6     43 87 44 87 
315aa     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
315ae     43 87 28 87 
315b2     20 85 CF 7A 
315b6     70 7D AD 78 
315ba     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
315be     BB 78 BC 78 
315c2     BC 78 BC 78 
315c6     BB 78 BB 78 
315ca     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
315ce     BB 78 B2 78 
315d2     9A 7C CF 7A 
315d6     4A 87 0D 87 
315da     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
315de     43 87 44 87 
315e2     43 87 44 87 
315e6     43 87 43 87 
315ea     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
315ee     44 87 43 87 
315f2     28 87 51 85 
315f6     11 7A 1E 7D 
315fa     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
315fe     BC 78 BB 78 
31602     BC 78 BC 78 
31606     BC 78 BC 78 
3160a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3160e     BB 78 BC 78 
31612     BB 78 BC 78 
31616     BC 78 BC 78 
3161a     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3161e     BB 78 BC 78 
31622     BC 78 BC 78 
31626     BD 78 BB 78 
3162a     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
3162e     BC 78 BB 78 
31632     BC 78 BC 78 
31636     BC 78 BB 78 
3163a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3163e     BC 78 BC 78 
31642     BC 78 BC 78 
31646     BB 78 BC 78 
3164a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3164e     BC 78 BD 78 
31652     BC 78 BC 78 
31656     BC 78 BB 78 
3165a     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3165e     BC 78 BB 78 
31662     BB 78 BC 78 
31666     BC 78 BB 78 
3166a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3166e     BB 78 BB 78 
31672     BB 78 BC 78 
31676     B6 78 48 7D 
3167a     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
3167e     56 87 43 87 
31682     42 87 44 87 
31686     44 87 43 87 
3168a     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
3168e     43 87 44 87 
31692     43 87 44 87 
31696     4C 87 7E 83 
3169a     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
3169e     F7 78 BC 78 
316a2     BC 78 BB 78 
316a6     BB 78 BC 78 
316aa     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
316ae     BC 78 BB 78 
316b2     BC 78 BC 78 
316b6     BB 78 BC 78 
316ba     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
316be     BB 78 BC 78 
316c2     BC 78 BC 78 
316c6     BC 78 BB 78 
316ca     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
316ce     BC 78 BC 78 
316d2     BC 78 BC 78 
316d6     BC 78 BB 78 
316da     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
316de     BC 78 BB 78 
316e2     BB 78 BC 78 
316e6     BC 78 BB 78 
316ea     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
316ee     BC 78 BC 78 
316f2     BB 78 BC 78 
316f6     BC 78 BC 78 
316fa     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
316fe     73 32 00 04 
31702     00 00 10 00 
31706     00 00 00 00 
3170a     00 00 00 00 | atari12 file "atari12.s2"
3170e     00 6D 00 6D 
31712     00 6D 00 6D 
31716     00 6D 00 6D 
3171a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3171e     00 6D 00 6D 
31722     00 6D 00 6D 
31726     00 6D 00 6D 
3172a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3172e     00 6D 00 6D 
31732     00 6D 00 6D 
31736     00 6D 00 6D 
3173a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3173e     00 6D 00 6D 
31742     00 6D 00 6D 
31746     00 6D 00 6D 
3174a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3174e     00 6D 00 6D 
31752     00 6D 00 6D 
31756     00 6D 00 6D 
3175a     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
3175e     00 6C 00 6C 
31762     00 6C 00 6C 
31766     00 6C 00 6C 
3176a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3176e     00 6C 00 6C 
31772     00 6C 00 6C 
31776     00 6C 00 6C 
3177a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3177e     00 6C 00 6C 
31782     00 6C 00 6C 
31786     00 6C 00 6C 
3178a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3178e     00 6C 00 6C 
31792     00 6C 00 6C 
31796     00 6C 00 6C 
3179a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3179e     00 6C 00 6C 
317a2     00 6C 00 6C 
317a6     00 6C 00 6C 
317aa     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
317ae     00 6C 00 6C 
317b2     00 6C 00 6C 
317b6     00 6C 00 6C 
317ba     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
317be     00 6C 00 6C 
317c2     00 6C 00 6C 
317c6     00 6C 00 6C 
317ca     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
317ce     00 6C 00 6C 
317d2     00 6C 00 6C 
317d6     00 6C 00 6C 
317da     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
317de     00 6C 00 6C 
317e2     00 6C 00 6C 
317e6     00 6C 00 6C 
317ea     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
317ee     00 6C 00 6C 
317f2     00 6C 00 6C 
317f6     00 6C 00 6C 
317fa     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
317fe     00 6C 00 6C 
31802     00 6C 00 6C 
31806     00 6C 00 6C 
3180a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3180e     00 6C 00 6B 
31812     00 6B 00 6B 
31816     00 6B 00 6B 
3181a     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3181e     00 6B 00 6B 
31822     00 6B 00 6B 
31826     00 6B 00 6B 
3182a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3182e     00 6B 00 6B 
31832     00 6B 00 6B 
31836     00 6B 00 6B 
3183a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3183e     00 6B 00 6B 
31842     00 6B 00 6B 
31846     00 6B 00 6B 
3184a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3184e     00 6B 00 6B 
31852     00 6B 00 6B 
31856     00 6B 00 6B 
3185a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3185e     00 6B 00 6B 
31862     00 6B 00 6B 
31866     00 6B 00 6B 
3186a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3186e     00 6B 00 6B 
31872     00 6B 00 6B 
31876     00 6B 00 6B 
3187a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3187e     00 6B 00 6B 
31882     00 6B 00 6B 
31886     00 6B 00 6B 
3188a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3188e     00 6B 00 6B 
31892     00 6B 00 6B 
31896     00 6B 00 6B 
3189a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3189e     00 6B 00 6B 
318a2     00 6B 00 6B 
318a6     00 6A 00 9D 
318aa     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
318ae     00 9E 00 9E 
318b2     00 9E 00 9E 
318b6     00 9E 00 9E 
318ba     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
318be     00 9E 00 9E 
318c2     00 9E 00 9E 
318c6     00 9E 00 9E 
318ca     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
318ce     00 9E 00 9E 
318d2     00 9E 00 9E 
318d6     00 9E 00 9E 
318da     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
318de     00 9E 00 9E 
318e2     00 9E 00 9E 
318e6     00 9E 00 9E 
318ea     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
318ee     00 9E 00 9E 
318f2     00 9E 00 9E 
318f6     00 9E 00 9E 
318fa     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
318fe     00 9E 00 9E 
31902     00 9E 00 9E 
31906     00 9E 00 9E 
3190a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3190e     00 9E 00 9E 
31912     00 9E 00 9E 
31916     00 9E 00 9E 
3191a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3191e     00 9E 00 9E 
31922     00 9E 00 9E 
31926     00 9E 00 9E 
3192a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3192e     00 9E 00 9E 
31932     00 9E 00 9E 
31936     00 9E 00 9E 
3193a     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
3193e     00 9F 00 9F 
31942     00 9F 00 9F 
31946     00 9F 00 9F 
3194a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3194e     00 9F 00 9F 
31952     00 9F 00 9F 
31956     00 9F 00 9F 
3195a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3195e     00 9F 00 9F 
31962     00 9F 00 9F 
31966     00 9F 00 9F 
3196a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3196e     00 9F 00 9F 
31972     00 9F 00 9F 
31976     00 9F 00 9F 
3197a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3197e     00 9F 00 9F 
31982     00 9F 00 9F 
31986     00 9F 00 9F 
3198a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3198e     00 9F 00 9F 
31992     00 9F 00 9F 
31996     00 9F 00 9F 
3199a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3199e     00 9F 00 9F 
319a2     00 9F 00 9F 
319a6     00 9F 00 9F 
319aa     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
319ae     00 9F 00 9F 
319b2     00 9F 00 9F 
319b6     00 9F 00 9F 
319ba     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
319be     00 9F 00 9F 
319c2     00 9F 00 9F 
319c6     00 9F 00 9F 
319ca     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
319ce     00 9F 00 9F 
319d2     00 9F 00 9F 
319d6     00 9F 00 9F 
319da     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
319de     00 9F 00 9F 
319e2     00 9F 00 9F 
319e6     00 9F 00 9F 
319ea     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
319ee     00 9F 00 9F 
319f2     00 9F 00 9F 
319f6     00 9F 00 9F 
319fa     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
319fe     00 9F 00 9F 
31a02     00 9F 00 A0 
31a06     00 A0 00 A0 
31a0a     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31a0e     00 A0 00 A0 
31a12     00 A0 00 A0 
31a16     00 A0 00 A0 
31a1a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31a1e     00 A0 00 A0 
31a22     00 A0 00 A0 
31a26     00 A0 00 A0 
31a2a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31a2e     00 A0 00 A0 
31a32     00 A0 00 A0 
31a36     00 A0 00 A0 
31a3a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31a3e     00 A0 00 A0 
31a42     00 A0 00 A0 
31a46     00 A0 00 A0 
31a4a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31a4e     00 A0 00 A0 
31a52     00 A0 00 A0 
31a56     00 A0 00 A0 
31a5a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31a5e     00 A0 00 A0 
31a62     00 A0 00 A0 
31a66     00 A0 00 A0 
31a6a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31a6e     00 A0 00 A0 
31a72     00 A0 00 A0 
31a76     00 A0 00 A0 
31a7a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31a7e     00 A0 00 A0 
31a82     00 A0 00 A0 
31a86     00 A0 00 A0 
31a8a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31a8e     00 A0 00 A0 
31a92     00 A0 00 A0 
31a96     00 A0 00 A0 
31a9a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31a9e     00 A0 00 A0 
31aa2     00 A0 00 A0 
31aa6     00 A0 00 A0 
31aaa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31aae     00 A0 00 A0 
31ab2     00 A0 00 A0 
31ab6     00 A0 00 A0 
31aba     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31abe     00 A0 00 A0 
31ac2     00 A0 00 A0 
31ac6     00 A0 00 A0 
31aca     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
31ace     00 6D 00 6D 
31ad2     00 6D 00 6D 
31ad6     00 6D 00 6D 
31ada     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31ade     00 6D 00 6D 
31ae2     00 6D 00 6D 
31ae6     00 6D 00 6D 
31aea     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31aee     00 6D 00 6D 
31af2     00 6D 00 6D 
31af6     00 6D 00 6D 
31afa     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31afe     00 6D 00 6D 
31b02     00 6D 00 6D 
31b06     00 6D 00 6D 
31b0a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31b0e     00 6D 00 6D 
31b12     00 6D 00 6D 
31b16     00 6D 00 6D 
31b1a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31b1e     00 6D 00 6D 
31b22     00 6D 00 6D 
31b26     00 6D 00 6D 
31b2a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31b2e     00 6D 00 6D 
31b32     00 6D 00 6D 
31b36     00 6D 00 6D 
31b3a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31b3e     00 6D 00 6D 
31b42     00 6D 00 6D 
31b46     00 6D 00 6D 
31b4a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31b4e     00 6D 00 6D 
31b52     00 A0 00 A0 
31b56     00 A0 00 A0 
31b5a     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31b5e     00 A0 00 A0 
31b62     00 A0 00 A0 
31b66     00 A0 00 A0 
31b6a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31b6e     00 A0 00 A0 
31b72     00 A0 00 A0 
31b76     00 A0 00 A0 
31b7a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31b7e     00 A0 00 A0 
31b82     00 A0 00 A0 
31b86     00 A0 00 A0 
31b8a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31b8e     00 A0 00 A0 
31b92     00 A0 00 A0 
31b96     00 A0 00 A0 
31b9a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31b9e     00 A0 00 A0 
31ba2     00 A0 00 A0 
31ba6     00 A0 00 A0 
31baa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31bae     00 A0 00 A0 
31bb2     00 A0 00 A0 
31bb6     00 A0 00 A0 
31bba     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31bbe     00 A0 00 A0 
31bc2     00 A0 00 A0 
31bc6     00 A0 00 A0 
31bca     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31bce     00 A0 00 A0 
31bd2     00 A0 00 A0 
31bd6     00 A0 00 A0 
31bda     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
31bde     00 6D 00 6D 
31be2     00 6D 00 6D 
31be6     00 6D 00 6D 
31bea     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31bee     00 6D 00 6D 
31bf2     00 6D 00 6D 
31bf6     00 6D 00 6D 
31bfa     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31bfe     00 6D 00 6D 
31c02     00 6D 00 6D 
31c06     00 6D 00 6D 
31c0a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31c0e     00 6D 00 6D 
31c12     00 6D 00 6D 
31c16     00 6D 00 6D 
31c1a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31c1e     00 6D 00 6D 
31c22     00 6D 00 6D 
31c26     00 6D 00 6D 
31c2a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31c2e     00 6D 00 6D 
31c32     00 6D 00 6D 
31c36     00 6D 00 6D 
31c3a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31c3e     00 6D 00 6D 
31c42     00 6D 00 6D 
31c46     00 6D 00 6D 
31c4a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31c4e     00 6D 00 6D 
31c52     00 6D 00 6D 
31c56     00 6D 00 6D 
31c5a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31c5e     00 6D 00 6D 
31c62     00 6C 00 A0 
31c66     00 9F 00 A0 
31c6a     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
31c6e     00 A0 00 A0 
31c72     00 A0 00 A0 
31c76     00 A0 00 A0 
31c7a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31c7e     00 A0 00 A0 
31c82     00 A0 00 A0 
31c86     00 A0 00 A0 
31c8a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31c8e     00 A0 00 A0 
31c92     00 A0 00 A0 
31c96     00 A0 00 A0 
31c9a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31c9e     00 A0 00 A0 
31ca2     00 A0 00 A0 
31ca6     00 A0 00 A0 
31caa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31cae     00 A0 00 A0 
31cb2     00 A0 00 A0 
31cb6     00 A0 00 A0 
31cba     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31cbe     00 A0 00 A0 
31cc2     00 A0 00 A0 
31cc6     00 A0 00 A0 
31cca     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31cce     00 A0 00 A0 
31cd2     00 A0 00 A0 
31cd6     00 A0 00 A0 
31cda     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31cde     00 A0 00 A0 
31ce2     00 A0 00 A0 
31ce6     00 A0 00 A0 
31cea     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31cee     00 A0 00 A0 
31cf2     00 A0 00 A0 
31cf6     00 A0 00 A0 
31cfa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31cfe     00 A0 00 A0 
31d02     00 A0 00 A0 
31d06     00 A0 00 A0 
31d0a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31d0e     00 A0 00 A0 
31d12     00 A0 00 A0 
31d16     00 A0 00 A0 
31d1a     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
31d1e     00 A1 00 A1 
31d22     00 A1 00 A1 
31d26     00 A1 00 A1 
31d2a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
31d2e     00 A1 00 A1 
31d32     00 A1 00 A1 
31d36     00 A1 00 A1 
31d3a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
31d3e     00 A1 00 A1 
31d42     00 A1 00 A1 
31d46     00 A1 00 A1 
31d4a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
31d4e     00 A1 00 A1 
31d52     00 A1 00 A1 
31d56     00 A1 00 A1 
31d5a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
31d5e     00 A1 00 A1 
31d62     00 A1 00 A1 
31d66     00 A1 00 A1 
31d6a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
31d6e     00 A1 00 A1 
31d72     00 A1 00 A1 
31d76     00 6E 00 6E 
31d7a     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
31d7e     00 6E 00 6E 
31d82     00 6E 00 6E 
31d86     00 6E 00 6E 
31d8a     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
31d8e     00 6E 00 6E 
31d92     00 6E 00 6E 
31d96     00 6E 00 6E 
31d9a     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
31d9e     00 6E 00 6E 
31da2     00 6E 00 6E 
31da6     00 6E 00 6E 
31daa     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
31dae     00 6E 00 6D 
31db2     00 6D 00 6D 
31db6     00 6D 00 6D 
31dba     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31dbe     00 6D 00 6D 
31dc2     00 6D 00 6D 
31dc6     00 6D 00 6D 
31dca     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31dce     00 6D 00 6D 
31dd2     00 6D 00 6D 
31dd6     00 6D 00 6D 
31dda     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31dde     00 6D 00 6D 
31de2     00 6D 00 6D 
31de6     00 6D 00 6D 
31dea     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31dee     00 6D 00 6D 
31df2     00 6D 00 6D 
31df6     00 6D 00 6D 
31dfa     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31dfe     00 6D 00 6D 
31e02     00 6D 00 6D 
31e06     00 6D 00 6D 
31e0a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31e0e     00 6D 00 6D 
31e12     00 6D 00 6D 
31e16     00 6D 00 6D 
31e1a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31e1e     00 6D 00 6D 
31e22     00 6D 00 6D 
31e26     00 6D 00 6D 
31e2a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31e2e     00 6D 00 6D 
31e32     00 6D 00 6D 
31e36     00 6D 00 6D 
31e3a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31e3e     00 6D 00 6D 
31e42     00 6D 00 6D 
31e46     00 6D 00 6D 
31e4a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31e4e     00 6D 00 6D 
31e52     00 6D 00 6D 
31e56     00 6D 00 6D 
31e5a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31e5e     00 6D 00 6D 
31e62     00 6C 00 6C 
31e66     00 6C 00 6C 
31e6a     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
31e6e     00 6C 00 6C 
31e72     00 6C 00 6C 
31e76     00 6C 00 6C 
31e7a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
31e7e     00 6C 00 6C 
31e82     00 6C 00 6C 
31e86     00 9D 00 9F 
31e8a     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
31e8e     00 9F 00 9F 
31e92     00 9F 00 9F 
31e96     00 A0 00 A0 
31e9a     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31e9e     00 A0 00 A0 
31ea2     00 A0 00 A0 
31ea6     00 A0 00 A0 
31eaa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31eae     00 A0 00 A0 
31eb2     00 A0 00 A0 
31eb6     00 A0 00 A0 
31eba     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31ebe     00 A0 00 A0 
31ec2     00 A0 00 A0 
31ec6     00 A0 00 A0 
31eca     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31ece     00 A0 00 A0 
31ed2     00 A0 00 A0 
31ed6     00 A0 00 A0 
31eda     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31ede     00 A0 00 A0 
31ee2     00 A0 00 A0 
31ee6     00 A0 00 A0 
31eea     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31eee     00 A0 00 A0 
31ef2     00 A0 00 A0 
31ef6     00 A0 00 A0 
31efa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31efe     00 A0 00 A0 
31f02     00 A0 00 A0 
31f06     00 A0 00 A0 
31f0a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31f0e                 | 
31f0e     00 00       |              	org
31f10 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
31f14 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
31f18 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
31f1c 003             | 
31f1c 003 00 30 04 F6 |                 mov     psramaddr,#0
31f20 004             | 
31f20 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
31f24 005 20 00 00 FF 
31f28 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
31f2c 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
31f30 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
31f34 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
31f38 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
31f3c 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
31f40 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
31f44 00d             | 
31f44 00d 20 00 00 FF 
31f48 00e 00 30 04 F1 |                 add 	psramaddr,##16384
31f4c 00f E0 03 00 FF 
31f50 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
31f54 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
31f58 012             | 
31f58 012             |                 
31f58 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
31f5c 013             |     
31f5c 013 01 2C 60 FD |                 cogid 	t11				' get id
31f60 014 00 00 EC FC |                 coginit #0,#0				' start the new program
31f64 015 03 2C 60 FD |                 cogstop t11				' stop the loader
31f68 016             | 
31f68 016 00 00 00 00 | t11 		long 	0
31f6c 017 00 FF 07 00 | mailbox 	long 	$7FF00
31f70 018 00 00 00 00 | psramaddr 	long 	0
31f74 019 00 00 00 00 | pslockval	long 	0
31f78 01a 00 00 00 00 | cmd             long    0
31f7c 01b 00 00 00 00 | buf1            long    0
31f80 01c 00 40 00 00 | buf2            long    16384
31f84 01d 88 1F 03 00 | 	long	@@@_dat_ + 12624
31f88 01e 50 32 20 52 
31f8c 01f 65 74 72 6F 
31f90 020 6D 61 63 68 
31f94 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
31f98 022 42 41 53 49 
31f9c 023 43 20 76 65 
31fa0 024 72 73 69 6F 
31fa4 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
31fa8 026 32 39 00 00 | 	byte	$32, $39, $00, $00
31fac 027             | 	alignl
31fac 027             | _hg010b_spin2_dat_
31fac 027             | 
31fac 027 00 00 00 00 
31fb0 028 00 00 00 00 
31fb4 029 00 00 00 00 
31fb8 02a 00 00 00 00 
31fbc 02b 00 00 00    | vga_font       file "vgafont.def"
31fbf 02b 7E 81 A5 81 
31fc3 02c 81 BD 99 81 
31fc7 02d 81 7E 00 00 
31fcb 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
31fcf 02f 7E FF DB FF 
31fd3 030 FF C3 E7 FF 
31fd7 031 FF 7E 00 00 
31fdb 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
31fdf 033 00 36 7F 7F 
31fe3 034 7F 7F 3E 1C 
31fe7 035 08 00 00 00 
31feb 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
31fef 037 00 08 1C 3E 
31ff3 038 7F 3E 1C 08 
31ff7 039 00 00 00 00 
31ffb 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
31fff 03b 18 3C 3C E7 
32003 03c E7 E7 18 18 
32007 03d 3C 00 00 00 
3200b 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3200f 03f 18 3C 7E FF 
32013 040 FF 7E 18 18 
32017 041 3C 00 00 00 
3201b 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3201f 043 00 00 00 18 
32023 044 3C 3C 18 00 
32027 045 00 00 00 00 
3202b 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
3202f 047 FF FF FF E7 
32033 048 C3 C3 E7 FF 
32037 049 FF FF FF FF 
3203b 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3203f 04b 00 00 3C 66 
32043 04c 42 42 66 3C 
32047 04d 00 00 00 00 
3204b 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
3204f 04f FF FF C3 99 
32053 050 BD BD 99 C3 
32057 051 FF FF FF FF 
3205b 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3205f 053 78 70 58 4C 
32063 054 1E 33 33 33 
32067 055 33 1E 00 00 
3206b 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
3206f 057 3C 66 66 66 
32073 058 66 3C 18 7E 
32077 059 18 18 00 00 
3207b 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
3207f 05b FC CC FC 0C 
32083 05c 0C 0C 0C 0E 
32087 05d 0F 07 00 00 
3208b 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
3208f 05f FE C6 FE C6 
32093 060 C6 C6 C6 E6 
32097 061 E7 67 03 00 
3209b 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
3209f 063 18 18 DB 3C 
320a3 064 E7 3C DB 18 
320a7 065 18 00 00 00 
320ab 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
320af 067 03 07 0F 1F 
320b3 068 7F 1F 0F 07 
320b7 069 03 01 00 00 
320bb 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
320bf 06b 60 70 78 7C 
320c3 06c 7F 7C 78 70 
320c7 06d 60 40 00 00 
320cb 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
320cf 06f 18 3C 7E 18 
320d3 070 18 18 7E 3C 
320d7 071 18 00 00 00 
320db 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
320df 073 66 66 66 66 
320e3 074 66 66 66    | 	byte	$66[7]
320e6 075 00 66 66 00 
320ea 076 00 00 00 00 
320ee 077 00 FE DB DB 
320f2 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
320f6 079 D8 D8 D8 00 
320fa 07a 00 00 00 3E 
320fe 07b 63 06 1C 36 
32102 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
32106 07d 30 63 3E 00 
3210a 07e 00 00 00 00 
3210e 07f 00 00 00 00 
32112 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
32116 081 7F 7F 7F 00 
3211a 082 00 00 00 00 
3211e 083 00 18 3C 7E 
32122 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
32126 085 3C 18 7E 00 
3212a 086 00 00 00 00 
3212e 087 00 18 3C 7E 
32132 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
32136 089 18 18 18 00 
3213a 08a 00 00 00 00 
3213e 08b 00 18 18 18 
32142 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
32146 08d 7E 3C 18 00 
3214a 08e 00 00 00 00 
3214e 08f 00 00 00 18 
32152 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
32156 091 00 00 00 00 
3215a 092 00 00 00 00 
3215e 093 00 00 00    | 	byte	$00[11]
32161 094 0C 06 7F 06 
32165 095 0C 00 00 00 
32169 096 00 00 00 00 
3216d 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32171 098 00 03 03 03 
32175 099 7F 00 00 00 
32179 09a 00 00 00 00 
3217d 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32181 09c 14 36 7F 36 
32185 09d 14 00 00 00 
32189 09e 00 00 00 00 
3218d 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
32191 0a0 1C 1C 3E 3E 
32195 0a1 7F 7F 00 00 
32199 0a2 00 00 00 00 
3219d 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
321a1 0a4 7F 3E 3E 1C 
321a5 0a5 1C 08 00 00 
321a9 0a6 00 00 00 00 
321ad 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
321b1 0a8 00 00 00 00 
321b5 0a9 00 00 00 00 
321b9 0aa 00 00 00 00 
321bd 0ab 00 00       | 	byte	$00[14]
321bf 0ab 18 3C 3C 3C 
321c3 0ac 18 18 18 00 
321c7 0ad 18 18 00 00 
321cb 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
321cf 0af 66 24 00 00 
321d3 0b0 00 00 00 00 
321d7 0b1 00 00 00 00 
321db 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
321df 0b3 00 36 36 7F 
321e3 0b4 36 36 36 7F 
321e7 0b5 36 36 00 00 
321eb 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
321ef 0b7 3E 63 43 03 
321f3 0b8 3E 60 60 61 
321f7 0b9 63 3E 18 18 
321fb 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
321ff 0bb 00 00 43 63 
32203 0bc 30 18 0C 06 
32207 0bd 63 61 00 00 
3220b 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
3220f 0bf 1C 36 36 1C 
32213 0c0 6E 3B 33 33 
32217 0c1 33 6E 00 00 
3221b 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
3221f 0c3 0C 0C 0C 06 
32223 0c4 00 00 00 00 
32227 0c5 00 00 00 00 
3222b 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3222f 0c7 30 18 0C 0C 
32233 0c8 0C 0C 0C 0C 
32237 0c9 18 30 00 00 
3223b 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
3223f 0cb 0C 18 30 30 
32243 0cc 30 30 30 30 
32247 0cd 18 0C 00 00 
3224b 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
3224f 0cf 00 00 00 66 
32253 0d0 3C FF 3C 66 
32257 0d1 00 00 00 00 
3225b 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
3225f 0d3 00 00 00 18 
32263 0d4 18 7E 18 18 
32267 0d5 00 00 00 00 
3226b 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3226f 0d7 00 00 00 00 
32273 0d8 00 00 00 00 | 	byte	$00[8]
32277 0d9 18 18 18 0C 
3227b 0da 00 00 00 00 
3227f 0db 00 00 00 00 
32283 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
32287 0dd 00 00 00 00 
3228b 0de 00 00 00 00 
3228f 0df 00 00 00 00 
32293 0e0 00 00 00 00 | 	byte	$00[16]
32297 0e1 18 18 00 00 
3229b 0e2 00 00 00 00 
3229f 0e3 00 00 40 60 
322a3 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
322a7 0e5 03 01 00 00 
322ab 0e6 00 00 00 00 
322af 0e7 1C 36 63 63 
322b3 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
322b7 0e9 36 1C 00 00 
322bb 0ea 00 00 00 00 
322bf 0eb 18 1C 1E 18 
322c3 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
322c7 0ed 18 7E 00 00 
322cb 0ee 00 00 00 00 
322cf 0ef 3E 63 60 30 
322d3 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
322d7 0f1 63 7F 00 00 
322db 0f2 00 00 00 00 
322df 0f3 3E 63 60 60 
322e3 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
322e7 0f5 63 3E 00 00 
322eb 0f6 00 00 00 00 
322ef 0f7 30 38 3C 36 
322f3 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
322f7 0f9 30 78 00 00 
322fb 0fa 00 00 00 00 
322ff 0fb 7F 03 03 03 
32303 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
32307 0fd 63 3E 00 00 
3230b 0fe 00 00 00 00 
3230f 0ff 1C 06 03 03 
32313 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
32317 101 63 3E 00 00 
3231b 102 00 00 00 00 
3231f 103 7F 63 60 60 
32323 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
32327 105 0C 0C 00 00 
3232b 106 00 00 00 00 
3232f 107 3E 63 63 63 
32333 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
32337 109 63 3E 00 00 
3233b 10a 00 00 00 00 
3233f 10b 3E 63 63 63 
32343 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
32347 10d 30 1E 00 00 
3234b 10e 00 00 00 00 
3234f 10f 00 00 00 18 
32353 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
32357 111 18 18 00 00 
3235b 112 00 00 00 00 
3235f 113 00 00 00 18 
32363 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
32367 115 18 18 0C 00 
3236b 116 00 00 00 00 
3236f 117 00 60 30 18 
32373 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
32377 119 30 60 00 00 
3237b 11a 00 00 00 00 
3237f 11b 00 00 00 7E 
32383 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
32387 11d 00 00 00 00 
3238b 11e 00 00 00 00 
3238f 11f 00          | 	byte	$00[9]
32390 120 06 0C 18 30 
32394 121 60 30 18 0C 
32398 122 06 00 00 00 
3239c 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
323a0 124 63 63 30 18 
323a4 125 18 18 00 18 
323a8 126 18 00 00 00 
323ac 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
323b0 128 3E 63 63 7B 
323b4 129 7B 7B 3B 03 
323b8 12a 3E 00 00 00 
323bc 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
323c0 12c 1C 36 63 63 
323c4 12d 7F 63 63 63 
323c8 12e 63 00 00 00 
323cc 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
323d0 130 66 66 66 3E 
323d4 131 66 66 66 66 
323d8 132 3F 00 00 00 
323dc 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
323e0 134 66 43 03 03 
323e4 135 03 03 43 66 
323e8 136 3C 00 00 00 
323ec 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
323f0 138 36 66 66 66 
323f4 139 66 66 66 36 
323f8 13a 1F 00 00 00 
323fc 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
32400 13c 66 46 16 1E 
32404 13d 16 06 46 66 
32408 13e 7F 00 00 00 
3240c 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
32410 140 66 46 16 1E 
32414 141 16 06 06 06 
32418 142 0F 00 00 00 
3241c 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
32420 144 66 43 03 03 
32424 145 7B 63 63 66 
32428 146 5C 00 00 00 
3242c 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
32430 148 63 63 63 7F 
32434 149 63 63 63 63 
32438 14a 63 00 00 00 
3243c 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
32440 14c 18 18 18 18 
32444 14d 18 18 18 18 | 	byte	$18[8]
32448 14e 3C 00 00 00 
3244c 14f 00 00 00 78 
32450 150 30 30 30 30 
32454 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
32458 152 1E 00 00 00 
3245c 153 00 00 00 67 
32460 154 66 66 36 1E 
32464 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
32468 156 67 00 00 00 
3246c 157 00 00 00 0F 
32470 158 06 06 06 06 
32474 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
32478 15a 7F 00 00 00 
3247c 15b 00 00 00 63 
32480 15c 77 7F 7F 6B 
32484 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
32488 15e 63 00 00 00 
3248c 15f 00 00 00 63 
32490 160 67 6F 7F 7B 
32494 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
32498 162 63 00 00 00 
3249c 163 00 00 00 3E 
324a0 164 63 63 63 63 
324a4 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
324a8 166 3E 00 00 00 
324ac 167 00 00 00 3F 
324b0 168 66 66 66 3E 
324b4 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
324b8 16a 0F 00 00 00 
324bc 16b 00 00 00 3E 
324c0 16c 63 63 63 63 
324c4 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
324c8 16e 3E 30 70 00 
324cc 16f 00 00 00 3F 
324d0 170 66 66 66 3E 
324d4 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
324d8 172 67 00 00 00 
324dc 173 00 00 00 3E 
324e0 174 63 63 06 1C 
324e4 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
324e8 176 3E 00 00 00 
324ec 177 00 00 00 7E 
324f0 178 7E 5A 18 18 
324f4 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
324f8 17a 3C 00 00 00 
324fc 17b 00 00 00 63 
32500 17c 63 63 63 63 
32504 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
32508 17e 3E 00 00 00 
3250c 17f 00 00 00 63 
32510 180 63 63 63 63 
32514 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
32518 182 08 00 00 00 
3251c 183 00 00 00 63 
32520 184 63 63 63 6B 
32524 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
32528 186 36 00 00 00 
3252c 187 00 00 00 63 
32530 188 63 36 3E 1C 
32534 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
32538 18a 63 00 00 00 
3253c 18b 00 00 00 66 
32540 18c 66 66 66 3C 
32544 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
32548 18e 3C 00 00 00 
3254c 18f 00 00 00 7F 
32550 190 63 61 30 18 
32554 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
32558 192 7F 00 00 00 
3255c 193 00 00 00 3C 
32560 194 0C 0C 0C 0C 
32564 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
32568 196 3C 00 00 00 
3256c 197 00 00 00 00 
32570 198 01 03 07 0E 
32574 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
32578 19a 40 00 00 00 
3257c 19b 00 00 00 3C 
32580 19c 30 30 30 30 
32584 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
32588 19e 3C 00 00 00 
3258c 19f 1C 36 00 00 
32590 1a0 00 00 00 00 
32594 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32598 1a2 00 00 00 00 
3259c 1a3 00 00 00 00 
325a0 1a4 00 00 00 00 
325a4 1a5 00 00 00 00 
325a8 1a6 00          | 	byte	$00[17]
325a9 1a6 FF 00 00 0C 
325ad 1a7 18 00 00 00 
325b1 1a8 00 00 00 00 
325b5 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
325b9 1aa 00 00 00 00 
325bd 1ab 00 00 00 00 
325c1 1ac 00          | 	byte	$00[9]
325c2 1ac 1E 30 3E 33 
325c6 1ad 33 33 6E 00 
325ca 1ae 00 00 00 00 
325ce 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
325d2 1b0 1E 36 66 66 
325d6 1b1 66 66 3E 00 
325da 1b2 00 00 00 00 
325de 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
325e2 1b4 3E 63 03 03 
325e6 1b5 03 63 3E 00 
325ea 1b6 00 00 00 00 
325ee 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
325f2 1b8 3C 36 33 33 
325f6 1b9 33 33 6E 00 
325fa 1ba 00 00 00 00 
325fe 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
32602 1bc 3E 63 7F 03 
32606 1bd 03 63 3E 00 
3260a 1be 00 00 00 00 
3260e 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
32612 1c0 0C 1E 0C 0C 
32616 1c1 0C 0C 1E 00 
3261a 1c2 00 00 00 00 
3261e 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
32622 1c4 6E 33 33 33 
32626 1c5 33 33 3E 30 
3262a 1c6 33 1E 00 00 
3262e 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
32632 1c8 36 6E 66 66 
32636 1c9 66 66 67 00 
3263a 1ca 00 00 00 00 
3263e 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
32642 1cc 1C 18 18 18 
32646 1cd 18 18 3C 00 
3264a 1ce 00 00 00 00 
3264e 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
32652 1d0 70 60 60 60 
32656 1d1 60 60 60 66 
3265a 1d2 66 3C 00 00 
3265e 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
32662 1d4 66 36 1E 1E 
32666 1d5 36 66 67 00 
3266a 1d6 00 00 00 00 
3266e 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
32672 1d8 18 18 18 18 
32676 1d9 18 18       | 	byte	$18[6]
32678 1da 3C 00 00 00 
3267c 1db 00 00 00 00 
32680 1dc 00 00 37 7F 
32684 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
32688 1de 63 00 00 00 
3268c 1df 00 00 00 00 
32690 1e0 00 00 3B 66 
32694 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
32698 1e2 66 00 00 00 
3269c 1e3 00 00 00 00 
326a0 1e4 00 00 3E 63 
326a4 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
326a8 1e6 3E 00 00 00 
326ac 1e7 00 00 00 00 
326b0 1e8 00 00 3B 66 
326b4 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
326b8 1ea 3E 06 06 0F 
326bc 1eb 00 00 00 00 
326c0 1ec 00 00 6E 33 
326c4 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
326c8 1ee 3E 30 30 78 
326cc 1ef 00 00 00 00 
326d0 1f0 00 00 3B 6E 
326d4 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
326d8 1f2 0F 00 00 00 
326dc 1f3 00 00 00 00 
326e0 1f4 00 00 3E 63 
326e4 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
326e8 1f6 3E 00 00 00 
326ec 1f7 00 00 00 08 
326f0 1f8 0C 0C 3F 0C 
326f4 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
326f8 1fa 38 00 00 00 
326fc 1fb 00 00 00 00 
32700 1fc 00 00 33 33 
32704 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
32708 1fe 6E 00 00 00 
3270c 1ff 00 00 00 00 
32710 200 00 00 63 63 
32714 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
32718 202 1C 00 00 00 
3271c 203 00 00 00 00 
32720 204 00 00 63 63 
32724 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
32728 206 36 00 00 00 
3272c 207 00 00 00 00 
32730 208 00 00 63 36 
32734 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
32738 20a 63 00 00 00 
3273c 20b 00 00 00 00 
32740 20c 00 00 63 63 
32744 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
32748 20e 7E 60 30 1F 
3274c 20f 00 00 00 00 
32750 210 00 00 7F 33 
32754 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
32758 212 7F 00 00 00 
3275c 213 00 00 00 70 
32760 214 18 18 18 0E 
32764 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
32768 216 70 00 00 00 
3276c 217 00 00 00 18 
32770 218 18 18 18 18 
32774 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
32778 21a 18 00 00 00 
3277c 21b 00 00 00 0E 
32780 21c 18 18 18 70 
32784 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
32788 21e 0E 00 00 00 
3278c 21f 6E 3B 00 00 
32790 220 00 00 00 00 
32794 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32798 222 00 00 00 00 
3279c 223 00 00 00 00 
327a0 224 00 00       | 	byte	$00[10]
327a2 224 08 1C 36 63 
327a6 225 63 63 7F 00 
327aa 226 00 00 00 00 
327ae 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
327b2 228 03 03 03 03 
327b6 229 43 66 3C 18 
327ba 22a 30 1E 00 00 
327be 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
327c2 22c 33 33 33 33 
327c6 22d 33 33       | 	byte	$33[6]
327c8 22e 6E 00 00 00 
327cc 22f 00 00 60 30 
327d0 230 18 00 3E 63 
327d4 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
327d8 232 3E 00 00 00 
327dc 233 00 00 08 1C 
327e0 234 36 00 1E 30 
327e4 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
327e8 236 6E 00 00 00 
327ec 237 00 00 00 00 
327f0 238 33 00 1E 30 
327f4 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
327f8 23a 6E 00 00 00 
327fc 23b 00 00 1C 36 
32800 23c 1C 00 33 33 
32804 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
32808 23e 6E 00 00 00 
3280c 23f 00 00 60 30 
32810 240 18 00 3E 63 
32814 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
32818 242 3E 00 00 00 
3281c 243 00 00 00 00 
32820 244 00 00 3E 63 
32824 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
32828 246 3E 18 30 1E 
3282c 247 00 00 00 1C 
32830 248 58 78 38 18 
32834 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
32838 24a 3C 00 00 00 
3283c 24b 00 00 00 00 
32840 24c 63 00 3E 63 
32844 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
32848 24e 3E 00 00 00 
3284c 24f 66 33 00 3E 
32850 250 63 63 63 63 
32854 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
32858 252 3E 00 00 00 
3285c 253 00 00 CC 66 
32860 254 33 00 3E 63 
32864 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
32868 256 3E 00 00 00 
3286c 257 00 00 18 3C 
32870 258 66 00 1C 18 
32874 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
32878 25a 3C 00 00 00 
3287c 25b 30 18 00 7F 
32880 25c 63 61 30 18 
32884 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
32888 25e 7F 00 00 00 
3288c 25f 00 63 00 08 
32890 260 1C 36 63 63 
32894 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
32898 262 63 00 00 00 
3289c 263 30 18 00 3C 
328a0 264 66 43 03 03 
328a4 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
328a8 266 3C 00 00 00 
328ac 267 30 18 00 7F 
328b0 268 66 46 16 1E 
328b4 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
328b8 26a 7F 00 00 00 
328bc 26b 0C 06 00 0F 
328c0 26c 06 06 06 06 
328c4 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
328c8 26e 7F 00 00 00 
328cc 26f 30 18 00 1C 
328d0 270 18 18 18 18 
328d4 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
328d8 272 3C 00 00 00 
328dc 273 00 00 08 1C 
328e0 274 36 00 3E 63 
328e4 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
328e8 276 3E 00 00 00 
328ec 277 00 00 00 00 
328f0 278 63 00 3E 63 
328f4 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
328f8 27a 3E 00 00 00 
328fc 27b 00 00 00 6F 
32900 27c 46 26 06 06 
32904 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
32908 27e 7F 00 00 00 
3290c 27f 00 00 00 6E 
32910 280 4C 2C 0C 0C 
32914 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
32918 282 1E 00 00 00 
3291c 283 30 18 00 3E 
32920 284 63 63 06 1C 
32924 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
32928 286 3E 00 00 00 
3292c 287 00 00 60 30 
32930 288 18 00 3E 63 
32934 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
32938 28a 3E 00 00 00 
3293c 28b 00 63 00 3E 
32940 28c 63 63 63 63 
32944 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
32948 28e 3E 00 00 00 
3294c 28f 00 63 00 63 
32950 290 63 63 63 63 
32954 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
32958 292 3E 00 00 00 
3295c 293 6C 38 00 7E 
32960 294 7E 5A 18 18 
32964 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
32968 296 3C 00 00 00 
3296c 297 00 00 60 48 
32970 298 2C 0C 3F 0C 
32974 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
32978 29a 38 00 00 00 
3297c 29b 00 00 00 0F 
32980 29c 26 36 1E 0E 
32984 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
32988 29e 7F 00 00 00 
3298c 29f 00 00 00 00 
32990 2a0 00 63 36 1C 
32994 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
32998 2a2 00 00 00 00 
3299c 2a3 00 00       | 	byte	$00[6]
3299e 2a3 36 1C 08 00 
329a2 2a4 3E 63 03 03 
329a6 2a5 03 63 3E 00 
329aa 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
329ae 2a7 30 18 0C 00 
329b2 2a8 1E 30 3E 33 
329b6 2a9 33 33 6E 00 
329ba 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
329be 2ab 60 30 18 00 
329c2 2ac 1C 18 18 18 
329c6 2ad 18 18 3C 00 
329ca 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
329ce 2af 60 30 18 00 
329d2 2b0 3E 63 63 63 
329d6 2b1 63 63 3E 00 
329da 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
329de 2b3 30 18 0C 00 
329e2 2b4 33 33 33 33 
329e6 2b5 33 33 6E 00 
329ea 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
329ee 2b7 00 08 1C 36 
329f2 2b8 63 63 7F 63 
329f6 2b9 63 63 63 18 
329fa 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
329fe 2bb 00 00 00 00 
32a02 2bc 1E 30 3E 33 
32a06 2bd 33 33 6E 18 
32a0a 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
32a0e 2bf 00 7F 63 61 
32a12 2c0 30 18 0C 06 
32a16 2c1 43 63 7F 00 
32a1a 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
32a1e 2c3 36 1C 08 00 
32a22 2c4 7F 33 18 0C 
32a26 2c5 06 63 7F 00 
32a2a 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
32a2e 2c7 00 7F 66 46 
32a32 2c8 16 1E 16 06 
32a36 2c9 46 66 7F 18 
32a3a 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
32a3e 2cb 00 00 00 00 
32a42 2cc 3E 63 7F 03 
32a46 2cd 03 63 3E 18 
32a4a 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
32a4e 2cf 00 3C 66 03 
32a52 2d0 1F 03 0F 03 
32a56 2d1 03 66 3C 00 
32a5a 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
32a5e 2d3 60 30 18 00 
32a62 2d4 7F 33 18 0C 
32a66 2d5 06 63 7F 00 
32a6a 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
32a6e 2d7 00 3C 66 43 
32a72 2d8 03 03 03 03 
32a76 2d9 43 66 3C 00 
32a7a 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
32a7e 2db 00 00 00 00 
32a82 2dc 3E 63 06 1C 
32a86 2dd 30 63 3E 18 
32a8a 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
32a8e 2df 00 00 00 00 
32a92 2e0 00 00       | 	byte	$00[6]
32a94 2e1 6C 36 1B 36 
32a98 2e2 6C 00 00 00 
32a9c 2e3 00 00 00 00 
32aa0 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32aa4 2e5 1B 36 6C 36 
32aa8 2e6 1B 00 00 00 
32aac 2e7 88 22 88 22 
32ab0 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
32ab4 2e9 88 22 88 22 
32ab8 2ea 88 22 88 22 
32abc 2eb AA 55 AA 55 
32ac0 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
32ac4 2ed AA 55 AA 55 
32ac8 2ee AA 55 AA 55 
32acc 2ef BB EE BB EE 
32ad0 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
32ad4 2f1 BB EE BB EE 
32ad8 2f2 BB EE BB EE 
32adc 2f3 18 18 18 18 
32ae0 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
32ae4 2f5 18 18 18 18 
32ae8 2f6 18 18 18 18 
32aec 2f7 18 18 18 18 
32af0 2f8 18 18 18    | 	byte	$18[15]
32af3 2f8 1F 18 18 18 
32af7 2f9 18 18 18 18 
32afb 2fa 18 30 18 00 
32aff 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
32b03 2fc 63 7F 63 63 
32b07 2fd 63 63 00 00 
32b0b 2fe 00 1C 36 00 
32b0f 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
32b13 300 63 7F 63 63 
32b17 301 63 63 00 00 
32b1b 302 00 36 1C 00 
32b1f 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
32b23 304 1E 16 06 46 
32b27 305 66 7F 00 00 
32b2b 306 00 00 00 00 
32b2f 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
32b33 308 1C 30 60 63 
32b37 309 63 3E 18 30 
32b3b 30a 1E 6C 6C 6C 
32b3f 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
32b43 30c 6F 6C 6C 6C 
32b47 30d 6C 6C 6C 6C 
32b4b 30e 6C 6C 6C 6C 
32b4f 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
32b53 310 6C 6C 6C 6C 
32b57 311 6C 6C 6C 6C 
32b5b 312 6C          | 	byte	$6c[9]
32b5c 313 00 00 00 00 
32b60 314 00          | 	byte	$00[5]
32b61 314 7F 60 6F 6C 
32b65 315 6C 6C 6C 6C 
32b69 316 6C 6C 6C 6C 
32b6d 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
32b71 318 6F 60 7F 00 
32b75 319 00 00 00 00 
32b79 31a 00 00 00 18 
32b7d 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
32b81 31c 61 30 18 0C 
32b85 31d 06 43 63 7F 
32b89 31e 00 00 00 00 
32b8d 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
32b91 320 00 7F 33 18 
32b95 321 0C 06 63 7F 
32b99 322 00 00 00 00 
32b9d 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
32ba1 324 00 00 1F 18 
32ba5 325 18 18 18 18 
32ba9 326 18 18 18 18 
32bad 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
32bb1 328 18 18 F8 00 
32bb5 329 00 00 00 00 
32bb9 32a 00 00 00 18 
32bbd 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
32bc1 32c 18 18 FF 00 
32bc5 32d 00 00 00 00 
32bc9 32e 00 00 00 00 
32bcd 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32bd1 330 00 00 FF 18 
32bd5 331 18 18 18 18 
32bd9 332 18 18 18 18 
32bdd 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
32be1 334 18 18 F8 18 
32be5 335 18 18 18 18 
32be9 336 18 18 18 00 
32bed 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
32bf1 338 00 00 FF 00 
32bf5 339 00 00 00 00 
32bf9 33a 00 00 00 18 
32bfd 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
32c01 33c 18 18 FF 18 
32c05 33d 18 18 18 18 
32c09 33e 18 18 18 63 
32c0d 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
32c11 340 36 63 63 7F 
32c15 341 63 63 63 63 
32c19 342 00 00 00 00 
32c1d 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
32c21 344 00 1E 30 3E 
32c25 345 33 33 33 6E 
32c29 346 00 00 00 6C 
32c2d 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
32c31 348 EC 0C FC 00 
32c35 349 00 00 00 00 
32c39 34a 00 00 00 00 
32c3d 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32c41 34c FC 0C EC 6C 
32c45 34d 6C 6C 6C 6C 
32c49 34e 6C 6C 6C 6C 
32c4d 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
32c51 350 EF 00 FF 00 
32c55 351 00 00 00 00 
32c59 352 00 00 00 00 
32c5d 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32c61 354 FF 00 EF 6C 
32c65 355 6C 6C 6C 6C 
32c69 356 6C 6C 6C 6C 
32c6d 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
32c71 358 EC 0C EC 6C 
32c75 359 6C 6C 6C 6C 
32c79 35a 6C 6C 6C 00 
32c7d 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
32c81 35c FF 00 FF 00 
32c85 35d 00 00 00 00 
32c89 35e 00 00 00 6C 
32c8d 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
32c91 360 EF 00 EF 6C 
32c95 361 6C 6C 6C 6C 
32c99 362 6C 6C 6C 00 
32c9d 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
32ca1 364 63 3E 63 63 
32ca5 365 63 63 3E 63 
32ca9 366 00 00 00 00 
32cad 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
32cb1 368 30 3C 36 33 
32cb5 369 33 33 33 6E 
32cb9 36a 00 00 00 00 
32cbd 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
32cc1 36c 66 66 6F 66 
32cc5 36d 66 66 36 1F 
32cc9 36e 00 00 00 36 
32ccd 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
32cd1 370 66 66 66 66 
32cd5 371 66 66       | 	byte	$66[6]
32cd7 371 36 1F 00 00 
32cdb 372 00 00 63 00 
32cdf 373 7F 66 46 16 
32ce3 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
32ce7 375 66 7F 00 00 
32ceb 376 00 6C 38 00 
32cef 377 38 30 30 3C 
32cf3 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
32cf7 379 33 6E 00 00 
32cfb 37a 00 36 1C 00 
32cff 37b 63 67 6F 7F 
32d03 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
32d07 37d 63 63 00 00 
32d0b 37e 00 30 18 00 
32d0f 37f 3C 18 18 18 
32d13 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
32d17 381 18 3C 00 00 
32d1b 382 00 3C 66 00 
32d1f 383 3C 18 18 18 
32d23 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
32d27 385 18 3C 00 00 
32d2b 386 00 00 00 36 
32d2f 387 1C 08 00 3E 
32d33 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
32d37 389 63 3E 00 00 
32d3b 38a 00 18 18 18 
32d3f 38b 18 18 18 18 
32d43 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
32d47 38d 00 00 00 00 
32d4b 38e 00 00 00 00 
32d4f 38f 00 00 00 00 | 	byte	$00[12]
32d53 390 F8 18 18 18 
32d57 391 18 18 18 18 
32d5b 392 18 FF FF FF 
32d5f 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
32d63 394 FF FF FF FF 
32d67 395 FF FF FF FF 
32d6b 396 FF          | 	byte	$ff[9]
32d6c 397 00 00 00 00 
32d70 398 00 00 00    | 	byte	$00[7]
32d73 398 FF FF FF FF 
32d77 399 FF FF FF FF 
32d7b 39a FF          | 	byte	$ff[9]
32d7c 39b 00 00 00 7E 
32d80 39c 7E 5A 18 18 
32d84 39d 18 18 18 18 
32d88 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
32d8c 39f 1C 36 1C 63 
32d90 3a0 63 63 63 63 
32d94 3a1 63 63 63 63 
32d98 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
32d9c 3a3 FF FF FF FF 
32da0 3a4 FF FF FF    | 	byte	$ff[7]
32da3 3a4 00 00 00 00 
32da7 3a5 00 00 00 00 
32dab 3a6 00          | 	byte	$00[9]
32dac 3a7 30 18 00 3E 
32db0 3a8 63 63 63 63 
32db4 3a9 63 63 63 63 
32db8 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
32dbc 3ab 00 00 00 1E 
32dc0 3ac 33 33 33 1B 
32dc4 3ad 33 63 63 63 
32dc8 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
32dcc 3af 1C 36 00 3E 
32dd0 3b0 63 63 63 63 
32dd4 3b1 63 63 63 63 
32dd8 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
32ddc 3b3 30 18 00 63 
32de0 3b4 67 6F 7F 7B 
32de4 3b5 73 63 63 63 
32de8 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
32dec 3b7 00 00 60 30 
32df0 3b8 18 00 3B 66 
32df4 3b9 66 66 66 66 
32df8 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
32dfc 3bb 00 00 36 1C 
32e00 3bc 08 00 3B 66 
32e04 3bd 66 66 66 66 
32e08 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
32e0c 3bf 36 1C 00 3E 
32e10 3c0 63 63 06 1C 
32e14 3c1 30 60 63 63 
32e18 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
32e1c 3c3 00 00 36 1C 
32e20 3c4 08 00 3E 63 
32e24 3c5 06 1C 30 63 
32e28 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
32e2c 3c7 30 18 00 3F 
32e30 3c8 66 66 66 3E 
32e34 3c9 36 66 66 66 
32e38 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
32e3c 3cb 30 18 00 63 
32e40 3cc 63 63 63 63 
32e44 3cd 63 63 63 63 
32e48 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
32e4c 3cf 00 00 60 30 
32e50 3d0 18 00 3B 6E 
32e54 3d1 66 06 06 06 
32e58 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
32e5c 3d3 66 33 00 63 
32e60 3d4 63 63 63 63 
32e64 3d5 63 63 63 63 
32e68 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
32e6c 3d7 00 00 60 30 
32e70 3d8 18 00 63 63 
32e74 3d9 63 63 63 63 
32e78 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
32e7c 3db 30 18 00 66 
32e80 3dc 66 66 66 3C 
32e84 3dd 18 18 18 18 
32e88 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
32e8c 3df 00 00 00 08 
32e90 3e0 0C 0C 3F 0C 
32e94 3e1 0C 0C 0C 6C 
32e98 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
32e9c 3e3 30 18 00 00 
32ea0 3e4 00 00 00 00 
32ea4 3e5 00 00 00 00 
32ea8 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32eac 3e7 00 00 00 00 
32eb0 3e8 00 00 00 00 | 	byte	$00[8]
32eb4 3e9 7F 00 00 00 
32eb8 3ea 00 00 00 00 
32ebc 3eb 66 33 00 00 
32ec0 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
32ec4 3ed 00 00 00 00 
32ec8 3ee 00 00 00 00 
32ecc 3ef 00 00 00 00 
32ed0 3f0 00 00 00 00 
32ed4 3f1 00 00 00 00 
32ed8 3f2 00          | 	byte	$00[21]
32ed9 3f2 0C 06 3C 36 
32edd 3f3 1C 00 00 00 
32ee1 3f4 00 00 00 00 
32ee5 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32ee9 3f6 00 00 00 63 
32eed 3f7 3E 00 00 00 
32ef1 3f8 00 00 00 00 
32ef5 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32ef9 3fa 00 00 00 00 
32efd 3fb 3E 63 06 1C 
32f01 3fc 36 63 63 36 
32f05 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
32f09 3fe 00 00 00 00 
32f0d 3ff 00 00 00 00 | 	byte	$00[8]
32f11 400 18 00 7E 00 
32f15 401 18 00 00 00 
32f19 402 00 00 00 00 
32f1d 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32f21 404 00 00 00 00 
32f25 405 00 00 00 00 | 	byte	$00[8]
32f29 406 18 30 1E 00 
32f2d 407 00 00 1C 36 
32f31 408 36 1C 00 00 
32f35 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
32f39 40a 00 00 00 00 
32f3d 40b 63 00 00 00 
32f41 40c 00 00 00 00 
32f45 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32f49 40e 00 00 00 18 
32f4d 40f 18 00 00 00 
32f51 410 00 00 00 00 
32f55 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32f59 412 00 00 00 00 
32f5d 413 00          | 	byte	$00[5]
32f5e 413 CC 66 33 00 
32f62 414 33 33 33 33 
32f66 415 33 33 6E 00 
32f6a 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
32f6e 417 00 3F 66 66 
32f72 418 66 3E 36 66 
32f76 419 66 66 6F 00 
32f7a 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
32f7e 41b 36 1C 08 00 
32f82 41c 3B 6E 66 06 
32f86 41d 06 06 0F 00 
32f8a 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
32f8e 41f 00 00 00 7E 
32f92 420 7E 7E 7E 7E 
32f96 421 7E 7E 00 00 
32f9a 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
32f9e 423 00 00 00 00 
32fa2 424 00 00 00 00 
32fa6 425 00 00 00 00 
32faa 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32fac 427             | 'vga_font       file "vgafont.def"
32fac 427 00 00 00 00 
      ...             
32fdc 433 00 00 00 00 
32fe0 434 00 00 00    | st_font        file "st4font.def"
32fe3 434 FF FF 00 00 
32fe7 435 00 00 00 00 
32feb 436 00 18 18 18 
32fef 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
32ff3 438 18 18 18 18 
32ff7 439 18 18 18 18 
32ffb 43a 18          | 	byte	$18[9]
32ffc 43b 00 00 00 00 
33000 43c 00 00 00    | 	byte	$00[7]
33003 43c FF FF 18 18 
33007 43d 18 18 18 18 
3300b 43e 18 18 18 18 
3300f 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
33013 440 FF FF 00 00 
33017 441 00 00 00 00 
3301b 442 00 18 18 18 
3301f 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
33023 444 1F 1F 18 18 
33027 445 18 18 18 18 
3302b 446 18 18 18 18 
3302f 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
33033 448 F8 F8 18 18 
33037 449 18 18 18 18 
3303b 44a 18 00 00 00 
3303f 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
33043 44c 1F 1F 18 18 
33047 44d 18 18 18 18 
3304b 44e 18 00 00 00 
3304f 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
33053 450 F8 F8 18 18 
33057 451 18 18 18 18 
3305b 452 18 18 18 18 
3305f 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
33063 454 1F 1F 00 00 
33067 455 00 00 00 00 
3306b 456 00 18 18 18 
3306f 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
33073 458 F8 F8 00 00 
33077 459 00 00 00 00 
3307b 45a 00 18 18 18 
3307f 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
33083 45c FF FF 18 18 
33087 45d 18 18 18 18 
3308b 45e 18 00 00 18 
3308f 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
33093 460 66 7E 7E 66 
33097 461 66 66 66 30 
3309b 462 18 00 00 7E 
3309f 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
330a3 464 3E 06 06 06 
330a7 465 06 7E 7E 18 
330ab 466 0C 30 18 3C 
330af 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
330b3 468 06 06 06 66 
330b7 469 66 7E 3C 00 
330bb 46a 00 30 18 66 
330bf 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
330c3 46c 7E 7E 76 76 
330c7 46d 66 66 66 00 
330cb 46e 00 30 18 7C 
330cf 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
330d3 470 1C 38 70 60 
330d7 471 60 7E 3E 00 
330db 472 00 30 18 7E 
330df 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
330e3 474 18 0C 0C 06 
330e7 475 06 7E 7E 00 
330eb 476 00 18 18 00 
330ef 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
330f3 478 18 18 0C 0C 
330f7 479 06 7E 7E 00 
330fb 47a 00 30 18 3C 
330ff 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
33103 47c 66 66 66 66 
33107 47d 66          | 	byte	$66[5]
33108 47e 7E 3C 00 00 
3310c 47f 00 00 06 06 
33110 480 06 06 16 1E 
33114 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
33118 482 7E 7E 00 00 
3311c 483 00 00 00 00 
33120 484 00 3C 7C 60 
33124 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
33128 486 7E 7C 30 18 
3312c 487 00 00 00 00 
33130 488 00 3C 7E 66 
33134 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
33138 48a 7E 7C 18 0C 
3313c 48b 00 00 30 18 
33140 48c 00 3C 3E 06 
33144 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
33148 48e 7E 7C 00 00 
3314c 48f 00 00 30 18 
33150 490 00 3E 7E 66 
33154 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
33158 492 66 66 00 00 
3315c 493 00 00 30 18 
33160 494 00 7C 7E 06 
33164 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
33168 496 7E 3E 00 00 
3316c 497 00 00 30 18 
33170 498 00 7E 7E 30 
33174 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
33178 49a 7E 7E 00 00 
3317c 49b 00 00 18 18 
33180 49c 00 7E 7E 30 
33184 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
33188 49e 7E 7E 00 00 
3318c 49f 00 00 30 18 
33190 4a0 00 3C 7E 66 
33194 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
33198 4a2 7E 3C 00 00 
3319c 4a3 00 00 1C 1C 
331a0 4a4 18 18 38 3C 
331a4 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
331a8 4a6 3C 3C 00 00 
331ac 4a7 00 00 00 00 
331b0 4a8 00 00 00 00 
331b4 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
331b8 4aa 00 00 00 00 
331bc 4ab 00 00       | 	byte	$00[6]
331be 4ab 18 18 18 18 
331c2 4ac 18 18 18 18 | 	byte	$18[8]
331c6 4ad 00 00 18 18 
331ca 4ae 00 00 00 00 
331ce 4af 66 66 66 66 
331d2 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
331d6 4b1 00 00 00 00 
331da 4b2 00 00 00 00 
331de 4b3 00          | 	byte	$00[9]
331df 4b3 66 66 FF FF 
331e3 4b4 66 66 FF FF 
331e7 4b5 66 66 00 00 
331eb 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
331ef 4b7 7C 7E 06 06 
331f3 4b8 3E 7C 60 60 
331f7 4b9 7E 3E 18 18 
331fb 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
331ff 4bb 66 30 30 18 
33203 4bc 18 0C 0C 66 
33207 4bd 66 00 00 00 
3320b 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
3320f 4bf 66 66 3C 1C 
33213 4c0 1C FC FE 66 
33217 4c1 66 FE FC 00 
3321b 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
3321f 4c3 18 18 18 18 
33223 4c4 00 00 00 00 
33227 4c5 00 00 00 00 
3322b 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
3322f 4c7 18 1C 0C 0C 
33233 4c8 0C 0C 0C 0C 
33237 4c9 1C 18 30 00 
3323b 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
3323f 4cb 18 38 30 30 
33243 4cc 30 30 30 30 
33247 4cd 38 18 0C 00 
3324b 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
3324f 4cf 66 66 3C 3C 
33253 4d0 FF FF 3C 3C 
33257 4d1 66 66 00 00 
3325b 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
3325f 4d3 00 18 18 18 
33263 4d4 7E 7E 18 18 
33267 4d5 18 00 00 00 
3326b 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3326f 4d7 00 00 00 00 
33273 4d8 00 00       | 	byte	$00[6]
33275 4d9 18 18 18 18 
33279 4da 18          | 	byte	$18[5]
3327a 4da 0C 04 00 00 
3327e 4db 00 00 00 00 
33282 4dc 7E 7E 00 00 
33286 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
3328a 4de 00 00 00 00 
3328e 4df 00 00 00 00 
33292 4e0 00 00 00 00 
33296 4e1 00          | 	byte	$00[13]
33297 4e1 18 18 18 00 
3329b 4e2 00 00 00 60 
3329f 4e3 60 60 30 30 
332a3 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
332a7 4e5 06 06 06 00 
332ab 4e6 00 00 00 3C 
332af 4e7 7E 66 66 66 
332b3 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
332b7 4e9 66 7E 3C 00 
332bb 4ea 00 00 00 18 
332bf 4eb 18 1C 1C 18 
332c3 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
332c7 4ed 18 7E 7E 00 
332cb 4ee 00 00 00 3C 
332cf 4ef 7E 66 66 30 
332d3 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
332d7 4f1 0C 7E 7E 00 
332db 4f2 00 00 00 7E 
332df 4f3 7E 30 30 18 
332e3 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
332e7 4f5 66 7E 3C 00 
332eb 4f6 00 00 00 30 
332ef 4f7 30 38 38 3C 
332f3 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
332f7 4f9 7E 30 30 00 
332fb 4fa 00 00 00 7E 
332ff 4fb 7E 06 06 3E 
33303 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
33307 4fd 66 7E 3C 00 
3330b 4fe 00 00 00 38 
3330f 4ff 3C 0E 06 06 
33313 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
33317 501 66 7E 3C 00 
3331b 502 00 00 00 7E 
3331f 503 7E 60 60 30 
33323 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
33327 505 0C 0C 0C 00 
3332b 506 00 00 00 3C 
3332f 507 7E 66 66 3C 
33333 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
33337 509 66 7E 3C 00 
3333b 50a 00 00 00 3C 
3333f 50b 7E 66 66 7E 
33343 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
33347 50d 70 3C 1C 00 
3334b 50e 00 00 00 00 
3334f 50f 00 00 18 18 
33353 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
33357 511 18 18 18 00 
3335b 512 00 00 00 00 
3335f 513 00 00 18 18 
33363 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
33367 515 18 18 18 0C 
3336b 516 04 00 00 00 
3336f 517 70 38 1C 0E 
33373 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
33377 519 70 00 00 00 
3337b 51a 00 00 00 00 
3337f 51b 00 00 7E 7E 
33383 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
33387 51d 00 00 00 00 
3338b 51e 00 00 00 00 | 	byte	$00[8]
3338f 51f 0E 1C 38 70 
33393 520 E0 70 38 1C 
33397 521 0E 00 00 00 
3339b 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
3339f 523 7E 66 66 30 
333a3 524 30 18 18 18 
333a7 525 00 18 18 00 
333ab 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
333af 527 7E 66 66 66 
333b3 528 66 36 06 66 
333b7 529 66 7E 3C 00 
333bb 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
333bf 52b 3C 7E 66 66 
333c3 52c 66 7E 7E 66 
333c7 52d 66 66 66 00 
333cb 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
333cf 52f 7E 66 66 7E 
333d3 530 3E 66 66 66 
333d7 531 66 7E 3E 00 
333db 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
333df 533 7E 66 66 06 
333e3 534 06 06 06 66 
333e7 535 66 7E 3C 00 
333eb 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
333ef 537 7E 66 66 66 
333f3 538 66 66 66 66 
333f7 539 66 7E 3E 00 
333fb 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
333ff 53b 7E 06 06 3E 
33403 53c 3E 06 06 06 
33407 53d 06 7E 7E 00 
3340b 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
3340f 53f 7E 06 06 3E 
33413 540 3E 06 06 06 
33417 541 06 06 06 00 
3341b 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
3341f 543 7E 06 06 76 
33423 544 76 66 66 66 
33427 545 66 7E 3C 00 
3342b 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
3342f 547 66 66 66 7E 
33433 548 7E 66 66 66 
33437 549 66 66 66 00 
3343b 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
3343f 54b 7E 18 18 18 
33443 54c 18 18 18 18 
33447 54d 18 7E 7E 00 
3344b 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
3344f 54f 60 60 60 60 
33453 550 60 60 60    | 	byte	$60[7]
33456 551 66 66 7E 3C 
3345a 552 00 00 00 00 
3345e 553 66 66 36 36 
33462 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
33466 555 66 66 C6 C6 
3346a 556 00 00 00 00 
3346e 557 06 06 06 06 
33472 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
33476 559 06 06 7E 7E 
3347a 55a 00 00 00 00 
3347e 55b C6 C6 EE EE 
33482 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
33486 55d C6 C6 C6 C6 
3348a 55e 00 00 00 00 
3348e 55f 66 66 66 6E 
33492 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
33496 561 76 66 66 66 
3349a 562 00 00 00 00 
3349e 563 3C 7E 66 66 
334a2 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
334a6 565 66 66 7E 3C 
334aa 566 00 00 00 00 
334ae 567 3E 7E 66 66 
334b2 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
334b6 569 06 06 06 06 
334ba 56a 00 00 00 00 
334be 56b 3C 7E 66 66 
334c2 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
334c6 56d 66 56 3E 6C 
334ca 56e 00 00 00 00 
334ce 56f 3E 7E 66 66 
334d2 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
334d6 571 66 66 C6 C6 
334da 572 00 00 00 00 
334de 573 7C 7E 06 06 
334e2 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
334e6 575 60 60 7E 3E 
334ea 576 00 00 00 00 
334ee 577 7E 7E 18 18 
334f2 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
334f6 579 18 18 18 18 
334fa 57a 00 00 00 00 
334fe 57b 66 66 66 66 
33502 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
33506 57d 66 66 7E 3C 
3350a 57e 00 00 00 00 
3350e 57f 66 66 66 66 
33512 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
33516 581 3C 3C 18 18 
3351a 582 00 00 00 00 
3351e 583 C6 C6 C6 C6 
33522 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
33526 585 FE EE C6 82 
3352a 586 00 00 00 00 
3352e 587 66 66 66 3C 
33532 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
33536 589 3C 66 66 66 
3353a 58a 00 00 00 00 
3353e 58b 66 66 66 66 
33542 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
33546 58d 18 18 18 18 
3354a 58e 00 00 00 00 
3354e 58f 7E 7E 30 30 
33552 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
33556 591 06 06 7E 7E 
3355a 592 00 00 00 00 
3355e 593 3C 3C 0C 0C 
33562 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
33566 595 0C 0C 3C 3C 
3356a 596 00 00 00 00 
3356e 597 06 06 0C 0C 
33572 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
33576 599 60 60 C0 C0 
3357a 59a 00 00 00 00 
3357e 59b 3C 3C 30 30 
33582 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
33586 59d 30 30 3C 3C 
3358a 59e 00 00 00 00 
3358e 59f 18 18 3C 3C 
33592 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
33596 5a1 00 00 00 00 
3359a 5a2 00 00 00 00 
3359e 5a3 00 00 00 00 
335a2 5a4 00 00 00 00 
335a6 5a5 00 00       | 	byte	$00[18]
335a8 5a6 FE FE 00 00 
335ac 5a7 00 00 0C 0C 
335b0 5a8 18 18 00 00 
335b4 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
335b8 5aa 00 00 00 00 
335bc 5ab 00 00 00 00 
335c0 5ac 00          | 	byte	$00[9]
335c1 5ac 3C 7C 60 7C 
335c5 5ad 7E 66 66 7E 
335c9 5ae 7C 00 00 00 
335cd 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
335d1 5b0 3E 7E 66 66 
335d5 5b1 66 66 66 7E 
335d9 5b2 3E 00 00 00 
335dd 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
335e1 5b4 3C 3E 06 06 
335e5 5b5 06 06 06 7E 
335e9 5b6 7C 00 00 00 
335ed 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
335f1 5b8 7C 7E 66 66 
335f5 5b9 66 66 66 7E 
335f9 5ba 7C 00 00 00 
335fd 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
33601 5bc 3C 7E 66 66 
33605 5bd 7E 06 06 7E 
33609 5be 7C 00 00 00 
3360d 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
33611 5c0 18 7E 7E 18 
33615 5c1 18 18 18 18 
33619 5c2 18 00 00 00 
3361d 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
33621 5c4 7C 7E 66 66 
33625 5c5 66 66 7E 7C 
33629 5c6 60 7E 3E 00 
3362d 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
33631 5c8 3E 7E 66 66 
33635 5c9 66 66 66 66 
33639 5ca 66 00 00 00 
3363d 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
33641 5cc 1C 1C 18 18 
33645 5cd 18 18 18 3C 
33649 5ce 3C 00 00 00 
3364d 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
33651 5d0 30 30 30 30 
33655 5d1 30 30 30 30 
33659 5d2 30          | 	byte	$30[9]
3365a 5d2 3E 1E 00 00 
3365e 5d3 06 06 06 36 
33662 5d4 36 1E 1E 1E 
33666 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
3366a 5d6 00 00 00 00 
3366e 5d7 1C 1C 18 18 
33672 5d8 18 18 18 18 
33676 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
3367a 5da 00 00 00 00 
3367e 5db 00 00 00    | 	byte	$00[7]
33681 5dc 6C FE FE D6 
33685 5dd D6 C6 C6 C6 
33689 5de C6 00 00 00 
3368d 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
33691 5e0 3E 7E 66 66 
33695 5e1 66 66 66 66 
33699 5e2 66 00 00 00 
3369d 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
336a1 5e4 3C 7E 66 66 
336a5 5e5 66 66 66 7E 
336a9 5e6 3C 00 00 00 
336ad 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
336b1 5e8 3E 7E 66 66 
336b5 5e9 66 66 66 7E 
336b9 5ea 3E 06 06 00 
336bd 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
336c1 5ec 7C 7E 66 66 
336c5 5ed 66 66 66 7E 
336c9 5ee 7C 60 60 00 
336cd 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
336d1 5f0 3E 7E 66 06 
336d5 5f1 06 06 06 06 
336d9 5f2 06 00 00 00 
336dd 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
336e1 5f4 7C 7E 06 0E 
336e5 5f5 3C 70 60 7E 
336e9 5f6 3E 00 00 00 
336ed 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
336f1 5f8 7E 7E 18 18 
336f5 5f9 18 18 18 78 
336f9 5fa 70 00 00 00 
336fd 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
33701 5fc 66 66 66 66 
33705 5fd 66 66 66    | 	byte	$66[7]
33708 5fe 7E 7C 00 00 
3370c 5ff 00 00 00 00 
33710 600 00 66 66 66 
33714 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
33718 602 18 18 00 00 
3371c 603 00 00 00 00 
33720 604 00 C6 C6 D6 
33724 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
33728 606 C6 82 00 00 
3372c 607 00 00 00 00 
33730 608 00 66 66 3C 
33734 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
33738 60a 66 66 00 00 
3373c 60b 00 00 00 00 
33740 60c 00 66 66 66 
33744 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
33748 60e 7C 60 7E 3E 
3374c 60f 00 00 00 00 
33750 610 00 7E 7E 30 
33754 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
33758 612 7E 7E 00 00 
3375c 613 00 00 30 18 
33760 614 18 18 18 0C 
33764 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
33768 616 18 30 00 00 
3376c 617 00 00 18 18 
33770 618 18 18 18 18 
33774 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
33778 61a 18 18 00 00 
3377c 61b 00 00 0C 18 
33780 61c 18 18 18 30 
33784 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
33788 61e 18 0C 00 00 
3378c 61f 00 00 6C 7E 
33790 620 36 00 00 00 
33794 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
33798 622 00 00 00 00 
3379c 623 00 00 00 00 
337a0 624 00          | 	byte	$00[9]
337a1 624 18 18 18 18 
337a5 625 18 18 00 00 
337a9 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
337ac 627             | 'amiga_font     file "amigafont.def"
337ac 627 00 6C FE FE 
337b0 628 7C 38 10 00 
337b4 629 18 18 18 F8 
337b8 62a F8 18 18 18 | a8_font        file "atari8.fnt"
337bc 62b C0 C0 C0 C0 
337c0 62c C0 C0 C0 C0 | 	byte	$c0[8]
337c4 62d 18 18 18 1F 
337c8 62e 1F 00 00 00 
337cc 62f 18 18 18 1F 
337d0 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
337d4 631 00 00 00 1F 
337d8 632 1F 18 18 18 
337dc 633 C0 E0 70 38 
337e0 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
337e4 635 03 07 0E 1C 
337e8 636 38 70 E0 C0 
337ec 637 80 C0 E0 F0 
337f0 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
337f4 639 00 00 00 00 
337f8 63a F0 F0 F0 F0 
337fc 63b 01 03 07 0F 
33800 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
33804 63d F0 F0 F0 F0 
33808 63e 00 00 00 00 
3380c 63f 0F 0F 0F 0F 
33810 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
33814 641 FF FF 00 00 
33818 642 00 00 00 00 
3381c 643 00 00 00 00 
33820 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
33824 645 00 00 00 00 
33828 646 0F 0F 0F 0F 
3382c 647 00 38 38 EE 
33830 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
33834 649 00 00 00 F8 
33838 64a F8 18 18 18 
3383c 64b 00 00 00 FF 
33840 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
33844 64d 18 18 18 FF 
33848 64e FF 18 18 18 
3384c 64f 00 00 3C 7E 
33850 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
33854 651 00 00 00 00 
33858 652 FF FF FF FF 
3385c 653 03 03 03 03 
33860 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
33864 655 00 00 00 FF 
33868 656 FF 18 18 18 
3386c 657 18 18 18 FF 
33870 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
33874 659 0F 0F 0F 0F 
33878 65a 0F 0F 0F 0F | 	byte	$0f[8]
3387c 65b 18 18 18 F8 
33880 65c F8 00 00 00 
33884 65d 1E 06 1E 06 
33888 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
3388c 65f 00 18 3C 7E 
33890 660 18 18 18 00 
33894 661 00 18 18 18 
33898 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
3389c 663 00 18 0C 7E 
338a0 664 0C 18 00 00 
338a4 665 00 18 30 7E 
338a8 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
338ac 667 00 00 00 00 
338b0 668 00 00 00 00 
338b4 669 00          | 	byte	$00[9]
338b5 669 18 18 18 18 
338b9 66a 00 18 00 00 
338bd 66b 66 66 66 00 
338c1 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
338c5 66d 66 FF 66 66 
338c9 66e FF 66 00 18 
338cd 66f 7C 06 3C 60 
338d1 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
338d5 671 66 36 18 0C 
338d9 672 66 62 00 38 
338dd 673 6C 38 1C F6 
338e1 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
338e5 675 18 18 18 00 
338e9 676 00 00 00 00 
338ed 677 70 38 18 18 
338f1 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
338f5 679 0E 1C 18 18 
338f9 67a 1C 0E 00 00 
338fd 67b 66 3C FF 3C 
33901 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
33905 67d 18 18 7E 18 
33909 67e 18 00 00 00 
3390d 67f 00 00 00 00 
33911 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
33915 681 00 00 7E 00 
33919 682 00 00 00 00 
3391d 683 00 00 00 00 
33921 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
33925 685 60 30 18 0C 
33929 686 06 02 00 00 
3392d 687 3C 66 76 6E 
33931 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
33935 689 18 1C 18 18 
33939 68a 18 7E 00 00 
3393d 68b 3C 66 30 18 
33941 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
33945 68d 7E 30 18 30 
33949 68e 66 3C 00 00 
3394d 68f 30 38 3C 36 
33951 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
33955 691 7E 06 3E 60 
33959 692 66 3C 00 00 
3395d 693 3C 06 3E 66 
33961 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
33965 695 7E 60 30 18 
33969 696 0C 0C 00 00 
3396d 697 3C 66 3C 66 
33971 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
33975 699 3C 66 7C 60 
33979 69a 30 1C 00 00 
3397d 69b 00 18 18 00 
33981 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
33985 69d 00 18 18 00 
33989 69e 18 18 0C 60 
3398d 69f 30 18 0C 18 
33991 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
33995 6a1 00 7E 00 00 
33999 6a2 7E 00 00 06 
3399d 6a3 0C 18 30 18 
339a1 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
339a5 6a5 3C 66 30 18 
339a9 6a6 00 18 00 00 
339ad 6a7 3C 66 76 76 
339b1 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
339b5 6a9 18 3C 66 66 
339b9 6aa 7E 66 00 00 
339bd 6ab 3E 66 3E 66 
339c1 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
339c5 6ad 3C 66 06 06 
339c9 6ae 66 3C 00 00 
339cd 6af 1E 36 66 66 
339d1 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
339d5 6b1 7E 06 3E 06 
339d9 6b2 06 7E 00 00 
339dd 6b3 7E 06 3E 06 
339e1 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
339e5 6b5 7C 06 06 76 
339e9 6b6 66 7C 00 00 
339ed 6b7 66 66 7E 66 
339f1 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
339f5 6b9 7E 18 18 18 
339f9 6ba 18 7E 00 00 
339fd 6bb 60 60 60 60 
33a01 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
33a05 6bd 66 36 1E 1E 
33a09 6be 36 66 00 00 
33a0d 6bf 06 06 06 06 
33a11 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
33a15 6c1 C6 EE FE D6 
33a19 6c2 C6 C6 00 00 
33a1d 6c3 66 6E 7E 7E 
33a21 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
33a25 6c5 3C 66 66 66 
33a29 6c6 66 3C 00 00 
33a2d 6c7 3E 66 66 3E 
33a31 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
33a35 6c9 3C 66 66 66 
33a39 6ca 36 6C 00 00 
33a3d 6cb 3E 66 66 3E 
33a41 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
33a45 6cd 3C 06 3C 60 
33a49 6ce 60 3C 00 00 
33a4d 6cf 7E 18 18 18 
33a51 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
33a55 6d1 66 66 66 66 
33a59 6d2 66          | 	byte	$66[5]
33a5a 6d2 7E 00 00 66 
33a5e 6d3 66 66 66 3C 
33a62 6d4 18 00 00 C6 
33a66 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
33a6a 6d6 C6 00 00 66 
33a6e 6d7 66 3C 3C 66 
33a72 6d8 66 00 00 66 
33a76 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
33a7a 6da 18 00 00 7E 
33a7e 6db 30 18 0C 06 
33a82 6dc 7E 00 00 78 
33a86 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
33a8a 6de 78 00 00 02 
33a8e 6df 06 0C 18 30 
33a92 6e0 60 00 00 1E 
33a96 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
33a9a 6e2 1E 00 00 10 
33a9e 6e3 38 6C C6 00 
33aa2 6e4 00 00 00 00 
33aa6 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
33aaa 6e6 FF 00 00 18 
33aae 6e7 3C 7E 7E 3C 
33ab2 6e8 18 00 00 00 
33ab6 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
33aba 6ea 7C 00 00 06 
33abe 6eb 06 3E 66 66 
33ac2 6ec 3E 00 00 00 
33ac6 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
33aca 6ee 3C 00 00 60 
33ace 6ef 60 7C 66 66 
33ad2 6f0 7C 00 00 00 
33ad6 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
33ada 6f2 3C 00 00 70 
33ade 6f3 18 7C 18 18 
33ae2 6f4 18 00 00 00 
33ae6 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
33aea 6f6 60 3E 00 06 
33aee 6f7 06 3E 66 66 
33af2 6f8 66 00 00 18 
33af6 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
33afa 6fa 3C 00 00 60 
33afe 6fb 00 60 60 60 
33b02 6fc 60 3C 00 06 
33b06 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
33b0a 6fe 66 00 00 1C 
33b0e 6ff 18 18 18 18 
33b12 700 3C 00 00 00 
33b16 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
33b1a 702 C6 00 00 00 
33b1e 703 3E 66 66 66 
33b22 704 66 00 00 00 
33b26 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
33b2a 706 3C 00 00 00 
33b2e 707 3E 66 66 3E 
33b32 708 06 06 00 00 
33b36 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
33b3a 70a 60 60 00 00 
33b3e 70b 3E 66 06 06 
33b42 70c 06 00 00 00 
33b46 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
33b4a 70e 3E 00 00 18 
33b4e 70f 7E 18 18 18 
33b52 710 70 00 00 00 
33b56 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
33b5a 712 7C 00 00 00 
33b5e 713 66 66 66 3C 
33b62 714 18 00 00 00 
33b66 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
33b6a 716 6C 00 00 00 
33b6e 717 66 3C 18 3C 
33b72 718 66 00 00 00 
33b76 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
33b7a 71a 30 1E 00 00 
33b7e 71b 7E 30 18 0C 
33b82 71c 7E 00 00 18 
33b86 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
33b8a 71e 3C 00 18 18 
33b8e 71f 18 18 18 18 
33b92 720 18 18 00 7E 
33b96 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
33b9a 722 60 00 10 18 
33b9e 723 1C 1E 1C 18 
33ba2 724 10 00 08 18 
33ba6 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
33baa 726 08 00       | 	byte	$08, $00
33bac 727 00 00 00 00 
33bb0 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
33bb1 728 80 00 00 00 
33bb5 729 00 80 00 00 
33bb9 72a 80 80 00 00 
33bbd 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
33bc1 72c 80 00 80 00 
33bc5 72d 00 40 80 00 
33bc9 72e AA AA AA 00 
33bcd 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
33bd1 730 FF 00 00 00 
33bd5 731 00 FF 00 00 
33bd9 732 FF FF 00 00 
33bdd 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
33be1 734 FF 00 FF 00 
33be5 735 00 FF FF 00 
33be9 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
33bec 737 00 00 00 00 
33bf0 738 00          | ataripalette   file "ataripalettep2.def"
33bf1 738 11 11 11 00 
33bf5 739 22 22 22 00 
33bf9 73a 33 33 33 00 
33bfd 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
33c01 73c 55 55 55 00 
33c05 73d 66 66 66 00 
33c09 73e 77 77 77 00 
33c0d 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
33c11 740 99 99 99 00 
33c15 741 AA AA AA 00 
33c19 742 BB BB BB 00 
33c1d 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
33c21 744 DD DD DD 00 
33c25 745 EE EE EE 00 
33c29 746 FF FF FF 00 
33c2d 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
33c31 748 00 14 40 00 
33c35 749 00 1E 60 00 
33c39 74a 00 28 80 00 
33c3d 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
33c41 74c 00 3C BF 00 
33c45 74d 00 46 DF 00 
33c49 74e 00 50 FF 00 
33c4d 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
33c51 750 39 77 FF 00 
33c55 751 55 8A FF 00 
33c59 752 71 9E FF 00 
33c5d 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
33c61 754 AA C5 FF 00 
33c65 755 C6 D8 FF 00 
33c69 756 E3 EC FF 00 
33c6d 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
33c71 758 00 00 40 00 
33c75 759 00 00 60 00 
33c79 75a 00 00 80 00 
33c7d 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
33c81 75c 00 00 BF 00 
33c85 75d 00 00 DF 00 
33c89 75e 00 00 FF 00 
33c8d 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
33c91 760 39 39 FF 00 
33c95 761 55 55 FF 00 
33c99 762 71 71 FF 00 
33c9d 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
33ca1 764 AA AA FF 00 
33ca5 765 C6 C6 FF 00 
33ca9 766 E3 E3 FF 00 
33cad 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
33cb1 768 20 00 40 00 
33cb5 769 30 00 60 00 
33cb9 76a 40 00 80 00 
33cbd 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
33cc1 76c 60 00 BF 00 
33cc5 76d 70 00 DF 00 
33cc9 76e 80 00 FF 00 
33ccd 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
33cd1 770 9C 39 FF 00 
33cd5 771 AA 55 FF 00 
33cd9 772 B8 71 FF 00 
33cdd 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
33ce1 774 D5 AA FF 00 
33ce5 775 E3 C6 FF 00 
33ce9 776 F1 E3 FF 00 
33ced 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
33cf1 778 40 00 40 00 
33cf5 779 60 00 60 00 
33cf9 77a 80 00 80 00 
33cfd 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
33d01 77c BF 00 BF 00 
33d05 77d DF 00 DF 00 
33d09 77e FF 00 FF 00 
33d0d 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
33d11 780 FF 39 FF 00 
33d15 781 FF 55 FF 00 
33d19 782 FF 71 FF 00 
33d1d 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
33d21 784 FF AA FF 00 
33d25 785 FF C6 FF 00 
33d29 786 FF E3 FF 00 
33d2d 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
33d31 788 40 00 20 00 
33d35 789 60 00 30 00 
33d39 78a 80 00 40 00 
33d3d 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
33d41 78c BF 00 60 00 
33d45 78d DF 00 70 00 
33d49 78e FF 00 80 00 
33d4d 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
33d51 790 FF 39 9C 00 
33d55 791 FF 55 AA 00 
33d59 792 FF 71 B8 00 
33d5d 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
33d61 794 FF AA D5 00 
33d65 795 FF C6 E3 00 
33d69 796 FF E3 F1 00 
33d6d 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
33d71 798 40 00 00 00 
33d75 799 60 00 00 00 
33d79 79a 80 00 00 00 
33d7d 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
33d81 79c BF 00 00 00 
33d85 79d DF 00 00 00 
33d89 79e FF 00 00 00 
33d8d 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
33d91 7a0 FF 39 39 00 
33d95 7a1 FF 55 55 00 
33d99 7a2 FF 71 71 00 
33d9d 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
33da1 7a4 FF AA AA 00 
33da5 7a5 FF C6 C6 00 
33da9 7a6 FF E3 E3 00 
33dad 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
33db1 7a8 40 10 00 00 
33db5 7a9 60 18 00 00 
33db9 7aa 80 20 00 00 
33dbd 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
33dc1 7ac BF 30 00 00 
33dc5 7ad DF 38 00 00 
33dc9 7ae FF 40 00 00 
33dcd 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
33dd1 7b0 FF 6A 39 00 
33dd5 7b1 FF 80 55 00 
33dd9 7b2 FF 95 71 00 
33ddd 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
33de1 7b4 FF BF AA 00 
33de5 7b5 FF D5 C6 00 
33de9 7b6 FF EA E3 00 
33ded 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
33df1 7b8 40 20 00 00 
33df5 7b9 60 30 00 00 
33df9 7ba 80 40 00 00 
33dfd 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
33e01 7bc BF 60 00 00 
33e05 7bd DF 70 00 00 
33e09 7be FF 80 00 00 
33e0d 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
33e11 7c0 FF 9C 39 00 
33e15 7c1 FF AA 55 00 
33e19 7c2 FF B8 71 00 
33e1d 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
33e21 7c4 FF D5 AA 00 
33e25 7c5 FF E3 C6 00 
33e29 7c6 FF F1 E3 00 
33e2d 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
33e31 7c8 40 30 00 00 
33e35 7c9 60 48 00 00 
33e39 7ca 80 60 00 00 
33e3d 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
33e41 7cc BF 90 00 00 
33e45 7cd DF A8 00 00 
33e49 7ce FF C0 00 00 
33e4d 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
33e51 7d0 FF CE 39 00 
33e55 7d1 FF D5 55 00 
33e59 7d2 FF DC 71 00 
33e5d 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
33e61 7d4 FF EA AA 00 
33e65 7d5 FF F1 C6 00 
33e69 7d6 FF F8 E3 00 
33e6d 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
33e71 7d8 30 40 00 00 
33e75 7d9 48 60 00 00 
33e79 7da 60 80 00 00 
33e7d 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
33e81 7dc 90 BF 00 00 
33e85 7dd A8 DF 00 00 
33e89 7de C0 FF 00 00 
33e8d 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
33e91 7e0 CE FF 39 00 
33e95 7e1 D5 FF 55 00 
33e99 7e2 DC FF 71 00 
33e9d 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
33ea1 7e4 EA FF AA 00 
33ea5 7e5 F1 FF C6 00 
33ea9 7e6 F8 FF E3 00 
33ead 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
33eb1 7e8 00 40 00 00 
33eb5 7e9 00 60 00 00 
33eb9 7ea 00 80 00 00 
33ebd 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
33ec1 7ec 00 BF 00 00 
33ec5 7ed 00 DF 00 00 
33ec9 7ee 00 FF 00 00 
33ecd 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
33ed1 7f0 39 FF 39 00 
33ed5 7f1 55 FF 55 00 
33ed9 7f2 71 FF 71 00 
33edd 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
33ee1 7f4 AA FF AA 00 
33ee5 7f5 C6 FF C6 00 
33ee9 7f6 E3 FF E3 00 
33eed 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
33ef1 7f8 00 40 14 00 
33ef5 7f9 00 60 1E 00 
33ef9 7fa 00 80 28 00 
33efd 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
33f01 7fc 00 BF 3C 00 
33f05 7fd 00 DF 46 00 
33f09 7fe 00 FF 50 00 
33f0d 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
33f11 800 39 FF 77 00 
33f15 801 55 FF 8A 00 
33f19 802 71 FF 9E 00 
33f1d 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
33f21 804 AA FF C5 00 
33f25 805 C6 FF D8 00 
33f29 806 E3 FF EC 00 
33f2d 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
33f31 808 00 40 28 00 
33f35 809 00 60 3C 00 
33f39 80a 00 80 50 00 
33f3d 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
33f41 80c 00 BF 78 00 
33f45 80d 00 DF 8C 00 
33f49 80e 00 FF A0 00 
33f4d 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
33f51 810 39 FF B5 00 
33f55 811 55 FF C0 00 
33f59 812 71 FF CA 00 
33f5d 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
33f61 814 AA FF DF 00 
33f65 815 C6 FF EA 00 
33f69 816 E3 FF F4 00 
33f6d 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
33f71 818 00 40 40 00 
33f75 819 00 60 60 00 
33f79 81a 00 80 80 00 
33f7d 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
33f81 81c 00 BF BF 00 
33f85 81d 00 DF DF 00 
33f89 81e 00 FF FF 00 
33f8d 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
33f91 820 39 FF FF 00 
33f95 821 55 FF FF 00 
33f99 822 71 FF FF 00 
33f9d 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
33fa1 824 AA FF FF 00 
33fa5 825 C6 FF FF 00 
33fa9 826 E3 FF FF 00 
33fad 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
33fb1 828 00 28 40 00 
33fb5 829 00 3C 60 00 
33fb9 82a 00 50 80 00 
33fbd 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
33fc1 82c 00 78 BF 00 
33fc5 82d 00 8C DF 00 
33fc9 82e 00 A0 FF 00 
33fcd 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
33fd1 830 39 B5 FF 00 
33fd5 831 55 C0 FF 00 
33fd9 832 71 CA FF 00 
33fdd 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
33fe1 834 AA DF FF 00 
33fe5 835 C6 EA FF 00 
33fe9 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
33fec 837             | 
33fec 837             | '**********************************************************************************
33fec 837             | '
33fec 837             | '        Timings and colors definitions
33fec 837             | '
33fec 837             | '**********************************************************************************
33fec 837             | 
33fec 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
33fec 837 08 00 00 00 
33ff0 838 3C 00 00 00 
33ff4 839 08 00 00 00 
33ff8 83a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         336956522,   %1_101101__11_0000_0110__1111_1011,   600,        0,     192, 0, 0
33ffc 83b 07 00 00 00 
34000 83c 04 00 00 00 
34004 83d 01 00 00 00 
34008 83e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
3400c 83f 58 02 00 00 
34010 840 6A 8C 15 14 
34014 841 FB 06 B7 01 
34018 842 58 02 00 00 | 	byte	$58, $02, $00, $00, $6a, $8c, $15, $14, $fb, $06, $b7, $01, $58, $02, $00, $00
3401c 843 00 00 00 00 
34020 844 C0 00 00 00 
34024 845 00 00 00 00 
34028 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3402c 847             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
3402c 847 00 75 C7 97 
34030 848 27 47 F6 0A 
34034 849 05 79 CB 9B 
34038 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
3403c 84b             | 
3403c 84b             | ''--------  Initialization  ----------------------------------------------------------------
3403c 84b             | 
3403c 84b 28 0C 64 FD | hdmi            setq    #6
34040 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
34044 84d 28 10 64 FD |                 setq    #8
34048 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
3404c 84f             | 
3404c 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
34050 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
34054 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
34058 852 D6 C6 01 F1 |                 add     t1,hbase
3405c 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
34060 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
34064 855 7B 0B 80 5F 
34068 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
3406c 857 66 66 86 FF 
34070 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
34074 859             | '
34074 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
34078 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
3407c 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
34080 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
34084 85d             | 
34084 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
34088 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
3408c 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
34090 860             | 
34090 860             | ''--------  frame rendering main loop  ---------------------------------------------------
34090 860             | 
34090 860 28 06 64 FD | p101            setq 	#3
34094 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
34098 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
3409c 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
340a0 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
340a4 865 00 A0 05 F6 |                 mov     dlinum, #0
340a8 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
340ac 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
340b0 868             | 
340b0 868             | 
340b0 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
340b4 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
340b8 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
340bc 86b             |                 
340bc 86b             | 
340bc 86b             | 
340bc 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
340bc 86b             |   
340bc 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
340c0 86c 29 FE 65 3D |          if_nc  setq2   #255
340c4 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
340c8 86e             | 
340c8 86e             | '' -----   up porch (before the picture)
340c8 86e             | 
340c8 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
340cc 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
340d0 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
340d4 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
340d8 872             |  
340d8 872             |    
340d8 872             |  
340d8 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
340dc 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
340e0 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
340e4 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
340e8 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
340ec 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
340f0 878             | 
340f0 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
340f4 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
340f8 87a 48 00 B0 FD | 		call    #dli
340fc 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
34100 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
34104 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
34108 87e             |                 	
34108 87e             |                 
34108 87e             | 
34108 87e             |  
34108 87e             | '' ------- the main screen drawing starts here
34108 87e             | 
34108 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
3410c 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
34110 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
34114 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
34118 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
3411c 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
34120 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
34124 885             |               
34124 885             | 
34124 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
34128 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
3412c 887             | 
3412c 887             | ' ---------------- All visible lines displayed now, start vblank  
3412c 887             | 
3412c 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
34130 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
34134 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
34138 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
3413c 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
34140 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
34144 88d             | 
34144 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
34144 88d             | 
34144 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
34144 88d             | 
34144 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
34148 88e             | 
34148 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
3414c 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
34150 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
34154 891             | 
34154 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
34158 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
3415c 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
34160 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
34164 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
34168 896             | 
34168 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
3416c 897 DD C6 41 F8 |                 getnib  t1,dl,#0
34170 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
34174 899 70 00 90 AD |     if_z        jmp     #preload
34178 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
3417c 89b 94 00 90 AD |     if_z        jmp     #preload2
34180 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
34184 89d 0C 00 90 AD |     if_z        jmp     #p390
34188 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
3418c 89f 28 00 90 AD |     if_z        jmp     #p391  
34190 8a0             | 
34190 8a0 2D 00 64 FD | p308            ret
34194 8a1             |    
34194 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
34198 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
3419c 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
341a0 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
341a4 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
341a8 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
341ac 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
341b0 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
341b4 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
341b8 8aa             |  
341b8 8aa             | '' --------  Reload palette. To do 
341b8 8aa             | 
341b8 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
341bc 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
341c0 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
341c4 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
341c8 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
341cc 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
341d0 8b0 70 FF 9F FD |         	jmp     #dli                
341d4 8b1             |       
341d4 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
341d4 8b1             | 
341d4 8b1             | 
341d4 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
341d4 8b1             | 
341d4 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
341d8 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
341dc 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
341e0 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
341e4 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
341e8 8b6             |         
341e8 8b6             | '' -------------- Preload a line from PSRAM        
341e8 8b6             |         
341e8 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
341ec 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
341f0 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
341f4 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
341f8 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
341fc 8bb             | 
341fc 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
34200 8bc 32 B7 01 F6 |                 mov     buf2,a1024
34204 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
34208 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
3420c 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
34210 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
34214 8c1             |  
34214 8c1             |  
34214 8c1             | preload2      '  incmod  dlinum,#3
34214 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
34218 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
3421c 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
34220 8c4 28 02 64 FD |                 setq	#1
34224 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
34228 8c6             |                 
34228 8c6             | 
34228 8c6             | '' -------------- Draw sprites
34228 8c6             | 
34228 8c6 CF 5C 02 F6 | sprite          mov t8,frames
3422c 8c7 10 5C 0E F5 | 		and t8,#16 wz
34230 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
34234 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
34238 8ca             | 		
34238 8ca             | 
34238 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
3423c 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
34240 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
34244 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
34248 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
3424c 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
34250 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
34254 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
34258 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
3425c 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
34260 8d4 01 52 86 F1 |                 sub     sprite_h,#1
34264 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
34268 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
3426c 8d7             | 
3426c 8d7             | 
3426c 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
34270 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
34274 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
34278 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
3427c 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
34280 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
34284 8dd 00 5E 06 F6 |                 mov 	t9,#0
34288 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
3428c 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
34290 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
34294 8e1             |      
34294 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
34298 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
3429c 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
342a0 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
342a4 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
342a8 8e6             |                 
342a8 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
342ac 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
342b0 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
342b4 8e9             |   		
342b4 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
342b8 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
342bc 8eb             | 
342bc 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
342c0 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
342c4 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
342c8 8ee             |  
342c8 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
342cc 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
342d0 8f0 10 00 90 CD |      if_c 	jmp     #p899		
342d4 8f1             | 	
342d4 8f1             | 	
342d4 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
342d8 8f2 28 CD 01 F1 | 		add	t4,sprite_w
342dc 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
342e0 8f4             | 
342e0 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
342e4 8f5             | 
342e4 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
342e8 8f6 01 58 86 F1 | 	 	sub     t6,#1
342ec 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
342f0 8f8             | 
342f0 8f8 28 58 62 FD |                 setq   	t6
342f4 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
342f8 8fa 28 5D 02 F6 |                 mov t8,sprite_w
342fc 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
34300 8fc 24 00 90 AD |         if_z    jmp #p898
34304 8fd             |          
34304 8fd             |         
34304 8fd 70 5F 06 F6 |                 mov  t9,#368
34308 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
3430c 8ff             | 
3430c 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
34310 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
34314 901 FF FF 7F FF 
34318 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
3431c 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
34320 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
34324 905 2D 01 00 F5 |                 and 0-0, t7
34328 906             |                
34328 906             | 
34328 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
3432c 907 E5 E0 7A FA |                 wmlong 368,t3				
34330 908             |                 
34330 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
34334 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
34338 90a 2D 00 64 FD |                 ret
3433c 90b             | 	
3433c 90b             | 	
3433c 90b             |                
3433c 90b             |  
3433c 90b             | '' -------------- Graphics line ------------------------------------------------------------
3433c 90b             |  
3433c 90b             | 
3433c 90b             | '' consts and vars
3433c 90b             | 
3433c 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
34340 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
34344 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
34348 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
3434c 90f             | 
3434c 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
34350 910             | 
34350 910             | '------ these longs will be set by setmode function
34350 910             | 
34350 910 00 00 00 00 | m_bs            long    0        'blanks before sync
34354 911 00 00 00 00 | m_sn            long    0        'sync
34358 912 00 00 00 00 | m_bv            long    0        'blanks before visible
3435c 913 00 00 00 00 | m_vi            long    0        'visible pixels #
34360 914             | 'm_border        long    0        'left/right borders
34360 914 00 00 00 00 | i_upporch       long    0        'up porch lines
34364 915 00 00 00 00 | i_vsync         long    0        'vsync lines
34368 916 00 00 00 00 | i_downporch     long    0        'down porch lines
3436c 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
34370 918 00 00 00 00 | i_totalvis      long    0
34374 919             | 
34374 919             | '-------------------------------------
34374 919             |  
34374 919 00 00 00 00 | linenum         long    0
34378 91a 00 00 00 00 | frames          long    0
3437c 91b 00 00 00 00 | dlinum long 0
34380 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
34384 91d             | 
34384 91d 00 00 00 00 | vblankptr       long    0
34388 91e 00 00 00 00 | modeptr         long    0
3438c 91f 00 00 00 00 | paletteptr      long    0
34390 920 00 00 00 00 | dlptr           long    0
34394 921 01 00 00 00 | hbase           long    1
34398 922 00 00 00 00 | mailbox         long    0
3439c 923 00 00 00 00 | spriteptr          long 0
343a0 924             | 
343a0 924 00 00 00 00 | cmd             long    0
343a4 925 00 B0 07 00 | buf1            long    $80000-16384-4096
343a8 926 00 04 00 00 | buf2            long    1024
343ac 927 01 00 00 00 | dlptr2          long    1
343b0 928 01 00 00 00 | dl              long    1
343b4 929             | 
343b4 929 00 00 00 00 | buf1c long 0
343b8 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
343bc 92b 01 00 00 00 | framebuf2       long    1
343c0 92c 01 00 00 00 | hsync0          long    1
343c4 92d 01 00 00 00 | hsync1          long    1
343c8 92e             | 
343c8 92e 01 00 00 00 | t1              long    1
343cc 92f 00 00 00 00 | t2 long 0
343d0 930 00 00 00 00 | t3 long 0
343d4 931 00 00 00 00 | t4 long 0
343d8 932             | 
343d8 932 00 00 00 00 | rcnt            long    0  'dl repeat count
343dc 933 00 00 00 00 | rcnt2           long    0
343e0 934 00 00 00 00 | rcnt2a          long    0
343e4 935 00 00 00 00 | roffset         long    0
343e8 936 00 00 00 00 | rdl             long    0  'dl repeat line
343ec 937 00 00 00 00 | dlc             long    0  'dl command
343f0 938             | 
343f0 938 FF FF FF FF | affffffff       long    $ffffffff
343f4 939 00 00 00 00 | sprite1pointer long 0
343f8 93a 00 00 00 00 | sprite1xy      long 0
343fc 93b 00 00 00 00 | sprite1wh      long 0
34400 93c 00 00 00 00 | sprite2pointer long 0
34404 93d 00 00 00 00 | sprite2xy      long 0
34408 93e 00 00 00 00 | sprite2wh      long 0
3440c 93f 00 00 00 00 | sprite3pointer long 0
34410 940 00 00 00 00 | sprite3xy      long 0
34414 941 00 00 00 00 | sprite3wh      long 0
34418 942 00 00 00 00 | sprite4pointer long 0
3441c 943 00 00 00 00 | sprite4xy      long 0
34420 944 00 00 00 00 | sprite4wh      long 0
34424 945 00 00 00 00 | sprite5pointer long 0
34428 946 00 00 00 00 | sprite5xy      long 0
3442c 947 00 00 00 00 | sprite5wh      long 0
34430 948 00 00 00 00 | sprite6pointer long 0
34434 949 00 00 00 00 | sprite6xy      long 0
34438 94a 00 00 00 00 | sprite6wh      long 0
3443c 94b 00 00 00 00 | sprite7pointer long 0
34440 94c 00 00 00 00 | sprite7xy      long 0
34444 94d 00 00 00 00 | sprite7wh      long 0
34448 94e 00 00 00 00 | sprite8pointer long 0
3444c 94f 00 00 00 00 | sprite8xy      long 0
34450 950 00 00 00 00 | sprite8wh      long 0
34454 951 00 00 00 00 | sprite9pointer long 0
34458 952 00 00 00 00 | sprite9xy      long 0
3445c 953 00 00 00 00 | sprite9wh      long 0
34460 954 00 00 00 00 | sprite10pointer long 0
34464 955 00 00 00 00 | sprite10xy      long 0
34468 956 00 00 00 00 | sprite10wh      long 0
3446c 957 00 00 00 00 | sprite11pointer long 0
34470 958 00 00 00 00 | sprite11xy      long 0
34474 959 00 00 00 00 | sprite11wh      long 0
34478 95a 00 00 00 00 | sprite12pointer long 0
3447c 95b 00 00 00 00 | sprite12xy      long 0
34480 95c 00 00 00 00 | sprite12wh      long 0
34484 95d 00 00 00 00 | sprite13pointer long 0
34488 95e 00 00 00 00 | sprite13xy      long 0
3448c 95f 00 00 00 00 | sprite13wh      long 0
34490 960 00 00 00 00 | sprite14pointer long 0
34494 961 00 00 00 00 | sprite14xy      long 0
34498 962 00 00 00 00 | sprite14wh      long 0
3449c 963 00 00 00 00 | sprite15pointer long 0
344a0 964 00 00 00 00 | sprite15xy      long 0
344a4 965 00 00 00 00 | sprite15wh      long 0
344a8 966 00 00 00 00 | sprite16pointer long 0
344ac 967 00 00 00 00 | sprite16xy      long 0
344b0 968 00 00 00 00 | sprite16wh      long 0
344b4 969 00 00 00 00 | sprite17pointer long 0
344b8 96a 00 00 00 00 | sprite17xy      long 0
344bc 96b 00 00 00 00 | sprite17wh      long 0
344c0 96c 00 00 00 00 | sprite18pointer long 0
344c4 96d 00 00 00 00 | sprite18xy      long 0
344c8 96e 00 00 00 00 | sprite18wh      long 0
344cc 96f 00 00 00 00 | spritenum long 0
344d0 970             | 
344d0 970 00 00 00 00 | spriteline long 0
344d4 971 84 03 00 00 | sprite_x long 900
344d8 972 00 00 00 00 | sprite_y long 0
344dc 973 10 00 00 00 | sprite_w long 16
344e0 974 40 00 00 00 | sprite_h long 64
344e4 975 00 00 00 00 | l2 long 0
344e8 976 00 00 00 00 | t5 long 0
344ec 977 00 00 00 00 | t6 long 0
344f0 978 00 00 00 00 | t7 long 0
344f4 979 00 00 00 00 | t8 long 0
344f8 97a 00 00 00 00 | t9 long 0
344fc 97b 00 00 00 00 | preloadaddr long 0
34500 97c 00 00 00 00 | preloadlineaddr long 0
34504 97d 00 04 00 00 | a1024 long 1024
34508 97e             | 
34508 97e E0 03 00 00 | aa long 992
3450c 97f FF 03 00 00 | a1023 long 1023
34510 980 00 10 00 00 | a4096 long 4096
34514 981             |  fit 368
34514 981             | _psram_spin2_dat_
34514 981 00 00 00 00 
      ...             
3460c 9bf 00 00 00 00 
34610 9c0 00 00 00 00 |     listdata long 0[8*8]
34614 9c1             |             orgh
34614                 | 
34614                 | ' driver state
34614     FF FF FF FF | drivercog   long    -1  ' COG id of driver
34618     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
3461c                 | 
3461c                 | ' delay profile
3461c     07 00 00 00 
34620     00 CF 7B 05 
34624     80 D1 F0 08 
34628     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
3462c     80 C4 60 0F 
34630     80 39 7A 12 
34634     40 2D D9 13 
34638     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
3463c                 | 
3463c                 | ' data to be passed to driver when starting it
3463c                 | startupData
3463c     00 00 00 00 |     long    0           ' current frequency
34640     00 00 00 00 |     long    FLAGS       ' optional flags for driver
34644     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
34648     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
3464c     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
34650     5C 46 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
34654     DC 46 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
34658     FC 46 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
3465c                 | 
3465c                 | ' data for memory
3465c                 | deviceData
3465c                 |     ' 16 bank parameters follow (16MB per bank)
3465c     00 00 00 00 
      ...             
34694     00 00 00 00 
34698     00 00 00 00 |     long    0[16]                               ' banks 0-15
3469c                 |     ' 16 banks of pin parameters follow
3469c     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
346a0     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
346a4     FF FF FF FF 
      ...             
346d4     FF FF FF FF 
346d8     FF FF FF FF |     long    -1[14]                              ' banks 2-15
346dc                 | 
346dc                 | ' data for COG polling
346dc                 | qosData 
346dc     00 00 FF FF 
346e0     00 00 FF FF 
346e4     00 00 FF FF 
346e8     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
346ec     00 00 FF FF 
346f0     00 00 FF FF 
346f4     00 00 FF FF 
346f8     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
346fc                 |     
346fc                 | ' mailbox storage
346fc                 | 
346fc                 | mailboxes
346fc     00 00 00 00 
      ...             
34754     00 00 00 00 
34758     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
3475c                 | 	alignl
3475c                 | _psram16drv_spin2_dat_
3475c                 |                             orgh
3475c     00 00 00 00 
      ...             
34774     00 00 00 00 
34778     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
3477c                 | 
3477c                 | driver_start
3477c                 |                             org
3477c 000             | '..................................................................................................
3477c 000             | ' Memory layout for COG RAM once operational:
3477c 000             | '
3477c 000             | '  COG RAM address      Usage
3477c 000             | '  ---------------      ----
3477c 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
3477c 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
3477c 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
3477c 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
3477c 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
3477c 000             | '  ~$198-$1F3           State and register variables
3477c 000             | '
3477c 000             | ' Also during driver COG startup:
3477c 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
3477c 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
3477c 000             | '..................................................................................................
3477c 000             |                             
3477c 000             | ' Mailbox storage after vector initialization
3477c 000             | 
3477c 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
34780 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
34784 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
34788 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
3478c 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
34790 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
34794 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
34798 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
3479c 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
347a0 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
347a4 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
347a8 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
347ac 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
347b0 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
347b4 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
347b8 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
347bc 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
347c0 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
347c4 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
347c8 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
347cc 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
347d0 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
347d4 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
347d8 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
347dc 018             | 
347dc 018             | ' Mailbox parameter addresses per COG once patched
347dc 018             |                             
347dc 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
347e0 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
347e4 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
347e8 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
347ec 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
347f0 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
347f4 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
347f8 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
347fc 020             | 
347fc 020             | '..................................................................................................
347fc 020             | ' Per COG request and state setup and service branching
347fc 020             |         
347fc 020             | cog0                 
347fc 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
34800 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
34804 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
34808 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
3480c 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
34810 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
34814 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
34818 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
3481c 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
34820 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
34824 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
34828 02b 33 CA 63 FD |                             execf   request-0               'jump to service
3482c 02c             | cog1                        
3482c 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
34830 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
34834 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
34838 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
3483c 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
34840 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
34844 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
34848 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
3484c 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
34850 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
34854 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
34858 037 33 CA 63 FD |                             execf   request-0               'jump to service
3485c 038             | cog2                         
3485c 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
34860 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
34864 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
34868 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
3486c 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
34870 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
34874 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
34878 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
3487c 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
34880 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
34884 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
34888 043 33 CA 63 FD |                             execf   request-0               'jump to service
3488c 044             | cog3                        
3488c 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
34890 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
34894 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
34898 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
3489c 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
348a0 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
348a4 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
348a8 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
348ac 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
348b0 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
348b4 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
348b8 04f 33 CA 63 FD |                             execf   request-0               'jump to service
348bc 050             | cog4                        
348bc 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
348c0 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
348c4 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
348c8 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
348cc 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
348d0 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
348d4 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
348d8 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
348dc 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
348e0 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
348e4 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
348e8 05b 33 CA 63 FD |                             execf   request-0               'jump to service
348ec 05c             | cog5                        
348ec 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
348f0 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
348f4 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
348f8 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
348fc 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
34900 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
34904 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
34908 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
3490c 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
34910 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
34914 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
34918 067 33 CA 63 FD |                             execf   request-0               'jump to service
3491c 068             | cog6                        
3491c 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
34920 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
34924 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
34928 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
3492c 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
34930 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
34934 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
34938 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
3493c 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
34940 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
34944 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
34948 073 33 CA 63 FD |                             execf   request-0               'jump to service
3494c 074             | cog7                        
3494c 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
34950 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
34954 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
34958 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
3495c 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
34960 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
34964 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
34968 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
3496c 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
34970 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
34974 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
34978 07f 33 CA 63 FD |                             execf   request-0               'jump to service
3497c 080             |                             fit     128
3497c 080             | 
3497c 080             |                             fit     128
3497c 080             | pad                         long    0[128-$]                'align init code to $80
3497c 080             | 
3497c 080             | '..................................................................................................
3497c 080             | 
3497c 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
3497c 080             | 
3497c 080             | init                        
3497c 080             |                             ' get driver scratch long address in hub
3497c 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
34980 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
34984 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
34988 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
3498c 084             |                     
3498c 084             |                             ' read in the additional LUT RAM code
3498c 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
34990 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
34994 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
34998 087             | 
34998 087             |                             ' read the startup parameters
34998 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
3499c 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
349a0 089             | 
349a0 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
349a0 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
349a4 08a             | 
349a4 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
349a8 08b 01 00 00 5F 
349ac 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
349b0 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
349b4 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
349b8 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
349bc 090             | 
349bc 090             |                             ' setup data pin modes and data bus pin group in streamer commands
349bc 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
349c0 091 01 00 00 FF 
349c4 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
349c8 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
349cc 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
349d0 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
349d4 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
349d8 097 08 DE 47 F5 |                             or      a, #8
349dc 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
349e0 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
349e4 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
349e8 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
349ec 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
349f0 09d 01 DE 07 F1 |                             add     a, #1
349f4 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
349f8 09f             |  
349f8 09f             |                             ' setup device control pin states
349f8 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
349fc 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
34a00 0a1 01 00 00 FF 
34a04 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
34a08 0a3             | 
34a08 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
34a0c 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
34a10 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
34a14 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
34a18 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
34a1c 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
34a20 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
34a24 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
34a28 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
34a2c 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
34a30 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
34a34 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
34a38 0af             | pinloop
34a38 0af             |                             ' generate minimum CE high time before access
34a38 0af A1 07 00 FF 
34a3c 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
34a40 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
34a44 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
34a48 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
34a4c 0b4 1F DE 63 FD |                             waitx   a                       'delay
34a50 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
34a54 0b6             | 
34a54 0b6             |                             ' setup the COG mailboxes and addresses 
34a54 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
34a58 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
34a5c 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
34a60 0b9             | 
34a60 0b9 28 2E 64 FD |                             setq    #24-1
34a64 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
34a68 0bb             | 
34a68 0bb             |                             ' setup the polling loop for active COGs 
34a68 0bb 01 C2 63 FD |                             cogid   id
34a6c 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
34a70 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
34a74 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
34a78 0bf 0A F0 07 F6 |                             mov     ptra, #10
34a7c 0c0 E1 F1 03 FA |                             mul     ptra, id
34a80 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
34a84 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
34a88 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
34a8c 0c4 03 C2 07 FA |                             mul     id, #3
34a90 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
34a94 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
34a98 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
34a9c 0c8 D8 01 B0 FD |                             call    #reloadcogs
34aa0 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
34aa4 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
34aa8 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
34aa8 0cb D8 E5 B7 F9 |                             setd    d, #addr1
34aac 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
34ab0 0cd 08 04 DC FC |                             rep     #2, #8
34ab4 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
34ab8 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
34abc 0d0             | 
34abc 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
34abc 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
34abc 0d0 01 C2 63 FD |                             cogid   id
34ac0 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
34ac4 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
34ac8 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
34acc 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
34ad0 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
34ad4 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
34ad8 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
34adc 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
34ae0 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
34ae4 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
34ae8 0db 3F E4 A7 F9 |                             alti    d, #%111_111
34aec 0dc 00 00 00 F6 |                             mov     0-0, 0-0
34af0 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
34af4 0de A5 E5 03 F1 |                             add     d, const512
34af8 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
34afc 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
34b00 0e1 00 00 00 F6 |                             mov     0-0, 0-0
34b04 0e2             |                             
34b04 0e2             |                             ' setup register values for control vector loop setup after we return
34b04 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
34b08 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
34b0c 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
34b10 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
34b14 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
34b18 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
34b1c 0e8 D0 C3 8F F9 |                             altd    id, #id0
34b20 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
34b24 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
34b28 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
34b2c 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
34b30 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
34b34 0ee             |  
34b34 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
34b38 0ef 07 CA 07 F5 |                             and     request, #7
34b3c 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
34b40 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
34b44 0f2             |                             fit     $100                    'ensure all init code fits this space
34b44 0f2             | 
34b44 0f2             |                             fit     $100                    'ensure all init code fits this space
34b44 0f2             | 
34b44 0f2 00 00 00 00 
      ...             
34b74 0fe 00 00 00 00 
34b78 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
34b7c 100             | 
34b7c 100             | '..................................................................................................
34b7c 100             | ' Error result handling and COG notification of request completion
34b7c 100             | 
34b7c 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
34b80 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
34b84 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
34b88 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
34b8c 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
34b90 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
34b94 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
34b98 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
34b9c 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
34ba0 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
34ba4 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
34ba8 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
34bac 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
34bb0 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
34bb4 10e             | ' Poller re-starts here after a COG is serviced
34bb4 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
34bb8 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
34bbc 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
34bc0 111             | ' Main dynamic polling loop repeats until a request arrives
34bc0 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
34bc4 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
34bc8 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
34bcc 114             | 
34bcc 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
34bd0 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
34bd4 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
34bd8 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
34bdc 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
34be0 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
34be4 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
34be8 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
34bec 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
34bf0 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
34bf4 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
34bf8 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
34bfc 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
34c00 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
34c04 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
34c08 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
34c0c 124             | 
34c0c 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
34c10 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
34c14 126             |  
34c14 126             | '..................................................................................................
34c14 126             | ' List handler                               
34c14 126             | 
34c14 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
34c18 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
34c1c 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
34c20 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
34c24 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
34c28 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
34c2c 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
34c30 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
34c34 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
34c38 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
34c3c 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
34c40 131 33 00 60 FD |                             execf   0-0                     'process the request 
34c44 132             | 
34c44 132             | '..................................................................................................
34c44 132             | ' Restoring per COG state and resuming where we left off
34c44 132             | 
34c44 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
34c48 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
34c4c 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
34c50 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
34c54 136 D8 CB FB F8 |                             getbyte request, addr1, #3
34c58 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
34c5c 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
34c60 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
34c64 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
34c68 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
34c6c 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
34c70 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
34c74 13e             |                    
34c74 13e             | '..................................................................................................
34c74 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
34c74 13e             | 
34c74 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
34c78 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
34c7c 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
34c80 141 D0 DF B7 F9 |                             setd    a, #id0
34c84 142 D8 DF BF F9 |                             sets    a, #addr1
34c88 143 FE FF FF FF 
34c8c 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
34c90 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
34c94 146 3F DE A7 F9 |                             alti    a, #%111_111 
34c98 147 00 00 F0 F9 |                             muxq    0-0, 0-0
34c9c 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
34ca0 149 01 E2 63 FD |                             cogid   c
34ca4 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
34ca8 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
34cac 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
34cb0 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
34cb4 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
34cb8 14f 00 E0 03 F6 |                             mov     b, 0-0
34cbc 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
34cc0 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
34cc4 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
34cc8 153 0C 00 90 AD |             if_z            jmp     #excluded               
34ccc 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
34cd0 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
34cd4 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
34cd8 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
34cdc 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
34ce0 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
34ce4 15a             | 
34ce4 15a             | 'determine priority cogs and build instructions for the polling sequence
34ce4 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
34ce8 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
34cec 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
34cf0 15d             | 
34cf0 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
34cf4 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
34cf8 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
34cfc 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
34d00 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
34d04 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
34d08 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
34d0c 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
34d10 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
34d14 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
34d18 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
34d1c 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
34d20 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
34d24 16a             | endprioloop
34d24 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
34d28 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
34d2c 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
34d30 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
34d34 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
34d38 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
34d3c 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
34d40 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
34d44 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
34d48 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
34d4c 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
34d50 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
34d54 176             | 
34d54 176             | ' populate the round robin COG polling instructions
34d54 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
34d58 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
34d5c 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
34d60 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
34d64 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
34d68 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
34d6c 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
34d70 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
34d74 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
34d78 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
34d7c 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
34d80 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
34d84 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
34d88 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
34d8c 184             | '..................................................................................................
34d8c 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
34d8c 184             | 
34d8c 184             | set_latency                                                 '            (a) set latency
34d8c 184             | get_latency                                                 '            (b) get latency
34d8c 184             | set_burst                                                   '            (c) set burst size of bank
34d8c 184             | get_burst                                                   '            (d) get burst size of bank
34d8c 184             |                                                             '            (e) dump state
34d8c 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
34d90 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
34d94 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
34d98 187             |                                                             ' | | | | e  account for following AUGS
34d98 187 04 00 00 FF 
34d9c 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
34da0 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
34da4 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
34da8 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
34dac 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
34db0 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
34db4 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
34db8 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
34dbc 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
34dc0 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
34dc4 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
34dc8 193             | 
34dc8 193             | '..................................................................................................
34dc8 193             | ' Misc EXECF code
34dc8 193             | 
34dc8 193 33 72 63 FD | start_read_exec             execf   newburstr
34dcc 194 33 7C 63 FD | start_write_exec            execf   resumewrites
34dd0 195 33 78 63 FD | continue_read_exec          execf   lockedreads
34dd4 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
34dd8 197             | 
34dd8 197             | '..................................................................................................
34dd8 197             | ' Variables
34dd8 197             | 
34dd8 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
34ddc 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
34de0 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
34de4 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
34de8 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
34dec 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
34df0 19d             | 
34df0 19d 00 00 00 80 | xfreq1          long    $80000000
34df4 19e 00 00 00 40 | xfreq2          long    $40000000
34df8 19f 03 00 00 00 | delay           long    3
34dfc 1a0             | 
34dfc 1a0             | lutcodeaddr                 
34dfc 1a0             | startupparams
34dfc 1a0             | excludedcogs                                    'careful: shared register use!
34dfc 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
34e00 1a1 00 00 00 00 | flags           long    0
34e04 1a2             | mask                                            'careful: shared register use!
34e04 1a2 00 00 00 00 | resetmaskA      long    0
34e08 1a3             | limit                                           'careful: shared register use!
34e08 1a3 00 00 00 00 | resetmaskB      long    0
34e0c 1a4 00 00 00 00 | datapins        long    0
34e10 1a5             | const512                                        'careful: shared register use!
34e10 1a5 00 00 00 00 | devicelist      long    0
34e14 1a6 00 00 00 00 | coglist         long    0
34e18 1a7 00 00 00 00 | mbox            long    0 
34e1c 1a8             | 
34e1c 1a8             | clkpin                                          'shared with code patched during init
34e1c 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
34e20 1a9             | cspin                                           'shared with code patched during init
34e20 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
34e24 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
34e28 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
34e2c 1ac 01 00 00 00 | clkdelay        long    1
34e30 1ad 00 00 00 00 | regdatabus      long    0
34e34 1ae             | 
34e34 1ae 10 00 00 00 | deviceaddr      long    $10
34e38 1af             | rrcounter
34e38 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
34e3c 1b0             | 
34e3c 1b0             | ' jump addresses for the per COG handlers
34e3c 1b0 20 00 00 00 | cog0_handler    long    cog0
34e40 1b1 2C 00 00 00 | cog1_handler    long    cog1
34e44 1b2 38 00 00 00 | cog2_handler    long    cog2
34e48 1b3 44 00 00 00 | cog3_handler    long    cog3
34e4c 1b4 50 00 00 00 | cog4_handler    long    cog4
34e50 1b5 5C 00 00 00 | cog5_handler    long    cog5
34e54 1b6 68 00 00 00 | cog6_handler    long    cog6
34e58 1b7 74 00 00 00 | cog7_handler    long    cog7
34e5c 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
34e60 1b9             | 
34e60 1b9             | ' EXECF sequences
34e60 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
34e64 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
34e68 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
34e6c 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
34e70 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
34e74 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
34e78 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
34e7c 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
34e7c 1c0             | 
34e7c 1c0             | 
34e7c 1c0             | ' SKIPF sequences
34e7c 1c0             | skiptable
34e7c 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
34e80 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
34e84 1c2 00 00 00 00 |                 long    0                      ' read modify write long
34e88 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
34e8c 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
34e90 1c5 00 00 00 00 | pattern2        long    0
34e94 1c6 00 00 00 00 | pattern3        long    0
34e98 1c7 77 02 00 00 | singlelong      long    %1001110111  
34e9c 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
34ea0 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
34ea4 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
34ea8 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
34eac 1cc             | 
34eac 1cc             | ' LUT RAM address values
34eac 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
34eb0 1cd DD 02 00 00 | continue_read   long    continue_read_lut
34eb4 1ce DB 02 00 00 | continue_write  long    continue_write_lut
34eb8 1cf F6 02 00 00 | noread          long    noread_lut
34ebc 1d0             | 
34ebc 1d0 00 00 00 00 | id0             long    0
34ec0 1d1 01 00 00 00 | id1             long    1
34ec4 1d2 02 00 00 00 | id2             long    2
34ec8 1d3 03 00 00 00 | id3             long    3
34ecc 1d4 04 00 00 00 | id4             long    4
34ed0 1d5 05 00 00 00 | id5             long    5
34ed4 1d6 06 00 00 00 | id6             long    6
34ed8 1d7 07 00 00 00 | id7             long    7
34edc 1d8             | 
34edc 1d8             | 'These next 10 request registers below are also temporarily reused during init 
34edc 1d8             | 'and COG updates and need to follow immediately after id0-id7
34edc 1d8 00 00 00 00 | addr1           long    0
34ee0 1d9 00 00 00 00 | hubdata         long    0
34ee4 1da 00 00 00 00 | count           long    0
34ee8 1db 00 00 00 00 | addr2           long    0
34eec 1dc 00 00 00 00 | total           long    0
34ef0 1dd 00 00 00 00 | offset1         long    0
34ef4 1de 00 00 00 00 | offset2         long    0
34ef8 1df 00 00 00 00 | link            long    0
34efc 1e0             | 
34efc 1e0             | burstwrite                                      'note shared register use during init
34efc 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
34f00 1e1 00 00 00 00 | id              long    0
34f04 1e2             | 
34f04 1e2 00 00 00 00 | header          long    0
34f08 1e3 00 00 00 00 | trailer         long    0
34f0c 1e4 00 00 00 00 | cmdaddr         long    0
34f10 1e5 00 00 00 00 | request         long    0
34f14 1e6 00 00 00 00 | rrlimit         long    0
34f18 1e7 00 00 00 00 | pinconfig       long    0
34f1c 1e8 00 00 00 00 | clks            long    0
34f20 1e9 00 00 00 00 | resume          long    0
34f24 1ea 00 00 00 00 | orighubsize     long    0
34f28 1eb 00 00 00 00 | wrclks          long    0
34f2c 1ec             | 
34f2c 1ec 00 00 00 00 | pattern         long    0
34f30 1ed 00 00 00 00 | hubscratch      long    0
34f34 1ee 00 10 00 00 | val4k           long    4096
34f38 1ef             | 
34f38 1ef             | ' temporary general purpose regs
34f38 1ef 00 00 00 00 | a               long    0
34f3c 1f0 00 00 00 00 | b               long    0
34f40 1f1 00 00 00 00 | c               long    0
34f44 1f2 00 00 00 00 | d               long    0
34f48 1f3             |                 fit     502
34f48 1f3             | 
34f48 1f3             |                 fit     502
34f48 1f3             | 
34f48 1f3             | '..................................................................................................
34f48 1f3             | 
34f48 1f3             |             orgh
34f48                 | 
34f48                 | lut_code
34f48                 | 'HW init code up to 80 longs
34f48                 | 
34f48                 | '..................................................................................................
34f48                 | ' Memory layout for LUT RAM once operational:
34f48                 | '
34f48                 | '  LUT RAM address      Usage
34f48                 | '  ---------------      ----
34f48                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
34f48                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
34f48                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
34f48                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
34f48                 | '
34f48                 | ' Also during driver COG startup:
34f48                 | ' $230-$24F is used for HW init setup
34f48                 | ' $250-$26F is used as temporary vector storage 
34f48                 | '..................................................................................................
34f48                 | 
34f48                 |                 org $230    
34f48 230             | 
34f48 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
34f48 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
34f4c 231 24 16 60 FD |                             pollxfi
34f50 232 FF AA 2A FF 
34f54 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
34f58 234 28 00 B0 FD |                             call    #sendqspi
34f5c 235 07 F8 07 FF 
34f60 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
34f64 237 28 00 B0 FD |                             call    #sendspi
34f68 238 F8 07 78 FF 
34f6c 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
34f70 23a 1C 00 B0 FD |                             call    #sendspi
34f74 23b 7F 78 78 FF 
34f78 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
34f7c 23d 10 00 B0 FD |                             call    #sendspi 
34f80 23e 2D 00 64 FD |                             ret
34f84 23f             | 
34f84 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
34f88 240 32 0C 64 FD |                             skipf   #%110
34f8c 241 9C EF 03 F6 |                             mov     pb, xsendimm
34f90 242             | 
34f90 242 10 D0 07 F6 | sendspi                     mov     clks, #16
34f94 243 97 EF 03 F6 |                             mov     pb, ximm8lut
34f98 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
34f9c 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
34fa0 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
34fa4 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
34fa8 248 24 36 60 FD |                             waitxfi                         'wait for the completion
34fac 249 50 48 63 FD |                             fltl    datapins                'float data bus
34fb0 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
34fb4 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
34fb8 24c             | 
34fb8 24c 00 00 00 00 
34fbc 24d 00 00 00 00 
34fc0 24e 00 00 00 00 
34fc4 24f 00 00 00 00 |                 long    0[$270-32-$]
34fc8 250             |                 fit     $270-32  ' keep room for 32 vector longs
34fc8 250             |     
34fc8 250             |                 fit     $270-32  ' keep room for 32 vector longs
34fc8 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
34fc8 250             | rw_vect ' PSRAM jump vectors
34fc8 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
34fcc 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
34fd0 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
34fd4 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
34fd8 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
34fdc 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
34fe0 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
34fe4 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
34fe8 258             | ro_vect ' R/O PSRAM jump vectors
34fe8 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
34fec 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
34ff0 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
34ff4 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
34ff8 25c 00 01 00 00 |                 long    unsupported
34ffc 25d 00 01 00 00 |                 long    unsupported
35000 25e 00 01 00 00 |                 long    unsupported
35004 25f 00 01 00 00 |                 long    unsupported
35008 260             | ctrl_vect ' Control jump vectors
35008 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
3500c 261 00 01 00 00 |                 long    unsupported
35010 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
35014 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
35018 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
3501c 265 00 01 00 00 |                 long    unsupported
35020 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
35024 267 3E 01 00 00 |                 long    reconfig 
35028 268             | no_vect ' Invalid bank jump vectors
35028 268 01 01 00 00 |                 long    invalidbank
3502c 269 01 01 00 00 |                 long    invalidbank
35030 26a 01 01 00 00 |                 long    invalidbank
35034 26b 01 01 00 00 |                 long    invalidbank
35038 26c 01 01 00 00 |                 long    invalidbank
3503c 26d 01 01 00 00 |                 long    invalidbank
35040 26e 01 01 00 00 |                 long    invalidbank
35044 26f 01 01 00 00 |                 long    invalidbank
35048 270             |                 fit     $270
35048 270             | 
35048 270             |                 fit     $270
35048 270             | '..................................................................................................
35048 270             | ' PSRAM READS
35048 270             |                                                             ' a b c d e f
35048 270             |                                                             ' B W L B R L  (a) byte read
35048 270             |                                                             ' Y O O U E O  (b) word read
35048 270             |                                                             ' T R N R S C  (c) long read
35048 270             |                                                             ' E D G S U K  (d) new burst read
35048 270             |                                                             '       T M E  (e) resumed sub-burst
35048 270             |                                                             '         E D  (f) locked sub-burst
35048 270             | 
35048 270             | 
35048 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
3504c 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
35050 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
35054 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
35058 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
3505c 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
35060 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
35064 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
35068 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
3506c 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
35070 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
35074 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
35078 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
3507c 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
35080 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
35084 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
35088 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
3508c 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
35090 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
35094 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
35098 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
3509c 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
350a0 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
350a4 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
350a8 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
350ac 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
350b0 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
350b4 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
350b8 28c             | 
350b8 28c             |                             ' fall through to read bursts
350b8 28c             |                         
350b8 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
350b8 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
350bc 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
350c0 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
350c4 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
350c8 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
350cc 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
350d0 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
350d4 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
350d8 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
350dc 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
350e0 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
350e4 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
350e8 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
350ec 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
350f0 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
350f4 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
350f8 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
350fc 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
35100 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
35104 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
35108 2a0 E8 D1 03 F1 |                             add     clks, clks
3510c 2a1             | readcommon
3510c 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
35110 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
35114 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
35118 2a4             | 
35118 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3511c 2a5 69 C8 63 FD |                             rev     cmdaddr
35120 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
35124 2a7 61 C8 63 FD |                             mergeb  cmdaddr
35128 2a8             | 
35128 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
3512c 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
35130 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
35130 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
35134 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
35138 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
3513c 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
35140 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
35140 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
35144 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
35148 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
3514c 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
35150 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
35154 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
35158 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
35158 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
3515c 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
35160 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
35164 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
35168 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
3516c 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
35170 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
35174 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
35178 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
3517c 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
35180 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
35184 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
35188 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
3518c 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
35190 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
35190 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
35194 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
35198 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
3519c 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
351a0 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
351a4 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
351a8 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
351ac 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
351b0 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
351b4 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
351b8 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
351bc 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
351c0 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
351c4 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
351c8 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
351cc 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
351d0 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
351d4 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
351d8 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
351dc 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
351e0 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
351e4 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
351e8 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
351ec 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
351f0 2da 10 03 90 FD |                             jmp     #writecommon
351f4 2db             | 
351f4 2db             | '..................................................................................................
351f4 2db             | ' Burst continuation testing
351f4 2db             | 
351f4 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
351f8 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
351fc 2dd             | continue_read_lut          
351fc 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
35200 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
35204 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
35208 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
3520c 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
35210 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
35214 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
35218 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
3521c 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
35220 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
35224 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
35228 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
3522c 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
35230 2ea             | 
35230 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
35234 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
35238 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
3523c 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
35240 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
35244 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
35248 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
3524c 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
35250 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
35254 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
35258 2f4 2A 1C 66 0D |             _ret_           push    #poller
3525c 2f5             | 
3525c 2f5             | 
3525c 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
35260 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
35260 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
35264 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
35268 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
3526c 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
35270 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
35274 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
35278 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
3527c 2fd 2D 00 64 FD |                             ret                             ' | continue processing
35280 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
35284 2ff             | '..................................................................................................
35284 2ff             | ' Completion of requests
35284 2ff             | 
35284 2ff             | complete_rw_lut             
35284 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
35288 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
3528c 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
35290 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
35294 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
35298 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
3529c 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
352a0 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
352a4 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
352a8 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
352ac 309 32 62 64 AD |             if_z            skipf   #%110001
352b0 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
352b4 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
352b8 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
352bc 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
352c0 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
352c4 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
352c8 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
352cc 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
352d0 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
352d4 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
352d8 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
352dc 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
352e0 316             |                                                             ' skipcase (a) gfx copy to/from hub
352e0 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
352e0 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
352e0 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
352e4 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
352e8 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
352ec 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
352f0 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
352f4 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
352f8 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
352fc 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
35300 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
35304 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
35308 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
3530c 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
35310 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
35314 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
35318 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
3531c 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
35320 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
35324 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
35328 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
3532c 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
35330 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
35334 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
35338 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
3533c 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
35340 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
35344 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
35348 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
3534c 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
35350 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
35354 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
35358 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
3535c 335 DF B7 03 A6 |             if_z            mov     addr2, link
35360 336 34 FF 9F AD |             if_z            jmp     #checknext
35364 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
35368 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3536c 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
35370 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
35374 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
35378 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
3537c 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
35380 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
35384 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
35388 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
3538c 341             | 
3538c 341             | '..................................................................................................
3538c 341             | ' PSRAM WRITES
3538c 341             |                                                             '  a b c d e f g h
3538c 341             | 
3538c 341             |                                                             '  B W L F B R L L (a) byte write(s)
3538c 341             |                                                             '  Y O O I U E O O (b) word write(s)
3538c 341             |                                                             '  T R N L R S C C (c) long write(s)
3538c 341             |                                                             '  E D G L S U K K (d) resumed fill
3538c 341             |                                                             '          T M E E (e) new burst write
3538c 341             |                                                             '            E D D (f) resumed burst
3538c 341             |                                                             '              F B (g) locked fill
3538c 341             |                                                             '              I U (h) locked burst write
3538c 341             |                                                             '              L R 
3538c 341             |                                                             '              L S 
3538c 341             |                                                             '                T 
3538c 341             | 
3538c 341             | w_single                   
3538c 341             | w_fill_cont           
3538c 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
35390 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
35394 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
35398 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
3539c 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
353a0 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
353a4 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
353a8 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
353ac 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
353b0 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
353b4 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
353b8 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
353bc 34d             |                ' disable call to r_resume_burst for single longs when z=0
353bc 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
353c0 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
353c4 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
353c8 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
353cc 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
353d0 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
353d4 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
353d8 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
353dc 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
353e0 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
353e4 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
353e8 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
353ec 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
353f0 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
353f4 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
353f8 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
353fc 35d             |         
353fc 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
353fc 35d             |             '
353fc 35d             |             '  At least one of these 3 optional components will be sent
353fc 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
353fc 35d             |             '     body - N x full longs of data
353fc 35d             |             '     trailer - last partial long of data
353fc 35d             |             '
353fc 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
353fc 35d             |             '
353fc 35d             |             'Case    Type                           Sends
353fc 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
353fc 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
353fc 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
353fc 35d             |             ' 4)     Multiple long fill             body only
353fc 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
353fc 35d             | 
353fc 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
353fc 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
35400 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
35404 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
35408 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3540c 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
35410 362 13 8C 07 F6 |                             mov     pattern3, #%10011
35414 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
35418 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
3541c 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
35420 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
35424 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
35428 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
3542c 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
35430 36a             |                             
35430 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
35434 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
35438 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
3543c 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
35440 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
35444 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
35448 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
3544c 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
35450 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
35454 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
35458 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
3545c 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
35460 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
35464 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
35468 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
3546c 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
35470 37a             | 
35470 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
35474 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
35478 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
3547c 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
35480 37e             |                  
35480 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
35484 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
35488 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
3548c 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
35490 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
35494 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
35498 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
3549c 385             | 
3549c 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
354a0 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
354a4 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
354a8 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
354ac 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
354b0 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
354b4 38b             | 
354b4 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
354b4 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
354b8 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
354bc 38d 2A B0 63 FD |                             push    addr1                   'save address
354c0 38e             | 
354c0 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
354c0 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
354c4 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
354c8 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
354cc 391             |             
354cc 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
354d0 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
354d4 393 2B B0 63 FD |                             pop     addr1                   'restore address
354d8 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
354dc 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
354e0 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
354e4 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
354e8 398             | 
354e8 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
354ec 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
354f0 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
354f4 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
354f8 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
354fc 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
35500 39e             | 
35500 39e             |                             'trailer is done
35500 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
35504 39f             | 
35504 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
35508 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3550c 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
35510 3a2             | 
35510 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
35514 3a3 69 C8 63 FD |                             rev     cmdaddr                 
35518 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3551c 3a5 61 C8 63 FD |                             mergeb  cmdaddr
35520 3a6             |                             
35520 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
35524 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
35528 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
3552c 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
35530 3aa             |                                                          
35530 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
35534 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
35538 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
3553c 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
35540 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
35544 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
35548 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
3554c 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
35550 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
35554 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
35558 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
3555c 3b5             |  
3555c 3b5 59 52 63 FD |                             drvh    cspin
35560 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
35564 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
35568 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
3556c 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
35570 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
35574 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
35578 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
3557c 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
35580 3be EA E5 03 F6 |                             mov     d, orighubsize
35584 3bf EF E5 63 F0 |                             shl     d, a
35588 3c0 F2 E3 83 F1 |                             sub     c, d
3558c 3c1 DD E3 03 F1 |                             add     c, offset1
35590 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
35594 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
35598 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
3559c 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
355a0 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
355a4 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
355a8 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
355ac 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
355b0 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
355b4 3cb BB D3 03 F6 |                             mov     resume, restorefill
355b8 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
355bc 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
355c0 3ce 6C FC BF CD |             if_c            call    #yield
355c4 3cf 2D 00 64 FD |                             ret
355c8 3d0             |                            
355c8 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
355c8 3d0             |                       '     rczl    pa                      'rotate left into address offset
355c8 3d0             |                       '     rczl    c wcz                   'restore count and flags
355c8 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
355cc 3d1 02 EC 67 F0 |                             shl     pa, #2
355d0 3d2 28 06 64 AD |             if_z            setq    #3
355d4 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
355d8 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
355dc 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
355e0 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
355e4 3d7             | 
355e4 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
355e8 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
355ec 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
355f0 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
355f4 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
355f8 3dc             |                 fit 1024-32
355f8 3dc             |         
355f8 3dc             | 
355f8 3dc             | '..................................................................................................
355f8 3dc             | 
355f8 3dc             |                 fit 1024-32
355f8 3dc 00 00 00 00 
355fc 3dd 00 00 00 00 
35600 3de 00 00 00 00 
35604 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
35608 3e0             |                 org 1024-32
35608 000             | 
35608 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
35608 000 00 00 00 00 |                 long $0000
3560c 001 11 11 00 00 |                 long $1111
35610 002 22 22 00 00 |                 long $2222
35614 003 33 33 00 00 |                 long $3333
35618 004 44 44 00 00 |                 long $4444
3561c 005 55 55 00 00 |                 long $5555
35620 006 66 66 00 00 |                 long $6666
35624 007 77 77 00 00 |                 long $7777
35628 008 88 88 00 00 |                 long $8888
3562c 009 99 99 00 00 |                 long $9999
35630 00a AA AA 00 00 |                 long $aaaa
35634 00b BB BB 00 00 |                 long $bbbb
35638 00c CC CC 00 00 |                 long $cccc
3563c 00d DD DD 00 00 |                 long $dddd
35640 00e EE EE 00 00 |                 long $eeee
35644 00f FF FF 00 00 |                 long $ffff
35648 010             | 
35648 010             | 'masks
35648 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
3564c 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
35650 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
35654 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
35658 014             | 
35658 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
3565c 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
35660 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
35664 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
35668 018             | 
35668 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
3566c 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
35670 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
35674 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
35678 01c             | 
35678 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
3567c 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
35680 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
35684 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
35688 020             |         fit 1024
35688 020             | 
35688 020             |         fit 1024
35688 020             | 
35688 020             | '--------------------------------------------------------------------------------------------------
35688 020             |         orgh
35688                 | 
35688                 | gfxexpansion
35688                 |                             'simple line drawing graphics expansion of memory driver
35688                 |                             'jmp     #donerepeats                'just return for now
35688                 | 
35688     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
3568c     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
35690     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
35694     DD E1 03 F6 |                             mov     b, offset1              'get error term
35698     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
3569c     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
356a0     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
356a4     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
356a8     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
356ac     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
356b0     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
356b4     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
356b8     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
356bc     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
356c0     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
356c4     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
356c8     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
356cc     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
356d0     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
356d4     DC E5 33 F9 |                             getword d, total, #0            'get line width
356d8     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
356dc     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
356e0     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
356e4     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
356e8     C3 03 80 FD |                             jmp     #readmask               'continue filling
356ec                 | 	alignl
356ec                 | _usbnew_spin2_dat_
356ec                 |                 org     $000
356ec 000             | 
356ec 000             | usb_host_start
356ec 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
356f0 001             | 
356f0 001 03 00 00 FF 
356f4 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
356f8 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
356fc 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
35700 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
35704 006 29 70 63 FD |                 setq2   htmp
35708 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
3570c 008             | 
3570c 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
35710 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
35714 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
35718 00b             | 
35718 00b             | '------------------------------------------------------------------------------
35718 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
35718 00b             | ' special because the receiving function must not respond with either STALL or
35718 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
35718 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
35718 00b             | ' corrupt packet, it must ignore the transaction
35718 00b             | '------------------------------------------------------------------------------
35718 00b             | ' On entry:
35718 00b             | '   PTRA - start address of the SETUP data struct.
35718 00b             | ' On exit:
35718 00b             | '   retval - PID_ACK on success, otherwise error code.
35718 00b             | '------------------------------------------------------------------------------
35718 00b             | txn_setup
35718 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
3571c 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
35720 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
35724 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
35728 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
3572c 010             | .setup
3572c 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
35730 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35734 012 2D 00 64 AD |         if_z    ret
35738 013 7C 0B B0 FD |                 call    #retry_wait
3573c 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
35740 015 2D 00 64 AD |         if_z    ret
35744 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
35748 017 E0 FF 9F FD |                 jmp     #.setup
3574c 018             | 
3574c 018             | '------------------------------------------------------------------------------
3574c 018             | ' IN/INTERRUPT transaction.
3574c 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
3574c 018             | '------------------------------------------------------------------------------
3574c 018             | ' On entry:
3574c 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
3574c 018             | '     CRC(b19..23).
3574c 018             | ' On exit:
3574c 018             | '------------------------------------------------------------------------------
3574c 018             | txn_in
3574c 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
35750 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
35754 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
35758 01b             | 
35758 01b             |                 ' Fall through to urx_packet
35758 01b             | 
35758 01b             | '------------------------------------------------------------------------------
35758 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
35758 01b             | ' received are handshakes and IN DATAx.
35758 01b             | '------------------------------------------------------------------------------
35758 01b             | ' On entry:
35758 01b             | ' On exit:
35758 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
35758 01b             | '     returned.
35758 01b             | '------------------------------------------------------------------------------
35758 01b             | urx_packet
35758 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
3575c 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
35760 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
35764 01e 1A 92 63 FD |                 getct   hct2
35768 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
3576c 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
35770 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
35774 022             | .wait_sop
35774 022 22 A7 8A FA |                 rdpin   urx, dm
35778 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3577c 024 08 00 90 CD |         if_c    jmp     #.get_pid
35780 025 FC 25 CC FB |                 jnct2   #.wait_sop
35784 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
35788 027             | .get_pid
35788 027 28 02 B0 FD |                 call    #urx_next
3578c 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
35790 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
35794 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
35798 02b             | .chk_pid
35798 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3579c 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
357a0 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
357a4 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
357a8 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
357ac 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
357b0 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
357b4 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
357b8 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
357bc 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
357c0 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
357c4 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
357c8 037             | .ack_resend
357c8 037 22 A7 82 FA |                 rqpin   urx, dm
357cc 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
357d0 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
357d4 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
357d8 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
357dc 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
357e0 03d             | .chk_eop
357e0 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
357e4 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
357e8 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
357ec 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
357f0 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
357f4 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
357f8 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
357fc 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
35800 045 2D 00 64 FD |                 ret
35804 046             | .idle
35804 046 22 A7 82 FA |                 rqpin   urx, dm
35808 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3580c 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
35810 049 2D 00 64 FD |                 ret
35814 04a             | 
35814 04a             | '------------------------------------------------------------------------------
35814 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
35814 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
35814 04a             | ' if one is required.
35814 04a             | '------------------------------------------------------------------------------
35814 04a             | ' On entry:
35814 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
35814 04a             | ' On exit:
35814 04a             | '------------------------------------------------------------------------------
35814 04a             | utx_token
35814 04a 22 A7 82 FA |                 rqpin   urx, dm
35818 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3581c 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
35820 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
35824 04e 34 0D B0 CD |         if_c    call    #utx_pre
35828 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3582c 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
35830 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
35834 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
35838 053             | .next_byte
35838 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
3583c 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
35840 055             | .wait
35840 055 40 46 72 FD |                 testp   dp                      wc
35844 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
35848 057 23 03 08 FC |                 akpin   dp
3584c 058 22 A5 22 FC |                 wypin   utx, dm
35850 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
35854 05a             | 
35854 05a             | '------------------------------------------------------------------------------
35854 05a             | ' SETUP/OUT/INTERRUPT transaction.
35854 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
35854 05a             | '------------------------------------------------------------------------------
35854 05a             | ' On entry:
35854 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
35854 05a             | '     CRC(b19..23).
35854 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
35854 05a             | '   pkt_data - count of DATAx payload bytes to send.
35854 05a             | ' On exit:
35854 05a             | '------------------------------------------------------------------------------
35854 05a             | txn_out
35854 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
35858 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
3585c 05c 00 00 C0 FF 
35860 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
35864 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
35868 05f             | 
35868 05f             |                 ' Fall through to utx_data
35868 05f             | 
35868 05f             | '------------------------------------------------------------------------------
35868 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
35868 05f             | ' calculated while the data byte is being shifted out. Since data stage
35868 05f             | ' success/fail is not determined until the status stage of the transaction,
35868 05f             | ' this routine is only concerned about the current DATAx packet.
35868 05f             | '------------------------------------------------------------------------------
35868 05f             | ' On entry:
35868 05f             | '   PTRA - hub start address of the data to read.
35868 05f             | '   pkt_cnt - data payload size.
35868 05f             | ' On exit:
35868 05f             | '------------------------------------------------------------------------------
35868 05f             | utx_data
35868 05f 22 A7 82 FA |                 rqpin   urx, dm
3586c 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
35870 061 F4 FF 9F CD |         if_c    jmp     #utx_data
35874 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
35878 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
3587c 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
35880 065 D8 0C B0 CD |         if_c    call    #utx_pre
35884 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
35888 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
3588c 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
35890 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
35894 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
35898 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
3589c 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
358a0 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
358a4 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
358a8 06f             | .read_byte
358a8 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
358ac 070 F0 00 B0 FD |                 call    #utx_byte
358b0 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
358b4 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
358b8 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
358bc 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
358c0 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
358c4 076             | .send_crc
358c4 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
358c8 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
358cc 078 D0 00 B0 FD |                 call    #utx_byte
358d0 079 5D A5 EA F8 |                 getbyte utx, crc, #1
358d4 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
358d8 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
358dc 07c             | 
358dc 07c             | '------------------------------------------------------------------------------
358dc 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
358dc 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
358dc 07c             | ' expects that the packet includes at least the CRC word.
358dc 07c             | '
358dc 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
358dc 07c             | ' was requested, which makes it difficult to determine where the data stops
358dc 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
358dc 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
358dc 07c             | ' USB-16 expected residual value of 0xB001.
358dc 07c             | '
358dc 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
358dc 07c             | ' so the caller can verify IN success before writing the data to its final
358dc 07c             | ' destination.
358dc 07c             | '------------------------------------------------------------------------------
358dc 07c             | ' On entry:
358dc 07c             | '   pkt_data - max byte count expected to be in the packet.
358dc 07c             | '   newb_flg - signals new byte ready when toggled.
358dc 07c             | ' On exit:
358dc 07c             | '   pkt_cnt - actual number of bytes read.
358dc 07c             | '------------------------------------------------------------------------------
358dc 07c             | urx_data
358dc 07c F7 75 03 F6 |                 mov     htmp2, pb
358e0 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
358e4 07e 00 00 C0 FF 
358e8 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
358ec 080 BA EF 03 F6 |                 mov     pb, htmp2
358f0 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
358f4 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
358f8 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
358fc 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
35900 085             | .wait_byte
35900 085             | ' In-line rx for max speed
35900 085 22 A7 82 FA |                 rqpin   urx, dm
35904 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
35908 087 53 A5 02 F5 |                 and     utx, urx
3590c 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
35910 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
35914 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
35918 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3591c 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
35920 08d DC FF 9F FD |                 jmp     #.wait_byte
35924 08e             | .get_byte
35924 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
35928 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
3592c 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
35930 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
35934 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
35938 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3593c 094             | .end_crc
3593c 094 01 B8 06 F1 |                 add     pkt_cnt, #1
35940 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
35944 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
35948 097 2D 00 64 1D |         if_a    ret
3594c 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
3594c 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
3594c 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
3594c 098             | ' to miss it, so cheat a bit and look for SOP clear here.
3594c 098 22 A7 82 FA |                 rqpin   urx, dm
35950 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
35954 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
35958 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
35958 09b             | .chk_crc
35958 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
3595c 09c 58 00 00 FF 
35960 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
35964 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
35968 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
3596c 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
35970 0a1 34 09 B0 FD |                 call    #poll_waitx
35974 0a2             | 
35974 0a2             |                 ' Fall through to utx_handshake
35974 0a2             | 
35974 0a2             | '------------------------------------------------------------------------------
35974 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
35974 0a2             | ' the appropriate IP delay has been inserted.
35974 0a2             | '------------------------------------------------------------------------------
35974 0a2             | ' On entry:
35974 0a2             | '   retval - handshake PID to send.
35974 0a2             | ' On exit:
35974 0a2             | '   retval unchanged.
35974 0a2             | '------------------------------------------------------------------------------
35974 0a2             | utx_handshake
35974 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
35978 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
3597c 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
35980 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
35984 0a6 5F A5 02 F6 |                 mov     utx, retval
35988 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
3598c 0a8             | .idle
3598c 0a8 22 A7 82 FA |                 rqpin   urx, dm
35990 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
35994 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
35998 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
3599c 0ac 08 09 90 FD |                 jmp     #poll_waitx
359a0 0ad             | 
359a0 0ad             | '------------------------------------------------------------------------------
359a0 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
359a0 0ad             | '------------------------------------------------------------------------------
359a0 0ad             | ' On entry:
359a0 0ad             | '   utx - byte to transmit.
359a0 0ad             | ' On exit:
359a0 0ad             | '------------------------------------------------------------------------------
359a0 0ad             | utx_byte
359a0 0ad 40 46 72 FD |                 testp   dp                      wc
359a4 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
359a8 0af 23 03 08 FC |                 akpin   dp
359ac 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
359b0 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
359b4 0b2             | 
359b4 0b2             | '------------------------------------------------------------------------------
359b4 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
359b4 0b2             | '------------------------------------------------------------------------------
359b4 0b2             | ' On entry:
359b4 0b2             | ' On exit:
359b4 0b2             | '   retval - the byte read.
359b4 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
359b4 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
359b4 0b2             | '     received.
359b4 0b2             | '------------------------------------------------------------------------------
359b4 0b2             | urx_next
359b4 0b2 22 A7 8A FA |                 rdpin   urx, dm
359b8 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
359bc 0b4 53 A5 02 F5 |                 and     utx, urx
359c0 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
359c4 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
359c8 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
359cc 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
359d0 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
359d4 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
359d8 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
359dc 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
359e0 0bd 2D 00 64 FD |                 ret
359e4 0be             | 
359e4 0be             | '------------------------------------------------------------------------------
359e4 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
359e4 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
359e4 0be             | ' length, and the PID is not included in the CRC calculation:
359e4 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
359e4 0be             | '  CRC5  ENDP ADDRESS PID
359e4 0be             | ' %00000_1111_1111111_xxxxxxxx
359e4 0be             | '------------------------------------------------------------------------------
359e4 0be             | ' On entry:
359e4 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
359e4 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
359e4 0be             | ' On exit:
359e4 0be             | '   ep_addr_pid - CRC value appended to the packet.
359e4 0be             | '------------------------------------------------------------------------------
359e4 0be             | calc_crc5
359e4 0be FF 03 00 FF 
359e8 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
359ec 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
359f0 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
359f4 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
359f8 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
359fc 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
35a00 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
35a04 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
35a08 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
35a0c 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
35a10 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
35a14 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
35a18 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
35a1c 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
35a20 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
35a24 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
35a28 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
35a2c 0d0             | 
35a2c 0d0             | '------------------------------------------------------------------------------
35a2c 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
35a2c 0d0             | '------------------------------------------------------------------------------
35a2c 0d0             | isr1_fsframe
35a2c 0d0 1A 92 62 FD |                 getct   iframe_ct_base
35a30 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
35a34 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
35a38 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
35a3c 0d4             | .wait
35a3c 0d4 40 46 72 FD |                 testp   dp                      wc
35a40 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
35a44 0d6 23 03 08 FC |                 akpin   dp
35a48 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
35a4c 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
35a50 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
35a54 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
35a58 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
35a5c 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
35a60 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
35a64 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
35a68 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
35a6c 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
35a70 0e1 2C FF BF FD |                 call    #utx_byte
35a74 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
35a78 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
35a7c 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
35a80 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
35a84 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
35a88 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
35a8c 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
35a90 0e9 5B A5 42 F5 |                 or      utx, icrc
35a94 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
35a98 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
35a9c 0ec 20 00 90 FD |                 jmp     #isr1_wait
35aa0 0ed             | isr1_lsframe
35aa0 0ed 1A 92 62 FD |                 getct   iframe_ct_base
35aa4 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
35aa8 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
35aac 0f0             | .wait
35aac 0f0 40 46 72 FD |                 testp   dp                      wc
35ab0 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
35ab4 0f2 23 03 08 FC |                 akpin   dp
35ab8 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
35abc 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
35ac0 0f5             | isr1_wait
35ac0 0f5 22 A5 82 FA |                 rqpin   utx, dm
35ac4 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
35ac8 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
35acc 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
35ad0 0f9 03 00 00 FF 
35ad4 0fa FF B3 06 F5 |                 and     frame, ##$7ff
35ad8 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
35adc 0fc F5 FF 3B FB |                 reti1
35ae0 0fd             | 
35ae0 0fd             | '------------------------------------------------------------------------------
35ae0 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
35ae0 0fd             | ' transaction will complete before the next frame is triggered.
35ae0 0fd             | '------------------------------------------------------------------------------
35ae0 0fd             | ' On entry:
35ae0 0fd             | ' On exit:
35ae0 0fd             | '------------------------------------------------------------------------------
35ae0 0fd             | wait_txn_ok
35ae0 0fd 1A 74 63 FD |                 getct   htmp2
35ae4 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
35ae8 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
35aec 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
35af0 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
35af4 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
35af8 103 2D 00 64 FD |                 ret
35afc 104             | 
35afc 104             | '------------------------------------------------------------------------------
35afc 104             | ' A device connection was detected, or a bus reset was requested by the USB
35afc 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
35afc 104             | ' and perform a reset sequence prior to device enumeration.
35afc 104             | '------------------------------------------------------------------------------
35afc 104             | dev_reset
35afc 104 22 A7 82 FA |                 rqpin   urx, dm
35b00 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
35b04 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
35b08 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
35b0c 108             | reset
35b0c 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
35b10 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
35b14 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
35b18 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
35b1c 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
35b20 10d 1A 92 62 FD |                 getct   iframe_ct_base
35b24 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
35b28 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
35b2c 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
35b30 111 24 70 07 F1 |                 add     htmp, #36
35b34 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
35b38 113             | .framewait
35b38 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
35b3c 114 F8 FF 9F CD |         if_b    jmp     #.framewait
35b40 115 2D 00 64 FD |                 ret
35b44 116             | 
35b44 116             | '------------------------------------------------------------------------------
35b44 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
35b44 116             | '------------------------------------------------------------------------------
35b44 116             | ' On entry:
35b44 116             | '   PTRA - source address.
35b44 116             | '   PB - destination address.
35b44 116             | '   hr0 - length of copy, in bytes.
35b44 116             | ' On exit:
35b44 116             | '------------------------------------------------------------------------------
35b44 116             | hmemcpy
35b44 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
35b48 117 F7 71 43 FC |                 wrbyte  htmp, pb
35b4c 118 01 EE 07 F1 |                 add     pb, #1
35b50 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
35b54 11a             | 
35b54 11a             | '------------------------------------------------------------------------------
35b54 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
35b54 11a             | ' loop until the errant device is disconnected.
35b54 11a             | '------------------------------------------------------------------------------
35b54 11a             | ' On entry:
35b54 11a             | ' On exit:
35b54 11a             | '------------------------------------------------------------------------------
35b54 11a             | host_error
35b54 11a             |           if ERROR_LED >= 0
35b54 11a             |           end
35b54 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
35b58 11b             | 
35b58 11b             | '------------------------------------------------------------------------------
35b58 11b             | ' Get HID descriptor buffer for current port
35b58 11b             | '------------------------------------------------------------------------------
35b58 11b             | ' On entry:
35b58 11b             | ' On exit:
35b58 11b             | '   PB - HID descriptor buffer pointer
35b58 11b             | '------------------------------------------------------------------------------
35b58 11b             | get_hid_descr_buffer
35b58 11b 2D EF 03 F6 |                 mov     pb, hdev_port
35b5c 11c 01 EE E7 F2 |                 cmpsub  pb, #1
35b60 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
35b64 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
35b68 11f             | 
35b68 11f             | 
35b68 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
35b6c 120             | 
35b6c 120             | ' USB commands and error codes
35b6c 120 00 00 00 00 | cmd_data        long    0
35b70 121 00 00 00 00 | usb_err_code    long    ERR_NONE
35b74 122             | 
35b74 122             | ' Parameters block assigned at cog startup
35b74 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
35b78 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
35b7c 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
35b80 125             | if ACTIVITY_LED >= 0
35b80 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
35b80 125             | end
35b80 125             | if ERROR_LED >= 0
35b80 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
35b80 125             | end
35b80 125 00 00 00 00 | hid_descr_p     long    0
35b84 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
35b84 126             | 'hkbd_report_p   long    0
35b84 126 00 00 00 00 | hub_descr_p     long    0
35b88 127 00 00 00 00 | urx_buff_p      long    0
35b8c 128 00 00 00 00 | dev_desc_buff_p long    0
35b90 129 00 00 00 00 | con_desc_buff_p long    0
35b94 12a 00 00 00 00 | cache_start_p   long    0
35b98 12b 00 00 00 00 | cache_end_p     long    0
35b9c 12c             | if EMUPAD_MAX_PLAYER > 0
35b9c 12c             | emupad_out_ptr  long    0
35b9c 12c             | end
35b9c 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
35ba0 12d             | 
35ba0 12d             | hdev_init_start
35ba0 12d             | hdev_port       res     1
35ba0 12d             | hdev_port       res     1
35ba0 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
35ba0 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
35ba0 12d             | kbm_next_datax  res     1
35ba0 12d             | kbm_next_datax  res     1
35ba0 12d             | hub_intf_num    res     1
35ba0 12d             | hub_intf_num    res     1
35ba0 12d             | hub_next_datax  res     1
35ba0 12d             | hub_next_datax  res     1
35ba0 12d             | hub_status_chg  res     1
35ba0 12d             | hub_status_chg  res     1
35ba0 12d             | hub_port_status res     1
35ba0 12d             | hub_port_status res     1
35ba0 12d             | if HAVE_MOUSE
35ba0 12d             | ms_intf_num     res     1
35ba0 12d             | ms_intf_num     res     1
35ba0 12d             | ms_in_max_pkt   res     1
35ba0 12d             | ms_in_max_pkt   res     1
35ba0 12d             | end
35ba0 12d             | kb_intf_num     res     1
35ba0 12d             | kb_intf_num     res     1
35ba0 12d             | kb_interval     res     1
35ba0 12d             | kb_interval     res     1
35ba0 12d             | kb_in_max_pkt   res     1
35ba0 12d             | kb_in_max_pkt   res     1
35ba0 12d             | kb_max_index    res     1
35ba0 12d             | kb_max_index    res     1
35ba0 12d             | kb_led_states   res     1
35ba0 12d             | kb_led_states   res     1
35ba0 12d             | gp_intf_num     res     1
35ba0 12d             | gp_intf_num     res     1
35ba0 12d             | gp_interval     res     1
35ba0 12d             | gp_interval     res     1
35ba0 12d             | gp_max_index    res     1
35ba0 12d             | gp_max_index    res     1
35ba0 12d             | gp_descr_len    res     1+MAX_DEVICES
35ba0 12d             | gp_descr_len    res     1+MAX_DEVICES
35ba0 12d             | hdev_init_end
35ba0 12d             | 
35ba0 12d             | ' Initialized at cog startup:
35ba0 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
35ba0 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
35ba0 12d             | iframe_ct_new   res     1
35ba0 12d             | iframe_ct_new   res     1
35ba0 12d             | iframe_ct_base  res     1
35ba0 12d             | iframe_ct_base  res     1
35ba0 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
35ba0 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
35ba0 12d             | 
35ba0 12d             | ' This register block is reset to zero when a USB device connects
35ba0 12d             | hreg_init_start
35ba0 12d             | hstatus         res     1         ' Host status flags
35ba0 12d             | hstatus         res     1         ' Host status flags
35ba0 12d             | hctwait         res     1         ' Poll-based wait clocks
35ba0 12d             | hctwait         res     1         ' Poll-based wait clocks
35ba0 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
35ba0 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
35ba0 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
35ba0 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
35ba0 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
35ba0 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
35ba0 12d             | xfer_retry      res     1         ' Control transfer retry count
35ba0 12d             | xfer_retry      res     1         ' Control transfer retry count
35ba0 12d             | retry           res     1         ' Transaction retry count
35ba0 12d             | retry           res     1         ' Transaction retry count
35ba0 12d             | utx             res     1         ' Byte to transmit on USB
35ba0 12d             | utx             res     1         ' Byte to transmit on USB
35ba0 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
35ba0 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
35ba0 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
35ba0 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
35ba0 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
35ba0 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
35ba0 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
35ba0 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
35ba0 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
35ba0 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
35ba0 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
35ba0 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
35ba0 12d             | frame           res     1         ' USB 1ms frame counter value
35ba0 12d             | frame           res     1         ' USB 1ms frame counter value
35ba0 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
35ba0 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
35ba0 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
35ba0 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
35ba0 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
35ba0 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
35ba0 12d             | crc             res     1         ' Used for CRC16 calculation
35ba0 12d             | crc             res     1         ' Used for CRC16 calculation
35ba0 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
35ba0 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
35ba0 12d             | retval          res     1         ' Global success/fail return parameter
35ba0 12d             | retval          res     1         ' Global success/fail return parameter
35ba0 12d             | context_retval  res     1         ' Operation contextual return parameter
35ba0 12d             | context_retval  res     1         ' Operation contextual return parameter
35ba0 12d             | ' Device stuff
35ba0 12d             | hdev_id         res     1+MAX_DEVICES
35ba0 12d             | hdev_id         res     1+MAX_DEVICES
35ba0 12d             | hdev_bcd        res     1
35ba0 12d             | hdev_bcd        res     1
35ba0 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
35ba0 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
35ba0 12d             | ' Keyboard/mouse stuff
35ba0 12d             | hctrl_ep_addr   res     1
35ba0 12d             | hctrl_ep_addr   res     1
35ba0 12d             | hctrl_max_pkt   res     1
35ba0 12d             | hctrl_max_pkt   res     1
35ba0 12d             | hconfig_base    res     1
35ba0 12d             | hconfig_base    res     1
35ba0 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
35ba0 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
35ba0 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
35ba0 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
35ba0 12d             | hdev_class      res     1
35ba0 12d             | hdev_class      res     1
35ba0 12d             | hdev_subclass   res     1
35ba0 12d             | hdev_subclass   res     1
35ba0 12d             | hdev_protocol   res     1
35ba0 12d             | hdev_protocol   res     1
35ba0 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
35ba0 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
35ba0 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
35ba0 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
35ba0 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
35ba0 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
35ba0 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
35ba0 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
35ba0 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
35ba0 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
35ba0 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
35ba0 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
35ba0 12d             | if HAVE_MOUSE
35ba0 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
35ba0 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
35ba0 12d             | end
35ba0 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
35ba0 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
35ba0 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
35ba0 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
35ba0 12d             | hdev_ep_addr    res     1+MAX_DEVICES
35ba0 12d             | hdev_ep_addr    res     1+MAX_DEVICES
35ba0 12d             | hdev_out_addr   res     1
35ba0 12d             | hdev_out_addr   res     1
35ba0 12d             | 
35ba0 12d             | if EMUPAD_MAX_PLAYER > 0
35ba0 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
35ba0 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
35ba0 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
35ba0 12d             | end
35ba0 12d             | 
35ba0 12d             | hreg_init_end
35ba0 12d             | 
35ba0 12d             | hidr_start
35ba0 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
35ba0 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
35ba0 12d             | hidr_flags      res     1
35ba0 12d             | hidr_flags      res     1
35ba0 12d             | hidr_axis       res     3
35ba0 12d             | hidr_axis       res     3
35ba0 12d             | hidr_buttons    res     1
35ba0 12d             | hidr_buttons    res     1
35ba0 12d             | hidr_hats       res     1
35ba0 12d             | hidr_hats       res     1
35ba0 12d             | '' Above are actually useful values, 6 longs
35ba0 12d             | hidr_id         res     1
35ba0 12d             | hidr_id         res     1
35ba0 12d             | hidr_state      res     1
35ba0 12d             | hidr_state      res     1
35ba0 12d             | hidr_size       res     1
35ba0 12d             | hidr_size       res     1
35ba0 12d             | hidr_count      res     1
35ba0 12d             | hidr_count      res     1
35ba0 12d             | hidr_offset     res     1
35ba0 12d             | hidr_offset     res     1
35ba0 12d             | hidr_usage_idx  res     1
35ba0 12d             | hidr_usage_idx  res     1
35ba0 12d             | hidr_lminmax    res     1
35ba0 12d             | hidr_lminmax    res     1
35ba0 12d             | hidr_pminmax    res     1
35ba0 12d             | hidr_pminmax    res     1
35ba0 12d             | hidr_type       res     1
35ba0 12d             | hidr_type       res     1
35ba0 12d             | hidr_end
35ba0 12d             | 
35ba0 12d             | ' Variables dependent on the system freqency
35ba0 12d             | _var_64_lower_  res     1
35ba0 12d             | _var_64_lower_  res     1
35ba0 12d             | _var_64_upper_  res     1
35ba0 12d             | _var_64_upper_  res     1
35ba0 12d             | _12Mbps_        res     1
35ba0 12d             | _12Mbps_        res     1
35ba0 12d             | _1_5Mbps_       res     1
35ba0 12d             | _1_5Mbps_       res     1
35ba0 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
35ba0 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
35ba0 12d             | _1us_           res     1         ' 1us
35ba0 12d             | _1us_           res     1         ' 1us
35ba0 12d             | _10us_          res     1         ' 10us
35ba0 12d             | _10us_          res     1         ' 10us
35ba0 12d             | _33us_          res     1         ' 33us
35ba0 12d             | _33us_          res     1         ' 33us
35ba0 12d             | _txn_err_       res     1         ' 250us
35ba0 12d             | _txn_err_       res     1         ' 250us
35ba0 12d             | _500us_         res     1         ' 500us
35ba0 12d             | _500us_         res     1         ' 500us
35ba0 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
35ba0 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
35ba0 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
35ba0 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
35ba0 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
35ba0 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
35ba0 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
35ba0 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
35ba0 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
35ba0 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
35ba0 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
35ba0 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
35ba0 12d             | _preamble_wait_ res     1
35ba0 12d             | _preamble_wait_ res     1
35ba0 12d             | _1ms_           res     1         ' 1ms
35ba0 12d             | _1ms_           res     1         ' 1ms
35ba0 12d             | _2ms_           res     1         ' 2ms
35ba0 12d             | _2ms_           res     1         ' 2ms
35ba0 12d             | _suspend_wait_  res     1         ' 3ms
35ba0 12d             | _suspend_wait_  res     1         ' 3ms
35ba0 12d             | _4ms_           res     1         ' 4ms
35ba0 12d             | _4ms_           res     1         ' 4ms
35ba0 12d             | _xfer_wait_     res     1         ' 5ms
35ba0 12d             | _xfer_wait_     res     1         ' 5ms
35ba0 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
35ba0 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
35ba0 12d             | _reset_hold_    res     1         ' 15ms
35ba0 12d             | _reset_hold_    res     1         ' 15ms
35ba0 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
35ba0 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
35ba0 12d             | _21ms_          res     1         ' 21ms
35ba0 12d             | _21ms_          res     1         ' 21ms
35ba0 12d             | _100ms_         res     1         ' 100ms
35ba0 12d             | _100ms_         res     1         ' 100ms
35ba0 12d             | _500ms_         res     1         ' 500ms
35ba0 12d             | _500ms_         res     1         ' 500ms
35ba0 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
35ba0 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
35ba0 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
35ba0 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
35ba0 12d             | '------------------------------------------------------------------------------
35ba0 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
35ba0 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
35ba0 12d             | _usb_d_ls_nco_  res     1
35ba0 12d             | _usb_d_ls_nco_  res     1
35ba0 12d             | _usb_h_fs_nco_  res     1
35ba0 12d             | _usb_h_fs_nco_  res     1
35ba0 12d             | _usb_d_fs_nco_  res     1
35ba0 12d             | _usb_d_fs_nco_  res     1
35ba0 12d             | '------------------------------------------------------------------------------
35ba0 12d             | ' Scratch registers
35ba0 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
35ba0 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
35ba0 12d             | htmp1           res     1
35ba0 12d             | htmp1           res     1
35ba0 12d             | htmp2           res     1
35ba0 12d             | htmp2           res     1
35ba0 12d             | htmp3           res     1
35ba0 12d             | htmp3           res     1
35ba0 12d             | hrep            res     1         ' Repeat count
35ba0 12d             | hrep            res     1         ' Repeat count
35ba0 12d             | hsave0          res     1         ' Subroutine parameter saves
35ba0 12d             | hsave0          res     1         ' Subroutine parameter saves
35ba0 12d             | hsave1          res     1
35ba0 12d             | hsave1          res     1
35ba0 12d             | hsave2          res     1
35ba0 12d             | hsave2          res     1
35ba0 12d             | isrtmp1         res     1
35ba0 12d             | isrtmp1         res     1
35ba0 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
35ba0 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
35ba0 12d             | hr0             res     1         ' Multi-purpose registers
35ba0 12d             | hr0             res     1         ' Multi-purpose registers
35ba0 12d             | hr1             res     1
35ba0 12d             | hr1             res     1
35ba0 12d             | hr2             res     1
35ba0 12d             | hr2             res     1
35ba0 12d             | hr3             res     1
35ba0 12d             | hr3             res     1
35ba0 12d             | hpar1           res     1         ' Routine entry/exit parameters
35ba0 12d             | hpar1           res     1         ' Routine entry/exit parameters
35ba0 12d             | hpar2           res     1
35ba0 12d             | hpar2           res     1
35ba0 12d             | hpar3           res     1
35ba0 12d             | hpar3           res     1
35ba0 12d             | hct2            res     1         ' Function response bus turn-around timer
35ba0 12d             | hct2            res     1         ' Function response bus turn-around timer
35ba0 12d             | hct3            res     1         ' Keyboard/mouse poll timer
35ba0 12d             | hct3            res     1         ' Keyboard/mouse poll timer
35ba0 12d             | mod_cnt         res     1         ' Used in idle loops
35ba0 12d             | mod_cnt         res     1         ' Used in idle loops
35ba0 12d             |                 fit     $1F0
35ba0 12d             |                 org     $200
35ba0 200             | hlut_start
35ba0 200             | 
35ba0 200             | '------------------------------------------------------------------------------
35ba0 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
35ba0 200             | ' settings to startup defaults.
35ba0 200             | '------------------------------------------------------------------------------
35ba0 200             | ' On entry:
35ba0 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
35ba0 200             | '------------------------------------------------------------------------------
35ba0 200             | set_speed_full
35ba0 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
35ba4 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
35ba8 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
35bac 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
35bb0 204             | '                ret                             wcz     ' Restore caller flags on exit
35bb0 204             | 
35bb0 204             | '------------------------------------------------------------------------------
35bb0 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
35bb0 204             | ' is a downstream hub connected (not yet implemented), the baud generator
35bb0 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
35bb0 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
35bb0 204             | ' putting the smart pins into reset.
35bb0 204             | '------------------------------------------------------------------------------
35bb0 204             | ' On entry:
35bb0 204             | ' On exit: CZ flags restored to caller states
35bb0 204             | '------------------------------------------------------------------------------
35bb0 204             | set_speed_low
35bb0 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
35bb4 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
35bb8 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
35bbc 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
35bc0 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
35bc4 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
35bc8 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
35bcc 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
35bd0 20c             | 
35bd0 20c             | '------------------------------------------------------------------------------
35bd0 20c             | ' Perform configuration stuff required when a device intitially connects.
35bd0 20c             | '------------------------------------------------------------------------------
35bd0 20c             | ' On entry:
35bd0 20c             | ' On exit:
35bd0 20c             | '------------------------------------------------------------------------------
35bd0 20c             | on_connect
35bd0 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
35bd4 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
35bd8 20e             | .retry
35bd8 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
35bdc 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
35be0 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
35be4 211 00 08 00 FF 
35be8 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
35bec 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
35bf0 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
35bf4 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
35bf8 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
35bfc 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
35c00 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35c04 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
35c08 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
35c0c 21b 4C 03 B0 FD |                 call    #poll_waitx
35c10 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
35c14 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
35c18 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
35c1c 21f B8 FF 9F FD |                 jmp     #.retry
35c20 220             | .get_dev_desc
35c20 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
35c24 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
35c28 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
35c2c 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
35c30 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
35c34 225 88 FB BF FD |                 call    #reset
35c38 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
35c3c 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
35c40 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
35c44 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
35c48 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35c4c 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
35c50 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
35c54 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
35c58 22e 04 00 00 FF 
35c5c 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
35c60 230 34 FA BF FD |                 call    #calc_crc5
35c64 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
35c68 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
35c6c 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
35c70 234 F7 AD C2 FA |                 rdbyte  total_data, pb
35c74 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
35c78 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
35c7c 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35c80 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
35c84 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
35c88 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
35c8c 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
35c90 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
35c94 23d C4 02 B0 FD |                 call    #poll_waitx
35c98 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
35c9c 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
35ca0 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
35ca4 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
35ca8 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
35cac 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35cb0 244 2D 00 64 5D |         if_nz   ret
35cb4 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
35cb8 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
35cbc 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
35cc0 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
35cc4 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
35cc8 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
35ccc 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
35cd0 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
35cd4 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
35cd8 24e 2C FB 9F CD |         if_b    jmp     #host_error
35cdc 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
35ce0 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
35ce4 251 2D EC 63 FD |                 call    pa
35ce8 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
35cec 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
35cf0 254 2C EC 63 FD |                 jmp     pa
35cf4 255             | 
35cf4 255             | '------------------------------------------------------------------------------
35cf4 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
35cf4 255             | ' Status reporting is always in the function-to-host direction.
35cf4 255             | '------------------------------------------------------------------------------
35cf4 255             | ' On entry:
35cf4 255             | '   PTRA - start address of the SETUP data in hub.
35cf4 255             | '   PB - start address of the buffer/struct to be written to during the IN data
35cf4 255             | '     stage.
35cf4 255             | '   ep_addr_pid - device address, endpoint and CRC5.
35cf4 255             | ' On exit:
35cf4 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
35cf4 255             | '     contains the count of data stage bytes actually received, which must
35cf4 255             | '     always be <= the count requested.
35cf4 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
35cf4 255             | '     more specific USB operation error code.
35cf4 255             | '------------------------------------------------------------------------------
35cf4 255             | control_read
35cf4 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
35cf8 256 F8 8F 03 F6 |                 mov     hpar2, ptra
35cfc 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
35d00 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
35d04 259             | .xfer_start
35d04 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
35d08 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
35d0c 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35d10 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
35d14 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
35d18 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
35d1c 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
35d20 260 61 00 00 FF 
35d24 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
35d28 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
35d2c 263             | .data
35d2c 263 56 B1 02 F6 |                 mov     pkt_data, total_data
35d30 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
35d34 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
35d38 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
35d3c 267             | .nak_retry
35d3c 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
35d40 268             | .in_retry
35d40 268 BC F6 BF FD |                 call    #txn_in
35d44 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
35d48 26a 28 00 90 AD |         if_z    jmp     #.commit
35d4c 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
35d50 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
35d54 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
35d58 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
35d5c 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
35d60 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
35d64 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
35d68 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
35d6c 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
35d70 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
35d74 275             | .commit
35d74 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
35d78 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
35d7c 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
35d80 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
35d84 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
35d88 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
35d8c 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
35d90 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
35d94 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
35d98 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
35d9c 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
35da0 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
35da4 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
35da8 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
35dac 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
35db0 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
35db4 285             | .pre_status
35db4 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
35db8 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
35dbc 287 00 B0 06 F6 |                 mov     pkt_data, #0
35dc0 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
35dc4 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
35dc8 28a 61 00 00 FF 
35dcc 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
35dd0 28c             | .out_retry
35dd0 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
35dd4 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35dd8 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
35ddc 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
35de0 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
35de4 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
35de8 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
35dec 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
35df0 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
35df4 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
35df8 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
35dfc 297             | ' I've encountered transfer STALL, even though the data looks correct, and
35dfc 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
35dfc 297             | ' ControlRead() transfer gets things unstuck most of the time...
35dfc 297             | .xfer_retry
35dfc 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
35e00 298 58 01 B0 FD |                 call    #poll_waitx
35e04 299 8C F9 BF FD |                 call    #wait_txn_ok
35e08 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
35e0c 29b C7 F1 03 F6 |                 mov     ptra, hpar2
35e10 29c C8 EF 03 F6 |                 mov     pb, hpar3
35e14 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
35e18 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
35e1c 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
35e20 2a0             | 
35e20 2a0             | '------------------------------------------------------------------------------
35e20 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
35e20 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
35e20 2a0             | ' the SETUP data struct is filled with the required values.
35e20 2a0             | '------------------------------------------------------------------------------
35e20 2a0             | ' On entry:
35e20 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
35e20 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
35e20 2a0             | '     stage.
35e20 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
35e20 2a0             | ' On exit:
35e20 2a0             | '   retval - used to convey the success/failure of each stage.
35e20 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
35e20 2a0             | '     more specific USB operation error code.
35e20 2a0             | '------------------------------------------------------------------------------
35e20 2a0             | control_write
35e20 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
35e24 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
35e28 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
35e2c 2a3             | 
35e2c 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
35e30 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
35e34 2a5 F7 91 03 F6 |                 mov     hpar3, pb
35e38 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
35e3c 2a7             | .xfer_start
35e3c 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
35e40 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
35e44 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
35e48 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35e4c 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
35e50 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
35e54 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
35e58 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
35e5c 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
35e60 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
35e64 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
35e68 2b2             | .data
35e68 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
35e6c 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
35e70 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
35e74 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
35e78 2b6             | .out_retry
35e78 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
35e7c 2b7 88 F6 BF FD |                 call    #txn_out
35e80 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35e84 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
35e88 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
35e8c 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
35e90 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
35e94 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
35e98 2be             | .commit
35e98 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
35e9c 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
35ea0 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
35ea4 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
35ea8 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
35eac 2c3             | pre_status_in
35eac 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
35eb0 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
35eb4 2c5             | .status_retry
35eb4 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
35eb8 2c6 44 F5 BF FD |                 call    #txn_in
35ebc 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
35ec0 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
35ec4 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
35ec8 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
35ecc 2cb 2D 00 64 AD |         if_z    ret
35ed0 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
35ed4 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
35ed8 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
35edc 2cf             | '               ret                                     ' Caller must handle transfer retirement
35edc 2cf             | 
35edc 2cf             | '------------------------------------------------------------------------------
35edc 2cf             | ' Execute an IN interrupt transaction.
35edc 2cf             | '------------------------------------------------------------------------------
35edc 2cf             | ' On entry:
35edc 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
35edc 2cf             | '   hpar2 - Address of the IN data buffer
35edc 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
35edc 2cf             | ' On exit:
35edc 2cf             | '   retval - the result of the operation.
35edc 2cf             | '   hpar3 - the count of IN data bytes actually received.
35edc 2cf             | '------------------------------------------------------------------------------
35edc 2cf             | do_int_in
35edc 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
35ee0 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
35ee4 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
35ee8 2d2             | 
35ee8 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
35eec 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
35ef0 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
35ef4 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
35ef8 2d6             | .retry
35ef8 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
35efc 2d7 00 F5 BF FD |                 call    #txn_in
35f00 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
35f04 2d9 1C 00 90 AD |         if_z    jmp     #.commit
35f08 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
35f0c 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
35f10 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
35f14 2dd 54 00 B0 FD |                 call    #retry_wait
35f18 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
35f1c 2df 18 00 90 AD |         if_z    jmp     #.post_ret
35f20 2e0 D4 FF 9F FD |                 jmp     #.retry
35f24 2e1             | .commit
35f24 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
35f28 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
35f2c 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
35f30 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
35f34 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
35f38 2e6             | .post_ret
35f38 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
35f3c 2e7             | 
35f3c 2e7             | 
35f3c 2e7             | '------------------------------------------------------------------------------
35f3c 2e7             | ' Resets the downstream hub port to FS
35f3c 2e7             | '------------------------------------------------------------------------------
35f3c 2e7             | dwnstream_reset
35f3c 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
35f40 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
35f44 2e9             | 
35f44 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
35f48 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
35f4c 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
35f50 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
35f54 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
35f58 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
35f5c 2ef             | 
35f5c 2ef             | '------------------------------------------------------------------------------
35f5c 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
35f5c 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
35f5c 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
35f5c 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
35f5c 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
35f5c 2ef             | '------------------------------------------------------------------------------
35f5c 2ef             | ' On entry:
35f5c 2ef             | '   hctwait - wait interval in sysclocks.
35f5c 2ef             | ' On exit:
35f5c 2ef             | '------------------------------------------------------------------------------
35f5c 2ef             | poll_waitx
35f5c 2ef 1A 92 63 FD |                 getct   hct2
35f60 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
35f64 2f1             | .wait
35f64 2f1 FF 25 CC FB |                 jnct2   #.wait
35f68 2f2 2D 00 64 FD |                 ret
35f6c 2f3             | 
35f6c 2f3             | '------------------------------------------------------------------------------
35f6c 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
35f6c 2f3             | '------------------------------------------------------------------------------
35f6c 2f3             | ' On entry:
35f6c 2f3             | '   retval - transaction response PID or error code.
35f6c 2f3             | ' On exit:
35f6c 2f3             | '------------------------------------------------------------------------------
35f6c 2f3             | retry_wait
35f6c 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
35f70 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
35f74 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
35f78 2f6 14 00 90 AD |         if_z    jmp     #.nak
35f7c 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
35f80 2f8 D8 FF BF FD |                 call    #poll_waitx
35f84 2f9             | .dec
35f84 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
35f88 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
35f8c 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
35f90 2fc             | .nak
35f90 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
35f94 2fd C4 FF BF FD |                 call    #poll_waitx
35f98 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
35f9c 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
35fa0 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
35fa4 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
35fa8 302 2D 00 64 FD |                 ret
35fac 303             | 
35fac 303             | host_reset
35fac 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
35fb0 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
35fb4 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
35fb4 305 BD 01 05 FF 
35fb8 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
35fbc 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
35fc0 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
35fc4 309             | ' Check to see if the system clock has been changed.
35fc4 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
35fc8 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
35fcc 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
35fd0 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
35fd4 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
35fd8 30e 40 46 62 FD |                 dirl    dp
35fdc 30f             | 
35fdc 30f 28 02 64 FD |                 setq    #1
35fe0 310 80 00 80 FF 
35fe4 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
35fe8 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
35fec 313             | .enable
35fec 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
35ff0 314 41 46 62 FD |                 dirh    dp
35ff4 315 1F 36 63 FD |                 waitx   _1us_
35ff8 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
35ffc 317             | 
35ffc 317             |                 ' Handle Port protection enable and startup delay
35ffc 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
36000 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
36004 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
36008 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
3600c 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
36010 31c             | 
36010 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
36014 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
36018 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
3601c 31f 00 00 04 F6 |                 mov     0-0, #0
36020 320             | .regloop
36020 320             | 
36020 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
36020 320             | 
36020 320             | discon_entry
36020 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
36024 321             | 
36024 321             |               
36024 321             |         if HAVE_HIDPAD
36024 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
36028 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
3602c 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
36030 324 F7 01 68 FC |                 wrlong  #0,pb
36034 325             |         end
36034 325             |         if EMUPAD_MAX_PLAYER > 0
36034 325             |         end
36034 325             | 
36034 325             |                 ' Fall through to disconnected loop
36034 325             | 
36034 325             | '-----------------------------------------------------------------------------------------------------------------
36034 325             | ' Device connect handling (Section 7.1.7.3).
36034 325             | '-----------------------------------------------------------------------------------------------------------------
36034 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
36034 325             | ' device to connect (Section 7.1.7.3).
36034 325             | '-----------------------------------------------------------------------------------------------------------------
36034 325             | disconnected
36034 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
36038 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
3603c 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
36040 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
36044 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
36048 32a             |         if ACTIVITY_LED >= 0
36048 32a             |         end
36048 32a 22 A7 82 FA |                 rqpin   urx, dm
3604c 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
36050 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
36054 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
36058 32e             | .se1_test
36058 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
3605c 32f FC FE BF FD |                 call    #poll_waitx
36060 330 22 A7 82 FA |                 rqpin   urx, dm
36064 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
36068 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
3606c 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
36070 334             | .se1            'SE1 is a fatal error condition
36070 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
36074 335 E4 FE BF FD |                 call    #poll_waitx
36078 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
3607c 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
36080 338             | .connect_test                                           ' Test lines until stable J/K state seen
36080 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
36084 339 22 A7 82 FA |                 rqpin   urx, dm
36088 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3608c 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
36090 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
36094 33d             | connected
36094 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
36098 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
3609c 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
360a0 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
360a4 341             | .set_pulse
360a4 341 1A 64 63 FD |                 getct   _pulse_time_
360a8 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
360ac 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
360ac 343             | ' of 1ms and make a correction, if necessary.
360ac 343             | '                mov     htmp, _1ms_
360ac 343             | '                subs    htmp, iframe_delta
360ac 343             | '                adds    _frame1ms_clks_, htmp
360ac 343             | '                debug(udec(_frame1ms_clks_))
360ac 343             | 
360ac 343             |                 ' Fall through to idle/processing loop
360ac 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
360b0 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
360b4 345             | 
360b4 345             | hidle
360b4 345 22 A7 82 FA |                 rqpin   urx, dm
360b8 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
360bc 347 98 00 90 CD |         if_c    jmp     #.se0_test
360c0 348 24 06 70 FD |                 pollct3                         wc
360c4 349 68 00 90 3D |         if_nc   jmp     #.nopoll
360c8 34a 1A 94 63 FD |                 getct   hct3
360cc 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
360d0 34c             | 
360d0 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
360d4 34d 00 70 E3 F8 |                 getbyte htmp
360d8 34e             | 
360d8 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
360dc 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
360e0 350 40 00 90 AD |         if_z    jmp     #.poll
360e4 351             | 
360e4 351             |         if _HAVE_GAMEPAD
360e4 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
360e8 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
360ec 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
360f0 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
360f4 355 2C 00 90 AD |         if_z    jmp     #.poll
360f8 356             |         end
360f8 356             | 
360f8 356             |         if HAVE_MOUSE
360f8 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
360fc 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
36100 358 20 00 90 AD |         if_z    jmp     #.poll
36104 359             |         end
36104 359             | 
36104 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
36108 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
3610c 35b 14 00 90 AD |         if_z    jmp     #.poll
36110 35c             | 
36110 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
36114 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
36118 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
3611c 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
36120 360             |         if HAVE_MOUSE
36120 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
36124 361             |         else
36124 361             |         end
36124 361             | 
36124 361             | .poll
36124 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
36128 362 2D EC 63 FD |                 call    pa
3612c 363             | .skip_poll
3612c 363             | 
3612c 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
36130 364             | 
36130 364             | .nopoll
36130 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
36134 365 44 00 90 AD |         if_z    jmp     #hsuspend
36138 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
3613c 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
36140 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
36144 369 1A 84 63 FD |                 getct   hr0
36148 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
3614c 36b             |         if ACTIVITY_LED >= 0
3614c 36b             |         end
3614c 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
36150 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
36154 36d 5C FF 9F FD |                 jmp     #hidle
36158 36e             | ' Check for extended SE0 state on the bus
36158 36e             | .se0_test
36158 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
3615c 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
36160 370 22 A7 82 FA |                 rqpin   urx, dm
36164 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
36168 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
3616c 373 24 F6 BF FD |                 call    #wait_txn_ok
36170 374 00 00 80 FF 
36174 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
36178 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
36178 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
3617c 377             | 
3617c 377             | hsuspend
3617c 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
36180 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
36184 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
36188 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
3618c 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
36190 37c 00 96 07 F6 |                 mov     mod_cnt, #0
36194 37d             | 
36194 37d             |                 ' Fall through to resume wait loop
36194 37d             | 
36194 37d             | hwait_resume
36194 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
36198 37e 02 86 47 F0 |                 shr     hr1, #2
3619c 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
361a0 380             |         if ACTIVITY_LED >= 0
361a0 380             |         end
361a0 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
361a4 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
361a8 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
361ac 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
361b0 384 18 00 90 AD |         if_z    jmp     #.resume
361b4 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
361b8 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
361bc 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
361c0 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
361c4 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
361c8 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
361cc 38b             | .resume
361cc 38b 22 05 28 FC |                 wypin   #OUT_K, dm
361d0 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
361d4 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
361d8 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
361dc 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
361e0 390 1F 70 63 FD |                 waitx   htmp
361e4 391 22 07 28 FC |                 wypin   #OUT_J, dm
361e8 392 01 70 47 F0 |                 shr     htmp, #1
361ec 393 1F 70 63 FD |                 waitx   htmp
361f0 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
361f4 395 1A 92 62 FD |                 getct   iframe_ct_base
361f8 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
361fc 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
36200 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
36204 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
36208 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
3620c 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
36210 39c             | 
36210 39c             | '------------------------------------------------------------------------------
36210 39c             | ' Send preamble to enable low-speed HUB ports
36210 39c             | '------------------------------------------------------------------------------
36210 39c             | ' On entry:
36210 39c             | ' On exit:
36210 39c             | '   USB baud rate set to low-speed
36210 39c             | '------------------------------------------------------------------------------
36210 39c             | utx_pre
36210 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
36214 39d 40 46 62 FD |                 dirl    dp
36218 39e 28 02 64 FD |                 setq    #1
3621c 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
36220 3a0 58 44 62 FD |                 drvl    dm
36224 3a1 59 46 62 FD |                 drvh    dp
36228 3a2             | 
36228 3a2 1E 00 00 FF 
3622c 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
36230 3a4             | 
36230 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
36234 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
36238 3a6 28 02 64 3D |         if_nc   setq    #1
3623c 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
36240 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
36244 3a9             | .l1
36244 3a9             | 
36244 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
36248 3aa 40 46 62 FD |                 dirl    dp
3624c 3ab 28 02 64 FD |                 setq    #1
36250 3ac 80 00 80 FF 
36254 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
36258 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
3625c 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
36260 3b0 41 46 62 FD |                 dirh    dp
36264 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
36268 3b2             | 
36268 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3626c 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
36270 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
36274 3b5             | 
36274 3b5             | hlut_end
36274 3b5             |                 fit     $400
36274 3b5             |                 orgh
36274                 | if OVERLAP_MEMORY
36274                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
36274                 | end
36274                 | '------------------------------------------------------------------------------
36274                 | ' Routines called from cog space.
36274                 | '------------------------------------------------------------------------------
36274                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
36274                 | '------------------------------------------------------------------------------
36274                 | 
36274                 | '------------------------------------------------------------------------------
36274                 | ' USB host cog initialization.
36274                 | '------------------------------------------------------------------------------
36274                 | usb_host_init
36274                 |                 ' Initialize buffer pointers
36274                 |         if OVERLAP_MEMORY
36274                 |         else
36274     40 15 B0 FE |                 loc     pb, #hid_descr
36278                 |         end
36278     F7 4B 02 F6 |                 mov     hid_descr_p, pb
3627c                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
3627c                 |                 {
3627c                 |                 }
3627c                 |         
3627c                 |                 {
3627c                 |                 }
3627c                 |                 'loc     pb,#hkbd_report
3627c                 |                 'mov     hkbd_report_p,pb
3627c                 | 
3627c     08 1D B0 FE |                 loc     pb, #hub_descr
36280     F7 4D 02 F6 |                 mov     hub_descr_p, pb
36284     1D 1D B0 FE |                 loc     pb, #urx_buff
36288     F7 4F 02 F6 |                 mov     urx_buff_p, pb
3628c     95 1D B0 FE |                 loc     pb, #dev_desc_buff
36290     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
36294     9F 1D B0 FE |                 loc     pb, #con_desc_buff
36298     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
3629c     18 15 B0 FE |                 loc     pb, #usb_cache_start
362a0     F7 55 02 F6 |                 mov     cache_start_p, pb
362a4     E9 1C B0 FE |                 loc     pb, #usb_cache_end
362a8     F7 57 02 F6 |                 mov     cache_end_p, pb
362ac                 | 
362ac                 |         if ERROR_LED >= 0
362ac                 |         end
362ac                 | 
362ac                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
362ac                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
362ac                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
362ac                 | ' Configure and enable the Serial Host USB port.
362ac     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
362b0                 | 
362b0                 | '------------------------------------------------------------------------------
362b0                 | ' Timing calculations happen before any interrupt(s) are enabled.
362b0                 | '------------------------------------------------------------------------------
362b0                 | ' On entry:
362b0                 | '   htmp - current CLKFREQ value.
362b0                 | '------------------------------------------------------------------------------
362b0                 | hinit_usb_timings
362b0                 | '                getct   htmp2
362b0     B8 59 02 F6 |                 mov     save_sysclk, htmp
362b4     8D 5B 80 FF 
362b8     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
362bc     18 30 63 FD |                 getqx   _12Mbps_
362c0     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
362c4     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
362c8     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
362cc     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
362d0     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
362d4     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
362d8     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
362dc     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
362e0     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
362e4     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
362e8     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
362ec     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
362f0     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
362f4     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
362f8     80 00 00 FF 
362fc     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
36300     18 2C 63 FD |                 getqx   _var_64_lower_
36304     19 2E 63 FD |                 getqy   _var_64_upper_
36308     28 2C 63 FD |                 setq    _var_64_lower_
3630c     65 CD 1D FF 
36310     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
36314     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
36318     01 00 00 FF 
3631c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
36320     18 2C 63 FD |                 getqx   _var_64_lower_
36324     19 2E 63 FD |                 getqy   _var_64_upper_
36328     28 2C 63 FD |                 setq    _var_64_lower_
3632c     A1 07 00 FF 
36330     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
36334     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
36338     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
3633c     09 36 57 F0 |                 shr     _1us_, #9               wc
36340     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
36344     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
36348     18 38 63 FD |                 getqx   _10us_
3634c     09 38 57 F0 |                 shr     _10us_, #9              wc
36350     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
36354     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
36358     18 3A 63 FD |                 getqx   _33us_
3635c     09 3A 57 F0 |                 shr     _33us_, #9              wc
36360     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
36364     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
36368     18 3C 63 FD |                 getqx   _txn_err_
3636c     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
36370     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
36374     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
36378     18 3E 63 FD |                 getqx   _500us_
3637c     09 3E 57 F0 |                 shr     _500us_, #9             wc
36380     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
36384     01 00 00 FF 
36388     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
3638c     18 40 63 FD |                 getqx   _txn_ok_ls_
36390     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
36394     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
36398     01 00 00 FF 
3639c     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
363a0     18 42 63 FD |                 getqx   _txn_ok_fs_
363a4     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
363a8     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
363ac     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
363b0     05 00 00 FF 
363b4     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
363b8     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
363bc     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
363c0     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
363c4     1C 00 00 FF 
363c8     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
363cc     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
363d0     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
363d4     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
363d8     00 00 00 FF 
363dc     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
363e0     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
363e4     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
363e8     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
363ec     04 00 00 FF 
363f0     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
363f4     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
363f8     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
363fc     8D 5B 00 FF 
36400     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
36404     18 4C 63 FD |                 getqx   _preamble_wait_
36408     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
3640c     01 00 00 FF 
36410     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
36414     18 2C 63 FD |                 getqx   _var_64_lower_
36418     19 2E 63 FD |                 getqy   _var_64_upper_
3641c     28 2C 63 FD |                 setq    _var_64_lower_
36420     01 00 00 FF 
36424     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
36428     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
3642c     09 4E 57 F0 |                 shr     _1ms_, #9               wc
36430     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
36434     FF FF 7F FF 
36438     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
3643c     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
36440     A7 51 03 F6 |                 mov     _2ms_, _1ms_
36444     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
36448     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
3644c     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
36450     A7 55 03 F6 |                 mov     _4ms_, _1ms_
36454     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
36458     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
3645c     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
36460     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
36464     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
36468     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
3646c     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
36470     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
36474     A7 59 03 F6 |                 mov     _8ms_, _1ms_
36478     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
3647c     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
36480     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
36484     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
36488     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
3648c     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
36490     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
36494     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
36498     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
3649c     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
364a0     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
364a4                 | '        _ret_   mov     _1sec_, save_sysclk
364a4                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
364a4                 | '                ret
364a4                 | {
364a4                 | }
364a4                 | 
364a4                 | '------------------------------------------------------------------------------
364a4                 | ' Parse a configuration descriptor chain to see if the device is a recognized
364a4                 | ' one. If it is, start the task progression that will configure the device for
364a4                 | ' use.
364a4                 | '------------------------------------------------------------------------------
364a4                 | ' On entry:
364a4                 | '   hconfig_base - start address of the cached config descriptor chain.
364a4                 | ' On exit:
364a4                 | '------------------------------------------------------------------------------
364a4                 | hparse_con_desc
364a4     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
364a8     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
364ac     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
364b0     4E 70 FF F9 |                 movbyts htmp,#%%1032
364b4     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
364b8                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
364b8                 | 
364b8     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
364bc     6E ED 03 F1 |                 add     pa, hconfig_base
364c0     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
364c4                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
364c4                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
364c4                 | ' that defines a keyboard and/or mouse.
364c4     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
364c8                 | .next_intf
364c8     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
364cc     BC 01 90 3D |         if_ae   jmp     #hset_config
364d0     6E F3 03 F6 |                 mov     ptrb, hconfig_base
364d4     75 F3 03 F1 |                 add     ptrb, hnext_desc
364d8     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
364dc     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
364e0     0C 00 90 AD |         if_z    jmp     #.intf
364e4     80 71 C7 FA |                 rdbyte  htmp, ptrb
364e8     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
364ec     D8 FF 9F FD |                 jmp     #.next_intf
364f0                 | .intf
364f0     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
364f4     00 90 07 F6 |                 mov     hpar3, #0
364f8     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
364fc     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
36500     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
36504     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
36508                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
36508                 | 
36508                 | .endp
36508     80 71 C7 FA |                 rdbyte  htmp, ptrb
3650c     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
36510     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
36514     78 00 90 3D |         if_ae   jmp     #.get_device
36518     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3651c     75 F3 03 F1 |                 add     ptrb, hnext_desc
36520     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
36524     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
36528     64 00 90 AD |         if_z    jmp     #.get_device
3652c     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
36530     04 00 90 AD |         if_z    jmp     #.get_ep
36534     D0 FF 9F FD |                 jmp     #.endp
36538                 | .get_ep
36538     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
3653c     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
36540     0F 86 67 F0 |                 shl     hr1, #8 + 7
36544     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
36548     3F 00 00 FF 
3654c     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
36550     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
36554     00 8E 0F F2 |                 cmp     hpar2, #0               wz
36558     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
3655c     00 90 0F F2 |                 cmp     hpar3, #0               wz
36560     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
36564     A0 FF 9F FD |                 jmp     #.endp
36568                 | .in_ep
36568     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
3656c     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
36570                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
36570     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
36574     C2 89 DB F8 |                 setbyte hr2, hr0, #3
36578     8C FF 9F FD |                 jmp     #.endp
3657c                 | .out_ep
3657c     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
36580     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
36584                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
36584     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
36588     C2 8B DB F8 |                 setbyte hr3, hr0, #3
3658c     78 FF 9F FD |                 jmp     #.endp
36590                 | 
36590                 | .get_device
36590     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
36594     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
36598     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
3659c     68 00 90 AD |         if_z    jmp     #.gamepad
365a0     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
365a4     AC 00 90 AD |         if_z    jmp     #.hub
365a8     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
365ac     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
365b0     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
365b4     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
365b8     4C 00 90 AD |         if_z    jmp     #.gamepad
365bc     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
365c0     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
365c4                 | .keyboard
365c4     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
365c8                 |         if HAVE_MOUSE
365c8     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
365cc                 |         else
365cc                 |         end
365cc     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
365d0     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
365d4     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
365d8     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
365dc     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
365e0     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
365e4                 |                 'debug(udec(kb_intf_num))
365e4                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
365e4     E0 FE 9F FD |                 jmp     #.next_intf
365e8                 | if HAVE_MOUSE
365e8                 | .mouse
365e8     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
365ec     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
365f0     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
365f4     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
365f8     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
365fc                 |                 'getbyte ms_interval, hr2, #3
365fc     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
36600     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
36604                 |                 'debug(udec(kb_intf_num))
36604                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
36604     C0 FE 9F FD |                 jmp     #.next_intf
36608                 | end
36608                 | .gamepad
36608     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
3660c     C7 71 63 F5 |                 xor     htmp, hpar2
36610     3F 00 00 FF 
36614     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
36618     AC FE 9F AD |         if_z    jmp     #.next_intf
3661c                 |         if HAVE_MOUSE
3661c     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
36620     C7 71 63 F5 |                 xor     htmp, hpar2
36624     3F 00 00 FF 
36628     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3662c     98 FE 9F AD |         if_z    jmp     #.next_intf
36630                 |         end
36630     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
36634     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
36638     8C FE 9F 5D |         if_nz   jmp     #.next_intf
3663c                 | 
3663c     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
36640     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
36644     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
36648     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
3664c     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
36650                 |                 'debug(udec(gp_intf_num))
36650                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
36650     74 FE 9F FD |                 jmp     #.next_intf
36654                 | .hub
36654     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
36658     6C FE 9F 5D |         if_nz   jmp     #.next_intf
3665c     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
36660     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
36664     60 FE 9F 5D |         if_nz   jmp     #.next_intf
36668     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3666c     58 FE 9F 5D |         if_nz   jmp     #.next_intf
36670     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
36674     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
36678     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
3667c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
36680     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
36684     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
36688                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
36688     3C FE 9F FD |                 jmp     #.next_intf
3668c                 | 
3668c                 | '------------------------------------------------------------------------------
3668c                 | ' If a newly-connected device is recognized, do whatever is needed to configure
3668c                 | ' it according to its function, or functions. In the case of this boot protocol
3668c                 | ' keyboard/mouse class driver:
3668c                 | ' - SetConfiguration(config_num)
3668c                 | ' - SetProtocol(boot)
3668c                 | ' - SetIdle(indefinite)
3668c                 | ' - Enter the device interrupt IN polling task stage.
3668c                 | '------------------------------------------------------------------------------
3668c                 | ' On entry:
3668c                 | ' On exit:
3668c                 | '------------------------------------------------------------------------------
3668c                 | hset_config
3668c                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
3668c                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
3668c     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
36690     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
36694     00 00 0C F2 |                 cmp     0-0, #0                 wz
36698     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
3669c                 |         if HAVE_MOUSE
3669c     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
366a0                 |         end
366a0     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
366a4     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
366a8                 | .set_config
366a8     6C 0E D0 FE |                 loc     ptra, #set_config
366ac     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
366b0     6E ED 03 F1 |                 add     pa, hconfig_base
366b4     F6 8D C3 FA |                 rdbyte  hpar1, pa
366b8     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
366bc     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
366c0     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
366c4     A0 02 A0 FD |                 call    #control_write
366c8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
366cc     2D 00 64 5D |         if_nz   ret
366d0                 | .kbd_config
366d0     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
366d4     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
366d8                 | 
366d8     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
366dc     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
366e0     3F 00 00 FF 
366e4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
366e8     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
366ec                 | 
366ec     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
366f0     34 0E D0 FE |                 loc     ptra, #set_protocol
366f4     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
366f8     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
366fc     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
36700     A0 02 A0 FD |                 call    #control_write
36704     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36708     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3670c     E4 02 90 5D |         if_nz   jmp     #.notify_client
36710     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
36714     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
36718     30 03 B0 FD |                 call    #hset_idle
3671c                 |                 'cmp     retval, #PID_ACK        wz
3671c                 |         'if_nz   mov     hkbd_ep_addr, #0
3671c                 |         'if_nz   jmp     #.notify_client
3671c     A8 99 02 F6 |                 mov     hctwait, _2ms_
36720     EF 02 A0 FD |                 call    #poll_waitx
36724     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
36728     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
3672c     90 17 90 FE |                 loc     pa, #hkbd_led_rep
36730     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
36734     2C 03 B0 FD |                 call    #hset_kbdled_report
36738     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3673c     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
36740     B0 02 90 5D |         if_nz   jmp     #.notify_client
36744     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
36748     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3674c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
36750     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
36754     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
36758     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3675c     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
36760     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
36764     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
36768     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
3676c     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
36770                 |         if !!HAVE_MOUSE
36770                 |         end
36770                 | 
36770                 | .mouse_config
36770                 | if HAVE_MOUSE
36770     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
36774     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
36778     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
3677c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
36780     3F 00 00 FF 
36784     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
36788     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3678c                 | 
3678c                 |                 debug("mouse passed addr check")
3678c                 | 
3678c     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
36790     00 00 80 FF 
36794     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
36798     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
3679c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
367a0     55 02 A0 FD |                 call    #control_read
367a4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
367a8     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
367ac     44 02 90 5D |         if_nz   jmp     #.notify_client
367b0     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
367b4     56 01 00 F6 |                 mov     0-0, total_data
367b8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
367bc                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
367bc                 | 
367bc     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
367c0     64 0D D0 FE |                 loc     ptra, #set_protocol
367c4     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
367c8     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
367cc     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
367d0     A0 02 A0 FD |                 call    #control_write
367d4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
367d8     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
367dc     14 02 90 5D |         if_nz   jmp     #.notify_client
367e0                 |                 debug("mouse passed SetProtocol")
367e0     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
367e4     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
367e8     60 02 B0 FD |                 call    #hset_idle
367ec                 |                 'cmp     retval, #PID_ACK        wz
367ec                 |         'if_nz   mov     hmouse_ep_addr, #0
367ec                 |         'if_nz   jmp     #.notify_client
367ec                 |                 debug("mouse passed SetIdle")
367ec     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
367f0     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
367f4     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
367f8     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
367fc     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
36800     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
36804     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
36808     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
3680c     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
36810     3F 00 00 FF 
36814     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
36818     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
3681c     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
36820     D0 01 90 FD |                 jmp     #.notify_client
36824                 | end
36824                 | .gamepad_config
36824                 | if _HAVE_GAMEPAD
36824     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
36828     00 00 0C F2 |                 cmp     0-0, #0                 wz
3682c     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
36830     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
36834     00 70 03 F6 |                 mov     htmp, 0-0
36838     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3683c     3F 00 00 FF 
36840     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
36844     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
36848                 | 
36848     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3684c     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
36850     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
36854     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
36858     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3685c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
36860     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
36864     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
36868     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
3686c     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
36870     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
36874     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
36878     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
3687c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
36880                 | 
36880                 |                 if EMUPAD_MAX_PLAYER > 0
36880                 |                 
36880                 | .rule_loop           
36880                 |                 end
36880                 | 
36880     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
36884     5C 00 90 AD |         if_e    jmp     #.xinput
36888     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3688c     00 70 03 F6 |                 mov     htmp,0-0
36890     01 A6 02 FF 
36894     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
36898     7C 00 90 AD |         if_e    jmp     #.ps3
3689c                 | 
3689c     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
368a0     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
368a4     00 00 80 5F 
368a8     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
368ac     03 00 80 AF 
368b0     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
368b4     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
368b8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
368bc     55 02 A0 FD |                 call    #control_read
368c0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
368c4     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
368c8     00 00 04 56 |         if_nz   mov     0-0, #0
368cc     24 01 90 5D |         if_nz   jmp     #.notify_client
368d0     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
368d4     56 01 00 F6 |                 mov     0-0, total_data
368d8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
368dc                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
368dc                 | 
368dc     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
368e0     10 01 90 FD |                 jmp     #.notify_client
368e4                 | .xinput
368e4     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
368e8     2D EF 03 F6 |                 mov     pb,hdev_port
368ec     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
368f0     03 EE 27 F3 |                 fle     pb,#3
368f4     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
368f8     02 EF 47 FC |                 wrbyte  pb, ptra[2]
368fc                 | 
368fc     03 B0 06 F6 |                 mov     pkt_data, #3
36900     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
36904     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
36908     5A 00 A0 FD |                 call    #txn_out
3690c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
36910                 | 
36910     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
36914     DC 00 90 FD |                 jmp     #.notify_client
36918                 | .ps3
36918     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
3691c     2D EF 03 F6 |                 mov     pb,hdev_port
36920     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
36924     04 EE 27 F3 |                 fle     pb,#4
36928     F7 EF C3 F9 |                 decod   pb
3692c     09 EF 47 FC |                 wrbyte  pb, ptra[9]
36930                 | 
36930     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
36934     00 0C D0 FE |                 loc     ptra, #set_report
36938     01 00 80 FF 
3693c     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
36940     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
36944     03 61 5C FC |                 wrword  #48, ptra[wLength]
36948     20 0C B0 FE |                 loc     pb, #ps3_command_buff
3694c     A0 02 A0 FD |                 call    #control_write
36950                 | 
36950     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
36954     E0 0B D0 FE |                 loc     ptra, #set_report
36958     01 00 80 FF 
3695c     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
36960     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
36964     03 09 5C FC |                 wrword  #4, ptra[wLength]
36968     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
3696c     A0 02 A0 FD |                 call    #control_write
36970     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
36974     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
36978     00 00 04 56 |         if_nz   mov     0-0, #0
3697c     74 00 90 5D |         if_nz   jmp     #.notify_client
36980                 | 
36980     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
36984     6C 00 90 FD |                 jmp     #.notify_client
36988                 | end
36988                 | 
36988                 | .hub_config
36988     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3698c     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
36990     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
36994     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
36998     3F 00 00 FF 
3699c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
369a0     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
369a4                 | 
369a4     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
369a8     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
369ac     26 EF 03 F6 |                 mov     pb, hub_descr_p
369b0     55 02 A0 FD |                 call    #control_read
369b4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
369b8     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
369bc     34 00 90 5D |         if_nz   jmp     #.notify_client
369c0                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
369c0                 | 
369c0     26 F1 03 F6 |                 mov     ptra, hub_descr_p
369c4     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
369c8     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
369cc                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
369cc                 | .pwr_loop
369cc     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
369d0     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
369d4     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
369d8     A0 02 A0 FD |                 call    #control_write
369dc     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
369e0                 | 
369e0     B1 99 02 F6 |                 mov     hctwait, _500ms_
369e4     B0 99 02 F1 |                 add     hctwait, _100ms_
369e8     EF 02 A0 FD |                 call    #poll_waitx
369ec                 | 
369ec     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
369f0     00 00 90 FD |                 jmp     #.notify_client
369f4                 | 
369f4                 | .notify_client
369f4     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
369f8     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
369fc                 |                 debug(uhex_long(hdev_type,hdev_type+1))
369fc                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
369fc     2D 00 64 FD |                 ret
36a00                 | 
36a00                 | '------------------------------------------------------------------------------
36a00                 | ' Initialize the keyboard/mouse data area to start-up values.
36a00                 | '------------------------------------------------------------------------------
36a00                 | ' On entry:
36a00                 | ' On exit:
36a00                 | '------------------------------------------------------------------------------
36a00                 | init_kbdm_data
36a00     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
36a04     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
36a08                 | 
36a08     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
36a0c     2B ED 03 F6 |                 mov     pa, cache_end_p
36a10                 | .loop
36a10     61 01 4C FC |                 wrbyte  #0, ptra++
36a14     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
36a18     F4 FF 9F CD |         if_b    jmp     #.loop
36a1c                 |         
36a1c                 |         if EMUPAD_MAX_PLAYER > 0
36a1c                 |         end
36a1c                 | 
36a1c                 | 
36a1c     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
36a20                 | .regloop
36a20     00 EC 8F F9 |                 altd    pa
36a24     00 00 04 F6 |                 mov     0-0, #0
36a28     01 EC 07 F1 |                 add     pa, #1
36a2c     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
36a30     EC FF 9F 5D |         if_nz   jmp     #.regloop
36a34                 | 
36a34     E1 E1 61 FF 
36a38     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
36a3c     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
36a40     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
36a44     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
36a48                 | 
36a48     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
36a4c                 | 
36a4c                 | '------------------------------------------------------------------------------
36a4c                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
36a4c                 | ' function.
36a4c                 | '------------------------------------------------------------------------------
36a4c                 | ' On entry:
36a4c                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
36a4c                 | '   hpar2 - index number of the target interface.
36a4c                 | ' On exit:
36a4c                 | '------------------------------------------------------------------------------
36a4c                 | hset_idle
36a4c     A8 99 02 F6 |                 mov     hctwait, _2ms_
36a50     EF 02 A0 FD |                 call    #poll_waitx
36a54     D8 0A D0 FE |                 loc     ptra, #set_idle
36a58     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
36a5c     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
36a60     A0 02 80 FD |                 jmp     #control_write
36a64                 | 
36a64                 | '------------------------------------------------------------------------------
36a64                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
36a64                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
36a64                 | '------------------------------------------------------------------------------
36a64                 | ' On entry:
36a64                 | '   ep_addr_pid - device address and enpoint for the request.
36a64                 | ' On exit:
36a64                 | '   retval - transaction result.
36a64                 | '------------------------------------------------------------------------------
36a64                 | hset_kbdled_report
36a64     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
36a68     CC 0A D0 FE |                 loc     ptra, #set_report
36a6c     01 00 80 FF 
36a70     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
36a74     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
36a78     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
36a7c     27 EF 03 F6 |                 mov     pb, urx_buff_p
36a80     F7 77 42 FC |                 wrbyte  kb_led_states, pb
36a84     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
36a88                 | 
36a88                 | '------------------------------------------------------------------------------
36a88                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
36a88                 | '------------------------------------------------------------------------------
36a88                 | ' On entry:
36a88                 | ' On exit:
36a88                 | '------------------------------------------------------------------------------
36a88                 | hget_kbd_in_report
36a88     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
36a8c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
36a90     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
36a94     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
36a98     CF 02 A0 FD |                 call    #do_int_in
36a9c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36aa0     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
36aa4                 | 
36aa4     00 90 0F F2 |                 cmp     hpar3, #0               wz
36aa8     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
36aac                 | 
36aac     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
36ab0     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
36ab4     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
36ab8     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
36abc                 | 
36abc     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
36ac0     18 00 B0 FD |                 call    #hkbd_compare
36ac4                 |         if EMUPAD_MAX_PLAYER > 0
36ac4                 |         end
36ac4                 | 
36ac4                 | .led_check
36ac4     3B 71 03 F6 |                 mov     htmp, kb_led_states
36ac8     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
36acc     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
36ad0     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
36ad4     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
36ad8     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
36adc                 | 
36adc                 | '------------------------------------------------------------------------------
36adc                 | ' Compare current and previous keyboard data buffers for keypress changes.
36adc                 | '------------------------------------------------------------------------------
36adc                 | hkbd_compare
36adc     27 F1 03 F6 |                 mov     ptra, urx_buff_p
36ae0     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
36ae4     61 73 07 FB |                 rdlong  htmp1, ptra++
36ae8     E1 75 07 FB |                 rdlong  htmp2, ptrb++
36aec     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
36af0     61 73 07 FB |                 rdlong  htmp1, ptra++
36af4     E1 75 07 FB |                 rdlong  htmp2, ptrb++
36af8     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
36afc     2D 00 64 AD |         if_z    ret
36b00                 | 
36b00     B4 13 D0 FE |                 loc     ptra, #hkbd_report
36b04                 | 
36b04                 |                 ' Handle modifiers
36b04     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
36b08     00 87 C7 FA |                 rdbyte  hr1, ptra
36b0c     C7 87 43 F9 |                 rolword hr1,hpar2,#0
36b10     63 86 63 FD |                 mergew  hr1
36b14     08 EC 07 F6 |                 mov     pa,#8
36b18                 | .modloop
36b18     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
36b1c     E8 8C 07 F6 |                 mov     hpar1,#$E8
36b20     F6 8D 83 F1 |                 sub     hpar1,pa
36b24     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
36b28     FB ED 6F FB |                 djnz    pa,#.modloop
36b2c                 | 
36b2c     6F E0 75 FD | .release        modc    _set    wc
36b30                 |                 'alts    hdev_port, #hid_report_p
36b30                 |                 'mov     ptra, hid_report_p
36b30     02 F0 07 F1 |                 add     ptra, #2
36b34     06 EC 07 F6 |                 mov     pa, #6
36b38     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
36b3c     20 00 90 AD |         if_z    jmp     #.rl3
36b40     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
36b44     02 F2 07 F1 |                 add     ptrb, #2
36b48     06 EE 07 F6 |                 mov     pb, #6
36b4c     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
36b50     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
36b54     08 00 90 AD |         if_z    jmp     #.rl3
36b58     FC EF 6F FB |                 djnz    pb, #.rl2
36b5c     68 00 B0 FD |                 call    #hkbd_translate
36b60     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
36b64                 | 
36b64     00 90 07 F6 |                 mov     hpar3, #0
36b68     1F 90 27 F4 |                 bith    hpar3, #31
36b6c                 | 
36b6c     6F 00 74 FD | .press          modc    _clr    wc
36b70     27 F1 03 F6 |                 mov     ptra, urx_buff_p
36b74     02 F0 07 F1 |                 add     ptra, #2
36b78     06 EC 07 F6 |                 mov     pa, #6
36b7c     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
36b80     20 00 90 AD |         if_z    jmp     #.pl3
36b84     30 13 F0 FE |                 loc     ptrb, #hkbd_report
36b88     02 F2 07 F1 |                 add     ptrb, #2
36b8c     06 EE 07 F6 |                 mov     pb, #6
36b90     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
36b94     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
36b98     08 00 90 AD |         if_z    jmp     #.pl3
36b9c     FC EF 6F FB |                 djnz    pb, #.pl2
36ba0     24 00 B0 FD |                 call    #hkbd_translate
36ba4     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
36ba8                 | 
36ba8     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
36bac     08 13 F0 FE |                 loc     ptrb, #hkbd_report
36bb0     28 02 64 FD |                 setq #1
36bb4     61 73 07 FB |                 rdlong  htmp1, ptra++
36bb8     28 02 64 FD |                 setq #1
36bbc     E1 73 67 FC |                 wrlong  htmp1, ptrb++
36bc0     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
36bc4                 | 
36bc4     2D 00 64 FD |                 ret
36bc8                 | 
36bc8                 | '------------------------------------------------------------------------------
36bc8                 | ' Translate keyboard scancode to ASCII
36bc8                 | '------------------------------------------------------------------------------
36bc8                 | ' On entry:
36bc8                 | '   hpar1 - scancode
36bc8                 | '   hpar2 - key modifiers state
36bc8                 | '       c - pressed (0) or released (1) flag
36bc8                 | ' On exit:
36bc8                 | '   hpar1 - bit     31 = 0 pressed, 1 released
36bc8                 | '               30..17 = unused
36bc8                 | '                   18 = scroll-lock state 
36bc8                 | '                   17 = caps-lock state
36bc8                 | '                   16 = num-lock state 
36bc8                 | '                15..8 = key modifiers state
36bc8                 | '                 7..0 = scancode
36bc8                 | '------------------------------------------------------------------------------
36bc8                 | hkbd_translate
36bc8     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
36bcc     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
36bd0     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
36bd4     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
36bd8     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
36bdc     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
36be0                 | 
36be0                 |         if EMUPAD_MAX_PLAYER > 0
36be0                 | 
36be0                 |         if EMUPAD_BT0_BIT >= 0
36be0                 |         end
36be0                 |         if EMUPAD_BT1_BIT >= 0
36be0                 |         end
36be0                 |         if EMUPAD_BT2_BIT >= 0
36be0                 |         end
36be0                 |         if EMUPAD_BT3_BIT >= 0
36be0                 |         end
36be0                 |         if EMUPAD_BT4_BIT >= 0
36be0                 |         end
36be0                 |         if EMUPAD_BT5_BIT >= 0
36be0                 |         end
36be0                 |         if EMUPAD_BT6_BIT >= 0
36be0                 |         end
36be0                 |         if EMUPAD_BT7_BIT >= 0
36be0                 |         end
36be0                 |         if EMUPAD_BT8_BIT >= 0
36be0                 |         end
36be0                 |         if EMUPAD_BT9_BIT >= 0
36be0                 |         end
36be0                 | 
36be0                 |         end
36be0     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
36be4     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
36be8     1F 8C 47 F4 |                 bitc    hpar1, #31
36bec                 |         if KEYQUEUE_SIZE > 0
36bec     C4 09 B0 FE |                 loc pb,#keyq_head
36bf0     F7 71 E3 FA |                 rdword htmp,pb
36bf4     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
36bf8     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
36bfc     B8 75 03 F6 |                 mov htmp2,htmp
36c00     04 74 07 FA |                 mul htmp2,#4
36c04     F7 75 03 F1 |                 add htmp2,pb
36c08     02 74 07 F1 |                 add htmp2,#2
36c0c     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
36c10     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
36c14     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
36c18     F7 71 43 5C |         if_nz   wrbyte htmp,pb
36c1c                 |         end
36c1c     2D 00 7C FD |                 ret wcz
36c20                 | 
36c20                 | if HAVE_MOUSE
36c20                 | '------------------------------------------------------------------------------
36c20                 | ' Execute an IN interrupt transaction to poll for mouse activity.
36c20                 | '------------------------------------------------------------------------------
36c20                 | ' On entry:
36c20                 | ' On exit:
36c20                 | '------------------------------------------------------------------------------
36c20                 | hget_mouse_in_report
36c20     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
36c24     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
36c28     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
36c2c     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
36c30     CF 02 A0 FD |                 call    #do_int_in
36c34     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36c38     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
36c3c                 | 
36c3c     00 90 0F F2 |                 cmp     hpar3, #0               wz
36c40     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
36c44                 | 
36c44     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
36c48     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
36c4c     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
36c50     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
36c54                 | 
36c54     27 F1 03 F6 |                 mov     ptra, urx_buff_p
36c58     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
36c5c     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
36c60     01 90 87 31 |         if_ae   sub     hpar3, #1
36c64                 | 
36c64     40 09 90 FE |                 loc     pa, #mouse_limits
36c68     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
36c6c                 | 
36c6c                 |                 ' load xacc,yacc,zacc
36c6c     28 04 64 FD |                 setq    #3-1
36c70     80 87 07 FB |                 rdlong  hr1,ptrb
36c74                 |                 ' load limits and outptr
36c74     28 04 64 FD |                 setq    #3-1
36c78     F6 73 03 FB |                 rdlong  htmp1,pa
36c7c                 | 
36c7c     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
36c80     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
36c84     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
36c88     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
36c8c     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
36c90     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
36c94     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
36c98     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
36c9c                 |               
36c9c                 | 
36c9c     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
36ca0     07 70 67 F7 |                 signx   htmp, #7
36ca4     B8 87 03 F1 |                 add     hr1,htmp
36ca8     00 72 0F F2 |                 cmp     htmp1,#0 wz
36cac     B9 87 63 53 |         if_ne   fles    hr1,htmp1
36cb0     00 86 47 53 |         if_ne   fges    hr1,#0
36cb4                 | 
36cb4     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
36cb8     07 70 67 F7 |                 signx   htmp, #7
36cbc     B8 89 03 F1 |                 add     hr2,htmp
36cc0     00 74 0F F2 |                 cmp     htmp2,#0 wz
36cc4     BA 89 63 53 |         if_ne   fles    hr2,htmp2
36cc8     00 88 47 53 |         if_ne   fges    hr2,#0
36ccc                 |                 
36ccc                 | 
36ccc     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
36cd0     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
36cd4     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
36cd8     B8 8B 03 A1 |         if_z    add     hr3,htmp
36cdc                 | 
36cdc     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
36ce0     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
36ce4                 | 
36ce4                 |                 ' write back accumulators
36ce4     28 04 64 FD |                 setq    #3-1
36ce8     80 87 67 FC |                 wrlong  hr1,ptrb
36cec                 |                 ' if outptr set, write X/Y words
36cec     00 76 0F F2 |                 cmp htmp3,#0                    wz
36cf0     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
36cf4     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
36cf8     2D 00 64 FD |                 ret
36cfc                 | end
36cfc                 | 
36cfc                 | '------------------------------------------------------------------------------
36cfc                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
36cfc                 | '------------------------------------------------------------------------------
36cfc                 | ' On entry:
36cfc                 | ' On exit:
36cfc                 | '------------------------------------------------------------------------------
36cfc                 | if _HAVE_GAMEPAD
36cfc                 | hget_gp_in_report
36cfc     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
36d00     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
36d04                 | 
36d04     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
36d08     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
36d0c     00 90 E3 F8 |                 getbyte hpar3
36d10     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
36d14     CF 02 A0 FD |                 call    #do_int_in
36d18     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36d1c     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
36d20                 | 
36d20     00 90 0F F2 |                 cmp     hpar3, #0               wz
36d24     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
36d28                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
36d28                 | 
36d28     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
36d2c     00 70 E3 F8 |                 getbyte htmp                            ' |
36d30     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
36d34     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
36d38     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
36d3c     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
36d40     B8 01 C0 F8 |                 setbyte htmp                            ' |
36d44                 | 
36d44                 | ' Note: the following code compares the current and previous reports
36d44                 | ' and process the data if there are changes to ease the debug output.
36d44                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
36d44                 | ' gpPreReport buffer.
36d44                 | 
36d44                 |                 ' ----- start of block to remove
36d44                 |                 {
36d44                 |                 }
36d44                 |                 ' ----- end of block to remove
36d44     F4 04 90 FE |                 loc pa,#hpad_translate
36d48     2A EC 63 FD |                 push pa
36d4c                 | 
36d4c                 |                 ' FALL THROUGH !!!!
36d4c                 | 
36d4c                 | '------------------------------------------------------------------------------
36d4c                 | ' Decode controller report
36d4c                 | '------------------------------------------------------------------------------
36d4c                 | hid_decode
36d4c                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
36d4c     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
36d50     00 04 00 FF 
36d54     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
36d58                 | 
36d58     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
36d5c                 | 
36d5c     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
36d60     00 2A E3 F8 |                 getbyte hidr_type
36d64     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
36d68     34 02 90 AD |         if_z    jmp     #hpad_xinput
36d6c     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
36d70     1C 03 90 AD |         if_z    jmp     #hpad_ps3
36d74     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
36d78     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
36d7c     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
36d80                 |                 
36d80                 | 
36d80                 | '------------------------------------------------------------------------------
36d80                 | ' Handle HID controller (or mouse now
36d80                 | ' On entry:
36d80                 | '   ptrb - controller report
36d80                 | '------------------------------------------------------------------------------
36d80                 | hpad_hid
36d80     1B 01 A0 FD |                 call    #get_hid_descr_buffer
36d84     F7 F1 03 F6 |                 mov     ptra, pb
36d88     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
36d8c     00 EC 03 F6 |                 mov     pa, 0-0
36d90                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
36d90     19 2A 3B FF 
36d94     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
36d98                 | 
36d98                 | .next
36d98     00 EC 5F F2 |                 cmps    pa, #0      wcz
36d9c     2D 00 7C ED |         if_be   ret     wcz
36da0                 | 
36da0     61 8D C7 FA |                 rdbyte  hpar1, ptra++
36da4     01 EC 87 F1 |                 sub     pa, #1
36da8     00 8E 07 F6 |                 mov     hpar2, #0
36dac                 | 
36dac     C6 71 03 F6 |                 mov     htmp, hpar1
36db0     03 70 07 F5 |                 and     htmp, #$03
36db4     01 70 0F F2 |                 cmp     htmp, #1    wz
36db8     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
36dbc     07 8E 67 A7 |         if_z    signx   hpar2,#7
36dc0     01 EC 87 A1 |         if_z    sub     pa, #1
36dc4     02 70 0F F2 |                 cmp     htmp, #2    wz
36dc8     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
36dcc     0F 8E 67 A7 |         if_z    signx   hpar2,#15
36dd0     02 EC 87 A1 |         if_z    sub     pa, #2
36dd4     03 70 0F F2 |                 cmp     htmp, #3    wz
36dd8     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
36ddc     04 EC 87 A1 |         if_z    sub     pa, #4
36de0                 | 
36de0     FC 8C 07 F5 |                 and     hpar1, #$FC
36de4                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
36de4                 | 
36de4     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
36de8     0C 01 90 AD |         if_z    jmp     #.report_id
36dec     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
36df0     24 01 90 AD |         if_z    jmp     #.usage_page
36df4     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
36df8     2C 01 90 AD |         if_z    jmp     #.usage
36dfc     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
36e00     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
36e04     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
36e08     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
36e0c     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
36e10     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
36e14     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
36e18     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
36e1c     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
36e20     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
36e24     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
36e28     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
36e2c     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
36e30     64 FF 9F 5D |         if_nz   jmp     #.next
36e34                 | 
36e34     D8 1D A7 FB |                 tjf     hidr_state,#.next
36e38                 | 
36e38     03 8E 07 F5 |                 and     hpar2, #$03
36e3c     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
36e40     18 00 90 5D |         if_nz   jmp     #.skip
36e44                 | 
36e44     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
36e48     20 00 90 AD |         if_z    jmp     #.axes
36e4c     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
36e50     5C 00 90 AD |         if_z    jmp     #.hats
36e54     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
36e58     70 00 90 AD |         if_z    jmp     #.buttons
36e5c                 | .skip
36e5c     8F 71 03 F6 |                 mov     htmp, hidr_size
36e60     90 71 03 FA |                 mul     htmp, hidr_count
36e64     B8 23 03 F1 |                 add     hidr_offset, htmp
36e68     2C FF 9F FD |                 jmp     #.next
36e6c                 | .axes
36e6c                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
36e6c     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
36e70     90 87 03 F6 |                 mov     hr1, hidr_count
36e74                 | .l1
36e74     91 8D 03 F6 |                 mov     hpar1, hidr_offset
36e78     8F 8F 03 F6 |                 mov     hpar2, hidr_size
36e7c     04 03 B0 FD |                 call    #hpad_getbits
36e80     64 03 B0 FD |                 call    #hpad_normalize
36e84     06 84 1F F2 |                 cmp     hr0, #6         wcz
36e88     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
36e8c     00 88 43 C8 |         if_b    getnib  hr2
36e90     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
36e94     5F 01 20 C9 |         if_b    setword retval
36e98     01 84 07 C1 |         if_b    add     hr0, #1
36e9c     8F 23 03 F1 |                 add     hidr_offset, hidr_size
36ea0     F4 87 6F FB |                 djnz    hr1, #.l1
36ea4                 | 
36ea4     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
36ea8     01 1C 07 F6 |                 mov     hidr_state, #1
36eac     E8 FE 9F FD |                 jmp     #.next
36eb0                 | .hats
36eb0                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
36eb0     91 8D 03 F6 |                 mov     hpar1, hidr_offset
36eb4     8F 8F 03 F6 |                 mov     hpar2, hidr_size
36eb8     C8 02 B0 FD |                 call    #hpad_getbits
36ebc     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
36ec0     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
36ec4     01 1C 07 F6 |                 mov     hidr_state, #1
36ec8     90 FF 9F FD |                 jmp     #.skip
36ecc                 | .buttons
36ecc                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
36ecc     91 8D 03 F6 |                 mov     hpar1, hidr_offset
36ed0     8F 8F 03 F6 |                 mov     hpar2, hidr_size
36ed4     90 8F 03 FA |                 mul     hpar2, hidr_count
36ed8     A8 02 B0 FD |                 call    #hpad_getbits
36edc     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
36ee0     B8 BF 62 F0 |                 shl     retval, htmp
36ee4     5F 17 43 F5 |                 or      hidr_buttons, retval
36ee8     90 71 03 F1 |                 add     htmp, hidr_count
36eec     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
36ef0     01 1C 07 F6 |                 mov     hidr_state, #1
36ef4     64 FF 9F FD |                 jmp     #.skip
36ef8                 | .report_id
36ef8     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
36efc     2D 00 7C 5D |         if_nz   ret     wcz
36f00     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
36f04     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
36f08     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
36f0c     01 1C 67 56 |         if_nz   neg     hidr_state,#1
36f10     01 F2 87 51 |         if_nz   sub     ptrb,#1
36f14     80 FE 9F FD |                 jmp     #.next
36f18                 | .usage_page
36f18     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
36f1c     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
36f20     04 1C 07 A6 |         if_z    mov     hidr_state, #4
36f24     70 FE 9F FD |                 jmp     #.next
36f28                 | .usage
36f28     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
36f2c     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
36f30     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
36f34     01 1C 07 A6 |         if_z    mov     hidr_state, #1
36f38     5C FE 9F AD |         if_z    jmp     #.next
36f3c     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
36f40     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
36f44     01 1C 07 A6 |         if_z    mov     hidr_state, #1
36f48     4C FE 9F AD |         if_z    jmp     #.next
36f4c     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
36f50     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
36f54     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
36f58     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
36f5c     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
36f60     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
36f64     10 00 90 AD |         if_z    jmp     #.usage_axis
36f68     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
36f6c     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
36f70     03 1C 07 A6 |         if_z    mov     hidr_state, #3
36f74     20 FE 9F FD |                 jmp     #.next
36f78                 | .usage_axis
36f78     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
36f7c     18 FE 9F CD |         if_b    jmp     #.next
36f80     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
36f84     C7 01 00 F8 |                 setnib  hpar2
36f88                 | 
36f88     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
36f8c     C7 8F C3 F9 |                 decod   hpar2
36f90     C7 0F 43 F5 |                 or      hidr_flags, hpar2
36f94                 | 
36f94     01 24 07 F1 |                 add     hidr_usage_idx, #1
36f98     02 1C 07 F6 |                 mov     hidr_state, #2
36f9c     F8 FD 9F FD |                 jmp     #.next
36fa0                 | 
36fa0                 | '------------------------------------------------------------------------------
36fa0                 | ' Handle XInput controller
36fa0                 | ' On entry:
36fa0                 | '   ptrb - controller report
36fa0                 | '------------------------------------------------------------------------------
36fa0                 | '   Default implementation translates the report to a pseudo-defacto hid
36fa0                 | '   standard and jumps to hpad_translate for actions.
36fa0                 | '   Implementors may take specific actions for this kind of controller.
36fa0                 | '------------------------------------------------------------------------------
36fa0                 | hpad_xinput
36fa0     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
36fa4     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
36fa8     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
36fac     14 70 0F F2 |                 cmp     htmp, #$14      wz
36fb0     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
36fb4                 | 
36fb4                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
36fb4                 | 
36fb4     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
36fb8     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
36fbc                 | 
36fbc     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
36fc0     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
36fc4     5F BF 22 F6 |                 not     retval
36fc8     5F 11 2B F9 |                 setword hidr_axis, retval, #1
36fcc     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
36fd0     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
36fd4     5F BF 22 F6 |                 not     retval
36fd8     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
36fdc                 | 
36fdc     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
36fe0     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
36fe4     C0 BE 1E F2 |                 cmp     retval, #192    wcz
36fe8     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
36fec     F8 01 B0 FD |                 call    #hpad_normalize
36ff0     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
36ff4     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
36ff8     C0 BE 1E F2 |                 cmp     retval, #192    wcz
36ffc     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
37000     E4 01 B0 FD |                 call    #hpad_normalize
37004     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
37008                 | 
37008     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3700c     81 BF E6 FA |                 rdword  retval, ptrb[1]
37010     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
37014     00 16 47 F4 |                 bitc    hidr_buttons, #0
37018     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3701c     01 16 47 F4 |                 bitc    hidr_buttons, #1
37020     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
37024     02 16 47 F4 |                 bitc    hidr_buttons, #2
37028     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3702c     03 16 47 F4 |                 bitc    hidr_buttons, #3
37030     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
37034     04 16 47 F4 |                 bitc    hidr_buttons, #4
37038     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
3703c     05 16 47 F4 |                 bitc    hidr_buttons, #5
37040     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
37044     08 16 47 F4 |                 bitc    hidr_buttons, #8
37048     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
3704c     09 16 47 F4 |                 bitc    hidr_buttons, #9
37050     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
37054     0A 16 47 F4 |                 bitc    hidr_buttons, #10
37058     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
3705c     0B 16 47 F4 |                 bitc    hidr_buttons, #11
37060     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
37064     0C 16 47 F4 |                 bitc    hidr_buttons, #12
37068                 | 
37068     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3706c     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
37070     7A BB 7A FF 
37074     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
37078     F9 FF 7F FF 
3707c     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
37080     B9 71 5F F9 |                 altgn   htmp, #htmp1
37084     00 70 43 F8 |                 getnib  htmp
37088     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3708c                 | 
3708c     AC 01 90 FD |                 jmp     #hpad_translate
37090                 | 
37090                 | '------------------------------------------------------------------------------
37090                 | ' Handle PS3 controller
37090                 | ' On entry:
37090                 | '   ptrb - controller report
37090                 | '------------------------------------------------------------------------------
37090                 | '   Default implementation translates the report to a pseudo-defacto hid
37090                 | '   standard and jumps to hpad_translate for actions.
37090                 | '   Implementors may take specific actions for this kind of controller.
37090                 | '------------------------------------------------------------------------------
37090                 | hpad_ps3
37090     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
37094     01 70 0F F2 |                 cmp     htmp, #$01      wz
37098     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
3709c                 | 
3709c                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3709c                 | 
3709c     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
370a0     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
370a4     40 01 B0 FD |                 call    #hpad_normalize
370a8     5F 11 23 F9 |                 setword hidr_axis, retval, #0
370ac     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
370b0     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
370b4     30 01 B0 FD |                 call    #hpad_normalize
370b8     5F 11 2B F9 |                 setword hidr_axis, retval, #1
370bc     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
370c0     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
370c4     20 01 B0 FD |                 call    #hpad_normalize
370c8     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
370cc     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
370d0     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
370d4     10 01 B0 FD |                 call    #hpad_normalize
370d8     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
370dc     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
370e0     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
370e4                 | 
370e4     08 8C 07 F6 |                 mov     hpar1, #8
370e8     13 8E 07 F6 |                 mov     hpar2, #19
370ec     94 00 B0 FD |                 call    #hpad_getbits
370f0                 | 
370f0     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
370f4     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
370f8     00 16 47 F4 |                 bitc    hidr_buttons, #0
370fc     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
37100     01 16 47 F4 |                 bitc    hidr_buttons, #1
37104     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
37108     02 16 47 F4 |                 bitc    hidr_buttons, #2
3710c     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
37110     03 16 47 F4 |                 bitc    hidr_buttons, #3
37114     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
37118     04 16 47 F4 |                 bitc    hidr_buttons, #4
3711c     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
37120     05 16 47 F4 |                 bitc    hidr_buttons, #5
37124     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
37128     06 16 47 F4 |                 bitc    hidr_buttons, #6
3712c     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
37130     07 16 47 F4 |                 bitc    hidr_buttons, #7
37134     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
37138     08 16 47 F4 |                 bitc    hidr_buttons, #8
3713c     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
37140     09 16 47 F4 |                 bitc    hidr_buttons, #9
37144     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
37148     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3714c     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
37150     0B 16 47 F4 |                 bitc    hidr_buttons, #11
37154     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
37158     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3715c                 | 
3715c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
37160     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
37164     09 FA 79 FF 
37168     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
3716c     FF FA 7F FF 
37170     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
37174     B9 71 5F F9 |                 altgn   htmp, #htmp1
37178     00 70 43 F8 |                 getnib  htmp
3717c     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
37180                 | 
37180     B8 00 90 FD |                 jmp     #hpad_translate
37184                 | 
37184                 | '------------------------------------------------------------------------------
37184                 | ' Read bits from report data buffer
37184                 | '------------------------------------------------------------------------------
37184                 | ' On entry:
37184                 | '   PTRB - report buffer
37184                 | '   hpar1 - start bit
37184                 | '   hpar2 - number of bits
37184                 | ' On exit:
37184                 | '   retval - bits
37184                 | '------------------------------------------------------------------------------
37184                 | hpad_getbits
37184     C6 71 03 F6 |                 mov     htmp, hpar1
37188     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
3718c     F9 71 03 F1 |                 add     htmp, ptrb
37190     B8 BF 02 FB |                 rdlong  retval, htmp
37194                 | 
37194     C6 73 03 F6 |                 mov     htmp1, hpar1
37198     07 72 07 F5 |                 and     htmp1, #$07     ' shift
3719c     B9 BF 42 F0 |                 shr     retval, htmp1
371a0                 | 
371a0     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
371a4     10 00 90 1D |         if_a    jmp     #.l1
371a8                 | 
371a8     C7 8F C3 F9 |                 decod   hpar2
371ac     01 8E 87 F1 |                 sub     hpar2, #1
371b0     C7 BF 02 F5 |                 and     retval, hpar2
371b4     2D 00 64 FD |                 ret
371b8                 | .l1
371b8     FF 7F 00 FF 
371bc     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
371c0     03 70 07 F1 |                 add     htmp, #3
371c4     B8 75 03 FB |                 rdlong  htmp2, htmp
371c8     18 8E 87 F1 |                 sub     hpar2, #24
371cc     C7 8F C3 F9 |                 decod   hpar2
371d0     01 8E 87 F1 |                 sub     hpar2, #1
371d4     B9 75 43 F0 |                 shr     htmp2, htmp1
371d8     C7 75 03 F5 |                 and     htmp2, hpar2
371dc     18 74 67 F0 |                 shl     htmp2, #24
371e0     BA BF 42 F5 |                 or      retval, htmp2
371e4     2D 00 64 FD |                 ret
371e8                 | 
371e8                 | '------------------------------------------------------------------------------
371e8                 | ' Normalize value to signed word (-32768 / 32767)
371e8                 | '------------------------------------------------------------------------------
371e8                 | ' On entry:
371e8                 | '   retval - value to normalize
371e8                 | '   hidr_lminmax - min (word 1) max (word 0) value range
371e8                 | '   - or -
371e8                 | '   hidr_pminmax - min (word 1) max (word 0) value range
371e8                 | '   hidr_size - value bits length
371e8                 | ' On exit:
371e8                 | '   retval - normalized value
371e8                 | '------------------------------------------------------------------------------
371e8                 | hpad_normalize
371e8     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
371ec     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
371f0     2D 00 64 AD |         if_z    ret
371f4     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
371f8     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
371fc     0F 72 77 F7 |                 signx   htmp1, #15      wc
37200     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
37204     00 BE 66 C7 |         if_c    signx   retval, #0-0
37208     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
3720c     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
37210     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
37214     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
37218     B8 71 53 F6 |                 abs     htmp            wc
3721c     1F BE 0E F4 |                 testb   retval, #31     wz
37220     5F BF 42 F6 |                 abs     retval
37224     B8 BF 12 FD |                 qdiv    retval, htmp
37228     18 BE 62 FD |                 getqx   retval
3722c     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
37230     C0 FF 7F FF 
37234     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
37238     2D 00 64 FD |                 ret
3723c                 | 
3723c                 | '------------------------------------------------------------------------------
3723c                 | ' Perform controller actions
3723c                 | ' On entry:
3723c                 | '    hidr_id        report id
3723c                 | '    hidr_axis      axis value (signed word, 2 axes per long)
3723c                 | '                      X = hidr_axis+0, #0
3723c                 | '                      Y = hidr_axis+0, #1
3723c                 | '                      Z = hidr_axis+1, #0
3723c                 | '                     RX = hidr_axis+1, #1
3723c                 | '                     RY = hidr_axis+2, #0
3723c                 | '                     RZ = hidr_axis+2, #1
3723c                 | '    hidr_buttons   buttons state (bits 0 to 31)
3723c                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
3723c                 | '
3723c                 | '                     -------3 -------2 -------1 -------0 byte
3723c                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
3723c                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
3723c                 | '                                zyx||| |||||||| ++++++++ n. buttons
3723c                 | '                                |||||| ||||++++--------- n. axes
3723c                 | '                                |||||| ++++------------- n. hats
3723c                 | '                                ++++++------------------ valid axes
3723c                 | '------------------------------------------------------------------------------
3723c                 | hpad_translate
3723c                 | 
3723c                 | 
3723c                 |         if HAVE_HIDPAD
3723c     84 0C F0 FE |                 loc     ptrb,#hidpad_report
37240     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
37244     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
37248     01 70 E7 F2 |                 cmpsub  htmp,#1
3724c     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
37250     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
37254     2D 00 7C 3D |         if_ae   ret     wcz
37258     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
3725c     B8 F3 03 F1 |                 add     ptrb,htmp
37260     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
37264     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
37268     28 0C 64 FD |                 setq    #7-1
3726c     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
37270                 |         end
37270                 | 
37270                 | 
37270                 |         if EMUPAD_MAX_PLAYER > 0
37270                 | .emupad_no_hat
37270                 |         if EMUPAD_BT0_BIT >= 0
37270                 |         end
37270                 |         if EMUPAD_BT1_BIT >= 0
37270                 |         end
37270                 |         if EMUPAD_BT2_BIT >= 0
37270                 |         end
37270                 |         if EMUPAD_BT3_BIT >= 0
37270                 |         end
37270                 |         if EMUPAD_BT4_BIT >= 0
37270                 |         end
37270                 |         if EMUPAD_BT5_BIT >= 0
37270                 |         end
37270                 |         if EMUPAD_BT6_BIT >= 0
37270                 |         end
37270                 |         if EMUPAD_BT7_BIT >= 0
37270                 |         end
37270                 |         if EMUPAD_BT8_BIT >= 0
37270                 |         end
37270                 |         if EMUPAD_BT9_BIT >= 0
37270                 |         end
37270                 | .emupad_slot_over
37270                 |         end
37270                 | 
37270                 |         if 0
37270                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
37270                 | 
37270                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
37270                 | 
37270                 |         end
37270     2D 00 64 FD |                 ret
37274                 | end
37274                 | 
37274                 | if EMUPAD_MAX_PLAYER > 0
37274                 | '------------------------------------------------------------------------------
37274                 | ' Clear EmuPad state
37274                 | '------------------------------------------------------------------------------
37274                 | emupad_reset
37274                 | 
37274                 | '------------------------------------------------------------------------------
37274                 | ' Get EmuPad Player number for current device (into retval)
37274                 | ' Z flag is also set if current device is valid
37274                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
37274                 | '------------------------------------------------------------------------------
37274                 | emupad_getnum
37274                 | .loop
37274                 | '------------------------------------------------------------------------------
37274                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
37274                 | '------------------------------------------------------------------------------
37274                 | emupad_discon
37274                 | .loop         
37274                 |         
37274                 |         ' FALL THROUGH!!!
37274                 | 
37274                 | '------------------------------------------------------------------------------
37274                 | ' Update EmuPad reports (all of them...)
37274                 | '------------------------------------------------------------------------------
37274                 | emupad_write_reports
37274                 | .devloop
37274                 | 
37274                 | end
37274                 | 
37274                 | 
37274                 | '------------------------------------------------------------------------------
37274                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
37274                 | '------------------------------------------------------------------------------
37274                 | ' On entry:
37274                 | ' On exit:
37274                 | '------------------------------------------------------------------------------
37274                 | hget_hub_status
37274     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
37278     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3727c     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
37280     01 90 2F F9 |                 setword hpar3, #1, #1
37284     CF 02 A0 FD |                 call    #do_int_in
37288     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3728c     0C 00 90 AD |         if_z    jmp     #.data
37290     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
37294     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
37298     2D 00 64 FD |                 ret
3729c                 | .data
3729c     00 90 0F F2 |                 cmp     hpar3, #0               wz
372a0     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
372a4                 | 
372a4     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
372a8     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
372ac     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
372b0     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
372b4                 |                 debug(ubin_long(hub_status_chg))
372b4                 | 
372b4     01 5A 06 F6 |                 mov     hdev_port, #1
372b8                 | .loop
372b8     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
372bc     0C 00 B0 AD |         if_x1   call    #hub_port_handler
372c0     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
372c4     F0 FF 9F 3D |         if_nc   jmp     #.loop
372c8     2D 00 64 FD |                 ret
372cc                 | 
372cc                 | hub_port_handler
372cc     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
372d0     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
372d4     27 EF 03 F6 |                 mov     pb, urx_buff_p
372d8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
372dc     55 02 A0 FD |                 call    #control_read
372e0     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
372e4                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
372e4                 | 
372e4     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
372e8     50 01 90 5D |         if_x0   jmp     #.other
372ec     68 02 D0 FE |                 loc     ptra, #clr_port_feat
372f0     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
372f4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
372f8     A0 02 A0 FD |                 call    #control_write
372fc     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
37300     7C 01 90 5D |         if_x0   jmp     #.disconnect
37304     B0 99 02 F6 |                 mov     hctwait, _100ms_
37308     EF 02 A0 FD |                 call    #poll_waitx
3730c                 | 
3730c     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
37310     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
37314     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
37318     A0 02 A0 FD |                 call    #control_write
3731c                 | 
3731c     02 76 07 F6 |                 mov     htmp3, #2
37320                 | .wait_reset
37320     AC 99 02 F6 |                 mov     hctwait, _8ms_
37324     EF 02 A0 FD |                 call    #poll_waitx
37328     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3732c     27 EF 03 F6 |                 mov     pb, urx_buff_p
37330     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
37334     55 02 A0 FD |                 call    #control_read
37338     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3733c     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
37340     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
37344                 | 
37344     10 02 D0 FE |                 loc     ptra, #clr_port_feat
37348     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
3734c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
37350     A0 02 A0 FD |                 call    #control_write
37354                 | 
37354     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
37358                 | .wait_recover
37358     A7 99 02 F6 |                 mov     hctwait, _1ms_
3735c     EF 02 A0 FD |                 call    #poll_waitx
37360     FD 71 6F FB |                 djnz    htmp,#.wait_recover
37364                 | 
37364     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
37368     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3736c     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
37370                 | 
37370     00 08 00 FF 
37374     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
37378     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
3737c     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
37380     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
37384     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
37388     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3738c     48 01 90 5D |         if_nz   jmp     #.done
37390                 | .get_dev_desc
37390     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
37394     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
37398     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3739c     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
373a0     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
373a4     01 71 57 FC |                 wrword  htmp, ptra[wValue]
373a8     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
373ac     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
373b0     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
373b4     AC 99 02 F6 |                 mov     hctwait, _8ms_
373b8     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
373bc     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
373c0     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
373c4     BE 00 A0 FD |                 call    #calc_crc5
373c8     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
373cc     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
373d0     F7 AD C2 FA |                 rdbyte  total_data, pb
373d4     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
373d8     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
373dc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
373e0     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
373e4     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
373e8     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
373ec                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
373ec     9F 99 02 F6 |                 mov     hctwait, _500us_
373f0     EF 02 A0 FD |                 call    #poll_waitx
373f4     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
373f8     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
373fc     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
37400     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
37404     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37408     CC 00 90 5D |         if_nz   jmp     #.done
3740c     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
37410     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
37414     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
37418     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3741c     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
37420     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
37424     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
37428     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
3742c     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
37430     A4 00 90 CD |         if_b    jmp     #.done
37434     6C F0 BF FD |                 call    #hparse_con_desc
37438     9C 00 90 FD |                 jmp     #.done
3743c                 | 
3743c                 | .other
3743c     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
37440     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
37444     28 00 90 AD |         if_x1   jmp     #.reset_feature
37448     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
3744c     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
37450     1C 00 90 AD |         if_x1   jmp     #.reset_feature
37454     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
37458     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
3745c     10 00 90 AD |         if_x1   jmp     #.reset_feature
37460     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
37464     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
37468     04 00 90 AD |         if_x1   jmp     #.reset_feature
3746c     68 00 90 FD |                 jmp     #.done
37470                 | .reset_feature
37470     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
37474     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
37478     A0 02 A0 FD |                 call    #control_write
3747c     58 00 90 FD |                 jmp     #.done
37480                 | .disconnect
37480                 | 
37480     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
37484     00 70 E3 F8 |                 getbyte htmp
37488     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
3748c     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
37490     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
37494     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
37498     00 76 06 A6 |         if_z    mov     kb_led_states, #0
3749c     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
374a0                 |         if EMUPAD_MAX_PLAYER > 0
374a0                 |         end
374a0                 |         if HAVE_MOUSE
374a0     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
374a4     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
374a8     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
374ac                 |         end
374ac                 |         if HAVE_HIDPAD
374ac     14 0A F0 FE |                 loc ptrb,#hidpad_report
374b0     2D 71 03 F6 |                 mov htmp,hdev_port
374b4     01 70 E7 F2 |                 cmpsub htmp,#1
374b8     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
374bc     B8 F3 03 F1 |                 add ptrb,htmp
374c0     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
374c4     80 01 6C FC |                 wrlong #0,ptrb
374c8                 |         end
374c8                 | 
374c8     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
374cc     00 00 C4 F8 |                 setbyte #0
374d0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
374d4     00 00 04 F6 |                 mov     0-0, #0
374d8                 | 
374d8                 | .done
374d8     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
374dc     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
374e0     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
374e4     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
374e8     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
374ec     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
374f0                 | 
374f0     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
374f4     27 EF 03 F6 |                 mov     pb, urx_buff_p
374f8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
374fc     55 02 A0 FD |                 call    #control_read
37500     00 69 06 FB |                 rdlong  hub_port_status, ptra
37504                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
37504     2D 00 64 FD |                 ret
37508                 | 
37508                 | '------------------------------------------------------------------------------
37508                 | ' Partially populated SETUP packets
37508                 | '------------------------------------------------------------------------------
37508     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
37509     06          |                 byte    REQ_GET_DESC
3750a     00 01       |                 word    TYPE_DEVICE << 8
3750c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3750e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
37510     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
37511     06          |                 byte    REQ_GET_DESC
37512     00 02       |                 word    TYPE_CONFIG << 8
37514     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
37516     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
37518     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
37519     09          |                 byte    REQ_SET_CONFIG
3751a     00 00       |                 word    0       ' Configuration value
3751c     00 00       |                 word    0       ' Zero
3751e     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
37520     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
37521     05          |                 byte    REQ_SET_ADDR
37522     00 00       |                 word    0       ' Zero
37524     00 00       |                 word    0       ' Zero
37526     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
37528                 | '------------------------------------------------------------------------------
37528                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
37528                 | ' wValue field dictates which protocol should be used.
37528                 | '
37528                 | ' When initialized, all devices default to report protocol. However the host
37528                 | ' should not make any assumptions about the device state and should set the
37528                 | ' desired protocol whenever initializing a device.
37528                 | '------------------------------------------------------------------------------
37528     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
37529     0B          |                 byte    HID_SET_PROTO
3752a     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
3752c                 |                                                 ' (HID 1.11 Section 7.2.6).
3752c     00 00       |                 word    0               ' Interface index number.
3752e     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
37530                 | '------------------------------------------------------------------------------
37530     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
37531     0A          |                 byte    HID_SET_IDLE
37532     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
37534                 |                                         ' reporting until a change is detected in the report data
37534                 | 
37534                 |                                         ' (HID 1.11 Section 7.2.4).
37534     00 00       |                 word    0       ' Interface index number.
37536     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
37538     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
37539     09          |                 byte    HID_SET_REPORT
3753a     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
3753c                 |                                         ' (HID 1.11 Section 7.2.2).
3753c     00 00       |                 word    0       ' Interface index number.
3753e     00 00       |                 word    0       ' Size of the report, in bytes.
37540     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
37541     06          |                 byte    REQ_GET_DESC
37542     00 22       |                 word    TYPE_REPORT << 8
37544     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
37546     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
37548                 | '------------------------------------------------------------------------------
37548     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
37549     06          |                 byte    REQ_GET_DESC
3754a     00 29       |                 word    TYPE_HUB << 8
3754c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3754e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
37550     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
37551     03          |                 byte    REQ_SET_FEATURE
37552     00 00       |                 word    0       ' port power
37554     01 00       |                 word    1       ' Port index number (1+)
37556     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
37558     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
37559     01          |                 byte    REQ_CLEAR_FEATURE
3755a     00 00       |                 word    0       ' port power
3755c     01 00       |                 word    1       ' Port index number (1+)
3755e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
37560     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
37561     00          |                 byte    REQ_GET_STATUS
37562     00 00       |                 word    0
37564     01 00       |                 word    1       ' Port index number (1+)
37566     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
37568                 | '------------------------------------------------------------------------------
37568                 | if _HAVE_GAMEPAD
37568     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
3756c                 | ps3_command_buff
3756c     00 00 00 00 
37570     00          |                 byte    $00, $00, $00, $00, $00
37571     00 00 00 00 
37575     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
37576     FF 27 10 00 
3757a     32          |                 byte    $FF, $27, $10, $00, $32
3757b     FF 27 10 00 
3757f     32          |                 byte    $FF, $27, $10, $00, $32
37580     FF 27 10 00 
37584     32          |                 byte    $FF, $27, $10, $00, $32
37585     FF 27 10 00 
37589     32          |                 byte    $FF, $27, $10, $00, $32
3758a     00 00 00 00 
3758e     00          |                 byte    $00, $00, $00, $00, $00
3758f     00 00 00 00 
37593     00          |                 byte    $00, $00, $00, $00, $00
37594     00 00 00 00 
37598     00          |                 byte    $00, $00, $00, $00, $00
37599     00 00 00    |                 byte    $00, $00, $00
3759c                 | '------------------------------------------------------------------------------
3759c     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
3759f                 |                                         ' 0x01 All blinking
3759f                 |                                         ' 0x02 1 flashes, then on
3759f                 |                                         ' 0x03 2 flashes, then on
3759f                 |                                         ' 0x04 3 flashes, then on
3759f                 |                                         ' 0x05 4 flashes, then on
3759f                 |                                         ' 0x06 1 on
3759f                 |                                         ' 0x07 2 on
3759f                 |                                         ' 0x08 3 on
3759f                 |                                         ' 0x09 4 on
3759f                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
3759f                 |                                         ' 0x0B Blinking*
3759f                 |                                         ' 0x0C Slow blinking*
3759f                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
3759f     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
375a2     00          |                 byte    $00             ' Left rumble
375a3     00          |                 byte    $00             ' Right rumble
375a4     00 00 00    |                 byte    $00, $00, $00
375a7     00          | end
375a8                 | alignl
375a8                 | 
375a8                 | if HAVE_MOUSE
375a8     00 00 00 00 
375ac     00 00 00 00 | mouse_limits long 0[2]
375b0     00 00 00 00 | mouse_outptr long 0
375b4                 | end
375b4                 | 
375b4                 | if KEYQUEUE_SIZE > 0
375b4     00          | keyq_head byte 0
375b5     00          | keyq_tail byte 0
375b6     00 00 00 00 
      ...             
377b2     00 00 00 00 
377b6     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
377b8                 | alignl
377b8                 | end
377b8                 | 
377b8                 | if EMUPAD_MAX_PLAYER > 0
377b8                 | emupad_rule_buffer
377b8                 | if EMUPAD_BUILTIN_RULES
377b8                 | file "padmap_builtin.dat"
377b8                 | end
377b8                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
377b8                 | '' Default rule directly follows!
377b8                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
377b8                 | end
377b8                 | 
377b8                 | '------------------------------------------------------------------------------
377b8                 | ' The USB data cache area gets zero-filled at every device disconnect
377b8                 | '------------------------------------------------------------------------------
377b8                 | usb_cache_start
377b8                 | 
377b8                 | ' HID descriptor and report buffers
377b8                 | if !!OVERLAP_MEMORY
377b8     00 00 00 00 
      ...             
37eb0     00 00 00 00 
37eb4     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
37eb8                 | end
37eb8     00 00 00 00 
37ebc     00 00 00 00 | hkbd_report     byte    0[8]
37ec0     00 00 00 00 | hkbd_led_rep    byte    0
37ec4                 | alignl
37ec4                 | 
37ec4                 | if HAVE_HIDPAD
37ec4     00 00 00 00 
      ...             
37f80     00 00 00 00 
37f84     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
37f88                 | end
37f88                 | 
37f88                 | ' HUB descriptor
37f88     00          | hub_descr       byte    0   ' bDescLength
37f89     00          |                 byte    0   ' bDescriptorType
37f8a     00          |                 byte    0   ' bNbrPorts
37f8b     00 00       |                 word    0   ' wHubCharacteristics
37f8d     00          |                 byte    0   ' bPwrOn2PwrGood
37f8e     00          |                 byte    0   ' bHubContrCurrent
37f8f     00          |                 byte    0   ' DeviceRemoveable
37f90     00          |                 byte    0   ' PortPwrCtrlMask
37f91                 | 
37f91                 | usb_cache_end
37f91                 | 
37f91                 | if HAVE_MOUSE
37f91     00 00 00 00 | mouse_xacc      long 0
37f95     00 00 00 00 | mouse_yacc      long 0
37f99     00 00 00 00 | mouse_zacc      long 0
37f9d     00          | mouse_bstate    byte 0
37f9e     00          | mouse_lpending  byte 0
37f9f     00          | mouse_rpending  byte 0
37fa0     00          | mouse_mpending  byte 0
37fa1     00          | mouse_lock      byte 0
37fa2     00 00 00    |                 byte 0[3] ' padding
37fa5                 | end
37fa5                 | 
37fa5     00 00 00 00 
      ...             
3801d     00 00 00 00 
38021     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
38025     00 00 00 00 
38029     00 00 00 00 
3802d     00 00 00 00 
38031     00 00 00 00 
38035     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
38037     00 00 00 00 
      ...             
3812f     00 00 00 00 
38133     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
38137                 | 
38137     00          | driver_cog      byte    0                       ' Current driver cog + 1
38138                 | 	alignl
38138                 | _audio096_spin2_dat_
38138                 | 
38138                 | audio       org     0
38138                 | 
38138     61 C9 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
3813c     61 17 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
38140     61 23 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
38144                 | 
38144     01 EC 63 FD |             cogid   pa                   ' compute cogid
38148     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
3814c     F6 C9 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
38150     E4 C6 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
38154                 | 
38154     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
38158     0E 20 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
3815c     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
38160     0F 20 06 FC |             wrpin   dac2,#right
38164     0F 00 1E FC |             wxpin   #256,#right    
38168     41 9C 64 FD |             dirh    #left addpins 1
3816c     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
38170     CB E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
38174     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
38178                 |             
38178                 | '---------------------------------------------------------------------------------        
38178                 | '----------------- The main loop -------------------------------------------------
38178                 | '---------------------------------------------------------------------------------
38178                 | 
38178     D4 AA 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
3817c     10 00 90 CD |       if_c  jmp     #loop1
38180                 |   
38180     09 FC 05 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
38184     D4 FC 8D F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
38188     D3 00 80 F1 |             sub     0-0,a40000000
3818c     FD FD 6D FB |             djnz    cn,#p402
38190                 |     
38190     00 FC 05 F6 | loop1       mov     cn,#0               ' Find the channel to compute
38194     D6 FE 01 F6 |             mov     ct,time1            ' with the lowest next sample time
38198     D7 FE 39 F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
3819c     01 FC 05 C6 |     if_c    mov     cn,#1
381a0     D8 FE 39 F3 |             fle     ct,time3 wcz
381a4     02 FC 05 C6 |     if_c    mov     cn,#2     
381a8     D9 FE 39 F3 |             fle     ct,time4 wcz
381ac     03 FC 05 C6 |     if_c    mov     cn,#3
381b0     DA FE 39 F3 |             fle     ct,time5 wcz
381b4     04 FC 05 C6 |     if_c    mov     cn,#4
381b8     DB FE 39 F3 |             fle     ct,time6 wcz
381bc     05 FC 05 C6 |     if_c    mov     cn,#5
381c0     DC FE 39 F3 |             fle     ct,time7 wcz
381c4     06 FC 05 C6 |     if_c    mov     cn,#6
381c8     DD FE 39 F3 |             fle     ct,time8 wcz
381cc     07 FC 05 C6 |     if_c    mov     cn,#7
381d0                 | 
381d0                 | 
381d0                 | '----------------------------------------------------------------------------------
381d0                 | '------------- Compute channel samples --------------------------------------------
381d0                 | '----------------------------------------------------------------------------------
381d0                 | 
381d0                 | 
381d0     FE BC 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
381d4     06 BC 65 F0 |             shl     channeladd,#6
381d8     DE F0 03 F1 |             add     ptra,channeladd
381dc                 | 
381dc     28 16 64 FD |             setq    #11                        	' read parameters
381e0     00 D3 05 FB |             rdlong  pointer0,ptra
381e4                 |     	    
381e4     1F E0 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
381e8     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
381ec     F0 C0 31 F9 |             getword qq,command0,#0            	' get the new rate
381f0     4E C0 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
381f4     E0 C0 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
381f8     00 C0 0D F2 |             cmp     qq,#0 wz                         
381fc     4E 20 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
38200     4E 1E 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
38204                 |             
38204     1E E0 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
38208     E4 C6 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
3820c     00 C6 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
38210                 | 
38210     EA 02 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
38214     EA 04 3A F9 |             getword oldrs,sample0,#1
38218     EE F8 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
3821c     EE F6 31 F9 |     	    getword avol0,volpan0,#0
38220     EF F4 39 F9 |             getword askip0,freqskip0,#1    	    
38224     EF F2 31 F9 |             getword afreq0,freqskip0,#0
38228                 | 
38228     D6 FC 95 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
3822c     00 00 02 F6 |             mov     dt0,0-0    
38230     D5 00 82 F1 |             sub     dt0,time0
38234                 |             
38234     D6 FC 8D F9 |             altd    cn, #time1                ' add channel period to channel time
38238     F9 00 00 F1 |             add     0-0,afreq0  	
3823c                 |             
3823c                 | '---- envelopes
3823c                 |             
3823c     00 E4 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
38240     20 00 00 AF 
38244     00 44 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
38248     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
3824c                 | 
3824c     F9 44 02 F6 |             mov     envs1,afreq0
38250     F3 44 02 FA |             mul     envs1,envspd0
38254     22 E3 01 F1 |             add     envph0,envs1 
38258                 | 
38258     F1 40 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
3825c     06 40 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
38260     20 43 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
38264     10 40 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
38268     F4 40 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
3826c     F4 40 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
38270     00 42 06 36 |     if_ge   mov     envlo,#0
38274     F4 E2 01 36 |     if_ge   mov     envph0,envlen0
38278     16 E2 65 30 |     if_ge   shl     envph0,#22
3827c                 | 
3827c     20 45 02 F6 |             mov     envs1,envhi			' get the phase acc
38280     01 44 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
38284     F2 44 02 F1 |             add     envs1,envptr0		' and add the pointer
38288     22 45 02 FB |             rdlong  envs1,envs1			' then read 2 entries
3828c     22 47 3A F9 |             getword envs2,envs1,#1		' next value
38290     22 45 32 F9 |             getword envs1,envs1,#0		' current value
38294     21 47 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
38298     21 43 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
3829c     21 45 02 FA |             mul     envs1,envlo
382a0     23 45 02 F1 |             add     envs1,envs2
382a4     12 44 46 F0 |             shr     envs1,#18			' normalize it to $4000
382a8                 |             
382a8     1B D6 0D F4 | p410        testb   sstart0, #27 wz
382ac     1B C2 61 AD |     if_z    getrnd  spl
382b0     58 00 90 AD |     if_z    jmp     #p406
382b4                 |  
382b4     FA D2 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
382b8     E9 3E C2 F8 |             setbyte pointer00,pointer0,#0
382bc     08 D2 45 F0 |             shr     pointer0,#8
382c0                 |          
382c0     1F D6 0D F4 |             testb   sstart0,#31 wz            
382c4     01 D2 65 A0 |     if_z    shl     pointer0,#1        
382c8     1C D6 0D F4 |             testb   sstart0,#28 wz            
382cc     01 D2 65 A0 |     if_z    shl     pointer0,#1        
382d0                 |         
382d0     ED D2 19 F2 |             cmp     pointer0,lend0 wcz
382d4     ED D2 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
382d8     EC D2 01 31 |     if_ge   add     pointer0,lstart0       
382dc                 |             
382dc     E9 C0 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
382e0     EB C0 01 F1 |             add     qq,sstart0            
382e4                 | 
382e4     FF C7 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
382e8     E0 C2 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
382ec     14 01 B0 1D |     if_gt   call    #cache_read
382f0                 |          
382f0     1F D6 0D F4 |             testb   sstart0,#31 wz 
382f4     08 C2 65 50 |     if_nz   shl     spl,#8
382f8     08 D2 65 50 |     if_nz   shl     pointer0,#8
382fc     07 D2 65 A0 |     if_z    shl     pointer0,#7
38300     1C D6 0D F4 |             testb   sstart0,#28 wz            
38304     01 D2 45 A0 |     if_z    shr     pointer0,#1    
38308     1F D3 C1 F8 | 	    setbyte pointer0,pointer00,#0       
3830c                 | 
3830c                 | 
3830c     22 C3 31 FA | p406        scas    spl,envs1			' apply envelope
38310     00 C2 01 F6 |             mov     spl,0-0
38314     FB C2 31 FA |             scas    spl,avol0                 	' apply volume
38318     00 C2 01 F6 |             mov     spl,0-0
3831c                 | 
3831c     FC C2 31 FA |             scas    spl,apan0                 	' apply pan
38320     00 06 02 F6 |             mov     ls0,0-0
38324     20 00 00 FF 
38328     00 C0 05 F6 |             mov     qq,##16384
3832c     FC C0 81 F1 |             sub     qq,apan0
38330     E0 C2 31 FA |             scas    spl,qq
38334     00 08 02 F6 |             mov     rs0, 0-0
38338                 | 
38338     02 0D 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
3833c     04 0D 02 F1 |             add     rs,rs0
38340     01 0B 82 F1 |             sub     ls,oldls
38344     03 0B 02 F1 |             add     ls,ls0
38348                 |    
38348     04 D5 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
3834c     03 D5 21 F9 |             setword sample0,ls0,#0
38350                 |             
38350     1E D6 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
38354     00 D2 05 A6 |     if_z    mov     pointer0, #0  		
38358     00 E2 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
3835c                 |   '  if_z    mov     sample0,#0
3835c     02 D7 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
38360     1D D6 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
38364     04 00 00 AF 
38368     00 AC 05 A1 |     if_z    add     time1,##2048
3836c     D6 AE 01 A6 |     if_z    mov     time2,time1
38370     02 D7 65 AC |     if_z    wrlong  sstart0,ptra[2]
38374                 | 
38374     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
38378     00 D3 65 FC |             wrlong  pointer0,ptra
3837c     08 E3 65 FC |             wrlong  envph0,ptra[8]
38380     DE F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
38384                 |                       
38384     D5 FA 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
38388     FF BF 25 A7 |     if_z    decmod  front, #511          
3838c                 |          
3838c     05 03 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
38390     06 05 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
38394     0F 02 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
38398     0F 04 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
3839c                 | 	    
3839c                 | 		    
3839c     01 05 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
383a0     08 0F 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
383a4     02 11 02 F6 |             mov     newsample, oldrs       
383a8                 | 
383a8     D5 FA 01 F6 |             mov     oldt0,time0              ' update global time
383ac     00 AB 01 F1 |             add     time0,dt0    
383b0                 |                                      
383b0     00 00 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
383b4     D8 FD 9F AD |     if_z    jmp     #loop1
383b8     00 C1 01 F6 |             mov     qq,dt0
383bc                 |   
383bc     FF F3 97 F9 | p301        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
383c0     00 BE 9D F2 |             cmpr    front, #0-0 wcz
383c4     F4 FF 9F AD |     if_e    jmp     #p301    
383c8                 | 		
383c8     00 16 0E F2 | 	    cmp     scbase,#0 wz
383cc     20 00 90 AD |     if_z    jmp     #p302	   
383d0                 |   
383d0     3F 1C 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
383d4     0C 1B 02 C6 |     if_c    mov     scptr2,scptr
383d8     02 1A 66 C0 |     if_c    shl     scptr2,#2
383dc     0B 1B 02 C1 |     if_c    add     scptr2,scbase     
383e0     60 1A 66 FC |             wrlong  scptr2,#$60
383e4     0D 0F 62 CC |     if_c    wrlong  oldsample,scptr2
383e8     01 00 00 CF 
383ec     7F 18 06 C7 |     if_c    incmod  scptr,##639
383f0                 | 			    
383f0     DF 0E 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
383f4     00 00 00 FF 
383f8     FF BF 05 F7 |             incmod  front, ##511
383fc     EF C1 6D FB |             djnz    qq,#p301
38400                 |             
38400     74 FD 9F FD |             jmp     #loop            'loop
38404                 | 
38404                 | '----------------------------------------------------------------------------------
38404                 | '------------- This is the end of the main loop -----------------------------------
38404                 | '----------------------------------------------------------------------------------
38404                 | 
38404                 | '----------------------------------------------------------------------------------
38404                 | '------------- PSRAM cache ----------- --------------------------------------------
38404                 | '----------------------------------------------------------------------------------
38404                 | 
38404                 | ' There are 8 cache pointers for 8 channels
38404                 | ' if 24 higher bits of address=cache, then get a word from the cache
38404                 | ' else load the cache from PSRAM, update the pointer, then read a sample
38404                 | 
38404                 | 
38404     E0 3A E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
38408                 |             
38408     E0 3C 02 F6 | 	    mov     addrhi,qq		
3840c     08 3C 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
38410     12 FD 95 F9 | 	    alts    cn,#cache1            
38414     00 3C 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
38418     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
3841c                 | 	
3841c     12 FD 8D F9 | p702	    altd    cn,#cache1			' cache miss. 
38420     1E 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
38424     1E 35 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
38428     08 34 66 F0 | 	    shl     cmd,#8
3842c     0B 34 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
38430     FE 36 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
38434     08 36 66 F0 |             shl     hubaddr,#8                  '
38438     11 37 02 F1 |             add     hubaddr,hubptr 
3843c     00 39 06 F6 |             mov     count,#256                  ' 256 bytes
38440     28 04 64 FD |             setq    #2                          ' write 3 longs
38444     E3 34 62 FC |             wrlong  cmd, mailbox                ' run it
38448     E3 34 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
3844c     FE 35 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
38450                 |             
38450                 | 	
38450     FE C0 01 F6 | p701	    mov     qq,cn			' cache hit
38454     08 C0 65 F0 | 	    shl     qq,#8			' compute the cache start
38458     11 C1 01 F1 | 	    add     qq,hubptr
3845c     1D C1 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
38460     E0 C2 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
38464                 |           
38464                 | 
38464                 | '--------------------------------------------------------------------------
38464                 | '------ Interrupt service -------------------------------------------------
38464                 | '------ Output the sample, get the next one if exists ---------------------
38464                 | '--------------------------------------------------------------------------
38464                 | 
38464     0E CA 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
38468     0F CC 25 FC |             wypin   rsample,#right       '4
3846c     DF F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
38470     80 CF A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
38474     FF F3 07 57 |     if_ne   incmod  ptrb,#511
38478     E7 CC 39 59 |     if_ne   getword rsample,lsnext,#1    '13
3847c     E7 CA 31 59 |     if_ne   getword lsample,lsnext,#0    '15
38480                 |     
38480     F5 FF 3B FB |             reti1                        '17/19 
38484                 |           
38484                 | '---------------------------------------------------------------------------
38484                 | '-------- End of interrupt -------------------------------------------------
38484                 | '---------------------------------------------------------------------------    
38484                 | 
38484                 | 
38484                 | '---------------------------------------------------------------------------
38484                 | '------- Variables ---------------------------------------------------------
38484                 | '---------------------------------------------------------------------------
38484                 | 
38484                 | ' constants
38484                 | 
38484     00 00 00 40 | a40000000   long $40000000
38488     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
3848c                 | 
3848c                 | ' Time variables
3848c                 | 
3848c     00 00 00 00 | time0       long 0    ' Global sample computing time
38490     01 00 00 00 | time1       long 1    ' Local channels time
38494     02 00 00 00 | time2       long 2
38498     03 00 00 00 | time3       long 3
3849c     04 00 00 00 | time4       long 4
384a0     05 00 00 00 | time5       long 5
384a4     06 00 00 00 | time6       long 6
384a8     07 00 00 00 | time7       long 7
384ac     08 00 00 00 | time8       long 8
384b0                 | 
384b0     00 00 00 00 | channeladd long 0
384b4                 | 
384b4     00 00 00 00 | front       long 0
384b8                 | 
384b8                 | ' temporary variables 
384b8     00 00 00 00 | qq          long 0
384bc     00 00 00 00 | spl         long 0
384c0     00 00 00 00 | zero        long 0
384c4     00 00 00 00 | mailbox     long 0
384c8     00 00 00 00 | mailbox2 long 0
384cc                 | 
384cc                 | ' Interrupt ISR variables
384cc                 | 
384cc     00 00 00 00 | lsample     long 0
384d0     00 00 00 00 | rsample     long 0
384d4     00 00 00 00 | lsnext      long 0
384d8     00 00 00 00 | rsnext      long 0 
384dc                 | 
384dc                 | ' channel parameter block
384dc                 | 
384dc     00 00 00 00 | pointer0    long 0     
384e0     00 00 00 00 | sample0     long 0
384e4     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
384e8     00 00 00 00 | lstart0     long 0
384ec     00 00 00 00 | lend0       long 0
384f0     00 00 00 00 | volpan0     long 0
384f4     00 00 00 00 | freqskip0   long 0
384f8     00 00 00 00 | command0    long 0
384fc     00 00 00 00 | envph0	    long 0
38500     00 00 00 00 | envptr0	    long 0
38504     00 00 00 00 | envspd0	    long 0
38508     00 00 00 00 | envlen0	    long 0
3850c     00 00 00 00 | res5	    long 0
38510     00 00 00 00 | res6	    long 0
38514     00 00 00 00 | res7	    long 0
38518     00 00 00 00 | res8	    long 0
3851c                 | 
3851c     00 00 00 00 | afreq0      long 0
38520     00 00 00 00 | askip0      long 0
38524     00 00 00 00 | avol0       long 0
38528     00 00 00 00 | apan0       long 0
3852c                 | 
3852c     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
38530     00 00 00 00 | cn          long 0
38534     00 00 00 00 | ct          long 0
38538     00 00 00 00 | dt0         long 0
3853c                 | 
3853c                 | ' Samples
3853c     00 00 00 00 | oldls       long 0
38540     00 00 00 00 | oldrs       long 0
38544                 | 
38544     00 00 00 00 | ls0         long 0
38548     00 00 00 00 | rs0         long 0
3854c                 | 
3854c     00 00 00 00 | ls          long 0    
38550     00 00 00 00 | rs          long 0
38554                 | 
38554     00 00 00 00 | oldsample   long 0
38558     00 00 00 00 | newsample   long 0
3855c                 | 
3855c     00 00 00 00 | nrsample    long 0
38560     00 00 00 00 | nlsample    long 0
38564                 | 
38564     00 00 00 00 | scbase long 0
38568     00 00 00 00 | scptr long 0
3856c     00 00 00 00 | scptr2 long 0
38570     00 00 00 00 | scope long 0
38574                 | 
38574     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
38578     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
3857c                 | 
3857c     00 18 07 00 | hubptr      long $71800
38580     00 00 00 00 | cache1      long 0
38584     00 00 00 00 | cache2      long 0
38588     00 00 00 00 | cache3      long 0
3858c     00 00 00 00 | cache4      long 0
38590     00 00 00 00 | cache5      long 0
38594     00 00 00 00 | cache6      long 0
38598     00 00 00 00 | cache7      long 0
3859c     00 00 00 00 | cache8      long 0
385a0                 | 
385a0                 | 
385a0     00 00 00 00 | cmd         long 0
385a4     00 00 00 00 | hubaddr     long 0
385a8     00 01 00 00 | count       long 256
385ac     00 00 00 00 | addrlo long 0
385b0     00 00 00 00 | addrhi long 0
385b4     00 00 00 00 | pointer00 long 0
385b8     00 00 00 00 | envhi long 0
385bc     00 00 00 00 | envlo long 0
385c0     00 00 00 00 | envs1 long 0
385c4     00 00 00 00 | envs2 long 0
385c8     00 00 00 00 | noise0 long 0
385cc     00 00 00 00 
385d0     00 00 00 00 | null  			long 	0,0           ' for channel reset
385d4                 | 	alignl
385d4                 | __system__dat_
385d4     00 00 00 00 
385d8     00 00 00 00 | 	byte	$00[8]
385dc     03 00 00 00 
385e0     00 00 00 00 
385e4     00 00 00 00 
385e8     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
385ec     00 00 00 00 
      ...             
38878     00 00 00 00 
3887c     00 00 00 00 | 	byte	$00[660]
38880     00 00 A0 08 | 	long	(138 {__system____root_opendir})<<20
38884     00 00 B0 08 | 	long	(139 {__system____root_closedir})<<20
38888     00 00 C0 08 | 	long	(140 {__system____root_readdir})<<20
3888c     00 00 D0 08 | 	long	(141 {__system____root_stat})<<20
38890     00 00 00 00 
38894     00 00 00 00 
38898     00 00 00 00 
3889c     00 00 00 00 
388a0     00 00 00 00 
388a4     00 00 00 00 
388a8     00 00 00 00 | 	byte	$00[28]
388ac     14 89 03 00 | 	long	@@@__system__dat_ + 832
388b0     17 89 03 00 | 	long	@@@__system__dat_ + 835
388b4     38 89 03 00 | 	long	@@@__system__dat_ + 868
388b8     51 89 03 00 | 	long	@@@__system__dat_ + 893
388bc     6C 89 03 00 | 	long	@@@__system__dat_ + 920
388c0     86 89 03 00 | 	long	@@@__system__dat_ + 946
388c4     96 89 03 00 | 	long	@@@__system__dat_ + 962
388c8     A8 89 03 00 | 	long	@@@__system__dat_ + 980
388cc     BA 89 03 00 | 	long	@@@__system__dat_ + 998
388d0     CC 89 03 00 | 	long	@@@__system__dat_ + 1016
388d4     D8 89 03 00 | 	long	@@@__system__dat_ + 1028
388d8     E9 89 03 00 | 	long	@@@__system__dat_ + 1045
388dc     FD 89 03 00 | 	long	@@@__system__dat_ + 1065
388e0     07 8A 03 00 | 	long	@@@__system__dat_ + 1075
388e4     17 8A 03 00 | 	long	@@@__system__dat_ + 1091
388e8     26 8A 03 00 | 	long	@@@__system__dat_ + 1106
388ec     3C 8A 03 00 | 	long	@@@__system__dat_ + 1128
388f0     55 8A 03 00 | 	long	@@@__system__dat_ + 1153
388f4     69 8A 03 00 | 	long	@@@__system__dat_ + 1173
388f8     77 8A 03 00 | 	long	@@@__system__dat_ + 1187
388fc     8B 8A 03 00 | 	long	@@@__system__dat_ + 1207
38900     97 8A 03 00 | 	long	@@@__system__dat_ + 1219
38904     A9 8A 03 00 | 	long	@@@__system__dat_ + 1237
38908     C1 8A 03 00 | 	long	@@@__system__dat_ + 1261
3890c     D3 8A 03 00 | 	long	@@@__system__dat_ + 1279
38910     E6 8A 03 00 | 	long	@@@__system__dat_ + 1298
38914     4F 4B 00 4E 
38918     75 6D 65 72 
3891c     69 63 61 6C 
38920     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
38924     75 6D 65 6E 
38928     74 20 6F 75 
3892c     74 20 6F 66 
38930     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
38934     61 69 6E 00 
38938     52 65 73 75 
3893c     6C 74 20 6E 
38940     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
38944     65 70 72 65 
38948     73 65 6E 74 
3894c     61 62 6C 65 
38950     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
38954     65 67 61 6C 
38958     20 6D 75 6C 
3895c     74 69 62 79 
38960     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
38964     65 71 75 65 
38968     6E 63 65 00 
3896c     4E 6F 20 73 
38970     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
38974     66 69 6C 65 
38978     20 6F 72 20 
3897c     64 69 72 65 
38980     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
38984     79 00 42 61 
38988     64 20 66 69 
3898c     6C 65 20 6E 
38990     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
38994     72 00 50 65 
38998     72 6D 69 73 
3899c     73 69 6F 6E 
389a0     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
389a4     69 65 64 00 
389a8     4E 6F 74 20 
389ac     65 6E 6F 75 
389b0     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
389b4     65 6D 6F 72 
389b8     79 00 54 65 
389bc     6D 70 6F 72 
389c0     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
389c4     66 61 69 6C 
389c8     75 72 65 00 
389cc     46 69 6C 65 
389d0     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
389d4     73 74 73 00 
389d8     49 6E 76 61 
389dc     6C 69 64 20 
389e0     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
389e4     6D 65 6E 74 
389e8     00 54 6F 6F 
389ec     20 6D 61 6E 
389f0     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
389f4     65 6E 20 66 
389f8     69 6C 65 73 
389fc     00 49 2F 4F 
38a00     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
38a04     6F 72 00 4E 
38a08     6F 74 20 61 
38a0c     20 64 69 72 
38a10     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
38a14     72 79 00 49 
38a18     73 20 61 20 
38a1c     64 69 72 65 
38a20     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
38a24     79 00 52 65 
38a28     61 64 20 6F 
38a2c     6E 6C 79 20 
38a30     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
38a34     20 73 79 73 
38a38     74 65 6D 00 
38a3c     46 75 6E 63 
38a40     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
38a44     20 6E 6F 74 
38a48     20 69 6D 70 
38a4c     6C 65 6D 65 
38a50     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
38a54     00 44 69 72 
38a58     65 63 74 6F 
38a5c     72 79 20 6E 
38a60     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
38a64     6D 70 74 79 
38a68     00 4E 61 6D 
38a6c     65 20 74 6F 
38a70     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
38a74     6E 67 00 44 
38a78     65 76 69 63 
38a7c     65 20 6E 6F 
38a80     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
38a84     65 6B 61 62 
38a88     6C 65 00 42 
38a8c     61 64 20 61 
38a90     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
38a94     73 73 00 42 
38a98     72 6F 6B 65 
38a9c     6E 20 63 6F 
38aa0     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
38aa4     74 69 6F 6E 
38aa8     00 44 65 76 
38aac     69 63 65 20 
38ab0     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
38ab4     65 73 6F 75 
38ab8     72 63 65 20 
38abc     62 75 73 79 
38ac0     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
38ac4     73 73 20 64 
38ac8     65 76 69 63 
38acc     65 20 6C 69 
38ad0     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
38ad4     6F 20 73 70 
38ad8     61 63 65 20 
38adc     6F 6E 20 64 
38ae0     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
38ae4     65 00 55 6E 
38ae8     6B 6E 6F 77 
38aec     6E 20 65 72 
38af0     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
38af4     00 00 00 00 
38af8     00 00 00 00 | 	byte	$00[8]
38afc     05 00 00 00 
38b00     00 00 00 00 
38b04     00 00 00 00 
38b08     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38b0c     00 00 00 00 | 	byte	$00, $00, $00, $00
38b10     00 00 20 0A | 	long	(162 {__system___tx})<<20
38b14     00 00 30 0A | 	long	(163 {__system___rx})<<20
38b18     00 00 00 00 | 	byte	$00, $00, $00, $00
38b1c     00 00 40 0A | 	long	(164 {__system___rxtxioctl_0640})<<20
38b20     00 00 50 0A | 	long	(165 {__system____dummy_flush_0641})<<20
38b24     00 00 00 00 
38b28     00 00 00 00 | 	byte	$00[8]
38b2c     01 00 00 00 
38b30     06 00 00 00 
38b34     00 00 00 00 
38b38     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38b3c     00 00 00 00 
38b40     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
38b44     00 00 20 0A | 	long	(162 {__system___tx})<<20
38b48     00 00 30 0A | 	long	(163 {__system___rx})<<20
38b4c     00 00 00 00 | 	byte	$00, $00, $00, $00
38b50     00 00 40 0A | 	long	(164 {__system___rxtxioctl_0640})<<20
38b54     00 00 50 0A | 	long	(165 {__system____dummy_flush_0641})<<20
38b58     00 00 00 00 
38b5c     00 00 00 00 | 	byte	$00[8]
38b60     01 00 00 00 
38b64     06 00 00 00 
38b68     00 00 00 00 
38b6c     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38b70     00 00 00 00 
38b74     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
38b78     00 00 20 0A | 	long	(162 {__system___tx})<<20
38b7c     00 00 30 0A | 	long	(163 {__system___rx})<<20
38b80     00 00 00 00 | 	byte	$00, $00, $00, $00
38b84     00 00 40 0A | 	long	(164 {__system___rxtxioctl_0640})<<20
38b88     00 00 50 0A | 	long	(165 {__system____dummy_flush_0641})<<20
38b8c     00 00 00 00 
      ...             
38cfc     00 00 00 00 
38d00     00 00 00 00 | 	byte	$00[376]
38d04     08 8D 03 00 | 	long	@@@__system__dat_ + 1844
38d08     00 00 00 00 
38d0c     00 00 00 00 
38d10     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38d14                 | 	alignl
38d14                 | _fatfs_cc_dat_
38d14     C7 00 FC 00 
38d18     E9 00 E2 00 
38d1c     E4 00 E0 00 
38d20     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
38d24     EA 00 EB 00 
38d28     E8 00 EF 00 
38d2c     EE 00 EC 00 
38d30     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
38d34     C9 00 E6 00 
38d38     C6 00 F4 00 
38d3c     F6 00 F2 00 
38d40     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
38d44     FF 00 D6 00 
38d48     DC 00 F8 00 
38d4c     A3 00 D8 00 
38d50     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
38d54     E1 00 ED 00 
38d58     F3 00 FA 00 
38d5c     F1 00 D1 00 
38d60     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
38d64     BF 00 AE 00 
38d68     AC 00 BD 00 
38d6c     BC 00 A1 00 
38d70     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
38d74     91 25 92 25 
38d78     93 25 02 25 
38d7c     24 25 C1 00 
38d80     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
38d84     A9 00 63 25 
38d88     51 25 57 25 
38d8c     5D 25 A2 00 
38d90     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
38d94     14 25 34 25 
38d98     2C 25 1C 25 
38d9c     00 25 3C 25 
38da0     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
38da4     5A 25 54 25 
38da8     69 25 66 25 
38dac     60 25 50 25 
38db0     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
38db4     F0 00 D0 00 
38db8     CA 00 CB 00 
38dbc     C8 00 31 01 
38dc0     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
38dc4     CF 00 18 25 
38dc8     0C 25 88 25 
38dcc     84 25 A6 00 
38dd0     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
38dd4     D3 00 DF 00 
38dd8     D4 00 D2 00 
38ddc     F5 00 D5 00 
38de0     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
38de4     DE 00 DA 00 
38de8     DB 00 D9 00 
38dec     FD 00 DD 00 
38df0     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
38df4     AD 00 B1 00 
38df8     17 20 BE 00 
38dfc     B6 00 A7 00 
38e00     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
38e04     B0 00 A8 00 
38e08     B7 00 B9 00 
38e0c     B3 00 B2 00 
38e10     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
38e14     61 00 1A 03 
38e18     E0 00 17 03 
38e1c     F8 00 07 03 
38e20     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
38e24     78 01 00 01 
38e28     30 01 32 01 
38e2c     06 01 39 01 
38e30     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
38e34     2E 01 79 01 
38e38     06 01 80 01 
38e3c     4D 00 43 02 
38e40     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
38e44     82 01 84 01 
38e48     84 01 86 01 
38e4c     87 01 87 01 
38e50     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
38e54     8B 01 8B 01 
38e58     8D 01 8E 01 
38e5c     8F 01 90 01 
38e60     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
38e64     93 01 94 01 
38e68     F6 01 96 01 
38e6c     97 01 98 01 
38e70     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
38e74     9B 01 9C 01 
38e78     9D 01 20 02 
38e7c     9F 01 A0 01 
38e80     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
38e84     A2 01 A4 01 
38e88     A4 01 A6 01 
38e8c     A7 01 A7 01 
38e90     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
38e94     AB 01 AC 01 
38e98     AC 01 AE 01 
38e9c     AF 01 AF 01 
38ea0     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
38ea4     B3 01 B3 01 
38ea8     B5 01 B5 01 
38eac     B7 01 B8 01 
38eb0     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
38eb4     BB 01 BC 01 
38eb8     BC 01 BE 01 
38ebc     F7 01 C0 01 
38ec0     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
38ec4     C3 01 C4 01 
38ec8     C5 01 C4 01 
38ecc     C7 01 C8 01 
38ed0     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
38ed4     CB 01 CA 01 
38ed8     CD 01 10 01 
38edc     DD 01 01 00 
38ee0     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
38ee4     12 01 F3 01 
38ee8     03 00 F1 01 
38eec     F4 01 F4 01 
38ef0     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
38ef4     22 02 12 01 
38ef8     3A 02 09 00 
38efc     65 2C 3B 02 
38f00     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
38f04     66 2C 3F 02 
38f08     40 02 41 02 
38f0c     41 02 46 02 
38f10     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
38f14     40 00 81 01 
38f18     86 01 55 02 
38f1c     89 01 8A 01 
38f20     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
38f24     5A 02 90 01 
38f28     5C 02 5D 02 
38f2c     5E 02 5F 02 
38f30     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
38f34     62 02 94 01 
38f38     64 02 65 02 
38f3c     66 02 67 02 
38f40     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
38f44     6A 02 62 2C 
38f48     6C 02 6D 02 
38f4c     6E 02 9C 01 
38f50     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
38f54     9D 01 73 02 
38f58     74 02 9F 01 
38f5c     76 02 77 02 
38f60     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
38f64     7A 02 7B 02 
38f68     7C 02 64 2C 
38f6c     7E 02 7F 02 
38f70     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
38f74     82 02 A9 01 
38f78     84 02 85 02 
38f7c     86 02 87 02 
38f80     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
38f84     B1 01 B2 01 
38f88     45 02 8D 02 
38f8c     8E 02 8F 02 
38f90     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
38f94     B7 01 7B 03 
38f98     03 00 FD 03 
38f9c     FE 03 FF 03 
38fa0     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
38fa4     86 03 88 03 
38fa8     89 03 8A 03 
38fac     B1 03 11 03 
38fb0     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
38fb4     A3 03 A3 03 
38fb8     C4 03 08 03 
38fbc     CC 03 03 00 
38fc0     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
38fc4     8F 03 D8 03 
38fc8     18 01 F2 03 
38fcc     0A 00 F9 03 
38fd0     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
38fd4     F5 03 F6 03 
38fd8     F7 03 F7 03 
38fdc     F9 03 FA 03 
38fe0     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
38fe4     20 03 50 04 
38fe8     10 07 60 04 
38fec     22 01 8A 04 
38ff0     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
38ff4     0E 01 CF 04 
38ff8     01 00 C0 04 
38ffc     D0 04 44 01 
39000     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
39004     00 00 7D 1D 
39008     01 00 63 2C 
3900c     00 1E 96 01 
39010     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
39014     00 1F 08 06 
39018     10 1F 06 06 
3901c     20 1F 08 06 
39020     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
39024     40 1F 06 06 
39028     51 1F 07 00 
3902c     59 1F 52 1F 
39030     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
39034     5D 1F 56 1F 
39038     5F 1F 60 1F 
3903c     08 06 70 1F 
39040     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
39044     BB 1F C8 1F 
39048     C9 1F CA 1F 
3904c     CB 1F DA 1F 
39050     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
39054     F9 1F EA 1F 
39058     EB 1F FA 1F 
3905c     FB 1F 80 1F 
39060     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
39064     08 06 A0 1F 
39068     08 06 B0 1F 
3906c     04 00 B8 1F 
39070     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
39074     BC 1F CC 1F 
39078     01 00 C3 1F 
3907c     D0 1F 02 06 
39080     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
39084     E5 1F 01 00 
39088     EC 1F F3 1F 
3908c     01 00 FC 1F 
39090     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
39094     32 21 70 21 
39098     10 02 84 21 
3909c     01 00 83 21 
390a0     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
390a4     30 2C 2F 04 
390a8     60 2C 02 01 
390ac     67 2C 06 01 
390b0     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
390b4     80 2C 64 01 
390b8     00 2D 26 08 
390bc     41 FF 1A 03 
390c0     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
390c4     05 07 09 0E 
390c8     10 12 14 16 
390cc     18 1C 1E 43 
390d0     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
390d4     41 41 43 45 
390d8     45 45 49 49 
390dc     49 41 41 45 
390e0     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
390e4     4F 55 55 59 
390e8     4F 55 4F 9C 
390ec     4F 9E 9F 41 
390f0     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
390f4     A5 A6 A7 A8 
390f8     A9 AA AB AC 
390fc     AD AE AF B0 
39100     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
39104     41 41 41 B8 
39108     B9 BA BB BC 
3910c     BD BE BF C0 
39110     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
39114     C5 41 41 C8 
39118     C9 CA CB CC 
3911c     CD CE CF D1 
39120     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
39124     49 49 49 49 
39128     D9 DA DB DC 
3912c     DD 49 DF 4F 
39130     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
39134     4F E6 E8 E8 
39138     55 55 55 59 
3913c     59 EE EF F0 
39140     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
39144     F5 F6 F7 F8 
39148     F9 FA FB FC 
3914c     FD FE FF 00 
39150     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
39154     00 00 00 00 | 	byte	$00, $00, $00, $00
39158     00 00 10 09 | 	long	(145 {_fatfs_cc_v_close})<<20
3915c     00 00 20 09 | 	long	(146 {_fatfs_cc_v_read})<<20
39160     00 00 30 09 | 	long	(147 {_fatfs_cc_v_write})<<20
39164     00 00 40 09 | 	long	(148 {_fatfs_cc_v_lseek})<<20
39168     00 00 50 09 | 	long	(149 {_fatfs_cc_v_ioctl})<<20
3916c     00 00 60 0A | 	long	(166 {_fatfs_cc_v_flush})<<20
39170     00 00 00 00 
39174     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
39178     00 00 60 09 | 	long	(150 {_fatfs_cc_v_open})<<20
3917c     00 00 70 09 | 	long	(151 {_fatfs_cc_v_creat})<<20
39180     00 00 80 09 | 	long	(152 {_fatfs_cc_v_opendir})<<20
39184     00 00 90 09 | 	long	(153 {_fatfs_cc_v_closedir})<<20
39188     00 00 A0 09 | 	long	(154 {_fatfs_cc_v_readdir})<<20
3918c     00 00 B0 09 | 	long	(155 {_fatfs_cc_v_stat})<<20
39190     00 00 C0 09 | 	long	(156 {_fatfs_cc_v_mkdir})<<20
39194     00 00 D0 09 | 	long	(157 {_fatfs_cc_v_rmdir})<<20
39198     00 00 E0 09 | 	long	(158 {_fatfs_cc_v_remove})<<20
3919c     00 00 F0 09 | 	long	(159 {_fatfs_cc_v_rename})<<20
391a0     00 00 00 0A | 	long	(160 {_fatfs_cc_v_init})<<20
391a4     00 00 10 0A | 	long	(161 {_fatfs_cc_v_deinit})<<20
391a8     FF FF FF FF 
391ac     1F 00 00 00 
391b0     1C 00 00 00 
391b4     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
391b8     1E 00 00 00 
391bc     1F 00 00 00 
391c0     1E 00 00 00 
391c4     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
391c8     1F 00 00 00 
391cc     1E 00 00 00 
391d0     1F 00 00 00 
391d4     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
391d8     1F 00 00 00 
391dc     00 00 00 00 
391e0     1F 00 00 00 
391e4     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
391e8     5A 00 00 00 
391ec     78 00 00 00 
391f0     97 00 00 00 
391f4     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
391f8     D4 00 00 00 
391fc     F3 00 00 00 
39200     11 01 00 00 
39204     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
39208     4E 01 00 00 
3920c     6D 01 00 00 
39210     FF FF FF FF 
39214     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
39218     00 00 00 00 
      ...             
39230     00 00 00 00 
39234     00 00 00 00 | 	byte	$00[32]
39238     56 92 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
3923c     5A 92 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
39240     00 00 00 00 
39244     00 00 00 00 
39248     00 00 00 00 
3924c     00 00 00 00 
39250     00 00       | 	byte	$00[18]
39252     3F 3F 3F 00 
39256     55 43 54 00 
3925a     55 43 54 00 
3925e     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
39262     00 00 00 00 
39266     00 00 00    | 	byte	$00[7]
39269     CA 9A 3B 00 
3926d     00 00 00 01 
39271     01 01 01 01 
39275     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
39279     91 11 11 11 
3927d     11 01 01 01 
39281     01 01 01 01 
39285     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
39289     01 01 01 01 
3928d     01 01 01    | 	byte	$01[7]
39290     90 20 20 20 
39294     20 20 20 20 
39298     20 20 20 20 
3929c     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
392a0     42 42 42 42 
392a4     42 42 42 42 
392a8     42 42       | 	byte	$42[10]
392aa     20 20 20 20 
392ae     20 20 20    | 	byte	$20[7]
392b1     44 44 44 44 
392b5     44 44       | 	byte	$44[6]
392b7     04 04 04 04 
392bb     04 04 04 04 
392bf     04 04 04 04 
392c3     04 04 04 04 
392c7     04 04 04 04 | 	byte	$04[20]
392cb     20 20 20 20 
392cf     20 20       | 	byte	$20[6]
392d1     48 48 48 48 
392d5     48 48       | 	byte	$48[6]
392d7     08 08 08 08 
392db     08 08 08 08 
392df     08 08 08 08 
392e3     08 08 08 08 
392e7     08 08 08 08 | 	byte	$08[20]
392eb     20 20 20 20 
392ef     01 00 00 00 
392f3     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
392f4                 | __methodtable__
392f4     B0 88 01 00 | 	long	@_do_no_command
392f8     80 FF 00 00 | 	long	@_do_plus
392fc     6C 04 01 00 | 	long	@_do_minus
39300     34 09 01 00 | 	long	@_do_or
39304     4C 0A 01 00 | 	long	@_do_mul
39308     D8 0F 01 00 | 	long	@_do_fdiv
3930c     1C 08 01 00 | 	long	@_do_and
39310     B8 0D 01 00 | 	long	@_do_div
39314     A0 11 01 00 | 	long	@_do_mod
39318     C0 13 01 00 | 	long	@_do_shl
3931c     D8 14 01 00 | 	long	@_do_shr
39320     F0 15 01 00 | 	long	@_do_power
39324     00 F3 00 00 | 	long	@_do_getvar
39328     D8 A9 00 00 | 	long	@_do_push
3932c     00 ED 00 00 | 	long	@_do_assign
39330     14 5A 01 00 | 	long	@_do_cls
39334     5C E5 00 00 | 	long	@_do_new
39338     B8 5A 01 00 | 	long	@_do_plot
3933c     88 5B 01 00 | 	long	@_do_draw
39340     FC 64 01 00 | 	long	@_do_print
39344     F4 5D 01 00 | 	long	@_do_circle
39348     7C 5C 01 00 | 	long	@_do_fcircle
3934c     6C 5F 01 00 | 	long	@_do_box
39350     14 63 01 00 | 	long	@_do_frame
39354     80 5A 01 00 | 	long	@_do_color
39358     A8 85 00 00 | 	long	@_do_for
3935c     00 89 00 00 | 	long	@_do_next
39360     C0 E2 00 00 | 	long	@_do_list
39364     64 BD 00 00 | 	long	@_do_run
39368     BC EB 00 00 | 	long	@_do_error
3936c     2C E7 00 00 | 	long	@_do_fast_goto
39370     1C E8 00 00 | 	long	@_do_find_goto
39374     2C EA 00 00 | 	long	@_do_slow_goto
39378     CC 84 01 00 | 	long	@_do_nothing
3937c     1C B0 00 00 | 	long	@_test_csave
39380     80 B3 00 00 | 	long	@_do_save
39384     7C B7 00 00 | 	long	@_do_load
39388     A8 73 01 00 | 	long	@_do_pinwrite
3938c     44 7E 01 00 | 	long	@_do_waitms
39390     80 7F 01 00 | 	long	@_do_waitvbl
39394     20 83 01 00 | 	long	@_do_if
39398     04 84 01 00 | 	long	@_do_else
3939c     B8 17 01 00 | 	long	@_do_eq
393a0     30 26 01 00 | 	long	@_do_ge
393a4     08 2B 01 00 | 	long	@_do_le
393a8     90 1C 01 00 | 	long	@_do_gt
393ac     68 21 01 00 | 	long	@_do_lt
393b0     E0 2F 01 00 | 	long	@_do_ne
393b4     08 36 01 00 | 	long	@_do_rnd
393b8     D0 84 01 00 | 	long	@_do_brun
393bc     9C 87 01 00 | 	long	@_do_beep
393c0     B0 7F 01 00 | 	long	@_do_dir
393c4     C4 69 01 00 | 	long	@_do_paper
393c8     4C 6A 01 00 | 	long	@_do_ink
393cc     E8 6A 01 00 | 	long	@_do_font
393d0     64 6B 01 00 | 	long	@_do_mode
393d4     08 87 01 00 | 	long	@_do_mouse
393d8     AC 59 01 00 | 	long	@_do_gettime
393dc     3C 87 01 00 | 	long	@_do_cursor
393e0     70 87 01 00 | 	long	@_do_click
393e4     38 57 01 00 | 	long	@_do_mousex
393e8     7C 57 01 00 | 	long	@_do_mousey
393ec     04 58 01 00 | 	long	@_do_mousek
393f0     C0 57 01 00 | 	long	@_do_mousew
393f4     DC 38 01 00 | 	long	@_do_sin
393f8     80 4E 01 00 | 	long	@_do_stick
393fc     04 50 01 00 | 	long	@_do_strig
39400     4C 56 01 00 | 	long	@_do_sprite
39404     D8 52 01 00 | 	long	@_do_defsprite
39408     88 51 01 00 | 	long	@_do_getpixel
3940c     8C 7F 01 00 | 	long	@_do_waitclock
39410     BC 88 01 00 | 	long	@_do_negative
39414     48 58 01 00 | 	long	@_do_rdpin
39418     B4 58 01 00 | 	long	@_do_rqpin
3941c     28 59 01 00 | 	long	@_do_pinread
39420     40 76 01 00 | 	long	@_do_wrpin
39424     C0 76 01 00 | 	long	@_do_wxpin
39428     40 77 01 00 | 	long	@_do_wypin
3942c     30 74 01 00 | 	long	@_do_pinfloat
39430     70 74 01 00 | 	long	@_do_pinlo
39434     B0 74 01 00 | 	long	@_do_pinhi
39438     30 75 01 00 | 	long	@_do_pinstart
3943c     F0 74 01 00 | 	long	@_do_pintoggle
39440     C0 77 01 00 | 	long	@_do_position
39444     38 48 01 00 | 	long	@_do_cos
39448     58 49 01 00 | 	long	@_do_tan
3944c     7C 4C 01 00 | 	long	@_do_atn
39450     64 4A 01 00 | 	long	@_do_asin
39454     70 4B 01 00 | 	long	@_do_acos
39458     90 4D 01 00 | 	long	@_do_sqr
3945c     54 61 01 00 | 	long	@_do_fill
39460     C8 D8 00 00 | 	long	@_do_defsnd
39464     B0 C0 00 00 | 	long	@_do_defenv
39468     28 84 01 00 | 	long	@_do_rad
3946c     50 84 01 00 | 	long	@_do_deg
39470     78 84 01 00 | 	long	@_do_int
39474     58 CD 00 00 | 	long	@_do_play
39478     08 71 01 00 | 	long	@_do_setdelay
3947c     60 70 01 00 | 	long	@_do_setenv
39480     B0 71 01 00 | 	long	@_do_setlen
39484     00 73 01 00 | 	long	@_do_setpan
39488     58 72 01 00 | 	long	@_do_setvol
3948c     10 6F 01 00 | 	long	@_do_setwave
39490     B8 6F 01 00 | 	long	@_do_setsustain
39494     30 D8 00 00 | 	long	@_do_release
39498     D0 37 01 00 | 	long	@_do_getenvsustain
3949c     48 78 01 00 | 	long	@_do_poke
394a0     20 79 01 00 | 	long	@_do_dpoke
394a4     F8 79 01 00 | 	long	@_do_lpoke
394a8     D0 7A 01 00 | 	long	@_do_peek
394ac     80 7B 01 00 | 	long	@_do_dpeek
394b0     2C 7C 01 00 | 	long	@_do_lpeek
394b4     3C 7D 01 00 | 	long	@_do_adr
394b8     D8 7C 01 00 | 	long	@_do_fre
394bc     40 7D 01 00 | 	long	@_do_getnotevalue
394c0     B8 F8 00 00 | 	long	@_do_getaddr
394c4     A8 FC 00 00 | 	long	@_do_inkey
394c8     6C 89 01 00 | 	long	@_do_abs
394cc     78 45 01 00 | 	long	@_do_hex
394d0     D8 46 01 00 | 	long	@_do_bin
394d4     74 42 01 00 | 	long	@_do_val
394d8     78 41 01 00 | 	long	@_do_chr
394dc     B4 3E 01 00 | 	long	@_do_asc
394e0     30 3D 01 00 | 	long	@_do_left
394e4     AC 3B 01 00 | 	long	@_do_right
394e8     E8 39 01 00 | 	long	@_do_mid
394ec     0C 40 01 00 | 	long	@_do_len
394f0     90 84 00 00 | 	long	@_do_gosub
394f4     1C 88 00 00 | 	long	@_do_return
394f8     30 BD 00 00 | 	long	@_do_end
394fc     C8 88 00 00 | 	long	@_do_pop
39500     60 D5 01 00 | 	long	@_hg010b_spin2_putchar
39504     F8 DF 02 00 | 	long	@__struct___bas_wrap_sender_tx
39508     3C E0 02 00 | 	long	@__struct___bas_wrap_sender_rx
3950c     84 E0 02 00 | 	long	@__struct___bas_wrap_sender_close
39510     28 DF 02 00 | 	long	@__struct__s_vfs_file_t_putchar
39514     98 DF 02 00 | 	long	@__struct__s_vfs_file_t_getchar
39518     E0 DE 02 00 | 	long	@___strs_cl_pfunc
3951c     3C 3E 02 00 | 	long	@__system____root_opendir
39520     D8 3E 02 00 | 	long	@__system____root_closedir
39524     54 3E 02 00 | 	long	@__system____root_readdir
39528     E0 3E 02 00 | 	long	@__system____root_stat
3952c     68 37 02 00 | 	long	@__system____default_putc
39530     EC 36 02 00 | 	long	@__system____default_getc
39534     10 38 02 00 | 	long	@__system____default_flush
39538     E4 C9 02 00 | 	long	@_fatfs_cc_v_close
3953c     00 CE 02 00 | 	long	@_fatfs_cc_v_read
39540     14 CF 02 00 | 	long	@_fatfs_cc_v_write
39544     F4 CF 02 00 | 	long	@_fatfs_cc_v_lseek
39548     7C D0 02 00 | 	long	@_fatfs_cc_v_ioctl
3954c     D0 D0 02 00 | 	long	@_fatfs_cc_v_open
39550     48 C9 02 00 | 	long	@_fatfs_cc_v_creat
39554     28 CA 02 00 | 	long	@_fatfs_cc_v_opendir
39558     9C CA 02 00 | 	long	@_fatfs_cc_v_closedir
3955c     DC CA 02 00 | 	long	@_fatfs_cc_v_readdir
39560     10 CC 02 00 | 	long	@_fatfs_cc_v_stat
39564     90 D0 02 00 | 	long	@_fatfs_cc_v_mkdir
39568     B0 D0 02 00 | 	long	@_fatfs_cc_v_rmdir
3956c     A0 D0 02 00 | 	long	@_fatfs_cc_v_remove
39570     C0 D0 02 00 | 	long	@_fatfs_cc_v_rename
39574     E0 D1 02 00 | 	long	@_fatfs_cc_v_init
39578     E8 D1 02 00 | 	long	@_fatfs_cc_v_deinit
3957c     10 EC 01 00 | 	long	@__system___tx
39580     50 EC 01 00 | 	long	@__system___rx
39584     4C 4A 02 00 | 	long	@__system___rxtxioctl_0640
39588     A4 4A 02 00 | 	long	@__system____dummy_flush_0641
3958c     B0 D1 02 00 | 	long	@_fatfs_cc_v_flush
39590                 | __heap_base
39590     00 00 00 00 
      ...             
68390     00 00 00 00 
68394     00 00 00 00 | 	long	0[48002]
68398                 | objmem
68398     00 00 00 00 
      ...             
777cc     00 00 00 00 
777d0     00 00 00 00 | 	long	0[15631]
777d4                 | stackspace
777d4     00 00 00 00 | 	long	0[1]
777d8 100             | 	org	COG_BSS_START
777d8 100             | _var01
777d8 100             | 	res	1
777d8 101             | _var02
777d8 101             | 	res	1
777d8 102             | _var03
777d8 102             | 	res	1
777d8 103             | _var04
777d8 103             | 	res	1
777d8 104             | _var05
777d8 104             | 	res	1
777d8 105             | _var06
777d8 105             | 	res	1
777d8 106             | _var07
777d8 106             | 	res	1
777d8 107             | _var08
777d8 107             | 	res	1
777d8 108             | _var09
777d8 108             | 	res	1
777d8 109             | arg01
777d8 109             | 	res	1
777d8 10a             | arg02
777d8 10a             | 	res	1
777d8 10b             | arg03
777d8 10b             | 	res	1
777d8 10c             | arg04
777d8 10c             | 	res	1
777d8 10d             | arg05
777d8 10d             | 	res	1
777d8 10e             | arg06
777d8 10e             | 	res	1
777d8 10f             | local01
777d8 10f             | 	res	1
777d8 110             | local02
777d8 110             | 	res	1
777d8 111             | local03
777d8 111             | 	res	1
777d8 112             | local04
777d8 112             | 	res	1
777d8 113             | local05
777d8 113             | 	res	1
777d8 114             | local06
777d8 114             | 	res	1
777d8 115             | local07
777d8 115             | 	res	1
777d8 116             | local08
777d8 116             | 	res	1
777d8 117             | local09
777d8 117             | 	res	1
777d8 118             | local10
777d8 118             | 	res	1
777d8 119             | local11
777d8 119             | 	res	1
777d8 11a             | local12
777d8 11a             | 	res	1
777d8 11b             | local13
777d8 11b             | 	res	1
777d8 11c             | local14
777d8 11c             | 	res	1
777d8 11d             | local15
777d8 11d             | 	res	1
777d8 11e             | local16
777d8 11e             | 	res	1
777d8 11f             | local17
777d8 11f             | 	res	1
777d8 120             | local18
777d8 120             | 	res	1
777d8 121             | local19
777d8 121             | 	res	1
777d8 122             | local20
777d8 122             | 	res	1
777d8 123             | local21
777d8 123             | 	res	1
777d8 124             | local22
777d8 124             | 	res	1
777d8 125             | local23
777d8 125             | 	res	1
777d8 126             | local24
777d8 126             | 	res	1
777d8 127             | local25
777d8 127             | 	res	1
777d8 128             | local26
777d8 128             | 	res	1
777d8 129             | local27
777d8 129             | 	res	1
777d8 12a             | local28
777d8 12a             | 	res	1
777d8 12b             | local29
777d8 12b             | 	res	1
777d8 12c             | local30
777d8 12c             | 	res	1
777d8 12d             | local31
777d8 12d             | 	res	1
777d8 12e             | local32
777d8 12e             | 	res	1
777d8 12f             | local33
777d8 12f             | 	res	1
777d8 130             | local34
777d8 130             | 	res	1
777d8 131             | local35
777d8 131             | 	res	1
777d8 132             | muldiva_
777d8 132             | 	res	1
777d8 133             | muldivb_
777d8 133             | 	res	1
777d8 134             | 	fit	480
777d8 134             | 
