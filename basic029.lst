00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic029.p2asm"
00000                 | con
00000                 | 	_clkfreq = 340500000
00000                 | 	_clkmode = 27175163
00000                 | 	HEAPSIZE = 192000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 29
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 340500000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $19ea8fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 54 CF 80 FF 
00420 007 00 F0 65 FD | 	hubset	##27175160
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 54 CF 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##27175163
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e CF 25 8A FF 
00440 00f 14 40 6C FC | 	wrlong	##340500000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 3C B7 A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 33 67 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 32 65 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 33 65 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 66 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 64 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 32 65 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 33 67 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 2C A3 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 78 A0 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 34 91 06 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 58 93 03 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 B0 8E 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 B0 FB 02 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 98 9A 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 24 2D 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 04 08 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 D4 54 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa 8C 52 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 64 64 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc A0 45 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' 
00804                 | ' 
00804                 | ' '----------------------------------- this is the end of the main loop ------------------------------------------------------------------
00804                 | ' 
00804                 | ' sub housekeeper
00804                 | _housekeeper
00804                 | ' 
00804                 | ' do
00804                 | LR__0001
00804                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
00804     49 E4 05 F1 | 	add	objptr, #73
00808                 | LR__0002
00808     F2 12 02 FB | 	rdlong	arg01, objptr
0080c     01 12 0E F2 | 	cmp	arg01, #1 wz
00810     F4 FF 9F 5D |  if_ne	jmp	#LR__0002
00814     59 00 00 FF 
00818     6B E5 05 F1 | 	add	objptr, ##45931
0081c     F2 12 02 FB | 	rdlong	arg01, objptr
00820     01 12 06 F1 | 	add	arg01, #1
00824     F2 12 62 FC | 	wrlong	arg01, objptr
00828     59 00 00 FF 
0082c     B4 E5 85 F1 | 	sub	objptr, ##46004
00830     80 00 B0 FD | 	call	#_gethdi
00834     05 12 06 F6 | 	mov	arg01, #5
00838     B4 F2 B1 FD | 	call	#__system___waitms
0083c     59 00 00 FF 
00840     B4 E5 05 F1 | 	add	objptr, ##46004
00844     F2 12 02 FB | 	rdlong	arg01, objptr
00848     01 12 06 F1 | 	add	arg01, #1
0084c     F2 12 62 FC | 	wrlong	arg01, objptr
00850     59 00 00 FF 
00854     B4 E5 85 F1 | 	sub	objptr, ##46004
00858     58 00 B0 FD | 	call	#_gethdi
0085c     05 12 06 F6 | 	mov	arg01, #5
00860     8C F2 B1 FD | 	call	#__system___waitms
00864     59 00 00 FF 
00868     B4 E5 05 F1 | 	add	objptr, ##46004
0086c     F2 12 02 FB | 	rdlong	arg01, objptr
00870     01 12 06 F1 | 	add	arg01, #1
00874     F2 12 62 FC | 	wrlong	arg01, objptr
00878     59 00 00 FF 
0087c     B4 E5 85 F1 | 	sub	objptr, ##46004
00880     30 00 B0 FD | 	call	#_gethdi
00884     05 12 06 F6 | 	mov	arg01, #5
00888     64 F2 B1 FD | 	call	#__system___waitms
0088c     59 00 00 FF 
00890     B4 E5 05 F1 | 	add	objptr, ##46004
00894     F2 12 02 FB | 	rdlong	arg01, objptr
00898     01 12 06 F1 | 	add	arg01, #1
0089c     F2 12 62 FC | 	wrlong	arg01, objptr
008a0     59 00 00 FF 
008a4     B4 E5 85 F1 | 	sub	objptr, ##46004
008a8     08 00 B0 FD | 	call	#_gethdi
008ac     54 FF 9F FD | 	jmp	#LR__0001
008b0                 | _housekeeper_ret
008b0     2D 00 64 FD | 	ret
008b4                 | 
008b4                 | ' 
008b4                 | ' 
008b4                 | ' sub gethdi
008b4                 | _gethdi
008b4     03 4A 05 F6 | 	mov	COUNT_, #3
008b8     A8 00 A0 FD | 	call	#pushregs_
008bc                 | '   x := mouse_xacc
008bc     14 00 00 FF 
008c0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
008c4     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
008c8                 | '   y := mouse_yacc
008c8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008cc     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
008d0     59 00 00 FF 
008d4     2C E5 05 F1 | 	add	objptr, ##45868
008d8     F2 14 62 FC | 	wrlong	arg02, objptr
008dc     04 E4 05 F1 | 	add	objptr, #4
008e0     F2 12 62 FC | 	wrlong	arg01, objptr
008e4                 | '   x := 0
008e4                 | '   y := mouse_zacc
008e4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008e8     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
008ec     08 E4 05 F1 | 	add	objptr, #8
008f0     F2 FA 61 FC | 	wrlong	result1, objptr
008f4                 | '   return mouse_bstate&7
008f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008f8     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
008fc     14 00 00 FF 
00900     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
00904     07 FA 05 F5 | 	and	result1, #7
00908     04 E4 85 F1 | 	sub	objptr, #4
0090c     F2 FA 61 FC | 	wrlong	result1, objptr
00910     59 00 00 FF 
00914     34 E5 85 F1 | 	sub	objptr, ##45876
00918     00 1E 06 F6 | 	mov	local01, #0
0091c                 | ' 
0091c                 | '   mousex,mousey=kbm.mouse_xy()
0091c                 | '   dummy,mousew=kbm.mouse_scroll()
0091c                 | '   mousek=kbm.mouse_buttons()
0091c                 | '   
0091c                 | '   i=0:
0091c                 | '   for j=0 to 6
0091c     00 20 06 F6 | 	mov	local02, #0
00920                 | LR__0010
00920                 | '     if kbm.hidpad_id(j)>0 then
00920     10 13 02 F6 | 	mov	arg01, local02
00924     BC E7 B1 FD | 	call	#_usbnew_spin2_hidpad_id
00928     01 FA 55 F2 | 	cmps	result1, #1 wc
0092c     8C 00 90 CD |  if_b	jmp	#LR__0011
00930     10 13 02 F6 | 	mov	arg01, local02
00934     00 14 06 F6 | 	mov	arg02, #0
00938     0C E8 B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0093c     FD 22 02 F6 | 	mov	local03, result1
00940     10 13 02 F6 | 	mov	arg01, local02
00944     01 14 06 F6 | 	mov	arg02, #1
00948     FC E7 B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0094c     60 00 00 FF 
00950     00 22 06 F1 | 	add	local03, ##49152
00954     0F 22 46 F0 | 	shr	local03, #15
00958     01 14 06 F6 | 	mov	arg02, #1
0095c     11 15 02 F1 | 	add	arg02, local03
00960     60 00 00 FF 
00964     00 FA 05 F1 | 	add	result1, ##49152
00968     0F FA 45 F0 | 	shr	result1, #15
0096c     01 12 06 F6 | 	mov	arg01, #1
00970     FD 12 02 F1 | 	add	arg01, result1
00974     0F 23 02 F6 | 	mov	local03, local01
00978     02 22 66 F0 | 	shl	local03, #2
0097c     59 00 00 FF 
00980     3C E5 05 F1 | 	add	objptr, ##45884
00984     F2 22 02 F1 | 	add	local03, objptr
00988     02 12 66 F0 | 	shl	arg01, #2
0098c     09 15 02 F1 | 	add	arg02, arg01
00990     11 15 62 FC | 	wrlong	arg02, local03
00994     0F 23 02 F6 | 	mov	local03, local01
00998     02 22 66 F0 | 	shl	local03, #2
0099c     1C E4 05 F1 | 	add	objptr, #28
009a0     F2 22 02 F1 | 	add	local03, objptr
009a4     10 13 02 F6 | 	mov	arg01, local02
009a8     59 00 00 FF 
009ac     58 E5 85 F1 | 	sub	objptr, ##45912
009b0     60 E7 B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
009b4     11 FB 61 FC | 	wrlong	result1, local03
009b8     01 1E 06 F1 | 	add	local01, #1
009bc                 | LR__0011
009bc     01 20 06 F1 | 	add	local02, #1
009c0     07 20 16 F2 | 	cmp	local02, #7 wc
009c4     58 FF 9F CD |  if_b	jmp	#LR__0010
009c8     97 22 48 FB | 	callpa	#(@LR__0013-@LR__0012)>>2,fcache_load_ptr_
009cc                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
009cc                 | LR__0012
009cc     07 1E 16 F2 | 	cmp	local01, #7 wc
009d0     3C 00 90 3D |  if_ae	jmp	#LR__0014
009d4     0F 23 02 F6 | 	mov	local03, local01
009d8     02 22 66 F0 | 	shl	local03, #2
009dc     59 00 00 FF 
009e0     3C E5 05 F1 | 	add	objptr, ##45884
009e4     F2 22 02 F1 | 	add	local03, objptr
009e8     11 01 68 FC | 	wrlong	#0, local03
009ec     0F 23 02 F6 | 	mov	local03, local01
009f0     02 22 66 F0 | 	shl	local03, #2
009f4     1C E4 05 F1 | 	add	objptr, #28
009f8     F2 22 02 F1 | 	add	local03, objptr
009fc     11 01 68 FC | 	wrlong	#0, local03
00a00     01 1E 06 F1 | 	add	local01, #1
00a04     59 00 00 FF 
00a08     58 E5 85 F1 | 	sub	objptr, ##45912
00a0c     BC FF 9F FD | 	jmp	#LR__0012
00a10                 | LR__0013
00a10                 | LR__0014
00a10     A7 F0 03 F6 | 	mov	ptra, fp
00a14     B2 00 A0 FD | 	call	#popregs_
00a18                 | _gethdi_ret
00a18     2D 00 64 FD | 	ret
00a1c                 | 
00a1c                 | ' 
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' '----------------------------------- The line interpreter/tokenizer --------------------------------------------------------------------
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' 
00a1c                 | ' 
00a1c                 | ' 
00a1c                 | ' sub interpret
00a1c                 | _interpret
00a1c     23 4A 05 F6 | 	mov	COUNT_, #35
00a20     A8 00 A0 FD | 	call	#pushregs_
00a24     01 00 00 FF 
00a28     50 F0 07 F1 | 	add	ptra, ##592
00a2c     37 00 00 FF 
00a30     4C E4 05 F1 | 	add	objptr, ##28236
00a34     F2 12 02 FB | 	rdlong	arg01, objptr
00a38     37 00 00 FF 
00a3c     4C E4 85 F1 | 	sub	objptr, ##28236
00a40     58 12 B2 FD | 	call	#__system__RTrim_S
00a44     FD 12 02 F6 | 	mov	arg01, result1
00a48     90 11 B2 FD | 	call	#__system__LTrim_S
00a4c     37 00 00 FF 
00a50     50 E4 05 F1 | 	add	objptr, ##28240
00a54     F2 FA 61 FC | 	wrlong	result1, objptr
00a58     04 E4 05 F1 | 	add	objptr, #4
00a5c     FF FF FF FF 
00a60     F2 FE 6B FC | 	wrlong	##-1, objptr
00a64     22 00 00 FF 
00a68     7C E5 05 F1 | 	add	objptr, ##17788
00a6c     F2 00 68 FC | 	wrlong	#0, objptr
00a70     0F 00 00 FF 
00a74     24 E5 85 F1 | 	sub	objptr, ##7972
00a78     F2 00 68 FC | 	wrlong	#0, objptr
00a7c     4A 00 00 FF 
00a80     AC E4 85 F1 | 	sub	objptr, ##38060
00a84     00 1E 06 F6 | 	mov	local01, #0
00a88                 | LR__0020
00a88                 | ' 
00a88                 | ' ' ---------------------------------------------------  Pass 1: Split the line to parts, detect and concatenate strings
00a88                 | ' 
00a88                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
00a88                 | ' 
00a88                 | ' 108 for i=0 to 125: separators(i)=0 :next i
00a88     00 20 06 F6 | 	mov	local02, #0
00a8c     20 4E 05 F1 | 	add	fp, #32
00a90     97 0E 48 FB | 	callpa	#(@LR__0022-@LR__0021)>>2,fcache_load_ptr_
00a94                 | LR__0021
00a94     10 23 02 F6 | 	mov	local03, local02
00a98     02 22 66 F0 | 	shl	local03, #2
00a9c     A7 22 02 F1 | 	add	local03, fp
00aa0     11 01 68 FC | 	wrlong	#0, local03
00aa4     01 20 06 F1 | 	add	local02, #1
00aa8     7E 20 56 F2 | 	cmps	local02, #126 wc
00aac     E4 FF 9F CD |  if_b	jmp	#LR__0021
00ab0                 | LR__0022
00ab0     20 4E 85 F1 | 	sub	fp, #32
00ab4                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
00ab4     00 20 06 F6 | 	mov	local02, #0
00ab8     35 00 00 FF 
00abc     3C E4 05 F1 | 	add	objptr, ##27196
00ac0     97 20 48 FB | 	callpa	#(@LR__0024-@LR__0023)>>2,fcache_load_ptr_
00ac4                 | LR__0023
00ac4     10 25 02 F6 | 	mov	local04, local02
00ac8     03 24 66 F0 | 	shl	local04, #3
00acc     F2 24 02 F1 | 	add	local04, objptr
00ad0     77 01 00 FF 
00ad4     42 16 06 F6 | 	mov	arg03, ##@LR__4837
00ad8     12 17 62 FC | 	wrlong	arg03, local04
00adc     10 25 02 F6 | 	mov	local04, local02
00ae0     03 24 66 F0 | 	shl	local04, #3
00ae4     F2 26 02 F6 | 	mov	local05, objptr
00ae8     F2 24 02 F1 | 	add	local04, objptr
00aec     00 28 06 F6 | 	mov	local06, #0
00af0     04 24 06 F1 | 	add	local04, #4
00af4     12 01 68 FC | 	wrlong	#0, local04
00af8     01 20 06 F1 | 	add	local02, #1
00afc     7E 20 56 F2 | 	cmps	local02, #126 wc
00b00     C0 FF 9F CD |  if_b	jmp	#LR__0023
00b04                 | LR__0024
00b04     02 00 00 FF 
00b08     10 E4 05 F1 | 	add	objptr, ##1040
00b0c     F2 12 02 FB | 	rdlong	arg01, objptr
00b10     37 00 00 FF 
00b14     4C E4 85 F1 | 	sub	objptr, ##28236
00b18     80 11 B2 FD | 	call	#__system__RTrim_S
00b1c     FD 12 02 F6 | 	mov	arg01, result1
00b20     B8 10 B2 FD | 	call	#__system__LTrim_S
00b24     37 00 00 FF 
00b28     4C E4 05 F1 | 	add	objptr, ##28236
00b2c     F2 FA 61 FC | 	wrlong	result1, objptr
00b30     77 01 00 FF 
00b34     43 24 06 F6 | 	mov	local04, ##@LR__4838
00b38     22 00 00 FF 
00b3c     C4 E5 05 F1 | 	add	objptr, ##17860
00b40     F2 24 62 FC | 	wrlong	local04, objptr
00b44     22 00 00 FF 
00b48     C4 E5 85 F1 | 	sub	objptr, ##17860
00b4c     F2 12 02 FB | 	rdlong	arg01, objptr
00b50     37 00 00 FF 
00b54     4C E4 85 F1 | 	sub	objptr, ##28236
00b58     09 2B 02 F6 | 	mov	local07, arg01
00b5c     97 06 48 FB | 	callpa	#(@LR__0026-@LR__0025)>>2,fcache_load_ptr_
00b60                 | LR__0025
00b60     15 FB C9 FA | 	rdbyte	result1, local07 wz
00b64     01 2A 06 51 |  if_ne	add	local07, #1
00b68     F4 FF 9F 5D |  if_ne	jmp	#LR__0025
00b6c                 | LR__0026
00b6c     09 2B 8A F1 | 	sub	local07, arg01 wz
00b70     5A 00 00 FF 
00b74     14 E4 05 F1 | 	add	objptr, ##46100
00b78     F2 2A 62 FC | 	wrlong	local07, objptr
00b7c                 | ' if l=0 then goto 101
00b7c     5A 00 00 FF 
00b80     14 E4 85 F1 | 	sub	objptr, ##46100
00b84     B8 27 90 AD |  if_e	jmp	#LR__0149
00b88     5A 00 00 FF 
00b8c     18 E4 05 F1 | 	add	objptr, ##46104
00b90     F2 00 68 FC | 	wrlong	#0, objptr
00b94                 | ' ' before we split the line, we have to find colons that are inside a string,,,,
00b94                 | ' for i=1 to len(line$)
00b94     01 20 06 F6 | 	mov	local02, #1
00b98     22 00 00 FF 
00b9c     CC E5 85 F1 | 	sub	objptr, ##17868
00ba0     F2 12 02 FB | 	rdlong	arg01, objptr
00ba4     37 00 00 FF 
00ba8     4C E4 85 F1 | 	sub	objptr, ##28236
00bac     09 2B 02 F6 | 	mov	local07, arg01
00bb0     97 06 48 FB | 	callpa	#(@LR__0028-@LR__0027)>>2,fcache_load_ptr_
00bb4                 | LR__0027
00bb4     15 FB C9 FA | 	rdbyte	result1, local07 wz
00bb8     01 2A 06 51 |  if_ne	add	local07, #1
00bbc     F4 FF 9F 5D |  if_ne	jmp	#LR__0027
00bc0                 | LR__0028
00bc0     09 2B 82 F1 | 	sub	local07, arg01
00bc4     15 2D 02 F6 | 	mov	local08, local07
00bc8     01 2C 06 F1 | 	add	local08, #1
00bcc                 | LR__0029
00bcc     16 21 52 F2 | 	cmps	local02, local08 wc
00bd0     00 01 90 3D |  if_ae	jmp	#LR__0032
00bd4                 | ' 
00bd4                 | '   if mid$(line$,i,1)="""" andalso d=0 then 
00bd4     37 00 00 FF 
00bd8     4C E4 05 F1 | 	add	objptr, ##28236
00bdc     F2 12 02 FB | 	rdlong	arg01, objptr
00be0     37 00 00 FF 
00be4     4C E4 85 F1 | 	sub	objptr, ##28236
00be8     10 15 02 F6 | 	mov	arg02, local02
00bec     01 16 06 F6 | 	mov	arg03, #1
00bf0     30 0D B2 FD | 	call	#__system__Mid_S
00bf4     FD 12 02 F6 | 	mov	arg01, result1
00bf8     77 01 00 FF 
00bfc     44 14 06 F6 | 	mov	arg02, ##@LR__4839
00c00     20 EC B1 FD | 	call	#__system___string_cmp
00c04     00 FA 0D F2 | 	cmp	result1, #0 wz
00c08     2C 00 90 5D |  if_ne	jmp	#LR__0030
00c0c     5A 00 00 FF 
00c10     18 E4 05 F1 | 	add	objptr, ##46104
00c14     F2 22 0A FB | 	rdlong	local03, objptr wz
00c18     5A 00 00 FF 
00c1c     18 E4 85 F1 | 	sub	objptr, ##46104
00c20     5A 00 00 AF 
00c24     18 E4 05 A1 |  if_e	add	objptr, ##46104
00c28     F2 02 68 AC |  if_e	wrlong	#1, objptr
00c2c     5A 00 00 AF 
00c30     18 E4 85 A1 |  if_e	sub	objptr, ##46104
00c34     60 00 90 AD |  if_e	jmp	#LR__0031
00c38                 | LR__0030
00c38     37 00 00 FF 
00c3c     4C E4 05 F1 | 	add	objptr, ##28236
00c40     F2 12 02 FB | 	rdlong	arg01, objptr
00c44     37 00 00 FF 
00c48     4C E4 85 F1 | 	sub	objptr, ##28236
00c4c     10 15 02 F6 | 	mov	arg02, local02
00c50     01 16 06 F6 | 	mov	arg03, #1
00c54     CC 0C B2 FD | 	call	#__system__Mid_S
00c58     FD 12 02 F6 | 	mov	arg01, result1
00c5c     77 01 00 FF 
00c60     46 14 06 F6 | 	mov	arg02, ##@LR__4840
00c64     BC EB B1 FD | 	call	#__system___string_cmp
00c68     00 FA 0D F2 | 	cmp	result1, #0 wz
00c6c     5A 00 00 AF 
00c70     18 E4 05 A1 |  if_e	add	objptr, ##46104
00c74     F2 22 02 AB |  if_e	rdlong	local03, objptr
00c78     5A 00 00 AF 
00c7c     18 E4 85 A1 |  if_e	sub	objptr, ##46104
00c80     01 22 0E A2 |  if_e	cmp	local03, #1 wz
00c84     5A 00 00 AF 
00c88     18 E4 05 A1 |  if_e	add	objptr, ##46104
00c8c     F2 00 68 AC |  if_e	wrlong	#0, objptr
00c90     5A 00 00 AF 
00c94     18 E4 85 A1 |  if_e	sub	objptr, ##46104
00c98                 | LR__0031
00c98     10 25 02 F6 | 	mov	local04, local02
00c9c     03 24 66 F0 | 	shl	local04, #3
00ca0     35 00 00 FF 
00ca4     3C E4 05 F1 | 	add	objptr, ##27196
00ca8     F2 26 02 F6 | 	mov	local05, objptr
00cac     F2 24 02 F1 | 	add	local04, objptr
00cb0     24 00 00 FF 
00cb4     DC E5 05 F1 | 	add	objptr, ##18908
00cb8     F2 28 02 FB | 	rdlong	local06, objptr
00cbc     5A 00 00 FF 
00cc0     18 E4 85 F1 | 	sub	objptr, ##46104
00cc4     04 24 06 F1 | 	add	local04, #4
00cc8     12 29 62 FC | 	wrlong	local06, local04
00ccc     01 20 06 F1 | 	add	local02, #1
00cd0     F8 FE 9F FD | 	jmp	#LR__0029
00cd4                 | LR__0032
00cd4     01 20 06 F6 | 	mov	local02, #1
00cd8                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop
00cd8                 | LR__0033
00cd8     37 00 00 FF 
00cdc     4C E4 05 F1 | 	add	objptr, ##28236
00ce0     F2 12 02 FB | 	rdlong	arg01, objptr
00ce4     37 00 00 FF 
00ce8     4C E4 85 F1 | 	sub	objptr, ##28236
00cec     10 15 02 F6 | 	mov	arg02, local02
00cf0     01 16 06 F6 | 	mov	arg03, #1
00cf4     2C 0C B2 FD | 	call	#__system__Mid_S
00cf8     FD 12 02 F6 | 	mov	arg01, result1
00cfc     77 01 00 FF 
00d00     48 2E 06 F6 | 	mov	local09, ##@LR__4841
00d04     17 15 02 F6 | 	mov	arg02, local09
00d08     18 EB B1 FD | 	call	#__system___string_cmp
00d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
00d10     34 00 90 5D |  if_ne	jmp	#LR__0034
00d14     10 27 02 F6 | 	mov	local05, local02
00d18     03 26 66 F0 | 	shl	local05, #3
00d1c     35 00 00 FF 
00d20     3C E4 05 F1 | 	add	objptr, ##27196
00d24     F2 28 02 F6 | 	mov	local06, objptr
00d28     F2 26 02 F1 | 	add	local05, objptr
00d2c     04 26 06 F1 | 	add	local05, #4
00d30     13 31 02 FB | 	rdlong	local10, local05
00d34     04 26 86 F1 | 	sub	local05, #4
00d38     18 33 0A F6 | 	mov	local11, local10 wz
00d3c     35 00 00 FF 
00d40     3C E4 85 F1 | 	sub	objptr, ##27196
00d44     24 00 90 AD |  if_e	jmp	#LR__0035
00d48                 | LR__0034
00d48     5A 00 00 FF 
00d4c     14 E4 05 F1 | 	add	objptr, ##46100
00d50     F2 34 02 FB | 	rdlong	local12, objptr
00d54     5A 00 00 FF 
00d58     14 E4 85 F1 | 	sub	objptr, ##46100
00d5c     1A 37 02 F6 | 	mov	local13, local12
00d60     1B 21 52 F2 | 	cmps	local02, local13 wc
00d64     01 20 06 C1 |  if_b	add	local02, #1
00d68     6C FF 9F CD |  if_b	jmp	#LR__0033
00d6c                 | LR__0035
00d6c                 | ' 
00d6c                 | ' 'let d=instr(1,line$,":"): if d>0 andalso d<len(line$) andalso lparts(d).token=0  then let rest$=trim$(right$(line$,len(line$)-d)):line$=trim$(left$(line$,d-1)) else rest$=""  
00d6c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 
00d6c     5A 00 00 FF 
00d70     14 E4 05 F1 | 	add	objptr, ##46100
00d74     F2 24 02 FB | 	rdlong	local04, objptr
00d78     5A 00 00 FF 
00d7c     14 E4 85 F1 | 	sub	objptr, ##46100
00d80     12 21 52 F2 | 	cmps	local02, local04 wc
00d84     A4 00 90 3D |  if_ae	jmp	#LR__0038
00d88     37 00 00 FF 
00d8c     4C E4 05 F1 | 	add	objptr, ##28236
00d90     F2 28 02 FB | 	rdlong	local06, objptr
00d94     37 00 00 FF 
00d98     4C E4 85 F1 | 	sub	objptr, ##28236
00d9c     14 13 02 F6 | 	mov	arg01, local06
00da0     09 2B 02 F6 | 	mov	local07, arg01
00da4     97 06 48 FB | 	callpa	#(@LR__0037-@LR__0036)>>2,fcache_load_ptr_
00da8                 | LR__0036
00da8     15 FB C9 FA | 	rdbyte	result1, local07 wz
00dac     01 2A 06 51 |  if_ne	add	local07, #1
00db0     F4 FF 9F 5D |  if_ne	jmp	#LR__0036
00db4                 | LR__0037
00db4     09 2B 82 F1 | 	sub	local07, arg01
00db8     15 15 02 F6 | 	mov	arg02, local07
00dbc     10 15 82 F1 | 	sub	arg02, local02
00dc0     14 13 02 F6 | 	mov	arg01, local06
00dc4     CC 0A B2 FD | 	call	#__system__Right_S
00dc8     FD 12 02 F6 | 	mov	arg01, result1
00dcc     CC 0E B2 FD | 	call	#__system__RTrim_S
00dd0     FD 12 02 F6 | 	mov	arg01, result1
00dd4     04 0E B2 FD | 	call	#__system__LTrim_S
00dd8     5A 00 00 FF 
00ddc     1C E4 05 F1 | 	add	objptr, ##46108
00de0     F2 FA 61 FC | 	wrlong	result1, objptr
00de4     22 00 00 FF 
00de8     D0 E5 85 F1 | 	sub	objptr, ##17872
00dec     F2 12 02 FB | 	rdlong	arg01, objptr
00df0     37 00 00 FF 
00df4     4C E4 85 F1 | 	sub	objptr, ##28236
00df8     01 20 86 F1 | 	sub	local02, #1
00dfc     10 15 02 F6 | 	mov	arg02, local02
00e00     08 0A B2 FD | 	call	#__system__Left_S
00e04     FD 12 02 F6 | 	mov	arg01, result1
00e08     90 0E B2 FD | 	call	#__system__RTrim_S
00e0c     FD 12 02 F6 | 	mov	arg01, result1
00e10     C8 0D B2 FD | 	call	#__system__LTrim_S
00e14     37 00 00 FF 
00e18     4C E4 05 F1 | 	add	objptr, ##28236
00e1c     F2 FA 61 FC | 	wrlong	result1, objptr
00e20     37 00 00 FF 
00e24     4C E4 85 F1 | 	sub	objptr, ##28236
00e28     1C 00 90 FD | 	jmp	#LR__0039
00e2c                 | LR__0038
00e2c     77 01 00 FF 
00e30     4A 24 06 F6 | 	mov	local04, ##@LR__4842
00e34     5A 00 00 FF 
00e38     1C E4 05 F1 | 	add	objptr, ##46108
00e3c     F2 24 62 FC | 	wrlong	local04, objptr
00e40     5A 00 00 FF 
00e44     1C E4 85 F1 | 	sub	objptr, ##46108
00e48                 | LR__0039
00e48                 | ' 'print "line$=";line$
00e48                 | ' 'print "rest$=";rest$
00e48                 | ' 
00e48                 | ' 
00e48                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not last part
00e48     37 00 00 FF 
00e4c     54 E4 05 F1 | 	add	objptr, ##28244
00e50     F2 24 02 FB | 	rdlong	local04, objptr
00e54     37 00 00 FF 
00e58     54 E4 85 F1 | 	sub	objptr, ##28244
00e5c     FF FF 7F FF 
00e60     FF 25 0E F2 | 	cmp	local04, ##-1 wz
00e64     3C 00 90 5D |  if_ne	jmp	#LR__0040
00e68     5A 00 00 FF 
00e6c     1C E4 05 F1 | 	add	objptr, ##46108
00e70     F2 12 02 FB | 	rdlong	arg01, objptr
00e74     5A 00 00 FF 
00e78     1C E4 85 F1 | 	sub	objptr, ##46108
00e7c     77 01 00 FF 
00e80     4B 14 06 F6 | 	mov	arg02, ##@LR__4843
00e84     9C E9 B1 FD | 	call	#__system___string_cmp
00e88     00 FA 0D F2 | 	cmp	result1, #0 wz
00e8c     37 00 00 5F 
00e90     54 E4 05 51 |  if_ne	add	objptr, ##28244
00e94     F2 00 68 5C |  if_ne	wrlong	#0, objptr
00e98     37 00 00 5F 
00e9c     54 E4 85 51 |  if_ne	sub	objptr, ##28244
00ea0     08 01 90 5D |  if_ne	jmp	#LR__0044
00ea4                 | LR__0040
00ea4                 | ' if cont=-1 andalso rest$="" then cont=3 : goto 107		' this is the first AND last part
00ea4     37 00 00 FF 
00ea8     54 E4 05 F1 | 	add	objptr, ##28244
00eac     F2 24 02 FB | 	rdlong	local04, objptr
00eb0     37 00 00 FF 
00eb4     54 E4 85 F1 | 	sub	objptr, ##28244
00eb8     FF FF 7F FF 
00ebc     FF 25 0E F2 | 	cmp	local04, ##-1 wz
00ec0     3C 00 90 5D |  if_ne	jmp	#LR__0041
00ec4     5A 00 00 FF 
00ec8     1C E4 05 F1 | 	add	objptr, ##46108
00ecc     F2 12 02 FB | 	rdlong	arg01, objptr
00ed0     5A 00 00 FF 
00ed4     1C E4 85 F1 | 	sub	objptr, ##46108
00ed8     77 01 00 FF 
00edc     4C 14 06 F6 | 	mov	arg02, ##@LR__4844
00ee0     40 E9 B1 FD | 	call	#__system___string_cmp
00ee4     00 FA 0D F2 | 	cmp	result1, #0 wz
00ee8     37 00 00 AF 
00eec     54 E4 05 A1 |  if_e	add	objptr, ##28244
00ef0     F2 06 68 AC |  if_e	wrlong	#3, objptr
00ef4     37 00 00 AF 
00ef8     54 E4 85 A1 |  if_e	sub	objptr, ##28244
00efc     AC 00 90 AD |  if_e	jmp	#LR__0044
00f00                 | LR__0041
00f00                 | ' if cont=4 andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
00f00     37 00 00 FF 
00f04     54 E4 05 F1 | 	add	objptr, ##28244
00f08     F2 24 02 FB | 	rdlong	local04, objptr
00f0c     37 00 00 FF 
00f10     54 E4 85 F1 | 	sub	objptr, ##28244
00f14     04 24 0E F2 | 	cmp	local04, #4 wz
00f18     3C 00 90 5D |  if_ne	jmp	#LR__0042
00f1c     5A 00 00 FF 
00f20     1C E4 05 F1 | 	add	objptr, ##46108
00f24     F2 12 02 FB | 	rdlong	arg01, objptr
00f28     5A 00 00 FF 
00f2c     1C E4 85 F1 | 	sub	objptr, ##46108
00f30     77 01 00 FF 
00f34     4D 14 06 F6 | 	mov	arg02, ##@LR__4845
00f38     E8 E8 B1 FD | 	call	#__system___string_cmp
00f3c     00 FA 0D F2 | 	cmp	result1, #0 wz
00f40     37 00 00 5F 
00f44     54 E4 05 51 |  if_ne	add	objptr, ##28244
00f48     F2 02 68 5C |  if_ne	wrlong	#1, objptr
00f4c     37 00 00 5F 
00f50     54 E4 85 51 |  if_ne	sub	objptr, ##28244
00f54     54 00 90 5D |  if_ne	jmp	#LR__0044
00f58                 | LR__0042
00f58                 | ' if cont=4 andalso rest$="" then cont=2 :goto 107		' this is the last, and not the first, part
00f58     37 00 00 FF 
00f5c     54 E4 05 F1 | 	add	objptr, ##28244
00f60     F2 24 02 FB | 	rdlong	local04, objptr
00f64     37 00 00 FF 
00f68     54 E4 85 F1 | 	sub	objptr, ##28244
00f6c     04 24 0E F2 | 	cmp	local04, #4 wz
00f70     38 00 90 5D |  if_ne	jmp	#LR__0043
00f74     5A 00 00 FF 
00f78     1C E4 05 F1 | 	add	objptr, ##46108
00f7c     F2 12 02 FB | 	rdlong	arg01, objptr
00f80     5A 00 00 FF 
00f84     1C E4 85 F1 | 	sub	objptr, ##46108
00f88     77 01 00 FF 
00f8c     4E 14 06 F6 | 	mov	arg02, ##@LR__4846
00f90     90 E8 B1 FD | 	call	#__system___string_cmp
00f94     00 FA 0D F2 | 	cmp	result1, #0 wz
00f98     37 00 00 AF 
00f9c     54 E4 05 A1 |  if_e	add	objptr, ##28244
00fa0     F2 04 68 AC |  if_e	wrlong	#2, objptr
00fa4     37 00 00 AF 
00fa8     54 E4 85 A1 |  if_e	sub	objptr, ##28244
00fac                 | LR__0043
00fac                 | LR__0044
00fac     20 4E 05 F1 | 	add	fp, #32
00fb0     A7 00 68 FC | 	wrlong	#0, fp
00fb4     20 4E 85 F1 | 	sub	fp, #32
00fb8     00 20 06 F6 | 	mov	local02, #0
00fbc     01 38 06 F6 | 	mov	local14, #1
00fc0                 | ' 
00fc0                 | ' ' 1b: find separators
00fc0                 | ' 
00fc0                 | ' 107
00fc0                 | ' separators(0)=0
00fc0                 | ' i=0: j=1 : do: i+=1 : let c$=mid$(line$,i,1) 
00fc0                 | LR__0045
00fc0     01 20 06 F1 | 	add	local02, #1
00fc4     37 00 00 FF 
00fc8     4C E4 05 F1 | 	add	objptr, ##28236
00fcc     F2 12 02 FB | 	rdlong	arg01, objptr
00fd0     37 00 00 FF 
00fd4     4C E4 85 F1 | 	sub	objptr, ##28236
00fd8     10 15 02 F6 | 	mov	arg02, local02
00fdc     01 16 06 F6 | 	mov	arg03, #1
00fe0     40 09 B2 FD | 	call	#__system__Mid_S
00fe4     5A 00 00 FF 
00fe8     20 E4 05 F1 | 	add	objptr, ##46112
00fec     F2 FA 61 FC | 	wrlong	result1, objptr
00ff0                 | ' if isseparator(c$) then separators(j)=i: j+=1 
00ff0     FD 12 02 F6 | 	mov	arg01, result1
00ff4     5A 00 00 FF 
00ff8     20 E4 85 F1 | 	sub	objptr, ##46112
00ffc     B8 29 B0 FD | 	call	#_isseparator
01000     00 FA 0D F2 | 	cmp	result1, #0 wz
01004     1C 00 90 AD |  if_e	jmp	#LR__0046
01008     1C 23 02 F6 | 	mov	local03, local14
0100c     02 22 66 F0 | 	shl	local03, #2
01010     20 4E 05 F1 | 	add	fp, #32
01014     A7 22 02 F1 | 	add	local03, fp
01018     11 21 62 FC | 	wrlong	local02, local03
0101c     01 38 06 F1 | 	add	local14, #1
01020     20 4E 85 F1 | 	sub	fp, #32
01024                 | LR__0046
01024     5A 00 00 FF 
01028     14 E4 05 F1 | 	add	objptr, ##46100
0102c     F2 24 02 FB | 	rdlong	local04, objptr
01030     5A 00 00 FF 
01034     14 E4 85 F1 | 	sub	objptr, ##46100
01038     12 21 5A F2 | 	cmps	local02, local04 wcz
0103c     80 FF 9F ED |  if_be	jmp	#LR__0045
01040     1C 23 02 F6 | 	mov	local03, local14
01044     02 22 66 F0 | 	shl	local03, #2
01048     20 4E 05 F1 | 	add	fp, #32
0104c     A7 22 02 F1 | 	add	local03, fp
01050     11 21 62 FC | 	wrlong	local02, local03
01054     00 3A 06 F6 | 	mov	local15, #0
01058                 | ' for i=0 to j-1 
01058     00 20 06 F6 | 	mov	local02, #0
0105c     1C 3D 02 F6 | 	mov	local16, local14
01060     20 4E 85 F1 | 	sub	fp, #32
01064                 | LR__0047
01064     1E 21 52 F2 | 	cmps	local02, local16 wc
01068     88 01 90 3D |  if_ae	jmp	#LR__0051
0106c     10 23 02 F6 | 	mov	local03, local02
01070     02 22 66 F0 | 	shl	local03, #2
01074     20 4E 05 F1 | 	add	fp, #32
01078     A7 22 02 F1 | 	add	local03, fp
0107c     11 27 02 FB | 	rdlong	local05, local03
01080     5A 00 00 FF 
01084     28 E4 05 F1 | 	add	objptr, ##46120
01088     F2 26 62 FC | 	wrlong	local05, objptr
0108c     10 23 02 F6 | 	mov	local03, local02
01090     01 22 06 F1 | 	add	local03, #1
01094     02 22 66 F0 | 	shl	local03, #2
01098     A7 2E 02 F6 | 	mov	local09, fp
0109c     A7 22 02 F1 | 	add	local03, fp
010a0     11 27 02 FB | 	rdlong	local05, local03
010a4     04 E4 05 F1 | 	add	objptr, #4
010a8     F2 26 62 FC | 	wrlong	local05, objptr
010ac                 | '   if p1>0 then let p$=mid$(line$,p1,1):  if   p$<>"" then lparts(k).part$=p$ : k+=1 
010ac     04 E4 85 F1 | 	sub	objptr, #4
010b0     F2 24 02 FB | 	rdlong	local04, objptr
010b4     5A 00 00 FF 
010b8     28 E4 85 F1 | 	sub	objptr, ##46120
010bc     01 24 56 F2 | 	cmps	local04, #1 wc
010c0     20 4E 85 F1 | 	sub	fp, #32
010c4     84 00 90 CD |  if_b	jmp	#LR__0049
010c8     37 00 00 FF 
010cc     4C E4 05 F1 | 	add	objptr, ##28236
010d0     F2 12 02 FB | 	rdlong	arg01, objptr
010d4     22 00 00 FF 
010d8     DC E5 05 F1 | 	add	objptr, ##17884
010dc     F2 14 02 FB | 	rdlong	arg02, objptr
010e0     5A 00 00 FF 
010e4     28 E4 85 F1 | 	sub	objptr, ##46120
010e8     01 16 06 F6 | 	mov	arg03, #1
010ec     34 08 B2 FD | 	call	#__system__Mid_S
010f0     5A 00 00 FF 
010f4     30 E4 05 F1 | 	add	objptr, ##46128
010f8     F2 FA 61 FC | 	wrlong	result1, objptr
010fc     5A 00 00 FF 
01100     30 E4 85 F1 | 	sub	objptr, ##46128
01104     FD 12 02 F6 | 	mov	arg01, result1
01108     77 01 00 FF 
0110c     4F 14 06 F6 | 	mov	arg02, ##@LR__4847
01110     10 E7 B1 FD | 	call	#__system___string_cmp
01114     00 FA 0D F2 | 	cmp	result1, #0 wz
01118     30 00 90 AD |  if_e	jmp	#LR__0048
0111c     1D 2F 02 F6 | 	mov	local09, local15
01120     03 2E 66 F0 | 	shl	local09, #3
01124     35 00 00 FF 
01128     3C E4 05 F1 | 	add	objptr, ##27196
0112c     F2 2E 02 F1 | 	add	local09, objptr
01130     24 00 00 FF 
01134     F4 E5 05 F1 | 	add	objptr, ##18932
01138     F2 28 02 FB | 	rdlong	local06, objptr
0113c     5A 00 00 FF 
01140     30 E4 85 F1 | 	sub	objptr, ##46128
01144     17 29 62 FC | 	wrlong	local06, local09
01148     01 3A 06 F1 | 	add	local15, #1
0114c                 | LR__0048
0114c                 | LR__0049
0114c     37 00 00 FF 
01150     4C E4 05 F1 | 	add	objptr, ##28236
01154     F2 12 02 FB | 	rdlong	arg01, objptr
01158     22 00 00 FF 
0115c     DC E5 05 F1 | 	add	objptr, ##17884
01160     F2 14 02 FB | 	rdlong	arg02, objptr
01164     01 14 06 F1 | 	add	arg02, #1
01168     04 E4 05 F1 | 	add	objptr, #4
0116c     F2 16 02 FB | 	rdlong	arg03, objptr
01170     04 E4 85 F1 | 	sub	objptr, #4
01174     F2 30 02 FB | 	rdlong	local10, objptr
01178     5A 00 00 FF 
0117c     28 E4 85 F1 | 	sub	objptr, ##46120
01180     18 33 02 F6 | 	mov	local11, local10
01184     19 17 82 F1 | 	sub	arg03, local11
01188     01 16 86 F1 | 	sub	arg03, #1
0118c     94 07 B2 FD | 	call	#__system__Mid_S
01190     5A 00 00 FF 
01194     30 E4 05 F1 | 	add	objptr, ##46128
01198     F2 FA 61 FC | 	wrlong	result1, objptr
0119c     5A 00 00 FF 
011a0     30 E4 85 F1 | 	sub	objptr, ##46128
011a4     FD 12 02 F6 | 	mov	arg01, result1
011a8     77 01 00 FF 
011ac     50 14 06 F6 | 	mov	arg02, ##@LR__4848
011b0     70 E6 B1 FD | 	call	#__system___string_cmp
011b4     00 FA 0D F2 | 	cmp	result1, #0 wz
011b8     30 00 90 AD |  if_e	jmp	#LR__0050
011bc     1D 2F 02 F6 | 	mov	local09, local15
011c0     03 2E 66 F0 | 	shl	local09, #3
011c4     35 00 00 FF 
011c8     3C E4 05 F1 | 	add	objptr, ##27196
011cc     F2 2E 02 F1 | 	add	local09, objptr
011d0     24 00 00 FF 
011d4     F4 E5 05 F1 | 	add	objptr, ##18932
011d8     F2 28 02 FB | 	rdlong	local06, objptr
011dc     5A 00 00 FF 
011e0     30 E4 85 F1 | 	sub	objptr, ##46128
011e4     17 29 62 FC | 	wrlong	local06, local09
011e8     01 3A 06 F1 | 	add	local15, #1
011ec                 | LR__0050
011ec     01 20 06 F1 | 	add	local02, #1
011f0     70 FE 9F FD | 	jmp	#LR__0047
011f4                 | LR__0051
011f4     00 20 06 F6 | 	mov	local02, #0
011f8                 | ' 
011f8                 | ' ' 1d : find strings
011f8                 | ' 
011f8                 | ' i=0
011f8                 | ' do
011f8                 | LR__0052
011f8                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
011f8     10 27 02 F6 | 	mov	local05, local02
011fc     03 26 66 F0 | 	shl	local05, #3
01200     35 00 00 FF 
01204     3C E4 05 F1 | 	add	objptr, ##27196
01208     F2 26 02 F1 | 	add	local05, objptr
0120c     13 13 02 FB | 	rdlong	arg01, local05
01210     77 01 00 FF 
01214     51 14 06 F6 | 	mov	arg02, ##@LR__4849
01218     35 00 00 FF 
0121c     3C E4 85 F1 | 	sub	objptr, ##27196
01220     00 E6 B1 FD | 	call	#__system___string_cmp
01224     00 FA 0D F2 | 	cmp	result1, #0 wz
01228     01 20 06 51 |  if_ne	add	local02, #1
0122c     50 01 90 5D |  if_ne	jmp	#LR__0057
01230     10 3F 02 F6 | 	mov	local17, local02
01234                 | LR__0053
01234     10 2F 02 F6 | 	mov	local09, local02
01238     01 2E 06 F1 | 	add	local09, #1
0123c     03 2E 66 F0 | 	shl	local09, #3
01240     35 00 00 FF 
01244     3C E4 05 F1 | 	add	objptr, ##27196
01248     F2 2E 02 F1 | 	add	local09, objptr
0124c     17 31 02 FB | 	rdlong	local10, local09
01250     24 00 00 FF 
01254     F4 E5 05 F1 | 	add	objptr, ##18932
01258     F2 30 62 FC | 	wrlong	local10, objptr
0125c     1F 2F 02 F6 | 	mov	local09, local17
01260     03 2E 66 F0 | 	shl	local09, #3
01264     24 00 00 FF 
01268     F4 E5 85 F1 | 	sub	objptr, ##18932
0126c     F2 2E 02 F1 | 	add	local09, objptr
01270     1F 37 02 F6 | 	mov	local13, local17
01274     03 36 66 F0 | 	shl	local13, #3
01278     F2 36 02 F1 | 	add	local13, objptr
0127c     1B 13 02 FB | 	rdlong	arg01, local13
01280     35 00 00 FF 
01284     3C E4 85 F1 | 	sub	objptr, ##27196
01288     18 33 02 F6 | 	mov	local11, local10
0128c     19 15 02 F6 | 	mov	arg02, local11
01290     C4 E5 B1 FD | 	call	#__system___string_concat
01294     17 FB 61 FC | 	wrlong	result1, local09
01298     10 39 02 F6 | 	mov	local14, local02
0129c     01 38 06 F1 | 	add	local14, #1
012a0     1D 41 02 F6 | 	mov	local18, local15
012a4     01 40 06 F1 | 	add	local18, #1
012a8     97 3C 48 FB | 	callpa	#(@LR__0055-@LR__0054)>>2,fcache_load_ptr_
012ac                 | LR__0054
012ac     20 39 52 F2 | 	cmps	local14, local18 wc
012b0     70 00 90 3D |  if_ae	jmp	#LR__0056
012b4     1C 27 02 F6 | 	mov	local05, local14
012b8     01 26 06 F1 | 	add	local05, #1
012bc     03 26 66 F0 | 	shl	local05, #3
012c0     35 00 00 FF 
012c4     3C E4 05 F1 | 	add	objptr, ##27196
012c8     F2 26 02 F1 | 	add	local05, objptr
012cc     13 25 02 FB | 	rdlong	local04, local05
012d0     1C 29 02 F6 | 	mov	local06, local14
012d4     01 28 06 F1 | 	add	local06, #1
012d8     03 28 66 F0 | 	shl	local06, #3
012dc     F2 28 02 F1 | 	add	local06, objptr
012e0     04 28 06 F1 | 	add	local06, #4
012e4     14 23 02 FB | 	rdlong	local03, local06
012e8     1C 29 02 F6 | 	mov	local06, local14
012ec     03 28 66 F0 | 	shl	local06, #3
012f0     F2 32 02 F6 | 	mov	local11, objptr
012f4     F2 28 02 F1 | 	add	local06, objptr
012f8     14 25 62 FC | 	wrlong	local04, local06
012fc     1C 31 02 F6 | 	mov	local10, local14
01300     18 35 02 F6 | 	mov	local12, local10
01304     03 34 66 F0 | 	shl	local12, #3
01308     F2 34 02 F1 | 	add	local12, objptr
0130c     04 34 06 F1 | 	add	local12, #4
01310     1A 23 62 FC | 	wrlong	local03, local12
01314     01 38 06 F1 | 	add	local14, #1
01318     35 00 00 FF 
0131c     3C E4 85 F1 | 	sub	objptr, ##27196
01320     88 FF 9F FD | 	jmp	#LR__0054
01324                 | LR__0055
01324                 | LR__0056
01324     01 3A 86 F1 | 	sub	local15, #1
01328     5A 00 00 FF 
0132c     30 E4 05 F1 | 	add	objptr, ##46128
01330     F2 12 02 FB | 	rdlong	arg01, objptr
01334     5A 00 00 FF 
01338     30 E4 85 F1 | 	sub	objptr, ##46128
0133c     77 01 00 FF 
01340     53 14 06 F6 | 	mov	arg02, ##@LR__4850
01344     DC E4 B1 FD | 	call	#__system___string_cmp
01348     00 FA 0D F2 | 	cmp	result1, #0 wz
0134c     1D 21 52 52 |  if_ne	cmps	local02, local15 wc
01350     E0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0053
01354                 | '   if p$<>"""" then k+=1:i+=1
01354     5A 00 00 FF 
01358     30 E4 05 F1 | 	add	objptr, ##46128
0135c     F2 12 02 FB | 	rdlong	arg01, objptr
01360     5A 00 00 FF 
01364     30 E4 85 F1 | 	sub	objptr, ##46128
01368     77 01 00 FF 
0136c     55 14 06 F6 | 	mov	arg02, ##@LR__4851
01370     B0 E4 B1 FD | 	call	#__system___string_cmp
01374     00 FA 0D F2 | 	cmp	result1, #0 wz
01378     01 3A 06 51 |  if_ne	add	local15, #1
0137c     01 20 06 51 |  if_ne	add	local02, #1
01380                 | LR__0057
01380     1D 21 52 F2 | 	cmps	local02, local15 wc
01384     70 FE 9F CD |  if_b	jmp	#LR__0052
01388     00 20 06 F6 | 	mov	local02, #0
0138c                 | ' 
0138c                 | ' ' 1e : concatenate strings if "" detected between
0138c                 | '  
0138c                 | ' i=0 : do
0138c                 | LR__0058
0138c                 | '  if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
0138c     10 27 02 F6 | 	mov	local05, local02
01390     03 26 66 F0 | 	shl	local05, #3
01394     35 00 00 FF 
01398     3C E4 05 F1 | 	add	objptr, ##27196
0139c     F2 26 02 F1 | 	add	local05, objptr
013a0     13 13 02 FB | 	rdlong	arg01, local05
013a4     01 14 06 F6 | 	mov	arg02, #1
013a8     35 00 00 FF 
013ac     3C E4 85 F1 | 	sub	objptr, ##27196
013b0     E0 04 B2 FD | 	call	#__system__Right_S
013b4     FD 12 02 F6 | 	mov	arg01, result1
013b8     77 01 00 FF 
013bc     57 14 06 F6 | 	mov	arg02, ##@LR__4852
013c0     60 E4 B1 FD | 	call	#__system___string_cmp
013c4     00 FA 0D F2 | 	cmp	result1, #0 wz
013c8     78 01 90 5D |  if_ne	jmp	#LR__0064
013cc     10 29 02 F6 | 	mov	local06, local02
013d0     01 28 06 F1 | 	add	local06, #1
013d4     03 28 66 F0 | 	shl	local06, #3
013d8     35 00 00 FF 
013dc     3C E4 05 F1 | 	add	objptr, ##27196
013e0     F2 32 02 F6 | 	mov	local11, objptr
013e4     F2 28 02 F1 | 	add	local06, objptr
013e8     14 13 02 FB | 	rdlong	arg01, local06
013ec     01 14 06 F6 | 	mov	arg02, #1
013f0     35 00 00 FF 
013f4     3C E4 85 F1 | 	sub	objptr, ##27196
013f8     10 04 B2 FD | 	call	#__system__Left_S
013fc     FD 12 02 F6 | 	mov	arg01, result1
01400     77 01 00 FF 
01404     59 14 06 F6 | 	mov	arg02, ##@LR__4853
01408     18 E4 B1 FD | 	call	#__system___string_cmp
0140c     00 FA 0D F2 | 	cmp	result1, #0 wz
01410     30 01 90 5D |  if_ne	jmp	#LR__0064
01414     10 2F 02 F6 | 	mov	local09, local02
01418     03 2E 66 F0 | 	shl	local09, #3
0141c     35 00 00 FF 
01420     3C E4 05 F1 | 	add	objptr, ##27196
01424     F2 2E 02 F1 | 	add	local09, objptr
01428     10 37 02 F6 | 	mov	local13, local02
0142c     03 36 66 F0 | 	shl	local13, #3
01430     F2 36 02 F1 | 	add	local13, objptr
01434     1B 29 02 FB | 	rdlong	local06, local13
01438     10 35 02 F6 | 	mov	local12, local02
0143c     01 34 06 F1 | 	add	local12, #1
01440     03 34 66 F0 | 	shl	local12, #3
01444     F2 34 02 F1 | 	add	local12, objptr
01448     1A 33 02 FB | 	rdlong	local11, local12
0144c     10 43 02 F6 | 	mov	local19, local02
01450     01 42 06 F1 | 	add	local19, #1
01454     21 45 02 F6 | 	mov	local20, local19
01458     03 44 66 F0 | 	shl	local20, #3
0145c     F2 46 02 F6 | 	mov	local21, objptr
01460     F2 44 02 F1 | 	add	local20, objptr
01464     22 13 02 FB | 	rdlong	arg01, local20
01468     35 00 00 FF 
0146c     3C E4 85 F1 | 	sub	objptr, ##27196
01470     09 2B 02 F6 | 	mov	local07, arg01
01474     97 06 48 FB | 	callpa	#(@LR__0060-@LR__0059)>>2,fcache_load_ptr_
01478                 | LR__0059
01478     15 FB C9 FA | 	rdbyte	result1, local07 wz
0147c     01 2A 06 51 |  if_ne	add	local07, #1
01480     F4 FF 9F 5D |  if_ne	jmp	#LR__0059
01484                 | LR__0060
01484     09 2B 82 F1 | 	sub	local07, arg01
01488     15 31 02 F6 | 	mov	local10, local07
0148c     01 30 86 F1 | 	sub	local10, #1
01490     19 13 02 F6 | 	mov	arg01, local11
01494     18 15 02 F6 | 	mov	arg02, local10
01498     F8 03 B2 FD | 	call	#__system__Right_S
0149c     FD 32 02 F6 | 	mov	local11, result1
014a0     14 13 02 F6 | 	mov	arg01, local06
014a4     19 15 02 F6 | 	mov	arg02, local11
014a8     AC E3 B1 FD | 	call	#__system___string_concat
014ac     17 FB 61 FC | 	wrlong	result1, local09
014b0                 | '    for j=i+1 to k: lparts(j)=lparts(j+1): next j  
014b0     10 39 02 F6 | 	mov	local14, local02
014b4     01 38 06 F1 | 	add	local14, #1
014b8     1D 49 02 F6 | 	mov	local22, local15
014bc     01 48 06 F1 | 	add	local22, #1
014c0     97 3C 48 FB | 	callpa	#(@LR__0062-@LR__0061)>>2,fcache_load_ptr_
014c4                 | LR__0061
014c4     24 39 52 F2 | 	cmps	local14, local22 wc
014c8     70 00 90 3D |  if_ae	jmp	#LR__0063
014cc     1C 27 02 F6 | 	mov	local05, local14
014d0     01 26 06 F1 | 	add	local05, #1
014d4     03 26 66 F0 | 	shl	local05, #3
014d8     35 00 00 FF 
014dc     3C E4 05 F1 | 	add	objptr, ##27196
014e0     F2 26 02 F1 | 	add	local05, objptr
014e4     13 25 02 FB | 	rdlong	local04, local05
014e8     1C 29 02 F6 | 	mov	local06, local14
014ec     01 28 06 F1 | 	add	local06, #1
014f0     03 28 66 F0 | 	shl	local06, #3
014f4     F2 28 02 F1 | 	add	local06, objptr
014f8     04 28 06 F1 | 	add	local06, #4
014fc     14 23 02 FB | 	rdlong	local03, local06
01500     1C 29 02 F6 | 	mov	local06, local14
01504     03 28 66 F0 | 	shl	local06, #3
01508     F2 32 02 F6 | 	mov	local11, objptr
0150c     F2 28 02 F1 | 	add	local06, objptr
01510     14 25 62 FC | 	wrlong	local04, local06
01514     1C 31 02 F6 | 	mov	local10, local14
01518     18 35 02 F6 | 	mov	local12, local10
0151c     03 34 66 F0 | 	shl	local12, #3
01520     F2 34 02 F1 | 	add	local12, objptr
01524     04 34 06 F1 | 	add	local12, #4
01528     1A 23 62 FC | 	wrlong	local03, local12
0152c     01 38 06 F1 | 	add	local14, #1
01530     35 00 00 FF 
01534     3C E4 85 F1 | 	sub	objptr, ##27196
01538     88 FF 9F FD | 	jmp	#LR__0061
0153c                 | LR__0062
0153c                 | LR__0063
0153c     01 20 86 F1 | 	sub	local02, #1
01540     01 3A 86 F1 | 	sub	local15, #1
01544                 | LR__0064
01544     01 20 06 F1 | 	add	local02, #1
01548     1D 21 52 F2 | 	cmps	local02, local15 wc
0154c     3C FE 9F CD |  if_b	jmp	#LR__0058
01550     00 20 06 F6 | 	mov	local02, #0
01554                 | '  
01554                 | ' ' 1e2: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
01554                 | '  
01554                 | ' i=0 : do
01554                 | LR__0065
01554     10 2F 02 F6 | 	mov	local09, local02
01558     03 2E 66 F0 | 	shl	local09, #3
0155c     35 00 00 FF 
01560     3C E4 05 F1 | 	add	objptr, ##27196
01564     F2 2E 02 F1 | 	add	local09, objptr
01568     17 29 02 FB | 	rdlong	local06, local09
0156c     24 00 00 FF 
01570     FC E5 05 F1 | 	add	objptr, ##18940
01574     F2 28 62 FC | 	wrlong	local06, objptr
01578     10 2F 02 F6 | 	mov	local09, local02
0157c     01 2E 06 F1 | 	add	local09, #1
01580     03 2E 66 F0 | 	shl	local09, #3
01584     24 00 00 FF 
01588     FC E5 85 F1 | 	sub	objptr, ##18940
0158c     F2 2E 02 F1 | 	add	local09, objptr
01590     17 29 02 FB | 	rdlong	local06, local09
01594     25 00 00 FF 
01598     00 E4 05 F1 | 	add	objptr, ##18944
0159c     F2 28 62 FC | 	wrlong	local06, objptr
015a0                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
015a0     04 E4 85 F1 | 	sub	objptr, #4
015a4     F2 12 02 FB | 	rdlong	arg01, objptr
015a8     5A 00 00 FF 
015ac     38 E4 85 F1 | 	sub	objptr, ##46136
015b0     77 01 00 FF 
015b4     5B 14 06 F6 | 	mov	arg02, ##@LR__4854
015b8     68 E2 B1 FD | 	call	#__system___string_cmp
015bc     00 FA 0D F2 | 	cmp	result1, #0 wz
015c0     04 01 90 AD |  if_e	jmp	#LR__0066
015c4     5A 00 00 FF 
015c8     38 E4 05 F1 | 	add	objptr, ##46136
015cc     F2 12 02 FB | 	rdlong	arg01, objptr
015d0     5A 00 00 FF 
015d4     38 E4 85 F1 | 	sub	objptr, ##46136
015d8     77 01 00 FF 
015dc     5D 14 06 F6 | 	mov	arg02, ##@LR__4855
015e0     40 E2 B1 FD | 	call	#__system___string_cmp
015e4     FD 22 0A F6 | 	mov	local03, result1 wz
015e8     DC 00 90 AD |  if_e	jmp	#LR__0066
015ec     5A 00 00 FF 
015f0     38 E4 05 F1 | 	add	objptr, ##46136
015f4     F2 12 02 FB | 	rdlong	arg01, objptr
015f8     5A 00 00 FF 
015fc     38 E4 85 F1 | 	sub	objptr, ##46136
01600     77 01 00 FF 
01604     5F 14 06 F6 | 	mov	arg02, ##@LR__4856
01608     18 E2 B1 FD | 	call	#__system___string_cmp
0160c     00 FA 0D F2 | 	cmp	result1, #0 wz
01610     B4 00 90 AD |  if_e	jmp	#LR__0066
01614     5A 00 00 FF 
01618     38 E4 05 F1 | 	add	objptr, ##46136
0161c     F2 12 02 FB | 	rdlong	arg01, objptr
01620     5A 00 00 FF 
01624     38 E4 85 F1 | 	sub	objptr, ##46136
01628     77 01 00 FF 
0162c     61 32 06 F6 | 	mov	local11, ##@LR__4857
01630     19 15 02 F6 | 	mov	arg02, local11
01634     EC E1 B1 FD | 	call	#__system___string_cmp
01638     00 FA 0D F2 | 	cmp	result1, #0 wz
0163c     88 00 90 AD |  if_e	jmp	#LR__0066
01640     5A 00 00 FF 
01644     38 E4 05 F1 | 	add	objptr, ##46136
01648     F2 12 02 FB | 	rdlong	arg01, objptr
0164c     5A 00 00 FF 
01650     38 E4 85 F1 | 	sub	objptr, ##46136
01654     77 01 00 FF 
01658     63 30 06 F6 | 	mov	local10, ##@LR__4858
0165c     18 33 02 F6 | 	mov	local11, local10
01660     19 15 02 F6 | 	mov	arg02, local11
01664     BC E1 B1 FD | 	call	#__system___string_cmp
01668     00 FA 0D F2 | 	cmp	result1, #0 wz
0166c     58 00 90 AD |  if_e	jmp	#LR__0066
01670     5A 00 00 FF 
01674     38 E4 05 F1 | 	add	objptr, ##46136
01678     F2 12 02 FB | 	rdlong	arg01, objptr
0167c     5A 00 00 FF 
01680     38 E4 85 F1 | 	sub	objptr, ##46136
01684     77 01 00 FF 
01688     65 30 06 F6 | 	mov	local10, ##@LR__4859
0168c     18 15 02 F6 | 	mov	arg02, local10
01690     90 E1 B1 FD | 	call	#__system___string_cmp
01694     FD 32 0A F6 | 	mov	local11, result1 wz
01698     2C 00 90 AD |  if_e	jmp	#LR__0066
0169c     5A 00 00 FF 
016a0     38 E4 05 F1 | 	add	objptr, ##46136
016a4     F2 12 02 FB | 	rdlong	arg01, objptr
016a8     5A 00 00 FF 
016ac     38 E4 85 F1 | 	sub	objptr, ##46136
016b0     77 01 00 FF 
016b4     67 36 06 F6 | 	mov	local13, ##@LR__4860
016b8     1B 15 02 F6 | 	mov	arg02, local13
016bc     64 E1 B1 FD | 	call	#__system___string_cmp
016c0     FD 30 0A F6 | 	mov	local10, result1 wz
016c4     30 00 90 5D |  if_ne	jmp	#LR__0067
016c8                 | LR__0066
016c8     5A 00 00 FF 
016cc     3C E4 05 F1 | 	add	objptr, ##46140
016d0     F2 12 02 FB | 	rdlong	arg01, objptr
016d4     5A 00 00 FF 
016d8     3C E4 85 F1 | 	sub	objptr, ##46140
016dc     77 01 00 FF 
016e0     69 4A 06 F6 | 	mov	local23, ##@LR__4861
016e4     25 35 02 F6 | 	mov	local12, local23
016e8     1A 15 02 F6 | 	mov	arg02, local12
016ec     34 E1 B1 FD | 	call	#__system___string_cmp
016f0     FD 36 0A F6 | 	mov	local13, result1 wz
016f4     18 01 90 AD |  if_e	jmp	#LR__0070
016f8                 | LR__0067
016f8     5A 00 00 FF 
016fc     38 E4 05 F1 | 	add	objptr, ##46136
01700     F2 12 02 FB | 	rdlong	arg01, objptr
01704     5A 00 00 FF 
01708     38 E4 85 F1 | 	sub	objptr, ##46136
0170c     77 01 00 FF 
01710     6B 4A 06 F6 | 	mov	local23, ##@LR__4862
01714     25 15 02 F6 | 	mov	arg02, local23
01718     08 E1 B1 FD | 	call	#__system___string_cmp
0171c     FD 34 0A F6 | 	mov	local12, result1 wz
01720     30 00 90 5D |  if_ne	jmp	#LR__0068
01724     5A 00 00 FF 
01728     3C E4 05 F1 | 	add	objptr, ##46140
0172c     F2 12 02 FB | 	rdlong	arg01, objptr
01730     5A 00 00 FF 
01734     3C E4 85 F1 | 	sub	objptr, ##46140
01738     77 01 00 FF 
0173c     6D 44 06 F6 | 	mov	local20, ##@LR__4863
01740     22 43 02 F6 | 	mov	local19, local20
01744     21 15 02 F6 | 	mov	arg02, local19
01748     D8 E0 B1 FD | 	call	#__system___string_cmp
0174c     FD 4A 0A F6 | 	mov	local23, result1 wz
01750     BC 00 90 AD |  if_e	jmp	#LR__0070
01754                 | LR__0068
01754     5A 00 00 FF 
01758     38 E4 05 F1 | 	add	objptr, ##46136
0175c     F2 12 02 FB | 	rdlong	arg01, objptr
01760     5A 00 00 FF 
01764     38 E4 85 F1 | 	sub	objptr, ##46136
01768     77 01 00 FF 
0176c     6F 44 06 F6 | 	mov	local20, ##@LR__4864
01770     22 15 02 F6 | 	mov	arg02, local20
01774     AC E0 B1 FD | 	call	#__system___string_cmp
01778     FD 42 0A F6 | 	mov	local19, result1 wz
0177c     30 00 90 5D |  if_ne	jmp	#LR__0069
01780     5A 00 00 FF 
01784     3C E4 05 F1 | 	add	objptr, ##46140
01788     F2 12 02 FB | 	rdlong	arg01, objptr
0178c     5A 00 00 FF 
01790     3C E4 85 F1 | 	sub	objptr, ##46140
01794     77 01 00 FF 
01798     71 4C 06 F6 | 	mov	local24, ##@LR__4865
0179c     26 47 02 F6 | 	mov	local21, local24
017a0     23 15 02 F6 | 	mov	arg02, local21
017a4     7C E0 B1 FD | 	call	#__system___string_cmp
017a8     FD 44 0A F6 | 	mov	local20, result1 wz
017ac     60 00 90 AD |  if_e	jmp	#LR__0070
017b0                 | LR__0069
017b0     5A 00 00 FF 
017b4     38 E4 05 F1 | 	add	objptr, ##46136
017b8     F2 12 02 FB | 	rdlong	arg01, objptr
017bc     5A 00 00 FF 
017c0     38 E4 85 F1 | 	sub	objptr, ##46136
017c4     77 01 00 FF 
017c8     73 4E 06 F6 | 	mov	local25, ##@LR__4866
017cc     27 4D 02 F6 | 	mov	local24, local25
017d0     26 15 02 F6 | 	mov	arg02, local24
017d4     4C E0 B1 FD | 	call	#__system___string_cmp
017d8     FD 46 0A F6 | 	mov	local21, result1 wz
017dc     10 01 90 5D |  if_ne	jmp	#LR__0074
017e0     5A 00 00 FF 
017e4     3C E4 05 F1 | 	add	objptr, ##46140
017e8     F2 12 02 FB | 	rdlong	arg01, objptr
017ec     5A 00 00 FF 
017f0     3C E4 85 F1 | 	sub	objptr, ##46140
017f4     77 01 00 FF 
017f8     75 50 06 F6 | 	mov	local26, ##@LR__4867
017fc     28 4F 02 F6 | 	mov	local25, local26
01800     27 15 02 F6 | 	mov	arg02, local25
01804     1C E0 B1 FD | 	call	#__system___string_cmp
01808     FD 4C 0A F6 | 	mov	local24, result1 wz
0180c     E0 00 90 5D |  if_ne	jmp	#LR__0074
01810                 | LR__0070
01810     10 2F 02 F6 | 	mov	local09, local02
01814     03 2E 66 F0 | 	shl	local09, #3
01818     35 00 00 FF 
0181c     3C E4 05 F1 | 	add	objptr, ##27196
01820     F2 2E 02 F1 | 	add	local09, objptr
01824     24 00 00 FF 
01828     FC E5 05 F1 | 	add	objptr, ##18940
0182c     F2 12 02 FB | 	rdlong	arg01, objptr
01830     04 E4 05 F1 | 	add	objptr, #4
01834     F2 30 02 FB | 	rdlong	local10, objptr
01838     5A 00 00 FF 
0183c     3C E4 85 F1 | 	sub	objptr, ##46140
01840     18 33 02 F6 | 	mov	local11, local10
01844     19 15 02 F6 | 	mov	arg02, local11
01848     0C E0 B1 FD | 	call	#__system___string_concat
0184c     17 FB 61 FC | 	wrlong	result1, local09
01850                 | '     lparts(i).part$=s1$+s2$
01850                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
01850     10 39 02 F6 | 	mov	local14, local02
01854     01 38 06 F1 | 	add	local14, #1
01858     1D 53 02 F6 | 	mov	local27, local15
0185c     01 52 06 F1 | 	add	local27, #1
01860     97 42 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
01864                 | LR__0071
01864     29 39 52 F2 | 	cmps	local14, local27 wc
01868     7C 00 90 3D |  if_ae	jmp	#LR__0073
0186c     1C 27 02 F6 | 	mov	local05, local14
01870     01 26 06 F1 | 	add	local05, #1
01874     03 26 66 F0 | 	shl	local05, #3
01878     35 00 00 FF 
0187c     3C E4 05 F1 | 	add	objptr, ##27196
01880     F2 26 02 F1 | 	add	local05, objptr
01884     13 25 02 FB | 	rdlong	local04, local05
01888     1C 29 02 F6 | 	mov	local06, local14
0188c     01 28 06 F1 | 	add	local06, #1
01890     03 28 66 F0 | 	shl	local06, #3
01894     F2 28 02 F1 | 	add	local06, objptr
01898     04 28 06 F1 | 	add	local06, #4
0189c     14 23 02 FB | 	rdlong	local03, local06
018a0     1C 29 02 F6 | 	mov	local06, local14
018a4     03 28 66 F0 | 	shl	local06, #3
018a8     F2 32 02 F6 | 	mov	local11, objptr
018ac     F2 28 02 F1 | 	add	local06, objptr
018b0     14 25 62 FC | 	wrlong	local04, local06
018b4     1C 31 02 F6 | 	mov	local10, local14
018b8     18 37 02 F6 | 	mov	local13, local10
018bc     1B 35 02 F6 | 	mov	local12, local13
018c0     03 34 66 F0 | 	shl	local12, #3
018c4     F2 4A 02 F6 | 	mov	local23, objptr
018c8     F2 34 02 F1 | 	add	local12, objptr
018cc     04 34 06 F1 | 	add	local12, #4
018d0     1A 23 62 FC | 	wrlong	local03, local12
018d4     04 34 86 F1 | 	sub	local12, #4
018d8     01 38 06 F1 | 	add	local14, #1
018dc     35 00 00 FF 
018e0     3C E4 85 F1 | 	sub	objptr, ##27196
018e4     7C FF 9F FD | 	jmp	#LR__0071
018e8                 | LR__0072
018e8                 | LR__0073
018e8     01 20 86 F1 | 	sub	local02, #1
018ec     01 3A 86 F1 | 	sub	local15, #1
018f0                 | LR__0074
018f0     01 20 06 F1 | 	add	local02, #1
018f4     1D 21 52 F2 | 	cmps	local02, local15 wc
018f8     58 FC 9F CD |  if_b	jmp	#LR__0065
018fc                 | '  
018fc                 | ' ' 1f : now remove parts that are spaces
018fc                 | ' 
018fc                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
018fc     00 20 06 F6 | 	mov	local02, #0
01900     1D 55 02 F6 | 	mov	local28, local15
01904     01 54 06 F1 | 	add	local28, #1
01908                 | LR__0075
01908     2A 21 52 F2 | 	cmps	local02, local28 wc
0190c     50 00 90 3D |  if_ae	jmp	#LR__0076
01910     10 2F 02 F6 | 	mov	local09, local02
01914     03 2E 66 F0 | 	shl	local09, #3
01918     35 00 00 FF 
0191c     3C E4 05 F1 | 	add	objptr, ##27196
01920     F2 2E 02 F1 | 	add	local09, objptr
01924     10 33 02 F6 | 	mov	local11, local02
01928     19 31 02 F6 | 	mov	local10, local11
0192c     18 37 02 F6 | 	mov	local13, local10
01930     03 36 66 F0 | 	shl	local13, #3
01934     F2 34 02 F6 | 	mov	local12, objptr
01938     F2 36 02 F1 | 	add	local13, objptr
0193c     1B 13 02 FB | 	rdlong	arg01, local13
01940     35 00 00 FF 
01944     3C E4 85 F1 | 	sub	objptr, ##27196
01948     50 03 B2 FD | 	call	#__system__RTrim_S
0194c     FD 12 02 F6 | 	mov	arg01, result1
01950     88 02 B2 FD | 	call	#__system__LTrim_S
01954     17 FB 61 FC | 	wrlong	result1, local09
01958     01 20 06 F1 | 	add	local02, #1
0195c     A8 FF 9F FD | 	jmp	#LR__0075
01960                 | LR__0076
01960     00 20 06 F6 | 	mov	local02, #0
01964     97 8A 48 FB | 	callpa	#(@LR__0083-@LR__0077)>>2,fcache_load_ptr_
01968                 | ' 
01968                 | ' i=0
01968                 | ' do 
01968                 | LR__0077
01968                 | '   if len(lparts(i).part$)=0 then 
01968     10 2F 02 F6 | 	mov	local09, local02
0196c     17 27 02 F6 | 	mov	local05, local09
01970     03 26 66 F0 | 	shl	local05, #3
01974     35 00 00 FF 
01978     3C E4 05 F1 | 	add	objptr, ##27196
0197c     F2 26 02 F1 | 	add	local05, objptr
01980     13 13 02 FB | 	rdlong	arg01, local05
01984     35 00 00 FF 
01988     3C E4 85 F1 | 	sub	objptr, ##27196
0198c     09 2B 02 F6 | 	mov	local07, arg01
01990                 | LR__0078
01990     15 FB C9 FA | 	rdbyte	result1, local07 wz
01994     01 2A 06 51 |  if_ne	add	local07, #1
01998     F4 FF 9F 5D |  if_ne	jmp	#LR__0078
0199c     09 2B 8A F1 | 	sub	local07, arg01 wz
019a0     C4 00 90 5D |  if_ne	jmp	#LR__0082
019a4                 | '     if i=k-1 then k-=1  :  exit
019a4     1D 25 02 F6 | 	mov	local04, local15
019a8     01 24 86 F1 | 	sub	local04, #1
019ac     12 21 0A F2 | 	cmp	local02, local04 wz
019b0     01 3A 86 A1 |  if_e	sub	local15, #1
019b4     C4 00 90 AD |  if_e	jmp	#LR__0084
019b8                 | '     if i<k-1 then 
019b8     1D 25 02 F6 | 	mov	local04, local15
019bc     01 24 86 F1 | 	sub	local04, #1
019c0     12 21 52 F2 | 	cmps	local02, local04 wc
019c4     A0 00 90 3D |  if_ae	jmp	#LR__0081
019c8                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
019c8     10 39 02 F6 | 	mov	local14, local02
019cc     1D 57 02 F6 | 	mov	local29, local15
019d0     01 56 86 F1 | 	sub	local29, #1
019d4                 | LR__0079
019d4     2B 39 52 F2 | 	cmps	local14, local29 wc
019d8     80 00 90 3D |  if_ae	jmp	#LR__0080
019dc     1C 27 02 F6 | 	mov	local05, local14
019e0     01 26 06 F1 | 	add	local05, #1
019e4     03 26 66 F0 | 	shl	local05, #3
019e8     35 00 00 FF 
019ec     3C E4 05 F1 | 	add	objptr, ##27196
019f0     F2 26 02 F1 | 	add	local05, objptr
019f4     13 25 02 FB | 	rdlong	local04, local05
019f8     1C 29 02 F6 | 	mov	local06, local14
019fc     01 28 06 F1 | 	add	local06, #1
01a00     03 28 66 F0 | 	shl	local06, #3
01a04     F2 28 02 F1 | 	add	local06, objptr
01a08     04 28 06 F1 | 	add	local06, #4
01a0c     14 23 02 FB | 	rdlong	local03, local06
01a10     1C 2F 02 F6 | 	mov	local09, local14
01a14     17 29 02 F6 | 	mov	local06, local09
01a18     03 28 66 F0 | 	shl	local06, #3
01a1c     F2 32 02 F6 | 	mov	local11, objptr
01a20     F2 28 02 F1 | 	add	local06, objptr
01a24     14 25 62 FC | 	wrlong	local04, local06
01a28     1C 31 02 F6 | 	mov	local10, local14
01a2c     18 37 02 F6 | 	mov	local13, local10
01a30     1B 35 02 F6 | 	mov	local12, local13
01a34     03 34 66 F0 | 	shl	local12, #3
01a38     F2 4A 02 F6 | 	mov	local23, objptr
01a3c     F2 34 02 F1 | 	add	local12, objptr
01a40     04 34 06 F1 | 	add	local12, #4
01a44     1A 23 62 FC | 	wrlong	local03, local12
01a48     04 34 86 F1 | 	sub	local12, #4
01a4c     01 38 06 F1 | 	add	local14, #1
01a50     35 00 00 FF 
01a54     3C E4 85 F1 | 	sub	objptr, ##27196
01a58     78 FF 9F FD | 	jmp	#LR__0079
01a5c                 | LR__0080
01a5c     01 3A 86 F1 | 	sub	local15, #1
01a60                 | '       if i>0 then i-=1 
01a60     01 20 56 F2 | 	cmps	local02, #1 wc
01a64     01 20 86 31 |  if_ae	sub	local02, #1
01a68                 | LR__0081
01a68                 | LR__0082
01a68     01 20 06 F1 | 	add	local02, #1
01a6c     1D 25 02 F6 | 	mov	local04, local15
01a70     01 24 86 F1 | 	sub	local04, #1
01a74     12 21 5A F2 | 	cmps	local02, local04 wcz
01a78     EC FE 9F ED |  if_be	jmp	#LR__0077
01a7c                 | LR__0083
01a7c                 | LR__0084
01a7c                 | ' 
01a7c                 | ' ' 1g: lowercase all that is not a string
01a7c                 | ' 
01a7c                 | ' for j=0 to k-1
01a7c     00 38 06 F6 | 	mov	local14, #0
01a80     1D 59 02 F6 | 	mov	local30, local15
01a84                 | LR__0085
01a84     2C 39 52 F2 | 	cmps	local14, local30 wc
01a88     C0 00 90 3D |  if_ae	jmp	#LR__0088
01a8c                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
01a8c     1C 27 02 F6 | 	mov	local05, local14
01a90     03 26 66 F0 | 	shl	local05, #3
01a94     35 00 00 FF 
01a98     3C E4 05 F1 | 	add	objptr, ##27196
01a9c     F2 26 02 F1 | 	add	local05, objptr
01aa0     13 13 02 FB | 	rdlong	arg01, local05
01aa4     01 14 06 F6 | 	mov	arg02, #1
01aa8     35 00 00 FF 
01aac     3C E4 85 F1 | 	sub	objptr, ##27196
01ab0     58 FD B1 FD | 	call	#__system__Left_S
01ab4     FD 12 02 F6 | 	mov	arg01, result1
01ab8     77 01 00 FF 
01abc     77 14 06 F6 | 	mov	arg02, ##@LR__4868
01ac0     60 DD B1 FD | 	call	#__system___string_cmp
01ac4     00 FA 0D F2 | 	cmp	result1, #0 wz
01ac8     40 00 90 5D |  if_ne	jmp	#LR__0086
01acc     1C 29 02 F6 | 	mov	local06, local14
01ad0     03 28 66 F0 | 	shl	local06, #3
01ad4     35 00 00 FF 
01ad8     3C E4 05 F1 | 	add	objptr, ##27196
01adc     F2 28 02 F1 | 	add	local06, objptr
01ae0     14 13 02 FB | 	rdlong	arg01, local06
01ae4     01 14 06 F6 | 	mov	arg02, #1
01ae8     35 00 00 FF 
01aec     3C E4 85 F1 | 	sub	objptr, ##27196
01af0     A0 FD B1 FD | 	call	#__system__Right_S
01af4     FD 12 02 F6 | 	mov	arg01, result1
01af8     77 01 00 FF 
01afc     79 14 06 F6 | 	mov	arg02, ##@LR__4869
01b00     20 DD B1 FD | 	call	#__system___string_cmp
01b04     00 FA 0D F2 | 	cmp	result1, #0 wz
01b08     38 00 90 AD |  if_e	jmp	#LR__0087
01b0c                 | LR__0086
01b0c     1C 2F 02 F6 | 	mov	local09, local14
01b10     03 2E 66 F0 | 	shl	local09, #3
01b14     35 00 00 FF 
01b18     3C E4 05 F1 | 	add	objptr, ##27196
01b1c     F2 2E 02 F1 | 	add	local09, objptr
01b20     1C 37 02 F6 | 	mov	local13, local14
01b24     03 36 66 F0 | 	shl	local13, #3
01b28     F2 34 02 F6 | 	mov	local12, objptr
01b2c     F2 36 02 F1 | 	add	local13, objptr
01b30     1B 13 02 FB | 	rdlong	arg01, local13
01b34     35 00 00 FF 
01b38     3C E4 85 F1 | 	sub	objptr, ##27196
01b3c     DC FF B1 FD | 	call	#__system__LCase_S
01b40     17 FB 61 FC | 	wrlong	result1, local09
01b44                 | LR__0087
01b44     01 38 06 F1 | 	add	local14, #1
01b48     38 FF 9F FD | 	jmp	#LR__0085
01b4c                 | LR__0088
01b4c                 | ' 
01b4c                 | ' '                                                         for i=0 to k-1 : print lparts(i).part$,: next i : print
01b4c                 | ' 
01b4c                 | ' for i=0 to k: lparts(i).token=-1: next i
01b4c     00 20 06 F6 | 	mov	local02, #0
01b50     1D 5B 02 F6 | 	mov	local31, local15
01b54     01 5A 06 F1 | 	add	local31, #1
01b58     97 1C 48 FB | 	callpa	#(@LR__0090-@LR__0089)>>2,fcache_load_ptr_
01b5c                 | LR__0089
01b5c     2D 21 52 F2 | 	cmps	local02, local31 wc
01b60     30 00 90 3D |  if_ae	jmp	#LR__0091
01b64     10 2F 02 F6 | 	mov	local09, local02
01b68     03 2E 66 F0 | 	shl	local09, #3
01b6c     35 00 00 FF 
01b70     3C E4 05 F1 | 	add	objptr, ##27196
01b74     F2 2E 02 F1 | 	add	local09, objptr
01b78     04 2E 06 F1 | 	add	local09, #4
01b7c     FF FF FF FF 
01b80     17 FF 6B FC | 	wrlong	##-1, local09
01b84     01 20 06 F1 | 	add	local02, #1
01b88     35 00 00 FF 
01b8c     3C E4 85 F1 | 	sub	objptr, ##27196
01b90     C8 FF 9F FD | 	jmp	#LR__0089
01b94                 | LR__0090
01b94                 | LR__0091
01b94                 | ' 
01b94                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
01b94                 | ' 
01b94                 | ' if len(lparts(0).part$)=0 then goto 101				' empty line, nothing to do
01b94     35 00 00 FF 
01b98     3C E4 05 F1 | 	add	objptr, ##27196
01b9c     F2 12 02 FB | 	rdlong	arg01, objptr
01ba0     35 00 00 FF 
01ba4     3C E4 85 F1 | 	sub	objptr, ##27196
01ba8     09 2B 02 F6 | 	mov	local07, arg01
01bac     97 06 48 FB | 	callpa	#(@LR__0093-@LR__0092)>>2,fcache_load_ptr_
01bb0                 | LR__0092
01bb0     15 FB C9 FA | 	rdbyte	result1, local07 wz
01bb4     01 2A 06 51 |  if_ne	add	local07, #1
01bb8     F4 FF 9F 5D |  if_ne	jmp	#LR__0092
01bbc                 | LR__0093
01bbc     09 2B 8A F1 | 	sub	local07, arg01 wz
01bc0     7C 17 90 AD |  if_e	jmp	#LR__0149
01bc4                 | ' 
01bc4                 | ' 
01bc4                 | ' if isdec(lparts(0).part$) then let addptr=1 else let addptr=0
01bc4     35 00 00 FF 
01bc8     3C E4 05 F1 | 	add	objptr, ##27196
01bcc     F2 12 02 FB | 	rdlong	arg01, objptr
01bd0     35 00 00 FF 
01bd4     3C E4 85 F1 | 	sub	objptr, ##27196
01bd8     40 3A B0 FD | 	call	#_isdec
01bdc     00 FA 0D F2 | 	cmp	result1, #0 wz
01be0     5A 00 00 5F 
01be4     40 E4 05 51 |  if_ne	add	objptr, ##46144
01be8     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01bec     5A 00 00 FF 
01bf0     40 E4 E5 F3 | 	sumnz	objptr, ##46144
01bf4     F2 00 68 AC |  if_e	wrlong	#0, objptr
01bf8     5A 00 00 AF 
01bfc     40 E4 85 A1 |  if_e	sub	objptr, ##46144
01c00     5A 00 00 FF 
01c04     40 E4 05 F1 | 	add	objptr, ##46144
01c08     F2 26 02 FB | 	rdlong	local05, objptr
01c0c     03 26 66 F0 | 	shl	local05, #3
01c10     25 00 00 FF 
01c14     04 E4 85 F1 | 	sub	objptr, ##18948
01c18     F2 26 02 F1 | 	add	local05, objptr
01c1c     13 33 02 FB | 	rdlong	local11, local05
01c20     25 00 00 FF 
01c24     08 E4 05 F1 | 	add	objptr, ##18952
01c28     F2 32 62 FC | 	wrlong	local11, objptr
01c2c     04 E4 85 F1 | 	sub	objptr, #4
01c30     F2 32 02 FB | 	rdlong	local11, objptr
01c34     03 32 66 F0 | 	shl	local11, #3
01c38     25 00 00 FF 
01c3c     04 E4 85 F1 | 	sub	objptr, ##18948
01c40     F2 30 02 F6 | 	mov	local10, objptr
01c44     F2 32 02 F1 | 	add	local11, objptr
01c48     19 15 02 FB | 	rdlong	arg02, local11
01c4c     77 01 00 FF 
01c50     7B 16 06 F6 | 	mov	arg03, ##@LR__4870
01c54     01 12 06 F6 | 	mov	arg01, #1
01c58     35 00 00 FF 
01c5c     3C E4 85 F1 | 	sub	objptr, ##27196
01c60     F0 00 B2 FD | 	call	#__system__Instr
01c64     5A 00 00 FF 
01c68     48 E4 05 F1 | 	add	objptr, ##46152
01c6c     F2 FA 61 FC | 	wrlong	result1, objptr
01c70                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 
01c70     FD 24 02 F6 | 	mov	local04, result1
01c74     5A 00 00 FF 
01c78     48 E4 85 F1 | 	sub	objptr, ##46152
01c7c     01 24 56 F2 | 	cmps	local04, #1 wc
01c80     DC 01 90 CD |  if_b	jmp	#LR__0100
01c84     5A 00 00 FF 
01c88     40 E4 05 F1 | 	add	objptr, ##46144
01c8c     F2 30 02 FB | 	rdlong	local10, objptr
01c90     03 30 66 F0 | 	shl	local10, #3
01c94     25 00 00 FF 
01c98     04 E4 85 F1 | 	sub	objptr, ##18948
01c9c     F2 36 02 F6 | 	mov	local13, objptr
01ca0     F2 30 02 F1 | 	add	local10, objptr
01ca4     18 13 02 FB | 	rdlong	arg01, local10
01ca8     35 00 00 FF 
01cac     3C E4 85 F1 | 	sub	objptr, ##27196
01cb0     09 2B 02 F6 | 	mov	local07, arg01
01cb4     97 06 48 FB | 	callpa	#(@LR__0095-@LR__0094)>>2,fcache_load_ptr_
01cb8                 | LR__0094
01cb8     15 FB C9 FA | 	rdbyte	result1, local07 wz
01cbc     01 2A 06 51 |  if_ne	add	local07, #1
01cc0     F4 FF 9F 5D |  if_ne	jmp	#LR__0094
01cc4                 | LR__0095
01cc4     09 2B 82 F1 | 	sub	local07, arg01
01cc8     15 2F 02 F6 | 	mov	local09, local07
01ccc     5A 00 00 FF 
01cd0     48 E4 05 F1 | 	add	objptr, ##46152
01cd4     F2 26 02 FB | 	rdlong	local05, objptr
01cd8     5A 00 00 FF 
01cdc     48 E4 85 F1 | 	sub	objptr, ##46152
01ce0     17 27 52 F2 | 	cmps	local05, local09 wc
01ce4     78 01 90 3D |  if_ae	jmp	#LR__0100
01ce8     01 3A 06 F1 | 	add	local15, #1
01cec                 | '   k+=1
01cec                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01cec     1D 21 02 F6 | 	mov	local02, local15
01cf0     5A 00 00 FF 
01cf4     40 E4 05 F1 | 	add	objptr, ##46144
01cf8     F2 5C 02 FB | 	rdlong	local32, objptr
01cfc     01 5C 06 F1 | 	add	local32, #1
01d00     25 00 00 FF 
01d04     04 E4 85 F1 | 	sub	objptr, ##18948
01d08     97 2E 48 FB | 	callpa	#(@LR__0097-@LR__0096)>>2,fcache_load_ptr_
01d0c                 | LR__0096
01d0c     10 29 02 F6 | 	mov	local06, local02
01d10     01 28 86 F1 | 	sub	local06, #1
01d14     03 28 66 F0 | 	shl	local06, #3
01d18     F2 28 02 F1 | 	add	local06, objptr
01d1c     14 23 02 FB | 	rdlong	local03, local06
01d20     10 33 02 F6 | 	mov	local11, local02
01d24     01 32 86 F1 | 	sub	local11, #1
01d28     03 32 66 F0 | 	shl	local11, #3
01d2c     F2 32 02 F1 | 	add	local11, objptr
01d30     04 32 06 F1 | 	add	local11, #4
01d34     19 2F 02 FB | 	rdlong	local09, local11
01d38     10 33 02 F6 | 	mov	local11, local02
01d3c     03 32 66 F0 | 	shl	local11, #3
01d40     F2 32 02 F1 | 	add	local11, objptr
01d44     19 23 62 FC | 	wrlong	local03, local11
01d48     10 4B 02 F6 | 	mov	local23, local02
01d4c     03 4A 66 F0 | 	shl	local23, #3
01d50     F2 4A 02 F1 | 	add	local23, objptr
01d54     04 4A 06 F1 | 	add	local23, #4
01d58     25 2F 62 FC | 	wrlong	local09, local23
01d5c     01 20 86 F1 | 	sub	local02, #1
01d60     2E 21 52 F2 | 	cmps	local02, local32 wc
01d64     A4 FF 9F 3D |  if_ae	jmp	#LR__0096
01d68                 | LR__0097
01d68     25 00 00 FF 
01d6c     04 E4 05 F1 | 	add	objptr, ##18948
01d70     F2 4A 02 FB | 	rdlong	local23, objptr
01d74     25 27 02 F6 | 	mov	local05, local23
01d78     01 26 06 F1 | 	add	local05, #1
01d7c     03 26 66 F0 | 	shl	local05, #3
01d80     25 00 00 FF 
01d84     04 E4 85 F1 | 	sub	objptr, ##18948
01d88     F2 26 02 F1 | 	add	local05, objptr
01d8c     03 4A 66 F0 | 	shl	local23, #3
01d90     F2 4A 02 F1 | 	add	local23, objptr
01d94     25 33 02 FB | 	rdlong	local11, local23
01d98     25 00 00 FF 
01d9c     04 E4 05 F1 | 	add	objptr, ##18948
01da0     F2 44 02 FB | 	rdlong	local20, objptr
01da4     22 47 02 F6 | 	mov	local21, local20
01da8     03 46 66 F0 | 	shl	local21, #3
01dac     25 00 00 FF 
01db0     04 E4 85 F1 | 	sub	objptr, ##18948
01db4     F2 4C 02 F6 | 	mov	local24, objptr
01db8     F2 46 02 F1 | 	add	local21, objptr
01dbc     23 13 02 FB | 	rdlong	arg01, local21
01dc0     35 00 00 FF 
01dc4     3C E4 85 F1 | 	sub	objptr, ##27196
01dc8     09 2B 02 F6 | 	mov	local07, arg01
01dcc     97 06 48 FB | 	callpa	#(@LR__0099-@LR__0098)>>2,fcache_load_ptr_
01dd0                 | LR__0098
01dd0     15 FB C9 FA | 	rdbyte	result1, local07 wz
01dd4     01 2A 06 51 |  if_ne	add	local07, #1
01dd8     F4 FF 9F 5D |  if_ne	jmp	#LR__0098
01ddc                 | LR__0099
01ddc     09 2B 82 F1 | 	sub	local07, arg01
01de0     15 15 02 F6 | 	mov	arg02, local07
01de4     5A 00 00 FF 
01de8     48 E4 05 F1 | 	add	objptr, ##46152
01dec     F2 4A 02 FB | 	rdlong	local23, objptr
01df0     5A 00 00 FF 
01df4     48 E4 85 F1 | 	sub	objptr, ##46152
01df8     25 15 82 F1 | 	sub	arg02, local23
01dfc     19 13 02 F6 | 	mov	arg01, local11
01e00     90 FA B1 FD | 	call	#__system__Right_S
01e04     13 FB 61 FC | 	wrlong	result1, local05
01e08     5A 00 00 FF 
01e0c     40 E4 05 F1 | 	add	objptr, ##46144
01e10     F2 34 02 FB | 	rdlong	local12, objptr
01e14     1A 27 02 F6 | 	mov	local05, local12
01e18     03 26 66 F0 | 	shl	local05, #3
01e1c     25 00 00 FF 
01e20     04 E4 85 F1 | 	sub	objptr, ##18948
01e24     F2 26 02 F1 | 	add	local05, objptr
01e28     1A 4B 02 F6 | 	mov	local23, local12
01e2c     03 4A 66 F0 | 	shl	local23, #3
01e30     F2 42 02 F6 | 	mov	local19, objptr
01e34     F2 4A 02 F1 | 	add	local23, objptr
01e38     25 13 02 FB | 	rdlong	arg01, local23
01e3c     25 00 00 FF 
01e40     0C E4 05 F1 | 	add	objptr, ##18956
01e44     F2 36 02 FB | 	rdlong	local13, objptr
01e48     5A 00 00 FF 
01e4c     48 E4 85 F1 | 	sub	objptr, ##46152
01e50     1B 31 02 F6 | 	mov	local10, local13
01e54     18 15 02 F6 | 	mov	arg02, local10
01e58     B0 F9 B1 FD | 	call	#__system__Left_S
01e5c     13 FB 61 FC | 	wrlong	result1, local05
01e60                 | LR__0100
01e60                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then
01e60     5A 00 00 FF 
01e64     40 E4 05 F1 | 	add	objptr, ##46144
01e68     F2 28 02 FB | 	rdlong	local06, objptr
01e6c     03 28 66 F0 | 	shl	local06, #3
01e70     25 00 00 FF 
01e74     04 E4 85 F1 | 	sub	objptr, ##18948
01e78     F2 28 02 F1 | 	add	local06, objptr
01e7c     14 13 02 FB | 	rdlong	arg01, local06
01e80     01 14 06 F6 | 	mov	arg02, #1
01e84     35 00 00 FF 
01e88     3C E4 85 F1 | 	sub	objptr, ##27196
01e8c     7C F9 B1 FD | 	call	#__system__Left_S
01e90     FD 12 02 F6 | 	mov	arg01, result1
01e94     77 01 00 FF 
01e98     7D 14 06 F6 | 	mov	arg02, ##@LR__4871
01e9c     84 D9 B1 FD | 	call	#__system___string_cmp
01ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
01ea4     9C 01 90 5D |  if_ne	jmp	#LR__0107
01ea8     5A 00 00 FF 
01eac     40 E4 05 F1 | 	add	objptr, ##46144
01eb0     F2 32 02 FB | 	rdlong	local11, objptr
01eb4     03 32 66 F0 | 	shl	local11, #3
01eb8     25 00 00 FF 
01ebc     04 E4 85 F1 | 	sub	objptr, ##18948
01ec0     F2 30 02 F6 | 	mov	local10, objptr
01ec4     F2 32 02 F1 | 	add	local11, objptr
01ec8     19 13 02 FB | 	rdlong	arg01, local11
01ecc     35 00 00 FF 
01ed0     3C E4 85 F1 | 	sub	objptr, ##27196
01ed4     09 2B 02 F6 | 	mov	local07, arg01
01ed8     97 06 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01edc                 | LR__0101
01edc     15 FB C9 FA | 	rdbyte	result1, local07 wz
01ee0     01 2A 06 51 |  if_ne	add	local07, #1
01ee4     F4 FF 9F 5D |  if_ne	jmp	#LR__0101
01ee8                 | LR__0102
01ee8     09 2B 82 F1 | 	sub	local07, arg01
01eec     02 2A 56 F2 | 	cmps	local07, #2 wc
01ef0     50 01 90 CD |  if_b	jmp	#LR__0107
01ef4     01 3A 06 F1 | 	add	local15, #1
01ef8                 | '   k+=1
01ef8                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01ef8     1D 21 02 F6 | 	mov	local02, local15
01efc     5A 00 00 FF 
01f00     40 E4 05 F1 | 	add	objptr, ##46144
01f04     F2 5E 02 FB | 	rdlong	local33, objptr
01f08     01 5E 06 F1 | 	add	local33, #1
01f0c     25 00 00 FF 
01f10     04 E4 85 F1 | 	sub	objptr, ##18948
01f14     97 2E 48 FB | 	callpa	#(@LR__0104-@LR__0103)>>2,fcache_load_ptr_
01f18                 | LR__0103
01f18     10 29 02 F6 | 	mov	local06, local02
01f1c     01 28 86 F1 | 	sub	local06, #1
01f20     03 28 66 F0 | 	shl	local06, #3
01f24     F2 28 02 F1 | 	add	local06, objptr
01f28     14 23 02 FB | 	rdlong	local03, local06
01f2c     10 33 02 F6 | 	mov	local11, local02
01f30     01 32 86 F1 | 	sub	local11, #1
01f34     03 32 66 F0 | 	shl	local11, #3
01f38     F2 32 02 F1 | 	add	local11, objptr
01f3c     04 32 06 F1 | 	add	local11, #4
01f40     19 2F 02 FB | 	rdlong	local09, local11
01f44     10 33 02 F6 | 	mov	local11, local02
01f48     03 32 66 F0 | 	shl	local11, #3
01f4c     F2 32 02 F1 | 	add	local11, objptr
01f50     19 23 62 FC | 	wrlong	local03, local11
01f54     10 4B 02 F6 | 	mov	local23, local02
01f58     03 4A 66 F0 | 	shl	local23, #3
01f5c     F2 4A 02 F1 | 	add	local23, objptr
01f60     04 4A 06 F1 | 	add	local23, #4
01f64     25 2F 62 FC | 	wrlong	local09, local23
01f68     01 20 86 F1 | 	sub	local02, #1
01f6c     2F 21 52 F2 | 	cmps	local02, local33 wc
01f70     A4 FF 9F 3D |  if_ae	jmp	#LR__0103
01f74                 | LR__0104
01f74     25 00 00 FF 
01f78     04 E4 05 F1 | 	add	objptr, ##18948
01f7c     F2 4A 02 FB | 	rdlong	local23, objptr
01f80     25 27 02 F6 | 	mov	local05, local23
01f84     01 26 06 F1 | 	add	local05, #1
01f88     03 26 66 F0 | 	shl	local05, #3
01f8c     25 00 00 FF 
01f90     04 E4 85 F1 | 	sub	objptr, ##18948
01f94     F2 26 02 F1 | 	add	local05, objptr
01f98     03 4A 66 F0 | 	shl	local23, #3
01f9c     F2 4A 02 F1 | 	add	local23, objptr
01fa0     25 33 02 FB | 	rdlong	local11, local23
01fa4     25 00 00 FF 
01fa8     04 E4 05 F1 | 	add	objptr, ##18948
01fac     F2 42 02 FB | 	rdlong	local19, objptr
01fb0     21 4B 02 F6 | 	mov	local23, local19
01fb4     25 45 02 F6 | 	mov	local20, local23
01fb8     22 47 02 F6 | 	mov	local21, local20
01fbc     03 46 66 F0 | 	shl	local21, #3
01fc0     25 00 00 FF 
01fc4     04 E4 85 F1 | 	sub	objptr, ##18948
01fc8     F2 4C 02 F6 | 	mov	local24, objptr
01fcc     F2 46 02 F1 | 	add	local21, objptr
01fd0     23 13 02 FB | 	rdlong	arg01, local21
01fd4     35 00 00 FF 
01fd8     3C E4 85 F1 | 	sub	objptr, ##27196
01fdc     09 2B 02 F6 | 	mov	local07, arg01
01fe0     97 06 48 FB | 	callpa	#(@LR__0106-@LR__0105)>>2,fcache_load_ptr_
01fe4                 | LR__0105
01fe4     15 FB C9 FA | 	rdbyte	result1, local07 wz
01fe8     01 2A 06 51 |  if_ne	add	local07, #1
01fec     F4 FF 9F 5D |  if_ne	jmp	#LR__0105
01ff0                 | LR__0106
01ff0     09 2B 82 F1 | 	sub	local07, arg01
01ff4     15 35 02 F6 | 	mov	local12, local07
01ff8     1A 37 02 F6 | 	mov	local13, local12
01ffc     01 36 86 F1 | 	sub	local13, #1
02000     1B 31 02 F6 | 	mov	local10, local13
02004     19 13 02 F6 | 	mov	arg01, local11
02008     18 15 02 F6 | 	mov	arg02, local10
0200c     84 F8 B1 FD | 	call	#__system__Right_S
02010     13 FB 61 FC | 	wrlong	result1, local05
02014     5A 00 00 FF 
02018     40 E4 05 F1 | 	add	objptr, ##46144
0201c     F2 26 02 FB | 	rdlong	local05, objptr
02020     03 26 66 F0 | 	shl	local05, #3
02024     25 00 00 FF 
02028     04 E4 85 F1 | 	sub	objptr, ##18948
0202c     F2 26 02 F1 | 	add	local05, objptr
02030     77 01 00 FF 
02034     7F 32 06 F6 | 	mov	local11, ##@LR__4872
02038     13 33 62 FC | 	wrlong	local11, local05
0203c     35 00 00 FF 
02040     3C E4 85 F1 | 	sub	objptr, ##27196
02044                 | LR__0107
02044     5A 00 00 FF 
02048     40 E4 05 F1 | 	add	objptr, ##46144
0204c     F2 26 02 FB | 	rdlong	local05, objptr
02050     03 26 66 F0 | 	shl	local05, #3
02054     25 00 00 FF 
02058     04 E4 85 F1 | 	sub	objptr, ##18948
0205c     F2 26 02 F1 | 	add	local05, objptr
02060     13 33 02 FB | 	rdlong	local11, local05
02064     25 00 00 FF 
02068     08 E4 05 F1 | 	add	objptr, ##18952
0206c     F2 32 62 FC | 	wrlong	local11, objptr
02070                 | ' 
02070                 | ' ' process the case when simple load or save is called without ""
02070                 | ' 
02070                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02070     5A 00 00 FF 
02074     44 E4 85 F1 | 	sub	objptr, ##46148
02078     77 01 00 FF 
0207c     81 14 06 F6 | 	mov	arg02, ##@LR__4873
02080     19 13 02 F6 | 	mov	arg01, local11
02084     9C D7 B1 FD | 	call	#__system___string_cmp
02088     00 FA 0D F2 | 	cmp	result1, #0 wz
0208c     50 00 90 AD |  if_e	jmp	#LR__0108
02090     5A 00 00 FF 
02094     44 E4 05 F1 | 	add	objptr, ##46148
02098     F2 12 02 FB | 	rdlong	arg01, objptr
0209c     5A 00 00 FF 
020a0     44 E4 85 F1 | 	sub	objptr, ##46148
020a4     77 01 00 FF 
020a8     87 14 06 F6 | 	mov	arg02, ##@LR__4874
020ac     74 D7 B1 FD | 	call	#__system___string_cmp
020b0     00 FA 0D F2 | 	cmp	result1, #0 wz
020b4     28 00 90 AD |  if_e	jmp	#LR__0108
020b8     5A 00 00 FF 
020bc     44 E4 05 F1 | 	add	objptr, ##46148
020c0     F2 12 02 FB | 	rdlong	arg01, objptr
020c4     5A 00 00 FF 
020c8     44 E4 85 F1 | 	sub	objptr, ##46148
020cc     77 01 00 FF 
020d0     8E 14 06 F6 | 	mov	arg02, ##@LR__4875
020d4     4C D7 B1 FD | 	call	#__system___string_cmp
020d8     00 FA 0D F2 | 	cmp	result1, #0 wz
020dc     48 01 90 5D |  if_ne	jmp	#LR__0111
020e0                 | LR__0108
020e0                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(addptr+1).token=token_decimal
020e0     5A 00 00 FF 
020e4     40 E4 05 F1 | 	add	objptr, ##46144
020e8     F2 28 02 FB | 	rdlong	local06, objptr
020ec     01 28 06 F1 | 	add	local06, #1
020f0     03 28 66 F0 | 	shl	local06, #3
020f4     25 00 00 FF 
020f8     04 E4 85 F1 | 	sub	objptr, ##18948
020fc     F2 28 02 F1 | 	add	local06, objptr
02100     14 13 02 FB | 	rdlong	arg01, local06
02104     77 01 00 FF 
02108     94 14 06 F6 | 	mov	arg02, ##@LR__4876
0210c     35 00 00 FF 
02110     3C E4 85 F1 | 	sub	objptr, ##27196
02114     0C D7 B1 FD | 	call	#__system___string_cmp
02118     00 FA 0D F2 | 	cmp	result1, #0 wz
0211c     60 00 90 5D |  if_ne	jmp	#LR__0109
02120     5A 00 00 FF 
02124     40 E4 05 F1 | 	add	objptr, ##46144
02128     F2 26 02 FB | 	rdlong	local05, objptr
0212c     01 26 06 F1 | 	add	local05, #1
02130     03 26 66 F0 | 	shl	local05, #3
02134     25 00 00 FF 
02138     04 E4 85 F1 | 	sub	objptr, ##18948
0213c     F2 26 02 F1 | 	add	local05, objptr
02140     77 01 00 FF 
02144     97 32 06 F6 | 	mov	local11, ##@LR__4877
02148     13 33 62 FC | 	wrlong	local11, local05
0214c     25 00 00 FF 
02150     04 E4 05 F1 | 	add	objptr, ##18948
02154     F2 26 02 FB | 	rdlong	local05, objptr
02158     01 26 06 F1 | 	add	local05, #1
0215c     03 26 66 F0 | 	shl	local05, #3
02160     25 00 00 FF 
02164     04 E4 85 F1 | 	sub	objptr, ##18948
02168     F2 26 02 F1 | 	add	local05, objptr
0216c     04 26 06 F1 | 	add	local05, #4
02170     01 00 80 FF 
02174     13 01 68 FC | 	wrlong	##512, local05
02178     35 00 00 FF 
0217c     3C E4 85 F1 | 	sub	objptr, ##27196
02180                 | LR__0109
02180                 | '   if lparts(addptr+1).part$="off" then   lparts(addptr+1).part$="0" :lparts(addptr+1).token=token_decimal
02180     5A 00 00 FF 
02184     40 E4 05 F1 | 	add	objptr, ##46144
02188     F2 28 02 FB | 	rdlong	local06, objptr
0218c     01 28 06 F1 | 	add	local06, #1
02190     03 28 66 F0 | 	shl	local06, #3
02194     25 00 00 FF 
02198     04 E4 85 F1 | 	sub	objptr, ##18948
0219c     F2 32 02 F6 | 	mov	local11, objptr
021a0     F2 28 02 F1 | 	add	local06, objptr
021a4     14 13 02 FB | 	rdlong	arg01, local06
021a8     77 01 00 FF 
021ac     99 14 06 F6 | 	mov	arg02, ##@LR__4878
021b0     35 00 00 FF 
021b4     3C E4 85 F1 | 	sub	objptr, ##27196
021b8     68 D6 B1 FD | 	call	#__system___string_cmp
021bc     00 FA 0D F2 | 	cmp	result1, #0 wz
021c0     64 00 90 5D |  if_ne	jmp	#LR__0110
021c4     5A 00 00 FF 
021c8     40 E4 05 F1 | 	add	objptr, ##46144
021cc     F2 26 02 FB | 	rdlong	local05, objptr
021d0     01 26 06 F1 | 	add	local05, #1
021d4     03 26 66 F0 | 	shl	local05, #3
021d8     25 00 00 FF 
021dc     04 E4 85 F1 | 	sub	objptr, ##18948
021e0     F2 26 02 F1 | 	add	local05, objptr
021e4     77 01 00 FF 
021e8     9D 32 06 F6 | 	mov	local11, ##@LR__4879
021ec     13 33 62 FC | 	wrlong	local11, local05
021f0     25 00 00 FF 
021f4     04 E4 05 F1 | 	add	objptr, ##18948
021f8     F2 26 02 FB | 	rdlong	local05, objptr
021fc     01 26 06 F1 | 	add	local05, #1
02200     03 26 66 F0 | 	shl	local05, #3
02204     25 00 00 FF 
02208     04 E4 85 F1 | 	sub	objptr, ##18948
0220c     F2 26 02 F1 | 	add	local05, objptr
02210     09 32 C6 F9 | 	decod	local11, #9
02214     04 26 06 F1 | 	add	local05, #4
02218     01 00 80 FF 
0221c     13 01 68 FC | 	wrlong	##512, local05
02220     35 00 00 FF 
02224     3C E4 85 F1 | 	sub	objptr, ##27196
02228                 | LR__0110
02228                 | LR__0111
02228                 | ' if (lp$="mode" orelse lp$="m.") then 
02228     5A 00 00 FF 
0222c     44 E4 05 F1 | 	add	objptr, ##46148
02230     F2 12 02 FB | 	rdlong	arg01, objptr
02234     5A 00 00 FF 
02238     44 E4 85 F1 | 	sub	objptr, ##46148
0223c     77 01 00 FF 
02240     9F 14 06 F6 | 	mov	arg02, ##@LR__4880
02244     DC D5 B1 FD | 	call	#__system___string_cmp
02248     00 FA 0D F2 | 	cmp	result1, #0 wz
0224c     28 00 90 AD |  if_e	jmp	#LR__0112
02250     5A 00 00 FF 
02254     44 E4 05 F1 | 	add	objptr, ##46148
02258     F2 12 02 FB | 	rdlong	arg01, objptr
0225c     5A 00 00 FF 
02260     44 E4 85 F1 | 	sub	objptr, ##46148
02264     77 01 00 FF 
02268     A4 14 06 F6 | 	mov	arg02, ##@LR__4881
0226c     B4 D5 B1 FD | 	call	#__system___string_cmp
02270     00 FA 0D F2 | 	cmp	result1, #0 wz
02274     48 02 90 5D |  if_ne	jmp	#LR__0118
02278                 | LR__0112
02278                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"  
02278     5A 00 00 FF 
0227c     40 E4 05 F1 | 	add	objptr, ##46144
02280     F2 28 02 FB | 	rdlong	local06, objptr
02284     01 28 06 F1 | 	add	local06, #1
02288     03 28 66 F0 | 	shl	local06, #3
0228c     25 00 00 FF 
02290     04 E4 85 F1 | 	sub	objptr, ##18948
02294     F2 28 02 F1 | 	add	local06, objptr
02298     14 13 02 FB | 	rdlong	arg01, local06
0229c     77 01 00 FF 
022a0     A7 14 06 F6 | 	mov	arg02, ##@LR__4882
022a4     35 00 00 FF 
022a8     3C E4 85 F1 | 	sub	objptr, ##27196
022ac     74 D5 B1 FD | 	call	#__system___string_cmp
022b0     00 FA 0D F2 | 	cmp	result1, #0 wz
022b4     34 00 90 5D |  if_ne	jmp	#LR__0113
022b8     5A 00 00 FF 
022bc     40 E4 05 F1 | 	add	objptr, ##46144
022c0     F2 26 02 FB | 	rdlong	local05, objptr
022c4     01 26 06 F1 | 	add	local05, #1
022c8     03 26 66 F0 | 	shl	local05, #3
022cc     25 00 00 FF 
022d0     04 E4 85 F1 | 	sub	objptr, ##18948
022d4     F2 26 02 F1 | 	add	local05, objptr
022d8     77 01 00 FF 
022dc     AD 32 06 F6 | 	mov	local11, ##@LR__4883
022e0     13 33 62 FC | 	wrlong	local11, local05
022e4     35 00 00 FF 
022e8     3C E4 85 F1 | 	sub	objptr, ##27196
022ec                 | LR__0113
022ec                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
022ec     5A 00 00 FF 
022f0     40 E4 05 F1 | 	add	objptr, ##46144
022f4     F2 28 02 FB | 	rdlong	local06, objptr
022f8     01 28 06 F1 | 	add	local06, #1
022fc     03 28 66 F0 | 	shl	local06, #3
02300     25 00 00 FF 
02304     04 E4 85 F1 | 	sub	objptr, ##18948
02308     F2 28 02 F1 | 	add	local06, objptr
0230c     14 13 02 FB | 	rdlong	arg01, local06
02310     77 01 00 FF 
02314     AF 14 06 F6 | 	mov	arg02, ##@LR__4884
02318     35 00 00 FF 
0231c     3C E4 85 F1 | 	sub	objptr, ##27196
02320     00 D5 B1 FD | 	call	#__system___string_cmp
02324     00 FA 0D F2 | 	cmp	result1, #0 wz
02328     34 00 90 5D |  if_ne	jmp	#LR__0114
0232c     5A 00 00 FF 
02330     40 E4 05 F1 | 	add	objptr, ##46144
02334     F2 26 02 FB | 	rdlong	local05, objptr
02338     01 26 06 F1 | 	add	local05, #1
0233c     03 26 66 F0 | 	shl	local05, #3
02340     25 00 00 FF 
02344     04 E4 85 F1 | 	sub	objptr, ##18948
02348     F2 26 02 F1 | 	add	local05, objptr
0234c     77 01 00 FF 
02350     B8 32 06 F6 | 	mov	local11, ##@LR__4885
02354     13 33 62 FC | 	wrlong	local11, local05
02358     35 00 00 FF 
0235c     3C E4 85 F1 | 	sub	objptr, ##27196
02360                 | LR__0114
02360                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02360     5A 00 00 FF 
02364     40 E4 05 F1 | 	add	objptr, ##46144
02368     F2 28 02 FB | 	rdlong	local06, objptr
0236c     01 28 06 F1 | 	add	local06, #1
02370     03 28 66 F0 | 	shl	local06, #3
02374     25 00 00 FF 
02378     04 E4 85 F1 | 	sub	objptr, ##18948
0237c     F2 28 02 F1 | 	add	local06, objptr
02380     14 13 02 FB | 	rdlong	arg01, local06
02384     77 01 00 FF 
02388     BA 14 06 F6 | 	mov	arg02, ##@LR__4886
0238c     35 00 00 FF 
02390     3C E4 85 F1 | 	sub	objptr, ##27196
02394     8C D4 B1 FD | 	call	#__system___string_cmp
02398     00 FA 0D F2 | 	cmp	result1, #0 wz
0239c     34 00 90 5D |  if_ne	jmp	#LR__0115
023a0     5A 00 00 FF 
023a4     40 E4 05 F1 | 	add	objptr, ##46144
023a8     F2 26 02 FB | 	rdlong	local05, objptr
023ac     01 26 06 F1 | 	add	local05, #1
023b0     03 26 66 F0 | 	shl	local05, #3
023b4     25 00 00 FF 
023b8     04 E4 85 F1 | 	sub	objptr, ##18948
023bc     F2 26 02 F1 | 	add	local05, objptr
023c0     77 01 00 FF 
023c4     C3 32 06 F6 | 	mov	local11, ##@LR__4887
023c8     13 33 62 FC | 	wrlong	local11, local05
023cc     35 00 00 FF 
023d0     3C E4 85 F1 | 	sub	objptr, ##27196
023d4                 | LR__0115
023d4                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
023d4     5A 00 00 FF 
023d8     40 E4 05 F1 | 	add	objptr, ##46144
023dc     F2 28 02 FB | 	rdlong	local06, objptr
023e0     01 28 06 F1 | 	add	local06, #1
023e4     03 28 66 F0 | 	shl	local06, #3
023e8     25 00 00 FF 
023ec     04 E4 85 F1 | 	sub	objptr, ##18948
023f0     F2 28 02 F1 | 	add	local06, objptr
023f4     14 13 02 FB | 	rdlong	arg01, local06
023f8     77 01 00 FF 
023fc     C5 14 06 F6 | 	mov	arg02, ##@LR__4888
02400     35 00 00 FF 
02404     3C E4 85 F1 | 	sub	objptr, ##27196
02408     18 D4 B1 FD | 	call	#__system___string_cmp
0240c     00 FA 0D F2 | 	cmp	result1, #0 wz
02410     34 00 90 5D |  if_ne	jmp	#LR__0116
02414     5A 00 00 FF 
02418     40 E4 05 F1 | 	add	objptr, ##46144
0241c     F2 26 02 FB | 	rdlong	local05, objptr
02420     01 26 06 F1 | 	add	local05, #1
02424     03 26 66 F0 | 	shl	local05, #3
02428     25 00 00 FF 
0242c     04 E4 85 F1 | 	sub	objptr, ##18948
02430     F2 26 02 F1 | 	add	local05, objptr
02434     77 01 00 FF 
02438     CE 32 06 F6 | 	mov	local11, ##@LR__4889
0243c     13 33 62 FC | 	wrlong	local11, local05
02440     35 00 00 FF 
02444     3C E4 85 F1 | 	sub	objptr, ##27196
02448                 | LR__0116
02448                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02448     5A 00 00 FF 
0244c     40 E4 05 F1 | 	add	objptr, ##46144
02450     F2 28 02 FB | 	rdlong	local06, objptr
02454     01 28 06 F1 | 	add	local06, #1
02458     03 28 66 F0 | 	shl	local06, #3
0245c     25 00 00 FF 
02460     04 E4 85 F1 | 	sub	objptr, ##18948
02464     F2 32 02 F6 | 	mov	local11, objptr
02468     F2 28 02 F1 | 	add	local06, objptr
0246c     14 13 02 FB | 	rdlong	arg01, local06
02470     77 01 00 FF 
02474     D0 14 06 F6 | 	mov	arg02, ##@LR__4890
02478     35 00 00 FF 
0247c     3C E4 85 F1 | 	sub	objptr, ##27196
02480     A0 D3 B1 FD | 	call	#__system___string_cmp
02484     00 FA 0D F2 | 	cmp	result1, #0 wz
02488     34 00 90 5D |  if_ne	jmp	#LR__0117
0248c     5A 00 00 FF 
02490     40 E4 05 F1 | 	add	objptr, ##46144
02494     F2 26 02 FB | 	rdlong	local05, objptr
02498     01 26 06 F1 | 	add	local05, #1
0249c     03 26 66 F0 | 	shl	local05, #3
024a0     25 00 00 FF 
024a4     04 E4 85 F1 | 	sub	objptr, ##18948
024a8     F2 26 02 F1 | 	add	local05, objptr
024ac     77 01 00 FF 
024b0     D3 32 06 F6 | 	mov	local11, ##@LR__4891
024b4     13 33 62 FC | 	wrlong	local11, local05
024b8     35 00 00 FF 
024bc     3C E4 85 F1 | 	sub	objptr, ##27196
024c0                 | LR__0117
024c0                 | LR__0118
024c0                 | ' 
024c0                 | ' 
024c0                 | ' 
024c0                 | ' 
024c0                 | ' 
024c0                 | ' 
024c0                 | ' ' 2a find part types 
024c0                 | ' 
024c0                 | ' for i=0 to k-1
024c0     00 20 06 F6 | 	mov	local02, #0
024c4     1D 61 02 F6 | 	mov	local34, local15
024c8                 | LR__0119
024c8     30 21 52 F2 | 	cmps	local02, local34 wc
024cc     74 06 90 3D |  if_ae	jmp	#LR__0129
024d0     10 2F 02 F6 | 	mov	local09, local02
024d4     03 2E 66 F0 | 	shl	local09, #3
024d8     35 00 00 FF 
024dc     3C E4 05 F1 | 	add	objptr, ##27196
024e0     F2 2E 02 F1 | 	add	local09, objptr
024e4     10 31 02 F6 | 	mov	local10, local02
024e8     18 35 02 F6 | 	mov	local12, local10
024ec     03 34 66 F0 | 	shl	local12, #3
024f0     F2 4A 02 F6 | 	mov	local23, objptr
024f4     F2 34 02 F1 | 	add	local12, objptr
024f8     1A 13 02 FB | 	rdlong	arg01, local12
024fc     35 00 00 FF 
02500     3C E4 85 F1 | 	sub	objptr, ##27196
02504     B0 14 B0 FD | 	call	#_isseparator
02508     FD FA E1 F8 | 	getbyte	result1, result1, #0
0250c     04 2E 06 F1 | 	add	local09, #4
02510     17 FB 61 FC | 	wrlong	result1, local09
02514                 | ' lparts(i).token=isseparator(lparts(i).part$): if lparts(i).token>0 then goto 102
02514     10 2F 02 F6 | 	mov	local09, local02
02518     03 2E 66 F0 | 	shl	local09, #3
0251c     35 00 00 FF 
02520     3C E4 05 F1 | 	add	objptr, ##27196
02524     F2 2E 02 F1 | 	add	local09, objptr
02528     04 2E 06 F1 | 	add	local09, #4
0252c     17 33 02 FB | 	rdlong	local11, local09
02530     01 32 56 F2 | 	cmps	local11, #1 wc
02534     35 00 00 FF 
02538     3C E4 85 F1 | 	sub	objptr, ##27196
0253c     FC 05 90 3D |  if_ae	jmp	#LR__0128
02540     10 2F 02 F6 | 	mov	local09, local02
02544     03 2E 66 F0 | 	shl	local09, #3
02548     35 00 00 FF 
0254c     3C E4 05 F1 | 	add	objptr, ##27196
02550     F2 2E 02 F1 | 	add	local09, objptr
02554     10 31 02 F6 | 	mov	local10, local02
02558     18 35 02 F6 | 	mov	local12, local10
0255c     03 34 66 F0 | 	shl	local12, #3
02560     F2 4A 02 F6 | 	mov	local23, objptr
02564     F2 34 02 F1 | 	add	local12, objptr
02568     1A 13 02 FB | 	rdlong	arg01, local12
0256c     35 00 00 FF 
02570     3C E4 85 F1 | 	sub	objptr, ##27196
02574     F4 0D B0 FD | 	call	#_isoperator
02578     FD FA E1 F8 | 	getbyte	result1, result1, #0
0257c     04 2E 06 F1 | 	add	local09, #4
02580     17 FB 61 FC | 	wrlong	result1, local09
02584                 | ' lparts(i).token=isoperator(lparts(i).part$): if lparts(i).token>0 then goto 102
02584     10 2F 02 F6 | 	mov	local09, local02
02588     03 2E 66 F0 | 	shl	local09, #3
0258c     35 00 00 FF 
02590     3C E4 05 F1 | 	add	objptr, ##27196
02594     F2 2E 02 F1 | 	add	local09, objptr
02598     04 2E 06 F1 | 	add	local09, #4
0259c     17 33 02 FB | 	rdlong	local11, local09
025a0     01 32 56 F2 | 	cmps	local11, #1 wc
025a4     35 00 00 FF 
025a8     3C E4 85 F1 | 	sub	objptr, ##27196
025ac     8C 05 90 3D |  if_ae	jmp	#LR__0128
025b0     10 2F 02 F6 | 	mov	local09, local02
025b4     03 2E 66 F0 | 	shl	local09, #3
025b8     35 00 00 FF 
025bc     3C E4 05 F1 | 	add	objptr, ##27196
025c0     F2 2E 02 F1 | 	add	local09, objptr
025c4     10 31 02 F6 | 	mov	local10, local02
025c8     18 35 02 F6 | 	mov	local12, local10
025cc     03 34 66 F0 | 	shl	local12, #3
025d0     F2 4A 02 F6 | 	mov	local23, objptr
025d4     F2 34 02 F1 | 	add	local12, objptr
025d8     1A 13 02 FB | 	rdlong	arg01, local12
025dc     35 00 00 FF 
025e0     3C E4 85 F1 | 	sub	objptr, ##27196
025e4                 | ' 
025e4                 | ' select case s
025e4     77 01 00 FF 
025e8     B4 15 06 F6 | 	mov	arg02, ##@LR__4962
025ec     34 D2 B1 FD | 	call	#__system___string_cmp
025f0     00 FA 0D F2 | 	cmp	result1, #0 wz
025f4     1B FA 05 A6 |  if_e	mov	result1, #27
025f8     00 FA 05 56 |  if_ne	mov	result1, #0
025fc     FD FA E1 F8 | 	getbyte	result1, result1, #0
02600     04 2E 06 F1 | 	add	local09, #4
02604     17 FB 61 FC | 	wrlong	result1, local09
02608                 | ' lparts(i).token=isassign(lparts(i).part$) : if lparts(i).token>0 then goto 102
02608     10 2F 02 F6 | 	mov	local09, local02
0260c     03 2E 66 F0 | 	shl	local09, #3
02610     35 00 00 FF 
02614     3C E4 05 F1 | 	add	objptr, ##27196
02618     F2 2E 02 F1 | 	add	local09, objptr
0261c     04 2E 06 F1 | 	add	local09, #4
02620     17 33 02 FB | 	rdlong	local11, local09
02624     01 32 56 F2 | 	cmps	local11, #1 wc
02628     35 00 00 FF 
0262c     3C E4 85 F1 | 	sub	objptr, ##27196
02630     08 05 90 3D |  if_ae	jmp	#LR__0128
02634     10 2F 02 F6 | 	mov	local09, local02
02638     03 2E 66 F0 | 	shl	local09, #3
0263c     35 00 00 FF 
02640     3C E4 05 F1 | 	add	objptr, ##27196
02644     F2 2E 02 F1 | 	add	local09, objptr
02648     10 31 02 F6 | 	mov	local10, local02
0264c     18 35 02 F6 | 	mov	local12, local10
02650     03 34 66 F0 | 	shl	local12, #3
02654     F2 4A 02 F6 | 	mov	local23, objptr
02658     F2 34 02 F1 | 	add	local12, objptr
0265c     1A 13 02 FB | 	rdlong	arg01, local12
02660     35 00 00 FF 
02664     3C E4 85 F1 | 	sub	objptr, ##27196
02668     4C 15 B0 FD | 	call	#_iscommand
0266c     FD FA E1 F8 | 	getbyte	result1, result1, #0
02670     04 2E 06 F1 | 	add	local09, #4
02674     17 FB 61 FC | 	wrlong	result1, local09
02678                 | ' lparts(i).token=iscommand(lparts(i).part$): if lparts(i).token>0 then goto 102
02678     10 2F 02 F6 | 	mov	local09, local02
0267c     03 2E 66 F0 | 	shl	local09, #3
02680     35 00 00 FF 
02684     3C E4 05 F1 | 	add	objptr, ##27196
02688     F2 2E 02 F1 | 	add	local09, objptr
0268c     04 2E 06 F1 | 	add	local09, #4
02690     17 33 02 FB | 	rdlong	local11, local09
02694     01 32 56 F2 | 	cmps	local11, #1 wc
02698     35 00 00 FF 
0269c     3C E4 85 F1 | 	sub	objptr, ##27196
026a0     98 04 90 3D |  if_ae	jmp	#LR__0128
026a4     10 2F 02 F6 | 	mov	local09, local02
026a8     03 2E 66 F0 | 	shl	local09, #3
026ac     35 00 00 FF 
026b0     3C E4 05 F1 | 	add	objptr, ##27196
026b4     F2 2E 02 F1 | 	add	local09, objptr
026b8     10 31 02 F6 | 	mov	local10, local02
026bc     18 35 02 F6 | 	mov	local12, local10
026c0     03 34 66 F0 | 	shl	local12, #3
026c4     F2 4A 02 F6 | 	mov	local23, objptr
026c8     F2 34 02 F1 | 	add	local12, objptr
026cc     1A 13 02 FB | 	rdlong	arg01, local12
026d0     35 00 00 FF 
026d4     3C E4 85 F1 | 	sub	objptr, ##27196
026d8     3C 23 B0 FD | 	call	#_isfunction
026dc     FD FA E1 F8 | 	getbyte	result1, result1, #0
026e0     04 2E 06 F1 | 	add	local09, #4
026e4     17 FB 61 FC | 	wrlong	result1, local09
026e8                 | ' lparts(i).token=isfunction(lparts(i).part$): if lparts(i).token>0 then goto 102
026e8     10 2F 02 F6 | 	mov	local09, local02
026ec     03 2E 66 F0 | 	shl	local09, #3
026f0     35 00 00 FF 
026f4     3C E4 05 F1 | 	add	objptr, ##27196
026f8     F2 2E 02 F1 | 	add	local09, objptr
026fc     04 2E 06 F1 | 	add	local09, #4
02700     17 33 02 FB | 	rdlong	local11, local09
02704     01 32 56 F2 | 	cmps	local11, #1 wc
02708     35 00 00 FF 
0270c     3C E4 85 F1 | 	sub	objptr, ##27196
02710     28 04 90 3D |  if_ae	jmp	#LR__0128
02714     10 2F 02 F6 | 	mov	local09, local02
02718     03 2E 66 F0 | 	shl	local09, #3
0271c     35 00 00 FF 
02720     3C E4 05 F1 | 	add	objptr, ##27196
02724     F2 2E 02 F1 | 	add	local09, objptr
02728     10 31 02 F6 | 	mov	local10, local02
0272c     18 37 02 F6 | 	mov	local13, local10
02730     03 36 66 F0 | 	shl	local13, #3
02734     F2 34 02 F6 | 	mov	local12, objptr
02738     F2 36 02 F1 | 	add	local13, objptr
0273c     1B 13 02 FB | 	rdlong	arg01, local13
02740     35 00 00 FF 
02744     3C E4 85 F1 | 	sub	objptr, ##27196
02748     00 0F B0 FD | 	call	#_isnotename
0274c     04 2E 06 F1 | 	add	local09, #4
02750     17 FB 61 FC | 	wrlong	result1, local09
02754                 | ' lparts(i).token=isnotename(lparts(i).part$) 
02754                 | ' if lparts(i).token>0 then 
02754     10 2F 02 F6 | 	mov	local09, local02
02758     03 2E 66 F0 | 	shl	local09, #3
0275c     35 00 00 FF 
02760     3C E4 05 F1 | 	add	objptr, ##27196
02764     F2 2E 02 F1 | 	add	local09, objptr
02768     04 2E 06 F1 | 	add	local09, #4
0276c     17 33 02 FB | 	rdlong	local11, local09
02770     01 32 56 F2 | 	cmps	local11, #1 wc
02774     35 00 00 FF 
02778     3C E4 85 F1 | 	sub	objptr, ##27196
0277c     88 00 90 CD |  if_b	jmp	#LR__0120
02780     10 27 02 F6 | 	mov	local05, local02
02784     03 26 66 F0 | 	shl	local05, #3
02788     35 00 00 FF 
0278c     3C E4 05 F1 | 	add	objptr, ##27196
02790     F2 26 02 F1 | 	add	local05, objptr
02794     04 26 06 F1 | 	add	local05, #4
02798     13 33 02 FB | 	rdlong	local11, local05
0279c     19 13 02 F6 | 	mov	arg01, local11
027a0     35 00 00 FF 
027a4     3C E4 85 F1 | 	sub	objptr, ##27196
027a8     E0 87 B1 FD | 	call	#_getnoteval
027ac     FD 62 02 F6 | 	mov	local35, result1
027b0     10 2F 02 F6 | 	mov	local09, local02
027b4     03 2E 66 F0 | 	shl	local09, #3
027b8     35 00 00 FF 
027bc     3C E4 05 F1 | 	add	objptr, ##27196
027c0     F2 2E 02 F1 | 	add	local09, objptr
027c4     31 13 02 F6 | 	mov	arg01, local35
027c8     35 00 00 FF 
027cc     3C E4 85 F1 | 	sub	objptr, ##27196
027d0     30 F2 B1 FD | 	call	#__system__str_S
027d4     17 FB 61 FC | 	wrlong	result1, local09
027d8     10 23 02 F6 | 	mov	local03, local02
027dc     11 2F 02 F6 | 	mov	local09, local03
027e0     03 2E 66 F0 | 	shl	local09, #3
027e4     35 00 00 FF 
027e8     3C E4 05 F1 | 	add	objptr, ##27196
027ec     F2 2E 02 F1 | 	add	local09, objptr
027f0     04 2E 06 F1 | 	add	local09, #4
027f4     01 00 80 FF 
027f8     17 05 68 FC | 	wrlong	##514, local09
027fc     35 00 00 FF 
02800     3C E4 85 F1 | 	sub	objptr, ##27196
02804     34 03 90 FD | 	jmp	#LR__0128
02808                 | LR__0120
02808     10 27 02 F6 | 	mov	local05, local02
0280c     03 26 66 F0 | 	shl	local05, #3
02810     35 00 00 FF 
02814     3C E4 05 F1 | 	add	objptr, ##27196
02818     F2 26 02 F1 | 	add	local05, objptr
0281c     13 13 02 FB | 	rdlong	arg01, local05
02820     35 00 00 FF 
02824     3C E4 85 F1 | 	sub	objptr, ##27196
02828     C0 29 B0 FD | 	call	#_isnum
0282c     FD 24 02 F6 | 	mov	local04, result1
02830     5A 00 00 FF 
02834     4C E4 05 F1 | 	add	objptr, ##46156
02838     F2 24 62 FC | 	wrlong	local04, objptr
0283c     10 27 02 F6 | 	mov	local05, local02
02840     03 26 66 F0 | 	shl	local05, #3
02844     25 00 00 FF 
02848     10 E4 85 F1 | 	sub	objptr, ##18960
0284c     F2 26 02 F1 | 	add	local05, objptr
02850     13 13 02 FB | 	rdlong	arg01, local05
02854     35 00 00 FF 
02858     3C E4 85 F1 | 	sub	objptr, ##27196
0285c     64 2C B0 FD | 	call	#_isint
02860     FD 24 02 F6 | 	mov	local04, result1
02864     5A 00 00 FF 
02868     50 E4 05 F1 | 	add	objptr, ##46160
0286c     F2 24 62 FC | 	wrlong	local04, objptr
02870     10 27 02 F6 | 	mov	local05, local02
02874     03 26 66 F0 | 	shl	local05, #3
02878     25 00 00 FF 
0287c     14 E4 85 F1 | 	sub	objptr, ##18964
02880     F2 28 02 F6 | 	mov	local06, objptr
02884     F2 26 02 F1 | 	add	local05, objptr
02888     13 13 02 FB | 	rdlong	arg01, local05
0288c     35 00 00 FF 
02890     3C E4 85 F1 | 	sub	objptr, ##27196
02894     84 2D B0 FD | 	call	#_isdec
02898     5A 00 00 FF 
0289c     54 E4 05 F1 | 	add	objptr, ##46164
028a0     F2 FA 61 FC | 	wrlong	result1, objptr
028a4                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal : goto 102 					' pure decimal for line num
028a4     08 E4 85 F1 | 	sub	objptr, #8
028a8     F2 24 0A FB | 	rdlong	local04, objptr wz
028ac     5A 00 00 FF 
028b0     4C E4 85 F1 | 	sub	objptr, ##46156
028b4     60 00 90 AD |  if_e	jmp	#LR__0121
028b8     5A 00 00 FF 
028bc     50 E4 05 F1 | 	add	objptr, ##46160
028c0     F2 2E 0A FB | 	rdlong	local09, objptr wz
028c4     5A 00 00 FF 
028c8     50 E4 85 F1 | 	sub	objptr, ##46160
028cc     48 00 90 AD |  if_e	jmp	#LR__0121
028d0     5A 00 00 FF 
028d4     54 E4 05 F1 | 	add	objptr, ##46164
028d8     F2 32 0A FB | 	rdlong	local11, objptr wz
028dc     5A 00 00 FF 
028e0     54 E4 85 F1 | 	sub	objptr, ##46164
028e4     30 00 90 AD |  if_e	jmp	#LR__0121
028e8     10 23 02 F6 | 	mov	local03, local02
028ec     11 2F 02 F6 | 	mov	local09, local03
028f0     03 2E 66 F0 | 	shl	local09, #3
028f4     35 00 00 FF 
028f8     3C E4 05 F1 | 	add	objptr, ##27196
028fc     F2 2E 02 F1 | 	add	local09, objptr
02900     04 2E 06 F1 | 	add	local09, #4
02904     01 00 80 FF 
02908     17 01 68 FC | 	wrlong	##512, local09
0290c     35 00 00 FF 
02910     3C E4 85 F1 | 	sub	objptr, ##27196
02914     24 02 90 FD | 	jmp	#LR__0128
02918                 | LR__0121
02918                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer : goto 102 				' integer
02918     5A 00 00 FF 
0291c     4C E4 05 F1 | 	add	objptr, ##46156
02920     F2 24 0A FB | 	rdlong	local04, objptr wz
02924     5A 00 00 FF 
02928     4C E4 85 F1 | 	sub	objptr, ##46156
0292c     64 00 90 AD |  if_e	jmp	#LR__0122
02930     5A 00 00 FF 
02934     50 E4 05 F1 | 	add	objptr, ##46160
02938     F2 2E 0A FB | 	rdlong	local09, objptr wz
0293c     5A 00 00 FF 
02940     50 E4 85 F1 | 	sub	objptr, ##46160
02944     5A 00 00 5F 
02948     54 E4 05 51 |  if_ne	add	objptr, ##46164
0294c     F2 32 02 5B |  if_ne	rdlong	local11, objptr
02950     5A 00 00 5F 
02954     54 E4 85 51 |  if_ne	sub	objptr, ##46164
02958     19 29 22 56 |  if_ne	not	local06, local11
0295c     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
02960     30 00 90 AD |  if_e	jmp	#LR__0122
02964     10 23 02 F6 | 	mov	local03, local02
02968     11 2F 02 F6 | 	mov	local09, local03
0296c     03 2E 66 F0 | 	shl	local09, #3
02970     35 00 00 FF 
02974     3C E4 05 F1 | 	add	objptr, ##27196
02978     F2 2E 02 F1 | 	add	local09, objptr
0297c     04 2E 06 F1 | 	add	local09, #4
02980     01 00 80 FF 
02984     17 03 68 FC | 	wrlong	##513, local09
02988     35 00 00 FF 
0298c     3C E4 85 F1 | 	sub	objptr, ##27196
02990     A8 01 90 FD | 	jmp	#LR__0128
02994                 | LR__0122
02994                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float :goto 102 				' float
02994     5A 00 00 FF 
02998     4C E4 05 F1 | 	add	objptr, ##46156
0299c     F2 24 0A FB | 	rdlong	local04, objptr wz
029a0     5A 00 00 FF 
029a4     4C E4 85 F1 | 	sub	objptr, ##46156
029a8     5A 00 00 5F 
029ac     50 E4 05 51 |  if_ne	add	objptr, ##46160
029b0     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
029b4     5A 00 00 5F 
029b8     50 E4 85 51 |  if_ne	sub	objptr, ##46160
029bc     17 2F 22 56 |  if_ne	not	local09, local09
029c0     00 2E 0E 52 |  if_ne	cmp	local09, #0 wz
029c4     5A 00 00 5F 
029c8     54 E4 05 51 |  if_ne	add	objptr, ##46164
029cc     F2 32 02 5B |  if_ne	rdlong	local11, objptr
029d0     5A 00 00 5F 
029d4     54 E4 85 51 |  if_ne	sub	objptr, ##46164
029d8     19 29 22 56 |  if_ne	not	local06, local11
029dc     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
029e0     30 00 90 AD |  if_e	jmp	#LR__0123
029e4     10 23 02 F6 | 	mov	local03, local02
029e8     11 2F 02 F6 | 	mov	local09, local03
029ec     03 2E 66 F0 | 	shl	local09, #3
029f0     35 00 00 FF 
029f4     3C E4 05 F1 | 	add	objptr, ##27196
029f8     F2 2E 02 F1 | 	add	local09, objptr
029fc     04 2E 06 F1 | 	add	local09, #4
02a00     01 00 80 FF 
02a04     17 05 68 FC | 	wrlong	##514, local09
02a08     35 00 00 FF 
02a0c     3C E4 85 F1 | 	sub	objptr, ##27196
02a10     28 01 90 FD | 	jmp	#LR__0128
02a14                 | LR__0123
02a14                 | ' 
02a14                 | ' if isstring(lparts(i).part$) then 
02a14     10 27 02 F6 | 	mov	local05, local02
02a18     03 26 66 F0 | 	shl	local05, #3
02a1c     35 00 00 FF 
02a20     3C E4 05 F1 | 	add	objptr, ##27196
02a24     F2 26 02 F1 | 	add	local05, objptr
02a28     13 13 02 FB | 	rdlong	arg01, local05
02a2c     35 00 00 FF 
02a30     3C E4 85 F1 | 	sub	objptr, ##27196
02a34     A4 2C B0 FD | 	call	#_isstring
02a38     00 FA 0D F2 | 	cmp	result1, #0 wz
02a3c     A0 00 90 AD |  if_e	jmp	#LR__0126
02a40     10 2F 02 F6 | 	mov	local09, local02
02a44     03 2E 66 F0 | 	shl	local09, #3
02a48     35 00 00 FF 
02a4c     3C E4 05 F1 | 	add	objptr, ##27196
02a50     F2 2E 02 F1 | 	add	local09, objptr
02a54     04 2E 06 F1 | 	add	local09, #4
02a58     01 00 80 FF 
02a5c     17 07 68 FC | 	wrlong	##515, local09
02a60     10 23 02 F6 | 	mov	local03, local02
02a64     11 2F 02 F6 | 	mov	local09, local03
02a68     03 2E 66 F0 | 	shl	local09, #3
02a6c     F2 2E 02 F1 | 	add	local09, objptr
02a70     10 37 02 F6 | 	mov	local13, local02
02a74     03 36 66 F0 | 	shl	local13, #3
02a78     F2 36 02 F1 | 	add	local13, objptr
02a7c     1B 29 02 FB | 	rdlong	local06, local13
02a80     02 32 06 F6 | 	mov	local11, #2
02a84     10 4B 02 F6 | 	mov	local23, local02
02a88     25 43 02 F6 | 	mov	local19, local23
02a8c     21 45 02 F6 | 	mov	local20, local19
02a90     03 44 66 F0 | 	shl	local20, #3
02a94     F2 46 02 F6 | 	mov	local21, objptr
02a98     F2 44 02 F1 | 	add	local20, objptr
02a9c     22 13 02 FB | 	rdlong	arg01, local20
02aa0     35 00 00 FF 
02aa4     3C E4 85 F1 | 	sub	objptr, ##27196
02aa8     09 2B 02 F6 | 	mov	local07, arg01
02aac     97 06 48 FB | 	callpa	#(@LR__0125-@LR__0124)>>2,fcache_load_ptr_
02ab0                 | LR__0124
02ab0     15 FB C9 FA | 	rdbyte	result1, local07 wz
02ab4     01 2A 06 51 |  if_ne	add	local07, #1
02ab8     F4 FF 9F 5D |  if_ne	jmp	#LR__0124
02abc                 | LR__0125
02abc     09 2B 82 F1 | 	sub	local07, arg01
02ac0     15 31 02 F6 | 	mov	local10, local07
02ac4     02 30 86 F1 | 	sub	local10, #2
02ac8     14 13 02 F6 | 	mov	arg01, local06
02acc     19 15 02 F6 | 	mov	arg02, local11
02ad0     18 17 02 F6 | 	mov	arg03, local10
02ad4     4C EE B1 FD | 	call	#__system__Mid_S
02ad8     17 FB 61 FC | 	wrlong	result1, local09
02adc     5C 00 90 FD | 	jmp	#LR__0128
02ae0                 | LR__0126
02ae0                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
02ae0     10 23 02 F6 | 	mov	local03, local02
02ae4     11 27 02 F6 | 	mov	local05, local03
02ae8     03 26 66 F0 | 	shl	local05, #3
02aec     35 00 00 FF 
02af0     3C E4 05 F1 | 	add	objptr, ##27196
02af4     F2 26 02 F1 | 	add	local05, objptr
02af8     13 13 02 FB | 	rdlong	arg01, local05
02afc     35 00 00 FF 
02b00     3C E4 85 F1 | 	sub	objptr, ##27196
02b04     70 24 B0 FD | 	call	#_isname
02b08     00 FA 4D F2 | 	cmps	result1, #0 wz
02b0c     2C 00 90 AD |  if_e	jmp	#LR__0127
02b10     10 23 02 F6 | 	mov	local03, local02
02b14     11 2F 02 F6 | 	mov	local09, local03
02b18     03 2E 66 F0 | 	shl	local09, #3
02b1c     35 00 00 FF 
02b20     3C E4 05 F1 | 	add	objptr, ##27196
02b24     F2 2E 02 F1 | 	add	local09, objptr
02b28     04 2E 06 F1 | 	add	local09, #4
02b2c     01 00 80 FF 
02b30     17 09 68 FC | 	wrlong	##516, local09
02b34     35 00 00 FF 
02b38     3C E4 85 F1 | 	sub	objptr, ##27196
02b3c                 | LR__0127
02b3c                 | LR__0128
02b3c     01 20 06 F1 | 	add	local02, #1
02b40     84 F9 9F FD | 	jmp	#LR__0119
02b44                 | LR__0129
02b44     1D 2F 02 F6 | 	mov	local09, local15
02b48     03 2E 66 F0 | 	shl	local09, #3
02b4c     35 00 00 FF 
02b50     3C E4 05 F1 | 	add	objptr, ##27196
02b54     F2 2E 02 F1 | 	add	local09, objptr
02b58     04 2E 06 F1 | 	add	local09, #4
02b5c     17 FD 6B FC | 	wrlong	#510, local09
02b60     1D 2F 02 F6 | 	mov	local09, local15
02b64     03 2E 66 F0 | 	shl	local09, #3
02b68     F2 26 02 F6 | 	mov	local05, objptr
02b6c     F2 2E 02 F1 | 	add	local09, objptr
02b70     77 01 00 FF 
02b74     D5 28 06 F6 | 	mov	local06, ##@LR__4892
02b78     17 29 62 FC | 	wrlong	local06, local09
02b7c     10 00 00 FF 
02b80     54 E4 05 F1 | 	add	objptr, ##8276
02b84     F2 3A 62 FC | 	wrlong	local15, objptr
02b88                 | ' 
02b88                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
02b88                 | ' 
02b88                 | '  '                                      					 	for i=0 to k: print lparts(i).token,lparts(i).part$ : next i
02b88                 | '  
02b88                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
02b88     14 00 00 FF 
02b8c     B4 E5 05 F1 | 	add	objptr, ##10676
02b90     F2 12 02 FB | 	rdlong	arg01, objptr
02b94     5A 00 00 FF 
02b98     44 E4 85 F1 | 	sub	objptr, ##46148
02b9c     77 01 00 FF 
02ba0     D6 2E 06 F6 | 	mov	local09, ##@LR__4893
02ba4     17 15 02 F6 | 	mov	arg02, local09
02ba8     78 CC B1 FD | 	call	#__system___string_cmp
02bac     00 FA 0D F2 | 	cmp	result1, #0 wz
02bb0     1C 01 90 AD |  if_e	jmp	#LR__0130
02bb4     5A 00 00 FF 
02bb8     44 E4 05 F1 | 	add	objptr, ##46148
02bbc     F2 12 02 FB | 	rdlong	arg01, objptr
02bc0     5A 00 00 FF 
02bc4     44 E4 85 F1 | 	sub	objptr, ##46148
02bc8     77 01 00 FF 
02bcc     DB 26 06 F6 | 	mov	local05, ##@LR__4894
02bd0     13 2F 02 F6 | 	mov	local09, local05
02bd4     17 15 02 F6 | 	mov	arg02, local09
02bd8     48 CC B1 FD | 	call	#__system___string_cmp
02bdc     00 FA 0D F2 | 	cmp	result1, #0 wz
02be0     EC 00 90 AD |  if_e	jmp	#LR__0130
02be4     5A 00 00 FF 
02be8     44 E4 05 F1 | 	add	objptr, ##46148
02bec     F2 12 02 FB | 	rdlong	arg01, objptr
02bf0     5A 00 00 FF 
02bf4     44 E4 85 F1 | 	sub	objptr, ##46148
02bf8     77 01 00 FF 
02bfc     E0 28 06 F6 | 	mov	local06, ##@LR__4895
02c00     14 27 02 F6 | 	mov	local05, local06
02c04     13 15 02 F6 | 	mov	arg02, local05
02c08     18 CC B1 FD | 	call	#__system___string_cmp
02c0c     FD 2E 0A F6 | 	mov	local09, result1 wz
02c10     BC 00 90 AD |  if_e	jmp	#LR__0130
02c14     5A 00 00 FF 
02c18     44 E4 05 F1 | 	add	objptr, ##46148
02c1c     F2 12 02 FB | 	rdlong	arg01, objptr
02c20     5A 00 00 FF 
02c24     44 E4 85 F1 | 	sub	objptr, ##46148
02c28     77 01 00 FF 
02c2c     E5 32 06 F6 | 	mov	local11, ##@LR__4896
02c30     19 29 02 F6 | 	mov	local06, local11
02c34     14 15 02 F6 | 	mov	arg02, local06
02c38     E8 CB B1 FD | 	call	#__system___string_cmp
02c3c     FD 26 0A F6 | 	mov	local05, result1 wz
02c40     8C 00 90 AD |  if_e	jmp	#LR__0130
02c44     5A 00 00 FF 
02c48     44 E4 05 F1 | 	add	objptr, ##46148
02c4c     F2 12 02 FB | 	rdlong	arg01, objptr
02c50     5A 00 00 FF 
02c54     44 E4 85 F1 | 	sub	objptr, ##46148
02c58     77 01 00 FF 
02c5c     E9 30 06 F6 | 	mov	local10, ##@LR__4897
02c60     18 33 02 F6 | 	mov	local11, local10
02c64     19 15 02 F6 | 	mov	arg02, local11
02c68     B8 CB B1 FD | 	call	#__system___string_cmp
02c6c     FD 28 0A F6 | 	mov	local06, result1 wz
02c70     5C 00 90 AD |  if_e	jmp	#LR__0130
02c74     5A 00 00 FF 
02c78     44 E4 05 F1 | 	add	objptr, ##46148
02c7c     F2 12 02 FB | 	rdlong	arg01, objptr
02c80     5A 00 00 FF 
02c84     44 E4 85 F1 | 	sub	objptr, ##46148
02c88     77 01 00 FF 
02c8c     ED 30 06 F6 | 	mov	local10, ##@LR__4898
02c90     18 15 02 F6 | 	mov	arg02, local10
02c94     8C CB B1 FD | 	call	#__system___string_cmp
02c98     FD 32 0A F6 | 	mov	local11, result1 wz
02c9c     30 00 90 AD |  if_e	jmp	#LR__0130
02ca0     5A 00 00 FF 
02ca4     44 E4 05 F1 | 	add	objptr, ##46148
02ca8     F2 12 02 FB | 	rdlong	arg01, objptr
02cac     5A 00 00 FF 
02cb0     44 E4 85 F1 | 	sub	objptr, ##46148
02cb4     77 01 00 FF 
02cb8     F0 34 06 F6 | 	mov	local12, ##@LR__4899
02cbc     1A 37 02 F6 | 	mov	local13, local12
02cc0     1B 15 02 F6 | 	mov	arg02, local13
02cc4     5C CB B1 FD | 	call	#__system___string_cmp
02cc8     FD 30 0A F6 | 	mov	local10, result1 wz
02ccc     9C 00 90 5D |  if_ne	jmp	#LR__0131
02cd0                 | LR__0130
02cd0     5A 00 00 FF 
02cd4     40 E4 05 F1 | 	add	objptr, ##46144
02cd8     F2 34 02 FB | 	rdlong	local12, objptr
02cdc     1A 37 02 F6 | 	mov	local13, local12
02ce0     01 36 06 F1 | 	add	local13, #1
02ce4     1B 4B 02 F6 | 	mov	local23, local13
02ce8     25 43 02 F6 | 	mov	local19, local23
02cec     03 42 66 F0 | 	shl	local19, #3
02cf0     25 00 00 FF 
02cf4     04 E4 85 F1 | 	sub	objptr, ##18948
02cf8     F2 44 02 F6 | 	mov	local20, objptr
02cfc     F2 42 02 F1 | 	add	local19, objptr
02d00     04 42 06 F1 | 	add	local19, #4
02d04     21 4D 02 FB | 	rdlong	local24, local19
02d08     04 42 86 F1 | 	sub	local19, #4
02d0c     26 47 02 F6 | 	mov	local21, local24
02d10     01 00 00 FF 
02d14     04 46 0E F2 | 	cmp	local21, ##516 wz
02d18     35 00 00 FF 
02d1c     3C E4 85 F1 | 	sub	objptr, ##27196
02d20     48 00 90 5D |  if_ne	jmp	#LR__0131
02d24     5A 00 00 FF 
02d28     40 E4 05 F1 | 	add	objptr, ##46144
02d2c     F2 2E 02 FB | 	rdlong	local09, objptr
02d30     01 2E 06 F1 | 	add	local09, #1
02d34     17 27 02 F6 | 	mov	local05, local09
02d38     03 26 66 F0 | 	shl	local05, #3
02d3c     25 00 00 FF 
02d40     04 E4 85 F1 | 	sub	objptr, ##18948
02d44     F2 28 02 F6 | 	mov	local06, objptr
02d48     F2 26 02 F1 | 	add	local05, objptr
02d4c     01 00 00 FF 
02d50     03 32 06 F6 | 	mov	local11, ##515
02d54     04 26 06 F1 | 	add	local05, #4
02d58     01 00 80 FF 
02d5c     13 07 68 FC | 	wrlong	##515, local05
02d60     04 26 86 F1 | 	sub	local05, #4
02d64     35 00 00 FF 
02d68     3C E4 85 F1 | 	sub	objptr, ##27196
02d6c                 | LR__0131
02d6c                 | ' 
02d6c                 | ' ' abbreviated command has to be at the position addptr
02d6c                 | ' 
02d6c                 | ' 
02d6c                 | ' 
02d6c                 | ' '2b determine a type of the line
02d6c                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
02d6c     35 00 00 FF 
02d70     3C E4 05 F1 | 	add	objptr, ##27196
02d74     F2 12 02 FB | 	rdlong	arg01, objptr
02d78     35 00 00 FF 
02d7c     3C E4 85 F1 | 	sub	objptr, ##27196
02d80     98 28 B0 FD | 	call	#_isdec
02d84     00 FA 0D F2 | 	cmp	result1, #0 wz
02d88     30 00 90 AD |  if_e	jmp	#LR__0132
02d8c     35 00 00 FF 
02d90     3C E4 05 F1 | 	add	objptr, ##27196
02d94     F2 12 02 FB | 	rdlong	arg01, objptr
02d98     35 00 00 FF 
02d9c     3C E4 85 F1 | 	sub	objptr, ##27196
02da0     00 14 06 F6 | 	mov	arg02, #0
02da4     14 FC B1 FD | 	call	#__system____builtin_atoi
02da8     59 00 00 FF 
02dac     D0 E5 05 F1 | 	add	objptr, ##46032
02db0     F2 FA 61 FC | 	wrlong	result1, objptr
02db4     59 00 00 FF 
02db8     D0 E5 85 F1 | 	sub	objptr, ##46032
02dbc                 | LR__0132
02dbc                 | ' 
02dbc                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104
02dbc     59 00 00 FF 
02dc0     D0 E5 05 F1 | 	add	objptr, ##46032
02dc4     F2 24 02 FB | 	rdlong	local04, objptr
02dc8     59 00 00 FF 
02dcc     D0 E5 85 F1 | 	sub	objptr, ##46032
02dd0     01 24 16 F2 | 	cmp	local04, #1 wc
02dd4     3C 00 90 CD |  if_b	jmp	#LR__0133
02dd8     01 3A 0E F2 | 	cmp	local15, #1 wz
02ddc     37 00 00 AF 
02de0     54 E4 05 A1 |  if_e	add	objptr, ##28244
02de4     F2 26 02 AB |  if_e	rdlong	local05, objptr
02de8     37 00 00 AF 
02dec     54 E4 85 A1 |  if_e	sub	objptr, ##28244
02df0     03 26 0E A2 |  if_e	cmp	local05, #3 wz
02df4     1C 00 90 5D |  if_ne	jmp	#LR__0133
02df8     59 00 00 FF 
02dfc     D0 E5 05 F1 | 	add	objptr, ##46032
02e00     F2 12 02 FB | 	rdlong	arg01, objptr
02e04     59 00 00 FF 
02e08     D0 E5 85 F1 | 	sub	objptr, ##46032
02e0c     30 29 B0 FD | 	call	#_deleteline
02e10     4C 05 90 FD | 	jmp	#LR__0150
02e14                 | LR__0133
02e14                 | ' 
02e14                 | ' if linenum>0  andalso (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  
02e14     59 00 00 FF 
02e18     D0 E5 05 F1 | 	add	objptr, ##46032
02e1c     F2 24 02 FB | 	rdlong	local04, objptr
02e20     59 00 00 FF 
02e24     D0 E5 85 F1 | 	sub	objptr, ##46032
02e28     01 24 16 F2 | 	cmp	local04, #1 wc
02e2c     EC 00 90 CD |  if_b	jmp	#LR__0136
02e30     37 00 00 FF 
02e34     54 E4 05 F1 | 	add	objptr, ##28244
02e38     F2 26 02 FB | 	rdlong	local05, objptr
02e3c     37 00 00 FF 
02e40     54 E4 85 F1 | 	sub	objptr, ##28244
02e44     13 2F 0A F6 | 	mov	local09, local05 wz
02e48     20 00 90 AD |  if_e	jmp	#LR__0134
02e4c     37 00 00 FF 
02e50     54 E4 05 F1 | 	add	objptr, ##28244
02e54     F2 32 02 FB | 	rdlong	local11, objptr
02e58     37 00 00 FF 
02e5c     54 E4 85 F1 | 	sub	objptr, ##28244
02e60     19 29 02 F6 | 	mov	local06, local11
02e64     03 28 0E F2 | 	cmp	local06, #3 wz
02e68     B0 00 90 5D |  if_ne	jmp	#LR__0136
02e6c                 | LR__0134
02e6c     35 00 00 FF 
02e70     50 E4 05 F1 | 	add	objptr, ##27216
02e74     F2 36 02 FB | 	rdlong	local13, objptr
02e78     35 00 00 FF 
02e7c     50 E4 85 F1 | 	sub	objptr, ##27216
02e80     1B 31 02 F6 | 	mov	local10, local13
02e84     1B 30 0E F2 | 	cmp	local10, #27 wz
02e88     90 00 90 AD |  if_e	jmp	#LR__0136
02e8c     59 00 00 FF 
02e90     D0 E5 05 F1 | 	add	objptr, ##46032
02e94     F2 12 02 FB | 	rdlong	arg01, objptr
02e98     22 00 00 FF 
02e9c     7C E5 85 F1 | 	sub	objptr, ##17788
02ea0     F2 16 02 FB | 	rdlong	arg03, objptr
02ea4     37 00 00 FF 
02ea8     54 E4 85 F1 | 	sub	objptr, ##28244
02eac     00 14 06 F6 | 	mov	arg02, #0
02eb0     70 3D B0 FD | 	call	#_compile
02eb4     FD 1E 0A F6 | 	mov	local01, result1 wz
02eb8                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02eb8                 | '   if err<>0 then printerror(err): goto 104
02eb8     0C 00 90 AD |  if_e	jmp	#LR__0135
02ebc     0F 13 02 F6 | 	mov	arg01, local01
02ec0     90 84 B1 FD | 	call	#_printerror
02ec4     98 04 90 FD | 	jmp	#LR__0150
02ec8                 | LR__0135
02ec8                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
02ec8     5A 00 00 FF 
02ecc     1C E4 05 F1 | 	add	objptr, ##46108
02ed0     F2 12 02 FB | 	rdlong	arg01, objptr
02ed4     5A 00 00 FF 
02ed8     1C E4 85 F1 | 	sub	objptr, ##46108
02edc     77 01 00 FF 
02ee0     F4 14 06 F6 | 	mov	arg02, ##@LR__4900
02ee4     3C C9 B1 FD | 	call	#__system___string_cmp
02ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
02eec     70 04 90 AD |  if_e	jmp	#LR__0150
02ef0     5A 00 00 FF 
02ef4     1C E4 05 F1 | 	add	objptr, ##46108
02ef8     F2 24 02 FB | 	rdlong	local04, objptr
02efc     22 00 00 FF 
02f00     D0 E5 85 F1 | 	sub	objptr, ##17872
02f04     F2 24 62 FC | 	wrlong	local04, objptr
02f08     08 E4 05 F1 | 	add	objptr, #8
02f0c     F2 08 68 FC | 	wrlong	#4, objptr
02f10     37 00 00 FF 
02f14     54 E4 85 F1 | 	sub	objptr, ##28244
02f18     6C DB 9F FD | 	jmp	#LR__0020
02f1c                 | LR__0136
02f1c                 | '       							
02f1c                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 
02f1c     59 00 00 FF 
02f20     D0 E5 05 F1 | 	add	objptr, ##46032
02f24     F2 24 02 FB | 	rdlong	local04, objptr
02f28     59 00 00 FF 
02f2c     D0 E5 85 F1 | 	sub	objptr, ##46032
02f30     01 24 16 F2 | 	cmp	local04, #1 wc
02f34     EC 00 90 CD |  if_b	jmp	#LR__0139
02f38     37 00 00 FF 
02f3c     54 E4 05 F1 | 	add	objptr, ##28244
02f40     F2 26 02 FB | 	rdlong	local05, objptr
02f44     37 00 00 FF 
02f48     54 E4 85 F1 | 	sub	objptr, ##28244
02f4c     01 26 0E F2 | 	cmp	local05, #1 wz
02f50     20 00 90 AD |  if_e	jmp	#LR__0137
02f54     37 00 00 FF 
02f58     54 E4 05 F1 | 	add	objptr, ##28244
02f5c     F2 32 02 FB | 	rdlong	local11, objptr
02f60     37 00 00 FF 
02f64     54 E4 85 F1 | 	sub	objptr, ##28244
02f68     19 29 02 F6 | 	mov	local06, local11
02f6c     02 28 0E F2 | 	cmp	local06, #2 wz
02f70     B0 00 90 5D |  if_ne	jmp	#LR__0139
02f74                 | LR__0137
02f74     35 00 00 FF 
02f78     48 E4 05 F1 | 	add	objptr, ##27208
02f7c     F2 36 02 FB | 	rdlong	local13, objptr
02f80     35 00 00 FF 
02f84     48 E4 85 F1 | 	sub	objptr, ##27208
02f88     1B 31 02 F6 | 	mov	local10, local13
02f8c     1B 30 0E F2 | 	cmp	local10, #27 wz
02f90     90 00 90 AD |  if_e	jmp	#LR__0139
02f94     59 00 00 FF 
02f98     D0 E5 05 F1 | 	add	objptr, ##46032
02f9c     F2 12 02 FB | 	rdlong	arg01, objptr
02fa0     22 00 00 FF 
02fa4     7C E5 85 F1 | 	sub	objptr, ##17788
02fa8     F2 16 02 FB | 	rdlong	arg03, objptr
02fac     37 00 00 FF 
02fb0     54 E4 85 F1 | 	sub	objptr, ##28244
02fb4     00 14 06 F6 | 	mov	arg02, #0
02fb8     68 3C B0 FD | 	call	#_compile
02fbc     FD 1E 0A F6 | 	mov	local01, result1 wz
02fc0                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02fc0                 | '   if err<>0 then printerror(err): goto 104
02fc0     0C 00 90 AD |  if_e	jmp	#LR__0138
02fc4     0F 13 02 F6 | 	mov	arg01, local01
02fc8     88 83 B1 FD | 	call	#_printerror
02fcc     90 03 90 FD | 	jmp	#LR__0150
02fd0                 | LR__0138
02fd0                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
02fd0     5A 00 00 FF 
02fd4     1C E4 05 F1 | 	add	objptr, ##46108
02fd8     F2 12 02 FB | 	rdlong	arg01, objptr
02fdc     5A 00 00 FF 
02fe0     1C E4 85 F1 | 	sub	objptr, ##46108
02fe4     77 01 00 FF 
02fe8     F5 14 06 F6 | 	mov	arg02, ##@LR__4901
02fec     34 C8 B1 FD | 	call	#__system___string_cmp
02ff0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ff4     68 03 90 AD |  if_e	jmp	#LR__0150
02ff8     5A 00 00 FF 
02ffc     1C E4 05 F1 | 	add	objptr, ##46108
03000     F2 24 02 FB | 	rdlong	local04, objptr
03004     22 00 00 FF 
03008     D0 E5 85 F1 | 	sub	objptr, ##17872
0300c     F2 24 62 FC | 	wrlong	local04, objptr
03010     08 E4 05 F1 | 	add	objptr, #8
03014     F2 08 68 FC | 	wrlong	#4, objptr
03018     37 00 00 FF 
0301c     54 E4 85 F1 | 	sub	objptr, ##28244
03020     64 DA 9F FD | 	jmp	#LR__0020
03024                 | LR__0139
03024                 | ' 							 
03024                 | ' if linenum>0 andalso (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  
03024     59 00 00 FF 
03028     D0 E5 05 F1 | 	add	objptr, ##46032
0302c     F2 24 02 FB | 	rdlong	local04, objptr
03030     59 00 00 FF 
03034     D0 E5 85 F1 | 	sub	objptr, ##46032
03038     01 24 16 F2 | 	cmp	local04, #1 wc
0303c     D4 00 90 CD |  if_b	jmp	#LR__0141
03040     37 00 00 FF 
03044     54 E4 05 F1 | 	add	objptr, ##28244
03048     F2 26 0A FB | 	rdlong	local05, objptr wz
0304c     37 00 00 FF 
03050     54 E4 85 F1 | 	sub	objptr, ##28244
03054     20 00 90 AD |  if_e	jmp	#LR__0140
03058     37 00 00 FF 
0305c     54 E4 05 F1 | 	add	objptr, ##28244
03060     F2 32 02 FB | 	rdlong	local11, objptr
03064     37 00 00 FF 
03068     54 E4 85 F1 | 	sub	objptr, ##28244
0306c     19 29 02 F6 | 	mov	local06, local11
03070     03 28 0E F2 | 	cmp	local06, #3 wz
03074     9C 00 90 5D |  if_ne	jmp	#LR__0141
03078                 | LR__0140
03078     35 00 00 FF 
0307c     50 E4 05 F1 | 	add	objptr, ##27216
03080     F2 36 02 FB | 	rdlong	local13, objptr
03084     35 00 00 FF 
03088     50 E4 85 F1 | 	sub	objptr, ##27216
0308c     1B 31 02 F6 | 	mov	local10, local13
03090     1B 30 0E F2 | 	cmp	local10, #27 wz
03094     7C 00 90 5D |  if_ne	jmp	#LR__0141
03098     59 00 00 FF 
0309c     D0 E5 05 F1 | 	add	objptr, ##46032
030a0     F2 12 02 FB | 	rdlong	arg01, objptr
030a4     22 00 00 FF 
030a8     7C E5 85 F1 | 	sub	objptr, ##17788
030ac     F2 16 02 FB | 	rdlong	arg03, objptr
030b0     37 00 00 FF 
030b4     54 E4 85 F1 | 	sub	objptr, ##28244
030b8     00 14 06 F6 | 	mov	arg02, #0
030bc     34 3C B0 FD | 	call	#_compile_assign
030c0                 | '   compile_assign(linenum,0,cont)': print "called compile_assign with cont=";cont, "line$=";line$
030c0                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
030c0     5A 00 00 FF 
030c4     1C E4 05 F1 | 	add	objptr, ##46108
030c8     F2 12 02 FB | 	rdlong	arg01, objptr
030cc     5A 00 00 FF 
030d0     1C E4 85 F1 | 	sub	objptr, ##46108
030d4     77 01 00 FF 
030d8     F6 14 06 F6 | 	mov	arg02, ##@LR__4902
030dc     44 C7 B1 FD | 	call	#__system___string_cmp
030e0     00 FA 0D F2 | 	cmp	result1, #0 wz
030e4     78 02 90 AD |  if_e	jmp	#LR__0150
030e8     5A 00 00 FF 
030ec     1C E4 05 F1 | 	add	objptr, ##46108
030f0     F2 24 02 FB | 	rdlong	local04, objptr
030f4     22 00 00 FF 
030f8     D0 E5 85 F1 | 	sub	objptr, ##17872
030fc     F2 24 62 FC | 	wrlong	local04, objptr
03100     08 E4 05 F1 | 	add	objptr, #8
03104     F2 08 68 FC | 	wrlong	#4, objptr
03108     37 00 00 FF 
0310c     54 E4 85 F1 | 	sub	objptr, ##28244
03110     74 D9 9F FD | 	jmp	#LR__0020
03114                 | LR__0141
03114                 | '     							 
03114                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 
03114     59 00 00 FF 
03118     D0 E5 05 F1 | 	add	objptr, ##46032
0311c     F2 24 02 FB | 	rdlong	local04, objptr
03120     59 00 00 FF 
03124     D0 E5 85 F1 | 	sub	objptr, ##46032
03128     01 24 16 F2 | 	cmp	local04, #1 wc
0312c     CC 00 90 CD |  if_b	jmp	#LR__0142
03130     37 00 00 FF 
03134     54 E4 05 F1 | 	add	objptr, ##28244
03138     F2 26 02 FB | 	rdlong	local05, objptr
0313c     37 00 00 FF 
03140     54 E4 85 F1 | 	sub	objptr, ##28244
03144     01 26 0E F2 | 	cmp	local05, #1 wz
03148     37 00 00 5F 
0314c     54 E4 05 51 |  if_ne	add	objptr, ##28244
03150     F2 32 02 5B |  if_ne	rdlong	local11, objptr
03154     37 00 00 5F 
03158     54 E4 85 51 |  if_ne	sub	objptr, ##28244
0315c     02 32 0E 52 |  if_ne	cmp	local11, #2 wz
03160     35 00 00 AF 
03164     48 E4 05 A1 |  if_e	add	objptr, ##27208
03168     F2 36 02 AB |  if_e	rdlong	local13, objptr
0316c     35 00 00 AF 
03170     48 E4 85 A1 |  if_e	sub	objptr, ##27208
03174     1B 31 02 A6 |  if_e	mov	local10, local13
03178     1B 30 0E A2 |  if_e	cmp	local10, #27 wz
0317c     7C 00 90 5D |  if_ne	jmp	#LR__0142
03180     59 00 00 FF 
03184     D0 E5 05 F1 | 	add	objptr, ##46032
03188     F2 12 02 FB | 	rdlong	arg01, objptr
0318c     22 00 00 FF 
03190     7C E5 85 F1 | 	sub	objptr, ##17788
03194     F2 16 02 FB | 	rdlong	arg03, objptr
03198     37 00 00 FF 
0319c     54 E4 85 F1 | 	sub	objptr, ##28244
031a0     00 14 06 F6 | 	mov	arg02, #0
031a4     4C 3B B0 FD | 	call	#_compile_assign
031a8                 | '   compile_assign(linenum,0,cont) ': print "called compile_assign with cont=";cont, "line$=";line$
031a8                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								'<-- TODO: add a line to a program
031a8     5A 00 00 FF 
031ac     1C E4 05 F1 | 	add	objptr, ##46108
031b0     F2 12 02 FB | 	rdlong	arg01, objptr
031b4     5A 00 00 FF 
031b8     1C E4 85 F1 | 	sub	objptr, ##46108
031bc     77 01 00 FF 
031c0     F7 14 06 F6 | 	mov	arg02, ##@LR__4903
031c4     5C C6 B1 FD | 	call	#__system___string_cmp
031c8     00 FA 0D F2 | 	cmp	result1, #0 wz
031cc     90 01 90 AD |  if_e	jmp	#LR__0150
031d0     5A 00 00 FF 
031d4     1C E4 05 F1 | 	add	objptr, ##46108
031d8     F2 24 02 FB | 	rdlong	local04, objptr
031dc     22 00 00 FF 
031e0     D0 E5 85 F1 | 	sub	objptr, ##17872
031e4     F2 24 62 FC | 	wrlong	local04, objptr
031e8     08 E4 05 F1 | 	add	objptr, #8
031ec     F2 08 68 FC | 	wrlong	#4, objptr
031f0     37 00 00 FF 
031f4     54 E4 85 F1 | 	sub	objptr, ##28244
031f8     8C D8 9F FD | 	jmp	#LR__0020
031fc                 | LR__0142
031fc                 | ' 
031fc                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_eq then compile_assign(0) : goto 103    					' assign a variable
031fc     35 00 00 FF 
03200     40 E4 05 F1 | 	add	objptr, ##27200
03204     F2 24 02 FB | 	rdlong	local04, objptr
03208     35 00 00 FF 
0320c     40 E4 85 F1 | 	sub	objptr, ##27200
03210     01 00 00 FF 
03214     04 24 0E F2 | 	cmp	local04, ##516 wz
03218     35 00 00 AF 
0321c     48 E4 05 A1 |  if_e	add	objptr, ##27208
03220     F2 2E 02 AB |  if_e	rdlong	local09, objptr
03224     35 00 00 AF 
03228     48 E4 85 A1 |  if_e	sub	objptr, ##27208
0322c     1B 2E 0E A2 |  if_e	cmp	local09, #27 wz
03230     14 00 90 5D |  if_ne	jmp	#LR__0143
03234     00 12 06 F6 | 	mov	arg01, #0
03238     00 14 06 F6 | 	mov	arg02, #0
0323c     00 16 06 F6 | 	mov	arg03, #0
03240     B0 3A B0 FD | 	call	#_compile_assign
03244     90 00 90 FD | 	jmp	#LR__0145
03248                 | LR__0143
03248                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_rpar then print " User functions and arrays not yet implemented" : goto 101
03248     35 00 00 FF 
0324c     40 E4 05 F1 | 	add	objptr, ##27200
03250     F2 24 02 FB | 	rdlong	local04, objptr
03254     35 00 00 FF 
03258     40 E4 85 F1 | 	sub	objptr, ##27200
0325c     01 00 00 FF 
03260     04 24 0E F2 | 	cmp	local04, ##516 wz
03264     35 00 00 AF 
03268     48 E4 05 A1 |  if_e	add	objptr, ##27208
0326c     F2 2E 02 AB |  if_e	rdlong	local09, objptr
03270     35 00 00 AF 
03274     48 E4 85 A1 |  if_e	sub	objptr, ##27208
03278     14 2E 0E A2 |  if_e	cmp	local09, #20 wz
0327c     44 00 90 5D |  if_ne	jmp	#LR__0144
03280     00 12 06 F6 | 	mov	arg01, #0
03284     0C 1F B2 FD | 	call	#__system___getiolock_0508
03288     FD 12 02 F6 | 	mov	arg01, result1
0328c     6C C5 B1 FD | 	call	#__system___lockmem
03290     77 01 00 FF 
03294     F8 14 06 F6 | 	mov	arg02, ##@LR__4904
03298     00 12 06 F6 | 	mov	arg01, #0
0329c     00 16 06 F6 | 	mov	arg03, #0
032a0     4C D2 B1 FD | 	call	#__system___basic_print_string
032a4     00 12 06 F6 | 	mov	arg01, #0
032a8     0A 14 06 F6 | 	mov	arg02, #10
032ac     00 16 06 F6 | 	mov	arg03, #0
032b0     E4 D1 B1 FD | 	call	#__system___basic_print_char
032b4     00 12 06 F6 | 	mov	arg01, #0
032b8     D8 1E B2 FD | 	call	#__system___getiolock_0508
032bc     FD 00 68 FC | 	wrlong	#0, result1
032c0     7C 00 90 FD | 	jmp	#LR__0149
032c4                 | LR__0144
032c4     00 12 06 F6 | 	mov	arg01, #0
032c8     00 14 06 F6 | 	mov	arg02, #0
032cc     00 16 06 F6 | 	mov	arg03, #0
032d0     50 39 B0 FD | 	call	#_compile
032d4     FD 1E 02 F6 | 	mov	local01, result1
032d8                 | LR__0145
032d8                 | ' 
032d8                 | ' ' if we are here, this is not a program line to add, so try to execute this
032d8                 | ' 
032d8                 | ' err=compile(0) : '' execute(0) ' print "  this is a command to execute"  ''' param=line to compile
032d8                 | ' 103  'for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, : next i
032d8                 | ' if err=0 then execute_line() else printerror(err)
032d8     00 1E 0E F2 | 	cmp	local01, #0 wz
032dc     0C 00 90 5D |  if_ne	jmp	#LR__0146
032e0     00 12 06 F6 | 	mov	arg01, #0
032e4     50 77 B0 FD | 	call	#_execute_line
032e8     08 00 90 FD | 	jmp	#LR__0147
032ec                 | LR__0146
032ec     0F 13 02 F6 | 	mov	arg01, local01
032f0     60 80 B1 FD | 	call	#_printerror
032f4                 | LR__0147
032f4                 | ' if rest$<>"" then line$=rest$:  goto 108 
032f4     5A 00 00 FF 
032f8     1C E4 05 F1 | 	add	objptr, ##46108
032fc     F2 12 02 FB | 	rdlong	arg01, objptr
03300     5A 00 00 FF 
03304     1C E4 85 F1 | 	sub	objptr, ##46108
03308     77 01 00 FF 
0330c     27 15 06 F6 | 	mov	arg02, ##@LR__4905
03310     10 C5 B1 FD | 	call	#__system___string_cmp
03314     00 FA 0D F2 | 	cmp	result1, #0 wz
03318     24 00 90 AD |  if_e	jmp	#LR__0148
0331c     5A 00 00 FF 
03320     1C E4 05 F1 | 	add	objptr, ##46108
03324     F2 24 02 FB | 	rdlong	local04, objptr
03328     22 00 00 FF 
0332c     D0 E5 85 F1 | 	sub	objptr, ##17872
03330     F2 24 62 FC | 	wrlong	local04, objptr
03334     37 00 00 FF 
03338     4C E4 85 F1 | 	sub	objptr, ##28236
0333c     48 D7 9F FD | 	jmp	#LR__0020
03340                 | LR__0148
03340                 | LR__0149
03340     77 01 00 FF 
03344     28 13 06 F6 | 	mov	arg01, ##@LR__4906
03348                 | ' 
03348                 | ' write(text)
03348     C8 B1 B1 FD | 	call	#_hg010b_spin2_write
0334c                 | ' crlf
0334c     90 B4 B1 FD | 	call	#_hg010b_spin2_crlf
03350     77 01 00 FF 
03354     29 13 06 F6 | 	mov	arg01, ##@LR__4907
03358                 | ' 
03358                 | ' write(text)
03358     B8 B1 B1 FD | 	call	#_hg010b_spin2_write
0335c                 | ' crlf
0335c     80 B4 B1 FD | 	call	#_hg010b_spin2_crlf
03360                 | LR__0150
03360     A7 F0 03 F6 | 	mov	ptra, fp
03364     B2 00 A0 FD | 	call	#popregs_
03368                 | _interpret_ret
03368     2D 00 64 FD | 	ret
0336c                 | 
0336c                 | ' 
0336c                 | ' 
0336c                 | ' '------------------------------ Helper functions for the tokenizer -------------------------------------------
0336c                 | ' 
0336c                 | ' function isoperator(s as string) as ubyte
0336c                 | _isoperator
0336c     01 4A 05 F6 | 	mov	COUNT_, #1
03370     A8 00 A0 FD | 	call	#pushregs_
03374                 | ' 
03374                 | ' select case s
03374     09 1F 02 F6 | 	mov	local01, arg01
03378     77 01 00 FF 
0337c     2F 15 06 F6 | 	mov	arg02, ##@LR__4908
03380     0F 13 02 F6 | 	mov	arg01, local01
03384     9C C4 B1 FD | 	call	#__system___string_cmp
03388     00 FA 0D F2 | 	cmp	result1, #0 wz
0338c     FC 01 90 AD |  if_e	jmp	#LR__0160
03390     77 01 00 FF 
03394     31 15 06 F6 | 	mov	arg02, ##@LR__4909
03398     0F 13 02 F6 | 	mov	arg01, local01
0339c     84 C4 B1 FD | 	call	#__system___string_cmp
033a0     00 FA 0D F2 | 	cmp	result1, #0 wz
033a4     EC 01 90 AD |  if_e	jmp	#LR__0161
033a8     77 01 00 FF 
033ac     33 15 06 F6 | 	mov	arg02, ##@LR__4910
033b0     0F 13 02 F6 | 	mov	arg01, local01
033b4     6C C4 B1 FD | 	call	#__system___string_cmp
033b8     00 FA 0D F2 | 	cmp	result1, #0 wz
033bc     DC 01 90 AD |  if_e	jmp	#LR__0162
033c0     77 01 00 FF 
033c4     36 15 06 F6 | 	mov	arg02, ##@LR__4911
033c8     0F 13 02 F6 | 	mov	arg01, local01
033cc     54 C4 B1 FD | 	call	#__system___string_cmp
033d0     00 FA 0D F2 | 	cmp	result1, #0 wz
033d4     CC 01 90 AD |  if_e	jmp	#LR__0163
033d8     77 01 00 FF 
033dc     3A 15 06 F6 | 	mov	arg02, ##@LR__4912
033e0     0F 13 02 F6 | 	mov	arg01, local01
033e4     3C C4 B1 FD | 	call	#__system___string_cmp
033e8     00 FA 0D F2 | 	cmp	result1, #0 wz
033ec     BC 01 90 AD |  if_e	jmp	#LR__0164
033f0     77 01 00 FF 
033f4     3C 15 06 F6 | 	mov	arg02, ##@LR__4913
033f8     0F 13 02 F6 | 	mov	arg01, local01
033fc     24 C4 B1 FD | 	call	#__system___string_cmp
03400     00 FA 0D F2 | 	cmp	result1, #0 wz
03404     AC 01 90 AD |  if_e	jmp	#LR__0165
03408     77 01 00 FF 
0340c     3E 15 06 F6 | 	mov	arg02, ##@LR__4914
03410     0F 13 02 F6 | 	mov	arg01, local01
03414     0C C4 B1 FD | 	call	#__system___string_cmp
03418     00 FA 0D F2 | 	cmp	result1, #0 wz
0341c     9C 01 90 AD |  if_e	jmp	#LR__0166
03420     77 01 00 FF 
03424     42 15 06 F6 | 	mov	arg02, ##@LR__4915
03428     0F 13 02 F6 | 	mov	arg01, local01
0342c     F4 C3 B1 FD | 	call	#__system___string_cmp
03430     00 FA 0D F2 | 	cmp	result1, #0 wz
03434     8C 01 90 AD |  if_e	jmp	#LR__0167
03438     77 01 00 FF 
0343c     46 15 06 F6 | 	mov	arg02, ##@LR__4916
03440     0F 13 02 F6 | 	mov	arg01, local01
03444     DC C3 B1 FD | 	call	#__system___string_cmp
03448     00 FA 0D F2 | 	cmp	result1, #0 wz
0344c     7C 01 90 AD |  if_e	jmp	#LR__0168
03450     77 01 00 FF 
03454     4A 15 06 F6 | 	mov	arg02, ##@LR__4917
03458     0F 13 02 F6 | 	mov	arg01, local01
0345c     C4 C3 B1 FD | 	call	#__system___string_cmp
03460     00 FA 0D F2 | 	cmp	result1, #0 wz
03464     6C 01 90 AD |  if_e	jmp	#LR__0169
03468     77 01 00 FF 
0346c     4E 15 06 F6 | 	mov	arg02, ##@LR__4918
03470     0F 13 02 F6 | 	mov	arg01, local01
03474     AC C3 B1 FD | 	call	#__system___string_cmp
03478     00 FA 0D F2 | 	cmp	result1, #0 wz
0347c     5C 01 90 AD |  if_e	jmp	#LR__0170
03480     77 01 00 FF 
03484     52 15 06 F6 | 	mov	arg02, ##@LR__4919
03488     0F 13 02 F6 | 	mov	arg01, local01
0348c     94 C3 B1 FD | 	call	#__system___string_cmp
03490     00 FA 0D F2 | 	cmp	result1, #0 wz
03494     4C 01 90 AD |  if_e	jmp	#LR__0171
03498     77 01 00 FF 
0349c     54 15 06 F6 | 	mov	arg02, ##@LR__4920
034a0     0F 13 02 F6 | 	mov	arg01, local01
034a4     7C C3 B1 FD | 	call	#__system___string_cmp
034a8     00 FA 0D F2 | 	cmp	result1, #0 wz
034ac     3C 01 90 AD |  if_e	jmp	#LR__0172
034b0     77 01 00 FF 
034b4     58 15 06 F6 | 	mov	arg02, ##@LR__4921
034b8     0F 13 02 F6 | 	mov	arg01, local01
034bc     64 C3 B1 FD | 	call	#__system___string_cmp
034c0     00 FA 0D F2 | 	cmp	result1, #0 wz
034c4     2C 01 90 AD |  if_e	jmp	#LR__0173
034c8     77 01 00 FF 
034cc     5A 15 06 F6 | 	mov	arg02, ##@LR__4922
034d0     0F 13 02 F6 | 	mov	arg01, local01
034d4     4C C3 B1 FD | 	call	#__system___string_cmp
034d8     00 FA 0D F2 | 	cmp	result1, #0 wz
034dc     1C 01 90 AD |  if_e	jmp	#LR__0174
034e0     77 01 00 FF 
034e4     5C 15 06 F6 | 	mov	arg02, ##@LR__4923
034e8     0F 13 02 F6 | 	mov	arg01, local01
034ec     34 C3 B1 FD | 	call	#__system___string_cmp
034f0     00 FA 0D F2 | 	cmp	result1, #0 wz
034f4     0C 01 90 AD |  if_e	jmp	#LR__0175
034f8     77 01 00 FF 
034fc     5F 15 06 F6 | 	mov	arg02, ##@LR__4924
03500     0F 13 02 F6 | 	mov	arg01, local01
03504     1C C3 B1 FD | 	call	#__system___string_cmp
03508     00 FA 0D F2 | 	cmp	result1, #0 wz
0350c     FC 00 90 AD |  if_e	jmp	#LR__0176
03510     77 01 00 FF 
03514     62 15 06 F6 | 	mov	arg02, ##@LR__4925
03518     0F 13 02 F6 | 	mov	arg01, local01
0351c     04 C3 B1 FD | 	call	#__system___string_cmp
03520     00 FA 0D F2 | 	cmp	result1, #0 wz
03524     EC 00 90 AD |  if_e	jmp	#LR__0177
03528     77 01 00 FF 
0352c     64 15 06 F6 | 	mov	arg02, ##@LR__4926
03530     0F 13 02 F6 | 	mov	arg01, local01
03534     EC C2 B1 FD | 	call	#__system___string_cmp
03538     00 FA 0D F2 | 	cmp	result1, #0 wz
0353c     DC 00 90 AD |  if_e	jmp	#LR__0178
03540     77 01 00 FF 
03544     66 15 06 F6 | 	mov	arg02, ##@LR__4927
03548     0F 13 02 F6 | 	mov	arg01, local01
0354c     D4 C2 B1 FD | 	call	#__system___string_cmp
03550     00 FA 0D F2 | 	cmp	result1, #0 wz
03554     CC 00 90 AD |  if_e	jmp	#LR__0179
03558     77 01 00 FF 
0355c     69 15 06 F6 | 	mov	arg02, ##@LR__4928
03560     0F 13 02 F6 | 	mov	arg01, local01
03564     BC C2 B1 FD | 	call	#__system___string_cmp
03568     00 FA 0D F2 | 	cmp	result1, #0 wz
0356c     BC 00 90 AD |  if_e	jmp	#LR__0180
03570     77 01 00 FF 
03574     6C 15 06 F6 | 	mov	arg02, ##@LR__4929
03578     0F 13 02 F6 | 	mov	arg01, local01
0357c     A4 C2 B1 FD | 	call	#__system___string_cmp
03580     00 FA 0D F2 | 	cmp	result1, #0 wz
03584     AC 00 90 AD |  if_e	jmp	#LR__0181
03588     B0 00 90 FD | 	jmp	#LR__0182
0358c                 | LR__0160
0358c     01 FA 05 F6 | 	mov	result1, #1
03590     AC 00 90 FD | 	jmp	#LR__0183
03594                 | LR__0161
03594     02 FA 05 F6 | 	mov	result1, #2
03598     A4 00 90 FD | 	jmp	#LR__0183
0359c                 | LR__0162
0359c     03 FA 05 F6 | 	mov	result1, #3
035a0     9C 00 90 FD | 	jmp	#LR__0183
035a4                 | LR__0163
035a4     04 FA 05 F6 | 	mov	result1, #4
035a8     94 00 90 FD | 	jmp	#LR__0183
035ac                 | LR__0164
035ac     05 FA 05 F6 | 	mov	result1, #5
035b0     8C 00 90 FD | 	jmp	#LR__0183
035b4                 | LR__0165
035b4     06 FA 05 F6 | 	mov	result1, #6
035b8     84 00 90 FD | 	jmp	#LR__0183
035bc                 | LR__0166
035bc     07 FA 05 F6 | 	mov	result1, #7
035c0     7C 00 90 FD | 	jmp	#LR__0183
035c4                 | LR__0167
035c4     08 FA 05 F6 | 	mov	result1, #8
035c8     74 00 90 FD | 	jmp	#LR__0183
035cc                 | LR__0168
035cc     09 FA 05 F6 | 	mov	result1, #9
035d0     6C 00 90 FD | 	jmp	#LR__0183
035d4                 | LR__0169
035d4     0A FA 05 F6 | 	mov	result1, #10
035d8     64 00 90 FD | 	jmp	#LR__0183
035dc                 | LR__0170
035dc     0B FA 05 F6 | 	mov	result1, #11
035e0     5C 00 90 FD | 	jmp	#LR__0183
035e4                 | LR__0171
035e4     0C FA 05 F6 | 	mov	result1, #12
035e8     54 00 90 FD | 	jmp	#LR__0183
035ec                 | LR__0172
035ec     0D FA 05 F6 | 	mov	result1, #13
035f0     4C 00 90 FD | 	jmp	#LR__0183
035f4                 | LR__0173
035f4     0E FA 05 F6 | 	mov	result1, #14
035f8     44 00 90 FD | 	jmp	#LR__0183
035fc                 | LR__0174
035fc     1B FA 05 F6 | 	mov	result1, #27
03600     3C 00 90 FD | 	jmp	#LR__0183
03604                 | LR__0175
03604     27 FA 05 F6 | 	mov	result1, #39
03608     34 00 90 FD | 	jmp	#LR__0183
0360c                 | LR__0176
0360c     26 FA 05 F6 | 	mov	result1, #38
03610     2C 00 90 FD | 	jmp	#LR__0183
03614                 | LR__0177
03614     10 FA 05 F6 | 	mov	result1, #16
03618     24 00 90 FD | 	jmp	#LR__0183
0361c                 | LR__0178
0361c     0F FA 05 F6 | 	mov	result1, #15
03620     1C 00 90 FD | 	jmp	#LR__0183
03624                 | LR__0179
03624     2A FA 05 F6 | 	mov	result1, #42
03628     14 00 90 FD | 	jmp	#LR__0183
0362c                 | LR__0180
0362c     28 FA 05 F6 | 	mov	result1, #40
03630     0C 00 90 FD | 	jmp	#LR__0183
03634                 | LR__0181
03634     29 FA 05 F6 | 	mov	result1, #41
03638     04 00 90 FD | 	jmp	#LR__0183
0363c                 | LR__0182
0363c     00 FA 05 F6 | 	mov	result1, #0
03640                 | LR__0183
03640     A7 F0 03 F6 | 	mov	ptra, fp
03644     B2 00 A0 FD | 	call	#popregs_
03648                 | _isoperator_ret
03648     2D 00 64 FD | 	ret
0364c                 | 
0364c                 | ' 
0364c                 | ' 
0364c                 | ' function isnotename(s as string) as ulong
0364c                 | _isnotename
0364c     07 4A 05 F6 | 	mov	COUNT_, #7
03650     A8 00 A0 FD | 	call	#pushregs_
03654                 | ' if left$(s,1)<>"#" then return 0
03654     09 1F 02 F6 | 	mov	local01, arg01
03658     01 14 06 F6 | 	mov	arg02, #1
0365c     AC E1 B1 FD | 	call	#__system__Left_S
03660     FD 12 02 F6 | 	mov	arg01, result1
03664     77 01 00 FF 
03668     6F 15 06 F6 | 	mov	arg02, ##@LR__4930
0366c     B4 C1 B1 FD | 	call	#__system___string_cmp
03670     00 FA 0D F2 | 	cmp	result1, #0 wz
03674     00 FA 05 56 |  if_ne	mov	result1, #0
03678     30 03 90 5D |  if_ne	jmp	#LR__0213
0367c                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
0367c     0F 13 02 F6 | 	mov	arg01, local01
03680     03 14 06 F6 | 	mov	arg02, #3
03684     01 16 06 F6 | 	mov	arg03, #1
03688     98 E2 B1 FD | 	call	#__system__Mid_S
0368c     FD 12 02 F6 | 	mov	arg01, result1
03690     77 01 00 FF 
03694     71 15 06 F6 | 	mov	arg02, ##@LR__4931
03698     88 C1 B1 FD | 	call	#__system___string_cmp
0369c     00 FA 0D F2 | 	cmp	result1, #0 wz
036a0     18 00 90 5D |  if_ne	jmp	#LR__0190
036a4     0F 13 02 F6 | 	mov	arg01, local01
036a8     02 14 06 F6 | 	mov	arg02, #2
036ac     02 16 06 F6 | 	mov	arg03, #2
036b0     70 E2 B1 FD | 	call	#__system__Mid_S
036b4     FD 20 02 F6 | 	mov	local02, result1
036b8     14 00 90 FD | 	jmp	#LR__0191
036bc                 | LR__0190
036bc     0F 13 02 F6 | 	mov	arg01, local01
036c0     02 14 06 F6 | 	mov	arg02, #2
036c4     01 16 06 F6 | 	mov	arg03, #1
036c8     58 E2 B1 FD | 	call	#__system__Mid_S
036cc     FD 20 02 F6 | 	mov	local02, result1
036d0                 | LR__0191
036d0                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
036d0     0F 13 02 F6 | 	mov	arg01, local01
036d4     09 23 02 F6 | 	mov	local03, arg01
036d8     97 06 48 FB | 	callpa	#(@LR__0193-@LR__0192)>>2,fcache_load_ptr_
036dc                 | LR__0192
036dc     11 FB C9 FA | 	rdbyte	result1, local03 wz
036e0     01 22 06 51 |  if_ne	add	local03, #1
036e4     F4 FF 9F 5D |  if_ne	jmp	#LR__0192
036e8                 | LR__0193
036e8     09 23 82 F1 | 	sub	local03, arg01
036ec     11 15 02 F6 | 	mov	arg02, local03
036f0     01 14 86 F1 | 	sub	arg02, #1
036f4     0F 13 02 F6 | 	mov	arg01, local01
036f8     01 16 06 F6 | 	mov	arg03, #1
036fc     24 E2 B1 FD | 	call	#__system__Mid_S
03700     FD 12 02 F6 | 	mov	arg01, result1
03704     77 01 00 FF 
03708     73 15 06 F6 | 	mov	arg02, ##@LR__4932
0370c     14 C1 B1 FD | 	call	#__system___string_cmp
03710     00 FA 0D F2 | 	cmp	result1, #0 wz
03714     28 00 90 AD |  if_e	jmp	#LR__0194
03718     0F 13 02 F6 | 	mov	arg01, local01
0371c     01 14 06 F6 | 	mov	arg02, #1
03720     70 E1 B1 FD | 	call	#__system__Right_S
03724     FD 12 02 F6 | 	mov	arg01, result1
03728     00 F4 B1 FD | 	call	#__system____builtin_atof
0372c     FD 12 02 F6 | 	mov	arg01, result1
03730     00 14 06 F6 | 	mov	arg02, #0
03734     D4 F0 B1 FD | 	call	#__system___float_tointeger
03738     FD 24 02 F6 | 	mov	local04, result1
0373c     34 00 90 FD | 	jmp	#LR__0195
03740                 | LR__0194
03740     0F 13 02 F6 | 	mov	arg01, local01
03744     01 14 06 F6 | 	mov	arg02, #1
03748     48 E1 B1 FD | 	call	#__system__Right_S
0374c     FD 12 02 F6 | 	mov	arg01, result1
03750     D8 F3 B1 FD | 	call	#__system____builtin_atof
03754     FD 14 02 F6 | 	mov	arg02, result1
03758     00 C0 5F FF 
0375c     00 12 06 F6 | 	mov	arg01, ##-1082130432
03760     E0 EB B1 FD | 	call	#__system___float_mul
03764     FD 12 02 F6 | 	mov	arg01, result1
03768     00 14 06 F6 | 	mov	arg02, #0
0376c     9C F0 B1 FD | 	call	#__system___float_tointeger
03770     FD 24 02 F6 | 	mov	local04, result1
03774                 | LR__0195
03774                 | ' 
03774                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
03774     00 24 0E F2 | 	cmp	local04, #0 wz
03778     24 00 90 5D |  if_ne	jmp	#LR__0196
0377c     0F 13 02 F6 | 	mov	arg01, local01
03780     01 14 06 F6 | 	mov	arg02, #1
03784     0C E1 B1 FD | 	call	#__system__Right_S
03788     FD 12 02 F6 | 	mov	arg01, result1
0378c     77 01 00 FF 
03790     75 15 06 F6 | 	mov	arg02, ##@LR__4933
03794     8C C0 B1 FD | 	call	#__system___string_cmp
03798     00 FA 0D F2 | 	cmp	result1, #0 wz
0379c     04 24 06 56 |  if_ne	mov	local04, #4
037a0                 | LR__0196
037a0                 | ' 
037a0                 | ' select case s1
037a0     10 27 02 F6 | 	mov	local05, local02
037a4     77 01 00 FF 
037a8     77 15 06 F6 | 	mov	arg02, ##@LR__4934
037ac     13 13 02 F6 | 	mov	arg01, local05
037b0     70 C0 B1 FD | 	call	#__system___string_cmp
037b4     00 FA 0D F2 | 	cmp	result1, #0 wz
037b8     24 01 90 AD |  if_e	jmp	#LR__0197
037bc     77 01 00 FF 
037c0     79 15 06 F6 | 	mov	arg02, ##@LR__4935
037c4     13 13 02 F6 | 	mov	arg01, local05
037c8     58 C0 B1 FD | 	call	#__system___string_cmp
037cc     00 FA 0D F2 | 	cmp	result1, #0 wz
037d0     18 01 90 AD |  if_e	jmp	#LR__0198
037d4     77 01 00 FF 
037d8     7C 15 06 F6 | 	mov	arg02, ##@LR__4936
037dc     13 13 02 F6 | 	mov	arg01, local05
037e0     40 C0 B1 FD | 	call	#__system___string_cmp
037e4     00 FA 0D F2 | 	cmp	result1, #0 wz
037e8     0C 01 90 AD |  if_e	jmp	#LR__0199
037ec     77 01 00 FF 
037f0     7E 15 06 F6 | 	mov	arg02, ##@LR__4937
037f4     13 13 02 F6 | 	mov	arg01, local05
037f8     28 C0 B1 FD | 	call	#__system___string_cmp
037fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03800     00 01 90 AD |  if_e	jmp	#LR__0200
03804     77 01 00 FF 
03808     81 15 06 F6 | 	mov	arg02, ##@LR__4938
0380c     13 13 02 F6 | 	mov	arg01, local05
03810     10 C0 B1 FD | 	call	#__system___string_cmp
03814     00 FA 0D F2 | 	cmp	result1, #0 wz
03818     F4 00 90 AD |  if_e	jmp	#LR__0201
0381c     77 01 00 FF 
03820     83 15 06 F6 | 	mov	arg02, ##@LR__4939
03824     13 13 02 F6 | 	mov	arg01, local05
03828     F8 BF B1 FD | 	call	#__system___string_cmp
0382c     00 FA 0D F2 | 	cmp	result1, #0 wz
03830     E8 00 90 AD |  if_e	jmp	#LR__0202
03834     77 01 00 FF 
03838     85 15 06 F6 | 	mov	arg02, ##@LR__4940
0383c     13 13 02 F6 | 	mov	arg01, local05
03840     E0 BF B1 FD | 	call	#__system___string_cmp
03844     00 FA 0D F2 | 	cmp	result1, #0 wz
03848     DC 00 90 AD |  if_e	jmp	#LR__0203
0384c     77 01 00 FF 
03850     88 15 06 F6 | 	mov	arg02, ##@LR__4941
03854     13 13 02 F6 | 	mov	arg01, local05
03858     C8 BF B1 FD | 	call	#__system___string_cmp
0385c     00 FA 0D F2 | 	cmp	result1, #0 wz
03860     D0 00 90 AD |  if_e	jmp	#LR__0204
03864     77 01 00 FF 
03868     8A 15 06 F6 | 	mov	arg02, ##@LR__4942
0386c     13 13 02 F6 | 	mov	arg01, local05
03870     B0 BF B1 FD | 	call	#__system___string_cmp
03874     00 FA 0D F2 | 	cmp	result1, #0 wz
03878     C4 00 90 AD |  if_e	jmp	#LR__0205
0387c     77 01 00 FF 
03880     8D 15 06 F6 | 	mov	arg02, ##@LR__4943
03884     13 13 02 F6 | 	mov	arg01, local05
03888     98 BF B1 FD | 	call	#__system___string_cmp
0388c     00 FA 0D F2 | 	cmp	result1, #0 wz
03890     B8 00 90 AD |  if_e	jmp	#LR__0206
03894     77 01 00 FF 
03898     8F 15 06 F6 | 	mov	arg02, ##@LR__4944
0389c     13 13 02 F6 | 	mov	arg01, local05
038a0     80 BF B1 FD | 	call	#__system___string_cmp
038a4     00 FA 0D F2 | 	cmp	result1, #0 wz
038a8     AC 00 90 AD |  if_e	jmp	#LR__0207
038ac     77 01 00 FF 
038b0     92 15 06 F6 | 	mov	arg02, ##@LR__4945
038b4     13 13 02 F6 | 	mov	arg01, local05
038b8     68 BF B1 FD | 	call	#__system___string_cmp
038bc     00 FA 0D F2 | 	cmp	result1, #0 wz
038c0     A0 00 90 AD |  if_e	jmp	#LR__0208
038c4     77 01 00 FF 
038c8     94 15 06 F6 | 	mov	arg02, ##@LR__4946
038cc     13 13 02 F6 | 	mov	arg01, local05
038d0     50 BF B1 FD | 	call	#__system___string_cmp
038d4     00 FA 0D F2 | 	cmp	result1, #0 wz
038d8     94 00 90 AD |  if_e	jmp	#LR__0209
038dc     9C 00 90 FD | 	jmp	#LR__0210
038e0                 | LR__0197
038e0     01 00 00 FF 
038e4     00 29 06 F6 | 	mov	local06, ##768
038e8     98 00 90 FD | 	jmp	#LR__0211
038ec                 | LR__0198
038ec     01 00 00 FF 
038f0     01 29 06 F6 | 	mov	local06, ##769
038f4     8C 00 90 FD | 	jmp	#LR__0211
038f8                 | LR__0199
038f8     01 00 00 FF 
038fc     02 29 06 F6 | 	mov	local06, ##770
03900     80 00 90 FD | 	jmp	#LR__0211
03904                 | LR__0200
03904     01 00 00 FF 
03908     03 29 06 F6 | 	mov	local06, ##771
0390c     74 00 90 FD | 	jmp	#LR__0211
03910                 | LR__0201
03910     01 00 00 FF 
03914     04 29 06 F6 | 	mov	local06, ##772
03918     68 00 90 FD | 	jmp	#LR__0211
0391c                 | LR__0202
0391c     01 00 00 FF 
03920     05 29 06 F6 | 	mov	local06, ##773
03924     5C 00 90 FD | 	jmp	#LR__0211
03928                 | LR__0203
03928     01 00 00 FF 
0392c     06 29 06 F6 | 	mov	local06, ##774
03930     50 00 90 FD | 	jmp	#LR__0211
03934                 | LR__0204
03934     01 00 00 FF 
03938     07 29 06 F6 | 	mov	local06, ##775
0393c     44 00 90 FD | 	jmp	#LR__0211
03940                 | LR__0205
03940     01 00 00 FF 
03944     08 29 06 F6 | 	mov	local06, ##776
03948     38 00 90 FD | 	jmp	#LR__0211
0394c                 | LR__0206
0394c     01 00 00 FF 
03950     09 29 06 F6 | 	mov	local06, ##777
03954     2C 00 90 FD | 	jmp	#LR__0211
03958                 | LR__0207
03958     01 00 00 FF 
0395c     0A 29 06 F6 | 	mov	local06, ##778
03960     20 00 90 FD | 	jmp	#LR__0211
03964                 | LR__0208
03964     01 00 00 FF 
03968     0B 29 06 F6 | 	mov	local06, ##779
0396c     14 00 90 FD | 	jmp	#LR__0211
03970                 | LR__0209
03970     01 00 00 FF 
03974     0B 29 06 F6 | 	mov	local06, ##779
03978     08 00 90 FD | 	jmp	#LR__0211
0397c                 | LR__0210
0397c     00 FA 05 F6 | 	mov	result1, #0
03980     28 00 90 FD | 	jmp	#LR__0213
03984                 | LR__0211
03984                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
03984     FF FF 7F FF 
03988     FF 25 56 F2 | 	cmps	local04, ##-1 wc
0398c     18 00 90 CD |  if_b	jmp	#LR__0212
03990     0A 24 56 F2 | 	cmps	local04, #10 wc
03994     12 2B 02 C6 |  if_b	mov	local07, local04
03998     01 2A 66 C0 |  if_b	shl	local07, #1
0399c     12 2B 02 C1 |  if_b	add	local07, local04
039a0     02 2A 66 C0 |  if_b	shl	local07, #2
039a4     15 29 02 C1 |  if_b	add	local06, local07
039a8                 | LR__0212
039a8                 | ' return token
039a8     14 FB 01 F6 | 	mov	result1, local06
039ac                 | LR__0213
039ac     A7 F0 03 F6 | 	mov	ptra, fp
039b0     B2 00 A0 FD | 	call	#popregs_
039b4                 | _isnotename_ret
039b4     2D 00 64 FD | 	ret
039b8                 | 
039b8                 | ' 
039b8                 | ' 
039b8                 | ' function isseparator(s as string) as ubyte
039b8                 | _isseparator
039b8     01 4A 05 F6 | 	mov	COUNT_, #1
039bc     A8 00 A0 FD | 	call	#pushregs_
039c0                 | ' 
039c0                 | ' select case s
039c0     09 1F 02 F6 | 	mov	local01, arg01
039c4     77 01 00 FF 
039c8     96 15 06 F6 | 	mov	arg02, ##@LR__4947
039cc     0F 13 02 F6 | 	mov	arg01, local01
039d0     50 BE B1 FD | 	call	#__system___string_cmp
039d4     00 FA 0D F2 | 	cmp	result1, #0 wz
039d8     54 01 90 AD |  if_e	jmp	#LR__0220
039dc     77 01 00 FF 
039e0     98 15 06 F6 | 	mov	arg02, ##@LR__4948
039e4     0F 13 02 F6 | 	mov	arg01, local01
039e8     38 BE B1 FD | 	call	#__system___string_cmp
039ec     00 FA 0D F2 | 	cmp	result1, #0 wz
039f0     44 01 90 AD |  if_e	jmp	#LR__0221
039f4     77 01 00 FF 
039f8     9A 15 06 F6 | 	mov	arg02, ##@LR__4949
039fc     0F 13 02 F6 | 	mov	arg01, local01
03a00     20 BE B1 FD | 	call	#__system___string_cmp
03a04     00 FA 0D F2 | 	cmp	result1, #0 wz
03a08     34 01 90 AD |  if_e	jmp	#LR__0222
03a0c     77 01 00 FF 
03a10     9C 15 06 F6 | 	mov	arg02, ##@LR__4950
03a14     0F 13 02 F6 | 	mov	arg01, local01
03a18     08 BE B1 FD | 	call	#__system___string_cmp
03a1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a20     24 01 90 AD |  if_e	jmp	#LR__0223
03a24     77 01 00 FF 
03a28     9E 15 06 F6 | 	mov	arg02, ##@LR__4951
03a2c     0F 13 02 F6 | 	mov	arg01, local01
03a30     F0 BD B1 FD | 	call	#__system___string_cmp
03a34     00 FA 0D F2 | 	cmp	result1, #0 wz
03a38     14 01 90 AD |  if_e	jmp	#LR__0224
03a3c     77 01 00 FF 
03a40     A0 15 06 F6 | 	mov	arg02, ##@LR__4952
03a44     0F 13 02 F6 | 	mov	arg01, local01
03a48     D8 BD B1 FD | 	call	#__system___string_cmp
03a4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a50     04 01 90 AD |  if_e	jmp	#LR__0225
03a54     77 01 00 FF 
03a58     A2 15 06 F6 | 	mov	arg02, ##@LR__4953
03a5c     0F 13 02 F6 | 	mov	arg01, local01
03a60     C0 BD B1 FD | 	call	#__system___string_cmp
03a64     00 FA 0D F2 | 	cmp	result1, #0 wz
03a68     F4 00 90 AD |  if_e	jmp	#LR__0226
03a6c     77 01 00 FF 
03a70     A4 15 06 F6 | 	mov	arg02, ##@LR__4954
03a74     0F 13 02 F6 | 	mov	arg01, local01
03a78     A8 BD B1 FD | 	call	#__system___string_cmp
03a7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a80     E4 00 90 AD |  if_e	jmp	#LR__0227
03a84     77 01 00 FF 
03a88     A6 15 06 F6 | 	mov	arg02, ##@LR__4955
03a8c     0F 13 02 F6 | 	mov	arg01, local01
03a90     90 BD B1 FD | 	call	#__system___string_cmp
03a94     00 FA 0D F2 | 	cmp	result1, #0 wz
03a98     D4 00 90 AD |  if_e	jmp	#LR__0228
03a9c     77 01 00 FF 
03aa0     A8 15 06 F6 | 	mov	arg02, ##@LR__4956
03aa4     0F 13 02 F6 | 	mov	arg01, local01
03aa8     78 BD B1 FD | 	call	#__system___string_cmp
03aac     00 FA 0D F2 | 	cmp	result1, #0 wz
03ab0     C4 00 90 AD |  if_e	jmp	#LR__0229
03ab4     77 01 00 FF 
03ab8     AA 15 06 F6 | 	mov	arg02, ##@LR__4957
03abc     0F 13 02 F6 | 	mov	arg01, local01
03ac0     60 BD B1 FD | 	call	#__system___string_cmp
03ac4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ac8     B4 00 90 AD |  if_e	jmp	#LR__0230
03acc     77 01 00 FF 
03ad0     AC 15 06 F6 | 	mov	arg02, ##@LR__4958
03ad4     0F 13 02 F6 | 	mov	arg01, local01
03ad8     48 BD B1 FD | 	call	#__system___string_cmp
03adc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ae0     A4 00 90 AD |  if_e	jmp	#LR__0231
03ae4     77 01 00 FF 
03ae8     AE 15 06 F6 | 	mov	arg02, ##@LR__4959
03aec     0F 13 02 F6 | 	mov	arg01, local01
03af0     30 BD B1 FD | 	call	#__system___string_cmp
03af4     00 FA 0D F2 | 	cmp	result1, #0 wz
03af8     94 00 90 AD |  if_e	jmp	#LR__0232
03afc     77 01 00 FF 
03b00     B0 15 06 F6 | 	mov	arg02, ##@LR__4960
03b04     0F 13 02 F6 | 	mov	arg01, local01
03b08     18 BD B1 FD | 	call	#__system___string_cmp
03b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b10     84 00 90 AD |  if_e	jmp	#LR__0233
03b14     77 01 00 FF 
03b18     B2 15 06 F6 | 	mov	arg02, ##@LR__4961
03b1c     0F 13 02 F6 | 	mov	arg01, local01
03b20     00 BD B1 FD | 	call	#__system___string_cmp
03b24     00 FA 0D F2 | 	cmp	result1, #0 wz
03b28     74 00 90 AD |  if_e	jmp	#LR__0234
03b2c     78 00 90 FD | 	jmp	#LR__0235
03b30                 | LR__0220
03b30     01 FA 05 F6 | 	mov	result1, #1
03b34     74 00 90 FD | 	jmp	#LR__0236
03b38                 | LR__0221
03b38     02 FA 05 F6 | 	mov	result1, #2
03b3c     6C 00 90 FD | 	jmp	#LR__0236
03b40                 | LR__0222
03b40     1B FA 05 F6 | 	mov	result1, #27
03b44     64 00 90 FD | 	jmp	#LR__0236
03b48                 | LR__0223
03b48     11 FA 05 F6 | 	mov	result1, #17
03b4c     5C 00 90 FD | 	jmp	#LR__0236
03b50                 | LR__0224
03b50     05 FA 05 F6 | 	mov	result1, #5
03b54     54 00 90 FD | 	jmp	#LR__0236
03b58                 | LR__0225
03b58     06 FA 05 F6 | 	mov	result1, #6
03b5c     4C 00 90 FD | 	jmp	#LR__0236
03b60                 | LR__0226
03b60     12 FA 05 F6 | 	mov	result1, #18
03b64     44 00 90 FD | 	jmp	#LR__0236
03b68                 | LR__0227
03b68     13 FA 05 F6 | 	mov	result1, #19
03b6c     3C 00 90 FD | 	jmp	#LR__0236
03b70                 | LR__0228
03b70     0C FA 05 F6 | 	mov	result1, #12
03b74     34 00 90 FD | 	jmp	#LR__0236
03b78                 | LR__0229
03b78     14 FA 05 F6 | 	mov	result1, #20
03b7c     2C 00 90 FD | 	jmp	#LR__0236
03b80                 | LR__0230
03b80     15 FA 05 F6 | 	mov	result1, #21
03b84     24 00 90 FD | 	jmp	#LR__0236
03b88                 | LR__0231
03b88     16 FA 05 F6 | 	mov	result1, #22
03b8c     1C 00 90 FD | 	jmp	#LR__0236
03b90                 | LR__0232
03b90     FF FB 05 F6 | 	mov	result1, #511
03b94     14 00 90 FD | 	jmp	#LR__0236
03b98                 | LR__0233
03b98     0F FA 05 F6 | 	mov	result1, #15
03b9c     0C 00 90 FD | 	jmp	#LR__0236
03ba0                 | LR__0234
03ba0     10 FA 05 F6 | 	mov	result1, #16
03ba4     04 00 90 FD | 	jmp	#LR__0236
03ba8                 | LR__0235
03ba8     00 FA 05 F6 | 	mov	result1, #0
03bac                 | LR__0236
03bac     A7 F0 03 F6 | 	mov	ptra, fp
03bb0     B2 00 A0 FD | 	call	#popregs_
03bb4                 | _isseparator_ret
03bb4     2D 00 64 FD | 	ret
03bb8                 | 
03bb8                 | ' 
03bb8                 | ' 
03bb8                 | ' function iscommand(s as string) as ubyte
03bb8                 | _iscommand
03bb8     01 4A 05 F6 | 	mov	COUNT_, #1
03bbc     A8 00 A0 FD | 	call	#pushregs_
03bc0                 | ' 
03bc0                 | ' select case s
03bc0     09 1F 02 F6 | 	mov	local01, arg01
03bc4     77 01 00 FF 
03bc8     B6 15 06 F6 | 	mov	arg02, ##@LR__4963
03bcc     0F 13 02 F6 | 	mov	arg01, local01
03bd0     50 BC B1 FD | 	call	#__system___string_cmp
03bd4     00 FA 0D F2 | 	cmp	result1, #0 wz
03bd8     9C 0A 90 AD |  if_e	jmp	#LR__0240
03bdc     77 01 00 FF 
03be0     BB 15 06 F6 | 	mov	arg02, ##@LR__4964
03be4     0F 13 02 F6 | 	mov	arg01, local01
03be8     38 BC B1 FD | 	call	#__system___string_cmp
03bec     00 FA 0D F2 | 	cmp	result1, #0 wz
03bf0     8C 0A 90 AD |  if_e	jmp	#LR__0241
03bf4     77 01 00 FF 
03bf8     BE 15 06 F6 | 	mov	arg02, ##@LR__4965
03bfc     0F 13 02 F6 | 	mov	arg01, local01
03c00     20 BC B1 FD | 	call	#__system___string_cmp
03c04     00 FA 0D F2 | 	cmp	result1, #0 wz
03c08     7C 0A 90 AD |  if_e	jmp	#LR__0242
03c0c     77 01 00 FF 
03c10     C2 15 06 F6 | 	mov	arg02, ##@LR__4966
03c14     0F 13 02 F6 | 	mov	arg01, local01
03c18     08 BC B1 FD | 	call	#__system___string_cmp
03c1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c20     6C 0A 90 AD |  if_e	jmp	#LR__0243
03c24     77 01 00 FF 
03c28     C7 15 06 F6 | 	mov	arg02, ##@LR__4967
03c2c     0F 13 02 F6 | 	mov	arg01, local01
03c30     F0 BB B1 FD | 	call	#__system___string_cmp
03c34     00 FA 0D F2 | 	cmp	result1, #0 wz
03c38     5C 0A 90 AD |  if_e	jmp	#LR__0244
03c3c     77 01 00 FF 
03c40     CB 15 06 F6 | 	mov	arg02, ##@LR__4968
03c44     0F 13 02 F6 | 	mov	arg01, local01
03c48     D8 BB B1 FD | 	call	#__system___string_cmp
03c4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c50     4C 0A 90 AD |  if_e	jmp	#LR__0245
03c54     77 01 00 FF 
03c58     D6 15 06 F6 | 	mov	arg02, ##@LR__4969
03c5c     0F 13 02 F6 | 	mov	arg01, local01
03c60     C0 BB B1 FD | 	call	#__system___string_cmp
03c64     00 FA 0D F2 | 	cmp	result1, #0 wz
03c68     3C 0A 90 AD |  if_e	jmp	#LR__0246
03c6c     77 01 00 FF 
03c70     DA 15 06 F6 | 	mov	arg02, ##@LR__4970
03c74     0F 13 02 F6 | 	mov	arg01, local01
03c78     A8 BB B1 FD | 	call	#__system___string_cmp
03c7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c80     2C 0A 90 AD |  if_e	jmp	#LR__0247
03c84     77 01 00 FF 
03c88     E4 15 06 F6 | 	mov	arg02, ##@LR__4971
03c8c     0F 13 02 F6 | 	mov	arg01, local01
03c90     90 BB B1 FD | 	call	#__system___string_cmp
03c94     00 FA 0D F2 | 	cmp	result1, #0 wz
03c98     1C 0A 90 AD |  if_e	jmp	#LR__0248
03c9c     77 01 00 FF 
03ca0     E8 15 06 F6 | 	mov	arg02, ##@LR__4972
03ca4     0F 13 02 F6 | 	mov	arg01, local01
03ca8     78 BB B1 FD | 	call	#__system___string_cmp
03cac     00 FA 0D F2 | 	cmp	result1, #0 wz
03cb0     0C 0A 90 AD |  if_e	jmp	#LR__0249
03cb4     77 01 00 FF 
03cb8     F2 15 06 F6 | 	mov	arg02, ##@LR__4973
03cbc     0F 13 02 F6 | 	mov	arg01, local01
03cc0     60 BB B1 FD | 	call	#__system___string_cmp
03cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cc8     FC 09 90 AD |  if_e	jmp	#LR__0250
03ccc     77 01 00 FF 
03cd0     F6 15 06 F6 | 	mov	arg02, ##@LR__4974
03cd4     0F 13 02 F6 | 	mov	arg01, local01
03cd8     48 BB B1 FD | 	call	#__system___string_cmp
03cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ce0     EC 09 90 AD |  if_e	jmp	#LR__0251
03ce4     78 01 00 FF 
03ce8     01 14 06 F6 | 	mov	arg02, ##@LR__4975
03cec     0F 13 02 F6 | 	mov	arg01, local01
03cf0     30 BB B1 FD | 	call	#__system___string_cmp
03cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cf8     DC 09 90 AD |  if_e	jmp	#LR__0252
03cfc     78 01 00 FF 
03d00     05 14 06 F6 | 	mov	arg02, ##@LR__4976
03d04     0F 13 02 F6 | 	mov	arg01, local01
03d08     18 BB B1 FD | 	call	#__system___string_cmp
03d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d10     CC 09 90 AD |  if_e	jmp	#LR__0253
03d14     78 01 00 FF 
03d18     0C 14 06 F6 | 	mov	arg02, ##@LR__4977
03d1c     0F 13 02 F6 | 	mov	arg01, local01
03d20     00 BB B1 FD | 	call	#__system___string_cmp
03d24     00 FA 0D F2 | 	cmp	result1, #0 wz
03d28     BC 09 90 AD |  if_e	jmp	#LR__0254
03d2c     78 01 00 FF 
03d30     10 14 06 F6 | 	mov	arg02, ##@LR__4978
03d34     0F 13 02 F6 | 	mov	arg01, local01
03d38     E8 BA B1 FD | 	call	#__system___string_cmp
03d3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d40     AC 09 90 AD |  if_e	jmp	#LR__0255
03d44     78 01 00 FF 
03d48     16 14 06 F6 | 	mov	arg02, ##@LR__4979
03d4c     0F 13 02 F6 | 	mov	arg01, local01
03d50     D0 BA B1 FD | 	call	#__system___string_cmp
03d54     00 FA 0D F2 | 	cmp	result1, #0 wz
03d58     9C 09 90 AD |  if_e	jmp	#LR__0256
03d5c     78 01 00 FF 
03d60     1A 14 06 F6 | 	mov	arg02, ##@LR__4980
03d64     0F 13 02 F6 | 	mov	arg01, local01
03d68     B8 BA B1 FD | 	call	#__system___string_cmp
03d6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d70     8C 09 90 AD |  if_e	jmp	#LR__0257
03d74     78 01 00 FF 
03d78     20 14 06 F6 | 	mov	arg02, ##@LR__4981
03d7c     0F 13 02 F6 | 	mov	arg01, local01
03d80     A0 BA B1 FD | 	call	#__system___string_cmp
03d84     00 FA 0D F2 | 	cmp	result1, #0 wz
03d88     7C 09 90 AD |  if_e	jmp	#LR__0258
03d8c     78 01 00 FF 
03d90     23 14 06 F6 | 	mov	arg02, ##@LR__4982
03d94     0F 13 02 F6 | 	mov	arg01, local01
03d98     88 BA B1 FD | 	call	#__system___string_cmp
03d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03da0     6C 09 90 AD |  if_e	jmp	#LR__0259
03da4     78 01 00 FF 
03da8     29 14 06 F6 | 	mov	arg02, ##@LR__4983
03dac     0F 13 02 F6 | 	mov	arg01, local01
03db0     70 BA B1 FD | 	call	#__system___string_cmp
03db4     00 FA 0D F2 | 	cmp	result1, #0 wz
03db8     5C 09 90 AD |  if_e	jmp	#LR__0260
03dbc     78 01 00 FF 
03dc0     2D 14 06 F6 | 	mov	arg02, ##@LR__4984
03dc4     0F 13 02 F6 | 	mov	arg01, local01
03dc8     58 BA B1 FD | 	call	#__system___string_cmp
03dcc     00 FA 0D F2 | 	cmp	result1, #0 wz
03dd0     4C 09 90 AD |  if_e	jmp	#LR__0261
03dd4     78 01 00 FF 
03dd8     34 14 06 F6 | 	mov	arg02, ##@LR__4985
03ddc     0F 13 02 F6 | 	mov	arg01, local01
03de0     40 BA B1 FD | 	call	#__system___string_cmp
03de4     00 FA 0D F2 | 	cmp	result1, #0 wz
03de8     3C 09 90 AD |  if_e	jmp	#LR__0262
03dec     78 01 00 FF 
03df0     3B 14 06 F6 | 	mov	arg02, ##@LR__4986
03df4     0F 13 02 F6 | 	mov	arg01, local01
03df8     28 BA B1 FD | 	call	#__system___string_cmp
03dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
03e00     2C 09 90 AD |  if_e	jmp	#LR__0263
03e04     78 01 00 FF 
03e08     42 14 06 F6 | 	mov	arg02, ##@LR__4987
03e0c     0F 13 02 F6 | 	mov	arg01, local01
03e10     10 BA B1 FD | 	call	#__system___string_cmp
03e14     00 FA 0D F2 | 	cmp	result1, #0 wz
03e18     1C 09 90 AD |  if_e	jmp	#LR__0264
03e1c     78 01 00 FF 
03e20     4C 14 06 F6 | 	mov	arg02, ##@LR__4988
03e24     0F 13 02 F6 | 	mov	arg01, local01
03e28     F8 B9 B1 FD | 	call	#__system___string_cmp
03e2c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e30     0C 09 90 AD |  if_e	jmp	#LR__0265
03e34     78 01 00 FF 
03e38     50 14 06 F6 | 	mov	arg02, ##@LR__4989
03e3c     0F 13 02 F6 | 	mov	arg01, local01
03e40     E0 B9 B1 FD | 	call	#__system___string_cmp
03e44     00 FA 0D F2 | 	cmp	result1, #0 wz
03e48     FC 08 90 AD |  if_e	jmp	#LR__0266
03e4c     78 01 00 FF 
03e50     54 14 06 F6 | 	mov	arg02, ##@LR__4990
03e54     0F 13 02 F6 | 	mov	arg01, local01
03e58     C8 B9 B1 FD | 	call	#__system___string_cmp
03e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e60     EC 08 90 AD |  if_e	jmp	#LR__0267
03e64     78 01 00 FF 
03e68     58 14 06 F6 | 	mov	arg02, ##@LR__4991
03e6c     0F 13 02 F6 | 	mov	arg01, local01
03e70     B0 B9 B1 FD | 	call	#__system___string_cmp
03e74     00 FA 0D F2 | 	cmp	result1, #0 wz
03e78     DC 08 90 AD |  if_e	jmp	#LR__0268
03e7c     78 01 00 FF 
03e80     5C 14 06 F6 | 	mov	arg02, ##@LR__4992
03e84     0F 13 02 F6 | 	mov	arg01, local01
03e88     98 B9 B1 FD | 	call	#__system___string_cmp
03e8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e90     CC 08 90 AD |  if_e	jmp	#LR__0269
03e94     78 01 00 FF 
03e98     62 14 06 F6 | 	mov	arg02, ##@LR__4993
03e9c     0F 13 02 F6 | 	mov	arg01, local01
03ea0     80 B9 B1 FD | 	call	#__system___string_cmp
03ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ea8     BC 08 90 AD |  if_e	jmp	#LR__0270
03eac     78 01 00 FF 
03eb0     67 14 06 F6 | 	mov	arg02, ##@LR__4994
03eb4     0F 13 02 F6 | 	mov	arg01, local01
03eb8     68 B9 B1 FD | 	call	#__system___string_cmp
03ebc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ec0     AC 08 90 AD |  if_e	jmp	#LR__0271
03ec4     78 01 00 FF 
03ec8     6B 14 06 F6 | 	mov	arg02, ##@LR__4995
03ecc     0F 13 02 F6 | 	mov	arg01, local01
03ed0     50 B9 B1 FD | 	call	#__system___string_cmp
03ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ed8     9C 08 90 AD |  if_e	jmp	#LR__0272
03edc     78 01 00 FF 
03ee0     70 14 06 F6 | 	mov	arg02, ##@LR__4996
03ee4     0F 13 02 F6 | 	mov	arg01, local01
03ee8     38 B9 B1 FD | 	call	#__system___string_cmp
03eec     00 FA 0D F2 | 	cmp	result1, #0 wz
03ef0     8C 08 90 AD |  if_e	jmp	#LR__0273
03ef4     78 01 00 FF 
03ef8     74 14 06 F6 | 	mov	arg02, ##@LR__4997
03efc     0F 13 02 F6 | 	mov	arg01, local01
03f00     20 B9 B1 FD | 	call	#__system___string_cmp
03f04     00 FA 0D F2 | 	cmp	result1, #0 wz
03f08     7C 08 90 AD |  if_e	jmp	#LR__0274
03f0c     78 01 00 FF 
03f10     7C 14 06 F6 | 	mov	arg02, ##@LR__4998
03f14     0F 13 02 F6 | 	mov	arg01, local01
03f18     08 B9 B1 FD | 	call	#__system___string_cmp
03f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f20     6C 08 90 AD |  if_e	jmp	#LR__0275
03f24     78 01 00 FF 
03f28     80 14 06 F6 | 	mov	arg02, ##@LR__4999
03f2c     0F 13 02 F6 | 	mov	arg01, local01
03f30     F0 B8 B1 FD | 	call	#__system___string_cmp
03f34     00 FA 0D F2 | 	cmp	result1, #0 wz
03f38     5C 08 90 AD |  if_e	jmp	#LR__0276
03f3c     78 01 00 FF 
03f40     85 14 06 F6 | 	mov	arg02, ##@LR__5000
03f44     0F 13 02 F6 | 	mov	arg01, local01
03f48     D8 B8 B1 FD | 	call	#__system___string_cmp
03f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f50     4C 08 90 AD |  if_e	jmp	#LR__0277
03f54     78 01 00 FF 
03f58     89 14 06 F6 | 	mov	arg02, ##@LR__5001
03f5c     0F 13 02 F6 | 	mov	arg01, local01
03f60     C0 B8 B1 FD | 	call	#__system___string_cmp
03f64     00 FA 0D F2 | 	cmp	result1, #0 wz
03f68     3C 08 90 AD |  if_e	jmp	#LR__0278
03f6c     78 01 00 FF 
03f70     8E 14 06 F6 | 	mov	arg02, ##@LR__5002
03f74     0F 13 02 F6 | 	mov	arg01, local01
03f78     A8 B8 B1 FD | 	call	#__system___string_cmp
03f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f80     2C 08 90 AD |  if_e	jmp	#LR__0279
03f84     78 01 00 FF 
03f88     92 14 06 F6 | 	mov	arg02, ##@LR__5003
03f8c     0F 13 02 F6 | 	mov	arg01, local01
03f90     90 B8 B1 FD | 	call	#__system___string_cmp
03f94     00 FA 0D F2 | 	cmp	result1, #0 wz
03f98     1C 08 90 AD |  if_e	jmp	#LR__0280
03f9c     78 01 00 FF 
03fa0     95 14 06 F6 | 	mov	arg02, ##@LR__5004
03fa4     0F 13 02 F6 | 	mov	arg01, local01
03fa8     78 B8 B1 FD | 	call	#__system___string_cmp
03fac     00 FA 0D F2 | 	cmp	result1, #0 wz
03fb0     0C 08 90 AD |  if_e	jmp	#LR__0281
03fb4     78 01 00 FF 
03fb8     9B 14 06 F6 | 	mov	arg02, ##@LR__5005
03fbc     0F 13 02 F6 | 	mov	arg01, local01
03fc0     60 B8 B1 FD | 	call	#__system___string_cmp
03fc4     00 FA 0D F2 | 	cmp	result1, #0 wz
03fc8     FC 07 90 AD |  if_e	jmp	#LR__0282
03fcc     78 01 00 FF 
03fd0     9F 14 06 F6 | 	mov	arg02, ##@LR__5006
03fd4     0F 13 02 F6 | 	mov	arg01, local01
03fd8     48 B8 B1 FD | 	call	#__system___string_cmp
03fdc     00 FA 0D F2 | 	cmp	result1, #0 wz
03fe0     EC 07 90 AD |  if_e	jmp	#LR__0283
03fe4     78 01 00 FF 
03fe8     A5 14 06 F6 | 	mov	arg02, ##@LR__5007
03fec     0F 13 02 F6 | 	mov	arg01, local01
03ff0     30 B8 B1 FD | 	call	#__system___string_cmp
03ff4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ff8     DC 07 90 AD |  if_e	jmp	#LR__0284
03ffc     78 01 00 FF 
04000     AA 14 06 F6 | 	mov	arg02, ##@LR__5008
04004     0F 13 02 F6 | 	mov	arg01, local01
04008     18 B8 B1 FD | 	call	#__system___string_cmp
0400c     00 FA 0D F2 | 	cmp	result1, #0 wz
04010     CC 07 90 AD |  if_e	jmp	#LR__0285
04014     78 01 00 FF 
04018     AD 14 06 F6 | 	mov	arg02, ##@LR__5009
0401c     0F 13 02 F6 | 	mov	arg01, local01
04020     00 B8 B1 FD | 	call	#__system___string_cmp
04024     00 FA 0D F2 | 	cmp	result1, #0 wz
04028     BC 07 90 AD |  if_e	jmp	#LR__0286
0402c     78 01 00 FF 
04030     B0 14 06 F6 | 	mov	arg02, ##@LR__5010
04034     0F 13 02 F6 | 	mov	arg01, local01
04038     E8 B7 B1 FD | 	call	#__system___string_cmp
0403c     00 FA 0D F2 | 	cmp	result1, #0 wz
04040     AC 07 90 AD |  if_e	jmp	#LR__0287
04044     78 01 00 FF 
04048     B4 14 06 F6 | 	mov	arg02, ##@LR__5011
0404c     0F 13 02 F6 | 	mov	arg01, local01
04050     D0 B7 B1 FD | 	call	#__system___string_cmp
04054     00 FA 0D F2 | 	cmp	result1, #0 wz
04058     9C 07 90 AD |  if_e	jmp	#LR__0288
0405c     78 01 00 FF 
04060     B7 14 06 F6 | 	mov	arg02, ##@LR__5012
04064     0F 13 02 F6 | 	mov	arg01, local01
04068     B8 B7 B1 FD | 	call	#__system___string_cmp
0406c     00 FA 0D F2 | 	cmp	result1, #0 wz
04070     8C 07 90 AD |  if_e	jmp	#LR__0289
04074     78 01 00 FF 
04078     BB 14 06 F6 | 	mov	arg02, ##@LR__5013
0407c     0F 13 02 F6 | 	mov	arg01, local01
04080     A0 B7 B1 FD | 	call	#__system___string_cmp
04084     00 FA 0D F2 | 	cmp	result1, #0 wz
04088     7C 07 90 AD |  if_e	jmp	#LR__0290
0408c     78 01 00 FF 
04090     C0 14 06 F6 | 	mov	arg02, ##@LR__5014
04094     0F 13 02 F6 | 	mov	arg01, local01
04098     88 B7 B1 FD | 	call	#__system___string_cmp
0409c     00 FA 0D F2 | 	cmp	result1, #0 wz
040a0     6C 07 90 AD |  if_e	jmp	#LR__0291
040a4     78 01 00 FF 
040a8     C3 14 06 F6 | 	mov	arg02, ##@LR__5015
040ac     0F 13 02 F6 | 	mov	arg01, local01
040b0     70 B7 B1 FD | 	call	#__system___string_cmp
040b4     00 FA 0D F2 | 	cmp	result1, #0 wz
040b8     5C 07 90 AD |  if_e	jmp	#LR__0292
040bc     78 01 00 FF 
040c0     C8 14 06 F6 | 	mov	arg02, ##@LR__5016
040c4     0F 13 02 F6 | 	mov	arg01, local01
040c8     58 B7 B1 FD | 	call	#__system___string_cmp
040cc     00 FA 0D F2 | 	cmp	result1, #0 wz
040d0     4C 07 90 AD |  if_e	jmp	#LR__0293
040d4     78 01 00 FF 
040d8     CC 14 06 F6 | 	mov	arg02, ##@LR__5017
040dc     0F 13 02 F6 | 	mov	arg01, local01
040e0     40 B7 B1 FD | 	call	#__system___string_cmp
040e4     00 FA 0D F2 | 	cmp	result1, #0 wz
040e8     3C 07 90 AD |  if_e	jmp	#LR__0294
040ec     78 01 00 FF 
040f0     D2 14 06 F6 | 	mov	arg02, ##@LR__5018
040f4     0F 13 02 F6 | 	mov	arg01, local01
040f8     28 B7 B1 FD | 	call	#__system___string_cmp
040fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04100     2C 07 90 AD |  if_e	jmp	#LR__0295
04104     78 01 00 FF 
04108     D7 14 06 F6 | 	mov	arg02, ##@LR__5019
0410c     0F 13 02 F6 | 	mov	arg01, local01
04110     10 B7 B1 FD | 	call	#__system___string_cmp
04114     00 FA 0D F2 | 	cmp	result1, #0 wz
04118     1C 07 90 AD |  if_e	jmp	#LR__0296
0411c     78 01 00 FF 
04120     DA 14 06 F6 | 	mov	arg02, ##@LR__5020
04124     0F 13 02 F6 | 	mov	arg01, local01
04128     F8 B6 B1 FD | 	call	#__system___string_cmp
0412c     00 FA 0D F2 | 	cmp	result1, #0 wz
04130     0C 07 90 AD |  if_e	jmp	#LR__0297
04134     78 01 00 FF 
04138     E0 14 06 F6 | 	mov	arg02, ##@LR__5021
0413c     0F 13 02 F6 | 	mov	arg01, local01
04140     E0 B6 B1 FD | 	call	#__system___string_cmp
04144     00 FA 0D F2 | 	cmp	result1, #0 wz
04148     FC 06 90 AD |  if_e	jmp	#LR__0298
0414c     78 01 00 FF 
04150     E4 14 06 F6 | 	mov	arg02, ##@LR__5022
04154     0F 13 02 F6 | 	mov	arg01, local01
04158     C8 B6 B1 FD | 	call	#__system___string_cmp
0415c     00 FA 0D F2 | 	cmp	result1, #0 wz
04160     EC 06 90 AD |  if_e	jmp	#LR__0299
04164     78 01 00 FF 
04168     E9 14 06 F6 | 	mov	arg02, ##@LR__5023
0416c     0F 13 02 F6 | 	mov	arg01, local01
04170     B0 B6 B1 FD | 	call	#__system___string_cmp
04174     00 FA 0D F2 | 	cmp	result1, #0 wz
04178     DC 06 90 AD |  if_e	jmp	#LR__0300
0417c     78 01 00 FF 
04180     EC 14 06 F6 | 	mov	arg02, ##@LR__5024
04184     0F 13 02 F6 | 	mov	arg01, local01
04188     98 B6 B1 FD | 	call	#__system___string_cmp
0418c     00 FA 0D F2 | 	cmp	result1, #0 wz
04190     CC 06 90 AD |  if_e	jmp	#LR__0301
04194     78 01 00 FF 
04198     F2 14 06 F6 | 	mov	arg02, ##@LR__5025
0419c     0F 13 02 F6 | 	mov	arg01, local01
041a0     80 B6 B1 FD | 	call	#__system___string_cmp
041a4     00 FA 0D F2 | 	cmp	result1, #0 wz
041a8     BC 06 90 AD |  if_e	jmp	#LR__0302
041ac     78 01 00 FF 
041b0     F6 14 06 F6 | 	mov	arg02, ##@LR__5026
041b4     0F 13 02 F6 | 	mov	arg01, local01
041b8     68 B6 B1 FD | 	call	#__system___string_cmp
041bc     00 FA 0D F2 | 	cmp	result1, #0 wz
041c0     AC 06 90 AD |  if_e	jmp	#LR__0303
041c4     78 01 00 FF 
041c8     FF 14 06 F6 | 	mov	arg02, ##@LR__5027
041cc     0F 13 02 F6 | 	mov	arg01, local01
041d0     50 B6 B1 FD | 	call	#__system___string_cmp
041d4     00 FA 0D F2 | 	cmp	result1, #0 wz
041d8     9C 06 90 AD |  if_e	jmp	#LR__0304
041dc     78 01 00 FF 
041e0     05 15 06 F6 | 	mov	arg02, ##@LR__5028
041e4     0F 13 02 F6 | 	mov	arg01, local01
041e8     38 B6 B1 FD | 	call	#__system___string_cmp
041ec     00 FA 0D F2 | 	cmp	result1, #0 wz
041f0     8C 06 90 AD |  if_e	jmp	#LR__0305
041f4     78 01 00 FF 
041f8     0B 15 06 F6 | 	mov	arg02, ##@LR__5029
041fc     0F 13 02 F6 | 	mov	arg01, local01
04200     20 B6 B1 FD | 	call	#__system___string_cmp
04204     00 FA 0D F2 | 	cmp	result1, #0 wz
04208     7C 06 90 AD |  if_e	jmp	#LR__0306
0420c     78 01 00 FF 
04210     14 15 06 F6 | 	mov	arg02, ##@LR__5030
04214     0F 13 02 F6 | 	mov	arg01, local01
04218     08 B6 B1 FD | 	call	#__system___string_cmp
0421c     00 FA 0D F2 | 	cmp	result1, #0 wz
04220     6C 06 90 AD |  if_e	jmp	#LR__0307
04224     78 01 00 FF 
04228     1E 15 06 F6 | 	mov	arg02, ##@LR__5031
0422c     0F 13 02 F6 | 	mov	arg01, local01
04230     F0 B5 B1 FD | 	call	#__system___string_cmp
04234     00 FA 0D F2 | 	cmp	result1, #0 wz
04238     5C 06 90 AD |  if_e	jmp	#LR__0308
0423c     78 01 00 FF 
04240     27 15 06 F6 | 	mov	arg02, ##@LR__5032
04244     0F 13 02 F6 | 	mov	arg01, local01
04248     D8 B5 B1 FD | 	call	#__system___string_cmp
0424c     00 FA 0D F2 | 	cmp	result1, #0 wz
04250     4C 06 90 AD |  if_e	jmp	#LR__0309
04254     78 01 00 FF 
04258     2C 15 06 F6 | 	mov	arg02, ##@LR__5033
0425c     0F 13 02 F6 | 	mov	arg01, local01
04260     C0 B5 B1 FD | 	call	#__system___string_cmp
04264     00 FA 0D F2 | 	cmp	result1, #0 wz
04268     3C 06 90 AD |  if_e	jmp	#LR__0310
0426c     78 01 00 FF 
04270     2F 15 06 F6 | 	mov	arg02, ##@LR__5034
04274     0F 13 02 F6 | 	mov	arg01, local01
04278     A8 B5 B1 FD | 	call	#__system___string_cmp
0427c     00 FA 0D F2 | 	cmp	result1, #0 wz
04280     2C 06 90 AD |  if_e	jmp	#LR__0311
04284     78 01 00 FF 
04288     34 15 06 F6 | 	mov	arg02, ##@LR__5035
0428c     0F 13 02 F6 | 	mov	arg01, local01
04290     90 B5 B1 FD | 	call	#__system___string_cmp
04294     00 FA 0D F2 | 	cmp	result1, #0 wz
04298     1C 06 90 AD |  if_e	jmp	#LR__0312
0429c     78 01 00 FF 
042a0     38 15 06 F6 | 	mov	arg02, ##@LR__5036
042a4     0F 13 02 F6 | 	mov	arg01, local01
042a8     78 B5 B1 FD | 	call	#__system___string_cmp
042ac     00 FA 0D F2 | 	cmp	result1, #0 wz
042b0     0C 06 90 AD |  if_e	jmp	#LR__0313
042b4     78 01 00 FF 
042b8     3D 15 06 F6 | 	mov	arg02, ##@LR__5037
042bc     0F 13 02 F6 | 	mov	arg01, local01
042c0     60 B5 B1 FD | 	call	#__system___string_cmp
042c4     00 FA 0D F2 | 	cmp	result1, #0 wz
042c8     FC 05 90 AD |  if_e	jmp	#LR__0314
042cc     78 01 00 FF 
042d0     41 15 06 F6 | 	mov	arg02, ##@LR__5038
042d4     0F 13 02 F6 | 	mov	arg01, local01
042d8     48 B5 B1 FD | 	call	#__system___string_cmp
042dc     00 FA 0D F2 | 	cmp	result1, #0 wz
042e0     EC 05 90 AD |  if_e	jmp	#LR__0315
042e4     78 01 00 FF 
042e8     4A 15 06 F6 | 	mov	arg02, ##@LR__5039
042ec     0F 13 02 F6 | 	mov	arg01, local01
042f0     30 B5 B1 FD | 	call	#__system___string_cmp
042f4     00 FA 0D F2 | 	cmp	result1, #0 wz
042f8     DC 05 90 AD |  if_e	jmp	#LR__0316
042fc     78 01 00 FF 
04300     4F 15 06 F6 | 	mov	arg02, ##@LR__5040
04304     0F 13 02 F6 | 	mov	arg01, local01
04308     18 B5 B1 FD | 	call	#__system___string_cmp
0430c     00 FA 0D F2 | 	cmp	result1, #0 wz
04310     CC 05 90 AD |  if_e	jmp	#LR__0317
04314     78 01 00 FF 
04318     55 15 06 F6 | 	mov	arg02, ##@LR__5041
0431c     0F 13 02 F6 | 	mov	arg01, local01
04320     00 B5 B1 FD | 	call	#__system___string_cmp
04324     00 FA 0D F2 | 	cmp	result1, #0 wz
04328     BC 05 90 AD |  if_e	jmp	#LR__0318
0432c     78 01 00 FF 
04330     57 15 06 F6 | 	mov	arg02, ##@LR__5042
04334     0F 13 02 F6 | 	mov	arg01, local01
04338     E8 B4 B1 FD | 	call	#__system___string_cmp
0433c     00 FA 0D F2 | 	cmp	result1, #0 wz
04340     AC 05 90 AD |  if_e	jmp	#LR__0319
04344     78 01 00 FF 
04348     5B 15 06 F6 | 	mov	arg02, ##@LR__5043
0434c     0F 13 02 F6 | 	mov	arg01, local01
04350     D0 B4 B1 FD | 	call	#__system___string_cmp
04354     00 FA 0D F2 | 	cmp	result1, #0 wz
04358     9C 05 90 AD |  if_e	jmp	#LR__0320
0435c     78 01 00 FF 
04360     63 15 06 F6 | 	mov	arg02, ##@LR__5044
04364     0F 13 02 F6 | 	mov	arg01, local01
04368     B8 B4 B1 FD | 	call	#__system___string_cmp
0436c     00 FA 0D F2 | 	cmp	result1, #0 wz
04370     8C 05 90 AD |  if_e	jmp	#LR__0321
04374     78 01 00 FF 
04378     6A 15 06 F6 | 	mov	arg02, ##@LR__5045
0437c     0F 13 02 F6 | 	mov	arg01, local01
04380     A0 B4 B1 FD | 	call	#__system___string_cmp
04384     00 FA 0D F2 | 	cmp	result1, #0 wz
04388     7C 05 90 AD |  if_e	jmp	#LR__0322
0438c     78 01 00 FF 
04390     6E 15 06 F6 | 	mov	arg02, ##@LR__5046
04394     0F 13 02 F6 | 	mov	arg01, local01
04398     88 B4 B1 FD | 	call	#__system___string_cmp
0439c     00 FA 0D F2 | 	cmp	result1, #0 wz
043a0     6C 05 90 AD |  if_e	jmp	#LR__0323
043a4     78 01 00 FF 
043a8     73 15 06 F6 | 	mov	arg02, ##@LR__5047
043ac     0F 13 02 F6 | 	mov	arg01, local01
043b0     70 B4 B1 FD | 	call	#__system___string_cmp
043b4     00 FA 0D F2 | 	cmp	result1, #0 wz
043b8     5C 05 90 AD |  if_e	jmp	#LR__0324
043bc     78 01 00 FF 
043c0     76 15 06 F6 | 	mov	arg02, ##@LR__5048
043c4     0F 13 02 F6 | 	mov	arg01, local01
043c8     58 B4 B1 FD | 	call	#__system___string_cmp
043cc     00 FA 0D F2 | 	cmp	result1, #0 wz
043d0     4C 05 90 AD |  if_e	jmp	#LR__0325
043d4     78 01 00 FF 
043d8     7F 15 06 F6 | 	mov	arg02, ##@LR__5049
043dc     0F 13 02 F6 | 	mov	arg01, local01
043e0     40 B4 B1 FD | 	call	#__system___string_cmp
043e4     00 FA 0D F2 | 	cmp	result1, #0 wz
043e8     3C 05 90 AD |  if_e	jmp	#LR__0326
043ec     78 01 00 FF 
043f0     83 15 06 F6 | 	mov	arg02, ##@LR__5050
043f4     0F 13 02 F6 | 	mov	arg01, local01
043f8     28 B4 B1 FD | 	call	#__system___string_cmp
043fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04400     2C 05 90 AD |  if_e	jmp	#LR__0327
04404     78 01 00 FF 
04408     8A 15 06 F6 | 	mov	arg02, ##@LR__5051
0440c     0F 13 02 F6 | 	mov	arg01, local01
04410     10 B4 B1 FD | 	call	#__system___string_cmp
04414     00 FA 0D F2 | 	cmp	result1, #0 wz
04418     1C 05 90 AD |  if_e	jmp	#LR__0328
0441c     78 01 00 FF 
04420     8E 15 06 F6 | 	mov	arg02, ##@LR__5052
04424     0F 13 02 F6 | 	mov	arg01, local01
04428     F8 B3 B1 FD | 	call	#__system___string_cmp
0442c     00 FA 0D F2 | 	cmp	result1, #0 wz
04430     0C 05 90 AD |  if_e	jmp	#LR__0329
04434     78 01 00 FF 
04438     95 15 06 F6 | 	mov	arg02, ##@LR__5053
0443c     0F 13 02 F6 | 	mov	arg01, local01
04440     E0 B3 B1 FD | 	call	#__system___string_cmp
04444     00 FA 0D F2 | 	cmp	result1, #0 wz
04448     FC 04 90 AD |  if_e	jmp	#LR__0330
0444c     78 01 00 FF 
04450     99 15 06 F6 | 	mov	arg02, ##@LR__5054
04454     0F 13 02 F6 | 	mov	arg01, local01
04458     C8 B3 B1 FD | 	call	#__system___string_cmp
0445c     00 FA 0D F2 | 	cmp	result1, #0 wz
04460     EC 04 90 AD |  if_e	jmp	#LR__0331
04464     78 01 00 FF 
04468     A0 15 06 F6 | 	mov	arg02, ##@LR__5055
0446c     0F 13 02 F6 | 	mov	arg01, local01
04470     B0 B3 B1 FD | 	call	#__system___string_cmp
04474     00 FA 0D F2 | 	cmp	result1, #0 wz
04478     DC 04 90 AD |  if_e	jmp	#LR__0332
0447c     78 01 00 FF 
04480     A3 15 06 F6 | 	mov	arg02, ##@LR__5056
04484     0F 13 02 F6 | 	mov	arg01, local01
04488     98 B3 B1 FD | 	call	#__system___string_cmp
0448c     00 FA 0D F2 | 	cmp	result1, #0 wz
04490     CC 04 90 AD |  if_e	jmp	#LR__0333
04494     78 01 00 FF 
04498     AE 15 06 F6 | 	mov	arg02, ##@LR__5057
0449c     0F 13 02 F6 | 	mov	arg01, local01
044a0     80 B3 B1 FD | 	call	#__system___string_cmp
044a4     00 FA 0D F2 | 	cmp	result1, #0 wz
044a8     BC 04 90 AD |  if_e	jmp	#LR__0334
044ac     78 01 00 FF 
044b0     B2 15 06 F6 | 	mov	arg02, ##@LR__5058
044b4     0F 13 02 F6 | 	mov	arg01, local01
044b8     68 B3 B1 FD | 	call	#__system___string_cmp
044bc     00 FA 0D F2 | 	cmp	result1, #0 wz
044c0     AC 04 90 AD |  if_e	jmp	#LR__0335
044c4     78 01 00 FF 
044c8     B9 15 06 F6 | 	mov	arg02, ##@LR__5059
044cc     0F 13 02 F6 | 	mov	arg01, local01
044d0     50 B3 B1 FD | 	call	#__system___string_cmp
044d4     00 FA 0D F2 | 	cmp	result1, #0 wz
044d8     9C 04 90 AD |  if_e	jmp	#LR__0336
044dc     78 01 00 FF 
044e0     BD 15 06 F6 | 	mov	arg02, ##@LR__5060
044e4     0F 13 02 F6 | 	mov	arg01, local01
044e8     38 B3 B1 FD | 	call	#__system___string_cmp
044ec     00 FA 0D F2 | 	cmp	result1, #0 wz
044f0     8C 04 90 AD |  if_e	jmp	#LR__0337
044f4     78 01 00 FF 
044f8     C5 15 06 F6 | 	mov	arg02, ##@LR__5061
044fc     0F 13 02 F6 | 	mov	arg01, local01
04500     20 B3 B1 FD | 	call	#__system___string_cmp
04504     00 FA 0D F2 | 	cmp	result1, #0 wz
04508     7C 04 90 AD |  if_e	jmp	#LR__0338
0450c     78 01 00 FF 
04510     C9 15 06 F6 | 	mov	arg02, ##@LR__5062
04514     0F 13 02 F6 | 	mov	arg01, local01
04518     08 B3 B1 FD | 	call	#__system___string_cmp
0451c     00 FA 0D F2 | 	cmp	result1, #0 wz
04520     6C 04 90 AD |  if_e	jmp	#LR__0339
04524     78 01 00 FF 
04528     D0 15 06 F6 | 	mov	arg02, ##@LR__5063
0452c     0F 13 02 F6 | 	mov	arg01, local01
04530     F0 B2 B1 FD | 	call	#__system___string_cmp
04534     00 FA 0D F2 | 	cmp	result1, #0 wz
04538     5C 04 90 AD |  if_e	jmp	#LR__0340
0453c     78 01 00 FF 
04540     D7 15 06 F6 | 	mov	arg02, ##@LR__5064
04544     0F 13 02 F6 | 	mov	arg01, local01
04548     D8 B2 B1 FD | 	call	#__system___string_cmp
0454c     00 FA 0D F2 | 	cmp	result1, #0 wz
04550     4C 04 90 AD |  if_e	jmp	#LR__0341
04554     78 01 00 FF 
04558     DB 15 06 F6 | 	mov	arg02, ##@LR__5065
0455c     0F 13 02 F6 | 	mov	arg01, local01
04560     C0 B2 B1 FD | 	call	#__system___string_cmp
04564     00 FA 0D F2 | 	cmp	result1, #0 wz
04568     3C 04 90 AD |  if_e	jmp	#LR__0342
0456c     78 01 00 FF 
04570     E1 15 06 F6 | 	mov	arg02, ##@LR__5066
04574     0F 13 02 F6 | 	mov	arg01, local01
04578     A8 B2 B1 FD | 	call	#__system___string_cmp
0457c     00 FA 0D F2 | 	cmp	result1, #0 wz
04580     2C 04 90 AD |  if_e	jmp	#LR__0343
04584     78 01 00 FF 
04588     E5 15 06 F6 | 	mov	arg02, ##@LR__5067
0458c     0F 13 02 F6 | 	mov	arg01, local01
04590     90 B2 B1 FD | 	call	#__system___string_cmp
04594     00 FA 0D F2 | 	cmp	result1, #0 wz
04598     1C 04 90 AD |  if_e	jmp	#LR__0344
0459c     78 01 00 FF 
045a0     EC 15 06 F6 | 	mov	arg02, ##@LR__5068
045a4     0F 13 02 F6 | 	mov	arg01, local01
045a8     78 B2 B1 FD | 	call	#__system___string_cmp
045ac     00 FA 0D F2 | 	cmp	result1, #0 wz
045b0     0C 04 90 AD |  if_e	jmp	#LR__0345
045b4     78 01 00 FF 
045b8     F1 15 06 F6 | 	mov	arg02, ##@LR__5069
045bc     0F 13 02 F6 | 	mov	arg01, local01
045c0     60 B2 B1 FD | 	call	#__system___string_cmp
045c4     00 FA 0D F2 | 	cmp	result1, #0 wz
045c8     FC 03 90 AD |  if_e	jmp	#LR__0346
045cc     78 01 00 FF 
045d0     F6 15 06 F6 | 	mov	arg02, ##@LR__5070
045d4     0F 13 02 F6 | 	mov	arg01, local01
045d8     48 B2 B1 FD | 	call	#__system___string_cmp
045dc     00 FA 0D F2 | 	cmp	result1, #0 wz
045e0     EC 03 90 AD |  if_e	jmp	#LR__0347
045e4     78 01 00 FF 
045e8     FD 15 06 F6 | 	mov	arg02, ##@LR__5071
045ec     0F 13 02 F6 | 	mov	arg01, local01
045f0     30 B2 B1 FD | 	call	#__system___string_cmp
045f4     00 FA 0D F2 | 	cmp	result1, #0 wz
045f8     DC 03 90 AD |  if_e	jmp	#LR__0348
045fc     79 01 00 FF 
04600     07 14 06 F6 | 	mov	arg02, ##@LR__5072
04604     0F 13 02 F6 | 	mov	arg01, local01
04608     18 B2 B1 FD | 	call	#__system___string_cmp
0460c     00 FA 0D F2 | 	cmp	result1, #0 wz
04610     CC 03 90 AD |  if_e	jmp	#LR__0349
04614     79 01 00 FF 
04618     0B 14 06 F6 | 	mov	arg02, ##@LR__5073
0461c     0F 13 02 F6 | 	mov	arg01, local01
04620     00 B2 B1 FD | 	call	#__system___string_cmp
04624     00 FA 0D F2 | 	cmp	result1, #0 wz
04628     BC 03 90 AD |  if_e	jmp	#LR__0350
0462c     79 01 00 FF 
04630     13 14 06 F6 | 	mov	arg02, ##@LR__5074
04634     0F 13 02 F6 | 	mov	arg01, local01
04638     E8 B1 B1 FD | 	call	#__system___string_cmp
0463c     00 FA 0D F2 | 	cmp	result1, #0 wz
04640     AC 03 90 AD |  if_e	jmp	#LR__0351
04644     79 01 00 FF 
04648     17 14 06 F6 | 	mov	arg02, ##@LR__5075
0464c     0F 13 02 F6 | 	mov	arg01, local01
04650     D0 B1 B1 FD | 	call	#__system___string_cmp
04654     00 FA 0D F2 | 	cmp	result1, #0 wz
04658     9C 03 90 AD |  if_e	jmp	#LR__0352
0465c     79 01 00 FF 
04660     1D 14 06 F6 | 	mov	arg02, ##@LR__5076
04664     0F 13 02 F6 | 	mov	arg01, local01
04668     B8 B1 B1 FD | 	call	#__system___string_cmp
0466c     00 FA 0D F2 | 	cmp	result1, #0 wz
04670     8C 03 90 AD |  if_e	jmp	#LR__0353
04674     90 03 90 FD | 	jmp	#LR__0354
04678                 | LR__0240
04678     5C FA 05 F6 | 	mov	result1, #92
0467c     8C 03 90 FD | 	jmp	#LR__0355
04680                 | LR__0241
04680     5C FA 05 F6 | 	mov	result1, #92
04684     84 03 90 FD | 	jmp	#LR__0355
04688                 | LR__0242
04688     47 FA 05 F6 | 	mov	result1, #71
0468c     7C 03 90 FD | 	jmp	#LR__0355
04690                 | LR__0243
04690     59 FA 05 F6 | 	mov	result1, #89
04694     74 03 90 FD | 	jmp	#LR__0355
04698                 | LR__0244
04698     59 FA 05 F6 | 	mov	result1, #89
0469c     6C 03 90 FD | 	jmp	#LR__0355
046a0                 | LR__0245
046a0     AE FA 05 F6 | 	mov	result1, #174
046a4     64 03 90 FD | 	jmp	#LR__0355
046a8                 | LR__0246
046a8     AE FA 05 F6 | 	mov	result1, #174
046ac     5C 03 90 FD | 	jmp	#LR__0355
046b0                 | LR__0247
046b0     B1 FA 05 F6 | 	mov	result1, #177
046b4     54 03 90 FD | 	jmp	#LR__0355
046b8                 | LR__0248
046b8     B1 FA 05 F6 | 	mov	result1, #177
046bc     4C 03 90 FD | 	jmp	#LR__0355
046c0                 | LR__0249
046c0     AF FA 05 F6 | 	mov	result1, #175
046c4     44 03 90 FD | 	jmp	#LR__0355
046c8                 | LR__0250
046c8     AF FA 05 F6 | 	mov	result1, #175
046cc     3C 03 90 FD | 	jmp	#LR__0355
046d0                 | LR__0251
046d0     B0 FA 05 F6 | 	mov	result1, #176
046d4     34 03 90 FD | 	jmp	#LR__0355
046d8                 | LR__0252
046d8     B0 FA 05 F6 | 	mov	result1, #176
046dc     2C 03 90 FD | 	jmp	#LR__0355
046e0                 | LR__0253
046e0     45 FA 05 F6 | 	mov	result1, #69
046e4     24 03 90 FD | 	jmp	#LR__0355
046e8                 | LR__0254
046e8     45 FA 05 F6 | 	mov	result1, #69
046ec     1C 03 90 FD | 	jmp	#LR__0355
046f0                 | LR__0255
046f0     69 FA 05 F6 | 	mov	result1, #105
046f4     14 03 90 FD | 	jmp	#LR__0355
046f8                 | LR__0256
046f8     40 FA 05 F6 | 	mov	result1, #64
046fc     0C 03 90 FD | 	jmp	#LR__0355
04700                 | LR__0257
04700     49 FA 05 F6 | 	mov	result1, #73
04704     04 03 90 FD | 	jmp	#LR__0355
04708                 | LR__0258
04708     49 FA 05 F6 | 	mov	result1, #73
0470c     FC 02 90 FD | 	jmp	#LR__0355
04710                 | LR__0259
04710     50 FA 05 F6 | 	mov	result1, #80
04714     F4 02 90 FD | 	jmp	#LR__0355
04718                 | LR__0260
04718     50 FA 05 F6 | 	mov	result1, #80
0471c     EC 02 90 FD | 	jmp	#LR__0355
04720                 | LR__0261
04720     68 FA 05 F6 | 	mov	result1, #104
04724     E4 02 90 FD | 	jmp	#LR__0355
04728                 | LR__0262
04728     73 FA 05 F6 | 	mov	result1, #115
0472c     DC 02 90 FD | 	jmp	#LR__0355
04730                 | LR__0263
04730     74 FA 05 F6 | 	mov	result1, #116
04734     D4 02 90 FD | 	jmp	#LR__0355
04738                 | LR__0264
04738     6C FA 05 F6 | 	mov	result1, #108
0473c     CC 02 90 FD | 	jmp	#LR__0355
04740                 | LR__0265
04740     6C FA 05 F6 | 	mov	result1, #108
04744     C4 02 90 FD | 	jmp	#LR__0355
04748                 | LR__0266
04748     89 FA 05 F6 | 	mov	result1, #137
0474c     BC 02 90 FD | 	jmp	#LR__0355
04750                 | LR__0267
04750     72 FA 05 F6 | 	mov	result1, #114
04754     B4 02 90 FD | 	jmp	#LR__0355
04758                 | LR__0268
04758     5D FA 05 F6 | 	mov	result1, #93
0475c     AC 02 90 FD | 	jmp	#LR__0355
04760                 | LR__0269
04760     96 FA 05 F6 | 	mov	result1, #150
04764     A4 02 90 FD | 	jmp	#LR__0355
04768                 | LR__0270
04768     43 FA 05 F6 | 	mov	result1, #67
0476c     9C 02 90 FD | 	jmp	#LR__0355
04770                 | LR__0271
04770     43 FA 05 F6 | 	mov	result1, #67
04774     94 02 90 FD | 	jmp	#LR__0355
04778                 | LR__0272
04778     5A FA 05 F6 | 	mov	result1, #90
0477c     8C 02 90 FD | 	jmp	#LR__0355
04780                 | LR__0273
04780     AB FA 05 F6 | 	mov	result1, #171
04784     84 02 90 FD | 	jmp	#LR__0355
04788                 | LR__0274
04788     46 FA 05 F6 | 	mov	result1, #70
0478c     7C 02 90 FD | 	jmp	#LR__0355
04790                 | LR__0275
04790     46 FA 05 F6 | 	mov	result1, #70
04794     74 02 90 FD | 	jmp	#LR__0355
04798                 | LR__0276
04798     71 FA 05 F6 | 	mov	result1, #113
0479c     6C 02 90 FD | 	jmp	#LR__0355
047a0                 | LR__0277
047a0     71 FA 05 F6 | 	mov	result1, #113
047a4     64 02 90 FD | 	jmp	#LR__0355
047a8                 | LR__0278
047a8     60 FA 05 F6 | 	mov	result1, #96
047ac     5C 02 90 FD | 	jmp	#LR__0355
047b0                 | LR__0279
047b0     4A FA 05 F6 | 	mov	result1, #74
047b4     54 02 90 FD | 	jmp	#LR__0355
047b8                 | LR__0280
047b8     4A FA 05 F6 | 	mov	result1, #74
047bc     4C 02 90 FD | 	jmp	#LR__0355
047c0                 | LR__0281
047c0     48 FA 05 F6 | 	mov	result1, #72
047c4     44 02 90 FD | 	jmp	#LR__0355
047c8                 | LR__0282
047c8     48 FA 05 F6 | 	mov	result1, #72
047cc     3C 02 90 FD | 	jmp	#LR__0355
047d0                 | LR__0283
047d0     A9 FA 05 F6 | 	mov	result1, #169
047d4     34 02 90 FD | 	jmp	#LR__0355
047d8                 | LR__0284
047d8     4E FA 05 F6 | 	mov	result1, #78
047dc     2C 02 90 FD | 	jmp	#LR__0355
047e0                 | LR__0285
047e0     4E FA 05 F6 | 	mov	result1, #78
047e4     24 02 90 FD | 	jmp	#LR__0355
047e8                 | LR__0286
047e8     58 FA 05 F6 | 	mov	result1, #88
047ec     1C 02 90 FD | 	jmp	#LR__0355
047f0                 | LR__0287
047f0     5F FA 05 F6 | 	mov	result1, #95
047f4     14 02 90 FD | 	jmp	#LR__0355
047f8                 | LR__0288
047f8     5F FA 05 F6 | 	mov	result1, #95
047fc     0C 02 90 FD | 	jmp	#LR__0355
04800                 | LR__0289
04800     8A FA 05 F6 | 	mov	result1, #138
04804     04 02 90 FD | 	jmp	#LR__0355
04808                 | LR__0290
04808     4C FA 05 F6 | 	mov	result1, #76
0480c     FC 01 90 FD | 	jmp	#LR__0355
04810                 | LR__0291
04810     4C FA 05 F6 | 	mov	result1, #76
04814     F4 01 90 FD | 	jmp	#LR__0355
04818                 | LR__0292
04818     52 FA 05 F6 | 	mov	result1, #82
0481c     EC 01 90 FD | 	jmp	#LR__0355
04820                 | LR__0293
04820     52 FA 05 F6 | 	mov	result1, #82
04824     E4 01 90 FD | 	jmp	#LR__0355
04828                 | LR__0294
04828     97 FA 05 F6 | 	mov	result1, #151
0482c     DC 01 90 FD | 	jmp	#LR__0355
04830                 | LR__0295
04830     61 FA 05 F6 | 	mov	result1, #97
04834     D4 01 90 FD | 	jmp	#LR__0355
04838                 | LR__0296
04838     61 FA 05 F6 | 	mov	result1, #97
0483c     CC 01 90 FD | 	jmp	#LR__0355
04840                 | LR__0297
04840     63 FA 05 F6 | 	mov	result1, #99
04844     C4 01 90 FD | 	jmp	#LR__0355
04848                 | LR__0298
04848     41 FA 05 F6 | 	mov	result1, #65
0484c     BC 01 90 FD | 	jmp	#LR__0355
04850                 | LR__0299
04850     4B FA 05 F6 | 	mov	result1, #75
04854     B4 01 90 FD | 	jmp	#LR__0355
04858                 | LR__0300
04858     4B FA 05 F6 | 	mov	result1, #75
0485c     AC 01 90 FD | 	jmp	#LR__0355
04860                 | LR__0301
04860     5E FA 05 F6 | 	mov	result1, #94
04864     A4 01 90 FD | 	jmp	#LR__0355
04868                 | LR__0302
04868     5E FA 05 F6 | 	mov	result1, #94
0486c     9C 01 90 FD | 	jmp	#LR__0355
04870                 | LR__0303
04870     7C FA 05 F6 | 	mov	result1, #124
04874     94 01 90 FD | 	jmp	#LR__0355
04878                 | LR__0304
04878     7E FA 05 F6 | 	mov	result1, #126
0487c     8C 01 90 FD | 	jmp	#LR__0355
04880                 | LR__0305
04880     7D FA 05 F6 | 	mov	result1, #125
04884     84 01 90 FD | 	jmp	#LR__0355
04888                 | LR__0306
04888     7F FA 05 F6 | 	mov	result1, #127
0488c     7C 01 90 FD | 	jmp	#LR__0355
04890                 | LR__0307
04890     80 FA 05 F6 | 	mov	result1, #128
04894     74 01 90 FD | 	jmp	#LR__0355
04898                 | LR__0308
04898     55 FA 05 F6 | 	mov	result1, #85
0489c     6C 01 90 FD | 	jmp	#LR__0355
048a0                 | LR__0309
048a0     75 FA 05 F6 | 	mov	result1, #117
048a4     64 01 90 FD | 	jmp	#LR__0355
048a8                 | LR__0310
048a8     75 FA 05 F6 | 	mov	result1, #117
048ac     5C 01 90 FD | 	jmp	#LR__0355
048b0                 | LR__0311
048b0     42 FA 05 F6 | 	mov	result1, #66
048b4     54 01 90 FD | 	jmp	#LR__0355
048b8                 | LR__0312
048b8     42 FA 05 F6 | 	mov	result1, #66
048bc     4C 01 90 FD | 	jmp	#LR__0355
048c0                 | LR__0313
048c0     95 FA 05 F6 | 	mov	result1, #149
048c4     44 01 90 FD | 	jmp	#LR__0355
048c8                 | LR__0314
048c8     AC FA 05 F6 | 	mov	result1, #172
048cc     3C 01 90 FD | 	jmp	#LR__0355
048d0                 | LR__0315
048d0     81 FA 05 F6 | 	mov	result1, #129
048d4     34 01 90 FD | 	jmp	#LR__0355
048d8                 | LR__0316
048d8     81 FA 05 F6 | 	mov	result1, #129
048dc     2C 01 90 FD | 	jmp	#LR__0355
048e0                 | LR__0317
048e0     44 FA 05 F6 | 	mov	result1, #68
048e4     24 01 90 FD | 	jmp	#LR__0355
048e8                 | LR__0318
048e8     44 FA 05 F6 | 	mov	result1, #68
048ec     1C 01 90 FD | 	jmp	#LR__0355
048f0                 | LR__0319
048f0     88 FA 05 F6 | 	mov	result1, #136
048f4     14 01 90 FD | 	jmp	#LR__0355
048f8                 | LR__0320
048f8     92 FA 05 F6 | 	mov	result1, #146
048fc     0C 01 90 FD | 	jmp	#LR__0355
04900                 | LR__0321
04900     AA FA 05 F6 | 	mov	result1, #170
04904     04 01 90 FD | 	jmp	#LR__0355
04908                 | LR__0322
04908     4D FA 05 F6 | 	mov	result1, #77
0490c     FC 00 90 FD | 	jmp	#LR__0355
04910                 | LR__0323
04910     51 FA 05 F6 | 	mov	result1, #81
04914     F4 00 90 FD | 	jmp	#LR__0355
04918                 | LR__0324
04918     51 FA 05 F6 | 	mov	result1, #81
0491c     EC 00 90 FD | 	jmp	#LR__0355
04920                 | LR__0325
04920     8E FA 05 F6 | 	mov	result1, #142
04924     E4 00 90 FD | 	jmp	#LR__0355
04928                 | LR__0326
04928     8E FA 05 F6 | 	mov	result1, #142
0492c     DC 00 90 FD | 	jmp	#LR__0355
04930                 | LR__0327
04930     90 FA 05 F6 | 	mov	result1, #144
04934     D4 00 90 FD | 	jmp	#LR__0355
04938                 | LR__0328
04938     90 FA 05 F6 | 	mov	result1, #144
0493c     CC 00 90 FD | 	jmp	#LR__0355
04940                 | LR__0329
04940     8D FA 05 F6 | 	mov	result1, #141
04944     C4 00 90 FD | 	jmp	#LR__0355
04948                 | LR__0330
04948     8D FA 05 F6 | 	mov	result1, #141
0494c     BC 00 90 FD | 	jmp	#LR__0355
04950                 | LR__0331
04950     8C FA 05 F6 | 	mov	result1, #140
04954     B4 00 90 FD | 	jmp	#LR__0355
04958                 | LR__0332
04958     8C FA 05 F6 | 	mov	result1, #140
0495c     AC 00 90 FD | 	jmp	#LR__0355
04960                 | LR__0333
04960     91 FA 05 F6 | 	mov	result1, #145
04964     A4 00 90 FD | 	jmp	#LR__0355
04968                 | LR__0334
04968     91 FA 05 F6 | 	mov	result1, #145
0496c     9C 00 90 FD | 	jmp	#LR__0355
04970                 | LR__0335
04970     8B FA 05 F6 | 	mov	result1, #139
04974     94 00 90 FD | 	jmp	#LR__0355
04978                 | LR__0336
04978     8B FA 05 F6 | 	mov	result1, #139
0497c     8C 00 90 FD | 	jmp	#LR__0355
04980                 | LR__0337
04980     8F FA 05 F6 | 	mov	result1, #143
04984     84 00 90 FD | 	jmp	#LR__0355
04988                 | LR__0338
04988     8F FA 05 F6 | 	mov	result1, #143
0498c     7C 00 90 FD | 	jmp	#LR__0355
04990                 | LR__0339
04990     8F FA 05 F6 | 	mov	result1, #143
04994     74 00 90 FD | 	jmp	#LR__0355
04998                 | LR__0340
04998     B2 FA 05 F6 | 	mov	result1, #178
0499c     6C 00 90 FD | 	jmp	#LR__0355
049a0                 | LR__0341
049a0     B2 FA 05 F6 | 	mov	result1, #178
049a4     64 00 90 FD | 	jmp	#LR__0355
049a8                 | LR__0342
049a8     75 FA 05 F6 | 	mov	result1, #117
049ac     5C 00 90 FD | 	jmp	#LR__0355
049b0                 | LR__0343
049b0     75 FA 05 F6 | 	mov	result1, #117
049b4     54 00 90 FD | 	jmp	#LR__0355
049b8                 | LR__0344
049b8     6D FA 05 F6 | 	mov	result1, #109
049bc     4C 00 90 FD | 	jmp	#LR__0355
049c0                 | LR__0345
049c0     6D FA 05 F6 | 	mov	result1, #109
049c4     44 00 90 FD | 	jmp	#LR__0355
049c8                 | LR__0346
049c8     5B FA 05 F6 | 	mov	result1, #91
049cc     3C 00 90 FD | 	jmp	#LR__0355
049d0                 | LR__0347
049d0     56 FA 05 F6 | 	mov	result1, #86
049d4     34 00 90 FD | 	jmp	#LR__0355
049d8                 | LR__0348
049d8     70 FA 05 F6 | 	mov	result1, #112
049dc     2C 00 90 FD | 	jmp	#LR__0355
049e0                 | LR__0349
049e0     70 FA 05 F6 | 	mov	result1, #112
049e4     24 00 90 FD | 	jmp	#LR__0355
049e8                 | LR__0350
049e8     57 FA 05 F6 | 	mov	result1, #87
049ec     1C 00 90 FD | 	jmp	#LR__0355
049f0                 | LR__0351
049f0     57 FA 05 F6 | 	mov	result1, #87
049f4     14 00 90 FD | 	jmp	#LR__0355
049f8                 | LR__0352
049f8     77 FA 05 F6 | 	mov	result1, #119
049fc     0C 00 90 FD | 	jmp	#LR__0355
04a00                 | LR__0353
04a00     78 FA 05 F6 | 	mov	result1, #120
04a04     04 00 90 FD | 	jmp	#LR__0355
04a08                 | LR__0354
04a08     00 FA 05 F6 | 	mov	result1, #0
04a0c                 | LR__0355
04a0c     A7 F0 03 F6 | 	mov	ptra, fp
04a10     B2 00 A0 FD | 	call	#popregs_
04a14                 | _iscommand_ret
04a14     2D 00 64 FD | 	ret
04a18                 | 
04a18                 | ' 
04a18                 | ' function isfunction(s as string) as ubyte
04a18                 | _isfunction
04a18     01 4A 05 F6 | 	mov	COUNT_, #1
04a1c     A8 00 A0 FD | 	call	#pushregs_
04a20                 | ' 
04a20                 | ' select case s
04a20     09 1F 02 F6 | 	mov	local01, arg01
04a24     79 01 00 FF 
04a28     23 14 06 F6 | 	mov	arg02, ##@LR__5077
04a2c     0F 13 02 F6 | 	mov	arg01, local01
04a30     F0 AD B1 FD | 	call	#__system___string_cmp
04a34     00 FA 0D F2 | 	cmp	result1, #0 wz
04a38     DC 03 90 AD |  if_e	jmp	#LR__0360
04a3c     79 01 00 FF 
04a40     27 14 06 F6 | 	mov	arg02, ##@LR__5078
04a44     0F 13 02 F6 | 	mov	arg01, local01
04a48     D8 AD B1 FD | 	call	#__system___string_cmp
04a4c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a50     CC 03 90 AD |  if_e	jmp	#LR__0361
04a54     79 01 00 FF 
04a58     2C 14 06 F6 | 	mov	arg02, ##@LR__5079
04a5c     0F 13 02 F6 | 	mov	arg01, local01
04a60     C0 AD B1 FD | 	call	#__system___string_cmp
04a64     00 FA 0D F2 | 	cmp	result1, #0 wz
04a68     BC 03 90 AD |  if_e	jmp	#LR__0362
04a6c     79 01 00 FF 
04a70     30 14 06 F6 | 	mov	arg02, ##@LR__5080
04a74     0F 13 02 F6 | 	mov	arg01, local01
04a78     A8 AD B1 FD | 	call	#__system___string_cmp
04a7c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a80     AC 03 90 AD |  if_e	jmp	#LR__0363
04a84     79 01 00 FF 
04a88     35 14 06 F6 | 	mov	arg02, ##@LR__5081
04a8c     0F 13 02 F6 | 	mov	arg01, local01
04a90     90 AD B1 FD | 	call	#__system___string_cmp
04a94     00 FA 0D F2 | 	cmp	result1, #0 wz
04a98     9C 03 90 AD |  if_e	jmp	#LR__0364
04a9c     79 01 00 FF 
04aa0     39 14 06 F6 | 	mov	arg02, ##@LR__5082
04aa4     0F 13 02 F6 | 	mov	arg01, local01
04aa8     78 AD B1 FD | 	call	#__system___string_cmp
04aac     00 FA 0D F2 | 	cmp	result1, #0 wz
04ab0     8C 03 90 AD |  if_e	jmp	#LR__0365
04ab4     79 01 00 FF 
04ab8     3E 14 06 F6 | 	mov	arg02, ##@LR__5083
04abc     0F 13 02 F6 | 	mov	arg01, local01
04ac0     60 AD B1 FD | 	call	#__system___string_cmp
04ac4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ac8     7C 03 90 AD |  if_e	jmp	#LR__0366
04acc     79 01 00 FF 
04ad0     42 14 06 F6 | 	mov	arg02, ##@LR__5084
04ad4     0F 13 02 F6 | 	mov	arg01, local01
04ad8     48 AD B1 FD | 	call	#__system___string_cmp
04adc     00 FA 0D F2 | 	cmp	result1, #0 wz
04ae0     6C 03 90 AD |  if_e	jmp	#LR__0367
04ae4     79 01 00 FF 
04ae8     47 14 06 F6 | 	mov	arg02, ##@LR__5085
04aec     0F 13 02 F6 | 	mov	arg01, local01
04af0     30 AD B1 FD | 	call	#__system___string_cmp
04af4     00 FA 0D F2 | 	cmp	result1, #0 wz
04af8     5C 03 90 AD |  if_e	jmp	#LR__0368
04afc     79 01 00 FF 
04b00     4C 14 06 F6 | 	mov	arg02, ##@LR__5086
04b04     0F 13 02 F6 | 	mov	arg01, local01
04b08     18 AD B1 FD | 	call	#__system___string_cmp
04b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b10     4C 03 90 AD |  if_e	jmp	#LR__0369
04b14     79 01 00 FF 
04b18     50 14 06 F6 | 	mov	arg02, ##@LR__5087
04b1c     0F 13 02 F6 | 	mov	arg01, local01
04b20     00 AD B1 FD | 	call	#__system___string_cmp
04b24     00 FA 0D F2 | 	cmp	result1, #0 wz
04b28     3C 03 90 AD |  if_e	jmp	#LR__0370
04b2c     79 01 00 FF 
04b30     56 14 06 F6 | 	mov	arg02, ##@LR__5088
04b34     0F 13 02 F6 | 	mov	arg01, local01
04b38     E8 AC B1 FD | 	call	#__system___string_cmp
04b3c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b40     2C 03 90 AD |  if_e	jmp	#LR__0371
04b44     79 01 00 FF 
04b48     5A 14 06 F6 | 	mov	arg02, ##@LR__5089
04b4c     0F 13 02 F6 | 	mov	arg01, local01
04b50     D0 AC B1 FD | 	call	#__system___string_cmp
04b54     00 FA 0D F2 | 	cmp	result1, #0 wz
04b58     1C 03 90 AD |  if_e	jmp	#LR__0372
04b5c     79 01 00 FF 
04b60     63 14 06 F6 | 	mov	arg02, ##@LR__5090
04b64     0F 13 02 F6 | 	mov	arg01, local01
04b68     B8 AC B1 FD | 	call	#__system___string_cmp
04b6c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b70     0C 03 90 AD |  if_e	jmp	#LR__0373
04b74     79 01 00 FF 
04b78     67 14 06 F6 | 	mov	arg02, ##@LR__5091
04b7c     0F 13 02 F6 | 	mov	arg01, local01
04b80     A0 AC B1 FD | 	call	#__system___string_cmp
04b84     00 FA 0D F2 | 	cmp	result1, #0 wz
04b88     FC 02 90 AD |  if_e	jmp	#LR__0374
04b8c     79 01 00 FF 
04b90     75 14 06 F6 | 	mov	arg02, ##@LR__5092
04b94     0F 13 02 F6 | 	mov	arg01, local01
04b98     88 AC B1 FD | 	call	#__system___string_cmp
04b9c     00 FA 0D F2 | 	cmp	result1, #0 wz
04ba0     EC 02 90 AD |  if_e	jmp	#LR__0375
04ba4     79 01 00 FF 
04ba8     82 14 06 F6 | 	mov	arg02, ##@LR__5093
04bac     0F 13 02 F6 | 	mov	arg01, local01
04bb0     70 AC B1 FD | 	call	#__system___string_cmp
04bb4     00 FA 0D F2 | 	cmp	result1, #0 wz
04bb8     DC 02 90 AD |  if_e	jmp	#LR__0376
04bbc     79 01 00 FF 
04bc0     8A 14 06 F6 | 	mov	arg02, ##@LR__5094
04bc4     0F 13 02 F6 | 	mov	arg01, local01
04bc8     58 AC B1 FD | 	call	#__system___string_cmp
04bcc     00 FA 0D F2 | 	cmp	result1, #0 wz
04bd0     CC 02 90 AD |  if_e	jmp	#LR__0377
04bd4     79 01 00 FF 
04bd8     8F 14 06 F6 | 	mov	arg02, ##@LR__5095
04bdc     0F 13 02 F6 | 	mov	arg01, local01
04be0     40 AC B1 FD | 	call	#__system___string_cmp
04be4     00 FA 0D F2 | 	cmp	result1, #0 wz
04be8     BC 02 90 AD |  if_e	jmp	#LR__0378
04bec     79 01 00 FF 
04bf0     96 14 06 F6 | 	mov	arg02, ##@LR__5096
04bf4     0F 13 02 F6 | 	mov	arg01, local01
04bf8     28 AC B1 FD | 	call	#__system___string_cmp
04bfc     00 FA 0D F2 | 	cmp	result1, #0 wz
04c00     AC 02 90 AD |  if_e	jmp	#LR__0379
04c04     79 01 00 FF 
04c08     9C 14 06 F6 | 	mov	arg02, ##@LR__5097
04c0c     0F 13 02 F6 | 	mov	arg01, local01
04c10     10 AC B1 FD | 	call	#__system___string_cmp
04c14     00 FA 0D F2 | 	cmp	result1, #0 wz
04c18     9C 02 90 AD |  if_e	jmp	#LR__0380
04c1c     79 01 00 FF 
04c20     A0 14 06 F6 | 	mov	arg02, ##@LR__5098
04c24     0F 13 02 F6 | 	mov	arg01, local01
04c28     F8 AB B1 FD | 	call	#__system___string_cmp
04c2c     00 FA 0D F2 | 	cmp	result1, #0 wz
04c30     8C 02 90 AD |  if_e	jmp	#LR__0381
04c34     79 01 00 FF 
04c38     A4 14 06 F6 | 	mov	arg02, ##@LR__5099
04c3c     0F 13 02 F6 | 	mov	arg01, local01
04c40     E0 AB B1 FD | 	call	#__system___string_cmp
04c44     00 FA 0D F2 | 	cmp	result1, #0 wz
04c48     7C 02 90 AD |  if_e	jmp	#LR__0382
04c4c     79 01 00 FF 
04c50     AA 14 06 F6 | 	mov	arg02, ##@LR__5100
04c54     0F 13 02 F6 | 	mov	arg01, local01
04c58     C8 AB B1 FD | 	call	#__system___string_cmp
04c5c     00 FA 0D F2 | 	cmp	result1, #0 wz
04c60     6C 02 90 AD |  if_e	jmp	#LR__0383
04c64     79 01 00 FF 
04c68     AF 14 06 F6 | 	mov	arg02, ##@LR__5101
04c6c     0F 13 02 F6 | 	mov	arg01, local01
04c70     B0 AB B1 FD | 	call	#__system___string_cmp
04c74     00 FA 0D F2 | 	cmp	result1, #0 wz
04c78     5C 02 90 AD |  if_e	jmp	#LR__0384
04c7c     79 01 00 FF 
04c80     B6 14 06 F6 | 	mov	arg02, ##@LR__5102
04c84     0F 13 02 F6 | 	mov	arg01, local01
04c88     98 AB B1 FD | 	call	#__system___string_cmp
04c8c     00 FA 0D F2 | 	cmp	result1, #0 wz
04c90     4C 02 90 AD |  if_e	jmp	#LR__0385
04c94     79 01 00 FF 
04c98     BD 14 06 F6 | 	mov	arg02, ##@LR__5103
04c9c     0F 13 02 F6 | 	mov	arg01, local01
04ca0     80 AB B1 FD | 	call	#__system___string_cmp
04ca4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ca8     3C 02 90 AD |  if_e	jmp	#LR__0386
04cac     79 01 00 FF 
04cb0     C4 14 06 F6 | 	mov	arg02, ##@LR__5104
04cb4     0F 13 02 F6 | 	mov	arg01, local01
04cb8     68 AB B1 FD | 	call	#__system___string_cmp
04cbc     00 FA 0D F2 | 	cmp	result1, #0 wz
04cc0     2C 02 90 AD |  if_e	jmp	#LR__0387
04cc4     79 01 00 FF 
04cc8     CB 14 06 F6 | 	mov	arg02, ##@LR__5105
04ccc     0F 13 02 F6 | 	mov	arg01, local01
04cd0     50 AB B1 FD | 	call	#__system___string_cmp
04cd4     00 FA 0D F2 | 	cmp	result1, #0 wz
04cd8     1C 02 90 AD |  if_e	jmp	#LR__0388
04cdc     79 01 00 FF 
04ce0     D0 14 06 F6 | 	mov	arg02, ##@LR__5106
04ce4     0F 13 02 F6 | 	mov	arg01, local01
04ce8     38 AB B1 FD | 	call	#__system___string_cmp
04cec     00 FA 0D F2 | 	cmp	result1, #0 wz
04cf0     0C 02 90 AD |  if_e	jmp	#LR__0389
04cf4     79 01 00 FF 
04cf8     D8 14 06 F6 | 	mov	arg02, ##@LR__5107
04cfc     0F 13 02 F6 | 	mov	arg01, local01
04d00     20 AB B1 FD | 	call	#__system___string_cmp
04d04     00 FA 0D F2 | 	cmp	result1, #0 wz
04d08     FC 01 90 AD |  if_e	jmp	#LR__0390
04d0c     79 01 00 FF 
04d10     DE 14 06 F6 | 	mov	arg02, ##@LR__5108
04d14     0F 13 02 F6 | 	mov	arg01, local01
04d18     08 AB B1 FD | 	call	#__system___string_cmp
04d1c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d20     EC 01 90 AD |  if_e	jmp	#LR__0391
04d24     79 01 00 FF 
04d28     E5 14 06 F6 | 	mov	arg02, ##@LR__5109
04d2c     0F 13 02 F6 | 	mov	arg01, local01
04d30     F0 AA B1 FD | 	call	#__system___string_cmp
04d34     00 FA 0D F2 | 	cmp	result1, #0 wz
04d38     DC 01 90 AD |  if_e	jmp	#LR__0392
04d3c     79 01 00 FF 
04d40     EB 14 06 F6 | 	mov	arg02, ##@LR__5110
04d44     0F 13 02 F6 | 	mov	arg01, local01
04d48     D8 AA B1 FD | 	call	#__system___string_cmp
04d4c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d50     CC 01 90 AD |  if_e	jmp	#LR__0393
04d54     79 01 00 FF 
04d58     EF 14 06 F6 | 	mov	arg02, ##@LR__5111
04d5c     0F 13 02 F6 | 	mov	arg01, local01
04d60     C0 AA B1 FD | 	call	#__system___string_cmp
04d64     00 FA 0D F2 | 	cmp	result1, #0 wz
04d68     BC 01 90 AD |  if_e	jmp	#LR__0394
04d6c     79 01 00 FF 
04d70     F3 14 06 F6 | 	mov	arg02, ##@LR__5112
04d74     0F 13 02 F6 | 	mov	arg01, local01
04d78     A8 AA B1 FD | 	call	#__system___string_cmp
04d7c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d80     AC 01 90 AD |  if_e	jmp	#LR__0395
04d84     79 01 00 FF 
04d88     F7 14 06 F6 | 	mov	arg02, ##@LR__5113
04d8c     0F 13 02 F6 | 	mov	arg01, local01
04d90     90 AA B1 FD | 	call	#__system___string_cmp
04d94     00 FA 0D F2 | 	cmp	result1, #0 wz
04d98     9C 01 90 AD |  if_e	jmp	#LR__0396
04d9c     79 01 00 FF 
04da0     FD 14 06 F6 | 	mov	arg02, ##@LR__5114
04da4     0F 13 02 F6 | 	mov	arg01, local01
04da8     78 AA B1 FD | 	call	#__system___string_cmp
04dac     00 FA 0D F2 | 	cmp	result1, #0 wz
04db0     8C 01 90 AD |  if_e	jmp	#LR__0397
04db4     79 01 00 FF 
04db8     03 15 06 F6 | 	mov	arg02, ##@LR__5115
04dbc     0F 13 02 F6 | 	mov	arg01, local01
04dc0     60 AA B1 FD | 	call	#__system___string_cmp
04dc4     00 FA 0D F2 | 	cmp	result1, #0 wz
04dc8     7C 01 90 AD |  if_e	jmp	#LR__0398
04dcc     79 01 00 FF 
04dd0     08 15 06 F6 | 	mov	arg02, ##@LR__5116
04dd4     0F 13 02 F6 | 	mov	arg01, local01
04dd8     48 AA B1 FD | 	call	#__system___string_cmp
04ddc     00 FA 0D F2 | 	cmp	result1, #0 wz
04de0     6C 01 90 AD |  if_e	jmp	#LR__0399
04de4     79 01 00 FF 
04de8     0C 15 06 F6 | 	mov	arg02, ##@LR__5117
04dec     0F 13 02 F6 | 	mov	arg01, local01
04df0     30 AA B1 FD | 	call	#__system___string_cmp
04df4     00 FA 0D F2 | 	cmp	result1, #0 wz
04df8     5C 01 90 AD |  if_e	jmp	#LR__0400
04dfc     79 01 00 FF 
04e00     10 15 06 F6 | 	mov	arg02, ##@LR__5118
04e04     0F 13 02 F6 | 	mov	arg01, local01
04e08     18 AA B1 FD | 	call	#__system___string_cmp
04e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e10     4C 01 90 AD |  if_e	jmp	#LR__0401
04e14     50 01 90 FD | 	jmp	#LR__0402
04e18                 | LR__0360
04e18     9E FA 05 F6 | 	mov	result1, #158
04e1c     4C 01 90 FD | 	jmp	#LR__0403
04e20                 | LR__0361
04e20     85 FA 05 F6 | 	mov	result1, #133
04e24     44 01 90 FD | 	jmp	#LR__0403
04e28                 | LR__0362
04e28     9B FA 05 F6 | 	mov	result1, #155
04e2c     3C 01 90 FD | 	jmp	#LR__0403
04e30                 | LR__0363
04e30     9B FA 05 F6 | 	mov	result1, #155
04e34     34 01 90 FD | 	jmp	#LR__0403
04e38                 | LR__0364
04e38     A7 FA 05 F6 | 	mov	result1, #167
04e3c     2C 01 90 FD | 	jmp	#LR__0403
04e40                 | LR__0365
04e40     84 FA 05 F6 | 	mov	result1, #132
04e44     24 01 90 FD | 	jmp	#LR__0403
04e48                 | LR__0366
04e48     86 FA 05 F6 | 	mov	result1, #134
04e4c     1C 01 90 FD | 	jmp	#LR__0403
04e50                 | LR__0367
04e50     A2 FA 05 F6 | 	mov	result1, #162
04e54     14 01 90 FD | 	jmp	#LR__0403
04e58                 | LR__0368
04e58     9F FA 05 F6 | 	mov	result1, #159
04e5c     0C 01 90 FD | 	jmp	#LR__0403
04e60                 | LR__0369
04e60     82 FA 05 F6 | 	mov	result1, #130
04e64     04 01 90 FD | 	jmp	#LR__0403
04e68                 | LR__0370
04e68     99 FA 05 F6 | 	mov	result1, #153
04e6c     FC 00 90 FD | 	jmp	#LR__0403
04e70                 | LR__0371
04e70     9C FA 05 F6 | 	mov	result1, #156
04e74     F4 00 90 FD | 	jmp	#LR__0403
04e78                 | LR__0372
04e78     6F FA 05 F6 | 	mov	result1, #111
04e7c     EC 00 90 FD | 	jmp	#LR__0403
04e80                 | LR__0373
04e80     6F FA 05 F6 | 	mov	result1, #111
04e84     E4 00 90 FD | 	jmp	#LR__0403
04e88                 | LR__0374
04e88     93 FA 05 F6 | 	mov	result1, #147
04e8c     DC 00 90 FD | 	jmp	#LR__0403
04e90                 | LR__0375
04e90     94 FA 05 F6 | 	mov	result1, #148
04e94     D4 00 90 FD | 	jmp	#LR__0403
04e98                 | LR__0376
04e98     62 FA 05 F6 | 	mov	result1, #98
04e9c     CC 00 90 FD | 	jmp	#LR__0403
04ea0                 | LR__0377
04ea0     A3 FA 05 F6 | 	mov	result1, #163
04ea4     C4 00 90 FD | 	jmp	#LR__0403
04ea8                 | LR__0378
04ea8     9D FA 05 F6 | 	mov	result1, #157
04eac     BC 00 90 FD | 	jmp	#LR__0403
04eb0                 | LR__0379
04eb0     A4 FA 05 F6 | 	mov	result1, #164
04eb4     B4 00 90 FD | 	jmp	#LR__0403
04eb8                 | LR__0380
04eb8     A8 FA 05 F6 | 	mov	result1, #168
04ebc     AC 00 90 FD | 	jmp	#LR__0403
04ec0                 | LR__0381
04ec0     AD FA 05 F6 | 	mov	result1, #173
04ec4     A4 00 90 FD | 	jmp	#LR__0403
04ec8                 | LR__0382
04ec8     9A FA 05 F6 | 	mov	result1, #154
04ecc     9C 00 90 FD | 	jmp	#LR__0403
04ed0                 | LR__0383
04ed0     A6 FA 05 F6 | 	mov	result1, #166
04ed4     94 00 90 FD | 	jmp	#LR__0403
04ed8                 | LR__0384
04ed8     66 FA 05 F6 | 	mov	result1, #102
04edc     8C 00 90 FD | 	jmp	#LR__0403
04ee0                 | LR__0385
04ee0     67 FA 05 F6 | 	mov	result1, #103
04ee4     84 00 90 FD | 	jmp	#LR__0403
04ee8                 | LR__0386
04ee8     64 FA 05 F6 | 	mov	result1, #100
04eec     7C 00 90 FD | 	jmp	#LR__0403
04ef0                 | LR__0387
04ef0     65 FA 05 F6 | 	mov	result1, #101
04ef4     74 00 90 FD | 	jmp	#LR__0403
04ef8                 | LR__0388
04ef8     98 FA 05 F6 | 	mov	result1, #152
04efc     6C 00 90 FD | 	jmp	#LR__0403
04f00                 | LR__0389
04f00     7B FA 05 F6 | 	mov	result1, #123
04f04     64 00 90 FD | 	jmp	#LR__0403
04f08                 | LR__0390
04f08     76 FA 05 F6 | 	mov	result1, #118
04f0c     5C 00 90 FD | 	jmp	#LR__0403
04f10                 | LR__0391
04f10     A5 FA 05 F6 | 	mov	result1, #165
04f14     54 00 90 FD | 	jmp	#LR__0403
04f18                 | LR__0392
04f18     7A FA 05 F6 | 	mov	result1, #122
04f1c     4C 00 90 FD | 	jmp	#LR__0403
04f20                 | LR__0393
04f20     54 FA 05 F6 | 	mov	result1, #84
04f24     44 00 90 FD | 	jmp	#LR__0403
04f28                 | LR__0394
04f28     6B FA 05 F6 | 	mov	result1, #107
04f2c     3C 00 90 FD | 	jmp	#LR__0403
04f30                 | LR__0395
04f30     87 FA 05 F6 | 	mov	result1, #135
04f34     34 00 90 FD | 	jmp	#LR__0403
04f38                 | LR__0396
04f38     6A FA 05 F6 | 	mov	result1, #106
04f3c     2C 00 90 FD | 	jmp	#LR__0403
04f40                 | LR__0397
04f40     6E FA 05 F6 | 	mov	result1, #110
04f44     24 00 90 FD | 	jmp	#LR__0403
04f48                 | LR__0398
04f48     A1 FA 05 F6 | 	mov	result1, #161
04f4c     1C 00 90 FD | 	jmp	#LR__0403
04f50                 | LR__0399
04f50     83 FA 05 F6 | 	mov	result1, #131
04f54     14 00 90 FD | 	jmp	#LR__0403
04f58                 | LR__0400
04f58     A0 FA 05 F6 | 	mov	result1, #160
04f5c     0C 00 90 FD | 	jmp	#LR__0403
04f60                 | LR__0401
04f60     9B FA 05 F6 | 	mov	result1, #155
04f64     04 00 90 FD | 	jmp	#LR__0403
04f68                 | LR__0402
04f68     00 FA 05 F6 | 	mov	result1, #0
04f6c                 | LR__0403
04f6c     A7 F0 03 F6 | 	mov	ptra, fp
04f70     B2 00 A0 FD | 	call	#popregs_
04f74                 | _isfunction_ret
04f74     2D 00 64 FD | 	ret
04f78                 | 
04f78                 | ' 
04f78                 | ' function isname(s as string) as boolean
04f78                 | _isname
04f78     0D 4A 05 F6 | 	mov	COUNT_, #13
04f7c     A8 00 A0 FD | 	call	#pushregs_
04f80     09 1F 02 F6 | 	mov	local01, arg01
04f84     09 21 02 F6 | 	mov	local02, arg01
04f88     97 06 48 FB | 	callpa	#(@LR__0411-@LR__0410)>>2,fcache_load_ptr_
04f8c                 | LR__0410
04f8c     10 FB C9 FA | 	rdbyte	result1, local02 wz
04f90     01 20 06 51 |  if_ne	add	local02, #1
04f94     F4 FF 9F 5D |  if_ne	jmp	#LR__0410
04f98                 | LR__0411
04f98     09 21 82 F1 | 	sub	local02, arg01
04f9c     10 FB 01 F6 | 	mov	result1, local02
04fa0     FD 22 0A F6 | 	mov	local03, result1 wz
04fa4     00 FA 05 A6 |  if_e	mov	result1, #0
04fa8     34 02 90 AD |  if_e	jmp	#LR__0423
04fac     0F 13 02 F6 | 	mov	arg01, local01
04fb0     01 14 06 F6 | 	mov	arg02, #1
04fb4     01 16 06 F6 | 	mov	arg03, #1
04fb8     68 C9 B1 FD | 	call	#__system__Mid_S
04fbc     FD 24 02 F6 | 	mov	local04, result1
04fc0                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
04fc0     79 01 00 FF 
04fc4     17 15 06 F6 | 	mov	arg02, ##@LR__5119
04fc8     12 13 02 F6 | 	mov	arg01, local04
04fcc     54 A8 B1 FD | 	call	#__system___string_cmp
04fd0     00 FA 55 F2 | 	cmps	result1, #0 wc
04fd4     18 00 90 CD |  if_b	jmp	#LR__0412
04fd8     79 01 00 FF 
04fdc     19 15 06 F6 | 	mov	arg02, ##@LR__5120
04fe0     12 13 02 F6 | 	mov	arg01, local04
04fe4     3C A8 B1 FD | 	call	#__system___string_cmp
04fe8     01 FA 55 F2 | 	cmps	result1, #1 wc
04fec     1C 00 90 CD |  if_b	jmp	#LR__0413
04ff0                 | LR__0412
04ff0     79 01 00 FF 
04ff4     1B 15 06 F6 | 	mov	arg02, ##@LR__5121
04ff8     12 13 02 F6 | 	mov	arg01, local04
04ffc     24 A8 B1 FD | 	call	#__system___string_cmp
05000     00 FA 0D F2 | 	cmp	result1, #0 wz
05004     00 FA 05 56 |  if_ne	mov	result1, #0
05008     D4 01 90 5D |  if_ne	jmp	#LR__0423
0500c                 | LR__0413
0500c                 | ' if l>2 then 
0500c     03 22 56 F2 | 	cmps	local03, #3 wc
05010     C8 01 90 CD |  if_b	jmp	#LR__0422
05014                 | '   for i=2 to l
05014     02 26 06 F6 | 	mov	local05, #2
05018     11 29 02 F6 | 	mov	local06, local03
0501c     01 28 06 F1 | 	add	local06, #1
05020                 | LR__0414
05020     14 27 52 F2 | 	cmps	local05, local06 wc
05024     B4 01 90 3D |  if_ae	jmp	#LR__0421
05028     0F 13 02 F6 | 	mov	arg01, local01
0502c     13 15 02 F6 | 	mov	arg02, local05
05030     01 16 06 F6 | 	mov	arg03, #1
05034     EC C8 B1 FD | 	call	#__system__Mid_S
05038     FD 24 02 F6 | 	mov	local04, result1
0503c                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false
0503c     11 27 52 F2 | 	cmps	local05, local03 wc
05040     9C 00 90 3D |  if_ae	jmp	#LR__0417
05044     79 01 00 FF 
05048     1D 15 06 F6 | 	mov	arg02, ##@LR__5122
0504c     12 13 02 F6 | 	mov	arg01, local04
05050     D0 A7 B1 FD | 	call	#__system___string_cmp
05054     00 FA 55 F2 | 	cmps	result1, #0 wc
05058     18 00 90 CD |  if_b	jmp	#LR__0415
0505c     79 01 00 FF 
05060     1F 15 06 F6 | 	mov	arg02, ##@LR__5123
05064     12 13 02 F6 | 	mov	arg01, local04
05068     B8 A7 B1 FD | 	call	#__system___string_cmp
0506c     01 FA 55 F2 | 	cmps	result1, #1 wc
05070     6C 00 90 CD |  if_b	jmp	#LR__0417
05074                 | LR__0415
05074     79 01 00 FF 
05078     21 15 06 F6 | 	mov	arg02, ##@LR__5124
0507c     12 13 02 F6 | 	mov	arg01, local04
05080     A0 A7 B1 FD | 	call	#__system___string_cmp
05084     00 FA 55 F2 | 	cmps	result1, #0 wc
05088     18 00 90 CD |  if_b	jmp	#LR__0416
0508c     79 01 00 FF 
05090     23 15 06 F6 | 	mov	arg02, ##@LR__5125
05094     12 13 02 F6 | 	mov	arg01, local04
05098     88 A7 B1 FD | 	call	#__system___string_cmp
0509c     01 FA 55 F2 | 	cmps	result1, #1 wc
050a0     3C 00 90 CD |  if_b	jmp	#LR__0417
050a4                 | LR__0416
050a4     79 01 00 FF 
050a8     25 2B 06 F6 | 	mov	local07, ##@LR__5126
050ac     12 13 02 F6 | 	mov	arg01, local04
050b0     15 15 02 F6 | 	mov	arg02, local07
050b4     6C A7 B1 FD | 	call	#__system___string_cmp
050b8     00 FA 0D F2 | 	cmp	result1, #0 wz
050bc     20 00 90 AD |  if_e	jmp	#LR__0417
050c0     79 01 00 FF 
050c4     27 2D 06 F6 | 	mov	local08, ##@LR__5127
050c8     12 13 02 F6 | 	mov	arg01, local04
050cc     16 15 02 F6 | 	mov	arg02, local08
050d0     50 A7 B1 FD | 	call	#__system___string_cmp
050d4     FD 2E 0A F6 | 	mov	local09, result1 wz
050d8     00 FA 05 56 |  if_ne	mov	result1, #0
050dc     00 01 90 5D |  if_ne	jmp	#LR__0423
050e0                 | LR__0417
050e0                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
050e0     11 27 0A F2 | 	cmp	local05, local03 wz
050e4     EC 00 90 5D |  if_ne	jmp	#LR__0420
050e8     79 01 00 FF 
050ec     29 31 06 F6 | 	mov	local10, ##@LR__5128
050f0     12 13 02 F6 | 	mov	arg01, local04
050f4     18 15 02 F6 | 	mov	arg02, local10
050f8     28 A7 B1 FD | 	call	#__system___string_cmp
050fc     FD 32 02 F6 | 	mov	local11, result1
05100     00 32 56 F2 | 	cmps	local11, #0 wc
05104     1C 00 90 CD |  if_b	jmp	#LR__0418
05108     79 01 00 FF 
0510c     2B 15 06 F6 | 	mov	arg02, ##@LR__5129
05110     12 13 02 F6 | 	mov	arg01, local04
05114     0C A7 B1 FD | 	call	#__system___string_cmp
05118     FD 30 02 F6 | 	mov	local10, result1
0511c     01 30 56 F2 | 	cmps	local10, #1 wc
05120     B0 00 90 CD |  if_b	jmp	#LR__0420
05124                 | LR__0418
05124     79 01 00 FF 
05128     2D 15 06 F6 | 	mov	arg02, ##@LR__5130
0512c     12 13 02 F6 | 	mov	arg01, local04
05130     F0 A6 B1 FD | 	call	#__system___string_cmp
05134     00 FA 55 F2 | 	cmps	result1, #0 wc
05138     1C 00 90 CD |  if_b	jmp	#LR__0419
0513c     79 01 00 FF 
05140     2F 2F 06 F6 | 	mov	local09, ##@LR__5131
05144     12 13 02 F6 | 	mov	arg01, local04
05148     17 15 02 F6 | 	mov	arg02, local09
0514c     D4 A6 B1 FD | 	call	#__system___string_cmp
05150     01 FA 55 F2 | 	cmps	result1, #1 wc
05154     7C 00 90 CD |  if_b	jmp	#LR__0420
05158                 | LR__0419
05158     79 01 00 FF 
0515c     31 2F 06 F6 | 	mov	local09, ##@LR__5132
05160     12 13 02 F6 | 	mov	arg01, local04
05164     17 15 02 F6 | 	mov	arg02, local09
05168     B8 A6 B1 FD | 	call	#__system___string_cmp
0516c     00 FA 4D F2 | 	cmps	result1, #0 wz
05170     60 00 90 AD |  if_e	jmp	#LR__0420
05174     79 01 00 FF 
05178     33 2D 06 F6 | 	mov	local08, ##@LR__5133
0517c     12 13 02 F6 | 	mov	arg01, local04
05180     16 15 02 F6 | 	mov	arg02, local08
05184     9C A6 B1 FD | 	call	#__system___string_cmp
05188     FD 2E 0A F6 | 	mov	local09, result1 wz
0518c     44 00 90 AD |  if_e	jmp	#LR__0420
05190     79 01 00 FF 
05194     35 35 06 F6 | 	mov	local12, ##@LR__5134
05198     1A 2D 02 F6 | 	mov	local08, local12
0519c     12 13 02 F6 | 	mov	arg01, local04
051a0     16 15 02 F6 | 	mov	arg02, local08
051a4     7C A6 B1 FD | 	call	#__system___string_cmp
051a8     FD 2A 0A F6 | 	mov	local07, result1 wz
051ac     24 00 90 AD |  if_e	jmp	#LR__0420
051b0     79 01 00 FF 
051b4     37 37 06 F6 | 	mov	local13, ##@LR__5135
051b8     1B 35 02 F6 | 	mov	local12, local13
051bc     12 13 02 F6 | 	mov	arg01, local04
051c0     1A 15 02 F6 | 	mov	arg02, local12
051c4     5C A6 B1 FD | 	call	#__system___string_cmp
051c8     FD 2C 0A F6 | 	mov	local08, result1 wz
051cc     00 FA 05 56 |  if_ne	mov	result1, #0
051d0     0C 00 90 5D |  if_ne	jmp	#LR__0423
051d4                 | LR__0420
051d4     01 26 06 F1 | 	add	local05, #1
051d8     44 FE 9F FD | 	jmp	#LR__0414
051dc                 | LR__0421
051dc                 | LR__0422
051dc                 | ' return true
051dc     01 FA 65 F6 | 	neg	result1, #1
051e0                 | LR__0423
051e0     A7 F0 03 F6 | 	mov	ptra, fp
051e4     B2 00 A0 FD | 	call	#popregs_
051e8                 | _isname_ret
051e8     2D 00 64 FD | 	ret
051ec                 | 
051ec                 | ' 
051ec                 | ' function isnum(s as string) as boolean
051ec                 | _isnum
051ec     0D 4A 05 F6 | 	mov	COUNT_, #13
051f0     A8 00 A0 FD | 	call	#pushregs_
051f4     09 1F 02 F6 | 	mov	local01, arg01
051f8     00 20 06 F6 | 	mov	local02, #0
051fc     00 22 06 F6 | 	mov	local03, #0
05200     0F 13 02 F6 | 	mov	arg01, local01
05204     09 25 02 F6 | 	mov	local04, arg01
05208     97 06 48 FB | 	callpa	#(@LR__0431-@LR__0430)>>2,fcache_load_ptr_
0520c                 | LR__0430
0520c     12 FB C9 FA | 	rdbyte	result1, local04 wz
05210     01 24 06 51 |  if_ne	add	local04, #1
05214     F4 FF 9F 5D |  if_ne	jmp	#LR__0430
05218                 | LR__0431
05218     09 25 82 F1 | 	sub	local04, arg01
0521c     12 FB 01 F6 | 	mov	result1, local04
05220     FD 26 0A F6 | 	mov	local05, result1 wz
05224     00 FA 05 A6 |  if_e	mov	result1, #0
05228     8C 02 90 AD |  if_e	jmp	#LR__0442
0522c     0F 13 02 F6 | 	mov	arg01, local01
05230     01 14 06 F6 | 	mov	arg02, #1
05234     01 16 06 F6 | 	mov	arg03, #1
05238     E8 C6 B1 FD | 	call	#__system__Mid_S
0523c     FD 28 02 F6 | 	mov	local06, result1
05240                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
05240     79 01 00 FF 
05244     39 15 06 F6 | 	mov	arg02, ##@LR__5136
05248     14 13 02 F6 | 	mov	arg01, local06
0524c     D4 A5 B1 FD | 	call	#__system___string_cmp
05250     00 FA 55 F2 | 	cmps	result1, #0 wc
05254     18 00 90 CD |  if_b	jmp	#LR__0432
05258     79 01 00 FF 
0525c     3B 15 06 F6 | 	mov	arg02, ##@LR__5137
05260     14 13 02 F6 | 	mov	arg01, local06
05264     BC A5 B1 FD | 	call	#__system___string_cmp
05268     01 FA 55 F2 | 	cmps	result1, #1 wc
0526c     78 00 90 CD |  if_b	jmp	#LR__0433
05270                 | LR__0432
05270     79 01 00 FF 
05274     3D 15 06 F6 | 	mov	arg02, ##@LR__5138
05278     14 13 02 F6 | 	mov	arg01, local06
0527c     A4 A5 B1 FD | 	call	#__system___string_cmp
05280     00 FA 0D F2 | 	cmp	result1, #0 wz
05284     60 00 90 AD |  if_e	jmp	#LR__0433
05288     79 01 00 FF 
0528c     3F 2B 06 F6 | 	mov	local07, ##@LR__5139
05290     14 13 02 F6 | 	mov	arg01, local06
05294     15 15 02 F6 | 	mov	arg02, local07
05298     88 A5 B1 FD | 	call	#__system___string_cmp
0529c     00 FA 0D F2 | 	cmp	result1, #0 wz
052a0     44 00 90 AD |  if_e	jmp	#LR__0433
052a4     79 01 00 FF 
052a8     41 2D 06 F6 | 	mov	local08, ##@LR__5140
052ac     16 2B 02 F6 | 	mov	local07, local08
052b0     14 13 02 F6 | 	mov	arg01, local06
052b4     15 15 02 F6 | 	mov	arg02, local07
052b8     68 A5 B1 FD | 	call	#__system___string_cmp
052bc     00 FA 4D F2 | 	cmps	result1, #0 wz
052c0     24 00 90 AD |  if_e	jmp	#LR__0433
052c4     79 01 00 FF 
052c8     43 2F 06 F6 | 	mov	local09, ##@LR__5141
052cc     17 2D 02 F6 | 	mov	local08, local09
052d0     14 13 02 F6 | 	mov	arg01, local06
052d4     16 15 02 F6 | 	mov	arg02, local08
052d8     48 A5 B1 FD | 	call	#__system___string_cmp
052dc     FD 2A 0A F6 | 	mov	local07, result1 wz
052e0     00 FA 05 56 |  if_ne	mov	result1, #0
052e4     D0 01 90 5D |  if_ne	jmp	#LR__0442
052e8                 | LR__0433
052e8                 | ' if m$="." then ds=1
052e8     79 01 00 FF 
052ec     45 15 06 F6 | 	mov	arg02, ##@LR__5142
052f0     14 13 02 F6 | 	mov	arg01, local06
052f4     2C A5 B1 FD | 	call	#__system___string_cmp
052f8     00 FA 0D F2 | 	cmp	result1, #0 wz
052fc     01 20 06 A6 |  if_e	mov	local02, #1
05300                 | ' if l>1 then 
05300     02 26 56 F2 | 	cmps	local05, #2 wc
05304     AC 01 90 CD |  if_b	jmp	#LR__0441
05308                 | '   for i=2 to l
05308     02 30 06 F6 | 	mov	local10, #2
0530c     13 33 02 F6 | 	mov	local11, local05
05310     01 32 06 F1 | 	add	local11, #1
05314                 | LR__0434
05314     19 31 52 F2 | 	cmps	local10, local11 wc
05318     98 01 90 3D |  if_ae	jmp	#LR__0440
0531c     0F 13 02 F6 | 	mov	arg01, local01
05320     18 15 02 F6 | 	mov	arg02, local10
05324     01 16 06 F6 | 	mov	arg03, #1
05328     F8 C5 B1 FD | 	call	#__system__Mid_S
0532c     FD 28 02 F6 | 	mov	local06, result1
05330                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." andalso m$<>"E" andalso m$<>"e" andalso m$<>"-" then return false
05330     79 01 00 FF 
05334     47 15 06 F6 | 	mov	arg02, ##@LR__5143
05338     14 13 02 F6 | 	mov	arg01, local06
0533c     E4 A4 B1 FD | 	call	#__system___string_cmp
05340     00 FA 55 F2 | 	cmps	result1, #0 wc
05344     18 00 90 CD |  if_b	jmp	#LR__0435
05348     79 01 00 FF 
0534c     49 15 06 F6 | 	mov	arg02, ##@LR__5144
05350     14 13 02 F6 | 	mov	arg01, local06
05354     CC A4 B1 FD | 	call	#__system___string_cmp
05358     01 FA 55 F2 | 	cmps	result1, #1 wc
0535c     98 00 90 CD |  if_b	jmp	#LR__0436
05360                 | LR__0435
05360     79 01 00 FF 
05364     4B 15 06 F6 | 	mov	arg02, ##@LR__5145
05368     14 13 02 F6 | 	mov	arg01, local06
0536c     B4 A4 B1 FD | 	call	#__system___string_cmp
05370     00 FA 0D F2 | 	cmp	result1, #0 wz
05374     80 00 90 AD |  if_e	jmp	#LR__0436
05378     79 01 00 FF 
0537c     4D 2B 06 F6 | 	mov	local07, ##@LR__5146
05380     14 13 02 F6 | 	mov	arg01, local06
05384     15 15 02 F6 | 	mov	arg02, local07
05388     98 A4 B1 FD | 	call	#__system___string_cmp
0538c     00 FA 4D F2 | 	cmps	result1, #0 wz
05390     64 00 90 AD |  if_e	jmp	#LR__0436
05394     79 01 00 FF 
05398     4F 2D 06 F6 | 	mov	local08, ##@LR__5147
0539c     16 2B 02 F6 | 	mov	local07, local08
053a0     14 13 02 F6 | 	mov	arg01, local06
053a4     15 15 02 F6 | 	mov	arg02, local07
053a8     78 A4 B1 FD | 	call	#__system___string_cmp
053ac     FD 34 0A F6 | 	mov	local12, result1 wz
053b0     44 00 90 AD |  if_e	jmp	#LR__0436
053b4     79 01 00 FF 
053b8     51 2F 06 F6 | 	mov	local09, ##@LR__5148
053bc     17 2D 02 F6 | 	mov	local08, local09
053c0     14 13 02 F6 | 	mov	arg01, local06
053c4     16 15 02 F6 | 	mov	arg02, local08
053c8     58 A4 B1 FD | 	call	#__system___string_cmp
053cc     FD 2A 0A F6 | 	mov	local07, result1 wz
053d0     24 00 90 AD |  if_e	jmp	#LR__0436
053d4     79 01 00 FF 
053d8     53 37 06 F6 | 	mov	local13, ##@LR__5149
053dc     1B 2F 02 F6 | 	mov	local09, local13
053e0     14 13 02 F6 | 	mov	arg01, local06
053e4     17 15 02 F6 | 	mov	arg02, local09
053e8     38 A4 B1 FD | 	call	#__system___string_cmp
053ec     FD 2C 0A F6 | 	mov	local08, result1 wz
053f0     00 FA 05 56 |  if_ne	mov	result1, #0
053f4     C0 00 90 5D |  if_ne	jmp	#LR__0442
053f8                 | LR__0436
053f8                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
053f8     79 01 00 FF 
053fc     55 15 06 F6 | 	mov	arg02, ##@LR__5150
05400     14 13 02 F6 | 	mov	arg01, local06
05404     1C A4 B1 FD | 	call	#__system___string_cmp
05408     00 FA 0D F2 | 	cmp	result1, #0 wz
0540c     38 00 90 5D |  if_ne	jmp	#LR__0437
05410     18 15 02 F6 | 	mov	arg02, local10
05414     01 14 86 F1 | 	sub	arg02, #1
05418     0F 13 02 F6 | 	mov	arg01, local01
0541c     01 16 06 F6 | 	mov	arg03, #1
05420     00 C5 B1 FD | 	call	#__system__Mid_S
05424     FD 12 02 F6 | 	mov	arg01, result1
05428     F0 C6 B1 FD | 	call	#__system__LCase_S
0542c     FD 12 02 F6 | 	mov	arg01, result1
05430     79 01 00 FF 
05434     57 15 06 F6 | 	mov	arg02, ##@LR__5151
05438     E8 A3 B1 FD | 	call	#__system___string_cmp
0543c     00 FA 0D F2 | 	cmp	result1, #0 wz
05440     00 FA 05 56 |  if_ne	mov	result1, #0
05444     70 00 90 5D |  if_ne	jmp	#LR__0442
05448                 | LR__0437
05448                 | '     if m$="." then ds+=1: if ds>1 then return false
05448     79 01 00 FF 
0544c     59 15 06 F6 | 	mov	arg02, ##@LR__5152
05450     14 13 02 F6 | 	mov	arg01, local06
05454     CC A3 B1 FD | 	call	#__system___string_cmp
05458     00 FA 0D F2 | 	cmp	result1, #0 wz
0545c     01 20 06 A1 |  if_e	add	local02, #1
05460     02 20 56 A2 |  if_e	cmps	local02, #2 wc
05464     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
05468     4C 00 90 2D |  if_nc_and_z	jmp	#LR__0442
0546c                 | '     if m$="E" orelse m$="e" then es+=1: if es>1 then return false
0546c     79 01 00 FF 
05470     5B 15 06 F6 | 	mov	arg02, ##@LR__5153
05474     14 13 02 F6 | 	mov	arg01, local06
05478     A8 A3 B1 FD | 	call	#__system___string_cmp
0547c     00 FA 4D F2 | 	cmps	result1, #0 wz
05480     18 00 90 AD |  if_e	jmp	#LR__0438
05484     79 01 00 FF 
05488     5D 15 06 F6 | 	mov	arg02, ##@LR__5154
0548c     14 13 02 F6 | 	mov	arg01, local06
05490     90 A3 B1 FD | 	call	#__system___string_cmp
05494     00 FA 4D F2 | 	cmps	result1, #0 wz
05498     10 00 90 5D |  if_ne	jmp	#LR__0439
0549c                 | LR__0438
0549c     01 22 06 F1 | 	add	local03, #1
054a0     02 22 56 F2 | 	cmps	local03, #2 wc
054a4     00 FA 05 36 |  if_ae	mov	result1, #0
054a8     0C 00 90 3D |  if_ae	jmp	#LR__0442
054ac                 | LR__0439
054ac     01 30 06 F1 | 	add	local10, #1
054b0     60 FE 9F FD | 	jmp	#LR__0434
054b4                 | LR__0440
054b4                 | LR__0441
054b4                 | ' return true
054b4     01 FA 65 F6 | 	neg	result1, #1
054b8                 | LR__0442
054b8     A7 F0 03 F6 | 	mov	ptra, fp
054bc     B2 00 A0 FD | 	call	#popregs_
054c0                 | _isnum_ret
054c0     2D 00 64 FD | 	ret
054c4                 | 
054c4                 | '   
054c4                 | ' function isint(s as string) as boolean
054c4                 | _isint
054c4     05 4A 05 F6 | 	mov	COUNT_, #5
054c8     A8 00 A0 FD | 	call	#pushregs_
054cc     09 1F 02 F6 | 	mov	local01, arg01
054d0     09 21 02 F6 | 	mov	local02, arg01
054d4     97 06 48 FB | 	callpa	#(@LR__0451-@LR__0450)>>2,fcache_load_ptr_
054d8                 | LR__0450
054d8     10 FB C9 FA | 	rdbyte	result1, local02 wz
054dc     01 20 06 51 |  if_ne	add	local02, #1
054e0     F4 FF 9F 5D |  if_ne	jmp	#LR__0450
054e4                 | LR__0451
054e4     09 21 82 F1 | 	sub	local02, arg01
054e8     10 FB 01 F6 | 	mov	result1, local02
054ec     FD 20 0A F6 | 	mov	local02, result1 wz
054f0     00 FA 05 A6 |  if_e	mov	result1, #0
054f4     18 01 90 AD |  if_e	jmp	#LR__0459
054f8     0F 13 02 F6 | 	mov	arg01, local01
054fc     01 14 06 F6 | 	mov	arg02, #1
05500     01 16 06 F6 | 	mov	arg03, #1
05504     1C C4 B1 FD | 	call	#__system__Mid_S
05508     FD 22 02 F6 | 	mov	local03, result1
0550c                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
0550c     79 01 00 FF 
05510     5F 15 06 F6 | 	mov	arg02, ##@LR__5155
05514     11 13 02 F6 | 	mov	arg01, local03
05518     08 A3 B1 FD | 	call	#__system___string_cmp
0551c     00 FA 55 F2 | 	cmps	result1, #0 wc
05520     18 00 90 CD |  if_b	jmp	#LR__0452
05524     79 01 00 FF 
05528     61 15 06 F6 | 	mov	arg02, ##@LR__5156
0552c     11 13 02 F6 | 	mov	arg01, local03
05530     F0 A2 B1 FD | 	call	#__system___string_cmp
05534     01 FA 55 F2 | 	cmps	result1, #1 wc
05538     4C 00 90 CD |  if_b	jmp	#LR__0453
0553c                 | LR__0452
0553c     79 01 00 FF 
05540     63 15 06 F6 | 	mov	arg02, ##@LR__5157
05544     11 13 02 F6 | 	mov	arg01, local03
05548     D8 A2 B1 FD | 	call	#__system___string_cmp
0554c     00 FA 0D F2 | 	cmp	result1, #0 wz
05550     34 00 90 AD |  if_e	jmp	#LR__0453
05554     79 01 00 FF 
05558     65 15 06 F6 | 	mov	arg02, ##@LR__5158
0555c     11 13 02 F6 | 	mov	arg01, local03
05560     C0 A2 B1 FD | 	call	#__system___string_cmp
05564     00 FA 0D F2 | 	cmp	result1, #0 wz
05568     1C 00 90 AD |  if_e	jmp	#LR__0453
0556c     79 01 00 FF 
05570     67 15 06 F6 | 	mov	arg02, ##@LR__5159
05574     11 13 02 F6 | 	mov	arg01, local03
05578     A8 A2 B1 FD | 	call	#__system___string_cmp
0557c     00 FA 0D F2 | 	cmp	result1, #0 wz
05580     00 FA 05 56 |  if_ne	mov	result1, #0
05584     88 00 90 5D |  if_ne	jmp	#LR__0459
05588                 | LR__0453
05588                 | ' 
05588                 | ' if l>1 then 
05588     02 20 56 F2 | 	cmps	local02, #2 wc
0558c     7C 00 90 CD |  if_b	jmp	#LR__0458
05590                 | '   for i=2 to l
05590     02 24 06 F6 | 	mov	local04, #2
05594     10 27 02 F6 | 	mov	local05, local02
05598     01 26 06 F1 | 	add	local05, #1
0559c                 | LR__0454
0559c     13 25 52 F2 | 	cmps	local04, local05 wc
055a0     68 00 90 3D |  if_ae	jmp	#LR__0457
055a4     0F 13 02 F6 | 	mov	arg01, local01
055a8     12 15 02 F6 | 	mov	arg02, local04
055ac     01 16 06 F6 | 	mov	arg03, #1
055b0     70 C3 B1 FD | 	call	#__system__Mid_S
055b4     FD 22 02 F6 | 	mov	local03, result1
055b8                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
055b8     79 01 00 FF 
055bc     69 15 06 F6 | 	mov	arg02, ##@LR__5160
055c0     11 13 02 F6 | 	mov	arg01, local03
055c4     5C A2 B1 FD | 	call	#__system___string_cmp
055c8     00 FA 55 F2 | 	cmps	result1, #0 wc
055cc     18 00 90 CD |  if_b	jmp	#LR__0455
055d0     79 01 00 FF 
055d4     6B 15 06 F6 | 	mov	arg02, ##@LR__5161
055d8     11 13 02 F6 | 	mov	arg01, local03
055dc     44 A2 B1 FD | 	call	#__system___string_cmp
055e0     01 FA 55 F2 | 	cmps	result1, #1 wc
055e4     1C 00 90 CD |  if_b	jmp	#LR__0456
055e8                 | LR__0455
055e8     79 01 00 FF 
055ec     6D 15 06 F6 | 	mov	arg02, ##@LR__5162
055f0     11 13 02 F6 | 	mov	arg01, local03
055f4     2C A2 B1 FD | 	call	#__system___string_cmp
055f8     00 FA 0D F2 | 	cmp	result1, #0 wz
055fc     00 FA 05 56 |  if_ne	mov	result1, #0
05600     0C 00 90 5D |  if_ne	jmp	#LR__0459
05604                 | LR__0456
05604     01 24 06 F1 | 	add	local04, #1
05608     90 FF 9F FD | 	jmp	#LR__0454
0560c                 | LR__0457
0560c                 | LR__0458
0560c                 | ' return true
0560c     01 FA 65 F6 | 	neg	result1, #1
05610                 | LR__0459
05610     A7 F0 03 F6 | 	mov	ptra, fp
05614     B2 00 A0 FD | 	call	#popregs_
05618                 | _isint_ret
05618     2D 00 64 FD | 	ret
0561c                 | 
0561c                 | ' 
0561c                 | ' function isdec(s as string) as boolean
0561c                 | _isdec
0561c     05 4A 05 F6 | 	mov	COUNT_, #5
05620     A8 00 A0 FD | 	call	#pushregs_
05624     09 1F 02 F6 | 	mov	local01, arg01
05628     09 21 02 F6 | 	mov	local02, arg01
0562c     97 06 48 FB | 	callpa	#(@LR__0461-@LR__0460)>>2,fcache_load_ptr_
05630                 | LR__0460
05630     10 FB C9 FA | 	rdbyte	result1, local02 wz
05634     01 20 06 51 |  if_ne	add	local02, #1
05638     F4 FF 9F 5D |  if_ne	jmp	#LR__0460
0563c                 | LR__0461
0563c     09 21 82 F1 | 	sub	local02, arg01
05640     10 FB 01 F6 | 	mov	result1, local02
05644     FD 20 0A F6 | 	mov	local02, result1 wz
05648     00 FA 05 A6 |  if_e	mov	result1, #0
0564c     80 00 90 AD |  if_e	jmp	#LR__0466
05650                 | ' for i=1 to l
05650     01 22 06 F6 | 	mov	local03, #1
05654     10 25 02 F6 | 	mov	local04, local02
05658     01 24 06 F1 | 	add	local04, #1
0565c                 | LR__0462
0565c     12 23 52 F2 | 	cmps	local03, local04 wc
05660     68 00 90 3D |  if_ae	jmp	#LR__0465
05664     0F 13 02 F6 | 	mov	arg01, local01
05668     11 15 02 F6 | 	mov	arg02, local03
0566c     01 16 06 F6 | 	mov	arg03, #1
05670     B0 C2 B1 FD | 	call	#__system__Mid_S
05674     FD 26 02 F6 | 	mov	local05, result1
05678                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
05678     79 01 00 FF 
0567c     6F 15 06 F6 | 	mov	arg02, ##@LR__5163
05680     13 13 02 F6 | 	mov	arg01, local05
05684     9C A1 B1 FD | 	call	#__system___string_cmp
05688     00 FA 55 F2 | 	cmps	result1, #0 wc
0568c     18 00 90 CD |  if_b	jmp	#LR__0463
05690     79 01 00 FF 
05694     71 15 06 F6 | 	mov	arg02, ##@LR__5164
05698     13 13 02 F6 | 	mov	arg01, local05
0569c     84 A1 B1 FD | 	call	#__system___string_cmp
056a0     01 FA 55 F2 | 	cmps	result1, #1 wc
056a4     1C 00 90 CD |  if_b	jmp	#LR__0464
056a8                 | LR__0463
056a8     79 01 00 FF 
056ac     73 15 06 F6 | 	mov	arg02, ##@LR__5165
056b0     13 13 02 F6 | 	mov	arg01, local05
056b4     6C A1 B1 FD | 	call	#__system___string_cmp
056b8     00 FA 0D F2 | 	cmp	result1, #0 wz
056bc     00 FA 05 56 |  if_ne	mov	result1, #0
056c0     0C 00 90 5D |  if_ne	jmp	#LR__0466
056c4                 | LR__0464
056c4     01 22 06 F1 | 	add	local03, #1
056c8     90 FF 9F FD | 	jmp	#LR__0462
056cc                 | LR__0465
056cc                 | ' return true
056cc     01 FA 65 F6 | 	neg	result1, #1
056d0                 | LR__0466
056d0     A7 F0 03 F6 | 	mov	ptra, fp
056d4     B2 00 A0 FD | 	call	#popregs_
056d8                 | _isdec_ret
056d8     2D 00 64 FD | 	ret
056dc                 | 
056dc                 | ' 
056dc                 | ' function isstring(s as string) as boolean
056dc                 | _isstring
056dc     01 4A 05 F6 | 	mov	COUNT_, #1
056e0     A8 00 A0 FD | 	call	#pushregs_
056e4                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
056e4     09 1F 02 F6 | 	mov	local01, arg01
056e8     01 14 06 F6 | 	mov	arg02, #1
056ec     1C C1 B1 FD | 	call	#__system__Left_S
056f0     FD 12 02 F6 | 	mov	arg01, result1
056f4     79 01 00 FF 
056f8     75 15 06 F6 | 	mov	arg02, ##@LR__5166
056fc     24 A1 B1 FD | 	call	#__system___string_cmp
05700     00 FA 4D F2 | 	cmps	result1, #0 wz
05704     28 00 90 5D |  if_ne	jmp	#LR__0470
05708     0F 13 02 F6 | 	mov	arg01, local01
0570c     01 14 06 F6 | 	mov	arg02, #1
05710     80 C1 B1 FD | 	call	#__system__Right_S
05714     FD 12 02 F6 | 	mov	arg01, result1
05718     79 01 00 FF 
0571c     77 15 06 F6 | 	mov	arg02, ##@LR__5167
05720     00 A1 B1 FD | 	call	#__system___string_cmp
05724     00 FA 4D F2 | 	cmps	result1, #0 wz
05728     01 FA 65 A6 |  if_e	neg	result1, #1
0572c     04 00 90 AD |  if_e	jmp	#LR__0471
05730                 | LR__0470
05730     00 FA 05 F6 | 	mov	result1, #0
05734                 | LR__0471
05734     A7 F0 03 F6 | 	mov	ptra, fp
05738     B2 00 A0 FD | 	call	#popregs_
0573c                 | _isstring_ret
0573c     2D 00 64 FD | 	ret
05740                 | 
05740                 | ' 
05740                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
05740                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
05740                 | ' 
05740                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
05740                 | ' '----------------------Reverse Polish notation precompiler -----------------------------------------------------------------------------
05740                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
05740                 | ' 
05740                 | ' '----- delete a line from a program
05740                 | ' 
05740                 | ' function deleteline(aline as ulong) as integer
05740                 | _deleteline
05740     03 4A 05 F6 | 	mov	COUNT_, #3
05744     A8 00 A0 FD | 	call	#pushregs_
05748     2C F0 07 F1 | 	add	ptra, #44
0574c     04 4E 05 F1 | 	add	fp, #4
05750     A7 12 62 FC | 	wrlong	arg01, fp
05754     4A 00 00 FF 
05758     B4 E4 05 F1 | 	add	objptr, ##38068
0575c     F2 1E 02 FB | 	rdlong	local01, objptr
05760     0C 4E 05 F1 | 	add	fp, #12
05764     A7 1E 62 FC | 	wrlong	local01, fp
05768     10 4E 85 F1 | 	sub	fp, #16
0576c                 | ' 
0576c                 | ' 
0576c                 | ' searchptr=programstart
0576c                 | ' 
0576c                 | ' do
0576c     3E 00 00 FF 
05770     E8 E5 85 F1 | 	sub	objptr, ##32232
05774                 | LR__0480
05774     14 4E 05 F1 | 	add	fp, #20
05778     A7 12 02 F6 | 	mov	arg01, fp
0577c     04 4E 85 F1 | 	sub	fp, #4
05780     A7 14 02 FB | 	rdlong	arg02, fp
05784     10 4E 85 F1 | 	sub	fp, #16
05788     18 16 06 F6 | 	mov	arg03, #24
0578c     2C 94 B1 FD | 	call	#_psram_spin2_read1
05790     10 4E 05 F1 | 	add	fp, #16
05794     A7 1E 02 FB | 	rdlong	local01, fp
05798     08 4E 85 F1 | 	sub	fp, #8
0579c     A7 1E 62 FC | 	wrlong	local01, fp
057a0     20 4E 05 F1 | 	add	fp, #32
057a4     A7 1E 02 FB | 	rdlong	local01, fp
057a8     18 4E 85 F1 | 	sub	fp, #24
057ac     A7 1E 62 FC | 	wrlong	local01, fp
057b0     04 4E 05 F1 | 	add	fp, #4
057b4     A7 1E 02 FB | 	rdlong	local01, fp
057b8     10 4E 85 F1 | 	sub	fp, #16
057bc     A7 16 02 FB | 	rdlong	arg03, fp
057c0     04 4E 85 F1 | 	sub	fp, #4
057c4     0B 1F 12 F2 | 	cmp	local01, arg03 wc
057c8     28 4E 05 C1 |  if_b	add	fp, #40
057cc     A7 20 02 CB |  if_b	rdlong	local02, fp
057d0     28 4E 85 C1 |  if_b	sub	fp, #40
057d4     FF FF 3F CF 
057d8     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
057dc     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0480
057e0     0B 00 00 FF 
057e4     CC E4 85 F1 | 	sub	objptr, ##5836
057e8                 | ' 
057e8                 | ' 
057e8                 | ' if header(0)<>aline then return -1
057e8     14 4E 05 F1 | 	add	fp, #20
057ec     A7 1E 02 FB | 	rdlong	local01, fp
057f0     10 4E 85 F1 | 	sub	fp, #16
057f4     A7 22 02 FB | 	rdlong	local03, fp
057f8     04 4E 85 F1 | 	sub	fp, #4
057fc     11 1F 0A F2 | 	cmp	local01, local03 wz
05800     01 FA 65 56 |  if_ne	neg	result1, #1
05804     D8 02 90 5D |  if_ne	jmp	#LR__0486
05808     08 4E 05 F1 | 	add	fp, #8
0580c     A7 12 02 FB | 	rdlong	arg01, fp
05810     08 4E 85 F1 | 	sub	fp, #8
05814     01 14 66 F6 | 	neg	arg02, #1
05818     9C 5C B1 FD | 	call	#_pslpoke
0581c                 | ' 
0581c                 | ' pslpoke(lineptr2,$FFFF_FFFF) ' flag the deleted line
0581c                 | ' 
0581c                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  ' this is one and only line in the program
0581c     28 4E 05 F1 | 	add	fp, #40
05820     A7 1E 02 FB | 	rdlong	local01, fp
05824     28 4E 85 F1 | 	sub	fp, #40
05828     FF FF 3F FF 
0582c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
05830     24 4E 05 A1 |  if_e	add	fp, #36
05834     A7 22 02 AB |  if_e	rdlong	local03, fp
05838     24 4E 85 A1 |  if_e	sub	fp, #36
0583c     FF FF 7F AF 
05840     FF 23 0E A2 |  if_e	cmp	local03, ##-1 wz
05844     88 00 90 5D |  if_ne	jmp	#LR__0481
05848     4A 00 00 FF 
0584c     B4 E4 05 F1 | 	add	objptr, ##38068
05850     00 04 80 FF 
05854     F2 00 68 FC | 	wrlong	##524288, objptr
05858     07 00 00 FF 
0585c     28 E4 85 F1 | 	sub	objptr, ##3624
05860     00 04 80 FF 
05864     F2 00 68 FC | 	wrlong	##524288, objptr
05868     07 00 00 FF 
0586c     2C E4 05 F1 | 	add	objptr, ##3628
05870     F2 00 68 FC | 	wrlong	#0, objptr
05874     04 E4 05 F1 | 	add	objptr, #4
05878     FF FF FF FF 
0587c     F2 FE 6B FC | 	wrlong	##-1, objptr
05880     4A 00 00 FF 
05884     BC E4 85 F1 | 	sub	objptr, ##38076
05888     00 12 06 F6 | 	mov	arg01, #0
0588c     01 14 66 F6 | 	neg	arg02, #1
05890     24 5C B1 FD | 	call	#_pslpoke
05894     10 12 06 F6 | 	mov	arg01, #16
05898     01 14 66 F6 | 	neg	arg02, #1
0589c     18 5C B1 FD | 	call	#_pslpoke
058a0     14 12 06 F6 | 	mov	arg01, #20
058a4     1E 14 CE F9 | 	bmask	arg02, #30
058a8     0C 5C B1 FD | 	call	#_pslpoke
058ac     58 00 00 FF 
058b0     EC E4 05 F1 | 	add	objptr, ##45292
058b4     00 04 80 FF 
058b8     F2 00 68 FC | 	wrlong	##524288, objptr
058bc     04 E4 05 F1 | 	add	objptr, #4
058c0     00 04 80 FF 
058c4     F2 00 68 FC | 	wrlong	##524288, objptr
058c8     58 00 00 FF 
058cc     F0 E4 85 F1 | 	sub	objptr, ##45296
058d0                 | LR__0481
058d0                 | ' 
058d0                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' this is the last, and not first, line of the program
058d0     28 4E 05 F1 | 	add	fp, #40
058d4     A7 1E 02 FB | 	rdlong	local01, fp
058d8     28 4E 85 F1 | 	sub	fp, #40
058dc     FF FF 3F FF 
058e0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
058e4     74 00 90 5D |  if_ne	jmp	#LR__0482
058e8     24 4E 05 F1 | 	add	fp, #36
058ec     A7 22 02 FB | 	rdlong	local03, fp
058f0     24 4E 85 F1 | 	sub	fp, #36
058f4     FF FF 7F FF 
058f8     FF 23 0E F2 | 	cmp	local03, ##-1 wz
058fc     5C 00 90 AD |  if_e	jmp	#LR__0482
05900     24 4E 05 F1 | 	add	fp, #36
05904     A7 12 02 FB | 	rdlong	arg01, fp
05908     24 4E 85 F1 | 	sub	fp, #36
0590c     14 12 06 F1 | 	add	arg01, #20
05910     1E 14 CE F9 | 	bmask	arg02, #30
05914     A0 5B B1 FD | 	call	#_pslpoke
05918     24 4E 05 F1 | 	add	fp, #36
0591c     A7 1E 02 FB | 	rdlong	local01, fp
05920     4A 00 00 FF 
05924     BC E4 05 F1 | 	add	objptr, ##38076
05928     F2 1E 62 FC | 	wrlong	local01, objptr
0592c     4A 00 00 FF 
05930     BC E4 85 F1 | 	sub	objptr, ##38076
05934     A7 12 02 FB | 	rdlong	arg01, fp
05938     24 4E 85 F1 | 	sub	fp, #36
0593c     A8 5C B1 FD | 	call	#_pslpeek
05940     4A 00 00 FF 
05944     B8 E4 05 F1 | 	add	objptr, ##38072
05948     F2 FA 61 FC | 	wrlong	result1, objptr
0594c     4A 00 00 FF 
05950     B8 E4 85 F1 | 	sub	objptr, ##38072
05954                 | '   pslpoke(header(4)+20,$7FFF_FFFF) ' unlink the previous line
05954                 | '   lastlineptr=header(4)            ' keep last line pointer to avoid searching while sequentially adding a new line
05954                 | '   lastline=pslpeek(header(4))
05954                 | '   return 0
05954     00 FA 05 F6 | 	mov	result1, #0
05958     84 01 90 FD | 	jmp	#LR__0486
0595c                 | LR__0482
0595c                 | ' 
0595c                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is the first line, but not the last
0595c     28 4E 05 F1 | 	add	fp, #40
05960     A7 1E 02 FB | 	rdlong	local01, fp
05964     28 4E 85 F1 | 	sub	fp, #40
05968     FF FF 3F FF 
0596c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
05970     58 00 90 AD |  if_e	jmp	#LR__0483
05974     24 4E 05 F1 | 	add	fp, #36
05978     A7 22 02 FB | 	rdlong	local03, fp
0597c     24 4E 85 F1 | 	sub	fp, #36
05980     FF FF 7F FF 
05984     FF 23 0E F2 | 	cmp	local03, ##-1 wz
05988     40 00 90 5D |  if_ne	jmp	#LR__0483
0598c     28 4E 05 F1 | 	add	fp, #40
05990     A7 12 02 FB | 	rdlong	arg01, fp
05994     28 4E 85 F1 | 	sub	fp, #40
05998     10 12 06 F1 | 	add	arg01, #16
0599c     01 14 66 F6 | 	neg	arg02, #1
059a0     14 5B B1 FD | 	call	#_pslpoke
059a4     28 4E 05 F1 | 	add	fp, #40
059a8     A7 1E 02 FB | 	rdlong	local01, fp
059ac     28 4E 85 F1 | 	sub	fp, #40
059b0     4A 00 00 FF 
059b4     B4 E4 05 F1 | 	add	objptr, ##38068
059b8     F2 1E 62 FC | 	wrlong	local01, objptr
059bc     4A 00 00 FF 
059c0     B4 E4 85 F1 | 	sub	objptr, ##38068
059c4                 | ' '   print "deleted first line"
059c4                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
059c4                 | '   programstart=header(5) ' adjust the program start to point on the first new line
059c4                 | '   return 0
059c4     00 FA 05 F6 | 	mov	result1, #0
059c8     14 01 90 FD | 	jmp	#LR__0486
059cc                 | LR__0483
059cc                 | ' 
059cc                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' the line is not first and not last
059cc     28 4E 05 F1 | 	add	fp, #40
059d0     A7 1E 02 FB | 	rdlong	local01, fp
059d4     28 4E 85 F1 | 	sub	fp, #40
059d8     FF FF 3F FF 
059dc     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
059e0     24 4E 05 51 |  if_ne	add	fp, #36
059e4     A7 22 02 5B |  if_ne	rdlong	local03, fp
059e8     24 4E 85 51 |  if_ne	sub	fp, #36
059ec     FF FF 7F 5F 
059f0     FF 23 0E 52 |  if_ne	cmp	local03, ##-1 wz
059f4     40 00 90 AD |  if_e	jmp	#LR__0484
059f8     28 4E 05 F1 | 	add	fp, #40
059fc     A7 12 02 FB | 	rdlong	arg01, fp
05a00     10 12 06 F1 | 	add	arg01, #16
05a04     04 4E 85 F1 | 	sub	fp, #4
05a08     A7 14 02 FB | 	rdlong	arg02, fp
05a0c     24 4E 85 F1 | 	sub	fp, #36
05a10     A4 5A B1 FD | 	call	#_pslpoke
05a14     24 4E 05 F1 | 	add	fp, #36
05a18     A7 12 02 FB | 	rdlong	arg01, fp
05a1c     14 12 06 F1 | 	add	arg01, #20
05a20     04 4E 05 F1 | 	add	fp, #4
05a24     A7 14 02 FB | 	rdlong	arg02, fp
05a28     28 4E 85 F1 | 	sub	fp, #40
05a2c     88 5A B1 FD | 	call	#_pslpoke
05a30                 | '    pslpoke(header(5)+16,header(4))  
05a30                 | '    pslpoke(header(4)+20, header(5))
05a30                 | '    return 0
05a30     00 FA 05 F6 | 	mov	result1, #0
05a34     A8 00 90 FD | 	jmp	#LR__0486
05a38                 | LR__0484
05a38     10 4E 05 F1 | 	add	fp, #16
05a3c     A7 1E 02 FB | 	rdlong	local01, fp
05a40     08 4E 85 F1 | 	sub	fp, #8
05a44     A7 1E 62 FC | 	wrlong	local01, fp
05a48     4A 00 00 FF 
05a4c     B4 E4 05 F1 | 	add	objptr, ##38068
05a50     F2 1E 02 FB | 	rdlong	local01, objptr
05a54     08 4E 05 F1 | 	add	fp, #8
05a58     A7 1E 62 FC | 	wrlong	local01, fp
05a5c     10 4E 85 F1 | 	sub	fp, #16
05a60                 | ' 
05a60                 | ' 
05a60                 | ' 
05a60                 | ' ' now find if the deleted line was a target for goto and replace fast_goto with find_goto
05a60                 | ' 
05a60                 | ' lineptr2=searchptr
05a60                 | ' searchptr=programstart
05a60                 | ' 
05a60                 | ' do
05a60     3E 00 00 FF 
05a64     E8 E5 85 F1 | 	sub	objptr, ##32232
05a68                 | LR__0485
05a68     14 4E 05 F1 | 	add	fp, #20
05a6c     A7 12 02 F6 | 	mov	arg01, fp
05a70     04 4E 85 F1 | 	sub	fp, #4
05a74     A7 14 02 FB | 	rdlong	arg02, fp
05a78     10 4E 85 F1 | 	sub	fp, #16
05a7c     18 16 06 F6 | 	mov	arg03, #24
05a80     38 91 B1 FD | 	call	#_psram_spin2_read1
05a84     10 4E 05 F1 | 	add	fp, #16
05a88     A7 1E 02 FB | 	rdlong	local01, fp
05a8c     08 4E 85 F1 | 	sub	fp, #8
05a90     A7 1E 62 FC | 	wrlong	local01, fp
05a94     20 4E 05 F1 | 	add	fp, #32
05a98     A7 1E 02 FB | 	rdlong	local01, fp
05a9c     18 4E 85 F1 | 	sub	fp, #24
05aa0     A7 1E 62 FC | 	wrlong	local01, fp
05aa4     04 4E 05 F1 | 	add	fp, #4
05aa8     A7 1E 02 FB | 	rdlong	local01, fp
05aac     10 4E 85 F1 | 	sub	fp, #16
05ab0     A7 22 02 FB | 	rdlong	local03, fp
05ab4     04 4E 85 F1 | 	sub	fp, #4
05ab8     11 1F 12 F2 | 	cmp	local01, local03 wc
05abc     28 4E 05 C1 |  if_b	add	fp, #40
05ac0     A7 20 02 CB |  if_b	rdlong	local02, fp
05ac4     28 4E 85 C1 |  if_b	sub	fp, #40
05ac8     FF FF 3F CF 
05acc     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
05ad0     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0485
05ad4     0B 00 00 FF 
05ad8     CC E4 85 F1 | 	sub	objptr, ##5836
05adc     00 FA 05 F6 | 	mov	result1, #0
05ae0                 | LR__0486
05ae0     A7 F0 03 F6 | 	mov	ptra, fp
05ae4     B2 00 A0 FD | 	call	#popregs_
05ae8                 | _deleteline_ret
05ae8     2D 00 64 FD | 	ret
05aec                 | 
05aec                 | ' 
05aec                 | ' sub save_line
05aec                 | _save_line
05aec     03 4A 05 F6 | 	mov	COUNT_, #3
05af0     A8 00 A0 FD | 	call	#pushregs_
05af4     4A 00 00 FF 
05af8     AC E4 05 F1 | 	add	objptr, ##38060
05afc     F2 16 02 FB | 	rdlong	arg03, objptr
05b00     01 16 06 F1 | 	add	arg03, #1
05b04     05 00 00 FF 
05b08     18 E4 85 F1 | 	sub	objptr, ##2584
05b0c     F2 14 02 FB | 	rdlong	arg02, objptr
05b10     0B 15 02 FD | 	qmul	arg02, arg03
05b14     0E 00 00 FF 
05b18     44 E4 85 F1 | 	sub	objptr, ##7236
05b1c     F2 12 02 FB | 	rdlong	arg01, objptr
05b20     37 00 00 FF 
05b24     50 E4 85 F1 | 	sub	objptr, ##28240
05b28     09 1F 02 F6 | 	mov	local01, arg01
05b2c     18 20 62 FD | 	getqx	local02
05b30     97 06 48 FB | 	callpa	#(@LR__0491-@LR__0490)>>2,fcache_load_ptr_
05b34                 | LR__0490
05b34     0F FB C9 FA | 	rdbyte	result1, local01 wz
05b38     01 1E 06 51 |  if_ne	add	local01, #1
05b3c     F4 FF 9F 5D |  if_ne	jmp	#LR__0490
05b40                 | LR__0491
05b40     09 1F 82 F1 | 	sub	local01, arg01
05b44     03 1E CE F7 | 	test	local01, #3 wz
05b48     02 1E 46 50 |  if_ne	shr	local01, #2
05b4c     01 1E 06 51 |  if_ne	add	local01, #1
05b50     02 1E 66 50 |  if_ne	shl	local01, #2
05b54     10 23 02 F6 | 	mov	local03, local02
05b58     0F 23 02 F1 | 	add	local03, local01
05b5c     43 00 00 FF 
05b60     8C E4 05 F1 | 	add	objptr, ##34444
05b64     F2 16 02 FB | 	rdlong	arg03, objptr
05b68     10 17 02 F1 | 	add	arg03, local02
05b6c     04 00 00 FF 
05b70     28 E4 05 F1 | 	add	objptr, ##2088
05b74     F2 16 62 FC | 	wrlong	arg03, objptr
05b78     04 E4 05 F1 | 	add	objptr, #4
05b7c     F2 1E 62 FC | 	wrlong	local01, objptr
05b80     0C E4 85 F1 | 	sub	objptr, #12
05b84     F2 12 02 F6 | 	mov	arg01, objptr
05b88     04 00 00 FF 
05b8c     20 E4 85 F1 | 	sub	objptr, ##2080
05b90     F2 14 02 FB | 	rdlong	arg02, objptr
05b94     10 17 02 F6 | 	mov	arg03, local02
05b98     37 00 00 FF 
05b9c     C0 E5 85 F1 | 	sub	objptr, ##28608
05ba0     B4 90 B1 FD | 	call	#_psram_spin2_write
05ba4     2B 00 00 FF 
05ba8     84 E5 05 F1 | 	add	objptr, ##22404
05bac     F2 12 02 FB | 	rdlong	arg01, objptr
05bb0     0C 00 00 FF 
05bb4     3C E4 05 F1 | 	add	objptr, ##6204
05bb8     F2 14 02 FB | 	rdlong	arg02, objptr
05bbc     10 15 02 F1 | 	add	arg02, local02
05bc0     0F 17 02 F6 | 	mov	arg03, local01
05bc4     37 00 00 FF 
05bc8     C0 E5 85 F1 | 	sub	objptr, ##28608
05bcc     88 90 B1 FD | 	call	#_psram_spin2_write
05bd0     37 00 00 FF 
05bd4     C0 E5 05 F1 | 	add	objptr, ##28608
05bd8     F2 1E 02 FB | 	rdlong	local01, objptr
05bdc     11 1F 02 F1 | 	add	local01, local03
05be0     F2 1E 62 FC | 	wrlong	local01, objptr
05be4     43 00 00 FF 
05be8     8C E4 85 F1 | 	sub	objptr, ##34444
05bec     A7 F0 03 F6 | 	mov	ptra, fp
05bf0     B2 00 A0 FD | 	call	#popregs_
05bf4                 | _save_line_ret
05bf4     2D 00 64 FD | 	ret
05bf8                 | 
05bf8                 | ' 
05bf8                 | ' 
05bf8                 | ' function insertline(aline as ulong) as integer
05bf8                 | _insertline
05bf8     02 4A 05 F6 | 	mov	COUNT_, #2
05bfc     A8 00 A0 FD | 	call	#pushregs_
05c00     28 F0 07 F1 | 	add	ptra, #40
05c04     04 4E 05 F1 | 	add	fp, #4
05c08     A7 12 62 FC | 	wrlong	arg01, fp
05c0c     4A 00 00 FF 
05c10     B4 E4 05 F1 | 	add	objptr, ##38068
05c14     F2 1E 02 FB | 	rdlong	local01, objptr
05c18     04 4E 05 F1 | 	add	fp, #4
05c1c     A7 1E 62 FC | 	wrlong	local01, fp
05c20     08 4E 85 F1 | 	sub	fp, #8
05c24                 | ' 
05c24                 | ' do
05c24     3E 00 00 FF 
05c28     E8 E5 85 F1 | 	sub	objptr, ##32232
05c2c                 | LR__0500
05c2c     10 4E 05 F1 | 	add	fp, #16
05c30     A7 12 02 F6 | 	mov	arg01, fp
05c34     08 4E 85 F1 | 	sub	fp, #8
05c38     A7 14 02 FB | 	rdlong	arg02, fp
05c3c     08 4E 85 F1 | 	sub	fp, #8
05c40     18 16 06 F6 | 	mov	arg03, #24
05c44     74 8F B1 FD | 	call	#_psram_spin2_read1
05c48     08 4E 05 F1 | 	add	fp, #8
05c4c     A7 1E 02 FB | 	rdlong	local01, fp
05c50     04 4E 05 F1 | 	add	fp, #4
05c54     A7 1E 62 FC | 	wrlong	local01, fp
05c58     18 4E 05 F1 | 	add	fp, #24
05c5c     A7 1E 02 FB | 	rdlong	local01, fp
05c60     1C 4E 85 F1 | 	sub	fp, #28
05c64     A7 1E 62 FC | 	wrlong	local01, fp
05c68     08 4E 05 F1 | 	add	fp, #8
05c6c     A7 1E 02 FB | 	rdlong	local01, fp
05c70     0C 4E 85 F1 | 	sub	fp, #12
05c74     A7 16 02 FB | 	rdlong	arg03, fp
05c78     04 4E 85 F1 | 	sub	fp, #4
05c7c     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05c80     24 4E 05 C1 |  if_b	add	fp, #36
05c84     A7 20 02 CB |  if_b	rdlong	local02, fp
05c88     24 4E 85 C1 |  if_b	sub	fp, #36
05c8c     FF FF 3F CF 
05c90     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
05c94     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0500
05c98     0B 00 00 FF 
05c9c     CC E4 85 F1 | 	sub	objptr, ##5836
05ca0                 | ' 
05ca0                 | ' if header(0)=aline then return -1 ' delete it first
05ca0     10 4E 05 F1 | 	add	fp, #16
05ca4     A7 1E 02 FB | 	rdlong	local01, fp
05ca8     0C 4E 85 F1 | 	sub	fp, #12
05cac     A7 20 02 FB | 	rdlong	local02, fp
05cb0     04 4E 85 F1 | 	sub	fp, #4
05cb4     10 1F 0A F2 | 	cmp	local01, local02 wz
05cb8     01 FA 65 A6 |  if_e	neg	result1, #1
05cbc     48 01 90 AD |  if_e	jmp	#LR__0503
05cc0                 | ' if header(0)<aline then return -2 ' end of program reached
05cc0     10 4E 05 F1 | 	add	fp, #16
05cc4     A7 1E 02 FB | 	rdlong	local01, fp
05cc8     0C 4E 85 F1 | 	sub	fp, #12
05ccc     A7 16 02 FB | 	rdlong	arg03, fp
05cd0     04 4E 85 F1 | 	sub	fp, #4
05cd4     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05cd8     02 FA 65 C6 |  if_b	neg	result1, #2
05cdc     28 01 90 CD |  if_b	jmp	#LR__0503
05ce0                 | ' 
05ce0                 | ' if  header(4)=$FFFF_FFFF then ' this is one first line in the program so the inserted line will be new first
05ce0     20 4E 05 F1 | 	add	fp, #32
05ce4     A7 1E 02 FB | 	rdlong	local01, fp
05ce8     20 4E 85 F1 | 	sub	fp, #32
05cec     FF FF 7F FF 
05cf0     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
05cf4     78 00 90 5D |  if_ne	jmp	#LR__0501
05cf8     43 00 00 FF 
05cfc     8C E4 05 F1 | 	add	objptr, ##34444
05d00     F2 1E 02 FB | 	rdlong	local01, objptr
05d04     07 00 00 FF 
05d08     28 E4 05 F1 | 	add	objptr, ##3624
05d0c     F2 1E 62 FC | 	wrlong	local01, objptr
05d10     0C 4E 05 F1 | 	add	fp, #12
05d14     A7 12 02 FB | 	rdlong	arg01, fp
05d18     0C 4E 85 F1 | 	sub	fp, #12
05d1c     10 12 06 F1 | 	add	arg01, #16
05d20     07 00 00 FF 
05d24     28 E4 85 F1 | 	sub	objptr, ##3624
05d28     F2 14 02 FB | 	rdlong	arg02, objptr
05d2c     43 00 00 FF 
05d30     8C E4 85 F1 | 	sub	objptr, ##34444
05d34     80 57 B1 FD | 	call	#_pslpoke
05d38     47 00 00 FF 
05d3c     BC E4 05 F1 | 	add	objptr, ##36540
05d40     FF FF FF FF 
05d44     F2 FE 6B FC | 	wrlong	##-1, objptr
05d48     0C 4E 05 F1 | 	add	fp, #12
05d4c     A7 1E 02 FB | 	rdlong	local01, fp
05d50     0C 4E 85 F1 | 	sub	fp, #12
05d54     04 E4 05 F1 | 	add	objptr, #4
05d58     F2 1E 62 FC | 	wrlong	local01, objptr
05d5c     47 00 00 FF 
05d60     C0 E4 85 F1 | 	sub	objptr, ##36544
05d64     84 FD BF FD | 	call	#_save_line
05d68                 | '   programstart=programptr
05d68                 | '   pslpoke(lineptr2+16,programptr)
05d68                 | '   ucompiledline(4)=$FFFF_FFFF
05d68                 | '   ucompiledline(5)=lineptr2
05d68                 | '   save_line
05d68                 | '   return 0
05d68     00 FA 05 F6 | 	mov	result1, #0
05d6c     98 00 90 FD | 	jmp	#LR__0503
05d70                 | LR__0501
05d70                 | ' 
05d70                 | ' if header(4)<>$FFFF_FFFF then ' this is not first line of the program. It doesn't matter if it is last as we will insert it before
05d70     20 4E 05 F1 | 	add	fp, #32
05d74     A7 1E 02 FB | 	rdlong	local01, fp
05d78     20 4E 85 F1 | 	sub	fp, #32
05d7c     FF FF 7F FF 
05d80     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
05d84     7C 00 90 AD |  if_e	jmp	#LR__0502
05d88     20 4E 05 F1 | 	add	fp, #32
05d8c     A7 1E 02 FB | 	rdlong	local01, fp
05d90     47 00 00 FF 
05d94     BC E4 05 F1 | 	add	objptr, ##36540
05d98     F2 1E 62 FC | 	wrlong	local01, objptr
05d9c     14 4E 85 F1 | 	sub	fp, #20
05da0     A7 1E 02 FB | 	rdlong	local01, fp
05da4     04 E4 05 F1 | 	add	objptr, #4
05da8     F2 1E 62 FC | 	wrlong	local01, objptr
05dac     A7 12 02 FB | 	rdlong	arg01, fp
05db0     0C 4E 85 F1 | 	sub	fp, #12
05db4     10 12 06 F1 | 	add	arg01, #16
05db8     04 00 00 FF 
05dbc     34 E4 85 F1 | 	sub	objptr, ##2100
05dc0     F2 14 02 FB | 	rdlong	arg02, objptr
05dc4     43 00 00 FF 
05dc8     8C E4 85 F1 | 	sub	objptr, ##34444
05dcc     E8 56 B1 FD | 	call	#_pslpoke
05dd0     20 4E 05 F1 | 	add	fp, #32
05dd4     A7 12 02 FB | 	rdlong	arg01, fp
05dd8     20 4E 85 F1 | 	sub	fp, #32
05ddc     14 12 06 F1 | 	add	arg01, #20
05de0     43 00 00 FF 
05de4     8C E4 05 F1 | 	add	objptr, ##34444
05de8     F2 14 02 FB | 	rdlong	arg02, objptr
05dec     43 00 00 FF 
05df0     8C E4 85 F1 | 	sub	objptr, ##34444
05df4     C0 56 B1 FD | 	call	#_pslpoke
05df8     F0 FC BF FD | 	call	#_save_line
05dfc                 | '   ucompiledline(4)=header(4)
05dfc                 | '   ucompiledline(5)=lineptr2
05dfc                 | '   pslpoke(lineptr2+16,programptr)
05dfc                 | '   pslpoke(header(4)+20,programptr)
05dfc                 | '   save_line
05dfc                 | '   return 0
05dfc     00 FA 05 F6 | 	mov	result1, #0
05e00     04 00 90 FD | 	jmp	#LR__0503
05e04                 | LR__0502
05e04     00 FA 05 F6 | 	mov	result1, #0
05e08                 | LR__0503
05e08     A7 F0 03 F6 | 	mov	ptra, fp
05e0c     B2 00 A0 FD | 	call	#popregs_
05e10                 | _insertline_ret
05e10     2D 00 64 FD | 	ret
05e14                 | 
05e14                 | ' 
05e14                 | ' sub add_line_at_end(aline) 
05e14                 | _add_line_at_end
05e14     4A 00 00 FF 
05e18     B8 E4 05 F1 | 	add	objptr, ##38072
05e1c     F2 12 62 FC | 	wrlong	arg01, objptr
05e20     04 E4 05 F1 | 	add	objptr, #4
05e24     F2 14 02 FB | 	rdlong	arg02, objptr
05e28     03 00 00 FF 
05e2c     00 E4 85 F1 | 	sub	objptr, ##1536
05e30     F2 14 62 FC | 	wrlong	arg02, objptr
05e34     03 00 00 FF 
05e38     00 E4 05 F1 | 	add	objptr, ##1536
05e3c     F2 12 02 FB | 	rdlong	arg01, objptr
05e40     14 12 06 F1 | 	add	arg01, #20
05e44     07 00 00 FF 
05e48     30 E4 85 F1 | 	sub	objptr, ##3632
05e4c     F2 14 02 FB | 	rdlong	arg02, objptr
05e50     43 00 00 FF 
05e54     8C E4 85 F1 | 	sub	objptr, ##34444
05e58     5C 56 B1 FD | 	call	#_pslpoke
05e5c     43 00 00 FF 
05e60     8C E4 05 F1 | 	add	objptr, ##34444
05e64     F2 14 02 FB | 	rdlong	arg02, objptr
05e68     07 00 00 FF 
05e6c     30 E4 05 F1 | 	add	objptr, ##3632
05e70     F2 14 62 FC | 	wrlong	arg02, objptr
05e74     02 00 00 FF 
05e78     FC E5 85 F1 | 	sub	objptr, ##1532
05e7c     FF FF BF FF 
05e80     F2 FE 6B FC | 	wrlong	##2147483647, objptr
05e84                 | ' 
05e84                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
05e84                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
05e84     04 00 00 FF 
05e88     34 E4 85 F1 | 	sub	objptr, ##2100
05e8c     F2 14 02 FB | 	rdlong	arg02, objptr
05e90     43 00 00 FF 
05e94     8C E4 85 F1 | 	sub	objptr, ##34444
05e98     00 04 00 FF 
05e9c     00 14 0E F2 | 	cmp	arg02, ##524288 wz
05ea0     47 00 00 AF 
05ea4     BC E4 05 A1 |  if_e	add	objptr, ##36540
05ea8     FF FF FF AF 
05eac     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
05eb0     47 00 00 AF 
05eb4     BC E4 85 A1 |  if_e	sub	objptr, ##36540
05eb8     30 FC BF FD | 	call	#_save_line
05ebc     43 00 00 FF 
05ec0     8C E4 05 F1 | 	add	objptr, ##34444
05ec4     F2 12 02 FB | 	rdlong	arg01, objptr
05ec8     43 00 00 FF 
05ecc     8C E4 85 F1 | 	sub	objptr, ##34444
05ed0     01 14 66 F6 | 	neg	arg02, #1
05ed4     E0 55 B1 FD | 	call	#_pslpoke
05ed8                 | _add_line_at_end_ret
05ed8     2D 00 64 FD | 	ret
05edc                 | 
05edc                 | ' 
05edc                 | ' function compile_immediate(linetype as ulong) as integer
05edc                 | _compile_immediate
05edc     09 4A 05 F6 | 	mov	COUNT_, #9
05ee0     A8 00 A0 FD | 	call	#pushregs_
05ee4                 | _compile_immediate_enter
05ee4     09 25 0A F6 | 	mov	local04, arg01 wz
05ee8     00 26 06 F6 | 	mov	local05, #0
05eec     00 28 06 F6 | 	mov	local06, #0
05ef0                 | ' 
05ef0                 | ' ' linetype=cont+1, linetype=0 immediate
05ef0                 | ' '  : 1: this is the first part of the line that will continue
05ef0                 | ' ' 2 - this is the continuation of the line
05ef0                 | ' ' 3 - this is the last continued line
05ef0                 | ' ' 4 - this is the one and only part
05ef0                 | ' 
05ef0                 | ' err=0
05ef0                 | ' cmd=0
05ef0                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
05ef0     30 00 90 5D |  if_ne	jmp	#LR__0510
05ef4     35 00 00 FF 
05ef8     40 E4 05 F1 | 	add	objptr, ##27200
05efc     F2 28 02 FB | 	rdlong	local06, objptr
05f00     02 00 00 FF 
05f04     34 E4 05 F1 | 	add	objptr, ##1076
05f08     F2 02 68 FC | 	wrlong	#1, objptr
05f0c     00 2A 06 F6 | 	mov	local07, #0
05f10     13 00 00 FF 
05f14     38 E4 05 F1 | 	add	objptr, ##9784
05f18     F2 00 68 FC | 	wrlong	#0, objptr
05f1c     4A 00 00 FF 
05f20     AC E4 85 F1 | 	sub	objptr, ##38060
05f24                 | LR__0510
05f24                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
05f24     02 24 0E F2 | 	cmp	local04, #2 wz
05f28     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05f2c     24 00 90 5D |  if_ne	jmp	#LR__0511
05f30     35 00 00 FF 
05f34     40 E4 05 F1 | 	add	objptr, ##27200
05f38     F2 28 02 FB | 	rdlong	local06, objptr
05f3c     01 2A 06 F6 | 	mov	local07, #1
05f40     02 00 00 FF 
05f44     34 E4 05 F1 | 	add	objptr, ##1076
05f48     F2 02 68 FC | 	wrlong	#1, objptr
05f4c     37 00 00 FF 
05f50     74 E4 85 F1 | 	sub	objptr, ##28276
05f54                 | LR__0511
05f54                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
05f54     04 24 0E F2 | 	cmp	local04, #4 wz
05f58     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
05f5c     30 00 90 5D |  if_ne	jmp	#LR__0512
05f60     35 00 00 FF 
05f64     48 E4 05 F1 | 	add	objptr, ##27208
05f68     F2 28 02 FB | 	rdlong	local06, objptr
05f6c     02 2A 06 F6 | 	mov	local07, #2
05f70     02 00 00 FF 
05f74     2C E4 05 F1 | 	add	objptr, ##1068
05f78     F2 04 68 FC | 	wrlong	#2, objptr
05f7c     13 00 00 FF 
05f80     38 E4 05 F1 | 	add	objptr, ##9784
05f84     F2 04 68 FC | 	wrlong	#2, objptr
05f88     4A 00 00 FF 
05f8c     AC E4 85 F1 | 	sub	objptr, ##38060
05f90                 | LR__0512
05f90                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
05f90     05 24 0E F2 | 	cmp	local04, #5 wz
05f94     44 00 90 5D |  if_ne	jmp	#LR__0513
05f98     37 00 00 FF 
05f9c     74 E4 05 F1 | 	add	objptr, ##28276
05fa0     F2 FA 01 FB | 	rdlong	result1, objptr
05fa4     FD 2A 02 F6 | 	mov	local07, result1
05fa8     03 2A 66 F0 | 	shl	local07, #3
05fac     02 00 00 FF 
05fb0     38 E4 85 F1 | 	sub	objptr, ##1080
05fb4     F2 2A 02 F1 | 	add	local07, objptr
05fb8     04 2A 06 F1 | 	add	local07, #4
05fbc     15 29 02 FB | 	rdlong	local06, local07
05fc0     FD 2A 02 F6 | 	mov	local07, result1
05fc4     01 2A 06 F1 | 	add	local07, #1
05fc8     02 00 00 FF 
05fcc     38 E4 05 F1 | 	add	objptr, ##1080
05fd0     F2 2A 62 FC | 	wrlong	local07, objptr
05fd4     37 00 00 FF 
05fd8     74 E4 85 F1 | 	sub	objptr, ##28276
05fdc                 | LR__0513
05fdc     00 2C 06 F6 | 	mov	local08, #0
05fe0                 | ' vars=0
05fe0                 | ' 'print  "In compile_immediate cmd=:", cmd
05fe0                 | ' 451 select case cmd
05fe0     5C 28 0E F2 | 	cmp	local06, #92 wz
05fe4     50 02 90 AD |  if_e	jmp	#LR__0514
05fe8     47 28 0E F2 | 	cmp	local06, #71 wz
05fec     54 02 90 AD |  if_e	jmp	#LR__0515
05ff0     59 28 0E F2 | 	cmp	local06, #89 wz
05ff4     58 02 90 AD |  if_e	jmp	#LR__0516
05ff8     45 28 0E F2 | 	cmp	local06, #69 wz
05ffc     5C 02 90 AD |  if_e	jmp	#LR__0517
06000     69 28 0E F2 | 	cmp	local06, #105 wz
06004     60 02 90 AD |  if_e	jmp	#LR__0518
06008     40 28 0E F2 | 	cmp	local06, #64 wz
0600c     1C 05 90 AD |  if_e	jmp	#LR__0580
06010     49 28 0E F2 | 	cmp	local06, #73 wz
06014     5C 02 90 AD |  if_e	jmp	#LR__0519
06018     50 28 0E F2 | 	cmp	local06, #80 wz
0601c     60 02 90 AD |  if_e	jmp	#LR__0520
06020     AE 28 0E F2 | 	cmp	local06, #174 wz
06024     64 02 90 AD |  if_e	jmp	#LR__0521
06028     B0 28 0E F2 | 	cmp	local06, #176 wz
0602c     68 02 90 AD |  if_e	jmp	#LR__0522
06030     AF 28 0E F2 | 	cmp	local06, #175 wz
06034     6C 02 90 AD |  if_e	jmp	#LR__0523
06038     B1 28 0E F2 | 	cmp	local06, #177 wz
0603c     70 02 90 AD |  if_e	jmp	#LR__0524
06040     68 28 0E F2 | 	cmp	local06, #104 wz
06044     74 02 90 AD |  if_e	jmp	#LR__0525
06048     74 28 0E F2 | 	cmp	local06, #116 wz
0604c     78 02 90 AD |  if_e	jmp	#LR__0526
06050     73 28 0E F2 | 	cmp	local06, #115 wz
06054     7C 02 90 AD |  if_e	jmp	#LR__0527
06058     6C 28 0E F2 | 	cmp	local06, #108 wz
0605c     80 02 90 AD |  if_e	jmp	#LR__0528
06060     89 28 0E F2 | 	cmp	local06, #137 wz
06064     C4 04 90 AD |  if_e	jmp	#LR__0580
06068     72 28 0E F2 | 	cmp	local06, #114 wz
0606c     7C 02 90 AD |  if_e	jmp	#LR__0529
06070     5D 28 0E F2 | 	cmp	local06, #93 wz
06074     B4 04 90 AD |  if_e	jmp	#LR__0580
06078     96 28 0E F2 | 	cmp	local06, #150 wz
0607c     74 02 90 AD |  if_e	jmp	#LR__0530
06080     43 28 0E F2 | 	cmp	local06, #67 wz
06084     74 02 90 AD |  if_e	jmp	#LR__0531
06088     5A 28 0E F2 | 	cmp	local06, #90 wz
0608c     78 02 90 AD |  if_e	jmp	#LR__0532
06090     AB 28 0E F2 | 	cmp	local06, #171 wz
06094     94 04 90 AD |  if_e	jmp	#LR__0580
06098     4E 28 0E F2 | 	cmp	local06, #78 wz
0609c     70 02 90 AD |  if_e	jmp	#LR__0533
060a0     A9 28 0E F2 | 	cmp	local06, #169 wz
060a4     84 02 90 AD |  if_e	jmp	#LR__0535
060a8     46 28 0E F2 | 	cmp	local06, #70 wz
060ac     84 02 90 AD |  if_e	jmp	#LR__0536
060b0     71 28 0E F2 | 	cmp	local06, #113 wz
060b4     88 02 90 AD |  if_e	jmp	#LR__0537
060b8     60 28 0E F2 | 	cmp	local06, #96 wz
060bc     8C 02 90 AD |  if_e	jmp	#LR__0538
060c0     4A 28 0E F2 | 	cmp	local06, #74 wz
060c4     90 02 90 AD |  if_e	jmp	#LR__0539
060c8     48 28 0E F2 | 	cmp	local06, #72 wz
060cc     90 02 90 AD |  if_e	jmp	#LR__0540
060d0     58 28 0E F2 | 	cmp	local06, #88 wz
060d4     94 02 90 AD |  if_e	jmp	#LR__0541
060d8     5F 28 0E F2 | 	cmp	local06, #95 wz
060dc     94 02 90 AD |  if_e	jmp	#LR__0542
060e0     8A 28 0E F2 | 	cmp	local06, #138 wz
060e4     98 02 90 AD |  if_e	jmp	#LR__0543
060e8     4C 28 0E F2 | 	cmp	local06, #76 wz
060ec     9C 02 90 AD |  if_e	jmp	#LR__0544
060f0     52 28 0E F2 | 	cmp	local06, #82 wz
060f4     A0 02 90 AD |  if_e	jmp	#LR__0545
060f8     97 28 0E F2 | 	cmp	local06, #151 wz
060fc     A4 02 90 AD |  if_e	jmp	#LR__0546
06100     61 28 0E F2 | 	cmp	local06, #97 wz
06104     A8 02 90 AD |  if_e	jmp	#LR__0547
06108     63 28 0E F2 | 	cmp	local06, #99 wz
0610c     AC 02 90 AD |  if_e	jmp	#LR__0548
06110     41 28 0E F2 | 	cmp	local06, #65 wz
06114     14 04 90 AD |  if_e	jmp	#LR__0580
06118     4B 28 0E F2 | 	cmp	local06, #75 wz
0611c     A8 02 90 AD |  if_e	jmp	#LR__0549
06120     5E 28 0E F2 | 	cmp	local06, #94 wz
06124     A8 02 90 AD |  if_e	jmp	#LR__0550
06128     7C 28 0E F2 | 	cmp	local06, #124 wz
0612c     AC 02 90 AD |  if_e	jmp	#LR__0551
06130     7D 28 0E F2 | 	cmp	local06, #125 wz
06134     B0 02 90 AD |  if_e	jmp	#LR__0552
06138     7E 28 0E F2 | 	cmp	local06, #126 wz
0613c     B4 02 90 AD |  if_e	jmp	#LR__0553
06140     7F 28 0E F2 | 	cmp	local06, #127 wz
06144     B8 02 90 AD |  if_e	jmp	#LR__0554
06148     80 28 0E F2 | 	cmp	local06, #128 wz
0614c     BC 02 90 AD |  if_e	jmp	#LR__0555
06150     55 28 0E F2 | 	cmp	local06, #85 wz
06154     C0 02 90 AD |  if_e	jmp	#LR__0556
06158     75 28 0E F2 | 	cmp	local06, #117 wz
0615c     C4 02 90 AD |  if_e	jmp	#LR__0557
06160     42 28 0E F2 | 	cmp	local06, #66 wz
06164     C8 02 90 AD |  if_e	jmp	#LR__0558
06168     95 28 0E F2 | 	cmp	local06, #149 wz
0616c     CC 02 90 AD |  if_e	jmp	#LR__0559
06170     AC 28 0E F2 | 	cmp	local06, #172 wz
06174     B4 03 90 AD |  if_e	jmp	#LR__0580
06178     81 28 0E F2 | 	cmp	local06, #129 wz
0617c     C8 02 90 AD |  if_e	jmp	#LR__0560
06180     44 28 0E F2 | 	cmp	local06, #68 wz
06184     CC 02 90 AD |  if_e	jmp	#LR__0561
06188     88 28 0E F2 | 	cmp	local06, #136 wz
0618c     9C 03 90 AD |  if_e	jmp	#LR__0580
06190     92 28 0E F2 | 	cmp	local06, #146 wz
06194     C8 02 90 AD |  if_e	jmp	#LR__0562
06198     AA 28 0E F2 | 	cmp	local06, #170 wz
0619c     8C 03 90 AD |  if_e	jmp	#LR__0580
061a0     4D 28 0E F2 | 	cmp	local06, #77 wz
061a4     C0 02 90 AD |  if_e	jmp	#LR__0563
061a8     51 28 0E F2 | 	cmp	local06, #81 wz
061ac     C4 02 90 AD |  if_e	jmp	#LR__0564
061b0     8E 28 0E F2 | 	cmp	local06, #142 wz
061b4     C8 02 90 AD |  if_e	jmp	#LR__0565
061b8     90 28 0E F2 | 	cmp	local06, #144 wz
061bc     CC 02 90 AD |  if_e	jmp	#LR__0566
061c0     8D 28 0E F2 | 	cmp	local06, #141 wz
061c4     D0 02 90 AD |  if_e	jmp	#LR__0567
061c8     8C 28 0E F2 | 	cmp	local06, #140 wz
061cc     D4 02 90 AD |  if_e	jmp	#LR__0568
061d0     91 28 0E F2 | 	cmp	local06, #145 wz
061d4     D8 02 90 AD |  if_e	jmp	#LR__0569
061d8     8B 28 0E F2 | 	cmp	local06, #139 wz
061dc     DC 02 90 AD |  if_e	jmp	#LR__0570
061e0     8F 28 0E F2 | 	cmp	local06, #143 wz
061e4     E0 02 90 AD |  if_e	jmp	#LR__0571
061e8     B2 28 0E F2 | 	cmp	local06, #178 wz
061ec     E4 02 90 AD |  if_e	jmp	#LR__0572
061f0     6D 28 0E F2 | 	cmp	local06, #109 wz
061f4     E8 02 90 AD |  if_e	jmp	#LR__0573
061f8     70 28 0E F2 | 	cmp	local06, #112 wz
061fc     2C 03 90 AD |  if_e	jmp	#LR__0580
06200     56 28 0E F2 | 	cmp	local06, #86 wz
06204     E4 02 90 AD |  if_e	jmp	#LR__0574
06208     57 28 0E F2 | 	cmp	local06, #87 wz
0620c     1C 03 90 AD |  if_e	jmp	#LR__0580
06210     79 28 0E F2 | 	cmp	local06, #121 wz
06214     E0 02 90 AD |  if_e	jmp	#LR__0575
06218     77 28 0E F2 | 	cmp	local06, #119 wz
0621c     E4 02 90 AD |  if_e	jmp	#LR__0576
06220     78 28 0E F2 | 	cmp	local06, #120 wz
06224     E8 02 90 AD |  if_e	jmp	#LR__0577
06228     01 00 00 FF 
0622c     04 28 0E F2 | 	cmp	local06, ##516 wz
06230     E8 02 90 AD |  if_e	jmp	#LR__0578
06234     EC 02 90 FD | 	jmp	#LR__0579
06238                 | LR__0514
06238     F0 0C B0 FD | 	call	#_compile_fun_2p
0623c     FD 26 02 F6 | 	mov	local05, result1
06240     E8 02 90 FD | 	jmp	#LR__0580
06244                 | LR__0515
06244     24 0E B0 FD | 	call	#_compile_fun_4p
06248     FD 26 02 F6 | 	mov	local05, result1
0624c     DC 02 90 FD | 	jmp	#LR__0580
06250                 | LR__0516
06250     A8 32 B0 FD | 	call	#_expr
06254                 | ' expr()
06254                 | ' return 0
06254     00 26 06 F6 | 	mov	local05, #0
06258     D0 02 90 FD | 	jmp	#LR__0580
0625c                 | LR__0517
0625c     40 0D B0 FD | 	call	#_compile_fun_3p
06260     FD 26 02 F6 | 	mov	local05, result1
06264     C4 02 90 FD | 	jmp	#LR__0580
06268                 | LR__0518
06268     90 32 B0 FD | 	call	#_expr
0626c                 | ' expr()
0626c                 | ' return 0
0626c     00 26 06 F6 | 	mov	local05, #0
06270     B8 02 90 FD | 	jmp	#LR__0580
06274                 | LR__0519
06274     84 32 B0 FD | 	call	#_expr
06278                 | ' expr()
06278                 | ' return 0
06278     00 26 06 F6 | 	mov	local05, #0
0627c     AC 02 90 FD | 	jmp	#LR__0580
06280                 | LR__0520
06280     88 10 B0 FD | 	call	#_compile_fun_varp
06284     FD 2C 02 F6 | 	mov	local08, result1
06288     A0 02 90 FD | 	jmp	#LR__0580
0628c                 | LR__0521
0628c     7C 10 B0 FD | 	call	#_compile_fun_varp
06290     FD 2C 02 F6 | 	mov	local08, result1
06294     94 02 90 FD | 	jmp	#LR__0580
06298                 | LR__0522
06298     70 10 B0 FD | 	call	#_compile_fun_varp
0629c     FD 2C 02 F6 | 	mov	local08, result1
062a0     88 02 90 FD | 	jmp	#LR__0580
062a4                 | LR__0523
062a4     64 10 B0 FD | 	call	#_compile_fun_varp
062a8     FD 2C 02 F6 | 	mov	local08, result1
062ac     7C 02 90 FD | 	jmp	#LR__0580
062b0                 | LR__0524
062b0     58 10 B0 FD | 	call	#_compile_fun_varp
062b4     FD 2C 02 F6 | 	mov	local08, result1
062b8     70 02 90 FD | 	jmp	#LR__0580
062bc                 | LR__0525
062bc     3C 32 B0 FD | 	call	#_expr
062c0                 | ' expr()
062c0                 | ' return 0
062c0     00 26 06 F6 | 	mov	local05, #0
062c4     64 02 90 FD | 	jmp	#LR__0580
062c8                 | LR__0526
062c8     40 10 B0 FD | 	call	#_compile_fun_varp
062cc     FD 2C 02 F6 | 	mov	local08, result1
062d0     58 02 90 FD | 	jmp	#LR__0580
062d4                 | LR__0527
062d4     34 10 B0 FD | 	call	#_compile_fun_varp
062d8     FD 2C 02 F6 | 	mov	local08, result1
062dc     4C 02 90 FD | 	jmp	#LR__0580
062e0                 | LR__0528
062e0     AC 0E B0 FD | 	call	#_compile_fun_5p
062e4     FD 26 02 F6 | 	mov	local05, result1
062e8     40 02 90 FD | 	jmp	#LR__0580
062ec                 | LR__0529
062ec     08 1A B0 FD | 	call	#_compile_dim
062f0     F4 02 90 FD | 	jmp	#LR__0581
062f4                 | LR__0530
062f4     34 0C B0 FD | 	call	#_compile_fun_2p
062f8     30 02 90 FD | 	jmp	#LR__0580
062fc                 | LR__0531
062fc     2C 0C B0 FD | 	call	#_compile_fun_2p
06300     FD 26 02 F6 | 	mov	local05, result1
06304     24 02 90 FD | 	jmp	#LR__0580
06308                 | LR__0532
06308     C4 18 B0 FD | 	call	#_compile_else
0630c     D8 02 90 FD | 	jmp	#LR__0581
06310                 | LR__0533
06310     01 24 16 F2 | 	cmp	local04, #1 wc
06314     08 00 90 CD |  if_b	jmp	#LR__0534
06318     F0 2D B0 FD | 	call	#_compile_goto
0631c     C8 02 90 FD | 	jmp	#LR__0581
06320                 | LR__0534
06320     19 12 06 F6 | 	mov	arg01, #25
06324     2C 50 B1 FD | 	call	#_printerror
06328     BC 02 90 FD | 	jmp	#LR__0581
0632c                 | LR__0535
0632c     74 2D B0 FD | 	call	#_compile_gosub
06330     B4 02 90 FD | 	jmp	#LR__0581
06334                 | LR__0536
06334     68 0C B0 FD | 	call	#_compile_fun_3p
06338     FD 26 02 F6 | 	mov	local05, result1
0633c     EC 01 90 FD | 	jmp	#LR__0580
06340                 | LR__0537
06340     28 0D B0 FD | 	call	#_compile_fun_4p
06344     FD 26 02 F6 | 	mov	local05, result1
06348     E0 01 90 FD | 	jmp	#LR__0580
0634c                 | LR__0538
0634c     AC 31 B0 FD | 	call	#_expr
06350                 | ' expr()
06350                 | ' return 0
06350     00 26 06 F6 | 	mov	local05, #0
06354     D4 01 90 FD | 	jmp	#LR__0580
06358                 | LR__0539
06358     AC 20 B0 FD | 	call	#_compile_for
0635c     88 02 90 FD | 	jmp	#LR__0581
06360                 | LR__0540
06360     08 0D B0 FD | 	call	#_compile_fun_4p
06364     FD 26 02 F6 | 	mov	local05, result1
06368     C0 01 90 FD | 	jmp	#LR__0580
0636c                 | LR__0541
0636c     20 17 B0 FD | 	call	#_compile_if
06370     74 02 90 FD | 	jmp	#LR__0581
06374                 | LR__0542
06374     84 31 B0 FD | 	call	#_expr
06378                 | ' expr()
06378                 | ' return 0
06378     00 26 06 F6 | 	mov	local05, #0
0637c     AC 01 90 FD | 	jmp	#LR__0580
06380                 | LR__0543
06380     78 31 B0 FD | 	call	#_expr
06384                 | ' expr()
06384                 | ' return 0
06384     00 26 06 F6 | 	mov	local05, #0
06388     A0 01 90 FD | 	jmp	#LR__0580
0638c                 | LR__0544
0638c     7C 0F B0 FD | 	call	#_compile_fun_varp
06390     FD 2C 02 F6 | 	mov	local08, result1
06394     94 01 90 FD | 	jmp	#LR__0580
06398                 | LR__0545
06398     70 0F B0 FD | 	call	#_compile_fun_varp
0639c     FD 2C 02 F6 | 	mov	local08, result1
063a0     88 01 90 FD | 	jmp	#LR__0580
063a4                 | LR__0546
063a4     84 0B B0 FD | 	call	#_compile_fun_2p
063a8     FD 26 02 F6 | 	mov	local05, result1
063ac     7C 01 90 FD | 	jmp	#LR__0580
063b0                 | LR__0547
063b0     48 31 B0 FD | 	call	#_expr
063b4                 | ' expr()
063b4                 | ' return 0
063b4     00 26 06 F6 | 	mov	local05, #0
063b8     70 01 90 FD | 	jmp	#LR__0580
063bc                 | LR__0548
063bc     3C 31 B0 FD | 	call	#_expr
063c0                 | ' expr()
063c0                 | ' return 0
063c0     00 26 06 F6 | 	mov	local05, #0
063c4     64 01 90 FD | 	jmp	#LR__0580
063c8                 | LR__0549
063c8     28 2B B0 FD | 	call	#_compile_next
063cc     18 02 90 FD | 	jmp	#LR__0581
063d0                 | LR__0550
063d0     28 31 B0 FD | 	call	#_expr
063d4                 | ' expr()
063d4                 | ' return 0
063d4     00 26 06 F6 | 	mov	local05, #0
063d8     50 01 90 FD | 	jmp	#LR__0580
063dc                 | LR__0551
063dc     1C 31 B0 FD | 	call	#_expr
063e0                 | ' expr()
063e0                 | ' return 0
063e0     00 26 06 F6 | 	mov	local05, #0
063e4     44 01 90 FD | 	jmp	#LR__0580
063e8                 | LR__0552
063e8     10 31 B0 FD | 	call	#_expr
063ec                 | ' expr()
063ec                 | ' return 0
063ec     00 26 06 F6 | 	mov	local05, #0
063f0     38 01 90 FD | 	jmp	#LR__0580
063f4                 | LR__0553
063f4     04 31 B0 FD | 	call	#_expr
063f8                 | ' expr()
063f8                 | ' return 0
063f8     00 26 06 F6 | 	mov	local05, #0
063fc     2C 01 90 FD | 	jmp	#LR__0580
06400                 | LR__0554
06400     68 0C B0 FD | 	call	#_compile_fun_4p
06404     FD 26 02 F6 | 	mov	local05, result1
06408     20 01 90 FD | 	jmp	#LR__0580
0640c                 | LR__0555
0640c     EC 30 B0 FD | 	call	#_expr
06410                 | ' expr()
06410                 | ' return 0
06410     00 26 06 F6 | 	mov	local05, #0
06414     14 01 90 FD | 	jmp	#LR__0580
06418                 | LR__0556
06418     10 0B B0 FD | 	call	#_compile_fun_2p
0641c     FD 26 02 F6 | 	mov	local05, result1
06420     08 01 90 FD | 	jmp	#LR__0580
06424                 | LR__0557
06424     E4 0E B0 FD | 	call	#_compile_fun_varp
06428     FD 2C 02 F6 | 	mov	local08, result1
0642c     FC 00 90 FD | 	jmp	#LR__0580
06430                 | LR__0558
06430     F8 0A B0 FD | 	call	#_compile_fun_2p
06434     FD 26 02 F6 | 	mov	local05, result1
06438     F0 00 90 FD | 	jmp	#LR__0580
0643c                 | LR__0559
0643c     EC 0A B0 FD | 	call	#_compile_fun_2p
06440     FD 26 02 F6 | 	mov	local05, result1
06444     E4 00 90 FD | 	jmp	#LR__0580
06448                 | LR__0560
06448     E0 0A B0 FD | 	call	#_compile_fun_2p
0644c     FD 26 02 F6 | 	mov	local05, result1
06450     D8 00 90 FD | 	jmp	#LR__0580
06454                 | LR__0561
06454     60 0F B0 FD | 	call	#_compile_print
06458     FD 26 02 F6 | 	mov	local05, result1
0645c     88 01 90 FD | 	jmp	#LR__0581
06460                 | LR__0562
06460     98 30 B0 FD | 	call	#_expr
06464                 | ' expr()
06464                 | ' return 0
06464     C4 00 90 FD | 	jmp	#LR__0580
06468                 | LR__0563
06468     A0 0E B0 FD | 	call	#_compile_fun_varp
0646c     FD 2C 02 F6 | 	mov	local08, result1
06470     B8 00 90 FD | 	jmp	#LR__0580
06474                 | LR__0564
06474     94 0E B0 FD | 	call	#_compile_fun_varp
06478     FD 2C 02 F6 | 	mov	local08, result1
0647c     AC 00 90 FD | 	jmp	#LR__0580
06480                 | LR__0565
06480     A8 0A B0 FD | 	call	#_compile_fun_2p
06484     FD 26 02 F6 | 	mov	local05, result1
06488     A0 00 90 FD | 	jmp	#LR__0580
0648c                 | LR__0566
0648c     9C 0A B0 FD | 	call	#_compile_fun_2p
06490     FD 26 02 F6 | 	mov	local05, result1
06494     94 00 90 FD | 	jmp	#LR__0580
06498                 | LR__0567
06498     90 0A B0 FD | 	call	#_compile_fun_2p
0649c     FD 26 02 F6 | 	mov	local05, result1
064a0     88 00 90 FD | 	jmp	#LR__0580
064a4                 | LR__0568
064a4     84 0A B0 FD | 	call	#_compile_fun_2p
064a8     FD 26 02 F6 | 	mov	local05, result1
064ac     7C 00 90 FD | 	jmp	#LR__0580
064b0                 | LR__0569
064b0     78 0A B0 FD | 	call	#_compile_fun_2p
064b4     FD 26 02 F6 | 	mov	local05, result1
064b8     70 00 90 FD | 	jmp	#LR__0580
064bc                 | LR__0570
064bc     6C 0A B0 FD | 	call	#_compile_fun_2p
064c0     FD 26 02 F6 | 	mov	local05, result1
064c4     64 00 90 FD | 	jmp	#LR__0580
064c8                 | LR__0571
064c8     60 0A B0 FD | 	call	#_compile_fun_2p
064cc     FD 26 02 F6 | 	mov	local05, result1
064d0     58 00 90 FD | 	jmp	#LR__0580
064d4                 | LR__0572
064d4     34 0E B0 FD | 	call	#_compile_fun_varp
064d8     FD 2C 02 F6 | 	mov	local08, result1
064dc     4C 00 90 FD | 	jmp	#LR__0580
064e0                 | LR__0573
064e0     BC 0A B0 FD | 	call	#_compile_fun_3p
064e4     FD 26 02 F6 | 	mov	local05, result1
064e8     40 00 90 FD | 	jmp	#LR__0580
064ec                 | LR__0574
064ec     0C 30 B0 FD | 	call	#_expr
064f0                 | ' expr()
064f0                 | ' return 0
064f0     00 26 06 F6 | 	mov	local05, #0
064f4     34 00 90 FD | 	jmp	#LR__0580
064f8                 | LR__0575
064f8     30 0A B0 FD | 	call	#_compile_fun_2p
064fc     FD 26 02 F6 | 	mov	local05, result1
06500     28 00 90 FD | 	jmp	#LR__0580
06504                 | LR__0576
06504     24 0A B0 FD | 	call	#_compile_fun_2p
06508     FD 26 02 F6 | 	mov	local05, result1
0650c     1C 00 90 FD | 	jmp	#LR__0580
06510                 | LR__0577
06510     18 0A B0 FD | 	call	#_compile_fun_2p
06514     FD 26 02 F6 | 	mov	local05, result1
06518     10 00 90 FD | 	jmp	#LR__0580
0651c                 | LR__0578
0651c     E8 01 B0 FD | 	call	#_compile_array_assign
06520     C4 00 90 FD | 	jmp	#LR__0581
06524                 | LR__0579
06524     48 09 B0 FD | 	call	#_compile_unknown
06528     BC 00 90 FD | 	jmp	#LR__0581
0652c                 | LR__0580
0652c     14 23 02 F6 | 	mov	local03, local06
06530     16 1F 02 F6 | 	mov	local01, local08
06534     0F 2B 02 F6 | 	mov	local07, local01
06538     10 2F 02 F6 | 	mov	local09, local02
0653c     11 29 02 F6 | 	mov	local06, local03
06540     4A 00 00 FF 
06544     AC E4 05 F1 | 	add	objptr, ##38060
06548     F2 1E 02 FB | 	rdlong	local01, objptr
0654c     0F 2D 02 F6 | 	mov	local08, local01
06550     01 2C 66 F0 | 	shl	local08, #1
06554     0F 2D 02 F1 | 	add	local08, local01
06558     02 2C 66 F0 | 	shl	local08, #2
0655c     03 00 00 FF 
06560     00 E4 85 F1 | 	sub	objptr, ##1536
06564     F2 2C 02 F1 | 	add	local08, objptr
06568     16 2B 62 FC | 	wrlong	local07, local08
0656c     03 00 00 FF 
06570     00 E4 05 F1 | 	add	objptr, ##1536
06574     F2 1E 02 FB | 	rdlong	local01, objptr
06578     0F 2D 02 F6 | 	mov	local08, local01
0657c     01 2C 66 F0 | 	shl	local08, #1
06580     0F 2D 02 F1 | 	add	local08, local01
06584     02 2C 66 F0 | 	shl	local08, #2
06588     03 00 00 FF 
0658c     00 E4 85 F1 | 	sub	objptr, ##1536
06590     F2 2C 02 F1 | 	add	local08, objptr
06594     04 2C 06 F1 | 	add	local08, #4
06598     16 2F 62 FC | 	wrlong	local09, local08
0659c     03 00 00 FF 
065a0     00 E4 05 F1 | 	add	objptr, ##1536
065a4     F2 1E 02 FB | 	rdlong	local01, objptr
065a8     0F 2D 02 F6 | 	mov	local08, local01
065ac     01 2C 66 F0 | 	shl	local08, #1
065b0     0F 2D 02 F1 | 	add	local08, local01
065b4     02 2C 66 F0 | 	shl	local08, #2
065b8     03 00 00 FF 
065bc     00 E4 85 F1 | 	sub	objptr, ##1536
065c0     F2 2C 02 F1 | 	add	local08, objptr
065c4     08 2C 06 F1 | 	add	local08, #8
065c8     16 29 62 FC | 	wrlong	local06, local08
065cc     03 00 00 FF 
065d0     00 E4 05 F1 | 	add	objptr, ##1536
065d4     F2 2A 02 FB | 	rdlong	local07, objptr
065d8     01 2A 06 F1 | 	add	local07, #1
065dc     F2 2A 62 FC | 	wrlong	local07, objptr
065e0     4A 00 00 FF 
065e4     AC E4 85 F1 | 	sub	objptr, ##38060
065e8                 | LR__0581
065e8                 | ' 
065e8                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
065e8                 | ' 450 if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
065e8     00 24 0E F2 | 	cmp	local04, #0 wz
065ec     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
065f0     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
065f4     38 00 90 5D |  if_ne	jmp	#LR__0582
065f8     4A 00 00 FF 
065fc     AC E4 05 F1 | 	add	objptr, ##38060
06600     F2 2C 02 FB | 	rdlong	local08, objptr
06604     16 1F 02 F6 | 	mov	local01, local08
06608     01 1E 66 F0 | 	shl	local01, #1
0660c     16 1F 02 F1 | 	add	local01, local08
06610     02 1E 66 F0 | 	shl	local01, #2
06614     03 00 00 FF 
06618     00 E4 85 F1 | 	sub	objptr, ##1536
0661c     F2 1E 02 F1 | 	add	local01, objptr
06620     08 1E 06 F1 | 	add	local01, #8
06624     0F FD 6B FC | 	wrlong	#510, local01
06628     47 00 00 FF 
0662c     AC E4 85 F1 | 	sub	objptr, ##36524
06630                 | LR__0582
06630                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
06630     4A 00 00 FF 
06634     AC E4 05 F1 | 	add	objptr, ##38060
06638     F2 1E 02 FB | 	rdlong	local01, objptr
0663c     4A 00 00 FF 
06640     AC E4 85 F1 | 	sub	objptr, ##38060
06644     97 58 48 FB | 	callpa	#(@LR__0585-@LR__0583)>>2,fcache_load_ptr_
06648                 | LR__0583
06648     0F 2D 02 F6 | 	mov	local08, local01
0664c     01 2C 66 F0 | 	shl	local08, #1
06650     0F 2D 02 F1 | 	add	local08, local01
06654     02 2C 66 F0 | 	shl	local08, #2
06658     47 00 00 FF 
0665c     AC E4 05 F1 | 	add	objptr, ##36524
06660     F2 2C 02 F1 | 	add	local08, objptr
06664     08 2C 06 F1 | 	add	local08, #8
06668     16 2D 02 FB | 	rdlong	local08, local08
0666c     9B 2C 0E F2 | 	cmp	local08, #155 wz
06670     47 00 00 FF 
06674     AC E4 85 F1 | 	sub	objptr, ##36524
06678     70 00 90 5D |  if_ne	jmp	#LR__0584
0667c     0F 2D 02 F6 | 	mov	local08, local01
06680     01 2C 86 F1 | 	sub	local08, #1
06684     16 2F 02 F6 | 	mov	local09, local08
06688     01 2E 66 F0 | 	shl	local09, #1
0668c     16 2F 02 F1 | 	add	local09, local08
06690     02 2E 66 F0 | 	shl	local09, #2
06694     47 00 00 FF 
06698     AC E4 05 F1 | 	add	objptr, ##36524
0669c     F2 2E 02 F1 | 	add	local09, objptr
066a0     08 2E 06 F1 | 	add	local09, #8
066a4     17 2D 02 FB | 	rdlong	local08, local09
066a8     11 2C 0E F2 | 	cmp	local08, #17 wz
066ac     47 00 00 FF 
066b0     AC E4 85 F1 | 	sub	objptr, ##36524
066b4     34 00 90 5D |  if_ne	jmp	#LR__0584
066b8     0F 2F 02 F6 | 	mov	local09, local01
066bc     01 2E 86 F1 | 	sub	local09, #1
066c0     17 2D 02 F6 | 	mov	local08, local09
066c4     01 2C 66 F0 | 	shl	local08, #1
066c8     17 2D 02 F1 | 	add	local08, local09
066cc     02 2C 66 F0 | 	shl	local08, #2
066d0     47 00 00 FF 
066d4     AC E4 05 F1 | 	add	objptr, ##36524
066d8     F2 2C 02 F1 | 	add	local08, objptr
066dc     08 2C 06 F1 | 	add	local08, #8
066e0     16 25 68 FC | 	wrlong	#18, local08
066e4     47 00 00 FF 
066e8     AC E4 85 F1 | 	sub	objptr, ##36524
066ec                 | LR__0584
066ec     01 1E 86 F1 | 	sub	local01, #1
066f0     01 1E 56 F2 | 	cmps	local01, #1 wc
066f4     50 FF 9F 3D |  if_ae	jmp	#LR__0583
066f8                 | LR__0585
066f8                 | '  '  print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
066f8                 | ' return err
066f8     13 FB 01 F6 | 	mov	result1, local05
066fc     A7 F0 03 F6 | 	mov	ptra, fp
06700     B2 00 A0 FD | 	call	#popregs_
06704                 | _compile_immediate_ret
06704     2D 00 64 FD | 	ret
06708                 | 
06708                 | ' 
06708                 | ' sub compile_array_assign
06708                 | _compile_array_assign
06708     0A 4A 05 F6 | 	mov	COUNT_, #10
0670c     A8 00 A0 FD | 	call	#pushregs_
06710     00 24 06 F6 | 	mov	local04, #0
06714     37 00 00 FF 
06718     74 E4 05 F1 | 	add	objptr, ##28276
0671c     F2 26 02 FB | 	rdlong	local05, objptr
06720     13 FB 01 F6 | 	mov	result1, local05
06724     01 FA 85 F1 | 	sub	result1, #1
06728     03 FA 65 F0 | 	shl	result1, #3
0672c     02 00 00 FF 
06730     38 E4 85 F1 | 	sub	objptr, ##1080
06734     F2 FA 01 F1 | 	add	result1, objptr
06738     FD 28 02 FB | 	rdlong	local06, result1
0673c                 | ' numpar=0
0673c                 | ' 'print "In array_assign, lparts(ct).token=",lparts(ct).token,lparts(ct).part$
0673c                 | ' ' todo here: recognize params and t1.result.twowords=numpar
0673c                 | ' varname$=lparts(ct-1).part$' : print "In array_assign, varname$=";varname$
0673c                 | ' if lparts(ct).token=token_lpar then
0673c     03 26 66 F0 | 	shl	local05, #3
06740     F2 26 02 F1 | 	add	local05, objptr
06744     04 26 06 F1 | 	add	local05, #4
06748     13 27 02 FB | 	rdlong	local05, local05
0674c     15 26 0E F2 | 	cmp	local05, #21 wz
06750     35 00 00 FF 
06754     3C E4 85 F1 | 	sub	objptr, ##27196
06758     D4 01 90 5D |  if_ne	jmp	#LR__0594
0675c     37 00 00 FF 
06760     74 E4 05 F1 | 	add	objptr, ##28276
06764     F2 2A 02 FB | 	rdlong	local07, objptr
06768     01 2A 06 F1 | 	add	local07, #1
0676c     F2 2A 62 FC | 	wrlong	local07, objptr
06770     37 00 00 FF 
06774     74 E4 85 F1 | 	sub	objptr, ##28276
06778                 | '   ct+=1 											' omit this lpar, this is for expr list
06778                 | '   do
06778                 | LR__0590
06778     80 2D B0 FD | 	call	#_expr
0677c     37 00 00 FF 
06780     74 E4 05 F1 | 	add	objptr, ##28276
06784     F2 26 02 FB | 	rdlong	local05, objptr
06788     01 26 06 F1 | 	add	local05, #1
0678c     F2 26 62 FC | 	wrlong	local05, objptr
06790     01 24 06 F1 | 	add	local04, #1
06794     01 26 86 F1 | 	sub	local05, #1
06798     03 26 66 F0 | 	shl	local05, #3
0679c     02 00 00 FF 
067a0     38 E4 85 F1 | 	sub	objptr, ##1080
067a4     F2 26 02 F1 | 	add	local05, objptr
067a8     04 26 06 F1 | 	add	local05, #4
067ac     13 2B 02 FB | 	rdlong	local07, local05
067b0     14 2A 0E F2 | 	cmp	local07, #20 wz
067b4     35 00 00 FF 
067b8     3C E4 85 F1 | 	sub	objptr, ##27196
067bc     34 00 90 AD |  if_e	jmp	#LR__0591
067c0     37 00 00 FF 
067c4     74 E4 05 F1 | 	add	objptr, ##28276
067c8     F2 2A 02 FB | 	rdlong	local07, objptr
067cc     03 2A 66 F0 | 	shl	local07, #3
067d0     02 00 00 FF 
067d4     38 E4 85 F1 | 	sub	objptr, ##1080
067d8     F2 2A 02 F1 | 	add	local07, objptr
067dc     04 2A 06 F1 | 	add	local07, #4
067e0     15 2B 02 FB | 	rdlong	local07, local07
067e4     FE 2B 0E F2 | 	cmp	local07, #510 wz
067e8     35 00 00 FF 
067ec     3C E4 85 F1 | 	sub	objptr, ##27196
067f0     84 FF 9F 5D |  if_ne	jmp	#LR__0590
067f4                 | LR__0591
067f4     37 00 00 FF 
067f8     74 E4 05 F1 | 	add	objptr, ##28276
067fc     F2 2A 02 FB | 	rdlong	local07, objptr
06800     01 2A 06 F1 | 	add	local07, #1
06804     F2 2A 62 FC | 	wrlong	local07, objptr
06808     37 00 00 FF 
0680c     74 E4 85 F1 | 	sub	objptr, ##28276
06810     E8 2C B0 FD | 	call	#_expr
06814     01 2C 66 F6 | 	neg	local08, #1
06818     00 2E 06 F6 | 	mov	local09, #0
0681c                 | ' '   print "in array_assign, rpar found, numpar=",numpar
0681c                 | '  'if lparts(ct).token=token_end then print "in getfun, end found, numpar=",numpar
0681c                 | ' 'if lparts(ct).token<>token_eq then print "in array_assign,= expected" else print "in array_assign,= found"
0681c                 | ' ct+=1 : expr()
0681c                 | ' ' now find the vae
0681c                 | ' 
0681c                 | ' j=-1 : i=0 : do : 
0681c                 | LR__0592
0681c                 | '   if variables(i).name=varname$ then j=i: exit loop
0681c     17 27 02 F6 | 	mov	local05, local09
06820     04 26 66 F0 | 	shl	local05, #4
06824     15 00 00 FF 
06828     28 E4 05 F1 | 	add	objptr, ##10792
0682c     F2 26 02 F1 | 	add	local05, objptr
06830     13 13 02 FB | 	rdlong	arg01, local05
06834     14 15 02 F6 | 	mov	arg02, local06
06838     15 00 00 FF 
0683c     28 E4 85 F1 | 	sub	objptr, ##10792
06840     E0 8F B1 FD | 	call	#__system___string_cmp
06844     00 FA 0D F2 | 	cmp	result1, #0 wz
06848     17 2D 02 A6 |  if_e	mov	local08, local09
0684c     20 00 90 AD |  if_e	jmp	#LR__0593
06850     01 2E 06 F1 | 	add	local09, #1
06854     35 00 00 FF 
06858     38 E4 05 F1 | 	add	objptr, ##27192
0685c     F2 2A 02 FB | 	rdlong	local07, objptr
06860     35 00 00 FF 
06864     38 E4 85 F1 | 	sub	objptr, ##27192
06868     15 2F 5A F2 | 	cmps	local09, local07 wcz
0686c     AC FF 9F ED |  if_be	jmp	#LR__0592
06870                 | LR__0593
06870     16 1F 02 F6 | 	mov	local01, local08
06874     12 21 02 F6 | 	mov	local02, local04
06878     17 22 06 F6 | 	mov	local03, #23
0687c     0F 2B 02 F6 | 	mov	local07, local01
06880     10 31 02 F6 | 	mov	local10, local02
06884     11 2D 02 F6 | 	mov	local08, local03
06888     4A 00 00 FF 
0688c     AC E4 05 F1 | 	add	objptr, ##38060
06890     F2 1E 02 FB | 	rdlong	local01, objptr
06894     0F 2F 02 F6 | 	mov	local09, local01
06898     01 2E 66 F0 | 	shl	local09, #1
0689c     0F 2F 02 F1 | 	add	local09, local01
068a0     02 2E 66 F0 | 	shl	local09, #2
068a4     03 00 00 FF 
068a8     00 E4 85 F1 | 	sub	objptr, ##1536
068ac     F2 2E 02 F1 | 	add	local09, objptr
068b0     17 2B 62 FC | 	wrlong	local07, local09
068b4     03 00 00 FF 
068b8     00 E4 05 F1 | 	add	objptr, ##1536
068bc     F2 1E 02 FB | 	rdlong	local01, objptr
068c0     0F 2F 02 F6 | 	mov	local09, local01
068c4     01 2E 66 F0 | 	shl	local09, #1
068c8     0F 2F 02 F1 | 	add	local09, local01
068cc     02 2E 66 F0 | 	shl	local09, #2
068d0     03 00 00 FF 
068d4     00 E4 85 F1 | 	sub	objptr, ##1536
068d8     F2 2E 02 F1 | 	add	local09, objptr
068dc     04 2E 06 F1 | 	add	local09, #4
068e0     17 31 62 FC | 	wrlong	local10, local09
068e4     03 00 00 FF 
068e8     00 E4 05 F1 | 	add	objptr, ##1536
068ec     F2 30 02 FB | 	rdlong	local10, objptr
068f0     18 1F 02 F6 | 	mov	local01, local10
068f4     01 1E 66 F0 | 	shl	local01, #1
068f8     18 1F 02 F1 | 	add	local01, local10
068fc     02 1E 66 F0 | 	shl	local01, #2
06900     03 00 00 FF 
06904     00 E4 85 F1 | 	sub	objptr, ##1536
06908     F2 1E 02 F1 | 	add	local01, objptr
0690c     08 1E 06 F1 | 	add	local01, #8
06910     0F 2D 62 FC | 	wrlong	local08, local01
06914     03 00 00 FF 
06918     00 E4 05 F1 | 	add	objptr, ##1536
0691c     F2 2A 02 FB | 	rdlong	local07, objptr
06920     01 2A 06 F1 | 	add	local07, #1
06924     F2 2A 62 FC | 	wrlong	local07, objptr
06928     4A 00 00 FF 
0692c     AC E4 85 F1 | 	sub	objptr, ##38060
06930                 | LR__0594
06930     A7 F0 03 F6 | 	mov	ptra, fp
06934     B2 00 A0 FD | 	call	#popregs_
06938                 | _compile_array_assign_ret
06938     2D 00 64 FD | 	ret
0693c                 | 
0693c                 | ' 
0693c                 | ' 
0693c                 | ' sub compile_immediate_assign(linetype as ulong)
0693c                 | _compile_immediate_assign
0693c     09 4A 05 F6 | 	mov	COUNT_, #9
06940     A8 00 A0 FD | 	call	#pushregs_
06944     09 25 0A F6 | 	mov	local04, arg01 wz
06948     FF 22 06 F6 | 	mov	local03, #255
0694c     01 26 66 F6 | 	neg	local05, #1
06950                 | ' 
06950                 | ' t1.result_type=result_error : t1.result.uresult=0
06950                 | ' i=-1: j=-1
06950                 | ' 
06950                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
06950     2C 00 90 5D |  if_ne	jmp	#LR__0600
06954     35 00 00 FF 
06958     3C E4 05 F1 | 	add	objptr, ##27196
0695c     F2 28 02 FB | 	rdlong	local06, objptr
06960     02 00 00 FF 
06964     38 E4 05 F1 | 	add	objptr, ##1080
06968     F2 04 68 FC | 	wrlong	#2, objptr
0696c     13 00 00 FF 
06970     38 E4 05 F1 | 	add	objptr, ##9784
06974     F2 00 68 FC | 	wrlong	#0, objptr
06978     4A 00 00 FF 
0697c     AC E4 85 F1 | 	sub	objptr, ##38060
06980                 | LR__0600
06980                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
06980     02 24 0E F2 | 	cmp	local04, #2 wz
06984     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
06988     35 00 00 AF 
0698c     3C E4 05 A1 |  if_e	add	objptr, ##27196
06990     F2 28 02 AB |  if_e	rdlong	local06, objptr
06994     02 00 00 AF 
06998     38 E4 05 A1 |  if_e	add	objptr, ##1080
0699c     F2 04 68 AC |  if_e	wrlong	#2, objptr
069a0     37 00 00 AF 
069a4     74 E4 85 A1 |  if_e	sub	objptr, ##28276
069a8                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
069a8     04 24 0E F2 | 	cmp	local04, #4 wz
069ac     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
069b0     2C 00 90 5D |  if_ne	jmp	#LR__0601
069b4     35 00 00 FF 
069b8     44 E4 05 F1 | 	add	objptr, ##27204
069bc     F2 28 02 FB | 	rdlong	local06, objptr
069c0     02 00 00 FF 
069c4     30 E4 05 F1 | 	add	objptr, ##1072
069c8     F2 06 68 FC | 	wrlong	#3, objptr
069cc     13 00 00 FF 
069d0     38 E4 05 F1 | 	add	objptr, ##9784
069d4     F2 04 68 FC | 	wrlong	#2, objptr
069d8     4A 00 00 FF 
069dc     AC E4 85 F1 | 	sub	objptr, ##38060
069e0                 | LR__0601
069e0                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
069e0     05 24 0E F2 | 	cmp	local04, #5 wz
069e4     3C 00 90 5D |  if_ne	jmp	#LR__0602
069e8     37 00 00 FF 
069ec     74 E4 05 F1 | 	add	objptr, ##28276
069f0     F2 FA 01 FB | 	rdlong	result1, objptr
069f4     FD 28 02 F6 | 	mov	local06, result1
069f8     03 28 66 F0 | 	shl	local06, #3
069fc     02 00 00 FF 
06a00     38 E4 85 F1 | 	sub	objptr, ##1080
06a04     F2 28 02 F1 | 	add	local06, objptr
06a08     14 29 02 FB | 	rdlong	local06, local06
06a0c     02 FA 05 F1 | 	add	result1, #2
06a10     02 00 00 FF 
06a14     38 E4 05 F1 | 	add	objptr, ##1080
06a18     F2 FA 61 FC | 	wrlong	result1, objptr
06a1c     37 00 00 FF 
06a20     74 E4 85 F1 | 	sub	objptr, ##28276
06a24                 | LR__0602
06a24     14 13 02 F6 | 	mov	arg01, local06
06a28     01 14 06 F6 | 	mov	arg02, #1
06a2c     64 AE B1 FD | 	call	#__system__Right_S
06a30     C8 2A B0 FD | 	call	#_expr
06a34                 | '  
06a34                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
06a34                 | ' 
06a34                 | ' suffix2$=right$(varname2$,1)
06a34                 | ' expr()
06a34                 | ' 
06a34                 | ' 
06a34                 | ' if varnum>0 then
06a34     35 00 00 FF 
06a38     38 E4 05 F1 | 	add	objptr, ##27192
06a3c     F2 2A 02 FB | 	rdlong	local07, objptr
06a40     35 00 00 FF 
06a44     38 E4 85 F1 | 	sub	objptr, ##27192
06a48     01 2A 56 F2 | 	cmps	local07, #1 wc
06a4c     58 00 90 CD |  if_b	jmp	#LR__0605
06a50                 | '   for i=0 to varnum-1
06a50     00 2C 06 F6 | 	mov	local08, #0
06a54     35 00 00 FF 
06a58     38 E4 05 F1 | 	add	objptr, ##27192
06a5c     F2 2E 02 FB | 	rdlong	local09, objptr
06a60     35 00 00 FF 
06a64     38 E4 85 F1 | 	sub	objptr, ##27192
06a68                 | LR__0603
06a68     17 2D 52 F2 | 	cmps	local08, local09 wc
06a6c     38 00 90 3D |  if_ae	jmp	#LR__0604
06a70                 | '     if variables(i).name=varname2$ then j=i : exit
06a70     16 2B 02 F6 | 	mov	local07, local08
06a74     04 2A 66 F0 | 	shl	local07, #4
06a78     15 00 00 FF 
06a7c     28 E4 05 F1 | 	add	objptr, ##10792
06a80     F2 2A 02 F1 | 	add	local07, objptr
06a84     15 13 02 FB | 	rdlong	arg01, local07
06a88     14 15 02 F6 | 	mov	arg02, local06
06a8c     15 00 00 FF 
06a90     28 E4 85 F1 | 	sub	objptr, ##10792
06a94     8C 8D B1 FD | 	call	#__system___string_cmp
06a98     00 FA 0D F2 | 	cmp	result1, #0 wz
06a9c     16 27 02 A6 |  if_e	mov	local05, local08
06aa0     01 2C 06 51 |  if_ne	add	local08, #1
06aa4     C0 FF 9F 5D |  if_ne	jmp	#LR__0603
06aa8                 | LR__0604
06aa8                 | LR__0605
06aa8                 | ' if  j=-1 andalso varnum<maxvars then   
06aa8     FF FF 7F FF 
06aac     FF 27 0E F2 | 	cmp	local05, ##-1 wz
06ab0     60 00 90 5D |  if_ne	jmp	#LR__0606
06ab4     35 00 00 FF 
06ab8     38 E4 05 F1 | 	add	objptr, ##27192
06abc     F2 2A 02 FB | 	rdlong	local07, objptr
06ac0     35 00 00 FF 
06ac4     38 E4 85 F1 | 	sub	objptr, ##27192
06ac8     02 00 00 FF 
06acc     00 2A 56 F2 | 	cmps	local07, ##1024 wc
06ad0     40 00 90 3D |  if_ae	jmp	#LR__0606
06ad4     35 00 00 FF 
06ad8     38 E4 05 F1 | 	add	objptr, ##27192
06adc     F2 2E 02 FB | 	rdlong	local09, objptr
06ae0     04 2E 66 F0 | 	shl	local09, #4
06ae4     20 00 00 FF 
06ae8     10 E4 85 F1 | 	sub	objptr, ##16400
06aec     F2 2E 02 F1 | 	add	local09, objptr
06af0     17 29 62 FC | 	wrlong	local06, local09
06af4     20 00 00 FF 
06af8     10 E4 05 F1 | 	add	objptr, ##16400
06afc     F2 2A 02 FB | 	rdlong	local07, objptr
06b00     15 27 02 F6 | 	mov	local05, local07
06b04     01 2A 06 F1 | 	add	local07, #1
06b08     F2 2A 62 FC | 	wrlong	local07, objptr
06b0c     35 00 00 FF 
06b10     38 E4 85 F1 | 	sub	objptr, ##27192
06b14                 | LR__0606
06b14     13 1F 02 F6 | 	mov	local01, local05
06b18     17 22 06 F6 | 	mov	local03, #23
06b1c     0F 2B 02 F6 | 	mov	local07, local01
06b20     10 2F 02 F6 | 	mov	local09, local02
06b24     11 1F 02 F6 | 	mov	local01, local03
06b28     4A 00 00 FF 
06b2c     AC E4 05 F1 | 	add	objptr, ##38060
06b30     F2 2C 02 FB | 	rdlong	local08, objptr
06b34     16 29 02 F6 | 	mov	local06, local08
06b38     01 28 66 F0 | 	shl	local06, #1
06b3c     16 29 02 F1 | 	add	local06, local08
06b40     02 28 66 F0 | 	shl	local06, #2
06b44     03 00 00 FF 
06b48     00 E4 85 F1 | 	sub	objptr, ##1536
06b4c     F2 28 02 F1 | 	add	local06, objptr
06b50     14 2B 62 FC | 	wrlong	local07, local06
06b54     03 00 00 FF 
06b58     00 E4 05 F1 | 	add	objptr, ##1536
06b5c     F2 2C 02 FB | 	rdlong	local08, objptr
06b60     16 2B 02 F6 | 	mov	local07, local08
06b64     01 2A 66 F0 | 	shl	local07, #1
06b68     16 2B 02 F1 | 	add	local07, local08
06b6c     02 2A 66 F0 | 	shl	local07, #2
06b70     03 00 00 FF 
06b74     00 E4 85 F1 | 	sub	objptr, ##1536
06b78     F2 2A 02 F1 | 	add	local07, objptr
06b7c     04 2A 06 F1 | 	add	local07, #4
06b80     15 2F 62 FC | 	wrlong	local09, local07
06b84     03 00 00 FF 
06b88     00 E4 05 F1 | 	add	objptr, ##1536
06b8c     F2 2E 02 FB | 	rdlong	local09, objptr
06b90     17 2D 02 F6 | 	mov	local08, local09
06b94     01 2C 66 F0 | 	shl	local08, #1
06b98     17 2D 02 F1 | 	add	local08, local09
06b9c     02 2C 66 F0 | 	shl	local08, #2
06ba0     03 00 00 FF 
06ba4     00 E4 85 F1 | 	sub	objptr, ##1536
06ba8     F2 2C 02 F1 | 	add	local08, objptr
06bac     08 2C 06 F1 | 	add	local08, #8
06bb0     16 1F 62 FC | 	wrlong	local01, local08
06bb4     03 00 00 FF 
06bb8     00 E4 05 F1 | 	add	objptr, ##1536
06bbc     F2 2A 02 FB | 	rdlong	local07, objptr
06bc0     01 2A 06 F1 | 	add	local07, #1
06bc4     F2 2A 62 FC | 	wrlong	local07, objptr
06bc8     4A 00 00 FF 
06bcc     AC E4 85 F1 | 	sub	objptr, ##38060
06bd0                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
06bd0                 | ' 
06bd0                 | ' 
06bd0                 | ' 
06bd0                 | ' 
06bd0                 | ' 
06bd0                 | ' 
06bd0                 | ' compiledline(lineptr)=t1:  lineptr+=1 
06bd0                 | '  if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
06bd0     00 24 0E F2 | 	cmp	local04, #0 wz
06bd4     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
06bd8     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
06bdc     38 00 90 5D |  if_ne	jmp	#LR__0607
06be0     4A 00 00 FF 
06be4     AC E4 05 F1 | 	add	objptr, ##38060
06be8     F2 1E 02 FB | 	rdlong	local01, objptr
06bec     0F 2F 02 F6 | 	mov	local09, local01
06bf0     01 2E 66 F0 | 	shl	local09, #1
06bf4     0F 2F 02 F1 | 	add	local09, local01
06bf8     02 2E 66 F0 | 	shl	local09, #2
06bfc     03 00 00 FF 
06c00     00 E4 85 F1 | 	sub	objptr, ##1536
06c04     F2 2E 02 F1 | 	add	local09, objptr
06c08     08 2E 06 F1 | 	add	local09, #8
06c0c     17 FD 6B FC | 	wrlong	#510, local09
06c10     47 00 00 FF 
06c14     AC E4 85 F1 | 	sub	objptr, ##36524
06c18                 | LR__0607
06c18     A7 F0 03 F6 | 	mov	ptra, fp
06c1c     B2 00 A0 FD | 	call	#popregs_
06c20                 | _compile_immediate_assign_ret
06c20     2D 00 64 FD | 	ret
06c24                 | 
06c24                 | ' 
06c24                 | ' ' ------------------ compile the line that is calling a command 
06c24                 | ' 
06c24                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
06c24                 | _compile
06c24     04 4A 05 F6 | 	mov	COUNT_, #4
06c28     A8 00 A0 FD | 	call	#pushregs_
06c2c     09 1F 0A F6 | 	mov	local01, arg01 wz
06c30     0A 21 02 F6 | 	mov	local02, arg02
06c34     0B 23 02 F6 | 	mov	local03, arg03
06c38                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
06c38                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
06c38                 | '  
06c38                 | ' '  print "called compile with line= "; alinemajor;" and cont= "; cont 
06c38                 | ' if alinemajor=0 then err=compile_immediate(0) : return err  
06c38     0C 00 90 5D |  if_ne	jmp	#LR__0610
06c3c     00 12 06 F6 | 	mov	arg01, #0
06c40     98 F2 BF FD | 	call	#_compile_immediate
06c44     A0 00 90 FD | 	jmp	#LR__0617
06c48                 | LR__0610
06c48     47 00 00 FF 
06c4c     AC E4 05 F1 | 	add	objptr, ##36524
06c50     F2 1E 62 FC | 	wrlong	local01, objptr
06c54     04 E4 05 F1 | 	add	objptr, #4
06c58     F2 20 62 FC | 	wrlong	local02, objptr
06c5c     47 00 00 FF 
06c60     B0 E4 85 F1 | 	sub	objptr, ##36528
06c64     11 13 02 F6 | 	mov	arg01, local03
06c68     01 12 06 F1 | 	add	arg01, #1
06c6c     6C F2 BF FD | 	call	#_compile_immediate
06c70     FD 24 0A F6 | 	mov	local04, result1 wz
06c74                 | ' 
06c74                 | ' ucompiledline(0)=alinemajor
06c74                 | ' ucompiledline(1)=alineminor
06c74                 | ' 
06c74                 | ' 
06c74                 | ' ' cont: 0: this is the first part of the line that will continue
06c74                 | ' ' 1 - this is the continuation of the line
06c74                 | ' ' 2 - this is the last continued line
06c74                 | ' ' 3 - this is the ome and only part
06c74                 | ' 
06c74                 | ' err=compile_immediate(cont+1) 
06c74                 | ' if err=0 then
06c74     6C 00 90 5D |  if_ne	jmp	#LR__0616
06c78                 | '   if cont=3 orelse cont=2 then 
06c78     03 22 0E F2 | 	cmp	local03, #3 wz
06c7c     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
06c80     60 00 90 5D |  if_ne	jmp	#LR__0615
06c84                 | '     if alinemajor >lastline then 
06c84     4A 00 00 FF 
06c88     B8 E4 05 F1 | 	add	objptr, ##38072
06c8c     F2 16 02 FB | 	rdlong	arg03, objptr
06c90     4A 00 00 FF 
06c94     B8 E4 85 F1 | 	sub	objptr, ##38072
06c98     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
06c9c     0C 00 90 ED |  if_be	jmp	#LR__0611
06ca0     0F 13 02 F6 | 	mov	arg01, local01
06ca4     6C F1 BF FD | 	call	#_add_line_at_end
06ca8     38 00 90 FD | 	jmp	#LR__0614
06cac                 | LR__0611
06cac     0F 13 02 F6 | 	mov	arg01, local01
06cb0     8C EA BF FD | 	call	#_deleteline
06cb4                 | '       deleteline(alinemajor)  
06cb4                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' yes I know that's not optimal    
06cb4     4A 00 00 FF 
06cb8     B8 E4 05 F1 | 	add	objptr, ##38072
06cbc     F2 16 02 FB | 	rdlong	arg03, objptr
06cc0     4A 00 00 FF 
06cc4     B8 E4 85 F1 | 	sub	objptr, ##38072
06cc8     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
06ccc     0C 00 90 ED |  if_be	jmp	#LR__0612
06cd0     0F 13 02 F6 | 	mov	arg01, local01
06cd4     3C F1 BF FD | 	call	#_add_line_at_end
06cd8     08 00 90 FD | 	jmp	#LR__0613
06cdc                 | LR__0612
06cdc     0F 13 02 F6 | 	mov	arg01, local01
06ce0     14 EF BF FD | 	call	#_insertline
06ce4                 | LR__0613
06ce4                 | LR__0614
06ce4                 | LR__0615
06ce4                 | LR__0616
06ce4                 | ' return err
06ce4     12 FB 01 F6 | 	mov	result1, local04
06ce8                 | LR__0617
06ce8     A7 F0 03 F6 | 	mov	ptra, fp
06cec     B2 00 A0 FD | 	call	#popregs_
06cf0                 | _compile_ret
06cf0     2D 00 64 FD | 	ret
06cf4                 | 
06cf4                 | ' 
06cf4                 | ' ' ------------------ compile the line that is assigning to a variable
06cf4                 | ' 
06cf4                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
06cf4                 | _compile_assign
06cf4     03 4A 05 F6 | 	mov	COUNT_, #3
06cf8     A8 00 A0 FD | 	call	#pushregs_
06cfc     09 1F 0A F6 | 	mov	local01, arg01 wz
06d00     0A 21 02 F6 | 	mov	local02, arg02
06d04     0B 23 02 F6 | 	mov	local03, arg03
06d08                 | ' 
06d08                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
06d08                 | ' if alinemajor=0 then compile_immediate_assign(0) : return  
06d08     0C 00 90 5D |  if_ne	jmp	#LR__0620
06d0c     00 12 06 F6 | 	mov	arg01, #0
06d10     28 FC BF FD | 	call	#_compile_immediate_assign
06d14     94 00 90 FD | 	jmp	#LR__0626
06d18                 | LR__0620
06d18     47 00 00 FF 
06d1c     AC E4 05 F1 | 	add	objptr, ##36524
06d20     F2 1E 62 FC | 	wrlong	local01, objptr
06d24     04 E4 05 F1 | 	add	objptr, #4
06d28     F2 20 62 FC | 	wrlong	local02, objptr
06d2c     47 00 00 FF 
06d30     B0 E4 85 F1 | 	sub	objptr, ##36528
06d34     11 13 02 F6 | 	mov	arg01, local03
06d38     01 12 06 F1 | 	add	arg01, #1
06d3c     FC FB BF FD | 	call	#_compile_immediate_assign
06d40                 | ' 
06d40                 | ' ucompiledline(0)=alinemajor
06d40                 | ' ucompiledline(1)=alineminor
06d40                 | ' 
06d40                 | ' compile_immediate_assign(cont+1) 
06d40                 | ' 
06d40                 | ' if cont=3 orelse cont=2 then 
06d40     03 22 0E F2 | 	cmp	local03, #3 wz
06d44     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
06d48     60 00 90 5D |  if_ne	jmp	#LR__0625
06d4c                 | '   if alinemajor >lastline then 
06d4c     4A 00 00 FF 
06d50     B8 E4 05 F1 | 	add	objptr, ##38072
06d54     F2 16 02 FB | 	rdlong	arg03, objptr
06d58     4A 00 00 FF 
06d5c     B8 E4 85 F1 | 	sub	objptr, ##38072
06d60     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
06d64     0C 00 90 ED |  if_be	jmp	#LR__0621
06d68     0F 13 02 F6 | 	mov	arg01, local01
06d6c     A4 F0 BF FD | 	call	#_add_line_at_end
06d70     38 00 90 FD | 	jmp	#LR__0624
06d74                 | LR__0621
06d74     0F 13 02 F6 | 	mov	arg01, local01
06d78     C4 E9 BF FD | 	call	#_deleteline
06d7c                 | '     deleteline(alinemajor)  
06d7c                 | '     if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
06d7c     4A 00 00 FF 
06d80     B8 E4 05 F1 | 	add	objptr, ##38072
06d84     F2 16 02 FB | 	rdlong	arg03, objptr
06d88     4A 00 00 FF 
06d8c     B8 E4 85 F1 | 	sub	objptr, ##38072
06d90     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
06d94     0C 00 90 ED |  if_be	jmp	#LR__0622
06d98     0F 13 02 F6 | 	mov	arg01, local01
06d9c     74 F0 BF FD | 	call	#_add_line_at_end
06da0     08 00 90 FD | 	jmp	#LR__0623
06da4                 | LR__0622
06da4     0F 13 02 F6 | 	mov	arg01, local01
06da8     4C EE BF FD | 	call	#_insertline
06dac                 | LR__0623
06dac                 | LR__0624
06dac                 | LR__0625
06dac                 | LR__0626
06dac     A7 F0 03 F6 | 	mov	ptra, fp
06db0     B2 00 A0 FD | 	call	#popregs_
06db4                 | _compile_assign_ret
06db4     2D 00 64 FD | 	ret
06db8                 | 
06db8                 | ' 
06db8                 | ' sub compile_error(errno)
06db8                 | _compile_error
06db8     FF 04 06 F6 | 	mov	_var03, #255
06dbc     01 07 02 F6 | 	mov	_var04, _var02
06dc0     02 09 02 F6 | 	mov	_var05, _var03
06dc4     4A 00 00 FF 
06dc8     AC E4 05 F1 | 	add	objptr, ##38060
06dcc     F2 0A 02 FB | 	rdlong	_var06, objptr
06dd0     05 0D 02 F6 | 	mov	_var07, _var06
06dd4     01 0C 66 F0 | 	shl	_var07, #1
06dd8     05 0D 02 F1 | 	add	_var07, _var06
06ddc     02 0C 66 F0 | 	shl	_var07, #2
06de0     03 00 00 FF 
06de4     00 E4 85 F1 | 	sub	objptr, ##1536
06de8     F2 0C 02 F1 | 	add	_var07, objptr
06dec     06 13 62 FC | 	wrlong	arg01, _var07
06df0     03 00 00 FF 
06df4     00 E4 05 F1 | 	add	objptr, ##1536
06df8     F2 0C 02 FB | 	rdlong	_var07, objptr
06dfc     06 0B 02 F6 | 	mov	_var06, _var07
06e00     01 0A 66 F0 | 	shl	_var06, #1
06e04     06 0B 02 F1 | 	add	_var06, _var07
06e08     02 0A 66 F0 | 	shl	_var06, #2
06e0c     03 00 00 FF 
06e10     00 E4 85 F1 | 	sub	objptr, ##1536
06e14     F2 0A 02 F1 | 	add	_var06, objptr
06e18     04 0A 06 F1 | 	add	_var06, #4
06e1c     05 07 62 FC | 	wrlong	_var04, _var06
06e20     03 00 00 FF 
06e24     00 E4 05 F1 | 	add	objptr, ##1536
06e28     F2 0C 02 FB | 	rdlong	_var07, objptr
06e2c     06 0B 02 F6 | 	mov	_var06, _var07
06e30     01 0A 66 F0 | 	shl	_var06, #1
06e34     06 0B 02 F1 | 	add	_var06, _var07
06e38     02 0A 66 F0 | 	shl	_var06, #2
06e3c     03 00 00 FF 
06e40     00 E4 85 F1 | 	sub	objptr, ##1536
06e44     F2 0A 02 F1 | 	add	_var06, objptr
06e48     08 0A 06 F1 | 	add	_var06, #8
06e4c     05 09 62 FC | 	wrlong	_var05, _var06
06e50     03 00 00 FF 
06e54     00 E4 05 F1 | 	add	objptr, ##1536
06e58     F2 12 02 FB | 	rdlong	arg01, objptr
06e5c     01 12 06 F1 | 	add	arg01, #1
06e60     F2 12 62 FC | 	wrlong	arg01, objptr
06e64     4A 00 00 FF 
06e68     AC E4 85 F1 | 	sub	objptr, ##38060
06e6c                 | _compile_error_ret
06e6c     2D 00 64 FD | 	ret
06e70                 | 
06e70                 | ' 
06e70                 | ' sub compile_unknown() 
06e70                 | _compile_unknown
06e70     FF 04 06 F6 | 	mov	_var03, #255
06e74     17 00 06 F6 | 	mov	_var01, #23
06e78     01 07 02 F6 | 	mov	_var04, _var02
06e7c     02 01 02 F6 | 	mov	_var01, _var03
06e80     4A 00 00 FF 
06e84     AC E4 05 F1 | 	add	objptr, ##38060
06e88     F2 08 02 FB | 	rdlong	_var05, objptr
06e8c     04 0B 02 F6 | 	mov	_var06, _var05
06e90     01 0A 66 F0 | 	shl	_var06, #1
06e94     04 0B 02 F1 | 	add	_var06, _var05
06e98     02 0A 66 F0 | 	shl	_var06, #2
06e9c     03 00 00 FF 
06ea0     00 E4 85 F1 | 	sub	objptr, ##1536
06ea4     F2 0A 02 F1 | 	add	_var06, objptr
06ea8     05 2F 68 FC | 	wrlong	#23, _var06
06eac     03 00 00 FF 
06eb0     00 E4 05 F1 | 	add	objptr, ##1536
06eb4     F2 0A 02 FB | 	rdlong	_var06, objptr
06eb8     05 09 02 F6 | 	mov	_var05, _var06
06ebc     01 08 66 F0 | 	shl	_var05, #1
06ec0     05 09 02 F1 | 	add	_var05, _var06
06ec4     02 08 66 F0 | 	shl	_var05, #2
06ec8     03 00 00 FF 
06ecc     00 E4 85 F1 | 	sub	objptr, ##1536
06ed0     F2 08 02 F1 | 	add	_var05, objptr
06ed4     04 08 06 F1 | 	add	_var05, #4
06ed8     04 07 62 FC | 	wrlong	_var04, _var05
06edc     03 00 00 FF 
06ee0     00 E4 05 F1 | 	add	objptr, ##1536
06ee4     F2 0A 02 FB | 	rdlong	_var06, objptr
06ee8     05 09 02 F6 | 	mov	_var05, _var06
06eec     01 08 66 F0 | 	shl	_var05, #1
06ef0     05 09 02 F1 | 	add	_var05, _var06
06ef4     02 08 66 F0 | 	shl	_var05, #2
06ef8     03 00 00 FF 
06efc     00 E4 85 F1 | 	sub	objptr, ##1536
06f00     F2 08 02 F1 | 	add	_var05, objptr
06f04     08 08 06 F1 | 	add	_var05, #8
06f08     04 01 62 FC | 	wrlong	_var01, _var05
06f0c     03 00 00 FF 
06f10     00 E4 05 F1 | 	add	objptr, ##1536
06f14     F2 0A 02 FB | 	rdlong	_var06, objptr
06f18     01 0A 06 F1 | 	add	_var06, #1
06f1c     F2 0A 62 FC | 	wrlong	_var06, objptr
06f20     4A 00 00 FF 
06f24     AC E4 85 F1 | 	sub	objptr, ##38060
06f28                 | _compile_unknown_ret
06f28     2D 00 64 FD | 	ret
06f2c                 | 
06f2c                 | ' 
06f2c                 | ' function compile_fun_2p() as ulong
06f2c                 | _compile_fun_2p
06f2c     01 4A 05 F6 | 	mov	COUNT_, #1
06f30     A8 00 A0 FD | 	call	#pushregs_
06f34     C4 25 B0 FD | 	call	#_expr
06f38                 | ' 
06f38                 | ' expr()
06f38                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06f38     37 00 00 FF 
06f3c     74 E4 05 F1 | 	add	objptr, ##28276
06f40     F2 1E 02 FB | 	rdlong	local01, objptr
06f44     03 1E 66 F0 | 	shl	local01, #3
06f48     02 00 00 FF 
06f4c     38 E4 85 F1 | 	sub	objptr, ##1080
06f50     F2 1E 02 F1 | 	add	local01, objptr
06f54     04 1E 06 F1 | 	add	local01, #4
06f58     0F 1F 02 FB | 	rdlong	local01, local01
06f5c     11 1E 0E F2 | 	cmp	local01, #17 wz
06f60     35 00 00 FF 
06f64     3C E4 85 F1 | 	sub	objptr, ##27196
06f68     15 FA 05 56 |  if_ne	mov	result1, #21
06f6c     24 00 90 5D |  if_ne	jmp	#LR__0630
06f70     37 00 00 FF 
06f74     74 E4 05 F1 | 	add	objptr, ##28276
06f78     F2 1E 02 FB | 	rdlong	local01, objptr
06f7c     01 1E 06 F1 | 	add	local01, #1
06f80     F2 1E 62 FC | 	wrlong	local01, objptr
06f84     37 00 00 FF 
06f88     74 E4 85 F1 | 	sub	objptr, ##28276
06f8c     6C 25 B0 FD | 	call	#_expr
06f90     00 FA 05 F6 | 	mov	result1, #0
06f94                 | LR__0630
06f94     A7 F0 03 F6 | 	mov	ptra, fp
06f98     B2 00 A0 FD | 	call	#popregs_
06f9c                 | _compile_fun_2p_ret
06f9c     2D 00 64 FD | 	ret
06fa0                 | 
06fa0                 | ' 
06fa0                 | ' function compile_fun_3p() as ulong
06fa0                 | _compile_fun_3p
06fa0     01 4A 05 F6 | 	mov	COUNT_, #1
06fa4     A8 00 A0 FD | 	call	#pushregs_
06fa8     50 25 B0 FD | 	call	#_expr
06fac                 | ' 
06fac                 | ' expr()
06fac                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06fac     37 00 00 FF 
06fb0     74 E4 05 F1 | 	add	objptr, ##28276
06fb4     F2 1E 02 FB | 	rdlong	local01, objptr
06fb8     03 1E 66 F0 | 	shl	local01, #3
06fbc     02 00 00 FF 
06fc0     38 E4 85 F1 | 	sub	objptr, ##1080
06fc4     F2 1E 02 F1 | 	add	local01, objptr
06fc8     04 1E 06 F1 | 	add	local01, #4
06fcc     0F 1F 02 FB | 	rdlong	local01, local01
06fd0     11 1E 0E F2 | 	cmp	local01, #17 wz
06fd4     35 00 00 FF 
06fd8     3C E4 85 F1 | 	sub	objptr, ##27196
06fdc     15 FA 05 56 |  if_ne	mov	result1, #21
06fe0     7C 00 90 5D |  if_ne	jmp	#LR__0640
06fe4     37 00 00 FF 
06fe8     74 E4 05 F1 | 	add	objptr, ##28276
06fec     F2 1E 02 FB | 	rdlong	local01, objptr
06ff0     01 1E 06 F1 | 	add	local01, #1
06ff4     F2 1E 62 FC | 	wrlong	local01, objptr
06ff8     37 00 00 FF 
06ffc     74 E4 85 F1 | 	sub	objptr, ##28276
07000     F8 24 B0 FD | 	call	#_expr
07004                 | ' expr()
07004                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07004     37 00 00 FF 
07008     74 E4 05 F1 | 	add	objptr, ##28276
0700c     F2 1E 02 FB | 	rdlong	local01, objptr
07010     03 1E 66 F0 | 	shl	local01, #3
07014     02 00 00 FF 
07018     38 E4 85 F1 | 	sub	objptr, ##1080
0701c     F2 1E 02 F1 | 	add	local01, objptr
07020     04 1E 06 F1 | 	add	local01, #4
07024     0F 1F 02 FB | 	rdlong	local01, local01
07028     11 1E 0E F2 | 	cmp	local01, #17 wz
0702c     35 00 00 FF 
07030     3C E4 85 F1 | 	sub	objptr, ##27196
07034     15 FA 05 56 |  if_ne	mov	result1, #21
07038     24 00 90 5D |  if_ne	jmp	#LR__0640
0703c     37 00 00 FF 
07040     74 E4 05 F1 | 	add	objptr, ##28276
07044     F2 1E 02 FB | 	rdlong	local01, objptr
07048     01 1E 06 F1 | 	add	local01, #1
0704c     F2 1E 62 FC | 	wrlong	local01, objptr
07050     37 00 00 FF 
07054     74 E4 85 F1 | 	sub	objptr, ##28276
07058     A0 24 B0 FD | 	call	#_expr
0705c     00 FA 05 F6 | 	mov	result1, #0
07060                 | LR__0640
07060     A7 F0 03 F6 | 	mov	ptra, fp
07064     B2 00 A0 FD | 	call	#popregs_
07068                 | _compile_fun_3p_ret
07068     2D 00 64 FD | 	ret
0706c                 | 
0706c                 | ' 
0706c                 | ' function compile_fun_4p() as ulong
0706c                 | _compile_fun_4p
0706c     01 4A 05 F6 | 	mov	COUNT_, #1
07070     A8 00 A0 FD | 	call	#pushregs_
07074     84 24 B0 FD | 	call	#_expr
07078                 | ' 
07078                 | ' expr()
07078                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07078     37 00 00 FF 
0707c     74 E4 05 F1 | 	add	objptr, ##28276
07080     F2 1E 02 FB | 	rdlong	local01, objptr
07084     03 1E 66 F0 | 	shl	local01, #3
07088     02 00 00 FF 
0708c     38 E4 85 F1 | 	sub	objptr, ##1080
07090     F2 1E 02 F1 | 	add	local01, objptr
07094     04 1E 06 F1 | 	add	local01, #4
07098     0F 1F 02 FB | 	rdlong	local01, local01
0709c     11 1E 0E F2 | 	cmp	local01, #17 wz
070a0     35 00 00 FF 
070a4     3C E4 85 F1 | 	sub	objptr, ##27196
070a8     15 FA 05 56 |  if_ne	mov	result1, #21
070ac     D4 00 90 5D |  if_ne	jmp	#LR__0650
070b0     37 00 00 FF 
070b4     74 E4 05 F1 | 	add	objptr, ##28276
070b8     F2 1E 02 FB | 	rdlong	local01, objptr
070bc     01 1E 06 F1 | 	add	local01, #1
070c0     F2 1E 62 FC | 	wrlong	local01, objptr
070c4     37 00 00 FF 
070c8     74 E4 85 F1 | 	sub	objptr, ##28276
070cc     2C 24 B0 FD | 	call	#_expr
070d0                 | ' expr()
070d0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
070d0     37 00 00 FF 
070d4     74 E4 05 F1 | 	add	objptr, ##28276
070d8     F2 1E 02 FB | 	rdlong	local01, objptr
070dc     03 1E 66 F0 | 	shl	local01, #3
070e0     02 00 00 FF 
070e4     38 E4 85 F1 | 	sub	objptr, ##1080
070e8     F2 1E 02 F1 | 	add	local01, objptr
070ec     04 1E 06 F1 | 	add	local01, #4
070f0     0F 1F 02 FB | 	rdlong	local01, local01
070f4     11 1E 0E F2 | 	cmp	local01, #17 wz
070f8     35 00 00 FF 
070fc     3C E4 85 F1 | 	sub	objptr, ##27196
07100     15 FA 05 56 |  if_ne	mov	result1, #21
07104     7C 00 90 5D |  if_ne	jmp	#LR__0650
07108     37 00 00 FF 
0710c     74 E4 05 F1 | 	add	objptr, ##28276
07110     F2 1E 02 FB | 	rdlong	local01, objptr
07114     01 1E 06 F1 | 	add	local01, #1
07118     F2 1E 62 FC | 	wrlong	local01, objptr
0711c     37 00 00 FF 
07120     74 E4 85 F1 | 	sub	objptr, ##28276
07124     D4 23 B0 FD | 	call	#_expr
07128                 | ' expr()
07128                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07128     37 00 00 FF 
0712c     74 E4 05 F1 | 	add	objptr, ##28276
07130     F2 1E 02 FB | 	rdlong	local01, objptr
07134     03 1E 66 F0 | 	shl	local01, #3
07138     02 00 00 FF 
0713c     38 E4 85 F1 | 	sub	objptr, ##1080
07140     F2 1E 02 F1 | 	add	local01, objptr
07144     04 1E 06 F1 | 	add	local01, #4
07148     0F 1F 02 FB | 	rdlong	local01, local01
0714c     11 1E 0E F2 | 	cmp	local01, #17 wz
07150     35 00 00 FF 
07154     3C E4 85 F1 | 	sub	objptr, ##27196
07158     15 FA 05 56 |  if_ne	mov	result1, #21
0715c     24 00 90 5D |  if_ne	jmp	#LR__0650
07160     37 00 00 FF 
07164     74 E4 05 F1 | 	add	objptr, ##28276
07168     F2 1E 02 FB | 	rdlong	local01, objptr
0716c     01 1E 06 F1 | 	add	local01, #1
07170     F2 1E 62 FC | 	wrlong	local01, objptr
07174     37 00 00 FF 
07178     74 E4 85 F1 | 	sub	objptr, ##28276
0717c     7C 23 B0 FD | 	call	#_expr
07180     00 FA 05 F6 | 	mov	result1, #0
07184                 | LR__0650
07184     A7 F0 03 F6 | 	mov	ptra, fp
07188     B2 00 A0 FD | 	call	#popregs_
0718c                 | _compile_fun_4p_ret
0718c     2D 00 64 FD | 	ret
07190                 | 
07190                 | ' 
07190                 | ' 
07190                 | ' function compile_fun_5p() as ulong
07190                 | _compile_fun_5p
07190     01 4A 05 F6 | 	mov	COUNT_, #1
07194     A8 00 A0 FD | 	call	#pushregs_
07198     60 23 B0 FD | 	call	#_expr
0719c                 | ' 
0719c                 | ' expr()
0719c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0719c     37 00 00 FF 
071a0     74 E4 05 F1 | 	add	objptr, ##28276
071a4     F2 1E 02 FB | 	rdlong	local01, objptr
071a8     03 1E 66 F0 | 	shl	local01, #3
071ac     02 00 00 FF 
071b0     38 E4 85 F1 | 	sub	objptr, ##1080
071b4     F2 1E 02 F1 | 	add	local01, objptr
071b8     04 1E 06 F1 | 	add	local01, #4
071bc     0F 1F 02 FB | 	rdlong	local01, local01
071c0     11 1E 0E F2 | 	cmp	local01, #17 wz
071c4     35 00 00 FF 
071c8     3C E4 85 F1 | 	sub	objptr, ##27196
071cc     15 FA 05 56 |  if_ne	mov	result1, #21
071d0     2C 01 90 5D |  if_ne	jmp	#LR__0660
071d4     37 00 00 FF 
071d8     74 E4 05 F1 | 	add	objptr, ##28276
071dc     F2 1E 02 FB | 	rdlong	local01, objptr
071e0     01 1E 06 F1 | 	add	local01, #1
071e4     F2 1E 62 FC | 	wrlong	local01, objptr
071e8     37 00 00 FF 
071ec     74 E4 85 F1 | 	sub	objptr, ##28276
071f0     08 23 B0 FD | 	call	#_expr
071f4                 | ' expr()
071f4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
071f4     37 00 00 FF 
071f8     74 E4 05 F1 | 	add	objptr, ##28276
071fc     F2 1E 02 FB | 	rdlong	local01, objptr
07200     03 1E 66 F0 | 	shl	local01, #3
07204     02 00 00 FF 
07208     38 E4 85 F1 | 	sub	objptr, ##1080
0720c     F2 1E 02 F1 | 	add	local01, objptr
07210     04 1E 06 F1 | 	add	local01, #4
07214     0F 1F 02 FB | 	rdlong	local01, local01
07218     11 1E 0E F2 | 	cmp	local01, #17 wz
0721c     35 00 00 FF 
07220     3C E4 85 F1 | 	sub	objptr, ##27196
07224     15 FA 05 56 |  if_ne	mov	result1, #21
07228     D4 00 90 5D |  if_ne	jmp	#LR__0660
0722c     37 00 00 FF 
07230     74 E4 05 F1 | 	add	objptr, ##28276
07234     F2 1E 02 FB | 	rdlong	local01, objptr
07238     01 1E 06 F1 | 	add	local01, #1
0723c     F2 1E 62 FC | 	wrlong	local01, objptr
07240     37 00 00 FF 
07244     74 E4 85 F1 | 	sub	objptr, ##28276
07248     B0 22 B0 FD | 	call	#_expr
0724c                 | ' expr()
0724c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0724c     37 00 00 FF 
07250     74 E4 05 F1 | 	add	objptr, ##28276
07254     F2 1E 02 FB | 	rdlong	local01, objptr
07258     03 1E 66 F0 | 	shl	local01, #3
0725c     02 00 00 FF 
07260     38 E4 85 F1 | 	sub	objptr, ##1080
07264     F2 1E 02 F1 | 	add	local01, objptr
07268     04 1E 06 F1 | 	add	local01, #4
0726c     0F 1F 02 FB | 	rdlong	local01, local01
07270     11 1E 0E F2 | 	cmp	local01, #17 wz
07274     35 00 00 FF 
07278     3C E4 85 F1 | 	sub	objptr, ##27196
0727c     15 FA 05 56 |  if_ne	mov	result1, #21
07280     7C 00 90 5D |  if_ne	jmp	#LR__0660
07284     37 00 00 FF 
07288     74 E4 05 F1 | 	add	objptr, ##28276
0728c     F2 1E 02 FB | 	rdlong	local01, objptr
07290     01 1E 06 F1 | 	add	local01, #1
07294     F2 1E 62 FC | 	wrlong	local01, objptr
07298     37 00 00 FF 
0729c     74 E4 85 F1 | 	sub	objptr, ##28276
072a0     58 22 B0 FD | 	call	#_expr
072a4                 | ' expr()
072a4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
072a4     37 00 00 FF 
072a8     74 E4 05 F1 | 	add	objptr, ##28276
072ac     F2 1E 02 FB | 	rdlong	local01, objptr
072b0     03 1E 66 F0 | 	shl	local01, #3
072b4     02 00 00 FF 
072b8     38 E4 85 F1 | 	sub	objptr, ##1080
072bc     F2 1E 02 F1 | 	add	local01, objptr
072c0     04 1E 06 F1 | 	add	local01, #4
072c4     0F 1F 02 FB | 	rdlong	local01, local01
072c8     11 1E 0E F2 | 	cmp	local01, #17 wz
072cc     35 00 00 FF 
072d0     3C E4 85 F1 | 	sub	objptr, ##27196
072d4     15 FA 05 56 |  if_ne	mov	result1, #21
072d8     24 00 90 5D |  if_ne	jmp	#LR__0660
072dc     37 00 00 FF 
072e0     74 E4 05 F1 | 	add	objptr, ##28276
072e4     F2 1E 02 FB | 	rdlong	local01, objptr
072e8     01 1E 06 F1 | 	add	local01, #1
072ec     F2 1E 62 FC | 	wrlong	local01, objptr
072f0     37 00 00 FF 
072f4     74 E4 85 F1 | 	sub	objptr, ##28276
072f8     00 22 B0 FD | 	call	#_expr
072fc     00 FA 05 F6 | 	mov	result1, #0
07300                 | LR__0660
07300     A7 F0 03 F6 | 	mov	ptra, fp
07304     B2 00 A0 FD | 	call	#popregs_
07308                 | _compile_fun_5p_ret
07308     2D 00 64 FD | 	ret
0730c                 | 
0730c                 | ' 
0730c                 | ' function compile_fun_varp() as ulong 
0730c                 | _compile_fun_varp
0730c     02 4A 05 F6 | 	mov	COUNT_, #2
07310     A8 00 A0 FD | 	call	#pushregs_
07314     00 1E 06 F6 | 	mov	local01, #0
07318                 | ' i=0
07318                 | ' if lparts(ct).token<>token_end then
07318     37 00 00 FF 
0731c     74 E4 05 F1 | 	add	objptr, ##28276
07320     F2 20 02 FB | 	rdlong	local02, objptr
07324     03 20 66 F0 | 	shl	local02, #3
07328     02 00 00 FF 
0732c     38 E4 85 F1 | 	sub	objptr, ##1080
07330     F2 20 02 F1 | 	add	local02, objptr
07334     04 20 06 F1 | 	add	local02, #4
07338     10 21 02 FB | 	rdlong	local02, local02
0733c     FE 21 0E F2 | 	cmp	local02, #510 wz
07340     35 00 00 FF 
07344     3C E4 85 F1 | 	sub	objptr, ##27196
07348     5C 00 90 AD |  if_e	jmp	#LR__0672
0734c                 | '   do
0734c                 | LR__0670
0734c     AC 21 B0 FD | 	call	#_expr
07350     01 1E 06 F1 | 	add	local01, #1
07354                 | '   expr()
07354                 | '    i+=1
07354                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
07354     37 00 00 FF 
07358     74 E4 05 F1 | 	add	objptr, ##28276
0735c     F2 20 02 FB | 	rdlong	local02, objptr
07360     03 20 66 F0 | 	shl	local02, #3
07364     02 00 00 FF 
07368     38 E4 85 F1 | 	sub	objptr, ##1080
0736c     F2 20 02 F1 | 	add	local02, objptr
07370     04 20 06 F1 | 	add	local02, #4
07374     10 21 02 FB | 	rdlong	local02, local02
07378     11 20 0E F2 | 	cmp	local02, #17 wz
0737c     35 00 00 FF 
07380     3C E4 85 F1 | 	sub	objptr, ##27196
07384     20 00 90 5D |  if_ne	jmp	#LR__0671
07388     37 00 00 FF 
0738c     74 E4 05 F1 | 	add	objptr, ##28276
07390     F2 20 02 FB | 	rdlong	local02, objptr
07394     01 20 06 F1 | 	add	local02, #1
07398     F2 20 62 FC | 	wrlong	local02, objptr
0739c     37 00 00 FF 
073a0     74 E4 85 F1 | 	sub	objptr, ##28276
073a4     A4 FF 9F FD | 	jmp	#LR__0670
073a8                 | LR__0671
073a8                 | LR__0672
073a8                 | ' return i
073a8     0F FB 01 F6 | 	mov	result1, local01
073ac     A7 F0 03 F6 | 	mov	ptra, fp
073b0     B2 00 A0 FD | 	call	#popregs_
073b4                 | _compile_fun_varp_ret
073b4     2D 00 64 FD | 	ret
073b8                 | 
073b8                 | ' 
073b8                 | ' 
073b8                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
073b8                 | _compile_print
073b8     0B 4A 05 F6 | 	mov	COUNT_, #11
073bc     A8 00 A0 FD | 	call	#pushregs_
073c0     00 1E 06 F6 | 	mov	local01, #0
073c4     1D 22 06 F6 | 	mov	local03, #29
073c8                 | ' t1.result.uresult=0 : t1.result_type=result_uint
073c8                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
073c8     37 00 00 FF 
073cc     74 E4 05 F1 | 	add	objptr, ##28276
073d0     F2 24 02 FB | 	rdlong	local04, objptr
073d4     03 24 66 F0 | 	shl	local04, #3
073d8     02 00 00 FF 
073dc     38 E4 85 F1 | 	sub	objptr, ##1080
073e0     F2 24 02 F1 | 	add	local04, objptr
073e4     04 24 06 F1 | 	add	local04, #4
073e8     12 25 02 FB | 	rdlong	local04, local04
073ec     FE 25 0E F2 | 	cmp	local04, #510 wz
073f0     35 00 00 FF 
073f4     3C E4 85 F1 | 	sub	objptr, ##27196
073f8     68 01 90 5D |  if_ne	jmp	#LR__0680
073fc     20 22 06 F6 | 	mov	local03, #32
07400     0F 27 02 F6 | 	mov	local05, local01
07404     10 29 02 F6 | 	mov	local06, local02
07408     11 2B 02 F6 | 	mov	local07, local03
0740c     4A 00 00 FF 
07410     AC E4 05 F1 | 	add	objptr, ##38060
07414     F2 2C 02 FB | 	rdlong	local08, objptr
07418     16 2F 02 F6 | 	mov	local09, local08
0741c     01 2E 66 F0 | 	shl	local09, #1
07420     16 2F 02 F1 | 	add	local09, local08
07424     02 2E 66 F0 | 	shl	local09, #2
07428     03 00 00 FF 
0742c     00 E4 85 F1 | 	sub	objptr, ##1536
07430     F2 2E 02 F1 | 	add	local09, objptr
07434     17 27 62 FC | 	wrlong	local05, local09
07438     03 00 00 FF 
0743c     00 E4 05 F1 | 	add	objptr, ##1536
07440     F2 26 02 FB | 	rdlong	local05, objptr
07444     13 31 02 F6 | 	mov	local10, local05
07448     01 30 66 F0 | 	shl	local10, #1
0744c     13 31 02 F1 | 	add	local10, local05
07450     02 30 66 F0 | 	shl	local10, #2
07454     03 00 00 FF 
07458     00 E4 85 F1 | 	sub	objptr, ##1536
0745c     F2 30 02 F1 | 	add	local10, objptr
07460     04 30 06 F1 | 	add	local10, #4
07464     18 29 62 FC | 	wrlong	local06, local10
07468     03 00 00 FF 
0746c     00 E4 05 F1 | 	add	objptr, ##1536
07470     F2 26 02 FB | 	rdlong	local05, objptr
07474     13 33 02 F6 | 	mov	local11, local05
07478     01 32 66 F0 | 	shl	local11, #1
0747c     13 33 02 F1 | 	add	local11, local05
07480     02 32 66 F0 | 	shl	local11, #2
07484     03 00 00 FF 
07488     00 E4 85 F1 | 	sub	objptr, ##1536
0748c     F2 32 02 F1 | 	add	local11, objptr
07490     08 32 06 F1 | 	add	local11, #8
07494     19 2B 62 FC | 	wrlong	local07, local11
07498     03 00 00 FF 
0749c     00 E4 05 F1 | 	add	objptr, ##1536
074a0     F2 26 02 FB | 	rdlong	local05, objptr
074a4     01 26 06 F1 | 	add	local05, #1
074a8     F2 26 62 FC | 	wrlong	local05, objptr
074ac     44 22 06 F6 | 	mov	local03, #68
074b0     0F 27 02 F6 | 	mov	local05, local01
074b4     10 29 02 F6 | 	mov	local06, local02
074b8     11 2B 02 F6 | 	mov	local07, local03
074bc     F2 2C 02 FB | 	rdlong	local08, objptr
074c0     16 2F 02 F6 | 	mov	local09, local08
074c4     01 2E 66 F0 | 	shl	local09, #1
074c8     16 2F 02 F1 | 	add	local09, local08
074cc     02 2E 66 F0 | 	shl	local09, #2
074d0     03 00 00 FF 
074d4     00 E4 85 F1 | 	sub	objptr, ##1536
074d8     F2 2E 02 F1 | 	add	local09, objptr
074dc     17 27 62 FC | 	wrlong	local05, local09
074e0     03 00 00 FF 
074e4     00 E4 05 F1 | 	add	objptr, ##1536
074e8     F2 32 02 FB | 	rdlong	local11, objptr
074ec     19 31 02 F6 | 	mov	local10, local11
074f0     01 30 66 F0 | 	shl	local10, #1
074f4     19 31 02 F1 | 	add	local10, local11
074f8     02 30 66 F0 | 	shl	local10, #2
074fc     03 00 00 FF 
07500     00 E4 85 F1 | 	sub	objptr, ##1536
07504     F2 30 02 F1 | 	add	local10, objptr
07508     04 30 06 F1 | 	add	local10, #4
0750c     18 29 62 FC | 	wrlong	local06, local10
07510     03 00 00 FF 
07514     00 E4 05 F1 | 	add	objptr, ##1536
07518     F2 30 02 FB | 	rdlong	local10, objptr
0751c     18 33 02 F6 | 	mov	local11, local10
07520     01 32 66 F0 | 	shl	local11, #1
07524     18 33 02 F1 | 	add	local11, local10
07528     02 32 66 F0 | 	shl	local11, #2
0752c     03 00 00 FF 
07530     00 E4 85 F1 | 	sub	objptr, ##1536
07534     F2 32 02 F1 | 	add	local11, objptr
07538     08 32 06 F1 | 	add	local11, #8
0753c     19 2B 62 FC | 	wrlong	local07, local11
07540     03 00 00 FF 
07544     00 E4 05 F1 | 	add	objptr, ##1536
07548     F2 26 02 FB | 	rdlong	local05, objptr
0754c     01 26 06 F1 | 	add	local05, #1
07550     F2 26 62 FC | 	wrlong	local05, objptr
07554     4A 00 00 FF 
07558     AC E4 85 F1 | 	sub	objptr, ##38060
0755c     00 FA 05 F6 | 	mov	result1, #0
07560     20 05 90 FD | 	jmp	#LR__0687
07564                 | LR__0680
07564                 | ' do
07564                 | LR__0681
07564     94 1F B0 FD | 	call	#_expr
07568                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
07568                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
07568     37 00 00 FF 
0756c     74 E4 05 F1 | 	add	objptr, ##28276
07570     F2 24 02 FB | 	rdlong	local04, objptr
07574     03 24 66 F0 | 	shl	local04, #3
07578     02 00 00 FF 
0757c     38 E4 85 F1 | 	sub	objptr, ##1080
07580     F2 24 02 F1 | 	add	local04, objptr
07584     04 24 06 F1 | 	add	local04, #4
07588     12 2D 02 FB | 	rdlong	local08, local04
0758c     11 2C 0E F2 | 	cmp	local08, #17 wz
07590     35 00 00 FF 
07594     3C E4 85 F1 | 	sub	objptr, ##27196
07598     60 01 90 5D |  if_ne	jmp	#LR__0682
0759c     21 22 06 F6 | 	mov	local03, #33
075a0     0F 27 02 F6 | 	mov	local05, local01
075a4     10 29 02 F6 | 	mov	local06, local02
075a8     11 2B 02 F6 | 	mov	local07, local03
075ac     4A 00 00 FF 
075b0     AC E4 05 F1 | 	add	objptr, ##38060
075b4     F2 2C 02 FB | 	rdlong	local08, objptr
075b8     16 2F 02 F6 | 	mov	local09, local08
075bc     01 2E 66 F0 | 	shl	local09, #1
075c0     16 2F 02 F1 | 	add	local09, local08
075c4     02 2E 66 F0 | 	shl	local09, #2
075c8     03 00 00 FF 
075cc     00 E4 85 F1 | 	sub	objptr, ##1536
075d0     F2 2E 02 F1 | 	add	local09, objptr
075d4     17 27 62 FC | 	wrlong	local05, local09
075d8     03 00 00 FF 
075dc     00 E4 05 F1 | 	add	objptr, ##1536
075e0     F2 32 02 FB | 	rdlong	local11, objptr
075e4     19 31 02 F6 | 	mov	local10, local11
075e8     01 30 66 F0 | 	shl	local10, #1
075ec     19 31 02 F1 | 	add	local10, local11
075f0     02 30 66 F0 | 	shl	local10, #2
075f4     03 00 00 FF 
075f8     00 E4 85 F1 | 	sub	objptr, ##1536
075fc     F2 30 02 F1 | 	add	local10, objptr
07600     04 30 06 F1 | 	add	local10, #4
07604     18 29 62 FC | 	wrlong	local06, local10
07608     03 00 00 FF 
0760c     00 E4 05 F1 | 	add	objptr, ##1536
07610     F2 26 02 FB | 	rdlong	local05, objptr
07614     13 33 02 F6 | 	mov	local11, local05
07618     01 32 66 F0 | 	shl	local11, #1
0761c     13 33 02 F1 | 	add	local11, local05
07620     02 32 66 F0 | 	shl	local11, #2
07624     03 00 00 FF 
07628     00 E4 85 F1 | 	sub	objptr, ##1536
0762c     F2 32 02 F1 | 	add	local11, objptr
07630     08 32 06 F1 | 	add	local11, #8
07634     19 2B 62 FC | 	wrlong	local07, local11
07638     03 00 00 FF 
0763c     00 E4 05 F1 | 	add	objptr, ##1536
07640     F2 26 02 FB | 	rdlong	local05, objptr
07644     01 26 06 F1 | 	add	local05, #1
07648     F2 26 62 FC | 	wrlong	local05, objptr
0764c     44 22 06 F6 | 	mov	local03, #68
07650     0F 27 02 F6 | 	mov	local05, local01
07654     10 29 02 F6 | 	mov	local06, local02
07658     11 2B 02 F6 | 	mov	local07, local03
0765c     F2 2C 02 FB | 	rdlong	local08, objptr
07660     16 2F 02 F6 | 	mov	local09, local08
07664     01 2E 66 F0 | 	shl	local09, #1
07668     16 2F 02 F1 | 	add	local09, local08
0766c     02 2E 66 F0 | 	shl	local09, #2
07670     03 00 00 FF 
07674     00 E4 85 F1 | 	sub	objptr, ##1536
07678     F2 2E 02 F1 | 	add	local09, objptr
0767c     17 27 62 FC | 	wrlong	local05, local09
07680     03 00 00 FF 
07684     00 E4 05 F1 | 	add	objptr, ##1536
07688     F2 32 02 FB | 	rdlong	local11, objptr
0768c     19 31 02 F6 | 	mov	local10, local11
07690     01 30 66 F0 | 	shl	local10, #1
07694     19 31 02 F1 | 	add	local10, local11
07698     02 30 66 F0 | 	shl	local10, #2
0769c     03 00 00 FF 
076a0     00 E4 85 F1 | 	sub	objptr, ##1536
076a4     F2 30 02 F1 | 	add	local10, objptr
076a8     04 30 06 F1 | 	add	local10, #4
076ac     18 29 62 FC | 	wrlong	local06, local10
076b0     03 00 00 FF 
076b4     00 E4 05 F1 | 	add	objptr, ##1536
076b8     F2 30 02 FB | 	rdlong	local10, objptr
076bc     18 33 02 F6 | 	mov	local11, local10
076c0     01 32 66 F0 | 	shl	local11, #1
076c4     18 33 02 F1 | 	add	local11, local10
076c8     02 32 66 F0 | 	shl	local11, #2
076cc     03 00 00 FF 
076d0     00 E4 85 F1 | 	sub	objptr, ##1536
076d4     F2 32 02 F1 | 	add	local11, objptr
076d8     08 32 06 F1 | 	add	local11, #8
076dc     19 2B 62 FC | 	wrlong	local07, local11
076e0     03 00 00 FF 
076e4     00 E4 05 F1 | 	add	objptr, ##1536
076e8     F2 26 02 FB | 	rdlong	local05, objptr
076ec     01 26 06 F1 | 	add	local05, #1
076f0     F2 26 62 FC | 	wrlong	local05, objptr
076f4     4A 00 00 FF 
076f8     AC E4 85 F1 | 	sub	objptr, ##38060
076fc                 | LR__0682
076fc                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
076fc     37 00 00 FF 
07700     74 E4 05 F1 | 	add	objptr, ##28276
07704     F2 24 02 FB | 	rdlong	local04, objptr
07708     03 24 66 F0 | 	shl	local04, #3
0770c     02 00 00 FF 
07710     38 E4 85 F1 | 	sub	objptr, ##1080
07714     F2 24 02 F1 | 	add	local04, objptr
07718     04 24 06 F1 | 	add	local04, #4
0771c     12 2D 02 FB | 	rdlong	local08, local04
07720     12 2C 0E F2 | 	cmp	local08, #18 wz
07724     35 00 00 FF 
07728     3C E4 85 F1 | 	sub	objptr, ##27196
0772c     60 01 90 5D |  if_ne	jmp	#LR__0683
07730     22 22 06 F6 | 	mov	local03, #34
07734     0F 27 02 F6 | 	mov	local05, local01
07738     10 29 02 F6 | 	mov	local06, local02
0773c     11 2B 02 F6 | 	mov	local07, local03
07740     4A 00 00 FF 
07744     AC E4 05 F1 | 	add	objptr, ##38060
07748     F2 2C 02 FB | 	rdlong	local08, objptr
0774c     16 2F 02 F6 | 	mov	local09, local08
07750     01 2E 66 F0 | 	shl	local09, #1
07754     16 2F 02 F1 | 	add	local09, local08
07758     02 2E 66 F0 | 	shl	local09, #2
0775c     03 00 00 FF 
07760     00 E4 85 F1 | 	sub	objptr, ##1536
07764     F2 2E 02 F1 | 	add	local09, objptr
07768     17 27 62 FC | 	wrlong	local05, local09
0776c     03 00 00 FF 
07770     00 E4 05 F1 | 	add	objptr, ##1536
07774     F2 32 02 FB | 	rdlong	local11, objptr
07778     19 31 02 F6 | 	mov	local10, local11
0777c     01 30 66 F0 | 	shl	local10, #1
07780     19 31 02 F1 | 	add	local10, local11
07784     02 30 66 F0 | 	shl	local10, #2
07788     03 00 00 FF 
0778c     00 E4 85 F1 | 	sub	objptr, ##1536
07790     F2 30 02 F1 | 	add	local10, objptr
07794     04 30 06 F1 | 	add	local10, #4
07798     18 29 62 FC | 	wrlong	local06, local10
0779c     03 00 00 FF 
077a0     00 E4 05 F1 | 	add	objptr, ##1536
077a4     F2 26 02 FB | 	rdlong	local05, objptr
077a8     13 33 02 F6 | 	mov	local11, local05
077ac     01 32 66 F0 | 	shl	local11, #1
077b0     13 33 02 F1 | 	add	local11, local05
077b4     02 32 66 F0 | 	shl	local11, #2
077b8     03 00 00 FF 
077bc     00 E4 85 F1 | 	sub	objptr, ##1536
077c0     F2 32 02 F1 | 	add	local11, objptr
077c4     08 32 06 F1 | 	add	local11, #8
077c8     19 2B 62 FC | 	wrlong	local07, local11
077cc     03 00 00 FF 
077d0     00 E4 05 F1 | 	add	objptr, ##1536
077d4     F2 26 02 FB | 	rdlong	local05, objptr
077d8     01 26 06 F1 | 	add	local05, #1
077dc     F2 26 62 FC | 	wrlong	local05, objptr
077e0     44 22 06 F6 | 	mov	local03, #68
077e4     0F 27 02 F6 | 	mov	local05, local01
077e8     10 29 02 F6 | 	mov	local06, local02
077ec     11 2B 02 F6 | 	mov	local07, local03
077f0     F2 2C 02 FB | 	rdlong	local08, objptr
077f4     16 2F 02 F6 | 	mov	local09, local08
077f8     01 2E 66 F0 | 	shl	local09, #1
077fc     16 2F 02 F1 | 	add	local09, local08
07800     02 2E 66 F0 | 	shl	local09, #2
07804     03 00 00 FF 
07808     00 E4 85 F1 | 	sub	objptr, ##1536
0780c     F2 2E 02 F1 | 	add	local09, objptr
07810     17 27 62 FC | 	wrlong	local05, local09
07814     03 00 00 FF 
07818     00 E4 05 F1 | 	add	objptr, ##1536
0781c     F2 32 02 FB | 	rdlong	local11, objptr
07820     19 31 02 F6 | 	mov	local10, local11
07824     01 30 66 F0 | 	shl	local10, #1
07828     19 31 02 F1 | 	add	local10, local11
0782c     02 30 66 F0 | 	shl	local10, #2
07830     03 00 00 FF 
07834     00 E4 85 F1 | 	sub	objptr, ##1536
07838     F2 30 02 F1 | 	add	local10, objptr
0783c     04 30 06 F1 | 	add	local10, #4
07840     18 29 62 FC | 	wrlong	local06, local10
07844     03 00 00 FF 
07848     00 E4 05 F1 | 	add	objptr, ##1536
0784c     F2 30 02 FB | 	rdlong	local10, objptr
07850     18 33 02 F6 | 	mov	local11, local10
07854     01 32 66 F0 | 	shl	local11, #1
07858     18 33 02 F1 | 	add	local11, local10
0785c     02 32 66 F0 | 	shl	local11, #2
07860     03 00 00 FF 
07864     00 E4 85 F1 | 	sub	objptr, ##1536
07868     F2 32 02 F1 | 	add	local11, objptr
0786c     08 32 06 F1 | 	add	local11, #8
07870     19 2B 62 FC | 	wrlong	local07, local11
07874     03 00 00 FF 
07878     00 E4 05 F1 | 	add	objptr, ##1536
0787c     F2 26 02 FB | 	rdlong	local05, objptr
07880     01 26 06 F1 | 	add	local05, #1
07884     F2 26 62 FC | 	wrlong	local05, objptr
07888     4A 00 00 FF 
0788c     AC E4 85 F1 | 	sub	objptr, ##38060
07890                 | LR__0683
07890                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
07890     37 00 00 FF 
07894     74 E4 05 F1 | 	add	objptr, ##28276
07898     F2 24 02 FB | 	rdlong	local04, objptr
0789c     03 24 66 F0 | 	shl	local04, #3
078a0     02 00 00 FF 
078a4     38 E4 85 F1 | 	sub	objptr, ##1080
078a8     F2 24 02 F1 | 	add	local04, objptr
078ac     04 24 06 F1 | 	add	local04, #4
078b0     12 2D 02 FB | 	rdlong	local08, local04
078b4     FE 2D 0E F2 | 	cmp	local08, #510 wz
078b8     35 00 00 FF 
078bc     3C E4 85 F1 | 	sub	objptr, ##27196
078c0     B8 00 90 5D |  if_ne	jmp	#LR__0684
078c4     44 22 06 F6 | 	mov	local03, #68
078c8     0F 27 02 F6 | 	mov	local05, local01
078cc     10 29 02 F6 | 	mov	local06, local02
078d0     11 2B 02 F6 | 	mov	local07, local03
078d4     4A 00 00 FF 
078d8     AC E4 05 F1 | 	add	objptr, ##38060
078dc     F2 2C 02 FB | 	rdlong	local08, objptr
078e0     16 2F 02 F6 | 	mov	local09, local08
078e4     01 2E 66 F0 | 	shl	local09, #1
078e8     16 2F 02 F1 | 	add	local09, local08
078ec     02 2E 66 F0 | 	shl	local09, #2
078f0     03 00 00 FF 
078f4     00 E4 85 F1 | 	sub	objptr, ##1536
078f8     F2 2E 02 F1 | 	add	local09, objptr
078fc     17 27 62 FC | 	wrlong	local05, local09
07900     03 00 00 FF 
07904     00 E4 05 F1 | 	add	objptr, ##1536
07908     F2 32 02 FB | 	rdlong	local11, objptr
0790c     19 31 02 F6 | 	mov	local10, local11
07910     01 30 66 F0 | 	shl	local10, #1
07914     19 31 02 F1 | 	add	local10, local11
07918     02 30 66 F0 | 	shl	local10, #2
0791c     03 00 00 FF 
07920     00 E4 85 F1 | 	sub	objptr, ##1536
07924     F2 30 02 F1 | 	add	local10, objptr
07928     04 30 06 F1 | 	add	local10, #4
0792c     18 29 62 FC | 	wrlong	local06, local10
07930     03 00 00 FF 
07934     00 E4 05 F1 | 	add	objptr, ##1536
07938     F2 30 02 FB | 	rdlong	local10, objptr
0793c     18 33 02 F6 | 	mov	local11, local10
07940     01 32 66 F0 | 	shl	local11, #1
07944     18 33 02 F1 | 	add	local11, local10
07948     02 32 66 F0 | 	shl	local11, #2
0794c     03 00 00 FF 
07950     00 E4 85 F1 | 	sub	objptr, ##1536
07954     F2 32 02 F1 | 	add	local11, objptr
07958     08 32 06 F1 | 	add	local11, #8
0795c     19 2B 62 FC | 	wrlong	local07, local11
07960     03 00 00 FF 
07964     00 E4 05 F1 | 	add	objptr, ##1536
07968     F2 26 02 FB | 	rdlong	local05, objptr
0796c     01 26 06 F1 | 	add	local05, #1
07970     F2 26 62 FC | 	wrlong	local05, objptr
07974     4A 00 00 FF 
07978     AC E4 85 F1 | 	sub	objptr, ##38060
0797c                 | LR__0684
0797c                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
0797c     37 00 00 FF 
07980     74 E4 05 F1 | 	add	objptr, ##28276
07984     F2 24 02 FB | 	rdlong	local04, objptr
07988     03 24 66 F0 | 	shl	local04, #3
0798c     02 00 00 FF 
07990     38 E4 85 F1 | 	sub	objptr, ##1080
07994     F2 24 02 F1 | 	add	local04, objptr
07998     04 24 06 F1 | 	add	local04, #4
0799c     12 2D 02 FB | 	rdlong	local08, local04
079a0     11 2C 0E F2 | 	cmp	local08, #17 wz
079a4     35 00 00 FF 
079a8     3C E4 85 F1 | 	sub	objptr, ##27196
079ac     6C 00 90 AD |  if_e	jmp	#LR__0685
079b0     37 00 00 FF 
079b4     74 E4 05 F1 | 	add	objptr, ##28276
079b8     F2 2C 02 FB | 	rdlong	local08, objptr
079bc     03 2C 66 F0 | 	shl	local08, #3
079c0     02 00 00 FF 
079c4     38 E4 85 F1 | 	sub	objptr, ##1080
079c8     F2 2C 02 F1 | 	add	local08, objptr
079cc     04 2C 06 F1 | 	add	local08, #4
079d0     16 2D 02 FB | 	rdlong	local08, local08
079d4     12 2C 0E F2 | 	cmp	local08, #18 wz
079d8     35 00 00 FF 
079dc     3C E4 85 F1 | 	sub	objptr, ##27196
079e0     38 00 90 AD |  if_e	jmp	#LR__0685
079e4     37 00 00 FF 
079e8     74 E4 05 F1 | 	add	objptr, ##28276
079ec     F2 32 02 FB | 	rdlong	local11, objptr
079f0     03 32 66 F0 | 	shl	local11, #3
079f4     02 00 00 FF 
079f8     38 E4 85 F1 | 	sub	objptr, ##1080
079fc     F2 32 02 F1 | 	add	local11, objptr
07a00     04 32 06 F1 | 	add	local11, #4
07a04     19 33 02 FB | 	rdlong	local11, local11
07a08     FE 33 0E F2 | 	cmp	local11, #510 wz
07a0c     35 00 00 FF 
07a10     3C E4 85 F1 | 	sub	objptr, ##27196
07a14     16 FA 05 56 |  if_ne	mov	result1, #22
07a18     68 00 90 5D |  if_ne	jmp	#LR__0687
07a1c                 | LR__0685
07a1c     37 00 00 FF 
07a20     74 E4 05 F1 | 	add	objptr, ##28276
07a24     F2 24 02 FB | 	rdlong	local04, objptr
07a28     01 24 06 F1 | 	add	local04, #1
07a2c     F2 24 62 FC | 	wrlong	local04, objptr
07a30     03 24 66 F0 | 	shl	local04, #3
07a34     02 00 00 FF 
07a38     38 E4 85 F1 | 	sub	objptr, ##1080
07a3c     F2 24 02 F1 | 	add	local04, objptr
07a40     04 24 06 F1 | 	add	local04, #4
07a44     12 2D 02 FB | 	rdlong	local08, local04
07a48     FE 2D 0E F2 | 	cmp	local08, #510 wz
07a4c     35 00 00 FF 
07a50     3C E4 85 F1 | 	sub	objptr, ##27196
07a54     28 00 90 AD |  if_e	jmp	#LR__0686
07a58     37 00 00 FF 
07a5c     74 E4 05 F1 | 	add	objptr, ##28276
07a60     F2 32 02 FB | 	rdlong	local11, objptr
07a64     0E 00 00 FF 
07a68     1C E4 05 F1 | 	add	objptr, ##7196
07a6c     F2 30 02 FB | 	rdlong	local10, objptr
07a70     45 00 00 FF 
07a74     90 E4 85 F1 | 	sub	objptr, ##35472
07a78     18 33 52 F2 | 	cmps	local11, local10 wc
07a7c     E4 FA 9F CD |  if_b	jmp	#LR__0681
07a80                 | LR__0686
07a80                 | ' return 0
07a80     00 FA 05 F6 | 	mov	result1, #0
07a84                 | LR__0687
07a84     A7 F0 03 F6 | 	mov	ptra, fp
07a88     B2 00 A0 FD | 	call	#popregs_
07a8c                 | _compile_print_ret
07a8c     2D 00 64 FD | 	ret
07a90                 | 
07a90                 | ' 
07a90                 | ' function compile_if() as ulong  
07a90                 | _compile_if
07a90     05 4A 05 F6 | 	mov	COUNT_, #5
07a94     A8 00 A0 FD | 	call	#pushregs_
07a98                 | _compile_if_enter
07a98     60 1A B0 FD | 	call	#_expr
07a9c                 | ' expr()
07a9c                 | ' return 0
07a9c     37 00 00 FF 
07aa0     74 E4 05 F1 | 	add	objptr, ##28276
07aa4     F2 FA 01 FB | 	rdlong	result1, objptr
07aa8     01 FA 05 F1 | 	add	result1, #1
07aac     F2 FA 61 FC | 	wrlong	result1, objptr
07ab0     58 22 06 F6 | 	mov	local03, #88
07ab4     0F 25 02 F6 | 	mov	local04, local01
07ab8     10 27 02 F6 | 	mov	local05, local02
07abc     11 1F 02 F6 | 	mov	local01, local03
07ac0     13 00 00 FF 
07ac4     38 E4 05 F1 | 	add	objptr, ##9784
07ac8     F2 12 02 FB | 	rdlong	arg01, objptr
07acc     09 FB 01 F6 | 	mov	result1, arg01
07ad0     01 FA 65 F0 | 	shl	result1, #1
07ad4     09 FB 01 F1 | 	add	result1, arg01
07ad8     02 FA 65 F0 | 	shl	result1, #2
07adc     03 00 00 FF 
07ae0     00 E4 85 F1 | 	sub	objptr, ##1536
07ae4     F2 FA 01 F1 | 	add	result1, objptr
07ae8     FD 24 62 FC | 	wrlong	local04, result1
07aec     03 00 00 FF 
07af0     00 E4 05 F1 | 	add	objptr, ##1536
07af4     F2 12 02 FB | 	rdlong	arg01, objptr
07af8     09 25 02 F6 | 	mov	local04, arg01
07afc     01 24 66 F0 | 	shl	local04, #1
07b00     09 25 02 F1 | 	add	local04, arg01
07b04     02 24 66 F0 | 	shl	local04, #2
07b08     03 00 00 FF 
07b0c     00 E4 85 F1 | 	sub	objptr, ##1536
07b10     F2 24 02 F1 | 	add	local04, objptr
07b14     04 24 06 F1 | 	add	local04, #4
07b18     12 27 62 FC | 	wrlong	local05, local04
07b1c     03 00 00 FF 
07b20     00 E4 05 F1 | 	add	objptr, ##1536
07b24     F2 24 02 FB | 	rdlong	local04, objptr
07b28     12 27 02 F6 | 	mov	local05, local04
07b2c     01 26 66 F0 | 	shl	local05, #1
07b30     12 27 02 F1 | 	add	local05, local04
07b34     02 26 66 F0 | 	shl	local05, #2
07b38     03 00 00 FF 
07b3c     00 E4 85 F1 | 	sub	objptr, ##1536
07b40     F2 26 02 F1 | 	add	local05, objptr
07b44     08 26 06 F1 | 	add	local05, #8
07b48     13 1F 62 FC | 	wrlong	local01, local05
07b4c     03 00 00 FF 
07b50     00 E4 05 F1 | 	add	objptr, ##1536
07b54     F2 24 02 FB | 	rdlong	local04, objptr
07b58     01 24 06 F1 | 	add	local04, #1
07b5c     F2 24 62 FC | 	wrlong	local04, objptr
07b60                 | ' 
07b60                 | ' 'print "In compile_if"
07b60                 | ' compile_fun_1p()
07b60                 | ' cmd=lparts(ct).token : ct+=1
07b60                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
07b60                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
07b60                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
07b60     13 00 00 FF 
07b64     38 E4 85 F1 | 	sub	objptr, ##9784
07b68     F2 26 02 FB | 	rdlong	local05, objptr
07b6c     01 26 06 F1 | 	add	local05, #1
07b70     03 26 66 F0 | 	shl	local05, #3
07b74     02 00 00 FF 
07b78     38 E4 85 F1 | 	sub	objptr, ##1080
07b7c     F2 26 02 F1 | 	add	local05, objptr
07b80     13 13 02 FB | 	rdlong	arg01, local05
07b84     35 00 00 FF 
07b88     3C E4 85 F1 | 	sub	objptr, ##27196
07b8c                 | ' 
07b8c                 | ' select case s
07b8c     77 01 00 FF 
07b90     B4 15 06 F6 | 	mov	arg02, ##@LR__4962
07b94     8C 7C B1 FD | 	call	#__system___string_cmp
07b98     00 FA 0D F2 | 	cmp	result1, #0 wz
07b9c     1B FA 05 A6 |  if_e	mov	result1, #27
07ba0     00 FA 05 56 |  if_ne	mov	result1, #0
07ba4     00 FA 0D F2 | 	cmp	result1, #0 wz
07ba8     0C 00 90 AD |  if_e	jmp	#LR__0690
07bac     05 12 06 F6 | 	mov	arg01, #5
07bb0     88 ED BF FD | 	call	#_compile_immediate_assign
07bb4     08 00 90 FD | 	jmp	#LR__0691
07bb8                 | LR__0690
07bb8     05 12 06 F6 | 	mov	arg01, #5
07bbc     1C E3 BF FD | 	call	#_compile_immediate
07bc0                 | LR__0691
07bc0                 | ' 
07bc0                 | ' 
07bc0                 | ' return 0
07bc0     00 FA 05 F6 | 	mov	result1, #0
07bc4     A7 F0 03 F6 | 	mov	ptra, fp
07bc8     B2 00 A0 FD | 	call	#popregs_
07bcc                 | _compile_if_ret
07bcc     2D 00 64 FD | 	ret
07bd0                 | 
07bd0                 | ' 
07bd0                 | ' function compile_else() as ulong  
07bd0                 | _compile_else
07bd0     05 4A 05 F6 | 	mov	COUNT_, #5
07bd4     A8 00 A0 FD | 	call	#pushregs_
07bd8                 | _compile_else_enter
07bd8     5A 22 06 F6 | 	mov	local03, #90
07bdc     0F 25 02 F6 | 	mov	local04, local01
07be0     10 27 02 F6 | 	mov	local05, local02
07be4     11 1F 02 F6 | 	mov	local01, local03
07be8     4A 00 00 FF 
07bec     AC E4 05 F1 | 	add	objptr, ##38060
07bf0     F2 12 02 FB | 	rdlong	arg01, objptr
07bf4     09 FB 01 F6 | 	mov	result1, arg01
07bf8     01 FA 65 F0 | 	shl	result1, #1
07bfc     09 FB 01 F1 | 	add	result1, arg01
07c00     02 FA 65 F0 | 	shl	result1, #2
07c04     03 00 00 FF 
07c08     00 E4 85 F1 | 	sub	objptr, ##1536
07c0c     F2 FA 01 F1 | 	add	result1, objptr
07c10     FD 24 62 FC | 	wrlong	local04, result1
07c14     03 00 00 FF 
07c18     00 E4 05 F1 | 	add	objptr, ##1536
07c1c     F2 FA 01 FB | 	rdlong	result1, objptr
07c20     FD 24 02 F6 | 	mov	local04, result1
07c24     01 24 66 F0 | 	shl	local04, #1
07c28     FD 24 02 F1 | 	add	local04, result1
07c2c     02 24 66 F0 | 	shl	local04, #2
07c30     03 00 00 FF 
07c34     00 E4 85 F1 | 	sub	objptr, ##1536
07c38     F2 24 02 F1 | 	add	local04, objptr
07c3c     04 24 06 F1 | 	add	local04, #4
07c40     12 27 62 FC | 	wrlong	local05, local04
07c44     03 00 00 FF 
07c48     00 E4 05 F1 | 	add	objptr, ##1536
07c4c     F2 24 02 FB | 	rdlong	local04, objptr
07c50     12 27 02 F6 | 	mov	local05, local04
07c54     01 26 66 F0 | 	shl	local05, #1
07c58     12 27 02 F1 | 	add	local05, local04
07c5c     02 26 66 F0 | 	shl	local05, #2
07c60     03 00 00 FF 
07c64     00 E4 85 F1 | 	sub	objptr, ##1536
07c68     F2 26 02 F1 | 	add	local05, objptr
07c6c     08 26 06 F1 | 	add	local05, #8
07c70     13 1F 62 FC | 	wrlong	local01, local05
07c74     03 00 00 FF 
07c78     00 E4 05 F1 | 	add	objptr, ##1536
07c7c     F2 24 02 FB | 	rdlong	local04, objptr
07c80     01 24 06 F1 | 	add	local04, #1
07c84     F2 24 62 FC | 	wrlong	local04, objptr
07c88                 | ' 
07c88                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
07c88                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
07c88     13 00 00 FF 
07c8c     38 E4 85 F1 | 	sub	objptr, ##9784
07c90     F2 26 02 FB | 	rdlong	local05, objptr
07c94     01 26 06 F1 | 	add	local05, #1
07c98     03 26 66 F0 | 	shl	local05, #3
07c9c     02 00 00 FF 
07ca0     38 E4 85 F1 | 	sub	objptr, ##1080
07ca4     F2 26 02 F1 | 	add	local05, objptr
07ca8     13 13 02 FB | 	rdlong	arg01, local05
07cac     35 00 00 FF 
07cb0     3C E4 85 F1 | 	sub	objptr, ##27196
07cb4                 | ' 
07cb4                 | ' select case s
07cb4     77 01 00 FF 
07cb8     B4 15 06 F6 | 	mov	arg02, ##@LR__4962
07cbc     64 7B B1 FD | 	call	#__system___string_cmp
07cc0     00 FA 0D F2 | 	cmp	result1, #0 wz
07cc4     1B FA 05 A6 |  if_e	mov	result1, #27
07cc8     00 FA 05 56 |  if_ne	mov	result1, #0
07ccc     00 FA 0D F2 | 	cmp	result1, #0 wz
07cd0     0C 00 90 AD |  if_e	jmp	#LR__0700
07cd4     05 12 06 F6 | 	mov	arg01, #5
07cd8     60 EC BF FD | 	call	#_compile_immediate_assign
07cdc     08 00 90 FD | 	jmp	#LR__0701
07ce0                 | LR__0700
07ce0     05 12 06 F6 | 	mov	arg01, #5
07ce4     F4 E1 BF FD | 	call	#_compile_immediate
07ce8                 | LR__0701
07ce8                 | ' 
07ce8                 | ' 
07ce8                 | ' return 0
07ce8     00 FA 05 F6 | 	mov	result1, #0
07cec     A7 F0 03 F6 | 	mov	ptra, fp
07cf0     B2 00 A0 FD | 	call	#popregs_
07cf4                 | _compile_else_ret
07cf4     2D 00 64 FD | 	ret
07cf8                 | 
07cf8                 | ' 
07cf8                 | ' 
07cf8                 | ' function compile_dim() as ulong  
07cf8                 | _compile_dim
07cf8     11 4A 05 F6 | 	mov	COUNT_, #17
07cfc     A8 00 A0 FD | 	call	#pushregs_
07d00     01 1E 06 F6 | 	mov	local01, #1
07d04     01 20 06 F6 | 	mov	local02, #1
07d08     01 22 06 F6 | 	mov	local03, #1
07d0c                 | ' 
07d0c                 | ' dims(0)=1: dims(1)=1: dims(2)=1
07d0c                 | ' 
07d0c                 | ' if isname(lparts(ct).part$) then 
07d0c     37 00 00 FF 
07d10     74 E4 05 F1 | 	add	objptr, ##28276
07d14     F2 18 02 FB | 	rdlong	arg04, objptr
07d18     03 18 66 F0 | 	shl	arg04, #3
07d1c     02 00 00 FF 
07d20     38 E4 85 F1 | 	sub	objptr, ##1080
07d24     F2 18 02 F1 | 	add	arg04, objptr
07d28     0C 13 02 FB | 	rdlong	arg01, arg04
07d2c     35 00 00 FF 
07d30     3C E4 85 F1 | 	sub	objptr, ##27196
07d34     40 D2 BF FD | 	call	#_isname
07d38     00 FA 0D F2 | 	cmp	result1, #0 wz
07d3c     AC 05 90 AD |  if_e	jmp	#LR__0734
07d40     37 00 00 FF 
07d44     74 E4 05 F1 | 	add	objptr, ##28276
07d48     F2 24 02 FB | 	rdlong	local04, objptr
07d4c     03 24 66 F0 | 	shl	local04, #3
07d50     02 00 00 FF 
07d54     38 E4 85 F1 | 	sub	objptr, ##1080
07d58     F2 24 02 F1 | 	add	local04, objptr
07d5c     12 27 02 FB | 	rdlong	local05, local04
07d60     01 28 66 F6 | 	neg	local06, #1
07d64                 | '   varname2$=lparts(ct).part$ 
07d64                 | '   j=-1
07d64                 | '   if varnum>0 then
07d64     04 E4 85 F1 | 	sub	objptr, #4
07d68     F2 2A 02 FB | 	rdlong	local07, objptr
07d6c     35 00 00 FF 
07d70     38 E4 85 F1 | 	sub	objptr, ##27192
07d74     01 2A 56 F2 | 	cmps	local07, #1 wc
07d78     58 00 90 CD |  if_b	jmp	#LR__0712
07d7c                 | '  '   print "in dim, varnum=";varnum
07d7c                 | '     for i=0 to varnum-1
07d7c     00 2C 06 F6 | 	mov	local08, #0
07d80     35 00 00 FF 
07d84     38 E4 05 F1 | 	add	objptr, ##27192
07d88     F2 2E 02 FB | 	rdlong	local09, objptr
07d8c     35 00 00 FF 
07d90     38 E4 85 F1 | 	sub	objptr, ##27192
07d94                 | LR__0710
07d94     17 2D 52 F2 | 	cmps	local08, local09 wc
07d98     38 00 90 3D |  if_ae	jmp	#LR__0711
07d9c                 | '       if variables(i).name=varname2$ then j=i : exit
07d9c     16 25 02 F6 | 	mov	local04, local08
07da0     04 24 66 F0 | 	shl	local04, #4
07da4     15 00 00 FF 
07da8     28 E4 05 F1 | 	add	objptr, ##10792
07dac     F2 24 02 F1 | 	add	local04, objptr
07db0     12 13 02 FB | 	rdlong	arg01, local04
07db4     13 15 02 F6 | 	mov	arg02, local05
07db8     15 00 00 FF 
07dbc     28 E4 85 F1 | 	sub	objptr, ##10792
07dc0     60 7A B1 FD | 	call	#__system___string_cmp
07dc4     00 FA 0D F2 | 	cmp	result1, #0 wz
07dc8     16 29 02 A6 |  if_e	mov	local06, local08
07dcc     01 2C 06 51 |  if_ne	add	local08, #1
07dd0     C0 FF 9F 5D |  if_ne	jmp	#LR__0710
07dd4                 | LR__0711
07dd4                 | LR__0712
07dd4                 | ' '  if j<>-1 then printerror (42) : return 42
07dd4                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
07dd4     FF FF 7F FF 
07dd8     FF 29 0E F2 | 	cmp	local06, ##-1 wz
07ddc     35 00 00 AF 
07de0     38 E4 05 A1 |  if_e	add	objptr, ##27192
07de4     F2 28 02 AB |  if_e	rdlong	local06, objptr
07de8     35 00 00 AF 
07dec     38 E4 85 A1 |  if_e	sub	objptr, ##27192
07df0     78 00 90 AD |  if_e	jmp	#LR__0713
07df4     00 12 06 F6 | 	mov	arg01, #0
07df8     98 D3 B1 FD | 	call	#__system___getiolock_0508
07dfc     FD 12 02 F6 | 	mov	arg01, result1
07e00     F8 79 B1 FD | 	call	#__system___lockmem
07e04     79 01 00 FF 
07e08     79 15 06 F6 | 	mov	arg02, ##@LR__5168
07e0c     00 12 06 F6 | 	mov	arg01, #0
07e10     00 16 06 F6 | 	mov	arg03, #0
07e14     D8 86 B1 FD | 	call	#__system___basic_print_string
07e18     59 00 00 FF 
07e1c     D0 E5 05 F1 | 	add	objptr, ##46032
07e20     F2 14 02 FB | 	rdlong	arg02, objptr
07e24     59 00 00 FF 
07e28     D0 E5 85 F1 | 	sub	objptr, ##46032
07e2c     00 12 06 F6 | 	mov	arg01, #0
07e30     00 16 06 F6 | 	mov	arg03, #0
07e34     0A 18 06 F6 | 	mov	arg04, #10
07e38     38 87 B1 FD | 	call	#__system___basic_print_unsigned
07e3c     79 01 00 FF 
07e40     87 15 06 F6 | 	mov	arg02, ##@LR__5169
07e44     00 12 06 F6 | 	mov	arg01, #0
07e48     00 16 06 F6 | 	mov	arg03, #0
07e4c     A0 86 B1 FD | 	call	#__system___basic_print_string
07e50     00 12 06 F6 | 	mov	arg01, #0
07e54     0A 14 06 F6 | 	mov	arg02, #10
07e58     00 16 06 F6 | 	mov	arg03, #0
07e5c     38 86 B1 FD | 	call	#__system___basic_print_char
07e60     00 12 06 F6 | 	mov	arg01, #0
07e64     2C D3 B1 FD | 	call	#__system___getiolock_0508
07e68     FD 00 68 FC | 	wrlong	#0, result1
07e6c                 | LR__0713
07e6c                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then printerror(43) : return 43
07e6c     37 00 00 FF 
07e70     74 E4 05 F1 | 	add	objptr, ##28276
07e74     F2 18 02 FB | 	rdlong	arg04, objptr
07e78     01 18 06 F1 | 	add	arg04, #1
07e7c     03 18 66 F0 | 	shl	arg04, #3
07e80     02 00 00 FF 
07e84     38 E4 85 F1 | 	sub	objptr, ##1080
07e88     F2 18 02 F1 | 	add	arg04, objptr
07e8c     0C 13 02 FB | 	rdlong	arg01, arg04
07e90     79 01 00 FF 
07e94     A8 15 06 F6 | 	mov	arg02, ##@LR__5170
07e98     35 00 00 FF 
07e9c     3C E4 85 F1 | 	sub	objptr, ##27196
07ea0     80 79 B1 FD | 	call	#__system___string_cmp
07ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
07ea8     50 00 90 AD |  if_e	jmp	#LR__0714
07eac     37 00 00 FF 
07eb0     74 E4 05 F1 | 	add	objptr, ##28276
07eb4     F2 2E 02 FB | 	rdlong	local09, objptr
07eb8     01 2E 06 F1 | 	add	local09, #1
07ebc     03 2E 66 F0 | 	shl	local09, #3
07ec0     02 00 00 FF 
07ec4     38 E4 85 F1 | 	sub	objptr, ##1080
07ec8     F2 2E 02 F1 | 	add	local09, objptr
07ecc     17 13 02 FB | 	rdlong	arg01, local09
07ed0     79 01 00 FF 
07ed4     AA 15 06 F6 | 	mov	arg02, ##@LR__5171
07ed8     35 00 00 FF 
07edc     3C E4 85 F1 | 	sub	objptr, ##27196
07ee0     40 79 B1 FD | 	call	#__system___string_cmp
07ee4     00 FA 0D F2 | 	cmp	result1, #0 wz
07ee8     10 00 90 AD |  if_e	jmp	#LR__0714
07eec     2B 12 06 F6 | 	mov	arg01, #43
07ef0     60 34 B1 FD | 	call	#_printerror
07ef4     2B FA 05 F6 | 	mov	result1, #43
07ef8     00 05 90 FD | 	jmp	#LR__0736
07efc                 | LR__0714
07efc                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350
07efc     37 00 00 FF 
07f00     74 E4 05 F1 | 	add	objptr, ##28276
07f04     F2 14 02 FB | 	rdlong	arg02, objptr
07f08     01 14 06 F1 | 	add	arg02, #1
07f0c     03 14 66 F0 | 	shl	arg02, #3
07f10     02 00 00 FF 
07f14     38 E4 85 F1 | 	sub	objptr, ##1080
07f18     F2 14 02 F1 | 	add	arg02, objptr
07f1c     0A 13 02 FB | 	rdlong	arg01, arg02
07f20     79 01 00 FF 
07f24     AD 15 06 F6 | 	mov	arg02, ##@LR__5172
07f28     35 00 00 FF 
07f2c     3C E4 85 F1 | 	sub	objptr, ##27196
07f30     F0 78 B1 FD | 	call	#__system___string_cmp
07f34     00 FA 0D F2 | 	cmp	result1, #0 wz
07f38     37 00 00 AF 
07f3c     74 E4 05 A1 |  if_e	add	objptr, ##28276
07f40     F2 30 02 AB |  if_e	rdlong	local10, objptr
07f44     37 00 00 AF 
07f48     74 E4 85 A1 |  if_e	sub	objptr, ##28276
07f4c     01 30 06 A1 |  if_e	add	local10, #1
07f50     7C 01 90 AD |  if_e	jmp	#LR__0720
07f54     37 00 00 FF 
07f58     74 E4 05 F1 | 	add	objptr, ##28276
07f5c     F2 30 02 FB | 	rdlong	local10, objptr
07f60     37 00 00 FF 
07f64     74 E4 85 F1 | 	sub	objptr, ##28276
07f68     02 30 06 F1 | 	add	local10, #2
07f6c     00 32 06 F6 | 	mov	local11, #0
07f70                 | '   l=ct+2 : m=0 : do
07f70                 | LR__0715
07f70                 | '    ' print "in dim, lparts: ";lparts(l).part$, isdec(lparts(l).part$)
07f70                 | '     if isdec(lparts(l).part$) then 
07f70     18 25 02 F6 | 	mov	local04, local10
07f74     03 24 66 F0 | 	shl	local04, #3
07f78     35 00 00 FF 
07f7c     3C E4 05 F1 | 	add	objptr, ##27196
07f80     F2 24 02 F1 | 	add	local04, objptr
07f84     12 13 02 FB | 	rdlong	arg01, local04
07f88     35 00 00 FF 
07f8c     3C E4 85 F1 | 	sub	objptr, ##27196
07f90     88 D6 BF FD | 	call	#_isdec
07f94     00 FA 0D F2 | 	cmp	result1, #0 wz
07f98     44 00 90 AD |  if_e	jmp	#LR__0716
07f9c     19 35 02 F6 | 	mov	local12, local11
07fa0     0F 35 06 F1 | 	add	local12, #local01
07fa4     18 2F 02 F6 | 	mov	local09, local10
07fa8     03 2E 66 F0 | 	shl	local09, #3
07fac     35 00 00 FF 
07fb0     3C E4 05 F1 | 	add	objptr, ##27196
07fb4     F2 2E 02 F1 | 	add	local09, objptr
07fb8     17 13 02 FB | 	rdlong	arg01, local09
07fbc     00 14 06 F6 | 	mov	arg02, #0
07fc0     35 00 00 FF 
07fc4     3C E4 85 F1 | 	sub	objptr, ##27196
07fc8     F0 A9 B1 FD | 	call	#__system____builtin_atoi
07fcc     FD 36 02 F6 | 	mov	local13, result1
07fd0                 | 	'.live	local13
07fd0                 | 	'.live	local12
07fd0     00 34 8E F9 | 	altd	local12, #0
07fd4     1B 35 02 F6 | 	mov	local12, local13
07fd8     01 32 06 F1 | 	add	local11, #1
07fdc     10 00 90 FD | 	jmp	#LR__0717
07fe0                 | LR__0716
07fe0     11 12 06 F6 | 	mov	arg01, #17
07fe4     6C 33 B1 FD | 	call	#_printerror
07fe8                 | '       printerror (17)  : return(17)
07fe8     11 FA 05 F6 | 	mov	result1, #17
07fec     0C 04 90 FD | 	jmp	#LR__0736
07ff0                 | LR__0717
07ff0                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
07ff0     18 25 02 F6 | 	mov	local04, local10
07ff4     01 24 06 F1 | 	add	local04, #1
07ff8     03 24 66 F0 | 	shl	local04, #3
07ffc     35 00 00 FF 
08000     3C E4 05 F1 | 	add	objptr, ##27196
08004     F2 24 02 F1 | 	add	local04, objptr
08008     12 13 02 FB | 	rdlong	arg01, local04
0800c     79 01 00 FF 
08010     B0 15 06 F6 | 	mov	arg02, ##@LR__5173
08014     35 00 00 FF 
08018     3C E4 85 F1 | 	sub	objptr, ##27196
0801c     04 78 B1 FD | 	call	#__system___string_cmp
08020     00 FA 0D F2 | 	cmp	result1, #0 wz
08024     48 00 90 AD |  if_e	jmp	#LR__0718
08028     18 37 02 F6 | 	mov	local13, local10
0802c     01 36 06 F1 | 	add	local13, #1
08030     03 36 66 F0 | 	shl	local13, #3
08034     35 00 00 FF 
08038     3C E4 05 F1 | 	add	objptr, ##27196
0803c     F2 36 02 F1 | 	add	local13, objptr
08040     1B 13 02 FB | 	rdlong	arg01, local13
08044     79 01 00 FF 
08048     B2 15 06 F6 | 	mov	arg02, ##@LR__5174
0804c     35 00 00 FF 
08050     3C E4 85 F1 | 	sub	objptr, ##27196
08054     CC 77 B1 FD | 	call	#__system___string_cmp
08058     00 FA 0D F2 | 	cmp	result1, #0 wz
0805c     10 00 90 AD |  if_e	jmp	#LR__0718
08060     2C 12 06 F6 | 	mov	arg01, #44
08064     EC 32 B1 FD | 	call	#_printerror
08068     2C FA 05 F6 | 	mov	result1, #44
0806c     8C 03 90 FD | 	jmp	#LR__0736
08070                 | LR__0718
08070     02 30 06 F1 | 	add	local10, #2
08074     18 25 02 F6 | 	mov	local04, local10
08078     01 24 86 F1 | 	sub	local04, #1
0807c     03 24 66 F0 | 	shl	local04, #3
08080     35 00 00 FF 
08084     3C E4 05 F1 | 	add	objptr, ##27196
08088     F2 24 02 F1 | 	add	local04, objptr
0808c     12 13 02 FB | 	rdlong	arg01, local04
08090     79 01 00 FF 
08094     B4 15 06 F6 | 	mov	arg02, ##@LR__5175
08098     35 00 00 FF 
0809c     3C E4 85 F1 | 	sub	objptr, ##27196
080a0     80 77 B1 FD | 	call	#__system___string_cmp
080a4     00 FA 0D F2 | 	cmp	result1, #0 wz
080a8     03 32 56 52 |  if_ne	cmps	local11, #3 wc
080ac     C0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0715
080b0                 | '   if m>3 then printerror(45): return(45)
080b0     04 32 56 F2 | 	cmps	local11, #4 wc
080b4     10 00 90 CD |  if_b	jmp	#LR__0719
080b8     2D 12 06 F6 | 	mov	arg01, #45
080bc     94 32 B1 FD | 	call	#_printerror
080c0     2D FA 05 F6 | 	mov	result1, #45
080c4     34 03 90 FD | 	jmp	#LR__0736
080c8                 | LR__0719
080c8     00 39 06 F6 | 	mov	local14, #256
080cc     0C 3A 06 F6 | 	mov	local15, #12
080d0                 | LR__0720
080d0                 | '  ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' print lparts(l-1).part$,lparts(l).part$, lparts(l+1).part$
080d0                 | '   arraytype=array_no_type : esize=12
080d0                 | ' 1350 
080d0                 | '   if lparts(l).part$="as" then
080d0     18 25 02 F6 | 	mov	local04, local10
080d4     03 24 66 F0 | 	shl	local04, #3
080d8     35 00 00 FF 
080dc     3C E4 05 F1 | 	add	objptr, ##27196
080e0     F2 24 02 F1 | 	add	local04, objptr
080e4     12 13 02 FB | 	rdlong	arg01, local04
080e8     79 01 00 FF 
080ec     B6 15 06 F6 | 	mov	arg02, ##@LR__5176
080f0     35 00 00 FF 
080f4     3C E4 85 F1 | 	sub	objptr, ##27196
080f8     28 77 B1 FD | 	call	#__system___string_cmp
080fc     00 FA 0D F2 | 	cmp	result1, #0 wz
08100     F8 01 90 5D |  if_ne	jmp	#LR__0735
08104                 | '     select case lparts(l+1).part$
08104     18 35 02 F6 | 	mov	local12, local10
08108     01 34 06 F1 | 	add	local12, #1
0810c     03 34 66 F0 | 	shl	local12, #3
08110     35 00 00 FF 
08114     3C E4 05 F1 | 	add	objptr, ##27196
08118     F2 34 02 F1 | 	add	local12, objptr
0811c     1A 3D 02 FB | 	rdlong	local16, local12
08120     79 01 00 FF 
08124     B9 15 06 F6 | 	mov	arg02, ##@LR__5177
08128     1E 13 02 F6 | 	mov	arg01, local16
0812c     35 00 00 FF 
08130     3C E4 85 F1 | 	sub	objptr, ##27196
08134     EC 76 B1 FD | 	call	#__system___string_cmp
08138     00 FA 0D F2 | 	cmp	result1, #0 wz
0813c     0C 01 90 AD |  if_e	jmp	#LR__0721
08140     79 01 00 FF 
08144     BE 15 06 F6 | 	mov	arg02, ##@LR__5178
08148     1E 13 02 F6 | 	mov	arg01, local16
0814c     D4 76 B1 FD | 	call	#__system___string_cmp
08150     00 FA 0D F2 | 	cmp	result1, #0 wz
08154     00 01 90 AD |  if_e	jmp	#LR__0722
08158     79 01 00 FF 
0815c     C4 15 06 F6 | 	mov	arg02, ##@LR__5179
08160     1E 13 02 F6 | 	mov	arg01, local16
08164     BC 76 B1 FD | 	call	#__system___string_cmp
08168     00 FA 0D F2 | 	cmp	result1, #0 wz
0816c     F4 00 90 AD |  if_e	jmp	#LR__0723
08170     79 01 00 FF 
08174     CA 15 06 F6 | 	mov	arg02, ##@LR__5180
08178     1E 13 02 F6 | 	mov	arg01, local16
0817c     A4 76 B1 FD | 	call	#__system___string_cmp
08180     00 FA 0D F2 | 	cmp	result1, #0 wz
08184     E8 00 90 AD |  if_e	jmp	#LR__0724
08188     79 01 00 FF 
0818c     D1 15 06 F6 | 	mov	arg02, ##@LR__5181
08190     1E 13 02 F6 | 	mov	arg01, local16
08194     8C 76 B1 FD | 	call	#__system___string_cmp
08198     00 FA 0D F2 | 	cmp	result1, #0 wz
0819c     DC 00 90 AD |  if_e	jmp	#LR__0725
081a0     79 01 00 FF 
081a4     D6 15 06 F6 | 	mov	arg02, ##@LR__5182
081a8     1E 13 02 F6 | 	mov	arg01, local16
081ac     74 76 B1 FD | 	call	#__system___string_cmp
081b0     00 FA 0D F2 | 	cmp	result1, #0 wz
081b4     D0 00 90 AD |  if_e	jmp	#LR__0726
081b8     79 01 00 FF 
081bc     DE 15 06 F6 | 	mov	arg02, ##@LR__5183
081c0     1E 13 02 F6 | 	mov	arg01, local16
081c4     5C 76 B1 FD | 	call	#__system___string_cmp
081c8     00 FA 0D F2 | 	cmp	result1, #0 wz
081cc     C4 00 90 AD |  if_e	jmp	#LR__0727
081d0     79 01 00 FF 
081d4     E4 15 06 F6 | 	mov	arg02, ##@LR__5184
081d8     1E 13 02 F6 | 	mov	arg01, local16
081dc     44 76 B1 FD | 	call	#__system___string_cmp
081e0     00 FA 0D F2 | 	cmp	result1, #0 wz
081e4     B8 00 90 AD |  if_e	jmp	#LR__0728
081e8     79 01 00 FF 
081ec     EA 15 06 F6 | 	mov	arg02, ##@LR__5185
081f0     1E 13 02 F6 | 	mov	arg01, local16
081f4     2C 76 B1 FD | 	call	#__system___string_cmp
081f8     00 FA 0D F2 | 	cmp	result1, #0 wz
081fc     AC 00 90 AD |  if_e	jmp	#LR__0729
08200     79 01 00 FF 
08204     F1 15 06 F6 | 	mov	arg02, ##@LR__5186
08208     1E 13 02 F6 | 	mov	arg01, local16
0820c     14 76 B1 FD | 	call	#__system___string_cmp
08210     00 FA 0D F2 | 	cmp	result1, #0 wz
08214     A0 00 90 AD |  if_e	jmp	#LR__0730
08218     79 01 00 FF 
0821c     F8 15 06 F6 | 	mov	arg02, ##@LR__5187
08220     1E 13 02 F6 | 	mov	arg01, local16
08224     FC 75 B1 FD | 	call	#__system___string_cmp
08228     00 FA 0D F2 | 	cmp	result1, #0 wz
0822c     94 00 90 AD |  if_e	jmp	#LR__0731
08230     79 01 00 FF 
08234     FF 15 06 F6 | 	mov	arg02, ##@LR__5188
08238     1E 13 02 F6 | 	mov	arg01, local16
0823c     E4 75 B1 FD | 	call	#__system___string_cmp
08240     00 FA 0D F2 | 	cmp	result1, #0 wz
08244     88 00 90 AD |  if_e	jmp	#LR__0732
08248     90 00 90 FD | 	jmp	#LR__0733
0824c                 | LR__0721
0824c     01 39 06 F6 | 	mov	local14, #257
08250     01 3A 06 F6 | 	mov	local15, #1
08254     A4 00 90 FD | 	jmp	#LR__0735
08258                 | LR__0722
08258     02 39 06 F6 | 	mov	local14, #258
0825c     01 3A 06 F6 | 	mov	local15, #1
08260     98 00 90 FD | 	jmp	#LR__0735
08264                 | LR__0723
08264     03 39 06 F6 | 	mov	local14, #259
08268     02 3A 06 F6 | 	mov	local15, #2
0826c     8C 00 90 FD | 	jmp	#LR__0735
08270                 | LR__0724
08270     04 39 06 F6 | 	mov	local14, #260
08274     02 3A 06 F6 | 	mov	local15, #2
08278     80 00 90 FD | 	jmp	#LR__0735
0827c                 | LR__0725
0827c     05 39 06 F6 | 	mov	local14, #261
08280     04 3A 06 F6 | 	mov	local15, #4
08284     74 00 90 FD | 	jmp	#LR__0735
08288                 | LR__0726
08288     05 39 06 F6 | 	mov	local14, #261
0828c     04 3A 06 F6 | 	mov	local15, #4
08290     68 00 90 FD | 	jmp	#LR__0735
08294                 | LR__0727
08294     06 39 06 F6 | 	mov	local14, #262
08298     04 3A 06 F6 | 	mov	local15, #4
0829c     5C 00 90 FD | 	jmp	#LR__0735
082a0                 | LR__0728
082a0     07 39 06 F6 | 	mov	local14, #263
082a4     08 3A 06 F6 | 	mov	local15, #8
082a8     50 00 90 FD | 	jmp	#LR__0735
082ac                 | LR__0729
082ac     08 39 06 F6 | 	mov	local14, #264
082b0     08 3A 06 F6 | 	mov	local15, #8
082b4     44 00 90 FD | 	jmp	#LR__0735
082b8                 | LR__0730
082b8     09 39 06 F6 | 	mov	local14, #265
082bc     04 3A 06 F6 | 	mov	local15, #4
082c0     38 00 90 FD | 	jmp	#LR__0735
082c4                 | LR__0731
082c4     0A 39 06 F6 | 	mov	local14, #266
082c8     08 3A 06 F6 | 	mov	local15, #8
082cc     2C 00 90 FD | 	jmp	#LR__0735
082d0                 | LR__0732
082d0     0B 39 06 F6 | 	mov	local14, #267
082d4     04 3A 06 F6 | 	mov	local15, #4
082d8     20 00 90 FD | 	jmp	#LR__0735
082dc                 | LR__0733
082dc     2F 12 06 F6 | 	mov	arg01, #47
082e0     70 30 B1 FD | 	call	#_printerror
082e4     2F FA 05 F6 | 	mov	result1, #47
082e8     10 01 90 FD | 	jmp	#LR__0736
082ec                 | LR__0734
082ec     2E 12 06 F6 | 	mov	arg01, #46
082f0     60 30 B1 FD | 	call	#_printerror
082f4                 | '   printerror(46): return 46
082f4     2E FA 05 F6 | 	mov	result1, #46
082f8     00 01 90 FD | 	jmp	#LR__0736
082fc                 | LR__0735
082fc     0F 3B 02 FD | 	qmul	local15, local01
08300     18 2A 62 FD | 	getqx	local07
08304     10 2B 02 FD | 	qmul	local07, local02
08308     18 3C 62 FD | 	getqx	local16
0830c     11 3D 02 FD | 	qmul	local16, local03
08310     59 00 00 FF 
08314     B8 E5 05 F1 | 	add	objptr, ##46008
08318     F2 3E 02 FB | 	rdlong	local17, objptr
0831c     1C 15 02 F6 | 	mov	arg02, local14
08320     18 3C 62 FD | 	getqx	local16
08324     1E 3F 82 F1 | 	sub	local17, local16
08328     10 3E 86 F1 | 	sub	local17, #16
0832c     0F 3E 26 F5 | 	andn	local17, #15
08330     F2 3E 62 FC | 	wrlong	local17, objptr
08334     59 00 00 FF 
08338     B8 E5 85 F1 | 	sub	objptr, ##46008
0833c     1F 13 02 F6 | 	mov	arg01, local17
08340     BC 31 B1 FD | 	call	#_psdpoke
08344     1F 13 02 F6 | 	mov	arg01, local17
08348     02 12 06 F1 | 	add	arg01, #2
0834c     1D 15 02 F6 | 	mov	arg02, local15
08350     AC 31 B1 FD | 	call	#_psdpoke
08354     1F 13 02 F6 | 	mov	arg01, local17
08358     04 12 06 F1 | 	add	arg01, #4
0835c     0F 15 02 F6 | 	mov	arg02, local01
08360     54 31 B1 FD | 	call	#_pslpoke
08364     1F 13 02 F6 | 	mov	arg01, local17
08368     08 12 06 F1 | 	add	arg01, #8
0836c     10 15 02 F6 | 	mov	arg02, local02
08370     44 31 B1 FD | 	call	#_pslpoke
08374     1F 13 02 F6 | 	mov	arg01, local17
08378     0C 12 06 F1 | 	add	arg01, #12
0837c     11 15 02 F6 | 	mov	arg02, local03
08380     34 31 B1 FD | 	call	#_pslpoke
08384     14 35 02 F6 | 	mov	local12, local06
08388     04 34 66 F0 | 	shl	local12, #4
0838c     15 00 00 FF 
08390     28 E4 05 F1 | 	add	objptr, ##10792
08394     F2 34 02 F1 | 	add	local12, objptr
08398     1A 27 62 FC | 	wrlong	local05, local12
0839c     14 35 02 F6 | 	mov	local12, local06
083a0     04 34 66 F0 | 	shl	local12, #4
083a4     F2 34 02 F1 | 	add	local12, objptr
083a8     04 34 06 F1 | 	add	local12, #4
083ac     1A 3F 62 FC | 	wrlong	local17, local12
083b0     14 35 02 F6 | 	mov	local12, local06
083b4     04 34 66 F0 | 	shl	local12, #4
083b8     F2 34 02 F1 | 	add	local12, objptr
083bc     0C 34 06 F1 | 	add	local12, #12
083c0     1A 39 62 FC | 	wrlong	local14, local12
083c4                 | ' memtop=arrayptr
083c4                 | ' 
083c4                 | ' psdpoke arrayptr,arraytype ': print arraytype, arrayptr
083c4                 | ' psdpoke arrayptr+2,esize ': print esize , psdpeek(arrayptr+2)
083c4                 | ' pslpoke arrayptr+4,dims(0)
083c4                 | ' pslpoke arrayptr+8,dims(1)
083c4                 | ' pslpoke arrayptr+12,dims(2)
083c4                 | ' 'for i=0 to 15: print hex$(pspeek(arrayptr+i),2), : next i
083c4                 | ' 'for i=0 to 3: print hex$(pslpeek(arrayptr+4*i),2), : next i
083c4                 | ' 
083c4                 | ' 
083c4                 | ' variables(j).name=varname2$
083c4                 | ' variables(j).value.uresult=arrayptr
083c4                 | ' variables(j).vartype=arraytype
083c4                 | ' if j=varnum then varnum+=1
083c4     20 00 00 FF 
083c8     10 E4 05 F1 | 	add	objptr, ##16400
083cc     F2 2A 02 FB | 	rdlong	local07, objptr
083d0     35 00 00 FF 
083d4     38 E4 85 F1 | 	sub	objptr, ##27192
083d8     15 29 0A F2 | 	cmp	local06, local07 wz
083dc     35 00 00 AF 
083e0     38 E4 05 A1 |  if_e	add	objptr, ##27192
083e4     F2 2A 02 AB |  if_e	rdlong	local07, objptr
083e8     01 2A 06 A1 |  if_e	add	local07, #1
083ec     F2 2A 62 AC |  if_e	wrlong	local07, objptr
083f0     35 00 00 AF 
083f4     38 E4 85 A1 |  if_e	sub	objptr, ##27192
083f8                 | ' 
083f8                 | ' return 0
083f8     00 FA 05 F6 | 	mov	result1, #0
083fc                 | LR__0736
083fc     A7 F0 03 F6 | 	mov	ptra, fp
08400     B2 00 A0 FD | 	call	#popregs_
08404                 | _compile_dim_ret
08404     2D 00 64 FD | 	ret
08408                 | 
08408                 | ' 
08408                 | ' 
08408                 | ' function compile_for() as ulong  
08408                 | _compile_for
08408     07 4A 05 F6 | 	mov	COUNT_, #7
0840c     A8 00 A0 FD | 	call	#pushregs_
08410                 | ' 
08410                 | ' 
08410                 | ' 
08410                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
08410     37 00 00 FF 
08414     74 E4 05 F1 | 	add	objptr, ##28276
08418     F2 14 02 FB | 	rdlong	arg02, objptr
0841c     01 14 06 F1 | 	add	arg02, #1
08420     03 14 66 F0 | 	shl	arg02, #3
08424     02 00 00 FF 
08428     38 E4 85 F1 | 	sub	objptr, ##1080
0842c     F2 14 02 F1 | 	add	arg02, objptr
08430     0A 13 02 FB | 	rdlong	arg01, arg02
08434     35 00 00 FF 
08438     3C E4 85 F1 | 	sub	objptr, ##27196
0843c                 | ' 
0843c                 | ' select case s
0843c     77 01 00 FF 
08440     B4 15 06 F6 | 	mov	arg02, ##@LR__4962
08444     DC 73 B1 FD | 	call	#__system___string_cmp
08448     00 FA 0D F2 | 	cmp	result1, #0 wz
0844c     1B FA 05 A6 |  if_e	mov	result1, #27
08450     00 FA 05 56 |  if_ne	mov	result1, #0
08454     00 FA 0D F2 | 	cmp	result1, #0 wz
08458     0C 00 90 AD |  if_e	jmp	#LR__0740
0845c     05 12 06 F6 | 	mov	arg01, #5
08460     D8 E4 BF FD | 	call	#_compile_immediate_assign
08464     10 00 90 FD | 	jmp	#LR__0741
08468                 | LR__0740
08468     20 12 06 F6 | 	mov	arg01, #32
0846c     48 E9 BF FD | 	call	#_compile_error
08470     20 FA 05 F6 | 	mov	result1, #32
08474     E8 02 90 FD | 	jmp	#LR__0747
08478                 | LR__0741
08478     4A 00 00 FF 
0847c     AC E4 05 F1 | 	add	objptr, ##38060
08480     F2 12 02 FB | 	rdlong	arg01, objptr
08484     09 25 02 F6 | 	mov	local04, arg01
08488     01 24 86 F1 | 	sub	local04, #1
0848c     12 15 02 F6 | 	mov	arg02, local04
08490     01 14 66 F0 | 	shl	arg02, #1
08494     12 15 02 F1 | 	add	arg02, local04
08498     02 14 66 F0 | 	shl	arg02, #2
0849c     03 00 00 FF 
084a0     00 E4 85 F1 | 	sub	objptr, ##1536
084a4     F2 14 02 F1 | 	add	arg02, objptr
084a8     0A 1F 02 FB | 	rdlong	local01, arg02
084ac     04 14 06 F1 | 	add	arg02, #4
084b0     0A 27 02 FB | 	rdlong	local05, arg02
084b4     01 12 86 F1 | 	sub	arg01, #1
084b8     09 29 02 F6 | 	mov	local06, arg01
084bc     01 28 66 F0 | 	shl	local06, #1
084c0     09 29 02 F1 | 	add	local06, arg01
084c4     02 28 66 F0 | 	shl	local06, #2
084c8     F2 28 02 F1 | 	add	local06, objptr
084cc     08 28 06 F1 | 	add	local06, #8
084d0     14 13 02 FB | 	rdlong	arg01, local06
084d4     13 21 02 F6 | 	mov	local02, local05
084d8     09 23 02 F6 | 	mov	local03, arg01
084dc                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
084dc                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
084dc     17 22 0E F2 | 	cmp	local03, #23 wz
084e0     47 00 00 FF 
084e4     AC E4 85 F1 | 	sub	objptr, ##36524
084e8     10 00 90 AD |  if_e	jmp	#LR__0742
084ec     22 12 06 F6 | 	mov	arg01, #34
084f0     C4 E8 BF FD | 	call	#_compile_error
084f4     22 FA 05 F6 | 	mov	result1, #34
084f8     64 02 90 FD | 	jmp	#LR__0747
084fc                 | LR__0742
084fc     0F 2B 02 F6 | 	mov	local07, local01
08500                 | ' varnum=t1.result.uresult
08500                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
08500     37 00 00 FF 
08504     74 E4 05 F1 | 	add	objptr, ##28276
08508     F2 24 02 FB | 	rdlong	local04, objptr
0850c     03 24 66 F0 | 	shl	local04, #3
08510     02 00 00 FF 
08514     38 E4 85 F1 | 	sub	objptr, ##1080
08518     F2 24 02 F1 | 	add	local04, objptr
0851c     12 13 02 FB | 	rdlong	arg01, local04
08520     7A 01 00 FF 
08524     06 14 06 F6 | 	mov	arg02, ##@LR__5189
08528     35 00 00 FF 
0852c     3C E4 85 F1 | 	sub	objptr, ##27196
08530     F0 72 B1 FD | 	call	#__system___string_cmp
08534     00 FA 0D F2 | 	cmp	result1, #0 wz
08538     10 00 90 AD |  if_e	jmp	#LR__0743
0853c     21 12 06 F6 | 	mov	arg01, #33
08540     74 E8 BF FD | 	call	#_compile_error
08544     21 FA 05 F6 | 	mov	result1, #33
08548     14 02 90 FD | 	jmp	#LR__0747
0854c                 | LR__0743
0854c     37 00 00 FF 
08550     74 E4 05 F1 | 	add	objptr, ##28276
08554     F2 24 02 FB | 	rdlong	local04, objptr
08558     01 24 06 F1 | 	add	local04, #1
0855c     F2 24 62 FC | 	wrlong	local04, objptr
08560     37 00 00 FF 
08564     74 E4 85 F1 | 	sub	objptr, ##28276
08568     90 0F B0 FD | 	call	#_expr
0856c                 | ' ct+=1
0856c                 | ' expr()  ' there is "to" value pushed on the stack
0856c                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
0856c     37 00 00 FF 
08570     74 E4 05 F1 | 	add	objptr, ##28276
08574     F2 24 02 FB | 	rdlong	local04, objptr
08578     03 24 66 F0 | 	shl	local04, #3
0857c     02 00 00 FF 
08580     38 E4 85 F1 | 	sub	objptr, ##1080
08584     F2 24 02 F1 | 	add	local04, objptr
08588     12 13 02 FB | 	rdlong	arg01, local04
0858c     7A 01 00 FF 
08590     09 14 06 F6 | 	mov	arg02, ##@LR__5190
08594     35 00 00 FF 
08598     3C E4 85 F1 | 	sub	objptr, ##27196
0859c     84 72 B1 FD | 	call	#__system___string_cmp
085a0     00 FA 0D F2 | 	cmp	result1, #0 wz
085a4     3C 00 90 AD |  if_e	jmp	#LR__0744
085a8     37 00 00 FF 
085ac     74 E4 05 F1 | 	add	objptr, ##28276
085b0     F2 28 02 FB | 	rdlong	local06, objptr
085b4     03 28 66 F0 | 	shl	local06, #3
085b8     02 00 00 FF 
085bc     38 E4 85 F1 | 	sub	objptr, ##1080
085c0     F2 28 02 F1 | 	add	local06, objptr
085c4     14 13 02 FB | 	rdlong	arg01, local06
085c8     7A 01 00 FF 
085cc     0E 14 06 F6 | 	mov	arg02, ##@LR__5191
085d0     35 00 00 FF 
085d4     3C E4 85 F1 | 	sub	objptr, ##27196
085d8     48 72 B1 FD | 	call	#__system___string_cmp
085dc     00 FA 0D F2 | 	cmp	result1, #0 wz
085e0     24 00 90 5D |  if_ne	jmp	#LR__0745
085e4                 | LR__0744
085e4     37 00 00 FF 
085e8     74 E4 05 F1 | 	add	objptr, ##28276
085ec     F2 28 02 FB | 	rdlong	local06, objptr
085f0     01 28 06 F1 | 	add	local06, #1
085f4     F2 28 62 FC | 	wrlong	local06, objptr
085f8     37 00 00 FF 
085fc     74 E4 85 F1 | 	sub	objptr, ##28276
08600     F8 0E B0 FD | 	call	#_expr
08604     78 00 90 FD | 	jmp	#LR__0746
08608                 | LR__0745
08608     4A 00 00 FF 
0860c     AC E4 05 F1 | 	add	objptr, ##38060
08610     F2 28 02 FB | 	rdlong	local06, objptr
08614     14 27 02 F6 | 	mov	local05, local06
08618     01 26 66 F0 | 	shl	local05, #1
0861c     14 27 02 F1 | 	add	local05, local06
08620     02 26 66 F0 | 	shl	local05, #2
08624     03 00 00 FF 
08628     00 E4 85 F1 | 	sub	objptr, ##1536
0862c     F2 26 02 F1 | 	add	local05, objptr
08630     08 26 06 F1 | 	add	local05, #8
08634     13 39 68 FC | 	wrlong	#28, local05
08638     03 00 00 FF 
0863c     00 E4 05 F1 | 	add	objptr, ##1536
08640     F2 28 02 FB | 	rdlong	local06, objptr
08644     14 27 02 F6 | 	mov	local05, local06
08648     01 26 66 F0 | 	shl	local05, #1
0864c     14 27 02 F1 | 	add	local05, local06
08650     02 26 66 F0 | 	shl	local05, #2
08654     03 00 00 FF 
08658     00 E4 85 F1 | 	sub	objptr, ##1536
0865c     F2 26 02 F1 | 	add	local05, objptr
08660     13 03 68 FC | 	wrlong	#1, local05
08664     03 00 00 FF 
08668     00 E4 05 F1 | 	add	objptr, ##1536
0866c     F2 28 02 FB | 	rdlong	local06, objptr
08670     01 28 06 F1 | 	add	local06, #1
08674     F2 28 62 FC | 	wrlong	local06, objptr
08678     4A 00 00 FF 
0867c     AC E4 85 F1 | 	sub	objptr, ##38060
08680                 | LR__0746
08680     4A 00 00 FF 
08684     AC E4 05 F1 | 	add	objptr, ##38060
08688     F2 28 02 FB | 	rdlong	local06, objptr
0868c     14 27 02 F6 | 	mov	local05, local06
08690     01 26 66 F0 | 	shl	local05, #1
08694     14 27 02 F1 | 	add	local05, local06
08698     02 26 66 F0 | 	shl	local05, #2
0869c     03 00 00 FF 
086a0     00 E4 85 F1 | 	sub	objptr, ##1536
086a4     F2 26 02 F1 | 	add	local05, objptr
086a8     08 26 06 F1 | 	add	local05, #8
086ac     13 39 68 FC | 	wrlong	#28, local05
086b0     03 00 00 FF 
086b4     00 E4 05 F1 | 	add	objptr, ##1536
086b8     F2 28 02 FB | 	rdlong	local06, objptr
086bc     14 27 02 F6 | 	mov	local05, local06
086c0     01 26 66 F0 | 	shl	local05, #1
086c4     14 27 02 F1 | 	add	local05, local06
086c8     02 26 66 F0 | 	shl	local05, #2
086cc     03 00 00 FF 
086d0     00 E4 85 F1 | 	sub	objptr, ##1536
086d4     F2 26 02 F1 | 	add	local05, objptr
086d8     13 2B 62 FC | 	wrlong	local07, local05
086dc     03 00 00 FF 
086e0     00 E4 05 F1 | 	add	objptr, ##1536
086e4     F2 2A 02 FB | 	rdlong	local07, objptr
086e8     01 2A 06 F1 | 	add	local07, #1
086ec     F2 2A 62 FC | 	wrlong	local07, objptr
086f0     15 29 02 F6 | 	mov	local06, local07
086f4     01 28 66 F0 | 	shl	local06, #1
086f8     15 29 02 F1 | 	add	local06, local07
086fc     02 28 66 F0 | 	shl	local06, #2
08700     03 00 00 FF 
08704     00 E4 85 F1 | 	sub	objptr, ##1536
08708     F2 28 02 F1 | 	add	local06, objptr
0870c     08 28 06 F1 | 	add	local06, #8
08710     14 95 68 FC | 	wrlong	#74, local06
08714     03 00 00 FF 
08718     00 E4 05 F1 | 	add	objptr, ##1536
0871c     F2 2A 02 FB | 	rdlong	local07, objptr
08720     15 29 02 F6 | 	mov	local06, local07
08724     01 28 66 F0 | 	shl	local06, #1
08728     15 29 02 F1 | 	add	local06, local07
0872c     02 28 66 F0 | 	shl	local06, #2
08730     03 00 00 FF 
08734     00 E4 85 F1 | 	sub	objptr, ##1536
08738     F2 28 02 F1 | 	add	local06, objptr
0873c     14 01 68 FC | 	wrlong	#0, local06
08740     03 00 00 FF 
08744     00 E4 05 F1 | 	add	objptr, ##1536
08748     F2 2A 02 FB | 	rdlong	local07, objptr
0874c     01 2A 06 F1 | 	add	local07, #1
08750     F2 2A 62 FC | 	wrlong	local07, objptr
08754     4A 00 00 FF 
08758     AC E4 85 F1 | 	sub	objptr, ##38060
0875c                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
0875c                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
0875c                 | ' 
0875c                 | ' 
0875c                 | ' return 0
0875c     00 FA 05 F6 | 	mov	result1, #0
08760                 | LR__0747
08760     A7 F0 03 F6 | 	mov	ptra, fp
08764     B2 00 A0 FD | 	call	#popregs_
08768                 | _compile_for_ret
08768     2D 00 64 FD | 	ret
0876c                 | 
0876c                 | ' 
0876c                 | ' 
0876c                 | ' sub do_gosub()
0876c                 | _do_gosub
0876c     58 00 00 FF 
08770     18 E5 05 F1 | 	add	objptr, ##45336
08774     F2 00 02 FB | 	rdlong	_var01, objptr
08778     01 00 06 F1 | 	add	_var01, #1
0877c     F2 00 62 FC | 	wrlong	_var01, objptr
08780                 | ' gosubtop+=1
08780                 | ' if compiledline(lineptr_e+1).result_type=token_end then
08780     0E 00 00 FF 
08784     68 E4 85 F1 | 	sub	objptr, ##7272
08788     F2 00 02 FB | 	rdlong	_var01, objptr
0878c     01 00 06 F1 | 	add	_var01, #1
08790     00 03 02 F6 | 	mov	_var02, _var01
08794     01 02 66 F0 | 	shl	_var02, #1
08798     00 03 02 F1 | 	add	_var02, _var01
0879c     02 02 66 F0 | 	shl	_var02, #2
087a0     03 00 00 FF 
087a4     04 E4 85 F1 | 	sub	objptr, ##1540
087a8     F2 02 02 F1 | 	add	_var02, objptr
087ac     08 02 06 F1 | 	add	_var02, #8
087b0     01 03 02 FB | 	rdlong	_var02, _var02
087b4     FE 03 0E F2 | 	cmp	_var02, #510 wz
087b8     47 00 00 FF 
087bc     AC E4 85 F1 | 	sub	objptr, ##36524
087c0     58 00 90 5D |  if_ne	jmp	#LR__0750
087c4     58 00 00 FF 
087c8     18 E5 05 F1 | 	add	objptr, ##45336
087cc     F2 02 02 FB | 	rdlong	_var02, objptr
087d0     03 02 66 F0 | 	shl	_var02, #3
087d4     03 00 00 FF 
087d8     38 E5 85 F1 | 	sub	objptr, ##1848
087dc     F2 02 02 F1 | 	add	_var02, objptr
087e0     03 00 00 FF 
087e4     0C E5 05 F1 | 	add	objptr, ##1804
087e8     F2 00 02 FB | 	rdlong	_var01, objptr
087ec     01 01 62 FC | 	wrlong	_var01, _var02
087f0     2C E4 05 F1 | 	add	objptr, #44
087f4     F2 02 02 FB | 	rdlong	_var02, objptr
087f8     03 02 66 F0 | 	shl	_var02, #3
087fc     03 00 00 FF 
08800     38 E5 85 F1 | 	sub	objptr, ##1848
08804     F2 02 02 F1 | 	add	_var02, objptr
08808     04 02 06 F1 | 	add	_var02, #4
0880c     01 01 68 FC | 	wrlong	#0, _var02
08810     54 00 00 FF 
08814     E0 E5 85 F1 | 	sub	objptr, ##43488
08818     64 00 90 FD | 	jmp	#LR__0751
0881c                 | LR__0750
0881c     58 00 00 FF 
08820     18 E5 05 F1 | 	add	objptr, ##45336
08824     F2 02 02 FB | 	rdlong	_var02, objptr
08828     03 02 66 F0 | 	shl	_var02, #3
0882c     03 00 00 FF 
08830     38 E5 85 F1 | 	sub	objptr, ##1848
08834     F2 02 02 F1 | 	add	_var02, objptr
08838     03 00 00 FF 
0883c     14 E5 05 F1 | 	add	objptr, ##1812
08840     F2 00 02 FB | 	rdlong	_var01, objptr
08844     01 01 62 FC | 	wrlong	_var01, _var02
08848     24 E4 05 F1 | 	add	objptr, #36
0884c     F2 02 02 FB | 	rdlong	_var02, objptr
08850     03 02 66 F0 | 	shl	_var02, #3
08854     03 00 00 FF 
08858     38 E5 85 F1 | 	sub	objptr, ##1848
0885c     F2 02 02 F1 | 	add	_var02, objptr
08860     0A 00 00 FF 
08864     30 E5 85 F1 | 	sub	objptr, ##5424
08868     F2 00 02 FB | 	rdlong	_var01, objptr
0886c     4A 00 00 FF 
08870     B0 E4 85 F1 | 	sub	objptr, ##38064
08874     02 00 06 F1 | 	add	_var01, #2
08878     04 02 06 F1 | 	add	_var02, #4
0887c     01 01 62 FC | 	wrlong	_var01, _var02
08880                 | LR__0751
08880                 | _do_gosub_ret
08880     2D 00 64 FD | 	ret
08884                 | 
08884                 | ' 
08884                 | ' 
08884                 | ' sub do_for()
08884                 | _do_for
08884     01 4A 05 F6 | 	mov	COUNT_, #1
08888     A8 00 A0 FD | 	call	#pushregs_
0888c     10 F0 07 F1 | 	add	ptra, #16
08890     58 00 00 FF 
08894     14 E5 05 F1 | 	add	objptr, ##45332
08898     F2 12 02 FB | 	rdlong	arg01, objptr
0889c     01 12 06 F1 | 	add	arg01, #1
088a0     F2 12 62 FC | 	wrlong	arg01, objptr
088a4     58 00 00 FF 
088a8     14 E5 85 F1 | 	sub	objptr, ##45332
088ac     8C 22 B0 FD | 	call	#_pop
088b0     A7 FA 61 FC | 	wrlong	result1, fp
088b4     04 4E 05 F1 | 	add	fp, #4
088b8     A7 FC 61 FC | 	wrlong	result2, fp
088bc     04 4E 05 F1 | 	add	fp, #4
088c0     A7 FE 61 FC | 	wrlong	result3, fp
088c4     08 4E 85 F1 | 	sub	fp, #8
088c8     58 00 00 FF 
088cc     14 E5 05 F1 | 	add	objptr, ##45332
088d0     F2 12 02 FB | 	rdlong	arg01, objptr
088d4     09 1F 02 F6 | 	mov	local01, arg01
088d8     02 1E 66 F0 | 	shl	local01, #2
088dc     09 1F 02 F1 | 	add	local01, arg01
088e0     02 1E 66 F0 | 	shl	local01, #2
088e4     06 00 00 FF 
088e8     48 E4 85 F1 | 	sub	objptr, ##3144
088ec     F2 1E 02 F1 | 	add	local01, objptr
088f0     A7 12 02 FB | 	rdlong	arg01, fp
088f4     08 1E 06 F1 | 	add	local01, #8
088f8     0F 13 62 FC | 	wrlong	arg01, local01
088fc     52 00 00 FF 
08900     CC E4 85 F1 | 	sub	objptr, ##42188
08904     34 22 B0 FD | 	call	#_pop
08908     A7 FA 61 FC | 	wrlong	result1, fp
0890c     04 4E 05 F1 | 	add	fp, #4
08910     A7 FC 61 FC | 	wrlong	result2, fp
08914     04 4E 05 F1 | 	add	fp, #4
08918     A7 FE 61 FC | 	wrlong	result3, fp
0891c     08 4E 85 F1 | 	sub	fp, #8
08920     58 00 00 FF 
08924     14 E5 05 F1 | 	add	objptr, ##45332
08928     F2 12 02 FB | 	rdlong	arg01, objptr
0892c     09 1F 02 F6 | 	mov	local01, arg01
08930     02 1E 66 F0 | 	shl	local01, #2
08934     09 1F 02 F1 | 	add	local01, arg01
08938     02 1E 66 F0 | 	shl	local01, #2
0893c     06 00 00 FF 
08940     48 E4 85 F1 | 	sub	objptr, ##3144
08944     F2 1E 02 F1 | 	add	local01, objptr
08948     A7 12 02 F6 | 	mov	arg01, fp
0894c     52 00 00 FF 
08950     CC E4 85 F1 | 	sub	objptr, ##42188
08954     5C B5 B0 FD | 	call	#_converttoint
08958     FD 12 02 F6 | 	mov	arg01, result1
0895c     0C 1E 06 F1 | 	add	local01, #12
08960     0F 13 62 FC | 	wrlong	arg01, local01
08964     D4 21 B0 FD | 	call	#_pop
08968     A7 FA 61 FC | 	wrlong	result1, fp
0896c     04 4E 05 F1 | 	add	fp, #4
08970     A7 FC 61 FC | 	wrlong	result2, fp
08974     04 4E 05 F1 | 	add	fp, #4
08978     A7 FE 61 FC | 	wrlong	result3, fp
0897c     08 4E 85 F1 | 	sub	fp, #8
08980     58 00 00 FF 
08984     14 E5 05 F1 | 	add	objptr, ##45332
08988     F2 12 02 FB | 	rdlong	arg01, objptr
0898c     09 1F 02 F6 | 	mov	local01, arg01
08990     02 1E 66 F0 | 	shl	local01, #2
08994     09 1F 02 F1 | 	add	local01, arg01
08998     02 1E 66 F0 | 	shl	local01, #2
0899c     06 00 00 FF 
089a0     48 E4 85 F1 | 	sub	objptr, ##3144
089a4     F2 1E 02 F1 | 	add	local01, objptr
089a8     A7 12 02 F6 | 	mov	arg01, fp
089ac     52 00 00 FF 
089b0     CC E4 85 F1 | 	sub	objptr, ##42188
089b4     FC B4 B0 FD | 	call	#_converttoint
089b8     10 1E 06 F1 | 	add	local01, #16
089bc     0F FB 61 FC | 	wrlong	result1, local01
089c0                 | ' fortop+=1
089c0                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
089c0                 | ' 'if i> maxfor then printerror(36) : return
089c0                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
089c0                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
089c0                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
089c0                 | ' if compiledline(lineptr_e).result_type=token_end then
089c0     4A 00 00 FF 
089c4     B0 E4 05 F1 | 	add	objptr, ##38064
089c8     F2 12 02 FB | 	rdlong	arg01, objptr
089cc     09 1F 02 F6 | 	mov	local01, arg01
089d0     01 1E 66 F0 | 	shl	local01, #1
089d4     09 1F 02 F1 | 	add	local01, arg01
089d8     02 1E 66 F0 | 	shl	local01, #2
089dc     03 00 00 FF 
089e0     04 E4 85 F1 | 	sub	objptr, ##1540
089e4     F2 1E 02 F1 | 	add	local01, objptr
089e8     08 1E 06 F1 | 	add	local01, #8
089ec     0F 1F 02 FB | 	rdlong	local01, local01
089f0     FE 1F 0E F2 | 	cmp	local01, #510 wz
089f4     47 00 00 FF 
089f8     AC E4 85 F1 | 	sub	objptr, ##36524
089fc     70 00 90 5D |  if_ne	jmp	#LR__0760
08a00     58 00 00 FF 
08a04     14 E5 05 F1 | 	add	objptr, ##45332
08a08     F2 12 02 FB | 	rdlong	arg01, objptr
08a0c     09 1F 02 F6 | 	mov	local01, arg01
08a10     02 1E 66 F0 | 	shl	local01, #2
08a14     09 1F 02 F1 | 	add	local01, arg01
08a18     02 1E 66 F0 | 	shl	local01, #2
08a1c     06 00 00 FF 
08a20     48 E4 85 F1 | 	sub	objptr, ##3144
08a24     F2 1E 02 F1 | 	add	local01, objptr
08a28     06 00 00 FF 
08a2c     20 E4 05 F1 | 	add	objptr, ##3104
08a30     F2 12 02 FB | 	rdlong	arg01, objptr
08a34     0F 13 62 FC | 	wrlong	arg01, local01
08a38     28 E4 05 F1 | 	add	objptr, #40
08a3c     F2 12 02 FB | 	rdlong	arg01, objptr
08a40     09 1F 02 F6 | 	mov	local01, arg01
08a44     02 1E 66 F0 | 	shl	local01, #2
08a48     09 1F 02 F1 | 	add	local01, arg01
08a4c     02 1E 66 F0 | 	shl	local01, #2
08a50     06 00 00 FF 
08a54     48 E4 85 F1 | 	sub	objptr, ##3144
08a58     F2 1E 02 F1 | 	add	local01, objptr
08a5c     04 1E 06 F1 | 	add	local01, #4
08a60     0F 01 68 FC | 	wrlong	#0, local01
08a64     52 00 00 FF 
08a68     CC E4 85 F1 | 	sub	objptr, ##42188
08a6c     7C 00 90 FD | 	jmp	#LR__0761
08a70                 | LR__0760
08a70     58 00 00 FF 
08a74     14 E5 05 F1 | 	add	objptr, ##45332
08a78     F2 12 02 FB | 	rdlong	arg01, objptr
08a7c     09 1F 02 F6 | 	mov	local01, arg01
08a80     02 1E 66 F0 | 	shl	local01, #2
08a84     09 1F 02 F1 | 	add	local01, arg01
08a88     02 1E 66 F0 | 	shl	local01, #2
08a8c     06 00 00 FF 
08a90     48 E4 85 F1 | 	sub	objptr, ##3144
08a94     F2 1E 02 F1 | 	add	local01, objptr
08a98     06 00 00 FF 
08a9c     28 E4 05 F1 | 	add	objptr, ##3112
08aa0     F2 12 02 FB | 	rdlong	arg01, objptr
08aa4     0F 13 62 FC | 	wrlong	arg01, local01
08aa8     20 E4 05 F1 | 	add	objptr, #32
08aac     F2 12 02 FB | 	rdlong	arg01, objptr
08ab0     09 1F 02 F6 | 	mov	local01, arg01
08ab4     02 1E 66 F0 | 	shl	local01, #2
08ab8     09 1F 02 F1 | 	add	local01, arg01
08abc     02 1E 66 F0 | 	shl	local01, #2
08ac0     06 00 00 FF 
08ac4     48 E4 85 F1 | 	sub	objptr, ##3144
08ac8     F2 1E 02 F1 | 	add	local01, objptr
08acc     08 00 00 FF 
08ad0     1C E4 85 F1 | 	sub	objptr, ##4124
08ad4     F2 12 02 FB | 	rdlong	arg01, objptr
08ad8     4A 00 00 FF 
08adc     B0 E4 85 F1 | 	sub	objptr, ##38064
08ae0     01 12 06 F1 | 	add	arg01, #1
08ae4     04 1E 06 F1 | 	add	local01, #4
08ae8     0F 13 62 FC | 	wrlong	arg01, local01
08aec                 | LR__0761
08aec     A7 F0 03 F6 | 	mov	ptra, fp
08af0     B2 00 A0 FD | 	call	#popregs_
08af4                 | _do_for_ret
08af4     2D 00 64 FD | 	ret
08af8                 | 
08af8                 | ' 
08af8                 | ' ' now do_next todo
08af8                 | ' 
08af8                 | ' sub do_return()
08af8                 | _do_return
08af8                 | ' if gosubtop>0 then
08af8     58 00 00 FF 
08afc     18 E5 05 F1 | 	add	objptr, ##45336
08b00     F2 00 02 FB | 	rdlong	_var01, objptr
08b04     58 00 00 FF 
08b08     18 E5 85 F1 | 	sub	objptr, ##45336
08b0c     01 00 56 F2 | 	cmps	_var01, #1 wc
08b10     8C 00 90 CD |  if_b	jmp	#LR__0770
08b14     58 00 00 FF 
08b18     18 E5 05 F1 | 	add	objptr, ##45336
08b1c     F2 00 02 FB | 	rdlong	_var01, objptr
08b20     03 00 66 F0 | 	shl	_var01, #3
08b24     03 00 00 FF 
08b28     38 E5 85 F1 | 	sub	objptr, ##1848
08b2c     F2 00 02 F1 | 	add	_var01, objptr
08b30     00 01 02 FB | 	rdlong	_var01, _var01
08b34     03 00 00 FF 
08b38     0C E5 05 F1 | 	add	objptr, ##1804
08b3c     F2 00 62 FC | 	wrlong	_var01, objptr
08b40     2C E4 05 F1 | 	add	objptr, #44
08b44     F2 00 02 FB | 	rdlong	_var01, objptr
08b48     03 00 66 F0 | 	shl	_var01, #3
08b4c     03 00 00 FF 
08b50     38 E5 85 F1 | 	sub	objptr, ##1848
08b54     F2 00 02 F1 | 	add	_var01, objptr
08b58     04 00 06 F1 | 	add	_var01, #4
08b5c     00 01 02 FB | 	rdlong	_var01, _var01
08b60     03 00 00 FF 
08b64     10 E5 05 F1 | 	add	objptr, ##1808
08b68     F2 00 62 FC | 	wrlong	_var01, objptr
08b6c     0E 00 00 FF 
08b70     44 E4 85 F1 | 	sub	objptr, ##7236
08b74     F2 00 02 FB | 	rdlong	_var01, objptr
08b78     01 00 86 F1 | 	sub	_var01, #1
08b7c     04 E4 05 F1 | 	add	objptr, #4
08b80     F2 00 62 FC | 	wrlong	_var01, objptr
08b84     0E 00 00 FF 
08b88     68 E4 05 F1 | 	add	objptr, ##7272
08b8c     F2 00 02 FB | 	rdlong	_var01, objptr
08b90     01 00 86 F1 | 	sub	_var01, #1
08b94     F2 00 62 FC | 	wrlong	_var01, objptr
08b98     58 00 00 FF 
08b9c     18 E5 85 F1 | 	sub	objptr, ##45336
08ba0                 | LR__0770
08ba0                 | _do_return_ret
08ba0     2D 00 64 FD | 	ret
08ba4                 | 
08ba4                 | ' 
08ba4                 | ' sub do_pop()
08ba4                 | _do_pop
08ba4                 | ' if gosubtop>0 then  gosubtop -=1 
08ba4     58 00 00 FF 
08ba8     18 E5 05 F1 | 	add	objptr, ##45336
08bac     F2 00 02 FB | 	rdlong	_var01, objptr
08bb0     58 00 00 FF 
08bb4     18 E5 85 F1 | 	sub	objptr, ##45336
08bb8     01 00 56 F2 | 	cmps	_var01, #1 wc
08bbc     58 00 00 3F 
08bc0     18 E5 05 31 |  if_ae	add	objptr, ##45336
08bc4     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
08bc8     01 00 86 31 |  if_ae	sub	_var01, #1
08bcc     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
08bd0     58 00 00 3F 
08bd4     18 E5 85 31 |  if_ae	sub	objptr, ##45336
08bd8                 | _do_pop_ret
08bd8     2D 00 64 FD | 	ret
08bdc                 | 
08bdc                 | ' 
08bdc                 | ' sub do_next()
08bdc                 | _do_next
08bdc     04 4A 05 F6 | 	mov	COUNT_, #4
08be0     A8 00 A0 FD | 	call	#pushregs_
08be4     54 1F B0 FD | 	call	#_pop
08be8     FD 1E 02 F6 | 	mov	local01, result1
08bec     FE 20 02 F6 | 	mov	local02, result2
08bf0     FF 22 02 F6 | 	mov	local03, result3
08bf4                 | ' 
08bf4                 | ' t1=pop() :varnum=t1.result.uresult
08bf4                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
08bf4     58 00 00 FF 
08bf8     14 E5 05 F1 | 	add	objptr, ##45332
08bfc     F2 12 02 FB | 	rdlong	arg01, objptr
08c00     09 15 02 F6 | 	mov	arg02, arg01
08c04     02 14 66 F0 | 	shl	arg02, #2
08c08     09 15 02 F1 | 	add	arg02, arg01
08c0c     02 14 66 F0 | 	shl	arg02, #2
08c10     06 00 00 FF 
08c14     48 E4 85 F1 | 	sub	objptr, ##3144
08c18     F2 14 02 F1 | 	add	arg02, objptr
08c1c     08 14 06 F1 | 	add	arg02, #8
08c20     0A 15 02 FB | 	rdlong	arg02, arg02
08c24     0F 15 0A F2 | 	cmp	arg02, local01 wz
08c28     52 00 00 FF 
08c2c     CC E4 85 F1 | 	sub	objptr, ##42188
08c30     0C 00 90 AD |  if_e	jmp	#LR__0780
08c34     25 12 06 F6 | 	mov	arg01, #37
08c38     18 27 B1 FD | 	call	#_printerror
08c3c     A8 02 90 FD | 	jmp	#LR__0785
08c40                 | LR__0780
08c40                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
08c40     0F 15 02 F6 | 	mov	arg02, local01
08c44     04 14 66 F0 | 	shl	arg02, #4
08c48     15 00 00 FF 
08c4c     28 E4 05 F1 | 	add	objptr, ##10792
08c50     F2 14 02 F1 | 	add	arg02, objptr
08c54     0C 14 06 F1 | 	add	arg02, #12
08c58     0A 15 02 FB | 	rdlong	arg02, arg02
08c5c     1E 14 0E F2 | 	cmp	arg02, #30 wz
08c60     15 00 00 FF 
08c64     28 E4 85 F1 | 	sub	objptr, ##10792
08c68     54 00 90 5D |  if_ne	jmp	#LR__0781
08c6c     0F 15 02 F6 | 	mov	arg02, local01
08c70     04 14 66 F0 | 	shl	arg02, #4
08c74     15 00 00 FF 
08c78     28 E4 05 F1 | 	add	objptr, ##10792
08c7c     F2 14 02 F1 | 	add	arg02, objptr
08c80     0C 14 06 F1 | 	add	arg02, #12
08c84     0A 39 68 FC | 	wrlong	#28, arg02
08c88     0F 25 02 F6 | 	mov	local04, local01
08c8c     04 24 66 F0 | 	shl	local04, #4
08c90     F2 24 02 F1 | 	add	local04, objptr
08c94     0F 13 02 F6 | 	mov	arg01, local01
08c98     04 12 66 F0 | 	shl	arg01, #4
08c9c     F2 12 02 F1 | 	add	arg01, objptr
08ca0     04 12 06 F1 | 	add	arg01, #4
08ca4     09 13 02 FB | 	rdlong	arg01, arg01
08ca8     15 00 00 FF 
08cac     28 E4 85 F1 | 	sub	objptr, ##10792
08cb0     01 14 06 F6 | 	mov	arg02, #1
08cb4     54 9B B1 FD | 	call	#__system___float_tointeger
08cb8     04 24 06 F1 | 	add	local04, #4
08cbc     12 FB 61 FC | 	wrlong	result1, local04
08cc0                 | LR__0781
08cc0     58 00 00 FF 
08cc4     14 E5 05 F1 | 	add	objptr, ##45332
08cc8     F2 12 02 FB | 	rdlong	arg01, objptr
08ccc     09 25 02 F6 | 	mov	local04, arg01
08cd0     02 24 66 F0 | 	shl	local04, #2
08cd4     09 25 02 F1 | 	add	local04, arg01
08cd8     02 24 66 F0 | 	shl	local04, #2
08cdc     06 00 00 FF 
08ce0     48 E4 85 F1 | 	sub	objptr, ##3144
08ce4     F2 24 02 F1 | 	add	local04, objptr
08ce8     0C 24 06 F1 | 	add	local04, #12
08cec     12 25 02 FB | 	rdlong	local04, local04
08cf0     0F 13 02 F6 | 	mov	arg01, local01
08cf4     04 12 66 F0 | 	shl	arg01, #4
08cf8     3D 00 00 FF 
08cfc     A4 E4 85 F1 | 	sub	objptr, ##31396
08d00     F2 12 02 F1 | 	add	arg01, objptr
08d04     0F FF 01 F6 | 	mov	result3, local01
08d08     04 FE 65 F0 | 	shl	result3, #4
08d0c     F2 FE 01 F1 | 	add	result3, objptr
08d10     04 FE 05 F1 | 	add	result3, #4
08d14     FF FE 01 FB | 	rdlong	result3, result3
08d18     12 FF 01 F1 | 	add	result3, local04
08d1c     04 12 06 F1 | 	add	arg01, #4
08d20     09 FF 61 FC | 	wrlong	result3, arg01
08d24                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
08d24                 | ' if fortable(fortop).stepval>=0 then
08d24     43 00 00 FF 
08d28     EC E4 05 F1 | 	add	objptr, ##34540
08d2c     F2 12 02 FB | 	rdlong	arg01, objptr
08d30     09 25 02 F6 | 	mov	local04, arg01
08d34     02 24 66 F0 | 	shl	local04, #2
08d38     09 25 02 F1 | 	add	local04, arg01
08d3c     02 24 66 F0 | 	shl	local04, #2
08d40     06 00 00 FF 
08d44     48 E4 85 F1 | 	sub	objptr, ##3144
08d48     F2 24 02 F1 | 	add	local04, objptr
08d4c     0C 24 06 F1 | 	add	local04, #12
08d50     12 25 02 FB | 	rdlong	local04, local04
08d54     00 24 56 F2 | 	cmps	local04, #0 wc
08d58     52 00 00 FF 
08d5c     CC E4 85 F1 | 	sub	objptr, ##42188
08d60     78 00 90 CD |  if_b	jmp	#LR__0782
08d64                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
08d64     04 1E 66 F0 | 	shl	local01, #4
08d68     15 00 00 FF 
08d6c     28 E4 05 F1 | 	add	objptr, ##10792
08d70     F2 1E 02 F1 | 	add	local01, objptr
08d74     43 00 00 FF 
08d78     EC E4 05 F1 | 	add	objptr, ##34540
08d7c     F2 24 02 FB | 	rdlong	local04, objptr
08d80     12 13 02 F6 | 	mov	arg01, local04
08d84     02 12 66 F0 | 	shl	arg01, #2
08d88     12 13 02 F1 | 	add	arg01, local04
08d8c     02 12 66 F0 | 	shl	arg01, #2
08d90     06 00 00 FF 
08d94     48 E4 85 F1 | 	sub	objptr, ##3144
08d98     F2 12 02 F1 | 	add	arg01, objptr
08d9c     04 1E 06 F1 | 	add	local01, #4
08da0     0F 25 02 FB | 	rdlong	local04, local01
08da4     10 12 06 F1 | 	add	arg01, #16
08da8     09 13 02 FB | 	rdlong	arg01, arg01
08dac     09 25 5A F2 | 	cmps	local04, arg01 wcz
08db0     52 00 00 FF 
08db4     CC E4 85 F1 | 	sub	objptr, ##42188
08db8     9C 00 90 ED |  if_be	jmp	#LR__0784
08dbc     58 00 00 FF 
08dc0     14 E5 05 F1 | 	add	objptr, ##45332
08dc4     F2 24 02 FB | 	rdlong	local04, objptr
08dc8     01 24 86 F1 | 	sub	local04, #1
08dcc     F2 24 62 FC | 	wrlong	local04, objptr
08dd0     58 00 00 FF 
08dd4     14 E5 85 F1 | 	sub	objptr, ##45332
08dd8     0C 01 90 FD | 	jmp	#LR__0785
08ddc                 | LR__0782
08ddc                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
08ddc     0F 13 02 F6 | 	mov	arg01, local01
08de0     04 12 66 F0 | 	shl	arg01, #4
08de4     15 00 00 FF 
08de8     28 E4 05 F1 | 	add	objptr, ##10792
08dec     F2 12 02 F1 | 	add	arg01, objptr
08df0     43 00 00 FF 
08df4     EC E4 05 F1 | 	add	objptr, ##34540
08df8     F2 24 02 FB | 	rdlong	local04, objptr
08dfc     12 1F 02 F6 | 	mov	local01, local04
08e00     02 1E 66 F0 | 	shl	local01, #2
08e04     12 1F 02 F1 | 	add	local01, local04
08e08     02 1E 66 F0 | 	shl	local01, #2
08e0c     06 00 00 FF 
08e10     48 E4 85 F1 | 	sub	objptr, ##3144
08e14     F2 1E 02 F1 | 	add	local01, objptr
08e18     04 12 06 F1 | 	add	arg01, #4
08e1c     09 13 02 FB | 	rdlong	arg01, arg01
08e20     10 1E 06 F1 | 	add	local01, #16
08e24     0F 1F 02 FB | 	rdlong	local01, local01
08e28     0F 13 52 F2 | 	cmps	arg01, local01 wc
08e2c     52 00 00 FF 
08e30     CC E4 85 F1 | 	sub	objptr, ##42188
08e34     20 00 90 3D |  if_ae	jmp	#LR__0783
08e38     58 00 00 FF 
08e3c     14 E5 05 F1 | 	add	objptr, ##45332
08e40     F2 24 02 FB | 	rdlong	local04, objptr
08e44     01 24 86 F1 | 	sub	local04, #1
08e48     F2 24 62 FC | 	wrlong	local04, objptr
08e4c     58 00 00 FF 
08e50     14 E5 85 F1 | 	sub	objptr, ##45332
08e54     90 00 90 FD | 	jmp	#LR__0785
08e58                 | LR__0783
08e58                 | LR__0784
08e58     58 00 00 FF 
08e5c     14 E5 05 F1 | 	add	objptr, ##45332
08e60     F2 1E 02 FB | 	rdlong	local01, objptr
08e64     0F 25 02 F6 | 	mov	local04, local01
08e68     02 24 66 F0 | 	shl	local04, #2
08e6c     0F 25 02 F1 | 	add	local04, local01
08e70     02 24 66 F0 | 	shl	local04, #2
08e74     06 00 00 FF 
08e78     48 E4 85 F1 | 	sub	objptr, ##3144
08e7c     F2 24 02 F1 | 	add	local04, objptr
08e80     12 25 02 FB | 	rdlong	local04, local04
08e84     06 00 00 FF 
08e88     20 E4 05 F1 | 	add	objptr, ##3104
08e8c     F2 24 62 FC | 	wrlong	local04, objptr
08e90     28 E4 05 F1 | 	add	objptr, #40
08e94     F2 1E 02 FB | 	rdlong	local01, objptr
08e98     0F 25 02 F6 | 	mov	local04, local01
08e9c     02 24 66 F0 | 	shl	local04, #2
08ea0     0F 25 02 F1 | 	add	local04, local01
08ea4     02 24 66 F0 | 	shl	local04, #2
08ea8     06 00 00 FF 
08eac     48 E4 85 F1 | 	sub	objptr, ##3144
08eb0     F2 24 02 F1 | 	add	local04, objptr
08eb4     04 24 06 F1 | 	add	local04, #4
08eb8     12 25 02 FB | 	rdlong	local04, local04
08ebc     06 00 00 FF 
08ec0     24 E4 05 F1 | 	add	objptr, ##3108
08ec4     F2 24 62 FC | 	wrlong	local04, objptr
08ec8     0E 00 00 FF 
08ecc     44 E4 85 F1 | 	sub	objptr, ##7236
08ed0     F2 24 02 FB | 	rdlong	local04, objptr
08ed4     01 24 86 F1 | 	sub	local04, #1
08ed8     04 E4 05 F1 | 	add	objptr, #4
08edc     F2 24 62 FC | 	wrlong	local04, objptr
08ee0     4A 00 00 FF 
08ee4     B0 E4 85 F1 | 	sub	objptr, ##38064
08ee8                 | LR__0785
08ee8     A7 F0 03 F6 | 	mov	ptra, fp
08eec     B2 00 A0 FD | 	call	#popregs_
08ef0                 | _do_next_ret
08ef0     2D 00 64 FD | 	ret
08ef4                 | 
08ef4                 | ' 
08ef4                 | ' 
08ef4                 | ' function compile_next() as ulong
08ef4                 | _compile_next
08ef4     04 4A 05 F6 | 	mov	COUNT_, #4
08ef8     A8 00 A0 FD | 	call	#pushregs_
08efc     37 00 00 FF 
08f00     74 E4 05 F1 | 	add	objptr, ##28276
08f04     F2 12 02 FB | 	rdlong	arg01, objptr
08f08     03 12 66 F0 | 	shl	arg01, #3
08f0c     02 00 00 FF 
08f10     38 E4 85 F1 | 	sub	objptr, ##1080
08f14     F2 12 02 F1 | 	add	arg01, objptr
08f18     09 1F 02 FB | 	rdlong	local01, arg01
08f1c                 | ' 
08f1c                 | ' varname$=lparts(ct).part$ 
08f1c                 | ' 'suffix$=right$(varname$,1)
08f1c                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
08f1c                 | ' if varnum=0 then compile_error(35)  : return 35
08f1c     04 E4 85 F1 | 	sub	objptr, #4
08f20     F2 14 0A FB | 	rdlong	arg02, objptr wz
08f24     35 00 00 FF 
08f28     38 E4 85 F1 | 	sub	objptr, ##27192
08f2c     10 00 90 5D |  if_ne	jmp	#LR__0790
08f30     23 12 06 F6 | 	mov	arg01, #35
08f34     80 DE BF FD | 	call	#_compile_error
08f38     23 FA 05 F6 | 	mov	result1, #35
08f3c     58 01 90 FD | 	jmp	#LR__0794
08f40                 | LR__0790
08f40     01 20 66 F6 | 	neg	local02, #1
08f44                 | ' j=-1
08f44                 | ' for i=0 to varnum-1
08f44     00 22 06 F6 | 	mov	local03, #0
08f48     35 00 00 FF 
08f4c     38 E4 05 F1 | 	add	objptr, ##27192
08f50     F2 24 02 FB | 	rdlong	local04, objptr
08f54     35 00 00 FF 
08f58     38 E4 85 F1 | 	sub	objptr, ##27192
08f5c                 | LR__0791
08f5c     12 23 12 F2 | 	cmp	local03, local04 wc
08f60     38 00 90 3D |  if_ae	jmp	#LR__0792
08f64                 | '   if variables(i).name=varname$ then j=i : exit
08f64     11 15 02 F6 | 	mov	arg02, local03
08f68     04 14 66 F0 | 	shl	arg02, #4
08f6c     15 00 00 FF 
08f70     28 E4 05 F1 | 	add	objptr, ##10792
08f74     F2 14 02 F1 | 	add	arg02, objptr
08f78     0A 13 02 FB | 	rdlong	arg01, arg02
08f7c     0F 15 02 F6 | 	mov	arg02, local01
08f80     15 00 00 FF 
08f84     28 E4 85 F1 | 	sub	objptr, ##10792
08f88     98 68 B1 FD | 	call	#__system___string_cmp
08f8c     00 FA 0D F2 | 	cmp	result1, #0 wz
08f90     11 21 02 A6 |  if_e	mov	local02, local03
08f94     01 22 06 51 |  if_ne	add	local03, #1
08f98     C0 FF 9F 5D |  if_ne	jmp	#LR__0791
08f9c                 | LR__0792
08f9c                 | ' if j=-1 then compile_error(35) : return 35
08f9c     FF FF 7F FF 
08fa0     FF 21 0E F2 | 	cmp	local02, ##-1 wz
08fa4     10 00 90 5D |  if_ne	jmp	#LR__0793
08fa8     23 12 06 F6 | 	mov	arg01, #35
08fac     08 DE BF FD | 	call	#_compile_error
08fb0     23 FA 05 F6 | 	mov	result1, #35
08fb4     E0 00 90 FD | 	jmp	#LR__0794
08fb8                 | LR__0793
08fb8     4A 00 00 FF 
08fbc     AC E4 05 F1 | 	add	objptr, ##38060
08fc0     F2 24 02 FB | 	rdlong	local04, objptr
08fc4     12 23 02 F6 | 	mov	local03, local04
08fc8     01 22 66 F0 | 	shl	local03, #1
08fcc     12 23 02 F1 | 	add	local03, local04
08fd0     02 22 66 F0 | 	shl	local03, #2
08fd4     03 00 00 FF 
08fd8     00 E4 85 F1 | 	sub	objptr, ##1536
08fdc     F2 22 02 F1 | 	add	local03, objptr
08fe0     08 22 06 F1 | 	add	local03, #8
08fe4     11 39 68 FC | 	wrlong	#28, local03
08fe8     03 00 00 FF 
08fec     00 E4 05 F1 | 	add	objptr, ##1536
08ff0     F2 24 02 FB | 	rdlong	local04, objptr
08ff4     12 23 02 F6 | 	mov	local03, local04
08ff8     01 22 66 F0 | 	shl	local03, #1
08ffc     12 23 02 F1 | 	add	local03, local04
09000     02 22 66 F0 | 	shl	local03, #2
09004     03 00 00 FF 
09008     00 E4 85 F1 | 	sub	objptr, ##1536
0900c     F2 22 02 F1 | 	add	local03, objptr
09010     11 21 62 FC | 	wrlong	local02, local03
09014     03 00 00 FF 
09018     00 E4 05 F1 | 	add	objptr, ##1536
0901c     F2 24 02 FB | 	rdlong	local04, objptr
09020     01 24 06 F1 | 	add	local04, #1
09024     F2 24 62 FC | 	wrlong	local04, objptr
09028     12 23 02 F6 | 	mov	local03, local04
0902c     01 22 66 F0 | 	shl	local03, #1
09030     12 23 02 F1 | 	add	local03, local04
09034     02 22 66 F0 | 	shl	local03, #2
09038     03 00 00 FF 
0903c     00 E4 85 F1 | 	sub	objptr, ##1536
09040     F2 22 02 F1 | 	add	local03, objptr
09044     08 22 06 F1 | 	add	local03, #8
09048     11 97 68 FC | 	wrlong	#75, local03
0904c     03 00 00 FF 
09050     00 E4 05 F1 | 	add	objptr, ##1536
09054     F2 24 02 FB | 	rdlong	local04, objptr
09058     12 23 02 F6 | 	mov	local03, local04
0905c     01 22 66 F0 | 	shl	local03, #1
09060     12 23 02 F1 | 	add	local03, local04
09064     02 22 66 F0 | 	shl	local03, #2
09068     03 00 00 FF 
0906c     00 E4 85 F1 | 	sub	objptr, ##1536
09070     F2 22 02 F1 | 	add	local03, objptr
09074     11 01 68 FC | 	wrlong	#0, local03
09078     03 00 00 FF 
0907c     00 E4 05 F1 | 	add	objptr, ##1536
09080     F2 24 02 FB | 	rdlong	local04, objptr
09084     01 24 06 F1 | 	add	local04, #1
09088     F2 24 62 FC | 	wrlong	local04, objptr
0908c     4A 00 00 FF 
09090     AC E4 85 F1 | 	sub	objptr, ##38060
09094                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
09094                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
09094                 | ' return 0
09094     00 FA 05 F6 | 	mov	result1, #0
09098                 | LR__0794
09098     A7 F0 03 F6 | 	mov	ptra, fp
0909c     B2 00 A0 FD | 	call	#popregs_
090a0                 | _compile_next_ret
090a0     2D 00 64 FD | 	ret
090a4                 | 
090a4                 | ' 
090a4                 | ' 
090a4                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
090a4                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
090a4                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
090a4                 | ' 
090a4                 | ' function compile_gosub() as ulong
090a4                 | _compile_gosub
090a4     01 4A 05 F6 | 	mov	COUNT_, #1
090a8     A8 00 A0 FD | 	call	#pushregs_
090ac     4A 00 00 FF 
090b0     AC E4 05 F1 | 	add	objptr, ##38060
090b4     F2 1E 02 FB | 	rdlong	local01, objptr
090b8     0F FB 01 F6 | 	mov	result1, local01
090bc     01 FA 65 F0 | 	shl	result1, #1
090c0     0F FB 01 F1 | 	add	result1, local01
090c4     02 FA 65 F0 | 	shl	result1, #2
090c8     03 00 00 FF 
090cc     00 E4 85 F1 | 	sub	objptr, ##1536
090d0     F2 FA 01 F1 | 	add	result1, objptr
090d4     08 FA 05 F1 | 	add	result1, #8
090d8     FD 52 69 FC | 	wrlong	#169, result1
090dc     03 00 00 FF 
090e0     00 E4 05 F1 | 	add	objptr, ##1536
090e4     F2 1E 02 FB | 	rdlong	local01, objptr
090e8     01 1E 06 F1 | 	add	local01, #1
090ec     F2 1E 62 FC | 	wrlong	local01, objptr
090f0     4A 00 00 FF 
090f4     AC E4 85 F1 | 	sub	objptr, ##38060
090f8     10 00 B0 FD | 	call	#_compile_goto
090fc                 | ' 
090fc                 | ' compiledline(lineptr).result_type=token_gosub
090fc                 | ' lineptr+=1
090fc                 | ' compile_goto()
090fc                 | ' return 0
090fc     00 FA 05 F6 | 	mov	result1, #0
09100     A7 F0 03 F6 | 	mov	ptra, fp
09104     B2 00 A0 FD | 	call	#popregs_
09108                 | _compile_gosub_ret
09108     2D 00 64 FD | 	ret
0910c                 | 
0910c                 | ' 
0910c                 | ' function compile_goto( ) as ulong
0910c                 | _compile_goto
0910c     03 4A 05 F6 | 	mov	COUNT_, #3
09110     A8 00 A0 FD | 	call	#pushregs_
09114     34 F0 07 F1 | 	add	ptra, #52
09118                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
09118     37 00 00 FF 
0911c     74 E4 05 F1 | 	add	objptr, ##28276
09120     F2 16 02 FB | 	rdlong	arg03, objptr
09124     03 16 66 F0 | 	shl	arg03, #3
09128     02 00 00 FF 
0912c     38 E4 85 F1 | 	sub	objptr, ##1080
09130     F2 16 02 F1 | 	add	arg03, objptr
09134     04 16 06 F1 | 	add	arg03, #4
09138     0B 17 02 FB | 	rdlong	arg03, arg03
0913c     01 00 00 FF 
09140     00 16 0E F2 | 	cmp	arg03, ##512 wz
09144     35 00 00 FF 
09148     3C E4 85 F1 | 	sub	objptr, ##27196
0914c     CC 02 90 5D |  if_ne	jmp	#LR__0805
09150     37 00 00 FF 
09154     74 E4 05 F1 | 	add	objptr, ##28276
09158     F2 16 02 FB | 	rdlong	arg03, objptr
0915c     01 16 06 F1 | 	add	arg03, #1
09160     03 16 66 F0 | 	shl	arg03, #3
09164     02 00 00 FF 
09168     38 E4 85 F1 | 	sub	objptr, ##1080
0916c     F2 16 02 F1 | 	add	arg03, objptr
09170     04 16 06 F1 | 	add	arg03, #4
09174     0B 17 02 FB | 	rdlong	arg03, arg03
09178     FE 17 0E F2 | 	cmp	arg03, #510 wz
0917c     35 00 00 FF 
09180     3C E4 85 F1 | 	sub	objptr, ##27196
09184     94 02 90 5D |  if_ne	jmp	#LR__0805
09188     37 00 00 FF 
0918c     74 E4 05 F1 | 	add	objptr, ##28276
09190     F2 16 02 FB | 	rdlong	arg03, objptr
09194     03 16 66 F0 | 	shl	arg03, #3
09198     02 00 00 FF 
0919c     38 E4 85 F1 | 	sub	objptr, ##1080
091a0     F2 16 02 F1 | 	add	arg03, objptr
091a4     0B 13 02 FB | 	rdlong	arg01, arg03
091a8     00 14 06 F6 | 	mov	arg02, #0
091ac     35 00 00 FF 
091b0     3C E4 85 F1 | 	sub	objptr, ##27196
091b4     04 98 B1 FD | 	call	#__system____builtin_atoi
091b8     04 4E 05 F1 | 	add	fp, #4
091bc     A7 FA 61 FC | 	wrlong	result1, fp
091c0     4A 00 00 FF 
091c4     AC E4 05 F1 | 	add	objptr, ##38060
091c8     F2 1E 02 FB | 	rdlong	local01, objptr
091cc     0F 21 02 F6 | 	mov	local02, local01
091d0     01 20 66 F0 | 	shl	local02, #1
091d4     0F 21 02 F1 | 	add	local02, local01
091d8     02 20 66 F0 | 	shl	local02, #2
091dc     03 00 00 FF 
091e0     00 E4 85 F1 | 	sub	objptr, ##1536
091e4     F2 20 02 F1 | 	add	local02, objptr
091e8     08 20 06 F1 | 	add	local02, #8
091ec     10 9D 68 FC | 	wrlong	#78, local02
091f0     03 00 00 FF 
091f4     08 E4 05 F1 | 	add	objptr, ##1544
091f8     F2 22 02 FB | 	rdlong	local03, objptr
091fc     4A 00 00 FF 
09200     B4 E4 85 F1 | 	sub	objptr, ##38068
09204     04 4E 05 F1 | 	add	fp, #4
09208     A7 22 62 FC | 	wrlong	local03, fp
0920c     08 4E 85 F1 | 	sub	fp, #8
09210                 | ' 
09210                 | '   gotoline=val%(lparts(ct).part$) 
09210                 | '   compiledline(lineptr).result_type=token_fast_goto
09210                 | ' ' now find a pointer to goto
09210                 | '   gotoptr=programstart
09210                 | '   do
09210                 | LR__0800
09210     10 4E 05 F1 | 	add	fp, #16
09214     A7 12 02 F6 | 	mov	arg01, fp
09218     08 4E 85 F1 | 	sub	fp, #8
0921c     A7 14 02 FB | 	rdlong	arg02, fp
09220     08 4E 85 F1 | 	sub	fp, #8
09224     18 16 06 F6 | 	mov	arg03, #24
09228     0B 00 00 FF 
0922c     CC E4 05 F1 | 	add	objptr, ##5836
09230     88 59 B1 FD | 	call	#_psram_spin2_read1
09234     0B 00 00 FF 
09238     CC E4 85 F1 | 	sub	objptr, ##5836
0923c                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
0923c                 | '     if gotoheader(0)<>$FFFFFFFF then
0923c     10 4E 05 F1 | 	add	fp, #16
09240     A7 22 02 FB | 	rdlong	local03, fp
09244     10 4E 85 F1 | 	sub	fp, #16
09248     FF FF 7F FF 
0924c     FF 23 0E F2 | 	cmp	local03, ##-1 wz
09250     24 00 90 AD |  if_e	jmp	#LR__0801
09254     08 4E 05 F1 | 	add	fp, #8
09258     A7 22 02 FB | 	rdlong	local03, fp
0925c     04 4E 05 F1 | 	add	fp, #4
09260     A7 22 62 FC | 	wrlong	local03, fp
09264     18 4E 05 F1 | 	add	fp, #24
09268     A7 22 02 FB | 	rdlong	local03, fp
0926c     1C 4E 85 F1 | 	sub	fp, #28
09270     A7 22 62 FC | 	wrlong	local03, fp
09274     08 4E 85 F1 | 	sub	fp, #8
09278                 | LR__0801
09278     24 4E 05 F1 | 	add	fp, #36
0927c     A7 22 02 FB | 	rdlong	local03, fp
09280     24 4E 85 F1 | 	sub	fp, #36
09284     FF FF 3F FF 
09288     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0928c     10 4E 05 51 |  if_ne	add	fp, #16
09290     A7 1E 02 5B |  if_ne	rdlong	local01, fp
09294     10 4E 85 51 |  if_ne	sub	fp, #16
09298     FF FF 7F 5F 
0929c     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
092a0     1C 00 90 AD |  if_e	jmp	#LR__0802
092a4     10 4E 05 F1 | 	add	fp, #16
092a8     A7 22 02 FB | 	rdlong	local03, fp
092ac     0C 4E 85 F1 | 	sub	fp, #12
092b0     A7 20 02 FB | 	rdlong	local02, fp
092b4     04 4E 85 F1 | 	sub	fp, #4
092b8     10 23 0A F2 | 	cmp	local03, local02 wz
092bc     50 FF 9F 5D |  if_ne	jmp	#LR__0800
092c0                 | LR__0802
092c0                 | '   if gotoheader(0)=gotoline then
092c0     10 4E 05 F1 | 	add	fp, #16
092c4     A7 22 02 FB | 	rdlong	local03, fp
092c8     0C 4E 85 F1 | 	sub	fp, #12
092cc     A7 1E 02 FB | 	rdlong	local01, fp
092d0     04 4E 85 F1 | 	sub	fp, #4
092d4     0F 23 0A F2 | 	cmp	local03, local01 wz
092d8     7C 00 90 5D |  if_ne	jmp	#LR__0803
092dc     4A 00 00 FF 
092e0     AC E4 05 F1 | 	add	objptr, ##38060
092e4     F2 1E 02 FB | 	rdlong	local01, objptr
092e8     0F 21 02 F6 | 	mov	local02, local01
092ec     01 20 66 F0 | 	shl	local02, #1
092f0     0F 21 02 F1 | 	add	local02, local01
092f4     02 20 66 F0 | 	shl	local02, #2
092f8     03 00 00 FF 
092fc     00 E4 85 F1 | 	sub	objptr, ##1536
09300     F2 20 02 F1 | 	add	local02, objptr
09304     0C 4E 05 F1 | 	add	fp, #12
09308     A7 22 02 FB | 	rdlong	local03, fp
0930c     10 23 62 FC | 	wrlong	local03, local02
09310     03 00 00 FF 
09314     00 E4 05 F1 | 	add	objptr, ##1536
09318     F2 1E 02 FB | 	rdlong	local01, objptr
0931c     0F 21 02 F6 | 	mov	local02, local01
09320     01 20 66 F0 | 	shl	local02, #1
09324     0F 21 02 F1 | 	add	local02, local01
09328     02 20 66 F0 | 	shl	local02, #2
0932c     03 00 00 FF 
09330     00 E4 85 F1 | 	sub	objptr, ##1536
09334     F2 20 02 F1 | 	add	local02, objptr
09338     08 4E 85 F1 | 	sub	fp, #8
0933c     A7 22 02 FB | 	rdlong	local03, fp
09340     04 4E 85 F1 | 	sub	fp, #4
09344     04 20 06 F1 | 	add	local02, #4
09348     10 23 62 FC | 	wrlong	local03, local02
0934c     47 00 00 FF 
09350     AC E4 85 F1 | 	sub	objptr, ##36524
09354     A4 00 90 FD | 	jmp	#LR__0804
09358                 | LR__0803
09358     4A 00 00 FF 
0935c     AC E4 05 F1 | 	add	objptr, ##38060
09360     F2 1E 02 FB | 	rdlong	local01, objptr
09364     0F 21 02 F6 | 	mov	local02, local01
09368     01 20 66 F0 | 	shl	local02, #1
0936c     0F 21 02 F1 | 	add	local02, local01
09370     02 20 66 F0 | 	shl	local02, #2
09374     03 00 00 FF 
09378     00 E4 85 F1 | 	sub	objptr, ##1536
0937c     F2 20 02 F1 | 	add	local02, objptr
09380     00 00 C0 FF 
09384     10 01 68 FC | 	wrlong	##-2147483648, local02
09388     03 00 00 FF 
0938c     00 E4 05 F1 | 	add	objptr, ##1536
09390     F2 1E 02 FB | 	rdlong	local01, objptr
09394     0F 21 02 F6 | 	mov	local02, local01
09398     01 20 66 F0 | 	shl	local02, #1
0939c     0F 21 02 F1 | 	add	local02, local01
093a0     02 20 66 F0 | 	shl	local02, #2
093a4     03 00 00 FF 
093a8     00 E4 85 F1 | 	sub	objptr, ##1536
093ac     F2 20 02 F1 | 	add	local02, objptr
093b0     04 4E 05 F1 | 	add	fp, #4
093b4     A7 22 02 FB | 	rdlong	local03, fp
093b8     04 4E 85 F1 | 	sub	fp, #4
093bc     04 20 06 F1 | 	add	local02, #4
093c0     10 23 62 FC | 	wrlong	local03, local02
093c4     03 00 00 FF 
093c8     00 E4 05 F1 | 	add	objptr, ##1536
093cc     F2 1E 02 FB | 	rdlong	local01, objptr
093d0     0F 21 02 F6 | 	mov	local02, local01
093d4     01 20 66 F0 | 	shl	local02, #1
093d8     0F 21 02 F1 | 	add	local02, local01
093dc     02 20 66 F0 | 	shl	local02, #2
093e0     03 00 00 FF 
093e4     00 E4 85 F1 | 	sub	objptr, ##1536
093e8     F2 20 02 F1 | 	add	local02, objptr
093ec     08 20 06 F1 | 	add	local02, #8
093f0     10 A7 68 FC | 	wrlong	#83, local02
093f4     47 00 00 FF 
093f8     AC E4 85 F1 | 	sub	objptr, ##36524
093fc                 | LR__0804
093fc     4A 00 00 FF 
09400     AC E4 05 F1 | 	add	objptr, ##38060
09404     F2 22 02 FB | 	rdlong	local03, objptr
09408     01 22 06 F1 | 	add	local03, #1
0940c     F2 22 62 FC | 	wrlong	local03, objptr
09410     4A 00 00 FF 
09414     AC E4 85 F1 | 	sub	objptr, ##38060
09418     D0 00 90 FD | 	jmp	#LR__0806
0941c                 | LR__0805
0941c     DC 00 B0 FD | 	call	#_expr
09420     30 4E 05 F1 | 	add	fp, #48
09424     A7 9E 68 FC | 	wrlong	#79, fp
09428     08 4E 85 F1 | 	sub	fp, #8
0942c     A7 00 68 FC | 	wrlong	#0, fp
09430     04 4E 05 F1 | 	add	fp, #4
09434     A7 22 02 FB | 	rdlong	local03, fp
09438     04 4E 05 F1 | 	add	fp, #4
0943c     A7 1E 02 FB | 	rdlong	local01, fp
09440     30 4E 85 F1 | 	sub	fp, #48
09444     4A 00 00 FF 
09448     AC E4 05 F1 | 	add	objptr, ##38060
0944c     F2 20 02 FB | 	rdlong	local02, objptr
09450     10 17 02 F6 | 	mov	arg03, local02
09454     01 16 66 F0 | 	shl	arg03, #1
09458     10 17 02 F1 | 	add	arg03, local02
0945c     02 16 66 F0 | 	shl	arg03, #2
09460     03 00 00 FF 
09464     00 E4 85 F1 | 	sub	objptr, ##1536
09468     F2 16 02 F1 | 	add	arg03, objptr
0946c     0B 01 68 FC | 	wrlong	#0, arg03
09470     03 00 00 FF 
09474     00 E4 05 F1 | 	add	objptr, ##1536
09478     F2 20 02 FB | 	rdlong	local02, objptr
0947c     10 17 02 F6 | 	mov	arg03, local02
09480     01 16 66 F0 | 	shl	arg03, #1
09484     10 17 02 F1 | 	add	arg03, local02
09488     02 16 66 F0 | 	shl	arg03, #2
0948c     03 00 00 FF 
09490     00 E4 85 F1 | 	sub	objptr, ##1536
09494     F2 16 02 F1 | 	add	arg03, objptr
09498     04 16 06 F1 | 	add	arg03, #4
0949c     0B 23 62 FC | 	wrlong	local03, arg03
094a0     03 00 00 FF 
094a4     00 E4 05 F1 | 	add	objptr, ##1536
094a8     F2 22 02 FB | 	rdlong	local03, objptr
094ac     11 21 02 F6 | 	mov	local02, local03
094b0     01 20 66 F0 | 	shl	local02, #1
094b4     11 21 02 F1 | 	add	local02, local03
094b8     02 20 66 F0 | 	shl	local02, #2
094bc     03 00 00 FF 
094c0     00 E4 85 F1 | 	sub	objptr, ##1536
094c4     F2 20 02 F1 | 	add	local02, objptr
094c8     08 20 06 F1 | 	add	local02, #8
094cc     10 1F 62 FC | 	wrlong	local01, local02
094d0     03 00 00 FF 
094d4     00 E4 05 F1 | 	add	objptr, ##1536
094d8     F2 22 02 FB | 	rdlong	local03, objptr
094dc     01 22 06 F1 | 	add	local03, #1
094e0     F2 22 62 FC | 	wrlong	local03, objptr
094e4     4A 00 00 FF 
094e8     AC E4 85 F1 | 	sub	objptr, ##38060
094ec                 | LR__0806
094ec                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
094ec                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
094ec                 | ' return 0
094ec     00 FA 05 F6 | 	mov	result1, #0
094f0     A7 F0 03 F6 | 	mov	ptra, fp
094f4     B2 00 A0 FD | 	call	#popregs_
094f8                 | _compile_goto_ret
094f8     2D 00 64 FD | 	ret
094fc                 | 
094fc                 | ' 
094fc                 | ' 
094fc                 | ' 
094fc                 | ' 
094fc                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
094fc                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
094fc                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
094fc                 | ' 
094fc                 | ' 
094fc                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
094fc                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
094fc                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
094fc                 | ' 
094fc                 | ' 
094fc                 | ' function expr() as integer 
094fc                 | _expr
094fc     07 4A 05 F6 | 	mov	COUNT_, #7
09500     A8 00 A0 FD | 	call	#pushregs_
09504                 | _expr_enter
09504     37 00 00 FF 
09508     74 E4 05 F1 | 	add	objptr, ##28276
0950c     F2 24 02 FB | 	rdlong	local04, objptr
09510     03 24 66 F0 | 	shl	local04, #3
09514     02 00 00 FF 
09518     38 E4 85 F1 | 	sub	objptr, ##1080
0951c     F2 24 02 F1 | 	add	local04, objptr
09520     04 24 06 F1 | 	add	local04, #4
09524     12 27 02 FB | 	rdlong	local05, local04
09528                 | ' 
09528                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
09528     FE 27 0E F2 | 	cmp	local05, #510 wz
0952c     35 00 00 FF 
09530     3C E4 85 F1 | 	sub	objptr, ##27196
09534     C4 00 90 5D |  if_ne	jmp	#LR__0810
09538     1D 1E 06 F6 | 	mov	local01, #29
0953c     FF 22 06 F6 | 	mov	local03, #255
09540     0F 29 02 F6 | 	mov	local06, local01
09544     10 2B 02 F6 | 	mov	local07, local02
09548     11 1F 02 F6 | 	mov	local01, local03
0954c     4A 00 00 FF 
09550     AC E4 05 F1 | 	add	objptr, ##38060
09554     F2 26 02 FB | 	rdlong	local05, objptr
09558     13 25 02 F6 | 	mov	local04, local05
0955c     01 24 66 F0 | 	shl	local04, #1
09560     13 25 02 F1 | 	add	local04, local05
09564     02 24 66 F0 | 	shl	local04, #2
09568     03 00 00 FF 
0956c     00 E4 85 F1 | 	sub	objptr, ##1536
09570     F2 24 02 F1 | 	add	local04, objptr
09574     12 29 62 FC | 	wrlong	local06, local04
09578     03 00 00 FF 
0957c     00 E4 05 F1 | 	add	objptr, ##1536
09580     F2 28 02 FB | 	rdlong	local06, objptr
09584     14 27 02 F6 | 	mov	local05, local06
09588     01 26 66 F0 | 	shl	local05, #1
0958c     14 27 02 F1 | 	add	local05, local06
09590     02 26 66 F0 | 	shl	local05, #2
09594     03 00 00 FF 
09598     00 E4 85 F1 | 	sub	objptr, ##1536
0959c     F2 26 02 F1 | 	add	local05, objptr
095a0     04 26 06 F1 | 	add	local05, #4
095a4     13 2B 62 FC | 	wrlong	local07, local05
095a8     03 00 00 FF 
095ac     00 E4 05 F1 | 	add	objptr, ##1536
095b0     F2 2A 02 FB | 	rdlong	local07, objptr
095b4     15 29 02 F6 | 	mov	local06, local07
095b8     01 28 66 F0 | 	shl	local06, #1
095bc     15 29 02 F1 | 	add	local06, local07
095c0     02 28 66 F0 | 	shl	local06, #2
095c4     03 00 00 FF 
095c8     00 E4 85 F1 | 	sub	objptr, ##1536
095cc     F2 28 02 F1 | 	add	local06, objptr
095d0     08 28 06 F1 | 	add	local06, #8
095d4     14 1F 62 FC | 	wrlong	local01, local06
095d8     03 00 00 FF 
095dc     00 E4 05 F1 | 	add	objptr, ##1536
095e0     F2 28 02 FB | 	rdlong	local06, objptr
095e4     01 28 06 F1 | 	add	local06, #1
095e8     F2 28 62 FC | 	wrlong	local06, objptr
095ec     4A 00 00 FF 
095f0     AC E4 85 F1 | 	sub	objptr, ##38060
095f4     1D FA 05 F6 | 	mov	result1, #29
095f8     54 01 90 FD | 	jmp	#LR__0813
095fc                 | LR__0810
095fc     00 1E 06 F6 | 	mov	local01, #0
09600     58 01 B0 FD | 	call	#_addsub
09604     37 00 00 FF 
09608     74 E4 05 F1 | 	add	objptr, ##28276
0960c     F2 24 02 FB | 	rdlong	local04, objptr
09610     03 24 66 F0 | 	shl	local04, #3
09614     02 00 00 FF 
09618     38 E4 85 F1 | 	sub	objptr, ##1080
0961c     F2 24 02 F1 | 	add	local04, objptr
09620     04 24 06 F1 | 	add	local04, #4
09624     12 27 02 FB | 	rdlong	local05, local04
09628                 | ' t3.result.uresult=0
09628                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
09628                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
09628                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
09628     35 00 00 FF 
0962c     3C E4 85 F1 | 	sub	objptr, ##27196
09630                 | LR__0811
09630     1B 26 0E F2 | 	cmp	local05, #27 wz
09634     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
09638     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
0963c     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
09640     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
09644     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
09648     00 01 90 5D |  if_ne	jmp	#LR__0812
0964c     37 00 00 FF 
09650     74 E4 05 F1 | 	add	objptr, ##28276
09654     F2 28 02 FB | 	rdlong	local06, objptr
09658     01 28 06 F1 | 	add	local06, #1
0965c     F2 28 62 FC | 	wrlong	local06, objptr
09660     37 00 00 FF 
09664     74 E4 85 F1 | 	sub	objptr, ##28276
09668     F0 00 B0 FD | 	call	#_addsub
0966c     13 23 02 F6 | 	mov	local03, local05
09670     0F 29 02 F6 | 	mov	local06, local01
09674     10 2B 02 F6 | 	mov	local07, local02
09678     11 27 02 F6 | 	mov	local05, local03
0967c     4A 00 00 FF 
09680     AC E4 05 F1 | 	add	objptr, ##38060
09684     F2 24 02 FB | 	rdlong	local04, objptr
09688     12 FB 01 F6 | 	mov	result1, local04
0968c     01 FA 65 F0 | 	shl	result1, #1
09690     12 FB 01 F1 | 	add	result1, local04
09694     02 FA 65 F0 | 	shl	result1, #2
09698     03 00 00 FF 
0969c     00 E4 85 F1 | 	sub	objptr, ##1536
096a0     F2 FA 01 F1 | 	add	result1, objptr
096a4     FD 28 62 FC | 	wrlong	local06, result1
096a8     03 00 00 FF 
096ac     00 E4 05 F1 | 	add	objptr, ##1536
096b0     F2 28 02 FB | 	rdlong	local06, objptr
096b4     14 25 02 F6 | 	mov	local04, local06
096b8     01 24 66 F0 | 	shl	local04, #1
096bc     14 25 02 F1 | 	add	local04, local06
096c0     02 24 66 F0 | 	shl	local04, #2
096c4     03 00 00 FF 
096c8     00 E4 85 F1 | 	sub	objptr, ##1536
096cc     F2 24 02 F1 | 	add	local04, objptr
096d0     04 24 06 F1 | 	add	local04, #4
096d4     12 2B 62 FC | 	wrlong	local07, local04
096d8     03 00 00 FF 
096dc     00 E4 05 F1 | 	add	objptr, ##1536
096e0     F2 2A 02 FB | 	rdlong	local07, objptr
096e4     15 29 02 F6 | 	mov	local06, local07
096e8     01 28 66 F0 | 	shl	local06, #1
096ec     15 29 02 F1 | 	add	local06, local07
096f0     02 28 66 F0 | 	shl	local06, #2
096f4     03 00 00 FF 
096f8     00 E4 85 F1 | 	sub	objptr, ##1536
096fc     F2 28 02 F1 | 	add	local06, objptr
09700     08 28 06 F1 | 	add	local06, #8
09704     14 27 62 FC | 	wrlong	local05, local06
09708     03 00 00 FF 
0970c     00 E4 05 F1 | 	add	objptr, ##1536
09710     F2 28 02 FB | 	rdlong	local06, objptr
09714     01 28 06 F1 | 	add	local06, #1
09718     F2 28 62 FC | 	wrlong	local06, objptr
0971c     13 00 00 FF 
09720     38 E4 85 F1 | 	sub	objptr, ##9784
09724     F2 24 02 FB | 	rdlong	local04, objptr
09728     03 24 66 F0 | 	shl	local04, #3
0972c     02 00 00 FF 
09730     38 E4 85 F1 | 	sub	objptr, ##1080
09734     F2 24 02 F1 | 	add	local04, objptr
09738     04 24 06 F1 | 	add	local04, #4
0973c     12 27 02 FB | 	rdlong	local05, local04
09740     35 00 00 FF 
09744     3C E4 85 F1 | 	sub	objptr, ##27196
09748     E4 FE 9F FD | 	jmp	#LR__0811
0974c                 | LR__0812
0974c                 | ' return 0  
0974c     00 FA 05 F6 | 	mov	result1, #0
09750                 | LR__0813
09750     A7 F0 03 F6 | 	mov	ptra, fp
09754     B2 00 A0 FD | 	call	#popregs_
09758                 | _expr_ret
09758     2D 00 64 FD | 	ret
0975c                 | 
0975c                 | ' 
0975c                 | ' 
0975c                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
0975c                 | ' 
0975c                 | ' function addsub() as integer 
0975c                 | _addsub
0975c     07 4A 05 F6 | 	mov	COUNT_, #7
09760     A8 00 A0 FD | 	call	#pushregs_
09764                 | _addsub_enter
09764     00 1E 06 F6 | 	mov	local01, #0
09768     50 01 B0 FD | 	call	#_muldiv
0976c     37 00 00 FF 
09770     74 E4 05 F1 | 	add	objptr, ##28276
09774     F2 24 02 FB | 	rdlong	local04, objptr
09778     03 24 66 F0 | 	shl	local04, #3
0977c     02 00 00 FF 
09780     38 E4 85 F1 | 	sub	objptr, ##1080
09784     F2 24 02 F1 | 	add	local04, objptr
09788     04 24 06 F1 | 	add	local04, #4
0978c     12 27 02 FB | 	rdlong	local05, local04
09790                 | ' t3.result.uresult=0
09790                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
09790                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
09790                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
09790     35 00 00 FF 
09794     3C E4 85 F1 | 	sub	objptr, ##27196
09798                 | LR__0820
09798     01 26 0E F2 | 	cmp	local05, #1 wz
0979c     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
097a0     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
097a4     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
097a8     00 01 90 5D |  if_ne	jmp	#LR__0821
097ac     37 00 00 FF 
097b0     74 E4 05 F1 | 	add	objptr, ##28276
097b4     F2 24 02 FB | 	rdlong	local04, objptr
097b8     01 24 06 F1 | 	add	local04, #1
097bc     F2 24 62 FC | 	wrlong	local04, objptr
097c0     37 00 00 FF 
097c4     74 E4 85 F1 | 	sub	objptr, ##28276
097c8     F0 00 B0 FD | 	call	#_muldiv
097cc     13 23 02 F6 | 	mov	local03, local05
097d0     0F 29 02 F6 | 	mov	local06, local01
097d4     10 2B 02 F6 | 	mov	local07, local02
097d8     11 27 02 F6 | 	mov	local05, local03
097dc     4A 00 00 FF 
097e0     AC E4 05 F1 | 	add	objptr, ##38060
097e4     F2 24 02 FB | 	rdlong	local04, objptr
097e8     12 FB 01 F6 | 	mov	result1, local04
097ec     01 FA 65 F0 | 	shl	result1, #1
097f0     12 FB 01 F1 | 	add	result1, local04
097f4     02 FA 65 F0 | 	shl	result1, #2
097f8     03 00 00 FF 
097fc     00 E4 85 F1 | 	sub	objptr, ##1536
09800     F2 FA 01 F1 | 	add	result1, objptr
09804     FD 28 62 FC | 	wrlong	local06, result1
09808     03 00 00 FF 
0980c     00 E4 05 F1 | 	add	objptr, ##1536
09810     F2 28 02 FB | 	rdlong	local06, objptr
09814     14 25 02 F6 | 	mov	local04, local06
09818     01 24 66 F0 | 	shl	local04, #1
0981c     14 25 02 F1 | 	add	local04, local06
09820     02 24 66 F0 | 	shl	local04, #2
09824     03 00 00 FF 
09828     00 E4 85 F1 | 	sub	objptr, ##1536
0982c     F2 24 02 F1 | 	add	local04, objptr
09830     04 24 06 F1 | 	add	local04, #4
09834     12 2B 62 FC | 	wrlong	local07, local04
09838     03 00 00 FF 
0983c     00 E4 05 F1 | 	add	objptr, ##1536
09840     F2 2A 02 FB | 	rdlong	local07, objptr
09844     15 29 02 F6 | 	mov	local06, local07
09848     01 28 66 F0 | 	shl	local06, #1
0984c     15 29 02 F1 | 	add	local06, local07
09850     02 28 66 F0 | 	shl	local06, #2
09854     03 00 00 FF 
09858     00 E4 85 F1 | 	sub	objptr, ##1536
0985c     F2 28 02 F1 | 	add	local06, objptr
09860     08 28 06 F1 | 	add	local06, #8
09864     14 27 62 FC | 	wrlong	local05, local06
09868     03 00 00 FF 
0986c     00 E4 05 F1 | 	add	objptr, ##1536
09870     F2 28 02 FB | 	rdlong	local06, objptr
09874     01 28 06 F1 | 	add	local06, #1
09878     F2 28 62 FC | 	wrlong	local06, objptr
0987c     13 00 00 FF 
09880     38 E4 85 F1 | 	sub	objptr, ##9784
09884     F2 24 02 FB | 	rdlong	local04, objptr
09888     03 24 66 F0 | 	shl	local04, #3
0988c     02 00 00 FF 
09890     38 E4 85 F1 | 	sub	objptr, ##1080
09894     F2 24 02 F1 | 	add	local04, objptr
09898     04 24 06 F1 | 	add	local04, #4
0989c     12 27 02 FB | 	rdlong	local05, local04
098a0     35 00 00 FF 
098a4     3C E4 85 F1 | 	sub	objptr, ##27196
098a8     EC FE 9F FD | 	jmp	#LR__0820
098ac                 | LR__0821
098ac                 | '   return 0
098ac     00 FA 05 F6 | 	mov	result1, #0
098b0     A7 F0 03 F6 | 	mov	ptra, fp
098b4     B2 00 A0 FD | 	call	#popregs_
098b8                 | _addsub_ret
098b8     2D 00 64 FD | 	ret
098bc                 | 
098bc                 | ' 
098bc                 | ' sub muldiv()
098bc                 | _muldiv
098bc     08 4A 05 F6 | 	mov	COUNT_, #8
098c0     A8 00 A0 FD | 	call	#pushregs_
098c4                 | _muldiv_enter
098c4     00 1E 06 F6 | 	mov	local01, #0
098c8     58 01 B0 FD | 	call	#_getvalue
098cc     37 00 00 FF 
098d0     74 E4 05 F1 | 	add	objptr, ##28276
098d4     F2 24 02 FB | 	rdlong	local04, objptr
098d8     03 24 66 F0 | 	shl	local04, #3
098dc     02 00 00 FF 
098e0     38 E4 85 F1 | 	sub	objptr, ##1080
098e4     F2 24 02 F1 | 	add	local04, objptr
098e8     04 24 06 F1 | 	add	local04, #4
098ec     12 27 02 FB | 	rdlong	local05, local04
098f0                 | ' t3.result.uresult=0
098f0                 | ' getvalue()    
098f0                 | ' op = lparts(ct).token
098f0                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
098f0     35 00 00 FF 
098f4     3C E4 85 F1 | 	sub	objptr, ##27196
098f8                 | LR__0830
098f8     05 26 0E F2 | 	cmp	local05, #5 wz
098fc     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
09900     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
09904     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
09908     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
0990c     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
09910     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
09914     00 01 90 5D |  if_ne	jmp	#LR__0831
09918     37 00 00 FF 
0991c     74 E4 05 F1 | 	add	objptr, ##28276
09920     F2 24 02 FB | 	rdlong	local04, objptr
09924     01 24 06 F1 | 	add	local04, #1
09928     F2 24 62 FC | 	wrlong	local04, objptr
0992c     37 00 00 FF 
09930     74 E4 85 F1 | 	sub	objptr, ##28276
09934     EC 00 B0 FD | 	call	#_getvalue
09938     13 23 02 F6 | 	mov	local03, local05
0993c     0F 29 02 F6 | 	mov	local06, local01
09940     10 2B 02 F6 | 	mov	local07, local02
09944     11 27 02 F6 | 	mov	local05, local03
09948     4A 00 00 FF 
0994c     AC E4 05 F1 | 	add	objptr, ##38060
09950     F2 24 02 FB | 	rdlong	local04, objptr
09954     12 2D 02 F6 | 	mov	local08, local04
09958     01 2C 66 F0 | 	shl	local08, #1
0995c     12 2D 02 F1 | 	add	local08, local04
09960     02 2C 66 F0 | 	shl	local08, #2
09964     03 00 00 FF 
09968     00 E4 85 F1 | 	sub	objptr, ##1536
0996c     F2 2C 02 F1 | 	add	local08, objptr
09970     16 29 62 FC | 	wrlong	local06, local08
09974     03 00 00 FF 
09978     00 E4 05 F1 | 	add	objptr, ##1536
0997c     F2 2C 02 FB | 	rdlong	local08, objptr
09980     16 29 02 F6 | 	mov	local06, local08
09984     01 28 66 F0 | 	shl	local06, #1
09988     16 29 02 F1 | 	add	local06, local08
0998c     02 28 66 F0 | 	shl	local06, #2
09990     03 00 00 FF 
09994     00 E4 85 F1 | 	sub	objptr, ##1536
09998     F2 28 02 F1 | 	add	local06, objptr
0999c     04 28 06 F1 | 	add	local06, #4
099a0     14 2B 62 FC | 	wrlong	local07, local06
099a4     03 00 00 FF 
099a8     00 E4 05 F1 | 	add	objptr, ##1536
099ac     F2 2C 02 FB | 	rdlong	local08, objptr
099b0     16 2B 02 F6 | 	mov	local07, local08
099b4     01 2A 66 F0 | 	shl	local07, #1
099b8     16 2B 02 F1 | 	add	local07, local08
099bc     02 2A 66 F0 | 	shl	local07, #2
099c0     03 00 00 FF 
099c4     00 E4 85 F1 | 	sub	objptr, ##1536
099c8     F2 2A 02 F1 | 	add	local07, objptr
099cc     08 2A 06 F1 | 	add	local07, #8
099d0     15 27 62 FC | 	wrlong	local05, local07
099d4     03 00 00 FF 
099d8     00 E4 05 F1 | 	add	objptr, ##1536
099dc     F2 28 02 FB | 	rdlong	local06, objptr
099e0     01 28 06 F1 | 	add	local06, #1
099e4     F2 28 62 FC | 	wrlong	local06, objptr
099e8     13 00 00 FF 
099ec     38 E4 85 F1 | 	sub	objptr, ##9784
099f0     F2 24 02 FB | 	rdlong	local04, objptr
099f4     03 24 66 F0 | 	shl	local04, #3
099f8     02 00 00 FF 
099fc     38 E4 85 F1 | 	sub	objptr, ##1080
09a00     F2 24 02 F1 | 	add	local04, objptr
09a04     04 24 06 F1 | 	add	local04, #4
09a08     12 27 02 FB | 	rdlong	local05, local04
09a0c     35 00 00 FF 
09a10     3C E4 85 F1 | 	sub	objptr, ##27196
09a14     E0 FE 9F FD | 	jmp	#LR__0830
09a18                 | LR__0831
09a18     A7 F0 03 F6 | 	mov	ptra, fp
09a1c     B2 00 A0 FD | 	call	#popregs_
09a20                 | _muldiv_ret
09a20     2D 00 64 FD | 	ret
09a24                 | 
09a24                 | ' 
09a24                 | ' sub getvalue() 
09a24                 | _getvalue
09a24     0B 4A 05 F6 | 	mov	COUNT_, #11
09a28     A8 00 A0 FD | 	call	#pushregs_
09a2c                 | _getvalue_enter
09a2c     01 24 06 F6 | 	mov	local04, #1
09a30     00 1E 06 F6 | 	mov	local01, #0
09a34     1D 22 06 F6 | 	mov	local03, #29
09a38     37 00 00 FF 
09a3c     74 E4 05 F1 | 	add	objptr, ##28276
09a40     F2 16 02 FB | 	rdlong	arg03, objptr
09a44     03 16 66 F0 | 	shl	arg03, #3
09a48     02 00 00 FF 
09a4c     38 E4 85 F1 | 	sub	objptr, ##1080
09a50     F2 16 02 F1 | 	add	arg03, objptr
09a54     04 16 06 F1 | 	add	arg03, #4
09a58     0B 27 02 FB | 	rdlong	local05, arg03
09a5c                 | ' m=1
09a5c                 | ' t1.result.uresult=0: t1.result_type=result_uint
09a5c                 | ' op=lparts(ct).token
09a5c                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
09a5c     02 26 0E F2 | 	cmp	local05, #2 wz
09a60     35 00 00 FF 
09a64     3C E4 85 F1 | 	sub	objptr, ##27196
09a68     38 00 90 5D |  if_ne	jmp	#LR__0840
09a6c     01 24 66 F6 | 	neg	local04, #1
09a70     37 00 00 FF 
09a74     74 E4 05 F1 | 	add	objptr, ##28276
09a78     F2 26 02 FB | 	rdlong	local05, objptr
09a7c     01 26 06 F1 | 	add	local05, #1
09a80     F2 26 62 FC | 	wrlong	local05, objptr
09a84     03 26 66 F0 | 	shl	local05, #3
09a88     02 00 00 FF 
09a8c     38 E4 85 F1 | 	sub	objptr, ##1080
09a90     F2 26 02 F1 | 	add	local05, objptr
09a94     04 26 06 F1 | 	add	local05, #4
09a98     13 27 02 FB | 	rdlong	local05, local05
09a9c     35 00 00 FF 
09aa0     3C E4 85 F1 | 	sub	objptr, ##27196
09aa4                 | LR__0840
09aa4                 | ' select case op
09aa4     01 00 00 FF 
09aa8     00 26 0E F2 | 	cmp	local05, ##512 wz
09aac     3C 00 90 AD |  if_e	jmp	#LR__0841
09ab0     01 00 00 FF 
09ab4     01 26 0E F2 | 	cmp	local05, ##513 wz
09ab8     88 01 90 AD |  if_e	jmp	#LR__0844
09abc     01 00 00 FF 
09ac0     02 26 0E F2 | 	cmp	local05, ##514 wz
09ac4     3C 04 90 AD |  if_e	jmp	#LR__0851
09ac8     01 00 00 FF 
09acc     03 26 0E F2 | 	cmp	local05, ##515 wz
09ad0     A0 05 90 AD |  if_e	jmp	#LR__0854
09ad4     01 00 00 FF 
09ad8     04 26 0E F2 | 	cmp	local05, ##516 wz
09adc     70 07 90 AD |  if_e	jmp	#LR__0859
09ae0     15 26 0E F2 | 	cmp	local05, #21 wz
09ae4     90 07 90 AD |  if_e	jmp	#LR__0860
09ae8     00 08 90 FD | 	jmp	#LR__0861
09aec                 | LR__0841
09aec                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
09aec     01 24 0E F2 | 	cmp	local04, #1 wz
09af0     3C 00 90 5D |  if_ne	jmp	#LR__0842
09af4     37 00 00 FF 
09af8     74 E4 05 F1 | 	add	objptr, ##28276
09afc     F2 26 02 FB | 	rdlong	local05, objptr
09b00     03 26 66 F0 | 	shl	local05, #3
09b04     02 00 00 FF 
09b08     38 E4 85 F1 | 	sub	objptr, ##1080
09b0c     F2 26 02 F1 | 	add	local05, objptr
09b10     13 13 02 FB | 	rdlong	arg01, local05
09b14     00 14 06 F6 | 	mov	arg02, #0
09b18     35 00 00 FF 
09b1c     3C E4 85 F1 | 	sub	objptr, ##27196
09b20     98 8E B1 FD | 	call	#__system____builtin_atoi
09b24     FD 24 02 FD | 	qmul	local04, result1
09b28     18 1E 62 FD | 	getqx	local01
09b2c     1C 22 06 F6 | 	mov	local03, #28
09b30                 | LR__0842
09b30                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
09b30     FF FF 7F FF 
09b34     FF 25 0E F2 | 	cmp	local04, ##-1 wz
09b38     3C 00 90 5D |  if_ne	jmp	#LR__0843
09b3c     37 00 00 FF 
09b40     74 E4 05 F1 | 	add	objptr, ##28276
09b44     F2 26 02 FB | 	rdlong	local05, objptr
09b48     03 26 66 F0 | 	shl	local05, #3
09b4c     02 00 00 FF 
09b50     38 E4 85 F1 | 	sub	objptr, ##1080
09b54     F2 26 02 F1 | 	add	local05, objptr
09b58     13 13 02 FB | 	rdlong	arg01, local05
09b5c     00 14 06 F6 | 	mov	arg02, #0
09b60     35 00 00 FF 
09b64     3C E4 85 F1 | 	sub	objptr, ##27196
09b68     50 8E B1 FD | 	call	#__system____builtin_atoi
09b6c     FD 24 02 FD | 	qmul	local04, result1
09b70     18 1E 62 FD | 	getqx	local01
09b74     1C 22 06 F6 | 	mov	local03, #28
09b78                 | LR__0843
09b78     0F 29 02 F6 | 	mov	local06, local01
09b7c     10 2B 02 F6 | 	mov	local07, local02
09b80     11 27 02 F6 | 	mov	local05, local03
09b84     4A 00 00 FF 
09b88     AC E4 05 F1 | 	add	objptr, ##38060
09b8c     F2 1E 02 FB | 	rdlong	local01, objptr
09b90     0F 25 02 F6 | 	mov	local04, local01
09b94     01 24 66 F0 | 	shl	local04, #1
09b98     0F 25 02 F1 | 	add	local04, local01
09b9c     02 24 66 F0 | 	shl	local04, #2
09ba0     03 00 00 FF 
09ba4     00 E4 85 F1 | 	sub	objptr, ##1536
09ba8     F2 24 02 F1 | 	add	local04, objptr
09bac     12 29 62 FC | 	wrlong	local06, local04
09bb0     03 00 00 FF 
09bb4     00 E4 05 F1 | 	add	objptr, ##1536
09bb8     F2 28 02 FB | 	rdlong	local06, objptr
09bbc     14 1F 02 F6 | 	mov	local01, local06
09bc0     01 1E 66 F0 | 	shl	local01, #1
09bc4     14 1F 02 F1 | 	add	local01, local06
09bc8     02 1E 66 F0 | 	shl	local01, #2
09bcc     03 00 00 FF 
09bd0     00 E4 85 F1 | 	sub	objptr, ##1536
09bd4     F2 1E 02 F1 | 	add	local01, objptr
09bd8     04 1E 06 F1 | 	add	local01, #4
09bdc     0F 2B 62 FC | 	wrlong	local07, local01
09be0     03 00 00 FF 
09be4     00 E4 05 F1 | 	add	objptr, ##1536
09be8     F2 2A 02 FB | 	rdlong	local07, objptr
09bec     15 29 02 F6 | 	mov	local06, local07
09bf0     01 28 66 F0 | 	shl	local06, #1
09bf4     15 29 02 F1 | 	add	local06, local07
09bf8     02 28 66 F0 | 	shl	local06, #2
09bfc     03 00 00 FF 
09c00     00 E4 85 F1 | 	sub	objptr, ##1536
09c04     F2 28 02 F1 | 	add	local06, objptr
09c08     08 28 06 F1 | 	add	local06, #8
09c0c     14 27 62 FC | 	wrlong	local05, local06
09c10     03 00 00 FF 
09c14     00 E4 05 F1 | 	add	objptr, ##1536
09c18     F2 28 02 FB | 	rdlong	local06, objptr
09c1c     01 28 06 F1 | 	add	local06, #1
09c20     F2 28 62 FC | 	wrlong	local06, objptr
09c24     13 00 00 FF 
09c28     38 E4 85 F1 | 	sub	objptr, ##9784
09c2c     F2 28 02 FB | 	rdlong	local06, objptr
09c30     01 28 06 F1 | 	add	local06, #1
09c34     F2 28 62 FC | 	wrlong	local06, objptr
09c38     37 00 00 FF 
09c3c     74 E4 85 F1 | 	sub	objptr, ##28276
09c40     CC 06 90 FD | 	jmp	#LR__0862
09c44                 | LR__0844
09c44                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
09c44     37 00 00 FF 
09c48     74 E4 05 F1 | 	add	objptr, ##28276
09c4c     F2 16 02 FB | 	rdlong	arg03, objptr
09c50     03 16 66 F0 | 	shl	arg03, #3
09c54     02 00 00 FF 
09c58     38 E4 85 F1 | 	sub	objptr, ##1080
09c5c     F2 16 02 F1 | 	add	arg03, objptr
09c60     0B 13 02 FB | 	rdlong	arg01, arg03
09c64     01 14 06 F6 | 	mov	arg02, #1
09c68     35 00 00 FF 
09c6c     3C E4 85 F1 | 	sub	objptr, ##27196
09c70     98 7B B1 FD | 	call	#__system__Left_S
09c74     FD 12 02 F6 | 	mov	arg01, result1
09c78     7A 01 00 FF 
09c7c     11 14 06 F6 | 	mov	arg02, ##@LR__5192
09c80     A0 5B B1 FD | 	call	#__system___string_cmp
09c84     00 FA 0D F2 | 	cmp	result1, #0 wz
09c88     94 00 90 5D |  if_ne	jmp	#LR__0847
09c8c     37 00 00 FF 
09c90     74 E4 05 F1 | 	add	objptr, ##28276
09c94     F2 2A 02 FB | 	rdlong	local07, objptr
09c98     15 29 02 F6 | 	mov	local06, local07
09c9c     03 28 66 F0 | 	shl	local06, #3
09ca0     02 00 00 FF 
09ca4     38 E4 85 F1 | 	sub	objptr, ##1080
09ca8     F2 28 02 F1 | 	add	local06, objptr
09cac     7A 01 00 FF 
09cb0     13 26 06 F6 | 	mov	local05, ##@LR__5193
09cb4     03 2A 66 F0 | 	shl	local07, #3
09cb8     F2 2A 02 F1 | 	add	local07, objptr
09cbc     15 2B 02 FB | 	rdlong	local07, local07
09cc0     02 00 00 FF 
09cc4     38 E4 05 F1 | 	add	objptr, ##1080
09cc8     F2 1E 02 FB | 	rdlong	local01, objptr
09ccc     03 1E 66 F0 | 	shl	local01, #3
09cd0     02 00 00 FF 
09cd4     38 E4 85 F1 | 	sub	objptr, ##1080
09cd8     F2 1E 02 F1 | 	add	local01, objptr
09cdc     0F 13 02 FB | 	rdlong	arg01, local01
09ce0     35 00 00 FF 
09ce4     3C E4 85 F1 | 	sub	objptr, ##27196
09ce8     09 2D 02 F6 | 	mov	local08, arg01
09cec     97 06 48 FB | 	callpa	#(@LR__0846-@LR__0845)>>2,fcache_load_ptr_
09cf0                 | LR__0845
09cf0     16 FB C9 FA | 	rdbyte	result1, local08 wz
09cf4     01 2C 06 51 |  if_ne	add	local08, #1
09cf8     F4 FF 9F 5D |  if_ne	jmp	#LR__0845
09cfc                 | LR__0846
09cfc     09 2D 82 F1 | 	sub	local08, arg01
09d00     16 15 02 F6 | 	mov	arg02, local08
09d04     01 14 86 F1 | 	sub	arg02, #1
09d08     15 13 02 F6 | 	mov	arg01, local07
09d0c     84 7B B1 FD | 	call	#__system__Right_S
09d10     FD 14 02 F6 | 	mov	arg02, result1
09d14     13 13 02 F6 | 	mov	arg01, local05
09d18     3C 5B B1 FD | 	call	#__system___string_concat
09d1c     14 FB 61 FC | 	wrlong	result1, local06
09d20                 | LR__0847
09d20                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
09d20     37 00 00 FF 
09d24     74 E4 05 F1 | 	add	objptr, ##28276
09d28     F2 16 02 FB | 	rdlong	arg03, objptr
09d2c     03 16 66 F0 | 	shl	arg03, #3
09d30     02 00 00 FF 
09d34     38 E4 85 F1 | 	sub	objptr, ##1080
09d38     F2 16 02 F1 | 	add	arg03, objptr
09d3c     0B 13 02 FB | 	rdlong	arg01, arg03
09d40     01 14 06 F6 | 	mov	arg02, #1
09d44     35 00 00 FF 
09d48     3C E4 85 F1 | 	sub	objptr, ##27196
09d4c     BC 7A B1 FD | 	call	#__system__Left_S
09d50     FD 12 02 F6 | 	mov	arg01, result1
09d54     7A 01 00 FF 
09d58     16 14 06 F6 | 	mov	arg02, ##@LR__5194
09d5c     C4 5A B1 FD | 	call	#__system___string_cmp
09d60     00 FA 0D F2 | 	cmp	result1, #0 wz
09d64     94 00 90 5D |  if_ne	jmp	#LR__0850
09d68     37 00 00 FF 
09d6c     74 E4 05 F1 | 	add	objptr, ##28276
09d70     F2 2A 02 FB | 	rdlong	local07, objptr
09d74     15 29 02 F6 | 	mov	local06, local07
09d78     03 28 66 F0 | 	shl	local06, #3
09d7c     02 00 00 FF 
09d80     38 E4 85 F1 | 	sub	objptr, ##1080
09d84     F2 28 02 F1 | 	add	local06, objptr
09d88     7A 01 00 FF 
09d8c     18 26 06 F6 | 	mov	local05, ##@LR__5195
09d90     03 2A 66 F0 | 	shl	local07, #3
09d94     F2 2A 02 F1 | 	add	local07, objptr
09d98     15 2B 02 FB | 	rdlong	local07, local07
09d9c     02 00 00 FF 
09da0     38 E4 05 F1 | 	add	objptr, ##1080
09da4     F2 1E 02 FB | 	rdlong	local01, objptr
09da8     03 1E 66 F0 | 	shl	local01, #3
09dac     02 00 00 FF 
09db0     38 E4 85 F1 | 	sub	objptr, ##1080
09db4     F2 1E 02 F1 | 	add	local01, objptr
09db8     0F 13 02 FB | 	rdlong	arg01, local01
09dbc     35 00 00 FF 
09dc0     3C E4 85 F1 | 	sub	objptr, ##27196
09dc4     09 2D 02 F6 | 	mov	local08, arg01
09dc8     97 06 48 FB | 	callpa	#(@LR__0849-@LR__0848)>>2,fcache_load_ptr_
09dcc                 | LR__0848
09dcc     16 FB C9 FA | 	rdbyte	result1, local08 wz
09dd0     01 2C 06 51 |  if_ne	add	local08, #1
09dd4     F4 FF 9F 5D |  if_ne	jmp	#LR__0848
09dd8                 | LR__0849
09dd8     09 2D 82 F1 | 	sub	local08, arg01
09ddc     16 15 02 F6 | 	mov	arg02, local08
09de0     01 14 86 F1 | 	sub	arg02, #1
09de4     15 13 02 F6 | 	mov	arg01, local07
09de8     A8 7A B1 FD | 	call	#__system__Right_S
09dec     FD 14 02 F6 | 	mov	arg02, result1
09df0     13 13 02 F6 | 	mov	arg01, local05
09df4     60 5A B1 FD | 	call	#__system___string_concat
09df8     14 FB 61 FC | 	wrlong	result1, local06
09dfc                 | LR__0850
09dfc     37 00 00 FF 
09e00     74 E4 05 F1 | 	add	objptr, ##28276
09e04     F2 28 02 FB | 	rdlong	local06, objptr
09e08     03 28 66 F0 | 	shl	local06, #3
09e0c     02 00 00 FF 
09e10     38 E4 85 F1 | 	sub	objptr, ##1080
09e14     F2 28 02 F1 | 	add	local06, objptr
09e18     14 13 02 FB | 	rdlong	arg01, local06
09e1c     00 14 06 F6 | 	mov	arg02, #0
09e20     35 00 00 FF 
09e24     3C E4 85 F1 | 	sub	objptr, ##27196
09e28     90 8B B1 FD | 	call	#__system____builtin_atoi
09e2c     FD 24 02 FD | 	qmul	local04, result1
09e30     4A 00 00 FF 
09e34     AC E4 05 F1 | 	add	objptr, ##38060
09e38     F2 28 02 FB | 	rdlong	local06, objptr
09e3c     14 2F 02 F6 | 	mov	local09, local06
09e40     01 2E 66 F0 | 	shl	local09, #1
09e44     14 2F 02 F1 | 	add	local09, local06
09e48     02 2E 66 F0 | 	shl	local09, #2
09e4c     03 00 00 FF 
09e50     00 E4 85 F1 | 	sub	objptr, ##1536
09e54     F2 2E 02 F1 | 	add	local09, objptr
09e58     03 00 00 FF 
09e5c     00 E4 05 F1 | 	add	objptr, ##1536
09e60     18 1E 62 FD | 	getqx	local01
09e64     1C 22 06 F6 | 	mov	local03, #28
09e68     0F 29 02 F6 | 	mov	local06, local01
09e6c     10 2B 02 F6 | 	mov	local07, local02
09e70     17 29 62 FC | 	wrlong	local06, local09
09e74     11 2F 02 F6 | 	mov	local09, local03
09e78     F2 28 02 FB | 	rdlong	local06, objptr
09e7c     14 27 02 F6 | 	mov	local05, local06
09e80     01 26 66 F0 | 	shl	local05, #1
09e84     14 27 02 F1 | 	add	local05, local06
09e88     02 26 66 F0 | 	shl	local05, #2
09e8c     03 00 00 FF 
09e90     00 E4 85 F1 | 	sub	objptr, ##1536
09e94     F2 26 02 F1 | 	add	local05, objptr
09e98     04 26 06 F1 | 	add	local05, #4
09e9c     13 2B 62 FC | 	wrlong	local07, local05
09ea0     03 00 00 FF 
09ea4     00 E4 05 F1 | 	add	objptr, ##1536
09ea8     F2 2A 02 FB | 	rdlong	local07, objptr
09eac     15 29 02 F6 | 	mov	local06, local07
09eb0     01 28 66 F0 | 	shl	local06, #1
09eb4     15 29 02 F1 | 	add	local06, local07
09eb8     02 28 66 F0 | 	shl	local06, #2
09ebc     03 00 00 FF 
09ec0     00 E4 85 F1 | 	sub	objptr, ##1536
09ec4     F2 28 02 F1 | 	add	local06, objptr
09ec8     08 28 06 F1 | 	add	local06, #8
09ecc     14 2F 62 FC | 	wrlong	local09, local06
09ed0     03 00 00 FF 
09ed4     00 E4 05 F1 | 	add	objptr, ##1536
09ed8     F2 28 02 FB | 	rdlong	local06, objptr
09edc     01 28 06 F1 | 	add	local06, #1
09ee0     F2 28 62 FC | 	wrlong	local06, objptr
09ee4     13 00 00 FF 
09ee8     38 E4 85 F1 | 	sub	objptr, ##9784
09eec     F2 28 02 FB | 	rdlong	local06, objptr
09ef0     01 28 06 F1 | 	add	local06, #1
09ef4     F2 28 62 FC | 	wrlong	local06, objptr
09ef8     37 00 00 FF 
09efc     74 E4 85 F1 | 	sub	objptr, ##28276
09f00     0C 04 90 FD | 	jmp	#LR__0862
09f04                 | LR__0851
09f04                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
09f04     01 24 0E F2 | 	cmp	local04, #1 wz
09f08     48 00 90 5D |  if_ne	jmp	#LR__0852
09f0c     00 C0 1F FF 
09f10     00 28 06 F6 | 	mov	local06, ##1065353216
09f14     37 00 00 FF 
09f18     74 E4 05 F1 | 	add	objptr, ##28276
09f1c     F2 2E 02 FB | 	rdlong	local09, objptr
09f20     03 2E 66 F0 | 	shl	local09, #3
09f24     02 00 00 FF 
09f28     38 E4 85 F1 | 	sub	objptr, ##1080
09f2c     F2 2E 02 F1 | 	add	local09, objptr
09f30     17 13 02 FB | 	rdlong	arg01, local09
09f34     35 00 00 FF 
09f38     3C E4 85 F1 | 	sub	objptr, ##27196
09f3c     EC 8B B1 FD | 	call	#__system____builtin_atof
09f40     FD 14 02 F6 | 	mov	arg02, result1
09f44     14 13 02 F6 | 	mov	arg01, local06
09f48     F8 83 B1 FD | 	call	#__system___float_mul
09f4c     FD 1E 02 F6 | 	mov	local01, result1
09f50     1E 22 06 F6 | 	mov	local03, #30
09f54                 | LR__0852
09f54                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
09f54     FF FF 7F FF 
09f58     FF 25 0E F2 | 	cmp	local04, ##-1 wz
09f5c     48 00 90 5D |  if_ne	jmp	#LR__0853
09f60     00 C0 5F FF 
09f64     00 28 06 F6 | 	mov	local06, ##-1082130432
09f68     37 00 00 FF 
09f6c     74 E4 05 F1 | 	add	objptr, ##28276
09f70     F2 2E 02 FB | 	rdlong	local09, objptr
09f74     03 2E 66 F0 | 	shl	local09, #3
09f78     02 00 00 FF 
09f7c     38 E4 85 F1 | 	sub	objptr, ##1080
09f80     F2 2E 02 F1 | 	add	local09, objptr
09f84     17 13 02 FB | 	rdlong	arg01, local09
09f88     35 00 00 FF 
09f8c     3C E4 85 F1 | 	sub	objptr, ##27196
09f90     98 8B B1 FD | 	call	#__system____builtin_atof
09f94     FD 14 02 F6 | 	mov	arg02, result1
09f98     14 13 02 F6 | 	mov	arg01, local06
09f9c     A4 83 B1 FD | 	call	#__system___float_mul
09fa0     FD 1E 02 F6 | 	mov	local01, result1
09fa4     1E 22 06 F6 | 	mov	local03, #30
09fa8                 | LR__0853
09fa8     0F 29 02 F6 | 	mov	local06, local01
09fac     10 2B 02 F6 | 	mov	local07, local02
09fb0     11 27 02 F6 | 	mov	local05, local03
09fb4     4A 00 00 FF 
09fb8     AC E4 05 F1 | 	add	objptr, ##38060
09fbc     F2 1E 02 FB | 	rdlong	local01, objptr
09fc0     0F 2F 02 F6 | 	mov	local09, local01
09fc4     01 2E 66 F0 | 	shl	local09, #1
09fc8     0F 2F 02 F1 | 	add	local09, local01
09fcc     02 2E 66 F0 | 	shl	local09, #2
09fd0     03 00 00 FF 
09fd4     00 E4 85 F1 | 	sub	objptr, ##1536
09fd8     F2 2E 02 F1 | 	add	local09, objptr
09fdc     17 29 62 FC | 	wrlong	local06, local09
09fe0     03 00 00 FF 
09fe4     00 E4 05 F1 | 	add	objptr, ##1536
09fe8     F2 2E 02 FB | 	rdlong	local09, objptr
09fec     17 29 02 F6 | 	mov	local06, local09
09ff0     01 28 66 F0 | 	shl	local06, #1
09ff4     17 29 02 F1 | 	add	local06, local09
09ff8     02 28 66 F0 | 	shl	local06, #2
09ffc     03 00 00 FF 
0a000     00 E4 85 F1 | 	sub	objptr, ##1536
0a004     F2 28 02 F1 | 	add	local06, objptr
0a008     04 28 06 F1 | 	add	local06, #4
0a00c     14 2B 62 FC | 	wrlong	local07, local06
0a010     03 00 00 FF 
0a014     00 E4 05 F1 | 	add	objptr, ##1536
0a018     F2 2E 02 FB | 	rdlong	local09, objptr
0a01c     17 2B 02 F6 | 	mov	local07, local09
0a020     01 2A 66 F0 | 	shl	local07, #1
0a024     17 2B 02 F1 | 	add	local07, local09
0a028     02 2A 66 F0 | 	shl	local07, #2
0a02c     03 00 00 FF 
0a030     00 E4 85 F1 | 	sub	objptr, ##1536
0a034     F2 2A 02 F1 | 	add	local07, objptr
0a038     08 2A 06 F1 | 	add	local07, #8
0a03c     15 27 62 FC | 	wrlong	local05, local07
0a040     03 00 00 FF 
0a044     00 E4 05 F1 | 	add	objptr, ##1536
0a048     F2 28 02 FB | 	rdlong	local06, objptr
0a04c     01 28 06 F1 | 	add	local06, #1
0a050     F2 28 62 FC | 	wrlong	local06, objptr
0a054     13 00 00 FF 
0a058     38 E4 85 F1 | 	sub	objptr, ##9784
0a05c     F2 28 02 FB | 	rdlong	local06, objptr
0a060     01 28 06 F1 | 	add	local06, #1
0a064     F2 28 62 FC | 	wrlong	local06, objptr
0a068     37 00 00 FF 
0a06c     74 E4 85 F1 | 	sub	objptr, ##28276
0a070     9C 02 90 FD | 	jmp	#LR__0862
0a074                 | LR__0854
0a074     1F 22 06 F6 | 	mov	local03, #31
0a078     37 00 00 FF 
0a07c     74 E4 05 F1 | 	add	objptr, ##28276
0a080     F2 16 02 FB | 	rdlong	arg03, objptr
0a084     03 16 66 F0 | 	shl	arg03, #3
0a088     02 00 00 FF 
0a08c     38 E4 85 F1 | 	sub	objptr, ##1080
0a090     F2 16 02 F1 | 	add	arg03, objptr
0a094     0B 13 02 FB | 	rdlong	arg01, arg03
0a098     35 00 00 FF 
0a09c     3C E4 85 F1 | 	sub	objptr, ##27196
0a0a0     09 2D 02 F6 | 	mov	local08, arg01
0a0a4     97 06 48 FB | 	callpa	#(@LR__0856-@LR__0855)>>2,fcache_load_ptr_
0a0a8                 | LR__0855
0a0a8     16 FB C9 FA | 	rdbyte	result1, local08 wz
0a0ac     01 2C 06 51 |  if_ne	add	local08, #1
0a0b0     F4 FF 9F 5D |  if_ne	jmp	#LR__0855
0a0b4                 | LR__0856
0a0b4     09 2D 82 F1 | 	sub	local08, arg01
0a0b8     16 FB 01 F6 | 	mov	result1, local08
0a0bc     5A 00 00 FF 
0a0c0     14 E4 05 F1 | 	add	objptr, ##46100
0a0c4     F2 FA 61 FC | 	wrlong	result1, objptr
0a0c8     5C E4 85 F1 | 	sub	objptr, #92
0a0cc     F2 12 02 FB | 	rdlong	arg01, objptr
0a0d0     FD 12 82 F1 | 	sub	arg01, result1
0a0d4     04 12 86 F1 | 	sub	arg01, #4
0a0d8     03 12 26 F5 | 	andn	arg01, #3
0a0dc     F2 12 62 FC | 	wrlong	arg01, objptr
0a0e0     5C E4 05 F1 | 	add	objptr, #92
0a0e4     F2 14 02 FB | 	rdlong	arg02, objptr
0a0e8     5A 00 00 FF 
0a0ec     14 E4 85 F1 | 	sub	objptr, ##46100
0a0f0     C4 13 B1 FD | 	call	#_pslpoke
0a0f4                 | '     pslpoke memtop,l
0a0f4                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0a0f4     01 30 06 F6 | 	mov	local10, #1
0a0f8     5A 00 00 FF 
0a0fc     14 E4 05 F1 | 	add	objptr, ##46100
0a100     F2 32 02 FB | 	rdlong	local11, objptr
0a104     5A 00 00 FF 
0a108     14 E4 85 F1 | 	sub	objptr, ##46100
0a10c     01 32 06 F1 | 	add	local11, #1
0a110                 | LR__0857
0a110     19 31 52 F2 | 	cmps	local10, local11 wc
0a114     5C 00 90 3D |  if_ae	jmp	#LR__0858
0a118     59 00 00 FF 
0a11c     B8 E5 05 F1 | 	add	objptr, ##46008
0a120     F2 2A 02 FB | 	rdlong	local07, objptr
0a124     03 2A 06 F1 | 	add	local07, #3
0a128     18 2B 02 F1 | 	add	local07, local10
0a12c     22 00 00 FF 
0a130     44 E5 85 F1 | 	sub	objptr, ##17732
0a134     F2 2E 02 FB | 	rdlong	local09, objptr
0a138     03 2E 66 F0 | 	shl	local09, #3
0a13c     02 00 00 FF 
0a140     38 E4 85 F1 | 	sub	objptr, ##1080
0a144     F2 2E 02 F1 | 	add	local09, objptr
0a148     17 13 02 FB | 	rdlong	arg01, local09
0a14c     18 15 02 F6 | 	mov	arg02, local10
0a150     01 16 06 F6 | 	mov	arg03, #1
0a154     35 00 00 FF 
0a158     3C E4 85 F1 | 	sub	objptr, ##27196
0a15c     C4 77 B1 FD | 	call	#__system__Mid_S
0a160     FD 14 C2 FA | 	rdbyte	arg02, result1
0a164     15 13 02 F6 | 	mov	arg01, local07
0a168     DC 13 B1 FD | 	call	#_pspoke
0a16c     01 30 06 F1 | 	add	local10, #1
0a170     9C FF 9F FD | 	jmp	#LR__0857
0a174                 | LR__0858
0a174     59 00 00 FF 
0a178     B8 E5 05 F1 | 	add	objptr, ##46008
0a17c     F2 1E 02 FB | 	rdlong	local01, objptr
0a180     2B 22 06 F6 | 	mov	local03, #43
0a184     0F 29 02 F6 | 	mov	local06, local01
0a188     10 2B 02 F6 | 	mov	local07, local02
0a18c     11 33 02 F6 | 	mov	local11, local03
0a190     0F 00 00 FF 
0a194     0C E5 85 F1 | 	sub	objptr, ##7948
0a198     F2 30 02 FB | 	rdlong	local10, objptr
0a19c     18 2F 02 F6 | 	mov	local09, local10
0a1a0     01 2E 66 F0 | 	shl	local09, #1
0a1a4     18 2F 02 F1 | 	add	local09, local10
0a1a8     02 2E 66 F0 | 	shl	local09, #2
0a1ac     03 00 00 FF 
0a1b0     00 E4 85 F1 | 	sub	objptr, ##1536
0a1b4     F2 2E 02 F1 | 	add	local09, objptr
0a1b8     17 29 62 FC | 	wrlong	local06, local09
0a1bc     03 00 00 FF 
0a1c0     00 E4 05 F1 | 	add	objptr, ##1536
0a1c4     F2 30 02 FB | 	rdlong	local10, objptr
0a1c8     18 2F 02 F6 | 	mov	local09, local10
0a1cc     01 2E 66 F0 | 	shl	local09, #1
0a1d0     18 2F 02 F1 | 	add	local09, local10
0a1d4     02 2E 66 F0 | 	shl	local09, #2
0a1d8     03 00 00 FF 
0a1dc     00 E4 85 F1 | 	sub	objptr, ##1536
0a1e0     F2 2E 02 F1 | 	add	local09, objptr
0a1e4     04 2E 06 F1 | 	add	local09, #4
0a1e8     17 2B 62 FC | 	wrlong	local07, local09
0a1ec     03 00 00 FF 
0a1f0     00 E4 05 F1 | 	add	objptr, ##1536
0a1f4     F2 30 02 FB | 	rdlong	local10, objptr
0a1f8     18 2F 02 F6 | 	mov	local09, local10
0a1fc     01 2E 66 F0 | 	shl	local09, #1
0a200     18 2F 02 F1 | 	add	local09, local10
0a204     02 2E 66 F0 | 	shl	local09, #2
0a208     03 00 00 FF 
0a20c     00 E4 85 F1 | 	sub	objptr, ##1536
0a210     F2 2E 02 F1 | 	add	local09, objptr
0a214     08 2E 06 F1 | 	add	local09, #8
0a218     17 33 62 FC | 	wrlong	local11, local09
0a21c     03 00 00 FF 
0a220     00 E4 05 F1 | 	add	objptr, ##1536
0a224     F2 28 02 FB | 	rdlong	local06, objptr
0a228     01 28 06 F1 | 	add	local06, #1
0a22c     F2 28 62 FC | 	wrlong	local06, objptr
0a230     13 00 00 FF 
0a234     38 E4 85 F1 | 	sub	objptr, ##9784
0a238     F2 28 02 FB | 	rdlong	local06, objptr
0a23c     01 28 06 F1 | 	add	local06, #1
0a240     F2 28 62 FC | 	wrlong	local06, objptr
0a244     37 00 00 FF 
0a248     74 E4 85 F1 | 	sub	objptr, ##28276
0a24c     C0 00 90 FD | 	jmp	#LR__0862
0a250                 | LR__0859
0a250     12 13 02 F6 | 	mov	arg01, local04
0a254     B8 03 B0 FD | 	call	#_getvar
0a258     37 00 00 FF 
0a25c     74 E4 05 F1 | 	add	objptr, ##28276
0a260     F2 28 02 FB | 	rdlong	local06, objptr
0a264     01 28 06 F1 | 	add	local06, #1
0a268     F2 28 62 FC | 	wrlong	local06, objptr
0a26c     37 00 00 FF 
0a270     74 E4 85 F1 | 	sub	objptr, ##28276
0a274     98 00 90 FD | 	jmp	#LR__0862
0a278                 | LR__0860
0a278     37 00 00 FF 
0a27c     74 E4 05 F1 | 	add	objptr, ##28276
0a280     F2 28 02 FB | 	rdlong	local06, objptr
0a284     01 28 06 F1 | 	add	local06, #1
0a288     F2 28 62 FC | 	wrlong	local06, objptr
0a28c     37 00 00 FF 
0a290     74 E4 85 F1 | 	sub	objptr, ##28276
0a294     64 F2 BF FD | 	call	#_expr
0a298                 | '     ct+=1
0a298                 | '     expr() 
0a298                 | '     if lparts(ct).token=token_rpar then ct+=1
0a298     37 00 00 FF 
0a29c     74 E4 05 F1 | 	add	objptr, ##28276
0a2a0     F2 32 02 FB | 	rdlong	local11, objptr
0a2a4     03 32 66 F0 | 	shl	local11, #3
0a2a8     02 00 00 FF 
0a2ac     38 E4 85 F1 | 	sub	objptr, ##1080
0a2b0     F2 32 02 F1 | 	add	local11, objptr
0a2b4     04 32 06 F1 | 	add	local11, #4
0a2b8     19 33 02 FB | 	rdlong	local11, local11
0a2bc     14 32 0E F2 | 	cmp	local11, #20 wz
0a2c0     35 00 00 FF 
0a2c4     3C E4 85 F1 | 	sub	objptr, ##27196
0a2c8     44 00 90 5D |  if_ne	jmp	#LR__0862
0a2cc     37 00 00 FF 
0a2d0     74 E4 05 F1 | 	add	objptr, ##28276
0a2d4     F2 28 02 FB | 	rdlong	local06, objptr
0a2d8     01 28 06 F1 | 	add	local06, #1
0a2dc     F2 28 62 FC | 	wrlong	local06, objptr
0a2e0     37 00 00 FF 
0a2e4     74 E4 85 F1 | 	sub	objptr, ##28276
0a2e8     24 00 90 FD | 	jmp	#LR__0862
0a2ec                 | LR__0861
0a2ec     12 13 02 F6 | 	mov	arg01, local04
0a2f0     28 00 B0 FD | 	call	#_getfun
0a2f4     37 00 00 FF 
0a2f8     74 E4 05 F1 | 	add	objptr, ##28276
0a2fc     F2 28 02 FB | 	rdlong	local06, objptr
0a300     01 28 06 F1 | 	add	local06, #1
0a304     F2 28 62 FC | 	wrlong	local06, objptr
0a308     37 00 00 FF 
0a30c     74 E4 85 F1 | 	sub	objptr, ##28276
0a310                 | LR__0862
0a310     A7 F0 03 F6 | 	mov	ptra, fp
0a314     B2 00 A0 FD | 	call	#popregs_
0a318                 | _getvalue_ret
0a318     2D 00 64 FD | 	ret
0a31c                 | 
0a31c                 | ' 
0a31c                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
0a31c                 | _getfun
0a31c     0A 4A 05 F6 | 	mov	COUNT_, #10
0a320     A8 00 A0 FD | 	call	#pushregs_
0a324                 | _getfun_enter
0a324     09 25 02 F6 | 	mov	local04, arg01
0a328     37 00 00 FF 
0a32c     74 E4 05 F1 | 	add	objptr, ##28276
0a330     F2 26 02 FB | 	rdlong	local05, objptr
0a334     13 29 02 F6 | 	mov	local06, local05
0a338     00 2A 06 F6 | 	mov	local07, #0
0a33c                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
0a33c                 | ' oldct=ct
0a33c                 | ' numpar=0
0a33c                 | '   
0a33c                 | ' if lparts(ct+1).token=token_lpar then
0a33c     01 26 06 F1 | 	add	local05, #1
0a340     03 26 66 F0 | 	shl	local05, #3
0a344     02 00 00 FF 
0a348     38 E4 85 F1 | 	sub	objptr, ##1080
0a34c     F2 26 02 F1 | 	add	local05, objptr
0a350     04 26 06 F1 | 	add	local05, #4
0a354     13 27 02 FB | 	rdlong	local05, local05
0a358     15 26 0E F2 | 	cmp	local05, #21 wz
0a35c     35 00 00 FF 
0a360     3C E4 85 F1 | 	sub	objptr, ##27196
0a364     08 01 90 5D |  if_ne	jmp	#LR__0874
0a368     37 00 00 FF 
0a36c     74 E4 05 F1 | 	add	objptr, ##28276
0a370     F2 2C 02 FB | 	rdlong	local08, objptr
0a374     01 2C 06 F1 | 	add	local08, #1
0a378     F2 2C 62 FC | 	wrlong	local08, objptr
0a37c     37 00 00 FF 
0a380     74 E4 85 F1 | 	sub	objptr, ##28276
0a384                 | '   ct+=1 											' omit this lpar, this is for expr list
0a384                 | '   do
0a384                 | LR__0870
0a384     37 00 00 FF 
0a388     74 E4 05 F1 | 	add	objptr, ##28276
0a38c     F2 26 02 FB | 	rdlong	local05, objptr
0a390     01 26 06 F1 | 	add	local05, #1
0a394     F2 26 62 FC | 	wrlong	local05, objptr
0a398                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0a398                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
0a398     03 26 66 F0 | 	shl	local05, #3
0a39c     02 00 00 FF 
0a3a0     38 E4 85 F1 | 	sub	objptr, ##1080
0a3a4     F2 26 02 F1 | 	add	local05, objptr
0a3a8     04 26 06 F1 | 	add	local05, #4
0a3ac     13 2D 02 FB | 	rdlong	local08, local05
0a3b0     15 2C 0E F2 | 	cmp	local08, #21 wz
0a3b4     35 00 00 FF 
0a3b8     3C E4 85 F1 | 	sub	objptr, ##27196
0a3bc     40 00 90 5D |  if_ne	jmp	#LR__0871
0a3c0     37 00 00 FF 
0a3c4     74 E4 05 F1 | 	add	objptr, ##28276
0a3c8     F2 2C 02 FB | 	rdlong	local08, objptr
0a3cc     01 2C 06 F1 | 	add	local08, #1
0a3d0     F2 2C 62 FC | 	wrlong	local08, objptr
0a3d4     37 00 00 FF 
0a3d8     74 E4 85 F1 | 	sub	objptr, ##28276
0a3dc     1C F1 BF FD | 	call	#_expr
0a3e0     37 00 00 FF 
0a3e4     74 E4 05 F1 | 	add	objptr, ##28276
0a3e8     F2 2C 02 FB | 	rdlong	local08, objptr
0a3ec     01 2C 06 F1 | 	add	local08, #1
0a3f0     F2 2C 62 FC | 	wrlong	local08, objptr
0a3f4     37 00 00 FF 
0a3f8     74 E4 85 F1 | 	sub	objptr, ##28276
0a3fc     04 00 90 FD | 	jmp	#LR__0872
0a400                 | LR__0871
0a400     F8 F0 BF FD | 	call	#_expr
0a404                 | LR__0872
0a404     01 2A 06 F1 | 	add	local07, #1
0a408     37 00 00 FF 
0a40c     74 E4 05 F1 | 	add	objptr, ##28276
0a410     F2 26 02 FB | 	rdlong	local05, objptr
0a414     03 26 66 F0 | 	shl	local05, #3
0a418     02 00 00 FF 
0a41c     38 E4 85 F1 | 	sub	objptr, ##1080
0a420     F2 26 02 F1 | 	add	local05, objptr
0a424     04 26 06 F1 | 	add	local05, #4
0a428     13 2D 02 FB | 	rdlong	local08, local05
0a42c     14 2C 0E F2 | 	cmp	local08, #20 wz
0a430     35 00 00 FF 
0a434     3C E4 85 F1 | 	sub	objptr, ##27196
0a438     34 00 90 AD |  if_e	jmp	#LR__0873
0a43c     37 00 00 FF 
0a440     74 E4 05 F1 | 	add	objptr, ##28276
0a444     F2 2C 02 FB | 	rdlong	local08, objptr
0a448     03 2C 66 F0 | 	shl	local08, #3
0a44c     02 00 00 FF 
0a450     38 E4 85 F1 | 	sub	objptr, ##1080
0a454     F2 2C 02 F1 | 	add	local08, objptr
0a458     04 2C 06 F1 | 	add	local08, #4
0a45c     16 2D 02 FB | 	rdlong	local08, local08
0a460     FE 2D 0E F2 | 	cmp	local08, #510 wz
0a464     35 00 00 FF 
0a468     3C E4 85 F1 | 	sub	objptr, ##27196
0a46c     14 FF 9F 5D |  if_ne	jmp	#LR__0870
0a470                 | LR__0873
0a470                 | LR__0874
0a470     15 1F 02 F6 | 	mov	local01, local07
0a474     03 28 66 F0 | 	shl	local06, #3
0a478     35 00 00 FF 
0a47c     3C E4 05 F1 | 	add	objptr, ##27196
0a480     F2 28 02 F1 | 	add	local06, objptr
0a484     04 28 06 F1 | 	add	local06, #4
0a488     14 23 02 FB | 	rdlong	local03, local06
0a48c     0F 2D 02 F6 | 	mov	local08, local01
0a490     10 2B 02 F6 | 	mov	local07, local02
0a494     11 29 02 F6 | 	mov	local06, local03
0a498     15 00 00 FF 
0a49c     70 E4 05 F1 | 	add	objptr, ##10864
0a4a0     F2 26 02 FB | 	rdlong	local05, objptr
0a4a4     13 13 02 F6 | 	mov	arg01, local05
0a4a8     01 12 66 F0 | 	shl	arg01, #1
0a4ac     13 13 02 F1 | 	add	arg01, local05
0a4b0     02 12 66 F0 | 	shl	arg01, #2
0a4b4     03 00 00 FF 
0a4b8     00 E4 85 F1 | 	sub	objptr, ##1536
0a4bc     F2 12 02 F1 | 	add	arg01, objptr
0a4c0     09 2D 62 FC | 	wrlong	local08, arg01
0a4c4     03 00 00 FF 
0a4c8     00 E4 05 F1 | 	add	objptr, ##1536
0a4cc     F2 2C 02 FB | 	rdlong	local08, objptr
0a4d0     16 2F 02 F6 | 	mov	local09, local08
0a4d4     01 2E 66 F0 | 	shl	local09, #1
0a4d8     16 2F 02 F1 | 	add	local09, local08
0a4dc     02 2E 66 F0 | 	shl	local09, #2
0a4e0     03 00 00 FF 
0a4e4     00 E4 85 F1 | 	sub	objptr, ##1536
0a4e8     F2 2E 02 F1 | 	add	local09, objptr
0a4ec     04 2E 06 F1 | 	add	local09, #4
0a4f0     17 2B 62 FC | 	wrlong	local07, local09
0a4f4     03 00 00 FF 
0a4f8     00 E4 05 F1 | 	add	objptr, ##1536
0a4fc     F2 2C 02 FB | 	rdlong	local08, objptr
0a500     16 31 02 F6 | 	mov	local10, local08
0a504     01 30 66 F0 | 	shl	local10, #1
0a508     16 31 02 F1 | 	add	local10, local08
0a50c     02 30 66 F0 | 	shl	local10, #2
0a510     03 00 00 FF 
0a514     00 E4 85 F1 | 	sub	objptr, ##1536
0a518     F2 30 02 F1 | 	add	local10, objptr
0a51c     08 30 06 F1 | 	add	local10, #8
0a520     18 29 62 FC | 	wrlong	local06, local10
0a524     03 00 00 FF 
0a528     00 E4 05 F1 | 	add	objptr, ##1536
0a52c     F2 2C 02 FB | 	rdlong	local08, objptr
0a530     01 2C 06 F1 | 	add	local08, #1
0a534     F2 2C 62 FC | 	wrlong	local08, objptr
0a538     4A 00 00 FF 
0a53c     AC E4 85 F1 | 	sub	objptr, ##38060
0a540                 | ' 
0a540                 | ' t2.result.uresult=numpar
0a540                 | ' 
0a540                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0a540                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0a540                 | ' 
0a540                 | '   
0a540                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0a540     FF FF 7F FF 
0a544     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0a548     B8 00 90 5D |  if_ne	jmp	#LR__0875
0a54c     15 22 06 F6 | 	mov	local03, #21
0a550     0F 2D 02 F6 | 	mov	local08, local01
0a554     10 2B 02 F6 | 	mov	local07, local02
0a558     11 29 02 F6 | 	mov	local06, local03
0a55c     4A 00 00 FF 
0a560     AC E4 05 F1 | 	add	objptr, ##38060
0a564     F2 26 02 FB | 	rdlong	local05, objptr
0a568     13 13 02 F6 | 	mov	arg01, local05
0a56c     01 12 66 F0 | 	shl	arg01, #1
0a570     13 13 02 F1 | 	add	arg01, local05
0a574     02 12 66 F0 | 	shl	arg01, #2
0a578     03 00 00 FF 
0a57c     00 E4 85 F1 | 	sub	objptr, ##1536
0a580     F2 12 02 F1 | 	add	arg01, objptr
0a584     09 2D 62 FC | 	wrlong	local08, arg01
0a588     03 00 00 FF 
0a58c     00 E4 05 F1 | 	add	objptr, ##1536
0a590     F2 30 02 FB | 	rdlong	local10, objptr
0a594     18 2F 02 F6 | 	mov	local09, local10
0a598     01 2E 66 F0 | 	shl	local09, #1
0a59c     18 2F 02 F1 | 	add	local09, local10
0a5a0     02 2E 66 F0 | 	shl	local09, #2
0a5a4     03 00 00 FF 
0a5a8     00 E4 85 F1 | 	sub	objptr, ##1536
0a5ac     F2 2E 02 F1 | 	add	local09, objptr
0a5b0     04 2E 06 F1 | 	add	local09, #4
0a5b4     17 2B 62 FC | 	wrlong	local07, local09
0a5b8     03 00 00 FF 
0a5bc     00 E4 05 F1 | 	add	objptr, ##1536
0a5c0     F2 2E 02 FB | 	rdlong	local09, objptr
0a5c4     17 31 02 F6 | 	mov	local10, local09
0a5c8     01 30 66 F0 | 	shl	local10, #1
0a5cc     17 31 02 F1 | 	add	local10, local09
0a5d0     02 30 66 F0 | 	shl	local10, #2
0a5d4     03 00 00 FF 
0a5d8     00 E4 85 F1 | 	sub	objptr, ##1536
0a5dc     F2 30 02 F1 | 	add	local10, objptr
0a5e0     08 30 06 F1 | 	add	local10, #8
0a5e4     18 29 62 FC | 	wrlong	local06, local10
0a5e8     03 00 00 FF 
0a5ec     00 E4 05 F1 | 	add	objptr, ##1536
0a5f0     F2 2C 02 FB | 	rdlong	local08, objptr
0a5f4     01 2C 06 F1 | 	add	local08, #1
0a5f8     F2 2C 62 FC | 	wrlong	local08, objptr
0a5fc     4A 00 00 FF 
0a600     AC E4 85 F1 | 	sub	objptr, ##38060
0a604                 | LR__0875
0a604     A7 F0 03 F6 | 	mov	ptra, fp
0a608     B2 00 A0 FD | 	call	#popregs_
0a60c                 | _getfun_ret
0a60c     2D 00 64 FD | 	ret
0a610                 | 
0a610                 | '   
0a610                 | '   
0a610                 | ' sub getvar(m as integer) 
0a610                 | _getvar
0a610     0A 4A 05 F6 | 	mov	COUNT_, #10
0a614     A8 00 A0 FD | 	call	#pushregs_
0a618                 | _getvar_enter
0a618     09 25 02 F6 | 	mov	local04, arg01
0a61c     37 00 00 FF 
0a620     74 E4 05 F1 | 	add	objptr, ##28276
0a624     F2 14 02 FB | 	rdlong	arg02, objptr
0a628     03 14 66 F0 | 	shl	arg02, #3
0a62c     02 00 00 FF 
0a630     38 E4 85 F1 | 	sub	objptr, ##1080
0a634     F2 14 02 F1 | 	add	arg02, objptr
0a638     0A 27 02 FB | 	rdlong	local05, arg02
0a63c     13 13 02 F6 | 	mov	arg01, local05
0a640     01 14 06 F6 | 	mov	arg02, #1
0a644     35 00 00 FF 
0a648     3C E4 85 F1 | 	sub	objptr, ##27196
0a64c     44 72 B1 FD | 	call	#__system__Right_S
0a650     FD 28 02 F6 | 	mov	local06, result1
0a654     01 2A 66 F6 | 	neg	local07, #1
0a658                 | ' 
0a658                 | ' varname$=lparts(ct).part$
0a658                 | ' suffix$=right$(varname$,1)
0a658                 | ' j=-1
0a658                 | ' 
0a658                 | ' for i=0 to varnum-1
0a658     00 2C 06 F6 | 	mov	local08, #0
0a65c     35 00 00 FF 
0a660     38 E4 05 F1 | 	add	objptr, ##27192
0a664     F2 2E 02 FB | 	rdlong	local09, objptr
0a668     35 00 00 FF 
0a66c     38 E4 85 F1 | 	sub	objptr, ##27192
0a670                 | LR__0880
0a670     17 2D 52 F2 | 	cmps	local08, local09 wc
0a674     38 00 90 3D |  if_ae	jmp	#LR__0881
0a678                 | '   if variables(i).name=varname$ then j=i : exit
0a678     16 15 02 F6 | 	mov	arg02, local08
0a67c     04 14 66 F0 | 	shl	arg02, #4
0a680     15 00 00 FF 
0a684     28 E4 05 F1 | 	add	objptr, ##10792
0a688     F2 14 02 F1 | 	add	arg02, objptr
0a68c     0A 13 02 FB | 	rdlong	arg01, arg02
0a690     13 15 02 F6 | 	mov	arg02, local05
0a694     15 00 00 FF 
0a698     28 E4 85 F1 | 	sub	objptr, ##10792
0a69c     84 51 B1 FD | 	call	#__system___string_cmp
0a6a0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a6a4     16 2B 02 A6 |  if_e	mov	local07, local08
0a6a8     01 2C 06 51 |  if_ne	add	local08, #1
0a6ac     C0 FF 9F 5D |  if_ne	jmp	#LR__0880
0a6b0                 | LR__0881
0a6b0                 | ' if  j=-1 andalso varnum<maxvars then   
0a6b0     FF FF 7F FF 
0a6b4     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
0a6b8     A8 00 90 5D |  if_ne	jmp	#LR__0882
0a6bc     35 00 00 FF 
0a6c0     38 E4 05 F1 | 	add	objptr, ##27192
0a6c4     F2 2E 02 FB | 	rdlong	local09, objptr
0a6c8     35 00 00 FF 
0a6cc     38 E4 85 F1 | 	sub	objptr, ##27192
0a6d0     02 00 00 FF 
0a6d4     00 2E 56 F2 | 	cmps	local09, ##1024 wc
0a6d8     88 00 90 3D |  if_ae	jmp	#LR__0882
0a6dc     35 00 00 FF 
0a6e0     38 E4 05 F1 | 	add	objptr, ##27192
0a6e4     F2 2E 02 FB | 	rdlong	local09, objptr
0a6e8     04 2E 66 F0 | 	shl	local09, #4
0a6ec     20 00 00 FF 
0a6f0     10 E4 85 F1 | 	sub	objptr, ##16400
0a6f4     F2 2E 02 F1 | 	add	local09, objptr
0a6f8     17 27 62 FC | 	wrlong	local05, local09
0a6fc     20 00 00 FF 
0a700     10 E4 05 F1 | 	add	objptr, ##16400
0a704     F2 2E 02 FB | 	rdlong	local09, objptr
0a708     04 2E 66 F0 | 	shl	local09, #4
0a70c     20 00 00 FF 
0a710     10 E4 85 F1 | 	sub	objptr, ##16400
0a714     F2 2E 02 F1 | 	add	local09, objptr
0a718     04 2E 06 F1 | 	add	local09, #4
0a71c     17 01 68 FC | 	wrlong	#0, local09
0a720     20 00 00 FF 
0a724     10 E4 05 F1 | 	add	objptr, ##16400
0a728     F2 2E 02 FB | 	rdlong	local09, objptr
0a72c     04 2E 66 F0 | 	shl	local09, #4
0a730     20 00 00 FF 
0a734     10 E4 85 F1 | 	sub	objptr, ##16400
0a738     F2 2E 02 F1 | 	add	local09, objptr
0a73c     0C 2E 06 F1 | 	add	local09, #12
0a740     17 39 68 FC | 	wrlong	#28, local09
0a744     20 00 00 FF 
0a748     10 E4 05 F1 | 	add	objptr, ##16400
0a74c     F2 2E 02 FB | 	rdlong	local09, objptr
0a750     17 2B 02 F6 | 	mov	local07, local09
0a754     01 2E 06 F1 | 	add	local09, #1
0a758     F2 2E 62 FC | 	wrlong	local09, objptr
0a75c     35 00 00 FF 
0a760     38 E4 85 F1 | 	sub	objptr, ##27192
0a764                 | LR__0882
0a764     00 2E 06 F6 | 	mov	local09, #0
0a768                 | ' numpar=0
0a768                 | ' ' check if it is an array
0a768                 | ' 
0a768                 | ' if lparts(ct+1).token=token_lpar then
0a768     37 00 00 FF 
0a76c     74 E4 05 F1 | 	add	objptr, ##28276
0a770     F2 2C 02 FB | 	rdlong	local08, objptr
0a774     01 2C 06 F1 | 	add	local08, #1
0a778     03 2C 66 F0 | 	shl	local08, #3
0a77c     02 00 00 FF 
0a780     38 E4 85 F1 | 	sub	objptr, ##1080
0a784     F2 2C 02 F1 | 	add	local08, objptr
0a788     04 2C 06 F1 | 	add	local08, #4
0a78c     16 2D 02 FB | 	rdlong	local08, local08
0a790     15 2C 0E F2 | 	cmp	local08, #21 wz
0a794     35 00 00 FF 
0a798     3C E4 85 F1 | 	sub	objptr, ##27196
0a79c     08 01 90 5D |  if_ne	jmp	#LR__0887
0a7a0     37 00 00 FF 
0a7a4     74 E4 05 F1 | 	add	objptr, ##28276
0a7a8     F2 30 02 FB | 	rdlong	local10, objptr
0a7ac     01 30 06 F1 | 	add	local10, #1
0a7b0     F2 30 62 FC | 	wrlong	local10, objptr
0a7b4     37 00 00 FF 
0a7b8     74 E4 85 F1 | 	sub	objptr, ##28276
0a7bc                 | '   ct+=1 											' omit this lpar, this is for expr list
0a7bc                 | '   do
0a7bc                 | LR__0883
0a7bc     37 00 00 FF 
0a7c0     74 E4 05 F1 | 	add	objptr, ##28276
0a7c4     F2 2C 02 FB | 	rdlong	local08, objptr
0a7c8     01 2C 06 F1 | 	add	local08, #1
0a7cc     F2 2C 62 FC | 	wrlong	local08, objptr
0a7d0                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0a7d0                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
0a7d0     03 2C 66 F0 | 	shl	local08, #3
0a7d4     02 00 00 FF 
0a7d8     38 E4 85 F1 | 	sub	objptr, ##1080
0a7dc     F2 2C 02 F1 | 	add	local08, objptr
0a7e0     04 2C 06 F1 | 	add	local08, #4
0a7e4     16 31 02 FB | 	rdlong	local10, local08
0a7e8     15 30 0E F2 | 	cmp	local10, #21 wz
0a7ec     35 00 00 FF 
0a7f0     3C E4 85 F1 | 	sub	objptr, ##27196
0a7f4     40 00 90 5D |  if_ne	jmp	#LR__0884
0a7f8     37 00 00 FF 
0a7fc     74 E4 05 F1 | 	add	objptr, ##28276
0a800     F2 30 02 FB | 	rdlong	local10, objptr
0a804     01 30 06 F1 | 	add	local10, #1
0a808     F2 30 62 FC | 	wrlong	local10, objptr
0a80c     37 00 00 FF 
0a810     74 E4 85 F1 | 	sub	objptr, ##28276
0a814     E4 EC BF FD | 	call	#_expr
0a818     37 00 00 FF 
0a81c     74 E4 05 F1 | 	add	objptr, ##28276
0a820     F2 30 02 FB | 	rdlong	local10, objptr
0a824     01 30 06 F1 | 	add	local10, #1
0a828     F2 30 62 FC | 	wrlong	local10, objptr
0a82c     37 00 00 FF 
0a830     74 E4 85 F1 | 	sub	objptr, ##28276
0a834     04 00 90 FD | 	jmp	#LR__0885
0a838                 | LR__0884
0a838     C0 EC BF FD | 	call	#_expr
0a83c                 | LR__0885
0a83c     01 2E 06 F1 | 	add	local09, #1
0a840     37 00 00 FF 
0a844     74 E4 05 F1 | 	add	objptr, ##28276
0a848     F2 2C 02 FB | 	rdlong	local08, objptr
0a84c     03 2C 66 F0 | 	shl	local08, #3
0a850     02 00 00 FF 
0a854     38 E4 85 F1 | 	sub	objptr, ##1080
0a858     F2 2C 02 F1 | 	add	local08, objptr
0a85c     04 2C 06 F1 | 	add	local08, #4
0a860     16 31 02 FB | 	rdlong	local10, local08
0a864     14 30 0E F2 | 	cmp	local10, #20 wz
0a868     35 00 00 FF 
0a86c     3C E4 85 F1 | 	sub	objptr, ##27196
0a870     34 00 90 AD |  if_e	jmp	#LR__0886
0a874     37 00 00 FF 
0a878     74 E4 05 F1 | 	add	objptr, ##28276
0a87c     F2 30 02 FB | 	rdlong	local10, objptr
0a880     03 30 66 F0 | 	shl	local10, #3
0a884     02 00 00 FF 
0a888     38 E4 85 F1 | 	sub	objptr, ##1080
0a88c     F2 30 02 F1 | 	add	local10, objptr
0a890     04 30 06 F1 | 	add	local10, #4
0a894     18 31 02 FB | 	rdlong	local10, local10
0a898     FE 31 0E F2 | 	cmp	local10, #510 wz
0a89c     35 00 00 FF 
0a8a0     3C E4 85 F1 | 	sub	objptr, ##27196
0a8a4     14 FF 9F 5D |  if_ne	jmp	#LR__0883
0a8a8                 | LR__0886
0a8a8                 | LR__0887
0a8a8     17 21 02 F6 | 	mov	local02, local09
0a8ac     11 22 06 F6 | 	mov	local03, #17
0a8b0     15 1F 02 F6 | 	mov	local01, local07
0a8b4     0F 31 02 F6 | 	mov	local10, local01
0a8b8     10 2F 02 F6 | 	mov	local09, local02
0a8bc     11 2D 02 F6 | 	mov	local08, local03
0a8c0     4A 00 00 FF 
0a8c4     AC E4 05 F1 | 	add	objptr, ##38060
0a8c8     F2 2A 02 FB | 	rdlong	local07, objptr
0a8cc     15 29 02 F6 | 	mov	local06, local07
0a8d0     01 28 66 F0 | 	shl	local06, #1
0a8d4     15 29 02 F1 | 	add	local06, local07
0a8d8     02 28 66 F0 | 	shl	local06, #2
0a8dc     03 00 00 FF 
0a8e0     00 E4 85 F1 | 	sub	objptr, ##1536
0a8e4     F2 28 02 F1 | 	add	local06, objptr
0a8e8     14 31 62 FC | 	wrlong	local10, local06
0a8ec     03 00 00 FF 
0a8f0     00 E4 05 F1 | 	add	objptr, ##1536
0a8f4     F2 30 02 FB | 	rdlong	local10, objptr
0a8f8     18 27 02 F6 | 	mov	local05, local10
0a8fc     01 26 66 F0 | 	shl	local05, #1
0a900     18 27 02 F1 | 	add	local05, local10
0a904     02 26 66 F0 | 	shl	local05, #2
0a908     03 00 00 FF 
0a90c     00 E4 85 F1 | 	sub	objptr, ##1536
0a910     F2 26 02 F1 | 	add	local05, objptr
0a914     04 26 06 F1 | 	add	local05, #4
0a918     13 2F 62 FC | 	wrlong	local09, local05
0a91c     03 00 00 FF 
0a920     00 E4 05 F1 | 	add	objptr, ##1536
0a924     F2 30 02 FB | 	rdlong	local10, objptr
0a928     18 FB 01 F6 | 	mov	result1, local10
0a92c     01 FA 65 F0 | 	shl	result1, #1
0a930     18 FB 01 F1 | 	add	result1, local10
0a934     02 FA 65 F0 | 	shl	result1, #2
0a938     03 00 00 FF 
0a93c     00 E4 85 F1 | 	sub	objptr, ##1536
0a940     F2 FA 01 F1 | 	add	result1, objptr
0a944     08 FA 05 F1 | 	add	result1, #8
0a948     FD 2C 62 FC | 	wrlong	local08, result1
0a94c     03 00 00 FF 
0a950     00 E4 05 F1 | 	add	objptr, ##1536
0a954     F2 30 02 FB | 	rdlong	local10, objptr
0a958     01 30 06 F1 | 	add	local10, #1
0a95c     F2 30 62 FC | 	wrlong	local10, objptr
0a960     4A 00 00 FF 
0a964     AC E4 85 F1 | 	sub	objptr, ##38060
0a968                 | ' 
0a968                 | ' t2.result.twowords(1)=numpar
0a968                 | ' 
0a968                 | ' 
0a968                 | ' 
0a968                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0a968                 | ' 
0a968                 | ' 
0a968                 | '  
0a968                 | ' 
0a968                 | ' 701 
0a968                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0a968                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0a968     FF FF 7F FF 
0a96c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0a970     B8 00 90 5D |  if_ne	jmp	#LR__0888
0a974     15 22 06 F6 | 	mov	local03, #21
0a978     0F 31 02 F6 | 	mov	local10, local01
0a97c     10 2F 02 F6 | 	mov	local09, local02
0a980     11 2D 02 F6 | 	mov	local08, local03
0a984     4A 00 00 FF 
0a988     AC E4 05 F1 | 	add	objptr, ##38060
0a98c     F2 2A 02 FB | 	rdlong	local07, objptr
0a990     15 29 02 F6 | 	mov	local06, local07
0a994     01 28 66 F0 | 	shl	local06, #1
0a998     15 29 02 F1 | 	add	local06, local07
0a99c     02 28 66 F0 | 	shl	local06, #2
0a9a0     03 00 00 FF 
0a9a4     00 E4 85 F1 | 	sub	objptr, ##1536
0a9a8     F2 28 02 F1 | 	add	local06, objptr
0a9ac     14 31 62 FC | 	wrlong	local10, local06
0a9b0     03 00 00 FF 
0a9b4     00 E4 05 F1 | 	add	objptr, ##1536
0a9b8     F2 1E 02 FB | 	rdlong	local01, objptr
0a9bc     0F 27 02 F6 | 	mov	local05, local01
0a9c0     01 26 66 F0 | 	shl	local05, #1
0a9c4     0F 27 02 F1 | 	add	local05, local01
0a9c8     02 26 66 F0 | 	shl	local05, #2
0a9cc     03 00 00 FF 
0a9d0     00 E4 85 F1 | 	sub	objptr, ##1536
0a9d4     F2 26 02 F1 | 	add	local05, objptr
0a9d8     04 26 06 F1 | 	add	local05, #4
0a9dc     13 2F 62 FC | 	wrlong	local09, local05
0a9e0     03 00 00 FF 
0a9e4     00 E4 05 F1 | 	add	objptr, ##1536
0a9e8     F2 1E 02 FB | 	rdlong	local01, objptr
0a9ec     0F FB 01 F6 | 	mov	result1, local01
0a9f0     01 FA 65 F0 | 	shl	result1, #1
0a9f4     0F FB 01 F1 | 	add	result1, local01
0a9f8     02 FA 65 F0 | 	shl	result1, #2
0a9fc     03 00 00 FF 
0aa00     00 E4 85 F1 | 	sub	objptr, ##1536
0aa04     F2 FA 01 F1 | 	add	result1, objptr
0aa08     08 FA 05 F1 | 	add	result1, #8
0aa0c     FD 2C 62 FC | 	wrlong	local08, result1
0aa10     03 00 00 FF 
0aa14     00 E4 05 F1 | 	add	objptr, ##1536
0aa18     F2 30 02 FB | 	rdlong	local10, objptr
0aa1c     01 30 06 F1 | 	add	local10, #1
0aa20     F2 30 62 FC | 	wrlong	local10, objptr
0aa24     4A 00 00 FF 
0aa28     AC E4 85 F1 | 	sub	objptr, ##38060
0aa2c                 | LR__0888
0aa2c     A7 F0 03 F6 | 	mov	ptra, fp
0aa30     B2 00 A0 FD | 	call	#popregs_
0aa34                 | _getvar_ret
0aa34     2D 00 64 FD | 	ret
0aa38                 | 
0aa38                 | ' 
0aa38                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0aa38                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0aa38                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0aa38                 | ' 
0aa38                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0aa38                 | ' '--------------------------------------------- Runtime functions ------------------------------------------------------------------------ 
0aa38                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0aa38                 | ' 
0aa38                 | ' function execute_line (astart=0 as integer) as integer
0aa38                 | _execute_line
0aa38     04 4A 05 F6 | 	mov	COUNT_, #4
0aa3c     A8 00 A0 FD | 	call	#pushregs_
0aa40     58 00 00 FF 
0aa44     F0 E4 05 F1 | 	add	objptr, ##45296
0aa48     F2 00 68 FC | 	wrlong	#0, objptr
0aa4c                 | ' runptr2=0
0aa4c                 | ' for lineptr_e=astart to lineptr-1
0aa4c     0E 00 00 FF 
0aa50     40 E4 85 F1 | 	sub	objptr, ##7232
0aa54     F2 12 62 FC | 	wrlong	arg01, objptr
0aa58     04 E4 85 F1 | 	sub	objptr, #4
0aa5c     F2 1E 02 FB | 	rdlong	local01, objptr
0aa60     4A 00 00 FF 
0aa64     AC E4 85 F1 | 	sub	objptr, ##38060
0aa68                 | LR__0890
0aa68     4A 00 00 FF 
0aa6c     B0 E4 05 F1 | 	add	objptr, ##38064
0aa70     F2 FA 01 FB | 	rdlong	result1, objptr
0aa74     4A 00 00 FF 
0aa78     B0 E4 85 F1 | 	sub	objptr, ##38064
0aa7c     0F FB 51 F2 | 	cmps	result1, local01 wc
0aa80     98 00 90 3D |  if_ae	jmp	#LR__0891
0aa84     4A 00 00 FF 
0aa88     B0 E4 05 F1 | 	add	objptr, ##38064
0aa8c     F2 FA 01 FB | 	rdlong	result1, objptr
0aa90     FD 20 02 F6 | 	mov	local02, result1
0aa94     01 20 66 F0 | 	shl	local02, #1
0aa98     FD 20 02 F1 | 	add	local02, result1
0aa9c     02 20 66 F0 | 	shl	local02, #2
0aaa0     03 00 00 FF 
0aaa4     04 E4 85 F1 | 	sub	objptr, ##1540
0aaa8     F2 20 02 F1 | 	add	local02, objptr
0aaac     08 20 06 F1 | 	add	local02, #8
0aab0     10 21 02 FB | 	rdlong	local02, local02
0aab4     10 21 E2 F8 | 	getbyte	local02, local02, #0
0aab8     02 20 66 F0 | 	shl	local02, #2
0aabc     04 00 00 FF 
0aac0     1C E4 85 F1 | 	sub	objptr, ##2076
0aac4     F2 20 02 F1 | 	add	local02, objptr
0aac8     10 21 02 FB | 	rdlong	local02, local02
0aacc     10 23 02 F6 | 	mov	local03, local02
0aad0     13 20 46 F7 | 	zerox	local02, #19
0aad4     14 22 46 F0 | 	shr	local03, #20
0aad8     02 22 66 F0 | 	shl	local03, #2
0aadc     ED 22 02 F1 | 	add	local03, __methods__
0aae0     11 23 02 FB | 	rdlong	local03, local03
0aae4     43 00 00 FF 
0aae8     90 E4 85 F1 | 	sub	objptr, ##34448
0aaec     F2 24 02 F6 | 	mov	local04, objptr
0aaf0     10 E5 01 F6 | 	mov	objptr, local02
0aaf4     2D 22 62 FD | 	call	local03
0aaf8     12 E5 01 F6 | 	mov	objptr, local04
0aafc     4A 00 00 FF 
0ab00     B0 E4 05 F1 | 	add	objptr, ##38064
0ab04     F2 24 02 FB | 	rdlong	local04, objptr
0ab08     01 24 06 F1 | 	add	local04, #1
0ab0c     F2 24 62 FC | 	wrlong	local04, objptr
0ab10     4A 00 00 FF 
0ab14     B0 E4 85 F1 | 	sub	objptr, ##38064
0ab18     4C FF 9F FD | 	jmp	#LR__0890
0ab1c                 | LR__0891
0ab1c                 | ' return runptr2
0ab1c     58 00 00 FF 
0ab20     F0 E4 05 F1 | 	add	objptr, ##45296
0ab24     F2 FA 01 FB | 	rdlong	result1, objptr
0ab28     58 00 00 FF 
0ab2c     F0 E4 85 F1 | 	sub	objptr, ##45296
0ab30     A7 F0 03 F6 | 	mov	ptra, fp
0ab34     B2 00 A0 FD | 	call	#popregs_
0ab38                 | _execute_line_ret
0ab38     2D 00 64 FD | 	ret
0ab3c                 | 
0ab3c                 | ' 
0ab3c                 | ' 
0ab3c                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0ab3c                 | ' 
0ab3c                 | ' function pop() as expr_result
0ab3c                 | _pop
0ab3c                 | ' 
0ab3c                 | ' if stackpointer=0 then
0ab3c     43 00 00 FF 
0ab40     88 E4 05 F1 | 	add	objptr, ##34440
0ab44     F2 FA 09 FB | 	rdlong	result1, objptr wz
0ab48     43 00 00 FF 
0ab4c     88 E4 85 F1 | 	sub	objptr, ##34440
0ab50     FF 04 06 A6 |  if_e	mov	_var03, #255
0ab54     18 00 06 A6 |  if_e	mov	_var01, #24
0ab58     68 00 90 AD |  if_e	jmp	#LR__0900
0ab5c     43 00 00 FF 
0ab60     88 E4 05 F1 | 	add	objptr, ##34440
0ab64     F2 FA 01 FB | 	rdlong	result1, objptr
0ab68     01 FA 85 F1 | 	sub	result1, #1
0ab6c     F2 FA 61 FC | 	wrlong	result1, objptr
0ab70     FD FE 01 F6 | 	mov	result3, result1
0ab74     01 FE 65 F0 | 	shl	result3, #1
0ab78     FD FE 01 F1 | 	add	result3, result1
0ab7c     02 FE 65 F0 | 	shl	result3, #2
0ab80     0C 00 00 FF 
0ab84     0C E4 85 F1 | 	sub	objptr, ##6156
0ab88     F2 FE 01 F1 | 	add	result3, objptr
0ab8c     FF 00 02 FB | 	rdlong	_var01, result3
0ab90     04 FE 05 F1 | 	add	result3, #4
0ab94     FF FE 01 FB | 	rdlong	result3, result3
0ab98     FD FC 01 F6 | 	mov	result2, result1
0ab9c     01 FC 65 F0 | 	shl	result2, #1
0aba0     FD FC 01 F1 | 	add	result2, result1
0aba4     02 FC 65 F0 | 	shl	result2, #2
0aba8     F2 FC 01 F1 | 	add	result2, objptr
0abac     08 FC 05 F1 | 	add	result2, #8
0abb0     FE FA 01 FB | 	rdlong	result1, result2
0abb4     FF 02 02 F6 | 	mov	_var02, result3
0abb8     FD 04 02 F6 | 	mov	_var03, result1
0abbc     37 00 00 FF 
0abc0     7C E4 85 F1 | 	sub	objptr, ##28284
0abc4                 | LR__0900
0abc4                 | ' return t1
0abc4     01 FD 01 F6 | 	mov	result2, _var02
0abc8     02 FF 01 F6 | 	mov	result3, _var03
0abcc     00 FB 01 F6 | 	mov	result1, _var01
0abd0                 | _pop_ret
0abd0     2D 00 64 FD | 	ret
0abd4                 | 
0abd4                 | ' 
0abd4                 | ' sub push(t1 as expr_result )
0abd4                 | _push
0abd4                 | ' 
0abd4                 | ' 'print "In push: "; t1.result_type
0abd4                 | ' 'print "In push: "; t1.result.uresult
0abd4                 | ' 
0abd4                 | ' if stackpointer<maxstack then 
0abd4     43 00 00 FF 
0abd8     88 E4 05 F1 | 	add	objptr, ##34440
0abdc     F2 00 02 FB | 	rdlong	_var01, objptr
0abe0     43 00 00 FF 
0abe4     88 E4 85 F1 | 	sub	objptr, ##34440
0abe8     01 00 00 FF 
0abec     00 00 56 F2 | 	cmps	_var01, ##512 wc
0abf0     BC 00 90 3D |  if_ae	jmp	#LR__0910
0abf4     09 01 02 FB | 	rdlong	_var01, arg01
0abf8     04 12 06 F1 | 	add	arg01, #4
0abfc     09 03 02 FB | 	rdlong	_var02, arg01
0ac00     04 12 06 F1 | 	add	arg01, #4
0ac04     09 13 02 FB | 	rdlong	arg01, arg01
0ac08     43 00 00 FF 
0ac0c     88 E4 05 F1 | 	add	objptr, ##34440
0ac10     F2 04 02 FB | 	rdlong	_var03, objptr
0ac14     02 07 02 F6 | 	mov	_var04, _var03
0ac18     01 06 66 F0 | 	shl	_var04, #1
0ac1c     02 07 02 F1 | 	add	_var04, _var03
0ac20     02 06 66 F0 | 	shl	_var04, #2
0ac24     0C 00 00 FF 
0ac28     0C E4 85 F1 | 	sub	objptr, ##6156
0ac2c     F2 06 02 F1 | 	add	_var04, objptr
0ac30     03 01 62 FC | 	wrlong	_var01, _var04
0ac34     0C 00 00 FF 
0ac38     0C E4 05 F1 | 	add	objptr, ##6156
0ac3c     F2 06 02 FB | 	rdlong	_var04, objptr
0ac40     03 05 02 F6 | 	mov	_var03, _var04
0ac44     01 04 66 F0 | 	shl	_var03, #1
0ac48     03 05 02 F1 | 	add	_var03, _var04
0ac4c     02 04 66 F0 | 	shl	_var03, #2
0ac50     0C 00 00 FF 
0ac54     0C E4 85 F1 | 	sub	objptr, ##6156
0ac58     F2 04 02 F1 | 	add	_var03, objptr
0ac5c     04 04 06 F1 | 	add	_var03, #4
0ac60     02 03 62 FC | 	wrlong	_var02, _var03
0ac64     0C 00 00 FF 
0ac68     0C E4 05 F1 | 	add	objptr, ##6156
0ac6c     F2 06 02 FB | 	rdlong	_var04, objptr
0ac70     03 05 02 F6 | 	mov	_var03, _var04
0ac74     01 04 66 F0 | 	shl	_var03, #1
0ac78     03 05 02 F1 | 	add	_var03, _var04
0ac7c     02 04 66 F0 | 	shl	_var03, #2
0ac80     0C 00 00 FF 
0ac84     0C E4 85 F1 | 	sub	objptr, ##6156
0ac88     F2 04 02 F1 | 	add	_var03, objptr
0ac8c     08 04 06 F1 | 	add	_var03, #8
0ac90     02 13 62 FC | 	wrlong	arg01, _var03
0ac94     0C 00 00 FF 
0ac98     0C E4 05 F1 | 	add	objptr, ##6156
0ac9c     F2 00 02 FB | 	rdlong	_var01, objptr
0aca0     01 00 06 F1 | 	add	_var01, #1
0aca4     F2 00 62 FC | 	wrlong	_var01, objptr
0aca8     43 00 00 FF 
0acac     88 E4 85 F1 | 	sub	objptr, ##34440
0acb0                 | LR__0910
0acb0                 | _push_ret
0acb0     2D 00 64 FD | 	ret
0acb4                 | 
0acb4                 | ' 
0acb4                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
0acb4                 | ' 
0acb4                 | ' sub do_push
0acb4                 | _do_push
0acb4                 | ' if stackpointer<maxstack then 
0acb4     43 00 00 FF 
0acb8     88 E4 05 F1 | 	add	objptr, ##34440
0acbc     F2 00 02 FB | 	rdlong	_var01, objptr
0acc0     43 00 00 FF 
0acc4     88 E4 85 F1 | 	sub	objptr, ##34440
0acc8     01 00 00 FF 
0accc     00 00 56 F2 | 	cmps	_var01, ##512 wc
0acd0     F8 00 90 3D |  if_ae	jmp	#LR__0920
0acd4     4A 00 00 FF 
0acd8     B0 E4 05 F1 | 	add	objptr, ##38064
0acdc     F2 02 02 FB | 	rdlong	_var02, objptr
0ace0     01 05 02 F6 | 	mov	_var03, _var02
0ace4     01 04 66 F0 | 	shl	_var03, #1
0ace8     01 05 02 F1 | 	add	_var03, _var02
0acec     02 04 66 F0 | 	shl	_var03, #2
0acf0     03 00 00 FF 
0acf4     04 E4 85 F1 | 	sub	objptr, ##1540
0acf8     F2 04 02 F1 | 	add	_var03, objptr
0acfc     02 01 02 FB | 	rdlong	_var01, _var03
0ad00     04 04 06 F1 | 	add	_var03, #4
0ad04     02 07 02 FB | 	rdlong	_var04, _var03
0ad08     01 05 02 F6 | 	mov	_var03, _var02
0ad0c     01 04 66 F0 | 	shl	_var03, #1
0ad10     01 05 02 F1 | 	add	_var03, _var02
0ad14     02 04 66 F0 | 	shl	_var03, #2
0ad18     F2 04 02 F1 | 	add	_var03, objptr
0ad1c     08 04 06 F1 | 	add	_var03, #8
0ad20     02 03 02 FB | 	rdlong	_var02, _var03
0ad24     04 00 00 FF 
0ad28     24 E4 85 F1 | 	sub	objptr, ##2084
0ad2c     F2 04 02 FB | 	rdlong	_var03, objptr
0ad30     02 09 02 F6 | 	mov	_var05, _var03
0ad34     01 08 66 F0 | 	shl	_var05, #1
0ad38     02 09 02 F1 | 	add	_var05, _var03
0ad3c     02 08 66 F0 | 	shl	_var05, #2
0ad40     0C 00 00 FF 
0ad44     0C E4 85 F1 | 	sub	objptr, ##6156
0ad48     F2 08 02 F1 | 	add	_var05, objptr
0ad4c     04 01 62 FC | 	wrlong	_var01, _var05
0ad50     0C 00 00 FF 
0ad54     0C E4 05 F1 | 	add	objptr, ##6156
0ad58     F2 08 02 FB | 	rdlong	_var05, objptr
0ad5c     04 05 02 F6 | 	mov	_var03, _var05
0ad60     01 04 66 F0 | 	shl	_var03, #1
0ad64     04 05 02 F1 | 	add	_var03, _var05
0ad68     02 04 66 F0 | 	shl	_var03, #2
0ad6c     0C 00 00 FF 
0ad70     0C E4 85 F1 | 	sub	objptr, ##6156
0ad74     F2 04 02 F1 | 	add	_var03, objptr
0ad78     04 04 06 F1 | 	add	_var03, #4
0ad7c     02 07 62 FC | 	wrlong	_var04, _var03
0ad80     0C 00 00 FF 
0ad84     0C E4 05 F1 | 	add	objptr, ##6156
0ad88     F2 08 02 FB | 	rdlong	_var05, objptr
0ad8c     04 07 02 F6 | 	mov	_var04, _var05
0ad90     01 06 66 F0 | 	shl	_var04, #1
0ad94     04 07 02 F1 | 	add	_var04, _var05
0ad98     02 06 66 F0 | 	shl	_var04, #2
0ad9c     0C 00 00 FF 
0ada0     0C E4 85 F1 | 	sub	objptr, ##6156
0ada4     F2 06 02 F1 | 	add	_var04, objptr
0ada8     08 06 06 F1 | 	add	_var04, #8
0adac     03 03 62 FC | 	wrlong	_var02, _var04
0adb0     0C 00 00 FF 
0adb4     0C E4 05 F1 | 	add	objptr, ##6156
0adb8     F2 00 02 FB | 	rdlong	_var01, objptr
0adbc     01 00 06 F1 | 	add	_var01, #1
0adc0     F2 00 62 FC | 	wrlong	_var01, objptr
0adc4     43 00 00 FF 
0adc8     88 E4 85 F1 | 	sub	objptr, ##34440
0adcc                 | LR__0920
0adcc                 | _do_push_ret
0adcc     2D 00 64 FD | 	ret
0add0                 | 
0add0                 | ' 
0add0                 | '   
0add0                 | ' sub csave_block(address as ulong)
0add0                 | _csave_block
0add0     09 01 02 F6 | 	mov	_var01, arg01
0add4                 | ' 
0add4                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
0add4                 | ' ' we enter it at the state of playing 1 kHz header tone
0add4                 | ' 
0add4                 | ' for i=0 to 63 step 2
0add4     00 02 06 F6 | 	mov	_var02, #0
0add8                 | LR__0930
0add8                 | '   do: loop until lpeek(base+64*7)>32768
0add8     37 00 00 FF 
0addc     40 E4 05 F1 | 	add	objptr, ##28224
0ade0     97 0C 48 FB | 	callpa	#(@LR__0932-@LR__0931)>>2,fcache_load_ptr_
0ade4                 | LR__0931
0ade4     F2 12 02 FB | 	rdlong	arg01, objptr
0ade8     C0 13 06 F1 | 	add	arg01, #448
0adec     09 FB 01 FB | 	rdlong	result1, arg01
0adf0     40 00 00 FF 
0adf4     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0adf8     E8 FF 9F CD |  if_b	jmp	#LR__0931
0adfc                 | LR__0932
0adfc     00 13 02 F6 | 	mov	arg01, _var01
0ae00     01 05 02 F6 | 	mov	_var03, _var02
0ae04     02 04 66 F0 | 	shl	_var03, #2
0ae08     02 13 02 F1 | 	add	arg01, _var03
0ae0c     09 07 02 FB | 	rdlong	_var04, arg01
0ae10     22 00 00 FF 
0ae14     F4 E5 05 F1 | 	add	objptr, ##17908
0ae18     F2 06 62 FC | 	wrlong	_var04, objptr
0ae1c     5A 00 00 FF 
0ae20     34 E4 85 F1 | 	sub	objptr, ##46132
0ae24                 | '   q=lpeek(address+4*i)
0ae24                 | '      for bit=0 to 31
0ae24     00 08 06 F6 | 	mov	_var05, #0
0ae28     97 84 48 FB | 	callpa	#(@LR__0937-@LR__0933)>>2,fcache_load_ptr_
0ae2c                 | LR__0933
0ae2c                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
0ae2c     5A 00 00 FF 
0ae30     34 E4 05 F1 | 	add	objptr, ##46132
0ae34     F2 06 02 FB | 	rdlong	_var04, objptr
0ae38     5A 00 00 FF 
0ae3c     34 E4 85 F1 | 	sub	objptr, ##46132
0ae40     04 05 C2 F9 | 	decod	_var03, _var05
0ae44     02 07 CA F7 | 	test	_var04, _var03 wz
0ae48     60 00 90 AD |  if_e	jmp	#LR__0934
0ae4c     04 05 02 F6 | 	mov	_var03, _var05
0ae50     02 04 66 F0 | 	shl	_var03, #2
0ae54     55 00 00 FF 
0ae58     E8 E5 05 F1 | 	add	objptr, ##44008
0ae5c     F2 04 02 F1 | 	add	_var03, objptr
0ae60     02 FF 48 FC | 	wrbyte	#127, _var03
0ae64     04 05 02 F6 | 	mov	_var03, _var05
0ae68     02 04 66 F0 | 	shl	_var03, #2
0ae6c     01 04 06 F1 | 	add	_var03, #1
0ae70     F2 04 02 F1 | 	add	_var03, objptr
0ae74     02 01 49 FC | 	wrbyte	#128, _var03
0ae78     04 05 02 F6 | 	mov	_var03, _var05
0ae7c     02 04 66 F0 | 	shl	_var03, #2
0ae80     02 04 06 F1 | 	add	_var03, #2
0ae84     F2 04 02 F1 | 	add	_var03, objptr
0ae88     02 FF 48 FC | 	wrbyte	#127, _var03
0ae8c     04 05 02 F6 | 	mov	_var03, _var05
0ae90     02 04 66 F0 | 	shl	_var03, #2
0ae94     03 04 06 F1 | 	add	_var03, #3
0ae98     F2 04 02 F1 | 	add	_var03, objptr
0ae9c     02 01 49 FC | 	wrbyte	#128, _var03
0aea0     55 00 00 FF 
0aea4     E8 E5 85 F1 | 	sub	objptr, ##44008
0aea8     5C 00 90 FD | 	jmp	#LR__0935
0aeac                 | LR__0934
0aeac     04 05 02 F6 | 	mov	_var03, _var05
0aeb0     02 04 66 F0 | 	shl	_var03, #2
0aeb4     55 00 00 FF 
0aeb8     E8 E5 05 F1 | 	add	objptr, ##44008
0aebc     F2 04 02 F1 | 	add	_var03, objptr
0aec0     02 01 49 FC | 	wrbyte	#128, _var03
0aec4     04 05 02 F6 | 	mov	_var03, _var05
0aec8     02 04 66 F0 | 	shl	_var03, #2
0aecc     01 04 06 F1 | 	add	_var03, #1
0aed0     F2 04 02 F1 | 	add	_var03, objptr
0aed4     02 01 49 FC | 	wrbyte	#128, _var03
0aed8     04 05 02 F6 | 	mov	_var03, _var05
0aedc     02 04 66 F0 | 	shl	_var03, #2
0aee0     02 04 06 F1 | 	add	_var03, #2
0aee4     F2 04 02 F1 | 	add	_var03, objptr
0aee8     02 FF 48 FC | 	wrbyte	#127, _var03
0aeec     04 05 02 F6 | 	mov	_var03, _var05
0aef0     02 04 66 F0 | 	shl	_var03, #2
0aef4     03 04 06 F1 | 	add	_var03, #3
0aef8     F2 04 02 F1 | 	add	_var03, objptr
0aefc     02 FF 48 FC | 	wrbyte	#127, _var03
0af00     55 00 00 FF 
0af04     E8 E5 85 F1 | 	sub	objptr, ##44008
0af08                 | LR__0935
0af08     01 08 06 F1 | 	add	_var05, #1
0af0c     20 08 56 F2 | 	cmps	_var05, #32 wc
0af10     18 FF 9F CD |  if_b	jmp	#LR__0933
0af14                 | '   do: loop until lpeek(base+64*7)<32768
0af14     37 00 00 FF 
0af18     40 E4 05 F1 | 	add	objptr, ##28224
0af1c                 | LR__0936
0af1c     F2 12 02 FB | 	rdlong	arg01, objptr
0af20     C0 13 06 F1 | 	add	arg01, #448
0af24     09 FB 01 FB | 	rdlong	result1, arg01
0af28     40 00 00 FF 
0af2c     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0af30     E8 FF 9F 3D |  if_ae	jmp	#LR__0936
0af34                 | LR__0937
0af34     00 13 02 F6 | 	mov	arg01, _var01
0af38     04 12 06 F1 | 	add	arg01, #4
0af3c     01 05 02 F6 | 	mov	_var03, _var02
0af40     02 04 66 F0 | 	shl	_var03, #2
0af44     02 13 02 F1 | 	add	arg01, _var03
0af48     09 07 02 FB | 	rdlong	_var04, arg01
0af4c     22 00 00 FF 
0af50     F4 E5 05 F1 | 	add	objptr, ##17908
0af54     F2 06 62 FC | 	wrlong	_var04, objptr
0af58     5A 00 00 FF 
0af5c     34 E4 85 F1 | 	sub	objptr, ##46132
0af60                 | '   q=lpeek(address+4+4*i)
0af60                 | '      for bit=0 to 31
0af60     00 08 06 F6 | 	mov	_var05, #0
0af64     97 94 48 FB | 	callpa	#(@LR__0941-@LR__0938)>>2,fcache_load_ptr_
0af68                 | LR__0938
0af68                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
0af68     5A 00 00 FF 
0af6c     34 E4 05 F1 | 	add	objptr, ##46132
0af70     F2 06 02 FB | 	rdlong	_var04, objptr
0af74     5A 00 00 FF 
0af78     34 E4 85 F1 | 	sub	objptr, ##46132
0af7c     04 05 C2 F9 | 	decod	_var03, _var05
0af80     02 07 CA F7 | 	test	_var04, _var03 wz
0af84     80 00 90 AD |  if_e	jmp	#LR__0939
0af88     04 0B 02 F6 | 	mov	_var06, _var05
0af8c     02 0A 66 F0 | 	shl	_var06, #2
0af90     80 04 06 F6 | 	mov	_var03, #128
0af94     05 05 02 F1 | 	add	_var03, _var06
0af98     55 00 00 FF 
0af9c     E8 E5 05 F1 | 	add	objptr, ##44008
0afa0     F2 04 02 F1 | 	add	_var03, objptr
0afa4     02 FF 48 FC | 	wrbyte	#127, _var03
0afa8     04 0B 02 F6 | 	mov	_var06, _var05
0afac     02 0A 66 F0 | 	shl	_var06, #2
0afb0     80 04 06 F6 | 	mov	_var03, #128
0afb4     05 05 02 F1 | 	add	_var03, _var06
0afb8     01 04 06 F1 | 	add	_var03, #1
0afbc     F2 04 02 F1 | 	add	_var03, objptr
0afc0     02 01 49 FC | 	wrbyte	#128, _var03
0afc4     04 0B 02 F6 | 	mov	_var06, _var05
0afc8     02 0A 66 F0 | 	shl	_var06, #2
0afcc     80 04 06 F6 | 	mov	_var03, #128
0afd0     05 05 02 F1 | 	add	_var03, _var06
0afd4     02 04 06 F1 | 	add	_var03, #2
0afd8     F2 04 02 F1 | 	add	_var03, objptr
0afdc     02 FF 48 FC | 	wrbyte	#127, _var03
0afe0     04 0B 02 F6 | 	mov	_var06, _var05
0afe4     02 0A 66 F0 | 	shl	_var06, #2
0afe8     80 04 06 F6 | 	mov	_var03, #128
0afec     05 05 02 F1 | 	add	_var03, _var06
0aff0     03 04 06 F1 | 	add	_var03, #3
0aff4     F2 04 02 F1 | 	add	_var03, objptr
0aff8     02 01 49 FC | 	wrbyte	#128, _var03
0affc     55 00 00 FF 
0b000     E8 E5 85 F1 | 	sub	objptr, ##44008
0b004     7C 00 90 FD | 	jmp	#LR__0940
0b008                 | LR__0939
0b008     04 0B 02 F6 | 	mov	_var06, _var05
0b00c     02 0A 66 F0 | 	shl	_var06, #2
0b010     80 04 06 F6 | 	mov	_var03, #128
0b014     05 05 02 F1 | 	add	_var03, _var06
0b018     55 00 00 FF 
0b01c     E8 E5 05 F1 | 	add	objptr, ##44008
0b020     F2 04 02 F1 | 	add	_var03, objptr
0b024     02 01 49 FC | 	wrbyte	#128, _var03
0b028     04 0B 02 F6 | 	mov	_var06, _var05
0b02c     02 0A 66 F0 | 	shl	_var06, #2
0b030     80 04 06 F6 | 	mov	_var03, #128
0b034     05 05 02 F1 | 	add	_var03, _var06
0b038     01 04 06 F1 | 	add	_var03, #1
0b03c     F2 04 02 F1 | 	add	_var03, objptr
0b040     02 01 49 FC | 	wrbyte	#128, _var03
0b044     04 0B 02 F6 | 	mov	_var06, _var05
0b048     02 0A 66 F0 | 	shl	_var06, #2
0b04c     80 04 06 F6 | 	mov	_var03, #128
0b050     05 05 02 F1 | 	add	_var03, _var06
0b054     02 04 06 F1 | 	add	_var03, #2
0b058     F2 04 02 F1 | 	add	_var03, objptr
0b05c     02 FF 48 FC | 	wrbyte	#127, _var03
0b060     04 0B 02 F6 | 	mov	_var06, _var05
0b064     02 0A 66 F0 | 	shl	_var06, #2
0b068     80 04 06 F6 | 	mov	_var03, #128
0b06c     05 05 02 F1 | 	add	_var03, _var06
0b070     03 04 06 F1 | 	add	_var03, #3
0b074     F2 04 02 F1 | 	add	_var03, objptr
0b078     02 FF 48 FC | 	wrbyte	#127, _var03
0b07c     55 00 00 FF 
0b080     E8 E5 85 F1 | 	sub	objptr, ##44008
0b084                 | LR__0940
0b084     01 08 06 F1 | 	add	_var05, #1
0b088     20 08 56 F2 | 	cmps	_var05, #32 wc
0b08c     D8 FE 9F CD |  if_b	jmp	#LR__0938
0b090                 | LR__0941
0b090     02 02 06 F1 | 	add	_var02, #2
0b094     40 02 56 F2 | 	cmps	_var02, #64 wc
0b098     3C FD 9F CD |  if_b	jmp	#LR__0930
0b09c                 | ' do: loop until lpeek(base+64*7)>32768
0b09c     37 00 00 FF 
0b0a0     40 E4 05 F1 | 	add	objptr, ##28224
0b0a4     97 84 48 FB | 	callpa	#(@LR__0950-@LR__0942)>>2,fcache_load_ptr_
0b0a8                 | LR__0942
0b0a8     F2 12 02 FB | 	rdlong	arg01, objptr
0b0ac     C0 13 06 F1 | 	add	arg01, #448
0b0b0     09 FB 01 FB | 	rdlong	result1, arg01
0b0b4     40 00 00 FF 
0b0b8     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0b0bc     E8 FF 9F CD |  if_b	jmp	#LR__0942
0b0c0     37 00 00 FF 
0b0c4     40 E4 85 F1 | 	sub	objptr, ##28224
0b0c8                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0b0c8     00 02 06 F6 | 	mov	_var02, #0
0b0cc                 | LR__0943
0b0cc     01 07 52 F6 | 	abs	_var04, _var02 wc
0b0d0     07 06 06 F5 | 	and	_var04, #7
0b0d4     03 07 82 F6 | 	negc	_var04, _var04
0b0d8     04 06 56 F2 | 	cmps	_var04, #4 wc
0b0dc     20 00 90 3D |  if_ae	jmp	#LR__0944
0b0e0     01 0B 02 F6 | 	mov	_var06, _var02
0b0e4     55 00 00 FF 
0b0e8     E8 E5 05 F1 | 	add	objptr, ##44008
0b0ec     F2 0A 02 F1 | 	add	_var06, objptr
0b0f0     05 FF 48 FC | 	wrbyte	#127, _var06
0b0f4     55 00 00 FF 
0b0f8     E8 E5 85 F1 | 	sub	objptr, ##44008
0b0fc     1C 00 90 FD | 	jmp	#LR__0945
0b100                 | LR__0944
0b100     01 0B 02 F6 | 	mov	_var06, _var02
0b104     55 00 00 FF 
0b108     E8 E5 05 F1 | 	add	objptr, ##44008
0b10c     F2 0A 02 F1 | 	add	_var06, objptr
0b110     05 01 49 FC | 	wrbyte	#128, _var06
0b114     55 00 00 FF 
0b118     E8 E5 85 F1 | 	sub	objptr, ##44008
0b11c                 | LR__0945
0b11c     01 02 06 F1 | 	add	_var02, #1
0b120     80 02 56 F2 | 	cmps	_var02, #128 wc
0b124     A4 FF 9F CD |  if_b	jmp	#LR__0943
0b128                 | ' 
0b128                 | ' do: loop until lpeek(base+64*7)<32768
0b128     37 00 00 FF 
0b12c     40 E4 05 F1 | 	add	objptr, ##28224
0b130                 | LR__0946
0b130     F2 12 02 FB | 	rdlong	arg01, objptr
0b134     C0 13 06 F1 | 	add	arg01, #448
0b138     09 FB 01 FB | 	rdlong	result1, arg01
0b13c     40 00 00 FF 
0b140     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0b144     E8 FF 9F 3D |  if_ae	jmp	#LR__0946
0b148     37 00 00 FF 
0b14c     40 E4 85 F1 | 	sub	objptr, ##28224
0b150                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0b150     80 02 06 F6 | 	mov	_var02, #128
0b154                 | LR__0947
0b154     01 07 52 F6 | 	abs	_var04, _var02 wc
0b158     07 06 06 F5 | 	and	_var04, #7
0b15c     03 07 82 F6 | 	negc	_var04, _var04
0b160     04 06 56 F2 | 	cmps	_var04, #4 wc
0b164     20 00 90 3D |  if_ae	jmp	#LR__0948
0b168     01 0B 02 F6 | 	mov	_var06, _var02
0b16c     55 00 00 FF 
0b170     E8 E5 05 F1 | 	add	objptr, ##44008
0b174     F2 0A 02 F1 | 	add	_var06, objptr
0b178     05 FF 48 FC | 	wrbyte	#127, _var06
0b17c     55 00 00 FF 
0b180     E8 E5 85 F1 | 	sub	objptr, ##44008
0b184     1C 00 90 FD | 	jmp	#LR__0949
0b188                 | LR__0948
0b188     01 0B 02 F6 | 	mov	_var06, _var02
0b18c     55 00 00 FF 
0b190     E8 E5 05 F1 | 	add	objptr, ##44008
0b194     F2 0A 02 F1 | 	add	_var06, objptr
0b198     05 01 49 FC | 	wrbyte	#128, _var06
0b19c     55 00 00 FF 
0b1a0     E8 E5 85 F1 | 	sub	objptr, ##44008
0b1a4                 | LR__0949
0b1a4     01 02 06 F1 | 	add	_var02, #1
0b1a8     00 03 16 F2 | 	cmp	_var02, #256 wc
0b1ac     A4 FF 9F CD |  if_b	jmp	#LR__0947
0b1b0                 | LR__0950
0b1b0                 | _csave_block_ret
0b1b0     2D 00 64 FD | 	ret
0b1b4                 | 
0b1b4                 | ' 
0b1b4                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
0b1b4                 | _csave_addtoblock
0b1b4     04 4A 05 F6 | 	mov	COUNT_, #4
0b1b8     A8 00 A0 FD | 	call	#pushregs_
0b1bc     09 1F 02 F6 | 	mov	local01, arg01
0b1c0                 | ' 
0b1c0                 | ' 
0b1c0                 | ' if force=0 then
0b1c0     07 14 4E F7 | 	zerox	arg02, #7 wz
0b1c4     78 00 90 5D |  if_ne	jmp	#LR__0960
0b1c8     58 00 00 FF 
0b1cc     E8 E4 05 F1 | 	add	objptr, ##45288
0b1d0     F2 14 02 FB | 	rdlong	arg02, objptr
0b1d4     02 00 00 FF 
0b1d8     00 E4 85 F1 | 	sub	objptr, ##1024
0b1dc     F2 14 02 F1 | 	add	arg02, objptr
0b1e0     0A 1F 42 FC | 	wrbyte	local01, arg02
0b1e4     02 00 00 FF 
0b1e8     00 E4 05 F1 | 	add	objptr, ##1024
0b1ec     F2 1E 02 FB | 	rdlong	local01, objptr
0b1f0     01 1E 06 F1 | 	add	local01, #1
0b1f4     F2 1E 62 FC | 	wrlong	local01, objptr
0b1f8                 | '   block(blockptr)=d
0b1f8                 | '   blockptr+=1
0b1f8                 | '   if blockptr>=255 then
0b1f8     58 00 00 FF 
0b1fc     E8 E4 85 F1 | 	sub	objptr, ##45288
0b200     FF 1E 16 F2 | 	cmp	local01, #255 wc
0b204     E4 00 90 CD |  if_b	jmp	#LR__0964
0b208     56 00 00 FF 
0b20c     E8 E4 05 F1 | 	add	objptr, ##44264
0b210     F2 12 02 F6 | 	mov	arg01, objptr
0b214     56 00 00 FF 
0b218     E8 E4 85 F1 | 	sub	objptr, ##44264
0b21c     B0 FB BF FD | 	call	#_csave_block
0b220     58 00 00 FF 
0b224     E8 E4 05 F1 | 	add	objptr, ##45288
0b228     F2 00 68 FC | 	wrlong	#0, objptr
0b22c     58 00 00 FF 
0b230     E8 E4 85 F1 | 	sub	objptr, ##45288
0b234     2C 13 06 F6 | 	mov	arg01, #300
0b238     B4 48 B1 FD | 	call	#__system___waitms
0b23c     AC 00 90 FD | 	jmp	#LR__0964
0b240                 | LR__0960
0b240     58 00 00 FF 
0b244     E8 E4 05 F1 | 	add	objptr, ##45288
0b248     F2 20 02 FB | 	rdlong	local02, objptr
0b24c     02 00 00 FF 
0b250     00 E4 85 F1 | 	sub	objptr, ##1024
0b254     F2 20 02 F1 | 	add	local02, objptr
0b258     10 1F 42 FC | 	wrbyte	local01, local02
0b25c                 | '   block(blockptr)=d
0b25c                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0b25c     02 00 00 FF 
0b260     00 E4 05 F1 | 	add	objptr, ##1024
0b264     F2 22 02 FB | 	rdlong	local03, objptr
0b268     58 00 00 FF 
0b26c     E8 E4 85 F1 | 	sub	objptr, ##45288
0b270     FF 22 16 F2 | 	cmp	local03, #255 wc
0b274     40 00 90 3D |  if_ae	jmp	#LR__0963
0b278     58 00 00 FF 
0b27c     E8 E4 05 F1 | 	add	objptr, ##45288
0b280     F2 24 02 FB | 	rdlong	local04, objptr
0b284     58 00 00 FF 
0b288     E8 E4 85 F1 | 	sub	objptr, ##45288
0b28c                 | LR__0961
0b28c     00 25 56 F2 | 	cmps	local04, #256 wc
0b290     24 00 90 3D |  if_ae	jmp	#LR__0962
0b294     12 21 02 F6 | 	mov	local02, local04
0b298     56 00 00 FF 
0b29c     E8 E4 05 F1 | 	add	objptr, ##44264
0b2a0     F2 20 02 F1 | 	add	local02, objptr
0b2a4     10 01 48 FC | 	wrbyte	#0, local02
0b2a8     01 24 06 F1 | 	add	local04, #1
0b2ac     56 00 00 FF 
0b2b0     E8 E4 85 F1 | 	sub	objptr, ##44264
0b2b4     D4 FF 9F FD | 	jmp	#LR__0961
0b2b8                 | LR__0962
0b2b8                 | LR__0963
0b2b8     56 00 00 FF 
0b2bc     E8 E4 05 F1 | 	add	objptr, ##44264
0b2c0     F2 12 02 F6 | 	mov	arg01, objptr
0b2c4     56 00 00 FF 
0b2c8     E8 E4 85 F1 | 	sub	objptr, ##44264
0b2cc     00 FB BF FD | 	call	#_csave_block
0b2d0     58 00 00 FF 
0b2d4     E8 E4 05 F1 | 	add	objptr, ##45288
0b2d8     F2 00 68 FC | 	wrlong	#0, objptr
0b2dc     58 00 00 FF 
0b2e0     E8 E4 85 F1 | 	sub	objptr, ##45288
0b2e4     2C 13 06 F6 | 	mov	arg01, #300
0b2e8     04 48 B1 FD | 	call	#__system___waitms
0b2ec                 | LR__0964
0b2ec     A7 F0 03 F6 | 	mov	ptra, fp
0b2f0     B2 00 A0 FD | 	call	#popregs_
0b2f4                 | _csave_addtoblock_ret
0b2f4     2D 00 64 FD | 	ret
0b2f8                 | 
0b2f8                 | ' 
0b2f8                 | ' sub test_csave
0b2f8                 | _test_csave
0b2f8     04 4A 05 F6 | 	mov	COUNT_, #4
0b2fc     A8 00 A0 FD | 	call	#pushregs_
0b300     C0 F0 07 F1 | 	add	ptra, #192
0b304                 | ' 'dim fileheader,savestart, saveptr as ulong
0b304                 | ' 
0b304                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0b304     4A 00 00 FF 
0b308     B4 E4 05 F1 | 	add	objptr, ##38068
0b30c     F2 12 02 FB | 	rdlong	arg01, objptr
0b310     4A 00 00 FF 
0b314     B4 E4 85 F1 | 	sub	objptr, ##38068
0b318     CC 02 B1 FD | 	call	#_pslpeek
0b31c     FF FF 7F FF 
0b320     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0b324     0C 00 90 5D |  if_ne	jmp	#LR__0970
0b328     1B 12 06 F6 | 	mov	arg01, #27
0b32c     24 00 B1 FD | 	call	#_printerror
0b330     1C 03 90 FD | 	jmp	#LR__0984
0b334                 | LR__0970
0b334     04 F8 BF FD | 	call	#_pop
0b338     90 4E 05 F1 | 	add	fp, #144
0b33c     A7 FA 61 FC | 	wrlong	result1, fp
0b340     04 4E 05 F1 | 	add	fp, #4
0b344     A7 FC 61 FC | 	wrlong	result2, fp
0b348     04 4E 05 F1 | 	add	fp, #4
0b34c     A7 FE 61 FC | 	wrlong	result3, fp
0b350                 | ' t1=pop()
0b350                 | ' if t1.result_type<>result_string then name$=loadname else name$=t1.result.sresult
0b350     98 4E 85 F1 | 	sub	fp, #152
0b354     1F FE 0D F2 | 	cmp	result3, #31 wz
0b358     24 00 90 AD |  if_e	jmp	#LR__0971
0b35c     59 00 00 FF 
0b360     E4 E5 05 F1 | 	add	objptr, ##46052
0b364     F2 1C 02 FB | 	rdlong	arg06, objptr
0b368     59 00 00 FF 
0b36c     E4 E5 85 F1 | 	sub	objptr, ##46052
0b370     8C 4E 05 F1 | 	add	fp, #140
0b374     A7 1C 62 FC | 	wrlong	arg06, fp
0b378     8C 4E 85 F1 | 	sub	fp, #140
0b37c     14 00 90 FD | 	jmp	#LR__0972
0b380                 | LR__0971
0b380     90 4E 05 F1 | 	add	fp, #144
0b384     A7 1C 02 FB | 	rdlong	arg06, fp
0b388     04 4E 85 F1 | 	sub	fp, #4
0b38c     A7 1C 62 FC | 	wrlong	arg06, fp
0b390     8C 4E 85 F1 | 	sub	fp, #140
0b394                 | LR__0972
0b394                 | ' 
0b394                 | ' ' prepare 1 kHz header wave
0b394                 | ' 
0b394                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0b394     A7 00 68 FC | 	wrlong	#0, fp
0b398     97 34 48 FB | 	callpa	#(@LR__0976-@LR__0973)>>2,fcache_load_ptr_
0b39c                 | LR__0973
0b39c     A7 1C 02 FB | 	rdlong	arg06, fp
0b3a0     0E 1B 52 F6 | 	abs	arg05, arg06 wc
0b3a4     07 1A 06 F5 | 	and	arg05, #7
0b3a8     0D 1B 82 F6 | 	negc	arg05, arg05
0b3ac     04 1A 56 F2 | 	cmps	arg05, #4 wc
0b3b0     20 00 90 3D |  if_ae	jmp	#LR__0974
0b3b4     A7 1A 02 FB | 	rdlong	arg05, fp
0b3b8     55 00 00 FF 
0b3bc     E8 E5 05 F1 | 	add	objptr, ##44008
0b3c0     F2 1A 02 F1 | 	add	arg05, objptr
0b3c4     0D FF 48 FC | 	wrbyte	#127, arg05
0b3c8     55 00 00 FF 
0b3cc     E8 E5 85 F1 | 	sub	objptr, ##44008
0b3d0     1C 00 90 FD | 	jmp	#LR__0975
0b3d4                 | LR__0974
0b3d4     A7 1A 02 FB | 	rdlong	arg05, fp
0b3d8     55 00 00 FF 
0b3dc     E8 E5 05 F1 | 	add	objptr, ##44008
0b3e0     F2 1A 02 F1 | 	add	arg05, objptr
0b3e4     0D 01 49 FC | 	wrbyte	#128, arg05
0b3e8     55 00 00 FF 
0b3ec     E8 E5 85 F1 | 	sub	objptr, ##44008
0b3f0                 | LR__0975
0b3f0     A7 1A 02 FB | 	rdlong	arg05, fp
0b3f4     01 1A 06 F1 | 	add	arg05, #1
0b3f8     A7 1A 62 FC | 	wrlong	arg05, fp
0b3fc     00 1B 56 F2 | 	cmps	arg05, #256 wc
0b400     98 FF 9F CD |  if_b	jmp	#LR__0973
0b404                 | LR__0976
0b404     55 00 00 FF 
0b408     E8 E5 05 F1 | 	add	objptr, ##44008
0b40c     F2 14 02 F6 | 	mov	arg02, objptr
0b410     07 12 06 F6 | 	mov	arg01, #7
0b414     0F 00 00 FF 
0b418     40 17 06 F6 | 	mov	arg03, ##8000
0b41c     0E 18 C6 F9 | 	decod	arg04, #14
0b420     00 1B 06 F6 | 	mov	arg05, #256
0b424     00 1C 06 F6 | 	mov	arg06, #0
0b428     4A 00 00 FF 
0b42c     1C E5 85 F1 | 	sub	objptr, ##38172
0b430     24 40 B1 FD | 	call	#_audio096_spin2_play8
0b434     0B 00 00 FF 
0b438     CC E4 85 F1 | 	sub	objptr, ##5836
0b43c     05 00 00 FF 
0b440     B8 13 06 F6 | 	mov	arg01, ##3000
0b444     A8 46 B1 FD | 	call	#__system___waitms
0b448     58 00 00 FF 
0b44c     E8 E4 05 F1 | 	add	objptr, ##45288
0b450     F2 00 68 FC | 	wrlong	#0, objptr
0b454     58 00 00 FF 
0b458     E8 E4 85 F1 | 	sub	objptr, ##45288
0b45c     72 12 06 F6 | 	mov	arg01, #114
0b460     00 14 06 F6 | 	mov	arg02, #0
0b464     4C FD BF FD | 	call	#_csave_addtoblock
0b468     62 12 06 F6 | 	mov	arg01, #98
0b46c     00 14 06 F6 | 	mov	arg02, #0
0b470     40 FD BF FD | 	call	#_csave_addtoblock
0b474     61 12 06 F6 | 	mov	arg01, #97
0b478     00 14 06 F6 | 	mov	arg02, #0
0b47c     34 FD BF FD | 	call	#_csave_addtoblock
0b480     0D 12 06 F6 | 	mov	arg01, #13
0b484     00 14 06 F6 | 	mov	arg02, #0
0b488     28 FD BF FD | 	call	#_csave_addtoblock
0b48c                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0b48c                 | ' waitms 3000 
0b48c                 | ' 
0b48c                 | ' blockptr=0
0b48c                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0b48c                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0b48c     A7 02 68 FC | 	wrlong	#1, fp
0b490     8C 4E 05 F1 | 	add	fp, #140
0b494     A7 12 02 FB | 	rdlong	arg01, fp
0b498     8C 4E 85 F1 | 	sub	fp, #140
0b49c     09 1F 02 F6 | 	mov	local01, arg01
0b4a0     97 06 48 FB | 	callpa	#(@LR__0978-@LR__0977)>>2,fcache_load_ptr_
0b4a4                 | LR__0977
0b4a4     0F FB C9 FA | 	rdbyte	result1, local01 wz
0b4a8     01 1E 06 51 |  if_ne	add	local01, #1
0b4ac     F4 FF 9F 5D |  if_ne	jmp	#LR__0977
0b4b0                 | LR__0978
0b4b0     09 1F 82 F1 | 	sub	local01, arg01
0b4b4     0F 21 02 F6 | 	mov	local02, local01
0b4b8     01 20 06 F1 | 	add	local02, #1
0b4bc                 | LR__0979
0b4bc     A7 1A 02 FB | 	rdlong	arg05, fp
0b4c0     10 1B 52 F2 | 	cmps	arg05, local02 wc
0b4c4     34 00 90 3D |  if_ae	jmp	#LR__0980
0b4c8     8C 4E 05 F1 | 	add	fp, #140
0b4cc     A7 12 02 FB | 	rdlong	arg01, fp
0b4d0     8C 4E 85 F1 | 	sub	fp, #140
0b4d4     A7 14 02 FB | 	rdlong	arg02, fp
0b4d8     01 16 06 F6 | 	mov	arg03, #1
0b4dc     44 64 B1 FD | 	call	#__system__Mid_S
0b4e0     FD 12 C2 FA | 	rdbyte	arg01, result1
0b4e4     00 14 06 F6 | 	mov	arg02, #0
0b4e8     C8 FC BF FD | 	call	#_csave_addtoblock
0b4ec     A7 1A 02 FB | 	rdlong	arg05, fp
0b4f0     01 1A 06 F1 | 	add	arg05, #1
0b4f4     A7 1A 62 FC | 	wrlong	arg05, fp
0b4f8     C0 FF 9F FD | 	jmp	#LR__0979
0b4fc                 | LR__0980
0b4fc     00 12 06 F6 | 	mov	arg01, #0
0b500     00 14 06 F6 | 	mov	arg02, #0
0b504     AC FC BF FD | 	call	#_csave_addtoblock
0b508     72 12 06 F6 | 	mov	arg01, #114
0b50c     00 14 06 F6 | 	mov	arg02, #0
0b510     A0 FC BF FD | 	call	#_csave_addtoblock
0b514     62 12 06 F6 | 	mov	arg01, #98
0b518     00 14 06 F6 | 	mov	arg02, #0
0b51c     94 FC BF FD | 	call	#_csave_addtoblock
0b520     73 12 06 F6 | 	mov	arg01, #115
0b524     00 14 06 F6 | 	mov	arg02, #0
0b528     88 FC BF FD | 	call	#_csave_addtoblock
0b52c     0D 12 06 F6 | 	mov	arg01, #13
0b530     00 14 06 F6 | 	mov	arg02, #0
0b534     7C FC BF FD | 	call	#_csave_addtoblock
0b538     4A 00 00 FF 
0b53c     B4 E4 05 F1 | 	add	objptr, ##38068
0b540     F2 22 02 FB | 	rdlong	local03, objptr
0b544     4A 00 00 FF 
0b548     B4 E4 85 F1 | 	sub	objptr, ##38068
0b54c     9C 4E 05 F1 | 	add	fp, #156
0b550     A7 22 62 FC | 	wrlong	local03, fp
0b554     9C 4E 85 F1 | 	sub	fp, #156
0b558                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0b558                 | ' 
0b558                 | ' saveptr=programstart
0b558                 | ' do
0b558                 | LR__0981
0b558     A0 4E 05 F1 | 	add	fp, #160
0b55c     A7 12 02 F6 | 	mov	arg01, fp
0b560     04 4E 85 F1 | 	sub	fp, #4
0b564     A7 14 02 FB | 	rdlong	arg02, fp
0b568     9C 4E 85 F1 | 	sub	fp, #156
0b56c     18 16 06 F6 | 	mov	arg03, #24
0b570     0B 00 00 FF 
0b574     CC E4 05 F1 | 	add	objptr, ##5836
0b578     40 36 B1 FD | 	call	#_psram_spin2_read1
0b57c     0C 4E 05 F1 | 	add	fp, #12
0b580     A7 12 02 F6 | 	mov	arg01, fp
0b584     9C 4E 05 F1 | 	add	fp, #156
0b588     A7 14 02 FB | 	rdlong	arg02, fp
0b58c     04 4E 05 F1 | 	add	fp, #4
0b590     A7 16 02 FB | 	rdlong	arg03, fp
0b594     AC 4E 85 F1 | 	sub	fp, #172
0b598     20 36 B1 FD | 	call	#_psram_spin2_read1
0b59c     0B 00 00 FF 
0b5a0     CC E4 85 F1 | 	sub	objptr, ##5836
0b5a4     AC 4E 05 F1 | 	add	fp, #172
0b5a8     A7 12 02 FB | 	rdlong	arg01, fp
0b5ac     AC 4E 85 F1 | 	sub	fp, #172
0b5b0     00 14 06 F6 | 	mov	arg02, #0
0b5b4     FC FB BF FD | 	call	#_csave_addtoblock
0b5b8                 | ' 
0b5b8                 | '   psram.read1(varptr(header(0)),saveptr,24)
0b5b8                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0b5b8                 | '   csave_addtoblock(header(3),0) ' that's always <255
0b5b8                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)  :next i
0b5b8     A7 00 68 FC | 	wrlong	#0, fp
0b5bc     AC 4E 05 F1 | 	add	fp, #172
0b5c0     A7 24 02 FB | 	rdlong	local04, fp
0b5c4     AC 4E 85 F1 | 	sub	fp, #172
0b5c8                 | LR__0982
0b5c8     A7 22 02 FB | 	rdlong	local03, fp
0b5cc     12 23 52 F2 | 	cmps	local03, local04 wc
0b5d0     2C 00 90 3D |  if_ae	jmp	#LR__0983
0b5d4     A7 22 02 FB | 	rdlong	local03, fp
0b5d8     0C 4E 05 F1 | 	add	fp, #12
0b5dc     A7 22 02 F1 | 	add	local03, fp
0b5e0     11 13 C2 FA | 	rdbyte	arg01, local03
0b5e4     00 14 06 F6 | 	mov	arg02, #0
0b5e8     0C 4E 85 F1 | 	sub	fp, #12
0b5ec     C4 FB BF FD | 	call	#_csave_addtoblock
0b5f0     A7 22 02 FB | 	rdlong	local03, fp
0b5f4     01 22 06 F1 | 	add	local03, #1
0b5f8     A7 22 62 FC | 	wrlong	local03, fp
0b5fc     C8 FF 9F FD | 	jmp	#LR__0982
0b600                 | LR__0983
0b600     B4 4E 05 F1 | 	add	fp, #180
0b604     A7 22 02 FB | 	rdlong	local03, fp
0b608     18 4E 85 F1 | 	sub	fp, #24
0b60c     A7 22 62 FC | 	wrlong	local03, fp
0b610     18 4E 05 F1 | 	add	fp, #24
0b614     A7 22 02 FB | 	rdlong	local03, fp
0b618     B4 4E 85 F1 | 	sub	fp, #180
0b61c     FF FF 3F FF 
0b620     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0b624     30 FF 9F 5D |  if_ne	jmp	#LR__0981
0b628     00 12 06 F6 | 	mov	arg01, #0
0b62c     01 14 06 F6 | 	mov	arg02, #1
0b630     80 FB BF FD | 	call	#_csave_addtoblock
0b634     37 00 00 FF 
0b638     40 E4 05 F1 | 	add	objptr, ##28224
0b63c     F2 12 02 FB | 	rdlong	arg01, objptr
0b640     37 00 00 FF 
0b644     40 E4 85 F1 | 	sub	objptr, ##28224
0b648     D4 13 06 F1 | 	add	arg01, #468
0b64c     09 01 58 FC | 	wrword	#0, arg01
0b650                 | LR__0984
0b650     A7 F0 03 F6 | 	mov	ptra, fp
0b654     B2 00 A0 FD | 	call	#popregs_
0b658                 | _test_csave_ret
0b658     2D 00 64 FD | 	ret
0b65c                 | 
0b65c                 | ' 
0b65c                 | ' ' ----------------- Save the program
0b65c                 | ' 
0b65c                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
0b65c                 | _do_save
0b65c     04 4A 05 F6 | 	mov	COUNT_, #4
0b660     A8 00 A0 FD | 	call	#pushregs_
0b664     01 00 00 FF 
0b668     C0 F0 07 F1 | 	add	ptra, ##704
0b66c     4A 00 00 FF 
0b670     B0 E4 05 F1 | 	add	objptr, ##38064
0b674     F2 1E 02 FB | 	rdlong	local01, objptr
0b678     0F 21 02 F6 | 	mov	local02, local01
0b67c     01 20 66 F0 | 	shl	local02, #1
0b680     0F 21 02 F1 | 	add	local02, local01
0b684     02 20 66 F0 | 	shl	local02, #2
0b688     03 00 00 FF 
0b68c     04 E4 85 F1 | 	sub	objptr, ##1540
0b690     F2 20 02 F1 | 	add	local02, objptr
0b694     10 23 02 FB | 	rdlong	local03, local02
0b698     01 00 00 FF 
0b69c     10 4E 05 F1 | 	add	fp, ##528
0b6a0     A7 22 62 FC | 	wrlong	local03, fp
0b6a4                 | ' 
0b6a4                 | ' numpar=compiledline(lineptr_e).result.uresult
0b6a4                 | ' 
0b6a4                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
0b6a4     01 00 00 FF 
0b6a8     10 4E 85 F1 | 	sub	fp, ##528
0b6ac     01 22 56 F2 | 	cmps	local03, #1 wc
0b6b0     47 00 00 FF 
0b6b4     AC E4 85 F1 | 	sub	objptr, ##36524
0b6b8     20 00 90 CD |  if_b	jmp	#LR__0990
0b6bc     7C F4 BF FD | 	call	#_pop
0b6c0     A7 FA 61 FC | 	wrlong	result1, fp
0b6c4     04 4E 05 F1 | 	add	fp, #4
0b6c8     A7 FC 61 FC | 	wrlong	result2, fp
0b6cc     04 4E 05 F1 | 	add	fp, #4
0b6d0     A7 FE 61 FC | 	wrlong	result3, fp
0b6d4     08 4E 85 F1 | 	sub	fp, #8
0b6d8     24 00 90 FD | 	jmp	#LR__0991
0b6dc                 | LR__0990
0b6dc     59 00 00 FF 
0b6e0     E4 E5 05 F1 | 	add	objptr, ##46052
0b6e4     F2 22 02 FB | 	rdlong	local03, objptr
0b6e8     59 00 00 FF 
0b6ec     E4 E5 85 F1 | 	sub	objptr, ##46052
0b6f0     A7 22 62 FC | 	wrlong	local03, fp
0b6f4     08 4E 05 F1 | 	add	fp, #8
0b6f8     A7 3E 68 FC | 	wrlong	#31, fp
0b6fc     08 4E 85 F1 | 	sub	fp, #8
0b700                 | LR__0991
0b700                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0b700     4A 00 00 FF 
0b704     B4 E4 05 F1 | 	add	objptr, ##38068
0b708     F2 12 02 FB | 	rdlong	arg01, objptr
0b70c     4A 00 00 FF 
0b710     B4 E4 85 F1 | 	sub	objptr, ##38068
0b714     D0 FE B0 FD | 	call	#_pslpeek
0b718     FF FF 7F FF 
0b71c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0b720     0C 00 90 5D |  if_ne	jmp	#LR__0992
0b724     1B 12 06 F6 | 	mov	arg01, #27
0b728     28 FC B0 FD | 	call	#_printerror
0b72c     1C 03 90 FD | 	jmp	#LR__0998
0b730                 | LR__0992
0b730                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0b730     08 4E 05 F1 | 	add	fp, #8
0b734     A7 22 02 FB | 	rdlong	local03, fp
0b738     08 4E 85 F1 | 	sub	fp, #8
0b73c     2B 22 0E F2 | 	cmp	local03, #43 wz
0b740     18 00 90 5D |  if_ne	jmp	#LR__0993
0b744     A7 12 02 FB | 	rdlong	arg01, fp
0b748     44 3F B0 FD | 	call	#_convertstring
0b74c     A7 FA 61 FC | 	wrlong	result1, fp
0b750     08 4E 05 F1 | 	add	fp, #8
0b754     A7 3E 68 FC | 	wrlong	#31, fp
0b758     08 4E 85 F1 | 	sub	fp, #8
0b75c                 | LR__0993
0b75c                 | ' if t1.result_type=result_string then
0b75c     08 4E 05 F1 | 	add	fp, #8
0b760     A7 22 02 FB | 	rdlong	local03, fp
0b764     08 4E 85 F1 | 	sub	fp, #8
0b768     1F 22 0E F2 | 	cmp	local03, #31 wz
0b76c     DC 02 90 5D |  if_ne	jmp	#LR__0997
0b770                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
0b770     A7 12 02 FB | 	rdlong	arg01, fp
0b774     7A 01 00 FF 
0b778     1B 14 06 F6 | 	mov	arg02, ##@LR__5196
0b77c     A4 40 B1 FD | 	call	#__system___string_cmp
0b780     00 FA 0D F2 | 	cmp	result1, #0 wz
0b784     59 00 00 AF 
0b788     E4 E5 05 A1 |  if_e	add	objptr, ##46052
0b78c     F2 22 02 AB |  if_e	rdlong	local03, objptr
0b790     A7 22 62 AC |  if_e	wrlong	local03, fp
0b794     59 00 00 AF 
0b798     E4 E5 85 A1 |  if_e	sub	objptr, ##46052
0b79c     A7 22 02 5B |  if_ne	rdlong	local03, fp
0b7a0     59 00 00 5F 
0b7a4     E4 E5 05 51 |  if_ne	add	objptr, ##46052
0b7a8     F2 22 62 5C |  if_ne	wrlong	local03, objptr
0b7ac     59 00 00 5F 
0b7b0     E4 E5 85 51 |  if_ne	sub	objptr, ##46052
0b7b4                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
0b7b4     09 12 06 F6 | 	mov	arg01, #9
0b7b8     08 90 B1 FD | 	call	#__system__close
0b7bc     09 22 06 F6 | 	mov	local03, #9
0b7c0     52 00 00 FF 
0b7c4     C8 E4 05 F1 | 	add	objptr, ##42184
0b7c8     F2 12 02 FB | 	rdlong	arg01, objptr
0b7cc     52 00 00 FF 
0b7d0     C8 E4 85 F1 | 	sub	objptr, ##42184
0b7d4     7A 01 00 FF 
0b7d8     1C 14 06 F6 | 	mov	arg02, ##@LR__5197
0b7dc     78 40 B1 FD | 	call	#__system___string_concat
0b7e0     FD 12 02 F6 | 	mov	arg01, result1
0b7e4     A7 14 02 FB | 	rdlong	arg02, fp
0b7e8     6C 40 B1 FD | 	call	#__system___string_concat
0b7ec     FD 14 02 F6 | 	mov	arg02, result1
0b7f0     11 13 02 F6 | 	mov	arg01, local03
0b7f4     0D 16 06 F6 | 	mov	arg03, #13
0b7f8     04 4C B1 FD | 	call	#__system___basic_open_string
0b7fc     01 00 00 FF 
0b800     0C 4E 05 F1 | 	add	fp, ##524
0b804     A7 0A 68 FC | 	wrlong	#5, fp
0b808     4A 00 00 FF 
0b80c     B4 E4 05 F1 | 	add	objptr, ##38068
0b810     F2 22 02 FB | 	rdlong	local03, objptr
0b814     4A 00 00 FF 
0b818     B4 E4 85 F1 | 	sub	objptr, ##38068
0b81c     10 4E 05 F1 | 	add	fp, #16
0b820     A7 22 62 FC | 	wrlong	local03, fp
0b824     01 00 00 FF 
0b828     1C 4E 85 F1 | 	sub	fp, ##540
0b82c                 | ' '  put #9,1,fileheader,1
0b82c                 | '   i=5
0b82c                 | '   saveptr=programstart
0b82c                 | '   do
0b82c                 | LR__0994
0b82c     01 00 00 FF 
0b830     20 4E 05 F1 | 	add	fp, ##544
0b834     A7 12 02 F6 | 	mov	arg01, fp
0b838     04 4E 85 F1 | 	sub	fp, #4
0b83c     A7 14 02 FB | 	rdlong	arg02, fp
0b840     01 00 00 FF 
0b844     1C 4E 85 F1 | 	sub	fp, ##540
0b848     18 16 06 F6 | 	mov	arg03, #24
0b84c     0B 00 00 FF 
0b850     CC E4 05 F1 | 	add	objptr, ##5836
0b854     64 33 B1 FD | 	call	#_psram_spin2_read1
0b858     01 00 00 FF 
0b85c     38 4E 05 F1 | 	add	fp, ##568
0b860     A7 12 02 F6 | 	mov	arg01, fp
0b864     10 4E 85 F1 | 	sub	fp, #16
0b868     A7 14 02 FB | 	rdlong	arg02, fp
0b86c     04 4E 05 F1 | 	add	fp, #4
0b870     A7 16 02 FB | 	rdlong	arg03, fp
0b874     01 00 00 FF 
0b878     2C 4E 85 F1 | 	sub	fp, ##556
0b87c     3C 33 B1 FD | 	call	#_psram_spin2_read1
0b880     0B 00 00 FF 
0b884     CC E4 85 F1 | 	sub	objptr, ##5836
0b888     7A 01 00 FF 
0b88c     1E 22 06 F6 | 	mov	local03, ##@LR__5198
0b890     01 00 00 FF 
0b894     B8 4E 05 F1 | 	add	fp, ##696
0b898     A7 22 62 FC | 	wrlong	local03, fp
0b89c                 | '     psram.read1(varptr(header(0)),saveptr,24)
0b89c                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
0b89c                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
0b89c     AC 4E 85 F1 | 	sub	fp, #172
0b8a0     A7 02 68 FC | 	wrlong	#1, fp
0b8a4     20 4E 05 F1 | 	add	fp, #32
0b8a8     A7 24 02 FB | 	rdlong	local04, fp
0b8ac     01 00 00 FF 
0b8b0     2C 4E 85 F1 | 	sub	fp, ##556
0b8b4     01 24 06 F1 | 	add	local04, #1
0b8b8                 | LR__0995
0b8b8     01 00 00 FF 
0b8bc     0C 4E 05 F1 | 	add	fp, ##524
0b8c0     A7 22 02 FB | 	rdlong	local03, fp
0b8c4     01 00 00 FF 
0b8c8     0C 4E 85 F1 | 	sub	fp, ##524
0b8cc     12 23 52 F2 | 	cmps	local03, local04 wc
0b8d0     64 00 90 3D |  if_ae	jmp	#LR__0996
0b8d4     01 00 00 FF 
0b8d8     B8 4E 05 F1 | 	add	fp, ##696
0b8dc     A7 1E 02 FB | 	rdlong	local01, fp
0b8e0     AC 4E 85 F1 | 	sub	fp, #172
0b8e4     A7 22 02 FB | 	rdlong	local03, fp
0b8e8     01 22 86 F1 | 	sub	local03, #1
0b8ec     2C 4E 05 F1 | 	add	fp, #44
0b8f0     A7 22 02 F1 | 	add	local03, fp
0b8f4     11 13 C2 FA | 	rdbyte	arg01, local03
0b8f8     01 00 00 FF 
0b8fc     38 4E 85 F1 | 	sub	fp, ##568
0b900     CC 60 B1 FD | 	call	#__system__Chr_S
0b904     FD 14 02 F6 | 	mov	arg02, result1
0b908     0F 13 02 F6 | 	mov	arg01, local01
0b90c     48 3F B1 FD | 	call	#__system___string_concat
0b910     01 00 00 FF 
0b914     B8 4E 05 F1 | 	add	fp, ##696
0b918     A7 FA 61 FC | 	wrlong	result1, fp
0b91c     AC 4E 85 F1 | 	sub	fp, #172
0b920     A7 22 02 FB | 	rdlong	local03, fp
0b924     01 22 06 F1 | 	add	local03, #1
0b928     A7 22 62 FC | 	wrlong	local03, fp
0b92c     01 00 00 FF 
0b930     0C 4E 85 F1 | 	sub	fp, ##524
0b934     80 FF 9F FD | 	jmp	#LR__0995
0b938                 | LR__0996
0b938                 | '  '   put #9,i,header(3),1 : i+=4
0b938                 | '  '   put #9,i,linebuf(0),header(3) : i+=header(3)
0b938                 | '      print #9, saveline$
0b938     09 12 06 F6 | 	mov	arg01, #9
0b93c     54 98 B1 FD | 	call	#__system___getiolock_0508
0b940     FD 12 02 F6 | 	mov	arg01, result1
0b944     B4 3E B1 FD | 	call	#__system___lockmem
0b948     01 00 00 FF 
0b94c     B8 4E 05 F1 | 	add	fp, ##696
0b950     A7 14 02 FB | 	rdlong	arg02, fp
0b954     01 00 00 FF 
0b958     B8 4E 85 F1 | 	sub	fp, ##696
0b95c     09 12 06 F6 | 	mov	arg01, #9
0b960     00 16 06 F6 | 	mov	arg03, #0
0b964     88 4B B1 FD | 	call	#__system___basic_print_string
0b968     09 12 06 F6 | 	mov	arg01, #9
0b96c     0A 14 06 F6 | 	mov	arg02, #10
0b970     00 16 06 F6 | 	mov	arg03, #0
0b974     20 4B B1 FD | 	call	#__system___basic_print_char
0b978     09 12 06 F6 | 	mov	arg01, #9
0b97c     14 98 B1 FD | 	call	#__system___getiolock_0508
0b980     FD 00 68 FC | 	wrlong	#0, result1
0b984     01 00 00 FF 
0b988     34 4E 05 F1 | 	add	fp, ##564
0b98c     A7 22 02 FB | 	rdlong	local03, fp
0b990     18 4E 85 F1 | 	sub	fp, #24
0b994     A7 22 62 FC | 	wrlong	local03, fp
0b998     18 4E 05 F1 | 	add	fp, #24
0b99c     A7 22 02 FB | 	rdlong	local03, fp
0b9a0     01 00 00 FF 
0b9a4     34 4E 85 F1 | 	sub	fp, ##564
0b9a8     FF FF 3F FF 
0b9ac     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0b9b0     78 FE 9F 5D |  if_ne	jmp	#LR__0994
0b9b4                 | '   close #9  
0b9b4     09 12 06 F6 | 	mov	arg01, #9
0b9b8     08 8E B1 FD | 	call	#__system__close
0b9bc                 | '   print "Saved as ";currentdir$+"/"+loadname
0b9bc     00 12 06 F6 | 	mov	arg01, #0
0b9c0     D0 97 B1 FD | 	call	#__system___getiolock_0508
0b9c4     FD 12 02 F6 | 	mov	arg01, result1
0b9c8     30 3E B1 FD | 	call	#__system___lockmem
0b9cc     7A 01 00 FF 
0b9d0     1F 14 06 F6 | 	mov	arg02, ##@LR__5199
0b9d4     00 12 06 F6 | 	mov	arg01, #0
0b9d8     00 16 06 F6 | 	mov	arg03, #0
0b9dc     10 4B B1 FD | 	call	#__system___basic_print_string
0b9e0     00 20 06 F6 | 	mov	local02, #0
0b9e4     52 00 00 FF 
0b9e8     C8 E4 05 F1 | 	add	objptr, ##42184
0b9ec     F2 12 02 FB | 	rdlong	arg01, objptr
0b9f0     52 00 00 FF 
0b9f4     C8 E4 85 F1 | 	sub	objptr, ##42184
0b9f8     7A 01 00 FF 
0b9fc     29 14 06 F6 | 	mov	arg02, ##@LR__5200
0ba00     54 3E B1 FD | 	call	#__system___string_concat
0ba04     FD 12 02 F6 | 	mov	arg01, result1
0ba08     59 00 00 FF 
0ba0c     E4 E5 05 F1 | 	add	objptr, ##46052
0ba10     F2 14 02 FB | 	rdlong	arg02, objptr
0ba14     59 00 00 FF 
0ba18     E4 E5 85 F1 | 	sub	objptr, ##46052
0ba1c     38 3E B1 FD | 	call	#__system___string_concat
0ba20     FD 14 02 F6 | 	mov	arg02, result1
0ba24     10 13 02 F6 | 	mov	arg01, local02
0ba28     00 16 06 F6 | 	mov	arg03, #0
0ba2c     C0 4A B1 FD | 	call	#__system___basic_print_string
0ba30     00 12 06 F6 | 	mov	arg01, #0
0ba34     0A 14 06 F6 | 	mov	arg02, #10
0ba38     00 16 06 F6 | 	mov	arg03, #0
0ba3c     58 4A B1 FD | 	call	#__system___basic_print_char
0ba40     00 12 06 F6 | 	mov	arg01, #0
0ba44     4C 97 B1 FD | 	call	#__system___getiolock_0508
0ba48     FD 00 68 FC | 	wrlong	#0, result1
0ba4c                 | LR__0997
0ba4c                 | LR__0998
0ba4c     A7 F0 03 F6 | 	mov	ptra, fp
0ba50     B2 00 A0 FD | 	call	#popregs_
0ba54                 | _do_save_ret
0ba54     2D 00 64 FD | 	ret
0ba58                 | 
0ba58                 | ' 
0ba58                 | ' '----------------- Load the program
0ba58                 | ' 'lo todo: errors while loading
0ba58                 | ' sub do_load
0ba58                 | _do_load
0ba58     01 4A 05 F6 | 	mov	COUNT_, #1
0ba5c     A8 00 A0 FD | 	call	#pushregs_
0ba60     A8 F0 07 F1 | 	add	ptra, #168
0ba64     4A 00 00 FF 
0ba68     B0 E4 05 F1 | 	add	objptr, ##38064
0ba6c     F2 14 02 FB | 	rdlong	arg02, objptr
0ba70     0A 13 02 F6 | 	mov	arg01, arg02
0ba74     01 12 66 F0 | 	shl	arg01, #1
0ba78     0A 13 02 F1 | 	add	arg01, arg02
0ba7c     02 12 66 F0 | 	shl	arg01, #2
0ba80     03 00 00 FF 
0ba84     04 E4 85 F1 | 	sub	objptr, ##1540
0ba88     F2 12 02 F1 | 	add	arg01, objptr
0ba8c     09 15 02 FB | 	rdlong	arg02, arg01
0ba90     18 4E 05 F1 | 	add	fp, #24
0ba94     A7 14 62 FC | 	wrlong	arg02, fp
0ba98     8C 4E 05 F1 | 	add	fp, #140
0ba9c     A7 12 02 F6 | 	mov	arg01, fp
0baa0     47 00 00 FF 
0baa4     AC E4 85 F1 | 	sub	objptr, ##36524
0baa8     80 4E 85 F1 | 	sub	fp, #128
0baac     09 4F 61 FC | 	wrlong	fp, arg01
0bab0                 | ' numpar=compiledline(lineptr_e).result.uresult
0bab0                 | ' lpoke varptr(line2$),varptr(line2)
0bab0                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
0bab0     0C 4E 85 F1 | 	sub	fp, #12
0bab4     A7 1E 02 FB | 	rdlong	local01, fp
0bab8     18 4E 85 F1 | 	sub	fp, #24
0babc     01 1E 56 F2 | 	cmps	local01, #1 wc
0bac0     20 00 90 CD |  if_b	jmp	#LR__1000
0bac4     74 F0 BF FD | 	call	#_pop
0bac8     A7 FA 61 FC | 	wrlong	result1, fp
0bacc     04 4E 05 F1 | 	add	fp, #4
0bad0     A7 FC 61 FC | 	wrlong	result2, fp
0bad4     04 4E 05 F1 | 	add	fp, #4
0bad8     A7 FE 61 FC | 	wrlong	result3, fp
0badc     08 4E 85 F1 | 	sub	fp, #8
0bae0     24 00 90 FD | 	jmp	#LR__1001
0bae4                 | LR__1000
0bae4     59 00 00 FF 
0bae8     E4 E5 05 F1 | 	add	objptr, ##46052
0baec     F2 1E 02 FB | 	rdlong	local01, objptr
0baf0     59 00 00 FF 
0baf4     E4 E5 85 F1 | 	sub	objptr, ##46052
0baf8     A7 1E 62 FC | 	wrlong	local01, fp
0bafc     08 4E 05 F1 | 	add	fp, #8
0bb00     A7 3E 68 FC | 	wrlong	#31, fp
0bb04     08 4E 85 F1 | 	sub	fp, #8
0bb08                 | LR__1001
0bb08                 | ' 'print "popped "; t1.result.uresult, t1.result_type
0bb08                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
0bb08     08 4E 05 F1 | 	add	fp, #8
0bb0c     A7 1E 02 FB | 	rdlong	local01, fp
0bb10     08 4E 85 F1 | 	sub	fp, #8
0bb14     2B 1E 0E F2 | 	cmp	local01, #43 wz
0bb18     18 00 90 5D |  if_ne	jmp	#LR__1002
0bb1c     A7 12 02 FB | 	rdlong	arg01, fp
0bb20     6C 3B B0 FD | 	call	#_convertstring
0bb24     A7 FA 61 FC | 	wrlong	result1, fp
0bb28     08 4E 05 F1 | 	add	fp, #8
0bb2c     A7 3E 68 FC | 	wrlong	#31, fp
0bb30     08 4E 85 F1 | 	sub	fp, #8
0bb34                 | LR__1002
0bb34                 | ' if t1.result_type=result_string then
0bb34     08 4E 05 F1 | 	add	fp, #8
0bb38     A7 1E 02 FB | 	rdlong	local01, fp
0bb3c     08 4E 85 F1 | 	sub	fp, #8
0bb40     1F 1E 0E F2 | 	cmp	local01, #31 wz
0bb44     20 04 90 5D |  if_ne	jmp	#LR__1010
0bb48     B0 33 B0 FD | 	call	#_do_new
0bb4c                 | '   do_new
0bb4c                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
0bb4c     A7 12 02 FB | 	rdlong	arg01, fp
0bb50     7A 01 00 FF 
0bb54     2B 14 06 F6 | 	mov	arg02, ##@LR__5201
0bb58     C8 3C B1 FD | 	call	#__system___string_cmp
0bb5c     00 FA 0D F2 | 	cmp	result1, #0 wz
0bb60     59 00 00 AF 
0bb64     E4 E5 05 A1 |  if_e	add	objptr, ##46052
0bb68     F2 1E 02 AB |  if_e	rdlong	local01, objptr
0bb6c     A7 1E 62 AC |  if_e	wrlong	local01, fp
0bb70     59 00 00 AF 
0bb74     E4 E5 85 A1 |  if_e	sub	objptr, ##46052
0bb78     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0bb7c     59 00 00 5F 
0bb80     E4 E5 05 51 |  if_ne	add	objptr, ##46052
0bb84     F2 1E 62 5C |  if_ne	wrlong	local01, objptr
0bb88     59 00 00 5F 
0bb8c     E4 E5 85 51 |  if_ne	sub	objptr, ##46052
0bb90                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0bb90     09 12 06 F6 | 	mov	arg01, #9
0bb94     2C 8C B1 FD | 	call	#__system__close
0bb98     09 1E 06 F6 | 	mov	local01, #9
0bb9c     52 00 00 FF 
0bba0     C8 E4 05 F1 | 	add	objptr, ##42184
0bba4     F2 12 02 FB | 	rdlong	arg01, objptr
0bba8     52 00 00 FF 
0bbac     C8 E4 85 F1 | 	sub	objptr, ##42184
0bbb0     7A 01 00 FF 
0bbb4     2C 14 06 F6 | 	mov	arg02, ##@LR__5202
0bbb8     9C 3C B1 FD | 	call	#__system___string_concat
0bbbc     FD 12 02 F6 | 	mov	arg01, result1
0bbc0     A7 14 02 FB | 	rdlong	arg02, fp
0bbc4     90 3C B1 FD | 	call	#__system___string_concat
0bbc8     FD 14 02 F6 | 	mov	arg02, result1
0bbcc     0F 13 02 F6 | 	mov	arg01, local01
0bbd0     00 16 06 F6 | 	mov	arg03, #0
0bbd4     28 48 B1 FD | 	call	#__system___basic_open_string
0bbd8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0bbdc     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0bbe0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0bbe4     10 4E 05 F1 | 	add	fp, #16
0bbe8     A7 FA 61 FC | 	wrlong	result1, fp
0bbec                 | '   r=geterr() 
0bbec                 | '   if r then 
0bbec     10 4E 85 F1 | 	sub	fp, #16
0bbf0     48 01 90 AD |  if_e	jmp	#LR__1004
0bbf4                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
0bbf4     09 12 06 F6 | 	mov	arg01, #9
0bbf8     C8 8B B1 FD | 	call	#__system__close
0bbfc     09 1E 06 F6 | 	mov	local01, #9
0bc00     52 00 00 FF 
0bc04     C8 E4 05 F1 | 	add	objptr, ##42184
0bc08     F2 12 02 FB | 	rdlong	arg01, objptr
0bc0c     52 00 00 FF 
0bc10     C8 E4 85 F1 | 	sub	objptr, ##42184
0bc14     7A 01 00 FF 
0bc18     2E 14 06 F6 | 	mov	arg02, ##@LR__5203
0bc1c     38 3C B1 FD | 	call	#__system___string_concat
0bc20     FD 12 02 F6 | 	mov	arg01, result1
0bc24     A7 14 02 FB | 	rdlong	arg02, fp
0bc28     2C 3C B1 FD | 	call	#__system___string_concat
0bc2c     FD 12 02 F6 | 	mov	arg01, result1
0bc30     7A 01 00 FF 
0bc34     30 14 06 F6 | 	mov	arg02, ##@LR__5204
0bc38     1C 3C B1 FD | 	call	#__system___string_concat
0bc3c     FD 14 02 F6 | 	mov	arg02, result1
0bc40     0F 13 02 F6 | 	mov	arg01, local01
0bc44     00 16 06 F6 | 	mov	arg03, #0
0bc48     B4 47 B1 FD | 	call	#__system___basic_open_string
0bc4c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0bc50     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0bc54     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0bc58     10 4E 05 F1 | 	add	fp, #16
0bc5c     A7 FA 61 FC | 	wrlong	result1, fp
0bc60                 | '     r=geterr() 
0bc60                 | '     if r then 
0bc60     10 4E 85 F1 | 	sub	fp, #16
0bc64     A0 00 90 AD |  if_e	jmp	#LR__1003
0bc68                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
0bc68     00 12 06 F6 | 	mov	arg01, #0
0bc6c     24 95 B1 FD | 	call	#__system___getiolock_0508
0bc70     FD 12 02 F6 | 	mov	arg01, result1
0bc74     84 3B B1 FD | 	call	#__system___lockmem
0bc78     7A 01 00 FF 
0bc7c     35 14 06 F6 | 	mov	arg02, ##@LR__5205
0bc80     00 12 06 F6 | 	mov	arg01, #0
0bc84     00 16 06 F6 | 	mov	arg03, #0
0bc88     64 48 B1 FD | 	call	#__system___basic_print_string
0bc8c     10 4E 05 F1 | 	add	fp, #16
0bc90     A7 14 02 FB | 	rdlong	arg02, fp
0bc94     10 4E 85 F1 | 	sub	fp, #16
0bc98     00 12 06 F6 | 	mov	arg01, #0
0bc9c     00 16 06 F6 | 	mov	arg03, #0
0bca0     0A 18 06 F6 | 	mov	arg04, #10
0bca4     8C 48 B1 FD | 	call	#__system___basic_print_integer
0bca8     7A 01 00 FF 
0bcac     43 14 06 F6 | 	mov	arg02, ##@LR__5206
0bcb0     00 12 06 F6 | 	mov	arg01, #0
0bcb4     00 16 06 F6 | 	mov	arg03, #0
0bcb8     34 48 B1 FD | 	call	#__system___basic_print_string
0bcbc     00 1E 06 F6 | 	mov	local01, #0
0bcc0     10 4E 05 F1 | 	add	fp, #16
0bcc4     A7 12 02 FB | 	rdlong	arg01, fp
0bcc8     10 4E 85 F1 | 	sub	fp, #16
0bccc     88 61 B1 FD | 	call	#__system___strerror
0bcd0     FD 14 02 F6 | 	mov	arg02, result1
0bcd4     0F 13 02 F6 | 	mov	arg01, local01
0bcd8     00 16 06 F6 | 	mov	arg03, #0
0bcdc     10 48 B1 FD | 	call	#__system___basic_print_string
0bce0     00 12 06 F6 | 	mov	arg01, #0
0bce4     0A 14 06 F6 | 	mov	arg02, #10
0bce8     00 16 06 F6 | 	mov	arg03, #0
0bcec     A8 47 B1 FD | 	call	#__system___basic_print_char
0bcf0     00 12 06 F6 | 	mov	arg01, #0
0bcf4     9C 94 B1 FD | 	call	#__system___getiolock_0508
0bcf8     FD 00 68 FC | 	wrlong	#0, result1
0bcfc     09 12 06 F6 | 	mov	arg01, #9
0bd00     C0 8A B1 FD | 	call	#__system__close
0bd04     F8 02 90 FD | 	jmp	#LR__1012
0bd08                 | LR__1003
0bd08     59 00 00 FF 
0bd0c     E4 E5 05 F1 | 	add	objptr, ##46052
0bd10     F2 12 02 FB | 	rdlong	arg01, objptr
0bd14     59 00 00 FF 
0bd18     E4 E5 85 F1 | 	sub	objptr, ##46052
0bd1c     7A 01 00 FF 
0bd20     46 14 06 F6 | 	mov	arg02, ##@LR__5207
0bd24     30 3B B1 FD | 	call	#__system___string_concat
0bd28     59 00 00 FF 
0bd2c     E4 E5 05 F1 | 	add	objptr, ##46052
0bd30     F2 FA 61 FC | 	wrlong	result1, objptr
0bd34     59 00 00 FF 
0bd38     E4 E5 85 F1 | 	sub	objptr, ##46052
0bd3c                 | LR__1004
0bd3c     0C 4E 05 F1 | 	add	fp, #12
0bd40     A7 0A 68 FC | 	wrlong	#5, fp
0bd44                 | '   i=5
0bd44                 | '   get #9,1,header,1   
0bd44     10 4E 05 F1 | 	add	fp, #16
0bd48     A7 16 02 F6 | 	mov	arg03, fp
0bd4c     1C 4E 85 F1 | 	sub	fp, #28
0bd50     09 12 06 F6 | 	mov	arg01, #9
0bd54     01 14 06 F6 | 	mov	arg02, #1
0bd58     01 18 06 F6 | 	mov	arg04, #1
0bd5c     04 1A 06 F6 | 	mov	arg05, #4
0bd60     9C 48 B1 FD | 	call	#__system___basic_get
0bd64                 | '   
0bd64                 | '   if header<>$0D616272 then 
0bd64     1C 4E 05 F1 | 	add	fp, #28
0bd68     A7 1E 02 FB | 	rdlong	local01, fp
0bd6c     1C 4E 85 F1 | 	sub	fp, #28
0bd70     B1 B0 06 FF 
0bd74     72 1E 0E F2 | 	cmp	local01, ##224486002 wz
0bd78     00 01 90 AD |  if_e	jmp	#LR__1007
0bd7c                 | '     close #9: open currentdir$+"/"+loadname for input as #9
0bd7c     09 12 06 F6 | 	mov	arg01, #9
0bd80     40 8A B1 FD | 	call	#__system__close
0bd84     09 1E 06 F6 | 	mov	local01, #9
0bd88     52 00 00 FF 
0bd8c     C8 E4 05 F1 | 	add	objptr, ##42184
0bd90     F2 12 02 FB | 	rdlong	arg01, objptr
0bd94     52 00 00 FF 
0bd98     C8 E4 85 F1 | 	sub	objptr, ##42184
0bd9c     7A 01 00 FF 
0bda0     4B 14 06 F6 | 	mov	arg02, ##@LR__5208
0bda4     B0 3A B1 FD | 	call	#__system___string_concat
0bda8     FD 12 02 F6 | 	mov	arg01, result1
0bdac     59 00 00 FF 
0bdb0     E4 E5 05 F1 | 	add	objptr, ##46052
0bdb4     F2 14 02 FB | 	rdlong	arg02, objptr
0bdb8     59 00 00 FF 
0bdbc     E4 E5 85 F1 | 	sub	objptr, ##46052
0bdc0     94 3A B1 FD | 	call	#__system___string_concat
0bdc4     FD 14 02 F6 | 	mov	arg02, result1
0bdc8     0F 13 02 F6 | 	mov	arg01, local01
0bdcc     00 16 06 F6 | 	mov	arg03, #0
0bdd0     2C 46 B1 FD | 	call	#__system___basic_open_string
0bdd4                 | '     do
0bdd4                 | LR__1005
0bdd4     09 12 06 F6 | 	mov	arg01, #9
0bdd8     2C 3C B1 FD | 	call	#__system___basic_read_line
0bddc     37 00 00 FF 
0bde0     4C E4 05 F1 | 	add	objptr, ##28236
0bde4     F2 FA 61 FC | 	wrlong	result1, objptr
0bde8                 | '       if left$(line$,1) >="0" andalso left$(line$,1)<="9" then interpret
0bde8     37 00 00 FF 
0bdec     4C E4 85 F1 | 	sub	objptr, ##28236
0bdf0     FD 12 02 F6 | 	mov	arg01, result1
0bdf4     01 14 06 F6 | 	mov	arg02, #1
0bdf8     10 5A B1 FD | 	call	#__system__Left_S
0bdfc     FD 12 02 F6 | 	mov	arg01, result1
0be00     7A 01 00 FF 
0be04     4D 14 06 F6 | 	mov	arg02, ##@LR__5209
0be08     18 3A B1 FD | 	call	#__system___string_cmp
0be0c     00 FA 55 F2 | 	cmps	result1, #0 wc
0be10     34 00 90 CD |  if_b	jmp	#LR__1006
0be14     37 00 00 FF 
0be18     4C E4 05 F1 | 	add	objptr, ##28236
0be1c     F2 12 02 FB | 	rdlong	arg01, objptr
0be20     37 00 00 FF 
0be24     4C E4 85 F1 | 	sub	objptr, ##28236
0be28     01 14 06 F6 | 	mov	arg02, #1
0be2c     DC 59 B1 FD | 	call	#__system__Left_S
0be30     FD 12 02 F6 | 	mov	arg01, result1
0be34     7A 01 00 FF 
0be38     4F 14 06 F6 | 	mov	arg02, ##@LR__5210
0be3c     E4 39 B1 FD | 	call	#__system___string_cmp
0be40     01 FA 55 F2 | 	cmps	result1, #1 wc
0be44     D4 4B BF CD |  if_b	call	#_interpret
0be48                 | LR__1006
0be48     37 00 00 FF 
0be4c     4C E4 05 F1 | 	add	objptr, ##28236
0be50     F2 12 02 FB | 	rdlong	arg01, objptr
0be54     37 00 00 FF 
0be58     4C E4 85 F1 | 	sub	objptr, ##28236
0be5c     7A 01 00 FF 
0be60     51 14 06 F6 | 	mov	arg02, ##@LR__5211
0be64     BC 39 B1 FD | 	call	#__system___string_cmp
0be68     00 FA 0D F2 | 	cmp	result1, #0 wz
0be6c     64 FF 9F 5D |  if_ne	jmp	#LR__1005
0be70                 | '     close #9
0be70     09 12 06 F6 | 	mov	arg01, #9
0be74     4C 89 B1 FD | 	call	#__system__close
0be78     F4 00 90 FD | 	jmp	#LR__1011
0be7c                 | LR__1007
0be7c                 | '   'printerror(26) : close #9 : return
0be7c                 | '     do
0be7c                 | LR__1008
0be7c                 | '       get #9,i,linelength,1,amount : i+=4 : line2(linelength)=0
0be7c     0C 4E 05 F1 | 	add	fp, #12
0be80     A7 14 02 FB | 	rdlong	arg02, fp
0be84     14 4E 05 F1 | 	add	fp, #20
0be88     A7 16 02 F6 | 	mov	arg03, fp
0be8c     20 4E 85 F1 | 	sub	fp, #32
0be90     09 12 06 F6 | 	mov	arg01, #9
0be94     01 18 06 F6 | 	mov	arg04, #1
0be98     04 1A 06 F6 | 	mov	arg05, #4
0be9c     60 47 B1 FD | 	call	#__system___basic_get
0bea0     14 4E 05 F1 | 	add	fp, #20
0bea4     A7 FA 61 FC | 	wrlong	result1, fp
0bea8     08 4E 85 F1 | 	sub	fp, #8
0beac     A7 1E 02 FB | 	rdlong	local01, fp
0beb0     04 1E 06 F1 | 	add	local01, #4
0beb4     A7 1E 62 FC | 	wrlong	local01, fp
0beb8     14 4E 05 F1 | 	add	fp, #20
0bebc     A7 1E 02 FB | 	rdlong	local01, fp
0bec0     04 4E 05 F1 | 	add	fp, #4
0bec4     A7 1E 02 F1 | 	add	local01, fp
0bec8     0F 01 48 FC | 	wrbyte	#0, local01
0becc                 | '       if amount=1 then  
0becc     10 4E 85 F1 | 	sub	fp, #16
0bed0     A7 1E 02 FB | 	rdlong	local01, fp
0bed4     14 4E 85 F1 | 	sub	fp, #20
0bed8     01 1E 0E F2 | 	cmp	local01, #1 wz
0bedc     68 00 90 5D |  if_ne	jmp	#LR__1009
0bee0                 | '         get #9,i,line2(0),linelength : i+=linelength
0bee0     0C 4E 05 F1 | 	add	fp, #12
0bee4     A7 14 02 FB | 	rdlong	arg02, fp
0bee8     18 4E 05 F1 | 	add	fp, #24
0beec     A7 16 02 F6 | 	mov	arg03, fp
0bef0     04 4E 85 F1 | 	sub	fp, #4
0bef4     A7 18 02 FB | 	rdlong	arg04, fp
0bef8     20 4E 85 F1 | 	sub	fp, #32
0befc     09 12 06 F6 | 	mov	arg01, #9
0bf00     01 1A 06 F6 | 	mov	arg05, #1
0bf04     F8 46 B1 FD | 	call	#__system___basic_get
0bf08     0C 4E 05 F1 | 	add	fp, #12
0bf0c     A7 1E 02 FB | 	rdlong	local01, fp
0bf10     14 4E 05 F1 | 	add	fp, #20
0bf14     A7 1A 02 FB | 	rdlong	arg05, fp
0bf18     0D 1F 02 F1 | 	add	local01, arg05
0bf1c     14 4E 85 F1 | 	sub	fp, #20
0bf20     A7 1E 62 FC | 	wrlong	local01, fp
0bf24     98 4E 05 F1 | 	add	fp, #152
0bf28     A7 1E 02 FB | 	rdlong	local01, fp
0bf2c     A4 4E 85 F1 | 	sub	fp, #164
0bf30     37 00 00 FF 
0bf34     4C E4 05 F1 | 	add	objptr, ##28236
0bf38     F2 1E 62 FC | 	wrlong	local01, objptr
0bf3c     37 00 00 FF 
0bf40     4C E4 85 F1 | 	sub	objptr, ##28236
0bf44     D4 4A BF FD | 	call	#_interpret
0bf48                 | LR__1009
0bf48     14 4E 05 F1 | 	add	fp, #20
0bf4c     A7 1E 02 FB | 	rdlong	local01, fp
0bf50     14 4E 85 F1 | 	sub	fp, #20
0bf54     01 1E 56 F2 | 	cmps	local01, #1 wc
0bf58     20 FF 9F 3D |  if_ae	jmp	#LR__1008
0bf5c                 | '     close #9 
0bf5c     09 12 06 F6 | 	mov	arg01, #9
0bf60     60 88 B1 FD | 	call	#__system__close
0bf64     08 00 90 FD | 	jmp	#LR__1011
0bf68                 | LR__1010
0bf68     1E 12 06 F6 | 	mov	arg01, #30
0bf6c     E4 F3 B0 FD | 	call	#_printerror
0bf70                 | LR__1011
0bf70                 | '   print "Loaded ";currentdir$+"/"+loadname
0bf70     00 12 06 F6 | 	mov	arg01, #0
0bf74     1C 92 B1 FD | 	call	#__system___getiolock_0508
0bf78     FD 12 02 F6 | 	mov	arg01, result1
0bf7c     7C 38 B1 FD | 	call	#__system___lockmem
0bf80     7A 01 00 FF 
0bf84     52 14 06 F6 | 	mov	arg02, ##@LR__5212
0bf88     00 12 06 F6 | 	mov	arg01, #0
0bf8c     00 16 06 F6 | 	mov	arg03, #0
0bf90     5C 45 B1 FD | 	call	#__system___basic_print_string
0bf94     00 1E 06 F6 | 	mov	local01, #0
0bf98     52 00 00 FF 
0bf9c     C8 E4 05 F1 | 	add	objptr, ##42184
0bfa0     F2 12 02 FB | 	rdlong	arg01, objptr
0bfa4     52 00 00 FF 
0bfa8     C8 E4 85 F1 | 	sub	objptr, ##42184
0bfac     7A 01 00 FF 
0bfb0     5A 14 06 F6 | 	mov	arg02, ##@LR__5213
0bfb4     A0 38 B1 FD | 	call	#__system___string_concat
0bfb8     FD 12 02 F6 | 	mov	arg01, result1
0bfbc     59 00 00 FF 
0bfc0     E4 E5 05 F1 | 	add	objptr, ##46052
0bfc4     F2 14 02 FB | 	rdlong	arg02, objptr
0bfc8     59 00 00 FF 
0bfcc     E4 E5 85 F1 | 	sub	objptr, ##46052
0bfd0     84 38 B1 FD | 	call	#__system___string_concat
0bfd4     FD 14 02 F6 | 	mov	arg02, result1
0bfd8     0F 13 02 F6 | 	mov	arg01, local01
0bfdc     00 16 06 F6 | 	mov	arg03, #0
0bfe0     0C 45 B1 FD | 	call	#__system___basic_print_string
0bfe4     00 12 06 F6 | 	mov	arg01, #0
0bfe8     0A 14 06 F6 | 	mov	arg02, #10
0bfec     00 16 06 F6 | 	mov	arg03, #0
0bff0     A4 44 B1 FD | 	call	#__system___basic_print_char
0bff4     00 12 06 F6 | 	mov	arg01, #0
0bff8     98 91 B1 FD | 	call	#__system___getiolock_0508
0bffc     FD 00 68 FC | 	wrlong	#0, result1
0c000                 | LR__1012
0c000     A7 F0 03 F6 | 	mov	ptra, fp
0c004     B2 00 A0 FD | 	call	#popregs_
0c008                 | _do_load_ret
0c008     2D 00 64 FD | 	ret
0c00c                 | 
0c00c                 | ' 
0c00c                 | ' sub do_end
0c00c                 | _do_end
0c00c     4A 00 00 FF 
0c010     AC E4 05 F1 | 	add	objptr, ##38060
0c014     F2 00 02 FB | 	rdlong	_var01, objptr
0c018     01 00 86 F1 | 	sub	_var01, #1
0c01c     04 E4 05 F1 | 	add	objptr, #4
0c020     F2 00 62 FC | 	wrlong	_var01, objptr
0c024     0E 00 00 FF 
0c028     3C E4 05 F1 | 	add	objptr, ##7228
0c02c     FF FF BF FF 
0c030     F2 FE 6B FC | 	wrlong	##2147483647, objptr
0c034     58 00 00 FF 
0c038     EC E4 85 F1 | 	sub	objptr, ##45292
0c03c                 | _do_end_ret
0c03c     2D 00 64 FD | 	ret
0c040                 | 
0c040                 | ' 
0c040                 | ' '----------------- Run the program 
0c040                 | ' 
0c040                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
0c040                 | ' 
0c040                 | ' sub do_run
0c040                 | _do_run
0c040     01 4A 05 F6 | 	mov	COUNT_, #1
0c044     A8 00 A0 FD | 	call	#pushregs_
0c048     4A 00 00 FF 
0c04c     B0 E4 05 F1 | 	add	objptr, ##38064
0c050     F2 18 02 FB | 	rdlong	arg04, objptr
0c054     0C 17 02 F6 | 	mov	arg03, arg04
0c058     01 16 66 F0 | 	shl	arg03, #1
0c05c     0C 17 02 F1 | 	add	arg03, arg04
0c060     02 16 66 F0 | 	shl	arg03, #2
0c064     03 00 00 FF 
0c068     04 E4 85 F1 | 	sub	objptr, ##1540
0c06c     F2 16 02 F1 | 	add	arg03, objptr
0c070     0B 15 02 FB | 	rdlong	arg02, arg03
0c074                 | ' numpar=compiledline(lineptr_e).result.uresult
0c074                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
0c074     01 14 0E F2 | 	cmp	arg02, #1 wz
0c078     47 00 00 FF 
0c07c     AC E4 85 F1 | 	sub	objptr, ##36524
0c080     D4 F9 BF AD |  if_e	call	#_do_load
0c084     4A 00 00 FF 
0c088     B4 E4 05 F1 | 	add	objptr, ##38068
0c08c     F2 18 02 FB | 	rdlong	arg04, objptr
0c090     0E 00 00 FF 
0c094     38 E4 05 F1 | 	add	objptr, ##7224
0c098     F2 18 62 FC | 	wrlong	arg04, objptr
0c09c     04 E4 05 F1 | 	add	objptr, #4
0c0a0     F2 00 68 FC | 	wrlong	#0, objptr
0c0a4     04 E4 05 F1 | 	add	objptr, #4
0c0a8     FF FF FF FF 
0c0ac     F2 FE 6B FC | 	wrlong	##-1, objptr
0c0b0                 | ' if inrun>0 then 
0c0b0     04 E4 05 F1 | 	add	objptr, #4
0c0b4     F2 18 02 FB | 	rdlong	arg04, objptr
0c0b8     58 00 00 FF 
0c0bc     F8 E4 85 F1 | 	sub	objptr, ##45304
0c0c0     01 18 16 F2 | 	cmp	arg04, #1 wc
0c0c4     30 00 90 CD |  if_b	jmp	#LR__1020
0c0c8     58 00 00 FF 
0c0cc     FC E4 05 F1 | 	add	objptr, ##45308
0c0d0     F2 12 02 F6 | 	mov	arg01, objptr
0c0d4     10 E4 85 F1 | 	sub	objptr, #16
0c0d8     F2 14 02 FB | 	rdlong	arg02, objptr
0c0dc     18 16 06 F6 | 	mov	arg03, #24
0c0e0     4D 00 00 FF 
0c0e4     20 E4 85 F1 | 	sub	objptr, ##39456
0c0e8     D0 2A B1 FD | 	call	#_psram_spin2_read1
0c0ec     0B 00 00 FF 
0c0f0     CC E4 85 F1 | 	sub	objptr, ##5836
0c0f4                 | '   psram.read1(varptr(runheader),runptr,24)  
0c0f4                 | '   return
0c0f4     88 02 90 FD | 	jmp	#LR__1026
0c0f8                 | LR__1020
0c0f8     58 00 00 FF 
0c0fc     F8 E4 05 F1 | 	add	objptr, ##45304
0c100     F2 02 68 FC | 	wrlong	#1, objptr
0c104     04 E4 05 F1 | 	add	objptr, #4
0c108     F2 12 02 F6 | 	mov	arg01, objptr
0c10c     10 E4 85 F1 | 	sub	objptr, #16
0c110     F2 14 02 FB | 	rdlong	arg02, objptr
0c114     18 16 06 F6 | 	mov	arg03, #24
0c118     4D 00 00 FF 
0c11c     20 E4 85 F1 | 	sub	objptr, ##39456
0c120     98 2A B1 FD | 	call	#_psram_spin2_read1
0c124                 | ' inrun=1
0c124                 | ' psram.read1(varptr(runheader),runptr,24) 
0c124                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
0c124     4D 00 00 FF 
0c128     30 E4 05 F1 | 	add	objptr, ##39472
0c12c     F2 1E 02 FB | 	rdlong	local01, objptr
0c130     58 00 00 FF 
0c134     FC E4 85 F1 | 	sub	objptr, ##45308
0c138     FF FF 7F FF 
0c13c     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0c140     58 00 00 AF 
0c144     F8 E4 05 A1 |  if_e	add	objptr, ##45304
0c148     F2 00 68 AC |  if_e	wrlong	#0, objptr
0c14c     58 00 00 AF 
0c150     F8 E4 85 A1 |  if_e	sub	objptr, ##45304
0c154     28 02 90 AD |  if_e	jmp	#LR__1026
0c158                 | ' do 
0c158                 | LR__1021
0c158                 | '   if runptr<>oldrunptr then
0c158     58 00 00 FF 
0c15c     EC E4 05 F1 | 	add	objptr, ##45292
0c160     F2 1E 02 FB | 	rdlong	local01, objptr
0c164     08 E4 05 F1 | 	add	objptr, #8
0c168     F2 18 02 FB | 	rdlong	arg04, objptr
0c16c     58 00 00 FF 
0c170     F4 E4 85 F1 | 	sub	objptr, ##45300
0c174     0C 1F 0A F2 | 	cmp	local01, arg04 wz
0c178     CC 00 90 AD |  if_e	jmp	#LR__1022
0c17c     58 00 00 FF 
0c180     FC E4 05 F1 | 	add	objptr, ##45308
0c184     F2 12 02 F6 | 	mov	arg01, objptr
0c188     10 E4 85 F1 | 	sub	objptr, #16
0c18c     F2 14 02 FB | 	rdlong	arg02, objptr
0c190     18 16 06 F6 | 	mov	arg03, #24
0c194     4D 00 00 FF 
0c198     20 E4 85 F1 | 	sub	objptr, ##39456
0c19c     1C 2A B1 FD | 	call	#_psram_spin2_read1
0c1a0     3B 00 00 FF 
0c1a4     E0 E5 05 F1 | 	add	objptr, ##30688
0c1a8     F2 12 02 F6 | 	mov	arg01, objptr
0c1ac     11 00 00 FF 
0c1b0     40 E4 05 F1 | 	add	objptr, ##8768
0c1b4     F2 14 02 FB | 	rdlong	arg02, objptr
0c1b8     13 00 00 FF 
0c1bc     58 E4 85 F1 | 	sub	objptr, ##9816
0c1c0     F2 1E 02 FB | 	rdlong	local01, objptr
0c1c4     01 1E 66 F0 | 	shl	local01, #1
0c1c8     0F 15 02 F1 | 	add	arg02, local01
0c1cc     13 00 00 FF 
0c1d0     70 E4 05 F1 | 	add	objptr, ##9840
0c1d4     F2 16 02 FB | 	rdlong	arg03, objptr
0c1d8     18 E4 85 F1 | 	sub	objptr, #24
0c1dc     F2 1E 02 FB | 	rdlong	local01, objptr
0c1e0     0F 17 82 F1 | 	sub	arg03, local01
0c1e4     4D 00 00 FF 
0c1e8     20 E4 85 F1 | 	sub	objptr, ##39456
0c1ec     CC 29 B1 FD | 	call	#_psram_spin2_read1
0c1f0     4D 00 00 FF 
0c1f4     38 E4 05 F1 | 	add	objptr, ##39480
0c1f8     F2 1E 02 FB | 	rdlong	local01, objptr
0c1fc     18 E4 85 F1 | 	sub	objptr, #24
0c200     F2 FA 01 FB | 	rdlong	result1, objptr
0c204     FD 1E 82 F1 | 	sub	local01, result1
0c208     13 00 00 FF 
0c20c     58 E4 85 F1 | 	sub	objptr, ##9816
0c210     F2 FA 01 FB | 	rdlong	result1, objptr
0c214     FD 1E 12 FD | 	qdiv	local01, result1
0c218     05 00 00 FF 
0c21c     18 E4 05 F1 | 	add	objptr, ##2584
0c220     18 1E 62 FD | 	getqx	local01
0c224     03 1E 86 F1 | 	sub	local01, #3
0c228     F2 1E 62 FC | 	wrlong	local01, objptr
0c22c     0E 00 00 FF 
0c230     40 E4 05 F1 | 	add	objptr, ##7232
0c234     F2 1E 02 FB | 	rdlong	local01, objptr
0c238     08 E4 05 F1 | 	add	objptr, #8
0c23c     F2 1E 62 FC | 	wrlong	local01, objptr
0c240     58 00 00 FF 
0c244     F4 E4 85 F1 | 	sub	objptr, ##45300
0c248                 | LR__1022
0c248     58 00 00 FF 
0c24c     10 E5 05 F1 | 	add	objptr, ##45328
0c250     F2 1E 02 FB | 	rdlong	local01, objptr
0c254     24 E4 85 F1 | 	sub	objptr, #36
0c258     F2 1E 62 FC | 	wrlong	local01, objptr
0c25c     04 E4 05 F1 | 	add	objptr, #4
0c260     F2 12 02 FB | 	rdlong	arg01, objptr
0c264     58 00 00 FF 
0c268     F0 E4 85 F1 | 	sub	objptr, ##45296
0c26c     C8 E7 BF FD | 	call	#_execute_line
0c270     58 00 00 FF 
0c274     F0 E4 05 F1 | 	add	objptr, ##45296
0c278     F2 FA 61 FC | 	wrlong	result1, objptr
0c27c     04 E4 85 F1 | 	sub	objptr, #4
0c280     F2 1E 02 FB | 	rdlong	local01, objptr
0c284     58 00 00 FF 
0c288     EC E4 85 F1 | 	sub	objptr, ##45292
0c28c     FF FF 3F FF 
0c290     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0c294     30 00 90 AD |  if_e	jmp	#LR__1024
0c298     E0 12 06 F6 | 	mov	arg01, #224
0c29c     AC 2C B1 FD | 	call	#_usbnew_spin2_keystate
0c2a0     00 FA 0D F2 | 	cmp	result1, #0 wz
0c2a4     10 00 90 5D |  if_ne	jmp	#LR__1023
0c2a8     E4 12 06 F6 | 	mov	arg01, #228
0c2ac     9C 2C B1 FD | 	call	#_usbnew_spin2_keystate
0c2b0     00 FA 0D F2 | 	cmp	result1, #0 wz
0c2b4     A0 FE 9F AD |  if_e	jmp	#LR__1021
0c2b8                 | LR__1023
0c2b8     06 12 06 F6 | 	mov	arg01, #6
0c2bc     8C 2C B1 FD | 	call	#_usbnew_spin2_keystate
0c2c0     00 FA 0D F2 | 	cmp	result1, #0 wz
0c2c4     90 FE 9F AD |  if_e	jmp	#LR__1021
0c2c8                 | LR__1024
0c2c8                 | '   ''do whatever kbm.peek_latest_key()=$106 
0c2c8                 | ' if runptr<>$7FFF_FFFF then 
0c2c8     58 00 00 FF 
0c2cc     EC E4 05 F1 | 	add	objptr, ##45292
0c2d0     F2 1E 02 FB | 	rdlong	local01, objptr
0c2d4     58 00 00 FF 
0c2d8     EC E4 85 F1 | 	sub	objptr, ##45292
0c2dc     FF FF 3F FF 
0c2e0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0c2e4     64 00 90 AD |  if_e	jmp	#LR__1025
0c2e8                 | '     print "Stopped at line ";runheader(0)
0c2e8     00 12 06 F6 | 	mov	arg01, #0
0c2ec     A4 8E B1 FD | 	call	#__system___getiolock_0508
0c2f0     FD 12 02 F6 | 	mov	arg01, result1
0c2f4     04 35 B1 FD | 	call	#__system___lockmem
0c2f8     7A 01 00 FF 
0c2fc     5C 14 06 F6 | 	mov	arg02, ##@LR__5214
0c300     00 12 06 F6 | 	mov	arg01, #0
0c304     00 16 06 F6 | 	mov	arg03, #0
0c308     E4 41 B1 FD | 	call	#__system___basic_print_string
0c30c     58 00 00 FF 
0c310     FC E4 05 F1 | 	add	objptr, ##45308
0c314     F2 14 02 FB | 	rdlong	arg02, objptr
0c318     58 00 00 FF 
0c31c     FC E4 85 F1 | 	sub	objptr, ##45308
0c320     00 12 06 F6 | 	mov	arg01, #0
0c324     00 16 06 F6 | 	mov	arg03, #0
0c328     0A 18 06 F6 | 	mov	arg04, #10
0c32c     44 42 B1 FD | 	call	#__system___basic_print_unsigned
0c330     00 12 06 F6 | 	mov	arg01, #0
0c334     0A 14 06 F6 | 	mov	arg02, #10
0c338     00 16 06 F6 | 	mov	arg03, #0
0c33c     58 41 B1 FD | 	call	#__system___basic_print_char
0c340     00 12 06 F6 | 	mov	arg01, #0
0c344     4C 8E B1 FD | 	call	#__system___getiolock_0508
0c348     FD 00 68 FC | 	wrlong	#0, result1
0c34c                 | LR__1025
0c34c     58 00 00 FF 
0c350     F8 E4 05 F1 | 	add	objptr, ##45304
0c354     F2 00 68 FC | 	wrlong	#0, objptr
0c358     58 00 00 FF 
0c35c     F8 E4 85 F1 | 	sub	objptr, ##45304
0c360     11 12 06 F6 | 	mov	arg01, #17
0c364     08 14 06 F6 | 	mov	arg02, #8
0c368     10 16 06 F6 | 	mov	arg03, #16
0c36c     C4 10 B1 FD | 	call	#_hg010b_spin2_setspritesize
0c370     10 12 06 F6 | 	mov	arg01, #16
0c374     20 14 06 F6 | 	mov	arg02, #32
0c378     20 16 06 F6 | 	mov	arg03, #32
0c37c     B4 10 B1 FD | 	call	#_hg010b_spin2_setspritesize
0c380                 | LR__1026
0c380     A7 F0 03 F6 | 	mov	ptra, fp
0c384     B2 00 A0 FD | 	call	#popregs_
0c388                 | _do_run_ret
0c388     2D 00 64 FD | 	ret
0c38c                 | 
0c38c                 | ' 
0c38c                 | ' 
0c38c                 | ' 
0c38c                 | ' 
0c38c                 | ' 
0c38c                 | ' 
0c38c                 | ' 
0c38c                 | ' sub do_defenv
0c38c                 | _do_defenv
0c38c     08 4A 05 F6 | 	mov	COUNT_, #8
0c390     A8 00 A0 FD | 	call	#pushregs_
0c394     B4 F0 07 F1 | 	add	ptra, #180
0c398     4A 00 00 FF 
0c39c     B0 E4 05 F1 | 	add	objptr, ##38064
0c3a0     F2 1E 02 FB | 	rdlong	local01, objptr
0c3a4     0F 1B 02 F6 | 	mov	arg05, local01
0c3a8     01 1A 66 F0 | 	shl	arg05, #1
0c3ac     0F 1B 02 F1 | 	add	arg05, local01
0c3b0     02 1A 66 F0 | 	shl	arg05, #2
0c3b4     03 00 00 FF 
0c3b8     04 E4 85 F1 | 	sub	objptr, ##1540
0c3bc     F2 20 02 F6 | 	mov	local02, objptr
0c3c0     F2 1A 02 F1 | 	add	arg05, objptr
0c3c4     0D 1B 02 FB | 	rdlong	arg05, arg05
0c3c8     10 4E 05 F1 | 	add	fp, #16
0c3cc     A7 1A 62 FC | 	wrlong	arg05, fp
0c3d0                 | ' 
0c3d0                 | ' numpar=compiledline(lineptr_e).result.uresult
0c3d0                 | ' 
0c3d0                 | ' 
0c3d0                 | ' ' defenv channel, string - tries to load from /media/h a h2 file from PC-Softsynth
0c3d0                 | ' 'TODO for 2.0: ' defenv channel, l1,r1,l2,r2,l3,r3,l4,r4 - defines ADSR in Yamaha DX  style, except these are linear values
0c3d0                 | ' ' defsnd channel, a,d,s,r - defines ADSR attack time, decay time, sus level, release time. Sus point has to be returned - how?
0c3d0                 | ' 
0c3d0                 | ' 
0c3d0                 | ' if numpar<>2 andalso numpar<>5 andalso numpar<>9 then return ' and print error
0c3d0     10 4E 85 F1 | 	sub	fp, #16
0c3d4     02 1A 0E F2 | 	cmp	arg05, #2 wz
0c3d8     47 00 00 FF 
0c3dc     AC E4 85 F1 | 	sub	objptr, ##36524
0c3e0     10 4E 05 51 |  if_ne	add	fp, #16
0c3e4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0c3e8     10 4E 85 51 |  if_ne	sub	fp, #16
0c3ec     05 1E 0E 52 |  if_ne	cmp	local01, #5 wz
0c3f0     10 4E 05 51 |  if_ne	add	fp, #16
0c3f4     0F 21 02 56 |  if_ne	mov	local02, local01
0c3f8     10 4E 85 51 |  if_ne	sub	fp, #16
0c3fc     09 20 0E 52 |  if_ne	cmp	local02, #9 wz
0c400     10 0C 90 5D |  if_ne	jmp	#LR__1051
0c404                 | ' 
0c404                 | '  
0c404                 | ' if numpar=2 then
0c404     10 4E 05 F1 | 	add	fp, #16
0c408     A7 20 02 FB | 	rdlong	local02, fp
0c40c     10 4E 85 F1 | 	sub	fp, #16
0c410     02 20 0E F2 | 	cmp	local02, #2 wz
0c414     24 04 90 5D |  if_ne	jmp	#LR__1043
0c418     20 E7 BF FD | 	call	#_pop
0c41c     FF 1A 02 F6 | 	mov	arg05, result3
0c420     5C 4E 05 F1 | 	add	fp, #92
0c424     A7 FA 61 FC | 	wrlong	result1, fp
0c428     04 4E 05 F1 | 	add	fp, #4
0c42c     A7 FC 61 FC | 	wrlong	result2, fp
0c430     04 4E 05 F1 | 	add	fp, #4
0c434     A7 1A 62 FC | 	wrlong	arg05, fp
0c438                 | '   t1=pop()
0c438                 | '   if t1.result_type=result_string2 then 
0c438     64 4E 85 F1 | 	sub	fp, #100
0c43c     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0c440     20 00 90 5D |  if_ne	jmp	#LR__1030
0c444     5C 4E 05 F1 | 	add	fp, #92
0c448     A7 12 02 FB | 	rdlong	arg01, fp
0c44c     5C 4E 85 F1 | 	sub	fp, #92
0c450     3C 32 B0 FD | 	call	#_convertstring
0c454     68 4E 05 F1 | 	add	fp, #104
0c458     A7 FA 61 FC | 	wrlong	result1, fp
0c45c     68 4E 85 F1 | 	sub	fp, #104
0c460     58 00 90 FD | 	jmp	#LR__1033
0c464                 | LR__1030
0c464     64 4E 05 F1 | 	add	fp, #100
0c468     A7 20 02 FB | 	rdlong	local02, fp
0c46c     64 4E 85 F1 | 	sub	fp, #100
0c470     1F 20 0E F2 | 	cmp	local02, #31 wz
0c474     18 00 90 5D |  if_ne	jmp	#LR__1031
0c478     5C 4E 05 F1 | 	add	fp, #92
0c47c     A7 20 02 FB | 	rdlong	local02, fp
0c480     0C 4E 05 F1 | 	add	fp, #12
0c484     A7 20 62 FC | 	wrlong	local02, fp
0c488     68 4E 85 F1 | 	sub	fp, #104
0c48c     2C 00 90 FD | 	jmp	#LR__1032
0c490                 | LR__1031
0c490     7A 01 00 FF 
0c494     6D 20 06 F6 | 	mov	local02, ##@LR__5215
0c498     68 4E 05 F1 | 	add	fp, #104
0c49c     A7 20 62 FC | 	wrlong	local02, fp
0c4a0     0C 4E 85 F1 | 	sub	fp, #12
0c4a4     A7 12 02 F6 | 	mov	arg01, fp
0c4a8     5C 4E 85 F1 | 	sub	fp, #92
0c4ac     04 7A B0 FD | 	call	#_converttoint
0c4b0     24 4E 05 F1 | 	add	fp, #36
0c4b4     A7 FA 61 FC | 	wrlong	result1, fp
0c4b8     24 4E 85 F1 | 	sub	fp, #36
0c4bc                 | LR__1032
0c4bc                 | LR__1033
0c4bc                 | ' 
0c4bc                 | '     
0c4bc                 | '   if s1<>"" then 
0c4bc     68 4E 05 F1 | 	add	fp, #104
0c4c0     A7 12 02 FB | 	rdlong	arg01, fp
0c4c4     68 4E 85 F1 | 	sub	fp, #104
0c4c8     7A 01 00 FF 
0c4cc     6E 14 06 F6 | 	mov	arg02, ##@LR__5216
0c4d0     50 33 B1 FD | 	call	#__system___string_cmp
0c4d4     00 FA 0D F2 | 	cmp	result1, #0 wz
0c4d8     24 02 90 AD |  if_e	jmp	#LR__1037
0c4dc     5C E6 BF FD | 	call	#_pop
0c4e0     FF 1E 02 F6 | 	mov	local01, result3
0c4e4     5C 4E 05 F1 | 	add	fp, #92
0c4e8     A7 FA 61 FC | 	wrlong	result1, fp
0c4ec     04 4E 05 F1 | 	add	fp, #4
0c4f0     A7 FC 61 FC | 	wrlong	result2, fp
0c4f4     04 4E 05 F1 | 	add	fp, #4
0c4f8     A7 1E 62 FC | 	wrlong	local01, fp
0c4fc     08 4E 85 F1 | 	sub	fp, #8
0c500     A7 12 02 F6 | 	mov	arg01, fp
0c504     5C 4E 85 F1 | 	sub	fp, #92
0c508     A8 79 B0 FD | 	call	#_converttoint
0c50c     20 4E 05 F1 | 	add	fp, #32
0c510     A7 FA 61 FC | 	wrlong	result1, fp
0c514     20 4E 85 F1 | 	sub	fp, #32
0c518                 | '     t1=pop()
0c518                 | '     channel=converttoint(t1) 
0c518                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0c518     09 12 06 F6 | 	mov	arg01, #9
0c51c     A4 82 B1 FD | 	call	#__system__close
0c520     09 20 06 F6 | 	mov	local02, #9
0c524     7A 01 00 FF 
0c528     6F 12 06 F6 | 	mov	arg01, ##@LR__5217
0c52c     68 4E 05 F1 | 	add	fp, #104
0c530     A7 14 02 FB | 	rdlong	arg02, fp
0c534     68 4E 85 F1 | 	sub	fp, #104
0c538     1C 33 B1 FD | 	call	#__system___string_concat
0c53c     FD 14 02 F6 | 	mov	arg02, result1
0c540     10 13 02 F6 | 	mov	arg01, local02
0c544     00 16 06 F6 | 	mov	arg03, #0
0c548     B4 3E B1 FD | 	call	#__system___basic_open_string
0c54c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0c550     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0c554     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0c558     0C 4E 05 F1 | 	add	fp, #12
0c55c     A7 FA 61 FC | 	wrlong	result1, fp
0c560                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0c560     0C 4E 85 F1 | 	sub	fp, #12
0c564     A0 00 90 AD |  if_e	jmp	#LR__1034
0c568     00 12 06 F6 | 	mov	arg01, #0
0c56c     24 8C B1 FD | 	call	#__system___getiolock_0508
0c570     FD 12 02 F6 | 	mov	arg01, result1
0c574     84 32 B1 FD | 	call	#__system___lockmem
0c578     7A 01 00 FF 
0c57c     7C 14 06 F6 | 	mov	arg02, ##@LR__5218
0c580     00 12 06 F6 | 	mov	arg01, #0
0c584     00 16 06 F6 | 	mov	arg03, #0
0c588     64 3F B1 FD | 	call	#__system___basic_print_string
0c58c     0C 4E 05 F1 | 	add	fp, #12
0c590     A7 14 02 FB | 	rdlong	arg02, fp
0c594     0C 4E 85 F1 | 	sub	fp, #12
0c598     00 12 06 F6 | 	mov	arg01, #0
0c59c     00 16 06 F6 | 	mov	arg03, #0
0c5a0     0A 18 06 F6 | 	mov	arg04, #10
0c5a4     8C 3F B1 FD | 	call	#__system___basic_print_integer
0c5a8     7A 01 00 FF 
0c5ac     8A 14 06 F6 | 	mov	arg02, ##@LR__5219
0c5b0     00 12 06 F6 | 	mov	arg01, #0
0c5b4     00 16 06 F6 | 	mov	arg03, #0
0c5b8     34 3F B1 FD | 	call	#__system___basic_print_string
0c5bc     00 20 06 F6 | 	mov	local02, #0
0c5c0     0C 4E 05 F1 | 	add	fp, #12
0c5c4     A7 12 02 FB | 	rdlong	arg01, fp
0c5c8     0C 4E 85 F1 | 	sub	fp, #12
0c5cc     88 58 B1 FD | 	call	#__system___strerror
0c5d0     FD 14 02 F6 | 	mov	arg02, result1
0c5d4     10 13 02 F6 | 	mov	arg01, local02
0c5d8     00 16 06 F6 | 	mov	arg03, #0
0c5dc     10 3F B1 FD | 	call	#__system___basic_print_string
0c5e0     00 12 06 F6 | 	mov	arg01, #0
0c5e4     0A 14 06 F6 | 	mov	arg02, #10
0c5e8     00 16 06 F6 | 	mov	arg03, #0
0c5ec     A8 3E B1 FD | 	call	#__system___basic_print_char
0c5f0     00 12 06 F6 | 	mov	arg01, #0
0c5f4     9C 8B B1 FD | 	call	#__system___getiolock_0508
0c5f8     FD 00 68 FC | 	wrlong	#0, result1
0c5fc     09 12 06 F6 | 	mov	arg01, #9
0c600     C0 81 B1 FD | 	call	#__system__close
0c604     0C 0A 90 FD | 	jmp	#LR__1051
0c608                 | LR__1034
0c608                 | '     get #9,17,envbuf8(channel,0),256
0c608     20 4E 05 F1 | 	add	fp, #32
0c60c     A7 1A 02 FB | 	rdlong	arg05, fp
0c610     20 4E 85 F1 | 	sub	fp, #32
0c614     0D 17 02 F6 | 	mov	arg03, arg05
0c618     09 16 66 F0 | 	shl	arg03, #9
0c61c     0D 17 02 F1 | 	add	arg03, arg05
0c620     0C 00 00 FF 
0c624     D8 E4 05 F1 | 	add	objptr, ##6360
0c628     F2 16 02 F1 | 	add	arg03, objptr
0c62c     09 12 06 F6 | 	mov	arg01, #9
0c630     11 14 06 F6 | 	mov	arg02, #17
0c634     00 19 06 F6 | 	mov	arg04, #256
0c638     01 1A 06 F6 | 	mov	arg05, #1
0c63c     0C 00 00 FF 
0c640     D8 E4 85 F1 | 	sub	objptr, ##6360
0c644     B8 3F B1 FD | 	call	#__system___basic_get
0c648                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0c648     14 4E 05 F1 | 	add	fp, #20
0c64c     A7 FE 69 FC | 	wrlong	#255, fp
0c650     14 4E 85 F1 | 	sub	fp, #20
0c654     0C 00 00 FF 
0c658     D8 E4 05 F1 | 	add	objptr, ##6360
0c65c     97 30 48 FB | 	callpa	#(@LR__1036-@LR__1035)>>2,fcache_load_ptr_
0c660                 | LR__1035
0c660     20 4E 05 F1 | 	add	fp, #32
0c664     A7 18 02 FB | 	rdlong	arg04, fp
0c668     0C 21 02 F6 | 	mov	local02, arg04
0c66c     09 20 66 F0 | 	shl	local02, #9
0c670     F2 20 02 F1 | 	add	local02, objptr
0c674     0C 4E 85 F1 | 	sub	fp, #12
0c678     A7 1E 02 FB | 	rdlong	local01, fp
0c67c     0F 1B 02 F6 | 	mov	arg05, local01
0c680     01 1A 66 F0 | 	shl	arg05, #1
0c684     10 1B 02 F1 | 	add	arg05, local02
0c688     0C 21 02 F6 | 	mov	local02, arg04
0c68c     09 20 66 F0 | 	shl	local02, #9
0c690     0C 21 02 F1 | 	add	local02, arg04
0c694     F2 20 02 F1 | 	add	local02, objptr
0c698     10 1F 02 F1 | 	add	local01, local02
0c69c     0F 21 C2 FA | 	rdbyte	local02, local01
0c6a0     00 21 06 FA | 	mul	local02, #256
0c6a4     0D 21 52 FC | 	wrword	local02, arg05
0c6a8     A7 20 02 FB | 	rdlong	local02, fp
0c6ac     01 20 86 F1 | 	sub	local02, #1
0c6b0     A7 20 62 FC | 	wrlong	local02, fp
0c6b4     14 4E 85 F1 | 	sub	fp, #20
0c6b8     00 20 56 F2 | 	cmps	local02, #0 wc
0c6bc     A0 FF 9F 3D |  if_ae	jmp	#LR__1035
0c6c0                 | LR__1036
0c6c0     0C 00 00 FF 
0c6c4     D8 E4 85 F1 | 	sub	objptr, ##6360
0c6c8                 | '     close #9
0c6c8     09 12 06 F6 | 	mov	arg01, #9
0c6cc     F4 80 B1 FD | 	call	#__system__close
0c6d0     20 4E 05 F1 | 	add	fp, #32
0c6d4     A7 20 02 FB | 	rdlong	local02, fp
0c6d8     20 4E 85 F1 | 	sub	fp, #32
0c6dc     09 20 66 F0 | 	shl	local02, #9
0c6e0     0C 00 00 FF 
0c6e4     D8 E4 05 F1 | 	add	objptr, ##6360
0c6e8     F2 20 02 F1 | 	add	local02, objptr
0c6ec     FE 21 06 F1 | 	add	local02, #510
0c6f0     10 01 58 FC | 	wrword	#0, local02
0c6f4                 | '     envbuf(channel,255)=0                                                                   '  for i=0 to 255: v.putpixel(i,288-envbuf(channel,i)/400,40) : next i
0c6f4                 | '     return
0c6f4     0C 00 00 FF 
0c6f8     D8 E4 85 F1 | 	sub	objptr, ##6360
0c6fc     14 09 90 FD | 	jmp	#LR__1051
0c700                 | LR__1037
0c700                 | '     if wptr < ($80000 - 2048) then 
0c700     24 4E 05 F1 | 	add	fp, #36
0c704     A7 22 02 FB | 	rdlong	local03, fp
0c708     24 4E 85 F1 | 	sub	fp, #36
0c70c     FC 03 00 FF 
0c710     00 22 56 F2 | 	cmps	local03, ##522240 wc
0c714     7C 00 90 3D |  if_ae	jmp	#LR__1040
0c718                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0c718     14 4E 05 F1 | 	add	fp, #20
0c71c     A7 00 68 FC | 	wrlong	#0, fp
0c720     14 4E 85 F1 | 	sub	fp, #20
0c724     0C 00 00 FF 
0c728     D8 E4 05 F1 | 	add	objptr, ##6360
0c72c     97 2C 48 FB | 	callpa	#(@LR__1039-@LR__1038)>>2,fcache_load_ptr_
0c730                 | LR__1038
0c730     20 4E 05 F1 | 	add	fp, #32
0c734     A7 22 02 FB | 	rdlong	local03, fp
0c738     09 22 66 F0 | 	shl	local03, #9
0c73c     F2 22 02 F1 | 	add	local03, objptr
0c740     0C 4E 85 F1 | 	sub	fp, #12
0c744     A7 20 02 FB | 	rdlong	local02, fp
0c748     10 1F 02 F6 | 	mov	local01, local02
0c74c     01 1E 66 F0 | 	shl	local01, #1
0c750     11 1F 02 F1 | 	add	local01, local03
0c754     10 4E 05 F1 | 	add	fp, #16
0c758     A7 12 02 FB | 	rdlong	arg01, fp
0c75c     01 20 66 F0 | 	shl	local02, #1
0c760     10 13 02 F1 | 	add	arg01, local02
0c764     09 FB E1 FA | 	rdword	result1, arg01
0c768     0F FB 51 FC | 	wrword	result1, local01
0c76c     10 4E 85 F1 | 	sub	fp, #16
0c770     A7 22 02 FB | 	rdlong	local03, fp
0c774     01 22 06 F1 | 	add	local03, #1
0c778     A7 22 62 FC | 	wrlong	local03, fp
0c77c     14 4E 85 F1 | 	sub	fp, #20
0c780     00 23 56 F2 | 	cmps	local03, #256 wc
0c784     A8 FF 9F CD |  if_b	jmp	#LR__1038
0c788                 | LR__1039
0c788     0C 00 00 FF 
0c78c     D8 E4 85 F1 | 	sub	objptr, ##6360
0c790     78 00 90 FD | 	jmp	#LR__1042
0c794                 | LR__1040
0c794                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0c794     14 4E 05 F1 | 	add	fp, #20
0c798     A7 00 68 FC | 	wrlong	#0, fp
0c79c     14 4E 85 F1 | 	sub	fp, #20
0c7a0                 | LR__1041
0c7a0     20 4E 05 F1 | 	add	fp, #32
0c7a4     A7 22 02 FB | 	rdlong	local03, fp
0c7a8     09 22 66 F0 | 	shl	local03, #9
0c7ac     0C 00 00 FF 
0c7b0     D8 E4 05 F1 | 	add	objptr, ##6360
0c7b4     F2 22 02 F1 | 	add	local03, objptr
0c7b8     0C 4E 85 F1 | 	sub	fp, #12
0c7bc     A7 20 02 FB | 	rdlong	local02, fp
0c7c0     10 1F 02 F6 | 	mov	local01, local02
0c7c4     01 1E 66 F0 | 	shl	local01, #1
0c7c8     11 1F 02 F1 | 	add	local01, local03
0c7cc     10 4E 05 F1 | 	add	fp, #16
0c7d0     A7 12 02 FB | 	rdlong	arg01, fp
0c7d4     24 4E 85 F1 | 	sub	fp, #36
0c7d8     01 20 66 F0 | 	shl	local02, #1
0c7dc     10 13 02 F1 | 	add	arg01, local02
0c7e0     0C 00 00 FF 
0c7e4     D8 E4 85 F1 | 	sub	objptr, ##6360
0c7e8     54 EE B0 FD | 	call	#_psdpeek
0c7ec     0F FB 51 FC | 	wrword	result1, local01
0c7f0     14 4E 05 F1 | 	add	fp, #20
0c7f4     A7 22 02 FB | 	rdlong	local03, fp
0c7f8     01 22 06 F1 | 	add	local03, #1
0c7fc     A7 22 62 FC | 	wrlong	local03, fp
0c800     14 4E 85 F1 | 	sub	fp, #20
0c804     00 23 56 F2 | 	cmps	local03, #256 wc
0c808     94 FF 9F CD |  if_b	jmp	#LR__1041
0c80c                 | LR__1042
0c80c     20 4E 05 F1 | 	add	fp, #32
0c810     A7 22 02 FB | 	rdlong	local03, fp
0c814     20 4E 85 F1 | 	sub	fp, #32
0c818     09 22 66 F0 | 	shl	local03, #9
0c81c     0C 00 00 FF 
0c820     D8 E4 05 F1 | 	add	objptr, ##6360
0c824     F2 22 02 F1 | 	add	local03, objptr
0c828     FE 23 06 F1 | 	add	local03, #510
0c82c     11 01 58 FC | 	wrword	#0, local03
0c830                 | '     envbuf(channel,255)=0
0c830                 | '     return   
0c830     0C 00 00 FF 
0c834     D8 E4 85 F1 | 	sub	objptr, ##6360
0c838     D8 07 90 FD | 	jmp	#LR__1051
0c83c                 | LR__1043
0c83c                 | ' 
0c83c                 | ' if numpar=5 then    'simple adsr
0c83c     10 4E 05 F1 | 	add	fp, #16
0c840     A7 22 02 FB | 	rdlong	local03, fp
0c844     10 4E 85 F1 | 	sub	fp, #16
0c848     05 22 0E F2 | 	cmp	local03, #5 wz
0c84c     98 07 90 5D |  if_ne	jmp	#LR__1050
0c850     E8 E2 BF FD | 	call	#_pop
0c854     FF 1E 02 F6 | 	mov	local01, result3
0c858     5C 4E 05 F1 | 	add	fp, #92
0c85c     A7 FA 61 FC | 	wrlong	result1, fp
0c860     04 4E 05 F1 | 	add	fp, #4
0c864     A7 FC 61 FC | 	wrlong	result2, fp
0c868     04 4E 05 F1 | 	add	fp, #4
0c86c     A7 1E 62 FC | 	wrlong	local01, fp
0c870     08 4E 85 F1 | 	sub	fp, #8
0c874     A7 12 02 F6 | 	mov	arg01, fp
0c878     5C 4E 85 F1 | 	sub	fp, #92
0c87c     E0 76 B0 FD | 	call	#_converttofloat
0c880     FD 22 02 F6 | 	mov	local03, result1
0c884     34 4E 05 F1 | 	add	fp, #52
0c888     A7 22 62 FC | 	wrlong	local03, fp
0c88c     34 4E 85 F1 | 	sub	fp, #52
0c890     A8 E2 BF FD | 	call	#_pop
0c894     FF 1E 02 F6 | 	mov	local01, result3
0c898     5C 4E 05 F1 | 	add	fp, #92
0c89c     A7 FA 61 FC | 	wrlong	result1, fp
0c8a0     04 4E 05 F1 | 	add	fp, #4
0c8a4     A7 FC 61 FC | 	wrlong	result2, fp
0c8a8     04 4E 05 F1 | 	add	fp, #4
0c8ac     A7 1E 62 FC | 	wrlong	local01, fp
0c8b0     08 4E 85 F1 | 	sub	fp, #8
0c8b4     A7 12 02 F6 | 	mov	arg01, fp
0c8b8     5C 4E 85 F1 | 	sub	fp, #92
0c8bc     A0 76 B0 FD | 	call	#_converttofloat
0c8c0     FD 22 02 F6 | 	mov	local03, result1
0c8c4     30 4E 05 F1 | 	add	fp, #48
0c8c8     A7 22 62 FC | 	wrlong	local03, fp
0c8cc     30 4E 85 F1 | 	sub	fp, #48
0c8d0     68 E2 BF FD | 	call	#_pop
0c8d4     FF 1E 02 F6 | 	mov	local01, result3
0c8d8     5C 4E 05 F1 | 	add	fp, #92
0c8dc     A7 FA 61 FC | 	wrlong	result1, fp
0c8e0     04 4E 05 F1 | 	add	fp, #4
0c8e4     A7 FC 61 FC | 	wrlong	result2, fp
0c8e8     04 4E 05 F1 | 	add	fp, #4
0c8ec     A7 1E 62 FC | 	wrlong	local01, fp
0c8f0     08 4E 85 F1 | 	sub	fp, #8
0c8f4     A7 12 02 F6 | 	mov	arg01, fp
0c8f8     5C 4E 85 F1 | 	sub	fp, #92
0c8fc     60 76 B0 FD | 	call	#_converttofloat
0c900     FD 22 02 F6 | 	mov	local03, result1
0c904     2C 4E 05 F1 | 	add	fp, #44
0c908     A7 22 62 FC | 	wrlong	local03, fp
0c90c     2C 4E 85 F1 | 	sub	fp, #44
0c910     28 E2 BF FD | 	call	#_pop
0c914     FF 1E 02 F6 | 	mov	local01, result3
0c918     5C 4E 05 F1 | 	add	fp, #92
0c91c     A7 FA 61 FC | 	wrlong	result1, fp
0c920     04 4E 05 F1 | 	add	fp, #4
0c924     A7 FC 61 FC | 	wrlong	result2, fp
0c928     04 4E 05 F1 | 	add	fp, #4
0c92c     A7 1E 62 FC | 	wrlong	local01, fp
0c930     08 4E 85 F1 | 	sub	fp, #8
0c934     A7 12 02 F6 | 	mov	arg01, fp
0c938     5C 4E 85 F1 | 	sub	fp, #92
0c93c     20 76 B0 FD | 	call	#_converttofloat
0c940     FD 22 02 F6 | 	mov	local03, result1
0c944     28 4E 05 F1 | 	add	fp, #40
0c948     A7 22 62 FC | 	wrlong	local03, fp
0c94c     28 4E 85 F1 | 	sub	fp, #40
0c950     E8 E1 BF FD | 	call	#_pop
0c954     FF 1E 02 F6 | 	mov	local01, result3
0c958     5C 4E 05 F1 | 	add	fp, #92
0c95c     A7 FA 61 FC | 	wrlong	result1, fp
0c960     04 4E 05 F1 | 	add	fp, #4
0c964     A7 FC 61 FC | 	wrlong	result2, fp
0c968     04 4E 05 F1 | 	add	fp, #4
0c96c     A7 1E 62 FC | 	wrlong	local01, fp
0c970     08 4E 85 F1 | 	sub	fp, #8
0c974     A7 12 02 F6 | 	mov	arg01, fp
0c978     5C 4E 85 F1 | 	sub	fp, #92
0c97c     34 75 B0 FD | 	call	#_converttoint
0c980     20 4E 05 F1 | 	add	fp, #32
0c984     A7 FA 61 FC | 	wrlong	result1, fp
0c988                 | ' 
0c988                 | '   t1=pop() : rr=converttofloat(t1)
0c988                 | '   t1=pop() : ss=converttofloat(t1) 
0c988                 | '   t1=pop() : dd=converttofloat(t1)
0c988                 | '   t1=pop() : aa=converttofloat(t1)
0c988                 | '   t1=pop() : channel=converttoint(t1)
0c988                 | '   if ss<0.0 then ss=0.0 
0c988     10 4E 05 F1 | 	add	fp, #16
0c98c     A7 12 02 FB | 	rdlong	arg01, fp
0c990     30 4E 85 F1 | 	sub	fp, #48
0c994     00 14 06 F6 | 	mov	arg02, #0
0c998     01 16 06 F6 | 	mov	arg03, #1
0c99c     D8 5D B1 FD | 	call	#__system___float_cmp
0c9a0     00 FA 55 F2 | 	cmps	result1, #0 wc
0c9a4     30 4E 05 C1 |  if_b	add	fp, #48
0c9a8     A7 00 68 CC |  if_b	wrlong	#0, fp
0c9ac     30 4E 85 C1 |  if_b	sub	fp, #48
0c9b0                 | '   if ss>1.0 then ss=1.0
0c9b0     30 4E 05 F1 | 	add	fp, #48
0c9b4     A7 12 02 FB | 	rdlong	arg01, fp
0c9b8     30 4E 85 F1 | 	sub	fp, #48
0c9bc     00 C0 1F FF 
0c9c0     00 14 06 F6 | 	mov	arg02, ##1065353216
0c9c4     01 16 66 F6 | 	neg	arg03, #1
0c9c8     AC 5D B1 FD | 	call	#__system___float_cmp
0c9cc     01 FA 55 F2 | 	cmps	result1, #1 wc
0c9d0     30 4E 05 31 |  if_ae	add	fp, #48
0c9d4     00 C0 9F 3F 
0c9d8     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
0c9dc     30 4E 85 31 |  if_ae	sub	fp, #48
0c9e0     28 4E 05 F1 | 	add	fp, #40
0c9e4     A7 12 02 FB | 	rdlong	arg01, fp
0c9e8     04 4E 05 F1 | 	add	fp, #4
0c9ec     A7 14 02 FB | 	rdlong	arg02, fp
0c9f0     2C 4E 85 F1 | 	sub	fp, #44
0c9f4     7C 55 B1 FD | 	call	#__system___float_add
0c9f8     FD 12 02 F6 | 	mov	arg01, result1
0c9fc     34 4E 05 F1 | 	add	fp, #52
0ca00     A7 14 02 FB | 	rdlong	arg02, fp
0ca04     34 4E 85 F1 | 	sub	fp, #52
0ca08     68 55 B1 FD | 	call	#__system___float_add
0ca0c     4C 4E 05 F1 | 	add	fp, #76
0ca10     A7 FA 61 FC | 	wrlong	result1, fp
0ca14     FD 14 02 F6 | 	mov	arg02, result1
0ca18     4C 4E 85 F1 | 	sub	fp, #76
0ca1c     00 C0 21 FF 
0ca20     00 12 06 F6 | 	mov	arg01, ##1132462080
0ca24     20 5B B1 FD | 	call	#__system___float_div
0ca28     50 4E 05 F1 | 	add	fp, #80
0ca2c     A7 FA 61 FC | 	wrlong	result1, fp
0ca30     28 4E 85 F1 | 	sub	fp, #40
0ca34     A7 12 02 FB | 	rdlong	arg01, fp
0ca38     FD 14 02 F6 | 	mov	arg02, result1
0ca3c     28 4E 85 F1 | 	sub	fp, #40
0ca40     00 59 B1 FD | 	call	#__system___float_mul
0ca44     FD 12 02 F6 | 	mov	arg01, result1
0ca48     01 14 06 F6 | 	mov	arg02, #1
0ca4c     BC 5D B1 FD | 	call	#__system___float_tointeger
0ca50     A7 FA 61 FC | 	wrlong	result1, fp
0ca54     2C 4E 05 F1 | 	add	fp, #44
0ca58     A7 12 02 FB | 	rdlong	arg01, fp
0ca5c     24 4E 05 F1 | 	add	fp, #36
0ca60     A7 14 02 FB | 	rdlong	arg02, fp
0ca64     50 4E 85 F1 | 	sub	fp, #80
0ca68     D8 58 B1 FD | 	call	#__system___float_mul
0ca6c     FD 12 02 F6 | 	mov	arg01, result1
0ca70     01 14 06 F6 | 	mov	arg02, #1
0ca74     94 5D B1 FD | 	call	#__system___float_tointeger
0ca78     04 4E 05 F1 | 	add	fp, #4
0ca7c     A7 FA 61 FC | 	wrlong	result1, fp
0ca80     30 4E 05 F1 | 	add	fp, #48
0ca84     A7 12 02 FB | 	rdlong	arg01, fp
0ca88     1C 4E 05 F1 | 	add	fp, #28
0ca8c     A7 14 02 FB | 	rdlong	arg02, fp
0ca90     50 4E 85 F1 | 	sub	fp, #80
0ca94     AC 58 B1 FD | 	call	#__system___float_mul
0ca98     FD 12 02 F6 | 	mov	arg01, result1
0ca9c     01 14 06 F6 | 	mov	arg02, #1
0caa0     68 5D B1 FD | 	call	#__system___float_tointeger
0caa4     FD 22 02 F6 | 	mov	local03, result1
0caa8     0C 4E 05 F1 | 	add	fp, #12
0caac     A7 22 62 FC | 	wrlong	local03, fp
0cab0     0C 4E 85 F1 | 	sub	fp, #12
0cab4                 | '   fulltime=aa+dd+rr
0cab4                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit) :print a,d,r,a+d+r
0cab4     00 12 06 F6 | 	mov	arg01, #0
0cab8     D8 86 B1 FD | 	call	#__system___getiolock_0508
0cabc     FD 12 02 F6 | 	mov	arg01, result1
0cac0     38 2D B1 FD | 	call	#__system___lockmem
0cac4     A7 14 02 FB | 	rdlong	arg02, fp
0cac8     00 12 06 F6 | 	mov	arg01, #0
0cacc     00 16 06 F6 | 	mov	arg03, #0
0cad0     0A 18 06 F6 | 	mov	arg04, #10
0cad4     5C 3A B1 FD | 	call	#__system___basic_print_integer
0cad8     00 12 06 F6 | 	mov	arg01, #0
0cadc     09 14 06 F6 | 	mov	arg02, #9
0cae0     00 16 06 F6 | 	mov	arg03, #0
0cae4     B0 39 B1 FD | 	call	#__system___basic_print_char
0cae8     04 4E 05 F1 | 	add	fp, #4
0caec     A7 14 02 FB | 	rdlong	arg02, fp
0caf0     04 4E 85 F1 | 	sub	fp, #4
0caf4     00 12 06 F6 | 	mov	arg01, #0
0caf8     00 16 06 F6 | 	mov	arg03, #0
0cafc     0A 18 06 F6 | 	mov	arg04, #10
0cb00     30 3A B1 FD | 	call	#__system___basic_print_integer
0cb04     00 12 06 F6 | 	mov	arg01, #0
0cb08     09 14 06 F6 | 	mov	arg02, #9
0cb0c     00 16 06 F6 | 	mov	arg03, #0
0cb10     84 39 B1 FD | 	call	#__system___basic_print_char
0cb14     0C 4E 05 F1 | 	add	fp, #12
0cb18     A7 14 02 FB | 	rdlong	arg02, fp
0cb1c     0C 4E 85 F1 | 	sub	fp, #12
0cb20     00 12 06 F6 | 	mov	arg01, #0
0cb24     00 16 06 F6 | 	mov	arg03, #0
0cb28     0A 18 06 F6 | 	mov	arg04, #10
0cb2c     04 3A B1 FD | 	call	#__system___basic_print_integer
0cb30     00 12 06 F6 | 	mov	arg01, #0
0cb34     09 14 06 F6 | 	mov	arg02, #9
0cb38     00 16 06 F6 | 	mov	arg03, #0
0cb3c     58 39 B1 FD | 	call	#__system___basic_print_char
0cb40     A7 14 02 FB | 	rdlong	arg02, fp
0cb44     04 4E 05 F1 | 	add	fp, #4
0cb48     A7 22 02 FB | 	rdlong	local03, fp
0cb4c     11 15 02 F1 | 	add	arg02, local03
0cb50     08 4E 05 F1 | 	add	fp, #8
0cb54     A7 22 02 FB | 	rdlong	local03, fp
0cb58     0C 4E 85 F1 | 	sub	fp, #12
0cb5c     11 15 02 F1 | 	add	arg02, local03
0cb60     00 12 06 F6 | 	mov	arg01, #0
0cb64     00 16 06 F6 | 	mov	arg03, #0
0cb68     0A 18 06 F6 | 	mov	arg04, #10
0cb6c     C4 39 B1 FD | 	call	#__system___basic_print_integer
0cb70     00 12 06 F6 | 	mov	arg01, #0
0cb74     0A 14 06 F6 | 	mov	arg02, #10
0cb78     00 16 06 F6 | 	mov	arg03, #0
0cb7c     18 39 B1 FD | 	call	#__system___basic_print_char
0cb80     00 12 06 F6 | 	mov	arg01, #0
0cb84     0C 86 B1 FD | 	call	#__system___getiolock_0508
0cb88     FD 00 68 FC | 	wrlong	#0, result1
0cb8c     F8 BF 23 FF 
0cb90     00 22 06 F6 | 	mov	local03, ##1199566848
0cb94     A7 12 02 FB | 	rdlong	arg01, fp
0cb98     09 13 52 F6 | 	abs	arg01, arg01 wc
0cb9c     1F 24 C6 C9 |  if_b	decod	local04, #31
0cba0     00 24 06 36 |  if_ae	mov	local04, #0
0cba4     98 53 B1 FD | 	call	#__system___float_fromuns
0cba8     12 FB 61 F5 | 	xor	result1, local04
0cbac     FD 14 02 F6 | 	mov	arg02, result1
0cbb0     11 13 02 F6 | 	mov	arg01, local03
0cbb4     90 59 B1 FD | 	call	#__system___float_div
0cbb8     54 4E 05 F1 | 	add	fp, #84
0cbbc     A7 FA 61 FC | 	wrlong	result1, fp
0cbc0     F8 BF 23 FF 
0cbc4     00 22 06 F6 | 	mov	local03, ##1199566848
0cbc8     24 4E 85 F1 | 	sub	fp, #36
0cbcc     A7 14 02 FB | 	rdlong	arg02, fp
0cbd0     30 4E 85 F1 | 	sub	fp, #48
0cbd4     F8 BF 23 FF 
0cbd8     00 12 06 F6 | 	mov	arg01, ##1199566848
0cbdc     64 57 B1 FD | 	call	#__system___float_mul
0cbe0     FD 14 02 F6 | 	mov	arg02, result1
0cbe4     11 13 02 F6 | 	mov	arg01, local03
0cbe8     1F 14 E6 F4 | 	bitnot	arg02, #31
0cbec     84 53 B1 FD | 	call	#__system___float_add
0cbf0     FD 22 02 F6 | 	mov	local03, result1
0cbf4     04 4E 05 F1 | 	add	fp, #4
0cbf8     A7 12 02 FB | 	rdlong	arg01, fp
0cbfc     04 4E 85 F1 | 	sub	fp, #4
0cc00     09 13 52 F6 | 	abs	arg01, arg01 wc
0cc04     1F 24 C6 C9 |  if_b	decod	local04, #31
0cc08     00 24 06 36 |  if_ae	mov	local04, #0
0cc0c     30 53 B1 FD | 	call	#__system___float_fromuns
0cc10     12 FB 61 F5 | 	xor	result1, local04
0cc14     FD 14 02 F6 | 	mov	arg02, result1
0cc18     11 13 02 F6 | 	mov	arg01, local03
0cc1c     28 59 B1 FD | 	call	#__system___float_div
0cc20     2C 4E 05 F1 | 	add	fp, #44
0cc24     A7 FA 61 FC | 	wrlong	result1, fp
0cc28     04 4E 05 F1 | 	add	fp, #4
0cc2c     A7 14 02 FB | 	rdlong	arg02, fp
0cc30     30 4E 85 F1 | 	sub	fp, #48
0cc34     F8 BF 23 FF 
0cc38     00 12 06 F6 | 	mov	arg01, ##1199566848
0cc3c     04 57 B1 FD | 	call	#__system___float_mul
0cc40     FD 22 02 F6 | 	mov	local03, result1
0cc44     0C 4E 05 F1 | 	add	fp, #12
0cc48     A7 12 02 FB | 	rdlong	arg01, fp
0cc4c     0C 4E 85 F1 | 	sub	fp, #12
0cc50     09 13 52 F6 | 	abs	arg01, arg01 wc
0cc54     1F 24 C6 C9 |  if_b	decod	local04, #31
0cc58     00 24 06 36 |  if_ae	mov	local04, #0
0cc5c     E0 52 B1 FD | 	call	#__system___float_fromuns
0cc60     12 FB 61 F5 | 	xor	result1, local04
0cc64     FD 14 02 F6 | 	mov	arg02, result1
0cc68     11 13 02 F6 | 	mov	arg01, local03
0cc6c     D8 58 B1 FD | 	call	#__system___float_div
0cc70     FD 22 02 F6 | 	mov	local03, result1
0cc74     58 4E 05 F1 | 	add	fp, #88
0cc78     A7 22 62 FC | 	wrlong	local03, fp
0cc7c     58 4E 85 F1 | 	sub	fp, #88
0cc80                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r : print da,dd,dr
0cc80     00 12 06 F6 | 	mov	arg01, #0
0cc84     0C 85 B1 FD | 	call	#__system___getiolock_0508
0cc88     FD 12 02 F6 | 	mov	arg01, result1
0cc8c     6C 2B B1 FD | 	call	#__system___lockmem
0cc90     54 4E 05 F1 | 	add	fp, #84
0cc94     A7 14 02 FB | 	rdlong	arg02, fp
0cc98     54 4E 85 F1 | 	sub	fp, #84
0cc9c     00 12 06 F6 | 	mov	arg01, #0
0cca0     00 16 06 F6 | 	mov	arg03, #0
0cca4     23 18 06 F6 | 	mov	arg04, #35
0cca8     B0 5C B1 FD | 	call	#__system___basic_print_float
0ccac     00 12 06 F6 | 	mov	arg01, #0
0ccb0     09 14 06 F6 | 	mov	arg02, #9
0ccb4     00 16 06 F6 | 	mov	arg03, #0
0ccb8     DC 37 B1 FD | 	call	#__system___basic_print_char
0ccbc     2C 4E 05 F1 | 	add	fp, #44
0ccc0     A7 14 02 FB | 	rdlong	arg02, fp
0ccc4     2C 4E 85 F1 | 	sub	fp, #44
0ccc8     00 12 06 F6 | 	mov	arg01, #0
0cccc     00 16 06 F6 | 	mov	arg03, #0
0ccd0     23 18 06 F6 | 	mov	arg04, #35
0ccd4     84 5C B1 FD | 	call	#__system___basic_print_float
0ccd8     00 12 06 F6 | 	mov	arg01, #0
0ccdc     09 14 06 F6 | 	mov	arg02, #9
0cce0     00 16 06 F6 | 	mov	arg03, #0
0cce4     B0 37 B1 FD | 	call	#__system___basic_print_char
0cce8     58 4E 05 F1 | 	add	fp, #88
0ccec     A7 14 02 FB | 	rdlong	arg02, fp
0ccf0     58 4E 85 F1 | 	sub	fp, #88
0ccf4     00 12 06 F6 | 	mov	arg01, #0
0ccf8     00 16 06 F6 | 	mov	arg03, #0
0ccfc     23 18 06 F6 | 	mov	arg04, #35
0cd00     58 5C B1 FD | 	call	#__system___basic_print_float
0cd04     00 12 06 F6 | 	mov	arg01, #0
0cd08     0A 14 06 F6 | 	mov	arg02, #10
0cd0c     00 16 06 F6 | 	mov	arg03, #0
0cd10     84 37 B1 FD | 	call	#__system___basic_print_char
0cd14     00 12 06 F6 | 	mov	arg01, #0
0cd18     78 84 B1 FD | 	call	#__system___getiolock_0508
0cd1c     FD 00 68 FC | 	wrlong	#0, result1
0cd20     20 4E 05 F1 | 	add	fp, #32
0cd24     A7 26 02 FB | 	rdlong	local05, fp
0cd28     20 4E 85 F1 | 	sub	fp, #32
0cd2c     01 26 66 F0 | 	shl	local05, #1
0cd30     59 00 00 FF 
0cd34     D4 E5 05 F1 | 	add	objptr, ##46036
0cd38     F2 26 02 F1 | 	add	local05, objptr
0cd3c     A7 28 02 FB | 	rdlong	local06, fp
0cd40     04 4E 05 F1 | 	add	fp, #4
0cd44     A7 22 02 FB | 	rdlong	local03, fp
0cd48     11 29 02 F1 | 	add	local06, local03
0cd4c     13 29 52 FC | 	wrword	local06, local05
0cd50     24 4E 05 F1 | 	add	fp, #36
0cd54     A7 00 68 FC | 	wrlong	#0, fp
0cd58                 | '   suspoints(channel)=a+d
0cd58                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
0cd58     14 4E 85 F1 | 	sub	fp, #20
0cd5c     A7 00 68 FC | 	wrlong	#0, fp
0cd60     14 4E 85 F1 | 	sub	fp, #20
0cd64     A7 2A 02 FB | 	rdlong	local07, fp
0cd68     59 00 00 FF 
0cd6c     D4 E5 85 F1 | 	sub	objptr, ##46036
0cd70                 | LR__1044
0cd70     14 4E 05 F1 | 	add	fp, #20
0cd74     A7 22 02 FB | 	rdlong	local03, fp
0cd78     14 4E 85 F1 | 	sub	fp, #20
0cd7c     15 23 52 F2 | 	cmps	local03, local07 wc
0cd80     80 00 90 3D |  if_ae	jmp	#LR__1045
0cd84     20 4E 05 F1 | 	add	fp, #32
0cd88     A7 28 02 FB | 	rdlong	local06, fp
0cd8c     09 28 66 F0 | 	shl	local06, #9
0cd90     0C 00 00 FF 
0cd94     D8 E4 05 F1 | 	add	objptr, ##6360
0cd98     F2 28 02 F1 | 	add	local06, objptr
0cd9c     0C 4E 85 F1 | 	sub	fp, #12
0cda0     A7 26 02 FB | 	rdlong	local05, fp
0cda4     01 26 66 F0 | 	shl	local05, #1
0cda8     14 27 02 F1 | 	add	local05, local06
0cdac     14 4E 05 F1 | 	add	fp, #20
0cdb0     A7 12 02 FB | 	rdlong	arg01, fp
0cdb4     28 4E 85 F1 | 	sub	fp, #40
0cdb8     0C 00 00 FF 
0cdbc     D8 E4 85 F1 | 	sub	objptr, ##6360
0cdc0     01 14 06 F6 | 	mov	arg02, #1
0cdc4     44 5A B1 FD | 	call	#__system___float_tointeger
0cdc8     13 FB 51 FC | 	wrword	result1, local05
0cdcc     28 4E 05 F1 | 	add	fp, #40
0cdd0     A7 12 02 FB | 	rdlong	arg01, fp
0cdd4     2C 4E 05 F1 | 	add	fp, #44
0cdd8     A7 14 02 FB | 	rdlong	arg02, fp
0cddc     54 4E 85 F1 | 	sub	fp, #84
0cde0     90 51 B1 FD | 	call	#__system___float_add
0cde4     28 4E 05 F1 | 	add	fp, #40
0cde8     A7 FA 61 FC | 	wrlong	result1, fp
0cdec     14 4E 85 F1 | 	sub	fp, #20
0cdf0     A7 20 02 FB | 	rdlong	local02, fp
0cdf4     01 20 06 F1 | 	add	local02, #1
0cdf8     A7 20 62 FC | 	wrlong	local02, fp
0cdfc     14 4E 85 F1 | 	sub	fp, #20
0ce00     6C FF 9F FD | 	jmp	#LR__1044
0ce04                 | LR__1045
0ce04                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
0ce04     A7 22 02 FB | 	rdlong	local03, fp
0ce08     14 4E 05 F1 | 	add	fp, #20
0ce0c     A7 22 62 FC | 	wrlong	local03, fp
0ce10     14 4E 85 F1 | 	sub	fp, #20
0ce14     A7 2C 02 FB | 	rdlong	local08, fp
0ce18     04 4E 05 F1 | 	add	fp, #4
0ce1c     A7 22 02 FB | 	rdlong	local03, fp
0ce20     04 4E 85 F1 | 	sub	fp, #4
0ce24     11 2D 02 F1 | 	add	local08, local03
0ce28                 | LR__1046
0ce28     14 4E 05 F1 | 	add	fp, #20
0ce2c     A7 22 02 FB | 	rdlong	local03, fp
0ce30     14 4E 85 F1 | 	sub	fp, #20
0ce34     16 23 52 F2 | 	cmps	local03, local08 wc
0ce38     A8 00 90 3D |  if_ae	jmp	#LR__1047
0ce3c     20 4E 05 F1 | 	add	fp, #32
0ce40     A7 2A 02 FB | 	rdlong	local07, fp
0ce44     09 2A 66 F0 | 	shl	local07, #9
0ce48     0C 00 00 FF 
0ce4c     D8 E4 05 F1 | 	add	objptr, ##6360
0ce50     F2 2A 02 F1 | 	add	local07, objptr
0ce54     0C 4E 85 F1 | 	sub	fp, #12
0ce58     A7 28 02 FB | 	rdlong	local06, fp
0ce5c     01 28 66 F0 | 	shl	local06, #1
0ce60     15 29 02 F1 | 	add	local06, local07
0ce64     14 4E 05 F1 | 	add	fp, #20
0ce68     A7 12 02 FB | 	rdlong	arg01, fp
0ce6c     28 4E 85 F1 | 	sub	fp, #40
0ce70     0C 00 00 FF 
0ce74     D8 E4 85 F1 | 	sub	objptr, ##6360
0ce78     01 14 06 F6 | 	mov	arg02, #1
0ce7c     8C 59 B1 FD | 	call	#__system___float_tointeger
0ce80     14 FB 51 FC | 	wrword	result1, local06
0ce84     28 4E 05 F1 | 	add	fp, #40
0ce88     A7 12 02 FB | 	rdlong	arg01, fp
0ce8c     04 4E 05 F1 | 	add	fp, #4
0ce90     A7 14 02 FB | 	rdlong	arg02, fp
0ce94     2C 4E 85 F1 | 	sub	fp, #44
0ce98     1F 14 E6 F4 | 	bitnot	arg02, #31
0ce9c     D4 50 B1 FD | 	call	#__system___float_add
0cea0     28 4E 05 F1 | 	add	fp, #40
0cea4     A7 FA 61 FC | 	wrlong	result1, fp
0cea8     28 4E 85 F1 | 	sub	fp, #40
0ceac     FD 12 02 F6 | 	mov	arg01, result1
0ceb0     00 14 06 F6 | 	mov	arg02, #0
0ceb4     01 16 06 F6 | 	mov	arg03, #1
0ceb8     BC 58 B1 FD | 	call	#__system___float_cmp
0cebc     00 FA 55 F2 | 	cmps	result1, #0 wc
0cec0     28 4E 05 C1 |  if_b	add	fp, #40
0cec4     A7 00 68 CC |  if_b	wrlong	#0, fp
0cec8     28 4E 85 C1 |  if_b	sub	fp, #40
0cecc     14 4E 05 F1 | 	add	fp, #20
0ced0     A7 20 02 FB | 	rdlong	local02, fp
0ced4     01 20 06 F1 | 	add	local02, #1
0ced8     A7 20 62 FC | 	wrlong	local02, fp
0cedc     14 4E 85 F1 | 	sub	fp, #20
0cee0     44 FF 9F FD | 	jmp	#LR__1046
0cee4                 | LR__1047
0cee4                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
0cee4     A7 22 02 FB | 	rdlong	local03, fp
0cee8     04 4E 05 F1 | 	add	fp, #4
0ceec     A7 2C 02 FB | 	rdlong	local08, fp
0cef0     16 23 02 F1 | 	add	local03, local08
0cef4     10 4E 05 F1 | 	add	fp, #16
0cef8     A7 22 62 FC | 	wrlong	local03, fp
0cefc     14 4E 85 F1 | 	sub	fp, #20
0cf00                 | LR__1048
0cf00     14 4E 05 F1 | 	add	fp, #20
0cf04     A7 26 02 FB | 	rdlong	local05, fp
0cf08     14 4E 85 F1 | 	sub	fp, #20
0cf0c     00 27 56 F2 | 	cmps	local05, #256 wc
0cf10     A8 00 90 3D |  if_ae	jmp	#LR__1049
0cf14     20 4E 05 F1 | 	add	fp, #32
0cf18     A7 2C 02 FB | 	rdlong	local08, fp
0cf1c     09 2C 66 F0 | 	shl	local08, #9
0cf20     0C 00 00 FF 
0cf24     D8 E4 05 F1 | 	add	objptr, ##6360
0cf28     F2 2C 02 F1 | 	add	local08, objptr
0cf2c     0C 4E 85 F1 | 	sub	fp, #12
0cf30     A7 2A 02 FB | 	rdlong	local07, fp
0cf34     01 2A 66 F0 | 	shl	local07, #1
0cf38     16 2B 02 F1 | 	add	local07, local08
0cf3c     14 4E 05 F1 | 	add	fp, #20
0cf40     A7 12 02 FB | 	rdlong	arg01, fp
0cf44     28 4E 85 F1 | 	sub	fp, #40
0cf48     0C 00 00 FF 
0cf4c     D8 E4 85 F1 | 	sub	objptr, ##6360
0cf50     01 14 06 F6 | 	mov	arg02, #1
0cf54     B4 58 B1 FD | 	call	#__system___float_tointeger
0cf58     15 FB 51 FC | 	wrword	result1, local07
0cf5c     28 4E 05 F1 | 	add	fp, #40
0cf60     A7 12 02 FB | 	rdlong	arg01, fp
0cf64     30 4E 05 F1 | 	add	fp, #48
0cf68     A7 14 02 FB | 	rdlong	arg02, fp
0cf6c     58 4E 85 F1 | 	sub	fp, #88
0cf70     1F 14 E6 F4 | 	bitnot	arg02, #31
0cf74     FC 4F B1 FD | 	call	#__system___float_add
0cf78     28 4E 05 F1 | 	add	fp, #40
0cf7c     A7 FA 61 FC | 	wrlong	result1, fp
0cf80     28 4E 85 F1 | 	sub	fp, #40
0cf84     FD 12 02 F6 | 	mov	arg01, result1
0cf88     00 14 06 F6 | 	mov	arg02, #0
0cf8c     01 16 06 F6 | 	mov	arg03, #1
0cf90     E4 57 B1 FD | 	call	#__system___float_cmp
0cf94     00 FA 55 F2 | 	cmps	result1, #0 wc
0cf98     28 4E 05 C1 |  if_b	add	fp, #40
0cf9c     A7 00 68 CC |  if_b	wrlong	#0, fp
0cfa0     28 4E 85 C1 |  if_b	sub	fp, #40
0cfa4     14 4E 05 F1 | 	add	fp, #20
0cfa8     A7 2C 02 FB | 	rdlong	local08, fp
0cfac     01 2C 06 F1 | 	add	local08, #1
0cfb0     A7 2C 62 FC | 	wrlong	local08, fp
0cfb4     14 4E 85 F1 | 	sub	fp, #20
0cfb8     44 FF 9F FD | 	jmp	#LR__1048
0cfbc                 | LR__1049
0cfbc     20 4E 05 F1 | 	add	fp, #32
0cfc0     A7 26 02 FB | 	rdlong	local05, fp
0cfc4     20 4E 85 F1 | 	sub	fp, #32
0cfc8     09 26 66 F0 | 	shl	local05, #9
0cfcc     0C 00 00 FF 
0cfd0     D8 E4 05 F1 | 	add	objptr, ##6360
0cfd4     F2 26 02 F1 | 	add	local05, objptr
0cfd8     FE 27 06 F1 | 	add	local05, #510
0cfdc     13 01 58 FC | 	wrword	#0, local05
0cfe0     0C 00 00 FF 
0cfe4     D8 E4 85 F1 | 	sub	objptr, ##6360
0cfe8                 | LR__1050
0cfe8     20 4E 05 F1 | 	add	fp, #32
0cfec     A7 26 02 FB | 	rdlong	local05, fp
0cff0     20 4E 85 F1 | 	sub	fp, #32
0cff4     09 26 66 F0 | 	shl	local05, #9
0cff8     0C 00 00 FF 
0cffc     D8 E4 05 F1 | 	add	objptr, ##6360
0d000     F2 26 02 F1 | 	add	local05, objptr
0d004     FE 27 06 F1 | 	add	local05, #510
0d008     13 01 58 FC | 	wrword	#0, local05
0d00c     0C 00 00 FF 
0d010     D8 E4 85 F1 | 	sub	objptr, ##6360
0d014                 | LR__1051
0d014     A7 F0 03 F6 | 	mov	ptra, fp
0d018     B2 00 A0 FD | 	call	#popregs_
0d01c                 | _do_defenv_ret
0d01c     2D 00 64 FD | 	ret
0d020                 | 
0d020                 | ' 
0d020                 | ' 
0d020                 | ' sub do_play
0d020                 | _do_play
0d020     06 4A 05 F6 | 	mov	COUNT_, #6
0d024     A8 00 A0 FD | 	call	#pushregs_
0d028     7C F0 07 F1 | 	add	ptra, #124
0d02c     68 4E 05 F1 | 	add	fp, #104
0d030     AB CB A1 FF 
0d034     A7 D6 6B FC | 	wrlong	##1133991915, fp
0d038                 | ' speed_coeff=815.6614449376854599406528189911*(95.0/256.0)
0d038                 | ' 
0d038                 | ' for i=0 to 8 : params(i)=-2.0 : next i
0d038     64 4E 85 F1 | 	sub	fp, #100
0d03c     A7 00 68 FC | 	wrlong	#0, fp
0d040     97 18 48 FB | 	callpa	#(@LR__1061-@LR__1060)>>2,fcache_load_ptr_
0d044                 | LR__1060
0d044     A7 16 02 FB | 	rdlong	arg03, fp
0d048     02 16 66 F0 | 	shl	arg03, #2
0d04c     34 4E 05 F1 | 	add	fp, #52
0d050     A7 16 02 F1 | 	add	arg03, fp
0d054     00 00 E0 FF 
0d058     0B 01 68 FC | 	wrlong	##-1073741824, arg03
0d05c     34 4E 85 F1 | 	sub	fp, #52
0d060     A7 1E 02 FB | 	rdlong	local01, fp
0d064     01 1E 06 F1 | 	add	local01, #1
0d068     A7 1E 62 FC | 	wrlong	local01, fp
0d06c     09 1E 56 F2 | 	cmps	local01, #9 wc
0d070     D0 FF 9F CD |  if_b	jmp	#LR__1060
0d074                 | LR__1061
0d074     04 4E 85 F1 | 	sub	fp, #4
0d078     4A 00 00 FF 
0d07c     B0 E4 05 F1 | 	add	objptr, ##38064
0d080     F2 20 02 FB | 	rdlong	local02, objptr
0d084     10 23 02 F6 | 	mov	local03, local02
0d088     01 22 66 F0 | 	shl	local03, #1
0d08c     10 23 02 F1 | 	add	local03, local02
0d090     02 22 66 F0 | 	shl	local03, #2
0d094     03 00 00 FF 
0d098     04 E4 85 F1 | 	sub	objptr, ##1540
0d09c     F2 22 02 F1 | 	add	local03, objptr
0d0a0     11 25 02 FB | 	rdlong	local04, local03
0d0a4     A7 24 62 FC | 	wrlong	local04, fp
0d0a8                 | ' 'params(0)=0: params(1)=440.0 : params(2)=16.0 : params(3)=0.0 : params(4)=0.0 : params(5)=1.0 : params(6)=0.0 : params(7)=0.0 : 
0d0a8                 | ' 'chn		freq		   vol		   wave#	   env#		   len		   delay	   pan		: sus 
0d0a8                 | ' numpar=compiledline(lineptr_e).result.uresult
0d0a8                 | ' for i=numpar to 1 step -1 
0d0a8     04 4E 05 F1 | 	add	fp, #4
0d0ac     A7 24 62 FC | 	wrlong	local04, fp
0d0b0     04 4E 85 F1 | 	sub	fp, #4
0d0b4     47 00 00 FF 
0d0b8     AC E4 85 F1 | 	sub	objptr, ##36524
0d0bc                 | LR__1062
0d0bc     7C DA BF FD | 	call	#_pop
0d0c0     5C 4E 05 F1 | 	add	fp, #92
0d0c4     A7 FA 61 FC | 	wrlong	result1, fp
0d0c8     04 4E 05 F1 | 	add	fp, #4
0d0cc     A7 FC 61 FC | 	wrlong	result2, fp
0d0d0     04 4E 05 F1 | 	add	fp, #4
0d0d4     A7 FE 61 FC | 	wrlong	result3, fp
0d0d8     60 4E 85 F1 | 	sub	fp, #96
0d0dc     A7 22 02 FB | 	rdlong	local03, fp
0d0e0     01 22 86 F1 | 	sub	local03, #1
0d0e4     02 22 66 F0 | 	shl	local03, #2
0d0e8     34 4E 05 F1 | 	add	fp, #52
0d0ec     A7 22 02 F1 | 	add	local03, fp
0d0f0     24 4E 05 F1 | 	add	fp, #36
0d0f4     A7 26 02 F6 | 	mov	local05, fp
0d0f8     13 13 02 F6 | 	mov	arg01, local05
0d0fc     5C 4E 85 F1 | 	sub	fp, #92
0d100     5C 6E B0 FD | 	call	#_converttofloat
0d104     11 FB 61 FC | 	wrlong	result1, local03
0d108     04 4E 05 F1 | 	add	fp, #4
0d10c     A7 1E 02 FB | 	rdlong	local01, fp
0d110     01 1E 86 F1 | 	sub	local01, #1
0d114     A7 1E 62 FC | 	wrlong	local01, fp
0d118     04 4E 85 F1 | 	sub	fp, #4
0d11c     01 1E 56 F2 | 	cmps	local01, #1 wc
0d120     98 FF 9F 3D |  if_ae	jmp	#LR__1062
0d124                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
0d124     38 4E 05 F1 | 	add	fp, #56
0d128     A7 12 02 FB | 	rdlong	arg01, fp
0d12c     38 4E 85 F1 | 	sub	fp, #56
0d130     00 14 06 F6 | 	mov	arg02, #0
0d134     01 16 06 F6 | 	mov	arg03, #1
0d138     3C 56 B1 FD | 	call	#__system___float_cmp
0d13c     00 FA 55 F2 | 	cmps	result1, #0 wc
0d140     0C 4E 05 C1 |  if_b	add	fp, #12
0d144     A7 00 68 CC |  if_b	wrlong	#0, fp
0d148     0C 4E 85 C1 |  if_b	sub	fp, #12
0d14c     2C 00 90 CD |  if_b	jmp	#LR__1063
0d150     38 4E 05 F1 | 	add	fp, #56
0d154     A7 12 02 FB | 	rdlong	arg01, fp
0d158     38 4E 85 F1 | 	sub	fp, #56
0d15c     01 14 06 F6 | 	mov	arg02, #1
0d160     A8 56 B1 FD | 	call	#__system___float_tointeger
0d164     FD 1E 52 F6 | 	abs	local01, result1 wc
0d168     07 1E 06 F5 | 	and	local01, #7
0d16c     0F 1F 82 F6 | 	negc	local01, local01
0d170     0C 4E 05 F1 | 	add	fp, #12
0d174     A7 1E 62 FC | 	wrlong	local01, fp
0d178     0C 4E 85 F1 | 	sub	fp, #12
0d17c                 | LR__1063
0d17c                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
0d17c     3C 4E 05 F1 | 	add	fp, #60
0d180     A7 12 02 FB | 	rdlong	arg01, fp
0d184     3C 4E 85 F1 | 	sub	fp, #60
0d188     00 14 06 F6 | 	mov	arg02, #0
0d18c     01 16 06 F6 | 	mov	arg03, #1
0d190     E4 55 B1 FD | 	call	#__system___float_cmp
0d194     00 FA 55 F2 | 	cmps	result1, #0 wc
0d198     40 00 90 3D |  if_ae	jmp	#LR__1064
0d19c     0C 4E 05 F1 | 	add	fp, #12
0d1a0     A7 20 02 FB | 	rdlong	local02, fp
0d1a4     10 23 02 F6 | 	mov	local03, local02
0d1a8     01 22 66 F0 | 	shl	local03, #1
0d1ac     10 23 02 F1 | 	add	local03, local02
0d1b0     03 22 66 F0 | 	shl	local03, #3
0d1b4     14 00 00 FF 
0d1b8     68 E5 05 F1 | 	add	objptr, ##10600
0d1bc     F2 22 02 F1 | 	add	local03, objptr
0d1c0     11 23 02 FB | 	rdlong	local03, local03
0d1c4     60 4E 05 F1 | 	add	fp, #96
0d1c8     A7 22 62 FC | 	wrlong	local03, fp
0d1cc     6C 4E 85 F1 | 	sub	fp, #108
0d1d0     14 00 00 FF 
0d1d4     68 E5 85 F1 | 	sub	objptr, ##10600
0d1d8     44 00 90 FD | 	jmp	#LR__1065
0d1dc                 | LR__1064
0d1dc     3C 4E 05 F1 | 	add	fp, #60
0d1e0     A7 24 02 FB | 	rdlong	local04, fp
0d1e4     30 4E 05 F1 | 	add	fp, #48
0d1e8     A7 24 62 FC | 	wrlong	local04, fp
0d1ec     60 4E 85 F1 | 	sub	fp, #96
0d1f0     A7 20 02 FB | 	rdlong	local02, fp
0d1f4     10 23 02 F6 | 	mov	local03, local02
0d1f8     01 22 66 F0 | 	shl	local03, #1
0d1fc     10 23 02 F1 | 	add	local03, local02
0d200     03 22 66 F0 | 	shl	local03, #3
0d204     14 00 00 FF 
0d208     68 E5 05 F1 | 	add	objptr, ##10600
0d20c     F2 22 02 F1 | 	add	local03, objptr
0d210     0C 4E 85 F1 | 	sub	fp, #12
0d214     11 25 62 FC | 	wrlong	local04, local03
0d218     14 00 00 FF 
0d21c     68 E5 85 F1 | 	sub	objptr, ##10600
0d220                 | LR__1065
0d220                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
0d220     44 4E 05 F1 | 	add	fp, #68
0d224     A7 12 02 FB | 	rdlong	arg01, fp
0d228     44 4E 85 F1 | 	sub	fp, #68
0d22c     00 14 06 F6 | 	mov	arg02, #0
0d230     01 16 06 F6 | 	mov	arg03, #1
0d234     40 55 B1 FD | 	call	#__system___float_cmp
0d238     00 FA 55 F2 | 	cmps	result1, #0 wc
0d23c     24 00 90 CD |  if_b	jmp	#LR__1066
0d240     44 4E 05 F1 | 	add	fp, #68
0d244     A7 12 02 FB | 	rdlong	arg01, fp
0d248     44 4E 85 F1 | 	sub	fp, #68
0d24c     89 C1 20 FF 
0d250     6F 14 06 F6 | 	mov	arg02, ##1099108975
0d254     01 16 66 F6 | 	neg	arg03, #1
0d258     1C 55 B1 FD | 	call	#__system___float_cmp
0d25c     01 FA 55 F2 | 	cmps	result1, #1 wc
0d260     44 00 90 CD |  if_b	jmp	#LR__1067
0d264                 | LR__1066
0d264     0C 4E 05 F1 | 	add	fp, #12
0d268     A7 20 02 FB | 	rdlong	local02, fp
0d26c     10 23 02 F6 | 	mov	local03, local02
0d270     01 22 66 F0 | 	shl	local03, #1
0d274     10 23 02 F1 | 	add	local03, local02
0d278     03 22 66 F0 | 	shl	local03, #3
0d27c     14 00 00 FF 
0d280     68 E5 05 F1 | 	add	objptr, ##10600
0d284     F2 22 02 F1 | 	add	local03, objptr
0d288     0C 22 06 F1 | 	add	local03, #12
0d28c     11 23 02 FB | 	rdlong	local03, local03
0d290     68 4E 05 F1 | 	add	fp, #104
0d294     A7 22 62 FC | 	wrlong	local03, fp
0d298     74 4E 85 F1 | 	sub	fp, #116
0d29c     14 00 00 FF 
0d2a0     68 E5 85 F1 | 	sub	objptr, ##10600
0d2a4     48 00 90 FD | 	jmp	#LR__1068
0d2a8                 | LR__1067
0d2a8     44 4E 05 F1 | 	add	fp, #68
0d2ac     A7 24 02 FB | 	rdlong	local04, fp
0d2b0     30 4E 05 F1 | 	add	fp, #48
0d2b4     A7 24 62 FC | 	wrlong	local04, fp
0d2b8     68 4E 85 F1 | 	sub	fp, #104
0d2bc     A7 20 02 FB | 	rdlong	local02, fp
0d2c0     10 23 02 F6 | 	mov	local03, local02
0d2c4     01 22 66 F0 | 	shl	local03, #1
0d2c8     10 23 02 F1 | 	add	local03, local02
0d2cc     03 22 66 F0 | 	shl	local03, #3
0d2d0     14 00 00 FF 
0d2d4     68 E5 05 F1 | 	add	objptr, ##10600
0d2d8     F2 22 02 F1 | 	add	local03, objptr
0d2dc     0C 4E 85 F1 | 	sub	fp, #12
0d2e0     0C 22 06 F1 | 	add	local03, #12
0d2e4     11 25 62 FC | 	wrlong	local04, local03
0d2e8     14 00 00 FF 
0d2ec     68 E5 85 F1 | 	sub	objptr, ##10600
0d2f0                 | LR__1068
0d2f0                 | ' if params(4)<0 orelse params(4)>8.0 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
0d2f0     48 4E 05 F1 | 	add	fp, #72
0d2f4     A7 12 02 FB | 	rdlong	arg01, fp
0d2f8     48 4E 85 F1 | 	sub	fp, #72
0d2fc     00 14 06 F6 | 	mov	arg02, #0
0d300     01 16 06 F6 | 	mov	arg03, #1
0d304     70 54 B1 FD | 	call	#__system___float_cmp
0d308     00 FA 55 F2 | 	cmps	result1, #0 wc
0d30c     24 00 90 CD |  if_b	jmp	#LR__1069
0d310     48 4E 05 F1 | 	add	fp, #72
0d314     A7 12 02 FB | 	rdlong	arg01, fp
0d318     48 4E 85 F1 | 	sub	fp, #72
0d31c     00 80 20 FF 
0d320     00 14 06 F6 | 	mov	arg02, ##1090519040
0d324     01 16 66 F6 | 	neg	arg03, #1
0d328     4C 54 B1 FD | 	call	#__system___float_cmp
0d32c     01 FA 55 F2 | 	cmps	result1, #1 wc
0d330     48 00 90 CD |  if_b	jmp	#LR__1070
0d334                 | LR__1069
0d334     0C 4E 05 F1 | 	add	fp, #12
0d338     A7 22 02 FB | 	rdlong	local03, fp
0d33c     11 27 02 F6 | 	mov	local05, local03
0d340     01 26 66 F0 | 	shl	local05, #1
0d344     11 27 02 F1 | 	add	local05, local03
0d348     03 26 66 F0 | 	shl	local05, #3
0d34c     14 00 00 FF 
0d350     68 E5 05 F1 | 	add	objptr, ##10600
0d354     F2 26 02 F1 | 	add	local05, objptr
0d358     04 26 06 F1 | 	add	local05, #4
0d35c     13 27 C2 FA | 	rdbyte	local05, local05
0d360     13 25 E2 F8 | 	getbyte	local04, local05, #0
0d364     14 4E 05 F1 | 	add	fp, #20
0d368     A7 24 62 FC | 	wrlong	local04, fp
0d36c     20 4E 85 F1 | 	sub	fp, #32
0d370     14 00 00 FF 
0d374     68 E5 85 F1 | 	sub	objptr, ##10600
0d378     54 00 90 FD | 	jmp	#LR__1071
0d37c                 | LR__1070
0d37c     48 4E 05 F1 | 	add	fp, #72
0d380     A7 12 02 FB | 	rdlong	arg01, fp
0d384     48 4E 85 F1 | 	sub	fp, #72
0d388     01 14 06 F6 | 	mov	arg02, #1
0d38c     7C 54 B1 FD | 	call	#__system___float_tointeger
0d390     20 4E 05 F1 | 	add	fp, #32
0d394     A7 FA 61 FC | 	wrlong	result1, fp
0d398     14 4E 85 F1 | 	sub	fp, #20
0d39c     A7 20 02 FB | 	rdlong	local02, fp
0d3a0     10 23 02 F6 | 	mov	local03, local02
0d3a4     01 22 66 F0 | 	shl	local03, #1
0d3a8     10 23 02 F1 | 	add	local03, local02
0d3ac     03 22 66 F0 | 	shl	local03, #3
0d3b0     14 00 00 FF 
0d3b4     68 E5 05 F1 | 	add	objptr, ##10600
0d3b8     F2 22 02 F1 | 	add	local03, objptr
0d3bc     0C 4E 85 F1 | 	sub	fp, #12
0d3c0     04 22 06 F1 | 	add	local03, #4
0d3c4     11 FB 41 FC | 	wrbyte	result1, local03
0d3c8     14 00 00 FF 
0d3cc     68 E5 85 F1 | 	sub	objptr, ##10600
0d3d0                 | LR__1071
0d3d0                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
0d3d0     4C 4E 05 F1 | 	add	fp, #76
0d3d4     A7 12 02 FB | 	rdlong	arg01, fp
0d3d8     4C 4E 85 F1 | 	sub	fp, #76
0d3dc     00 14 06 F6 | 	mov	arg02, #0
0d3e0     01 16 06 F6 | 	mov	arg03, #1
0d3e4     90 53 B1 FD | 	call	#__system___float_cmp
0d3e8     00 FA 55 F2 | 	cmps	result1, #0 wc
0d3ec     24 00 90 CD |  if_b	jmp	#LR__1072
0d3f0     4C 4E 05 F1 | 	add	fp, #76
0d3f4     A7 12 02 FB | 	rdlong	arg01, fp
0d3f8     4C 4E 85 F1 | 	sub	fp, #76
0d3fc     00 80 20 FF 
0d400     00 14 06 F6 | 	mov	arg02, ##1090519040
0d404     01 16 66 F6 | 	neg	arg03, #1
0d408     6C 53 B1 FD | 	call	#__system___float_cmp
0d40c     01 FA 55 F2 | 	cmps	result1, #1 wc
0d410     48 00 90 CD |  if_b	jmp	#LR__1073
0d414                 | LR__1072
0d414     0C 4E 05 F1 | 	add	fp, #12
0d418     A7 22 02 FB | 	rdlong	local03, fp
0d41c     11 27 02 F6 | 	mov	local05, local03
0d420     01 26 66 F0 | 	shl	local05, #1
0d424     11 27 02 F1 | 	add	local05, local03
0d428     03 26 66 F0 | 	shl	local05, #3
0d42c     14 00 00 FF 
0d430     68 E5 05 F1 | 	add	objptr, ##10600
0d434     F2 26 02 F1 | 	add	local05, objptr
0d438     05 26 06 F1 | 	add	local05, #5
0d43c     13 27 C2 FA | 	rdbyte	local05, local05
0d440     13 25 E2 F8 | 	getbyte	local04, local05, #0
0d444     18 4E 05 F1 | 	add	fp, #24
0d448     A7 24 62 FC | 	wrlong	local04, fp
0d44c     24 4E 85 F1 | 	sub	fp, #36
0d450     14 00 00 FF 
0d454     68 E5 85 F1 | 	sub	objptr, ##10600
0d458     54 00 90 FD | 	jmp	#LR__1074
0d45c                 | LR__1073
0d45c     4C 4E 05 F1 | 	add	fp, #76
0d460     A7 12 02 FB | 	rdlong	arg01, fp
0d464     4C 4E 85 F1 | 	sub	fp, #76
0d468     01 14 06 F6 | 	mov	arg02, #1
0d46c     9C 53 B1 FD | 	call	#__system___float_tointeger
0d470     24 4E 05 F1 | 	add	fp, #36
0d474     A7 FA 61 FC | 	wrlong	result1, fp
0d478     18 4E 85 F1 | 	sub	fp, #24
0d47c     A7 20 02 FB | 	rdlong	local02, fp
0d480     10 23 02 F6 | 	mov	local03, local02
0d484     01 22 66 F0 | 	shl	local03, #1
0d488     10 23 02 F1 | 	add	local03, local02
0d48c     03 22 66 F0 | 	shl	local03, #3
0d490     14 00 00 FF 
0d494     68 E5 05 F1 | 	add	objptr, ##10600
0d498     F2 22 02 F1 | 	add	local03, objptr
0d49c     0C 4E 85 F1 | 	sub	fp, #12
0d4a0     05 22 06 F1 | 	add	local03, #5
0d4a4     11 FB 41 FC | 	wrbyte	result1, local03
0d4a8     14 00 00 FF 
0d4ac     68 E5 85 F1 | 	sub	objptr, ##10600
0d4b0                 | LR__1074
0d4b0                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
0d4b0     50 4E 05 F1 | 	add	fp, #80
0d4b4     A7 12 02 FB | 	rdlong	arg01, fp
0d4b8     50 4E 85 F1 | 	sub	fp, #80
0d4bc     00 14 06 F6 | 	mov	arg02, #0
0d4c0     01 16 06 F6 | 	mov	arg03, #1
0d4c4     B0 52 B1 FD | 	call	#__system___float_cmp
0d4c8     00 FA 55 F2 | 	cmps	result1, #0 wc
0d4cc     24 00 90 CD |  if_b	jmp	#LR__1075
0d4d0     50 4E 05 F1 | 	add	fp, #80
0d4d4     A7 12 02 FB | 	rdlong	arg01, fp
0d4d8     50 4E 85 F1 | 	sub	fp, #80
0d4dc     00 3D 22 FF 
0d4e0     00 14 06 F6 | 	mov	arg02, ##1148846080
0d4e4     01 16 66 F6 | 	neg	arg03, #1
0d4e8     8C 52 B1 FD | 	call	#__system___float_cmp
0d4ec     01 FA 55 F2 | 	cmps	result1, #1 wc
0d4f0     44 00 90 CD |  if_b	jmp	#LR__1076
0d4f4                 | LR__1075
0d4f4     0C 4E 05 F1 | 	add	fp, #12
0d4f8     A7 20 02 FB | 	rdlong	local02, fp
0d4fc     10 23 02 F6 | 	mov	local03, local02
0d500     01 22 66 F0 | 	shl	local03, #1
0d504     10 23 02 F1 | 	add	local03, local02
0d508     03 22 66 F0 | 	shl	local03, #3
0d50c     14 00 00 FF 
0d510     68 E5 05 F1 | 	add	objptr, ##10600
0d514     F2 22 02 F1 | 	add	local03, objptr
0d518     08 22 06 F1 | 	add	local03, #8
0d51c     11 25 02 FB | 	rdlong	local04, local03
0d520     6C 4E 05 F1 | 	add	fp, #108
0d524     A7 24 62 FC | 	wrlong	local04, fp
0d528     78 4E 85 F1 | 	sub	fp, #120
0d52c     14 00 00 FF 
0d530     68 E5 85 F1 | 	sub	objptr, ##10600
0d534     48 00 90 FD | 	jmp	#LR__1077
0d538                 | LR__1076
0d538     50 4E 05 F1 | 	add	fp, #80
0d53c     A7 24 02 FB | 	rdlong	local04, fp
0d540     28 4E 05 F1 | 	add	fp, #40
0d544     A7 24 62 FC | 	wrlong	local04, fp
0d548     6C 4E 85 F1 | 	sub	fp, #108
0d54c     A7 20 02 FB | 	rdlong	local02, fp
0d550     10 23 02 F6 | 	mov	local03, local02
0d554     01 22 66 F0 | 	shl	local03, #1
0d558     10 23 02 F1 | 	add	local03, local02
0d55c     03 22 66 F0 | 	shl	local03, #3
0d560     14 00 00 FF 
0d564     68 E5 05 F1 | 	add	objptr, ##10600
0d568     F2 22 02 F1 | 	add	local03, objptr
0d56c     0C 4E 85 F1 | 	sub	fp, #12
0d570     08 22 06 F1 | 	add	local03, #8
0d574     11 25 62 FC | 	wrlong	local04, local03
0d578     14 00 00 FF 
0d57c     68 E5 85 F1 | 	sub	objptr, ##10600
0d580                 | LR__1077
0d580                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
0d580     40 4E 05 F1 | 	add	fp, #64
0d584     A7 12 02 FB | 	rdlong	arg01, fp
0d588     40 4E 85 F1 | 	sub	fp, #64
0d58c     00 14 06 F6 | 	mov	arg02, #0
0d590     01 16 06 F6 | 	mov	arg03, #1
0d594     E0 51 B1 FD | 	call	#__system___float_cmp
0d598     00 FA 55 F2 | 	cmps	result1, #0 wc
0d59c     24 00 90 CD |  if_b	jmp	#LR__1078
0d5a0     40 4E 05 F1 | 	add	fp, #64
0d5a4     A7 12 02 FB | 	rdlong	arg01, fp
0d5a8     40 4E 85 F1 | 	sub	fp, #64
0d5ac     20 0E 23 FF 
0d5b0     00 14 06 F6 | 	mov	arg02, ##1176256512
0d5b4     01 16 66 F6 | 	neg	arg03, #1
0d5b8     BC 51 B1 FD | 	call	#__system___float_cmp
0d5bc     01 FA 55 F2 | 	cmps	result1, #1 wc
0d5c0     44 00 90 CD |  if_b	jmp	#LR__1079
0d5c4                 | LR__1078
0d5c4     0C 4E 05 F1 | 	add	fp, #12
0d5c8     A7 22 02 FB | 	rdlong	local03, fp
0d5cc     11 25 02 F6 | 	mov	local04, local03
0d5d0     01 24 66 F0 | 	shl	local04, #1
0d5d4     11 25 02 F1 | 	add	local04, local03
0d5d8     03 24 66 F0 | 	shl	local04, #3
0d5dc     14 00 00 FF 
0d5e0     68 E5 05 F1 | 	add	objptr, ##10600
0d5e4     F2 24 02 F1 | 	add	local04, objptr
0d5e8     06 24 06 F1 | 	add	local04, #6
0d5ec     12 25 E2 FA | 	rdword	local04, local04
0d5f0     1C 4E 05 F1 | 	add	fp, #28
0d5f4     A7 24 62 FC | 	wrlong	local04, fp
0d5f8     28 4E 85 F1 | 	sub	fp, #40
0d5fc     14 00 00 FF 
0d600     68 E5 85 F1 | 	sub	objptr, ##10600
0d604     54 00 90 FD | 	jmp	#LR__1080
0d608                 | LR__1079
0d608     40 4E 05 F1 | 	add	fp, #64
0d60c     A7 12 02 FB | 	rdlong	arg01, fp
0d610     40 4E 85 F1 | 	sub	fp, #64
0d614     01 14 06 F6 | 	mov	arg02, #1
0d618     F0 51 B1 FD | 	call	#__system___float_tointeger
0d61c     28 4E 05 F1 | 	add	fp, #40
0d620     A7 FA 61 FC | 	wrlong	result1, fp
0d624     1C 4E 85 F1 | 	sub	fp, #28
0d628     A7 20 02 FB | 	rdlong	local02, fp
0d62c     10 23 02 F6 | 	mov	local03, local02
0d630     01 22 66 F0 | 	shl	local03, #1
0d634     10 23 02 F1 | 	add	local03, local02
0d638     03 22 66 F0 | 	shl	local03, #3
0d63c     14 00 00 FF 
0d640     68 E5 05 F1 | 	add	objptr, ##10600
0d644     F2 22 02 F1 | 	add	local03, objptr
0d648     0C 4E 85 F1 | 	sub	fp, #12
0d64c     06 22 06 F1 | 	add	local03, #6
0d650     11 FB 51 FC | 	wrword	result1, local03
0d654     14 00 00 FF 
0d658     68 E5 85 F1 | 	sub	objptr, ##10600
0d65c                 | LR__1080
0d65c                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
0d65c     54 4E 05 F1 | 	add	fp, #84
0d660     A7 12 02 FB | 	rdlong	arg01, fp
0d664     54 4E 85 F1 | 	sub	fp, #84
0d668     00 C0 5F FF 
0d66c     00 14 06 F6 | 	mov	arg02, ##-1082130432
0d670     01 16 06 F6 | 	mov	arg03, #1
0d674     00 51 B1 FD | 	call	#__system___float_cmp
0d678     00 FA 55 F2 | 	cmps	result1, #0 wc
0d67c     24 00 90 CD |  if_b	jmp	#LR__1081
0d680     54 4E 05 F1 | 	add	fp, #84
0d684     A7 12 02 FB | 	rdlong	arg01, fp
0d688     54 4E 85 F1 | 	sub	fp, #84
0d68c     00 C0 1F FF 
0d690     00 14 06 F6 | 	mov	arg02, ##1065353216
0d694     01 16 66 F6 | 	neg	arg03, #1
0d698     DC 50 B1 FD | 	call	#__system___float_cmp
0d69c     01 FA 55 F2 | 	cmps	result1, #1 wc
0d6a0     44 00 90 CD |  if_b	jmp	#LR__1082
0d6a4                 | LR__1081
0d6a4     0C 4E 05 F1 | 	add	fp, #12
0d6a8     A7 20 02 FB | 	rdlong	local02, fp
0d6ac     10 23 02 F6 | 	mov	local03, local02
0d6b0     01 22 66 F0 | 	shl	local03, #1
0d6b4     10 23 02 F1 | 	add	local03, local02
0d6b8     03 22 66 F0 | 	shl	local03, #3
0d6bc     14 00 00 FF 
0d6c0     68 E5 05 F1 | 	add	objptr, ##10600
0d6c4     F2 22 02 F1 | 	add	local03, objptr
0d6c8     10 22 06 F1 | 	add	local03, #16
0d6cc     11 25 02 FB | 	rdlong	local04, local03
0d6d0     64 4E 05 F1 | 	add	fp, #100
0d6d4     A7 24 62 FC | 	wrlong	local04, fp
0d6d8     70 4E 85 F1 | 	sub	fp, #112
0d6dc     14 00 00 FF 
0d6e0     68 E5 85 F1 | 	sub	objptr, ##10600
0d6e4     48 00 90 FD | 	jmp	#LR__1083
0d6e8                 | LR__1082
0d6e8     54 4E 05 F1 | 	add	fp, #84
0d6ec     A7 26 02 FB | 	rdlong	local05, fp
0d6f0     1C 4E 05 F1 | 	add	fp, #28
0d6f4     A7 26 62 FC | 	wrlong	local05, fp
0d6f8     64 4E 85 F1 | 	sub	fp, #100
0d6fc     A7 20 02 FB | 	rdlong	local02, fp
0d700     10 23 02 F6 | 	mov	local03, local02
0d704     01 22 66 F0 | 	shl	local03, #1
0d708     10 23 02 F1 | 	add	local03, local02
0d70c     03 22 66 F0 | 	shl	local03, #3
0d710     14 00 00 FF 
0d714     68 E5 05 F1 | 	add	objptr, ##10600
0d718     F2 22 02 F1 | 	add	local03, objptr
0d71c     0C 4E 85 F1 | 	sub	fp, #12
0d720     10 22 06 F1 | 	add	local03, #16
0d724     11 27 62 FC | 	wrlong	local05, local03
0d728     14 00 00 FF 
0d72c     68 E5 85 F1 | 	sub	objptr, ##10600
0d730                 | LR__1083
0d730                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
0d730     58 4E 05 F1 | 	add	fp, #88
0d734     A7 12 02 FB | 	rdlong	arg01, fp
0d738     58 4E 85 F1 | 	sub	fp, #88
0d73c     00 14 06 F6 | 	mov	arg02, #0
0d740     01 16 06 F6 | 	mov	arg03, #1
0d744     30 50 B1 FD | 	call	#__system___float_cmp
0d748     00 FA 55 F2 | 	cmps	result1, #0 wc
0d74c     24 00 90 CD |  if_b	jmp	#LR__1084
0d750     58 4E 05 F1 | 	add	fp, #88
0d754     A7 12 02 FB | 	rdlong	arg01, fp
0d758     58 4E 85 F1 | 	sub	fp, #88
0d75c     80 BF 21 FF 
0d760     00 14 06 F6 | 	mov	arg02, ##1132396544
0d764     01 16 66 F6 | 	neg	arg03, #1
0d768     0C 50 B1 FD | 	call	#__system___float_cmp
0d76c     01 FA 55 F2 | 	cmps	result1, #1 wc
0d770     44 00 90 CD |  if_b	jmp	#LR__1085
0d774                 | LR__1084
0d774     0C 4E 05 F1 | 	add	fp, #12
0d778     A7 22 02 FB | 	rdlong	local03, fp
0d77c     11 27 02 F6 | 	mov	local05, local03
0d780     01 26 66 F0 | 	shl	local05, #1
0d784     11 27 02 F1 | 	add	local05, local03
0d788     03 26 66 F0 | 	shl	local05, #3
0d78c     14 00 00 FF 
0d790     68 E5 05 F1 | 	add	objptr, ##10600
0d794     F2 26 02 F1 | 	add	local05, objptr
0d798     14 26 06 F1 | 	add	local05, #20
0d79c     13 25 E2 FA | 	rdword	local04, local05
0d7a0     20 4E 05 F1 | 	add	fp, #32
0d7a4     A7 24 62 FC | 	wrlong	local04, fp
0d7a8     2C 4E 85 F1 | 	sub	fp, #44
0d7ac     14 00 00 FF 
0d7b0     68 E5 85 F1 | 	sub	objptr, ##10600
0d7b4     54 00 90 FD | 	jmp	#LR__1086
0d7b8                 | LR__1085
0d7b8     58 4E 05 F1 | 	add	fp, #88
0d7bc     A7 12 02 FB | 	rdlong	arg01, fp
0d7c0     58 4E 85 F1 | 	sub	fp, #88
0d7c4     01 14 06 F6 | 	mov	arg02, #1
0d7c8     40 50 B1 FD | 	call	#__system___float_tointeger
0d7cc     2C 4E 05 F1 | 	add	fp, #44
0d7d0     A7 FA 61 FC | 	wrlong	result1, fp
0d7d4     20 4E 85 F1 | 	sub	fp, #32
0d7d8     A7 20 02 FB | 	rdlong	local02, fp
0d7dc     10 23 02 F6 | 	mov	local03, local02
0d7e0     01 22 66 F0 | 	shl	local03, #1
0d7e4     10 23 02 F1 | 	add	local03, local02
0d7e8     03 22 66 F0 | 	shl	local03, #3
0d7ec     14 00 00 FF 
0d7f0     68 E5 05 F1 | 	add	objptr, ##10600
0d7f4     F2 22 02 F1 | 	add	local03, objptr
0d7f8     0C 4E 85 F1 | 	sub	fp, #12
0d7fc     14 22 06 F1 | 	add	local03, #20
0d800     11 FB 51 FC | 	wrword	result1, local03
0d804     14 00 00 FF 
0d808     68 E5 85 F1 | 	sub	objptr, ##10600
0d80c                 | LR__1086
0d80c     6C 4E 05 F1 | 	add	fp, #108
0d810     A7 14 02 FB | 	rdlong	arg02, fp
0d814     6C 4E 85 F1 | 	sub	fp, #108
0d818     FC 16 20 FF 
0d81c     54 12 06 F6 | 	mov	arg01, ##1076754516
0d820     CC 5A B1 FD | 	call	#__system____builtin_logbase
0d824     FD 24 02 F6 | 	mov	local04, result1
0d828     1E 14 C6 F9 | 	decod	arg02, #30
0d82c     FC 16 20 FF 
0d830     54 12 06 F6 | 	mov	arg01, ##1076754516
0d834     B8 5A B1 FD | 	call	#__system____builtin_logbase
0d838     FD 14 02 F6 | 	mov	arg02, result1
0d83c     12 13 02 F6 | 	mov	arg01, local04
0d840     04 4D B1 FD | 	call	#__system___float_div
0d844     FD 12 02 F6 | 	mov	arg01, result1
0d848     00 14 06 F6 | 	mov	arg02, #0
0d84c     BC 4F B1 FD | 	call	#__system___float_tointeger
0d850     30 4E 05 F1 | 	add	fp, #48
0d854     A7 FA 61 FC | 	wrlong	result1, fp
0d858     1E 24 C6 F9 | 	decod	local04, #30
0d85c     FD 12 02 F6 | 	mov	arg01, result1
0d860     30 4E 85 F1 | 	sub	fp, #48
0d864     05 12 06 F1 | 	add	arg01, #5
0d868     09 13 52 F6 | 	abs	arg01, arg01 wc
0d86c     1F 28 C6 C9 |  if_b	decod	local06, #31
0d870     00 28 06 36 |  if_ae	mov	local06, #0
0d874     C8 46 B1 FD | 	call	#__system___float_fromuns
0d878     14 FB 61 F5 | 	xor	result1, local06
0d87c     FD 14 02 F6 | 	mov	arg02, result1
0d880     12 13 02 F6 | 	mov	arg01, local04
0d884     A0 59 B1 FD | 	call	#__system____builtin_powf
0d888     FD 12 02 F6 | 	mov	arg01, result1
0d88c     01 14 06 F6 | 	mov	arg02, #1
0d890     78 4F B1 FD | 	call	#__system___float_tointeger
0d894     10 4E 05 F1 | 	add	fp, #16
0d898     A7 FA 61 FC | 	wrlong	result1, fp
0d89c                 | ' skip=round(2^(lfreq+5))
0d89c                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0d89c     10 4E 85 F1 | 	sub	fp, #16
0d8a0     40 00 00 FF 
0d8a4     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0d8a8     30 00 90 CD |  if_b	jmp	#LR__1087
0d8ac     10 4E 05 F1 | 	add	fp, #16
0d8b0     A7 1E 02 FB | 	rdlong	local01, fp
0d8b4     0F 25 52 F6 | 	abs	local04, local01 wc
0d8b8     0F 24 46 F0 | 	shr	local04, #15
0d8bc     12 25 82 F6 | 	negc	local04, local04
0d8c0     0C 4E 85 F1 | 	sub	fp, #12
0d8c4     A7 24 62 FC | 	wrlong	local04, fp
0d8c8     0C 4E 05 F1 | 	add	fp, #12
0d8cc     40 00 80 FF 
0d8d0     A7 00 68 FC | 	wrlong	##32768, fp
0d8d4     10 4E 85 F1 | 	sub	fp, #16
0d8d8     0C 00 90 FD | 	jmp	#LR__1088
0d8dc                 | LR__1087
0d8dc     04 4E 05 F1 | 	add	fp, #4
0d8e0     A7 02 68 FC | 	wrlong	#1, fp
0d8e4     04 4E 85 F1 | 	sub	fp, #4
0d8e8                 | LR__1088
0d8e8     6C 4E 05 F1 | 	add	fp, #108
0d8ec     A7 14 02 FB | 	rdlong	arg02, fp
0d8f0     6C 4E 85 F1 | 	sub	fp, #108
0d8f4     3E 2C 25 FF 
0d8f8     3C 12 06 F6 | 	mov	arg01, ##1247312956
0d8fc     48 4C B1 FD | 	call	#__system___float_div
0d900     FD 24 02 F6 | 	mov	local04, result1
0d904     04 4E 05 F1 | 	add	fp, #4
0d908     A7 12 02 FB | 	rdlong	arg01, fp
0d90c     04 4E 85 F1 | 	sub	fp, #4
0d910     09 13 52 F6 | 	abs	arg01, arg01 wc
0d914     1F 28 C6 C9 |  if_b	decod	local06, #31
0d918     00 28 06 36 |  if_ae	mov	local06, #0
0d91c     20 46 B1 FD | 	call	#__system___float_fromuns
0d920     14 FB 61 F5 | 	xor	result1, local06
0d924     FD 1E 02 F6 | 	mov	local01, result1
0d928     1E 20 C6 F9 | 	decod	local02, #30
0d92c     0D 12 06 F6 | 	mov	arg01, #13
0d930     30 4E 05 F1 | 	add	fp, #48
0d934     A7 26 02 FB | 	rdlong	local05, fp
0d938     30 4E 85 F1 | 	sub	fp, #48
0d93c     13 13 82 F1 | 	sub	arg01, local05
0d940     09 13 52 F6 | 	abs	arg01, arg01 wc
0d944     1F 28 C6 C9 |  if_b	decod	local06, #31
0d948     00 28 06 36 |  if_ae	mov	local06, #0
0d94c     F0 45 B1 FD | 	call	#__system___float_fromuns
0d950     14 FB 61 F5 | 	xor	result1, local06
0d954     FD 14 02 F6 | 	mov	arg02, result1
0d958     10 13 02 F6 | 	mov	arg01, local02
0d95c     C8 58 B1 FD | 	call	#__system____builtin_powf
0d960     FD 14 02 F6 | 	mov	arg02, result1
0d964     0F 13 02 F6 | 	mov	arg01, local01
0d968     D8 49 B1 FD | 	call	#__system___float_mul
0d96c     FD 14 02 F6 | 	mov	arg02, result1
0d970     12 13 02 F6 | 	mov	arg01, local04
0d974     D0 4B B1 FD | 	call	#__system___float_div
0d978     FD 12 02 F6 | 	mov	arg01, result1
0d97c     01 14 06 F6 | 	mov	arg02, #1
0d980     88 4E B1 FD | 	call	#__system___float_tointeger
0d984     34 4E 05 F1 | 	add	fp, #52
0d988     A7 FA 61 FC | 	wrlong	result1, fp
0d98c     34 4E 05 F1 | 	add	fp, #52
0d990     A7 12 02 FB | 	rdlong	arg01, fp
0d994     10 4E 05 F1 | 	add	fp, #16
0d998     A7 14 02 FB | 	rdlong	arg02, fp
0d99c     78 4E 85 F1 | 	sub	fp, #120
0d9a0     A4 4B B1 FD | 	call	#__system___float_div
0d9a4     FD 12 02 F6 | 	mov	arg01, result1
0d9a8     01 14 06 F6 | 	mov	arg02, #1
0d9ac     5C 4E B1 FD | 	call	#__system___float_tointeger
0d9b0     FD 24 02 F6 | 	mov	local04, result1
0d9b4     14 4E 05 F1 | 	add	fp, #20
0d9b8     A7 24 62 FC | 	wrlong	local04, fp
0d9bc     5C 4E 05 F1 | 	add	fp, #92
0d9c0     A7 14 02 FB | 	rdlong	arg02, fp
0d9c4     70 4E 85 F1 | 	sub	fp, #112
0d9c8     00 00 23 FF 
0d9cc     00 12 06 F6 | 	mov	arg01, ##1174405120
0d9d0     70 49 B1 FD | 	call	#__system___float_mul
0d9d4     FD 12 02 F6 | 	mov	arg01, result1
0d9d8     01 14 06 F6 | 	mov	arg02, #1
0d9dc     2C 4E B1 FD | 	call	#__system___float_tointeger
0d9e0     0D 24 C6 F9 | 	decod	local04, #13
0d9e4     FD 24 02 F1 | 	add	local04, result1
0d9e8     18 4E 05 F1 | 	add	fp, #24
0d9ec     A7 24 62 FC | 	wrlong	local04, fp
0d9f0     5C 4E 05 F1 | 	add	fp, #92
0d9f4     A7 14 02 FB | 	rdlong	arg02, fp
0d9f8     74 4E 85 F1 | 	sub	fp, #116
0d9fc     00 3D 22 FF 
0da00     00 12 06 F6 | 	mov	arg01, ##1148846080
0da04     3C 49 B1 FD | 	call	#__system___float_mul
0da08     FD 12 02 F6 | 	mov	arg01, result1
0da0c     01 14 06 F6 | 	mov	arg02, #1
0da10     F8 4D B1 FD | 	call	#__system___float_tointeger
0da14     1C 4E 05 F1 | 	add	fp, #28
0da18     A7 FA 61 FC | 	wrlong	result1, fp
0da1c     37 00 00 FF 
0da20     40 E4 05 F1 | 	add	objptr, ##28224
0da24     F2 24 02 FB | 	rdlong	local04, objptr
0da28     37 00 00 FF 
0da2c     40 E4 85 F1 | 	sub	objptr, ##28224
0da30     10 4E 85 F1 | 	sub	fp, #16
0da34     A7 20 02 FB | 	rdlong	local02, fp
0da38     06 20 66 F0 | 	shl	local02, #6
0da3c     10 25 02 F1 | 	add	local04, local02
0da40     04 4E 85 F1 | 	sub	fp, #4
0da44     A7 24 62 FC | 	wrlong	local04, fp
0da48                 | ' period=round((3546895/freq)/(i*(2^(13-lfreq))))
0da48                 | '  
0da48                 | '   
0da48                 | ' 'print period,skip
0da48                 | ' speed=round(speed_coeff/slen)
0da48                 | ' ipan=8192+round(8192*pan)
0da48                 | ' ivol=round(1000.0*vol)
0da48                 | ' base2=base+64*channel
0da48                 | ' 'skip=round(freq*3.9827219) 
0da48                 | ' if wave <32 then 
0da48     18 4E 05 F1 | 	add	fp, #24
0da4c     A7 24 02 FB | 	rdlong	local04, fp
0da50     20 4E 85 F1 | 	sub	fp, #32
0da54     20 24 56 F2 | 	cmps	local04, #32 wc
0da58     2C 00 90 3D |  if_ae	jmp	#LR__1089
0da5c     08 4E 05 F1 | 	add	fp, #8
0da60     A7 12 02 FB | 	rdlong	arg01, fp
0da64     08 12 06 F1 | 	add	arg01, #8
0da68     18 4E 05 F1 | 	add	fp, #24
0da6c     A7 14 02 FB | 	rdlong	arg02, fp
0da70     20 4E 85 F1 | 	sub	fp, #32
0da74     0B 14 66 F0 | 	shl	arg02, #11
0da78     00 00 60 FF 
0da7c     00 14 06 F1 | 	add	arg02, ##-1073741824
0da80     09 15 62 FC | 	wrlong	arg02, arg01
0da84     18 00 90 FD | 	jmp	#LR__1090
0da88                 | LR__1089
0da88     08 4E 05 F1 | 	add	fp, #8
0da8c     A7 12 02 FB | 	rdlong	arg01, fp
0da90     08 4E 85 F1 | 	sub	fp, #8
0da94     08 12 06 F1 | 	add	arg01, #8
0da98     00 00 E4 FF 
0da9c     09 01 68 FC | 	wrlong	##-939524096, arg01
0daa0                 | LR__1090
0daa0     08 4E 05 F1 | 	add	fp, #8
0daa4     A7 12 02 FB | 	rdlong	arg01, fp
0daa8     10 12 06 F1 | 	add	arg01, #16
0daac     04 00 80 FF 
0dab0     09 01 68 FC | 	wrlong	##2048, arg01
0dab4     A7 12 02 FB | 	rdlong	arg01, fp
0dab8     0C 12 06 F1 | 	add	arg01, #12
0dabc     09 01 68 FC | 	wrlong	#0, arg01
0dac0     A7 12 02 FB | 	rdlong	arg01, fp
0dac4     14 12 06 F1 | 	add	arg01, #20
0dac8     14 4E 05 F1 | 	add	fp, #20
0dacc     A7 14 02 FB | 	rdlong	arg02, fp
0dad0     09 15 52 FC | 	wrword	arg02, arg01
0dad4     14 4E 85 F1 | 	sub	fp, #20
0dad8     A7 12 02 FB | 	rdlong	arg01, fp
0dadc     16 12 06 F1 | 	add	arg01, #22
0dae0     10 4E 05 F1 | 	add	fp, #16
0dae4     A7 14 02 FB | 	rdlong	arg02, fp
0dae8     09 15 52 FC | 	wrword	arg02, arg01
0daec                 | ' lpoke base2+16,2048
0daec                 | ' lpoke base2+12,0
0daec                 | ' dpoke base2+20,ivol 
0daec                 | ' dpoke base2+22,ipan 
0daec                 | ' if wave<32 then
0daec     08 4E 05 F1 | 	add	fp, #8
0daf0     A7 24 02 FB | 	rdlong	local04, fp
0daf4     20 4E 85 F1 | 	sub	fp, #32
0daf8     20 24 56 F2 | 	cmps	local04, #32 wc
0dafc     38 00 90 3D |  if_ae	jmp	#LR__1091
0db00     08 4E 05 F1 | 	add	fp, #8
0db04     A7 12 02 FB | 	rdlong	arg01, fp
0db08     18 12 06 F1 | 	add	arg01, #24
0db0c     2C 4E 05 F1 | 	add	fp, #44
0db10     A7 14 02 FB | 	rdlong	arg02, fp
0db14     09 15 52 FC | 	wrword	arg02, arg01
0db18     2C 4E 85 F1 | 	sub	fp, #44
0db1c     A7 12 02 FB | 	rdlong	arg01, fp
0db20     1A 12 06 F1 | 	add	arg01, #26
0db24     08 4E 05 F1 | 	add	fp, #8
0db28     A7 14 02 FB | 	rdlong	arg02, fp
0db2c     10 4E 85 F1 | 	sub	fp, #16
0db30     09 15 52 FC | 	wrword	arg02, arg01
0db34     48 00 90 FD | 	jmp	#LR__1092
0db38                 | LR__1091
0db38     08 4E 05 F1 | 	add	fp, #8
0db3c     A7 24 02 FB | 	rdlong	local04, fp
0db40     18 24 06 F1 | 	add	local04, #24
0db44     64 4E 05 F1 | 	add	fp, #100
0db48     A7 14 02 FB | 	rdlong	arg02, fp
0db4c     6C 4E 85 F1 | 	sub	fp, #108
0db50     3E 2C 25 FF 
0db54     3C 12 06 F6 | 	mov	arg01, ##1247312956
0db58     EC 49 B1 FD | 	call	#__system___float_div
0db5c     FD 12 02 F6 | 	mov	arg01, result1
0db60     01 14 06 F6 | 	mov	arg02, #1
0db64     A4 4C B1 FD | 	call	#__system___float_tointeger
0db68     12 FB 51 FC | 	wrword	result1, local04
0db6c     08 4E 05 F1 | 	add	fp, #8
0db70     A7 12 02 FB | 	rdlong	arg01, fp
0db74     08 4E 85 F1 | 	sub	fp, #8
0db78     1A 12 06 F1 | 	add	arg01, #26
0db7c     09 01 5A FC | 	wrword	#256, arg01
0db80                 | LR__1092
0db80     08 4E 05 F1 | 	add	fp, #8
0db84     A7 12 02 FB | 	rdlong	arg01, fp
0db88     1C 12 06 F1 | 	add	arg01, #28
0db8c     09 01 68 FC | 	wrlong	#0, arg01
0db90     A7 12 02 FB | 	rdlong	arg01, fp
0db94     20 12 06 F1 | 	add	arg01, #32
0db98     09 01 68 FC | 	wrlong	#0, arg01
0db9c                 | ' lpoke base2+28,$0000_0000
0db9c                 | ' lpoke base2+32,0 
0db9c                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
0db9c     1C 4E 05 F1 | 	add	fp, #28
0dba0     A7 24 02 FB | 	rdlong	local04, fp
0dba4     24 4E 85 F1 | 	sub	fp, #36
0dba8     08 24 0E F2 | 	cmp	local04, #8 wz
0dbac     18 00 90 5D |  if_ne	jmp	#LR__1093
0dbb0     08 4E 05 F1 | 	add	fp, #8
0dbb4     A7 12 02 FB | 	rdlong	arg01, fp
0dbb8     08 4E 85 F1 | 	sub	fp, #8
0dbbc     24 12 06 F1 | 	add	arg01, #36
0dbc0     09 01 68 FC | 	wrlong	#0, arg01
0dbc4     34 00 90 FD | 	jmp	#LR__1094
0dbc8                 | LR__1093
0dbc8     08 4E 05 F1 | 	add	fp, #8
0dbcc     A7 12 02 FB | 	rdlong	arg01, fp
0dbd0     24 12 06 F1 | 	add	arg01, #36
0dbd4     1C 4E 05 F1 | 	add	fp, #28
0dbd8     A7 14 02 FB | 	rdlong	arg02, fp
0dbdc     24 4E 85 F1 | 	sub	fp, #36
0dbe0     09 14 66 F0 | 	shl	arg02, #9
0dbe4     0C 00 00 FF 
0dbe8     D8 E4 05 F1 | 	add	objptr, ##6360
0dbec     F2 14 02 F1 | 	add	arg02, objptr
0dbf0     0C 00 00 FF 
0dbf4     D8 E4 85 F1 | 	sub	objptr, ##6360
0dbf8     09 15 62 FC | 	wrlong	arg02, arg01
0dbfc                 | LR__1094
0dbfc     08 4E 05 F1 | 	add	fp, #8
0dc00     A7 12 02 FB | 	rdlong	arg01, fp
0dc04     28 12 06 F1 | 	add	arg01, #40
0dc08     0C 4E 05 F1 | 	add	fp, #12
0dc0c     A7 14 02 FB | 	rdlong	arg02, fp
0dc10     09 15 62 FC | 	wrlong	arg02, arg01
0dc14     0C 4E 85 F1 | 	sub	fp, #12
0dc18     A7 12 02 FB | 	rdlong	arg01, fp
0dc1c     2C 12 06 F1 | 	add	arg01, #44
0dc20     24 4E 05 F1 | 	add	fp, #36
0dc24     A7 14 02 FB | 	rdlong	arg02, fp
0dc28     09 15 62 FC | 	wrlong	arg02, arg01
0dc2c                 | ' lpoke base2+40,speed' speed
0dc2c                 | ' lpoke base2+44,sus 'len
0dc2c                 | ' 
0dc2c                 | ' if delay>0 then waitms(delay) ' : print "wait "; round(params(6)) : l
0dc2c     04 4E 85 F1 | 	sub	fp, #4
0dc30     A7 24 02 FB | 	rdlong	local04, fp
0dc34     28 4E 85 F1 | 	sub	fp, #40
0dc38     01 24 56 F2 | 	cmps	local04, #1 wc
0dc3c     28 4E 05 31 |  if_ae	add	fp, #40
0dc40     A7 12 02 3B |  if_ae	rdlong	arg01, fp
0dc44     28 4E 85 31 |  if_ae	sub	fp, #40
0dc48     A4 1E B1 3D |  if_ae	call	#__system___waitms
0dc4c     A7 F0 03 F6 | 	mov	ptra, fp
0dc50     B2 00 A0 FD | 	call	#popregs_
0dc54                 | _do_play_ret
0dc54     2D 00 64 FD | 	ret
0dc58                 | 
0dc58                 | ' 
0dc58                 | ' sub do_changevol
0dc58                 | _do_changevol
0dc58     00 4A 05 F6 | 	mov	COUNT_, #0
0dc5c     A8 00 A0 FD | 	call	#pushregs_
0dc60     14 F0 07 F1 | 	add	ptra, #20
0dc64     D4 CE BF FD | 	call	#_pop
0dc68     FF 14 02 F6 | 	mov	arg02, result3
0dc6c     A7 FA 61 FC | 	wrlong	result1, fp
0dc70     04 4E 05 F1 | 	add	fp, #4
0dc74     A7 FC 61 FC | 	wrlong	result2, fp
0dc78     04 4E 05 F1 | 	add	fp, #4
0dc7c     A7 14 62 FC | 	wrlong	arg02, fp
0dc80     08 4E 85 F1 | 	sub	fp, #8
0dc84     A7 12 02 F6 | 	mov	arg01, fp
0dc88     D4 62 B0 FD | 	call	#_converttofloat
0dc8c     FD 12 02 F6 | 	mov	arg01, result1
0dc90     00 3D 22 FF 
0dc94     00 14 06 F6 | 	mov	arg02, ##1148846080
0dc98     A8 46 B1 FD | 	call	#__system___float_mul
0dc9c     FD 12 02 F6 | 	mov	arg01, result1
0dca0     01 14 06 F6 | 	mov	arg02, #1
0dca4     64 4B B1 FD | 	call	#__system___float_tointeger
0dca8     FD 14 52 F6 | 	abs	arg02, result1 wc
0dcac     0D 14 46 F7 | 	zerox	arg02, #13
0dcb0     0A 15 82 F6 | 	negc	arg02, arg02
0dcb4     10 4E 05 F1 | 	add	fp, #16
0dcb8     A7 14 62 FC | 	wrlong	arg02, fp
0dcbc     10 4E 85 F1 | 	sub	fp, #16
0dcc0     78 CE BF FD | 	call	#_pop
0dcc4     FF 14 02 F6 | 	mov	arg02, result3
0dcc8     A7 FA 61 FC | 	wrlong	result1, fp
0dccc     04 4E 05 F1 | 	add	fp, #4
0dcd0     A7 FC 61 FC | 	wrlong	result2, fp
0dcd4     04 4E 05 F1 | 	add	fp, #4
0dcd8     A7 14 62 FC | 	wrlong	arg02, fp
0dcdc     08 4E 85 F1 | 	sub	fp, #8
0dce0     A7 12 02 F6 | 	mov	arg01, fp
0dce4     CC 61 B0 FD | 	call	#_converttoint
0dce8     FD 14 52 F6 | 	abs	arg02, result1 wc
0dcec     07 14 06 F5 | 	and	arg02, #7
0dcf0     0A 15 82 F6 | 	negc	arg02, arg02
0dcf4     0C 4E 05 F1 | 	add	fp, #12
0dcf8     A7 14 62 FC | 	wrlong	arg02, fp
0dcfc     37 00 00 FF 
0dd00     40 E4 05 F1 | 	add	objptr, ##28224
0dd04     F2 12 02 FB | 	rdlong	arg01, objptr
0dd08     37 00 00 FF 
0dd0c     40 E4 85 F1 | 	sub	objptr, ##28224
0dd10     06 14 66 F0 | 	shl	arg02, #6
0dd14     0A 13 02 F1 | 	add	arg01, arg02
0dd18     14 12 06 F1 | 	add	arg01, #20
0dd1c     04 4E 05 F1 | 	add	fp, #4
0dd20     A7 14 02 FB | 	rdlong	arg02, fp
0dd24     10 4E 85 F1 | 	sub	fp, #16
0dd28     09 15 52 FC | 	wrword	arg02, arg01
0dd2c     A7 F0 03 F6 | 	mov	ptra, fp
0dd30     B2 00 A0 FD | 	call	#popregs_
0dd34                 | _do_changevol_ret
0dd34     2D 00 64 FD | 	ret
0dd38                 | 
0dd38                 | ' 
0dd38                 | ' sub do_changepan
0dd38                 | _do_changepan
0dd38     01 4A 05 F6 | 	mov	COUNT_, #1
0dd3c     A8 00 A0 FD | 	call	#pushregs_
0dd40     14 F0 07 F1 | 	add	ptra, #20
0dd44     F4 CD BF FD | 	call	#_pop
0dd48     A7 FA 61 FC | 	wrlong	result1, fp
0dd4c     04 4E 05 F1 | 	add	fp, #4
0dd50     A7 FC 61 FC | 	wrlong	result2, fp
0dd54     04 4E 05 F1 | 	add	fp, #4
0dd58     A7 FE 61 FC | 	wrlong	result3, fp
0dd5c     08 4E 85 F1 | 	sub	fp, #8
0dd60     00 00 23 FF 
0dd64     00 1E 06 F6 | 	mov	local01, ##1174405120
0dd68     A7 12 02 F6 | 	mov	arg01, fp
0dd6c     F0 61 B0 FD | 	call	#_converttofloat
0dd70     FD 14 02 F6 | 	mov	arg02, result1
0dd74     0F 13 02 F6 | 	mov	arg01, local01
0dd78     C8 45 B1 FD | 	call	#__system___float_mul
0dd7c     FD 12 02 F6 | 	mov	arg01, result1
0dd80     01 14 06 F6 | 	mov	arg02, #1
0dd84     84 4A B1 FD | 	call	#__system___float_tointeger
0dd88     0D 1E C6 F9 | 	decod	local01, #13
0dd8c     FD 1E 02 F1 | 	add	local01, result1
0dd90     10 4E 05 F1 | 	add	fp, #16
0dd94     A7 1E 62 FC | 	wrlong	local01, fp
0dd98                 | ' t1=pop()
0dd98                 | ' pan=8192+round(8192*converttofloat(t1)) 
0dd98                 | ' if pan<0 then pan=0
0dd98     10 4E 85 F1 | 	sub	fp, #16
0dd9c     00 1E 56 F2 | 	cmps	local01, #0 wc
0dda0     10 4E 05 C1 |  if_b	add	fp, #16
0dda4     A7 00 68 CC |  if_b	wrlong	#0, fp
0dda8     10 4E 85 C1 |  if_b	sub	fp, #16
0ddac                 | ' if pan>16384 then pan=16384
0ddac     10 4E 05 F1 | 	add	fp, #16
0ddb0     A7 1E 02 FB | 	rdlong	local01, fp
0ddb4     10 4E 85 F1 | 	sub	fp, #16
0ddb8     20 00 00 FF 
0ddbc     01 1E 56 F2 | 	cmps	local01, ##16385 wc
0ddc0     10 4E 05 31 |  if_ae	add	fp, #16
0ddc4     20 00 80 3F 
0ddc8     A7 00 68 3C |  if_ae	wrlong	##16384, fp
0ddcc     10 4E 85 31 |  if_ae	sub	fp, #16
0ddd0     68 CD BF FD | 	call	#_pop
0ddd4     FF 1E 02 F6 | 	mov	local01, result3
0ddd8     A7 FA 61 FC | 	wrlong	result1, fp
0dddc     04 4E 05 F1 | 	add	fp, #4
0dde0     A7 FC 61 FC | 	wrlong	result2, fp
0dde4     04 4E 05 F1 | 	add	fp, #4
0dde8     A7 1E 62 FC | 	wrlong	local01, fp
0ddec     08 4E 85 F1 | 	sub	fp, #8
0ddf0     A7 12 02 F6 | 	mov	arg01, fp
0ddf4     BC 60 B0 FD | 	call	#_converttoint
0ddf8     FD 1E 52 F6 | 	abs	local01, result1 wc
0ddfc     07 1E 06 F5 | 	and	local01, #7
0de00     0F 1F 82 F6 | 	negc	local01, local01
0de04     0C 4E 05 F1 | 	add	fp, #12
0de08     A7 1E 62 FC | 	wrlong	local01, fp
0de0c     37 00 00 FF 
0de10     40 E4 05 F1 | 	add	objptr, ##28224
0de14     F2 12 02 FB | 	rdlong	arg01, objptr
0de18     37 00 00 FF 
0de1c     40 E4 85 F1 | 	sub	objptr, ##28224
0de20     06 1E 66 F0 | 	shl	local01, #6
0de24     0F 13 02 F1 | 	add	arg01, local01
0de28     16 12 06 F1 | 	add	arg01, #22
0de2c     04 4E 05 F1 | 	add	fp, #4
0de30     A7 14 02 FB | 	rdlong	arg02, fp
0de34     10 4E 85 F1 | 	sub	fp, #16
0de38     09 15 52 FC | 	wrword	arg02, arg01
0de3c     A7 F0 03 F6 | 	mov	ptra, fp
0de40     B2 00 A0 FD | 	call	#popregs_
0de44                 | _do_changepan_ret
0de44     2D 00 64 FD | 	ret
0de48                 | 
0de48                 | ' 
0de48                 | ' sub do_changefreq
0de48                 | _do_changefreq
0de48     04 4A 05 F6 | 	mov	COUNT_, #4
0de4c     A8 00 A0 FD | 	call	#pushregs_
0de50     28 F0 07 F1 | 	add	ptra, #40
0de54     E4 CC BF FD | 	call	#_pop
0de58     FF 14 02 F6 | 	mov	arg02, result3
0de5c     A7 FA 61 FC | 	wrlong	result1, fp
0de60     04 4E 05 F1 | 	add	fp, #4
0de64     A7 FC 61 FC | 	wrlong	result2, fp
0de68     04 4E 05 F1 | 	add	fp, #4
0de6c     A7 14 62 FC | 	wrlong	arg02, fp
0de70     08 4E 85 F1 | 	sub	fp, #8
0de74     A7 12 02 F6 | 	mov	arg01, fp
0de78     E4 60 B0 FD | 	call	#_converttofloat
0de7c     24 4E 05 F1 | 	add	fp, #36
0de80     A7 FA 61 FC | 	wrlong	result1, fp
0de84     24 4E 85 F1 | 	sub	fp, #36
0de88     FD 14 02 F6 | 	mov	arg02, result1
0de8c     FC 16 20 FF 
0de90     54 12 06 F6 | 	mov	arg01, ##1076754516
0de94     58 54 B1 FD | 	call	#__system____builtin_logbase
0de98     FD 1E 02 F6 | 	mov	local01, result1
0de9c     1E 14 C6 F9 | 	decod	arg02, #30
0dea0     FC 16 20 FF 
0dea4     54 12 06 F6 | 	mov	arg01, ##1076754516
0dea8     44 54 B1 FD | 	call	#__system____builtin_logbase
0deac     FD 14 02 F6 | 	mov	arg02, result1
0deb0     0F 13 02 F6 | 	mov	arg01, local01
0deb4     90 46 B1 FD | 	call	#__system___float_div
0deb8     FD 12 02 F6 | 	mov	arg01, result1
0debc     00 14 06 F6 | 	mov	arg02, #0
0dec0     48 49 B1 FD | 	call	#__system___float_tointeger
0dec4     10 4E 05 F1 | 	add	fp, #16
0dec8     A7 FA 61 FC | 	wrlong	result1, fp
0decc     1E 1E C6 F9 | 	decod	local01, #30
0ded0     FD 12 02 F6 | 	mov	arg01, result1
0ded4     10 4E 85 F1 | 	sub	fp, #16
0ded8     05 12 06 F1 | 	add	arg01, #5
0dedc     09 13 52 F6 | 	abs	arg01, arg01 wc
0dee0     1F 20 C6 C9 |  if_b	decod	local02, #31
0dee4     00 20 06 36 |  if_ae	mov	local02, #0
0dee8     54 40 B1 FD | 	call	#__system___float_fromuns
0deec     10 FB 61 F5 | 	xor	result1, local02
0def0     FD 14 02 F6 | 	mov	arg02, result1
0def4     0F 13 02 F6 | 	mov	arg01, local01
0def8     2C 53 B1 FD | 	call	#__system____builtin_powf
0defc     FD 12 02 F6 | 	mov	arg01, result1
0df00     01 14 06 F6 | 	mov	arg02, #1
0df04     04 49 B1 FD | 	call	#__system___float_tointeger
0df08     14 4E 05 F1 | 	add	fp, #20
0df0c     A7 FA 61 FC | 	wrlong	result1, fp
0df10                 | ' skip=round(2^(lfreq+5))
0df10                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0df10     14 4E 85 F1 | 	sub	fp, #20
0df14     40 00 00 FF 
0df18     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0df1c     30 00 90 CD |  if_b	jmp	#LR__1100
0df20     14 4E 05 F1 | 	add	fp, #20
0df24     A7 1E 02 FB | 	rdlong	local01, fp
0df28     0F 1F 52 F6 | 	abs	local01, local01 wc
0df2c     0F 1E 46 F0 | 	shr	local01, #15
0df30     0F 1F 82 F6 | 	negc	local01, local01
0df34     04 4E 05 F1 | 	add	fp, #4
0df38     A7 1E 62 FC | 	wrlong	local01, fp
0df3c     04 4E 85 F1 | 	sub	fp, #4
0df40     40 00 80 FF 
0df44     A7 00 68 FC | 	wrlong	##32768, fp
0df48     14 4E 85 F1 | 	sub	fp, #20
0df4c     0C 00 90 FD | 	jmp	#LR__1101
0df50                 | LR__1100
0df50     18 4E 05 F1 | 	add	fp, #24
0df54     A7 02 68 FC | 	wrlong	#1, fp
0df58     18 4E 85 F1 | 	sub	fp, #24
0df5c                 | LR__1101
0df5c     24 4E 05 F1 | 	add	fp, #36
0df60     A7 14 02 FB | 	rdlong	arg02, fp
0df64     24 4E 85 F1 | 	sub	fp, #36
0df68     3E 2C 25 FF 
0df6c     3C 12 06 F6 | 	mov	arg01, ##1247312956
0df70     D4 45 B1 FD | 	call	#__system___float_div
0df74     FD 1E 02 F6 | 	mov	local01, result1
0df78     18 4E 05 F1 | 	add	fp, #24
0df7c     A7 12 02 FB | 	rdlong	arg01, fp
0df80     18 4E 85 F1 | 	sub	fp, #24
0df84     09 13 52 F6 | 	abs	arg01, arg01 wc
0df88     1F 20 C6 C9 |  if_b	decod	local02, #31
0df8c     00 20 06 36 |  if_ae	mov	local02, #0
0df90     AC 3F B1 FD | 	call	#__system___float_fromuns
0df94     10 FB 61 F5 | 	xor	result1, local02
0df98     FD 22 02 F6 | 	mov	local03, result1
0df9c     1E 24 C6 F9 | 	decod	local04, #30
0dfa0     0D 12 06 F6 | 	mov	arg01, #13
0dfa4     10 4E 05 F1 | 	add	fp, #16
0dfa8     A7 14 02 FB | 	rdlong	arg02, fp
0dfac     10 4E 85 F1 | 	sub	fp, #16
0dfb0     0A 13 82 F1 | 	sub	arg01, arg02
0dfb4     09 13 52 F6 | 	abs	arg01, arg01 wc
0dfb8     1F 20 C6 C9 |  if_b	decod	local02, #31
0dfbc     00 20 06 36 |  if_ae	mov	local02, #0
0dfc0     7C 3F B1 FD | 	call	#__system___float_fromuns
0dfc4     10 FB 61 F5 | 	xor	result1, local02
0dfc8     FD 14 02 F6 | 	mov	arg02, result1
0dfcc     12 13 02 F6 | 	mov	arg01, local04
0dfd0     54 52 B1 FD | 	call	#__system____builtin_powf
0dfd4     FD 14 02 F6 | 	mov	arg02, result1
0dfd8     11 13 02 F6 | 	mov	arg01, local03
0dfdc     64 43 B1 FD | 	call	#__system___float_mul
0dfe0     FD 14 02 F6 | 	mov	arg02, result1
0dfe4     0F 13 02 F6 | 	mov	arg01, local01
0dfe8     5C 45 B1 FD | 	call	#__system___float_div
0dfec     FD 12 02 F6 | 	mov	arg01, result1
0dff0     01 14 06 F6 | 	mov	arg02, #1
0dff4     14 48 B1 FD | 	call	#__system___float_tointeger
0dff8     FD 1E 02 F6 | 	mov	local01, result1
0dffc     1C 4E 05 F1 | 	add	fp, #28
0e000     A7 1E 62 FC | 	wrlong	local01, fp
0e004     1C 4E 85 F1 | 	sub	fp, #28
0e008     30 CB BF FD | 	call	#_pop
0e00c     FF 24 02 F6 | 	mov	local04, result3
0e010     A7 FA 61 FC | 	wrlong	result1, fp
0e014     04 4E 05 F1 | 	add	fp, #4
0e018     A7 FC 61 FC | 	wrlong	result2, fp
0e01c     04 4E 05 F1 | 	add	fp, #4
0e020     A7 24 62 FC | 	wrlong	local04, fp
0e024     08 4E 85 F1 | 	sub	fp, #8
0e028     A7 12 02 F6 | 	mov	arg01, fp
0e02c     84 5E B0 FD | 	call	#_converttoint
0e030     FD 22 52 F6 | 	abs	local03, result1 wc
0e034     07 22 06 F5 | 	and	local03, #7
0e038     11 23 82 F6 | 	negc	local03, local03
0e03c     0C 4E 05 F1 | 	add	fp, #12
0e040     A7 22 62 FC | 	wrlong	local03, fp
0e044     08 4E 05 F1 | 	add	fp, #8
0e048     A7 14 02 FB | 	rdlong	arg02, fp
0e04c     10 14 66 F0 | 	shl	arg02, #16
0e050     08 4E 05 F1 | 	add	fp, #8
0e054     A7 24 02 FB | 	rdlong	local04, fp
0e058     12 15 02 F1 | 	add	arg02, local04
0e05c     04 4E 05 F1 | 	add	fp, #4
0e060     A7 14 62 FC | 	wrlong	arg02, fp
0e064     37 00 00 FF 
0e068     40 E4 05 F1 | 	add	objptr, ##28224
0e06c     F2 12 02 FB | 	rdlong	arg01, objptr
0e070     37 00 00 FF 
0e074     40 E4 85 F1 | 	sub	objptr, ##28224
0e078     14 4E 85 F1 | 	sub	fp, #20
0e07c     A7 24 02 FB | 	rdlong	local04, fp
0e080     06 24 66 F0 | 	shl	local04, #6
0e084     12 13 02 F1 | 	add	arg01, local04
0e088     18 12 06 F1 | 	add	arg01, #24
0e08c     0C 4E 85 F1 | 	sub	fp, #12
0e090     09 15 62 FC | 	wrlong	arg02, arg01
0e094     A7 F0 03 F6 | 	mov	ptra, fp
0e098     B2 00 A0 FD | 	call	#popregs_
0e09c                 | _do_changefreq_ret
0e09c     2D 00 64 FD | 	ret
0e0a0                 | 
0e0a0                 | ' 
0e0a0                 | ' sub do_changewav
0e0a0                 | _do_changewav
0e0a0     00 4A 05 F6 | 	mov	COUNT_, #0
0e0a4     A8 00 A0 FD | 	call	#pushregs_
0e0a8     14 F0 07 F1 | 	add	ptra, #20
0e0ac     8C CA BF FD | 	call	#_pop
0e0b0     FF 14 02 F6 | 	mov	arg02, result3
0e0b4     A7 FA 61 FC | 	wrlong	result1, fp
0e0b8     04 4E 05 F1 | 	add	fp, #4
0e0bc     A7 FC 61 FC | 	wrlong	result2, fp
0e0c0     04 4E 05 F1 | 	add	fp, #4
0e0c4     A7 14 62 FC | 	wrlong	arg02, fp
0e0c8     08 4E 85 F1 | 	sub	fp, #8
0e0cc     A7 12 02 F6 | 	mov	arg01, fp
0e0d0     E0 5D B0 FD | 	call	#_converttoint
0e0d4     10 4E 05 F1 | 	add	fp, #16
0e0d8     A7 FA 61 FC | 	wrlong	result1, fp
0e0dc                 | ' t1=pop()
0e0dc                 | ' wave=converttoint(t1)
0e0dc                 | ' if wave<0 then wave=0
0e0dc     FD 14 02 F6 | 	mov	arg02, result1
0e0e0     10 4E 85 F1 | 	sub	fp, #16
0e0e4     00 14 56 F2 | 	cmps	arg02, #0 wc
0e0e8     10 4E 05 C1 |  if_b	add	fp, #16
0e0ec     A7 00 68 CC |  if_b	wrlong	#0, fp
0e0f0     10 4E 85 C1 |  if_b	sub	fp, #16
0e0f4     44 CA BF FD | 	call	#_pop
0e0f8     FF 14 02 F6 | 	mov	arg02, result3
0e0fc     A7 FA 61 FC | 	wrlong	result1, fp
0e100     04 4E 05 F1 | 	add	fp, #4
0e104     A7 FC 61 FC | 	wrlong	result2, fp
0e108     04 4E 05 F1 | 	add	fp, #4
0e10c     A7 14 62 FC | 	wrlong	arg02, fp
0e110     08 4E 85 F1 | 	sub	fp, #8
0e114     A7 12 02 F6 | 	mov	arg01, fp
0e118     98 5D B0 FD | 	call	#_converttoint
0e11c     FD 14 52 F6 | 	abs	arg02, result1 wc
0e120     07 14 06 F5 | 	and	arg02, #7
0e124     0A 15 82 F6 | 	negc	arg02, arg02
0e128     0C 4E 05 F1 | 	add	fp, #12
0e12c     A7 14 62 FC | 	wrlong	arg02, fp
0e130                 | ' if wave <32 then 
0e130     04 4E 05 F1 | 	add	fp, #4
0e134     A7 14 02 FB | 	rdlong	arg02, fp
0e138     10 4E 85 F1 | 	sub	fp, #16
0e13c     20 14 56 F2 | 	cmps	arg02, #32 wc
0e140     48 00 90 3D |  if_ae	jmp	#LR__1110
0e144     37 00 00 FF 
0e148     40 E4 05 F1 | 	add	objptr, ##28224
0e14c     F2 12 02 FB | 	rdlong	arg01, objptr
0e150     37 00 00 FF 
0e154     40 E4 85 F1 | 	sub	objptr, ##28224
0e158     0C 4E 05 F1 | 	add	fp, #12
0e15c     A7 14 02 FB | 	rdlong	arg02, fp
0e160     06 14 66 F0 | 	shl	arg02, #6
0e164     0A 13 02 F1 | 	add	arg01, arg02
0e168     08 12 06 F1 | 	add	arg01, #8
0e16c     04 4E 05 F1 | 	add	fp, #4
0e170     A7 14 02 FB | 	rdlong	arg02, fp
0e174     10 4E 85 F1 | 	sub	fp, #16
0e178     0B 14 66 F0 | 	shl	arg02, #11
0e17c     00 00 60 FF 
0e180     00 14 06 F1 | 	add	arg02, ##-1073741824
0e184     09 15 62 FC | 	wrlong	arg02, arg01
0e188     34 00 90 FD | 	jmp	#LR__1111
0e18c                 | LR__1110
0e18c     37 00 00 FF 
0e190     40 E4 05 F1 | 	add	objptr, ##28224
0e194     F2 12 02 FB | 	rdlong	arg01, objptr
0e198     37 00 00 FF 
0e19c     40 E4 85 F1 | 	sub	objptr, ##28224
0e1a0     0C 4E 05 F1 | 	add	fp, #12
0e1a4     A7 14 02 FB | 	rdlong	arg02, fp
0e1a8     0C 4E 85 F1 | 	sub	fp, #12
0e1ac     06 14 66 F0 | 	shl	arg02, #6
0e1b0     0A 13 02 F1 | 	add	arg01, arg02
0e1b4     08 12 06 F1 | 	add	arg01, #8
0e1b8     00 00 E4 FF 
0e1bc     09 01 68 FC | 	wrlong	##-939524096, arg01
0e1c0                 | LR__1111
0e1c0     A7 F0 03 F6 | 	mov	ptra, fp
0e1c4     B2 00 A0 FD | 	call	#popregs_
0e1c8                 | _do_changewav_ret
0e1c8     2D 00 64 FD | 	ret
0e1cc                 | 
0e1cc                 | ' 
0e1cc                 | ' 
0e1cc                 | ' sub do_shutup
0e1cc                 | _do_shutup
0e1cc     03 4A 05 F6 | 	mov	COUNT_, #3
0e1d0     A8 00 A0 FD | 	call	#pushregs_
0e1d4     18 F0 07 F1 | 	add	ptra, #24
0e1d8     4A 00 00 FF 
0e1dc     B0 E4 05 F1 | 	add	objptr, ##38064
0e1e0     F2 1E 02 FB | 	rdlong	local01, objptr
0e1e4     0F 21 02 F6 | 	mov	local02, local01
0e1e8     01 20 66 F0 | 	shl	local02, #1
0e1ec     0F 21 02 F1 | 	add	local02, local01
0e1f0     02 20 66 F0 | 	shl	local02, #2
0e1f4     03 00 00 FF 
0e1f8     04 E4 85 F1 | 	sub	objptr, ##1540
0e1fc     F2 20 02 F1 | 	add	local02, objptr
0e200     10 23 0A FB | 	rdlong	local03, local02 wz
0e204     14 4E 05 F1 | 	add	fp, #20
0e208     A7 22 62 FC | 	wrlong	local03, fp
0e20c                 | ' 
0e20c                 | ' numpar=compiledline(lineptr_e).result.uresult
0e20c                 | ' if numpar=0 then
0e20c     14 4E 85 F1 | 	sub	fp, #20
0e210     47 00 00 FF 
0e214     AC E4 85 F1 | 	sub	objptr, ##36524
0e218     50 00 90 5D |  if_ne	jmp	#LR__1122
0e21c                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
0e21c     10 4E 05 F1 | 	add	fp, #16
0e220     A7 00 68 FC | 	wrlong	#0, fp
0e224     37 00 00 FF 
0e228     40 E4 05 F1 | 	add	objptr, ##28224
0e22c     97 16 48 FB | 	callpa	#(@LR__1121-@LR__1120)>>2,fcache_load_ptr_
0e230                 | LR__1120
0e230     F2 12 02 FB | 	rdlong	arg01, objptr
0e234     A7 22 02 FB | 	rdlong	local03, fp
0e238     06 22 66 F0 | 	shl	local03, #6
0e23c     11 13 02 F1 | 	add	arg01, local03
0e240     14 12 06 F1 | 	add	arg01, #20
0e244     09 01 58 FC | 	wrword	#0, arg01
0e248     A7 22 02 FB | 	rdlong	local03, fp
0e24c     01 22 06 F1 | 	add	local03, #1
0e250     A7 22 62 FC | 	wrlong	local03, fp
0e254     08 22 56 F2 | 	cmps	local03, #8 wc
0e258     D4 FF 9F CD |  if_b	jmp	#LR__1120
0e25c                 | LR__1121
0e25c     37 00 00 FF 
0e260     40 E4 85 F1 | 	sub	objptr, ##28224
0e264     10 4E 85 F1 | 	sub	fp, #16
0e268     64 00 90 FD | 	jmp	#LR__1123
0e26c                 | LR__1122
0e26c     CC C8 BF FD | 	call	#_pop
0e270     FF 1E 02 F6 | 	mov	local01, result3
0e274     A7 FA 61 FC | 	wrlong	result1, fp
0e278     04 4E 05 F1 | 	add	fp, #4
0e27c     A7 FC 61 FC | 	wrlong	result2, fp
0e280     04 4E 05 F1 | 	add	fp, #4
0e284     A7 1E 62 FC | 	wrlong	local01, fp
0e288     08 4E 85 F1 | 	sub	fp, #8
0e28c     A7 12 02 F6 | 	mov	arg01, fp
0e290     20 5C B0 FD | 	call	#_converttoint
0e294     FD 22 52 F6 | 	abs	local03, result1 wc
0e298     07 22 06 F5 | 	and	local03, #7
0e29c     11 21 82 F6 | 	negc	local02, local03
0e2a0     0C 4E 05 F1 | 	add	fp, #12
0e2a4     A7 20 62 FC | 	wrlong	local02, fp
0e2a8     37 00 00 FF 
0e2ac     40 E4 05 F1 | 	add	objptr, ##28224
0e2b0     F2 12 02 FB | 	rdlong	arg01, objptr
0e2b4     37 00 00 FF 
0e2b8     40 E4 85 F1 | 	sub	objptr, ##28224
0e2bc     0C 4E 85 F1 | 	sub	fp, #12
0e2c0     06 20 66 F0 | 	shl	local02, #6
0e2c4     10 13 02 F1 | 	add	arg01, local02
0e2c8     14 12 06 F1 | 	add	arg01, #20
0e2cc     09 01 58 FC | 	wrword	#0, arg01
0e2d0                 | LR__1123
0e2d0     A7 F0 03 F6 | 	mov	ptra, fp
0e2d4     B2 00 A0 FD | 	call	#popregs_
0e2d8                 | _do_shutup_ret
0e2d8     2D 00 64 FD | 	ret
0e2dc                 | 
0e2dc                 | ' 
0e2dc                 | ' 
0e2dc                 | ' sub do_release
0e2dc                 | _do_release
0e2dc     00 4A 05 F6 | 	mov	COUNT_, #0
0e2e0     A8 00 A0 FD | 	call	#pushregs_
0e2e4     10 F0 07 F1 | 	add	ptra, #16
0e2e8     50 C8 BF FD | 	call	#_pop
0e2ec     FF 14 02 F6 | 	mov	arg02, result3
0e2f0     A7 FA 61 FC | 	wrlong	result1, fp
0e2f4     04 4E 05 F1 | 	add	fp, #4
0e2f8     A7 FC 61 FC | 	wrlong	result2, fp
0e2fc     04 4E 05 F1 | 	add	fp, #4
0e300     A7 14 62 FC | 	wrlong	arg02, fp
0e304     08 4E 85 F1 | 	sub	fp, #8
0e308     A7 12 02 F6 | 	mov	arg01, fp
0e30c     A4 5B B0 FD | 	call	#_converttoint
0e310     0C 4E 05 F1 | 	add	fp, #12
0e314     A7 FA 61 FC | 	wrlong	result1, fp
0e318                 | ' t1=pop()
0e318                 | ' channel=converttoint(t1)
0e318                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255 ' else printerror
0e318     0C 4E 85 F1 | 	sub	fp, #12
0e31c     00 FA 55 F2 | 	cmps	result1, #0 wc
0e320     44 00 90 CD |  if_b	jmp	#LR__1130
0e324     0C 4E 05 F1 | 	add	fp, #12
0e328     A7 14 02 FB | 	rdlong	arg02, fp
0e32c     0C 4E 85 F1 | 	sub	fp, #12
0e330     08 14 56 F2 | 	cmps	arg02, #8 wc
0e334     30 00 90 3D |  if_ae	jmp	#LR__1130
0e338     37 00 00 FF 
0e33c     40 E4 05 F1 | 	add	objptr, ##28224
0e340     F2 12 02 FB | 	rdlong	arg01, objptr
0e344     37 00 00 FF 
0e348     40 E4 85 F1 | 	sub	objptr, ##28224
0e34c     0C 4E 05 F1 | 	add	fp, #12
0e350     A7 14 02 FB | 	rdlong	arg02, fp
0e354     0C 4E 85 F1 | 	sub	fp, #12
0e358     06 14 66 F0 | 	shl	arg02, #6
0e35c     0A 13 02 F1 | 	add	arg01, arg02
0e360     2C 12 06 F1 | 	add	arg01, #44
0e364     09 FF 69 FC | 	wrlong	#255, arg01
0e368                 | LR__1130
0e368     A7 F0 03 F6 | 	mov	ptra, fp
0e36c     B2 00 A0 FD | 	call	#popregs_
0e370                 | _do_release_ret
0e370     2D 00 64 FD | 	ret
0e374                 | 
0e374                 | ' 
0e374                 | ' 
0e374                 | ' sub do_defsnd
0e374                 | _do_defsnd
0e374     04 4A 05 F6 | 	mov	COUNT_, #4
0e378     A8 00 A0 FD | 	call	#pushregs_
0e37c     88 F0 07 F1 | 	add	ptra, #136
0e380     4A 00 00 FF 
0e384     B0 E4 05 F1 | 	add	objptr, ##38064
0e388     F2 1A 02 FB | 	rdlong	arg05, objptr
0e38c     0D 19 02 F6 | 	mov	arg04, arg05
0e390     01 18 66 F0 | 	shl	arg04, #1
0e394     0D 19 02 F1 | 	add	arg04, arg05
0e398     02 18 66 F0 | 	shl	arg04, #2
0e39c     03 00 00 FF 
0e3a0     04 E4 85 F1 | 	sub	objptr, ##1540
0e3a4     F2 18 02 F1 | 	add	arg04, objptr
0e3a8     0C 1B 02 FB | 	rdlong	arg05, arg04
0e3ac     A7 1A 62 FC | 	wrlong	arg05, fp
0e3b0                 | ' 
0e3b0                 | ' numpar=compiledline(lineptr_e).result.uresult
0e3b0                 | ' 
0e3b0                 | ' 
0e3b0                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0e3b0                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0e3b0                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0e3b0                 | ' ' defsnd channel, oneint - loads the wave from the pointer
0e3b0                 | ' 
0e3b0                 | ' if numpar<2 then return
0e3b0     02 1A 56 F2 | 	cmps	arg05, #2 wc
0e3b4     47 00 00 FF 
0e3b8     AC E4 85 F1 | 	sub	objptr, ##36524
0e3bc     94 08 90 CD |  if_b	jmp	#LR__1163
0e3c0                 | ' 
0e3c0                 | '   
0e3c0                 | ' if numpar=2 then
0e3c0     A7 1A 02 FB | 	rdlong	arg05, fp
0e3c4     02 1A 0E F2 | 	cmp	arg05, #2 wz
0e3c8     A0 03 90 5D |  if_ne	jmp	#LR__1150
0e3cc     6C C7 BF FD | 	call	#_pop
0e3d0     FF 1A 02 F6 | 	mov	arg05, result3
0e3d4     2C 4E 05 F1 | 	add	fp, #44
0e3d8     A7 FA 61 FC | 	wrlong	result1, fp
0e3dc     04 4E 05 F1 | 	add	fp, #4
0e3e0     A7 FC 61 FC | 	wrlong	result2, fp
0e3e4     04 4E 05 F1 | 	add	fp, #4
0e3e8     A7 1A 62 FC | 	wrlong	arg05, fp
0e3ec                 | '   t1=pop()
0e3ec                 | '   if t1.result_type=result_string2 then 
0e3ec     34 4E 85 F1 | 	sub	fp, #52
0e3f0     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0e3f4     20 00 90 5D |  if_ne	jmp	#LR__1140
0e3f8     2C 4E 05 F1 | 	add	fp, #44
0e3fc     A7 12 02 FB | 	rdlong	arg01, fp
0e400     2C 4E 85 F1 | 	sub	fp, #44
0e404     88 12 B0 FD | 	call	#_convertstring
0e408     38 4E 05 F1 | 	add	fp, #56
0e40c     A7 FA 61 FC | 	wrlong	result1, fp
0e410     38 4E 85 F1 | 	sub	fp, #56
0e414     58 00 90 FD | 	jmp	#LR__1143
0e418                 | LR__1140
0e418     34 4E 05 F1 | 	add	fp, #52
0e41c     A7 1A 02 FB | 	rdlong	arg05, fp
0e420     34 4E 85 F1 | 	sub	fp, #52
0e424     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0e428     18 00 90 5D |  if_ne	jmp	#LR__1141
0e42c     2C 4E 05 F1 | 	add	fp, #44
0e430     A7 1A 02 FB | 	rdlong	arg05, fp
0e434     0C 4E 05 F1 | 	add	fp, #12
0e438     A7 1A 62 FC | 	wrlong	arg05, fp
0e43c     38 4E 85 F1 | 	sub	fp, #56
0e440     2C 00 90 FD | 	jmp	#LR__1142
0e444                 | LR__1141
0e444     7A 01 00 FF 
0e448     8D 1A 06 F6 | 	mov	arg05, ##@LR__5220
0e44c     38 4E 05 F1 | 	add	fp, #56
0e450     A7 1A 62 FC | 	wrlong	arg05, fp
0e454     0C 4E 85 F1 | 	sub	fp, #12
0e458     A7 12 02 F6 | 	mov	arg01, fp
0e45c     2C 4E 85 F1 | 	sub	fp, #44
0e460     50 5A B0 FD | 	call	#_converttoint
0e464     14 4E 05 F1 | 	add	fp, #20
0e468     A7 FA 61 FC | 	wrlong	result1, fp
0e46c     14 4E 85 F1 | 	sub	fp, #20
0e470                 | LR__1142
0e470                 | LR__1143
0e470                 | ' 
0e470                 | '     
0e470                 | '   if s<>"" then 
0e470     38 4E 05 F1 | 	add	fp, #56
0e474     A7 12 02 FB | 	rdlong	arg01, fp
0e478     38 4E 85 F1 | 	sub	fp, #56
0e47c     7A 01 00 FF 
0e480     8E 14 06 F6 | 	mov	arg02, ##@LR__5221
0e484     9C 13 B1 FD | 	call	#__system___string_cmp
0e488     00 FA 0D F2 | 	cmp	result1, #0 wz
0e48c     E0 01 90 AD |  if_e	jmp	#LR__1146
0e490     A8 C6 BF FD | 	call	#_pop
0e494     FF 1A 02 F6 | 	mov	arg05, result3
0e498     2C 4E 05 F1 | 	add	fp, #44
0e49c     A7 FA 61 FC | 	wrlong	result1, fp
0e4a0     04 4E 05 F1 | 	add	fp, #4
0e4a4     A7 FC 61 FC | 	wrlong	result2, fp
0e4a8     04 4E 05 F1 | 	add	fp, #4
0e4ac     A7 1A 62 FC | 	wrlong	arg05, fp
0e4b0     08 4E 85 F1 | 	sub	fp, #8
0e4b4     A7 12 02 F6 | 	mov	arg01, fp
0e4b8     2C 4E 85 F1 | 	sub	fp, #44
0e4bc     F4 59 B0 FD | 	call	#_converttoint
0e4c0     10 4E 05 F1 | 	add	fp, #16
0e4c4     A7 FA 61 FC | 	wrlong	result1, fp
0e4c8                 | '     t1=pop()
0e4c8                 | '     channel=converttoint(t1) : if channel>31 then return
0e4c8     FD 1A 02 F6 | 	mov	arg05, result1
0e4cc     10 4E 85 F1 | 	sub	fp, #16
0e4d0     20 1A 56 F2 | 	cmps	arg05, #32 wc
0e4d4     7C 07 90 3D |  if_ae	jmp	#LR__1163
0e4d8                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0e4d8     09 12 06 F6 | 	mov	arg01, #9
0e4dc     E4 62 B1 FD | 	call	#__system__close
0e4e0     09 1E 06 F6 | 	mov	local01, #9
0e4e4     7A 01 00 FF 
0e4e8     8F 12 06 F6 | 	mov	arg01, ##@LR__5222
0e4ec     38 4E 05 F1 | 	add	fp, #56
0e4f0     A7 14 02 FB | 	rdlong	arg02, fp
0e4f4     38 4E 85 F1 | 	sub	fp, #56
0e4f8     5C 13 B1 FD | 	call	#__system___string_concat
0e4fc     FD 14 02 F6 | 	mov	arg02, result1
0e500     0F 13 02 F6 | 	mov	arg01, local01
0e504     00 16 06 F6 | 	mov	arg03, #0
0e508     F4 1E B1 FD | 	call	#__system___basic_open_string
0e50c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e510     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0e514     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e518     5A 00 00 FF 
0e51c     60 E4 05 F1 | 	add	objptr, ##46176
0e520     F2 FA 61 FC | 	wrlong	result1, objptr
0e524                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0e524     5A 00 00 FF 
0e528     60 E4 85 F1 | 	sub	objptr, ##46176
0e52c     B0 00 90 AD |  if_e	jmp	#LR__1144
0e530     00 12 06 F6 | 	mov	arg01, #0
0e534     5C 6C B1 FD | 	call	#__system___getiolock_0508
0e538     FD 12 02 F6 | 	mov	arg01, result1
0e53c     BC 12 B1 FD | 	call	#__system___lockmem
0e540     7A 01 00 FF 
0e544     9C 14 06 F6 | 	mov	arg02, ##@LR__5223
0e548     00 12 06 F6 | 	mov	arg01, #0
0e54c     00 16 06 F6 | 	mov	arg03, #0
0e550     9C 1F B1 FD | 	call	#__system___basic_print_string
0e554     5A 00 00 FF 
0e558     60 E4 05 F1 | 	add	objptr, ##46176
0e55c     F2 14 02 FB | 	rdlong	arg02, objptr
0e560     5A 00 00 FF 
0e564     60 E4 85 F1 | 	sub	objptr, ##46176
0e568     00 12 06 F6 | 	mov	arg01, #0
0e56c     00 16 06 F6 | 	mov	arg03, #0
0e570     0A 18 06 F6 | 	mov	arg04, #10
0e574     BC 1F B1 FD | 	call	#__system___basic_print_integer
0e578     7A 01 00 FF 
0e57c     AA 14 06 F6 | 	mov	arg02, ##@LR__5224
0e580     00 12 06 F6 | 	mov	arg01, #0
0e584     00 16 06 F6 | 	mov	arg03, #0
0e588     64 1F B1 FD | 	call	#__system___basic_print_string
0e58c     00 1E 06 F6 | 	mov	local01, #0
0e590     5A 00 00 FF 
0e594     60 E4 05 F1 | 	add	objptr, ##46176
0e598     F2 12 02 FB | 	rdlong	arg01, objptr
0e59c     5A 00 00 FF 
0e5a0     60 E4 85 F1 | 	sub	objptr, ##46176
0e5a4     B0 38 B1 FD | 	call	#__system___strerror
0e5a8     FD 14 02 F6 | 	mov	arg02, result1
0e5ac     0F 13 02 F6 | 	mov	arg01, local01
0e5b0     00 16 06 F6 | 	mov	arg03, #0
0e5b4     38 1F B1 FD | 	call	#__system___basic_print_string
0e5b8     00 12 06 F6 | 	mov	arg01, #0
0e5bc     0A 14 06 F6 | 	mov	arg02, #10
0e5c0     00 16 06 F6 | 	mov	arg03, #0
0e5c4     D0 1E B1 FD | 	call	#__system___basic_print_char
0e5c8     00 12 06 F6 | 	mov	arg01, #0
0e5cc     C4 6B B1 FD | 	call	#__system___getiolock_0508
0e5d0     FD 00 68 FC | 	wrlong	#0, result1
0e5d4     09 12 06 F6 | 	mov	arg01, #9
0e5d8     E8 61 B1 FD | 	call	#__system__close
0e5dc     74 06 90 FD | 	jmp	#LR__1163
0e5e0                 | LR__1144
0e5e0                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
0e5e0     04 4E 05 F1 | 	add	fp, #4
0e5e4     A7 00 68 FC | 	wrlong	#0, fp
0e5e8                 | LR__1145
0e5e8     A7 1E 02 FB | 	rdlong	local01, fp
0e5ec     01 1E 66 F0 | 	shl	local01, #1
0e5f0     11 14 06 F6 | 	mov	arg02, #17
0e5f4     0F 15 02 F1 | 	add	arg02, local01
0e5f8     78 4E 05 F1 | 	add	fp, #120
0e5fc     A7 16 02 F6 | 	mov	arg03, fp
0e600     7C 4E 85 F1 | 	sub	fp, #124
0e604     09 12 06 F6 | 	mov	arg01, #9
0e608     01 18 06 F6 | 	mov	arg04, #1
0e60c     02 1A 06 F6 | 	mov	arg05, #2
0e610     EC 1F B1 FD | 	call	#__system___basic_get
0e614     10 4E 05 F1 | 	add	fp, #16
0e618     A7 12 02 FB | 	rdlong	arg01, fp
0e61c     0B 12 66 F0 | 	shl	arg01, #11
0e620     0C 4E 85 F1 | 	sub	fp, #12
0e624     A7 1E 02 FB | 	rdlong	local01, fp
0e628     01 1E 66 F0 | 	shl	local01, #1
0e62c     0F 13 02 F1 | 	add	arg01, local01
0e630     78 4E 05 F1 | 	add	fp, #120
0e634     A7 14 E2 FA | 	rdword	arg02, fp
0e638     7C 4E 85 F1 | 	sub	fp, #124
0e63c     0F 14 66 F7 | 	signx	arg02, #15
0e640     BC CE B0 FD | 	call	#_psdpoke
0e644     04 4E 05 F1 | 	add	fp, #4
0e648     A7 1E 02 FB | 	rdlong	local01, fp
0e64c     01 1E 06 F1 | 	add	local01, #1
0e650     A7 1E 62 FC | 	wrlong	local01, fp
0e654     02 00 00 FF 
0e658     01 1E 56 F2 | 	cmps	local01, ##1025 wc
0e65c     88 FF 9F CD |  if_b	jmp	#LR__1145
0e660     04 4E 85 F1 | 	sub	fp, #4
0e664                 | '     close #9
0e664     09 12 06 F6 | 	mov	arg01, #9
0e668     58 61 B1 FD | 	call	#__system__close
0e66c                 | '                                                                        'for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0e66c                 | '     return
0e66c     E4 05 90 FD | 	jmp	#LR__1163
0e670                 | LR__1146
0e670                 | '     if wptr < ($80000 - 2048) then 
0e670     14 4E 05 F1 | 	add	fp, #20
0e674     A7 1E 02 FB | 	rdlong	local01, fp
0e678     14 4E 85 F1 | 	sub	fp, #20
0e67c     FC 03 00 FF 
0e680     00 1E 56 F2 | 	cmps	local01, ##522240 wc
0e684     70 00 90 3D |  if_ae	jmp	#LR__1148
0e688                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
0e688     04 4E 05 F1 | 	add	fp, #4
0e68c     A7 00 68 FC | 	wrlong	#0, fp
0e690     04 4E 85 F1 | 	sub	fp, #4
0e694                 | LR__1147
0e694     10 4E 05 F1 | 	add	fp, #16
0e698     A7 1E 02 FB | 	rdlong	local01, fp
0e69c     0B 1E 66 F0 | 	shl	local01, #11
0e6a0     0C 4E 85 F1 | 	sub	fp, #12
0e6a4     A7 1A 02 FB | 	rdlong	arg05, fp
0e6a8     0D 19 02 F6 | 	mov	arg04, arg05
0e6ac     01 18 66 F0 | 	shl	arg04, #1
0e6b0     0C 1F 02 F1 | 	add	local01, arg04
0e6b4     10 4E 05 F1 | 	add	fp, #16
0e6b8     A7 12 02 FB | 	rdlong	arg01, fp
0e6bc     14 4E 85 F1 | 	sub	fp, #20
0e6c0     01 1A 66 F0 | 	shl	arg05, #1
0e6c4     0D 13 02 F1 | 	add	arg01, arg05
0e6c8     09 15 E2 FA | 	rdword	arg02, arg01
0e6cc     0F 13 02 F6 | 	mov	arg01, local01
0e6d0     2C CE B0 FD | 	call	#_psdpoke
0e6d4     04 4E 05 F1 | 	add	fp, #4
0e6d8     A7 1E 02 FB | 	rdlong	local01, fp
0e6dc     01 1E 06 F1 | 	add	local01, #1
0e6e0     A7 1E 62 FC | 	wrlong	local01, fp
0e6e4     04 4E 85 F1 | 	sub	fp, #4
0e6e8     02 00 00 FF 
0e6ec     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0e6f0     A0 FF 9F CD |  if_b	jmp	#LR__1147
0e6f4     5C 05 90 FD | 	jmp	#LR__1163
0e6f8                 | LR__1148
0e6f8                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
0e6f8     04 4E 05 F1 | 	add	fp, #4
0e6fc     A7 00 68 FC | 	wrlong	#0, fp
0e700     04 4E 85 F1 | 	sub	fp, #4
0e704                 | LR__1149
0e704     10 4E 05 F1 | 	add	fp, #16
0e708     A7 1E 02 FB | 	rdlong	local01, fp
0e70c     0B 1E 66 F0 | 	shl	local01, #11
0e710     0C 4E 85 F1 | 	sub	fp, #12
0e714     A7 1A 02 FB | 	rdlong	arg05, fp
0e718     0D 19 02 F6 | 	mov	arg04, arg05
0e71c     01 18 66 F0 | 	shl	arg04, #1
0e720     0C 1F 02 F1 | 	add	local01, arg04
0e724     10 4E 05 F1 | 	add	fp, #16
0e728     A7 12 02 FB | 	rdlong	arg01, fp
0e72c     14 4E 85 F1 | 	sub	fp, #20
0e730     01 1A 66 F0 | 	shl	arg05, #1
0e734     0D 13 02 F1 | 	add	arg01, arg05
0e738     04 CF B0 FD | 	call	#_psdpeek
0e73c     FD 14 02 F6 | 	mov	arg02, result1
0e740     0F 13 02 F6 | 	mov	arg01, local01
0e744     B8 CD B0 FD | 	call	#_psdpoke
0e748     04 4E 05 F1 | 	add	fp, #4
0e74c     A7 1E 02 FB | 	rdlong	local01, fp
0e750     01 1E 06 F1 | 	add	local01, #1
0e754     A7 1E 62 FC | 	wrlong	local01, fp
0e758     04 4E 85 F1 | 	sub	fp, #4
0e75c     02 00 00 FF 
0e760     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0e764     9C FF 9F CD |  if_b	jmp	#LR__1149
0e768                 | '     return 
0e768     E8 04 90 FD | 	jmp	#LR__1163
0e76c                 | '   
0e76c                 | '                                                                         '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0e76c                 | '   return
0e76c                 | LR__1150
0e76c                 | ' for i=0 to 15 : harm(i)=0: next i  
0e76c     04 4E 05 F1 | 	add	fp, #4
0e770     A7 00 68 FC | 	wrlong	#0, fp
0e774     97 16 48 FB | 	callpa	#(@LR__1152-@LR__1151)>>2,fcache_load_ptr_
0e778                 | LR__1151
0e778     A7 1E 02 FB | 	rdlong	local01, fp
0e77c     02 1E 66 F0 | 	shl	local01, #2
0e780     38 4E 05 F1 | 	add	fp, #56
0e784     A7 1E 02 F1 | 	add	local01, fp
0e788     0F 01 68 FC | 	wrlong	#0, local01
0e78c     38 4E 85 F1 | 	sub	fp, #56
0e790     A7 1E 02 FB | 	rdlong	local01, fp
0e794     01 1E 06 F1 | 	add	local01, #1
0e798     A7 1E 62 FC | 	wrlong	local01, fp
0e79c     10 1E 56 F2 | 	cmps	local01, #16 wc
0e7a0     D4 FF 9F CD |  if_b	jmp	#LR__1151
0e7a4                 | LR__1152
0e7a4     04 4E 85 F1 | 	sub	fp, #4
0e7a8                 | ' for i=numpar to 2 step -1 
0e7a8     A7 1E 02 FB | 	rdlong	local01, fp
0e7ac     04 4E 05 F1 | 	add	fp, #4
0e7b0     A7 1E 62 FC | 	wrlong	local01, fp
0e7b4     04 4E 85 F1 | 	sub	fp, #4
0e7b8                 | LR__1153
0e7b8     80 C3 BF FD | 	call	#_pop
0e7bc     2C 4E 05 F1 | 	add	fp, #44
0e7c0     A7 FA 61 FC | 	wrlong	result1, fp
0e7c4     04 4E 05 F1 | 	add	fp, #4
0e7c8     A7 FC 61 FC | 	wrlong	result2, fp
0e7cc     04 4E 05 F1 | 	add	fp, #4
0e7d0     A7 FE 61 FC | 	wrlong	result3, fp
0e7d4     30 4E 85 F1 | 	sub	fp, #48
0e7d8     A7 1E 02 FB | 	rdlong	local01, fp
0e7dc     02 1E 86 F1 | 	sub	local01, #2
0e7e0     02 1E 66 F0 | 	shl	local01, #2
0e7e4     38 4E 05 F1 | 	add	fp, #56
0e7e8     A7 1E 02 F1 | 	add	local01, fp
0e7ec     10 4E 85 F1 | 	sub	fp, #16
0e7f0     A7 12 02 F6 | 	mov	arg01, fp
0e7f4     2C 4E 85 F1 | 	sub	fp, #44
0e7f8     64 57 B0 FD | 	call	#_converttofloat
0e7fc     0F FB 61 FC | 	wrlong	result1, local01
0e800     04 4E 05 F1 | 	add	fp, #4
0e804     A7 1E 02 FB | 	rdlong	local01, fp
0e808     01 1E 86 F1 | 	sub	local01, #1
0e80c     A7 1E 62 FC | 	wrlong	local01, fp
0e810     04 4E 85 F1 | 	sub	fp, #4
0e814     02 1E 56 F2 | 	cmps	local01, #2 wc
0e818     9C FF 9F 3D |  if_ae	jmp	#LR__1153
0e81c     1C C3 BF FD | 	call	#_pop
0e820     FF 1E 02 F6 | 	mov	local01, result3
0e824     2C 4E 05 F1 | 	add	fp, #44
0e828     A7 FA 61 FC | 	wrlong	result1, fp
0e82c     04 4E 05 F1 | 	add	fp, #4
0e830     A7 FC 61 FC | 	wrlong	result2, fp
0e834     04 4E 05 F1 | 	add	fp, #4
0e838     A7 1E 62 FC | 	wrlong	local01, fp
0e83c     08 4E 85 F1 | 	sub	fp, #8
0e840     A7 12 02 F6 | 	mov	arg01, fp
0e844     2C 4E 85 F1 | 	sub	fp, #44
0e848     68 56 B0 FD | 	call	#_converttoint
0e84c     10 4E 05 F1 | 	add	fp, #16
0e850     A7 FA 61 FC | 	wrlong	result1, fp
0e854                 | ' t1=pop()
0e854                 | ' channel=converttoint(t1) : : if channel>31 then return
0e854     FD 1E 02 F6 | 	mov	local01, result1
0e858     10 4E 85 F1 | 	sub	fp, #16
0e85c     20 1E 56 F2 | 	cmps	local01, #32 wc
0e860     F0 03 90 3D |  if_ae	jmp	#LR__1163
0e864     20 4E 05 F1 | 	add	fp, #32
0e868     A7 00 68 FC | 	wrlong	#0, fp
0e86c                 | ' max=0
0e86c                 | ' if harm(0)<0 then
0e86c     1C 4E 05 F1 | 	add	fp, #28
0e870     A7 12 02 FB | 	rdlong	arg01, fp
0e874     3C 4E 85 F1 | 	sub	fp, #60
0e878     00 14 06 F6 | 	mov	arg02, #0
0e87c     01 16 06 F6 | 	mov	arg03, #1
0e880     F4 3E B1 FD | 	call	#__system___float_cmp
0e884     00 FA 55 F2 | 	cmps	result1, #0 wc
0e888     04 01 90 3D |  if_ae	jmp	#LR__1156
0e88c     3C 4E 05 F1 | 	add	fp, #60
0e890     A7 FA 01 FB | 	rdlong	result1, fp
0e894     1F FA 05 F4 | 	bitl	result1, #31
0e898     24 4E 85 F1 | 	sub	fp, #36
0e89c     A7 FA 61 FC | 	wrlong	result1, fp
0e8a0     28 4E 05 F1 | 	add	fp, #40
0e8a4     A7 FA 01 FB | 	rdlong	result1, fp
0e8a8     1F FA 05 F4 | 	bitl	result1, #31
0e8ac     24 4E 85 F1 | 	sub	fp, #36
0e8b0     A7 FA 61 FC | 	wrlong	result1, fp
0e8b4     20 4E 05 F1 | 	add	fp, #32
0e8b8     00 C0 9F FF 
0e8bc     A7 00 68 FC | 	wrlong	##1065353216, fp
0e8c0     24 4E 85 F1 | 	sub	fp, #36
0e8c4     A7 1E 02 FB | 	rdlong	local01, fp
0e8c8     28 4E 05 F1 | 	add	fp, #40
0e8cc     A7 1E 62 FC | 	wrlong	local01, fp
0e8d0     24 4E 85 F1 | 	sub	fp, #36
0e8d4     A7 1E 02 FB | 	rdlong	local01, fp
0e8d8     28 4E 05 F1 | 	add	fp, #40
0e8dc     A7 1E 62 FC | 	wrlong	local01, fp
0e8e0                 | '   harm(0)=1
0e8e0                 | '   harm(1)=even
0e8e0                 | '   harm(2)=odd
0e8e0                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0e8e0     40 4E 85 F1 | 	sub	fp, #64
0e8e4     A7 06 68 FC | 	wrlong	#3, fp
0e8e8                 | LR__1154
0e8e8     A7 1A 02 FB | 	rdlong	arg05, fp
0e8ec     0D 21 02 F6 | 	mov	local02, arg05
0e8f0     02 20 66 F0 | 	shl	local02, #2
0e8f4     38 4E 05 F1 | 	add	fp, #56
0e8f8     A7 20 02 F1 | 	add	local02, fp
0e8fc     02 1A 86 F1 | 	sub	arg05, #2
0e900     02 1A 66 F0 | 	shl	arg05, #2
0e904     A7 1A 02 F1 | 	add	arg05, fp
0e908     0D 13 02 FB | 	rdlong	arg01, arg05
0e90c     24 4E 85 F1 | 	sub	fp, #36
0e910     A7 14 02 FB | 	rdlong	arg02, fp
0e914     18 4E 85 F1 | 	sub	fp, #24
0e918     28 3A B1 FD | 	call	#__system___float_mul
0e91c     10 FB 61 FC | 	wrlong	result1, local02
0e920     04 4E 05 F1 | 	add	fp, #4
0e924     A7 22 02 FB | 	rdlong	local03, fp
0e928     02 22 06 F1 | 	add	local03, #2
0e92c     A7 22 62 FC | 	wrlong	local03, fp
0e930     10 22 56 F2 | 	cmps	local03, #16 wc
0e934     B0 FF 9F CD |  if_b	jmp	#LR__1154
0e938                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0e938     A7 08 68 FC | 	wrlong	#4, fp
0e93c                 | LR__1155
0e93c     A7 22 02 FB | 	rdlong	local03, fp
0e940     11 21 02 F6 | 	mov	local02, local03
0e944     02 20 66 F0 | 	shl	local02, #2
0e948     38 4E 05 F1 | 	add	fp, #56
0e94c     A7 20 02 F1 | 	add	local02, fp
0e950     02 22 86 F1 | 	sub	local03, #2
0e954     02 22 66 F0 | 	shl	local03, #2
0e958     A7 22 02 F1 | 	add	local03, fp
0e95c     11 13 02 FB | 	rdlong	arg01, local03
0e960     20 4E 85 F1 | 	sub	fp, #32
0e964     A7 14 02 FB | 	rdlong	arg02, fp
0e968     1C 4E 85 F1 | 	sub	fp, #28
0e96c     D4 39 B1 FD | 	call	#__system___float_mul
0e970     10 FB 61 FC | 	wrlong	result1, local02
0e974     04 4E 05 F1 | 	add	fp, #4
0e978     A7 22 02 FB | 	rdlong	local03, fp
0e97c     02 22 06 F1 | 	add	local03, #2
0e980     A7 22 62 FC | 	wrlong	local03, fp
0e984     0F 22 56 F2 | 	cmps	local03, #15 wc
0e988     B0 FF 9F CD |  if_b	jmp	#LR__1155
0e98c     04 4E 85 F1 | 	sub	fp, #4
0e990                 | LR__1156
0e990                 | ' if harm(0)>=0 then ' synthesize with harmonics
0e990     3C 4E 05 F1 | 	add	fp, #60
0e994     A7 12 02 FB | 	rdlong	arg01, fp
0e998     3C 4E 85 F1 | 	sub	fp, #60
0e99c     00 14 06 F6 | 	mov	arg02, #0
0e9a0     01 16 66 F6 | 	neg	arg03, #1
0e9a4     D0 3D B1 FD | 	call	#__system___float_cmp
0e9a8     00 FA 55 F2 | 	cmps	result1, #0 wc
0e9ac     A4 02 90 CD |  if_b	jmp	#LR__1162
0e9b0                 | '   for i=0 to 1023
0e9b0     04 4E 05 F1 | 	add	fp, #4
0e9b4     A7 00 68 FC | 	wrlong	#0, fp
0e9b8     04 4E 85 F1 | 	sub	fp, #4
0e9bc                 | LR__1157
0e9bc     24 4E 05 F1 | 	add	fp, #36
0e9c0     A7 00 68 FC | 	wrlong	#0, fp
0e9c4                 | '     spl=0
0e9c4                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0e9c4     1C 4E 85 F1 | 	sub	fp, #28
0e9c8     A7 00 68 FC | 	wrlong	#0, fp
0e9cc                 | LR__1158
0e9cc     A7 20 02 FB | 	rdlong	local02, fp
0e9d0     02 20 66 F0 | 	shl	local02, #2
0e9d4     34 4E 05 F1 | 	add	fp, #52
0e9d8     A7 20 02 F1 | 	add	local02, fp
0e9dc     10 23 02 FB | 	rdlong	local03, local02
0e9e0     87 E4 1D FF 
0e9e4     DB 21 06 F6 | 	mov	local02, ##1003032539
0e9e8     38 4E 85 F1 | 	sub	fp, #56
0e9ec     A7 12 02 FB | 	rdlong	arg01, fp
0e9f0     04 4E 85 F1 | 	sub	fp, #4
0e9f4     09 13 52 F6 | 	abs	arg01, arg01 wc
0e9f8     1F 24 C6 C9 |  if_b	decod	local04, #31
0e9fc     00 24 06 36 |  if_ae	mov	local04, #0
0ea00     3C 35 B1 FD | 	call	#__system___float_fromuns
0ea04     12 FB 61 F5 | 	xor	result1, local04
0ea08     FD 14 02 F6 | 	mov	arg02, result1
0ea0c     10 13 02 F6 | 	mov	arg01, local02
0ea10     30 39 B1 FD | 	call	#__system___float_mul
0ea14     FD 20 02 F6 | 	mov	local02, result1
0ea18     08 4E 05 F1 | 	add	fp, #8
0ea1c     A7 12 02 FB | 	rdlong	arg01, fp
0ea20     08 4E 85 F1 | 	sub	fp, #8
0ea24     01 12 06 F1 | 	add	arg01, #1
0ea28     09 13 52 F6 | 	abs	arg01, arg01 wc
0ea2c     1F 24 C6 C9 |  if_b	decod	local04, #31
0ea30     00 24 06 36 |  if_ae	mov	local04, #0
0ea34     08 35 B1 FD | 	call	#__system___float_fromuns
0ea38     12 FB 61 F5 | 	xor	result1, local04
0ea3c     FD 14 02 F6 | 	mov	arg02, result1
0ea40     10 13 02 F6 | 	mov	arg01, local02
0ea44     FC 38 B1 FD | 	call	#__system___float_mul
0ea48     FD 12 02 F6 | 	mov	arg01, result1
0ea4c     30 42 B1 FD | 	call	#__system____builtin_sinf
0ea50     FD 14 02 F6 | 	mov	arg02, result1
0ea54     11 13 02 F6 | 	mov	arg01, local03
0ea58     E8 38 B1 FD | 	call	#__system___float_mul
0ea5c     FD 14 02 F6 | 	mov	arg02, result1
0ea60     24 4E 05 F1 | 	add	fp, #36
0ea64     A7 12 02 FB | 	rdlong	arg01, fp
0ea68     24 4E 85 F1 | 	sub	fp, #36
0ea6c     04 35 B1 FD | 	call	#__system___float_add
0ea70     24 4E 05 F1 | 	add	fp, #36
0ea74     A7 FA 61 FC | 	wrlong	result1, fp
0ea78     1C 4E 85 F1 | 	sub	fp, #28
0ea7c     A7 16 02 FB | 	rdlong	arg03, fp
0ea80     01 16 06 F1 | 	add	arg03, #1
0ea84     A7 16 62 FC | 	wrlong	arg03, fp
0ea88     10 16 56 F2 | 	cmps	arg03, #16 wc
0ea8c     3C FF 9F CD |  if_b	jmp	#LR__1158
0ea90                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0ea90     1C 4E 05 F1 | 	add	fp, #28
0ea94     A7 12 02 FB | 	rdlong	arg01, fp
0ea98     1F 12 06 F4 | 	bitl	arg01, #31
0ea9c     04 4E 85 F1 | 	sub	fp, #4
0eaa0     A7 14 02 FB | 	rdlong	arg02, fp
0eaa4     20 4E 85 F1 | 	sub	fp, #32
0eaa8     01 16 66 F6 | 	neg	arg03, #1
0eaac     C8 3C B1 FD | 	call	#__system___float_cmp
0eab0     01 FA 55 F2 | 	cmps	result1, #1 wc
0eab4     18 00 90 CD |  if_b	jmp	#LR__1159
0eab8     24 4E 05 F1 | 	add	fp, #36
0eabc     A7 FA 01 FB | 	rdlong	result1, fp
0eac0     1F FA 05 F4 | 	bitl	result1, #31
0eac4     04 4E 85 F1 | 	sub	fp, #4
0eac8     A7 FA 61 FC | 	wrlong	result1, fp
0eacc     20 4E 85 F1 | 	sub	fp, #32
0ead0                 | LR__1159
0ead0     04 4E 05 F1 | 	add	fp, #4
0ead4     A7 22 02 FB | 	rdlong	local03, fp
0ead8     01 22 06 F1 | 	add	local03, #1
0eadc     A7 22 62 FC | 	wrlong	local03, fp
0eae0     04 4E 85 F1 | 	sub	fp, #4
0eae4     02 00 00 FF 
0eae8     00 22 56 F2 | 	cmps	local03, ##1024 wc
0eaec     CC FE 9F CD |  if_b	jmp	#LR__1157
0eaf0                 | '   for i=0 to 1023
0eaf0     04 4E 05 F1 | 	add	fp, #4
0eaf4     A7 00 68 FC | 	wrlong	#0, fp
0eaf8     04 4E 85 F1 | 	sub	fp, #4
0eafc                 | LR__1160
0eafc     24 4E 05 F1 | 	add	fp, #36
0eb00     A7 00 68 FC | 	wrlong	#0, fp
0eb04                 | '     spl=0
0eb04                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0eb04     1C 4E 85 F1 | 	sub	fp, #28
0eb08     A7 00 68 FC | 	wrlong	#0, fp
0eb0c                 | LR__1161
0eb0c     A7 22 02 FB | 	rdlong	local03, fp
0eb10     02 22 66 F0 | 	shl	local03, #2
0eb14     34 4E 05 F1 | 	add	fp, #52
0eb18     A7 22 02 F1 | 	add	local03, fp
0eb1c     11 23 02 FB | 	rdlong	local03, local03
0eb20     1C 4E 85 F1 | 	sub	fp, #28
0eb24     A7 14 02 FB | 	rdlong	arg02, fp
0eb28     20 4E 85 F1 | 	sub	fp, #32
0eb2c     58 7F 23 FF 
0eb30     00 12 06 F6 | 	mov	arg01, ##1191096320
0eb34     10 3A B1 FD | 	call	#__system___float_div
0eb38     FD 14 02 F6 | 	mov	arg02, result1
0eb3c     11 13 02 F6 | 	mov	arg01, local03
0eb40     00 38 B1 FD | 	call	#__system___float_mul
0eb44     FD 22 02 F6 | 	mov	local03, result1
0eb48     87 E4 1D FF 
0eb4c     DB 21 06 F6 | 	mov	local02, ##1003032539
0eb50     04 4E 05 F1 | 	add	fp, #4
0eb54     A7 12 02 FB | 	rdlong	arg01, fp
0eb58     04 4E 85 F1 | 	sub	fp, #4
0eb5c     09 13 52 F6 | 	abs	arg01, arg01 wc
0eb60     1F 24 C6 C9 |  if_b	decod	local04, #31
0eb64     00 24 06 36 |  if_ae	mov	local04, #0
0eb68     D4 33 B1 FD | 	call	#__system___float_fromuns
0eb6c     12 FB 61 F5 | 	xor	result1, local04
0eb70     FD 14 02 F6 | 	mov	arg02, result1
0eb74     10 13 02 F6 | 	mov	arg01, local02
0eb78     C8 37 B1 FD | 	call	#__system___float_mul
0eb7c     FD 20 02 F6 | 	mov	local02, result1
0eb80     08 4E 05 F1 | 	add	fp, #8
0eb84     A7 12 02 FB | 	rdlong	arg01, fp
0eb88     08 4E 85 F1 | 	sub	fp, #8
0eb8c     01 12 06 F1 | 	add	arg01, #1
0eb90     09 13 52 F6 | 	abs	arg01, arg01 wc
0eb94     1F 24 C6 C9 |  if_b	decod	local04, #31
0eb98     00 24 06 36 |  if_ae	mov	local04, #0
0eb9c     A0 33 B1 FD | 	call	#__system___float_fromuns
0eba0     12 FB 61 F5 | 	xor	result1, local04
0eba4     FD 14 02 F6 | 	mov	arg02, result1
0eba8     10 13 02 F6 | 	mov	arg01, local02
0ebac     94 37 B1 FD | 	call	#__system___float_mul
0ebb0     FD 12 02 F6 | 	mov	arg01, result1
0ebb4     C8 40 B1 FD | 	call	#__system____builtin_sinf
0ebb8     FD 14 02 F6 | 	mov	arg02, result1
0ebbc     11 13 02 F6 | 	mov	arg01, local03
0ebc0     80 37 B1 FD | 	call	#__system___float_mul
0ebc4     FD 14 02 F6 | 	mov	arg02, result1
0ebc8     24 4E 05 F1 | 	add	fp, #36
0ebcc     A7 12 02 FB | 	rdlong	arg01, fp
0ebd0     24 4E 85 F1 | 	sub	fp, #36
0ebd4     9C 33 B1 FD | 	call	#__system___float_add
0ebd8     24 4E 05 F1 | 	add	fp, #36
0ebdc     A7 FA 61 FC | 	wrlong	result1, fp
0ebe0     1C 4E 85 F1 | 	sub	fp, #28
0ebe4     A7 22 02 FB | 	rdlong	local03, fp
0ebe8     01 22 06 F1 | 	add	local03, #1
0ebec     A7 22 62 FC | 	wrlong	local03, fp
0ebf0     10 22 56 F2 | 	cmps	local03, #16 wc
0ebf4     14 FF 9F CD |  if_b	jmp	#LR__1161
0ebf8     08 4E 05 F1 | 	add	fp, #8
0ebfc     A7 22 02 FB | 	rdlong	local03, fp
0ec00     0B 22 66 F0 | 	shl	local03, #11
0ec04     0C 4E 85 F1 | 	sub	fp, #12
0ec08     A7 20 02 FB | 	rdlong	local02, fp
0ec0c     01 20 66 F0 | 	shl	local02, #1
0ec10     10 23 02 F1 | 	add	local03, local02
0ec14     20 4E 05 F1 | 	add	fp, #32
0ec18     A7 12 02 FB | 	rdlong	arg01, fp
0ec1c     24 4E 85 F1 | 	sub	fp, #36
0ec20     01 14 06 F6 | 	mov	arg02, #1
0ec24     E4 3B B1 FD | 	call	#__system___float_tointeger
0ec28     FD 14 02 F6 | 	mov	arg02, result1
0ec2c     11 13 02 F6 | 	mov	arg01, local03
0ec30     CC C8 B0 FD | 	call	#_psdpoke
0ec34     04 4E 05 F1 | 	add	fp, #4
0ec38     A7 22 02 FB | 	rdlong	local03, fp
0ec3c     01 22 06 F1 | 	add	local03, #1
0ec40     A7 22 62 FC | 	wrlong	local03, fp
0ec44     04 4E 85 F1 | 	sub	fp, #4
0ec48     02 00 00 FF 
0ec4c     00 22 56 F2 | 	cmps	local03, ##1024 wc
0ec50     A8 FE 9F CD |  if_b	jmp	#LR__1160
0ec54                 | LR__1162
0ec54                 | LR__1163
0ec54     A7 F0 03 F6 | 	mov	ptra, fp
0ec58     B2 00 A0 FD | 	call	#popregs_
0ec5c                 | _do_defsnd_ret
0ec5c     2D 00 64 FD | 	ret
0ec60                 | 
0ec60                 | ' 
0ec60                 | ' ' ---------------  List the program. 
0ec60                 | ' 
0ec60                 | ' sub do_list
0ec60                 | _do_list
0ec60     02 4A 05 F6 | 	mov	COUNT_, #2
0ec64     A8 00 A0 FD | 	call	#pushregs_
0ec68     B8 F0 07 F1 | 	add	ptra, #184
0ec6c     04 4E 05 F1 | 	add	fp, #4
0ec70     A7 00 68 FC | 	wrlong	#0, fp
0ec74     04 4E 05 F1 | 	add	fp, #4
0ec78     FF FF BF FF 
0ec7c     A7 FE 6B FC | 	wrlong	##2147483647, fp
0ec80     08 4E 85 F1 | 	sub	fp, #8
0ec84     4A 00 00 FF 
0ec88     B0 E4 05 F1 | 	add	objptr, ##38064
0ec8c     F2 1E 02 FB | 	rdlong	local01, objptr
0ec90     0F 17 02 F6 | 	mov	arg03, local01
0ec94     01 16 66 F0 | 	shl	arg03, #1
0ec98     0F 17 02 F1 | 	add	arg03, local01
0ec9c     02 16 66 F0 | 	shl	arg03, #2
0eca0     03 00 00 FF 
0eca4     04 E4 85 F1 | 	sub	objptr, ##1540
0eca8     F2 16 02 F1 | 	add	arg03, objptr
0ecac     0B 17 02 FB | 	rdlong	arg03, arg03
0ecb0     A7 16 62 FC | 	wrlong	arg03, fp
0ecb4                 | ' 
0ecb4                 | ' startline=0 : endline=$7FFFFFFF
0ecb4                 | ' numpar=compiledline(lineptr_e).result.uresult
0ecb4                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
0ecb4     01 16 0E F2 | 	cmp	arg03, #1 wz
0ecb8     47 00 00 FF 
0ecbc     AC E4 85 F1 | 	sub	objptr, ##36524
0ecc0     3C 00 90 5D |  if_ne	jmp	#LR__1170
0ecc4     74 BE BF FD | 	call	#_pop
0ecc8     FF 1E 02 F6 | 	mov	local01, result3
0eccc     0C 4E 05 F1 | 	add	fp, #12
0ecd0     A7 FA 61 FC | 	wrlong	result1, fp
0ecd4     04 4E 05 F1 | 	add	fp, #4
0ecd8     A7 FC 61 FC | 	wrlong	result2, fp
0ecdc     04 4E 05 F1 | 	add	fp, #4
0ece0     A7 1E 62 FC | 	wrlong	local01, fp
0ece4     08 4E 85 F1 | 	sub	fp, #8
0ece8     A7 12 02 F6 | 	mov	arg01, fp
0ecec     0C 4E 85 F1 | 	sub	fp, #12
0ecf0     C0 51 B0 FD | 	call	#_converttoint
0ecf4     04 4E 05 F1 | 	add	fp, #4
0ecf8     A7 FA 61 FC | 	wrlong	result1, fp
0ecfc     04 4E 85 F1 | 	sub	fp, #4
0ed00                 | LR__1170
0ed00                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
0ed00     A7 16 02 FB | 	rdlong	arg03, fp
0ed04     02 16 0E F2 | 	cmp	arg03, #2 wz
0ed08     7C 00 90 5D |  if_ne	jmp	#LR__1171
0ed0c     2C BE BF FD | 	call	#_pop
0ed10     FF 1E 02 F6 | 	mov	local01, result3
0ed14     0C 4E 05 F1 | 	add	fp, #12
0ed18     A7 FA 61 FC | 	wrlong	result1, fp
0ed1c     04 4E 05 F1 | 	add	fp, #4
0ed20     A7 FC 61 FC | 	wrlong	result2, fp
0ed24     04 4E 05 F1 | 	add	fp, #4
0ed28     A7 1E 62 FC | 	wrlong	local01, fp
0ed2c     08 4E 85 F1 | 	sub	fp, #8
0ed30     A7 12 02 F6 | 	mov	arg01, fp
0ed34     0C 4E 85 F1 | 	sub	fp, #12
0ed38     78 51 B0 FD | 	call	#_converttoint
0ed3c     FD 1E 02 F6 | 	mov	local01, result1
0ed40     08 4E 05 F1 | 	add	fp, #8
0ed44     A7 1E 62 FC | 	wrlong	local01, fp
0ed48     08 4E 85 F1 | 	sub	fp, #8
0ed4c     EC BD BF FD | 	call	#_pop
0ed50     FF 1E 02 F6 | 	mov	local01, result3
0ed54     0C 4E 05 F1 | 	add	fp, #12
0ed58     A7 FA 61 FC | 	wrlong	result1, fp
0ed5c     04 4E 05 F1 | 	add	fp, #4
0ed60     A7 FC 61 FC | 	wrlong	result2, fp
0ed64     04 4E 05 F1 | 	add	fp, #4
0ed68     A7 1E 62 FC | 	wrlong	local01, fp
0ed6c     08 4E 85 F1 | 	sub	fp, #8
0ed70     A7 12 02 F6 | 	mov	arg01, fp
0ed74     0C 4E 85 F1 | 	sub	fp, #12
0ed78     38 51 B0 FD | 	call	#_converttoint
0ed7c     04 4E 05 F1 | 	add	fp, #4
0ed80     A7 FA 61 FC | 	wrlong	result1, fp
0ed84     04 4E 85 F1 | 	sub	fp, #4
0ed88                 | LR__1171
0ed88                 | ' 
0ed88                 | ' 
0ed88                 | ' print
0ed88     00 12 06 F6 | 	mov	arg01, #0
0ed8c     04 64 B1 FD | 	call	#__system___getiolock_0508
0ed90     FD 12 02 F6 | 	mov	arg01, result1
0ed94     64 0A B1 FD | 	call	#__system___lockmem
0ed98     00 12 06 F6 | 	mov	arg01, #0
0ed9c     0A 14 06 F6 | 	mov	arg02, #10
0eda0     00 16 06 F6 | 	mov	arg03, #0
0eda4     F0 16 B1 FD | 	call	#__system___basic_print_char
0eda8     00 12 06 F6 | 	mov	arg01, #0
0edac     E4 63 B1 FD | 	call	#__system___getiolock_0508
0edb0     FD 00 68 FC | 	wrlong	#0, result1
0edb4     4A 00 00 FF 
0edb8     B4 E4 05 F1 | 	add	objptr, ##38068
0edbc     F2 20 02 FB | 	rdlong	local02, objptr
0edc0     0F 00 00 FF 
0edc4     A4 E5 05 F1 | 	add	objptr, ##8100
0edc8     F2 20 62 FC | 	wrlong	local02, objptr
0edcc     5A 00 00 FF 
0edd0     58 E4 85 F1 | 	sub	objptr, ##46168
0edd4                 | ' do 
0edd4                 | LR__1172
0edd4     20 4E 05 F1 | 	add	fp, #32
0edd8     A7 12 02 F6 | 	mov	arg01, fp
0eddc     20 4E 85 F1 | 	sub	fp, #32
0ede0     5A 00 00 FF 
0ede4     58 E4 05 F1 | 	add	objptr, ##46168
0ede8     F2 14 02 FB | 	rdlong	arg02, objptr
0edec     18 16 06 F6 | 	mov	arg03, #24
0edf0     4E 00 00 FF 
0edf4     8C E5 85 F1 | 	sub	objptr, ##40332
0edf8     C0 FD B0 FD | 	call	#_psram_spin2_read1
0edfc     0B 00 00 FF 
0ee00     CC E4 85 F1 | 	sub	objptr, ##5836
0ee04                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
0ee04                 | '   
0ee04                 | '   if header(0)<> $FFFFFFFF then
0ee04     20 4E 05 F1 | 	add	fp, #32
0ee08     A7 20 02 FB | 	rdlong	local02, fp
0ee0c     20 4E 85 F1 | 	sub	fp, #32
0ee10     FF FF 7F FF 
0ee14     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0ee18     A8 00 90 AD |  if_e	jmp	#LR__1174
0ee1c     38 4E 05 F1 | 	add	fp, #56
0ee20     3F 16 06 F6 | 	mov	arg03, #63
0ee24     28 16 62 FD | 	setq	arg03
0ee28     A7 00 68 FC | 	wrlong	#0, fp
0ee2c     A7 12 02 F6 | 	mov	arg01, fp
0ee30     10 4E 85 F1 | 	sub	fp, #16
0ee34     A7 14 02 FB | 	rdlong	arg02, fp
0ee38     04 4E 05 F1 | 	add	fp, #4
0ee3c     A7 16 02 FB | 	rdlong	arg03, fp
0ee40     2C 4E 85 F1 | 	sub	fp, #44
0ee44     0B 00 00 FF 
0ee48     CC E4 05 F1 | 	add	objptr, ##5836
0ee4c     6C FD B0 FD | 	call	#_psram_spin2_read1
0ee50     0B 00 00 FF 
0ee54     CC E4 85 F1 | 	sub	objptr, ##5836
0ee58                 | '     longfill(linebuf,0,64)
0ee58                 | '     psram.read1(varptr(linebuf),header(2),header(3))
0ee58                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
0ee58     20 4E 05 F1 | 	add	fp, #32
0ee5c     A7 20 02 FB | 	rdlong	local02, fp
0ee60     1C 4E 85 F1 | 	sub	fp, #28
0ee64     A7 1E 02 FB | 	rdlong	local01, fp
0ee68     04 4E 85 F1 | 	sub	fp, #4
0ee6c     0F 21 52 F2 | 	cmps	local02, local01 wc
0ee70     30 00 90 CD |  if_b	jmp	#LR__1173
0ee74     20 4E 05 F1 | 	add	fp, #32
0ee78     A7 20 02 FB | 	rdlong	local02, fp
0ee7c     18 4E 85 F1 | 	sub	fp, #24
0ee80     A7 16 02 FB | 	rdlong	arg03, fp
0ee84     08 4E 85 F1 | 	sub	fp, #8
0ee88     0B 21 5A F2 | 	cmps	local02, arg03 wcz
0ee8c     14 00 90 1D |  if_a	jmp	#LR__1173
0ee90     38 4E 05 F1 | 	add	fp, #56
0ee94     A7 12 02 F6 | 	mov	arg01, fp
0ee98     38 4E 85 F1 | 	sub	fp, #56
0ee9c                 | ' 
0ee9c                 | ' write(text)
0ee9c     74 F6 B0 FD | 	call	#_hg010b_spin2_write
0eea0                 | ' crlf
0eea0     3C F9 B0 FD | 	call	#_hg010b_spin2_crlf
0eea4                 | LR__1173
0eea4     34 4E 05 F1 | 	add	fp, #52
0eea8     A7 20 02 FB | 	rdlong	local02, fp
0eeac     34 4E 85 F1 | 	sub	fp, #52
0eeb0     5A 00 00 FF 
0eeb4     58 E4 05 F1 | 	add	objptr, ##46168
0eeb8     F2 20 62 FC | 	wrlong	local02, objptr
0eebc     5A 00 00 FF 
0eec0     58 E4 85 F1 | 	sub	objptr, ##46168
0eec4                 | LR__1174
0eec4     34 4E 05 F1 | 	add	fp, #52
0eec8     A7 20 02 FB | 	rdlong	local02, fp
0eecc     34 4E 85 F1 | 	sub	fp, #52
0eed0     FF FF 3F FF 
0eed4     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0eed8     20 4E 05 51 |  if_ne	add	fp, #32
0eedc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0eee0     20 4E 85 51 |  if_ne	sub	fp, #32
0eee4     FF FF 7F 5F 
0eee8     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0eeec     E4 FE 9F 5D |  if_ne	jmp	#LR__1172
0eef0     A7 F0 03 F6 | 	mov	ptra, fp
0eef4     B2 00 A0 FD | 	call	#popregs_
0eef8                 | _do_list_ret
0eef8     2D 00 64 FD | 	ret
0eefc                 | 
0eefc                 | ' 
0eefc                 | ' '---------------- Clear the program
0eefc                 | ' 
0eefc                 | ' sub do_new
0eefc                 | _do_new
0eefc     03 4A 05 F6 | 	mov	COUNT_, #3
0ef00     A8 00 A0 FD | 	call	#pushregs_
0ef04     13 12 C6 F9 | 	decod	arg01, #19
0ef08     01 14 66 F6 | 	neg	arg02, #1
0ef0c     A8 C5 B0 FD | 	call	#_pslpoke
0ef10     35 00 00 FF 
0ef14     38 E4 05 F1 | 	add	objptr, ##27192
0ef18     F2 00 68 FC | 	wrlong	#0, objptr
0ef1c                 | ' 
0ef1c                 | ' pslpoke(memlo,$FFFFFFFF)
0ef1c                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
0ef1c     00 1E 06 F6 | 	mov	local01, #0
0ef20     20 00 00 FF 
0ef24     10 E4 85 F1 | 	sub	objptr, ##16400
0ef28     97 1E 48 FB | 	callpa	#(@LR__1181-@LR__1180)>>2,fcache_load_ptr_
0ef2c                 | LR__1180
0ef2c     0F 17 02 F6 | 	mov	arg03, local01
0ef30     04 16 66 F0 | 	shl	arg03, #4
0ef34     F2 16 02 F1 | 	add	arg03, objptr
0ef38     7A 01 00 FF 
0ef3c     AD 14 06 F6 | 	mov	arg02, ##@LR__5225
0ef40     0B 15 62 FC | 	wrlong	arg02, arg03
0ef44     0F 21 02 F6 | 	mov	local02, local01
0ef48     04 20 66 F0 | 	shl	local02, #4
0ef4c     F2 20 02 F1 | 	add	local02, objptr
0ef50     0C 20 06 F1 | 	add	local02, #12
0ef54     10 01 68 FC | 	wrlong	#0, local02
0ef58     01 1E 06 F1 | 	add	local01, #1
0ef5c     02 00 00 FF 
0ef60     01 1E 56 F2 | 	cmps	local01, ##1025 wc
0ef64     C4 FF 9F CD |  if_b	jmp	#LR__1180
0ef68                 | LR__1181
0ef68     35 00 00 FF 
0ef6c     8C E4 05 F1 | 	add	objptr, ##27276
0ef70     00 04 80 FF 
0ef74     F2 00 68 FC | 	wrlong	##524288, objptr
0ef78     0E 00 00 FF 
0ef7c     38 E4 05 F1 | 	add	objptr, ##7224
0ef80     00 04 80 FF 
0ef84     F2 00 68 FC | 	wrlong	##524288, objptr
0ef88     04 E4 05 F1 | 	add	objptr, #4
0ef8c     00 04 80 FF 
0ef90     F2 00 68 FC | 	wrlong	##524288, objptr
0ef94     15 00 00 FF 
0ef98     68 E4 85 F1 | 	sub	objptr, ##10856
0ef9c     F2 00 68 FC | 	wrlong	#0, objptr
0efa0     07 00 00 FF 
0efa4     24 E4 05 F1 | 	add	objptr, ##3620
0efa8     F2 00 68 FC | 	wrlong	#0, objptr
0efac     07 00 00 FF 
0efb0     20 E4 85 F1 | 	sub	objptr, ##3616
0efb4     00 04 80 FF 
0efb8     F2 00 68 FC | 	wrlong	##524288, objptr
0efbc     0F 00 00 FF 
0efc0     38 E4 05 F1 | 	add	objptr, ##7736
0efc4     F2 00 68 FC | 	wrlong	#0, objptr
0efc8     08 00 00 FF 
0efcc     0C E4 85 F1 | 	sub	objptr, ##4108
0efd0     F2 00 68 FC | 	wrlong	#0, objptr
0efd4     04 E4 05 F1 | 	add	objptr, #4
0efd8     FF FF FF FF 
0efdc     F2 FE 6B FC | 	wrlong	##-1, objptr
0efe0     0E 00 00 FF 
0efe4     58 E4 05 F1 | 	add	objptr, ##7256
0efe8     F2 00 68 FC | 	wrlong	#0, objptr
0efec     04 E4 05 F1 | 	add	objptr, #4
0eff0     F2 00 68 FC | 	wrlong	#0, objptr
0eff4                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
0eff4                 | ' stackpointer=0
0eff4                 | ' lineptr=0 
0eff4                 | ' programptr=memlo : stringptr=0
0eff4                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
0eff4                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
0eff4     00 1E 06 F6 | 	mov	local01, #0
0eff8     06 00 00 FF 
0effc     4C E4 85 F1 | 	sub	objptr, ##3148
0f000     97 16 48 FB | 	callpa	#(@LR__1183-@LR__1182)>>2,fcache_load_ptr_
0f004                 | LR__1182
0f004     0F 21 02 F6 | 	mov	local02, local01
0f008     02 20 66 F0 | 	shl	local02, #2
0f00c     0F 21 02 F1 | 	add	local02, local01
0f010     02 20 66 F0 | 	shl	local02, #2
0f014     F2 20 02 F1 | 	add	local02, objptr
0f018     08 20 06 F1 | 	add	local02, #8
0f01c     FF FF FF FF 
0f020     10 FF 6B FC | 	wrlong	##-1, local02
0f024     01 1E 06 F1 | 	add	local01, #1
0f028     41 1E 56 F2 | 	cmps	local01, #65 wc
0f02c     D4 FF 9F CD |  if_b	jmp	#LR__1182
0f030                 | LR__1183
0f030     52 00 00 FF 
0f034     CC E4 85 F1 | 	sub	objptr, ##42188
0f038                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
0f038     00 1E 06 F6 | 	mov	local01, #0
0f03c                 | LR__1184
0f03c     0F 21 02 F6 | 	mov	local02, local01
0f040     02 20 66 F0 | 	shl	local02, #2
0f044     59 00 00 FF 
0f048     74 E5 05 F1 | 	add	objptr, ##45940
0f04c     F2 20 02 F1 | 	add	local02, objptr
0f050     10 23 0A FB | 	rdlong	local03, local02 wz
0f054     59 00 00 FF 
0f058     74 E5 85 F1 | 	sub	objptr, ##45940
0f05c     34 00 90 AD |  if_e	jmp	#LR__1185
0f060     0F 13 02 F6 | 	mov	arg01, local01
0f064     00 14 06 F6 | 	mov	arg02, #0
0f068     00 16 06 F6 | 	mov	arg03, #0
0f06c     C4 E3 B0 FD | 	call	#_hg010b_spin2_setspritesize
0f070     0F 21 02 F6 | 	mov	local02, local01
0f074     02 20 66 F0 | 	shl	local02, #2
0f078     59 00 00 FF 
0f07c     74 E5 05 F1 | 	add	objptr, ##45940
0f080     F2 20 02 F1 | 	add	local02, objptr
0f084     10 13 02 FB | 	rdlong	arg01, local02
0f088     59 00 00 FF 
0f08c     74 E5 85 F1 | 	sub	objptr, ##45940
0f090     F0 46 B1 FD | 	call	#__system___gc_free
0f094                 | LR__1185
0f094     01 1E 06 F1 | 	add	local01, #1
0f098     10 1E 56 F2 | 	cmps	local01, #16 wc
0f09c     9C FF 9F CD |  if_b	jmp	#LR__1184
0f0a0     59 00 00 FF 
0f0a4     C8 E5 05 F1 | 	add	objptr, ##46024
0f0a8     00 C0 9F FF 
0f0ac     F2 00 68 FC | 	wrlong	##1065353216, objptr
0f0b0     04 E4 05 F1 | 	add	objptr, #4
0f0b4     00 C0 9F FF 
0f0b8     F2 00 68 FC | 	wrlong	##1065353216, objptr
0f0bc     59 00 00 FF 
0f0c0     C8 E5 85 F1 | 	sub	objptr, ##46024
0f0c4     F2 22 02 FB | 	rdlong	local03, objptr
0f0c8     59 00 00 FF 
0f0cc     B4 E5 05 F1 | 	add	objptr, ##46004
0f0d0     F2 22 62 FC | 	wrlong	local03, objptr
0f0d4     59 00 00 FF 
0f0d8     B8 E5 85 F1 | 	sub	objptr, ##46008
0f0dc     11 12 06 F6 | 	mov	arg01, #17
0f0e0     08 14 06 F6 | 	mov	arg02, #8
0f0e4     10 16 06 F6 | 	mov	arg03, #16
0f0e8     48 E3 B0 FD | 	call	#_hg010b_spin2_setspritesize
0f0ec     10 12 06 F6 | 	mov	arg01, #16
0f0f0     20 14 06 F6 | 	mov	arg02, #32
0f0f4     20 16 06 F6 | 	mov	arg03, #32
0f0f8     38 E3 B0 FD | 	call	#_hg010b_spin2_setspritesize
0f0fc     7A 01 00 FF 
0f100     AE 22 06 F6 | 	mov	local03, ##@LR__5226
0f104     59 00 00 FF 
0f108     E4 E5 05 F1 | 	add	objptr, ##46052
0f10c     F2 22 62 FC | 	wrlong	local03, objptr
0f110     59 00 00 FF 
0f114     E4 E5 85 F1 | 	sub	objptr, ##46052
0f118     F8 B5 B0 FD | 	call	#_init_audio
0f11c     A7 F0 03 F6 | 	mov	ptra, fp
0f120     B2 00 A0 FD | 	call	#popregs_
0f124                 | _do_new_ret
0f124     2D 00 64 FD | 	ret
0f128                 | 
0f128                 | ' 
0f128                 | ' '----------------------- goto
0f128                 | ' sub do_fast_goto
0f128                 | _do_fast_goto
0f128     02 4A 05 F6 | 	mov	COUNT_, #2
0f12c     A8 00 A0 FD | 	call	#pushregs_
0f130                 | _do_fast_goto_enter
0f130     4A 00 00 FF 
0f134     B0 E4 05 F1 | 	add	objptr, ##38064
0f138     F2 12 02 FB | 	rdlong	arg01, objptr
0f13c     09 1F 02 F6 | 	mov	local01, arg01
0f140     01 1E 66 F0 | 	shl	local01, #1
0f144     09 1F 02 F1 | 	add	local01, arg01
0f148     02 1E 66 F0 | 	shl	local01, #2
0f14c     03 00 00 FF 
0f150     04 E4 85 F1 | 	sub	objptr, ##1540
0f154     F2 1E 02 F1 | 	add	local01, objptr
0f158     0F 21 02 FB | 	rdlong	local02, local01
0f15c     10 13 02 F6 | 	mov	arg01, local02
0f160     47 00 00 FF 
0f164     AC E4 85 F1 | 	sub	objptr, ##36524
0f168     7C C4 B0 FD | 	call	#_pslpeek
0f16c     FD 12 02 F6 | 	mov	arg01, result1
0f170                 | ' 
0f170                 | ' testptr=compiledline(lineptr_e).result.uresult
0f170                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
0f170                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
0f170     4A 00 00 FF 
0f174     B0 E4 05 F1 | 	add	objptr, ##38064
0f178     F2 FA 01 FB | 	rdlong	result1, objptr
0f17c     FD 1E 02 F6 | 	mov	local01, result1
0f180     01 1E 66 F0 | 	shl	local01, #1
0f184     FD 1E 02 F1 | 	add	local01, result1
0f188     02 1E 66 F0 | 	shl	local01, #2
0f18c     03 00 00 FF 
0f190     04 E4 85 F1 | 	sub	objptr, ##1540
0f194     F2 1E 02 F1 | 	add	local01, objptr
0f198     04 1E 06 F1 | 	add	local01, #4
0f19c     0F 1F 02 FB | 	rdlong	local01, local01
0f1a0     0F 13 0A F2 | 	cmp	arg01, local01 wz
0f1a4     47 00 00 FF 
0f1a8     AC E4 85 F1 | 	sub	objptr, ##36524
0f1ac     58 00 90 5D |  if_ne	jmp	#LR__1190
0f1b0     58 00 00 FF 
0f1b4     EC E4 05 F1 | 	add	objptr, ##45292
0f1b8     F2 20 62 FC | 	wrlong	local02, objptr
0f1bc     0E 00 00 FF 
0f1c0     40 E4 85 F1 | 	sub	objptr, ##7232
0f1c4     F2 20 02 FB | 	rdlong	local02, objptr
0f1c8     01 20 86 F1 | 	sub	local02, #1
0f1cc     04 E4 05 F1 | 	add	objptr, #4
0f1d0     F2 20 62 FC | 	wrlong	local02, objptr
0f1d4                 | '   runptr=testptr
0f1d4                 | '   lineptr_e=lineptr-1
0f1d4                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
0f1d4     0E 00 00 FF 
0f1d8     60 E4 05 F1 | 	add	objptr, ##7264
0f1dc     F2 20 02 FB | 	rdlong	local02, objptr
0f1e0     58 00 00 FF 
0f1e4     10 E5 85 F1 | 	sub	objptr, ##45328
0f1e8     FF FF 3F FF 
0f1ec     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0f1f0     58 00 00 AF 
0f1f4     10 E5 05 A1 |  if_e	add	objptr, ##45328
0f1f8     F2 00 68 AC |  if_e	wrlong	#0, objptr
0f1fc     58 00 00 AF 
0f200     10 E5 85 A1 |  if_e	sub	objptr, ##45328
0f204     04 00 90 FD | 	jmp	#LR__1191
0f208                 | LR__1190
0f208     0C 00 B0 FD | 	call	#_do_find_goto
0f20c                 | LR__1191
0f20c     A7 F0 03 F6 | 	mov	ptra, fp
0f210     B2 00 A0 FD | 	call	#popregs_
0f214                 | _do_fast_goto_ret
0f214     2D 00 64 FD | 	ret
0f218                 | 
0f218                 | ' 
0f218                 | ' 
0f218                 | ' 
0f218                 | ' 
0f218                 | ' sub do_find_goto
0f218                 | _do_find_goto
0f218     03 4A 05 F6 | 	mov	COUNT_, #3
0f21c     A8 00 A0 FD | 	call	#pushregs_
0f220     24 F0 07 F1 | 	add	ptra, #36
0f224                 | _do_find_goto_enter
0f224     4A 00 00 FF 
0f228     B0 E4 05 F1 | 	add	objptr, ##38064
0f22c     F2 1E 02 FB | 	rdlong	local01, objptr
0f230     0F 21 02 F6 | 	mov	local02, local01
0f234     01 20 66 F0 | 	shl	local02, #1
0f238     0F 21 02 F1 | 	add	local02, local01
0f23c     02 20 66 F0 | 	shl	local02, #2
0f240     03 00 00 FF 
0f244     04 E4 85 F1 | 	sub	objptr, ##1540
0f248     F2 20 02 F1 | 	add	local02, objptr
0f24c     04 20 06 F1 | 	add	local02, #4
0f250     10 21 02 FB | 	rdlong	local02, local02
0f254     A7 20 62 FC | 	wrlong	local02, fp
0f258     03 00 00 FF 
0f25c     08 E4 05 F1 | 	add	objptr, ##1544
0f260     F2 22 02 FB | 	rdlong	local03, objptr
0f264     4A 00 00 FF 
0f268     B4 E4 85 F1 | 	sub	objptr, ##38068
0f26c     04 4E 05 F1 | 	add	fp, #4
0f270     A7 22 62 FC | 	wrlong	local03, fp
0f274     04 4E 85 F1 | 	sub	fp, #4
0f278                 | ' 
0f278                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
0f278                 | '  ' print "find goto"                                                                     'print gotoline 
0f278                 | ' gotoptr=programstart
0f278                 | ' do
0f278                 | LR__1200
0f278     0C 4E 05 F1 | 	add	fp, #12
0f27c     A7 12 02 F6 | 	mov	arg01, fp
0f280     08 4E 85 F1 | 	sub	fp, #8
0f284     A7 14 02 FB | 	rdlong	arg02, fp
0f288     04 4E 85 F1 | 	sub	fp, #4
0f28c     18 16 06 F6 | 	mov	arg03, #24
0f290     0B 00 00 FF 
0f294     CC E4 05 F1 | 	add	objptr, ##5836
0f298     20 F9 B0 FD | 	call	#_psram_spin2_read1
0f29c     0B 00 00 FF 
0f2a0     CC E4 85 F1 | 	sub	objptr, ##5836
0f2a4                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
0f2a4                 | '   if gotoheader(0)<>$FFFFFFFF then
0f2a4     0C 4E 05 F1 | 	add	fp, #12
0f2a8     A7 22 02 FB | 	rdlong	local03, fp
0f2ac     0C 4E 85 F1 | 	sub	fp, #12
0f2b0     FF FF 7F FF 
0f2b4     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0f2b8     24 00 90 AD |  if_e	jmp	#LR__1201
0f2bc     04 4E 05 F1 | 	add	fp, #4
0f2c0     A7 22 02 FB | 	rdlong	local03, fp
0f2c4     04 4E 05 F1 | 	add	fp, #4
0f2c8     A7 22 62 FC | 	wrlong	local03, fp
0f2cc     18 4E 05 F1 | 	add	fp, #24
0f2d0     A7 22 02 FB | 	rdlong	local03, fp
0f2d4     1C 4E 85 F1 | 	sub	fp, #28
0f2d8     A7 22 62 FC | 	wrlong	local03, fp
0f2dc     04 4E 85 F1 | 	sub	fp, #4
0f2e0                 | LR__1201
0f2e0     20 4E 05 F1 | 	add	fp, #32
0f2e4     A7 22 02 FB | 	rdlong	local03, fp
0f2e8     20 4E 85 F1 | 	sub	fp, #32
0f2ec     FF FF 3F FF 
0f2f0     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0f2f4     0C 4E 05 51 |  if_ne	add	fp, #12
0f2f8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0f2fc     0C 4E 85 51 |  if_ne	sub	fp, #12
0f300     FF FF 7F 5F 
0f304     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0f308     18 00 90 AD |  if_e	jmp	#LR__1202
0f30c     0C 4E 05 F1 | 	add	fp, #12
0f310     A7 22 02 FB | 	rdlong	local03, fp
0f314     0C 4E 85 F1 | 	sub	fp, #12
0f318     A7 20 02 FB | 	rdlong	local02, fp
0f31c     10 23 0A F2 | 	cmp	local03, local02 wz
0f320     54 FF 9F 5D |  if_ne	jmp	#LR__1200
0f324                 | LR__1202
0f324                 | ' 
0f324                 | ' if gotoheader(0)=gotoline then
0f324     0C 4E 05 F1 | 	add	fp, #12
0f328     A7 22 02 FB | 	rdlong	local03, fp
0f32c     0C 4E 85 F1 | 	sub	fp, #12
0f330     A7 1E 02 FB | 	rdlong	local01, fp
0f334     0F 23 0A F2 | 	cmp	local03, local01 wz
0f338     D8 00 90 5D |  if_ne	jmp	#LR__1203
0f33c     4A 00 00 FF 
0f340     B0 E4 05 F1 | 	add	objptr, ##38064
0f344     F2 1E 02 FB | 	rdlong	local01, objptr
0f348     0F 21 02 F6 | 	mov	local02, local01
0f34c     01 20 66 F0 | 	shl	local02, #1
0f350     0F 21 02 F1 | 	add	local02, local01
0f354     02 20 66 F0 | 	shl	local02, #2
0f358     03 00 00 FF 
0f35c     04 E4 85 F1 | 	sub	objptr, ##1540
0f360     F2 20 02 F1 | 	add	local02, objptr
0f364     08 4E 05 F1 | 	add	fp, #8
0f368     A7 22 02 FB | 	rdlong	local03, fp
0f36c     10 23 62 FC | 	wrlong	local03, local02
0f370     03 00 00 FF 
0f374     04 E4 05 F1 | 	add	objptr, ##1540
0f378     F2 1E 02 FB | 	rdlong	local01, objptr
0f37c     0F 21 02 F6 | 	mov	local02, local01
0f380     01 20 66 F0 | 	shl	local02, #1
0f384     0F 21 02 F1 | 	add	local02, local01
0f388     02 20 66 F0 | 	shl	local02, #2
0f38c     03 00 00 FF 
0f390     04 E4 85 F1 | 	sub	objptr, ##1540
0f394     F2 20 02 F1 | 	add	local02, objptr
0f398     08 20 06 F1 | 	add	local02, #8
0f39c     10 9D 68 FC | 	wrlong	#78, local02
0f3a0     03 00 00 FF 
0f3a4     04 E4 05 F1 | 	add	objptr, ##1540
0f3a8     F2 20 02 FB | 	rdlong	local02, objptr
0f3ac     10 13 02 F6 | 	mov	arg01, local02
0f3b0     01 12 66 F0 | 	shl	arg01, #1
0f3b4     10 13 02 F1 | 	add	arg01, local02
0f3b8     02 12 66 F0 | 	shl	arg01, #2
0f3bc     03 00 00 FF 
0f3c0     04 E4 85 F1 | 	sub	objptr, ##1540
0f3c4     F2 12 02 F1 | 	add	arg01, objptr
0f3c8     11 00 00 FF 
0f3cc     48 E4 05 F1 | 	add	objptr, ##8776
0f3d0     F2 14 02 FB | 	rdlong	arg02, objptr
0f3d4     02 22 06 F6 | 	mov	local03, #2
0f3d8     10 23 02 F1 | 	add	local03, local02
0f3dc     13 00 00 FF 
0f3e0     60 E4 85 F1 | 	sub	objptr, ##9824
0f3e4     F2 16 02 FB | 	rdlong	arg03, objptr
0f3e8     0B 23 02 FD | 	qmul	local03, arg03
0f3ec     08 4E 85 F1 | 	sub	fp, #8
0f3f0     39 00 00 FF 
0f3f4     C8 E5 85 F1 | 	sub	objptr, ##29640
0f3f8     18 22 62 FD | 	getqx	local03
0f3fc     11 15 02 F1 | 	add	arg02, local03
0f400     54 F8 B0 FD | 	call	#_psram_spin2_write
0f404     0B 00 00 FF 
0f408     CC E4 85 F1 | 	sub	objptr, ##5836
0f40c     18 FD BF FD | 	call	#_do_fast_goto
0f410     08 00 90 FD | 	jmp	#LR__1204
0f414                 | LR__1203
0f414     26 12 06 F6 | 	mov	arg01, #38
0f418     38 BF B0 FD | 	call	#_printerror
0f41c                 | LR__1204
0f41c     A7 F0 03 F6 | 	mov	ptra, fp
0f420     B2 00 A0 FD | 	call	#popregs_
0f424                 | _do_find_goto_ret
0f424     2D 00 64 FD | 	ret
0f428                 | 
0f428                 | ' 
0f428                 | ' sub do_slow_goto
0f428                 | _do_slow_goto
0f428     02 4A 05 F6 | 	mov	COUNT_, #2
0f42c     A8 00 A0 FD | 	call	#pushregs_
0f430     30 F0 07 F1 | 	add	ptra, #48
0f434     04 B7 BF FD | 	call	#_pop
0f438     FF 1E 02 F6 | 	mov	local01, result3
0f43c     24 4E 05 F1 | 	add	fp, #36
0f440     A7 FA 61 FC | 	wrlong	result1, fp
0f444     04 4E 05 F1 | 	add	fp, #4
0f448     A7 FC 61 FC | 	wrlong	result2, fp
0f44c     04 4E 05 F1 | 	add	fp, #4
0f450     A7 1E 62 FC | 	wrlong	local01, fp
0f454     08 4E 85 F1 | 	sub	fp, #8
0f458     A7 12 02 F6 | 	mov	arg01, fp
0f45c     24 4E 85 F1 | 	sub	fp, #36
0f460     50 4A B0 FD | 	call	#_converttoint
0f464     A7 FA 61 FC | 	wrlong	result1, fp
0f468     4A 00 00 FF 
0f46c     B4 E4 05 F1 | 	add	objptr, ##38068
0f470     F2 20 02 FB | 	rdlong	local02, objptr
0f474     4A 00 00 FF 
0f478     B4 E4 85 F1 | 	sub	objptr, ##38068
0f47c     04 4E 05 F1 | 	add	fp, #4
0f480     A7 20 62 FC | 	wrlong	local02, fp
0f484     04 4E 85 F1 | 	sub	fp, #4
0f488                 | ' 
0f488                 | ' t1=pop() : gotoline=converttoint(t1)
0f488                 | ' gotoptr=programstart
0f488                 | ' do
0f488                 | LR__1210
0f488     0C 4E 05 F1 | 	add	fp, #12
0f48c     A7 12 02 F6 | 	mov	arg01, fp
0f490     08 4E 85 F1 | 	sub	fp, #8
0f494     A7 14 02 FB | 	rdlong	arg02, fp
0f498     04 4E 85 F1 | 	sub	fp, #4
0f49c     18 16 06 F6 | 	mov	arg03, #24
0f4a0     0B 00 00 FF 
0f4a4     CC E4 05 F1 | 	add	objptr, ##5836
0f4a8     10 F7 B0 FD | 	call	#_psram_spin2_read1
0f4ac     0B 00 00 FF 
0f4b0     CC E4 85 F1 | 	sub	objptr, ##5836
0f4b4                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
0f4b4                 | '   if gotoheader(0)<>$FFFFFFFF then
0f4b4     0C 4E 05 F1 | 	add	fp, #12
0f4b8     A7 20 02 FB | 	rdlong	local02, fp
0f4bc     0C 4E 85 F1 | 	sub	fp, #12
0f4c0     FF FF 7F FF 
0f4c4     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0f4c8     24 00 90 AD |  if_e	jmp	#LR__1211
0f4cc     04 4E 05 F1 | 	add	fp, #4
0f4d0     A7 20 02 FB | 	rdlong	local02, fp
0f4d4     04 4E 05 F1 | 	add	fp, #4
0f4d8     A7 20 62 FC | 	wrlong	local02, fp
0f4dc     18 4E 05 F1 | 	add	fp, #24
0f4e0     A7 20 02 FB | 	rdlong	local02, fp
0f4e4     1C 4E 85 F1 | 	sub	fp, #28
0f4e8     A7 20 62 FC | 	wrlong	local02, fp
0f4ec     04 4E 85 F1 | 	sub	fp, #4
0f4f0                 | LR__1211
0f4f0     20 4E 05 F1 | 	add	fp, #32
0f4f4     A7 20 02 FB | 	rdlong	local02, fp
0f4f8     20 4E 85 F1 | 	sub	fp, #32
0f4fc     FF FF 3F FF 
0f500     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0f504     0C 4E 05 51 |  if_ne	add	fp, #12
0f508     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0f50c     0C 4E 85 51 |  if_ne	sub	fp, #12
0f510     FF FF 7F 5F 
0f514     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0f518     18 00 90 AD |  if_e	jmp	#LR__1212
0f51c     0C 4E 05 F1 | 	add	fp, #12
0f520     A7 20 02 FB | 	rdlong	local02, fp
0f524     0C 4E 85 F1 | 	sub	fp, #12
0f528     A7 16 02 FB | 	rdlong	arg03, fp
0f52c     0B 21 0A F2 | 	cmp	local02, arg03 wz
0f530     54 FF 9F 5D |  if_ne	jmp	#LR__1210
0f534                 | LR__1212
0f534                 | ' if gotoheader(0)=gotoline then  
0f534     0C 4E 05 F1 | 	add	fp, #12
0f538     A7 20 02 FB | 	rdlong	local02, fp
0f53c     0C 4E 85 F1 | 	sub	fp, #12
0f540     A7 1E 02 FB | 	rdlong	local01, fp
0f544     0F 21 0A F2 | 	cmp	local02, local01 wz
0f548     60 00 90 5D |  if_ne	jmp	#LR__1213
0f54c     08 4E 05 F1 | 	add	fp, #8
0f550     A7 20 02 FB | 	rdlong	local02, fp
0f554     08 4E 85 F1 | 	sub	fp, #8
0f558     58 00 00 FF 
0f55c     EC E4 05 F1 | 	add	objptr, ##45292
0f560     F2 20 62 FC | 	wrlong	local02, objptr
0f564     0E 00 00 FF 
0f568     40 E4 85 F1 | 	sub	objptr, ##7232
0f56c     F2 20 02 FB | 	rdlong	local02, objptr
0f570     01 20 86 F1 | 	sub	local02, #1
0f574     04 E4 05 F1 | 	add	objptr, #4
0f578     F2 20 62 FC | 	wrlong	local02, objptr
0f57c                 | '    runptr=oldgotoptr
0f57c                 | '    lineptr_e=lineptr-1
0f57c                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
0f57c     0E 00 00 FF 
0f580     60 E4 05 F1 | 	add	objptr, ##7264
0f584     F2 20 02 FB | 	rdlong	local02, objptr
0f588     58 00 00 FF 
0f58c     10 E5 85 F1 | 	sub	objptr, ##45328
0f590     FF FF 3F FF 
0f594     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0f598     58 00 00 AF 
0f59c     10 E5 05 A1 |  if_e	add	objptr, ##45328
0f5a0     F2 00 68 AC |  if_e	wrlong	#0, objptr
0f5a4     58 00 00 AF 
0f5a8     10 E5 85 A1 |  if_e	sub	objptr, ##45328
0f5ac                 | LR__1213
0f5ac     A7 F0 03 F6 | 	mov	ptra, fp
0f5b0     B2 00 A0 FD | 	call	#popregs_
0f5b4                 | _do_slow_goto_ret
0f5b4     2D 00 64 FD | 	ret
0f5b8                 | 
0f5b8                 | ' 
0f5b8                 | ' '----------------------- Error processing
0f5b8                 | ' 
0f5b8                 | ' sub do_error
0f5b8                 | _do_error
0f5b8     01 4A 05 F6 | 	mov	COUNT_, #1
0f5bc     A8 00 A0 FD | 	call	#pushregs_
0f5c0     4A 00 00 FF 
0f5c4     B0 E4 05 F1 | 	add	objptr, ##38064
0f5c8     F2 18 02 FB | 	rdlong	arg04, objptr
0f5cc     0C 17 02 F6 | 	mov	arg03, arg04
0f5d0     01 16 66 F0 | 	shl	arg03, #1
0f5d4     0C 17 02 F1 | 	add	arg03, arg04
0f5d8     02 16 66 F0 | 	shl	arg03, #2
0f5dc     03 00 00 FF 
0f5e0     04 E4 85 F1 | 	sub	objptr, ##1540
0f5e4     F2 16 02 F1 | 	add	arg03, objptr
0f5e8     0B 1F 02 FB | 	rdlong	local01, arg03
0f5ec                 | ' r=compiledline(lineptr_e).result.uresult
0f5ec                 | ' print "Error ";r;": ";errors$(r)
0f5ec     00 12 06 F6 | 	mov	arg01, #0
0f5f0     47 00 00 FF 
0f5f4     AC E4 85 F1 | 	sub	objptr, ##36524
0f5f8     98 5B B1 FD | 	call	#__system___getiolock_0508
0f5fc     FD 12 02 F6 | 	mov	arg01, result1
0f600     F8 01 B1 FD | 	call	#__system___lockmem
0f604     7A 01 00 FF 
0f608     B9 14 06 F6 | 	mov	arg02, ##@LR__5227
0f60c     00 12 06 F6 | 	mov	arg01, #0
0f610     00 16 06 F6 | 	mov	arg03, #0
0f614     D8 0E B1 FD | 	call	#__system___basic_print_string
0f618     00 12 06 F6 | 	mov	arg01, #0
0f61c     0F 15 02 F6 | 	mov	arg02, local01
0f620     00 16 06 F6 | 	mov	arg03, #0
0f624     0A 18 06 F6 | 	mov	arg04, #10
0f628     48 0F B1 FD | 	call	#__system___basic_print_unsigned
0f62c     7A 01 00 FF 
0f630     C0 14 06 F6 | 	mov	arg02, ##@LR__5228
0f634     00 12 06 F6 | 	mov	arg01, #0
0f638     00 16 06 F6 | 	mov	arg03, #0
0f63c     B0 0E B1 FD | 	call	#__system___basic_print_string
0f640     02 1E 66 F0 | 	shl	local01, #2
0f644     45 00 00 FF 
0f648     AC E4 05 F1 | 	add	objptr, ##35500
0f64c     F2 1E 02 F1 | 	add	local01, objptr
0f650     0F 15 02 FB | 	rdlong	arg02, local01
0f654     00 12 06 F6 | 	mov	arg01, #0
0f658     00 16 06 F6 | 	mov	arg03, #0
0f65c     45 00 00 FF 
0f660     AC E4 85 F1 | 	sub	objptr, ##35500
0f664     88 0E B1 FD | 	call	#__system___basic_print_string
0f668     00 12 06 F6 | 	mov	arg01, #0
0f66c     0A 14 06 F6 | 	mov	arg02, #10
0f670     00 16 06 F6 | 	mov	arg03, #0
0f674     20 0E B1 FD | 	call	#__system___basic_print_char
0f678     00 12 06 F6 | 	mov	arg01, #0
0f67c     14 5B B1 FD | 	call	#__system___getiolock_0508
0f680     FD 00 68 FC | 	wrlong	#0, result1
0f684     A7 F0 03 F6 | 	mov	ptra, fp
0f688     B2 00 A0 FD | 	call	#popregs_
0f68c                 | _do_error_ret
0f68c     2D 00 64 FD | 	ret
0f690                 | 
0f690                 | ' 
0f690                 | ' 
0f690                 | ' '------------------ Assigning to a variable  
0f690                 | ' 
0f690                 | ' function  convertstring(psaddr as ulong) as string
0f690                 | _convertstring
0f690     04 4A 05 F6 | 	mov	COUNT_, #4
0f694     A8 00 A0 FD | 	call	#pushregs_
0f698     09 1F 02 F6 | 	mov	local01, arg01
0f69c     48 BF B0 FD | 	call	#_pslpeek
0f6a0     FD 20 02 F6 | 	mov	local02, result1
0f6a4     7A 01 00 FF 
0f6a8     C3 22 06 F6 | 	mov	local03, ##@LR__5229
0f6ac                 | ' 'print "in convertstring: psaddr=";psaddr
0f6ac                 | ' l=pslpeek(psaddr)
0f6ac                 | ' 'print "in convertstring: len=";l
0f6ac                 | ' s="" 
0f6ac                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0f6ac     01 24 06 F6 | 	mov	local04, #1
0f6b0     01 20 06 F1 | 	add	local02, #1
0f6b4                 | LR__1220
0f6b4     10 25 52 F2 | 	cmps	local04, local02 wc
0f6b8     30 00 90 3D |  if_ae	jmp	#LR__1221
0f6bc     0F 13 02 F6 | 	mov	arg01, local01
0f6c0     03 12 06 F1 | 	add	arg01, #3
0f6c4     12 13 02 F1 | 	add	arg01, local04
0f6c8     C4 BE B0 FD | 	call	#_pspeek
0f6cc     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0f6d0     FC 22 B1 FD | 	call	#__system__Chr_S
0f6d4     FD 14 02 F6 | 	mov	arg02, result1
0f6d8     11 13 02 F6 | 	mov	arg01, local03
0f6dc     78 01 B1 FD | 	call	#__system___string_concat
0f6e0     FD 22 02 F6 | 	mov	local03, result1
0f6e4     01 24 06 F1 | 	add	local04, #1
0f6e8     C8 FF 9F FD | 	jmp	#LR__1220
0f6ec                 | LR__1221
0f6ec                 | ' 'print "in convertstring: str=";s
0f6ec                 | ' return s
0f6ec     11 FB 01 F6 | 	mov	result1, local03
0f6f0     A7 F0 03 F6 | 	mov	ptra, fp
0f6f4     B2 00 A0 FD | 	call	#popregs_
0f6f8                 | _convertstring_ret
0f6f8     2D 00 64 FD | 	ret
0f6fc                 | 
0f6fc                 | ' 
0f6fc                 | ' sub do_assign
0f6fc                 | _do_assign
0f6fc     05 4A 05 F6 | 	mov	COUNT_, #5
0f700     A8 00 A0 FD | 	call	#pushregs_
0f704     44 F0 07 F1 | 	add	ptra, #68
0f708     4A 00 00 FF 
0f70c     B0 E4 05 F1 | 	add	objptr, ##38064
0f710     F2 16 02 FB | 	rdlong	arg03, objptr
0f714     0B 15 02 F6 | 	mov	arg02, arg03
0f718     01 14 66 F0 | 	shl	arg02, #1
0f71c     0B 15 02 F1 | 	add	arg02, arg03
0f720     02 14 66 F0 | 	shl	arg02, #2
0f724     03 00 00 FF 
0f728     04 E4 85 F1 | 	sub	objptr, ##1540
0f72c     F2 14 02 F1 | 	add	arg02, objptr
0f730     0A 15 02 FB | 	rdlong	arg02, arg02
0f734     18 4E 05 F1 | 	add	fp, #24
0f738     A7 14 62 FC | 	wrlong	arg02, fp
0f73c                 | ' 
0f73c                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
0f73c                 | ' if variables(varnum).vartype<array_no_type then 
0f73c     18 4E 85 F1 | 	sub	fp, #24
0f740     04 14 66 F0 | 	shl	arg02, #4
0f744     32 00 00 FF 
0f748     84 E4 85 F1 | 	sub	objptr, ##25732
0f74c     F2 14 02 F1 | 	add	arg02, objptr
0f750     0C 14 06 F1 | 	add	arg02, #12
0f754     0A 17 02 FB | 	rdlong	arg03, arg02
0f758     00 17 16 F2 | 	cmp	arg03, #256 wc
0f75c     15 00 00 FF 
0f760     28 E4 85 F1 | 	sub	objptr, ##10792
0f764     18 01 90 3D |  if_ae	jmp	#LR__1230
0f768     D0 B3 BF FD | 	call	#_pop
0f76c     A7 FA 61 FC | 	wrlong	result1, fp
0f770     04 4E 05 F1 | 	add	fp, #4
0f774     A7 FC 61 FC | 	wrlong	result2, fp
0f778     04 4E 05 F1 | 	add	fp, #4
0f77c     A7 FE 61 FC | 	wrlong	result3, fp
0f780     08 4E 85 F1 | 	sub	fp, #8
0f784     A7 16 02 FB | 	rdlong	arg03, fp
0f788     04 4E 05 F1 | 	add	fp, #4
0f78c     A7 14 02 FB | 	rdlong	arg02, fp
0f790     14 4E 05 F1 | 	add	fp, #20
0f794     A7 12 02 FB | 	rdlong	arg01, fp
0f798     04 12 66 F0 | 	shl	arg01, #4
0f79c     15 00 00 FF 
0f7a0     28 E4 05 F1 | 	add	objptr, ##10792
0f7a4     F2 12 02 F1 | 	add	arg01, objptr
0f7a8     04 12 06 F1 | 	add	arg01, #4
0f7ac     09 17 62 FC | 	wrlong	arg03, arg01
0f7b0     A7 16 02 FB | 	rdlong	arg03, fp
0f7b4     04 16 66 F0 | 	shl	arg03, #4
0f7b8     F2 16 02 F1 | 	add	arg03, objptr
0f7bc     08 16 06 F1 | 	add	arg03, #8
0f7c0     0B 15 62 FC | 	wrlong	arg02, arg03
0f7c4     A7 16 02 FB | 	rdlong	arg03, fp
0f7c8     04 16 66 F0 | 	shl	arg03, #4
0f7cc     F2 16 02 F1 | 	add	arg03, objptr
0f7d0     10 4E 85 F1 | 	sub	fp, #16
0f7d4     A7 14 02 FB | 	rdlong	arg02, fp
0f7d8     0C 16 06 F1 | 	add	arg03, #12
0f7dc     0B 15 62 FC | 	wrlong	arg02, arg03
0f7e0                 | '   t1=pop() 
0f7e0                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
0f7e0                 | '   if variables(varnum).vartype<>result_string2 then return
0f7e0     10 4E 05 F1 | 	add	fp, #16
0f7e4     A7 16 02 FB | 	rdlong	arg03, fp
0f7e8     18 4E 85 F1 | 	sub	fp, #24
0f7ec     04 16 66 F0 | 	shl	arg03, #4
0f7f0     F2 16 02 F1 | 	add	arg03, objptr
0f7f4     0C 16 06 F1 | 	add	arg03, #12
0f7f8     0B 17 02 FB | 	rdlong	arg03, arg03
0f7fc     2B 16 0E F2 | 	cmp	arg03, #43 wz
0f800     15 00 00 FF 
0f804     28 E4 85 F1 | 	sub	objptr, ##10792
0f808     E4 04 90 5D |  if_ne	jmp	#LR__1253
0f80c     18 4E 05 F1 | 	add	fp, #24
0f810     A7 16 02 FB | 	rdlong	arg03, fp
0f814     0B 1F 02 F6 | 	mov	local01, arg03
0f818     04 1E 66 F0 | 	shl	local01, #4
0f81c     15 00 00 FF 
0f820     28 E4 05 F1 | 	add	objptr, ##10792
0f824     F2 1E 02 F1 | 	add	local01, objptr
0f828     18 4E 85 F1 | 	sub	fp, #24
0f82c     04 16 66 F0 | 	shl	arg03, #4
0f830     F2 16 02 F1 | 	add	arg03, objptr
0f834     04 16 06 F1 | 	add	arg03, #4
0f838     0B 13 02 FB | 	rdlong	arg01, arg03
0f83c     15 00 00 FF 
0f840     28 E4 85 F1 | 	sub	objptr, ##10792
0f844     48 FE BF FD | 	call	#_convertstring
0f848     04 1E 06 F1 | 	add	local01, #4
0f84c     0F FB 61 FC | 	wrlong	result1, local01
0f850     18 4E 05 F1 | 	add	fp, #24
0f854     A7 1E 02 FB | 	rdlong	local01, fp
0f858     18 4E 85 F1 | 	sub	fp, #24
0f85c     04 1E 66 F0 | 	shl	local01, #4
0f860     15 00 00 FF 
0f864     28 E4 05 F1 | 	add	objptr, ##10792
0f868     F2 1E 02 F1 | 	add	local01, objptr
0f86c     0C 1E 06 F1 | 	add	local01, #12
0f870     0F 3F 68 FC | 	wrlong	#31, local01
0f874                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
0f874                 | '   variables(varnum).vartype=result_string
0f874                 | '   return
0f874     15 00 00 FF 
0f878     28 E4 85 F1 | 	sub	objptr, ##10792
0f87c     70 04 90 FD | 	jmp	#LR__1253
0f880                 | LR__1230
0f880                 | ' for i=0 to 2 : arrid(i)=0 : next i
0f880     1C 4E 05 F1 | 	add	fp, #28
0f884     A7 00 68 FC | 	wrlong	#0, fp
0f888     97 16 48 FB | 	callpa	#(@LR__1232-@LR__1231)>>2,fcache_load_ptr_
0f88c                 | LR__1231
0f88c     A7 1E 02 FB | 	rdlong	local01, fp
0f890     02 1E 66 F0 | 	shl	local01, #2
0f894     18 4E 05 F1 | 	add	fp, #24
0f898     A7 1E 02 F1 | 	add	local01, fp
0f89c     0F 01 68 FC | 	wrlong	#0, local01
0f8a0     18 4E 85 F1 | 	sub	fp, #24
0f8a4     A7 1E 02 FB | 	rdlong	local01, fp
0f8a8     01 1E 06 F1 | 	add	local01, #1
0f8ac     A7 1E 62 FC | 	wrlong	local01, fp
0f8b0     03 1E 16 F2 | 	cmp	local01, #3 wc
0f8b4     D4 FF 9F CD |  if_b	jmp	#LR__1231
0f8b8                 | LR__1232
0f8b8     4A 00 00 FF 
0f8bc     B0 E4 05 F1 | 	add	objptr, ##38064
0f8c0     F2 16 02 FB | 	rdlong	arg03, objptr
0f8c4     0B 1F 02 F6 | 	mov	local01, arg03
0f8c8     01 1E 66 F0 | 	shl	local01, #1
0f8cc     0B 1F 02 F1 | 	add	local01, arg03
0f8d0     02 1E 66 F0 | 	shl	local01, #2
0f8d4     03 00 00 FF 
0f8d8     04 E4 85 F1 | 	sub	objptr, ##1540
0f8dc     F2 1E 02 F1 | 	add	local01, objptr
0f8e0     04 1E 06 F1 | 	add	local01, #4
0f8e4     0F 21 02 FB | 	rdlong	local02, local01
0f8e8     04 4E 05 F1 | 	add	fp, #4
0f8ec     A7 20 62 FC | 	wrlong	local02, fp
0f8f0     20 4E 85 F1 | 	sub	fp, #32
0f8f4     47 00 00 FF 
0f8f8     AC E4 85 F1 | 	sub	objptr, ##36524
0f8fc     3C B2 BF FD | 	call	#_pop
0f900     A7 FA 61 FC | 	wrlong	result1, fp
0f904     04 4E 05 F1 | 	add	fp, #4
0f908     A7 FC 61 FC | 	wrlong	result2, fp
0f90c     04 4E 05 F1 | 	add	fp, #4
0f910     A7 FE 61 FC | 	wrlong	result3, fp
0f914                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
0f914                 | ' t1=pop() ' var value
0f914                 | ' if numpar>0 then
0f914     18 4E 05 F1 | 	add	fp, #24
0f918     A7 22 02 FB | 	rdlong	local03, fp
0f91c     20 4E 85 F1 | 	sub	fp, #32
0f920     01 22 16 F2 | 	cmp	local03, #1 wc
0f924     78 00 90 CD |  if_b	jmp	#LR__1235
0f928                 | '   for i=numpar to 1 step -1
0f928     20 4E 05 F1 | 	add	fp, #32
0f92c     A7 24 0A FB | 	rdlong	local04, fp wz
0f930     04 4E 85 F1 | 	sub	fp, #4
0f934     A7 24 62 FC | 	wrlong	local04, fp
0f938     1C 4E 85 F1 | 	sub	fp, #28
0f93c     60 00 90 AD |  if_e	jmp	#LR__1234
0f940                 | LR__1233
0f940     F8 B1 BF FD | 	call	#_pop
0f944     0C 4E 05 F1 | 	add	fp, #12
0f948     A7 FA 61 FC | 	wrlong	result1, fp
0f94c     04 4E 05 F1 | 	add	fp, #4
0f950     A7 FC 61 FC | 	wrlong	result2, fp
0f954     04 4E 05 F1 | 	add	fp, #4
0f958     A7 FE 61 FC | 	wrlong	result3, fp
0f95c     08 4E 05 F1 | 	add	fp, #8
0f960     A7 22 02 FB | 	rdlong	local03, fp
0f964     01 22 86 F1 | 	sub	local03, #1
0f968     02 22 66 F0 | 	shl	local03, #2
0f96c     18 4E 05 F1 | 	add	fp, #24
0f970     A7 22 02 F1 | 	add	local03, fp
0f974     28 4E 85 F1 | 	sub	fp, #40
0f978     A7 12 02 F6 | 	mov	arg01, fp
0f97c     0C 4E 85 F1 | 	sub	fp, #12
0f980     30 45 B0 FD | 	call	#_converttoint
0f984     11 FB 61 FC | 	wrlong	result1, local03
0f988     1C 4E 05 F1 | 	add	fp, #28
0f98c     A7 24 02 FB | 	rdlong	local04, fp
0f990     01 24 8E F1 | 	sub	local04, #1 wz
0f994     A7 24 62 FC | 	wrlong	local04, fp
0f998     1C 4E 85 F1 | 	sub	fp, #28
0f99c     A0 FF 9F 5D |  if_ne	jmp	#LR__1233
0f9a0                 | LR__1234
0f9a0                 | LR__1235
0f9a0     18 4E 05 F1 | 	add	fp, #24
0f9a4     A7 1E 02 FB | 	rdlong	local01, fp
0f9a8     04 1E 66 F0 | 	shl	local01, #4
0f9ac     15 00 00 FF 
0f9b0     28 E4 05 F1 | 	add	objptr, ##10792
0f9b4     F2 1E 02 F1 | 	add	local01, objptr
0f9b8     04 1E 06 F1 | 	add	local01, #4
0f9bc     0F 13 02 FB | 	rdlong	arg01, local01
0f9c0     0C 4E 05 F1 | 	add	fp, #12
0f9c4     A7 12 62 FC | 	wrlong	arg01, fp
0f9c8     24 4E 85 F1 | 	sub	fp, #36
0f9cc     15 00 00 FF 
0f9d0     28 E4 85 F1 | 	sub	objptr, ##10792
0f9d4     10 BC B0 FD | 	call	#_pslpeek
0f9d8     FD 24 32 F9 | 	getword	local04, result1, #0
0f9dc     28 4E 05 F1 | 	add	fp, #40
0f9e0     A7 24 62 FC | 	wrlong	local04, fp
0f9e4     04 4E 85 F1 | 	sub	fp, #4
0f9e8     A7 12 02 FB | 	rdlong	arg01, fp
0f9ec     24 4E 85 F1 | 	sub	fp, #36
0f9f0     02 12 06 F1 | 	add	arg01, #2
0f9f4     98 BB B0 FD | 	call	#_pspeek
0f9f8     FD FA E1 F8 | 	getbyte	result1, result1, #0
0f9fc     2C 4E 05 F1 | 	add	fp, #44
0fa00     A7 FA 61 FC | 	wrlong	result1, fp
0fa04                 | ' esize=pspeek(arrptr+2)
0fa04                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
0fa04     08 4E 85 F1 | 	sub	fp, #8
0fa08     A7 12 02 FB | 	rdlong	arg01, fp
0fa0c     24 4E 85 F1 | 	sub	fp, #36
0fa10     04 12 06 F1 | 	add	arg01, #4
0fa14     D0 BB B0 FD | 	call	#_pslpeek
0fa18     FD 24 02 F6 | 	mov	local04, result1
0fa1c     34 4E 05 F1 | 	add	fp, #52
0fa20     A7 1E 02 FB | 	rdlong	local01, fp
0fa24     34 4E 85 F1 | 	sub	fp, #52
0fa28     12 1F 12 F2 | 	cmp	local01, local04 wc
0fa2c     54 00 90 3D |  if_ae	jmp	#LR__1236
0fa30     24 4E 05 F1 | 	add	fp, #36
0fa34     A7 12 02 FB | 	rdlong	arg01, fp
0fa38     24 4E 85 F1 | 	sub	fp, #36
0fa3c     08 12 06 F1 | 	add	arg01, #8
0fa40     A4 BB B0 FD | 	call	#_pslpeek
0fa44     FD 1E 02 F6 | 	mov	local01, result1
0fa48     38 4E 05 F1 | 	add	fp, #56
0fa4c     A7 24 02 FB | 	rdlong	local04, fp
0fa50     38 4E 85 F1 | 	sub	fp, #56
0fa54     0F 25 12 F2 | 	cmp	local04, local01 wc
0fa58     28 00 90 3D |  if_ae	jmp	#LR__1236
0fa5c     24 4E 05 F1 | 	add	fp, #36
0fa60     A7 12 02 FB | 	rdlong	arg01, fp
0fa64     24 4E 85 F1 | 	sub	fp, #36
0fa68     0C 12 06 F1 | 	add	arg01, #12
0fa6c     78 BB B0 FD | 	call	#_pslpeek
0fa70     3C 4E 05 F1 | 	add	fp, #60
0fa74     A7 24 02 FB | 	rdlong	local04, fp
0fa78     3C 4E 85 F1 | 	sub	fp, #60
0fa7c     FD 24 12 F2 | 	cmp	local04, result1 wc
0fa80     0C 00 90 CD |  if_b	jmp	#LR__1237
0fa84                 | LR__1236
0fa84     31 12 06 F6 | 	mov	arg01, #49
0fa88     C8 B8 B0 FD | 	call	#_printerror
0fa8c     60 02 90 FD | 	jmp	#LR__1253
0fa90                 | LR__1237
0fa90     24 4E 05 F1 | 	add	fp, #36
0fa94     A7 12 02 FB | 	rdlong	arg01, fp
0fa98     09 25 02 F6 | 	mov	local04, arg01
0fa9c     10 24 06 F1 | 	add	local04, #16
0faa0     24 4E 85 F1 | 	sub	fp, #36
0faa4     04 12 06 F1 | 	add	arg01, #4
0faa8     3C BB B0 FD | 	call	#_pslpeek
0faac     FD 1E 02 F6 | 	mov	local01, result1
0fab0     38 4E 05 F1 | 	add	fp, #56
0fab4     A7 20 02 FB | 	rdlong	local02, fp
0fab8     10 1F 02 FD | 	qmul	local01, local02
0fabc     04 4E 85 F1 | 	sub	fp, #4
0fac0     A7 22 02 FB | 	rdlong	local03, fp
0fac4     10 4E 85 F1 | 	sub	fp, #16
0fac8     A7 12 02 FB | 	rdlong	arg01, fp
0facc     24 4E 85 F1 | 	sub	fp, #36
0fad0     08 12 06 F1 | 	add	arg01, #8
0fad4     18 20 62 FD | 	getqx	local02
0fad8     10 23 02 F1 | 	add	local03, local02
0fadc     08 BB B0 FD | 	call	#_pslpeek
0fae0     FD 20 02 F6 | 	mov	local02, result1
0fae4     24 4E 05 F1 | 	add	fp, #36
0fae8     A7 12 02 FB | 	rdlong	arg01, fp
0faec     24 4E 85 F1 | 	sub	fp, #36
0faf0     04 12 06 F1 | 	add	arg01, #4
0faf4     F0 BA B0 FD | 	call	#_pslpeek
0faf8     FD 20 02 FD | 	qmul	local02, result1
0fafc     3C 4E 05 F1 | 	add	fp, #60
0fb00     A7 20 02 FB | 	rdlong	local02, fp
0fb04     18 1E 62 FD | 	getqx	local01
0fb08     10 1F 02 FD | 	qmul	local01, local02
0fb0c     10 4E 85 F1 | 	sub	fp, #16
0fb10     A7 20 02 FB | 	rdlong	local02, fp
0fb14     18 1E 62 FD | 	getqx	local01
0fb18     0F 23 02 F1 | 	add	local03, local01
0fb1c     11 21 02 FD | 	qmul	local02, local03
0fb20     04 4E 05 F1 | 	add	fp, #4
0fb24                 | ' 
0fb24                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
0fb24                 | ' select case arrtype
0fb24     18 22 62 FD | 	getqx	local03
0fb28     11 25 02 F1 | 	add	local04, local03
0fb2c     A7 24 62 FC | 	wrlong	local04, fp
0fb30     08 4E 85 F1 | 	sub	fp, #8
0fb34     A7 26 02 FB | 	rdlong	local05, fp
0fb38     28 4E 85 F1 | 	sub	fp, #40
0fb3c     00 27 86 F1 | 	sub	local05, #256
0fb40     0C 26 26 F3 | 	fle	local05, #12
0fb44     30 26 62 FD | 	jmprel	local05
0fb48                 | LR__1238
0fb48     30 00 90 FD | 	jmp	#LR__1239
0fb4c     58 00 90 FD | 	jmp	#LR__1240
0fb50     6C 00 90 FD | 	jmp	#LR__1241
0fb54     80 00 90 FD | 	jmp	#LR__1242
0fb58     B0 00 90 FD | 	jmp	#LR__1243
0fb5c     E0 00 90 FD | 	jmp	#LR__1244
0fb60     F4 00 90 FD | 	jmp	#LR__1245
0fb64     08 01 90 FD | 	jmp	#LR__1246
0fb68     1C 01 90 FD | 	jmp	#LR__1247
0fb6c     30 01 90 FD | 	jmp	#LR__1248
0fb70     44 01 90 FD | 	jmp	#LR__1249
0fb74     58 01 90 FD | 	jmp	#LR__1250
0fb78     6C 01 90 FD | 	jmp	#LR__1251
0fb7c                 | LR__1239
0fb7c     A7 12 02 F6 | 	mov	arg01, fp
0fb80     30 4E 05 F1 | 	add	fp, #48
0fb84     A7 14 02 FB | 	rdlong	arg02, fp
0fb88     30 4E 85 F1 | 	sub	fp, #48
0fb8c     0C 16 06 F6 | 	mov	arg03, #12
0fb90     0B 00 00 FF 
0fb94     CC E4 05 F1 | 	add	objptr, ##5836
0fb98     BC F0 B0 FD | 	call	#_psram_spin2_write
0fb9c     0B 00 00 FF 
0fba0     CC E4 85 F1 | 	sub	objptr, ##5836
0fba4     48 01 90 FD | 	jmp	#LR__1252
0fba8                 | LR__1240
0fba8     30 4E 05 F1 | 	add	fp, #48
0fbac     A7 12 02 FB | 	rdlong	arg01, fp
0fbb0     30 4E 85 F1 | 	sub	fp, #48
0fbb4     A7 14 02 FB | 	rdlong	arg02, fp
0fbb8     8C B9 B0 FD | 	call	#_pspoke
0fbbc     30 01 90 FD | 	jmp	#LR__1252
0fbc0                 | LR__1241
0fbc0     30 4E 05 F1 | 	add	fp, #48
0fbc4     A7 12 02 FB | 	rdlong	arg01, fp
0fbc8     30 4E 85 F1 | 	sub	fp, #48
0fbcc     A7 14 02 FB | 	rdlong	arg02, fp
0fbd0     74 B9 B0 FD | 	call	#_pspoke
0fbd4     18 01 90 FD | 	jmp	#LR__1252
0fbd8                 | LR__1242
0fbd8     30 4E 05 F1 | 	add	fp, #48
0fbdc     A7 12 02 FB | 	rdlong	arg01, fp
0fbe0     30 4E 85 F1 | 	sub	fp, #48
0fbe4     A7 14 02 FB | 	rdlong	arg02, fp
0fbe8     5C B9 B0 FD | 	call	#_pspoke
0fbec     30 4E 05 F1 | 	add	fp, #48
0fbf0     A7 12 02 FB | 	rdlong	arg01, fp
0fbf4     30 4E 85 F1 | 	sub	fp, #48
0fbf8     01 12 06 F1 | 	add	arg01, #1
0fbfc     A7 14 02 FB | 	rdlong	arg02, fp
0fc00     08 14 46 F0 | 	shr	arg02, #8
0fc04     40 B9 B0 FD | 	call	#_pspoke
0fc08     E4 00 90 FD | 	jmp	#LR__1252
0fc0c                 | LR__1243
0fc0c     30 4E 05 F1 | 	add	fp, #48
0fc10     A7 12 02 FB | 	rdlong	arg01, fp
0fc14     30 4E 85 F1 | 	sub	fp, #48
0fc18     A7 14 02 FB | 	rdlong	arg02, fp
0fc1c     28 B9 B0 FD | 	call	#_pspoke
0fc20     30 4E 05 F1 | 	add	fp, #48
0fc24     A7 12 02 FB | 	rdlong	arg01, fp
0fc28     30 4E 85 F1 | 	sub	fp, #48
0fc2c     01 12 06 F1 | 	add	arg01, #1
0fc30     A7 14 02 FB | 	rdlong	arg02, fp
0fc34     08 14 46 F0 | 	shr	arg02, #8
0fc38     0C B9 B0 FD | 	call	#_pspoke
0fc3c     B0 00 90 FD | 	jmp	#LR__1252
0fc40                 | LR__1244
0fc40     30 4E 05 F1 | 	add	fp, #48
0fc44     A7 12 02 FB | 	rdlong	arg01, fp
0fc48     30 4E 85 F1 | 	sub	fp, #48
0fc4c     A7 14 02 FB | 	rdlong	arg02, fp
0fc50     64 B8 B0 FD | 	call	#_pslpoke
0fc54     98 00 90 FD | 	jmp	#LR__1252
0fc58                 | LR__1245
0fc58     30 4E 05 F1 | 	add	fp, #48
0fc5c     A7 12 02 FB | 	rdlong	arg01, fp
0fc60     30 4E 85 F1 | 	sub	fp, #48
0fc64     A7 14 02 FB | 	rdlong	arg02, fp
0fc68     4C B8 B0 FD | 	call	#_pslpoke
0fc6c     80 00 90 FD | 	jmp	#LR__1252
0fc70                 | LR__1246
0fc70     30 4E 05 F1 | 	add	fp, #48
0fc74     A7 12 02 FB | 	rdlong	arg01, fp
0fc78     30 4E 85 F1 | 	sub	fp, #48
0fc7c     A7 14 02 FB | 	rdlong	arg02, fp
0fc80     34 B8 B0 FD | 	call	#_pslpoke
0fc84     68 00 90 FD | 	jmp	#LR__1252
0fc88                 | LR__1247
0fc88     30 4E 05 F1 | 	add	fp, #48
0fc8c     A7 12 02 FB | 	rdlong	arg01, fp
0fc90     30 4E 85 F1 | 	sub	fp, #48
0fc94     A7 14 02 FB | 	rdlong	arg02, fp
0fc98     1C B8 B0 FD | 	call	#_pslpoke
0fc9c     50 00 90 FD | 	jmp	#LR__1252
0fca0                 | LR__1248
0fca0     30 4E 05 F1 | 	add	fp, #48
0fca4     A7 12 02 FB | 	rdlong	arg01, fp
0fca8     30 4E 85 F1 | 	sub	fp, #48
0fcac     A7 14 02 FB | 	rdlong	arg02, fp
0fcb0     04 B8 B0 FD | 	call	#_pslpoke
0fcb4     38 00 90 FD | 	jmp	#LR__1252
0fcb8                 | LR__1249
0fcb8     30 4E 05 F1 | 	add	fp, #48
0fcbc     A7 12 02 FB | 	rdlong	arg01, fp
0fcc0     30 4E 85 F1 | 	sub	fp, #48
0fcc4     A7 14 02 FB | 	rdlong	arg02, fp
0fcc8     EC B7 B0 FD | 	call	#_pslpoke
0fccc     20 00 90 FD | 	jmp	#LR__1252
0fcd0                 | LR__1250
0fcd0     30 4E 05 F1 | 	add	fp, #48
0fcd4     A7 12 02 FB | 	rdlong	arg01, fp
0fcd8     30 4E 85 F1 | 	sub	fp, #48
0fcdc     A7 14 02 FB | 	rdlong	arg02, fp
0fce0     D4 B7 B0 FD | 	call	#_pslpoke
0fce4     08 00 90 FD | 	jmp	#LR__1252
0fce8                 | LR__1251
0fce8     32 12 06 F6 | 	mov	arg01, #50
0fcec     64 B6 B0 FD | 	call	#_printerror
0fcf0                 | LR__1252
0fcf0                 | LR__1253
0fcf0     A7 F0 03 F6 | 	mov	ptra, fp
0fcf4     B2 00 A0 FD | 	call	#popregs_
0fcf8                 | _do_assign_ret
0fcf8     2D 00 64 FD | 	ret
0fcfc                 | 
0fcfc                 | ' 
0fcfc                 | ' 
0fcfc                 | ' ' --------------------- Read a variable and push to the stack
0fcfc                 | ' 
0fcfc                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
0fcfc                 | ' 
0fcfc                 | ' sub do_getvar
0fcfc                 | _do_getvar
0fcfc     04 4A 05 F6 | 	mov	COUNT_, #4
0fd00     A8 00 A0 FD | 	call	#pushregs_
0fd04     3C F0 07 F1 | 	add	ptra, #60
0fd08                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0fd08                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0fd08     4A 00 00 FF 
0fd0c     B0 E4 05 F1 | 	add	objptr, ##38064
0fd10     F2 1E 02 FB | 	rdlong	local01, objptr
0fd14     0F 17 02 F6 | 	mov	arg03, local01
0fd18     01 16 66 F0 | 	shl	arg03, #1
0fd1c     0F 17 02 F1 | 	add	arg03, local01
0fd20     02 16 66 F0 | 	shl	arg03, #2
0fd24     03 00 00 FF 
0fd28     04 E4 85 F1 | 	sub	objptr, ##1540
0fd2c     F2 16 02 F1 | 	add	arg03, objptr
0fd30     04 16 06 F1 | 	add	arg03, #4
0fd34     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0fd38     47 00 00 FF 
0fd3c     AC E4 85 F1 | 	sub	objptr, ##36524
0fd40     C4 00 90 5D |  if_ne	jmp	#LR__1261
0fd44     4A 00 00 FF 
0fd48     B0 E4 05 F1 | 	add	objptr, ##38064
0fd4c     F2 1E 02 FB | 	rdlong	local01, objptr
0fd50     0F 13 02 F6 | 	mov	arg01, local01
0fd54     01 12 66 F0 | 	shl	arg01, #1
0fd58     0F 13 02 F1 | 	add	arg01, local01
0fd5c     02 12 66 F0 | 	shl	arg01, #2
0fd60     03 00 00 FF 
0fd64     04 E4 85 F1 | 	sub	objptr, ##1540
0fd68     F2 12 02 F1 | 	add	arg01, objptr
0fd6c     09 1F 02 FB | 	rdlong	local01, arg01
0fd70     04 1E 66 F0 | 	shl	local01, #4
0fd74     32 00 00 FF 
0fd78     84 E4 85 F1 | 	sub	objptr, ##25732
0fd7c     F2 1E 02 F1 | 	add	local01, objptr
0fd80     04 1E 06 F1 | 	add	local01, #4
0fd84     0F 13 02 FB | 	rdlong	arg01, local01
0fd88     04 1E 06 F1 | 	add	local01, #4
0fd8c     0F 1F 02 FB | 	rdlong	local01, local01
0fd90     A7 12 62 FC | 	wrlong	arg01, fp
0fd94     04 4E 05 F1 | 	add	fp, #4
0fd98     A7 1E 62 FC | 	wrlong	local01, fp
0fd9c     35 00 00 FF 
0fda0     88 E4 05 F1 | 	add	objptr, ##27272
0fda4     F2 1E 02 FB | 	rdlong	local01, objptr
0fda8     0F 13 02 F6 | 	mov	arg01, local01
0fdac     01 12 66 F0 | 	shl	arg01, #1
0fdb0     0F 13 02 F1 | 	add	arg01, local01
0fdb4     02 12 66 F0 | 	shl	arg01, #2
0fdb8     03 00 00 FF 
0fdbc     04 E4 85 F1 | 	sub	objptr, ##1540
0fdc0     F2 12 02 F1 | 	add	arg01, objptr
0fdc4     09 1F 02 FB | 	rdlong	local01, arg01
0fdc8     04 1E 66 F0 | 	shl	local01, #4
0fdcc     32 00 00 FF 
0fdd0     84 E4 85 F1 | 	sub	objptr, ##25732
0fdd4     F2 1E 02 F1 | 	add	local01, objptr
0fdd8     0C 1E 06 F1 | 	add	local01, #12
0fddc     0F 1F 02 FB | 	rdlong	local01, local01
0fde0     04 4E 05 F1 | 	add	fp, #4
0fde4     A7 1E 62 FC | 	wrlong	local01, fp
0fde8                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
0fde8                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0fde8                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
0fde8     08 4E 85 F1 | 	sub	fp, #8
0fdec     00 1F 16 F2 | 	cmp	local01, #256 wc
0fdf0     15 00 00 FF 
0fdf4     28 E4 85 F1 | 	sub	objptr, ##10792
0fdf8     0C 00 90 3D |  if_ae	jmp	#LR__1260
0fdfc     A7 12 02 F6 | 	mov	arg01, fp
0fe00     D0 AD BF FD | 	call	#_push
0fe04     A0 04 90 FD | 	jmp	#LR__1282
0fe08                 | LR__1260
0fe08                 | LR__1261
0fe08     4A 00 00 FF 
0fe0c     B0 E4 05 F1 | 	add	objptr, ##38064
0fe10     F2 16 02 FB | 	rdlong	arg03, objptr
0fe14     0B 15 02 F6 | 	mov	arg02, arg03
0fe18     01 14 66 F0 | 	shl	arg02, #1
0fe1c     0B 15 02 F1 | 	add	arg02, arg03
0fe20     02 14 66 F0 | 	shl	arg02, #2
0fe24     03 00 00 FF 
0fe28     04 E4 85 F1 | 	sub	objptr, ##1540
0fe2c     F2 14 02 F1 | 	add	arg02, objptr
0fe30     0A 17 02 FB | 	rdlong	arg03, arg02
0fe34     04 16 66 F0 | 	shl	arg03, #4
0fe38     32 00 00 FF 
0fe3c     84 E4 85 F1 | 	sub	objptr, ##25732
0fe40     F2 16 02 F1 | 	add	arg03, objptr
0fe44     04 16 06 F1 | 	add	arg03, #4
0fe48     0B 13 02 FB | 	rdlong	arg01, arg03
0fe4c     0C 4E 05 F1 | 	add	fp, #12
0fe50     A7 12 62 FC | 	wrlong	arg01, fp
0fe54     0C 4E 85 F1 | 	sub	fp, #12
0fe58     15 00 00 FF 
0fe5c     28 E4 85 F1 | 	sub	objptr, ##10792
0fe60     84 B7 B0 FD | 	call	#_pslpeek
0fe64     FD FA 31 F9 | 	getword	result1, result1, #0
0fe68     10 4E 05 F1 | 	add	fp, #16
0fe6c     A7 FA 61 FC | 	wrlong	result1, fp
0fe70     4A 00 00 FF 
0fe74     B0 E4 05 F1 | 	add	objptr, ##38064
0fe78     F2 16 02 FB | 	rdlong	arg03, objptr
0fe7c     0B 15 02 F6 | 	mov	arg02, arg03
0fe80     01 14 66 F0 | 	shl	arg02, #1
0fe84     0B 15 02 F1 | 	add	arg02, arg03
0fe88     02 14 66 F0 | 	shl	arg02, #2
0fe8c     03 00 00 FF 
0fe90     04 E4 85 F1 | 	sub	objptr, ##1540
0fe94     F2 14 02 F1 | 	add	arg02, objptr
0fe98     04 14 06 F1 | 	add	arg02, #4
0fe9c     0A 17 02 FB | 	rdlong	arg03, arg02
0fea0     04 4E 05 F1 | 	add	fp, #4
0fea4     A7 16 62 FC | 	wrlong	arg03, fp
0fea8     08 4E 85 F1 | 	sub	fp, #8
0feac     A7 12 02 FB | 	rdlong	arg01, fp
0feb0     0C 4E 85 F1 | 	sub	fp, #12
0feb4     02 12 06 F1 | 	add	arg01, #2
0feb8     47 00 00 FF 
0febc     AC E4 85 F1 | 	sub	objptr, ##36524
0fec0     CC B6 B0 FD | 	call	#_pspeek
0fec4     FD FA E1 F8 | 	getbyte	result1, result1, #0
0fec8     18 4E 05 F1 | 	add	fp, #24
0fecc     A7 FA 61 FC | 	wrlong	result1, fp
0fed0     0C 4E 85 F1 | 	sub	fp, #12
0fed4     A7 12 02 FB | 	rdlong	arg01, fp
0fed8     0C 4E 85 F1 | 	sub	fp, #12
0fedc     04 12 06 F1 | 	add	arg01, #4
0fee0     04 B7 B0 FD | 	call	#_pslpeek
0fee4     1C 4E 05 F1 | 	add	fp, #28
0fee8     A7 FA 61 FC | 	wrlong	result1, fp
0feec     10 4E 85 F1 | 	sub	fp, #16
0fef0     A7 12 02 FB | 	rdlong	arg01, fp
0fef4     0C 4E 85 F1 | 	sub	fp, #12
0fef8     08 12 06 F1 | 	add	arg01, #8
0fefc     E8 B6 B0 FD | 	call	#_pslpeek
0ff00     20 4E 05 F1 | 	add	fp, #32
0ff04     A7 FA 61 FC | 	wrlong	result1, fp
0ff08     14 4E 85 F1 | 	sub	fp, #20
0ff0c     A7 12 02 FB | 	rdlong	arg01, fp
0ff10     0C 4E 85 F1 | 	sub	fp, #12
0ff14     0C 12 06 F1 | 	add	arg01, #12
0ff18     CC B6 B0 FD | 	call	#_pslpeek
0ff1c     24 4E 05 F1 | 	add	fp, #36
0ff20     A7 FA 61 FC | 	wrlong	result1, fp
0ff24                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0ff24                 | ' esize=pspeek(arrptr+2)
0ff24                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0ff24                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0ff24                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0ff24                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
0ff24     10 4E 85 F1 | 	sub	fp, #16
0ff28     A7 16 02 FB | 	rdlong	arg03, fp
0ff2c     14 4E 85 F1 | 	sub	fp, #20
0ff30     03 16 16 F2 | 	cmp	arg03, #3 wc
0ff34     38 00 90 CD |  if_b	jmp	#LR__1262
0ff38     00 AC BF FD | 	call	#_pop
0ff3c     FF 16 02 F6 | 	mov	arg03, result3
0ff40     A7 FA 61 FC | 	wrlong	result1, fp
0ff44     04 4E 05 F1 | 	add	fp, #4
0ff48     A7 FC 61 FC | 	wrlong	result2, fp
0ff4c     04 4E 05 F1 | 	add	fp, #4
0ff50     A7 16 62 FC | 	wrlong	arg03, fp
0ff54     08 4E 85 F1 | 	sub	fp, #8
0ff58     A7 12 02 F6 | 	mov	arg01, fp
0ff5c     54 3F B0 FD | 	call	#_converttoint
0ff60     30 4E 05 F1 | 	add	fp, #48
0ff64     A7 FA 61 FC | 	wrlong	result1, fp
0ff68     30 4E 85 F1 | 	sub	fp, #48
0ff6c     0C 00 90 FD | 	jmp	#LR__1263
0ff70                 | LR__1262
0ff70     30 4E 05 F1 | 	add	fp, #48
0ff74     A7 00 68 FC | 	wrlong	#0, fp
0ff78     30 4E 85 F1 | 	sub	fp, #48
0ff7c                 | LR__1263
0ff7c                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
0ff7c     14 4E 05 F1 | 	add	fp, #20
0ff80     A7 16 02 FB | 	rdlong	arg03, fp
0ff84     14 4E 85 F1 | 	sub	fp, #20
0ff88     02 16 16 F2 | 	cmp	arg03, #2 wc
0ff8c     38 00 90 CD |  if_b	jmp	#LR__1264
0ff90     A8 AB BF FD | 	call	#_pop
0ff94     FF 16 02 F6 | 	mov	arg03, result3
0ff98     A7 FA 61 FC | 	wrlong	result1, fp
0ff9c     04 4E 05 F1 | 	add	fp, #4
0ffa0     A7 FC 61 FC | 	wrlong	result2, fp
0ffa4     04 4E 05 F1 | 	add	fp, #4
0ffa8     A7 16 62 FC | 	wrlong	arg03, fp
0ffac     08 4E 85 F1 | 	sub	fp, #8
0ffb0     A7 12 02 F6 | 	mov	arg01, fp
0ffb4     FC 3E B0 FD | 	call	#_converttoint
0ffb8     2C 4E 05 F1 | 	add	fp, #44
0ffbc     A7 FA 61 FC | 	wrlong	result1, fp
0ffc0     2C 4E 85 F1 | 	sub	fp, #44
0ffc4     0C 00 90 FD | 	jmp	#LR__1265
0ffc8                 | LR__1264
0ffc8     2C 4E 05 F1 | 	add	fp, #44
0ffcc     A7 00 68 FC | 	wrlong	#0, fp
0ffd0     2C 4E 85 F1 | 	sub	fp, #44
0ffd4                 | LR__1265
0ffd4                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
0ffd4     14 4E 05 F1 | 	add	fp, #20
0ffd8     A7 16 02 FB | 	rdlong	arg03, fp
0ffdc     14 4E 85 F1 | 	sub	fp, #20
0ffe0     01 16 16 F2 | 	cmp	arg03, #1 wc
0ffe4     38 00 90 CD |  if_b	jmp	#LR__1266
0ffe8     50 AB BF FD | 	call	#_pop
0ffec     FF 16 02 F6 | 	mov	arg03, result3
0fff0     A7 FA 61 FC | 	wrlong	result1, fp
0fff4     04 4E 05 F1 | 	add	fp, #4
0fff8     A7 FC 61 FC | 	wrlong	result2, fp
0fffc     04 4E 05 F1 | 	add	fp, #4
10000     A7 16 62 FC | 	wrlong	arg03, fp
10004     08 4E 85 F1 | 	sub	fp, #8
10008     A7 12 02 F6 | 	mov	arg01, fp
1000c     A4 3E B0 FD | 	call	#_converttoint
10010     28 4E 05 F1 | 	add	fp, #40
10014     A7 FA 61 FC | 	wrlong	result1, fp
10018     28 4E 85 F1 | 	sub	fp, #40
1001c     0C 00 90 FD | 	jmp	#LR__1267
10020                 | LR__1266
10020     28 4E 05 F1 | 	add	fp, #40
10024     A7 00 68 FC | 	wrlong	#0, fp
10028     28 4E 85 F1 | 	sub	fp, #40
1002c                 | LR__1267
1002c     0C 4E 05 F1 | 	add	fp, #12
10030     A7 20 02 FB | 	rdlong	local02, fp
10034     1C 4E 05 F1 | 	add	fp, #28
10038     A7 22 02 FB | 	rdlong	local03, fp
1003c     04 4E 05 F1 | 	add	fp, #4
10040     A7 FC 01 FB | 	rdlong	result2, fp
10044     10 4E 85 F1 | 	sub	fp, #16
10048     A7 FE 01 FB | 	rdlong	result3, fp
1004c     FF FC 01 FD | 	qmul	result2, result3
10050     10 20 06 F1 | 	add	local02, #16
10054     14 4E 05 F1 | 	add	fp, #20
10058     A7 FC 01 FB | 	rdlong	result2, fp
1005c     18 FA 61 FD | 	getqx	result1
10060     FF FC 01 FD | 	qmul	result2, result3
10064     FD 22 02 F1 | 	add	local03, result1
10068     10 4E 85 F1 | 	sub	fp, #16
1006c     A7 FE 01 FB | 	rdlong	result3, fp
10070     18 FC 61 FD | 	getqx	result2
10074     FF FC 01 FD | 	qmul	result2, result3
10078     08 4E 85 F1 | 	sub	fp, #8
1007c     A7 FE 01 FB | 	rdlong	result3, fp
10080     18 FC 61 FD | 	getqx	result2
10084     FE 22 02 F1 | 	add	local03, result2
10088     FF 22 02 FD | 	qmul	local03, result3
1008c     1C 4E 05 F1 | 	add	fp, #28
10090                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
10090                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize ': print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
10090                 | ' 
10090                 | ' select case vartype
10090     18 FC 61 FD | 	getqx	result2
10094     FE 20 02 F1 | 	add	local02, result2
10098     A7 20 62 FC | 	wrlong	local02, fp
1009c     24 4E 85 F1 | 	sub	fp, #36
100a0     A7 24 02 FB | 	rdlong	local04, fp
100a4     10 4E 85 F1 | 	sub	fp, #16
100a8     00 25 86 F1 | 	sub	local04, #256
100ac     0C 24 26 F3 | 	fle	local04, #12
100b0     30 24 62 FD | 	jmprel	local04
100b4                 | LR__1268
100b4     30 00 90 FD | 	jmp	#LR__1269
100b8     58 00 90 FD | 	jmp	#LR__1270
100bc     8C 00 90 FD | 	jmp	#LR__1271
100c0     AC 00 90 FD | 	jmp	#LR__1272
100c4     E8 00 90 FD | 	jmp	#LR__1273
100c8     08 01 90 FD | 	jmp	#LR__1274
100cc     24 01 90 FD | 	jmp	#LR__1275
100d0     40 01 90 FD | 	jmp	#LR__1276
100d4     50 01 90 FD | 	jmp	#LR__1277
100d8     60 01 90 FD | 	jmp	#LR__1278
100dc     7C 01 90 FD | 	jmp	#LR__1279
100e0     8C 01 90 FD | 	jmp	#LR__1280
100e4     B8 01 90 FD | 	jmp	#LR__1281
100e8                 | LR__1269
100e8     A7 12 02 F6 | 	mov	arg01, fp
100ec     34 4E 05 F1 | 	add	fp, #52
100f0     A7 14 02 FB | 	rdlong	arg02, fp
100f4     34 4E 85 F1 | 	sub	fp, #52
100f8     0C 16 06 F6 | 	mov	arg03, #12
100fc     0B 00 00 FF 
10100     CC E4 05 F1 | 	add	objptr, ##5836
10104     B4 EA B0 FD | 	call	#_psram_spin2_read1
10108     0B 00 00 FF 
1010c     CC E4 85 F1 | 	sub	objptr, ##5836
10110     8C 01 90 FD | 	jmp	#LR__1281
10114                 | LR__1270
10114     08 4E 05 F1 | 	add	fp, #8
10118     A7 38 68 FC | 	wrlong	#28, fp
1011c     2C 4E 05 F1 | 	add	fp, #44
10120     A7 12 02 FB | 	rdlong	arg01, fp
10124     34 4E 85 F1 | 	sub	fp, #52
10128     64 B4 B0 FD | 	call	#_pspeek
1012c     FD FA E1 F8 | 	getbyte	result1, result1, #0
10130     A7 FA 61 FC | 	wrlong	result1, fp
10134     80 FA 15 F2 | 	cmp	result1, #128 wc
10138     00 1F 66 36 |  if_ae	neg	local01, #256
1013c     A7 22 02 3B |  if_ae	rdlong	local03, fp
10140     11 1F 42 35 |  if_ae	or	local01, local03
10144     A7 1E 62 3C |  if_ae	wrlong	local01, fp
10148     54 01 90 FD | 	jmp	#LR__1281
1014c                 | LR__1271
1014c     08 4E 05 F1 | 	add	fp, #8
10150     A7 3A 68 FC | 	wrlong	#29, fp
10154     2C 4E 05 F1 | 	add	fp, #44
10158     A7 12 02 FB | 	rdlong	arg01, fp
1015c     34 4E 85 F1 | 	sub	fp, #52
10160     2C B4 B0 FD | 	call	#_pspeek
10164     FD FA E1 F8 | 	getbyte	result1, result1, #0
10168     A7 FA 61 FC | 	wrlong	result1, fp
1016c     30 01 90 FD | 	jmp	#LR__1281
10170                 | LR__1272
10170     08 4E 05 F1 | 	add	fp, #8
10174     A7 38 68 FC | 	wrlong	#28, fp
10178     2C 4E 05 F1 | 	add	fp, #44
1017c     A7 12 02 FB | 	rdlong	arg01, fp
10180     34 4E 85 F1 | 	sub	fp, #52
10184     60 B4 B0 FD | 	call	#_pslpeek
10188     FD FA 31 F9 | 	getword	result1, result1, #0
1018c     A7 FA 61 FC | 	wrlong	result1, fp
10190     40 00 00 FF 
10194     00 FA 15 F2 | 	cmp	result1, ##32768 wc
10198     FF 7F 00 3F 
1019c     00 1F 06 36 |  if_ae	mov	local01, ##16776960
101a0     A7 22 02 3B |  if_ae	rdlong	local03, fp
101a4     11 1F 42 35 |  if_ae	or	local01, local03
101a8     A7 1E 62 3C |  if_ae	wrlong	local01, fp
101ac     F0 00 90 FD | 	jmp	#LR__1281
101b0                 | LR__1273
101b0     08 4E 05 F1 | 	add	fp, #8
101b4     A7 3A 68 FC | 	wrlong	#29, fp
101b8     2C 4E 05 F1 | 	add	fp, #44
101bc     A7 12 02 FB | 	rdlong	arg01, fp
101c0     34 4E 85 F1 | 	sub	fp, #52
101c4     20 B4 B0 FD | 	call	#_pslpeek
101c8     FD FA 31 F9 | 	getword	result1, result1, #0
101cc     A7 FA 61 FC | 	wrlong	result1, fp
101d0     CC 00 90 FD | 	jmp	#LR__1281
101d4                 | LR__1274
101d4     08 4E 05 F1 | 	add	fp, #8
101d8     A7 38 68 FC | 	wrlong	#28, fp
101dc     2C 4E 05 F1 | 	add	fp, #44
101e0     A7 12 02 FB | 	rdlong	arg01, fp
101e4     34 4E 85 F1 | 	sub	fp, #52
101e8     FC B3 B0 FD | 	call	#_pslpeek
101ec     A7 FA 61 FC | 	wrlong	result1, fp
101f0     AC 00 90 FD | 	jmp	#LR__1281
101f4                 | LR__1275
101f4     08 4E 05 F1 | 	add	fp, #8
101f8     A7 3A 68 FC | 	wrlong	#29, fp
101fc     2C 4E 05 F1 | 	add	fp, #44
10200     A7 12 02 FB | 	rdlong	arg01, fp
10204     34 4E 85 F1 | 	sub	fp, #52
10208     DC B3 B0 FD | 	call	#_pslpeek
1020c     A7 FA 61 FC | 	wrlong	result1, fp
10210     8C 00 90 FD | 	jmp	#LR__1281
10214                 | LR__1276
10214     08 4E 05 F1 | 	add	fp, #8
10218     A7 FE 69 FC | 	wrlong	#255, fp
1021c     08 4E 85 F1 | 	sub	fp, #8
10220     A7 60 68 FC | 	wrlong	#48, fp
10224     78 00 90 FD | 	jmp	#LR__1281
10228                 | LR__1277
10228     08 4E 05 F1 | 	add	fp, #8
1022c     A7 FE 69 FC | 	wrlong	#255, fp
10230     08 4E 85 F1 | 	sub	fp, #8
10234     A7 60 68 FC | 	wrlong	#48, fp
10238     64 00 90 FD | 	jmp	#LR__1281
1023c                 | LR__1278
1023c     08 4E 05 F1 | 	add	fp, #8
10240     A7 3C 68 FC | 	wrlong	#30, fp
10244     2C 4E 05 F1 | 	add	fp, #44
10248     A7 12 02 FB | 	rdlong	arg01, fp
1024c     34 4E 85 F1 | 	sub	fp, #52
10250     94 B3 B0 FD | 	call	#_pslpeek
10254     A7 FA 61 FC | 	wrlong	result1, fp
10258     44 00 90 FD | 	jmp	#LR__1281
1025c                 | LR__1279
1025c     08 4E 05 F1 | 	add	fp, #8
10260     A7 FE 69 FC | 	wrlong	#255, fp
10264     08 4E 85 F1 | 	sub	fp, #8
10268     A7 60 68 FC | 	wrlong	#48, fp
1026c     30 00 90 FD | 	jmp	#LR__1281
10270                 | LR__1280
10270     08 4E 05 F1 | 	add	fp, #8
10274     A7 3E 68 FC | 	wrlong	#31, fp
10278     2C 4E 05 F1 | 	add	fp, #44
1027c     A7 12 02 FB | 	rdlong	arg01, fp
10280     34 4E 85 F1 | 	sub	fp, #52
10284     60 B3 B0 FD | 	call	#_pslpeek
10288     A7 FA 61 FC | 	wrlong	result1, fp
1028c     00 04 00 FF 
10290     00 FA 15 F2 | 	cmp	result1, ##524288 wc
10294     08 4E 05 31 |  if_ae	add	fp, #8
10298     A7 56 68 3C |  if_ae	wrlong	#43, fp
1029c     08 4E 85 31 |  if_ae	sub	fp, #8
102a0                 | LR__1281
102a0     A7 12 02 F6 | 	mov	arg01, fp
102a4     2C A9 BF FD | 	call	#_push
102a8                 | LR__1282
102a8     A7 F0 03 F6 | 	mov	ptra, fp
102ac     B2 00 A0 FD | 	call	#popregs_
102b0                 | _do_getvar_ret
102b0     2D 00 64 FD | 	ret
102b4                 | 
102b4                 | ' 
102b4                 | ' 
102b4                 | ' sub do_getaddr
102b4                 | _do_getaddr
102b4     01 4A 05 F6 | 	mov	COUNT_, #1
102b8     A8 00 A0 FD | 	call	#pushregs_
102bc     38 F0 07 F1 | 	add	ptra, #56
102c0                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
102c0                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
102c0     4A 00 00 FF 
102c4     B0 E4 05 F1 | 	add	objptr, ##38064
102c8     F2 12 02 FB | 	rdlong	arg01, objptr
102cc     09 FD 01 F6 | 	mov	result2, arg01
102d0     01 FC 65 F0 | 	shl	result2, #1
102d4     09 FD 01 F1 | 	add	result2, arg01
102d8     02 FC 65 F0 | 	shl	result2, #2
102dc     03 00 00 FF 
102e0     04 E4 85 F1 | 	sub	objptr, ##1540
102e4     F2 FC 01 F1 | 	add	result2, objptr
102e8     04 FC 05 F1 | 	add	result2, #4
102ec     FE FC 09 FB | 	rdlong	result2, result2 wz
102f0     47 00 00 FF 
102f4     AC E4 85 F1 | 	sub	objptr, ##36524
102f8     C4 00 90 5D |  if_ne	jmp	#LR__1290
102fc     4A 00 00 FF 
10300     B0 E4 05 F1 | 	add	objptr, ##38064
10304     F2 12 02 FB | 	rdlong	arg01, objptr
10308     09 FD 01 F6 | 	mov	result2, arg01
1030c     01 FC 65 F0 | 	shl	result2, #1
10310     09 FD 01 F1 | 	add	result2, arg01
10314     02 FC 65 F0 | 	shl	result2, #2
10318     03 00 00 FF 
1031c     04 E4 85 F1 | 	sub	objptr, ##1540
10320     F2 FC 01 F1 | 	add	result2, objptr
10324     FE 12 02 FB | 	rdlong	arg01, result2
10328     04 12 66 F0 | 	shl	arg01, #4
1032c     32 00 00 FF 
10330     84 E4 85 F1 | 	sub	objptr, ##25732
10334     F2 12 02 F1 | 	add	arg01, objptr
10338     0C 12 06 F1 | 	add	arg01, #12
1033c     09 13 02 FB | 	rdlong	arg01, arg01
10340     08 4E 05 F1 | 	add	fp, #8
10344     A7 12 62 FC | 	wrlong	arg01, fp
10348                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
10348                 | '    if t1.result_type>=array_no_type then goto 2200
10348     08 4E 85 F1 | 	sub	fp, #8
1034c     00 13 16 F2 | 	cmp	arg01, #256 wc
10350     15 00 00 FF 
10354     28 E4 85 F1 | 	sub	objptr, ##10792
10358     64 00 90 3D |  if_ae	jmp	#LR__1291
1035c     4A 00 00 FF 
10360     B0 E4 05 F1 | 	add	objptr, ##38064
10364     F2 12 02 FB | 	rdlong	arg01, objptr
10368     09 FB 01 F6 | 	mov	result1, arg01
1036c     01 FA 65 F0 | 	shl	result1, #1
10370     09 FB 01 F1 | 	add	result1, arg01
10374     02 FA 65 F0 | 	shl	result1, #2
10378     03 00 00 FF 
1037c     04 E4 85 F1 | 	sub	objptr, ##1540
10380     F2 FA 01 F1 | 	add	result1, objptr
10384     FD FA 01 FB | 	rdlong	result1, result1
10388     04 FA 65 F0 | 	shl	result1, #4
1038c     32 00 00 FF 
10390     84 E4 85 F1 | 	sub	objptr, ##25732
10394     F2 FA 01 F1 | 	add	result1, objptr
10398     04 FA 05 F1 | 	add	result1, #4
1039c     15 00 00 FF 
103a0     28 E4 85 F1 | 	sub	objptr, ##10792
103a4     A7 FA 61 FC | 	wrlong	result1, fp
103a8     08 4E 05 F1 | 	add	fp, #8
103ac     A7 3A 68 FC | 	wrlong	#29, fp
103b0     08 4E 85 F1 | 	sub	fp, #8
103b4     A7 12 02 F6 | 	mov	arg01, fp
103b8     18 A8 BF FD | 	call	#_push
103bc                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
103bc                 | '   t1.result_type=result_uint
103bc                 | '   push t1 : return
103bc     D8 02 90 FD | 	jmp	#LR__1300
103c0                 | LR__1290
103c0                 | LR__1291
103c0     4A 00 00 FF 
103c4     B0 E4 05 F1 | 	add	objptr, ##38064
103c8     F2 FE 01 FB | 	rdlong	result3, objptr
103cc     FF 12 02 F6 | 	mov	arg01, result3
103d0     01 12 66 F0 | 	shl	arg01, #1
103d4     FF 12 02 F1 | 	add	arg01, result3
103d8     02 12 66 F0 | 	shl	arg01, #2
103dc     03 00 00 FF 
103e0     04 E4 85 F1 | 	sub	objptr, ##1540
103e4     F2 12 02 F1 | 	add	arg01, objptr
103e8     09 13 02 FB | 	rdlong	arg01, arg01
103ec     04 12 66 F0 | 	shl	arg01, #4
103f0     32 00 00 FF 
103f4     84 E4 85 F1 | 	sub	objptr, ##25732
103f8     F2 12 02 F1 | 	add	arg01, objptr
103fc     04 12 06 F1 | 	add	arg01, #4
10400     09 13 02 FB | 	rdlong	arg01, arg01
10404     0C 4E 05 F1 | 	add	fp, #12
10408     A7 12 62 FC | 	wrlong	arg01, fp
1040c     0C 4E 85 F1 | 	sub	fp, #12
10410     15 00 00 FF 
10414     28 E4 85 F1 | 	sub	objptr, ##10792
10418     CC B1 B0 FD | 	call	#_pslpeek
1041c     FD FA 31 F9 | 	getword	result1, result1, #0
10420     10 4E 05 F1 | 	add	fp, #16
10424     A7 FA 61 FC | 	wrlong	result1, fp
10428     4A 00 00 FF 
1042c     B0 E4 05 F1 | 	add	objptr, ##38064
10430     F2 FE 01 FB | 	rdlong	result3, objptr
10434     FF 12 02 F6 | 	mov	arg01, result3
10438     01 12 66 F0 | 	shl	arg01, #1
1043c     FF 12 02 F1 | 	add	arg01, result3
10440     02 12 66 F0 | 	shl	arg01, #2
10444     03 00 00 FF 
10448     04 E4 85 F1 | 	sub	objptr, ##1540
1044c     F2 12 02 F1 | 	add	arg01, objptr
10450     04 12 06 F1 | 	add	arg01, #4
10454     09 13 02 FB | 	rdlong	arg01, arg01
10458     04 4E 05 F1 | 	add	fp, #4
1045c     A7 12 62 FC | 	wrlong	arg01, fp
10460     08 4E 85 F1 | 	sub	fp, #8
10464     A7 12 02 FB | 	rdlong	arg01, fp
10468     0C 4E 85 F1 | 	sub	fp, #12
1046c     02 12 06 F1 | 	add	arg01, #2
10470     47 00 00 FF 
10474     AC E4 85 F1 | 	sub	objptr, ##36524
10478     14 B1 B0 FD | 	call	#_pspeek
1047c     FD FA E1 F8 | 	getbyte	result1, result1, #0
10480     18 4E 05 F1 | 	add	fp, #24
10484     A7 FA 61 FC | 	wrlong	result1, fp
10488     0C 4E 85 F1 | 	sub	fp, #12
1048c     A7 12 02 FB | 	rdlong	arg01, fp
10490     0C 4E 85 F1 | 	sub	fp, #12
10494     04 12 06 F1 | 	add	arg01, #4
10498     4C B1 B0 FD | 	call	#_pslpeek
1049c     1C 4E 05 F1 | 	add	fp, #28
104a0     A7 FA 61 FC | 	wrlong	result1, fp
104a4     10 4E 85 F1 | 	sub	fp, #16
104a8     A7 12 02 FB | 	rdlong	arg01, fp
104ac     0C 4E 85 F1 | 	sub	fp, #12
104b0     08 12 06 F1 | 	add	arg01, #8
104b4     30 B1 B0 FD | 	call	#_pslpeek
104b8     20 4E 05 F1 | 	add	fp, #32
104bc     A7 FA 61 FC | 	wrlong	result1, fp
104c0     14 4E 85 F1 | 	sub	fp, #20
104c4     A7 12 02 FB | 	rdlong	arg01, fp
104c8     0C 4E 85 F1 | 	sub	fp, #12
104cc     0C 12 06 F1 | 	add	arg01, #12
104d0     14 B1 B0 FD | 	call	#_pslpeek
104d4     24 4E 05 F1 | 	add	fp, #36
104d8     A7 FA 61 FC | 	wrlong	result1, fp
104dc                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
104dc                 | ' esize=pspeek(arrptr+2)
104dc                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
104dc                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
104dc                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
104dc                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
104dc     10 4E 85 F1 | 	sub	fp, #16
104e0     A7 12 02 FB | 	rdlong	arg01, fp
104e4     14 4E 85 F1 | 	sub	fp, #20
104e8     03 12 16 F2 | 	cmp	arg01, #3 wc
104ec     34 00 90 CD |  if_b	jmp	#LR__1292
104f0     48 A6 BF FD | 	call	#_pop
104f4     A7 FA 61 FC | 	wrlong	result1, fp
104f8     04 4E 05 F1 | 	add	fp, #4
104fc     A7 FC 61 FC | 	wrlong	result2, fp
10500     04 4E 05 F1 | 	add	fp, #4
10504     A7 FE 61 FC | 	wrlong	result3, fp
10508     08 4E 85 F1 | 	sub	fp, #8
1050c     A7 12 02 F6 | 	mov	arg01, fp
10510     A0 39 B0 FD | 	call	#_converttoint
10514     30 4E 05 F1 | 	add	fp, #48
10518     A7 FA 61 FC | 	wrlong	result1, fp
1051c     30 4E 85 F1 | 	sub	fp, #48
10520     0C 00 90 FD | 	jmp	#LR__1293
10524                 | LR__1292
10524     30 4E 05 F1 | 	add	fp, #48
10528     A7 00 68 FC | 	wrlong	#0, fp
1052c     30 4E 85 F1 | 	sub	fp, #48
10530                 | LR__1293
10530                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
10530     14 4E 05 F1 | 	add	fp, #20
10534     A7 12 02 FB | 	rdlong	arg01, fp
10538     14 4E 85 F1 | 	sub	fp, #20
1053c     02 12 16 F2 | 	cmp	arg01, #2 wc
10540     34 00 90 CD |  if_b	jmp	#LR__1294
10544     F4 A5 BF FD | 	call	#_pop
10548     A7 FA 61 FC | 	wrlong	result1, fp
1054c     04 4E 05 F1 | 	add	fp, #4
10550     A7 FC 61 FC | 	wrlong	result2, fp
10554     04 4E 05 F1 | 	add	fp, #4
10558     A7 FE 61 FC | 	wrlong	result3, fp
1055c     08 4E 85 F1 | 	sub	fp, #8
10560     A7 12 02 F6 | 	mov	arg01, fp
10564     4C 39 B0 FD | 	call	#_converttoint
10568     2C 4E 05 F1 | 	add	fp, #44
1056c     A7 FA 61 FC | 	wrlong	result1, fp
10570     2C 4E 85 F1 | 	sub	fp, #44
10574     0C 00 90 FD | 	jmp	#LR__1295
10578                 | LR__1294
10578     2C 4E 05 F1 | 	add	fp, #44
1057c     A7 00 68 FC | 	wrlong	#0, fp
10580     2C 4E 85 F1 | 	sub	fp, #44
10584                 | LR__1295
10584                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
10584     14 4E 05 F1 | 	add	fp, #20
10588     A7 12 02 FB | 	rdlong	arg01, fp
1058c     14 4E 85 F1 | 	sub	fp, #20
10590     01 12 16 F2 | 	cmp	arg01, #1 wc
10594     34 00 90 CD |  if_b	jmp	#LR__1296
10598     A0 A5 BF FD | 	call	#_pop
1059c     A7 FA 61 FC | 	wrlong	result1, fp
105a0     04 4E 05 F1 | 	add	fp, #4
105a4     A7 FC 61 FC | 	wrlong	result2, fp
105a8     04 4E 05 F1 | 	add	fp, #4
105ac     A7 FE 61 FC | 	wrlong	result3, fp
105b0     08 4E 85 F1 | 	sub	fp, #8
105b4     A7 12 02 F6 | 	mov	arg01, fp
105b8     F8 38 B0 FD | 	call	#_converttoint
105bc     28 4E 05 F1 | 	add	fp, #40
105c0     A7 FA 61 FC | 	wrlong	result1, fp
105c4     28 4E 85 F1 | 	sub	fp, #40
105c8     0C 00 90 FD | 	jmp	#LR__1297
105cc                 | LR__1296
105cc     28 4E 05 F1 | 	add	fp, #40
105d0     A7 00 68 FC | 	wrlong	#0, fp
105d4     28 4E 85 F1 | 	sub	fp, #40
105d8                 | LR__1297
105d8                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
105d8                 | ' if numpar>0 then
105d8     14 4E 05 F1 | 	add	fp, #20
105dc     A7 FE 01 FB | 	rdlong	result3, fp
105e0     14 4E 85 F1 | 	sub	fp, #20
105e4     01 FE 15 F2 | 	cmp	result3, #1 wc
105e8     8C 00 90 CD |  if_b	jmp	#LR__1298
105ec     0C 4E 05 F1 | 	add	fp, #12
105f0     A7 FC 01 FB | 	rdlong	result2, fp
105f4     1C 4E 05 F1 | 	add	fp, #28
105f8     A7 FE 01 FB | 	rdlong	result3, fp
105fc     04 4E 05 F1 | 	add	fp, #4
10600     A7 12 02 FB | 	rdlong	arg01, fp
10604     10 4E 85 F1 | 	sub	fp, #16
10608     A7 FA 01 FB | 	rdlong	result1, fp
1060c     FD 12 02 FD | 	qmul	arg01, result1
10610     10 FC 05 F1 | 	add	result2, #16
10614     14 4E 05 F1 | 	add	fp, #20
10618     A7 1E 02 FB | 	rdlong	local01, fp
1061c     18 12 62 FD | 	getqx	arg01
10620     FD 1E 02 FD | 	qmul	local01, result1
10624     09 FF 01 F1 | 	add	result3, arg01
10628     10 4E 85 F1 | 	sub	fp, #16
1062c     A7 1E 02 FB | 	rdlong	local01, fp
10630     18 FA 61 FD | 	getqx	result1
10634     0F FB 01 FD | 	qmul	result1, local01
10638     08 4E 85 F1 | 	sub	fp, #8
1063c     A7 1E 02 FB | 	rdlong	local01, fp
10640     18 FA 61 FD | 	getqx	result1
10644     FD FE 01 F1 | 	add	result3, result1
10648     0F FF 01 FD | 	qmul	result3, local01
1064c     1C 4E 05 F1 | 	add	fp, #28
10650     18 1E 62 FD | 	getqx	local01
10654     0F FD 01 F1 | 	add	result2, local01
10658     A7 FC 61 FC | 	wrlong	result2, fp
1065c     2C 4E 85 F1 | 	sub	fp, #44
10660     A7 3A 68 FC | 	wrlong	#29, fp
10664     2C 4E 05 F1 | 	add	fp, #44
10668     A7 1E 02 FB | 	rdlong	local01, fp
1066c     34 4E 85 F1 | 	sub	fp, #52
10670     A7 1E 62 FC | 	wrlong	local01, fp
10674     18 00 90 FD | 	jmp	#LR__1299
10678                 | LR__1298
10678     08 4E 05 F1 | 	add	fp, #8
1067c     A7 3A 68 FC | 	wrlong	#29, fp
10680     04 4E 05 F1 | 	add	fp, #4
10684     A7 1E 02 FB | 	rdlong	local01, fp
10688     0C 4E 85 F1 | 	sub	fp, #12
1068c     A7 1E 62 FC | 	wrlong	local01, fp
10690                 | LR__1299
10690     A7 12 02 F6 | 	mov	arg01, fp
10694     3C A5 BF FD | 	call	#_push
10698                 | LR__1300
10698     A7 F0 03 F6 | 	mov	ptra, fp
1069c     B2 00 A0 FD | 	call	#popregs_
106a0                 | _do_getaddr_ret
106a0     2D 00 64 FD | 	ret
106a4                 | 
106a4                 | ' 
106a4                 | ' 
106a4                 | ' sub do_inkey
106a4                 | _do_inkey
106a4     02 4A 05 F6 | 	mov	COUNT_, #2
106a8     A8 00 A0 FD | 	call	#pushregs_
106ac     0C F0 07 F1 | 	add	ptra, #12
106b0     34 E9 B0 FD | 	call	#_usbnew_spin2_get_key
106b4     45 00 00 FF 
106b8     A4 E4 05 F1 | 	add	objptr, ##35492
106bc     F2 FA 61 FC | 	wrlong	result1, objptr
106c0                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
106c0     45 00 00 FF 
106c4     A4 E4 85 F1 | 	sub	objptr, ##35492
106c8     00 FA 0D F2 | 	cmp	result1, #0 wz
106cc     94 00 90 AD |  if_e	jmp	#LR__1311
106d0     45 00 00 FF 
106d4     A4 E4 05 F1 | 	add	objptr, ##35492
106d8     F2 1C 02 FB | 	rdlong	arg06, objptr
106dc     45 00 00 FF 
106e0     A4 E4 85 F1 | 	sub	objptr, ##35492
106e4     00 00 40 FF 
106e8     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
106ec     45 00 00 CF 
106f0     A4 E4 05 C1 |  if_b	add	objptr, ##35492
106f4     F2 1E 02 CB |  if_b	rdlong	local01, objptr
106f8     45 00 00 CF 
106fc     A4 E4 85 C1 |  if_b	sub	objptr, ##35492
10700     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
10704     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
10708     58 00 90 3D |  if_ae	jmp	#LR__1311
1070c                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
1070c     58 00 00 FF 
10710     20 E5 05 F1 | 	add	objptr, ##45344
10714     F2 1C 02 FB | 	rdlong	arg06, objptr
10718     58 00 00 FF 
1071c     20 E5 85 F1 | 	sub	objptr, ##45344
10720     01 1C 0E F2 | 	cmp	arg06, #1 wz
10724     3C 00 90 5D |  if_ne	jmp	#LR__1310
10728     59 00 00 FF 
1072c     C4 E5 05 F1 | 	add	objptr, ##46020
10730     F2 14 02 FB | 	rdlong	arg02, objptr
10734     04 E4 85 F1 | 	sub	objptr, #4
10738     F2 1A 02 FB | 	rdlong	arg05, objptr
1073c     07 12 06 F6 | 	mov	arg01, #7
10740     56 00 00 FF 
10744     44 16 06 F6 | 	mov	arg03, ##44100
10748     0C 18 C6 F9 | 	decod	arg04, #12
1074c     01 1C 66 F6 | 	neg	arg06, #1
10750     4E 00 00 FF 
10754     F4 E4 85 F1 | 	sub	objptr, ##40180
10758     30 EC B0 FD | 	call	#_audio096_spin2_play
1075c     0B 00 00 FF 
10760     CC E4 85 F1 | 	sub	objptr, ##5836
10764                 | LR__1310
10764                 | LR__1311
10764                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
10764     45 00 00 FF 
10768     A4 E4 05 F1 | 	add	objptr, ##35492
1076c     F2 1C 0A FB | 	rdlong	arg06, objptr wz
10770     45 00 00 FF 
10774     A4 E4 85 F1 | 	sub	objptr, ##35492
10778     D4 01 90 AD |  if_e	jmp	#LR__1320
1077c     45 00 00 FF 
10780     A4 E4 05 F1 | 	add	objptr, ##35492
10784     F2 1C 02 FB | 	rdlong	arg06, objptr
10788     45 00 00 FF 
1078c     A4 E4 85 F1 | 	sub	objptr, ##35492
10790     00 00 40 FF 
10794     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
10798     45 00 00 CF 
1079c     A4 E4 05 C1 |  if_b	add	objptr, ##35492
107a0     F2 1E 02 CB |  if_b	rdlong	local01, objptr
107a4     45 00 00 CF 
107a8     A4 E4 85 C1 |  if_b	sub	objptr, ##35492
107ac     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
107b0     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
107b4     98 01 90 3D |  if_ae	jmp	#LR__1320
107b8                 | '   if leds and 2 = 2 then 
107b8     59 00 00 FF 
107bc     EC E5 05 F1 | 	add	objptr, ##46060
107c0     F2 1E 0A FB | 	rdlong	local01, objptr wz
107c4     59 00 00 FF 
107c8     EC E5 85 F1 | 	sub	objptr, ##46060
107cc     58 01 90 AD |  if_e	jmp	#LR__1319
107d0                 | '     if key>96 andalso key<123 then
107d0     45 00 00 FF 
107d4     A4 E4 05 F1 | 	add	objptr, ##35492
107d8     F2 1E 02 FB | 	rdlong	local01, objptr
107dc     45 00 00 FF 
107e0     A4 E4 85 F1 | 	sub	objptr, ##35492
107e4     61 1E 16 F2 | 	cmp	local01, #97 wc
107e8     3C 00 90 CD |  if_b	jmp	#LR__1312
107ec     45 00 00 FF 
107f0     A4 E4 05 F1 | 	add	objptr, ##35492
107f4     F2 1E 02 FB | 	rdlong	local01, objptr
107f8     45 00 00 FF 
107fc     A4 E4 85 F1 | 	sub	objptr, ##35492
10800     7B 1E 16 F2 | 	cmp	local01, #123 wc
10804     20 00 90 3D |  if_ae	jmp	#LR__1312
10808     45 00 00 FF 
1080c     A4 E4 05 F1 | 	add	objptr, ##35492
10810     F2 1E 02 FB | 	rdlong	local01, objptr
10814     20 1E 86 F1 | 	sub	local01, #32
10818     F2 1E 62 FC | 	wrlong	local01, objptr
1081c     45 00 00 FF 
10820     A4 E4 85 F1 | 	sub	objptr, ##35492
10824     00 01 90 FD | 	jmp	#LR__1318
10828                 | LR__1312
10828     45 00 00 FF 
1082c     A4 E4 05 F1 | 	add	objptr, ##35492
10830     F2 1E 02 FB | 	rdlong	local01, objptr
10834     45 00 00 FF 
10838     A4 E4 85 F1 | 	sub	objptr, ##35492
1083c     41 1E 16 F2 | 	cmp	local01, #65 wc
10840     3C 00 90 CD |  if_b	jmp	#LR__1313
10844     45 00 00 FF 
10848     A4 E4 05 F1 | 	add	objptr, ##35492
1084c     F2 1E 02 FB | 	rdlong	local01, objptr
10850     45 00 00 FF 
10854     A4 E4 85 F1 | 	sub	objptr, ##35492
10858     5B 1E 16 F2 | 	cmp	local01, #91 wc
1085c     20 00 90 3D |  if_ae	jmp	#LR__1313
10860     45 00 00 FF 
10864     A4 E4 05 F1 | 	add	objptr, ##35492
10868     F2 1E 02 FB | 	rdlong	local01, objptr
1086c     20 1E 06 F1 | 	add	local01, #32
10870     F2 1E 62 FC | 	wrlong	local01, objptr
10874     45 00 00 FF 
10878     A4 E4 85 F1 | 	sub	objptr, ##35492
1087c     A8 00 90 FD | 	jmp	#LR__1317
10880                 | LR__1313
10880     45 00 00 FF 
10884     A4 E4 05 F1 | 	add	objptr, ##35492
10888     F2 1E 02 FB | 	rdlong	local01, objptr
1088c     45 00 00 FF 
10890     A4 E4 85 F1 | 	sub	objptr, ##35492
10894     17 1E 16 F2 | 	cmp	local01, #23 wc
10898     3C 00 90 CD |  if_b	jmp	#LR__1314
1089c     45 00 00 FF 
108a0     A4 E4 05 F1 | 	add	objptr, ##35492
108a4     F2 1E 02 FB | 	rdlong	local01, objptr
108a8     45 00 00 FF 
108ac     A4 E4 85 F1 | 	sub	objptr, ##35492
108b0     20 1E 16 F2 | 	cmp	local01, #32 wc
108b4     20 00 90 3D |  if_ae	jmp	#LR__1314
108b8     45 00 00 FF 
108bc     A4 E4 05 F1 | 	add	objptr, ##35492
108c0     F2 1E 02 FB | 	rdlong	local01, objptr
108c4     09 1E 86 F1 | 	sub	local01, #9
108c8     F2 1E 62 FC | 	wrlong	local01, objptr
108cc     45 00 00 FF 
108d0     A4 E4 85 F1 | 	sub	objptr, ##35492
108d4     50 00 90 FD | 	jmp	#LR__1316
108d8                 | LR__1314
108d8     45 00 00 FF 
108dc     A4 E4 05 F1 | 	add	objptr, ##35492
108e0     F2 20 02 FB | 	rdlong	local02, objptr
108e4     45 00 00 FF 
108e8     A4 E4 85 F1 | 	sub	objptr, ##35492
108ec     0E 20 16 F2 | 	cmp	local02, #14 wc
108f0     34 00 90 CD |  if_b	jmp	#LR__1315
108f4     45 00 00 FF 
108f8     A4 E4 05 F1 | 	add	objptr, ##35492
108fc     F2 1E 02 FB | 	rdlong	local01, objptr
10900     45 00 00 FF 
10904     A4 E4 85 F1 | 	sub	objptr, ##35492
10908     17 1E 16 F2 | 	cmp	local01, #23 wc
1090c     59 00 00 CF 
10910     FC E5 05 C1 |  if_b	add	objptr, ##46076
10914     F2 20 02 CB |  if_b	rdlong	local02, objptr
10918     27 20 06 C1 |  if_b	add	local02, #39
1091c     F2 20 62 CC |  if_b	wrlong	local02, objptr
10920     59 00 00 CF 
10924     FC E5 85 C1 |  if_b	sub	objptr, ##46076
10928                 | LR__1315
10928                 | LR__1316
10928                 | LR__1317
10928                 | LR__1318
10928                 | LR__1319
10928     45 00 00 FF 
1092c     A4 E4 05 F1 | 	add	objptr, ##35492
10930     F2 12 02 FB | 	rdlong	arg01, objptr
10934     45 00 00 FF 
10938     A4 E4 85 F1 | 	sub	objptr, ##35492
1093c     58 AD B0 FD | 	call	#_scantochar
10940     FD 12 02 F6 | 	mov	arg01, result1
10944     88 10 B1 FD | 	call	#__system__Chr_S
10948     A7 FA 61 FC | 	wrlong	result1, fp
1094c     0C 00 90 FD | 	jmp	#LR__1321
10950                 | LR__1320
10950     7A 01 00 FF 
10954     C4 20 06 F6 | 	mov	local02, ##@LR__5230
10958     A7 20 62 FC | 	wrlong	local02, fp
1095c                 | LR__1321
1095c     08 4E 05 F1 | 	add	fp, #8
10960     A7 3E 68 FC | 	wrlong	#31, fp
10964     08 4E 85 F1 | 	sub	fp, #8
10968     A7 12 02 F6 | 	mov	arg01, fp
1096c     64 A2 BF FD | 	call	#_push
10970     A7 F0 03 F6 | 	mov	ptra, fp
10974     B2 00 A0 FD | 	call	#popregs_
10978                 | _do_inkey_ret
10978     2D 00 64 FD | 	ret
1097c                 | 
1097c                 | '  
1097c                 | ' '------------------------ Operators 
1097c                 | ' 
1097c                 | ' sub do_plus 
1097c                 | _do_plus
1097c     05 4A 05 F6 | 	mov	COUNT_, #5
10980     A8 00 A0 FD | 	call	#pushregs_
10984     18 F0 07 F1 | 	add	ptra, #24
10988     B0 A1 BF FD | 	call	#_pop
1098c     FD 1E 02 F6 | 	mov	local01, result1
10990     FE 20 02 F6 | 	mov	local02, result2
10994     FF 22 02 F6 | 	mov	local03, result3
10998     0C 4E 05 F1 | 	add	fp, #12
1099c     A7 1E 62 FC | 	wrlong	local01, fp
109a0     04 4E 05 F1 | 	add	fp, #4
109a4     A7 20 62 FC | 	wrlong	local02, fp
109a8     04 4E 05 F1 | 	add	fp, #4
109ac     A7 22 62 FC | 	wrlong	local03, fp
109b0     14 4E 85 F1 | 	sub	fp, #20
109b4     84 A1 BF FD | 	call	#_pop
109b8     FF 22 02 F6 | 	mov	local03, result3
109bc     A7 FA 61 FC | 	wrlong	result1, fp
109c0     04 4E 05 F1 | 	add	fp, #4
109c4     A7 FC 61 FC | 	wrlong	result2, fp
109c8     04 4E 05 F1 | 	add	fp, #4
109cc     A7 22 62 FC | 	wrlong	local03, fp
109d0                 | ' 
109d0                 | ' t2=pop()
109d0                 | ' t1=pop()
109d0                 | ' 
109d0                 | ' 
109d0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
109d0     08 4E 85 F1 | 	sub	fp, #8
109d4     1D 22 0E F2 | 	cmp	local03, #29 wz
109d8     14 4E 05 A1 |  if_e	add	fp, #20
109dc     A7 24 02 AB |  if_e	rdlong	local04, fp
109e0     14 4E 85 A1 |  if_e	sub	fp, #20
109e4     12 23 02 A6 |  if_e	mov	local03, local04
109e8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
109ec     1C 00 90 5D |  if_ne	jmp	#LR__1330
109f0     A7 1E 02 FB | 	rdlong	local01, fp
109f4     0C 4E 05 F1 | 	add	fp, #12
109f8     A7 20 02 FB | 	rdlong	local02, fp
109fc     0C 4E 85 F1 | 	sub	fp, #12
10a00     10 1F 02 F1 | 	add	local01, local02
10a04     A7 1E 62 FC | 	wrlong	local01, fp
10a08     48 04 90 FD | 	jmp	#LR__1345
10a0c                 | LR__1330
10a0c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
10a0c     08 4E 05 F1 | 	add	fp, #8
10a10     A7 1E 02 FB | 	rdlong	local01, fp
10a14     08 4E 85 F1 | 	sub	fp, #8
10a18     1D 1E 0E F2 | 	cmp	local01, #29 wz
10a1c     14 4E 05 A1 |  if_e	add	fp, #20
10a20     A7 24 02 AB |  if_e	rdlong	local04, fp
10a24     14 4E 85 A1 |  if_e	sub	fp, #20
10a28     12 23 02 A6 |  if_e	mov	local03, local04
10a2c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10a30     28 00 90 5D |  if_ne	jmp	#LR__1331
10a34     A7 1E 02 FB | 	rdlong	local01, fp
10a38     0C 4E 05 F1 | 	add	fp, #12
10a3c     A7 20 02 FB | 	rdlong	local02, fp
10a40     0C 4E 85 F1 | 	sub	fp, #12
10a44     10 1F 02 F1 | 	add	local01, local02
10a48     A7 1E 62 FC | 	wrlong	local01, fp
10a4c     08 4E 05 F1 | 	add	fp, #8
10a50     A7 38 68 FC | 	wrlong	#28, fp
10a54     08 4E 85 F1 | 	sub	fp, #8
10a58     F8 03 90 FD | 	jmp	#LR__1345
10a5c                 | LR__1331
10a5c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
10a5c     08 4E 05 F1 | 	add	fp, #8
10a60     A7 1E 02 FB | 	rdlong	local01, fp
10a64     08 4E 85 F1 | 	sub	fp, #8
10a68     1D 1E 0E F2 | 	cmp	local01, #29 wz
10a6c     14 4E 05 A1 |  if_e	add	fp, #20
10a70     A7 24 02 AB |  if_e	rdlong	local04, fp
10a74     14 4E 85 A1 |  if_e	sub	fp, #20
10a78     12 23 02 A6 |  if_e	mov	local03, local04
10a7c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10a80     30 00 90 5D |  if_ne	jmp	#LR__1332
10a84     A7 12 02 FB | 	rdlong	arg01, fp
10a88     B4 14 B1 FD | 	call	#__system___float_fromuns
10a8c     FD 12 02 F6 | 	mov	arg01, result1
10a90     0C 4E 05 F1 | 	add	fp, #12
10a94     A7 14 02 FB | 	rdlong	arg02, fp
10a98     0C 4E 85 F1 | 	sub	fp, #12
10a9c     D4 14 B1 FD | 	call	#__system___float_add
10aa0     A7 FA 61 FC | 	wrlong	result1, fp
10aa4     08 4E 05 F1 | 	add	fp, #8
10aa8     A7 3C 68 FC | 	wrlong	#30, fp
10aac     08 4E 85 F1 | 	sub	fp, #8
10ab0     A0 03 90 FD | 	jmp	#LR__1345
10ab4                 | LR__1332
10ab4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
10ab4     08 4E 05 F1 | 	add	fp, #8
10ab8     A7 1E 02 FB | 	rdlong	local01, fp
10abc     08 4E 85 F1 | 	sub	fp, #8
10ac0     1C 1E 0E F2 | 	cmp	local01, #28 wz
10ac4     14 4E 05 A1 |  if_e	add	fp, #20
10ac8     A7 24 02 AB |  if_e	rdlong	local04, fp
10acc     14 4E 85 A1 |  if_e	sub	fp, #20
10ad0     12 23 02 A6 |  if_e	mov	local03, local04
10ad4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10ad8     1C 00 90 5D |  if_ne	jmp	#LR__1333
10adc     A7 1E 02 FB | 	rdlong	local01, fp
10ae0     0C 4E 05 F1 | 	add	fp, #12
10ae4     A7 20 02 FB | 	rdlong	local02, fp
10ae8     0C 4E 85 F1 | 	sub	fp, #12
10aec     10 1F 02 F1 | 	add	local01, local02
10af0     A7 1E 62 FC | 	wrlong	local01, fp
10af4     5C 03 90 FD | 	jmp	#LR__1345
10af8                 | LR__1333
10af8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
10af8     08 4E 05 F1 | 	add	fp, #8
10afc     A7 1E 02 FB | 	rdlong	local01, fp
10b00     08 4E 85 F1 | 	sub	fp, #8
10b04     1C 1E 0E F2 | 	cmp	local01, #28 wz
10b08     14 4E 05 A1 |  if_e	add	fp, #20
10b0c     A7 24 02 AB |  if_e	rdlong	local04, fp
10b10     14 4E 85 A1 |  if_e	sub	fp, #20
10b14     12 23 02 A6 |  if_e	mov	local03, local04
10b18     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10b1c     1C 00 90 5D |  if_ne	jmp	#LR__1334
10b20     A7 1E 02 FB | 	rdlong	local01, fp
10b24     0C 4E 05 F1 | 	add	fp, #12
10b28     A7 20 02 FB | 	rdlong	local02, fp
10b2c     0C 4E 85 F1 | 	sub	fp, #12
10b30     10 1F 02 F1 | 	add	local01, local02
10b34     A7 1E 62 FC | 	wrlong	local01, fp
10b38     18 03 90 FD | 	jmp	#LR__1345
10b3c                 | LR__1334
10b3c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
10b3c     08 4E 05 F1 | 	add	fp, #8
10b40     A7 1E 02 FB | 	rdlong	local01, fp
10b44     08 4E 85 F1 | 	sub	fp, #8
10b48     1C 1E 0E F2 | 	cmp	local01, #28 wz
10b4c     14 4E 05 A1 |  if_e	add	fp, #20
10b50     A7 24 02 AB |  if_e	rdlong	local04, fp
10b54     14 4E 85 A1 |  if_e	sub	fp, #20
10b58     12 23 02 A6 |  if_e	mov	local03, local04
10b5c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10b60     40 00 90 5D |  if_ne	jmp	#LR__1335
10b64     A7 12 02 FB | 	rdlong	arg01, fp
10b68     09 13 52 F6 | 	abs	arg01, arg01 wc
10b6c     1F 26 C6 C9 |  if_b	decod	local05, #31
10b70     00 26 06 36 |  if_ae	mov	local05, #0
10b74     C8 13 B1 FD | 	call	#__system___float_fromuns
10b78     13 FB 61 F5 | 	xor	result1, local05
10b7c     FD 12 02 F6 | 	mov	arg01, result1
10b80     0C 4E 05 F1 | 	add	fp, #12
10b84     A7 14 02 FB | 	rdlong	arg02, fp
10b88     0C 4E 85 F1 | 	sub	fp, #12
10b8c     E4 13 B1 FD | 	call	#__system___float_add
10b90     A7 FA 61 FC | 	wrlong	result1, fp
10b94     08 4E 05 F1 | 	add	fp, #8
10b98     A7 3C 68 FC | 	wrlong	#30, fp
10b9c     08 4E 85 F1 | 	sub	fp, #8
10ba0     B0 02 90 FD | 	jmp	#LR__1345
10ba4                 | LR__1335
10ba4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
10ba4     08 4E 05 F1 | 	add	fp, #8
10ba8     A7 1E 02 FB | 	rdlong	local01, fp
10bac     08 4E 85 F1 | 	sub	fp, #8
10bb0     1E 1E 0E F2 | 	cmp	local01, #30 wz
10bb4     14 4E 05 A1 |  if_e	add	fp, #20
10bb8     A7 24 02 AB |  if_e	rdlong	local04, fp
10bbc     14 4E 85 A1 |  if_e	sub	fp, #20
10bc0     12 23 02 A6 |  if_e	mov	local03, local04
10bc4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10bc8     28 00 90 5D |  if_ne	jmp	#LR__1336
10bcc     A7 1E 02 FB | 	rdlong	local01, fp
10bd0     0C 4E 05 F1 | 	add	fp, #12
10bd4     A7 12 02 FB | 	rdlong	arg01, fp
10bd8     0C 4E 85 F1 | 	sub	fp, #12
10bdc     60 13 B1 FD | 	call	#__system___float_fromuns
10be0     FD 14 02 F6 | 	mov	arg02, result1
10be4     0F 13 02 F6 | 	mov	arg01, local01
10be8     88 13 B1 FD | 	call	#__system___float_add
10bec     A7 FA 61 FC | 	wrlong	result1, fp
10bf0     60 02 90 FD | 	jmp	#LR__1345
10bf4                 | LR__1336
10bf4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
10bf4     08 4E 05 F1 | 	add	fp, #8
10bf8     A7 1E 02 FB | 	rdlong	local01, fp
10bfc     08 4E 85 F1 | 	sub	fp, #8
10c00     1E 1E 0E F2 | 	cmp	local01, #30 wz
10c04     14 4E 05 A1 |  if_e	add	fp, #20
10c08     A7 24 02 AB |  if_e	rdlong	local04, fp
10c0c     14 4E 85 A1 |  if_e	sub	fp, #20
10c10     12 23 02 A6 |  if_e	mov	local03, local04
10c14     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10c18     38 00 90 5D |  if_ne	jmp	#LR__1337
10c1c     A7 1E 02 FB | 	rdlong	local01, fp
10c20     0C 4E 05 F1 | 	add	fp, #12
10c24     A7 12 02 FB | 	rdlong	arg01, fp
10c28     0C 4E 85 F1 | 	sub	fp, #12
10c2c     09 13 52 F6 | 	abs	arg01, arg01 wc
10c30     1F 26 C6 C9 |  if_b	decod	local05, #31
10c34     00 26 06 36 |  if_ae	mov	local05, #0
10c38     04 13 B1 FD | 	call	#__system___float_fromuns
10c3c     13 FB 61 F5 | 	xor	result1, local05
10c40     FD 14 02 F6 | 	mov	arg02, result1
10c44     0F 13 02 F6 | 	mov	arg01, local01
10c48     28 13 B1 FD | 	call	#__system___float_add
10c4c     A7 FA 61 FC | 	wrlong	result1, fp
10c50     00 02 90 FD | 	jmp	#LR__1345
10c54                 | LR__1337
10c54                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
10c54     08 4E 05 F1 | 	add	fp, #8
10c58     A7 1E 02 FB | 	rdlong	local01, fp
10c5c     08 4E 85 F1 | 	sub	fp, #8
10c60     1E 1E 0E F2 | 	cmp	local01, #30 wz
10c64     14 4E 05 A1 |  if_e	add	fp, #20
10c68     A7 24 02 AB |  if_e	rdlong	local04, fp
10c6c     14 4E 85 A1 |  if_e	sub	fp, #20
10c70     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
10c74     1C 00 90 5D |  if_ne	jmp	#LR__1338
10c78     A7 12 02 FB | 	rdlong	arg01, fp
10c7c     0C 4E 05 F1 | 	add	fp, #12
10c80     A7 14 02 FB | 	rdlong	arg02, fp
10c84     0C 4E 85 F1 | 	sub	fp, #12
10c88     E8 12 B1 FD | 	call	#__system___float_add
10c8c     A7 FA 61 FC | 	wrlong	result1, fp
10c90     C0 01 90 FD | 	jmp	#LR__1345
10c94                 | LR__1338
10c94                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
10c94     08 4E 05 F1 | 	add	fp, #8
10c98     A7 1E 02 FB | 	rdlong	local01, fp
10c9c     08 4E 85 F1 | 	sub	fp, #8
10ca0     1F 1E 0E F2 | 	cmp	local01, #31 wz
10ca4     24 00 90 5D |  if_ne	jmp	#LR__1339
10ca8     14 4E 05 F1 | 	add	fp, #20
10cac     A7 22 02 FB | 	rdlong	local03, fp
10cb0     14 4E 85 F1 | 	sub	fp, #20
10cb4     1F 22 0E F2 | 	cmp	local03, #31 wz
10cb8     A7 04 68 5C |  if_ne	wrlong	#2, fp
10cbc     08 4E 05 51 |  if_ne	add	fp, #8
10cc0     A7 FE 69 5C |  if_ne	wrlong	#255, fp
10cc4     08 4E 85 51 |  if_ne	sub	fp, #8
10cc8     88 01 90 5D |  if_ne	jmp	#LR__1345
10ccc                 | LR__1339
10ccc                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
10ccc     14 4E 05 F1 | 	add	fp, #20
10cd0     A7 1E 02 FB | 	rdlong	local01, fp
10cd4     14 4E 85 F1 | 	sub	fp, #20
10cd8     1F 1E 0E F2 | 	cmp	local01, #31 wz
10cdc     24 00 90 5D |  if_ne	jmp	#LR__1340
10ce0     08 4E 05 F1 | 	add	fp, #8
10ce4     A7 22 02 FB | 	rdlong	local03, fp
10ce8     08 4E 85 F1 | 	sub	fp, #8
10cec     1F 22 0E F2 | 	cmp	local03, #31 wz
10cf0     A7 04 68 5C |  if_ne	wrlong	#2, fp
10cf4     08 4E 05 51 |  if_ne	add	fp, #8
10cf8     A7 FE 69 5C |  if_ne	wrlong	#255, fp
10cfc     08 4E 85 51 |  if_ne	sub	fp, #8
10d00     50 01 90 5D |  if_ne	jmp	#LR__1345
10d04                 | LR__1340
10d04                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
10d04     08 4E 05 F1 | 	add	fp, #8
10d08     A7 1E 02 FB | 	rdlong	local01, fp
10d0c     08 4E 85 F1 | 	sub	fp, #8
10d10     1F 1E 0E F2 | 	cmp	local01, #31 wz
10d14     14 4E 05 A1 |  if_e	add	fp, #20
10d18     A7 22 02 AB |  if_e	rdlong	local03, fp
10d1c     14 4E 85 A1 |  if_e	sub	fp, #20
10d20     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10d24     1C 00 90 5D |  if_ne	jmp	#LR__1341
10d28     A7 12 02 FB | 	rdlong	arg01, fp
10d2c     0C 4E 05 F1 | 	add	fp, #12
10d30     A7 14 02 FB | 	rdlong	arg02, fp
10d34     0C 4E 85 F1 | 	sub	fp, #12
10d38     1C EB B0 FD | 	call	#__system___string_concat
10d3c     A7 FA 61 FC | 	wrlong	result1, fp
10d40     10 01 90 FD | 	jmp	#LR__1345
10d44                 | LR__1341
10d44                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
10d44     08 4E 05 F1 | 	add	fp, #8
10d48     A7 1E 02 FB | 	rdlong	local01, fp
10d4c     08 4E 85 F1 | 	sub	fp, #8
10d50     2B 1E 0E F2 | 	cmp	local01, #43 wz
10d54     14 4E 05 A1 |  if_e	add	fp, #20
10d58     A7 22 02 AB |  if_e	rdlong	local03, fp
10d5c     14 4E 85 A1 |  if_e	sub	fp, #20
10d60     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10d64     30 00 90 5D |  if_ne	jmp	#LR__1342
10d68     A7 12 02 FB | 	rdlong	arg01, fp
10d6c     20 E9 BF FD | 	call	#_convertstring
10d70     FD 12 02 F6 | 	mov	arg01, result1
10d74     0C 4E 05 F1 | 	add	fp, #12
10d78     A7 14 02 FB | 	rdlong	arg02, fp
10d7c     0C 4E 85 F1 | 	sub	fp, #12
10d80     D4 EA B0 FD | 	call	#__system___string_concat
10d84     A7 FA 61 FC | 	wrlong	result1, fp
10d88     08 4E 05 F1 | 	add	fp, #8
10d8c     A7 3E 68 FC | 	wrlong	#31, fp
10d90     08 4E 85 F1 | 	sub	fp, #8
10d94     BC 00 90 FD | 	jmp	#LR__1345
10d98                 | LR__1342
10d98                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
10d98     08 4E 05 F1 | 	add	fp, #8
10d9c     A7 1E 02 FB | 	rdlong	local01, fp
10da0     08 4E 85 F1 | 	sub	fp, #8
10da4     1F 1E 0E F2 | 	cmp	local01, #31 wz
10da8     14 4E 05 A1 |  if_e	add	fp, #20
10dac     A7 22 02 AB |  if_e	rdlong	local03, fp
10db0     14 4E 85 A1 |  if_e	sub	fp, #20
10db4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10db8     28 00 90 5D |  if_ne	jmp	#LR__1343
10dbc     A7 1E 02 FB | 	rdlong	local01, fp
10dc0     0C 4E 05 F1 | 	add	fp, #12
10dc4     A7 12 02 FB | 	rdlong	arg01, fp
10dc8     0C 4E 85 F1 | 	sub	fp, #12
10dcc     C0 E8 BF FD | 	call	#_convertstring
10dd0     FD 14 02 F6 | 	mov	arg02, result1
10dd4     0F 13 02 F6 | 	mov	arg01, local01
10dd8     7C EA B0 FD | 	call	#__system___string_concat
10ddc     A7 FA 61 FC | 	wrlong	result1, fp
10de0     70 00 90 FD | 	jmp	#LR__1345
10de4                 | LR__1343
10de4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
10de4     08 4E 05 F1 | 	add	fp, #8
10de8     A7 1E 02 FB | 	rdlong	local01, fp
10dec     08 4E 85 F1 | 	sub	fp, #8
10df0     2B 1E 0E F2 | 	cmp	local01, #43 wz
10df4     14 4E 05 A1 |  if_e	add	fp, #20
10df8     A7 22 02 AB |  if_e	rdlong	local03, fp
10dfc     14 4E 85 A1 |  if_e	sub	fp, #20
10e00     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10e04     3C 00 90 5D |  if_ne	jmp	#LR__1344
10e08     A7 12 02 FB | 	rdlong	arg01, fp
10e0c     80 E8 BF FD | 	call	#_convertstring
10e10     FD 1E 02 F6 | 	mov	local01, result1
10e14     0C 4E 05 F1 | 	add	fp, #12
10e18     A7 12 02 FB | 	rdlong	arg01, fp
10e1c     0C 4E 85 F1 | 	sub	fp, #12
10e20     6C E8 BF FD | 	call	#_convertstring
10e24     FD 14 02 F6 | 	mov	arg02, result1
10e28     0F 13 02 F6 | 	mov	arg01, local01
10e2c     28 EA B0 FD | 	call	#__system___string_concat
10e30     A7 FA 61 FC | 	wrlong	result1, fp
10e34     08 4E 05 F1 | 	add	fp, #8
10e38     A7 3E 68 FC | 	wrlong	#31, fp
10e3c     08 4E 85 F1 | 	sub	fp, #8
10e40     10 00 90 FD | 	jmp	#LR__1345
10e44                 | LR__1344
10e44     A7 08 68 FC | 	wrlong	#4, fp
10e48     08 4E 05 F1 | 	add	fp, #8
10e4c     A7 FE 69 FC | 	wrlong	#255, fp
10e50     08 4E 85 F1 | 	sub	fp, #8
10e54                 | LR__1345
10e54     A7 12 02 F6 | 	mov	arg01, fp
10e58     78 9D BF FD | 	call	#_push
10e5c     A7 F0 03 F6 | 	mov	ptra, fp
10e60     B2 00 A0 FD | 	call	#popregs_
10e64                 | _do_plus_ret
10e64     2D 00 64 FD | 	ret
10e68                 | 
10e68                 | ' 
10e68                 | ' sub do_minus
10e68                 | _do_minus
10e68     05 4A 05 F6 | 	mov	COUNT_, #5
10e6c     A8 00 A0 FD | 	call	#pushregs_
10e70     18 F0 07 F1 | 	add	ptra, #24
10e74     C4 9C BF FD | 	call	#_pop
10e78     FD 1E 02 F6 | 	mov	local01, result1
10e7c     FE 20 02 F6 | 	mov	local02, result2
10e80     FF 22 02 F6 | 	mov	local03, result3
10e84     0C 4E 05 F1 | 	add	fp, #12
10e88     A7 1E 62 FC | 	wrlong	local01, fp
10e8c     04 4E 05 F1 | 	add	fp, #4
10e90     A7 20 62 FC | 	wrlong	local02, fp
10e94     04 4E 05 F1 | 	add	fp, #4
10e98     A7 22 62 FC | 	wrlong	local03, fp
10e9c     14 4E 85 F1 | 	sub	fp, #20
10ea0     98 9C BF FD | 	call	#_pop
10ea4     FF 22 02 F6 | 	mov	local03, result3
10ea8     A7 FA 61 FC | 	wrlong	result1, fp
10eac     04 4E 05 F1 | 	add	fp, #4
10eb0     A7 FC 61 FC | 	wrlong	result2, fp
10eb4     04 4E 05 F1 | 	add	fp, #4
10eb8     A7 22 62 FC | 	wrlong	local03, fp
10ebc                 | ' 
10ebc                 | ' t2=pop()
10ebc                 | ' t1=pop()
10ebc                 | ' 
10ebc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
10ebc     08 4E 85 F1 | 	sub	fp, #8
10ec0     1D 22 0E F2 | 	cmp	local03, #29 wz
10ec4     14 4E 05 A1 |  if_e	add	fp, #20
10ec8     A7 24 02 AB |  if_e	rdlong	local04, fp
10ecc     14 4E 85 A1 |  if_e	sub	fp, #20
10ed0     12 23 02 A6 |  if_e	mov	local03, local04
10ed4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10ed8     5C 00 90 5D |  if_ne	jmp	#LR__1351
10edc                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
10edc     0C 4E 05 F1 | 	add	fp, #12
10ee0     A7 1E 02 FB | 	rdlong	local01, fp
10ee4     0C 4E 85 F1 | 	sub	fp, #12
10ee8     A7 22 02 FB | 	rdlong	local03, fp
10eec     11 1F 12 F2 | 	cmp	local01, local03 wc
10ef0     1C 00 90 3D |  if_ae	jmp	#LR__1350
10ef4     A7 1E 02 FB | 	rdlong	local01, fp
10ef8     0C 4E 05 F1 | 	add	fp, #12
10efc     A7 20 02 FB | 	rdlong	local02, fp
10f00     0C 4E 85 F1 | 	sub	fp, #12
10f04     10 1F 82 F1 | 	sub	local01, local02
10f08     A7 1E 62 FC | 	wrlong	local01, fp
10f0c     F4 02 90 FD | 	jmp	#LR__1360
10f10                 | LR__1350
10f10     A7 1E 02 FB | 	rdlong	local01, fp
10f14     0C 4E 05 F1 | 	add	fp, #12
10f18     A7 20 02 FB | 	rdlong	local02, fp
10f1c     0C 4E 85 F1 | 	sub	fp, #12
10f20     10 1F 82 F1 | 	sub	local01, local02
10f24     A7 1E 62 FC | 	wrlong	local01, fp
10f28     08 4E 05 F1 | 	add	fp, #8
10f2c     A7 38 68 FC | 	wrlong	#28, fp
10f30     08 4E 85 F1 | 	sub	fp, #8
10f34     CC 02 90 FD | 	jmp	#LR__1360
10f38                 | LR__1351
10f38                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
10f38     08 4E 05 F1 | 	add	fp, #8
10f3c     A7 1E 02 FB | 	rdlong	local01, fp
10f40     08 4E 85 F1 | 	sub	fp, #8
10f44     1D 1E 0E F2 | 	cmp	local01, #29 wz
10f48     14 4E 05 A1 |  if_e	add	fp, #20
10f4c     A7 24 02 AB |  if_e	rdlong	local04, fp
10f50     14 4E 85 A1 |  if_e	sub	fp, #20
10f54     12 23 02 A6 |  if_e	mov	local03, local04
10f58     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10f5c     28 00 90 5D |  if_ne	jmp	#LR__1352
10f60     A7 1E 02 FB | 	rdlong	local01, fp
10f64     0C 4E 05 F1 | 	add	fp, #12
10f68     A7 20 02 FB | 	rdlong	local02, fp
10f6c     0C 4E 85 F1 | 	sub	fp, #12
10f70     10 1F 82 F1 | 	sub	local01, local02
10f74     A7 1E 62 FC | 	wrlong	local01, fp
10f78     08 4E 05 F1 | 	add	fp, #8
10f7c     A7 38 68 FC | 	wrlong	#28, fp
10f80     08 4E 85 F1 | 	sub	fp, #8
10f84     7C 02 90 FD | 	jmp	#LR__1360
10f88                 | LR__1352
10f88                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
10f88     08 4E 05 F1 | 	add	fp, #8
10f8c     A7 1E 02 FB | 	rdlong	local01, fp
10f90     08 4E 85 F1 | 	sub	fp, #8
10f94     1D 1E 0E F2 | 	cmp	local01, #29 wz
10f98     14 4E 05 A1 |  if_e	add	fp, #20
10f9c     A7 24 02 AB |  if_e	rdlong	local04, fp
10fa0     14 4E 85 A1 |  if_e	sub	fp, #20
10fa4     12 23 02 A6 |  if_e	mov	local03, local04
10fa8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10fac     34 00 90 5D |  if_ne	jmp	#LR__1353
10fb0     A7 12 02 FB | 	rdlong	arg01, fp
10fb4     88 0F B1 FD | 	call	#__system___float_fromuns
10fb8     FD 12 02 F6 | 	mov	arg01, result1
10fbc     0C 4E 05 F1 | 	add	fp, #12
10fc0     A7 14 02 FB | 	rdlong	arg02, fp
10fc4     0C 4E 85 F1 | 	sub	fp, #12
10fc8     1F 14 E6 F4 | 	bitnot	arg02, #31
10fcc     A4 0F B1 FD | 	call	#__system___float_add
10fd0     A7 FA 61 FC | 	wrlong	result1, fp
10fd4     08 4E 05 F1 | 	add	fp, #8
10fd8     A7 3C 68 FC | 	wrlong	#30, fp
10fdc     08 4E 85 F1 | 	sub	fp, #8
10fe0     20 02 90 FD | 	jmp	#LR__1360
10fe4                 | LR__1353
10fe4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
10fe4     08 4E 05 F1 | 	add	fp, #8
10fe8     A7 1E 02 FB | 	rdlong	local01, fp
10fec     08 4E 85 F1 | 	sub	fp, #8
10ff0     1C 1E 0E F2 | 	cmp	local01, #28 wz
10ff4     14 4E 05 A1 |  if_e	add	fp, #20
10ff8     A7 24 02 AB |  if_e	rdlong	local04, fp
10ffc     14 4E 85 A1 |  if_e	sub	fp, #20
11000     12 23 02 A6 |  if_e	mov	local03, local04
11004     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11008     1C 00 90 5D |  if_ne	jmp	#LR__1354
1100c     A7 1E 02 FB | 	rdlong	local01, fp
11010     0C 4E 05 F1 | 	add	fp, #12
11014     A7 20 02 FB | 	rdlong	local02, fp
11018     0C 4E 85 F1 | 	sub	fp, #12
1101c     10 1F 82 F1 | 	sub	local01, local02
11020     A7 1E 62 FC | 	wrlong	local01, fp
11024     DC 01 90 FD | 	jmp	#LR__1360
11028                 | LR__1354
11028                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
11028     08 4E 05 F1 | 	add	fp, #8
1102c     A7 1E 02 FB | 	rdlong	local01, fp
11030     08 4E 85 F1 | 	sub	fp, #8
11034     1C 1E 0E F2 | 	cmp	local01, #28 wz
11038     14 4E 05 A1 |  if_e	add	fp, #20
1103c     A7 24 02 AB |  if_e	rdlong	local04, fp
11040     14 4E 85 A1 |  if_e	sub	fp, #20
11044     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
11048     1C 00 90 5D |  if_ne	jmp	#LR__1355
1104c     A7 1E 02 FB | 	rdlong	local01, fp
11050     0C 4E 05 F1 | 	add	fp, #12
11054     A7 20 02 FB | 	rdlong	local02, fp
11058     0C 4E 85 F1 | 	sub	fp, #12
1105c     10 1F 82 F1 | 	sub	local01, local02
11060     A7 1E 62 FC | 	wrlong	local01, fp
11064     9C 01 90 FD | 	jmp	#LR__1360
11068                 | LR__1355
11068                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
11068     08 4E 05 F1 | 	add	fp, #8
1106c     A7 1E 02 FB | 	rdlong	local01, fp
11070     08 4E 85 F1 | 	sub	fp, #8
11074     1C 1E 0E F2 | 	cmp	local01, #28 wz
11078     14 4E 05 A1 |  if_e	add	fp, #20
1107c     A7 22 02 AB |  if_e	rdlong	local03, fp
11080     14 4E 85 A1 |  if_e	sub	fp, #20
11084     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11088     44 00 90 5D |  if_ne	jmp	#LR__1356
1108c     A7 12 02 FB | 	rdlong	arg01, fp
11090     09 13 52 F6 | 	abs	arg01, arg01 wc
11094     1F 26 C6 C9 |  if_b	decod	local05, #31
11098     00 26 06 36 |  if_ae	mov	local05, #0
1109c     A0 0E B1 FD | 	call	#__system___float_fromuns
110a0     13 FB 61 F5 | 	xor	result1, local05
110a4     FD 12 02 F6 | 	mov	arg01, result1
110a8     0C 4E 05 F1 | 	add	fp, #12
110ac     A7 14 02 FB | 	rdlong	arg02, fp
110b0     0C 4E 85 F1 | 	sub	fp, #12
110b4     1F 14 E6 F4 | 	bitnot	arg02, #31
110b8     B8 0E B1 FD | 	call	#__system___float_add
110bc     A7 FA 61 FC | 	wrlong	result1, fp
110c0     08 4E 05 F1 | 	add	fp, #8
110c4     A7 3C 68 FC | 	wrlong	#30, fp
110c8     08 4E 85 F1 | 	sub	fp, #8
110cc     34 01 90 FD | 	jmp	#LR__1360
110d0                 | LR__1356
110d0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
110d0     08 4E 05 F1 | 	add	fp, #8
110d4     A7 1E 02 FB | 	rdlong	local01, fp
110d8     08 4E 85 F1 | 	sub	fp, #8
110dc     1E 1E 0E F2 | 	cmp	local01, #30 wz
110e0     14 4E 05 A1 |  if_e	add	fp, #20
110e4     A7 22 02 AB |  if_e	rdlong	local03, fp
110e8     14 4E 85 A1 |  if_e	sub	fp, #20
110ec     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
110f0     2C 00 90 5D |  if_ne	jmp	#LR__1357
110f4     A7 1E 02 FB | 	rdlong	local01, fp
110f8     0C 4E 05 F1 | 	add	fp, #12
110fc     A7 12 02 FB | 	rdlong	arg01, fp
11100     0C 4E 85 F1 | 	sub	fp, #12
11104     38 0E B1 FD | 	call	#__system___float_fromuns
11108     FD 14 02 F6 | 	mov	arg02, result1
1110c     0F 13 02 F6 | 	mov	arg01, local01
11110     1F 14 E6 F4 | 	bitnot	arg02, #31
11114     5C 0E B1 FD | 	call	#__system___float_add
11118     A7 FA 61 FC | 	wrlong	result1, fp
1111c     E4 00 90 FD | 	jmp	#LR__1360
11120                 | LR__1357
11120                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
11120     08 4E 05 F1 | 	add	fp, #8
11124     A7 1E 02 FB | 	rdlong	local01, fp
11128     08 4E 85 F1 | 	sub	fp, #8
1112c     1E 1E 0E F2 | 	cmp	local01, #30 wz
11130     14 4E 05 A1 |  if_e	add	fp, #20
11134     A7 22 02 AB |  if_e	rdlong	local03, fp
11138     14 4E 85 A1 |  if_e	sub	fp, #20
1113c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11140     3C 00 90 5D |  if_ne	jmp	#LR__1358
11144     A7 1E 02 FB | 	rdlong	local01, fp
11148     0C 4E 05 F1 | 	add	fp, #12
1114c     A7 12 02 FB | 	rdlong	arg01, fp
11150     0C 4E 85 F1 | 	sub	fp, #12
11154     09 13 52 F6 | 	abs	arg01, arg01 wc
11158     1F 26 C6 C9 |  if_b	decod	local05, #31
1115c     00 26 06 36 |  if_ae	mov	local05, #0
11160     DC 0D B1 FD | 	call	#__system___float_fromuns
11164     13 FB 61 F5 | 	xor	result1, local05
11168     FD 14 02 F6 | 	mov	arg02, result1
1116c     0F 13 02 F6 | 	mov	arg01, local01
11170     1F 14 E6 F4 | 	bitnot	arg02, #31
11174     FC 0D B1 FD | 	call	#__system___float_add
11178     A7 FA 61 FC | 	wrlong	result1, fp
1117c     84 00 90 FD | 	jmp	#LR__1360
11180                 | LR__1358
11180                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
11180     08 4E 05 F1 | 	add	fp, #8
11184     A7 1E 02 FB | 	rdlong	local01, fp
11188     08 4E 85 F1 | 	sub	fp, #8
1118c     1E 1E 0E F2 | 	cmp	local01, #30 wz
11190     14 4E 05 A1 |  if_e	add	fp, #20
11194     A7 22 02 AB |  if_e	rdlong	local03, fp
11198     14 4E 85 A1 |  if_e	sub	fp, #20
1119c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
111a0     20 00 90 5D |  if_ne	jmp	#LR__1359
111a4     A7 12 02 FB | 	rdlong	arg01, fp
111a8     0C 4E 05 F1 | 	add	fp, #12
111ac     A7 14 02 FB | 	rdlong	arg02, fp
111b0     0C 4E 85 F1 | 	sub	fp, #12
111b4     1F 14 E6 F4 | 	bitnot	arg02, #31
111b8     B8 0D B1 FD | 	call	#__system___float_add
111bc     A7 FA 61 FC | 	wrlong	result1, fp
111c0     40 00 90 FD | 	jmp	#LR__1360
111c4                 | LR__1359
111c4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
111c4     08 4E 05 F1 | 	add	fp, #8
111c8     A7 1E 02 FB | 	rdlong	local01, fp
111cc     08 4E 85 F1 | 	sub	fp, #8
111d0     1F 1E 0E F2 | 	cmp	local01, #31 wz
111d4     14 4E 05 51 |  if_ne	add	fp, #20
111d8     A7 22 02 5B |  if_ne	rdlong	local03, fp
111dc     14 4E 85 51 |  if_ne	sub	fp, #20
111e0     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
111e4     A7 06 68 AC |  if_e	wrlong	#3, fp
111e8     08 4E 05 A1 |  if_e	add	fp, #8
111ec     A7 FE 69 AC |  if_e	wrlong	#255, fp
111f0     08 4E 85 A1 |  if_e	sub	fp, #8
111f4     A7 0A 68 5C |  if_ne	wrlong	#5, fp
111f8     08 4E 05 51 |  if_ne	add	fp, #8
111fc     A7 FE 69 5C |  if_ne	wrlong	#255, fp
11200     08 4E 85 51 |  if_ne	sub	fp, #8
11204                 | LR__1360
11204     A7 12 02 F6 | 	mov	arg01, fp
11208     C8 99 BF FD | 	call	#_push
1120c     A7 F0 03 F6 | 	mov	ptra, fp
11210     B2 00 A0 FD | 	call	#popregs_
11214                 | _do_minus_ret
11214     2D 00 64 FD | 	ret
11218                 | 
11218                 | ' 
11218                 | ' sub do_and 
11218                 | _do_and
11218     03 4A 05 F6 | 	mov	COUNT_, #3
1121c     A8 00 A0 FD | 	call	#pushregs_
11220     18 F0 07 F1 | 	add	ptra, #24
11224     14 99 BF FD | 	call	#_pop
11228     FD 12 02 F6 | 	mov	arg01, result1
1122c     FE 1E 02 F6 | 	mov	local01, result2
11230     FF 20 02 F6 | 	mov	local02, result3
11234     0C 4E 05 F1 | 	add	fp, #12
11238     A7 12 62 FC | 	wrlong	arg01, fp
1123c     04 4E 05 F1 | 	add	fp, #4
11240     A7 1E 62 FC | 	wrlong	local01, fp
11244     04 4E 05 F1 | 	add	fp, #4
11248     A7 20 62 FC | 	wrlong	local02, fp
1124c     14 4E 85 F1 | 	sub	fp, #20
11250     E8 98 BF FD | 	call	#_pop
11254     FF 22 02 F6 | 	mov	local03, result3
11258     A7 FA 61 FC | 	wrlong	result1, fp
1125c     04 4E 05 F1 | 	add	fp, #4
11260     A7 FC 61 FC | 	wrlong	result2, fp
11264     04 4E 05 F1 | 	add	fp, #4
11268     A7 22 62 FC | 	wrlong	local03, fp
1126c                 | ' 
1126c                 | ' t2=pop()
1126c                 | ' t1=pop()
1126c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1126c     08 4E 85 F1 | 	sub	fp, #8
11270     1C 22 0E F2 | 	cmp	local03, #28 wz
11274     A7 22 02 AB |  if_e	rdlong	local03, fp
11278     A7 22 62 AC |  if_e	wrlong	local03, fp
1127c     08 4E 05 A1 |  if_e	add	fp, #8
11280     A7 3A 68 AC |  if_e	wrlong	#29, fp
11284     08 4E 85 A1 |  if_e	sub	fp, #8
11288                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
11288     14 4E 05 F1 | 	add	fp, #20
1128c     A7 22 02 FB | 	rdlong	local03, fp
11290     14 4E 85 F1 | 	sub	fp, #20
11294     1C 22 0E F2 | 	cmp	local03, #28 wz
11298     18 00 90 5D |  if_ne	jmp	#LR__1370
1129c     0C 4E 05 F1 | 	add	fp, #12
112a0     A7 22 02 FB | 	rdlong	local03, fp
112a4     A7 22 62 FC | 	wrlong	local03, fp
112a8     08 4E 05 F1 | 	add	fp, #8
112ac     A7 3A 68 FC | 	wrlong	#29, fp
112b0     14 4E 85 F1 | 	sub	fp, #20
112b4                 | LR__1370
112b4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
112b4     08 4E 05 F1 | 	add	fp, #8
112b8     A7 22 02 FB | 	rdlong	local03, fp
112bc     08 4E 85 F1 | 	sub	fp, #8
112c0     1F 22 0E F2 | 	cmp	local03, #31 wz
112c4     14 4E 05 51 |  if_ne	add	fp, #20
112c8     A7 20 02 5B |  if_ne	rdlong	local02, fp
112cc     14 4E 85 51 |  if_ne	sub	fp, #20
112d0     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
112d4     08 4E 05 51 |  if_ne	add	fp, #8
112d8     A7 22 02 5B |  if_ne	rdlong	local03, fp
112dc     08 4E 85 51 |  if_ne	sub	fp, #8
112e0     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
112e4     14 4E 05 51 |  if_ne	add	fp, #20
112e8     14 4E 85 51 |  if_ne	sub	fp, #20
112ec     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
112f0     A7 0C 68 AC |  if_e	wrlong	#6, fp
112f4     08 4E 05 A1 |  if_e	add	fp, #8
112f8     A7 FE 69 AC |  if_e	wrlong	#255, fp
112fc     08 4E 85 A1 |  if_e	sub	fp, #8
11300     18 00 90 AD |  if_e	jmp	#LR__1371
11304     A7 22 02 FB | 	rdlong	local03, fp
11308     0C 4E 05 F1 | 	add	fp, #12
1130c     A7 1E 02 FB | 	rdlong	local01, fp
11310     0C 4E 85 F1 | 	sub	fp, #12
11314     0F 23 02 F5 | 	and	local03, local01
11318     A7 22 62 FC | 	wrlong	local03, fp
1131c                 | LR__1371
1131c     A7 12 02 F6 | 	mov	arg01, fp
11320     B0 98 BF FD | 	call	#_push
11324     A7 F0 03 F6 | 	mov	ptra, fp
11328     B2 00 A0 FD | 	call	#popregs_
1132c                 | _do_and_ret
1132c     2D 00 64 FD | 	ret
11330                 | 
11330                 | ' 
11330                 | ' sub do_or 
11330                 | _do_or
11330     03 4A 05 F6 | 	mov	COUNT_, #3
11334     A8 00 A0 FD | 	call	#pushregs_
11338     18 F0 07 F1 | 	add	ptra, #24
1133c     FC 97 BF FD | 	call	#_pop
11340     FD 12 02 F6 | 	mov	arg01, result1
11344     FE 1E 02 F6 | 	mov	local01, result2
11348     FF 20 02 F6 | 	mov	local02, result3
1134c     0C 4E 05 F1 | 	add	fp, #12
11350     A7 12 62 FC | 	wrlong	arg01, fp
11354     04 4E 05 F1 | 	add	fp, #4
11358     A7 1E 62 FC | 	wrlong	local01, fp
1135c     04 4E 05 F1 | 	add	fp, #4
11360     A7 20 62 FC | 	wrlong	local02, fp
11364     14 4E 85 F1 | 	sub	fp, #20
11368     D0 97 BF FD | 	call	#_pop
1136c     FF 22 02 F6 | 	mov	local03, result3
11370     A7 FA 61 FC | 	wrlong	result1, fp
11374     04 4E 05 F1 | 	add	fp, #4
11378     A7 FC 61 FC | 	wrlong	result2, fp
1137c     04 4E 05 F1 | 	add	fp, #4
11380     A7 22 62 FC | 	wrlong	local03, fp
11384                 | ' 
11384                 | ' t2=pop()
11384                 | ' t1=pop()
11384                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
11384     08 4E 85 F1 | 	sub	fp, #8
11388     1C 22 0E F2 | 	cmp	local03, #28 wz
1138c     A7 22 02 AB |  if_e	rdlong	local03, fp
11390     A7 22 62 AC |  if_e	wrlong	local03, fp
11394     08 4E 05 A1 |  if_e	add	fp, #8
11398     A7 3A 68 AC |  if_e	wrlong	#29, fp
1139c     08 4E 85 A1 |  if_e	sub	fp, #8
113a0                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
113a0     14 4E 05 F1 | 	add	fp, #20
113a4     A7 22 02 FB | 	rdlong	local03, fp
113a8     14 4E 85 F1 | 	sub	fp, #20
113ac     1C 22 0E F2 | 	cmp	local03, #28 wz
113b0     18 00 90 5D |  if_ne	jmp	#LR__1380
113b4     0C 4E 05 F1 | 	add	fp, #12
113b8     A7 22 02 FB | 	rdlong	local03, fp
113bc     A7 22 62 FC | 	wrlong	local03, fp
113c0     08 4E 05 F1 | 	add	fp, #8
113c4     A7 3A 68 FC | 	wrlong	#29, fp
113c8     14 4E 85 F1 | 	sub	fp, #20
113cc                 | LR__1380
113cc                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
113cc     08 4E 05 F1 | 	add	fp, #8
113d0     A7 22 02 FB | 	rdlong	local03, fp
113d4     08 4E 85 F1 | 	sub	fp, #8
113d8     1F 22 0E F2 | 	cmp	local03, #31 wz
113dc     14 4E 05 51 |  if_ne	add	fp, #20
113e0     A7 20 02 5B |  if_ne	rdlong	local02, fp
113e4     14 4E 85 51 |  if_ne	sub	fp, #20
113e8     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
113ec     08 4E 05 51 |  if_ne	add	fp, #8
113f0     A7 22 02 5B |  if_ne	rdlong	local03, fp
113f4     08 4E 85 51 |  if_ne	sub	fp, #8
113f8     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
113fc     14 4E 05 51 |  if_ne	add	fp, #20
11400     14 4E 85 51 |  if_ne	sub	fp, #20
11404     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
11408     A7 0C 68 AC |  if_e	wrlong	#6, fp
1140c     08 4E 05 A1 |  if_e	add	fp, #8
11410     A7 FE 69 AC |  if_e	wrlong	#255, fp
11414     08 4E 85 A1 |  if_e	sub	fp, #8
11418     18 00 90 AD |  if_e	jmp	#LR__1381
1141c     A7 22 02 FB | 	rdlong	local03, fp
11420     0C 4E 05 F1 | 	add	fp, #12
11424     A7 1E 02 FB | 	rdlong	local01, fp
11428     0C 4E 85 F1 | 	sub	fp, #12
1142c     0F 23 42 F5 | 	or	local03, local01
11430     A7 22 62 FC | 	wrlong	local03, fp
11434                 | LR__1381
11434     A7 12 02 F6 | 	mov	arg01, fp
11438     98 97 BF FD | 	call	#_push
1143c     A7 F0 03 F6 | 	mov	ptra, fp
11440     B2 00 A0 FD | 	call	#popregs_
11444                 | _do_or_ret
11444     2D 00 64 FD | 	ret
11448                 | 
11448                 | ' 
11448                 | ' sub do_mul
11448                 | _do_mul
11448     05 4A 05 F6 | 	mov	COUNT_, #5
1144c     A8 00 A0 FD | 	call	#pushregs_
11450     18 F0 07 F1 | 	add	ptra, #24
11454     E4 96 BF FD | 	call	#_pop
11458     FD 1E 02 F6 | 	mov	local01, result1
1145c     FE 20 02 F6 | 	mov	local02, result2
11460     FF 22 02 F6 | 	mov	local03, result3
11464     0C 4E 05 F1 | 	add	fp, #12
11468     A7 1E 62 FC | 	wrlong	local01, fp
1146c     04 4E 05 F1 | 	add	fp, #4
11470     A7 20 62 FC | 	wrlong	local02, fp
11474     04 4E 05 F1 | 	add	fp, #4
11478     A7 22 62 FC | 	wrlong	local03, fp
1147c     14 4E 85 F1 | 	sub	fp, #20
11480     B8 96 BF FD | 	call	#_pop
11484     FF 22 02 F6 | 	mov	local03, result3
11488     A7 FA 61 FC | 	wrlong	result1, fp
1148c     04 4E 05 F1 | 	add	fp, #4
11490     A7 FC 61 FC | 	wrlong	result2, fp
11494     04 4E 05 F1 | 	add	fp, #4
11498     A7 22 62 FC | 	wrlong	local03, fp
1149c                 | ' 
1149c                 | ' t2=pop()
1149c                 | ' t1=pop()
1149c                 | ' 
1149c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
1149c     08 4E 85 F1 | 	sub	fp, #8
114a0     1D 22 0E F2 | 	cmp	local03, #29 wz
114a4     14 4E 05 A1 |  if_e	add	fp, #20
114a8     A7 24 02 AB |  if_e	rdlong	local04, fp
114ac     14 4E 85 A1 |  if_e	sub	fp, #20
114b0     12 23 02 A6 |  if_e	mov	local03, local04
114b4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
114b8     20 00 90 5D |  if_ne	jmp	#LR__1390
114bc     A7 20 02 FB | 	rdlong	local02, fp
114c0     0C 4E 05 F1 | 	add	fp, #12
114c4     A7 22 02 FB | 	rdlong	local03, fp
114c8     11 21 02 FD | 	qmul	local02, local03
114cc     0C 4E 85 F1 | 	sub	fp, #12
114d0     18 1E 62 FD | 	getqx	local01
114d4     A7 1E 62 FC | 	wrlong	local01, fp
114d8     C4 02 90 FD | 	jmp	#LR__1399
114dc                 | LR__1390
114dc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
114dc     08 4E 05 F1 | 	add	fp, #8
114e0     A7 1E 02 FB | 	rdlong	local01, fp
114e4     08 4E 85 F1 | 	sub	fp, #8
114e8     1D 1E 0E F2 | 	cmp	local01, #29 wz
114ec     14 4E 05 A1 |  if_e	add	fp, #20
114f0     A7 24 02 AB |  if_e	rdlong	local04, fp
114f4     14 4E 85 A1 |  if_e	sub	fp, #20
114f8     12 23 02 A6 |  if_e	mov	local03, local04
114fc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11500     2C 00 90 5D |  if_ne	jmp	#LR__1391
11504     A7 20 02 FB | 	rdlong	local02, fp
11508     0C 4E 05 F1 | 	add	fp, #12
1150c     A7 22 02 FB | 	rdlong	local03, fp
11510     11 21 02 FD | 	qmul	local02, local03
11514     0C 4E 85 F1 | 	sub	fp, #12
11518     18 1E 62 FD | 	getqx	local01
1151c     A7 1E 62 FC | 	wrlong	local01, fp
11520     08 4E 05 F1 | 	add	fp, #8
11524     A7 38 68 FC | 	wrlong	#28, fp
11528     08 4E 85 F1 | 	sub	fp, #8
1152c     70 02 90 FD | 	jmp	#LR__1399
11530                 | LR__1391
11530                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
11530     08 4E 05 F1 | 	add	fp, #8
11534     A7 1E 02 FB | 	rdlong	local01, fp
11538     08 4E 85 F1 | 	sub	fp, #8
1153c     1D 1E 0E F2 | 	cmp	local01, #29 wz
11540     14 4E 05 A1 |  if_e	add	fp, #20
11544     A7 24 02 AB |  if_e	rdlong	local04, fp
11548     14 4E 85 A1 |  if_e	sub	fp, #20
1154c     12 23 02 A6 |  if_e	mov	local03, local04
11550     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11554     30 00 90 5D |  if_ne	jmp	#LR__1392
11558     A7 12 02 FB | 	rdlong	arg01, fp
1155c     E0 09 B1 FD | 	call	#__system___float_fromuns
11560     FD 12 02 F6 | 	mov	arg01, result1
11564     0C 4E 05 F1 | 	add	fp, #12
11568     A7 14 02 FB | 	rdlong	arg02, fp
1156c     0C 4E 85 F1 | 	sub	fp, #12
11570     D0 0D B1 FD | 	call	#__system___float_mul
11574     A7 FA 61 FC | 	wrlong	result1, fp
11578     08 4E 05 F1 | 	add	fp, #8
1157c     A7 3C 68 FC | 	wrlong	#30, fp
11580     08 4E 85 F1 | 	sub	fp, #8
11584     18 02 90 FD | 	jmp	#LR__1399
11588                 | LR__1392
11588                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
11588     08 4E 05 F1 | 	add	fp, #8
1158c     A7 1E 02 FB | 	rdlong	local01, fp
11590     08 4E 85 F1 | 	sub	fp, #8
11594     1C 1E 0E F2 | 	cmp	local01, #28 wz
11598     14 4E 05 A1 |  if_e	add	fp, #20
1159c     A7 24 02 AB |  if_e	rdlong	local04, fp
115a0     14 4E 85 A1 |  if_e	sub	fp, #20
115a4     12 23 02 A6 |  if_e	mov	local03, local04
115a8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
115ac     20 00 90 5D |  if_ne	jmp	#LR__1393
115b0     A7 20 02 FB | 	rdlong	local02, fp
115b4     0C 4E 05 F1 | 	add	fp, #12
115b8     A7 22 02 FB | 	rdlong	local03, fp
115bc     11 21 02 FD | 	qmul	local02, local03
115c0     0C 4E 85 F1 | 	sub	fp, #12
115c4     18 1E 62 FD | 	getqx	local01
115c8     A7 1E 62 FC | 	wrlong	local01, fp
115cc     D0 01 90 FD | 	jmp	#LR__1399
115d0                 | LR__1393
115d0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
115d0     08 4E 05 F1 | 	add	fp, #8
115d4     A7 1E 02 FB | 	rdlong	local01, fp
115d8     08 4E 85 F1 | 	sub	fp, #8
115dc     1C 1E 0E F2 | 	cmp	local01, #28 wz
115e0     14 4E 05 A1 |  if_e	add	fp, #20
115e4     A7 24 02 AB |  if_e	rdlong	local04, fp
115e8     14 4E 85 A1 |  if_e	sub	fp, #20
115ec     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
115f0     20 00 90 5D |  if_ne	jmp	#LR__1394
115f4     A7 20 02 FB | 	rdlong	local02, fp
115f8     0C 4E 05 F1 | 	add	fp, #12
115fc     A7 22 02 FB | 	rdlong	local03, fp
11600     11 21 02 FD | 	qmul	local02, local03
11604     0C 4E 85 F1 | 	sub	fp, #12
11608     18 1E 62 FD | 	getqx	local01
1160c     A7 1E 62 FC | 	wrlong	local01, fp
11610     8C 01 90 FD | 	jmp	#LR__1399
11614                 | LR__1394
11614                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
11614     08 4E 05 F1 | 	add	fp, #8
11618     A7 1E 02 FB | 	rdlong	local01, fp
1161c     08 4E 85 F1 | 	sub	fp, #8
11620     1C 1E 0E F2 | 	cmp	local01, #28 wz
11624     14 4E 05 A1 |  if_e	add	fp, #20
11628     A7 22 02 AB |  if_e	rdlong	local03, fp
1162c     14 4E 85 A1 |  if_e	sub	fp, #20
11630     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11634     40 00 90 5D |  if_ne	jmp	#LR__1395
11638     A7 12 02 FB | 	rdlong	arg01, fp
1163c     09 13 52 F6 | 	abs	arg01, arg01 wc
11640     1F 26 C6 C9 |  if_b	decod	local05, #31
11644     00 26 06 36 |  if_ae	mov	local05, #0
11648     F4 08 B1 FD | 	call	#__system___float_fromuns
1164c     13 FB 61 F5 | 	xor	result1, local05
11650     FD 12 02 F6 | 	mov	arg01, result1
11654     0C 4E 05 F1 | 	add	fp, #12
11658     A7 14 02 FB | 	rdlong	arg02, fp
1165c     0C 4E 85 F1 | 	sub	fp, #12
11660     E0 0C B1 FD | 	call	#__system___float_mul
11664     A7 FA 61 FC | 	wrlong	result1, fp
11668     08 4E 05 F1 | 	add	fp, #8
1166c     A7 3C 68 FC | 	wrlong	#30, fp
11670     08 4E 85 F1 | 	sub	fp, #8
11674     28 01 90 FD | 	jmp	#LR__1399
11678                 | LR__1395
11678                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
11678     08 4E 05 F1 | 	add	fp, #8
1167c     A7 1E 02 FB | 	rdlong	local01, fp
11680     08 4E 85 F1 | 	sub	fp, #8
11684     1E 1E 0E F2 | 	cmp	local01, #30 wz
11688     14 4E 05 A1 |  if_e	add	fp, #20
1168c     A7 22 02 AB |  if_e	rdlong	local03, fp
11690     14 4E 85 A1 |  if_e	sub	fp, #20
11694     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11698     28 00 90 5D |  if_ne	jmp	#LR__1396
1169c     A7 1E 02 FB | 	rdlong	local01, fp
116a0     0C 4E 05 F1 | 	add	fp, #12
116a4     A7 12 02 FB | 	rdlong	arg01, fp
116a8     0C 4E 85 F1 | 	sub	fp, #12
116ac     90 08 B1 FD | 	call	#__system___float_fromuns
116b0     FD 14 02 F6 | 	mov	arg02, result1
116b4     0F 13 02 F6 | 	mov	arg01, local01
116b8     88 0C B1 FD | 	call	#__system___float_mul
116bc     A7 FA 61 FC | 	wrlong	result1, fp
116c0     DC 00 90 FD | 	jmp	#LR__1399
116c4                 | LR__1396
116c4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
116c4     08 4E 05 F1 | 	add	fp, #8
116c8     A7 1E 02 FB | 	rdlong	local01, fp
116cc     08 4E 85 F1 | 	sub	fp, #8
116d0     1E 1E 0E F2 | 	cmp	local01, #30 wz
116d4     14 4E 05 A1 |  if_e	add	fp, #20
116d8     A7 22 02 AB |  if_e	rdlong	local03, fp
116dc     14 4E 85 A1 |  if_e	sub	fp, #20
116e0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
116e4     38 00 90 5D |  if_ne	jmp	#LR__1397
116e8     A7 1E 02 FB | 	rdlong	local01, fp
116ec     0C 4E 05 F1 | 	add	fp, #12
116f0     A7 12 02 FB | 	rdlong	arg01, fp
116f4     0C 4E 85 F1 | 	sub	fp, #12
116f8     09 13 52 F6 | 	abs	arg01, arg01 wc
116fc     1F 26 C6 C9 |  if_b	decod	local05, #31
11700     00 26 06 36 |  if_ae	mov	local05, #0
11704     38 08 B1 FD | 	call	#__system___float_fromuns
11708     13 FB 61 F5 | 	xor	result1, local05
1170c     FD 14 02 F6 | 	mov	arg02, result1
11710     0F 13 02 F6 | 	mov	arg01, local01
11714     2C 0C B1 FD | 	call	#__system___float_mul
11718     A7 FA 61 FC | 	wrlong	result1, fp
1171c     80 00 90 FD | 	jmp	#LR__1399
11720                 | LR__1397
11720                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
11720     08 4E 05 F1 | 	add	fp, #8
11724     A7 1E 02 FB | 	rdlong	local01, fp
11728     08 4E 85 F1 | 	sub	fp, #8
1172c     1E 1E 0E F2 | 	cmp	local01, #30 wz
11730     14 4E 05 A1 |  if_e	add	fp, #20
11734     A7 22 02 AB |  if_e	rdlong	local03, fp
11738     14 4E 85 A1 |  if_e	sub	fp, #20
1173c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11740     1C 00 90 5D |  if_ne	jmp	#LR__1398
11744     A7 12 02 FB | 	rdlong	arg01, fp
11748     0C 4E 05 F1 | 	add	fp, #12
1174c     A7 14 02 FB | 	rdlong	arg02, fp
11750     0C 4E 85 F1 | 	sub	fp, #12
11754     EC 0B B1 FD | 	call	#__system___float_mul
11758     A7 FA 61 FC | 	wrlong	result1, fp
1175c     40 00 90 FD | 	jmp	#LR__1399
11760                 | LR__1398
11760                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
11760     08 4E 05 F1 | 	add	fp, #8
11764     A7 1E 02 FB | 	rdlong	local01, fp
11768     08 4E 85 F1 | 	sub	fp, #8
1176c     1F 1E 0E F2 | 	cmp	local01, #31 wz
11770     14 4E 05 51 |  if_ne	add	fp, #20
11774     A7 22 02 5B |  if_ne	rdlong	local03, fp
11778     14 4E 85 51 |  if_ne	sub	fp, #20
1177c     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
11780     A7 10 68 AC |  if_e	wrlong	#8, fp
11784     08 4E 05 A1 |  if_e	add	fp, #8
11788     A7 FE 69 AC |  if_e	wrlong	#255, fp
1178c     08 4E 85 A1 |  if_e	sub	fp, #8
11790     A7 12 68 5C |  if_ne	wrlong	#9, fp
11794     08 4E 05 51 |  if_ne	add	fp, #8
11798     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1179c     08 4E 85 51 |  if_ne	sub	fp, #8
117a0                 | LR__1399
117a0     A7 12 02 F6 | 	mov	arg01, fp
117a4     2C 94 BF FD | 	call	#_push
117a8     A7 F0 03 F6 | 	mov	ptra, fp
117ac     B2 00 A0 FD | 	call	#popregs_
117b0                 | _do_mul_ret
117b0     2D 00 64 FD | 	ret
117b4                 | 
117b4                 | ' 
117b4                 | ' sub do_div 
117b4                 | _do_div
117b4     01 4A 05 F6 | 	mov	COUNT_, #1
117b8     A8 00 A0 FD | 	call	#pushregs_
117bc     18 F0 07 F1 | 	add	ptra, #24
117c0     78 93 BF FD | 	call	#_pop
117c4     FD 66 02 F6 | 	mov	muldivb_, result1
117c8     FE 64 02 F6 | 	mov	muldiva_, result2
117cc     FF 1E 02 F6 | 	mov	local01, result3
117d0     0C 4E 05 F1 | 	add	fp, #12
117d4     A7 66 62 FC | 	wrlong	muldivb_, fp
117d8     04 4E 05 F1 | 	add	fp, #4
117dc     A7 64 62 FC | 	wrlong	muldiva_, fp
117e0     04 4E 05 F1 | 	add	fp, #4
117e4     A7 1E 62 FC | 	wrlong	local01, fp
117e8     14 4E 85 F1 | 	sub	fp, #20
117ec     4C 93 BF FD | 	call	#_pop
117f0     A7 FA 61 FC | 	wrlong	result1, fp
117f4     04 4E 05 F1 | 	add	fp, #4
117f8     A7 FC 61 FC | 	wrlong	result2, fp
117fc     04 4E 05 F1 | 	add	fp, #4
11800     A7 FE 61 FC | 	wrlong	result3, fp
11804                 | ' 
11804                 | ' t2=pop()
11804                 | ' t1=pop()
11804                 | ' 
11804                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
11804     08 4E 85 F1 | 	sub	fp, #8
11808     1F FE 0D F2 | 	cmp	result3, #31 wz
1180c     14 4E 05 51 |  if_ne	add	fp, #20
11810     A7 12 02 5B |  if_ne	rdlong	arg01, fp
11814     14 4E 85 51 |  if_ne	sub	fp, #20
11818     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1181c     A7 14 68 AC |  if_e	wrlong	#10, fp
11820     08 4E 05 A1 |  if_e	add	fp, #8
11824     A7 FE 69 AC |  if_e	wrlong	#255, fp
11828     08 4E 85 A1 |  if_e	sub	fp, #8
1182c     90 01 90 AD |  if_e	jmp	#LR__1406
11830                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
11830     08 4E 05 F1 | 	add	fp, #8
11834     A7 66 02 FB | 	rdlong	muldivb_, fp
11838     08 4E 85 F1 | 	sub	fp, #8
1183c     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
11840     1C 00 90 5D |  if_ne	jmp	#LR__1400
11844     08 4E 05 F1 | 	add	fp, #8
11848     A7 38 68 FC | 	wrlong	#28, fp
1184c     08 4E 85 F1 | 	sub	fp, #8
11850     A7 12 02 FB | 	rdlong	arg01, fp
11854     00 14 06 F6 | 	mov	arg02, #0
11858     B0 0F B1 FD | 	call	#__system___float_tointeger
1185c     A7 FA 61 FC | 	wrlong	result1, fp
11860                 | LR__1400
11860                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
11860     14 4E 05 F1 | 	add	fp, #20
11864     A7 66 02 FB | 	rdlong	muldivb_, fp
11868     14 4E 85 F1 | 	sub	fp, #20
1186c     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
11870     28 00 90 5D |  if_ne	jmp	#LR__1401
11874     14 4E 05 F1 | 	add	fp, #20
11878     A7 38 68 FC | 	wrlong	#28, fp
1187c     08 4E 85 F1 | 	sub	fp, #8
11880     A7 12 02 FB | 	rdlong	arg01, fp
11884     0C 4E 85 F1 | 	sub	fp, #12
11888     00 14 06 F6 | 	mov	arg02, #0
1188c     7C 0F B1 FD | 	call	#__system___float_tointeger
11890     0C 4E 05 F1 | 	add	fp, #12
11894     A7 FA 61 FC | 	wrlong	result1, fp
11898     0C 4E 85 F1 | 	sub	fp, #12
1189c                 | LR__1401
1189c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
1189c     08 4E 05 F1 | 	add	fp, #8
118a0     A7 66 02 FB | 	rdlong	muldivb_, fp
118a4     08 4E 85 F1 | 	sub	fp, #8
118a8     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
118ac     14 4E 05 A1 |  if_e	add	fp, #20
118b0     A7 1E 02 AB |  if_e	rdlong	local01, fp
118b4     14 4E 85 A1 |  if_e	sub	fp, #20
118b8     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
118bc     20 00 90 5D |  if_ne	jmp	#LR__1402
118c0     0C 4E 05 F1 | 	add	fp, #12
118c4     A7 1E 02 FB | 	rdlong	local01, fp
118c8     0C 4E 85 F1 | 	sub	fp, #12
118cc     A7 66 02 FB | 	rdlong	muldivb_, fp
118d0     0F 67 12 FD | 	qdiv	muldivb_, local01
118d4     18 1E 62 FD | 	getqx	local01
118d8     A7 1E 62 FC | 	wrlong	local01, fp
118dc     E0 00 90 FD | 	jmp	#LR__1406
118e0                 | LR__1402
118e0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
118e0     08 4E 05 F1 | 	add	fp, #8
118e4     A7 66 02 FB | 	rdlong	muldivb_, fp
118e8     08 4E 85 F1 | 	sub	fp, #8
118ec     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
118f0     14 4E 05 A1 |  if_e	add	fp, #20
118f4     A7 1E 02 AB |  if_e	rdlong	local01, fp
118f8     14 4E 85 A1 |  if_e	sub	fp, #20
118fc     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
11900     2C 00 90 5D |  if_ne	jmp	#LR__1403
11904     0C 4E 05 F1 | 	add	fp, #12
11908     A7 1E 02 FB | 	rdlong	local01, fp
1190c     0C 4E 85 F1 | 	sub	fp, #12
11910     A7 66 02 FB | 	rdlong	muldivb_, fp
11914     0F 67 12 FD | 	qdiv	muldivb_, local01
11918     18 1E 62 FD | 	getqx	local01
1191c     A7 1E 62 FC | 	wrlong	local01, fp
11920     08 4E 05 F1 | 	add	fp, #8
11924     A7 38 68 FC | 	wrlong	#28, fp
11928     08 4E 85 F1 | 	sub	fp, #8
1192c     90 00 90 FD | 	jmp	#LR__1406
11930                 | LR__1403
11930                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
11930     08 4E 05 F1 | 	add	fp, #8
11934     A7 66 02 FB | 	rdlong	muldivb_, fp
11938     08 4E 85 F1 | 	sub	fp, #8
1193c     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
11940     14 4E 05 A1 |  if_e	add	fp, #20
11944     A7 1E 02 AB |  if_e	rdlong	local01, fp
11948     14 4E 85 A1 |  if_e	sub	fp, #20
1194c     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
11950     1C 00 90 5D |  if_ne	jmp	#LR__1404
11954     A7 64 02 FB | 	rdlong	muldiva_, fp
11958     0C 4E 05 F1 | 	add	fp, #12
1195c     A7 66 02 FB | 	rdlong	muldivb_, fp
11960     0C 4E 85 F1 | 	sub	fp, #12
11964     BA 00 A0 FD | 	call	#divide_
11968     A7 66 62 FC | 	wrlong	muldivb_, fp
1196c     50 00 90 FD | 	jmp	#LR__1406
11970                 | LR__1404
11970                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
11970     08 4E 05 F1 | 	add	fp, #8
11974     A7 66 02 FB | 	rdlong	muldivb_, fp
11978     08 4E 85 F1 | 	sub	fp, #8
1197c     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
11980     14 4E 05 A1 |  if_e	add	fp, #20
11984     A7 1E 02 AB |  if_e	rdlong	local01, fp
11988     14 4E 85 A1 |  if_e	sub	fp, #20
1198c     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
11990     1C 00 90 5D |  if_ne	jmp	#LR__1405
11994     A7 64 02 FB | 	rdlong	muldiva_, fp
11998     0C 4E 05 F1 | 	add	fp, #12
1199c     A7 66 02 FB | 	rdlong	muldivb_, fp
119a0     0C 4E 85 F1 | 	sub	fp, #12
119a4     BA 00 A0 FD | 	call	#divide_
119a8     A7 66 62 FC | 	wrlong	muldivb_, fp
119ac     10 00 90 FD | 	jmp	#LR__1406
119b0                 | LR__1405
119b0     A7 16 68 FC | 	wrlong	#11, fp
119b4     08 4E 05 F1 | 	add	fp, #8
119b8     A7 FE 69 FC | 	wrlong	#255, fp
119bc     08 4E 85 F1 | 	sub	fp, #8
119c0                 | LR__1406
119c0     A7 12 02 F6 | 	mov	arg01, fp
119c4     0C 92 BF FD | 	call	#_push
119c8     A7 F0 03 F6 | 	mov	ptra, fp
119cc     B2 00 A0 FD | 	call	#popregs_
119d0                 | _do_div_ret
119d0     2D 00 64 FD | 	ret
119d4                 | 
119d4                 | ' 
119d4                 | ' sub do_fdiv 
119d4                 | _do_fdiv
119d4     02 4A 05 F6 | 	mov	COUNT_, #2
119d8     A8 00 A0 FD | 	call	#pushregs_
119dc     18 F0 07 F1 | 	add	ptra, #24
119e0     58 91 BF FD | 	call	#_pop
119e4     FD 14 02 F6 | 	mov	arg02, result1
119e8     FE 12 02 F6 | 	mov	arg01, result2
119ec     FF 1E 02 F6 | 	mov	local01, result3
119f0     0C 4E 05 F1 | 	add	fp, #12
119f4     A7 14 62 FC | 	wrlong	arg02, fp
119f8     04 4E 05 F1 | 	add	fp, #4
119fc     A7 12 62 FC | 	wrlong	arg01, fp
11a00     04 4E 05 F1 | 	add	fp, #4
11a04     A7 1E 62 FC | 	wrlong	local01, fp
11a08     14 4E 85 F1 | 	sub	fp, #20
11a0c     2C 91 BF FD | 	call	#_pop
11a10     A7 FA 61 FC | 	wrlong	result1, fp
11a14     04 4E 05 F1 | 	add	fp, #4
11a18     A7 FC 61 FC | 	wrlong	result2, fp
11a1c     04 4E 05 F1 | 	add	fp, #4
11a20     A7 FE 61 FC | 	wrlong	result3, fp
11a24                 | ' 
11a24                 | ' t2=pop()
11a24                 | ' t1=pop()
11a24                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
11a24     08 4E 85 F1 | 	sub	fp, #8
11a28     1F FE 0D F2 | 	cmp	result3, #31 wz
11a2c     14 4E 05 51 |  if_ne	add	fp, #20
11a30     A7 1E 02 5B |  if_ne	rdlong	local01, fp
11a34     14 4E 85 51 |  if_ne	sub	fp, #20
11a38     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
11a3c     A7 14 68 AC |  if_e	wrlong	#10, fp
11a40     08 4E 05 A1 |  if_e	add	fp, #8
11a44     A7 FE 69 AC |  if_e	wrlong	#255, fp
11a48     08 4E 85 A1 |  if_e	sub	fp, #8
11a4c     38 01 90 AD |  if_e	jmp	#LR__1415
11a50                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
11a50     08 4E 05 F1 | 	add	fp, #8
11a54     A7 14 02 FB | 	rdlong	arg02, fp
11a58     08 4E 85 F1 | 	sub	fp, #8
11a5c     1C 14 0E F2 | 	cmp	arg02, #28 wz
11a60     28 00 90 5D |  if_ne	jmp	#LR__1410
11a64     08 4E 05 F1 | 	add	fp, #8
11a68     A7 3C 68 FC | 	wrlong	#30, fp
11a6c     08 4E 85 F1 | 	sub	fp, #8
11a70     A7 12 02 FB | 	rdlong	arg01, fp
11a74     09 13 52 F6 | 	abs	arg01, arg01 wc
11a78     1F 20 C6 C9 |  if_b	decod	local02, #31
11a7c     00 20 06 36 |  if_ae	mov	local02, #0
11a80     BC 04 B1 FD | 	call	#__system___float_fromuns
11a84     10 FB 61 F5 | 	xor	result1, local02
11a88     A7 FA 61 FC | 	wrlong	result1, fp
11a8c                 | LR__1410
11a8c                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
11a8c     08 4E 05 F1 | 	add	fp, #8
11a90     A7 14 02 FB | 	rdlong	arg02, fp
11a94     08 4E 85 F1 | 	sub	fp, #8
11a98     1D 14 0E F2 | 	cmp	arg02, #29 wz
11a9c     18 00 90 5D |  if_ne	jmp	#LR__1411
11aa0     08 4E 05 F1 | 	add	fp, #8
11aa4     A7 3C 68 FC | 	wrlong	#30, fp
11aa8     08 4E 85 F1 | 	sub	fp, #8
11aac     A7 12 02 FB | 	rdlong	arg01, fp
11ab0     8C 04 B1 FD | 	call	#__system___float_fromuns
11ab4     A7 FA 61 FC | 	wrlong	result1, fp
11ab8                 | LR__1411
11ab8                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
11ab8     14 4E 05 F1 | 	add	fp, #20
11abc     A7 14 02 FB | 	rdlong	arg02, fp
11ac0     14 4E 85 F1 | 	sub	fp, #20
11ac4     1C 14 0E F2 | 	cmp	arg02, #28 wz
11ac8     34 00 90 5D |  if_ne	jmp	#LR__1412
11acc     14 4E 05 F1 | 	add	fp, #20
11ad0     A7 3C 68 FC | 	wrlong	#30, fp
11ad4     08 4E 85 F1 | 	sub	fp, #8
11ad8     A7 12 02 FB | 	rdlong	arg01, fp
11adc     0C 4E 85 F1 | 	sub	fp, #12
11ae0     09 13 52 F6 | 	abs	arg01, arg01 wc
11ae4     1F 20 C6 C9 |  if_b	decod	local02, #31
11ae8     00 20 06 36 |  if_ae	mov	local02, #0
11aec     50 04 B1 FD | 	call	#__system___float_fromuns
11af0     10 FB 61 F5 | 	xor	result1, local02
11af4     0C 4E 05 F1 | 	add	fp, #12
11af8     A7 FA 61 FC | 	wrlong	result1, fp
11afc     0C 4E 85 F1 | 	sub	fp, #12
11b00                 | LR__1412
11b00                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
11b00     14 4E 05 F1 | 	add	fp, #20
11b04     A7 14 02 FB | 	rdlong	arg02, fp
11b08     14 4E 85 F1 | 	sub	fp, #20
11b0c     1D 14 0E F2 | 	cmp	arg02, #29 wz
11b10     24 00 90 5D |  if_ne	jmp	#LR__1413
11b14     14 4E 05 F1 | 	add	fp, #20
11b18     A7 3C 68 FC | 	wrlong	#30, fp
11b1c     08 4E 85 F1 | 	sub	fp, #8
11b20     A7 12 02 FB | 	rdlong	arg01, fp
11b24     0C 4E 85 F1 | 	sub	fp, #12
11b28     14 04 B1 FD | 	call	#__system___float_fromuns
11b2c     0C 4E 05 F1 | 	add	fp, #12
11b30     A7 FA 61 FC | 	wrlong	result1, fp
11b34     0C 4E 85 F1 | 	sub	fp, #12
11b38                 | LR__1413
11b38                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
11b38     08 4E 05 F1 | 	add	fp, #8
11b3c     A7 14 02 FB | 	rdlong	arg02, fp
11b40     08 4E 85 F1 | 	sub	fp, #8
11b44     1E 14 0E F2 | 	cmp	arg02, #30 wz
11b48     14 4E 05 A1 |  if_e	add	fp, #20
11b4c     A7 1E 02 AB |  if_e	rdlong	local01, fp
11b50     14 4E 85 A1 |  if_e	sub	fp, #20
11b54     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
11b58     1C 00 90 5D |  if_ne	jmp	#LR__1414
11b5c     A7 12 02 FB | 	rdlong	arg01, fp
11b60     0C 4E 05 F1 | 	add	fp, #12
11b64     A7 14 02 FB | 	rdlong	arg02, fp
11b68     0C 4E 85 F1 | 	sub	fp, #12
11b6c     D8 09 B1 FD | 	call	#__system___float_div
11b70     A7 FA 61 FC | 	wrlong	result1, fp
11b74     10 00 90 FD | 	jmp	#LR__1415
11b78                 | LR__1414
11b78     A7 16 68 FC | 	wrlong	#11, fp
11b7c     08 4E 05 F1 | 	add	fp, #8
11b80     A7 FE 69 FC | 	wrlong	#255, fp
11b84     08 4E 85 F1 | 	sub	fp, #8
11b88                 | LR__1415
11b88     A7 12 02 F6 | 	mov	arg01, fp
11b8c     44 90 BF FD | 	call	#_push
11b90     A7 F0 03 F6 | 	mov	ptra, fp
11b94     B2 00 A0 FD | 	call	#popregs_
11b98                 | _do_fdiv_ret
11b98     2D 00 64 FD | 	ret
11b9c                 | 
11b9c                 | ' 
11b9c                 | ' 
11b9c                 | ' sub do_mod 
11b9c                 | _do_mod
11b9c     01 4A 05 F6 | 	mov	COUNT_, #1
11ba0     A8 00 A0 FD | 	call	#pushregs_
11ba4     18 F0 07 F1 | 	add	ptra, #24
11ba8     90 8F BF FD | 	call	#_pop
11bac     FD 66 02 F6 | 	mov	muldivb_, result1
11bb0     FE 64 02 F6 | 	mov	muldiva_, result2
11bb4     FF 1E 02 F6 | 	mov	local01, result3
11bb8     0C 4E 05 F1 | 	add	fp, #12
11bbc     A7 66 62 FC | 	wrlong	muldivb_, fp
11bc0     04 4E 05 F1 | 	add	fp, #4
11bc4     A7 64 62 FC | 	wrlong	muldiva_, fp
11bc8     04 4E 05 F1 | 	add	fp, #4
11bcc     A7 1E 62 FC | 	wrlong	local01, fp
11bd0     14 4E 85 F1 | 	sub	fp, #20
11bd4     64 8F BF FD | 	call	#_pop
11bd8     A7 FA 61 FC | 	wrlong	result1, fp
11bdc     04 4E 05 F1 | 	add	fp, #4
11be0     A7 FC 61 FC | 	wrlong	result2, fp
11be4     04 4E 05 F1 | 	add	fp, #4
11be8     A7 FE 61 FC | 	wrlong	result3, fp
11bec                 | ' 
11bec                 | ' t2=pop()
11bec                 | ' t1=pop()
11bec                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
11bec     08 4E 85 F1 | 	sub	fp, #8
11bf0     1F FE 0D F2 | 	cmp	result3, #31 wz
11bf4     14 4E 05 51 |  if_ne	add	fp, #20
11bf8     A7 12 02 5B |  if_ne	rdlong	arg01, fp
11bfc     14 4E 85 51 |  if_ne	sub	fp, #20
11c00     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
11c04     A7 14 68 AC |  if_e	wrlong	#10, fp
11c08     08 4E 05 A1 |  if_e	add	fp, #8
11c0c     A7 FE 69 AC |  if_e	wrlong	#255, fp
11c10     08 4E 85 A1 |  if_e	sub	fp, #8
11c14     90 01 90 AD |  if_e	jmp	#LR__1426
11c18                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
11c18     08 4E 05 F1 | 	add	fp, #8
11c1c     A7 66 02 FB | 	rdlong	muldivb_, fp
11c20     08 4E 85 F1 | 	sub	fp, #8
11c24     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
11c28     1C 00 90 5D |  if_ne	jmp	#LR__1420
11c2c     08 4E 05 F1 | 	add	fp, #8
11c30     A7 38 68 FC | 	wrlong	#28, fp
11c34     08 4E 85 F1 | 	sub	fp, #8
11c38     A7 12 02 FB | 	rdlong	arg01, fp
11c3c     00 14 06 F6 | 	mov	arg02, #0
11c40     C8 0B B1 FD | 	call	#__system___float_tointeger
11c44     A7 FA 61 FC | 	wrlong	result1, fp
11c48                 | LR__1420
11c48                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
11c48     14 4E 05 F1 | 	add	fp, #20
11c4c     A7 66 02 FB | 	rdlong	muldivb_, fp
11c50     14 4E 85 F1 | 	sub	fp, #20
11c54     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
11c58     28 00 90 5D |  if_ne	jmp	#LR__1421
11c5c     14 4E 05 F1 | 	add	fp, #20
11c60     A7 38 68 FC | 	wrlong	#28, fp
11c64     08 4E 85 F1 | 	sub	fp, #8
11c68     A7 12 02 FB | 	rdlong	arg01, fp
11c6c     0C 4E 85 F1 | 	sub	fp, #12
11c70     00 14 06 F6 | 	mov	arg02, #0
11c74     94 0B B1 FD | 	call	#__system___float_tointeger
11c78     0C 4E 05 F1 | 	add	fp, #12
11c7c     A7 FA 61 FC | 	wrlong	result1, fp
11c80     0C 4E 85 F1 | 	sub	fp, #12
11c84                 | LR__1421
11c84                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
11c84     08 4E 05 F1 | 	add	fp, #8
11c88     A7 66 02 FB | 	rdlong	muldivb_, fp
11c8c     08 4E 85 F1 | 	sub	fp, #8
11c90     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
11c94     14 4E 05 A1 |  if_e	add	fp, #20
11c98     A7 1E 02 AB |  if_e	rdlong	local01, fp
11c9c     14 4E 85 A1 |  if_e	sub	fp, #20
11ca0     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
11ca4     20 00 90 5D |  if_ne	jmp	#LR__1422
11ca8     0C 4E 05 F1 | 	add	fp, #12
11cac     A7 1E 02 FB | 	rdlong	local01, fp
11cb0     0C 4E 85 F1 | 	sub	fp, #12
11cb4     A7 66 02 FB | 	rdlong	muldivb_, fp
11cb8     0F 67 12 FD | 	qdiv	muldivb_, local01
11cbc     19 1E 62 FD | 	getqy	local01
11cc0     A7 1E 62 FC | 	wrlong	local01, fp
11cc4     E0 00 90 FD | 	jmp	#LR__1426
11cc8                 | LR__1422
11cc8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
11cc8     08 4E 05 F1 | 	add	fp, #8
11ccc     A7 66 02 FB | 	rdlong	muldivb_, fp
11cd0     08 4E 85 F1 | 	sub	fp, #8
11cd4     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
11cd8     14 4E 05 A1 |  if_e	add	fp, #20
11cdc     A7 1E 02 AB |  if_e	rdlong	local01, fp
11ce0     14 4E 85 A1 |  if_e	sub	fp, #20
11ce4     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
11ce8     2C 00 90 5D |  if_ne	jmp	#LR__1423
11cec     0C 4E 05 F1 | 	add	fp, #12
11cf0     A7 1E 02 FB | 	rdlong	local01, fp
11cf4     0C 4E 85 F1 | 	sub	fp, #12
11cf8     A7 66 02 FB | 	rdlong	muldivb_, fp
11cfc     0F 67 12 FD | 	qdiv	muldivb_, local01
11d00     19 1E 62 FD | 	getqy	local01
11d04     A7 1E 62 FC | 	wrlong	local01, fp
11d08     08 4E 05 F1 | 	add	fp, #8
11d0c     A7 38 68 FC | 	wrlong	#28, fp
11d10     08 4E 85 F1 | 	sub	fp, #8
11d14     90 00 90 FD | 	jmp	#LR__1426
11d18                 | LR__1423
11d18                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
11d18     08 4E 05 F1 | 	add	fp, #8
11d1c     A7 66 02 FB | 	rdlong	muldivb_, fp
11d20     08 4E 85 F1 | 	sub	fp, #8
11d24     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
11d28     14 4E 05 A1 |  if_e	add	fp, #20
11d2c     A7 1E 02 AB |  if_e	rdlong	local01, fp
11d30     14 4E 85 A1 |  if_e	sub	fp, #20
11d34     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
11d38     1C 00 90 5D |  if_ne	jmp	#LR__1424
11d3c     A7 64 02 FB | 	rdlong	muldiva_, fp
11d40     0C 4E 05 F1 | 	add	fp, #12
11d44     A7 66 02 FB | 	rdlong	muldivb_, fp
11d48     0C 4E 85 F1 | 	sub	fp, #12
11d4c     BA 00 A0 FD | 	call	#divide_
11d50     A7 64 62 FC | 	wrlong	muldiva_, fp
11d54     50 00 90 FD | 	jmp	#LR__1426
11d58                 | LR__1424
11d58                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
11d58     08 4E 05 F1 | 	add	fp, #8
11d5c     A7 66 02 FB | 	rdlong	muldivb_, fp
11d60     08 4E 85 F1 | 	sub	fp, #8
11d64     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
11d68     14 4E 05 A1 |  if_e	add	fp, #20
11d6c     A7 1E 02 AB |  if_e	rdlong	local01, fp
11d70     14 4E 85 A1 |  if_e	sub	fp, #20
11d74     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
11d78     1C 00 90 5D |  if_ne	jmp	#LR__1425
11d7c     A7 64 02 FB | 	rdlong	muldiva_, fp
11d80     0C 4E 05 F1 | 	add	fp, #12
11d84     A7 66 02 FB | 	rdlong	muldivb_, fp
11d88     0C 4E 85 F1 | 	sub	fp, #12
11d8c     BA 00 A0 FD | 	call	#divide_
11d90     A7 64 62 FC | 	wrlong	muldiva_, fp
11d94     10 00 90 FD | 	jmp	#LR__1426
11d98                 | LR__1425
11d98     A7 16 68 FC | 	wrlong	#11, fp
11d9c     08 4E 05 F1 | 	add	fp, #8
11da0     A7 FE 69 FC | 	wrlong	#255, fp
11da4     08 4E 85 F1 | 	sub	fp, #8
11da8                 | LR__1426
11da8     A7 12 02 F6 | 	mov	arg01, fp
11dac     24 8E BF FD | 	call	#_push
11db0     A7 F0 03 F6 | 	mov	ptra, fp
11db4     B2 00 A0 FD | 	call	#popregs_
11db8                 | _do_mod_ret
11db8     2D 00 64 FD | 	ret
11dbc                 | 
11dbc                 | ' 
11dbc                 | ' sub do_shl 
11dbc                 | _do_shl
11dbc     03 4A 05 F6 | 	mov	COUNT_, #3
11dc0     A8 00 A0 FD | 	call	#pushregs_
11dc4     18 F0 07 F1 | 	add	ptra, #24
11dc8     70 8D BF FD | 	call	#_pop
11dcc     FD 12 02 F6 | 	mov	arg01, result1
11dd0     FE 1E 02 F6 | 	mov	local01, result2
11dd4     FF 20 02 F6 | 	mov	local02, result3
11dd8     0C 4E 05 F1 | 	add	fp, #12
11ddc     A7 12 62 FC | 	wrlong	arg01, fp
11de0     04 4E 05 F1 | 	add	fp, #4
11de4     A7 1E 62 FC | 	wrlong	local01, fp
11de8     04 4E 05 F1 | 	add	fp, #4
11dec     A7 20 62 FC | 	wrlong	local02, fp
11df0     14 4E 85 F1 | 	sub	fp, #20
11df4     44 8D BF FD | 	call	#_pop
11df8     FF 22 02 F6 | 	mov	local03, result3
11dfc     A7 FA 61 FC | 	wrlong	result1, fp
11e00     04 4E 05 F1 | 	add	fp, #4
11e04     A7 FC 61 FC | 	wrlong	result2, fp
11e08     04 4E 05 F1 | 	add	fp, #4
11e0c     A7 22 62 FC | 	wrlong	local03, fp
11e10                 | ' 
11e10                 | ' t2=pop()
11e10                 | ' t1=pop()
11e10                 | ' 
11e10                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
11e10     08 4E 85 F1 | 	sub	fp, #8
11e14     1C 22 0E F2 | 	cmp	local03, #28 wz
11e18     A7 22 02 AB |  if_e	rdlong	local03, fp
11e1c     A7 22 62 AC |  if_e	wrlong	local03, fp
11e20     08 4E 05 A1 |  if_e	add	fp, #8
11e24     A7 3A 68 AC |  if_e	wrlong	#29, fp
11e28     08 4E 85 A1 |  if_e	sub	fp, #8
11e2c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
11e2c     14 4E 05 F1 | 	add	fp, #20
11e30     A7 22 02 FB | 	rdlong	local03, fp
11e34     14 4E 85 F1 | 	sub	fp, #20
11e38     1C 22 0E F2 | 	cmp	local03, #28 wz
11e3c     18 00 90 5D |  if_ne	jmp	#LR__1430
11e40     0C 4E 05 F1 | 	add	fp, #12
11e44     A7 22 02 FB | 	rdlong	local03, fp
11e48     A7 22 62 FC | 	wrlong	local03, fp
11e4c     08 4E 05 F1 | 	add	fp, #8
11e50     A7 3A 68 FC | 	wrlong	#29, fp
11e54     14 4E 85 F1 | 	sub	fp, #20
11e58                 | LR__1430
11e58                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
11e58     08 4E 05 F1 | 	add	fp, #8
11e5c     A7 22 02 FB | 	rdlong	local03, fp
11e60     08 4E 85 F1 | 	sub	fp, #8
11e64     1F 22 0E F2 | 	cmp	local03, #31 wz
11e68     14 4E 05 51 |  if_ne	add	fp, #20
11e6c     A7 20 02 5B |  if_ne	rdlong	local02, fp
11e70     14 4E 85 51 |  if_ne	sub	fp, #20
11e74     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
11e78     08 4E 05 51 |  if_ne	add	fp, #8
11e7c     A7 22 02 5B |  if_ne	rdlong	local03, fp
11e80     08 4E 85 51 |  if_ne	sub	fp, #8
11e84     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
11e88     14 4E 05 51 |  if_ne	add	fp, #20
11e8c     14 4E 85 51 |  if_ne	sub	fp, #20
11e90     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
11e94     A7 0C 68 AC |  if_e	wrlong	#6, fp
11e98     08 4E 05 A1 |  if_e	add	fp, #8
11e9c     A7 FE 69 AC |  if_e	wrlong	#255, fp
11ea0     08 4E 85 A1 |  if_e	sub	fp, #8
11ea4     18 00 90 AD |  if_e	jmp	#LR__1431
11ea8     A7 22 02 FB | 	rdlong	local03, fp
11eac     0C 4E 05 F1 | 	add	fp, #12
11eb0     A7 1E 02 FB | 	rdlong	local01, fp
11eb4     0C 4E 85 F1 | 	sub	fp, #12
11eb8     0F 23 62 F0 | 	shl	local03, local01
11ebc     A7 22 62 FC | 	wrlong	local03, fp
11ec0                 | LR__1431
11ec0     A7 12 02 F6 | 	mov	arg01, fp
11ec4     0C 8D BF FD | 	call	#_push
11ec8     A7 F0 03 F6 | 	mov	ptra, fp
11ecc     B2 00 A0 FD | 	call	#popregs_
11ed0                 | _do_shl_ret
11ed0     2D 00 64 FD | 	ret
11ed4                 | 
11ed4                 | ' 
11ed4                 | ' sub do_shr 
11ed4                 | _do_shr
11ed4     03 4A 05 F6 | 	mov	COUNT_, #3
11ed8     A8 00 A0 FD | 	call	#pushregs_
11edc     18 F0 07 F1 | 	add	ptra, #24
11ee0     58 8C BF FD | 	call	#_pop
11ee4     FD 12 02 F6 | 	mov	arg01, result1
11ee8     FE 1E 02 F6 | 	mov	local01, result2
11eec     FF 20 02 F6 | 	mov	local02, result3
11ef0     0C 4E 05 F1 | 	add	fp, #12
11ef4     A7 12 62 FC | 	wrlong	arg01, fp
11ef8     04 4E 05 F1 | 	add	fp, #4
11efc     A7 1E 62 FC | 	wrlong	local01, fp
11f00     04 4E 05 F1 | 	add	fp, #4
11f04     A7 20 62 FC | 	wrlong	local02, fp
11f08     14 4E 85 F1 | 	sub	fp, #20
11f0c     2C 8C BF FD | 	call	#_pop
11f10     FF 22 02 F6 | 	mov	local03, result3
11f14     A7 FA 61 FC | 	wrlong	result1, fp
11f18     04 4E 05 F1 | 	add	fp, #4
11f1c     A7 FC 61 FC | 	wrlong	result2, fp
11f20     04 4E 05 F1 | 	add	fp, #4
11f24     A7 22 62 FC | 	wrlong	local03, fp
11f28                 | ' t2=pop()
11f28                 | ' t1=pop()
11f28                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
11f28     08 4E 85 F1 | 	sub	fp, #8
11f2c     1C 22 0E F2 | 	cmp	local03, #28 wz
11f30     A7 22 02 AB |  if_e	rdlong	local03, fp
11f34     A7 22 62 AC |  if_e	wrlong	local03, fp
11f38     08 4E 05 A1 |  if_e	add	fp, #8
11f3c     A7 3A 68 AC |  if_e	wrlong	#29, fp
11f40     08 4E 85 A1 |  if_e	sub	fp, #8
11f44                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
11f44     14 4E 05 F1 | 	add	fp, #20
11f48     A7 22 02 FB | 	rdlong	local03, fp
11f4c     14 4E 85 F1 | 	sub	fp, #20
11f50     1C 22 0E F2 | 	cmp	local03, #28 wz
11f54     18 00 90 5D |  if_ne	jmp	#LR__1440
11f58     0C 4E 05 F1 | 	add	fp, #12
11f5c     A7 22 02 FB | 	rdlong	local03, fp
11f60     A7 22 62 FC | 	wrlong	local03, fp
11f64     08 4E 05 F1 | 	add	fp, #8
11f68     A7 3A 68 FC | 	wrlong	#29, fp
11f6c     14 4E 85 F1 | 	sub	fp, #20
11f70                 | LR__1440
11f70                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
11f70     08 4E 05 F1 | 	add	fp, #8
11f74     A7 22 02 FB | 	rdlong	local03, fp
11f78     08 4E 85 F1 | 	sub	fp, #8
11f7c     1F 22 0E F2 | 	cmp	local03, #31 wz
11f80     14 4E 05 51 |  if_ne	add	fp, #20
11f84     A7 20 02 5B |  if_ne	rdlong	local02, fp
11f88     14 4E 85 51 |  if_ne	sub	fp, #20
11f8c     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
11f90     08 4E 05 51 |  if_ne	add	fp, #8
11f94     A7 22 02 5B |  if_ne	rdlong	local03, fp
11f98     08 4E 85 51 |  if_ne	sub	fp, #8
11f9c     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
11fa0     14 4E 05 51 |  if_ne	add	fp, #20
11fa4     14 4E 85 51 |  if_ne	sub	fp, #20
11fa8     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
11fac     A7 0C 68 AC |  if_e	wrlong	#6, fp
11fb0     08 4E 05 A1 |  if_e	add	fp, #8
11fb4     A7 FE 69 AC |  if_e	wrlong	#255, fp
11fb8     08 4E 85 A1 |  if_e	sub	fp, #8
11fbc     18 00 90 AD |  if_e	jmp	#LR__1441
11fc0     A7 22 02 FB | 	rdlong	local03, fp
11fc4     0C 4E 05 F1 | 	add	fp, #12
11fc8     A7 1E 02 FB | 	rdlong	local01, fp
11fcc     0C 4E 85 F1 | 	sub	fp, #12
11fd0     0F 23 42 F0 | 	shr	local03, local01
11fd4     A7 22 62 FC | 	wrlong	local03, fp
11fd8                 | LR__1441
11fd8     A7 12 02 F6 | 	mov	arg01, fp
11fdc     F4 8B BF FD | 	call	#_push
11fe0     A7 F0 03 F6 | 	mov	ptra, fp
11fe4     B2 00 A0 FD | 	call	#popregs_
11fe8                 | _do_shr_ret
11fe8     2D 00 64 FD | 	ret
11fec                 | 
11fec                 | ' 
11fec                 | ' sub do_power 
11fec                 | _do_power
11fec     02 4A 05 F6 | 	mov	COUNT_, #2
11ff0     A8 00 A0 FD | 	call	#pushregs_
11ff4     18 F0 07 F1 | 	add	ptra, #24
11ff8     40 8B BF FD | 	call	#_pop
11ffc     FD 14 02 F6 | 	mov	arg02, result1
12000     FE 12 02 F6 | 	mov	arg01, result2
12004     FF 1E 02 F6 | 	mov	local01, result3
12008     0C 4E 05 F1 | 	add	fp, #12
1200c     A7 14 62 FC | 	wrlong	arg02, fp
12010     04 4E 05 F1 | 	add	fp, #4
12014     A7 12 62 FC | 	wrlong	arg01, fp
12018     04 4E 05 F1 | 	add	fp, #4
1201c     A7 1E 62 FC | 	wrlong	local01, fp
12020     14 4E 85 F1 | 	sub	fp, #20
12024     14 8B BF FD | 	call	#_pop
12028     A7 FA 61 FC | 	wrlong	result1, fp
1202c     04 4E 05 F1 | 	add	fp, #4
12030     A7 FC 61 FC | 	wrlong	result2, fp
12034     04 4E 05 F1 | 	add	fp, #4
12038     A7 FE 61 FC | 	wrlong	result3, fp
1203c                 | ' t2=pop()
1203c                 | ' t1=pop()
1203c                 | ' 
1203c                 | ' 
1203c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
1203c     08 4E 85 F1 | 	sub	fp, #8
12040     1F FE 0D F2 | 	cmp	result3, #31 wz
12044     14 4E 05 51 |  if_ne	add	fp, #20
12048     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1204c     14 4E 85 51 |  if_ne	sub	fp, #20
12050     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
12054     A7 18 68 AC |  if_e	wrlong	#12, fp
12058     08 4E 05 A1 |  if_e	add	fp, #8
1205c     A7 FE 69 AC |  if_e	wrlong	#255, fp
12060     08 4E 85 A1 |  if_e	sub	fp, #8
12064     38 01 90 AD |  if_e	jmp	#LR__1455
12068                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
12068     08 4E 05 F1 | 	add	fp, #8
1206c     A7 14 02 FB | 	rdlong	arg02, fp
12070     08 4E 85 F1 | 	sub	fp, #8
12074     1C 14 0E F2 | 	cmp	arg02, #28 wz
12078     28 00 90 5D |  if_ne	jmp	#LR__1450
1207c     08 4E 05 F1 | 	add	fp, #8
12080     A7 3C 68 FC | 	wrlong	#30, fp
12084     08 4E 85 F1 | 	sub	fp, #8
12088     A7 12 02 FB | 	rdlong	arg01, fp
1208c     09 13 52 F6 | 	abs	arg01, arg01 wc
12090     1F 20 C6 C9 |  if_b	decod	local02, #31
12094     00 20 06 36 |  if_ae	mov	local02, #0
12098     A4 FE B0 FD | 	call	#__system___float_fromuns
1209c     10 FB 61 F5 | 	xor	result1, local02
120a0     A7 FA 61 FC | 	wrlong	result1, fp
120a4                 | LR__1450
120a4                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
120a4     08 4E 05 F1 | 	add	fp, #8
120a8     A7 14 02 FB | 	rdlong	arg02, fp
120ac     08 4E 85 F1 | 	sub	fp, #8
120b0     1D 14 0E F2 | 	cmp	arg02, #29 wz
120b4     18 00 90 5D |  if_ne	jmp	#LR__1451
120b8     08 4E 05 F1 | 	add	fp, #8
120bc     A7 3C 68 FC | 	wrlong	#30, fp
120c0     08 4E 85 F1 | 	sub	fp, #8
120c4     A7 12 02 FB | 	rdlong	arg01, fp
120c8     74 FE B0 FD | 	call	#__system___float_fromuns
120cc     A7 FA 61 FC | 	wrlong	result1, fp
120d0                 | LR__1451
120d0                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
120d0     14 4E 05 F1 | 	add	fp, #20
120d4     A7 14 02 FB | 	rdlong	arg02, fp
120d8     14 4E 85 F1 | 	sub	fp, #20
120dc     1C 14 0E F2 | 	cmp	arg02, #28 wz
120e0     34 00 90 5D |  if_ne	jmp	#LR__1452
120e4     14 4E 05 F1 | 	add	fp, #20
120e8     A7 3C 68 FC | 	wrlong	#30, fp
120ec     08 4E 85 F1 | 	sub	fp, #8
120f0     A7 12 02 FB | 	rdlong	arg01, fp
120f4     0C 4E 85 F1 | 	sub	fp, #12
120f8     09 13 52 F6 | 	abs	arg01, arg01 wc
120fc     1F 20 C6 C9 |  if_b	decod	local02, #31
12100     00 20 06 36 |  if_ae	mov	local02, #0
12104     38 FE B0 FD | 	call	#__system___float_fromuns
12108     10 FB 61 F5 | 	xor	result1, local02
1210c     0C 4E 05 F1 | 	add	fp, #12
12110     A7 FA 61 FC | 	wrlong	result1, fp
12114     0C 4E 85 F1 | 	sub	fp, #12
12118                 | LR__1452
12118                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
12118     14 4E 05 F1 | 	add	fp, #20
1211c     A7 14 02 FB | 	rdlong	arg02, fp
12120     14 4E 85 F1 | 	sub	fp, #20
12124     1D 14 0E F2 | 	cmp	arg02, #29 wz
12128     24 00 90 5D |  if_ne	jmp	#LR__1453
1212c     14 4E 05 F1 | 	add	fp, #20
12130     A7 3C 68 FC | 	wrlong	#30, fp
12134     08 4E 85 F1 | 	sub	fp, #8
12138     A7 12 02 FB | 	rdlong	arg01, fp
1213c     0C 4E 85 F1 | 	sub	fp, #12
12140     FC FD B0 FD | 	call	#__system___float_fromuns
12144     0C 4E 05 F1 | 	add	fp, #12
12148     A7 FA 61 FC | 	wrlong	result1, fp
1214c     0C 4E 85 F1 | 	sub	fp, #12
12150                 | LR__1453
12150                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
12150     08 4E 05 F1 | 	add	fp, #8
12154     A7 14 02 FB | 	rdlong	arg02, fp
12158     08 4E 85 F1 | 	sub	fp, #8
1215c     1E 14 0E F2 | 	cmp	arg02, #30 wz
12160     14 4E 05 A1 |  if_e	add	fp, #20
12164     A7 1E 02 AB |  if_e	rdlong	local01, fp
12168     14 4E 85 A1 |  if_e	sub	fp, #20
1216c     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
12170     1C 00 90 5D |  if_ne	jmp	#LR__1454
12174     A7 12 02 FB | 	rdlong	arg01, fp
12178     0C 4E 05 F1 | 	add	fp, #12
1217c     A7 14 02 FB | 	rdlong	arg02, fp
12180     0C 4E 85 F1 | 	sub	fp, #12
12184     A0 10 B1 FD | 	call	#__system____builtin_powf
12188     A7 FA 61 FC | 	wrlong	result1, fp
1218c     10 00 90 FD | 	jmp	#LR__1455
12190                 | LR__1454
12190     A7 1A 68 FC | 	wrlong	#13, fp
12194     08 4E 05 F1 | 	add	fp, #8
12198     A7 FE 69 FC | 	wrlong	#255, fp
1219c     08 4E 85 F1 | 	sub	fp, #8
121a0                 | LR__1455
121a0     A7 12 02 F6 | 	mov	arg01, fp
121a4     2C 8A BF FD | 	call	#_push
121a8     A7 F0 03 F6 | 	mov	ptra, fp
121ac     B2 00 A0 FD | 	call	#popregs_
121b0                 | _do_power_ret
121b0     2D 00 64 FD | 	ret
121b4                 | 
121b4                 | ' 
121b4                 | ' 
121b4                 | ' sub do_eq
121b4                 | _do_eq
121b4     05 4A 05 F6 | 	mov	COUNT_, #5
121b8     A8 00 A0 FD | 	call	#pushregs_
121bc     18 F0 07 F1 | 	add	ptra, #24
121c0     78 89 BF FD | 	call	#_pop
121c4     FD 1E 02 F6 | 	mov	local01, result1
121c8     FE 20 02 F6 | 	mov	local02, result2
121cc     FF 22 02 F6 | 	mov	local03, result3
121d0     0C 4E 05 F1 | 	add	fp, #12
121d4     A7 1E 62 FC | 	wrlong	local01, fp
121d8     04 4E 05 F1 | 	add	fp, #4
121dc     A7 20 62 FC | 	wrlong	local02, fp
121e0     04 4E 05 F1 | 	add	fp, #4
121e4     A7 22 62 FC | 	wrlong	local03, fp
121e8     14 4E 85 F1 | 	sub	fp, #20
121ec     4C 89 BF FD | 	call	#_pop
121f0     FF 22 02 F6 | 	mov	local03, result3
121f4     A7 FA 61 FC | 	wrlong	result1, fp
121f8     04 4E 05 F1 | 	add	fp, #4
121fc     A7 FC 61 FC | 	wrlong	result2, fp
12200     04 4E 05 F1 | 	add	fp, #4
12204     A7 22 62 FC | 	wrlong	local03, fp
12208                 | ' t2=pop()
12208                 | ' t1=pop()
12208                 | ' 
12208                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
12208     08 4E 85 F1 | 	sub	fp, #8
1220c     1F 22 0E F2 | 	cmp	local03, #31 wz
12210     14 4E 05 A1 |  if_e	add	fp, #20
12214     A7 24 02 AB |  if_e	rdlong	local04, fp
12218     14 4E 85 A1 |  if_e	sub	fp, #20
1221c     12 23 02 A6 |  if_e	mov	local03, local04
12220     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12224     28 00 90 5D |  if_ne	jmp	#LR__1460
12228     00 1E 06 F6 | 	mov	local01, #0
1222c     A7 12 02 FB | 	rdlong	arg01, fp
12230     0C 4E 05 F1 | 	add	fp, #12
12234     A7 14 02 FB | 	rdlong	arg02, fp
12238     0C 4E 85 F1 | 	sub	fp, #12
1223c     E4 D5 B0 FD | 	call	#__system___string_cmp
12240     00 FA 0D F2 | 	cmp	result1, #0 wz
12244     00 1E 26 A6 |  if_e	not	local01, #0
12248     A7 1E 62 FC | 	wrlong	local01, fp
1224c     1C 04 90 FD | 	jmp	#LR__1473
12250                 | LR__1460
12250                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
12250     08 4E 05 F1 | 	add	fp, #8
12254     A7 1E 02 FB | 	rdlong	local01, fp
12258     08 4E 85 F1 | 	sub	fp, #8
1225c     1E 1E 0E F2 | 	cmp	local01, #30 wz
12260     14 4E 05 A1 |  if_e	add	fp, #20
12264     A7 24 02 AB |  if_e	rdlong	local04, fp
12268     14 4E 85 A1 |  if_e	sub	fp, #20
1226c     12 23 02 A6 |  if_e	mov	local03, local04
12270     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12274     2C 00 90 5D |  if_ne	jmp	#LR__1461
12278     00 1E 06 F6 | 	mov	local01, #0
1227c     A7 12 02 FB | 	rdlong	arg01, fp
12280     0C 4E 05 F1 | 	add	fp, #12
12284     A7 14 02 FB | 	rdlong	arg02, fp
12288     0C 4E 85 F1 | 	sub	fp, #12
1228c     01 16 06 F6 | 	mov	arg03, #1
12290     E4 04 B1 FD | 	call	#__system___float_cmp
12294     00 FA 0D F2 | 	cmp	result1, #0 wz
12298     00 1E 26 A6 |  if_e	not	local01, #0
1229c     A7 1E 62 FC | 	wrlong	local01, fp
122a0     C8 03 90 FD | 	jmp	#LR__1473
122a4                 | LR__1461
122a4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
122a4     08 4E 05 F1 | 	add	fp, #8
122a8     A7 1E 02 FB | 	rdlong	local01, fp
122ac     08 4E 85 F1 | 	sub	fp, #8
122b0     1E 1E 0E F2 | 	cmp	local01, #30 wz
122b4     14 4E 05 A1 |  if_e	add	fp, #20
122b8     A7 24 02 AB |  if_e	rdlong	local04, fp
122bc     14 4E 85 A1 |  if_e	sub	fp, #20
122c0     12 23 02 A6 |  if_e	mov	local03, local04
122c4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
122c8     48 00 90 5D |  if_ne	jmp	#LR__1462
122cc     00 1E 06 F6 | 	mov	local01, #0
122d0     A7 20 02 FB | 	rdlong	local02, fp
122d4     0C 4E 05 F1 | 	add	fp, #12
122d8     A7 12 02 FB | 	rdlong	arg01, fp
122dc     0C 4E 85 F1 | 	sub	fp, #12
122e0     09 13 52 F6 | 	abs	arg01, arg01 wc
122e4     1F 26 C6 C9 |  if_b	decod	local05, #31
122e8     00 26 06 36 |  if_ae	mov	local05, #0
122ec     50 FC B0 FD | 	call	#__system___float_fromuns
122f0     13 FB 61 F5 | 	xor	result1, local05
122f4     FD 14 02 F6 | 	mov	arg02, result1
122f8     10 13 02 F6 | 	mov	arg01, local02
122fc     01 16 06 F6 | 	mov	arg03, #1
12300     74 04 B1 FD | 	call	#__system___float_cmp
12304     00 FA 0D F2 | 	cmp	result1, #0 wz
12308     00 1E 26 A6 |  if_e	not	local01, #0
1230c     A7 1E 62 FC | 	wrlong	local01, fp
12310     58 03 90 FD | 	jmp	#LR__1473
12314                 | LR__1462
12314                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
12314     08 4E 05 F1 | 	add	fp, #8
12318     A7 1E 02 FB | 	rdlong	local01, fp
1231c     08 4E 85 F1 | 	sub	fp, #8
12320     1E 1E 0E F2 | 	cmp	local01, #30 wz
12324     14 4E 05 A1 |  if_e	add	fp, #20
12328     A7 24 02 AB |  if_e	rdlong	local04, fp
1232c     14 4E 85 A1 |  if_e	sub	fp, #20
12330     12 23 02 A6 |  if_e	mov	local03, local04
12334     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12338     38 00 90 5D |  if_ne	jmp	#LR__1463
1233c     00 1E 06 F6 | 	mov	local01, #0
12340     A7 20 02 FB | 	rdlong	local02, fp
12344     0C 4E 05 F1 | 	add	fp, #12
12348     A7 12 02 FB | 	rdlong	arg01, fp
1234c     0C 4E 85 F1 | 	sub	fp, #12
12350     EC FB B0 FD | 	call	#__system___float_fromuns
12354     FD 14 02 F6 | 	mov	arg02, result1
12358     10 13 02 F6 | 	mov	arg01, local02
1235c     01 16 06 F6 | 	mov	arg03, #1
12360     14 04 B1 FD | 	call	#__system___float_cmp
12364     00 FA 0D F2 | 	cmp	result1, #0 wz
12368     00 1E 26 A6 |  if_e	not	local01, #0
1236c     A7 1E 62 FC | 	wrlong	local01, fp
12370     F8 02 90 FD | 	jmp	#LR__1473
12374                 | LR__1463
12374                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
12374     08 4E 05 F1 | 	add	fp, #8
12378     A7 1E 02 FB | 	rdlong	local01, fp
1237c     08 4E 85 F1 | 	sub	fp, #8
12380     1C 1E 0E F2 | 	cmp	local01, #28 wz
12384     14 4E 05 A1 |  if_e	add	fp, #20
12388     A7 24 02 AB |  if_e	rdlong	local04, fp
1238c     14 4E 85 A1 |  if_e	sub	fp, #20
12390     12 23 02 A6 |  if_e	mov	local03, local04
12394     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12398     44 00 90 5D |  if_ne	jmp	#LR__1464
1239c     00 1E 06 F6 | 	mov	local01, #0
123a0     A7 12 02 FB | 	rdlong	arg01, fp
123a4     09 13 52 F6 | 	abs	arg01, arg01 wc
123a8     1F 26 C6 C9 |  if_b	decod	local05, #31
123ac     00 26 06 36 |  if_ae	mov	local05, #0
123b0     8C FB B0 FD | 	call	#__system___float_fromuns
123b4     13 FB 61 F5 | 	xor	result1, local05
123b8     FD 12 02 F6 | 	mov	arg01, result1
123bc     0C 4E 05 F1 | 	add	fp, #12
123c0     A7 14 02 FB | 	rdlong	arg02, fp
123c4     0C 4E 85 F1 | 	sub	fp, #12
123c8     01 16 06 F6 | 	mov	arg03, #1
123cc     A8 03 B1 FD | 	call	#__system___float_cmp
123d0     00 FA 0D F2 | 	cmp	result1, #0 wz
123d4     00 1E 26 A6 |  if_e	not	local01, #0
123d8     A7 1E 62 FC | 	wrlong	local01, fp
123dc     8C 02 90 FD | 	jmp	#LR__1473
123e0                 | LR__1464
123e0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
123e0     08 4E 05 F1 | 	add	fp, #8
123e4     A7 1E 02 FB | 	rdlong	local01, fp
123e8     08 4E 85 F1 | 	sub	fp, #8
123ec     1C 1E 0E F2 | 	cmp	local01, #28 wz
123f0     14 4E 05 A1 |  if_e	add	fp, #20
123f4     A7 24 02 AB |  if_e	rdlong	local04, fp
123f8     14 4E 85 A1 |  if_e	sub	fp, #20
123fc     12 23 02 A6 |  if_e	mov	local03, local04
12400     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12404     24 00 90 5D |  if_ne	jmp	#LR__1465
12408     00 1E 06 F6 | 	mov	local01, #0
1240c     A7 20 02 FB | 	rdlong	local02, fp
12410     0C 4E 05 F1 | 	add	fp, #12
12414     A7 22 02 FB | 	rdlong	local03, fp
12418     0C 4E 85 F1 | 	sub	fp, #12
1241c     11 21 0A F2 | 	cmp	local02, local03 wz
12420     01 1E 66 A6 |  if_e	neg	local01, #1
12424     A7 1E 62 FC | 	wrlong	local01, fp
12428     40 02 90 FD | 	jmp	#LR__1473
1242c                 | LR__1465
1242c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
1242c     08 4E 05 F1 | 	add	fp, #8
12430     A7 1E 02 FB | 	rdlong	local01, fp
12434     08 4E 85 F1 | 	sub	fp, #8
12438     1C 1E 0E F2 | 	cmp	local01, #28 wz
1243c     14 4E 05 A1 |  if_e	add	fp, #20
12440     A7 24 02 AB |  if_e	rdlong	local04, fp
12444     14 4E 85 A1 |  if_e	sub	fp, #20
12448     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
1244c     24 00 90 5D |  if_ne	jmp	#LR__1466
12450     00 1E 06 F6 | 	mov	local01, #0
12454     A7 20 02 FB | 	rdlong	local02, fp
12458     0C 4E 05 F1 | 	add	fp, #12
1245c     A7 22 02 FB | 	rdlong	local03, fp
12460     0C 4E 85 F1 | 	sub	fp, #12
12464     11 21 0A F2 | 	cmp	local02, local03 wz
12468     01 1E 66 A6 |  if_e	neg	local01, #1
1246c     A7 1E 62 FC | 	wrlong	local01, fp
12470     F8 01 90 FD | 	jmp	#LR__1473
12474                 | LR__1466
12474                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
12474     08 4E 05 F1 | 	add	fp, #8
12478     A7 1E 02 FB | 	rdlong	local01, fp
1247c     08 4E 85 F1 | 	sub	fp, #8
12480     1D 1E 0E F2 | 	cmp	local01, #29 wz
12484     14 4E 05 A1 |  if_e	add	fp, #20
12488     A7 22 02 AB |  if_e	rdlong	local03, fp
1248c     14 4E 85 A1 |  if_e	sub	fp, #20
12490     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12494     34 00 90 5D |  if_ne	jmp	#LR__1467
12498     00 1E 06 F6 | 	mov	local01, #0
1249c     A7 12 02 FB | 	rdlong	arg01, fp
124a0     9C FA B0 FD | 	call	#__system___float_fromuns
124a4     FD 12 02 F6 | 	mov	arg01, result1
124a8     0C 4E 05 F1 | 	add	fp, #12
124ac     A7 14 02 FB | 	rdlong	arg02, fp
124b0     0C 4E 85 F1 | 	sub	fp, #12
124b4     01 16 06 F6 | 	mov	arg03, #1
124b8     BC 02 B1 FD | 	call	#__system___float_cmp
124bc     00 FA 0D F2 | 	cmp	result1, #0 wz
124c0     00 1E 26 A6 |  if_e	not	local01, #0
124c4     A7 1E 62 FC | 	wrlong	local01, fp
124c8     A0 01 90 FD | 	jmp	#LR__1473
124cc                 | LR__1467
124cc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
124cc     08 4E 05 F1 | 	add	fp, #8
124d0     A7 1E 02 FB | 	rdlong	local01, fp
124d4     08 4E 85 F1 | 	sub	fp, #8
124d8     1D 1E 0E F2 | 	cmp	local01, #29 wz
124dc     14 4E 05 A1 |  if_e	add	fp, #20
124e0     A7 22 02 AB |  if_e	rdlong	local03, fp
124e4     14 4E 85 A1 |  if_e	sub	fp, #20
124e8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
124ec     24 00 90 5D |  if_ne	jmp	#LR__1468
124f0     00 1E 06 F6 | 	mov	local01, #0
124f4     A7 20 02 FB | 	rdlong	local02, fp
124f8     0C 4E 05 F1 | 	add	fp, #12
124fc     A7 22 02 FB | 	rdlong	local03, fp
12500     0C 4E 85 F1 | 	sub	fp, #12
12504     11 21 0A F2 | 	cmp	local02, local03 wz
12508     01 1E 66 A6 |  if_e	neg	local01, #1
1250c     A7 1E 62 FC | 	wrlong	local01, fp
12510     58 01 90 FD | 	jmp	#LR__1473
12514                 | LR__1468
12514                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
12514     08 4E 05 F1 | 	add	fp, #8
12518     A7 1E 02 FB | 	rdlong	local01, fp
1251c     08 4E 85 F1 | 	sub	fp, #8
12520     1D 1E 0E F2 | 	cmp	local01, #29 wz
12524     14 4E 05 A1 |  if_e	add	fp, #20
12528     A7 22 02 AB |  if_e	rdlong	local03, fp
1252c     14 4E 85 A1 |  if_e	sub	fp, #20
12530     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12534     24 00 90 5D |  if_ne	jmp	#LR__1469
12538     00 1E 06 F6 | 	mov	local01, #0
1253c     A7 20 02 FB | 	rdlong	local02, fp
12540     0C 4E 05 F1 | 	add	fp, #12
12544     A7 22 02 FB | 	rdlong	local03, fp
12548     0C 4E 85 F1 | 	sub	fp, #12
1254c     11 21 0A F2 | 	cmp	local02, local03 wz
12550     01 1E 66 A6 |  if_e	neg	local01, #1
12554     A7 1E 62 FC | 	wrlong	local01, fp
12558     10 01 90 FD | 	jmp	#LR__1473
1255c                 | LR__1469
1255c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
1255c     08 4E 05 F1 | 	add	fp, #8
12560     A7 1E 02 FB | 	rdlong	local01, fp
12564     08 4E 85 F1 | 	sub	fp, #8
12568     2B 1E 0E F2 | 	cmp	local01, #43 wz
1256c     14 4E 05 A1 |  if_e	add	fp, #20
12570     A7 22 02 AB |  if_e	rdlong	local03, fp
12574     14 4E 85 A1 |  if_e	sub	fp, #20
12578     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1257c     30 00 90 5D |  if_ne	jmp	#LR__1470
12580     00 1E 06 F6 | 	mov	local01, #0
12584     A7 12 02 FB | 	rdlong	arg01, fp
12588     04 D1 BF FD | 	call	#_convertstring
1258c     FD 12 02 F6 | 	mov	arg01, result1
12590     0C 4E 05 F1 | 	add	fp, #12
12594     A7 14 02 FB | 	rdlong	arg02, fp
12598     0C 4E 85 F1 | 	sub	fp, #12
1259c     84 D2 B0 FD | 	call	#__system___string_cmp
125a0     00 FA 0D F2 | 	cmp	result1, #0 wz
125a4     00 1E 26 A6 |  if_e	not	local01, #0
125a8     A7 1E 62 FC | 	wrlong	local01, fp
125ac     BC 00 90 FD | 	jmp	#LR__1473
125b0                 | LR__1470
125b0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
125b0     08 4E 05 F1 | 	add	fp, #8
125b4     A7 1E 02 FB | 	rdlong	local01, fp
125b8     08 4E 85 F1 | 	sub	fp, #8
125bc     1F 1E 0E F2 | 	cmp	local01, #31 wz
125c0     14 4E 05 A1 |  if_e	add	fp, #20
125c4     A7 22 02 AB |  if_e	rdlong	local03, fp
125c8     14 4E 85 A1 |  if_e	sub	fp, #20
125cc     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
125d0     34 00 90 5D |  if_ne	jmp	#LR__1471
125d4     00 1E 06 F6 | 	mov	local01, #0
125d8     A7 20 02 FB | 	rdlong	local02, fp
125dc     0C 4E 05 F1 | 	add	fp, #12
125e0     A7 12 02 FB | 	rdlong	arg01, fp
125e4     0C 4E 85 F1 | 	sub	fp, #12
125e8     A4 D0 BF FD | 	call	#_convertstring
125ec     FD 14 02 F6 | 	mov	arg02, result1
125f0     10 13 02 F6 | 	mov	arg01, local02
125f4     2C D2 B0 FD | 	call	#__system___string_cmp
125f8     00 FA 0D F2 | 	cmp	result1, #0 wz
125fc     00 1E 26 A6 |  if_e	not	local01, #0
12600     A7 1E 62 FC | 	wrlong	local01, fp
12604     64 00 90 FD | 	jmp	#LR__1473
12608                 | LR__1471
12608                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
12608     08 4E 05 F1 | 	add	fp, #8
1260c     A7 1E 02 FB | 	rdlong	local01, fp
12610     08 4E 85 F1 | 	sub	fp, #8
12614     2B 1E 0E F2 | 	cmp	local01, #43 wz
12618     14 4E 05 A1 |  if_e	add	fp, #20
1261c     A7 22 02 AB |  if_e	rdlong	local03, fp
12620     14 4E 85 A1 |  if_e	sub	fp, #20
12624     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12628     3C 00 90 5D |  if_ne	jmp	#LR__1472
1262c     00 1E 06 F6 | 	mov	local01, #0
12630     A7 12 02 FB | 	rdlong	arg01, fp
12634     58 D0 BF FD | 	call	#_convertstring
12638     FD 20 02 F6 | 	mov	local02, result1
1263c     0C 4E 05 F1 | 	add	fp, #12
12640     A7 12 02 FB | 	rdlong	arg01, fp
12644     0C 4E 85 F1 | 	sub	fp, #12
12648     44 D0 BF FD | 	call	#_convertstring
1264c     FD 14 02 F6 | 	mov	arg02, result1
12650     10 13 02 F6 | 	mov	arg01, local02
12654     CC D1 B0 FD | 	call	#__system___string_cmp
12658     00 FA 0D F2 | 	cmp	result1, #0 wz
1265c     00 1E 26 A6 |  if_e	not	local01, #0
12660     A7 1E 62 FC | 	wrlong	local01, fp
12664     04 00 90 FD | 	jmp	#LR__1473
12668                 | LR__1472
12668     A7 00 68 FC | 	wrlong	#0, fp
1266c                 | LR__1473
1266c     08 4E 05 F1 | 	add	fp, #8
12670     A7 38 68 FC | 	wrlong	#28, fp
12674     08 4E 85 F1 | 	sub	fp, #8
12678     A7 12 02 F6 | 	mov	arg01, fp
1267c     54 85 BF FD | 	call	#_push
12680     A7 F0 03 F6 | 	mov	ptra, fp
12684     B2 00 A0 FD | 	call	#popregs_
12688                 | _do_eq_ret
12688     2D 00 64 FD | 	ret
1268c                 | 
1268c                 | ' 
1268c                 | ' sub do_gt
1268c                 | _do_gt
1268c     05 4A 05 F6 | 	mov	COUNT_, #5
12690     A8 00 A0 FD | 	call	#pushregs_
12694     18 F0 07 F1 | 	add	ptra, #24
12698     A0 84 BF FD | 	call	#_pop
1269c     FD 1E 02 F6 | 	mov	local01, result1
126a0     FE 20 02 F6 | 	mov	local02, result2
126a4     FF 22 02 F6 | 	mov	local03, result3
126a8     0C 4E 05 F1 | 	add	fp, #12
126ac     A7 1E 62 FC | 	wrlong	local01, fp
126b0     04 4E 05 F1 | 	add	fp, #4
126b4     A7 20 62 FC | 	wrlong	local02, fp
126b8     04 4E 05 F1 | 	add	fp, #4
126bc     A7 22 62 FC | 	wrlong	local03, fp
126c0     14 4E 85 F1 | 	sub	fp, #20
126c4     74 84 BF FD | 	call	#_pop
126c8     FF 22 02 F6 | 	mov	local03, result3
126cc     A7 FA 61 FC | 	wrlong	result1, fp
126d0     04 4E 05 F1 | 	add	fp, #4
126d4     A7 FC 61 FC | 	wrlong	result2, fp
126d8     04 4E 05 F1 | 	add	fp, #4
126dc     A7 22 62 FC | 	wrlong	local03, fp
126e0                 | ' t2=pop()
126e0                 | ' t1=pop()
126e0                 | ' 
126e0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
126e0     08 4E 85 F1 | 	sub	fp, #8
126e4     1F 22 0E F2 | 	cmp	local03, #31 wz
126e8     14 4E 05 A1 |  if_e	add	fp, #20
126ec     A7 24 02 AB |  if_e	rdlong	local04, fp
126f0     14 4E 85 A1 |  if_e	sub	fp, #20
126f4     12 23 02 A6 |  if_e	mov	local03, local04
126f8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
126fc     28 00 90 5D |  if_ne	jmp	#LR__1480
12700     00 1E 06 F6 | 	mov	local01, #0
12704     A7 12 02 FB | 	rdlong	arg01, fp
12708     0C 4E 05 F1 | 	add	fp, #12
1270c     A7 14 02 FB | 	rdlong	arg02, fp
12710     0C 4E 85 F1 | 	sub	fp, #12
12714     0C D1 B0 FD | 	call	#__system___string_cmp
12718     01 FA 55 F2 | 	cmps	result1, #1 wc
1271c     00 1E 26 36 |  if_ae	not	local01, #0
12720     A7 1E 62 FC | 	wrlong	local01, fp
12724     1C 04 90 FD | 	jmp	#LR__1493
12728                 | LR__1480
12728                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
12728     08 4E 05 F1 | 	add	fp, #8
1272c     A7 1E 02 FB | 	rdlong	local01, fp
12730     08 4E 85 F1 | 	sub	fp, #8
12734     1E 1E 0E F2 | 	cmp	local01, #30 wz
12738     14 4E 05 A1 |  if_e	add	fp, #20
1273c     A7 24 02 AB |  if_e	rdlong	local04, fp
12740     14 4E 85 A1 |  if_e	sub	fp, #20
12744     12 23 02 A6 |  if_e	mov	local03, local04
12748     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1274c     2C 00 90 5D |  if_ne	jmp	#LR__1481
12750     00 1E 06 F6 | 	mov	local01, #0
12754     A7 12 02 FB | 	rdlong	arg01, fp
12758     0C 4E 05 F1 | 	add	fp, #12
1275c     A7 14 02 FB | 	rdlong	arg02, fp
12760     0C 4E 85 F1 | 	sub	fp, #12
12764     01 16 66 F6 | 	neg	arg03, #1
12768     0C 00 B1 FD | 	call	#__system___float_cmp
1276c     01 FA 55 F2 | 	cmps	result1, #1 wc
12770     00 1E 26 36 |  if_ae	not	local01, #0
12774     A7 1E 62 FC | 	wrlong	local01, fp
12778     C8 03 90 FD | 	jmp	#LR__1493
1277c                 | LR__1481
1277c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
1277c     08 4E 05 F1 | 	add	fp, #8
12780     A7 1E 02 FB | 	rdlong	local01, fp
12784     08 4E 85 F1 | 	sub	fp, #8
12788     1E 1E 0E F2 | 	cmp	local01, #30 wz
1278c     14 4E 05 A1 |  if_e	add	fp, #20
12790     A7 24 02 AB |  if_e	rdlong	local04, fp
12794     14 4E 85 A1 |  if_e	sub	fp, #20
12798     12 23 02 A6 |  if_e	mov	local03, local04
1279c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
127a0     48 00 90 5D |  if_ne	jmp	#LR__1482
127a4     00 1E 06 F6 | 	mov	local01, #0
127a8     A7 20 02 FB | 	rdlong	local02, fp
127ac     0C 4E 05 F1 | 	add	fp, #12
127b0     A7 12 02 FB | 	rdlong	arg01, fp
127b4     0C 4E 85 F1 | 	sub	fp, #12
127b8     09 13 52 F6 | 	abs	arg01, arg01 wc
127bc     1F 26 C6 C9 |  if_b	decod	local05, #31
127c0     00 26 06 36 |  if_ae	mov	local05, #0
127c4     78 F7 B0 FD | 	call	#__system___float_fromuns
127c8     13 FB 61 F5 | 	xor	result1, local05
127cc     FD 14 02 F6 | 	mov	arg02, result1
127d0     10 13 02 F6 | 	mov	arg01, local02
127d4     01 16 66 F6 | 	neg	arg03, #1
127d8     9C FF B0 FD | 	call	#__system___float_cmp
127dc     01 FA 55 F2 | 	cmps	result1, #1 wc
127e0     00 1E 26 36 |  if_ae	not	local01, #0
127e4     A7 1E 62 FC | 	wrlong	local01, fp
127e8     58 03 90 FD | 	jmp	#LR__1493
127ec                 | LR__1482
127ec                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
127ec     08 4E 05 F1 | 	add	fp, #8
127f0     A7 1E 02 FB | 	rdlong	local01, fp
127f4     08 4E 85 F1 | 	sub	fp, #8
127f8     1E 1E 0E F2 | 	cmp	local01, #30 wz
127fc     14 4E 05 A1 |  if_e	add	fp, #20
12800     A7 24 02 AB |  if_e	rdlong	local04, fp
12804     14 4E 85 A1 |  if_e	sub	fp, #20
12808     12 23 02 A6 |  if_e	mov	local03, local04
1280c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12810     38 00 90 5D |  if_ne	jmp	#LR__1483
12814     00 1E 06 F6 | 	mov	local01, #0
12818     A7 20 02 FB | 	rdlong	local02, fp
1281c     0C 4E 05 F1 | 	add	fp, #12
12820     A7 12 02 FB | 	rdlong	arg01, fp
12824     0C 4E 85 F1 | 	sub	fp, #12
12828     14 F7 B0 FD | 	call	#__system___float_fromuns
1282c     FD 14 02 F6 | 	mov	arg02, result1
12830     10 13 02 F6 | 	mov	arg01, local02
12834     01 16 66 F6 | 	neg	arg03, #1
12838     3C FF B0 FD | 	call	#__system___float_cmp
1283c     01 FA 55 F2 | 	cmps	result1, #1 wc
12840     00 1E 26 36 |  if_ae	not	local01, #0
12844     A7 1E 62 FC | 	wrlong	local01, fp
12848     F8 02 90 FD | 	jmp	#LR__1493
1284c                 | LR__1483
1284c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
1284c     08 4E 05 F1 | 	add	fp, #8
12850     A7 1E 02 FB | 	rdlong	local01, fp
12854     08 4E 85 F1 | 	sub	fp, #8
12858     1C 1E 0E F2 | 	cmp	local01, #28 wz
1285c     14 4E 05 A1 |  if_e	add	fp, #20
12860     A7 24 02 AB |  if_e	rdlong	local04, fp
12864     14 4E 85 A1 |  if_e	sub	fp, #20
12868     12 23 02 A6 |  if_e	mov	local03, local04
1286c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12870     44 00 90 5D |  if_ne	jmp	#LR__1484
12874     00 1E 06 F6 | 	mov	local01, #0
12878     A7 12 02 FB | 	rdlong	arg01, fp
1287c     09 13 52 F6 | 	abs	arg01, arg01 wc
12880     1F 26 C6 C9 |  if_b	decod	local05, #31
12884     00 26 06 36 |  if_ae	mov	local05, #0
12888     B4 F6 B0 FD | 	call	#__system___float_fromuns
1288c     13 FB 61 F5 | 	xor	result1, local05
12890     FD 12 02 F6 | 	mov	arg01, result1
12894     0C 4E 05 F1 | 	add	fp, #12
12898     A7 14 02 FB | 	rdlong	arg02, fp
1289c     0C 4E 85 F1 | 	sub	fp, #12
128a0     01 16 66 F6 | 	neg	arg03, #1
128a4     D0 FE B0 FD | 	call	#__system___float_cmp
128a8     01 FA 55 F2 | 	cmps	result1, #1 wc
128ac     00 1E 26 36 |  if_ae	not	local01, #0
128b0     A7 1E 62 FC | 	wrlong	local01, fp
128b4     8C 02 90 FD | 	jmp	#LR__1493
128b8                 | LR__1484
128b8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
128b8     08 4E 05 F1 | 	add	fp, #8
128bc     A7 1E 02 FB | 	rdlong	local01, fp
128c0     08 4E 85 F1 | 	sub	fp, #8
128c4     1C 1E 0E F2 | 	cmp	local01, #28 wz
128c8     14 4E 05 A1 |  if_e	add	fp, #20
128cc     A7 24 02 AB |  if_e	rdlong	local04, fp
128d0     14 4E 85 A1 |  if_e	sub	fp, #20
128d4     12 23 02 A6 |  if_e	mov	local03, local04
128d8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
128dc     24 00 90 5D |  if_ne	jmp	#LR__1485
128e0     00 1E 06 F6 | 	mov	local01, #0
128e4     A7 20 02 FB | 	rdlong	local02, fp
128e8     0C 4E 05 F1 | 	add	fp, #12
128ec     A7 22 02 FB | 	rdlong	local03, fp
128f0     0C 4E 85 F1 | 	sub	fp, #12
128f4     11 21 5A F2 | 	cmps	local02, local03 wcz
128f8     01 1E 66 16 |  if_a	neg	local01, #1
128fc     A7 1E 62 FC | 	wrlong	local01, fp
12900     40 02 90 FD | 	jmp	#LR__1493
12904                 | LR__1485
12904                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
12904     08 4E 05 F1 | 	add	fp, #8
12908     A7 1E 02 FB | 	rdlong	local01, fp
1290c     08 4E 85 F1 | 	sub	fp, #8
12910     1C 1E 0E F2 | 	cmp	local01, #28 wz
12914     14 4E 05 A1 |  if_e	add	fp, #20
12918     A7 24 02 AB |  if_e	rdlong	local04, fp
1291c     14 4E 85 A1 |  if_e	sub	fp, #20
12920     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
12924     24 00 90 5D |  if_ne	jmp	#LR__1486
12928     00 1E 06 F6 | 	mov	local01, #0
1292c     A7 20 02 FB | 	rdlong	local02, fp
12930     0C 4E 05 F1 | 	add	fp, #12
12934     A7 22 02 FB | 	rdlong	local03, fp
12938     0C 4E 85 F1 | 	sub	fp, #12
1293c     11 21 5A F2 | 	cmps	local02, local03 wcz
12940     01 1E 66 16 |  if_a	neg	local01, #1
12944     A7 1E 62 FC | 	wrlong	local01, fp
12948     F8 01 90 FD | 	jmp	#LR__1493
1294c                 | LR__1486
1294c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
1294c     08 4E 05 F1 | 	add	fp, #8
12950     A7 1E 02 FB | 	rdlong	local01, fp
12954     08 4E 85 F1 | 	sub	fp, #8
12958     1D 1E 0E F2 | 	cmp	local01, #29 wz
1295c     14 4E 05 A1 |  if_e	add	fp, #20
12960     A7 22 02 AB |  if_e	rdlong	local03, fp
12964     14 4E 85 A1 |  if_e	sub	fp, #20
12968     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1296c     34 00 90 5D |  if_ne	jmp	#LR__1487
12970     00 1E 06 F6 | 	mov	local01, #0
12974     A7 12 02 FB | 	rdlong	arg01, fp
12978     C4 F5 B0 FD | 	call	#__system___float_fromuns
1297c     FD 12 02 F6 | 	mov	arg01, result1
12980     0C 4E 05 F1 | 	add	fp, #12
12984     A7 14 02 FB | 	rdlong	arg02, fp
12988     0C 4E 85 F1 | 	sub	fp, #12
1298c     01 16 66 F6 | 	neg	arg03, #1
12990     E4 FD B0 FD | 	call	#__system___float_cmp
12994     01 FA 55 F2 | 	cmps	result1, #1 wc
12998     00 1E 26 36 |  if_ae	not	local01, #0
1299c     A7 1E 62 FC | 	wrlong	local01, fp
129a0     A0 01 90 FD | 	jmp	#LR__1493
129a4                 | LR__1487
129a4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
129a4     08 4E 05 F1 | 	add	fp, #8
129a8     A7 1E 02 FB | 	rdlong	local01, fp
129ac     08 4E 85 F1 | 	sub	fp, #8
129b0     1D 1E 0E F2 | 	cmp	local01, #29 wz
129b4     14 4E 05 A1 |  if_e	add	fp, #20
129b8     A7 22 02 AB |  if_e	rdlong	local03, fp
129bc     14 4E 85 A1 |  if_e	sub	fp, #20
129c0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
129c4     24 00 90 5D |  if_ne	jmp	#LR__1488
129c8     00 1E 06 F6 | 	mov	local01, #0
129cc     A7 20 02 FB | 	rdlong	local02, fp
129d0     0C 4E 05 F1 | 	add	fp, #12
129d4     A7 22 02 FB | 	rdlong	local03, fp
129d8     0C 4E 85 F1 | 	sub	fp, #12
129dc     11 21 5A F2 | 	cmps	local02, local03 wcz
129e0     01 1E 66 16 |  if_a	neg	local01, #1
129e4     A7 1E 62 FC | 	wrlong	local01, fp
129e8     58 01 90 FD | 	jmp	#LR__1493
129ec                 | LR__1488
129ec                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
129ec     08 4E 05 F1 | 	add	fp, #8
129f0     A7 1E 02 FB | 	rdlong	local01, fp
129f4     08 4E 85 F1 | 	sub	fp, #8
129f8     1D 1E 0E F2 | 	cmp	local01, #29 wz
129fc     14 4E 05 A1 |  if_e	add	fp, #20
12a00     A7 22 02 AB |  if_e	rdlong	local03, fp
12a04     14 4E 85 A1 |  if_e	sub	fp, #20
12a08     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12a0c     24 00 90 5D |  if_ne	jmp	#LR__1489
12a10     00 1E 06 F6 | 	mov	local01, #0
12a14     A7 20 02 FB | 	rdlong	local02, fp
12a18     0C 4E 05 F1 | 	add	fp, #12
12a1c     A7 22 02 FB | 	rdlong	local03, fp
12a20     0C 4E 85 F1 | 	sub	fp, #12
12a24     11 21 1A F2 | 	cmp	local02, local03 wcz
12a28     01 1E 66 16 |  if_a	neg	local01, #1
12a2c     A7 1E 62 FC | 	wrlong	local01, fp
12a30     10 01 90 FD | 	jmp	#LR__1493
12a34                 | LR__1489
12a34                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
12a34     08 4E 05 F1 | 	add	fp, #8
12a38     A7 1E 02 FB | 	rdlong	local01, fp
12a3c     08 4E 85 F1 | 	sub	fp, #8
12a40     2B 1E 0E F2 | 	cmp	local01, #43 wz
12a44     14 4E 05 A1 |  if_e	add	fp, #20
12a48     A7 22 02 AB |  if_e	rdlong	local03, fp
12a4c     14 4E 85 A1 |  if_e	sub	fp, #20
12a50     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12a54     30 00 90 5D |  if_ne	jmp	#LR__1490
12a58     00 1E 06 F6 | 	mov	local01, #0
12a5c     A7 12 02 FB | 	rdlong	arg01, fp
12a60     2C CC BF FD | 	call	#_convertstring
12a64     FD 12 02 F6 | 	mov	arg01, result1
12a68     0C 4E 05 F1 | 	add	fp, #12
12a6c     A7 14 02 FB | 	rdlong	arg02, fp
12a70     0C 4E 85 F1 | 	sub	fp, #12
12a74     AC CD B0 FD | 	call	#__system___string_cmp
12a78     01 FA 55 F2 | 	cmps	result1, #1 wc
12a7c     00 1E 26 36 |  if_ae	not	local01, #0
12a80     A7 1E 62 FC | 	wrlong	local01, fp
12a84     BC 00 90 FD | 	jmp	#LR__1493
12a88                 | LR__1490
12a88                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
12a88     08 4E 05 F1 | 	add	fp, #8
12a8c     A7 1E 02 FB | 	rdlong	local01, fp
12a90     08 4E 85 F1 | 	sub	fp, #8
12a94     1F 1E 0E F2 | 	cmp	local01, #31 wz
12a98     14 4E 05 A1 |  if_e	add	fp, #20
12a9c     A7 22 02 AB |  if_e	rdlong	local03, fp
12aa0     14 4E 85 A1 |  if_e	sub	fp, #20
12aa4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12aa8     34 00 90 5D |  if_ne	jmp	#LR__1491
12aac     00 1E 06 F6 | 	mov	local01, #0
12ab0     A7 20 02 FB | 	rdlong	local02, fp
12ab4     0C 4E 05 F1 | 	add	fp, #12
12ab8     A7 12 02 FB | 	rdlong	arg01, fp
12abc     0C 4E 85 F1 | 	sub	fp, #12
12ac0     CC CB BF FD | 	call	#_convertstring
12ac4     FD 14 02 F6 | 	mov	arg02, result1
12ac8     10 13 02 F6 | 	mov	arg01, local02
12acc     54 CD B0 FD | 	call	#__system___string_cmp
12ad0     01 FA 55 F2 | 	cmps	result1, #1 wc
12ad4     00 1E 26 36 |  if_ae	not	local01, #0
12ad8     A7 1E 62 FC | 	wrlong	local01, fp
12adc     64 00 90 FD | 	jmp	#LR__1493
12ae0                 | LR__1491
12ae0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
12ae0     08 4E 05 F1 | 	add	fp, #8
12ae4     A7 1E 02 FB | 	rdlong	local01, fp
12ae8     08 4E 85 F1 | 	sub	fp, #8
12aec     2B 1E 0E F2 | 	cmp	local01, #43 wz
12af0     14 4E 05 A1 |  if_e	add	fp, #20
12af4     A7 22 02 AB |  if_e	rdlong	local03, fp
12af8     14 4E 85 A1 |  if_e	sub	fp, #20
12afc     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12b00     3C 00 90 5D |  if_ne	jmp	#LR__1492
12b04     00 1E 06 F6 | 	mov	local01, #0
12b08     A7 12 02 FB | 	rdlong	arg01, fp
12b0c     80 CB BF FD | 	call	#_convertstring
12b10     FD 20 02 F6 | 	mov	local02, result1
12b14     0C 4E 05 F1 | 	add	fp, #12
12b18     A7 12 02 FB | 	rdlong	arg01, fp
12b1c     0C 4E 85 F1 | 	sub	fp, #12
12b20     6C CB BF FD | 	call	#_convertstring
12b24     FD 14 02 F6 | 	mov	arg02, result1
12b28     10 13 02 F6 | 	mov	arg01, local02
12b2c     F4 CC B0 FD | 	call	#__system___string_cmp
12b30     01 FA 55 F2 | 	cmps	result1, #1 wc
12b34     00 1E 26 36 |  if_ae	not	local01, #0
12b38     A7 1E 62 FC | 	wrlong	local01, fp
12b3c     04 00 90 FD | 	jmp	#LR__1493
12b40                 | LR__1492
12b40     A7 00 68 FC | 	wrlong	#0, fp
12b44                 | LR__1493
12b44     08 4E 05 F1 | 	add	fp, #8
12b48     A7 38 68 FC | 	wrlong	#28, fp
12b4c     08 4E 85 F1 | 	sub	fp, #8
12b50     A7 12 02 F6 | 	mov	arg01, fp
12b54     7C 80 BF FD | 	call	#_push
12b58     A7 F0 03 F6 | 	mov	ptra, fp
12b5c     B2 00 A0 FD | 	call	#popregs_
12b60                 | _do_gt_ret
12b60     2D 00 64 FD | 	ret
12b64                 | 
12b64                 | ' 
12b64                 | ' sub do_lt
12b64                 | _do_lt
12b64     05 4A 05 F6 | 	mov	COUNT_, #5
12b68     A8 00 A0 FD | 	call	#pushregs_
12b6c     18 F0 07 F1 | 	add	ptra, #24
12b70     C8 7F BF FD | 	call	#_pop
12b74     FD 1E 02 F6 | 	mov	local01, result1
12b78     FE 20 02 F6 | 	mov	local02, result2
12b7c     FF 22 02 F6 | 	mov	local03, result3
12b80     0C 4E 05 F1 | 	add	fp, #12
12b84     A7 1E 62 FC | 	wrlong	local01, fp
12b88     04 4E 05 F1 | 	add	fp, #4
12b8c     A7 20 62 FC | 	wrlong	local02, fp
12b90     04 4E 05 F1 | 	add	fp, #4
12b94     A7 22 62 FC | 	wrlong	local03, fp
12b98     14 4E 85 F1 | 	sub	fp, #20
12b9c     9C 7F BF FD | 	call	#_pop
12ba0     FF 22 02 F6 | 	mov	local03, result3
12ba4     A7 FA 61 FC | 	wrlong	result1, fp
12ba8     04 4E 05 F1 | 	add	fp, #4
12bac     A7 FC 61 FC | 	wrlong	result2, fp
12bb0     04 4E 05 F1 | 	add	fp, #4
12bb4     A7 22 62 FC | 	wrlong	local03, fp
12bb8                 | ' t2=pop()
12bb8                 | ' t1=pop()
12bb8                 | ' 
12bb8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
12bb8     08 4E 85 F1 | 	sub	fp, #8
12bbc     1F 22 0E F2 | 	cmp	local03, #31 wz
12bc0     14 4E 05 A1 |  if_e	add	fp, #20
12bc4     A7 24 02 AB |  if_e	rdlong	local04, fp
12bc8     14 4E 85 A1 |  if_e	sub	fp, #20
12bcc     12 23 02 A6 |  if_e	mov	local03, local04
12bd0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12bd4     28 00 90 5D |  if_ne	jmp	#LR__1500
12bd8     00 1E 06 F6 | 	mov	local01, #0
12bdc     A7 12 02 FB | 	rdlong	arg01, fp
12be0     0C 4E 05 F1 | 	add	fp, #12
12be4     A7 14 02 FB | 	rdlong	arg02, fp
12be8     0C 4E 85 F1 | 	sub	fp, #12
12bec     34 CC B0 FD | 	call	#__system___string_cmp
12bf0     00 FA 55 F2 | 	cmps	result1, #0 wc
12bf4     00 1E 26 C6 |  if_b	not	local01, #0
12bf8     A7 1E 62 FC | 	wrlong	local01, fp
12bfc     0C 04 90 FD | 	jmp	#LR__1513
12c00                 | LR__1500
12c00                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
12c00     08 4E 05 F1 | 	add	fp, #8
12c04     A7 1E 02 FB | 	rdlong	local01, fp
12c08     08 4E 85 F1 | 	sub	fp, #8
12c0c     1E 1E 0E F2 | 	cmp	local01, #30 wz
12c10     14 4E 05 A1 |  if_e	add	fp, #20
12c14     A7 24 02 AB |  if_e	rdlong	local04, fp
12c18     14 4E 85 A1 |  if_e	sub	fp, #20
12c1c     12 23 02 A6 |  if_e	mov	local03, local04
12c20     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12c24     2C 00 90 5D |  if_ne	jmp	#LR__1501
12c28     00 1E 06 F6 | 	mov	local01, #0
12c2c     A7 12 02 FB | 	rdlong	arg01, fp
12c30     0C 4E 05 F1 | 	add	fp, #12
12c34     A7 14 02 FB | 	rdlong	arg02, fp
12c38     0C 4E 85 F1 | 	sub	fp, #12
12c3c     01 16 06 F6 | 	mov	arg03, #1
12c40     34 FB B0 FD | 	call	#__system___float_cmp
12c44     00 FA 55 F2 | 	cmps	result1, #0 wc
12c48     00 1E 26 C6 |  if_b	not	local01, #0
12c4c     A7 1E 62 FC | 	wrlong	local01, fp
12c50     B8 03 90 FD | 	jmp	#LR__1513
12c54                 | LR__1501
12c54                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
12c54     08 4E 05 F1 | 	add	fp, #8
12c58     A7 1E 02 FB | 	rdlong	local01, fp
12c5c     08 4E 85 F1 | 	sub	fp, #8
12c60     1E 1E 0E F2 | 	cmp	local01, #30 wz
12c64     14 4E 05 A1 |  if_e	add	fp, #20
12c68     A7 24 02 AB |  if_e	rdlong	local04, fp
12c6c     14 4E 85 A1 |  if_e	sub	fp, #20
12c70     12 23 02 A6 |  if_e	mov	local03, local04
12c74     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12c78     48 00 90 5D |  if_ne	jmp	#LR__1502
12c7c     00 1E 06 F6 | 	mov	local01, #0
12c80     A7 20 02 FB | 	rdlong	local02, fp
12c84     0C 4E 05 F1 | 	add	fp, #12
12c88     A7 12 02 FB | 	rdlong	arg01, fp
12c8c     0C 4E 85 F1 | 	sub	fp, #12
12c90     09 13 52 F6 | 	abs	arg01, arg01 wc
12c94     1F 26 C6 C9 |  if_b	decod	local05, #31
12c98     00 26 06 36 |  if_ae	mov	local05, #0
12c9c     A0 F2 B0 FD | 	call	#__system___float_fromuns
12ca0     13 FB 61 F5 | 	xor	result1, local05
12ca4     FD 14 02 F6 | 	mov	arg02, result1
12ca8     10 13 02 F6 | 	mov	arg01, local02
12cac     01 16 06 F6 | 	mov	arg03, #1
12cb0     C4 FA B0 FD | 	call	#__system___float_cmp
12cb4     00 FA 55 F2 | 	cmps	result1, #0 wc
12cb8     00 1E 26 C6 |  if_b	not	local01, #0
12cbc     A7 1E 62 FC | 	wrlong	local01, fp
12cc0     48 03 90 FD | 	jmp	#LR__1513
12cc4                 | LR__1502
12cc4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
12cc4     08 4E 05 F1 | 	add	fp, #8
12cc8     A7 1E 02 FB | 	rdlong	local01, fp
12ccc     08 4E 85 F1 | 	sub	fp, #8
12cd0     1E 1E 0E F2 | 	cmp	local01, #30 wz
12cd4     14 4E 05 A1 |  if_e	add	fp, #20
12cd8     A7 24 02 AB |  if_e	rdlong	local04, fp
12cdc     14 4E 85 A1 |  if_e	sub	fp, #20
12ce0     12 23 02 A6 |  if_e	mov	local03, local04
12ce4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12ce8     38 00 90 5D |  if_ne	jmp	#LR__1503
12cec     00 1E 06 F6 | 	mov	local01, #0
12cf0     A7 20 02 FB | 	rdlong	local02, fp
12cf4     0C 4E 05 F1 | 	add	fp, #12
12cf8     A7 12 02 FB | 	rdlong	arg01, fp
12cfc     0C 4E 85 F1 | 	sub	fp, #12
12d00     3C F2 B0 FD | 	call	#__system___float_fromuns
12d04     FD 14 02 F6 | 	mov	arg02, result1
12d08     10 13 02 F6 | 	mov	arg01, local02
12d0c     01 16 06 F6 | 	mov	arg03, #1
12d10     64 FA B0 FD | 	call	#__system___float_cmp
12d14     00 FA 55 F2 | 	cmps	result1, #0 wc
12d18     00 1E 26 C6 |  if_b	not	local01, #0
12d1c     A7 1E 62 FC | 	wrlong	local01, fp
12d20     E8 02 90 FD | 	jmp	#LR__1513
12d24                 | LR__1503
12d24                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
12d24     08 4E 05 F1 | 	add	fp, #8
12d28     A7 1E 02 FB | 	rdlong	local01, fp
12d2c     08 4E 85 F1 | 	sub	fp, #8
12d30     1C 1E 0E F2 | 	cmp	local01, #28 wz
12d34     14 4E 05 A1 |  if_e	add	fp, #20
12d38     A7 24 02 AB |  if_e	rdlong	local04, fp
12d3c     14 4E 85 A1 |  if_e	sub	fp, #20
12d40     12 23 02 A6 |  if_e	mov	local03, local04
12d44     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12d48     44 00 90 5D |  if_ne	jmp	#LR__1504
12d4c     00 1E 06 F6 | 	mov	local01, #0
12d50     A7 12 02 FB | 	rdlong	arg01, fp
12d54     09 13 52 F6 | 	abs	arg01, arg01 wc
12d58     1F 26 C6 C9 |  if_b	decod	local05, #31
12d5c     00 26 06 36 |  if_ae	mov	local05, #0
12d60     DC F1 B0 FD | 	call	#__system___float_fromuns
12d64     13 FB 61 F5 | 	xor	result1, local05
12d68     FD 12 02 F6 | 	mov	arg01, result1
12d6c     0C 4E 05 F1 | 	add	fp, #12
12d70     A7 14 02 FB | 	rdlong	arg02, fp
12d74     0C 4E 85 F1 | 	sub	fp, #12
12d78     01 16 06 F6 | 	mov	arg03, #1
12d7c     F8 F9 B0 FD | 	call	#__system___float_cmp
12d80     00 FA 55 F2 | 	cmps	result1, #0 wc
12d84     00 1E 26 C6 |  if_b	not	local01, #0
12d88     A7 1E 62 FC | 	wrlong	local01, fp
12d8c     7C 02 90 FD | 	jmp	#LR__1513
12d90                 | LR__1504
12d90                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
12d90     08 4E 05 F1 | 	add	fp, #8
12d94     A7 1E 02 FB | 	rdlong	local01, fp
12d98     08 4E 85 F1 | 	sub	fp, #8
12d9c     1C 1E 0E F2 | 	cmp	local01, #28 wz
12da0     14 4E 05 A1 |  if_e	add	fp, #20
12da4     A7 24 02 AB |  if_e	rdlong	local04, fp
12da8     14 4E 85 A1 |  if_e	sub	fp, #20
12dac     12 23 02 A6 |  if_e	mov	local03, local04
12db0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12db4     20 00 90 5D |  if_ne	jmp	#LR__1505
12db8     A7 20 02 FB | 	rdlong	local02, fp
12dbc     0C 4E 05 F1 | 	add	fp, #12
12dc0     A7 22 02 FB | 	rdlong	local03, fp
12dc4     0C 4E 85 F1 | 	sub	fp, #12
12dc8     11 21 52 F2 | 	cmps	local02, local03 wc
12dcc     0F 1F A2 F1 | 	subx	local01, local01
12dd0     A7 1E 62 FC | 	wrlong	local01, fp
12dd4     34 02 90 FD | 	jmp	#LR__1513
12dd8                 | LR__1505
12dd8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
12dd8     08 4E 05 F1 | 	add	fp, #8
12ddc     A7 1E 02 FB | 	rdlong	local01, fp
12de0     08 4E 85 F1 | 	sub	fp, #8
12de4     1C 1E 0E F2 | 	cmp	local01, #28 wz
12de8     14 4E 05 A1 |  if_e	add	fp, #20
12dec     A7 24 02 AB |  if_e	rdlong	local04, fp
12df0     14 4E 85 A1 |  if_e	sub	fp, #20
12df4     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
12df8     20 00 90 5D |  if_ne	jmp	#LR__1506
12dfc     A7 20 02 FB | 	rdlong	local02, fp
12e00     0C 4E 05 F1 | 	add	fp, #12
12e04     A7 22 02 FB | 	rdlong	local03, fp
12e08     0C 4E 85 F1 | 	sub	fp, #12
12e0c     11 21 52 F2 | 	cmps	local02, local03 wc
12e10     0F 1F A2 F1 | 	subx	local01, local01
12e14     A7 1E 62 FC | 	wrlong	local01, fp
12e18     F0 01 90 FD | 	jmp	#LR__1513
12e1c                 | LR__1506
12e1c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
12e1c     08 4E 05 F1 | 	add	fp, #8
12e20     A7 1E 02 FB | 	rdlong	local01, fp
12e24     08 4E 85 F1 | 	sub	fp, #8
12e28     1D 1E 0E F2 | 	cmp	local01, #29 wz
12e2c     14 4E 05 A1 |  if_e	add	fp, #20
12e30     A7 22 02 AB |  if_e	rdlong	local03, fp
12e34     14 4E 85 A1 |  if_e	sub	fp, #20
12e38     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12e3c     34 00 90 5D |  if_ne	jmp	#LR__1507
12e40     00 1E 06 F6 | 	mov	local01, #0
12e44     A7 12 02 FB | 	rdlong	arg01, fp
12e48     F4 F0 B0 FD | 	call	#__system___float_fromuns
12e4c     FD 12 02 F6 | 	mov	arg01, result1
12e50     0C 4E 05 F1 | 	add	fp, #12
12e54     A7 14 02 FB | 	rdlong	arg02, fp
12e58     0C 4E 85 F1 | 	sub	fp, #12
12e5c     01 16 06 F6 | 	mov	arg03, #1
12e60     14 F9 B0 FD | 	call	#__system___float_cmp
12e64     00 FA 55 F2 | 	cmps	result1, #0 wc
12e68     00 1E 26 C6 |  if_b	not	local01, #0
12e6c     A7 1E 62 FC | 	wrlong	local01, fp
12e70     98 01 90 FD | 	jmp	#LR__1513
12e74                 | LR__1507
12e74                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
12e74     08 4E 05 F1 | 	add	fp, #8
12e78     A7 1E 02 FB | 	rdlong	local01, fp
12e7c     08 4E 85 F1 | 	sub	fp, #8
12e80     1D 1E 0E F2 | 	cmp	local01, #29 wz
12e84     14 4E 05 A1 |  if_e	add	fp, #20
12e88     A7 22 02 AB |  if_e	rdlong	local03, fp
12e8c     14 4E 85 A1 |  if_e	sub	fp, #20
12e90     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12e94     20 00 90 5D |  if_ne	jmp	#LR__1508
12e98     A7 20 02 FB | 	rdlong	local02, fp
12e9c     0C 4E 05 F1 | 	add	fp, #12
12ea0     A7 22 02 FB | 	rdlong	local03, fp
12ea4     0C 4E 85 F1 | 	sub	fp, #12
12ea8     11 21 52 F2 | 	cmps	local02, local03 wc
12eac     0F 1F A2 F1 | 	subx	local01, local01
12eb0     A7 1E 62 FC | 	wrlong	local01, fp
12eb4     54 01 90 FD | 	jmp	#LR__1513
12eb8                 | LR__1508
12eb8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
12eb8     08 4E 05 F1 | 	add	fp, #8
12ebc     A7 1E 02 FB | 	rdlong	local01, fp
12ec0     08 4E 85 F1 | 	sub	fp, #8
12ec4     1D 1E 0E F2 | 	cmp	local01, #29 wz
12ec8     14 4E 05 A1 |  if_e	add	fp, #20
12ecc     A7 22 02 AB |  if_e	rdlong	local03, fp
12ed0     14 4E 85 A1 |  if_e	sub	fp, #20
12ed4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12ed8     20 00 90 5D |  if_ne	jmp	#LR__1509
12edc     A7 20 02 FB | 	rdlong	local02, fp
12ee0     0C 4E 05 F1 | 	add	fp, #12
12ee4     A7 22 02 FB | 	rdlong	local03, fp
12ee8     0C 4E 85 F1 | 	sub	fp, #12
12eec     11 21 12 F2 | 	cmp	local02, local03 wc
12ef0     0F 1F A2 F1 | 	subx	local01, local01
12ef4     A7 1E 62 FC | 	wrlong	local01, fp
12ef8     10 01 90 FD | 	jmp	#LR__1513
12efc                 | LR__1509
12efc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
12efc     08 4E 05 F1 | 	add	fp, #8
12f00     A7 1E 02 FB | 	rdlong	local01, fp
12f04     08 4E 85 F1 | 	sub	fp, #8
12f08     2B 1E 0E F2 | 	cmp	local01, #43 wz
12f0c     14 4E 05 A1 |  if_e	add	fp, #20
12f10     A7 22 02 AB |  if_e	rdlong	local03, fp
12f14     14 4E 85 A1 |  if_e	sub	fp, #20
12f18     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12f1c     30 00 90 5D |  if_ne	jmp	#LR__1510
12f20     00 1E 06 F6 | 	mov	local01, #0
12f24     A7 12 02 FB | 	rdlong	arg01, fp
12f28     64 C7 BF FD | 	call	#_convertstring
12f2c     FD 12 02 F6 | 	mov	arg01, result1
12f30     0C 4E 05 F1 | 	add	fp, #12
12f34     A7 14 02 FB | 	rdlong	arg02, fp
12f38     0C 4E 85 F1 | 	sub	fp, #12
12f3c     E4 C8 B0 FD | 	call	#__system___string_cmp
12f40     00 FA 55 F2 | 	cmps	result1, #0 wc
12f44     00 1E 26 C6 |  if_b	not	local01, #0
12f48     A7 1E 62 FC | 	wrlong	local01, fp
12f4c     BC 00 90 FD | 	jmp	#LR__1513
12f50                 | LR__1510
12f50                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
12f50     08 4E 05 F1 | 	add	fp, #8
12f54     A7 1E 02 FB | 	rdlong	local01, fp
12f58     08 4E 85 F1 | 	sub	fp, #8
12f5c     1F 1E 0E F2 | 	cmp	local01, #31 wz
12f60     14 4E 05 A1 |  if_e	add	fp, #20
12f64     A7 22 02 AB |  if_e	rdlong	local03, fp
12f68     14 4E 85 A1 |  if_e	sub	fp, #20
12f6c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12f70     34 00 90 5D |  if_ne	jmp	#LR__1511
12f74     00 1E 06 F6 | 	mov	local01, #0
12f78     A7 20 02 FB | 	rdlong	local02, fp
12f7c     0C 4E 05 F1 | 	add	fp, #12
12f80     A7 12 02 FB | 	rdlong	arg01, fp
12f84     0C 4E 85 F1 | 	sub	fp, #12
12f88     04 C7 BF FD | 	call	#_convertstring
12f8c     FD 14 02 F6 | 	mov	arg02, result1
12f90     10 13 02 F6 | 	mov	arg01, local02
12f94     8C C8 B0 FD | 	call	#__system___string_cmp
12f98     00 FA 55 F2 | 	cmps	result1, #0 wc
12f9c     00 1E 26 C6 |  if_b	not	local01, #0
12fa0     A7 1E 62 FC | 	wrlong	local01, fp
12fa4     64 00 90 FD | 	jmp	#LR__1513
12fa8                 | LR__1511
12fa8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
12fa8     08 4E 05 F1 | 	add	fp, #8
12fac     A7 1E 02 FB | 	rdlong	local01, fp
12fb0     08 4E 85 F1 | 	sub	fp, #8
12fb4     2B 1E 0E F2 | 	cmp	local01, #43 wz
12fb8     14 4E 05 A1 |  if_e	add	fp, #20
12fbc     A7 22 02 AB |  if_e	rdlong	local03, fp
12fc0     14 4E 85 A1 |  if_e	sub	fp, #20
12fc4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12fc8     3C 00 90 5D |  if_ne	jmp	#LR__1512
12fcc     00 1E 06 F6 | 	mov	local01, #0
12fd0     A7 12 02 FB | 	rdlong	arg01, fp
12fd4     B8 C6 BF FD | 	call	#_convertstring
12fd8     FD 20 02 F6 | 	mov	local02, result1
12fdc     0C 4E 05 F1 | 	add	fp, #12
12fe0     A7 12 02 FB | 	rdlong	arg01, fp
12fe4     0C 4E 85 F1 | 	sub	fp, #12
12fe8     A4 C6 BF FD | 	call	#_convertstring
12fec     FD 14 02 F6 | 	mov	arg02, result1
12ff0     10 13 02 F6 | 	mov	arg01, local02
12ff4     2C C8 B0 FD | 	call	#__system___string_cmp
12ff8     00 FA 55 F2 | 	cmps	result1, #0 wc
12ffc     00 1E 26 C6 |  if_b	not	local01, #0
13000     A7 1E 62 FC | 	wrlong	local01, fp
13004     04 00 90 FD | 	jmp	#LR__1513
13008                 | LR__1512
13008     A7 00 68 FC | 	wrlong	#0, fp
1300c                 | LR__1513
1300c     08 4E 05 F1 | 	add	fp, #8
13010     A7 38 68 FC | 	wrlong	#28, fp
13014     08 4E 85 F1 | 	sub	fp, #8
13018     A7 12 02 F6 | 	mov	arg01, fp
1301c     B4 7B BF FD | 	call	#_push
13020     A7 F0 03 F6 | 	mov	ptra, fp
13024     B2 00 A0 FD | 	call	#popregs_
13028                 | _do_lt_ret
13028     2D 00 64 FD | 	ret
1302c                 | 
1302c                 | ' 
1302c                 | ' sub do_ge
1302c                 | _do_ge
1302c     05 4A 05 F6 | 	mov	COUNT_, #5
13030     A8 00 A0 FD | 	call	#pushregs_
13034     18 F0 07 F1 | 	add	ptra, #24
13038     00 7B BF FD | 	call	#_pop
1303c     FD 1E 02 F6 | 	mov	local01, result1
13040     FE 20 02 F6 | 	mov	local02, result2
13044     FF 22 02 F6 | 	mov	local03, result3
13048     0C 4E 05 F1 | 	add	fp, #12
1304c     A7 1E 62 FC | 	wrlong	local01, fp
13050     04 4E 05 F1 | 	add	fp, #4
13054     A7 20 62 FC | 	wrlong	local02, fp
13058     04 4E 05 F1 | 	add	fp, #4
1305c     A7 22 62 FC | 	wrlong	local03, fp
13060     14 4E 85 F1 | 	sub	fp, #20
13064     D4 7A BF FD | 	call	#_pop
13068     FF 22 02 F6 | 	mov	local03, result3
1306c     A7 FA 61 FC | 	wrlong	result1, fp
13070     04 4E 05 F1 | 	add	fp, #4
13074     A7 FC 61 FC | 	wrlong	result2, fp
13078     04 4E 05 F1 | 	add	fp, #4
1307c     A7 22 62 FC | 	wrlong	local03, fp
13080                 | ' t2=pop()
13080                 | ' t1=pop()
13080                 | ' 
13080                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
13080     08 4E 85 F1 | 	sub	fp, #8
13084     1F 22 0E F2 | 	cmp	local03, #31 wz
13088     14 4E 05 A1 |  if_e	add	fp, #20
1308c     A7 24 02 AB |  if_e	rdlong	local04, fp
13090     14 4E 85 A1 |  if_e	sub	fp, #20
13094     12 23 02 A6 |  if_e	mov	local03, local04
13098     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1309c     28 00 90 5D |  if_ne	jmp	#LR__1520
130a0     00 1E 06 F6 | 	mov	local01, #0
130a4     A7 12 02 FB | 	rdlong	arg01, fp
130a8     0C 4E 05 F1 | 	add	fp, #12
130ac     A7 14 02 FB | 	rdlong	arg02, fp
130b0     0C 4E 85 F1 | 	sub	fp, #12
130b4     6C C7 B0 FD | 	call	#__system___string_cmp
130b8     00 FA 55 F2 | 	cmps	result1, #0 wc
130bc     00 1E 26 36 |  if_ae	not	local01, #0
130c0     A7 1E 62 FC | 	wrlong	local01, fp
130c4     1C 04 90 FD | 	jmp	#LR__1533
130c8                 | LR__1520
130c8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
130c8     08 4E 05 F1 | 	add	fp, #8
130cc     A7 1E 02 FB | 	rdlong	local01, fp
130d0     08 4E 85 F1 | 	sub	fp, #8
130d4     1E 1E 0E F2 | 	cmp	local01, #30 wz
130d8     14 4E 05 A1 |  if_e	add	fp, #20
130dc     A7 24 02 AB |  if_e	rdlong	local04, fp
130e0     14 4E 85 A1 |  if_e	sub	fp, #20
130e4     12 23 02 A6 |  if_e	mov	local03, local04
130e8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
130ec     2C 00 90 5D |  if_ne	jmp	#LR__1521
130f0     00 1E 06 F6 | 	mov	local01, #0
130f4     A7 12 02 FB | 	rdlong	arg01, fp
130f8     0C 4E 05 F1 | 	add	fp, #12
130fc     A7 14 02 FB | 	rdlong	arg02, fp
13100     0C 4E 85 F1 | 	sub	fp, #12
13104     01 16 66 F6 | 	neg	arg03, #1
13108     6C F6 B0 FD | 	call	#__system___float_cmp
1310c     00 FA 55 F2 | 	cmps	result1, #0 wc
13110     00 1E 26 36 |  if_ae	not	local01, #0
13114     A7 1E 62 FC | 	wrlong	local01, fp
13118     C8 03 90 FD | 	jmp	#LR__1533
1311c                 | LR__1521
1311c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
1311c     08 4E 05 F1 | 	add	fp, #8
13120     A7 1E 02 FB | 	rdlong	local01, fp
13124     08 4E 85 F1 | 	sub	fp, #8
13128     1E 1E 0E F2 | 	cmp	local01, #30 wz
1312c     14 4E 05 A1 |  if_e	add	fp, #20
13130     A7 24 02 AB |  if_e	rdlong	local04, fp
13134     14 4E 85 A1 |  if_e	sub	fp, #20
13138     12 23 02 A6 |  if_e	mov	local03, local04
1313c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
13140     48 00 90 5D |  if_ne	jmp	#LR__1522
13144     00 1E 06 F6 | 	mov	local01, #0
13148     A7 20 02 FB | 	rdlong	local02, fp
1314c     0C 4E 05 F1 | 	add	fp, #12
13150     A7 12 02 FB | 	rdlong	arg01, fp
13154     0C 4E 85 F1 | 	sub	fp, #12
13158     09 13 52 F6 | 	abs	arg01, arg01 wc
1315c     1F 26 C6 C9 |  if_b	decod	local05, #31
13160     00 26 06 36 |  if_ae	mov	local05, #0
13164     D8 ED B0 FD | 	call	#__system___float_fromuns
13168     13 FB 61 F5 | 	xor	result1, local05
1316c     FD 14 02 F6 | 	mov	arg02, result1
13170     10 13 02 F6 | 	mov	arg01, local02
13174     01 16 66 F6 | 	neg	arg03, #1
13178     FC F5 B0 FD | 	call	#__system___float_cmp
1317c     00 FA 55 F2 | 	cmps	result1, #0 wc
13180     00 1E 26 36 |  if_ae	not	local01, #0
13184     A7 1E 62 FC | 	wrlong	local01, fp
13188     58 03 90 FD | 	jmp	#LR__1533
1318c                 | LR__1522
1318c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
1318c     08 4E 05 F1 | 	add	fp, #8
13190     A7 1E 02 FB | 	rdlong	local01, fp
13194     08 4E 85 F1 | 	sub	fp, #8
13198     1E 1E 0E F2 | 	cmp	local01, #30 wz
1319c     14 4E 05 A1 |  if_e	add	fp, #20
131a0     A7 24 02 AB |  if_e	rdlong	local04, fp
131a4     14 4E 85 A1 |  if_e	sub	fp, #20
131a8     12 23 02 A6 |  if_e	mov	local03, local04
131ac     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
131b0     38 00 90 5D |  if_ne	jmp	#LR__1523
131b4     00 1E 06 F6 | 	mov	local01, #0
131b8     A7 20 02 FB | 	rdlong	local02, fp
131bc     0C 4E 05 F1 | 	add	fp, #12
131c0     A7 12 02 FB | 	rdlong	arg01, fp
131c4     0C 4E 85 F1 | 	sub	fp, #12
131c8     74 ED B0 FD | 	call	#__system___float_fromuns
131cc     FD 14 02 F6 | 	mov	arg02, result1
131d0     10 13 02 F6 | 	mov	arg01, local02
131d4     01 16 66 F6 | 	neg	arg03, #1
131d8     9C F5 B0 FD | 	call	#__system___float_cmp
131dc     00 FA 55 F2 | 	cmps	result1, #0 wc
131e0     00 1E 26 36 |  if_ae	not	local01, #0
131e4     A7 1E 62 FC | 	wrlong	local01, fp
131e8     F8 02 90 FD | 	jmp	#LR__1533
131ec                 | LR__1523
131ec                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
131ec     08 4E 05 F1 | 	add	fp, #8
131f0     A7 1E 02 FB | 	rdlong	local01, fp
131f4     08 4E 85 F1 | 	sub	fp, #8
131f8     1C 1E 0E F2 | 	cmp	local01, #28 wz
131fc     14 4E 05 A1 |  if_e	add	fp, #20
13200     A7 24 02 AB |  if_e	rdlong	local04, fp
13204     14 4E 85 A1 |  if_e	sub	fp, #20
13208     12 23 02 A6 |  if_e	mov	local03, local04
1320c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
13210     44 00 90 5D |  if_ne	jmp	#LR__1524
13214     00 1E 06 F6 | 	mov	local01, #0
13218     A7 12 02 FB | 	rdlong	arg01, fp
1321c     09 13 52 F6 | 	abs	arg01, arg01 wc
13220     1F 26 C6 C9 |  if_b	decod	local05, #31
13224     00 26 06 36 |  if_ae	mov	local05, #0
13228     14 ED B0 FD | 	call	#__system___float_fromuns
1322c     13 FB 61 F5 | 	xor	result1, local05
13230     FD 12 02 F6 | 	mov	arg01, result1
13234     0C 4E 05 F1 | 	add	fp, #12
13238     A7 14 02 FB | 	rdlong	arg02, fp
1323c     0C 4E 85 F1 | 	sub	fp, #12
13240     01 16 66 F6 | 	neg	arg03, #1
13244     30 F5 B0 FD | 	call	#__system___float_cmp
13248     00 FA 55 F2 | 	cmps	result1, #0 wc
1324c     00 1E 26 36 |  if_ae	not	local01, #0
13250     A7 1E 62 FC | 	wrlong	local01, fp
13254     8C 02 90 FD | 	jmp	#LR__1533
13258                 | LR__1524
13258                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
13258     08 4E 05 F1 | 	add	fp, #8
1325c     A7 1E 02 FB | 	rdlong	local01, fp
13260     08 4E 85 F1 | 	sub	fp, #8
13264     1C 1E 0E F2 | 	cmp	local01, #28 wz
13268     14 4E 05 A1 |  if_e	add	fp, #20
1326c     A7 24 02 AB |  if_e	rdlong	local04, fp
13270     14 4E 85 A1 |  if_e	sub	fp, #20
13274     12 23 02 A6 |  if_e	mov	local03, local04
13278     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1327c     24 00 90 5D |  if_ne	jmp	#LR__1525
13280     00 1E 06 F6 | 	mov	local01, #0
13284     A7 20 02 FB | 	rdlong	local02, fp
13288     0C 4E 05 F1 | 	add	fp, #12
1328c     A7 22 02 FB | 	rdlong	local03, fp
13290     0C 4E 85 F1 | 	sub	fp, #12
13294     11 21 52 F2 | 	cmps	local02, local03 wc
13298     01 1E 66 36 |  if_ae	neg	local01, #1
1329c     A7 1E 62 FC | 	wrlong	local01, fp
132a0     40 02 90 FD | 	jmp	#LR__1533
132a4                 | LR__1525
132a4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
132a4     08 4E 05 F1 | 	add	fp, #8
132a8     A7 1E 02 FB | 	rdlong	local01, fp
132ac     08 4E 85 F1 | 	sub	fp, #8
132b0     1C 1E 0E F2 | 	cmp	local01, #28 wz
132b4     14 4E 05 A1 |  if_e	add	fp, #20
132b8     A7 24 02 AB |  if_e	rdlong	local04, fp
132bc     14 4E 85 A1 |  if_e	sub	fp, #20
132c0     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
132c4     24 00 90 5D |  if_ne	jmp	#LR__1526
132c8     00 1E 06 F6 | 	mov	local01, #0
132cc     A7 20 02 FB | 	rdlong	local02, fp
132d0     0C 4E 05 F1 | 	add	fp, #12
132d4     A7 22 02 FB | 	rdlong	local03, fp
132d8     0C 4E 85 F1 | 	sub	fp, #12
132dc     11 21 52 F2 | 	cmps	local02, local03 wc
132e0     01 1E 66 36 |  if_ae	neg	local01, #1
132e4     A7 1E 62 FC | 	wrlong	local01, fp
132e8     F8 01 90 FD | 	jmp	#LR__1533
132ec                 | LR__1526
132ec                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
132ec     08 4E 05 F1 | 	add	fp, #8
132f0     A7 1E 02 FB | 	rdlong	local01, fp
132f4     08 4E 85 F1 | 	sub	fp, #8
132f8     1D 1E 0E F2 | 	cmp	local01, #29 wz
132fc     14 4E 05 A1 |  if_e	add	fp, #20
13300     A7 22 02 AB |  if_e	rdlong	local03, fp
13304     14 4E 85 A1 |  if_e	sub	fp, #20
13308     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1330c     34 00 90 5D |  if_ne	jmp	#LR__1527
13310     00 1E 06 F6 | 	mov	local01, #0
13314     A7 12 02 FB | 	rdlong	arg01, fp
13318     24 EC B0 FD | 	call	#__system___float_fromuns
1331c     FD 12 02 F6 | 	mov	arg01, result1
13320     0C 4E 05 F1 | 	add	fp, #12
13324     A7 14 02 FB | 	rdlong	arg02, fp
13328     0C 4E 85 F1 | 	sub	fp, #12
1332c     01 16 66 F6 | 	neg	arg03, #1
13330     44 F4 B0 FD | 	call	#__system___float_cmp
13334     00 FA 55 F2 | 	cmps	result1, #0 wc
13338     00 1E 26 36 |  if_ae	not	local01, #0
1333c     A7 1E 62 FC | 	wrlong	local01, fp
13340     A0 01 90 FD | 	jmp	#LR__1533
13344                 | LR__1527
13344                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
13344     08 4E 05 F1 | 	add	fp, #8
13348     A7 1E 02 FB | 	rdlong	local01, fp
1334c     08 4E 85 F1 | 	sub	fp, #8
13350     1D 1E 0E F2 | 	cmp	local01, #29 wz
13354     14 4E 05 A1 |  if_e	add	fp, #20
13358     A7 22 02 AB |  if_e	rdlong	local03, fp
1335c     14 4E 85 A1 |  if_e	sub	fp, #20
13360     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
13364     24 00 90 5D |  if_ne	jmp	#LR__1528
13368     00 1E 06 F6 | 	mov	local01, #0
1336c     A7 20 02 FB | 	rdlong	local02, fp
13370     0C 4E 05 F1 | 	add	fp, #12
13374     A7 22 02 FB | 	rdlong	local03, fp
13378     0C 4E 85 F1 | 	sub	fp, #12
1337c     11 21 52 F2 | 	cmps	local02, local03 wc
13380     01 1E 66 36 |  if_ae	neg	local01, #1
13384     A7 1E 62 FC | 	wrlong	local01, fp
13388     58 01 90 FD | 	jmp	#LR__1533
1338c                 | LR__1528
1338c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
1338c     08 4E 05 F1 | 	add	fp, #8
13390     A7 1E 02 FB | 	rdlong	local01, fp
13394     08 4E 85 F1 | 	sub	fp, #8
13398     1D 1E 0E F2 | 	cmp	local01, #29 wz
1339c     14 4E 05 A1 |  if_e	add	fp, #20
133a0     A7 22 02 AB |  if_e	rdlong	local03, fp
133a4     14 4E 85 A1 |  if_e	sub	fp, #20
133a8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
133ac     24 00 90 5D |  if_ne	jmp	#LR__1529
133b0     00 1E 06 F6 | 	mov	local01, #0
133b4     A7 20 02 FB | 	rdlong	local02, fp
133b8     0C 4E 05 F1 | 	add	fp, #12
133bc     A7 22 02 FB | 	rdlong	local03, fp
133c0     0C 4E 85 F1 | 	sub	fp, #12
133c4     11 21 12 F2 | 	cmp	local02, local03 wc
133c8     01 1E 66 36 |  if_ae	neg	local01, #1
133cc     A7 1E 62 FC | 	wrlong	local01, fp
133d0     10 01 90 FD | 	jmp	#LR__1533
133d4                 | LR__1529
133d4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
133d4     08 4E 05 F1 | 	add	fp, #8
133d8     A7 1E 02 FB | 	rdlong	local01, fp
133dc     08 4E 85 F1 | 	sub	fp, #8
133e0     2B 1E 0E F2 | 	cmp	local01, #43 wz
133e4     14 4E 05 A1 |  if_e	add	fp, #20
133e8     A7 22 02 AB |  if_e	rdlong	local03, fp
133ec     14 4E 85 A1 |  if_e	sub	fp, #20
133f0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
133f4     30 00 90 5D |  if_ne	jmp	#LR__1530
133f8     00 1E 06 F6 | 	mov	local01, #0
133fc     A7 12 02 FB | 	rdlong	arg01, fp
13400     8C C2 BF FD | 	call	#_convertstring
13404     FD 12 02 F6 | 	mov	arg01, result1
13408     0C 4E 05 F1 | 	add	fp, #12
1340c     A7 14 02 FB | 	rdlong	arg02, fp
13410     0C 4E 85 F1 | 	sub	fp, #12
13414     0C C4 B0 FD | 	call	#__system___string_cmp
13418     00 FA 55 F2 | 	cmps	result1, #0 wc
1341c     00 1E 26 36 |  if_ae	not	local01, #0
13420     A7 1E 62 FC | 	wrlong	local01, fp
13424     BC 00 90 FD | 	jmp	#LR__1533
13428                 | LR__1530
13428                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
13428     08 4E 05 F1 | 	add	fp, #8
1342c     A7 1E 02 FB | 	rdlong	local01, fp
13430     08 4E 85 F1 | 	sub	fp, #8
13434     1F 1E 0E F2 | 	cmp	local01, #31 wz
13438     14 4E 05 A1 |  if_e	add	fp, #20
1343c     A7 22 02 AB |  if_e	rdlong	local03, fp
13440     14 4E 85 A1 |  if_e	sub	fp, #20
13444     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
13448     34 00 90 5D |  if_ne	jmp	#LR__1531
1344c     00 1E 06 F6 | 	mov	local01, #0
13450     A7 20 02 FB | 	rdlong	local02, fp
13454     0C 4E 05 F1 | 	add	fp, #12
13458     A7 12 02 FB | 	rdlong	arg01, fp
1345c     0C 4E 85 F1 | 	sub	fp, #12
13460     2C C2 BF FD | 	call	#_convertstring
13464     FD 14 02 F6 | 	mov	arg02, result1
13468     10 13 02 F6 | 	mov	arg01, local02
1346c     B4 C3 B0 FD | 	call	#__system___string_cmp
13470     00 FA 55 F2 | 	cmps	result1, #0 wc
13474     00 1E 26 36 |  if_ae	not	local01, #0
13478     A7 1E 62 FC | 	wrlong	local01, fp
1347c     64 00 90 FD | 	jmp	#LR__1533
13480                 | LR__1531
13480                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
13480     08 4E 05 F1 | 	add	fp, #8
13484     A7 1E 02 FB | 	rdlong	local01, fp
13488     08 4E 85 F1 | 	sub	fp, #8
1348c     2B 1E 0E F2 | 	cmp	local01, #43 wz
13490     14 4E 05 A1 |  if_e	add	fp, #20
13494     A7 22 02 AB |  if_e	rdlong	local03, fp
13498     14 4E 85 A1 |  if_e	sub	fp, #20
1349c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
134a0     3C 00 90 5D |  if_ne	jmp	#LR__1532
134a4     00 1E 06 F6 | 	mov	local01, #0
134a8     A7 12 02 FB | 	rdlong	arg01, fp
134ac     E0 C1 BF FD | 	call	#_convertstring
134b0     FD 20 02 F6 | 	mov	local02, result1
134b4     0C 4E 05 F1 | 	add	fp, #12
134b8     A7 12 02 FB | 	rdlong	arg01, fp
134bc     0C 4E 85 F1 | 	sub	fp, #12
134c0     CC C1 BF FD | 	call	#_convertstring
134c4     FD 14 02 F6 | 	mov	arg02, result1
134c8     10 13 02 F6 | 	mov	arg01, local02
134cc     54 C3 B0 FD | 	call	#__system___string_cmp
134d0     00 FA 55 F2 | 	cmps	result1, #0 wc
134d4     00 1E 26 36 |  if_ae	not	local01, #0
134d8     A7 1E 62 FC | 	wrlong	local01, fp
134dc     04 00 90 FD | 	jmp	#LR__1533
134e0                 | LR__1532
134e0     A7 00 68 FC | 	wrlong	#0, fp
134e4                 | LR__1533
134e4     08 4E 05 F1 | 	add	fp, #8
134e8     A7 38 68 FC | 	wrlong	#28, fp
134ec     08 4E 85 F1 | 	sub	fp, #8
134f0     A7 12 02 F6 | 	mov	arg01, fp
134f4     DC 76 BF FD | 	call	#_push
134f8     A7 F0 03 F6 | 	mov	ptra, fp
134fc     B2 00 A0 FD | 	call	#popregs_
13500                 | _do_ge_ret
13500     2D 00 64 FD | 	ret
13504                 | 
13504                 | ' 
13504                 | ' sub do_le
13504                 | _do_le
13504     05 4A 05 F6 | 	mov	COUNT_, #5
13508     A8 00 A0 FD | 	call	#pushregs_
1350c     18 F0 07 F1 | 	add	ptra, #24
13510     28 76 BF FD | 	call	#_pop
13514     FD 1E 02 F6 | 	mov	local01, result1
13518     FE 20 02 F6 | 	mov	local02, result2
1351c     FF 22 02 F6 | 	mov	local03, result3
13520     0C 4E 05 F1 | 	add	fp, #12
13524     A7 1E 62 FC | 	wrlong	local01, fp
13528     04 4E 05 F1 | 	add	fp, #4
1352c     A7 20 62 FC | 	wrlong	local02, fp
13530     04 4E 05 F1 | 	add	fp, #4
13534     A7 22 62 FC | 	wrlong	local03, fp
13538     14 4E 85 F1 | 	sub	fp, #20
1353c     FC 75 BF FD | 	call	#_pop
13540     FF 22 02 F6 | 	mov	local03, result3
13544     A7 FA 61 FC | 	wrlong	result1, fp
13548     04 4E 05 F1 | 	add	fp, #4
1354c     A7 FC 61 FC | 	wrlong	result2, fp
13550     04 4E 05 F1 | 	add	fp, #4
13554     A7 22 62 FC | 	wrlong	local03, fp
13558                 | ' t2=pop()
13558                 | ' t1=pop()
13558                 | ' 
13558                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
13558     08 4E 85 F1 | 	sub	fp, #8
1355c     1F 22 0E F2 | 	cmp	local03, #31 wz
13560     14 4E 05 A1 |  if_e	add	fp, #20
13564     A7 24 02 AB |  if_e	rdlong	local04, fp
13568     14 4E 85 A1 |  if_e	sub	fp, #20
1356c     12 23 02 A6 |  if_e	mov	local03, local04
13570     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
13574     28 00 90 5D |  if_ne	jmp	#LR__1540
13578     00 1E 06 F6 | 	mov	local01, #0
1357c     A7 12 02 FB | 	rdlong	arg01, fp
13580     0C 4E 05 F1 | 	add	fp, #12
13584     A7 14 02 FB | 	rdlong	arg02, fp
13588     0C 4E 85 F1 | 	sub	fp, #12
1358c     94 C2 B0 FD | 	call	#__system___string_cmp
13590     01 FA 55 F2 | 	cmps	result1, #1 wc
13594     00 1E 26 C6 |  if_b	not	local01, #0
13598     A7 1E 62 FC | 	wrlong	local01, fp
1359c     1C 04 90 FD | 	jmp	#LR__1553
135a0                 | LR__1540
135a0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
135a0     08 4E 05 F1 | 	add	fp, #8
135a4     A7 1E 02 FB | 	rdlong	local01, fp
135a8     08 4E 85 F1 | 	sub	fp, #8
135ac     1E 1E 0E F2 | 	cmp	local01, #30 wz
135b0     14 4E 05 A1 |  if_e	add	fp, #20
135b4     A7 24 02 AB |  if_e	rdlong	local04, fp
135b8     14 4E 85 A1 |  if_e	sub	fp, #20
135bc     12 23 02 A6 |  if_e	mov	local03, local04
135c0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
135c4     2C 00 90 5D |  if_ne	jmp	#LR__1541
135c8     00 1E 06 F6 | 	mov	local01, #0
135cc     A7 12 02 FB | 	rdlong	arg01, fp
135d0     0C 4E 05 F1 | 	add	fp, #12
135d4     A7 14 02 FB | 	rdlong	arg02, fp
135d8     0C 4E 85 F1 | 	sub	fp, #12
135dc     01 16 06 F6 | 	mov	arg03, #1
135e0     94 F1 B0 FD | 	call	#__system___float_cmp
135e4     01 FA 55 F2 | 	cmps	result1, #1 wc
135e8     00 1E 26 C6 |  if_b	not	local01, #0
135ec     A7 1E 62 FC | 	wrlong	local01, fp
135f0     C8 03 90 FD | 	jmp	#LR__1553
135f4                 | LR__1541
135f4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
135f4     08 4E 05 F1 | 	add	fp, #8
135f8     A7 1E 02 FB | 	rdlong	local01, fp
135fc     08 4E 85 F1 | 	sub	fp, #8
13600     1E 1E 0E F2 | 	cmp	local01, #30 wz
13604     14 4E 05 A1 |  if_e	add	fp, #20
13608     A7 24 02 AB |  if_e	rdlong	local04, fp
1360c     14 4E 85 A1 |  if_e	sub	fp, #20
13610     12 23 02 A6 |  if_e	mov	local03, local04
13614     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
13618     48 00 90 5D |  if_ne	jmp	#LR__1542
1361c     00 1E 06 F6 | 	mov	local01, #0
13620     A7 20 02 FB | 	rdlong	local02, fp
13624     0C 4E 05 F1 | 	add	fp, #12
13628     A7 12 02 FB | 	rdlong	arg01, fp
1362c     0C 4E 85 F1 | 	sub	fp, #12
13630     09 13 52 F6 | 	abs	arg01, arg01 wc
13634     1F 26 C6 C9 |  if_b	decod	local05, #31
13638     00 26 06 36 |  if_ae	mov	local05, #0
1363c     00 E9 B0 FD | 	call	#__system___float_fromuns
13640     13 FB 61 F5 | 	xor	result1, local05
13644     FD 14 02 F6 | 	mov	arg02, result1
13648     10 13 02 F6 | 	mov	arg01, local02
1364c     01 16 06 F6 | 	mov	arg03, #1
13650     24 F1 B0 FD | 	call	#__system___float_cmp
13654     01 FA 55 F2 | 	cmps	result1, #1 wc
13658     00 1E 26 C6 |  if_b	not	local01, #0
1365c     A7 1E 62 FC | 	wrlong	local01, fp
13660     58 03 90 FD | 	jmp	#LR__1553
13664                 | LR__1542
13664                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
13664     08 4E 05 F1 | 	add	fp, #8
13668     A7 1E 02 FB | 	rdlong	local01, fp
1366c     08 4E 85 F1 | 	sub	fp, #8
13670     1E 1E 0E F2 | 	cmp	local01, #30 wz
13674     14 4E 05 A1 |  if_e	add	fp, #20
13678     A7 24 02 AB |  if_e	rdlong	local04, fp
1367c     14 4E 85 A1 |  if_e	sub	fp, #20
13680     12 23 02 A6 |  if_e	mov	local03, local04
13684     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
13688     38 00 90 5D |  if_ne	jmp	#LR__1543
1368c     00 1E 06 F6 | 	mov	local01, #0
13690     A7 20 02 FB | 	rdlong	local02, fp
13694     0C 4E 05 F1 | 	add	fp, #12
13698     A7 12 02 FB | 	rdlong	arg01, fp
1369c     0C 4E 85 F1 | 	sub	fp, #12
136a0     9C E8 B0 FD | 	call	#__system___float_fromuns
136a4     FD 14 02 F6 | 	mov	arg02, result1
136a8     10 13 02 F6 | 	mov	arg01, local02
136ac     01 16 06 F6 | 	mov	arg03, #1
136b0     C4 F0 B0 FD | 	call	#__system___float_cmp
136b4     01 FA 55 F2 | 	cmps	result1, #1 wc
136b8     00 1E 26 C6 |  if_b	not	local01, #0
136bc     A7 1E 62 FC | 	wrlong	local01, fp
136c0     F8 02 90 FD | 	jmp	#LR__1553
136c4                 | LR__1543
136c4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
136c4     08 4E 05 F1 | 	add	fp, #8
136c8     A7 1E 02 FB | 	rdlong	local01, fp
136cc     08 4E 85 F1 | 	sub	fp, #8
136d0     1C 1E 0E F2 | 	cmp	local01, #28 wz
136d4     14 4E 05 A1 |  if_e	add	fp, #20
136d8     A7 24 02 AB |  if_e	rdlong	local04, fp
136dc     14 4E 85 A1 |  if_e	sub	fp, #20
136e0     12 23 02 A6 |  if_e	mov	local03, local04
136e4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
136e8     44 00 90 5D |  if_ne	jmp	#LR__1544
136ec     00 1E 06 F6 | 	mov	local01, #0
136f0     A7 12 02 FB | 	rdlong	arg01, fp
136f4     09 13 52 F6 | 	abs	arg01, arg01 wc
136f8     1F 26 C6 C9 |  if_b	decod	local05, #31
136fc     00 26 06 36 |  if_ae	mov	local05, #0
13700     3C E8 B0 FD | 	call	#__system___float_fromuns
13704     13 FB 61 F5 | 	xor	result1, local05
13708     FD 12 02 F6 | 	mov	arg01, result1
1370c     0C 4E 05 F1 | 	add	fp, #12
13710     A7 14 02 FB | 	rdlong	arg02, fp
13714     0C 4E 85 F1 | 	sub	fp, #12
13718     01 16 06 F6 | 	mov	arg03, #1
1371c     58 F0 B0 FD | 	call	#__system___float_cmp
13720     01 FA 55 F2 | 	cmps	result1, #1 wc
13724     00 1E 26 C6 |  if_b	not	local01, #0
13728     A7 1E 62 FC | 	wrlong	local01, fp
1372c     8C 02 90 FD | 	jmp	#LR__1553
13730                 | LR__1544
13730                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
13730     08 4E 05 F1 | 	add	fp, #8
13734     A7 1E 02 FB | 	rdlong	local01, fp
13738     08 4E 85 F1 | 	sub	fp, #8
1373c     1C 1E 0E F2 | 	cmp	local01, #28 wz
13740     14 4E 05 A1 |  if_e	add	fp, #20
13744     A7 24 02 AB |  if_e	rdlong	local04, fp
13748     14 4E 85 A1 |  if_e	sub	fp, #20
1374c     12 23 02 A6 |  if_e	mov	local03, local04
13750     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
13754     24 00 90 5D |  if_ne	jmp	#LR__1545
13758     00 1E 06 F6 | 	mov	local01, #0
1375c     A7 20 02 FB | 	rdlong	local02, fp
13760     0C 4E 05 F1 | 	add	fp, #12
13764     A7 22 02 FB | 	rdlong	local03, fp
13768     0C 4E 85 F1 | 	sub	fp, #12
1376c     11 21 5A F2 | 	cmps	local02, local03 wcz
13770     01 1E 66 E6 |  if_be	neg	local01, #1
13774     A7 1E 62 FC | 	wrlong	local01, fp
13778     40 02 90 FD | 	jmp	#LR__1553
1377c                 | LR__1545
1377c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
1377c     08 4E 05 F1 | 	add	fp, #8
13780     A7 1E 02 FB | 	rdlong	local01, fp
13784     08 4E 85 F1 | 	sub	fp, #8
13788     1C 1E 0E F2 | 	cmp	local01, #28 wz
1378c     14 4E 05 A1 |  if_e	add	fp, #20
13790     A7 24 02 AB |  if_e	rdlong	local04, fp
13794     14 4E 85 A1 |  if_e	sub	fp, #20
13798     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
1379c     24 00 90 5D |  if_ne	jmp	#LR__1546
137a0     00 1E 06 F6 | 	mov	local01, #0
137a4     A7 20 02 FB | 	rdlong	local02, fp
137a8     0C 4E 05 F1 | 	add	fp, #12
137ac     A7 22 02 FB | 	rdlong	local03, fp
137b0     0C 4E 85 F1 | 	sub	fp, #12
137b4     11 21 5A F2 | 	cmps	local02, local03 wcz
137b8     01 1E 66 E6 |  if_be	neg	local01, #1
137bc     A7 1E 62 FC | 	wrlong	local01, fp
137c0     F8 01 90 FD | 	jmp	#LR__1553
137c4                 | LR__1546
137c4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
137c4     08 4E 05 F1 | 	add	fp, #8
137c8     A7 1E 02 FB | 	rdlong	local01, fp
137cc     08 4E 85 F1 | 	sub	fp, #8
137d0     1D 1E 0E F2 | 	cmp	local01, #29 wz
137d4     14 4E 05 A1 |  if_e	add	fp, #20
137d8     A7 22 02 AB |  if_e	rdlong	local03, fp
137dc     14 4E 85 A1 |  if_e	sub	fp, #20
137e0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
137e4     34 00 90 5D |  if_ne	jmp	#LR__1547
137e8     00 1E 06 F6 | 	mov	local01, #0
137ec     A7 12 02 FB | 	rdlong	arg01, fp
137f0     4C E7 B0 FD | 	call	#__system___float_fromuns
137f4     FD 12 02 F6 | 	mov	arg01, result1
137f8     0C 4E 05 F1 | 	add	fp, #12
137fc     A7 14 02 FB | 	rdlong	arg02, fp
13800     0C 4E 85 F1 | 	sub	fp, #12
13804     01 16 06 F6 | 	mov	arg03, #1
13808     6C EF B0 FD | 	call	#__system___float_cmp
1380c     01 FA 55 F2 | 	cmps	result1, #1 wc
13810     00 1E 26 C6 |  if_b	not	local01, #0
13814     A7 1E 62 FC | 	wrlong	local01, fp
13818     A0 01 90 FD | 	jmp	#LR__1553
1381c                 | LR__1547
1381c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
1381c     08 4E 05 F1 | 	add	fp, #8
13820     A7 1E 02 FB | 	rdlong	local01, fp
13824     08 4E 85 F1 | 	sub	fp, #8
13828     1D 1E 0E F2 | 	cmp	local01, #29 wz
1382c     14 4E 05 A1 |  if_e	add	fp, #20
13830     A7 22 02 AB |  if_e	rdlong	local03, fp
13834     14 4E 85 A1 |  if_e	sub	fp, #20
13838     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1383c     24 00 90 5D |  if_ne	jmp	#LR__1548
13840     00 1E 06 F6 | 	mov	local01, #0
13844     A7 20 02 FB | 	rdlong	local02, fp
13848     0C 4E 05 F1 | 	add	fp, #12
1384c     A7 22 02 FB | 	rdlong	local03, fp
13850     0C 4E 85 F1 | 	sub	fp, #12
13854     11 21 5A F2 | 	cmps	local02, local03 wcz
13858     01 1E 66 E6 |  if_be	neg	local01, #1
1385c     A7 1E 62 FC | 	wrlong	local01, fp
13860     58 01 90 FD | 	jmp	#LR__1553
13864                 | LR__1548
13864                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
13864     08 4E 05 F1 | 	add	fp, #8
13868     A7 1E 02 FB | 	rdlong	local01, fp
1386c     08 4E 85 F1 | 	sub	fp, #8
13870     1D 1E 0E F2 | 	cmp	local01, #29 wz
13874     14 4E 05 A1 |  if_e	add	fp, #20
13878     A7 22 02 AB |  if_e	rdlong	local03, fp
1387c     14 4E 85 A1 |  if_e	sub	fp, #20
13880     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
13884     24 00 90 5D |  if_ne	jmp	#LR__1549
13888     00 1E 06 F6 | 	mov	local01, #0
1388c     A7 20 02 FB | 	rdlong	local02, fp
13890     0C 4E 05 F1 | 	add	fp, #12
13894     A7 22 02 FB | 	rdlong	local03, fp
13898     0C 4E 85 F1 | 	sub	fp, #12
1389c     11 21 1A F2 | 	cmp	local02, local03 wcz
138a0     01 1E 66 E6 |  if_be	neg	local01, #1
138a4     A7 1E 62 FC | 	wrlong	local01, fp
138a8     10 01 90 FD | 	jmp	#LR__1553
138ac                 | LR__1549
138ac                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
138ac     08 4E 05 F1 | 	add	fp, #8
138b0     A7 1E 02 FB | 	rdlong	local01, fp
138b4     08 4E 85 F1 | 	sub	fp, #8
138b8     2B 1E 0E F2 | 	cmp	local01, #43 wz
138bc     14 4E 05 A1 |  if_e	add	fp, #20
138c0     A7 22 02 AB |  if_e	rdlong	local03, fp
138c4     14 4E 85 A1 |  if_e	sub	fp, #20
138c8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
138cc     30 00 90 5D |  if_ne	jmp	#LR__1550
138d0     00 1E 06 F6 | 	mov	local01, #0
138d4     A7 12 02 FB | 	rdlong	arg01, fp
138d8     B4 BD BF FD | 	call	#_convertstring
138dc     FD 12 02 F6 | 	mov	arg01, result1
138e0     0C 4E 05 F1 | 	add	fp, #12
138e4     A7 14 02 FB | 	rdlong	arg02, fp
138e8     0C 4E 85 F1 | 	sub	fp, #12
138ec     34 BF B0 FD | 	call	#__system___string_cmp
138f0     01 FA 55 F2 | 	cmps	result1, #1 wc
138f4     00 1E 26 C6 |  if_b	not	local01, #0
138f8     A7 1E 62 FC | 	wrlong	local01, fp
138fc     BC 00 90 FD | 	jmp	#LR__1553
13900                 | LR__1550
13900                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
13900     08 4E 05 F1 | 	add	fp, #8
13904     A7 1E 02 FB | 	rdlong	local01, fp
13908     08 4E 85 F1 | 	sub	fp, #8
1390c     1F 1E 0E F2 | 	cmp	local01, #31 wz
13910     14 4E 05 A1 |  if_e	add	fp, #20
13914     A7 22 02 AB |  if_e	rdlong	local03, fp
13918     14 4E 85 A1 |  if_e	sub	fp, #20
1391c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
13920     34 00 90 5D |  if_ne	jmp	#LR__1551
13924     00 1E 06 F6 | 	mov	local01, #0
13928     A7 20 02 FB | 	rdlong	local02, fp
1392c     0C 4E 05 F1 | 	add	fp, #12
13930     A7 12 02 FB | 	rdlong	arg01, fp
13934     0C 4E 85 F1 | 	sub	fp, #12
13938     54 BD BF FD | 	call	#_convertstring
1393c     FD 14 02 F6 | 	mov	arg02, result1
13940     10 13 02 F6 | 	mov	arg01, local02
13944     DC BE B0 FD | 	call	#__system___string_cmp
13948     01 FA 55 F2 | 	cmps	result1, #1 wc
1394c     00 1E 26 C6 |  if_b	not	local01, #0
13950     A7 1E 62 FC | 	wrlong	local01, fp
13954     64 00 90 FD | 	jmp	#LR__1553
13958                 | LR__1551
13958                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
13958     08 4E 05 F1 | 	add	fp, #8
1395c     A7 1E 02 FB | 	rdlong	local01, fp
13960     08 4E 85 F1 | 	sub	fp, #8
13964     2B 1E 0E F2 | 	cmp	local01, #43 wz
13968     14 4E 05 A1 |  if_e	add	fp, #20
1396c     A7 22 02 AB |  if_e	rdlong	local03, fp
13970     14 4E 85 A1 |  if_e	sub	fp, #20
13974     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
13978     3C 00 90 5D |  if_ne	jmp	#LR__1552
1397c     00 1E 06 F6 | 	mov	local01, #0
13980     A7 12 02 FB | 	rdlong	arg01, fp
13984     08 BD BF FD | 	call	#_convertstring
13988     FD 20 02 F6 | 	mov	local02, result1
1398c     0C 4E 05 F1 | 	add	fp, #12
13990     A7 12 02 FB | 	rdlong	arg01, fp
13994     0C 4E 85 F1 | 	sub	fp, #12
13998     F4 BC BF FD | 	call	#_convertstring
1399c     FD 14 02 F6 | 	mov	arg02, result1
139a0     10 13 02 F6 | 	mov	arg01, local02
139a4     7C BE B0 FD | 	call	#__system___string_cmp
139a8     01 FA 55 F2 | 	cmps	result1, #1 wc
139ac     00 1E 26 C6 |  if_b	not	local01, #0
139b0     A7 1E 62 FC | 	wrlong	local01, fp
139b4     04 00 90 FD | 	jmp	#LR__1553
139b8                 | LR__1552
139b8     A7 00 68 FC | 	wrlong	#0, fp
139bc                 | LR__1553
139bc     08 4E 05 F1 | 	add	fp, #8
139c0     A7 38 68 FC | 	wrlong	#28, fp
139c4     08 4E 85 F1 | 	sub	fp, #8
139c8     A7 12 02 F6 | 	mov	arg01, fp
139cc     04 72 BF FD | 	call	#_push
139d0     A7 F0 03 F6 | 	mov	ptra, fp
139d4     B2 00 A0 FD | 	call	#popregs_
139d8                 | _do_le_ret
139d8     2D 00 64 FD | 	ret
139dc                 | 
139dc                 | ' 
139dc                 | ' 
139dc                 | ' sub do_ne
139dc                 | _do_ne
139dc     05 4A 05 F6 | 	mov	COUNT_, #5
139e0     A8 00 A0 FD | 	call	#pushregs_
139e4     18 F0 07 F1 | 	add	ptra, #24
139e8     50 71 BF FD | 	call	#_pop
139ec     FD 1E 02 F6 | 	mov	local01, result1
139f0     FE 20 02 F6 | 	mov	local02, result2
139f4     FF 22 02 F6 | 	mov	local03, result3
139f8     0C 4E 05 F1 | 	add	fp, #12
139fc     A7 1E 62 FC | 	wrlong	local01, fp
13a00     04 4E 05 F1 | 	add	fp, #4
13a04     A7 20 62 FC | 	wrlong	local02, fp
13a08     04 4E 05 F1 | 	add	fp, #4
13a0c     A7 22 62 FC | 	wrlong	local03, fp
13a10     14 4E 85 F1 | 	sub	fp, #20
13a14     24 71 BF FD | 	call	#_pop
13a18     FF 22 02 F6 | 	mov	local03, result3
13a1c     A7 FA 61 FC | 	wrlong	result1, fp
13a20     04 4E 05 F1 | 	add	fp, #4
13a24     A7 FC 61 FC | 	wrlong	result2, fp
13a28     04 4E 05 F1 | 	add	fp, #4
13a2c     A7 22 62 FC | 	wrlong	local03, fp
13a30                 | ' t2=pop()
13a30                 | ' t1=pop()
13a30                 | ' 
13a30                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
13a30     08 4E 85 F1 | 	sub	fp, #8
13a34     1F 22 0E F2 | 	cmp	local03, #31 wz
13a38     14 4E 05 A1 |  if_e	add	fp, #20
13a3c     A7 24 02 AB |  if_e	rdlong	local04, fp
13a40     14 4E 85 A1 |  if_e	sub	fp, #20
13a44     12 23 02 A6 |  if_e	mov	local03, local04
13a48     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
13a4c     28 00 90 5D |  if_ne	jmp	#LR__1560
13a50     00 1E 06 F6 | 	mov	local01, #0
13a54     A7 12 02 FB | 	rdlong	arg01, fp
13a58     0C 4E 05 F1 | 	add	fp, #12
13a5c     A7 14 02 FB | 	rdlong	arg02, fp
13a60     0C 4E 85 F1 | 	sub	fp, #12
13a64     BC BD B0 FD | 	call	#__system___string_cmp
13a68     00 FA 0D F2 | 	cmp	result1, #0 wz
13a6c     00 1E 26 56 |  if_ne	not	local01, #0
13a70     A7 1E 62 FC | 	wrlong	local01, fp
13a74     1C 04 90 FD | 	jmp	#LR__1573
13a78                 | LR__1560
13a78                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
13a78     08 4E 05 F1 | 	add	fp, #8
13a7c     A7 1E 02 FB | 	rdlong	local01, fp
13a80     08 4E 85 F1 | 	sub	fp, #8
13a84     1E 1E 0E F2 | 	cmp	local01, #30 wz
13a88     14 4E 05 A1 |  if_e	add	fp, #20
13a8c     A7 24 02 AB |  if_e	rdlong	local04, fp
13a90     14 4E 85 A1 |  if_e	sub	fp, #20
13a94     12 23 02 A6 |  if_e	mov	local03, local04
13a98     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
13a9c     2C 00 90 5D |  if_ne	jmp	#LR__1561
13aa0     00 1E 06 F6 | 	mov	local01, #0
13aa4     A7 12 02 FB | 	rdlong	arg01, fp
13aa8     0C 4E 05 F1 | 	add	fp, #12
13aac     A7 14 02 FB | 	rdlong	arg02, fp
13ab0     0C 4E 85 F1 | 	sub	fp, #12
13ab4     01 16 06 F6 | 	mov	arg03, #1
13ab8     BC EC B0 FD | 	call	#__system___float_cmp
13abc     00 FA 0D F2 | 	cmp	result1, #0 wz
13ac0     00 1E 26 56 |  if_ne	not	local01, #0
13ac4     A7 1E 62 FC | 	wrlong	local01, fp
13ac8     C8 03 90 FD | 	jmp	#LR__1573
13acc                 | LR__1561
13acc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
13acc     08 4E 05 F1 | 	add	fp, #8
13ad0     A7 1E 02 FB | 	rdlong	local01, fp
13ad4     08 4E 85 F1 | 	sub	fp, #8
13ad8     1E 1E 0E F2 | 	cmp	local01, #30 wz
13adc     14 4E 05 A1 |  if_e	add	fp, #20
13ae0     A7 24 02 AB |  if_e	rdlong	local04, fp
13ae4     14 4E 85 A1 |  if_e	sub	fp, #20
13ae8     12 23 02 A6 |  if_e	mov	local03, local04
13aec     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
13af0     48 00 90 5D |  if_ne	jmp	#LR__1562
13af4     00 1E 06 F6 | 	mov	local01, #0
13af8     A7 20 02 FB | 	rdlong	local02, fp
13afc     0C 4E 05 F1 | 	add	fp, #12
13b00     A7 12 02 FB | 	rdlong	arg01, fp
13b04     0C 4E 85 F1 | 	sub	fp, #12
13b08     09 13 52 F6 | 	abs	arg01, arg01 wc
13b0c     1F 26 C6 C9 |  if_b	decod	local05, #31
13b10     00 26 06 36 |  if_ae	mov	local05, #0
13b14     28 E4 B0 FD | 	call	#__system___float_fromuns
13b18     13 FB 61 F5 | 	xor	result1, local05
13b1c     FD 14 02 F6 | 	mov	arg02, result1
13b20     10 13 02 F6 | 	mov	arg01, local02
13b24     01 16 06 F6 | 	mov	arg03, #1
13b28     4C EC B0 FD | 	call	#__system___float_cmp
13b2c     00 FA 0D F2 | 	cmp	result1, #0 wz
13b30     00 1E 26 56 |  if_ne	not	local01, #0
13b34     A7 1E 62 FC | 	wrlong	local01, fp
13b38     58 03 90 FD | 	jmp	#LR__1573
13b3c                 | LR__1562
13b3c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
13b3c     08 4E 05 F1 | 	add	fp, #8
13b40     A7 1E 02 FB | 	rdlong	local01, fp
13b44     08 4E 85 F1 | 	sub	fp, #8
13b48     1E 1E 0E F2 | 	cmp	local01, #30 wz
13b4c     14 4E 05 A1 |  if_e	add	fp, #20
13b50     A7 24 02 AB |  if_e	rdlong	local04, fp
13b54     14 4E 85 A1 |  if_e	sub	fp, #20
13b58     12 23 02 A6 |  if_e	mov	local03, local04
13b5c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
13b60     38 00 90 5D |  if_ne	jmp	#LR__1563
13b64     00 1E 06 F6 | 	mov	local01, #0
13b68     A7 20 02 FB | 	rdlong	local02, fp
13b6c     0C 4E 05 F1 | 	add	fp, #12
13b70     A7 12 02 FB | 	rdlong	arg01, fp
13b74     0C 4E 85 F1 | 	sub	fp, #12
13b78     C4 E3 B0 FD | 	call	#__system___float_fromuns
13b7c     FD 14 02 F6 | 	mov	arg02, result1
13b80     10 13 02 F6 | 	mov	arg01, local02
13b84     01 16 06 F6 | 	mov	arg03, #1
13b88     EC EB B0 FD | 	call	#__system___float_cmp
13b8c     00 FA 0D F2 | 	cmp	result1, #0 wz
13b90     00 1E 26 56 |  if_ne	not	local01, #0
13b94     A7 1E 62 FC | 	wrlong	local01, fp
13b98     F8 02 90 FD | 	jmp	#LR__1573
13b9c                 | LR__1563
13b9c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
13b9c     08 4E 05 F1 | 	add	fp, #8
13ba0     A7 1E 02 FB | 	rdlong	local01, fp
13ba4     08 4E 85 F1 | 	sub	fp, #8
13ba8     1C 1E 0E F2 | 	cmp	local01, #28 wz
13bac     14 4E 05 A1 |  if_e	add	fp, #20
13bb0     A7 24 02 AB |  if_e	rdlong	local04, fp
13bb4     14 4E 85 A1 |  if_e	sub	fp, #20
13bb8     12 23 02 A6 |  if_e	mov	local03, local04
13bbc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
13bc0     44 00 90 5D |  if_ne	jmp	#LR__1564
13bc4     00 1E 06 F6 | 	mov	local01, #0
13bc8     A7 12 02 FB | 	rdlong	arg01, fp
13bcc     09 13 52 F6 | 	abs	arg01, arg01 wc
13bd0     1F 26 C6 C9 |  if_b	decod	local05, #31
13bd4     00 26 06 36 |  if_ae	mov	local05, #0
13bd8     64 E3 B0 FD | 	call	#__system___float_fromuns
13bdc     13 FB 61 F5 | 	xor	result1, local05
13be0     FD 12 02 F6 | 	mov	arg01, result1
13be4     0C 4E 05 F1 | 	add	fp, #12
13be8     A7 14 02 FB | 	rdlong	arg02, fp
13bec     0C 4E 85 F1 | 	sub	fp, #12
13bf0     01 16 06 F6 | 	mov	arg03, #1
13bf4     80 EB B0 FD | 	call	#__system___float_cmp
13bf8     00 FA 0D F2 | 	cmp	result1, #0 wz
13bfc     00 1E 26 56 |  if_ne	not	local01, #0
13c00     A7 1E 62 FC | 	wrlong	local01, fp
13c04     8C 02 90 FD | 	jmp	#LR__1573
13c08                 | LR__1564
13c08                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
13c08     08 4E 05 F1 | 	add	fp, #8
13c0c     A7 1E 02 FB | 	rdlong	local01, fp
13c10     08 4E 85 F1 | 	sub	fp, #8
13c14     1C 1E 0E F2 | 	cmp	local01, #28 wz
13c18     14 4E 05 A1 |  if_e	add	fp, #20
13c1c     A7 24 02 AB |  if_e	rdlong	local04, fp
13c20     14 4E 85 A1 |  if_e	sub	fp, #20
13c24     12 23 02 A6 |  if_e	mov	local03, local04
13c28     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
13c2c     24 00 90 5D |  if_ne	jmp	#LR__1565
13c30     00 1E 06 F6 | 	mov	local01, #0
13c34     A7 20 02 FB | 	rdlong	local02, fp
13c38     0C 4E 05 F1 | 	add	fp, #12
13c3c     A7 22 02 FB | 	rdlong	local03, fp
13c40     0C 4E 85 F1 | 	sub	fp, #12
13c44     11 21 0A F2 | 	cmp	local02, local03 wz
13c48     01 1E 66 56 |  if_ne	neg	local01, #1
13c4c     A7 1E 62 FC | 	wrlong	local01, fp
13c50     40 02 90 FD | 	jmp	#LR__1573
13c54                 | LR__1565
13c54                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
13c54     08 4E 05 F1 | 	add	fp, #8
13c58     A7 1E 02 FB | 	rdlong	local01, fp
13c5c     08 4E 85 F1 | 	sub	fp, #8
13c60     1C 1E 0E F2 | 	cmp	local01, #28 wz
13c64     14 4E 05 A1 |  if_e	add	fp, #20
13c68     A7 24 02 AB |  if_e	rdlong	local04, fp
13c6c     14 4E 85 A1 |  if_e	sub	fp, #20
13c70     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
13c74     24 00 90 5D |  if_ne	jmp	#LR__1566
13c78     00 1E 06 F6 | 	mov	local01, #0
13c7c     A7 20 02 FB | 	rdlong	local02, fp
13c80     0C 4E 05 F1 | 	add	fp, #12
13c84     A7 22 02 FB | 	rdlong	local03, fp
13c88     0C 4E 85 F1 | 	sub	fp, #12
13c8c     11 21 0A F2 | 	cmp	local02, local03 wz
13c90     01 1E 66 56 |  if_ne	neg	local01, #1
13c94     A7 1E 62 FC | 	wrlong	local01, fp
13c98     F8 01 90 FD | 	jmp	#LR__1573
13c9c                 | LR__1566
13c9c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
13c9c     08 4E 05 F1 | 	add	fp, #8
13ca0     A7 1E 02 FB | 	rdlong	local01, fp
13ca4     08 4E 85 F1 | 	sub	fp, #8
13ca8     1D 1E 0E F2 | 	cmp	local01, #29 wz
13cac     14 4E 05 A1 |  if_e	add	fp, #20
13cb0     A7 22 02 AB |  if_e	rdlong	local03, fp
13cb4     14 4E 85 A1 |  if_e	sub	fp, #20
13cb8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
13cbc     34 00 90 5D |  if_ne	jmp	#LR__1567
13cc0     00 1E 06 F6 | 	mov	local01, #0
13cc4     A7 12 02 FB | 	rdlong	arg01, fp
13cc8     74 E2 B0 FD | 	call	#__system___float_fromuns
13ccc     FD 12 02 F6 | 	mov	arg01, result1
13cd0     0C 4E 05 F1 | 	add	fp, #12
13cd4     A7 14 02 FB | 	rdlong	arg02, fp
13cd8     0C 4E 85 F1 | 	sub	fp, #12
13cdc     01 16 06 F6 | 	mov	arg03, #1
13ce0     94 EA B0 FD | 	call	#__system___float_cmp
13ce4     00 FA 0D F2 | 	cmp	result1, #0 wz
13ce8     00 1E 26 56 |  if_ne	not	local01, #0
13cec     A7 1E 62 FC | 	wrlong	local01, fp
13cf0     A0 01 90 FD | 	jmp	#LR__1573
13cf4                 | LR__1567
13cf4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
13cf4     08 4E 05 F1 | 	add	fp, #8
13cf8     A7 1E 02 FB | 	rdlong	local01, fp
13cfc     08 4E 85 F1 | 	sub	fp, #8
13d00     1D 1E 0E F2 | 	cmp	local01, #29 wz
13d04     14 4E 05 A1 |  if_e	add	fp, #20
13d08     A7 22 02 AB |  if_e	rdlong	local03, fp
13d0c     14 4E 85 A1 |  if_e	sub	fp, #20
13d10     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
13d14     24 00 90 5D |  if_ne	jmp	#LR__1568
13d18     00 1E 06 F6 | 	mov	local01, #0
13d1c     A7 20 02 FB | 	rdlong	local02, fp
13d20     0C 4E 05 F1 | 	add	fp, #12
13d24     A7 22 02 FB | 	rdlong	local03, fp
13d28     0C 4E 85 F1 | 	sub	fp, #12
13d2c     11 21 0A F2 | 	cmp	local02, local03 wz
13d30     01 1E 66 56 |  if_ne	neg	local01, #1
13d34     A7 1E 62 FC | 	wrlong	local01, fp
13d38     58 01 90 FD | 	jmp	#LR__1573
13d3c                 | LR__1568
13d3c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
13d3c     08 4E 05 F1 | 	add	fp, #8
13d40     A7 1E 02 FB | 	rdlong	local01, fp
13d44     08 4E 85 F1 | 	sub	fp, #8
13d48     1D 1E 0E F2 | 	cmp	local01, #29 wz
13d4c     14 4E 05 A1 |  if_e	add	fp, #20
13d50     A7 22 02 AB |  if_e	rdlong	local03, fp
13d54     14 4E 85 A1 |  if_e	sub	fp, #20
13d58     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
13d5c     24 00 90 5D |  if_ne	jmp	#LR__1569
13d60     00 1E 06 F6 | 	mov	local01, #0
13d64     A7 20 02 FB | 	rdlong	local02, fp
13d68     0C 4E 05 F1 | 	add	fp, #12
13d6c     A7 22 02 FB | 	rdlong	local03, fp
13d70     0C 4E 85 F1 | 	sub	fp, #12
13d74     11 21 0A F2 | 	cmp	local02, local03 wz
13d78     01 1E 66 56 |  if_ne	neg	local01, #1
13d7c     A7 1E 62 FC | 	wrlong	local01, fp
13d80     10 01 90 FD | 	jmp	#LR__1573
13d84                 | LR__1569
13d84                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
13d84     08 4E 05 F1 | 	add	fp, #8
13d88     A7 1E 02 FB | 	rdlong	local01, fp
13d8c     08 4E 85 F1 | 	sub	fp, #8
13d90     2B 1E 0E F2 | 	cmp	local01, #43 wz
13d94     14 4E 05 A1 |  if_e	add	fp, #20
13d98     A7 22 02 AB |  if_e	rdlong	local03, fp
13d9c     14 4E 85 A1 |  if_e	sub	fp, #20
13da0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
13da4     30 00 90 5D |  if_ne	jmp	#LR__1570
13da8     00 1E 06 F6 | 	mov	local01, #0
13dac     A7 12 02 FB | 	rdlong	arg01, fp
13db0     DC B8 BF FD | 	call	#_convertstring
13db4     FD 12 02 F6 | 	mov	arg01, result1
13db8     0C 4E 05 F1 | 	add	fp, #12
13dbc     A7 14 02 FB | 	rdlong	arg02, fp
13dc0     0C 4E 85 F1 | 	sub	fp, #12
13dc4     5C BA B0 FD | 	call	#__system___string_cmp
13dc8     00 FA 0D F2 | 	cmp	result1, #0 wz
13dcc     00 1E 26 56 |  if_ne	not	local01, #0
13dd0     A7 1E 62 FC | 	wrlong	local01, fp
13dd4     BC 00 90 FD | 	jmp	#LR__1573
13dd8                 | LR__1570
13dd8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
13dd8     08 4E 05 F1 | 	add	fp, #8
13ddc     A7 1E 02 FB | 	rdlong	local01, fp
13de0     08 4E 85 F1 | 	sub	fp, #8
13de4     1F 1E 0E F2 | 	cmp	local01, #31 wz
13de8     14 4E 05 A1 |  if_e	add	fp, #20
13dec     A7 22 02 AB |  if_e	rdlong	local03, fp
13df0     14 4E 85 A1 |  if_e	sub	fp, #20
13df4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
13df8     34 00 90 5D |  if_ne	jmp	#LR__1571
13dfc     00 1E 06 F6 | 	mov	local01, #0
13e00     A7 20 02 FB | 	rdlong	local02, fp
13e04     0C 4E 05 F1 | 	add	fp, #12
13e08     A7 12 02 FB | 	rdlong	arg01, fp
13e0c     0C 4E 85 F1 | 	sub	fp, #12
13e10     7C B8 BF FD | 	call	#_convertstring
13e14     FD 14 02 F6 | 	mov	arg02, result1
13e18     10 13 02 F6 | 	mov	arg01, local02
13e1c     04 BA B0 FD | 	call	#__system___string_cmp
13e20     00 FA 0D F2 | 	cmp	result1, #0 wz
13e24     00 1E 26 56 |  if_ne	not	local01, #0
13e28     A7 1E 62 FC | 	wrlong	local01, fp
13e2c     64 00 90 FD | 	jmp	#LR__1573
13e30                 | LR__1571
13e30                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
13e30     08 4E 05 F1 | 	add	fp, #8
13e34     A7 1E 02 FB | 	rdlong	local01, fp
13e38     08 4E 85 F1 | 	sub	fp, #8
13e3c     2B 1E 0E F2 | 	cmp	local01, #43 wz
13e40     14 4E 05 A1 |  if_e	add	fp, #20
13e44     A7 22 02 AB |  if_e	rdlong	local03, fp
13e48     14 4E 85 A1 |  if_e	sub	fp, #20
13e4c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
13e50     3C 00 90 5D |  if_ne	jmp	#LR__1572
13e54     00 1E 06 F6 | 	mov	local01, #0
13e58     A7 12 02 FB | 	rdlong	arg01, fp
13e5c     30 B8 BF FD | 	call	#_convertstring
13e60     FD 20 02 F6 | 	mov	local02, result1
13e64     0C 4E 05 F1 | 	add	fp, #12
13e68     A7 12 02 FB | 	rdlong	arg01, fp
13e6c     0C 4E 85 F1 | 	sub	fp, #12
13e70     1C B8 BF FD | 	call	#_convertstring
13e74     FD 14 02 F6 | 	mov	arg02, result1
13e78     10 13 02 F6 | 	mov	arg01, local02
13e7c     A4 B9 B0 FD | 	call	#__system___string_cmp
13e80     00 FA 0D F2 | 	cmp	result1, #0 wz
13e84     00 1E 26 56 |  if_ne	not	local01, #0
13e88     A7 1E 62 FC | 	wrlong	local01, fp
13e8c     04 00 90 FD | 	jmp	#LR__1573
13e90                 | LR__1572
13e90     A7 00 68 FC | 	wrlong	#0, fp
13e94                 | LR__1573
13e94     08 4E 05 F1 | 	add	fp, #8
13e98     A7 38 68 FC | 	wrlong	#28, fp
13e9c     08 4E 85 F1 | 	sub	fp, #8
13ea0     A7 12 02 F6 | 	mov	arg01, fp
13ea4     2C 6D BF FD | 	call	#_push
13ea8     A7 F0 03 F6 | 	mov	ptra, fp
13eac     B2 00 A0 FD | 	call	#popregs_
13eb0                 | _do_ne_ret
13eb0     2D 00 64 FD | 	ret
13eb4                 | 
13eb4                 | ' 
13eb4                 | ' 
13eb4                 | ' 
13eb4                 | ' ' -------------------   convert a variable on the top of stack to integer
13eb4                 | ' 
13eb4                 | ' 'sub do_converttoint'
13eb4                 | ' 
13eb4                 | ' 'dim t1 as expr_result 
13eb4                 | ' 'dim a1,r as integer
13eb4                 | ' 't1=pop() 
13eb4                 | ' 'select case t1.result_type
13eb4                 | ' '  case result_int: a1=t1.result.iresult : r=result_int
13eb4                 | ' '  case result_uint: a1=t1.result.uresult : r=result_int
13eb4                 | ' '  case result_float: a1=round(t1.result.fresult) : r=result_int
13eb4                 | ' '  case result_string: a1=val(t1.result.sresult) :r=result_int
13eb4                 | ' '  case result_string2: a1=val(convertstring(t1.result.uresult)) :r=result_int
13eb4                 | ' '  case result_error: a1=0: r=t1.result.uresult
13eb4                 | ' '  case else : a1=0 : r=1
13eb4                 | ' 
13eb4                 | ' 'end select
13eb4                 | ' 't1.result.iresult=a1 : t1.result_type=r : push t1 
13eb4                 | ' 
13eb4                 | ' 'end sub
13eb4                 | ' 
13eb4                 | ' function converttoint (t1 as expr_result) as integer
13eb4                 | _converttoint
13eb4     02 4A 05 F6 | 	mov	COUNT_, #2
13eb8     A8 00 A0 FD | 	call	#pushregs_
13ebc     09 1F 02 F6 | 	mov	local01, arg01
13ec0                 | ' 
13ec0                 | ' select case t1.result_type
13ec0     08 1E 06 F1 | 	add	local01, #8
13ec4     0F 21 02 FB | 	rdlong	local02, local01
13ec8     08 1E 86 F1 | 	sub	local01, #8
13ecc     1C 20 0E F2 | 	cmp	local02, #28 wz
13ed0     24 00 90 AD |  if_e	jmp	#LR__1580
13ed4     1D 20 0E F2 | 	cmp	local02, #29 wz
13ed8     24 00 90 AD |  if_e	jmp	#LR__1581
13edc     1E 20 0E F2 | 	cmp	local02, #30 wz
13ee0     24 00 90 AD |  if_e	jmp	#LR__1582
13ee4     1F 20 0E F2 | 	cmp	local02, #31 wz
13ee8     2C 00 90 AD |  if_e	jmp	#LR__1583
13eec     2B 20 0E F2 | 	cmp	local02, #43 wz
13ef0     3C 00 90 AD |  if_e	jmp	#LR__1584
13ef4     58 00 90 FD | 	jmp	#LR__1585
13ef8                 | LR__1580
13ef8     0F FB 01 FB | 	rdlong	result1, local01
13efc     54 00 90 FD | 	jmp	#LR__1586
13f00                 | LR__1581
13f00     0F FB 01 FB | 	rdlong	result1, local01
13f04     4C 00 90 FD | 	jmp	#LR__1586
13f08                 | LR__1582
13f08     0F 13 02 FB | 	rdlong	arg01, local01
13f0c     01 14 06 F6 | 	mov	arg02, #1
13f10     F8 E8 B0 FD | 	call	#__system___float_tointeger
13f14     3C 00 90 FD | 	jmp	#LR__1586
13f18                 | LR__1583
13f18     0F 13 02 FB | 	rdlong	arg01, local01
13f1c     0C EC B0 FD | 	call	#__system____builtin_atof
13f20     FD 12 02 F6 | 	mov	arg01, result1
13f24     00 14 06 F6 | 	mov	arg02, #0
13f28     E0 E8 B0 FD | 	call	#__system___float_tointeger
13f2c     24 00 90 FD | 	jmp	#LR__1586
13f30                 | LR__1584
13f30     0F 13 02 FB | 	rdlong	arg01, local01
13f34     58 B7 BF FD | 	call	#_convertstring
13f38     FD 12 02 F6 | 	mov	arg01, result1
13f3c     EC EB B0 FD | 	call	#__system____builtin_atof
13f40     FD 12 02 F6 | 	mov	arg01, result1
13f44     00 14 06 F6 | 	mov	arg02, #0
13f48     C0 E8 B0 FD | 	call	#__system___float_tointeger
13f4c     04 00 90 FD | 	jmp	#LR__1586
13f50                 | LR__1585
13f50     00 FA 05 F6 | 	mov	result1, #0
13f54                 | LR__1586
13f54     A7 F0 03 F6 | 	mov	ptra, fp
13f58     B2 00 A0 FD | 	call	#popregs_
13f5c                 | _converttoint_ret
13f5c     2D 00 64 FD | 	ret
13f60                 | 
13f60                 | ' 
13f60                 | ' function converttofloat (t1 as expr_result) as single
13f60                 | _converttofloat
13f60     03 4A 05 F6 | 	mov	COUNT_, #3
13f64     A8 00 A0 FD | 	call	#pushregs_
13f68     09 1F 02 F6 | 	mov	local01, arg01
13f6c                 | ' 
13f6c                 | ' select case t1.result_type
13f6c     08 1E 06 F1 | 	add	local01, #8
13f70     0F 21 02 FB | 	rdlong	local02, local01
13f74     08 1E 86 F1 | 	sub	local01, #8
13f78     1C 20 0E F2 | 	cmp	local02, #28 wz
13f7c     24 00 90 AD |  if_e	jmp	#LR__1590
13f80     1D 20 0E F2 | 	cmp	local02, #29 wz
13f84     38 00 90 AD |  if_e	jmp	#LR__1591
13f88     1E 20 0E F2 | 	cmp	local02, #30 wz
13f8c     3C 00 90 AD |  if_e	jmp	#LR__1592
13f90     1F 20 0E F2 | 	cmp	local02, #31 wz
13f94     3C 00 90 AD |  if_e	jmp	#LR__1593
13f98     2B 20 0E F2 | 	cmp	local02, #43 wz
13f9c     40 00 90 AD |  if_e	jmp	#LR__1594
13fa0     50 00 90 FD | 	jmp	#LR__1595
13fa4                 | LR__1590
13fa4     0F 13 02 FB | 	rdlong	arg01, local01
13fa8     09 13 52 F6 | 	abs	arg01, arg01 wc
13fac     1F 22 C6 C9 |  if_b	decod	local03, #31
13fb0     00 22 06 36 |  if_ae	mov	local03, #0
13fb4     88 DF B0 FD | 	call	#__system___float_fromuns
13fb8     11 FB 61 F5 | 	xor	result1, local03
13fbc     38 00 90 FD | 	jmp	#LR__1596
13fc0                 | LR__1591
13fc0     0F 13 02 FB | 	rdlong	arg01, local01
13fc4     78 DF B0 FD | 	call	#__system___float_fromuns
13fc8     2C 00 90 FD | 	jmp	#LR__1596
13fcc                 | LR__1592
13fcc     0F FB 01 FB | 	rdlong	result1, local01
13fd0     24 00 90 FD | 	jmp	#LR__1596
13fd4                 | LR__1593
13fd4     0F 13 02 FB | 	rdlong	arg01, local01
13fd8     50 EB B0 FD | 	call	#__system____builtin_atof
13fdc     18 00 90 FD | 	jmp	#LR__1596
13fe0                 | LR__1594
13fe0     0F 13 02 FB | 	rdlong	arg01, local01
13fe4     A8 B6 BF FD | 	call	#_convertstring
13fe8     FD 12 02 F6 | 	mov	arg01, result1
13fec     3C EB B0 FD | 	call	#__system____builtin_atof
13ff0     04 00 90 FD | 	jmp	#LR__1596
13ff4                 | LR__1595
13ff4     00 FA 05 F6 | 	mov	result1, #0
13ff8                 | LR__1596
13ff8     A7 F0 03 F6 | 	mov	ptra, fp
13ffc     B2 00 A0 FD | 	call	#popregs_
14000                 | _converttofloat_ret
14000     2D 00 64 FD | 	ret
14004                 | 
14004                 | ' 
14004                 | ' sub do_rnd
14004                 | _do_rnd
14004     01 4A 05 F6 | 	mov	COUNT_, #1
14008     A8 00 A0 FD | 	call	#pushregs_
1400c     10 F0 07 F1 | 	add	ptra, #16
14010     4A 00 00 FF 
14014     B0 E4 05 F1 | 	add	objptr, ##38064
14018     F2 1E 02 FB | 	rdlong	local01, objptr
1401c     0F 17 02 F6 | 	mov	arg03, local01
14020     01 16 66 F0 | 	shl	arg03, #1
14024     0F 17 02 F1 | 	add	arg03, local01
14028     02 16 66 F0 | 	shl	arg03, #2
1402c     03 00 00 FF 
14030     04 E4 85 F1 | 	sub	objptr, ##1540
14034     F2 16 02 F1 | 	add	arg03, objptr
14038     0B 17 02 FB | 	rdlong	arg03, arg03
1403c     0C 4E 05 F1 | 	add	fp, #12
14040     A7 16 62 FC | 	wrlong	arg03, fp
14044                 | ' 
14044                 | ' numpar=compiledline(lineptr_e).result.uresult
14044                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
14044     0C 4E 85 F1 | 	sub	fp, #12
14048     02 16 16 F2 | 	cmp	arg03, #2 wc
1404c     47 00 00 FF 
14050     AC E4 85 F1 | 	sub	objptr, ##36524
14054     3C 00 90 CD |  if_b	jmp	#LR__1600
14058     00 12 06 F6 | 	mov	arg01, #0
1405c     34 11 B1 FD | 	call	#__system___getiolock_0508
14060     FD 12 02 F6 | 	mov	arg01, result1
14064     94 B7 B0 FD | 	call	#__system___lockmem
14068     7A 01 00 FF 
1406c     C5 14 06 F6 | 	mov	arg02, ##@LR__5231
14070     00 12 06 F6 | 	mov	arg01, #0
14074     00 16 06 F6 | 	mov	arg03, #0
14078     74 C4 B0 FD | 	call	#__system___basic_print_string
1407c     00 12 06 F6 | 	mov	arg01, #0
14080     10 11 B1 FD | 	call	#__system___getiolock_0508
14084     FD 00 68 FC | 	wrlong	#0, result1
14088     27 12 06 F6 | 	mov	arg01, #39
1408c     C4 72 B0 FD | 	call	#_printerror
14090     2C 01 90 FD | 	jmp	#LR__1607
14094                 | LR__1600
14094                 | ' if numpar=0 then
14094     0C 4E 05 F1 | 	add	fp, #12
14098     A7 FE 09 FB | 	rdlong	result3, fp wz
1409c     0C 4E 85 F1 | 	sub	fp, #12
140a0     20 00 90 5D |  if_ne	jmp	#LR__1601
140a4     08 4E 05 F1 | 	add	fp, #8
140a8     A7 3A 68 FC | 	wrlong	#29, fp
140ac     08 4E 85 F1 | 	sub	fp, #8
140b0     1B FA 61 FD | 	getrnd	result1
140b4     A7 FA 61 FC | 	wrlong	result1, fp
140b8     A7 12 02 F6 | 	mov	arg01, fp
140bc     14 6B BF FD | 	call	#_push
140c0     FC 00 90 FD | 	jmp	#LR__1606
140c4                 | LR__1601
140c4     74 6A BF FD | 	call	#_pop
140c8     A7 FA 61 FC | 	wrlong	result1, fp
140cc     04 4E 05 F1 | 	add	fp, #4
140d0     A7 FC 61 FC | 	wrlong	result2, fp
140d4     04 4E 05 F1 | 	add	fp, #4
140d8     A7 FE 61 FC | 	wrlong	result3, fp
140dc                 | '   t1=pop()
140dc                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
140dc     08 4E 85 F1 | 	sub	fp, #8
140e0     1C FE 0D F2 | 	cmp	result3, #28 wz
140e4     08 4E 05 51 |  if_ne	add	fp, #8
140e8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
140ec     08 4E 85 51 |  if_ne	sub	fp, #8
140f0     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
140f4     2C 00 90 5D |  if_ne	jmp	#LR__1602
140f8     1B FA 61 FD | 	getrnd	result1
140fc     A7 1E 02 FB | 	rdlong	local01, fp
14100     0F FB 11 FD | 	qdiv	result1, local01
14104     A7 12 02 F6 | 	mov	arg01, fp
14108     19 1E 62 FD | 	getqy	local01
1410c     A7 1E 62 FC | 	wrlong	local01, fp
14110     08 4E 05 F1 | 	add	fp, #8
14114     A7 3A 68 FC | 	wrlong	#29, fp
14118     08 4E 85 F1 | 	sub	fp, #8
1411c     B4 6A BF FD | 	call	#_push
14120     9C 00 90 FD | 	jmp	#LR__1605
14124                 | LR__1602
14124     08 4E 05 F1 | 	add	fp, #8
14128     A7 1E 02 FB | 	rdlong	local01, fp
1412c     08 4E 85 F1 | 	sub	fp, #8
14130     1E 1E 0E F2 | 	cmp	local01, #30 wz
14134     48 00 90 5D |  if_ne	jmp	#LR__1603
14138     A7 12 02 FB | 	rdlong	arg01, fp
1413c     00 C0 24 FF 
14140     00 14 06 F6 | 	mov	arg02, ##1233125376
14144     00 E4 B0 FD | 	call	#__system___float_div
14148     FD 1E 02 F6 | 	mov	local01, result1
1414c     1B 12 62 FD | 	getrnd	arg01
14150     74 13 06 F4 | 	bitl	arg01, #372
14154     E8 DD B0 FD | 	call	#__system___float_fromuns
14158     FD 14 02 F6 | 	mov	arg02, result1
1415c     0F 13 02 F6 | 	mov	arg01, local01
14160     E0 E1 B0 FD | 	call	#__system___float_mul
14164     A7 FA 61 FC | 	wrlong	result1, fp
14168     08 4E 05 F1 | 	add	fp, #8
1416c     A7 3C 68 FC | 	wrlong	#30, fp
14170     08 4E 85 F1 | 	sub	fp, #8
14174     A7 12 02 F6 | 	mov	arg01, fp
14178     58 6A BF FD | 	call	#_push
1417c     40 00 90 FD | 	jmp	#LR__1604
14180                 | LR__1603
14180                 | '     print "rnd: "; : printerror(40) 
14180     00 12 06 F6 | 	mov	arg01, #0
14184     0C 10 B1 FD | 	call	#__system___getiolock_0508
14188     FD 12 02 F6 | 	mov	arg01, result1
1418c     6C B6 B0 FD | 	call	#__system___lockmem
14190     7A 01 00 FF 
14194     CB 14 06 F6 | 	mov	arg02, ##@LR__5232
14198     00 12 06 F6 | 	mov	arg01, #0
1419c     00 16 06 F6 | 	mov	arg03, #0
141a0     4C C3 B0 FD | 	call	#__system___basic_print_string
141a4     00 12 06 F6 | 	mov	arg01, #0
141a8     E8 0F B1 FD | 	call	#__system___getiolock_0508
141ac     FD 00 68 FC | 	wrlong	#0, result1
141b0     28 12 06 F6 | 	mov	arg01, #40
141b4     9C 71 B0 FD | 	call	#_printerror
141b8     A7 12 02 F6 | 	mov	arg01, fp
141bc     14 6A BF FD | 	call	#_push
141c0                 | LR__1604
141c0                 | LR__1605
141c0                 | LR__1606
141c0                 | LR__1607
141c0     A7 F0 03 F6 | 	mov	ptra, fp
141c4     B2 00 A0 FD | 	call	#popregs_
141c8                 | _do_rnd_ret
141c8     2D 00 64 FD | 	ret
141cc                 | 
141cc                 | ' 
141cc                 | ' sub do_getenvsustain
141cc                 | _do_getenvsustain
141cc     01 4A 05 F6 | 	mov	COUNT_, #1
141d0     A8 00 A0 FD | 	call	#pushregs_
141d4     10 F0 07 F1 | 	add	ptra, #16
141d8     4A 00 00 FF 
141dc     B0 E4 05 F1 | 	add	objptr, ##38064
141e0     F2 1E 02 FB | 	rdlong	local01, objptr
141e4     0F 17 02 F6 | 	mov	arg03, local01
141e8     01 16 66 F0 | 	shl	arg03, #1
141ec     0F 17 02 F1 | 	add	arg03, local01
141f0     02 16 66 F0 | 	shl	arg03, #2
141f4     03 00 00 FF 
141f8     04 E4 85 F1 | 	sub	objptr, ##1540
141fc     F2 16 02 F1 | 	add	arg03, objptr
14200     0B 17 02 FB | 	rdlong	arg03, arg03
14204     0C 4E 05 F1 | 	add	fp, #12
14208     A7 16 62 FC | 	wrlong	arg03, fp
1420c                 | ' 
1420c                 | ' numpar=compiledline(lineptr_e).result.uresult
1420c                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
1420c     0C 4E 85 F1 | 	sub	fp, #12
14210     02 16 16 F2 | 	cmp	arg03, #2 wc
14214     47 00 00 FF 
14218     AC E4 85 F1 | 	sub	objptr, ##36524
1421c     0C 4E 05 C1 |  if_b	add	fp, #12
14220     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
14224     0C 4E 85 C1 |  if_b	sub	fp, #12
14228     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1610
1422c     00 12 06 F6 | 	mov	arg01, #0
14230     60 0F B1 FD | 	call	#__system___getiolock_0508
14234     FD 12 02 F6 | 	mov	arg01, result1
14238     C0 B5 B0 FD | 	call	#__system___lockmem
1423c     7A 01 00 FF 
14240     D1 14 06 F6 | 	mov	arg02, ##@LR__5233
14244     00 12 06 F6 | 	mov	arg01, #0
14248     00 16 06 F6 | 	mov	arg03, #0
1424c     A0 C2 B0 FD | 	call	#__system___basic_print_string
14250     00 12 06 F6 | 	mov	arg01, #0
14254     3C 0F B1 FD | 	call	#__system___getiolock_0508
14258     FD 00 68 FC | 	wrlong	#0, result1
1425c     27 12 06 F6 | 	mov	arg01, #39
14260     F0 70 B0 FD | 	call	#_printerror
14264     64 00 90 FD | 	jmp	#LR__1611
14268                 | LR__1610
14268     D0 68 BF FD | 	call	#_pop
1426c     FD 1E 02 F6 | 	mov	local01, result1
14270     FE 16 02 F6 | 	mov	arg03, result2
14274     A7 1E 62 FC | 	wrlong	local01, fp
14278     04 4E 05 F1 | 	add	fp, #4
1427c     A7 16 62 FC | 	wrlong	arg03, fp
14280     04 4E 05 F1 | 	add	fp, #4
14284     A7 FE 61 FC | 	wrlong	result3, fp
14288     08 4E 85 F1 | 	sub	fp, #8
1428c     A7 12 02 F6 | 	mov	arg01, fp
14290     20 FC BF FD | 	call	#_converttoint
14294     FD 1E 02 F6 | 	mov	local01, result1
14298     01 1E 66 F0 | 	shl	local01, #1
1429c     59 00 00 FF 
142a0     D4 E5 05 F1 | 	add	objptr, ##46036
142a4     F2 1E 02 F1 | 	add	local01, objptr
142a8     0F 1F E2 FA | 	rdword	local01, local01
142ac     A7 1E 62 FC | 	wrlong	local01, fp
142b0     08 4E 05 F1 | 	add	fp, #8
142b4     A7 38 68 FC | 	wrlong	#28, fp
142b8     08 4E 85 F1 | 	sub	fp, #8
142bc     A7 12 02 F6 | 	mov	arg01, fp
142c0     59 00 00 FF 
142c4     D4 E5 85 F1 | 	sub	objptr, ##46036
142c8     08 69 BF FD | 	call	#_push
142cc                 | LR__1611
142cc     A7 F0 03 F6 | 	mov	ptra, fp
142d0     B2 00 A0 FD | 	call	#popregs_
142d4                 | _do_getenvsustain_ret
142d4     2D 00 64 FD | 	ret
142d8                 | 
142d8                 | ' 
142d8                 | ' sub do_sin
142d8                 | _do_sin
142d8     01 4A 05 F6 | 	mov	COUNT_, #1
142dc     A8 00 A0 FD | 	call	#pushregs_
142e0     10 F0 07 F1 | 	add	ptra, #16
142e4     4A 00 00 FF 
142e8     B0 E4 05 F1 | 	add	objptr, ##38064
142ec     F2 1E 02 FB | 	rdlong	local01, objptr
142f0     0F 17 02 F6 | 	mov	arg03, local01
142f4     01 16 66 F0 | 	shl	arg03, #1
142f8     0F 17 02 F1 | 	add	arg03, local01
142fc     02 16 66 F0 | 	shl	arg03, #2
14300     03 00 00 FF 
14304     04 E4 85 F1 | 	sub	objptr, ##1540
14308     F2 16 02 F1 | 	add	arg03, objptr
1430c     0B 17 02 FB | 	rdlong	arg03, arg03
14310     0C 4E 05 F1 | 	add	fp, #12
14314     A7 16 62 FC | 	wrlong	arg03, fp
14318                 | ' 
14318                 | ' numpar=compiledline(lineptr_e).result.uresult
14318                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
14318     0C 4E 85 F1 | 	sub	fp, #12
1431c     02 16 16 F2 | 	cmp	arg03, #2 wc
14320     47 00 00 FF 
14324     AC E4 85 F1 | 	sub	objptr, ##36524
14328     0C 4E 05 C1 |  if_b	add	fp, #12
1432c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
14330     0C 4E 85 C1 |  if_b	sub	fp, #12
14334     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1620
14338     00 12 06 F6 | 	mov	arg01, #0
1433c     54 0E B1 FD | 	call	#__system___getiolock_0508
14340     FD 12 02 F6 | 	mov	arg01, result1
14344     B4 B4 B0 FD | 	call	#__system___lockmem
14348     7A 01 00 FF 
1434c     E1 14 06 F6 | 	mov	arg02, ##@LR__5234
14350     00 12 06 F6 | 	mov	arg01, #0
14354     00 16 06 F6 | 	mov	arg03, #0
14358     94 C1 B0 FD | 	call	#__system___basic_print_string
1435c     00 12 06 F6 | 	mov	arg01, #0
14360     30 0E B1 FD | 	call	#__system___getiolock_0508
14364     FD 00 68 FC | 	wrlong	#0, result1
14368     27 12 06 F6 | 	mov	arg01, #39
1436c     E4 6F B0 FD | 	call	#_printerror
14370     64 00 90 FD | 	jmp	#LR__1621
14374                 | LR__1620
14374     C4 67 BF FD | 	call	#_pop
14378     A7 FA 61 FC | 	wrlong	result1, fp
1437c     04 4E 05 F1 | 	add	fp, #4
14380     A7 FC 61 FC | 	wrlong	result2, fp
14384     04 4E 05 F1 | 	add	fp, #4
14388     A7 FE 61 FC | 	wrlong	result3, fp
1438c     08 4E 85 F1 | 	sub	fp, #8
14390     59 00 00 FF 
14394     C8 E5 05 F1 | 	add	objptr, ##46024
14398     F2 1E 02 FB | 	rdlong	local01, objptr
1439c     59 00 00 FF 
143a0     C8 E5 85 F1 | 	sub	objptr, ##46024
143a4     A7 12 02 F6 | 	mov	arg01, fp
143a8     B4 FB BF FD | 	call	#_converttofloat
143ac     FD 14 02 F6 | 	mov	arg02, result1
143b0     0F 13 02 F6 | 	mov	arg01, local01
143b4     8C DF B0 FD | 	call	#__system___float_mul
143b8     FD 12 02 F6 | 	mov	arg01, result1
143bc     C0 E8 B0 FD | 	call	#__system____builtin_sinf
143c0     A7 FA 61 FC | 	wrlong	result1, fp
143c4     08 4E 05 F1 | 	add	fp, #8
143c8     A7 3C 68 FC | 	wrlong	#30, fp
143cc     08 4E 85 F1 | 	sub	fp, #8
143d0     A7 12 02 F6 | 	mov	arg01, fp
143d4     FC 67 BF FD | 	call	#_push
143d8                 | LR__1621
143d8     A7 F0 03 F6 | 	mov	ptra, fp
143dc     B2 00 A0 FD | 	call	#popregs_
143e0                 | _do_sin_ret
143e0     2D 00 64 FD | 	ret
143e4                 | 
143e4                 | ' 
143e4                 | ' 
143e4                 | ' sub do_mid
143e4                 | _do_mid
143e4     00 4A 05 F6 | 	mov	COUNT_, #0
143e8     A8 00 A0 FD | 	call	#pushregs_
143ec     18 F0 07 F1 | 	add	ptra, #24
143f0     4A 00 00 FF 
143f4     B0 E4 05 F1 | 	add	objptr, ##38064
143f8     F2 16 02 FB | 	rdlong	arg03, objptr
143fc     0B 15 02 F6 | 	mov	arg02, arg03
14400     01 14 66 F0 | 	shl	arg02, #1
14404     0B 15 02 F1 | 	add	arg02, arg03
14408     02 14 66 F0 | 	shl	arg02, #2
1440c     03 00 00 FF 
14410     04 E4 85 F1 | 	sub	objptr, ##1540
14414     F2 14 02 F1 | 	add	arg02, objptr
14418     0A 17 02 FB | 	rdlong	arg03, arg02
1441c     0C 4E 05 F1 | 	add	fp, #12
14420     A7 16 62 FC | 	wrlong	arg03, fp
14424                 | ' 
14424                 | ' numpar=compiledline(lineptr_e).result.uresult
14424                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
14424     0C 4E 85 F1 | 	sub	fp, #12
14428     03 16 0E F2 | 	cmp	arg03, #3 wz
1442c     47 00 00 FF 
14430     AC E4 85 F1 | 	sub	objptr, ##36524
14434     3C 00 90 AD |  if_e	jmp	#LR__1630
14438     00 12 06 F6 | 	mov	arg01, #0
1443c     54 0D B1 FD | 	call	#__system___getiolock_0508
14440     FD 12 02 F6 | 	mov	arg01, result1
14444     B4 B3 B0 FD | 	call	#__system___lockmem
14448     7A 01 00 FF 
1444c     E7 14 06 F6 | 	mov	arg02, ##@LR__5235
14450     00 12 06 F6 | 	mov	arg01, #0
14454     00 16 06 F6 | 	mov	arg03, #0
14458     94 C0 B0 FD | 	call	#__system___basic_print_string
1445c     00 12 06 F6 | 	mov	arg01, #0
14460     30 0D B1 FD | 	call	#__system___getiolock_0508
14464     FD 00 68 FC | 	wrlong	#0, result1
14468     27 12 06 F6 | 	mov	arg01, #39
1446c     E4 6E B0 FD | 	call	#_printerror
14470     28 01 90 FD | 	jmp	#LR__1633
14474                 | LR__1630
14474     C4 66 BF FD | 	call	#_pop
14478     FF 16 02 F6 | 	mov	arg03, result3
1447c     A7 FA 61 FC | 	wrlong	result1, fp
14480     04 4E 05 F1 | 	add	fp, #4
14484     A7 FC 61 FC | 	wrlong	result2, fp
14488     04 4E 05 F1 | 	add	fp, #4
1448c     A7 16 62 FC | 	wrlong	arg03, fp
14490     08 4E 85 F1 | 	sub	fp, #8
14494     A7 12 02 F6 | 	mov	arg01, fp
14498     18 FA BF FD | 	call	#_converttoint
1449c     FD 16 02 F6 | 	mov	arg03, result1
144a0     14 4E 05 F1 | 	add	fp, #20
144a4     A7 16 62 FC | 	wrlong	arg03, fp
144a8     14 4E 85 F1 | 	sub	fp, #20
144ac     8C 66 BF FD | 	call	#_pop
144b0     FF 16 02 F6 | 	mov	arg03, result3
144b4     A7 FA 61 FC | 	wrlong	result1, fp
144b8     04 4E 05 F1 | 	add	fp, #4
144bc     A7 FC 61 FC | 	wrlong	result2, fp
144c0     04 4E 05 F1 | 	add	fp, #4
144c4     A7 16 62 FC | 	wrlong	arg03, fp
144c8     08 4E 85 F1 | 	sub	fp, #8
144cc     A7 12 02 F6 | 	mov	arg01, fp
144d0     E0 F9 BF FD | 	call	#_converttoint
144d4     FD 16 02 F6 | 	mov	arg03, result1
144d8     10 4E 05 F1 | 	add	fp, #16
144dc     A7 16 62 FC | 	wrlong	arg03, fp
144e0     10 4E 85 F1 | 	sub	fp, #16
144e4     54 66 BF FD | 	call	#_pop
144e8     FF 16 02 F6 | 	mov	arg03, result3
144ec     A7 FA 61 FC | 	wrlong	result1, fp
144f0     04 4E 05 F1 | 	add	fp, #4
144f4     A7 FC 61 FC | 	wrlong	result2, fp
144f8     04 4E 05 F1 | 	add	fp, #4
144fc     A7 16 62 FC | 	wrlong	arg03, fp
14500                 | ' t1=pop() : arg2=converttoint(t1)
14500                 | ' t1=pop() : arg1=converttoint(t1)
14500                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14500     08 4E 85 F1 | 	sub	fp, #8
14504     2B 16 0E F2 | 	cmp	arg03, #43 wz
14508     18 00 90 5D |  if_ne	jmp	#LR__1631
1450c     A7 12 02 FB | 	rdlong	arg01, fp
14510     7C B1 BF FD | 	call	#_convertstring
14514     A7 FA 61 FC | 	wrlong	result1, fp
14518     08 4E 05 F1 | 	add	fp, #8
1451c     A7 3E 68 FC | 	wrlong	#31, fp
14520     08 4E 85 F1 | 	sub	fp, #8
14524                 | LR__1631
14524                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
14524     08 4E 05 F1 | 	add	fp, #8
14528     A7 16 02 FB | 	rdlong	arg03, fp
1452c     08 4E 85 F1 | 	sub	fp, #8
14530     1F 16 0E F2 | 	cmp	arg03, #31 wz
14534     3C 00 90 AD |  if_e	jmp	#LR__1632
14538     00 12 06 F6 | 	mov	arg01, #0
1453c     54 0C B1 FD | 	call	#__system___getiolock_0508
14540     FD 12 02 F6 | 	mov	arg01, result1
14544     B4 B2 B0 FD | 	call	#__system___lockmem
14548     7A 01 00 FF 
1454c     EE 14 06 F6 | 	mov	arg02, ##@LR__5236
14550     00 12 06 F6 | 	mov	arg01, #0
14554     00 16 06 F6 | 	mov	arg03, #0
14558     94 BF B0 FD | 	call	#__system___basic_print_string
1455c     00 12 06 F6 | 	mov	arg01, #0
14560     30 0C B1 FD | 	call	#__system___getiolock_0508
14564     FD 00 68 FC | 	wrlong	#0, result1
14568     0F 12 06 F6 | 	mov	arg01, #15
1456c     E4 6D B0 FD | 	call	#_printerror
14570     28 00 90 FD | 	jmp	#LR__1633
14574                 | LR__1632
14574     A7 12 02 FB | 	rdlong	arg01, fp
14578     10 4E 05 F1 | 	add	fp, #16
1457c     A7 14 02 FB | 	rdlong	arg02, fp
14580     04 4E 05 F1 | 	add	fp, #4
14584     A7 16 02 FB | 	rdlong	arg03, fp
14588     14 4E 85 F1 | 	sub	fp, #20
1458c     94 D3 B0 FD | 	call	#__system__Mid_S
14590     A7 FA 61 FC | 	wrlong	result1, fp
14594     A7 12 02 F6 | 	mov	arg01, fp
14598     38 66 BF FD | 	call	#_push
1459c                 | LR__1633
1459c     A7 F0 03 F6 | 	mov	ptra, fp
145a0     B2 00 A0 FD | 	call	#popregs_
145a4                 | _do_mid_ret
145a4     2D 00 64 FD | 	ret
145a8                 | 
145a8                 | ' 
145a8                 | ' sub do_right
145a8                 | _do_right
145a8     00 4A 05 F6 | 	mov	COUNT_, #0
145ac     A8 00 A0 FD | 	call	#pushregs_
145b0     14 F0 07 F1 | 	add	ptra, #20
145b4     4A 00 00 FF 
145b8     B0 E4 05 F1 | 	add	objptr, ##38064
145bc     F2 16 02 FB | 	rdlong	arg03, objptr
145c0     0B 15 02 F6 | 	mov	arg02, arg03
145c4     01 14 66 F0 | 	shl	arg02, #1
145c8     0B 15 02 F1 | 	add	arg02, arg03
145cc     02 14 66 F0 | 	shl	arg02, #2
145d0     03 00 00 FF 
145d4     04 E4 85 F1 | 	sub	objptr, ##1540
145d8     F2 14 02 F1 | 	add	arg02, objptr
145dc     0A 17 02 FB | 	rdlong	arg03, arg02
145e0     0C 4E 05 F1 | 	add	fp, #12
145e4     A7 16 62 FC | 	wrlong	arg03, fp
145e8                 | ' 
145e8                 | ' numpar=compiledline(lineptr_e).result.uresult
145e8                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
145e8     0C 4E 85 F1 | 	sub	fp, #12
145ec     02 16 0E F2 | 	cmp	arg03, #2 wz
145f0     47 00 00 FF 
145f4     AC E4 85 F1 | 	sub	objptr, ##36524
145f8     3C 00 90 AD |  if_e	jmp	#LR__1640
145fc     00 12 06 F6 | 	mov	arg01, #0
14600     90 0B B1 FD | 	call	#__system___getiolock_0508
14604     FD 12 02 F6 | 	mov	arg01, result1
14608     F0 B1 B0 FD | 	call	#__system___lockmem
1460c     7A 01 00 FF 
14610     F5 14 06 F6 | 	mov	arg02, ##@LR__5237
14614     00 12 06 F6 | 	mov	arg01, #0
14618     00 16 06 F6 | 	mov	arg03, #0
1461c     D0 BE B0 FD | 	call	#__system___basic_print_string
14620     00 12 06 F6 | 	mov	arg01, #0
14624     6C 0B B1 FD | 	call	#__system___getiolock_0508
14628     FD 00 68 FC | 	wrlong	#0, result1
1462c     27 12 06 F6 | 	mov	arg01, #39
14630     20 6D B0 FD | 	call	#_printerror
14634     E8 00 90 FD | 	jmp	#LR__1643
14638                 | LR__1640
14638     00 65 BF FD | 	call	#_pop
1463c     FF 16 02 F6 | 	mov	arg03, result3
14640     A7 FA 61 FC | 	wrlong	result1, fp
14644     04 4E 05 F1 | 	add	fp, #4
14648     A7 FC 61 FC | 	wrlong	result2, fp
1464c     04 4E 05 F1 | 	add	fp, #4
14650     A7 16 62 FC | 	wrlong	arg03, fp
14654     08 4E 85 F1 | 	sub	fp, #8
14658     A7 12 02 F6 | 	mov	arg01, fp
1465c     54 F8 BF FD | 	call	#_converttoint
14660     FD 16 02 F6 | 	mov	arg03, result1
14664     10 4E 05 F1 | 	add	fp, #16
14668     A7 16 62 FC | 	wrlong	arg03, fp
1466c     10 4E 85 F1 | 	sub	fp, #16
14670     C8 64 BF FD | 	call	#_pop
14674     FF 16 02 F6 | 	mov	arg03, result3
14678     A7 FA 61 FC | 	wrlong	result1, fp
1467c     04 4E 05 F1 | 	add	fp, #4
14680     A7 FC 61 FC | 	wrlong	result2, fp
14684     04 4E 05 F1 | 	add	fp, #4
14688     A7 16 62 FC | 	wrlong	arg03, fp
1468c                 | ' t1=pop() : arg=converttoint(t1)
1468c                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1468c     08 4E 85 F1 | 	sub	fp, #8
14690     2B 16 0E F2 | 	cmp	arg03, #43 wz
14694     18 00 90 5D |  if_ne	jmp	#LR__1641
14698     A7 12 02 FB | 	rdlong	arg01, fp
1469c     F0 AF BF FD | 	call	#_convertstring
146a0     A7 FA 61 FC | 	wrlong	result1, fp
146a4     08 4E 05 F1 | 	add	fp, #8
146a8     A7 3E 68 FC | 	wrlong	#31, fp
146ac     08 4E 85 F1 | 	sub	fp, #8
146b0                 | LR__1641
146b0                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
146b0     08 4E 05 F1 | 	add	fp, #8
146b4     A7 16 02 FB | 	rdlong	arg03, fp
146b8     08 4E 85 F1 | 	sub	fp, #8
146bc     1F 16 0E F2 | 	cmp	arg03, #31 wz
146c0     3C 00 90 AD |  if_e	jmp	#LR__1642
146c4     00 12 06 F6 | 	mov	arg01, #0
146c8     C8 0A B1 FD | 	call	#__system___getiolock_0508
146cc     FD 12 02 F6 | 	mov	arg01, result1
146d0     28 B1 B0 FD | 	call	#__system___lockmem
146d4     7A 01 00 FF 
146d8     FE 14 06 F6 | 	mov	arg02, ##@LR__5238
146dc     00 12 06 F6 | 	mov	arg01, #0
146e0     00 16 06 F6 | 	mov	arg03, #0
146e4     08 BE B0 FD | 	call	#__system___basic_print_string
146e8     00 12 06 F6 | 	mov	arg01, #0
146ec     A4 0A B1 FD | 	call	#__system___getiolock_0508
146f0     FD 00 68 FC | 	wrlong	#0, result1
146f4     0F 12 06 F6 | 	mov	arg01, #15
146f8     58 6C B0 FD | 	call	#_printerror
146fc     20 00 90 FD | 	jmp	#LR__1643
14700                 | LR__1642
14700     A7 12 02 FB | 	rdlong	arg01, fp
14704     10 4E 05 F1 | 	add	fp, #16
14708     A7 14 02 FB | 	rdlong	arg02, fp
1470c     10 4E 85 F1 | 	sub	fp, #16
14710     80 D1 B0 FD | 	call	#__system__Right_S
14714     A7 FA 61 FC | 	wrlong	result1, fp
14718     A7 12 02 F6 | 	mov	arg01, fp
1471c     B4 64 BF FD | 	call	#_push
14720                 | LR__1643
14720     A7 F0 03 F6 | 	mov	ptra, fp
14724     B2 00 A0 FD | 	call	#popregs_
14728                 | _do_right_ret
14728     2D 00 64 FD | 	ret
1472c                 | 
1472c                 | ' 
1472c                 | ' sub do_left
1472c                 | _do_left
1472c     00 4A 05 F6 | 	mov	COUNT_, #0
14730     A8 00 A0 FD | 	call	#pushregs_
14734     14 F0 07 F1 | 	add	ptra, #20
14738     4A 00 00 FF 
1473c     B0 E4 05 F1 | 	add	objptr, ##38064
14740     F2 16 02 FB | 	rdlong	arg03, objptr
14744     0B 15 02 F6 | 	mov	arg02, arg03
14748     01 14 66 F0 | 	shl	arg02, #1
1474c     0B 15 02 F1 | 	add	arg02, arg03
14750     02 14 66 F0 | 	shl	arg02, #2
14754     03 00 00 FF 
14758     04 E4 85 F1 | 	sub	objptr, ##1540
1475c     F2 14 02 F1 | 	add	arg02, objptr
14760     0A 17 02 FB | 	rdlong	arg03, arg02
14764     0C 4E 05 F1 | 	add	fp, #12
14768     A7 16 62 FC | 	wrlong	arg03, fp
1476c                 | ' 
1476c                 | ' numpar=compiledline(lineptr_e).result.uresult
1476c                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
1476c     0C 4E 85 F1 | 	sub	fp, #12
14770     02 16 0E F2 | 	cmp	arg03, #2 wz
14774     47 00 00 FF 
14778     AC E4 85 F1 | 	sub	objptr, ##36524
1477c     3C 00 90 AD |  if_e	jmp	#LR__1650
14780     00 12 06 F6 | 	mov	arg01, #0
14784     0C 0A B1 FD | 	call	#__system___getiolock_0508
14788     FD 12 02 F6 | 	mov	arg01, result1
1478c     6C B0 B0 FD | 	call	#__system___lockmem
14790     7A 01 00 FF 
14794     07 15 06 F6 | 	mov	arg02, ##@LR__5239
14798     00 12 06 F6 | 	mov	arg01, #0
1479c     00 16 06 F6 | 	mov	arg03, #0
147a0     4C BD B0 FD | 	call	#__system___basic_print_string
147a4     00 12 06 F6 | 	mov	arg01, #0
147a8     E8 09 B1 FD | 	call	#__system___getiolock_0508
147ac     FD 00 68 FC | 	wrlong	#0, result1
147b0     27 12 06 F6 | 	mov	arg01, #39
147b4     9C 6B B0 FD | 	call	#_printerror
147b8     E8 00 90 FD | 	jmp	#LR__1653
147bc                 | LR__1650
147bc     7C 63 BF FD | 	call	#_pop
147c0     FF 16 02 F6 | 	mov	arg03, result3
147c4     A7 FA 61 FC | 	wrlong	result1, fp
147c8     04 4E 05 F1 | 	add	fp, #4
147cc     A7 FC 61 FC | 	wrlong	result2, fp
147d0     04 4E 05 F1 | 	add	fp, #4
147d4     A7 16 62 FC | 	wrlong	arg03, fp
147d8     08 4E 85 F1 | 	sub	fp, #8
147dc     A7 12 02 F6 | 	mov	arg01, fp
147e0     D0 F6 BF FD | 	call	#_converttoint
147e4     FD 16 02 F6 | 	mov	arg03, result1
147e8     10 4E 05 F1 | 	add	fp, #16
147ec     A7 16 62 FC | 	wrlong	arg03, fp
147f0     10 4E 85 F1 | 	sub	fp, #16
147f4     44 63 BF FD | 	call	#_pop
147f8     FF 16 02 F6 | 	mov	arg03, result3
147fc     A7 FA 61 FC | 	wrlong	result1, fp
14800     04 4E 05 F1 | 	add	fp, #4
14804     A7 FC 61 FC | 	wrlong	result2, fp
14808     04 4E 05 F1 | 	add	fp, #4
1480c     A7 16 62 FC | 	wrlong	arg03, fp
14810                 | ' t1=pop() : arg=converttoint(t1)
14810                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14810     08 4E 85 F1 | 	sub	fp, #8
14814     2B 16 0E F2 | 	cmp	arg03, #43 wz
14818     18 00 90 5D |  if_ne	jmp	#LR__1651
1481c     A7 12 02 FB | 	rdlong	arg01, fp
14820     6C AE BF FD | 	call	#_convertstring
14824     A7 FA 61 FC | 	wrlong	result1, fp
14828     08 4E 05 F1 | 	add	fp, #8
1482c     A7 3E 68 FC | 	wrlong	#31, fp
14830     08 4E 85 F1 | 	sub	fp, #8
14834                 | LR__1651
14834                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
14834     08 4E 05 F1 | 	add	fp, #8
14838     A7 16 02 FB | 	rdlong	arg03, fp
1483c     08 4E 85 F1 | 	sub	fp, #8
14840     1F 16 0E F2 | 	cmp	arg03, #31 wz
14844     3C 00 90 AD |  if_e	jmp	#LR__1652
14848     00 12 06 F6 | 	mov	arg01, #0
1484c     44 09 B1 FD | 	call	#__system___getiolock_0508
14850     FD 12 02 F6 | 	mov	arg01, result1
14854     A4 AF B0 FD | 	call	#__system___lockmem
14858     7A 01 00 FF 
1485c     0F 15 06 F6 | 	mov	arg02, ##@LR__5240
14860     00 12 06 F6 | 	mov	arg01, #0
14864     00 16 06 F6 | 	mov	arg03, #0
14868     84 BC B0 FD | 	call	#__system___basic_print_string
1486c     00 12 06 F6 | 	mov	arg01, #0
14870     20 09 B1 FD | 	call	#__system___getiolock_0508
14874     FD 00 68 FC | 	wrlong	#0, result1
14878     0F 12 06 F6 | 	mov	arg01, #15
1487c     D4 6A B0 FD | 	call	#_printerror
14880     20 00 90 FD | 	jmp	#LR__1653
14884                 | LR__1652
14884     A7 12 02 FB | 	rdlong	arg01, fp
14888     10 4E 05 F1 | 	add	fp, #16
1488c     A7 14 02 FB | 	rdlong	arg02, fp
14890     10 4E 85 F1 | 	sub	fp, #16
14894     74 CF B0 FD | 	call	#__system__Left_S
14898     A7 FA 61 FC | 	wrlong	result1, fp
1489c     A7 12 02 F6 | 	mov	arg01, fp
148a0     30 63 BF FD | 	call	#_push
148a4                 | LR__1653
148a4     A7 F0 03 F6 | 	mov	ptra, fp
148a8     B2 00 A0 FD | 	call	#popregs_
148ac                 | _do_left_ret
148ac     2D 00 64 FD | 	ret
148b0                 | 
148b0                 | ' 
148b0                 | ' sub do_asc
148b0                 | _do_asc
148b0     01 4A 05 F6 | 	mov	COUNT_, #1
148b4     A8 00 A0 FD | 	call	#pushregs_
148b8     14 F0 07 F1 | 	add	ptra, #20
148bc     4A 00 00 FF 
148c0     B0 E4 05 F1 | 	add	objptr, ##38064
148c4     F2 1E 02 FB | 	rdlong	local01, objptr
148c8     0F 17 02 F6 | 	mov	arg03, local01
148cc     01 16 66 F0 | 	shl	arg03, #1
148d0     0F 17 02 F1 | 	add	arg03, local01
148d4     02 16 66 F0 | 	shl	arg03, #2
148d8     03 00 00 FF 
148dc     04 E4 85 F1 | 	sub	objptr, ##1540
148e0     F2 16 02 F1 | 	add	arg03, objptr
148e4     0B 17 02 FB | 	rdlong	arg03, arg03
148e8     0C 4E 05 F1 | 	add	fp, #12
148ec     A7 16 62 FC | 	wrlong	arg03, fp
148f0                 | ' 
148f0                 | ' numpar=compiledline(lineptr_e).result.uresult
148f0                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
148f0     0C 4E 85 F1 | 	sub	fp, #12
148f4     02 16 16 F2 | 	cmp	arg03, #2 wc
148f8     47 00 00 FF 
148fc     AC E4 85 F1 | 	sub	objptr, ##36524
14900     0C 4E 05 C1 |  if_b	add	fp, #12
14904     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
14908     0C 4E 85 C1 |  if_b	sub	fp, #12
1490c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1660
14910     00 12 06 F6 | 	mov	arg01, #0
14914     7C 08 B1 FD | 	call	#__system___getiolock_0508
14918     FD 12 02 F6 | 	mov	arg01, result1
1491c     DC AE B0 FD | 	call	#__system___lockmem
14920     7A 01 00 FF 
14924     17 15 06 F6 | 	mov	arg02, ##@LR__5241
14928     00 12 06 F6 | 	mov	arg01, #0
1492c     00 16 06 F6 | 	mov	arg03, #0
14930     BC BB B0 FD | 	call	#__system___basic_print_string
14934     00 12 06 F6 | 	mov	arg01, #0
14938     58 08 B1 FD | 	call	#__system___getiolock_0508
1493c     FD 00 68 FC | 	wrlong	#0, result1
14940     27 12 06 F6 | 	mov	arg01, #39
14944     0C 6A B0 FD | 	call	#_printerror
14948     B0 00 90 FD | 	jmp	#LR__1663
1494c                 | LR__1660
1494c     EC 61 BF FD | 	call	#_pop
14950     FF 16 02 F6 | 	mov	arg03, result3
14954     A7 FA 61 FC | 	wrlong	result1, fp
14958     04 4E 05 F1 | 	add	fp, #4
1495c     A7 FC 61 FC | 	wrlong	result2, fp
14960     04 4E 05 F1 | 	add	fp, #4
14964     A7 16 62 FC | 	wrlong	arg03, fp
14968                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14968     08 4E 85 F1 | 	sub	fp, #8
1496c     2B 16 0E F2 | 	cmp	arg03, #43 wz
14970     18 00 90 5D |  if_ne	jmp	#LR__1661
14974     A7 12 02 FB | 	rdlong	arg01, fp
14978     14 AD BF FD | 	call	#_convertstring
1497c     A7 FA 61 FC | 	wrlong	result1, fp
14980     08 4E 05 F1 | 	add	fp, #8
14984     A7 3E 68 FC | 	wrlong	#31, fp
14988     08 4E 85 F1 | 	sub	fp, #8
1498c                 | LR__1661
1498c                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
1498c     08 4E 05 F1 | 	add	fp, #8
14990     A7 16 02 FB | 	rdlong	arg03, fp
14994     08 4E 85 F1 | 	sub	fp, #8
14998     1F 16 0E F2 | 	cmp	arg03, #31 wz
1499c     3C 00 90 AD |  if_e	jmp	#LR__1662
149a0     00 12 06 F6 | 	mov	arg01, #0
149a4     EC 07 B1 FD | 	call	#__system___getiolock_0508
149a8     FD 12 02 F6 | 	mov	arg01, result1
149ac     4C AE B0 FD | 	call	#__system___lockmem
149b0     7A 01 00 FF 
149b4     1D 15 06 F6 | 	mov	arg02, ##@LR__5242
149b8     00 12 06 F6 | 	mov	arg01, #0
149bc     00 16 06 F6 | 	mov	arg03, #0
149c0     2C BB B0 FD | 	call	#__system___basic_print_string
149c4     00 12 06 F6 | 	mov	arg01, #0
149c8     C8 07 B1 FD | 	call	#__system___getiolock_0508
149cc     FD 00 68 FC | 	wrlong	#0, result1
149d0     0F 12 06 F6 | 	mov	arg01, #15
149d4     7C 69 B0 FD | 	call	#_printerror
149d8     20 00 90 FD | 	jmp	#LR__1663
149dc                 | LR__1662
149dc     A7 1E 02 FB | 	rdlong	local01, fp
149e0     0F 1F C2 FA | 	rdbyte	local01, local01
149e4     A7 1E 62 FC | 	wrlong	local01, fp
149e8     08 4E 05 F1 | 	add	fp, #8
149ec     A7 38 68 FC | 	wrlong	#28, fp
149f0     08 4E 85 F1 | 	sub	fp, #8
149f4     A7 12 02 F6 | 	mov	arg01, fp
149f8     D8 61 BF FD | 	call	#_push
149fc                 | LR__1663
149fc     A7 F0 03 F6 | 	mov	ptra, fp
14a00     B2 00 A0 FD | 	call	#popregs_
14a04                 | _do_asc_ret
14a04     2D 00 64 FD | 	ret
14a08                 | 
14a08                 | ' 
14a08                 | ' sub do_len
14a08                 | _do_len
14a08     02 4A 05 F6 | 	mov	COUNT_, #2
14a0c     A8 00 A0 FD | 	call	#pushregs_
14a10     14 F0 07 F1 | 	add	ptra, #20
14a14     4A 00 00 FF 
14a18     B0 E4 05 F1 | 	add	objptr, ##38064
14a1c     F2 1E 02 FB | 	rdlong	local01, objptr
14a20     0F 17 02 F6 | 	mov	arg03, local01
14a24     01 16 66 F0 | 	shl	arg03, #1
14a28     0F 17 02 F1 | 	add	arg03, local01
14a2c     02 16 66 F0 | 	shl	arg03, #2
14a30     03 00 00 FF 
14a34     04 E4 85 F1 | 	sub	objptr, ##1540
14a38     F2 16 02 F1 | 	add	arg03, objptr
14a3c     0B 17 02 FB | 	rdlong	arg03, arg03
14a40     0C 4E 05 F1 | 	add	fp, #12
14a44     A7 16 62 FC | 	wrlong	arg03, fp
14a48                 | ' 
14a48                 | ' numpar=compiledline(lineptr_e).result.uresult
14a48                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
14a48     0C 4E 85 F1 | 	sub	fp, #12
14a4c     02 16 16 F2 | 	cmp	arg03, #2 wc
14a50     47 00 00 FF 
14a54     AC E4 85 F1 | 	sub	objptr, ##36524
14a58     0C 4E 05 C1 |  if_b	add	fp, #12
14a5c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
14a60     0C 4E 85 C1 |  if_b	sub	fp, #12
14a64     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1670
14a68     00 12 06 F6 | 	mov	arg01, #0
14a6c     24 07 B1 FD | 	call	#__system___getiolock_0508
14a70     FD 12 02 F6 | 	mov	arg01, result1
14a74     84 AD B0 FD | 	call	#__system___lockmem
14a78     7A 01 00 FF 
14a7c     23 15 06 F6 | 	mov	arg02, ##@LR__5243
14a80     00 12 06 F6 | 	mov	arg01, #0
14a84     00 16 06 F6 | 	mov	arg03, #0
14a88     64 BA B0 FD | 	call	#__system___basic_print_string
14a8c     00 12 06 F6 | 	mov	arg01, #0
14a90     00 07 B1 FD | 	call	#__system___getiolock_0508
14a94     FD 00 68 FC | 	wrlong	#0, result1
14a98     27 12 06 F6 | 	mov	arg01, #39
14a9c     B4 68 B0 FD | 	call	#_printerror
14aa0     C4 00 90 FD | 	jmp	#LR__1675
14aa4                 | LR__1670
14aa4     94 60 BF FD | 	call	#_pop
14aa8     FF 16 02 F6 | 	mov	arg03, result3
14aac     A7 FA 61 FC | 	wrlong	result1, fp
14ab0     04 4E 05 F1 | 	add	fp, #4
14ab4     A7 FC 61 FC | 	wrlong	result2, fp
14ab8     04 4E 05 F1 | 	add	fp, #4
14abc     A7 16 62 FC | 	wrlong	arg03, fp
14ac0                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14ac0     08 4E 85 F1 | 	sub	fp, #8
14ac4     2B 16 0E F2 | 	cmp	arg03, #43 wz
14ac8     18 00 90 5D |  if_ne	jmp	#LR__1671
14acc     A7 12 02 FB | 	rdlong	arg01, fp
14ad0     BC AB BF FD | 	call	#_convertstring
14ad4     A7 FA 61 FC | 	wrlong	result1, fp
14ad8     08 4E 05 F1 | 	add	fp, #8
14adc     A7 3E 68 FC | 	wrlong	#31, fp
14ae0     08 4E 85 F1 | 	sub	fp, #8
14ae4                 | LR__1671
14ae4                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
14ae4     08 4E 05 F1 | 	add	fp, #8
14ae8     A7 16 02 FB | 	rdlong	arg03, fp
14aec     08 4E 85 F1 | 	sub	fp, #8
14af0     1F 16 0E F2 | 	cmp	arg03, #31 wz
14af4     3C 00 90 AD |  if_e	jmp	#LR__1672
14af8     00 12 06 F6 | 	mov	arg01, #0
14afc     94 06 B1 FD | 	call	#__system___getiolock_0508
14b00     FD 12 02 F6 | 	mov	arg01, result1
14b04     F4 AC B0 FD | 	call	#__system___lockmem
14b08     7A 01 00 FF 
14b0c     29 15 06 F6 | 	mov	arg02, ##@LR__5244
14b10     00 12 06 F6 | 	mov	arg01, #0
14b14     00 16 06 F6 | 	mov	arg03, #0
14b18     D4 B9 B0 FD | 	call	#__system___basic_print_string
14b1c     00 12 06 F6 | 	mov	arg01, #0
14b20     70 06 B1 FD | 	call	#__system___getiolock_0508
14b24     FD 00 68 FC | 	wrlong	#0, result1
14b28     0F 12 06 F6 | 	mov	arg01, #15
14b2c     24 68 B0 FD | 	call	#_printerror
14b30     34 00 90 FD | 	jmp	#LR__1675
14b34                 | LR__1672
14b34     A7 12 02 FB | 	rdlong	arg01, fp
14b38     09 21 02 F6 | 	mov	local02, arg01
14b3c     97 06 48 FB | 	callpa	#(@LR__1674-@LR__1673)>>2,fcache_load_ptr_
14b40                 | LR__1673
14b40     10 FB C9 FA | 	rdbyte	result1, local02 wz
14b44     01 20 06 51 |  if_ne	add	local02, #1
14b48     F4 FF 9F 5D |  if_ne	jmp	#LR__1673
14b4c                 | LR__1674
14b4c     09 21 82 F1 | 	sub	local02, arg01
14b50     A7 20 62 FC | 	wrlong	local02, fp
14b54     08 4E 05 F1 | 	add	fp, #8
14b58     A7 38 68 FC | 	wrlong	#28, fp
14b5c     08 4E 85 F1 | 	sub	fp, #8
14b60     A7 12 02 F6 | 	mov	arg01, fp
14b64     6C 60 BF FD | 	call	#_push
14b68                 | LR__1675
14b68     A7 F0 03 F6 | 	mov	ptra, fp
14b6c     B2 00 A0 FD | 	call	#popregs_
14b70                 | _do_len_ret
14b70     2D 00 64 FD | 	ret
14b74                 | 
14b74                 | ' 
14b74                 | ' sub do_chr
14b74                 | _do_chr
14b74     01 4A 05 F6 | 	mov	COUNT_, #1
14b78     A8 00 A0 FD | 	call	#pushregs_
14b7c     14 F0 07 F1 | 	add	ptra, #20
14b80     4A 00 00 FF 
14b84     B0 E4 05 F1 | 	add	objptr, ##38064
14b88     F2 1E 02 FB | 	rdlong	local01, objptr
14b8c     0F 17 02 F6 | 	mov	arg03, local01
14b90     01 16 66 F0 | 	shl	arg03, #1
14b94     0F 17 02 F1 | 	add	arg03, local01
14b98     02 16 66 F0 | 	shl	arg03, #2
14b9c     03 00 00 FF 
14ba0     04 E4 85 F1 | 	sub	objptr, ##1540
14ba4     F2 16 02 F1 | 	add	arg03, objptr
14ba8     0B 17 02 FB | 	rdlong	arg03, arg03
14bac     0C 4E 05 F1 | 	add	fp, #12
14bb0     A7 16 62 FC | 	wrlong	arg03, fp
14bb4                 | ' 
14bb4                 | ' numpar=compiledline(lineptr_e).result.uresult
14bb4                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
14bb4     0C 4E 85 F1 | 	sub	fp, #12
14bb8     02 16 16 F2 | 	cmp	arg03, #2 wc
14bbc     47 00 00 FF 
14bc0     AC E4 85 F1 | 	sub	objptr, ##36524
14bc4     0C 4E 05 C1 |  if_b	add	fp, #12
14bc8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
14bcc     0C 4E 85 C1 |  if_b	sub	fp, #12
14bd0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1680
14bd4     00 12 06 F6 | 	mov	arg01, #0
14bd8     B8 05 B1 FD | 	call	#__system___getiolock_0508
14bdc     FD 12 02 F6 | 	mov	arg01, result1
14be0     18 AC B0 FD | 	call	#__system___lockmem
14be4     7A 01 00 FF 
14be8     2F 15 06 F6 | 	mov	arg02, ##@LR__5245
14bec     00 12 06 F6 | 	mov	arg01, #0
14bf0     00 16 06 F6 | 	mov	arg03, #0
14bf4     F8 B8 B0 FD | 	call	#__system___basic_print_string
14bf8     00 12 06 F6 | 	mov	arg01, #0
14bfc     94 05 B1 FD | 	call	#__system___getiolock_0508
14c00     FD 00 68 FC | 	wrlong	#0, result1
14c04     27 12 06 F6 | 	mov	arg01, #39
14c08     48 67 B0 FD | 	call	#_printerror
14c0c     54 00 90 FD | 	jmp	#LR__1681
14c10                 | LR__1680
14c10     28 5F BF FD | 	call	#_pop
14c14     FF 1E 02 F6 | 	mov	local01, result3
14c18     A7 FA 61 FC | 	wrlong	result1, fp
14c1c     04 4E 05 F1 | 	add	fp, #4
14c20     A7 FC 61 FC | 	wrlong	result2, fp
14c24     04 4E 05 F1 | 	add	fp, #4
14c28     A7 1E 62 FC | 	wrlong	local01, fp
14c2c     08 4E 85 F1 | 	sub	fp, #8
14c30     A7 12 02 F6 | 	mov	arg01, fp
14c34     7C F2 BF FD | 	call	#_converttoint
14c38     10 4E 05 F1 | 	add	fp, #16
14c3c     A7 FA 61 FC | 	wrlong	result1, fp
14c40     FD 12 02 F6 | 	mov	arg01, result1
14c44     10 4E 85 F1 | 	sub	fp, #16
14c48     84 CD B0 FD | 	call	#__system__Chr_S
14c4c     A7 FA 61 FC | 	wrlong	result1, fp
14c50     08 4E 05 F1 | 	add	fp, #8
14c54     A7 3E 68 FC | 	wrlong	#31, fp
14c58     08 4E 85 F1 | 	sub	fp, #8
14c5c     A7 12 02 F6 | 	mov	arg01, fp
14c60     70 5F BF FD | 	call	#_push
14c64                 | LR__1681
14c64     A7 F0 03 F6 | 	mov	ptra, fp
14c68     B2 00 A0 FD | 	call	#popregs_
14c6c                 | _do_chr_ret
14c6c     2D 00 64 FD | 	ret
14c70                 | 
14c70                 | ' 
14c70                 | ' sub do_val
14c70                 | _do_val
14c70     03 4A 05 F6 | 	mov	COUNT_, #3
14c74     A8 00 A0 FD | 	call	#pushregs_
14c78     20 F0 07 F1 | 	add	ptra, #32
14c7c     4A 00 00 FF 
14c80     B0 E4 05 F1 | 	add	objptr, ##38064
14c84     F2 16 02 FB | 	rdlong	arg03, objptr
14c88     0B 1F 02 F6 | 	mov	local01, arg03
14c8c     01 1E 66 F0 | 	shl	local01, #1
14c90     0B 1F 02 F1 | 	add	local01, arg03
14c94     02 1E 66 F0 | 	shl	local01, #2
14c98     03 00 00 FF 
14c9c     04 E4 85 F1 | 	sub	objptr, ##1540
14ca0     F2 1E 02 F1 | 	add	local01, objptr
14ca4     0F 17 02 FB | 	rdlong	arg03, local01
14ca8     0C 4E 05 F1 | 	add	fp, #12
14cac     A7 16 62 FC | 	wrlong	arg03, fp
14cb0                 | ' 
14cb0                 | ' numpar=compiledline(lineptr_e).result.uresult
14cb0                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
14cb0     0C 4E 85 F1 | 	sub	fp, #12
14cb4     02 16 16 F2 | 	cmp	arg03, #2 wc
14cb8     47 00 00 FF 
14cbc     AC E4 85 F1 | 	sub	objptr, ##36524
14cc0     0C 4E 05 C1 |  if_b	add	fp, #12
14cc4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
14cc8     0C 4E 85 C1 |  if_b	sub	fp, #12
14ccc     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1690
14cd0     00 12 06 F6 | 	mov	arg01, #0
14cd4     BC 04 B1 FD | 	call	#__system___getiolock_0508
14cd8     FD 12 02 F6 | 	mov	arg01, result1
14cdc     1C AB B0 FD | 	call	#__system___lockmem
14ce0     7A 01 00 FF 
14ce4     36 15 06 F6 | 	mov	arg02, ##@LR__5246
14ce8     00 12 06 F6 | 	mov	arg01, #0
14cec     00 16 06 F6 | 	mov	arg03, #0
14cf0     FC B7 B0 FD | 	call	#__system___basic_print_string
14cf4     00 12 06 F6 | 	mov	arg01, #0
14cf8     98 04 B1 FD | 	call	#__system___getiolock_0508
14cfc     FD 00 68 FC | 	wrlong	#0, result1
14d00     27 12 06 F6 | 	mov	arg01, #39
14d04     4C 66 B0 FD | 	call	#_printerror
14d08     5C 02 90 FD | 	jmp	#LR__1703
14d0c                 | LR__1690
14d0c     2C 5E BF FD | 	call	#_pop
14d10     FF 16 02 F6 | 	mov	arg03, result3
14d14     A7 FA 61 FC | 	wrlong	result1, fp
14d18     04 4E 05 F1 | 	add	fp, #4
14d1c     A7 FC 61 FC | 	wrlong	result2, fp
14d20     04 4E 05 F1 | 	add	fp, #4
14d24     A7 16 62 FC | 	wrlong	arg03, fp
14d28                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14d28     08 4E 85 F1 | 	sub	fp, #8
14d2c     2B 16 0E F2 | 	cmp	arg03, #43 wz
14d30     18 00 90 5D |  if_ne	jmp	#LR__1691
14d34     A7 12 02 FB | 	rdlong	arg01, fp
14d38     54 A9 BF FD | 	call	#_convertstring
14d3c     A7 FA 61 FC | 	wrlong	result1, fp
14d40     08 4E 05 F1 | 	add	fp, #8
14d44     A7 3E 68 FC | 	wrlong	#31, fp
14d48     08 4E 85 F1 | 	sub	fp, #8
14d4c                 | LR__1691
14d4c                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
14d4c     08 4E 05 F1 | 	add	fp, #8
14d50     A7 16 02 FB | 	rdlong	arg03, fp
14d54     08 4E 85 F1 | 	sub	fp, #8
14d58     1F 16 0E F2 | 	cmp	arg03, #31 wz
14d5c     3C 00 90 AD |  if_e	jmp	#LR__1692
14d60     00 12 06 F6 | 	mov	arg01, #0
14d64     2C 04 B1 FD | 	call	#__system___getiolock_0508
14d68     FD 12 02 F6 | 	mov	arg01, result1
14d6c     8C AA B0 FD | 	call	#__system___lockmem
14d70     7A 01 00 FF 
14d74     3C 15 06 F6 | 	mov	arg02, ##@LR__5247
14d78     00 12 06 F6 | 	mov	arg01, #0
14d7c     00 16 06 F6 | 	mov	arg03, #0
14d80     6C B7 B0 FD | 	call	#__system___basic_print_string
14d84     00 12 06 F6 | 	mov	arg01, #0
14d88     08 04 B1 FD | 	call	#__system___getiolock_0508
14d8c     FD 00 68 FC | 	wrlong	#0, result1
14d90     0F 12 06 F6 | 	mov	arg01, #15
14d94     BC 65 B0 FD | 	call	#_printerror
14d98     CC 01 90 FD | 	jmp	#LR__1703
14d9c                 | LR__1692
14d9c                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
14d9c     A7 12 02 FB | 	rdlong	arg01, fp
14da0     01 14 06 F6 | 	mov	arg02, #1
14da4     64 CA B0 FD | 	call	#__system__Left_S
14da8     FD 12 02 F6 | 	mov	arg01, result1
14dac     7A 01 00 FF 
14db0     42 15 06 F6 | 	mov	arg02, ##@LR__5248
14db4     6C AA B0 FD | 	call	#__system___string_cmp
14db8     00 FA 0D F2 | 	cmp	result1, #0 wz
14dbc     48 00 90 5D |  if_ne	jmp	#LR__1695
14dc0     7A 01 00 FF 
14dc4     44 1F 06 F6 | 	mov	local01, ##@LR__5249
14dc8     A7 16 02 FB | 	rdlong	arg03, fp
14dcc     0B 13 02 F6 | 	mov	arg01, arg03
14dd0     09 21 02 F6 | 	mov	local02, arg01
14dd4     97 06 48 FB | 	callpa	#(@LR__1694-@LR__1693)>>2,fcache_load_ptr_
14dd8                 | LR__1693
14dd8     10 FB C9 FA | 	rdbyte	result1, local02 wz
14ddc     01 20 06 51 |  if_ne	add	local02, #1
14de0     F4 FF 9F 5D |  if_ne	jmp	#LR__1693
14de4                 | LR__1694
14de4     09 21 82 F1 | 	sub	local02, arg01
14de8     10 15 02 F6 | 	mov	arg02, local02
14dec     01 14 86 F1 | 	sub	arg02, #1
14df0     0B 13 02 F6 | 	mov	arg01, arg03
14df4     9C CA B0 FD | 	call	#__system__Right_S
14df8     FD 14 02 F6 | 	mov	arg02, result1
14dfc     0F 13 02 F6 | 	mov	arg01, local01
14e00     54 AA B0 FD | 	call	#__system___string_concat
14e04     A7 FA 61 FC | 	wrlong	result1, fp
14e08                 | LR__1695
14e08                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
14e08     A7 12 02 FB | 	rdlong	arg01, fp
14e0c     01 14 06 F6 | 	mov	arg02, #1
14e10     F8 C9 B0 FD | 	call	#__system__Left_S
14e14     FD 12 02 F6 | 	mov	arg01, result1
14e18     7A 01 00 FF 
14e1c     47 15 06 F6 | 	mov	arg02, ##@LR__5250
14e20     00 AA B0 FD | 	call	#__system___string_cmp
14e24     00 FA 0D F2 | 	cmp	result1, #0 wz
14e28     48 00 90 5D |  if_ne	jmp	#LR__1698
14e2c     7A 01 00 FF 
14e30     49 1F 06 F6 | 	mov	local01, ##@LR__5251
14e34     A7 16 02 FB | 	rdlong	arg03, fp
14e38     0B 13 02 F6 | 	mov	arg01, arg03
14e3c     09 21 02 F6 | 	mov	local02, arg01
14e40     97 06 48 FB | 	callpa	#(@LR__1697-@LR__1696)>>2,fcache_load_ptr_
14e44                 | LR__1696
14e44     10 FB C9 FA | 	rdbyte	result1, local02 wz
14e48     01 20 06 51 |  if_ne	add	local02, #1
14e4c     F4 FF 9F 5D |  if_ne	jmp	#LR__1696
14e50                 | LR__1697
14e50     09 21 82 F1 | 	sub	local02, arg01
14e54     10 15 02 F6 | 	mov	arg02, local02
14e58     01 14 86 F1 | 	sub	arg02, #1
14e5c     0B 13 02 F6 | 	mov	arg01, arg03
14e60     30 CA B0 FD | 	call	#__system__Right_S
14e64     FD 14 02 F6 | 	mov	arg02, result1
14e68     0F 13 02 F6 | 	mov	arg01, local01
14e6c     E8 A9 B0 FD | 	call	#__system___string_concat
14e70     A7 FA 61 FC | 	wrlong	result1, fp
14e74                 | LR__1698
14e74     A7 12 02 FB | 	rdlong	arg01, fp
14e78     B0 DC B0 FD | 	call	#__system____builtin_atof
14e7c     1C 4E 05 F1 | 	add	fp, #28
14e80     A7 FA 61 FC | 	wrlong	result1, fp
14e84     1C 4E 85 F1 | 	sub	fp, #28
14e88     A7 12 02 FB | 	rdlong	arg01, fp
14e8c     00 14 06 F6 | 	mov	arg02, #0
14e90     28 DB B0 FD | 	call	#__system____builtin_atoi
14e94     18 4E 05 F1 | 	add	fp, #24
14e98     A7 FA 61 FC | 	wrlong	result1, fp
14e9c                 | ' fval=val(t1.result.sresult)
14e9c                 | ' ival=val%(t1.result.sresult)
14e9c                 | ' if fval=ival then
14e9c     04 4E 05 F1 | 	add	fp, #4
14ea0     A7 1E 02 FB | 	rdlong	local01, fp
14ea4     1C 4E 85 F1 | 	sub	fp, #28
14ea8     FD 12 52 F6 | 	abs	arg01, result1 wc
14eac     1F 22 C6 C9 |  if_b	decod	local03, #31
14eb0     00 22 06 36 |  if_ae	mov	local03, #0
14eb4     88 D0 B0 FD | 	call	#__system___float_fromuns
14eb8     11 FB 61 F5 | 	xor	result1, local03
14ebc     FD 14 02 F6 | 	mov	arg02, result1
14ec0     0F 13 02 F6 | 	mov	arg01, local01
14ec4     01 16 06 F6 | 	mov	arg03, #1
14ec8     AC D8 B0 FD | 	call	#__system___float_cmp
14ecc     00 FA 0D F2 | 	cmp	result1, #0 wz
14ed0     20 00 90 5D |  if_ne	jmp	#LR__1699
14ed4     18 4E 05 F1 | 	add	fp, #24
14ed8     A7 1E 02 FB | 	rdlong	local01, fp
14edc     18 4E 85 F1 | 	sub	fp, #24
14ee0     A7 1E 62 FC | 	wrlong	local01, fp
14ee4     08 4E 05 F1 | 	add	fp, #8
14ee8     A7 38 68 FC | 	wrlong	#28, fp
14eec     08 4E 85 F1 | 	sub	fp, #8
14ef0     6C 00 90 FD | 	jmp	#LR__1702
14ef4                 | LR__1699
14ef4                 | '   if fval=0 andalso ival<>0 then
14ef4     1C 4E 05 F1 | 	add	fp, #28
14ef8     A7 12 02 FB | 	rdlong	arg01, fp
14efc     1C 4E 85 F1 | 	sub	fp, #28
14f00     00 14 06 F6 | 	mov	arg02, #0
14f04     01 16 06 F6 | 	mov	arg03, #1
14f08     6C D8 B0 FD | 	call	#__system___float_cmp
14f0c     00 FA 0D F2 | 	cmp	result1, #0 wz
14f10     30 00 90 5D |  if_ne	jmp	#LR__1700
14f14     18 4E 05 F1 | 	add	fp, #24
14f18     A7 1E 0A FB | 	rdlong	local01, fp wz
14f1c     18 4E 85 F1 | 	sub	fp, #24
14f20     20 00 90 AD |  if_e	jmp	#LR__1700
14f24     18 4E 05 F1 | 	add	fp, #24
14f28     A7 1E 02 FB | 	rdlong	local01, fp
14f2c     18 4E 85 F1 | 	sub	fp, #24
14f30     A7 1E 62 FC | 	wrlong	local01, fp
14f34     08 4E 05 F1 | 	add	fp, #8
14f38     A7 38 68 FC | 	wrlong	#28, fp
14f3c     08 4E 85 F1 | 	sub	fp, #8
14f40     1C 00 90 FD | 	jmp	#LR__1701
14f44                 | LR__1700
14f44     1C 4E 05 F1 | 	add	fp, #28
14f48     A7 1E 02 FB | 	rdlong	local01, fp
14f4c     1C 4E 85 F1 | 	sub	fp, #28
14f50     A7 1E 62 FC | 	wrlong	local01, fp
14f54     08 4E 05 F1 | 	add	fp, #8
14f58     A7 3C 68 FC | 	wrlong	#30, fp
14f5c     08 4E 85 F1 | 	sub	fp, #8
14f60                 | LR__1701
14f60                 | LR__1702
14f60     A7 12 02 F6 | 	mov	arg01, fp
14f64     6C 5C BF FD | 	call	#_push
14f68                 | LR__1703
14f68     A7 F0 03 F6 | 	mov	ptra, fp
14f6c     B2 00 A0 FD | 	call	#popregs_
14f70                 | _do_val_ret
14f70     2D 00 64 FD | 	ret
14f74                 | 
14f74                 | ' 
14f74                 | ' 
14f74                 | ' sub do_hex
14f74                 | _do_hex
14f74     01 4A 05 F6 | 	mov	COUNT_, #1
14f78     A8 00 A0 FD | 	call	#pushregs_
14f7c     18 F0 07 F1 | 	add	ptra, #24
14f80     4A 00 00 FF 
14f84     B0 E4 05 F1 | 	add	objptr, ##38064
14f88     F2 1E 02 FB | 	rdlong	local01, objptr
14f8c     0F 17 02 F6 | 	mov	arg03, local01
14f90     01 16 66 F0 | 	shl	arg03, #1
14f94     0F 17 02 F1 | 	add	arg03, local01
14f98     02 16 66 F0 | 	shl	arg03, #2
14f9c     03 00 00 FF 
14fa0     04 E4 85 F1 | 	sub	objptr, ##1540
14fa4     F2 16 02 F1 | 	add	arg03, objptr
14fa8     0B 17 02 FB | 	rdlong	arg03, arg03
14fac     0C 4E 05 F1 | 	add	fp, #12
14fb0     A7 16 62 FC | 	wrlong	arg03, fp
14fb4                 | ' 
14fb4                 | ' numpar=compiledline(lineptr_e).result.uresult
14fb4                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
14fb4     0C 4E 85 F1 | 	sub	fp, #12
14fb8     03 16 16 F2 | 	cmp	arg03, #3 wc
14fbc     47 00 00 FF 
14fc0     AC E4 85 F1 | 	sub	objptr, ##36524
14fc4     0C 4E 05 C1 |  if_b	add	fp, #12
14fc8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
14fcc     0C 4E 85 C1 |  if_b	sub	fp, #12
14fd0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1710
14fd4     00 12 06 F6 | 	mov	arg01, #0
14fd8     B8 01 B1 FD | 	call	#__system___getiolock_0508
14fdc     FD 12 02 F6 | 	mov	arg01, result1
14fe0     18 A8 B0 FD | 	call	#__system___lockmem
14fe4     7A 01 00 FF 
14fe8     4C 15 06 F6 | 	mov	arg02, ##@LR__5252
14fec     00 12 06 F6 | 	mov	arg01, #0
14ff0     00 16 06 F6 | 	mov	arg03, #0
14ff4     F8 B4 B0 FD | 	call	#__system___basic_print_string
14ff8     00 12 06 F6 | 	mov	arg01, #0
14ffc     94 01 B1 FD | 	call	#__system___getiolock_0508
15000     FD 00 68 FC | 	wrlong	#0, result1
15004     27 12 06 F6 | 	mov	arg01, #39
15008     48 63 B0 FD | 	call	#_printerror
1500c     B8 00 90 FD | 	jmp	#LR__1713
15010                 | LR__1710
15010                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
15010     0C 4E 05 F1 | 	add	fp, #12
15014     A7 1E 02 FB | 	rdlong	local01, fp
15018     0C 4E 85 F1 | 	sub	fp, #12
1501c     02 1E 0E F2 | 	cmp	local01, #2 wz
15020     38 00 90 5D |  if_ne	jmp	#LR__1711
15024     14 5B BF FD | 	call	#_pop
15028     FF 1E 02 F6 | 	mov	local01, result3
1502c     A7 FA 61 FC | 	wrlong	result1, fp
15030     04 4E 05 F1 | 	add	fp, #4
15034     A7 FC 61 FC | 	wrlong	result2, fp
15038     04 4E 05 F1 | 	add	fp, #4
1503c     A7 1E 62 FC | 	wrlong	local01, fp
15040     08 4E 85 F1 | 	sub	fp, #8
15044     A7 12 02 F6 | 	mov	arg01, fp
15048     68 EE BF FD | 	call	#_converttoint
1504c     14 4E 05 F1 | 	add	fp, #20
15050     A7 FA 61 FC | 	wrlong	result1, fp
15054     14 4E 85 F1 | 	sub	fp, #20
15058     0C 00 90 FD | 	jmp	#LR__1712
1505c                 | LR__1711
1505c     14 4E 05 F1 | 	add	fp, #20
15060     A7 10 68 FC | 	wrlong	#8, fp
15064     14 4E 85 F1 | 	sub	fp, #20
15068                 | LR__1712
15068     D0 5A BF FD | 	call	#_pop
1506c     FF 1E 02 F6 | 	mov	local01, result3
15070     A7 FA 61 FC | 	wrlong	result1, fp
15074     04 4E 05 F1 | 	add	fp, #4
15078     A7 FC 61 FC | 	wrlong	result2, fp
1507c     04 4E 05 F1 | 	add	fp, #4
15080     A7 1E 62 FC | 	wrlong	local01, fp
15084     08 4E 85 F1 | 	sub	fp, #8
15088     A7 12 02 F6 | 	mov	arg01, fp
1508c     24 EE BF FD | 	call	#_converttoint
15090     10 4E 05 F1 | 	add	fp, #16
15094     A7 FA 61 FC | 	wrlong	result1, fp
15098     FD 12 02 F6 | 	mov	arg01, result1
1509c     04 4E 05 F1 | 	add	fp, #4
150a0     A7 14 02 FB | 	rdlong	arg02, fp
150a4     14 4E 85 F1 | 	sub	fp, #20
150a8     10 16 06 F6 | 	mov	arg03, #16
150ac     B0 C9 B0 FD | 	call	#__system__Number_S
150b0     A7 FA 61 FC | 	wrlong	result1, fp
150b4     08 4E 05 F1 | 	add	fp, #8
150b8     A7 3E 68 FC | 	wrlong	#31, fp
150bc     08 4E 85 F1 | 	sub	fp, #8
150c0     A7 12 02 F6 | 	mov	arg01, fp
150c4     0C 5B BF FD | 	call	#_push
150c8                 | LR__1713
150c8     A7 F0 03 F6 | 	mov	ptra, fp
150cc     B2 00 A0 FD | 	call	#popregs_
150d0                 | _do_hex_ret
150d0     2D 00 64 FD | 	ret
150d4                 | 
150d4                 | ' 
150d4                 | ' sub do_bin
150d4                 | _do_bin
150d4     01 4A 05 F6 | 	mov	COUNT_, #1
150d8     A8 00 A0 FD | 	call	#pushregs_
150dc     18 F0 07 F1 | 	add	ptra, #24
150e0     4A 00 00 FF 
150e4     B0 E4 05 F1 | 	add	objptr, ##38064
150e8     F2 1E 02 FB | 	rdlong	local01, objptr
150ec     0F 17 02 F6 | 	mov	arg03, local01
150f0     01 16 66 F0 | 	shl	arg03, #1
150f4     0F 17 02 F1 | 	add	arg03, local01
150f8     02 16 66 F0 | 	shl	arg03, #2
150fc     03 00 00 FF 
15100     04 E4 85 F1 | 	sub	objptr, ##1540
15104     F2 16 02 F1 | 	add	arg03, objptr
15108     0B 17 02 FB | 	rdlong	arg03, arg03
1510c     0C 4E 05 F1 | 	add	fp, #12
15110     A7 16 62 FC | 	wrlong	arg03, fp
15114                 | ' 
15114                 | ' numpar=compiledline(lineptr_e).result.uresult
15114                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
15114     0C 4E 85 F1 | 	sub	fp, #12
15118     03 16 16 F2 | 	cmp	arg03, #3 wc
1511c     47 00 00 FF 
15120     AC E4 85 F1 | 	sub	objptr, ##36524
15124     0C 4E 05 C1 |  if_b	add	fp, #12
15128     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1512c     0C 4E 85 C1 |  if_b	sub	fp, #12
15130     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1720
15134     00 12 06 F6 | 	mov	arg01, #0
15138     58 00 B1 FD | 	call	#__system___getiolock_0508
1513c     FD 12 02 F6 | 	mov	arg01, result1
15140     B8 A6 B0 FD | 	call	#__system___lockmem
15144     7A 01 00 FF 
15148     53 15 06 F6 | 	mov	arg02, ##@LR__5253
1514c     00 12 06 F6 | 	mov	arg01, #0
15150     00 16 06 F6 | 	mov	arg03, #0
15154     98 B3 B0 FD | 	call	#__system___basic_print_string
15158     00 12 06 F6 | 	mov	arg01, #0
1515c     34 00 B1 FD | 	call	#__system___getiolock_0508
15160     FD 00 68 FC | 	wrlong	#0, result1
15164     27 12 06 F6 | 	mov	arg01, #39
15168     E8 61 B0 FD | 	call	#_printerror
1516c     B8 00 90 FD | 	jmp	#LR__1723
15170                 | LR__1720
15170                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
15170     0C 4E 05 F1 | 	add	fp, #12
15174     A7 1E 02 FB | 	rdlong	local01, fp
15178     0C 4E 85 F1 | 	sub	fp, #12
1517c     02 1E 0E F2 | 	cmp	local01, #2 wz
15180     38 00 90 5D |  if_ne	jmp	#LR__1721
15184     B4 59 BF FD | 	call	#_pop
15188     FF 1E 02 F6 | 	mov	local01, result3
1518c     A7 FA 61 FC | 	wrlong	result1, fp
15190     04 4E 05 F1 | 	add	fp, #4
15194     A7 FC 61 FC | 	wrlong	result2, fp
15198     04 4E 05 F1 | 	add	fp, #4
1519c     A7 1E 62 FC | 	wrlong	local01, fp
151a0     08 4E 85 F1 | 	sub	fp, #8
151a4     A7 12 02 F6 | 	mov	arg01, fp
151a8     08 ED BF FD | 	call	#_converttoint
151ac     14 4E 05 F1 | 	add	fp, #20
151b0     A7 FA 61 FC | 	wrlong	result1, fp
151b4     14 4E 85 F1 | 	sub	fp, #20
151b8     0C 00 90 FD | 	jmp	#LR__1722
151bc                 | LR__1721
151bc     14 4E 05 F1 | 	add	fp, #20
151c0     A7 00 68 FC | 	wrlong	#0, fp
151c4     14 4E 85 F1 | 	sub	fp, #20
151c8                 | LR__1722
151c8     70 59 BF FD | 	call	#_pop
151cc     FF 1E 02 F6 | 	mov	local01, result3
151d0     A7 FA 61 FC | 	wrlong	result1, fp
151d4     04 4E 05 F1 | 	add	fp, #4
151d8     A7 FC 61 FC | 	wrlong	result2, fp
151dc     04 4E 05 F1 | 	add	fp, #4
151e0     A7 1E 62 FC | 	wrlong	local01, fp
151e4     08 4E 85 F1 | 	sub	fp, #8
151e8     A7 12 02 F6 | 	mov	arg01, fp
151ec     C4 EC BF FD | 	call	#_converttoint
151f0     10 4E 05 F1 | 	add	fp, #16
151f4     A7 FA 61 FC | 	wrlong	result1, fp
151f8     FD 12 02 F6 | 	mov	arg01, result1
151fc     04 4E 05 F1 | 	add	fp, #4
15200     A7 14 02 FB | 	rdlong	arg02, fp
15204     14 4E 85 F1 | 	sub	fp, #20
15208     02 16 06 F6 | 	mov	arg03, #2
1520c     50 C8 B0 FD | 	call	#__system__Number_S
15210     A7 FA 61 FC | 	wrlong	result1, fp
15214     08 4E 05 F1 | 	add	fp, #8
15218     A7 3E 68 FC | 	wrlong	#31, fp
1521c     08 4E 85 F1 | 	sub	fp, #8
15220     A7 12 02 F6 | 	mov	arg01, fp
15224     AC 59 BF FD | 	call	#_push
15228                 | LR__1723
15228     A7 F0 03 F6 | 	mov	ptra, fp
1522c     B2 00 A0 FD | 	call	#popregs_
15230                 | _do_bin_ret
15230     2D 00 64 FD | 	ret
15234                 | 
15234                 | ' 
15234                 | ' sub do_cos
15234                 | _do_cos
15234     01 4A 05 F6 | 	mov	COUNT_, #1
15238     A8 00 A0 FD | 	call	#pushregs_
1523c     10 F0 07 F1 | 	add	ptra, #16
15240     4A 00 00 FF 
15244     B0 E4 05 F1 | 	add	objptr, ##38064
15248     F2 1E 02 FB | 	rdlong	local01, objptr
1524c     0F 17 02 F6 | 	mov	arg03, local01
15250     01 16 66 F0 | 	shl	arg03, #1
15254     0F 17 02 F1 | 	add	arg03, local01
15258     02 16 66 F0 | 	shl	arg03, #2
1525c     03 00 00 FF 
15260     04 E4 85 F1 | 	sub	objptr, ##1540
15264     F2 16 02 F1 | 	add	arg03, objptr
15268     0B 17 02 FB | 	rdlong	arg03, arg03
1526c     0C 4E 05 F1 | 	add	fp, #12
15270     A7 16 62 FC | 	wrlong	arg03, fp
15274                 | ' 
15274                 | ' numpar=compiledline(lineptr_e).result.uresult
15274                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
15274     0C 4E 85 F1 | 	sub	fp, #12
15278     02 16 16 F2 | 	cmp	arg03, #2 wc
1527c     47 00 00 FF 
15280     AC E4 85 F1 | 	sub	objptr, ##36524
15284     0C 4E 05 C1 |  if_b	add	fp, #12
15288     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1528c     0C 4E 85 C1 |  if_b	sub	fp, #12
15290     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1730
15294     00 12 06 F6 | 	mov	arg01, #0
15298     F8 FE B0 FD | 	call	#__system___getiolock_0508
1529c     FD 12 02 F6 | 	mov	arg01, result1
152a0     58 A5 B0 FD | 	call	#__system___lockmem
152a4     7A 01 00 FF 
152a8     5A 15 06 F6 | 	mov	arg02, ##@LR__5254
152ac     00 12 06 F6 | 	mov	arg01, #0
152b0     00 16 06 F6 | 	mov	arg03, #0
152b4     38 B2 B0 FD | 	call	#__system___basic_print_string
152b8     00 12 06 F6 | 	mov	arg01, #0
152bc     D4 FE B0 FD | 	call	#__system___getiolock_0508
152c0     FD 00 68 FC | 	wrlong	#0, result1
152c4     27 12 06 F6 | 	mov	arg01, #39
152c8     88 60 B0 FD | 	call	#_printerror
152cc     78 00 90 FD | 	jmp	#LR__1731
152d0                 | LR__1730
152d0     68 58 BF FD | 	call	#_pop
152d4     A7 FA 61 FC | 	wrlong	result1, fp
152d8     04 4E 05 F1 | 	add	fp, #4
152dc     A7 FC 61 FC | 	wrlong	result2, fp
152e0     04 4E 05 F1 | 	add	fp, #4
152e4     A7 FE 61 FC | 	wrlong	result3, fp
152e8     08 4E 85 F1 | 	sub	fp, #8
152ec     59 00 00 FF 
152f0     C8 E5 05 F1 | 	add	objptr, ##46024
152f4     F2 1E 02 FB | 	rdlong	local01, objptr
152f8     59 00 00 FF 
152fc     C8 E5 85 F1 | 	sub	objptr, ##46024
15300     A7 12 02 F6 | 	mov	arg01, fp
15304     58 EC BF FD | 	call	#_converttofloat
15308     FD 14 02 F6 | 	mov	arg02, result1
1530c     0F 13 02 F6 | 	mov	arg01, local01
15310     30 D0 B0 FD | 	call	#__system___float_mul
15314     FD 14 02 F6 | 	mov	arg02, result1
15318     87 E4 1F FF 
1531c     DB 13 06 F6 | 	mov	arg01, ##1070141403
15320     1F 14 E6 F4 | 	bitnot	arg02, #31
15324     4C CC B0 FD | 	call	#__system___float_add
15328     FD 12 02 F6 | 	mov	arg01, result1
1532c     50 D9 B0 FD | 	call	#__system____builtin_sinf
15330     A7 FA 61 FC | 	wrlong	result1, fp
15334     08 4E 05 F1 | 	add	fp, #8
15338     A7 3C 68 FC | 	wrlong	#30, fp
1533c     08 4E 85 F1 | 	sub	fp, #8
15340     A7 12 02 F6 | 	mov	arg01, fp
15344     8C 58 BF FD | 	call	#_push
15348                 | LR__1731
15348     A7 F0 03 F6 | 	mov	ptra, fp
1534c     B2 00 A0 FD | 	call	#popregs_
15350                 | _do_cos_ret
15350     2D 00 64 FD | 	ret
15354                 | 
15354                 | ' 
15354                 | ' sub do_tan
15354                 | _do_tan
15354     01 4A 05 F6 | 	mov	COUNT_, #1
15358     A8 00 A0 FD | 	call	#pushregs_
1535c     10 F0 07 F1 | 	add	ptra, #16
15360     4A 00 00 FF 
15364     B0 E4 05 F1 | 	add	objptr, ##38064
15368     F2 1E 02 FB | 	rdlong	local01, objptr
1536c     0F 17 02 F6 | 	mov	arg03, local01
15370     01 16 66 F0 | 	shl	arg03, #1
15374     0F 17 02 F1 | 	add	arg03, local01
15378     02 16 66 F0 | 	shl	arg03, #2
1537c     03 00 00 FF 
15380     04 E4 85 F1 | 	sub	objptr, ##1540
15384     F2 16 02 F1 | 	add	arg03, objptr
15388     0B 17 02 FB | 	rdlong	arg03, arg03
1538c     0C 4E 05 F1 | 	add	fp, #12
15390     A7 16 62 FC | 	wrlong	arg03, fp
15394                 | ' 
15394                 | ' numpar=compiledline(lineptr_e).result.uresult
15394                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
15394     0C 4E 85 F1 | 	sub	fp, #12
15398     02 16 16 F2 | 	cmp	arg03, #2 wc
1539c     47 00 00 FF 
153a0     AC E4 85 F1 | 	sub	objptr, ##36524
153a4     0C 4E 05 C1 |  if_b	add	fp, #12
153a8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
153ac     0C 4E 85 C1 |  if_b	sub	fp, #12
153b0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1740
153b4     00 12 06 F6 | 	mov	arg01, #0
153b8     D8 FD B0 FD | 	call	#__system___getiolock_0508
153bc     FD 12 02 F6 | 	mov	arg01, result1
153c0     38 A4 B0 FD | 	call	#__system___lockmem
153c4     7A 01 00 FF 
153c8     60 15 06 F6 | 	mov	arg02, ##@LR__5255
153cc     00 12 06 F6 | 	mov	arg01, #0
153d0     00 16 06 F6 | 	mov	arg03, #0
153d4     18 B1 B0 FD | 	call	#__system___basic_print_string
153d8     00 12 06 F6 | 	mov	arg01, #0
153dc     B4 FD B0 FD | 	call	#__system___getiolock_0508
153e0     FD 00 68 FC | 	wrlong	#0, result1
153e4     27 12 06 F6 | 	mov	arg01, #39
153e8     68 5F B0 FD | 	call	#_printerror
153ec     64 00 90 FD | 	jmp	#LR__1741
153f0                 | LR__1740
153f0     48 57 BF FD | 	call	#_pop
153f4     A7 FA 61 FC | 	wrlong	result1, fp
153f8     04 4E 05 F1 | 	add	fp, #4
153fc     A7 FC 61 FC | 	wrlong	result2, fp
15400     04 4E 05 F1 | 	add	fp, #4
15404     A7 FE 61 FC | 	wrlong	result3, fp
15408     08 4E 85 F1 | 	sub	fp, #8
1540c     59 00 00 FF 
15410     C8 E5 05 F1 | 	add	objptr, ##46024
15414     F2 1E 02 FB | 	rdlong	local01, objptr
15418     59 00 00 FF 
1541c     C8 E5 85 F1 | 	sub	objptr, ##46024
15420     A7 12 02 F6 | 	mov	arg01, fp
15424     38 EB BF FD | 	call	#_converttofloat
15428     FD 14 02 F6 | 	mov	arg02, result1
1542c     0F 13 02 F6 | 	mov	arg01, local01
15430     10 CF B0 FD | 	call	#__system___float_mul
15434     FD 12 02 F6 | 	mov	arg01, result1
15438     90 D9 B0 FD | 	call	#__system____builtin_tanf
1543c     A7 FA 61 FC | 	wrlong	result1, fp
15440     08 4E 05 F1 | 	add	fp, #8
15444     A7 3C 68 FC | 	wrlong	#30, fp
15448     08 4E 85 F1 | 	sub	fp, #8
1544c     A7 12 02 F6 | 	mov	arg01, fp
15450     80 57 BF FD | 	call	#_push
15454                 | LR__1741
15454     A7 F0 03 F6 | 	mov	ptra, fp
15458     B2 00 A0 FD | 	call	#popregs_
1545c                 | _do_tan_ret
1545c     2D 00 64 FD | 	ret
15460                 | 
15460                 | ' 
15460                 | ' sub do_asin
15460                 | _do_asin
15460     01 4A 05 F6 | 	mov	COUNT_, #1
15464     A8 00 A0 FD | 	call	#pushregs_
15468     10 F0 07 F1 | 	add	ptra, #16
1546c     4A 00 00 FF 
15470     B0 E4 05 F1 | 	add	objptr, ##38064
15474     F2 1E 02 FB | 	rdlong	local01, objptr
15478     0F 17 02 F6 | 	mov	arg03, local01
1547c     01 16 66 F0 | 	shl	arg03, #1
15480     0F 17 02 F1 | 	add	arg03, local01
15484     02 16 66 F0 | 	shl	arg03, #2
15488     03 00 00 FF 
1548c     04 E4 85 F1 | 	sub	objptr, ##1540
15490     F2 16 02 F1 | 	add	arg03, objptr
15494     0B 17 02 FB | 	rdlong	arg03, arg03
15498     0C 4E 05 F1 | 	add	fp, #12
1549c     A7 16 62 FC | 	wrlong	arg03, fp
154a0                 | ' 
154a0                 | ' numpar=compiledline(lineptr_e).result.uresult
154a0                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
154a0     0C 4E 85 F1 | 	sub	fp, #12
154a4     02 16 16 F2 | 	cmp	arg03, #2 wc
154a8     47 00 00 FF 
154ac     AC E4 85 F1 | 	sub	objptr, ##36524
154b0     0C 4E 05 C1 |  if_b	add	fp, #12
154b4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
154b8     0C 4E 85 C1 |  if_b	sub	fp, #12
154bc     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1750
154c0     00 12 06 F6 | 	mov	arg01, #0
154c4     CC FC B0 FD | 	call	#__system___getiolock_0508
154c8     FD 12 02 F6 | 	mov	arg01, result1
154cc     2C A3 B0 FD | 	call	#__system___lockmem
154d0     7A 01 00 FF 
154d4     66 15 06 F6 | 	mov	arg02, ##@LR__5256
154d8     00 12 06 F6 | 	mov	arg01, #0
154dc     00 16 06 F6 | 	mov	arg03, #0
154e0     0C B0 B0 FD | 	call	#__system___basic_print_string
154e4     00 12 06 F6 | 	mov	arg01, #0
154e8     A8 FC B0 FD | 	call	#__system___getiolock_0508
154ec     FD 00 68 FC | 	wrlong	#0, result1
154f0     27 12 06 F6 | 	mov	arg01, #39
154f4     5C 5E B0 FD | 	call	#_printerror
154f8     64 00 90 FD | 	jmp	#LR__1751
154fc                 | LR__1750
154fc     3C 56 BF FD | 	call	#_pop
15500     FF 1E 02 F6 | 	mov	local01, result3
15504     A7 FA 61 FC | 	wrlong	result1, fp
15508     04 4E 05 F1 | 	add	fp, #4
1550c     A7 FC 61 FC | 	wrlong	result2, fp
15510     04 4E 05 F1 | 	add	fp, #4
15514     A7 1E 62 FC | 	wrlong	local01, fp
15518     08 4E 85 F1 | 	sub	fp, #8
1551c     A7 12 02 F6 | 	mov	arg01, fp
15520     3C EA BF FD | 	call	#_converttofloat
15524     FD 12 02 F6 | 	mov	arg01, result1
15528     E8 D8 B0 FD | 	call	#__system____builtin_asinf
1552c     FD 12 02 F6 | 	mov	arg01, result1
15530     59 00 00 FF 
15534     CC E5 05 F1 | 	add	objptr, ##46028
15538     F2 14 02 FB | 	rdlong	arg02, objptr
1553c     59 00 00 FF 
15540     CC E5 85 F1 | 	sub	objptr, ##46028
15544     FC CD B0 FD | 	call	#__system___float_mul
15548     A7 FA 61 FC | 	wrlong	result1, fp
1554c     08 4E 05 F1 | 	add	fp, #8
15550     A7 3C 68 FC | 	wrlong	#30, fp
15554     08 4E 85 F1 | 	sub	fp, #8
15558     A7 12 02 F6 | 	mov	arg01, fp
1555c     74 56 BF FD | 	call	#_push
15560                 | LR__1751
15560     A7 F0 03 F6 | 	mov	ptra, fp
15564     B2 00 A0 FD | 	call	#popregs_
15568                 | _do_asin_ret
15568     2D 00 64 FD | 	ret
1556c                 | 
1556c                 | ' 
1556c                 | ' sub do_acos
1556c                 | _do_acos
1556c     01 4A 05 F6 | 	mov	COUNT_, #1
15570     A8 00 A0 FD | 	call	#pushregs_
15574     10 F0 07 F1 | 	add	ptra, #16
15578     4A 00 00 FF 
1557c     B0 E4 05 F1 | 	add	objptr, ##38064
15580     F2 1E 02 FB | 	rdlong	local01, objptr
15584     0F 17 02 F6 | 	mov	arg03, local01
15588     01 16 66 F0 | 	shl	arg03, #1
1558c     0F 17 02 F1 | 	add	arg03, local01
15590     02 16 66 F0 | 	shl	arg03, #2
15594     03 00 00 FF 
15598     04 E4 85 F1 | 	sub	objptr, ##1540
1559c     F2 16 02 F1 | 	add	arg03, objptr
155a0     0B 17 02 FB | 	rdlong	arg03, arg03
155a4     0C 4E 05 F1 | 	add	fp, #12
155a8     A7 16 62 FC | 	wrlong	arg03, fp
155ac                 | ' 
155ac                 | ' numpar=compiledline(lineptr_e).result.uresult
155ac                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
155ac     0C 4E 85 F1 | 	sub	fp, #12
155b0     02 16 16 F2 | 	cmp	arg03, #2 wc
155b4     47 00 00 FF 
155b8     AC E4 85 F1 | 	sub	objptr, ##36524
155bc     0C 4E 05 C1 |  if_b	add	fp, #12
155c0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
155c4     0C 4E 85 C1 |  if_b	sub	fp, #12
155c8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1760
155cc     00 12 06 F6 | 	mov	arg01, #0
155d0     C0 FB B0 FD | 	call	#__system___getiolock_0508
155d4     FD 12 02 F6 | 	mov	arg01, result1
155d8     20 A2 B0 FD | 	call	#__system___lockmem
155dc     7A 01 00 FF 
155e0     6D 15 06 F6 | 	mov	arg02, ##@LR__5257
155e4     00 12 06 F6 | 	mov	arg01, #0
155e8     00 16 06 F6 | 	mov	arg03, #0
155ec     00 AF B0 FD | 	call	#__system___basic_print_string
155f0     00 12 06 F6 | 	mov	arg01, #0
155f4     9C FB B0 FD | 	call	#__system___getiolock_0508
155f8     FD 00 68 FC | 	wrlong	#0, result1
155fc     27 12 06 F6 | 	mov	arg01, #39
15600     50 5D B0 FD | 	call	#_printerror
15604     64 00 90 FD | 	jmp	#LR__1761
15608                 | LR__1760
15608     30 55 BF FD | 	call	#_pop
1560c     FF 1E 02 F6 | 	mov	local01, result3
15610     A7 FA 61 FC | 	wrlong	result1, fp
15614     04 4E 05 F1 | 	add	fp, #4
15618     A7 FC 61 FC | 	wrlong	result2, fp
1561c     04 4E 05 F1 | 	add	fp, #4
15620     A7 1E 62 FC | 	wrlong	local01, fp
15624     08 4E 85 F1 | 	sub	fp, #8
15628     A7 12 02 F6 | 	mov	arg01, fp
1562c     30 E9 BF FD | 	call	#_converttofloat
15630     FD 12 02 F6 | 	mov	arg01, result1
15634     28 D8 B0 FD | 	call	#__system____builtin_acosf
15638     FD 12 02 F6 | 	mov	arg01, result1
1563c     59 00 00 FF 
15640     CC E5 05 F1 | 	add	objptr, ##46028
15644     F2 14 02 FB | 	rdlong	arg02, objptr
15648     59 00 00 FF 
1564c     CC E5 85 F1 | 	sub	objptr, ##46028
15650     F0 CC B0 FD | 	call	#__system___float_mul
15654     A7 FA 61 FC | 	wrlong	result1, fp
15658     08 4E 05 F1 | 	add	fp, #8
1565c     A7 3C 68 FC | 	wrlong	#30, fp
15660     08 4E 85 F1 | 	sub	fp, #8
15664     A7 12 02 F6 | 	mov	arg01, fp
15668     68 55 BF FD | 	call	#_push
1566c                 | LR__1761
1566c     A7 F0 03 F6 | 	mov	ptra, fp
15670     B2 00 A0 FD | 	call	#popregs_
15674                 | _do_acos_ret
15674     2D 00 64 FD | 	ret
15678                 | 
15678                 | ' 
15678                 | ' sub do_atn
15678                 | _do_atn
15678     01 4A 05 F6 | 	mov	COUNT_, #1
1567c     A8 00 A0 FD | 	call	#pushregs_
15680     10 F0 07 F1 | 	add	ptra, #16
15684     4A 00 00 FF 
15688     B0 E4 05 F1 | 	add	objptr, ##38064
1568c     F2 1E 02 FB | 	rdlong	local01, objptr
15690     0F 17 02 F6 | 	mov	arg03, local01
15694     01 16 66 F0 | 	shl	arg03, #1
15698     0F 17 02 F1 | 	add	arg03, local01
1569c     02 16 66 F0 | 	shl	arg03, #2
156a0     03 00 00 FF 
156a4     04 E4 85 F1 | 	sub	objptr, ##1540
156a8     F2 16 02 F1 | 	add	arg03, objptr
156ac     0B 17 02 FB | 	rdlong	arg03, arg03
156b0     0C 4E 05 F1 | 	add	fp, #12
156b4     A7 16 62 FC | 	wrlong	arg03, fp
156b8                 | ' 
156b8                 | ' numpar=compiledline(lineptr_e).result.uresult
156b8                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
156b8     0C 4E 85 F1 | 	sub	fp, #12
156bc     02 16 16 F2 | 	cmp	arg03, #2 wc
156c0     47 00 00 FF 
156c4     AC E4 85 F1 | 	sub	objptr, ##36524
156c8     0C 4E 05 C1 |  if_b	add	fp, #12
156cc     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
156d0     0C 4E 85 C1 |  if_b	sub	fp, #12
156d4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1770
156d8     00 12 06 F6 | 	mov	arg01, #0
156dc     B4 FA B0 FD | 	call	#__system___getiolock_0508
156e0     FD 12 02 F6 | 	mov	arg01, result1
156e4     14 A1 B0 FD | 	call	#__system___lockmem
156e8     7A 01 00 FF 
156ec     74 15 06 F6 | 	mov	arg02, ##@LR__5258
156f0     00 12 06 F6 | 	mov	arg01, #0
156f4     00 16 06 F6 | 	mov	arg03, #0
156f8     F4 AD B0 FD | 	call	#__system___basic_print_string
156fc     00 12 06 F6 | 	mov	arg01, #0
15700     90 FA B0 FD | 	call	#__system___getiolock_0508
15704     FD 00 68 FC | 	wrlong	#0, result1
15708     27 12 06 F6 | 	mov	arg01, #39
1570c     44 5C B0 FD | 	call	#_printerror
15710     6C 00 90 FD | 	jmp	#LR__1771
15714                 | LR__1770
15714     24 54 BF FD | 	call	#_pop
15718     FF 1E 02 F6 | 	mov	local01, result3
1571c     A7 FA 61 FC | 	wrlong	result1, fp
15720     04 4E 05 F1 | 	add	fp, #4
15724     A7 FC 61 FC | 	wrlong	result2, fp
15728     04 4E 05 F1 | 	add	fp, #4
1572c     A7 1E 62 FC | 	wrlong	local01, fp
15730     08 4E 85 F1 | 	sub	fp, #8
15734     A7 12 02 F6 | 	mov	arg01, fp
15738     24 E8 BF FD | 	call	#_converttofloat
1573c     FD 12 02 F6 | 	mov	arg01, result1
15740     00 C0 1F FF 
15744     00 14 06 F6 | 	mov	arg02, ##1065353216
15748     60 D7 B0 FD | 	call	#__system____builtin_atan2f
1574c     FD 12 02 F6 | 	mov	arg01, result1
15750     59 00 00 FF 
15754     CC E5 05 F1 | 	add	objptr, ##46028
15758     F2 14 02 FB | 	rdlong	arg02, objptr
1575c     59 00 00 FF 
15760     CC E5 85 F1 | 	sub	objptr, ##46028
15764     DC CB B0 FD | 	call	#__system___float_mul
15768     A7 FA 61 FC | 	wrlong	result1, fp
1576c     08 4E 05 F1 | 	add	fp, #8
15770     A7 3C 68 FC | 	wrlong	#30, fp
15774     08 4E 85 F1 | 	sub	fp, #8
15778     A7 12 02 F6 | 	mov	arg01, fp
1577c     54 54 BF FD | 	call	#_push
15780                 | LR__1771
15780     A7 F0 03 F6 | 	mov	ptra, fp
15784     B2 00 A0 FD | 	call	#popregs_
15788                 | _do_atn_ret
15788     2D 00 64 FD | 	ret
1578c                 | 
1578c                 | ' 
1578c                 | ' sub do_sqr
1578c                 | _do_sqr
1578c     01 4A 05 F6 | 	mov	COUNT_, #1
15790     A8 00 A0 FD | 	call	#pushregs_
15794     10 F0 07 F1 | 	add	ptra, #16
15798     4A 00 00 FF 
1579c     B0 E4 05 F1 | 	add	objptr, ##38064
157a0     F2 1E 02 FB | 	rdlong	local01, objptr
157a4     0F 17 02 F6 | 	mov	arg03, local01
157a8     01 16 66 F0 | 	shl	arg03, #1
157ac     0F 17 02 F1 | 	add	arg03, local01
157b0     02 16 66 F0 | 	shl	arg03, #2
157b4     03 00 00 FF 
157b8     04 E4 85 F1 | 	sub	objptr, ##1540
157bc     F2 16 02 F1 | 	add	arg03, objptr
157c0     0B 17 02 FB | 	rdlong	arg03, arg03
157c4     0C 4E 05 F1 | 	add	fp, #12
157c8     A7 16 62 FC | 	wrlong	arg03, fp
157cc                 | ' 
157cc                 | ' numpar=compiledline(lineptr_e).result.uresult
157cc                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
157cc     0C 4E 85 F1 | 	sub	fp, #12
157d0     02 16 16 F2 | 	cmp	arg03, #2 wc
157d4     47 00 00 FF 
157d8     AC E4 85 F1 | 	sub	objptr, ##36524
157dc     0C 4E 05 C1 |  if_b	add	fp, #12
157e0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
157e4     0C 4E 85 C1 |  if_b	sub	fp, #12
157e8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1780
157ec     00 12 06 F6 | 	mov	arg01, #0
157f0     A0 F9 B0 FD | 	call	#__system___getiolock_0508
157f4     FD 12 02 F6 | 	mov	arg01, result1
157f8     00 A0 B0 FD | 	call	#__system___lockmem
157fc     7A 01 00 FF 
15800     7A 15 06 F6 | 	mov	arg02, ##@LR__5259
15804     00 12 06 F6 | 	mov	arg01, #0
15808     00 16 06 F6 | 	mov	arg03, #0
1580c     E0 AC B0 FD | 	call	#__system___basic_print_string
15810     00 12 06 F6 | 	mov	arg01, #0
15814     7C F9 B0 FD | 	call	#__system___getiolock_0508
15818     FD 00 68 FC | 	wrlong	#0, result1
1581c     27 12 06 F6 | 	mov	arg01, #39
15820     30 5B B0 FD | 	call	#_printerror
15824     48 00 90 FD | 	jmp	#LR__1781
15828                 | LR__1780
15828     10 53 BF FD | 	call	#_pop
1582c     FF 1E 02 F6 | 	mov	local01, result3
15830     A7 FA 61 FC | 	wrlong	result1, fp
15834     04 4E 05 F1 | 	add	fp, #4
15838     A7 FC 61 FC | 	wrlong	result2, fp
1583c     04 4E 05 F1 | 	add	fp, #4
15840     A7 1E 62 FC | 	wrlong	local01, fp
15844     08 4E 85 F1 | 	sub	fp, #8
15848     A7 12 02 F6 | 	mov	arg01, fp
1584c     10 E7 BF FD | 	call	#_converttofloat
15850     FD 12 02 F6 | 	mov	arg01, result1
15854     14 CA B0 FD | 	call	#__system___float_sqrt
15858     A7 FA 61 FC | 	wrlong	result1, fp
1585c     08 4E 05 F1 | 	add	fp, #8
15860     A7 3C 68 FC | 	wrlong	#30, fp
15864     08 4E 85 F1 | 	sub	fp, #8
15868     A7 12 02 F6 | 	mov	arg01, fp
1586c     64 53 BF FD | 	call	#_push
15870                 | LR__1781
15870     A7 F0 03 F6 | 	mov	ptra, fp
15874     B2 00 A0 FD | 	call	#popregs_
15878                 | _do_sqr_ret
15878     2D 00 64 FD | 	ret
1587c                 | 
1587c                 | ' 
1587c                 | ' sub do_stick
1587c                 | _do_stick
1587c     01 4A 05 F6 | 	mov	COUNT_, #1
15880     A8 00 A0 FD | 	call	#pushregs_
15884     10 F0 07 F1 | 	add	ptra, #16
15888     4A 00 00 FF 
1588c     B0 E4 05 F1 | 	add	objptr, ##38064
15890     F2 1E 02 FB | 	rdlong	local01, objptr
15894     0F 17 02 F6 | 	mov	arg03, local01
15898     01 16 66 F0 | 	shl	arg03, #1
1589c     0F 17 02 F1 | 	add	arg03, local01
158a0     02 16 66 F0 | 	shl	arg03, #2
158a4     03 00 00 FF 
158a8     04 E4 85 F1 | 	sub	objptr, ##1540
158ac     F2 16 02 F1 | 	add	arg03, objptr
158b0     0B 17 02 FB | 	rdlong	arg03, arg03
158b4     0C 4E 05 F1 | 	add	fp, #12
158b8     A7 16 62 FC | 	wrlong	arg03, fp
158bc                 | ' 
158bc                 | ' numpar=compiledline(lineptr_e).result.uresult
158bc                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
158bc     0C 4E 85 F1 | 	sub	fp, #12
158c0     02 16 16 F2 | 	cmp	arg03, #2 wc
158c4     47 00 00 FF 
158c8     AC E4 85 F1 | 	sub	objptr, ##36524
158cc     3C 00 90 CD |  if_b	jmp	#LR__1790
158d0     00 12 06 F6 | 	mov	arg01, #0
158d4     BC F8 B0 FD | 	call	#__system___getiolock_0508
158d8     FD 12 02 F6 | 	mov	arg01, result1
158dc     1C 9F B0 FD | 	call	#__system___lockmem
158e0     7A 01 00 FF 
158e4     80 15 06 F6 | 	mov	arg02, ##@LR__5260
158e8     00 12 06 F6 | 	mov	arg01, #0
158ec     00 16 06 F6 | 	mov	arg03, #0
158f0     FC AB B0 FD | 	call	#__system___basic_print_string
158f4     00 12 06 F6 | 	mov	arg01, #0
158f8     98 F8 B0 FD | 	call	#__system___getiolock_0508
158fc     FD 00 68 FC | 	wrlong	#0, result1
15900     27 12 06 F6 | 	mov	arg01, #39
15904     4C 5A B0 FD | 	call	#_printerror
15908     E8 00 90 FD | 	jmp	#LR__1794
1590c                 | LR__1790
1590c                 | ' 
1590c                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
1590c     0C 4E 05 F1 | 	add	fp, #12
15910     A7 FE 09 FB | 	rdlong	result3, fp wz
15914     0C 4E 85 F1 | 	sub	fp, #12
15918     30 00 90 5D |  if_ne	jmp	#LR__1791
1591c     59 00 00 FF 
15920     3C E5 05 F1 | 	add	objptr, ##45884
15924     F2 1E 02 FB | 	rdlong	local01, objptr
15928     59 00 00 FF 
1592c     3C E5 85 F1 | 	sub	objptr, ##45884
15930     A7 1E 62 FC | 	wrlong	local01, fp
15934     08 4E 05 F1 | 	add	fp, #8
15938     A7 3A 68 FC | 	wrlong	#29, fp
1593c     08 4E 85 F1 | 	sub	fp, #8
15940     A7 12 02 F6 | 	mov	arg01, fp
15944     8C 52 BF FD | 	call	#_push
15948     A8 00 90 FD | 	jmp	#LR__1794
1594c                 | LR__1791
1594c     EC 51 BF FD | 	call	#_pop
15950     A7 FA 61 FC | 	wrlong	result1, fp
15954     04 4E 05 F1 | 	add	fp, #4
15958     A7 FC 61 FC | 	wrlong	result2, fp
1595c     04 4E 05 F1 | 	add	fp, #4
15960     A7 FE 61 FC | 	wrlong	result3, fp
15964                 | ' 
15964                 | ' t1=pop()
15964                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
15964     08 4E 85 F1 | 	sub	fp, #8
15968     1C FE 0D F2 | 	cmp	result3, #28 wz
1596c     08 4E 05 51 |  if_ne	add	fp, #8
15970     A7 1E 02 5B |  if_ne	rdlong	local01, fp
15974     08 4E 85 51 |  if_ne	sub	fp, #8
15978     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
1597c     6C 00 90 5D |  if_ne	jmp	#LR__1793
15980     A7 1E 02 FB | 	rdlong	local01, fp
15984     5A 00 00 FF 
15988     34 E4 05 F1 | 	add	objptr, ##46132
1598c     F2 1E 62 FC | 	wrlong	local01, objptr
15990                 | '   q=t1.result.uresult
15990                 | '   if q<7 then 
15990     5A 00 00 FF 
15994     34 E4 85 F1 | 	sub	objptr, ##46132
15998     07 1E 56 F2 | 	cmps	local01, #7 wc
1599c     40 00 90 3D |  if_ae	jmp	#LR__1792
159a0     5A 00 00 FF 
159a4     34 E4 05 F1 | 	add	objptr, ##46132
159a8     F2 1E 02 FB | 	rdlong	local01, objptr
159ac     02 1E 66 F0 | 	shl	local01, #2
159b0     F8 E4 85 F1 | 	sub	objptr, #248
159b4     F2 1E 02 F1 | 	add	local01, objptr
159b8     0F 1F 02 FB | 	rdlong	local01, local01
159bc     A7 1E 62 FC | 	wrlong	local01, fp
159c0     08 4E 05 F1 | 	add	fp, #8
159c4     A7 3A 68 FC | 	wrlong	#29, fp
159c8     08 4E 85 F1 | 	sub	fp, #8
159cc     A7 12 02 F6 | 	mov	arg01, fp
159d0     59 00 00 FF 
159d4     3C E5 85 F1 | 	sub	objptr, ##45884
159d8     F8 51 BF FD | 	call	#_push
159dc                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
159dc     14 00 90 FD | 	jmp	#LR__1794
159e0                 | LR__1792
159e0     29 12 06 F6 | 	mov	arg01, #41
159e4     6C 59 B0 FD | 	call	#_printerror
159e8                 | '      printerror(41) : return
159e8     08 00 90 FD | 	jmp	#LR__1794
159ec                 | LR__1793
159ec     29 12 06 F6 | 	mov	arg01, #41
159f0     60 59 B0 FD | 	call	#_printerror
159f4                 | LR__1794
159f4     A7 F0 03 F6 | 	mov	ptra, fp
159f8     B2 00 A0 FD | 	call	#popregs_
159fc                 | _do_stick_ret
159fc     2D 00 64 FD | 	ret
15a00                 | 
15a00                 | ' 
15a00                 | ' sub do_strig
15a00                 | _do_strig
15a00     01 4A 05 F6 | 	mov	COUNT_, #1
15a04     A8 00 A0 FD | 	call	#pushregs_
15a08     10 F0 07 F1 | 	add	ptra, #16
15a0c     4A 00 00 FF 
15a10     B0 E4 05 F1 | 	add	objptr, ##38064
15a14     F2 1E 02 FB | 	rdlong	local01, objptr
15a18     0F 17 02 F6 | 	mov	arg03, local01
15a1c     01 16 66 F0 | 	shl	arg03, #1
15a20     0F 17 02 F1 | 	add	arg03, local01
15a24     02 16 66 F0 | 	shl	arg03, #2
15a28     03 00 00 FF 
15a2c     04 E4 85 F1 | 	sub	objptr, ##1540
15a30     F2 16 02 F1 | 	add	arg03, objptr
15a34     0B 17 02 FB | 	rdlong	arg03, arg03
15a38     0C 4E 05 F1 | 	add	fp, #12
15a3c     A7 16 62 FC | 	wrlong	arg03, fp
15a40                 | ' 
15a40                 | ' numpar=compiledline(lineptr_e).result.uresult
15a40                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
15a40     0C 4E 85 F1 | 	sub	fp, #12
15a44     02 16 16 F2 | 	cmp	arg03, #2 wc
15a48     47 00 00 FF 
15a4c     AC E4 85 F1 | 	sub	objptr, ##36524
15a50     3C 00 90 CD |  if_b	jmp	#LR__1800
15a54     00 12 06 F6 | 	mov	arg01, #0
15a58     38 F7 B0 FD | 	call	#__system___getiolock_0508
15a5c     FD 12 02 F6 | 	mov	arg01, result1
15a60     98 9D B0 FD | 	call	#__system___lockmem
15a64     7A 01 00 FF 
15a68     88 15 06 F6 | 	mov	arg02, ##@LR__5261
15a6c     00 12 06 F6 | 	mov	arg01, #0
15a70     00 16 06 F6 | 	mov	arg03, #0
15a74     78 AA B0 FD | 	call	#__system___basic_print_string
15a78     00 12 06 F6 | 	mov	arg01, #0
15a7c     14 F7 B0 FD | 	call	#__system___getiolock_0508
15a80     FD 00 68 FC | 	wrlong	#0, result1
15a84     27 12 06 F6 | 	mov	arg01, #39
15a88     C8 58 B0 FD | 	call	#_printerror
15a8c     E8 00 90 FD | 	jmp	#LR__1804
15a90                 | LR__1800
15a90                 | ' 
15a90                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
15a90     0C 4E 05 F1 | 	add	fp, #12
15a94     A7 FE 09 FB | 	rdlong	result3, fp wz
15a98     0C 4E 85 F1 | 	sub	fp, #12
15a9c     30 00 90 5D |  if_ne	jmp	#LR__1801
15aa0     59 00 00 FF 
15aa4     58 E5 05 F1 | 	add	objptr, ##45912
15aa8     F2 1E 02 FB | 	rdlong	local01, objptr
15aac     59 00 00 FF 
15ab0     58 E5 85 F1 | 	sub	objptr, ##45912
15ab4     A7 1E 62 FC | 	wrlong	local01, fp
15ab8     08 4E 05 F1 | 	add	fp, #8
15abc     A7 3A 68 FC | 	wrlong	#29, fp
15ac0     08 4E 85 F1 | 	sub	fp, #8
15ac4     A7 12 02 F6 | 	mov	arg01, fp
15ac8     08 51 BF FD | 	call	#_push
15acc     A8 00 90 FD | 	jmp	#LR__1804
15ad0                 | LR__1801
15ad0     68 50 BF FD | 	call	#_pop
15ad4     A7 FA 61 FC | 	wrlong	result1, fp
15ad8     04 4E 05 F1 | 	add	fp, #4
15adc     A7 FC 61 FC | 	wrlong	result2, fp
15ae0     04 4E 05 F1 | 	add	fp, #4
15ae4     A7 FE 61 FC | 	wrlong	result3, fp
15ae8                 | ' 
15ae8                 | ' t1=pop()
15ae8                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
15ae8     08 4E 85 F1 | 	sub	fp, #8
15aec     1C FE 0D F2 | 	cmp	result3, #28 wz
15af0     08 4E 05 51 |  if_ne	add	fp, #8
15af4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
15af8     08 4E 85 51 |  if_ne	sub	fp, #8
15afc     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
15b00     6C 00 90 5D |  if_ne	jmp	#LR__1803
15b04     A7 1E 02 FB | 	rdlong	local01, fp
15b08     5A 00 00 FF 
15b0c     34 E4 05 F1 | 	add	objptr, ##46132
15b10     F2 1E 62 FC | 	wrlong	local01, objptr
15b14                 | '   q=t1.result.uresult
15b14                 | '   if q<7 then 
15b14     5A 00 00 FF 
15b18     34 E4 85 F1 | 	sub	objptr, ##46132
15b1c     07 1E 56 F2 | 	cmps	local01, #7 wc
15b20     40 00 90 3D |  if_ae	jmp	#LR__1802
15b24     5A 00 00 FF 
15b28     34 E4 05 F1 | 	add	objptr, ##46132
15b2c     F2 1E 02 FB | 	rdlong	local01, objptr
15b30     02 1E 66 F0 | 	shl	local01, #2
15b34     DC E4 85 F1 | 	sub	objptr, #220
15b38     F2 1E 02 F1 | 	add	local01, objptr
15b3c     0F 1F 02 FB | 	rdlong	local01, local01
15b40     A7 1E 62 FC | 	wrlong	local01, fp
15b44     08 4E 05 F1 | 	add	fp, #8
15b48     A7 3A 68 FC | 	wrlong	#29, fp
15b4c     08 4E 85 F1 | 	sub	fp, #8
15b50     A7 12 02 F6 | 	mov	arg01, fp
15b54     59 00 00 FF 
15b58     58 E5 85 F1 | 	sub	objptr, ##45912
15b5c     74 50 BF FD | 	call	#_push
15b60                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
15b60     14 00 90 FD | 	jmp	#LR__1804
15b64                 | LR__1802
15b64     29 12 06 F6 | 	mov	arg01, #41
15b68     E8 57 B0 FD | 	call	#_printerror
15b6c                 | '      printerror(41) : return
15b6c     08 00 90 FD | 	jmp	#LR__1804
15b70                 | LR__1803
15b70     29 12 06 F6 | 	mov	arg01, #41
15b74     DC 57 B0 FD | 	call	#_printerror
15b78                 | LR__1804
15b78     A7 F0 03 F6 | 	mov	ptra, fp
15b7c     B2 00 A0 FD | 	call	#popregs_
15b80                 | _do_strig_ret
15b80     2D 00 64 FD | 	ret
15b84                 | 
15b84                 | ' 
15b84                 | ' sub do_getpixel
15b84                 | _do_getpixel
15b84     00 4A 05 F6 | 	mov	COUNT_, #0
15b88     A8 00 A0 FD | 	call	#pushregs_
15b8c     24 F0 07 F1 | 	add	ptra, #36
15b90     4A 00 00 FF 
15b94     B0 E4 05 F1 | 	add	objptr, ##38064
15b98     F2 16 02 FB | 	rdlong	arg03, objptr
15b9c     0B 15 02 F6 | 	mov	arg02, arg03
15ba0     01 14 66 F0 | 	shl	arg02, #1
15ba4     0B 15 02 F1 | 	add	arg02, arg03
15ba8     02 14 66 F0 | 	shl	arg02, #2
15bac     03 00 00 FF 
15bb0     04 E4 85 F1 | 	sub	objptr, ##1540
15bb4     F2 14 02 F1 | 	add	arg02, objptr
15bb8     0A 17 02 FB | 	rdlong	arg03, arg02
15bbc     18 4E 05 F1 | 	add	fp, #24
15bc0     A7 16 62 FC | 	wrlong	arg03, fp
15bc4                 | ' 
15bc4                 | ' numpar=compiledline(lineptr_e).result.uresult
15bc4                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
15bc4     18 4E 85 F1 | 	sub	fp, #24
15bc8     02 16 0E F2 | 	cmp	arg03, #2 wz
15bcc     47 00 00 FF 
15bd0     AC E4 85 F1 | 	sub	objptr, ##36524
15bd4     3C 00 90 AD |  if_e	jmp	#LR__1810
15bd8     00 12 06 F6 | 	mov	arg01, #0
15bdc     B4 F5 B0 FD | 	call	#__system___getiolock_0508
15be0     FD 12 02 F6 | 	mov	arg01, result1
15be4     14 9C B0 FD | 	call	#__system___lockmem
15be8     7A 01 00 FF 
15bec     90 15 06 F6 | 	mov	arg02, ##@LR__5262
15bf0     00 12 06 F6 | 	mov	arg01, #0
15bf4     00 16 06 F6 | 	mov	arg03, #0
15bf8     F4 A8 B0 FD | 	call	#__system___basic_print_string
15bfc     00 12 06 F6 | 	mov	arg01, #0
15c00     90 F5 B0 FD | 	call	#__system___getiolock_0508
15c04     FD 00 68 FC | 	wrlong	#0, result1
15c08     27 12 06 F6 | 	mov	arg01, #39
15c0c     44 57 B0 FD | 	call	#_printerror
15c10     B4 00 90 FD | 	jmp	#LR__1811
15c14                 | LR__1810
15c14     24 4F BF FD | 	call	#_pop
15c18     FD 16 02 F6 | 	mov	arg03, result1
15c1c     FE 14 02 F6 | 	mov	arg02, result2
15c20     FF 12 02 F6 | 	mov	arg01, result3
15c24     0C 4E 05 F1 | 	add	fp, #12
15c28     A7 16 62 FC | 	wrlong	arg03, fp
15c2c     04 4E 05 F1 | 	add	fp, #4
15c30     A7 14 62 FC | 	wrlong	arg02, fp
15c34     04 4E 05 F1 | 	add	fp, #4
15c38     A7 12 62 FC | 	wrlong	arg01, fp
15c3c     14 4E 85 F1 | 	sub	fp, #20
15c40     F8 4E BF FD | 	call	#_pop
15c44     FF 16 02 F6 | 	mov	arg03, result3
15c48     A7 FA 61 FC | 	wrlong	result1, fp
15c4c     04 4E 05 F1 | 	add	fp, #4
15c50     A7 FC 61 FC | 	wrlong	result2, fp
15c54     04 4E 05 F1 | 	add	fp, #4
15c58     A7 16 62 FC | 	wrlong	arg03, fp
15c5c     08 4E 85 F1 | 	sub	fp, #8
15c60     A7 12 02 F6 | 	mov	arg01, fp
15c64     4C E2 BF FD | 	call	#_converttoint
15c68     1C 4E 05 F1 | 	add	fp, #28
15c6c     A7 FA 61 FC | 	wrlong	result1, fp
15c70     10 4E 85 F1 | 	sub	fp, #16
15c74     A7 12 02 F6 | 	mov	arg01, fp
15c78     0C 4E 85 F1 | 	sub	fp, #12
15c7c     34 E2 BF FD | 	call	#_converttoint
15c80     FD 16 02 F6 | 	mov	arg03, result1
15c84     20 4E 05 F1 | 	add	fp, #32
15c88     A7 16 62 FC | 	wrlong	arg03, fp
15c8c     F2 12 02 FB | 	rdlong	arg01, objptr
15c90     04 4E 85 F1 | 	sub	fp, #4
15c94     A7 FE 01 FB | 	rdlong	result3, fp
15c98     FF 12 02 F1 | 	add	arg01, result3
15c9c     1C 4E 85 F1 | 	sub	fp, #28
15ca0     0A 16 66 F0 | 	shl	arg03, #10
15ca4     0B 13 02 F1 | 	add	arg01, arg03
15ca8     E4 58 B0 FD | 	call	#_pspeek
15cac     FD FA E1 F8 | 	getbyte	result1, result1, #0
15cb0     A7 FA 61 FC | 	wrlong	result1, fp
15cb4     08 4E 05 F1 | 	add	fp, #8
15cb8     A7 3A 68 FC | 	wrlong	#29, fp
15cbc     08 4E 85 F1 | 	sub	fp, #8
15cc0     A7 12 02 F6 | 	mov	arg01, fp
15cc4     0C 4F BF FD | 	call	#_push
15cc8                 | LR__1811
15cc8     A7 F0 03 F6 | 	mov	ptra, fp
15ccc     B2 00 A0 FD | 	call	#popregs_
15cd0                 | _do_getpixel_ret
15cd0     2D 00 64 FD | 	ret
15cd4                 | 
15cd4                 | ' 
15cd4                 | ' sub do_log
15cd4                 | _do_log
15cd4     01 4A 05 F6 | 	mov	COUNT_, #1
15cd8     A8 00 A0 FD | 	call	#pushregs_
15cdc     14 F0 07 F1 | 	add	ptra, #20
15ce0     4A 00 00 FF 
15ce4     B0 E4 05 F1 | 	add	objptr, ##38064
15ce8     F2 1E 02 FB | 	rdlong	local01, objptr
15cec     0F 17 02 F6 | 	mov	arg03, local01
15cf0     01 16 66 F0 | 	shl	arg03, #1
15cf4     0F 17 02 F1 | 	add	arg03, local01
15cf8     02 16 66 F0 | 	shl	arg03, #2
15cfc     03 00 00 FF 
15d00     04 E4 85 F1 | 	sub	objptr, ##1540
15d04     F2 16 02 F1 | 	add	arg03, objptr
15d08     0B 17 0A FB | 	rdlong	arg03, arg03 wz
15d0c     0C 4E 05 F1 | 	add	fp, #12
15d10     A7 16 62 FC | 	wrlong	arg03, fp
15d14                 | ' 
15d14                 | ' numpar=compiledline(lineptr_e).result.uresult
15d14                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
15d14     0C 4E 85 F1 | 	sub	fp, #12
15d18     47 00 00 FF 
15d1c     AC E4 85 F1 | 	sub	objptr, ##36524
15d20     0C 4E 05 51 |  if_ne	add	fp, #12
15d24     A7 1E 02 5B |  if_ne	rdlong	local01, fp
15d28     0C 4E 85 51 |  if_ne	sub	fp, #12
15d2c     03 1E 16 52 |  if_ne	cmp	local01, #3 wc
15d30     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1820
15d34     00 12 06 F6 | 	mov	arg01, #0
15d38     58 F4 B0 FD | 	call	#__system___getiolock_0508
15d3c     FD 12 02 F6 | 	mov	arg01, result1
15d40     B8 9A B0 FD | 	call	#__system___lockmem
15d44     7A 01 00 FF 
15d48     9B 15 06 F6 | 	mov	arg02, ##@LR__5263
15d4c     00 12 06 F6 | 	mov	arg01, #0
15d50     00 16 06 F6 | 	mov	arg03, #0
15d54     98 A7 B0 FD | 	call	#__system___basic_print_string
15d58     00 12 06 F6 | 	mov	arg01, #0
15d5c     34 F4 B0 FD | 	call	#__system___getiolock_0508
15d60     FD 00 68 FC | 	wrlong	#0, result1
15d64     27 12 06 F6 | 	mov	arg01, #39
15d68     E8 55 B0 FD | 	call	#_printerror
15d6c     D0 00 90 FD | 	jmp	#LR__1823
15d70                 | LR__1820
15d70                 | ' 
15d70                 | ' if numpar=2 then 
15d70     0C 4E 05 F1 | 	add	fp, #12
15d74     A7 1E 02 FB | 	rdlong	local01, fp
15d78     0C 4E 85 F1 | 	sub	fp, #12
15d7c     02 1E 0E F2 | 	cmp	local01, #2 wz
15d80     48 00 90 5D |  if_ne	jmp	#LR__1821
15d84     B4 4D BF FD | 	call	#_pop
15d88     FF 1E 02 F6 | 	mov	local01, result3
15d8c     A7 FA 61 FC | 	wrlong	result1, fp
15d90     04 4E 05 F1 | 	add	fp, #4
15d94     A7 FC 61 FC | 	wrlong	result2, fp
15d98     04 4E 05 F1 | 	add	fp, #4
15d9c     A7 1E 62 FC | 	wrlong	local01, fp
15da0     08 4E 85 F1 | 	sub	fp, #8
15da4     A7 12 02 F6 | 	mov	arg01, fp
15da8     B4 E1 BF FD | 	call	#_converttofloat
15dac     FD 14 02 F6 | 	mov	arg02, result1
15db0     FC 16 20 FF 
15db4     54 12 06 F6 | 	mov	arg01, ##1076754516
15db8     34 D5 B0 FD | 	call	#__system____builtin_logbase
15dbc     10 4E 05 F1 | 	add	fp, #16
15dc0     A7 FA 61 FC | 	wrlong	result1, fp
15dc4     10 4E 85 F1 | 	sub	fp, #16
15dc8     10 00 90 FD | 	jmp	#LR__1822
15dcc                 | LR__1821
15dcc     10 4E 05 F1 | 	add	fp, #16
15dd0     00 C0 9F FF 
15dd4     A7 00 68 FC | 	wrlong	##1065353216, fp
15dd8     10 4E 85 F1 | 	sub	fp, #16
15ddc                 | LR__1822
15ddc     5C 4D BF FD | 	call	#_pop
15de0     FF 1E 02 F6 | 	mov	local01, result3
15de4     A7 FA 61 FC | 	wrlong	result1, fp
15de8     04 4E 05 F1 | 	add	fp, #4
15dec     A7 FC 61 FC | 	wrlong	result2, fp
15df0     04 4E 05 F1 | 	add	fp, #4
15df4     A7 1E 62 FC | 	wrlong	local01, fp
15df8     08 4E 85 F1 | 	sub	fp, #8
15dfc     A7 12 02 F6 | 	mov	arg01, fp
15e00     5C E1 BF FD | 	call	#_converttofloat
15e04     FD 14 02 F6 | 	mov	arg02, result1
15e08     FC 16 20 FF 
15e0c     54 12 06 F6 | 	mov	arg01, ##1076754516
15e10     DC D4 B0 FD | 	call	#__system____builtin_logbase
15e14     FD 12 02 F6 | 	mov	arg01, result1
15e18     10 4E 05 F1 | 	add	fp, #16
15e1c     A7 14 02 FB | 	rdlong	arg02, fp
15e20     10 4E 85 F1 | 	sub	fp, #16
15e24     20 C7 B0 FD | 	call	#__system___float_div
15e28     A7 FA 61 FC | 	wrlong	result1, fp
15e2c     08 4E 05 F1 | 	add	fp, #8
15e30     A7 3C 68 FC | 	wrlong	#30, fp
15e34     08 4E 85 F1 | 	sub	fp, #8
15e38     A7 12 02 F6 | 	mov	arg01, fp
15e3c     94 4D BF FD | 	call	#_push
15e40                 | LR__1823
15e40     A7 F0 03 F6 | 	mov	ptra, fp
15e44     B2 00 A0 FD | 	call	#popregs_
15e48                 | _do_log_ret
15e48     2D 00 64 FD | 	ret
15e4c                 | 
15e4c                 | ' 
15e4c                 | ' sub do_defsprite
15e4c                 | _do_defsprite
15e4c     07 4A 05 F6 | 	mov	COUNT_, #7
15e50     A8 00 A0 FD | 	call	#pushregs_
15e54     60 F0 07 F1 | 	add	ptra, #96
15e58     E0 4C BF FD | 	call	#_pop
15e5c     FD 16 02 F6 | 	mov	arg03, result1
15e60     FE 14 02 F6 | 	mov	arg02, result2
15e64     FF 12 02 F6 | 	mov	arg01, result3
15e68     30 4E 05 F1 | 	add	fp, #48
15e6c     A7 16 62 FC | 	wrlong	arg03, fp
15e70     04 4E 05 F1 | 	add	fp, #4
15e74     A7 14 62 FC | 	wrlong	arg02, fp
15e78     04 4E 05 F1 | 	add	fp, #4
15e7c     A7 12 62 FC | 	wrlong	arg01, fp
15e80     38 4E 85 F1 | 	sub	fp, #56
15e84     B4 4C BF FD | 	call	#_pop
15e88     FD 16 02 F6 | 	mov	arg03, result1
15e8c     FE 14 02 F6 | 	mov	arg02, result2
15e90     FF 12 02 F6 | 	mov	arg01, result3
15e94     24 4E 05 F1 | 	add	fp, #36
15e98     A7 16 62 FC | 	wrlong	arg03, fp
15e9c     04 4E 05 F1 | 	add	fp, #4
15ea0     A7 14 62 FC | 	wrlong	arg02, fp
15ea4     04 4E 05 F1 | 	add	fp, #4
15ea8     A7 12 62 FC | 	wrlong	arg01, fp
15eac     2C 4E 85 F1 | 	sub	fp, #44
15eb0     88 4C BF FD | 	call	#_pop
15eb4     FD 16 02 F6 | 	mov	arg03, result1
15eb8     FE 14 02 F6 | 	mov	arg02, result2
15ebc     FF 12 02 F6 | 	mov	arg01, result3
15ec0     18 4E 05 F1 | 	add	fp, #24
15ec4     A7 16 62 FC | 	wrlong	arg03, fp
15ec8     04 4E 05 F1 | 	add	fp, #4
15ecc     A7 14 62 FC | 	wrlong	arg02, fp
15ed0     04 4E 05 F1 | 	add	fp, #4
15ed4     A7 12 62 FC | 	wrlong	arg01, fp
15ed8     20 4E 85 F1 | 	sub	fp, #32
15edc     5C 4C BF FD | 	call	#_pop
15ee0     FD 16 02 F6 | 	mov	arg03, result1
15ee4     FE 14 02 F6 | 	mov	arg02, result2
15ee8     FF 12 02 F6 | 	mov	arg01, result3
15eec     0C 4E 05 F1 | 	add	fp, #12
15ef0     A7 16 62 FC | 	wrlong	arg03, fp
15ef4     04 4E 05 F1 | 	add	fp, #4
15ef8     A7 14 62 FC | 	wrlong	arg02, fp
15efc     04 4E 05 F1 | 	add	fp, #4
15f00     A7 12 62 FC | 	wrlong	arg01, fp
15f04     14 4E 85 F1 | 	sub	fp, #20
15f08     30 4C BF FD | 	call	#_pop
15f0c     FF 16 02 F6 | 	mov	arg03, result3
15f10     A7 FA 61 FC | 	wrlong	result1, fp
15f14     04 4E 05 F1 | 	add	fp, #4
15f18     A7 FC 61 FC | 	wrlong	result2, fp
15f1c     04 4E 05 F1 | 	add	fp, #4
15f20     A7 16 62 FC | 	wrlong	arg03, fp
15f24     08 4E 85 F1 | 	sub	fp, #8
15f28     A7 12 02 F6 | 	mov	arg01, fp
15f2c     84 DF BF FD | 	call	#_converttoint
15f30     3C 4E 05 F1 | 	add	fp, #60
15f34     A7 FA 61 FC | 	wrlong	result1, fp
15f38     30 4E 85 F1 | 	sub	fp, #48
15f3c     A7 12 02 F6 | 	mov	arg01, fp
15f40     0C 4E 85 F1 | 	sub	fp, #12
15f44     6C DF BF FD | 	call	#_converttoint
15f48     40 4E 05 F1 | 	add	fp, #64
15f4c     A7 FA 61 FC | 	wrlong	result1, fp
15f50     28 4E 85 F1 | 	sub	fp, #40
15f54     A7 12 02 F6 | 	mov	arg01, fp
15f58     18 4E 85 F1 | 	sub	fp, #24
15f5c     54 DF BF FD | 	call	#_converttoint
15f60     44 4E 05 F1 | 	add	fp, #68
15f64     A7 FA 61 FC | 	wrlong	result1, fp
15f68     20 4E 85 F1 | 	sub	fp, #32
15f6c     A7 12 02 F6 | 	mov	arg01, fp
15f70     24 4E 85 F1 | 	sub	fp, #36
15f74     3C DF BF FD | 	call	#_converttoint
15f78     48 4E 05 F1 | 	add	fp, #72
15f7c     A7 FA 61 FC | 	wrlong	result1, fp
15f80     18 4E 85 F1 | 	sub	fp, #24
15f84     A7 12 02 F6 | 	mov	arg01, fp
15f88     30 4E 85 F1 | 	sub	fp, #48
15f8c     24 DF BF FD | 	call	#_converttoint
15f90     4C 4E 05 F1 | 	add	fp, #76
15f94     A7 FA 61 FC | 	wrlong	result1, fp
15f98                 | ' 
15f98                 | ' t5=pop()
15f98                 | ' t4=pop()
15f98                 | ' t3=pop()
15f98                 | ' t2=pop()
15f98                 | ' t1=pop()
15f98                 | ' 
15f98                 | ' ' do convert, defsprite is not a racing command
15f98                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
15f98                 | '  
15f98                 | ' ' todo: check parameters for linits
15f98                 | ' if sprite(a1)<> nil then delete(sprite(a1))
15f98     10 4E 85 F1 | 	sub	fp, #16
15f9c     A7 16 02 FB | 	rdlong	arg03, fp
15fa0     3C 4E 85 F1 | 	sub	fp, #60
15fa4     02 16 66 F0 | 	shl	arg03, #2
15fa8     59 00 00 FF 
15fac     74 E5 05 F1 | 	add	objptr, ##45940
15fb0     F2 16 02 F1 | 	add	arg03, objptr
15fb4     0B 17 0A FB | 	rdlong	arg03, arg03 wz
15fb8     59 00 00 FF 
15fbc     74 E5 85 F1 | 	sub	objptr, ##45940
15fc0     2C 00 90 AD |  if_e	jmp	#LR__1830
15fc4     3C 4E 05 F1 | 	add	fp, #60
15fc8     A7 16 02 FB | 	rdlong	arg03, fp
15fcc     3C 4E 85 F1 | 	sub	fp, #60
15fd0     02 16 66 F0 | 	shl	arg03, #2
15fd4     59 00 00 FF 
15fd8     74 E5 05 F1 | 	add	objptr, ##45940
15fdc     F2 16 02 F1 | 	add	arg03, objptr
15fe0     0B 13 02 FB | 	rdlong	arg01, arg03
15fe4     59 00 00 FF 
15fe8     74 E5 85 F1 | 	sub	objptr, ##45940
15fec     94 D7 B0 FD | 	call	#__system___gc_free
15ff0                 | LR__1830
15ff0     3C 4E 05 F1 | 	add	fp, #60
15ff4     A7 1E 02 FB | 	rdlong	local01, fp
15ff8     0C 4E 05 F1 | 	add	fp, #12
15ffc     A7 16 02 FB | 	rdlong	arg03, fp
16000     04 4E 05 F1 | 	add	fp, #4
16004     A7 14 02 FB | 	rdlong	arg02, fp
16008     0A 17 02 FD | 	qmul	arg03, arg02
1600c     02 1E 66 F0 | 	shl	local01, #2
16010     59 00 00 FF 
16014     74 E5 05 F1 | 	add	objptr, ##45940
16018     F2 1E 02 F1 | 	add	local01, objptr
1601c     4C 4E 85 F1 | 	sub	fp, #76
16020     59 00 00 FF 
16024     74 E5 85 F1 | 	sub	objptr, ##45940
16028     18 12 62 FD | 	getqx	arg01
1602c     18 D6 B0 FD | 	call	#__system___gc_alloc_managed
16030     0F FB 61 FC | 	wrlong	result1, local01
16034                 | ' for y=a3 to a3+a5-1
16034     44 4E 05 F1 | 	add	fp, #68
16038     A7 20 02 FB | 	rdlong	local02, fp
1603c     0C 4E 05 F1 | 	add	fp, #12
16040     A7 20 62 FC | 	wrlong	local02, fp
16044     0C 4E 85 F1 | 	sub	fp, #12
16048     A7 22 02 FB | 	rdlong	local03, fp
1604c     08 4E 05 F1 | 	add	fp, #8
16050     A7 24 02 FB | 	rdlong	local04, fp
16054     4C 4E 85 F1 | 	sub	fp, #76
16058     12 23 02 F1 | 	add	local03, local04
1605c                 | LR__1831
1605c     50 4E 05 F1 | 	add	fp, #80
16060     A7 20 02 FB | 	rdlong	local02, fp
16064     50 4E 85 F1 | 	sub	fp, #80
16068     11 21 52 F2 | 	cmps	local02, local03 wc
1606c     F4 00 90 3D |  if_ae	jmp	#LR__1834
16070                 | '   for x=a2 to a4+a2-1
16070     40 4E 05 F1 | 	add	fp, #64
16074     A7 1E 02 FB | 	rdlong	local01, fp
16078     14 4E 05 F1 | 	add	fp, #20
1607c     A7 1E 62 FC | 	wrlong	local01, fp
16080     0C 4E 85 F1 | 	sub	fp, #12
16084     A7 26 02 FB | 	rdlong	local05, fp
16088     08 4E 85 F1 | 	sub	fp, #8
1608c     A7 28 02 FB | 	rdlong	local06, fp
16090     40 4E 85 F1 | 	sub	fp, #64
16094     14 27 02 F1 | 	add	local05, local06
16098                 | LR__1832
16098     54 4E 05 F1 | 	add	fp, #84
1609c     A7 1E 02 FB | 	rdlong	local01, fp
160a0     54 4E 85 F1 | 	sub	fp, #84
160a4     13 1F 52 F2 | 	cmps	local01, local05 wc
160a8     A0 00 90 3D |  if_ae	jmp	#LR__1833
160ac     3C 4E 05 F1 | 	add	fp, #60
160b0     A7 28 02 FB | 	rdlong	local06, fp
160b4     18 4E 05 F1 | 	add	fp, #24
160b8     A7 24 02 FB | 	rdlong	local04, fp
160bc     14 4E 85 F1 | 	sub	fp, #20
160c0     A7 20 02 FB | 	rdlong	local02, fp
160c4     10 4E 05 F1 | 	add	fp, #16
160c8     A7 1E 02 FB | 	rdlong	local01, fp
160cc     0F 17 02 F6 | 	mov	arg03, local01
160d0     0C 4E 85 F1 | 	sub	fp, #12
160d4     A7 14 02 FB | 	rdlong	arg02, fp
160d8     0A 17 82 F1 | 	sub	arg03, arg02
160dc     04 4E 05 F1 | 	add	fp, #4
160e0     A7 14 02 FB | 	rdlong	arg02, fp
160e4     0A 17 02 FD | 	qmul	arg03, arg02
160e8     02 28 66 F0 | 	shl	local06, #2
160ec     59 00 00 FF 
160f0     74 E5 05 F1 | 	add	objptr, ##45940
160f4     F2 28 02 F1 | 	add	local06, objptr
160f8     14 29 02 FB | 	rdlong	local06, local06
160fc     12 2B 02 F6 | 	mov	local07, local04
16100     10 2B 82 F1 | 	sub	local07, local02
16104     59 00 00 FF 
16108     74 E5 85 F1 | 	sub	objptr, ##45940
1610c     F2 12 02 FB | 	rdlong	arg01, objptr
16110     12 13 02 F1 | 	add	arg01, local04
16114     48 4E 85 F1 | 	sub	fp, #72
16118     0A 1E 66 F0 | 	shl	local01, #10
1611c     0F 13 02 F1 | 	add	arg01, local01
16120     18 24 62 FD | 	getqx	local04
16124     12 2B 02 F1 | 	add	local07, local04
16128     14 2B 02 F1 | 	add	local07, local06
1612c     60 54 B0 FD | 	call	#_pspeek
16130     15 FB 41 FC | 	wrbyte	result1, local07
16134     54 4E 05 F1 | 	add	fp, #84
16138     A7 2A 02 FB | 	rdlong	local07, fp
1613c     01 2A 06 F1 | 	add	local07, #1
16140     A7 2A 62 FC | 	wrlong	local07, fp
16144     54 4E 85 F1 | 	sub	fp, #84
16148     4C FF 9F FD | 	jmp	#LR__1832
1614c                 | LR__1833
1614c     50 4E 05 F1 | 	add	fp, #80
16150     A7 2A 02 FB | 	rdlong	local07, fp
16154     01 2A 06 F1 | 	add	local07, #1
16158     A7 2A 62 FC | 	wrlong	local07, fp
1615c     50 4E 85 F1 | 	sub	fp, #80
16160     F8 FE 9F FD | 	jmp	#LR__1831
16164                 | LR__1834
16164     3C 4E 05 F1 | 	add	fp, #60
16168     A7 2A 02 FB | 	rdlong	local07, fp
1616c     15 13 02 F6 | 	mov	arg01, local07
16170     3C 4E 85 F1 | 	sub	fp, #60
16174     02 2A 66 F0 | 	shl	local07, #2
16178     59 00 00 FF 
1617c     74 E5 05 F1 | 	add	objptr, ##45940
16180     F2 2A 02 F1 | 	add	local07, objptr
16184     15 15 02 FB | 	rdlong	arg02, local07
16188     59 00 00 FF 
1618c     74 E5 85 F1 | 	sub	objptr, ##45940
16190     10 72 B0 FD | 	call	#_hg010b_spin2_setspriteptr
16194     3C 4E 05 F1 | 	add	fp, #60
16198     A7 12 02 FB | 	rdlong	arg01, fp
1619c     0C 4E 05 F1 | 	add	fp, #12
161a0     A7 14 02 FB | 	rdlong	arg02, fp
161a4     04 4E 05 F1 | 	add	fp, #4
161a8     A7 16 02 FB | 	rdlong	arg03, fp
161ac     4C 4E 85 F1 | 	sub	fp, #76
161b0     80 72 B0 FD | 	call	#_hg010b_spin2_setspritesize
161b4     A7 F0 03 F6 | 	mov	ptra, fp
161b8     B2 00 A0 FD | 	call	#popregs_
161bc                 | _do_defsprite_ret
161bc     2D 00 64 FD | 	ret
161c0                 | 
161c0                 | ' 
161c0                 | ' sub do_sprite
161c0                 | _do_sprite
161c0     00 4A 05 F6 | 	mov	COUNT_, #0
161c4     A8 00 A0 FD | 	call	#pushregs_
161c8     30 F0 07 F1 | 	add	ptra, #48
161cc     6C 49 BF FD | 	call	#_pop
161d0     FD 16 02 F6 | 	mov	arg03, result1
161d4     FE 14 02 F6 | 	mov	arg02, result2
161d8     FF 12 02 F6 | 	mov	arg01, result3
161dc     18 4E 05 F1 | 	add	fp, #24
161e0     A7 16 62 FC | 	wrlong	arg03, fp
161e4     04 4E 05 F1 | 	add	fp, #4
161e8     A7 14 62 FC | 	wrlong	arg02, fp
161ec     04 4E 05 F1 | 	add	fp, #4
161f0     A7 12 62 FC | 	wrlong	arg01, fp
161f4     20 4E 85 F1 | 	sub	fp, #32
161f8     40 49 BF FD | 	call	#_pop
161fc     FD 16 02 F6 | 	mov	arg03, result1
16200     FE 14 02 F6 | 	mov	arg02, result2
16204     FF 12 02 F6 | 	mov	arg01, result3
16208     0C 4E 05 F1 | 	add	fp, #12
1620c     A7 16 62 FC | 	wrlong	arg03, fp
16210     04 4E 05 F1 | 	add	fp, #4
16214     A7 14 62 FC | 	wrlong	arg02, fp
16218     04 4E 05 F1 | 	add	fp, #4
1621c     A7 12 62 FC | 	wrlong	arg01, fp
16220     14 4E 85 F1 | 	sub	fp, #20
16224     14 49 BF FD | 	call	#_pop
16228     FF 16 02 F6 | 	mov	arg03, result3
1622c     A7 FA 61 FC | 	wrlong	result1, fp
16230     04 4E 05 F1 | 	add	fp, #4
16234     A7 FC 61 FC | 	wrlong	result2, fp
16238     04 4E 05 F1 | 	add	fp, #4
1623c     A7 16 62 FC | 	wrlong	arg03, fp
16240     08 4E 85 F1 | 	sub	fp, #8
16244     A7 12 02 F6 | 	mov	arg01, fp
16248     68 DC BF FD | 	call	#_converttoint
1624c     24 4E 05 F1 | 	add	fp, #36
16250     A7 FA 61 FC | 	wrlong	result1, fp
16254     18 4E 85 F1 | 	sub	fp, #24
16258     A7 12 02 F6 | 	mov	arg01, fp
1625c     0C 4E 85 F1 | 	sub	fp, #12
16260     50 DC BF FD | 	call	#_converttoint
16264     28 4E 05 F1 | 	add	fp, #40
16268     A7 FA 61 FC | 	wrlong	result1, fp
1626c     10 4E 85 F1 | 	sub	fp, #16
16270     A7 12 02 F6 | 	mov	arg01, fp
16274     18 4E 85 F1 | 	sub	fp, #24
16278     38 DC BF FD | 	call	#_converttoint
1627c     2C 4E 05 F1 | 	add	fp, #44
16280     A7 FA 61 FC | 	wrlong	result1, fp
16284     08 4E 85 F1 | 	sub	fp, #8
16288     A7 12 02 FB | 	rdlong	arg01, fp
1628c     04 4E 05 F1 | 	add	fp, #4
16290     A7 14 02 FB | 	rdlong	arg02, fp
16294     FD 16 02 F6 | 	mov	arg03, result1
16298     28 4E 85 F1 | 	sub	fp, #40
1629c     2C 71 B0 FD | 	call	#_hg010b_spin2_setspritepos
162a0     A7 F0 03 F6 | 	mov	ptra, fp
162a4     B2 00 A0 FD | 	call	#popregs_
162a8                 | _do_sprite_ret
162a8     2D 00 64 FD | 	ret
162ac                 | 
162ac                 | ' 
162ac                 | ' sub do_mousex
162ac                 | _do_mousex
162ac     00 4A 05 F6 | 	mov	COUNT_, #0
162b0     A8 00 A0 FD | 	call	#pushregs_
162b4     0C F0 07 F1 | 	add	ptra, #12
162b8     08 4E 05 F1 | 	add	fp, #8
162bc     A7 3A 68 FC | 	wrlong	#29, fp
162c0     08 4E 85 F1 | 	sub	fp, #8
162c4     59 00 00 FF 
162c8     2C E5 05 F1 | 	add	objptr, ##45868
162cc     F2 12 02 FB | 	rdlong	arg01, objptr
162d0     59 00 00 FF 
162d4     2C E5 85 F1 | 	sub	objptr, ##45868
162d8     A7 12 62 FC | 	wrlong	arg01, fp
162dc     A7 12 02 F6 | 	mov	arg01, fp
162e0     F0 48 BF FD | 	call	#_push
162e4     A7 F0 03 F6 | 	mov	ptra, fp
162e8     B2 00 A0 FD | 	call	#popregs_
162ec                 | _do_mousex_ret
162ec     2D 00 64 FD | 	ret
162f0                 | 
162f0                 | ' 
162f0                 | ' sub do_mousey
162f0                 | _do_mousey
162f0     00 4A 05 F6 | 	mov	COUNT_, #0
162f4     A8 00 A0 FD | 	call	#pushregs_
162f8     0C F0 07 F1 | 	add	ptra, #12
162fc     08 4E 05 F1 | 	add	fp, #8
16300     A7 3A 68 FC | 	wrlong	#29, fp
16304     08 4E 85 F1 | 	sub	fp, #8
16308     59 00 00 FF 
1630c     30 E5 05 F1 | 	add	objptr, ##45872
16310     F2 12 02 FB | 	rdlong	arg01, objptr
16314     59 00 00 FF 
16318     30 E5 85 F1 | 	sub	objptr, ##45872
1631c     A7 12 62 FC | 	wrlong	arg01, fp
16320     A7 12 02 F6 | 	mov	arg01, fp
16324     AC 48 BF FD | 	call	#_push
16328     A7 F0 03 F6 | 	mov	ptra, fp
1632c     B2 00 A0 FD | 	call	#popregs_
16330                 | _do_mousey_ret
16330     2D 00 64 FD | 	ret
16334                 | 
16334                 | ' 
16334                 | ' sub do_mousew
16334                 | _do_mousew
16334     00 4A 05 F6 | 	mov	COUNT_, #0
16338     A8 00 A0 FD | 	call	#pushregs_
1633c     0C F0 07 F1 | 	add	ptra, #12
16340     08 4E 05 F1 | 	add	fp, #8
16344     A7 38 68 FC | 	wrlong	#28, fp
16348     08 4E 85 F1 | 	sub	fp, #8
1634c     59 00 00 FF 
16350     38 E5 05 F1 | 	add	objptr, ##45880
16354     F2 12 02 FB | 	rdlong	arg01, objptr
16358     59 00 00 FF 
1635c     38 E5 85 F1 | 	sub	objptr, ##45880
16360     A7 12 62 FC | 	wrlong	arg01, fp
16364     A7 12 02 F6 | 	mov	arg01, fp
16368     68 48 BF FD | 	call	#_push
1636c     A7 F0 03 F6 | 	mov	ptra, fp
16370     B2 00 A0 FD | 	call	#popregs_
16374                 | _do_mousew_ret
16374     2D 00 64 FD | 	ret
16378                 | 
16378                 | ' 
16378                 | ' sub do_mousek
16378                 | _do_mousek
16378     00 4A 05 F6 | 	mov	COUNT_, #0
1637c     A8 00 A0 FD | 	call	#pushregs_
16380     0C F0 07 F1 | 	add	ptra, #12
16384     08 4E 05 F1 | 	add	fp, #8
16388     A7 3A 68 FC | 	wrlong	#29, fp
1638c     08 4E 85 F1 | 	sub	fp, #8
16390     59 00 00 FF 
16394     34 E5 05 F1 | 	add	objptr, ##45876
16398     F2 12 02 FB | 	rdlong	arg01, objptr
1639c     59 00 00 FF 
163a0     34 E5 85 F1 | 	sub	objptr, ##45876
163a4     A7 12 62 FC | 	wrlong	arg01, fp
163a8     A7 12 02 F6 | 	mov	arg01, fp
163ac     24 48 BF FD | 	call	#_push
163b0     A7 F0 03 F6 | 	mov	ptra, fp
163b4     B2 00 A0 FD | 	call	#popregs_
163b8                 | _do_mousek_ret
163b8     2D 00 64 FD | 	ret
163bc                 | 
163bc                 | ' 
163bc                 | ' 
163bc                 | ' sub do_rdpin
163bc                 | _do_rdpin
163bc     00 4A 05 F6 | 	mov	COUNT_, #0
163c0     A8 00 A0 FD | 	call	#pushregs_
163c4     0C F0 07 F1 | 	add	ptra, #12
163c8     70 47 BF FD | 	call	#_pop
163cc     A7 FA 61 FC | 	wrlong	result1, fp
163d0     04 4E 05 F1 | 	add	fp, #4
163d4     A7 FC 61 FC | 	wrlong	result2, fp
163d8     04 4E 05 F1 | 	add	fp, #4
163dc     A7 FE 61 FC | 	wrlong	result3, fp
163e0     08 4E 85 F1 | 	sub	fp, #8
163e4     A7 12 02 F6 | 	mov	arg01, fp
163e8     C8 DA BF FD | 	call	#_converttoint
163ec     FD FA 89 FA | 	rdpin	result1, result1
163f0     5A 00 00 FF 
163f4     60 E4 05 F1 | 	add	objptr, ##46176
163f8     F2 FA 61 FC | 	wrlong	result1, objptr
163fc     5A 00 00 FF 
16400     60 E4 85 F1 | 	sub	objptr, ##46176
16404     08 4E 05 F1 | 	add	fp, #8
16408     A7 3A 68 FC | 	wrlong	#29, fp
1640c     08 4E 85 F1 | 	sub	fp, #8
16410     A7 08 68 FC | 	wrlong	#4, fp
16414     A7 12 02 F6 | 	mov	arg01, fp
16418     B8 47 BF FD | 	call	#_push
1641c     A7 F0 03 F6 | 	mov	ptra, fp
16420     B2 00 A0 FD | 	call	#popregs_
16424                 | _do_rdpin_ret
16424     2D 00 64 FD | 	ret
16428                 | 
16428                 | ' 
16428                 | ' sub do_rqpin
16428                 | _do_rqpin
16428     00 4A 05 F6 | 	mov	COUNT_, #0
1642c     A8 00 A0 FD | 	call	#pushregs_
16430     0C F0 07 F1 | 	add	ptra, #12
16434     04 47 BF FD | 	call	#_pop
16438     A7 FA 61 FC | 	wrlong	result1, fp
1643c     04 4E 05 F1 | 	add	fp, #4
16440     A7 FC 61 FC | 	wrlong	result2, fp
16444     04 4E 05 F1 | 	add	fp, #4
16448     A7 FE 61 FC | 	wrlong	result3, fp
1644c     08 4E 85 F1 | 	sub	fp, #8
16450     A7 12 02 F6 | 	mov	arg01, fp
16454     5C DA BF FD | 	call	#_converttoint
16458     FD 12 02 F6 | 	mov	arg01, result1
1645c     00 FA 05 F6 | 	mov	result1, #0
16460     09 FB 81 FA | 	rqpin	result1, arg01
16464     5A 00 00 FF 
16468     60 E4 05 F1 | 	add	objptr, ##46176
1646c     F2 FA 61 FC | 	wrlong	result1, objptr
16470     5A 00 00 FF 
16474     60 E4 85 F1 | 	sub	objptr, ##46176
16478     08 4E 05 F1 | 	add	fp, #8
1647c     A7 3A 68 FC | 	wrlong	#29, fp
16480     08 4E 85 F1 | 	sub	fp, #8
16484     A7 08 68 FC | 	wrlong	#4, fp
16488     A7 12 02 F6 | 	mov	arg01, fp
1648c     44 47 BF FD | 	call	#_push
16490     A7 F0 03 F6 | 	mov	ptra, fp
16494     B2 00 A0 FD | 	call	#popregs_
16498                 | _do_rqpin_ret
16498     2D 00 64 FD | 	ret
1649c                 | 
1649c                 | ' 
1649c                 | ' sub do_pinread
1649c                 | _do_pinread
1649c     00 4A 05 F6 | 	mov	COUNT_, #0
164a0     A8 00 A0 FD | 	call	#pushregs_
164a4     0C F0 07 F1 | 	add	ptra, #12
164a8     90 46 BF FD | 	call	#_pop
164ac     A7 FA 61 FC | 	wrlong	result1, fp
164b0     04 4E 05 F1 | 	add	fp, #4
164b4     A7 FC 61 FC | 	wrlong	result2, fp
164b8     04 4E 05 F1 | 	add	fp, #4
164bc     A7 FE 61 FC | 	wrlong	result3, fp
164c0     08 4E 85 F1 | 	sub	fp, #8
164c4     A7 12 02 F6 | 	mov	arg01, fp
164c8     E8 D9 BF FD | 	call	#_converttoint
164cc     FD 12 02 F6 | 	mov	arg01, result1
164d0     20 12 CE F7 | 	test	arg01, #32 wz
164d4     FF FB 01 56 |  if_ne	mov	result1, inb
164d8     FE FB 01 A6 |  if_e	mov	result1, ina
164dc     09 FB 41 F0 | 	shr	result1, arg01
164e0     06 12 46 F0 | 	shr	arg01, #6
164e4     09 FB 41 F7 | 	zerox	result1, arg01
164e8     5A 00 00 FF 
164ec     60 E4 05 F1 | 	add	objptr, ##46176
164f0     F2 FA 61 FC | 	wrlong	result1, objptr
164f4     5A 00 00 FF 
164f8     60 E4 85 F1 | 	sub	objptr, ##46176
164fc     08 4E 05 F1 | 	add	fp, #8
16500     A7 3A 68 FC | 	wrlong	#29, fp
16504     08 4E 85 F1 | 	sub	fp, #8
16508     A7 08 68 FC | 	wrlong	#4, fp
1650c     A7 12 02 F6 | 	mov	arg01, fp
16510     C0 46 BF FD | 	call	#_push
16514     A7 F0 03 F6 | 	mov	ptra, fp
16518     B2 00 A0 FD | 	call	#popregs_
1651c                 | _do_pinread_ret
1651c     2D 00 64 FD | 	ret
16520                 | 
16520                 | ' 
16520                 | ' sub do_gettime
16520                 | _do_gettime
16520     02 4A 05 F6 | 	mov	COUNT_, #2
16524     A8 00 A0 FD | 	call	#pushregs_
16528     14 F0 07 F1 | 	add	ptra, #20
1652c                 | ' 
1652c                 | ' const asm 
1652c     1A 1E 72 FD | 	getct	local01 wc
16530     1A 20 62 FD | 	getct	local02
16534                 | ' 
16534                 | ' return hi1, lo1
16534     10 FD 01 F6 | 	mov	result2, local02
16538     A7 1E 62 FC | 	wrlong	local01, fp
1653c     04 4E 05 F1 | 	add	fp, #4
16540     A7 FC 61 FC | 	wrlong	result2, fp
16544     0C 4E 05 F1 | 	add	fp, #12
16548     A7 3A 68 FC | 	wrlong	#29, fp
1654c     0C 4E 85 F1 | 	sub	fp, #12
16550     A7 12 02 FB | 	rdlong	arg01, fp
16554     04 4E 05 F1 | 	add	fp, #4
16558     A7 12 62 FC | 	wrlong	arg01, fp
1655c     08 4E 85 F1 | 	sub	fp, #8
16560     A7 12 02 FB | 	rdlong	arg01, fp
16564     0C 4E 05 F1 | 	add	fp, #12
16568     A7 12 62 FC | 	wrlong	arg01, fp
1656c     04 4E 85 F1 | 	sub	fp, #4
16570     A7 12 02 F6 | 	mov	arg01, fp
16574     08 4E 85 F1 | 	sub	fp, #8
16578     58 46 BF FD | 	call	#_push
1657c     A7 F0 03 F6 | 	mov	ptra, fp
16580     B2 00 A0 FD | 	call	#popregs_
16584                 | _do_gettime_ret
16584     2D 00 64 FD | 	ret
16588                 | 
16588                 | '    
16588                 | ' 
16588                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
16588                 | ' 
16588                 | ' '' ----------------------------- Clear the screen
16588                 | ' 
16588                 | ' sub do_cls
16588                 | _do_cls
16588     37 00 00 FF 
1658c     6C E4 05 F1 | 	add	objptr, ##28268
16590     F2 12 02 FB | 	rdlong	arg01, objptr
16594     04 E4 85 F1 | 	sub	objptr, #4
16598     F2 14 02 FB | 	rdlong	arg02, objptr
1659c     37 00 00 FF 
165a0     68 E4 85 F1 | 	sub	objptr, ##28264
165a4     AC 7B B0 FD | 	call	#_hg010b_spin2_cls
165a8     37 00 00 FF 
165ac     6C E4 05 F1 | 	add	objptr, ##28268
165b0     F2 14 02 FB | 	rdlong	arg02, objptr
165b4     14 E4 85 F1 | 	sub	objptr, #20
165b8     F2 14 62 FC | 	wrlong	arg02, objptr
165bc     37 00 00 FF 
165c0     58 E4 85 F1 | 	sub	objptr, ##28248
165c4                 | _do_cls_ret
165c4     2D 00 64 FD | 	ret
165c8                 | 
165c8                 | ' 
165c8                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
165c8                 | ' 
165c8                 | ' sub do_color
165c8                 | _do_color
165c8     03 4A 05 F6 | 	mov	COUNT_, #3
165cc     A8 00 A0 FD | 	call	#pushregs_
165d0     68 45 BF FD | 	call	#_pop
165d4     FD 1E 02 F6 | 	mov	local01, result1
165d8     FE 20 02 F6 | 	mov	local02, result2
165dc     FF 22 02 F6 | 	mov	local03, result3
165e0     37 00 00 FF 
165e4     58 E4 05 F1 | 	add	objptr, ##28248
165e8     F2 1E 62 FC | 	wrlong	local01, objptr
165ec     37 00 00 FF 
165f0     58 E4 85 F1 | 	sub	objptr, ##28248
165f4     A7 F0 03 F6 | 	mov	ptra, fp
165f8     B2 00 A0 FD | 	call	#popregs_
165fc                 | _do_color_ret
165fc     2D 00 64 FD | 	ret
16600                 | 
16600                 | ' 
16600                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
16600                 | ' 
16600                 | ' sub do_plot
16600                 | _do_plot
16600     00 4A 05 F6 | 	mov	COUNT_, #0
16604     A8 00 A0 FD | 	call	#pushregs_
16608     20 F0 07 F1 | 	add	ptra, #32
1660c     2C 45 BF FD | 	call	#_pop
16610     FD 16 02 F6 | 	mov	arg03, result1
16614     FE 14 02 F6 | 	mov	arg02, result2
16618     FF 12 02 F6 | 	mov	arg01, result3
1661c     0C 4E 05 F1 | 	add	fp, #12
16620     A7 16 62 FC | 	wrlong	arg03, fp
16624     04 4E 05 F1 | 	add	fp, #4
16628     A7 14 62 FC | 	wrlong	arg02, fp
1662c     04 4E 05 F1 | 	add	fp, #4
16630     A7 12 62 FC | 	wrlong	arg01, fp
16634     14 4E 85 F1 | 	sub	fp, #20
16638     00 45 BF FD | 	call	#_pop
1663c     FF 16 02 F6 | 	mov	arg03, result3
16640     A7 FA 61 FC | 	wrlong	result1, fp
16644     04 4E 05 F1 | 	add	fp, #4
16648     A7 FC 61 FC | 	wrlong	result2, fp
1664c     04 4E 05 F1 | 	add	fp, #4
16650     A7 16 62 FC | 	wrlong	arg03, fp
16654     08 4E 85 F1 | 	sub	fp, #8
16658     A7 12 02 F6 | 	mov	arg01, fp
1665c     54 D8 BF FD | 	call	#_converttoint
16660     18 4E 05 F1 | 	add	fp, #24
16664     A7 FA 61 FC | 	wrlong	result1, fp
16668     0C 4E 85 F1 | 	sub	fp, #12
1666c     A7 12 02 F6 | 	mov	arg01, fp
16670     0C 4E 85 F1 | 	sub	fp, #12
16674     3C D8 BF FD | 	call	#_converttoint
16678     1C 4E 05 F1 | 	add	fp, #28
1667c     A7 FA 61 FC | 	wrlong	result1, fp
16680     04 4E 85 F1 | 	sub	fp, #4
16684     A7 16 02 FB | 	rdlong	arg03, fp
16688     37 00 00 FF 
1668c     5C E4 05 F1 | 	add	objptr, ##28252
16690     F2 16 62 FC | 	wrlong	arg03, objptr
16694     04 4E 05 F1 | 	add	fp, #4
16698     A7 14 02 FB | 	rdlong	arg02, fp
1669c     1C 4E 85 F1 | 	sub	fp, #28
166a0     04 E4 05 F1 | 	add	objptr, #4
166a4     F2 14 62 FC | 	wrlong	arg02, objptr
166a8     04 E4 85 F1 | 	sub	objptr, #4
166ac     F2 12 02 FB | 	rdlong	arg01, objptr
166b0     04 E4 85 F1 | 	sub	objptr, #4
166b4     F2 16 02 FB | 	rdlong	arg03, objptr
166b8     37 00 00 FF 
166bc     58 E4 85 F1 | 	sub	objptr, ##28248
166c0     BC 6D B0 FD | 	call	#_hg010b_spin2_putpixel
166c4     A7 F0 03 F6 | 	mov	ptra, fp
166c8     B2 00 A0 FD | 	call	#popregs_
166cc                 | _do_plot_ret
166cc     2D 00 64 FD | 	ret
166d0                 | 
166d0                 | ' 
166d0                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
166d0                 | ' 
166d0                 | ' sub do_draw
166d0                 | _do_draw
166d0     00 4A 05 F6 | 	mov	COUNT_, #0
166d4     A8 00 A0 FD | 	call	#pushregs_
166d8     20 F0 07 F1 | 	add	ptra, #32
166dc     5C 44 BF FD | 	call	#_pop
166e0     FD 1A 02 F6 | 	mov	arg05, result1
166e4     FE 18 02 F6 | 	mov	arg04, result2
166e8     FF 16 02 F6 | 	mov	arg03, result3
166ec     0C 4E 05 F1 | 	add	fp, #12
166f0     A7 1A 62 FC | 	wrlong	arg05, fp
166f4     04 4E 05 F1 | 	add	fp, #4
166f8     A7 18 62 FC | 	wrlong	arg04, fp
166fc     04 4E 05 F1 | 	add	fp, #4
16700     A7 16 62 FC | 	wrlong	arg03, fp
16704     14 4E 85 F1 | 	sub	fp, #20
16708     30 44 BF FD | 	call	#_pop
1670c     FF 1A 02 F6 | 	mov	arg05, result3
16710     A7 FA 61 FC | 	wrlong	result1, fp
16714     04 4E 05 F1 | 	add	fp, #4
16718     A7 FC 61 FC | 	wrlong	result2, fp
1671c     04 4E 05 F1 | 	add	fp, #4
16720     A7 1A 62 FC | 	wrlong	arg05, fp
16724     08 4E 85 F1 | 	sub	fp, #8
16728     A7 12 02 F6 | 	mov	arg01, fp
1672c     84 D7 BF FD | 	call	#_converttoint
16730     18 4E 05 F1 | 	add	fp, #24
16734     A7 FA 61 FC | 	wrlong	result1, fp
16738     0C 4E 85 F1 | 	sub	fp, #12
1673c     A7 12 02 F6 | 	mov	arg01, fp
16740     0C 4E 85 F1 | 	sub	fp, #12
16744     6C D7 BF FD | 	call	#_converttoint
16748     1C 4E 05 F1 | 	add	fp, #28
1674c     A7 FA 61 FC | 	wrlong	result1, fp
16750     37 00 00 FF 
16754     5C E4 05 F1 | 	add	objptr, ##28252
16758     F2 12 02 FB | 	rdlong	arg01, objptr
1675c     04 E4 05 F1 | 	add	objptr, #4
16760     F2 14 02 FB | 	rdlong	arg02, objptr
16764     04 4E 85 F1 | 	sub	fp, #4
16768     A7 16 02 FB | 	rdlong	arg03, fp
1676c     FD 18 02 F6 | 	mov	arg04, result1
16770     18 4E 85 F1 | 	sub	fp, #24
16774     08 E4 85 F1 | 	sub	objptr, #8
16778     F2 1A 02 FB | 	rdlong	arg05, objptr
1677c     37 00 00 FF 
16780     58 E4 85 F1 | 	sub	objptr, ##28248
16784     A8 6F B0 FD | 	call	#_hg010b_spin2_draw
16788     18 4E 05 F1 | 	add	fp, #24
1678c     A7 1A 02 FB | 	rdlong	arg05, fp
16790     37 00 00 FF 
16794     5C E4 05 F1 | 	add	objptr, ##28252
16798     F2 1A 62 FC | 	wrlong	arg05, objptr
1679c     04 4E 05 F1 | 	add	fp, #4
167a0     A7 1A 02 FB | 	rdlong	arg05, fp
167a4     1C 4E 85 F1 | 	sub	fp, #28
167a8     04 E4 05 F1 | 	add	objptr, #4
167ac     F2 1A 62 FC | 	wrlong	arg05, objptr
167b0     37 00 00 FF 
167b4     60 E4 85 F1 | 	sub	objptr, ##28256
167b8     A7 F0 03 F6 | 	mov	ptra, fp
167bc     B2 00 A0 FD | 	call	#popregs_
167c0                 | _do_draw_ret
167c0     2D 00 64 FD | 	ret
167c4                 | 
167c4                 | ' 
167c4                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
167c4                 | ' 
167c4                 | ' sub do_fcircle
167c4                 | _do_fcircle
167c4     02 4A 05 F6 | 	mov	COUNT_, #2
167c8     A8 00 A0 FD | 	call	#pushregs_
167cc     24 F0 07 F1 | 	add	ptra, #36
167d0     68 43 BF FD | 	call	#_pop
167d4     FD 18 02 F6 | 	mov	arg04, result1
167d8     FE 16 02 F6 | 	mov	arg03, result2
167dc     FF 14 02 F6 | 	mov	arg02, result3
167e0     18 4E 05 F1 | 	add	fp, #24
167e4     A7 18 62 FC | 	wrlong	arg04, fp
167e8     04 4E 05 F1 | 	add	fp, #4
167ec     A7 16 62 FC | 	wrlong	arg03, fp
167f0     04 4E 05 F1 | 	add	fp, #4
167f4     A7 14 62 FC | 	wrlong	arg02, fp
167f8     20 4E 85 F1 | 	sub	fp, #32
167fc     3C 43 BF FD | 	call	#_pop
16800     FD 18 02 F6 | 	mov	arg04, result1
16804     FE 16 02 F6 | 	mov	arg03, result2
16808     FF 1E 02 F6 | 	mov	local01, result3
1680c     0C 4E 05 F1 | 	add	fp, #12
16810     A7 18 62 FC | 	wrlong	arg04, fp
16814     04 4E 05 F1 | 	add	fp, #4
16818     A7 16 62 FC | 	wrlong	arg03, fp
1681c     04 4E 05 F1 | 	add	fp, #4
16820     A7 1E 62 FC | 	wrlong	local01, fp
16824     14 4E 85 F1 | 	sub	fp, #20
16828     10 43 BF FD | 	call	#_pop
1682c     A7 FA 61 FC | 	wrlong	result1, fp
16830     04 4E 05 F1 | 	add	fp, #4
16834     A7 FC 61 FC | 	wrlong	result2, fp
16838     04 4E 05 F1 | 	add	fp, #4
1683c     A7 FE 61 FC | 	wrlong	result3, fp
16840                 | ' 
16840                 | ' t3=pop()
16840                 | ' t2=pop()
16840                 | ' t1=pop()
16840                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
16840     FF 18 02 F6 | 	mov	arg04, result3
16844     08 4E 85 F1 | 	sub	fp, #8
16848     1C 18 0E F2 | 	cmp	arg04, #28 wz
1684c     08 4E 05 51 |  if_ne	add	fp, #8
16850     A7 1E 02 5B |  if_ne	rdlong	local01, fp
16854     08 4E 85 51 |  if_ne	sub	fp, #8
16858     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
1685c     7C 00 90 5D |  if_ne	jmp	#LR__1840
16860     14 4E 05 F1 | 	add	fp, #20
16864     A7 1E 02 FB | 	rdlong	local01, fp
16868     14 4E 85 F1 | 	sub	fp, #20
1686c     1C 1E 0E F2 | 	cmp	local01, #28 wz
16870     14 4E 05 51 |  if_ne	add	fp, #20
16874     A7 18 02 5B |  if_ne	rdlong	arg04, fp
16878     14 4E 85 51 |  if_ne	sub	fp, #20
1687c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
16880     58 00 90 5D |  if_ne	jmp	#LR__1840
16884     20 4E 05 F1 | 	add	fp, #32
16888     A7 1E 02 FB | 	rdlong	local01, fp
1688c     20 4E 85 F1 | 	sub	fp, #32
16890     1C 1E 0E F2 | 	cmp	local01, #28 wz
16894     20 4E 05 51 |  if_ne	add	fp, #32
16898     A7 18 02 5B |  if_ne	rdlong	arg04, fp
1689c     20 4E 85 51 |  if_ne	sub	fp, #32
168a0     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
168a4     34 00 90 5D |  if_ne	jmp	#LR__1840
168a8     A7 12 02 FB | 	rdlong	arg01, fp
168ac     0C 4E 05 F1 | 	add	fp, #12
168b0     A7 14 02 FB | 	rdlong	arg02, fp
168b4     0C 4E 05 F1 | 	add	fp, #12
168b8     A7 16 02 FB | 	rdlong	arg03, fp
168bc     18 4E 85 F1 | 	sub	fp, #24
168c0     37 00 00 FF 
168c4     58 E4 05 F1 | 	add	objptr, ##28248
168c8     F2 18 02 FB | 	rdlong	arg04, objptr
168cc     37 00 00 FF 
168d0     58 E4 85 F1 | 	sub	objptr, ##28248
168d4     DC 72 B0 FD | 	call	#_hg010b_spin2_fcircle
168d8                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
168d8     54 00 90 FD | 	jmp	#LR__1841
168dc                 | LR__1840
168dc     A7 12 02 F6 | 	mov	arg01, fp
168e0     D0 D5 BF FD | 	call	#_converttoint
168e4     FD 1E 02 F6 | 	mov	local01, result1
168e8     0C 4E 05 F1 | 	add	fp, #12
168ec     A7 12 02 F6 | 	mov	arg01, fp
168f0     0C 4E 85 F1 | 	sub	fp, #12
168f4     BC D5 BF FD | 	call	#_converttoint
168f8     FD 20 02 F6 | 	mov	local02, result1
168fc     18 4E 05 F1 | 	add	fp, #24
16900     A7 12 02 F6 | 	mov	arg01, fp
16904     18 4E 85 F1 | 	sub	fp, #24
16908     A8 D5 BF FD | 	call	#_converttoint
1690c     FD 16 02 F6 | 	mov	arg03, result1
16910     37 00 00 FF 
16914     58 E4 05 F1 | 	add	objptr, ##28248
16918     F2 18 02 FB | 	rdlong	arg04, objptr
1691c     37 00 00 FF 
16920     58 E4 85 F1 | 	sub	objptr, ##28248
16924     0F 13 02 F6 | 	mov	arg01, local01
16928     10 15 02 F6 | 	mov	arg02, local02
1692c     84 72 B0 FD | 	call	#_hg010b_spin2_fcircle
16930                 | LR__1841
16930     A7 F0 03 F6 | 	mov	ptra, fp
16934     B2 00 A0 FD | 	call	#popregs_
16938                 | _do_fcircle_ret
16938     2D 00 64 FD | 	ret
1693c                 | 
1693c                 | ' 
1693c                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
1693c                 | ' 
1693c                 | ' sub do_circle
1693c                 | _do_circle
1693c     02 4A 05 F6 | 	mov	COUNT_, #2
16940     A8 00 A0 FD | 	call	#pushregs_
16944     24 F0 07 F1 | 	add	ptra, #36
16948     F0 41 BF FD | 	call	#_pop
1694c     FD 18 02 F6 | 	mov	arg04, result1
16950     FE 16 02 F6 | 	mov	arg03, result2
16954     FF 14 02 F6 | 	mov	arg02, result3
16958     18 4E 05 F1 | 	add	fp, #24
1695c     A7 18 62 FC | 	wrlong	arg04, fp
16960     04 4E 05 F1 | 	add	fp, #4
16964     A7 16 62 FC | 	wrlong	arg03, fp
16968     04 4E 05 F1 | 	add	fp, #4
1696c     A7 14 62 FC | 	wrlong	arg02, fp
16970     20 4E 85 F1 | 	sub	fp, #32
16974     C4 41 BF FD | 	call	#_pop
16978     FD 18 02 F6 | 	mov	arg04, result1
1697c     FE 16 02 F6 | 	mov	arg03, result2
16980     FF 1E 02 F6 | 	mov	local01, result3
16984     0C 4E 05 F1 | 	add	fp, #12
16988     A7 18 62 FC | 	wrlong	arg04, fp
1698c     04 4E 05 F1 | 	add	fp, #4
16990     A7 16 62 FC | 	wrlong	arg03, fp
16994     04 4E 05 F1 | 	add	fp, #4
16998     A7 1E 62 FC | 	wrlong	local01, fp
1699c     14 4E 85 F1 | 	sub	fp, #20
169a0     98 41 BF FD | 	call	#_pop
169a4     A7 FA 61 FC | 	wrlong	result1, fp
169a8     04 4E 05 F1 | 	add	fp, #4
169ac     A7 FC 61 FC | 	wrlong	result2, fp
169b0     04 4E 05 F1 | 	add	fp, #4
169b4     A7 FE 61 FC | 	wrlong	result3, fp
169b8                 | ' 
169b8                 | ' t3=pop()
169b8                 | ' t2=pop()
169b8                 | ' t1=pop()
169b8                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
169b8     FF 18 02 F6 | 	mov	arg04, result3
169bc     08 4E 85 F1 | 	sub	fp, #8
169c0     1C 18 0E F2 | 	cmp	arg04, #28 wz
169c4     08 4E 05 51 |  if_ne	add	fp, #8
169c8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
169cc     08 4E 85 51 |  if_ne	sub	fp, #8
169d0     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
169d4     7C 00 90 5D |  if_ne	jmp	#LR__1850
169d8     14 4E 05 F1 | 	add	fp, #20
169dc     A7 1E 02 FB | 	rdlong	local01, fp
169e0     14 4E 85 F1 | 	sub	fp, #20
169e4     1C 1E 0E F2 | 	cmp	local01, #28 wz
169e8     14 4E 05 51 |  if_ne	add	fp, #20
169ec     A7 18 02 5B |  if_ne	rdlong	arg04, fp
169f0     14 4E 85 51 |  if_ne	sub	fp, #20
169f4     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
169f8     58 00 90 5D |  if_ne	jmp	#LR__1850
169fc     20 4E 05 F1 | 	add	fp, #32
16a00     A7 1E 02 FB | 	rdlong	local01, fp
16a04     20 4E 85 F1 | 	sub	fp, #32
16a08     1C 1E 0E F2 | 	cmp	local01, #28 wz
16a0c     20 4E 05 51 |  if_ne	add	fp, #32
16a10     A7 18 02 5B |  if_ne	rdlong	arg04, fp
16a14     20 4E 85 51 |  if_ne	sub	fp, #32
16a18     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
16a1c     34 00 90 5D |  if_ne	jmp	#LR__1850
16a20     A7 12 02 FB | 	rdlong	arg01, fp
16a24     0C 4E 05 F1 | 	add	fp, #12
16a28     A7 14 02 FB | 	rdlong	arg02, fp
16a2c     0C 4E 05 F1 | 	add	fp, #12
16a30     A7 16 02 FB | 	rdlong	arg03, fp
16a34     18 4E 85 F1 | 	sub	fp, #24
16a38     37 00 00 FF 
16a3c     58 E4 05 F1 | 	add	objptr, ##28248
16a40     F2 18 02 FB | 	rdlong	arg04, objptr
16a44     37 00 00 FF 
16a48     58 E4 85 F1 | 	sub	objptr, ##28248
16a4c     70 72 B0 FD | 	call	#_hg010b_spin2_circle
16a50                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
16a50     54 00 90 FD | 	jmp	#LR__1851
16a54                 | LR__1850
16a54     A7 12 02 F6 | 	mov	arg01, fp
16a58     58 D4 BF FD | 	call	#_converttoint
16a5c     FD 1E 02 F6 | 	mov	local01, result1
16a60     0C 4E 05 F1 | 	add	fp, #12
16a64     A7 12 02 F6 | 	mov	arg01, fp
16a68     0C 4E 85 F1 | 	sub	fp, #12
16a6c     44 D4 BF FD | 	call	#_converttoint
16a70     FD 20 02 F6 | 	mov	local02, result1
16a74     18 4E 05 F1 | 	add	fp, #24
16a78     A7 12 02 F6 | 	mov	arg01, fp
16a7c     18 4E 85 F1 | 	sub	fp, #24
16a80     30 D4 BF FD | 	call	#_converttoint
16a84     FD 16 02 F6 | 	mov	arg03, result1
16a88     37 00 00 FF 
16a8c     58 E4 05 F1 | 	add	objptr, ##28248
16a90     F2 18 02 FB | 	rdlong	arg04, objptr
16a94     37 00 00 FF 
16a98     58 E4 85 F1 | 	sub	objptr, ##28248
16a9c     0F 13 02 F6 | 	mov	arg01, local01
16aa0     10 15 02 F6 | 	mov	arg02, local02
16aa4     18 72 B0 FD | 	call	#_hg010b_spin2_circle
16aa8                 | LR__1851
16aa8     A7 F0 03 F6 | 	mov	ptra, fp
16aac     B2 00 A0 FD | 	call	#popregs_
16ab0                 | _do_circle_ret
16ab0     2D 00 64 FD | 	ret
16ab4                 | 
16ab4                 | ' 
16ab4                 | ' ' -------------------------- Draw a rectangle
16ab4                 | ' 
16ab4                 | ' sub do_box
16ab4                 | _do_box
16ab4     03 4A 05 F6 | 	mov	COUNT_, #3
16ab8     A8 00 A0 FD | 	call	#pushregs_
16abc     30 F0 07 F1 | 	add	ptra, #48
16ac0     78 40 BF FD | 	call	#_pop
16ac4     FD 1A 02 F6 | 	mov	arg05, result1
16ac8     FE 18 02 F6 | 	mov	arg04, result2
16acc     FF 16 02 F6 | 	mov	arg03, result3
16ad0     24 4E 05 F1 | 	add	fp, #36
16ad4     A7 1A 62 FC | 	wrlong	arg05, fp
16ad8     04 4E 05 F1 | 	add	fp, #4
16adc     A7 18 62 FC | 	wrlong	arg04, fp
16ae0     04 4E 05 F1 | 	add	fp, #4
16ae4     A7 16 62 FC | 	wrlong	arg03, fp
16ae8     2C 4E 85 F1 | 	sub	fp, #44
16aec     4C 40 BF FD | 	call	#_pop
16af0     FD 1A 02 F6 | 	mov	arg05, result1
16af4     FE 18 02 F6 | 	mov	arg04, result2
16af8     FF 16 02 F6 | 	mov	arg03, result3
16afc     18 4E 05 F1 | 	add	fp, #24
16b00     A7 1A 62 FC | 	wrlong	arg05, fp
16b04     04 4E 05 F1 | 	add	fp, #4
16b08     A7 18 62 FC | 	wrlong	arg04, fp
16b0c     04 4E 05 F1 | 	add	fp, #4
16b10     A7 16 62 FC | 	wrlong	arg03, fp
16b14     20 4E 85 F1 | 	sub	fp, #32
16b18     20 40 BF FD | 	call	#_pop
16b1c     FD 1A 02 F6 | 	mov	arg05, result1
16b20     FE 18 02 F6 | 	mov	arg04, result2
16b24     FF 1E 02 F6 | 	mov	local01, result3
16b28     0C 4E 05 F1 | 	add	fp, #12
16b2c     A7 1A 62 FC | 	wrlong	arg05, fp
16b30     04 4E 05 F1 | 	add	fp, #4
16b34     A7 18 62 FC | 	wrlong	arg04, fp
16b38     04 4E 05 F1 | 	add	fp, #4
16b3c     A7 1E 62 FC | 	wrlong	local01, fp
16b40     14 4E 85 F1 | 	sub	fp, #20
16b44     F4 3F BF FD | 	call	#_pop
16b48     A7 FA 61 FC | 	wrlong	result1, fp
16b4c     04 4E 05 F1 | 	add	fp, #4
16b50     A7 FC 61 FC | 	wrlong	result2, fp
16b54     04 4E 05 F1 | 	add	fp, #4
16b58     A7 FE 61 FC | 	wrlong	result3, fp
16b5c                 | ' 
16b5c                 | ' t4=pop()
16b5c                 | ' t3=pop()
16b5c                 | ' t2=pop()
16b5c                 | ' t1=pop()
16b5c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
16b5c     FF 1A 02 F6 | 	mov	arg05, result3
16b60     08 4E 85 F1 | 	sub	fp, #8
16b64     1C 1A 0E F2 | 	cmp	arg05, #28 wz
16b68     08 4E 05 51 |  if_ne	add	fp, #8
16b6c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
16b70     08 4E 85 51 |  if_ne	sub	fp, #8
16b74     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
16b78     A8 00 90 5D |  if_ne	jmp	#LR__1860
16b7c     14 4E 05 F1 | 	add	fp, #20
16b80     A7 1E 02 FB | 	rdlong	local01, fp
16b84     14 4E 85 F1 | 	sub	fp, #20
16b88     1C 1E 0E F2 | 	cmp	local01, #28 wz
16b8c     14 4E 05 51 |  if_ne	add	fp, #20
16b90     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
16b94     14 4E 85 51 |  if_ne	sub	fp, #20
16b98     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
16b9c     84 00 90 5D |  if_ne	jmp	#LR__1860
16ba0     20 4E 05 F1 | 	add	fp, #32
16ba4     A7 1E 02 FB | 	rdlong	local01, fp
16ba8     20 4E 85 F1 | 	sub	fp, #32
16bac     1C 1E 0E F2 | 	cmp	local01, #28 wz
16bb0     20 4E 05 51 |  if_ne	add	fp, #32
16bb4     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
16bb8     20 4E 85 51 |  if_ne	sub	fp, #32
16bbc     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
16bc0     60 00 90 5D |  if_ne	jmp	#LR__1860
16bc4     2C 4E 05 F1 | 	add	fp, #44
16bc8     A7 1E 02 FB | 	rdlong	local01, fp
16bcc     2C 4E 85 F1 | 	sub	fp, #44
16bd0     1C 1E 0E F2 | 	cmp	local01, #28 wz
16bd4     2C 4E 05 51 |  if_ne	add	fp, #44
16bd8     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
16bdc     2C 4E 85 51 |  if_ne	sub	fp, #44
16be0     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
16be4     3C 00 90 5D |  if_ne	jmp	#LR__1860
16be8     A7 12 02 FB | 	rdlong	arg01, fp
16bec     0C 4E 05 F1 | 	add	fp, #12
16bf0     A7 14 02 FB | 	rdlong	arg02, fp
16bf4     0C 4E 05 F1 | 	add	fp, #12
16bf8     A7 16 02 FB | 	rdlong	arg03, fp
16bfc     0C 4E 05 F1 | 	add	fp, #12
16c00     A7 18 02 FB | 	rdlong	arg04, fp
16c04     24 4E 85 F1 | 	sub	fp, #36
16c08     37 00 00 FF 
16c0c     58 E4 05 F1 | 	add	objptr, ##28248
16c10     F2 1A 02 FB | 	rdlong	arg05, objptr
16c14     37 00 00 FF 
16c18     58 E4 85 F1 | 	sub	objptr, ##28248
16c1c     6C 72 B0 FD | 	call	#_hg010b_spin2_box
16c20                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
16c20     6C 00 90 FD | 	jmp	#LR__1861
16c24                 | LR__1860
16c24     A7 12 02 F6 | 	mov	arg01, fp
16c28     88 D2 BF FD | 	call	#_converttoint
16c2c     FD 20 02 F6 | 	mov	local02, result1
16c30     0C 4E 05 F1 | 	add	fp, #12
16c34     A7 12 02 F6 | 	mov	arg01, fp
16c38     0C 4E 85 F1 | 	sub	fp, #12
16c3c     74 D2 BF FD | 	call	#_converttoint
16c40     FD 22 02 F6 | 	mov	local03, result1
16c44     18 4E 05 F1 | 	add	fp, #24
16c48     A7 12 02 F6 | 	mov	arg01, fp
16c4c     18 4E 85 F1 | 	sub	fp, #24
16c50     60 D2 BF FD | 	call	#_converttoint
16c54     FD 1E 02 F6 | 	mov	local01, result1
16c58     24 4E 05 F1 | 	add	fp, #36
16c5c     A7 12 02 F6 | 	mov	arg01, fp
16c60     24 4E 85 F1 | 	sub	fp, #36
16c64     4C D2 BF FD | 	call	#_converttoint
16c68     FD 18 02 F6 | 	mov	arg04, result1
16c6c     37 00 00 FF 
16c70     58 E4 05 F1 | 	add	objptr, ##28248
16c74     F2 1A 02 FB | 	rdlong	arg05, objptr
16c78     37 00 00 FF 
16c7c     58 E4 85 F1 | 	sub	objptr, ##28248
16c80     10 13 02 F6 | 	mov	arg01, local02
16c84     11 15 02 F6 | 	mov	arg02, local03
16c88     0F 17 02 F6 | 	mov	arg03, local01
16c8c     FC 71 B0 FD | 	call	#_hg010b_spin2_box
16c90                 | LR__1861
16c90     A7 F0 03 F6 | 	mov	ptra, fp
16c94     B2 00 A0 FD | 	call	#popregs_
16c98                 | _do_box_ret
16c98     2D 00 64 FD | 	ret
16c9c                 | 
16c9c                 | ' 
16c9c                 | ' sub do_fill
16c9c                 | _do_fill
16c9c     03 4A 05 F6 | 	mov	COUNT_, #3
16ca0     A8 00 A0 FD | 	call	#pushregs_
16ca4     30 F0 07 F1 | 	add	ptra, #48
16ca8     90 3E BF FD | 	call	#_pop
16cac     FD 18 02 F6 | 	mov	arg04, result1
16cb0     FE 16 02 F6 | 	mov	arg03, result2
16cb4     FF 14 02 F6 | 	mov	arg02, result3
16cb8     24 4E 05 F1 | 	add	fp, #36
16cbc     A7 18 62 FC | 	wrlong	arg04, fp
16cc0     04 4E 05 F1 | 	add	fp, #4
16cc4     A7 16 62 FC | 	wrlong	arg03, fp
16cc8     04 4E 05 F1 | 	add	fp, #4
16ccc     A7 14 62 FC | 	wrlong	arg02, fp
16cd0     2C 4E 85 F1 | 	sub	fp, #44
16cd4     64 3E BF FD | 	call	#_pop
16cd8     FD 18 02 F6 | 	mov	arg04, result1
16cdc     FE 16 02 F6 | 	mov	arg03, result2
16ce0     FF 14 02 F6 | 	mov	arg02, result3
16ce4     18 4E 05 F1 | 	add	fp, #24
16ce8     A7 18 62 FC | 	wrlong	arg04, fp
16cec     04 4E 05 F1 | 	add	fp, #4
16cf0     A7 16 62 FC | 	wrlong	arg03, fp
16cf4     04 4E 05 F1 | 	add	fp, #4
16cf8     A7 14 62 FC | 	wrlong	arg02, fp
16cfc     20 4E 85 F1 | 	sub	fp, #32
16d00     38 3E BF FD | 	call	#_pop
16d04     FD 18 02 F6 | 	mov	arg04, result1
16d08     FE 16 02 F6 | 	mov	arg03, result2
16d0c     FF 1E 02 F6 | 	mov	local01, result3
16d10     0C 4E 05 F1 | 	add	fp, #12
16d14     A7 18 62 FC | 	wrlong	arg04, fp
16d18     04 4E 05 F1 | 	add	fp, #4
16d1c     A7 16 62 FC | 	wrlong	arg03, fp
16d20     04 4E 05 F1 | 	add	fp, #4
16d24     A7 1E 62 FC | 	wrlong	local01, fp
16d28     14 4E 85 F1 | 	sub	fp, #20
16d2c     0C 3E BF FD | 	call	#_pop
16d30     A7 FA 61 FC | 	wrlong	result1, fp
16d34     04 4E 05 F1 | 	add	fp, #4
16d38     A7 FC 61 FC | 	wrlong	result2, fp
16d3c     04 4E 05 F1 | 	add	fp, #4
16d40     A7 FE 61 FC | 	wrlong	result3, fp
16d44                 | ' 
16d44                 | ' t4=pop()
16d44                 | ' t3=pop()
16d44                 | ' t2=pop()
16d44                 | ' t1=pop()
16d44                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
16d44     FF 18 02 F6 | 	mov	arg04, result3
16d48     08 4E 85 F1 | 	sub	fp, #8
16d4c     1C 18 0E F2 | 	cmp	arg04, #28 wz
16d50     08 4E 05 51 |  if_ne	add	fp, #8
16d54     A7 1E 02 5B |  if_ne	rdlong	local01, fp
16d58     08 4E 85 51 |  if_ne	sub	fp, #8
16d5c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
16d60     94 00 90 5D |  if_ne	jmp	#LR__1870
16d64     14 4E 05 F1 | 	add	fp, #20
16d68     A7 1E 02 FB | 	rdlong	local01, fp
16d6c     14 4E 85 F1 | 	sub	fp, #20
16d70     1C 1E 0E F2 | 	cmp	local01, #28 wz
16d74     14 4E 05 51 |  if_ne	add	fp, #20
16d78     A7 18 02 5B |  if_ne	rdlong	arg04, fp
16d7c     14 4E 85 51 |  if_ne	sub	fp, #20
16d80     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
16d84     70 00 90 5D |  if_ne	jmp	#LR__1870
16d88     20 4E 05 F1 | 	add	fp, #32
16d8c     A7 1E 02 FB | 	rdlong	local01, fp
16d90     20 4E 85 F1 | 	sub	fp, #32
16d94     1C 1E 0E F2 | 	cmp	local01, #28 wz
16d98     20 4E 05 51 |  if_ne	add	fp, #32
16d9c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
16da0     20 4E 85 51 |  if_ne	sub	fp, #32
16da4     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
16da8     4C 00 90 5D |  if_ne	jmp	#LR__1870
16dac     2C 4E 05 F1 | 	add	fp, #44
16db0     A7 1E 02 FB | 	rdlong	local01, fp
16db4     2C 4E 85 F1 | 	sub	fp, #44
16db8     1C 1E 0E F2 | 	cmp	local01, #28 wz
16dbc     2C 4E 05 51 |  if_ne	add	fp, #44
16dc0     A7 18 02 5B |  if_ne	rdlong	arg04, fp
16dc4     2C 4E 85 51 |  if_ne	sub	fp, #44
16dc8     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
16dcc     28 00 90 5D |  if_ne	jmp	#LR__1870
16dd0     A7 12 02 FB | 	rdlong	arg01, fp
16dd4     0C 4E 05 F1 | 	add	fp, #12
16dd8     A7 14 02 FB | 	rdlong	arg02, fp
16ddc     0C 4E 05 F1 | 	add	fp, #12
16de0     A7 16 02 FB | 	rdlong	arg03, fp
16de4     0C 4E 05 F1 | 	add	fp, #12
16de8     A7 18 02 FB | 	rdlong	arg04, fp
16dec     24 4E 85 F1 | 	sub	fp, #36
16df0     2C 6B B0 FD | 	call	#_hg010b_spin2_fill
16df4                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
16df4     58 00 90 FD | 	jmp	#LR__1871
16df8                 | LR__1870
16df8     A7 12 02 F6 | 	mov	arg01, fp
16dfc     B4 D0 BF FD | 	call	#_converttoint
16e00     FD 20 02 F6 | 	mov	local02, result1
16e04     0C 4E 05 F1 | 	add	fp, #12
16e08     A7 12 02 F6 | 	mov	arg01, fp
16e0c     0C 4E 85 F1 | 	sub	fp, #12
16e10     A0 D0 BF FD | 	call	#_converttoint
16e14     FD 22 02 F6 | 	mov	local03, result1
16e18     18 4E 05 F1 | 	add	fp, #24
16e1c     A7 12 02 F6 | 	mov	arg01, fp
16e20     18 4E 85 F1 | 	sub	fp, #24
16e24     8C D0 BF FD | 	call	#_converttoint
16e28     FD 1E 02 F6 | 	mov	local01, result1
16e2c     24 4E 05 F1 | 	add	fp, #36
16e30     A7 12 02 F6 | 	mov	arg01, fp
16e34     24 4E 85 F1 | 	sub	fp, #36
16e38     78 D0 BF FD | 	call	#_converttoint
16e3c     FD 18 02 F6 | 	mov	arg04, result1
16e40     10 13 02 F6 | 	mov	arg01, local02
16e44     11 15 02 F6 | 	mov	arg02, local03
16e48     0F 17 02 F6 | 	mov	arg03, local01
16e4c     D0 6A B0 FD | 	call	#_hg010b_spin2_fill
16e50                 | LR__1871
16e50     A7 F0 03 F6 | 	mov	ptra, fp
16e54     B2 00 A0 FD | 	call	#popregs_
16e58                 | _do_fill_ret
16e58     2D 00 64 FD | 	ret
16e5c                 | 
16e5c                 | ' 
16e5c                 | ' ' -------------------------- Draw a frane
16e5c                 | ' 
16e5c                 | ' sub do_frame
16e5c                 | _do_frame
16e5c     03 4A 05 F6 | 	mov	COUNT_, #3
16e60     A8 00 A0 FD | 	call	#pushregs_
16e64     30 F0 07 F1 | 	add	ptra, #48
16e68     D0 3C BF FD | 	call	#_pop
16e6c     FD 1A 02 F6 | 	mov	arg05, result1
16e70     FE 18 02 F6 | 	mov	arg04, result2
16e74     FF 16 02 F6 | 	mov	arg03, result3
16e78     24 4E 05 F1 | 	add	fp, #36
16e7c     A7 1A 62 FC | 	wrlong	arg05, fp
16e80     04 4E 05 F1 | 	add	fp, #4
16e84     A7 18 62 FC | 	wrlong	arg04, fp
16e88     04 4E 05 F1 | 	add	fp, #4
16e8c     A7 16 62 FC | 	wrlong	arg03, fp
16e90     2C 4E 85 F1 | 	sub	fp, #44
16e94     A4 3C BF FD | 	call	#_pop
16e98     FD 1A 02 F6 | 	mov	arg05, result1
16e9c     FE 18 02 F6 | 	mov	arg04, result2
16ea0     FF 16 02 F6 | 	mov	arg03, result3
16ea4     18 4E 05 F1 | 	add	fp, #24
16ea8     A7 1A 62 FC | 	wrlong	arg05, fp
16eac     04 4E 05 F1 | 	add	fp, #4
16eb0     A7 18 62 FC | 	wrlong	arg04, fp
16eb4     04 4E 05 F1 | 	add	fp, #4
16eb8     A7 16 62 FC | 	wrlong	arg03, fp
16ebc     20 4E 85 F1 | 	sub	fp, #32
16ec0     78 3C BF FD | 	call	#_pop
16ec4     FD 1A 02 F6 | 	mov	arg05, result1
16ec8     FE 18 02 F6 | 	mov	arg04, result2
16ecc     FF 1E 02 F6 | 	mov	local01, result3
16ed0     0C 4E 05 F1 | 	add	fp, #12
16ed4     A7 1A 62 FC | 	wrlong	arg05, fp
16ed8     04 4E 05 F1 | 	add	fp, #4
16edc     A7 18 62 FC | 	wrlong	arg04, fp
16ee0     04 4E 05 F1 | 	add	fp, #4
16ee4     A7 1E 62 FC | 	wrlong	local01, fp
16ee8     14 4E 85 F1 | 	sub	fp, #20
16eec     4C 3C BF FD | 	call	#_pop
16ef0     A7 FA 61 FC | 	wrlong	result1, fp
16ef4     04 4E 05 F1 | 	add	fp, #4
16ef8     A7 FC 61 FC | 	wrlong	result2, fp
16efc     04 4E 05 F1 | 	add	fp, #4
16f00     A7 FE 61 FC | 	wrlong	result3, fp
16f04                 | ' 
16f04                 | ' t4=pop()
16f04                 | ' t3=pop()
16f04                 | ' t2=pop()
16f04                 | ' t1=pop()
16f04                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
16f04     FF 1A 02 F6 | 	mov	arg05, result3
16f08     08 4E 85 F1 | 	sub	fp, #8
16f0c     1C 1A 0E F2 | 	cmp	arg05, #28 wz
16f10     08 4E 05 51 |  if_ne	add	fp, #8
16f14     A7 1E 02 5B |  if_ne	rdlong	local01, fp
16f18     08 4E 85 51 |  if_ne	sub	fp, #8
16f1c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
16f20     A8 00 90 5D |  if_ne	jmp	#LR__1880
16f24     14 4E 05 F1 | 	add	fp, #20
16f28     A7 1E 02 FB | 	rdlong	local01, fp
16f2c     14 4E 85 F1 | 	sub	fp, #20
16f30     1C 1E 0E F2 | 	cmp	local01, #28 wz
16f34     14 4E 05 51 |  if_ne	add	fp, #20
16f38     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
16f3c     14 4E 85 51 |  if_ne	sub	fp, #20
16f40     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
16f44     84 00 90 5D |  if_ne	jmp	#LR__1880
16f48     20 4E 05 F1 | 	add	fp, #32
16f4c     A7 1E 02 FB | 	rdlong	local01, fp
16f50     20 4E 85 F1 | 	sub	fp, #32
16f54     1C 1E 0E F2 | 	cmp	local01, #28 wz
16f58     20 4E 05 51 |  if_ne	add	fp, #32
16f5c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
16f60     20 4E 85 51 |  if_ne	sub	fp, #32
16f64     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
16f68     60 00 90 5D |  if_ne	jmp	#LR__1880
16f6c     2C 4E 05 F1 | 	add	fp, #44
16f70     A7 1E 02 FB | 	rdlong	local01, fp
16f74     2C 4E 85 F1 | 	sub	fp, #44
16f78     1C 1E 0E F2 | 	cmp	local01, #28 wz
16f7c     2C 4E 05 51 |  if_ne	add	fp, #44
16f80     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
16f84     2C 4E 85 51 |  if_ne	sub	fp, #44
16f88     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
16f8c     3C 00 90 5D |  if_ne	jmp	#LR__1880
16f90     A7 12 02 FB | 	rdlong	arg01, fp
16f94     0C 4E 05 F1 | 	add	fp, #12
16f98     A7 14 02 FB | 	rdlong	arg02, fp
16f9c     0C 4E 05 F1 | 	add	fp, #12
16fa0     A7 16 02 FB | 	rdlong	arg03, fp
16fa4     0C 4E 05 F1 | 	add	fp, #12
16fa8     A7 18 02 FB | 	rdlong	arg04, fp
16fac     24 4E 85 F1 | 	sub	fp, #36
16fb0     37 00 00 FF 
16fb4     58 E4 05 F1 | 	add	objptr, ##28248
16fb8     F2 1A 02 FB | 	rdlong	arg05, objptr
16fbc     37 00 00 FF 
16fc0     58 E4 85 F1 | 	sub	objptr, ##28248
16fc4     44 6E B0 FD | 	call	#_hg010b_spin2_frame
16fc8                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
16fc8     6C 00 90 FD | 	jmp	#LR__1881
16fcc                 | LR__1880
16fcc     A7 12 02 F6 | 	mov	arg01, fp
16fd0     E0 CE BF FD | 	call	#_converttoint
16fd4     FD 20 02 F6 | 	mov	local02, result1
16fd8     0C 4E 05 F1 | 	add	fp, #12
16fdc     A7 12 02 F6 | 	mov	arg01, fp
16fe0     0C 4E 85 F1 | 	sub	fp, #12
16fe4     CC CE BF FD | 	call	#_converttoint
16fe8     FD 22 02 F6 | 	mov	local03, result1
16fec     18 4E 05 F1 | 	add	fp, #24
16ff0     A7 12 02 F6 | 	mov	arg01, fp
16ff4     18 4E 85 F1 | 	sub	fp, #24
16ff8     B8 CE BF FD | 	call	#_converttoint
16ffc     FD 1E 02 F6 | 	mov	local01, result1
17000     24 4E 05 F1 | 	add	fp, #36
17004     A7 12 02 F6 | 	mov	arg01, fp
17008     24 4E 85 F1 | 	sub	fp, #36
1700c     A4 CE BF FD | 	call	#_converttoint
17010     FD 18 02 F6 | 	mov	arg04, result1
17014     37 00 00 FF 
17018     58 E4 05 F1 | 	add	objptr, ##28248
1701c     F2 1A 02 FB | 	rdlong	arg05, objptr
17020     37 00 00 FF 
17024     58 E4 85 F1 | 	sub	objptr, ##28248
17028     10 13 02 F6 | 	mov	arg01, local02
1702c     11 15 02 F6 | 	mov	arg02, local03
17030     0F 17 02 F6 | 	mov	arg03, local01
17034     D4 6D B0 FD | 	call	#_hg010b_spin2_frame
17038                 | LR__1881
17038     A7 F0 03 F6 | 	mov	ptra, fp
1703c     B2 00 A0 FD | 	call	#popregs_
17040                 | _do_frame_ret
17040     2D 00 64 FD | 	ret
17044                 | 
17044                 | ' 
17044                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
17044                 | ' 
17044                 | ' ' ------------------------- Print to the screem
17044                 | ' 
17044                 | ' sub do_print  
17044                 | _do_print
17044     0A 4A 05 F6 | 	mov	COUNT_, #10
17048     A8 00 A0 FD | 	call	#pushregs_
1704c     00 24 06 F6 | 	mov	local04, #0
17050     E8 3A BF FD | 	call	#_pop
17054     FD 26 02 F6 | 	mov	local05, result1
17058     FE 28 02 F6 | 	mov	local06, result2
1705c     FF 2A 02 F6 | 	mov	local07, result3
17060     13 1F 02 F6 | 	mov	local01, local05
17064     14 21 02 F6 | 	mov	local02, local06
17068     15 23 02 F6 | 	mov	local03, local07
1706c                 | '  
1706c                 | ' r=0
1706c                 | ' t1=pop() 
1706c                 | ' 'print t1.result_type,t1.result.uresult
1706c                 | ' 
1706c                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
1706c     21 22 0E F2 | 	cmp	local03, #33 wz
17070     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
17074     20 00 90 5D |  if_ne	jmp	#LR__1890
17078     11 25 02 F6 | 	mov	local04, local03
1707c     BC 3A BF FD | 	call	#_pop
17080     FD 26 02 F6 | 	mov	local05, result1
17084     FE 28 02 F6 | 	mov	local06, result2
17088     FF 2A 02 F6 | 	mov	local07, result3
1708c     13 1F 02 F6 | 	mov	local01, local05
17090     14 21 02 F6 | 	mov	local02, local06
17094     15 23 02 F6 | 	mov	local03, local07
17098                 | LR__1890
17098                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
17098     20 22 0E F2 | 	cmp	local03, #32 wz
1709c     11 25 02 A6 |  if_e	mov	local04, local03
170a0                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
170a0     FF 22 0E F2 | 	cmp	local03, #255 wz
170a4     0C 00 90 5D |  if_ne	jmp	#LR__1891
170a8     0F 13 02 F6 | 	mov	arg01, local01
170ac     A4 42 B0 FD | 	call	#_printerror
170b0     4C 04 90 FD | 	jmp	#LR__1909
170b4                 | LR__1891
170b4                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
170b4     2B 22 0E F2 | 	cmp	local03, #43 wz
170b8     14 00 90 5D |  if_ne	jmp	#LR__1892
170bc     0F 13 02 F6 | 	mov	arg01, local01
170c0     CC 85 BF FD | 	call	#_convertstring
170c4     FD 26 02 F6 | 	mov	local05, result1
170c8     13 1F 02 F6 | 	mov	local01, local05
170cc     1F 22 06 F6 | 	mov	local03, #31
170d0                 | LR__1892
170d0                 | ' 
170d0                 | ' if r=print_mod_comma  then
170d0     21 24 0E F2 | 	cmp	local04, #33 wz
170d4     AC 01 90 5D |  if_ne	jmp	#LR__1897
170d8                 | '   if t1.result_type=result_int then print t1.result.iresult,
170d8     1C 22 0E F2 | 	cmp	local03, #28 wz
170dc     64 00 90 5D |  if_ne	jmp	#LR__1893
170e0     00 12 06 F6 | 	mov	arg01, #0
170e4     AC E0 B0 FD | 	call	#__system___getiolock_0508
170e8     FD 12 02 F6 | 	mov	arg01, result1
170ec     0C 87 B0 FD | 	call	#__system___lockmem
170f0     00 28 06 F6 | 	mov	local06, #0
170f4     00 12 06 F6 | 	mov	arg01, #0
170f8     0F 15 02 F6 | 	mov	arg02, local01
170fc     00 16 06 F6 | 	mov	arg03, #0
17100     0A 18 06 F6 | 	mov	arg04, #10
17104     2C 94 B0 FD | 	call	#__system___basic_print_integer
17108     FD 2A 02 F6 | 	mov	local07, result1
1710c     14 27 02 F6 | 	mov	local05, local06
17110     15 27 02 F1 | 	add	local05, local07
17114     00 2C 06 F6 | 	mov	local08, #0
17118     00 12 06 F6 | 	mov	arg01, #0
1711c     09 14 06 F6 | 	mov	arg02, #9
17120     00 16 06 F6 | 	mov	arg03, #0
17124     70 93 B0 FD | 	call	#__system___basic_print_char
17128     FD 2E 02 F6 | 	mov	local09, result1
1712c     FD 26 02 F1 | 	add	local05, result1
17130     00 12 06 F6 | 	mov	arg01, #0
17134     5C E0 B0 FD | 	call	#__system___getiolock_0508
17138     FD 00 68 FC | 	wrlong	#0, result1
1713c     00 FA 05 F6 | 	mov	result1, #0
17140     00 30 06 F6 | 	mov	local10, #0
17144                 | LR__1893
17144                 | '   if t1.result_type=result_uint then print t1.result.uresult,
17144     1D 22 0E F2 | 	cmp	local03, #29 wz
17148     64 00 90 5D |  if_ne	jmp	#LR__1894
1714c     00 12 06 F6 | 	mov	arg01, #0
17150     40 E0 B0 FD | 	call	#__system___getiolock_0508
17154     FD 12 02 F6 | 	mov	arg01, result1
17158     A0 86 B0 FD | 	call	#__system___lockmem
1715c     00 28 06 F6 | 	mov	local06, #0
17160     00 12 06 F6 | 	mov	arg01, #0
17164     0F 15 02 F6 | 	mov	arg02, local01
17168     00 16 06 F6 | 	mov	arg03, #0
1716c     0A 18 06 F6 | 	mov	arg04, #10
17170     00 94 B0 FD | 	call	#__system___basic_print_unsigned
17174     FD 2A 02 F6 | 	mov	local07, result1
17178     14 27 02 F6 | 	mov	local05, local06
1717c     15 27 02 F1 | 	add	local05, local07
17180     00 2C 06 F6 | 	mov	local08, #0
17184     00 12 06 F6 | 	mov	arg01, #0
17188     09 14 06 F6 | 	mov	arg02, #9
1718c     00 16 06 F6 | 	mov	arg03, #0
17190     04 93 B0 FD | 	call	#__system___basic_print_char
17194     FD 2E 02 F6 | 	mov	local09, result1
17198     FD 26 02 F1 | 	add	local05, result1
1719c     00 12 06 F6 | 	mov	arg01, #0
171a0     F0 DF B0 FD | 	call	#__system___getiolock_0508
171a4     FD 00 68 FC | 	wrlong	#0, result1
171a8     00 FA 05 F6 | 	mov	result1, #0
171ac     00 30 06 F6 | 	mov	local10, #0
171b0                 | LR__1894
171b0                 | '   if t1.result_type=result_float then print t1.result.fresult,
171b0     1E 22 0E F2 | 	cmp	local03, #30 wz
171b4     64 00 90 5D |  if_ne	jmp	#LR__1895
171b8     00 12 06 F6 | 	mov	arg01, #0
171bc     D4 DF B0 FD | 	call	#__system___getiolock_0508
171c0     FD 12 02 F6 | 	mov	arg01, result1
171c4     34 86 B0 FD | 	call	#__system___lockmem
171c8     00 28 06 F6 | 	mov	local06, #0
171cc     00 12 06 F6 | 	mov	arg01, #0
171d0     0F 15 02 F6 | 	mov	arg02, local01
171d4     00 16 06 F6 | 	mov	arg03, #0
171d8     23 18 06 F6 | 	mov	arg04, #35
171dc     7C B7 B0 FD | 	call	#__system___basic_print_float
171e0     FD 2A 02 F6 | 	mov	local07, result1
171e4     14 27 02 F6 | 	mov	local05, local06
171e8     15 27 02 F1 | 	add	local05, local07
171ec     00 2C 06 F6 | 	mov	local08, #0
171f0     00 12 06 F6 | 	mov	arg01, #0
171f4     09 14 06 F6 | 	mov	arg02, #9
171f8     00 16 06 F6 | 	mov	arg03, #0
171fc     98 92 B0 FD | 	call	#__system___basic_print_char
17200     FD 2E 02 F6 | 	mov	local09, result1
17204     FD 26 02 F1 | 	add	local05, result1
17208     00 12 06 F6 | 	mov	arg01, #0
1720c     84 DF B0 FD | 	call	#__system___getiolock_0508
17210     FD 00 68 FC | 	wrlong	#0, result1
17214     00 FA 05 F6 | 	mov	result1, #0
17218     00 30 06 F6 | 	mov	local10, #0
1721c                 | LR__1895
1721c                 | '   if t1.result_type=result_string then print t1.result.sresult,
1721c     1F 22 0E F2 | 	cmp	local03, #31 wz
17220     60 00 90 5D |  if_ne	jmp	#LR__1896
17224     00 12 06 F6 | 	mov	arg01, #0
17228     68 DF B0 FD | 	call	#__system___getiolock_0508
1722c     FD 12 02 F6 | 	mov	arg01, result1
17230     C8 85 B0 FD | 	call	#__system___lockmem
17234     00 28 06 F6 | 	mov	local06, #0
17238     00 12 06 F6 | 	mov	arg01, #0
1723c     0F 15 02 F6 | 	mov	arg02, local01
17240     00 16 06 F6 | 	mov	arg03, #0
17244     A8 92 B0 FD | 	call	#__system___basic_print_string
17248     FD 2A 02 F6 | 	mov	local07, result1
1724c     14 27 02 F6 | 	mov	local05, local06
17250     15 27 02 F1 | 	add	local05, local07
17254     00 2C 06 F6 | 	mov	local08, #0
17258     00 12 06 F6 | 	mov	arg01, #0
1725c     09 14 06 F6 | 	mov	arg02, #9
17260     00 16 06 F6 | 	mov	arg03, #0
17264     30 92 B0 FD | 	call	#__system___basic_print_char
17268     FD 2E 02 F6 | 	mov	local09, result1
1726c     FD 26 02 F1 | 	add	local05, result1
17270     00 12 06 F6 | 	mov	arg01, #0
17274     1C DF B0 FD | 	call	#__system___getiolock_0508
17278     FD 00 68 FC | 	wrlong	#0, result1
1727c     00 FA 05 F6 | 	mov	result1, #0
17280     00 30 06 F6 | 	mov	local10, #0
17284                 | LR__1896
17284                 | LR__1897
17284                 | ' if r=print_mod_semicolon then 
17284     22 24 0E F2 | 	cmp	local04, #34 wz
17288     1C 01 90 5D |  if_ne	jmp	#LR__1902
1728c                 | '   if t1.result_type=result_int then print t1.result.iresult;
1728c     1C 22 0E F2 | 	cmp	local03, #28 wz
17290     50 00 90 5D |  if_ne	jmp	#LR__1898
17294     00 12 06 F6 | 	mov	arg01, #0
17298     F8 DE B0 FD | 	call	#__system___getiolock_0508
1729c     FD 12 02 F6 | 	mov	arg01, result1
172a0     58 85 B0 FD | 	call	#__system___lockmem
172a4     00 28 06 F6 | 	mov	local06, #0
172a8     00 30 06 F6 | 	mov	local10, #0
172ac     0A 2C 06 F6 | 	mov	local08, #10
172b0     00 12 06 F6 | 	mov	arg01, #0
172b4     0F 15 02 F6 | 	mov	arg02, local01
172b8     00 16 06 F6 | 	mov	arg03, #0
172bc     0A 18 06 F6 | 	mov	arg04, #10
172c0     70 92 B0 FD | 	call	#__system___basic_print_integer
172c4     FD 2A 02 F6 | 	mov	local07, result1
172c8     14 27 02 F6 | 	mov	local05, local06
172cc     15 27 02 F1 | 	add	local05, local07
172d0     00 12 06 F6 | 	mov	arg01, #0
172d4     BC DE B0 FD | 	call	#__system___getiolock_0508
172d8     FD 00 68 FC | 	wrlong	#0, result1
172dc     00 FA 05 F6 | 	mov	result1, #0
172e0     00 2E 06 F6 | 	mov	local09, #0
172e4                 | LR__1898
172e4                 | '   if t1.result_type=result_uint then print t1.result.uresult;
172e4     1D 22 0E F2 | 	cmp	local03, #29 wz
172e8     50 00 90 5D |  if_ne	jmp	#LR__1899
172ec     00 12 06 F6 | 	mov	arg01, #0
172f0     A0 DE B0 FD | 	call	#__system___getiolock_0508
172f4     FD 12 02 F6 | 	mov	arg01, result1
172f8     00 85 B0 FD | 	call	#__system___lockmem
172fc     00 28 06 F6 | 	mov	local06, #0
17300     00 30 06 F6 | 	mov	local10, #0
17304     0A 2C 06 F6 | 	mov	local08, #10
17308     00 12 06 F6 | 	mov	arg01, #0
1730c     0F 15 02 F6 | 	mov	arg02, local01
17310     00 16 06 F6 | 	mov	arg03, #0
17314     0A 18 06 F6 | 	mov	arg04, #10
17318     58 92 B0 FD | 	call	#__system___basic_print_unsigned
1731c     FD 2A 02 F6 | 	mov	local07, result1
17320     14 27 02 F6 | 	mov	local05, local06
17324     15 27 02 F1 | 	add	local05, local07
17328     00 12 06 F6 | 	mov	arg01, #0
1732c     64 DE B0 FD | 	call	#__system___getiolock_0508
17330     FD 00 68 FC | 	wrlong	#0, result1
17334     00 FA 05 F6 | 	mov	result1, #0
17338     00 2E 06 F6 | 	mov	local09, #0
1733c                 | LR__1899
1733c                 | '   if t1.result_type=result_float then print t1.result.fresult;
1733c     1E 22 0E F2 | 	cmp	local03, #30 wz
17340     30 00 90 5D |  if_ne	jmp	#LR__1900
17344     00 12 06 F6 | 	mov	arg01, #0
17348     48 DE B0 FD | 	call	#__system___getiolock_0508
1734c     FD 12 02 F6 | 	mov	arg01, result1
17350     A8 84 B0 FD | 	call	#__system___lockmem
17354     00 12 06 F6 | 	mov	arg01, #0
17358     0F 15 02 F6 | 	mov	arg02, local01
1735c     00 16 06 F6 | 	mov	arg03, #0
17360     23 18 06 F6 | 	mov	arg04, #35
17364     F4 B5 B0 FD | 	call	#__system___basic_print_float
17368     00 12 06 F6 | 	mov	arg01, #0
1736c     24 DE B0 FD | 	call	#__system___getiolock_0508
17370     FD 00 68 FC | 	wrlong	#0, result1
17374                 | LR__1900
17374                 | '   if t1.result_type=result_string then print t1.result.sresult;
17374     1F 22 0E F2 | 	cmp	local03, #31 wz
17378     2C 00 90 5D |  if_ne	jmp	#LR__1901
1737c     00 12 06 F6 | 	mov	arg01, #0
17380     10 DE B0 FD | 	call	#__system___getiolock_0508
17384     FD 12 02 F6 | 	mov	arg01, result1
17388     70 84 B0 FD | 	call	#__system___lockmem
1738c     00 12 06 F6 | 	mov	arg01, #0
17390     0F 15 02 F6 | 	mov	arg02, local01
17394     00 16 06 F6 | 	mov	arg03, #0
17398     54 91 B0 FD | 	call	#__system___basic_print_string
1739c     00 12 06 F6 | 	mov	arg01, #0
173a0     F0 DD B0 FD | 	call	#__system___getiolock_0508
173a4     FD 00 68 FC | 	wrlong	#0, result1
173a8                 | LR__1901
173a8                 | LR__1902
173a8                 | ' if r=0 then 
173a8     00 24 0E F2 | 	cmp	local04, #0 wz
173ac     1C 01 90 5D |  if_ne	jmp	#LR__1907
173b0                 | '   if t1.result_type=result_int then print t1.result.iresult
173b0     1C 22 0E F2 | 	cmp	local03, #28 wz
173b4     40 00 90 5D |  if_ne	jmp	#LR__1903
173b8     00 12 06 F6 | 	mov	arg01, #0
173bc     D4 DD B0 FD | 	call	#__system___getiolock_0508
173c0     FD 12 02 F6 | 	mov	arg01, result1
173c4     34 84 B0 FD | 	call	#__system___lockmem
173c8     00 12 06 F6 | 	mov	arg01, #0
173cc     0F 15 02 F6 | 	mov	arg02, local01
173d0     00 16 06 F6 | 	mov	arg03, #0
173d4     0A 18 06 F6 | 	mov	arg04, #10
173d8     58 91 B0 FD | 	call	#__system___basic_print_integer
173dc     00 12 06 F6 | 	mov	arg01, #0
173e0     0A 14 06 F6 | 	mov	arg02, #10
173e4     00 16 06 F6 | 	mov	arg03, #0
173e8     AC 90 B0 FD | 	call	#__system___basic_print_char
173ec     00 12 06 F6 | 	mov	arg01, #0
173f0     A0 DD B0 FD | 	call	#__system___getiolock_0508
173f4     FD 00 68 FC | 	wrlong	#0, result1
173f8                 | LR__1903
173f8                 | '   if t1.result_type=result_uint then print t1.result.uresult
173f8     1D 22 0E F2 | 	cmp	local03, #29 wz
173fc     40 00 90 5D |  if_ne	jmp	#LR__1904
17400     00 12 06 F6 | 	mov	arg01, #0
17404     8C DD B0 FD | 	call	#__system___getiolock_0508
17408     FD 12 02 F6 | 	mov	arg01, result1
1740c     EC 83 B0 FD | 	call	#__system___lockmem
17410     00 12 06 F6 | 	mov	arg01, #0
17414     0F 15 02 F6 | 	mov	arg02, local01
17418     00 16 06 F6 | 	mov	arg03, #0
1741c     0A 18 06 F6 | 	mov	arg04, #10
17420     50 91 B0 FD | 	call	#__system___basic_print_unsigned
17424     00 12 06 F6 | 	mov	arg01, #0
17428     0A 14 06 F6 | 	mov	arg02, #10
1742c     00 16 06 F6 | 	mov	arg03, #0
17430     64 90 B0 FD | 	call	#__system___basic_print_char
17434     00 12 06 F6 | 	mov	arg01, #0
17438     58 DD B0 FD | 	call	#__system___getiolock_0508
1743c     FD 00 68 FC | 	wrlong	#0, result1
17440                 | LR__1904
17440                 | '   if t1.result_type=result_float then print t1.result.fresult
17440     1E 22 0E F2 | 	cmp	local03, #30 wz
17444     40 00 90 5D |  if_ne	jmp	#LR__1905
17448     00 12 06 F6 | 	mov	arg01, #0
1744c     44 DD B0 FD | 	call	#__system___getiolock_0508
17450     FD 12 02 F6 | 	mov	arg01, result1
17454     A4 83 B0 FD | 	call	#__system___lockmem
17458     00 12 06 F6 | 	mov	arg01, #0
1745c     0F 15 02 F6 | 	mov	arg02, local01
17460     00 16 06 F6 | 	mov	arg03, #0
17464     23 18 06 F6 | 	mov	arg04, #35
17468     F0 B4 B0 FD | 	call	#__system___basic_print_float
1746c     00 12 06 F6 | 	mov	arg01, #0
17470     0A 14 06 F6 | 	mov	arg02, #10
17474     00 16 06 F6 | 	mov	arg03, #0
17478     1C 90 B0 FD | 	call	#__system___basic_print_char
1747c     00 12 06 F6 | 	mov	arg01, #0
17480     10 DD B0 FD | 	call	#__system___getiolock_0508
17484     FD 00 68 FC | 	wrlong	#0, result1
17488                 | LR__1905
17488                 | '   if t1.result_type=result_string then print t1.result.sresult
17488     1F 22 0E F2 | 	cmp	local03, #31 wz
1748c     3C 00 90 5D |  if_ne	jmp	#LR__1906
17490     00 12 06 F6 | 	mov	arg01, #0
17494     FC DC B0 FD | 	call	#__system___getiolock_0508
17498     FD 12 02 F6 | 	mov	arg01, result1
1749c     5C 83 B0 FD | 	call	#__system___lockmem
174a0     00 12 06 F6 | 	mov	arg01, #0
174a4     0F 15 02 F6 | 	mov	arg02, local01
174a8     00 16 06 F6 | 	mov	arg03, #0
174ac     40 90 B0 FD | 	call	#__system___basic_print_string
174b0     00 12 06 F6 | 	mov	arg01, #0
174b4     0A 14 06 F6 | 	mov	arg02, #10
174b8     00 16 06 F6 | 	mov	arg03, #0
174bc     D8 8F B0 FD | 	call	#__system___basic_print_char
174c0     00 12 06 F6 | 	mov	arg01, #0
174c4     CC DC B0 FD | 	call	#__system___getiolock_0508
174c8     FD 00 68 FC | 	wrlong	#0, result1
174cc                 | LR__1906
174cc                 | LR__1907
174cc                 | ' if r=print_mod_empty then print
174cc     20 24 0E F2 | 	cmp	local04, #32 wz
174d0     2C 00 90 5D |  if_ne	jmp	#LR__1908
174d4     00 12 06 F6 | 	mov	arg01, #0
174d8     B8 DC B0 FD | 	call	#__system___getiolock_0508
174dc     FD 12 02 F6 | 	mov	arg01, result1
174e0     18 83 B0 FD | 	call	#__system___lockmem
174e4     00 12 06 F6 | 	mov	arg01, #0
174e8     0A 14 06 F6 | 	mov	arg02, #10
174ec     00 16 06 F6 | 	mov	arg03, #0
174f0     A4 8F B0 FD | 	call	#__system___basic_print_char
174f4     00 12 06 F6 | 	mov	arg01, #0
174f8     98 DC B0 FD | 	call	#__system___getiolock_0508
174fc     FD 00 68 FC | 	wrlong	#0, result1
17500                 | LR__1908
17500                 | LR__1909
17500     A7 F0 03 F6 | 	mov	ptra, fp
17504     B2 00 A0 FD | 	call	#popregs_
17508                 | _do_print_ret
17508     2D 00 64 FD | 	ret
1750c                 | 
1750c                 | ' 
1750c                 | ' 
1750c                 | ' sub do_paper
1750c                 | _do_paper
1750c     03 4A 05 F6 | 	mov	COUNT_, #3
17510     A8 00 A0 FD | 	call	#pushregs_
17514     24 36 BF FD | 	call	#_pop
17518     FD 1E 02 F6 | 	mov	local01, result1
1751c     FE 20 02 F6 | 	mov	local02, result2
17520     FF 22 02 F6 | 	mov	local03, result3
17524                 | ' t1=pop() 
17524                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
17524     1E 22 0E F2 | 	cmp	local03, #30 wz
17528     10 00 90 5D |  if_ne	jmp	#LR__1910
1752c     0F 13 02 F6 | 	mov	arg01, local01
17530     00 14 06 F6 | 	mov	arg02, #0
17534     D4 B2 B0 FD | 	call	#__system___float_tointeger
17538     FD 1E 02 F6 | 	mov	local01, result1
1753c                 | LR__1910
1753c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
1753c     1F 22 0E F2 | 	cmp	local03, #31 wz
17540     18 00 90 5D |  if_ne	jmp	#LR__1911
17544     0F 13 02 F6 | 	mov	arg01, local01
17548     E0 B5 B0 FD | 	call	#__system____builtin_atof
1754c     FD 12 02 F6 | 	mov	arg01, result1
17550     00 14 06 F6 | 	mov	arg02, #0
17554     B4 B2 B0 FD | 	call	#__system___float_tointeger
17558     FD 1E 02 F6 | 	mov	local01, result1
1755c                 | LR__1911
1755c     37 00 00 FF 
17560     68 E4 05 F1 | 	add	objptr, ##28264
17564     F2 1E 62 FC | 	wrlong	local01, objptr
17568     04 E4 05 F1 | 	add	objptr, #4
1756c     F2 12 02 FB | 	rdlong	arg01, objptr
17570                 | ' 
17570                 | ' write_color:=ff
17570     37 00 00 FF 
17574     2B E4 85 F1 | 	sub	objptr, ##28203
17578     F2 12 62 FC | 	wrlong	arg01, objptr
1757c                 | ' write_background:=bb
1757c     04 E4 05 F1 | 	add	objptr, #4
17580     F2 1E 62 FC | 	wrlong	local01, objptr
17584     45 E4 85 F1 | 	sub	objptr, #69
17588     A7 F0 03 F6 | 	mov	ptra, fp
1758c     B2 00 A0 FD | 	call	#popregs_
17590                 | _do_paper_ret
17590     2D 00 64 FD | 	ret
17594                 | 
17594                 | ' 
17594                 | ' sub do_ink
17594                 | _do_ink
17594     03 4A 05 F6 | 	mov	COUNT_, #3
17598     A8 00 A0 FD | 	call	#pushregs_
1759c     9C 35 BF FD | 	call	#_pop
175a0     FD 1E 02 F6 | 	mov	local01, result1
175a4     FE 20 02 F6 | 	mov	local02, result2
175a8     FF 22 02 F6 | 	mov	local03, result3
175ac                 | ' t1=pop() 
175ac                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
175ac     1E 22 0E F2 | 	cmp	local03, #30 wz
175b0     10 00 90 5D |  if_ne	jmp	#LR__1920
175b4     0F 13 02 F6 | 	mov	arg01, local01
175b8     00 14 06 F6 | 	mov	arg02, #0
175bc     4C B2 B0 FD | 	call	#__system___float_tointeger
175c0     FD 1E 02 F6 | 	mov	local01, result1
175c4                 | LR__1920
175c4                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
175c4     1F 22 0E F2 | 	cmp	local03, #31 wz
175c8     18 00 90 5D |  if_ne	jmp	#LR__1921
175cc     0F 13 02 F6 | 	mov	arg01, local01
175d0     58 B5 B0 FD | 	call	#__system____builtin_atof
175d4     FD 12 02 F6 | 	mov	arg01, result1
175d8     00 14 06 F6 | 	mov	arg02, #0
175dc     2C B2 B0 FD | 	call	#__system___float_tointeger
175e0     FD 1E 02 F6 | 	mov	local01, result1
175e4                 | LR__1921
175e4     37 00 00 FF 
175e8     6C E4 05 F1 | 	add	objptr, ##28268
175ec     F2 1E 62 FC | 	wrlong	local01, objptr
175f0     04 E4 85 F1 | 	sub	objptr, #4
175f4     F2 14 02 FB | 	rdlong	arg02, objptr
175f8                 | ' 
175f8                 | ' write_color:=ff
175f8     37 00 00 FF 
175fc     27 E4 85 F1 | 	sub	objptr, ##28199
17600     F2 1E 62 FC | 	wrlong	local01, objptr
17604                 | ' write_background:=bb
17604     04 E4 05 F1 | 	add	objptr, #4
17608     F2 14 62 FC | 	wrlong	arg02, objptr
1760c     37 00 00 FF 
17610     27 E4 05 F1 | 	add	objptr, ##28199
17614     F2 12 02 FB | 	rdlong	arg01, objptr
17618     37 00 00 FF 
1761c     6C E4 85 F1 | 	sub	objptr, ##28268
17620     9C 59 B0 FD | 	call	#_hg010b_spin2_setcursorcolor
17624     A7 F0 03 F6 | 	mov	ptra, fp
17628     B2 00 A0 FD | 	call	#popregs_
1762c                 | _do_ink_ret
1762c     2D 00 64 FD | 	ret
17630                 | 
17630                 | ' 
17630                 | ' 
17630                 | ' sub do_font
17630                 | _do_font
17630     03 4A 05 F6 | 	mov	COUNT_, #3
17634     A8 00 A0 FD | 	call	#pushregs_
17638     00 35 BF FD | 	call	#_pop
1763c     FD 1E 02 F6 | 	mov	local01, result1
17640     FE 20 02 F6 | 	mov	local02, result2
17644     FF 22 02 F6 | 	mov	local03, result3
17648                 | ' t1=pop() 
17648                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
17648     1E 22 0E F2 | 	cmp	local03, #30 wz
1764c     10 00 90 5D |  if_ne	jmp	#LR__1930
17650     0F 13 02 F6 | 	mov	arg01, local01
17654     00 14 06 F6 | 	mov	arg02, #0
17658     B0 B1 B0 FD | 	call	#__system___float_tointeger
1765c     FD 1E 02 F6 | 	mov	local01, result1
17660                 | LR__1930
17660                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
17660     1F 22 0E F2 | 	cmp	local03, #31 wz
17664     18 00 90 5D |  if_ne	jmp	#LR__1931
17668     0F 13 02 F6 | 	mov	arg01, local01
1766c     BC B4 B0 FD | 	call	#__system____builtin_atof
17670     FD 12 02 F6 | 	mov	arg01, result1
17674     00 14 06 F6 | 	mov	arg02, #0
17678     90 B1 B0 FD | 	call	#__system___float_tointeger
1767c     FD 1E 02 F6 | 	mov	local01, result1
17680                 | LR__1931
17680     37 00 00 FF 
17684     70 E4 05 F1 | 	add	objptr, ##28272
17688     F2 1E 62 FC | 	wrlong	local01, objptr
1768c     37 00 00 FF 
17690     70 E4 85 F1 | 	sub	objptr, ##28272
17694     02 1E 66 F0 | 	shl	local01, #2
17698     0F 13 02 F6 | 	mov	arg01, local01
1769c     64 69 B0 FD | 	call	#_hg010b_spin2_setfontfamily
176a0     A7 F0 03 F6 | 	mov	ptra, fp
176a4     B2 00 A0 FD | 	call	#popregs_
176a8                 | _do_font_ret
176a8     2D 00 64 FD | 	ret
176ac                 | 
176ac                 | ' 
176ac                 | ' sub do_mode
176ac                 | _do_mode
176ac     05 4A 05 F6 | 	mov	COUNT_, #5
176b0     A8 00 A0 FD | 	call	#pushregs_
176b4     84 34 BF FD | 	call	#_pop
176b8     FD 1E 02 F6 | 	mov	local01, result1
176bc     FE 20 02 F6 | 	mov	local02, result2
176c0     FF 22 02 F6 | 	mov	local03, result3
176c4                 | ' t1=pop() 
176c4                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
176c4     1E 22 0E F2 | 	cmp	local03, #30 wz
176c8     10 00 90 5D |  if_ne	jmp	#LR__1940
176cc     0F 13 02 F6 | 	mov	arg01, local01
176d0     00 14 06 F6 | 	mov	arg02, #0
176d4     34 B1 B0 FD | 	call	#__system___float_tointeger
176d8     FD 1E 02 F6 | 	mov	local01, result1
176dc                 | LR__1940
176dc                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
176dc     1F 22 0E F2 | 	cmp	local03, #31 wz
176e0     18 00 90 5D |  if_ne	jmp	#LR__1941
176e4     0F 13 02 F6 | 	mov	arg01, local01
176e8     40 B4 B0 FD | 	call	#__system____builtin_atof
176ec     FD 12 02 F6 | 	mov	arg01, result1
176f0     00 14 06 F6 | 	mov	arg02, #0
176f4     14 B1 B0 FD | 	call	#__system___float_tointeger
176f8     FD 1E 02 F6 | 	mov	local01, result1
176fc                 | LR__1941
176fc                 | ' select case t1.result.iresult
176fc     0F 25 02 F6 | 	mov	local04, local01
17700     05 24 26 F3 | 	fle	local04, #5
17704     30 24 62 FD | 	jmprel	local04
17708                 | LR__1942
17708     14 00 90 FD | 	jmp	#LR__1943
1770c     A8 00 90 FD | 	jmp	#LR__1944
17710     10 01 90 FD | 	jmp	#LR__1945
17714     78 01 90 FD | 	jmp	#LR__1946
17718     E0 01 90 FD | 	jmp	#LR__1947
1771c     70 02 90 FD | 	jmp	#LR__1948
17720                 | LR__1943
17720     37 00 00 FF 
17724     70 E4 05 F1 | 	add	objptr, ##28272
17728     F2 02 68 FC | 	wrlong	#1, objptr
1772c     04 E4 85 F1 | 	sub	objptr, #4
17730     F2 34 69 FC | 	wrlong	#154, objptr
17734     21 00 00 FF 
17738     B4 E4 05 F1 | 	add	objptr, ##17076
1773c     F2 02 68 FC | 	wrlong	#1, objptr
17740     21 00 00 FF 
17744     B8 E4 85 F1 | 	sub	objptr, ##17080
17748     F2 26 69 FC | 	wrlong	#147, objptr
1774c     37 00 00 FF 
17750     68 E4 85 F1 | 	sub	objptr, ##28264
17754     04 12 06 F6 | 	mov	arg01, #4
17758     A8 68 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1775c     37 00 00 FF 
17760     6C E4 05 F1 | 	add	objptr, ##28268
17764     F2 12 02 FB | 	rdlong	arg01, objptr
17768     04 E4 85 F1 | 	sub	objptr, #4
1776c     F2 14 02 FB | 	rdlong	arg02, objptr
17770                 | ' 
17770                 | ' write_color:=ff
17770     37 00 00 FF 
17774     27 E4 85 F1 | 	sub	objptr, ##28199
17778     F2 12 62 FC | 	wrlong	arg01, objptr
1777c                 | ' write_background:=bb
1777c     04 E4 05 F1 | 	add	objptr, #4
17780     F2 14 62 FC | 	wrlong	arg02, objptr
17784     01 00 00 FF 
17788     00 EA 05 F1 | 	add	ptr__dat__, ##512
1778c     59 00 00 FF 
17790     7F E5 05 F1 | 	add	objptr, ##45951
17794     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
17798     04 E4 85 F1 | 	sub	objptr, #4
1779c     03 00 80 FF 
177a0     F2 30 69 FC | 	wrlong	##1688, objptr
177a4     59 00 00 FF 
177a8     C0 E5 85 F1 | 	sub	objptr, ##46016
177ac     01 00 00 FF 
177b0     00 EA 85 F1 | 	sub	ptr__dat__, ##512
177b4     D8 01 90 FD | 	jmp	#LR__1948
177b8                 | LR__1944
177b8     37 00 00 FF 
177bc     70 E4 05 F1 | 	add	objptr, ##28272
177c0     F2 00 68 FC | 	wrlong	#0, objptr
177c4     04 E4 85 F1 | 	sub	objptr, #4
177c8     F2 2E 68 FC | 	wrlong	#23, objptr
177cc     21 00 00 FF 
177d0     B4 E4 05 F1 | 	add	objptr, ##17076
177d4     F2 00 68 FC | 	wrlong	#0, objptr
177d8     21 00 00 FF 
177dc     B8 E4 85 F1 | 	sub	objptr, ##17080
177e0     F2 00 68 FC | 	wrlong	#0, objptr
177e4     37 00 00 FF 
177e8     68 E4 85 F1 | 	sub	objptr, ##28264
177ec     00 12 06 F6 | 	mov	arg01, #0
177f0     10 68 B0 FD | 	call	#_hg010b_spin2_setfontfamily
177f4     37 00 00 FF 
177f8     6C E4 05 F1 | 	add	objptr, ##28268
177fc     F2 12 02 FB | 	rdlong	arg01, objptr
17800     04 E4 85 F1 | 	sub	objptr, #4
17804     F2 14 02 FB | 	rdlong	arg02, objptr
17808                 | ' 
17808                 | ' write_color:=ff
17808     37 00 00 FF 
1780c     27 E4 85 F1 | 	sub	objptr, ##28199
17810     F2 12 62 FC | 	wrlong	arg01, objptr
17814                 | ' write_background:=bb
17814     04 E4 05 F1 | 	add	objptr, #4
17818     F2 14 62 FC | 	wrlong	arg02, objptr
1781c     45 E4 85 F1 | 	sub	objptr, #69
17820     6C 01 90 FD | 	jmp	#LR__1948
17824                 | LR__1945
17824     37 00 00 FF 
17828     70 E4 05 F1 | 	add	objptr, ##28272
1782c     F2 00 68 FC | 	wrlong	#0, objptr
17830     04 E4 85 F1 | 	sub	objptr, #4
17834     F2 6A 69 FC | 	wrlong	#181, objptr
17838     21 00 00 FF 
1783c     B4 E4 05 F1 | 	add	objptr, ##17076
17840     F2 00 68 FC | 	wrlong	#0, objptr
17844     21 00 00 FF 
17848     B8 E4 85 F1 | 	sub	objptr, ##17080
1784c     F2 00 68 FC | 	wrlong	#0, objptr
17850     37 00 00 FF 
17854     68 E4 85 F1 | 	sub	objptr, ##28264
17858     00 12 06 F6 | 	mov	arg01, #0
1785c     A4 67 B0 FD | 	call	#_hg010b_spin2_setfontfamily
17860     37 00 00 FF 
17864     6C E4 05 F1 | 	add	objptr, ##28268
17868     F2 12 02 FB | 	rdlong	arg01, objptr
1786c     04 E4 85 F1 | 	sub	objptr, #4
17870     F2 14 02 FB | 	rdlong	arg02, objptr
17874                 | ' 
17874                 | ' write_color:=ff
17874     37 00 00 FF 
17878     27 E4 85 F1 | 	sub	objptr, ##28199
1787c     F2 12 62 FC | 	wrlong	arg01, objptr
17880                 | ' write_background:=bb
17880     04 E4 05 F1 | 	add	objptr, #4
17884     F2 14 62 FC | 	wrlong	arg02, objptr
17888     45 E4 85 F1 | 	sub	objptr, #69
1788c     00 01 90 FD | 	jmp	#LR__1948
17890                 | LR__1946
17890     37 00 00 FF 
17894     70 E4 05 F1 | 	add	objptr, ##28272
17898     F2 00 68 FC | 	wrlong	#0, objptr
1789c     04 E4 85 F1 | 	sub	objptr, #4
178a0     F2 1E 68 FC | 	wrlong	#15, objptr
178a4     21 00 00 FF 
178a8     B4 E4 05 F1 | 	add	objptr, ##17076
178ac     F2 00 68 FC | 	wrlong	#0, objptr
178b0     21 00 00 FF 
178b4     B8 E4 85 F1 | 	sub	objptr, ##17080
178b8     F2 00 68 FC | 	wrlong	#0, objptr
178bc     37 00 00 FF 
178c0     68 E4 85 F1 | 	sub	objptr, ##28264
178c4     00 12 06 F6 | 	mov	arg01, #0
178c8     38 67 B0 FD | 	call	#_hg010b_spin2_setfontfamily
178cc     37 00 00 FF 
178d0     6C E4 05 F1 | 	add	objptr, ##28268
178d4     F2 12 02 FB | 	rdlong	arg01, objptr
178d8     04 E4 85 F1 | 	sub	objptr, #4
178dc     F2 14 02 FB | 	rdlong	arg02, objptr
178e0                 | ' 
178e0                 | ' write_color:=ff
178e0     37 00 00 FF 
178e4     27 E4 85 F1 | 	sub	objptr, ##28199
178e8     F2 12 62 FC | 	wrlong	arg01, objptr
178ec                 | ' write_background:=bb
178ec     04 E4 05 F1 | 	add	objptr, #4
178f0     F2 14 62 FC | 	wrlong	arg02, objptr
178f4     45 E4 85 F1 | 	sub	objptr, #69
178f8     94 00 90 FD | 	jmp	#LR__1948
178fc                 | LR__1947
178fc     37 00 00 FF 
17900     70 E4 05 F1 | 	add	objptr, ##28272
17904     F2 02 68 FC | 	wrlong	#1, objptr
17908     04 E4 85 F1 | 	sub	objptr, #4
1790c     F2 02 68 FC | 	wrlong	#1, objptr
17910     21 00 00 FF 
17914     B4 E4 05 F1 | 	add	objptr, ##17076
17918     F2 02 68 FC | 	wrlong	#1, objptr
1791c     21 00 00 FF 
17920     B8 E4 85 F1 | 	sub	objptr, ##17080
17924     F2 1C 68 FC | 	wrlong	#14, objptr
17928     37 00 00 FF 
1792c     68 E4 85 F1 | 	sub	objptr, ##28264
17930     04 12 06 F6 | 	mov	arg01, #4
17934     CC 66 B0 FD | 	call	#_hg010b_spin2_setfontfamily
17938     37 00 00 FF 
1793c     6C E4 05 F1 | 	add	objptr, ##28268
17940     F2 12 02 FB | 	rdlong	arg01, objptr
17944     04 E4 85 F1 | 	sub	objptr, #4
17948     F2 14 02 FB | 	rdlong	arg02, objptr
1794c                 | ' 
1794c                 | ' write_color:=ff
1794c     37 00 00 FF 
17950     27 E4 85 F1 | 	sub	objptr, ##28199
17954     F2 12 62 FC | 	wrlong	arg01, objptr
17958                 | ' write_background:=bb
17958     04 E4 05 F1 | 	add	objptr, #4
1795c     F2 14 62 FC | 	wrlong	arg02, objptr
17960     07 00 00 FF 
17964     8A EB 05 F1 | 	add	ptr__dat__, ##3978
17968     59 00 00 FF 
1796c     7F E5 05 F1 | 	add	objptr, ##45951
17970     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
17974     04 E4 85 F1 | 	sub	objptr, #4
17978     03 00 80 FF 
1797c     F2 30 69 FC | 	wrlong	##1688, objptr
17980     59 00 00 FF 
17984     C0 E5 85 F1 | 	sub	objptr, ##46016
17988     07 00 00 FF 
1798c     8A EB 85 F1 | 	sub	ptr__dat__, ##3978
17990                 | LR__1948
17990     59 00 00 FF 
17994     BC E5 05 F1 | 	add	objptr, ##46012
17998     F2 1E 62 FC | 	wrlong	local01, objptr
1799c     04 E4 85 F1 | 	sub	objptr, #4
179a0     F2 12 02 FB | 	rdlong	arg01, objptr
179a4     16 00 00 FF 
179a8     2C E5 85 F1 | 	sub	objptr, ##11564
179ac     F2 26 02 FB | 	rdlong	local05, objptr
179b0     43 00 00 FF 
179b4     8C E4 85 F1 | 	sub	objptr, ##34444
179b8     13 13 82 F1 | 	sub	arg01, local05
179bc     00 14 06 F6 | 	mov	arg02, #0
179c0     0A 16 06 F6 | 	mov	arg03, #10
179c4     98 A0 B0 FD | 	call	#__system__Number_S
179c8     FD 12 02 F6 | 	mov	arg01, result1
179cc     7A 01 00 FF 
179d0     A1 15 06 F6 | 	mov	arg02, ##@LR__5264
179d4     80 7E B0 FD | 	call	#__system___string_concat
179d8     58 00 00 FF 
179dc     1C E5 05 F1 | 	add	objptr, ##45340
179e0     F2 FA 61 FC | 	wrlong	result1, objptr
179e4     21 00 00 FF 
179e8     B0 E4 85 F1 | 	sub	objptr, ##17072
179ec     F2 12 02 FB | 	rdlong	arg01, objptr
179f0     04 E4 85 F1 | 	sub	objptr, #4
179f4     F2 14 02 FB | 	rdlong	arg02, objptr
179f8     37 00 00 FF 
179fc     68 E4 85 F1 | 	sub	objptr, ##28264
17a00     50 67 B0 FD | 	call	#_hg010b_spin2_cls
17a04     7A 01 00 FF 
17a08     B3 13 06 F6 | 	mov	arg01, ##@LR__5265
17a0c                 | ' 
17a0c                 | ' write(text)
17a0c     04 6B B0 FD | 	call	#_hg010b_spin2_write
17a10                 | ' crlf
17a10     CC 6D B0 FD | 	call	#_hg010b_spin2_crlf
17a14     18 00 00 FF 
17a18     4C EB 05 F1 | 	add	ptr__dat__, ##12620
17a1c     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
17a20     18 00 00 FF 
17a24     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
17a28                 | ' 
17a28                 | ' write(text)
17a28     E8 6A B0 FD | 	call	#_hg010b_spin2_write
17a2c                 | ' crlf
17a2c     B0 6D B0 FD | 	call	#_hg010b_spin2_crlf
17a30     58 00 00 FF 
17a34     1C E5 05 F1 | 	add	objptr, ##45340
17a38     F2 12 02 FB | 	rdlong	arg01, objptr
17a3c     58 00 00 FF 
17a40     1C E5 85 F1 | 	sub	objptr, ##45340
17a44                 | ' 
17a44                 | ' write(text)
17a44     CC 6A B0 FD | 	call	#_hg010b_spin2_write
17a48                 | ' crlf
17a48     94 6D B0 FD | 	call	#_hg010b_spin2_crlf
17a4c     A7 F0 03 F6 | 	mov	ptra, fp
17a50     B2 00 A0 FD | 	call	#popregs_
17a54                 | _do_mode_ret
17a54     2D 00 64 FD | 	ret
17a58                 | 
17a58                 | ' 
17a58                 | ' sub do_setwave
17a58                 | _do_setwave
17a58     02 4A 05 F6 | 	mov	COUNT_, #2
17a5c     A8 00 A0 FD | 	call	#pushregs_
17a60     18 F0 07 F1 | 	add	ptra, #24
17a64     D4 30 BF FD | 	call	#_pop
17a68     FD 12 02 F6 | 	mov	arg01, result1
17a6c     FE 1E 02 F6 | 	mov	local01, result2
17a70     FF 20 02 F6 | 	mov	local02, result3
17a74     A7 12 62 FC | 	wrlong	arg01, fp
17a78     04 4E 05 F1 | 	add	fp, #4
17a7c     A7 1E 62 FC | 	wrlong	local01, fp
17a80     04 4E 05 F1 | 	add	fp, #4
17a84     A7 20 62 FC | 	wrlong	local02, fp
17a88     08 4E 85 F1 | 	sub	fp, #8
17a8c     AC 30 BF FD | 	call	#_pop
17a90     FD 20 02 F6 | 	mov	local02, result1
17a94     0C 4E 05 F1 | 	add	fp, #12
17a98     A7 20 62 FC | 	wrlong	local02, fp
17a9c     04 4E 05 F1 | 	add	fp, #4
17aa0     A7 FC 61 FC | 	wrlong	result2, fp
17aa4     04 4E 05 F1 | 	add	fp, #4
17aa8     A7 FE 61 FC | 	wrlong	result3, fp
17aac     08 4E 85 F1 | 	sub	fp, #8
17ab0     A7 12 02 F6 | 	mov	arg01, fp
17ab4     0C 4E 85 F1 | 	sub	fp, #12
17ab8     F8 C3 BF FD | 	call	#_converttoint
17abc     FD 20 02 F6 | 	mov	local02, result1
17ac0     10 1F 02 F6 | 	mov	local01, local02
17ac4     01 1E 66 F0 | 	shl	local01, #1
17ac8     10 1F 02 F1 | 	add	local01, local02
17acc     03 1E 66 F0 | 	shl	local01, #3
17ad0     14 00 00 FF 
17ad4     68 E5 05 F1 | 	add	objptr, ##10600
17ad8     F2 1E 02 F1 | 	add	local01, objptr
17adc     A7 12 02 F6 | 	mov	arg01, fp
17ae0     14 00 00 FF 
17ae4     68 E5 85 F1 | 	sub	objptr, ##10600
17ae8     C8 C3 BF FD | 	call	#_converttoint
17aec     04 1E 06 F1 | 	add	local01, #4
17af0     0F FB 41 FC | 	wrbyte	result1, local01
17af4     A7 F0 03 F6 | 	mov	ptra, fp
17af8     B2 00 A0 FD | 	call	#popregs_
17afc                 | _do_setwave_ret
17afc     2D 00 64 FD | 	ret
17b00                 | 
17b00                 | ' 
17b00                 | ' sub do_setsustain
17b00                 | _do_setsustain
17b00     02 4A 05 F6 | 	mov	COUNT_, #2
17b04     A8 00 A0 FD | 	call	#pushregs_
17b08     18 F0 07 F1 | 	add	ptra, #24
17b0c     2C 30 BF FD | 	call	#_pop
17b10     FD 12 02 F6 | 	mov	arg01, result1
17b14     FE 1E 02 F6 | 	mov	local01, result2
17b18     FF 20 02 F6 | 	mov	local02, result3
17b1c     A7 12 62 FC | 	wrlong	arg01, fp
17b20     04 4E 05 F1 | 	add	fp, #4
17b24     A7 1E 62 FC | 	wrlong	local01, fp
17b28     04 4E 05 F1 | 	add	fp, #4
17b2c     A7 20 62 FC | 	wrlong	local02, fp
17b30     08 4E 85 F1 | 	sub	fp, #8
17b34     04 30 BF FD | 	call	#_pop
17b38     FD 20 02 F6 | 	mov	local02, result1
17b3c     0C 4E 05 F1 | 	add	fp, #12
17b40     A7 20 62 FC | 	wrlong	local02, fp
17b44     04 4E 05 F1 | 	add	fp, #4
17b48     A7 FC 61 FC | 	wrlong	result2, fp
17b4c     04 4E 05 F1 | 	add	fp, #4
17b50     A7 FE 61 FC | 	wrlong	result3, fp
17b54     08 4E 85 F1 | 	sub	fp, #8
17b58     A7 12 02 F6 | 	mov	arg01, fp
17b5c     0C 4E 85 F1 | 	sub	fp, #12
17b60     50 C3 BF FD | 	call	#_converttoint
17b64     FD 20 02 F6 | 	mov	local02, result1
17b68     10 1F 02 F6 | 	mov	local01, local02
17b6c     01 1E 66 F0 | 	shl	local01, #1
17b70     10 1F 02 F1 | 	add	local01, local02
17b74     03 1E 66 F0 | 	shl	local01, #3
17b78     14 00 00 FF 
17b7c     68 E5 05 F1 | 	add	objptr, ##10600
17b80     F2 1E 02 F1 | 	add	local01, objptr
17b84     A7 12 02 F6 | 	mov	arg01, fp
17b88     14 00 00 FF 
17b8c     68 E5 85 F1 | 	sub	objptr, ##10600
17b90     20 C3 BF FD | 	call	#_converttoint
17b94     14 1E 06 F1 | 	add	local01, #20
17b98     0F FB 51 FC | 	wrword	result1, local01
17b9c     A7 F0 03 F6 | 	mov	ptra, fp
17ba0     B2 00 A0 FD | 	call	#popregs_
17ba4                 | _do_setsustain_ret
17ba4     2D 00 64 FD | 	ret
17ba8                 | 
17ba8                 | ' 
17ba8                 | ' sub do_setenv
17ba8                 | _do_setenv
17ba8     02 4A 05 F6 | 	mov	COUNT_, #2
17bac     A8 00 A0 FD | 	call	#pushregs_
17bb0     18 F0 07 F1 | 	add	ptra, #24
17bb4     84 2F BF FD | 	call	#_pop
17bb8     FD 12 02 F6 | 	mov	arg01, result1
17bbc     FE 1E 02 F6 | 	mov	local01, result2
17bc0     FF 20 02 F6 | 	mov	local02, result3
17bc4     A7 12 62 FC | 	wrlong	arg01, fp
17bc8     04 4E 05 F1 | 	add	fp, #4
17bcc     A7 1E 62 FC | 	wrlong	local01, fp
17bd0     04 4E 05 F1 | 	add	fp, #4
17bd4     A7 20 62 FC | 	wrlong	local02, fp
17bd8     08 4E 85 F1 | 	sub	fp, #8
17bdc     5C 2F BF FD | 	call	#_pop
17be0     FD 20 02 F6 | 	mov	local02, result1
17be4     0C 4E 05 F1 | 	add	fp, #12
17be8     A7 20 62 FC | 	wrlong	local02, fp
17bec     04 4E 05 F1 | 	add	fp, #4
17bf0     A7 FC 61 FC | 	wrlong	result2, fp
17bf4     04 4E 05 F1 | 	add	fp, #4
17bf8     A7 FE 61 FC | 	wrlong	result3, fp
17bfc     08 4E 85 F1 | 	sub	fp, #8
17c00     A7 12 02 F6 | 	mov	arg01, fp
17c04     0C 4E 85 F1 | 	sub	fp, #12
17c08     A8 C2 BF FD | 	call	#_converttoint
17c0c     FD 20 02 F6 | 	mov	local02, result1
17c10     10 1F 02 F6 | 	mov	local01, local02
17c14     01 1E 66 F0 | 	shl	local01, #1
17c18     10 1F 02 F1 | 	add	local01, local02
17c1c     03 1E 66 F0 | 	shl	local01, #3
17c20     14 00 00 FF 
17c24     68 E5 05 F1 | 	add	objptr, ##10600
17c28     F2 1E 02 F1 | 	add	local01, objptr
17c2c     A7 12 02 F6 | 	mov	arg01, fp
17c30     14 00 00 FF 
17c34     68 E5 85 F1 | 	sub	objptr, ##10600
17c38     78 C2 BF FD | 	call	#_converttoint
17c3c     05 1E 06 F1 | 	add	local01, #5
17c40     0F FB 41 FC | 	wrbyte	result1, local01
17c44     A7 F0 03 F6 | 	mov	ptra, fp
17c48     B2 00 A0 FD | 	call	#popregs_
17c4c                 | _do_setenv_ret
17c4c     2D 00 64 FD | 	ret
17c50                 | 
17c50                 | ' 
17c50                 | ' sub do_setdelay
17c50                 | _do_setdelay
17c50     02 4A 05 F6 | 	mov	COUNT_, #2
17c54     A8 00 A0 FD | 	call	#pushregs_
17c58     18 F0 07 F1 | 	add	ptra, #24
17c5c     DC 2E BF FD | 	call	#_pop
17c60     FD 12 02 F6 | 	mov	arg01, result1
17c64     FE 1E 02 F6 | 	mov	local01, result2
17c68     FF 20 02 F6 | 	mov	local02, result3
17c6c     A7 12 62 FC | 	wrlong	arg01, fp
17c70     04 4E 05 F1 | 	add	fp, #4
17c74     A7 1E 62 FC | 	wrlong	local01, fp
17c78     04 4E 05 F1 | 	add	fp, #4
17c7c     A7 20 62 FC | 	wrlong	local02, fp
17c80     08 4E 85 F1 | 	sub	fp, #8
17c84     B4 2E BF FD | 	call	#_pop
17c88     FD 20 02 F6 | 	mov	local02, result1
17c8c     0C 4E 05 F1 | 	add	fp, #12
17c90     A7 20 62 FC | 	wrlong	local02, fp
17c94     04 4E 05 F1 | 	add	fp, #4
17c98     A7 FC 61 FC | 	wrlong	result2, fp
17c9c     04 4E 05 F1 | 	add	fp, #4
17ca0     A7 FE 61 FC | 	wrlong	result3, fp
17ca4     08 4E 85 F1 | 	sub	fp, #8
17ca8     A7 12 02 F6 | 	mov	arg01, fp
17cac     0C 4E 85 F1 | 	sub	fp, #12
17cb0     00 C2 BF FD | 	call	#_converttoint
17cb4     FD 20 02 F6 | 	mov	local02, result1
17cb8     10 1F 02 F6 | 	mov	local01, local02
17cbc     01 1E 66 F0 | 	shl	local01, #1
17cc0     10 1F 02 F1 | 	add	local01, local02
17cc4     03 1E 66 F0 | 	shl	local01, #3
17cc8     14 00 00 FF 
17ccc     68 E5 05 F1 | 	add	objptr, ##10600
17cd0     F2 1E 02 F1 | 	add	local01, objptr
17cd4     A7 12 02 F6 | 	mov	arg01, fp
17cd8     14 00 00 FF 
17cdc     68 E5 85 F1 | 	sub	objptr, ##10600
17ce0     D0 C1 BF FD | 	call	#_converttoint
17ce4     06 1E 06 F1 | 	add	local01, #6
17ce8     0F FB 51 FC | 	wrword	result1, local01
17cec     A7 F0 03 F6 | 	mov	ptra, fp
17cf0     B2 00 A0 FD | 	call	#popregs_
17cf4                 | _do_setdelay_ret
17cf4     2D 00 64 FD | 	ret
17cf8                 | 
17cf8                 | ' 
17cf8                 | ' sub do_setlen
17cf8                 | _do_setlen
17cf8     02 4A 05 F6 | 	mov	COUNT_, #2
17cfc     A8 00 A0 FD | 	call	#pushregs_
17d00     18 F0 07 F1 | 	add	ptra, #24
17d04     34 2E BF FD | 	call	#_pop
17d08     FD 12 02 F6 | 	mov	arg01, result1
17d0c     FE 1E 02 F6 | 	mov	local01, result2
17d10     FF 20 02 F6 | 	mov	local02, result3
17d14     A7 12 62 FC | 	wrlong	arg01, fp
17d18     04 4E 05 F1 | 	add	fp, #4
17d1c     A7 1E 62 FC | 	wrlong	local01, fp
17d20     04 4E 05 F1 | 	add	fp, #4
17d24     A7 20 62 FC | 	wrlong	local02, fp
17d28     08 4E 85 F1 | 	sub	fp, #8
17d2c     0C 2E BF FD | 	call	#_pop
17d30     FD 20 02 F6 | 	mov	local02, result1
17d34     0C 4E 05 F1 | 	add	fp, #12
17d38     A7 20 62 FC | 	wrlong	local02, fp
17d3c     04 4E 05 F1 | 	add	fp, #4
17d40     A7 FC 61 FC | 	wrlong	result2, fp
17d44     04 4E 05 F1 | 	add	fp, #4
17d48     A7 FE 61 FC | 	wrlong	result3, fp
17d4c     08 4E 85 F1 | 	sub	fp, #8
17d50     A7 12 02 F6 | 	mov	arg01, fp
17d54     0C 4E 85 F1 | 	sub	fp, #12
17d58     58 C1 BF FD | 	call	#_converttoint
17d5c     FD 20 02 F6 | 	mov	local02, result1
17d60     10 1F 02 F6 | 	mov	local01, local02
17d64     01 1E 66 F0 | 	shl	local01, #1
17d68     10 1F 02 F1 | 	add	local01, local02
17d6c     03 1E 66 F0 | 	shl	local01, #3
17d70     14 00 00 FF 
17d74     68 E5 05 F1 | 	add	objptr, ##10600
17d78     F2 1E 02 F1 | 	add	local01, objptr
17d7c     A7 12 02 F6 | 	mov	arg01, fp
17d80     14 00 00 FF 
17d84     68 E5 85 F1 | 	sub	objptr, ##10600
17d88     D4 C1 BF FD | 	call	#_converttofloat
17d8c     08 1E 06 F1 | 	add	local01, #8
17d90     0F FB 61 FC | 	wrlong	result1, local01
17d94     A7 F0 03 F6 | 	mov	ptra, fp
17d98     B2 00 A0 FD | 	call	#popregs_
17d9c                 | _do_setlen_ret
17d9c     2D 00 64 FD | 	ret
17da0                 | 
17da0                 | ' 
17da0                 | ' sub do_setvol
17da0                 | _do_setvol
17da0     02 4A 05 F6 | 	mov	COUNT_, #2
17da4     A8 00 A0 FD | 	call	#pushregs_
17da8     18 F0 07 F1 | 	add	ptra, #24
17dac     8C 2D BF FD | 	call	#_pop
17db0     FD 12 02 F6 | 	mov	arg01, result1
17db4     FE 1E 02 F6 | 	mov	local01, result2
17db8     FF 20 02 F6 | 	mov	local02, result3
17dbc     A7 12 62 FC | 	wrlong	arg01, fp
17dc0     04 4E 05 F1 | 	add	fp, #4
17dc4     A7 1E 62 FC | 	wrlong	local01, fp
17dc8     04 4E 05 F1 | 	add	fp, #4
17dcc     A7 20 62 FC | 	wrlong	local02, fp
17dd0     08 4E 85 F1 | 	sub	fp, #8
17dd4     64 2D BF FD | 	call	#_pop
17dd8     FD 20 02 F6 | 	mov	local02, result1
17ddc     0C 4E 05 F1 | 	add	fp, #12
17de0     A7 20 62 FC | 	wrlong	local02, fp
17de4     04 4E 05 F1 | 	add	fp, #4
17de8     A7 FC 61 FC | 	wrlong	result2, fp
17dec     04 4E 05 F1 | 	add	fp, #4
17df0     A7 FE 61 FC | 	wrlong	result3, fp
17df4     08 4E 85 F1 | 	sub	fp, #8
17df8     A7 12 02 F6 | 	mov	arg01, fp
17dfc     0C 4E 85 F1 | 	sub	fp, #12
17e00     B0 C0 BF FD | 	call	#_converttoint
17e04     FD 20 02 F6 | 	mov	local02, result1
17e08     10 1F 02 F6 | 	mov	local01, local02
17e0c     01 1E 66 F0 | 	shl	local01, #1
17e10     10 1F 02 F1 | 	add	local01, local02
17e14     03 1E 66 F0 | 	shl	local01, #3
17e18     14 00 00 FF 
17e1c     68 E5 05 F1 | 	add	objptr, ##10600
17e20     F2 1E 02 F1 | 	add	local01, objptr
17e24     A7 12 02 F6 | 	mov	arg01, fp
17e28     14 00 00 FF 
17e2c     68 E5 85 F1 | 	sub	objptr, ##10600
17e30     2C C1 BF FD | 	call	#_converttofloat
17e34     0C 1E 06 F1 | 	add	local01, #12
17e38     0F FB 61 FC | 	wrlong	result1, local01
17e3c     A7 F0 03 F6 | 	mov	ptra, fp
17e40     B2 00 A0 FD | 	call	#popregs_
17e44                 | _do_setvol_ret
17e44     2D 00 64 FD | 	ret
17e48                 | 
17e48                 | ' 
17e48                 | ' sub do_setpan
17e48                 | _do_setpan
17e48     02 4A 05 F6 | 	mov	COUNT_, #2
17e4c     A8 00 A0 FD | 	call	#pushregs_
17e50     18 F0 07 F1 | 	add	ptra, #24
17e54     E4 2C BF FD | 	call	#_pop
17e58     FD 12 02 F6 | 	mov	arg01, result1
17e5c     FE 1E 02 F6 | 	mov	local01, result2
17e60     FF 20 02 F6 | 	mov	local02, result3
17e64     A7 12 62 FC | 	wrlong	arg01, fp
17e68     04 4E 05 F1 | 	add	fp, #4
17e6c     A7 1E 62 FC | 	wrlong	local01, fp
17e70     04 4E 05 F1 | 	add	fp, #4
17e74     A7 20 62 FC | 	wrlong	local02, fp
17e78     08 4E 85 F1 | 	sub	fp, #8
17e7c     BC 2C BF FD | 	call	#_pop
17e80     FD 20 02 F6 | 	mov	local02, result1
17e84     0C 4E 05 F1 | 	add	fp, #12
17e88     A7 20 62 FC | 	wrlong	local02, fp
17e8c     04 4E 05 F1 | 	add	fp, #4
17e90     A7 FC 61 FC | 	wrlong	result2, fp
17e94     04 4E 05 F1 | 	add	fp, #4
17e98     A7 FE 61 FC | 	wrlong	result3, fp
17e9c     08 4E 85 F1 | 	sub	fp, #8
17ea0     A7 12 02 F6 | 	mov	arg01, fp
17ea4     0C 4E 85 F1 | 	sub	fp, #12
17ea8     08 C0 BF FD | 	call	#_converttoint
17eac     FD 20 02 F6 | 	mov	local02, result1
17eb0     10 1F 02 F6 | 	mov	local01, local02
17eb4     01 1E 66 F0 | 	shl	local01, #1
17eb8     10 1F 02 F1 | 	add	local01, local02
17ebc     03 1E 66 F0 | 	shl	local01, #3
17ec0     14 00 00 FF 
17ec4     68 E5 05 F1 | 	add	objptr, ##10600
17ec8     F2 1E 02 F1 | 	add	local01, objptr
17ecc     A7 12 02 F6 | 	mov	arg01, fp
17ed0     14 00 00 FF 
17ed4     68 E5 85 F1 | 	sub	objptr, ##10600
17ed8     84 C0 BF FD | 	call	#_converttofloat
17edc     10 1E 06 F1 | 	add	local01, #16
17ee0     0F FB 61 FC | 	wrlong	result1, local01
17ee4     A7 F0 03 F6 | 	mov	ptra, fp
17ee8     B2 00 A0 FD | 	call	#popregs_
17eec                 | _do_setpan_ret
17eec     2D 00 64 FD | 	ret
17ef0                 | 
17ef0                 | ' 
17ef0                 | ' 
17ef0                 | ' sub do_pinwrite
17ef0                 | _do_pinwrite
17ef0     01 4A 05 F6 | 	mov	COUNT_, #1
17ef4     A8 00 A0 FD | 	call	#pushregs_
17ef8     18 F0 07 F1 | 	add	ptra, #24
17efc     3C 2C BF FD | 	call	#_pop
17f00     FD 14 02 F6 | 	mov	arg02, result1
17f04     FE 12 02 F6 | 	mov	arg01, result2
17f08     FF 1E 02 F6 | 	mov	local01, result3
17f0c     A7 14 62 FC | 	wrlong	arg02, fp
17f10     04 4E 05 F1 | 	add	fp, #4
17f14     A7 12 62 FC | 	wrlong	arg01, fp
17f18     04 4E 05 F1 | 	add	fp, #4
17f1c     A7 1E 62 FC | 	wrlong	local01, fp
17f20     08 4E 85 F1 | 	sub	fp, #8
17f24     14 2C BF FD | 	call	#_pop
17f28     FF 1E 02 F6 | 	mov	local01, result3
17f2c     0C 4E 05 F1 | 	add	fp, #12
17f30     A7 FA 61 FC | 	wrlong	result1, fp
17f34     04 4E 05 F1 | 	add	fp, #4
17f38     A7 FC 61 FC | 	wrlong	result2, fp
17f3c     04 4E 05 F1 | 	add	fp, #4
17f40     A7 1E 62 FC | 	wrlong	local01, fp
17f44     08 4E 85 F1 | 	sub	fp, #8
17f48     A7 12 02 F6 | 	mov	arg01, fp
17f4c     0C 4E 85 F1 | 	sub	fp, #12
17f50     60 BF BF FD | 	call	#_converttoint
17f54     FD 1E 02 F6 | 	mov	local01, result1
17f58     A7 12 02 F6 | 	mov	arg01, fp
17f5c     54 BF BF FD | 	call	#_converttoint
17f60     FD 14 02 F6 | 	mov	arg02, result1
17f64     0F 13 02 F6 | 	mov	arg01, local01
17f68     44 7A B0 FD | 	call	#__system___pinwrite
17f6c     A7 F0 03 F6 | 	mov	ptra, fp
17f70     B2 00 A0 FD | 	call	#popregs_
17f74                 | _do_pinwrite_ret
17f74     2D 00 64 FD | 	ret
17f78                 | 
17f78                 | ' 
17f78                 | ' sub do_pinfloat
17f78                 | _do_pinfloat
17f78     00 4A 05 F6 | 	mov	COUNT_, #0
17f7c     A8 00 A0 FD | 	call	#pushregs_
17f80     0C F0 07 F1 | 	add	ptra, #12
17f84     B4 2B BF FD | 	call	#_pop
17f88     A7 FA 61 FC | 	wrlong	result1, fp
17f8c     04 4E 05 F1 | 	add	fp, #4
17f90     A7 FC 61 FC | 	wrlong	result2, fp
17f94     04 4E 05 F1 | 	add	fp, #4
17f98     A7 FE 61 FC | 	wrlong	result3, fp
17f9c     08 4E 85 F1 | 	sub	fp, #8
17fa0     A7 12 02 F6 | 	mov	arg01, fp
17fa4     0C BF BF FD | 	call	#_converttoint
17fa8     50 FA 61 FD | 	fltl	result1
17fac     A7 F0 03 F6 | 	mov	ptra, fp
17fb0     B2 00 A0 FD | 	call	#popregs_
17fb4                 | _do_pinfloat_ret
17fb4     2D 00 64 FD | 	ret
17fb8                 | 
17fb8                 | ' 
17fb8                 | ' sub do_pinlo
17fb8                 | _do_pinlo
17fb8     00 4A 05 F6 | 	mov	COUNT_, #0
17fbc     A8 00 A0 FD | 	call	#pushregs_
17fc0     0C F0 07 F1 | 	add	ptra, #12
17fc4     74 2B BF FD | 	call	#_pop
17fc8     A7 FA 61 FC | 	wrlong	result1, fp
17fcc     04 4E 05 F1 | 	add	fp, #4
17fd0     A7 FC 61 FC | 	wrlong	result2, fp
17fd4     04 4E 05 F1 | 	add	fp, #4
17fd8     A7 FE 61 FC | 	wrlong	result3, fp
17fdc     08 4E 85 F1 | 	sub	fp, #8
17fe0     A7 12 02 F6 | 	mov	arg01, fp
17fe4     CC BE BF FD | 	call	#_converttoint
17fe8     58 FA 61 FD | 	drvl	result1
17fec     A7 F0 03 F6 | 	mov	ptra, fp
17ff0     B2 00 A0 FD | 	call	#popregs_
17ff4                 | _do_pinlo_ret
17ff4     2D 00 64 FD | 	ret
17ff8                 | 
17ff8                 | ' 
17ff8                 | ' sub do_pinhi
17ff8                 | _do_pinhi
17ff8     00 4A 05 F6 | 	mov	COUNT_, #0
17ffc     A8 00 A0 FD | 	call	#pushregs_
18000     0C F0 07 F1 | 	add	ptra, #12
18004     34 2B BF FD | 	call	#_pop
18008     A7 FA 61 FC | 	wrlong	result1, fp
1800c     04 4E 05 F1 | 	add	fp, #4
18010     A7 FC 61 FC | 	wrlong	result2, fp
18014     04 4E 05 F1 | 	add	fp, #4
18018     A7 FE 61 FC | 	wrlong	result3, fp
1801c     08 4E 85 F1 | 	sub	fp, #8
18020     A7 12 02 F6 | 	mov	arg01, fp
18024     8C BE BF FD | 	call	#_converttoint
18028     59 FA 61 FD | 	drvh	result1
1802c     A7 F0 03 F6 | 	mov	ptra, fp
18030     B2 00 A0 FD | 	call	#popregs_
18034                 | _do_pinhi_ret
18034     2D 00 64 FD | 	ret
18038                 | 
18038                 | ' 
18038                 | ' sub do_pintoggle
18038                 | _do_pintoggle
18038     00 4A 05 F6 | 	mov	COUNT_, #0
1803c     A8 00 A0 FD | 	call	#pushregs_
18040     0C F0 07 F1 | 	add	ptra, #12
18044     F4 2A BF FD | 	call	#_pop
18048     A7 FA 61 FC | 	wrlong	result1, fp
1804c     04 4E 05 F1 | 	add	fp, #4
18050     A7 FC 61 FC | 	wrlong	result2, fp
18054     04 4E 05 F1 | 	add	fp, #4
18058     A7 FE 61 FC | 	wrlong	result3, fp
1805c     08 4E 85 F1 | 	sub	fp, #8
18060     A7 12 02 F6 | 	mov	arg01, fp
18064     4C BE BF FD | 	call	#_converttoint
18068     5F FA 61 FD | 	drvnot	result1
1806c     A7 F0 03 F6 | 	mov	ptra, fp
18070     B2 00 A0 FD | 	call	#popregs_
18074                 | _do_pintoggle_ret
18074     2D 00 64 FD | 	ret
18078                 | 
18078                 | ' 
18078                 | ' 
18078                 | ' sub do_pinstart
18078                 | _do_pinstart
18078     03 4A 05 F6 | 	mov	COUNT_, #3
1807c     A8 00 A0 FD | 	call	#pushregs_
18080     30 F0 07 F1 | 	add	ptra, #48
18084     B4 2A BF FD | 	call	#_pop
18088     FD 16 02 F6 | 	mov	arg03, result1
1808c     FE 14 02 F6 | 	mov	arg02, result2
18090     FF 18 02 F6 | 	mov	arg04, result3
18094     A7 16 62 FC | 	wrlong	arg03, fp
18098     04 4E 05 F1 | 	add	fp, #4
1809c     A7 14 62 FC | 	wrlong	arg02, fp
180a0     04 4E 05 F1 | 	add	fp, #4
180a4     A7 18 62 FC | 	wrlong	arg04, fp
180a8     08 4E 85 F1 | 	sub	fp, #8
180ac     8C 2A BF FD | 	call	#_pop
180b0     FD 16 02 F6 | 	mov	arg03, result1
180b4     FE 14 02 F6 | 	mov	arg02, result2
180b8     FF 18 02 F6 | 	mov	arg04, result3
180bc     0C 4E 05 F1 | 	add	fp, #12
180c0     A7 16 62 FC | 	wrlong	arg03, fp
180c4     04 4E 05 F1 | 	add	fp, #4
180c8     A7 14 62 FC | 	wrlong	arg02, fp
180cc     04 4E 05 F1 | 	add	fp, #4
180d0     A7 18 62 FC | 	wrlong	arg04, fp
180d4     14 4E 85 F1 | 	sub	fp, #20
180d8     60 2A BF FD | 	call	#_pop
180dc     FD 16 02 F6 | 	mov	arg03, result1
180e0     FE 14 02 F6 | 	mov	arg02, result2
180e4     FF 18 02 F6 | 	mov	arg04, result3
180e8     18 4E 05 F1 | 	add	fp, #24
180ec     A7 16 62 FC | 	wrlong	arg03, fp
180f0     04 4E 05 F1 | 	add	fp, #4
180f4     A7 14 62 FC | 	wrlong	arg02, fp
180f8     04 4E 05 F1 | 	add	fp, #4
180fc     A7 18 62 FC | 	wrlong	arg04, fp
18100     20 4E 85 F1 | 	sub	fp, #32
18104     34 2A BF FD | 	call	#_pop
18108     FF 16 02 F6 | 	mov	arg03, result3
1810c     24 4E 05 F1 | 	add	fp, #36
18110     A7 FA 61 FC | 	wrlong	result1, fp
18114     04 4E 05 F1 | 	add	fp, #4
18118     A7 FC 61 FC | 	wrlong	result2, fp
1811c     04 4E 05 F1 | 	add	fp, #4
18120     A7 16 62 FC | 	wrlong	arg03, fp
18124     08 4E 85 F1 | 	sub	fp, #8
18128     A7 12 02 F6 | 	mov	arg01, fp
1812c     24 4E 85 F1 | 	sub	fp, #36
18130     80 BD BF FD | 	call	#_converttoint
18134     FD 1E 02 F6 | 	mov	local01, result1
18138     18 4E 05 F1 | 	add	fp, #24
1813c     A7 12 02 F6 | 	mov	arg01, fp
18140     18 4E 85 F1 | 	sub	fp, #24
18144     6C BD BF FD | 	call	#_converttoint
18148     FD 20 02 F6 | 	mov	local02, result1
1814c     0C 4E 05 F1 | 	add	fp, #12
18150     A7 12 02 F6 | 	mov	arg01, fp
18154     0C 4E 85 F1 | 	sub	fp, #12
18158     58 BD BF FD | 	call	#_converttoint
1815c     FD 22 02 F6 | 	mov	local03, result1
18160     A7 12 02 F6 | 	mov	arg01, fp
18164     4C BD BF FD | 	call	#_converttoint
18168     40 1E 62 FD | 	dirl	local01
1816c     0F 21 02 FC | 	wrpin	local02, local01
18170     0F 23 12 FC | 	wxpin	local03, local01
18174     0F FB 21 FC | 	wypin	result1, local01
18178     41 1E 62 FD | 	dirh	local01
1817c     A7 F0 03 F6 | 	mov	ptra, fp
18180     B2 00 A0 FD | 	call	#popregs_
18184                 | _do_pinstart_ret
18184     2D 00 64 FD | 	ret
18188                 | 
18188                 | ' 
18188                 | ' 
18188                 | ' sub do_wrpin
18188                 | _do_wrpin
18188     01 4A 05 F6 | 	mov	COUNT_, #1
1818c     A8 00 A0 FD | 	call	#pushregs_
18190     18 F0 07 F1 | 	add	ptra, #24
18194     A4 29 BF FD | 	call	#_pop
18198     FD 14 02 F6 | 	mov	arg02, result1
1819c     FE 12 02 F6 | 	mov	arg01, result2
181a0     FF 1E 02 F6 | 	mov	local01, result3
181a4     A7 14 62 FC | 	wrlong	arg02, fp
181a8     04 4E 05 F1 | 	add	fp, #4
181ac     A7 12 62 FC | 	wrlong	arg01, fp
181b0     04 4E 05 F1 | 	add	fp, #4
181b4     A7 1E 62 FC | 	wrlong	local01, fp
181b8     08 4E 85 F1 | 	sub	fp, #8
181bc     7C 29 BF FD | 	call	#_pop
181c0     FF 1E 02 F6 | 	mov	local01, result3
181c4     0C 4E 05 F1 | 	add	fp, #12
181c8     A7 FA 61 FC | 	wrlong	result1, fp
181cc     04 4E 05 F1 | 	add	fp, #4
181d0     A7 FC 61 FC | 	wrlong	result2, fp
181d4     04 4E 05 F1 | 	add	fp, #4
181d8     A7 1E 62 FC | 	wrlong	local01, fp
181dc     08 4E 85 F1 | 	sub	fp, #8
181e0     A7 12 02 F6 | 	mov	arg01, fp
181e4     0C 4E 85 F1 | 	sub	fp, #12
181e8     C8 BC BF FD | 	call	#_converttoint
181ec     FD 1E 02 F6 | 	mov	local01, result1
181f0     A7 12 02 F6 | 	mov	arg01, fp
181f4     BC BC BF FD | 	call	#_converttoint
181f8     0F FB 01 FC | 	wrpin	result1, local01
181fc     A7 F0 03 F6 | 	mov	ptra, fp
18200     B2 00 A0 FD | 	call	#popregs_
18204                 | _do_wrpin_ret
18204     2D 00 64 FD | 	ret
18208                 | 
18208                 | ' 
18208                 | ' sub do_wxpin
18208                 | _do_wxpin
18208     01 4A 05 F6 | 	mov	COUNT_, #1
1820c     A8 00 A0 FD | 	call	#pushregs_
18210     18 F0 07 F1 | 	add	ptra, #24
18214     24 29 BF FD | 	call	#_pop
18218     FD 14 02 F6 | 	mov	arg02, result1
1821c     FE 12 02 F6 | 	mov	arg01, result2
18220     FF 1E 02 F6 | 	mov	local01, result3
18224     A7 14 62 FC | 	wrlong	arg02, fp
18228     04 4E 05 F1 | 	add	fp, #4
1822c     A7 12 62 FC | 	wrlong	arg01, fp
18230     04 4E 05 F1 | 	add	fp, #4
18234     A7 1E 62 FC | 	wrlong	local01, fp
18238     08 4E 85 F1 | 	sub	fp, #8
1823c     FC 28 BF FD | 	call	#_pop
18240     FF 1E 02 F6 | 	mov	local01, result3
18244     0C 4E 05 F1 | 	add	fp, #12
18248     A7 FA 61 FC | 	wrlong	result1, fp
1824c     04 4E 05 F1 | 	add	fp, #4
18250     A7 FC 61 FC | 	wrlong	result2, fp
18254     04 4E 05 F1 | 	add	fp, #4
18258     A7 1E 62 FC | 	wrlong	local01, fp
1825c     08 4E 85 F1 | 	sub	fp, #8
18260     A7 12 02 F6 | 	mov	arg01, fp
18264     0C 4E 85 F1 | 	sub	fp, #12
18268     48 BC BF FD | 	call	#_converttoint
1826c     FD 1E 02 F6 | 	mov	local01, result1
18270     A7 12 02 F6 | 	mov	arg01, fp
18274     3C BC BF FD | 	call	#_converttoint
18278     0F FB 11 FC | 	wxpin	result1, local01
1827c     A7 F0 03 F6 | 	mov	ptra, fp
18280     B2 00 A0 FD | 	call	#popregs_
18284                 | _do_wxpin_ret
18284     2D 00 64 FD | 	ret
18288                 | 
18288                 | ' 
18288                 | ' sub do_wypin
18288                 | _do_wypin
18288     01 4A 05 F6 | 	mov	COUNT_, #1
1828c     A8 00 A0 FD | 	call	#pushregs_
18290     18 F0 07 F1 | 	add	ptra, #24
18294     A4 28 BF FD | 	call	#_pop
18298     FD 14 02 F6 | 	mov	arg02, result1
1829c     FE 12 02 F6 | 	mov	arg01, result2
182a0     FF 1E 02 F6 | 	mov	local01, result3
182a4     A7 14 62 FC | 	wrlong	arg02, fp
182a8     04 4E 05 F1 | 	add	fp, #4
182ac     A7 12 62 FC | 	wrlong	arg01, fp
182b0     04 4E 05 F1 | 	add	fp, #4
182b4     A7 1E 62 FC | 	wrlong	local01, fp
182b8     08 4E 85 F1 | 	sub	fp, #8
182bc     7C 28 BF FD | 	call	#_pop
182c0     FF 1E 02 F6 | 	mov	local01, result3
182c4     0C 4E 05 F1 | 	add	fp, #12
182c8     A7 FA 61 FC | 	wrlong	result1, fp
182cc     04 4E 05 F1 | 	add	fp, #4
182d0     A7 FC 61 FC | 	wrlong	result2, fp
182d4     04 4E 05 F1 | 	add	fp, #4
182d8     A7 1E 62 FC | 	wrlong	local01, fp
182dc     08 4E 85 F1 | 	sub	fp, #8
182e0     A7 12 02 F6 | 	mov	arg01, fp
182e4     0C 4E 85 F1 | 	sub	fp, #12
182e8     C8 BB BF FD | 	call	#_converttoint
182ec     FD 1E 02 F6 | 	mov	local01, result1
182f0     A7 12 02 F6 | 	mov	arg01, fp
182f4     BC BB BF FD | 	call	#_converttoint
182f8     0F FB 21 FC | 	wypin	result1, local01
182fc     A7 F0 03 F6 | 	mov	ptra, fp
18300     B2 00 A0 FD | 	call	#popregs_
18304                 | _do_wypin_ret
18304     2D 00 64 FD | 	ret
18308                 | 
18308                 | ' 
18308                 | ' sub do_position
18308                 | _do_position
18308     01 4A 05 F6 | 	mov	COUNT_, #1
1830c     A8 00 A0 FD | 	call	#pushregs_
18310     18 F0 07 F1 | 	add	ptra, #24
18314     24 28 BF FD | 	call	#_pop
18318     FD 14 02 F6 | 	mov	arg02, result1
1831c     FE 12 02 F6 | 	mov	arg01, result2
18320     FF 1E 02 F6 | 	mov	local01, result3
18324     A7 14 62 FC | 	wrlong	arg02, fp
18328     04 4E 05 F1 | 	add	fp, #4
1832c     A7 12 62 FC | 	wrlong	arg01, fp
18330     04 4E 05 F1 | 	add	fp, #4
18334     A7 1E 62 FC | 	wrlong	local01, fp
18338     08 4E 85 F1 | 	sub	fp, #8
1833c     FC 27 BF FD | 	call	#_pop
18340     FF 1E 02 F6 | 	mov	local01, result3
18344     0C 4E 05 F1 | 	add	fp, #12
18348     A7 FA 61 FC | 	wrlong	result1, fp
1834c     04 4E 05 F1 | 	add	fp, #4
18350     A7 FC 61 FC | 	wrlong	result2, fp
18354     04 4E 05 F1 | 	add	fp, #4
18358     A7 1E 62 FC | 	wrlong	local01, fp
1835c     08 4E 85 F1 | 	sub	fp, #8
18360     A7 12 02 F6 | 	mov	arg01, fp
18364     0C 4E 85 F1 | 	sub	fp, #12
18368     48 BB BF FD | 	call	#_converttoint
1836c     FD 1E 02 F6 | 	mov	local01, result1
18370     A7 12 02 F6 | 	mov	arg01, fp
18374     3C BB BF FD | 	call	#_converttoint
18378     FD 14 02 F6 | 	mov	arg02, result1
1837c     0F 13 02 F6 | 	mov	arg01, local01
18380     C0 5C B0 FD | 	call	#_hg010b_spin2_setcursorpos
18384     A7 F0 03 F6 | 	mov	ptra, fp
18388     B2 00 A0 FD | 	call	#popregs_
1838c                 | _do_position_ret
1838c     2D 00 64 FD | 	ret
18390                 | 
18390                 | ' 
18390                 | ' sub do_poke
18390                 | _do_poke
18390     01 4A 05 F6 | 	mov	COUNT_, #1
18394     A8 00 A0 FD | 	call	#pushregs_
18398     20 F0 07 F1 | 	add	ptra, #32
1839c     9C 27 BF FD | 	call	#_pop
183a0     FD 14 02 F6 | 	mov	arg02, result1
183a4     FE 12 02 F6 | 	mov	arg01, result2
183a8     FF 1E 02 F6 | 	mov	local01, result3
183ac     A7 14 62 FC | 	wrlong	arg02, fp
183b0     04 4E 05 F1 | 	add	fp, #4
183b4     A7 12 62 FC | 	wrlong	arg01, fp
183b8     04 4E 05 F1 | 	add	fp, #4
183bc     A7 1E 62 FC | 	wrlong	local01, fp
183c0     08 4E 85 F1 | 	sub	fp, #8
183c4     74 27 BF FD | 	call	#_pop
183c8     FF 1E 02 F6 | 	mov	local01, result3
183cc     0C 4E 05 F1 | 	add	fp, #12
183d0     A7 FA 61 FC | 	wrlong	result1, fp
183d4     04 4E 05 F1 | 	add	fp, #4
183d8     A7 FC 61 FC | 	wrlong	result2, fp
183dc     04 4E 05 F1 | 	add	fp, #4
183e0     A7 1E 62 FC | 	wrlong	local01, fp
183e4     08 4E 85 F1 | 	sub	fp, #8
183e8     A7 12 02 F6 | 	mov	arg01, fp
183ec     0C 4E 85 F1 | 	sub	fp, #12
183f0     C0 BA BF FD | 	call	#_converttoint
183f4     18 4E 05 F1 | 	add	fp, #24
183f8     A7 FA 61 FC | 	wrlong	result1, fp
183fc     18 4E 85 F1 | 	sub	fp, #24
18400     A7 12 02 F6 | 	mov	arg01, fp
18404     AC BA BF FD | 	call	#_converttoint
18408     1C 4E 05 F1 | 	add	fp, #28
1840c     A7 FA 61 FC | 	wrlong	result1, fp
18410                 | ' t1=pop() 'value
18410                 | ' t2=pop() 
18410                 | ' a=converttoint(t2) : v=converttoint(t1)
18410                 | ' if a<$80000 then poke a,v else pspoke a,v
18410     04 4E 85 F1 | 	sub	fp, #4
18414     A7 1E 02 FB | 	rdlong	local01, fp
18418     18 4E 85 F1 | 	sub	fp, #24
1841c     00 04 00 FF 
18420     00 1E 16 F2 | 	cmp	local01, ##524288 wc
18424     1C 00 90 3D |  if_ae	jmp	#LR__1950
18428     18 4E 05 F1 | 	add	fp, #24
1842c     A7 12 02 FB | 	rdlong	arg01, fp
18430     04 4E 05 F1 | 	add	fp, #4
18434     A7 14 02 FB | 	rdlong	arg02, fp
18438     1C 4E 85 F1 | 	sub	fp, #28
1843c     09 15 42 FC | 	wrbyte	arg02, arg01
18440     18 00 90 FD | 	jmp	#LR__1951
18444                 | LR__1950
18444     18 4E 05 F1 | 	add	fp, #24
18448     A7 12 02 FB | 	rdlong	arg01, fp
1844c     04 4E 05 F1 | 	add	fp, #4
18450     A7 14 02 FB | 	rdlong	arg02, fp
18454     1C 4E 85 F1 | 	sub	fp, #28
18458     EC 30 B0 FD | 	call	#_pspoke
1845c                 | LR__1951
1845c     A7 F0 03 F6 | 	mov	ptra, fp
18460     B2 00 A0 FD | 	call	#popregs_
18464                 | _do_poke_ret
18464     2D 00 64 FD | 	ret
18468                 | 
18468                 | ' 
18468                 | ' sub do_dpoke
18468                 | _do_dpoke
18468     01 4A 05 F6 | 	mov	COUNT_, #1
1846c     A8 00 A0 FD | 	call	#pushregs_
18470     20 F0 07 F1 | 	add	ptra, #32
18474     C4 26 BF FD | 	call	#_pop
18478     FD 14 02 F6 | 	mov	arg02, result1
1847c     FE 12 02 F6 | 	mov	arg01, result2
18480     FF 1E 02 F6 | 	mov	local01, result3
18484     A7 14 62 FC | 	wrlong	arg02, fp
18488     04 4E 05 F1 | 	add	fp, #4
1848c     A7 12 62 FC | 	wrlong	arg01, fp
18490     04 4E 05 F1 | 	add	fp, #4
18494     A7 1E 62 FC | 	wrlong	local01, fp
18498     08 4E 85 F1 | 	sub	fp, #8
1849c     9C 26 BF FD | 	call	#_pop
184a0     FF 1E 02 F6 | 	mov	local01, result3
184a4     0C 4E 05 F1 | 	add	fp, #12
184a8     A7 FA 61 FC | 	wrlong	result1, fp
184ac     04 4E 05 F1 | 	add	fp, #4
184b0     A7 FC 61 FC | 	wrlong	result2, fp
184b4     04 4E 05 F1 | 	add	fp, #4
184b8     A7 1E 62 FC | 	wrlong	local01, fp
184bc     08 4E 85 F1 | 	sub	fp, #8
184c0     A7 12 02 F6 | 	mov	arg01, fp
184c4     0C 4E 85 F1 | 	sub	fp, #12
184c8     E8 B9 BF FD | 	call	#_converttoint
184cc     18 4E 05 F1 | 	add	fp, #24
184d0     A7 FA 61 FC | 	wrlong	result1, fp
184d4     18 4E 85 F1 | 	sub	fp, #24
184d8     A7 12 02 F6 | 	mov	arg01, fp
184dc     D4 B9 BF FD | 	call	#_converttoint
184e0     1C 4E 05 F1 | 	add	fp, #28
184e4     A7 FA 61 FC | 	wrlong	result1, fp
184e8                 | ' t1=pop() 'value
184e8                 | ' t2=pop() 
184e8                 | ' a=converttoint(t2) : v=converttoint(t1)
184e8                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
184e8     04 4E 85 F1 | 	sub	fp, #4
184ec     A7 1E 02 FB | 	rdlong	local01, fp
184f0     18 4E 85 F1 | 	sub	fp, #24
184f4     00 04 00 FF 
184f8     00 1E 16 F2 | 	cmp	local01, ##524288 wc
184fc     1C 00 90 3D |  if_ae	jmp	#LR__1960
18500     18 4E 05 F1 | 	add	fp, #24
18504     A7 12 02 FB | 	rdlong	arg01, fp
18508     04 4E 05 F1 | 	add	fp, #4
1850c     A7 14 02 FB | 	rdlong	arg02, fp
18510     1C 4E 85 F1 | 	sub	fp, #28
18514     09 15 52 FC | 	wrword	arg02, arg01
18518     18 00 90 FD | 	jmp	#LR__1961
1851c                 | LR__1960
1851c     18 4E 05 F1 | 	add	fp, #24
18520     A7 12 02 FB | 	rdlong	arg01, fp
18524     04 4E 05 F1 | 	add	fp, #4
18528     A7 14 02 FB | 	rdlong	arg02, fp
1852c     1C 4E 85 F1 | 	sub	fp, #28
18530     CC 2F B0 FD | 	call	#_psdpoke
18534                 | LR__1961
18534     A7 F0 03 F6 | 	mov	ptra, fp
18538     B2 00 A0 FD | 	call	#popregs_
1853c                 | _do_dpoke_ret
1853c     2D 00 64 FD | 	ret
18540                 | 
18540                 | ' 
18540                 | ' sub do_lpoke
18540                 | _do_lpoke
18540     01 4A 05 F6 | 	mov	COUNT_, #1
18544     A8 00 A0 FD | 	call	#pushregs_
18548     20 F0 07 F1 | 	add	ptra, #32
1854c     EC 25 BF FD | 	call	#_pop
18550     FD 14 02 F6 | 	mov	arg02, result1
18554     FE 12 02 F6 | 	mov	arg01, result2
18558     FF 1E 02 F6 | 	mov	local01, result3
1855c     A7 14 62 FC | 	wrlong	arg02, fp
18560     04 4E 05 F1 | 	add	fp, #4
18564     A7 12 62 FC | 	wrlong	arg01, fp
18568     04 4E 05 F1 | 	add	fp, #4
1856c     A7 1E 62 FC | 	wrlong	local01, fp
18570     08 4E 85 F1 | 	sub	fp, #8
18574     C4 25 BF FD | 	call	#_pop
18578     FF 1E 02 F6 | 	mov	local01, result3
1857c     0C 4E 05 F1 | 	add	fp, #12
18580     A7 FA 61 FC | 	wrlong	result1, fp
18584     04 4E 05 F1 | 	add	fp, #4
18588     A7 FC 61 FC | 	wrlong	result2, fp
1858c     04 4E 05 F1 | 	add	fp, #4
18590     A7 1E 62 FC | 	wrlong	local01, fp
18594     08 4E 85 F1 | 	sub	fp, #8
18598     A7 12 02 F6 | 	mov	arg01, fp
1859c     0C 4E 85 F1 | 	sub	fp, #12
185a0     10 B9 BF FD | 	call	#_converttoint
185a4     18 4E 05 F1 | 	add	fp, #24
185a8     A7 FA 61 FC | 	wrlong	result1, fp
185ac     18 4E 85 F1 | 	sub	fp, #24
185b0     A7 12 02 F6 | 	mov	arg01, fp
185b4     FC B8 BF FD | 	call	#_converttoint
185b8     1C 4E 05 F1 | 	add	fp, #28
185bc     A7 FA 61 FC | 	wrlong	result1, fp
185c0                 | ' t1=pop() 'value
185c0                 | ' t2=pop() 
185c0                 | ' a=converttoint(t2) : v=converttoint(t1)
185c0                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
185c0     04 4E 85 F1 | 	sub	fp, #4
185c4     A7 1E 02 FB | 	rdlong	local01, fp
185c8     18 4E 85 F1 | 	sub	fp, #24
185cc     00 04 00 FF 
185d0     00 1E 16 F2 | 	cmp	local01, ##524288 wc
185d4     1C 00 90 3D |  if_ae	jmp	#LR__1970
185d8     18 4E 05 F1 | 	add	fp, #24
185dc     A7 12 02 FB | 	rdlong	arg01, fp
185e0     04 4E 05 F1 | 	add	fp, #4
185e4     A7 14 02 FB | 	rdlong	arg02, fp
185e8     1C 4E 85 F1 | 	sub	fp, #28
185ec     09 15 62 FC | 	wrlong	arg02, arg01
185f0     18 00 90 FD | 	jmp	#LR__1971
185f4                 | LR__1970
185f4     18 4E 05 F1 | 	add	fp, #24
185f8     A7 12 02 FB | 	rdlong	arg01, fp
185fc     04 4E 05 F1 | 	add	fp, #4
18600     A7 14 02 FB | 	rdlong	arg02, fp
18604     1C 4E 85 F1 | 	sub	fp, #28
18608     AC 2E B0 FD | 	call	#_pslpoke
1860c                 | LR__1971
1860c     A7 F0 03 F6 | 	mov	ptra, fp
18610     B2 00 A0 FD | 	call	#popregs_
18614                 | _do_lpoke_ret
18614     2D 00 64 FD | 	ret
18618                 | 
18618                 | ' 
18618                 | ' sub do_peek
18618                 | _do_peek
18618     00 4A 05 F6 | 	mov	COUNT_, #0
1861c     A8 00 A0 FD | 	call	#pushregs_
18620     14 F0 07 F1 | 	add	ptra, #20
18624     14 25 BF FD | 	call	#_pop
18628     A7 FA 61 FC | 	wrlong	result1, fp
1862c     04 4E 05 F1 | 	add	fp, #4
18630     A7 FC 61 FC | 	wrlong	result2, fp
18634     04 4E 05 F1 | 	add	fp, #4
18638     A7 FE 61 FC | 	wrlong	result3, fp
1863c     08 4E 85 F1 | 	sub	fp, #8
18640     A7 12 02 F6 | 	mov	arg01, fp
18644     6C B8 BF FD | 	call	#_converttoint
18648     0C 4E 05 F1 | 	add	fp, #12
1864c     A7 FA 61 FC | 	wrlong	result1, fp
18650                 | ' t1=pop()
18650                 | ' a=converttoint(t1)
18650                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
18650     0C 4E 85 F1 | 	sub	fp, #12
18654     00 04 00 FF 
18658     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1865c     1C 00 90 3D |  if_ae	jmp	#LR__1980
18660     0C 4E 05 F1 | 	add	fp, #12
18664     A7 12 02 FB | 	rdlong	arg01, fp
18668     09 FB C1 FA | 	rdbyte	result1, arg01
1866c     04 4E 05 F1 | 	add	fp, #4
18670     A7 FA 61 FC | 	wrlong	result1, fp
18674     10 4E 85 F1 | 	sub	fp, #16
18678     20 00 90 FD | 	jmp	#LR__1981
1867c                 | LR__1980
1867c     0C 4E 05 F1 | 	add	fp, #12
18680     A7 12 02 FB | 	rdlong	arg01, fp
18684     0C 4E 85 F1 | 	sub	fp, #12
18688     04 2F B0 FD | 	call	#_pspeek
1868c     FD FA E1 F8 | 	getbyte	result1, result1, #0
18690     10 4E 05 F1 | 	add	fp, #16
18694     A7 FA 61 FC | 	wrlong	result1, fp
18698     10 4E 85 F1 | 	sub	fp, #16
1869c                 | LR__1981
1869c     08 4E 05 F1 | 	add	fp, #8
186a0     A7 3A 68 FC | 	wrlong	#29, fp
186a4     08 4E 05 F1 | 	add	fp, #8
186a8     A7 12 02 FB | 	rdlong	arg01, fp
186ac     10 4E 85 F1 | 	sub	fp, #16
186b0     A7 12 62 FC | 	wrlong	arg01, fp
186b4     A7 12 02 F6 | 	mov	arg01, fp
186b8     18 25 BF FD | 	call	#_push
186bc     A7 F0 03 F6 | 	mov	ptra, fp
186c0     B2 00 A0 FD | 	call	#popregs_
186c4                 | _do_peek_ret
186c4     2D 00 64 FD | 	ret
186c8                 | 
186c8                 | ' 
186c8                 | ' sub do_dpeek
186c8                 | _do_dpeek
186c8     00 4A 05 F6 | 	mov	COUNT_, #0
186cc     A8 00 A0 FD | 	call	#pushregs_
186d0     14 F0 07 F1 | 	add	ptra, #20
186d4     64 24 BF FD | 	call	#_pop
186d8     A7 FA 61 FC | 	wrlong	result1, fp
186dc     04 4E 05 F1 | 	add	fp, #4
186e0     A7 FC 61 FC | 	wrlong	result2, fp
186e4     04 4E 05 F1 | 	add	fp, #4
186e8     A7 FE 61 FC | 	wrlong	result3, fp
186ec     08 4E 85 F1 | 	sub	fp, #8
186f0     A7 12 02 F6 | 	mov	arg01, fp
186f4     BC B7 BF FD | 	call	#_converttoint
186f8     0C 4E 05 F1 | 	add	fp, #12
186fc     A7 FA 61 FC | 	wrlong	result1, fp
18700                 | ' t1=pop()
18700                 | ' a=converttoint(t1)
18700                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
18700     0C 4E 85 F1 | 	sub	fp, #12
18704     00 04 00 FF 
18708     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1870c     1C 00 90 3D |  if_ae	jmp	#LR__1990
18710     0C 4E 05 F1 | 	add	fp, #12
18714     A7 12 02 FB | 	rdlong	arg01, fp
18718     09 FB E1 FA | 	rdword	result1, arg01
1871c     04 4E 05 F1 | 	add	fp, #4
18720     A7 FA 61 FC | 	wrlong	result1, fp
18724     10 4E 85 F1 | 	sub	fp, #16
18728     1C 00 90 FD | 	jmp	#LR__1991
1872c                 | LR__1990
1872c     0C 4E 05 F1 | 	add	fp, #12
18730     A7 12 02 FB | 	rdlong	arg01, fp
18734     0C 4E 85 F1 | 	sub	fp, #12
18738     04 2F B0 FD | 	call	#_psdpeek
1873c     10 4E 05 F1 | 	add	fp, #16
18740     A7 FA 61 FC | 	wrlong	result1, fp
18744     10 4E 85 F1 | 	sub	fp, #16
18748                 | LR__1991
18748     08 4E 05 F1 | 	add	fp, #8
1874c     A7 3A 68 FC | 	wrlong	#29, fp
18750     08 4E 05 F1 | 	add	fp, #8
18754     A7 12 02 FB | 	rdlong	arg01, fp
18758     10 4E 85 F1 | 	sub	fp, #16
1875c     A7 12 62 FC | 	wrlong	arg01, fp
18760     A7 12 02 F6 | 	mov	arg01, fp
18764     6C 24 BF FD | 	call	#_push
18768     A7 F0 03 F6 | 	mov	ptra, fp
1876c     B2 00 A0 FD | 	call	#popregs_
18770                 | _do_dpeek_ret
18770     2D 00 64 FD | 	ret
18774                 | 
18774                 | ' 
18774                 | ' 
18774                 | ' sub do_lpeek
18774                 | _do_lpeek
18774     00 4A 05 F6 | 	mov	COUNT_, #0
18778     A8 00 A0 FD | 	call	#pushregs_
1877c     14 F0 07 F1 | 	add	ptra, #20
18780     B8 23 BF FD | 	call	#_pop
18784     A7 FA 61 FC | 	wrlong	result1, fp
18788     04 4E 05 F1 | 	add	fp, #4
1878c     A7 FC 61 FC | 	wrlong	result2, fp
18790     04 4E 05 F1 | 	add	fp, #4
18794     A7 FE 61 FC | 	wrlong	result3, fp
18798     08 4E 85 F1 | 	sub	fp, #8
1879c     A7 12 02 F6 | 	mov	arg01, fp
187a0     10 B7 BF FD | 	call	#_converttoint
187a4     0C 4E 05 F1 | 	add	fp, #12
187a8     A7 FA 61 FC | 	wrlong	result1, fp
187ac                 | ' t1=pop()
187ac                 | ' a=converttoint(t1)
187ac                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
187ac     0C 4E 85 F1 | 	sub	fp, #12
187b0     00 04 00 FF 
187b4     00 FA 15 F2 | 	cmp	result1, ##524288 wc
187b8     1C 00 90 3D |  if_ae	jmp	#LR__2000
187bc     0C 4E 05 F1 | 	add	fp, #12
187c0     A7 12 02 FB | 	rdlong	arg01, fp
187c4     09 FB 01 FB | 	rdlong	result1, arg01
187c8     04 4E 05 F1 | 	add	fp, #4
187cc     A7 FA 61 FC | 	wrlong	result1, fp
187d0     10 4E 85 F1 | 	sub	fp, #16
187d4     1C 00 90 FD | 	jmp	#LR__2001
187d8                 | LR__2000
187d8     0C 4E 05 F1 | 	add	fp, #12
187dc     A7 12 02 FB | 	rdlong	arg01, fp
187e0     0C 4E 85 F1 | 	sub	fp, #12
187e4     00 2E B0 FD | 	call	#_pslpeek
187e8     10 4E 05 F1 | 	add	fp, #16
187ec     A7 FA 61 FC | 	wrlong	result1, fp
187f0     10 4E 85 F1 | 	sub	fp, #16
187f4                 | LR__2001
187f4     08 4E 05 F1 | 	add	fp, #8
187f8     A7 3A 68 FC | 	wrlong	#29, fp
187fc     08 4E 05 F1 | 	add	fp, #8
18800     A7 12 02 FB | 	rdlong	arg01, fp
18804     10 4E 85 F1 | 	sub	fp, #16
18808     A7 12 62 FC | 	wrlong	arg01, fp
1880c     A7 12 02 F6 | 	mov	arg01, fp
18810     C0 23 BF FD | 	call	#_push
18814     A7 F0 03 F6 | 	mov	ptra, fp
18818     B2 00 A0 FD | 	call	#popregs_
1881c                 | _do_lpeek_ret
1881c     2D 00 64 FD | 	ret
18820                 | 
18820                 | ' 
18820                 | ' sub do_fre
18820                 | _do_fre
18820     01 4A 05 F6 | 	mov	COUNT_, #1
18824     A8 00 A0 FD | 	call	#pushregs_
18828     0C F0 07 F1 | 	add	ptra, #12
1882c     59 00 00 FF 
18830     B8 E5 05 F1 | 	add	objptr, ##46008
18834     F2 12 02 FB | 	rdlong	arg01, objptr
18838     16 00 00 FF 
1883c     2C E5 85 F1 | 	sub	objptr, ##11564
18840     F2 1E 02 FB | 	rdlong	local01, objptr
18844     0F 13 82 F1 | 	sub	arg01, local01
18848     16 00 00 FF 
1884c     D4 E5 05 F1 | 	add	objptr, ##11732
18850     F2 12 62 FC | 	wrlong	arg01, objptr
18854     08 4E 05 F1 | 	add	fp, #8
18858     A7 3A 68 FC | 	wrlong	#29, fp
1885c     08 4E 85 F1 | 	sub	fp, #8
18860     F2 1E 02 FB | 	rdlong	local01, objptr
18864     5A 00 00 FF 
18868     60 E4 85 F1 | 	sub	objptr, ##46176
1886c     A7 1E 62 FC | 	wrlong	local01, fp
18870     A7 12 02 F6 | 	mov	arg01, fp
18874     5C 23 BF FD | 	call	#_push
18878     A7 F0 03 F6 | 	mov	ptra, fp
1887c     B2 00 A0 FD | 	call	#popregs_
18880                 | _do_fre_ret
18880     2D 00 64 FD | 	ret
18884                 | 
18884                 | ' 
18884                 | ' sub do_adr
18884                 | _do_adr
18884                 | _do_adr_ret
18884     2D 00 64 FD | 	ret
18888                 | 
18888                 | ' 
18888                 | ' sub do_getnotevalue
18888                 | _do_getnotevalue
18888     01 4A 05 F6 | 	mov	COUNT_, #1
1888c     A8 00 A0 FD | 	call	#pushregs_
18890     1C F0 07 F1 | 	add	ptra, #28
18894     A4 22 BF FD | 	call	#_pop
18898     FF 14 02 F6 | 	mov	arg02, result3
1889c     10 4E 05 F1 | 	add	fp, #16
188a0     A7 FA 61 FC | 	wrlong	result1, fp
188a4     04 4E 05 F1 | 	add	fp, #4
188a8     A7 FC 61 FC | 	wrlong	result2, fp
188ac     04 4E 05 F1 | 	add	fp, #4
188b0     A7 14 62 FC | 	wrlong	arg02, fp
188b4     08 4E 85 F1 | 	sub	fp, #8
188b8     A7 12 02 F6 | 	mov	arg01, fp
188bc     10 4E 85 F1 | 	sub	fp, #16
188c0     F0 B5 BF FD | 	call	#_converttoint
188c4     FD 14 52 F6 | 	abs	arg02, result1 wc
188c8     0C 14 16 FD | 	qdiv	arg02, #12
188cc     0C 4E 05 F1 | 	add	fp, #12
188d0     A7 FA 61 FC | 	wrlong	result1, fp
188d4     14 00 00 FF 
188d8     D8 E4 05 F1 | 	add	objptr, ##10456
188dc     08 4E 85 F1 | 	sub	fp, #8
188e0     19 14 62 FD | 	getqy	arg02
188e4     0A 15 82 F6 | 	negc	arg02, arg02
188e8     02 14 66 F0 | 	shl	arg02, #2
188ec     F2 14 02 F1 | 	add	arg02, objptr
188f0     0A 15 02 FB | 	rdlong	arg02, arg02
188f4     A7 14 62 FC | 	wrlong	arg02, fp
188f8     08 4E 05 F1 | 	add	fp, #8
188fc     A7 14 02 FB | 	rdlong	arg02, fp
18900     0A 15 52 F6 | 	abs	arg02, arg02 wc
18904     0C 14 16 FD | 	qdiv	arg02, #12
18908     0C 4E 85 F1 | 	sub	fp, #12
1890c     14 00 00 FF 
18910     D8 E4 85 F1 | 	sub	objptr, ##10456
18914     18 14 62 FD | 	getqx	arg02
18918     0A 13 82 F6 | 	negc	arg01, arg02
1891c     09 13 52 F6 | 	abs	arg01, arg01 wc
18920     1F 1E C6 C9 |  if_b	decod	local01, #31
18924     00 1E 06 36 |  if_ae	mov	local01, #0
18928     14 96 B0 FD | 	call	#__system___float_fromuns
1892c     0F FB 61 F5 | 	xor	result1, local01
18930     08 4E 05 F1 | 	add	fp, #8
18934     A7 FA 61 FC | 	wrlong	result1, fp
18938     FD 14 02 F6 | 	mov	arg02, result1
1893c     08 4E 85 F1 | 	sub	fp, #8
18940     1E 12 C6 F9 | 	decod	arg01, #30
18944     E0 A8 B0 FD | 	call	#__system____builtin_powf
18948     FD 12 02 F6 | 	mov	arg01, result1
1894c     04 4E 05 F1 | 	add	fp, #4
18950     A7 14 02 FB | 	rdlong	arg02, fp
18954     04 4E 85 F1 | 	sub	fp, #4
18958     E8 99 B0 FD | 	call	#__system___float_mul
1895c     A7 FA 61 FC | 	wrlong	result1, fp
18960     10 4E 05 F1 | 	add	fp, #16
18964     A7 FA 61 FC | 	wrlong	result1, fp
18968     08 4E 05 F1 | 	add	fp, #8
1896c     A7 3C 68 FC | 	wrlong	#30, fp
18970     08 4E 85 F1 | 	sub	fp, #8
18974     A7 12 02 F6 | 	mov	arg01, fp
18978     10 4E 85 F1 | 	sub	fp, #16
1897c     54 22 BF FD | 	call	#_push
18980     A7 F0 03 F6 | 	mov	ptra, fp
18984     B2 00 A0 FD | 	call	#popregs_
18988                 | _do_getnotevalue_ret
18988     2D 00 64 FD | 	ret
1898c                 | 
1898c                 | ' 
1898c                 | ' 
1898c                 | ' sub do_waitms
1898c                 | _do_waitms
1898c     01 4A 05 F6 | 	mov	COUNT_, #1
18990     A8 00 A0 FD | 	call	#pushregs_
18994     18 F0 07 F1 | 	add	ptra, #24
18998     A0 21 BF FD | 	call	#_pop
1899c     A7 FA 61 FC | 	wrlong	result1, fp
189a0     04 4E 05 F1 | 	add	fp, #4
189a4     A7 FC 61 FC | 	wrlong	result2, fp
189a8     04 4E 05 F1 | 	add	fp, #4
189ac     A7 FE 61 FC | 	wrlong	result3, fp
189b0                 | ' 
189b0                 | ' t1=pop() 'value
189b0                 | ' 
189b0                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
189b0     08 4E 85 F1 | 	sub	fp, #8
189b4     1C FE 0D F2 | 	cmp	result3, #28 wz
189b8     08 4E 05 51 |  if_ne	add	fp, #8
189bc     A7 12 02 5B |  if_ne	rdlong	arg01, fp
189c0     08 4E 85 51 |  if_ne	sub	fp, #8
189c4     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
189c8     A7 12 02 AB |  if_e	rdlong	arg01, fp
189cc     0C 4E 05 A1 |  if_e	add	fp, #12
189d0     A7 12 62 AC |  if_e	wrlong	arg01, fp
189d4     0C 4E 85 A1 |  if_e	sub	fp, #12
189d8     14 00 90 AD |  if_e	jmp	#LR__2010
189dc     A7 12 02 F6 | 	mov	arg01, fp
189e0     D0 B4 BF FD | 	call	#_converttoint
189e4     0C 4E 05 F1 | 	add	fp, #12
189e8     A7 FA 61 FC | 	wrlong	result1, fp
189ec     0C 4E 85 F1 | 	sub	fp, #12
189f0                 | LR__2010
189f0                 | ' if t<0 then return
189f0     0C 4E 05 F1 | 	add	fp, #12
189f4     A7 12 02 FB | 	rdlong	arg01, fp
189f8     0C 4E 85 F1 | 	sub	fp, #12
189fc     00 12 56 F2 | 	cmps	arg01, #0 wc
18a00     B8 00 90 CD |  if_b	jmp	#LR__2015
18a04                 | ' if t < 5000 then 
18a04     0C 4E 05 F1 | 	add	fp, #12
18a08     A7 12 02 FB | 	rdlong	arg01, fp
18a0c     0C 4E 85 F1 | 	sub	fp, #12
18a10     09 00 00 FF 
18a14     88 13 56 F2 | 	cmps	arg01, ##5000 wc
18a18     14 00 90 3D |  if_ae	jmp	#LR__2011
18a1c     0C 4E 05 F1 | 	add	fp, #12
18a20     A7 12 02 FB | 	rdlong	arg01, fp
18a24     0C 4E 85 F1 | 	sub	fp, #12
18a28     C4 70 B0 FD | 	call	#__system___waitms
18a2c     8C 00 90 FD | 	jmp	#LR__2014
18a30                 | LR__2011
18a30     10 4E 05 F1 | 	add	fp, #16
18a34     A7 02 68 FC | 	wrlong	#1, fp
18a38     04 4E 85 F1 | 	sub	fp, #4
18a3c     A7 12 02 FB | 	rdlong	arg01, fp
18a40     09 13 52 F6 | 	abs	arg01, arg01 wc
18a44     09 00 00 FF 
18a48     88 13 16 FD | 	qdiv	arg01, ##5000
18a4c                 | '   for i=1 to t/5000
18a4c     0C 4E 85 F1 | 	sub	fp, #12
18a50     18 1E 62 FD | 	getqx	local01
18a54     0F 1F 82 F6 | 	negc	local01, local01
18a58     01 1E 06 F1 | 	add	local01, #1
18a5c                 | LR__2012
18a5c     10 4E 05 F1 | 	add	fp, #16
18a60     A7 12 02 FB | 	rdlong	arg01, fp
18a64     10 4E 85 F1 | 	sub	fp, #16
18a68     0F 13 52 F2 | 	cmps	arg01, local01 wc
18a6c     28 00 90 3D |  if_ae	jmp	#LR__2013
18a70     0C 4E 05 F1 | 	add	fp, #12
18a74     A7 12 02 FB | 	rdlong	arg01, fp
18a78     0C 4E 85 F1 | 	sub	fp, #12
18a7c     70 70 B0 FD | 	call	#__system___waitms
18a80     10 4E 05 F1 | 	add	fp, #16
18a84     A7 12 02 FB | 	rdlong	arg01, fp
18a88     01 12 06 F1 | 	add	arg01, #1
18a8c     A7 12 62 FC | 	wrlong	arg01, fp
18a90     10 4E 85 F1 | 	sub	fp, #16
18a94     C4 FF 9F FD | 	jmp	#LR__2012
18a98                 | LR__2013
18a98     0C 4E 05 F1 | 	add	fp, #12
18a9c     A7 1E 02 FB | 	rdlong	local01, fp
18aa0     0F 1F 52 F6 | 	abs	local01, local01 wc
18aa4     09 00 00 FF 
18aa8     88 1F 16 FD | 	qdiv	local01, ##5000
18aac     0C 4E 85 F1 | 	sub	fp, #12
18ab0     19 1E 62 FD | 	getqy	local01
18ab4     0F 13 82 F6 | 	negc	arg01, local01
18ab8     34 70 B0 FD | 	call	#__system___waitms
18abc                 | LR__2014
18abc                 | LR__2015
18abc     A7 F0 03 F6 | 	mov	ptra, fp
18ac0     B2 00 A0 FD | 	call	#popregs_
18ac4                 | _do_waitms_ret
18ac4     2D 00 64 FD | 	ret
18ac8                 | 
18ac8                 | ' 
18ac8                 | ' sub do_waitvbl
18ac8                 | _do_waitvbl
18ac8     01 12 06 F6 | 	mov	arg01, #1
18acc     14 56 B0 FD | 	call	#_hg010b_spin2_waitvbl
18ad0                 | _do_waitvbl_ret
18ad0     2D 00 64 FD | 	ret
18ad4                 | 
18ad4                 | ' 
18ad4                 | ' sub do_waitclock
18ad4                 | _do_waitclock
18ad4     59 00 00 FF 
18ad8     B4 E5 05 F1 | 	add	objptr, ##46004
18adc     F2 00 02 FB | 	rdlong	_var01, objptr
18ae0                 | ' c=hkcnt
18ae0                 | ' do: loop until hkcnt<>c
18ae0                 | LR__2020
18ae0     F2 02 02 FB | 	rdlong	_var02, objptr
18ae4     00 03 0A F2 | 	cmp	_var02, _var01 wz
18ae8     F4 FF 9F AD |  if_e	jmp	#LR__2020
18aec     59 00 00 FF 
18af0     B4 E5 85 F1 | 	sub	objptr, ##46004
18af4                 | _do_waitclock_ret
18af4     2D 00 64 FD | 	ret
18af8                 | 
18af8                 | ' 
18af8                 | ' sub do_dir
18af8                 | _do_dir
18af8     05 4A 05 F6 | 	mov	COUNT_, #5
18afc     A8 00 A0 FD | 	call	#pushregs_
18b00     7A 01 00 FF 
18b04     B4 13 06 F6 | 	mov	arg01, ##@LR__5266
18b08     7C 73 B0 FD | 	call	#__system___chdir
18b0c                 | ' chdir("/sd/bas")       ' set working directory
18b0c                 | ' print "Working directory: "; currentdir$ 
18b0c     00 12 06 F6 | 	mov	arg01, #0
18b10     80 C6 B0 FD | 	call	#__system___getiolock_0508
18b14     FD 12 02 F6 | 	mov	arg01, result1
18b18     E0 6C B0 FD | 	call	#__system___lockmem
18b1c     7A 01 00 FF 
18b20     BC 15 06 F6 | 	mov	arg02, ##@LR__5267
18b24     00 12 06 F6 | 	mov	arg01, #0
18b28     00 16 06 F6 | 	mov	arg03, #0
18b2c     C0 79 B0 FD | 	call	#__system___basic_print_string
18b30     52 00 00 FF 
18b34     C8 E4 05 F1 | 	add	objptr, ##42184
18b38     F2 14 02 FB | 	rdlong	arg02, objptr
18b3c     52 00 00 FF 
18b40     C8 E4 85 F1 | 	sub	objptr, ##42184
18b44     00 12 06 F6 | 	mov	arg01, #0
18b48     00 16 06 F6 | 	mov	arg03, #0
18b4c     A0 79 B0 FD | 	call	#__system___basic_print_string
18b50     00 12 06 F6 | 	mov	arg01, #0
18b54     0A 14 06 F6 | 	mov	arg02, #10
18b58     00 16 06 F6 | 	mov	arg03, #0
18b5c     38 79 B0 FD | 	call	#__system___basic_print_char
18b60     00 12 06 F6 | 	mov	arg01, #0
18b64     2C C6 B0 FD | 	call	#__system___getiolock_0508
18b68     FD 00 68 FC | 	wrlong	#0, result1
18b6c     00 1E 06 F6 | 	mov	local01, #0
18b70     7A 01 00 FF 
18b74     D0 13 06 F6 | 	mov	arg01, ##@LR__5268
18b78     10 14 06 F6 | 	mov	arg02, #16
18b7c     4C C7 B0 FD | 	call	#__system___basic_dir
18b80     FD 20 02 F6 | 	mov	local02, result1
18b84                 | ' px=0:
18b84                 | ' filename=dir$("*", fbDirectory)
18b84                 | ' while filename <> "" and filename <> nil
18b84                 | LR__2030
18b84     00 22 06 F6 | 	mov	local03, #0
18b88     7A 01 00 FF 
18b8c     D2 15 06 F6 | 	mov	arg02, ##@LR__5269
18b90     10 13 02 F6 | 	mov	arg01, local02
18b94     8C 6C B0 FD | 	call	#__system___string_cmp
18b98     00 FA 0D F2 | 	cmp	result1, #0 wz
18b9c     00 22 26 56 |  if_ne	not	local03, #0
18ba0     00 24 06 F6 | 	mov	local04, #0
18ba4     10 13 02 F6 | 	mov	arg01, local02
18ba8     00 14 06 F6 | 	mov	arg02, #0
18bac     74 6C B0 FD | 	call	#__system___string_cmp
18bb0     00 FA 0D F2 | 	cmp	result1, #0 wz
18bb4     00 24 26 56 |  if_ne	not	local04, #0
18bb8     12 23 CA F7 | 	test	local03, local04 wz
18bbc     9C 00 90 AD |  if_e	jmp	#LR__2032
18bc0                 | '   print "[dir] ";filename; : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
18bc0     00 12 06 F6 | 	mov	arg01, #0
18bc4     CC C5 B0 FD | 	call	#__system___getiolock_0508
18bc8     FD 12 02 F6 | 	mov	arg01, result1
18bcc     2C 6C B0 FD | 	call	#__system___lockmem
18bd0     7A 01 00 FF 
18bd4     D3 15 06 F6 | 	mov	arg02, ##@LR__5270
18bd8     00 12 06 F6 | 	mov	arg01, #0
18bdc     00 16 06 F6 | 	mov	arg03, #0
18be0     0C 79 B0 FD | 	call	#__system___basic_print_string
18be4     00 26 06 F6 | 	mov	local05, #0
18be8     00 12 06 F6 | 	mov	arg01, #0
18bec     10 15 02 F6 | 	mov	arg02, local02
18bf0     00 16 06 F6 | 	mov	arg03, #0
18bf4     F8 78 B0 FD | 	call	#__system___basic_print_string
18bf8     00 12 06 F6 | 	mov	arg01, #0
18bfc     94 C5 B0 FD | 	call	#__system___getiolock_0508
18c00     FD 00 68 FC | 	wrlong	#0, result1
18c04     40 1E 06 F1 | 	add	local01, #64
18c08     0F 13 02 F6 | 	mov	arg01, local01
18c0c     70 54 B0 FD | 	call	#_hg010b_spin2_setcursorx
18c10     00 1F 56 F2 | 	cmps	local01, #256 wc
18c14     30 00 90 CD |  if_b	jmp	#LR__2031
18c18     00 1E 06 F6 | 	mov	local01, #0
18c1c     00 12 06 F6 | 	mov	arg01, #0
18c20     70 C5 B0 FD | 	call	#__system___getiolock_0508
18c24     FD 12 02 F6 | 	mov	arg01, result1
18c28     D0 6B B0 FD | 	call	#__system___lockmem
18c2c     00 12 06 F6 | 	mov	arg01, #0
18c30     0A 14 06 F6 | 	mov	arg02, #10
18c34     00 16 06 F6 | 	mov	arg03, #0
18c38     5C 78 B0 FD | 	call	#__system___basic_print_char
18c3c     00 12 06 F6 | 	mov	arg01, #0
18c40     50 C5 B0 FD | 	call	#__system___getiolock_0508
18c44     FD 00 68 FC | 	wrlong	#0, result1
18c48                 | LR__2031
18c48     00 12 06 F6 | 	mov	arg01, #0
18c4c     00 14 06 F6 | 	mov	arg02, #0
18c50     78 C6 B0 FD | 	call	#__system___basic_dir
18c54     FD 20 02 F6 | 	mov	local02, result1
18c58     28 FF 9F FD | 	jmp	#LR__2030
18c5c                 | LR__2032
18c5c                 | ' print
18c5c     00 12 06 F6 | 	mov	arg01, #0
18c60     30 C5 B0 FD | 	call	#__system___getiolock_0508
18c64     FD 12 02 F6 | 	mov	arg01, result1
18c68     90 6B B0 FD | 	call	#__system___lockmem
18c6c     00 12 06 F6 | 	mov	arg01, #0
18c70     0A 14 06 F6 | 	mov	arg02, #10
18c74     00 16 06 F6 | 	mov	arg03, #0
18c78     1C 78 B0 FD | 	call	#__system___basic_print_char
18c7c     00 12 06 F6 | 	mov	arg01, #0
18c80     10 C5 B0 FD | 	call	#__system___getiolock_0508
18c84     FD 00 68 FC | 	wrlong	#0, result1
18c88     00 1E 06 F6 | 	mov	local01, #0
18c8c                 | ' return cursor_y
18c8c     7A 01 00 FF 
18c90     DA 13 06 F6 | 	mov	arg01, ##@LR__5271
18c94     21 14 06 F6 | 	mov	arg02, #33
18c98     30 C6 B0 FD | 	call	#__system___basic_dir
18c9c     FD 20 02 F6 | 	mov	local02, result1
18ca0                 | ' px=0: py=v.getcursory()
18ca0                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
18ca0                 | ' do while filename <> "" and filename <> nil
18ca0                 | LR__2033
18ca0     00 22 06 F6 | 	mov	local03, #0
18ca4     7A 01 00 FF 
18ca8     DC 15 06 F6 | 	mov	arg02, ##@LR__5272
18cac     10 13 02 F6 | 	mov	arg01, local02
18cb0     70 6B B0 FD | 	call	#__system___string_cmp
18cb4     00 FA 0D F2 | 	cmp	result1, #0 wz
18cb8     00 22 26 56 |  if_ne	not	local03, #0
18cbc     00 24 06 F6 | 	mov	local04, #0
18cc0     10 13 02 F6 | 	mov	arg01, local02
18cc4     00 14 06 F6 | 	mov	arg02, #0
18cc8     58 6B B0 FD | 	call	#__system___string_cmp
18ccc     00 FA 0D F2 | 	cmp	result1, #0 wz
18cd0     00 24 26 56 |  if_ne	not	local04, #0
18cd4     12 23 CA F7 | 	test	local03, local04 wz
18cd8     80 01 90 AD |  if_e	jmp	#LR__2038
18cdc                 | '   print filename; : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
18cdc     00 12 06 F6 | 	mov	arg01, #0
18ce0     B0 C4 B0 FD | 	call	#__system___getiolock_0508
18ce4     FD 12 02 F6 | 	mov	arg01, result1
18ce8     10 6B B0 FD | 	call	#__system___lockmem
18cec     00 12 06 F6 | 	mov	arg01, #0
18cf0     10 15 02 F6 | 	mov	arg02, local02
18cf4     00 16 06 F6 | 	mov	arg03, #0
18cf8     F4 77 B0 FD | 	call	#__system___basic_print_string
18cfc     00 12 06 F6 | 	mov	arg01, #0
18d00     90 C4 B0 FD | 	call	#__system___getiolock_0508
18d04     FD 00 68 FC | 	wrlong	#0, result1
18d08     40 1E 06 F1 | 	add	local01, #64
18d0c     0F 13 02 F6 | 	mov	arg01, local01
18d10     6C 53 B0 FD | 	call	#_hg010b_spin2_setcursorx
18d14     00 1F 56 F2 | 	cmps	local01, #256 wc
18d18     30 00 90 CD |  if_b	jmp	#LR__2034
18d1c     00 1E 06 F6 | 	mov	local01, #0
18d20     00 12 06 F6 | 	mov	arg01, #0
18d24     6C C4 B0 FD | 	call	#__system___getiolock_0508
18d28     FD 12 02 F6 | 	mov	arg01, result1
18d2c     CC 6A B0 FD | 	call	#__system___lockmem
18d30     00 12 06 F6 | 	mov	arg01, #0
18d34     0A 14 06 F6 | 	mov	arg02, #10
18d38     00 16 06 F6 | 	mov	arg03, #0
18d3c     58 77 B0 FD | 	call	#__system___basic_print_char
18d40     00 12 06 F6 | 	mov	arg01, #0
18d44     4C C4 B0 FD | 	call	#__system___getiolock_0508
18d48     FD 00 68 FC | 	wrlong	#0, result1
18d4c                 | LR__2034
18d4c     00 12 06 F6 | 	mov	arg01, #0
18d50     00 14 06 F6 | 	mov	arg02, #0
18d54     74 C5 B0 FD | 	call	#__system___basic_dir
18d58     FD 20 02 F6 | 	mov	local02, result1
18d5c                 | '   filename = dir$()      ' continue scan
18d5c                 | '     if v.getcursory()=34 then    'bug, after first break, cursory is always 35
18d5c                 | ' return cursor_y
18d5c     3E E4 05 F1 | 	add	objptr, #62
18d60     F2 FA C1 FA | 	rdbyte	result1, objptr
18d64     3E E4 85 F1 | 	sub	objptr, #62
18d68     22 FA 0D F2 | 	cmp	result1, #34 wz
18d6c     30 FF 9F 5D |  if_ne	jmp	#LR__2033
18d70                 | '     print "-----more, press any key";
18d70     00 12 06 F6 | 	mov	arg01, #0
18d74     1C C4 B0 FD | 	call	#__system___getiolock_0508
18d78     FD 12 02 F6 | 	mov	arg01, result1
18d7c     7C 6A B0 FD | 	call	#__system___lockmem
18d80     7A 01 00 FF 
18d84     DD 15 06 F6 | 	mov	arg02, ##@LR__5273
18d88     00 12 06 F6 | 	mov	arg01, #0
18d8c     00 16 06 F6 | 	mov	arg03, #0
18d90     5C 77 B0 FD | 	call	#__system___basic_print_string
18d94     00 12 06 F6 | 	mov	arg01, #0
18d98     F8 C3 B0 FD | 	call	#__system___getiolock_0508
18d9c     FD 00 68 FC | 	wrlong	#0, result1
18da0                 | '     do 
18da0                 | LR__2035
18da0     44 62 B0 FD | 	call	#_usbnew_spin2_get_key
18da4     00 FA 0D F2 | 	cmp	result1, #0 wz
18da8     F4 FF 9F 5D |  if_ne	jmp	#LR__2035
18dac                 | '     do
18dac                 | LR__2036
18dac     38 62 B0 FD | 	call	#_usbnew_spin2_get_key
18db0     00 FA 0D F2 | 	cmp	result1, #0 wz
18db4     F4 FF 9F AD |  if_e	jmp	#LR__2036
18db8                 | '       if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
18db8     58 00 00 FF 
18dbc     20 E5 05 F1 | 	add	objptr, ##45344
18dc0     F2 22 02 FB | 	rdlong	local03, objptr
18dc4     58 00 00 FF 
18dc8     20 E5 85 F1 | 	sub	objptr, ##45344
18dcc     01 22 0E F2 | 	cmp	local03, #1 wz
18dd0     3C 00 90 5D |  if_ne	jmp	#LR__2037
18dd4     59 00 00 FF 
18dd8     C4 E5 05 F1 | 	add	objptr, ##46020
18ddc     F2 14 02 FB | 	rdlong	arg02, objptr
18de0     04 E4 85 F1 | 	sub	objptr, #4
18de4     F2 1A 02 FB | 	rdlong	arg05, objptr
18de8     07 12 06 F6 | 	mov	arg01, #7
18dec     56 00 00 FF 
18df0     44 16 06 F6 | 	mov	arg03, ##44100
18df4     0C 18 C6 F9 | 	decod	arg04, #12
18df8     01 1C 66 F6 | 	neg	arg06, #1
18dfc     4E 00 00 FF 
18e00     F4 E4 85 F1 | 	sub	objptr, ##40180
18e04     84 65 B0 FD | 	call	#_audio096_spin2_play
18e08     0B 00 00 FF 
18e0c     CC E4 85 F1 | 	sub	objptr, ##5836
18e10                 | LR__2037
18e10     00 12 06 F6 | 	mov	arg01, #0
18e14     23 14 06 F6 | 	mov	arg02, #35
18e18     28 52 B0 FD | 	call	#_hg010b_spin2_setcursorpos
18e1c                 | '     position 0,35: print "                             ";: position 4,35  
18e1c     00 12 06 F6 | 	mov	arg01, #0
18e20     70 C3 B0 FD | 	call	#__system___getiolock_0508
18e24     FD 12 02 F6 | 	mov	arg01, result1
18e28     D0 69 B0 FD | 	call	#__system___lockmem
18e2c     7A 01 00 FF 
18e30     F6 15 06 F6 | 	mov	arg02, ##@LR__5274
18e34     00 12 06 F6 | 	mov	arg01, #0
18e38     00 16 06 F6 | 	mov	arg03, #0
18e3c     B0 76 B0 FD | 	call	#__system___basic_print_string
18e40     00 12 06 F6 | 	mov	arg01, #0
18e44     4C C3 B0 FD | 	call	#__system___getiolock_0508
18e48     FD 00 68 FC | 	wrlong	#0, result1
18e4c     04 12 06 F6 | 	mov	arg01, #4
18e50     23 14 06 F6 | 	mov	arg02, #35
18e54     EC 51 B0 FD | 	call	#_hg010b_spin2_setcursorpos
18e58     44 FE 9F FD | 	jmp	#LR__2033
18e5c                 | LR__2038
18e5c     A7 F0 03 F6 | 	mov	ptra, fp
18e60     B2 00 A0 FD | 	call	#popregs_
18e64                 | _do_dir_ret
18e64     2D 00 64 FD | 	ret
18e68                 | 
18e68                 | ' 
18e68                 | ' sub do_if
18e68                 | _do_if
18e68     05 4A 05 F6 | 	mov	COUNT_, #5
18e6c     A8 00 A0 FD | 	call	#pushregs_
18e70     C8 1C BF FD | 	call	#_pop
18e74     FD 1E 0A F6 | 	mov	local01, result1 wz
18e78     FE 20 02 F6 | 	mov	local02, result2
18e7c     FF 22 02 F6 | 	mov	local03, result3
18e80                 | ' t1=pop()
18e80                 | ' ' if uresult=0, jump over else
18e80                 | ' if t1.result.uresult = 0 then 
18e80     BC 00 90 5D |  if_ne	jmp	#LR__2042
18e84                 | '   for i=lineptr_e to lineptr-1
18e84     4A 00 00 FF 
18e88     B0 E4 05 F1 | 	add	objptr, ##38064
18e8c     F2 24 02 FB | 	rdlong	local04, objptr
18e90     04 E4 85 F1 | 	sub	objptr, #4
18e94     F2 26 02 FB | 	rdlong	local05, objptr
18e98     4A 00 00 FF 
18e9c     AC E4 85 F1 | 	sub	objptr, ##38060
18ea0                 | LR__2040
18ea0     13 25 52 F2 | 	cmps	local04, local05 wc
18ea4     78 00 90 3D |  if_ae	jmp	#LR__2041
18ea8     12 FF 01 F6 | 	mov	result3, local04
18eac     01 FE 65 F0 | 	shl	result3, #1
18eb0     12 FF 01 F1 | 	add	result3, local04
18eb4     02 FE 65 F0 | 	shl	result3, #2
18eb8     47 00 00 FF 
18ebc     AC E4 05 F1 | 	add	objptr, ##36524
18ec0     F2 FE 01 F1 | 	add	result3, objptr
18ec4     FF 1E 02 FB | 	rdlong	local01, result3
18ec8     04 FE 05 F1 | 	add	result3, #4
18ecc     FF FC 01 FB | 	rdlong	result2, result3
18ed0     12 FF 01 F6 | 	mov	result3, local04
18ed4     01 FE 65 F0 | 	shl	result3, #1
18ed8     12 FF 01 F1 | 	add	result3, local04
18edc     02 FE 65 F0 | 	shl	result3, #2
18ee0     F2 FE 01 F1 | 	add	result3, objptr
18ee4     08 FE 05 F1 | 	add	result3, #8
18ee8     FF FE 01 FB | 	rdlong	result3, result3
18eec     FE 20 02 F6 | 	mov	local02, result2
18ef0     FF 22 02 F6 | 	mov	local03, result3
18ef4                 | '     t1=compiledline(i)
18ef4                 | '     if t1.result_type=token_else then lineptr_e=i : return
18ef4     5A 22 0E F2 | 	cmp	local03, #90 wz
18ef8     47 00 00 FF 
18efc     AC E4 85 F1 | 	sub	objptr, ##36524
18f00     4A 00 00 AF 
18f04     B0 E4 05 A1 |  if_e	add	objptr, ##38064
18f08     F2 24 62 AC |  if_e	wrlong	local04, objptr
18f0c     4A 00 00 AF 
18f10     B0 E4 85 A1 |  if_e	sub	objptr, ##38064
18f14     28 00 90 AD |  if_e	jmp	#LR__2043
18f18     01 24 06 F1 | 	add	local04, #1
18f1c     80 FF 9F FD | 	jmp	#LR__2040
18f20                 | LR__2041
18f20     4A 00 00 FF 
18f24     AC E4 05 F1 | 	add	objptr, ##38060
18f28     F2 26 02 FB | 	rdlong	local05, objptr
18f2c     01 26 86 F1 | 	sub	local05, #1
18f30     04 E4 05 F1 | 	add	objptr, #4
18f34     F2 26 62 FC | 	wrlong	local05, objptr
18f38     4A 00 00 FF 
18f3c     B0 E4 85 F1 | 	sub	objptr, ##38064
18f40                 | LR__2042
18f40                 | LR__2043
18f40     A7 F0 03 F6 | 	mov	ptra, fp
18f44     B2 00 A0 FD | 	call	#popregs_
18f48                 | _do_if_ret
18f48     2D 00 64 FD | 	ret
18f4c                 | 
18f4c                 | ' 
18f4c                 | ' sub do_else
18f4c                 | _do_else
18f4c     4A 00 00 FF 
18f50     AC E4 05 F1 | 	add	objptr, ##38060
18f54     F2 00 02 FB | 	rdlong	_var01, objptr
18f58     01 00 86 F1 | 	sub	_var01, #1
18f5c     04 E4 05 F1 | 	add	objptr, #4
18f60     F2 00 62 FC | 	wrlong	_var01, objptr
18f64     4A 00 00 FF 
18f68     B0 E4 85 F1 | 	sub	objptr, ##38064
18f6c                 | _do_else_ret
18f6c     2D 00 64 FD | 	ret
18f70                 | 
18f70                 | ' 
18f70                 | ' sub do_rad
18f70                 | _do_rad
18f70     59 00 00 FF 
18f74     C8 E5 05 F1 | 	add	objptr, ##46024
18f78     00 C0 9F FF 
18f7c     F2 00 68 FC | 	wrlong	##1065353216, objptr
18f80     04 E4 05 F1 | 	add	objptr, #4
18f84     00 C0 9F FF 
18f88     F2 00 68 FC | 	wrlong	##1065353216, objptr
18f8c     59 00 00 FF 
18f90     CC E5 85 F1 | 	sub	objptr, ##46028
18f94                 | _do_rad_ret
18f94     2D 00 64 FD | 	ret
18f98                 | 
18f98                 | ' 
18f98                 | ' sub do_deg
18f98                 | _do_deg
18f98     59 00 00 FF 
18f9c     C8 E5 05 F1 | 	add	objptr, ##46024
18fa0     7D 47 9E FF 
18fa4     F2 6A 68 FC | 	wrlong	##1016003125, objptr
18fa8     04 E4 05 F1 | 	add	objptr, #4
18fac     97 32 A1 FF 
18fb0     F2 C2 69 FC | 	wrlong	##1113927393, objptr
18fb4     59 00 00 FF 
18fb8     CC E5 85 F1 | 	sub	objptr, ##46028
18fbc                 | _do_deg_ret
18fbc     2D 00 64 FD | 	ret
18fc0                 | 
18fc0                 | ' 
18fc0                 | ' sub do_int
18fc0                 | _do_int
18fc0     00 4A 05 F6 | 	mov	COUNT_, #0
18fc4     A8 00 A0 FD | 	call	#pushregs_
18fc8     0C F0 07 F1 | 	add	ptra, #12
18fcc     6C 1B BF FD | 	call	#_pop
18fd0     A7 FA 61 FC | 	wrlong	result1, fp
18fd4     04 4E 05 F1 | 	add	fp, #4
18fd8     A7 FC 61 FC | 	wrlong	result2, fp
18fdc     04 4E 05 F1 | 	add	fp, #4
18fe0     A7 FE 61 FC | 	wrlong	result3, fp
18fe4     08 4E 85 F1 | 	sub	fp, #8
18fe8     A7 12 02 F6 | 	mov	arg01, fp
18fec     C4 AE BF FD | 	call	#_converttoint
18ff0     A7 FA 61 FC | 	wrlong	result1, fp
18ff4     08 4E 05 F1 | 	add	fp, #8
18ff8     A7 38 68 FC | 	wrlong	#28, fp
18ffc     08 4E 85 F1 | 	sub	fp, #8
19000     A7 12 02 F6 | 	mov	arg01, fp
19004     CC 1B BF FD | 	call	#_push
19008     A7 F0 03 F6 | 	mov	ptra, fp
1900c     B2 00 A0 FD | 	call	#popregs_
19010                 | _do_int_ret
19010     2D 00 64 FD | 	ret
19014                 | 
19014                 | ' 
19014                 | ' sub do_nothing
19014                 | _do_nothing
19014                 | _do_nothing_ret
19014     2D 00 64 FD | 	ret
19018                 | 
19018                 | ' 
19018                 | ' sub do_brun
19018                 | _do_brun
19018     08 4A 05 F6 | 	mov	COUNT_, #8
1901c     A8 00 A0 FD | 	call	#pushregs_
19020     18 1B BF FD | 	call	#_pop
19024     FE 1A 02 F6 | 	mov	arg05, result2
19028     FF 18 02 F6 | 	mov	arg04, result3
1902c     FD 1E 02 F6 | 	mov	local01, result1
19030     0D 21 02 F6 | 	mov	local02, arg05
19034     0C 23 02 F6 | 	mov	local03, arg04
19038                 | ' 
19038                 | ' t1=pop() 
19038                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
19038     2B 22 0E F2 | 	cmp	local03, #43 wz
1903c     10 00 90 5D |  if_ne	jmp	#LR__2050
19040     0F 13 02 F6 | 	mov	arg01, local01
19044     48 66 BF FD | 	call	#_convertstring
19048     FD 1E 02 F6 | 	mov	local01, result1
1904c     1F 22 06 F6 | 	mov	local03, #31
19050                 | LR__2050
19050                 | ' if t1.result_type=result_string then
19050     1F 22 0E F2 | 	cmp	local03, #31 wz
19054     EC 01 90 5D |  if_ne	jmp	#LR__2054
19058     0F 25 02 F6 | 	mov	local04, local01
1905c                 | '   filename=t1.result.sresult
1905c                 | '   if left$(filename,1)="/" then 
1905c     12 13 02 F6 | 	mov	arg01, local04
19060     01 14 06 F6 | 	mov	arg02, #1
19064     A4 87 B0 FD | 	call	#__system__Left_S
19068     FD 12 02 F6 | 	mov	arg01, result1
1906c     7B 01 00 FF 
19070     14 14 06 F6 | 	mov	arg02, ##@LR__5275
19074     AC 67 B0 FD | 	call	#__system___string_cmp
19078     00 FA 0D F2 | 	cmp	result1, #0 wz
1907c     12 27 02 A6 |  if_e	mov	local05, local04
19080     14 00 90 AD |  if_e	jmp	#LR__2051
19084     7B 01 00 FF 
19088     16 12 06 F6 | 	mov	arg01, ##@LR__5276
1908c     12 15 02 F6 | 	mov	arg02, local04
19090     C4 67 B0 FD | 	call	#__system___string_concat
19094     FD 26 02 F6 | 	mov	local05, result1
19098                 | LR__2051
19098                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
19098                 | '   open fullfilename for input as #9
19098     09 12 06 F6 | 	mov	arg01, #9
1909c     13 15 02 F6 | 	mov	arg02, local05
190a0     00 16 06 F6 | 	mov	arg03, #0
190a4     58 73 B0 FD | 	call	#__system___basic_open_string
190a8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
190ac     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
190b0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
190b4     FD 28 0A F6 | 	mov	local06, result1 wz
190b8                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
190b8     8C 00 90 AD |  if_e	jmp	#LR__2052
190bc     00 12 06 F6 | 	mov	arg01, #0
190c0     D0 C0 B0 FD | 	call	#__system___getiolock_0508
190c4     FD 12 02 F6 | 	mov	arg01, result1
190c8     30 67 B0 FD | 	call	#__system___lockmem
190cc     7B 01 00 FF 
190d0     1F 14 06 F6 | 	mov	arg02, ##@LR__5277
190d4     00 12 06 F6 | 	mov	arg01, #0
190d8     00 16 06 F6 | 	mov	arg03, #0
190dc     10 74 B0 FD | 	call	#__system___basic_print_string
190e0     00 12 06 F6 | 	mov	arg01, #0
190e4     14 15 02 F6 | 	mov	arg02, local06
190e8     00 16 06 F6 | 	mov	arg03, #0
190ec     0A 18 06 F6 | 	mov	arg04, #10
190f0     40 74 B0 FD | 	call	#__system___basic_print_integer
190f4     7B 01 00 FF 
190f8     2D 14 06 F6 | 	mov	arg02, ##@LR__5278
190fc     00 12 06 F6 | 	mov	arg01, #0
19100     00 16 06 F6 | 	mov	arg03, #0
19104     E8 73 B0 FD | 	call	#__system___basic_print_string
19108     14 13 02 F6 | 	mov	arg01, local06
1910c     48 8D B0 FD | 	call	#__system___strerror
19110     FD 14 02 F6 | 	mov	arg02, result1
19114     00 12 06 F6 | 	mov	arg01, #0
19118     00 16 06 F6 | 	mov	arg03, #0
1911c     D0 73 B0 FD | 	call	#__system___basic_print_string
19120     00 12 06 F6 | 	mov	arg01, #0
19124     0A 14 06 F6 | 	mov	arg02, #10
19128     00 16 06 F6 | 	mov	arg03, #0
1912c     68 73 B0 FD | 	call	#__system___basic_print_char
19130     00 12 06 F6 | 	mov	arg01, #0
19134     5C C0 B0 FD | 	call	#__system___getiolock_0508
19138     FD 00 68 FC | 	wrlong	#0, result1
1913c     09 12 06 F6 | 	mov	arg01, #9
19140     80 B6 B0 FD | 	call	#__system__close
19144     FC 00 90 FD | 	jmp	#LR__2055
19148                 | LR__2052
19148     01 2A 06 F6 | 	mov	local07, #1
1914c     00 2C 06 F6 | 	mov	local08, #0
19150                 | '   do
19150                 | LR__2053
19150                 | '     get #9,pos,block(0),1024,r : pos+=r	
19150     56 00 00 FF 
19154     E8 E4 05 F1 | 	add	objptr, ##44264
19158     F2 16 02 F6 | 	mov	arg03, objptr
1915c     56 00 00 FF 
19160     E8 E4 85 F1 | 	sub	objptr, ##44264
19164     09 12 06 F6 | 	mov	arg01, #9
19168     15 15 02 F6 | 	mov	arg02, local07
1916c     0A 18 C6 F9 | 	decod	arg04, #10
19170     01 1A 06 F6 | 	mov	arg05, #1
19174     88 74 B0 FD | 	call	#__system___basic_get
19178     FD 28 02 F6 | 	mov	local06, result1
1917c     FD 2A 02 F1 | 	add	local07, result1
19180     56 00 00 FF 
19184     E8 E4 05 F1 | 	add	objptr, ##44264
19188     F2 12 02 F6 | 	mov	arg01, objptr
1918c     16 15 02 F6 | 	mov	arg02, local08
19190     0A 16 C6 F9 | 	decod	arg03, #10
19194     4B 00 00 FF 
19198     1C E4 85 F1 | 	sub	objptr, ##38428
1919c     B8 5A B0 FD | 	call	#_psram_spin2_write
191a0     0B 00 00 FF 
191a4     CC E4 85 F1 | 	sub	objptr, ##5836
191a8     14 2D 02 F1 | 	add	local08, local06
191ac     02 00 00 FF 
191b0     00 28 0E F2 | 	cmp	local06, ##1024 wz
191b4     E0 03 00 AF 
191b8     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
191bc     90 FF 9F 8D |  if_c_and_z	jmp	#LR__2053
191c0     37 00 00 FF 
191c4     2C E4 05 F1 | 	add	objptr, ##28204
191c8     F2 12 02 FB | 	rdlong	arg01, objptr
191cc     03 12 62 FD | 	cogstop	arg01
191d0     04 E4 05 F1 | 	add	objptr, #4
191d4     F2 12 02 FB | 	rdlong	arg01, objptr
191d8     03 12 62 FD | 	cogstop	arg01
191dc     04 E4 05 F1 | 	add	objptr, #4
191e0     F2 12 02 FB | 	rdlong	arg01, objptr
191e4     03 12 62 FD | 	cogstop	arg01
191e8     21 00 00 FF 
191ec     F0 E4 05 F1 | 	add	objptr, ##17136
191f0     F2 12 02 FB | 	rdlong	arg01, objptr
191f4     03 12 62 FD | 	cogstop	arg01
191f8     18 00 00 FF 
191fc     D8 EA 05 F1 | 	add	ptr__dat__, ##12504
19200     F5 14 02 F6 | 	mov	arg02, ptr__dat__
19204     18 00 00 FF 
19208     D8 EA 85 F1 | 	sub	ptr__dat__, ##12504
1920c     21 00 00 FF 
19210     E8 E4 85 F1 | 	sub	objptr, ##17128
19214     1E 2C 06 F6 | 	mov	local08, #30
19218     28 E4 61 FD | 	setq	objptr
1921c     0A 2D F2 FC | 	coginit	local08, arg02 wc
19220     01 2C 66 C6 |  if_b	neg	local08, #1
19224     23 00 00 FF 
19228     2C E4 05 F1 | 	add	objptr, ##17964
1922c     F2 2C 62 FC | 	wrlong	local08, objptr
19230     5A 00 00 FF 
19234     68 E4 85 F1 | 	sub	objptr, ##46184
19238     00 12 06 F6 | 	mov	arg01, #0
1923c     01 12 62 FD | 	cogid	arg01
19240     03 12 62 FD | 	cogstop	arg01
19244                 | LR__2054
19244                 | LR__2055
19244     A7 F0 03 F6 | 	mov	ptra, fp
19248     B2 00 A0 FD | 	call	#popregs_
1924c                 | _do_brun_ret
1924c     2D 00 64 FD | 	ret
19250                 | 
19250                 | ' 
19250                 | ' 
19250                 | ' sub do_mouse
19250                 | _do_mouse
19250     E8 18 BF FD | 	call	#_pop
19254     00 FA 4D F2 | 	cmps	result1, #0 wz
19258                 | ' t1=pop()
19258                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
19258     14 00 90 5D |  if_ne	jmp	#LR__2060
1925c     10 12 06 F6 | 	mov	arg01, #16
19260     00 14 06 F6 | 	mov	arg02, #0
19264     00 16 06 F6 | 	mov	arg03, #0
19268     C8 41 B0 FD | 	call	#_hg010b_spin2_setspritesize
1926c     10 00 90 FD | 	jmp	#LR__2061
19270                 | LR__2060
19270     10 12 06 F6 | 	mov	arg01, #16
19274     20 14 06 F6 | 	mov	arg02, #32
19278     20 16 06 F6 | 	mov	arg03, #32
1927c     B4 41 B0 FD | 	call	#_hg010b_spin2_setspritesize
19280                 | LR__2061
19280                 | _do_mouse_ret
19280     2D 00 64 FD | 	ret
19284                 | 
19284                 | ' 
19284                 | ' sub do_cursor
19284                 | _do_cursor
19284     B4 18 BF FD | 	call	#_pop
19288     00 FA 4D F2 | 	cmps	result1, #0 wz
1928c                 | ' t1=pop()
1928c                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
1928c     14 00 90 5D |  if_ne	jmp	#LR__2070
19290     11 12 06 F6 | 	mov	arg01, #17
19294     00 14 06 F6 | 	mov	arg02, #0
19298     00 16 06 F6 | 	mov	arg03, #0
1929c     94 41 B0 FD | 	call	#_hg010b_spin2_setspritesize
192a0     10 00 90 FD | 	jmp	#LR__2071
192a4                 | LR__2070
192a4     11 12 06 F6 | 	mov	arg01, #17
192a8     08 14 06 F6 | 	mov	arg02, #8
192ac     10 16 06 F6 | 	mov	arg03, #16
192b0     80 41 B0 FD | 	call	#_hg010b_spin2_setspritesize
192b4                 | LR__2071
192b4                 | _do_cursor_ret
192b4     2D 00 64 FD | 	ret
192b8                 | 
192b8                 | ' 
192b8                 | ' 
192b8                 | ' sub do_click
192b8                 | _do_click
192b8     80 18 BF FD | 	call	#_pop
192bc     00 FA 4D F2 | 	cmps	result1, #0 wz
192c0                 | ' t1=pop()
192c0                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
192c0     58 00 00 AF 
192c4     20 E5 05 A1 |  if_e	add	objptr, ##45344
192c8     F2 00 68 AC |  if_e	wrlong	#0, objptr
192cc     58 00 00 FF 
192d0     20 E5 C5 F3 | 	sumz	objptr, ##45344
192d4     F2 02 68 5C |  if_ne	wrlong	#1, objptr
192d8     58 00 00 5F 
192dc     20 E5 85 51 |  if_ne	sub	objptr, ##45344
192e0                 | _do_click_ret
192e0     2D 00 64 FD | 	ret
192e4                 | 
192e4                 | ' 
192e4                 | ' 
192e4                 | ' sub do_beep
192e4                 | _do_beep
192e4     02 4A 05 F6 | 	mov	COUNT_, #2
192e8     A8 00 A0 FD | 	call	#pushregs_
192ec     20 F0 07 F1 | 	add	ptra, #32
192f0     48 18 BF FD | 	call	#_pop
192f4     FD 1E 02 F6 | 	mov	local01, result1
192f8     FE 1C 02 F6 | 	mov	arg06, result2
192fc     FF 20 02 F6 | 	mov	local02, result3
19300     0C 4E 05 F1 | 	add	fp, #12
19304     A7 1E 62 FC | 	wrlong	local01, fp
19308     04 4E 05 F1 | 	add	fp, #4
1930c     A7 1C 62 FC | 	wrlong	arg06, fp
19310     04 4E 05 F1 | 	add	fp, #4
19314     A7 20 62 FC | 	wrlong	local02, fp
19318     14 4E 85 F1 | 	sub	fp, #20
1931c     1C 18 BF FD | 	call	#_pop
19320     A7 FA 61 FC | 	wrlong	result1, fp
19324     04 4E 05 F1 | 	add	fp, #4
19328     A7 FC 61 FC | 	wrlong	result2, fp
1932c     04 4E 05 F1 | 	add	fp, #4
19330     A7 FE 61 FC | 	wrlong	result3, fp
19334                 | ' 
19334                 | ' t2=pop()
19334                 | ' t1=pop()
19334                 | ' 
19334                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
19334     08 4E 85 F1 | 	sub	fp, #8
19338     1C FE 0D F2 | 	cmp	result3, #28 wz
1933c     08 4E 05 51 |  if_ne	add	fp, #8
19340     A7 20 02 5B |  if_ne	rdlong	local02, fp
19344     08 4E 85 51 |  if_ne	sub	fp, #8
19348     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
1934c     A7 1E 02 AB |  if_e	rdlong	local01, fp
19350     18 4E 05 A1 |  if_e	add	fp, #24
19354     A7 1E 62 AC |  if_e	wrlong	local01, fp
19358     18 4E 85 A1 |  if_e	sub	fp, #24
1935c     14 00 90 AD |  if_e	jmp	#LR__2080
19360     A7 12 02 F6 | 	mov	arg01, fp
19364     4C AB BF FD | 	call	#_converttoint
19368     18 4E 05 F1 | 	add	fp, #24
1936c     A7 FA 61 FC | 	wrlong	result1, fp
19370     18 4E 85 F1 | 	sub	fp, #24
19374                 | LR__2080
19374     1C 4E 05 F1 | 	add	fp, #28
19378     A7 FE 48 FC | 	wrbyte	#127, fp
1937c     01 4E 05 F1 | 	add	fp, #1
19380     A7 00 49 FC | 	wrbyte	#128, fp
19384     01 4E 85 F1 | 	sub	fp, #1
19388     A7 14 02 F6 | 	mov	arg02, fp
1938c     04 4E 85 F1 | 	sub	fp, #4
19390     A7 16 02 FB | 	rdlong	arg03, fp
19394     18 4E 85 F1 | 	sub	fp, #24
19398     01 16 66 F0 | 	shl	arg03, #1
1939c     07 12 06 F6 | 	mov	arg01, #7
193a0     0E 18 C6 F9 | 	decod	arg04, #14
193a4     02 1A 06 F6 | 	mov	arg05, #2
193a8     00 1C 06 F6 | 	mov	arg06, #0
193ac     0B 00 00 FF 
193b0     CC E4 05 F1 | 	add	objptr, ##5836
193b4     A0 60 B0 FD | 	call	#_audio096_spin2_play8
193b8     0B 00 00 FF 
193bc     CC E4 85 F1 | 	sub	objptr, ##5836
193c0     0C 4E 05 F1 | 	add	fp, #12
193c4     A7 12 02 F6 | 	mov	arg01, fp
193c8     0C 4E 85 F1 | 	sub	fp, #12
193cc     04 18 BF FD | 	call	#_push
193d0     B8 F5 BF FD | 	call	#_do_waitms
193d4     07 12 06 F6 | 	mov	arg01, #7
193d8     0B 00 00 FF 
193dc     CC E4 05 F1 | 	add	objptr, ##5836
193e0     18 61 B0 FD | 	call	#_audio096_spin2_stop
193e4     0B 00 00 FF 
193e8     CC E4 85 F1 | 	sub	objptr, ##5836
193ec     A7 F0 03 F6 | 	mov	ptra, fp
193f0     B2 00 A0 FD | 	call	#popregs_
193f4                 | _do_beep_ret
193f4     2D 00 64 FD | 	ret
193f8                 | 
193f8                 | ' 
193f8                 | ' sub do_no_command
193f8                 | _do_no_command
193f8     17 12 06 F6 | 	mov	arg01, #23
193fc     54 1F B0 FD | 	call	#_printerror
19400                 | _do_no_command_ret
19400     2D 00 64 FD | 	ret
19404                 | 
19404                 | ' 
19404                 | ' sub do_negative
19404                 | _do_negative
19404     02 4A 05 F6 | 	mov	COUNT_, #2
19408     A8 00 A0 FD | 	call	#pushregs_
1940c     0C F0 07 F1 | 	add	ptra, #12
19410     28 17 BF FD | 	call	#_pop
19414     FF 1E 02 F6 | 	mov	local01, result3
19418     A7 FA 61 FC | 	wrlong	result1, fp
1941c     04 4E 05 F1 | 	add	fp, #4
19420     A7 FC 61 FC | 	wrlong	result2, fp
19424     04 4E 05 F1 | 	add	fp, #4
19428     A7 1E 62 FC | 	wrlong	local01, fp
1942c                 | ' t1=pop()
1942c                 | ' if t1.result_type=result_int then 
1942c     08 4E 85 F1 | 	sub	fp, #8
19430     1C 1E 0E F2 | 	cmp	local01, #28 wz
19434     A7 20 02 AB |  if_e	rdlong	local02, fp
19438     10 1F 62 A6 |  if_e	neg	local01, local02
1943c     A7 1E 62 AC |  if_e	wrlong	local01, fp
19440     5C 00 90 AD |  if_e	jmp	#LR__2092
19444     08 4E 05 F1 | 	add	fp, #8
19448     A7 1E 02 FB | 	rdlong	local01, fp
1944c     08 4E 85 F1 | 	sub	fp, #8
19450     1D 1E 0E F2 | 	cmp	local01, #29 wz
19454     1C 00 90 5D |  if_ne	jmp	#LR__2090
19458     A7 20 02 FB | 	rdlong	local02, fp
1945c     10 1F 62 F6 | 	neg	local01, local02
19460     A7 1E 62 FC | 	wrlong	local01, fp
19464     08 4E 05 F1 | 	add	fp, #8
19468     A7 38 68 FC | 	wrlong	#28, fp
1946c     08 4E 85 F1 | 	sub	fp, #8
19470     2C 00 90 FD | 	jmp	#LR__2091
19474                 | LR__2090
19474     08 4E 05 F1 | 	add	fp, #8
19478     A7 1E 02 FB | 	rdlong	local01, fp
1947c     08 4E 85 F1 | 	sub	fp, #8
19480     1E 1E 0E F2 | 	cmp	local01, #30 wz
19484     A7 FA 01 AB |  if_e	rdlong	result1, fp
19488     1F FA E5 A4 |  if_e	bitnot	result1, #31
1948c     A7 FA 61 AC |  if_e	wrlong	result1, fp
19490     08 4E 05 51 |  if_ne	add	fp, #8
19494     A7 FE 69 5C |  if_ne	wrlong	#255, fp
19498     08 4E 85 51 |  if_ne	sub	fp, #8
1949c     A7 50 68 5C |  if_ne	wrlong	#40, fp
194a0                 | LR__2091
194a0                 | LR__2092
194a0     A7 12 02 F6 | 	mov	arg01, fp
194a4     2C 17 BF FD | 	call	#_push
194a8     A7 F0 03 F6 | 	mov	ptra, fp
194ac     B2 00 A0 FD | 	call	#popregs_
194b0                 | _do_negative_ret
194b0     2D 00 64 FD | 	ret
194b4                 | 
194b4                 | ' 
194b4                 | ' sub do_abs
194b4                 | _do_abs
194b4     01 4A 05 F6 | 	mov	COUNT_, #1
194b8     A8 00 A0 FD | 	call	#pushregs_
194bc     0C F0 07 F1 | 	add	ptra, #12
194c0     78 16 BF FD | 	call	#_pop
194c4     FF 1E 02 F6 | 	mov	local01, result3
194c8     A7 FA 61 FC | 	wrlong	result1, fp
194cc     04 4E 05 F1 | 	add	fp, #4
194d0     A7 FC 61 FC | 	wrlong	result2, fp
194d4     04 4E 05 F1 | 	add	fp, #4
194d8     A7 1E 62 FC | 	wrlong	local01, fp
194dc                 | ' t1=pop()
194dc                 | ' if t1.result_type=result_int then 
194dc     08 4E 85 F1 | 	sub	fp, #8
194e0     1C 1E 0E F2 | 	cmp	local01, #28 wz
194e4     A7 12 02 AB |  if_e	rdlong	arg01, fp
194e8     09 1F 42 A6 |  if_e	abs	local01, arg01
194ec     A7 1E 62 AC |  if_e	wrlong	local01, fp
194f0     2C 00 90 AD |  if_e	jmp	#LR__2100
194f4     08 4E 05 F1 | 	add	fp, #8
194f8     A7 1E 02 FB | 	rdlong	local01, fp
194fc     08 4E 85 F1 | 	sub	fp, #8
19500     1E 1E 0E F2 | 	cmp	local01, #30 wz
19504     A7 FA 01 AB |  if_e	rdlong	result1, fp
19508     1F FA 05 A4 |  if_e	bitl	result1, #31
1950c     A7 FA 61 AC |  if_e	wrlong	result1, fp
19510     08 4E 05 51 |  if_ne	add	fp, #8
19514     A7 FE 69 5C |  if_ne	wrlong	#255, fp
19518     08 4E 85 51 |  if_ne	sub	fp, #8
1951c     A7 50 68 5C |  if_ne	wrlong	#40, fp
19520                 | LR__2100
19520     A7 12 02 F6 | 	mov	arg01, fp
19524     AC 16 BF FD | 	call	#_push
19528     A7 F0 03 F6 | 	mov	ptra, fp
1952c     B2 00 A0 FD | 	call	#popregs_
19530                 | _do_abs_ret
19530     2D 00 64 FD | 	ret
19534                 | 
19534                 | ' 
19534                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
19534                 | ' 
19534                 | ' ''----------------------------------------------------------------------------------------------------
19534                 | ' ''------------------ Initialization procedures -------------------------------------------------------
19534                 | ' ''----------------------------------------------------------------------------------------------------
19534                 | ' 
19534                 | ' ''--------------------------- Command function pointers
19534                 | ' 
19534                 | ' sub init_commands
19534                 | _init_commands
19534                 | ' 
19534                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
19534     00 00 06 F6 | 	mov	_var01, #0
19538     97 16 48 FB | 	callpa	#(@LR__2111-@LR__2110)>>2,fcache_load_ptr_
1953c                 | LR__2110
1953c     00 FB 01 F6 | 	mov	result1, _var01
19540     02 FA 65 F0 | 	shl	result1, #2
19544     43 00 00 FF 
19548     90 E4 05 F1 | 	add	objptr, ##34448
1954c     F2 FA 01 F1 | 	add	result1, objptr
19550     43 00 00 FF 
19554     90 E4 85 F1 | 	sub	objptr, ##34448
19558     FD E4 61 FC | 	wrlong	objptr, result1
1955c     01 00 06 F1 | 	add	_var01, #1
19560     00 01 56 F2 | 	cmps	_var01, #256 wc
19564     D4 FF 9F CD |  if_b	jmp	#LR__2110
19568                 | LR__2111
19568     F2 FA 01 F6 | 	mov	result1, objptr
1956c     14 FA 25 F4 | 	bith	result1, #20
19570     43 00 00 FF 
19574     94 E4 05 F1 | 	add	objptr, ##34452
19578     F2 FA 61 FC | 	wrlong	result1, objptr
1957c     43 00 00 FF 
19580     94 E4 85 F1 | 	sub	objptr, ##34452
19584     F2 FA 01 F6 | 	mov	result1, objptr
19588     15 FA 25 F4 | 	bith	result1, #21
1958c     43 00 00 FF 
19590     98 E4 05 F1 | 	add	objptr, ##34456
19594     F2 FA 61 FC | 	wrlong	result1, objptr
19598     43 00 00 FF 
1959c     98 E4 85 F1 | 	sub	objptr, ##34456
195a0     F2 FA 01 F6 | 	mov	result1, objptr
195a4     34 FA 25 F4 | 	bith	result1, #52
195a8     43 00 00 FF 
195ac     9C E4 05 F1 | 	add	objptr, ##34460
195b0     F2 FA 61 FC | 	wrlong	result1, objptr
195b4     43 00 00 FF 
195b8     9C E4 85 F1 | 	sub	objptr, ##34460
195bc     F2 FA 01 F6 | 	mov	result1, objptr
195c0     16 FA 25 F4 | 	bith	result1, #22
195c4     43 00 00 FF 
195c8     A4 E4 05 F1 | 	add	objptr, ##34468
195cc     F2 FA 61 FC | 	wrlong	result1, objptr
195d0     43 00 00 FF 
195d4     A4 E4 85 F1 | 	sub	objptr, ##34468
195d8     F2 FA 01 F6 | 	mov	result1, objptr
195dc     00 28 00 FF 
195e0     00 FA 45 F5 | 	or	result1, ##5242880
195e4     43 00 00 FF 
195e8     A8 E4 05 F1 | 	add	objptr, ##34472
195ec     F2 FA 61 FC | 	wrlong	result1, objptr
195f0     43 00 00 FF 
195f4     A8 E4 85 F1 | 	sub	objptr, ##34472
195f8     F2 FA 01 F6 | 	mov	result1, objptr
195fc     35 FA 25 F4 | 	bith	result1, #53
19600     43 00 00 FF 
19604     AC E4 05 F1 | 	add	objptr, ##34476
19608     F2 FA 61 FC | 	wrlong	result1, objptr
1960c     43 00 00 FF 
19610     AC E4 85 F1 | 	sub	objptr, ##34476
19614     F2 FA 01 F6 | 	mov	result1, objptr
19618     54 FA 25 F4 | 	bith	result1, #84
1961c     43 00 00 FF 
19620     B0 E4 05 F1 | 	add	objptr, ##34480
19624     F2 FA 61 FC | 	wrlong	result1, objptr
19628     43 00 00 FF 
1962c     B0 E4 85 F1 | 	sub	objptr, ##34480
19630     F2 FA 01 F6 | 	mov	result1, objptr
19634     17 FA 25 F4 | 	bith	result1, #23
19638     43 00 00 FF 
1963c     B4 E4 05 F1 | 	add	objptr, ##34484
19640     F2 FA 61 FC | 	wrlong	result1, objptr
19644     43 00 00 FF 
19648     B4 E4 85 F1 | 	sub	objptr, ##34484
1964c     F2 FA 01 F6 | 	mov	result1, objptr
19650     00 48 00 FF 
19654     00 FA 45 F5 | 	or	result1, ##9437184
19658     43 00 00 FF 
1965c     B8 E4 05 F1 | 	add	objptr, ##34488
19660     F2 FA 61 FC | 	wrlong	result1, objptr
19664     43 00 00 FF 
19668     B8 E4 85 F1 | 	sub	objptr, ##34488
1966c     F2 FA 01 F6 | 	mov	result1, objptr
19670     00 50 00 FF 
19674     00 FA 45 F5 | 	or	result1, ##10485760
19678     43 00 00 FF 
1967c     BC E4 05 F1 | 	add	objptr, ##34492
19680     F2 FA 61 FC | 	wrlong	result1, objptr
19684     43 00 00 FF 
19688     BC E4 85 F1 | 	sub	objptr, ##34492
1968c     F2 FA 01 F6 | 	mov	result1, objptr
19690     00 58 00 FF 
19694     00 FA 45 F5 | 	or	result1, ##11534336
19698     43 00 00 FF 
1969c     C0 E4 05 F1 | 	add	objptr, ##34496
196a0     F2 FA 61 FC | 	wrlong	result1, objptr
196a4     43 00 00 FF 
196a8     C0 E4 85 F1 | 	sub	objptr, ##34496
196ac     F2 FA 01 F6 | 	mov	result1, objptr
196b0     36 FA 25 F4 | 	bith	result1, #54
196b4     43 00 00 FF 
196b8     D4 E4 05 F1 | 	add	objptr, ##34516
196bc     F2 FA 61 FC | 	wrlong	result1, objptr
196c0     43 00 00 FF 
196c4     D4 E4 85 F1 | 	sub	objptr, ##34516
196c8     F2 FA 01 F6 | 	mov	result1, objptr
196cc     00 68 00 FF 
196d0     00 FA 45 F5 | 	or	result1, ##13631488
196d4     43 00 00 FF 
196d8     04 E5 05 F1 | 	add	objptr, ##34564
196dc     F2 FA 61 FC | 	wrlong	result1, objptr
196e0     43 00 00 FF 
196e4     04 E5 85 F1 | 	sub	objptr, ##34564
196e8     F2 FA 01 F6 | 	mov	result1, objptr
196ec     00 68 00 FF 
196f0     00 FA 45 F5 | 	or	result1, ##13631488
196f4     43 00 00 FF 
196f8     00 E5 05 F1 | 	add	objptr, ##34560
196fc     F2 FA 61 FC | 	wrlong	result1, objptr
19700     43 00 00 FF 
19704     00 E5 85 F1 | 	sub	objptr, ##34560
19708     F2 FA 01 F6 | 	mov	result1, objptr
1970c     00 68 00 FF 
19710     00 FA 45 F5 | 	or	result1, ##13631488
19714     43 00 00 FF 
19718     08 E5 05 F1 | 	add	objptr, ##34568
1971c     F2 FA 61 FC | 	wrlong	result1, objptr
19720     43 00 00 FF 
19724     08 E5 85 F1 | 	sub	objptr, ##34568
19728     F2 FA 01 F6 | 	mov	result1, objptr
1972c     00 68 00 FF 
19730     00 FA 45 F5 | 	or	result1, ##13631488
19734     43 00 00 FF 
19738     0C E5 05 F1 | 	add	objptr, ##34572
1973c     F2 FA 61 FC | 	wrlong	result1, objptr
19740     43 00 00 FF 
19744     0C E5 85 F1 | 	sub	objptr, ##34572
19748     F2 FA 01 F6 | 	mov	result1, objptr
1974c     00 68 00 FF 
19750     00 FA 45 F5 | 	or	result1, ##13631488
19754     43 00 00 FF 
19758     3C E5 05 F1 | 	add	objptr, ##34620
1975c     F2 FA 61 FC | 	wrlong	result1, objptr
19760     43 00 00 FF 
19764     3C E5 85 F1 | 	sub	objptr, ##34620
19768     F2 FA 01 F6 | 	mov	result1, objptr
1976c     55 FA 25 F4 | 	bith	result1, #85
19770     43 00 00 FF 
19774     EC E4 05 F1 | 	add	objptr, ##34540
19778     F2 FA 61 FC | 	wrlong	result1, objptr
1977c     43 00 00 FF 
19780     EC E4 85 F1 | 	sub	objptr, ##34540
19784     F2 FA 01 F6 | 	mov	result1, objptr
19788     00 68 00 FF 
1978c     00 FA 45 F5 | 	or	result1, ##13631488
19790     43 00 00 FF 
19794     10 E5 05 F1 | 	add	objptr, ##34576
19798     F2 FA 61 FC | 	wrlong	result1, objptr
1979c     43 00 00 FF 
197a0     10 E5 85 F1 | 	sub	objptr, ##34576
197a4     F2 FA 01 F6 | 	mov	result1, objptr
197a8     00 68 00 FF 
197ac     00 FA 45 F5 | 	or	result1, ##13631488
197b0     43 00 00 FF 
197b4     14 E5 05 F1 | 	add	objptr, ##34580
197b8     F2 FA 61 FC | 	wrlong	result1, objptr
197bc     43 00 00 FF 
197c0     14 E5 85 F1 | 	sub	objptr, ##34580
197c4     F2 FA 01 F6 | 	mov	result1, objptr
197c8     00 68 00 FF 
197cc     00 FA 45 F5 | 	or	result1, ##13631488
197d0     43 00 00 FF 
197d4     18 E5 05 F1 | 	add	objptr, ##34584
197d8     F2 FA 61 FC | 	wrlong	result1, objptr
197dc     43 00 00 FF 
197e0     18 E5 85 F1 | 	sub	objptr, ##34584
197e4     F2 FA 01 F6 | 	mov	result1, objptr
197e8     74 FA 25 F4 | 	bith	result1, #116
197ec     43 00 00 FF 
197f0     90 E5 05 F1 | 	add	objptr, ##34704
197f4     F2 FA 61 FC | 	wrlong	result1, objptr
197f8     43 00 00 FF 
197fc     90 E5 85 F1 | 	sub	objptr, ##34704
19800     F2 FA 01 F6 | 	mov	result1, objptr
19804     18 FA 25 F4 | 	bith	result1, #24
19808     43 00 00 FF 
1980c     94 E5 05 F1 | 	add	objptr, ##34708
19810     F2 FA 61 FC | 	wrlong	result1, objptr
19814     43 00 00 FF 
19818     94 E5 85 F1 | 	sub	objptr, ##34708
1981c     F2 FA 01 F6 | 	mov	result1, objptr
19820     00 88 00 FF 
19824     00 FA 45 F5 | 	or	result1, ##17825792
19828     43 00 00 FF 
1982c     98 E5 05 F1 | 	add	objptr, ##34712
19830     F2 FA 61 FC | 	wrlong	result1, objptr
19834     43 00 00 FF 
19838     98 E5 85 F1 | 	sub	objptr, ##34712
1983c     F2 FA 01 F6 | 	mov	result1, objptr
19840     00 90 00 FF 
19844     00 FA 45 F5 | 	or	result1, ##18874368
19848     43 00 00 FF 
1984c     9C E5 05 F1 | 	add	objptr, ##34716
19850     F2 FA 61 FC | 	wrlong	result1, objptr
19854     43 00 00 FF 
19858     9C E5 85 F1 | 	sub	objptr, ##34716
1985c     F2 FA 01 F6 | 	mov	result1, objptr
19860     00 98 00 FF 
19864     00 FA 45 F5 | 	or	result1, ##19922944
19868     43 00 00 FF 
1986c     A0 E5 05 F1 | 	add	objptr, ##34720
19870     F2 FA 61 FC | 	wrlong	result1, objptr
19874     43 00 00 FF 
19878     A0 E5 85 F1 | 	sub	objptr, ##34720
1987c     F2 FA 01 F6 | 	mov	result1, objptr
19880     00 A0 00 FF 
19884     00 FA 45 F5 | 	or	result1, ##20971520
19888     43 00 00 FF 
1988c     A4 E5 05 F1 | 	add	objptr, ##34724
19890     F2 FA 61 FC | 	wrlong	result1, objptr
19894     43 00 00 FF 
19898     A4 E5 85 F1 | 	sub	objptr, ##34724
1989c     F2 FA 01 F6 | 	mov	result1, objptr
198a0     00 A8 00 FF 
198a4     00 FA 45 F5 | 	or	result1, ##22020096
198a8     43 00 00 FF 
198ac     A8 E5 05 F1 | 	add	objptr, ##34728
198b0     F2 FA 61 FC | 	wrlong	result1, objptr
198b4     43 00 00 FF 
198b8     A8 E5 85 F1 | 	sub	objptr, ##34728
198bc     F2 FA 01 F6 | 	mov	result1, objptr
198c0     00 B0 00 FF 
198c4     00 FA 45 F5 | 	or	result1, ##23068672
198c8     43 00 00 FF 
198cc     AC E5 05 F1 | 	add	objptr, ##34732
198d0     F2 FA 61 FC | 	wrlong	result1, objptr
198d4     43 00 00 FF 
198d8     AC E5 85 F1 | 	sub	objptr, ##34732
198dc     F2 FA 01 F6 | 	mov	result1, objptr
198e0     00 B8 00 FF 
198e4     00 FA 45 F5 | 	or	result1, ##24117248
198e8     43 00 00 FF 
198ec     B0 E5 05 F1 | 	add	objptr, ##34736
198f0     F2 FA 61 FC | 	wrlong	result1, objptr
198f4     43 00 00 FF 
198f8     B0 E5 85 F1 | 	sub	objptr, ##34736
198fc     F2 FA 01 F6 | 	mov	result1, objptr
19900     37 FA 25 F4 | 	bith	result1, #55
19904     43 00 00 FF 
19908     B4 E5 05 F1 | 	add	objptr, ##34740
1990c     F2 FA 61 FC | 	wrlong	result1, objptr
19910     43 00 00 FF 
19914     B4 E5 85 F1 | 	sub	objptr, ##34740
19918     F2 FA 01 F6 | 	mov	result1, objptr
1991c     00 C8 00 FF 
19920     00 FA 45 F5 | 	or	result1, ##26214400
19924     43 00 00 FF 
19928     B8 E5 05 F1 | 	add	objptr, ##34744
1992c     F2 FA 61 FC | 	wrlong	result1, objptr
19930     43 00 00 FF 
19934     B8 E5 85 F1 | 	sub	objptr, ##34744
19938     F2 FA 01 F6 | 	mov	result1, objptr
1993c     00 D0 00 FF 
19940     00 FA 45 F5 | 	or	result1, ##27262976
19944     43 00 00 FF 
19948     BC E5 05 F1 | 	add	objptr, ##34748
1994c     F2 FA 61 FC | 	wrlong	result1, objptr
19950     43 00 00 FF 
19954     BC E5 85 F1 | 	sub	objptr, ##34748
19958     F2 FA 01 F6 | 	mov	result1, objptr
1995c     00 D8 00 FF 
19960     00 FA 45 F5 | 	or	result1, ##28311552
19964     43 00 00 FF 
19968     C0 E5 05 F1 | 	add	objptr, ##34752
1996c     F2 FA 61 FC | 	wrlong	result1, objptr
19970     43 00 00 FF 
19974     C0 E5 85 F1 | 	sub	objptr, ##34752
19978     F2 FA 01 F6 | 	mov	result1, objptr
1997c     56 FA 25 F4 | 	bith	result1, #86
19980     43 00 00 FF 
19984     C4 E5 05 F1 | 	add	objptr, ##34756
19988     F2 FA 61 FC | 	wrlong	result1, objptr
1998c     43 00 00 FF 
19990     C4 E5 85 F1 | 	sub	objptr, ##34756
19994     F2 FA 01 F6 | 	mov	result1, objptr
19998     00 E8 00 FF 
1999c     00 FA 45 F5 | 	or	result1, ##30408704
199a0     45 00 00 FF 
199a4     8C E4 05 F1 | 	add	objptr, ##35468
199a8     F2 FA 61 FC | 	wrlong	result1, objptr
199ac     45 00 00 FF 
199b0     8C E4 85 F1 | 	sub	objptr, ##35468
199b4     F2 FA 01 F6 | 	mov	result1, objptr
199b8     75 FA 25 F4 | 	bith	result1, #117
199bc     43 00 00 FF 
199c0     C8 E5 05 F1 | 	add	objptr, ##34760
199c4     F2 FA 61 FC | 	wrlong	result1, objptr
199c8     43 00 00 FF 
199cc     C8 E5 85 F1 | 	sub	objptr, ##34760
199d0     F2 FA 01 F6 | 	mov	result1, objptr
199d4     94 FA 25 F4 | 	bith	result1, #148
199d8     43 00 00 FF 
199dc     DC E5 05 F1 | 	add	objptr, ##34780
199e0     F2 FA 61 FC | 	wrlong	result1, objptr
199e4     43 00 00 FF 
199e8     DC E5 85 F1 | 	sub	objptr, ##34780
199ec     F2 FA 01 F6 | 	mov	result1, objptr
199f0     19 FA 25 F4 | 	bith	result1, #25
199f4     43 00 00 FF 
199f8     CC E5 05 F1 | 	add	objptr, ##34764
199fc     F2 FA 61 FC | 	wrlong	result1, objptr
19a00     43 00 00 FF 
19a04     CC E5 85 F1 | 	sub	objptr, ##34764
19a08     F2 FA 01 F6 | 	mov	result1, objptr
19a0c     00 08 01 FF 
19a10     00 FA 45 F5 | 	or	result1, ##34603008
19a14     43 00 00 FF 
19a18     E8 E4 05 F1 | 	add	objptr, ##34536
19a1c     F2 FA 61 FC | 	wrlong	result1, objptr
19a20     43 00 00 FF 
19a24     E8 E4 85 F1 | 	sub	objptr, ##34536
19a28     F2 FA 01 F6 | 	mov	result1, objptr
19a2c     00 10 01 FF 
19a30     00 FA 45 F5 | 	or	result1, ##35651584
19a34     43 00 00 FF 
19a38     D0 E5 05 F1 | 	add	objptr, ##34768
19a3c     F2 FA 61 FC | 	wrlong	result1, objptr
19a40     43 00 00 FF 
19a44     D0 E5 85 F1 | 	sub	objptr, ##34768
19a48     F2 FA 01 F6 | 	mov	result1, objptr
19a4c     00 18 01 FF 
19a50     00 FA 45 F5 | 	or	result1, ##36700160
19a54     43 00 00 FF 
19a58     D4 E5 05 F1 | 	add	objptr, ##34772
19a5c     F2 FA 61 FC | 	wrlong	result1, objptr
19a60     43 00 00 FF 
19a64     D4 E5 85 F1 | 	sub	objptr, ##34772
19a68     F2 FA 01 F6 | 	mov	result1, objptr
19a6c     00 20 01 FF 
19a70     00 FA 45 F5 | 	or	result1, ##37748736
19a74     43 00 00 FF 
19a78     D8 E5 05 F1 | 	add	objptr, ##34776
19a7c     F2 FA 61 FC | 	wrlong	result1, objptr
19a80     43 00 00 FF 
19a84     D8 E5 85 F1 | 	sub	objptr, ##34776
19a88     F2 FA 01 F6 | 	mov	result1, objptr
19a8c     00 28 01 FF 
19a90     00 FA 45 F5 | 	or	result1, ##38797312
19a94     43 00 00 FF 
19a98     E4 E5 05 F1 | 	add	objptr, ##34788
19a9c     F2 FA 61 FC | 	wrlong	result1, objptr
19aa0     43 00 00 FF 
19aa4     E4 E5 85 F1 | 	sub	objptr, ##34788
19aa8     F2 FA 01 F6 | 	mov	result1, objptr
19aac     00 30 01 FF 
19ab0     00 FA 45 F5 | 	or	result1, ##39845888
19ab4     43 00 00 FF 
19ab8     E8 E5 05 F1 | 	add	objptr, ##34792
19abc     F2 FA 61 FC | 	wrlong	result1, objptr
19ac0     43 00 00 FF 
19ac4     E8 E5 85 F1 | 	sub	objptr, ##34792
19ac8     F2 FA 01 F6 | 	mov	result1, objptr
19acc     00 38 01 FF 
19ad0     00 FA 45 F5 | 	or	result1, ##40894464
19ad4     43 00 00 FF 
19ad8     EC E5 05 F1 | 	add	objptr, ##34796
19adc     F2 FA 61 FC | 	wrlong	result1, objptr
19ae0     43 00 00 FF 
19ae4     EC E5 85 F1 | 	sub	objptr, ##34796
19ae8     F2 FA 01 F6 | 	mov	result1, objptr
19aec     00 40 01 FF 
19af0     00 FA 45 F5 | 	or	result1, ##41943040
19af4     43 00 00 FF 
19af8     F0 E5 05 F1 | 	add	objptr, ##34800
19afc     F2 FA 61 FC | 	wrlong	result1, objptr
19b00     43 00 00 FF 
19b04     F0 E5 85 F1 | 	sub	objptr, ##34800
19b08     F2 FA 01 F6 | 	mov	result1, objptr
19b0c     00 48 01 FF 
19b10     00 FA 45 F5 | 	or	result1, ##42991616
19b14     43 00 00 FF 
19b18     F8 E5 05 F1 | 	add	objptr, ##34808
19b1c     F2 FA 61 FC | 	wrlong	result1, objptr
19b20     43 00 00 FF 
19b24     F8 E5 85 F1 | 	sub	objptr, ##34808
19b28     F2 FA 01 F6 | 	mov	result1, objptr
19b2c     00 08 01 FF 
19b30     00 FA 45 F5 | 	or	result1, ##34603008
19b34     43 00 00 FF 
19b38     FC E5 05 F1 | 	add	objptr, ##34812
19b3c     F2 FA 61 FC | 	wrlong	result1, objptr
19b40     43 00 00 FF 
19b44     FC E5 85 F1 | 	sub	objptr, ##34812
19b48     F2 FA 01 F6 | 	mov	result1, objptr
19b4c     00 50 01 FF 
19b50     00 FA 45 F5 | 	or	result1, ##44040192
19b54     43 00 00 FF 
19b58     FC E4 05 F1 | 	add	objptr, ##34556
19b5c     F2 FA 61 FC | 	wrlong	result1, objptr
19b60     43 00 00 FF 
19b64     FC E4 85 F1 | 	sub	objptr, ##34556
19b68     F2 FA 01 F6 | 	mov	result1, objptr
19b6c     00 58 01 FF 
19b70     00 FA 45 F5 | 	or	result1, ##45088768
19b74     43 00 00 FF 
19b78     2C E5 05 F1 | 	add	objptr, ##34604
19b7c     F2 FA 61 FC | 	wrlong	result1, objptr
19b80     43 00 00 FF 
19b84     2C E5 85 F1 | 	sub	objptr, ##34604
19b88     F2 FA 01 F6 | 	mov	result1, objptr
19b8c     00 60 01 FF 
19b90     00 FA 45 F5 | 	or	result1, ##46137344
19b94     43 00 00 FF 
19b98     28 E5 05 F1 | 	add	objptr, ##34600
19b9c     F2 FA 61 FC | 	wrlong	result1, objptr
19ba0     43 00 00 FF 
19ba4     28 E5 85 F1 | 	sub	objptr, ##34600
19ba8     F2 FA 01 F6 | 	mov	result1, objptr
19bac     00 68 01 FF 
19bb0     00 FA 45 F5 | 	or	result1, ##47185920
19bb4     43 00 00 FF 
19bb8     CC E4 05 F1 | 	add	objptr, ##34508
19bbc     F2 FA 61 FC | 	wrlong	result1, objptr
19bc0     43 00 00 FF 
19bc4     CC E4 85 F1 | 	sub	objptr, ##34508
19bc8     F2 FA 01 F6 | 	mov	result1, objptr
19bcc     00 70 01 FF 
19bd0     00 FA 45 F5 | 	or	result1, ##48234496
19bd4     43 00 00 FF 
19bd8     D0 E4 05 F1 | 	add	objptr, ##34512
19bdc     F2 FA 61 FC | 	wrlong	result1, objptr
19be0     43 00 00 FF 
19be4     D0 E4 85 F1 | 	sub	objptr, ##34512
19be8     F2 FA 01 F6 | 	mov	result1, objptr
19bec     00 78 01 FF 
19bf0     00 FA 45 F5 | 	or	result1, ##49283072
19bf4     43 00 00 FF 
19bf8     38 E5 05 F1 | 	add	objptr, ##34616
19bfc     F2 FA 61 FC | 	wrlong	result1, objptr
19c00     43 00 00 FF 
19c04     38 E5 85 F1 | 	sub	objptr, ##34616
19c08     F2 FA 01 F6 | 	mov	result1, objptr
19c0c     38 FA 25 F4 | 	bith	result1, #56
19c10     43 00 00 FF 
19c14     E0 E5 05 F1 | 	add	objptr, ##34784
19c18     F2 FA 61 FC | 	wrlong	result1, objptr
19c1c     43 00 00 FF 
19c20     E0 E5 85 F1 | 	sub	objptr, ##34784
19c24     F2 FA 01 F6 | 	mov	result1, objptr
19c28     00 88 01 FF 
19c2c     00 FA 45 F5 | 	or	result1, ##51380224
19c30     43 00 00 FF 
19c34     F4 E5 05 F1 | 	add	objptr, ##34804
19c38     F2 FA 61 FC | 	wrlong	result1, objptr
19c3c     43 00 00 FF 
19c40     F4 E5 85 F1 | 	sub	objptr, ##34804
19c44     F2 FA 01 F6 | 	mov	result1, objptr
19c48     00 90 01 FF 
19c4c     00 FA 45 F5 | 	or	result1, ##52428800
19c50     44 00 00 FF 
19c54     00 E4 05 F1 | 	add	objptr, ##34816
19c58     F2 FA 61 FC | 	wrlong	result1, objptr
19c5c     44 00 00 FF 
19c60     00 E4 85 F1 | 	sub	objptr, ##34816
19c64     F2 FA 01 F6 | 	mov	result1, objptr
19c68     00 98 01 FF 
19c6c     00 FA 45 F5 | 	or	result1, ##53477376
19c70     44 00 00 FF 
19c74     04 E4 05 F1 | 	add	objptr, ##34820
19c78     F2 FA 61 FC | 	wrlong	result1, objptr
19c7c     44 00 00 FF 
19c80     04 E4 85 F1 | 	sub	objptr, ##34820
19c84     F2 FA 01 F6 | 	mov	result1, objptr
19c88     00 A0 01 FF 
19c8c     00 FA 45 F5 | 	or	result1, ##54525952
19c90     44 00 00 FF 
19c94     08 E4 05 F1 | 	add	objptr, ##34824
19c98     F2 FA 61 FC | 	wrlong	result1, objptr
19c9c     44 00 00 FF 
19ca0     08 E4 85 F1 | 	sub	objptr, ##34824
19ca4     F2 FA 01 F6 | 	mov	result1, objptr
19ca8     00 A8 01 FF 
19cac     00 FA 45 F5 | 	or	result1, ##55574528
19cb0     44 00 00 FF 
19cb4     0C E4 05 F1 | 	add	objptr, ##34828
19cb8     F2 FA 61 FC | 	wrlong	result1, objptr
19cbc     44 00 00 FF 
19cc0     0C E4 85 F1 | 	sub	objptr, ##34828
19cc4     F2 FA 01 F6 | 	mov	result1, objptr
19cc8     00 B0 01 FF 
19ccc     00 FA 45 F5 | 	or	result1, ##56623104
19cd0     44 00 00 FF 
19cd4     10 E4 05 F1 | 	add	objptr, ##34832
19cd8     F2 FA 61 FC | 	wrlong	result1, objptr
19cdc     44 00 00 FF 
19ce0     10 E4 85 F1 | 	sub	objptr, ##34832
19ce4     F2 FA 01 F6 | 	mov	result1, objptr
19ce8     00 B8 01 FF 
19cec     00 FA 45 F5 | 	or	result1, ##57671680
19cf0     44 00 00 FF 
19cf4     14 E4 05 F1 | 	add	objptr, ##34836
19cf8     F2 FA 61 FC | 	wrlong	result1, objptr
19cfc     44 00 00 FF 
19d00     14 E4 85 F1 | 	sub	objptr, ##34836
19d04     F2 FA 01 F6 | 	mov	result1, objptr
19d08     94 FA 25 F4 | 	bith	result1, #148
19d0c     43 00 00 FF 
19d10     DC E5 05 F1 | 	add	objptr, ##34780
19d14     F2 FA 61 FC | 	wrlong	result1, objptr
19d18     43 00 00 FF 
19d1c     DC E5 85 F1 | 	sub	objptr, ##34780
19d20     F2 FA 01 F6 | 	mov	result1, objptr
19d24     57 FA 25 F4 | 	bith	result1, #87
19d28     44 00 00 FF 
19d2c     1C E4 05 F1 | 	add	objptr, ##34844
19d30     F2 FA 61 FC | 	wrlong	result1, objptr
19d34     44 00 00 FF 
19d38     1C E4 85 F1 | 	sub	objptr, ##34844
19d3c     F2 FA 01 F6 | 	mov	result1, objptr
19d40     00 C8 01 FF 
19d44     00 FA 45 F5 | 	or	result1, ##59768832
19d48     44 00 00 FF 
19d4c     18 E4 05 F1 | 	add	objptr, ##34840
19d50     F2 FA 61 FC | 	wrlong	result1, objptr
19d54     44 00 00 FF 
19d58     18 E4 85 F1 | 	sub	objptr, ##34840
19d5c     F2 FA 01 F6 | 	mov	result1, objptr
19d60     00 D0 01 FF 
19d64     00 FA 45 F5 | 	or	result1, ##60817408
19d68     44 00 00 FF 
19d6c     30 E4 05 F1 | 	add	objptr, ##34864
19d70     F2 FA 61 FC | 	wrlong	result1, objptr
19d74     44 00 00 FF 
19d78     30 E4 85 F1 | 	sub	objptr, ##34864
19d7c     F2 FA 01 F6 | 	mov	result1, objptr
19d80     00 D8 01 FF 
19d84     00 FA 45 F5 | 	or	result1, ##61865984
19d88     44 00 00 FF 
19d8c     34 E4 05 F1 | 	add	objptr, ##34868
19d90     F2 FA 61 FC | 	wrlong	result1, objptr
19d94     44 00 00 FF 
19d98     34 E4 85 F1 | 	sub	objptr, ##34868
19d9c     F2 FA 01 F6 | 	mov	result1, objptr
19da0     76 FA 25 F4 | 	bith	result1, #118
19da4     44 00 00 FF 
19da8     20 E4 05 F1 | 	add	objptr, ##34848
19dac     F2 FA 61 FC | 	wrlong	result1, objptr
19db0     44 00 00 FF 
19db4     20 E4 85 F1 | 	sub	objptr, ##34848
19db8     F2 FA 01 F6 | 	mov	result1, objptr
19dbc     00 E8 01 FF 
19dc0     00 FA 45 F5 | 	or	result1, ##63963136
19dc4     44 00 00 FF 
19dc8     24 E4 05 F1 | 	add	objptr, ##34852
19dcc     F2 FA 61 FC | 	wrlong	result1, objptr
19dd0     44 00 00 FF 
19dd4     24 E4 85 F1 | 	sub	objptr, ##34852
19dd8     F2 FA 01 F6 | 	mov	result1, objptr
19ddc     95 FA 25 F4 | 	bith	result1, #149
19de0     44 00 00 FF 
19de4     28 E4 05 F1 | 	add	objptr, ##34856
19de8     F2 FA 61 FC | 	wrlong	result1, objptr
19dec     44 00 00 FF 
19df0     28 E4 85 F1 | 	sub	objptr, ##34856
19df4     F2 FA 01 F6 | 	mov	result1, objptr
19df8     B4 FA 25 F4 | 	bith	result1, #180
19dfc     44 00 00 FF 
19e00     2C E4 05 F1 | 	add	objptr, ##34860
19e04     F2 FA 61 FC | 	wrlong	result1, objptr
19e08     44 00 00 FF 
19e0c     2C E4 85 F1 | 	sub	objptr, ##34860
19e10     F2 FA 01 F6 | 	mov	result1, objptr
19e14     1A FA 25 F4 | 	bith	result1, #26
19e18     44 00 00 FF 
19e1c     3C E4 05 F1 | 	add	objptr, ##34876
19e20     F2 FA 61 FC | 	wrlong	result1, objptr
19e24     44 00 00 FF 
19e28     3C E4 85 F1 | 	sub	objptr, ##34876
19e2c     F2 FA 01 F6 | 	mov	result1, objptr
19e30     00 08 02 FF 
19e34     00 FA 45 F5 | 	or	result1, ##68157440
19e38     44 00 00 FF 
19e3c     38 E4 05 F1 | 	add	objptr, ##34872
19e40     F2 FA 61 FC | 	wrlong	result1, objptr
19e44     44 00 00 FF 
19e48     38 E4 85 F1 | 	sub	objptr, ##34872
19e4c     F2 FA 01 F6 | 	mov	result1, objptr
19e50     00 10 02 FF 
19e54     00 FA 45 F5 | 	or	result1, ##69206016
19e58     44 00 00 FF 
19e5c     48 E4 05 F1 | 	add	objptr, ##34888
19e60     F2 FA 61 FC | 	wrlong	result1, objptr
19e64     44 00 00 FF 
19e68     48 E4 85 F1 | 	sub	objptr, ##34888
19e6c     F2 FA 01 F6 | 	mov	result1, objptr
19e70     00 18 02 FF 
19e74     00 FA 45 F5 | 	or	result1, ##70254592
19e78     44 00 00 FF 
19e7c     44 E4 05 F1 | 	add	objptr, ##34884
19e80     F2 FA 61 FC | 	wrlong	result1, objptr
19e84     44 00 00 FF 
19e88     44 E4 85 F1 | 	sub	objptr, ##34884
19e8c     F2 FA 01 F6 | 	mov	result1, objptr
19e90     00 20 02 FF 
19e94     00 FA 45 F5 | 	or	result1, ##71303168
19e98     44 00 00 FF 
19e9c     40 E4 05 F1 | 	add	objptr, ##34880
19ea0     F2 FA 61 FC | 	wrlong	result1, objptr
19ea4     44 00 00 FF 
19ea8     40 E4 85 F1 | 	sub	objptr, ##34880
19eac     F2 FA 01 F6 | 	mov	result1, objptr
19eb0     00 28 02 FF 
19eb4     00 FA 45 F5 | 	or	result1, ##72351744
19eb8     44 00 00 FF 
19ebc     4C E4 05 F1 | 	add	objptr, ##34892
19ec0     F2 FA 61 FC | 	wrlong	result1, objptr
19ec4     44 00 00 FF 
19ec8     4C E4 85 F1 | 	sub	objptr, ##34892
19ecc     F2 FA 01 F6 | 	mov	result1, objptr
19ed0     00 30 02 FF 
19ed4     00 FA 45 F5 | 	or	result1, ##73400320
19ed8     44 00 00 FF 
19edc     50 E4 05 F1 | 	add	objptr, ##34896
19ee0     F2 FA 61 FC | 	wrlong	result1, objptr
19ee4     44 00 00 FF 
19ee8     50 E4 85 F1 | 	sub	objptr, ##34896
19eec     F2 FA 01 F6 | 	mov	result1, objptr
19ef0     00 38 02 FF 
19ef4     00 FA 45 F5 | 	or	result1, ##74448896
19ef8     43 00 00 FF 
19efc     E4 E4 05 F1 | 	add	objptr, ##34532
19f00     F2 FA 61 FC | 	wrlong	result1, objptr
19f04     43 00 00 FF 
19f08     E4 E4 85 F1 | 	sub	objptr, ##34532
19f0c     F2 FA 01 F6 | 	mov	result1, objptr
19f10     00 40 02 FF 
19f14     00 FA 45 F5 | 	or	result1, ##75497472
19f18     44 00 00 FF 
19f1c     68 E4 05 F1 | 	add	objptr, ##34920
19f20     F2 FA 61 FC | 	wrlong	result1, objptr
19f24     44 00 00 FF 
19f28     68 E4 85 F1 | 	sub	objptr, ##34920
19f2c     F2 FA 01 F6 | 	mov	result1, objptr
19f30     00 48 02 FF 
19f34     00 FA 45 F5 | 	or	result1, ##76546048
19f38     44 00 00 FF 
19f3c     78 E4 05 F1 | 	add	objptr, ##34936
19f40     F2 FA 61 FC | 	wrlong	result1, objptr
19f44     44 00 00 FF 
19f48     78 E4 85 F1 | 	sub	objptr, ##34936
19f4c     F2 FA 01 F6 | 	mov	result1, objptr
19f50     00 50 02 FF 
19f54     00 FA 45 F5 | 	or	result1, ##77594624
19f58     44 00 00 FF 
19f5c     7C E4 05 F1 | 	add	objptr, ##34940
19f60     F2 FA 61 FC | 	wrlong	result1, objptr
19f64     44 00 00 FF 
19f68     7C E4 85 F1 | 	sub	objptr, ##34940
19f6c     F2 FA 01 F6 | 	mov	result1, objptr
19f70     00 58 02 FF 
19f74     00 FA 45 F5 | 	or	result1, ##78643200
19f78     44 00 00 FF 
19f7c     74 E4 05 F1 | 	add	objptr, ##34932
19f80     F2 FA 61 FC | 	wrlong	result1, objptr
19f84     44 00 00 FF 
19f88     74 E4 85 F1 | 	sub	objptr, ##34932
19f8c     F2 FA 01 F6 | 	mov	result1, objptr
19f90     00 60 02 FF 
19f94     00 FA 45 F5 | 	or	result1, ##79691776
19f98     44 00 00 FF 
19f9c     6C E4 05 F1 | 	add	objptr, ##34924
19fa0     F2 FA 61 FC | 	wrlong	result1, objptr
19fa4     44 00 00 FF 
19fa8     6C E4 85 F1 | 	sub	objptr, ##34924
19fac     F2 FA 01 F6 | 	mov	result1, objptr
19fb0     00 68 02 FF 
19fb4     00 FA 45 F5 | 	or	result1, ##80740352
19fb8     44 00 00 FF 
19fbc     70 E4 05 F1 | 	add	objptr, ##34928
19fc0     F2 FA 61 FC | 	wrlong	result1, objptr
19fc4     44 00 00 FF 
19fc8     70 E4 85 F1 | 	sub	objptr, ##34928
19fcc     F2 FA 01 F6 | 	mov	result1, objptr
19fd0     00 70 02 FF 
19fd4     00 FA 45 F5 | 	or	result1, ##81788928
19fd8     44 00 00 FF 
19fdc     80 E4 05 F1 | 	add	objptr, ##34944
19fe0     F2 FA 61 FC | 	wrlong	result1, objptr
19fe4     44 00 00 FF 
19fe8     80 E4 85 F1 | 	sub	objptr, ##34944
19fec     F2 FA 01 F6 | 	mov	result1, objptr
19ff0     00 78 02 FF 
19ff4     00 FA 45 F5 | 	or	result1, ##82837504
19ff8     44 00 00 FF 
19ffc     84 E4 05 F1 | 	add	objptr, ##34948
1a000     F2 FA 61 FC | 	wrlong	result1, objptr
1a004     44 00 00 FF 
1a008     84 E4 85 F1 | 	sub	objptr, ##34948
1a00c     F2 FA 01 F6 | 	mov	result1, objptr
1a010     00 80 02 FF 
1a014     00 FA 45 F5 | 	or	result1, ##83886080
1a018     44 00 00 FF 
1a01c     88 E4 05 F1 | 	add	objptr, ##34952
1a020     F2 FA 61 FC | 	wrlong	result1, objptr
1a024     44 00 00 FF 
1a028     88 E4 85 F1 | 	sub	objptr, ##34952
1a02c     F2 FA 01 F6 | 	mov	result1, objptr
1a030     00 88 02 FF 
1a034     00 FA 45 F5 | 	or	result1, ##84934656
1a038     44 00 00 FF 
1a03c     8C E4 05 F1 | 	add	objptr, ##34956
1a040     F2 FA 61 FC | 	wrlong	result1, objptr
1a044     44 00 00 FF 
1a048     8C E4 85 F1 | 	sub	objptr, ##34956
1a04c     F2 FA 01 F6 | 	mov	result1, objptr
1a050     00 90 02 FF 
1a054     00 FA 45 F5 | 	or	result1, ##85983232
1a058     44 00 00 FF 
1a05c     90 E4 05 F1 | 	add	objptr, ##34960
1a060     F2 FA 61 FC | 	wrlong	result1, objptr
1a064     44 00 00 FF 
1a068     90 E4 85 F1 | 	sub	objptr, ##34960
1a06c     F2 FA 01 F6 | 	mov	result1, objptr
1a070     00 98 02 FF 
1a074     00 FA 45 F5 | 	or	result1, ##87031808
1a078     44 00 00 FF 
1a07c     94 E4 05 F1 | 	add	objptr, ##34964
1a080     F2 FA 61 FC | 	wrlong	result1, objptr
1a084     44 00 00 FF 
1a088     94 E4 85 F1 | 	sub	objptr, ##34964
1a08c     F2 FA 01 F6 | 	mov	result1, objptr
1a090     00 A0 02 FF 
1a094     00 FA 45 F5 | 	or	result1, ##88080384
1a098     44 00 00 FF 
1a09c     98 E4 05 F1 | 	add	objptr, ##34968
1a0a0     F2 FA 61 FC | 	wrlong	result1, objptr
1a0a4     44 00 00 FF 
1a0a8     98 E4 85 F1 | 	sub	objptr, ##34968
1a0ac     F2 FA 01 F6 | 	mov	result1, objptr
1a0b0     00 A8 02 FF 
1a0b4     00 FA 45 F5 | 	or	result1, ##89128960
1a0b8     44 00 00 FF 
1a0bc     9C E4 05 F1 | 	add	objptr, ##34972
1a0c0     F2 FA 61 FC | 	wrlong	result1, objptr
1a0c4     44 00 00 FF 
1a0c8     9C E4 85 F1 | 	sub	objptr, ##34972
1a0cc     F2 FA 01 F6 | 	mov	result1, objptr
1a0d0     00 B0 02 FF 
1a0d4     00 FA 45 F5 | 	or	result1, ##90177536
1a0d8     44 00 00 FF 
1a0dc     A8 E4 05 F1 | 	add	objptr, ##34984
1a0e0     F2 FA 61 FC | 	wrlong	result1, objptr
1a0e4     44 00 00 FF 
1a0e8     A8 E4 85 F1 | 	sub	objptr, ##34984
1a0ec     F2 FA 01 F6 | 	mov	result1, objptr
1a0f0     00 B8 02 FF 
1a0f4     00 FA 45 F5 | 	or	result1, ##91226112
1a0f8     44 00 00 FF 
1a0fc     A0 E4 05 F1 | 	add	objptr, ##34976
1a100     F2 FA 61 FC | 	wrlong	result1, objptr
1a104     44 00 00 FF 
1a108     A0 E4 85 F1 | 	sub	objptr, ##34976
1a10c     F2 FA 01 F6 | 	mov	result1, objptr
1a110     00 C0 02 FF 
1a114     00 FA 45 F5 | 	or	result1, ##92274688
1a118     44 00 00 FF 
1a11c     A4 E4 05 F1 | 	add	objptr, ##34980
1a120     F2 FA 61 FC | 	wrlong	result1, objptr
1a124     44 00 00 FF 
1a128     A4 E4 85 F1 | 	sub	objptr, ##34980
1a12c     F2 FA 01 F6 | 	mov	result1, objptr
1a130     00 C8 02 FF 
1a134     00 FA 45 F5 | 	or	result1, ##93323264
1a138     44 00 00 FF 
1a13c     AC E4 05 F1 | 	add	objptr, ##34988
1a140     F2 FA 61 FC | 	wrlong	result1, objptr
1a144     44 00 00 FF 
1a148     AC E4 85 F1 | 	sub	objptr, ##34988
1a14c     F2 FA 01 F6 | 	mov	result1, objptr
1a150     00 D0 02 FF 
1a154     00 FA 45 F5 | 	or	result1, ##94371840
1a158     44 00 00 FF 
1a15c     54 E4 05 F1 | 	add	objptr, ##34900
1a160     F2 FA 61 FC | 	wrlong	result1, objptr
1a164     44 00 00 FF 
1a168     54 E4 85 F1 | 	sub	objptr, ##34900
1a16c     F2 FA 01 F6 | 	mov	result1, objptr
1a170     00 D8 02 FF 
1a174     00 FA 45 F5 | 	or	result1, ##95420416
1a178     44 00 00 FF 
1a17c     5C E4 05 F1 | 	add	objptr, ##34908
1a180     F2 FA 61 FC | 	wrlong	result1, objptr
1a184     44 00 00 FF 
1a188     5C E4 85 F1 | 	sub	objptr, ##34908
1a18c     F2 FA 01 F6 | 	mov	result1, objptr
1a190     00 E0 02 FF 
1a194     00 FA 45 F5 | 	or	result1, ##96468992
1a198     44 00 00 FF 
1a19c     60 E4 05 F1 | 	add	objptr, ##34912
1a1a0     F2 FA 61 FC | 	wrlong	result1, objptr
1a1a4     44 00 00 FF 
1a1a8     60 E4 85 F1 | 	sub	objptr, ##34912
1a1ac     F2 FA 01 F6 | 	mov	result1, objptr
1a1b0     00 E8 02 FF 
1a1b4     00 FA 45 F5 | 	or	result1, ##97517568
1a1b8     44 00 00 FF 
1a1bc     B0 E4 05 F1 | 	add	objptr, ##34992
1a1c0     F2 FA 61 FC | 	wrlong	result1, objptr
1a1c4     44 00 00 FF 
1a1c8     B0 E4 85 F1 | 	sub	objptr, ##34992
1a1cc     F2 FA 01 F6 | 	mov	result1, objptr
1a1d0     00 F0 02 FF 
1a1d4     00 FA 45 F5 | 	or	result1, ##98566144
1a1d8     44 00 00 FF 
1a1dc     B4 E4 05 F1 | 	add	objptr, ##34996
1a1e0     F2 FA 61 FC | 	wrlong	result1, objptr
1a1e4     44 00 00 FF 
1a1e8     B4 E4 85 F1 | 	sub	objptr, ##34996
1a1ec     F2 FA 01 F6 | 	mov	result1, objptr
1a1f0     00 F8 02 FF 
1a1f4     00 FA 45 F5 | 	or	result1, ##99614720
1a1f8     44 00 00 FF 
1a1fc     B8 E4 05 F1 | 	add	objptr, ##35000
1a200     F2 FA 61 FC | 	wrlong	result1, objptr
1a204     44 00 00 FF 
1a208     B8 E4 85 F1 | 	sub	objptr, ##35000
1a20c     F2 FA 01 F6 | 	mov	result1, objptr
1a210     39 FA 25 F4 | 	bith	result1, #57
1a214     44 00 00 FF 
1a218     64 E4 05 F1 | 	add	objptr, ##34916
1a21c     F2 FA 61 FC | 	wrlong	result1, objptr
1a220     44 00 00 FF 
1a224     64 E4 85 F1 | 	sub	objptr, ##34916
1a228     F2 FA 01 F6 | 	mov	result1, objptr
1a22c     00 08 03 FF 
1a230     00 FA 45 F5 | 	or	result1, ##101711872
1a234     44 00 00 FF 
1a238     C8 E4 05 F1 | 	add	objptr, ##35016
1a23c     F2 FA 61 FC | 	wrlong	result1, objptr
1a240     44 00 00 FF 
1a244     C8 E4 85 F1 | 	sub	objptr, ##35016
1a248     F2 FA 01 F6 | 	mov	result1, objptr
1a24c     00 10 03 FF 
1a250     00 FA 45 F5 | 	or	result1, ##102760448
1a254     44 00 00 FF 
1a258     D0 E4 05 F1 | 	add	objptr, ##35024
1a25c     F2 FA 61 FC | 	wrlong	result1, objptr
1a260     44 00 00 FF 
1a264     D0 E4 85 F1 | 	sub	objptr, ##35024
1a268     F2 FA 01 F6 | 	mov	result1, objptr
1a26c     00 18 03 FF 
1a270     00 FA 45 F5 | 	or	result1, ##103809024
1a274     44 00 00 FF 
1a278     C4 E4 05 F1 | 	add	objptr, ##35012
1a27c     F2 FA 61 FC | 	wrlong	result1, objptr
1a280     44 00 00 FF 
1a284     C4 E4 85 F1 | 	sub	objptr, ##35012
1a288     F2 FA 01 F6 | 	mov	result1, objptr
1a28c     00 20 03 FF 
1a290     00 FA 45 F5 | 	or	result1, ##104857600
1a294     44 00 00 FF 
1a298     C0 E4 05 F1 | 	add	objptr, ##35008
1a29c     F2 FA 61 FC | 	wrlong	result1, objptr
1a2a0     44 00 00 FF 
1a2a4     C0 E4 85 F1 | 	sub	objptr, ##35008
1a2a8     F2 FA 01 F6 | 	mov	result1, objptr
1a2ac     00 28 03 FF 
1a2b0     00 FA 45 F5 | 	or	result1, ##105906176
1a2b4     44 00 00 FF 
1a2b8     BC E4 05 F1 | 	add	objptr, ##35004
1a2bc     F2 FA 61 FC | 	wrlong	result1, objptr
1a2c0     44 00 00 FF 
1a2c4     BC E4 85 F1 | 	sub	objptr, ##35004
1a2c8     F2 FA 01 F6 | 	mov	result1, objptr
1a2cc     00 30 03 FF 
1a2d0     00 FA 45 F5 | 	or	result1, ##106954752
1a2d4     44 00 00 FF 
1a2d8     CC E4 05 F1 | 	add	objptr, ##35020
1a2dc     F2 FA 61 FC | 	wrlong	result1, objptr
1a2e0     44 00 00 FF 
1a2e4     CC E4 85 F1 | 	sub	objptr, ##35020
1a2e8     F2 FA 01 F6 | 	mov	result1, objptr
1a2ec     00 38 03 FF 
1a2f0     00 FA 45 F5 | 	or	result1, ##108003328
1a2f4     44 00 00 FF 
1a2f8     D4 E4 05 F1 | 	add	objptr, ##35028
1a2fc     F2 FA 61 FC | 	wrlong	result1, objptr
1a300     44 00 00 FF 
1a304     D4 E4 85 F1 | 	sub	objptr, ##35028
1a308     F2 FA 01 F6 | 	mov	result1, objptr
1a30c     00 40 03 FF 
1a310     00 FA 45 F5 | 	or	result1, ##109051904
1a314     44 00 00 FF 
1a318     D8 E4 05 F1 | 	add	objptr, ##35032
1a31c     F2 FA 61 FC | 	wrlong	result1, objptr
1a320     44 00 00 FF 
1a324     D8 E4 85 F1 | 	sub	objptr, ##35032
1a328     F2 FA 01 F6 | 	mov	result1, objptr
1a32c     00 48 03 FF 
1a330     00 FA 45 F5 | 	or	result1, ##110100480
1a334     44 00 00 FF 
1a338     DC E4 05 F1 | 	add	objptr, ##35036
1a33c     F2 FA 61 FC | 	wrlong	result1, objptr
1a340     44 00 00 FF 
1a344     DC E4 85 F1 | 	sub	objptr, ##35036
1a348     F2 FA 01 F6 | 	mov	result1, objptr
1a34c     00 50 03 FF 
1a350     00 FA 45 F5 | 	or	result1, ##111149056
1a354     44 00 00 FF 
1a358     E4 E4 05 F1 | 	add	objptr, ##35044
1a35c     F2 FA 61 FC | 	wrlong	result1, objptr
1a360     44 00 00 FF 
1a364     E4 E4 85 F1 | 	sub	objptr, ##35044
1a368     F2 FA 01 F6 | 	mov	result1, objptr
1a36c     00 58 03 FF 
1a370     00 FA 45 F5 | 	or	result1, ##112197632
1a374     44 00 00 FF 
1a378     E8 E4 05 F1 | 	add	objptr, ##35048
1a37c     F2 FA 61 FC | 	wrlong	result1, objptr
1a380     44 00 00 FF 
1a384     E8 E4 85 F1 | 	sub	objptr, ##35048
1a388     F2 FA 01 F6 | 	mov	result1, objptr
1a38c     00 60 03 FF 
1a390     00 FA 45 F5 | 	or	result1, ##113246208
1a394     44 00 00 FF 
1a398     EC E4 05 F1 | 	add	objptr, ##35052
1a39c     F2 FA 61 FC | 	wrlong	result1, objptr
1a3a0     44 00 00 FF 
1a3a4     EC E4 85 F1 | 	sub	objptr, ##35052
1a3a8     F2 FA 01 F6 | 	mov	result1, objptr
1a3ac     00 68 03 FF 
1a3b0     00 FA 45 F5 | 	or	result1, ##114294784
1a3b4     44 00 00 FF 
1a3b8     F0 E4 05 F1 | 	add	objptr, ##35056
1a3bc     F2 FA 61 FC | 	wrlong	result1, objptr
1a3c0     44 00 00 FF 
1a3c4     F0 E4 85 F1 | 	sub	objptr, ##35056
1a3c8     F2 FA 01 F6 | 	mov	result1, objptr
1a3cc     00 70 03 FF 
1a3d0     00 FA 45 F5 | 	or	result1, ##115343360
1a3d4     44 00 00 FF 
1a3d8     F4 E4 05 F1 | 	add	objptr, ##35060
1a3dc     F2 FA 61 FC | 	wrlong	result1, objptr
1a3e0     44 00 00 FF 
1a3e4     F4 E4 85 F1 | 	sub	objptr, ##35060
1a3e8     F2 FA 01 F6 | 	mov	result1, objptr
1a3ec     00 78 03 FF 
1a3f0     00 FA 45 F5 | 	or	result1, ##116391936
1a3f4     44 00 00 FF 
1a3f8     F8 E4 05 F1 | 	add	objptr, ##35064
1a3fc     F2 FA 61 FC | 	wrlong	result1, objptr
1a400     44 00 00 FF 
1a404     F8 E4 85 F1 | 	sub	objptr, ##35064
1a408     F2 FA 01 F6 | 	mov	result1, objptr
1a40c     58 FA 25 F4 | 	bith	result1, #88
1a410     44 00 00 FF 
1a414     FC E4 05 F1 | 	add	objptr, ##35068
1a418     F2 FA 61 FC | 	wrlong	result1, objptr
1a41c     44 00 00 FF 
1a420     FC E4 85 F1 | 	sub	objptr, ##35068
1a424     F2 FA 01 F6 | 	mov	result1, objptr
1a428     00 88 03 FF 
1a42c     00 FA 45 F5 | 	or	result1, ##118489088
1a430     44 00 00 FF 
1a434     00 E5 05 F1 | 	add	objptr, ##35072
1a438     F2 FA 61 FC | 	wrlong	result1, objptr
1a43c     44 00 00 FF 
1a440     00 E5 85 F1 | 	sub	objptr, ##35072
1a444     F2 FA 01 F6 | 	mov	result1, objptr
1a448     00 90 03 FF 
1a44c     00 FA 45 F5 | 	or	result1, ##119537664
1a450     44 00 00 FF 
1a454     E0 E4 05 F1 | 	add	objptr, ##35040
1a458     F2 FA 61 FC | 	wrlong	result1, objptr
1a45c     44 00 00 FF 
1a460     E0 E4 85 F1 | 	sub	objptr, ##35040
1a464     F2 FA 01 F6 | 	mov	result1, objptr
1a468     00 98 03 FF 
1a46c     00 FA 45 F5 | 	or	result1, ##120586240
1a470     43 00 00 FF 
1a474     D8 E4 05 F1 | 	add	objptr, ##34520
1a478     F2 FA 61 FC | 	wrlong	result1, objptr
1a47c     43 00 00 FF 
1a480     D8 E4 85 F1 | 	sub	objptr, ##34520
1a484     F2 FA 01 F6 | 	mov	result1, objptr
1a488     00 A0 03 FF 
1a48c     00 FA 45 F5 | 	or	result1, ##121634816
1a490     44 00 00 FF 
1a494     04 E5 05 F1 | 	add	objptr, ##35076
1a498     F2 FA 61 FC | 	wrlong	result1, objptr
1a49c     44 00 00 FF 
1a4a0     04 E5 85 F1 | 	sub	objptr, ##35076
1a4a4     F2 FA 01 F6 | 	mov	result1, objptr
1a4a8     00 A8 03 FF 
1a4ac     00 FA 45 F5 | 	or	result1, ##122683392
1a4b0     44 00 00 FF 
1a4b4     08 E5 05 F1 | 	add	objptr, ##35080
1a4b8     F2 FA 61 FC | 	wrlong	result1, objptr
1a4bc     44 00 00 FF 
1a4c0     08 E5 85 F1 | 	sub	objptr, ##35080
1a4c4     F2 FA 01 F6 | 	mov	result1, objptr
1a4c8     00 B0 03 FF 
1a4cc     00 FA 45 F5 | 	or	result1, ##123731968
1a4d0     44 00 00 FF 
1a4d4     1C E5 05 F1 | 	add	objptr, ##35100
1a4d8     F2 FA 61 FC | 	wrlong	result1, objptr
1a4dc     44 00 00 FF 
1a4e0     1C E5 85 F1 | 	sub	objptr, ##35100
1a4e4     F2 FA 01 F6 | 	mov	result1, objptr
1a4e8     00 B8 03 FF 
1a4ec     00 FA 45 F5 | 	or	result1, ##124780544
1a4f0     44 00 00 FF 
1a4f4     18 E5 05 F1 | 	add	objptr, ##35096
1a4f8     F2 FA 61 FC | 	wrlong	result1, objptr
1a4fc     44 00 00 FF 
1a500     18 E5 85 F1 | 	sub	objptr, ##35096
1a504     F2 FA 01 F6 | 	mov	result1, objptr
1a508     77 FA 25 F4 | 	bith	result1, #119
1a50c     44 00 00 FF 
1a510     10 E5 05 F1 | 	add	objptr, ##35088
1a514     F2 FA 61 FC | 	wrlong	result1, objptr
1a518     44 00 00 FF 
1a51c     10 E5 85 F1 | 	sub	objptr, ##35088
1a520     F2 FA 01 F6 | 	mov	result1, objptr
1a524     00 C8 03 FF 
1a528     00 FA 45 F5 | 	or	result1, ##126877696
1a52c     44 00 00 FF 
1a530     0C E5 05 F1 | 	add	objptr, ##35084
1a534     F2 FA 61 FC | 	wrlong	result1, objptr
1a538     44 00 00 FF 
1a53c     0C E5 85 F1 | 	sub	objptr, ##35084
1a540     F2 FA 01 F6 | 	mov	result1, objptr
1a544     00 D0 03 FF 
1a548     00 FA 45 F5 | 	or	result1, ##127926272
1a54c     44 00 00 FF 
1a550     2C E5 05 F1 | 	add	objptr, ##35116
1a554     F2 FA 61 FC | 	wrlong	result1, objptr
1a558     44 00 00 FF 
1a55c     2C E5 85 F1 | 	sub	objptr, ##35116
1a560     F2 FA 01 F6 | 	mov	result1, objptr
1a564     00 D8 03 FF 
1a568     00 FA 45 F5 | 	or	result1, ##128974848
1a56c     44 00 00 FF 
1a570     20 E5 05 F1 | 	add	objptr, ##35104
1a574     F2 FA 61 FC | 	wrlong	result1, objptr
1a578     44 00 00 FF 
1a57c     20 E5 85 F1 | 	sub	objptr, ##35104
1a580     F2 FA 01 F6 | 	mov	result1, objptr
1a584     96 FA 25 F4 | 	bith	result1, #150
1a588     44 00 00 FF 
1a58c     24 E5 05 F1 | 	add	objptr, ##35108
1a590     F2 FA 61 FC | 	wrlong	result1, objptr
1a594     44 00 00 FF 
1a598     24 E5 85 F1 | 	sub	objptr, ##35108
1a59c     F2 FA 01 F6 | 	mov	result1, objptr
1a5a0     00 E8 03 FF 
1a5a4     00 FA 45 F5 | 	or	result1, ##131072000
1a5a8     44 00 00 FF 
1a5ac     28 E5 05 F1 | 	add	objptr, ##35112
1a5b0     F2 FA 61 FC | 	wrlong	result1, objptr
1a5b4     44 00 00 FF 
1a5b8     28 E5 85 F1 | 	sub	objptr, ##35112
1a5bc     F2 FA 01 F6 | 	mov	result1, objptr
1a5c0     B5 FA 25 F4 | 	bith	result1, #181
1a5c4     44 00 00 FF 
1a5c8     30 E5 05 F1 | 	add	objptr, ##35120
1a5cc     F2 FA 61 FC | 	wrlong	result1, objptr
1a5d0     44 00 00 FF 
1a5d4     30 E5 85 F1 | 	sub	objptr, ##35120
1a5d8     F2 FA 01 F6 | 	mov	result1, objptr
1a5dc     D4 FA 25 F4 | 	bith	result1, #212
1a5e0     44 00 00 FF 
1a5e4     34 E5 05 F1 | 	add	objptr, ##35124
1a5e8     F2 FA 61 FC | 	wrlong	result1, objptr
1a5ec     44 00 00 FF 
1a5f0     34 E5 85 F1 | 	sub	objptr, ##35124
1a5f4     F2 FA 01 F6 | 	mov	result1, objptr
1a5f8     1B FA 25 F4 | 	bith	result1, #27
1a5fc     44 00 00 FF 
1a600     38 E5 05 F1 | 	add	objptr, ##35128
1a604     F2 FA 61 FC | 	wrlong	result1, objptr
1a608     44 00 00 FF 
1a60c     38 E5 85 F1 | 	sub	objptr, ##35128
1a610     F2 FA 01 F6 | 	mov	result1, objptr
1a614     00 08 04 FF 
1a618     00 FA 45 F5 | 	or	result1, ##135266304
1a61c     44 00 00 FF 
1a620     3C E5 05 F1 | 	add	objptr, ##35132
1a624     F2 FA 61 FC | 	wrlong	result1, objptr
1a628     44 00 00 FF 
1a62c     3C E5 85 F1 | 	sub	objptr, ##35132
1a630     F2 FA 01 F6 | 	mov	result1, objptr
1a634     00 10 04 FF 
1a638     00 FA 45 F5 | 	or	result1, ##136314880
1a63c     44 00 00 FF 
1a640     40 E5 05 F1 | 	add	objptr, ##35136
1a644     F2 FA 61 FC | 	wrlong	result1, objptr
1a648     44 00 00 FF 
1a64c     40 E5 85 F1 | 	sub	objptr, ##35136
1a650     F2 FA 01 F6 | 	mov	result1, objptr
1a654     00 18 04 FF 
1a658     00 FA 45 F5 | 	or	result1, ##137363456
1a65c     44 00 00 FF 
1a660     44 E5 05 F1 | 	add	objptr, ##35140
1a664     F2 FA 61 FC | 	wrlong	result1, objptr
1a668     44 00 00 FF 
1a66c     44 E5 85 F1 | 	sub	objptr, ##35140
1a670     F2 FA 01 F6 | 	mov	result1, objptr
1a674     00 20 04 FF 
1a678     00 FA 45 F5 | 	or	result1, ##138412032
1a67c     44 00 00 FF 
1a680     4C E5 05 F1 | 	add	objptr, ##35148
1a684     F2 FA 61 FC | 	wrlong	result1, objptr
1a688     44 00 00 FF 
1a68c     4C E5 85 F1 | 	sub	objptr, ##35148
1a690     F2 FA 01 F6 | 	mov	result1, objptr
1a694     00 28 04 FF 
1a698     00 FA 45 F5 | 	or	result1, ##139460608
1a69c     44 00 00 FF 
1a6a0     50 E5 05 F1 | 	add	objptr, ##35152
1a6a4     F2 FA 61 FC | 	wrlong	result1, objptr
1a6a8     44 00 00 FF 
1a6ac     50 E5 85 F1 | 	sub	objptr, ##35152
1a6b0     F2 FA 01 F6 | 	mov	result1, objptr
1a6b4     00 30 04 FF 
1a6b8     00 FA 45 F5 | 	or	result1, ##140509184
1a6bc     44 00 00 FF 
1a6c0     54 E5 05 F1 | 	add	objptr, ##35156
1a6c4     F2 FA 61 FC | 	wrlong	result1, objptr
1a6c8     44 00 00 FF 
1a6cc     54 E5 85 F1 | 	sub	objptr, ##35156
1a6d0     F2 FA 01 F6 | 	mov	result1, objptr
1a6d4     00 38 04 FF 
1a6d8     00 FA 45 F5 | 	or	result1, ##141557760
1a6dc     44 00 00 FF 
1a6e0     48 E5 05 F1 | 	add	objptr, ##35144
1a6e4     F2 FA 61 FC | 	wrlong	result1, objptr
1a6e8     44 00 00 FF 
1a6ec     48 E5 85 F1 | 	sub	objptr, ##35144
1a6f0     F2 FA 01 F6 | 	mov	result1, objptr
1a6f4     00 40 04 FF 
1a6f8     00 FA 45 F5 | 	or	result1, ##142606336
1a6fc     44 00 00 FF 
1a700     58 E5 05 F1 | 	add	objptr, ##35160
1a704     F2 FA 61 FC | 	wrlong	result1, objptr
1a708     44 00 00 FF 
1a70c     58 E5 85 F1 | 	sub	objptr, ##35160
1a710                 | _init_commands_ret
1a710     2D 00 64 FD | 	ret
1a714                 | 
1a714                 | ' 
1a714                 | ' ''--------------------------------Error strings -------------------------------------
1a714                 | ' sub init_audio
1a714                 | _init_audio
1a714     06 4A 05 F6 | 	mov	COUNT_, #6
1a718     A8 00 A0 FD | 	call	#pushregs_
1a71c     00 C0 1F FF 
1a720     00 1E 06 F6 | 	mov	local01, ##1065353216
1a724                 | ' 'for i=0 to 1023 : samplebuf(0,i)=round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
1a724                 | ' 'for i=0 to 511  : samplebuf(1,i)= -32512+127*i: samplebuf(1,512+i)=-samplebuf(1,i) : next i   		' 1 : triangle 
1a724                 | ' 'for i=0 to 1023 : samplebuf(2,i)= -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
1a724                 | ' 'for i=0 to 127  : samplebuf(3,i)= -32600 : next i : for i=128 to 1023 : samplebuf(3,i) =32600 : next i 	' 3 pulse 12.5%
1a724                 | ' 'for i=0 to 511  : samplebuf(4,i)= -32600 : next i : for i=512 to 1023 : samplebuf(4,i) =32600 : next i 	' 4 square
1a724                 | ' 'for i=0 to 255  : samplebuf(5,i)= -32600 : next i : for i=256 to 1023 : samplebuf(5,i) =32600 : next i 	' 5 pulse 25%
1a724                 | ' 'for i=0 to 1023 : samplebuf(6,i)= dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
1a724                 | ' 'for i=0 to 1023 : samplebuf(7,i)= dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
1a724                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
1a724     00 20 06 F6 | 	mov	local02, #0
1a728                 | LR__2120
1a728     10 23 02 F6 | 	mov	local03, local02
1a72c     01 22 66 F0 | 	shl	local03, #1
1a730     58 7F 23 FF 
1a734     00 24 06 F6 | 	mov	local04, ##1191096320
1a738     10 13 52 F6 | 	abs	arg01, local02 wc
1a73c     1F 26 C6 C9 |  if_b	decod	local05, #31
1a740     00 26 06 36 |  if_ae	mov	local05, #0
1a744     F8 77 B0 FD | 	call	#__system___float_fromuns
1a748     13 FB 61 F5 | 	xor	result1, local05
1a74c     FD 12 02 F6 | 	mov	arg01, result1
1a750     87 24 20 FF 
1a754     DB 15 06 F6 | 	mov	arg02, ##1078530011
1a758     E8 7B B0 FD | 	call	#__system___float_mul
1a75c     FD 12 02 F6 | 	mov	arg01, result1
1a760     00 00 22 FF 
1a764     00 14 06 F6 | 	mov	arg02, ##1140850688
1a768     DC 7D B0 FD | 	call	#__system___float_div
1a76c     FD 12 02 F6 | 	mov	arg01, result1
1a770     0C 85 B0 FD | 	call	#__system____builtin_sinf
1a774     FD 14 02 F6 | 	mov	arg02, result1
1a778     12 13 02 F6 | 	mov	arg01, local04
1a77c     C4 7B B0 FD | 	call	#__system___float_mul
1a780     FD 12 02 F6 | 	mov	arg01, result1
1a784     01 14 06 F6 | 	mov	arg02, #1
1a788     80 80 B0 FD | 	call	#__system___float_tointeger
1a78c     FD 14 02 F6 | 	mov	arg02, result1
1a790     11 13 02 F6 | 	mov	arg01, local03
1a794     68 0D B0 FD | 	call	#_psdpoke
1a798     01 20 06 F1 | 	add	local02, #1
1a79c     02 00 00 FF 
1a7a0     00 20 56 F2 | 	cmps	local02, ##1024 wc
1a7a4     80 FF 9F CD |  if_b	jmp	#LR__2120
1a7a8                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
1a7a8     00 20 06 F6 | 	mov	local02, #0
1a7ac                 | LR__2121
1a7ac     10 15 02 F6 | 	mov	arg02, local02
1a7b0     01 14 66 F0 | 	shl	arg02, #1
1a7b4     0B 12 C6 F9 | 	decod	arg01, #11
1a7b8     0A 13 02 F1 | 	add	arg01, arg02
1a7bc     10 25 02 F6 | 	mov	local04, local02
1a7c0     07 24 66 F0 | 	shl	local04, #7
1a7c4     10 25 82 F1 | 	sub	local04, local02
1a7c8     C0 FF 7F FF 
1a7cc     00 15 06 F6 | 	mov	arg02, ##-32512
1a7d0     12 15 02 F1 | 	add	arg02, local04
1a7d4     28 0D B0 FD | 	call	#_psdpoke
1a7d8     09 24 C6 F9 | 	decod	local04, #9
1a7dc     10 25 02 F1 | 	add	local04, local02
1a7e0     01 24 66 F0 | 	shl	local04, #1
1a7e4     0B 12 C6 F9 | 	decod	arg01, #11
1a7e8     12 13 02 F1 | 	add	arg01, local04
1a7ec     10 27 02 F6 | 	mov	local05, local02
1a7f0     07 26 66 F0 | 	shl	local05, #7
1a7f4     10 27 82 F1 | 	sub	local05, local02
1a7f8     3F 00 00 FF 
1a7fc     00 15 06 F6 | 	mov	arg02, ##32512
1a800     13 15 82 F1 | 	sub	arg02, local05
1a804     F8 0C B0 FD | 	call	#_psdpoke
1a808     01 20 06 F1 | 	add	local02, #1
1a80c     01 00 00 FF 
1a810     00 20 56 F2 | 	cmps	local02, ##512 wc
1a814     94 FF 9F CD |  if_b	jmp	#LR__2121
1a818                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
1a818     00 20 06 F6 | 	mov	local02, #0
1a81c                 | LR__2122
1a81c     10 27 02 F6 | 	mov	local05, local02
1a820     01 26 66 F0 | 	shl	local05, #1
1a824     0C 12 C6 F9 | 	decod	arg01, #12
1a828     13 13 02 F1 | 	add	arg01, local05
1a82c     10 27 02 F6 | 	mov	local05, local02
1a830     06 26 66 F0 | 	shl	local05, #6
1a834     10 27 82 F1 | 	sub	local05, local02
1a838     C1 FF 7F FF 
1a83c     00 14 06 F6 | 	mov	arg02, ##-32256
1a840     13 15 02 F1 | 	add	arg02, local05
1a844     B8 0C B0 FD | 	call	#_psdpoke
1a848     01 20 06 F1 | 	add	local02, #1
1a84c     02 00 00 FF 
1a850     00 20 56 F2 | 	cmps	local02, ##1024 wc
1a854     C4 FF 9F CD |  if_b	jmp	#LR__2122
1a858                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
1a858     00 20 06 F6 | 	mov	local02, #0
1a85c                 | LR__2123
1a85c     10 27 02 F6 | 	mov	local05, local02
1a860     01 26 66 F0 | 	shl	local05, #1
1a864     0C 00 00 FF 
1a868     00 12 06 F6 | 	mov	arg01, ##6144
1a86c     13 13 02 F1 | 	add	arg01, local05
1a870     C0 FF 7F FF 
1a874     A8 14 06 F6 | 	mov	arg02, ##-32600
1a878     84 0C B0 FD | 	call	#_psdpoke
1a87c     01 20 06 F1 | 	add	local02, #1
1a880     80 20 56 F2 | 	cmps	local02, #128 wc
1a884     D4 FF 9F CD |  if_b	jmp	#LR__2123
1a888     80 20 06 F6 | 	mov	local02, #128
1a88c                 | LR__2124
1a88c     10 27 02 F6 | 	mov	local05, local02
1a890     01 26 66 F0 | 	shl	local05, #1
1a894     0C 00 00 FF 
1a898     00 12 06 F6 | 	mov	arg01, ##6144
1a89c     13 13 02 F1 | 	add	arg01, local05
1a8a0     3F 00 00 FF 
1a8a4     58 15 06 F6 | 	mov	arg02, ##32600
1a8a8     54 0C B0 FD | 	call	#_psdpoke
1a8ac     01 20 06 F1 | 	add	local02, #1
1a8b0     02 00 00 FF 
1a8b4     00 20 16 F2 | 	cmp	local02, ##1024 wc
1a8b8     D0 FF 9F CD |  if_b	jmp	#LR__2124
1a8bc                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
1a8bc     00 20 06 F6 | 	mov	local02, #0
1a8c0                 | LR__2125
1a8c0     10 27 02 F6 | 	mov	local05, local02
1a8c4     01 26 66 F0 | 	shl	local05, #1
1a8c8     0D 12 C6 F9 | 	decod	arg01, #13
1a8cc     13 13 02 F1 | 	add	arg01, local05
1a8d0     C0 FF 7F FF 
1a8d4     A8 14 06 F6 | 	mov	arg02, ##-32600
1a8d8     24 0C B0 FD | 	call	#_psdpoke
1a8dc     01 20 06 F1 | 	add	local02, #1
1a8e0     01 00 00 FF 
1a8e4     00 20 56 F2 | 	cmps	local02, ##512 wc
1a8e8     D4 FF 9F CD |  if_b	jmp	#LR__2125
1a8ec     09 20 C6 F9 | 	decod	local02, #9
1a8f0                 | LR__2126
1a8f0     10 27 02 F6 | 	mov	local05, local02
1a8f4     01 26 66 F0 | 	shl	local05, #1
1a8f8     0D 12 C6 F9 | 	decod	arg01, #13
1a8fc     13 13 02 F1 | 	add	arg01, local05
1a900     3F 00 00 FF 
1a904     58 15 06 F6 | 	mov	arg02, ##32600
1a908     F4 0B B0 FD | 	call	#_psdpoke
1a90c     01 20 06 F1 | 	add	local02, #1
1a910     02 00 00 FF 
1a914     00 20 16 F2 | 	cmp	local02, ##1024 wc
1a918     D4 FF 9F CD |  if_b	jmp	#LR__2126
1a91c                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
1a91c     00 20 06 F6 | 	mov	local02, #0
1a920                 | LR__2127
1a920     10 27 02 F6 | 	mov	local05, local02
1a924     01 26 66 F0 | 	shl	local05, #1
1a928     14 00 00 FF 
1a92c     00 12 06 F6 | 	mov	arg01, ##10240
1a930     13 13 02 F1 | 	add	arg01, local05
1a934     C0 FF 7F FF 
1a938     A8 14 06 F6 | 	mov	arg02, ##-32600
1a93c     C0 0B B0 FD | 	call	#_psdpoke
1a940     01 20 06 F1 | 	add	local02, #1
1a944     00 21 56 F2 | 	cmps	local02, #256 wc
1a948     D4 FF 9F CD |  if_b	jmp	#LR__2127
1a94c     00 21 06 F6 | 	mov	local02, #256
1a950                 | LR__2128
1a950     10 27 02 F6 | 	mov	local05, local02
1a954     01 26 66 F0 | 	shl	local05, #1
1a958     14 00 00 FF 
1a95c     00 12 06 F6 | 	mov	arg01, ##10240
1a960     13 13 02 F1 | 	add	arg01, local05
1a964     3F 00 00 FF 
1a968     58 15 06 F6 | 	mov	arg02, ##32600
1a96c     90 0B B0 FD | 	call	#_psdpoke
1a970     01 20 06 F1 | 	add	local02, #1
1a974     02 00 00 FF 
1a978     00 20 16 F2 | 	cmp	local02, ##1024 wc
1a97c     D0 FF 9F CD |  if_b	jmp	#LR__2128
1a980                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
1a980     18 00 00 FF 
1a984     00 20 06 F6 | 	mov	local02, ##12288
1a988                 | LR__2129
1a988     10 13 02 F6 | 	mov	arg01, local02
1a98c     00 14 06 F6 | 	mov	arg02, #0
1a990     24 0B B0 FD | 	call	#_pslpoke
1a994     04 20 06 F1 | 	add	local02, #4
1a998     77 00 00 FF 
1a99c     FD 21 56 F2 | 	cmps	local02, ##61437 wc
1a9a0     E4 FF 9F CD |  if_b	jmp	#LR__2129
1a9a4                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
1a9a4     00 20 06 F6 | 	mov	local02, #0
1a9a8                 | LR__2130
1a9a8     10 27 02 F6 | 	mov	local05, local02
1a9ac     01 26 66 F0 | 	shl	local05, #1
1a9b0     78 00 00 FF 
1a9b4     00 22 06 F6 | 	mov	local03, ##61440
1a9b8     13 23 02 F1 | 	add	local03, local05
1a9bc     14 00 00 FF 
1a9c0     C6 EA 05 F1 | 	add	ptr__dat__, ##10438
1a9c4     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1a9c8     14 00 00 FF 
1a9cc     C6 EA 85 F1 | 	sub	ptr__dat__, ##10438
1a9d0     10 12 06 F1 | 	add	arg01, #16
1a9d4     10 15 02 F6 | 	mov	arg02, local02
1a9d8     01 14 66 F0 | 	shl	arg02, #1
1a9dc     0A 13 02 F1 | 	add	arg01, arg02
1a9e0     09 15 E2 FA | 	rdword	arg02, arg01
1a9e4     11 13 02 F6 | 	mov	arg01, local03
1a9e8     14 0B B0 FD | 	call	#_psdpoke
1a9ec     01 20 06 F1 | 	add	local02, #1
1a9f0     02 00 00 FF 
1a9f4     00 20 56 F2 | 	cmps	local02, ##1024 wc
1a9f8     AC FF 9F CD |  if_b	jmp	#LR__2130
1a9fc                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
1a9fc     00 20 06 F6 | 	mov	local02, #0
1aa00                 | LR__2131
1aa00     10 27 02 F6 | 	mov	local05, local02
1aa04     01 26 66 F0 | 	shl	local05, #1
1aa08     7C 00 00 FF 
1aa0c     00 22 06 F6 | 	mov	local03, ##63488
1aa10     13 23 02 F1 | 	add	local03, local05
1aa14     10 00 00 FF 
1aa18     B6 EA 05 F1 | 	add	ptr__dat__, ##8374
1aa1c     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1aa20     10 00 00 FF 
1aa24     B6 EA 85 F1 | 	sub	ptr__dat__, ##8374
1aa28     10 12 06 F1 | 	add	arg01, #16
1aa2c     10 15 02 F6 | 	mov	arg02, local02
1aa30     01 14 66 F0 | 	shl	arg02, #1
1aa34     0A 13 02 F1 | 	add	arg01, arg02
1aa38     09 15 E2 FA | 	rdword	arg02, arg01
1aa3c     11 13 02 F6 | 	mov	arg01, local03
1aa40     BC 0A B0 FD | 	call	#_psdpoke
1aa44     01 20 06 F1 | 	add	local02, #1
1aa48     02 00 00 FF 
1aa4c     00 20 56 F2 | 	cmps	local02, ##1024 wc
1aa50     AC FF 9F CD |  if_b	jmp	#LR__2131
1aa54                 | ' 
1aa54                 | ' 
1aa54                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
1aa54     00 20 06 F6 | 	mov	local02, #0
1aa58     0C 00 00 FF 
1aa5c     D8 E4 05 F1 | 	add	objptr, ##6360
1aa60     97 18 48 FB | 	callpa	#(@LR__2133-@LR__2132)>>2,fcache_load_ptr_
1aa64                 | LR__2132
1aa64     10 27 02 F6 | 	mov	local05, local02
1aa68     01 26 66 F0 | 	shl	local05, #1
1aa6c     F2 26 02 F1 | 	add	local05, objptr
1aa70     10 23 02 F6 | 	mov	local03, local02
1aa74     08 22 66 F0 | 	shl	local03, #8
1aa78     7F 00 00 FF 
1aa7c     00 29 06 F6 | 	mov	local06, ##65280
1aa80     11 29 82 F1 | 	sub	local06, local03
1aa84     13 29 52 FC | 	wrword	local06, local05
1aa88     01 20 06 F1 | 	add	local02, #1
1aa8c     00 21 56 F2 | 	cmps	local02, #256 wc
1aa90     D0 FF 9F CD |  if_b	jmp	#LR__2132
1aa94                 | LR__2133
1aa94     0C 00 00 FF 
1aa98     D8 E4 85 F1 | 	sub	objptr, ##6360
1aa9c                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
1aa9c     00 20 06 F6 | 	mov	local02, #0
1aaa0                 | LR__2134
1aaa0     10 27 02 F6 | 	mov	local05, local02
1aaa4     01 26 66 F0 | 	shl	local05, #1
1aaa8     0D 00 00 FF 
1aaac     D8 E4 05 F1 | 	add	objptr, ##6872
1aab0     F2 26 02 F1 | 	add	local05, objptr
1aab4     80 BF 23 FF 
1aab8     00 12 06 F6 | 	mov	arg01, ##1199505408
1aabc     0F 15 02 F6 | 	mov	arg02, local01
1aac0     0D 00 00 FF 
1aac4     D8 E4 85 F1 | 	sub	objptr, ##6872
1aac8     78 78 B0 FD | 	call	#__system___float_mul
1aacc     FD 12 02 F6 | 	mov	arg01, result1
1aad0     01 14 06 F6 | 	mov	arg02, #1
1aad4     34 7D B0 FD | 	call	#__system___float_tointeger
1aad8     13 FB 51 FC | 	wrword	result1, local05
1aadc     0F 13 02 F6 | 	mov	arg01, local01
1aae0     CC BC 1F FF 
1aae4     9A 15 06 F6 | 	mov	arg02, ##1064933786
1aae8     58 78 B0 FD | 	call	#__system___float_mul
1aaec     FD 1E 02 F6 | 	mov	local01, result1
1aaf0     01 20 06 F1 | 	add	local02, #1
1aaf4     00 21 56 F2 | 	cmps	local02, #256 wc
1aaf8     A4 FF 9F CD |  if_b	jmp	#LR__2134
1aafc     0E 00 00 FF 
1ab00     D6 E4 05 F1 | 	add	objptr, ##7382
1ab04     F2 00 58 FC | 	wrword	#0, objptr
1ab08                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
1ab08     00 20 06 F6 | 	mov	local02, #0
1ab0c     02 E4 05 F1 | 	add	objptr, #2
1ab10     97 10 48 FB | 	callpa	#(@LR__2136-@LR__2135)>>2,fcache_load_ptr_
1ab14                 | LR__2135
1ab14     10 27 02 F6 | 	mov	local05, local02
1ab18     01 26 66 F0 | 	shl	local05, #1
1ab1c     F2 26 02 F1 | 	add	local05, objptr
1ab20     7F 00 80 FF 
1ab24     13 01 5A FC | 	wrword	##65280, local05
1ab28     01 20 06 F1 | 	add	local02, #1
1ab2c     FF 20 56 F2 | 	cmps	local02, #255 wc
1ab30     E0 FF 9F CD |  if_b	jmp	#LR__2135
1ab34                 | LR__2136
1ab34     FE E5 05 F1 | 	add	objptr, #510
1ab38     F2 00 58 FC | 	wrword	#0, objptr
1ab3c                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
1ab3c     00 20 06 F6 | 	mov	local02, #0
1ab40     02 E4 05 F1 | 	add	objptr, #2
1ab44     97 52 48 FB | 	callpa	#(@LR__2141-@LR__2137)>>2,fcache_load_ptr_
1ab48                 | LR__2137
1ab48     10 27 02 F6 | 	mov	local05, local02
1ab4c     01 26 66 F0 | 	shl	local05, #1
1ab50     F2 26 02 F1 | 	add	local05, objptr
1ab54     10 29 02 F6 | 	mov	local06, local02
1ab58     0C 28 66 F0 | 	shl	local06, #12
1ab5c     13 29 52 FC | 	wrword	local06, local05
1ab60     01 20 06 F1 | 	add	local02, #1
1ab64     10 20 56 F2 | 	cmps	local02, #16 wc
1ab68     DC FF 9F CD |  if_b	jmp	#LR__2137
1ab6c                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
1ab6c     10 20 06 F6 | 	mov	local02, #16
1ab70                 | LR__2138
1ab70     10 27 02 F6 | 	mov	local05, local02
1ab74     01 26 66 F0 | 	shl	local05, #1
1ab78     F2 26 02 F1 | 	add	local05, objptr
1ab7c     7F 00 80 FF 
1ab80     13 01 5A FC | 	wrword	##65280, local05
1ab84     01 20 06 F1 | 	add	local02, #1
1ab88     F0 20 16 F2 | 	cmp	local02, #240 wc
1ab8c     E0 FF 9F CD |  if_b	jmp	#LR__2138
1ab90                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
1ab90     F0 20 06 F6 | 	mov	local02, #240
1ab94                 | LR__2139
1ab94     10 27 02 F6 | 	mov	local05, local02
1ab98     01 26 66 F0 | 	shl	local05, #1
1ab9c     F2 26 02 F1 | 	add	local05, objptr
1aba0     FF 22 06 F6 | 	mov	local03, #255
1aba4     10 23 82 F1 | 	sub	local03, local02
1aba8     0C 22 66 F0 | 	shl	local03, #12
1abac     13 23 52 FC | 	wrword	local03, local05
1abb0     01 20 06 F1 | 	add	local02, #1
1abb4     00 21 16 F2 | 	cmp	local02, #256 wc
1abb8     D8 FF 9F CD |  if_b	jmp	#LR__2139
1abbc                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
1abbc     00 20 06 F6 | 	mov	local02, #0
1abc0     01 00 00 FF 
1abc4     00 E4 05 F1 | 	add	objptr, ##512
1abc8                 | LR__2140
1abc8     10 27 02 F6 | 	mov	local05, local02
1abcc     01 26 66 F0 | 	shl	local05, #1
1abd0     F2 26 02 F1 | 	add	local05, objptr
1abd4     10 29 02 F6 | 	mov	local06, local02
1abd8     08 28 66 F0 | 	shl	local06, #8
1abdc     13 29 52 FC | 	wrword	local06, local05
1abe0     01 20 06 F1 | 	add	local02, #1
1abe4     00 21 56 F2 | 	cmps	local02, #256 wc
1abe8     DC FF 9F CD |  if_b	jmp	#LR__2140
1abec                 | LR__2141
1abec     FE E5 05 F1 | 	add	objptr, #510
1abf0     F2 00 58 FC | 	wrword	#0, objptr
1abf4                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
1abf4     00 20 06 F6 | 	mov	local02, #0
1abf8     02 E4 05 F1 | 	add	objptr, #2
1abfc     97 6A 48 FB | 	callpa	#(@LR__2146-@LR__2142)>>2,fcache_load_ptr_
1ac00                 | LR__2142
1ac00     10 27 02 F6 | 	mov	local05, local02
1ac04     01 26 66 F0 | 	shl	local05, #1
1ac08     F2 26 02 F1 | 	add	local05, objptr
1ac0c     10 29 02 F6 | 	mov	local06, local02
1ac10     04 28 66 F0 | 	shl	local06, #4
1ac14     10 29 02 F1 | 	add	local06, local02
1ac18     04 28 66 F0 | 	shl	local06, #4
1ac1c     13 29 52 FC | 	wrword	local06, local05
1ac20     01 20 06 F1 | 	add	local02, #1
1ac24     F0 20 56 F2 | 	cmps	local02, #240 wc
1ac28     D4 FF 9F CD |  if_b	jmp	#LR__2142
1ac2c     F0 20 06 F6 | 	mov	local02, #240
1ac30                 | LR__2143
1ac30     10 27 02 F6 | 	mov	local05, local02
1ac34     01 26 66 F0 | 	shl	local05, #1
1ac38     F2 26 02 F1 | 	add	local05, objptr
1ac3c     FF 22 06 F6 | 	mov	local03, #255
1ac40     10 23 82 F1 | 	sub	local03, local02
1ac44     0C 22 66 F0 | 	shl	local03, #12
1ac48     13 23 52 FC | 	wrword	local03, local05
1ac4c     01 20 06 F1 | 	add	local02, #1
1ac50     00 21 16 F2 | 	cmp	local02, #256 wc
1ac54     D8 FF 9F CD |  if_b	jmp	#LR__2143
1ac58                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
1ac58     00 20 06 F6 | 	mov	local02, #0
1ac5c     01 00 00 FF 
1ac60     00 E4 05 F1 | 	add	objptr, ##512
1ac64                 | LR__2144
1ac64     10 27 02 F6 | 	mov	local05, local02
1ac68     01 26 66 F0 | 	shl	local05, #1
1ac6c     F2 26 02 F1 | 	add	local05, objptr
1ac70     10 29 02 F6 | 	mov	local06, local02
1ac74     09 28 66 F0 | 	shl	local06, #9
1ac78     13 29 52 FC | 	wrword	local06, local05
1ac7c     FF 26 06 F6 | 	mov	local05, #255
1ac80     10 27 82 F1 | 	sub	local05, local02
1ac84     01 26 66 F0 | 	shl	local05, #1
1ac88     F2 26 02 F1 | 	add	local05, objptr
1ac8c     10 29 02 F6 | 	mov	local06, local02
1ac90     09 28 66 F0 | 	shl	local06, #9
1ac94     13 29 52 FC | 	wrword	local06, local05
1ac98     01 20 06 F1 | 	add	local02, #1
1ac9c     80 20 56 F2 | 	cmps	local02, #128 wc
1aca0     C0 FF 9F CD |  if_b	jmp	#LR__2144
1aca4                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
1aca4     00 20 06 F6 | 	mov	local02, #0
1aca8     01 00 00 FF 
1acac     00 E4 05 F1 | 	add	objptr, ##512
1acb0                 | LR__2145
1acb0     10 27 02 F6 | 	mov	local05, local02
1acb4     01 26 66 F0 | 	shl	local05, #1
1acb8     F2 26 02 F1 | 	add	local05, objptr
1acbc     10 29 02 F6 | 	mov	local06, local02
1acc0     0D 28 66 F0 | 	shl	local06, #13
1acc4     13 29 52 FC | 	wrword	local06, local05
1acc8     01 20 06 F1 | 	add	local02, #1
1accc     08 20 56 F2 | 	cmps	local02, #8 wc
1acd0     DC FF 9F CD |  if_b	jmp	#LR__2145
1acd4                 | LR__2146
1acd4                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
1acd4     08 20 06 F6 | 	mov	local02, #8
1acd8     97 42 48 FB | 	callpa	#(@LR__2150-@LR__2147)>>2,fcache_load_ptr_
1acdc                 | LR__2147
1acdc     10 27 02 F6 | 	mov	local05, local02
1ace0     01 26 66 F0 | 	shl	local05, #1
1ace4     F2 26 02 F1 | 	add	local05, objptr
1ace8     10 1F 02 F6 | 	mov	local01, local02
1acec     08 1E 86 F1 | 	sub	local01, #8
1acf0     0B 1E 66 F0 | 	shl	local01, #11
1acf4     7F 00 00 FF 
1acf8     00 29 06 F6 | 	mov	local06, ##65280
1acfc     0F 29 82 F1 | 	sub	local06, local01
1ad00     13 29 52 FC | 	wrword	local06, local05
1ad04     01 20 06 F1 | 	add	local02, #1
1ad08     18 20 16 F2 | 	cmp	local02, #24 wc
1ad0c     CC FF 9F CD |  if_b	jmp	#LR__2147
1ad10                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
1ad10     18 20 06 F6 | 	mov	local02, #24
1ad14                 | LR__2148
1ad14     10 27 02 F6 | 	mov	local05, local02
1ad18     01 26 66 F0 | 	shl	local05, #1
1ad1c     F2 26 02 F1 | 	add	local05, objptr
1ad20     40 00 80 FF 
1ad24     13 01 58 FC | 	wrword	##32768, local05
1ad28     01 20 06 F1 | 	add	local02, #1
1ad2c     81 20 16 F2 | 	cmp	local02, #129 wc
1ad30     E0 FF 9F CD |  if_b	jmp	#LR__2148
1ad34                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
1ad34     81 20 06 F6 | 	mov	local02, #129
1ad38                 | LR__2149
1ad38     10 27 02 F6 | 	mov	local05, local02
1ad3c     01 26 66 F0 | 	shl	local05, #1
1ad40     F2 26 02 F1 | 	add	local05, objptr
1ad44     FF 22 06 F6 | 	mov	local03, #255
1ad48     10 23 82 F1 | 	sub	local03, local02
1ad4c     08 22 66 F0 | 	shl	local03, #8
1ad50     13 23 52 FC | 	wrword	local03, local05
1ad54     01 20 06 F1 | 	add	local02, #1
1ad58     00 21 16 F2 | 	cmp	local02, #256 wc
1ad5c     D8 FF 9F CD |  if_b	jmp	#LR__2149
1ad60                 | LR__2150
1ad60     46 00 00 FF 
1ad64     0A E5 05 F1 | 	add	objptr, ##36106
1ad68     F2 00 59 FC | 	wrword	#128, objptr
1ad6c     59 00 00 FF 
1ad70     E2 E5 85 F1 | 	sub	objptr, ##46050
1ad74                 | ' for i=0 to 7
1ad74     00 20 06 F6 | 	mov	local02, #0
1ad78     97 8E 48 FB | 	callpa	#(@LR__2152-@LR__2151)>>2,fcache_load_ptr_
1ad7c                 | LR__2151
1ad7c     10 27 02 F6 | 	mov	local05, local02
1ad80     01 26 66 F0 | 	shl	local05, #1
1ad84     10 27 02 F1 | 	add	local05, local02
1ad88     03 26 66 F0 | 	shl	local05, #3
1ad8c     14 00 00 FF 
1ad90     68 E5 05 F1 | 	add	objptr, ##10600
1ad94     F2 26 02 F1 | 	add	local05, objptr
1ad98     00 EE A1 FF 
1ad9c     13 01 68 FC | 	wrlong	##1138491392, local05
1ada0     10 27 02 F6 | 	mov	local05, local02
1ada4     01 26 66 F0 | 	shl	local05, #1
1ada8     10 27 02 F1 | 	add	local05, local02
1adac     03 26 66 F0 | 	shl	local05, #3
1adb0     F2 26 02 F1 | 	add	local05, objptr
1adb4     04 26 06 F1 | 	add	local05, #4
1adb8     13 21 42 FC | 	wrbyte	local02, local05
1adbc     10 27 02 F6 | 	mov	local05, local02
1adc0     01 26 66 F0 | 	shl	local05, #1
1adc4     10 27 02 F1 | 	add	local05, local02
1adc8     03 26 66 F0 | 	shl	local05, #3
1adcc     F2 26 02 F1 | 	add	local05, objptr
1add0     05 26 06 F1 | 	add	local05, #5
1add4     13 21 42 FC | 	wrbyte	local02, local05
1add8     10 27 02 F6 | 	mov	local05, local02
1addc     01 26 66 F0 | 	shl	local05, #1
1ade0     10 27 02 F1 | 	add	local05, local02
1ade4     03 26 66 F0 | 	shl	local05, #3
1ade8     F2 26 02 F1 | 	add	local05, objptr
1adec     06 26 06 F1 | 	add	local05, #6
1adf0     13 01 58 FC | 	wrword	#0, local05
1adf4     10 27 02 F6 | 	mov	local05, local02
1adf8     01 26 66 F0 | 	shl	local05, #1
1adfc     10 27 02 F1 | 	add	local05, local02
1ae00     03 26 66 F0 | 	shl	local05, #3
1ae04     F2 26 02 F1 | 	add	local05, objptr
1ae08     08 26 06 F1 | 	add	local05, #8
1ae0c     00 C0 9F FF 
1ae10     13 01 68 FC | 	wrlong	##1065353216, local05
1ae14     10 27 02 F6 | 	mov	local05, local02
1ae18     01 26 66 F0 | 	shl	local05, #1
1ae1c     10 27 02 F1 | 	add	local05, local02
1ae20     03 26 66 F0 | 	shl	local05, #3
1ae24     F2 26 02 F1 | 	add	local05, objptr
1ae28     0C 26 06 F1 | 	add	local05, #12
1ae2c     00 40 A0 FF 
1ae30     13 01 68 FC | 	wrlong	##1082130432, local05
1ae34     10 27 02 F6 | 	mov	local05, local02
1ae38     01 26 66 F0 | 	shl	local05, #1
1ae3c     10 27 02 F1 | 	add	local05, local02
1ae40     03 26 66 F0 | 	shl	local05, #3
1ae44     F2 26 02 F1 | 	add	local05, objptr
1ae48     10 26 06 F1 | 	add	local05, #16
1ae4c     13 01 68 FC | 	wrlong	#0, local05
1ae50     10 27 02 F6 | 	mov	local05, local02
1ae54     01 26 66 F0 | 	shl	local05, #1
1ae58     10 27 02 F1 | 	add	local05, local02
1ae5c     03 26 66 F0 | 	shl	local05, #3
1ae60     F2 26 02 F1 | 	add	local05, objptr
1ae64     14 26 06 F1 | 	add	local05, #20
1ae68     13 FF 59 FC | 	wrword	#255, local05
1ae6c     10 27 02 F6 | 	mov	local05, local02
1ae70     01 26 66 F0 | 	shl	local05, #1
1ae74     45 00 00 FF 
1ae78     6C E4 05 F1 | 	add	objptr, ##35436
1ae7c     F2 26 02 F1 | 	add	local05, objptr
1ae80     13 FF 59 FC | 	wrword	#255, local05
1ae84     01 20 06 F1 | 	add	local02, #1
1ae88     08 20 56 F2 | 	cmps	local02, #8 wc
1ae8c     59 00 00 FF 
1ae90     D4 E5 85 F1 | 	sub	objptr, ##46036
1ae94     E4 FE 9F CD |  if_b	jmp	#LR__2151
1ae98                 | LR__2152
1ae98     00 6E 20 FF 
1ae9c     00 28 06 F6 | 	mov	local06, ##1088159744
1aea0                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
1aea0     03 26 06 F6 | 	mov	local05, #3
1aea4                 | LR__2153
1aea4     14 13 02 F6 | 	mov	arg01, local06
1aea8     CE C3 1F FF 
1aeac     7D 14 06 F6 | 	mov	arg02, ##1065852029
1aeb0     90 74 B0 FD | 	call	#__system___float_mul
1aeb4     FD 28 02 F6 | 	mov	local06, result1
1aeb8     FA 27 6E FB | 	djnz	local05, #LR__2153
1aebc     00 20 06 F6 | 	mov	local02, #0
1aec0                 | LR__2154
1aec0     10 25 02 F6 | 	mov	local04, local02
1aec4     02 24 66 F0 | 	shl	local04, #2
1aec8     14 00 00 FF 
1aecc     D8 E4 05 F1 | 	add	objptr, ##10456
1aed0     F2 24 02 F1 | 	add	local04, objptr
1aed4     12 29 62 FC | 	wrlong	local06, local04
1aed8     14 13 02 F6 | 	mov	arg01, local06
1aedc     CE C3 1F FF 
1aee0     7D 14 06 F6 | 	mov	arg02, ##1065852029
1aee4     14 00 00 FF 
1aee8     D8 E4 85 F1 | 	sub	objptr, ##10456
1aeec     54 74 B0 FD | 	call	#__system___float_mul
1aef0     FD 28 02 F6 | 	mov	local06, result1
1aef4     01 20 06 F1 | 	add	local02, #1
1aef8     0C 20 56 F2 | 	cmps	local02, #12 wc
1aefc     C0 FF 9F CD |  if_b	jmp	#LR__2154
1af00     14 00 00 FF 
1af04     38 E5 05 F1 | 	add	objptr, ##10552
1af08     F2 50 6B FC | 	wrlong	#424, objptr
1af0c     04 E4 05 F1 | 	add	objptr, #4
1af10     F2 20 6B FC | 	wrlong	#400, objptr
1af14     04 E4 05 F1 | 	add	objptr, #4
1af18     F2 F2 6A FC | 	wrlong	#377, objptr
1af1c     04 E4 05 F1 | 	add	objptr, #4
1af20     F2 C8 6A FC | 	wrlong	#356, objptr
1af24     04 E4 05 F1 | 	add	objptr, #4
1af28     F2 A0 6A FC | 	wrlong	#336, objptr
1af2c     04 E4 05 F1 | 	add	objptr, #4
1af30     F2 7A 6A FC | 	wrlong	#317, objptr
1af34     04 E4 05 F1 | 	add	objptr, #4
1af38     F2 58 6A FC | 	wrlong	#300, objptr
1af3c     04 E4 05 F1 | 	add	objptr, #4
1af40     F2 36 6A FC | 	wrlong	#283, objptr
1af44     04 E4 05 F1 | 	add	objptr, #4
1af48     F2 16 6A FC | 	wrlong	#267, objptr
1af4c     04 E4 05 F1 | 	add	objptr, #4
1af50     F2 F8 69 FC | 	wrlong	#252, objptr
1af54     04 E4 05 F1 | 	add	objptr, #4
1af58     F2 DC 69 FC | 	wrlong	#238, objptr
1af5c     04 E4 05 F1 | 	add	objptr, #4
1af60     F2 C0 69 FC | 	wrlong	#224, objptr
1af64     45 00 00 FF 
1af68     7E E4 05 F1 | 	add	objptr, ##35454
1af6c     F2 00 59 FC | 	wrword	#128, objptr
1af70     02 E4 85 F1 | 	sub	objptr, #2
1af74     F2 00 59 FC | 	wrword	#128, objptr
1af78     59 00 00 FF 
1af7c     E0 E5 85 F1 | 	sub	objptr, ##46048
1af80     A7 F0 03 F6 | 	mov	ptra, fp
1af84     B2 00 A0 FD | 	call	#popregs_
1af88                 | _init_audio_ret
1af88     2D 00 64 FD | 	ret
1af8c                 | 
1af8c                 | ' 
1af8c                 | ' 
1af8c                 | ' function getnoteval(token) as single
1af8c                 | _getnoteval
1af8c     02 4A 05 F6 | 	mov	COUNT_, #2
1af90     A8 00 A0 FD | 	call	#pushregs_
1af94     01 00 00 FF 
1af98     00 13 86 F1 | 	sub	arg01, ##768
1af9c     09 15 52 F6 | 	abs	arg02, arg01 wc
1afa0     0C 14 16 FD | 	qdiv	arg02, #12
1afa4     14 00 00 FF 
1afa8     D8 E4 05 F1 | 	add	objptr, ##10456
1afac     19 14 62 FD | 	getqy	arg02
1afb0     0A 15 82 F6 | 	negc	arg02, arg02
1afb4     02 14 66 F0 | 	shl	arg02, #2
1afb8     F2 14 02 F1 | 	add	arg02, objptr
1afbc     0A 1F 02 FB | 	rdlong	local01, arg02
1afc0     09 15 52 F6 | 	abs	arg02, arg01 wc
1afc4     0C 14 16 FD | 	qdiv	arg02, #12
1afc8     14 00 00 FF 
1afcc     D8 E4 85 F1 | 	sub	objptr, ##10456
1afd0     01 12 06 F6 | 	mov	arg01, #1
1afd4                 | ' noteexp=1+(note/12) 
1afd4                 | ' return (2.0^noteexp)*notebase
1afd4     18 14 62 FD | 	getqx	arg02
1afd8     0A 13 82 F3 | 	sumc	arg01, arg02
1afdc     09 13 52 F6 | 	abs	arg01, arg01 wc
1afe0     1F 20 C6 C9 |  if_b	decod	local02, #31
1afe4     00 20 06 36 |  if_ae	mov	local02, #0
1afe8     54 6F B0 FD | 	call	#__system___float_fromuns
1afec     10 FB 61 F5 | 	xor	result1, local02
1aff0     FD 14 02 F6 | 	mov	arg02, result1
1aff4     1E 12 C6 F9 | 	decod	arg01, #30
1aff8     2C 82 B0 FD | 	call	#__system____builtin_powf
1affc     FD 12 02 F6 | 	mov	arg01, result1
1b000     0F 15 02 F6 | 	mov	arg02, local01
1b004     3C 73 B0 FD | 	call	#__system___float_mul
1b008     A7 F0 03 F6 | 	mov	ptra, fp
1b00c     B2 00 A0 FD | 	call	#popregs_
1b010                 | _getnoteval_ret
1b010     2D 00 64 FD | 	ret
1b014                 | 
1b014                 | ' 
1b014                 | ' 
1b014                 | ' 
1b014                 | ' sub init_error_strings
1b014                 | _init_error_strings
1b014     7B 01 00 FF 
1b018     30 00 06 F6 | 	mov	_var01, ##@LR__5279
1b01c     45 00 00 FF 
1b020     AC E4 05 F1 | 	add	objptr, ##35500
1b024     F2 00 62 FC | 	wrlong	_var01, objptr
1b028     7B 01 00 FF 
1b02c     31 00 06 F6 | 	mov	_var01, ##@LR__5280
1b030     04 E4 05 F1 | 	add	objptr, #4
1b034     F2 00 62 FC | 	wrlong	_var01, objptr
1b038     7B 01 00 FF 
1b03c     56 00 06 F6 | 	mov	_var01, ##@LR__5281
1b040     04 E4 05 F1 | 	add	objptr, #4
1b044     F2 00 62 FC | 	wrlong	_var01, objptr
1b048     7B 01 00 FF 
1b04c     77 00 06 F6 | 	mov	_var01, ##@LR__5282
1b050     04 E4 05 F1 | 	add	objptr, #4
1b054     F2 00 62 FC | 	wrlong	_var01, objptr
1b058     7B 01 00 FF 
1b05c     91 00 06 F6 | 	mov	_var01, ##@LR__5283
1b060     04 E4 05 F1 | 	add	objptr, #4
1b064     F2 00 62 FC | 	wrlong	_var01, objptr
1b068     7B 01 00 FF 
1b06c     AD 00 06 F6 | 	mov	_var01, ##@LR__5284
1b070     04 E4 05 F1 | 	add	objptr, #4
1b074     F2 00 62 FC | 	wrlong	_var01, objptr
1b078     7B 01 00 FF 
1b07c     CF 00 06 F6 | 	mov	_var01, ##@LR__5285
1b080     04 E4 05 F1 | 	add	objptr, #4
1b084     F2 00 62 FC | 	wrlong	_var01, objptr
1b088     7B 01 00 FF 
1b08c     FD 00 06 F6 | 	mov	_var01, ##@LR__5286
1b090     04 E4 05 F1 | 	add	objptr, #4
1b094     F2 00 62 FC | 	wrlong	_var01, objptr
1b098     7B 01 00 FF 
1b09c     28 01 06 F6 | 	mov	_var01, ##@LR__5287
1b0a0     04 E4 05 F1 | 	add	objptr, #4
1b0a4     F2 00 62 FC | 	wrlong	_var01, objptr
1b0a8     7B 01 00 FF 
1b0ac     41 01 06 F6 | 	mov	_var01, ##@LR__5288
1b0b0     04 E4 05 F1 | 	add	objptr, #4
1b0b4     F2 00 62 FC | 	wrlong	_var01, objptr
1b0b8     7B 01 00 FF 
1b0bc     62 01 06 F6 | 	mov	_var01, ##@LR__5289
1b0c0     04 E4 05 F1 | 	add	objptr, #4
1b0c4     F2 00 62 FC | 	wrlong	_var01, objptr
1b0c8     7B 01 00 FF 
1b0cc     79 01 06 F6 | 	mov	_var01, ##@LR__5290
1b0d0     04 E4 05 F1 | 	add	objptr, #4
1b0d4     F2 00 62 FC | 	wrlong	_var01, objptr
1b0d8     7B 01 00 FF 
1b0dc     97 01 06 F6 | 	mov	_var01, ##@LR__5291
1b0e0     04 E4 05 F1 | 	add	objptr, #4
1b0e4     F2 00 62 FC | 	wrlong	_var01, objptr
1b0e8     7B 01 00 FF 
1b0ec     BB 01 06 F6 | 	mov	_var01, ##@LR__5292
1b0f0     04 E4 05 F1 | 	add	objptr, #4
1b0f4     F2 00 62 FC | 	wrlong	_var01, objptr
1b0f8     7B 01 00 FF 
1b0fc     E2 01 06 F6 | 	mov	_var01, ##@LR__5293
1b100     04 E4 05 F1 | 	add	objptr, #4
1b104     F2 00 62 FC | 	wrlong	_var01, objptr
1b108     7B 01 00 FF 
1b10c     FE 01 06 F6 | 	mov	_var01, ##@LR__5294
1b110     04 E4 05 F1 | 	add	objptr, #4
1b114     F2 00 62 FC | 	wrlong	_var01, objptr
1b118     7C 01 00 FF 
1b11c     0F 00 06 F6 | 	mov	_var01, ##@LR__5295
1b120     04 E4 05 F1 | 	add	objptr, #4
1b124     F2 00 62 FC | 	wrlong	_var01, objptr
1b128     7C 01 00 FF 
1b12c     1F 00 06 F6 | 	mov	_var01, ##@LR__5296
1b130     04 E4 05 F1 | 	add	objptr, #4
1b134     F2 00 62 FC | 	wrlong	_var01, objptr
1b138     7C 01 00 FF 
1b13c     3A 00 06 F6 | 	mov	_var01, ##@LR__5297
1b140     04 E4 05 F1 | 	add	objptr, #4
1b144     F2 00 62 FC | 	wrlong	_var01, objptr
1b148     7C 01 00 FF 
1b14c     4C 00 06 F6 | 	mov	_var01, ##@LR__5298
1b150     04 E4 05 F1 | 	add	objptr, #4
1b154     F2 00 62 FC | 	wrlong	_var01, objptr
1b158     7C 01 00 FF 
1b15c     64 00 06 F6 | 	mov	_var01, ##@LR__5299
1b160     04 E4 05 F1 | 	add	objptr, #4
1b164     F2 00 62 FC | 	wrlong	_var01, objptr
1b168     7C 01 00 FF 
1b16c     78 00 06 F6 | 	mov	_var01, ##@LR__5300
1b170     04 E4 05 F1 | 	add	objptr, #4
1b174     F2 00 62 FC | 	wrlong	_var01, objptr
1b178     7C 01 00 FF 
1b17c     88 00 06 F6 | 	mov	_var01, ##@LR__5301
1b180     04 E4 05 F1 | 	add	objptr, #4
1b184     F2 00 62 FC | 	wrlong	_var01, objptr
1b188     7C 01 00 FF 
1b18c     A5 00 06 F6 | 	mov	_var01, ##@LR__5302
1b190     04 E4 05 F1 | 	add	objptr, #4
1b194     F2 00 62 FC | 	wrlong	_var01, objptr
1b198     7C 01 00 FF 
1b19c     B6 00 06 F6 | 	mov	_var01, ##@LR__5303
1b1a0     04 E4 05 F1 | 	add	objptr, #4
1b1a4     F2 00 62 FC | 	wrlong	_var01, objptr
1b1a8     7C 01 00 FF 
1b1ac     C7 00 06 F6 | 	mov	_var01, ##@LR__5304
1b1b0     04 E4 05 F1 | 	add	objptr, #4
1b1b4     F2 00 62 FC | 	wrlong	_var01, objptr
1b1b8     7C 01 00 FF 
1b1bc     F2 00 06 F6 | 	mov	_var01, ##@LR__5305
1b1c0     04 E4 05 F1 | 	add	objptr, #4
1b1c4     F2 00 62 FC | 	wrlong	_var01, objptr
1b1c8     7C 01 00 FF 
1b1cc     0E 01 06 F6 | 	mov	_var01, ##@LR__5306
1b1d0     04 E4 05 F1 | 	add	objptr, #4
1b1d4     F2 00 62 FC | 	wrlong	_var01, objptr
1b1d8     7C 01 00 FF 
1b1dc     24 01 06 F6 | 	mov	_var01, ##@LR__5307
1b1e0     04 E4 05 F1 | 	add	objptr, #4
1b1e4     F2 00 62 FC | 	wrlong	_var01, objptr
1b1e8     7C 01 00 FF 
1b1ec     31 01 06 F6 | 	mov	_var01, ##@LR__5308
1b1f0     04 E4 05 F1 | 	add	objptr, #4
1b1f4     F2 00 62 FC | 	wrlong	_var01, objptr
1b1f8     7C 01 00 FF 
1b1fc     43 01 06 F6 | 	mov	_var01, ##@LR__5309
1b200     04 E4 05 F1 | 	add	objptr, #4
1b204     F2 00 62 FC | 	wrlong	_var01, objptr
1b208     7C 01 00 FF 
1b20c     54 01 06 F6 | 	mov	_var01, ##@LR__5310
1b210     04 E4 05 F1 | 	add	objptr, #4
1b214     F2 00 62 FC | 	wrlong	_var01, objptr
1b218     7C 01 00 FF 
1b21c     70 01 06 F6 | 	mov	_var01, ##@LR__5311
1b220     04 E4 05 F1 | 	add	objptr, #4
1b224     F2 00 62 FC | 	wrlong	_var01, objptr
1b228     7C 01 00 FF 
1b22c     81 01 06 F6 | 	mov	_var01, ##@LR__5312
1b230     04 E4 05 F1 | 	add	objptr, #4
1b234     F2 00 62 FC | 	wrlong	_var01, objptr
1b238     7C 01 00 FF 
1b23c     90 01 06 F6 | 	mov	_var01, ##@LR__5313
1b240     04 E4 05 F1 | 	add	objptr, #4
1b244     F2 00 62 FC | 	wrlong	_var01, objptr
1b248     7C 01 00 FF 
1b24c     AB 01 06 F6 | 	mov	_var01, ##@LR__5314
1b250     04 E4 05 F1 | 	add	objptr, #4
1b254     F2 00 62 FC | 	wrlong	_var01, objptr
1b258     7C 01 00 FF 
1b25c     DF 01 06 F6 | 	mov	_var01, ##@LR__5315
1b260     04 E4 05 F1 | 	add	objptr, #4
1b264     F2 00 62 FC | 	wrlong	_var01, objptr
1b268     7C 01 00 FF 
1b26c     F8 01 06 F6 | 	mov	_var01, ##@LR__5316
1b270     04 E4 05 F1 | 	add	objptr, #4
1b274     F2 00 62 FC | 	wrlong	_var01, objptr
1b278     7D 01 00 FF 
1b27c     14 00 06 F6 | 	mov	_var01, ##@LR__5317
1b280     04 E4 05 F1 | 	add	objptr, #4
1b284     F2 00 62 FC | 	wrlong	_var01, objptr
1b288     7D 01 00 FF 
1b28c     32 00 06 F6 | 	mov	_var01, ##@LR__5318
1b290     04 E4 05 F1 | 	add	objptr, #4
1b294     F2 00 62 FC | 	wrlong	_var01, objptr
1b298     7D 01 00 FF 
1b29c     4B 00 06 F6 | 	mov	_var01, ##@LR__5319
1b2a0     04 E4 05 F1 | 	add	objptr, #4
1b2a4     F2 00 62 FC | 	wrlong	_var01, objptr
1b2a8     7D 01 00 FF 
1b2ac     6A 00 06 F6 | 	mov	_var01, ##@LR__5320
1b2b0     04 E4 05 F1 | 	add	objptr, #4
1b2b4     F2 00 62 FC | 	wrlong	_var01, objptr
1b2b8     7D 01 00 FF 
1b2bc     79 00 06 F6 | 	mov	_var01, ##@LR__5321
1b2c0     04 E4 05 F1 | 	add	objptr, #4
1b2c4     F2 00 62 FC | 	wrlong	_var01, objptr
1b2c8     7D 01 00 FF 
1b2cc     A7 00 06 F6 | 	mov	_var01, ##@LR__5322
1b2d0     04 E4 05 F1 | 	add	objptr, #4
1b2d4     F2 00 62 FC | 	wrlong	_var01, objptr
1b2d8     7D 01 00 FF 
1b2dc     B5 00 06 F6 | 	mov	_var01, ##@LR__5323
1b2e0     04 E4 05 F1 | 	add	objptr, #4
1b2e4     F2 00 62 FC | 	wrlong	_var01, objptr
1b2e8     7D 01 00 FF 
1b2ec     CA 00 06 F6 | 	mov	_var01, ##@LR__5324
1b2f0     04 E4 05 F1 | 	add	objptr, #4
1b2f4     F2 00 62 FC | 	wrlong	_var01, objptr
1b2f8     7D 01 00 FF 
1b2fc     EE 00 06 F6 | 	mov	_var01, ##@LR__5325
1b300     04 E4 05 F1 | 	add	objptr, #4
1b304     F2 00 62 FC | 	wrlong	_var01, objptr
1b308     7D 01 00 FF 
1b30c     05 01 06 F6 | 	mov	_var01, ##@LR__5326
1b310     04 E4 05 F1 | 	add	objptr, #4
1b314     F2 00 62 FC | 	wrlong	_var01, objptr
1b318     7D 01 00 FF 
1b31c     18 01 06 F6 | 	mov	_var01, ##@LR__5327
1b320     04 E4 05 F1 | 	add	objptr, #4
1b324     F2 00 62 FC | 	wrlong	_var01, objptr
1b328     7D 01 00 FF 
1b32c     2F 01 06 F6 | 	mov	_var01, ##@LR__5328
1b330     04 E4 05 F1 | 	add	objptr, #4
1b334     F2 00 62 FC | 	wrlong	_var01, objptr
1b338     7D 01 00 FF 
1b33c     48 01 06 F6 | 	mov	_var01, ##@LR__5329
1b340     04 E4 05 F1 | 	add	objptr, #4
1b344     F2 00 62 FC | 	wrlong	_var01, objptr
1b348     45 00 00 FF 
1b34c     74 E5 85 F1 | 	sub	objptr, ##35700
1b350                 | _init_error_strings_ret
1b350     2D 00 64 FD | 	ret
1b354                 | 
1b354                 | '         
1b354                 | ' sub printerror(err as integer)
1b354                 | _printerror
1b354     01 4A 05 F6 | 	mov	COUNT_, #1
1b358     A8 00 A0 FD | 	call	#pushregs_
1b35c     09 1F 02 F6 | 	mov	local01, arg01
1b360     7D 01 00 FF 
1b364     6A 13 06 F6 | 	mov	arg01, ##@LR__5330
1b368     A8 31 B0 FD | 	call	#_hg010b_spin2_write
1b36c     0F 13 02 F6 | 	mov	arg01, local01
1b370     10 35 B0 FD | 	call	#_hg010b_spin2_inttostr
1b374     FD 12 02 F6 | 	mov	arg01, result1
1b378     98 31 B0 FD | 	call	#_hg010b_spin2_write
1b37c     7D 01 00 FF 
1b380     71 13 06 F6 | 	mov	arg01, ##@LR__5331
1b384     8C 31 B0 FD | 	call	#_hg010b_spin2_write
1b388     02 1E 66 F0 | 	shl	local01, #2
1b38c     45 00 00 FF 
1b390     AC E4 05 F1 | 	add	objptr, ##35500
1b394     F2 1E 02 F1 | 	add	local01, objptr
1b398     0F 13 02 FB | 	rdlong	arg01, local01
1b39c     45 00 00 FF 
1b3a0     AC E4 85 F1 | 	sub	objptr, ##35500
1b3a4                 | ' 
1b3a4                 | ' write(text)
1b3a4     6C 31 B0 FD | 	call	#_hg010b_spin2_write
1b3a8                 | ' crlf
1b3a8     34 34 B0 FD | 	call	#_hg010b_spin2_crlf
1b3ac     A7 F0 03 F6 | 	mov	ptra, fp
1b3b0     B2 00 A0 FD | 	call	#popregs_
1b3b4                 | _printerror_ret
1b3b4     2D 00 64 FD | 	ret
1b3b8                 | 
1b3b8                 | ' 
1b3b8                 | ' '' ------------------------------- Hardware start/stop/initialization 
1b3b8                 | ' 
1b3b8                 | ' sub startpsram
1b3b8                 | _startpsram
1b3b8     00 12 06 F6 | 	mov	arg01, #0
1b3bc     0A 14 C6 F9 | 	decod	arg02, #10
1b3c0     0B 16 06 F6 | 	mov	arg03, #11
1b3c4     07 18 06 F6 | 	mov	arg04, #7
1b3c8     0B 00 00 FF 
1b3cc     CC E4 05 F1 | 	add	objptr, ##5836
1b3d0     BC 35 B0 FD | 	call	#_psram_spin2_startx
1b3d4     2B 00 00 FF 
1b3d8     6C E5 05 F1 | 	add	objptr, ##22380
1b3dc     F2 FA 61 FC | 	wrlong	result1, objptr
1b3e0                 | '     return $7FF00 + cog*12
1b3e0     0C E4 05 F1 | 	add	objptr, #12
1b3e4     FF 03 80 FF 
1b3e8     F2 00 6A FC | 	wrlong	##524032, objptr
1b3ec     37 00 00 FF 
1b3f0     44 E4 85 F1 | 	sub	objptr, ##28228
1b3f4                 | _startpsram_ret
1b3f4     2D 00 64 FD | 	ret
1b3f8                 | 
1b3f8                 | ' 
1b3f8                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
1b3f8                 | _startvideo
1b3f8     01 4A 05 F6 | 	mov	COUNT_, #1
1b3fc     A8 00 A0 FD | 	call	#pushregs_
1b400     37 00 00 FF 
1b404     44 E4 05 F1 | 	add	objptr, ##28228
1b408     F2 18 02 FB | 	rdlong	arg04, objptr
1b40c     37 00 00 FF 
1b410     44 E4 85 F1 | 	sub	objptr, ##28228
1b414     0A 13 02 F6 | 	mov	arg01, arg02
1b418     0C 15 02 F6 | 	mov	arg02, arg04
1b41c     EC 18 B0 FD | 	call	#_hg010b_spin2_start
1b420     37 00 00 FF 
1b424     30 E4 05 F1 | 	add	objptr, ##28208
1b428     F2 FA 61 FC | 	wrlong	result1, objptr
1b42c                 | ' 
1b42c                 | ' videocog=v.start(pin,mbox)
1b42c                 | ' 
1b42c                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
1b42c     00 1E 06 F6 | 	mov	local01, #0
1b430     2B 00 00 FF 
1b434     64 E5 85 F1 | 	sub	objptr, ##22372
1b438                 | LR__2160
1b438     0F 13 02 F6 | 	mov	arg01, local01
1b43c     00 28 00 FF 
1b440     00 14 06 F6 | 	mov	arg02, ##5242880
1b444     A0 39 B0 FD | 	call	#_psram_spin2_setQos
1b448     01 1E 06 F1 | 	add	local01, #1
1b44c     08 1E 56 F2 | 	cmps	local01, #8 wc
1b450     E4 FF 9F CD |  if_b	jmp	#LR__2160
1b454     2B 00 00 FF 
1b458     64 E5 05 F1 | 	add	objptr, ##22372
1b45c     F2 12 02 FB | 	rdlong	arg01, objptr
1b460     7A 00 02 FF 
1b464     00 14 06 F6 | 	mov	arg02, ##67171328
1b468     2B 00 00 FF 
1b46c     64 E5 85 F1 | 	sub	objptr, ##22372
1b470     74 39 B0 FD | 	call	#_psram_spin2_setQos
1b474     0B 00 00 FF 
1b478     CC E4 85 F1 | 	sub	objptr, ##5836
1b47c                 | ' psram.setQoS(videocog, $0400f400) 
1b47c                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
1b47c     F2 14 02 F6 | 	mov	arg02, objptr
1b480     00 48 04 FF 
1b484     00 14 46 F5 | 	or	arg02, ##143654912
1b488     00 16 06 F6 | 	mov	arg03, #0
1b48c     00 18 06 F6 | 	mov	arg04, #0
1b490     00 12 06 F6 | 	mov	arg01, #0
1b494     0C 4E B0 FD | 	call	#__system___basic_open
1b498                 | ' return videocog
1b498     37 00 00 FF 
1b49c     30 E4 05 F1 | 	add	objptr, ##28208
1b4a0     F2 FA 01 FB | 	rdlong	result1, objptr
1b4a4     37 00 00 FF 
1b4a8     30 E4 85 F1 | 	sub	objptr, ##28208
1b4ac     A7 F0 03 F6 | 	mov	ptra, fp
1b4b0     B2 00 A0 FD | 	call	#popregs_
1b4b4                 | _startvideo_ret
1b4b4     2D 00 64 FD | 	ret
1b4b8                 | 
1b4b8                 | ' 
1b4b8                 | ' 
1b4b8                 | ' 
1b4b8                 | ' 
1b4b8                 | ' '' ------------------------------- Convenient psram peek/poke
1b4b8                 | ' 
1b4b8                 | ' sub pslpoke(addr as ulong,value as ulong)
1b4b8                 | _pslpoke
1b4b8     00 4A 05 F6 | 	mov	COUNT_, #0
1b4bc     A8 00 A0 FD | 	call	#pushregs_
1b4c0     08 F0 07 F1 | 	add	ptra, #8
1b4c4     A7 12 62 FC | 	wrlong	arg01, fp
1b4c8     04 4E 05 F1 | 	add	fp, #4
1b4cc     A7 14 62 FC | 	wrlong	arg02, fp
1b4d0     A7 12 02 F6 | 	mov	arg01, fp
1b4d4     04 4E 85 F1 | 	sub	fp, #4
1b4d8     A7 14 02 FB | 	rdlong	arg02, fp
1b4dc     04 16 06 F6 | 	mov	arg03, #4
1b4e0     0B 00 00 FF 
1b4e4     CC E4 05 F1 | 	add	objptr, ##5836
1b4e8     6C 37 B0 FD | 	call	#_psram_spin2_write
1b4ec     0B 00 00 FF 
1b4f0     CC E4 85 F1 | 	sub	objptr, ##5836
1b4f4     A7 F0 03 F6 | 	mov	ptra, fp
1b4f8     B2 00 A0 FD | 	call	#popregs_
1b4fc                 | _pslpoke_ret
1b4fc     2D 00 64 FD | 	ret
1b500                 | 
1b500                 | ' 
1b500                 | ' sub psdpoke(addr as ulong,value as ulong)
1b500                 | _psdpoke
1b500     00 4A 05 F6 | 	mov	COUNT_, #0
1b504     A8 00 A0 FD | 	call	#pushregs_
1b508     08 F0 07 F1 | 	add	ptra, #8
1b50c     A7 12 62 FC | 	wrlong	arg01, fp
1b510     04 4E 05 F1 | 	add	fp, #4
1b514     A7 14 62 FC | 	wrlong	arg02, fp
1b518     A7 12 02 F6 | 	mov	arg01, fp
1b51c     04 4E 85 F1 | 	sub	fp, #4
1b520     A7 14 02 FB | 	rdlong	arg02, fp
1b524     02 16 06 F6 | 	mov	arg03, #2
1b528     0B 00 00 FF 
1b52c     CC E4 05 F1 | 	add	objptr, ##5836
1b530     24 37 B0 FD | 	call	#_psram_spin2_write
1b534     0B 00 00 FF 
1b538     CC E4 85 F1 | 	sub	objptr, ##5836
1b53c     A7 F0 03 F6 | 	mov	ptra, fp
1b540     B2 00 A0 FD | 	call	#popregs_
1b544                 | _psdpoke_ret
1b544     2D 00 64 FD | 	ret
1b548                 | 
1b548                 | ' 
1b548                 | ' sub pspoke(addr as ulong,value as ulong)
1b548                 | _pspoke
1b548     00 4A 05 F6 | 	mov	COUNT_, #0
1b54c     A8 00 A0 FD | 	call	#pushregs_
1b550     08 F0 07 F1 | 	add	ptra, #8
1b554     A7 12 62 FC | 	wrlong	arg01, fp
1b558     04 4E 05 F1 | 	add	fp, #4
1b55c     A7 14 62 FC | 	wrlong	arg02, fp
1b560     A7 12 02 F6 | 	mov	arg01, fp
1b564     04 4E 85 F1 | 	sub	fp, #4
1b568     A7 14 02 FB | 	rdlong	arg02, fp
1b56c     01 16 06 F6 | 	mov	arg03, #1
1b570     0B 00 00 FF 
1b574     CC E4 05 F1 | 	add	objptr, ##5836
1b578     DC 36 B0 FD | 	call	#_psram_spin2_write
1b57c     0B 00 00 FF 
1b580     CC E4 85 F1 | 	sub	objptr, ##5836
1b584     A7 F0 03 F6 | 	mov	ptra, fp
1b588     B2 00 A0 FD | 	call	#popregs_
1b58c                 | _pspoke_ret
1b58c     2D 00 64 FD | 	ret
1b590                 | 
1b590                 | ' 
1b590                 | ' function pspeek(adr as ulong) as ubyte
1b590                 | _pspeek
1b590     00 4A 05 F6 | 	mov	COUNT_, #0
1b594     A8 00 A0 FD | 	call	#pushregs_
1b598     0C F0 07 F1 | 	add	ptra, #12
1b59c     04 4E 05 F1 | 	add	fp, #4
1b5a0     A7 12 62 FC | 	wrlong	arg01, fp
1b5a4     04 4E 05 F1 | 	add	fp, #4
1b5a8     A7 12 02 F6 | 	mov	arg01, fp
1b5ac     04 4E 85 F1 | 	sub	fp, #4
1b5b0     A7 14 02 FB | 	rdlong	arg02, fp
1b5b4     04 4E 85 F1 | 	sub	fp, #4
1b5b8     01 16 06 F6 | 	mov	arg03, #1
1b5bc     0B 00 00 FF 
1b5c0     CC E4 05 F1 | 	add	objptr, ##5836
1b5c4     F4 35 B0 FD | 	call	#_psram_spin2_read1
1b5c8     0B 00 00 FF 
1b5cc     CC E4 85 F1 | 	sub	objptr, ##5836
1b5d0                 | ' psram.read1(varptr(res),adr,1)
1b5d0                 | ' return res
1b5d0     08 4E 05 F1 | 	add	fp, #8
1b5d4     A7 FA C1 FA | 	rdbyte	result1, fp
1b5d8     08 4E 85 F1 | 	sub	fp, #8
1b5dc     A7 F0 03 F6 | 	mov	ptra, fp
1b5e0     B2 00 A0 FD | 	call	#popregs_
1b5e4                 | _pspeek_ret
1b5e4     2D 00 64 FD | 	ret
1b5e8                 | 
1b5e8                 | ' 
1b5e8                 | ' function pslpeek(adr as ulong) as ulong
1b5e8                 | _pslpeek
1b5e8     00 4A 05 F6 | 	mov	COUNT_, #0
1b5ec     A8 00 A0 FD | 	call	#pushregs_
1b5f0     0C F0 07 F1 | 	add	ptra, #12
1b5f4     04 4E 05 F1 | 	add	fp, #4
1b5f8     A7 12 62 FC | 	wrlong	arg01, fp
1b5fc     04 4E 05 F1 | 	add	fp, #4
1b600     A7 12 02 F6 | 	mov	arg01, fp
1b604     04 4E 85 F1 | 	sub	fp, #4
1b608     A7 14 02 FB | 	rdlong	arg02, fp
1b60c     04 4E 85 F1 | 	sub	fp, #4
1b610     04 16 06 F6 | 	mov	arg03, #4
1b614     0B 00 00 FF 
1b618     CC E4 05 F1 | 	add	objptr, ##5836
1b61c     9C 35 B0 FD | 	call	#_psram_spin2_read1
1b620     0B 00 00 FF 
1b624     CC E4 85 F1 | 	sub	objptr, ##5836
1b628                 | ' psram.read1(varptr(res),adr,4)
1b628                 | ' return res
1b628     08 4E 05 F1 | 	add	fp, #8
1b62c     A7 FA 01 FB | 	rdlong	result1, fp
1b630     08 4E 85 F1 | 	sub	fp, #8
1b634     A7 F0 03 F6 | 	mov	ptra, fp
1b638     B2 00 A0 FD | 	call	#popregs_
1b63c                 | _pslpeek_ret
1b63c     2D 00 64 FD | 	ret
1b640                 | 
1b640                 | ' 
1b640                 | ' function psdpeek(adr as ulong) as ulong
1b640                 | _psdpeek
1b640     00 4A 05 F6 | 	mov	COUNT_, #0
1b644     A8 00 A0 FD | 	call	#pushregs_
1b648     0C F0 07 F1 | 	add	ptra, #12
1b64c     04 4E 05 F1 | 	add	fp, #4
1b650     A7 12 62 FC | 	wrlong	arg01, fp
1b654     04 4E 05 F1 | 	add	fp, #4
1b658     A7 12 02 F6 | 	mov	arg01, fp
1b65c     04 4E 85 F1 | 	sub	fp, #4
1b660     A7 14 02 FB | 	rdlong	arg02, fp
1b664     04 4E 85 F1 | 	sub	fp, #4
1b668     02 16 06 F6 | 	mov	arg03, #2
1b66c     0B 00 00 FF 
1b670     CC E4 05 F1 | 	add	objptr, ##5836
1b674     44 35 B0 FD | 	call	#_psram_spin2_read1
1b678     0B 00 00 FF 
1b67c     CC E4 85 F1 | 	sub	objptr, ##5836
1b680                 | ' psram.read1(varptr(res),adr,2)
1b680                 | ' return res
1b680     08 4E 05 F1 | 	add	fp, #8
1b684     A7 FA E1 FA | 	rdword	result1, fp
1b688     08 4E 85 F1 | 	sub	fp, #8
1b68c     A7 F0 03 F6 | 	mov	ptra, fp
1b690     B2 00 A0 FD | 	call	#popregs_
1b694                 | _psdpeek_ret
1b694     2D 00 64 FD | 	ret
1b698                 | 
1b698                 | ' 
1b698                 | ' '' ------------------------------- USB keyboard scan to char translator
1b698                 | ' 
1b698                 | ' function scantochar(key)
1b698                 | _scantochar
1b698                 | ' 
1b698                 | ' select case (key shr 8) and 255
1b698     09 01 02 F6 | 	mov	_var01, arg01
1b69c     08 00 C6 F0 | 	sar	_var01, #8
1b6a0     FF 00 0E F5 | 	and	_var01, #255 wz
1b6a4     24 00 90 AD |  if_e	jmp	#LR__2170
1b6a8     02 00 0E F2 | 	cmp	_var01, #2 wz
1b6ac     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
1b6b0     30 00 90 AD |  if_e	jmp	#LR__2171
1b6b4     40 00 0E F2 | 	cmp	_var01, #64 wz
1b6b8     44 00 90 AD |  if_e	jmp	#LR__2172
1b6bc     42 00 0E F2 | 	cmp	_var01, #66 wz
1b6c0     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
1b6c4     70 00 90 5D |  if_ne	jmp	#LR__2174
1b6c8     50 00 90 FD | 	jmp	#LR__2173
1b6cc                 | LR__2170
1b6cc     09 FB 01 F6 | 	mov	result1, arg01
1b6d0     7F FA 05 F5 | 	and	result1, #127
1b6d4     02 FA 65 F0 | 	shl	result1, #2
1b6d8     F5 FA 01 F1 | 	add	result1, ptr__dat__
1b6dc     FD FA C1 FA | 	rdbyte	result1, result1
1b6e0     54 00 90 FD | 	jmp	#_scantochar_ret
1b6e4                 | LR__2171
1b6e4     09 FB 01 F6 | 	mov	result1, arg01
1b6e8     7F FA 05 F5 | 	and	result1, #127
1b6ec     02 FA 65 F0 | 	shl	result1, #2
1b6f0     01 FA 05 F1 | 	add	result1, #1
1b6f4     F5 FA 01 F1 | 	add	result1, ptr__dat__
1b6f8     FD FA C1 FA | 	rdbyte	result1, result1
1b6fc     38 00 90 FD | 	jmp	#_scantochar_ret
1b700                 | LR__2172
1b700     09 FB 01 F6 | 	mov	result1, arg01
1b704     7F FA 05 F5 | 	and	result1, #127
1b708     02 FA 65 F0 | 	shl	result1, #2
1b70c     02 FA 05 F1 | 	add	result1, #2
1b710     F5 FA 01 F1 | 	add	result1, ptr__dat__
1b714     FD FA C1 FA | 	rdbyte	result1, result1
1b718     1C 00 90 FD | 	jmp	#_scantochar_ret
1b71c                 | LR__2173
1b71c     09 FB 01 F6 | 	mov	result1, arg01
1b720     7F FA 05 F5 | 	and	result1, #127
1b724     02 FA 65 F0 | 	shl	result1, #2
1b728     03 FA 05 F1 | 	add	result1, #3
1b72c     F5 FA 01 F1 | 	add	result1, ptr__dat__
1b730     FD FA C1 FA | 	rdbyte	result1, result1
1b734     00 00 90 FD | 	jmp	#_scantochar_ret
1b738                 | LR__2174
1b738                 | _scantochar_ret
1b738     2D 00 64 FD | 	ret
1b73c                 | 
1b73c                 | _program
1b73c     13 4A 05 F6 | 	mov	COUNT_, #19
1b740     A8 00 A0 FD | 	call	#pushregs_
1b744     70 FC BF FD | 	call	#_startpsram
1b748     40 12 06 F6 | 	mov	arg01, #64
1b74c     00 14 06 F6 | 	mov	arg02, #0
1b750     00 16 06 F6 | 	mov	arg03, #0
1b754     A0 FC BF FD | 	call	#_startvideo
1b758     37 00 00 FF 
1b75c     44 E4 05 F1 | 	add	objptr, ##28228
1b760     F2 12 02 FB | 	rdlong	arg01, objptr
1b764     00 14 06 F6 | 	mov	arg02, #0
1b768     FB 03 00 FF 
1b76c     00 17 06 F6 | 	mov	arg03, ##521984
1b770     2B 00 00 FF 
1b774     78 E5 85 F1 | 	sub	objptr, ##22392
1b778     1C 3A B0 FD | 	call	#_audio096_spin2_start
1b77c     FE 1C 02 F6 | 	mov	arg06, result2
1b780     2B 00 00 FF 
1b784     60 E5 05 F1 | 	add	objptr, ##22368
1b788     F2 FA 61 FC | 	wrlong	result1, objptr
1b78c     14 E4 05 F1 | 	add	objptr, #20
1b790     F2 1C 62 FC | 	wrlong	arg06, objptr
1b794     37 00 00 FF 
1b798     40 E4 85 F1 | 	sub	objptr, ##28224
1b79c     32 12 06 F6 | 	mov	arg01, #50
1b7a0     4C 43 B0 FD | 	call	#__system___waitms
1b7a4     37 00 00 FF 
1b7a8     40 E4 05 F1 | 	add	objptr, ##28224
1b7ac     F2 12 02 FB | 	rdlong	arg01, objptr
1b7b0     37 00 00 FF 
1b7b4     40 E4 85 F1 | 	sub	objptr, ##28224
1b7b8     14 12 06 F1 | 	add	arg01, #20
1b7bc     20 00 80 FF 
1b7c0     09 01 58 FC | 	wrword	##16384, arg01
1b7c4     28 37 B0 FD | 	call	#_usbnew_spin2_start
1b7c8     37 00 00 FF 
1b7cc     34 E4 05 F1 | 	add	objptr, ##28212
1b7d0     F2 FA 61 FC | 	wrlong	result1, objptr
1b7d4                 | '   mouse_limits[0] := xlim
1b7d4     0F 00 00 FF 
1b7d8     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
1b7dc     01 00 80 FF 
1b7e0     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
1b7e4                 | '   mouse_limits[1] := ylim
1b7e4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1b7e8     01 00 80 FF 
1b7ec     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
1b7f0     36 00 00 FF 
1b7f4     23 E5 85 F1 | 	sub	objptr, ##27939
1b7f8     F2 12 02 F6 | 	mov	arg01, objptr
1b7fc     11 E5 85 F1 | 	sub	objptr, #273
1b800     C4 12 06 F1 | 	add	arg01, #196
1b804                 | '   mouse_outptr := ptr
1b804     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1b808     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
1b80c     0F 00 00 FF 
1b810     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1b814     0E 00 00 FF 
1b818     B6 EA 05 F1 | 	add	ptr__dat__, ##7350
1b81c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1b820     0E 00 00 FF 
1b824     B6 EA 85 F1 | 	sub	ptr__dat__, ##7350
1b828     10 12 06 F6 | 	mov	arg01, #16
1b82c     74 1B B0 FD | 	call	#_hg010b_spin2_setspriteptr
1b830     10 12 06 F6 | 	mov	arg01, #16
1b834     20 14 06 F6 | 	mov	arg02, #32
1b838     20 16 06 F6 | 	mov	arg03, #32
1b83c     F4 1B B0 FD | 	call	#_hg010b_spin2_setspritesize
1b840     09 12 C6 F9 | 	decod	arg01, #9
1b844     2C 15 06 F6 | 	mov	arg02, #300
1b848     FC 37 B0 FD | 	call	#_usbnew_spin2_mouse_move
1b84c     F2 1C 02 F6 | 	mov	arg06, objptr
1b850     58 00 00 FF 
1b854     28 E5 05 F1 | 	add	objptr, ##45352
1b858     F2 1A 02 F6 | 	mov	arg05, objptr
1b85c     0D 1D 62 FC | 	wrlong	arg06, arg05
1b860     04 1A 06 F1 | 	add	arg05, #4
1b864     0D F1 61 FC | 	wrlong	ptr__housekeeper_, arg05
1b868     EF 14 02 F6 | 	mov	arg02, entryptr__
1b86c     F2 1E 02 F6 | 	mov	local01, objptr
1b870     1E FA 05 F6 | 	mov	result1, #30
1b874     28 1E 62 FD | 	setq	local01
1b878     0A FB F1 FC | 	coginit	result1, arg02 wc
1b87c     01 FA 65 C6 |  if_b	neg	result1, #1
1b880     04 E4 85 F1 | 	sub	objptr, #4
1b884     F2 FA 61 FC | 	wrlong	result1, objptr
1b888     01 00 00 FF 
1b88c     90 E4 05 F1 | 	add	objptr, ##656
1b890     F2 00 68 FC | 	wrlong	#0, objptr
1b894     22 00 00 FF 
1b898     50 E5 85 F1 | 	sub	objptr, ##17744
1b89c     F2 04 68 FC | 	wrlong	#2, objptr
1b8a0     04 E4 05 F1 | 	add	objptr, #4
1b8a4     F2 26 69 FC | 	wrlong	#147, objptr
1b8a8     04 E4 05 F1 | 	add	objptr, #4
1b8ac     F2 34 69 FC | 	wrlong	#154, objptr
1b8b0     04 E4 05 F1 | 	add	objptr, #4
1b8b4     F2 08 68 FC | 	wrlong	#4, objptr
1b8b8     04 E4 85 F1 | 	sub	objptr, #4
1b8bc     F2 1C 02 FB | 	rdlong	arg06, objptr
1b8c0     14 E4 85 F1 | 	sub	objptr, #20
1b8c4     F2 1C 62 FC | 	wrlong	arg06, objptr
1b8c8     04 E4 05 F1 | 	add	objptr, #4
1b8cc     F2 00 68 FC | 	wrlong	#0, objptr
1b8d0     04 E4 05 F1 | 	add	objptr, #4
1b8d4     F2 00 68 FC | 	wrlong	#0, objptr
1b8d8     21 00 00 FF 
1b8dc     C0 E4 05 F1 | 	add	objptr, ##17088
1b8e0     F2 02 68 FC | 	wrlong	#1, objptr
1b8e4     01 00 00 FF 
1b8e8     9C E4 05 F1 | 	add	objptr, ##668
1b8ec     F2 00 68 FC | 	wrlong	#0, objptr
1b8f0     01 00 00 FF 
1b8f4     00 EA 05 F1 | 	add	ptr__dat__, ##512
1b8f8     08 E4 05 F1 | 	add	objptr, #8
1b8fc     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1b900     04 E4 85 F1 | 	sub	objptr, #4
1b904     03 00 80 FF 
1b908     F2 3C 69 FC | 	wrlong	##1694, objptr
1b90c     14 00 00 FF 
1b910     2C E5 85 F1 | 	sub	objptr, ##10540
1b914     F2 18 68 FC | 	wrlong	#12, objptr
1b918     45 00 00 FF 
1b91c     94 E4 85 F1 | 	sub	objptr, ##35476
1b920     01 00 00 FF 
1b924     00 EA 85 F1 | 	sub	ptr__dat__, ##512
1b928     08 DC BF FD | 	call	#_init_commands
1b92c     E4 F6 BF FD | 	call	#_init_error_strings
1b930     E0 ED BF FD | 	call	#_init_audio
1b934     C4 35 BF FD | 	call	#_do_new
1b938     37 00 00 FF 
1b93c     6C E4 05 F1 | 	add	objptr, ##28268
1b940     F2 12 02 FB | 	rdlong	arg01, objptr
1b944     04 E4 85 F1 | 	sub	objptr, #4
1b948     F2 14 02 FB | 	rdlong	arg02, objptr
1b94c     37 00 00 FF 
1b950     68 E4 85 F1 | 	sub	objptr, ##28264
1b954     FC 27 B0 FD | 	call	#_hg010b_spin2_cls
1b958     37 00 00 FF 
1b95c     70 E4 05 F1 | 	add	objptr, ##28272
1b960     F2 12 02 FB | 	rdlong	arg01, objptr
1b964     37 00 00 FF 
1b968     70 E4 85 F1 | 	sub	objptr, ##28272
1b96c     94 26 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1b970                 | ' 
1b970                 | ' leading_spaces:=amount
1b970     01 00 00 FF 
1b974     B6 E4 05 F1 | 	add	objptr, ##694
1b978     F2 04 68 FC | 	wrlong	#2, objptr
1b97c     01 00 00 FF 
1b980     B6 E4 85 F1 | 	sub	objptr, ##694
1b984     7D 01 00 FF 
1b988     74 21 06 F6 | 	mov	local02, ##@LR__5332
1b98c     3D 12 06 F6 | 	mov	arg01, #61
1b990     3C 14 06 F6 | 	mov	arg02, #60
1b994     3B 16 06 F6 | 	mov	arg03, #59
1b998     3A 18 06 F6 | 	mov	arg04, #58
1b99c     8C 88 B0 FD | 	call	#__system___vfs_open_sdcardx
1b9a0     FD 14 02 F6 | 	mov	arg02, result1
1b9a4     10 13 02 F6 | 	mov	arg01, local02
1b9a8     1C 42 B0 FD | 	call	#__system___mount
1b9ac     7D 01 00 FF 
1b9b0     78 13 06 F6 | 	mov	arg01, ##@LR__5333
1b9b4     D0 44 B0 FD | 	call	#__system___chdir
1b9b8     7D 01 00 FF 
1b9bc     80 21 06 F6 | 	mov	local02, ##@LR__5334
1b9c0     52 00 00 FF 
1b9c4     C8 E4 05 F1 | 	add	objptr, ##42184
1b9c8     F2 20 62 FC | 	wrlong	local02, objptr
1b9cc     1B 00 00 FF 
1b9d0     64 E4 85 F1 | 	sub	objptr, ##13924
1b9d4     F2 12 02 FB | 	rdlong	arg01, objptr
1b9d8     37 00 00 FF 
1b9dc     64 E4 85 F1 | 	sub	objptr, ##28260
1b9e0     01 12 66 F0 | 	shl	arg01, #1
1b9e4     01 14 06 F6 | 	mov	arg02, #1
1b9e8     58 26 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1b9ec                 | ' 
1b9ec                 | ' init_commands
1b9ec                 | ' init_error_strings
1b9ec                 | ' init_audio
1b9ec                 | ' do_new
1b9ec                 | ' 
1b9ec                 | ' 
1b9ec                 | ' cls(ink, paper)
1b9ec                 | ' v.setfontfamily(font) 				' use ST Mono font
1b9ec                 | ' v.setleadingspaces(2)
1b9ec                 | ' mount "/sd", _vfs_open_sdcard()
1b9ec                 | ' chdir "/sd/bas"
1b9ec                 | ' 
1b9ec                 | ' currentdir$="/sd/bas"
1b9ec                 | ' 
1b9ec                 | ' position 2*editor_spaces,1 : print ver$
1b9ec     00 12 06 F6 | 	mov	arg01, #0
1b9f0     A0 97 B0 FD | 	call	#__system___getiolock_0508
1b9f4     FD 12 02 F6 | 	mov	arg01, result1
1b9f8     00 3E B0 FD | 	call	#__system___lockmem
1b9fc     18 00 00 FF 
1ba00     4C EB 05 F1 | 	add	ptr__dat__, ##12620
1ba04     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
1ba08     18 00 00 FF 
1ba0c     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
1ba10     00 12 06 F6 | 	mov	arg01, #0
1ba14     00 16 06 F6 | 	mov	arg03, #0
1ba18     D4 4A B0 FD | 	call	#__system___basic_print_string
1ba1c     00 12 06 F6 | 	mov	arg01, #0
1ba20     0A 14 06 F6 | 	mov	arg02, #10
1ba24     00 16 06 F6 | 	mov	arg03, #0
1ba28     6C 4A B0 FD | 	call	#__system___basic_print_char
1ba2c     00 12 06 F6 | 	mov	arg01, #0
1ba30     60 97 B0 FD | 	call	#__system___getiolock_0508
1ba34     FD 00 68 FC | 	wrlong	#0, result1
1ba38     59 00 00 FF 
1ba3c     B8 E5 05 F1 | 	add	objptr, ##46008
1ba40     F2 12 02 FB | 	rdlong	arg01, objptr
1ba44     16 00 00 FF 
1ba48     2C E5 85 F1 | 	sub	objptr, ##11564
1ba4c     F2 20 02 FB | 	rdlong	local02, objptr
1ba50     43 00 00 FF 
1ba54     8C E4 85 F1 | 	sub	objptr, ##34444
1ba58     10 13 82 F1 | 	sub	arg01, local02
1ba5c     00 14 06 F6 | 	mov	arg02, #0
1ba60     0A 16 06 F6 | 	mov	arg03, #10
1ba64     F8 5F B0 FD | 	call	#__system__Number_S
1ba68     FD 12 02 F6 | 	mov	arg01, result1
1ba6c     7D 01 00 FF 
1ba70     88 15 06 F6 | 	mov	arg02, ##@LR__5335
1ba74     E0 3D B0 FD | 	call	#__system___string_concat
1ba78     FD 20 02 F6 | 	mov	local02, result1
1ba7c     58 00 00 FF 
1ba80     1C E5 05 F1 | 	add	objptr, ##45340
1ba84     F2 20 62 FC | 	wrlong	local02, objptr
1ba88     58 00 00 FF 
1ba8c     1C E5 85 F1 | 	sub	objptr, ##45340
1ba90                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
1ba90     00 12 06 F6 | 	mov	arg01, #0
1ba94     FC 96 B0 FD | 	call	#__system___getiolock_0508
1ba98     FD 12 02 F6 | 	mov	arg01, result1
1ba9c     5C 3D B0 FD | 	call	#__system___lockmem
1baa0     58 00 00 FF 
1baa4     1C E5 05 F1 | 	add	objptr, ##45340
1baa8     F2 14 02 FB | 	rdlong	arg02, objptr
1baac     58 00 00 FF 
1bab0     1C E5 85 F1 | 	sub	objptr, ##45340
1bab4     00 12 06 F6 | 	mov	arg01, #0
1bab8     00 16 06 F6 | 	mov	arg03, #0
1babc     30 4A B0 FD | 	call	#__system___basic_print_string
1bac0     00 12 06 F6 | 	mov	arg01, #0
1bac4     0A 14 06 F6 | 	mov	arg02, #10
1bac8     00 16 06 F6 | 	mov	arg03, #0
1bacc     C8 49 B0 FD | 	call	#__system___basic_print_char
1bad0     00 12 06 F6 | 	mov	arg01, #0
1bad4     BC 96 B0 FD | 	call	#__system___getiolock_0508
1bad8     FD 00 68 FC | 	wrlong	#0, result1
1badc     37 00 00 FF 
1bae0     64 E4 05 F1 | 	add	objptr, ##28260
1bae4     F2 12 02 FB | 	rdlong	arg01, objptr
1bae8     37 00 00 FF 
1baec     64 E4 85 F1 | 	sub	objptr, ##28260
1baf0     01 12 66 F0 | 	shl	arg01, #1
1baf4     04 14 06 F6 | 	mov	arg02, #4
1baf8     48 25 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1bafc                 | ' position 2*editor_spaces,4 : print "Ready"
1bafc     00 12 06 F6 | 	mov	arg01, #0
1bb00     90 96 B0 FD | 	call	#__system___getiolock_0508
1bb04     FD 12 02 F6 | 	mov	arg01, result1
1bb08     F0 3C B0 FD | 	call	#__system___lockmem
1bb0c     7D 01 00 FF 
1bb10     9A 15 06 F6 | 	mov	arg02, ##@LR__5336
1bb14     00 12 06 F6 | 	mov	arg01, #0
1bb18     00 16 06 F6 | 	mov	arg03, #0
1bb1c     D0 49 B0 FD | 	call	#__system___basic_print_string
1bb20     FD 22 02 F6 | 	mov	local03, result1
1bb24     00 12 06 F6 | 	mov	arg01, #0
1bb28     0A 14 06 F6 | 	mov	arg02, #10
1bb2c     00 16 06 F6 | 	mov	arg03, #0
1bb30     64 49 B0 FD | 	call	#__system___basic_print_char
1bb34     01 24 06 F6 | 	mov	local04, #1
1bb38     00 12 06 F6 | 	mov	arg01, #0
1bb3c     54 96 B0 FD | 	call	#__system___getiolock_0508
1bb40     FD 00 68 FC | 	wrlong	#0, result1
1bb44     00 26 06 F6 | 	mov	local05, #0
1bb48     00 14 06 F6 | 	mov	arg02, #0
1bb4c     01 14 D6 F7 | 	test	arg02, #1 wc
1bb50     5A 4C 64 FD | 	drvc	#38
1bb54     01 14 D6 F7 | 	test	arg02, #1 wc
1bb58     5A 4E 64 FD | 	drvc	#39
1bb5c     7D 01 00 FF 
1bb60     A0 21 06 F6 | 	mov	local02, ##@LR__5337
1bb64     59 00 00 FF 
1bb68     E4 E5 05 F1 | 	add	objptr, ##46052
1bb6c     F2 20 62 FC | 	wrlong	local02, objptr
1bb70     04 E4 05 F1 | 	add	objptr, #4
1bb74     FF FF FF FF 
1bb78     F2 FE 6B FC | 	wrlong	##-1, objptr
1bb7c     59 00 00 FF 
1bb80     E8 E5 85 F1 | 	sub	objptr, ##46056
1bb84                 | ' 'hubset( %1_000001__00_0001_1010__1111_1011)
1bb84                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
1bb84                 | ' 
1bb84                 | ' loadname="noname.bas"
1bb84                 | ' do_insert=-1
1bb84                 | ' 
1bb84                 | ' 
1bb84                 | ' '-------------------------------------------------------------------------------------------------------- 
1bb84                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
1bb84                 | ' '--------------------------------------------------------------------------------------------------------
1bb84                 | ' 
1bb84                 | ' do
1bb84                 | LR__2180
1bb84     01 12 06 F6 | 	mov	arg01, #1
1bb88     58 25 B0 FD | 	call	#_hg010b_spin2_waitvbl
1bb8c     07 12 06 F6 | 	mov	arg01, #7
1bb90     0B 00 00 FF 
1bb94     CC E4 05 F1 | 	add	objptr, ##5836
1bb98     60 39 B0 FD | 	call	#_audio096_spin2_stop
1bb9c     0B 00 00 FF 
1bba0     CC E4 85 F1 | 	sub	objptr, ##5836
1bba4     40 34 B0 FD | 	call	#_usbnew_spin2_get_key
1bba8     45 00 00 FF 
1bbac     A4 E4 05 F1 | 	add	objptr, ##35492
1bbb0     F2 FA 61 FC | 	wrlong	result1, objptr
1bbb4                 | '   return hkbd_led_rep
1bbb4     13 00 00 FF 
1bbb8     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
1bbbc     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
1bbc0     13 00 00 FF 
1bbc4     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
1bbc8     14 00 00 FF 
1bbcc     48 E5 05 F1 | 	add	objptr, ##10568
1bbd0     F2 FA 61 FC | 	wrlong	result1, objptr
1bbd4                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
1bbd4     14 00 00 FF 
1bbd8     48 E5 85 F1 | 	sub	objptr, ##10568
1bbdc     F2 20 02 FB | 	rdlong	local02, objptr
1bbe0     45 00 00 FF 
1bbe4     A4 E4 85 F1 | 	sub	objptr, ##35492
1bbe8     01 20 16 F2 | 	cmp	local02, #1 wc
1bbec     BC 00 90 CD |  if_b	jmp	#LR__2181
1bbf0     45 00 00 FF 
1bbf4     A4 E4 05 F1 | 	add	objptr, ##35492
1bbf8     F2 24 02 FB | 	rdlong	local04, objptr
1bbfc     45 00 00 FF 
1bc00     A4 E4 85 F1 | 	sub	objptr, ##35492
1bc04     12 23 02 F6 | 	mov	local03, local04
1bc08     04 22 16 F2 | 	cmp	local03, #4 wc
1bc0c     9C 00 90 3D |  if_ae	jmp	#LR__2181
1bc10     58 00 00 FF 
1bc14     20 E5 05 F1 | 	add	objptr, ##45344
1bc18     F2 1E 02 FB | 	rdlong	local01, objptr
1bc1c     58 00 00 FF 
1bc20     20 E5 85 F1 | 	sub	objptr, ##45344
1bc24     0F 27 02 F6 | 	mov	local05, local01
1bc28     01 26 0E F2 | 	cmp	local05, #1 wz
1bc2c     7C 00 90 5D |  if_ne	jmp	#LR__2181
1bc30     04 00 00 FF 
1bc34     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
1bc38     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1bc3c     04 00 00 FF 
1bc40     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
1bc44     56 00 00 FF 
1bc48     44 22 06 F6 | 	mov	local03, ##44100
1bc4c     0C 24 C6 F9 | 	decod	local04, #12
1bc50     00 26 06 F6 | 	mov	local05, #0
1bc54     03 00 00 FF 
1bc58     DE 1E 06 F6 | 	mov	local01, ##1758
1bc5c     07 12 06 F6 | 	mov	arg01, #7
1bc60     56 00 00 FF 
1bc64     44 16 06 F6 | 	mov	arg03, ##44100
1bc68     0C 18 C6 F9 | 	decod	arg04, #12
1bc6c     00 1A 06 F6 | 	mov	arg05, #0
1bc70     03 00 00 FF 
1bc74     DE 1C 06 F6 | 	mov	arg06, ##1758
1bc78     0B 00 00 FF 
1bc7c     CC E4 05 F1 | 	add	objptr, ##5836
1bc80     08 37 B0 FD | 	call	#_audio096_spin2_play
1bc84     0B 00 00 FF 
1bc88     CC E4 85 F1 | 	sub	objptr, ##5836
1bc8c     0A 12 06 F6 | 	mov	arg01, #10
1bc90     5C 3E B0 FD | 	call	#__system___waitms
1bc94     07 12 06 F6 | 	mov	arg01, #7
1bc98     0B 00 00 FF 
1bc9c     CC E4 05 F1 | 	add	objptr, ##5836
1bca0     58 38 B0 FD | 	call	#_audio096_spin2_stop
1bca4     0B 00 00 FF 
1bca8     CC E4 85 F1 | 	sub	objptr, ##5836
1bcac                 | LR__2181
1bcac                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then let key2=key : let rpt=1 : let key3=key2
1bcac     45 00 00 FF 
1bcb0     A4 E4 05 F1 | 	add	objptr, ##35492
1bcb4     F2 20 02 FB | 	rdlong	local02, objptr
1bcb8     45 00 00 FF 
1bcbc     A4 E4 85 F1 | 	sub	objptr, ##35492
1bcc0     04 20 16 F2 | 	cmp	local02, #4 wc
1bcc4     80 00 90 CD |  if_b	jmp	#LR__2182
1bcc8     45 00 00 FF 
1bccc     A4 E4 05 F1 | 	add	objptr, ##35492
1bcd0     F2 24 02 FB | 	rdlong	local04, objptr
1bcd4     45 00 00 FF 
1bcd8     A4 E4 85 F1 | 	sub	objptr, ##35492
1bcdc     12 23 02 F6 | 	mov	local03, local04
1bce0     00 00 40 FF 
1bce4     00 22 16 F2 | 	cmp	local03, ##-2147483648 wc
1bce8     45 00 00 CF 
1bcec     A4 E4 05 C1 |  if_b	add	objptr, ##35492
1bcf0     F2 1E 02 CB |  if_b	rdlong	local01, objptr
1bcf4     45 00 00 CF 
1bcf8     A4 E4 85 C1 |  if_b	sub	objptr, ##35492
1bcfc     0F 27 E2 C8 |  if_b	getbyte	local05, local01, #0
1bd00     E0 26 16 C2 |  if_b	cmp	local05, #224 wc
1bd04     40 00 90 3D |  if_ae	jmp	#LR__2182
1bd08     45 00 00 FF 
1bd0c     A4 E4 05 F1 | 	add	objptr, ##35492
1bd10     F2 20 02 FB | 	rdlong	local02, objptr
1bd14     04 E4 05 F1 | 	add	objptr, #4
1bd18     F2 20 62 FC | 	wrlong	local02, objptr
1bd1c     14 00 00 FF 
1bd20     48 E5 05 F1 | 	add	objptr, ##10568
1bd24     F2 02 68 FC | 	wrlong	#1, objptr
1bd28     14 00 00 FF 
1bd2c     48 E5 85 F1 | 	sub	objptr, ##10568
1bd30     F2 20 02 FB | 	rdlong	local02, objptr
1bd34     14 00 00 FF 
1bd38     4C E5 05 F1 | 	add	objptr, ##10572
1bd3c     F2 20 62 FC | 	wrlong	local02, objptr
1bd40     59 00 00 FF 
1bd44     F4 E5 85 F1 | 	sub	objptr, ##46068
1bd48                 | LR__2182
1bd48                 | ' if key>$80000000 then let rptcnt=0 : let rpt=0
1bd48     45 00 00 FF 
1bd4c     A4 E4 05 F1 | 	add	objptr, ##35492
1bd50     F2 20 02 FB | 	rdlong	local02, objptr
1bd54     45 00 00 FF 
1bd58     A4 E4 85 F1 | 	sub	objptr, ##35492
1bd5c     00 00 40 FF 
1bd60     01 20 16 F2 | 	cmp	local02, ##-2147483647 wc
1bd64     59 00 00 3F 
1bd68     F8 E5 05 31 |  if_ae	add	objptr, ##46072
1bd6c     F2 00 68 3C |  if_ae	wrlong	#0, objptr
1bd70     08 E4 85 31 |  if_ae	sub	objptr, #8
1bd74     F2 00 68 3C |  if_ae	wrlong	#0, objptr
1bd78     59 00 00 3F 
1bd7c     F0 E5 85 31 |  if_ae	sub	objptr, ##46064
1bd80                 | ' if key=0 andalso rpt=1 then rptcnt+=1
1bd80     45 00 00 FF 
1bd84     A4 E4 05 F1 | 	add	objptr, ##35492
1bd88     F2 20 0A FB | 	rdlong	local02, objptr wz
1bd8c     45 00 00 FF 
1bd90     A4 E4 85 F1 | 	sub	objptr, ##35492
1bd94     59 00 00 AF 
1bd98     F0 E5 05 A1 |  if_e	add	objptr, ##46064
1bd9c     F2 24 02 AB |  if_e	rdlong	local04, objptr
1bda0     59 00 00 AF 
1bda4     F0 E5 85 A1 |  if_e	sub	objptr, ##46064
1bda8     12 23 02 A6 |  if_e	mov	local03, local04
1bdac     01 22 0E A2 |  if_e	cmp	local03, #1 wz
1bdb0     59 00 00 AF 
1bdb4     F8 E5 05 A1 |  if_e	add	objptr, ##46072
1bdb8     F2 20 02 AB |  if_e	rdlong	local02, objptr
1bdbc     01 20 06 A1 |  if_e	add	local02, #1
1bdc0     F2 20 62 AC |  if_e	wrlong	local02, objptr
1bdc4     59 00 00 AF 
1bdc8     F8 E5 85 A1 |  if_e	sub	objptr, ##46072
1bdcc                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
1bdcc     45 00 00 FF 
1bdd0     A4 E4 05 F1 | 	add	objptr, ##35492
1bdd4     F2 20 02 FB | 	rdlong	local02, objptr
1bdd8     45 00 00 FF 
1bddc     A4 E4 85 F1 | 	sub	objptr, ##35492
1bde0     00 00 40 FF 
1bde4     00 20 16 F2 | 	cmp	local02, ##-2147483648 wc
1bde8     44 00 90 3D |  if_ae	jmp	#LR__2184
1bdec     59 00 00 FF 
1bdf0     F8 E5 05 F1 | 	add	objptr, ##46072
1bdf4     F2 20 02 FB | 	rdlong	local02, objptr
1bdf8     59 00 00 FF 
1bdfc     F8 E5 85 F1 | 	sub	objptr, ##46072
1be00     19 20 0E F2 | 	cmp	local02, #25 wz
1be04     28 00 90 5D |  if_ne	jmp	#LR__2183
1be08     45 00 00 FF 
1be0c     A8 E4 05 F1 | 	add	objptr, ##35496
1be10     F2 20 02 FB | 	rdlong	local02, objptr
1be14     14 00 00 FF 
1be18     4C E5 05 F1 | 	add	objptr, ##10572
1be1c     F2 20 62 FC | 	wrlong	local02, objptr
1be20     04 E4 05 F1 | 	add	objptr, #4
1be24     F2 2A 68 FC | 	wrlong	#21, objptr
1be28     59 00 00 FF 
1be2c     F8 E5 85 F1 | 	sub	objptr, ##46072
1be30                 | LR__2183
1be30                 | LR__2184
1be30                 | ' 
1be30                 | ' 
1be30                 | ' if key3<>0 then
1be30     59 00 00 FF 
1be34     F4 E5 05 F1 | 	add	objptr, ##46068
1be38     F2 28 0A FB | 	rdlong	local06, objptr wz
1be3c     59 00 00 FF 
1be40     F4 E5 85 F1 | 	sub	objptr, ##46068
1be44     3C FD 9F AD |  if_e	jmp	#LR__2180
1be48                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
1be48     58 00 00 FF 
1be4c     20 E5 05 F1 | 	add	objptr, ##45344
1be50     F2 20 02 FB | 	rdlong	local02, objptr
1be54     58 00 00 FF 
1be58     20 E5 85 F1 | 	sub	objptr, ##45344
1be5c     01 20 0E F2 | 	cmp	local02, #1 wz
1be60     50 00 90 5D |  if_ne	jmp	#LR__2185
1be64     59 00 00 FF 
1be68     C4 E5 05 F1 | 	add	objptr, ##46020
1be6c     F2 14 02 FB | 	rdlong	arg02, objptr
1be70     56 00 00 FF 
1be74     44 22 06 F6 | 	mov	local03, ##44100
1be78     0C 24 C6 F9 | 	decod	local04, #12
1be7c     04 E4 85 F1 | 	sub	objptr, #4
1be80     F2 26 02 FB | 	rdlong	local05, objptr
1be84     01 1E 66 F6 | 	neg	local01, #1
1be88     07 12 06 F6 | 	mov	arg01, #7
1be8c     56 00 00 FF 
1be90     44 16 06 F6 | 	mov	arg03, ##44100
1be94     0C 18 C6 F9 | 	decod	arg04, #12
1be98     13 1B 02 F6 | 	mov	arg05, local05
1be9c     01 1C 66 F6 | 	neg	arg06, #1
1bea0     4E 00 00 FF 
1bea4     F4 E4 85 F1 | 	sub	objptr, ##40180
1bea8     E0 34 B0 FD | 	call	#_audio096_spin2_play
1beac     0B 00 00 FF 
1beb0     CC E4 85 F1 | 	sub	objptr, ##5836
1beb4                 | LR__2185
1beb4     59 00 00 FF 
1beb8     F4 E5 05 F1 | 	add	objptr, ##46068
1bebc     F2 12 02 FB | 	rdlong	arg01, objptr
1bec0     59 00 00 FF 
1bec4     F4 E5 85 F1 | 	sub	objptr, ##46068
1bec8     CC F7 BF FD | 	call	#_scantochar
1becc     59 00 00 FF 
1bed0     FC E5 05 F1 | 	add	objptr, ##46076
1bed4     F2 FA 61 FC | 	wrlong	result1, objptr
1bed8                 | '   if leds and 2 = 2 then 
1bed8     10 E4 85 F1 | 	sub	objptr, #16
1bedc     F2 20 0A FB | 	rdlong	local02, objptr wz
1bee0     59 00 00 FF 
1bee4     EC E5 85 F1 | 	sub	objptr, ##46060
1bee8     68 01 90 AD |  if_e	jmp	#LR__2193
1beec                 | '     if key4>96 andalso key4<123 then
1beec     59 00 00 FF 
1bef0     FC E5 05 F1 | 	add	objptr, ##46076
1bef4     F2 20 02 FB | 	rdlong	local02, objptr
1bef8     59 00 00 FF 
1befc     FC E5 85 F1 | 	sub	objptr, ##46076
1bf00     61 20 56 F2 | 	cmps	local02, #97 wc
1bf04     40 00 90 CD |  if_b	jmp	#LR__2186
1bf08     59 00 00 FF 
1bf0c     FC E5 05 F1 | 	add	objptr, ##46076
1bf10     F2 24 02 FB | 	rdlong	local04, objptr
1bf14     59 00 00 FF 
1bf18     FC E5 85 F1 | 	sub	objptr, ##46076
1bf1c     12 23 02 F6 | 	mov	local03, local04
1bf20     7B 22 56 F2 | 	cmps	local03, #123 wc
1bf24     20 00 90 3D |  if_ae	jmp	#LR__2186
1bf28     59 00 00 FF 
1bf2c     FC E5 05 F1 | 	add	objptr, ##46076
1bf30     F2 20 02 FB | 	rdlong	local02, objptr
1bf34     20 20 86 F1 | 	sub	local02, #32
1bf38     F2 20 62 FC | 	wrlong	local02, objptr
1bf3c     59 00 00 FF 
1bf40     FC E5 85 F1 | 	sub	objptr, ##46076
1bf44     0C 01 90 FD | 	jmp	#LR__2192
1bf48                 | LR__2186
1bf48     59 00 00 FF 
1bf4c     FC E5 05 F1 | 	add	objptr, ##46076
1bf50     F2 20 02 FB | 	rdlong	local02, objptr
1bf54     59 00 00 FF 
1bf58     FC E5 85 F1 | 	sub	objptr, ##46076
1bf5c     41 20 56 F2 | 	cmps	local02, #65 wc
1bf60     40 00 90 CD |  if_b	jmp	#LR__2187
1bf64     59 00 00 FF 
1bf68     FC E5 05 F1 | 	add	objptr, ##46076
1bf6c     F2 24 02 FB | 	rdlong	local04, objptr
1bf70     59 00 00 FF 
1bf74     FC E5 85 F1 | 	sub	objptr, ##46076
1bf78     12 23 02 F6 | 	mov	local03, local04
1bf7c     5B 22 56 F2 | 	cmps	local03, #91 wc
1bf80     20 00 90 3D |  if_ae	jmp	#LR__2187
1bf84     59 00 00 FF 
1bf88     FC E5 05 F1 | 	add	objptr, ##46076
1bf8c     F2 20 02 FB | 	rdlong	local02, objptr
1bf90     20 20 06 F1 | 	add	local02, #32
1bf94     F2 20 62 FC | 	wrlong	local02, objptr
1bf98     59 00 00 FF 
1bf9c     FC E5 85 F1 | 	sub	objptr, ##46076
1bfa0     B0 00 90 FD | 	jmp	#LR__2191
1bfa4                 | LR__2187
1bfa4     59 00 00 FF 
1bfa8     FC E5 05 F1 | 	add	objptr, ##46076
1bfac     F2 20 02 FB | 	rdlong	local02, objptr
1bfb0     59 00 00 FF 
1bfb4     FC E5 85 F1 | 	sub	objptr, ##46076
1bfb8     17 20 56 F2 | 	cmps	local02, #23 wc
1bfbc     40 00 90 CD |  if_b	jmp	#LR__2188
1bfc0     59 00 00 FF 
1bfc4     FC E5 05 F1 | 	add	objptr, ##46076
1bfc8     F2 24 02 FB | 	rdlong	local04, objptr
1bfcc     59 00 00 FF 
1bfd0     FC E5 85 F1 | 	sub	objptr, ##46076
1bfd4     12 23 02 F6 | 	mov	local03, local04
1bfd8     20 22 56 F2 | 	cmps	local03, #32 wc
1bfdc     20 00 90 3D |  if_ae	jmp	#LR__2188
1bfe0     59 00 00 FF 
1bfe4     FC E5 05 F1 | 	add	objptr, ##46076
1bfe8     F2 20 02 FB | 	rdlong	local02, objptr
1bfec     09 20 86 F1 | 	sub	local02, #9
1bff0     F2 20 62 FC | 	wrlong	local02, objptr
1bff4     59 00 00 FF 
1bff8     FC E5 85 F1 | 	sub	objptr, ##46076
1bffc     54 00 90 FD | 	jmp	#LR__2190
1c000                 | LR__2188
1c000     59 00 00 FF 
1c004     FC E5 05 F1 | 	add	objptr, ##46076
1c008     F2 20 02 FB | 	rdlong	local02, objptr
1c00c     59 00 00 FF 
1c010     FC E5 85 F1 | 	sub	objptr, ##46076
1c014     0E 20 56 F2 | 	cmps	local02, #14 wc
1c018     38 00 90 CD |  if_b	jmp	#LR__2189
1c01c     59 00 00 FF 
1c020     FC E5 05 F1 | 	add	objptr, ##46076
1c024     F2 24 02 FB | 	rdlong	local04, objptr
1c028     59 00 00 FF 
1c02c     FC E5 85 F1 | 	sub	objptr, ##46076
1c030     12 23 02 F6 | 	mov	local03, local04
1c034     17 22 56 F2 | 	cmps	local03, #23 wc
1c038     59 00 00 CF 
1c03c     FC E5 05 C1 |  if_b	add	objptr, ##46076
1c040     F2 20 02 CB |  if_b	rdlong	local02, objptr
1c044     27 20 06 C1 |  if_b	add	local02, #39
1c048     F2 20 62 CC |  if_b	wrlong	local02, objptr
1c04c     59 00 00 CF 
1c050     FC E5 85 C1 |  if_b	sub	objptr, ##46076
1c054                 | LR__2189
1c054                 | LR__2190
1c054                 | LR__2191
1c054                 | LR__2192
1c054                 | LR__2193
1c054                 | '  
1c054                 | '  
1c054                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then 
1c054     59 00 00 FF 
1c058     FC E5 05 F1 | 	add	objptr, ##46076
1c05c     F2 20 02 FB | 	rdlong	local02, objptr
1c060     59 00 00 FF 
1c064     FC E5 85 F1 | 	sub	objptr, ##46076
1c068     01 20 56 F2 | 	cmps	local02, #1 wc
1c06c     E8 01 90 CD |  if_b	jmp	#LR__2198
1c070     59 00 00 FF 
1c074     FC E5 05 F1 | 	add	objptr, ##46076
1c078     F2 24 02 FB | 	rdlong	local04, objptr
1c07c     59 00 00 FF 
1c080     FC E5 85 F1 | 	sub	objptr, ##46076
1c084     12 23 02 F6 | 	mov	local03, local04
1c088     7F 22 56 F2 | 	cmps	local03, #127 wc
1c08c     3C E4 05 C1 |  if_b	add	objptr, #60
1c090     F2 1E E2 CA |  if_b	rdword	local01, objptr
1c094     3C E4 85 C1 |  if_b	sub	objptr, #60
1c098     0F 27 32 C9 |  if_b	getword	local05, local01, #0
1c09c     FE 26 16 C2 |  if_b	cmp	local05, #254 wc
1c0a0     B4 01 90 3D |  if_ae	jmp	#LR__2198
1c0a4                 | '     if do_insert then
1c0a4     59 00 00 FF 
1c0a8     E8 E5 05 F1 | 	add	objptr, ##46056
1c0ac     F2 20 0A FB | 	rdlong	local02, objptr wz
1c0b0     59 00 00 FF 
1c0b4     E8 E5 85 F1 | 	sub	objptr, ##46056
1c0b8     84 01 90 AD |  if_e	jmp	#LR__2197
1c0bc                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
1c0bc     3E E4 05 F1 | 	add	objptr, #62
1c0c0     F2 22 C2 FA | 	rdbyte	local03, objptr
1c0c4     11 25 E2 F8 | 	getbyte	local04, local03, #0
1c0c8     80 24 06 FA | 	mul	local04, #128
1c0cc     3A E4 85 F1 | 	sub	objptr, #58
1c0d0     F2 2A 02 FB | 	rdlong	local07, objptr
1c0d4     15 2D 02 F6 | 	mov	local08, local07
1c0d8     12 2D 02 F1 | 	add	local08, local04
1c0dc     7F 2C 06 F1 | 	add	local08, #127
1c0e0     11 23 E2 F8 | 	getbyte	local03, local03, #0
1c0e4     80 22 06 FA | 	mul	local03, #128
1c0e8     11 2B 02 F1 | 	add	local07, local03
1c0ec     38 E4 05 F1 | 	add	objptr, #56
1c0f0     F2 26 E2 FA | 	rdword	local05, objptr
1c0f4     3C E4 85 F1 | 	sub	objptr, #60
1c0f8     13 2F 52 F6 | 	abs	local09, local05 wc
1c0fc     01 2E 46 F0 | 	shr	local09, #1
1c100     17 2B 82 F3 | 	sumc	local07, local09
1c104     01 2A 06 F1 | 	add	local07, #1
1c108                 | LR__2194
1c108     16 31 02 F6 | 	mov	local10, local08
1c10c     01 30 86 F1 | 	sub	local10, #1
1c110     18 13 02 F6 | 	mov	arg01, local10
1c114     78 F4 BF FD | 	call	#_pspeek
1c118     FD 32 02 F6 | 	mov	local11, result1
1c11c     19 35 E2 F8 | 	getbyte	local12, local11, #0
1c120     1A 37 02 F6 | 	mov	local13, local12
1c124     16 13 02 F6 | 	mov	arg01, local08
1c128     1B 15 02 F6 | 	mov	arg02, local13
1c12c     18 F4 BF FD | 	call	#_pspoke
1c130     01 2C 86 F1 | 	sub	local08, #1
1c134     15 2D 52 F2 | 	cmps	local08, local07 wc
1c138     CC FF 9F 3D |  if_ae	jmp	#LR__2194
1c13c     5A 00 00 FF 
1c140     00 E4 05 F1 | 	add	objptr, ##46080
1c144     F2 00 68 FC | 	wrlong	#0, objptr
1c148     59 00 00 FF 
1c14c     C2 E5 85 F1 | 	sub	objptr, ##46018
1c150     F2 22 C2 FA | 	rdbyte	local03, objptr
1c154     11 25 E2 F8 | 	getbyte	local04, local03, #0
1c158     80 24 06 FA | 	mul	local04, #128
1c15c     3A E4 85 F1 | 	sub	objptr, #58
1c160     F2 26 02 FB | 	rdlong	local05, objptr
1c164     13 2D 02 F6 | 	mov	local08, local05
1c168     12 2D 02 F1 | 	add	local08, local04
1c16c     38 E4 05 F1 | 	add	objptr, #56
1c170     F2 2E E2 FA | 	rdword	local09, objptr
1c174     17 1F 32 F9 | 	getword	local01, local09, #0
1c178     0F 39 52 F6 | 	abs	local14, local01 wc
1c17c     01 38 46 F0 | 	shr	local14, #1
1c180     1C 39 82 F6 | 	negc	local14, local14
1c184     1C 2D 02 F1 | 	add	local08, local14
1c188     11 23 E2 F8 | 	getbyte	local03, local03, #0
1c18c     80 22 06 FA | 	mul	local03, #128
1c190     13 25 02 F6 | 	mov	local04, local05
1c194     3C E4 85 F1 | 	sub	objptr, #60
1c198     12 3B 02 F6 | 	mov	local15, local04
1c19c     11 3B 02 F1 | 	add	local15, local03
1c1a0     80 3A 06 F1 | 	add	local15, #128
1c1a4                 | LR__2195
1c1a4     1D 2D 52 F2 | 	cmps	local08, local15 wc
1c1a8     94 00 90 3D |  if_ae	jmp	#LR__2196
1c1ac     3C E4 05 F1 | 	add	objptr, #60
1c1b0     F2 20 E2 FA | 	rdword	local02, objptr
1c1b4     59 00 00 FF 
1c1b8     C4 E5 05 F1 | 	add	objptr, ##46020
1c1bc     F2 24 02 FB | 	rdlong	local04, objptr
1c1c0     01 24 66 F0 | 	shl	local04, #1
1c1c4     12 21 02 F1 | 	add	local02, local04
1c1c8     59 00 00 FF 
1c1cc     C2 E5 85 F1 | 	sub	objptr, ##46018
1c1d0     F2 28 C2 FA | 	rdbyte	local06, objptr
1c1d4     3E E4 85 F1 | 	sub	objptr, #62
1c1d8     10 28 06 FA | 	mul	local06, #16
1c1dc     04 28 06 F1 | 	add	local06, #4
1c1e0     16 13 02 F6 | 	mov	arg01, local08
1c1e4     A8 F3 BF FD | 	call	#_pspeek
1c1e8     FD 22 E2 F8 | 	getbyte	local03, result1, #0
1c1ec     41 E4 05 F1 | 	add	objptr, #65
1c1f0     F2 24 02 FB | 	rdlong	local04, objptr
1c1f4     04 E4 05 F1 | 	add	objptr, #4
1c1f8     F2 1E 02 FB | 	rdlong	local01, objptr
1c1fc     45 E4 85 F1 | 	sub	objptr, #69
1c200     0F 27 02 F6 | 	mov	local05, local01
1c204     10 13 02 F6 | 	mov	arg01, local02
1c208     14 15 02 F6 | 	mov	arg02, local06
1c20c     11 17 02 F6 | 	mov	arg03, local03
1c210     12 19 02 F6 | 	mov	arg04, local04
1c214     13 1B 02 F6 | 	mov	arg05, local05
1c218     C4 1C B0 FD | 	call	#_hg010b_spin2_putcharxycgf
1c21c     5A 00 00 FF 
1c220     00 E4 05 F1 | 	add	objptr, ##46080
1c224     F2 20 02 FB | 	rdlong	local02, objptr
1c228     01 20 06 F1 | 	add	local02, #1
1c22c     F2 20 62 FC | 	wrlong	local02, objptr
1c230     5A 00 00 FF 
1c234     00 E4 85 F1 | 	sub	objptr, ##46080
1c238     01 2C 06 F1 | 	add	local08, #1
1c23c     64 FF 9F FD | 	jmp	#LR__2195
1c240                 | LR__2196
1c240                 | LR__2197
1c240     59 00 00 FF 
1c244     FC E5 05 F1 | 	add	objptr, ##46076
1c248     F2 12 02 FB | 	rdlong	arg01, objptr
1c24c     59 00 00 FF 
1c250     FC E5 85 F1 | 	sub	objptr, ##46076
1c254     D0 1F B0 FD | 	call	#_hg010b_spin2_putchar
1c258                 | LR__2198
1c258                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
1c258     59 00 00 FF 
1c25c     FC E5 05 F1 | 	add	objptr, ##46076
1c260     F2 20 02 FB | 	rdlong	local02, objptr
1c264     59 00 00 FF 
1c268     FC E5 85 F1 | 	sub	objptr, ##46076
1c26c     01 20 56 F2 | 	cmps	local02, #1 wc
1c270     D0 00 90 CD |  if_b	jmp	#LR__2199
1c274     59 00 00 FF 
1c278     FC E5 05 F1 | 	add	objptr, ##46076
1c27c     F2 24 02 FB | 	rdlong	local04, objptr
1c280     59 00 00 FF 
1c284     FC E5 85 F1 | 	sub	objptr, ##46076
1c288     12 23 02 F6 | 	mov	local03, local04
1c28c     7F 22 56 F2 | 	cmps	local03, #127 wc
1c290     B0 00 90 3D |  if_ae	jmp	#LR__2199
1c294     3C E4 05 F1 | 	add	objptr, #60
1c298     F2 1E E2 FA | 	rdword	local01, objptr
1c29c     3C E4 85 F1 | 	sub	objptr, #60
1c2a0     0F 27 32 F9 | 	getword	local05, local01, #0
1c2a4     FE 26 0E F2 | 	cmp	local05, #254 wz
1c2a8     58 00 00 AF 
1c2ac     20 E5 05 A1 |  if_e	add	objptr, ##45344
1c2b0     F2 38 02 AB |  if_e	rdlong	local14, objptr
1c2b4     58 00 00 AF 
1c2b8     20 E5 85 A1 |  if_e	sub	objptr, ##45344
1c2bc     1C 2F 02 A6 |  if_e	mov	local09, local14
1c2c0     01 2E 0E A2 |  if_e	cmp	local09, #1 wz
1c2c4     7C 00 90 5D |  if_ne	jmp	#LR__2199
1c2c8     04 00 00 FF 
1c2cc     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
1c2d0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1c2d4     04 00 00 FF 
1c2d8     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
1c2dc     56 00 00 FF 
1c2e0     44 22 06 F6 | 	mov	local03, ##44100
1c2e4     0C 24 C6 F9 | 	decod	local04, #12
1c2e8     00 26 06 F6 | 	mov	local05, #0
1c2ec     03 00 00 FF 
1c2f0     DE 1E 06 F6 | 	mov	local01, ##1758
1c2f4     07 12 06 F6 | 	mov	arg01, #7
1c2f8     56 00 00 FF 
1c2fc     44 16 06 F6 | 	mov	arg03, ##44100
1c300     0C 18 C6 F9 | 	decod	arg04, #12
1c304     00 1A 06 F6 | 	mov	arg05, #0
1c308     03 00 00 FF 
1c30c     DE 1C 06 F6 | 	mov	arg06, ##1758
1c310     0B 00 00 FF 
1c314     CC E4 05 F1 | 	add	objptr, ##5836
1c318     70 30 B0 FD | 	call	#_audio096_spin2_play
1c31c     0B 00 00 FF 
1c320     CC E4 85 F1 | 	sub	objptr, ##5836
1c324     2C 13 06 F6 | 	mov	arg01, #300
1c328     C4 37 B0 FD | 	call	#__system___waitms
1c32c     07 12 06 F6 | 	mov	arg01, #7
1c330     0B 00 00 FF 
1c334     CC E4 05 F1 | 	add	objptr, ##5836
1c338     C0 31 B0 FD | 	call	#_audio096_spin2_stop
1c33c     0B 00 00 FF 
1c340     CC E4 85 F1 | 	sub	objptr, ##5836
1c344                 | LR__2199
1c344                 | '  
1c344                 | '   if key4=key_enter then 
1c344     59 00 00 FF 
1c348     FC E5 05 F1 | 	add	objptr, ##46076
1c34c     F2 20 02 FB | 	rdlong	local02, objptr
1c350     59 00 00 FF 
1c354     FC E5 85 F1 | 	sub	objptr, ##46076
1c358     8D 20 0E F2 | 	cmp	local02, #141 wz
1c35c     F0 00 90 5D |  if_ne	jmp	#LR__2202
1c360     7D 01 00 FF 
1c364     AB 21 06 F6 | 	mov	local02, ##@LR__5338
1c368     37 00 00 FF 
1c36c     4C E4 05 F1 | 	add	objptr, ##28236
1c370     F2 20 62 FC | 	wrlong	local02, objptr
1c374                 | ' 
1c374                 | ' ''      interpret: line$="" :let t1=getct()-t1 :rpt=0: rptcnt=0
1c374                 | '     line$="" : for i=editor_spaces to 127
1c374     18 E4 05 F1 | 	add	objptr, #24
1c378     F2 2C 02 FB | 	rdlong	local08, objptr
1c37c     37 00 00 FF 
1c380     64 E4 85 F1 | 	sub	objptr, ##28260
1c384                 | LR__2200
1c384     80 2C 56 F2 | 	cmps	local08, #128 wc
1c388     8C 00 90 3D |  if_ae	jmp	#LR__2201
1c38c     3E E4 05 F1 | 	add	objptr, #62
1c390     F2 1E C2 FA | 	rdbyte	local01, objptr
1c394     0F 27 E2 F8 | 	getbyte	local05, local01, #0
1c398     13 2F 02 F6 | 	mov	local09, local05
1c39c     80 2E 06 FA | 	mul	local09, #128
1c3a0     3A E4 85 F1 | 	sub	objptr, #58
1c3a4     F2 38 02 FB | 	rdlong	local14, objptr
1c3a8     04 E4 85 F1 | 	sub	objptr, #4
1c3ac     1C 13 02 F6 | 	mov	arg01, local14
1c3b0     17 13 02 F1 | 	add	arg01, local09
1c3b4     16 13 02 F1 | 	add	arg01, local08
1c3b8     D4 F1 BF FD | 	call	#_pspeek
1c3bc     FD 24 E2 F8 | 	getbyte	local04, result1, #0
1c3c0     5A 00 00 FF 
1c3c4     04 E4 05 F1 | 	add	objptr, ##46084
1c3c8     F2 24 62 FC | 	wrlong	local04, objptr
1c3cc     22 00 00 FF 
1c3d0     B8 E5 85 F1 | 	sub	objptr, ##17848
1c3d4     F2 28 02 FB | 	rdlong	local06, objptr
1c3d8     37 00 00 FF 
1c3dc     4C E4 85 F1 | 	sub	objptr, ##28236
1c3e0     12 13 02 F6 | 	mov	arg01, local04
1c3e4     E8 55 B0 FD | 	call	#__system__Chr_S
1c3e8     FD 14 02 F6 | 	mov	arg02, result1
1c3ec     14 13 02 F6 | 	mov	arg01, local06
1c3f0     64 34 B0 FD | 	call	#__system___string_concat
1c3f4     37 00 00 FF 
1c3f8     4C E4 05 F1 | 	add	objptr, ##28236
1c3fc     F2 FA 61 FC | 	wrlong	result1, objptr
1c400     37 00 00 FF 
1c404     4C E4 85 F1 | 	sub	objptr, ##28236
1c408     16 23 02 F6 | 	mov	local03, local08
1c40c     01 22 06 F1 | 	add	local03, #1
1c410     11 2D 02 F6 | 	mov	local08, local03
1c414     6C FF 9F FD | 	jmp	#LR__2200
1c418                 | LR__2201
1c418     C4 23 B0 FD | 	call	#_hg010b_spin2_crlf
1c41c     FC 45 BE FD | 	call	#_interpret
1c420     7D 01 00 FF 
1c424     AC 21 06 F6 | 	mov	local02, ##@LR__5339
1c428     37 00 00 FF 
1c42c     4C E4 05 F1 | 	add	objptr, ##28236
1c430     F2 20 62 FC | 	wrlong	local02, objptr
1c434     22 00 00 FF 
1c438     A4 E5 05 F1 | 	add	objptr, ##17828
1c43c     F2 00 68 FC | 	wrlong	#0, objptr
1c440     08 E4 05 F1 | 	add	objptr, #8
1c444     F2 00 68 FC | 	wrlong	#0, objptr
1c448     59 00 00 FF 
1c44c     F8 E5 85 F1 | 	sub	objptr, ##46072
1c450                 | LR__2202
1c450     59 00 00 FF 
1c454     F4 E5 05 F1 | 	add	objptr, ##46068
1c458     F2 20 02 FB | 	rdlong	local02, objptr
1c45c     10 21 E2 F8 | 	getbyte	local02, local02, #0
1c460     08 E4 05 F1 | 	add	objptr, #8
1c464     F2 20 62 FC | 	wrlong	local02, objptr
1c468                 | '   'tab
1c468                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)
1c468     59 00 00 FF 
1c46c     FC E5 85 F1 | 	sub	objptr, ##46076
1c470     2B 20 0E F2 | 	cmp	local02, #43 wz
1c474     B4 00 90 5D |  if_ne	jmp	#LR__2203
1c478     3C E4 05 F1 | 	add	objptr, #60
1c47c     F2 24 E2 FA | 	rdword	local04, objptr
1c480     3C E4 85 F1 | 	sub	objptr, #60
1c484     12 23 32 F9 | 	getword	local03, local04, #0
1c488     F0 22 16 F2 | 	cmp	local03, #240 wc
1c48c     9C 00 90 CD |  if_b	jmp	#LR__2203
1c490     58 00 00 FF 
1c494     20 E5 05 F1 | 	add	objptr, ##45344
1c498     F2 1E 02 FB | 	rdlong	local01, objptr
1c49c     58 00 00 FF 
1c4a0     20 E5 85 F1 | 	sub	objptr, ##45344
1c4a4     0F 27 02 F6 | 	mov	local05, local01
1c4a8     01 26 0E F2 | 	cmp	local05, #1 wz
1c4ac     7C 00 90 5D |  if_ne	jmp	#LR__2203
1c4b0     04 00 00 FF 
1c4b4     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
1c4b8     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1c4bc     04 00 00 FF 
1c4c0     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
1c4c4     56 00 00 FF 
1c4c8     44 22 06 F6 | 	mov	local03, ##44100
1c4cc     0E 24 C6 F9 | 	decod	local04, #14
1c4d0     00 26 06 F6 | 	mov	local05, #0
1c4d4     03 00 00 FF 
1c4d8     DE 1E 06 F6 | 	mov	local01, ##1758
1c4dc     00 12 06 F6 | 	mov	arg01, #0
1c4e0     56 00 00 FF 
1c4e4     44 16 06 F6 | 	mov	arg03, ##44100
1c4e8     0E 18 C6 F9 | 	decod	arg04, #14
1c4ec     00 1A 06 F6 | 	mov	arg05, #0
1c4f0     03 00 00 FF 
1c4f4     DE 1C 06 F6 | 	mov	arg06, ##1758
1c4f8     0B 00 00 FF 
1c4fc     CC E4 05 F1 | 	add	objptr, ##5836
1c500     88 2E B0 FD | 	call	#_audio096_spin2_play
1c504     0B 00 00 FF 
1c508     CC E4 85 F1 | 	sub	objptr, ##5836
1c50c     2C 13 06 F6 | 	mov	arg01, #300
1c510     DC 35 B0 FD | 	call	#__system___waitms
1c514     00 12 06 F6 | 	mov	arg01, #0
1c518     0B 00 00 FF 
1c51c     CC E4 05 F1 | 	add	objptr, ##5836
1c520     D8 2F B0 FD | 	call	#_audio096_spin2_stop
1c524     0B 00 00 FF 
1c528     CC E4 85 F1 | 	sub	objptr, ##5836
1c52c                 | LR__2203
1c52c                 | '   if key4 = 43 andalso v.cursor_x<240 then v.setcursorx((v.cursor_x+8) and $F8)  
1c52c     59 00 00 FF 
1c530     FC E5 05 F1 | 	add	objptr, ##46076
1c534     F2 20 02 FB | 	rdlong	local02, objptr
1c538     59 00 00 FF 
1c53c     FC E5 85 F1 | 	sub	objptr, ##46076
1c540     2B 20 0E F2 | 	cmp	local02, #43 wz
1c544     34 00 90 5D |  if_ne	jmp	#LR__2204
1c548     3C E4 05 F1 | 	add	objptr, #60
1c54c     F2 24 E2 FA | 	rdword	local04, objptr
1c550     3C E4 85 F1 | 	sub	objptr, #60
1c554     12 23 32 F9 | 	getword	local03, local04, #0
1c558     F0 22 16 F2 | 	cmp	local03, #240 wc
1c55c     1C 00 90 3D |  if_ae	jmp	#LR__2204
1c560     3C E4 05 F1 | 	add	objptr, #60
1c564     F2 22 E2 FA | 	rdword	local03, objptr
1c568     3C E4 85 F1 | 	sub	objptr, #60
1c56c     11 13 32 F9 | 	getword	arg01, local03, #0
1c570     08 12 06 F1 | 	add	arg01, #8
1c574     F8 12 06 F5 | 	and	arg01, #248
1c578     04 1B B0 FD | 	call	#_hg010b_spin2_setcursorx
1c57c                 | LR__2204
1c57c                 | '  ' tab43 del 76 home74 end 77 pgup=75 pgdn 78
1c57c                 | '   if key4=77 then i=127 : do: 
1c57c     59 00 00 FF 
1c580     FC E5 05 F1 | 	add	objptr, ##46076
1c584     F2 20 02 FB | 	rdlong	local02, objptr
1c588     59 00 00 FF 
1c58c     FC E5 85 F1 | 	sub	objptr, ##46076
1c590     4D 20 0E F2 | 	cmp	local02, #77 wz
1c594     90 00 90 5D |  if_ne	jmp	#LR__2209
1c598     7F 2C 06 F6 | 	mov	local08, #127
1c59c                 | LR__2205
1c59c                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
1c59c     3E E4 05 F1 | 	add	objptr, #62
1c5a0     F2 26 C2 FA | 	rdbyte	local05, objptr
1c5a4     13 25 E2 F8 | 	getbyte	local04, local05, #0
1c5a8     12 1F 02 F6 | 	mov	local01, local04
1c5ac     80 1E 06 FA | 	mul	local01, #128
1c5b0     3A E4 85 F1 | 	sub	objptr, #58
1c5b4     F2 2E 02 FB | 	rdlong	local09, objptr
1c5b8     04 E4 85 F1 | 	sub	objptr, #4
1c5bc     17 23 02 F6 | 	mov	local03, local09
1c5c0     0F 23 02 F1 | 	add	local03, local01
1c5c4     16 23 02 F1 | 	add	local03, local08
1c5c8     11 13 02 F6 | 	mov	arg01, local03
1c5cc     C0 EF BF FD | 	call	#_pspeek
1c5d0     FD 20 E2 F8 | 	getbyte	local02, result1, #0
1c5d4     20 20 0E F2 | 	cmp	local02, #32 wz
1c5d8     2C 00 90 AD |  if_e	jmp	#LR__2207
1c5dc                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
1c5dc     7F 2C 56 F2 | 	cmps	local08, #127 wc
1c5e0     18 00 90 3D |  if_ae	jmp	#LR__2206
1c5e4     16 23 02 F6 | 	mov	local03, local08
1c5e8     01 22 66 F0 | 	shl	local03, #1
1c5ec     11 13 02 F6 | 	mov	arg01, local03
1c5f0     02 12 06 F1 | 	add	arg01, #2
1c5f4     88 1A B0 FD | 	call	#_hg010b_spin2_setcursorx
1c5f8     2C 00 90 FD | 	jmp	#LR__2208
1c5fc                 | LR__2206
1c5fc     FE 12 06 F6 | 	mov	arg01, #254
1c600     7C 1A B0 FD | 	call	#_hg010b_spin2_setcursorx
1c604     20 00 90 FD | 	jmp	#LR__2208
1c608                 | LR__2207
1c608     01 2C 86 F1 | 	sub	local08, #1
1c60c     37 00 00 FF 
1c610     64 E4 05 F1 | 	add	objptr, ##28260
1c614     F2 20 02 FB | 	rdlong	local02, objptr
1c618     37 00 00 FF 
1c61c     64 E4 85 F1 | 	sub	objptr, ##28260
1c620     10 2D 0A F2 | 	cmp	local08, local02 wz
1c624     74 FF 9F 5D |  if_ne	jmp	#LR__2205
1c628                 | LR__2208
1c628                 | LR__2209
1c628                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
1c628     37 00 00 FF 
1c62c     64 E4 05 F1 | 	add	objptr, ##28260
1c630     F2 20 02 FB | 	rdlong	local02, objptr
1c634     37 00 00 FF 
1c638     64 E4 85 F1 | 	sub	objptr, ##28260
1c63c     10 2D 0A F2 | 	cmp	local08, local02 wz
1c640     24 00 90 5D |  if_ne	jmp	#LR__2210
1c644     37 00 00 FF 
1c648     64 E4 05 F1 | 	add	objptr, ##28260
1c64c     F2 24 02 FB | 	rdlong	local04, objptr
1c650     37 00 00 FF 
1c654     64 E4 85 F1 | 	sub	objptr, ##28260
1c658     12 23 02 F6 | 	mov	local03, local04
1c65c     11 13 02 F6 | 	mov	arg01, local03
1c660     01 12 66 F0 | 	shl	arg01, #1
1c664     18 1A B0 FD | 	call	#_hg010b_spin2_setcursorx
1c668                 | LR__2210
1c668                 | '   
1c668                 | '   
1c668                 | '   if key4=74 then v.setcursorx(editor_spaces*2)
1c668     59 00 00 FF 
1c66c     FC E5 05 F1 | 	add	objptr, ##46076
1c670     F2 20 02 FB | 	rdlong	local02, objptr
1c674     59 00 00 FF 
1c678     FC E5 85 F1 | 	sub	objptr, ##46076
1c67c     4A 20 0E F2 | 	cmp	local02, #74 wz
1c680     24 00 90 5D |  if_ne	jmp	#LR__2211
1c684     37 00 00 FF 
1c688     64 E4 05 F1 | 	add	objptr, ##28260
1c68c     F2 24 02 FB | 	rdlong	local04, objptr
1c690     37 00 00 FF 
1c694     64 E4 85 F1 | 	sub	objptr, ##28260
1c698     12 23 02 F6 | 	mov	local03, local04
1c69c     11 13 02 F6 | 	mov	arg01, local03
1c6a0     01 12 66 F0 | 	shl	arg01, #1
1c6a4     D8 19 B0 FD | 	call	#_hg010b_spin2_setcursorx
1c6a8                 | LR__2211
1c6a8                 | '   if key4=75 then v.setcursory(0)
1c6a8     59 00 00 FF 
1c6ac     FC E5 05 F1 | 	add	objptr, ##46076
1c6b0     F2 20 02 FB | 	rdlong	local02, objptr
1c6b4     59 00 00 FF 
1c6b8     FC E5 85 F1 | 	sub	objptr, ##46076
1c6bc     4B 20 0E F2 | 	cmp	local02, #75 wz
1c6c0     00 12 06 A6 |  if_e	mov	arg01, #0
1c6c4     E8 19 B0 AD |  if_e	call	#_hg010b_spin2_setcursory
1c6c8                 | '   if key4=78 then v.setcursory(36) ' todo: parameter instead 36
1c6c8     59 00 00 FF 
1c6cc     FC E5 05 F1 | 	add	objptr, ##46076
1c6d0     F2 20 02 FB | 	rdlong	local02, objptr
1c6d4     59 00 00 FF 
1c6d8     FC E5 85 F1 | 	sub	objptr, ##46076
1c6dc     4E 20 0E F2 | 	cmp	local02, #78 wz
1c6e0     24 12 06 A6 |  if_e	mov	arg01, #36
1c6e4     C8 19 B0 AD |  if_e	call	#_hg010b_spin2_setcursory
1c6e8                 | '   
1c6e8                 | '   if key4=76 then 'del
1c6e8     59 00 00 FF 
1c6ec     FC E5 05 F1 | 	add	objptr, ##46076
1c6f0     F2 20 02 FB | 	rdlong	local02, objptr
1c6f4     59 00 00 FF 
1c6f8     FC E5 85 F1 | 	sub	objptr, ##46076
1c6fc     4C 20 0E F2 | 	cmp	local02, #76 wz
1c700     9C 01 90 5D |  if_ne	jmp	#LR__2216
1c704                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
1c704     3E E4 05 F1 | 	add	objptr, #62
1c708     F2 22 C2 FA | 	rdbyte	local03, objptr
1c70c     11 25 E2 F8 | 	getbyte	local04, local03, #0
1c710     80 24 06 FA | 	mul	local04, #128
1c714     3A E4 85 F1 | 	sub	objptr, #58
1c718     F2 3C 02 FB | 	rdlong	local16, objptr
1c71c     1E 2D 02 F6 | 	mov	local08, local16
1c720     12 2D 02 F1 | 	add	local08, local04
1c724     38 E4 05 F1 | 	add	objptr, #56
1c728     F2 1E E2 FA | 	rdword	local01, objptr
1c72c     0F 39 52 F6 | 	abs	local14, local01 wc
1c730     01 38 46 F0 | 	shr	local14, #1
1c734     1C 2D 82 F3 | 	sumc	local08, local14
1c738     11 23 E2 F8 | 	getbyte	local03, local03, #0
1c73c     80 22 06 FA | 	mul	local03, #128
1c740     3C E4 85 F1 | 	sub	objptr, #60
1c744     11 3D 02 F1 | 	add	local16, local03
1c748     80 3C 06 F1 | 	add	local16, #128
1c74c                 | LR__2212
1c74c     1E 2D 52 F2 | 	cmps	local08, local16 wc
1c750     20 00 90 3D |  if_ae	jmp	#LR__2213
1c754     16 13 02 F6 | 	mov	arg01, local08
1c758     01 12 06 F1 | 	add	arg01, #1
1c75c     30 EE BF FD | 	call	#_pspeek
1c760     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
1c764     16 13 02 F6 | 	mov	arg01, local08
1c768     DC ED BF FD | 	call	#_pspoke
1c76c     01 2C 06 F1 | 	add	local08, #1
1c770     D8 FF 9F FD | 	jmp	#LR__2212
1c774                 | LR__2213
1c774     3E E4 05 F1 | 	add	objptr, #62
1c778     F2 26 C2 FA | 	rdbyte	local05, objptr
1c77c     80 26 06 FA | 	mul	local05, #128
1c780     3A E4 85 F1 | 	sub	objptr, #58
1c784     F2 12 02 FB | 	rdlong	arg01, objptr
1c788     04 E4 85 F1 | 	sub	objptr, #4
1c78c     13 13 02 F1 | 	add	arg01, local05
1c790     7F 12 06 F1 | 	add	arg01, #127
1c794     20 14 06 F6 | 	mov	arg02, #32
1c798     AC ED BF FD | 	call	#_pspoke
1c79c     5A 00 00 FF 
1c7a0     00 E4 05 F1 | 	add	objptr, ##46080
1c7a4     F2 00 68 FC | 	wrlong	#0, objptr
1c7a8     59 00 00 FF 
1c7ac     C2 E5 85 F1 | 	sub	objptr, ##46018
1c7b0     F2 22 C2 FA | 	rdbyte	local03, objptr
1c7b4     11 25 E2 F8 | 	getbyte	local04, local03, #0
1c7b8     80 24 06 FA | 	mul	local04, #128
1c7bc     3A E4 85 F1 | 	sub	objptr, #58
1c7c0     F2 26 02 FB | 	rdlong	local05, objptr
1c7c4     13 2D 02 F6 | 	mov	local08, local05
1c7c8     12 2D 02 F1 | 	add	local08, local04
1c7cc     38 E4 05 F1 | 	add	objptr, #56
1c7d0     F2 2E E2 FA | 	rdword	local09, objptr
1c7d4     17 1F 32 F9 | 	getword	local01, local09, #0
1c7d8     0F 39 52 F6 | 	abs	local14, local01 wc
1c7dc     01 38 46 F0 | 	shr	local14, #1
1c7e0     1C 39 82 F6 | 	negc	local14, local14
1c7e4     1C 2D 02 F1 | 	add	local08, local14
1c7e8     11 23 E2 F8 | 	getbyte	local03, local03, #0
1c7ec     80 22 06 FA | 	mul	local03, #128
1c7f0     13 25 02 F6 | 	mov	local04, local05
1c7f4     3C E4 85 F1 | 	sub	objptr, #60
1c7f8     12 3F 02 F6 | 	mov	local17, local04
1c7fc     11 3F 02 F1 | 	add	local17, local03
1c800     80 3E 06 F1 | 	add	local17, #128
1c804                 | LR__2214
1c804     1F 2D 52 F2 | 	cmps	local08, local17 wc
1c808     94 00 90 3D |  if_ae	jmp	#LR__2215
1c80c     3C E4 05 F1 | 	add	objptr, #60
1c810     F2 20 E2 FA | 	rdword	local02, objptr
1c814     59 00 00 FF 
1c818     C4 E5 05 F1 | 	add	objptr, ##46020
1c81c     F2 24 02 FB | 	rdlong	local04, objptr
1c820     01 24 66 F0 | 	shl	local04, #1
1c824     12 21 02 F1 | 	add	local02, local04
1c828     59 00 00 FF 
1c82c     C2 E5 85 F1 | 	sub	objptr, ##46018
1c830     F2 28 C2 FA | 	rdbyte	local06, objptr
1c834     3E E4 85 F1 | 	sub	objptr, #62
1c838     10 28 06 FA | 	mul	local06, #16
1c83c     04 28 06 F1 | 	add	local06, #4
1c840     16 13 02 F6 | 	mov	arg01, local08
1c844     48 ED BF FD | 	call	#_pspeek
1c848     FD 22 E2 F8 | 	getbyte	local03, result1, #0
1c84c     41 E4 05 F1 | 	add	objptr, #65
1c850     F2 24 02 FB | 	rdlong	local04, objptr
1c854     04 E4 05 F1 | 	add	objptr, #4
1c858     F2 1E 02 FB | 	rdlong	local01, objptr
1c85c     45 E4 85 F1 | 	sub	objptr, #69
1c860     0F 27 02 F6 | 	mov	local05, local01
1c864     10 13 02 F6 | 	mov	arg01, local02
1c868     14 15 02 F6 | 	mov	arg02, local06
1c86c     11 17 02 F6 | 	mov	arg03, local03
1c870     12 19 02 F6 | 	mov	arg04, local04
1c874     13 1B 02 F6 | 	mov	arg05, local05
1c878     64 16 B0 FD | 	call	#_hg010b_spin2_putcharxycgf
1c87c     5A 00 00 FF 
1c880     00 E4 05 F1 | 	add	objptr, ##46080
1c884     F2 20 02 FB | 	rdlong	local02, objptr
1c888     01 20 06 F1 | 	add	local02, #1
1c88c     F2 20 62 FC | 	wrlong	local02, objptr
1c890     5A 00 00 FF 
1c894     00 E4 85 F1 | 	sub	objptr, ##46080
1c898     01 2C 06 F1 | 	add	local08, #1
1c89c     64 FF 9F FD | 	jmp	#LR__2214
1c8a0                 | LR__2215
1c8a0                 | LR__2216
1c8a0                 | '    
1c8a0                 | '   'backspace
1c8a0                 | '   if key4 = 42 then 
1c8a0     59 00 00 FF 
1c8a4     FC E5 05 F1 | 	add	objptr, ##46076
1c8a8     F2 20 02 FB | 	rdlong	local02, objptr
1c8ac     59 00 00 FF 
1c8b0     FC E5 85 F1 | 	sub	objptr, ##46076
1c8b4     2A 20 0E F2 | 	cmp	local02, #42 wz
1c8b8     0C 02 90 5D |  if_ne	jmp	#LR__2222
1c8bc                 | '       if v.cursor_x>editor_spaces*2 then 
1c8bc     3C E4 05 F1 | 	add	objptr, #60
1c8c0     F2 20 E2 FA | 	rdword	local02, objptr
1c8c4     37 00 00 FF 
1c8c8     28 E4 05 F1 | 	add	objptr, ##28200
1c8cc     F2 26 02 FB | 	rdlong	local05, objptr
1c8d0     37 00 00 FF 
1c8d4     64 E4 85 F1 | 	sub	objptr, ##28260
1c8d8     13 25 02 F6 | 	mov	local04, local05
1c8dc     12 23 02 F6 | 	mov	local03, local04
1c8e0     01 22 66 F0 | 	shl	local03, #1
1c8e4     11 21 5A F2 | 	cmps	local02, local03 wcz
1c8e8     B8 01 90 ED |  if_be	jmp	#LR__2220
1c8ec     3C E4 05 F1 | 	add	objptr, #60
1c8f0     F2 12 E2 FA | 	rdword	arg01, objptr
1c8f4     02 12 86 F1 | 	sub	arg01, #2
1c8f8     02 E4 05 F1 | 	add	objptr, #2
1c8fc     F2 14 C2 FA | 	rdbyte	arg02, objptr
1c900     3E E4 85 F1 | 	sub	objptr, #62
1c904     3C 17 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1c908                 | '          position v.cursor_x-2,v.cursor_y
1c908                 | '          for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
1c908     3E E4 05 F1 | 	add	objptr, #62
1c90c     F2 22 C2 FA | 	rdbyte	local03, objptr
1c910     11 25 E2 F8 | 	getbyte	local04, local03, #0
1c914     80 24 06 FA | 	mul	local04, #128
1c918     3A E4 85 F1 | 	sub	objptr, #58
1c91c     F2 40 02 FB | 	rdlong	local18, objptr
1c920     20 2D 02 F6 | 	mov	local08, local18
1c924     12 2D 02 F1 | 	add	local08, local04
1c928     38 E4 05 F1 | 	add	objptr, #56
1c92c     F2 1E E2 FA | 	rdword	local01, objptr
1c930     0F 39 52 F6 | 	abs	local14, local01 wc
1c934     01 38 46 F0 | 	shr	local14, #1
1c938     1C 2D 82 F3 | 	sumc	local08, local14
1c93c     11 23 E2 F8 | 	getbyte	local03, local03, #0
1c940     80 22 06 FA | 	mul	local03, #128
1c944     3C E4 85 F1 | 	sub	objptr, #60
1c948     11 41 02 F1 | 	add	local18, local03
1c94c     80 40 06 F1 | 	add	local18, #128
1c950                 | LR__2217
1c950     20 2D 52 F2 | 	cmps	local08, local18 wc
1c954     20 00 90 3D |  if_ae	jmp	#LR__2218
1c958     16 13 02 F6 | 	mov	arg01, local08
1c95c     01 12 06 F1 | 	add	arg01, #1
1c960     2C EC BF FD | 	call	#_pspeek
1c964     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
1c968     16 13 02 F6 | 	mov	arg01, local08
1c96c     D8 EB BF FD | 	call	#_pspoke
1c970     01 2C 06 F1 | 	add	local08, #1
1c974     D8 FF 9F FD | 	jmp	#LR__2217
1c978                 | LR__2218
1c978     3E E4 05 F1 | 	add	objptr, #62
1c97c     F2 26 C2 FA | 	rdbyte	local05, objptr
1c980     80 26 06 FA | 	mul	local05, #128
1c984     3A E4 85 F1 | 	sub	objptr, #58
1c988     F2 12 02 FB | 	rdlong	arg01, objptr
1c98c     04 E4 85 F1 | 	sub	objptr, #4
1c990     13 13 02 F1 | 	add	arg01, local05
1c994     7F 12 06 F1 | 	add	arg01, #127
1c998     20 14 06 F6 | 	mov	arg02, #32
1c99c     A8 EB BF FD | 	call	#_pspoke
1c9a0     5A 00 00 FF 
1c9a4     00 E4 05 F1 | 	add	objptr, ##46080
1c9a8     F2 00 68 FC | 	wrlong	#0, objptr
1c9ac     59 00 00 FF 
1c9b0     C2 E5 85 F1 | 	sub	objptr, ##46018
1c9b4     F2 22 C2 FA | 	rdbyte	local03, objptr
1c9b8     11 25 E2 F8 | 	getbyte	local04, local03, #0
1c9bc     80 24 06 FA | 	mul	local04, #128
1c9c0     3A E4 85 F1 | 	sub	objptr, #58
1c9c4     F2 26 02 FB | 	rdlong	local05, objptr
1c9c8     13 2D 02 F6 | 	mov	local08, local05
1c9cc     12 2D 02 F1 | 	add	local08, local04
1c9d0     38 E4 05 F1 | 	add	objptr, #56
1c9d4     F2 2E E2 FA | 	rdword	local09, objptr
1c9d8     17 1F 32 F9 | 	getword	local01, local09, #0
1c9dc     0F 39 52 F6 | 	abs	local14, local01 wc
1c9e0     01 38 46 F0 | 	shr	local14, #1
1c9e4     1C 39 82 F6 | 	negc	local14, local14
1c9e8     1C 2D 02 F1 | 	add	local08, local14
1c9ec     11 23 E2 F8 | 	getbyte	local03, local03, #0
1c9f0     80 22 06 FA | 	mul	local03, #128
1c9f4     13 25 02 F6 | 	mov	local04, local05
1c9f8     3C E4 85 F1 | 	sub	objptr, #60
1c9fc     12 43 02 F6 | 	mov	local19, local04
1ca00     11 43 02 F1 | 	add	local19, local03
1ca04     80 42 06 F1 | 	add	local19, #128
1ca08                 | LR__2219
1ca08     21 2D 52 F2 | 	cmps	local08, local19 wc
1ca0c     B8 00 90 3D |  if_ae	jmp	#LR__2221
1ca10     3C E4 05 F1 | 	add	objptr, #60
1ca14     F2 20 E2 FA | 	rdword	local02, objptr
1ca18     59 00 00 FF 
1ca1c     C4 E5 05 F1 | 	add	objptr, ##46020
1ca20     F2 24 02 FB | 	rdlong	local04, objptr
1ca24     01 24 66 F0 | 	shl	local04, #1
1ca28     12 21 02 F1 | 	add	local02, local04
1ca2c     59 00 00 FF 
1ca30     C2 E5 85 F1 | 	sub	objptr, ##46018
1ca34     F2 28 C2 FA | 	rdbyte	local06, objptr
1ca38     3E E4 85 F1 | 	sub	objptr, #62
1ca3c     10 28 06 FA | 	mul	local06, #16
1ca40     04 28 06 F1 | 	add	local06, #4
1ca44     16 13 02 F6 | 	mov	arg01, local08
1ca48     44 EB BF FD | 	call	#_pspeek
1ca4c     FD 22 E2 F8 | 	getbyte	local03, result1, #0
1ca50     41 E4 05 F1 | 	add	objptr, #65
1ca54     F2 24 02 FB | 	rdlong	local04, objptr
1ca58     04 E4 05 F1 | 	add	objptr, #4
1ca5c     F2 1E 02 FB | 	rdlong	local01, objptr
1ca60     45 E4 85 F1 | 	sub	objptr, #69
1ca64     0F 27 02 F6 | 	mov	local05, local01
1ca68     10 13 02 F6 | 	mov	arg01, local02
1ca6c     14 15 02 F6 | 	mov	arg02, local06
1ca70     11 17 02 F6 | 	mov	arg03, local03
1ca74     12 19 02 F6 | 	mov	arg04, local04
1ca78     13 1B 02 F6 | 	mov	arg05, local05
1ca7c     60 14 B0 FD | 	call	#_hg010b_spin2_putcharxycgf
1ca80     5A 00 00 FF 
1ca84     00 E4 05 F1 | 	add	objptr, ##46080
1ca88     F2 20 02 FB | 	rdlong	local02, objptr
1ca8c     01 20 06 F1 | 	add	local02, #1
1ca90     F2 20 62 FC | 	wrlong	local02, objptr
1ca94     5A 00 00 FF 
1ca98     00 E4 85 F1 | 	sub	objptr, ##46080
1ca9c     01 2C 06 F1 | 	add	local08, #1
1caa0     64 FF 9F FD | 	jmp	#LR__2219
1caa4                 | LR__2220
1caa4     7D 01 00 FF 
1caa8     AD 21 06 F6 | 	mov	local02, ##@LR__5340
1caac     37 00 00 FF 
1cab0     4C E4 05 F1 | 	add	objptr, ##28236
1cab4     F2 20 62 FC | 	wrlong	local02, objptr
1cab8     37 00 00 FF 
1cabc     10 E4 85 F1 | 	sub	objptr, ##28176
1cac0     F2 08 58 FC | 	wrword	#4, objptr
1cac4     3C E4 85 F1 | 	sub	objptr, #60
1cac8                 | LR__2221
1cac8                 | LR__2222
1cac8                 | '      if key4= 82 then 
1cac8     59 00 00 FF 
1cacc     FC E5 05 F1 | 	add	objptr, ##46076
1cad0     F2 20 02 FB | 	rdlong	local02, objptr
1cad4     59 00 00 FF 
1cad8     FC E5 85 F1 | 	sub	objptr, ##46076
1cadc     52 20 0E F2 | 	cmp	local02, #82 wz
1cae0     50 00 90 5D |  if_ne	jmp	#LR__2223
1cae4                 | ' return cursor_y
1cae4     3E E4 05 F1 | 	add	objptr, #62
1cae8     F2 20 C2 FA | 	rdbyte	local02, objptr
1caec     01 20 86 F1 | 	sub	local02, #1
1caf0     59 00 00 FF 
1caf4     CA E5 05 F1 | 	add	objptr, ##46026
1caf8     F2 20 62 FC | 	wrlong	local02, objptr
1cafc     5A 00 00 FF 
1cb00     08 E4 85 F1 | 	sub	objptr, ##46088
1cb04     00 20 56 F2 | 	cmps	local02, #0 wc
1cb08     5A 00 00 CF 
1cb0c     08 E4 05 C1 |  if_b	add	objptr, ##46088
1cb10     F2 00 68 CC |  if_b	wrlong	#0, objptr
1cb14     5A 00 00 CF 
1cb18     08 E4 85 C1 |  if_b	sub	objptr, ##46088
1cb1c     5A 00 00 FF 
1cb20     08 E4 05 F1 | 	add	objptr, ##46088
1cb24     F2 12 02 FB | 	rdlong	arg01, objptr
1cb28     5A 00 00 FF 
1cb2c     08 E4 85 F1 | 	sub	objptr, ##46088
1cb30     7C 15 B0 FD | 	call	#_hg010b_spin2_setcursory
1cb34                 | LR__2223
1cb34                 | '    if key4= 81 then
1cb34     59 00 00 FF 
1cb38     FC E5 05 F1 | 	add	objptr, ##46076
1cb3c     F2 20 02 FB | 	rdlong	local02, objptr
1cb40     59 00 00 FF 
1cb44     FC E5 85 F1 | 	sub	objptr, ##46076
1cb48     51 20 0E F2 | 	cmp	local02, #81 wz
1cb4c     50 00 90 5D |  if_ne	jmp	#LR__2224
1cb50                 | ' return cursor_y
1cb50     3E E4 05 F1 | 	add	objptr, #62
1cb54     F2 20 C2 FA | 	rdbyte	local02, objptr
1cb58     01 20 06 F1 | 	add	local02, #1
1cb5c     59 00 00 FF 
1cb60     CA E5 05 F1 | 	add	objptr, ##46026
1cb64     F2 20 62 FC | 	wrlong	local02, objptr
1cb68     5A 00 00 FF 
1cb6c     08 E4 85 F1 | 	sub	objptr, ##46088
1cb70     25 20 56 F2 | 	cmps	local02, #37 wc
1cb74     5A 00 00 3F 
1cb78     08 E4 05 31 |  if_ae	add	objptr, ##46088
1cb7c     F2 48 68 3C |  if_ae	wrlong	#36, objptr
1cb80     5A 00 00 3F 
1cb84     08 E4 85 31 |  if_ae	sub	objptr, ##46088
1cb88     5A 00 00 FF 
1cb8c     08 E4 05 F1 | 	add	objptr, ##46088
1cb90     F2 12 02 FB | 	rdlong	arg01, objptr
1cb94     5A 00 00 FF 
1cb98     08 E4 85 F1 | 	sub	objptr, ##46088
1cb9c     10 15 B0 FD | 	call	#_hg010b_spin2_setcursory
1cba0                 | LR__2224
1cba0                 | '    if key4= 80 then
1cba0     59 00 00 FF 
1cba4     FC E5 05 F1 | 	add	objptr, ##46076
1cba8     F2 20 02 FB | 	rdlong	local02, objptr
1cbac     59 00 00 FF 
1cbb0     FC E5 85 F1 | 	sub	objptr, ##46076
1cbb4     50 20 0E F2 | 	cmp	local02, #80 wz
1cbb8     6C 00 90 5D |  if_ne	jmp	#LR__2225
1cbbc                 | ' return cursor_x
1cbbc     3C E4 05 F1 | 	add	objptr, #60
1cbc0     F2 20 E2 FA | 	rdword	local02, objptr
1cbc4     02 20 86 F1 | 	sub	local02, #2
1cbc8     59 00 00 FF 
1cbcc     D0 E5 05 F1 | 	add	objptr, ##46032
1cbd0     F2 20 62 FC | 	wrlong	local02, objptr
1cbd4                 | '      if cx<editor_spaces then cx=editor_spaces
1cbd4     22 00 00 FF 
1cbd8     A8 E5 85 F1 | 	sub	objptr, ##17832
1cbdc     F2 24 02 FB | 	rdlong	local04, objptr
1cbe0     37 00 00 FF 
1cbe4     64 E4 85 F1 | 	sub	objptr, ##28260
1cbe8     12 23 02 F6 | 	mov	local03, local04
1cbec     11 21 52 F2 | 	cmps	local02, local03 wc
1cbf0     37 00 00 CF 
1cbf4     64 E4 05 C1 |  if_b	add	objptr, ##28260
1cbf8     F2 20 02 CB |  if_b	rdlong	local02, objptr
1cbfc     22 00 00 CF 
1cc00     A8 E5 05 C1 |  if_b	add	objptr, ##17832
1cc04     F2 20 62 CC |  if_b	wrlong	local02, objptr
1cc08     5A 00 00 CF 
1cc0c     0C E4 85 C1 |  if_b	sub	objptr, ##46092
1cc10     5A 00 00 FF 
1cc14     0C E4 05 F1 | 	add	objptr, ##46092
1cc18     F2 12 02 FB | 	rdlong	arg01, objptr
1cc1c     5A 00 00 FF 
1cc20     0C E4 85 F1 | 	sub	objptr, ##46092
1cc24     58 14 B0 FD | 	call	#_hg010b_spin2_setcursorx
1cc28                 | LR__2225
1cc28                 | '    if key4= 79 then
1cc28     59 00 00 FF 
1cc2c     FC E5 05 F1 | 	add	objptr, ##46076
1cc30     F2 20 02 FB | 	rdlong	local02, objptr
1cc34     59 00 00 FF 
1cc38     FC E5 85 F1 | 	sub	objptr, ##46076
1cc3c     4F 20 0E F2 | 	cmp	local02, #79 wz
1cc40     50 00 90 5D |  if_ne	jmp	#LR__2226
1cc44                 | ' return cursor_x
1cc44     3C E4 05 F1 | 	add	objptr, #60
1cc48     F2 20 E2 FA | 	rdword	local02, objptr
1cc4c     02 20 06 F1 | 	add	local02, #2
1cc50     59 00 00 FF 
1cc54     D0 E5 05 F1 | 	add	objptr, ##46032
1cc58     F2 20 62 FC | 	wrlong	local02, objptr
1cc5c                 | '      if cx>254  then cx=254 
1cc5c     5A 00 00 FF 
1cc60     0C E4 85 F1 | 	sub	objptr, ##46092
1cc64     FF 20 56 F2 | 	cmps	local02, #255 wc
1cc68     5A 00 00 3F 
1cc6c     0C E4 05 31 |  if_ae	add	objptr, ##46092
1cc70     F2 FC 69 3C |  if_ae	wrlong	#254, objptr
1cc74     5A 00 00 3F 
1cc78     0C E4 85 31 |  if_ae	sub	objptr, ##46092
1cc7c     5A 00 00 FF 
1cc80     0C E4 05 F1 | 	add	objptr, ##46092
1cc84     F2 12 02 FB | 	rdlong	arg01, objptr
1cc88     5A 00 00 FF 
1cc8c     0C E4 85 F1 | 	sub	objptr, ##46092
1cc90     EC 13 B0 FD | 	call	#_hg010b_spin2_setcursorx
1cc94                 | LR__2226
1cc94                 | '   ' print key3 and 255
1cc94                 | '    
1cc94                 | '    if key4=73 then ' ins
1cc94     59 00 00 FF 
1cc98     FC E5 05 F1 | 	add	objptr, ##46076
1cc9c     F2 28 02 FB | 	rdlong	local06, objptr
1cca0     59 00 00 FF 
1cca4     FC E5 85 F1 | 	sub	objptr, ##46076
1cca8     49 28 0E F2 | 	cmp	local06, #73 wz
1ccac     38 00 90 5D |  if_ne	jmp	#LR__2229
1ccb0     59 00 00 FF 
1ccb4     E8 E5 05 F1 | 	add	objptr, ##46056
1ccb8     F2 20 02 FB | 	rdlong	local02, objptr
1ccbc     10 29 22 F6 | 	not	local06, local02
1ccc0     F2 28 62 FC | 	wrlong	local06, objptr
1ccc4                 | '      if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
1ccc4     59 00 00 FF 
1ccc8     E8 E5 85 F1 | 	sub	objptr, ##46056
1cccc     00 28 0E F2 | 	cmp	local06, #0 wz
1ccd0     0C 00 90 AD |  if_e	jmp	#LR__2227
1ccd4     0E 12 06 F6 | 	mov	arg01, #14
1ccd8     28 02 B0 FD | 	call	#_hg010b_spin2_setcursorshape
1ccdc     08 00 90 FD | 	jmp	#LR__2228
1cce0                 | LR__2227
1cce0     00 12 06 F6 | 	mov	arg01, #0
1cce4     1C 02 B0 FD | 	call	#_hg010b_spin2_setcursorshape
1cce8                 | LR__2228
1cce8                 | LR__2229
1cce8     59 00 00 FF 
1ccec     F4 E5 05 F1 | 	add	objptr, ##46068
1ccf0     F2 00 68 FC | 	wrlong	#0, objptr
1ccf4     59 00 00 FF 
1ccf8     F4 E5 85 F1 | 	sub	objptr, ##46068
1ccfc     84 EE 9F FD | 	jmp	#LR__2180
1cd00     A7 F0 03 F6 | 	mov	ptra, fp
1cd04     B2 00 A0 FD | 	call	#popregs_
1cd08                 | _program_ret
1cd08     2D 00 64 FD | 	ret
1cd0c                 | 
1cd0c                 | ' '' this is not a main program.
1cd0c                 | ' 
1cd0c                 | ' '****************************************************************************************************************
1cd0c                 | ' '                                                                                                             	*
1cd0c                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
1cd0c                 | ' '                                                                                                            	*
1cd0c                 | ' ' base - HDMI base pin												*
1cd0c                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
1cd0c                 | ' '														*
1cd0c                 | ' '														*
1cd0c                 | ' '****************************************************************************************************************
1cd0c                 | ' 
1cd0c                 | ' pub start(base,mb):result |i
1cd0c                 | _hg010b_spin2_start
1cd0c                 | ' 
1cd0c                 | ' '--------------------------- initialize pointers and variables
1cd0c                 | ' 
1cd0c                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
1cd0c     34 E4 05 F1 | 	add	objptr, #52
1cd10     F2 FA 01 F6 | 	mov	result1, objptr
1cd14     28 E4 85 F1 | 	sub	objptr, #40
1cd18     F2 FA 61 FC | 	wrlong	result1, objptr
1cd1c                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
1cd1c                 | ' hdmibase:=base							' HDMI base pin, 8*n
1cd1c     18 E4 05 F1 | 	add	objptr, #24
1cd20     F2 12 62 FC | 	wrlong	arg01, objptr
1cd24                 | ' mailbox_ptr:=mb		
1cd24     04 E4 05 F1 | 	add	objptr, #4
1cd28     F2 14 62 FC | 	wrlong	arg02, objptr
1cd2c                 | ' mailbox0:=mb				' PSRAM mailbox pointer
1cd2c     C1 E5 05 F1 | 	add	objptr, #449
1cd30     F2 14 62 FC | 	wrlong	arg02, objptr
1cd34                 | ' sprite_ptr:=@spr1ptr
1cd34     D8 E4 85 F1 | 	sub	objptr, #216
1cd38     F2 FA 01 F6 | 	mov	result1, objptr
1cd3c     E5 E4 85 F1 | 	sub	objptr, #229
1cd40     F2 FA 61 FC | 	wrlong	result1, objptr
1cd44                 | ' 
1cd44                 | ' 		'
1cd44                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
1cd44     E5 E4 05 F1 | 	add	objptr, #229
1cd48     F2 FA 01 FB | 	rdlong	result1, objptr
1cd4c     D0 FA 05 F1 | 	add	result1, #208
1cd50     FD 10 58 FC | 	wrword	#8, result1
1cd54                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
1cd54     F2 16 02 FB | 	rdlong	arg03, objptr
1cd58     D2 16 06 F1 | 	add	arg03, #210
1cd5c     0B 21 58 FC | 	wrword	#16, arg03
1cd60                 | ' leading_spaces:=0				'
1cd60     A5 E5 05 F1 | 	add	objptr, #421
1cd64     F2 00 68 FC | 	wrlong	#0, objptr
1cd68                 | ' 
1cd68                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
1cd68     99 E4 85 F1 | 	sub	objptr, #153
1cd6c     00 00 A0 FF 
1cd70     F2 0E 68 FC | 	wrlong	##1073741831, objptr
1cd74                 | ' emptydl[1]:=0
1cd74     04 E4 05 F1 | 	add	objptr, #4
1cd78     F2 00 68 FC | 	wrlong	#0, objptr
1cd7c                 | ' 
1cd7c                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
1cd7c                 | ' 
1cd7c                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
1cd7c     28 E5 85 F1 | 	sub	objptr, #296
1cd80     F2 02 68 FC | 	wrlong	#1, objptr
1cd84                 | ' if s_debug<>0
1cd84                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
1cd84     20 00 80 FF 
1cd88     F2 00 68 FC | 	wrlong	##16384, objptr
1cd8c     F9 E4 85 F1 | 	sub	objptr, #249
1cd90                 | ' setmode()							' set the mode, see below
1cd90     EC 02 B0 FD | 	call	#_hg010b_spin2_setmode
1cd94                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
1cd94     49 E4 05 F1 | 	add	objptr, #73
1cd98     F2 FA 01 F6 | 	mov	result1, objptr
1cd9c     35 E4 85 F1 | 	sub	objptr, #53
1cda0     F2 FA 61 FC | 	wrlong	result1, objptr
1cda4                 | ' cursor_ptr:=@cursor_x						
1cda4     28 E4 05 F1 | 	add	objptr, #40
1cda8     F2 16 02 F6 | 	mov	arg03, objptr
1cdac     2C E4 85 F1 | 	sub	objptr, #44
1cdb0     F2 16 62 FC | 	wrlong	arg03, objptr
1cdb4                 | ' fontnum:=0  							' start with a PC type font 
1cdb4     55 E4 05 F1 | 	add	objptr, #85
1cdb8     F2 00 68 FC | 	wrlong	#0, objptr
1cdbc                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
1cdbc     1C E4 05 F1 | 	add	objptr, #28
1cdc0     F2 12 02 F6 | 	mov	arg01, objptr
1cdc4     81 E4 85 F1 | 	sub	objptr, #129
1cdc8     10 00 00 FF 
1cdcc     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
1cdd0     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1cdd4     10 00 00 FF 
1cdd8     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
1cddc     10 16 06 F6 | 	mov	arg03, #16
1cde0     38 29 B0 FD | 	call	#__system____builtin_memmove
1cde4                 | ' leading_spaces:=0
1cde4     01 00 00 FF 
1cde8     B6 E4 05 F1 | 	add	objptr, ##694
1cdec     F2 00 68 FC | 	wrlong	#0, objptr
1cdf0     01 00 00 FF 
1cdf4     B6 E4 85 F1 | 	sub	objptr, ##694
1cdf8                 | ' '---------------------------- initialize a cursor (MSDOS type)
1cdf8                 | ' 
1cdf8                 | ' initcursor(154)
1cdf8     9A 12 06 F6 | 	mov	arg01, #154
1cdfc     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
1ce00                 | ' 
1ce00                 | ' '---------------------------- start the cog
1ce00                 | ' 
1ce00                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
1ce00     10 00 00 FF 
1ce04     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
1ce08     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1ce0c     10 00 00 FF 
1ce10     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
1ce14     14 E4 05 F1 | 	add	objptr, #20
1ce18     10 FA 05 F6 | 	mov	result1, #16
1ce1c     28 E4 61 FD | 	setq	objptr
1ce20     0A FB F1 FC | 	coginit	result1, arg02 wc
1ce24     01 FA 65 C6 |  if_b	neg	result1, #1
1ce28     1C E4 05 F1 | 	add	objptr, #28
1ce2c     F2 FA 61 FC | 	wrlong	result1, objptr
1ce30     30 E4 85 F1 | 	sub	objptr, #48
1ce34                 | ' waitms(40)							' wait for stabilize
1ce34     28 12 06 F6 | 	mov	arg01, #40
1ce38     B4 2C B0 FD | 	call	#__system___waitms
1ce3c                 | ' return cog							' return the driver's cog #
1ce3c     30 E4 05 F1 | 	add	objptr, #48
1ce40     F2 FA 01 FB | 	rdlong	result1, objptr
1ce44     30 E4 85 F1 | 	sub	objptr, #48
1ce48                 | _hg010b_spin2_start_ret
1ce48     2D 00 64 FD | 	ret
1ce4c                 | 
1ce4c                 | ' 
1ce4c                 | ' 
1ce4c                 | ' '**************************************************************************************************************** 
1ce4c                 | ' '                                                                                                             	*
1ce4c                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
1ce4c                 | ' '  Mode number - see start() above or bits below								*
1ce4c                 | ' '                                                                                                             	*
1ce4c                 | ' '****************************************************************************************************************
1ce4c                 | ' 
1ce4c                 | ' '---------------------------- initialize a cursor (MSDOS type)
1ce4c                 | ' pub initcursor(color) |i
1ce4c                 | _hg010b_spin2_initcursor
1ce4c     03 4A 05 F6 | 	mov	COUNT_, #3
1ce50     A8 00 A0 FD | 	call	#pushregs_
1ce54     09 1F 02 F6 | 	mov	local01, arg01
1ce58                 | ' 
1ce58                 | ' cursor_x:=0							' place the cursor at 0:0
1ce58     3C E4 05 F1 | 	add	objptr, #60
1ce5c     F2 00 58 FC | 	wrword	#0, objptr
1ce60                 | ' cursor_y:=0
1ce60     02 E4 05 F1 | 	add	objptr, #2
1ce64     F2 00 48 FC | 	wrbyte	#0, objptr
1ce68                 | ' repeat i from 0 to 111
1ce68     00 20 06 F6 | 	mov	local02, #0
1ce6c     F8 E5 05 F1 | 	add	objptr, #504
1ce70     97 1A 48 FB | 	callpa	#(@LR__2232-@LR__2230)>>2,fcache_load_ptr_
1ce74                 | LR__2230
1ce74                 | '   cursor[i]:=0
1ce74     10 23 02 F6 | 	mov	local03, local02
1ce78     F2 22 02 F1 | 	add	local03, objptr
1ce7c     11 01 48 FC | 	wrbyte	#0, local03
1ce80     01 20 06 F1 | 	add	local02, #1
1ce84     70 20 56 F2 | 	cmps	local02, #112 wc
1ce88     E8 FF 9F CD |  if_b	jmp	#LR__2230
1ce8c                 | ' repeat i from 112 to 127
1ce8c     70 20 06 F6 | 	mov	local02, #112
1ce90                 | LR__2231
1ce90                 | '   cursor[i]:=color  
1ce90     10 23 02 F6 | 	mov	local03, local02
1ce94     F2 22 02 F1 | 	add	local03, objptr
1ce98     11 1F 42 FC | 	wrbyte	local01, local03
1ce9c     01 20 06 F1 | 	add	local02, #1
1cea0     80 20 16 F2 | 	cmp	local02, #128 wc
1cea4     E8 FF 9F CD |  if_b	jmp	#LR__2231
1cea8                 | LR__2232
1cea8                 | ' 'repeat i from 0 to 127
1cea8                 | ' '  if ((i/8)//2)
1cea8                 | ' '    cursor[i]:=15
1cea8                 | ' '  else
1cea8                 | ' '    cursor[i]:=0
1cea8                 | ' '  if i>=120    
1cea8                 | ' '    cursor[i]:=40
1cea8                 | ' setspriteptr(17,@cursor)
1cea8     F2 14 02 F6 | 	mov	arg02, objptr
1ceac     01 00 00 FF 
1ceb0     36 E4 85 F1 | 	sub	objptr, ##566
1ceb4     11 12 06 F6 | 	mov	arg01, #17
1ceb8     E8 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
1cebc                 | ' setspritesize(17,8,16)
1cebc     11 12 06 F6 | 	mov	arg01, #17
1cec0     08 14 06 F6 | 	mov	arg02, #8
1cec4     10 16 06 F6 | 	mov	arg03, #16
1cec8     68 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
1cecc                 | ' setspritepos(17,0,0)
1cecc     11 12 06 F6 | 	mov	arg01, #17
1ced0     00 14 06 F6 | 	mov	arg02, #0
1ced4     00 16 06 F6 | 	mov	arg03, #0
1ced8     F0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
1cedc                 | ' cursorshape:=14
1cedc     0B 00 00 FF 
1cee0     C6 E4 05 F1 | 	add	objptr, ##5830
1cee4     F2 1C 68 FC | 	wrlong	#14, objptr
1cee8                 | ' cursorcolor:=color
1cee8     04 E4 85 F1 | 	sub	objptr, #4
1ceec     F2 1E 62 FC | 	wrlong	local01, objptr
1cef0     0B 00 00 FF 
1cef4     C2 E4 85 F1 | 	sub	objptr, ##5826
1cef8     A7 F0 03 F6 | 	mov	ptra, fp
1cefc     B2 00 A0 FD | 	call	#popregs_
1cf00                 | _hg010b_spin2_initcursor_ret
1cf00     2D 00 64 FD | 	ret
1cf04                 | 
1cf04                 | ' 
1cf04                 | ' pub setcursorshape(shape) | i
1cf04                 | _hg010b_spin2_setcursorshape
1cf04                 | ' 
1cf04                 | ' cursorshape:=shape
1cf04     0B 00 00 FF 
1cf08     C6 E4 05 F1 | 	add	objptr, ##5830
1cf0c     F2 12 62 FC | 	wrlong	arg01, objptr
1cf10                 | ' repeat i from 0 to (8*cursorshape)-1
1cf10     00 00 06 F6 | 	mov	_var01, #0
1cf14     09 03 02 F6 | 	mov	_var02, arg01
1cf18     03 02 66 F0 | 	shl	_var02, #3
1cf1c     01 02 86 F1 | 	sub	_var02, #1
1cf20     00 02 56 F2 | 	cmps	_var02, #0 wc
1cf24     01 04 86 F6 | 	negc	_var03, #1
1cf28     02 07 02 F6 | 	mov	_var04, _var03
1cf2c     02 03 02 F1 | 	add	_var02, _var03
1cf30     0A 00 00 FF 
1cf34     90 E4 85 F1 | 	sub	objptr, ##5264
1cf38     97 0C 48 FB | 	callpa	#(@LR__2241-@LR__2240)>>2,fcache_load_ptr_
1cf3c                 | LR__2240
1cf3c                 | '   cursor[i]:=0
1cf3c     00 05 02 F6 | 	mov	_var03, _var01
1cf40     F2 04 02 F1 | 	add	_var03, objptr
1cf44     02 01 48 FC | 	wrbyte	#0, _var03
1cf48     03 01 02 F1 | 	add	_var01, _var04
1cf4c     01 01 0A F2 | 	cmp	_var01, _var02 wz
1cf50     E8 FF 9F 5D |  if_ne	jmp	#LR__2240
1cf54                 | LR__2241
1cf54                 | ' repeat i from 8*cursorshape to 127
1cf54     0A 00 00 FF 
1cf58     90 E4 05 F1 | 	add	objptr, ##5264
1cf5c     F2 06 02 FB | 	rdlong	_var04, objptr
1cf60     03 01 02 F6 | 	mov	_var01, _var04
1cf64     03 00 66 F0 | 	shl	_var01, #3
1cf68     0B 00 00 FF 
1cf6c     C6 E4 85 F1 | 	sub	objptr, ##5830
1cf70     03 06 66 F0 | 	shl	_var04, #3
1cf74     80 06 56 F2 | 	cmps	_var04, #128 wc
1cf78     01 04 A6 F6 | 	negnc	_var03, #1
1cf7c     7F 02 06 F6 | 	mov	_var02, #127
1cf80     02 03 02 F1 | 	add	_var02, _var03
1cf84     97 1A 48 FB | 	callpa	#(@LR__2243-@LR__2242)>>2,fcache_load_ptr_
1cf88                 | LR__2242
1cf88                 | '   cursor[i]:=cursorcolor
1cf88     00 07 02 F6 | 	mov	_var04, _var01
1cf8c     01 00 00 FF 
1cf90     36 E4 05 F1 | 	add	objptr, ##566
1cf94     F2 06 02 F1 | 	add	_var04, objptr
1cf98     0A 00 00 FF 
1cf9c     8C E4 05 F1 | 	add	objptr, ##5260
1cfa0     F2 12 02 FB | 	rdlong	arg01, objptr
1cfa4     0B 00 00 FF 
1cfa8     C2 E4 85 F1 | 	sub	objptr, ##5826
1cfac     03 13 42 FC | 	wrbyte	arg01, _var04
1cfb0     02 01 02 F1 | 	add	_var01, _var03
1cfb4     01 01 0A F2 | 	cmp	_var01, _var02 wz
1cfb8     CC FF 9F 5D |  if_ne	jmp	#LR__2242
1cfbc                 | LR__2243
1cfbc                 | _hg010b_spin2_setcursorshape_ret
1cfbc     2D 00 64 FD | 	ret
1cfc0                 | 
1cfc0                 | ' 
1cfc0                 | ' pub setcursorcolor(color) | i
1cfc0                 | _hg010b_spin2_setcursorcolor
1cfc0                 | ' 
1cfc0                 | ' cursorcolor:=color
1cfc0     0B 00 00 FF 
1cfc4     C2 E4 05 F1 | 	add	objptr, ##5826
1cfc8     F2 12 62 FC | 	wrlong	arg01, objptr
1cfcc                 | ' repeat i from 0 to (8*cursorshape)-1
1cfcc     00 12 06 F6 | 	mov	arg01, #0
1cfd0     04 E4 05 F1 | 	add	objptr, #4
1cfd4     F2 00 02 FB | 	rdlong	_var01, objptr
1cfd8     03 00 66 F0 | 	shl	_var01, #3
1cfdc     01 00 86 F1 | 	sub	_var01, #1
1cfe0     00 00 56 F2 | 	cmps	_var01, #0 wc
1cfe4     01 02 86 F6 | 	negc	_var02, #1
1cfe8     01 05 02 F6 | 	mov	_var03, _var02
1cfec     01 01 02 F1 | 	add	_var01, _var02
1cff0     0A 00 00 FF 
1cff4     90 E4 85 F1 | 	sub	objptr, ##5264
1cff8     97 0C 48 FB | 	callpa	#(@LR__2251-@LR__2250)>>2,fcache_load_ptr_
1cffc                 | LR__2250
1cffc                 | '   cursor[i]:=0
1cffc     09 03 02 F6 | 	mov	_var02, arg01
1d000     F2 02 02 F1 | 	add	_var02, objptr
1d004     01 01 48 FC | 	wrbyte	#0, _var02
1d008     02 13 02 F1 | 	add	arg01, _var03
1d00c     00 13 0A F2 | 	cmp	arg01, _var01 wz
1d010     E8 FF 9F 5D |  if_ne	jmp	#LR__2250
1d014                 | LR__2251
1d014                 | ' repeat i from 8*cursorshape to 127
1d014     0A 00 00 FF 
1d018     90 E4 05 F1 | 	add	objptr, ##5264
1d01c     F2 04 02 FB | 	rdlong	_var03, objptr
1d020     02 13 02 F6 | 	mov	arg01, _var03
1d024     03 12 66 F0 | 	shl	arg01, #3
1d028     0B 00 00 FF 
1d02c     C6 E4 85 F1 | 	sub	objptr, ##5830
1d030     03 04 66 F0 | 	shl	_var03, #3
1d034     80 04 56 F2 | 	cmps	_var03, #128 wc
1d038     01 02 A6 F6 | 	negnc	_var02, #1
1d03c     7F 00 06 F6 | 	mov	_var01, #127
1d040     01 01 02 F1 | 	add	_var01, _var02
1d044     97 1A 48 FB | 	callpa	#(@LR__2253-@LR__2252)>>2,fcache_load_ptr_
1d048                 | LR__2252
1d048                 | '   cursor[i]:=cursorcolor
1d048     09 05 02 F6 | 	mov	_var03, arg01
1d04c     01 00 00 FF 
1d050     36 E4 05 F1 | 	add	objptr, ##566
1d054     F2 04 02 F1 | 	add	_var03, objptr
1d058     0A 00 00 FF 
1d05c     8C E4 05 F1 | 	add	objptr, ##5260
1d060     F2 06 02 FB | 	rdlong	_var04, objptr
1d064     0B 00 00 FF 
1d068     C2 E4 85 F1 | 	sub	objptr, ##5826
1d06c     02 07 42 FC | 	wrbyte	_var04, _var03
1d070     01 13 02 F1 | 	add	arg01, _var02
1d074     00 13 0A F2 | 	cmp	arg01, _var01 wz
1d078     CC FF 9F 5D |  if_ne	jmp	#LR__2252
1d07c                 | LR__2253
1d07c                 | _hg010b_spin2_setcursorcolor_ret
1d07c     2D 00 64 FD | 	ret
1d080                 | 
1d080                 | '   
1d080                 | '   
1d080                 | '   
1d080                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
1d080                 | _hg010b_spin2_setmode
1d080     02 4A 05 F6 | 	mov	COUNT_, #2
1d084     A8 00 A0 FD | 	call	#pushregs_
1d088                 | ' 
1d088                 | ' 
1d088                 | ' dl_ptr:=@emptydl[0]
1d088     01 00 00 FF 
1d08c     1D E4 05 F1 | 	add	objptr, ##541
1d090     F2 1A 02 F6 | 	mov	arg05, objptr
1d094     FD E5 85 F1 | 	sub	objptr, #509
1d098     F2 1A 62 FC | 	wrlong	arg05, objptr
1d09c                 | ' 
1d09c                 | ' if cog>0 
1d09c     10 E4 05 F1 | 	add	objptr, #16
1d0a0     F2 1A 02 FB | 	rdlong	arg05, objptr
1d0a4     30 E4 85 F1 | 	sub	objptr, #48
1d0a8     01 1A 56 F2 | 	cmps	arg05, #1 wc
1d0ac                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
1d0ac     01 12 06 36 |  if_ae	mov	arg01, #1
1d0b0     30 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
1d0b4                 | ' xres:=1024
1d0b4     01 00 00 FF 
1d0b8     26 E4 05 F1 | 	add	objptr, ##550
1d0bc     02 00 80 FF 
1d0c0     F2 00 68 FC | 	wrlong	##1024, objptr
1d0c4                 | ' yres:=600
1d0c4     04 E4 05 F1 | 	add	objptr, #4
1d0c8     01 00 80 FF 
1d0cc     F2 B0 68 FC | 	wrlong	##600, objptr
1d0d0                 | ' ppl:=(timings[3])
1d0d0     10 00 00 FF 
1d0d4     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
1d0d8     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1d0dc     51 E5 85 F1 | 	sub	objptr, #337
1d0e0     F2 1A 62 FC | 	wrlong	arg05, objptr
1d0e4                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
1d0e4     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
1d0e8     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1d0ec     01 1E 66 F0 | 	shl	local01, #1
1d0f0     80 E4 85 F1 | 	sub	objptr, #128
1d0f4     F2 1E 62 FC | 	wrlong	local01, objptr
1d0f8                 | ' cpl1:=cpl '' todo remove
1d0f8     04 E4 05 F1 | 	add	objptr, #4
1d0fc     F2 1E 62 FC | 	wrlong	local01, objptr
1d100                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
1d100     02 00 00 FF 
1d104     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
1d108     41 E4 85 F1 | 	sub	objptr, #65
1d10c     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1d110                 | ' repeat i from 0 to 3
1d110     00 20 06 F6 | 	mov	local02, #0
1d114     02 00 00 FF 
1d118     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
1d11c     08 E4 05 F1 | 	add	objptr, #8
1d120     97 20 48 FB | 	callpa	#(@LR__2261-@LR__2260)>>2,fcache_load_ptr_
1d124                 | LR__2260
1d124                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
1d124     10 1F 02 F6 | 	mov	local01, local02
1d128     02 1E 66 F0 | 	shl	local01, #2
1d12c     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
1d130     F2 1A 02 FB | 	rdlong	arg05, objptr
1d134     11 1A 66 F0 | 	shl	arg05, #17
1d138     0F 1F 02 FB | 	rdlong	local01, local01
1d13c     0D 1F 02 F1 | 	add	local01, arg05
1d140     80 40 38 FF 
1d144     00 1E 06 F1 | 	add	local01, ##1887502336
1d148     10 1B 02 F6 | 	mov	arg05, local02
1d14c     02 1A 66 F0 | 	shl	arg05, #2
1d150     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
1d154     0D 1F 62 FC | 	wrlong	local01, arg05
1d158     01 20 06 F1 | 	add	local02, #1
1d15c     04 20 56 F2 | 	cmps	local02, #4 wc
1d160     C0 FF 9F CD |  if_b	jmp	#LR__2260
1d164                 | LR__2261
1d164     24 E4 85 F1 | 	sub	objptr, #36
1d168                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
1d168     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
1d16c     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1d170     14 1E 66 FC | 	wrlong	local01, #20
1d174                 | ' hubset(timings[10])
1d174     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
1d178     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
1d17c     10 00 00 FF 
1d180     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
1d184     00 12 62 FD | 	hubset	arg01
1d188                 | ' waitms(1)                                                   	' wait for stabilization
1d188     01 12 06 F6 | 	mov	arg01, #1
1d18c     60 29 B0 FD | 	call	#__system___waitms
1d190     10 00 00 FF 
1d194     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
1d198     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1d19c     61 E4 05 F1 | 	add	objptr, #97
1d1a0     F2 20 62 FC | 	wrlong	local02, objptr
1d1a4     10 1F 52 F6 | 	abs	local01, local02 wc
1d1a8     04 1E 46 F0 | 	shr	local01, #4
1d1ac     0F 1F 82 F6 | 	negc	local01, local01
1d1b0     9C E4 05 F1 | 	add	objptr, #156
1d1b4     F2 1E 62 FC | 	wrlong	local01, objptr
1d1b8     A4 E4 85 F1 | 	sub	objptr, #164
1d1bc     F2 20 02 FB | 	rdlong	local02, objptr
1d1c0     08 E4 05 F1 | 	add	objptr, #8
1d1c4     F2 1E 02 FB | 	rdlong	local01, objptr
1d1c8     0F 21 02 FD | 	qmul	local02, local01
1d1cc                 | ' lines:=timings[11]
1d1cc                 | ' t_lines:=lines/16
1d1cc                 | ' buflen:=cpl*lines						' framebuffer length in longs
1d1cc     29 E4 85 F1 | 	sub	objptr, #41
1d1d0     19 1E C6 F9 | 	decod	local01, #25
1d1d4     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
1d1d8     18 20 62 FD | 	getqx	local02
1d1dc     F2 20 62 FC | 	wrlong	local02, objptr
1d1e0     38 E4 85 F1 | 	sub	objptr, #56
1d1e4     02 20 66 F0 | 	shl	local02, #2
1d1e8     10 1F 82 F1 | 	sub	local01, local02
1d1ec     F2 1E 62 FC | 	wrlong	local01, objptr
1d1f0     FD E4 05 F1 | 	add	objptr, #253
1d1f4     F2 20 02 FB | 	rdlong	local02, objptr
1d1f8     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1d1fc     0D 21 02 FD | 	qmul	local02, arg05
1d200                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
1d200                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
1d200     F9 E4 85 F1 | 	sub	objptr, #249
1d204                 | ' mode_ptr:=@timings						' set pointers to timings
1d204     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
1d208                 | ' graphmode:=1024+512+192+48							' det global variable
1d208                 | ' makedl(graphmode)							' make a DL for the mode
1d208     03 00 00 FF 
1d20c     F0 12 06 F6 | 	mov	arg01, ##1776
1d210     18 20 62 FD | 	getqx	local02
1d214     10 1F 82 F1 | 	sub	local01, local02
1d218     F2 1E 62 FC | 	wrlong	local01, objptr
1d21c     14 E4 05 F1 | 	add	objptr, #20
1d220     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1d224     79 E4 05 F1 | 	add	objptr, #121
1d228     03 00 80 FF 
1d22c     F2 E0 69 FC | 	wrlong	##1776, objptr
1d230     91 E4 85 F1 | 	sub	objptr, #145
1d234     10 00 00 FF 
1d238     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
1d23c     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
1d240                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
1d240     F2 1E 02 FB | 	rdlong	local01, objptr
1d244     DD E4 05 F1 | 	add	objptr, #221
1d248     F2 1E 62 FC | 	wrlong	local01, objptr
1d24c                 | ' s_font_ptr:=font_ptr
1d24c     D5 E4 85 F1 | 	sub	objptr, #213
1d250     F2 1E 02 FB | 	rdlong	local01, objptr
1d254     D9 E4 05 F1 | 	add	objptr, #217
1d258     F2 1E 62 FC | 	wrlong	local01, objptr
1d25c                 | ' s_lines:=lines
1d25c     80 E4 85 F1 | 	sub	objptr, #128
1d260     F2 1E 02 FB | 	rdlong	local01, objptr
1d264     84 E4 05 F1 | 	add	objptr, #132
1d268     F2 1E 62 FC | 	wrlong	local01, objptr
1d26c                 | ' s_buflen:=buflen
1d26c     AD E4 85 F1 | 	sub	objptr, #173
1d270     F2 1E 02 FB | 	rdlong	local01, objptr
1d274     B5 E4 05 F1 | 	add	objptr, #181
1d278     F2 1E 62 FC | 	wrlong	local01, objptr
1d27c                 | ' s_cpl:=cpl
1d27c     94 E4 85 F1 | 	sub	objptr, #148
1d280     F2 1E 02 FB | 	rdlong	local01, objptr
1d284     90 E4 05 F1 | 	add	objptr, #144
1d288     F2 1E 62 FC | 	wrlong	local01, objptr
1d28c                 | ' s_cpl1:=cpl
1d28c     90 E4 85 F1 | 	sub	objptr, #144
1d290     F2 1E 02 FB | 	rdlong	local01, objptr
1d294     98 E4 05 F1 | 	add	objptr, #152
1d298     F2 1E 62 FC | 	wrlong	local01, objptr
1d29c                 | ' st_lines:=t_lines
1d29c     0C E4 05 F1 | 	add	objptr, #12
1d2a0     F2 1E 02 FB | 	rdlong	local01, objptr
1d2a4     04 E4 05 F1 | 	add	objptr, #4
1d2a8     F2 1E 62 FC | 	wrlong	local01, objptr
1d2ac                 | ' ppl:=ppl/xzoom  
1d2ac     28 E4 85 F1 | 	sub	objptr, #40
1d2b0     F2 64 02 FB | 	rdlong	muldiva_, objptr
1d2b4     2C E4 05 F1 | 	add	objptr, #44
1d2b8     F2 66 02 FB | 	rdlong	muldivb_, objptr
1d2bc     05 E5 85 F1 | 	sub	objptr, #261
1d2c0     BA 00 A0 FD | 	call	#divide_
1d2c4     D9 E4 05 F1 | 	add	objptr, #217
1d2c8     F2 66 62 FC | 	wrlong	muldivb_, objptr
1d2cc                 | ' s_ppl:=ppl
1d2cc     1C E4 05 F1 | 	add	objptr, #28
1d2d0     F2 66 62 FC | 	wrlong	muldivb_, objptr
1d2d4     F5 E4 85 F1 | 	sub	objptr, #245
1d2d8                 | ' waitms(20)							' wait 
1d2d8     14 12 06 F6 | 	mov	arg01, #20
1d2dc     10 28 B0 FD | 	call	#__system___waitms
1d2e0                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1d2e0     04 E4 05 F1 | 	add	objptr, #4
1d2e4     F2 12 02 FB | 	rdlong	arg01, objptr
1d2e8     04 E4 85 F1 | 	sub	objptr, #4
1d2ec     F2 16 02 FB | 	rdlong	arg03, objptr
1d2f0     09 17 82 F1 | 	sub	arg03, arg01
1d2f4     20 14 06 F6 | 	mov	arg02, #32
1d2f8     00 18 06 F6 | 	mov	arg04, #0
1d2fc     01 1A 06 F6 | 	mov	arg05, #1
1d300     0B 00 00 FF 
1d304     CC E4 05 F1 | 	add	objptr, ##5836
1d308     E8 19 B0 FD | 	call	#_psram_spin2_fill
1d30c     0B 00 00 FF 
1d310     CC E4 85 F1 | 	sub	objptr, ##5836
1d314     A7 F0 03 F6 | 	mov	ptra, fp
1d318     B2 00 A0 FD | 	call	#popregs_
1d31c                 | _hg010b_spin2_setmode_ret
1d31c     2D 00 64 FD | 	ret
1d320                 | 
1d320                 | ' 
1d320                 | ' '****************************************************************************************************************
1d320                 | ' '                                                                                                             	*
1d320                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
1d320                 | ' '                                                                                                             	*
1d320                 | ' '****************************************************************************************************************
1d320                 | ' 
1d320                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
1d320                 | _hg010b_spin2_makedl
1d320                 | ' 
1d320                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
1d320                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
1d320                 | ' repeat i from 0 to 11                                                           ' clear DL
1d320     00 00 06 F6 | 	mov	_var01, #0
1d324     ED E5 05 F1 | 	add	objptr, #493
1d328     97 0E 48 FB | 	callpa	#(@LR__2271-@LR__2270)>>2,fcache_load_ptr_
1d32c                 | LR__2270
1d32c                 | '   displaylist[i]:=0 
1d32c     00 03 02 F6 | 	mov	_var02, _var01
1d330     02 02 66 F0 | 	shl	_var02, #2
1d334     F2 02 02 F1 | 	add	_var02, objptr
1d338     01 01 68 FC | 	wrlong	#0, _var02
1d33c     01 00 06 F1 | 	add	_var01, #1
1d340     0C 00 56 F2 | 	cmps	_var01, #12 wc
1d344     E4 FF 9F CD |  if_b	jmp	#LR__2270
1d348                 | LR__2271
1d348                 | '                         ' 
1d348                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
1d348     8C E5 85 F1 | 	sub	objptr, #396
1d34c     F2 02 02 FB | 	rdlong	_var02, objptr
1d350     14 02 66 F0 | 	shl	_var02, #20
1d354     01 02 06 F1 | 	add	_var02, #1
1d358     04 E4 85 F1 | 	sub	objptr, #4
1d35c     F2 00 02 FB | 	rdlong	_var01, objptr
1d360     02 00 66 F0 | 	shl	_var01, #2
1d364     04 00 66 F0 | 	shl	_var01, #4
1d368     00 03 02 F1 | 	add	_var02, _var01
1d36c     90 E5 05 F1 | 	add	objptr, #400
1d370     F2 02 62 FC | 	wrlong	_var02, objptr
1d374     ED E5 85 F1 | 	sub	objptr, #493
1d378                 | ' displaylist[1]:=buf_ptr<<4+%10  
1d378     F2 02 02 FB | 	rdlong	_var02, objptr
1d37c     04 02 66 F0 | 	shl	_var02, #4
1d380     02 02 06 F1 | 	add	_var02, #2
1d384     F1 E5 05 F1 | 	add	objptr, #497
1d388     F2 02 62 FC | 	wrlong	_var02, objptr
1d38c                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
1d38c     04 E4 85 F1 | 	sub	objptr, #4
1d390     F2 02 02 F6 | 	mov	_var02, objptr
1d394     CD E5 85 F1 | 	sub	objptr, #461
1d398     F2 02 62 FC | 	wrlong	_var02, objptr
1d39c     20 E4 85 F1 | 	sub	objptr, #32
1d3a0                 | _hg010b_spin2_makedl_ret
1d3a0     2D 00 64 FD | 	ret
1d3a4                 | 
1d3a4                 | ' 
1d3a4                 | ' 
1d3a4                 | ' '****************************************************************************************************************
1d3a4                 | ' '                                                                        					*
1d3a4                 | ' '  Graphic primitives                                                    					*
1d3a4                 | ' '                                                                        					*
1d3a4                 | ' '****************************************************************************************************************
1d3a4                 | ' 
1d3a4                 | ' pub setspriteptr(num,ptr)
1d3a4                 | _hg010b_spin2_setspriteptr
1d3a4                 | ' long[@spr1ptr+12*num]:=ptr
1d3a4     11 E5 05 F1 | 	add	objptr, #273
1d3a8     F2 00 02 F6 | 	mov	_var01, objptr
1d3ac     09 03 02 F6 | 	mov	_var02, arg01
1d3b0     01 02 66 F0 | 	shl	_var02, #1
1d3b4     09 03 02 F1 | 	add	_var02, arg01
1d3b8     02 02 66 F0 | 	shl	_var02, #2
1d3bc     01 01 02 F1 | 	add	_var01, _var02
1d3c0     00 15 62 FC | 	wrlong	arg02, _var01
1d3c4     11 E5 85 F1 | 	sub	objptr, #273
1d3c8                 | _hg010b_spin2_setspriteptr_ret
1d3c8     2D 00 64 FD | 	ret
1d3cc                 | 
1d3cc                 | ' 
1d3cc                 | ' pub setspritepos(num,x,y)
1d3cc                 | _hg010b_spin2_setspritepos
1d3cc                 | ' if y>601
1d3cc     01 00 00 FF 
1d3d0     5A 16 56 F2 | 	cmps	arg03, ##602 wc
1d3d4                 | '   y:=601
1d3d4     01 00 00 3F 
1d3d8     59 16 06 36 |  if_ae	mov	arg03, ##601
1d3dc                 | ' if x>1024
1d3dc     02 00 00 FF 
1d3e0     01 14 56 F2 | 	cmps	arg02, ##1025 wc
1d3e4                 | '   x:=1024
1d3e4     0A 14 C6 39 |  if_ae	decod	arg02, #10
1d3e8                 | ' word[@spr1ptr+12*num+4]:=x
1d3e8     11 E5 05 F1 | 	add	objptr, #273
1d3ec     F2 00 02 F6 | 	mov	_var01, objptr
1d3f0     09 03 02 F6 | 	mov	_var02, arg01
1d3f4     01 02 66 F0 | 	shl	_var02, #1
1d3f8     09 03 02 F1 | 	add	_var02, arg01
1d3fc     02 02 66 F0 | 	shl	_var02, #2
1d400     01 01 02 F1 | 	add	_var01, _var02
1d404     04 00 06 F1 | 	add	_var01, #4
1d408     00 15 52 FC | 	wrword	arg02, _var01
1d40c                 | ' word[@spr1ptr+12*num+6]:=y
1d40c     F2 00 02 F6 | 	mov	_var01, objptr
1d410     09 03 02 F6 | 	mov	_var02, arg01
1d414     01 02 66 F0 | 	shl	_var02, #1
1d418     09 03 02 F1 | 	add	_var02, arg01
1d41c     02 02 66 F0 | 	shl	_var02, #2
1d420     01 01 02 F1 | 	add	_var01, _var02
1d424     06 00 06 F1 | 	add	_var01, #6
1d428     00 17 52 FC | 	wrword	arg03, _var01
1d42c     11 E5 85 F1 | 	sub	objptr, #273
1d430                 | _hg010b_spin2_setspritepos_ret
1d430     2D 00 64 FD | 	ret
1d434                 | 
1d434                 | ' 
1d434                 | ' pub setspritesize(num,w,h)
1d434                 | _hg010b_spin2_setspritesize
1d434                 | ' word[@spr1ptr+12*num+8]:=w
1d434     11 E5 05 F1 | 	add	objptr, #273
1d438     F2 00 02 F6 | 	mov	_var01, objptr
1d43c     09 03 02 F6 | 	mov	_var02, arg01
1d440     01 02 66 F0 | 	shl	_var02, #1
1d444     09 03 02 F1 | 	add	_var02, arg01
1d448     02 02 66 F0 | 	shl	_var02, #2
1d44c     01 01 02 F1 | 	add	_var01, _var02
1d450     08 00 06 F1 | 	add	_var01, #8
1d454     00 15 52 FC | 	wrword	arg02, _var01
1d458                 | ' word[@spr1ptr+12*num+10]:=h
1d458     F2 00 02 F6 | 	mov	_var01, objptr
1d45c     09 03 02 F6 | 	mov	_var02, arg01
1d460     01 02 66 F0 | 	shl	_var02, #1
1d464     09 03 02 F1 | 	add	_var02, arg01
1d468     02 02 66 F0 | 	shl	_var02, #2
1d46c     01 01 02 F1 | 	add	_var01, _var02
1d470     0A 00 06 F1 | 	add	_var01, #10
1d474     00 17 52 FC | 	wrword	arg03, _var01
1d478     11 E5 85 F1 | 	sub	objptr, #273
1d47c                 | _hg010b_spin2_setspritesize_ret
1d47c     2D 00 64 FD | 	ret
1d480                 | 
1d480                 | ' 
1d480                 | ' 
1d480                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
1d480                 | ' 
1d480                 | ' 
1d480                 | ' pub putpixel(x,y,c)
1d480                 | _hg010b_spin2_putpixel
1d480     04 4A 05 F6 | 	mov	COUNT_, #4
1d484     A8 00 A0 FD | 	call	#pushregs_
1d488     09 1F 02 F6 | 	mov	local01, arg01
1d48c                 | ' 
1d48c                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
1d48c     00 20 06 F6 | 	mov	local02, #0
1d490     00 1E 56 F2 | 	cmps	local01, #0 wc
1d494     01 20 66 36 |  if_ae	neg	local02, #1
1d498     E9 E4 05 F1 | 	add	objptr, #233
1d49c     F2 1A 02 FB | 	rdlong	arg05, objptr
1d4a0     02 1A 66 F0 | 	shl	arg05, #2
1d4a4     0D 1F 52 F2 | 	cmps	local01, arg05 wc
1d4a8     11 23 A2 F1 | 	subx	local03, local03
1d4ac     11 21 02 F5 | 	and	local02, local03
1d4b0     00 22 06 F6 | 	mov	local03, #0
1d4b4     00 14 56 F2 | 	cmps	arg02, #0 wc
1d4b8     01 22 66 36 |  if_ae	neg	local03, #1
1d4bc     11 21 02 F5 | 	and	local02, local03
1d4c0     04 E4 85 F1 | 	sub	objptr, #4
1d4c4     F2 22 02 FB | 	rdlong	local03, objptr
1d4c8     E5 E4 85 F1 | 	sub	objptr, #229
1d4cc     11 15 52 F2 | 	cmps	arg02, local03 wc
1d4d0     12 25 A2 F1 | 	subx	local04, local04
1d4d4     12 21 CA F7 | 	test	local02, local04 wz
1d4d8     48 00 90 AD |  if_e	jmp	#LR__2280
1d4dc     DD E4 05 F1 | 	add	objptr, #221
1d4e0     F2 12 02 FB | 	rdlong	arg01, objptr
1d4e4     14 E4 05 F1 | 	add	objptr, #20
1d4e8     F2 24 02 FB | 	rdlong	local04, objptr
1d4ec     02 24 66 F0 | 	shl	local04, #2
1d4f0     0A 25 02 FD | 	qmul	local04, arg02
1d4f4                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1d4f4     0B 15 02 F6 | 	mov	arg02, arg03
1d4f8     01 16 06 F6 | 	mov	arg03, #1
1d4fc     00 18 06 F6 | 	mov	arg04, #0
1d500     01 1A 06 F6 | 	mov	arg05, #1
1d504     0A 00 00 FF 
1d508     DB E5 05 F1 | 	add	objptr, ##5595
1d50c     18 24 62 FD | 	getqx	local04
1d510     0F 25 02 F1 | 	add	local04, local01
1d514     12 13 02 F1 | 	add	arg01, local04
1d518     D8 17 B0 FD | 	call	#_psram_spin2_fill
1d51c     0B 00 00 FF 
1d520     CC E4 85 F1 | 	sub	objptr, ##5836
1d524                 | LR__2280
1d524     A7 F0 03 F6 | 	mov	ptra, fp
1d528     B2 00 A0 FD | 	call	#popregs_
1d52c                 | _hg010b_spin2_putpixel_ret
1d52c     2D 00 64 FD | 	ret
1d530                 | 
1d530                 | ' 
1d530                 | ' pub putpixel2(x,y,c)
1d530                 | _hg010b_spin2_putpixel2
1d530     02 4A 05 F6 | 	mov	COUNT_, #2
1d534     A8 00 A0 FD | 	call	#pushregs_
1d538     DD E4 05 F1 | 	add	objptr, #221
1d53c     F2 1E 02 FB | 	rdlong	local01, objptr
1d540     14 E4 05 F1 | 	add	objptr, #20
1d544     F2 1A 02 FB | 	rdlong	arg05, objptr
1d548     02 1A 66 F0 | 	shl	arg05, #2
1d54c     0A 1B 02 FD | 	qmul	arg05, arg02
1d550                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1d550     0B 15 02 F6 | 	mov	arg02, arg03
1d554     01 16 06 F6 | 	mov	arg03, #1
1d558     00 18 06 F6 | 	mov	arg04, #0
1d55c     01 1A 06 F6 | 	mov	arg05, #1
1d560     0A 00 00 FF 
1d564     DB E5 05 F1 | 	add	objptr, ##5595
1d568     18 20 62 FD | 	getqx	local02
1d56c     09 21 02 F1 | 	add	local02, arg01
1d570     10 1F 02 F1 | 	add	local01, local02
1d574     0F 13 02 F6 | 	mov	arg01, local01
1d578     78 17 B0 FD | 	call	#_psram_spin2_fill
1d57c     0B 00 00 FF 
1d580     CC E4 85 F1 | 	sub	objptr, ##5836
1d584     A7 F0 03 F6 | 	mov	ptra, fp
1d588     B2 00 A0 FD | 	call	#popregs_
1d58c                 | _hg010b_spin2_putpixel2_ret
1d58c     2D 00 64 FD | 	ret
1d590                 | 
1d590                 | ' 
1d590                 | ' pub getpixel2(x,y): c 
1d590                 | _hg010b_spin2_getpixel2
1d590     02 4A 05 F6 | 	mov	COUNT_, #2
1d594     A8 00 A0 FD | 	call	#pushregs_
1d598     0C F0 07 F1 | 	add	ptra, #12
1d59c     04 4E 05 F1 | 	add	fp, #4
1d5a0     A7 12 62 FC | 	wrlong	arg01, fp
1d5a4     04 4E 05 F1 | 	add	fp, #4
1d5a8     A7 14 62 FC | 	wrlong	arg02, fp
1d5ac     08 4E 85 F1 | 	sub	fp, #8
1d5b0     A7 00 68 FC | 	wrlong	#0, fp
1d5b4     A7 12 02 F6 | 	mov	arg01, fp
1d5b8     DD E4 05 F1 | 	add	objptr, #221
1d5bc     F2 14 02 FB | 	rdlong	arg02, objptr
1d5c0     14 E4 05 F1 | 	add	objptr, #20
1d5c4     F2 16 02 FB | 	rdlong	arg03, objptr
1d5c8     02 16 66 F0 | 	shl	arg03, #2
1d5cc     08 4E 05 F1 | 	add	fp, #8
1d5d0     A7 FA 01 FB | 	rdlong	result1, fp
1d5d4     FD 16 02 FD | 	qmul	arg03, result1
1d5d8                 | ' 
1d5d8                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
1d5d8     04 4E 85 F1 | 	sub	fp, #4
1d5dc     A7 1E 02 FB | 	rdlong	local01, fp
1d5e0     04 4E 85 F1 | 	sub	fp, #4
1d5e4     01 16 06 F6 | 	mov	arg03, #1
1d5e8     0A 00 00 FF 
1d5ec     DB E5 05 F1 | 	add	objptr, ##5595
1d5f0     18 20 62 FD | 	getqx	local02
1d5f4     0F 21 02 F1 | 	add	local02, local01
1d5f8     10 15 02 F1 | 	add	arg02, local02
1d5fc     BC 15 B0 FD | 	call	#_psram_spin2_read1
1d600     0B 00 00 FF 
1d604     CC E4 85 F1 | 	sub	objptr, ##5836
1d608                 | ' return c
1d608     A7 FA 01 FB | 	rdlong	result1, fp
1d60c     A7 F0 03 F6 | 	mov	ptra, fp
1d610     B2 00 A0 FD | 	call	#popregs_
1d614                 | _hg010b_spin2_getpixel2_ret
1d614     2D 00 64 FD | 	ret
1d618                 | 
1d618                 | '   
1d618                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
1d618                 | ' 
1d618                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
1d618                 | _hg010b_spin2_fastline
1d618     02 4A 05 F6 | 	mov	COUNT_, #2
1d61c     A8 00 A0 FD | 	call	#pushregs_
1d620     09 1F 02 F6 | 	mov	local01, arg01
1d624     0A 21 02 F6 | 	mov	local02, arg02
1d628                 | ' 
1d628                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
1d628     00 16 56 F2 | 	cmps	arg03, #0 wc
1d62c     F4 00 90 CD |  if_b	jmp	#LR__2290
1d630     01 00 00 FF 
1d634     2A E4 05 F1 | 	add	objptr, ##554
1d638     F2 1A 02 FB | 	rdlong	arg05, objptr
1d63c     01 00 00 FF 
1d640     2A E4 85 F1 | 	sub	objptr, ##554
1d644     0D 17 52 F2 | 	cmps	arg03, arg05 wc
1d648     D8 00 90 3D |  if_ae	jmp	#LR__2290
1d64c     00 1E 56 F2 | 	cmps	local01, #0 wc
1d650     00 20 56 C2 |  if_b	cmps	local02, #0 wc
1d654     CC 00 90 CD |  if_b	jmp	#LR__2290
1d658     01 00 00 FF 
1d65c     26 E4 05 F1 | 	add	objptr, ##550
1d660     F2 1A 02 FB | 	rdlong	arg05, objptr
1d664     01 00 00 FF 
1d668     26 E4 85 F1 | 	sub	objptr, ##550
1d66c     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
1d670     01 00 00 1F 
1d674     26 E4 05 11 |  if_a	add	objptr, ##550
1d678     F2 12 02 1B |  if_a	rdlong	arg01, objptr
1d67c     01 00 00 1F 
1d680     26 E4 85 11 |  if_a	sub	objptr, ##550
1d684     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
1d688                 | '   return
1d688     98 00 90 1D |  if_a	jmp	#LR__2290
1d68c     10 1F 5A F2 | 	cmps	local01, local02 wcz
1d690     0F 1B 02 16 |  if_a	mov	arg05, local01
1d694     10 1F 02 16 |  if_a	mov	local01, local02
1d698     0D 21 02 16 |  if_a	mov	local02, arg05
1d69c     00 1E 56 F2 | 	cmps	local01, #0 wc
1d6a0     00 1E 06 C6 |  if_b	mov	local01, #0
1d6a4     01 00 00 FF 
1d6a8     26 E4 05 F1 | 	add	objptr, ##550
1d6ac     F2 1A 02 FB | 	rdlong	arg05, objptr
1d6b0     01 00 00 FF 
1d6b4     26 E4 85 F1 | 	sub	objptr, ##550
1d6b8     0D 21 52 F2 | 	cmps	local02, arg05 wc
1d6bc     01 00 00 3F 
1d6c0     26 E4 05 31 |  if_ae	add	objptr, ##550
1d6c4     F2 20 02 3B |  if_ae	rdlong	local02, objptr
1d6c8     01 00 00 3F 
1d6cc     26 E4 85 31 |  if_ae	sub	objptr, ##550
1d6d0     DD E4 05 F1 | 	add	objptr, #221
1d6d4     F2 12 02 FB | 	rdlong	arg01, objptr
1d6d8     14 E4 05 F1 | 	add	objptr, #20
1d6dc     F2 1A 02 FB | 	rdlong	arg05, objptr
1d6e0     02 1A 66 F0 | 	shl	arg05, #2
1d6e4     0B 1B 02 FD | 	qmul	arg05, arg03
1d6e8                 | ' if x1>x2
1d6e8                 | '   x1,x2:=x2,x1
1d6e8                 | ' if x1<0 
1d6e8                 | '   x1:=0
1d6e8                 | ' if x2>=xres
1d6e8                 | '   x2:=xres-1  
1d6e8     01 20 86 31 |  if_ae	sub	local02, #1
1d6ec                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
1d6ec     01 16 06 F6 | 	mov	arg03, #1
1d6f0     10 17 02 F1 | 	add	arg03, local02
1d6f4     0F 17 82 F1 | 	sub	arg03, local01
1d6f8     0C 15 02 F6 | 	mov	arg02, arg04
1d6fc     00 18 06 F6 | 	mov	arg04, #0
1d700     01 1A 06 F6 | 	mov	arg05, #1
1d704     0A 00 00 FF 
1d708     DB E5 05 F1 | 	add	objptr, ##5595
1d70c     18 20 62 FD | 	getqx	local02
1d710     0F 21 02 F1 | 	add	local02, local01
1d714     10 13 02 F1 | 	add	arg01, local02
1d718     D8 15 B0 FD | 	call	#_psram_spin2_fill
1d71c     0B 00 00 FF 
1d720     CC E4 85 F1 | 	sub	objptr, ##5836
1d724                 | LR__2290
1d724     A7 F0 03 F6 | 	mov	ptra, fp
1d728     B2 00 A0 FD | 	call	#popregs_
1d72c                 | _hg010b_spin2_fastline_ret
1d72c     2D 00 64 FD | 	ret
1d730                 | 
1d730                 | ' 
1d730                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
1d730                 | _hg010b_spin2_draw
1d730     0E 4A 05 F6 | 	mov	COUNT_, #14
1d734     A8 00 A0 FD | 	call	#pushregs_
1d738     09 1F 02 F6 | 	mov	local01, arg01
1d73c     0A 21 02 F6 | 	mov	local02, arg02
1d740     0B 23 02 F6 | 	mov	local03, arg03
1d744     0C 25 02 F6 | 	mov	local04, arg04
1d748     0D 27 02 F6 | 	mov	local05, arg05
1d74c                 | ' 
1d74c                 | ' if (y1==y2)
1d74c     12 21 0A F2 | 	cmp	local02, local04 wz
1d750     18 00 90 5D |  if_ne	jmp	#LR__2300
1d754                 | '   fastline(x1,x2,y1,c)
1d754     0F 13 02 F6 | 	mov	arg01, local01
1d758     11 15 02 F6 | 	mov	arg02, local03
1d75c     10 17 02 F6 | 	mov	arg03, local02
1d760     13 19 02 F6 | 	mov	arg04, local05
1d764     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
1d768     F8 00 90 FD | 	jmp	#LR__2306
1d76c                 | LR__2300
1d76c                 | ' else  
1d76c                 | '   x:=x1
1d76c     0F 29 02 F6 | 	mov	local06, local01
1d770                 | '   y:=y1
1d770     10 2B 02 F6 | 	mov	local07, local02
1d774                 | ' 
1d774                 | '   if (x1<x2) 
1d774     11 1F 52 F2 | 	cmps	local01, local03 wc
1d778                 | '     xi:=1
1d778     01 2C 06 C6 |  if_b	mov	local08, #1
1d77c                 | '     dx:=x2-x1
1d77c     11 2F 02 C6 |  if_b	mov	local09, local03
1d780     0F 2F 82 C1 |  if_b	sub	local09, local01
1d784                 | '   else
1d784                 | '     xi:=-1
1d784     01 2C 66 36 |  if_ae	neg	local08, #1
1d788                 | '     dx:=x1-x2
1d788     11 1F 82 31 |  if_ae	sub	local01, local03
1d78c     0F 2F 02 36 |  if_ae	mov	local09, local01
1d790                 | '   
1d790                 | '   if (y1<y2) 
1d790     12 21 52 F2 | 	cmps	local02, local04 wc
1d794                 | '     yi:=1
1d794     01 30 06 C6 |  if_b	mov	local10, #1
1d798                 | '     dy:=y2-y1
1d798     12 33 02 C6 |  if_b	mov	local11, local04
1d79c     10 33 82 C1 |  if_b	sub	local11, local02
1d7a0                 | '   else
1d7a0                 | '     yi:=-1
1d7a0     01 30 66 36 |  if_ae	neg	local10, #1
1d7a4                 | '     dy:=y1-y2
1d7a4     12 21 82 31 |  if_ae	sub	local02, local04
1d7a8     10 33 02 36 |  if_ae	mov	local11, local02
1d7ac                 | ' 
1d7ac                 | '   putpixel(x,y,c)
1d7ac     13 17 02 F6 | 	mov	arg03, local05
1d7b0     14 13 02 F6 | 	mov	arg01, local06
1d7b4     15 15 02 F6 | 	mov	arg02, local07
1d7b8     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
1d7bc                 | ' 
1d7bc                 | '   if (dx>dy)
1d7bc     19 2F 5A F2 | 	cmps	local09, local11 wcz
1d7c0     50 00 90 ED |  if_be	jmp	#LR__2302
1d7c4                 | '     ai:=(dy-dx)*2
1d7c4     19 35 02 F6 | 	mov	local12, local11
1d7c8     17 35 82 F1 | 	sub	local12, local09
1d7cc     01 34 66 F0 | 	shl	local12, #1
1d7d0                 | '     bi:=dy*2
1d7d0     01 32 66 F0 | 	shl	local11, #1
1d7d4     19 37 02 F6 | 	mov	local13, local11
1d7d8                 | '     d:= bi-dx
1d7d8     1B 39 02 F6 | 	mov	local14, local13
1d7dc     17 39 82 F1 | 	sub	local14, local09
1d7e0                 | '     repeat while (x<>x2) 
1d7e0                 | LR__2301
1d7e0     11 29 0A F2 | 	cmp	local06, local03 wz
1d7e4     7C 00 90 AD |  if_e	jmp	#LR__2305
1d7e8                 | '       if (d>=0) 
1d7e8     00 38 56 F2 | 	cmps	local14, #0 wc
1d7ec                 | '         x+=xi
1d7ec     16 29 02 31 |  if_ae	add	local06, local08
1d7f0                 | '         y+=yi
1d7f0     18 2B 02 31 |  if_ae	add	local07, local10
1d7f4                 | '         d+=ai
1d7f4     1A 39 02 31 |  if_ae	add	local14, local12
1d7f8                 | '       else
1d7f8                 | '         d+=bi
1d7f8     1B 39 02 C1 |  if_b	add	local14, local13
1d7fc                 | '         x+=xi
1d7fc     16 29 02 C1 |  if_b	add	local06, local08
1d800                 | '       putpixel(x,y,c)
1d800     14 13 02 F6 | 	mov	arg01, local06
1d804     15 15 02 F6 | 	mov	arg02, local07
1d808     13 17 02 F6 | 	mov	arg03, local05
1d80c     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
1d810     CC FF 9F FD | 	jmp	#LR__2301
1d814                 | LR__2302
1d814                 | '   else
1d814                 | '     ai:=(dx-dy)*2
1d814     17 35 02 F6 | 	mov	local12, local09
1d818     19 35 82 F1 | 	sub	local12, local11
1d81c     01 34 66 F0 | 	shl	local12, #1
1d820                 | '     bi:=dx*2
1d820     01 2E 66 F0 | 	shl	local09, #1
1d824     17 37 02 F6 | 	mov	local13, local09
1d828                 | '     d:=bi-dy
1d828     1B 39 02 F6 | 	mov	local14, local13
1d82c     19 39 82 F1 | 	sub	local14, local11
1d830                 | '     repeat while (y<>y2)
1d830                 | LR__2303
1d830     12 2B 0A F2 | 	cmp	local07, local04 wz
1d834     2C 00 90 AD |  if_e	jmp	#LR__2304
1d838                 | '       if (d>=0)
1d838     00 38 56 F2 | 	cmps	local14, #0 wc
1d83c                 | '         x+=xi
1d83c     16 29 02 31 |  if_ae	add	local06, local08
1d840                 | '         y+=yi
1d840     18 2B 02 31 |  if_ae	add	local07, local10
1d844                 | '         d+=ai
1d844     1A 39 02 31 |  if_ae	add	local14, local12
1d848                 | '       else
1d848                 | '         d+=bi
1d848     1B 39 02 C1 |  if_b	add	local14, local13
1d84c                 | '         y+=yi
1d84c     18 2B 02 C1 |  if_b	add	local07, local10
1d850                 | '       putpixel(x, y,c)
1d850     14 13 02 F6 | 	mov	arg01, local06
1d854     15 15 02 F6 | 	mov	arg02, local07
1d858     13 17 02 F6 | 	mov	arg03, local05
1d85c     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
1d860     CC FF 9F FD | 	jmp	#LR__2303
1d864                 | LR__2304
1d864                 | LR__2305
1d864                 | LR__2306
1d864     A7 F0 03 F6 | 	mov	ptra, fp
1d868     B2 00 A0 FD | 	call	#popregs_
1d86c                 | _hg010b_spin2_draw_ret
1d86c     2D 00 64 FD | 	ret
1d870                 | 
1d870                 | '  
1d870                 | ' pub fillpush(val) 
1d870                 | _hg010b_spin2_fillpush
1d870                 | ' fillstack[fillptr]:=val
1d870     0B 00 00 FF 
1d874     BA E4 05 F1 | 	add	objptr, ##5818
1d878     F2 00 02 FB | 	rdlong	_var01, objptr
1d87c     02 00 66 F0 | 	shl	_var01, #2
1d880     0A 00 00 FF 
1d884     00 E4 85 F1 | 	sub	objptr, ##5120
1d888     F2 00 02 F1 | 	add	_var01, objptr
1d88c     00 13 62 FC | 	wrlong	arg01, _var01
1d890                 | ' fillptr+=1   
1d890     0A 00 00 FF 
1d894     00 E4 05 F1 | 	add	objptr, ##5120
1d898     F2 00 02 FB | 	rdlong	_var01, objptr
1d89c     01 00 06 F1 | 	add	_var01, #1
1d8a0     F2 00 62 FC | 	wrlong	_var01, objptr
1d8a4     0B 00 00 FF 
1d8a8     BA E4 85 F1 | 	sub	objptr, ##5818
1d8ac                 | _hg010b_spin2_fillpush_ret
1d8ac     2D 00 64 FD | 	ret
1d8b0                 | 
1d8b0                 | ' 
1d8b0                 | '     
1d8b0                 | ' pub fillpop() : val
1d8b0                 | _hg010b_spin2_fillpop
1d8b0                 | ' 
1d8b0                 | ' fillptr-=1
1d8b0     0B 00 00 FF 
1d8b4     BA E4 05 F1 | 	add	objptr, ##5818
1d8b8     F2 FA 01 FB | 	rdlong	result1, objptr
1d8bc     01 FA 85 F1 | 	sub	result1, #1
1d8c0     F2 FA 61 FC | 	wrlong	result1, objptr
1d8c4                 | ' if fillptr<0
1d8c4     0B 00 00 FF 
1d8c8     BA E4 85 F1 | 	sub	objptr, ##5818
1d8cc     00 FA 55 F2 | 	cmps	result1, #0 wc
1d8d0                 | '   fillptr:=0
1d8d0     0B 00 00 CF 
1d8d4     BA E4 05 C1 |  if_b	add	objptr, ##5818
1d8d8     F2 00 68 CC |  if_b	wrlong	#0, objptr
1d8dc     0B 00 00 CF 
1d8e0     BA E4 85 C1 |  if_b	sub	objptr, ##5818
1d8e4                 | '   val:=-12345
1d8e4     E7 FF 7F CF 
1d8e8     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
1d8ec     28 00 90 CD |  if_b	jmp	#LR__2310
1d8f0                 | ' else 
1d8f0                 | '   val:=fillstack[fillptr]
1d8f0     0B 00 00 FF 
1d8f4     BA E4 05 F1 | 	add	objptr, ##5818
1d8f8     F2 00 02 FB | 	rdlong	_var01, objptr
1d8fc     02 00 66 F0 | 	shl	_var01, #2
1d900     0A 00 00 FF 
1d904     00 E4 85 F1 | 	sub	objptr, ##5120
1d908     F2 00 02 F1 | 	add	_var01, objptr
1d90c     00 01 02 FB | 	rdlong	_var01, _var01
1d910     01 00 00 FF 
1d914     BA E4 85 F1 | 	sub	objptr, ##698
1d918                 | LR__2310
1d918                 | ' return val
1d918     00 FB 01 F6 | 	mov	result1, _var01
1d91c                 | _hg010b_spin2_fillpop_ret
1d91c     2D 00 64 FD | 	ret
1d920                 | 
1d920                 | ' 
1d920                 | '       
1d920                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
1d920                 | _hg010b_spin2_fill
1d920     0B 4A 05 F6 | 	mov	COUNT_, #11
1d924     A8 00 A0 FD | 	call	#pushregs_
1d928                 | ' 
1d928                 | ' newcolor:=newcolor & 255
1d928     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
1d92c                 | ' oldcolor:=oldcolor & 255
1d92c     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
1d930                 | ' 
1d930                 | ' if (oldcolor == newcolor) 
1d930     0F 21 0A F2 | 	cmp	local02, local01 wz
1d934                 | '   return
1d934     70 02 90 AD |  if_e	jmp	#LR__2329
1d938                 | ' 
1d938                 | ' fillptr:=0
1d938     0B 00 00 FF 
1d93c     BA E4 05 F1 | 	add	objptr, ##5818
1d940     F2 00 68 FC | 	wrlong	#0, objptr
1d944                 | ' fillmax:=0
1d944     04 E4 05 F1 | 	add	objptr, #4
1d948     F2 00 68 FC | 	wrlong	#0, objptr
1d94c     0B 00 00 FF 
1d950     BE E4 85 F1 | 	sub	objptr, ##5822
1d954                 | ' fillpush(x)
1d954     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
1d958                 | ' fillpush(y)
1d958     0A 13 02 F6 | 	mov	arg01, arg02
1d95c     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
1d960                 | ' y:=fillpop()
1d960     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
1d964     FD 22 02 F6 | 	mov	local03, result1
1d968                 | ' x:=fillpop()
1d968     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
1d96c     FD 24 02 F6 | 	mov	local04, result1
1d970                 | ' 'pinhigh(38)
1d970                 | ' repeat while (x>-1)       
1d970                 | LR__2320
1d970     00 24 56 F2 | 	cmps	local04, #0 wc
1d974     30 02 90 CD |  if_b	jmp	#LR__2328
1d978                 | '  ' pintoggle(39)
1d978                 | '   x1 := x
1d978     12 27 02 F6 | 	mov	local05, local04
1d97c                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
1d97c                 | LR__2321
1d97c     00 28 06 F6 | 	mov	local06, #0
1d980     00 2A 06 F6 | 	mov	local07, #0
1d984     00 26 56 F2 | 	cmps	local05, #0 wc
1d988     01 2A 66 36 |  if_ae	neg	local07, #1
1d98c     00 2A 0E F2 | 	cmp	local07, #0 wz
1d990     00 28 26 56 |  if_ne	not	local06, #0
1d994     00 2C 06 F6 | 	mov	local08, #0
1d998     00 2E 06 F6 | 	mov	local09, #0
1d99c     11 15 02 F6 | 	mov	arg02, local03
1d9a0     13 13 02 F6 | 	mov	arg01, local05
1d9a4     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1d9a8     10 FB 09 F2 | 	cmp	result1, local02 wz
1d9ac     00 2E 26 A6 |  if_e	not	local09, #0
1d9b0     00 2E 0E F2 | 	cmp	local09, #0 wz
1d9b4     00 2C 26 56 |  if_ne	not	local08, #0
1d9b8     16 29 CA F7 | 	test	local06, local08 wz
1d9bc                 | '     x1--
1d9bc     01 26 86 51 |  if_ne	sub	local05, #1
1d9c0     B8 FF 9F 5D |  if_ne	jmp	#LR__2321
1d9c4                 | '   x1++
1d9c4     01 26 06 F1 | 	add	local05, #1
1d9c8                 | '   spanabove := 0
1d9c8     00 30 06 F6 | 	mov	local10, #0
1d9cc                 | '   spanbelow := 0
1d9cc     00 32 06 F6 | 	mov	local11, #0
1d9d0                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
1d9d0                 | LR__2322
1d9d0     00 28 06 F6 | 	mov	local06, #0
1d9d4     02 00 00 FF 
1d9d8     00 26 56 F2 | 	cmps	local05, ##1024 wc
1d9dc     00 28 26 C6 |  if_b	not	local06, #0
1d9e0     00 2C 06 F6 | 	mov	local08, #0
1d9e4     00 2E 06 F6 | 	mov	local09, #0
1d9e8     11 15 02 F6 | 	mov	arg02, local03
1d9ec     13 13 02 F6 | 	mov	arg01, local05
1d9f0     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
1d9f4     10 FB 09 F2 | 	cmp	result1, local02 wz
1d9f8     00 2E 26 A6 |  if_e	not	local09, #0
1d9fc     00 2E 0E F2 | 	cmp	local09, #0 wz
1da00     00 2C 26 56 |  if_ne	not	local08, #0
1da04     16 29 CA F7 | 	test	local06, local08 wz
1da08     88 01 90 AD |  if_e	jmp	#LR__2327
1da0c                 | '     putpixel2 (x1,y, newcolor & 255)
1da0c     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
1da10     13 13 02 F6 | 	mov	arg01, local05
1da14     11 15 02 F6 | 	mov	arg02, local03
1da18     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
1da1c                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
1da1c     00 28 06 F6 | 	mov	local06, #0
1da20     00 2A 06 F6 | 	mov	local07, #0
1da24     00 30 0E F2 | 	cmp	local10, #0 wz
1da28     01 22 56 A2 |  if_e	cmps	local03, #1 wc
1da2c     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
1da30     00 2A 0E F2 | 	cmp	local07, #0 wz
1da34     00 28 26 56 |  if_ne	not	local06, #0
1da38     00 2C 06 F6 | 	mov	local08, #0
1da3c     00 2E 06 F6 | 	mov	local09, #0
1da40     11 15 02 F6 | 	mov	arg02, local03
1da44     01 14 86 F1 | 	sub	arg02, #1
1da48     13 13 02 F6 | 	mov	arg01, local05
1da4c     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1da50     10 FB 09 F2 | 	cmp	result1, local02 wz
1da54     00 2E 26 A6 |  if_e	not	local09, #0
1da58     00 2E 0E F2 | 	cmp	local09, #0 wz
1da5c     00 2C 26 56 |  if_ne	not	local08, #0
1da60     16 29 CA F7 | 	test	local06, local08 wz
1da64     1C 00 90 AD |  if_e	jmp	#LR__2323
1da68                 | '       fillpush(x1)
1da68     13 13 02 F6 | 	mov	arg01, local05
1da6c     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
1da70                 | '       fillpush(y-1)
1da70     11 13 02 F6 | 	mov	arg01, local03
1da74     01 12 86 F1 | 	sub	arg01, #1
1da78     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
1da7c                 | '       spanabove := 1 
1da7c     01 30 06 F6 | 	mov	local10, #1
1da80     4C 00 90 FD | 	jmp	#LR__2324
1da84                 | LR__2323
1da84                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
1da84     00 28 06 F6 | 	mov	local06, #0
1da88     00 2A 06 F6 | 	mov	local07, #0
1da8c     00 30 0E F2 | 	cmp	local10, #0 wz
1da90     01 22 56 52 |  if_ne	cmps	local03, #1 wc
1da94     01 2A 66 16 |  if_a	neg	local07, #1
1da98     00 2A 0E F2 | 	cmp	local07, #0 wz
1da9c     00 28 26 56 |  if_ne	not	local06, #0
1daa0     00 2C 06 F6 | 	mov	local08, #0
1daa4     00 2E 06 F6 | 	mov	local09, #0
1daa8     11 15 02 F6 | 	mov	arg02, local03
1daac     01 14 86 F1 | 	sub	arg02, #1
1dab0     13 13 02 F6 | 	mov	arg01, local05
1dab4     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1dab8     10 FB 09 F2 | 	cmp	result1, local02 wz
1dabc     00 2E 26 56 |  if_ne	not	local09, #0
1dac0     00 2E 0E F2 | 	cmp	local09, #0 wz
1dac4     00 2C 26 56 |  if_ne	not	local08, #0
1dac8     16 29 CA F7 | 	test	local06, local08 wz
1dacc                 | '       spanabove := 0 
1dacc     00 30 06 56 |  if_ne	mov	local10, #0
1dad0                 | LR__2324
1dad0                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
1dad0     00 28 06 F6 | 	mov	local06, #0
1dad4     00 2A 06 F6 | 	mov	local07, #0
1dad8     00 32 0E F2 | 	cmp	local11, #0 wz
1dadc     01 00 00 AF 
1dae0     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
1dae4     01 2A 66 86 |  if_c_and_z	neg	local07, #1
1dae8     00 2A 0E F2 | 	cmp	local07, #0 wz
1daec     00 28 26 56 |  if_ne	not	local06, #0
1daf0     00 2C 06 F6 | 	mov	local08, #0
1daf4     00 2E 06 F6 | 	mov	local09, #0
1daf8     11 15 02 F6 | 	mov	arg02, local03
1dafc     01 14 06 F1 | 	add	arg02, #1
1db00     13 13 02 F6 | 	mov	arg01, local05
1db04     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1db08     10 FB 09 F2 | 	cmp	result1, local02 wz
1db0c     00 2E 26 A6 |  if_e	not	local09, #0
1db10     00 2E 0E F2 | 	cmp	local09, #0 wz
1db14     00 2C 26 56 |  if_ne	not	local08, #0
1db18     16 29 CA F7 | 	test	local06, local08 wz
1db1c     1C 00 90 AD |  if_e	jmp	#LR__2325
1db20                 | '       fillpush(x1)
1db20     13 13 02 F6 | 	mov	arg01, local05
1db24     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
1db28                 | '       fillpush(y + 1)
1db28     11 13 02 F6 | 	mov	arg01, local03
1db2c     01 12 06 F1 | 	add	arg01, #1
1db30     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
1db34                 | '       spanBelow := 1
1db34     01 32 06 F6 | 	mov	local11, #1
1db38     50 00 90 FD | 	jmp	#LR__2326
1db3c                 | LR__2325
1db3c                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
1db3c     00 28 06 F6 | 	mov	local06, #0
1db40     00 2A 06 F6 | 	mov	local07, #0
1db44     00 32 0E F2 | 	cmp	local11, #0 wz
1db48     01 00 00 5F 
1db4c     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
1db50     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
1db54     00 2A 0E F2 | 	cmp	local07, #0 wz
1db58     00 28 26 56 |  if_ne	not	local06, #0
1db5c     00 2C 06 F6 | 	mov	local08, #0
1db60     00 2E 06 F6 | 	mov	local09, #0
1db64     11 15 02 F6 | 	mov	arg02, local03
1db68     01 14 06 F1 | 	add	arg02, #1
1db6c     13 13 02 F6 | 	mov	arg01, local05
1db70     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
1db74     10 FB 09 F2 | 	cmp	result1, local02 wz
1db78     00 2E 26 56 |  if_ne	not	local09, #0
1db7c     00 2E 0E F2 | 	cmp	local09, #0 wz
1db80     00 2C 26 56 |  if_ne	not	local08, #0
1db84     16 29 CA F7 | 	test	local06, local08 wz
1db88                 | '       spanbelow := 0
1db88     00 32 06 56 |  if_ne	mov	local11, #0
1db8c                 | LR__2326
1db8c                 | '     x1++
1db8c     01 26 06 F1 | 	add	local05, #1
1db90     3C FE 9F FD | 	jmp	#LR__2322
1db94                 | LR__2327
1db94                 | '   y:=fillpop()
1db94     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
1db98     FD 22 02 F6 | 	mov	local03, result1
1db9c                 | '   x:=fillpop()
1db9c     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
1dba0     FD 24 02 F6 | 	mov	local04, result1
1dba4     C8 FD 9F FD | 	jmp	#LR__2320
1dba8                 | LR__2328
1dba8                 | LR__2329
1dba8     A7 F0 03 F6 | 	mov	ptra, fp
1dbac     B2 00 A0 FD | 	call	#popregs_
1dbb0                 | _hg010b_spin2_fill_ret
1dbb0     2D 00 64 FD | 	ret
1dbb4                 | 
1dbb4                 | ' 'pinlow(38)    
1dbb4                 | ' 
1dbb4                 | ' '-- A filled circle -----------------------------------------------------
1dbb4                 | ' 
1dbb4                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
1dbb4                 | _hg010b_spin2_fcircle
1dbb4     08 4A 05 F6 | 	mov	COUNT_, #8
1dbb8     A8 00 A0 FD | 	call	#pushregs_
1dbbc     0B 1F 02 F6 | 	mov	local01, arg03
1dbc0     FF FF 7F FF 
1dbc4     FE 1F 06 FD | 	qmul	local01, ##-2
1dbc8     09 21 02 F6 | 	mov	local02, arg01
1dbcc     0A 23 02 F6 | 	mov	local03, arg02
1dbd0     0C 25 02 F6 | 	mov	local04, arg04
1dbd4                 | ' 
1dbd4                 | ' d:=5-4*r
1dbd4     0F 19 02 F6 | 	mov	arg04, local01
1dbd8     02 18 66 F0 | 	shl	arg04, #2
1dbdc     05 26 06 F6 | 	mov	local05, #5
1dbe0     0C 27 82 F1 | 	sub	local05, arg04
1dbe4                 | ' x:=0
1dbe4     00 28 06 F6 | 	mov	local06, #0
1dbe8                 | ' y:=r
1dbe8                 | ' da:=(-2*r+5)*4
1dbe8                 | ' db:=3*4
1dbe8     0C 2A 06 F6 | 	mov	local07, #12
1dbec                 | ' repeat while (x<=y) 
1dbec     18 2C 62 FD | 	getqx	local08
1dbf0     05 2C 06 F1 | 	add	local08, #5
1dbf4     02 2C 66 F0 | 	shl	local08, #2
1dbf8                 | LR__2330
1dbf8     0F 29 5A F2 | 	cmps	local06, local01 wcz
1dbfc     B4 00 90 1D |  if_a	jmp	#LR__2332
1dc00                 | '   fastline(x0-x,x0+x,y0-y,c)
1dc00     10 13 02 F6 | 	mov	arg01, local02
1dc04     14 13 82 F1 | 	sub	arg01, local06
1dc08     10 15 02 F6 | 	mov	arg02, local02
1dc0c     14 15 02 F1 | 	add	arg02, local06
1dc10     11 17 02 F6 | 	mov	arg03, local03
1dc14     0F 17 82 F1 | 	sub	arg03, local01
1dc18     12 19 02 F6 | 	mov	arg04, local04
1dc1c     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1dc20                 | '   fastline(x0-x,x0+x,y0+y,c)
1dc20     10 13 02 F6 | 	mov	arg01, local02
1dc24     14 13 82 F1 | 	sub	arg01, local06
1dc28     10 15 02 F6 | 	mov	arg02, local02
1dc2c     14 15 02 F1 | 	add	arg02, local06
1dc30     11 17 02 F6 | 	mov	arg03, local03
1dc34     0F 17 02 F1 | 	add	arg03, local01
1dc38     12 19 02 F6 | 	mov	arg04, local04
1dc3c     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1dc40                 | '   fastline(x0-y,x0+y,y0-x,c)
1dc40     10 13 02 F6 | 	mov	arg01, local02
1dc44     0F 13 82 F1 | 	sub	arg01, local01
1dc48     10 15 02 F6 | 	mov	arg02, local02
1dc4c     0F 15 02 F1 | 	add	arg02, local01
1dc50     11 17 02 F6 | 	mov	arg03, local03
1dc54     14 17 82 F1 | 	sub	arg03, local06
1dc58     12 19 02 F6 | 	mov	arg04, local04
1dc5c     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1dc60                 | '   fastline(x0-y,x0+y,y0+x,c)
1dc60     10 13 02 F6 | 	mov	arg01, local02
1dc64     0F 13 82 F1 | 	sub	arg01, local01
1dc68     10 15 02 F6 | 	mov	arg02, local02
1dc6c     0F 15 02 F1 | 	add	arg02, local01
1dc70     11 17 02 F6 | 	mov	arg03, local03
1dc74     14 17 02 F1 | 	add	arg03, local06
1dc78     12 19 02 F6 | 	mov	arg04, local04
1dc7c     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
1dc80                 | '   if d>0 
1dc80     01 26 56 F2 | 	cmps	local05, #1 wc
1dc84     18 00 90 CD |  if_b	jmp	#LR__2331
1dc88                 | '     d+=da
1dc88     16 27 02 F1 | 	add	local05, local08
1dc8c                 | '     y-=1
1dc8c     01 1E 86 F1 | 	sub	local01, #1
1dc90                 | '     x+=1
1dc90     01 28 06 F1 | 	add	local06, #1
1dc94                 | '     da+=4*4
1dc94     10 2C 06 F1 | 	add	local08, #16
1dc98                 | '     db+=2*4
1dc98     08 2A 06 F1 | 	add	local07, #8
1dc9c     58 FF 9F FD | 	jmp	#LR__2330
1dca0                 | LR__2331
1dca0                 | '   else
1dca0                 | '     d+=db
1dca0     15 27 02 F1 | 	add	local05, local07
1dca4                 | '     x+=1
1dca4     01 28 06 F1 | 	add	local06, #1
1dca8                 | '     da+=2*4
1dca8     08 2C 06 F1 | 	add	local08, #8
1dcac                 | '     db+=2*4
1dcac     08 2A 06 F1 | 	add	local07, #8
1dcb0     44 FF 9F FD | 	jmp	#LR__2330
1dcb4                 | LR__2332
1dcb4     A7 F0 03 F6 | 	mov	ptra, fp
1dcb8     B2 00 A0 FD | 	call	#popregs_
1dcbc                 | _hg010b_spin2_fcircle_ret
1dcbc     2D 00 64 FD | 	ret
1dcc0                 | 
1dcc0                 | '  
1dcc0                 | ' '-- A circle ------------------------------------------------------------ 
1dcc0                 | '  
1dcc0                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
1dcc0                 | _hg010b_spin2_circle
1dcc0     08 4A 05 F6 | 	mov	COUNT_, #8
1dcc4     A8 00 A0 FD | 	call	#pushregs_
1dcc8     0B 1F 02 F6 | 	mov	local01, arg03
1dccc     FF FF 7F FF 
1dcd0     FE 1F 06 FD | 	qmul	local01, ##-2
1dcd4     09 21 02 F6 | 	mov	local02, arg01
1dcd8     0A 23 02 F6 | 	mov	local03, arg02
1dcdc     0C 25 02 F6 | 	mov	local04, arg04
1dce0                 | ' 
1dce0                 | '  
1dce0                 | ' d:=5-4*r
1dce0     0F 19 02 F6 | 	mov	arg04, local01
1dce4     02 18 66 F0 | 	shl	arg04, #2
1dce8     05 26 06 F6 | 	mov	local05, #5
1dcec     0C 27 82 F1 | 	sub	local05, arg04
1dcf0                 | ' x:=0
1dcf0     00 28 06 F6 | 	mov	local06, #0
1dcf4                 | ' y:=r
1dcf4                 | ' da:=(-2*r+5)*4
1dcf4                 | ' db:=3*4
1dcf4     0C 2A 06 F6 | 	mov	local07, #12
1dcf8                 | ' repeat while (x<=y) 
1dcf8     18 2C 62 FD | 	getqx	local08
1dcfc     05 2C 06 F1 | 	add	local08, #5
1dd00     02 2C 66 F0 | 	shl	local08, #2
1dd04                 | LR__2340
1dd04     0F 29 5A F2 | 	cmps	local06, local01 wcz
1dd08     F4 00 90 1D |  if_a	jmp	#LR__2342
1dd0c                 | '   putpixel(x0-x,y0-y,c)
1dd0c     10 13 02 F6 | 	mov	arg01, local02
1dd10     14 13 82 F1 | 	sub	arg01, local06
1dd14     11 15 02 F6 | 	mov	arg02, local03
1dd18     0F 15 82 F1 | 	sub	arg02, local01
1dd1c     12 17 02 F6 | 	mov	arg03, local04
1dd20     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1dd24                 | '   putpixel(x0-x,y0+y,c)
1dd24     10 13 02 F6 | 	mov	arg01, local02
1dd28     14 13 82 F1 | 	sub	arg01, local06
1dd2c     11 15 02 F6 | 	mov	arg02, local03
1dd30     0F 15 02 F1 | 	add	arg02, local01
1dd34     12 17 02 F6 | 	mov	arg03, local04
1dd38     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1dd3c                 | '   putpixel(x0+x,y0-y,c)
1dd3c     10 13 02 F6 | 	mov	arg01, local02
1dd40     14 13 02 F1 | 	add	arg01, local06
1dd44     11 15 02 F6 | 	mov	arg02, local03
1dd48     0F 15 82 F1 | 	sub	arg02, local01
1dd4c     12 17 02 F6 | 	mov	arg03, local04
1dd50     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1dd54                 | '   putpixel(x0+x,y0+y,c)
1dd54     10 13 02 F6 | 	mov	arg01, local02
1dd58     14 13 02 F1 | 	add	arg01, local06
1dd5c     11 15 02 F6 | 	mov	arg02, local03
1dd60     0F 15 02 F1 | 	add	arg02, local01
1dd64     12 17 02 F6 | 	mov	arg03, local04
1dd68     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1dd6c                 | '   putpixel(x0-y,y0-x,c)
1dd6c     10 13 02 F6 | 	mov	arg01, local02
1dd70     0F 13 82 F1 | 	sub	arg01, local01
1dd74     11 15 02 F6 | 	mov	arg02, local03
1dd78     14 15 82 F1 | 	sub	arg02, local06
1dd7c     12 17 02 F6 | 	mov	arg03, local04
1dd80     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1dd84                 | '   putpixel(x0-y,y0+x,c)
1dd84     10 13 02 F6 | 	mov	arg01, local02
1dd88     0F 13 82 F1 | 	sub	arg01, local01
1dd8c     11 15 02 F6 | 	mov	arg02, local03
1dd90     14 15 02 F1 | 	add	arg02, local06
1dd94     12 17 02 F6 | 	mov	arg03, local04
1dd98     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1dd9c                 | '   putpixel(x0+y,y0-x,c)
1dd9c     10 13 02 F6 | 	mov	arg01, local02
1dda0     0F 13 02 F1 | 	add	arg01, local01
1dda4     11 15 02 F6 | 	mov	arg02, local03
1dda8     14 15 82 F1 | 	sub	arg02, local06
1ddac     12 17 02 F6 | 	mov	arg03, local04
1ddb0     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1ddb4                 | '   putpixel(x0+y,y0+x,c)
1ddb4     10 13 02 F6 | 	mov	arg01, local02
1ddb8     0F 13 02 F1 | 	add	arg01, local01
1ddbc     11 15 02 F6 | 	mov	arg02, local03
1ddc0     14 15 02 F1 | 	add	arg02, local06
1ddc4     12 17 02 F6 | 	mov	arg03, local04
1ddc8     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1ddcc                 | '   if d>0 
1ddcc     01 26 56 F2 | 	cmps	local05, #1 wc
1ddd0     18 00 90 CD |  if_b	jmp	#LR__2341
1ddd4                 | '     d+=da
1ddd4     16 27 02 F1 | 	add	local05, local08
1ddd8                 | '     y-=1
1ddd8     01 1E 86 F1 | 	sub	local01, #1
1dddc                 | '     x+=1
1dddc     01 28 06 F1 | 	add	local06, #1
1dde0                 | '     da+=4*4
1dde0     10 2C 06 F1 | 	add	local08, #16
1dde4                 | '     db+=2*4
1dde4     08 2A 06 F1 | 	add	local07, #8
1dde8     18 FF 9F FD | 	jmp	#LR__2340
1ddec                 | LR__2341
1ddec                 | '   else
1ddec                 | '     d+=db
1ddec     15 27 02 F1 | 	add	local05, local07
1ddf0                 | '     x+=1
1ddf0     01 28 06 F1 | 	add	local06, #1
1ddf4                 | '     da+=2*4
1ddf4     08 2C 06 F1 | 	add	local08, #8
1ddf8                 | '     db+=2*4
1ddf8     08 2A 06 F1 | 	add	local07, #8
1ddfc     04 FF 9F FD | 	jmp	#LR__2340
1de00                 | LR__2342
1de00     A7 F0 03 F6 | 	mov	ptra, fp
1de04     B2 00 A0 FD | 	call	#popregs_
1de08                 | _hg010b_spin2_circle_ret
1de08     2D 00 64 FD | 	ret
1de0c                 | 
1de0c                 | '     
1de0c                 | ' '-- A frame (an empty rectangle) ---------------------------------------
1de0c                 | ' 
1de0c                 | ' pub frame(x1,y1,x2,y2,c)
1de0c                 | _hg010b_spin2_frame
1de0c     05 4A 05 F6 | 	mov	COUNT_, #5
1de10     A8 00 A0 FD | 	call	#pushregs_
1de14     09 1F 02 F6 | 	mov	local01, arg01
1de18     0A 21 02 F6 | 	mov	local02, arg02
1de1c     0B 23 02 F6 | 	mov	local03, arg03
1de20     0C 25 02 F6 | 	mov	local04, arg04
1de24     0D 27 02 F6 | 	mov	local05, arg05
1de28                 | ' 
1de28                 | ' fastline(x1,x2,y1,c)
1de28     0F 13 02 F6 | 	mov	arg01, local01
1de2c     11 15 02 F6 | 	mov	arg02, local03
1de30     10 17 02 F6 | 	mov	arg03, local02
1de34     13 19 02 F6 | 	mov	arg04, local05
1de38     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
1de3c                 | ' fastline(x1,x2,y2,c)
1de3c     0F 13 02 F6 | 	mov	arg01, local01
1de40     11 15 02 F6 | 	mov	arg02, local03
1de44     12 17 02 F6 | 	mov	arg03, local04
1de48     13 19 02 F6 | 	mov	arg04, local05
1de4c     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
1de50                 | ' line(x1,y1,x1,y2,c)
1de50     0F 13 02 F6 | 	mov	arg01, local01
1de54     10 15 02 F6 | 	mov	arg02, local02
1de58     0F 17 02 F6 | 	mov	arg03, local01
1de5c     12 19 02 F6 | 	mov	arg04, local04
1de60     13 1B 02 F6 | 	mov	arg05, local05
1de64                 | ' draw(x1,y1,x2,y2,c)
1de64     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
1de68                 | ' line(x2,y1,x2,y2,c)
1de68     11 13 02 F6 | 	mov	arg01, local03
1de6c     10 15 02 F6 | 	mov	arg02, local02
1de70     11 17 02 F6 | 	mov	arg03, local03
1de74     12 19 02 F6 | 	mov	arg04, local04
1de78     13 1B 02 F6 | 	mov	arg05, local05
1de7c                 | ' draw(x1,y1,x2,y2,c)
1de7c     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
1de80     A7 F0 03 F6 | 	mov	ptra, fp
1de84     B2 00 A0 FD | 	call	#popregs_
1de88                 | _hg010b_spin2_frame_ret
1de88     2D 00 64 FD | 	ret
1de8c                 | 
1de8c                 | ' 
1de8c                 | ' '-- A box (a filled rectangle) ----------------------------------------
1de8c                 | ' 
1de8c                 | ' pub box(x1,y1,x2,y2,c) |yy
1de8c                 | _hg010b_spin2_box
1de8c     06 4A 05 F6 | 	mov	COUNT_, #6
1de90     A8 00 A0 FD | 	call	#pushregs_
1de94     09 1F 02 F6 | 	mov	local01, arg01
1de98     0A 21 02 F6 | 	mov	local02, arg02
1de9c     0B 23 02 F6 | 	mov	local03, arg03
1dea0     0C 25 02 F6 | 	mov	local04, arg04
1dea4     0D 27 02 F6 | 	mov	local05, arg05
1dea8                 | ' 
1dea8                 | ' repeat yy from y1 to y2
1dea8     10 25 52 F2 | 	cmps	local04, local02 wc
1deac     01 28 86 F6 | 	negc	local06, #1
1deb0     14 25 02 F1 | 	add	local04, local06
1deb4                 | LR__2350
1deb4                 | '   fastline(x1,x2,yy,c)
1deb4     0F 13 02 F6 | 	mov	arg01, local01
1deb8     11 15 02 F6 | 	mov	arg02, local03
1debc     13 19 02 F6 | 	mov	arg04, local05
1dec0     10 17 02 F6 | 	mov	arg03, local02
1dec4     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
1dec8     14 21 02 F1 | 	add	local02, local06
1decc     12 21 0A F2 | 	cmp	local02, local04 wz
1ded0     E0 FF 9F 5D |  if_ne	jmp	#LR__2350
1ded4     A7 F0 03 F6 | 	mov	ptra, fp
1ded8     B2 00 A0 FD | 	call	#popregs_
1dedc                 | _hg010b_spin2_box_ret
1dedc     2D 00 64 FD | 	ret
1dee0                 | 
1dee0                 | '       
1dee0                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
1dee0                 | _hg010b_spin2_putcharxycgf
1dee0                 | ' 
1dee0                 | '  
1dee0                 | ' repeat yy from 0 to 15
1dee0     00 00 06 F6 | 	mov	_var01, #0
1dee4     97 8C 48 FB | 	callpa	#(@LR__2362-@LR__2360)>>2,fcache_load_ptr_
1dee8                 | LR__2360
1dee8                 | ' 
1dee8                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
1dee8     95 E4 05 F1 | 	add	objptr, #149
1deec     F2 02 02 FB | 	rdlong	_var02, objptr
1def0     0A 02 66 F0 | 	shl	_var02, #10
1def4     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
1def8     01 05 02 F1 | 	add	_var03, _var02
1defc     0B 03 02 F6 | 	mov	_var02, arg03
1df00     04 02 66 F0 | 	shl	_var02, #4
1df04     01 05 02 F1 | 	add	_var03, _var02
1df08     00 05 02 F1 | 	add	_var03, _var01
1df0c     02 05 C2 FA | 	rdbyte	_var03, _var03
1df10                 | '   asm
1df10     00 04 0E F4 | 	testb	_var03, #0 wz
1df14     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
1df18     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
1df1c     01 04 0E F4 | 	testb	_var03, #1 wz
1df20     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
1df24     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
1df28     02 04 0E F4 | 	testb	_var03, #2 wz
1df2c     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
1df30     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
1df34     03 04 0E F4 | 	testb	_var03, #3 wz
1df38     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
1df3c     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
1df40     04 04 0E F4 | 	testb	_var03, #4 wz
1df44     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
1df48     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
1df4c     05 04 0E F4 | 	testb	_var03, #5 wz
1df50     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
1df54     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
1df58     06 04 0E F4 | 	testb	_var03, #6 wz
1df5c     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
1df60     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
1df64     07 04 0E F4 | 	testb	_var03, #7 wz
1df68     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
1df6c     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
1df70                 | '   
1df70                 | '   ccc[0]:=c1
1df70     99 E5 05 F1 | 	add	objptr, #409
1df74     F2 06 62 FC | 	wrlong	_var04, objptr
1df78                 | '   ccc[1]:=c2 
1df78     04 E4 05 F1 | 	add	objptr, #4
1df7c     F2 08 62 FC | 	wrlong	_var05, objptr
1df80                 | '   long[mailbox0][2]:=8
1df80     49 E4 85 F1 | 	sub	objptr, #73
1df84     F2 04 02 FB | 	rdlong	_var03, objptr
1df88     08 04 06 F1 | 	add	_var03, #8
1df8c     02 11 68 FC | 	wrlong	#8, _var03
1df90                 | '   long[mailbox0][1]:=@ccc
1df90     45 E4 05 F1 | 	add	objptr, #69
1df94     F2 04 02 F6 | 	mov	_var03, objptr
1df98     45 E4 85 F1 | 	sub	objptr, #69
1df9c     F2 02 02 FB | 	rdlong	_var02, objptr
1dfa0     04 02 06 F1 | 	add	_var02, #4
1dfa4     01 05 62 FC | 	wrlong	_var03, _var02
1dfa8                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
1dfa8     0C E5 85 F1 | 	sub	objptr, #268
1dfac     F2 04 02 FB | 	rdlong	_var03, objptr
1dfb0     0A 03 02 F6 | 	mov	_var02, arg02
1dfb4     00 03 02 F1 | 	add	_var02, _var01
1dfb8     0A 02 66 F0 | 	shl	_var02, #10
1dfbc     09 0B 02 F6 | 	mov	_var06, arg01
1dfc0     02 0A 66 F0 | 	shl	_var06, #2
1dfc4     05 03 02 F1 | 	add	_var02, _var06
1dfc8     01 05 02 F1 | 	add	_var03, _var02
1dfcc     00 00 78 FF 
1dfd0     00 04 06 F1 | 	add	_var03, ##-268435456
1dfd4     0C E5 05 F1 | 	add	objptr, #268
1dfd8     F2 0A 02 FB | 	rdlong	_var06, objptr
1dfdc     05 05 62 FC | 	wrlong	_var03, _var06
1dfe0                 | '   repeat
1dfe0                 | LR__2361
1dfe0     F2 04 02 FB | 	rdlong	_var03, objptr
1dfe4     02 03 02 FB | 	rdlong	_var02, _var03
1dfe8     00 02 56 F2 | 	cmps	_var02, #0 wc
1dfec     F0 FF 9F CD |  if_b	jmp	#LR__2361
1dff0     E9 E5 85 F1 | 	sub	objptr, #489
1dff4     01 00 06 F1 | 	add	_var01, #1
1dff8     10 00 56 F2 | 	cmps	_var01, #16 wc
1dffc     E8 FE 9F CD |  if_b	jmp	#LR__2360
1e000                 | LR__2362
1e000                 | _hg010b_spin2_putcharxycgf_ret
1e000     2D 00 64 FD | 	ret
1e004                 | 
1e004                 | ' 
1e004                 | ' 
1e004                 | ' '**********************************************************************r***
1e004                 | ' '                                                                        *
1e004                 | ' ' Font related functions                                                 *
1e004                 | ' '                                                                        *
1e004                 | ' '*************************************************************************
1e004                 | ' 
1e004                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
1e004                 | ' 
1e004                 | ' pub setfontfamily(afontnum)
1e004                 | _hg010b_spin2_setfontfamily
1e004                 | ' 
1e004                 | ' font_family:=afontnum
1e004     95 E4 05 F1 | 	add	objptr, #149
1e008     F2 12 62 FC | 	wrlong	arg01, objptr
1e00c     95 E4 85 F1 | 	sub	objptr, #149
1e010                 | ' 'if afontnum==8
1e010                 | ' '  font_ptr:=@amiga_font
1e010                 | ' 
1e010                 | ' if afontnum==4
1e010     04 12 0E F2 | 	cmp	arg01, #4 wz
1e014                 | '   font_ptr:=@st_font
1e014     08 00 00 AF 
1e018     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
1e01c     08 E4 05 A1 |  if_e	add	objptr, #8
1e020     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1e024     08 E4 85 A1 |  if_e	sub	objptr, #8
1e028     08 00 00 AF 
1e02c     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
1e030                 | ' if afontnum==0
1e030     00 12 0E F2 | 	cmp	arg01, #0 wz
1e034                 | '   font_ptr:=@vga_font
1e034     08 E4 05 A1 |  if_e	add	objptr, #8
1e038     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1e03c     08 E4 85 A1 |  if_e	sub	objptr, #8
1e040                 | _hg010b_spin2_setfontfamily_ret
1e040     2D 00 64 FD | 	ret
1e044                 | 
1e044                 | ' 
1e044                 | ' '*************************************************************************
1e044                 | ' '                                                                        *
1e044                 | ' '  Cursor functions                                                      *
1e044                 | ' '                                                                        *
1e044                 | ' '*************************************************************************
1e044                 | ' 
1e044                 | ' 
1e044                 | ' pub setcursorpos(x,y)
1e044                 | _hg010b_spin2_setcursorpos
1e044                 | ' 
1e044                 | ' ''---------- Set the (x,y) position of cursor
1e044                 | ' 
1e044                 | ' cursor_x:=x
1e044     3C E4 05 F1 | 	add	objptr, #60
1e048     F2 12 52 FC | 	wrword	arg01, objptr
1e04c                 | ' cursor_y:=y
1e04c     02 E4 05 F1 | 	add	objptr, #2
1e050     F2 14 42 FC | 	wrbyte	arg02, objptr
1e054                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1e054     02 E4 85 F1 | 	sub	objptr, #2
1e058     F2 14 E2 FA | 	rdword	arg02, objptr
1e05c     02 14 66 F0 | 	shl	arg02, #2
1e060     02 E4 05 F1 | 	add	objptr, #2
1e064     F2 16 C2 FA | 	rdbyte	arg03, objptr
1e068     3E E4 85 F1 | 	sub	objptr, #62
1e06c     04 16 66 F0 | 	shl	arg03, #4
1e070     04 16 06 F1 | 	add	arg03, #4
1e074     11 12 06 F6 | 	mov	arg01, #17
1e078     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1e07c                 | _hg010b_spin2_setcursorpos_ret
1e07c     2D 00 64 FD | 	ret
1e080                 | 
1e080                 | ' 
1e080                 | ' pub setcursorx(x)
1e080                 | _hg010b_spin2_setcursorx
1e080                 | ' cursor_x:=x
1e080     3C E4 05 F1 | 	add	objptr, #60
1e084     F2 12 52 FC | 	wrword	arg01, objptr
1e088                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1e088     F2 14 E2 FA | 	rdword	arg02, objptr
1e08c     02 14 66 F0 | 	shl	arg02, #2
1e090     02 E4 05 F1 | 	add	objptr, #2
1e094     F2 16 C2 FA | 	rdbyte	arg03, objptr
1e098     3E E4 85 F1 | 	sub	objptr, #62
1e09c     04 16 66 F0 | 	shl	arg03, #4
1e0a0     04 16 06 F1 | 	add	arg03, #4
1e0a4     11 12 06 F6 | 	mov	arg01, #17
1e0a8     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1e0ac                 | _hg010b_spin2_setcursorx_ret
1e0ac     2D 00 64 FD | 	ret
1e0b0                 | 
1e0b0                 | ' 
1e0b0                 | ' pub setcursory(y) 
1e0b0                 | _hg010b_spin2_setcursory
1e0b0                 | ' cursor_y:=y
1e0b0     3E E4 05 F1 | 	add	objptr, #62
1e0b4     F2 12 42 FC | 	wrbyte	arg01, objptr
1e0b8                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
1e0b8     02 E4 85 F1 | 	sub	objptr, #2
1e0bc     F2 14 E2 FA | 	rdword	arg02, objptr
1e0c0     02 14 66 F0 | 	shl	arg02, #2
1e0c4     02 E4 05 F1 | 	add	objptr, #2
1e0c8     F2 16 C2 FA | 	rdbyte	arg03, objptr
1e0cc     3E E4 85 F1 | 	sub	objptr, #62
1e0d0     04 16 66 F0 | 	shl	arg03, #4
1e0d4     04 16 06 F1 | 	add	arg03, #4
1e0d8     11 12 06 F6 | 	mov	arg01, #17
1e0dc     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
1e0e0                 | _hg010b_spin2_setcursory_ret
1e0e0     2D 00 64 FD | 	ret
1e0e4                 | 
1e0e4                 | ' 
1e0e4                 | ' '*************************************************************************
1e0e4                 | ' '                                                                        *
1e0e4                 | ' '  VBlank functions                                                      *
1e0e4                 | ' '                                                                        *
1e0e4                 | ' '*************************************************************************
1e0e4                 | ' 
1e0e4                 | ' pub waitvbl(amount) | i
1e0e4                 | _hg010b_spin2_waitvbl
1e0e4     03 4A 05 F6 | 	mov	COUNT_, #3
1e0e8     A8 00 A0 FD | 	call	#pushregs_
1e0ec     09 1F 02 F6 | 	mov	local01, arg01
1e0f0                 | ' 
1e0f0                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
1e0f0                 | ' 
1e0f0                 | ' repeat i from 1 to amount
1e0f0     01 20 06 F6 | 	mov	local02, #1
1e0f4     01 1E 56 F2 | 	cmps	local01, #1 wc
1e0f8     01 22 86 F6 | 	negc	local03, #1
1e0fc     11 1F 02 F1 | 	add	local01, local03
1e100                 | LR__2370
1e100                 | '   repeat until vblank==0
1e100                 | LR__2371
1e100     49 E4 05 F1 | 	add	objptr, #73
1e104     F2 12 0A FB | 	rdlong	arg01, objptr wz
1e108     49 E4 85 F1 | 	sub	objptr, #73
1e10c     0C 00 90 AD |  if_e	jmp	#LR__2372
1e110                 | '     waitus(100)
1e110     64 12 06 F6 | 	mov	arg01, #100
1e114     44 1A B0 FD | 	call	#__system___waitus
1e118     E4 FF 9F FD | 	jmp	#LR__2371
1e11c                 | LR__2372
1e11c                 | '   repeat until vblank==1
1e11c                 | LR__2373
1e11c     49 E4 05 F1 | 	add	objptr, #73
1e120     F2 12 02 FB | 	rdlong	arg01, objptr
1e124     49 E4 85 F1 | 	sub	objptr, #73
1e128     01 12 0E F2 | 	cmp	arg01, #1 wz
1e12c     0C 00 90 AD |  if_e	jmp	#LR__2374
1e130                 | '     waitus(100)
1e130     64 12 06 F6 | 	mov	arg01, #100
1e134     24 1A B0 FD | 	call	#__system___waitus
1e138     E0 FF 9F FD | 	jmp	#LR__2373
1e13c                 | LR__2374
1e13c     11 21 02 F1 | 	add	local02, local03
1e140     0F 21 0A F2 | 	cmp	local02, local01 wz
1e144     B8 FF 9F 5D |  if_ne	jmp	#LR__2370
1e148     A7 F0 03 F6 | 	mov	ptra, fp
1e14c     B2 00 A0 FD | 	call	#popregs_
1e150                 | _hg010b_spin2_waitvbl_ret
1e150     2D 00 64 FD | 	ret
1e154                 | 
1e154                 | ' 
1e154                 | ' 
1e154                 | ' pub cls(fc,bc)   :c,i
1e154                 | _hg010b_spin2_cls
1e154     02 4A 05 F6 | 	mov	COUNT_, #2
1e158     A8 00 A0 FD | 	call	#pushregs_
1e15c     09 1F 02 F6 | 	mov	local01, arg01
1e160     0A 21 02 F6 | 	mov	local02, arg02
1e164                 | ' 
1e164                 | ' c:=bc
1e164                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
1e164     DD E4 05 F1 | 	add	objptr, #221
1e168     F2 12 02 FB | 	rdlong	arg01, objptr
1e16c     A5 E4 85 F1 | 	sub	objptr, #165
1e170     F2 16 02 FB | 	rdlong	arg03, objptr
1e174     02 16 66 F0 | 	shl	arg03, #2
1e178     10 15 02 F6 | 	mov	arg02, local02
1e17c     00 18 06 F6 | 	mov	arg04, #0
1e180     01 1A 06 F6 | 	mov	arg05, #1
1e184     0B 00 00 FF 
1e188     94 E4 05 F1 | 	add	objptr, ##5780
1e18c     64 0B B0 FD | 	call	#_psram_spin2_fill
1e190                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1e190     0B 00 00 FF 
1e194     C8 E4 85 F1 | 	sub	objptr, ##5832
1e198     F2 12 02 FB | 	rdlong	arg01, objptr
1e19c     04 E4 85 F1 | 	sub	objptr, #4
1e1a0     F2 16 02 FB | 	rdlong	arg03, objptr
1e1a4     09 17 82 F1 | 	sub	arg03, arg01
1e1a8     20 14 06 F6 | 	mov	arg02, #32
1e1ac     00 18 06 F6 | 	mov	arg04, #0
1e1b0     01 1A 06 F6 | 	mov	arg05, #1
1e1b4     0B 00 00 FF 
1e1b8     CC E4 05 F1 | 	add	objptr, ##5836
1e1bc     34 0B B0 FD | 	call	#_psram_spin2_fill
1e1c0                 | ' setwritecolors(fc,bc)
1e1c0                 | ' 
1e1c0                 | ' write_color:=ff
1e1c0     0B 00 00 FF 
1e1c4     8B E4 85 F1 | 	sub	objptr, ##5771
1e1c8     F2 1E 62 FC | 	wrlong	local01, objptr
1e1cc                 | ' write_background:=bb
1e1cc     04 E4 05 F1 | 	add	objptr, #4
1e1d0     F2 20 62 FC | 	wrlong	local02, objptr
1e1d4                 | ' cursor_x:=0
1e1d4     09 E4 85 F1 | 	sub	objptr, #9
1e1d8     F2 00 58 FC | 	wrword	#0, objptr
1e1dc                 | ' cursor_y:=0
1e1dc     02 E4 05 F1 | 	add	objptr, #2
1e1e0     F2 00 48 FC | 	wrbyte	#0, objptr
1e1e4                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1e1e4     02 E4 85 F1 | 	sub	objptr, #2
1e1e8     F2 14 E2 FA | 	rdword	arg02, objptr
1e1ec     02 14 66 F0 | 	shl	arg02, #2
1e1f0     02 E4 05 F1 | 	add	objptr, #2
1e1f4     F2 16 C2 FA | 	rdbyte	arg03, objptr
1e1f8     3E E4 85 F1 | 	sub	objptr, #62
1e1fc     04 16 66 F0 | 	shl	arg03, #4
1e200     04 16 06 F1 | 	add	arg03, #4
1e204     11 12 06 F6 | 	mov	arg01, #17
1e208     C0 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
1e20c                 | ' setcursorcolor(fc)
1e20c     0F 13 02 F6 | 	mov	arg01, local01
1e210     AC ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
1e214     10 FB 01 F6 | 	mov	result1, local02
1e218     00 FC 05 F6 | 	mov	result2, #0
1e21c     A7 F0 03 F6 | 	mov	ptra, fp
1e220     B2 00 A0 FD | 	call	#popregs_
1e224                 | _hg010b_spin2_cls_ret
1e224     2D 00 64 FD | 	ret
1e228                 | 
1e228                 | ' 
1e228                 | ' ''---------- Output a char at the cursor position, move the cursor 
1e228                 | ' 
1e228                 | ' pub putchar(achar) | c,x,y,l,newcpl
1e228                 | _hg010b_spin2_putchar
1e228     02 4A 05 F6 | 	mov	COUNT_, #2
1e22c     A8 00 A0 FD | 	call	#pushregs_
1e230     09 1F 02 F6 | 	mov	local01, arg01
1e234                 | ' 
1e234                 | ' if achar==10
1e234     0A 1E 0E F2 | 	cmp	local01, #10 wz
1e238                 | '   crlf()
1e238     A4 05 B0 AD |  if_e	call	#_hg010b_spin2_crlf
1e23c                 | ' if achar==9
1e23c     09 1E 0E F2 | 	cmp	local01, #9 wz
1e240     18 00 90 5D |  if_ne	jmp	#LR__2380
1e244                 | '   cursor_x:=(cursor_x& %11110000)+16
1e244     3C E4 05 F1 | 	add	objptr, #60
1e248     F2 16 E2 FA | 	rdword	arg03, objptr
1e24c     F0 16 06 F5 | 	and	arg03, #240
1e250     10 16 06 F1 | 	add	arg03, #16
1e254     F2 16 52 FC | 	wrword	arg03, objptr
1e258     3C E4 85 F1 | 	sub	objptr, #60
1e25c                 | LR__2380
1e25c                 | '   
1e25c                 | ' if (achar<>9) && (achar<>10) 
1e25c     09 1E 0E F2 | 	cmp	local01, #9 wz
1e260     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
1e264     A8 00 90 AD |  if_e	jmp	#LR__2381
1e268                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1e268     3C E4 05 F1 | 	add	objptr, #60
1e26c     F2 12 E2 FA | 	rdword	arg01, objptr
1e270     02 E4 05 F1 | 	add	objptr, #2
1e274     F2 14 C2 FA | 	rdbyte	arg02, objptr
1e278     04 14 66 F0 | 	shl	arg02, #4
1e27c     04 14 06 F1 | 	add	arg02, #4
1e280     03 E4 05 F1 | 	add	objptr, #3
1e284     F2 18 02 FB | 	rdlong	arg04, objptr
1e288     04 E4 05 F1 | 	add	objptr, #4
1e28c     F2 1A 02 FB | 	rdlong	arg05, objptr
1e290     45 E4 85 F1 | 	sub	objptr, #69
1e294     0F 17 02 F6 | 	mov	arg03, local01
1e298     44 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
1e29c     04 E4 05 F1 | 	add	objptr, #4
1e2a0     F2 12 02 FB | 	rdlong	arg01, objptr
1e2a4     10 00 00 FF 
1e2a8     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1e2ac     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1e2b0     3A E4 05 F1 | 	add	objptr, #58
1e2b4     F2 1A C2 FA | 	rdbyte	arg05, objptr
1e2b8     0D 17 02 FD | 	qmul	arg03, arg05
1e2bc                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1e2bc     10 00 00 FF 
1e2c0     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1e2c4     02 E4 85 F1 | 	sub	objptr, #2
1e2c8     F2 20 E2 FA | 	rdword	local02, objptr
1e2cc     01 20 46 F0 | 	shr	local02, #1
1e2d0     0F 15 02 F6 | 	mov	arg02, local01
1e2d4     01 16 06 F6 | 	mov	arg03, #1
1e2d8     00 18 06 F6 | 	mov	arg04, #0
1e2dc     01 1A 06 F6 | 	mov	arg05, #1
1e2e0     0B 00 00 FF 
1e2e4     90 E4 05 F1 | 	add	objptr, ##5776
1e2e8     18 1E 62 FD | 	getqx	local01
1e2ec     10 1F 02 F1 | 	add	local01, local02
1e2f0     0F 13 02 F1 | 	add	arg01, local01
1e2f4     FC 09 B0 FD | 	call	#_psram_spin2_fill
1e2f8                 | '   cursor_x+=2
1e2f8     0B 00 00 FF 
1e2fc     90 E4 85 F1 | 	sub	objptr, ##5776
1e300     F2 20 E2 FA | 	rdword	local02, objptr
1e304     02 20 06 F1 | 	add	local02, #2
1e308     F2 20 52 FC | 	wrword	local02, objptr
1e30c     3C E4 85 F1 | 	sub	objptr, #60
1e310                 | LR__2381
1e310                 | ' 
1e310                 | ' if cursor_x>=256
1e310     3C E4 05 F1 | 	add	objptr, #60
1e314     F2 20 E2 FA | 	rdword	local02, objptr
1e318     3C E4 85 F1 | 	sub	objptr, #60
1e31c     00 21 56 F2 | 	cmps	local02, #256 wc
1e320     64 00 90 CD |  if_b	jmp	#LR__2383
1e324                 | '   cursor_x:=0
1e324     3C E4 05 F1 | 	add	objptr, #60
1e328     F2 00 58 FC | 	wrword	#0, objptr
1e32c                 | '   cursor_y+=1
1e32c     02 E4 05 F1 | 	add	objptr, #2
1e330     F2 20 C2 FA | 	rdbyte	local02, objptr
1e334     01 20 06 F1 | 	add	local02, #1
1e338     F2 20 42 FC | 	wrbyte	local02, objptr
1e33c                 | '   if cursor_y>st_lines-1
1e33c     C3 E4 05 F1 | 	add	objptr, #195
1e340     F2 20 02 FB | 	rdlong	local02, objptr
1e344     01 20 86 F1 | 	sub	local02, #1
1e348     C3 E4 85 F1 | 	sub	objptr, #195
1e34c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1e350     3E E4 85 F1 | 	sub	objptr, #62
1e354     10 17 5A F2 | 	cmps	arg03, local02 wcz
1e358     2C 00 90 ED |  if_be	jmp	#LR__2382
1e35c                 | '     scrollup2()
1e35c     00 12 06 F6 | 	mov	arg01, #0
1e360     01 00 00 FF 
1e364     58 14 06 F6 | 	mov	arg02, ##600
1e368     10 16 06 F6 | 	mov	arg03, #16
1e36c     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
1e370                 | '     cursor_y:=st_lines-1
1e370     01 E5 05 F1 | 	add	objptr, #257
1e374     F2 20 02 FB | 	rdlong	local02, objptr
1e378     01 20 86 F1 | 	sub	local02, #1
1e37c     C3 E4 85 F1 | 	sub	objptr, #195
1e380     F2 20 42 FC | 	wrbyte	local02, objptr
1e384     3E E4 85 F1 | 	sub	objptr, #62
1e388                 | LR__2382
1e388                 | LR__2383
1e388                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1e388     3C E4 05 F1 | 	add	objptr, #60
1e38c     F2 14 E2 FA | 	rdword	arg02, objptr
1e390     02 14 66 F0 | 	shl	arg02, #2
1e394     02 E4 05 F1 | 	add	objptr, #2
1e398     F2 16 C2 FA | 	rdbyte	arg03, objptr
1e39c     3E E4 85 F1 | 	sub	objptr, #62
1e3a0     04 16 66 F0 | 	shl	arg03, #4
1e3a4     04 16 06 F1 | 	add	arg03, #4
1e3a8     11 12 06 F6 | 	mov	arg01, #17
1e3ac     1C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
1e3b0     A7 F0 03 F6 | 	mov	ptra, fp
1e3b4     B2 00 A0 FD | 	call	#popregs_
1e3b8                 | _hg010b_spin2_putchar_ret
1e3b8     2D 00 64 FD | 	ret
1e3bc                 | 
1e3bc                 | '     
1e3bc                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
1e3bc                 | ' 
1e3bc                 | ' pub putchar2(achar) | c,x,y,l,newcpl
1e3bc                 | _hg010b_spin2_putchar2
1e3bc     02 4A 05 F6 | 	mov	COUNT_, #2
1e3c0     A8 00 A0 FD | 	call	#pushregs_
1e3c4     09 1F 02 F6 | 	mov	local01, arg01
1e3c8                 | ' 
1e3c8                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1e3c8     3C E4 05 F1 | 	add	objptr, #60
1e3cc     F2 12 E2 FA | 	rdword	arg01, objptr
1e3d0     02 E4 05 F1 | 	add	objptr, #2
1e3d4     F2 14 C2 FA | 	rdbyte	arg02, objptr
1e3d8     04 14 66 F0 | 	shl	arg02, #4
1e3dc     04 14 06 F1 | 	add	arg02, #4
1e3e0     03 E4 05 F1 | 	add	objptr, #3
1e3e4     F2 18 02 FB | 	rdlong	arg04, objptr
1e3e8     04 E4 05 F1 | 	add	objptr, #4
1e3ec     F2 1A 02 FB | 	rdlong	arg05, objptr
1e3f0     45 E4 85 F1 | 	sub	objptr, #69
1e3f4     0F 17 02 F6 | 	mov	arg03, local01
1e3f8     E4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
1e3fc     04 E4 05 F1 | 	add	objptr, #4
1e400     F2 12 02 FB | 	rdlong	arg01, objptr
1e404     10 00 00 FF 
1e408     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1e40c     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1e410     3A E4 05 F1 | 	add	objptr, #58
1e414     F2 1A C2 FA | 	rdbyte	arg05, objptr
1e418     0D 17 02 FD | 	qmul	arg03, arg05
1e41c                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1e41c     10 00 00 FF 
1e420     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1e424     02 E4 85 F1 | 	sub	objptr, #2
1e428     F2 20 E2 FA | 	rdword	local02, objptr
1e42c     01 20 46 F0 | 	shr	local02, #1
1e430     0F 15 02 F6 | 	mov	arg02, local01
1e434     01 16 06 F6 | 	mov	arg03, #1
1e438     00 18 06 F6 | 	mov	arg04, #0
1e43c     01 1A 06 F6 | 	mov	arg05, #1
1e440     0B 00 00 FF 
1e444     90 E4 05 F1 | 	add	objptr, ##5776
1e448     18 1E 62 FD | 	getqx	local01
1e44c     10 1F 02 F1 | 	add	local01, local02
1e450     0F 13 02 F1 | 	add	arg01, local01
1e454     9C 08 B0 FD | 	call	#_psram_spin2_fill
1e458                 | ' 
1e458                 | ' cursor_x+=2
1e458     0B 00 00 FF 
1e45c     90 E4 85 F1 | 	sub	objptr, ##5776
1e460     F2 20 E2 FA | 	rdword	local02, objptr
1e464     02 20 06 F1 | 	add	local02, #2
1e468     F2 20 52 FC | 	wrword	local02, objptr
1e46c                 | ' if cursor_x>=256
1e46c     F2 20 E2 FA | 	rdword	local02, objptr
1e470     3C E4 85 F1 | 	sub	objptr, #60
1e474     00 21 56 F2 | 	cmps	local02, #256 wc
1e478     64 00 90 CD |  if_b	jmp	#LR__2391
1e47c                 | '   cursor_x:=0
1e47c     3C E4 05 F1 | 	add	objptr, #60
1e480     F2 00 58 FC | 	wrword	#0, objptr
1e484                 | '   cursor_y+=1
1e484     02 E4 05 F1 | 	add	objptr, #2
1e488     F2 20 C2 FA | 	rdbyte	local02, objptr
1e48c     01 20 06 F1 | 	add	local02, #1
1e490     F2 20 42 FC | 	wrbyte	local02, objptr
1e494                 | '   if cursor_y>st_lines-1
1e494     C3 E4 05 F1 | 	add	objptr, #195
1e498     F2 20 02 FB | 	rdlong	local02, objptr
1e49c     01 20 86 F1 | 	sub	local02, #1
1e4a0     C3 E4 85 F1 | 	sub	objptr, #195
1e4a4     F2 16 C2 FA | 	rdbyte	arg03, objptr
1e4a8     3E E4 85 F1 | 	sub	objptr, #62
1e4ac     10 17 5A F2 | 	cmps	arg03, local02 wcz
1e4b0     2C 00 90 ED |  if_be	jmp	#LR__2390
1e4b4                 | '     scrollup2()
1e4b4     00 12 06 F6 | 	mov	arg01, #0
1e4b8     01 00 00 FF 
1e4bc     58 14 06 F6 | 	mov	arg02, ##600
1e4c0     10 16 06 F6 | 	mov	arg03, #16
1e4c4     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
1e4c8                 | '     cursor_y:=st_lines-1
1e4c8     01 E5 05 F1 | 	add	objptr, #257
1e4cc     F2 20 02 FB | 	rdlong	local02, objptr
1e4d0     01 20 86 F1 | 	sub	local02, #1
1e4d4     C3 E4 85 F1 | 	sub	objptr, #195
1e4d8     F2 20 42 FC | 	wrbyte	local02, objptr
1e4dc     3E E4 85 F1 | 	sub	objptr, #62
1e4e0                 | LR__2390
1e4e0                 | LR__2391
1e4e0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
1e4e0     3C E4 05 F1 | 	add	objptr, #60
1e4e4     F2 14 E2 FA | 	rdword	arg02, objptr
1e4e8     02 14 66 F0 | 	shl	arg02, #2
1e4ec     02 E4 05 F1 | 	add	objptr, #2
1e4f0     F2 16 C2 FA | 	rdbyte	arg03, objptr
1e4f4     3E E4 85 F1 | 	sub	objptr, #62
1e4f8     04 16 66 F0 | 	shl	arg03, #4
1e4fc     04 16 06 F1 | 	add	arg03, #4
1e500     11 12 06 F6 | 	mov	arg01, #17
1e504     C4 EE BF FD | 	call	#_hg010b_spin2_setspritepos
1e508     A7 F0 03 F6 | 	mov	ptra, fp
1e50c     B2 00 A0 FD | 	call	#popregs_
1e510                 | _hg010b_spin2_putchar2_ret
1e510     2D 00 64 FD | 	ret
1e514                 | 
1e514                 | ' ''--------- Output a string at the cursor position, move the cursor  
1e514                 | ' 
1e514                 | ' pub write(text) | iii,c,ncx,ncy
1e514                 | _hg010b_spin2_write
1e514     04 4A 05 F6 | 	mov	COUNT_, #4
1e518     A8 00 A0 FD | 	call	#pushregs_
1e51c     09 1F 02 F6 | 	mov	local01, arg01
1e520                 | ' 
1e520                 | ' repeat iii from 0 to strsize(text)-1
1e520     00 20 06 F6 | 	mov	local02, #0
1e524     0F 13 02 F6 | 	mov	arg01, local01
1e528     09 23 02 F6 | 	mov	local03, arg01
1e52c     97 06 48 FB | 	callpa	#(@LR__2401-@LR__2400)>>2,fcache_load_ptr_
1e530                 | LR__2400
1e530     11 FB C9 FA | 	rdbyte	result1, local03 wz
1e534     01 22 06 51 |  if_ne	add	local03, #1
1e538     F4 FF 9F 5D |  if_ne	jmp	#LR__2400
1e53c                 | LR__2401
1e53c     09 23 82 F1 | 	sub	local03, arg01
1e540     01 22 86 F1 | 	sub	local03, #1
1e544     00 22 56 F2 | 	cmps	local03, #0 wc
1e548     01 24 86 F6 | 	negc	local04, #1
1e54c     12 23 02 F1 | 	add	local03, local04
1e550                 | LR__2402
1e550                 | '   putchar2(byte[text+iii])
1e550     0F 13 02 F6 | 	mov	arg01, local01
1e554     10 13 02 F1 | 	add	arg01, local02
1e558     09 13 C2 FA | 	rdbyte	arg01, arg01
1e55c     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
1e560     12 21 02 F1 | 	add	local02, local04
1e564     11 21 0A F2 | 	cmp	local02, local03 wz
1e568     E4 FF 9F 5D |  if_ne	jmp	#LR__2402
1e56c     A7 F0 03 F6 | 	mov	ptra, fp
1e570     B2 00 A0 FD | 	call	#popregs_
1e574                 | _hg010b_spin2_write_ret
1e574     2D 00 64 FD | 	ret
1e578                 | 
1e578                 | '    
1e578                 | ' ' a version for text scrolling in Basic shifted 4 lines down
1e578                 | ' 
1e578                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
1e578                 | _hg010b_spin2_scrollup2
1e578     03 4A 05 F6 | 	mov	COUNT_, #3
1e57c     A8 00 A0 FD | 	call	#pushregs_
1e580                 | ' 	
1e580                 | ' repeat i from 4 to 579 
1e580     04 1E 06 F6 | 	mov	local01, #4
1e584                 | LR__2410
1e584     F9 E4 05 F1 | 	add	objptr, #249
1e588     F2 1A 02 FB | 	rdlong	arg05, objptr
1e58c     1C E4 85 F1 | 	sub	objptr, #28
1e590     F2 14 02 FB | 	rdlong	arg02, objptr
1e594     0F 19 02 F6 | 	mov	arg04, local01
1e598     10 18 06 F1 | 	add	arg04, #16
1e59c     02 18 66 F0 | 	shl	arg04, #2
1e5a0     14 E4 05 F1 | 	add	objptr, #20
1e5a4     F2 16 02 FB | 	rdlong	arg03, objptr
1e5a8     0B 19 02 FD | 	qmul	arg04, arg03
1e5ac                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
1e5ac     F6 03 00 FF 
1e5b0     00 12 06 F6 | 	mov	arg01, ##519168
1e5b4     0D 13 82 F1 | 	sub	arg01, arg05
1e5b8     02 16 66 F0 | 	shl	arg03, #2
1e5bc     0A 00 00 FF 
1e5c0     DB E5 05 F1 | 	add	objptr, ##5595
1e5c4     18 1A 62 FD | 	getqx	arg05
1e5c8     0D 15 02 F1 | 	add	arg02, arg05
1e5cc     EC 05 B0 FD | 	call	#_psram_spin2_read1
1e5d0     0A 00 00 FF 
1e5d4     D3 E5 85 F1 | 	sub	objptr, ##5587
1e5d8     F2 1A 02 FB | 	rdlong	arg05, objptr
1e5dc     1C E4 85 F1 | 	sub	objptr, #28
1e5e0     F2 14 02 FB | 	rdlong	arg02, objptr
1e5e4     0F 19 02 F6 | 	mov	arg04, local01
1e5e8     02 18 66 F0 | 	shl	arg04, #2
1e5ec     14 E4 05 F1 | 	add	objptr, #20
1e5f0     F2 16 02 FB | 	rdlong	arg03, objptr
1e5f4     0B 19 02 FD | 	qmul	arg04, arg03
1e5f8                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
1e5f8     F6 03 00 FF 
1e5fc     00 12 06 F6 | 	mov	arg01, ##519168
1e600     0D 13 82 F1 | 	sub	arg01, arg05
1e604     02 16 66 F0 | 	shl	arg03, #2
1e608     0A 00 00 FF 
1e60c     DB E5 05 F1 | 	add	objptr, ##5595
1e610     18 1A 62 FD | 	getqx	arg05
1e614     0D 15 02 F1 | 	add	arg02, arg05
1e618     3C 06 B0 FD | 	call	#_psram_spin2_write
1e61c     0B 00 00 FF 
1e620     CC E4 85 F1 | 	sub	objptr, ##5836
1e624     01 1E 06 F1 | 	add	local01, #1
1e628     01 00 00 FF 
1e62c     44 1E 16 F2 | 	cmp	local01, ##580 wc
1e630     50 FF 9F CD |  if_b	jmp	#LR__2410
1e634                 | ' 
1e634                 | ' repeat i from 580 to 599
1e634     01 00 00 FF 
1e638     44 1E 06 F6 | 	mov	local01, ##580
1e63c                 | LR__2411
1e63c                 | '    fastline(0,1023,i,write_background)   
1e63c     45 E4 05 F1 | 	add	objptr, #69
1e640     F2 18 02 FB | 	rdlong	arg04, objptr
1e644     45 E4 85 F1 | 	sub	objptr, #69
1e648     00 12 06 F6 | 	mov	arg01, #0
1e64c     09 14 CE F9 | 	bmask	arg02, #9
1e650     0F 17 02 F6 | 	mov	arg03, local01
1e654     C0 EF BF FD | 	call	#_hg010b_spin2_fastline
1e658     01 1E 06 F1 | 	add	local01, #1
1e65c     01 00 00 FF 
1e660     58 1E 16 F2 | 	cmp	local01, ##600 wc
1e664     D4 FF 9F CD |  if_b	jmp	#LR__2411
1e668                 | ' repeat i from 0 to 3
1e668     00 1E 06 F6 | 	mov	local01, #0
1e66c                 | LR__2412
1e66c                 | '    fastline(0,1023,i,write_background)      
1e66c     45 E4 05 F1 | 	add	objptr, #69
1e670     F2 18 02 FB | 	rdlong	arg04, objptr
1e674     45 E4 85 F1 | 	sub	objptr, #69
1e678     00 12 06 F6 | 	mov	arg01, #0
1e67c     09 14 CE F9 | 	bmask	arg02, #9
1e680     0F 17 02 F6 | 	mov	arg03, local01
1e684     90 EF BF FD | 	call	#_hg010b_spin2_fastline
1e688     01 1E 06 F1 | 	add	local01, #1
1e68c     04 1E 56 F2 | 	cmps	local01, #4 wc
1e690     D8 FF 9F CD |  if_b	jmp	#LR__2412
1e694                 | ' 
1e694                 | ' repeat i from 0 to 35
1e694     00 1E 06 F6 | 	mov	local01, #0
1e698                 | LR__2413
1e698     0F 1B 02 F6 | 	mov	arg05, local01
1e69c     01 1A 06 F1 | 	add	arg05, #1
1e6a0     10 00 00 FF 
1e6a4     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1e6a8     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1e6ac     0B 1B 02 FD | 	qmul	arg05, arg03
1e6b0                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
1e6b0     F6 03 00 FF 
1e6b4     00 12 06 F6 | 	mov	arg01, ##519168
1e6b8     F9 E4 05 F1 | 	add	objptr, #249
1e6bc     F2 1A 02 FB | 	rdlong	arg05, objptr
1e6c0     0D 13 82 F1 | 	sub	arg01, arg05
1e6c4     F5 E4 85 F1 | 	sub	objptr, #245
1e6c8     F2 14 02 FB | 	rdlong	arg02, objptr
1e6cc     10 00 00 FF 
1e6d0     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1e6d4     0B 00 00 FF 
1e6d8     C8 E4 05 F1 | 	add	objptr, ##5832
1e6dc     18 1A 62 FD | 	getqx	arg05
1e6e0     0D 15 02 F1 | 	add	arg02, arg05
1e6e4     D4 04 B0 FD | 	call	#_psram_spin2_read1
1e6e8     10 00 00 FF 
1e6ec     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1e6f0     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1e6f4     0B 1F 02 FD | 	qmul	local01, arg03
1e6f8                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
1e6f8     F6 03 00 FF 
1e6fc     00 12 06 F6 | 	mov	arg01, ##519168
1e700     0A 00 00 FF 
1e704     D3 E5 85 F1 | 	sub	objptr, ##5587
1e708     F2 1A 02 FB | 	rdlong	arg05, objptr
1e70c     0D 13 82 F1 | 	sub	arg01, arg05
1e710     F5 E4 85 F1 | 	sub	objptr, #245
1e714     F2 14 02 FB | 	rdlong	arg02, objptr
1e718     10 00 00 FF 
1e71c     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1e720     0B 00 00 FF 
1e724     C8 E4 05 F1 | 	add	objptr, ##5832
1e728     18 1A 62 FD | 	getqx	arg05
1e72c     0D 15 02 F1 | 	add	arg02, arg05
1e730     24 05 B0 FD | 	call	#_psram_spin2_write
1e734     0B 00 00 FF 
1e738     CC E4 85 F1 | 	sub	objptr, ##5836
1e73c     01 1E 06 F1 | 	add	local01, #1
1e740     24 1E 56 F2 | 	cmps	local01, #36 wc
1e744     50 FF 9F CD |  if_b	jmp	#LR__2413
1e748                 | ' repeat i from 0 to timings[7]-1
1e748     00 1E 06 F6 | 	mov	local01, #0
1e74c     10 00 00 FF 
1e750     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1e754     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1e758     10 00 00 FF 
1e75c     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1e760     01 20 86 F1 | 	sub	local02, #1
1e764     00 20 56 F2 | 	cmps	local02, #0 wc
1e768     01 22 86 F6 | 	negc	local03, #1
1e76c     11 21 02 F1 | 	add	local02, local03
1e770                 | LR__2414
1e770                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
1e770     04 E4 05 F1 | 	add	objptr, #4
1e774     F2 12 02 FB | 	rdlong	arg01, objptr
1e778     10 00 00 FF 
1e77c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1e780     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1e784     10 00 00 FF 
1e788     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1e78c     0D 19 02 F6 | 	mov	arg04, arg05
1e790     03 18 66 F0 | 	shl	arg04, #3
1e794     0D 19 02 F1 | 	add	arg04, arg05
1e798     02 18 66 F0 | 	shl	arg04, #2
1e79c     0F 19 02 F1 | 	add	arg04, local01
1e7a0     0C 13 02 F1 | 	add	arg01, arg04
1e7a4     20 14 06 F6 | 	mov	arg02, #32
1e7a8     01 16 06 F6 | 	mov	arg03, #1
1e7ac     00 18 06 F6 | 	mov	arg04, #0
1e7b0     01 1A 06 F6 | 	mov	arg05, #1
1e7b4     0B 00 00 FF 
1e7b8     C8 E4 05 F1 | 	add	objptr, ##5832
1e7bc     34 05 B0 FD | 	call	#_psram_spin2_fill
1e7c0     0B 00 00 FF 
1e7c4     CC E4 85 F1 | 	sub	objptr, ##5836
1e7c8     11 1F 02 F1 | 	add	local01, local03
1e7cc     10 1F 0A F2 | 	cmp	local01, local02 wz
1e7d0     9C FF 9F 5D |  if_ne	jmp	#LR__2414
1e7d4     A7 F0 03 F6 | 	mov	ptra, fp
1e7d8     B2 00 A0 FD | 	call	#popregs_
1e7dc                 | _hg010b_spin2_scrollup2_ret
1e7dc     2D 00 64 FD | 	ret
1e7e0                 | 
1e7e0                 | ' 
1e7e0                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
1e7e0                 | ' 
1e7e0                 | ' pub crlf()
1e7e0                 | _hg010b_spin2_crlf
1e7e0                 | ' 
1e7e0                 | ' cursor_x:=leading_spaces*2
1e7e0     01 00 00 FF 
1e7e4     B6 E4 05 F1 | 	add	objptr, ##694
1e7e8     F2 16 02 FB | 	rdlong	arg03, objptr
1e7ec     01 16 66 F0 | 	shl	arg03, #1
1e7f0     01 00 00 FF 
1e7f4     7A E4 85 F1 | 	sub	objptr, ##634
1e7f8     F2 16 52 FC | 	wrword	arg03, objptr
1e7fc                 | ' cursor_y+=1
1e7fc     02 E4 05 F1 | 	add	objptr, #2
1e800     F2 16 C2 FA | 	rdbyte	arg03, objptr
1e804     01 16 06 F1 | 	add	arg03, #1
1e808     F2 16 42 FC | 	wrbyte	arg03, objptr
1e80c                 | ' if cursor_y>st_lines-1
1e80c     C3 E4 05 F1 | 	add	objptr, #195
1e810     F2 16 02 FB | 	rdlong	arg03, objptr
1e814     01 16 86 F1 | 	sub	arg03, #1
1e818     C3 E4 85 F1 | 	sub	objptr, #195
1e81c     F2 14 C2 FA | 	rdbyte	arg02, objptr
1e820     3E E4 85 F1 | 	sub	objptr, #62
1e824     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
1e828     2C 00 90 ED |  if_be	jmp	#LR__2420
1e82c                 | '   scrollup2()
1e82c     00 12 06 F6 | 	mov	arg01, #0
1e830     01 00 00 FF 
1e834     58 14 06 F6 | 	mov	arg02, ##600
1e838     10 16 06 F6 | 	mov	arg03, #16
1e83c     38 FD BF FD | 	call	#_hg010b_spin2_scrollup2
1e840                 | '   cursor_y:=st_lines-1
1e840     01 E5 05 F1 | 	add	objptr, #257
1e844     F2 16 02 FB | 	rdlong	arg03, objptr
1e848     01 16 86 F1 | 	sub	arg03, #1
1e84c     C3 E4 85 F1 | 	sub	objptr, #195
1e850     F2 16 42 FC | 	wrbyte	arg03, objptr
1e854     3E E4 85 F1 | 	sub	objptr, #62
1e858                 | LR__2420
1e858                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
1e858     3C E4 05 F1 | 	add	objptr, #60
1e85c     F2 14 E2 FA | 	rdword	arg02, objptr
1e860     02 14 66 F0 | 	shl	arg02, #2
1e864     02 E4 05 F1 | 	add	objptr, #2
1e868     F2 16 C2 FA | 	rdbyte	arg03, objptr
1e86c     3E E4 85 F1 | 	sub	objptr, #62
1e870     04 16 66 F0 | 	shl	arg03, #4
1e874     04 16 06 F1 | 	add	arg03, #4
1e878     11 12 06 F6 | 	mov	arg01, #17
1e87c     4C EB BF FD | 	call	#_hg010b_spin2_setspritepos
1e880                 | _hg010b_spin2_crlf_ret
1e880     2D 00 64 FD | 	ret
1e884                 | 
1e884                 | ' 
1e884                 | ' 
1e884                 | ' '*************************************************************************
1e884                 | ' '                                                                        *
1e884                 | ' '  Conversions                                                           *
1e884                 | ' '                                                                        *
1e884                 | ' '*************************************************************************
1e884                 | ' 
1e884                 | ' ''---------- Convert a integer to dec string, return a pointer
1e884                 | ' 
1e884                 | ' pub inttostr(i):result |q,pos,k,j
1e884                 | _hg010b_spin2_inttostr
1e884     03 4A 05 F6 | 	mov	COUNT_, #3
1e888     A8 00 A0 FD | 	call	#pushregs_
1e88c     09 1F 0A F6 | 	mov	local01, arg01 wz
1e890                 | ' 
1e890                 | ' j:=i
1e890                 | ' pos:=10
1e890     0A 20 06 F6 | 	mov	local02, #10
1e894                 | ' k:=0
1e894     00 22 06 F6 | 	mov	local03, #0
1e898                 | ' 
1e898                 | ' if (j==0)
1e898     18 00 90 5D |  if_ne	jmp	#LR__2430
1e89c                 | '   n_string[0]:=48
1e89c     4D E4 05 F1 | 	add	objptr, #77
1e8a0     F2 60 48 FC | 	wrbyte	#48, objptr
1e8a4                 | '   n_string[1]:=0
1e8a4     01 E4 05 F1 | 	add	objptr, #1
1e8a8     F2 00 48 FC | 	wrbyte	#0, objptr
1e8ac     4E E4 85 F1 | 	sub	objptr, #78
1e8b0     C4 00 90 FD | 	jmp	#LR__2437
1e8b4                 | LR__2430
1e8b4                 | ' 
1e8b4                 | ' else
1e8b4                 | '   if (j<0)
1e8b4     0F 1F 52 F6 | 	abs	local01, local01 wc
1e8b8                 | '     j:=0-j
1e8b8                 | '     k:=45
1e8b8     2D 22 06 C6 |  if_b	mov	local03, #45
1e8bc                 | ' 
1e8bc                 | '   n_string[11]:=0
1e8bc     58 E4 05 F1 | 	add	objptr, #88
1e8c0     F2 00 48 FC | 	wrbyte	#0, objptr
1e8c4     58 E4 85 F1 | 	sub	objptr, #88
1e8c8     97 24 48 FB | 	callpa	#(@LR__2432-@LR__2431)>>2,fcache_load_ptr_
1e8cc                 | '   repeat while (pos>-1)
1e8cc                 | LR__2431
1e8cc     00 20 56 F2 | 	cmps	local02, #0 wc
1e8d0     40 00 90 CD |  if_b	jmp	#LR__2433
1e8d4     0F FB 51 F6 | 	abs	result1, local01 wc
1e8d8     0A FA 15 FD | 	qdiv	result1, #10
1e8dc                 | '     q:=j//10
1e8dc     19 FA 61 FD | 	getqy	result1
1e8e0     FD FA 81 F6 | 	negc	result1, result1
1e8e4     0F 1F 52 F6 | 	abs	local01, local01 wc
1e8e8     0A 1E 16 FD | 	qdiv	local01, #10
1e8ec                 | '     q:=48+q
1e8ec     30 FA 05 F1 | 	add	result1, #48
1e8f0                 | '     n_string[pos]:=q
1e8f0     10 1F 02 F6 | 	mov	local01, local02
1e8f4     4D E4 05 F1 | 	add	objptr, #77
1e8f8     F2 1E 02 F1 | 	add	local01, objptr
1e8fc     0F FB 41 FC | 	wrbyte	result1, local01
1e900                 | '     j:=j/10
1e900     4D E4 85 F1 | 	sub	objptr, #77
1e904                 | '     pos-=1
1e904     01 20 86 F1 | 	sub	local02, #1
1e908     18 1E 62 FD | 	getqx	local01
1e90c     0F 1F 82 F6 | 	negc	local01, local01
1e910     B8 FF 9F FD | 	jmp	#LR__2431
1e914                 | LR__2432
1e914                 | LR__2433
1e914                 | '   repeat while n_string[0]==48
1e914                 | LR__2434
1e914     4D E4 05 F1 | 	add	objptr, #77
1e918     F2 16 C2 FA | 	rdbyte	arg03, objptr
1e91c     4D E4 85 F1 | 	sub	objptr, #77
1e920     30 16 0E F2 | 	cmp	arg03, #48 wz
1e924     20 00 90 5D |  if_ne	jmp	#LR__2435
1e928                 | '     bytemove(@n_string,@n_string+1,12)
1e928     4D E4 05 F1 | 	add	objptr, #77
1e92c     F2 12 02 F6 | 	mov	arg01, objptr
1e930     F2 14 02 F6 | 	mov	arg02, objptr
1e934     4D E4 85 F1 | 	sub	objptr, #77
1e938     01 14 06 F1 | 	add	arg02, #1
1e93c     0C 16 06 F6 | 	mov	arg03, #12
1e940     D8 0D B0 FD | 	call	#__system____builtin_memmove
1e944     CC FF 9F FD | 	jmp	#LR__2434
1e948                 | LR__2435
1e948                 | ' 
1e948                 | '   if k==45
1e948     2D 22 0E F2 | 	cmp	local03, #45 wz
1e94c     28 00 90 5D |  if_ne	jmp	#LR__2436
1e950                 | '      bytemove(@n_string+1,@n_string,12)
1e950     4D E4 05 F1 | 	add	objptr, #77
1e954     F2 12 02 F6 | 	mov	arg01, objptr
1e958     01 12 06 F1 | 	add	arg01, #1
1e95c     F2 14 02 F6 | 	mov	arg02, objptr
1e960     4D E4 85 F1 | 	sub	objptr, #77
1e964     0C 16 06 F6 | 	mov	arg03, #12
1e968     B0 0D B0 FD | 	call	#__system____builtin_memmove
1e96c                 | '      n_string[0]:=k
1e96c     4D E4 05 F1 | 	add	objptr, #77
1e970     F2 22 42 FC | 	wrbyte	local03, objptr
1e974     4D E4 85 F1 | 	sub	objptr, #77
1e978                 | LR__2436
1e978                 | LR__2437
1e978                 | ' 
1e978                 | ' q:=@n_string
1e978     4D E4 05 F1 | 	add	objptr, #77
1e97c     F2 FA 01 F6 | 	mov	result1, objptr
1e980     4D E4 85 F1 | 	sub	objptr, #77
1e984                 | ' return q
1e984     A7 F0 03 F6 | 	mov	ptra, fp
1e988     B2 00 A0 FD | 	call	#popregs_
1e98c                 | _hg010b_spin2_inttostr_ret
1e98c     2D 00 64 FD | 	ret
1e990                 | 
1e990                 | ' 
1e990                 | ' '..............................................................................
1e990                 | ' 
1e990                 | ' {{
1e990                 | ' }}
1e990                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
1e990                 | _psram_spin2_startx
1e990     04 4A 05 F6 | 	mov	COUNT_, #4
1e994     A8 00 A0 FD | 	call	#pushregs_
1e998     09 1F 02 F6 | 	mov	local01, arg01
1e99c     0B 21 02 F6 | 	mov	local02, arg03
1e9a0     0C 23 02 F6 | 	mov	local03, arg04
1e9a4                 | '     stop() ' restart driver if required
1e9a4     54 01 B0 FD | 	call	#_psram_spin2_stop
1e9a8     00 1E 0E F2 | 	cmp	local01, #0 wz
1e9ac     14 1E 06 AB |  if_e	rdlong	local01, #20
1e9b0     0F 15 52 F6 | 	abs	arg02, local01 wc
1e9b4     A1 07 00 FF 
1e9b8     40 14 16 FD | 	qdiv	arg02, ##1000000
1e9bc                 | ' 
1e9bc                 | '     ' use current frequency if none specified
1e9bc                 | ' 
1e9bc                 | '     if freq == 0 
1e9bc                 | '         freq := clkfreq 
1e9bc                 | ' 
1e9bc                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
1e9bc                 | ' 
1e9bc                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
1e9bc                 | '     if burst < 0
1e9bc                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
1e9bc     18 14 62 FD | 	getqx	arg02
1e9c0     0A 19 82 F6 | 	negc	arg04, arg02
1e9c4     03 18 66 F0 | 	shl	arg04, #3
1e9c8     84 18 86 F1 | 	sub	arg04, #132
1e9cc     04 18 46 F0 | 	shr	arg04, #4
1e9d0     04 18 66 F0 | 	shl	arg04, #4
1e9d4     00 18 56 F2 | 	cmps	arg04, #0 wc
1e9d8     0E FA 65 C6 |  if_b	neg	result1, #14
1e9dc     10 01 90 CD |  if_b	jmp	#LR__2443
1e9e0                 | ' 
1e9e0                 | '     ' compute the input delay
1e9e0                 | ' 
1e9e0                 | '     if delay <= 0
1e9e0     01 20 56 F2 | 	cmps	local02, #1 wc
1e9e4     10 00 90 3D |  if_ae	jmp	#LR__2440
1e9e8                 | '         delay := lookupDelay(freq)
1e9e8     0F 13 02 F6 | 	mov	arg01, local01
1e9ec     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
1e9f0     FD 20 02 F6 | 	mov	local02, result1
1e9f4     04 00 90 FD | 	jmp	#LR__2441
1e9f8                 | LR__2440
1e9f8                 | '     else
1e9f8                 | '         delay <#= $f ' limit to 15
1e9f8     0F 20 66 F3 | 	fles	local02, #15
1e9fc                 | LR__2441
1e9fc                 | ' 
1e9fc                 | '     ' create our lock
1e9fc                 | ' 
1e9fc                 | '     driverlock := LOCKNEW()  
1e9fc     00 FA 05 F6 | 	mov	result1, #0
1ea00     04 FA 61 FD | 	locknew	result1
1ea04     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1ea08     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
1ea0c                 | '     if driverlock == -1
1ea0c     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1ea10     FF FF 7F FF 
1ea14     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1ea18                 | '         return ERR_NO_LOCK
1ea18     1A FA 65 A6 |  if_e	neg	result1, #26
1ea1c     D0 00 90 AD |  if_e	jmp	#LR__2443
1ea20                 | ' 
1ea20                 | '     ' patch in the proper data and HUB addresses to the startup structure
1ea20                 | ' 
1ea20                 | '     long[@startupData][0]:=clkfreq
1ea20     14 1E 06 FB | 	rdlong	local01, #20
1ea24     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
1ea28     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
1ea2c                 | ' '    long[@startupData][1]:=$1000_0000
1ea2c                 | '     long[@startupData][5]:=@deviceData
1ea2c     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1ea30     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1ea34     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
1ea38     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1ea3c     14 14 06 F1 | 	add	arg02, #20
1ea40     0A 1F 62 FC | 	wrlong	local01, arg02
1ea44                 | '     long[@startupData][6]:=@qosData
1ea44     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
1ea48     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1ea4c     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1ea50     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1ea54     18 14 06 F1 | 	add	arg02, #24
1ea58     0A 1F 62 FC | 	wrlong	local01, arg02
1ea5c                 | '     long[@startupData][7]:=$7FF00
1ea5c     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1ea60     1C 1E 06 F1 | 	add	local01, #28
1ea64     FF 03 80 FF 
1ea68     0F 01 6A FC | 	wrlong	##524032, local01
1ea6c                 | ' 
1ea6c                 | '     ' setup some default bank and QoS parameter values
1ea6c                 | ' 
1ea6c                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
1ea6c     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1ea70     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
1ea74     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
1ea78     10 18 66 F0 | 	shl	arg04, #16
1ea7c     0C 20 66 F0 | 	shl	local02, #12
1ea80     10 19 42 F5 | 	or	arg04, local02
1ea84     18 18 46 F5 | 	or	arg04, #24
1ea88     0C 15 02 F6 | 	mov	arg02, arg04
1ea8c     02 16 06 F6 | 	mov	arg03, #2
1ea90     A0 00 A0 FD | 	call	#\builtin_longfill_
1ea94                 | '     longfill(@qosData, $FFFF0000, 8)
1ea94     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1ea98     07 16 06 F6 | 	mov	arg03, #7
1ea9c     28 16 62 FD | 	setq	arg03
1eaa0     80 FF FF FF 
1eaa4     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
1eaa8                 | ' 
1eaa8                 | '     ' get the address of the PSRAM memory driver so we can start it
1eaa8                 | ' 
1eaa8                 | '     driverAddr:= driver.getDriverAddr()
1eaa8                 | '     return @driver_start
1eaa8     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
1eaac     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
1eab0     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
1eab4                 | ' 
1eab4                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
1eab4                 | ' 
1eab4                 | '     if desiredcog < 0
1eab4     00 22 56 F2 | 	cmps	local03, #0 wc
1eab8                 | '         desiredcog := NEWCOG
1eab8     10 22 06 C6 |  if_b	mov	local03, #16
1eabc                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
1eabc     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1eac0     11 25 02 F6 | 	mov	local04, local03
1eac4     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
1eac8     0A 25 F2 FC | 	coginit	local04, arg02 wc
1eacc     01 24 66 C6 |  if_b	neg	local04, #1
1ead0     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1ead4     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
1ead8                 | '     repeat until long[@startupData] == 0 
1ead8     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
1eadc                 | LR__2442
1eadc     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
1eae0     F8 FF 9F 5D |  if_ne	jmp	#LR__2442
1eae4                 | ' 
1eae4                 | '     return drivercog
1eae4     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1eae8     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
1eaec     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1eaf0                 | LR__2443
1eaf0     A7 F0 03 F6 | 	mov	ptra, fp
1eaf4     B2 00 A0 FD | 	call	#popregs_
1eaf8                 | _psram_spin2_startx_ret
1eaf8     2D 00 64 FD | 	ret
1eafc                 | 
1eafc                 | ' 
1eafc                 | ' '..............................................................................
1eafc                 | ' 
1eafc                 | ' {{
1eafc                 | ' }}
1eafc                 | ' PUB stop() : i
1eafc                 | _psram_spin2_stop
1eafc     00 00 06 F6 | 	mov	_var01, #0
1eb00                 | '     if drivercog <> -1
1eb00     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1eb04     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1eb08     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1eb0c     FF FF 7F FF 
1eb10     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
1eb14     70 00 90 AD |  if_e	jmp	#LR__2453
1eb18                 | '         cogstop(drivercog) ' a rather brutal stop
1eb18     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1eb1c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1eb20     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1eb24     03 12 62 FD | 	cogstop	arg01
1eb28     97 26 48 FB | 	callpa	#(@LR__2452-@LR__2450)>>2,fcache_load_ptr_
1eb2c                 | '         repeat i from 0 to 7
1eb2c                 | LR__2450
1eb2c                 | '             if long[$7FF00][i*3] < 0
1eb2c     00 FB 01 F6 | 	mov	result1, _var01
1eb30     01 FA 65 F0 | 	shl	result1, #1
1eb34     00 FB 01 F1 | 	add	result1, _var01
1eb38     02 FA 65 F0 | 	shl	result1, #2
1eb3c     FF 03 00 FF 
1eb40     00 FB 05 F1 | 	add	result1, ##524032
1eb44     FD FA 01 FB | 	rdlong	result1, result1
1eb48     00 FA 55 F2 | 	cmps	result1, #0 wc
1eb4c     1C 00 90 3D |  if_ae	jmp	#LR__2451
1eb50                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
1eb50     00 FB 01 F6 | 	mov	result1, _var01
1eb54     01 FA 65 F0 | 	shl	result1, #1
1eb58     00 FB 01 F1 | 	add	result1, _var01
1eb5c     02 FA 65 F0 | 	shl	result1, #2
1eb60     FF 03 00 FF 
1eb64     00 FB 05 F1 | 	add	result1, ##524032
1eb68     FD 20 68 FC | 	wrlong	#16, result1
1eb6c                 | LR__2451
1eb6c     01 00 06 F1 | 	add	_var01, #1
1eb70     08 00 56 F2 | 	cmps	_var01, #8 wc
1eb74     B4 FF 9F CD |  if_b	jmp	#LR__2450
1eb78                 | LR__2452
1eb78                 | '         drivercog := -1
1eb78     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1eb7c     FF FF FF FF 
1eb80     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
1eb84     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1eb88                 | LR__2453
1eb88                 | '     if driverlock <> -1
1eb88     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1eb8c     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1eb90     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1eb94     FF FF 7F FF 
1eb98     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1eb9c                 | '         LOCKRET(driverlock)
1eb9c     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
1eba0     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
1eba4     05 12 62 5D |  if_ne	lockret	arg01
1eba8                 | '         driverlock := -1
1eba8     FF FF FF 5F 
1ebac     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
1ebb0     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
1ebb4     00 FB 01 F6 | 	mov	result1, _var01
1ebb8                 | _psram_spin2_stop_ret
1ebb8     2D 00 64 FD | 	ret
1ebbc                 | 
1ebbc                 | ' 
1ebbc                 | ' '..............................................................................
1ebbc                 | ' 
1ebbc                 | ' {{
1ebbc                 | ' }}
1ebbc                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
1ebbc                 | _psram_spin2_read1
1ebbc                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1ebbc                 | '     if drivercog == -1 ' driver must be running
1ebbc     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1ebc0     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1ebc4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1ebc8     FF FF 7F FF 
1ebcc     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1ebd0                 | '         return ERR_INACTIVE
1ebd0     0F FA 65 A6 |  if_e	neg	result1, #15
1ebd4     7C 00 90 AD |  if_e	jmp	#LR__2461
1ebd8                 | '     if count == 0 ' don't even bother reading
1ebd8     00 16 0E F2 | 	cmp	arg03, #0 wz
1ebdc                 | '         return 0
1ebdc     00 FA 05 A6 |  if_e	mov	result1, #0
1ebe0     70 00 90 AD |  if_e	jmp	#LR__2461
1ebe4                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1ebe4     00 FA 05 F6 | 	mov	result1, #0
1ebe8     01 FA 61 FD | 	cogid	result1
1ebec     FD 00 02 F6 | 	mov	_var01, result1
1ebf0     01 00 66 F0 | 	shl	_var01, #1
1ebf4     FD 00 02 F1 | 	add	_var01, result1
1ebf8     02 00 66 F0 | 	shl	_var01, #2
1ebfc     FF 03 00 FF 
1ec00     00 03 06 F6 | 	mov	_var02, ##524032
1ec04     00 03 02 F1 | 	add	_var02, _var01
1ec08                 | '     if long[mailbox] < 0
1ec08     01 01 02 FB | 	rdlong	_var01, _var02
1ec0c     00 00 56 F2 | 	cmps	_var01, #0 wc
1ec10                 | '         return ERR_MAILBOX_BUSY
1ec10     1C FA 65 C6 |  if_b	neg	result1, #28
1ec14     3C 00 90 CD |  if_b	jmp	#LR__2461
1ec18                 | '     long[mailbox][2] := count
1ec18     08 02 06 F1 | 	add	_var02, #8
1ec1c     01 17 62 FC | 	wrlong	arg03, _var02
1ec20                 | '     long[mailbox][1] := dstHubAddr
1ec20     04 02 86 F1 | 	sub	_var02, #4
1ec24     01 13 62 FC | 	wrlong	arg01, _var02
1ec28     04 02 86 F1 | 	sub	_var02, #4
1ec2c                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
1ec2c     0A 05 02 F6 | 	mov	_var03, arg02
1ec30     D9 04 06 F4 | 	bitl	_var03, #217
1ec34     00 00 58 FF 
1ec38     00 00 06 F6 | 	mov	_var01, ##-1342177280
1ec3c     02 01 02 F1 | 	add	_var01, _var03
1ec40     01 01 62 FC | 	wrlong	_var01, _var02
1ec44                 | '     repeat
1ec44                 | LR__2460
1ec44                 | '         result := long[mailbox]    
1ec44     01 05 02 FB | 	rdlong	_var03, _var02
1ec48     00 04 56 F2 | 	cmps	_var03, #0 wc
1ec4c     F4 FF 9F CD |  if_b	jmp	#LR__2460
1ec50                 | '     while result < 0   
1ec50                 | '     return -result                       'return success or error
1ec50     02 FB 61 F6 | 	neg	result1, _var03
1ec54                 | LR__2461
1ec54                 | _psram_spin2_read1_ret
1ec54     2D 00 64 FD | 	ret
1ec58                 | 
1ec58                 | ' 
1ec58                 | ' '..............................................................................
1ec58                 | ' 
1ec58                 | ' {{
1ec58                 | ' }}
1ec58                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
1ec58                 | _psram_spin2_write
1ec58                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1ec58                 | '     if drivercog == -1 ' driver must be running
1ec58     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1ec5c     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1ec60     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1ec64     FF FF 7F FF 
1ec68     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1ec6c                 | '         return ERR_INACTIVE
1ec6c     0F FA 65 A6 |  if_e	neg	result1, #15
1ec70     7C 00 90 AD |  if_e	jmp	#LR__2471
1ec74                 | '     if count == 0 ' don't even bother writing
1ec74     00 16 0E F2 | 	cmp	arg03, #0 wz
1ec78                 | '         return 0
1ec78     00 FA 05 A6 |  if_e	mov	result1, #0
1ec7c     70 00 90 AD |  if_e	jmp	#LR__2471
1ec80                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1ec80     00 FA 05 F6 | 	mov	result1, #0
1ec84     01 FA 61 FD | 	cogid	result1
1ec88     FD 00 02 F6 | 	mov	_var01, result1
1ec8c     01 00 66 F0 | 	shl	_var01, #1
1ec90     FD 00 02 F1 | 	add	_var01, result1
1ec94     02 00 66 F0 | 	shl	_var01, #2
1ec98     FF 03 00 FF 
1ec9c     00 03 06 F6 | 	mov	_var02, ##524032
1eca0     00 03 02 F1 | 	add	_var02, _var01
1eca4                 | '     if long[mailbox] < 0
1eca4     01 01 02 FB | 	rdlong	_var01, _var02
1eca8     00 00 56 F2 | 	cmps	_var01, #0 wc
1ecac                 | '         return ERR_MAILBOX_BUSY
1ecac     1C FA 65 C6 |  if_b	neg	result1, #28
1ecb0     3C 00 90 CD |  if_b	jmp	#LR__2471
1ecb4                 | '     long[mailbox][2] := count
1ecb4     08 02 06 F1 | 	add	_var02, #8
1ecb8     01 17 62 FC | 	wrlong	arg03, _var02
1ecbc                 | '     long[mailbox][1] := srcHubAddr
1ecbc     04 02 86 F1 | 	sub	_var02, #4
1ecc0     01 13 62 FC | 	wrlong	arg01, _var02
1ecc4     04 02 86 F1 | 	sub	_var02, #4
1ecc8                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
1ecc8     0A 05 02 F6 | 	mov	_var03, arg02
1eccc     D9 04 06 F4 | 	bitl	_var03, #217
1ecd0     00 00 78 FF 
1ecd4     00 00 06 F6 | 	mov	_var01, ##-268435456
1ecd8     02 01 02 F1 | 	add	_var01, _var03
1ecdc     01 01 62 FC | 	wrlong	_var01, _var02
1ece0                 | '     repeat
1ece0                 | LR__2470
1ece0                 | '         result := long[mailbox]    
1ece0     01 05 02 FB | 	rdlong	_var03, _var02
1ece4     00 04 56 F2 | 	cmps	_var03, #0 wc
1ece8     F4 FF 9F CD |  if_b	jmp	#LR__2470
1ecec                 | '     while result < 0   
1ecec                 | '     return -result                       'return success or error
1ecec     02 FB 61 F6 | 	neg	result1, _var03
1ecf0                 | LR__2471
1ecf0                 | _psram_spin2_write_ret
1ecf0     2D 00 64 FD | 	ret
1ecf4                 | 
1ecf4                 | ' 
1ecf4                 | ' ' generalized fill
1ecf4                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
1ecf4                 | _psram_spin2_fill
1ecf4     09 01 02 F6 | 	mov	_var01, arg01
1ecf8     0A 03 02 F6 | 	mov	_var02, arg02
1ecfc     0B 05 02 F6 | 	mov	_var03, arg03
1ed00     0D 07 02 F6 | 	mov	_var04, arg05
1ed04                 | '     case datasize 
1ed04     01 06 86 F1 | 	sub	_var04, #1
1ed08     04 06 26 F3 | 	fle	_var04, #4
1ed0c     30 06 62 FD | 	jmprel	_var04
1ed10                 | LR__2480
1ed10     10 00 90 FD | 	jmp	#LR__2481
1ed14     18 00 90 FD | 	jmp	#LR__2482
1ed18     2C 00 90 FD | 	jmp	#LR__2484
1ed1c     1C 00 90 FD | 	jmp	#LR__2483
1ed20     24 00 90 FD | 	jmp	#LR__2484
1ed24                 | LR__2481
1ed24                 | '         1: req := driver.R_WRITEBYTE
1ed24     00 00 60 FF 
1ed28     00 08 06 F6 | 	mov	_var05, ##-1073741824
1ed2c     20 00 90 FD | 	jmp	#LR__2485
1ed30                 | LR__2482
1ed30                 | '         2: req := driver.R_WRITEWORD
1ed30     00 00 68 FF 
1ed34     00 08 06 F6 | 	mov	_var05, ##-805306368
1ed38     14 00 90 FD | 	jmp	#LR__2485
1ed3c                 | LR__2483
1ed3c                 | '         4: req := driver.R_WRITELONG
1ed3c     00 00 70 FF 
1ed40     00 08 06 F6 | 	mov	_var05, ##-536870912
1ed44     08 00 90 FD | 	jmp	#LR__2485
1ed48                 | LR__2484
1ed48                 | '         other : return ERR_INVALID
1ed48     06 FA 65 F6 | 	neg	result1, #6
1ed4c     94 00 90 FD | 	jmp	#LR__2487
1ed50                 | LR__2485
1ed50                 | '     if count == 0   ' nothing to do
1ed50     00 04 0E F2 | 	cmp	_var03, #0 wz
1ed54                 | '         return 0
1ed54     00 FA 05 A6 |  if_e	mov	result1, #0
1ed58     88 00 90 AD |  if_e	jmp	#LR__2487
1ed5c                 | '     if drivercog == -1
1ed5c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1ed60     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
1ed64     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1ed68     FF FF 7F FF 
1ed6c     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
1ed70                 | '         return ERR_INACTIVE
1ed70     0F FA 65 A6 |  if_e	neg	result1, #15
1ed74     6C 00 90 AD |  if_e	jmp	#LR__2487
1ed78                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
1ed78     00 FA 05 F6 | 	mov	result1, #0
1ed7c     01 FA 61 FD | 	cogid	result1
1ed80     FD 06 02 F6 | 	mov	_var04, result1
1ed84     01 06 66 F0 | 	shl	_var04, #1
1ed88     FD 06 02 F1 | 	add	_var04, result1
1ed8c     02 06 66 F0 | 	shl	_var04, #2
1ed90     FF 03 00 FF 
1ed94     00 0B 06 F6 | 	mov	_var06, ##524032
1ed98     03 0B 02 F1 | 	add	_var06, _var04
1ed9c                 | '     if long[mailbox] < 0
1ed9c     05 07 02 FB | 	rdlong	_var04, _var06
1eda0     00 06 56 F2 | 	cmps	_var04, #0 wc
1eda4                 | '         return ERR_MAILBOX_BUSY
1eda4     1C FA 65 C6 |  if_b	neg	result1, #28
1eda8     38 00 90 CD |  if_b	jmp	#LR__2487
1edac                 | '     long[mailbox][2] := count
1edac     08 0A 06 F1 | 	add	_var06, #8
1edb0     05 05 62 FC | 	wrlong	_var03, _var06
1edb4                 | '     long[mailbox][1] := pattern
1edb4     04 0A 86 F1 | 	sub	_var06, #4
1edb8     05 03 62 FC | 	wrlong	_var02, _var06
1edbc     04 0A 86 F1 | 	sub	_var06, #4
1edc0                 | '     long[mailbox] := req + (addr & $1ffffff)
1edc0     04 0D 02 F6 | 	mov	_var07, _var05
1edc4     00 0F 02 F6 | 	mov	_var08, _var01
1edc8     D9 0E 06 F4 | 	bitl	_var08, #217
1edcc     07 0D 02 F1 | 	add	_var07, _var08
1edd0     05 0D 62 FC | 	wrlong	_var07, _var06
1edd4                 | '     repeat
1edd4                 | LR__2486
1edd4                 | '         r := long[mailbox]
1edd4     05 0F 02 FB | 	rdlong	_var08, _var06
1edd8     00 0E 56 F2 | 	cmps	_var08, #0 wc
1eddc     F4 FF 9F CD |  if_b	jmp	#LR__2486
1ede0                 | '     while r < 0
1ede0                 | '     return -r                  ' return 0 for success or negated error code
1ede0     07 FB 61 F6 | 	neg	result1, _var08
1ede4                 | LR__2487
1ede4                 | _psram_spin2_fill_ret
1ede4     2D 00 64 FD | 	ret
1ede8                 | 
1ede8                 | ' 
1ede8                 | ' '..............................................................................
1ede8                 | ' 
1ede8                 | ' {{
1ede8                 | ' }}
1ede8                 | ' PUB setQos(cog, qos) : result | mailbox
1ede8                 | _psram_spin2_setQos
1ede8     09 01 02 F6 | 	mov	_var01, arg01
1edec                 | '     if drivercog == -1 ' driver must be running
1edec     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1edf0     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1edf4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1edf8     FF FF 7F FF 
1edfc     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1ee00                 | '         return ERR_INACTIVE
1ee00     0F FA 65 A6 |  if_e	neg	result1, #15
1ee04     9C 00 90 AD |  if_e	jmp	#LR__2494
1ee08                 | '     if cog < 0 or cog > 7 ' enforce cog id range
1ee08     00 00 56 F2 | 	cmps	_var01, #0 wc
1ee0c     08 00 90 CD |  if_b	jmp	#LR__2490
1ee10     08 00 56 F2 | 	cmps	_var01, #8 wc
1ee14     08 00 90 CD |  if_b	jmp	#LR__2491
1ee18                 | LR__2490
1ee18                 | '         return ERR_INVALID
1ee18     06 FA 65 F6 | 	neg	result1, #6
1ee1c     84 00 90 FD | 	jmp	#LR__2494
1ee20                 | LR__2491
1ee20                 | '     long[@qosData][cog] := qos & !$1ff
1ee20     FF 15 26 F5 | 	andn	arg02, #511
1ee24     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1ee28     02 00 66 F0 | 	shl	_var01, #2
1ee2c     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
1ee30     00 15 62 FC | 	wrlong	arg02, _var01
1ee34                 | '     mailbox := $7FF00 + drivercog*12
1ee34     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
1ee38     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
1ee3c     02 07 02 F6 | 	mov	_var04, _var03
1ee40     01 06 66 F0 | 	shl	_var04, #1
1ee44     02 07 02 F1 | 	add	_var04, _var03
1ee48     02 06 66 F0 | 	shl	_var04, #2
1ee4c     FF 03 00 FF 
1ee50     00 09 06 F6 | 	mov	_var05, ##524032
1ee54     03 09 02 F1 | 	add	_var05, _var04
1ee58                 | '     repeat until LOCKTRY(driverlock)
1ee58     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
1ee5c                 | LR__2492
1ee5c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1ee60     06 12 72 FD | 	locktry	arg01 wc
1ee64     F4 FF 9F 3D |  if_ae	jmp	#LR__2492
1ee68     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1ee6c                 | '     long[mailbox] := driver.R_CONFIG + cogid()
1ee6c     00 06 06 F6 | 	mov	_var04, #0
1ee70     01 06 62 FD | 	cogid	_var04
1ee74     00 00 78 FF 
1ee78     00 02 06 F6 | 	mov	_var02, ##-268435456
1ee7c     03 03 02 F1 | 	add	_var02, _var04
1ee80     04 03 62 FC | 	wrlong	_var02, _var05
1ee84                 | '     repeat while long[mailbox] < 0
1ee84                 | LR__2493
1ee84     04 03 02 FB | 	rdlong	_var02, _var05
1ee88     00 02 56 F2 | 	cmps	_var02, #0 wc
1ee8c     F4 FF 9F CD |  if_b	jmp	#LR__2493
1ee90                 | '     LOCKREL(driverlock)
1ee90     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1ee94     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1ee98     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1ee9c     07 12 72 FD | 	lockrel	arg01 wc
1eea0     00 FA 05 F6 | 	mov	result1, #0
1eea4                 | LR__2494
1eea4                 | _psram_spin2_setQos_ret
1eea4     2D 00 64 FD | 	ret
1eea8                 | 
1eea8                 | ' 
1eea8                 | ' '..............................................................................
1eea8                 | ' 
1eea8                 | ' {{
1eea8                 | ' }}
1eea8                 | ' PRI lookupDelay(freq) : delay | profile
1eea8                 | _psram_spin2_lookupDelay
1eea8                 | '     profile := @delayTable
1eea8     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
1eeac     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
1eeb0                 | '     delay := long[profile][0]
1eeb0     00 03 02 FB | 	rdlong	_var02, _var01
1eeb4                 | '     repeat while long[profile][1] 
1eeb4     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
1eeb8     97 16 48 FB | 	callpa	#(@LR__2501-@LR__2500)>>2,fcache_load_ptr_
1eebc                 | LR__2500
1eebc     04 00 06 F1 | 	add	_var01, #4
1eec0     00 FB 09 FB | 	rdlong	result1, _var01 wz
1eec4     04 00 86 F1 | 	sub	_var01, #4
1eec8     1C 00 90 AD |  if_e	jmp	#LR__2502
1eecc                 | '         if freq +< long[profile][1] 
1eecc     04 00 06 F1 | 	add	_var01, #4
1eed0     00 FB 01 FB | 	rdlong	result1, _var01
1eed4     04 00 86 F1 | 	sub	_var01, #4
1eed8     FD 12 12 F2 | 	cmp	arg01, result1 wc
1eedc                 | '             quit
1eedc                 | '         profile += 4
1eedc     04 00 06 31 |  if_ae	add	_var01, #4
1eee0                 | '         delay++
1eee0     01 02 06 31 |  if_ae	add	_var02, #1
1eee4     D4 FF 9F 3D |  if_ae	jmp	#LR__2500
1eee8                 | LR__2501
1eee8                 | LR__2502
1eee8     01 FB 01 F6 | 	mov	result1, _var02
1eeec                 | _psram_spin2_lookupDelay_ret
1eeec     2D 00 64 FD | 	ret
1eef0                 | 
1eef0                 | ' 
1eef0                 | ' PUB start() : r
1eef0                 | _usbnew_spin2_start
1eef0     00 00 06 F6 | 	mov	_var01, #0
1eef4                 | '   ifnot driver_cog
1eef4     15 00 00 FF 
1eef8     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
1eefc     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
1ef00     15 00 00 FF 
1ef04     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
1ef08     38 00 90 5D |  if_ne	jmp	#LR__2510
1ef0c                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
1ef0c     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
1ef10     10 00 06 F6 | 	mov	_var01, #16
1ef14     00 16 06 F6 | 	mov	arg03, #0
1ef18     28 16 62 FD | 	setq	arg03
1ef1c     0A 01 F2 FC | 	coginit	_var01, arg02 wc
1ef20     01 00 66 C6 |  if_b	neg	_var01, #1
1ef24                 | '     if r >= 0
1ef24     00 00 56 F2 | 	cmps	_var01, #0 wc
1ef28                 | '       driver_cog := r+1
1ef28     00 03 02 36 |  if_ae	mov	_var02, _var01
1ef2c     01 02 06 31 |  if_ae	add	_var02, #1
1ef30     15 00 00 3F 
1ef34     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
1ef38     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
1ef3c     15 00 00 3F 
1ef40     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
1ef44                 | LR__2510
1ef44     00 FB 01 F6 | 	mov	result1, _var01
1ef48                 | _usbnew_spin2_start_ret
1ef48     2D 00 64 FD | 	ret
1ef4c                 | 
1ef4c                 | '     '' (Always enabled)
1ef4c                 | ' 
1ef4c                 | ' '' Get current pressed state of a keyboard key
1ef4c                 | ' PUB keystate(key) : r | buf[2],tmp
1ef4c                 | _usbnew_spin2_keystate
1ef4c     00 04 06 F6 | 	mov	_var03, #0
1ef50                 | '   if key >= $E0 && key < $E8
1ef50     E0 12 56 F2 | 	cmps	arg01, #224 wc
1ef54     34 00 90 CD |  if_b	jmp	#LR__2520
1ef58     E8 12 56 F2 | 	cmps	arg01, #232 wc
1ef5c     2C 00 90 3D |  if_ae	jmp	#LR__2520
1ef60                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
1ef60     00 FA 05 F6 | 	mov	result1, #0
1ef64     13 00 00 FF 
1ef68     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
1ef6c     09 07 02 F6 | 	mov	_var04, arg01
1ef70     E0 06 86 F1 | 	sub	_var04, #224
1ef74     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
1ef78     03 09 4A F0 | 	shr	_var05, _var04 wz
1ef7c     13 00 00 FF 
1ef80     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
1ef84     01 FA 65 56 |  if_ne	neg	result1, #1
1ef88     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
1ef8c                 | LR__2520
1ef8c                 | '   else
1ef8c                 | '     '' Do this in inline ASM to ensure atomicity
1ef8c                 | '     tmp := @hkbd_report
1ef8c     13 00 00 FF 
1ef90     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
1ef94     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
1ef98                 | '     org
1ef98     13 00 00 FF 
1ef9c     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
1efa0     97 1E 48 FB | 	callpa	#(@LR__2522-@LR__2521)>>2,fcache_load_ptr_
1efa4                 | LR__2521
1efa4 000             | 	org	0
1efa4 000 28 02 64 FD | 	setq	#1
1efa8 001 04 01 02 FB | 	rdlong	_var01, _var05
1efac 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
1efb0 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
1efb4 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
1efb8 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1efbc 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
1efc0 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1efc4 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
1efc8 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1efcc 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
1efd0 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1efd4 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
1efd8 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1efdc 00e 01 04 66 A6 |  if_e	neg	_var03, #1
1efe0 00f             | LR__2522
1efe0                 | 	orgh
1efe0     02 FB 01 F6 | 	mov	result1, _var03
1efe4                 | _usbnew_spin2_keystate_ret
1efe4     2D 00 64 FD | 	ret
1efe8                 | 
1efe8                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
1efe8                 | ' 
1efe8                 | ' '' Return key event from buffer if there is one
1efe8                 | ' PUB get_key() : r | tail
1efe8                 | _usbnew_spin2_get_key
1efe8                 | '   tail := keyq_tail
1efe8     0F 00 00 FF 
1efec     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
1eff0     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
1eff4                 | '   if keyq_head == tail
1eff4     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
1eff8     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
1effc     0F 00 00 FF 
1f000     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
1f004     00 03 0A F2 | 	cmp	_var02, _var01 wz
1f008                 | '     return 0 ' No event
1f008     00 FA 05 A6 |  if_e	mov	result1, #0
1f00c     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
1f010                 | '   r := keyq_data[tail]
1f010     00 03 02 F6 | 	mov	_var02, _var01
1f014     02 02 66 F0 | 	shl	_var02, #2
1f018     0F 00 00 FF 
1f01c     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
1f020     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
1f024     01 FB 01 FB | 	rdlong	result1, _var02
1f028                 | '   if ++tail == KEYQUEUE_SIZE
1f028     01 00 06 F1 | 	add	_var01, #1
1f02c     80 00 0E F2 | 	cmp	_var01, #128 wz
1f030                 | '     tail := 0
1f030     00 00 06 A6 |  if_e	mov	_var01, #0
1f034                 | '   keyq_tail := tail
1f034     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
1f038     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
1f03c     0F 00 00 FF 
1f040     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
1f044                 | _usbnew_spin2_get_key_ret
1f044     2D 00 64 FD | 	ret
1f048                 | 
1f048                 | ' 
1f048                 | ' '' Emulate mouse movement
1f048                 | ' PUB mouse_move(x,y)
1f048                 | _usbnew_spin2_mouse_move
1f048     02 4A 05 F6 | 	mov	COUNT_, #2
1f04c     A8 00 A0 FD | 	call	#pushregs_
1f050     09 1F 02 F6 | 	mov	local01, arg01
1f054     0A 21 02 F6 | 	mov	local02, arg02
1f058                 | '   mouse_lock := 1
1f058     14 00 00 FF 
1f05c     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
1f060     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
1f064     14 00 00 FF 
1f068     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
1f06c                 | '   waitus(2) ' hope driver is now done
1f06c     02 12 06 F6 | 	mov	arg01, #2
1f070     E8 0A B0 FD | 	call	#__system___waitus
1f074                 | '   mouse_xacc := x
1f074     14 00 00 FF 
1f078     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
1f07c     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
1f080                 | '   mouse_yacc := y
1f080     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1f084     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
1f088                 | '   if mouse_outptr
1f088     04 00 00 FF 
1f08c     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
1f090     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
1f094     0F 00 00 FF 
1f098     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1f09c     24 00 90 AD |  if_e	jmp	#LR__2530
1f0a0                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
1f0a0     10 20 66 F0 | 	shl	local02, #16
1f0a4     0F 1F 32 F9 | 	getword	local01, local01, #0
1f0a8     0F 21 42 F5 | 	or	local02, local01
1f0ac     0F 00 00 FF 
1f0b0     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
1f0b4     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
1f0b8     0F 00 00 FF 
1f0bc     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1f0c0     0F 21 62 FC | 	wrlong	local02, local01
1f0c4                 | LR__2530
1f0c4                 | '   mouse_lock := 0
1f0c4     14 00 00 FF 
1f0c8     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
1f0cc     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
1f0d0     14 00 00 FF 
1f0d4     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
1f0d8     A7 F0 03 F6 | 	mov	ptra, fp
1f0dc     B2 00 A0 FD | 	call	#popregs_
1f0e0                 | _usbnew_spin2_mouse_move_ret
1f0e0     2D 00 64 FD | 	ret
1f0e4                 | 
1f0e4                 | '     '' Set HAVE_HIDPAD to enable.
1f0e4                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
1f0e4                 | ' 
1f0e4                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
1f0e4                 | ' PUB hidpad_id(dev) : r
1f0e4                 | _usbnew_spin2_hidpad_id
1f0e4                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
1f0e4     13 00 00 FF 
1f0e8     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1f0ec     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1f0f0     09 01 02 F6 | 	mov	_var01, arg01
1f0f4     03 00 66 F0 | 	shl	_var01, #3
1f0f8     09 01 82 F1 | 	sub	_var01, arg01
1f0fc     02 00 66 F0 | 	shl	_var01, #2
1f100     00 FB 01 F1 | 	add	result1, _var01
1f104     FD FA 01 FB | 	rdlong	result1, result1
1f108     13 00 00 FF 
1f10c     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1f110                 | _usbnew_spin2_hidpad_id_ret
1f110     2D 00 64 FD | 	ret
1f114                 | 
1f114                 | ' 
1f114                 | ' '' Get all button states for a device
1f114                 | ' PUB hidpad_buttons(dev) : r 
1f114                 | _usbnew_spin2_hidpad_buttons
1f114                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
1f114     13 00 00 FF 
1f118     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1f11c     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1f120     09 01 02 F6 | 	mov	_var01, arg01
1f124     03 00 66 F0 | 	shl	_var01, #3
1f128     09 01 82 F1 | 	sub	_var01, arg01
1f12c     02 00 66 F0 | 	shl	_var01, #2
1f130     00 FB 01 F1 | 	add	result1, _var01
1f134     14 FA 05 F1 | 	add	result1, #20
1f138     FD FA 01 FB | 	rdlong	result1, result1
1f13c     13 00 00 FF 
1f140     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1f144                 | _usbnew_spin2_hidpad_buttons_ret
1f144     2D 00 64 FD | 	ret
1f148                 | 
1f148                 | ' 
1f148                 | ' '' Get state of an axis (normalized between -32768 and 32767)
1f148                 | ' PUB hidpad_axis(dev,axnum) : r
1f148                 | _usbnew_spin2_hidpad_axis
1f148                 | '   if axnum +>= 6
1f148     06 14 16 F2 | 	cmp	arg02, #6 wc
1f14c                 | '     return 0
1f14c     00 FA 05 36 |  if_ae	mov	result1, #0
1f150     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
1f154                 | '   else 
1f154                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
1f154     13 00 00 FF 
1f158     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1f15c     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1f160     09 01 02 F6 | 	mov	_var01, arg01
1f164     03 00 66 F0 | 	shl	_var01, #3
1f168     09 01 82 F1 | 	sub	_var01, arg01
1f16c     02 00 66 F0 | 	shl	_var01, #2
1f170     00 FB 01 F1 | 	add	result1, _var01
1f174     04 00 06 F6 | 	mov	_var01, #4
1f178     0A 01 02 F1 | 	add	_var01, arg02
1f17c     01 00 66 F0 | 	shl	_var01, #1
1f180     FD 00 02 F1 | 	add	_var01, result1
1f184     00 FB E1 FA | 	rdword	result1, _var01
1f188     0F FA 65 F7 | 	signx	result1, #15
1f18c     13 00 00 FF 
1f190     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1f194                 | _usbnew_spin2_hidpad_axis_ret
1f194     2D 00 64 FD | 	ret
1f198                 | 
1f198                 | ' 
1f198                 | ' 
1f198                 | ' '--------------------------------------------------------------
1f198                 | ' '---------- Init the variables, start the cog. ----------------
1f198                 | ' '--------------------------------------------------------------
1f198                 | ' 
1f198                 | ' pub start(mbox,scope,cache) :cog,base | iii
1f198                 | _audio096_spin2_start
1f198     04 4A 05 F6 | 	mov	COUNT_, #4
1f19c     A8 00 A0 FD | 	call	#pushregs_
1f1a0     09 1F 02 F6 | 	mov	local01, arg01
1f1a4                 | ' 
1f1a4                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
1f1a4                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
1f1a4                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
1f1a4                 | ' 
1f1a4                 | ' mailboxaddr:=mbox 
1f1a4     F2 1E 62 FC | 	wrlong	local01, objptr
1f1a8                 | ' scope_ptr:=scope
1f1a8     04 E4 05 F1 | 	add	objptr, #4
1f1ac     F2 14 62 FC | 	wrlong	arg02, objptr
1f1b0                 | ' cache_ptr:=cache
1f1b0     04 E4 05 F1 | 	add	objptr, #4
1f1b4     F2 16 62 FC | 	wrlong	arg03, objptr
1f1b8                 | ' base:=@channel1[0]
1f1b8     04 E4 05 F1 | 	add	objptr, #4
1f1bc     F2 20 02 F6 | 	mov	local02, objptr
1f1c0                 | ' long[$40]:=mbox
1f1c0     40 1E 66 FC | 	wrlong	local01, #64
1f1c4                 | ' repeat iii from 0 to 7
1f1c4     00 22 06 F6 | 	mov	local03, #0
1f1c8     02 00 00 FF 
1f1cc     A0 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1184
1f1d0     0C E4 85 F1 | 	sub	objptr, #12
1f1d4     97 BC 48 FB | 	callpa	#(@LR__2541-@LR__2540)>>2,fcache_load_ptr_
1f1d8                 | LR__2540
1f1d8                 | '   long[base+64*iii]:=0
1f1d8     10 1F 02 F6 | 	mov	local01, local02
1f1dc     11 FD 01 F6 | 	mov	result2, local03
1f1e0     06 FC 65 F0 | 	shl	result2, #6
1f1e4     FE 1E 02 F1 | 	add	local01, result2
1f1e8     0F 01 68 FC | 	wrlong	#0, local01
1f1ec                 | '   long[base+64*iii+4]:=0
1f1ec     10 1F 02 F6 | 	mov	local01, local02
1f1f0     11 FD 01 F6 | 	mov	result2, local03
1f1f4     06 FC 65 F0 | 	shl	result2, #6
1f1f8     FE 1E 02 F1 | 	add	local01, result2
1f1fc     04 1E 06 F1 | 	add	local01, #4
1f200     0F 01 68 FC | 	wrlong	#0, local01
1f204                 | '   long[base+64*iii+12]:=0
1f204     10 25 02 F6 | 	mov	local04, local02
1f208     11 1F 02 F6 | 	mov	local01, local03
1f20c     06 1E 66 F0 | 	shl	local01, #6
1f210     0F 25 02 F1 | 	add	local04, local01
1f214     0C 24 06 F1 | 	add	local04, #12
1f218     12 01 68 FC | 	wrlong	#0, local04
1f21c                 | '   long[base+64*iii+16]:=2 
1f21c     10 25 02 F6 | 	mov	local04, local02
1f220     11 1F 02 F6 | 	mov	local01, local03
1f224     06 1E 66 F0 | 	shl	local01, #6
1f228     0F 25 02 F1 | 	add	local04, local01
1f22c     10 24 06 F1 | 	add	local04, #16
1f230     12 05 68 FC | 	wrlong	#2, local04
1f234                 | '   word[base+64*iii+20]:=0
1f234     10 25 02 F6 | 	mov	local04, local02
1f238     11 1F 02 F6 | 	mov	local01, local03
1f23c     06 1E 66 F0 | 	shl	local01, #6
1f240     0F 25 02 F1 | 	add	local04, local01
1f244     14 24 06 F1 | 	add	local04, #20
1f248     12 01 58 FC | 	wrword	#0, local04
1f24c                 | '   word[base+64*iii+22]:=8192
1f24c     10 25 02 F6 | 	mov	local04, local02
1f250     11 1F 02 F6 | 	mov	local01, local03
1f254     06 1E 66 F0 | 	shl	local01, #6
1f258     0F 25 02 F1 | 	add	local04, local01
1f25c     16 24 06 F1 | 	add	local04, #22
1f260     10 00 80 FF 
1f264     12 01 58 FC | 	wrword	##8192, local04
1f268                 | '   word[base+64*iii+24]:=4000+2*iii
1f268     11 25 02 F6 | 	mov	local04, local03
1f26c     01 24 66 F0 | 	shl	local04, #1
1f270     07 00 00 FF 
1f274     A0 1F 06 F6 | 	mov	local01, ##4000
1f278     12 1F 02 F1 | 	add	local01, local04
1f27c     10 25 02 F6 | 	mov	local04, local02
1f280     11 FD 01 F6 | 	mov	result2, local03
1f284     06 FC 65 F0 | 	shl	result2, #6
1f288     FE 24 02 F1 | 	add	local04, result2
1f28c     18 24 06 F1 | 	add	local04, #24
1f290     12 1F 52 FC | 	wrword	local01, local04
1f294                 | '   word[base+64*iii+26]:=2
1f294     10 25 02 F6 | 	mov	local04, local02
1f298     11 1F 02 F6 | 	mov	local01, local03
1f29c     06 1E 66 F0 | 	shl	local01, #6
1f2a0     0F 25 02 F1 | 	add	local04, local01
1f2a4     1A 24 06 F1 | 	add	local04, #26
1f2a8     12 05 58 FC | 	wrword	#2, local04
1f2ac                 | '   long [base+64*iii+8]:=@null | $C0000000
1f2ac     F4 1E 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
1f2b0     3E 1E 26 F4 | 	bith	local01, #62
1f2b4     10 25 02 F6 | 	mov	local04, local02
1f2b8     11 17 02 F6 | 	mov	arg03, local03
1f2bc     06 16 66 F0 | 	shl	arg03, #6
1f2c0     0B 25 02 F1 | 	add	local04, arg03
1f2c4     08 24 06 F1 | 	add	local04, #8
1f2c8     12 1F 62 FC | 	wrlong	local01, local04
1f2cc                 | '   long[base+64*iii+32]:=0
1f2cc     10 25 02 F6 | 	mov	local04, local02
1f2d0     11 1F 02 F6 | 	mov	local01, local03
1f2d4     06 1E 66 F0 | 	shl	local01, #6
1f2d8     0F 25 02 F1 | 	add	local04, local01
1f2dc     20 24 06 F1 | 	add	local04, #32
1f2e0     12 01 68 FC | 	wrlong	#0, local04
1f2e4                 | '   long[base+64*iii+36]:=0
1f2e4     10 25 02 F6 | 	mov	local04, local02
1f2e8     11 1F 02 F6 | 	mov	local01, local03
1f2ec     06 1E 66 F0 | 	shl	local01, #6
1f2f0     0F 25 02 F1 | 	add	local04, local01
1f2f4     24 24 06 F1 | 	add	local04, #36
1f2f8     12 01 68 FC | 	wrlong	#0, local04
1f2fc                 | '   long[base+64*iii+40]:=0
1f2fc     10 25 02 F6 | 	mov	local04, local02
1f300     11 1F 02 F6 | 	mov	local01, local03
1f304     06 1E 66 F0 | 	shl	local01, #6
1f308     0F 25 02 F1 | 	add	local04, local01
1f30c     28 24 06 F1 | 	add	local04, #40
1f310     12 01 68 FC | 	wrlong	#0, local04
1f314                 | '   long[base+64*iii+44]:=0
1f314     10 25 02 F6 | 	mov	local04, local02
1f318     11 1F 02 F6 | 	mov	local01, local03
1f31c     06 1E 66 F0 | 	shl	local01, #6
1f320     0F 25 02 F1 | 	add	local04, local01
1f324     2C 24 06 F1 | 	add	local04, #44
1f328     12 01 68 FC | 	wrlong	#0, local04
1f32c                 | '   long[base+64*iii+28]:=0
1f32c     10 25 02 F6 | 	mov	local04, local02
1f330     11 1F 02 F6 | 	mov	local01, local03
1f334     06 1E 66 F0 | 	shl	local01, #6
1f338     0F 25 02 F1 | 	add	local04, local01
1f33c     1C 24 06 F1 | 	add	local04, #28
1f340     12 01 68 FC | 	wrlong	#0, local04
1f344     01 22 06 F1 | 	add	local03, #1
1f348     08 22 56 F2 | 	cmps	local03, #8 wc
1f34c     88 FE 9F CD |  if_b	jmp	#LR__2540
1f350                 | LR__2541
1f350     02 00 00 FF 
1f354     A0 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1184
1f358                 | '   
1f358                 | ' cog:=coginit(16,@audio,@mailboxaddr)
1f358     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
1f35c     F2 16 02 F6 | 	mov	arg03, objptr
1f360     10 24 06 F6 | 	mov	local04, #16
1f364     28 16 62 FD | 	setq	arg03
1f368     0A 25 F2 FC | 	coginit	local04, arg02 wc
1f36c     01 24 66 C6 |  if_b	neg	local04, #1
1f370                 | ' waitms(100)
1f370     64 12 06 F6 | 	mov	arg01, #100
1f374     78 07 B0 FD | 	call	#__system___waitms
1f378                 | ' return cog,base
1f378     10 FD 01 F6 | 	mov	result2, local02
1f37c     12 FB 01 F6 | 	mov	result1, local04
1f380     A7 F0 03 F6 | 	mov	ptra, fp
1f384     B2 00 A0 FD | 	call	#popregs_
1f388                 | _audio096_spin2_start_ret
1f388     2D 00 64 FD | 	ret
1f38c                 | 
1f38c                 | ' 
1f38c                 | ' ' a simple play procedure to not poke everything. 
1f38c                 | ' 
1f38c                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
1f38c                 | _audio096_spin2_play
1f38c     0C E4 05 F1 | 	add	objptr, #12
1f390     F2 00 02 F6 | 	mov	_var01, objptr
1f394     06 12 66 F0 | 	shl	arg01, #6
1f398     09 01 02 F1 | 	add	_var01, arg01
1f39c     00 13 02 F6 | 	mov	arg01, _var01
1f3a0     0C 12 06 F1 | 	add	arg01, #12
1f3a4     09 1B 62 FC | 	wrlong	arg05, arg01
1f3a8     00 1C 56 F2 | 	cmps	arg06, #0 wc
1f3ac     00 13 02 36 |  if_ae	mov	arg01, _var01
1f3b0     10 12 06 31 |  if_ae	add	arg01, #16
1f3b4     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
1f3b8     02 1A 06 C1 |  if_b	add	arg05, #2
1f3bc     00 13 02 C6 |  if_b	mov	arg01, _var01
1f3c0     10 12 06 C1 |  if_b	add	arg01, #16
1f3c4     09 1B 62 CC |  if_b	wrlong	arg05, arg01
1f3c8     0B 13 52 F6 | 	abs	arg01, arg03 wc
1f3cc     0F 1B 80 FF 
1f3d0     09 1F 1A FD | 	qdiv	##3546895, arg01
1f3d4                 | ' 
1f3d4                 | ' base2:=@channel1[0]+64*channel
1f3d4                 | ' 
1f3d4                 | ' 
1f3d4                 | ' long[base2+12]:= len
1f3d4                 | ' if loop >=0 
1f3d4                 | '   long[base2+16]:= loop
1f3d4     0C E4 85 F1 | 	sub	objptr, #12
1f3d8                 | ' else
1f3d8                 | '   long[base2+16]:= len+2
1f3d8                 | ' word[base2+20]:=vol
1f3d8     00 13 02 F6 | 	mov	arg01, _var01
1f3dc     14 12 06 F1 | 	add	arg01, #20
1f3e0     09 19 52 FC | 	wrword	arg04, arg01
1f3e4                 | ' word[base2+24]:= 3546895/splfreq 
1f3e4     00 19 02 F6 | 	mov	arg04, _var01
1f3e8     18 18 06 F1 | 	add	arg04, #24
1f3ec                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
1f3ec                 | ' long[base2+28]:=$40000000    
1f3ec                 | ' long[base2+32]:=0    
1f3ec                 | ' long[base2+36]:=0    
1f3ec                 | ' long[base2+40]:=0    
1f3ec                 | ' long[base2+44]:=0    
1f3ec                 | ' long[base2+8]:=sample+$C0000000     
1f3ec     00 00 60 FF 
1f3f0     00 14 06 F1 | 	add	arg02, ##-1073741824
1f3f4     18 12 62 FD | 	getqx	arg01
1f3f8     09 13 82 F6 | 	negc	arg01, arg01
1f3fc     0C 13 52 FC | 	wrword	arg01, arg04
1f400     00 13 02 F6 | 	mov	arg01, _var01
1f404     1A 12 06 F1 | 	add	arg01, #26
1f408     09 01 5A FC | 	wrword	#256, arg01
1f40c     00 13 02 F6 | 	mov	arg01, _var01
1f410     1C 12 06 F1 | 	add	arg01, #28
1f414     00 00 A0 FF 
1f418     09 01 68 FC | 	wrlong	##1073741824, arg01
1f41c     00 13 02 F6 | 	mov	arg01, _var01
1f420     20 12 06 F1 | 	add	arg01, #32
1f424     09 01 68 FC | 	wrlong	#0, arg01
1f428     00 13 02 F6 | 	mov	arg01, _var01
1f42c     24 12 06 F1 | 	add	arg01, #36
1f430     09 01 68 FC | 	wrlong	#0, arg01
1f434     00 13 02 F6 | 	mov	arg01, _var01
1f438     28 12 06 F1 | 	add	arg01, #40
1f43c     09 01 68 FC | 	wrlong	#0, arg01
1f440     00 13 02 F6 | 	mov	arg01, _var01
1f444     2C 12 06 F1 | 	add	arg01, #44
1f448     09 01 68 FC | 	wrlong	#0, arg01
1f44c     08 00 06 F1 | 	add	_var01, #8
1f450     00 15 62 FC | 	wrlong	arg02, _var01
1f454                 | _audio096_spin2_play_ret
1f454     2D 00 64 FD | 	ret
1f458                 | 
1f458                 | ' 
1f458                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
1f458                 | _audio096_spin2_play8
1f458                 | ' 
1f458                 | ' base2:=@channel1[0]+64*channel
1f458     0C E4 05 F1 | 	add	objptr, #12
1f45c     F2 00 02 F6 | 	mov	_var01, objptr
1f460     06 12 66 F0 | 	shl	arg01, #6
1f464     09 01 02 F1 | 	add	_var01, arg01
1f468                 | ' long[base2]:=0
1f468     00 01 68 FC | 	wrlong	#0, _var01
1f46c                 | ' long[base2+8]:=sample+$40000000 
1f46c     00 00 20 FF 
1f470     00 14 06 F1 | 	add	arg02, ##1073741824
1f474     00 13 02 F6 | 	mov	arg01, _var01
1f478     08 12 06 F1 | 	add	arg01, #8
1f47c     09 15 62 FC | 	wrlong	arg02, arg01
1f480                 | ' if loop>=0
1f480     00 1C 56 F2 | 	cmps	arg06, #0 wc
1f484     0C E4 85 F1 | 	sub	objptr, #12
1f488     1C 00 90 CD |  if_b	jmp	#LR__2550
1f48c                 | '   long[base2+12]:=loop
1f48c     00 15 02 F6 | 	mov	arg02, _var01
1f490     0C 14 06 F1 | 	add	arg02, #12
1f494     0A 1D 62 FC | 	wrlong	arg06, arg02
1f498                 | '   long[base2+16]:= len
1f498     00 1D 02 F6 | 	mov	arg06, _var01
1f49c     10 1C 06 F1 | 	add	arg06, #16
1f4a0     0E 1B 62 FC | 	wrlong	arg05, arg06
1f4a4     1C 00 90 FD | 	jmp	#LR__2551
1f4a8                 | LR__2550
1f4a8                 | ' else
1f4a8                 | '   long[base2+12]:= len
1f4a8     00 1D 02 F6 | 	mov	arg06, _var01
1f4ac     0C 1C 06 F1 | 	add	arg06, #12
1f4b0     0E 1B 62 FC | 	wrlong	arg05, arg06
1f4b4                 | '   long[base2+16]:= len+1
1f4b4     01 1A 06 F1 | 	add	arg05, #1
1f4b8     00 13 02 F6 | 	mov	arg01, _var01
1f4bc     10 12 06 F1 | 	add	arg01, #16
1f4c0     09 1B 62 FC | 	wrlong	arg05, arg01
1f4c4                 | LR__2551
1f4c4     0B 17 52 F6 | 	abs	arg03, arg03 wc
1f4c8     0F 1B 80 FF 
1f4cc     0B 1F 1A FD | 	qdiv	##3546895, arg03
1f4d0                 | ' word[base2+20]:=vol
1f4d0     00 17 02 F6 | 	mov	arg03, _var01
1f4d4     14 16 06 F1 | 	add	arg03, #20
1f4d8     0B 19 52 FC | 	wrword	arg04, arg03
1f4dc                 | ' word[base2+24]:= 3546895 /splfreq 
1f4dc     00 13 02 F6 | 	mov	arg01, _var01
1f4e0     18 12 06 F1 | 	add	arg01, #24
1f4e4                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
1f4e4     1A 00 06 F1 | 	add	_var01, #26
1f4e8     18 18 62 FD | 	getqx	arg04
1f4ec     0C 19 82 F6 | 	negc	arg04, arg04
1f4f0     09 19 52 FC | 	wrword	arg04, arg01
1f4f4     00 01 5A FC | 	wrword	#256, _var01
1f4f8                 | _audio096_spin2_play8_ret
1f4f8     2D 00 64 FD | 	ret
1f4fc                 | 
1f4fc                 | ' 'long[base2+28]:=$40000000
1f4fc                 | ' 
1f4fc                 | '     
1f4fc                 | ' pub stop(channel) 'silence it
1f4fc                 | _audio096_spin2_stop
1f4fc                 | ' 
1f4fc                 | ' word[@channel1[0]+64*channel+20]:=0
1f4fc     0C E4 05 F1 | 	add	objptr, #12
1f500     F2 00 02 F6 | 	mov	_var01, objptr
1f504     09 03 02 F6 | 	mov	_var02, arg01
1f508     06 02 66 F0 | 	shl	_var02, #6
1f50c     01 01 02 F1 | 	add	_var01, _var02
1f510     14 00 06 F1 | 	add	_var01, #20
1f514     00 01 58 FC | 	wrword	#0, _var01
1f518                 | ' word[@channel1[0]+64*channel+20]:=0
1f518     F2 00 02 F6 | 	mov	_var01, objptr
1f51c     06 12 66 F0 | 	shl	arg01, #6
1f520     09 01 02 F1 | 	add	_var01, arg01
1f524     14 00 06 F1 | 	add	_var01, #20
1f528     00 01 58 FC | 	wrword	#0, _var01
1f52c     0C E4 85 F1 | 	sub	objptr, #12
1f530                 | _audio096_spin2_stop_ret
1f530     2D 00 64 FD | 	ret
1f534                 | hubexit
1f534     81 00 80 FD | 	jmp	#cogexit
1f538                 | 
1f538                 | __system___setbaud
1f538     14 64 06 FB | 	rdlong	muldiva_, #20
1f53c     09 67 02 F6 | 	mov	muldivb_, arg01
1f540     BA 00 A0 FD | 	call	#divide_
1f544     97 06 48 FB | 	callpa	#(@LR__2561-@LR__2560)>>2,fcache_load_ptr_
1f548                 | LR__2560
1f548     3E FA 9D FA | 	rdpin	result1, #62 wc
1f54c     FE FC A1 F1 | 	subx	result2, result2
1f550     F4 FF 9F CD |  if_b	jmp	#LR__2560
1f554                 | LR__2561
1f554     40 7C 64 FD | 	dirl	#62
1f558     40 7E 64 FD | 	dirl	#63
1f55c     F3 66 62 FC | 	wrlong	muldivb_, ptr___system__dat__
1f560     10 66 66 F0 | 	shl	muldivb_, #16
1f564     07 14 06 F6 | 	mov	arg02, #7
1f568     33 15 02 F1 | 	add	arg02, muldivb_
1f56c     3E F8 0C FC | 	wrpin	#124, #62
1f570     3E 14 16 FC | 	wxpin	arg02, #62
1f574     3F 7C 0C FC | 	wrpin	#62, #63
1f578     14 14 06 F1 | 	add	arg02, #20
1f57c     3F 14 16 FC | 	wxpin	arg02, #63
1f580     41 7C 64 FD | 	dirh	#62
1f584     41 7E 64 FD | 	dirh	#63
1f588                 | __system___setbaud_ret
1f588     2D 00 64 FD | 	ret
1f58c                 | 
1f58c                 | __system___txraw
1f58c     01 4A 05 F6 | 	mov	COUNT_, #1
1f590     A8 00 A0 FD | 	call	#pushregs_
1f594     09 1F 02 F6 | 	mov	local01, arg01
1f598     97 06 48 FB | 	callpa	#(@LR__2571-@LR__2570)>>2,fcache_load_ptr_
1f59c                 | LR__2570
1f59c     3E FA 9D FA | 	rdpin	result1, #62 wc
1f5a0     FE FC A1 F1 | 	subx	result2, result2
1f5a4     F4 FF 9F CD |  if_b	jmp	#LR__2570
1f5a8                 | LR__2571
1f5a8     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
1f5ac     C2 01 00 AF 
1f5b0     00 12 06 A6 |  if_e	mov	arg01, ##230400
1f5b4     80 FF BF AD |  if_e	call	#__system___setbaud
1f5b8     58 7C 64 FD | 	drvl	#62
1f5bc     3E 1E 26 FC | 	wypin	local01, #62
1f5c0     01 FA 05 F6 | 	mov	result1, #1
1f5c4     A7 F0 03 F6 | 	mov	ptra, fp
1f5c8     B2 00 A0 FD | 	call	#popregs_
1f5cc                 | __system___txraw_ret
1f5cc     2D 00 64 FD | 	ret
1f5d0                 | 
1f5d0                 | __system___rxraw
1f5d0     0D 4A 05 F6 | 	mov	COUNT_, #13
1f5d4     A8 00 A0 FD | 	call	#pushregs_
1f5d8     09 1F 02 F6 | 	mov	local01, arg01
1f5dc     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1f5e0     C2 01 00 AF 
1f5e4     00 12 06 A6 |  if_e	mov	arg01, ##230400
1f5e8     4C FF BF AD |  if_e	call	#__system___setbaud
1f5ec     00 1E 0E F2 | 	cmp	local01, #0 wz
1f5f0     20 00 90 AD |  if_e	jmp	#LR__2580
1f5f4     14 22 06 FB | 	rdlong	local03, #20
1f5f8     0A 22 46 F0 | 	shr	local03, #10
1f5fc     11 1F 02 FD | 	qmul	local01, local03
1f600     1A FA 61 FD | 	getct	result1
1f604     18 24 62 FD | 	getqx	local04
1f608     12 FB 01 F1 | 	add	result1, local04
1f60c     FD 26 02 F6 | 	mov	local05, result1
1f610     04 00 90 FD | 	jmp	#LR__2581
1f614                 | LR__2580
1f614     00 26 06 F6 | 	mov	local05, #0
1f618                 | LR__2581
1f618     01 28 66 F6 | 	neg	local06, #1
1f61c     3F 2A 06 F6 | 	mov	local07, #63
1f620     00 2C 06 F6 | 	mov	local08, #0
1f624     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1f628     F3 2E 02 FB | 	rdlong	local09, ptr___system__dat__
1f62c     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
1f630                 | LR__2582
1f630     08 2E 16 F4 | 	testb	local09, #8 wc
1f634     09 2E 76 F4 | 	testbn	local09, #9 andc
1f638     0A 2E 46 F0 | 	shr	local09, #10
1f63c     01 2C 06 C6 |  if_b	mov	local08, #1
1f640     40 7E 6C 3D |  if_ae	testp	#63 wz
1f644     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
1f648     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
1f64c     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
1f650                 | LR__2583
1f650     00 20 06 F6 | 	mov	local02, #0
1f654     00 2C 0E F2 | 	cmp	local08, #0 wz
1f658     01 20 66 56 |  if_ne	neg	local02, #1
1f65c     00 30 06 F6 | 	mov	local10, #0
1f660     00 22 06 F6 | 	mov	local03, #0
1f664     00 1E 0E F2 | 	cmp	local01, #0 wz
1f668     01 22 66 56 |  if_ne	neg	local03, #1
1f66c     00 24 06 F6 | 	mov	local04, #0
1f670     00 32 06 F6 | 	mov	local11, #0
1f674     1A FA 61 FD | 	getct	result1
1f678     FD 34 02 F6 | 	mov	local12, result1
1f67c     1A 37 02 F6 | 	mov	local13, local12
1f680     13 37 82 F1 | 	sub	local13, local05
1f684     00 36 56 F2 | 	cmps	local13, #0 wc
1f688     00 32 26 C6 |  if_b	not	local11, #0
1f68c     00 32 0E F2 | 	cmp	local11, #0 wz
1f690     00 24 26 56 |  if_ne	not	local04, #0
1f694     12 23 CA F7 | 	test	local03, local04 wz
1f698     00 30 26 56 |  if_ne	not	local10, #0
1f69c     18 21 4A F5 | 	or	local02, local10 wz
1f6a0     8C FF 9F AD |  if_e	jmp	#LR__2582
1f6a4     00 2C 0E F2 | 	cmp	local08, #0 wz
1f6a8     17 29 02 56 |  if_ne	mov	local06, local09
1f6ac     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
1f6b0     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1f6b4     F3 2E 62 FC | 	wrlong	local09, ptr___system__dat__
1f6b8     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
1f6bc     14 FB 01 F6 | 	mov	result1, local06
1f6c0     A7 F0 03 F6 | 	mov	ptra, fp
1f6c4     B2 00 A0 FD | 	call	#popregs_
1f6c8                 | __system___rxraw_ret
1f6c8     2D 00 64 FD | 	ret
1f6cc                 | 
1f6cc                 | __system___getus
1f6cc     1A FC 71 FD | 	getct	result2 wc
1f6d0     1A 00 62 FD | 	getct	_var01
1f6d4     10 E6 05 F1 | 	add	ptr___system__dat__, #16
1f6d8     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
1f6dc     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1f6e0     20 00 90 5D |  if_ne	jmp	#LR__2590
1f6e4     14 02 06 FB | 	rdlong	_var02, #20
1f6e8     A1 07 00 FF 
1f6ec     40 02 16 FD | 	qdiv	_var02, ##1000000
1f6f0     10 E6 05 F1 | 	add	ptr___system__dat__, #16
1f6f4     18 FA 61 FD | 	getqx	result1
1f6f8     FD 02 02 F6 | 	mov	_var02, result1
1f6fc     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
1f700     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1f704                 | LR__2590
1f704     01 FD 11 FD | 	qdiv	result2, _var02
1f708     19 FC 61 FD | 	getqy	result2
1f70c     28 FC 61 FD | 	setq	result2
1f710     01 01 12 FD | 	qdiv	_var01, _var02
1f714     18 FA 61 FD | 	getqx	result1
1f718                 | __system___getus_ret
1f718     2D 00 64 FD | 	ret
1f71c                 | 
1f71c                 | __system____builtin_memmove
1f71c     09 01 02 F6 | 	mov	_var01, arg01
1f720     0A 13 52 F2 | 	cmps	arg01, arg02 wc
1f724     10 00 90 CD |  if_b	jmp	#LR__2600
1f728     0A 03 02 F6 | 	mov	_var02, arg02
1f72c     0B 03 02 F1 | 	add	_var02, arg03
1f730     01 13 52 F2 | 	cmps	arg01, _var02 wc
1f734     48 00 90 CD |  if_b	jmp	#LR__2606
1f738                 | LR__2600
1f738     0B 05 02 F6 | 	mov	_var03, arg03
1f73c     02 04 4E F0 | 	shr	_var03, #2 wz
1f740     18 00 90 AD |  if_e	jmp	#LR__2605
1f744     97 0A 48 FB | 	callpa	#(@LR__2603-@LR__2601)>>2,fcache_load_ptr_
1f748                 | LR__2601
1f748     02 09 D8 FC | 	rep	@LR__2604, _var03
1f74c                 | LR__2602
1f74c     0A 05 02 FB | 	rdlong	_var03, arg02
1f750     09 05 62 FC | 	wrlong	_var03, arg01
1f754     04 12 06 F1 | 	add	arg01, #4
1f758     04 14 06 F1 | 	add	arg02, #4
1f75c                 | LR__2603
1f75c                 | LR__2604
1f75c                 | LR__2605
1f75c     02 16 CE F7 | 	test	arg03, #2 wz
1f760     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
1f764     09 03 52 5C |  if_ne	wrword	_var02, arg01
1f768     02 12 06 51 |  if_ne	add	arg01, #2
1f76c     02 14 06 51 |  if_ne	add	arg02, #2
1f770     01 16 CE F7 | 	test	arg03, #1 wz
1f774     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
1f778     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
1f77c     28 00 90 FD | 	jmp	#LR__2612
1f780                 | LR__2606
1f780     0B 13 02 F1 | 	add	arg01, arg03
1f784     0B 15 02 F1 | 	add	arg02, arg03
1f788     0B 07 0A F6 | 	mov	_var04, arg03 wz
1f78c     18 00 90 AD |  if_e	jmp	#LR__2611
1f790     97 0A 48 FB | 	callpa	#(@LR__2609-@LR__2607)>>2,fcache_load_ptr_
1f794                 | LR__2607
1f794     03 09 D8 FC | 	rep	@LR__2610, _var04
1f798                 | LR__2608
1f798     01 12 86 F1 | 	sub	arg01, #1
1f79c     01 14 86 F1 | 	sub	arg02, #1
1f7a0     0A 03 C2 FA | 	rdbyte	_var02, arg02
1f7a4     09 03 42 FC | 	wrbyte	_var02, arg01
1f7a8                 | LR__2609
1f7a8                 | LR__2610
1f7a8                 | LR__2611
1f7a8                 | LR__2612
1f7a8     00 FB 01 F6 | 	mov	result1, _var01
1f7ac                 | __system____builtin_memmove_ret
1f7ac     2D 00 64 FD | 	ret
1f7b0                 | 
1f7b0                 | __system____builtin_strcpy
1f7b0     09 01 02 F6 | 	mov	_var01, arg01
1f7b4     97 0A 48 FB | 	callpa	#(@LR__2621-@LR__2620)>>2,fcache_load_ptr_
1f7b8                 | LR__2620
1f7b8     0A FB C9 FA | 	rdbyte	result1, arg02 wz
1f7bc     09 FB 41 FC | 	wrbyte	result1, arg01
1f7c0     01 14 06 F1 | 	add	arg02, #1
1f7c4     01 12 06 F1 | 	add	arg01, #1
1f7c8     EC FF 9F 5D |  if_ne	jmp	#LR__2620
1f7cc                 | LR__2621
1f7cc     00 FB 01 F6 | 	mov	result1, _var01
1f7d0                 | __system____builtin_strcpy_ret
1f7d0     2D 00 64 FD | 	ret
1f7d4                 | 
1f7d4                 | __system____topofstack
1f7d4     00 4A 05 F6 | 	mov	COUNT_, #0
1f7d8     A8 00 A0 FD | 	call	#pushregs_
1f7dc     08 F0 07 F1 | 	add	ptra, #8
1f7e0     04 4E 05 F1 | 	add	fp, #4
1f7e4     A7 12 62 FC | 	wrlong	arg01, fp
1f7e8     A7 FA 01 F6 | 	mov	result1, fp
1f7ec     04 4E 85 F1 | 	sub	fp, #4
1f7f0     A7 F0 03 F6 | 	mov	ptra, fp
1f7f4     B2 00 A0 FD | 	call	#popregs_
1f7f8                 | __system____topofstack_ret
1f7f8     2D 00 64 FD | 	ret
1f7fc                 | 
1f7fc                 | __system___lockmem
1f7fc     00 FA 05 F6 | 	mov	result1, #0
1f800     01 FA 61 FD | 	cogid	result1
1f804     00 FB 05 F1 | 	add	result1, #256
1f808                 | LR__2630
1f808     09 01 0A FB | 	rdlong	_var01, arg01 wz
1f80c     09 FB 61 AC |  if_e	wrlong	result1, arg01
1f810     09 01 02 AB |  if_e	rdlong	_var01, arg01
1f814     09 01 02 AB |  if_e	rdlong	_var01, arg01
1f818     FD 00 0A F2 | 	cmp	_var01, result1 wz
1f81c     E8 FF 9F 5D |  if_ne	jmp	#LR__2630
1f820                 | __system___lockmem_ret
1f820     2D 00 64 FD | 	ret
1f824                 | 
1f824                 | __system___string_cmp
1f824     97 14 48 FB | 	callpa	#(@LR__2641-@LR__2640)>>2,fcache_load_ptr_
1f828                 | LR__2640
1f828     09 01 C2 FA | 	rdbyte	_var01, arg01
1f82c     0A 03 C2 FA | 	rdbyte	_var02, arg02
1f830     00 05 02 F6 | 	mov	_var03, _var01
1f834     01 05 8A F1 | 	sub	_var03, _var02 wz
1f838     01 12 06 F1 | 	add	arg01, #1
1f83c     01 14 06 F1 | 	add	arg02, #1
1f840     0C 00 90 5D |  if_ne	jmp	#LR__2642
1f844     00 00 0E F2 | 	cmp	_var01, #0 wz
1f848     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
1f84c     D8 FF 9F 5D |  if_ne	jmp	#LR__2640
1f850                 | LR__2641
1f850                 | LR__2642
1f850     02 FB 01 F6 | 	mov	result1, _var03
1f854                 | __system___string_cmp_ret
1f854     2D 00 64 FD | 	ret
1f858                 | 
1f858                 | __system___string_concat
1f858     05 4A 05 F6 | 	mov	COUNT_, #5
1f85c     A8 00 A0 FD | 	call	#pushregs_
1f860     09 1F 02 F6 | 	mov	local01, arg01
1f864     0A 21 02 F6 | 	mov	local02, arg02
1f868     0F 13 02 F6 | 	mov	arg01, local01
1f86c     09 23 02 F6 | 	mov	local03, arg01
1f870     97 06 48 FB | 	callpa	#(@LR__2651-@LR__2650)>>2,fcache_load_ptr_
1f874                 | LR__2650
1f874     11 FB C9 FA | 	rdbyte	result1, local03 wz
1f878     01 22 06 51 |  if_ne	add	local03, #1
1f87c     F4 FF 9F 5D |  if_ne	jmp	#LR__2650
1f880                 | LR__2651
1f880     09 23 82 F1 | 	sub	local03, arg01
1f884     11 25 02 F6 | 	mov	local04, local03
1f888     10 13 02 F6 | 	mov	arg01, local02
1f88c     09 23 02 F6 | 	mov	local03, arg01
1f890     97 06 48 FB | 	callpa	#(@LR__2653-@LR__2652)>>2,fcache_load_ptr_
1f894                 | LR__2652
1f894     11 FB C9 FA | 	rdbyte	result1, local03 wz
1f898     01 22 06 51 |  if_ne	add	local03, #1
1f89c     F4 FF 9F 5D |  if_ne	jmp	#LR__2652
1f8a0                 | LR__2653
1f8a0     09 23 82 F1 | 	sub	local03, arg01
1f8a4     12 13 02 F6 | 	mov	arg01, local04
1f8a8     11 13 02 F1 | 	add	arg01, local03
1f8ac     01 12 06 F1 | 	add	arg01, #1
1f8b0     94 3D B0 FD | 	call	#__system___gc_alloc_managed
1f8b4     FD 26 0A F6 | 	mov	local05, result1 wz
1f8b8     28 00 90 AD |  if_e	jmp	#LR__2654
1f8bc     13 13 02 F6 | 	mov	arg01, local05
1f8c0     0F 15 02 F6 | 	mov	arg02, local01
1f8c4     12 17 02 F6 | 	mov	arg03, local04
1f8c8     50 FE BF FD | 	call	#__system____builtin_memmove
1f8cc     13 13 02 F6 | 	mov	arg01, local05
1f8d0     12 13 02 F1 | 	add	arg01, local04
1f8d4     01 22 06 F1 | 	add	local03, #1
1f8d8     10 15 02 F6 | 	mov	arg02, local02
1f8dc     11 17 02 F6 | 	mov	arg03, local03
1f8e0     38 FE BF FD | 	call	#__system____builtin_memmove
1f8e4                 | LR__2654
1f8e4     13 FB 01 F6 | 	mov	result1, local05
1f8e8     A7 F0 03 F6 | 	mov	ptra, fp
1f8ec     B2 00 A0 FD | 	call	#popregs_
1f8f0                 | __system___string_concat_ret
1f8f0     2D 00 64 FD | 	ret
1f8f4                 | 
1f8f4                 | __system___tx
1f8f4     02 4A 05 F6 | 	mov	COUNT_, #2
1f8f8     A8 00 A0 FD | 	call	#pushregs_
1f8fc     09 1F 02 F6 | 	mov	local01, arg01
1f900     0A 1E 0E F2 | 	cmp	local01, #10 wz
1f904     18 00 90 5D |  if_ne	jmp	#LR__2660
1f908     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1f90c     F3 20 02 FB | 	rdlong	local02, ptr___system__dat__
1f910     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1f914     02 20 CE F7 | 	test	local02, #2 wz
1f918     0D 12 06 56 |  if_ne	mov	arg01, #13
1f91c     6C FC BF 5D |  if_ne	call	#__system___txraw
1f920                 | LR__2660
1f920     0F 13 02 F6 | 	mov	arg01, local01
1f924     64 FC BF FD | 	call	#__system___txraw
1f928     A7 F0 03 F6 | 	mov	ptra, fp
1f92c     B2 00 A0 FD | 	call	#popregs_
1f930                 | __system___tx_ret
1f930     2D 00 64 FD | 	ret
1f934                 | 
1f934                 | __system___rx
1f934     01 4A 05 F6 | 	mov	COUNT_, #1
1f938     A8 00 A0 FD | 	call	#pushregs_
1f93c                 | LR__2670
1f93c     00 12 06 F6 | 	mov	arg01, #0
1f940     8C FC BF FD | 	call	#__system___rxraw
1f944     FD 1E 02 F6 | 	mov	local01, result1
1f948     FF FF 7F FF 
1f94c     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
1f950     E8 FF 9F AD |  if_e	jmp	#LR__2670
1f954     0D 1E 0E F2 | 	cmp	local01, #13 wz
1f958     14 00 90 5D |  if_ne	jmp	#LR__2671
1f95c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1f960     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1f964     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1f968     02 FA CD F7 | 	test	result1, #2 wz
1f96c     0A 1E 06 56 |  if_ne	mov	local01, #10
1f970                 | LR__2671
1f970     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1f974     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1f978     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1f97c     01 12 CE F7 | 	test	arg01, #1 wz
1f980     1C 00 90 AD |  if_e	jmp	#LR__2674
1f984     7F 1E 0E F2 | 	cmp	local01, #127 wz
1f988     0C 00 90 5D |  if_ne	jmp	#LR__2672
1f98c     08 12 06 F6 | 	mov	arg01, #8
1f990     60 FF BF FD | 	call	#__system___tx
1f994     08 00 90 FD | 	jmp	#LR__2673
1f998                 | LR__2672
1f998     0F 13 02 F6 | 	mov	arg01, local01
1f99c     54 FF BF FD | 	call	#__system___tx
1f9a0                 | LR__2673
1f9a0                 | LR__2674
1f9a0     0F FB 01 F6 | 	mov	result1, local01
1f9a4     A7 F0 03 F6 | 	mov	ptra, fp
1f9a8     B2 00 A0 FD | 	call	#popregs_
1f9ac                 | __system___rx_ret
1f9ac     2D 00 64 FD | 	ret
1f9b0                 | 
1f9b0                 | __system___pinwrite
1f9b0     09 01 02 F6 | 	mov	_var01, arg01
1f9b4     1F 00 06 F5 | 	and	_var01, #31
1f9b8     20 12 CE F7 | 	test	arg01, #32 wz
1f9bc     06 12 46 F0 | 	shr	arg01, #6
1f9c0     09 13 CA F9 | 	bmask	arg01, arg01
1f9c4     00 13 62 F0 | 	shl	arg01, _var01
1f9c8     00 15 62 F0 | 	shl	arg02, _var01
1f9cc     1C 00 90 AD |  if_e	jmp	#LR__2680
1f9d0     09 F7 43 F5 | 	or	dirb, arg01
1f9d4     FD 01 02 F6 | 	mov	_var01, outb
1f9d8     09 01 22 F5 | 	andn	_var01, arg01
1f9dc     09 15 02 F5 | 	and	arg02, arg01
1f9e0     0A 01 42 F5 | 	or	_var01, arg02
1f9e4     00 FB 03 F6 | 	mov	outb, _var01
1f9e8     18 00 90 FD | 	jmp	#LR__2681
1f9ec                 | LR__2680
1f9ec     09 F5 43 F5 | 	or	dira, arg01
1f9f0     FC 01 02 F6 | 	mov	_var01, outa
1f9f4     09 01 22 F5 | 	andn	_var01, arg01
1f9f8     09 15 02 F5 | 	and	arg02, arg01
1f9fc     0A 01 42 F5 | 	or	_var01, arg02
1fa00     00 F9 03 F6 | 	mov	outa, _var01
1fa04                 | LR__2681
1fa04                 | __system___pinwrite_ret
1fa04     2D 00 64 FD | 	ret
1fa08                 | 
1fa08                 | __system___basic_read_line
1fa08     06 4A 05 F6 | 	mov	COUNT_, #6
1fa0c     A8 00 A0 FD | 	call	#pushregs_
1fa10     09 1F 02 F6 | 	mov	local01, arg01
1fa14     00 20 06 F6 | 	mov	local02, #0
1fa18     18 22 06 F6 | 	mov	local03, #24
1fa1c     00 24 06 F6 | 	mov	local04, #0
1fa20     18 12 06 F6 | 	mov	arg01, #24
1fa24     20 3C B0 FD | 	call	#__system___gc_alloc_managed
1fa28     FD 26 0A F6 | 	mov	local05, result1 wz
1fa2c     13 FB 01 A6 |  if_e	mov	result1, local05
1fa30     B0 00 90 AD |  if_e	jmp	#LR__2693
1fa34                 | LR__2690
1fa34     0F 13 02 F6 | 	mov	arg01, local01
1fa38     78 0B B0 FD | 	call	#__system___basic_get_char
1fa3c     FD 28 02 F6 | 	mov	local06, result1
1fa40     01 28 56 F2 | 	cmps	local06, #1 wc
1fa44     8C 00 90 CD |  if_b	jmp	#LR__2692
1fa48     0A 28 0E F2 | 	cmp	local06, #10 wz
1fa4c     10 00 90 5D |  if_ne	jmp	#LR__2691
1fa50     00 24 0E F2 | 	cmp	local04, #0 wz
1fa54     01 20 56 52 |  if_ne	cmps	local02, #1 wc
1fa58     01 20 86 11 |  if_a	sub	local02, #1
1fa5c     74 00 90 FD | 	jmp	#LR__2692
1fa60                 | LR__2691
1fa60     0D 28 0E F2 | 	cmp	local06, #13 wz
1fa64     01 24 06 A6 |  if_e	mov	local04, #1
1fa68     00 24 06 56 |  if_ne	mov	local04, #0
1fa6c     08 28 0E F2 | 	cmp	local06, #8 wz
1fa70     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
1fa74     01 20 56 A2 |  if_e	cmps	local02, #1 wc
1fa78     01 20 86 21 |  if_nc_and_z	sub	local02, #1
1fa7c     B4 FF 9F AD |  if_e	jmp	#LR__2690
1fa80     13 17 02 F6 | 	mov	arg03, local05
1fa84     10 17 02 F1 | 	add	arg03, local02
1fa88     0B 29 42 FC | 	wrbyte	local06, arg03
1fa8c     01 20 06 F1 | 	add	local02, #1
1fa90     11 21 0A F2 | 	cmp	local02, local03 wz
1fa94     9C FF 9F 5D |  if_ne	jmp	#LR__2690
1fa98     11 13 02 F6 | 	mov	arg01, local03
1fa9c     20 12 06 F1 | 	add	arg01, #32
1faa0     A4 3B B0 FD | 	call	#__system___gc_alloc_managed
1faa4     FD 28 0A F6 | 	mov	local06, result1 wz
1faa8     14 FB 01 A6 |  if_e	mov	result1, local06
1faac     34 00 90 AD |  if_e	jmp	#LR__2693
1fab0     14 13 02 F6 | 	mov	arg01, local06
1fab4     13 15 02 F6 | 	mov	arg02, local05
1fab8     11 17 02 F6 | 	mov	arg03, local03
1fabc     5C FC BF FD | 	call	#__system____builtin_memmove
1fac0     20 22 06 F1 | 	add	local03, #32
1fac4     13 13 02 F6 | 	mov	arg01, local05
1fac8     B8 3C B0 FD | 	call	#__system___gc_free
1facc     14 27 02 F6 | 	mov	local05, local06
1fad0     60 FF 9F FD | 	jmp	#LR__2690
1fad4                 | LR__2692
1fad4     13 29 02 F6 | 	mov	local06, local05
1fad8     10 29 02 F1 | 	add	local06, local02
1fadc     14 01 48 FC | 	wrbyte	#0, local06
1fae0     13 FB 01 F6 | 	mov	result1, local05
1fae4                 | LR__2693
1fae4     A7 F0 03 F6 | 	mov	ptra, fp
1fae8     B2 00 A0 FD | 	call	#popregs_
1faec                 | __system___basic_read_line_ret
1faec     2D 00 64 FD | 	ret
1faf0                 | 
1faf0                 | __system___waitms
1faf0     09 01 02 F6 | 	mov	_var01, arg01
1faf4     1A 02 62 FD | 	getct	_var02
1faf8     14 04 06 FB | 	rdlong	_var03, #20
1fafc     97 14 48 FB | 	callpa	#(@LR__2701-@LR__2700)>>2,fcache_load_ptr_
1fb00                 | LR__2700
1fb00     01 00 00 FF 
1fb04     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
1fb08     1C 00 90 CD |  if_b	jmp	#LR__2702
1fb0c     02 03 02 F1 | 	add	_var02, _var03
1fb10     01 13 02 F6 | 	mov	arg01, _var02
1fb14     00 12 66 FA | 	addct1	arg01, #0
1fb18     24 22 60 FD | 	waitct1
1fb1c     01 00 00 FF 
1fb20     E8 01 86 F1 | 	sub	_var01, ##1000
1fb24     D8 FF 9F FD | 	jmp	#LR__2700
1fb28                 | LR__2701
1fb28                 | LR__2702
1fb28     01 00 56 F2 | 	cmps	_var01, #1 wc
1fb2c     28 00 90 CD |  if_b	jmp	#LR__2703
1fb30     02 01 02 FD | 	qmul	_var01, _var03
1fb34     01 00 00 FF 
1fb38     E8 17 06 F6 | 	mov	arg03, ##1000
1fb3c     19 FA 61 FD | 	getqy	result1
1fb40     18 12 62 FD | 	getqx	arg01
1fb44     28 FA 61 FD | 	setq	result1
1fb48     0B 13 12 FD | 	qdiv	arg01, arg03
1fb4c     18 12 62 FD | 	getqx	arg01
1fb50     01 13 62 FA | 	addct1	arg01, _var02
1fb54     24 22 60 FD | 	waitct1
1fb58                 | LR__2703
1fb58                 | __system___waitms_ret
1fb58     2D 00 64 FD | 	ret
1fb5c                 | 
1fb5c                 | __system___waitus
1fb5c     09 01 02 F6 | 	mov	_var01, arg01
1fb60     1A 02 62 FD | 	getct	_var02
1fb64     14 04 06 FB | 	rdlong	_var03, #20
1fb68     97 14 48 FB | 	callpa	#(@LR__2711-@LR__2710)>>2,fcache_load_ptr_
1fb6c                 | LR__2710
1fb6c     A1 07 00 FF 
1fb70     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
1fb74     1C 00 90 CD |  if_b	jmp	#LR__2712
1fb78     02 03 02 F1 | 	add	_var02, _var03
1fb7c     01 13 02 F6 | 	mov	arg01, _var02
1fb80     00 12 66 FA | 	addct1	arg01, #0
1fb84     24 22 60 FD | 	waitct1
1fb88     A1 07 00 FF 
1fb8c     40 00 86 F1 | 	sub	_var01, ##1000000
1fb90     D8 FF 9F FD | 	jmp	#LR__2710
1fb94                 | LR__2711
1fb94                 | LR__2712
1fb94     01 00 56 F2 | 	cmps	_var01, #1 wc
1fb98     28 00 90 CD |  if_b	jmp	#LR__2713
1fb9c     02 01 02 FD | 	qmul	_var01, _var03
1fba0     A1 07 00 FF 
1fba4     40 16 06 F6 | 	mov	arg03, ##1000000
1fba8     19 FA 61 FD | 	getqy	result1
1fbac     18 12 62 FD | 	getqx	arg01
1fbb0     28 FA 61 FD | 	setq	result1
1fbb4     0B 13 12 FD | 	qdiv	arg01, arg03
1fbb8     18 FA 61 FD | 	getqx	result1
1fbbc     FD 02 62 FA | 	addct1	_var02, result1
1fbc0     24 22 60 FD | 	waitct1
1fbc4                 | LR__2713
1fbc4                 | __system___waitus_ret
1fbc4     2D 00 64 FD | 	ret
1fbc8                 | 
1fbc8                 | __system___mount
1fbc8     0B 4A 05 F6 | 	mov	COUNT_, #11
1fbcc     A8 00 A0 FD | 	call	#pushregs_
1fbd0     09 1F 02 F6 | 	mov	local01, arg01
1fbd4     0A 21 0A F6 | 	mov	local02, arg02 wz
1fbd8     01 22 66 F6 | 	neg	local03, #1
1fbdc     01 FA 65 A6 |  if_e	neg	result1, #1
1fbe0     98 02 90 AD |  if_e	jmp	#LR__2735
1fbe4     0F FB C1 FA | 	rdbyte	result1, local01
1fbe8     2F FA 0D F2 | 	cmp	result1, #47 wz
1fbec     28 00 90 5D |  if_ne	jmp	#LR__2722
1fbf0     0F 13 02 F6 | 	mov	arg01, local01
1fbf4     09 25 02 F6 | 	mov	local04, arg01
1fbf8     97 06 48 FB | 	callpa	#(@LR__2721-@LR__2720)>>2,fcache_load_ptr_
1fbfc                 | LR__2720
1fbfc     12 FB C9 FA | 	rdbyte	result1, local04 wz
1fc00     01 24 06 51 |  if_ne	add	local04, #1
1fc04     F4 FF 9F 5D |  if_ne	jmp	#LR__2720
1fc08                 | LR__2721
1fc08     09 25 82 F1 | 	sub	local04, arg01
1fc0c     12 FB 01 F6 | 	mov	result1, local04
1fc10     10 FA 55 F2 | 	cmps	result1, #16 wc
1fc14     14 00 90 CD |  if_b	jmp	#LR__2723
1fc18                 | LR__2722
1fc18     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1fc1c     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
1fc20     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1fc24     01 FA 65 F6 | 	neg	result1, #1
1fc28     50 02 90 FD | 	jmp	#LR__2735
1fc2c                 | LR__2723
1fc2c     00 26 06 F6 | 	mov	local05, #0
1fc30                 | LR__2724
1fc30     04 26 56 F2 | 	cmps	local05, #4 wc
1fc34     B0 00 90 3D |  if_ae	jmp	#LR__2729
1fc38     13 13 02 F6 | 	mov	arg01, local05
1fc3c     02 12 66 F0 | 	shl	arg01, #2
1fc40     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1fc44     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1fc48     09 FB 09 FB | 	rdlong	result1, arg01 wz
1fc4c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1fc50     00 22 56 A2 |  if_e	cmps	local03, #0 wc
1fc54     13 23 02 86 |  if_c_and_z	mov	local03, local05
1fc58     84 00 90 8D |  if_c_and_z	jmp	#LR__2728
1fc5c     13 13 02 F6 | 	mov	arg01, local05
1fc60     02 12 66 F0 | 	shl	arg01, #2
1fc64     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1fc68     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1fc6c     09 13 02 FB | 	rdlong	arg01, arg01
1fc70     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1fc74     09 25 02 F6 | 	mov	local04, arg01
1fc78     97 06 48 FB | 	callpa	#(@LR__2726-@LR__2725)>>2,fcache_load_ptr_
1fc7c                 | LR__2725
1fc7c     12 FB C9 FA | 	rdbyte	result1, local04 wz
1fc80     01 24 06 51 |  if_ne	add	local04, #1
1fc84     F4 FF 9F 5D |  if_ne	jmp	#LR__2725
1fc88                 | LR__2726
1fc88     09 25 82 F1 | 	sub	local04, arg01
1fc8c     12 29 02 F6 | 	mov	local06, local04
1fc90     14 13 02 F6 | 	mov	arg01, local06
1fc94     0F 13 02 F1 | 	add	arg01, local01
1fc98     09 FB C1 FA | 	rdbyte	result1, arg01
1fc9c     2F FA 0D F2 | 	cmp	result1, #47 wz
1fca0     14 2B 02 56 |  if_ne	mov	local07, local06
1fca4     0F 2B 02 51 |  if_ne	add	local07, local01
1fca8     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
1fcac     30 00 90 5D |  if_ne	jmp	#LR__2727
1fcb0     13 17 02 F6 | 	mov	arg03, local05
1fcb4     02 16 66 F0 | 	shl	arg03, #2
1fcb8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1fcbc     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
1fcc0     0B 15 02 FB | 	rdlong	arg02, arg03
1fcc4     0F 13 02 F6 | 	mov	arg01, local01
1fcc8     14 17 02 F6 | 	mov	arg03, local06
1fccc     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1fcd0     B8 4D B0 FD | 	call	#__system__strncmp
1fcd4     00 FA 0D F2 | 	cmp	result1, #0 wz
1fcd8     13 23 02 A6 |  if_e	mov	local03, local05
1fcdc     08 00 90 AD |  if_e	jmp	#LR__2729
1fce0                 | LR__2727
1fce0                 | LR__2728
1fce0     01 26 06 F1 | 	add	local05, #1
1fce4     48 FF 9F FD | 	jmp	#LR__2724
1fce8                 | LR__2729
1fce8     FF FF 7F FF 
1fcec     FF 23 0E F2 | 	cmp	local03, ##-1 wz
1fcf0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
1fcf4     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
1fcf8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
1fcfc     01 FA 65 A6 |  if_e	neg	result1, #1
1fd00     78 01 90 AD |  if_e	jmp	#LR__2735
1fd04     11 27 02 F6 | 	mov	local05, local03
1fd08     13 2B 02 F6 | 	mov	local07, local05
1fd0c     02 2A 66 F0 | 	shl	local07, #2
1fd10     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1fd14     F3 2A 02 F1 | 	add	local07, ptr___system__dat__
1fd18     15 29 0A FB | 	rdlong	local06, local07 wz
1fd1c     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1fd20     58 00 90 AD |  if_e	jmp	#LR__2730
1fd24     4C 28 06 F1 | 	add	local06, #76
1fd28     14 2B 0A FB | 	rdlong	local07, local06 wz
1fd2c     4C 28 86 F1 | 	sub	local06, #76
1fd30     48 00 90 AD |  if_e	jmp	#LR__2730
1fd34     4C 28 06 F1 | 	add	local06, #76
1fd38     14 2B 02 FB | 	rdlong	local07, local06
1fd3c     15 23 02 F6 | 	mov	local03, local07
1fd40     13 2A 46 F7 | 	zerox	local07, #19
1fd44     14 22 46 F0 | 	shr	local03, #20
1fd48     02 22 66 F0 | 	shl	local03, #2
1fd4c     ED 22 02 F1 | 	add	local03, __methods__
1fd50     11 23 02 FB | 	rdlong	local03, local03
1fd54     13 29 02 F6 | 	mov	local06, local05
1fd58     02 28 66 F0 | 	shl	local06, #2
1fd5c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1fd60     F3 28 02 F1 | 	add	local06, ptr___system__dat__
1fd64     14 13 02 FB | 	rdlong	arg01, local06
1fd68     F2 28 02 F6 | 	mov	local06, objptr
1fd6c     15 E5 01 F6 | 	mov	objptr, local07
1fd70     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1fd74     2D 22 62 FD | 	call	local03
1fd78     14 E5 01 F6 | 	mov	objptr, local06
1fd7c                 | LR__2730
1fd7c     13 2D 02 F6 | 	mov	local08, local05
1fd80     02 2C 66 F0 | 	shl	local08, #2
1fd84     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1fd88     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
1fd8c     16 21 62 FC | 	wrlong	local02, local08
1fd90     00 20 0E F2 | 	cmp	local02, #0 wz
1fd94     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1fd98     18 00 90 5D |  if_ne	jmp	#LR__2731
1fd9c     02 26 66 F0 | 	shl	local05, #2
1fda0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1fda4     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1fda8     13 01 68 FC | 	wrlong	#0, local05
1fdac     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1fdb0     C4 00 90 FD | 	jmp	#LR__2734
1fdb4                 | LR__2731
1fdb4     13 2F 02 F6 | 	mov	local09, local05
1fdb8     04 2E 66 F0 | 	shl	local09, #4
1fdbc     24 E6 05 F1 | 	add	ptr___system__dat__, #36
1fdc0     F3 2E 02 F1 | 	add	local09, ptr___system__dat__
1fdc4     17 13 02 F6 | 	mov	arg01, local09
1fdc8     0F 15 02 F6 | 	mov	arg02, local01
1fdcc     10 16 06 F6 | 	mov	arg03, #16
1fdd0     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
1fdd4     08 4C B0 FD | 	call	#__system__strncpy
1fdd8     48 20 06 F1 | 	add	local02, #72
1fddc     10 2D 0A FB | 	rdlong	local08, local02 wz
1fde0     48 20 86 F1 | 	sub	local02, #72
1fde4     7C 00 90 AD |  if_e	jmp	#LR__2733
1fde8     48 20 06 F1 | 	add	local02, #72
1fdec     10 2D 02 FB | 	rdlong	local08, local02
1fdf0     16 31 02 F6 | 	mov	local10, local08
1fdf4     13 2C 46 F7 | 	zerox	local08, #19
1fdf8     14 30 46 F0 | 	shr	local10, #20
1fdfc     02 30 66 F0 | 	shl	local10, #2
1fe00     ED 30 02 F1 | 	add	local10, __methods__
1fe04     18 31 02 FB | 	rdlong	local10, local10
1fe08     17 13 02 F6 | 	mov	arg01, local09
1fe0c     F2 32 02 F6 | 	mov	local11, objptr
1fe10     16 E5 01 F6 | 	mov	objptr, local08
1fe14     2D 30 62 FD | 	call	local10
1fe18     19 E5 01 F6 | 	mov	objptr, local11
1fe1c     FD 12 0A F6 | 	mov	arg01, result1 wz
1fe20     40 00 90 AD |  if_e	jmp	#LR__2732
1fe24     13 2D 02 F6 | 	mov	local08, local05
1fe28     02 2C 66 F0 | 	shl	local08, #2
1fe2c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1fe30     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
1fe34     16 01 68 FC | 	wrlong	#0, local08
1fe38     02 26 66 F0 | 	shl	local05, #2
1fe3c     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1fe40     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1fe44     13 01 68 FC | 	wrlong	#0, local05
1fe48     09 13 6A F6 | 	neg	arg01, arg01 wz
1fe4c     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
1fe50     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1fe54     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1fe58     01 FA 65 56 |  if_ne	neg	result1, #1
1fe5c     00 FA 05 A6 |  if_e	mov	result1, #0
1fe60     18 00 90 FD | 	jmp	#LR__2735
1fe64                 | LR__2732
1fe64                 | LR__2733
1fe64     02 26 66 F0 | 	shl	local05, #2
1fe68     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1fe6c     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1fe70     13 2F 62 FC | 	wrlong	local09, local05
1fe74     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1fe78                 | LR__2734
1fe78     00 FA 05 F6 | 	mov	result1, #0
1fe7c                 | LR__2735
1fe7c     A7 F0 03 F6 | 	mov	ptra, fp
1fe80     B2 00 A0 FD | 	call	#popregs_
1fe84                 | __system___mount_ret
1fe84     2D 00 64 FD | 	ret
1fe88                 | 
1fe88                 | __system___chdir
1fe88     00 4A 05 F6 | 	mov	COUNT_, #0
1fe8c     A8 00 A0 FD | 	call	#pushregs_
1fe90     40 F0 07 F1 | 	add	ptra, #64
1fe94     04 4E 05 F1 | 	add	fp, #4
1fe98     A7 12 62 FC | 	wrlong	arg01, fp
1fe9c     04 4E 05 F1 | 	add	fp, #4
1fea0     A7 14 02 F6 | 	mov	arg02, fp
1fea4     08 4E 85 F1 | 	sub	fp, #8
1fea8     14 48 B0 FD | 	call	#__system__stat
1feac     3C 4E 05 F1 | 	add	fp, #60
1feb0     A7 FA 61 FC | 	wrlong	result1, fp
1feb4     3C 4E 85 F1 | 	sub	fp, #60
1feb8     00 FA 0D F2 | 	cmp	result1, #0 wz
1febc     3C 4E 05 51 |  if_ne	add	fp, #60
1fec0     A7 FA 01 5B |  if_ne	rdlong	result1, fp
1fec4     3C 4E 85 51 |  if_ne	sub	fp, #60
1fec8     BC 00 90 5D |  if_ne	jmp	#LR__2742
1fecc     10 4E 05 F1 | 	add	fp, #16
1fed0     A7 12 02 FB | 	rdlong	arg01, fp
1fed4     10 4E 85 F1 | 	sub	fp, #16
1fed8     78 00 00 FF 
1fedc     00 12 06 F5 | 	and	arg01, ##61440
1fee0     08 00 00 FF 
1fee4     00 12 0E F2 | 	cmp	arg01, ##4096 wz
1fee8     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
1feec     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
1fef0     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
1fef4     01 FA 65 56 |  if_ne	neg	result1, #1
1fef8     8C 00 90 5D |  if_ne	jmp	#LR__2742
1fefc     04 4E 05 F1 | 	add	fp, #4
1ff00     A7 16 02 FB | 	rdlong	arg03, fp
1ff04     04 4E 85 F1 | 	sub	fp, #4
1ff08     0B 17 C2 FA | 	rdbyte	arg03, arg03
1ff0c     2F 16 0E F2 | 	cmp	arg03, #47 wz
1ff10     24 00 90 5D |  if_ne	jmp	#LR__2740
1ff14     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1ff18     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1ff1c     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1ff20     04 4E 05 F1 | 	add	fp, #4
1ff24     A7 14 02 FB | 	rdlong	arg02, fp
1ff28     04 4E 85 F1 | 	sub	fp, #4
1ff2c     00 17 06 F6 | 	mov	arg03, #256
1ff30     AC 4A B0 FD | 	call	#__system__strncpy
1ff34     4C 00 90 FD | 	jmp	#LR__2741
1ff38                 | LR__2740
1ff38     84 E7 05 F1 | 	add	ptr___system__dat__, #388
1ff3c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1ff40     38 4E 05 F1 | 	add	fp, #56
1ff44     A7 12 62 FC | 	wrlong	arg01, fp
1ff48     38 4E 85 F1 | 	sub	fp, #56
1ff4c     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
1ff50     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
1ff54     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1ff58     00 17 06 F6 | 	mov	arg03, #256
1ff5c     80 4A B0 FD | 	call	#__system__strncpy
1ff60     38 4E 05 F1 | 	add	fp, #56
1ff64     A7 12 02 FB | 	rdlong	arg01, fp
1ff68     34 4E 85 F1 | 	sub	fp, #52
1ff6c     A7 14 02 FB | 	rdlong	arg02, fp
1ff70     04 4E 85 F1 | 	sub	fp, #4
1ff74     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1ff78     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
1ff7c     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1ff80     10 00 B0 FD | 	call	#__system____getvfsforfile
1ff84                 | LR__2741
1ff84     00 FA 05 F6 | 	mov	result1, #0
1ff88                 | LR__2742
1ff88     A7 F0 03 F6 | 	mov	ptra, fp
1ff8c     B2 00 A0 FD | 	call	#popregs_
1ff90                 | __system___chdir_ret
1ff90     2D 00 64 FD | 	ret
1ff94                 | 
1ff94                 | __system____getvfsforfile
1ff94     0E 4A 05 F6 | 	mov	COUNT_, #14
1ff98     A8 00 A0 FD | 	call	#pushregs_
1ff9c     09 1F 02 F6 | 	mov	local01, arg01
1ffa0     0A 21 02 F6 | 	mov	local02, arg02
1ffa4     0B 23 02 F6 | 	mov	local03, arg03
1ffa8     97 10 48 FB | 	callpa	#(@LR__2751-@LR__2750)>>2,fcache_load_ptr_
1ffac                 | LR__2750
1ffac     10 FB C1 FA | 	rdbyte	result1, local02
1ffb0     2F FA 0D F2 | 	cmp	result1, #47 wz
1ffb4     01 20 06 A1 |  if_e	add	local02, #1
1ffb8     10 25 C2 AA |  if_e	rdbyte	local04, local02
1ffbc     01 20 86 A1 |  if_e	sub	local02, #1
1ffc0     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
1ffc4     01 20 06 A1 |  if_e	add	local02, #1
1ffc8     E0 FF 9F AD |  if_e	jmp	#LR__2750
1ffcc                 | LR__2751
1ffcc     10 25 C2 FA | 	rdbyte	local04, local02
1ffd0     2F 24 0E F2 | 	cmp	local04, #47 wz
1ffd4     14 00 90 5D |  if_ne	jmp	#LR__2752
1ffd8     0F 13 02 F6 | 	mov	arg01, local01
1ffdc     10 15 02 F6 | 	mov	arg02, local02
1ffe0     00 17 06 F6 | 	mov	arg03, #256
1ffe4     F8 49 B0 FD | 	call	#__system__strncpy
1ffe8     7C 00 90 FD | 	jmp	#LR__2754
1ffec                 | LR__2752
1ffec     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1fff0     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
1fff4     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1fff8     0F 13 02 F6 | 	mov	arg01, local01
1fffc     00 17 06 F6 | 	mov	arg03, #256
20000     DC 49 B0 FD | 	call	#__system__strncpy
20004     10 25 CA FA | 	rdbyte	local04, local02 wz
20008     5C 00 90 AD |  if_e	jmp	#LR__2753
2000c     10 25 C2 FA | 	rdbyte	local04, local02
20010     2E 24 0E F2 | 	cmp	local04, #46 wz
20014     01 20 06 A1 |  if_e	add	local02, #1
20018     10 27 C2 AA |  if_e	rdbyte	local05, local02
2001c     01 20 86 A1 |  if_e	sub	local02, #1
20020     13 29 02 A6 |  if_e	mov	local06, local05
20024     07 28 4E A7 |  if_e	zerox	local06, #7 wz
20028     3C 00 90 AD |  if_e	jmp	#LR__2753
2002c     0F 27 C2 FA | 	rdbyte	local05, local01
20030     2F 26 0E F2 | 	cmp	local05, #47 wz
20034     01 1E 06 A1 |  if_e	add	local01, #1
20038     0F 25 C2 AA |  if_e	rdbyte	local04, local01
2003c     01 1E 86 A1 |  if_e	sub	local01, #1
20040     00 24 4E A2 |  if_e	cmps	local04, #0 wz
20044     76 01 00 5F 
20048     B0 15 06 56 |  if_ne	mov	arg02, ##@LR__4810
2004c     0F 13 02 56 |  if_ne	mov	arg01, local01
20050     00 17 06 56 |  if_ne	mov	arg03, #256
20054     D4 49 B0 5D |  if_ne	call	#__system__strncat
20058     0F 13 02 F6 | 	mov	arg01, local01
2005c     10 15 02 F6 | 	mov	arg02, local02
20060     00 17 06 F6 | 	mov	arg03, #256
20064     C4 49 B0 FD | 	call	#__system__strncat
20068                 | LR__2753
20068                 | LR__2754
20068     0F 13 02 F6 | 	mov	arg01, local01
2006c     7C 4B B0 FD | 	call	#__system___normalizeName
20070     0F 25 CA FA | 	rdbyte	local04, local01 wz
20074     1C 00 90 AD |  if_e	jmp	#LR__2755
20078     0F 25 C2 FA | 	rdbyte	local04, local01
2007c     2F 24 0E F2 | 	cmp	local04, #47 wz
20080     01 1E 06 A1 |  if_e	add	local01, #1
20084     0F 29 C2 AA |  if_e	rdbyte	local06, local01
20088     01 1E 86 A1 |  if_e	sub	local01, #1
2008c     00 28 4E A2 |  if_e	cmps	local06, #0 wz
20090     18 00 90 5D |  if_ne	jmp	#LR__2756
20094                 | LR__2755
20094     01 00 00 FF 
20098     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
2009c     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
200a0     01 00 00 FF 
200a4     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
200a8     EC 01 90 FD | 	jmp	#LR__2770
200ac                 | LR__2756
200ac     00 2A 06 F6 | 	mov	local07, #0
200b0                 | LR__2757
200b0     04 2A 56 F2 | 	cmps	local07, #4 wc
200b4     CC 01 90 3D |  if_ae	jmp	#LR__2769
200b8     15 29 02 F6 | 	mov	local06, local07
200bc     02 28 66 F0 | 	shl	local06, #2
200c0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
200c4     F3 28 02 F1 | 	add	local06, ptr___system__dat__
200c8     14 29 0A FB | 	rdlong	local06, local06 wz
200cc     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
200d0     A8 01 90 AD |  if_e	jmp	#LR__2768
200d4     15 25 02 F6 | 	mov	local04, local07
200d8     02 24 66 F0 | 	shl	local04, #2
200dc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
200e0     F3 24 02 F1 | 	add	local04, ptr___system__dat__
200e4     12 13 02 FB | 	rdlong	arg01, local04
200e8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
200ec     09 2D 02 F6 | 	mov	local08, arg01
200f0     97 06 48 FB | 	callpa	#(@LR__2759-@LR__2758)>>2,fcache_load_ptr_
200f4                 | LR__2758
200f4     16 FB C9 FA | 	rdbyte	result1, local08 wz
200f8     01 2C 06 51 |  if_ne	add	local08, #1
200fc     F4 FF 9F 5D |  if_ne	jmp	#LR__2758
20100                 | LR__2759
20100     09 2D 82 F1 | 	sub	local08, arg01
20104     16 2F 02 F6 | 	mov	local09, local08
20108     17 25 02 F6 | 	mov	local04, local09
2010c     0F 25 02 F1 | 	add	local04, local01
20110     12 29 C2 FA | 	rdbyte	local06, local04
20114     2F 28 0E F2 | 	cmp	local06, #47 wz
20118     17 31 02 56 |  if_ne	mov	local10, local09
2011c     0F 31 02 51 |  if_ne	add	local10, local01
20120     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
20124     54 01 90 5D |  if_ne	jmp	#LR__2767
20128     15 17 02 F6 | 	mov	arg03, local07
2012c     02 16 66 F0 | 	shl	arg03, #2
20130     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20134     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
20138     0B 15 02 FB | 	rdlong	arg02, arg03
2013c     17 17 02 F6 | 	mov	arg03, local09
20140     0F 13 02 F6 | 	mov	arg01, local01
20144     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20148     40 49 B0 FD | 	call	#__system__strncmp
2014c     00 FA 4D F2 | 	cmps	result1, #0 wz
20150     28 01 90 5D |  if_ne	jmp	#LR__2767
20154     15 33 02 F6 | 	mov	local11, local07
20158     02 32 66 F0 | 	shl	local11, #2
2015c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
20160     F3 32 02 F1 | 	add	local11, ptr___system__dat__
20164     19 35 02 FB | 	rdlong	local12, local11
20168     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
2016c     97 22 48 FB | 	callpa	#(@LR__2761-@LR__2760)>>2,fcache_load_ptr_
20170                 | LR__2760
20170     17 29 02 F6 | 	mov	local06, local09
20174     01 28 06 F1 | 	add	local06, #1
20178     0F 29 02 F1 | 	add	local06, local01
2017c     14 33 C2 FA | 	rdbyte	local11, local06
20180     2E 32 0E F2 | 	cmp	local11, #46 wz
20184     2C 00 90 5D |  if_ne	jmp	#LR__2762
20188     17 33 02 F6 | 	mov	local11, local09
2018c     02 32 06 F1 | 	add	local11, #2
20190     0F 33 02 F1 | 	add	local11, local01
20194     19 31 C2 FA | 	rdbyte	local10, local11
20198     2F 30 0E F2 | 	cmp	local10, #47 wz
2019c     17 37 02 56 |  if_ne	mov	local13, local09
201a0     02 36 06 51 |  if_ne	add	local13, #2
201a4     0F 37 02 51 |  if_ne	add	local13, local01
201a8     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
201ac     01 2E 06 A1 |  if_e	add	local09, #1
201b0     BC FF 9F AD |  if_e	jmp	#LR__2760
201b4                 | LR__2761
201b4                 | LR__2762
201b4     00 22 0E F2 | 	cmp	local03, #0 wz
201b8     11 13 02 56 |  if_ne	mov	arg01, local03
201bc     0F 15 02 56 |  if_ne	mov	arg02, local01
201c0     00 17 06 56 |  if_ne	mov	arg03, #256
201c4     18 48 B0 5D |  if_ne	call	#__system__strncpy
201c8     0F 15 02 F6 | 	mov	arg02, local01
201cc     17 15 02 F1 | 	add	arg02, local09
201d0     01 14 06 F1 | 	add	arg02, #1
201d4     0F 13 02 F6 | 	mov	arg01, local01
201d8     D4 F5 BF FD | 	call	#__system____builtin_strcpy
201dc     0F 13 02 F6 | 	mov	arg01, local01
201e0     09 2D 02 F6 | 	mov	local08, arg01
201e4     97 06 48 FB | 	callpa	#(@LR__2764-@LR__2763)>>2,fcache_load_ptr_
201e8                 | LR__2763
201e8     16 FB C9 FA | 	rdbyte	result1, local08 wz
201ec     01 2C 06 51 |  if_ne	add	local08, #1
201f0     F4 FF 9F 5D |  if_ne	jmp	#LR__2763
201f4                 | LR__2764
201f4     09 2D 82 F1 | 	sub	local08, arg01
201f8     16 2F 02 F6 | 	mov	local09, local08
201fc                 | LR__2765
201fc     01 2E 56 F2 | 	cmps	local09, #1 wc
20200     70 00 90 CD |  if_b	jmp	#LR__2766
20204     17 25 02 F6 | 	mov	local04, local09
20208     0F 25 02 F1 | 	add	local04, local01
2020c     12 33 C2 FA | 	rdbyte	local11, local04
20210     2F 32 0E F2 | 	cmp	local11, #47 wz
20214     17 33 02 A6 |  if_e	mov	local11, local09
20218     0F 33 02 A1 |  if_e	add	local11, local01
2021c     19 01 48 AC |  if_e	wrbyte	#0, local11
20220     01 2E 86 A1 |  if_e	sub	local09, #1
20224     D4 FF 9F AD |  if_e	jmp	#LR__2765
20228     17 25 02 F6 | 	mov	local04, local09
2022c     0F 25 02 F1 | 	add	local04, local01
20230     12 33 C2 FA | 	rdbyte	local11, local04
20234     2E 32 0E F2 | 	cmp	local11, #46 wz
20238     38 00 90 5D |  if_ne	jmp	#LR__2766
2023c     02 2E 56 F2 | 	cmps	local09, #2 wc
20240     30 00 90 CD |  if_b	jmp	#LR__2766
20244     17 39 02 F6 | 	mov	local14, local09
20248     01 38 86 F1 | 	sub	local14, #1
2024c     0F 39 02 F1 | 	add	local14, local01
20250     1C 27 C2 FA | 	rdbyte	local05, local14
20254     2F 26 0E F2 | 	cmp	local05, #47 wz
20258     18 00 90 5D |  if_ne	jmp	#LR__2766
2025c     17 25 02 F6 | 	mov	local04, local09
20260     01 24 86 F1 | 	sub	local04, #1
20264     0F 25 02 F1 | 	add	local04, local01
20268     12 01 48 FC | 	wrbyte	#0, local04
2026c     02 2E 86 F1 | 	sub	local09, #2
20270     88 FF 9F FD | 	jmp	#LR__2765
20274                 | LR__2766
20274     1A FB 01 F6 | 	mov	result1, local12
20278     1C 00 90 FD | 	jmp	#LR__2770
2027c                 | LR__2767
2027c                 | LR__2768
2027c     01 2A 06 F1 | 	add	local07, #1
20280     2C FE 9F FD | 	jmp	#LR__2757
20284                 | LR__2769
20284     03 00 00 FF 
20288     38 E7 05 F1 | 	add	ptr___system__dat__, ##1848
2028c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
20290     03 00 00 FF 
20294     38 E7 85 F1 | 	sub	ptr___system__dat__, ##1848
20298                 | LR__2770
20298     A7 F0 03 F6 | 	mov	ptra, fp
2029c     B2 00 A0 FD | 	call	#popregs_
202a0                 | __system____getvfsforfile_ret
202a0     2D 00 64 FD | 	ret
202a4                 | 
202a4                 | __system___basic_open
202a4     05 4A 05 F6 | 	mov	COUNT_, #5
202a8     A8 00 A0 FD | 	call	#pushregs_
202ac     0A 1F 02 F6 | 	mov	local01, arg02
202b0     0B 21 02 F6 | 	mov	local02, arg03
202b4     0C 23 02 F6 | 	mov	local03, arg04
202b8     00 24 06 F6 | 	mov	local04, #0
202bc     F8 46 B0 FD | 	call	#__system____getftab
202c0     FD 26 0A F6 | 	mov	local05, result1 wz
202c4     18 00 90 5D |  if_ne	jmp	#LR__2780
202c8     EE 12 02 F6 | 	mov	arg01, abortchain
202cc     0C 14 06 F6 | 	mov	arg02, #12
202d0     01 16 06 F6 | 	mov	arg03, #1
202d4     DA 00 A0 FD | 	call	#__longjmp
202d8     01 FA 65 F6 | 	neg	result1, #1
202dc     14 01 90 FD | 	jmp	#LR__2789
202e0                 | LR__2780
202e0     08 26 06 F1 | 	add	local05, #8
202e4     13 FB 09 FB | 	rdlong	result1, local05 wz
202e8     08 26 86 F1 | 	sub	local05, #8
202ec     13 13 02 56 |  if_ne	mov	arg01, local05
202f0     54 3E B0 5D |  if_ne	call	#__system___closeraw
202f4     00 1E 0E F2 | 	cmp	local01, #0 wz
202f8     00 20 0E A2 |  if_e	cmp	local02, #0 wz
202fc     00 22 0E A2 |  if_e	cmp	local03, #0 wz
20300     3C 00 90 AD |  if_e	jmp	#LR__2782
20304     0C 12 06 F6 | 	mov	arg01, #12
20308     3C 33 B0 FD | 	call	#__system___gc_alloc_managed
2030c     FD 24 0A F6 | 	mov	local04, result1 wz
20310     18 00 90 5D |  if_ne	jmp	#LR__2781
20314     EE 12 02 F6 | 	mov	arg01, abortchain
20318     07 14 06 F6 | 	mov	arg02, #7
2031c     01 16 06 F6 | 	mov	arg03, #1
20320     DA 00 A0 FD | 	call	#__longjmp
20324     01 FA 65 F6 | 	neg	result1, #1
20328     C8 00 90 FD | 	jmp	#LR__2789
2032c                 | LR__2781
2032c     12 01 68 FC | 	wrlong	#0, local04
20330     04 24 06 F1 | 	add	local04, #4
20334     12 01 68 FC | 	wrlong	#0, local04
20338     04 24 86 F1 | 	sub	local04, #4
2033c     13 25 62 FC | 	wrlong	local04, local05
20340                 | LR__2782
20340     00 1E 0E F2 | 	cmp	local01, #0 wz
20344     20 00 90 AD |  if_e	jmp	#LR__2783
20348     12 1F 62 FC | 	wrlong	local01, local04
2034c     12 FB 01 F6 | 	mov	result1, local04
20350     00 50 04 FF 
20354     00 FA 45 F5 | 	or	result1, ##144703488
20358     1C 26 06 F1 | 	add	local05, #28
2035c     13 FB 61 FC | 	wrlong	result1, local05
20360     1C 26 86 F1 | 	sub	local05, #28
20364     0C 00 90 FD | 	jmp	#LR__2784
20368                 | LR__2783
20368     1C 26 06 F1 | 	add	local05, #28
2036c     13 01 68 FC | 	wrlong	#0, local05
20370     1C 26 86 F1 | 	sub	local05, #28
20374                 | LR__2784
20374     00 20 0E F2 | 	cmp	local02, #0 wz
20378     28 00 90 AD |  if_e	jmp	#LR__2785
2037c     04 24 06 F1 | 	add	local04, #4
20380     12 21 62 FC | 	wrlong	local02, local04
20384     04 24 86 F1 | 	sub	local04, #4
20388     12 FB 01 F6 | 	mov	result1, local04
2038c     00 58 04 FF 
20390     00 FA 45 F5 | 	or	result1, ##145752064
20394     20 26 06 F1 | 	add	local05, #32
20398     13 FB 61 FC | 	wrlong	result1, local05
2039c     20 26 86 F1 | 	sub	local05, #32
203a0     0C 00 90 FD | 	jmp	#LR__2786
203a4                 | LR__2785
203a4     20 26 06 F1 | 	add	local05, #32
203a8     13 01 68 FC | 	wrlong	#0, local05
203ac     20 26 86 F1 | 	sub	local05, #32
203b0                 | LR__2786
203b0     00 22 0E F2 | 	cmp	local03, #0 wz
203b4     24 00 90 AD |  if_e	jmp	#LR__2787
203b8     08 24 06 F1 | 	add	local04, #8
203bc     12 23 62 FC | 	wrlong	local03, local04
203c0     08 24 86 F1 | 	sub	local04, #8
203c4     00 60 04 FF 
203c8     00 24 46 F5 | 	or	local04, ##146800640
203cc     24 26 06 F1 | 	add	local05, #36
203d0     13 25 62 FC | 	wrlong	local04, local05
203d4     24 26 86 F1 | 	sub	local05, #36
203d8     0C 00 90 FD | 	jmp	#LR__2788
203dc                 | LR__2787
203dc     24 26 06 F1 | 	add	local05, #36
203e0     13 01 68 FC | 	wrlong	#0, local05
203e4     24 26 86 F1 | 	sub	local05, #36
203e8                 | LR__2788
203e8     08 26 06 F1 | 	add	local05, #8
203ec     13 0F 68 FC | 	wrlong	#7, local05
203f0     00 FA 05 F6 | 	mov	result1, #0
203f4                 | LR__2789
203f4     A7 F0 03 F6 | 	mov	ptra, fp
203f8     B2 00 A0 FD | 	call	#popregs_
203fc                 | __system___basic_open_ret
203fc     2D 00 64 FD | 	ret
20400                 | 
20400                 | __system___basic_open_string
20400     04 4A 05 F6 | 	mov	COUNT_, #4
20404     A8 00 A0 FD | 	call	#pushregs_
20408     0A 1F 02 F6 | 	mov	local01, arg02
2040c     0B 21 02 F6 | 	mov	local02, arg03
20410     A4 45 B0 FD | 	call	#__system____getftab
20414     FD 22 0A F6 | 	mov	local03, result1 wz
20418     18 00 90 5D |  if_ne	jmp	#LR__2790
2041c     EE 12 02 F6 | 	mov	arg01, abortchain
20420     0C 14 06 F6 | 	mov	arg02, #12
20424     01 16 06 F6 | 	mov	arg03, #1
20428     DA 00 A0 FD | 	call	#__longjmp
2042c     01 FA 65 F6 | 	neg	result1, #1
20430     58 00 90 FD | 	jmp	#LR__2792
20434                 | LR__2790
20434     08 22 06 F1 | 	add	local03, #8
20438     11 19 0A FB | 	rdlong	arg04, local03 wz
2043c     08 22 86 F1 | 	sub	local03, #8
20440     11 13 02 56 |  if_ne	mov	arg01, local03
20444     00 3D B0 5D |  if_ne	call	#__system___closeraw
20448     0F 15 02 F6 | 	mov	arg02, local01
2044c     10 17 02 F6 | 	mov	arg03, local02
20450     11 13 02 F6 | 	mov	arg01, local03
20454     B6 19 06 F6 | 	mov	arg04, #438
20458     E8 39 B0 FD | 	call	#__system___openraw
2045c     FD 24 02 F6 | 	mov	local04, result1
20460     00 24 56 F2 | 	cmps	local04, #0 wc
20464     20 00 90 3D |  if_ae	jmp	#LR__2791
20468     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2046c     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
20470     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20474     EE 12 02 F6 | 	mov	arg01, abortchain
20478     01 16 06 F6 | 	mov	arg03, #1
2047c     DA 00 A0 FD | 	call	#__longjmp
20480     01 FA 65 F6 | 	neg	result1, #1
20484     04 00 90 FD | 	jmp	#LR__2792
20488                 | LR__2791
20488     12 FB 01 F6 | 	mov	result1, local04
2048c                 | LR__2792
2048c     A7 F0 03 F6 | 	mov	ptra, fp
20490     B2 00 A0 FD | 	call	#popregs_
20494                 | __system___basic_open_string_ret
20494     2D 00 64 FD | 	ret
20498                 | 
20498                 | __system___basic_print_char
20498     03 4A 05 F6 | 	mov	COUNT_, #3
2049c     A8 00 A0 FD | 	call	#pushregs_
204a0     0A 1F 02 F6 | 	mov	local01, arg02
204a4     64 4C B0 FD | 	call	#__system___gettxfunc
204a8     FD 20 0A F6 | 	mov	local02, result1 wz
204ac     00 FA 05 A6 |  if_e	mov	result1, #0
204b0     30 00 90 AD |  if_e	jmp	#LR__2800
204b4     10 23 02 F6 | 	mov	local03, local02
204b8     13 20 46 F7 | 	zerox	local02, #19
204bc     14 22 46 F0 | 	shr	local03, #20
204c0     02 22 66 F0 | 	shl	local03, #2
204c4     ED 22 02 F1 | 	add	local03, __methods__
204c8     11 23 02 FB | 	rdlong	local03, local03
204cc     0F 13 02 F6 | 	mov	arg01, local01
204d0     F2 1E 02 F6 | 	mov	local01, objptr
204d4     10 E5 01 F6 | 	mov	objptr, local02
204d8     2D 22 62 FD | 	call	local03
204dc     0F E5 01 F6 | 	mov	objptr, local01
204e0     01 FA 05 F6 | 	mov	result1, #1
204e4                 | LR__2800
204e4     A7 F0 03 F6 | 	mov	ptra, fp
204e8     B2 00 A0 FD | 	call	#popregs_
204ec                 | __system___basic_print_char_ret
204ec     2D 00 64 FD | 	ret
204f0                 | 
204f0                 | __system___basic_print_string
204f0     03 4A 05 F6 | 	mov	COUNT_, #3
204f4     A8 00 A0 FD | 	call	#pushregs_
204f8     0A 1F 02 F6 | 	mov	local01, arg02
204fc     0B 21 02 F6 | 	mov	local02, arg03
20500     08 4C B0 FD | 	call	#__system___gettxfunc
20504     FD 22 0A F6 | 	mov	local03, result1 wz
20508     00 FA 05 A6 |  if_e	mov	result1, #0
2050c     18 00 90 AD |  if_e	jmp	#LR__2810
20510     00 1E 0E F2 | 	cmp	local01, #0 wz
20514     00 FA 05 A6 |  if_e	mov	result1, #0
20518     11 13 02 56 |  if_ne	mov	arg01, local03
2051c     10 15 02 56 |  if_ne	mov	arg02, local02
20520     0F 17 02 56 |  if_ne	mov	arg03, local01
20524     9C 01 B0 5D |  if_ne	call	#__system___fmtstr
20528                 | LR__2810
20528     A7 F0 03 F6 | 	mov	ptra, fp
2052c     B2 00 A0 FD | 	call	#popregs_
20530                 | __system___basic_print_string_ret
20530     2D 00 64 FD | 	ret
20534                 | 
20534                 | __system___basic_print_integer
20534     04 4A 05 F6 | 	mov	COUNT_, #4
20538     A8 00 A0 FD | 	call	#pushregs_
2053c     0A 1F 02 F6 | 	mov	local01, arg02
20540     0B 21 02 F6 | 	mov	local02, arg03
20544     0C 23 02 F6 | 	mov	local03, arg04
20548     C0 4B B0 FD | 	call	#__system___gettxfunc
2054c     FD 24 0A F6 | 	mov	local04, result1 wz
20550     00 FA 05 A6 |  if_e	mov	result1, #0
20554     12 13 02 56 |  if_ne	mov	arg01, local04
20558     10 15 02 56 |  if_ne	mov	arg02, local02
2055c     0F 17 02 56 |  if_ne	mov	arg03, local01
20560     11 19 02 56 |  if_ne	mov	arg04, local03
20564     48 02 B0 5D |  if_ne	call	#__system___fmtnum
20568     A7 F0 03 F6 | 	mov	ptra, fp
2056c     B2 00 A0 FD | 	call	#popregs_
20570                 | __system___basic_print_integer_ret
20570     2D 00 64 FD | 	ret
20574                 | 
20574                 | __system___basic_print_unsigned
20574     03 4A 05 F6 | 	mov	COUNT_, #3
20578     A8 00 A0 FD | 	call	#pushregs_
2057c     0A 1F 02 F6 | 	mov	local01, arg02
20580     0B 21 02 F6 | 	mov	local02, arg03
20584     0C 23 02 F6 | 	mov	local03, arg04
20588     80 4B B0 FD | 	call	#__system___gettxfunc
2058c     FD 12 0A F6 | 	mov	arg01, result1 wz
20590     00 FA 05 A6 |  if_e	mov	result1, #0
20594     3A 20 26 54 |  if_ne	bith	local02, #58
20598     10 15 02 56 |  if_ne	mov	arg02, local02
2059c     0F 17 02 56 |  if_ne	mov	arg03, local01
205a0     11 19 02 56 |  if_ne	mov	arg04, local03
205a4     08 02 B0 5D |  if_ne	call	#__system___fmtnum
205a8     A7 F0 03 F6 | 	mov	ptra, fp
205ac     B2 00 A0 FD | 	call	#popregs_
205b0                 | __system___basic_print_unsigned_ret
205b0     2D 00 64 FD | 	ret
205b4                 | 
205b4                 | __system___basic_get_char
205b4     03 4A 05 F6 | 	mov	COUNT_, #3
205b8     A8 00 A0 FD | 	call	#pushregs_
205bc     90 4B B0 FD | 	call	#__system___getrxfunc
205c0     FD 1E 0A F6 | 	mov	local01, result1 wz
205c4     01 FA 65 A6 |  if_e	neg	result1, #1
205c8     28 00 90 AD |  if_e	jmp	#LR__2820
205cc     0F 21 02 F6 | 	mov	local02, local01
205d0     13 1E 46 F7 | 	zerox	local01, #19
205d4     14 20 46 F0 | 	shr	local02, #20
205d8     02 20 66 F0 | 	shl	local02, #2
205dc     ED 20 02 F1 | 	add	local02, __methods__
205e0     10 21 02 FB | 	rdlong	local02, local02
205e4     F2 22 02 F6 | 	mov	local03, objptr
205e8     0F E5 01 F6 | 	mov	objptr, local01
205ec     2D 20 62 FD | 	call	local02
205f0     11 E5 01 F6 | 	mov	objptr, local03
205f4                 | LR__2820
205f4     A7 F0 03 F6 | 	mov	ptra, fp
205f8     B2 00 A0 FD | 	call	#popregs_
205fc                 | __system___basic_get_char_ret
205fc     2D 00 64 FD | 	ret
20600                 | 
20600                 | __system___basic_get
20600     04 4A 05 F6 | 	mov	COUNT_, #4
20604     A8 00 A0 FD | 	call	#pushregs_
20608     0D 1F 02 F6 | 	mov	local01, arg05
2060c     0F 19 02 FD | 	qmul	arg04, local01
20610     09 21 02 F6 | 	mov	local02, arg01
20614     0B 23 02 F6 | 	mov	local03, arg03
20618     00 14 0E F2 | 	cmp	arg02, #0 wz
2061c     01 14 86 51 |  if_ne	sub	arg02, #1
20620     10 13 02 56 |  if_ne	mov	arg01, local02
20624     00 16 06 56 |  if_ne	mov	arg03, #0
20628     18 24 62 FD | 	getqx	local04
2062c     D0 41 B0 5D |  if_ne	call	#__system__lseek
20630     11 15 02 F6 | 	mov	arg02, local03
20634     12 17 02 F6 | 	mov	arg03, local04
20638     10 13 02 F6 | 	mov	arg01, local02
2063c     48 41 B0 FD | 	call	#__system__read
20640     FD 24 02 F6 | 	mov	local04, result1
20644     01 24 56 F2 | 	cmps	local04, #1 wc
20648     10 00 90 CD |  if_b	jmp	#LR__2830
2064c     12 65 02 F6 | 	mov	muldiva_, local04
20650     0F 67 02 F6 | 	mov	muldivb_, local01
20654     BA 00 A0 FD | 	call	#divide_
20658     33 25 02 F6 | 	mov	local04, muldivb_
2065c                 | LR__2830
2065c     12 FB 01 F6 | 	mov	result1, local04
20660     A7 F0 03 F6 | 	mov	ptra, fp
20664     B2 00 A0 FD | 	call	#popregs_
20668                 | __system___basic_get_ret
20668     2D 00 64 FD | 	ret
2066c                 | 
2066c                 | __system___fmtchar
2066c     00 4A 05 F6 | 	mov	COUNT_, #0
20670     A8 00 A0 FD | 	call	#pushregs_
20674     10 F0 07 F1 | 	add	ptra, #16
20678     04 4E 05 F1 | 	add	fp, #4
2067c     A7 12 62 FC | 	wrlong	arg01, fp
20680     04 4E 05 F1 | 	add	fp, #4
20684     A7 14 62 FC | 	wrlong	arg02, fp
20688     04 4E 05 F1 | 	add	fp, #4
2068c     A7 16 62 FC | 	wrlong	arg03, fp
20690     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
20694     A7 16 62 FC | 	wrlong	arg03, fp
20698     08 4E 85 F1 | 	sub	fp, #8
2069c     A7 12 02 FB | 	rdlong	arg01, fp
206a0     04 4E 05 F1 | 	add	fp, #4
206a4     A7 14 02 FB | 	rdlong	arg02, fp
206a8     04 4E 05 F1 | 	add	fp, #4
206ac     A7 16 02 F6 | 	mov	arg03, fp
206b0     0C 4E 85 F1 | 	sub	fp, #12
206b4     0C 00 B0 FD | 	call	#__system___fmtstr
206b8     A7 F0 03 F6 | 	mov	ptra, fp
206bc     B2 00 A0 FD | 	call	#popregs_
206c0                 | __system___fmtchar_ret
206c0     2D 00 64 FD | 	ret
206c4                 | 
206c4                 | __system___fmtstr
206c4     09 4A 05 F6 | 	mov	COUNT_, #9
206c8     A8 00 A0 FD | 	call	#pushregs_
206cc     09 1F 02 F6 | 	mov	local01, arg01
206d0     0A 21 02 F6 | 	mov	local02, arg02
206d4     0B 23 02 F6 | 	mov	local03, arg03
206d8     10 19 E2 F8 | 	getbyte	arg04, local02, #0
206dc     11 13 02 F6 | 	mov	arg01, local03
206e0     09 25 02 F6 | 	mov	local04, arg01
206e4     97 06 48 FB | 	callpa	#(@LR__2841-@LR__2840)>>2,fcache_load_ptr_
206e8                 | LR__2840
206e8     12 FB C9 FA | 	rdbyte	result1, local04 wz
206ec     01 24 06 51 |  if_ne	add	local04, #1
206f0     F4 FF 9F 5D |  if_ne	jmp	#LR__2840
206f4                 | LR__2841
206f4     09 25 82 F1 | 	sub	local04, arg01
206f8     00 18 0E F2 | 	cmp	arg04, #0 wz
206fc     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
20700     10 15 02 F6 | 	mov	arg02, local02
20704     12 17 02 F6 | 	mov	arg03, local04
20708     0F 13 02 F6 | 	mov	arg01, local01
2070c     02 18 06 F6 | 	mov	arg04, #2
20710     98 46 B0 FD | 	call	#__system___fmtpad
20714     FD 26 02 F6 | 	mov	local05, result1
20718     00 26 56 F2 | 	cmps	local05, #0 wc
2071c     13 FB 01 C6 |  if_b	mov	result1, local05
20720     80 00 90 CD |  if_b	jmp	#LR__2844
20724     01 24 56 F2 | 	cmps	local04, #1 wc
20728     50 00 90 CD |  if_b	jmp	#LR__2843
2072c     12 29 02 F6 | 	mov	local06, local04
20730                 | LR__2842
20730     0F 2B 02 F6 | 	mov	local07, local01
20734     0F 2D 02 F6 | 	mov	local08, local01
20738     13 2A 46 F7 | 	zerox	local07, #19
2073c     14 2C 46 F0 | 	shr	local08, #20
20740     02 2C 66 F0 | 	shl	local08, #2
20744     ED 2C 02 F1 | 	add	local08, __methods__
20748     16 2D 02 FB | 	rdlong	local08, local08
2074c     11 13 C2 FA | 	rdbyte	arg01, local03
20750     F2 2E 02 F6 | 	mov	local09, objptr
20754     15 E5 01 F6 | 	mov	objptr, local07
20758     01 22 06 F1 | 	add	local03, #1
2075c     2D 2C 62 FD | 	call	local08
20760     17 E5 01 F6 | 	mov	objptr, local09
20764     FD 2E 02 F6 | 	mov	local09, result1
20768     00 2E 56 F2 | 	cmps	local09, #0 wc
2076c     17 FB 01 C6 |  if_b	mov	result1, local09
20770     30 00 90 CD |  if_b	jmp	#LR__2844
20774     17 27 02 F1 | 	add	local05, local09
20778     ED 29 6E FB | 	djnz	local06, #LR__2842
2077c                 | LR__2843
2077c     10 15 02 F6 | 	mov	arg02, local02
20780     12 17 02 F6 | 	mov	arg03, local04
20784     0F 13 02 F6 | 	mov	arg01, local01
20788     01 18 06 F6 | 	mov	arg04, #1
2078c     1C 46 B0 FD | 	call	#__system___fmtpad
20790     FD 2E 02 F6 | 	mov	local09, result1
20794     00 2E 56 F2 | 	cmps	local09, #0 wc
20798     17 FB 01 C6 |  if_b	mov	result1, local09
2079c     17 27 02 31 |  if_ae	add	local05, local09
207a0     13 FB 01 36 |  if_ae	mov	result1, local05
207a4                 | LR__2844
207a4     A7 F0 03 F6 | 	mov	ptra, fp
207a8     B2 00 A0 FD | 	call	#popregs_
207ac                 | __system___fmtstr_ret
207ac     2D 00 64 FD | 	ret
207b0                 | 
207b0                 | __system___fmtnum
207b0     0B 4A 05 F6 | 	mov	COUNT_, #11
207b4     A8 00 A0 FD | 	call	#pushregs_
207b8     09 1F 02 F6 | 	mov	local01, arg01
207bc     0A 21 02 F6 | 	mov	local02, arg02
207c0     0B 23 02 F6 | 	mov	local03, arg03
207c4     0C 25 02 F6 | 	mov	local04, arg04
207c8     F8 27 02 F6 | 	mov	local05, ptra
207cc     13 29 02 F6 | 	mov	local06, local05
207d0     00 2A 06 F6 | 	mov	local07, #0
207d4     10 2D 02 F6 | 	mov	local08, local02
207d8     10 2C 46 F0 | 	shr	local08, #16
207dc     3F 2C 06 F5 | 	and	local08, #63
207e0     10 2F E2 F8 | 	getbyte	local09, local02, #0
207e4     10 31 02 F6 | 	mov	local10, local02
207e8     1A 30 46 F0 | 	shr	local10, #26
207ec     03 30 06 F5 | 	and	local10, #3
207f0     18 33 02 F6 | 	mov	local11, local10
207f4     01 2C 56 F2 | 	cmps	local08, #1 wc
207f8     44 F0 07 F1 | 	add	ptra, #68
207fc     01 2C 86 31 |  if_ae	sub	local08, #1
20800     41 2E 56 F2 | 	cmps	local09, #65 wc
20804     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
20808     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
2080c     03 32 0E F2 | 	cmp	local11, #3 wz
20810     00 32 06 A6 |  if_e	mov	local11, #0
20814     00 22 56 52 |  if_ne	cmps	local03, #0 wc
20818     04 32 06 46 |  if_c_and_nz	mov	local11, #4
2081c     11 23 62 46 |  if_c_and_nz	neg	local03, local03
20820     00 32 0E F2 | 	cmp	local11, #0 wz
20824     4C 00 90 AD |  if_e	jmp	#LR__2853
20828     01 2A 06 F6 | 	mov	local07, #1
2082c     17 2D 0A F2 | 	cmp	local08, local09 wz
20830     18 00 90 5D |  if_ne	jmp	#LR__2851
20834     05 2C 6E FB | 	djnz	local08, #LR__2850
20838     0F 13 02 F6 | 	mov	arg01, local01
2083c     10 15 02 F6 | 	mov	arg02, local02
20840     23 16 06 F6 | 	mov	arg03, #35
20844     24 FE BF FD | 	call	#__system___fmtchar
20848     88 00 90 FD | 	jmp	#LR__2857
2084c                 | LR__2850
2084c                 | LR__2851
2084c     02 32 0E F2 | 	cmp	local11, #2 wz
20850     14 31 02 A6 |  if_e	mov	local10, local06
20854     01 28 06 A1 |  if_e	add	local06, #1
20858     18 41 48 AC |  if_e	wrbyte	#32, local10
2085c     14 00 90 AD |  if_e	jmp	#LR__2852
20860     04 32 0E F2 | 	cmp	local11, #4 wz
20864     14 5B 48 AC |  if_e	wrbyte	#45, local06
20868     01 28 06 A1 |  if_e	add	local06, #1
2086c     14 57 48 5C |  if_ne	wrbyte	#43, local06
20870     01 28 06 51 |  if_ne	add	local06, #1
20874                 | LR__2852
20874                 | LR__2853
20874     14 13 02 F6 | 	mov	arg01, local06
20878     11 15 02 F6 | 	mov	arg02, local03
2087c     12 17 02 F6 | 	mov	arg03, local04
20880     16 19 02 F6 | 	mov	arg04, local08
20884     00 1A 06 F6 | 	mov	arg05, #0
20888     1D 20 2E F4 | 	testbn	local02, #29 wz
2088c     01 1A 06 56 |  if_ne	mov	arg05, #1
20890     E0 45 B0 FD | 	call	#__system___uitoa
20894     FD 2A 02 F1 | 	add	local07, result1
20898     17 2B 5A F2 | 	cmps	local07, local09 wcz
2089c     24 00 90 ED |  if_be	jmp	#LR__2856
208a0     97 0E 48 FB | 	callpa	#(@LR__2855-@LR__2854)>>2,fcache_load_ptr_
208a4                 | LR__2854
208a4     17 31 02 F6 | 	mov	local10, local09
208a8     01 30 56 F2 | 	cmps	local10, #1 wc
208ac     01 2E 86 F1 | 	sub	local09, #1
208b0     14 31 02 36 |  if_ae	mov	local10, local06
208b4     01 28 06 31 |  if_ae	add	local06, #1
208b8     18 47 48 3C |  if_ae	wrbyte	#35, local10
208bc     E4 FF 9F 3D |  if_ae	jmp	#LR__2854
208c0                 | LR__2855
208c0     14 01 48 FC | 	wrbyte	#0, local06
208c4                 | LR__2856
208c4     0F 13 02 F6 | 	mov	arg01, local01
208c8     10 15 02 F6 | 	mov	arg02, local02
208cc     13 17 02 F6 | 	mov	arg03, local05
208d0     F0 FD BF FD | 	call	#__system___fmtstr
208d4                 | LR__2857
208d4     A7 F0 03 F6 | 	mov	ptra, fp
208d8     B2 00 A0 FD | 	call	#popregs_
208dc                 | __system___fmtnum_ret
208dc     2D 00 64 FD | 	ret
208e0                 | 
208e0                 | __system___fmtfloat
208e0     10 4A 05 F6 | 	mov	COUNT_, #16
208e4     A8 00 A0 FD | 	call	#pushregs_
208e8     24 F1 07 F1 | 	add	ptra, #292
208ec     04 4E 05 F1 | 	add	fp, #4
208f0     A7 12 62 FC | 	wrlong	arg01, fp
208f4     04 4E 05 F1 | 	add	fp, #4
208f8     A7 14 62 FC | 	wrlong	arg02, fp
208fc     04 4E 05 F1 | 	add	fp, #4
20900     A7 16 62 FC | 	wrlong	arg03, fp
20904     04 4E 05 F1 | 	add	fp, #4
20908     A7 18 62 FC | 	wrlong	arg04, fp
2090c     0C 4E 05 F1 | 	add	fp, #12
20910     A7 14 68 FC | 	wrlong	#10, fp
20914     08 4E 05 F1 | 	add	fp, #8
20918     A7 00 68 FC | 	wrlong	#0, fp
2091c     08 4E 05 F1 | 	add	fp, #8
20920     A7 00 68 FC | 	wrlong	#0, fp
20924     08 4E 05 F1 | 	add	fp, #8
20928     A7 00 68 FC | 	wrlong	#0, fp
2092c     04 4E 05 F1 | 	add	fp, #4
20930     A7 04 68 FC | 	wrlong	#2, fp
20934     04 4E 05 F1 | 	add	fp, #4
20938     A7 00 68 FC | 	wrlong	#0, fp
2093c     04 4E 05 F1 | 	add	fp, #4
20940     A7 00 68 FC | 	wrlong	#0, fp
20944     04 4E 05 F1 | 	add	fp, #4
20948     A7 00 68 FC | 	wrlong	#0, fp
2094c     04 4E 05 F1 | 	add	fp, #4
20950     A7 00 68 FC | 	wrlong	#0, fp
20954     18 4E 05 F1 | 	add	fp, #24
20958     A7 00 68 FC | 	wrlong	#0, fp
2095c     68 4E 05 F1 | 	add	fp, #104
20960     A7 1E 02 F6 | 	mov	local01, fp
20964     08 4E 85 F1 | 	sub	fp, #8
20968     A7 1E 62 FC | 	wrlong	local01, fp
2096c     04 4E 05 F1 | 	add	fp, #4
20970     A7 1E 62 FC | 	wrlong	local01, fp
20974     BC 4E 85 F1 | 	sub	fp, #188
20978     A7 1E 02 FB | 	rdlong	local01, fp
2097c     10 1E 46 F0 | 	shr	local01, #16
20980     3F 1E 06 F5 | 	and	local01, #63
20984     B0 4E 05 F1 | 	add	fp, #176
20988     A7 1E 62 FC | 	wrlong	local01, fp
2098c     B0 4E 85 F1 | 	sub	fp, #176
20990     A7 1E 02 FB | 	rdlong	local01, fp
20994     1C 1E 46 F0 | 	shr	local01, #28
20998     01 1E 06 F5 | 	and	local01, #1
2099c     08 4F 05 F1 | 	add	fp, #264
209a0     A7 1E 62 FC | 	wrlong	local01, fp
209a4     58 4E 85 F1 | 	sub	fp, #88
209a8     A7 1E 0A FB | 	rdlong	local01, fp wz
209ac     B8 4E 85 F1 | 	sub	fp, #184
209b0     3C 00 90 5D |  if_ne	jmp	#LR__2861
209b4     10 4E 05 F1 | 	add	fp, #16
209b8     A7 1E 02 FB | 	rdlong	local01, fp
209bc     10 4E 85 F1 | 	sub	fp, #16
209c0     61 1E 0E F2 | 	cmp	local01, #97 wz
209c4     18 00 90 5D |  if_ne	jmp	#LR__2860
209c8     B8 4E 05 F1 | 	add	fp, #184
209cc     A7 1A 68 FC | 	wrlong	#13, fp
209d0     84 4E 85 F1 | 	sub	fp, #132
209d4     A7 02 68 FC | 	wrlong	#1, fp
209d8     34 4E 85 F1 | 	sub	fp, #52
209dc     24 00 90 FD | 	jmp	#LR__2862
209e0                 | LR__2860
209e0     B8 4E 05 F1 | 	add	fp, #184
209e4     A7 0C 68 FC | 	wrlong	#6, fp
209e8     B8 4E 85 F1 | 	sub	fp, #184
209ec     14 00 90 FD | 	jmp	#LR__2862
209f0                 | LR__2861
209f0     B8 4E 05 F1 | 	add	fp, #184
209f4     A7 1E 02 FB | 	rdlong	local01, fp
209f8     01 1E 86 F1 | 	sub	local01, #1
209fc     A7 1E 62 FC | 	wrlong	local01, fp
20a00     B8 4E 85 F1 | 	sub	fp, #184
20a04                 | LR__2862
20a04     08 4E 05 F1 | 	add	fp, #8
20a08     A7 1E 02 FB | 	rdlong	local01, fp
20a0c     16 1E 46 F0 | 	shr	local01, #22
20a10     03 1E 06 F5 | 	and	local01, #3
20a14     04 4F 05 F1 | 	add	fp, #260
20a18     A7 1E 62 FC | 	wrlong	local01, fp
20a1c     04 4F 85 F1 | 	sub	fp, #260
20a20     A7 1E 02 FB | 	rdlong	local01, fp
20a24     1D 1E 46 F0 | 	shr	local01, #29
20a28     01 1E 06 F5 | 	and	local01, #1
20a2c     B4 4E 05 F1 | 	add	fp, #180
20a30     A7 1E 62 FC | 	wrlong	local01, fp
20a34     B4 4E 85 F1 | 	sub	fp, #180
20a38     A7 1E 02 FB | 	rdlong	local01, fp
20a3c     0F 1F EA F8 | 	getbyte	local01, local01, #1
20a40     60 4E 05 F1 | 	add	fp, #96
20a44     A7 1E 62 FC | 	wrlong	local01, fp
20a48     60 4E 85 F1 | 	sub	fp, #96
20a4c     A7 1E 02 FB | 	rdlong	local01, fp
20a50     0F 1F E2 F8 | 	getbyte	local01, local01, #0
20a54     64 4E 05 F1 | 	add	fp, #100
20a58     A7 1E 62 FC | 	wrlong	local01, fp
20a5c     00 1E 06 F6 | 	mov	local01, #0
20a60     5C 4E 85 F1 | 	sub	fp, #92
20a64     A7 1A 02 FB | 	rdlong	arg05, fp
20a68     65 1A 0E F2 | 	cmp	arg05, #101 wz
20a6c     01 1E 06 A6 |  if_e	mov	local01, #1
20a70     14 4E 05 F1 | 	add	fp, #20
20a74     A7 1E 62 FC | 	wrlong	local01, fp
20a78     98 4E 05 F1 | 	add	fp, #152
20a7c     A7 20 0A FB | 	rdlong	local02, fp wz
20a80     45 1E 06 56 |  if_ne	mov	local01, #69
20a84     65 1E 06 A6 |  if_e	mov	local01, #101
20a88     8C 4E 85 F1 | 	sub	fp, #140
20a8c     A7 1E 62 FC | 	wrlong	local01, fp
20a90     20 4E 85 F1 | 	sub	fp, #32
20a94     A7 1E 02 FB | 	rdlong	local01, fp
20a98     10 4E 85 F1 | 	sub	fp, #16
20a9c     61 1E 0E F2 | 	cmp	local01, #97 wz
20aa0     4C 00 90 5D |  if_ne	jmp	#LR__2863
20aa4     24 4E 05 F1 | 	add	fp, #36
20aa8     A7 02 68 FC | 	wrlong	#1, fp
20aac     98 4E 05 F1 | 	add	fp, #152
20ab0     A7 20 0A FB | 	rdlong	local02, fp wz
20ab4     50 1E 06 56 |  if_ne	mov	local01, #80
20ab8     70 1E 06 A6 |  if_e	mov	local01, #112
20abc     8C 4E 85 F1 | 	sub	fp, #140
20ac0     A7 1E 62 FC | 	wrlong	local01, fp
20ac4     14 4E 85 F1 | 	sub	fp, #20
20ac8     A7 04 68 FC | 	wrlong	#2, fp
20acc     1C 4E 05 F1 | 	add	fp, #28
20ad0     A7 02 68 FC | 	wrlong	#1, fp
20ad4     84 4E 05 F1 | 	add	fp, #132
20ad8     A7 20 0A FB | 	rdlong	local02, fp wz
20adc     58 1E 06 56 |  if_ne	mov	local01, #88
20ae0     78 1E 06 A6 |  if_e	mov	local01, #120
20ae4     7C 4E 85 F1 | 	sub	fp, #124
20ae8     A7 1E 62 FC | 	wrlong	local01, fp
20aec     40 4E 85 F1 | 	sub	fp, #64
20af0                 | LR__2863
20af0     10 4E 05 F1 | 	add	fp, #16
20af4     A7 1E 02 FB | 	rdlong	local01, fp
20af8     10 4E 85 F1 | 	sub	fp, #16
20afc     23 1E 0E F2 | 	cmp	local01, #35 wz
20b00     3C 00 90 5D |  if_ne	jmp	#LR__2866
20b04     48 4E 05 F1 | 	add	fp, #72
20b08     A7 02 68 FC | 	wrlong	#1, fp
20b0c     C8 4E 05 F1 | 	add	fp, #200
20b10     A7 1E 0A FB | 	rdlong	local01, fp wz
20b14     10 4F 85 F1 | 	sub	fp, #272
20b18     18 00 90 AD |  if_e	jmp	#LR__2864
20b1c     10 4E 05 F1 | 	add	fp, #16
20b20     A7 CC 68 FC | 	wrlong	#102, fp
20b24     00 4F 05 F1 | 	add	fp, #256
20b28     A7 00 68 FC | 	wrlong	#0, fp
20b2c     10 4F 85 F1 | 	sub	fp, #272
20b30     0C 00 90 FD | 	jmp	#LR__2865
20b34                 | LR__2864
20b34     10 4F 05 F1 | 	add	fp, #272
20b38     A7 02 68 FC | 	wrlong	#1, fp
20b3c     10 4F 85 F1 | 	sub	fp, #272
20b40                 | LR__2865
20b40                 | LR__2866
20b40     08 4E 05 F1 | 	add	fp, #8
20b44     A7 1E 02 FB | 	rdlong	local01, fp
20b48     1A 1E 46 F0 | 	shr	local01, #26
20b4c     03 1E 06 F5 | 	and	local01, #3
20b50     5C 4E 05 F1 | 	add	fp, #92
20b54     A7 1E 62 FC | 	wrlong	local01, fp
20b58     58 4E 85 F1 | 	sub	fp, #88
20b5c     A7 FA 01 FB | 	rdlong	result1, fp
20b60     0C 4E 85 F1 | 	sub	fp, #12
20b64     1F FA 4D F0 | 	shr	result1, #31 wz
20b68     20 00 90 AD |  if_e	jmp	#LR__2867
20b6c     2C 4E 05 F1 | 	add	fp, #44
20b70     A7 5A 68 FC | 	wrlong	#45, fp
20b74     20 4E 85 F1 | 	sub	fp, #32
20b78     A7 FA 01 FB | 	rdlong	result1, fp
20b7c     1F FA E5 F4 | 	bitnot	result1, #31
20b80     A7 FA 61 FC | 	wrlong	result1, fp
20b84     0C 4E 85 F1 | 	sub	fp, #12
20b88     3C 00 90 FD | 	jmp	#LR__2869
20b8c                 | LR__2867
20b8c     64 4E 05 F1 | 	add	fp, #100
20b90     A7 1E 02 FB | 	rdlong	local01, fp
20b94     64 4E 85 F1 | 	sub	fp, #100
20b98     01 1E 0E F2 | 	cmp	local01, #1 wz
20b9c     2C 4E 05 A1 |  if_e	add	fp, #44
20ba0     A7 56 68 AC |  if_e	wrlong	#43, fp
20ba4     2C 4E 85 A1 |  if_e	sub	fp, #44
20ba8     1C 00 90 AD |  if_e	jmp	#LR__2868
20bac     64 4E 05 F1 | 	add	fp, #100
20bb0     A7 1E 02 FB | 	rdlong	local01, fp
20bb4     64 4E 85 F1 | 	sub	fp, #100
20bb8     02 1E 0E F2 | 	cmp	local01, #2 wz
20bbc     2C 4E 05 A1 |  if_e	add	fp, #44
20bc0     A7 40 68 AC |  if_e	wrlong	#32, fp
20bc4     2C 4E 85 A1 |  if_e	sub	fp, #44
20bc8                 | LR__2868
20bc8                 | LR__2869
20bc8     08 4E 05 F1 | 	add	fp, #8
20bcc     A7 1E 02 FB | 	rdlong	local01, fp
20bd0     18 1E 46 F0 | 	shr	local01, #24
20bd4     03 1E 06 F5 | 	and	local01, #3
20bd8     3C 4E 05 F1 | 	add	fp, #60
20bdc     A7 1E 62 FC | 	wrlong	local01, fp
20be0     00 1E 06 F6 | 	mov	local01, #0
20be4     18 4E 85 F1 | 	sub	fp, #24
20be8     A7 22 0A FB | 	rdlong	local03, fp wz
20bec     2C 4E 85 F1 | 	sub	fp, #44
20bf0     18 00 90 5D |  if_ne	jmp	#LR__2870
20bf4     1C 4E 05 F1 | 	add	fp, #28
20bf8     A7 24 02 FB | 	rdlong	local04, fp
20bfc     1C 4E 85 F1 | 	sub	fp, #28
20c00     12 27 02 F6 | 	mov	local05, local04
20c04     0A 26 0E F2 | 	cmp	local05, #10 wz
20c08     04 00 90 AD |  if_e	jmp	#LR__2871
20c0c                 | LR__2870
20c0c     01 1E 66 F5 | 	xor	local01, #1
20c10                 | LR__2871
20c10     3C 4E 05 F1 | 	add	fp, #60
20c14     A7 1E 62 FC | 	wrlong	local01, fp
20c18     3C 4E 85 F1 | 	sub	fp, #60
20c1c     00 1E 0E F2 | 	cmp	local01, #0 wz
20c20     0C 01 90 AD |  if_e	jmp	#LR__2873
20c24     44 4E 05 F1 | 	add	fp, #68
20c28     A7 26 02 FB | 	rdlong	local05, fp
20c2c     44 4E 85 F1 | 	sub	fp, #68
20c30     13 23 02 F6 | 	mov	local03, local05
20c34     02 22 0E F2 | 	cmp	local03, #2 wz
20c38     F4 00 90 5D |  if_ne	jmp	#LR__2873
20c3c     0C 4F 05 F1 | 	add	fp, #268
20c40     A7 28 02 FB | 	rdlong	local06, fp
20c44     0C 4F 85 F1 | 	sub	fp, #268
20c48     14 25 02 F6 | 	mov	local04, local06
20c4c     02 24 0E F2 | 	cmp	local04, #2 wz
20c50     DC 00 90 AD |  if_e	jmp	#LR__2873
20c54     C0 4E 05 F1 | 	add	fp, #192
20c58     A7 12 02 FB | 	rdlong	arg01, fp
20c5c     94 4E 85 F1 | 	sub	fp, #148
20c60     A7 14 02 FB | 	rdlong	arg02, fp
20c64     14 4E 05 F1 | 	add	fp, #20
20c68     A7 16 02 FB | 	rdlong	arg03, fp
20c6c     40 4E 85 F1 | 	sub	fp, #64
20c70     68 44 B0 FD | 	call	#__system__emitsign_0468
20c74     14 4F 05 F1 | 	add	fp, #276
20c78     A7 FA 61 FC | 	wrlong	result1, fp
20c7c     14 4F 85 F1 | 	sub	fp, #276
20c80     00 FA 55 F2 | 	cmps	result1, #0 wc
20c84     14 4F 05 C1 |  if_b	add	fp, #276
20c88     A7 FA 01 CB |  if_b	rdlong	result1, fp
20c8c     14 4F 85 C1 |  if_b	sub	fp, #276
20c90     6C 0B 90 CD |  if_b	jmp	#LR__2923
20c94     C0 4E 05 F1 | 	add	fp, #192
20c98     A7 1E 02 FB | 	rdlong	local01, fp
20c9c     54 4E 05 F1 | 	add	fp, #84
20ca0     A7 26 02 FB | 	rdlong	local05, fp
20ca4     13 23 02 F6 | 	mov	local03, local05
20ca8     13 1F 02 F1 | 	add	local01, local05
20cac     54 4E 85 F1 | 	sub	fp, #84
20cb0     A7 1E 62 FC | 	wrlong	local01, fp
20cb4     58 4E 85 F1 | 	sub	fp, #88
20cb8     A7 1E 0A FB | 	rdlong	local01, fp wz
20cbc     68 4E 85 F1 | 	sub	fp, #104
20cc0     60 00 90 AD |  if_e	jmp	#LR__2872
20cc4     68 4E 05 F1 | 	add	fp, #104
20cc8     A7 1E 02 FB | 	rdlong	local01, fp
20ccc     AC 4E 05 F1 | 	add	fp, #172
20cd0     A7 22 02 FB | 	rdlong	local03, fp
20cd4     11 1F 82 F1 | 	sub	local01, local03
20cd8     AC 4E 85 F1 | 	sub	fp, #172
20cdc     A7 1E 62 FC | 	wrlong	local01, fp
20ce0     68 4E 85 F1 | 	sub	fp, #104
20ce4     00 1E 56 F2 | 	cmps	local01, #0 wc
20ce8     68 4E 05 C1 |  if_b	add	fp, #104
20cec     A7 00 68 CC |  if_b	wrlong	#0, fp
20cf0     68 4E 85 C1 |  if_b	sub	fp, #104
20cf4     08 4E 05 F1 | 	add	fp, #8
20cf8     A7 1E 02 FB | 	rdlong	local01, fp
20cfc     E8 1E 06 F4 | 	bitl	local01, #232
20d00     A7 1E 62 FC | 	wrlong	local01, fp
20d04     60 4E 05 F1 | 	add	fp, #96
20d08     A7 26 02 FB | 	rdlong	local05, fp
20d0c     13 23 02 F6 | 	mov	local03, local05
20d10     08 22 66 F0 | 	shl	local03, #8
20d14     11 1F 42 F5 | 	or	local01, local03
20d18     60 4E 85 F1 | 	sub	fp, #96
20d1c     A7 1E 62 FC | 	wrlong	local01, fp
20d20     08 4E 85 F1 | 	sub	fp, #8
20d24                 | LR__2872
20d24     3C 4E 05 F1 | 	add	fp, #60
20d28     A7 00 68 FC | 	wrlong	#0, fp
20d2c     3C 4E 85 F1 | 	sub	fp, #60
20d30                 | LR__2873
20d30     0C 4E 05 F1 | 	add	fp, #12
20d34     A7 12 02 FB | 	rdlong	arg01, fp
20d38     0C 4E 85 F1 | 	sub	fp, #12
20d3c     04 1F B0 FD | 	call	#__system____builtin_ilogb
20d40     FF FF 3F FF 
20d44     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
20d48     50 00 90 5D |  if_ne	jmp	#LR__2875
20d4c     2C 4E 05 F1 | 	add	fp, #44
20d50     A7 1E 0A FB | 	rdlong	local01, fp wz
20d54     2C 4E 85 F1 | 	sub	fp, #44
20d58     24 00 90 AD |  if_e	jmp	#LR__2874
20d5c     C0 4E 05 F1 | 	add	fp, #192
20d60     A7 20 02 FB | 	rdlong	local02, fp
20d64     10 23 02 F6 | 	mov	local03, local02
20d68     01 22 06 F1 | 	add	local03, #1
20d6c     A7 22 62 FC | 	wrlong	local03, fp
20d70     94 4E 85 F1 | 	sub	fp, #148
20d74     A7 24 02 FB | 	rdlong	local04, fp
20d78     2C 4E 85 F1 | 	sub	fp, #44
20d7c     10 25 42 FC | 	wrbyte	local04, local02
20d80                 | LR__2874
20d80     C0 4E 05 F1 | 	add	fp, #192
20d84     A7 12 02 FB | 	rdlong	arg01, fp
20d88     C0 4E 85 F1 | 	sub	fp, #192
20d8c     76 01 00 FF 
20d90     B2 15 06 F6 | 	mov	arg02, ##@LR__4811
20d94     18 EA BF FD | 	call	#__system____builtin_strcpy
20d98     A4 08 90 FD | 	jmp	#LR__2911
20d9c                 | LR__2875
20d9c     0C 4E 05 F1 | 	add	fp, #12
20da0     A7 20 02 FB | 	rdlong	local02, fp
20da4     0C 4E 85 F1 | 	sub	fp, #12
20da8     10 13 02 F6 | 	mov	arg01, local02
20dac     94 1E B0 FD | 	call	#__system____builtin_ilogb
20db0     00 00 40 FF 
20db4     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
20db8     50 00 90 5D |  if_ne	jmp	#LR__2877
20dbc     2C 4E 05 F1 | 	add	fp, #44
20dc0     A7 1E 0A FB | 	rdlong	local01, fp wz
20dc4     2C 4E 85 F1 | 	sub	fp, #44
20dc8     24 00 90 AD |  if_e	jmp	#LR__2876
20dcc     C0 4E 05 F1 | 	add	fp, #192
20dd0     A7 20 02 FB | 	rdlong	local02, fp
20dd4     10 23 02 F6 | 	mov	local03, local02
20dd8     01 22 06 F1 | 	add	local03, #1
20ddc     A7 22 62 FC | 	wrlong	local03, fp
20de0     94 4E 85 F1 | 	sub	fp, #148
20de4     A7 24 02 FB | 	rdlong	local04, fp
20de8     2C 4E 85 F1 | 	sub	fp, #44
20dec     10 25 42 FC | 	wrbyte	local04, local02
20df0                 | LR__2876
20df0     C0 4E 05 F1 | 	add	fp, #192
20df4     A7 12 02 FB | 	rdlong	arg01, fp
20df8     C0 4E 85 F1 | 	sub	fp, #192
20dfc     76 01 00 FF 
20e00     B6 15 06 F6 | 	mov	arg02, ##@LR__4812
20e04     A8 E9 BF FD | 	call	#__system____builtin_strcpy
20e08     34 08 90 FD | 	jmp	#LR__2911
20e0c                 | LR__2877
20e0c     10 4E 05 F1 | 	add	fp, #16
20e10     A7 1E 02 FB | 	rdlong	local01, fp
20e14     10 4E 85 F1 | 	sub	fp, #16
20e18     67 1E 0E F2 | 	cmp	local01, #103 wz
20e1c     10 4E 05 51 |  if_ne	add	fp, #16
20e20     A7 22 02 5B |  if_ne	rdlong	local03, fp
20e24     10 4E 85 51 |  if_ne	sub	fp, #16
20e28     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
20e2c     94 01 90 5D |  if_ne	jmp	#LR__2882
20e30     0C 4E 05 F1 | 	add	fp, #12
20e34     A7 12 02 FB | 	rdlong	arg01, fp
20e38     08 4E 05 F1 | 	add	fp, #8
20e3c     A7 14 02 F6 | 	mov	arg02, fp
20e40     0C 4E 05 F1 | 	add	fp, #12
20e44     A7 16 02 F6 | 	mov	arg03, fp
20e48     98 4E 05 F1 | 	add	fp, #152
20e4c     A7 18 02 FB | 	rdlong	arg04, fp
20e50     9C 4E 85 F1 | 	sub	fp, #156
20e54     A7 1A 02 FB | 	rdlong	arg05, fp
20e58     1C 4E 85 F1 | 	sub	fp, #28
20e5c     88 40 B0 FD | 	call	#__system__disassemble_0466
20e60     10 4E 05 F1 | 	add	fp, #16
20e64     A7 1E 02 FB | 	rdlong	local01, fp
20e68     10 4E 85 F1 | 	sub	fp, #16
20e6c     23 1E 0E F2 | 	cmp	local01, #35 wz
20e70     A0 00 90 5D |  if_ne	jmp	#LR__2879
20e74     20 4E 05 F1 | 	add	fp, #32
20e78     A7 1E 02 FB | 	rdlong	local01, fp
20e7c     98 4E 05 F1 | 	add	fp, #152
20e80     A7 22 02 FB | 	rdlong	local03, fp
20e84     B8 4E 85 F1 | 	sub	fp, #184
20e88     11 1F 5A F2 | 	cmps	local01, local03 wcz
20e8c     24 4E 05 11 |  if_a	add	fp, #36
20e90     A7 02 68 1C |  if_a	wrlong	#1, fp
20e94     24 4E 85 11 |  if_a	sub	fp, #36
20e98     A4 01 90 1D |  if_a	jmp	#LR__2885
20e9c     20 4E 05 F1 | 	add	fp, #32
20ea0     A7 1E 02 FB | 	rdlong	local01, fp
20ea4     20 4E 85 F1 | 	sub	fp, #32
20ea8     00 1E 56 F2 | 	cmps	local01, #0 wc
20eac     2C 00 90 3D |  if_ae	jmp	#LR__2878
20eb0     B8 4E 05 F1 | 	add	fp, #184
20eb4     A7 1E 02 FB | 	rdlong	local01, fp
20eb8     0F 1F 62 F6 | 	neg	local01, local01
20ebc     98 4E 85 F1 | 	sub	fp, #152
20ec0     A7 22 02 FB | 	rdlong	local03, fp
20ec4     20 4E 85 F1 | 	sub	fp, #32
20ec8     0F 23 5A F2 | 	cmps	local03, local01 wcz
20ecc     24 4E 05 E1 |  if_be	add	fp, #36
20ed0     A7 02 68 EC |  if_be	wrlong	#1, fp
20ed4     24 4E 85 E1 |  if_be	sub	fp, #36
20ed8     64 01 90 FD | 	jmp	#LR__2885
20edc                 | LR__2878
20edc     20 4E 05 F1 | 	add	fp, #32
20ee0     A7 1E 02 FB | 	rdlong	local01, fp
20ee4     20 4E 85 F1 | 	sub	fp, #32
20ee8     01 1E 56 F2 | 	cmps	local01, #1 wc
20eec     50 01 90 CD |  if_b	jmp	#LR__2885
20ef0     B8 4E 05 F1 | 	add	fp, #184
20ef4     A7 1E 02 FB | 	rdlong	local01, fp
20ef8     98 4E 85 F1 | 	sub	fp, #152
20efc     A7 22 02 FB | 	rdlong	local03, fp
20f00     11 1F 82 F1 | 	sub	local01, local03
20f04     98 4E 05 F1 | 	add	fp, #152
20f08     A7 1E 62 FC | 	wrlong	local01, fp
20f0c     B8 4E 85 F1 | 	sub	fp, #184
20f10     2C 01 90 FD | 	jmp	#LR__2885
20f14                 | LR__2879
20f14     00 1E 06 F6 | 	mov	local01, #0
20f18     08 4E 05 F1 | 	add	fp, #8
20f1c     A7 20 02 FB | 	rdlong	local02, fp
20f20     1C 20 46 F0 | 	shr	local02, #28
20f24     01 20 0E F5 | 	and	local02, #1 wz
20f28     01 1E 06 A6 |  if_e	mov	local01, #1
20f2c     2C 4E 05 F1 | 	add	fp, #44
20f30     A7 1E 62 FC | 	wrlong	local01, fp
20f34     14 4E 85 F1 | 	sub	fp, #20
20f38     A7 1E 02 FB | 	rdlong	local01, fp
20f3c     98 4E 05 F1 | 	add	fp, #152
20f40     A7 22 02 FB | 	rdlong	local03, fp
20f44     B8 4E 85 F1 | 	sub	fp, #184
20f48     11 1F 52 F2 | 	cmps	local01, local03 wc
20f4c     18 00 90 3D |  if_ae	jmp	#LR__2880
20f50     20 4E 05 F1 | 	add	fp, #32
20f54     A7 24 02 FB | 	rdlong	local04, fp
20f58     20 4E 85 F1 | 	sub	fp, #32
20f5c     FF FF 7F FF 
20f60     FC 25 56 F2 | 	cmps	local04, ##-4 wc
20f64     10 00 90 3D |  if_ae	jmp	#LR__2881
20f68                 | LR__2880
20f68     24 4E 05 F1 | 	add	fp, #36
20f6c     A7 02 68 FC | 	wrlong	#1, fp
20f70     24 4E 85 F1 | 	sub	fp, #36
20f74     C8 00 90 FD | 	jmp	#LR__2885
20f78                 | LR__2881
20f78     B8 4E 05 F1 | 	add	fp, #184
20f7c     A7 24 02 FB | 	rdlong	local04, fp
20f80     98 4E 85 F1 | 	sub	fp, #152
20f84     A7 22 02 FB | 	rdlong	local03, fp
20f88     11 25 82 F1 | 	sub	local04, local03
20f8c     98 4E 05 F1 | 	add	fp, #152
20f90     A7 24 62 FC | 	wrlong	local04, fp
20f94     AC 4E 85 F1 | 	sub	fp, #172
20f98     A7 12 02 FB | 	rdlong	arg01, fp
20f9c     08 4E 05 F1 | 	add	fp, #8
20fa0     A7 14 02 F6 | 	mov	arg02, fp
20fa4     0C 4E 05 F1 | 	add	fp, #12
20fa8     A7 16 02 F6 | 	mov	arg03, fp
20fac     12 19 62 F6 | 	neg	arg04, local04
20fb0     04 4E 85 F1 | 	sub	fp, #4
20fb4     A7 1A 02 FB | 	rdlong	arg05, fp
20fb8     1C 4E 85 F1 | 	sub	fp, #28
20fbc     28 3F B0 FD | 	call	#__system__disassemble_0466
20fc0     7C 00 90 FD | 	jmp	#LR__2885
20fc4                 | LR__2882
20fc4     24 4E 05 F1 | 	add	fp, #36
20fc8     A7 1E 0A FB | 	rdlong	local01, fp wz
20fcc     24 4E 85 F1 | 	sub	fp, #36
20fd0     34 00 90 AD |  if_e	jmp	#LR__2883
20fd4     0C 4E 05 F1 | 	add	fp, #12
20fd8     A7 12 02 FB | 	rdlong	arg01, fp
20fdc     08 4E 05 F1 | 	add	fp, #8
20fe0     A7 14 02 F6 | 	mov	arg02, fp
20fe4     0C 4E 05 F1 | 	add	fp, #12
20fe8     A7 16 02 F6 | 	mov	arg03, fp
20fec     98 4E 05 F1 | 	add	fp, #152
20ff0     A7 18 02 FB | 	rdlong	arg04, fp
20ff4     9C 4E 85 F1 | 	sub	fp, #156
20ff8     A7 1A 02 FB | 	rdlong	arg05, fp
20ffc     1C 4E 85 F1 | 	sub	fp, #28
21000     E4 3E B0 FD | 	call	#__system__disassemble_0466
21004     38 00 90 FD | 	jmp	#LR__2884
21008                 | LR__2883
21008     0C 4E 05 F1 | 	add	fp, #12
2100c     A7 12 02 FB | 	rdlong	arg01, fp
21010     08 4E 05 F1 | 	add	fp, #8
21014     A7 14 02 F6 | 	mov	arg02, fp
21018     0C 4E 05 F1 | 	add	fp, #12
2101c     A7 16 02 F6 | 	mov	arg03, fp
21020     98 4E 05 F1 | 	add	fp, #152
21024     A7 24 02 FB | 	rdlong	local04, fp
21028     01 24 06 F1 | 	add	local04, #1
2102c     12 19 62 F6 | 	neg	arg04, local04
21030     9C 4E 85 F1 | 	sub	fp, #156
21034     A7 1A 02 FB | 	rdlong	arg05, fp
21038     1C 4E 85 F1 | 	sub	fp, #28
2103c     A8 3E B0 FD | 	call	#__system__disassemble_0466
21040                 | LR__2884
21040                 | LR__2885
21040     1C 4E 05 F1 | 	add	fp, #28
21044     A7 1E 02 FB | 	rdlong	local01, fp
21048     1C 4E 85 F1 | 	sub	fp, #28
2104c     02 1E 0E F2 | 	cmp	local01, #2 wz
21050     4C 00 90 5D |  if_ne	jmp	#LR__2888
21054     1C 4E 05 F1 | 	add	fp, #28
21058     A7 20 68 FC | 	wrlong	#16, fp
2105c     1C 4E 85 F1 | 	sub	fp, #28
21060                 | LR__2886
21060     14 4E 05 F1 | 	add	fp, #20
21064     A7 1E 0A FB | 	rdlong	local01, fp wz
21068     14 4E 85 F1 | 	sub	fp, #20
2106c     30 00 90 AD |  if_e	jmp	#LR__2887
21070     14 4E 05 F1 | 	add	fp, #20
21074     A7 22 02 FB | 	rdlong	local03, fp
21078     14 4E 85 F1 | 	sub	fp, #20
2107c     00 80 00 FF 
21080     00 22 16 F2 | 	cmp	local03, ##16777216 wc
21084     18 00 90 3D |  if_ae	jmp	#LR__2887
21088     14 4E 05 F1 | 	add	fp, #20
2108c     A7 1E 02 FB | 	rdlong	local01, fp
21090     01 1E 66 F0 | 	shl	local01, #1
21094     A7 1E 62 FC | 	wrlong	local01, fp
21098     14 4E 85 F1 | 	sub	fp, #20
2109c     C0 FF 9F FD | 	jmp	#LR__2886
210a0                 | LR__2887
210a0                 | LR__2888
210a0     70 4E 05 F1 | 	add	fp, #112
210a4     A7 12 02 F6 | 	mov	arg01, fp
210a8     5C 4E 85 F1 | 	sub	fp, #92
210ac     A7 14 02 FB | 	rdlong	arg02, fp
210b0     08 4E 05 F1 | 	add	fp, #8
210b4     A7 16 02 FB | 	rdlong	arg03, fp
210b8     A0 4E 05 F1 | 	add	fp, #160
210bc     A7 1A 02 FB | 	rdlong	arg05, fp
210c0     BC 4E 85 F1 | 	sub	fp, #188
210c4     01 18 06 F6 | 	mov	arg04, #1
210c8     A8 3D B0 FD | 	call	#__system___uitoa
210cc     58 4E 05 F1 | 	add	fp, #88
210d0     A7 FA 61 FC | 	wrlong	result1, fp
210d4     38 4E 85 F1 | 	sub	fp, #56
210d8     A7 1E 02 FB | 	rdlong	local01, fp
210dc     20 4E 85 F1 | 	sub	fp, #32
210e0     00 1E 56 F2 | 	cmps	local01, #0 wc
210e4     50 00 90 3D |  if_ae	jmp	#LR__2889
210e8     60 4E 05 F1 | 	add	fp, #96
210ec     A7 5A 68 FC | 	wrlong	#45, fp
210f0     50 4E 05 F1 | 	add	fp, #80
210f4     A7 12 02 F6 | 	mov	arg01, fp
210f8     90 4E 85 F1 | 	sub	fp, #144
210fc     A7 22 02 FB | 	rdlong	local03, fp
21100     11 15 62 F6 | 	neg	arg02, local03
21104     18 4E 05 F1 | 	add	fp, #24
21108     A7 18 02 FB | 	rdlong	arg04, fp
2110c     84 4E 05 F1 | 	add	fp, #132
21110     A7 28 02 FB | 	rdlong	local06, fp
21114     BC 4E 85 F1 | 	sub	fp, #188
21118     14 25 02 F6 | 	mov	local04, local06
2111c     0A 16 06 F6 | 	mov	arg03, #10
21120     12 1B 02 F6 | 	mov	arg05, local04
21124     4C 3D B0 FD | 	call	#__system___uitoa
21128     5C 4E 05 F1 | 	add	fp, #92
2112c     A7 FA 61 FC | 	wrlong	result1, fp
21130     5C 4E 85 F1 | 	sub	fp, #92
21134     48 00 90 FD | 	jmp	#LR__2890
21138                 | LR__2889
21138     60 4E 05 F1 | 	add	fp, #96
2113c     A7 56 68 FC | 	wrlong	#43, fp
21140     50 4E 05 F1 | 	add	fp, #80
21144     A7 12 02 F6 | 	mov	arg01, fp
21148     90 4E 85 F1 | 	sub	fp, #144
2114c     A7 14 02 FB | 	rdlong	arg02, fp
21150     18 4E 05 F1 | 	add	fp, #24
21154     A7 18 02 FB | 	rdlong	arg04, fp
21158     84 4E 05 F1 | 	add	fp, #132
2115c     A7 28 02 FB | 	rdlong	local06, fp
21160     BC 4E 85 F1 | 	sub	fp, #188
21164     14 25 02 F6 | 	mov	local04, local06
21168     0A 16 06 F6 | 	mov	arg03, #10
2116c     12 1B 02 F6 | 	mov	arg05, local04
21170     00 3D B0 FD | 	call	#__system___uitoa
21174     5C 4E 05 F1 | 	add	fp, #92
21178     A7 FA 61 FC | 	wrlong	result1, fp
2117c     5C 4E 85 F1 | 	sub	fp, #92
21180                 | LR__2890
21180     24 4E 05 F1 | 	add	fp, #36
21184     A7 1E 0A FB | 	rdlong	local01, fp wz
21188     24 4E 85 F1 | 	sub	fp, #36
2118c     2C 00 90 AD |  if_e	jmp	#LR__2891
21190     50 4E 05 F1 | 	add	fp, #80
21194     A7 00 68 FC | 	wrlong	#0, fp
21198     04 4E 85 F1 | 	sub	fp, #4
2119c     A7 00 68 FC | 	wrlong	#0, fp
211a0     6C 4E 05 F1 | 	add	fp, #108
211a4     A7 1E 02 FB | 	rdlong	local01, fp
211a8     01 1E 06 F1 | 	add	local01, #1
211ac     64 4E 85 F1 | 	sub	fp, #100
211b0     A7 1E 62 FC | 	wrlong	local01, fp
211b4     54 4E 85 F1 | 	sub	fp, #84
211b8     88 00 90 FD | 	jmp	#LR__2894
211bc                 | LR__2891
211bc     20 4E 05 F1 | 	add	fp, #32
211c0     A7 1E 02 FB | 	rdlong	local01, fp
211c4     20 4E 85 F1 | 	sub	fp, #32
211c8     00 1E 56 F2 | 	cmps	local01, #0 wc
211cc     40 00 90 3D |  if_ae	jmp	#LR__2892
211d0     20 4E 05 F1 | 	add	fp, #32
211d4     A7 20 02 FB | 	rdlong	local02, fp
211d8     30 4E 05 F1 | 	add	fp, #48
211dc     A7 20 62 FC | 	wrlong	local02, fp
211e0     04 4E 85 F1 | 	sub	fp, #4
211e4     A7 20 62 FC | 	wrlong	local02, fp
211e8     2C 4E 85 F1 | 	sub	fp, #44
211ec     A7 1E 02 FB | 	rdlong	local01, fp
211f0     98 4E 05 F1 | 	add	fp, #152
211f4     A7 22 02 FB | 	rdlong	local03, fp
211f8     11 1F 02 F1 | 	add	local01, local03
211fc     01 1E 06 F1 | 	add	local01, #1
21200     64 4E 85 F1 | 	sub	fp, #100
21204     A7 1E 62 FC | 	wrlong	local01, fp
21208     54 4E 85 F1 | 	sub	fp, #84
2120c     34 00 90 FD | 	jmp	#LR__2893
21210                 | LR__2892
21210     4C 4E 05 F1 | 	add	fp, #76
21214     A7 00 68 FC | 	wrlong	#0, fp
21218     2C 4E 85 F1 | 	sub	fp, #44
2121c     A7 1E 02 FB | 	rdlong	local01, fp
21220     30 4E 05 F1 | 	add	fp, #48
21224     A7 1E 62 FC | 	wrlong	local01, fp
21228     68 4E 05 F1 | 	add	fp, #104
2122c     A7 22 02 FB | 	rdlong	local03, fp
21230     11 1F 02 F1 | 	add	local01, local03
21234     01 1E 06 F1 | 	add	local01, #1
21238     64 4E 85 F1 | 	sub	fp, #100
2123c     A7 1E 62 FC | 	wrlong	local01, fp
21240     54 4E 85 F1 | 	sub	fp, #84
21244                 | LR__2893
21244                 | LR__2894
21244     54 4E 05 F1 | 	add	fp, #84
21248     A7 1E 02 FB | 	rdlong	local01, fp
2124c     08 4E 85 F1 | 	sub	fp, #8
21250     A7 22 02 FB | 	rdlong	local03, fp
21254     11 1F 82 F1 | 	sub	local01, local03
21258     01 1E 06 F1 | 	add	local01, #1
2125c     24 4E 85 F1 | 	sub	fp, #36
21260     A7 1E 62 FC | 	wrlong	local01, fp
21264     04 4E 05 F1 | 	add	fp, #4
21268     A7 1E 0A FB | 	rdlong	local01, fp wz
2126c     2C 4E 85 F1 | 	sub	fp, #44
21270     28 4E 05 51 |  if_ne	add	fp, #40
21274     A7 22 02 5B |  if_ne	rdlong	local03, fp
21278     01 22 06 51 |  if_ne	add	local03, #1
2127c     A7 22 62 5C |  if_ne	wrlong	local03, fp
21280     28 4E 85 51 |  if_ne	sub	fp, #40
21284     1C 4E 05 F1 | 	add	fp, #28
21288     A7 1E 02 FB | 	rdlong	local01, fp
2128c     1C 4E 85 F1 | 	sub	fp, #28
21290     10 1E 0E F2 | 	cmp	local01, #16 wz
21294     28 4E 05 A1 |  if_e	add	fp, #40
21298     A7 1E 02 AB |  if_e	rdlong	local01, fp
2129c     02 1E 06 A1 |  if_e	add	local01, #2
212a0     A7 1E 62 AC |  if_e	wrlong	local01, fp
212a4     28 4E 85 A1 |  if_e	sub	fp, #40
212a8     24 4E 05 F1 | 	add	fp, #36
212ac     A7 1E 0A FB | 	rdlong	local01, fp wz
212b0     24 4E 85 F1 | 	sub	fp, #36
212b4     28 00 90 AD |  if_e	jmp	#LR__2895
212b8     28 4E 05 F1 | 	add	fp, #40
212bc     A7 1E 02 FB | 	rdlong	local01, fp
212c0     02 22 06 F6 | 	mov	local03, #2
212c4     34 4E 05 F1 | 	add	fp, #52
212c8     A7 26 02 FB | 	rdlong	local05, fp
212cc     13 23 02 F1 | 	add	local03, local05
212d0     11 1F 02 F1 | 	add	local01, local03
212d4     34 4E 85 F1 | 	sub	fp, #52
212d8     A7 1E 62 FC | 	wrlong	local01, fp
212dc     28 4E 85 F1 | 	sub	fp, #40
212e0                 | LR__2895
212e0     28 4E 05 F1 | 	add	fp, #40
212e4     A7 1E 02 FB | 	rdlong	local01, fp
212e8     28 4E 85 F1 | 	sub	fp, #40
212ec     41 1E 56 F2 | 	cmps	local01, #65 wc
212f0     01 FA 65 36 |  if_ae	neg	result1, #1
212f4     08 05 90 3D |  if_ae	jmp	#LR__2923
212f8     3C 4E 05 F1 | 	add	fp, #60
212fc     A7 1E 0A FB | 	rdlong	local01, fp wz
21300     3C 4E 85 F1 | 	sub	fp, #60
21304     60 00 90 AD |  if_e	jmp	#LR__2896
21308     C0 4E 05 F1 | 	add	fp, #192
2130c     A7 12 02 FB | 	rdlong	arg01, fp
21310     94 4E 85 F1 | 	sub	fp, #148
21314     A7 14 02 FB | 	rdlong	arg02, fp
21318     14 4E 05 F1 | 	add	fp, #20
2131c     A7 16 02 FB | 	rdlong	arg03, fp
21320     40 4E 85 F1 | 	sub	fp, #64
21324     B4 3D B0 FD | 	call	#__system__emitsign_0468
21328     18 4F 05 F1 | 	add	fp, #280
2132c     A7 FA 61 FC | 	wrlong	result1, fp
21330     18 4F 85 F1 | 	sub	fp, #280
21334     00 FA 55 F2 | 	cmps	result1, #0 wc
21338     18 4F 05 C1 |  if_b	add	fp, #280
2133c     A7 FA 01 CB |  if_b	rdlong	result1, fp
21340     18 4F 85 C1 |  if_b	sub	fp, #280
21344     B8 04 90 CD |  if_b	jmp	#LR__2923
21348     C0 4E 05 F1 | 	add	fp, #192
2134c     A7 1E 02 FB | 	rdlong	local01, fp
21350     58 4E 05 F1 | 	add	fp, #88
21354     A7 22 02 FB | 	rdlong	local03, fp
21358     11 1F 02 F1 | 	add	local01, local03
2135c     58 4E 85 F1 | 	sub	fp, #88
21360     A7 1E 62 FC | 	wrlong	local01, fp
21364     C0 4E 85 F1 | 	sub	fp, #192
21368                 | LR__2896
21368     4C 4E 05 F1 | 	add	fp, #76
2136c     A7 1E 02 FB | 	rdlong	local01, fp
21370     34 4E 85 F1 | 	sub	fp, #52
21374     A7 1E 62 FC | 	wrlong	local01, fp
21378     18 4E 85 F1 | 	sub	fp, #24
2137c     97 9E 48 FB | 	callpa	#(@LR__2902-@LR__2897)>>2,fcache_load_ptr_
21380                 | LR__2897
21380     18 4E 05 F1 | 	add	fp, #24
21384     A7 20 02 FB | 	rdlong	local02, fp
21388     3C 4E 05 F1 | 	add	fp, #60
2138c     A7 26 02 FB | 	rdlong	local05, fp
21390     54 4E 85 F1 | 	sub	fp, #84
21394     13 21 52 F2 | 	cmps	local02, local05 wc
21398     20 01 90 3D |  if_ae	jmp	#LR__2903
2139c     18 4E 05 F1 | 	add	fp, #24
213a0     A7 28 02 FB | 	rdlong	local06, fp
213a4     18 4E 85 F1 | 	sub	fp, #24
213a8     00 28 56 F2 | 	cmps	local06, #0 wc
213ac     58 00 90 CD |  if_b	jmp	#LR__2898
213b0     18 4E 05 F1 | 	add	fp, #24
213b4     A7 28 02 FB | 	rdlong	local06, fp
213b8     40 4E 05 F1 | 	add	fp, #64
213bc     A7 2A 02 FB | 	rdlong	local07, fp
213c0     58 4E 85 F1 | 	sub	fp, #88
213c4     15 29 52 F2 | 	cmps	local06, local07 wc
213c8     3C 00 90 3D |  if_ae	jmp	#LR__2898
213cc     C0 4E 05 F1 | 	add	fp, #192
213d0     A7 2C 02 FB | 	rdlong	local08, fp
213d4     16 2B 02 F6 | 	mov	local07, local08
213d8     01 2A 06 F1 | 	add	local07, #1
213dc     A7 2A 62 FC | 	wrlong	local07, fp
213e0     A8 4E 85 F1 | 	sub	fp, #168
213e4     A7 2A 02 FB | 	rdlong	local07, fp
213e8     15 2F 02 F6 | 	mov	local09, local07
213ec     58 4E 05 F1 | 	add	fp, #88
213f0     A7 30 02 F6 | 	mov	local10, fp
213f4     A7 2E 02 F1 | 	add	local09, fp
213f8     17 33 C2 FA | 	rdbyte	local11, local09
213fc     16 33 42 FC | 	wrbyte	local11, local08
21400     70 4E 85 F1 | 	sub	fp, #112
21404     20 00 90 FD | 	jmp	#LR__2899
21408                 | LR__2898
21408     C0 4E 05 F1 | 	add	fp, #192
2140c     A7 2C 02 FB | 	rdlong	local08, fp
21410     16 2F 02 F6 | 	mov	local09, local08
21414     01 2E 06 F1 | 	add	local09, #1
21418     A7 2E 62 FC | 	wrlong	local09, fp
2141c     C0 4E 85 F1 | 	sub	fp, #192
21420     30 2E 06 F6 | 	mov	local09, #48
21424     16 61 48 FC | 	wrbyte	#48, local08
21428                 | LR__2899
21428     18 4E 05 F1 | 	add	fp, #24
2142c     A7 28 02 FB | 	rdlong	local06, fp
21430     38 4E 05 F1 | 	add	fp, #56
21434     A7 34 02 FB | 	rdlong	local12, fp
21438     50 4E 85 F1 | 	sub	fp, #80
2143c     1A 29 0A F2 | 	cmp	local06, local12 wz
21440     5C 00 90 5D |  if_ne	jmp	#LR__2901
21444     10 4F 05 F1 | 	add	fp, #272
21448     A7 2A 02 FB | 	rdlong	local07, fp
2144c     10 4F 85 F1 | 	sub	fp, #272
21450     15 2F 0A F6 | 	mov	local09, local07 wz
21454     28 00 90 5D |  if_ne	jmp	#LR__2900
21458     54 4E 05 F1 | 	add	fp, #84
2145c     A7 32 02 FB | 	rdlong	local11, fp
21460     19 31 02 F6 | 	mov	local10, local11
21464     01 30 86 F1 | 	sub	local10, #1
21468     3C 4E 85 F1 | 	sub	fp, #60
2146c     A7 36 02 FB | 	rdlong	local13, fp
21470     18 4E 85 F1 | 	sub	fp, #24
21474     1B 39 02 F6 | 	mov	local14, local13
21478     18 39 52 F2 | 	cmps	local14, local10 wc
2147c     20 00 90 3D |  if_ae	jmp	#LR__2901
21480                 | LR__2900
21480     C0 4E 05 F1 | 	add	fp, #192
21484     A7 2C 02 FB | 	rdlong	local08, fp
21488     16 35 02 F6 | 	mov	local12, local08
2148c     01 34 06 F1 | 	add	local12, #1
21490     A7 34 62 FC | 	wrlong	local12, fp
21494     C0 4E 85 F1 | 	sub	fp, #192
21498     2E 2E 06 F6 | 	mov	local09, #46
2149c     16 5D 48 FC | 	wrbyte	#46, local08
214a0                 | LR__2901
214a0     18 4E 05 F1 | 	add	fp, #24
214a4     A7 3A 02 FB | 	rdlong	local15, fp
214a8     1D 35 02 F6 | 	mov	local12, local15
214ac     01 34 06 F1 | 	add	local12, #1
214b0     A7 34 62 FC | 	wrlong	local12, fp
214b4     18 4E 85 F1 | 	sub	fp, #24
214b8     C4 FE 9F FD | 	jmp	#LR__2897
214bc                 | LR__2902
214bc                 | LR__2903
214bc     34 4E 05 F1 | 	add	fp, #52
214c0     A7 1E 0A FB | 	rdlong	local01, fp wz
214c4     34 4E 85 F1 | 	sub	fp, #52
214c8     A0 00 90 AD |  if_e	jmp	#LR__2907
214cc     C0 4E 05 F1 | 	add	fp, #192
214d0     A7 1E 02 FB | 	rdlong	local01, fp
214d4     01 1E 86 F1 | 	sub	local01, #1
214d8     A7 1E 62 FC | 	wrlong	local01, fp
214dc     C0 4E 85 F1 | 	sub	fp, #192
214e0     97 26 48 FB | 	callpa	#(@LR__2905-@LR__2904)>>2,fcache_load_ptr_
214e4                 | LR__2904
214e4     C0 4E 05 F1 | 	add	fp, #192
214e8     A7 1E 02 FB | 	rdlong	local01, fp
214ec     04 4E 05 F1 | 	add	fp, #4
214f0     A7 22 02 FB | 	rdlong	local03, fp
214f4     C4 4E 85 F1 | 	sub	fp, #196
214f8     11 1F 5A F2 | 	cmps	local01, local03 wcz
214fc     30 00 90 ED |  if_be	jmp	#LR__2906
21500     C0 4E 05 F1 | 	add	fp, #192
21504     A7 28 02 FB | 	rdlong	local06, fp
21508     C0 4E 85 F1 | 	sub	fp, #192
2150c     14 25 C2 FA | 	rdbyte	local04, local06
21510     30 24 0E F2 | 	cmp	local04, #48 wz
21514     18 00 90 5D |  if_ne	jmp	#LR__2906
21518     C0 4E 05 F1 | 	add	fp, #192
2151c     A7 1E 02 FB | 	rdlong	local01, fp
21520     01 1E 86 F1 | 	sub	local01, #1
21524     A7 1E 62 FC | 	wrlong	local01, fp
21528     C0 4E 85 F1 | 	sub	fp, #192
2152c     B4 FF 9F FD | 	jmp	#LR__2904
21530                 | LR__2905
21530                 | LR__2906
21530     C0 4E 05 F1 | 	add	fp, #192
21534     A7 20 02 FB | 	rdlong	local02, fp
21538     C0 4E 85 F1 | 	sub	fp, #192
2153c     10 1F C2 FA | 	rdbyte	local01, local02
21540     2E 1E 0E F2 | 	cmp	local01, #46 wz
21544     C0 4E 05 A1 |  if_e	add	fp, #192
21548     A7 1E 02 AB |  if_e	rdlong	local01, fp
2154c     01 1E 86 A1 |  if_e	sub	local01, #1
21550     A7 1E 62 AC |  if_e	wrlong	local01, fp
21554     C0 4E 85 A1 |  if_e	sub	fp, #192
21558     C0 4E 05 F1 | 	add	fp, #192
2155c     A7 22 02 FB | 	rdlong	local03, fp
21560     01 22 06 F1 | 	add	local03, #1
21564     A7 22 62 FC | 	wrlong	local03, fp
21568     C0 4E 85 F1 | 	sub	fp, #192
2156c                 | LR__2907
2156c     24 4E 05 F1 | 	add	fp, #36
21570     A7 1E 0A FB | 	rdlong	local01, fp wz
21574     24 4E 85 F1 | 	sub	fp, #36
21578     B4 00 90 AD |  if_e	jmp	#LR__2910
2157c     C0 4E 05 F1 | 	add	fp, #192
21580     A7 20 02 FB | 	rdlong	local02, fp
21584     10 23 02 F6 | 	mov	local03, local02
21588     01 22 06 F1 | 	add	local03, #1
2158c     A7 22 62 FC | 	wrlong	local03, fp
21590     90 4E 85 F1 | 	sub	fp, #144
21594     A7 24 02 FB | 	rdlong	local04, fp
21598     10 25 42 FC | 	wrbyte	local04, local02
2159c     90 4E 05 F1 | 	add	fp, #144
215a0     A7 20 02 FB | 	rdlong	local02, fp
215a4     10 23 02 F6 | 	mov	local03, local02
215a8     01 22 06 F1 | 	add	local03, #1
215ac     A7 22 62 FC | 	wrlong	local03, fp
215b0     60 4E 85 F1 | 	sub	fp, #96
215b4     A7 24 02 FB | 	rdlong	local04, fp
215b8     10 25 42 FC | 	wrbyte	local04, local02
215bc     48 4E 85 F1 | 	sub	fp, #72
215c0     A7 00 68 FC | 	wrlong	#0, fp
215c4     18 4E 85 F1 | 	sub	fp, #24
215c8                 | LR__2908
215c8     18 4E 05 F1 | 	add	fp, #24
215cc     A7 20 02 FB | 	rdlong	local02, fp
215d0     44 4E 05 F1 | 	add	fp, #68
215d4     A7 26 02 FB | 	rdlong	local05, fp
215d8     5C 4E 85 F1 | 	sub	fp, #92
215dc     13 21 52 F2 | 	cmps	local02, local05 wc
215e0     4C 00 90 3D |  if_ae	jmp	#LR__2909
215e4     C0 4E 05 F1 | 	add	fp, #192
215e8     A7 2C 02 FB | 	rdlong	local08, fp
215ec     16 35 02 F6 | 	mov	local12, local08
215f0     01 34 06 F1 | 	add	local12, #1
215f4     A7 34 62 FC | 	wrlong	local12, fp
215f8     A8 4E 85 F1 | 	sub	fp, #168
215fc     A7 2A 02 FB | 	rdlong	local07, fp
21600     15 2F 02 F6 | 	mov	local09, local07
21604     98 4E 05 F1 | 	add	fp, #152
21608     A7 30 02 F6 | 	mov	local10, fp
2160c     A7 2E 02 F1 | 	add	local09, fp
21610     17 33 C2 FA | 	rdbyte	local11, local09
21614     16 33 42 FC | 	wrbyte	local11, local08
21618     98 4E 85 F1 | 	sub	fp, #152
2161c     A7 34 02 FB | 	rdlong	local12, fp
21620     01 34 06 F1 | 	add	local12, #1
21624     A7 34 62 FC | 	wrlong	local12, fp
21628     18 4E 85 F1 | 	sub	fp, #24
2162c     98 FF 9F FD | 	jmp	#LR__2908
21630                 | LR__2909
21630                 | LR__2910
21630     C0 4E 05 F1 | 	add	fp, #192
21634     A7 1E 02 FB | 	rdlong	local01, fp
21638     C0 4E 85 F1 | 	sub	fp, #192
2163c     0F 01 48 FC | 	wrbyte	#0, local01
21640                 | LR__2911
21640     6C 4E 05 F1 | 	add	fp, #108
21644     A7 1E 0A FB | 	rdlong	local01, fp wz
21648     6C 4E 85 F1 | 	sub	fp, #108
2164c     90 01 90 AD |  if_e	jmp	#LR__2922
21650     48 4E 05 F1 | 	add	fp, #72
21654     A7 22 0A FB | 	rdlong	local03, fp wz
21658     48 4E 85 F1 | 	sub	fp, #72
2165c     80 01 90 AD |  if_e	jmp	#LR__2922
21660     C4 4E 05 F1 | 	add	fp, #196
21664     A7 12 02 FB | 	rdlong	arg01, fp
21668     C4 4E 85 F1 | 	sub	fp, #196
2166c     09 3D 02 F6 | 	mov	local16, arg01
21670     97 06 48 FB | 	callpa	#(@LR__2913-@LR__2912)>>2,fcache_load_ptr_
21674                 | LR__2912
21674     1E FB C9 FA | 	rdbyte	result1, local16 wz
21678     01 3C 06 51 |  if_ne	add	local16, #1
2167c     F4 FF 9F 5D |  if_ne	jmp	#LR__2912
21680                 | LR__2913
21680     09 3D 82 F1 | 	sub	local16, arg01
21684     1E 25 02 F6 | 	mov	local04, local16
21688     6C 4E 05 F1 | 	add	fp, #108
2168c     A7 28 02 FB | 	rdlong	local06, fp
21690     6C 4E 85 F1 | 	sub	fp, #108
21694     14 25 5A F2 | 	cmps	local04, local06 wcz
21698     44 01 90 ED |  if_be	jmp	#LR__2922
2169c     C4 4E 05 F1 | 	add	fp, #196
216a0     A7 1E 02 FB | 	rdlong	local01, fp
216a4     5C 4E 05 F1 | 	add	fp, #92
216a8     A7 1E 62 FC | 	wrlong	local01, fp
216ac     FC 4E 85 F1 | 	sub	fp, #252
216b0     A7 1E 0A FB | 	rdlong	local01, fp wz
216b4     24 4E 85 F1 | 	sub	fp, #36
216b8     20 00 90 AD |  if_e	jmp	#LR__2914
216bc     B8 4E 05 F1 | 	add	fp, #184
216c0     A7 00 68 FC | 	wrlong	#0, fp
216c4     4C 4E 85 F1 | 	sub	fp, #76
216c8     A7 1E 02 FB | 	rdlong	local01, fp
216cc     B0 4E 05 F1 | 	add	fp, #176
216d0     A7 1E 62 FC | 	wrlong	local01, fp
216d4     1C 4F 85 F1 | 	sub	fp, #284
216d8     24 00 90 FD | 	jmp	#LR__2915
216dc                 | LR__2914
216dc     6C 4E 05 F1 | 	add	fp, #108
216e0     A7 1E 02 FB | 	rdlong	local01, fp
216e4     01 1E 86 F1 | 	sub	local01, #1
216e8     4C 4E 05 F1 | 	add	fp, #76
216ec     A7 22 02 FB | 	rdlong	local03, fp
216f0     11 1F 82 F1 | 	sub	local01, local03
216f4     64 4E 05 F1 | 	add	fp, #100
216f8     A7 1E 62 FC | 	wrlong	local01, fp
216fc     1C 4F 85 F1 | 	sub	fp, #284
21700                 | LR__2915
21700     97 20 48 FB | 	callpa	#(@LR__2917-@LR__2916)>>2,fcache_load_ptr_
21704                 | LR__2916
21704     1C 4F 05 F1 | 	add	fp, #284
21708     A7 1E 0A FB | 	rdlong	local01, fp wz
2170c     1C 4F 85 F1 | 	sub	fp, #284
21710     30 00 90 AD |  if_e	jmp	#LR__2918
21714     20 4F 05 F1 | 	add	fp, #288
21718     A7 20 02 FB | 	rdlong	local02, fp
2171c     10 23 02 F6 | 	mov	local03, local02
21720     01 22 06 F1 | 	add	local03, #1
21724     A7 22 62 FC | 	wrlong	local03, fp
21728     10 55 48 FC | 	wrbyte	#42, local02
2172c     04 4E 85 F1 | 	sub	fp, #4
21730     A7 1E 02 FB | 	rdlong	local01, fp
21734     01 1E 86 F1 | 	sub	local01, #1
21738     A7 1E 62 FC | 	wrlong	local01, fp
2173c     1C 4F 85 F1 | 	sub	fp, #284
21740     C0 FF 9F FD | 	jmp	#LR__2916
21744                 | LR__2917
21744                 | LR__2918
21744     B8 4E 05 F1 | 	add	fp, #184
21748     A7 1E 0A FB | 	rdlong	local01, fp wz
2174c     B8 4E 85 F1 | 	sub	fp, #184
21750     70 00 90 AD |  if_e	jmp	#LR__2921
21754     20 4F 05 F1 | 	add	fp, #288
21758     A7 20 02 FB | 	rdlong	local02, fp
2175c     10 23 02 F6 | 	mov	local03, local02
21760     01 22 06 F1 | 	add	local03, #1
21764     A7 22 62 FC | 	wrlong	local03, fp
21768     10 5D 48 FC | 	wrbyte	#46, local02
2176c     04 4E 85 F1 | 	sub	fp, #4
21770     A7 00 68 FC | 	wrlong	#0, fp
21774     1C 4F 85 F1 | 	sub	fp, #284
21778                 | LR__2919
21778     1C 4F 05 F1 | 	add	fp, #284
2177c     A7 20 02 FB | 	rdlong	local02, fp
21780     64 4E 85 F1 | 	sub	fp, #100
21784     A7 26 02 FB | 	rdlong	local05, fp
21788     B8 4E 85 F1 | 	sub	fp, #184
2178c     13 21 52 F2 | 	cmps	local02, local05 wc
21790     30 00 90 3D |  if_ae	jmp	#LR__2920
21794     20 4F 05 F1 | 	add	fp, #288
21798     A7 2C 02 FB | 	rdlong	local08, fp
2179c     16 35 02 F6 | 	mov	local12, local08
217a0     01 34 06 F1 | 	add	local12, #1
217a4     A7 34 62 FC | 	wrlong	local12, fp
217a8     16 55 48 FC | 	wrbyte	#42, local08
217ac     04 4E 85 F1 | 	sub	fp, #4
217b0     A7 34 02 FB | 	rdlong	local12, fp
217b4     01 34 06 F1 | 	add	local12, #1
217b8     A7 34 62 FC | 	wrlong	local12, fp
217bc     1C 4F 85 F1 | 	sub	fp, #284
217c0     B4 FF 9F FD | 	jmp	#LR__2919
217c4                 | LR__2920
217c4                 | LR__2921
217c4     20 4F 05 F1 | 	add	fp, #288
217c8     A7 20 02 FB | 	rdlong	local02, fp
217cc     10 23 02 F6 | 	mov	local03, local02
217d0     01 22 06 F1 | 	add	local03, #1
217d4     A7 22 62 FC | 	wrlong	local03, fp
217d8     20 4F 85 F1 | 	sub	fp, #288
217dc     10 01 48 FC | 	wrbyte	#0, local02
217e0                 | LR__2922
217e0     04 4E 05 F1 | 	add	fp, #4
217e4     A7 12 02 FB | 	rdlong	arg01, fp
217e8     04 4E 05 F1 | 	add	fp, #4
217ec     A7 14 02 FB | 	rdlong	arg02, fp
217f0     BC 4E 05 F1 | 	add	fp, #188
217f4     A7 16 02 FB | 	rdlong	arg03, fp
217f8     C4 4E 85 F1 | 	sub	fp, #196
217fc     C4 EE BF FD | 	call	#__system___fmtstr
21800                 | LR__2923
21800     A7 F0 03 F6 | 	mov	ptra, fp
21804     B2 00 A0 FD | 	call	#popregs_
21808                 | __system___fmtfloat_ret
21808     2D 00 64 FD | 	ret
2180c                 | 
2180c                 | __system__Left_S
2180c     04 4A 05 F6 | 	mov	COUNT_, #4
21810     A8 00 A0 FD | 	call	#pushregs_
21814     09 1F 02 F6 | 	mov	local01, arg01
21818     0A 21 02 F6 | 	mov	local02, arg02
2181c     01 20 56 F2 | 	cmps	local02, #1 wc
21820     76 01 00 CF 
21824     BA FB 05 C6 |  if_b	mov	result1, ##@LR__4813
21828     5C 00 90 CD |  if_b	jmp	#LR__2933
2182c     0F 13 02 F6 | 	mov	arg01, local01
21830     09 23 02 F6 | 	mov	local03, arg01
21834     97 06 48 FB | 	callpa	#(@LR__2931-@LR__2930)>>2,fcache_load_ptr_
21838                 | LR__2930
21838     11 FB C9 FA | 	rdbyte	result1, local03 wz
2183c     01 22 06 51 |  if_ne	add	local03, #1
21840     F4 FF 9F 5D |  if_ne	jmp	#LR__2930
21844                 | LR__2931
21844     09 23 82 F1 | 	sub	local03, arg01
21848     11 FB 01 F6 | 	mov	result1, local03
2184c     10 FB 59 F2 | 	cmps	result1, local02 wcz
21850     0F FB 01 E6 |  if_be	mov	result1, local01
21854     30 00 90 ED |  if_be	jmp	#LR__2933
21858     10 13 02 F6 | 	mov	arg01, local02
2185c     02 12 06 F1 | 	add	arg01, #2
21860     E4 1D B0 FD | 	call	#__system___gc_alloc_managed
21864     FD 24 0A F6 | 	mov	local04, result1 wz
21868     18 00 90 AD |  if_e	jmp	#LR__2932
2186c     12 13 02 F6 | 	mov	arg01, local04
21870     0F 15 02 F6 | 	mov	arg02, local01
21874     10 17 02 F6 | 	mov	arg03, local02
21878     A0 DE BF FD | 	call	#__system____builtin_memmove
2187c     12 21 02 F1 | 	add	local02, local04
21880     10 01 48 FC | 	wrbyte	#0, local02
21884                 | LR__2932
21884     12 FB 01 F6 | 	mov	result1, local04
21888                 | LR__2933
21888     A7 F0 03 F6 | 	mov	ptra, fp
2188c     B2 00 A0 FD | 	call	#popregs_
21890                 | __system__Left_S_ret
21890     2D 00 64 FD | 	ret
21894                 | 
21894                 | __system__Right_S
21894     05 4A 05 F6 | 	mov	COUNT_, #5
21898     A8 00 A0 FD | 	call	#pushregs_
2189c     09 1F 02 F6 | 	mov	local01, arg01
218a0     0A 21 02 F6 | 	mov	local02, arg02
218a4     01 20 56 F2 | 	cmps	local02, #1 wc
218a8     76 01 00 CF 
218ac     BB FB 05 C6 |  if_b	mov	result1, ##@LR__4814
218b0     64 00 90 CD |  if_b	jmp	#LR__2943
218b4     0F 13 02 F6 | 	mov	arg01, local01
218b8     09 23 02 F6 | 	mov	local03, arg01
218bc     97 06 48 FB | 	callpa	#(@LR__2941-@LR__2940)>>2,fcache_load_ptr_
218c0                 | LR__2940
218c0     11 FB C9 FA | 	rdbyte	result1, local03 wz
218c4     01 22 06 51 |  if_ne	add	local03, #1
218c8     F4 FF 9F 5D |  if_ne	jmp	#LR__2940
218cc                 | LR__2941
218cc     09 23 82 F1 | 	sub	local03, arg01
218d0     11 FB 01 F6 | 	mov	result1, local03
218d4     FD 24 02 F6 | 	mov	local04, result1
218d8     10 25 5A F2 | 	cmps	local04, local02 wcz
218dc     0F FB 01 E6 |  if_be	mov	result1, local01
218e0     34 00 90 ED |  if_be	jmp	#LR__2943
218e4     10 13 02 F6 | 	mov	arg01, local02
218e8     02 12 06 F1 | 	add	arg01, #2
218ec     58 1D B0 FD | 	call	#__system___gc_alloc_managed
218f0     FD 26 0A F6 | 	mov	local05, result1 wz
218f4     1C 00 90 AD |  if_e	jmp	#LR__2942
218f8     10 25 82 F1 | 	sub	local04, local02
218fc     0F 25 02 F1 | 	add	local04, local01
21900     01 20 06 F1 | 	add	local02, #1
21904     13 13 02 F6 | 	mov	arg01, local05
21908     12 15 02 F6 | 	mov	arg02, local04
2190c     10 17 02 F6 | 	mov	arg03, local02
21910     08 DE BF FD | 	call	#__system____builtin_memmove
21914                 | LR__2942
21914     13 FB 01 F6 | 	mov	result1, local05
21918                 | LR__2943
21918     A7 F0 03 F6 | 	mov	ptra, fp
2191c     B2 00 A0 FD | 	call	#popregs_
21920                 | __system__Right_S_ret
21920     2D 00 64 FD | 	ret
21924                 | 
21924                 | __system__Mid_S
21924     05 4A 05 F6 | 	mov	COUNT_, #5
21928     A8 00 A0 FD | 	call	#pushregs_
2192c     09 1F 02 F6 | 	mov	local01, arg01
21930     0A 21 02 F6 | 	mov	local02, arg02
21934     01 16 56 F2 | 	cmps	arg03, #1 wc
21938     76 01 00 CF 
2193c     BC FB 05 C6 |  if_b	mov	result1, ##@LR__4815
21940     80 00 90 CD |  if_b	jmp	#LR__2953
21944     01 20 86 F1 | 	sub	local02, #1
21948     00 20 56 F3 | 	fges	local02, #0 wc
2194c     0F 13 02 F6 | 	mov	arg01, local01
21950     09 23 02 F6 | 	mov	local03, arg01
21954     97 06 48 FB | 	callpa	#(@LR__2951-@LR__2950)>>2,fcache_load_ptr_
21958                 | LR__2950
21958     11 FB C9 FA | 	rdbyte	result1, local03 wz
2195c     01 22 06 51 |  if_ne	add	local03, #1
21960     F4 FF 9F 5D |  if_ne	jmp	#LR__2950
21964                 | LR__2951
21964     09 23 82 F1 | 	sub	local03, arg01
21968     11 FB 01 F6 | 	mov	result1, local03
2196c     FD 14 02 F6 | 	mov	arg02, result1
21970     10 15 52 F2 | 	cmps	arg02, local02 wc
21974     76 01 00 CF 
21978     BD FB 05 C6 |  if_b	mov	result1, ##@LR__4816
2197c     44 00 90 CD |  if_b	jmp	#LR__2953
21980     0A 25 02 F6 | 	mov	local04, arg02
21984     10 25 82 F1 | 	sub	local04, local02
21988     0B 25 5A F2 | 	cmps	local04, arg03 wcz
2198c     0B 25 02 16 |  if_a	mov	local04, arg03
21990     12 13 02 F6 | 	mov	arg01, local04
21994     02 12 06 F1 | 	add	arg01, #2
21998     AC 1C B0 FD | 	call	#__system___gc_alloc_managed
2199c     FD 26 0A F6 | 	mov	local05, result1 wz
219a0     1C 00 90 AD |  if_e	jmp	#LR__2952
219a4     0F 21 02 F1 | 	add	local02, local01
219a8     13 13 02 F6 | 	mov	arg01, local05
219ac     10 15 02 F6 | 	mov	arg02, local02
219b0     12 17 02 F6 | 	mov	arg03, local04
219b4     64 DD BF FD | 	call	#__system____builtin_memmove
219b8     13 25 02 F1 | 	add	local04, local05
219bc     12 01 48 FC | 	wrbyte	#0, local04
219c0                 | LR__2952
219c0     13 FB 01 F6 | 	mov	result1, local05
219c4                 | LR__2953
219c4     A7 F0 03 F6 | 	mov	ptra, fp
219c8     B2 00 A0 FD | 	call	#popregs_
219cc                 | __system__Mid_S_ret
219cc     2D 00 64 FD | 	ret
219d0                 | 
219d0                 | __system__Chr_S
219d0     01 4A 05 F6 | 	mov	COUNT_, #1
219d4     A8 00 A0 FD | 	call	#pushregs_
219d8     09 1F 02 F6 | 	mov	local01, arg01
219dc     03 12 06 F6 | 	mov	arg01, #3
219e0     64 1C B0 FD | 	call	#__system___gc_alloc_managed
219e4     00 FA 4D F2 | 	cmps	result1, #0 wz
219e8     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
219ec     01 FA 05 51 |  if_ne	add	result1, #1
219f0     FD 00 48 5C |  if_ne	wrbyte	#0, result1
219f4     01 FA 85 51 |  if_ne	sub	result1, #1
219f8     A7 F0 03 F6 | 	mov	ptra, fp
219fc     B2 00 A0 FD | 	call	#popregs_
21a00                 | __system__Chr_S_ret
21a00     2D 00 64 FD | 	ret
21a04                 | 
21a04                 | __system__str_S
21a04     02 4A 05 F6 | 	mov	COUNT_, #2
21a08     A8 00 A0 FD | 	call	#pushregs_
21a0c     09 1F 02 F6 | 	mov	local01, arg01
21a10     10 12 06 F6 | 	mov	arg01, #16
21a14     30 1C B0 FD | 	call	#__system___gc_alloc_managed
21a18     FD 20 0A F6 | 	mov	local02, result1 wz
21a1c     30 00 90 AD |  if_e	jmp	#LR__2960
21a20     F8 13 02 F6 | 	mov	arg01, ptra
21a24     08 F0 07 F1 | 	add	ptra, #8
21a28     09 21 62 FC | 	wrlong	local02, arg01
21a2c     04 12 06 F1 | 	add	arg01, #4
21a30     09 01 68 FC | 	wrlong	#0, arg01
21a34     04 12 86 F1 | 	sub	arg01, #4
21a38     00 78 04 FF 
21a3c     00 12 46 F5 | 	or	arg01, ##149946368
21a40     00 14 06 F6 | 	mov	arg02, #0
21a44     0F 17 02 F6 | 	mov	arg03, local01
21a48     67 18 06 F6 | 	mov	arg04, #103
21a4c     90 EE BF FD | 	call	#__system___fmtfloat
21a50                 | LR__2960
21a50     10 FB 01 F6 | 	mov	result1, local02
21a54     A7 F0 03 F6 | 	mov	ptra, fp
21a58     B2 00 A0 FD | 	call	#popregs_
21a5c                 | __system__str_S_ret
21a5c     2D 00 64 FD | 	ret
21a60                 | 
21a60                 | __system__Number_S
21a60     08 4A 05 F6 | 	mov	COUNT_, #8
21a64     A8 00 A0 FD | 	call	#pushregs_
21a68     09 1F 02 F6 | 	mov	local01, arg01
21a6c     0A 21 0A F6 | 	mov	local02, arg02 wz
21a70     0B 23 02 F6 | 	mov	local03, arg03
21a74     3C 00 90 5D |  if_ne	jmp	#LR__2972
21a78     01 20 06 F6 | 	mov	local02, #1
21a7c     11 25 02 F6 | 	mov	local04, local03
21a80     01 26 06 F6 | 	mov	local05, #1
21a84     97 16 48 FB | 	callpa	#(@LR__2971-@LR__2970)>>2,fcache_load_ptr_
21a88                 | LR__2970
21a88     00 28 06 F6 | 	mov	local06, #0
21a8c     0F 25 1A F2 | 	cmp	local04, local01 wcz
21a90     01 28 66 E6 |  if_be	neg	local06, #1
21a94     12 27 12 F2 | 	cmp	local05, local04 wc
21a98     15 2B A2 F1 | 	subx	local07, local07
21a9c     15 29 CA F7 | 	test	local06, local07 wz
21aa0     11 25 02 5D |  if_ne	qmul	local04, local03
21aa4     12 27 02 56 |  if_ne	mov	local05, local04
21aa8     01 20 06 51 |  if_ne	add	local02, #1
21aac     18 24 62 5D |  if_ne	getqx	local04
21ab0     D4 FF 9F 5D |  if_ne	jmp	#LR__2970
21ab4                 | LR__2971
21ab4                 | LR__2972
21ab4     20 20 36 F3 | 	fle	local02, #32 wc
21ab8     10 13 02 F6 | 	mov	arg01, local02
21abc     02 12 06 F1 | 	add	arg01, #2
21ac0     84 1B B0 FD | 	call	#__system___gc_alloc_managed
21ac4     FD 28 02 F6 | 	mov	local06, result1
21ac8     10 2B 02 F6 | 	mov	local07, local02
21acc     14 2B 02 F1 | 	add	local07, local06
21ad0     15 01 48 FC | 	wrbyte	#0, local07
21ad4     97 1A 48 FB | 	callpa	#(@LR__2974-@LR__2973)>>2,fcache_load_ptr_
21ad8                 | LR__2973
21ad8     01 20 16 F2 | 	cmp	local02, #1 wc
21adc     2C 00 90 CD |  if_b	jmp	#LR__2975
21ae0     11 1F 12 FD | 	qdiv	local01, local03
21ae4     01 20 86 F1 | 	sub	local02, #1
21ae8     10 2B 02 F6 | 	mov	local07, local02
21aec     14 2B 02 F1 | 	add	local07, local06
21af0     19 2C 62 FD | 	getqy	local08
21af4     0A 2C 16 F2 | 	cmp	local08, #10 wc
21af8     30 2C 06 C1 |  if_b	add	local08, #48
21afc     37 2C 06 31 |  if_ae	add	local08, #55
21b00     15 2D 42 FC | 	wrbyte	local08, local07
21b04     18 1E 62 FD | 	getqx	local01
21b08     CC FF 9F FD | 	jmp	#LR__2973
21b0c                 | LR__2974
21b0c                 | LR__2975
21b0c     14 FB 01 F6 | 	mov	result1, local06
21b10     A7 F0 03 F6 | 	mov	ptra, fp
21b14     B2 00 A0 FD | 	call	#popregs_
21b18                 | __system__Number_S_ret
21b18     2D 00 64 FD | 	ret
21b1c                 | 
21b1c                 | __system__LCase_S
21b1c     07 4A 05 F6 | 	mov	COUNT_, #7
21b20     A8 00 A0 FD | 	call	#pushregs_
21b24     09 1F 02 F6 | 	mov	local01, arg01
21b28     09 21 02 F6 | 	mov	local02, arg01
21b2c     97 06 48 FB | 	callpa	#(@LR__2981-@LR__2980)>>2,fcache_load_ptr_
21b30                 | LR__2980
21b30     10 FB C9 FA | 	rdbyte	result1, local02 wz
21b34     01 20 06 51 |  if_ne	add	local02, #1
21b38     F4 FF 9F 5D |  if_ne	jmp	#LR__2980
21b3c                 | LR__2981
21b3c     09 21 82 F1 | 	sub	local02, arg01
21b40     10 FB 01 F6 | 	mov	result1, local02
21b44     FD 20 0A F6 | 	mov	local02, result1 wz
21b48     76 01 00 AF 
21b4c     BE FB 05 A6 |  if_e	mov	result1, ##@LR__4817
21b50     7C 00 90 AD |  if_e	jmp	#LR__2987
21b54     10 13 02 F6 | 	mov	arg01, local02
21b58     02 12 06 F1 | 	add	arg01, #2
21b5c     E8 1A B0 FD | 	call	#__system___gc_alloc_managed
21b60     FD 22 0A F6 | 	mov	local03, result1 wz
21b64     64 00 90 AD |  if_e	jmp	#LR__2986
21b68     01 24 66 F6 | 	neg	local04, #1
21b6c     97 26 48 FB | 	callpa	#(@LR__2985-@LR__2982)>>2,fcache_load_ptr_
21b70                 | LR__2982
21b70     01 24 06 F1 | 	add	local04, #1
21b74     12 27 02 F6 | 	mov	local05, local04
21b78     0F 27 02 F1 | 	add	local05, local01
21b7c     13 29 C2 FA | 	rdbyte	local06, local05
21b80     41 28 56 F2 | 	cmps	local06, #65 wc
21b84     18 00 90 CD |  if_b	jmp	#LR__2983
21b88     5B 28 56 F2 | 	cmps	local06, #91 wc
21b8c     12 2B 02 C6 |  if_b	mov	local07, local04
21b90     11 2B 02 C1 |  if_b	add	local07, local03
21b94     20 28 06 C1 |  if_b	add	local06, #32
21b98     15 29 42 CC |  if_b	wrbyte	local06, local07
21b9c     0C 00 90 CD |  if_b	jmp	#LR__2984
21ba0                 | LR__2983
21ba0     12 2B 02 F6 | 	mov	local07, local04
21ba4     11 2B 02 F1 | 	add	local07, local03
21ba8     15 29 42 FC | 	wrbyte	local06, local07
21bac                 | LR__2984
21bac     10 29 02 F6 | 	mov	local06, local02
21bb0     01 28 86 F1 | 	sub	local06, #1
21bb4     14 25 0A F2 | 	cmp	local04, local06 wz
21bb8     B4 FF 9F 5D |  if_ne	jmp	#LR__2982
21bbc                 | LR__2985
21bbc     11 21 02 F1 | 	add	local02, local03
21bc0     10 01 48 FC | 	wrbyte	#0, local02
21bc4     11 FB 01 F6 | 	mov	result1, local03
21bc8     04 00 90 FD | 	jmp	#LR__2987
21bcc                 | LR__2986
21bcc     11 FB 01 F6 | 	mov	result1, local03
21bd0                 | LR__2987
21bd0     A7 F0 03 F6 | 	mov	ptra, fp
21bd4     B2 00 A0 FD | 	call	#popregs_
21bd8                 | __system__LCase_S_ret
21bd8     2D 00 64 FD | 	ret
21bdc                 | 
21bdc                 | __system__LTrim_S
21bdc     05 4A 05 F6 | 	mov	COUNT_, #5
21be0     A8 00 A0 FD | 	call	#pushregs_
21be4     09 1F 02 F6 | 	mov	local01, arg01
21be8     09 21 02 F6 | 	mov	local02, arg01
21bec     97 06 48 FB | 	callpa	#(@LR__2991-@LR__2990)>>2,fcache_load_ptr_
21bf0                 | LR__2990
21bf0     10 FB C9 FA | 	rdbyte	result1, local02 wz
21bf4     01 20 06 51 |  if_ne	add	local02, #1
21bf8     F4 FF 9F 5D |  if_ne	jmp	#LR__2990
21bfc                 | LR__2991
21bfc     09 21 82 F1 | 	sub	local02, arg01
21c00     10 FB 01 F6 | 	mov	result1, local02
21c04     FD 20 0A F6 | 	mov	local02, result1 wz
21c08     76 01 00 AF 
21c0c     BF FB 05 A6 |  if_e	mov	result1, ##@LR__4818
21c10     7C 00 90 AD |  if_e	jmp	#LR__2996
21c14     00 22 06 F6 | 	mov	local03, #0
21c18     10 25 02 F6 | 	mov	local04, local02
21c1c                 | LR__2992
21c1c     12 23 52 F2 | 	cmps	local03, local04 wc
21c20     68 00 90 3D |  if_ae	jmp	#LR__2995
21c24     11 17 02 F6 | 	mov	arg03, local03
21c28     0F 17 02 F1 | 	add	arg03, local01
21c2c     0B 17 C2 FA | 	rdbyte	arg03, arg03
21c30     20 16 0E F2 | 	cmp	arg03, #32 wz
21c34     4C 00 90 AD |  if_e	jmp	#LR__2994
21c38     10 13 02 F6 | 	mov	arg01, local02
21c3c     11 13 82 F1 | 	sub	arg01, local03
21c40     02 12 06 F1 | 	add	arg01, #2
21c44     00 1A B0 FD | 	call	#__system___gc_alloc_managed
21c48     FD 26 0A F6 | 	mov	local05, result1 wz
21c4c     2C 00 90 AD |  if_e	jmp	#LR__2993
21c50     11 15 02 F6 | 	mov	arg02, local03
21c54     0F 15 02 F1 | 	add	arg02, local01
21c58     10 17 02 F6 | 	mov	arg03, local02
21c5c     11 17 82 F1 | 	sub	arg03, local03
21c60     13 13 02 F6 | 	mov	arg01, local05
21c64     B4 DA BF FD | 	call	#__system____builtin_memmove
21c68     11 21 82 F1 | 	sub	local02, local03
21c6c     13 21 02 F1 | 	add	local02, local05
21c70     10 01 48 FC | 	wrbyte	#0, local02
21c74     13 FB 01 F6 | 	mov	result1, local05
21c78     14 00 90 FD | 	jmp	#LR__2996
21c7c                 | LR__2993
21c7c     13 FB 01 F6 | 	mov	result1, local05
21c80     0C 00 90 FD | 	jmp	#LR__2996
21c84                 | LR__2994
21c84     01 22 06 F1 | 	add	local03, #1
21c88     90 FF 9F FD | 	jmp	#LR__2992
21c8c                 | LR__2995
21c8c     0F FB 01 F6 | 	mov	result1, local01
21c90                 | LR__2996
21c90     A7 F0 03 F6 | 	mov	ptra, fp
21c94     B2 00 A0 FD | 	call	#popregs_
21c98                 | __system__LTrim_S_ret
21c98     2D 00 64 FD | 	ret
21c9c                 | 
21c9c                 | __system__RTrim_S
21c9c     04 4A 05 F6 | 	mov	COUNT_, #4
21ca0     A8 00 A0 FD | 	call	#pushregs_
21ca4     09 1F 02 F6 | 	mov	local01, arg01
21ca8     09 21 02 F6 | 	mov	local02, arg01
21cac     97 06 48 FB | 	callpa	#(@LR__3001-@LR__3000)>>2,fcache_load_ptr_
21cb0                 | LR__3000
21cb0     10 FB C9 FA | 	rdbyte	result1, local02 wz
21cb4     01 20 06 51 |  if_ne	add	local02, #1
21cb8     F4 FF 9F 5D |  if_ne	jmp	#LR__3000
21cbc                 | LR__3001
21cbc     09 21 82 F1 | 	sub	local02, arg01
21cc0     10 FB 01 F6 | 	mov	result1, local02
21cc4     FD 20 0A F6 | 	mov	local02, result1 wz
21cc8     76 01 00 AF 
21ccc     C0 FB 05 A6 |  if_e	mov	result1, ##@LR__4819
21cd0     74 00 90 AD |  if_e	jmp	#LR__3005
21cd4     10 23 02 F6 | 	mov	local03, local02
21cd8     01 22 86 F1 | 	sub	local03, #1
21cdc                 | LR__3002
21cdc     11 15 02 F6 | 	mov	arg02, local03
21ce0     0F 15 02 F1 | 	add	arg02, local01
21ce4     0A 21 C2 FA | 	rdbyte	local02, arg02
21ce8     20 20 0E F2 | 	cmp	local02, #32 wz
21cec     44 00 90 AD |  if_e	jmp	#LR__3004
21cf0     11 13 02 F6 | 	mov	arg01, local03
21cf4     02 12 06 F1 | 	add	arg01, #2
21cf8     4C 19 B0 FD | 	call	#__system___gc_alloc_managed
21cfc     FD 24 0A F6 | 	mov	local04, result1 wz
21d00     28 00 90 AD |  if_e	jmp	#LR__3003
21d04     11 17 02 F6 | 	mov	arg03, local03
21d08     01 16 06 F1 | 	add	arg03, #1
21d0c     12 13 02 F6 | 	mov	arg01, local04
21d10     0F 15 02 F6 | 	mov	arg02, local01
21d14     04 DA BF FD | 	call	#__system____builtin_memmove
21d18     01 22 06 F1 | 	add	local03, #1
21d1c     12 23 02 F1 | 	add	local03, local04
21d20     11 01 48 FC | 	wrbyte	#0, local03
21d24     12 FB 01 F6 | 	mov	result1, local04
21d28     1C 00 90 FD | 	jmp	#LR__3005
21d2c                 | LR__3003
21d2c     12 FB 01 F6 | 	mov	result1, local04
21d30     14 00 90 FD | 	jmp	#LR__3005
21d34                 | LR__3004
21d34     01 22 86 F1 | 	sub	local03, #1
21d38     00 22 56 F2 | 	cmps	local03, #0 wc
21d3c     9C FF 9F 3D |  if_ae	jmp	#LR__3002
21d40     76 01 00 FF 
21d44     C1 FB 05 F6 | 	mov	result1, ##@LR__4820
21d48                 | LR__3005
21d48     A7 F0 03 F6 | 	mov	ptra, fp
21d4c     B2 00 A0 FD | 	call	#popregs_
21d50                 | __system__RTrim_S_ret
21d50     2D 00 64 FD | 	ret
21d54                 | 
21d54                 | __system__Instr
21d54     07 4A 05 F6 | 	mov	COUNT_, #7
21d58     A8 00 A0 FD | 	call	#pushregs_
21d5c     09 1F 02 F6 | 	mov	local01, arg01
21d60     0A 21 02 F6 | 	mov	local02, arg02
21d64     0B 23 02 F6 | 	mov	local03, arg03
21d68     11 13 02 F6 | 	mov	arg01, local03
21d6c     09 25 02 F6 | 	mov	local04, arg01
21d70     97 06 48 FB | 	callpa	#(@LR__3011-@LR__3010)>>2,fcache_load_ptr_
21d74                 | LR__3010
21d74     12 FB C9 FA | 	rdbyte	result1, local04 wz
21d78     01 24 06 51 |  if_ne	add	local04, #1
21d7c     F4 FF 9F 5D |  if_ne	jmp	#LR__3010
21d80                 | LR__3011
21d80     09 25 82 F1 | 	sub	local04, arg01
21d84     12 27 02 F6 | 	mov	local05, local04
21d88     10 13 02 F6 | 	mov	arg01, local02
21d8c     09 25 02 F6 | 	mov	local04, arg01
21d90     97 06 48 FB | 	callpa	#(@LR__3013-@LR__3012)>>2,fcache_load_ptr_
21d94                 | LR__3012
21d94     12 FB C9 FA | 	rdbyte	result1, local04 wz
21d98     01 24 06 51 |  if_ne	add	local04, #1
21d9c     F4 FF 9F 5D |  if_ne	jmp	#LR__3012
21da0                 | LR__3013
21da0     09 25 82 F1 | 	sub	local04, arg01
21da4     12 FB 01 F6 | 	mov	result1, local04
21da8     FD 18 0A F6 | 	mov	arg04, result1 wz
21dac     00 FA 05 A6 |  if_e	mov	result1, #0
21db0     98 00 90 AD |  if_e	jmp	#LR__3017
21db4     00 26 0E F2 | 	cmp	local05, #0 wz
21db8     00 FA 05 A6 |  if_e	mov	result1, #0
21dbc     8C 00 90 AD |  if_e	jmp	#LR__3017
21dc0     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
21dc4     00 FA 05 16 |  if_a	mov	result1, #0
21dc8     80 00 90 1D |  if_a	jmp	#LR__3017
21dcc     01 1E 56 F2 | 	cmps	local01, #1 wc
21dd0     01 1E 06 C6 |  if_b	mov	local01, #1
21dd4     11 29 C2 FA | 	rdbyte	local06, local03
21dd8     01 26 0E F2 | 	cmp	local05, #1 wz
21ddc     18 00 90 5D |  if_ne	jmp	#LR__3014
21de0     10 13 02 F6 | 	mov	arg01, local02
21de4     14 15 02 F6 | 	mov	arg02, local06
21de8     0F 17 02 F6 | 	mov	arg03, local01
21dec     00 18 06 F6 | 	mov	arg04, #0
21df0     F0 33 B0 FD | 	call	#__system____ScanForChar
21df4     54 00 90 FD | 	jmp	#LR__3017
21df8                 | LR__3014
21df8     0F 2B 02 F6 | 	mov	local07, local01
21dfc                 | LR__3015
21dfc     10 13 02 F6 | 	mov	arg01, local02
21e00     14 15 02 F6 | 	mov	arg02, local06
21e04     15 17 02 F6 | 	mov	arg03, local07
21e08     00 18 06 F6 | 	mov	arg04, #0
21e0c     D4 33 B0 FD | 	call	#__system____ScanForChar
21e10     FD 2A 0A F6 | 	mov	local07, result1 wz
21e14     30 00 90 AD |  if_e	jmp	#LR__3016
21e18     13 17 02 F6 | 	mov	arg03, local05
21e1c     10 13 02 F6 | 	mov	arg01, local02
21e20     15 15 02 F6 | 	mov	arg02, local07
21e24     FC FA BF FD | 	call	#__system__Mid_S
21e28     FD 12 02 F6 | 	mov	arg01, result1
21e2c     11 15 02 F6 | 	mov	arg02, local03
21e30     F0 D9 BF FD | 	call	#__system___string_cmp
21e34     00 FA 0D F2 | 	cmp	result1, #0 wz
21e38     15 FB 01 A6 |  if_e	mov	result1, local07
21e3c     0C 00 90 AD |  if_e	jmp	#LR__3017
21e40     13 2B 02 F1 | 	add	local07, local05
21e44     B4 FF 9F FD | 	jmp	#LR__3015
21e48                 | LR__3016
21e48     00 FA 05 F6 | 	mov	result1, #0
21e4c                 | LR__3017
21e4c     A7 F0 03 F6 | 	mov	ptra, fp
21e50     B2 00 A0 FD | 	call	#popregs_
21e54                 | __system__Instr_ret
21e54     2D 00 64 FD | 	ret
21e58                 | 
21e58                 | __system___strerror
21e58     00 12 56 F2 | 	cmps	arg01, #0 wc
21e5c     08 00 90 CD |  if_b	jmp	#LR__3020
21e60     1A 12 56 F2 | 	cmps	arg01, #26 wc
21e64     04 00 90 CD |  if_b	jmp	#LR__3021
21e68                 | LR__3020
21e68     19 12 06 F6 | 	mov	arg01, #25
21e6c                 | LR__3021
21e6c     02 12 66 F0 | 	shl	arg01, #2
21e70     01 00 00 FF 
21e74     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
21e78     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
21e7c     09 FB 01 FB | 	rdlong	result1, arg01
21e80     01 00 00 FF 
21e84     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
21e88                 | __system___strerror_ret
21e88     2D 00 64 FD | 	ret
21e8c                 | 
21e8c                 | __system___int64_shl
21e8c     20 16 CE F7 | 	test	arg03, #32 wz
21e90     09 15 02 56 |  if_ne	mov	arg02, arg01
21e94     00 12 06 56 |  if_ne	mov	arg01, #0
21e98     1F 16 CE F7 | 	test	arg03, #31 wz
21e9c     18 00 90 AD |  if_e	jmp	#LR__3030
21ea0     0B 15 62 F0 | 	shl	arg02, arg03
21ea4     09 FB 01 F6 | 	mov	result1, arg01
21ea8     0B FD 61 F6 | 	neg	result2, arg03
21eac     FE FA 41 F0 | 	shr	result1, result2
21eb0     FD 14 42 F5 | 	or	arg02, result1
21eb4     0B 13 62 F0 | 	shl	arg01, arg03
21eb8                 | LR__3030
21eb8     0A FD 01 F6 | 	mov	result2, arg02
21ebc     09 FB 01 F6 | 	mov	result1, arg01
21ec0                 | __system___int64_shl_ret
21ec0     2D 00 64 FD | 	ret
21ec4                 | 
21ec4                 | __system___usepins
21ec4     14 E6 05 F1 | 	add	ptr___system__dat__, #20
21ec8     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
21ecc     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
21ed0     00 13 CA F7 | 	test	arg01, _var01 wz
21ed4     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
21ed8     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
21edc     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
21ee0     01 15 CA A7 |  if_e	test	arg02, _var02 wz
21ee4     00 FA 05 56 |  if_ne	mov	result1, #0
21ee8     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
21eec     14 E6 05 F1 | 	add	ptr___system__dat__, #20
21ef0     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
21ef4     09 03 42 F5 | 	or	_var02, arg01
21ef8     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
21efc     04 E6 05 F1 | 	add	ptr___system__dat__, #4
21f00     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
21f04     0A 03 42 F5 | 	or	_var02, arg02
21f08     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
21f0c     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
21f10     01 FA 65 F6 | 	neg	result1, #1
21f14                 | __system___usepins_ret
21f14     2D 00 64 FD | 	ret
21f18                 | 
21f18                 | __system___freepins
21f18     14 E6 05 F1 | 	add	ptr___system__dat__, #20
21f1c     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
21f20     09 01 22 F5 | 	andn	_var01, arg01
21f24     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
21f28     04 E6 05 F1 | 	add	ptr___system__dat__, #4
21f2c     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
21f30     0A 01 22 F5 | 	andn	_var01, arg02
21f34     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
21f38     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
21f3c                 | __system___freepins_ret
21f3c     2D 00 64 FD | 	ret
21f40                 | 
21f40                 | __system___float_fromuns
21f40     09 17 0A F6 | 	mov	arg03, arg01 wz
21f44     0B FB 01 A6 |  if_e	mov	result1, arg03
21f48     24 00 90 AD |  if_e	jmp	#LR__3040
21f4c     0B 15 92 F7 | 	encod	arg02, arg03 wc
21f50     01 14 06 C1 |  if_b	add	arg02, #1
21f54     01 14 86 F1 | 	sub	arg02, #1
21f58     1F 12 06 F6 | 	mov	arg01, #31
21f5c     0A 13 82 F1 | 	sub	arg01, arg02
21f60     09 17 62 F0 | 	shl	arg03, arg01
21f64     02 16 46 F0 | 	shr	arg03, #2
21f68     00 12 06 F6 | 	mov	arg01, #0
21f6c     4C 09 B0 FD | 	call	#__system___float_Pack
21f70                 | LR__3040
21f70                 | __system___float_fromuns_ret
21f70     2D 00 64 FD | 	ret
21f74                 | 
21f74                 | __system___float_add
21f74     0F 4A 05 F6 | 	mov	COUNT_, #15
21f78     A8 00 A0 FD | 	call	#pushregs_
21f7c     09 1F 02 F6 | 	mov	local01, arg01
21f80     0A 21 02 F6 | 	mov	local02, arg02
21f84     00 22 06 F6 | 	mov	local03, #0
21f88     0F 25 02 F6 | 	mov	local04, local01
21f8c     12 27 02 F6 | 	mov	local05, local04
21f90     16 26 46 F7 | 	zerox	local05, #22
21f94     12 29 02 F6 | 	mov	local06, local04
21f98     01 28 66 F0 | 	shl	local06, #1
21f9c     18 28 46 F0 | 	shr	local06, #24
21fa0     1F 24 46 F0 | 	shr	local04, #31
21fa4     10 13 02 F6 | 	mov	arg01, local02
21fa8     09 FB 01 F6 | 	mov	result1, arg01
21fac     FD 2A 02 F6 | 	mov	local07, result1
21fb0     15 2D 02 F6 | 	mov	local08, local07
21fb4     16 2C 46 F7 | 	zerox	local08, #22
21fb8     15 2F 02 F6 | 	mov	local09, local07
21fbc     01 2E 66 F0 | 	shl	local09, #1
21fc0     18 2E 46 F0 | 	shr	local09, #24
21fc4     17 31 02 F6 | 	mov	local10, local09
21fc8     1F 2A 46 F0 | 	shr	local07, #31
21fcc     00 32 06 F6 | 	mov	local11, #0
21fd0     00 34 06 F6 | 	mov	local12, #0
21fd4     18 29 12 F2 | 	cmp	local06, local10 wc
21fd8     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
21fdc     2C 00 90 1D |  if_a	jmp	#LR__3050
21fe0     16 27 12 32 |  if_ae	cmp	local05, local08 wc
21fe4     24 00 90 3D |  if_ae	jmp	#LR__3050
21fe8     13 37 02 F6 | 	mov	local13, local05
21fec     16 27 02 F6 | 	mov	local05, local08
21ff0     1B 2D 02 F6 | 	mov	local08, local13
21ff4     14 37 02 F6 | 	mov	local13, local06
21ff8     18 29 02 F6 | 	mov	local06, local10
21ffc     1B 31 02 F6 | 	mov	local10, local13
22000     12 37 02 F6 | 	mov	local13, local04
22004     15 25 02 F6 | 	mov	local04, local07
22008     1B 2B 02 F6 | 	mov	local07, local13
2200c                 | LR__3050
2200c     FF 28 0E F2 | 	cmp	local06, #255 wz
22010     70 01 90 AD |  if_e	jmp	#LR__3065
22014     00 28 0E F2 | 	cmp	local06, #0 wz
22018     AC 01 90 AD |  if_e	jmp	#LR__3067
2201c     17 26 26 F4 | 	bith	local05, #23
22020                 | LR__3051
22020     00 30 0E F2 | 	cmp	local10, #0 wz
22024     F0 01 90 AD |  if_e	jmp	#LR__3071
22028     17 2C 26 F4 | 	bith	local08, #23
2202c                 | LR__3052
2202c     7F 28 86 F1 | 	sub	local06, #127
22030     7F 30 86 F1 | 	sub	local10, #127
22034     14 39 02 F6 | 	mov	local14, local06
22038     18 39 82 F1 | 	sub	local14, local10
2203c     97 14 48 FB | 	callpa	#(@LR__3054-@LR__3053)>>2,fcache_load_ptr_
22040                 | LR__3053
22040     20 38 56 F2 | 	cmps	local14, #32 wc
22044     20 00 90 CD |  if_b	jmp	#LR__3055
22048     16 2F 02 F6 | 	mov	local09, local08
2204c     00 32 0E F2 | 	cmp	local11, #0 wz
22050     6F 32 62 FD | 	wrnz	local11
22054     19 2F 42 F5 | 	or	local09, local11
22058     17 33 02 F6 | 	mov	local11, local09
2205c     00 2C 06 F6 | 	mov	local08, #0
22060     20 38 86 F1 | 	sub	local14, #32
22064     D8 FF 9F FD | 	jmp	#LR__3053
22068                 | LR__3054
22068                 | LR__3055
22068     00 38 0E F2 | 	cmp	local14, #0 wz
2206c     38 00 90 AD |  if_e	jmp	#LR__3056
22070     16 37 02 F6 | 	mov	local13, local08
22074     20 30 06 F6 | 	mov	local10, #32
22078     1C 31 82 F1 | 	sub	local10, local14
2207c     18 37 62 F0 | 	shl	local13, local10
22080     19 31 02 F6 | 	mov	local10, local11
22084     20 2E 06 F6 | 	mov	local09, #32
22088     1C 2F 82 F1 | 	sub	local09, local14
2208c     17 31 6A F0 | 	shl	local10, local09 wz
22090     1C 33 42 F0 | 	shr	local11, local14
22094     1C 2D 42 F0 | 	shr	local08, local14
22098     1B 33 42 F5 | 	or	local11, local13
2209c     00 3A 06 F6 | 	mov	local15, #0
220a0     01 3A 06 56 |  if_ne	mov	local15, #1
220a4     1D 33 42 F5 | 	or	local11, local15
220a8                 | LR__3056
220a8     12 3B 02 F6 | 	mov	local15, local04
220ac     15 3B 62 F5 | 	xor	local15, local07
220b0     01 3A CE F7 | 	test	local15, #1 wz
220b4     18 00 90 AD |  if_e	jmp	#LR__3057
220b8     16 2D 22 F6 | 	not	local08, local08
220bc     19 33 22 F6 | 	not	local11, local11
220c0     01 32 0E F1 | 	add	local11, #1 wz
220c4     00 3A 06 F6 | 	mov	local15, #0
220c8     01 3A 06 A6 |  if_e	mov	local15, #1
220cc     1D 2D 02 F1 | 	add	local08, local15
220d0                 | LR__3057
220d0     19 35 12 F1 | 	add	local12, local11 wc
220d4     16 27 22 F1 | 	addx	local05, local08
220d8     00 26 56 F2 | 	cmps	local05, #0 wc
220dc     1C 00 90 3D |  if_ae	jmp	#LR__3058
220e0     01 24 66 F5 | 	xor	local04, #1
220e4     13 27 22 F6 | 	not	local05, local05
220e8     1A 35 22 F6 | 	not	local12, local12
220ec     01 34 0E F1 | 	add	local12, #1 wz
220f0     00 3A 06 F6 | 	mov	local15, #0
220f4     01 3A 06 A6 |  if_e	mov	local15, #1
220f8     1D 27 02 F1 | 	add	local05, local15
220fc                 | LR__3058
220fc     00 80 00 FF 
22100     00 26 16 F2 | 	cmp	local05, ##16777216 wc
22104     28 00 90 CD |  if_b	jmp	#LR__3059
22108     01 28 06 F1 | 	add	local06, #1
2210c     1A 39 02 F6 | 	mov	local14, local12
22110     01 38 06 F5 | 	and	local14, #1
22114     01 34 46 F0 | 	shr	local12, #1
22118     13 3B 02 F6 | 	mov	local15, local05
2211c     1F 3A 66 F0 | 	shl	local15, #31
22120     1D 35 42 F5 | 	or	local12, local15
22124     1C 35 42 F5 | 	or	local12, local14
22128     01 26 46 F0 | 	shr	local05, #1
2212c     3C 00 90 FD | 	jmp	#LR__3064
22130                 | LR__3059
22130     00 40 00 FF 
22134     00 26 16 F2 | 	cmp	local05, ##8388608 wc
22138     30 00 90 3D |  if_ae	jmp	#LR__3063
2213c     00 26 0E F2 | 	cmp	local05, #0 wz
22140     00 34 0E A2 |  if_e	cmp	local12, #0 wz
22144     08 24 46 A5 |  if_e	or	local04, #8
22148     01 24 26 A5 |  if_e	andn	local04, #1
2214c     1C 00 90 AD |  if_e	jmp	#LR__3062
22150                 | LR__3060
22150     00 40 00 FF 
22154     00 26 16 F2 | 	cmp	local05, ##8388608 wc
22158     10 00 90 3D |  if_ae	jmp	#LR__3061
2215c     1A 35 12 F1 | 	add	local12, local12 wc
22160     13 27 22 F1 | 	addx	local05, local05
22164     01 28 86 F1 | 	sub	local06, #1
22168     E4 FF 9F FD | 	jmp	#LR__3060
2216c                 | LR__3061
2216c                 | LR__3062
2216c                 | LR__3063
2216c                 | LR__3064
2216c     13 13 02 F6 | 	mov	arg01, local05
22170     1A 15 02 F6 | 	mov	arg02, local12
22174     14 17 02 F6 | 	mov	arg03, local06
22178     12 19 02 F6 | 	mov	arg04, local04
2217c     A8 34 B0 FD | 	call	#__system__pack_0574
22180     DC 00 90 FD | 	jmp	#LR__3075
22184                 | LR__3065
22184     FF 30 0E F2 | 	cmp	local10, #255 wz
22188     10 00 90 5D |  if_ne	jmp	#LR__3066
2218c     12 2B 0A F2 | 	cmp	local07, local04 wz
22190     00 F8 3F 5F 
22194     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
22198     C4 00 90 5D |  if_ne	jmp	#LR__3075
2219c                 | LR__3066
2219c     00 26 0E F2 | 	cmp	local05, #0 wz
221a0     00 F8 3F 5F 
221a4     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
221a8     B4 00 90 5D |  if_ne	jmp	#LR__3075
221ac     1A 15 02 F6 | 	mov	arg02, local12
221b0     14 17 02 F6 | 	mov	arg03, local06
221b4     12 19 02 F6 | 	mov	arg04, local04
221b8     02 18 46 F5 | 	or	arg04, #2
221bc     13 13 02 F6 | 	mov	arg01, local05
221c0     64 34 B0 FD | 	call	#__system__pack_0574
221c4     98 00 90 FD | 	jmp	#LR__3075
221c8                 | LR__3067
221c8     00 26 0E F2 | 	cmp	local05, #0 wz
221cc     28 00 90 AD |  if_e	jmp	#LR__3070
221d0     01 26 66 F0 | 	shl	local05, #1
221d4     97 0E 48 FB | 	callpa	#(@LR__3069-@LR__3068)>>2,fcache_load_ptr_
221d8                 | LR__3068
221d8     00 40 00 FF 
221dc     00 26 16 F2 | 	cmp	local05, ##8388608 wc
221e0     14 3B 02 C6 |  if_b	mov	local15, local06
221e4     01 3A 86 C1 |  if_b	sub	local15, #1
221e8     1D 29 02 C6 |  if_b	mov	local06, local15
221ec     01 26 66 C0 |  if_b	shl	local05, #1
221f0     E4 FF 9F CD |  if_b	jmp	#LR__3068
221f4                 | LR__3069
221f4     28 FE 9F FD | 	jmp	#LR__3051
221f8                 | LR__3070
221f8     15 25 02 F5 | 	and	local04, local07
221fc     12 19 02 F6 | 	mov	arg04, local04
22200     08 18 46 F5 | 	or	arg04, #8
22204     00 12 06 F6 | 	mov	arg01, #0
22208     00 14 06 F6 | 	mov	arg02, #0
2220c     00 16 06 F6 | 	mov	arg03, #0
22210     14 34 B0 FD | 	call	#__system__pack_0574
22214     48 00 90 FD | 	jmp	#LR__3075
22218                 | LR__3071
22218     00 2C 0E F2 | 	cmp	local08, #0 wz
2221c     28 00 90 AD |  if_e	jmp	#LR__3074
22220     01 2C 66 F0 | 	shl	local08, #1
22224     97 0E 48 FB | 	callpa	#(@LR__3073-@LR__3072)>>2,fcache_load_ptr_
22228                 | LR__3072
22228     00 40 00 FF 
2222c     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
22230     18 3B 02 C6 |  if_b	mov	local15, local10
22234     01 3A 86 C1 |  if_b	sub	local15, #1
22238     1D 31 02 C6 |  if_b	mov	local10, local15
2223c     01 2C 66 C0 |  if_b	shl	local08, #1
22240     E4 FF 9F CD |  if_b	jmp	#LR__3072
22244                 | LR__3073
22244     E4 FD 9F FD | 	jmp	#LR__3052
22248                 | LR__3074
22248     7F 28 86 F1 | 	sub	local06, #127
2224c     13 13 02 F6 | 	mov	arg01, local05
22250     1A 15 02 F6 | 	mov	arg02, local12
22254     14 17 02 F6 | 	mov	arg03, local06
22258     12 19 02 F6 | 	mov	arg04, local04
2225c     C8 33 B0 FD | 	call	#__system__pack_0574
22260                 | LR__3075
22260     A7 F0 03 F6 | 	mov	ptra, fp
22264     B2 00 A0 FD | 	call	#popregs_
22268                 | __system___float_add_ret
22268     2D 00 64 FD | 	ret
2226c                 | 
2226c                 | __system___float_sqrt
2226c     04 4A 05 F6 | 	mov	COUNT_, #4
22270     A8 00 A0 FD | 	call	#pushregs_
22274     09 1F 02 F6 | 	mov	local01, arg01
22278     09 FB 01 F6 | 	mov	result1, arg01
2227c     FD 20 02 F6 | 	mov	local02, result1
22280     10 23 02 F6 | 	mov	local03, local02
22284     16 22 46 F7 | 	zerox	local03, #22
22288     10 25 02 F6 | 	mov	local04, local02
2228c     01 24 66 F0 | 	shl	local04, #1
22290     18 24 4E F0 | 	shr	local04, #24 wz
22294     1F 20 46 F0 | 	shr	local02, #31
22298     70 00 90 AD |  if_e	jmp	#LR__3081
2229c     17 22 26 F4 | 	bith	local03, #23
222a0                 | LR__3080
222a0     00 20 0E F2 | 	cmp	local02, #0 wz
222a4     00 F8 3F 5F 
222a8     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
222ac     88 00 90 5D |  if_ne	jmp	#LR__3084
222b0     FF 24 0E F2 | 	cmp	local04, #255 wz
222b4     0F FB 01 A6 |  if_e	mov	result1, local01
222b8     7C 00 90 AD |  if_e	jmp	#LR__3084
222bc     7F 24 86 F1 | 	sub	local04, #127
222c0     01 24 CE F7 | 	test	local04, #1 wz
222c4     01 22 66 50 |  if_ne	shl	local03, #1
222c8     05 22 66 F0 | 	shl	local03, #5
222cc     11 01 38 FD | 	qsqrt	#0, local03
222d0     01 24 86 51 |  if_ne	sub	local04, #1
222d4     12 25 52 F6 | 	abs	local04, local04 wc
222d8     01 24 46 F0 | 	shr	local04, #1
222dc     12 17 82 F6 | 	negc	arg03, local04
222e0     10 19 02 F6 | 	mov	arg04, local02
222e4     18 12 62 FD | 	getqx	arg01
222e8     09 15 02 F6 | 	mov	arg02, arg01
222ec     19 14 66 F0 | 	shl	arg02, #25
222f0     07 12 46 F0 | 	shr	arg01, #7
222f4     00 80 00 FF 
222f8     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
222fc     01 16 06 31 |  if_ae	add	arg03, #1
22300     01 12 46 30 |  if_ae	shr	arg01, #1
22304     20 33 B0 FD | 	call	#__system__pack_0574
22308     2C 00 90 FD | 	jmp	#LR__3084
2230c                 | LR__3081
2230c     00 22 0E F2 | 	cmp	local03, #0 wz
22310     0F FB 01 A6 |  if_e	mov	result1, local01
22314     20 00 90 AD |  if_e	jmp	#LR__3084
22318     01 22 66 F0 | 	shl	local03, #1
2231c     97 0A 48 FB | 	callpa	#(@LR__3083-@LR__3082)>>2,fcache_load_ptr_
22320                 | LR__3082
22320     00 40 00 FF 
22324     00 22 16 F2 | 	cmp	local03, ##8388608 wc
22328     01 24 86 C1 |  if_b	sub	local04, #1
2232c     01 22 66 C0 |  if_b	shl	local03, #1
22330     EC FF 9F CD |  if_b	jmp	#LR__3082
22334                 | LR__3083
22334     68 FF 9F FD | 	jmp	#LR__3080
22338                 | LR__3084
22338     A7 F0 03 F6 | 	mov	ptra, fp
2233c     B2 00 A0 FD | 	call	#popregs_
22340                 | __system___float_sqrt_ret
22340     2D 00 64 FD | 	ret
22344                 | 
22344                 | __system___float_mul
22344     0B 4A 05 F6 | 	mov	COUNT_, #11
22348     A8 00 A0 FD | 	call	#pushregs_
2234c     09 1F 02 F6 | 	mov	local01, arg01
22350     0A 21 02 F6 | 	mov	local02, arg02
22354     0F 23 02 F6 | 	mov	local03, local01
22358     11 25 02 F6 | 	mov	local04, local03
2235c     16 24 46 F7 | 	zerox	local04, #22
22360     11 27 02 F6 | 	mov	local05, local03
22364     01 26 66 F0 | 	shl	local05, #1
22368     18 26 46 F0 | 	shr	local05, #24
2236c     1F 22 46 F0 | 	shr	local03, #31
22370     10 FB 01 F6 | 	mov	result1, local02
22374     FD 28 02 F6 | 	mov	local06, result1
22378     14 2B 02 F6 | 	mov	local07, local06
2237c     16 2A 46 F7 | 	zerox	local07, #22
22380     14 2D 02 F6 | 	mov	local08, local06
22384     01 2C 66 F0 | 	shl	local08, #1
22388     18 2C 46 F0 | 	shr	local08, #24
2238c     1F 28 46 F0 | 	shr	local06, #31
22390     14 23 62 F5 | 	xor	local03, local06
22394     FF 26 0E F2 | 	cmp	local05, #255 wz
22398     90 00 90 AD |  if_e	jmp	#LR__3093
2239c     FF 2C 0E F2 | 	cmp	local08, #255 wz
223a0     D8 00 90 AD |  if_e	jmp	#LR__3095
223a4     00 26 0E F2 | 	cmp	local05, #0 wz
223a8     0C 01 90 AD |  if_e	jmp	#LR__3096
223ac     17 24 26 F4 | 	bith	local04, #23
223b0                 | LR__3090
223b0     00 2C 0E F2 | 	cmp	local08, #0 wz
223b4     44 01 90 AD |  if_e	jmp	#LR__3100
223b8     17 2A 26 F4 | 	bith	local07, #23
223bc                 | LR__3091
223bc     12 21 02 F6 | 	mov	local02, local04
223c0     04 20 66 F0 | 	shl	local02, #4
223c4     15 29 02 F6 | 	mov	local06, local07
223c8     05 28 66 F0 | 	shl	local06, #5
223cc     14 21 02 FD | 	qmul	local02, local06
223d0     16 27 02 F1 | 	add	local05, local08
223d4     FE 26 86 F1 | 	sub	local05, #254
223d8     13 2F 02 F6 | 	mov	local09, local05
223dc     04 24 66 F0 | 	shl	local04, #4
223e0     05 2A 66 F0 | 	shl	local07, #5
223e4     18 30 62 FD | 	getqx	local10
223e8     15 25 02 FD | 	qmul	local04, local07
223ec     19 32 62 FD | 	getqy	local11
223f0     00 80 00 FF 
223f4     00 32 16 F2 | 	cmp	local11, ##16777216 wc
223f8     18 00 90 CD |  if_b	jmp	#LR__3092
223fc     01 2E 06 F1 | 	add	local09, #1
22400     01 30 46 F0 | 	shr	local10, #1
22404     19 2D 02 F6 | 	mov	local08, local11
22408     1F 2C 66 F0 | 	shl	local08, #31
2240c     16 31 42 F5 | 	or	local10, local08
22410     01 32 46 F0 | 	shr	local11, #1
22414                 | LR__3092
22414     19 13 02 F6 | 	mov	arg01, local11
22418     18 15 02 F6 | 	mov	arg02, local10
2241c     17 17 02 F6 | 	mov	arg03, local09
22420     11 19 02 F6 | 	mov	arg04, local03
22424     00 32 B0 FD | 	call	#__system__pack_0574
22428     10 01 90 FD | 	jmp	#LR__3104
2242c                 | LR__3093
2242c     00 24 0E F2 | 	cmp	local04, #0 wz
22430     0F FB 01 56 |  if_ne	mov	result1, local01
22434     04 01 90 5D |  if_ne	jmp	#LR__3104
22438     FF 2C 56 F2 | 	cmps	local08, #255 wc
2243c     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
22440     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
22444     18 00 90 4D |  if_c_and_nz	jmp	#LR__3094
22448     00 F8 3F CF 
2244c     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
22450     E8 00 90 CD |  if_b	jmp	#LR__3104
22454     00 2A 0E F2 | 	cmp	local07, #0 wz
22458     10 FB 01 56 |  if_ne	mov	result1, local02
2245c     DC 00 90 5D |  if_ne	jmp	#LR__3104
22460                 | LR__3094
22460     02 22 46 F5 | 	or	local03, #2
22464     00 12 06 F6 | 	mov	arg01, #0
22468     00 14 06 F6 | 	mov	arg02, #0
2246c     13 17 02 F6 | 	mov	arg03, local05
22470     11 19 02 F6 | 	mov	arg04, local03
22474     B0 31 B0 FD | 	call	#__system__pack_0574
22478     C0 00 90 FD | 	jmp	#LR__3104
2247c                 | LR__3095
2247c     00 26 0E F2 | 	cmp	local05, #0 wz
22480     00 24 0E A2 |  if_e	cmp	local04, #0 wz
22484     00 F8 3F AF 
22488     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
2248c     AC 00 90 AD |  if_e	jmp	#LR__3104
22490     00 2A 0E F2 | 	cmp	local07, #0 wz
22494     10 FB 01 56 |  if_ne	mov	result1, local02
22498     A0 00 90 5D |  if_ne	jmp	#LR__3104
2249c     16 17 02 F6 | 	mov	arg03, local08
224a0     11 19 02 F6 | 	mov	arg04, local03
224a4     02 18 46 F5 | 	or	arg04, #2
224a8     00 12 06 F6 | 	mov	arg01, #0
224ac     00 14 06 F6 | 	mov	arg02, #0
224b0     74 31 B0 FD | 	call	#__system__pack_0574
224b4     84 00 90 FD | 	jmp	#LR__3104
224b8                 | LR__3096
224b8     00 24 0E F2 | 	cmp	local04, #0 wz
224bc     20 00 90 AD |  if_e	jmp	#LR__3099
224c0     01 24 66 F0 | 	shl	local04, #1
224c4     97 0A 48 FB | 	callpa	#(@LR__3098-@LR__3097)>>2,fcache_load_ptr_
224c8                 | LR__3097
224c8     00 40 00 FF 
224cc     00 24 16 F2 | 	cmp	local04, ##8388608 wc
224d0     01 26 86 C1 |  if_b	sub	local05, #1
224d4     01 24 66 C0 |  if_b	shl	local04, #1
224d8     EC FF 9F CD |  if_b	jmp	#LR__3097
224dc                 | LR__3098
224dc     D0 FE 9F FD | 	jmp	#LR__3090
224e0                 | LR__3099
224e0     08 22 46 F5 | 	or	local03, #8
224e4     00 12 06 F6 | 	mov	arg01, #0
224e8     00 14 06 F6 | 	mov	arg02, #0
224ec     00 16 06 F6 | 	mov	arg03, #0
224f0     11 19 02 F6 | 	mov	arg04, local03
224f4     30 31 B0 FD | 	call	#__system__pack_0574
224f8     40 00 90 FD | 	jmp	#LR__3104
224fc                 | LR__3100
224fc     00 2A 0E F2 | 	cmp	local07, #0 wz
22500     20 00 90 AD |  if_e	jmp	#LR__3103
22504     01 2A 66 F0 | 	shl	local07, #1
22508     97 0A 48 FB | 	callpa	#(@LR__3102-@LR__3101)>>2,fcache_load_ptr_
2250c                 | LR__3101
2250c     00 40 00 FF 
22510     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
22514     01 2C 86 C1 |  if_b	sub	local08, #1
22518     01 2A 66 C0 |  if_b	shl	local07, #1
2251c     EC FF 9F CD |  if_b	jmp	#LR__3101
22520                 | LR__3102
22520     98 FE 9F FD | 	jmp	#LR__3091
22524                 | LR__3103
22524     08 22 46 F5 | 	or	local03, #8
22528     00 12 06 F6 | 	mov	arg01, #0
2252c     00 14 06 F6 | 	mov	arg02, #0
22530     00 16 06 F6 | 	mov	arg03, #0
22534     11 19 02 F6 | 	mov	arg04, local03
22538     EC 30 B0 FD | 	call	#__system__pack_0574
2253c                 | LR__3104
2253c     A7 F0 03 F6 | 	mov	ptra, fp
22540     B2 00 A0 FD | 	call	#popregs_
22544                 | __system___float_mul_ret
22544     2D 00 64 FD | 	ret
22548                 | 
22548                 | __system___float_div
22548     0E 4A 05 F6 | 	mov	COUNT_, #14
2254c     A8 00 A0 FD | 	call	#pushregs_
22550     09 23 02 F6 | 	mov	local03, arg01
22554     0A 25 02 F6 | 	mov	local04, arg02
22558     11 27 02 F6 | 	mov	local05, local03
2255c     13 29 02 F6 | 	mov	local06, local05
22560     16 28 46 F7 | 	zerox	local06, #22
22564     13 2B 02 F6 | 	mov	local07, local05
22568     01 2A 66 F0 | 	shl	local07, #1
2256c     18 2A 46 F0 | 	shr	local07, #24
22570     1F 26 46 F0 | 	shr	local05, #31
22574     12 FB 01 F6 | 	mov	result1, local04
22578     FD 2C 02 F6 | 	mov	local08, result1
2257c     16 2F 02 F6 | 	mov	local09, local08
22580     16 2E 46 F7 | 	zerox	local09, #22
22584     16 31 02 F6 | 	mov	local10, local08
22588     01 30 66 F0 | 	shl	local10, #1
2258c     18 30 46 F0 | 	shr	local10, #24
22590     1F 2C 46 F0 | 	shr	local08, #31
22594     16 27 62 F5 | 	xor	local05, local08
22598     FF 2A 0E F2 | 	cmp	local07, #255 wz
2259c     D4 00 90 AD |  if_e	jmp	#LR__3115
225a0     FF 30 0E F2 | 	cmp	local10, #255 wz
225a4     04 01 90 AD |  if_e	jmp	#LR__3116
225a8     00 2A 0E F2 | 	cmp	local07, #0 wz
225ac     24 01 90 AD |  if_e	jmp	#LR__3117
225b0     17 28 26 F4 | 	bith	local06, #23
225b4                 | LR__3110
225b4     00 30 0E F2 | 	cmp	local10, #0 wz
225b8     70 01 90 AD |  if_e	jmp	#LR__3121
225bc     17 2E 26 F4 | 	bith	local09, #23
225c0                 | LR__3111
225c0     18 2B 82 F1 | 	sub	local07, local10
225c4     15 33 02 F6 | 	mov	local11, local07
225c8     14 13 02 F6 | 	mov	arg01, local06
225cc     02 12 46 F0 | 	shr	arg01, #2
225d0     1E 28 66 F0 | 	shl	local06, #30
225d4     14 15 02 F6 | 	mov	arg02, local06
225d8     17 17 02 F6 | 	mov	arg03, local09
225dc     28 12 62 FD | 	setq	arg01
225e0     0B 15 12 FD | 	qdiv	arg02, arg03
225e4     00 34 06 F6 | 	mov	local12, #0
225e8     18 1E 62 FD | 	getqx	local01
225ec     19 FC 61 FD | 	getqy	result2
225f0     FE 20 02 F6 | 	mov	local02, result2
225f4     0F 37 02 F6 | 	mov	local13, local01
225f8     00 20 4E F2 | 	cmps	local02, #0 wz
225fc     1B 39 02 F6 | 	mov	local14, local13
22600     19 38 66 F0 | 	shl	local14, #25
22604     01 34 06 56 |  if_ne	mov	local12, #1
22608     1A 39 42 F5 | 	or	local14, local12
2260c     07 36 46 F0 | 	shr	local13, #7
22610     00 80 00 FF 
22614     00 36 16 F2 | 	cmp	local13, ##16777216 wc
22618     1C 00 90 CD |  if_b	jmp	#LR__3112
2261c     01 32 06 F1 | 	add	local11, #1
22620     01 38 46 F0 | 	shr	local14, #1
22624     1B 35 02 F6 | 	mov	local12, local13
22628     1F 34 66 F0 | 	shl	local12, #31
2262c     1A 39 42 F5 | 	or	local14, local12
22630     01 36 46 F0 | 	shr	local13, #1
22634     24 00 90 FD | 	jmp	#LR__3114
22638                 | LR__3112
22638     00 40 00 FF 
2263c     00 36 16 F2 | 	cmp	local13, ##8388608 wc
22640     18 00 90 3D |  if_ae	jmp	#LR__3113
22644     01 32 86 F1 | 	sub	local11, #1
22648     01 36 66 F0 | 	shl	local13, #1
2264c     1C 35 02 F6 | 	mov	local12, local14
22650     1F 34 46 F0 | 	shr	local12, #31
22654     1A 37 42 F5 | 	or	local13, local12
22658     01 38 66 F0 | 	shl	local14, #1
2265c                 | LR__3113
2265c                 | LR__3114
2265c     1B 13 02 F6 | 	mov	arg01, local13
22660     1C 15 02 F6 | 	mov	arg02, local14
22664     19 17 02 F6 | 	mov	arg03, local11
22668     13 19 02 F6 | 	mov	arg04, local05
2266c     B8 2F B0 FD | 	call	#__system__pack_0574
22670     F8 00 90 FD | 	jmp	#LR__3125
22674                 | LR__3115
22674     00 28 0E F2 | 	cmp	local06, #0 wz
22678     11 FB 01 56 |  if_ne	mov	result1, local03
2267c     EC 00 90 5D |  if_ne	jmp	#LR__3125
22680     FF 30 0E F2 | 	cmp	local10, #255 wz
22684     00 F8 3F AF 
22688     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
2268c     DC 00 90 AD |  if_e	jmp	#LR__3125
22690     02 26 46 F5 | 	or	local05, #2
22694     00 12 06 F6 | 	mov	arg01, #0
22698     00 14 06 F6 | 	mov	arg02, #0
2269c     15 17 02 F6 | 	mov	arg03, local07
226a0     13 19 02 F6 | 	mov	arg04, local05
226a4     80 2F B0 FD | 	call	#__system__pack_0574
226a8     C0 00 90 FD | 	jmp	#LR__3125
226ac                 | LR__3116
226ac     00 2E 0E F2 | 	cmp	local09, #0 wz
226b0     12 FB 01 56 |  if_ne	mov	result1, local04
226b4     B4 00 90 5D |  if_ne	jmp	#LR__3125
226b8     13 19 02 F6 | 	mov	arg04, local05
226bc     08 18 46 F5 | 	or	arg04, #8
226c0     00 12 06 F6 | 	mov	arg01, #0
226c4     00 14 06 F6 | 	mov	arg02, #0
226c8     00 16 06 F6 | 	mov	arg03, #0
226cc     58 2F B0 FD | 	call	#__system__pack_0574
226d0     98 00 90 FD | 	jmp	#LR__3125
226d4                 | LR__3117
226d4     00 28 0E F2 | 	cmp	local06, #0 wz
226d8     20 00 90 AD |  if_e	jmp	#LR__3120
226dc     01 28 66 F0 | 	shl	local06, #1
226e0     97 0A 48 FB | 	callpa	#(@LR__3119-@LR__3118)>>2,fcache_load_ptr_
226e4                 | LR__3118
226e4     00 40 00 FF 
226e8     00 28 16 F2 | 	cmp	local06, ##8388608 wc
226ec     01 2A 86 C1 |  if_b	sub	local07, #1
226f0     01 28 66 C0 |  if_b	shl	local06, #1
226f4     EC FF 9F CD |  if_b	jmp	#LR__3118
226f8                 | LR__3119
226f8     B8 FE 9F FD | 	jmp	#LR__3110
226fc                 | LR__3120
226fc     00 30 0E F2 | 	cmp	local10, #0 wz
22700     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
22704     00 F8 3F AF 
22708     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
2270c     5C 00 90 AD |  if_e	jmp	#LR__3125
22710     13 19 02 F6 | 	mov	arg04, local05
22714     08 18 46 F5 | 	or	arg04, #8
22718     00 12 06 F6 | 	mov	arg01, #0
2271c     00 14 06 F6 | 	mov	arg02, #0
22720     00 16 06 F6 | 	mov	arg03, #0
22724     00 2F B0 FD | 	call	#__system__pack_0574
22728     40 00 90 FD | 	jmp	#LR__3125
2272c                 | LR__3121
2272c     00 2E 0E F2 | 	cmp	local09, #0 wz
22730     20 00 90 AD |  if_e	jmp	#LR__3124
22734     01 2E 66 F0 | 	shl	local09, #1
22738     97 0A 48 FB | 	callpa	#(@LR__3123-@LR__3122)>>2,fcache_load_ptr_
2273c                 | LR__3122
2273c     00 40 00 FF 
22740     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
22744     01 30 86 C1 |  if_b	sub	local10, #1
22748     01 2E 66 C0 |  if_b	shl	local09, #1
2274c     EC FF 9F CD |  if_b	jmp	#LR__3122
22750                 | LR__3123
22750     6C FE 9F FD | 	jmp	#LR__3111
22754                 | LR__3124
22754     02 26 46 F5 | 	or	local05, #2
22758     00 12 06 F6 | 	mov	arg01, #0
2275c     00 14 06 F6 | 	mov	arg02, #0
22760     00 16 06 F6 | 	mov	arg03, #0
22764     13 19 02 F6 | 	mov	arg04, local05
22768     BC 2E B0 FD | 	call	#__system__pack_0574
2276c                 | LR__3125
2276c     A7 F0 03 F6 | 	mov	ptra, fp
22770     B2 00 A0 FD | 	call	#popregs_
22774                 | __system___float_div_ret
22774     2D 00 64 FD | 	ret
22778                 | 
22778                 | __system___float_cmp
22778     00 C0 3F FF 
2277c     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
22780     00 C0 3F CF 
22784     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
22788     0B FB 01 36 |  if_ae	mov	result1, arg03
2278c     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
22790     00 C0 7F FF 
22794     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
22798     00 C0 7F CF 
2279c     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
227a0     0B FB 01 36 |  if_ae	mov	result1, arg03
227a4     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
227a8     00 12 56 F2 | 	cmps	arg01, #0 wc
227ac     2C 00 90 3D |  if_ae	jmp	#LR__3130
227b0     00 14 56 F2 | 	cmps	arg02, #0 wc
227b4     0A FB 01 C6 |  if_b	mov	result1, arg02
227b8     09 FB 81 C1 |  if_b	sub	result1, arg01
227bc     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
227c0     00 14 0E F2 | 	cmp	arg02, #0 wz
227c4     00 00 40 AF 
227c8     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
227cc     00 FA 05 A6 |  if_e	mov	result1, #0
227d0     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
227d4     01 FA 65 F6 | 	neg	result1, #1
227d8     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
227dc                 | LR__3130
227dc     00 14 56 F2 | 	cmps	arg02, #0 wc
227e0     1C 00 90 3D |  if_ae	jmp	#LR__3131
227e4     00 12 0E F2 | 	cmp	arg01, #0 wz
227e8     00 00 40 AF 
227ec     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
227f0     00 FA 05 A6 |  if_e	mov	result1, #0
227f4     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
227f8     01 FA 05 F6 | 	mov	result1, #1
227fc     08 00 90 FD | 	jmp	#__system___float_cmp_ret
22800                 | LR__3131
22800     0A 13 82 F1 | 	sub	arg01, arg02
22804     09 FB 01 F6 | 	mov	result1, arg01
22808                 | __system___float_cmp_ret
22808     2D 00 64 FD | 	ret
2280c                 | 
2280c                 | __system___float_tointeger
2280c     02 4A 05 F6 | 	mov	COUNT_, #2
22810     A8 00 A0 FD | 	call	#pushregs_
22814     50 00 B0 FD | 	call	#__system___float_Unpack
22818     FF FF 7F FF 
2281c     FF FD 55 F2 | 	cmps	result2, ##-1 wc
22820     34 00 90 CD |  if_b	jmp	#LR__3140
22824     1F FC 55 F2 | 	cmps	result2, #31 wc
22828     2C 00 90 3D |  if_ae	jmp	#LR__3140
2282c     02 FE 65 F0 | 	shl	result3, #2
22830     1E 1E 06 F6 | 	mov	local01, #30
22834     FE 1E 82 F1 | 	sub	local01, result2
22838     0F FF 41 F0 | 	shr	result3, local01
2283c     FF 20 02 F6 | 	mov	local02, result3
22840     0A 21 02 F1 | 	add	local02, arg02
22844     01 20 46 F0 | 	shr	local02, #1
22848     00 FA 0D F2 | 	cmp	result1, #0 wz
2284c     10 21 62 56 |  if_ne	neg	local02, local02
22850     10 FB 01 F6 | 	mov	result1, local02
22854     04 00 90 FD | 	jmp	#LR__3141
22858                 | LR__3140
22858     00 FA 05 F6 | 	mov	result1, #0
2285c                 | LR__3141
2285c     A7 F0 03 F6 | 	mov	ptra, fp
22860     B2 00 A0 FD | 	call	#popregs_
22864                 | __system___float_tointeger_ret
22864     2D 00 64 FD | 	ret
22868                 | 
22868                 | __system___float_Unpack
22868     09 01 02 F6 | 	mov	_var01, arg01
2286c     1F 00 46 F0 | 	shr	_var01, #31
22870     09 03 02 F6 | 	mov	_var02, arg01
22874     01 02 66 F0 | 	shl	_var02, #1
22878     18 02 4E F0 | 	shr	_var02, #24 wz
2287c     17 13 06 F4 | 	bitl	arg01, #279
22880     06 12 66 50 |  if_ne	shl	arg01, #6
22884     1D 12 26 54 |  if_ne	bith	arg01, #29
22888     1C 00 90 5D |  if_ne	jmp	#LR__3150
2288c     09 05 92 F7 | 	encod	_var03, arg01 wc
22890     01 04 06 C1 |  if_b	add	_var03, #1
22894     17 04 86 F1 | 	sub	_var03, #23
22898     02 03 02 F6 | 	mov	_var02, _var03
2289c     07 FC 05 F6 | 	mov	result2, #7
228a0     02 FD 81 F1 | 	sub	result2, _var03
228a4     FE 12 62 F0 | 	shl	arg01, result2
228a8                 | LR__3150
228a8     7F 02 86 F1 | 	sub	_var02, #127
228ac     09 FF 01 F6 | 	mov	result3, arg01
228b0     00 FB 01 F6 | 	mov	result1, _var01
228b4     01 FD 01 F6 | 	mov	result2, _var02
228b8                 | __system___float_Unpack_ret
228b8     2D 00 64 FD | 	ret
228bc                 | 
228bc                 | __system___float_Pack
228bc     00 00 06 F6 | 	mov	_var01, #0
228c0     00 16 0E F2 | 	cmp	arg03, #0 wz
228c4     8C 00 90 AD |  if_e	jmp	#LR__3161
228c8     0B 03 92 F7 | 	encod	_var02, arg03 wc
228cc     01 02 06 C1 |  if_b	add	_var02, #1
228d0     21 00 06 F6 | 	mov	_var01, #33
228d4     01 01 82 F1 | 	sub	_var01, _var02
228d8     00 17 62 F0 | 	shl	arg03, _var01
228dc     03 02 06 F6 | 	mov	_var02, #3
228e0     00 03 82 F1 | 	sub	_var02, _var01
228e4     01 15 02 F1 | 	add	arg02, _var02
228e8     0A 05 02 F6 | 	mov	_var03, arg02
228ec     00 17 06 F1 | 	add	arg03, #256
228f0     0B 03 02 F6 | 	mov	_var02, arg03
228f4     FF 02 2E F5 | 	andn	_var02, #255 wz
228f8     01 04 06 A1 |  if_e	add	_var03, #1
228fc     7F 04 06 F1 | 	add	_var03, #127
22900     FF FF 7F FF 
22904     E9 05 46 F3 | 	fges	_var03, ##-23
22908     FF 04 66 F3 | 	fles	_var03, #255
2290c     01 04 56 F2 | 	cmps	_var03, #1 wc
22910     1C 00 90 3D |  if_ae	jmp	#LR__3160
22914     01 16 46 F0 | 	shr	arg03, #1
22918     1F 02 C6 F9 | 	decod	_var02, #31
2291c     0B 03 02 F1 | 	add	_var02, arg03
22920     02 05 62 F6 | 	neg	_var03, _var03
22924     02 03 42 F0 | 	shr	_var02, _var03
22928     01 17 02 F6 | 	mov	arg03, _var02
2292c     00 04 06 F6 | 	mov	_var03, #0
22930                 | LR__3160
22930     09 FB 01 F6 | 	mov	result1, arg01
22934     1F FA 65 F0 | 	shl	result1, #31
22938     02 03 02 F6 | 	mov	_var02, _var03
2293c     17 02 66 F0 | 	shl	_var02, #23
22940     01 FB 41 F5 | 	or	result1, _var02
22944     0B 07 02 F6 | 	mov	_var04, arg03
22948     09 06 46 F0 | 	shr	_var04, #9
2294c     03 FB 41 F5 | 	or	result1, _var04
22950     04 00 90 FD | 	jmp	#__system___float_Pack_ret
22954                 | LR__3161
22954     00 FB 01 F6 | 	mov	result1, _var01
22958                 | __system___float_Pack_ret
22958     2D 00 64 FD | 	ret
2295c                 | 
2295c                 | __system___basic_print_float
2295c     05 4A 05 F6 | 	mov	COUNT_, #5
22960     A8 00 A0 FD | 	call	#pushregs_
22964     09 1F 02 F6 | 	mov	local01, arg01
22968     0A 21 02 F6 | 	mov	local02, arg02
2296c     0B 23 0A F6 | 	mov	local03, arg03 wz
22970     0C 25 02 F6 | 	mov	local04, arg04
22974     14 00 90 5D |  if_ne	jmp	#LR__3170
22978     23 24 0E F2 | 	cmp	local04, #35 wz
2297c     80 02 10 AF 
22980     00 26 06 A6 |  if_e	mov	local05, ##537198592
22984     1D 26 C6 59 |  if_ne	decod	local05, #29
22988     13 23 02 F6 | 	mov	local03, local05
2298c                 | LR__3170
2298c     0F 13 02 F6 | 	mov	arg01, local01
22990     78 27 B0 FD | 	call	#__system___gettxfunc
22994     FD 26 0A F6 | 	mov	local05, result1 wz
22998     00 FA 05 A6 |  if_e	mov	result1, #0
2299c     13 13 02 56 |  if_ne	mov	arg01, local05
229a0     11 15 02 56 |  if_ne	mov	arg02, local03
229a4     10 17 02 56 |  if_ne	mov	arg03, local02
229a8     12 19 02 56 |  if_ne	mov	arg04, local04
229ac     30 DF BF 5D |  if_ne	call	#__system___fmtfloat
229b0     A7 F0 03 F6 | 	mov	ptra, fp
229b4     B2 00 A0 FD | 	call	#popregs_
229b8                 | __system___basic_print_float_ret
229b8     2D 00 64 FD | 	ret
229bc                 | 
229bc                 | __system____builtin_atoi
229bc     07 4A 05 F6 | 	mov	COUNT_, #7
229c0     A8 00 A0 FD | 	call	#pushregs_
229c4                 | __system____builtin_atoi_enter
229c4     09 1F 02 F6 | 	mov	local01, arg01
229c8     0A 21 02 F6 | 	mov	local02, arg02
229cc     00 22 06 F6 | 	mov	local03, #0
229d0     00 24 06 F6 | 	mov	local04, #0
229d4     00 26 06 F6 | 	mov	local05, #0
229d8     97 08 48 FB | 	callpa	#(@LR__3181-@LR__3180)>>2,fcache_load_ptr_
229dc                 | LR__3180
229dc     0F 29 C2 FA | 	rdbyte	local06, local01
229e0     20 28 0E F2 | 	cmp	local06, #32 wz
229e4     01 1E 06 A1 |  if_e	add	local01, #1
229e8     F0 FF 9F AD |  if_e	jmp	#LR__3180
229ec                 | LR__3181
229ec     0F 2B C2 FA | 	rdbyte	local07, local01
229f0                 | LR__3182
229f0     2D 2A 0E F2 | 	cmp	local07, #45 wz
229f4     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
229f8     18 00 90 5D |  if_ne	jmp	#LR__3183
229fc     01 1E 06 F1 | 	add	local01, #1
22a00     2D 2A 0E F2 | 	cmp	local07, #45 wz
22a04     01 28 06 A6 |  if_e	mov	local06, #1
22a08     14 27 C2 A2 |  if_e	subr	local05, local06
22a0c     0F 2B C2 FA | 	rdbyte	local07, local01
22a10     DC FF 9F FD | 	jmp	#LR__3182
22a14                 | LR__3183
22a14     97 48 48 FB | 	callpa	#(@LR__3191-@LR__3184)>>2,fcache_load_ptr_
22a18                 | LR__3184
22a18                 | LR__3185
22a18     0F 2B C2 FA | 	rdbyte	local07, local01
22a1c     5F 2A 0E F2 | 	cmp	local07, #95 wz
22a20     01 1E 06 F1 | 	add	local01, #1
22a24     F0 FF 9F AD |  if_e	jmp	#LR__3185
22a28     30 2A 0E F2 | 	cmp	local07, #48 wz
22a2c     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
22a30     00 24 06 A6 |  if_e	mov	local04, #0
22a34     60 00 90 AD |  if_e	jmp	#LR__3190
22a38     31 2A 56 F2 | 	cmps	local07, #49 wc
22a3c     18 00 90 CD |  if_b	jmp	#LR__3186
22a40     3A 2A 56 F2 | 	cmps	local07, #58 wc
22a44     15 25 02 C6 |  if_b	mov	local04, local07
22a48     30 24 86 C1 |  if_b	sub	local04, #48
22a4c     00 20 0E C2 |  if_b	cmp	local02, #0 wz
22a50     0A 20 06 86 |  if_c_and_z	mov	local02, #10
22a54     40 00 90 CD |  if_b	jmp	#LR__3189
22a58                 | LR__3186
22a58     0B 20 56 F2 | 	cmps	local02, #11 wc
22a5c     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
22a60     14 00 90 CD |  if_b	jmp	#LR__3187
22a64     67 2A 56 F2 | 	cmps	local07, #103 wc
22a68     61 2A 86 C1 |  if_b	sub	local07, #97
22a6c     0A 24 06 C6 |  if_b	mov	local04, #10
22a70     15 25 02 C1 |  if_b	add	local04, local07
22a74     20 00 90 CD |  if_b	jmp	#LR__3188
22a78                 | LR__3187
22a78     0B 20 56 F2 | 	cmps	local02, #11 wc
22a7c     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
22a80     24 00 90 CD |  if_b	jmp	#LR__3192
22a84     47 2A 56 F2 | 	cmps	local07, #71 wc
22a88     41 2A 86 C1 |  if_b	sub	local07, #65
22a8c     0A 24 06 C6 |  if_b	mov	local04, #10
22a90     15 25 02 C1 |  if_b	add	local04, local07
22a94     10 00 90 3D |  if_ae	jmp	#LR__3192
22a98                 | LR__3188
22a98                 | LR__3189
22a98                 | LR__3190
22a98     11 21 02 FD | 	qmul	local02, local03
22a9c     18 22 62 FD | 	getqx	local03
22aa0     12 23 02 F1 | 	add	local03, local04
22aa4     70 FF 9F FD | 	jmp	#LR__3184
22aa8                 | LR__3191
22aa8                 | LR__3192
22aa8     00 20 0E F2 | 	cmp	local02, #0 wz
22aac     64 00 90 5D |  if_ne	jmp	#LR__3198
22ab0     78 2A 0E F2 | 	cmp	local07, #120 wz
22ab4     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
22ab8     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
22abc     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
22ac0     14 00 90 5D |  if_ne	jmp	#LR__3193
22ac4     0F 13 02 F6 | 	mov	arg01, local01
22ac8     10 14 06 F6 | 	mov	arg02, #16
22acc     EC FE BF FD | 	call	#__system____builtin_atoi
22ad0     FD 22 02 F6 | 	mov	local03, result1
22ad4     3C 00 90 FD | 	jmp	#LR__3197
22ad8                 | LR__3193
22ad8     62 2A 0E F2 | 	cmp	local07, #98 wz
22adc     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
22ae0     14 00 90 5D |  if_ne	jmp	#LR__3194
22ae4     0F 13 02 F6 | 	mov	arg01, local01
22ae8     02 14 06 F6 | 	mov	arg02, #2
22aec     CC FE BF FD | 	call	#__system____builtin_atoi
22af0     FD 22 02 F6 | 	mov	local03, result1
22af4     1C 00 90 FD | 	jmp	#LR__3196
22af8                 | LR__3194
22af8     6F 2A 0E F2 | 	cmp	local07, #111 wz
22afc     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
22b00     10 00 90 5D |  if_ne	jmp	#LR__3195
22b04     0F 13 02 F6 | 	mov	arg01, local01
22b08     08 14 06 F6 | 	mov	arg02, #8
22b0c     AC FE BF FD | 	call	#__system____builtin_atoi
22b10     FD 22 02 F6 | 	mov	local03, result1
22b14                 | LR__3195
22b14                 | LR__3196
22b14                 | LR__3197
22b14                 | LR__3198
22b14     00 26 0E F2 | 	cmp	local05, #0 wz
22b18     11 23 62 56 |  if_ne	neg	local03, local03
22b1c     11 FB 01 F6 | 	mov	result1, local03
22b20     A7 F0 03 F6 | 	mov	ptra, fp
22b24     B2 00 A0 FD | 	call	#popregs_
22b28                 | __system____builtin_atoi_ret
22b28     2D 00 64 FD | 	ret
22b2c                 | 
22b2c                 | __system____builtin_atof
22b2c     07 4A 05 F6 | 	mov	COUNT_, #7
22b30     A8 00 A0 FD | 	call	#pushregs_
22b34     09 1F 02 F6 | 	mov	local01, arg01
22b38     00 20 06 F6 | 	mov	local02, #0
22b3c     00 22 06 F6 | 	mov	local03, #0
22b40     00 24 06 F6 | 	mov	local04, #0
22b44     00 26 06 F6 | 	mov	local05, #0
22b48     97 08 48 FB | 	callpa	#(@LR__3201-@LR__3200)>>2,fcache_load_ptr_
22b4c                 | LR__3200
22b4c     0F 17 C2 FA | 	rdbyte	arg03, local01
22b50     20 16 0E F2 | 	cmp	arg03, #32 wz
22b54     01 1E 06 A1 |  if_e	add	local01, #1
22b58     F0 FF 9F AD |  if_e	jmp	#LR__3200
22b5c                 | LR__3201
22b5c     0F 29 C2 FA | 	rdbyte	local06, local01
22b60                 | LR__3202
22b60     2B 28 0E F2 | 	cmp	local06, #43 wz
22b64     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
22b68     14 00 90 5D |  if_ne	jmp	#LR__3203
22b6c     2D 28 0E F2 | 	cmp	local06, #45 wz
22b70     1F 24 E6 A4 |  if_e	bitnot	local04, #31
22b74     01 1E 06 F1 | 	add	local01, #1
22b78     0F 29 C2 FA | 	rdbyte	local06, local01
22b7c     E0 FF 9F FD | 	jmp	#LR__3202
22b80                 | LR__3203
22b80                 | LR__3204
22b80     97 08 48 FB | 	callpa	#(@LR__3206-@LR__3205)>>2,fcache_load_ptr_
22b84                 | LR__3205
22b84     0F 29 C2 FA | 	rdbyte	local06, local01
22b88     5F 28 0E F2 | 	cmp	local06, #95 wz
22b8c     01 1E 06 F1 | 	add	local01, #1
22b90     F0 FF 9F AD |  if_e	jmp	#LR__3205
22b94                 | LR__3206
22b94     00 28 0E F2 | 	cmp	local06, #0 wz
22b98     5C 00 90 AD |  if_e	jmp	#LR__3208
22b9c     30 28 56 F2 | 	cmps	local06, #48 wc
22ba0     44 00 90 CD |  if_b	jmp	#LR__3207
22ba4     3A 28 56 F2 | 	cmps	local06, #58 wc
22ba8     3C 00 90 3D |  if_ae	jmp	#LR__3207
22bac     10 13 02 F6 | 	mov	arg01, local02
22bb0     00 90 20 FF 
22bb4     00 14 06 F6 | 	mov	arg02, ##1092616192
22bb8     88 F7 BF FD | 	call	#__system___float_mul
22bbc     FD 20 02 F6 | 	mov	local02, result1
22bc0     30 28 86 F1 | 	sub	local06, #48
22bc4     14 13 02 F6 | 	mov	arg01, local06
22bc8     74 F3 BF FD | 	call	#__system___float_fromuns
22bcc     FD 14 02 F6 | 	mov	arg02, result1
22bd0     10 13 02 F6 | 	mov	arg01, local02
22bd4     9C F3 BF FD | 	call	#__system___float_add
22bd8     FD 20 02 F6 | 	mov	local02, result1
22bdc     00 26 0E F2 | 	cmp	local05, #0 wz
22be0     01 22 86 51 |  if_ne	sub	local03, #1
22be4     98 FF 9F FD | 	jmp	#LR__3204
22be8                 | LR__3207
22be8     2E 28 0E F2 | 	cmp	local06, #46 wz
22bec     00 26 0E A2 |  if_e	cmp	local05, #0 wz
22bf0     01 26 06 A6 |  if_e	mov	local05, #1
22bf4     88 FF 9F AD |  if_e	jmp	#LR__3204
22bf8                 | LR__3208
22bf8     45 28 0E F2 | 	cmp	local06, #69 wz
22bfc     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
22c00     18 00 90 5D |  if_ne	jmp	#LR__3209
22c04     0F 13 02 F6 | 	mov	arg01, local01
22c08     00 14 06 F6 | 	mov	arg02, #0
22c0c     AC FD BF FD | 	call	#__system____builtin_atoi
22c10     11 FB 01 F1 | 	add	result1, local03
22c14     FD 2A 02 F6 | 	mov	local07, result1
22c18     04 00 90 FD | 	jmp	#LR__3210
22c1c                 | LR__3209
22c1c     11 2B 02 F6 | 	mov	local07, local03
22c20                 | LR__3210
22c20     15 17 02 F6 | 	mov	arg03, local07
22c24     10 13 02 F6 | 	mov	arg01, local02
22c28     00 90 20 FF 
22c2c     00 14 06 F6 | 	mov	arg02, ##1092616192
22c30     F4 06 B0 FD | 	call	#__system___float_pow_n
22c34     12 FB 61 F5 | 	xor	result1, local04
22c38     A7 F0 03 F6 | 	mov	ptra, fp
22c3c     B2 00 A0 FD | 	call	#popregs_
22c40                 | __system____builtin_atof_ret
22c40     2D 00 64 FD | 	ret
22c44                 | 
22c44                 | __system____builtin_ilogb
22c44     20 FC BF FD | 	call	#__system___float_Unpack
22c48     00 FE 0D F2 | 	cmp	result3, #0 wz
22c4c     00 00 40 AF 
22c50     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
22c54     24 00 90 AD |  if_e	jmp	#LR__3221
22c58     80 FC 0D F2 | 	cmp	result2, #128 wz
22c5c     18 00 90 5D |  if_ne	jmp	#LR__3220
22c60     00 00 10 FF 
22c64     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
22c68     1E FA CD A9 |  if_e	bmask	result1, #30
22c6c     0C 00 90 AD |  if_e	jmp	#LR__3221
22c70     1F FA C5 F9 | 	decod	result1, #31
22c74     04 00 90 FD | 	jmp	#LR__3221
22c78                 | LR__3220
22c78     FE FA 01 F6 | 	mov	result1, result2
22c7c                 | LR__3221
22c7c                 | __system____builtin_ilogb_ret
22c7c     2D 00 64 FD | 	ret
22c80                 | 
22c80                 | __system____builtin_sinf
22c80     03 4A 05 F6 | 	mov	COUNT_, #3
22c84     A8 00 A0 FD | 	call	#pushregs_
22c88     09 1F 02 F6 | 	mov	local01, arg01
22c8c     87 64 20 FF 
22c90     DB 15 06 F6 | 	mov	arg02, ##1086918619
22c94     B0 F8 BF FD | 	call	#__system___float_div
22c98     FD 12 02 F6 | 	mov	arg01, result1
22c9c     00 14 06 F6 | 	mov	arg02, #0
22ca0     68 FB BF FD | 	call	#__system___float_tointeger
22ca4     FD 16 0A F6 | 	mov	arg03, result1 wz
22ca8     44 00 90 AD |  if_e	jmp	#LR__3230
22cac     0B 13 52 F6 | 	abs	arg01, arg03 wc
22cb0     1F 20 C6 C9 |  if_b	decod	local02, #31
22cb4     00 20 06 36 |  if_ae	mov	local02, #0
22cb8     84 F2 BF FD | 	call	#__system___float_fromuns
22cbc     10 FB 61 F5 | 	xor	result1, local02
22cc0     FD 12 02 F6 | 	mov	arg01, result1
22cc4     1E 14 C6 F9 | 	decod	arg02, #30
22cc8     78 F6 BF FD | 	call	#__system___float_mul
22ccc     FD 12 02 F6 | 	mov	arg01, result1
22cd0     87 24 20 FF 
22cd4     DB 15 06 F6 | 	mov	arg02, ##1078530011
22cd8     68 F6 BF FD | 	call	#__system___float_mul
22cdc     FD 14 02 F6 | 	mov	arg02, result1
22ce0     0F 13 02 F6 | 	mov	arg01, local01
22ce4     1F 14 E6 F4 | 	bitnot	arg02, #31
22ce8     88 F2 BF FD | 	call	#__system___float_add
22cec     FD 1E 02 F6 | 	mov	local01, result1
22cf0                 | LR__3230
22cf0     0F 13 02 F6 | 	mov	arg01, local01
22cf4     66 E6 1E FF 
22cf8     CD 14 06 F6 | 	mov	arg02, ##1036831949
22cfc     01 16 06 F6 | 	mov	arg03, #1
22d00     74 FA BF FD | 	call	#__system___float_cmp
22d04     00 FA 55 F2 | 	cmps	result1, #0 wc
22d08     5C 00 90 3D |  if_ae	jmp	#LR__3231
22d0c     0F 13 02 F6 | 	mov	arg01, local01
22d10     66 E6 5E FF 
22d14     CD 14 06 F6 | 	mov	arg02, ##-1110651699
22d18     01 16 66 F6 | 	neg	arg03, #1
22d1c     58 FA BF FD | 	call	#__system___float_cmp
22d20     01 FA 55 F2 | 	cmps	result1, #1 wc
22d24     40 00 90 CD |  if_b	jmp	#LR__3231
22d28     0F 13 02 F6 | 	mov	arg01, local01
22d2c     0F 15 02 F6 | 	mov	arg02, local01
22d30     10 F6 BF FD | 	call	#__system___float_mul
22d34     FD 12 02 F6 | 	mov	arg01, result1
22d38     0F 15 02 F6 | 	mov	arg02, local01
22d3c     04 F6 BF FD | 	call	#__system___float_mul
22d40     FD 12 02 F6 | 	mov	arg01, result1
22d44     00 60 20 FF 
22d48     00 14 06 F6 | 	mov	arg02, ##1086324736
22d4c     F8 F7 BF FD | 	call	#__system___float_div
22d50     FD 14 02 F6 | 	mov	arg02, result1
22d54     0F 13 02 F6 | 	mov	arg01, local01
22d58     1F 14 E6 F4 | 	bitnot	arg02, #31
22d5c     14 F2 BF FD | 	call	#__system___float_add
22d60     FD 22 02 F6 | 	mov	local03, result1
22d64     54 00 90 FD | 	jmp	#LR__3232
22d68                 | LR__3231
22d68     0F 13 02 F6 | 	mov	arg01, local01
22d6c     7C 91 26 FF 
22d70     83 15 06 F6 | 	mov	arg02, ##1294137731
22d74     CC F5 BF FD | 	call	#__system___float_mul
22d78     FD 12 02 F6 | 	mov	arg01, result1
22d7c     00 14 06 F6 | 	mov	arg02, #0
22d80     88 FA BF FD | 	call	#__system___float_tointeger
22d84     02 FA 65 F0 | 	shl	result1, #2
22d88     00 00 A0 FF 
22d8c     FD 00 48 FD | 	qrotate	##1073741824, result1
22d90     19 12 62 FD | 	getqy	arg01
22d94     09 13 52 F6 | 	abs	arg01, arg01 wc
22d98     1F 20 C6 C9 |  if_b	decod	local02, #31
22d9c     00 20 06 36 |  if_ae	mov	local02, #0
22da0     9C F1 BF FD | 	call	#__system___float_fromuns
22da4     10 FB 61 F5 | 	xor	result1, local02
22da8     FD 12 02 F6 | 	mov	arg01, result1
22dac     00 40 27 FF 
22db0     00 14 06 F6 | 	mov	arg02, ##1317011456
22db4     90 F7 BF FD | 	call	#__system___float_div
22db8     FD 22 02 F6 | 	mov	local03, result1
22dbc                 | LR__3232
22dbc     11 FB 01 F6 | 	mov	result1, local03
22dc0     A7 F0 03 F6 | 	mov	ptra, fp
22dc4     B2 00 A0 FD | 	call	#popregs_
22dc8                 | __system____builtin_sinf_ret
22dc8     2D 00 64 FD | 	ret
22dcc                 | 
22dcc                 | __system____builtin_tanf
22dcc     02 4A 05 F6 | 	mov	COUNT_, #2
22dd0     A8 00 A0 FD | 	call	#pushregs_
22dd4     09 1F 02 F6 | 	mov	local01, arg01
22dd8     A4 FE BF FD | 	call	#__system____builtin_sinf
22ddc     FD 20 02 F6 | 	mov	local02, result1
22de0     0F 15 02 F6 | 	mov	arg02, local01
22de4     87 E4 1F FF 
22de8     DB 13 06 F6 | 	mov	arg01, ##1070141403
22dec     1F 14 E6 F4 | 	bitnot	arg02, #31
22df0     80 F1 BF FD | 	call	#__system___float_add
22df4     FD 12 02 F6 | 	mov	arg01, result1
22df8     84 FE BF FD | 	call	#__system____builtin_sinf
22dfc     FD 14 02 F6 | 	mov	arg02, result1
22e00     10 13 02 F6 | 	mov	arg01, local02
22e04     40 F7 BF FD | 	call	#__system___float_div
22e08     A7 F0 03 F6 | 	mov	ptra, fp
22e0c     B2 00 A0 FD | 	call	#popregs_
22e10                 | __system____builtin_tanf_ret
22e10     2D 00 64 FD | 	ret
22e14                 | 
22e14                 | __system____builtin_asinf
22e14     01 4A 05 F6 | 	mov	COUNT_, #1
22e18     A8 00 A0 FD | 	call	#pushregs_
22e1c     09 1F 02 F6 | 	mov	local01, arg01
22e20     0F 15 02 F6 | 	mov	arg02, local01
22e24     0F 13 02 F6 | 	mov	arg01, local01
22e28     18 F5 BF FD | 	call	#__system___float_mul
22e2c     FD 14 02 F6 | 	mov	arg02, result1
22e30     00 C0 1F FF 
22e34     00 12 06 F6 | 	mov	arg01, ##1065353216
22e38     1F 14 E6 F4 | 	bitnot	arg02, #31
22e3c     34 F1 BF FD | 	call	#__system___float_add
22e40     FD 12 02 F6 | 	mov	arg01, result1
22e44     24 F4 BF FD | 	call	#__system___float_sqrt
22e48     FD 14 02 F6 | 	mov	arg02, result1
22e4c     0F 13 02 F6 | 	mov	arg01, local01
22e50     58 00 B0 FD | 	call	#__system____builtin_atan2f
22e54     A7 F0 03 F6 | 	mov	ptra, fp
22e58     B2 00 A0 FD | 	call	#popregs_
22e5c                 | __system____builtin_asinf_ret
22e5c     2D 00 64 FD | 	ret
22e60                 | 
22e60                 | __system____builtin_acosf
22e60     01 4A 05 F6 | 	mov	COUNT_, #1
22e64     A8 00 A0 FD | 	call	#pushregs_
22e68     09 1F 02 F6 | 	mov	local01, arg01
22e6c     0F 15 02 F6 | 	mov	arg02, local01
22e70     0F 13 02 F6 | 	mov	arg01, local01
22e74     CC F4 BF FD | 	call	#__system___float_mul
22e78     FD 14 02 F6 | 	mov	arg02, result1
22e7c     00 C0 1F FF 
22e80     00 12 06 F6 | 	mov	arg01, ##1065353216
22e84     1F 14 E6 F4 | 	bitnot	arg02, #31
22e88     E8 F0 BF FD | 	call	#__system___float_add
22e8c     FD 12 02 F6 | 	mov	arg01, result1
22e90     D8 F3 BF FD | 	call	#__system___float_sqrt
22e94     FD 12 02 F6 | 	mov	arg01, result1
22e98     0F 15 02 F6 | 	mov	arg02, local01
22e9c     0C 00 B0 FD | 	call	#__system____builtin_atan2f
22ea0     A7 F0 03 F6 | 	mov	ptra, fp
22ea4     B2 00 A0 FD | 	call	#popregs_
22ea8                 | __system____builtin_acosf_ret
22ea8     2D 00 64 FD | 	ret
22eac                 | 
22eac                 | __system____builtin_atan2f
22eac     04 4A 05 F6 | 	mov	COUNT_, #4
22eb0     A8 00 A0 FD | 	call	#pushregs_
22eb4     09 1F 02 F6 | 	mov	local01, arg01
22eb8     0A 21 02 F6 | 	mov	local02, arg02
22ebc     0F 13 02 F6 | 	mov	arg01, local01
22ec0     00 14 06 F6 | 	mov	arg02, #0
22ec4     01 16 06 F6 | 	mov	arg03, #1
22ec8     AC F8 BF FD | 	call	#__system___float_cmp
22ecc     00 FA 0D F2 | 	cmp	result1, #0 wz
22ed0     28 00 90 5D |  if_ne	jmp	#LR__3240
22ed4     10 13 02 F6 | 	mov	arg01, local02
22ed8     00 14 06 F6 | 	mov	arg02, #0
22edc     01 16 06 F6 | 	mov	arg03, #1
22ee0     94 F8 BF FD | 	call	#__system___float_cmp
22ee4     00 FA 55 F2 | 	cmps	result1, #0 wc
22ee8     87 24 60 CF 
22eec     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
22ef0     DC 00 90 CD |  if_b	jmp	#LR__3241
22ef4     00 FA 05 F6 | 	mov	result1, #0
22ef8     D4 00 90 FD | 	jmp	#LR__3241
22efc                 | LR__3240
22efc     10 13 02 F6 | 	mov	arg01, local02
22f00     10 15 02 F6 | 	mov	arg02, local02
22f04     3C F4 BF FD | 	call	#__system___float_mul
22f08     FD 22 02 F6 | 	mov	local03, result1
22f0c     0F 13 02 F6 | 	mov	arg01, local01
22f10     0F 15 02 F6 | 	mov	arg02, local01
22f14     2C F4 BF FD | 	call	#__system___float_mul
22f18     FD 14 02 F6 | 	mov	arg02, result1
22f1c     11 13 02 F6 | 	mov	arg01, local03
22f20     50 F0 BF FD | 	call	#__system___float_add
22f24     FD 12 02 F6 | 	mov	arg01, result1
22f28     40 F3 BF FD | 	call	#__system___float_sqrt
22f2c     FD 22 02 F6 | 	mov	local03, result1
22f30     10 13 02 F6 | 	mov	arg01, local02
22f34     11 15 02 F6 | 	mov	arg02, local03
22f38     0C F6 BF FD | 	call	#__system___float_div
22f3c     FD 20 02 F6 | 	mov	local02, result1
22f40     0F 13 02 F6 | 	mov	arg01, local01
22f44     11 15 02 F6 | 	mov	arg02, local03
22f48     FC F5 BF FD | 	call	#__system___float_div
22f4c     FD 1E 02 F6 | 	mov	local01, result1
22f50     00 40 27 FF 
22f54     00 12 06 F6 | 	mov	arg01, ##1317011456
22f58     10 15 02 F6 | 	mov	arg02, local02
22f5c     E4 F3 BF FD | 	call	#__system___float_mul
22f60     FD 12 02 F6 | 	mov	arg01, result1
22f64     00 14 06 F6 | 	mov	arg02, #0
22f68     A0 F8 BF FD | 	call	#__system___float_tointeger
22f6c     FD 22 02 F6 | 	mov	local03, result1
22f70     00 40 27 FF 
22f74     00 12 06 F6 | 	mov	arg01, ##1317011456
22f78     0F 15 02 F6 | 	mov	arg02, local01
22f7c     C4 F3 BF FD | 	call	#__system___float_mul
22f80     FD 12 02 F6 | 	mov	arg01, result1
22f84     00 14 06 F6 | 	mov	arg02, #0
22f88     80 F8 BF FD | 	call	#__system___float_tointeger
22f8c     FD 22 52 FD | 	qvector	local03, result1
22f90     87 24 20 FF 
22f94     DB 23 06 F6 | 	mov	local03, ##1078530011
22f98     19 12 62 FD | 	getqy	arg01
22f9c     01 12 C6 F0 | 	sar	arg01, #1
22fa0     09 13 52 F6 | 	abs	arg01, arg01 wc
22fa4     1F 24 C6 C9 |  if_b	decod	local04, #31
22fa8     00 24 06 36 |  if_ae	mov	local04, #0
22fac     90 EF BF FD | 	call	#__system___float_fromuns
22fb0     12 FB 61 F5 | 	xor	result1, local04
22fb4     FD 12 02 F6 | 	mov	arg01, result1
22fb8     00 40 27 FF 
22fbc     00 14 06 F6 | 	mov	arg02, ##1317011456
22fc0     84 F5 BF FD | 	call	#__system___float_div
22fc4     FD 14 02 F6 | 	mov	arg02, result1
22fc8     11 13 02 F6 | 	mov	arg01, local03
22fcc     74 F3 BF FD | 	call	#__system___float_mul
22fd0                 | LR__3241
22fd0     A7 F0 03 F6 | 	mov	ptra, fp
22fd4     B2 00 A0 FD | 	call	#popregs_
22fd8                 | __system____builtin_atan2f_ret
22fd8     2D 00 64 FD | 	ret
22fdc                 | 
22fdc                 | __system____builtin_exp2f
22fdc     04 4A 05 F6 | 	mov	COUNT_, #4
22fe0     A8 00 A0 FD | 	call	#pushregs_
22fe4     09 1F 02 F6 | 	mov	local01, arg01
22fe8     00 7F 21 FF 
22fec     00 14 06 F6 | 	mov	arg02, ##1123942400
22ff0     01 16 66 F6 | 	neg	arg03, #1
22ff4     80 F7 BF FD | 	call	#__system___float_cmp
22ff8     00 FA 55 F2 | 	cmps	result1, #0 wc
22ffc     00 C0 3F 3F 
23000     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
23004     DC 00 90 3D |  if_ae	jmp	#LR__3251
23008     0F 13 02 F6 | 	mov	arg01, local01
2300c     00 7F 61 FF 
23010     00 14 06 F6 | 	mov	arg02, ##-1023541248
23014     01 16 06 F6 | 	mov	arg03, #1
23018     5C F7 BF FD | 	call	#__system___float_cmp
2301c     00 FA 55 F2 | 	cmps	result1, #0 wc
23020     00 FA 05 C6 |  if_b	mov	result1, #0
23024     BC 00 90 CD |  if_b	jmp	#LR__3251
23028     0F 13 02 F6 | 	mov	arg01, local01
2302c     00 14 06 F6 | 	mov	arg02, #0
23030     D8 F7 BF FD | 	call	#__system___float_tointeger
23034     FD 20 02 F6 | 	mov	local02, result1
23038     10 13 52 F6 | 	abs	arg01, local02 wc
2303c     1F 22 C6 C9 |  if_b	decod	local03, #31
23040     00 22 06 36 |  if_ae	mov	local03, #0
23044     F8 EE BF FD | 	call	#__system___float_fromuns
23048     11 FB 61 F5 | 	xor	result1, local03
2304c     FD 14 02 F6 | 	mov	arg02, result1
23050     0F 13 02 F6 | 	mov	arg01, local01
23054     1F 14 E6 F4 | 	bitnot	arg02, #31
23058     18 EF BF FD | 	call	#__system___float_add
2305c     FD 24 02 F6 | 	mov	local04, result1
23060     12 13 02 F6 | 	mov	arg01, local04
23064     00 14 06 F6 | 	mov	arg02, #0
23068     01 16 06 F6 | 	mov	arg03, #1
2306c     08 F7 BF FD | 	call	#__system___float_cmp
23070     00 FA 55 F2 | 	cmps	result1, #0 wc
23074     18 00 90 3D |  if_ae	jmp	#LR__3250
23078     12 13 02 F6 | 	mov	arg01, local04
2307c     00 C0 1F FF 
23080     00 14 06 F6 | 	mov	arg02, ##1065353216
23084     EC EE BF FD | 	call	#__system___float_add
23088     FD 24 02 F6 | 	mov	local04, result1
2308c     01 20 86 F1 | 	sub	local02, #1
23090                 | LR__3250
23090     7F 20 06 F1 | 	add	local02, #127
23094     17 20 66 F0 | 	shl	local02, #23
23098     12 13 02 F6 | 	mov	arg01, local04
2309c     00 80 26 FF 
230a0     00 14 06 F6 | 	mov	arg02, ##1291845632
230a4     9C F2 BF FD | 	call	#__system___float_mul
230a8     FD 12 02 F6 | 	mov	arg01, result1
230ac     00 14 06 F6 | 	mov	arg02, #0
230b0     58 F7 BF FD | 	call	#__system___float_tointeger
230b4     FD 24 0A F6 | 	mov	local04, result1 wz
230b8     10 FB 01 A6 |  if_e	mov	result1, local02
230bc     24 00 90 AD |  if_e	jmp	#LR__3251
230c0     3E 24 26 F4 | 	bith	local04, #62
230c4     0F 24 62 FD | 	qexp	local04
230c8     10 13 02 F6 | 	mov	arg01, local02
230cc     18 14 62 FD | 	getqx	arg02
230d0     01 14 06 F1 | 	add	arg02, #1
230d4     01 14 46 F0 | 	shr	arg02, #1
230d8     00 80 1F FF 
230dc     00 14 06 F1 | 	add	arg02, ##1056964608
230e0     60 F2 BF FD | 	call	#__system___float_mul
230e4                 | LR__3251
230e4     A7 F0 03 F6 | 	mov	ptra, fp
230e8     B2 00 A0 FD | 	call	#popregs_
230ec                 | __system____builtin_exp2f_ret
230ec     2D 00 64 FD | 	ret
230f0                 | 
230f0                 | __system____builtin_log2f
230f0     06 4A 05 F6 | 	mov	COUNT_, #6
230f4     A8 00 A0 FD | 	call	#pushregs_
230f8     09 1F 02 F6 | 	mov	local01, arg01
230fc     09 21 0A F6 | 	mov	local02, arg01 wz
23100     00 00 40 5F 
23104     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
23108     00 40 00 AF 
2310c     00 FA 65 A6 |  if_e	neg	result1, ##8388608
23110     08 01 90 AD |  if_e	jmp	#LR__3264
23114     00 20 56 F2 | 	cmps	local02, #0 wc
23118     00 E0 3F CF 
2311c     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
23120     F8 00 90 CD |  if_b	jmp	#LR__3264
23124     0F 13 02 F6 | 	mov	arg01, local01
23128     00 90 20 FF 
2312c     00 14 06 F6 | 	mov	arg02, ##1092616192
23130     01 16 06 F6 | 	mov	arg03, #1
23134     40 F6 BF FD | 	call	#__system___float_cmp
23138     00 FA 0D F2 | 	cmp	result1, #0 wz
2313c     4D 2A 20 AF 
23140     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
23144     D4 00 90 AD |  if_e	jmp	#LR__3264
23148     0F 13 02 F6 | 	mov	arg01, local01
2314c     FC 16 20 FF 
23150     54 14 06 F6 | 	mov	arg02, ##1076754516
23154     01 16 06 F6 | 	mov	arg03, #1
23158     1C F6 BF FD | 	call	#__system___float_cmp
2315c     00 FA 0D F2 | 	cmp	result1, #0 wz
23160     55 DC 1F AF 
23164     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
23168     B0 00 90 AD |  if_e	jmp	#LR__3264
2316c     10 23 02 F6 | 	mov	local03, local02
23170     17 22 46 F0 | 	shr	local03, #23
23174     11 23 E2 F8 | 	getbyte	local03, local03, #0
23178     17 21 06 F4 | 	bitl	local02, #279
2317c     10 25 02 F6 | 	mov	local04, local02
23180     FF 22 0E F2 | 	cmp	local03, #255 wz
23184     1C 00 90 5D |  if_ne	jmp	#LR__3260
23188     00 24 0E F2 | 	cmp	local04, #0 wz
2318c     00 C0 3F 5F 
23190     00 26 06 56 |  if_ne	mov	local05, ##2139095040
23194     00 E0 3F AF 
23198     00 26 06 A6 |  if_e	mov	local05, ##2143289344
2319c     13 FB 01 F6 | 	mov	result1, local05
231a0     78 00 90 FD | 	jmp	#LR__3264
231a4                 | LR__3260
231a4     00 22 0E F2 | 	cmp	local03, #0 wz
231a8     17 24 26 54 |  if_ne	bith	local04, #23
231ac     7F 22 86 51 |  if_ne	sub	local03, #127
231b0     28 00 90 5D |  if_ne	jmp	#LR__3263
231b4     00 24 0E F2 | 	cmp	local04, #0 wz
231b8     00 40 00 AF 
231bc     00 FA 65 A6 |  if_e	neg	result1, ##8388608
231c0     58 00 90 AD |  if_e	jmp	#LR__3264
231c4     7E 22 66 F6 | 	neg	local03, #126
231c8     97 08 48 FB | 	callpa	#(@LR__3262-@LR__3261)>>2,fcache_load_ptr_
231cc                 | LR__3261
231cc     17 24 2E F4 | 	testbn	local04, #23 wz
231d0     01 24 66 A0 |  if_e	shl	local04, #1
231d4     01 22 06 A1 |  if_e	add	local03, #1
231d8     F0 FF 9F AD |  if_e	jmp	#LR__3261
231dc                 | LR__3262
231dc                 | LR__3263
231dc     0E 24 62 FD | 	qlog	local04
231e0     01 22 86 F1 | 	sub	local03, #1
231e4     11 13 52 F6 | 	abs	arg01, local03 wc
231e8     1F 28 C6 C9 |  if_b	decod	local06, #31
231ec     00 28 06 36 |  if_ae	mov	local06, #0
231f0     18 26 62 FD | 	getqx	local05
231f4     9B 26 06 F4 | 	bitl	local05, #155
231f8     08 26 06 F1 | 	add	local05, #8
231fc     04 26 46 F0 | 	shr	local05, #4
23200     00 C0 1F FF 
23204     00 26 06 F1 | 	add	local05, ##1065353216
23208     34 ED BF FD | 	call	#__system___float_fromuns
2320c     14 FB 61 F5 | 	xor	result1, local06
23210     FD 14 02 F6 | 	mov	arg02, result1
23214     13 13 02 F6 | 	mov	arg01, local05
23218     58 ED BF FD | 	call	#__system___float_add
2321c                 | LR__3264
2321c     A7 F0 03 F6 | 	mov	ptra, fp
23220     B2 00 A0 FD | 	call	#popregs_
23224                 | __system____builtin_log2f_ret
23224     2D 00 64 FD | 	ret
23228                 | 
23228                 | __system____builtin_powf
23228     04 4A 05 F6 | 	mov	COUNT_, #4
2322c     A8 00 A0 FD | 	call	#pushregs_
23230     09 1F 02 F6 | 	mov	local01, arg01
23234     0A 21 02 F6 | 	mov	local02, arg02
23238     10 13 02 F6 | 	mov	arg01, local02
2323c     00 14 06 F6 | 	mov	arg02, #0
23240     C8 F5 BF FD | 	call	#__system___float_tointeger
23244     FD 22 02 F6 | 	mov	local03, result1
23248     11 13 52 F6 | 	abs	arg01, local03 wc
2324c     1F 24 C6 C9 |  if_b	decod	local04, #31
23250     00 24 06 36 |  if_ae	mov	local04, #0
23254     E8 EC BF FD | 	call	#__system___float_fromuns
23258     12 FB 61 F5 | 	xor	result1, local04
2325c     FD 12 02 F6 | 	mov	arg01, result1
23260     10 15 02 F6 | 	mov	arg02, local02
23264     01 16 06 F6 | 	mov	arg03, #1
23268     0C F5 BF FD | 	call	#__system___float_cmp
2326c     00 FA 0D F2 | 	cmp	result1, #0 wz
23270     18 00 90 5D |  if_ne	jmp	#LR__3270
23274     00 C0 1F FF 
23278     00 12 06 F6 | 	mov	arg01, ##1065353216
2327c     0F 15 02 F6 | 	mov	arg02, local01
23280     11 17 02 F6 | 	mov	arg03, local03
23284     A0 00 B0 FD | 	call	#__system___float_pow_n
23288     58 00 90 FD | 	jmp	#LR__3271
2328c                 | LR__3270
2328c     0F 13 02 F6 | 	mov	arg01, local01
23290     00 14 06 F6 | 	mov	arg02, #0
23294     01 16 06 F6 | 	mov	arg03, #1
23298     DC F4 BF FD | 	call	#__system___float_cmp
2329c     00 FA 55 F2 | 	cmps	result1, #0 wc
232a0     00 E0 3F CF 
232a4     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
232a8     38 00 90 CD |  if_b	jmp	#LR__3271
232ac     0F 13 02 F6 | 	mov	arg01, local01
232b0     00 14 06 F6 | 	mov	arg02, #0
232b4     01 16 06 F6 | 	mov	arg03, #1
232b8     BC F4 BF FD | 	call	#__system___float_cmp
232bc     00 FA 0D F2 | 	cmp	result1, #0 wz
232c0     00 FA 05 A6 |  if_e	mov	result1, #0
232c4     1C 00 90 AD |  if_e	jmp	#LR__3271
232c8     0F 13 02 F6 | 	mov	arg01, local01
232cc     20 FE BF FD | 	call	#__system____builtin_log2f
232d0     FD 12 02 F6 | 	mov	arg01, result1
232d4     10 15 02 F6 | 	mov	arg02, local02
232d8     68 F0 BF FD | 	call	#__system___float_mul
232dc     FD 12 02 F6 | 	mov	arg01, result1
232e0     F8 FC BF FD | 	call	#__system____builtin_exp2f
232e4                 | LR__3271
232e4     A7 F0 03 F6 | 	mov	ptra, fp
232e8     B2 00 A0 FD | 	call	#popregs_
232ec                 | __system____builtin_powf_ret
232ec     2D 00 64 FD | 	ret
232f0                 | 
232f0                 | __system____builtin_logbase
232f0     02 4A 05 F6 | 	mov	COUNT_, #2
232f4     A8 00 A0 FD | 	call	#pushregs_
232f8     09 1F 02 F6 | 	mov	local01, arg01
232fc     0A 13 02 F6 | 	mov	arg01, arg02
23300     EC FD BF FD | 	call	#__system____builtin_log2f
23304     FD 20 02 F6 | 	mov	local02, result1
23308     0F 13 02 F6 | 	mov	arg01, local01
2330c     E0 FD BF FD | 	call	#__system____builtin_log2f
23310     FD 14 02 F6 | 	mov	arg02, result1
23314     10 13 02 F6 | 	mov	arg01, local02
23318     2C F2 BF FD | 	call	#__system___float_div
2331c     A7 F0 03 F6 | 	mov	ptra, fp
23320     B2 00 A0 FD | 	call	#popregs_
23324                 | __system____builtin_logbase_ret
23324     2D 00 64 FD | 	ret
23328                 | 
23328                 | __system___float_pow_n
23328     05 4A 05 F6 | 	mov	COUNT_, #5
2332c     A8 00 A0 FD | 	call	#pushregs_
23330     09 1F 02 F6 | 	mov	local01, arg01
23334     0A 21 02 F6 | 	mov	local02, arg02
23338     0B 23 02 F6 | 	mov	local03, arg03
2333c     00 22 56 F2 | 	cmps	local03, #0 wc
23340     18 00 90 3D |  if_ae	jmp	#LR__3280
23344     01 24 06 F6 | 	mov	local04, #1
23348     11 23 62 F6 | 	neg	local03, local03
2334c     00 22 56 F2 | 	cmps	local03, #0 wc
23350     00 FA 05 C6 |  if_b	mov	result1, #0
23354     94 00 90 CD |  if_b	jmp	#LR__3288
23358     04 00 90 FD | 	jmp	#LR__3281
2335c                 | LR__3280
2335c     00 24 06 F6 | 	mov	local04, #0
23360                 | LR__3281
23360     00 C0 1F FF 
23364     00 26 06 F6 | 	mov	local05, ##1065353216
23368                 | LR__3282
23368     01 22 56 F2 | 	cmps	local03, #1 wc
2336c     30 00 90 CD |  if_b	jmp	#LR__3284
23370     01 22 CE F7 | 	test	local03, #1 wz
23374     10 00 90 AD |  if_e	jmp	#LR__3283
23378     13 13 02 F6 | 	mov	arg01, local05
2337c     10 15 02 F6 | 	mov	arg02, local02
23380     C0 EF BF FD | 	call	#__system___float_mul
23384     FD 26 02 F6 | 	mov	local05, result1
23388                 | LR__3283
23388     01 22 C6 F0 | 	sar	local03, #1
2338c     10 13 02 F6 | 	mov	arg01, local02
23390     10 15 02 F6 | 	mov	arg02, local02
23394     AC EF BF FD | 	call	#__system___float_mul
23398     FD 20 02 F6 | 	mov	local02, result1
2339c     C8 FF 9F FD | 	jmp	#LR__3282
233a0                 | LR__3284
233a0     00 24 0E F2 | 	cmp	local04, #0 wz
233a4     14 00 90 AD |  if_e	jmp	#LR__3285
233a8     0F 13 02 F6 | 	mov	arg01, local01
233ac     13 15 02 F6 | 	mov	arg02, local05
233b0     94 F1 BF FD | 	call	#__system___float_div
233b4     FD 26 02 F6 | 	mov	local05, result1
233b8     2C 00 90 FD | 	jmp	#LR__3287
233bc                 | LR__3285
233bc     0F 13 02 F6 | 	mov	arg01, local01
233c0     00 C0 1F FF 
233c4     00 14 06 F6 | 	mov	arg02, ##1065353216
233c8     01 16 06 F6 | 	mov	arg03, #1
233cc     A8 F3 BF FD | 	call	#__system___float_cmp
233d0     00 FA 0D F2 | 	cmp	result1, #0 wz
233d4     10 00 90 AD |  if_e	jmp	#LR__3286
233d8     0F 13 02 F6 | 	mov	arg01, local01
233dc     13 15 02 F6 | 	mov	arg02, local05
233e0     60 EF BF FD | 	call	#__system___float_mul
233e4     FD 26 02 F6 | 	mov	local05, result1
233e8                 | LR__3286
233e8                 | LR__3287
233e8     13 FB 01 F6 | 	mov	result1, local05
233ec                 | LR__3288
233ec     A7 F0 03 F6 | 	mov	ptra, fp
233f0     B2 00 A0 FD | 	call	#popregs_
233f4                 | __system___float_pow_n_ret
233f4     2D 00 64 FD | 	ret
233f8                 | 
233f8                 | __system___gc_ptrs
233f8     EC 00 02 F6 | 	mov	_var01, __heap_ptr
233fc     00 03 02 F6 | 	mov	_var02, _var01
23400     76 01 00 FF 
23404     F8 03 06 F1 | 	add	_var02, ##191992
23408     00 FD 09 FB | 	rdlong	result2, _var01 wz
2340c     74 00 90 5D |  if_ne	jmp	#LR__3290
23410     01 FD 01 F6 | 	mov	result2, _var02
23414     00 FD 81 F1 | 	sub	result2, _var01
23418     00 03 58 FC | 	wrword	#1, _var01
2341c     00 FB 01 F6 | 	mov	result1, _var01
23420     02 FA 05 F1 | 	add	result1, #2
23424     36 00 80 FF 
23428     FD 20 59 FC | 	wrword	##27792, result1
2342c     00 FB 01 F6 | 	mov	result1, _var01
23430     04 FA 05 F1 | 	add	result1, #4
23434     FD 00 58 FC | 	wrword	#0, result1
23438     00 FB 01 F6 | 	mov	result1, _var01
2343c     06 FA 05 F1 | 	add	result1, #6
23440     FD 02 58 FC | 	wrword	#1, result1
23444     10 00 06 F1 | 	add	_var01, #16
23448     FE FC 51 F6 | 	abs	result2, result2 wc
2344c     04 FC 45 F0 | 	shr	result2, #4
23450     FE FC 81 F6 | 	negc	result2, result2
23454     00 FD 51 FC | 	wrword	result2, _var01
23458     00 FD 01 F6 | 	mov	result2, _var01
2345c     02 FC 05 F1 | 	add	result2, #2
23460     36 00 80 FF 
23464     FE 1E 59 FC | 	wrword	##27791, result2
23468     00 FD 01 F6 | 	mov	result2, _var01
2346c     04 FC 05 F1 | 	add	result2, #4
23470     FE 00 58 FC | 	wrword	#0, result2
23474     00 FD 01 F6 | 	mov	result2, _var01
23478     06 FC 05 F1 | 	add	result2, #6
2347c     FE 00 58 FC | 	wrword	#0, result2
23480     10 00 86 F1 | 	sub	_var01, #16
23484                 | LR__3290
23484     00 FB 01 F6 | 	mov	result1, _var01
23488     01 FD 01 F6 | 	mov	result2, _var02
2348c                 | __system___gc_ptrs_ret
2348c     2D 00 64 FD | 	ret
23490                 | 
23490                 | __system___gc_tryalloc
23490     0B 4A 05 F6 | 	mov	COUNT_, #11
23494     A8 00 A0 FD | 	call	#pushregs_
23498     09 1F 02 F6 | 	mov	local01, arg01
2349c     0A 21 02 F6 | 	mov	local02, arg02
234a0     54 FF BF FD | 	call	#__system___gc_ptrs
234a4     FD 22 02 F6 | 	mov	local03, result1
234a8     FE 24 02 F6 | 	mov	local04, result2
234ac     11 27 02 F6 | 	mov	local05, local03
234b0     00 28 06 F6 | 	mov	local06, #0
234b4     97 1E 48 FB | 	callpa	#(@LR__3301-@LR__3300)>>2,fcache_load_ptr_
234b8                 | LR__3300
234b8     13 2B 02 F6 | 	mov	local07, local05
234bc     06 26 06 F1 | 	add	local05, #6
234c0     13 15 EA FA | 	rdword	arg02, local05 wz
234c4     11 13 02 F6 | 	mov	arg01, local03
234c8     00 FA 05 A6 |  if_e	mov	result1, #0
234cc     04 14 66 50 |  if_ne	shl	arg02, #4
234d0     0A 13 02 51 |  if_ne	add	arg01, arg02
234d4     09 FB 01 56 |  if_ne	mov	result1, arg01
234d8     FD 26 0A F6 | 	mov	local05, result1 wz
234dc     13 29 E2 5A |  if_ne	rdword	local06, local05
234e0     00 26 0E F2 | 	cmp	local05, #0 wz
234e4     12 27 52 52 |  if_ne	cmps	local05, local04 wc
234e8     08 00 90 1D |  if_a	jmp	#LR__3302
234ec     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
234f0     C4 FF 9F 1D |  if_a	jmp	#LR__3300
234f4                 | LR__3301
234f4                 | LR__3302
234f4     00 26 0E F2 | 	cmp	local05, #0 wz
234f8     13 FB 01 A6 |  if_e	mov	result1, local05
234fc     3C 01 90 AD |  if_e	jmp	#LR__3305
23500     13 FD 01 F6 | 	mov	result2, local05
23504     06 FC 05 F1 | 	add	result2, #6
23508     FE 2C E2 FA | 	rdword	local08, result2
2350c     14 1F 52 F2 | 	cmps	local01, local06 wc
23510     C0 00 90 3D |  if_ae	jmp	#LR__3304
23514     13 1F 52 FC | 	wrword	local01, local05
23518     13 13 02 F6 | 	mov	arg01, local05
2351c     0F 2D 02 F6 | 	mov	local08, local01
23520     04 2C 66 F0 | 	shl	local08, #4
23524     16 13 02 F1 | 	add	arg01, local08
23528     0F 29 82 F1 | 	sub	local06, local01
2352c     09 29 52 FC | 	wrword	local06, arg01
23530     09 2D 02 F6 | 	mov	local08, arg01
23534     02 2C 06 F1 | 	add	local08, #2
23538     36 00 80 FF 
2353c     16 1F 59 FC | 	wrword	##27791, local08
23540     13 15 0A F6 | 	mov	arg02, local05 wz
23544     00 FA 05 A6 |  if_e	mov	result1, #0
23548     11 15 82 51 |  if_ne	sub	arg02, local03
2354c     04 14 46 50 |  if_ne	shr	arg02, #4
23550     0A FB 01 56 |  if_ne	mov	result1, arg02
23554     09 2D 02 F6 | 	mov	local08, arg01
23558     04 2C 06 F1 | 	add	local08, #4
2355c     16 FB 51 FC | 	wrword	result1, local08
23560     13 2D 02 F6 | 	mov	local08, local05
23564     06 2C 06 F1 | 	add	local08, #6
23568     09 15 02 F6 | 	mov	arg02, arg01
2356c     16 2D E2 FA | 	rdword	local08, local08
23570     06 14 06 F1 | 	add	arg02, #6
23574     0A 2D 52 FC | 	wrword	local08, arg02
23578     09 2F 02 F6 | 	mov	local09, arg01
2357c     17 15 0A F6 | 	mov	arg02, local09 wz
23580     00 FA 05 A6 |  if_e	mov	result1, #0
23584     11 15 82 51 |  if_ne	sub	arg02, local03
23588     04 14 46 50 |  if_ne	shr	arg02, #4
2358c     0A FB 01 56 |  if_ne	mov	result1, arg02
23590     FD 2C 02 F6 | 	mov	local08, result1
23594     09 31 EA FA | 	rdword	local10, arg01 wz
23598     00 FA 05 A6 |  if_e	mov	result1, #0
2359c     04 30 66 50 |  if_ne	shl	local10, #4
235a0     18 13 02 51 |  if_ne	add	arg01, local10
235a4     09 FB 01 56 |  if_ne	mov	result1, arg01
235a8     FD 32 0A F6 | 	mov	local11, result1 wz
235ac     24 00 90 AD |  if_e	jmp	#LR__3303
235b0     12 33 52 F2 | 	cmps	local11, local04 wc
235b4     1C 00 90 3D |  if_ae	jmp	#LR__3303
235b8     17 15 0A F6 | 	mov	arg02, local09 wz
235bc     00 FA 05 A6 |  if_e	mov	result1, #0
235c0     11 15 82 51 |  if_ne	sub	arg02, local03
235c4     04 14 46 50 |  if_ne	shr	arg02, #4
235c8     0A FB 01 56 |  if_ne	mov	result1, arg02
235cc     04 32 06 F1 | 	add	local11, #4
235d0     19 FB 51 FC | 	wrword	result1, local11
235d4                 | LR__3303
235d4                 | LR__3304
235d4     06 2A 06 F1 | 	add	local07, #6
235d8     15 2D 52 FC | 	wrword	local08, local07
235dc     36 00 00 FF 
235e0     80 2E 06 F6 | 	mov	local09, ##27776
235e4     10 2F 42 F5 | 	or	local09, local02
235e8     00 FA 05 F6 | 	mov	result1, #0
235ec     01 FA 61 FD | 	cogid	result1
235f0     FD 2E 42 F5 | 	or	local09, result1
235f4     13 33 02 F6 | 	mov	local11, local05
235f8     02 32 06 F1 | 	add	local11, #2
235fc     19 2F 52 FC | 	wrword	local09, local11
23600     11 2F 02 F6 | 	mov	local09, local03
23604     08 2E 06 F1 | 	add	local09, #8
23608     13 33 02 F6 | 	mov	local11, local05
2360c     17 2F E2 FA | 	rdword	local09, local09
23610     06 32 06 F1 | 	add	local11, #6
23614     19 2F 52 FC | 	wrword	local09, local11
23618     13 15 0A F6 | 	mov	arg02, local05 wz
2361c     00 FA 05 A6 |  if_e	mov	result1, #0
23620     11 15 82 51 |  if_ne	sub	arg02, local03
23624     04 14 46 50 |  if_ne	shr	arg02, #4
23628     0A FB 01 56 |  if_ne	mov	result1, arg02
2362c     08 22 06 F1 | 	add	local03, #8
23630     11 FB 51 FC | 	wrword	result1, local03
23634     08 26 06 F1 | 	add	local05, #8
23638     13 FB 01 F6 | 	mov	result1, local05
2363c                 | LR__3305
2363c     A7 F0 03 F6 | 	mov	ptra, fp
23640     B2 00 A0 FD | 	call	#popregs_
23644                 | __system___gc_tryalloc_ret
23644     2D 00 64 FD | 	ret
23648                 | 
23648                 | __system___gc_alloc_managed
23648     01 4A 05 F6 | 	mov	COUNT_, #1
2364c     A8 00 A0 FD | 	call	#pushregs_
23650     09 1F 02 F6 | 	mov	local01, arg01
23654     00 14 06 F6 | 	mov	arg02, #0
23658     1C 00 B0 FD | 	call	#__system___gc_doalloc
2365c     FD 14 0A F6 | 	mov	arg02, result1 wz
23660     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
23664     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
23668     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
2366c     A7 F0 03 F6 | 	mov	ptra, fp
23670     B2 00 A0 FD | 	call	#popregs_
23674                 | __system___gc_alloc_managed_ret
23674     2D 00 64 FD | 	ret
23678                 | 
23678                 | __system___gc_doalloc
23678     06 4A 05 F6 | 	mov	COUNT_, #6
2367c     A8 00 A0 FD | 	call	#pushregs_
23680     09 1F 0A F6 | 	mov	local01, arg01 wz
23684     0A 21 02 F6 | 	mov	local02, arg02
23688     00 FA 05 A6 |  if_e	mov	result1, #0
2368c     8C 00 90 AD |  if_e	jmp	#LR__3317
23690     17 1E 06 F1 | 	add	local01, #23
23694     0F 1E 26 F5 | 	andn	local01, #15
23698     04 1E 46 F0 | 	shr	local01, #4
2369c     1C E6 05 F1 | 	add	ptr___system__dat__, #28
236a0     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
236a4     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
236a8     50 C1 BF FD | 	call	#__system___lockmem
236ac     0F 13 02 F6 | 	mov	arg01, local01
236b0     10 15 02 F6 | 	mov	arg02, local02
236b4     D8 FD BF FD | 	call	#__system___gc_tryalloc
236b8     FD 22 0A F6 | 	mov	local03, result1 wz
236bc     14 00 90 5D |  if_ne	jmp	#LR__3310
236c0     70 03 B0 FD | 	call	#__system___gc_docollect
236c4     0F 13 02 F6 | 	mov	arg01, local01
236c8     10 15 02 F6 | 	mov	arg02, local02
236cc     C0 FD BF FD | 	call	#__system___gc_tryalloc
236d0     FD 22 02 F6 | 	mov	local03, result1
236d4                 | LR__3310
236d4     1C E6 05 F1 | 	add	ptr___system__dat__, #28
236d8     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
236dc     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
236e0     09 01 68 FC | 	wrlong	#0, arg01
236e4     00 22 0E F2 | 	cmp	local03, #0 wz
236e8     2C 00 90 AD |  if_e	jmp	#LR__3316
236ec     04 1E 66 F0 | 	shl	local01, #4
236f0     08 1E 86 F1 | 	sub	local01, #8
236f4     0F 25 52 F6 | 	abs	local04, local01 wc
236f8     02 24 46 F0 | 	shr	local04, #2
236fc     12 27 8A F6 | 	negc	local05, local04 wz
23700     11 29 02 F6 | 	mov	local06, local03
23704     10 00 90 AD |  if_e	jmp	#LR__3315
23708     97 06 48 FB | 	callpa	#(@LR__3313-@LR__3311)>>2,fcache_load_ptr_
2370c                 | LR__3311
2370c     13 05 D8 FC | 	rep	@LR__3314, local05
23710                 | LR__3312
23710     14 01 68 FC | 	wrlong	#0, local06
23714     04 28 06 F1 | 	add	local06, #4
23718                 | LR__3313
23718                 | LR__3314
23718                 | LR__3315
23718                 | LR__3316
23718     11 FB 01 F6 | 	mov	result1, local03
2371c                 | LR__3317
2371c     A7 F0 03 F6 | 	mov	ptra, fp
23720     B2 00 A0 FD | 	call	#popregs_
23724                 | __system___gc_doalloc_ret
23724     2D 00 64 FD | 	ret
23728                 | 
23728                 | __system___gc_isvalidptr
23728     F8 16 06 F4 | 	bitl	arg03, #248
2372c     08 16 86 F1 | 	sub	arg03, #8
23730     09 17 52 F2 | 	cmps	arg03, arg01 wc
23734     08 00 90 CD |  if_b	jmp	#LR__3320
23738     0A 17 52 F2 | 	cmps	arg03, arg02 wc
2373c     08 00 90 CD |  if_b	jmp	#LR__3321
23740                 | LR__3320
23740     00 FA 05 F6 | 	mov	result1, #0
23744     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
23748                 | LR__3321
23748     0B 01 02 F6 | 	mov	_var01, arg03
2374c     09 01 62 F5 | 	xor	_var01, arg01
23750     0F 00 CE F7 | 	test	_var01, #15 wz
23754     00 FA 05 56 |  if_ne	mov	result1, #0
23758     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
2375c     0B 01 02 F6 | 	mov	_var01, arg03
23760     02 00 06 F1 | 	add	_var01, #2
23764     00 01 E2 FA | 	rdword	_var01, _var01
23768     7F 00 00 FF 
2376c     C0 01 06 F5 | 	and	_var01, ##65472
23770     36 00 00 FF 
23774     80 00 0E F2 | 	cmp	_var01, ##27776 wz
23778     00 FA 05 56 |  if_ne	mov	result1, #0
2377c     0B FB 01 A6 |  if_e	mov	result1, arg03
23780                 | __system___gc_isvalidptr_ret
23780     2D 00 64 FD | 	ret
23784                 | 
23784                 | __system___gc_free
23784     09 17 02 F6 | 	mov	arg03, arg01
23788     6C FC BF FD | 	call	#__system___gc_ptrs
2378c     FD 12 02 F6 | 	mov	arg01, result1
23790     FE 14 02 F6 | 	mov	arg02, result2
23794     90 FF BF FD | 	call	#__system___gc_isvalidptr
23798     FD 14 0A F6 | 	mov	arg02, result1 wz
2379c     28 00 90 AD |  if_e	jmp	#LR__3330
237a0     1C E6 05 F1 | 	add	ptr___system__dat__, #28
237a4     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
237a8     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
237ac     4C C0 BF FD | 	call	#__system___lockmem
237b0     0A 13 02 F6 | 	mov	arg01, arg02
237b4     14 00 B0 FD | 	call	#__system___gc_dofree
237b8     1C E6 05 F1 | 	add	ptr___system__dat__, #28
237bc     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
237c0     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
237c4     09 01 68 FC | 	wrlong	#0, arg01
237c8                 | LR__3330
237c8                 | __system___gc_free_ret
237c8     2D 00 64 FD | 	ret
237cc                 | 
237cc                 | __system___gc_dofree
237cc     06 4A 05 F6 | 	mov	COUNT_, #6
237d0     A8 00 A0 FD | 	call	#pushregs_
237d4     09 1F 02 F6 | 	mov	local01, arg01
237d8     1C FC BF FD | 	call	#__system___gc_ptrs
237dc     FD 20 02 F6 | 	mov	local02, result1
237e0     FE 22 02 F6 | 	mov	local03, result2
237e4     0F 15 02 F6 | 	mov	arg02, local01
237e8     02 14 06 F1 | 	add	arg02, #2
237ec     36 00 80 FF 
237f0     0A 1F 59 FC | 	wrword	##27791, arg02
237f4     0F 25 02 F6 | 	mov	local04, local01
237f8     0F 13 02 F6 | 	mov	arg01, local01
237fc     09 27 EA FA | 	rdword	local05, arg01 wz
23800     00 FA 05 A6 |  if_e	mov	result1, #0
23804     04 26 66 50 |  if_ne	shl	local05, #4
23808     13 13 02 51 |  if_ne	add	arg01, local05
2380c     09 FB 01 56 |  if_ne	mov	result1, arg01
23810     FD 28 02 F6 | 	mov	local06, result1
23814     97 24 48 FB | 	callpa	#(@LR__3341-@LR__3340)>>2,fcache_load_ptr_
23818                 | LR__3340
23818     04 24 06 F1 | 	add	local04, #4
2381c     12 15 EA FA | 	rdword	arg02, local04 wz
23820     10 13 02 F6 | 	mov	arg01, local02
23824     00 FA 05 A6 |  if_e	mov	result1, #0
23828     04 14 66 50 |  if_ne	shl	arg02, #4
2382c     0A 13 02 51 |  if_ne	add	arg01, arg02
23830     09 FB 01 56 |  if_ne	mov	result1, arg01
23834     FD 24 0A F6 | 	mov	local04, result1 wz
23838     24 00 90 AD |  if_e	jmp	#LR__3342
2383c     12 13 02 F6 | 	mov	arg01, local04
23840     00 FA 05 F6 | 	mov	result1, #0
23844     02 12 06 F1 | 	add	arg01, #2
23848     09 13 E2 FA | 	rdword	arg01, arg01
2384c     36 00 00 FF 
23850     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
23854     01 FA 65 A6 |  if_e	neg	result1, #1
23858     00 FA 0D F2 | 	cmp	result1, #0 wz
2385c     B8 FF 9F AD |  if_e	jmp	#LR__3340
23860                 | LR__3341
23860                 | LR__3342
23860     00 24 0E F2 | 	cmp	local04, #0 wz
23864     10 25 02 A6 |  if_e	mov	local04, local02
23868     12 15 02 F6 | 	mov	arg02, local04
2386c     06 14 06 F1 | 	add	arg02, #6
23870     0F 13 02 F6 | 	mov	arg01, local01
23874     0A 15 E2 FA | 	rdword	arg02, arg02
23878     06 12 06 F1 | 	add	arg01, #6
2387c     09 15 52 FC | 	wrword	arg02, arg01
23880     0F 15 0A F6 | 	mov	arg02, local01 wz
23884     00 FA 05 A6 |  if_e	mov	result1, #0
23888     10 15 82 51 |  if_ne	sub	arg02, local02
2388c     04 14 46 50 |  if_ne	shr	arg02, #4
23890     0A FB 01 56 |  if_ne	mov	result1, arg02
23894     12 15 02 F6 | 	mov	arg02, local04
23898     06 14 06 F1 | 	add	arg02, #6
2389c     0A FB 51 FC | 	wrword	result1, arg02
238a0     10 25 0A F2 | 	cmp	local04, local02 wz
238a4     A4 00 90 AD |  if_e	jmp	#LR__3345
238a8     12 13 02 F6 | 	mov	arg01, local04
238ac     09 27 EA FA | 	rdword	local05, arg01 wz
238b0     00 FA 05 A6 |  if_e	mov	result1, #0
238b4     04 26 66 50 |  if_ne	shl	local05, #4
238b8     13 13 02 51 |  if_ne	add	arg01, local05
238bc     09 FB 01 56 |  if_ne	mov	result1, arg01
238c0     0F FB 09 F2 | 	cmp	result1, local01 wz
238c4     84 00 90 5D |  if_ne	jmp	#LR__3344
238c8     12 29 E2 FA | 	rdword	local06, local04
238cc     0F 15 E2 FA | 	rdword	arg02, local01
238d0     0A 29 02 F1 | 	add	local06, arg02
238d4     12 29 52 FC | 	wrword	local06, local04
238d8     0F 29 02 F6 | 	mov	local06, local01
238dc     02 28 06 F1 | 	add	local06, #2
238e0     14 01 58 FC | 	wrword	#0, local06
238e4     0F 13 02 F6 | 	mov	arg01, local01
238e8     09 27 EA FA | 	rdword	local05, arg01 wz
238ec     00 FA 05 A6 |  if_e	mov	result1, #0
238f0     04 26 66 50 |  if_ne	shl	local05, #4
238f4     13 13 02 51 |  if_ne	add	arg01, local05
238f8     09 FB 01 56 |  if_ne	mov	result1, arg01
238fc     FD 28 02 F6 | 	mov	local06, result1
23900     11 29 52 F2 | 	cmps	local06, local03 wc
23904     20 00 90 3D |  if_ae	jmp	#LR__3343
23908     12 15 0A F6 | 	mov	arg02, local04 wz
2390c     00 FA 05 A6 |  if_e	mov	result1, #0
23910     10 15 82 51 |  if_ne	sub	arg02, local02
23914     04 14 46 50 |  if_ne	shr	arg02, #4
23918     0A FB 01 56 |  if_ne	mov	result1, arg02
2391c     14 15 02 F6 | 	mov	arg02, local06
23920     04 14 06 F1 | 	add	arg02, #4
23924     0A FB 51 FC | 	wrword	result1, arg02
23928                 | LR__3343
23928     0F 15 02 F6 | 	mov	arg02, local01
2392c     06 14 06 F1 | 	add	arg02, #6
23930     12 FD 01 F6 | 	mov	result2, local04
23934     0A 15 E2 FA | 	rdword	arg02, arg02
23938     06 FC 05 F1 | 	add	result2, #6
2393c     FE 14 52 FC | 	wrword	arg02, result2
23940     06 1E 06 F1 | 	add	local01, #6
23944     0F 01 58 FC | 	wrword	#0, local01
23948     12 1F 02 F6 | 	mov	local01, local04
2394c                 | LR__3344
2394c                 | LR__3345
2394c     0F 13 02 F6 | 	mov	arg01, local01
23950     09 27 EA FA | 	rdword	local05, arg01 wz
23954     00 FA 05 A6 |  if_e	mov	result1, #0
23958     04 26 66 50 |  if_ne	shl	local05, #4
2395c     13 13 02 51 |  if_ne	add	arg01, local05
23960     09 FB 01 56 |  if_ne	mov	result1, arg01
23964     FD 14 0A F6 | 	mov	arg02, result1 wz
23968     B8 00 90 AD |  if_e	jmp	#LR__3347
2396c     11 15 52 F2 | 	cmps	arg02, local03 wc
23970     B0 00 90 3D |  if_ae	jmp	#LR__3347
23974     0A 13 02 F6 | 	mov	arg01, arg02
23978     00 FA 05 F6 | 	mov	result1, #0
2397c     02 12 06 F1 | 	add	arg01, #2
23980     09 13 E2 FA | 	rdword	arg01, arg01
23984     36 00 00 FF 
23988     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2398c     01 FA 65 A6 |  if_e	neg	result1, #1
23990     00 FA 0D F2 | 	cmp	result1, #0 wz
23994     8C 00 90 AD |  if_e	jmp	#LR__3347
23998     0F 25 02 F6 | 	mov	local04, local01
2399c     12 29 E2 FA | 	rdword	local06, local04
239a0     0A 13 02 F6 | 	mov	arg01, arg02
239a4     09 1F E2 FA | 	rdword	local01, arg01
239a8     0F 29 02 F1 | 	add	local06, local01
239ac     12 29 52 FC | 	wrword	local06, local04
239b0     09 29 02 F6 | 	mov	local06, arg01
239b4     06 28 06 F1 | 	add	local06, #6
239b8     12 1F 02 F6 | 	mov	local01, local04
239bc     14 29 E2 FA | 	rdword	local06, local06
239c0     06 1E 06 F1 | 	add	local01, #6
239c4     0F 29 52 FC | 	wrword	local06, local01
239c8     09 29 02 F6 | 	mov	local06, arg01
239cc     02 28 06 F1 | 	add	local06, #2
239d0     14 55 59 FC | 	wrword	#170, local06
239d4     09 29 02 F6 | 	mov	local06, arg01
239d8     06 28 06 F1 | 	add	local06, #6
239dc     14 01 58 FC | 	wrword	#0, local06
239e0     09 27 EA FA | 	rdword	local05, arg01 wz
239e4     00 FA 05 A6 |  if_e	mov	result1, #0
239e8     04 26 66 50 |  if_ne	shl	local05, #4
239ec     13 13 02 51 |  if_ne	add	arg01, local05
239f0     09 FB 01 56 |  if_ne	mov	result1, arg01
239f4     FD 28 0A F6 | 	mov	local06, result1 wz
239f8     28 00 90 AD |  if_e	jmp	#LR__3346
239fc     11 29 52 F2 | 	cmps	local06, local03 wc
23a00     20 00 90 3D |  if_ae	jmp	#LR__3346
23a04     12 15 0A F6 | 	mov	arg02, local04 wz
23a08     00 FA 05 A6 |  if_e	mov	result1, #0
23a0c     10 15 82 51 |  if_ne	sub	arg02, local02
23a10     04 14 46 50 |  if_ne	shr	arg02, #4
23a14     0A FB 01 56 |  if_ne	mov	result1, arg02
23a18     14 25 02 F6 | 	mov	local04, local06
23a1c     04 24 06 F1 | 	add	local04, #4
23a20     12 FB 51 FC | 	wrword	result1, local04
23a24                 | LR__3346
23a24                 | LR__3347
23a24     14 FB 01 F6 | 	mov	result1, local06
23a28     A7 F0 03 F6 | 	mov	ptra, fp
23a2c     B2 00 A0 FD | 	call	#popregs_
23a30                 | __system___gc_dofree_ret
23a30     2D 00 64 FD | 	ret
23a34                 | 
23a34                 | __system___gc_docollect
23a34     05 4A 05 F6 | 	mov	COUNT_, #5
23a38     A8 00 A0 FD | 	call	#pushregs_
23a3c     B8 F9 BF FD | 	call	#__system___gc_ptrs
23a40     FE 1E 02 F6 | 	mov	local01, result2
23a44     FD 20 02 F6 | 	mov	local02, result1
23a48     10 13 02 F6 | 	mov	arg01, local02
23a4c     09 23 EA FA | 	rdword	local03, arg01 wz
23a50     00 FA 05 A6 |  if_e	mov	result1, #0
23a54     04 22 66 50 |  if_ne	shl	local03, #4
23a58     11 13 02 51 |  if_ne	add	arg01, local03
23a5c     09 FB 01 56 |  if_ne	mov	result1, arg01
23a60     FD 24 0A F6 | 	mov	local04, result1 wz
23a64     00 FA 05 F6 | 	mov	result1, #0
23a68     01 FA 61 FD | 	cogid	result1
23a6c     FD 26 02 F6 | 	mov	local05, result1
23a70     48 00 90 AD |  if_e	jmp	#LR__3352
23a74     97 22 48 FB | 	callpa	#(@LR__3351-@LR__3350)>>2,fcache_load_ptr_
23a78                 | LR__3350
23a78     0F 25 52 F2 | 	cmps	local04, local01 wc
23a7c     3C 00 90 3D |  if_ae	jmp	#LR__3352
23a80     12 15 02 F6 | 	mov	arg02, local04
23a84     02 14 06 F1 | 	add	arg02, #2
23a88     0A 15 E2 FA | 	rdword	arg02, arg02
23a8c     20 14 26 F5 | 	andn	arg02, #32
23a90     12 13 02 F6 | 	mov	arg01, local04
23a94     02 12 06 F1 | 	add	arg01, #2
23a98     09 15 52 FC | 	wrword	arg02, arg01
23a9c     12 13 02 F6 | 	mov	arg01, local04
23aa0     09 23 EA FA | 	rdword	local03, arg01 wz
23aa4     00 FA 05 A6 |  if_e	mov	result1, #0
23aa8     04 22 66 50 |  if_ne	shl	local03, #4
23aac     11 13 02 51 |  if_ne	add	arg01, local03
23ab0     09 FB 01 56 |  if_ne	mov	result1, arg01
23ab4     FD 24 0A F6 | 	mov	local04, result1 wz
23ab8     BC FF 9F 5D |  if_ne	jmp	#LR__3350
23abc                 | LR__3351
23abc                 | LR__3352
23abc     00 22 06 F6 | 	mov	local03, #0
23ac0     00 12 06 F6 | 	mov	arg01, #0
23ac4     0C BD BF FD | 	call	#__system____topofstack
23ac8     FD 14 02 F6 | 	mov	arg02, result1
23acc     11 13 02 F6 | 	mov	arg01, local03
23ad0     90 00 B0 FD | 	call	#__system___gc_markhub
23ad4     1C 01 B0 FD | 	call	#__system___gc_markcog
23ad8     10 13 02 F6 | 	mov	arg01, local02
23adc     09 23 EA FA | 	rdword	local03, arg01 wz
23ae0     00 FA 05 A6 |  if_e	mov	result1, #0
23ae4     04 22 66 50 |  if_ne	shl	local03, #4
23ae8     11 13 02 51 |  if_ne	add	arg01, local03
23aec     09 FB 01 56 |  if_ne	mov	result1, arg01
23af0     FD 20 0A F6 | 	mov	local02, result1 wz
23af4     60 00 90 AD |  if_e	jmp	#LR__3356
23af8                 | LR__3353
23af8     10 25 02 F6 | 	mov	local04, local02
23afc     12 13 02 F6 | 	mov	arg01, local04
23b00     09 23 EA FA | 	rdword	local03, arg01 wz
23b04     00 FA 05 A6 |  if_e	mov	result1, #0
23b08     04 22 66 50 |  if_ne	shl	local03, #4
23b0c     11 13 02 51 |  if_ne	add	arg01, local03
23b10     09 FB 01 56 |  if_ne	mov	result1, arg01
23b14     FD 20 02 F6 | 	mov	local02, result1
23b18     12 15 02 F6 | 	mov	arg02, local04
23b1c     02 14 06 F1 | 	add	arg02, #2
23b20     0A 15 E2 FA | 	rdword	arg02, arg02
23b24     20 14 CE F7 | 	test	arg02, #32 wz
23b28     10 14 CE A7 |  if_e	test	arg02, #16 wz
23b2c     1C 00 90 5D |  if_ne	jmp	#LR__3355
23b30     0A 15 42 F8 | 	getnib	arg02, arg02, #0
23b34     13 15 0A F2 | 	cmp	arg02, local05 wz
23b38     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
23b3c     0C 00 90 5D |  if_ne	jmp	#LR__3354
23b40     12 13 02 F6 | 	mov	arg01, local04
23b44     84 FC BF FD | 	call	#__system___gc_dofree
23b48     FD 20 02 F6 | 	mov	local02, result1
23b4c                 | LR__3354
23b4c                 | LR__3355
23b4c     00 20 0E F2 | 	cmp	local02, #0 wz
23b50     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
23b54     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3353
23b58                 | LR__3356
23b58     A7 F0 03 F6 | 	mov	ptra, fp
23b5c     B2 00 A0 FD | 	call	#popregs_
23b60                 | __system___gc_docollect_ret
23b60     2D 00 64 FD | 	ret
23b64                 | 
23b64                 | __system___gc_markhub
23b64     04 4A 05 F6 | 	mov	COUNT_, #4
23b68     A8 00 A0 FD | 	call	#pushregs_
23b6c     09 1F 02 F6 | 	mov	local01, arg01
23b70     0A 21 02 F6 | 	mov	local02, arg02
23b74     80 F8 BF FD | 	call	#__system___gc_ptrs
23b78     FD 22 02 F6 | 	mov	local03, result1
23b7c     FE 24 02 F6 | 	mov	local04, result2
23b80                 | LR__3360
23b80     10 1F 52 F2 | 	cmps	local01, local02 wc
23b84     60 00 90 3D |  if_ae	jmp	#LR__3361
23b88     0F 17 02 FB | 	rdlong	arg03, local01
23b8c     04 1E 06 F1 | 	add	local01, #4
23b90     12 15 02 F6 | 	mov	arg02, local04
23b94     11 13 02 F6 | 	mov	arg01, local03
23b98     8C FB BF FD | 	call	#__system___gc_isvalidptr
23b9c     FD 16 0A F6 | 	mov	arg03, result1 wz
23ba0     DC FF 9F AD |  if_e	jmp	#LR__3360
23ba4     0B 13 02 F6 | 	mov	arg01, arg03
23ba8     00 FA 05 F6 | 	mov	result1, #0
23bac     02 12 06 F1 | 	add	arg01, #2
23bb0     09 13 E2 FA | 	rdword	arg01, arg01
23bb4     36 00 00 FF 
23bb8     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
23bbc     01 FA 65 A6 |  if_e	neg	result1, #1
23bc0     00 FA 0D F2 | 	cmp	result1, #0 wz
23bc4     B8 FF 9F 5D |  if_ne	jmp	#LR__3360
23bc8     0B FD 01 F6 | 	mov	result2, arg03
23bcc     02 FC 05 F1 | 	add	result2, #2
23bd0     FE FC E1 FA | 	rdword	result2, result2
23bd4     0F FC 25 F5 | 	andn	result2, #15
23bd8     2E FC 45 F5 | 	or	result2, #46
23bdc     02 16 06 F1 | 	add	arg03, #2
23be0     0B FD 51 FC | 	wrword	result2, arg03
23be4     98 FF 9F FD | 	jmp	#LR__3360
23be8                 | LR__3361
23be8     A7 F0 03 F6 | 	mov	ptra, fp
23bec     B2 00 A0 FD | 	call	#popregs_
23bf0                 | __system___gc_markhub_ret
23bf0     2D 00 64 FD | 	ret
23bf4                 | 
23bf4                 | __system___gc_markcog
23bf4     04 4A 05 F6 | 	mov	COUNT_, #4
23bf8     A8 00 A0 FD | 	call	#pushregs_
23bfc     F8 F7 BF FD | 	call	#__system___gc_ptrs
23c00     FD 1E 02 F6 | 	mov	local01, result1
23c04     FE 20 02 F6 | 	mov	local02, result2
23c08     EF 23 06 F6 | 	mov	local03, #495
23c0c                 | LR__3370
23c0c                 | 	'.live	local03
23c0c     00 22 96 F9 | 	alts	local03, #0
23c10     11 25 02 F6 | 	mov	local04, local03
23c14     0F 13 02 F6 | 	mov	arg01, local01
23c18     10 15 02 F6 | 	mov	arg02, local02
23c1c     12 17 02 F6 | 	mov	arg03, local04
23c20     04 FB BF FD | 	call	#__system___gc_isvalidptr
23c24     00 FA 0D F2 | 	cmp	result1, #0 wz
23c28     18 00 90 AD |  if_e	jmp	#LR__3371
23c2c     FD 24 02 F6 | 	mov	local04, result1
23c30     02 24 06 F1 | 	add	local04, #2
23c34     12 25 E2 FA | 	rdword	local04, local04
23c38     20 24 46 F5 | 	or	local04, #32
23c3c     02 FA 05 F1 | 	add	result1, #2
23c40     FD 24 52 FC | 	wrword	local04, result1
23c44                 | LR__3371
23c44     01 22 86 F1 | 	sub	local03, #1
23c48     00 22 56 F2 | 	cmps	local03, #0 wc
23c4c     BC FF 9F 3D |  if_ae	jmp	#LR__3370
23c50     A7 F0 03 F6 | 	mov	ptra, fp
23c54     B2 00 A0 FD | 	call	#popregs_
23c58                 | __system___gc_markcog_ret
23c58     2D 00 64 FD | 	ret
23c5c                 | 
23c5c                 | __system__opendir
23c5c     06 4A 05 F6 | 	mov	COUNT_, #6
23c60     A8 00 A0 FD | 	call	#pushregs_
23c64     84 E7 05 F1 | 	add	ptr___system__dat__, #388
23c68     F3 1E 02 F6 | 	mov	local01, ptr___system__dat__
23c6c     09 15 02 F6 | 	mov	arg02, arg01
23c70     0F 13 02 F6 | 	mov	arg01, local01
23c74     00 16 06 F6 | 	mov	arg03, #0
23c78     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
23c7c     14 C3 BF FD | 	call	#__system____getvfsforfile
23c80     FD 20 0A F6 | 	mov	local02, result1 wz
23c84     10 00 90 AD |  if_e	jmp	#LR__3380
23c88     28 20 06 F1 | 	add	local02, #40
23c8c     10 17 0A FB | 	rdlong	arg03, local02 wz
23c90     28 20 86 F1 | 	sub	local02, #40
23c94     14 00 90 5D |  if_ne	jmp	#LR__3381
23c98                 | LR__3380
23c98     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23c9c     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
23ca0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23ca4     00 FA 05 F6 | 	mov	result1, #0
23ca8     90 00 90 FD | 	jmp	#LR__3383
23cac                 | LR__3381
23cac     5C 12 06 F6 | 	mov	arg01, #92
23cb0     10 14 06 F6 | 	mov	arg02, #16
23cb4     C0 F9 BF FD | 	call	#__system___gc_doalloc
23cb8     FD 22 0A F6 | 	mov	local03, result1 wz
23cbc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
23cc0     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
23cc4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
23cc8     00 FA 05 A6 |  if_e	mov	result1, #0
23ccc     6C 00 90 AD |  if_e	jmp	#LR__3383
23cd0     28 20 06 F1 | 	add	local02, #40
23cd4     10 25 02 FB | 	rdlong	local04, local02
23cd8     12 27 02 F6 | 	mov	local05, local04
23cdc     28 20 86 F1 | 	sub	local02, #40
23ce0     13 26 46 F7 | 	zerox	local05, #19
23ce4     14 24 46 F0 | 	shr	local04, #20
23ce8     02 24 66 F0 | 	shl	local04, #2
23cec     ED 24 02 F1 | 	add	local04, __methods__
23cf0     12 25 02 FB | 	rdlong	local04, local04
23cf4     11 13 02 F6 | 	mov	arg01, local03
23cf8     0F 15 02 F6 | 	mov	arg02, local01
23cfc     F2 28 02 F6 | 	mov	local06, objptr
23d00     13 E5 01 F6 | 	mov	objptr, local05
23d04     2D 24 62 FD | 	call	local04
23d08     14 E5 01 F6 | 	mov	objptr, local06
23d0c     FD 16 0A F6 | 	mov	arg03, result1 wz
23d10     20 00 90 AD |  if_e	jmp	#LR__3382
23d14     00 16 4E F2 | 	cmps	arg03, #0 wz
23d18     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23d1c     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
23d20     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23d24     11 13 02 F6 | 	mov	arg01, local03
23d28     58 FA BF FD | 	call	#__system___gc_free
23d2c     00 FA 05 F6 | 	mov	result1, #0
23d30     08 00 90 FD | 	jmp	#LR__3383
23d34                 | LR__3382
23d34     11 21 62 FC | 	wrlong	local02, local03
23d38     11 FB 01 F6 | 	mov	result1, local03
23d3c                 | LR__3383
23d3c     A7 F0 03 F6 | 	mov	ptra, fp
23d40     B2 00 A0 FD | 	call	#popregs_
23d44                 | __system__opendir_ret
23d44     2D 00 64 FD | 	ret
23d48                 | 
23d48                 | __system__closedir
23d48     04 4A 05 F6 | 	mov	COUNT_, #4
23d4c     A8 00 A0 FD | 	call	#pushregs_
23d50     09 1F 02 F6 | 	mov	local01, arg01
23d54     0F 13 02 FB | 	rdlong	arg01, local01
23d58     2C 12 06 F1 | 	add	arg01, #44
23d5c     09 21 02 FB | 	rdlong	local02, arg01
23d60     10 23 02 F6 | 	mov	local03, local02
23d64     13 22 46 F7 | 	zerox	local03, #19
23d68     14 20 46 F0 | 	shr	local02, #20
23d6c     02 20 66 F0 | 	shl	local02, #2
23d70     ED 20 02 F1 | 	add	local02, __methods__
23d74     10 21 02 FB | 	rdlong	local02, local02
23d78     0F 13 02 F6 | 	mov	arg01, local01
23d7c     F2 24 02 F6 | 	mov	local04, objptr
23d80     11 E5 01 F6 | 	mov	objptr, local03
23d84     2D 20 62 FD | 	call	local02
23d88     12 E5 01 F6 | 	mov	objptr, local04
23d8c     FD 24 02 F6 | 	mov	local04, result1
23d90     0F 13 02 F6 | 	mov	arg01, local01
23d94     EC F9 BF FD | 	call	#__system___gc_free
23d98     00 24 4E F2 | 	cmps	local04, #0 wz
23d9c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23da0     F3 24 62 FC | 	wrlong	local04, ptr___system__dat__
23da4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23da8     01 FA 65 56 |  if_ne	neg	result1, #1
23dac     00 FA 05 A6 |  if_e	mov	result1, #0
23db0     A7 F0 03 F6 | 	mov	ptra, fp
23db4     B2 00 A0 FD | 	call	#popregs_
23db8                 | __system__closedir_ret
23db8     2D 00 64 FD | 	ret
23dbc                 | 
23dbc                 | __system__readdir
23dbc     04 4A 05 F6 | 	mov	COUNT_, #4
23dc0     A8 00 A0 FD | 	call	#pushregs_
23dc4     09 15 0A FB | 	rdlong	arg02, arg01 wz
23dc8     08 12 06 F1 | 	add	arg01, #8
23dcc     09 1F 02 F6 | 	mov	local01, arg01
23dd0     08 12 86 F1 | 	sub	arg01, #8
23dd4     00 FA 05 A6 |  if_e	mov	result1, #0
23dd8     5C 00 90 AD |  if_e	jmp	#LR__3391
23ddc     30 14 06 F1 | 	add	arg02, #48
23de0     0A 21 02 FB | 	rdlong	local02, arg02
23de4     10 23 02 F6 | 	mov	local03, local02
23de8     13 22 46 F7 | 	zerox	local03, #19
23dec     14 20 46 F0 | 	shr	local02, #20
23df0     02 20 66 F0 | 	shl	local02, #2
23df4     ED 20 02 F1 | 	add	local02, __methods__
23df8     10 21 02 FB | 	rdlong	local02, local02
23dfc     0F 15 02 F6 | 	mov	arg02, local01
23e00     F2 24 02 F6 | 	mov	local04, objptr
23e04     11 E5 01 F6 | 	mov	objptr, local03
23e08     2D 20 62 FD | 	call	local02
23e0c     12 E5 01 F6 | 	mov	objptr, local04
23e10     00 FA 4D F2 | 	cmps	result1, #0 wz
23e14     1C 00 90 AD |  if_e	jmp	#LR__3390
23e18     01 FA 55 F2 | 	cmps	result1, #1 wc
23e1c     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
23e20     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
23e24     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
23e28     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
23e2c     00 FA 05 F6 | 	mov	result1, #0
23e30     04 00 90 FD | 	jmp	#LR__3391
23e34                 | LR__3390
23e34     0F FB 01 F6 | 	mov	result1, local01
23e38                 | LR__3391
23e38     A7 F0 03 F6 | 	mov	ptra, fp
23e3c     B2 00 A0 FD | 	call	#popregs_
23e40                 | __system__readdir_ret
23e40     2D 00 64 FD | 	ret
23e44                 | 
23e44                 | __system___openraw
23e44     15 4A 05 F6 | 	mov	COUNT_, #21
23e48     A8 00 A0 FD | 	call	#pushregs_
23e4c     09 1F 02 F6 | 	mov	local01, arg01
23e50     0A 21 02 F6 | 	mov	local02, arg02
23e54     0B 23 02 F6 | 	mov	local03, arg03
23e58     0C 25 02 F6 | 	mov	local04, arg04
23e5c     04 26 06 F6 | 	mov	local05, #4
23e60     0F 29 02 F6 | 	mov	local06, local01
23e64     00 2A 06 F6 | 	mov	local07, #0
23e68     84 E7 05 F1 | 	add	ptr___system__dat__, #388
23e6c     F3 2C 02 F6 | 	mov	local08, ptr___system__dat__
23e70     16 13 02 F6 | 	mov	arg01, local08
23e74     10 15 02 F6 | 	mov	arg02, local02
23e78     00 16 06 F6 | 	mov	arg03, #0
23e7c     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
23e80     10 C1 BF FD | 	call	#__system____getvfsforfile
23e84     FD 2E 0A F6 | 	mov	local09, result1 wz
23e88     10 00 90 AD |  if_e	jmp	#LR__3400
23e8c     20 2E 06 F1 | 	add	local09, #32
23e90     17 FB 09 FB | 	rdlong	result1, local09 wz
23e94     20 2E 86 F1 | 	sub	local09, #32
23e98     14 00 90 5D |  if_ne	jmp	#LR__3401
23e9c                 | LR__3400
23e9c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23ea0     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
23ea4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23ea8     01 FA 65 F6 | 	neg	result1, #1
23eac     8C 02 90 FD | 	jmp	#LR__3414
23eb0                 | LR__3401
23eb0     14 13 02 F6 | 	mov	arg01, local06
23eb4     00 14 06 F6 | 	mov	arg02, #0
23eb8     34 16 06 F6 | 	mov	arg03, #52
23ebc     09 31 02 F6 | 	mov	local10, arg01
23ec0     98 00 A0 FD | 	call	#\builtin_bytefill_
23ec4     20 2E 06 F1 | 	add	local09, #32
23ec8     17 33 02 FB | 	rdlong	local11, local09
23ecc     19 35 02 F6 | 	mov	local12, local11
23ed0     19 37 02 F6 | 	mov	local13, local11
23ed4     20 2E 86 F1 | 	sub	local09, #32
23ed8     1B 39 02 F6 | 	mov	local14, local13
23edc     13 34 46 F7 | 	zerox	local12, #19
23ee0     14 38 46 F0 | 	shr	local14, #20
23ee4     02 38 66 F0 | 	shl	local14, #2
23ee8     ED 38 02 F1 | 	add	local14, __methods__
23eec     1C 39 02 FB | 	rdlong	local14, local14
23ef0     14 3B 02 F6 | 	mov	local15, local06
23ef4     16 3D 02 F6 | 	mov	local16, local08
23ef8     11 3F 02 F6 | 	mov	local17, local03
23efc     1D 13 02 F6 | 	mov	arg01, local15
23f00     1E 15 02 F6 | 	mov	arg02, local16
23f04     1F 17 02 F6 | 	mov	arg03, local17
23f08     F2 40 02 F6 | 	mov	local18, objptr
23f0c     1A E5 01 F6 | 	mov	objptr, local12
23f10     2D 38 62 FD | 	call	local14
23f14     20 E5 01 F6 | 	mov	objptr, local18
23f18     FD 42 0A F6 | 	mov	local19, result1 wz
23f1c     04 22 CE 57 |  if_ne	test	local03, #4 wz
23f20     58 00 90 AD |  if_e	jmp	#LR__3402
23f24     24 2E 06 F1 | 	add	local09, #36
23f28     17 33 02 FB | 	rdlong	local11, local09
23f2c     19 35 02 F6 | 	mov	local12, local11
23f30     19 37 02 F6 | 	mov	local13, local11
23f34     24 2E 86 F1 | 	sub	local09, #36
23f38     1B 39 02 F6 | 	mov	local14, local13
23f3c     13 34 46 F7 | 	zerox	local12, #19
23f40     14 38 46 F0 | 	shr	local14, #20
23f44     02 38 66 F0 | 	shl	local14, #2
23f48     ED 38 02 F1 | 	add	local14, __methods__
23f4c     1C 39 02 FB | 	rdlong	local14, local14
23f50     14 3B 02 F6 | 	mov	local15, local06
23f54     16 3D 02 F6 | 	mov	local16, local08
23f58     12 3F 02 F6 | 	mov	local17, local04
23f5c     1D 13 02 F6 | 	mov	arg01, local15
23f60     1E 15 02 F6 | 	mov	arg02, local16
23f64     1F 17 02 F6 | 	mov	arg03, local17
23f68     F2 40 02 F6 | 	mov	local18, objptr
23f6c     1A E5 01 F6 | 	mov	objptr, local12
23f70     2D 38 62 FD | 	call	local14
23f74     20 E5 01 F6 | 	mov	objptr, local18
23f78     FD 42 02 F6 | 	mov	local19, result1
23f7c                 | LR__3402
23f7c     00 42 0E F2 | 	cmp	local19, #0 wz
23f80     8C 01 90 5D |  if_ne	jmp	#LR__3412
23f84     11 45 02 F6 | 	mov	local20, local03
23f88     03 44 0E F5 | 	and	local20, #3 wz
23f8c     02 26 46 55 |  if_ne	or	local05, #2
23f90     01 44 0E F2 | 	cmp	local20, #1 wz
23f94     01 26 46 55 |  if_ne	or	local05, #1
23f98     20 22 CE F7 | 	test	local03, #32 wz
23f9c     C0 26 46 55 |  if_ne	or	local05, #192
23fa0     08 28 06 F1 | 	add	local06, #8
23fa4     14 27 62 FC | 	wrlong	local05, local06
23fa8     0C 28 06 F1 | 	add	local06, #12
23fac     14 47 0A FB | 	rdlong	local21, local06 wz
23fb0     14 28 86 F1 | 	sub	local06, #20
23fb4     18 00 90 5D |  if_ne	jmp	#LR__3403
23fb8     04 2E 06 F1 | 	add	local09, #4
23fbc     17 47 02 FB | 	rdlong	local21, local09
23fc0     04 2E 86 F1 | 	sub	local09, #4
23fc4     14 28 06 F1 | 	add	local06, #20
23fc8     14 47 62 FC | 	wrlong	local21, local06
23fcc     14 28 86 F1 | 	sub	local06, #20
23fd0                 | LR__3403
23fd0     18 28 06 F1 | 	add	local06, #24
23fd4     14 47 0A FB | 	rdlong	local21, local06 wz
23fd8     18 28 86 F1 | 	sub	local06, #24
23fdc     18 00 90 5D |  if_ne	jmp	#LR__3404
23fe0     08 2E 06 F1 | 	add	local09, #8
23fe4     17 47 02 FB | 	rdlong	local21, local09
23fe8     08 2E 86 F1 | 	sub	local09, #8
23fec     18 28 06 F1 | 	add	local06, #24
23ff0     14 47 62 FC | 	wrlong	local21, local06
23ff4     18 28 86 F1 | 	sub	local06, #24
23ff8                 | LR__3404
23ff8     24 28 06 F1 | 	add	local06, #36
23ffc     14 47 0A FB | 	rdlong	local21, local06 wz
24000     24 28 86 F1 | 	sub	local06, #36
24004     17 47 02 AB |  if_e	rdlong	local21, local09
24008     24 28 06 A1 |  if_e	add	local06, #36
2400c     14 47 62 AC |  if_e	wrlong	local21, local06
24010     24 28 86 A1 |  if_e	sub	local06, #36
24014     28 28 06 F1 | 	add	local06, #40
24018     14 47 0A FB | 	rdlong	local21, local06 wz
2401c     28 28 86 F1 | 	sub	local06, #40
24020     18 00 90 5D |  if_ne	jmp	#LR__3405
24024     10 2E 06 F1 | 	add	local09, #16
24028     17 47 02 FB | 	rdlong	local21, local09
2402c     10 2E 86 F1 | 	sub	local09, #16
24030     28 28 06 F1 | 	add	local06, #40
24034     14 47 62 FC | 	wrlong	local21, local06
24038     28 28 86 F1 | 	sub	local06, #40
2403c                 | LR__3405
2403c     30 28 06 F1 | 	add	local06, #48
24040     14 47 0A FB | 	rdlong	local21, local06 wz
24044     30 28 86 F1 | 	sub	local06, #48
24048     18 00 90 5D |  if_ne	jmp	#LR__3406
2404c     0C 2E 06 F1 | 	add	local09, #12
24050     17 47 02 FB | 	rdlong	local21, local09
24054     0C 2E 86 F1 | 	sub	local09, #12
24058     30 28 06 F1 | 	add	local06, #48
2405c     14 47 62 FC | 	wrlong	local21, local06
24060     30 28 86 F1 | 	sub	local06, #48
24064                 | LR__3406
24064     1C 28 06 F1 | 	add	local06, #28
24068     14 47 0A FB | 	rdlong	local21, local06 wz
2406c     1C 28 86 F1 | 	sub	local06, #28
24070     1C 00 90 5D |  if_ne	jmp	#LR__3407
24074     01 2A 06 F6 | 	mov	local07, #1
24078     F2 12 02 F6 | 	mov	arg01, objptr
2407c     00 A0 04 FF 
24080     00 12 46 F5 | 	or	arg01, ##155189248
24084     1C 28 06 F1 | 	add	local06, #28
24088     14 13 62 FC | 	wrlong	arg01, local06
2408c     1C 28 86 F1 | 	sub	local06, #28
24090                 | LR__3407
24090     20 28 06 F1 | 	add	local06, #32
24094     14 47 0A FB | 	rdlong	local21, local06 wz
24098     20 28 86 F1 | 	sub	local06, #32
2409c     1C 00 90 5D |  if_ne	jmp	#LR__3408
240a0     01 2A 06 F6 | 	mov	local07, #1
240a4     F2 12 02 F6 | 	mov	arg01, objptr
240a8     00 A8 04 FF 
240ac     00 12 46 F5 | 	or	arg01, ##156237824
240b0     20 28 06 F1 | 	add	local06, #32
240b4     14 13 62 FC | 	wrlong	arg01, local06
240b8     20 28 86 F1 | 	sub	local06, #32
240bc                 | LR__3408
240bc     2C 28 06 F1 | 	add	local06, #44
240c0     14 47 0A FB | 	rdlong	local21, local06 wz
240c4     2C 28 86 F1 | 	sub	local06, #44
240c8     44 00 90 5D |  if_ne	jmp	#LR__3411
240cc     14 2E 06 F1 | 	add	local09, #20
240d0     17 47 0A FB | 	rdlong	local21, local09 wz
240d4     14 2E 86 F1 | 	sub	local09, #20
240d8     18 00 90 AD |  if_e	jmp	#LR__3409
240dc     14 2E 06 F1 | 	add	local09, #20
240e0     17 47 02 FB | 	rdlong	local21, local09
240e4     2C 28 06 F1 | 	add	local06, #44
240e8     14 47 62 FC | 	wrlong	local21, local06
240ec     2C 28 86 F1 | 	sub	local06, #44
240f0     1C 00 90 FD | 	jmp	#LR__3410
240f4                 | LR__3409
240f4     01 2A 06 F6 | 	mov	local07, #1
240f8     F2 12 02 F6 | 	mov	arg01, objptr
240fc     00 B0 04 FF 
24100     00 12 46 F5 | 	or	arg01, ##157286400
24104     2C 28 06 F1 | 	add	local06, #44
24108     14 13 62 FC | 	wrlong	arg01, local06
2410c     2C 28 86 F1 | 	sub	local06, #44
24110                 | LR__3410
24110                 | LR__3411
24110                 | LR__3412
24110     00 2A 0E F2 | 	cmp	local07, #0 wz
24114     14 13 02 56 |  if_ne	mov	arg01, local06
24118     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
2411c     00 42 0E F2 | 	cmp	local19, #0 wz
24120     00 12 06 A6 |  if_e	mov	arg01, #0
24124     10 00 90 5D |  if_ne	jmp	#LR__3413
24128     00 12 4E F2 | 	cmps	arg01, #0 wz
2412c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24130     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
24134     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24138                 | LR__3413
24138     21 FB 01 F6 | 	mov	result1, local19
2413c                 | LR__3414
2413c     A7 F0 03 F6 | 	mov	ptra, fp
24140     B2 00 A0 FD | 	call	#popregs_
24144                 | __system___openraw_ret
24144     2D 00 64 FD | 	ret
24148                 | 
24148                 | __system___closeraw
24148     05 4A 05 F6 | 	mov	COUNT_, #5
2414c     A8 00 A0 FD | 	call	#pushregs_
24150     09 1F 02 F6 | 	mov	local01, arg01
24154     00 20 06 F6 | 	mov	local02, #0
24158     08 1E 06 F1 | 	add	local01, #8
2415c     0F FB 09 FB | 	rdlong	result1, local01 wz
24160     08 1E 86 F1 | 	sub	local01, #8
24164     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
24168     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2416c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
24170     01 FA 65 A6 |  if_e	neg	result1, #1
24174     A8 00 90 AD |  if_e	jmp	#LR__3422
24178     2C 1E 06 F1 | 	add	local01, #44
2417c     0F FB 09 FB | 	rdlong	result1, local01 wz
24180     2C 1E 86 F1 | 	sub	local01, #44
24184     38 00 90 AD |  if_e	jmp	#LR__3420
24188     2C 1E 06 F1 | 	add	local01, #44
2418c     0F 23 02 FB | 	rdlong	local03, local01
24190     11 25 02 F6 | 	mov	local04, local03
24194     2C 1E 86 F1 | 	sub	local01, #44
24198     13 24 46 F7 | 	zerox	local04, #19
2419c     14 22 46 F0 | 	shr	local03, #20
241a0     02 22 66 F0 | 	shl	local03, #2
241a4     ED 22 02 F1 | 	add	local03, __methods__
241a8     11 23 02 FB | 	rdlong	local03, local03
241ac     0F 13 02 F6 | 	mov	arg01, local01
241b0     F2 26 02 F6 | 	mov	local05, objptr
241b4     12 E5 01 F6 | 	mov	objptr, local04
241b8     2D 22 62 FD | 	call	local03
241bc     13 E5 01 F6 | 	mov	objptr, local05
241c0                 | LR__3420
241c0     24 1E 06 F1 | 	add	local01, #36
241c4     0F 27 0A FB | 	rdlong	local05, local01 wz
241c8     24 1E 86 F1 | 	sub	local01, #36
241cc     3C 00 90 AD |  if_e	jmp	#LR__3421
241d0     24 1E 06 F1 | 	add	local01, #36
241d4     0F 23 02 FB | 	rdlong	local03, local01
241d8     11 25 02 F6 | 	mov	local04, local03
241dc     24 1E 86 F1 | 	sub	local01, #36
241e0     13 24 46 F7 | 	zerox	local04, #19
241e4     14 22 46 F0 | 	shr	local03, #20
241e8     02 22 66 F0 | 	shl	local03, #2
241ec     ED 22 02 F1 | 	add	local03, __methods__
241f0     11 23 02 FB | 	rdlong	local03, local03
241f4     0F 13 02 F6 | 	mov	arg01, local01
241f8     F2 26 02 F6 | 	mov	local05, objptr
241fc     12 E5 01 F6 | 	mov	objptr, local04
24200     2D 22 62 FD | 	call	local03
24204     13 E5 01 F6 | 	mov	objptr, local05
24208     FD 20 02 F6 | 	mov	local02, result1
2420c                 | LR__3421
2420c     0F 13 02 F6 | 	mov	arg01, local01
24210     00 14 06 F6 | 	mov	arg02, #0
24214     34 16 06 F6 | 	mov	arg03, #52
24218     98 00 A0 FD | 	call	#\builtin_bytefill_
2421c     10 FB 01 F6 | 	mov	result1, local02
24220                 | LR__3422
24220     A7 F0 03 F6 | 	mov	ptra, fp
24224     B2 00 A0 FD | 	call	#popregs_
24228                 | __system___closeraw_ret
24228     2D 00 64 FD | 	ret
2422c                 | 
2422c                 | __system___vfs_open_sdcardx
2422c     0B 4A 05 F6 | 	mov	COUNT_, #11
24230     A8 00 A0 FD | 	call	#pushregs_
24234     09 23 02 F6 | 	mov	local03, arg01
24238     0A 25 02 F6 | 	mov	local04, arg02
2423c     0B 27 02 F6 | 	mov	local05, arg03
24240     0C 29 02 F6 | 	mov	local06, arg04
24244     01 00 00 FF 
24248     24 12 06 F6 | 	mov	arg01, ##548
2424c     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
24250     FD 2A 02 F6 | 	mov	local07, result1
24254     01 00 00 FF 
24258     34 12 06 F6 | 	mov	arg01, ##564
2425c     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
24260     FD 2C 02 F6 | 	mov	local08, result1
24264     11 19 02 F6 | 	mov	arg04, local03
24268     1F 18 C6 F0 | 	sar	arg04, #31
2426c     11 17 02 F6 | 	mov	arg03, local03
24270     01 12 06 F6 | 	mov	arg01, #1
24274     00 14 06 F6 | 	mov	arg02, #0
24278     10 DC BF FD | 	call	#__system___int64_shl
2427c     FD 1E 02 F6 | 	mov	local01, result1
24280     FE 2E 02 F6 | 	mov	local09, result2
24284     12 19 02 F6 | 	mov	arg04, local04
24288     1F 18 C6 F0 | 	sar	arg04, #31
2428c     12 17 02 F6 | 	mov	arg03, local04
24290     01 12 06 F6 | 	mov	arg01, #1
24294     00 14 06 F6 | 	mov	arg02, #0
24298     F0 DB BF FD | 	call	#__system___int64_shl
2429c     FD 1E 42 F5 | 	or	local01, result1
242a0     FE 2E 42 F5 | 	or	local09, result2
242a4     13 19 02 F6 | 	mov	arg04, local05
242a8     1F 18 C6 F0 | 	sar	arg04, #31
242ac     13 17 02 F6 | 	mov	arg03, local05
242b0     01 12 06 F6 | 	mov	arg01, #1
242b4     00 14 06 F6 | 	mov	arg02, #0
242b8     D0 DB BF FD | 	call	#__system___int64_shl
242bc     FD 1E 42 F5 | 	or	local01, result1
242c0     FE 2E 42 F5 | 	or	local09, result2
242c4     14 19 02 F6 | 	mov	arg04, local06
242c8     1F 18 C6 F0 | 	sar	arg04, #31
242cc     14 17 02 F6 | 	mov	arg03, local06
242d0     01 12 06 F6 | 	mov	arg01, #1
242d4     00 14 06 F6 | 	mov	arg02, #0
242d8     B0 DB BF FD | 	call	#__system___int64_shl
242dc     17 15 02 F6 | 	mov	arg02, local09
242e0     FD 1E 42 F5 | 	or	local01, result1
242e4     0A FD 41 F5 | 	or	result2, arg02
242e8     FE 20 02 F6 | 	mov	local02, result2
242ec     0F 13 02 F6 | 	mov	arg01, local01
242f0     10 15 02 F6 | 	mov	arg02, local02
242f4     CC DB BF FD | 	call	#__system___usepins
242f8     00 FA 0D F2 | 	cmp	result1, #0 wz
242fc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
24300     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
24304     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
24308     00 FA 05 A6 |  if_e	mov	result1, #0
2430c     B4 00 90 AD |  if_e	jmp	#LR__3432
24310     0F 31 02 F6 | 	mov	local10, local01
24314     10 2F 02 F6 | 	mov	local09, local02
24318     01 00 00 FF 
2431c     08 2A 06 F1 | 	add	local07, ##520
24320     15 31 62 FC | 	wrlong	local10, local07
24324     04 2A 06 F1 | 	add	local07, #4
24328     15 2F 62 FC | 	wrlong	local09, local07
2432c     01 00 00 FF 
24330     0C 2A 86 F1 | 	sub	local07, ##524
24334     14 1B 02 F6 | 	mov	arg05, local06
24338     00 12 06 F6 | 	mov	arg01, #0
2433c     11 15 02 F6 | 	mov	arg02, local03
24340     12 17 02 F6 | 	mov	arg03, local04
24344     13 19 02 F6 | 	mov	arg04, local05
24348     F2 30 02 F6 | 	mov	local10, objptr
2434c     15 E5 01 F6 | 	mov	objptr, local07
24350     7C 27 B0 FD | 	call	#_fatfs_cc_disk_setpins
24354     18 E5 01 F6 | 	mov	objptr, local10
24358     FD 32 0A F6 | 	mov	local11, result1 wz
2435c     24 00 90 5D |  if_ne	jmp	#LR__3430
24360     77 01 00 FF 
24364     1A 14 06 F6 | 	mov	arg02, ##@LR__4827
24368     16 13 02 F6 | 	mov	arg01, local08
2436c     00 16 06 F6 | 	mov	arg03, #0
24370     F2 32 02 F6 | 	mov	local11, objptr
24374     15 E5 01 F6 | 	mov	objptr, local07
24378     AC 5E B0 FD | 	call	#_fatfs_cc_f_mount
2437c     19 E5 01 F6 | 	mov	objptr, local11
24380     FD 32 02 F6 | 	mov	local11, result1
24384                 | LR__3430
24384     00 32 0E F2 | 	cmp	local11, #0 wz
24388     24 00 90 AD |  if_e	jmp	#LR__3431
2438c     0F 13 02 F6 | 	mov	arg01, local01
24390     10 15 02 F6 | 	mov	arg02, local02
24394     80 DB BF FD | 	call	#__system___freepins
24398     19 13 6A F6 | 	neg	arg01, local11 wz
2439c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
243a0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
243a4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
243a8     00 FA 05 F6 | 	mov	result1, #0
243ac     14 00 90 FD | 	jmp	#LR__3432
243b0                 | LR__3431
243b0     15 13 02 F6 | 	mov	arg01, local07
243b4     F2 32 02 F6 | 	mov	local11, objptr
243b8     15 E5 01 F6 | 	mov	objptr, local07
243bc     48 9B B0 FD | 	call	#_fatfs_cc_get_vfs
243c0     19 E5 01 F6 | 	mov	objptr, local11
243c4                 | LR__3432
243c4     A7 F0 03 F6 | 	mov	ptra, fp
243c8     B2 00 A0 FD | 	call	#popregs_
243cc                 | __system___vfs_open_sdcardx_ret
243cc     2D 00 64 FD | 	ret
243d0                 | 
243d0                 | __system____default_getc
243d0     03 4A 05 F6 | 	mov	COUNT_, #3
243d4     A8 00 A0 FD | 	call	#pushregs_
243d8     09 1F 02 F6 | 	mov	local01, arg01
243dc     0F 21 02 FB | 	rdlong	local02, local01
243e0     08 20 06 F1 | 	add	local02, #8
243e4     10 23 02 FB | 	rdlong	local03, local02
243e8     02 22 CE F7 | 	test	local03, #2 wz
243ec     0F 13 02 56 |  if_ne	mov	arg01, local01
243f0     00 01 B0 5D |  if_ne	call	#__system____default_flush
243f4     10 23 02 FB | 	rdlong	local03, local02
243f8     01 22 46 F5 | 	or	local03, #1
243fc     10 23 62 FC | 	wrlong	local03, local02
24400     08 20 86 F1 | 	sub	local02, #8
24404     10 23 0A FB | 	rdlong	local03, local02 wz
24408     0C 00 90 5D |  if_ne	jmp	#LR__3440
2440c     0F 13 02 F6 | 	mov	arg01, local01
24410     64 16 B0 FD | 	call	#__system____default_filbuf
24414     FD 22 02 F6 | 	mov	local03, result1
24418                 | LR__3440
24418     01 22 56 F2 | 	cmps	local03, #1 wc
2441c     01 FA 65 C6 |  if_b	neg	result1, #1
24420     1C 00 90 CD |  if_b	jmp	#LR__3441
24424     01 22 86 F1 | 	sub	local03, #1
24428     10 23 62 FC | 	wrlong	local03, local02
2442c     04 20 06 F1 | 	add	local02, #4
24430     10 23 02 FB | 	rdlong	local03, local02
24434     11 FB C1 FA | 	rdbyte	result1, local03
24438     01 22 06 F1 | 	add	local03, #1
2443c     10 23 62 FC | 	wrlong	local03, local02
24440                 | LR__3441
24440     A7 F0 03 F6 | 	mov	ptra, fp
24444     B2 00 A0 FD | 	call	#popregs_
24448                 | __system____default_getc_ret
24448     2D 00 64 FD | 	ret
2444c                 | 
2444c                 | __system____default_putc
2444c     06 4A 05 F6 | 	mov	COUNT_, #6
24450     A8 00 A0 FD | 	call	#pushregs_
24454     09 1F 02 F6 | 	mov	local01, arg01
24458     0A 21 02 F6 | 	mov	local02, arg02
2445c     10 23 02 FB | 	rdlong	local03, local02
24460     08 22 06 F1 | 	add	local03, #8
24464     11 FB 01 FB | 	rdlong	result1, local03
24468     01 FA CD F7 | 	test	result1, #1 wz
2446c     10 13 02 56 |  if_ne	mov	arg01, local02
24470     80 00 B0 5D |  if_ne	call	#__system____default_flush
24474     11 25 02 FB | 	rdlong	local04, local03
24478     02 24 46 F5 | 	or	local04, #2
2447c     11 25 62 FC | 	wrlong	local04, local03
24480     08 22 86 F1 | 	sub	local03, #8
24484     11 27 02 FB | 	rdlong	local05, local03
24488     10 22 06 F1 | 	add	local03, #16
2448c     11 15 02 FB | 	rdlong	arg02, local03
24490     10 22 86 F1 | 	sub	local03, #16
24494     13 FB 01 F6 | 	mov	result1, local05
24498     0A FB 01 F1 | 	add	result1, arg02
2449c     FD 1E 42 FC | 	wrbyte	local01, result1
244a0     0F 1F E2 F8 | 	getbyte	local01, local01, #0
244a4     01 26 06 F1 | 	add	local05, #1
244a8     11 27 62 FC | 	wrlong	local05, local03
244ac     06 20 06 F1 | 	add	local02, #6
244b0     10 29 EA FA | 	rdword	local06, local02 wz
244b4     06 20 86 F1 | 	sub	local02, #6
244b8     0C 22 06 51 |  if_ne	add	local03, #12
244bc     11 25 02 5B |  if_ne	rdlong	local04, local03
244c0     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
244c4     0C 00 90 AD |  if_e	jmp	#LR__3450
244c8     0A 1E 0E F2 | 	cmp	local01, #10 wz
244cc     01 28 0E A2 |  if_e	cmp	local06, #1 wz
244d0     10 00 90 5D |  if_ne	jmp	#LR__3451
244d4                 | LR__3450
244d4     10 13 02 F6 | 	mov	arg01, local02
244d8     18 00 B0 FD | 	call	#__system____default_flush
244dc     00 FA 0D F2 | 	cmp	result1, #0 wz
244e0     01 1E 66 56 |  if_ne	neg	local01, #1
244e4                 | LR__3451
244e4     0F FB 01 F6 | 	mov	result1, local01
244e8     A7 F0 03 F6 | 	mov	ptra, fp
244ec     B2 00 A0 FD | 	call	#popregs_
244f0                 | __system____default_putc_ret
244f0     2D 00 64 FD | 	ret
244f4                 | 
244f4                 | __system____default_flush
244f4     06 4A 05 F6 | 	mov	COUNT_, #6
244f8     A8 00 A0 FD | 	call	#pushregs_
244fc     09 1F 02 F6 | 	mov	local01, arg01
24500     0F 21 02 FB | 	rdlong	local02, local01
24504     10 23 02 FB | 	rdlong	local03, local02
24508     08 20 06 F1 | 	add	local02, #8
2450c     10 FB 01 FB | 	rdlong	result1, local02
24510     08 20 86 F1 | 	sub	local02, #8
24514     02 FA CD F7 | 	test	result1, #2 wz
24518     D0 00 90 AD |  if_e	jmp	#LR__3462
2451c     01 22 56 F2 | 	cmps	local03, #1 wc
24520     20 01 90 CD |  if_b	jmp	#LR__3464
24524     08 1E 06 F1 | 	add	local01, #8
24528     0F FB 01 FB | 	rdlong	result1, local01
2452c     08 1E 86 F1 | 	sub	local01, #8
24530     40 FA CD F7 | 	test	result1, #64 wz
24534     68 00 90 AD |  if_e	jmp	#LR__3461
24538     08 1E 06 F1 | 	add	local01, #8
2453c     0F 17 02 FB | 	rdlong	arg03, local01
24540     08 1E 86 F1 | 	sub	local01, #8
24544     80 16 CE F7 | 	test	arg03, #128 wz
24548     54 00 90 AD |  if_e	jmp	#LR__3460
2454c     30 1E 06 F1 | 	add	local01, #48
24550     0F 25 02 FB | 	rdlong	local04, local01
24554     12 27 02 F6 | 	mov	local05, local04
24558     30 1E 86 F1 | 	sub	local01, #48
2455c     13 26 46 F7 | 	zerox	local05, #19
24560     14 24 46 F0 | 	shr	local04, #20
24564     02 24 66 F0 | 	shl	local04, #2
24568     ED 24 02 F1 | 	add	local04, __methods__
2456c     12 25 02 FB | 	rdlong	local04, local04
24570     0F 13 02 F6 | 	mov	arg01, local01
24574     00 14 06 F6 | 	mov	arg02, #0
24578     02 16 06 F6 | 	mov	arg03, #2
2457c     F2 28 02 F6 | 	mov	local06, objptr
24580     13 E5 01 F6 | 	mov	objptr, local05
24584     2D 24 62 FD | 	call	local04
24588     14 E5 01 F6 | 	mov	objptr, local06
2458c     08 1E 06 F1 | 	add	local01, #8
24590     0F 29 02 FB | 	rdlong	local06, local01
24594     80 28 26 F5 | 	andn	local06, #128
24598     0F 29 62 FC | 	wrlong	local06, local01
2459c     08 1E 86 F1 | 	sub	local01, #8
245a0                 | LR__3460
245a0                 | LR__3461
245a0     18 1E 06 F1 | 	add	local01, #24
245a4     0F 25 02 FB | 	rdlong	local04, local01
245a8     12 27 02 F6 | 	mov	local05, local04
245ac     18 1E 86 F1 | 	sub	local01, #24
245b0     13 26 46 F7 | 	zerox	local05, #19
245b4     14 24 46 F0 | 	shr	local04, #20
245b8     02 24 66 F0 | 	shl	local04, #2
245bc     ED 24 02 F1 | 	add	local04, __methods__
245c0     12 25 02 FB | 	rdlong	local04, local04
245c4     10 20 06 F1 | 	add	local02, #16
245c8     10 15 02 FB | 	rdlong	arg02, local02
245cc     10 20 86 F1 | 	sub	local02, #16
245d0     0F 13 02 F6 | 	mov	arg01, local01
245d4     11 17 02 F6 | 	mov	arg03, local03
245d8     F2 28 02 F6 | 	mov	local06, objptr
245dc     13 E5 01 F6 | 	mov	objptr, local05
245e0     2D 24 62 FD | 	call	local04
245e4     14 E5 01 F6 | 	mov	objptr, local06
245e8     58 00 90 FD | 	jmp	#LR__3464
245ec                 | LR__3462
245ec     08 20 06 F1 | 	add	local02, #8
245f0     10 29 02 FB | 	rdlong	local06, local02
245f4     08 20 86 F1 | 	sub	local02, #8
245f8     01 28 CE F7 | 	test	local06, #1 wz
245fc     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
24600     40 00 90 AD |  if_e	jmp	#LR__3463
24604     30 1E 06 F1 | 	add	local01, #48
24608     0F 25 02 FB | 	rdlong	local04, local01
2460c     12 27 02 F6 | 	mov	local05, local04
24610     30 1E 86 F1 | 	sub	local01, #48
24614     13 26 46 F7 | 	zerox	local05, #19
24618     14 24 46 F0 | 	shr	local04, #20
2461c     02 24 66 F0 | 	shl	local04, #2
24620     ED 24 02 F1 | 	add	local04, __methods__
24624     12 25 02 FB | 	rdlong	local04, local04
24628     0F 13 02 F6 | 	mov	arg01, local01
2462c     11 15 62 F6 | 	neg	arg02, local03
24630     01 16 06 F6 | 	mov	arg03, #1
24634     F2 28 02 F6 | 	mov	local06, objptr
24638     13 E5 01 F6 | 	mov	objptr, local05
2463c     2D 24 62 FD | 	call	local04
24640     14 E5 01 F6 | 	mov	objptr, local06
24644                 | LR__3463
24644                 | LR__3464
24644     10 01 68 FC | 	wrlong	#0, local02
24648     04 20 06 F1 | 	add	local02, #4
2464c     10 01 68 FC | 	wrlong	#0, local02
24650     04 20 06 F1 | 	add	local02, #4
24654     10 01 68 FC | 	wrlong	#0, local02
24658     00 FA 05 F6 | 	mov	result1, #0
2465c     A7 F0 03 F6 | 	mov	ptra, fp
24660     B2 00 A0 FD | 	call	#popregs_
24664                 | __system____default_flush_ret
24664     2D 00 64 FD | 	ret
24668                 | 
24668                 | __system____default_buffer_init
24668     02 4A 05 F6 | 	mov	COUNT_, #2
2466c     A8 00 A0 FD | 	call	#pushregs_
24670     09 1F 02 F6 | 	mov	local01, arg01
24674     0F 21 02 FB | 	rdlong	local02, local01
24678     0F 13 02 F6 | 	mov	arg01, local01
2467c     F8 02 B0 FD | 	call	#__system___isatty
24680     00 FA 0D F2 | 	cmp	result1, #0 wz
24684     06 1E 06 51 |  if_ne	add	local01, #6
24688     0F 0B 58 5C |  if_ne	wrword	#5, local01
2468c     06 1E 06 A1 |  if_e	add	local01, #6
24690     0F 0D 58 AC |  if_e	wrword	#6, local01
24694     14 20 06 F1 | 	add	local02, #20
24698     10 1F 02 F6 | 	mov	local01, local02
2469c     04 20 86 F1 | 	sub	local02, #4
246a0     10 1F 62 FC | 	wrlong	local01, local02
246a4     04 20 86 F1 | 	sub	local02, #4
246a8     02 00 80 FF 
246ac     10 01 68 FC | 	wrlong	##1024, local02
246b0     00 FA 05 F6 | 	mov	result1, #0
246b4     A7 F0 03 F6 | 	mov	ptra, fp
246b8     B2 00 A0 FD | 	call	#popregs_
246bc                 | __system____default_buffer_init_ret
246bc     2D 00 64 FD | 	ret
246c0                 | 
246c0                 | __system__stat
246c0     04 4A 05 F6 | 	mov	COUNT_, #4
246c4     A8 00 A0 FD | 	call	#pushregs_
246c8     0A 1F 02 F6 | 	mov	local01, arg02
246cc     84 E7 05 F1 | 	add	ptr___system__dat__, #388
246d0     F3 20 02 F6 | 	mov	local02, ptr___system__dat__
246d4     09 15 02 F6 | 	mov	arg02, arg01
246d8     10 13 02 F6 | 	mov	arg01, local02
246dc     00 16 06 F6 | 	mov	arg03, #0
246e0     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
246e4     AC B8 BF FD | 	call	#__system____getvfsforfile
246e8     FD 22 0A F6 | 	mov	local03, result1 wz
246ec     10 00 90 AD |  if_e	jmp	#LR__3470
246f0     34 22 06 F1 | 	add	local03, #52
246f4     11 17 0A FB | 	rdlong	arg03, local03 wz
246f8     34 22 86 F1 | 	sub	local03, #52
246fc     14 00 90 5D |  if_ne	jmp	#LR__3471
24700                 | LR__3470
24700     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24704     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
24708     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2470c     01 FA 65 F6 | 	neg	result1, #1
24710     68 00 90 FD | 	jmp	#LR__3472
24714                 | LR__3471
24714     0F 13 02 F6 | 	mov	arg01, local01
24718     00 14 06 F6 | 	mov	arg02, #0
2471c     30 16 06 F6 | 	mov	arg03, #48
24720     09 25 02 F6 | 	mov	local04, arg01
24724     98 00 A0 FD | 	call	#\builtin_bytefill_
24728     12 FB 01 F6 | 	mov	result1, local04
2472c     10 13 CA FA | 	rdbyte	arg01, local02 wz
24730     08 1E 06 A1 |  if_e	add	local01, #8
24734     08 00 80 AF 
24738     0F FF 6B AC |  if_e	wrlong	##4607, local01
2473c     00 FA 05 A6 |  if_e	mov	result1, #0
24740     38 00 90 AD |  if_e	jmp	#LR__3472
24744     34 22 06 F1 | 	add	local03, #52
24748     11 23 02 FB | 	rdlong	local03, local03
2474c     11 25 02 F6 | 	mov	local04, local03
24750     13 22 46 F7 | 	zerox	local03, #19
24754     14 24 46 F0 | 	shr	local04, #20
24758     02 24 66 F0 | 	shl	local04, #2
2475c     ED 24 02 F1 | 	add	local04, __methods__
24760     12 25 02 FB | 	rdlong	local04, local04
24764     10 13 02 F6 | 	mov	arg01, local02
24768     0F 15 02 F6 | 	mov	arg02, local01
2476c     F2 20 02 F6 | 	mov	local02, objptr
24770     11 E5 01 F6 | 	mov	objptr, local03
24774     2D 24 62 FD | 	call	local04
24778     10 E5 01 F6 | 	mov	objptr, local02
2477c                 | LR__3472
2477c     A7 F0 03 F6 | 	mov	ptra, fp
24780     B2 00 A0 FD | 	call	#popregs_
24784                 | __system__stat_ret
24784     2D 00 64 FD | 	ret
24788                 | 
24788                 | __system__read
24788     0A 12 16 F2 | 	cmp	arg01, #10 wc
2478c     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
24790     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
24794     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
24798     01 FA 65 36 |  if_ae	neg	result1, #1
2479c     20 00 90 3D |  if_ae	jmp	#LR__3480
247a0     34 12 06 FD | 	qmul	arg01, #52
247a4     02 00 00 FF 
247a8     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
247ac     18 12 62 FD | 	getqx	arg01
247b0     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
247b4     02 00 00 FF 
247b8     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
247bc     D0 0F B0 FD | 	call	#__system___vfsread
247c0                 | LR__3480
247c0                 | __system__read_ret
247c0     2D 00 64 FD | 	ret
247c4                 | 
247c4                 | __system__close
247c4     0A 12 16 F2 | 	cmp	arg01, #10 wc
247c8     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
247cc     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
247d0     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
247d4     01 FA 65 36 |  if_ae	neg	result1, #1
247d8     20 00 90 3D |  if_ae	jmp	#LR__3490
247dc     34 12 06 FD | 	qmul	arg01, #52
247e0     02 00 00 FF 
247e4     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
247e8     18 12 62 FD | 	getqx	arg01
247ec     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
247f0     02 00 00 FF 
247f4     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
247f8     4C F9 BF FD | 	call	#__system___closeraw
247fc                 | LR__3490
247fc                 | __system__close_ret
247fc     2D 00 64 FD | 	ret
24800                 | 
24800                 | __system__lseek
24800     06 4A 05 F6 | 	mov	COUNT_, #6
24804     A8 00 A0 FD | 	call	#pushregs_
24808     0A 12 16 F2 | 	cmp	arg01, #10 wc
2480c     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
24810     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
24814     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
24818     01 FA 65 36 |  if_ae	neg	result1, #1
2481c     C4 00 90 3D |  if_ae	jmp	#LR__3501
24820     34 12 06 FD | 	qmul	arg01, #52
24824     02 00 00 FF 
24828     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
2482c     18 1E 62 FD | 	getqx	local01
24830     F3 1E 02 F1 | 	add	local01, ptr___system__dat__
24834     30 1E 06 F1 | 	add	local01, #48
24838     0F 13 0A FB | 	rdlong	arg01, local01 wz
2483c     30 1E 86 F1 | 	sub	local01, #48
24840     02 00 00 FF 
24844     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
24848     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2484c     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
24850     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
24854     01 FA 65 A6 |  if_e	neg	result1, #1
24858     88 00 90 AD |  if_e	jmp	#LR__3501
2485c     08 1E 06 F1 | 	add	local01, #8
24860     0F 21 02 FB | 	rdlong	local02, local01
24864     08 1E 86 F1 | 	sub	local01, #8
24868     40 20 CE F7 | 	test	local02, #64 wz
2486c     08 1E 06 51 |  if_ne	add	local01, #8
24870     0F 21 02 5B |  if_ne	rdlong	local02, local01
24874     80 20 46 55 |  if_ne	or	local02, #128
24878     0F 21 62 5C |  if_ne	wrlong	local02, local01
2487c     08 1E 86 51 |  if_ne	sub	local01, #8
24880     30 1E 06 F1 | 	add	local01, #48
24884     0F 23 02 FB | 	rdlong	local03, local01
24888     11 25 02 F6 | 	mov	local04, local03
2488c     30 1E 86 F1 | 	sub	local01, #48
24890     13 24 46 F7 | 	zerox	local04, #19
24894     14 22 46 F0 | 	shr	local03, #20
24898     02 22 66 F0 | 	shl	local03, #2
2489c     ED 22 02 F1 | 	add	local03, __methods__
248a0     11 23 02 FB | 	rdlong	local03, local03
248a4     0F 13 02 F6 | 	mov	arg01, local01
248a8     F2 26 02 F6 | 	mov	local05, objptr
248ac     12 E5 01 F6 | 	mov	objptr, local04
248b0     2D 22 62 FD | 	call	local03
248b4     13 E5 01 F6 | 	mov	objptr, local05
248b8     FD 28 02 F6 | 	mov	local06, result1
248bc     00 28 56 F2 | 	cmps	local06, #0 wc
248c0     1C 00 90 3D |  if_ae	jmp	#LR__3500
248c4     14 13 6A F6 | 	neg	arg01, local06 wz
248c8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
248cc     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
248d0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
248d4     01 FA 65 56 |  if_ne	neg	result1, #1
248d8     00 FA 05 A6 |  if_e	mov	result1, #0
248dc     04 00 90 FD | 	jmp	#LR__3501
248e0                 | LR__3500
248e0     14 FB 01 F6 | 	mov	result1, local06
248e4                 | LR__3501
248e4     A7 F0 03 F6 | 	mov	ptra, fp
248e8     B2 00 A0 FD | 	call	#popregs_
248ec                 | __system__lseek_ret
248ec     2D 00 64 FD | 	ret
248f0                 | 
248f0                 | __system___ioctl
248f0     03 4A 05 F6 | 	mov	COUNT_, #3
248f4     A8 00 A0 FD | 	call	#pushregs_
248f8     00 12 4E F2 | 	cmps	arg01, #0 wz
248fc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
24900     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
24904     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
24908     01 FA 65 A6 |  if_e	neg	result1, #1
2490c     5C 00 90 AD |  if_e	jmp	#LR__3511
24910     28 12 06 F1 | 	add	arg01, #40
24914     09 1F 02 FB | 	rdlong	local01, arg01
24918     0F 21 02 F6 | 	mov	local02, local01
2491c     28 12 86 F1 | 	sub	arg01, #40
24920     13 20 46 F7 | 	zerox	local02, #19
24924     14 1E 46 F0 | 	shr	local01, #20
24928     02 1E 66 F0 | 	shl	local01, #2
2492c     ED 1E 02 F1 | 	add	local01, __methods__
24930     0F 1F 02 FB | 	rdlong	local01, local01
24934     F2 22 02 F6 | 	mov	local03, objptr
24938     10 E5 01 F6 | 	mov	objptr, local02
2493c     2D 1E 62 FD | 	call	local01
24940     11 E5 01 F6 | 	mov	objptr, local03
24944     FD 12 0A F6 | 	mov	arg01, result1 wz
24948     1C 00 90 AD |  if_e	jmp	#LR__3510
2494c     00 12 4E F2 | 	cmps	arg01, #0 wz
24950     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24954     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
24958     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2495c     01 FA 65 56 |  if_ne	neg	result1, #1
24960     00 FA 05 A6 |  if_e	mov	result1, #0
24964     04 00 90 FD | 	jmp	#LR__3511
24968                 | LR__3510
24968     00 FA 05 F6 | 	mov	result1, #0
2496c                 | LR__3511
2496c     A7 F0 03 F6 | 	mov	ptra, fp
24970     B2 00 A0 FD | 	call	#popregs_
24974                 | __system___ioctl_ret
24974     2D 00 64 FD | 	ret
24978                 | 
24978                 | __system___isatty
24978     00 4A 05 F6 | 	mov	COUNT_, #0
2497c     A8 00 A0 FD | 	call	#pushregs_
24980     0C F0 07 F1 | 	add	ptra, #12
24984     04 4E 05 F1 | 	add	fp, #4
24988     A7 12 62 FC | 	wrlong	arg01, fp
2498c     04 4E 05 F1 | 	add	fp, #4
24990     A7 16 02 F6 | 	mov	arg03, fp
24994     08 4E 85 F1 | 	sub	fp, #8
24998     00 15 06 F6 | 	mov	arg02, #256
2499c     50 FF BF FD | 	call	#__system___ioctl
249a0     00 FA 0D F2 | 	cmp	result1, #0 wz
249a4     01 FA 05 A6 |  if_e	mov	result1, #1
249a8     00 FA 05 56 |  if_ne	mov	result1, #0
249ac     A7 F0 03 F6 | 	mov	ptra, fp
249b0     B2 00 A0 FD | 	call	#popregs_
249b4                 | __system___isatty_ret
249b4     2D 00 64 FD | 	ret
249b8                 | 
249b8                 | __system____getftab
249b8     0A 12 16 F2 | 	cmp	arg01, #10 wc
249bc     34 12 06 CD |  if_b	qmul	arg01, #52
249c0     00 FA 05 36 |  if_ae	mov	result1, #0
249c4     02 00 00 CF 
249c8     20 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1312
249cc     18 FA 61 CD |  if_b	getqx	result1
249d0     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
249d4     02 00 00 CF 
249d8     20 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
249dc                 | __system____getftab_ret
249dc     2D 00 64 FD | 	ret
249e0                 | 
249e0                 | __system__strncpy
249e0     09 01 02 F6 | 	mov	_var01, arg01
249e4                 | LR__3520
249e4     01 16 86 F1 | 	sub	arg03, #1
249e8     00 16 56 F2 | 	cmps	arg03, #0 wc
249ec     18 00 90 CD |  if_b	jmp	#LR__3521
249f0     0A FB C1 FA | 	rdbyte	result1, arg02
249f4     00 FB 41 FC | 	wrbyte	result1, _var01
249f8     01 14 06 F1 | 	add	arg02, #1
249fc     00 FB C9 FA | 	rdbyte	result1, _var01 wz
24a00     01 00 06 F1 | 	add	_var01, #1
24a04     DC FF 9F 5D |  if_ne	jmp	#LR__3520
24a08                 | LR__3521
24a08     97 0C 48 FB | 	callpa	#(@LR__3523-@LR__3522)>>2,fcache_load_ptr_
24a0c                 | LR__3522
24a0c     01 16 86 F1 | 	sub	arg03, #1
24a10     00 16 56 F2 | 	cmps	arg03, #0 wc
24a14     00 03 02 36 |  if_ae	mov	_var02, _var01
24a18     01 00 06 31 |  if_ae	add	_var01, #1
24a1c     01 01 48 3C |  if_ae	wrbyte	#0, _var02
24a20     E8 FF 9F 3D |  if_ae	jmp	#LR__3522
24a24                 | LR__3523
24a24     09 FB 01 F6 | 	mov	result1, arg01
24a28                 | __system__strncpy_ret
24a28     2D 00 64 FD | 	ret
24a2c                 | 
24a2c                 | __system__strncat
24a2c     00 14 4E F2 | 	cmps	arg02, #0 wz
24a30     50 00 90 AD |  if_e	jmp	#LR__3534
24a34     01 16 16 F2 | 	cmp	arg03, #1 wc
24a38     48 00 90 CD |  if_b	jmp	#LR__3534
24a3c     09 01 02 F6 | 	mov	_var01, arg01
24a40     97 1E 48 FB | 	callpa	#(@LR__3532-@LR__3530)>>2,fcache_load_ptr_
24a44                 | LR__3530
24a44     00 FB C9 FA | 	rdbyte	result1, _var01 wz
24a48     01 00 06 51 |  if_ne	add	_var01, #1
24a4c     F4 FF 9F 5D |  if_ne	jmp	#LR__3530
24a50     0B 03 02 F6 | 	mov	_var02, arg03
24a54                 | LR__3531
24a54     0A 05 C2 FA | 	rdbyte	_var03, arg02
24a58     02 07 02 F6 | 	mov	_var04, _var03
24a5c     07 06 4E F7 | 	zerox	_var04, #7 wz
24a60     01 14 06 F1 | 	add	arg02, #1
24a64     18 00 90 AD |  if_e	jmp	#LR__3533
24a68     01 02 86 F1 | 	sub	_var02, #1
24a6c     00 02 56 F2 | 	cmps	_var02, #0 wc
24a70     00 07 02 36 |  if_ae	mov	_var04, _var01
24a74     01 00 06 31 |  if_ae	add	_var01, #1
24a78     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
24a7c     D4 FF 9F 3D |  if_ae	jmp	#LR__3531
24a80                 | LR__3532
24a80                 | LR__3533
24a80     00 01 48 FC | 	wrbyte	#0, _var01
24a84                 | LR__3534
24a84     09 FB 01 F6 | 	mov	result1, arg01
24a88                 | __system__strncat_ret
24a88     2D 00 64 FD | 	ret
24a8c                 | 
24a8c                 | __system__strncmp
24a8c     09 01 0A F6 | 	mov	_var01, arg01 wz
24a90     14 00 90 5D |  if_ne	jmp	#LR__3540
24a94     00 14 0E F2 | 	cmp	arg02, #0 wz
24a98     01 02 66 56 |  if_ne	neg	_var02, #1
24a9c     00 02 06 A6 |  if_e	mov	_var02, #0
24aa0     01 FB 01 F6 | 	mov	result1, _var02
24aa4     74 00 90 FD | 	jmp	#__system__strncmp_ret
24aa8                 | LR__3540
24aa8     00 14 0E F2 | 	cmp	arg02, #0 wz
24aac     01 FA 05 A6 |  if_e	mov	result1, #1
24ab0     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
24ab4     0B 05 02 F6 | 	mov	_var03, arg03
24ab8     97 16 48 FB | 	callpa	#(@LR__3542-@LR__3541)>>2,fcache_load_ptr_
24abc                 | LR__3541
24abc     00 07 C2 FA | 	rdbyte	_var04, _var01
24ac0     0A 09 02 F6 | 	mov	_var05, arg02
24ac4     04 0B C2 FA | 	rdbyte	_var06, _var05
24ac8     01 04 86 F1 | 	sub	_var03, #1
24acc     00 04 56 F2 | 	cmps	_var03, #0 wc
24ad0     01 00 06 F1 | 	add	_var01, #1
24ad4     01 14 06 F1 | 	add	arg02, #1
24ad8     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
24adc     08 00 90 2D |  if_nc_and_z	jmp	#LR__3543
24ae0     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
24ae4     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3541
24ae8                 | LR__3542
24ae8                 | LR__3543
24ae8     00 04 56 F2 | 	cmps	_var03, #0 wc
24aec     00 FA 05 C6 |  if_b	mov	result1, #0
24af0     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
24af4     05 07 0A F2 | 	cmp	_var04, _var06 wz
24af8     00 FA 05 A6 |  if_e	mov	result1, #0
24afc     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
24b00     00 06 0E F2 | 	cmp	_var04, #0 wz
24b04     01 FA 65 A6 |  if_e	neg	result1, #1
24b08     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
24b0c     00 0A 0E F2 | 	cmp	_var06, #0 wz
24b10     01 FA 05 A6 |  if_e	mov	result1, #1
24b14     03 FB 01 56 |  if_ne	mov	result1, _var04
24b18     05 FB 81 51 |  if_ne	sub	result1, _var06
24b1c                 | __system__strncmp_ret
24b1c     2D 00 64 FD | 	ret
24b20                 | 
24b20                 | __system____root_opendir
24b20     64 E6 05 F1 | 	add	ptr___system__dat__, #100
24b24     04 12 06 F1 | 	add	arg01, #4
24b28     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
24b2c     00 FA 05 F6 | 	mov	result1, #0
24b30     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
24b34                 | __system____root_opendir_ret
24b34     2D 00 64 FD | 	ret
24b38                 | 
24b38                 | __system____root_readdir
24b38     03 4A 05 F6 | 	mov	COUNT_, #3
24b3c     A8 00 A0 FD | 	call	#pushregs_
24b40     09 1F 02 F6 | 	mov	local01, arg01
24b44     0A 21 02 F6 | 	mov	local02, arg02
24b48     04 1E 06 F1 | 	add	local01, #4
24b4c     0F 23 02 FB | 	rdlong	local03, local01
24b50     04 1E 86 F1 | 	sub	local01, #4
24b54                 | LR__3550
24b54     74 E6 05 F1 | 	add	ptr___system__dat__, #116
24b58     F3 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
24b5c     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
24b60     01 FA 65 A6 |  if_e	neg	result1, #1
24b64     48 00 90 AD |  if_e	jmp	#LR__3551
24b68     11 17 0A FB | 	rdlong	arg03, local03 wz
24b6c     04 22 06 A1 |  if_e	add	local03, #4
24b70     E0 FF 9F AD |  if_e	jmp	#LR__3550
24b74     11 15 02 FB | 	rdlong	arg02, local03
24b78     01 14 06 F1 | 	add	arg02, #1
24b7c     10 13 02 F6 | 	mov	arg01, local02
24b80     40 16 06 F6 | 	mov	arg03, #64
24b84     58 FE BF FD | 	call	#__system__strncpy
24b88     50 20 06 F1 | 	add	local02, #80
24b8c     10 03 48 FC | 	wrbyte	#1, local02
24b90     08 20 86 F1 | 	sub	local02, #8
24b94     10 01 68 FC | 	wrlong	#0, local02
24b98     04 20 06 F1 | 	add	local02, #4
24b9c     10 01 68 FC | 	wrlong	#0, local02
24ba0     04 22 06 F1 | 	add	local03, #4
24ba4     04 1E 06 F1 | 	add	local01, #4
24ba8     0F 23 62 FC | 	wrlong	local03, local01
24bac     00 FA 05 F6 | 	mov	result1, #0
24bb0                 | LR__3551
24bb0     A7 F0 03 F6 | 	mov	ptra, fp
24bb4     B2 00 A0 FD | 	call	#popregs_
24bb8                 | __system____root_readdir_ret
24bb8     2D 00 64 FD | 	ret
24bbc                 | 
24bbc                 | __system____root_closedir
24bbc     00 FA 05 F6 | 	mov	result1, #0
24bc0                 | __system____root_closedir_ret
24bc0     2D 00 64 FD | 	ret
24bc4                 | 
24bc4                 | __system____root_stat
24bc4     0A 01 02 F6 | 	mov	_var01, arg02
24bc8     00 13 02 F6 | 	mov	arg01, _var01
24bcc     00 14 06 F6 | 	mov	arg02, #0
24bd0     30 16 06 F6 | 	mov	arg03, #48
24bd4     98 00 A0 FD | 	call	#\builtin_bytefill_
24bd8     08 00 06 F1 | 	add	_var01, #8
24bdc     08 00 80 FF 
24be0     00 FF 6B FC | 	wrlong	##4607, _var01
24be4     00 FA 05 F6 | 	mov	result1, #0
24be8                 | __system____root_stat_ret
24be8     2D 00 64 FD | 	ret
24bec                 | 
24bec                 | __system___normalizeName
24bec     00 00 06 F6 | 	mov	_var01, #0
24bf0     09 03 02 F6 | 	mov	_var02, arg01
24bf4     01 05 02 F6 | 	mov	_var03, _var02
24bf8                 | LR__3560
24bf8     01 07 CA FA | 	rdbyte	_var04, _var02 wz
24bfc     5C 01 90 AD |  if_e	jmp	#LR__3579
24c00     00 00 0E F2 | 	cmp	_var01, #0 wz
24c04     02 07 02 56 |  if_ne	mov	_var04, _var03
24c08     01 04 06 51 |  if_ne	add	_var03, #1
24c0c     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
24c10     00 00 06 56 |  if_ne	mov	_var01, #0
24c14     01 07 C2 FA | 	rdbyte	_var04, _var02
24c18     2E 06 0E F2 | 	cmp	_var04, #46 wz
24c1c     D8 00 90 5D |  if_ne	jmp	#LR__3572
24c20     01 02 06 F1 | 	add	_var02, #1
24c24     01 07 C2 FA | 	rdbyte	_var04, _var02
24c28     01 02 86 F1 | 	sub	_var02, #1
24c2c     2F 06 0E F2 | 	cmp	_var04, #47 wz
24c30     18 00 90 AD |  if_e	jmp	#LR__3561
24c34     01 02 06 F1 | 	add	_var02, #1
24c38     01 09 C2 FA | 	rdbyte	_var05, _var02
24c3c     01 02 86 F1 | 	sub	_var02, #1
24c40     04 0B 02 F6 | 	mov	_var06, _var05
24c44     07 0A 4E F7 | 	zerox	_var06, #7 wz
24c48     10 00 90 5D |  if_ne	jmp	#LR__3562
24c4c                 | LR__3561
24c4c     01 0D 02 F6 | 	mov	_var07, _var02
24c50     01 0C 06 F1 | 	add	_var07, #1
24c54     06 03 02 F6 | 	mov	_var02, _var07
24c58     E0 00 90 FD | 	jmp	#LR__3576
24c5c                 | LR__3562
24c5c     01 02 06 F1 | 	add	_var02, #1
24c60     01 0D C2 FA | 	rdbyte	_var07, _var02
24c64     01 02 86 F1 | 	sub	_var02, #1
24c68     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
24c6c     2E 06 0E F2 | 	cmp	_var04, #46 wz
24c70     84 00 90 5D |  if_ne	jmp	#LR__3571
24c74     02 02 06 F1 | 	add	_var02, #2
24c78     01 0D C2 FA | 	rdbyte	_var07, _var02
24c7c     02 02 86 F1 | 	sub	_var02, #2
24c80     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
24c84     2F 06 0E F2 | 	cmp	_var04, #47 wz
24c88     18 00 90 AD |  if_e	jmp	#LR__3563
24c8c     02 02 06 F1 | 	add	_var02, #2
24c90     01 09 C2 FA | 	rdbyte	_var05, _var02
24c94     02 02 86 F1 | 	sub	_var02, #2
24c98     04 0B 02 F6 | 	mov	_var06, _var05
24c9c     07 0A 4E F7 | 	zerox	_var06, #7 wz
24ca0     54 00 90 5D |  if_ne	jmp	#LR__3570
24ca4                 | LR__3563
24ca4     02 02 06 F1 | 	add	_var02, #2
24ca8     09 05 5A F2 | 	cmps	_var03, arg01 wcz
24cac     40 00 90 ED |  if_be	jmp	#LR__3569
24cb0     02 0F 02 F6 | 	mov	_var08, _var03
24cb4     01 0E 86 F1 | 	sub	_var08, #1
24cb8                 | LR__3564
24cb8     07 07 C2 FA | 	rdbyte	_var04, _var08
24cbc     2F 06 0E F2 | 	cmp	_var04, #47 wz
24cc0     0C 00 90 5D |  if_ne	jmp	#LR__3565
24cc4     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
24cc8     01 0E 86 11 |  if_a	sub	_var08, #1
24ccc     E8 FF 9F 1D |  if_a	jmp	#LR__3564
24cd0                 | LR__3565
24cd0     97 0C 48 FB | 	callpa	#(@LR__3567-@LR__3566)>>2,fcache_load_ptr_
24cd4                 | LR__3566
24cd4     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
24cd8     10 00 90 ED |  if_be	jmp	#LR__3568
24cdc     07 07 C2 FA | 	rdbyte	_var04, _var08
24ce0     2F 06 0E F2 | 	cmp	_var04, #47 wz
24ce4     01 0E 86 51 |  if_ne	sub	_var08, #1
24ce8     E8 FF 9F 5D |  if_ne	jmp	#LR__3566
24cec                 | LR__3567
24cec                 | LR__3568
24cec     07 05 02 F6 | 	mov	_var03, _var08
24cf0                 | LR__3569
24cf0     01 00 06 F6 | 	mov	_var01, #1
24cf4     44 00 90 FD | 	jmp	#LR__3576
24cf8                 | LR__3570
24cf8                 | LR__3571
24cf8                 | LR__3572
24cf8     97 18 48 FB | 	callpa	#(@LR__3574-@LR__3573)>>2,fcache_load_ptr_
24cfc                 | LR__3573
24cfc     01 07 CA FA | 	rdbyte	_var04, _var02 wz
24d00     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
24d04     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
24d08     20 00 90 AD |  if_e	jmp	#LR__3575
24d0c     01 0B 02 F6 | 	mov	_var06, _var02
24d10     01 09 02 F6 | 	mov	_var05, _var02
24d14     01 08 06 F1 | 	add	_var05, #1
24d18     05 11 C2 FA | 	rdbyte	_var09, _var06
24d1c     04 03 02 F6 | 	mov	_var02, _var05
24d20     02 11 42 FC | 	wrbyte	_var09, _var03
24d24     01 04 06 F1 | 	add	_var03, #1
24d28     D0 FF 9F FD | 	jmp	#LR__3573
24d2c                 | LR__3574
24d2c                 | LR__3575
24d2c     01 07 C2 FA | 	rdbyte	_var04, _var02
24d30     2F 06 0E F2 | 	cmp	_var04, #47 wz
24d34     C0 FE 9F 5D |  if_ne	jmp	#LR__3560
24d38     01 00 06 F6 | 	mov	_var01, #1
24d3c                 | LR__3576
24d3c     97 0C 48 FB | 	callpa	#(@LR__3578-@LR__3577)>>2,fcache_load_ptr_
24d40                 | LR__3577
24d40     01 07 C2 FA | 	rdbyte	_var04, _var02
24d44     2F 06 0E F2 | 	cmp	_var04, #47 wz
24d48     01 0D 02 A6 |  if_e	mov	_var07, _var02
24d4c     01 0C 06 A1 |  if_e	add	_var07, #1
24d50     06 03 02 A6 |  if_e	mov	_var02, _var07
24d54     E8 FF 9F AD |  if_e	jmp	#LR__3577
24d58                 | LR__3578
24d58     9C FE 9F FD | 	jmp	#LR__3560
24d5c                 | LR__3579
24d5c     02 01 48 FC | 	wrbyte	#0, _var03
24d60                 | __system___normalizeName_ret
24d60     2D 00 64 FD | 	ret
24d64                 | 
24d64                 | __system___strrev
24d64     09 01 CA FA | 	rdbyte	_var01, arg01 wz
24d68     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
24d6c     09 03 02 F6 | 	mov	_var02, arg01
24d70     97 1A 48 FB | 	callpa	#(@LR__3582-@LR__3580)>>2,fcache_load_ptr_
24d74                 | LR__3580
24d74     01 01 CA FA | 	rdbyte	_var01, _var02 wz
24d78     01 02 06 51 |  if_ne	add	_var02, #1
24d7c     F4 FF 9F 5D |  if_ne	jmp	#LR__3580
24d80     01 02 86 F1 | 	sub	_var02, #1
24d84                 | LR__3581
24d84     09 03 5A F2 | 	cmps	_var02, arg01 wcz
24d88     1C 00 90 ED |  if_be	jmp	#LR__3583
24d8c     09 01 C2 FA | 	rdbyte	_var01, arg01
24d90     01 05 C2 FA | 	rdbyte	_var03, _var02
24d94     09 05 42 FC | 	wrbyte	_var03, arg01
24d98     01 01 42 FC | 	wrbyte	_var01, _var02
24d9c     01 12 06 F1 | 	add	arg01, #1
24da0     01 02 86 F1 | 	sub	_var02, #1
24da4     DC FF 9F FD | 	jmp	#LR__3581
24da8                 | LR__3582
24da8                 | LR__3583
24da8                 | __system___strrev_ret
24da8     2D 00 64 FD | 	ret
24dac                 | 
24dac                 | __system___fmtpad
24dac     06 4A 05 F6 | 	mov	COUNT_, #6
24db0     A8 00 A0 FD | 	call	#pushregs_
24db4     09 1F 02 F6 | 	mov	local01, arg01
24db8     0A 21 02 F6 | 	mov	local02, arg02
24dbc     0B 23 02 F6 | 	mov	local03, arg03
24dc0     10 13 EA F8 | 	getbyte	arg01, local02, #1
24dc4     16 20 46 F0 | 	shr	local02, #22
24dc8     03 20 0E F5 | 	and	local02, #3 wz
24dcc     00 24 06 F6 | 	mov	local04, #0
24dd0     01 20 06 A6 |  if_e	mov	local02, #1
24dd4     0C 21 CA F7 | 	test	local02, arg04 wz
24dd8     00 FA 05 A6 |  if_e	mov	result1, #0
24ddc     88 00 90 AD |  if_e	jmp	#LR__3593
24de0     09 23 C2 F2 | 	subr	local03, arg01
24de4     01 22 56 F2 | 	cmps	local03, #1 wc
24de8     00 FA 05 C6 |  if_b	mov	result1, #0
24dec     78 00 90 CD |  if_b	jmp	#LR__3593
24df0     03 20 0E F2 | 	cmp	local02, #3 wz
24df4     18 00 90 5D |  if_ne	jmp	#LR__3590
24df8     01 18 0E F2 | 	cmp	arg04, #1 wz
24dfc     6E 20 62 FD | 	wrz	local02
24e00     10 23 02 F1 | 	add	local03, local02
24e04     11 23 52 F6 | 	abs	local03, local03 wc
24e08     01 22 46 F0 | 	shr	local03, #1
24e0c     11 23 82 F6 | 	negc	local03, local03
24e10                 | LR__3590
24e10     01 22 56 F2 | 	cmps	local03, #1 wc
24e14     4C 00 90 CD |  if_b	jmp	#LR__3592
24e18     11 27 02 F6 | 	mov	local05, local03
24e1c                 | LR__3591
24e1c     0F 21 02 F6 | 	mov	local02, local01
24e20     0F 29 02 F6 | 	mov	local06, local01
24e24     13 20 46 F7 | 	zerox	local02, #19
24e28     14 28 46 F0 | 	shr	local06, #20
24e2c     02 28 66 F0 | 	shl	local06, #2
24e30     ED 28 02 F1 | 	add	local06, __methods__
24e34     14 29 02 FB | 	rdlong	local06, local06
24e38     20 12 06 F6 | 	mov	arg01, #32
24e3c     F2 22 02 F6 | 	mov	local03, objptr
24e40     10 E5 01 F6 | 	mov	objptr, local02
24e44     2D 28 62 FD | 	call	local06
24e48     11 E5 01 F6 | 	mov	objptr, local03
24e4c     FD 28 02 F6 | 	mov	local06, result1
24e50     00 28 56 F2 | 	cmps	local06, #0 wc
24e54     14 FB 01 C6 |  if_b	mov	result1, local06
24e58     0C 00 90 CD |  if_b	jmp	#LR__3593
24e5c     14 25 02 F1 | 	add	local04, local06
24e60     EE 27 6E FB | 	djnz	local05, #LR__3591
24e64                 | LR__3592
24e64     12 FB 01 F6 | 	mov	result1, local04
24e68                 | LR__3593
24e68     A7 F0 03 F6 | 	mov	ptra, fp
24e6c     B2 00 A0 FD | 	call	#popregs_
24e70                 | __system___fmtpad_ret
24e70     2D 00 64 FD | 	ret
24e74                 | 
24e74                 | __system___uitoa
24e74     04 4A 05 F6 | 	mov	COUNT_, #4
24e78     A8 00 A0 FD | 	call	#pushregs_
24e7c     09 1F 02 F6 | 	mov	local01, arg01
24e80     00 1A 4E F2 | 	cmps	arg05, #0 wz
24e84     0F 1B 02 F6 | 	mov	arg05, local01
24e88     00 20 06 F6 | 	mov	local02, #0
24e8c     37 22 06 56 |  if_ne	mov	local03, #55
24e90     57 22 06 A6 |  if_e	mov	local03, #87
24e94                 | LR__3600
24e94     0B 15 12 FD | 	qdiv	arg02, arg03
24e98     19 24 62 FD | 	getqy	local04
24e9c     0B 15 12 FD | 	qdiv	arg02, arg03
24ea0     0A 24 16 F2 | 	cmp	local04, #10 wc
24ea4     30 24 06 C1 |  if_b	add	local04, #48
24ea8     11 25 02 31 |  if_ae	add	local04, local03
24eac     0D 25 42 FC | 	wrbyte	local04, arg05
24eb0     01 1A 06 F1 | 	add	arg05, #1
24eb4     01 20 06 F1 | 	add	local02, #1
24eb8     18 14 62 FD | 	getqx	arg02
24ebc     00 14 0E F2 | 	cmp	arg02, #0 wz
24ec0     D0 FF 9F 5D |  if_ne	jmp	#LR__3600
24ec4     0C 21 12 F2 | 	cmp	local02, arg04 wc
24ec8     C8 FF 9F CD |  if_b	jmp	#LR__3600
24ecc     0D 01 48 FC | 	wrbyte	#0, arg05
24ed0     0F 13 02 F6 | 	mov	arg01, local01
24ed4     8C FE BF FD | 	call	#__system___strrev
24ed8     10 FB 01 F6 | 	mov	result1, local02
24edc     A7 F0 03 F6 | 	mov	ptra, fp
24ee0     B2 00 A0 FD | 	call	#popregs_
24ee4                 | __system___uitoa_ret
24ee4     2D 00 64 FD | 	ret
24ee8                 | 
24ee8                 | __system__disassemble_0466
24ee8     10 4A 05 F6 | 	mov	COUNT_, #16
24eec     A8 00 A0 FD | 	call	#pushregs_
24ef0     09 1F 02 F6 | 	mov	local01, arg01
24ef4     0A 21 02 F6 | 	mov	local02, arg02
24ef8     0B 23 02 F6 | 	mov	local03, arg03
24efc     0C 25 02 F6 | 	mov	local04, arg04
24f00     0D 27 02 F6 | 	mov	local05, arg05
24f04     13 13 52 F6 | 	abs	arg01, local05 wc
24f08     1F 28 C6 C9 |  if_b	decod	local06, #31
24f0c     00 28 06 36 |  if_ae	mov	local06, #0
24f10     2C D0 BF FD | 	call	#__system___float_fromuns
24f14     14 FB 61 F5 | 	xor	result1, local06
24f18     FD 2A 02 F6 | 	mov	local07, result1
24f1c     00 2C 06 F6 | 	mov	local08, #0
24f20     0F 13 02 F6 | 	mov	arg01, local01
24f24     00 14 06 F6 | 	mov	arg02, #0
24f28     01 16 06 F6 | 	mov	arg03, #1
24f2c     48 D8 BF FD | 	call	#__system___float_cmp
24f30     00 FA 0D F2 | 	cmp	result1, #0 wz
24f34     00 2E 06 A6 |  if_e	mov	local09, #0
24f38     10 01 68 AC |  if_e	wrlong	#0, local02
24f3c     11 2F 62 AC |  if_e	wrlong	local09, local03
24f40     8C 01 90 AD |  if_e	jmp	#LR__3622
24f44     0F 13 02 F6 | 	mov	arg01, local01
24f48     F8 DC BF FD | 	call	#__system____builtin_ilogb
24f4c     FD 30 02 F6 | 	mov	local10, result1
24f50     0A 26 0E F2 | 	cmp	local05, #10 wz
24f54     24 00 90 5D |  if_ne	jmp	#LR__3610
24f58     18 2F 02 F6 | 	mov	local09, local10
24f5c     01 2E 66 F0 | 	shl	local09, #1
24f60     18 2F 02 F1 | 	add	local09, local10
24f64     17 31 52 F6 | 	abs	local10, local09 wc
24f68     0A 30 16 FD | 	qdiv	local10, #10
24f6c     09 32 06 F6 | 	mov	local11, #9
24f70     18 30 62 FD | 	getqx	local10
24f74     18 31 82 F6 | 	negc	local10, local10
24f78     04 00 90 FD | 	jmp	#LR__3611
24f7c                 | LR__3610
24f7c     18 32 06 F6 | 	mov	local11, #24
24f80                 | LR__3611
24f80                 | LR__3612
24f80     08 2C 56 F2 | 	cmps	local08, #8 wc
24f84     01 2C 06 F1 | 	add	local08, #1
24f88     60 00 90 3D |  if_ae	jmp	#LR__3613
24f8c     00 C0 1F FF 
24f90     00 12 06 F6 | 	mov	arg01, ##1065353216
24f94     15 15 02 F6 | 	mov	arg02, local07
24f98     18 17 02 F6 | 	mov	arg03, local10
24f9c     88 E3 BF FD | 	call	#__system___float_pow_n
24fa0     FD 14 02 F6 | 	mov	arg02, result1
24fa4     0F 13 02 F6 | 	mov	arg01, local01
24fa8     9C D5 BF FD | 	call	#__system___float_div
24fac     FD 34 02 F6 | 	mov	local12, result1
24fb0     1A 13 02 F6 | 	mov	arg01, local12
24fb4     00 C0 1F FF 
24fb8     00 14 06 F6 | 	mov	arg02, ##1065353216
24fbc     01 16 06 F6 | 	mov	arg03, #1
24fc0     B4 D7 BF FD | 	call	#__system___float_cmp
24fc4     00 FA 55 F2 | 	cmps	result1, #0 wc
24fc8     01 30 86 C1 |  if_b	sub	local10, #1
24fcc     B0 FF 9F CD |  if_b	jmp	#LR__3612
24fd0     15 15 02 F6 | 	mov	arg02, local07
24fd4     1A 13 02 F6 | 	mov	arg01, local12
24fd8     01 16 66 F6 | 	neg	arg03, #1
24fdc     98 D7 BF FD | 	call	#__system___float_cmp
24fe0     00 FA 55 F2 | 	cmps	result1, #0 wc
24fe4     01 30 06 31 |  if_ae	add	local10, #1
24fe8     94 FF 9F 3D |  if_ae	jmp	#LR__3612
24fec                 | LR__3613
24fec     1A 13 02 F6 | 	mov	arg01, local12
24ff0     50 DC BF FD | 	call	#__system____builtin_ilogb
24ff4     FD 36 02 F6 | 	mov	local13, result1
24ff8     1A 39 02 F6 | 	mov	local14, local12
24ffc     17 39 06 F4 | 	bitl	local14, #279
25000     17 38 26 F4 | 	bith	local14, #23
25004     1B 39 62 F0 | 	shl	local14, local13
25008     02 26 0E F2 | 	cmp	local05, #2 wz
2500c     02 24 66 A0 |  if_e	shl	local04, #2
25010     00 3A 06 F6 | 	mov	local15, #0
25014     00 24 56 F2 | 	cmps	local04, #0 wc
25018     10 00 90 3D |  if_ae	jmp	#LR__3614
2501c     18 25 C2 F2 | 	subr	local04, local10
25020     00 24 56 F2 | 	cmps	local04, #0 wc
25024     A0 00 90 CD |  if_b	jmp	#LR__3621
25028     04 00 90 FD | 	jmp	#LR__3615
2502c                 | LR__3614
2502c     01 24 06 F1 | 	add	local04, #1
25030                 | LR__3615
25030     19 25 7A F3 | 	fles	local04, local11 wcz
25034     01 3C 06 F6 | 	mov	local16, #1
25038     97 22 48 FB | 	callpa	#(@LR__3617-@LR__3616)>>2,fcache_load_ptr_
2503c                 | LR__3616
2503c     00 40 00 FF 
25040     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
25044     38 00 90 3D |  if_ae	jmp	#LR__3618
25048     01 24 56 F2 | 	cmps	local04, #1 wc
2504c     01 24 86 F1 | 	sub	local04, #1
25050     2C 00 90 CD |  if_b	jmp	#LR__3618
25054     13 3B 02 FD | 	qmul	local15, local05
25058     1C 37 02 F6 | 	mov	local13, local14
2505c     17 36 46 F0 | 	shr	local13, #23
25060     17 39 06 F4 | 	bitl	local14, #279
25064     18 3A 62 FD | 	getqx	local15
25068     13 3D 02 FD | 	qmul	local16, local05
2506c     18 3C 62 FD | 	getqx	local16
25070     13 39 02 FD | 	qmul	local14, local05
25074     1B 3B 02 F1 | 	add	local15, local13
25078     18 38 62 FD | 	getqx	local14
2507c     BC FF 9F FD | 	jmp	#LR__3616
25080                 | LR__3617
25080                 | LR__3618
25080     13 2F 02 F6 | 	mov	local09, local05
25084     17 2E 66 F0 | 	shl	local09, #23
25088     17 37 52 F6 | 	abs	local13, local09 wc
2508c     01 36 46 F0 | 	shr	local13, #1
25090     1B 37 82 F6 | 	negc	local13, local13
25094     1B 39 1A F2 | 	cmp	local14, local13 wcz
25098     20 00 90 1D |  if_a	jmp	#LR__3619
2509c     17 26 66 F0 | 	shl	local05, #23
250a0     13 37 52 F6 | 	abs	local13, local05 wc
250a4     01 36 46 F0 | 	shr	local13, #1
250a8     1B 37 82 F6 | 	negc	local13, local13
250ac     1B 39 0A F2 | 	cmp	local14, local13 wz
250b0     14 00 90 5D |  if_ne	jmp	#LR__3620
250b4     01 3A CE F7 | 	test	local15, #1 wz
250b8     0C 00 90 AD |  if_e	jmp	#LR__3620
250bc                 | LR__3619
250bc     01 3A 06 F1 | 	add	local15, #1
250c0     1E 3B 0A F2 | 	cmp	local15, local16 wz
250c4     01 30 06 A1 |  if_e	add	local10, #1
250c8                 | LR__3620
250c8                 | LR__3621
250c8     10 3B 62 FC | 	wrlong	local15, local02
250cc     11 31 62 FC | 	wrlong	local10, local03
250d0                 | LR__3622
250d0     A7 F0 03 F6 | 	mov	ptra, fp
250d4     B2 00 A0 FD | 	call	#popregs_
250d8                 | __system__disassemble_0466_ret
250d8     2D 00 64 FD | 	ret
250dc                 | 
250dc                 | __system__emitsign_0468
250dc     00 FA 05 F6 | 	mov	result1, #0
250e0     00 14 0E F2 | 	cmp	arg02, #0 wz
250e4     09 01 02 56 |  if_ne	mov	_var01, arg01
250e8     01 12 06 51 |  if_ne	add	arg01, #1
250ec     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
250f0     01 FA 05 56 |  if_ne	mov	result1, #1
250f4     00 16 0E F2 | 	cmp	arg03, #0 wz
250f8     09 61 48 5C |  if_ne	wrbyte	#48, arg01
250fc     01 12 06 51 |  if_ne	add	arg01, #1
25100     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
25104     02 FA 05 51 |  if_ne	add	result1, #2
25108                 | __system__emitsign_0468_ret
25108     2D 00 64 FD | 	ret
2510c                 | 
2510c                 | __system___gettxfunc
2510c     01 4A 05 F6 | 	mov	COUNT_, #1
25110     A8 00 A0 FD | 	call	#pushregs_
25114     A0 F8 BF FD | 	call	#__system____getftab
25118     FD 1E 0A F6 | 	mov	local01, result1 wz
2511c     10 00 90 AD |  if_e	jmp	#LR__3630
25120     08 1E 06 F1 | 	add	local01, #8
25124     0F 15 0A FB | 	rdlong	arg02, local01 wz
25128     08 1E 86 F1 | 	sub	local01, #8
2512c     08 00 90 5D |  if_ne	jmp	#LR__3631
25130                 | LR__3630
25130     00 FA 05 F6 | 	mov	result1, #0
25134     0C 00 90 FD | 	jmp	#LR__3632
25138                 | LR__3631
25138     00 68 04 FF 
2513c     00 1E 46 F5 | 	or	local01, ##147849216
25140     0F FB 01 F6 | 	mov	result1, local01
25144                 | LR__3632
25144     A7 F0 03 F6 | 	mov	ptra, fp
25148     B2 00 A0 FD | 	call	#popregs_
2514c                 | __system___gettxfunc_ret
2514c     2D 00 64 FD | 	ret
25150                 | 
25150                 | __system___getrxfunc
25150     01 4A 05 F6 | 	mov	COUNT_, #1
25154     A8 00 A0 FD | 	call	#pushregs_
25158     5C F8 BF FD | 	call	#__system____getftab
2515c     FD 1E 0A F6 | 	mov	local01, result1 wz
25160     10 00 90 AD |  if_e	jmp	#LR__3640
25164     08 1E 06 F1 | 	add	local01, #8
25168     0F 15 0A FB | 	rdlong	arg02, local01 wz
2516c     08 1E 86 F1 | 	sub	local01, #8
25170     08 00 90 5D |  if_ne	jmp	#LR__3641
25174                 | LR__3640
25174     00 FA 05 F6 | 	mov	result1, #0
25178     0C 00 90 FD | 	jmp	#LR__3642
2517c                 | LR__3641
2517c     00 70 04 FF 
25180     00 1E 46 F5 | 	or	local01, ##148897792
25184     0F FB 01 F6 | 	mov	result1, local01
25188                 | LR__3642
25188     A7 F0 03 F6 | 	mov	ptra, fp
2518c     B2 00 A0 FD | 	call	#popregs_
25190                 | __system___getrxfunc_ret
25190     2D 00 64 FD | 	ret
25194                 | 
25194                 | __system___getiolock_0508
25194     01 4A 05 F6 | 	mov	COUNT_, #1
25198     A8 00 A0 FD | 	call	#pushregs_
2519c     18 F8 BF FD | 	call	#__system____getftab
251a0     FD 1E 0A F6 | 	mov	local01, result1 wz
251a4     10 00 90 AD |  if_e	jmp	#LR__3650
251a8     08 1E 06 F1 | 	add	local01, #8
251ac     0F FB 09 FB | 	rdlong	result1, local01 wz
251b0     08 1E 86 F1 | 	sub	local01, #8
251b4     18 00 90 5D |  if_ne	jmp	#LR__3651
251b8                 | LR__3650
251b8     01 00 00 FF 
251bc     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
251c0     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
251c4     01 00 00 FF 
251c8     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
251cc     08 00 90 FD | 	jmp	#LR__3652
251d0                 | LR__3651
251d0     0C 1E 06 F1 | 	add	local01, #12
251d4     0F FB 01 F6 | 	mov	result1, local01
251d8                 | LR__3652
251d8     A7 F0 03 F6 | 	mov	ptra, fp
251dc     B2 00 A0 FD | 	call	#popregs_
251e0                 | __system___getiolock_0508_ret
251e0     2D 00 64 FD | 	ret
251e4                 | 
251e4                 | __system____ScanForChar
251e4     09 01 02 F6 | 	mov	_var01, arg01
251e8     09 03 02 F6 | 	mov	_var02, arg01
251ec     97 06 48 FB | 	callpa	#(@LR__3661-@LR__3660)>>2,fcache_load_ptr_
251f0                 | LR__3660
251f0     01 FB C9 FA | 	rdbyte	result1, _var02 wz
251f4     01 02 06 51 |  if_ne	add	_var02, #1
251f8     F4 FF 9F 5D |  if_ne	jmp	#LR__3660
251fc                 | LR__3661
251fc     09 03 82 F1 | 	sub	_var02, arg01
25200     01 FB 01 F6 | 	mov	result1, _var02
25204     FD 12 0A F6 | 	mov	arg01, result1 wz
25208     00 FA 05 A6 |  if_e	mov	result1, #0
2520c     B8 00 90 AD |  if_e	jmp	#LR__3668
25210     0A 05 02 F6 | 	mov	_var03, arg02
25214     07 04 4E F7 | 	zerox	_var03, #7 wz
25218     00 FA 05 A6 |  if_e	mov	result1, #0
2521c     A8 00 90 AD |  if_e	jmp	#LR__3668
25220     01 16 16 F2 | 	cmp	arg03, #1 wc
25224     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
25228     01 16 06 86 |  if_c_and_z	mov	arg03, #1
2522c     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
25230     94 00 90 4D |  if_c_and_nz	jmp	#LR__3668
25234     09 17 1A F2 | 	cmp	arg03, arg01 wcz
25238     10 00 90 ED |  if_be	jmp	#LR__3662
2523c     00 18 0E F2 | 	cmp	arg04, #0 wz
25240     00 FA 05 A6 |  if_e	mov	result1, #0
25244     80 00 90 AD |  if_e	jmp	#LR__3668
25248     09 17 02 F6 | 	mov	arg03, arg01
2524c                 | LR__3662
2524c     01 16 86 F1 | 	sub	arg03, #1
25250     00 18 0E F2 | 	cmp	arg04, #0 wz
25254     38 00 90 5D |  if_ne	jmp	#LR__3664
25258     0B 07 02 F6 | 	mov	_var04, arg03
2525c     09 09 02 F6 | 	mov	_var05, arg01
25260                 | LR__3663
25260     04 07 12 F2 | 	cmp	_var04, _var05 wc
25264     5C 00 90 3D |  if_ae	jmp	#LR__3667
25268     03 05 02 F6 | 	mov	_var03, _var04
2526c     00 05 02 F1 | 	add	_var03, _var01
25270     02 05 C2 FA | 	rdbyte	_var03, _var03
25274     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
25278     0C 05 0A F2 | 	cmp	_var03, arg04 wz
2527c     01 06 06 A1 |  if_e	add	_var04, #1
25280     03 FB 01 A6 |  if_e	mov	result1, _var04
25284     40 00 90 AD |  if_e	jmp	#LR__3668
25288     01 06 06 F1 | 	add	_var04, #1
2528c     D0 FF 9F FD | 	jmp	#LR__3663
25290                 | LR__3664
25290     0B 07 02 F6 | 	mov	_var04, arg03
25294                 | LR__3665
25294     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
25298     28 00 90 1D |  if_a	jmp	#LR__3666
2529c     03 09 02 F6 | 	mov	_var05, _var04
252a0     00 09 02 F1 | 	add	_var05, _var01
252a4     04 05 C2 FA | 	rdbyte	_var03, _var05
252a8     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
252ac     04 05 0A F2 | 	cmp	_var03, _var05 wz
252b0     01 06 06 A1 |  if_e	add	_var04, #1
252b4     03 FB 01 A6 |  if_e	mov	result1, _var04
252b8     0C 00 90 AD |  if_e	jmp	#LR__3668
252bc     01 06 86 F1 | 	sub	_var04, #1
252c0     D0 FF 9F FD | 	jmp	#LR__3665
252c4                 | LR__3666
252c4                 | LR__3667
252c4     00 FA 05 F6 | 	mov	result1, #0
252c8                 | LR__3668
252c8                 | __system____ScanForChar_ret
252c8     2D 00 64 FD | 	ret
252cc                 | 
252cc                 | __system___basic_dir
252cc     05 4A 05 F6 | 	mov	COUNT_, #5
252d0     A8 00 A0 FD | 	call	#pushregs_
252d4     4C F0 07 F1 | 	add	ptra, #76
252d8     04 4E 05 F1 | 	add	fp, #4
252dc     A7 12 62 FC | 	wrlong	arg01, fp
252e0     04 4E 05 F1 | 	add	fp, #4
252e4     A7 14 62 FC | 	wrlong	arg02, fp
252e8     04 4E 85 F1 | 	sub	fp, #4
252ec     A7 14 0A FB | 	rdlong	arg02, fp wz
252f0     04 4E 85 F1 | 	sub	fp, #4
252f4     04 4E 05 51 |  if_ne	add	fp, #4
252f8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
252fc     04 4E 85 51 |  if_ne	sub	fp, #4
25300     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
25304     70 00 90 AD |  if_e	jmp	#LR__3670
25308     03 00 00 FF 
2530c     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
25310     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
25314     03 00 00 FF 
25318     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
2531c     03 00 00 5F 
25320     28 E7 05 51 |  if_ne	add	ptr___system__dat__, ##1832
25324     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
25328     03 00 00 5F 
2532c     28 E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
25330     14 EA BF 5D |  if_ne	call	#__system__closedir
25334     77 01 00 FF 
25338     1C 12 06 F6 | 	mov	arg01, ##@LR__4828
2533c     1C E9 BF FD | 	call	#__system__opendir
25340     03 00 00 FF 
25344     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
25348     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
2534c     08 4E 05 F1 | 	add	fp, #8
25350     A7 20 02 FB | 	rdlong	local02, fp
25354     04 E6 05 F1 | 	add	ptr___system__dat__, #4
25358     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
2535c     04 4E 85 F1 | 	sub	fp, #4
25360     A7 20 02 FB | 	rdlong	local02, fp
25364     04 4E 85 F1 | 	sub	fp, #4
25368     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2536c     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
25370     03 00 00 FF 
25374     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
25378                 | LR__3670
25378     03 00 00 FF 
2537c     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
25380     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
25384     03 00 00 FF 
25388     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
2538c     77 01 00 AF 
25390     1E FA 05 A6 |  if_e	mov	result1, ##@LR__4829
25394     84 02 90 AD |  if_e	jmp	#LR__3683
25398                 | LR__3671
25398     03 00 00 FF 
2539c     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
253a0     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
253a4     03 00 00 FF 
253a8     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
253ac     0C EA BF FD | 	call	#__system__readdir
253b0     0C 4E 05 F1 | 	add	fp, #12
253b4     A7 FA 61 FC | 	wrlong	result1, fp
253b8     0C 4E 85 F1 | 	sub	fp, #12
253bc     00 FA 0D F2 | 	cmp	result1, #0 wz
253c0     38 00 90 5D |  if_ne	jmp	#LR__3672
253c4     03 00 00 FF 
253c8     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
253cc     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
253d0     03 00 00 FF 
253d4     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
253d8     6C E9 BF FD | 	call	#__system__closedir
253dc     03 00 00 FF 
253e0     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
253e4     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
253e8     03 00 00 FF 
253ec     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
253f0     77 01 00 FF 
253f4     20 FA 05 F6 | 	mov	result1, ##@LR__4830
253f8     20 02 90 FD | 	jmp	#LR__3683
253fc                 | LR__3672
253fc     0C 4E 05 F1 | 	add	fp, #12
25400     A7 12 02 FB | 	rdlong	arg01, fp
25404     0C 4E 85 F1 | 	sub	fp, #12
25408     03 00 00 FF 
2540c     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
25410     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
25414     03 00 00 FF 
25418     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2541c     48 07 B0 FD | 	call	#__system___pat_match
25420     00 FA 0D F2 | 	cmp	result1, #0 wz
25424     70 FF 9F AD |  if_e	jmp	#LR__3671
25428     03 00 00 FF 
2542c     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
25430     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
25434     03 00 00 FF 
25438     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2543c     78 01 90 AD |  if_e	jmp	#LR__3679
25440     0C 4E 05 F1 | 	add	fp, #12
25444     A7 12 02 FB | 	rdlong	arg01, fp
25448     04 4E 05 F1 | 	add	fp, #4
2544c     A7 14 02 F6 | 	mov	arg02, fp
25450     10 4E 85 F1 | 	sub	fp, #16
25454     68 F2 BF FD | 	call	#__system__stat
25458     40 4E 05 F1 | 	add	fp, #64
2545c     A7 FA 61 FC | 	wrlong	result1, fp
25460     40 4E 85 F1 | 	sub	fp, #64
25464     00 FA 0D F2 | 	cmp	result1, #0 wz
25468     77 01 00 5F 
2546c     22 FA 05 56 |  if_ne	mov	result1, ##@LR__4831
25470     A8 01 90 5D |  if_ne	jmp	#LR__3683
25474     18 4E 05 F1 | 	add	fp, #24
25478     A7 20 02 FB | 	rdlong	local02, fp
2547c     78 00 00 FF 
25480     00 20 06 F5 | 	and	local02, ##61440
25484     2C 4E 05 F1 | 	add	fp, #44
25488     A7 20 62 FC | 	wrlong	local02, fp
2548c     38 4E 85 F1 | 	sub	fp, #56
25490     A7 20 02 FB | 	rdlong	local02, fp
25494     0C 4E 85 F1 | 	sub	fp, #12
25498     10 21 C2 FA | 	rdbyte	local02, local02
2549c     2E 20 0E F2 | 	cmp	local02, #46 wz
254a0     08 4E 05 A1 |  if_e	add	fp, #8
254a4     A7 04 68 AC |  if_e	wrlong	#2, fp
254a8     08 4E C5 F3 | 	sumz	fp, #8
254ac     A7 00 68 5C |  if_ne	wrlong	#0, fp
254b0     08 4E 85 51 |  if_ne	sub	fp, #8
254b4     44 4E 05 F1 | 	add	fp, #68
254b8     A7 20 02 FB | 	rdlong	local02, fp
254bc     44 4E 85 F1 | 	sub	fp, #68
254c0     08 00 00 FF 
254c4     00 20 0E F2 | 	cmp	local02, ##4096 wz
254c8     18 00 90 5D |  if_ne	jmp	#LR__3673
254cc     08 4E 05 F1 | 	add	fp, #8
254d0     A7 20 02 FB | 	rdlong	local02, fp
254d4     10 20 46 F5 | 	or	local02, #16
254d8     A7 20 62 FC | 	wrlong	local02, fp
254dc     08 4E 85 F1 | 	sub	fp, #8
254e0     AC 00 90 FD | 	jmp	#LR__3678
254e4                 | LR__3673
254e4     44 4E 05 F1 | 	add	fp, #68
254e8     A7 20 02 FB | 	rdlong	local02, fp
254ec     44 4E 85 F1 | 	sub	fp, #68
254f0     10 00 00 FF 
254f4     00 20 0E F2 | 	cmp	local02, ##8192 wz
254f8     44 4E 05 51 |  if_ne	add	fp, #68
254fc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
25500     44 4E 85 51 |  if_ne	sub	fp, #68
25504     18 00 00 5F 
25508     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
2550c     44 4E 05 51 |  if_ne	add	fp, #68
25510     0F 23 02 56 |  if_ne	mov	local03, local01
25514     44 4E 85 51 |  if_ne	sub	fp, #68
25518     20 00 00 5F 
2551c     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
25520     18 00 90 5D |  if_ne	jmp	#LR__3674
25524     08 4E 05 F1 | 	add	fp, #8
25528     A7 20 02 FB | 	rdlong	local02, fp
2552c     04 20 46 F5 | 	or	local02, #4
25530     A7 20 62 FC | 	wrlong	local02, fp
25534     08 4E 85 F1 | 	sub	fp, #8
25538     54 00 90 FD | 	jmp	#LR__3677
2553c                 | LR__3674
2553c     18 4E 05 F1 | 	add	fp, #24
25540     A7 20 02 FB | 	rdlong	local02, fp
25544     18 4E 85 F1 | 	sub	fp, #24
25548     92 20 CE F7 | 	test	local02, #146 wz
2554c     18 00 90 5D |  if_ne	jmp	#LR__3675
25550     08 4E 05 F1 | 	add	fp, #8
25554     A7 20 02 FB | 	rdlong	local02, fp
25558     01 20 46 F5 | 	or	local02, #1
2555c     A7 20 62 FC | 	wrlong	local02, fp
25560     08 4E 85 F1 | 	sub	fp, #8
25564     28 00 90 FD | 	jmp	#LR__3676
25568                 | LR__3675
25568     44 4E 05 F1 | 	add	fp, #68
2556c     A7 24 02 FB | 	rdlong	local04, fp
25570     44 4E 85 F1 | 	sub	fp, #68
25574     08 00 00 FF 
25578     00 24 0E F2 | 	cmp	local04, ##4096 wz
2557c     08 4E 05 51 |  if_ne	add	fp, #8
25580     A7 24 02 5B |  if_ne	rdlong	local04, fp
25584     20 24 46 55 |  if_ne	or	local04, #32
25588     A7 24 62 5C |  if_ne	wrlong	local04, fp
2558c     08 4E 85 51 |  if_ne	sub	fp, #8
25590                 | LR__3676
25590                 | LR__3677
25590                 | LR__3678
25590     08 4E 05 F1 | 	add	fp, #8
25594     A7 24 02 FB | 	rdlong	local04, fp
25598     08 4E 85 F1 | 	sub	fp, #8
2559c     03 00 00 FF 
255a0     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
255a4     F3 1E 02 FB | 	rdlong	local01, ptr___system__dat__
255a8     03 00 00 FF 
255ac     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
255b0     0F 25 CA F7 | 	test	local04, local01 wz
255b4     E0 FD 9F AD |  if_e	jmp	#LR__3671
255b8                 | LR__3679
255b8     0C 4E 05 F1 | 	add	fp, #12
255bc     A7 12 02 FB | 	rdlong	arg01, fp
255c0     0C 4E 85 F1 | 	sub	fp, #12
255c4     09 27 02 F6 | 	mov	local05, arg01
255c8     97 06 48 FB | 	callpa	#(@LR__3681-@LR__3680)>>2,fcache_load_ptr_
255cc                 | LR__3680
255cc     13 FB C9 FA | 	rdbyte	result1, local05 wz
255d0     01 26 06 51 |  if_ne	add	local05, #1
255d4     F4 FF 9F 5D |  if_ne	jmp	#LR__3680
255d8                 | LR__3681
255d8     13 13 C2 F2 | 	subr	arg01, local05
255dc     01 12 06 F1 | 	add	arg01, #1
255e0     64 E0 BF FD | 	call	#__system___gc_alloc_managed
255e4     48 4E 05 F1 | 	add	fp, #72
255e8     A7 FA 61 FC | 	wrlong	result1, fp
255ec     48 4E 85 F1 | 	sub	fp, #72
255f0     00 FA 0D F2 | 	cmp	result1, #0 wz
255f4     18 00 90 AD |  if_e	jmp	#LR__3682
255f8     48 4E 05 F1 | 	add	fp, #72
255fc     A7 12 02 FB | 	rdlong	arg01, fp
25600     3C 4E 85 F1 | 	sub	fp, #60
25604     A7 14 02 FB | 	rdlong	arg02, fp
25608     0C 4E 85 F1 | 	sub	fp, #12
2560c     A0 A1 BF FD | 	call	#__system____builtin_strcpy
25610                 | LR__3682
25610     48 4E 05 F1 | 	add	fp, #72
25614     A7 FA 01 FB | 	rdlong	result1, fp
25618     48 4E 85 F1 | 	sub	fp, #72
2561c                 | LR__3683
2561c     A7 F0 03 F6 | 	mov	ptra, fp
25620     B2 00 A0 FD | 	call	#popregs_
25624                 | __system___basic_dir_ret
25624     2D 00 64 FD | 	ret
25628                 | 
25628                 | __system__pack_0574
25628     09 01 02 F6 | 	mov	_var01, arg01
2562c     7F 16 06 F1 | 	add	arg03, #127
25630     04 18 CE F7 | 	test	arg04, #4 wz
25634     10 00 90 AD |  if_e	jmp	#LR__3690
25638     00 00 0E F2 | 	cmp	_var01, #0 wz
2563c     16 00 C6 A9 |  if_e	decod	_var01, #22
25640     F7 00 26 F4 | 	bith	_var01, #247
25644     B4 00 90 FD | 	jmp	#LR__3699
25648                 | LR__3690
25648     02 18 CE F7 | 	test	arg04, #2 wz
2564c     00 C0 3F 5F 
25650     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
25654     00 14 06 56 |  if_ne	mov	arg02, #0
25658     A0 00 90 5D |  if_ne	jmp	#LR__3698
2565c     08 18 CE F7 | 	test	arg04, #8 wz
25660     00 00 06 56 |  if_ne	mov	_var01, #0
25664     94 00 90 5D |  if_ne	jmp	#LR__3697
25668     FF 16 56 F2 | 	cmps	arg03, #255 wc
2566c     00 C0 3F 3F 
25670     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
25674     00 14 06 36 |  if_ae	mov	arg02, #0
25678     80 00 90 3D |  if_ae	jmp	#LR__3696
2567c     01 16 56 F2 | 	cmps	arg03, #1 wc
25680     6C 00 90 3D |  if_ae	jmp	#LR__3694
25684     01 14 46 F0 | 	shr	arg02, #1
25688     00 03 02 F6 | 	mov	_var02, _var01
2568c     01 02 06 F5 | 	and	_var02, #1
25690     1F 02 66 F0 | 	shl	_var02, #31
25694     01 15 42 F5 | 	or	arg02, _var02
25698     01 00 46 F0 | 	shr	_var01, #1
2569c     97 1E 48 FB | 	callpa	#(@LR__3692-@LR__3691)>>2,fcache_load_ptr_
256a0                 | LR__3691
256a0     00 16 56 F2 | 	cmps	arg03, #0 wc
256a4     34 00 90 3D |  if_ae	jmp	#LR__3693
256a8     00 00 0E F2 | 	cmp	_var01, #0 wz
256ac     2C 00 90 AD |  if_e	jmp	#LR__3693
256b0     0A 13 02 F6 | 	mov	arg01, arg02
256b4     01 12 06 F5 | 	and	arg01, #1
256b8     01 16 06 F1 | 	add	arg03, #1
256bc     01 14 46 F0 | 	shr	arg02, #1
256c0     00 03 02 F6 | 	mov	_var02, _var01
256c4     01 02 06 F5 | 	and	_var02, #1
256c8     1F 02 66 F0 | 	shl	_var02, #31
256cc     01 15 42 F5 | 	or	arg02, _var02
256d0     09 15 42 F5 | 	or	arg02, arg01
256d4     01 00 46 F0 | 	shr	_var01, #1
256d8     C4 FF 9F FD | 	jmp	#LR__3691
256dc                 | LR__3692
256dc                 | LR__3693
256dc     00 16 56 F2 | 	cmps	arg03, #0 wc
256e0     18 00 90 3D |  if_ae	jmp	#LR__3695
256e4     00 14 0E F2 | 	cmp	arg02, #0 wz
256e8     6F 14 62 FD | 	wrnz	arg02
256ec     0C 00 90 FD | 	jmp	#LR__3695
256f0                 | LR__3694
256f0     17 01 06 F4 | 	bitl	_var01, #279
256f4     17 16 66 F0 | 	shl	arg03, #23
256f8     0B 01 42 F5 | 	or	_var01, arg03
256fc                 | LR__3695
256fc                 | LR__3696
256fc                 | LR__3697
256fc                 | LR__3698
256fc                 | LR__3699
256fc     01 00 CE F7 | 	test	_var01, #1 wz
25700     01 14 46 55 |  if_ne	or	arg02, #1
25704     0A 17 02 F6 | 	mov	arg03, arg02
25708     00 02 06 F6 | 	mov	_var02, #0
2570c     FF FF 3F FF 
25710     FF 15 06 F1 | 	add	arg02, ##2147483647
25714     0B 15 12 F2 | 	cmp	arg02, arg03 wc
25718     01 02 06 C6 |  if_b	mov	_var02, #1
2571c     01 01 02 F1 | 	add	_var01, _var02
25720     01 18 CE F7 | 	test	arg04, #1 wz
25724     1F 00 26 54 |  if_ne	bith	_var01, #31
25728     00 FB 01 F6 | 	mov	result1, _var01
2572c                 | __system__pack_0574_ret
2572c     2D 00 64 FD | 	ret
25730                 | 
25730                 | __system___rxtxioctl_0664
25730     00 15 0E F2 | 	cmp	arg02, #256 wz
25734     0C 00 90 AD |  if_e	jmp	#LR__3700
25738     01 15 0E F2 | 	cmp	arg02, #257 wz
2573c     1C 00 90 AD |  if_e	jmp	#LR__3701
25740     30 00 90 FD | 	jmp	#LR__3702
25744                 | LR__3700
25744     08 E6 05 F1 | 	add	ptr___system__dat__, #8
25748     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
2574c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
25750     0B FB 61 FC | 	wrlong	result1, arg03
25754     00 FA 05 F6 | 	mov	result1, #0
25758     28 00 90 FD | 	jmp	#LR__3703
2575c                 | LR__3701
2575c     0B 13 02 FB | 	rdlong	arg01, arg03
25760     08 E6 05 F1 | 	add	ptr___system__dat__, #8
25764     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
25768     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2576c     00 FA 05 F6 | 	mov	result1, #0
25770     10 00 90 FD | 	jmp	#LR__3703
25774                 | LR__3702
25774     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25778     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2577c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25780     01 FA 65 F6 | 	neg	result1, #1
25784                 | LR__3703
25784                 | __system___rxtxioctl_0664_ret
25784     2D 00 64 FD | 	ret
25788                 | 
25788                 | __system____dummy_flush_0665
25788     00 FA 05 F6 | 	mov	result1, #0
2578c                 | __system____dummy_flush_0665_ret
2578c     2D 00 64 FD | 	ret
25790                 | 
25790                 | __system___vfsread
25790     03 4A 05 F6 | 	mov	COUNT_, #3
25794     A8 00 A0 FD | 	call	#pushregs_
25798     28 F0 07 F1 | 	add	ptra, #40
2579c     04 4E 05 F1 | 	add	fp, #4
257a0     A7 12 62 FC | 	wrlong	arg01, fp
257a4     04 4E 05 F1 | 	add	fp, #4
257a8     A7 14 62 FC | 	wrlong	arg02, fp
257ac     04 4E 05 F1 | 	add	fp, #4
257b0     A7 16 62 FC | 	wrlong	arg03, fp
257b4     04 4E 85 F1 | 	sub	fp, #4
257b8     A7 FA 01 FB | 	rdlong	result1, fp
257bc     14 4E 05 F1 | 	add	fp, #20
257c0     A7 FA 61 FC | 	wrlong	result1, fp
257c4     04 4E 05 F1 | 	add	fp, #4
257c8     A7 00 68 FC | 	wrlong	#0, fp
257cc     1C 4E 85 F1 | 	sub	fp, #28
257d0     A7 12 02 FB | 	rdlong	arg01, fp
257d4     04 4E 85 F1 | 	sub	fp, #4
257d8     08 12 06 F1 | 	add	arg01, #8
257dc     09 FB 01 FB | 	rdlong	result1, arg01
257e0     01 FA CD F7 | 	test	result1, #1 wz
257e4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
257e8     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
257ec     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
257f0     01 FA 65 A6 |  if_e	neg	result1, #1
257f4     74 02 90 AD |  if_e	jmp	#LR__3716
257f8     04 4E 05 F1 | 	add	fp, #4
257fc     A7 12 02 FB | 	rdlong	arg01, fp
25800     04 4E 85 F1 | 	sub	fp, #4
25804     14 12 06 F1 | 	add	arg01, #20
25808     09 FB 09 FB | 	rdlong	result1, arg01 wz
2580c     B8 00 90 AD |  if_e	jmp	#LR__3711
25810     04 4E 05 F1 | 	add	fp, #4
25814     A7 12 02 FB | 	rdlong	arg01, fp
25818     09 17 02 F6 | 	mov	arg03, arg01
2581c     14 16 06 F1 | 	add	arg03, #20
25820     0B 1F 02 FB | 	rdlong	local01, arg03
25824     0F 21 02 F6 | 	mov	local02, local01
25828     13 1E 46 F7 | 	zerox	local01, #19
2582c     14 20 46 F0 | 	shr	local02, #20
25830     02 20 66 F0 | 	shl	local02, #2
25834     ED 20 02 F1 | 	add	local02, __methods__
25838     10 21 02 FB | 	rdlong	local02, local02
2583c     04 4E 05 F1 | 	add	fp, #4
25840     A7 14 02 FB | 	rdlong	arg02, fp
25844     04 4E 05 F1 | 	add	fp, #4
25848     A7 16 02 FB | 	rdlong	arg03, fp
2584c     0C 4E 85 F1 | 	sub	fp, #12
25850     F2 22 02 F6 | 	mov	local03, objptr
25854     0F E5 01 F6 | 	mov	objptr, local01
25858     2D 20 62 FD | 	call	local02
2585c     11 E5 01 F6 | 	mov	objptr, local03
25860     10 4E 05 F1 | 	add	fp, #16
25864     A7 FA 61 FC | 	wrlong	result1, fp
25868     10 4E 85 F1 | 	sub	fp, #16
2586c     00 FA 55 F2 | 	cmps	result1, #0 wc
25870     44 00 90 3D |  if_ae	jmp	#LR__3710
25874     04 4E 05 F1 | 	add	fp, #4
25878     A7 22 02 FB | 	rdlong	local03, fp
2587c     11 1F 02 F6 | 	mov	local01, local03
25880     08 22 06 F1 | 	add	local03, #8
25884     11 21 02 FB | 	rdlong	local02, local03
25888     20 20 46 F5 | 	or	local02, #32
2588c     08 1E 06 F1 | 	add	local01, #8
25890     0F 21 62 FC | 	wrlong	local02, local01
25894     0C 4E 05 F1 | 	add	fp, #12
25898     A7 12 0A FB | 	rdlong	arg01, fp wz
2589c     10 4E 85 F1 | 	sub	fp, #16
258a0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
258a4     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
258a8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
258ac     01 FA 65 56 |  if_ne	neg	result1, #1
258b0     00 FA 05 A6 |  if_e	mov	result1, #0
258b4     B4 01 90 FD | 	jmp	#LR__3716
258b8                 | LR__3710
258b8     10 4E 05 F1 | 	add	fp, #16
258bc     A7 FA 01 FB | 	rdlong	result1, fp
258c0     10 4E 85 F1 | 	sub	fp, #16
258c4     A4 01 90 FD | 	jmp	#LR__3716
258c8                 | LR__3711
258c8     04 4E 05 F1 | 	add	fp, #4
258cc     A7 12 02 FB | 	rdlong	arg01, fp
258d0     20 12 06 F1 | 	add	arg01, #32
258d4     09 13 0A FB | 	rdlong	arg01, arg01 wz
258d8     14 4E 05 F1 | 	add	fp, #20
258dc     A7 12 62 FC | 	wrlong	arg01, fp
258e0     18 4E 85 F1 | 	sub	fp, #24
258e4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
258e8     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
258ec     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
258f0     01 FA 65 A6 |  if_e	neg	result1, #1
258f4     74 01 90 AD |  if_e	jmp	#LR__3716
258f8     04 4E 05 F1 | 	add	fp, #4
258fc     A7 22 02 FB | 	rdlong	local03, fp
25900     04 4E 85 F1 | 	sub	fp, #4
25904     28 22 06 F1 | 	add	local03, #40
25908     11 21 0A FB | 	rdlong	local02, local03 wz
2590c     7C 00 90 AD |  if_e	jmp	#LR__3713
25910     04 4E 05 F1 | 	add	fp, #4
25914     A7 12 02 FB | 	rdlong	arg01, fp
25918     09 23 02 F6 | 	mov	local03, arg01
2591c     28 22 06 F1 | 	add	local03, #40
25920     11 1F 02 FB | 	rdlong	local01, local03
25924     0F 21 02 F6 | 	mov	local02, local01
25928     13 1E 46 F7 | 	zerox	local01, #19
2592c     14 20 46 F0 | 	shr	local02, #20
25930     02 20 66 F0 | 	shl	local02, #2
25934     ED 20 02 F1 | 	add	local02, __methods__
25938     10 21 02 FB | 	rdlong	local02, local02
2593c     20 4E 05 F1 | 	add	fp, #32
25940     A7 16 02 F6 | 	mov	arg03, fp
25944     24 4E 85 F1 | 	sub	fp, #36
25948     00 15 06 F6 | 	mov	arg02, #256
2594c     F2 22 02 F6 | 	mov	local03, objptr
25950     0F E5 01 F6 | 	mov	objptr, local01
25954     2D 20 62 FD | 	call	local02
25958     11 E5 01 F6 | 	mov	objptr, local03
2595c     10 4E 05 F1 | 	add	fp, #16
25960     A7 FA 61 FC | 	wrlong	result1, fp
25964     00 FA 4D F2 | 	cmps	result1, #0 wz
25968     10 4E 85 F1 | 	sub	fp, #16
2596c     1C 00 90 5D |  if_ne	jmp	#LR__3712
25970     24 4E 05 F1 | 	add	fp, #36
25974     A7 20 02 FB | 	rdlong	local02, fp
25978     24 4E 85 F1 | 	sub	fp, #36
2597c     02 20 CE F7 | 	test	local02, #2 wz
25980     20 4E 05 51 |  if_ne	add	fp, #32
25984     A7 02 68 5C |  if_ne	wrlong	#1, fp
25988     20 4E 85 51 |  if_ne	sub	fp, #32
2598c                 | LR__3712
2598c                 | LR__3713
2598c     10 4E 05 F1 | 	add	fp, #16
25990     A7 00 68 FC | 	wrlong	#0, fp
25994     10 4E 85 F1 | 	sub	fp, #16
25998                 | LR__3714
25998     0C 4E 05 F1 | 	add	fp, #12
2599c     A7 22 02 FB | 	rdlong	local03, fp
259a0     0C 4E 85 F1 | 	sub	fp, #12
259a4     01 22 16 F2 | 	cmp	local03, #1 wc
259a8     B4 00 90 CD |  if_b	jmp	#LR__3715
259ac     18 4E 05 F1 | 	add	fp, #24
259b0     A7 20 02 FB | 	rdlong	local02, fp
259b4     10 23 02 F6 | 	mov	local03, local02
259b8     13 22 46 F7 | 	zerox	local03, #19
259bc     14 20 46 F0 | 	shr	local02, #20
259c0     02 20 66 F0 | 	shl	local02, #2
259c4     ED 20 02 F1 | 	add	local02, __methods__
259c8     10 21 02 FB | 	rdlong	local02, local02
259cc     14 4E 85 F1 | 	sub	fp, #20
259d0     A7 12 02 FB | 	rdlong	arg01, fp
259d4     04 4E 85 F1 | 	sub	fp, #4
259d8     F2 1E 02 F6 | 	mov	local01, objptr
259dc     11 E5 01 F6 | 	mov	objptr, local03
259e0     2D 20 62 FD | 	call	local02
259e4     0F E5 01 F6 | 	mov	objptr, local01
259e8     14 4E 05 F1 | 	add	fp, #20
259ec     A7 FA 61 FC | 	wrlong	result1, fp
259f0     14 4E 85 F1 | 	sub	fp, #20
259f4     00 FA 55 F2 | 	cmps	result1, #0 wc
259f8     64 00 90 CD |  if_b	jmp	#LR__3715
259fc     1C 4E 05 F1 | 	add	fp, #28
25a00     A7 22 02 FB | 	rdlong	local03, fp
25a04     11 21 02 F6 | 	mov	local02, local03
25a08     01 20 06 F1 | 	add	local02, #1
25a0c     A7 20 62 FC | 	wrlong	local02, fp
25a10     08 4E 85 F1 | 	sub	fp, #8
25a14     A7 20 02 FB | 	rdlong	local02, fp
25a18     11 21 42 FC | 	wrbyte	local02, local03
25a1c     04 4E 85 F1 | 	sub	fp, #4
25a20     A7 22 02 FB | 	rdlong	local03, fp
25a24     01 22 06 F1 | 	add	local03, #1
25a28     A7 22 62 FC | 	wrlong	local03, fp
25a2c     04 4E 85 F1 | 	sub	fp, #4
25a30     A7 22 02 FB | 	rdlong	local03, fp
25a34     01 22 86 F1 | 	sub	local03, #1
25a38     A7 22 62 FC | 	wrlong	local03, fp
25a3c     14 4E 05 F1 | 	add	fp, #20
25a40     A7 22 0A FB | 	rdlong	local03, fp wz
25a44     20 4E 85 F1 | 	sub	fp, #32
25a48     4C FF 9F AD |  if_e	jmp	#LR__3714
25a4c     14 4E 05 F1 | 	add	fp, #20
25a50     A7 20 02 FB | 	rdlong	local02, fp
25a54     14 4E 85 F1 | 	sub	fp, #20
25a58     0A 20 0E F2 | 	cmp	local02, #10 wz
25a5c     38 FF 9F 5D |  if_ne	jmp	#LR__3714
25a60                 | LR__3715
25a60     10 4E 05 F1 | 	add	fp, #16
25a64     A7 FA 01 FB | 	rdlong	result1, fp
25a68     10 4E 85 F1 | 	sub	fp, #16
25a6c                 | LR__3716
25a6c     A7 F0 03 F6 | 	mov	ptra, fp
25a70     B2 00 A0 FD | 	call	#popregs_
25a74                 | __system___vfsread_ret
25a74     2D 00 64 FD | 	ret
25a78                 | 
25a78                 | __system____default_filbuf
25a78     04 4A 05 F6 | 	mov	COUNT_, #4
25a7c     A8 00 A0 FD | 	call	#pushregs_
25a80     09 1F 02 F6 | 	mov	local01, arg01
25a84     0F 21 02 FB | 	rdlong	local02, local01
25a88     0C 20 06 F1 | 	add	local02, #12
25a8c     10 FB 09 FB | 	rdlong	result1, local02 wz
25a90     0C 20 86 F1 | 	sub	local02, #12
25a94     20 00 90 5D |  if_ne	jmp	#LR__3720
25a98     14 20 06 F1 | 	add	local02, #20
25a9c     10 FB 01 F6 | 	mov	result1, local02
25aa0     04 20 86 F1 | 	sub	local02, #4
25aa4     10 FB 61 FC | 	wrlong	result1, local02
25aa8     04 20 86 F1 | 	sub	local02, #4
25aac     02 00 80 FF 
25ab0     10 01 68 FC | 	wrlong	##1024, local02
25ab4     0C 20 86 F1 | 	sub	local02, #12
25ab8                 | LR__3720
25ab8     14 1E 06 F1 | 	add	local01, #20
25abc     0F 23 02 FB | 	rdlong	local03, local01
25ac0     11 25 02 F6 | 	mov	local04, local03
25ac4     14 1E 86 F1 | 	sub	local01, #20
25ac8     13 24 46 F7 | 	zerox	local04, #19
25acc     14 22 46 F0 | 	shr	local03, #20
25ad0     02 22 66 F0 | 	shl	local03, #2
25ad4     ED 22 02 F1 | 	add	local03, __methods__
25ad8     11 23 02 FB | 	rdlong	local03, local03
25adc     10 20 06 F1 | 	add	local02, #16
25ae0     10 15 02 FB | 	rdlong	arg02, local02
25ae4     04 20 86 F1 | 	sub	local02, #4
25ae8     10 17 02 FB | 	rdlong	arg03, local02
25aec     0C 20 86 F1 | 	sub	local02, #12
25af0     0F 13 02 F6 | 	mov	arg01, local01
25af4     F2 1E 02 F6 | 	mov	local01, objptr
25af8     12 E5 01 F6 | 	mov	objptr, local04
25afc     2D 22 62 FD | 	call	local03
25b00     0F E5 01 F6 | 	mov	objptr, local01
25b04     FD 24 02 F6 | 	mov	local04, result1
25b08     00 24 56 F2 | 	cmps	local04, #0 wc
25b0c     01 FA 65 C6 |  if_b	neg	result1, #1
25b10     28 00 90 CD |  if_b	jmp	#LR__3721
25b14     10 25 62 FC | 	wrlong	local04, local02
25b18     10 20 06 F1 | 	add	local02, #16
25b1c     10 23 02 FB | 	rdlong	local03, local02
25b20     0C 20 86 F1 | 	sub	local02, #12
25b24     10 23 62 FC | 	wrlong	local03, local02
25b28     04 20 06 F1 | 	add	local02, #4
25b2c     10 23 02 FB | 	rdlong	local03, local02
25b30     01 22 46 F5 | 	or	local03, #1
25b34     10 23 62 FC | 	wrlong	local03, local02
25b38     12 FB 01 F6 | 	mov	result1, local04
25b3c                 | LR__3721
25b3c     A7 F0 03 F6 | 	mov	ptra, fp
25b40     B2 00 A0 FD | 	call	#popregs_
25b44                 | __system____default_filbuf_ret
25b44     2D 00 64 FD | 	ret
25b48                 | 
25b48                 | __system__getlower_1050
25b48     41 12 56 F2 | 	cmps	arg01, #65 wc
25b4c     10 00 90 CD |  if_b	jmp	#LR__3730
25b50     5B 12 56 F2 | 	cmps	arg01, #91 wc
25b54     09 FB 01 C6 |  if_b	mov	result1, arg01
25b58     20 FA 05 C1 |  if_b	add	result1, #32
25b5c     04 00 90 CD |  if_b	jmp	#__system__getlower_1050_ret
25b60                 | LR__3730
25b60     09 FB 01 F6 | 	mov	result1, arg01
25b64                 | __system__getlower_1050_ret
25b64     2D 00 64 FD | 	ret
25b68                 | 
25b68                 | __system___pat_match
25b68     08 4A 05 F6 | 	mov	COUNT_, #8
25b6c     A8 00 A0 FD | 	call	#pushregs_
25b70     09 1F 02 F6 | 	mov	local01, arg01
25b74                 | LR__3740
25b74     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
25b78     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
25b7c     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
25b80     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
25b84     2C 00 90 AD |  if_e	jmp	#LR__3741
25b88     0A 13 C2 FA | 	rdbyte	arg01, arg02
25b8c     B8 FF BF FD | 	call	#__system__getlower_1050
25b90     FD 22 02 F6 | 	mov	local03, result1
25b94     0F 13 C2 FA | 	rdbyte	arg01, local01
25b98     AC FF BF FD | 	call	#__system__getlower_1050
25b9c     11 FB 09 F2 | 	cmp	result1, local03 wz
25ba0     00 FA 05 56 |  if_ne	mov	result1, #0
25ba4     FC 00 90 5D |  if_ne	jmp	#LR__3749
25ba8     01 1E 06 F1 | 	add	local01, #1
25bac     01 14 06 F1 | 	add	arg02, #1
25bb0     C0 FF 9F FD | 	jmp	#LR__3740
25bb4                 | LR__3741
25bb4     0A 23 C2 FA | 	rdbyte	local03, arg02
25bb8     2A 22 0E F2 | 	cmp	local03, #42 wz
25bbc     D4 00 90 5D |  if_ne	jmp	#LR__3748
25bc0     01 14 06 F1 | 	add	arg02, #1
25bc4     0A 21 C2 FA | 	rdbyte	local02, arg02
25bc8     01 14 86 F1 | 	sub	arg02, #1
25bcc     2E 20 0E F2 | 	cmp	local02, #46 wz
25bd0     28 00 90 5D |  if_ne	jmp	#LR__3742
25bd4     02 14 06 F1 | 	add	arg02, #2
25bd8     0A 21 C2 FA | 	rdbyte	local02, arg02
25bdc     02 14 86 F1 | 	sub	arg02, #2
25be0     2A 20 0E F2 | 	cmp	local02, #42 wz
25be4     03 14 06 A1 |  if_e	add	arg02, #3
25be8     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
25bec     03 14 86 A1 |  if_e	sub	arg02, #3
25bf0     12 27 0A A6 |  if_e	mov	local05, local04 wz
25bf4     01 FA 05 A6 |  if_e	mov	result1, #1
25bf8     A8 00 90 AD |  if_e	jmp	#LR__3749
25bfc                 | LR__3742
25bfc     01 14 06 F1 | 	add	arg02, #1
25c00     00 28 06 F6 | 	mov	local06, #0
25c04     97 1E 48 FB | 	callpa	#(@LR__3745-@LR__3743)>>2,fcache_load_ptr_
25c08                 | LR__3743
25c08     14 2B 02 F6 | 	mov	local07, local06
25c0c     0A 2B 02 F1 | 	add	local07, arg02
25c10     15 2B CA FA | 	rdbyte	local07, local07 wz
25c14     14 27 02 56 |  if_ne	mov	local05, local06
25c18     01 26 06 51 |  if_ne	add	local05, #1
25c1c     13 29 02 56 |  if_ne	mov	local06, local05
25c20     E4 FF 9F 5D |  if_ne	jmp	#LR__3743
25c24     00 2C 06 F6 | 	mov	local08, #0
25c28                 | LR__3744
25c28     16 2B 02 F6 | 	mov	local07, local08
25c2c     0F 2B 02 F1 | 	add	local07, local01
25c30     15 2B CA FA | 	rdbyte	local07, local07 wz
25c34     16 27 02 56 |  if_ne	mov	local05, local08
25c38     01 26 06 51 |  if_ne	add	local05, #1
25c3c     13 2D 02 56 |  if_ne	mov	local08, local05
25c40     E4 FF 9F 5D |  if_ne	jmp	#LR__3744
25c44                 | LR__3745
25c44     14 2D 52 F2 | 	cmps	local08, local06 wc
25c48     00 FA 05 C6 |  if_b	mov	result1, #0
25c4c     54 00 90 CD |  if_b	jmp	#LR__3749
25c50     16 21 02 F6 | 	mov	local02, local08
25c54     14 21 82 F1 | 	sub	local02, local06
25c58     10 1F 02 F1 | 	add	local01, local02
25c5c                 | LR__3746
25c5c     01 28 56 F2 | 	cmps	local06, #1 wc
25c60     30 00 90 CD |  if_b	jmp	#LR__3747
25c64     0F 13 C2 FA | 	rdbyte	arg01, local01
25c68     DC FE BF FD | 	call	#__system__getlower_1050
25c6c     FD 2C 02 F6 | 	mov	local08, result1
25c70     0A 13 C2 FA | 	rdbyte	arg01, arg02
25c74     D0 FE BF FD | 	call	#__system__getlower_1050
25c78     FD 2C 0A F2 | 	cmp	local08, result1 wz
25c7c     00 FA 05 56 |  if_ne	mov	result1, #0
25c80     20 00 90 5D |  if_ne	jmp	#LR__3749
25c84     01 1E 06 F1 | 	add	local01, #1
25c88     01 14 06 F1 | 	add	arg02, #1
25c8c     01 28 86 F1 | 	sub	local06, #1
25c90     C8 FF 9F FD | 	jmp	#LR__3746
25c94                 | LR__3747
25c94                 | LR__3748
25c94     0A 2D CA FA | 	rdbyte	local08, arg02 wz
25c98     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
25c9c     01 FA 05 A6 |  if_e	mov	result1, #1
25ca0     00 FA 05 56 |  if_ne	mov	result1, #0
25ca4                 | LR__3749
25ca4     A7 F0 03 F6 | 	mov	ptra, fp
25ca8     B2 00 A0 FD | 	call	#popregs_
25cac                 | __system___pat_match_ret
25cac     2D 00 64 FD | 	ret
25cb0                 | 
25cb0                 | _fatfs_cc_ff_uni2oem
25cb0     00 00 06 F6 | 	mov	_var01, #0
25cb4     80 12 16 F2 | 	cmp	arg01, #128 wc
25cb8     09 01 02 C6 |  if_b	mov	_var01, arg01
25cbc     58 00 90 CD |  if_b	jmp	#LR__3754
25cc0     80 00 00 FF 
25cc4     00 12 16 F2 | 	cmp	arg01, ##65536 wc
25cc8     4C 00 90 3D |  if_ae	jmp	#LR__3753
25ccc     0A FB 31 F9 | 	getword	result1, arg02, #0
25cd0     01 00 00 FF 
25cd4     52 FB 0D F2 | 	cmp	result1, ##850 wz
25cd8     3C 00 90 5D |  if_ne	jmp	#LR__3753
25cdc                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
25cdc     00 00 06 F6 | 	mov	_var01, #0
25ce0     97 14 48 FB | 	callpa	#(@LR__3751-@LR__3750)>>2,fcache_load_ptr_
25ce4                 | LR__3750
25ce4     00 FB 31 F9 | 	getword	result1, _var01, #0
25ce8     80 FA 15 F2 | 	cmp	result1, #128 wc
25cec     1C 00 90 3D |  if_ae	jmp	#LR__3752
25cf0     00 FB 31 F9 | 	getword	result1, _var01, #0
25cf4     01 FA 65 F0 | 	shl	result1, #1
25cf8     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
25cfc     FD FA E1 FA | 	rdword	result1, result1
25d00     FD 12 0A F2 | 	cmp	arg01, result1 wz
25d04     01 00 06 51 |  if_ne	add	_var01, #1
25d08     D8 FF 9F 5D |  if_ne	jmp	#LR__3750
25d0c                 | LR__3751
25d0c                 | LR__3752
25d0c     00 01 32 F9 | 	getword	_var01, _var01, #0
25d10     80 00 06 F1 | 	add	_var01, #128
25d14     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
25d18                 | LR__3753
25d18                 | LR__3754
25d18                 | ' 			c = (c + 0x80) & 0xFF;
25d18                 | ' 		}
25d18                 | ' 	}
25d18                 | ' 
25d18                 | ' 	return c;
25d18     00 FB 01 F6 | 	mov	result1, _var01
25d1c                 | _fatfs_cc_ff_uni2oem_ret
25d1c     2D 00 64 FD | 	ret
25d20                 | 
25d20                 | _fatfs_cc_ff_oem2uni
25d20     00 00 06 F6 | 	mov	_var01, #0
25d24     09 FB 31 F9 | 	getword	result1, arg01, #0
25d28     80 FA 15 F2 | 	cmp	result1, #128 wc
25d2c     09 01 02 C6 |  if_b	mov	_var01, arg01
25d30     2C 00 90 CD |  if_b	jmp	#LR__3761
25d34     0A 15 32 F9 | 	getword	arg02, arg02, #0
25d38     01 00 00 FF 
25d3c     52 15 0E F2 | 	cmp	arg02, ##850 wz
25d40     1C 00 90 5D |  if_ne	jmp	#LR__3760
25d44     09 FB 31 F9 | 	getword	result1, arg01, #0
25d48     00 FB 15 F2 | 	cmp	result1, #256 wc
25d4c     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
25d50     80 12 86 C1 |  if_b	sub	arg01, #128
25d54     01 12 66 C0 |  if_b	shl	arg01, #1
25d58     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
25d5c     09 01 E2 CA |  if_b	rdword	_var01, arg01
25d60                 | LR__3760
25d60                 | LR__3761
25d60                 | ' 		}
25d60                 | ' 	}
25d60                 | ' 
25d60                 | ' 	return c;
25d60     00 FB 01 F6 | 	mov	result1, _var01
25d64                 | _fatfs_cc_ff_oem2uni_ret
25d64     2D 00 64 FD | 	ret
25d68                 | 
25d68                 | _fatfs_cc_ff_wtoupper
25d68     09 01 02 F6 | 	mov	_var01, arg01
25d6c     80 00 00 FF 
25d70     00 00 16 F2 | 	cmp	_var01, ##65536 wc
25d74     60 01 90 3D |  if_ae	jmp	#LR__3783
25d78     00 03 02 F6 | 	mov	_var02, _var01
25d7c     01 01 32 F9 | 	getword	_var01, _var02, #0
25d80     08 00 00 FF 
25d84     00 00 16 F2 | 	cmp	_var01, ##4096 wc
25d88     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
25d8c     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
25d90     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
25d94     01 00 00 3F 
25d98     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
25d9c     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
25da0     01 00 00 3F 
25da4     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
25da8     02 07 02 F6 | 	mov	_var04, _var03
25dac                 | ' 		uc = (WORD)uni;
25dac                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
25dac                 | ' 		for (;;) {
25dac                 | LR__3770
25dac     03 09 E2 FA | 	rdword	_var05, _var04
25db0     04 05 02 F6 | 	mov	_var03, _var05
25db4     0F 04 4E F7 | 	zerox	_var03, #15 wz
25db8     02 06 06 F1 | 	add	_var04, #2
25dbc     14 01 90 AD |  if_e	jmp	#LR__3782
25dc0     01 05 32 F9 | 	getword	_var03, _var02, #0
25dc4     04 01 32 F9 | 	getword	_var01, _var05, #0
25dc8     00 05 12 F2 | 	cmp	_var03, _var01 wc
25dcc     04 01 90 CD |  if_b	jmp	#LR__3782
25dd0     03 0B E2 FA | 	rdword	_var06, _var04
25dd4     05 0D 32 F9 | 	getword	_var07, _var06, #0
25dd8     08 0C 46 F0 | 	shr	_var07, #8
25ddc     05 0B 32 F9 | 	getword	_var06, _var06, #0
25de0     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
25de4     01 05 32 F9 | 	getword	_var03, _var02, #0
25de8     04 0F 32 F9 | 	getword	_var08, _var05, #0
25dec     05 01 32 F9 | 	getword	_var01, _var06, #0
25df0     00 0F 02 F1 | 	add	_var08, _var01
25df4     07 05 52 F2 | 	cmps	_var03, _var08 wc
25df8     02 06 06 F1 | 	add	_var04, #2
25dfc     C4 00 90 3D |  if_ae	jmp	#LR__3781
25e00                 | ' 				switch (cmd) {
25e00     06 11 32 F9 | 	getword	_var09, _var07, #0
25e04     09 10 26 F3 | 	fle	_var09, #9
25e08     30 10 62 FD | 	jmprel	_var09
25e0c                 | LR__3771
25e0c     24 00 90 FD | 	jmp	#LR__3772
25e10     3C 00 90 FD | 	jmp	#LR__3773
25e14     54 00 90 FD | 	jmp	#LR__3774
25e18     5C 00 90 FD | 	jmp	#LR__3775
25e1c     64 00 90 FD | 	jmp	#LR__3776
25e20     6C 00 90 FD | 	jmp	#LR__3777
25e24     74 00 90 FD | 	jmp	#LR__3778
25e28     7C 00 90 FD | 	jmp	#LR__3779
25e2c     84 00 90 FD | 	jmp	#LR__3780
25e30     A0 00 90 FD | 	jmp	#LR__3782
25e34                 | LR__3772
25e34     01 03 32 F9 | 	getword	_var02, _var02, #0
25e38     04 09 32 F9 | 	getword	_var05, _var05, #0
25e3c     04 03 82 F1 | 	sub	_var02, _var05
25e40     01 02 66 F0 | 	shl	_var02, #1
25e44     03 03 02 F1 | 	add	_var02, _var04
25e48     01 03 E2 FA | 	rdword	_var02, _var02
25e4c     84 00 90 FD | 	jmp	#LR__3782
25e50                 | LR__3773
25e50     01 05 32 F9 | 	getword	_var03, _var02, #0
25e54     01 03 32 F9 | 	getword	_var02, _var02, #0
25e58     04 09 32 F9 | 	getword	_var05, _var05, #0
25e5c     04 03 82 F1 | 	sub	_var02, _var05
25e60     01 02 06 F5 | 	and	_var02, #1
25e64     02 03 C2 F2 | 	subr	_var02, _var03
25e68     68 00 90 FD | 	jmp	#LR__3782
25e6c                 | LR__3774
25e6c     01 03 32 F9 | 	getword	_var02, _var02, #0
25e70     10 02 86 F1 | 	sub	_var02, #16
25e74     5C 00 90 FD | 	jmp	#LR__3782
25e78                 | LR__3775
25e78     01 03 32 F9 | 	getword	_var02, _var02, #0
25e7c     20 02 86 F1 | 	sub	_var02, #32
25e80     50 00 90 FD | 	jmp	#LR__3782
25e84                 | LR__3776
25e84     01 03 32 F9 | 	getword	_var02, _var02, #0
25e88     30 02 86 F1 | 	sub	_var02, #48
25e8c     44 00 90 FD | 	jmp	#LR__3782
25e90                 | LR__3777
25e90     01 03 32 F9 | 	getword	_var02, _var02, #0
25e94     1A 02 86 F1 | 	sub	_var02, #26
25e98     38 00 90 FD | 	jmp	#LR__3782
25e9c                 | LR__3778
25e9c     01 03 32 F9 | 	getword	_var02, _var02, #0
25ea0     08 02 06 F1 | 	add	_var02, #8
25ea4     2C 00 90 FD | 	jmp	#LR__3782
25ea8                 | LR__3779
25ea8     01 03 32 F9 | 	getword	_var02, _var02, #0
25eac     50 02 86 F1 | 	sub	_var02, #80
25eb0     20 00 90 FD | 	jmp	#LR__3782
25eb4                 | LR__3780
25eb4     01 03 32 F9 | 	getword	_var02, _var02, #0
25eb8     0E 00 00 FF 
25ebc     60 02 86 F1 | 	sub	_var02, ##7264
25ec0                 | ' 				}
25ec0                 | ' 				break;
25ec0     10 00 90 FD | 	jmp	#LR__3782
25ec4                 | LR__3781
25ec4     0F 0C 4E F7 | 	zerox	_var07, #15 wz
25ec8     02 0A 06 AA |  if_e	mul	_var06, #2
25ecc     05 07 02 A1 |  if_e	add	_var04, _var06
25ed0     D8 FE 9F FD | 	jmp	#LR__3770
25ed4                 | LR__3782
25ed4     01 01 32 F9 | 	getword	_var01, _var02, #0
25ed8                 | LR__3783
25ed8                 | ' 		}
25ed8                 | ' 		uni = uc;
25ed8                 | ' 	}
25ed8                 | ' 
25ed8                 | ' 	return uni;
25ed8     00 FB 01 F6 | 	mov	result1, _var01
25edc                 | _fatfs_cc_ff_wtoupper_ret
25edc     2D 00 64 FD | 	ret
25ee0                 | 
25ee0                 | _fatfs_cc_strncpy
25ee0     09 01 02 F6 | 	mov	_var01, arg01
25ee4     97 12 48 FB | 	callpa	#(@LR__3791-@LR__3790)>>2,fcache_load_ptr_
25ee8                 | ' 
25ee8                 | ' 	dscan = dst;
25ee8                 | ' 	sscan = src;
25ee8                 | ' 	count = n;
25ee8                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
25ee8                 | LR__3790
25ee8     01 16 86 F1 | 	sub	arg03, #1
25eec     00 16 56 F2 | 	cmps	arg03, #0 wc
25ef0     18 00 90 CD |  if_b	jmp	#LR__3792
25ef4     0A FB C1 FA | 	rdbyte	result1, arg02
25ef8     00 FB 41 FC | 	wrbyte	result1, _var01
25efc     01 14 06 F1 | 	add	arg02, #1
25f00     00 FB C9 FA | 	rdbyte	result1, _var01 wz
25f04                 | ' 		continue;
25f04     01 00 06 F1 | 	add	_var01, #1
25f08     DC FF 9F 5D |  if_ne	jmp	#LR__3790
25f0c                 | LR__3791
25f0c                 | LR__3792
25f0c     97 0C 48 FB | 	callpa	#(@LR__3794-@LR__3793)>>2,fcache_load_ptr_
25f10                 | ' 	while (--count >= 0)
25f10                 | LR__3793
25f10     01 16 86 F1 | 	sub	arg03, #1
25f14     00 16 56 F2 | 	cmps	arg03, #0 wc
25f18     00 03 02 36 |  if_ae	mov	_var02, _var01
25f1c     01 00 06 31 |  if_ae	add	_var01, #1
25f20     01 01 48 3C |  if_ae	wrbyte	#0, _var02
25f24     E8 FF 9F 3D |  if_ae	jmp	#LR__3793
25f28                 | LR__3794
25f28                 | ' 		*dscan++ = '\0';
25f28                 | ' 	return(dst);
25f28     09 FB 01 F6 | 	mov	result1, arg01
25f2c                 | _fatfs_cc_strncpy_ret
25f2c     2D 00 64 FD | 	ret
25f30                 | 
25f30                 | _fatfs_cc_memcmp
25f30                 | ' 	for (n = size; n > 0; n--)
25f30     00 16 0E F2 | 	cmp	arg03, #0 wz
25f34     28 00 90 AD |  if_e	jmp	#LR__3801
25f38                 | LR__3800
25f38     09 01 C2 FA | 	rdbyte	_var01, arg01
25f3c     0A 03 C2 FA | 	rdbyte	_var02, arg02
25f40     01 01 0A F2 | 	cmp	_var01, _var02 wz
25f44     01 12 06 A1 |  if_e	add	arg01, #1
25f48     01 14 06 A1 |  if_e	add	arg02, #1
25f4c                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
25f4c     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
25f50     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
25f54     01 FB 81 51 |  if_ne	sub	result1, _var02
25f58     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
25f5c     F6 17 6E FB | 	djnz	arg03, #LR__3800
25f60                 | LR__3801
25f60                 | ' 
25f60                 | ' 	return(0);
25f60     00 FA 05 F6 | 	mov	result1, #0
25f64                 | _fatfs_cc_memcmp_ret
25f64     2D 00 64 FD | 	ret
25f68                 | 
25f68                 | _fatfs_cc_strncmp
25f68     09 01 0A F6 | 	mov	_var01, arg01 wz
25f6c     14 00 90 5D |  if_ne	jmp	#LR__3810
25f70                 | ' 		return scan2 ? -1 : 0;
25f70     00 14 0E F2 | 	cmp	arg02, #0 wz
25f74     01 02 66 56 |  if_ne	neg	_var02, #1
25f78     00 02 06 A6 |  if_e	mov	_var02, #0
25f7c     01 FB 01 F6 | 	mov	result1, _var02
25f80     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
25f84                 | LR__3810
25f84     00 14 0E F2 | 	cmp	arg02, #0 wz
25f88     01 FA 05 A6 |  if_e	mov	result1, #1
25f8c     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
25f90     0B 05 02 F6 | 	mov	_var03, arg03
25f94     97 16 48 FB | 	callpa	#(@LR__3812-@LR__3811)>>2,fcache_load_ptr_
25f98                 | ' 	count = n;
25f98                 | ' 	do {
25f98                 | LR__3811
25f98     00 07 C2 FA | 	rdbyte	_var04, _var01
25f9c     0A 09 02 F6 | 	mov	_var05, arg02
25fa0     04 0B C2 FA | 	rdbyte	_var06, _var05
25fa4     01 04 86 F1 | 	sub	_var03, #1
25fa8     00 04 56 F2 | 	cmps	_var03, #0 wc
25fac     01 00 06 F1 | 	add	_var01, #1
25fb0     01 14 06 F1 | 	add	arg02, #1
25fb4     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
25fb8     08 00 90 2D |  if_nc_and_z	jmp	#LR__3813
25fbc     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
25fc0     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3811
25fc4                 | LR__3812
25fc4                 | LR__3813
25fc4     00 04 56 F2 | 	cmps	_var03, #0 wc
25fc8                 | ' 		return(0);
25fc8     00 FA 05 C6 |  if_b	mov	result1, #0
25fcc     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
25fd0     05 07 0A F2 | 	cmp	_var04, _var06 wz
25fd4                 | ' 		return(0);
25fd4     00 FA 05 A6 |  if_e	mov	result1, #0
25fd8     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
25fdc     00 06 0E F2 | 	cmp	_var04, #0 wz
25fe0                 | ' 		return(-1);
25fe0     01 FA 65 A6 |  if_e	neg	result1, #1
25fe4     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
25fe8     00 0A 0E F2 | 	cmp	_var06, #0 wz
25fec                 | ' 		return(1);
25fec     01 FA 05 A6 |  if_e	mov	result1, #1
25ff0                 | ' 		return(c1 - c2);
25ff0     03 FB 01 56 |  if_ne	mov	result1, _var04
25ff4     05 FB 81 51 |  if_ne	sub	result1, _var06
25ff8                 | _fatfs_cc_strncmp_ret
25ff8     2D 00 64 FD | 	ret
25ffc                 | 
25ffc                 | _fatfs_cc_strchr
25ffc                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/libc/string/strchr.c"
25ffc                 | ' 	while ((c = *s++) != (char) charwanted)
25ffc                 | LR__3820
25ffc     09 01 02 F6 | 	mov	_var01, arg01
26000     00 03 C2 FA | 	rdbyte	_var02, _var01
26004     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
26008     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
2600c     03 05 0A F2 | 	cmp	_var03, _var04 wz
26010     01 12 06 F1 | 	add	arg01, #1
26014     14 00 90 AD |  if_e	jmp	#LR__3821
26018     01 05 02 F6 | 	mov	_var03, _var02
2601c     07 04 4E F7 | 	zerox	_var03, #7 wz
26020     00 FA 05 A6 |  if_e	mov	result1, #0
26024     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
26028     D0 FF 9F FD | 	jmp	#LR__3820
2602c                 | LR__3821
2602c                 | ' 	return((char *)--s);
2602c     01 12 86 F1 | 	sub	arg01, #1
26030     09 FB 01 F6 | 	mov	result1, arg01
26034                 | _fatfs_cc_strchr_ret
26034     2D 00 64 FD | 	ret
26038                 | 
26038                 | _fatfs_cc_disk_initialize
26038     04 4A 05 F6 | 	mov	COUNT_, #4
2603c     A8 00 A0 FD | 	call	#pushregs_
26040     40 F0 07 F1 | 	add	ptra, #64
26044     04 4E 05 F1 | 	add	fp, #4
26048     A7 12 42 FC | 	wrbyte	arg01, fp
2604c     01 00 00 FF 
26050     14 E4 05 F1 | 	add	objptr, ##532
26054     F2 18 02 FB | 	rdlong	arg04, objptr
26058     2C 4E 05 F1 | 	add	fp, #44
2605c     A7 18 62 FC | 	wrlong	arg04, fp
26060     04 E4 85 F1 | 	sub	objptr, #4
26064     F2 18 02 FB | 	rdlong	arg04, objptr
26068     04 4E 05 F1 | 	add	fp, #4
2606c     A7 18 62 FC | 	wrlong	arg04, fp
26070     08 E4 05 F1 | 	add	objptr, #8
26074     F2 18 02 FB | 	rdlong	arg04, objptr
26078     04 4E 05 F1 | 	add	fp, #4
2607c     A7 18 62 FC | 	wrlong	arg04, fp
26080     04 E4 05 F1 | 	add	objptr, #4
26084     F2 18 02 FB | 	rdlong	arg04, objptr
26088     04 4E 05 F1 | 	add	fp, #4
2608c     A7 18 62 FC | 	wrlong	arg04, fp
26090     04 E4 05 F1 | 	add	objptr, #4
26094     F2 02 48 FC | 	wrbyte	#1, objptr
26098     01 00 00 FF 
2609c     20 E4 85 F1 | 	sub	objptr, ##544
260a0     38 4E 85 F1 | 	sub	fp, #56
260a4     A7 18 CA FA | 	rdbyte	arg04, fp wz
260a8     04 4E 85 F1 | 	sub	fp, #4
260ac                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
260ac                 | '             return RES_NOTRDY;
260ac     03 FA 05 56 |  if_ne	mov	result1, #3
260b0     D8 05 90 5D |  if_ne	jmp	#LR__3848
260b4     13 00 00 FF 
260b8     10 13 06 F6 | 	mov	arg01, ##10000
260bc     9C 9A BF FD | 	call	#__system___waitus
260c0     30 4E 05 F1 | 	add	fp, #48
260c4     A7 12 02 FB | 	rdlong	arg01, fp
260c8     09 01 08 FC | 	wrpin	#0, arg01
260cc     04 4E 05 F1 | 	add	fp, #4
260d0     A7 12 02 FB | 	rdlong	arg01, fp
260d4     09 01 08 FC | 	wrpin	#0, arg01
260d8     04 4E 05 F1 | 	add	fp, #4
260dc     A7 12 02 FB | 	rdlong	arg01, fp
260e0     09 01 08 FC | 	wrpin	#0, arg01
260e4     04 4E 05 F1 | 	add	fp, #4
260e8     A7 12 02 FB | 	rdlong	arg01, fp
260ec     09 00 80 FF 
260f0     09 01 08 FC | 	wrpin	##4608, arg01
260f4     0C 4E 85 F1 | 	sub	fp, #12
260f8     A7 12 02 FB | 	rdlong	arg01, fp
260fc     59 12 62 FD | 	drvh	arg01
26100     04 4E 05 F1 | 	add	fp, #4
26104     A7 12 02 FB | 	rdlong	arg01, fp
26108     59 12 62 FD | 	drvh	arg01
2610c     04 4E 05 F1 | 	add	fp, #4
26110     A7 12 02 FB | 	rdlong	arg01, fp
26114     59 12 62 FD | 	drvh	arg01
26118     04 4E 05 F1 | 	add	fp, #4
2611c     A7 12 02 FB | 	rdlong	arg01, fp
26120     59 12 62 FD | 	drvh	arg01
26124     20 4E 85 F1 | 	sub	fp, #32
26128     00 04 80 FF 
2612c     A7 20 68 FC | 	wrlong	##524304, fp
26130     04 4E 05 F1 | 	add	fp, #4
26134     20 03 80 FF 
26138     A7 90 68 FC | 	wrlong	##409672, fp
2613c     14 4E 05 F1 | 	add	fp, #20
26140     A7 1E 02 FB | 	rdlong	local01, fp
26144     18 4E 85 F1 | 	sub	fp, #24
26148     A7 16 02 FB | 	rdlong	arg03, fp
2614c     40 1E 62 FD | 	dirl	local01
26150     A0 03 80 FF 
26154     0F 91 08 FC | 	wrpin	##475208, local01
26158     0F 17 12 FC | 	wxpin	arg03, local01
2615c     0F 01 28 FC | 	wypin	#0, local01
26160     41 1E 62 FD | 	dirh	local01
26164     1C 4E 05 F1 | 	add	fp, #28
26168     A7 20 02 FB | 	rdlong	local02, fp
2616c     10 1F 82 F1 | 	sub	local01, local02
26170     07 1E 06 F5 | 	and	local01, #7
26174     18 1E 66 F0 | 	shl	local01, #24
26178     78 14 06 F6 | 	mov	arg02, #120
2617c     0F 15 42 F5 | 	or	arg02, local01
26180     14 4E 85 F1 | 	sub	fp, #20
26184     A7 14 62 FC | 	wrlong	arg02, fp
26188     14 4E 05 F1 | 	add	fp, #20
2618c     A7 12 02 FB | 	rdlong	arg01, fp
26190     10 14 26 F4 | 	bith	arg02, #16
26194     40 12 62 FD | 	dirl	arg01
26198     09 15 02 FC | 	wrpin	arg02, arg01
2619c     09 3F 18 FC | 	wxpin	#31, arg01
261a0     FF FF FF FF 
261a4     09 FF 2B FC | 	wypin	##-1, arg01
261a8     41 12 62 FD | 	dirh	arg01
261ac     04 4E 85 F1 | 	sub	fp, #4
261b0     A7 14 02 FB | 	rdlong	arg02, fp
261b4     08 4E 05 F1 | 	add	fp, #8
261b8     A7 22 02 FB | 	rdlong	local03, fp
261bc     11 15 82 F1 | 	sub	arg02, local03
261c0     07 14 06 F5 | 	and	arg02, #7
261c4     18 14 66 F0 | 	shl	arg02, #24
261c8     14 4E 85 F1 | 	sub	fp, #20
261cc     A7 14 62 FC | 	wrlong	arg02, fp
261d0     29 00 00 FF 
261d4     7A 14 46 F5 | 	or	arg02, ##21114
261d8     A7 14 62 FC | 	wrlong	arg02, fp
261dc     14 4E 05 F1 | 	add	fp, #20
261e0     A7 12 02 FB | 	rdlong	arg01, fp
261e4     40 12 62 FD | 	dirl	arg01
261e8     09 15 02 FC | 	wrpin	arg02, arg01
261ec     09 4F 18 FC | 	wxpin	#39, arg01
261f0     09 01 28 FC | 	wypin	#0, arg01
261f4     41 12 62 FD | 	dirh	arg01
261f8     28 4E 85 F1 | 	sub	fp, #40
261fc     A7 12 02 F6 | 	mov	arg01, fp
26200     14 4E 85 F1 | 	sub	fp, #20
26204     0A 14 06 F6 | 	mov	arg02, #10
26208     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1084
2620c     00 12 06 F6 | 	mov	arg01, #0
26210     00 14 06 F6 | 	mov	arg02, #0
26214     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1108
26218     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1094
2621c     64 12 06 F6 | 	mov	arg01, #100
26220     38 99 BF FD | 	call	#__system___waitus
26224     14 4E 05 F1 | 	add	fp, #20
26228     A7 12 02 F6 | 	mov	arg01, fp
2622c     14 4E 85 F1 | 	sub	fp, #20
26230     0A 14 06 F6 | 	mov	arg02, #10
26234     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1084
26238     0C 4E 05 F1 | 	add	fp, #12
2623c     A7 00 48 FC | 	wrbyte	#0, fp
26240     0C 4E 85 F1 | 	sub	fp, #12
26244     00 12 06 F6 | 	mov	arg01, #0
26248     00 14 06 F6 | 	mov	arg02, #0
2624c     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1108
26250     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
26254     01 18 0E F2 | 	cmp	arg04, #1 wz
26258     B8 03 90 5D |  if_ne	jmp	#LR__3847
2625c     08 12 06 F6 | 	mov	arg01, #8
26260     AA 15 06 F6 | 	mov	arg02, #426
26264     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1108
26268     FD FA E1 F8 | 	getbyte	result1, result1, #0
2626c     01 FA 0D F2 | 	cmp	result1, #1 wz
26270     98 01 90 5D |  if_ne	jmp	#LR__3833
26274     14 4E 05 F1 | 	add	fp, #20
26278     A7 12 02 F6 | 	mov	arg01, fp
2627c     14 4E 85 F1 | 	sub	fp, #20
26280     04 14 06 F6 | 	mov	arg02, #4
26284     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1084
26288     16 4E 05 F1 | 	add	fp, #22
2628c     A7 24 C2 FA | 	rdbyte	local04, fp
26290     16 4E 85 F1 | 	sub	fp, #22
26294     01 24 0E F2 | 	cmp	local04, #1 wz
26298     17 4E 05 A1 |  if_e	add	fp, #23
2629c     A7 22 C2 AA |  if_e	rdbyte	local03, fp
262a0     17 4E 85 A1 |  if_e	sub	fp, #23
262a4     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
262a8     68 03 90 5D |  if_ne	jmp	#LR__3846
262ac                 | ' 				for (tmr = 1000; tmr; tmr--) {
262ac     18 4E 05 F1 | 	add	fp, #24
262b0     01 00 80 FF 
262b4     A7 D0 6B FC | 	wrlong	##1000, fp
262b8     18 4E 85 F1 | 	sub	fp, #24
262bc                 | LR__3830
262bc     18 4E 05 F1 | 	add	fp, #24
262c0     A7 1E 0A FB | 	rdlong	local01, fp wz
262c4     18 4E 85 F1 | 	sub	fp, #24
262c8     3C 00 90 AD |  if_e	jmp	#LR__3831
262cc     A9 12 06 F6 | 	mov	arg01, #169
262d0     1E 14 C6 F9 | 	decod	arg02, #30
262d4     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1108
262d8     FD 24 02 F6 | 	mov	local04, result1
262dc     07 24 4E F7 | 	zerox	local04, #7 wz
262e0     24 00 90 AD |  if_e	jmp	#LR__3831
262e4     01 00 00 FF 
262e8     E8 13 06 F6 | 	mov	arg01, ##1000
262ec     6C 98 BF FD | 	call	#__system___waitus
262f0     18 4E 05 F1 | 	add	fp, #24
262f4     A7 24 02 FB | 	rdlong	local04, fp
262f8     01 24 86 F1 | 	sub	local04, #1
262fc     A7 24 62 FC | 	wrlong	local04, fp
26300     18 4E 85 F1 | 	sub	fp, #24
26304     B4 FF 9F FD | 	jmp	#LR__3830
26308                 | LR__3831
26308     18 4E 05 F1 | 	add	fp, #24
2630c     A7 24 0A FB | 	rdlong	local04, fp wz
26310     18 4E 85 F1 | 	sub	fp, #24
26314     4C 00 90 AD |  if_e	jmp	#LR__3832
26318     3A 12 06 F6 | 	mov	arg01, #58
2631c     00 14 06 F6 | 	mov	arg02, #0
26320     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1108
26324     FD 22 02 F6 | 	mov	local03, result1
26328     07 22 4E F7 | 	zerox	local03, #7 wz
2632c     34 00 90 5D |  if_ne	jmp	#LR__3832
26330     14 4E 05 F1 | 	add	fp, #20
26334     A7 12 02 F6 | 	mov	arg01, fp
26338     14 4E 85 F1 | 	sub	fp, #20
2633c     04 14 06 F6 | 	mov	arg02, #4
26340     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1084
26344     14 4E 05 F1 | 	add	fp, #20
26348     A7 1E C2 FA | 	rdbyte	local01, fp
2634c     40 1E CE F7 | 	test	local01, #64 wz
26350     0C 24 06 56 |  if_ne	mov	local04, #12
26354     04 24 06 A6 |  if_e	mov	local04, #4
26358     08 4E 85 F1 | 	sub	fp, #8
2635c     A7 24 42 FC | 	wrbyte	local04, fp
26360     0C 4E 85 F1 | 	sub	fp, #12
26364                 | LR__3832
26364     14 24 06 FB | 	rdlong	local04, #20
26368     18 4E 05 F1 | 	add	fp, #24
2636c     A7 24 62 FC | 	wrlong	local04, fp
26370     0C 4E 05 F1 | 	add	fp, #12
26374     A7 24 02 FB | 	rdlong	local04, fp
26378     1B 24 26 F4 | 	bith	local04, #27
2637c     A7 24 62 FC | 	wrlong	local04, fp
26380     0C 4E 85 F1 | 	sub	fp, #12
26384     A7 24 02 FB | 	rdlong	local04, fp
26388     18 4E 85 F1 | 	sub	fp, #24
2638c     68 78 04 FF 
26390     81 25 16 F2 | 	cmp	local04, ##150000001 wc
26394     1C 4E 05 C1 |  if_b	add	fp, #28
26398     00 01 80 CF 
2639c     A7 08 68 CC |  if_b	wrlong	##131076, fp
263a0     1C 4E 85 C1 |  if_b	sub	fp, #28
263a4     6C 02 90 CD |  if_b	jmp	#LR__3846
263a8     18 4E 05 F1 | 	add	fp, #24
263ac     A7 24 02 FB | 	rdlong	local04, fp
263b0     18 4E 85 F1 | 	sub	fp, #24
263b4     E1 F5 05 FF 
263b8     01 24 16 F2 | 	cmp	local04, ##200000001 wc
263bc     1C 4E 05 C1 |  if_b	add	fp, #28
263c0     00 01 80 CF 
263c4     A7 0A 68 CC |  if_b	wrlong	##131077, fp
263c8     1C 4E 85 C1 |  if_b	sub	fp, #28
263cc     44 02 90 CD |  if_b	jmp	#LR__3846
263d0     18 4E 05 F1 | 	add	fp, #24
263d4     A7 24 02 FB | 	rdlong	local04, fp
263d8     18 4E 85 F1 | 	sub	fp, #24
263dc     3B 58 08 FF 
263e0     01 24 16 F2 | 	cmp	local04, ##280000001 wc
263e4     1C 4E 05 C1 |  if_b	add	fp, #28
263e8     00 01 80 CF 
263ec     A7 0C 68 CC |  if_b	wrlong	##131078, fp
263f0     1C 4E 85 C1 |  if_b	sub	fp, #28
263f4     1C 02 90 CD |  if_b	jmp	#LR__3846
263f8     1C 4E 05 F1 | 	add	fp, #28
263fc     80 01 80 FF 
26400     A7 10 68 FC | 	wrlong	##196616, fp
26404     1C 4E 85 F1 | 	sub	fp, #28
26408     08 02 90 FD | 	jmp	#LR__3846
2640c                 | LR__3833
2640c     A9 12 06 F6 | 	mov	arg01, #169
26410     00 14 06 F6 | 	mov	arg02, #0
26414     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1108
26418     FD 24 E2 F8 | 	getbyte	local04, result1, #0
2641c     02 24 16 F2 | 	cmp	local04, #2 wc
26420     18 00 90 3D |  if_ae	jmp	#LR__3834
26424     0C 4E 05 F1 | 	add	fp, #12
26428     A7 04 48 FC | 	wrbyte	#2, fp
2642c     04 4E 05 F1 | 	add	fp, #4
26430     A7 52 49 FC | 	wrbyte	#169, fp
26434     10 4E 85 F1 | 	sub	fp, #16
26438     14 00 90 FD | 	jmp	#LR__3835
2643c                 | LR__3834
2643c     0C 4E 05 F1 | 	add	fp, #12
26440     A7 02 48 FC | 	wrbyte	#1, fp
26444     04 4E 05 F1 | 	add	fp, #4
26448     A7 02 48 FC | 	wrbyte	#1, fp
2644c     10 4E 85 F1 | 	sub	fp, #16
26450                 | LR__3835
26450                 | ' 				ty =  0x01 ; cmd =  (1) ;
26450                 | ' 			}
26450                 | ' 			for (tmr = 1000; tmr; tmr--) {
26450     18 4E 05 F1 | 	add	fp, #24
26454     01 00 80 FF 
26458     A7 D0 6B FC | 	wrlong	##1000, fp
2645c     18 4E 85 F1 | 	sub	fp, #24
26460                 | LR__3836
26460     18 4E 05 F1 | 	add	fp, #24
26464     A7 22 0A FB | 	rdlong	local03, fp wz
26468     18 4E 85 F1 | 	sub	fp, #24
2646c     44 00 90 AD |  if_e	jmp	#LR__3837
26470     10 4E 05 F1 | 	add	fp, #16
26474     A7 12 C2 FA | 	rdbyte	arg01, fp
26478     10 4E 85 F1 | 	sub	fp, #16
2647c     00 14 06 F6 | 	mov	arg02, #0
26480     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1108
26484     FD 24 02 F6 | 	mov	local04, result1
26488     07 24 4E F7 | 	zerox	local04, #7 wz
2648c     24 00 90 AD |  if_e	jmp	#LR__3837
26490     01 00 00 FF 
26494     E8 13 06 F6 | 	mov	arg01, ##1000
26498     C0 96 BF FD | 	call	#__system___waitus
2649c     18 4E 05 F1 | 	add	fp, #24
264a0     A7 24 02 FB | 	rdlong	local04, fp
264a4     01 24 86 F1 | 	sub	local04, #1
264a8     A7 24 62 FC | 	wrlong	local04, fp
264ac     18 4E 85 F1 | 	sub	fp, #24
264b0     AC FF 9F FD | 	jmp	#LR__3836
264b4                 | LR__3837
264b4     18 4E 05 F1 | 	add	fp, #24
264b8     A7 24 0A FB | 	rdlong	local04, fp wz
264bc     18 4E 85 F1 | 	sub	fp, #24
264c0     14 00 90 AD |  if_e	jmp	#LR__3838
264c4     10 12 06 F6 | 	mov	arg01, #16
264c8     09 14 C6 F9 | 	decod	arg02, #9
264cc     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1108
264d0     07 FA 4D F7 | 	zerox	result1, #7 wz
264d4     0C 00 90 AD |  if_e	jmp	#LR__3839
264d8                 | LR__3838
264d8     0C 4E 05 F1 | 	add	fp, #12
264dc     A7 00 48 FC | 	wrbyte	#0, fp
264e0     0C 4E 85 F1 | 	sub	fp, #12
264e4                 | LR__3839
264e4     14 24 06 FB | 	rdlong	local04, #20
264e8     18 4E 05 F1 | 	add	fp, #24
264ec     A7 24 62 FC | 	wrlong	local04, fp
264f0     18 4E 85 F1 | 	sub	fp, #24
264f4     F0 FA 02 FF 
264f8     01 25 16 F2 | 	cmp	local04, ##100000001 wc
264fc     18 00 90 3D |  if_ae	jmp	#LR__3840
26500     24 4E 05 F1 | 	add	fp, #36
26504     A7 24 02 FB | 	rdlong	local04, fp
26508     1B 24 26 F4 | 	bith	local04, #27
2650c     A7 24 62 FC | 	wrlong	local04, fp
26510     24 4E 85 F1 | 	sub	fp, #36
26514     2C 00 90 FD | 	jmp	#LR__3841
26518                 | LR__3840
26518     18 4E 05 F1 | 	add	fp, #24
2651c     A7 24 02 FB | 	rdlong	local04, fp
26520     18 4E 85 F1 | 	sub	fp, #24
26524     E1 F5 05 FF 
26528     01 24 16 F2 | 	cmp	local04, ##200000001 wc
2652c     24 4E 05 C1 |  if_b	add	fp, #36
26530     A7 24 02 CB |  if_b	rdlong	local04, fp
26534     80 00 04 CF 
26538     00 24 46 C5 |  if_b	or	local04, ##134283264
2653c     A7 24 62 CC |  if_b	wrlong	local04, fp
26540     24 4E 85 C1 |  if_b	sub	fp, #36
26544                 | LR__3841
26544     18 4E 05 F1 | 	add	fp, #24
26548     A7 24 02 FB | 	rdlong	local04, fp
2654c     18 4E 85 F1 | 	sub	fp, #24
26550     F0 FA 02 FF 
26554     01 25 16 F2 | 	cmp	local04, ##100000001 wc
26558     1C 4E 05 C1 |  if_b	add	fp, #28
2655c     00 01 80 CF 
26560     A7 08 68 CC |  if_b	wrlong	##131076, fp
26564     1C 4E 85 C1 |  if_b	sub	fp, #28
26568     A8 00 90 CD |  if_b	jmp	#LR__3845
2656c     18 4E 05 F1 | 	add	fp, #24
26570     A7 24 02 FB | 	rdlong	local04, fp
26574     18 4E 85 F1 | 	sub	fp, #24
26578     68 78 04 FF 
2657c     81 25 16 F2 | 	cmp	local04, ##150000001 wc
26580     1C 4E 05 C1 |  if_b	add	fp, #28
26584     80 01 80 CF 
26588     A7 0C 68 CC |  if_b	wrlong	##196614, fp
2658c     1C 4E 85 C1 |  if_b	sub	fp, #28
26590     80 00 90 CD |  if_b	jmp	#LR__3844
26594     18 4E 05 F1 | 	add	fp, #24
26598     A7 24 02 FB | 	rdlong	local04, fp
2659c     18 4E 85 F1 | 	sub	fp, #24
265a0     E1 F5 05 FF 
265a4     01 24 16 F2 | 	cmp	local04, ##200000001 wc
265a8     1C 4E 05 C1 |  if_b	add	fp, #28
265ac     00 02 80 CF 
265b0     A7 10 68 CC |  if_b	wrlong	##262152, fp
265b4     1C 4E 85 C1 |  if_b	sub	fp, #28
265b8     58 00 90 CD |  if_b	jmp	#LR__3843
265bc     18 4E 05 F1 | 	add	fp, #24
265c0     A7 24 02 FB | 	rdlong	local04, fp
265c4     18 4E 85 F1 | 	sub	fp, #24
265c8     59 73 07 FF 
265cc     81 24 16 F2 | 	cmp	local04, ##250000001 wc
265d0     1C 4E 05 C1 |  if_b	add	fp, #28
265d4     80 02 80 CF 
265d8     A7 14 68 CC |  if_b	wrlong	##327690, fp
265dc     1C 4E 85 C1 |  if_b	sub	fp, #28
265e0     30 00 90 CD |  if_b	jmp	#LR__3842
265e4     18 4E 05 F1 | 	add	fp, #24
265e8     A7 24 02 FB | 	rdlong	local04, fp
265ec     18 4E 85 F1 | 	sub	fp, #24
265f0     D1 F0 08 FF 
265f4     01 25 16 F2 | 	cmp	local04, ##300000001 wc
265f8     1C 4E 05 C1 |  if_b	add	fp, #28
265fc     00 03 80 CF 
26600     A7 18 68 CC |  if_b	wrlong	##393228, fp
26604     1C 4E 85 F3 | 	sumc	fp, #28
26608     80 03 80 3F 
2660c     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
26610     1C 4E 85 31 |  if_ae	sub	fp, #28
26614                 | LR__3842
26614                 | LR__3843
26614                 | LR__3844
26614                 | LR__3845
26614                 | LR__3846
26614                 | LR__3847
26614     0C 4E 05 F1 | 	add	fp, #12
26618     A7 24 C2 FA | 	rdbyte	local04, fp
2661c     01 00 00 FF 
26620     21 E4 05 F1 | 	add	objptr, ##545
26624     F2 24 42 FC | 	wrbyte	local04, objptr
26628     A7 1E CA FA | 	rdbyte	local01, fp wz
2662c     00 24 06 56 |  if_ne	mov	local04, #0
26630     01 24 06 A6 |  if_e	mov	local04, #1
26634     20 4E 05 F1 | 	add	fp, #32
26638     A7 24 42 FC | 	wrbyte	local04, fp
2663c     A7 24 C2 FA | 	rdbyte	local04, fp
26640     2C 4E 85 F1 | 	sub	fp, #44
26644     01 E4 85 F1 | 	sub	objptr, #1
26648     F2 24 42 FC | 	wrbyte	local04, objptr
2664c     01 00 00 FF 
26650     20 E4 85 F1 | 	sub	objptr, ##544
26654     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1094
26658     34 4E 05 F1 | 	add	fp, #52
2665c     A7 12 02 FB | 	rdlong	arg01, fp
26660     18 4E 85 F1 | 	sub	fp, #24
26664     A7 14 02 FB | 	rdlong	arg02, fp
26668     09 15 12 FC | 	wxpin	arg02, arg01
2666c     1C 4E 05 F1 | 	add	fp, #28
26670     A7 12 02 FB | 	rdlong	arg01, fp
26674     14 4E 85 F1 | 	sub	fp, #20
26678     A7 14 02 FB | 	rdlong	arg02, fp
2667c     09 15 02 FC | 	wrpin	arg02, arg01
26680                 | ' 
26680                 | ' 		}
26680                 | ' 	}
26680                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
26680                 | ' 	CardType = ty;
26680                 | ' 	s = ty ? 0 :  0x01 ;
26680                 | ' 	Stat = s;
26680                 | ' 
26680                 | ' 	deselect();
26680                 | ' 
26680                 | ' 
26680                 | ' 	_wxpin( PIN_CLK, ck_div );
26680                 | ' 	_wrpin( PIN_DI, spm_tx );
26680                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
26680                 | ' 	return s;
26680     08 4E 05 F1 | 	add	fp, #8
26684     A7 FA C1 FA | 	rdbyte	result1, fp
26688     2C 4E 85 F1 | 	sub	fp, #44
2668c                 | LR__3848
2668c     A7 F0 03 F6 | 	mov	ptra, fp
26690     B2 00 A0 FD | 	call	#popregs_
26694                 | _fatfs_cc_disk_initialize_ret
26694     2D 00 64 FD | 	ret
26698                 | 
26698                 | _fatfs_cc_disk_read
26698     05 4A 05 F6 | 	mov	COUNT_, #5
2669c     A8 00 A0 FD | 	call	#pushregs_
266a0     0A 1F 02 F6 | 	mov	local01, arg02
266a4     0B 21 02 F6 | 	mov	local02, arg03
266a8     0C 23 02 F6 | 	mov	local03, arg04
266ac     00 12 0E F2 | 	cmp	arg01, #0 wz
266b0     01 FA 05 56 |  if_ne	mov	result1, #1
266b4                 | ' 
266b4                 | ' 	return Stat;
266b4     01 00 00 AF 
266b8     20 E4 05 A1 |  if_e	add	objptr, ##544
266bc     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
266c0     01 00 00 AF 
266c4     20 E4 85 A1 |  if_e	sub	objptr, ##544
266c8     FD FA E1 F8 | 	getbyte	result1, result1, #0
266cc     01 FA CD F7 | 	test	result1, #1 wz
266d0     03 FA 05 56 |  if_ne	mov	result1, #3
266d4     84 00 90 5D |  if_ne	jmp	#LR__3852
266d8     01 00 00 FF 
266dc     21 E4 05 F1 | 	add	objptr, ##545
266e0     F2 24 C2 FA | 	rdbyte	local04, objptr
266e4     01 00 00 FF 
266e8     21 E4 85 F1 | 	sub	objptr, ##545
266ec     08 24 CE F7 | 	test	local04, #8 wz
266f0     09 20 66 A0 |  if_e	shl	local02, #9
266f4     02 22 16 F2 | 	cmp	local03, #2 wc
266f8     12 24 06 36 |  if_ae	mov	local04, #18
266fc     11 24 06 C6 |  if_b	mov	local04, #17
26700     10 15 02 F6 | 	mov	arg02, local02
26704     12 13 02 F6 | 	mov	arg01, local04
26708     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1108
2670c     FD 26 02 F6 | 	mov	local05, result1
26710     07 26 4E F7 | 	zerox	local05, #7 wz
26714     30 00 90 5D |  if_ne	jmp	#LR__3851
26718                 | ' 		do {
26718                 | LR__3850
26718     0F 13 02 F6 | 	mov	arg01, local01
2671c     09 14 C6 F9 | 	decod	arg02, #9
26720     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1102
26724     00 FA 0D F2 | 	cmp	result1, #0 wz
26728     01 00 00 5F 
2672c     00 1E 06 51 |  if_ne	add	local01, ##512
26730     F9 23 6E 5B |  if_ne	djnz	local03, #LR__3850
26734     12 25 E2 F8 | 	getbyte	local04, local04, #0
26738     12 24 0E F2 | 	cmp	local04, #18 wz
2673c     0C 12 06 A6 |  if_e	mov	arg01, #12
26740     00 14 06 A6 |  if_e	mov	arg02, #0
26744     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1108
26748                 | LR__3851
26748     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1094
2674c                 | ' 	}
2674c                 | ' 	deselect();
2674c                 | ' 
2674c                 | ' 	return count ? RES_ERROR : RES_OK;
2674c     00 22 0E F2 | 	cmp	local03, #0 wz
26750     01 26 06 56 |  if_ne	mov	local05, #1
26754     00 26 06 A6 |  if_e	mov	local05, #0
26758     13 FB 01 F6 | 	mov	result1, local05
2675c                 | LR__3852
2675c     A7 F0 03 F6 | 	mov	ptra, fp
26760     B2 00 A0 FD | 	call	#popregs_
26764                 | _fatfs_cc_disk_read_ret
26764     2D 00 64 FD | 	ret
26768                 | 
26768                 | _fatfs_cc_disk_write
26768     04 4A 05 F6 | 	mov	COUNT_, #4
2676c     A8 00 A0 FD | 	call	#pushregs_
26770     0A 1F 02 F6 | 	mov	local01, arg02
26774     0C 21 02 F6 | 	mov	local02, arg04
26778     0B 23 02 F6 | 	mov	local03, arg03
2677c     00 12 0E F2 | 	cmp	arg01, #0 wz
26780     01 FA 05 56 |  if_ne	mov	result1, #1
26784                 | ' 
26784                 | ' 	return Stat;
26784     01 00 00 AF 
26788     20 E4 05 A1 |  if_e	add	objptr, ##544
2678c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
26790     01 00 00 AF 
26794     20 E4 85 A1 |  if_e	sub	objptr, ##544
26798     FD FA E1 F8 | 	getbyte	result1, result1, #0
2679c     01 FA CD F7 | 	test	result1, #1 wz
267a0     03 FA 05 56 |  if_ne	mov	result1, #3
267a4     D4 00 90 5D |  if_ne	jmp	#LR__3864
267a8     01 00 00 FF 
267ac     21 E4 05 F1 | 	add	objptr, ##545
267b0     F2 16 C2 FA | 	rdbyte	arg03, objptr
267b4     01 00 00 FF 
267b8     21 E4 85 F1 | 	sub	objptr, ##545
267bc     08 16 CE F7 | 	test	arg03, #8 wz
267c0     09 22 66 A0 |  if_e	shl	local03, #9
267c4     01 20 0E F2 | 	cmp	local02, #1 wz
267c8     30 00 90 5D |  if_ne	jmp	#LR__3860
267cc     18 12 06 F6 | 	mov	arg01, #24
267d0     11 15 02 F6 | 	mov	arg02, local03
267d4     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1108
267d8     FD 24 02 F6 | 	mov	local04, result1
267dc     07 24 4E F7 | 	zerox	local04, #7 wz
267e0     84 00 90 5D |  if_ne	jmp	#LR__3863
267e4     0F 13 02 F6 | 	mov	arg01, local01
267e8     FE 14 06 F6 | 	mov	arg02, #254
267ec     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1104
267f0     00 FA 0D F2 | 	cmp	result1, #0 wz
267f4     00 20 06 56 |  if_ne	mov	local02, #0
267f8     6C 00 90 FD | 	jmp	#LR__3863
267fc                 | LR__3860
267fc     01 00 00 FF 
26800     21 E4 05 F1 | 	add	objptr, ##545
26804     F2 24 C2 FA | 	rdbyte	local04, objptr
26808     01 00 00 FF 
2680c     21 E4 85 F1 | 	sub	objptr, ##545
26810     06 24 CE F7 | 	test	local04, #6 wz
26814     97 12 06 56 |  if_ne	mov	arg01, #151
26818     10 15 02 56 |  if_ne	mov	arg02, local02
2681c     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1108
26820     11 15 02 F6 | 	mov	arg02, local03
26824     19 12 06 F6 | 	mov	arg01, #25
26828     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1108
2682c     FD 24 02 F6 | 	mov	local04, result1
26830     07 24 4E F7 | 	zerox	local04, #7 wz
26834     30 00 90 5D |  if_ne	jmp	#LR__3862
26838                 | ' 			do {
26838                 | LR__3861
26838     0F 13 02 F6 | 	mov	arg01, local01
2683c     FC 14 06 F6 | 	mov	arg02, #252
26840     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1104
26844     00 FA 0D F2 | 	cmp	result1, #0 wz
26848     01 00 00 5F 
2684c     00 1E 06 51 |  if_ne	add	local01, ##512
26850     F9 21 6E 5B |  if_ne	djnz	local02, #LR__3861
26854     00 12 06 F6 | 	mov	arg01, #0
26858     FD 14 06 F6 | 	mov	arg02, #253
2685c     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1104
26860     00 FA 0D F2 | 	cmp	result1, #0 wz
26864     01 20 06 A6 |  if_e	mov	local02, #1
26868                 | LR__3862
26868                 | LR__3863
26868     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1094
2686c                 | ' 				count = 1;
2686c                 | ' 		}
2686c                 | ' 	}
2686c                 | ' 	deselect();
2686c                 | ' 
2686c                 | ' 	return count ? RES_ERROR : RES_OK;
2686c     00 20 0E F2 | 	cmp	local02, #0 wz
26870     01 24 06 56 |  if_ne	mov	local04, #1
26874     00 24 06 A6 |  if_e	mov	local04, #0
26878     12 FB 01 F6 | 	mov	result1, local04
2687c                 | LR__3864
2687c     A7 F0 03 F6 | 	mov	ptra, fp
26880     B2 00 A0 FD | 	call	#popregs_
26884                 | _fatfs_cc_disk_write_ret
26884     2D 00 64 FD | 	ret
26888                 | 
26888                 | _fatfs_cc_disk_ioctl
26888     01 4A 05 F6 | 	mov	COUNT_, #1
2688c     A8 00 A0 FD | 	call	#pushregs_
26890     30 F0 07 F1 | 	add	ptra, #48
26894     04 4E 05 F1 | 	add	fp, #4
26898     A7 12 42 FC | 	wrbyte	arg01, fp
2689c     04 4E 05 F1 | 	add	fp, #4
268a0     A7 14 42 FC | 	wrbyte	arg02, fp
268a4     04 4E 05 F1 | 	add	fp, #4
268a8     A7 16 62 FC | 	wrlong	arg03, fp
268ac     08 4E 85 F1 | 	sub	fp, #8
268b0     A7 12 CA FA | 	rdbyte	arg01, fp wz
268b4     04 4E 85 F1 | 	sub	fp, #4
268b8     01 FA 05 56 |  if_ne	mov	result1, #1
268bc                 | ' 
268bc                 | ' 	return Stat;
268bc     01 00 00 AF 
268c0     20 E4 05 A1 |  if_e	add	objptr, ##544
268c4     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
268c8     01 00 00 AF 
268cc     20 E4 85 A1 |  if_e	sub	objptr, ##544
268d0     FD FA E1 F8 | 	getbyte	result1, result1, #0
268d4     01 FA CD F7 | 	test	result1, #1 wz
268d8     03 FA 05 56 |  if_ne	mov	result1, #3
268dc     E4 01 90 5D |  if_ne	jmp	#LR__3878
268e0     10 4E 05 F1 | 	add	fp, #16
268e4     A7 02 68 FC | 	wrlong	#1, fp
268e8                 | ' 
268e8                 | ' 	res = RES_ERROR;
268e8                 | ' 	switch (ctrl) {
268e8     08 4E 85 F1 | 	sub	fp, #8
268ec     A7 1E C2 FA | 	rdbyte	local01, fp
268f0     08 4E 85 F1 | 	sub	fp, #8
268f4     04 1E 26 F3 | 	fle	local01, #4
268f8     30 1E 62 FD | 	jmprel	local01
268fc                 | LR__3870
268fc     10 00 90 FD | 	jmp	#LR__3871
26900     24 00 90 FD | 	jmp	#LR__3872
26904     A0 01 90 FD | 	jmp	#LR__3876
26908     80 01 90 FD | 	jmp	#LR__3875
2690c     98 01 90 FD | 	jmp	#LR__3876
26910                 | LR__3871
26910     B4 79 B0 FD | 	call	#_fatfs_cc_select_1098
26914     00 FA 0D F2 | 	cmp	result1, #0 wz
26918     10 4E 05 51 |  if_ne	add	fp, #16
2691c     A7 00 68 5C |  if_ne	wrlong	#0, fp
26920     10 4E 85 51 |  if_ne	sub	fp, #16
26924                 | ' 			break;
26924     8C 01 90 FD | 	jmp	#LR__3877
26928                 | LR__3872
26928     09 12 06 F6 | 	mov	arg01, #9
2692c     00 14 06 F6 | 	mov	arg02, #0
26930     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1108
26934     FD 1E 02 F6 | 	mov	local01, result1
26938     07 1E 4E F7 | 	zerox	local01, #7 wz
2693c     74 01 90 5D |  if_ne	jmp	#LR__3877
26940     18 4E 05 F1 | 	add	fp, #24
26944     A7 12 02 F6 | 	mov	arg01, fp
26948     18 4E 85 F1 | 	sub	fp, #24
2694c     10 14 06 F6 | 	mov	arg02, #16
26950     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1102
26954     00 FA 0D F2 | 	cmp	result1, #0 wz
26958     58 01 90 AD |  if_e	jmp	#LR__3877
2695c     18 4E 05 F1 | 	add	fp, #24
26960     A7 1E C2 FA | 	rdbyte	local01, fp
26964     18 4E 85 F1 | 	sub	fp, #24
26968     06 1E 46 F0 | 	shr	local01, #6
2696c     01 1E 0E F2 | 	cmp	local01, #1 wz
26970     5C 00 90 5D |  if_ne	jmp	#LR__3873
26974     21 4E 05 F1 | 	add	fp, #33
26978     A7 1E C2 FA | 	rdbyte	local01, fp
2697c     01 4E 85 F1 | 	sub	fp, #1
26980     A7 FA C1 FA | 	rdbyte	result1, fp
26984     FD FA 31 F9 | 	getword	result1, result1, #0
26988     08 FA 65 F0 | 	shl	result1, #8
2698c     FD 1E 02 F1 | 	add	local01, result1
26990     01 4E 85 F1 | 	sub	fp, #1
26994     A7 FA C1 FA | 	rdbyte	result1, fp
26998     3F FA 05 F5 | 	and	result1, #63
2699c     10 FA 65 F0 | 	shl	result1, #16
269a0     FD 1E 02 F1 | 	add	local01, result1
269a4     01 1E 06 F1 | 	add	local01, #1
269a8     09 4E 05 F1 | 	add	fp, #9
269ac     A7 1E 62 FC | 	wrlong	local01, fp
269b0     1C 4E 85 F1 | 	sub	fp, #28
269b4     A7 1E 02 FB | 	rdlong	local01, fp
269b8     1C 4E 05 F1 | 	add	fp, #28
269bc     A7 FA 01 FB | 	rdlong	result1, fp
269c0     28 4E 85 F1 | 	sub	fp, #40
269c4     0A FA 65 F0 | 	shl	result1, #10
269c8     0F FB 61 FC | 	wrlong	result1, local01
269cc     AC 00 90 FD | 	jmp	#LR__3874
269d0                 | LR__3873
269d0     1D 4E 05 F1 | 	add	fp, #29
269d4     A7 1E C2 FA | 	rdbyte	local01, fp
269d8     0F 1F 42 F8 | 	getnib	local01, local01, #0
269dc     05 4E 05 F1 | 	add	fp, #5
269e0     A7 FA C1 FA | 	rdbyte	result1, fp
269e4     80 FA 05 F5 | 	and	result1, #128
269e8     07 FA C5 F0 | 	sar	result1, #7
269ec     FD 1E 02 F1 | 	add	local01, result1
269f0     01 4E 85 F1 | 	sub	fp, #1
269f4     A7 FA C1 FA | 	rdbyte	result1, fp
269f8     03 FA 05 F5 | 	and	result1, #3
269fc     01 FA 65 F0 | 	shl	result1, #1
26a00     FD 1E 02 F1 | 	add	local01, result1
26a04     02 1E 06 F1 | 	add	local01, #2
26a08     0D 4E 85 F1 | 	sub	fp, #13
26a0c     A7 1E 42 FC | 	wrbyte	local01, fp
26a10     0C 4E 05 F1 | 	add	fp, #12
26a14     A7 1E C2 FA | 	rdbyte	local01, fp
26a18     06 1E 46 F0 | 	shr	local01, #6
26a1c     01 4E 85 F1 | 	sub	fp, #1
26a20     A7 FA C1 FA | 	rdbyte	result1, fp
26a24     FD FA 31 F9 | 	getword	result1, result1, #0
26a28     02 FA 65 F0 | 	shl	result1, #2
26a2c     FD 1E 02 F1 | 	add	local01, result1
26a30     01 4E 85 F1 | 	sub	fp, #1
26a34     A7 FA C1 FA | 	rdbyte	result1, fp
26a38     03 FA 05 F5 | 	and	result1, #3
26a3c     FD FA 31 F9 | 	getword	result1, result1, #0
26a40     0A FA 65 F0 | 	shl	result1, #10
26a44     FD 1E 02 F1 | 	add	local01, result1
26a48     01 1E 06 F1 | 	add	local01, #1
26a4c     0A 4E 05 F1 | 	add	fp, #10
26a50     A7 1E 62 FC | 	wrlong	local01, fp
26a54     1C 4E 85 F1 | 	sub	fp, #28
26a58     A7 1E 02 FB | 	rdlong	local01, fp
26a5c     1C 4E 05 F1 | 	add	fp, #28
26a60     A7 FA 01 FB | 	rdlong	result1, fp
26a64     14 4E 85 F1 | 	sub	fp, #20
26a68     A7 16 C2 FA | 	rdbyte	arg03, fp
26a6c     14 4E 85 F1 | 	sub	fp, #20
26a70     09 16 86 F1 | 	sub	arg03, #9
26a74     0B FB 61 F0 | 	shl	result1, arg03
26a78     0F FB 61 FC | 	wrlong	result1, local01
26a7c                 | LR__3874
26a7c     10 4E 05 F1 | 	add	fp, #16
26a80     A7 00 68 FC | 	wrlong	#0, fp
26a84     10 4E 85 F1 | 	sub	fp, #16
26a88                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
26a88                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
26a88                 | ' 					*(LBA_t*)buff = cs << (n - 9);
26a88                 | ' 				}
26a88                 | ' 				res = RES_OK;
26a88                 | ' 			}
26a88                 | ' 			break;
26a88     28 00 90 FD | 	jmp	#LR__3877
26a8c                 | LR__3875
26a8c     0C 4E 05 F1 | 	add	fp, #12
26a90     A7 1E 02 FB | 	rdlong	local01, fp
26a94     0F 01 69 FC | 	wrlong	#128, local01
26a98     04 4E 05 F1 | 	add	fp, #4
26a9c     A7 00 68 FC | 	wrlong	#0, fp
26aa0     10 4E 85 F1 | 	sub	fp, #16
26aa4                 | ' 			*(DWORD*)buff = 128;
26aa4                 | ' 			res = RES_OK;
26aa4                 | ' 			break;
26aa4     0C 00 90 FD | 	jmp	#LR__3877
26aa8                 | LR__3876
26aa8     10 4E 05 F1 | 	add	fp, #16
26aac     A7 08 68 FC | 	wrlong	#4, fp
26ab0     10 4E 85 F1 | 	sub	fp, #16
26ab4                 | LR__3877
26ab4     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1094
26ab8                 | ' 			res = RES_PARERR;
26ab8                 | ' 	}
26ab8                 | ' 
26ab8                 | ' 	deselect();
26ab8                 | ' 
26ab8                 | ' 	return res;
26ab8     10 4E 05 F1 | 	add	fp, #16
26abc     A7 FA 01 FB | 	rdlong	result1, fp
26ac0     10 4E 85 F1 | 	sub	fp, #16
26ac4                 | LR__3878
26ac4     A7 F0 03 F6 | 	mov	ptra, fp
26ac8     B2 00 A0 FD | 	call	#popregs_
26acc                 | _fatfs_cc_disk_ioctl_ret
26acc     2D 00 64 FD | 	ret
26ad0                 | 
26ad0                 | _fatfs_cc_disk_setpins
26ad0     00 12 0E F2 | 	cmp	arg01, #0 wz
26ad4     01 FA 65 56 |  if_ne	neg	result1, #1
26ad8     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
26adc     01 00 00 FF 
26ae0     10 E4 05 F1 | 	add	objptr, ##528
26ae4     F2 14 62 FC | 	wrlong	arg02, objptr
26ae8     04 E4 05 F1 | 	add	objptr, #4
26aec     F2 16 62 FC | 	wrlong	arg03, objptr
26af0     04 E4 05 F1 | 	add	objptr, #4
26af4     F2 18 62 FC | 	wrlong	arg04, objptr
26af8     04 E4 05 F1 | 	add	objptr, #4
26afc     F2 1A 62 FC | 	wrlong	arg05, objptr
26b00     01 00 00 FF 
26b04     1C E4 85 F1 | 	sub	objptr, ##540
26b08     00 FA 05 F6 | 	mov	result1, #0
26b0c                 | _fatfs_cc_disk_setpins_ret
26b0c     2D 00 64 FD | 	ret
26b10                 | 
26b10                 | _fatfs_cc_tchar2uni
26b10     09 01 02 FB | 	rdlong	_var01, arg01
26b14     00 03 02 F6 | 	mov	_var02, _var01
26b18     01 00 06 F1 | 	add	_var01, #1
26b1c     00 05 02 F6 | 	mov	_var03, _var01
26b20     01 07 C2 FA | 	rdbyte	_var04, _var02
26b24     80 06 CE F7 | 	test	_var04, #128 wz
26b28     E8 00 90 AD |  if_e	jmp	#LR__3887
26b2c     03 09 02 F6 | 	mov	_var05, _var04
26b30     E0 08 06 F5 | 	and	_var05, #224
26b34     C0 08 0E F2 | 	cmp	_var05, #192 wz
26b38     1F 06 06 A5 |  if_e	and	_var04, #31
26b3c     01 0A 06 A6 |  if_e	mov	_var06, #1
26b40     34 00 90 AD |  if_e	jmp	#LR__3881
26b44     03 09 02 F6 | 	mov	_var05, _var04
26b48     F0 08 06 F5 | 	and	_var05, #240
26b4c     E0 08 0E F2 | 	cmp	_var05, #224 wz
26b50     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
26b54     02 0A 06 A6 |  if_e	mov	_var06, #2
26b58     1C 00 90 AD |  if_e	jmp	#LR__3880
26b5c     03 09 02 F6 | 	mov	_var05, _var04
26b60     F8 08 06 F5 | 	and	_var05, #248
26b64     F0 08 0E F2 | 	cmp	_var05, #240 wz
26b68     07 06 06 A5 |  if_e	and	_var04, #7
26b6c     03 0A 06 A6 |  if_e	mov	_var06, #3
26b70                 | ' 			return 0xFFFFFFFF;
26b70     01 FA 65 56 |  if_ne	neg	result1, #1
26b74     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
26b78                 | LR__3880
26b78                 | LR__3881
26b78                 | ' 		}
26b78                 | ' 		do {
26b78                 | LR__3882
26b78     02 0D C2 FA | 	rdbyte	_var07, _var03
26b7c     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
26b80     C0 08 06 F5 | 	and	_var05, #192
26b84     80 08 0E F2 | 	cmp	_var05, #128 wz
26b88     01 04 06 F1 | 	add	_var03, #1
26b8c     01 FA 65 56 |  if_ne	neg	result1, #1
26b90     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
26b94     06 06 66 F0 | 	shl	_var04, #6
26b98     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
26b9c     3F 02 06 F5 | 	and	_var02, #63
26ba0     01 07 42 F5 | 	or	_var04, _var02
26ba4     F4 0B 6E FB | 	djnz	_var06, #LR__3882
26ba8     80 06 16 F2 | 	cmp	_var04, #128 wc
26bac     24 00 90 CD |  if_b	jmp	#LR__3884
26bb0     6C 00 00 FF 
26bb4     00 06 16 F2 | 	cmp	_var04, ##55296 wc
26bb8     0C 00 90 CD |  if_b	jmp	#LR__3883
26bbc     70 00 00 FF 
26bc0     00 06 16 F2 | 	cmp	_var04, ##57344 wc
26bc4     0C 00 90 CD |  if_b	jmp	#LR__3884
26bc8                 | LR__3883
26bc8     80 08 00 FF 
26bcc     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
26bd0     08 00 90 CD |  if_b	jmp	#LR__3885
26bd4                 | LR__3884
26bd4     01 FA 65 F6 | 	neg	result1, #1
26bd8     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
26bdc                 | LR__3885
26bdc     80 00 00 FF 
26be0     00 06 16 F2 | 	cmp	_var04, ##65536 wc
26be4     2C 00 90 CD |  if_b	jmp	#LR__3886
26be8     03 03 02 F6 | 	mov	_var02, _var04
26bec     80 00 00 FF 
26bf0     00 02 86 F1 | 	sub	_var02, ##65536
26bf4     06 02 66 F0 | 	shl	_var02, #6
26bf8     80 FF 01 FF 
26bfc     00 02 06 F5 | 	and	_var02, ##67043328
26c00     6E 00 6C FF 
26c04     00 08 06 F6 | 	mov	_var05, ##-671032320
26c08     01 09 42 F5 | 	or	_var05, _var02
26c0c     09 06 46 F7 | 	zerox	_var04, #9
26c10     04 07 42 F5 | 	or	_var04, _var05
26c14                 | LR__3886
26c14                 | LR__3887
26c14     09 05 62 FC | 	wrlong	_var03, arg01
26c18                 | ' 	}
26c18                 | ' #line 811 "ff.c"
26c18                 | ' 	*str = p;
26c18                 | ' 	return uc;
26c18     03 FB 01 F6 | 	mov	result1, _var04
26c1c                 | _fatfs_cc_tchar2uni_ret
26c1c     2D 00 64 FD | 	ret
26c20                 | 
26c20                 | _fatfs_cc_put_utf
26c20     80 12 16 F2 | 	cmp	arg01, #128 wc
26c24     18 00 90 3D |  if_ae	jmp	#LR__3890
26c28     01 16 16 F2 | 	cmp	arg03, #1 wc
26c2c     00 FA 05 C6 |  if_b	mov	result1, #0
26c30     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
26c34     0A 13 42 FC | 	wrbyte	arg01, arg02
26c38                 | ' 		*buf = (TCHAR)chr;
26c38                 | ' 		return 1;
26c38     01 FA 05 F6 | 	mov	result1, #1
26c3c     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
26c40                 | LR__3890
26c40     04 00 00 FF 
26c44     00 12 16 F2 | 	cmp	arg01, ##2048 wc
26c48     40 00 90 3D |  if_ae	jmp	#LR__3891
26c4c     02 16 16 F2 | 	cmp	arg03, #2 wc
26c50     00 FA 05 C6 |  if_b	mov	result1, #0
26c54     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
26c58     09 FB 01 F6 | 	mov	result1, arg01
26c5c     06 FA 45 F0 | 	shr	result1, #6
26c60     1F FA 05 F5 | 	and	result1, #31
26c64     C0 16 06 F6 | 	mov	arg03, #192
26c68     FD 16 42 F5 | 	or	arg03, result1
26c6c     0A 17 42 FC | 	wrbyte	arg03, arg02
26c70     01 14 06 F1 | 	add	arg02, #1
26c74     3F 12 06 F5 | 	and	arg01, #63
26c78     80 FA 05 F6 | 	mov	result1, #128
26c7c     09 FB 41 F5 | 	or	result1, arg01
26c80     0A FB 41 FC | 	wrbyte	result1, arg02
26c84                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
26c84                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
26c84                 | ' 		return 2;
26c84     02 FA 05 F6 | 	mov	result1, #2
26c88     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
26c8c                 | LR__3891
26c8c     80 00 00 FF 
26c90     00 12 16 F2 | 	cmp	arg01, ##65536 wc
26c94     70 00 90 3D |  if_ae	jmp	#LR__3894
26c98     03 16 16 F2 | 	cmp	arg03, #3 wc
26c9c     18 00 90 CD |  if_b	jmp	#LR__3892
26ca0     6C 00 00 FF 
26ca4     00 12 16 F2 | 	cmp	arg01, ##55296 wc
26ca8     14 00 90 CD |  if_b	jmp	#LR__3893
26cac     70 00 00 FF 
26cb0     00 12 16 F2 | 	cmp	arg01, ##57344 wc
26cb4     08 00 90 3D |  if_ae	jmp	#LR__3893
26cb8                 | LR__3892
26cb8     00 FA 05 F6 | 	mov	result1, #0
26cbc     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
26cc0                 | LR__3893
26cc0     09 FB 59 F8 | 	getnib	result1, arg01, #3
26cc4     E0 16 06 F6 | 	mov	arg03, #224
26cc8     FD 16 42 F5 | 	or	arg03, result1
26ccc     0A 17 42 FC | 	wrbyte	arg03, arg02
26cd0     01 14 06 F1 | 	add	arg02, #1
26cd4     09 FB 01 F6 | 	mov	result1, arg01
26cd8     06 FA 45 F0 | 	shr	result1, #6
26cdc     3F FA 05 F5 | 	and	result1, #63
26ce0     80 16 06 F6 | 	mov	arg03, #128
26ce4     FD 16 42 F5 | 	or	arg03, result1
26ce8     0A 17 42 FC | 	wrbyte	arg03, arg02
26cec     01 14 06 F1 | 	add	arg02, #1
26cf0     3F 12 06 F5 | 	and	arg01, #63
26cf4     80 FA 05 F6 | 	mov	result1, #128
26cf8     09 FB 41 F5 | 	or	result1, arg01
26cfc     0A FB 41 FC | 	wrbyte	result1, arg02
26d00                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
26d00                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
26d00                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
26d00                 | ' 		return 3;
26d00     03 FA 05 F6 | 	mov	result1, #3
26d04     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
26d08                 | LR__3894
26d08     04 16 16 F2 | 	cmp	arg03, #4 wc
26d0c     00 FA 05 C6 |  if_b	mov	result1, #0
26d10     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
26d14     09 01 02 F6 | 	mov	_var01, arg01
26d18     E0 01 06 F4 | 	bitl	_var01, #480
26d1c     00 00 6C FF 
26d20     00 00 86 F1 | 	sub	_var01, ##-671088640
26d24     06 00 46 F0 | 	shr	_var01, #6
26d28     09 13 32 F9 | 	getword	arg01, arg01, #0
26d2c     6E 00 00 FF 
26d30     00 12 86 F1 | 	sub	arg01, ##56320
26d34     00 08 00 FF 
26d38     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
26d3c     02 00 00 CF 
26d40     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
26d44     00 FA 05 36 |  if_ae	mov	result1, #0
26d48     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
26d4c     09 01 42 F5 | 	or	_var01, arg01
26d50     80 00 00 FF 
26d54     00 00 06 F1 | 	add	_var01, ##65536
26d58     00 FB 01 F6 | 	mov	result1, _var01
26d5c     12 FA 45 F0 | 	shr	result1, #18
26d60     07 FA 05 F5 | 	and	result1, #7
26d64     F0 16 06 F6 | 	mov	arg03, #240
26d68     FD 16 42 F5 | 	or	arg03, result1
26d6c     0A 17 42 FC | 	wrbyte	arg03, arg02
26d70     01 14 06 F1 | 	add	arg02, #1
26d74     00 FB 01 F6 | 	mov	result1, _var01
26d78     0C FA 45 F0 | 	shr	result1, #12
26d7c     3F FA 05 F5 | 	and	result1, #63
26d80     80 16 06 F6 | 	mov	arg03, #128
26d84     FD 16 42 F5 | 	or	arg03, result1
26d88     0A 17 42 FC | 	wrbyte	arg03, arg02
26d8c     01 14 06 F1 | 	add	arg02, #1
26d90     00 FB 01 F6 | 	mov	result1, _var01
26d94     06 FA 45 F0 | 	shr	result1, #6
26d98     3F FA 05 F5 | 	and	result1, #63
26d9c     80 16 06 F6 | 	mov	arg03, #128
26da0     FD 16 42 F5 | 	or	arg03, result1
26da4     0A 17 42 FC | 	wrbyte	arg03, arg02
26da8     01 14 06 F1 | 	add	arg02, #1
26dac     3F 00 06 F5 | 	and	_var01, #63
26db0     80 FA 05 F6 | 	mov	result1, #128
26db4     00 FB 41 F5 | 	or	result1, _var01
26db8     0A FB 41 FC | 	wrbyte	result1, arg02
26dbc                 | ' 	chr = (hc | chr) + 0x10000;
26dbc                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
26dbc                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
26dbc                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
26dbc                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
26dbc                 | ' 	return 4;
26dbc     04 FA 05 F6 | 	mov	result1, #4
26dc0                 | _fatfs_cc_put_utf_ret
26dc0     2D 00 64 FD | 	ret
26dc4                 | 
26dc4                 | _fatfs_cc_sync_window
26dc4     02 4A 05 F6 | 	mov	COUNT_, #2
26dc8     A8 00 A0 FD | 	call	#pushregs_
26dcc     09 1F 02 F6 | 	mov	local01, arg01
26dd0     00 20 06 F6 | 	mov	local02, #0
26dd4     03 1E 06 F1 | 	add	local01, #3
26dd8     0F FB C9 FA | 	rdbyte	result1, local01 wz
26ddc     03 1E 86 F1 | 	sub	local01, #3
26de0     A4 00 90 AD |  if_e	jmp	#LR__3902
26de4     01 1E 06 F1 | 	add	local01, #1
26de8     0F 13 C2 FA | 	rdbyte	arg01, local01
26dec     33 1E 06 F1 | 	add	local01, #51
26df0     0F 15 02 F6 | 	mov	arg02, local01
26df4     04 1E 86 F1 | 	sub	local01, #4
26df8     0F 17 02 FB | 	rdlong	arg03, local01
26dfc     30 1E 86 F1 | 	sub	local01, #48
26e00     01 18 06 F6 | 	mov	arg04, #1
26e04     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
26e08     00 FA 0D F2 | 	cmp	result1, #0 wz
26e0c     74 00 90 5D |  if_ne	jmp	#LR__3900
26e10     03 1E 06 F1 | 	add	local01, #3
26e14     0F 01 48 FC | 	wrbyte	#0, local01
26e18     2D 1E 06 F1 | 	add	local01, #45
26e1c     0F FB 01 FB | 	rdlong	result1, local01
26e20     0C 1E 86 F1 | 	sub	local01, #12
26e24     0F 19 02 FB | 	rdlong	arg04, local01
26e28     0C FB 81 F1 | 	sub	result1, arg04
26e2c     08 1E 86 F1 | 	sub	local01, #8
26e30     0F 19 02 FB | 	rdlong	arg04, local01
26e34     1C 1E 86 F1 | 	sub	local01, #28
26e38     0C FB 11 F2 | 	cmp	result1, arg04 wc
26e3c     48 00 90 3D |  if_ae	jmp	#LR__3901
26e40     02 1E 06 F1 | 	add	local01, #2
26e44     0F 19 C2 FA | 	rdbyte	arg04, local01
26e48     02 1E 86 F1 | 	sub	local01, #2
26e4c     02 18 0E F2 | 	cmp	arg04, #2 wz
26e50     34 00 90 5D |  if_ne	jmp	#LR__3901
26e54     01 1E 06 F1 | 	add	local01, #1
26e58     0F 13 C2 FA | 	rdbyte	arg01, local01
26e5c     33 1E 06 F1 | 	add	local01, #51
26e60     0F 15 02 F6 | 	mov	arg02, local01
26e64     04 1E 86 F1 | 	sub	local01, #4
26e68     0F 17 02 FB | 	rdlong	arg03, local01
26e6c     14 1E 86 F1 | 	sub	local01, #20
26e70     0F 1F 02 FB | 	rdlong	local01, local01
26e74     0F 17 02 F1 | 	add	arg03, local01
26e78     01 18 06 F6 | 	mov	arg04, #1
26e7c     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
26e80     04 00 90 FD | 	jmp	#LR__3901
26e84                 | LR__3900
26e84     01 20 06 F6 | 	mov	local02, #1
26e88                 | LR__3901
26e88                 | LR__3902
26e88                 | ' 			res = FR_DISK_ERR;
26e88                 | ' 		}
26e88                 | ' 	}
26e88                 | ' 	return res;
26e88     10 FB 01 F6 | 	mov	result1, local02
26e8c     A7 F0 03 F6 | 	mov	ptra, fp
26e90     B2 00 A0 FD | 	call	#popregs_
26e94                 | _fatfs_cc_sync_window_ret
26e94     2D 00 64 FD | 	ret
26e98                 | 
26e98                 | _fatfs_cc_move_window
26e98     03 4A 05 F6 | 	mov	COUNT_, #3
26e9c     A8 00 A0 FD | 	call	#pushregs_
26ea0     09 1F 02 F6 | 	mov	local01, arg01
26ea4     0A 21 02 F6 | 	mov	local02, arg02
26ea8     00 22 06 F6 | 	mov	local03, #0
26eac     30 1E 06 F1 | 	add	local01, #48
26eb0     0F 19 02 FB | 	rdlong	arg04, local01
26eb4     30 1E 86 F1 | 	sub	local01, #48
26eb8     0C 21 0A F2 | 	cmp	local02, arg04 wz
26ebc     40 00 90 AD |  if_e	jmp	#LR__3911
26ec0     0F 13 02 F6 | 	mov	arg01, local01
26ec4     FC FE BF FD | 	call	#_fatfs_cc_sync_window
26ec8     FD 22 0A F6 | 	mov	local03, result1 wz
26ecc     30 00 90 5D |  if_ne	jmp	#LR__3910
26ed0     01 1E 06 F1 | 	add	local01, #1
26ed4     0F 13 C2 FA | 	rdbyte	arg01, local01
26ed8     33 1E 06 F1 | 	add	local01, #51
26edc     0F 15 02 F6 | 	mov	arg02, local01
26ee0     10 17 02 F6 | 	mov	arg03, local02
26ee4     01 18 06 F6 | 	mov	arg04, #1
26ee8     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
26eec     00 FA 0D F2 | 	cmp	result1, #0 wz
26ef0     01 20 66 56 |  if_ne	neg	local02, #1
26ef4     01 22 06 56 |  if_ne	mov	local03, #1
26ef8     04 1E 86 F1 | 	sub	local01, #4
26efc     0F 21 62 FC | 	wrlong	local02, local01
26f00                 | LR__3910
26f00                 | LR__3911
26f00                 | ' 				sect = (LBA_t)0 - 1;
26f00                 | ' 				res = FR_DISK_ERR;
26f00                 | ' 			}
26f00                 | ' 			fs->winsect = sect;
26f00                 | ' 		}
26f00                 | ' 	}
26f00                 | ' 	return res;
26f00     11 FB 01 F6 | 	mov	result1, local03
26f04     A7 F0 03 F6 | 	mov	ptra, fp
26f08     B2 00 A0 FD | 	call	#popregs_
26f0c                 | _fatfs_cc_move_window_ret
26f0c     2D 00 64 FD | 	ret
26f10                 | 
26f10                 | _fatfs_cc_sync_fs
26f10     02 4A 05 F6 | 	mov	COUNT_, #2
26f14     A8 00 A0 FD | 	call	#pushregs_
26f18     09 1F 02 F6 | 	mov	local01, arg01
26f1c     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
26f20     FD 20 0A F6 | 	mov	local02, result1 wz
26f24     D8 00 90 5D |  if_ne	jmp	#LR__3921
26f28     0F 19 C2 FA | 	rdbyte	arg04, local01
26f2c     03 18 0E F2 | 	cmp	arg04, #3 wz
26f30     04 1E 06 A1 |  if_e	add	local01, #4
26f34     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
26f38     04 1E 86 A1 |  if_e	sub	local01, #4
26f3c     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
26f40     A0 00 90 5D |  if_ne	jmp	#LR__3920
26f44     34 1E 06 F1 | 	add	local01, #52
26f48     0F 13 02 F6 | 	mov	arg01, local01
26f4c     00 14 06 F6 | 	mov	arg02, #0
26f50     09 16 C6 F9 | 	decod	arg03, #9
26f54     98 00 A0 FD | 	call	#\builtin_bytefill_
26f58     0F 13 02 F6 | 	mov	arg01, local01
26f5c     FE 13 06 F1 | 	add	arg01, #510
26f60     55 00 80 FF 
26f64     09 AB 58 FC | 	wrword	##43605, arg01
26f68     A9 B0 A0 FF 
26f6c     0F A5 68 FC | 	wrlong	##1096897106, local01
26f70     0F 13 02 F6 | 	mov	arg01, local01
26f74     E4 13 06 F1 | 	add	arg01, #484
26f78     B9 A0 B0 FF 
26f7c     09 E5 68 FC | 	wrlong	##1631679090, arg01
26f80     0F 13 02 F6 | 	mov	arg01, local01
26f84     E8 13 06 F1 | 	add	arg01, #488
26f88     20 1E 86 F1 | 	sub	local01, #32
26f8c     0F 15 02 FB | 	rdlong	arg02, local01
26f90     09 15 62 FC | 	wrlong	arg02, arg01
26f94     20 1E 06 F1 | 	add	local01, #32
26f98     0F 13 02 F6 | 	mov	arg01, local01
26f9c     EC 13 06 F1 | 	add	arg01, #492
26fa0     24 1E 86 F1 | 	sub	local01, #36
26fa4     0F 15 02 FB | 	rdlong	arg02, local01
26fa8     09 15 62 FC | 	wrlong	arg02, arg01
26fac     10 1E 06 F1 | 	add	local01, #16
26fb0     0F 17 02 FB | 	rdlong	arg03, local01
26fb4     01 16 06 F1 | 	add	arg03, #1
26fb8     10 1E 06 F1 | 	add	local01, #16
26fbc     0F 17 62 FC | 	wrlong	arg03, local01
26fc0     2F 1E 86 F1 | 	sub	local01, #47
26fc4     0F 13 C2 FA | 	rdbyte	arg01, local01
26fc8     33 1E 06 F1 | 	add	local01, #51
26fcc     0F 15 02 F6 | 	mov	arg02, local01
26fd0     01 18 06 F6 | 	mov	arg04, #1
26fd4     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
26fd8     30 1E 86 F1 | 	sub	local01, #48
26fdc     0F 01 48 FC | 	wrbyte	#0, local01
26fe0     04 1E 86 F1 | 	sub	local01, #4
26fe4                 | LR__3920
26fe4     01 1E 06 F1 | 	add	local01, #1
26fe8     0F 13 C2 FA | 	rdbyte	arg01, local01
26fec     00 14 06 F6 | 	mov	arg02, #0
26ff0     00 16 06 F6 | 	mov	arg03, #0
26ff4     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
26ff8     00 FA 0D F2 | 	cmp	result1, #0 wz
26ffc     01 20 06 56 |  if_ne	mov	local02, #1
27000                 | LR__3921
27000                 | ' 	}
27000                 | ' 
27000                 | ' 	return res;
27000     10 FB 01 F6 | 	mov	result1, local02
27004     A7 F0 03 F6 | 	mov	ptra, fp
27008     B2 00 A0 FD | 	call	#popregs_
2700c                 | _fatfs_cc_sync_fs_ret
2700c     2D 00 64 FD | 	ret
27010                 | 
27010                 | _fatfs_cc_clst2sect
27010     02 14 86 F1 | 	sub	arg02, #2
27014     18 12 06 F1 | 	add	arg01, #24
27018     09 01 02 FB | 	rdlong	_var01, arg01
2701c     18 12 86 F1 | 	sub	arg01, #24
27020     02 00 86 F1 | 	sub	_var01, #2
27024     00 15 12 F2 | 	cmp	arg02, _var01 wc
27028     00 FA 05 36 |  if_ae	mov	result1, #0
2702c     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
27030     0A 12 06 F1 | 	add	arg01, #10
27034     09 01 E2 FA | 	rdword	_var01, arg01
27038     0A 01 02 FD | 	qmul	_var01, arg02
2703c                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
2703c     22 12 06 F1 | 	add	arg01, #34
27040     09 FB 01 FB | 	rdlong	result1, arg01
27044     18 00 62 FD | 	getqx	_var01
27048     00 FB 01 F1 | 	add	result1, _var01
2704c                 | _fatfs_cc_clst2sect_ret
2704c     2D 00 64 FD | 	ret
27050                 | 
27050                 | _fatfs_cc_get_fat
27050     07 4A 05 F6 | 	mov	COUNT_, #7
27054     A8 00 A0 FD | 	call	#pushregs_
27058     0A 1F 02 F6 | 	mov	local01, arg02
2705c     09 21 02 FB | 	rdlong	local02, arg01
27060     02 1E 16 F2 | 	cmp	local01, #2 wc
27064     14 00 90 CD |  if_b	jmp	#LR__3930
27068     18 20 06 F1 | 	add	local02, #24
2706c     10 23 02 FB | 	rdlong	local03, local02
27070     18 20 86 F1 | 	sub	local02, #24
27074     11 1F 12 F2 | 	cmp	local01, local03 wc
27078     08 00 90 CD |  if_b	jmp	#LR__3931
2707c                 | LR__3930
2707c     01 24 06 F6 | 	mov	local04, #1
27080     60 01 90 FD | 	jmp	#LR__3938
27084                 | LR__3931
27084     01 24 66 F6 | 	neg	local04, #1
27088                 | ' 		val = 0xFFFFFFFF;
27088                 | ' 
27088                 | ' 		switch (fs->fs_type) {
27088     10 27 C2 FA | 	rdbyte	local05, local02
2708c     01 26 86 F1 | 	sub	local05, #1
27090     03 26 26 F3 | 	fle	local05, #3
27094     30 26 62 FD | 	jmprel	local05
27098                 | LR__3932
27098     0C 00 90 FD | 	jmp	#LR__3933
2709c     B8 00 90 FD | 	jmp	#LR__3934
270a0     F8 00 90 FD | 	jmp	#LR__3935
270a4     38 01 90 FD | 	jmp	#LR__3936
270a8                 | LR__3933
270a8     0F 27 02 F6 | 	mov	local05, local01
270ac     0F 13 02 F6 | 	mov	arg01, local01
270b0     01 12 46 F0 | 	shr	arg01, #1
270b4     09 27 02 F1 | 	add	local05, arg01
270b8     10 13 02 F6 | 	mov	arg01, local02
270bc     13 29 02 F6 | 	mov	local06, local05
270c0     09 28 46 F0 | 	shr	local06, #9
270c4     24 20 06 F1 | 	add	local02, #36
270c8     10 15 02 FB | 	rdlong	arg02, local02
270cc     24 20 86 F1 | 	sub	local02, #36
270d0     14 15 02 F1 | 	add	arg02, local06
270d4     C0 FD BF FD | 	call	#_fatfs_cc_move_window
270d8     00 FA 0D F2 | 	cmp	result1, #0 wz
270dc     04 01 90 5D |  if_ne	jmp	#LR__3937
270e0     13 29 02 F6 | 	mov	local06, local05
270e4     FF 29 06 F5 | 	and	local06, #511
270e8     34 20 06 F1 | 	add	local02, #52
270ec     10 29 02 F1 | 	add	local06, local02
270f0     14 2B C2 FA | 	rdbyte	local07, local06
270f4     34 20 86 F1 | 	sub	local02, #52
270f8     10 13 02 F6 | 	mov	arg01, local02
270fc     01 26 06 F1 | 	add	local05, #1
27100     13 29 02 F6 | 	mov	local06, local05
27104     09 28 46 F0 | 	shr	local06, #9
27108     24 20 06 F1 | 	add	local02, #36
2710c     10 15 02 FB | 	rdlong	arg02, local02
27110     24 20 86 F1 | 	sub	local02, #36
27114     14 15 02 F1 | 	add	arg02, local06
27118     7C FD BF FD | 	call	#_fatfs_cc_move_window
2711c     00 FA 0D F2 | 	cmp	result1, #0 wz
27120     C0 00 90 5D |  if_ne	jmp	#LR__3937
27124     FF 27 06 F5 | 	and	local05, #511
27128     34 20 06 F1 | 	add	local02, #52
2712c     10 27 02 F1 | 	add	local05, local02
27130     13 29 C2 FA | 	rdbyte	local06, local05
27134     08 28 66 F0 | 	shl	local06, #8
27138     14 2B 42 F5 | 	or	local07, local06
2713c     01 1E CE F7 | 	test	local01, #1 wz
27140     04 2A 46 50 |  if_ne	shr	local07, #4
27144     15 23 02 56 |  if_ne	mov	local03, local07
27148     0B 2A 46 A7 |  if_e	zerox	local07, #11
2714c     15 23 02 A6 |  if_e	mov	local03, local07
27150     11 25 02 F6 | 	mov	local04, local03
27154                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
27154                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
27154                 | ' 			break;
27154     8C 00 90 FD | 	jmp	#LR__3937
27158                 | LR__3934
27158     10 13 02 F6 | 	mov	arg01, local02
2715c     0F 29 02 F6 | 	mov	local06, local01
27160     08 28 46 F0 | 	shr	local06, #8
27164     24 20 06 F1 | 	add	local02, #36
27168     10 15 02 FB | 	rdlong	arg02, local02
2716c     24 20 86 F1 | 	sub	local02, #36
27170     14 15 02 F1 | 	add	arg02, local06
27174     20 FD BF FD | 	call	#_fatfs_cc_move_window
27178     00 FA 0D F2 | 	cmp	result1, #0 wz
2717c     64 00 90 5D |  if_ne	jmp	#LR__3937
27180     34 20 06 F1 | 	add	local02, #52
27184     01 1E 66 F0 | 	shl	local01, #1
27188     FF 1F 06 F5 | 	and	local01, #511
2718c     0F 21 02 F1 | 	add	local02, local01
27190                 | ' {
27190                 | ' 
27190                 | ' 	return *((WORD*)ptr);
27190     10 FB E1 FA | 	rdword	result1, local02
27194     FD 24 32 F9 | 	getword	local04, result1, #0
27198                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
27198                 | ' 			break;
27198     48 00 90 FD | 	jmp	#LR__3937
2719c                 | LR__3935
2719c     10 13 02 F6 | 	mov	arg01, local02
271a0     0F 29 02 F6 | 	mov	local06, local01
271a4     07 28 46 F0 | 	shr	local06, #7
271a8     24 20 06 F1 | 	add	local02, #36
271ac     10 15 02 FB | 	rdlong	arg02, local02
271b0     24 20 86 F1 | 	sub	local02, #36
271b4     14 15 02 F1 | 	add	arg02, local06
271b8     DC FC BF FD | 	call	#_fatfs_cc_move_window
271bc     00 FA 0D F2 | 	cmp	result1, #0 wz
271c0     20 00 90 5D |  if_ne	jmp	#LR__3937
271c4     34 20 06 F1 | 	add	local02, #52
271c8     02 1E 66 F0 | 	shl	local01, #2
271cc     FF 1F 06 F5 | 	and	local01, #511
271d0     0F 21 02 F1 | 	add	local02, local01
271d4                 | ' {
271d4                 | ' 
271d4                 | ' 	return *((DWORD*)ptr);
271d4     10 25 02 FB | 	rdlong	local04, local02
271d8     7C 24 06 F4 | 	bitl	local04, #124
271dc                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
271dc                 | ' 			break;
271dc     04 00 90 FD | 	jmp	#LR__3937
271e0                 | LR__3936
271e0     01 24 06 F6 | 	mov	local04, #1
271e4                 | LR__3937
271e4                 | LR__3938
271e4                 | ' 			val = 1;
271e4                 | ' 		}
271e4                 | ' 	}
271e4                 | ' 
271e4                 | ' 	return val;
271e4     12 FB 01 F6 | 	mov	result1, local04
271e8     A7 F0 03 F6 | 	mov	ptra, fp
271ec     B2 00 A0 FD | 	call	#popregs_
271f0                 | _fatfs_cc_get_fat_ret
271f0     2D 00 64 FD | 	ret
271f4                 | 
271f4                 | _fatfs_cc_put_fat
271f4     08 4A 05 F6 | 	mov	COUNT_, #8
271f8     A8 00 A0 FD | 	call	#pushregs_
271fc     09 1F 02 F6 | 	mov	local01, arg01
27200     0A 21 02 F6 | 	mov	local02, arg02
27204     0B 23 02 F6 | 	mov	local03, arg03
27208     02 24 06 F6 | 	mov	local04, #2
2720c     02 20 16 F2 | 	cmp	local02, #2 wc
27210     E0 01 90 CD |  if_b	jmp	#LR__3947
27214     18 1E 06 F1 | 	add	local01, #24
27218     0F 27 02 FB | 	rdlong	local05, local01
2721c     18 1E 86 F1 | 	sub	local01, #24
27220     13 21 12 F2 | 	cmp	local02, local05 wc
27224     CC 01 90 3D |  if_ae	jmp	#LR__3947
27228                 | ' 		switch (fs->fs_type) {
27228     0F 29 C2 FA | 	rdbyte	local06, local01
2722c     01 28 86 F1 | 	sub	local06, #1
27230     03 28 26 F3 | 	fle	local06, #3
27234     30 28 62 FD | 	jmprel	local06
27238                 | LR__3940
27238     0C 00 90 FD | 	jmp	#LR__3941
2723c     F8 00 90 FD | 	jmp	#LR__3944
27240     40 01 90 FD | 	jmp	#LR__3945
27244     AC 01 90 FD | 	jmp	#LR__3946
27248                 | LR__3941
27248     10 2B 02 F6 | 	mov	local07, local02
2724c     10 27 02 F6 | 	mov	local05, local02
27250     01 26 46 F0 | 	shr	local05, #1
27254     13 2B 02 F1 | 	add	local07, local05
27258     0F 13 02 F6 | 	mov	arg01, local01
2725c     15 29 02 F6 | 	mov	local06, local07
27260     09 28 46 F0 | 	shr	local06, #9
27264     24 1E 06 F1 | 	add	local01, #36
27268     0F 15 02 FB | 	rdlong	arg02, local01
2726c     24 1E 86 F1 | 	sub	local01, #36
27270     14 15 02 F1 | 	add	arg02, local06
27274     20 FC BF FD | 	call	#_fatfs_cc_move_window
27278     FD 24 0A F6 | 	mov	local04, result1 wz
2727c     74 01 90 5D |  if_ne	jmp	#LR__3946
27280     34 1E 06 F1 | 	add	local01, #52
27284     0F 2D 02 F6 | 	mov	local08, local01
27288     15 27 02 F6 | 	mov	local05, local07
2728c     FF 27 06 F5 | 	and	local05, #511
27290     13 2D 02 F1 | 	add	local08, local05
27294     01 20 CE F7 | 	test	local02, #1 wz
27298     34 1E 86 F1 | 	sub	local01, #52
2729c     01 2A 06 F1 | 	add	local07, #1
272a0     18 00 90 AD |  if_e	jmp	#LR__3942
272a4     16 27 C2 FA | 	rdbyte	local05, local08
272a8     13 27 42 F8 | 	getnib	local05, local05, #0
272ac     11 29 E2 F8 | 	getbyte	local06, local03, #0
272b0     04 28 66 F0 | 	shl	local06, #4
272b4     14 27 42 F5 | 	or	local05, local06
272b8     04 00 90 FD | 	jmp	#LR__3943
272bc                 | LR__3942
272bc     11 27 02 F6 | 	mov	local05, local03
272c0                 | LR__3943
272c0     16 27 42 FC | 	wrbyte	local05, local08
272c4     03 1E 06 F1 | 	add	local01, #3
272c8     0F 03 48 FC | 	wrbyte	#1, local01
272cc     03 1E 86 F1 | 	sub	local01, #3
272d0     0F 13 02 F6 | 	mov	arg01, local01
272d4     15 2D 02 F6 | 	mov	local08, local07
272d8     09 2C 46 F0 | 	shr	local08, #9
272dc     24 1E 06 F1 | 	add	local01, #36
272e0     0F 15 02 FB | 	rdlong	arg02, local01
272e4     24 1E 86 F1 | 	sub	local01, #36
272e8     16 15 02 F1 | 	add	arg02, local08
272ec     A8 FB BF FD | 	call	#_fatfs_cc_move_window
272f0     FD 24 0A F6 | 	mov	local04, result1 wz
272f4     FC 00 90 5D |  if_ne	jmp	#LR__3946
272f8     34 1E 06 F1 | 	add	local01, #52
272fc     0F 2D 02 F6 | 	mov	local08, local01
27300     FF 2B 06 F5 | 	and	local07, #511
27304     15 2D 02 F1 | 	add	local08, local07
27308     01 20 CE F7 | 	test	local02, #1 wz
2730c     04 22 46 50 |  if_ne	shr	local03, #4
27310     11 27 02 56 |  if_ne	mov	local05, local03
27314     16 27 C2 AA |  if_e	rdbyte	local05, local08
27318     F0 26 06 A5 |  if_e	and	local05, #240
2731c     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
27320     11 23 42 A8 |  if_e	getnib	local03, local03, #0
27324     11 27 42 A5 |  if_e	or	local05, local03
27328     16 27 42 FC | 	wrbyte	local05, local08
2732c     31 1E 86 F1 | 	sub	local01, #49
27330     0F 03 48 FC | 	wrbyte	#1, local01
27334                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
27334                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
27334                 | ' 			fs->wflag = 1;
27334                 | ' 			break;
27334     BC 00 90 FD | 	jmp	#LR__3946
27338                 | LR__3944
27338     0F 13 02 F6 | 	mov	arg01, local01
2733c     10 2D 02 F6 | 	mov	local08, local02
27340     08 2C 46 F0 | 	shr	local08, #8
27344     24 1E 06 F1 | 	add	local01, #36
27348     0F 15 02 FB | 	rdlong	arg02, local01
2734c     24 1E 86 F1 | 	sub	local01, #36
27350     16 15 02 F1 | 	add	arg02, local08
27354     40 FB BF FD | 	call	#_fatfs_cc_move_window
27358     FD 24 0A F6 | 	mov	local04, result1 wz
2735c     94 00 90 5D |  if_ne	jmp	#LR__3946
27360     34 1E 06 F1 | 	add	local01, #52
27364     0F 13 02 F6 | 	mov	arg01, local01
27368     01 20 66 F0 | 	shl	local02, #1
2736c     FF 21 06 F5 | 	and	local02, #511
27370     10 13 02 F1 | 	add	arg01, local02
27374     09 23 52 FC | 	wrword	local03, arg01
27378     31 1E 86 F1 | 	sub	local01, #49
2737c     0F 03 48 FC | 	wrbyte	#1, local01
27380                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
27380                 | ' 			fs->wflag = 1;
27380                 | ' 			break;
27380     70 00 90 FD | 	jmp	#LR__3946
27384                 | LR__3945
27384     0F 13 02 F6 | 	mov	arg01, local01
27388     10 2D 02 F6 | 	mov	local08, local02
2738c     07 2C 46 F0 | 	shr	local08, #7
27390     24 1E 06 F1 | 	add	local01, #36
27394     0F 15 02 FB | 	rdlong	arg02, local01
27398     24 1E 86 F1 | 	sub	local01, #36
2739c     16 15 02 F1 | 	add	arg02, local08
273a0     F4 FA BF FD | 	call	#_fatfs_cc_move_window
273a4     FD 24 0A F6 | 	mov	local04, result1 wz
273a8     48 00 90 5D |  if_ne	jmp	#LR__3946
273ac     7C 22 06 F4 | 	bitl	local03, #124
273b0     34 1E 06 F1 | 	add	local01, #52
273b4     10 2D 02 F6 | 	mov	local08, local02
273b8     02 2C 66 F0 | 	shl	local08, #2
273bc     FF 2D 06 F5 | 	and	local08, #511
273c0     0F 13 02 F6 | 	mov	arg01, local01
273c4     16 13 02 F1 | 	add	arg01, local08
273c8                 | ' {
273c8                 | ' 
273c8                 | ' 	return *((DWORD*)ptr);
273c8     09 2D 02 FB | 	rdlong	local08, arg01
273cc     00 00 78 FF 
273d0     00 2C 06 F5 | 	and	local08, ##-268435456
273d4     16 23 42 F5 | 	or	local03, local08
273d8     0F 13 02 F6 | 	mov	arg01, local01
273dc     02 20 66 F0 | 	shl	local02, #2
273e0     FF 21 06 F5 | 	and	local02, #511
273e4     10 13 02 F1 | 	add	arg01, local02
273e8     09 23 62 FC | 	wrlong	local03, arg01
273ec     31 1E 86 F1 | 	sub	local01, #49
273f0     0F 03 48 FC | 	wrbyte	#1, local01
273f4                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
273f4                 | ' 			}
273f4                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
273f4                 | ' 			fs->wflag = 1;
273f4                 | ' 			break;
273f4                 | LR__3946
273f4                 | LR__3947
273f4                 | ' 		}
273f4                 | ' 	}
273f4                 | ' 	return res;
273f4     12 FB 01 F6 | 	mov	result1, local04
273f8     A7 F0 03 F6 | 	mov	ptra, fp
273fc     B2 00 A0 FD | 	call	#popregs_
27400                 | _fatfs_cc_put_fat_ret
27400     2D 00 64 FD | 	ret
27404                 | 
27404                 | _fatfs_cc_remove_chain
27404     05 4A 05 F6 | 	mov	COUNT_, #5
27408     A8 00 A0 FD | 	call	#pushregs_
2740c     09 1F 02 F6 | 	mov	local01, arg01
27410     0A 21 02 F6 | 	mov	local02, arg02
27414     0B 23 02 F6 | 	mov	local03, arg03
27418     0F 25 02 FB | 	rdlong	local04, local01
2741c     02 20 16 F2 | 	cmp	local02, #2 wc
27420     14 00 90 CD |  if_b	jmp	#LR__3950
27424     18 24 06 F1 | 	add	local04, #24
27428     12 FB 01 FB | 	rdlong	result1, local04
2742c     18 24 86 F1 | 	sub	local04, #24
27430     FD 20 12 F2 | 	cmp	local02, result1 wc
27434     08 00 90 CD |  if_b	jmp	#LR__3951
27438                 | LR__3950
27438     02 FA 05 F6 | 	mov	result1, #2
2743c     CC 00 90 FD | 	jmp	#LR__3956
27440                 | LR__3951
27440     00 22 0E F2 | 	cmp	local03, #0 wz
27444     18 00 90 AD |  if_e	jmp	#LR__3952
27448     11 15 02 F6 | 	mov	arg02, local03
2744c     12 13 02 F6 | 	mov	arg01, local04
27450     01 16 66 F6 | 	neg	arg03, #1
27454     9C FD BF FD | 	call	#_fatfs_cc_put_fat
27458     00 FA 0D F2 | 	cmp	result1, #0 wz
2745c     AC 00 90 5D |  if_ne	jmp	#LR__3956
27460                 | LR__3952
27460                 | ' 	}
27460                 | ' 
27460                 | ' 
27460                 | ' 	do {
27460                 | LR__3953
27460     10 15 02 F6 | 	mov	arg02, local02
27464     0F 13 02 F6 | 	mov	arg01, local01
27468     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
2746c     FD 26 0A F6 | 	mov	local05, result1 wz
27470     94 00 90 AD |  if_e	jmp	#LR__3955
27474     01 26 0E F2 | 	cmp	local05, #1 wz
27478     02 FA 05 A6 |  if_e	mov	result1, #2
2747c     8C 00 90 AD |  if_e	jmp	#LR__3956
27480     FF FF 7F FF 
27484     FF 27 0E F2 | 	cmp	local05, ##-1 wz
27488     01 FA 05 A6 |  if_e	mov	result1, #1
2748c     7C 00 90 AD |  if_e	jmp	#LR__3956
27490     10 15 02 F6 | 	mov	arg02, local02
27494     12 13 02 F6 | 	mov	arg01, local04
27498     00 16 06 F6 | 	mov	arg03, #0
2749c     54 FD BF FD | 	call	#_fatfs_cc_put_fat
274a0     FD 22 0A F6 | 	mov	local03, result1 wz
274a4     11 FB 01 56 |  if_ne	mov	result1, local03
274a8     60 00 90 5D |  if_ne	jmp	#LR__3956
274ac     18 24 06 F1 | 	add	local04, #24
274b0     12 23 02 FB | 	rdlong	local03, local04
274b4     02 22 86 F1 | 	sub	local03, #2
274b8     04 24 86 F1 | 	sub	local04, #4
274bc     12 21 02 FB | 	rdlong	local02, local04
274c0     14 24 86 F1 | 	sub	local04, #20
274c4     11 21 12 F2 | 	cmp	local02, local03 wc
274c8     24 00 90 3D |  if_ae	jmp	#LR__3954
274cc     14 24 06 F1 | 	add	local04, #20
274d0     12 23 02 FB | 	rdlong	local03, local04
274d4     01 22 06 F1 | 	add	local03, #1
274d8     12 23 62 FC | 	wrlong	local03, local04
274dc     10 24 86 F1 | 	sub	local04, #16
274e0     12 23 C2 FA | 	rdbyte	local03, local04
274e4     01 22 46 F5 | 	or	local03, #1
274e8     12 23 42 FC | 	wrbyte	local03, local04
274ec     04 24 86 F1 | 	sub	local04, #4
274f0                 | LR__3954
274f0     13 21 02 F6 | 	mov	local02, local05
274f4     18 24 06 F1 | 	add	local04, #24
274f8     12 27 02 FB | 	rdlong	local05, local04
274fc     18 24 86 F1 | 	sub	local04, #24
27500     13 21 12 F2 | 	cmp	local02, local05 wc
27504     58 FF 9F CD |  if_b	jmp	#LR__3953
27508                 | LR__3955
27508                 | ' #line 1500 "ff.c"
27508                 | ' 	return FR_OK;
27508     00 FA 05 F6 | 	mov	result1, #0
2750c                 | LR__3956
2750c     A7 F0 03 F6 | 	mov	ptra, fp
27510     B2 00 A0 FD | 	call	#popregs_
27514                 | _fatfs_cc_remove_chain_ret
27514     2D 00 64 FD | 	ret
27518                 | 
27518                 | _fatfs_cc_create_chain
27518     09 4A 05 F6 | 	mov	COUNT_, #9
2751c     A8 00 A0 FD | 	call	#pushregs_
27520     09 1F 02 F6 | 	mov	local01, arg01
27524     0A 21 0A F6 | 	mov	local02, arg02 wz
27528     0F 23 02 FB | 	rdlong	local03, local01
2752c     28 00 90 5D |  if_ne	jmp	#LR__3960
27530     10 22 06 F1 | 	add	local03, #16
27534     11 25 0A FB | 	rdlong	local04, local03 wz
27538     10 22 86 F1 | 	sub	local03, #16
2753c     18 22 06 51 |  if_ne	add	local03, #24
27540     11 27 02 5B |  if_ne	rdlong	local05, local03
27544     18 22 86 51 |  if_ne	sub	local03, #24
27548     13 25 12 52 |  if_ne	cmp	local04, local05 wc
2754c     50 00 90 4D |  if_c_and_nz	jmp	#LR__3961
27550     01 24 06 F6 | 	mov	local04, #1
27554     48 00 90 FD | 	jmp	#LR__3961
27558                 | LR__3960
27558     10 15 02 F6 | 	mov	arg02, local02
2755c     0F 13 02 F6 | 	mov	arg01, local01
27560     EC FA BF FD | 	call	#_fatfs_cc_get_fat
27564     FD 24 02 F6 | 	mov	local04, result1
27568     02 24 16 F2 | 	cmp	local04, #2 wc
2756c     01 FA 05 C6 |  if_b	mov	result1, #1
27570     BC 01 90 CD |  if_b	jmp	#LR__3971
27574     FF FF 7F FF 
27578     FF 25 0E F2 | 	cmp	local04, ##-1 wz
2757c     12 FB 01 A6 |  if_e	mov	result1, local04
27580     AC 01 90 AD |  if_e	jmp	#LR__3971
27584     18 22 06 F1 | 	add	local03, #24
27588     11 27 02 FB | 	rdlong	local05, local03
2758c     18 22 86 F1 | 	sub	local03, #24
27590     13 25 12 F2 | 	cmp	local04, local05 wc
27594     12 FB 01 C6 |  if_b	mov	result1, local04
27598     94 01 90 CD |  if_b	jmp	#LR__3971
2759c     10 25 02 F6 | 	mov	local04, local02
275a0                 | LR__3961
275a0     14 22 06 F1 | 	add	local03, #20
275a4     11 27 0A FB | 	rdlong	local05, local03 wz
275a8     14 22 86 F1 | 	sub	local03, #20
275ac     00 FA 05 A6 |  if_e	mov	result1, #0
275b0     7C 01 90 AD |  if_e	jmp	#LR__3971
275b4     00 28 06 F6 | 	mov	local06, #0
275b8     10 25 0A F2 | 	cmp	local04, local02 wz
275bc     74 00 90 5D |  if_ne	jmp	#LR__3964
275c0     12 29 02 F6 | 	mov	local06, local04
275c4     01 28 06 F1 | 	add	local06, #1
275c8     18 22 06 F1 | 	add	local03, #24
275cc     11 27 02 FB | 	rdlong	local05, local03
275d0     18 22 86 F1 | 	sub	local03, #24
275d4     13 29 12 F2 | 	cmp	local06, local05 wc
275d8     02 28 06 36 |  if_ae	mov	local06, #2
275dc     14 15 02 F6 | 	mov	arg02, local06
275e0     0F 13 02 F6 | 	mov	arg01, local01
275e4     68 FA BF FD | 	call	#_fatfs_cc_get_fat
275e8     FD 26 02 F6 | 	mov	local05, result1
275ec     01 26 0E F2 | 	cmp	local05, #1 wz
275f0     FF FF 7F 5F 
275f4     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
275f8     13 FB 01 A6 |  if_e	mov	result1, local05
275fc     30 01 90 AD |  if_e	jmp	#LR__3971
27600     00 26 0E F2 | 	cmp	local05, #0 wz
27604     2C 00 90 AD |  if_e	jmp	#LR__3963
27608     10 22 06 F1 | 	add	local03, #16
2760c     11 2B 02 FB | 	rdlong	local07, local03
27610     10 22 86 F1 | 	sub	local03, #16
27614     02 2A 16 F2 | 	cmp	local07, #2 wc
27618     14 00 90 CD |  if_b	jmp	#LR__3962
2761c     18 22 06 F1 | 	add	local03, #24
27620     11 27 02 FB | 	rdlong	local05, local03
27624     18 22 86 F1 | 	sub	local03, #24
27628     13 2B 12 F2 | 	cmp	local07, local05 wc
2762c     15 25 02 C6 |  if_b	mov	local04, local07
27630                 | LR__3962
27630     00 28 06 F6 | 	mov	local06, #0
27634                 | LR__3963
27634                 | LR__3964
27634     00 28 0E F2 | 	cmp	local06, #0 wz
27638     60 00 90 5D |  if_ne	jmp	#LR__3967
2763c     12 29 02 F6 | 	mov	local06, local04
27640                 | ' 			ncl = scl;
27640                 | ' 			for (;;) {
27640                 | LR__3965
27640     01 28 06 F1 | 	add	local06, #1
27644     18 22 06 F1 | 	add	local03, #24
27648     11 27 02 FB | 	rdlong	local05, local03
2764c     18 22 86 F1 | 	sub	local03, #24
27650     13 29 12 F2 | 	cmp	local06, local05 wc
27654     02 28 06 36 |  if_ae	mov	local06, #2
27658     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
2765c     00 FA 05 16 |  if_a	mov	result1, #0
27660     CC 00 90 1D |  if_a	jmp	#LR__3971
27664     14 15 02 F6 | 	mov	arg02, local06
27668     0F 13 02 F6 | 	mov	arg01, local01
2766c     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
27670     FD 2A 0A F6 | 	mov	local07, result1 wz
27674     24 00 90 AD |  if_e	jmp	#LR__3966
27678     01 2A 0E F2 | 	cmp	local07, #1 wz
2767c     FF FF 7F 5F 
27680     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
27684     15 FB 01 A6 |  if_e	mov	result1, local07
27688     A4 00 90 AD |  if_e	jmp	#LR__3971
2768c     12 29 0A F2 | 	cmp	local06, local04 wz
27690     00 FA 05 A6 |  if_e	mov	result1, #0
27694     98 00 90 AD |  if_e	jmp	#LR__3971
27698     A4 FF 9F FD | 	jmp	#LR__3965
2769c                 | LR__3966
2769c                 | LR__3967
2769c     11 13 02 F6 | 	mov	arg01, local03
276a0     14 15 02 F6 | 	mov	arg02, local06
276a4     01 16 66 F6 | 	neg	arg03, #1
276a8     48 FB BF FD | 	call	#_fatfs_cc_put_fat
276ac     FD 2C 0A F6 | 	mov	local08, result1 wz
276b0     1C 00 90 5D |  if_ne	jmp	#LR__3968
276b4     00 20 0E F2 | 	cmp	local02, #0 wz
276b8     14 00 90 AD |  if_e	jmp	#LR__3968
276bc     11 13 02 F6 | 	mov	arg01, local03
276c0     10 15 02 F6 | 	mov	arg02, local02
276c4     14 17 02 F6 | 	mov	arg03, local06
276c8     28 FB BF FD | 	call	#_fatfs_cc_put_fat
276cc     FD 2C 02 F6 | 	mov	local08, result1
276d0                 | LR__3968
276d0     00 2C 0E F2 | 	cmp	local08, #0 wz
276d4     4C 00 90 5D |  if_ne	jmp	#LR__3969
276d8     10 22 06 F1 | 	add	local03, #16
276dc     11 29 62 FC | 	wrlong	local06, local03
276e0     08 22 06 F1 | 	add	local03, #8
276e4     11 27 02 FB | 	rdlong	local05, local03
276e8     02 26 86 F1 | 	sub	local05, #2
276ec     04 22 86 F1 | 	sub	local03, #4
276f0     11 2F 02 FB | 	rdlong	local09, local03
276f4     14 22 86 F1 | 	sub	local03, #20
276f8     13 2F 1A F2 | 	cmp	local09, local05 wcz
276fc     14 22 06 E1 |  if_be	add	local03, #20
27700     11 2F 02 EB |  if_be	rdlong	local09, local03
27704     01 2E 86 E1 |  if_be	sub	local09, #1
27708     11 2F 62 EC |  if_be	wrlong	local09, local03
2770c     14 22 86 E1 |  if_be	sub	local03, #20
27710     04 22 06 F1 | 	add	local03, #4
27714     11 27 C2 FA | 	rdbyte	local05, local03
27718     01 26 46 F5 | 	or	local05, #1
2771c     11 27 42 FC | 	wrbyte	local05, local03
27720     08 00 90 FD | 	jmp	#LR__3970
27724                 | LR__3969
27724     01 2C 0E F2 | 	cmp	local08, #1 wz
27728     01 28 C6 F6 | 	negz	local06, #1
2772c                 | LR__3970
2772c                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
2772c                 | ' 	}
2772c                 | ' 
2772c                 | ' 	return ncl;
2772c     14 FB 01 F6 | 	mov	result1, local06
27730                 | LR__3971
27730     A7 F0 03 F6 | 	mov	ptra, fp
27734     B2 00 A0 FD | 	call	#popregs_
27738                 | _fatfs_cc_create_chain_ret
27738     2D 00 64 FD | 	ret
2773c                 | 
2773c                 | _fatfs_cc_dir_clear
2773c     06 4A 05 F6 | 	mov	COUNT_, #6
27740     A8 00 A0 FD | 	call	#pushregs_
27744     09 1F 02 F6 | 	mov	local01, arg01
27748     0A 21 02 F6 | 	mov	local02, arg02
2774c     0F 13 02 F6 | 	mov	arg01, local01
27750     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
27754     00 FA 0D F2 | 	cmp	result1, #0 wz
27758     01 FA 05 56 |  if_ne	mov	result1, #1
2775c     90 00 90 5D |  if_ne	jmp	#LR__3982
27760     0F 13 02 F6 | 	mov	arg01, local01
27764     10 15 02 F6 | 	mov	arg02, local02
27768     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
2776c     FD 22 02 F6 | 	mov	local03, result1
27770     30 1E 06 F1 | 	add	local01, #48
27774     0F 23 62 FC | 	wrlong	local03, local01
27778     04 1E 06 F1 | 	add	local01, #4
2777c     0F 13 02 F6 | 	mov	arg01, local01
27780     00 14 06 F6 | 	mov	arg02, #0
27784     09 16 C6 F9 | 	decod	arg03, #9
27788     98 00 A0 FD | 	call	#\builtin_bytefill_
2778c     0F 25 02 F6 | 	mov	local04, local01
27790                 | ' #line 1667 "ff.c"
27790                 | ' 	{
27790                 | ' 		ibuf = fs->win; szb = 1;
27790                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
27790     00 26 06 F6 | 	mov	local05, #0
27794     34 1E 86 F1 | 	sub	local01, #52
27798                 | LR__3980
27798     0A 1E 06 F1 | 	add	local01, #10
2779c     0F 29 E2 FA | 	rdword	local06, local01
277a0     0A 1E 86 F1 | 	sub	local01, #10
277a4     14 27 12 F2 | 	cmp	local05, local06 wc
277a8     2C 00 90 3D |  if_ae	jmp	#LR__3981
277ac     01 1E 06 F1 | 	add	local01, #1
277b0     0F 13 C2 FA | 	rdbyte	arg01, local01
277b4     01 1E 86 F1 | 	sub	local01, #1
277b8     12 15 02 F6 | 	mov	arg02, local04
277bc     11 17 02 F6 | 	mov	arg03, local03
277c0     13 17 02 F1 | 	add	arg03, local05
277c4     01 18 06 F6 | 	mov	arg04, #1
277c8     9C EF BF FD | 	call	#_fatfs_cc_disk_write
277cc     00 FA 0D F2 | 	cmp	result1, #0 wz
277d0     01 26 06 A1 |  if_e	add	local05, #1
277d4     C0 FF 9F AD |  if_e	jmp	#LR__3980
277d8                 | LR__3981
277d8                 | ' 	}
277d8                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
277d8     0A 1E 06 F1 | 	add	local01, #10
277dc     0F 25 E2 FA | 	rdword	local04, local01
277e0     12 27 0A F2 | 	cmp	local05, local04 wz
277e4     00 28 06 A6 |  if_e	mov	local06, #0
277e8     01 28 06 56 |  if_ne	mov	local06, #1
277ec     14 FB 01 F6 | 	mov	result1, local06
277f0                 | LR__3982
277f0     A7 F0 03 F6 | 	mov	ptra, fp
277f4     B2 00 A0 FD | 	call	#popregs_
277f8                 | _fatfs_cc_dir_clear_ret
277f8     2D 00 64 FD | 	ret
277fc                 | 
277fc                 | _fatfs_cc_dir_sdi
277fc     06 4A 05 F6 | 	mov	COUNT_, #6
27800     A8 00 A0 FD | 	call	#pushregs_
27804     09 1F 02 F6 | 	mov	local01, arg01
27808     0A 21 02 F6 | 	mov	local02, arg02
2780c     0F 23 02 FB | 	rdlong	local03, local01
27810     00 10 00 FF 
27814     00 20 16 F2 | 	cmp	local02, ##2097152 wc
27818     1F 20 CE C7 |  if_b	test	local02, #31 wz
2781c                 | ' 		return FR_INT_ERR;
2781c     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
27820     34 01 90 7D |  if_nc_or_nz	jmp	#LR__3996
27824     10 1E 06 F1 | 	add	local01, #16
27828     0F 21 62 FC | 	wrlong	local02, local01
2782c     08 1E 86 F1 | 	sub	local01, #8
27830     0F 25 0A FB | 	rdlong	local04, local01 wz
27834     08 1E 86 F1 | 	sub	local01, #8
27838     11 27 C2 AA |  if_e	rdbyte	local05, local03
2783c     03 26 16 A2 |  if_e	cmp	local05, #3 wc
27840     28 22 06 21 |  if_nc_and_z	add	local03, #40
27844     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
27848     28 22 86 21 |  if_nc_and_z	sub	local03, #40
2784c     00 24 0E F2 | 	cmp	local04, #0 wz
27850     3C 00 90 5D |  if_ne	jmp	#LR__3990
27854     10 27 02 F6 | 	mov	local05, local02
27858     05 26 46 F0 | 	shr	local05, #5
2785c     08 22 06 F1 | 	add	local03, #8
27860     11 15 E2 FA | 	rdword	arg02, local03
27864     08 22 86 F1 | 	sub	local03, #8
27868     0A 27 12 F2 | 	cmp	local05, arg02 wc
2786c     02 FA 05 36 |  if_ae	mov	result1, #2
27870     E4 00 90 3D |  if_ae	jmp	#LR__3996
27874     28 22 06 F1 | 	add	local03, #40
27878     11 27 02 FB | 	rdlong	local05, local03
2787c     28 22 86 F1 | 	sub	local03, #40
27880     18 1E 06 F1 | 	add	local01, #24
27884     0F 27 62 FC | 	wrlong	local05, local01
27888     18 1E 86 F1 | 	sub	local01, #24
2788c     7C 00 90 FD | 	jmp	#LR__3995
27890                 | LR__3990
27890     0A 22 06 F1 | 	add	local03, #10
27894     11 29 E2 FA | 	rdword	local06, local03
27898     0A 22 86 F1 | 	sub	local03, #10
2789c     09 28 66 F0 | 	shl	local06, #9
278a0                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
278a0                 | ' 		while (ofs >= csz) {
278a0                 | LR__3991
278a0     14 21 12 F2 | 	cmp	local02, local06 wc
278a4     4C 00 90 CD |  if_b	jmp	#LR__3994
278a8     0F 13 02 F6 | 	mov	arg01, local01
278ac     12 15 02 F6 | 	mov	arg02, local04
278b0     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
278b4     FD 24 02 F6 | 	mov	local04, result1
278b8     FF FF 7F FF 
278bc     FF 25 0E F2 | 	cmp	local04, ##-1 wz
278c0     01 FA 05 A6 |  if_e	mov	result1, #1
278c4     90 00 90 AD |  if_e	jmp	#LR__3996
278c8     02 24 16 F2 | 	cmp	local04, #2 wc
278cc     14 00 90 CD |  if_b	jmp	#LR__3992
278d0     18 22 06 F1 | 	add	local03, #24
278d4     11 27 02 FB | 	rdlong	local05, local03
278d8     18 22 86 F1 | 	sub	local03, #24
278dc     13 25 12 F2 | 	cmp	local04, local05 wc
278e0     08 00 90 CD |  if_b	jmp	#LR__3993
278e4                 | LR__3992
278e4     02 FA 05 F6 | 	mov	result1, #2
278e8     6C 00 90 FD | 	jmp	#LR__3996
278ec                 | LR__3993
278ec     14 21 82 F1 | 	sub	local02, local06
278f0     AC FF 9F FD | 	jmp	#LR__3991
278f4                 | LR__3994
278f4     11 13 02 F6 | 	mov	arg01, local03
278f8     12 15 02 F6 | 	mov	arg02, local04
278fc     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
27900     18 1E 06 F1 | 	add	local01, #24
27904     0F FB 61 FC | 	wrlong	result1, local01
27908     18 1E 86 F1 | 	sub	local01, #24
2790c                 | LR__3995
2790c     14 1E 06 F1 | 	add	local01, #20
27910     0F 25 62 FC | 	wrlong	local04, local01
27914     04 1E 06 F1 | 	add	local01, #4
27918     0F 27 0A FB | 	rdlong	local05, local01 wz
2791c     18 1E 86 F1 | 	sub	local01, #24
27920     02 FA 05 A6 |  if_e	mov	result1, #2
27924     30 00 90 AD |  if_e	jmp	#LR__3996
27928     10 29 02 F6 | 	mov	local06, local02
2792c     09 28 46 F0 | 	shr	local06, #9
27930     18 1E 06 F1 | 	add	local01, #24
27934     0F 27 02 FB | 	rdlong	local05, local01
27938     14 27 02 F1 | 	add	local05, local06
2793c     0F 27 62 FC | 	wrlong	local05, local01
27940     34 22 06 F1 | 	add	local03, #52
27944     FF 21 06 F5 | 	and	local02, #511
27948     10 23 02 F1 | 	add	local03, local02
2794c     04 1E 06 F1 | 	add	local01, #4
27950     0F 23 62 FC | 	wrlong	local03, local01
27954                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
27954                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
27954                 | ' 
27954                 | ' 	return FR_OK;
27954     00 FA 05 F6 | 	mov	result1, #0
27958                 | LR__3996
27958     A7 F0 03 F6 | 	mov	ptra, fp
2795c     B2 00 A0 FD | 	call	#popregs_
27960                 | _fatfs_cc_dir_sdi_ret
27960     2D 00 64 FD | 	ret
27964                 | 
27964                 | _fatfs_cc_dir_next
27964     05 4A 05 F6 | 	mov	COUNT_, #5
27968     A8 00 A0 FD | 	call	#pushregs_
2796c     09 1F 02 F6 | 	mov	local01, arg01
27970     0A 21 02 F6 | 	mov	local02, arg02
27974     0F 23 02 FB | 	rdlong	local03, local01
27978     10 1E 06 F1 | 	add	local01, #16
2797c     0F 25 02 FB | 	rdlong	local04, local01
27980     10 1E 86 F1 | 	sub	local01, #16
27984     20 24 06 F1 | 	add	local04, #32
27988     00 10 00 FF 
2798c     00 24 16 F2 | 	cmp	local04, ##2097152 wc
27990     18 1E 06 31 |  if_ae	add	local01, #24
27994     0F 01 68 3C |  if_ae	wrlong	#0, local01
27998     18 1E 86 31 |  if_ae	sub	local01, #24
2799c     18 1E 06 F1 | 	add	local01, #24
279a0     0F 15 0A FB | 	rdlong	arg02, local01 wz
279a4     18 1E 86 F1 | 	sub	local01, #24
279a8     04 FA 05 A6 |  if_e	mov	result1, #4
279ac     64 01 90 AD |  if_e	jmp	#LR__4005
279b0     FF 25 CE F7 | 	test	local04, #511 wz
279b4     3C 01 90 5D |  if_ne	jmp	#LR__4004
279b8     18 1E 06 F1 | 	add	local01, #24
279bc     0F 15 02 FB | 	rdlong	arg02, local01
279c0     01 14 06 F1 | 	add	arg02, #1
279c4     0F 15 62 FC | 	wrlong	arg02, local01
279c8     04 1E 86 F1 | 	sub	local01, #4
279cc     0F 15 0A FB | 	rdlong	arg02, local01 wz
279d0     14 1E 86 F1 | 	sub	local01, #20
279d4     2C 00 90 5D |  if_ne	jmp	#LR__4000
279d8     12 15 02 F6 | 	mov	arg02, local04
279dc     05 14 46 F0 | 	shr	arg02, #5
279e0     08 22 06 F1 | 	add	local03, #8
279e4     11 21 E2 FA | 	rdword	local02, local03
279e8     08 22 86 F1 | 	sub	local03, #8
279ec     10 15 12 F2 | 	cmp	arg02, local02 wc
279f0     18 1E 06 31 |  if_ae	add	local01, #24
279f4     0F 01 68 3C |  if_ae	wrlong	#0, local01
279f8                 | ' 				dp->sect = 0; return FR_NO_FILE;
279f8     04 FA 05 36 |  if_ae	mov	result1, #4
279fc     14 01 90 3D |  if_ae	jmp	#LR__4005
27a00     F0 00 90 FD | 	jmp	#LR__4003
27a04                 | LR__4000
27a04     12 13 02 F6 | 	mov	arg01, local04
27a08     09 12 46 F0 | 	shr	arg01, #9
27a0c     0A 22 06 F1 | 	add	local03, #10
27a10     11 15 E2 FA | 	rdword	arg02, local03
27a14     0A 22 86 F1 | 	sub	local03, #10
27a18     01 14 86 F1 | 	sub	arg02, #1
27a1c     0A 13 CA F7 | 	test	arg01, arg02 wz
27a20     D0 00 90 5D |  if_ne	jmp	#LR__4002
27a24     0F 13 02 F6 | 	mov	arg01, local01
27a28     14 1E 06 F1 | 	add	local01, #20
27a2c     0F 15 02 FB | 	rdlong	arg02, local01
27a30     14 1E 86 F1 | 	sub	local01, #20
27a34     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
27a38     FD 26 02 F6 | 	mov	local05, result1
27a3c     02 26 16 F2 | 	cmp	local05, #2 wc
27a40     02 FA 05 C6 |  if_b	mov	result1, #2
27a44     CC 00 90 CD |  if_b	jmp	#LR__4005
27a48     FF FF 7F FF 
27a4c     FF 27 0E F2 | 	cmp	local05, ##-1 wz
27a50     01 FA 05 A6 |  if_e	mov	result1, #1
27a54     BC 00 90 AD |  if_e	jmp	#LR__4005
27a58     18 22 06 F1 | 	add	local03, #24
27a5c     11 15 02 FB | 	rdlong	arg02, local03
27a60     18 22 86 F1 | 	sub	local03, #24
27a64     0A 27 12 F2 | 	cmp	local05, arg02 wc
27a68     68 00 90 CD |  if_b	jmp	#LR__4001
27a6c     00 20 0E F2 | 	cmp	local02, #0 wz
27a70     18 1E 06 A1 |  if_e	add	local01, #24
27a74     0F 01 68 AC |  if_e	wrlong	#0, local01
27a78                 | ' 						dp->sect = 0; return FR_NO_FILE;
27a78     04 FA 05 A6 |  if_e	mov	result1, #4
27a7c     94 00 90 AD |  if_e	jmp	#LR__4005
27a80     0F 13 02 F6 | 	mov	arg01, local01
27a84     14 1E 06 F1 | 	add	local01, #20
27a88     0F 15 02 FB | 	rdlong	arg02, local01
27a8c     14 1E 86 F1 | 	sub	local01, #20
27a90     84 FA BF FD | 	call	#_fatfs_cc_create_chain
27a94     FD 26 0A F6 | 	mov	local05, result1 wz
27a98     07 FA 05 A6 |  if_e	mov	result1, #7
27a9c     74 00 90 AD |  if_e	jmp	#LR__4005
27aa0     01 26 0E F2 | 	cmp	local05, #1 wz
27aa4     02 FA 05 A6 |  if_e	mov	result1, #2
27aa8     68 00 90 AD |  if_e	jmp	#LR__4005
27aac     FF FF 7F FF 
27ab0     FF 27 0E F2 | 	cmp	local05, ##-1 wz
27ab4     01 FA 05 A6 |  if_e	mov	result1, #1
27ab8     58 00 90 AD |  if_e	jmp	#LR__4005
27abc     13 15 02 F6 | 	mov	arg02, local05
27ac0     11 13 02 F6 | 	mov	arg01, local03
27ac4     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
27ac8     00 FA 0D F2 | 	cmp	result1, #0 wz
27acc     01 FA 05 56 |  if_ne	mov	result1, #1
27ad0     40 00 90 5D |  if_ne	jmp	#LR__4005
27ad4                 | LR__4001
27ad4     14 1E 06 F1 | 	add	local01, #20
27ad8     0F 27 62 FC | 	wrlong	local05, local01
27adc     11 13 02 F6 | 	mov	arg01, local03
27ae0     13 15 02 F6 | 	mov	arg02, local05
27ae4     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
27ae8     04 1E 06 F1 | 	add	local01, #4
27aec     0F FB 61 FC | 	wrlong	result1, local01
27af0     18 1E 86 F1 | 	sub	local01, #24
27af4                 | LR__4002
27af4                 | LR__4003
27af4                 | LR__4004
27af4     10 1E 06 F1 | 	add	local01, #16
27af8     0F 25 62 FC | 	wrlong	local04, local01
27afc     34 22 06 F1 | 	add	local03, #52
27b00     FF 25 06 F5 | 	and	local04, #511
27b04     12 23 02 F1 | 	add	local03, local04
27b08     0C 1E 06 F1 | 	add	local01, #12
27b0c     0F 23 62 FC | 	wrlong	local03, local01
27b10                 | ' #line 1771 "ff.c"
27b10                 | ' 				}
27b10                 | ' 				dp->clust = clst;
27b10                 | ' 				dp->sect = clst2sect(fs, clst);
27b10                 | ' 			}
27b10                 | ' 		}
27b10                 | ' 	}
27b10                 | ' 	dp->dptr = ofs;
27b10                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
27b10                 | ' 
27b10                 | ' 	return FR_OK;
27b10     00 FA 05 F6 | 	mov	result1, #0
27b14                 | LR__4005
27b14     A7 F0 03 F6 | 	mov	ptra, fp
27b18     B2 00 A0 FD | 	call	#popregs_
27b1c                 | _fatfs_cc_dir_next_ret
27b1c     2D 00 64 FD | 	ret
27b20                 | 
27b20                 | _fatfs_cc_dir_alloc
27b20     08 4A 05 F6 | 	mov	COUNT_, #8
27b24     A8 00 A0 FD | 	call	#pushregs_
27b28     09 1F 02 F6 | 	mov	local01, arg01
27b2c     0A 21 02 F6 | 	mov	local02, arg02
27b30     0F 23 02 FB | 	rdlong	local03, local01
27b34     0F 13 02 F6 | 	mov	arg01, local01
27b38     00 14 06 F6 | 	mov	arg02, #0
27b3c     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
27b40     FD 24 0A F6 | 	mov	local04, result1 wz
27b44     70 00 90 5D |  if_ne	jmp	#LR__4014
27b48     00 26 06 F6 | 	mov	local05, #0
27b4c                 | ' 		n = 0;
27b4c                 | ' 		do {
27b4c                 | LR__4010
27b4c     18 1E 06 F1 | 	add	local01, #24
27b50     0F 15 02 FB | 	rdlong	arg02, local01
27b54     18 1E 86 F1 | 	sub	local01, #24
27b58     11 13 02 F6 | 	mov	arg01, local03
27b5c     38 F3 BF FD | 	call	#_fatfs_cc_move_window
27b60     FD 24 0A F6 | 	mov	local04, result1 wz
27b64     50 00 90 5D |  if_ne	jmp	#LR__4013
27b68     1C 1E 06 F1 | 	add	local01, #28
27b6c     0F 29 02 FB | 	rdlong	local06, local01
27b70     1C 1E 86 F1 | 	sub	local01, #28
27b74     14 29 C2 FA | 	rdbyte	local06, local06
27b78     E5 28 0E F2 | 	cmp	local06, #229 wz
27b7c     1C 1E 06 51 |  if_ne	add	local01, #28
27b80     0F 2B 02 5B |  if_ne	rdlong	local07, local01
27b84     1C 1E 86 51 |  if_ne	sub	local01, #28
27b88     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
27b8c     10 00 90 5D |  if_ne	jmp	#LR__4011
27b90     01 26 06 F1 | 	add	local05, #1
27b94     10 27 0A F2 | 	cmp	local05, local02 wz
27b98     1C 00 90 AD |  if_e	jmp	#LR__4013
27b9c     04 00 90 FD | 	jmp	#LR__4012
27ba0                 | LR__4011
27ba0     00 26 06 F6 | 	mov	local05, #0
27ba4                 | LR__4012
27ba4     0F 13 02 F6 | 	mov	arg01, local01
27ba8     01 14 06 F6 | 	mov	arg02, #1
27bac     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
27bb0     FD 24 0A F6 | 	mov	local04, result1 wz
27bb4     94 FF 9F AD |  if_e	jmp	#LR__4010
27bb8                 | LR__4013
27bb8                 | LR__4014
27bb8     04 24 0E F2 | 	cmp	local04, #4 wz
27bbc     07 24 06 A6 |  if_e	mov	local04, #7
27bc0                 | ' 	return res;
27bc0     12 FB 01 F6 | 	mov	result1, local04
27bc4     A7 F0 03 F6 | 	mov	ptra, fp
27bc8     B2 00 A0 FD | 	call	#popregs_
27bcc                 | _fatfs_cc_dir_alloc_ret
27bcc     2D 00 64 FD | 	ret
27bd0                 | 
27bd0                 | _fatfs_cc_ld_clust
27bd0     09 01 02 F6 | 	mov	_var01, arg01
27bd4     0A 13 02 F6 | 	mov	arg01, arg02
27bd8     1A 12 06 F1 | 	add	arg01, #26
27bdc                 | ' {
27bdc                 | ' 
27bdc                 | ' 	return *((WORD*)ptr);
27bdc     09 FB E1 FA | 	rdword	result1, arg01
27be0     FD 12 32 F9 | 	getword	arg01, result1, #0
27be4     00 01 C2 FA | 	rdbyte	_var01, _var01
27be8     03 00 0E F2 | 	cmp	_var01, #3 wz
27bec     14 14 06 A1 |  if_e	add	arg02, #20
27bf0                 | ' {
27bf0                 | ' 
27bf0                 | ' 	return *((WORD*)ptr);
27bf0     0A FB E1 AA |  if_e	rdword	result1, arg02
27bf4     10 FA 65 A0 |  if_e	shl	result1, #16
27bf8     FD 12 42 A5 |  if_e	or	arg01, result1
27bfc                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
27bfc                 | ' 	}
27bfc                 | ' 
27bfc                 | ' 	return cl;
27bfc     09 FB 01 F6 | 	mov	result1, arg01
27c00                 | _fatfs_cc_ld_clust_ret
27c00     2D 00 64 FD | 	ret
27c04                 | 
27c04                 | _fatfs_cc_st_clust
27c04     09 01 02 F6 | 	mov	_var01, arg01
27c08     0A 13 02 F6 | 	mov	arg01, arg02
27c0c     1A 12 06 F1 | 	add	arg01, #26
27c10     09 17 52 FC | 	wrword	arg03, arg01
27c14     00 01 C2 FA | 	rdbyte	_var01, _var01
27c18     03 00 0E F2 | 	cmp	_var01, #3 wz
27c1c     14 14 06 A1 |  if_e	add	arg02, #20
27c20     10 16 46 A0 |  if_e	shr	arg03, #16
27c24     0A 17 52 AC |  if_e	wrword	arg03, arg02
27c28                 | _fatfs_cc_st_clust_ret
27c28     2D 00 64 FD | 	ret
27c2c                 | 
27c2c                 | _fatfs_cc_cmp_lfn
27c2c     07 4A 05 F6 | 	mov	COUNT_, #7
27c30     A8 00 A0 FD | 	call	#pushregs_
27c34     09 1F 02 F6 | 	mov	local01, arg01
27c38     0A 13 02 F6 | 	mov	arg01, arg02
27c3c     1A 12 06 F1 | 	add	arg01, #26
27c40                 | ' {
27c40                 | ' 
27c40                 | ' 	return *((WORD*)ptr);
27c40     09 FB E9 FA | 	rdword	result1, arg01 wz
27c44     00 FA 05 56 |  if_ne	mov	result1, #0
27c48     E0 00 90 5D |  if_ne	jmp	#LR__4026
27c4c     0A 21 C2 FA | 	rdbyte	local02, arg02
27c50     3F 20 06 F5 | 	and	local02, #63
27c54     01 20 86 F1 | 	sub	local02, #1
27c58     0D 20 06 FD | 	qmul	local02, #13
27c5c                 | ' 
27c5c                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
27c5c                 | ' 
27c5c                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
27c5c     01 22 06 F6 | 	mov	local03, #1
27c60     00 24 06 F6 | 	mov	local04, #0
27c64     18 26 62 FD | 	getqx	local05
27c68                 | LR__4020
27c68     0D 24 16 F2 | 	cmp	local04, #13 wc
27c6c     9C 00 90 3D |  if_ae	jmp	#LR__4025
27c70     0A 13 02 F6 | 	mov	arg01, arg02
27c74     12 21 02 F6 | 	mov	local02, local04
27c78     01 00 00 FF 
27c7c     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
27c80     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
27c84     10 21 C2 FA | 	rdbyte	local02, local02
27c88     01 20 06 FA | 	mul	local02, #1
27c8c     10 13 02 F1 | 	add	arg01, local02
27c90     01 00 00 FF 
27c94     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
27c98                 | ' {
27c98                 | ' 
27c98                 | ' 	return *((WORD*)ptr);
27c98     09 FB E1 FA | 	rdword	result1, arg01
27c9c     FD 28 02 F6 | 	mov	local06, result1
27ca0     11 21 02 F6 | 	mov	local02, local03
27ca4     0F 20 4E F7 | 	zerox	local02, #15 wz
27ca8     44 00 90 AD |  if_e	jmp	#LR__4023
27cac     00 27 16 F2 | 	cmp	local05, #256 wc
27cb0     2C 00 90 3D |  if_ae	jmp	#LR__4021
27cb4     14 13 32 F9 | 	getword	arg01, local06, #0
27cb8     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
27cbc     FD 20 02 F6 | 	mov	local02, result1
27cc0     13 23 02 F6 | 	mov	local03, local05
27cc4     01 22 66 F0 | 	shl	local03, #1
27cc8     0F 23 02 F1 | 	add	local03, local01
27ccc     11 13 E2 FA | 	rdword	arg01, local03
27cd0     01 26 06 F1 | 	add	local05, #1
27cd4     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
27cd8     FD 20 0A F2 | 	cmp	local02, result1 wz
27cdc     08 00 90 AD |  if_e	jmp	#LR__4022
27ce0                 | LR__4021
27ce0                 | ' 				return 0;
27ce0     00 FA 05 F6 | 	mov	result1, #0
27ce4     44 00 90 FD | 	jmp	#LR__4026
27ce8                 | LR__4022
27ce8     14 23 02 F6 | 	mov	local03, local06
27cec     14 00 90 FD | 	jmp	#LR__4024
27cf0                 | LR__4023
27cf0     14 29 32 F9 | 	getword	local06, local06, #0
27cf4     7F 00 00 FF 
27cf8     FF 29 0E F2 | 	cmp	local06, ##65535 wz
27cfc     00 FA 05 56 |  if_ne	mov	result1, #0
27d00     28 00 90 5D |  if_ne	jmp	#LR__4026
27d04                 | LR__4024
27d04     01 24 06 F1 | 	add	local04, #1
27d08     5C FF 9F FD | 	jmp	#LR__4020
27d0c                 | LR__4025
27d0c     0A 21 C2 FA | 	rdbyte	local02, arg02
27d10     40 20 CE F7 | 	test	local02, #64 wz
27d14     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
27d18     01 26 66 50 |  if_ne	shl	local05, #1
27d1c     0F 27 02 51 |  if_ne	add	local05, local01
27d20     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
27d24     00 FA 05 56 |  if_ne	mov	result1, #0
27d28                 | ' 
27d28                 | ' 	return 1;
27d28     01 FA 05 A6 |  if_e	mov	result1, #1
27d2c                 | LR__4026
27d2c     A7 F0 03 F6 | 	mov	ptra, fp
27d30     B2 00 A0 FD | 	call	#popregs_
27d34                 | _fatfs_cc_cmp_lfn_ret
27d34     2D 00 64 FD | 	ret
27d38                 | 
27d38                 | _fatfs_cc_pick_lfn
27d38     09 01 02 F6 | 	mov	_var01, arg01
27d3c     0A 13 02 F6 | 	mov	arg01, arg02
27d40     1A 12 06 F1 | 	add	arg01, #26
27d44                 | ' {
27d44                 | ' 
27d44                 | ' 	return *((WORD*)ptr);
27d44     09 FB E9 FA | 	rdword	result1, arg01 wz
27d48     00 FA 05 56 |  if_ne	mov	result1, #0
27d4c     D4 00 90 5D |  if_ne	jmp	#LR__4035
27d50     0A 03 C2 FA | 	rdbyte	_var02, arg02
27d54     40 02 26 F5 | 	andn	_var02, #64
27d58     01 02 86 F1 | 	sub	_var02, #1
27d5c     0D 02 06 FD | 	qmul	_var02, #13
27d60                 | ' 
27d60                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
27d60                 | ' 
27d60                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
27d60     01 04 06 F6 | 	mov	_var03, #1
27d64     00 06 06 F6 | 	mov	_var04, #0
27d68     18 08 62 FD | 	getqx	_var05
27d6c                 | LR__4030
27d6c     0D 06 16 F2 | 	cmp	_var04, #13 wc
27d70     80 00 90 3D |  if_ae	jmp	#LR__4033
27d74     0A 13 02 F6 | 	mov	arg01, arg02
27d78     03 03 02 F6 | 	mov	_var02, _var04
27d7c     01 00 00 FF 
27d80     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
27d84     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
27d88     01 03 C2 FA | 	rdbyte	_var02, _var02
27d8c     01 02 06 FA | 	mul	_var02, #1
27d90     01 13 02 F1 | 	add	arg01, _var02
27d94     01 00 00 FF 
27d98     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
27d9c                 | ' {
27d9c                 | ' 
27d9c                 | ' 	return *((WORD*)ptr);
27d9c     09 FB E1 FA | 	rdword	result1, arg01
27da0     FD 0A 02 F6 | 	mov	_var06, result1
27da4     02 03 02 F6 | 	mov	_var02, _var03
27da8     0F 02 4E F7 | 	zerox	_var02, #15 wz
27dac     28 00 90 AD |  if_e	jmp	#LR__4031
27db0     00 09 16 F2 | 	cmp	_var05, #256 wc
27db4     00 FA 05 36 |  if_ae	mov	result1, #0
27db8     68 00 90 3D |  if_ae	jmp	#LR__4035
27dbc     04 03 02 F6 | 	mov	_var02, _var05
27dc0     01 02 66 F0 | 	shl	_var02, #1
27dc4     00 03 02 F1 | 	add	_var02, _var01
27dc8     05 05 02 F6 | 	mov	_var03, _var06
27dcc     01 05 52 FC | 	wrword	_var03, _var02
27dd0     01 08 06 F1 | 	add	_var05, #1
27dd4     14 00 90 FD | 	jmp	#LR__4032
27dd8                 | LR__4031
27dd8     05 0B 32 F9 | 	getword	_var06, _var06, #0
27ddc     7F 00 00 FF 
27de0     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
27de4     00 FA 05 56 |  if_ne	mov	result1, #0
27de8     38 00 90 5D |  if_ne	jmp	#LR__4035
27dec                 | LR__4032
27dec     01 06 06 F1 | 	add	_var04, #1
27df0     78 FF 9F FD | 	jmp	#LR__4030
27df4                 | LR__4033
27df4     0A 03 C2 FA | 	rdbyte	_var02, arg02
27df8     40 02 CE F7 | 	test	_var02, #64 wz
27dfc     02 0D 02 56 |  if_ne	mov	_var07, _var03
27e00     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
27e04     18 00 90 AD |  if_e	jmp	#LR__4034
27e08     00 09 16 F2 | 	cmp	_var05, #256 wc
27e0c     00 FA 05 36 |  if_ae	mov	result1, #0
27e10     10 00 90 3D |  if_ae	jmp	#LR__4035
27e14     01 08 66 F0 | 	shl	_var05, #1
27e18     00 09 02 F1 | 	add	_var05, _var01
27e1c     04 01 58 FC | 	wrword	#0, _var05
27e20                 | LR__4034
27e20                 | ' 		lfnbuf[i] = 0;
27e20                 | ' 	}
27e20                 | ' 
27e20                 | ' 	return 1;
27e20     01 FA 05 F6 | 	mov	result1, #1
27e24                 | LR__4035
27e24                 | _fatfs_cc_pick_lfn_ret
27e24     2D 00 64 FD | 	ret
27e28                 | 
27e28                 | _fatfs_cc_put_lfn
27e28     0D 14 06 F1 | 	add	arg02, #13
27e2c     0A 19 42 FC | 	wrbyte	arg04, arg02
27e30     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
27e34     01 18 86 F1 | 	sub	arg04, #1
27e38     0D 18 06 FD | 	qmul	arg04, #13
27e3c     09 01 02 F6 | 	mov	_var01, arg01
27e40     02 14 86 F1 | 	sub	arg02, #2
27e44     0A 1F 48 FC | 	wrbyte	#15, arg02
27e48     01 14 06 F1 | 	add	arg02, #1
27e4c     0A 01 48 FC | 	wrbyte	#0, arg02
27e50     0C 14 86 F1 | 	sub	arg02, #12
27e54     0A 13 02 F6 | 	mov	arg01, arg02
27e58     1A 12 06 F1 | 	add	arg01, #26
27e5c     09 01 58 FC | 	wrword	#0, arg01
27e60     00 02 06 F6 | 	mov	_var02, #0
27e64     00 04 06 F6 | 	mov	_var03, #0
27e68                 | ' 	BYTE* dir,
27e68                 | ' 	BYTE ord,
27e68                 | ' 	BYTE sum
27e68                 | ' )
27e68                 | ' {
27e68                 | ' 	UINT i, s;
27e68                 | ' 	WCHAR wc;
27e68                 | ' 
27e68                 | ' 
27e68                 | ' 	dir[ 13 ] = sum;
27e68                 | ' 	dir[ 11 ] =  0x0F ;
27e68                 | ' 	dir[ 12 ] = 0;
27e68                 | ' 	st_word(dir +  26 , 0);
27e68                 | ' 
27e68                 | ' 	i = (ord - 1) * 13;
27e68                 | ' 	s = wc = 0;
27e68                 | ' 	do {
27e68     01 00 00 FF 
27e6c     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
27e70     18 06 62 FD | 	getqx	_var04
27e74     97 2A 48 FB | 	callpa	#(@LR__4041-@LR__4040)>>2,fcache_load_ptr_
27e78                 | LR__4040
27e78     01 19 32 F9 | 	getword	arg04, _var02, #0
27e7c     7F 00 00 FF 
27e80     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
27e84     03 13 02 56 |  if_ne	mov	arg01, _var04
27e88     01 06 06 51 |  if_ne	add	_var04, #1
27e8c     01 12 66 50 |  if_ne	shl	arg01, #1
27e90     00 13 02 51 |  if_ne	add	arg01, _var01
27e94     09 03 E2 5A |  if_ne	rdword	_var02, arg01
27e98     0A 13 02 F6 | 	mov	arg01, arg02
27e9c     02 19 02 F6 | 	mov	arg04, _var03
27ea0     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
27ea4     0C 19 C2 FA | 	rdbyte	arg04, arg04
27ea8     01 18 06 FA | 	mul	arg04, #1
27eac     0C 13 02 F1 | 	add	arg01, arg04
27eb0     09 03 52 FC | 	wrword	_var02, arg01
27eb4     01 19 02 F6 | 	mov	arg04, _var02
27eb8     0F 18 4E F7 | 	zerox	arg04, #15 wz
27ebc     0F 02 CE A9 |  if_e	bmask	_var02, #15
27ec0     01 04 06 F1 | 	add	_var03, #1
27ec4     0D 04 16 F2 | 	cmp	_var03, #13 wc
27ec8     AC FF 9F CD |  if_b	jmp	#LR__4040
27ecc                 | LR__4041
27ecc     01 00 00 FF 
27ed0     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
27ed4     01 03 32 F9 | 	getword	_var02, _var02, #0
27ed8     7F 00 00 FF 
27edc     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
27ee0     01 06 66 50 |  if_ne	shl	_var04, #1
27ee4     00 07 02 51 |  if_ne	add	_var04, _var01
27ee8     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
27eec     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
27ef0     40 16 46 A5 |  if_e	or	arg03, #64
27ef4     0A 17 42 FC | 	wrbyte	arg03, arg02
27ef8                 | _fatfs_cc_put_lfn_ret
27ef8     2D 00 64 FD | 	ret
27efc                 | 
27efc                 | _fatfs_cc_gen_numname
27efc     08 4A 05 F6 | 	mov	COUNT_, #8
27f00     A8 00 A0 FD | 	call	#pushregs_
27f04     2C F0 07 F1 | 	add	ptra, #44
27f08     09 1F 02 F6 | 	mov	local01, arg01
27f0c     0A 21 02 F6 | 	mov	local02, arg02
27f10     0B 23 02 F6 | 	mov	local03, arg03
27f14     0C 25 02 F6 | 	mov	local04, arg04
27f18     0F 13 02 F6 | 	mov	arg01, local01
27f1c     10 15 02 F6 | 	mov	arg02, local02
27f20     0B 16 06 F6 | 	mov	arg03, #11
27f24     F4 77 BF FD | 	call	#__system____builtin_memmove
27f28     06 24 16 F2 | 	cmp	local04, #6 wc
27f2c     48 00 90 CD |  if_b	jmp	#LR__4055
27f30     12 27 02 F6 | 	mov	local05, local04
27f34     97 1E 48 FB | 	callpa	#(@LR__4053-@LR__4050)>>2,fcache_load_ptr_
27f38                 | ' 		sreg = seq;
27f38                 | ' 		while (*lfn) {
27f38                 | LR__4050
27f38     11 29 EA FA | 	rdword	local06, local03 wz
27f3c     34 00 90 AD |  if_e	jmp	#LR__4054
27f40     11 2B E2 FA | 	rdword	local07, local03
27f44                 | ' 			wc = *lfn++;
27f44                 | ' 			for (i = 0; i < 16; i++) {
27f44     02 22 06 F1 | 	add	local03, #2
27f48     10 12 DC FC | 	rep	@LR__4052, #16
27f4c                 | LR__4051
27f4c     01 26 66 F0 | 	shl	local05, #1
27f50     15 29 32 F9 | 	getword	local06, local07, #0
27f54     01 28 06 F5 | 	and	local06, #1
27f58     14 27 02 F1 | 	add	local05, local06
27f5c     15 2B 32 F9 | 	getword	local07, local07, #0
27f60     01 2A 46 F0 | 	shr	local07, #1
27f64     10 26 2E F4 | 	testbn	local05, #16 wz
27f68     88 00 00 5F 
27f6c     21 26 66 55 |  if_ne	xor	local05, ##69665
27f70                 | LR__4052
27f70     C4 FF 9F FD | 	jmp	#LR__4050
27f74                 | LR__4053
27f74                 | LR__4054
27f74     13 25 02 F6 | 	mov	local04, local05
27f78                 | LR__4055
27f78     07 2A 06 F6 | 	mov	local07, #7
27f7c                 | ' 			}
27f7c                 | ' 		}
27f7c                 | ' 		seq = (UINT)sreg;
27f7c                 | ' 	}
27f7c                 | ' 
27f7c                 | ' 
27f7c                 | ' 	i = 7;
27f7c                 | ' 	do {
27f7c     10 4E 05 F1 | 	add	fp, #16
27f80     97 1A 48 FB | 	callpa	#(@LR__4057-@LR__4056)>>2,fcache_load_ptr_
27f84                 | LR__4056
27f84     12 27 42 F8 | 	getnib	local05, local04, #0
27f88     30 26 06 F1 | 	add	local05, #48
27f8c     04 24 46 F0 | 	shr	local04, #4
27f90     13 29 E2 F8 | 	getbyte	local06, local05, #0
27f94     3A 28 16 F2 | 	cmp	local06, #58 wc
27f98     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
27f9c     07 26 06 31 |  if_ae	add	local05, #7
27fa0     15 29 02 F6 | 	mov	local06, local07
27fa4     01 2A 8E F1 | 	sub	local07, #1 wz
27fa8     A7 28 02 F1 | 	add	local06, fp
27fac     14 27 42 FC | 	wrbyte	local05, local06
27fb0     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
27fb4     CC FF 9F 5D |  if_ne	jmp	#LR__4056
27fb8                 | LR__4057
27fb8     15 29 02 F6 | 	mov	local06, local07
27fbc     A7 28 02 F1 | 	add	local06, fp
27fc0     14 FD 48 FC | 	wrbyte	#126, local06
27fc4                 | ' 	ns[i] = '~';
27fc4                 | ' 
27fc4                 | ' 
27fc4                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
27fc4     00 26 06 F6 | 	mov	local05, #0
27fc8     10 4E 85 F1 | 	sub	fp, #16
27fcc     97 2A 48 FB | 	callpa	#(@LR__4060-@LR__4058)>>2,fcache_load_ptr_
27fd0                 | LR__4058
27fd0     15 27 12 F2 | 	cmp	local05, local07 wc
27fd4     4C 00 90 3D |  if_ae	jmp	#LR__4061
27fd8     13 29 02 F6 | 	mov	local06, local05
27fdc     0F 29 02 F1 | 	add	local06, local01
27fe0     14 29 C2 FA | 	rdbyte	local06, local06
27fe4     20 28 0E F2 | 	cmp	local06, #32 wz
27fe8     38 00 90 AD |  if_e	jmp	#LR__4061
27fec     13 13 02 F6 | 	mov	arg01, local05
27ff0     0F 13 02 F1 | 	add	arg01, local01
27ff4     09 13 CA FA | 	rdbyte	arg01, arg01 wz
27ff8     00 FA 05 56 |  if_ne	mov	result1, #0
27ffc                 | ' 
27ffc                 | ' 	return 0;
27ffc     00 FA 05 A6 |  if_e	mov	result1, #0
28000     00 FA 0D F2 | 	cmp	result1, #0 wz
28004     14 00 90 AD |  if_e	jmp	#LR__4059
28008     15 29 02 F6 | 	mov	local06, local07
2800c     01 28 86 F1 | 	sub	local06, #1
28010     14 27 0A F2 | 	cmp	local05, local06 wz
28014     0C 00 90 AD |  if_e	jmp	#LR__4061
28018     01 26 06 F1 | 	add	local05, #1
2801c                 | LR__4059
2801c     01 26 06 F1 | 	add	local05, #1
28020     AC FF 9F FD | 	jmp	#LR__4058
28024                 | LR__4060
28024                 | LR__4061
28024     97 20 48 FB | 	callpa	#(@LR__4065-@LR__4062)>>2,fcache_load_ptr_
28028                 | ' 			j++;
28028                 | ' 		}
28028                 | ' 	}
28028                 | ' 	do {
28028                 | LR__4062
28028     13 29 02 F6 | 	mov	local06, local05
2802c     0F 29 02 F1 | 	add	local06, local01
28030     08 2A 16 F2 | 	cmp	local07, #8 wc
28034     01 26 06 F1 | 	add	local05, #1
28038     1C 00 90 3D |  if_ae	jmp	#LR__4063
2803c     15 25 02 F6 | 	mov	local04, local07
28040     10 4E 05 F1 | 	add	fp, #16
28044     A7 24 02 F1 | 	add	local04, fp
28048     12 2D C2 FA | 	rdbyte	local08, local04
2804c     01 2A 06 F1 | 	add	local07, #1
28050     10 4E 85 F1 | 	sub	fp, #16
28054     04 00 90 FD | 	jmp	#LR__4064
28058                 | LR__4063
28058     20 2C 06 F6 | 	mov	local08, #32
2805c                 | LR__4064
2805c     14 2D 42 FC | 	wrbyte	local08, local06
28060     08 26 16 F2 | 	cmp	local05, #8 wc
28064     C0 FF 9F CD |  if_b	jmp	#LR__4062
28068                 | LR__4065
28068     A7 F0 03 F6 | 	mov	ptra, fp
2806c     B2 00 A0 FD | 	call	#popregs_
28070                 | _fatfs_cc_gen_numname_ret
28070     2D 00 64 FD | 	ret
28074                 | 
28074                 | _fatfs_cc_sum_sfn
28074     00 00 06 F6 | 	mov	_var01, #0
28078                 | ' )
28078                 | ' {
28078                 | ' 	BYTE sum = 0;
28078                 | ' 	UINT n = 11;
28078                 | ' 
28078                 | ' 	do {
28078     97 12 48 FB | 	callpa	#(@LR__4072-@LR__4070)>>2,fcache_load_ptr_
2807c                 | LR__4070
2807c     0B 10 DC FC | 	rep	@LR__4073, #11
28080                 | LR__4071
28080     00 FB E1 F8 | 	getbyte	result1, _var01, #0
28084     01 FA 45 F0 | 	shr	result1, #1
28088     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2808c     07 00 66 F0 | 	shl	_var01, #7
28090     00 FB 01 F1 | 	add	result1, _var01
28094     09 01 C2 FA | 	rdbyte	_var01, arg01
28098     FD 00 02 F1 | 	add	_var01, result1
2809c     01 12 06 F1 | 	add	arg01, #1
280a0                 | LR__4072
280a0                 | LR__4073
280a0                 | ' 	return sum;
280a0     00 FB 01 F6 | 	mov	result1, _var01
280a4                 | _fatfs_cc_sum_sfn_ret
280a4     2D 00 64 FD | 	ret
280a8                 | 
280a8                 | _fatfs_cc_dir_read
280a8     0C 4A 05 F6 | 	mov	COUNT_, #12
280ac     A8 00 A0 FD | 	call	#pushregs_
280b0     09 1F 02 F6 | 	mov	local01, arg01
280b4     0A 21 02 F6 | 	mov	local02, arg02
280b8     04 22 06 F6 | 	mov	local03, #4
280bc     0F 25 02 FB | 	rdlong	local04, local01
280c0     FF 26 06 F6 | 	mov	local05, #255
280c4     FF 28 06 F6 | 	mov	local06, #255
280c8                 | ' )
280c8                 | ' {
280c8                 | ' 	FRESULT res = FR_NO_FILE;
280c8                 | ' 	FATFS *fs = dp->obj.fs;
280c8                 | ' 	BYTE attr, b;
280c8                 | ' 
280c8                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
280c8                 | ' 
280c8                 | ' 
280c8                 | ' 	while (dp->sect) {
280c8                 | LR__4080
280c8     18 1E 06 F1 | 	add	local01, #24
280cc     0F FB 09 FB | 	rdlong	result1, local01 wz
280d0     18 1E 86 F1 | 	sub	local01, #24
280d4     AC 01 90 AD |  if_e	jmp	#LR__4090
280d8     18 1E 06 F1 | 	add	local01, #24
280dc     0F 15 02 FB | 	rdlong	arg02, local01
280e0     18 1E 86 F1 | 	sub	local01, #24
280e4     12 13 02 F6 | 	mov	arg01, local04
280e8     AC ED BF FD | 	call	#_fatfs_cc_move_window
280ec     FD 22 0A F6 | 	mov	local03, result1 wz
280f0     90 01 90 5D |  if_ne	jmp	#LR__4090
280f4     1C 1E 06 F1 | 	add	local01, #28
280f8     0F FB 01 FB | 	rdlong	result1, local01
280fc     1C 1E 86 F1 | 	sub	local01, #28
28100     FD 2A C2 FA | 	rdbyte	local07, result1
28104     15 FB 01 F6 | 	mov	result1, local07
28108     07 FA 4D F7 | 	zerox	result1, #7 wz
2810c     04 22 06 A6 |  if_e	mov	local03, #4
28110                 | ' 			res = FR_NO_FILE; break;
28110     70 01 90 AD |  if_e	jmp	#LR__4090
28114     1C 1E 06 F1 | 	add	local01, #28
28118     0F 2D 02 FB | 	rdlong	local08, local01
2811c     0B 2C 06 F1 | 	add	local08, #11
28120     16 2F C2 FA | 	rdbyte	local09, local08
28124     3F 2E 06 F5 | 	and	local09, #63
28128     16 1E 86 F1 | 	sub	local01, #22
2812c     0F 2F 42 FC | 	wrbyte	local09, local01
28130     06 1E 86 F1 | 	sub	local01, #6
28134     15 FB E1 F8 | 	getbyte	result1, local07, #0
28138     E5 FA 0D F2 | 	cmp	result1, #229 wz
2813c     15 2D 02 56 |  if_ne	mov	local08, local07
28140     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
28144     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
28148     1C 00 90 AD |  if_e	jmp	#LR__4081
2814c     00 30 06 F6 | 	mov	local10, #0
28150     17 2D E2 F8 | 	getbyte	local08, local09, #0
28154     20 2C 26 F5 | 	andn	local08, #32
28158     08 2C 0E F2 | 	cmp	local08, #8 wz
2815c     01 30 06 A6 |  if_e	mov	local10, #1
28160     10 31 0A F2 | 	cmp	local10, local02 wz
28164     08 00 90 AD |  if_e	jmp	#LR__4082
28168                 | LR__4081
28168     FF 26 06 F6 | 	mov	local05, #255
2816c     00 01 90 FD | 	jmp	#LR__4089
28170                 | LR__4082
28170     17 2F E2 F8 | 	getbyte	local09, local09, #0
28174     0F 2E 0E F2 | 	cmp	local09, #15 wz
28178     B4 00 90 5D |  if_ne	jmp	#LR__4086
2817c     15 33 E2 F8 | 	getbyte	local11, local07, #0
28180     40 32 CE F7 | 	test	local11, #64 wz
28184     30 00 90 AD |  if_e	jmp	#LR__4083
28188     1C 1E 06 F1 | 	add	local01, #28
2818c     0F 33 02 FB | 	rdlong	local11, local01
28190     0D 32 06 F1 | 	add	local11, #13
28194     19 29 C2 FA | 	rdbyte	local06, local11
28198     15 2B E2 F8 | 	getbyte	local07, local07, #0
2819c     BF 2A 06 F5 | 	and	local07, #191
281a0     15 27 02 F6 | 	mov	local05, local07
281a4     0C 1E 86 F1 | 	sub	local01, #12
281a8     0F 33 02 FB | 	rdlong	local11, local01
281ac     1C 1E 06 F1 | 	add	local01, #28
281b0     0F 33 62 FC | 	wrlong	local11, local01
281b4     2C 1E 86 F1 | 	sub	local01, #44
281b8                 | LR__4083
281b8     15 2D E2 F8 | 	getbyte	local08, local07, #0
281bc     13 31 E2 F8 | 	getbyte	local10, local05, #0
281c0     18 2D 0A F2 | 	cmp	local08, local10 wz
281c4     5C 00 90 5D |  if_ne	jmp	#LR__4084
281c8     14 31 E2 F8 | 	getbyte	local10, local06, #0
281cc     1C 1E 06 F1 | 	add	local01, #28
281d0     0F 2F 02 FB | 	rdlong	local09, local01
281d4     1C 1E 86 F1 | 	sub	local01, #28
281d8     0D 2E 06 F1 | 	add	local09, #13
281dc     17 2D C2 FA | 	rdbyte	local08, local09
281e0     16 2F E2 F8 | 	getbyte	local09, local08, #0
281e4     17 31 0A F2 | 	cmp	local10, local09 wz
281e8     38 00 90 5D |  if_ne	jmp	#LR__4084
281ec     0C 24 06 F1 | 	add	local04, #12
281f0     12 13 02 FB | 	rdlong	arg01, local04
281f4     0C 24 86 F1 | 	sub	local04, #12
281f8     1C 1E 06 F1 | 	add	local01, #28
281fc     0F 35 02 FB | 	rdlong	local12, local01
28200     1C 1E 86 F1 | 	sub	local01, #28
28204     1A 15 02 F6 | 	mov	arg02, local12
28208     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
2820c     00 FA 4D F2 | 	cmps	result1, #0 wz
28210     13 35 02 56 |  if_ne	mov	local12, local05
28214     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
28218     01 34 86 51 |  if_ne	sub	local12, #1
2821c     1A 33 02 56 |  if_ne	mov	local11, local12
28220     04 00 90 5D |  if_ne	jmp	#LR__4085
28224                 | LR__4084
28224     FF 32 06 F6 | 	mov	local11, #255
28228                 | LR__4085
28228     19 27 02 F6 | 	mov	local05, local11
2822c     40 00 90 FD | 	jmp	#LR__4088
28230                 | LR__4086
28230     13 33 02 F6 | 	mov	local11, local05
28234     07 32 4E F7 | 	zerox	local11, #7 wz
28238     20 00 90 5D |  if_ne	jmp	#LR__4087
2823c     14 29 E2 F8 | 	getbyte	local06, local06, #0
28240     1C 1E 06 F1 | 	add	local01, #28
28244     0F 13 02 FB | 	rdlong	arg01, local01
28248     1C 1E 86 F1 | 	sub	local01, #28
2824c     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
28250     FD FA E1 F8 | 	getbyte	result1, result1, #0
28254     FD 28 0A F2 | 	cmp	local06, result1 wz
28258     28 00 90 AD |  if_e	jmp	#LR__4090
2825c                 | LR__4087
2825c     2C 1E 06 F1 | 	add	local01, #44
28260     FF FF FF FF 
28264     0F FF 6B FC | 	wrlong	##-1, local01
28268     2C 1E 86 F1 | 	sub	local01, #44
2826c                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
2826c                 | ' 					}
2826c                 | ' 					break;
2826c     14 00 90 FD | 	jmp	#LR__4090
28270                 | LR__4088
28270                 | LR__4089
28270     0F 13 02 F6 | 	mov	arg01, local01
28274     00 14 06 F6 | 	mov	arg02, #0
28278     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
2827c     FD 22 0A F6 | 	mov	local03, result1 wz
28280     44 FE 9F AD |  if_e	jmp	#LR__4080
28284                 | LR__4090
28284     00 22 0E F2 | 	cmp	local03, #0 wz
28288     18 1E 06 51 |  if_ne	add	local01, #24
2828c     0F 01 68 5C |  if_ne	wrlong	#0, local01
28290                 | ' 	return res;
28290     11 FB 01 F6 | 	mov	result1, local03
28294     A7 F0 03 F6 | 	mov	ptra, fp
28298     B2 00 A0 FD | 	call	#popregs_
2829c                 | _fatfs_cc_dir_read_ret
2829c     2D 00 64 FD | 	ret
282a0                 | 
282a0                 | _fatfs_cc_dir_find
282a0     0B 4A 05 F6 | 	mov	COUNT_, #11
282a4     A8 00 A0 FD | 	call	#pushregs_
282a8     09 1F 02 F6 | 	mov	local01, arg01
282ac     0F 21 02 FB | 	rdlong	local02, local01
282b0     0F 13 02 F6 | 	mov	arg01, local01
282b4     00 14 06 F6 | 	mov	arg02, #0
282b8     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
282bc     00 FA 0D F2 | 	cmp	result1, #0 wz
282c0     18 02 90 5D |  if_ne	jmp	#LR__4112
282c4     FF 22 06 F6 | 	mov	local03, #255
282c8     FF 24 06 F6 | 	mov	local04, #255
282cc     2C 1E 06 F1 | 	add	local01, #44
282d0     FF FF FF FF 
282d4     0F FF 6B FC | 	wrlong	##-1, local01
282d8     2C 1E 86 F1 | 	sub	local01, #44
282dc                 | ' #line 2404 "ff.c"
282dc                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
282dc                 | ' 
282dc                 | ' 	do {
282dc                 | LR__4100
282dc     18 1E 06 F1 | 	add	local01, #24
282e0     0F 15 02 FB | 	rdlong	arg02, local01
282e4     18 1E 86 F1 | 	sub	local01, #24
282e8     10 13 02 F6 | 	mov	arg01, local02
282ec     A8 EB BF FD | 	call	#_fatfs_cc_move_window
282f0     FD 26 0A F6 | 	mov	local05, result1 wz
282f4     E0 01 90 5D |  if_ne	jmp	#LR__4111
282f8     1C 1E 06 F1 | 	add	local01, #28
282fc     0F 17 02 FB | 	rdlong	arg03, local01
28300     1C 1E 86 F1 | 	sub	local01, #28
28304     0B 29 C2 FA | 	rdbyte	local06, arg03
28308     14 17 02 F6 | 	mov	arg03, local06
2830c     07 16 4E F7 | 	zerox	arg03, #7 wz
28310     04 26 06 A6 |  if_e	mov	local05, #4
28314     C0 01 90 AD |  if_e	jmp	#LR__4111
28318     1C 1E 06 F1 | 	add	local01, #28
2831c     0F 2B 02 FB | 	rdlong	local07, local01
28320     15 17 02 F6 | 	mov	arg03, local07
28324     0B 16 06 F1 | 	add	arg03, #11
28328     0B 2D C2 FA | 	rdbyte	local08, arg03
2832c     3F 2C 06 F5 | 	and	local08, #63
28330     16 1E 86 F1 | 	sub	local01, #22
28334     0F 2D 42 FC | 	wrbyte	local08, local01
28338     06 1E 86 F1 | 	sub	local01, #6
2833c     14 17 E2 F8 | 	getbyte	arg03, local06, #0
28340     E5 16 0E F2 | 	cmp	arg03, #229 wz
28344     18 00 90 AD |  if_e	jmp	#LR__4101
28348     16 17 E2 F8 | 	getbyte	arg03, local08, #0
2834c     08 16 CE F7 | 	test	arg03, #8 wz
28350     16 2B 02 56 |  if_ne	mov	local07, local08
28354     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
28358     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
2835c     18 00 90 AD |  if_e	jmp	#LR__4102
28360                 | LR__4101
28360     FF 24 06 F6 | 	mov	local04, #255
28364     2C 1E 06 F1 | 	add	local01, #44
28368     FF FF FF FF 
2836c     0F FF 6B FC | 	wrlong	##-1, local01
28370     2C 1E 86 F1 | 	sub	local01, #44
28374     4C 01 90 FD | 	jmp	#LR__4110
28378                 | LR__4102
28378     16 2D E2 F8 | 	getbyte	local08, local08, #0
2837c     0F 2C 0E F2 | 	cmp	local08, #15 wz
28380     C8 00 90 5D |  if_ne	jmp	#LR__4106
28384     2B 1E 06 F1 | 	add	local01, #43
28388     0F 2D C2 FA | 	rdbyte	local08, local01
2838c     2B 1E 86 F1 | 	sub	local01, #43
28390     40 2C CE F7 | 	test	local08, #64 wz
28394     2C 01 90 5D |  if_ne	jmp	#LR__4109
28398     14 2F E2 F8 | 	getbyte	local09, local06, #0
2839c     40 2E CE F7 | 	test	local09, #64 wz
283a0     30 00 90 AD |  if_e	jmp	#LR__4103
283a4     1C 1E 06 F1 | 	add	local01, #28
283a8     0F 2F 02 FB | 	rdlong	local09, local01
283ac     0D 2E 06 F1 | 	add	local09, #13
283b0     17 23 C2 FA | 	rdbyte	local03, local09
283b4     14 29 E2 F8 | 	getbyte	local06, local06, #0
283b8     BF 28 06 F5 | 	and	local06, #191
283bc     14 25 02 F6 | 	mov	local04, local06
283c0     0C 1E 86 F1 | 	sub	local01, #12
283c4     0F 2F 02 FB | 	rdlong	local09, local01
283c8     1C 1E 06 F1 | 	add	local01, #28
283cc     0F 2F 62 FC | 	wrlong	local09, local01
283d0     2C 1E 86 F1 | 	sub	local01, #44
283d4                 | LR__4103
283d4     14 31 E2 F8 | 	getbyte	local10, local06, #0
283d8     12 2B E2 F8 | 	getbyte	local07, local04, #0
283dc     15 31 0A F2 | 	cmp	local10, local07 wz
283e0     5C 00 90 5D |  if_ne	jmp	#LR__4104
283e4     11 2D E2 F8 | 	getbyte	local08, local03, #0
283e8     1C 1E 06 F1 | 	add	local01, #28
283ec     0F 2B 02 FB | 	rdlong	local07, local01
283f0     1C 1E 86 F1 | 	sub	local01, #28
283f4     0D 2A 06 F1 | 	add	local07, #13
283f8     15 29 C2 FA | 	rdbyte	local06, local07
283fc     14 2B E2 F8 | 	getbyte	local07, local06, #0
28400     15 2D 0A F2 | 	cmp	local08, local07 wz
28404     38 00 90 5D |  if_ne	jmp	#LR__4104
28408     0C 20 06 F1 | 	add	local02, #12
2840c     10 13 02 FB | 	rdlong	arg01, local02
28410     0C 20 86 F1 | 	sub	local02, #12
28414     1C 1E 06 F1 | 	add	local01, #28
28418     0F 33 02 FB | 	rdlong	local11, local01
2841c     1C 1E 86 F1 | 	sub	local01, #28
28420     19 15 02 F6 | 	mov	arg02, local11
28424     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
28428     00 FA 4D F2 | 	cmps	result1, #0 wz
2842c     12 33 02 56 |  if_ne	mov	local11, local04
28430     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
28434     01 32 86 51 |  if_ne	sub	local11, #1
28438     19 2F 02 56 |  if_ne	mov	local09, local11
2843c     04 00 90 5D |  if_ne	jmp	#LR__4105
28440                 | LR__4104
28440     FF 2E 06 F6 | 	mov	local09, #255
28444                 | LR__4105
28444     17 25 02 F6 | 	mov	local04, local09
28448     78 00 90 FD | 	jmp	#LR__4109
2844c                 | LR__4106
2844c     12 2F 02 F6 | 	mov	local09, local04
28450     07 2E 4E F7 | 	zerox	local09, #7 wz
28454     20 00 90 5D |  if_ne	jmp	#LR__4107
28458     11 31 E2 F8 | 	getbyte	local10, local03, #0
2845c     1C 1E 06 F1 | 	add	local01, #28
28460     0F 13 02 FB | 	rdlong	arg01, local01
28464     1C 1E 86 F1 | 	sub	local01, #28
28468     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
2846c     FD FA E1 F8 | 	getbyte	result1, result1, #0
28470     FD 30 0A F2 | 	cmp	local10, result1 wz
28474     60 00 90 AD |  if_e	jmp	#LR__4111
28478                 | LR__4107
28478     2B 1E 06 F1 | 	add	local01, #43
2847c     0F 2F C2 FA | 	rdbyte	local09, local01
28480     2B 1E 86 F1 | 	sub	local01, #43
28484     01 2E CE F7 | 	test	local09, #1 wz
28488     24 00 90 5D |  if_ne	jmp	#LR__4108
2848c     1C 1E 06 F1 | 	add	local01, #28
28490     0F 13 02 FB | 	rdlong	arg01, local01
28494     04 1E 06 F1 | 	add	local01, #4
28498     0F 15 02 F6 | 	mov	arg02, local01
2849c     20 1E 86 F1 | 	sub	local01, #32
284a0     0B 16 06 F6 | 	mov	arg03, #11
284a4     88 DA BF FD | 	call	#_fatfs_cc_memcmp
284a8     00 FA 0D F2 | 	cmp	result1, #0 wz
284ac     28 00 90 AD |  if_e	jmp	#LR__4111
284b0                 | LR__4108
284b0     FF 24 06 F6 | 	mov	local04, #255
284b4     2C 1E 06 F1 | 	add	local01, #44
284b8     FF FF FF FF 
284bc     0F FF 6B FC | 	wrlong	##-1, local01
284c0     2C 1E 86 F1 | 	sub	local01, #44
284c4                 | LR__4109
284c4                 | LR__4110
284c4     0F 13 02 F6 | 	mov	arg01, local01
284c8     00 14 06 F6 | 	mov	arg02, #0
284cc     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
284d0     FD 26 0A F6 | 	mov	local05, result1 wz
284d4     04 FE 9F AD |  if_e	jmp	#LR__4100
284d8                 | LR__4111
284d8                 | ' 
284d8                 | ' 	return res;
284d8     13 FB 01 F6 | 	mov	result1, local05
284dc                 | LR__4112
284dc     A7 F0 03 F6 | 	mov	ptra, fp
284e0     B2 00 A0 FD | 	call	#popregs_
284e4                 | _fatfs_cc_dir_find_ret
284e4     2D 00 64 FD | 	ret
284e8                 | 
284e8                 | _fatfs_cc_dir_register
284e8     0A 4A 05 F6 | 	mov	COUNT_, #10
284ec     A8 00 A0 FD | 	call	#pushregs_
284f0     2C F0 07 F1 | 	add	ptra, #44
284f4     04 4E 05 F1 | 	add	fp, #4
284f8     A7 12 62 FC | 	wrlong	arg01, fp
284fc     09 1F 02 FB | 	rdlong	local01, arg01
28500     08 4E 05 F1 | 	add	fp, #8
28504     A7 1E 62 FC | 	wrlong	local01, fp
28508     08 4E 85 F1 | 	sub	fp, #8
2850c     A7 20 02 FB | 	rdlong	local02, fp
28510     04 4E 85 F1 | 	sub	fp, #4
28514     2B 20 06 F1 | 	add	local02, #43
28518     10 21 C2 FA | 	rdbyte	local02, local02
2851c     A0 20 CE F7 | 	test	local02, #160 wz
28520     06 FA 05 56 |  if_ne	mov	result1, #6
28524     F8 03 90 5D |  if_ne	jmp	#LR__4135
28528                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
28528     14 4E 05 F1 | 	add	fp, #20
2852c     A7 00 68 FC | 	wrlong	#0, fp
28530     14 4E 85 F1 | 	sub	fp, #20
28534     97 28 48 FB | 	callpa	#(@LR__4121-@LR__4120)>>2,fcache_load_ptr_
28538                 | LR__4120
28538     0C 4E 05 F1 | 	add	fp, #12
2853c     A7 20 02 FB | 	rdlong	local02, fp
28540     0C 20 06 F1 | 	add	local02, #12
28544     10 23 02 FB | 	rdlong	local03, local02
28548     08 4E 05 F1 | 	add	fp, #8
2854c     A7 24 02 FB | 	rdlong	local04, fp
28550     14 4E 85 F1 | 	sub	fp, #20
28554     01 24 66 F0 | 	shl	local04, #1
28558     11 25 02 F1 | 	add	local04, local03
2855c     12 21 EA FA | 	rdword	local02, local04 wz
28560     24 00 90 AD |  if_e	jmp	#LR__4122
28564     14 4E 05 F1 | 	add	fp, #20
28568     A7 26 02 FB | 	rdlong	local05, fp
2856c     13 29 02 F6 | 	mov	local06, local05
28570     13 2B 02 F6 | 	mov	local07, local05
28574     15 2D 02 F6 | 	mov	local08, local07
28578     01 2C 06 F1 | 	add	local08, #1
2857c     A7 2C 62 FC | 	wrlong	local08, fp
28580     14 4E 85 F1 | 	sub	fp, #20
28584     B0 FF 9F FD | 	jmp	#LR__4120
28588                 | LR__4121
28588                 | LR__4122
28588     1C 4E 05 F1 | 	add	fp, #28
2858c     A7 12 02 F6 | 	mov	arg01, fp
28590     18 4E 85 F1 | 	sub	fp, #24
28594     A7 14 02 FB | 	rdlong	arg02, fp
28598     04 4E 85 F1 | 	sub	fp, #4
2859c     20 14 06 F1 | 	add	arg02, #32
285a0     0C 16 06 F6 | 	mov	arg03, #12
285a4     74 71 BF FD | 	call	#__system____builtin_memmove
285a8     27 4E 05 F1 | 	add	fp, #39
285ac     A7 2E C2 FA | 	rdbyte	local09, fp
285b0     27 4E 85 F1 | 	sub	fp, #39
285b4     01 2E CE F7 | 	test	local09, #1 wz
285b8     F4 00 90 AD |  if_e	jmp	#LR__4125
285bc     04 4E 05 F1 | 	add	fp, #4
285c0     A7 30 02 FB | 	rdlong	local10, fp
285c4     2B 30 06 F1 | 	add	local10, #43
285c8     18 81 48 FC | 	wrbyte	#64, local10
285cc                 | ' 		dp->fn[ 11 ] =  0x40 ;
285cc                 | ' 		for (n = 1; n < 100; n++) {
285cc     0C 4E 05 F1 | 	add	fp, #12
285d0     A7 02 68 FC | 	wrlong	#1, fp
285d4     10 4E 85 F1 | 	sub	fp, #16
285d8                 | LR__4123
285d8     10 4E 05 F1 | 	add	fp, #16
285dc     A7 20 02 FB | 	rdlong	local02, fp
285e0     10 4E 85 F1 | 	sub	fp, #16
285e4     64 20 16 F2 | 	cmp	local02, #100 wc
285e8     70 00 90 3D |  if_ae	jmp	#LR__4124
285ec     04 4E 05 F1 | 	add	fp, #4
285f0     A7 12 02 FB | 	rdlong	arg01, fp
285f4     20 12 06 F1 | 	add	arg01, #32
285f8     18 4E 05 F1 | 	add	fp, #24
285fc     A7 14 02 F6 | 	mov	arg02, fp
28600     10 4E 85 F1 | 	sub	fp, #16
28604     A7 30 02 FB | 	rdlong	local10, fp
28608     0C 30 06 F1 | 	add	local10, #12
2860c     18 17 02 FB | 	rdlong	arg03, local10
28610     04 4E 05 F1 | 	add	fp, #4
28614     A7 18 02 FB | 	rdlong	arg04, fp
28618     10 4E 85 F1 | 	sub	fp, #16
2861c     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
28620     04 4E 05 F1 | 	add	fp, #4
28624     A7 12 02 FB | 	rdlong	arg01, fp
28628     04 4E 85 F1 | 	sub	fp, #4
2862c     70 FC BF FD | 	call	#_fatfs_cc_dir_find
28630     08 4E 05 F1 | 	add	fp, #8
28634     A7 FA 61 FC | 	wrlong	result1, fp
28638     00 FA 4D F2 | 	cmps	result1, #0 wz
2863c     08 4E 85 F1 | 	sub	fp, #8
28640     18 00 90 5D |  if_ne	jmp	#LR__4124
28644     10 4E 05 F1 | 	add	fp, #16
28648     A7 30 02 FB | 	rdlong	local10, fp
2864c     01 30 06 F1 | 	add	local10, #1
28650     A7 30 62 FC | 	wrlong	local10, fp
28654     10 4E 85 F1 | 	sub	fp, #16
28658     7C FF 9F FD | 	jmp	#LR__4123
2865c                 | LR__4124
2865c     10 4E 05 F1 | 	add	fp, #16
28660     A7 30 02 FB | 	rdlong	local10, fp
28664     10 4E 85 F1 | 	sub	fp, #16
28668     64 30 0E F2 | 	cmp	local10, #100 wz
2866c     07 FA 05 A6 |  if_e	mov	result1, #7
28670     AC 02 90 AD |  if_e	jmp	#LR__4135
28674     08 4E 05 F1 | 	add	fp, #8
28678     A7 30 02 FB | 	rdlong	local10, fp
2867c     08 4E 85 F1 | 	sub	fp, #8
28680     04 30 0E F2 | 	cmp	local10, #4 wz
28684     08 4E 05 51 |  if_ne	add	fp, #8
28688     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2868c     08 4E 85 51 |  if_ne	sub	fp, #8
28690     8C 02 90 5D |  if_ne	jmp	#LR__4135
28694     04 4E 05 F1 | 	add	fp, #4
28698     A7 30 02 FB | 	rdlong	local10, fp
2869c     23 4E 05 F1 | 	add	fp, #35
286a0     A7 1E C2 FA | 	rdbyte	local01, fp
286a4     27 4E 85 F1 | 	sub	fp, #39
286a8     2B 30 06 F1 | 	add	local10, #43
286ac     18 1F 42 FC | 	wrbyte	local01, local10
286b0                 | LR__4125
286b0     27 4E 05 F1 | 	add	fp, #39
286b4     A7 20 C2 FA | 	rdbyte	local02, fp
286b8     27 4E 85 F1 | 	sub	fp, #39
286bc     02 20 CE F7 | 	test	local02, #2 wz
286c0     20 00 90 AD |  if_e	jmp	#LR__4126
286c4     14 4E 05 F1 | 	add	fp, #20
286c8     A7 30 02 FB | 	rdlong	local10, fp
286cc     0C 30 06 F1 | 	add	local10, #12
286d0     0D 30 16 FD | 	qdiv	local10, #13
286d4     14 4E 85 F1 | 	sub	fp, #20
286d8     18 30 62 FD | 	getqx	local10
286dc     01 30 06 F1 | 	add	local10, #1
286e0     04 00 90 FD | 	jmp	#LR__4127
286e4                 | LR__4126
286e4     01 30 06 F6 | 	mov	local10, #1
286e8                 | LR__4127
286e8     18 4E 05 F1 | 	add	fp, #24
286ec     A7 30 62 FC | 	wrlong	local10, fp
286f0     14 4E 85 F1 | 	sub	fp, #20
286f4     A7 12 02 FB | 	rdlong	arg01, fp
286f8     18 15 02 F6 | 	mov	arg02, local10
286fc     04 4E 85 F1 | 	sub	fp, #4
28700     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
28704     08 4E 05 F1 | 	add	fp, #8
28708     A7 FA 61 FC | 	wrlong	result1, fp
2870c     08 4E 85 F1 | 	sub	fp, #8
28710     00 FA 0D F2 | 	cmp	result1, #0 wz
28714     38 01 90 5D |  if_ne	jmp	#LR__4132
28718     18 4E 05 F1 | 	add	fp, #24
2871c     A7 30 02 FB | 	rdlong	local10, fp
28720     01 30 8E F1 | 	sub	local10, #1 wz
28724     A7 30 62 FC | 	wrlong	local10, fp
28728     18 4E 85 F1 | 	sub	fp, #24
2872c     20 01 90 AD |  if_e	jmp	#LR__4132
28730     04 4E 05 F1 | 	add	fp, #4
28734     A7 30 02 FB | 	rdlong	local10, fp
28738     18 13 02 F6 | 	mov	arg01, local10
2873c     14 4E 05 F1 | 	add	fp, #20
28740     A7 18 02 FB | 	rdlong	arg04, fp
28744     18 4E 85 F1 | 	sub	fp, #24
28748     05 18 66 F0 | 	shl	arg04, #5
2874c     10 30 06 F1 | 	add	local10, #16
28750     18 15 02 FB | 	rdlong	arg02, local10
28754     0C 15 82 F1 | 	sub	arg02, arg04
28758     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
2875c     08 4E 05 F1 | 	add	fp, #8
28760     A7 FA 61 FC | 	wrlong	result1, fp
28764     08 4E 85 F1 | 	sub	fp, #8
28768     00 FA 0D F2 | 	cmp	result1, #0 wz
2876c     E0 00 90 5D |  if_ne	jmp	#LR__4131
28770     04 4E 05 F1 | 	add	fp, #4
28774     A7 12 02 FB | 	rdlong	arg01, fp
28778     04 4E 85 F1 | 	sub	fp, #4
2877c     20 12 06 F1 | 	add	arg01, #32
28780     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
28784     FD 30 02 F6 | 	mov	local10, result1
28788     28 4E 05 F1 | 	add	fp, #40
2878c     A7 30 42 FC | 	wrbyte	local10, fp
28790     28 4E 85 F1 | 	sub	fp, #40
28794                 | ' 			sum = sum_sfn(dp->fn);
28794                 | ' 			do {
28794                 | LR__4128
28794     0C 4E 05 F1 | 	add	fp, #12
28798     A7 12 02 FB | 	rdlong	arg01, fp
2879c     08 4E 85 F1 | 	sub	fp, #8
287a0     A7 1E 02 FB | 	rdlong	local01, fp
287a4     04 4E 85 F1 | 	sub	fp, #4
287a8     18 1E 06 F1 | 	add	local01, #24
287ac     0F 15 02 FB | 	rdlong	arg02, local01
287b0     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
287b4     08 4E 05 F1 | 	add	fp, #8
287b8     A7 FA 61 FC | 	wrlong	result1, fp
287bc     00 FA 4D F2 | 	cmps	result1, #0 wz
287c0     08 4E 85 F1 | 	sub	fp, #8
287c4     88 00 90 5D |  if_ne	jmp	#LR__4130
287c8     0C 4E 05 F1 | 	add	fp, #12
287cc     A7 20 02 FB | 	rdlong	local02, fp
287d0     0C 20 06 F1 | 	add	local02, #12
287d4     10 13 02 FB | 	rdlong	arg01, local02
287d8     08 4E 85 F1 | 	sub	fp, #8
287dc     A7 1E 02 FB | 	rdlong	local01, fp
287e0     1C 1E 06 F1 | 	add	local01, #28
287e4     0F 15 02 FB | 	rdlong	arg02, local01
287e8     14 4E 05 F1 | 	add	fp, #20
287ec     A7 16 02 FB | 	rdlong	arg03, fp
287f0     10 4E 05 F1 | 	add	fp, #16
287f4     A7 18 C2 FA | 	rdbyte	arg04, fp
287f8     28 4E 85 F1 | 	sub	fp, #40
287fc     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
28800     0C 4E 05 F1 | 	add	fp, #12
28804     A7 30 02 FB | 	rdlong	local10, fp
28808     03 30 06 F1 | 	add	local10, #3
2880c     18 03 48 FC | 	wrbyte	#1, local10
28810     08 4E 85 F1 | 	sub	fp, #8
28814     A7 12 02 FB | 	rdlong	arg01, fp
28818     04 4E 85 F1 | 	sub	fp, #4
2881c     00 14 06 F6 | 	mov	arg02, #0
28820     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
28824     08 4E 05 F1 | 	add	fp, #8
28828     A7 FA 61 FC | 	wrlong	result1, fp
2882c     00 FA 4D F2 | 	cmps	result1, #0 wz
28830     08 4E 85 F1 | 	sub	fp, #8
28834     18 00 90 5D |  if_ne	jmp	#LR__4129
28838     18 4E 05 F1 | 	add	fp, #24
2883c     A7 30 02 FB | 	rdlong	local10, fp
28840     01 30 8E F1 | 	sub	local10, #1 wz
28844     A7 30 62 FC | 	wrlong	local10, fp
28848     18 4E 85 F1 | 	sub	fp, #24
2884c     44 FF 9F 5D |  if_ne	jmp	#LR__4128
28850                 | LR__4129
28850                 | LR__4130
28850                 | LR__4131
28850                 | LR__4132
28850     08 4E 05 F1 | 	add	fp, #8
28854     A7 30 0A FB | 	rdlong	local10, fp wz
28858     08 4E 85 F1 | 	sub	fp, #8
2885c     B4 00 90 5D |  if_ne	jmp	#LR__4134
28860     0C 4E 05 F1 | 	add	fp, #12
28864     A7 12 02 FB | 	rdlong	arg01, fp
28868     08 4E 85 F1 | 	sub	fp, #8
2886c     A7 1E 02 FB | 	rdlong	local01, fp
28870     04 4E 85 F1 | 	sub	fp, #4
28874     18 1E 06 F1 | 	add	local01, #24
28878     0F 15 02 FB | 	rdlong	arg02, local01
2887c     18 E6 BF FD | 	call	#_fatfs_cc_move_window
28880     08 4E 05 F1 | 	add	fp, #8
28884     A7 FA 61 FC | 	wrlong	result1, fp
28888     08 4E 85 F1 | 	sub	fp, #8
2888c     00 FA 0D F2 | 	cmp	result1, #0 wz
28890     80 00 90 5D |  if_ne	jmp	#LR__4133
28894     04 4E 05 F1 | 	add	fp, #4
28898     A7 20 02 FB | 	rdlong	local02, fp
2889c     04 4E 85 F1 | 	sub	fp, #4
288a0     1C 20 06 F1 | 	add	local02, #28
288a4     10 13 02 FB | 	rdlong	arg01, local02
288a8     00 14 06 F6 | 	mov	arg02, #0
288ac     20 16 06 F6 | 	mov	arg03, #32
288b0     98 00 A0 FD | 	call	#\builtin_bytefill_
288b4     04 4E 05 F1 | 	add	fp, #4
288b8     A7 14 02 FB | 	rdlong	arg02, fp
288bc     0A 1F 02 F6 | 	mov	local01, arg02
288c0     1C 1E 06 F1 | 	add	local01, #28
288c4     0F 13 02 FB | 	rdlong	arg01, local01
288c8     04 4E 85 F1 | 	sub	fp, #4
288cc     20 14 06 F1 | 	add	arg02, #32
288d0     0B 16 06 F6 | 	mov	arg03, #11
288d4     44 6E BF FD | 	call	#__system____builtin_memmove
288d8     04 4E 05 F1 | 	add	fp, #4
288dc     A7 2E 02 FB | 	rdlong	local09, fp
288e0     17 31 02 F6 | 	mov	local10, local09
288e4     1C 30 06 F1 | 	add	local10, #28
288e8     18 1F 02 FB | 	rdlong	local01, local10
288ec     2B 2E 06 F1 | 	add	local09, #43
288f0     17 31 C2 FA | 	rdbyte	local10, local09
288f4     18 30 06 F5 | 	and	local10, #24
288f8     0C 1E 06 F1 | 	add	local01, #12
288fc     0F 31 42 FC | 	wrbyte	local10, local01
28900     08 4E 05 F1 | 	add	fp, #8
28904     A7 30 02 FB | 	rdlong	local10, fp
28908     0C 4E 85 F1 | 	sub	fp, #12
2890c     03 30 06 F1 | 	add	local10, #3
28910     18 03 48 FC | 	wrbyte	#1, local10
28914                 | LR__4133
28914                 | LR__4134
28914                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
28914                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
28914                 | ' 
28914                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
28914                 | ' 
28914                 | ' 			fs->wflag = 1;
28914                 | ' 		}
28914                 | ' 	}
28914                 | ' 
28914                 | ' 	return res;
28914     08 4E 05 F1 | 	add	fp, #8
28918     A7 FA 01 FB | 	rdlong	result1, fp
2891c     08 4E 85 F1 | 	sub	fp, #8
28920                 | LR__4135
28920     A7 F0 03 F6 | 	mov	ptra, fp
28924     B2 00 A0 FD | 	call	#popregs_
28928                 | _fatfs_cc_dir_register_ret
28928     2D 00 64 FD | 	ret
2892c                 | 
2892c                 | _fatfs_cc_dir_remove
2892c     05 4A 05 F6 | 	mov	COUNT_, #5
28930     A8 00 A0 FD | 	call	#pushregs_
28934     09 1F 02 F6 | 	mov	local01, arg01
28938     0F 21 02 FB | 	rdlong	local02, local01
2893c     10 1E 06 F1 | 	add	local01, #16
28940     0F 23 02 FB | 	rdlong	local03, local01
28944     1C 1E 06 F1 | 	add	local01, #28
28948     0F 15 02 FB | 	rdlong	arg02, local01
2894c     2C 1E 86 F1 | 	sub	local01, #44
28950     FF FF 7F FF 
28954     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
28958     00 24 06 A6 |  if_e	mov	local04, #0
2895c     18 00 90 AD |  if_e	jmp	#LR__4140
28960     0F 13 02 F6 | 	mov	arg01, local01
28964     2C 1E 06 F1 | 	add	local01, #44
28968     0F 15 02 FB | 	rdlong	arg02, local01
2896c     2C 1E 86 F1 | 	sub	local01, #44
28970     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
28974     FD 24 02 F6 | 	mov	local04, result1
28978                 | LR__4140
28978     12 27 0A F6 | 	mov	local05, local04 wz
2897c     64 00 90 5D |  if_ne	jmp	#LR__4143
28980                 | ' 		do {
28980                 | LR__4141
28980     18 1E 06 F1 | 	add	local01, #24
28984     0F 15 02 FB | 	rdlong	arg02, local01
28988     18 1E 86 F1 | 	sub	local01, #24
2898c     10 13 02 F6 | 	mov	arg01, local02
28990     04 E5 BF FD | 	call	#_fatfs_cc_move_window
28994     FD 26 0A F6 | 	mov	local05, result1 wz
28998     40 00 90 5D |  if_ne	jmp	#LR__4142
2899c     1C 1E 06 F1 | 	add	local01, #28
289a0     0F 25 02 FB | 	rdlong	local04, local01
289a4     12 CB 49 FC | 	wrbyte	#229, local04
289a8     03 20 06 F1 | 	add	local02, #3
289ac     10 03 48 FC | 	wrbyte	#1, local02
289b0     03 20 86 F1 | 	sub	local02, #3
289b4     0C 1E 86 F1 | 	sub	local01, #12
289b8     0F 25 02 FB | 	rdlong	local04, local01
289bc     10 1E 86 F1 | 	sub	local01, #16
289c0     11 25 12 F2 | 	cmp	local04, local03 wc
289c4     14 00 90 3D |  if_ae	jmp	#LR__4142
289c8     0F 13 02 F6 | 	mov	arg01, local01
289cc     00 14 06 F6 | 	mov	arg02, #0
289d0     90 EF BF FD | 	call	#_fatfs_cc_dir_next
289d4     FD 26 0A F6 | 	mov	local05, result1 wz
289d8     A4 FF 9F AD |  if_e	jmp	#LR__4141
289dc                 | LR__4142
289dc     04 26 0E F2 | 	cmp	local05, #4 wz
289e0     02 26 06 A6 |  if_e	mov	local05, #2
289e4                 | LR__4143
289e4                 | ' 	}
289e4                 | ' #line 2590 "ff.c"
289e4                 | ' 	return res;
289e4     13 FB 01 F6 | 	mov	result1, local05
289e8     A7 F0 03 F6 | 	mov	ptra, fp
289ec     B2 00 A0 FD | 	call	#popregs_
289f0                 | _fatfs_cc_dir_remove_ret
289f0     2D 00 64 FD | 	ret
289f4                 | 
289f4                 | _fatfs_cc_get_fileinfo
289f4     0F 4A 05 F6 | 	mov	COUNT_, #15
289f8     A8 00 A0 FD | 	call	#pushregs_
289fc     09 1F 02 F6 | 	mov	local01, arg01
28a00     0A 21 02 F6 | 	mov	local02, arg02
28a04     0F 23 02 FB | 	rdlong	local03, local01
28a08     1C 20 06 F1 | 	add	local02, #28
28a0c     10 01 48 FC | 	wrbyte	#0, local02
28a10     1C 20 86 F1 | 	sub	local02, #28
28a14     18 1E 06 F1 | 	add	local01, #24
28a18     0F 25 0A FB | 	rdlong	local04, local01 wz
28a1c     18 1E 86 F1 | 	sub	local01, #24
28a20     90 03 90 AD |  if_e	jmp	#LR__4164
28a24     2C 1E 06 F1 | 	add	local01, #44
28a28     0F 25 02 FB | 	rdlong	local04, local01
28a2c     2C 1E 86 F1 | 	sub	local01, #44
28a30     FF FF 7F FF 
28a34     FF 25 0E F2 | 	cmp	local04, ##-1 wz
28a38     D8 00 90 AD |  if_e	jmp	#LR__4153
28a3c     00 26 06 F6 | 	mov	local05, #0
28a40     00 28 06 F6 | 	mov	local06, #0
28a44     00 2A 06 F6 | 	mov	local07, #0
28a48                 | ' 			si = di = 0;
28a48                 | ' 			hs = 0;
28a48                 | ' 			while (fs->lfnbuf[si] != 0) {
28a48                 | LR__4150
28a48     0C 22 06 F1 | 	add	local03, #12
28a4c     11 25 02 FB | 	rdlong	local04, local03
28a50     0C 22 86 F1 | 	sub	local03, #12
28a54     14 2D 02 F6 | 	mov	local08, local06
28a58     01 2C 66 F0 | 	shl	local08, #1
28a5c     12 2D 02 F1 | 	add	local08, local04
28a60     16 25 EA FA | 	rdword	local04, local08 wz
28a64     90 00 90 AD |  if_e	jmp	#LR__4152
28a68     0C 22 06 F1 | 	add	local03, #12
28a6c     11 2F 02 FB | 	rdlong	local09, local03
28a70     0C 22 86 F1 | 	sub	local03, #12
28a74     14 31 02 F6 | 	mov	local10, local06
28a78     01 30 66 F0 | 	shl	local10, #1
28a7c     17 31 02 F1 | 	add	local10, local09
28a80     18 33 E2 FA | 	rdword	local11, local10
28a84     15 25 02 F6 | 	mov	local04, local07
28a88     0F 24 4E F7 | 	zerox	local04, #15 wz
28a8c     01 28 06 F1 | 	add	local06, #1
28a90     24 00 90 5D |  if_ne	jmp	#LR__4151
28a94     19 35 32 F9 | 	getword	local12, local11, #0
28a98     6C 00 00 FF 
28a9c     00 34 16 F2 | 	cmp	local12, ##55296 wc
28aa0     14 00 90 CD |  if_b	jmp	#LR__4151
28aa4     19 37 32 F9 | 	getword	local13, local11, #0
28aa8     70 00 00 FF 
28aac     00 36 16 F2 | 	cmp	local13, ##57344 wc
28ab0     19 2B 02 C6 |  if_b	mov	local07, local11
28ab4                 | ' 					hs = wc; continue;
28ab4     90 FF 9F CD |  if_b	jmp	#LR__4150
28ab8                 | LR__4151
28ab8     15 13 32 F9 | 	getword	arg01, local07, #0
28abc     10 12 66 F0 | 	shl	arg01, #16
28ac0     19 33 32 F9 | 	getword	local11, local11, #0
28ac4     19 13 42 F5 | 	or	arg01, local11
28ac8     13 15 02 F6 | 	mov	arg02, local05
28acc     1C 20 06 F1 | 	add	local02, #28
28ad0     10 15 02 F1 | 	add	arg02, local02
28ad4     FF 16 06 F6 | 	mov	arg03, #255
28ad8     13 17 82 F1 | 	sub	arg03, local05
28adc     1C 20 86 F1 | 	sub	local02, #28
28ae0     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
28ae4     FD 38 0A F6 | 	mov	local14, result1 wz
28ae8     00 26 06 A6 |  if_e	mov	local05, #0
28aec     1C 27 02 51 |  if_ne	add	local05, local14
28af0     00 2A 06 56 |  if_ne	mov	local07, #0
28af4     50 FF 9F 5D |  if_ne	jmp	#LR__4150
28af8                 | LR__4152
28af8     15 25 02 F6 | 	mov	local04, local07
28afc     0F 24 4E F7 | 	zerox	local04, #15 wz
28b00     00 26 06 56 |  if_ne	mov	local05, #0
28b04     1C 20 06 F1 | 	add	local02, #28
28b08     10 27 02 F1 | 	add	local05, local02
28b0c     13 01 48 FC | 	wrbyte	#0, local05
28b10     1C 20 86 F1 | 	sub	local02, #28
28b14                 | LR__4153
28b14     00 26 06 F6 | 	mov	local05, #0
28b18     00 28 06 F6 | 	mov	local06, #0
28b1c                 | ' 			fno->fname[di] = 0;
28b1c                 | ' 		}
28b1c                 | ' 	}
28b1c                 | ' 
28b1c                 | ' 	si = di = 0;
28b1c                 | ' 	while (si < 11) {
28b1c                 | LR__4154
28b1c     0B 28 16 F2 | 	cmp	local06, #11 wc
28b20     20 01 90 3D |  if_ae	jmp	#LR__4157
28b24     1C 1E 06 F1 | 	add	local01, #28
28b28     0F 2F 02 FB | 	rdlong	local09, local01
28b2c     1C 1E 86 F1 | 	sub	local01, #28
28b30     14 31 02 F6 | 	mov	local10, local06
28b34     17 31 02 F1 | 	add	local10, local09
28b38     18 33 C2 FA | 	rdbyte	local11, local10
28b3c     19 25 32 F9 | 	getword	local04, local11, #0
28b40     20 24 0E F2 | 	cmp	local04, #32 wz
28b44     01 28 06 F1 | 	add	local06, #1
28b48     D0 FF 9F AD |  if_e	jmp	#LR__4154
28b4c     19 25 32 F9 | 	getword	local04, local11, #0
28b50     05 24 0E F2 | 	cmp	local04, #5 wz
28b54     E5 32 06 A6 |  if_e	mov	local11, #229
28b58     09 28 0E F2 | 	cmp	local06, #9 wz
28b5c     20 00 90 5D |  if_ne	jmp	#LR__4155
28b60     0C 26 16 F2 | 	cmp	local05, #12 wc
28b64     18 00 90 3D |  if_ae	jmp	#LR__4155
28b68     13 37 02 F6 | 	mov	local13, local05
28b6c     0C 20 06 F1 | 	add	local02, #12
28b70     10 37 02 F1 | 	add	local13, local02
28b74     1B 5D 48 FC | 	wrbyte	#46, local13
28b78     01 26 06 F1 | 	add	local05, #1
28b7c     0C 20 86 F1 | 	sub	local02, #12
28b80                 | LR__4155
28b80     19 13 32 F9 | 	getword	arg01, local11, #0
28b84     07 12 4E F7 | 	zerox	arg01, #7 wz
28b88     00 FA 05 56 |  if_ne	mov	result1, #0
28b8c                 | ' 
28b8c                 | ' 	return 0;
28b8c     00 FA 05 A6 |  if_e	mov	result1, #0
28b90     00 FA 0D F2 | 	cmp	result1, #0 wz
28b94     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
28b98     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
28b9c     50 00 90 AD |  if_e	jmp	#LR__4156
28ba0     1C 1E 06 F1 | 	add	local01, #28
28ba4     0F 31 02 FB | 	rdlong	local10, local01
28ba8     1C 1E 86 F1 | 	sub	local01, #28
28bac     14 2D 02 F6 | 	mov	local08, local06
28bb0     18 2D 02 F1 | 	add	local08, local10
28bb4     16 13 CA FA | 	rdbyte	arg01, local08 wz
28bb8     00 FA 05 56 |  if_ne	mov	result1, #0
28bbc                 | ' 
28bbc                 | ' 	return 0;
28bbc     00 FA 05 A6 |  if_e	mov	result1, #0
28bc0     00 FA 0D F2 | 	cmp	result1, #0 wz
28bc4     28 00 90 AD |  if_e	jmp	#LR__4156
28bc8     19 33 32 F9 | 	getword	local11, local11, #0
28bcc     08 32 66 F0 | 	shl	local11, #8
28bd0     1C 1E 06 F1 | 	add	local01, #28
28bd4     0F 39 02 FB | 	rdlong	local14, local01
28bd8     1C 1E 86 F1 | 	sub	local01, #28
28bdc     14 2F 02 F6 | 	mov	local09, local06
28be0     1C 2F 02 F1 | 	add	local09, local14
28be4     17 35 C2 FA | 	rdbyte	local12, local09
28be8     1A 33 42 F5 | 	or	local11, local12
28bec     01 28 06 F1 | 	add	local06, #1
28bf0                 | LR__4156
28bf0     19 13 02 F6 | 	mov	arg01, local11
28bf4     01 00 00 FF 
28bf8     52 15 06 F6 | 	mov	arg02, ##850
28bfc     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
28c00     FD 32 02 F6 | 	mov	local11, result1
28c04     19 25 02 F6 | 	mov	local04, local11
28c08     0F 24 4E F7 | 	zerox	local04, #15 wz
28c0c     00 26 06 A6 |  if_e	mov	local05, #0
28c10     30 00 90 AD |  if_e	jmp	#LR__4157
28c14     19 13 32 F9 | 	getword	arg01, local11, #0
28c18     13 15 02 F6 | 	mov	arg02, local05
28c1c     0C 20 06 F1 | 	add	local02, #12
28c20     10 15 02 F1 | 	add	arg02, local02
28c24     0C 16 06 F6 | 	mov	arg03, #12
28c28     13 17 82 F1 | 	sub	arg03, local05
28c2c     0C 20 86 F1 | 	sub	local02, #12
28c30     EC DF BF FD | 	call	#_fatfs_cc_put_utf
28c34     FD 38 0A F6 | 	mov	local14, result1 wz
28c38     00 26 06 A6 |  if_e	mov	local05, #0
28c3c     1C 27 02 51 |  if_ne	add	local05, local14
28c40     D8 FE 9F 5D |  if_ne	jmp	#LR__4154
28c44                 | LR__4157
28c44     13 25 02 F6 | 	mov	local04, local05
28c48     0C 20 06 F1 | 	add	local02, #12
28c4c     10 25 02 F1 | 	add	local04, local02
28c50     12 01 48 FC | 	wrbyte	#0, local04
28c54     10 20 06 F1 | 	add	local02, #16
28c58     10 25 CA FA | 	rdbyte	local04, local02 wz
28c5c     1C 20 86 F1 | 	sub	local02, #28
28c60     F8 00 90 5D |  if_ne	jmp	#LR__4163
28c64     00 26 0E F2 | 	cmp	local05, #0 wz
28c68     1C 00 90 5D |  if_ne	jmp	#LR__4158
28c6c     13 37 02 F6 | 	mov	local13, local05
28c70     1C 20 06 F1 | 	add	local02, #28
28c74     10 37 02 F1 | 	add	local13, local02
28c78     1B 7F 48 FC | 	wrbyte	#63, local13
28c7c     01 26 06 F1 | 	add	local05, #1
28c80     1C 20 86 F1 | 	sub	local02, #28
28c84     A4 00 90 FD | 	jmp	#LR__4162
28c88                 | LR__4158
28c88                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
28c88     00 26 06 F6 | 	mov	local05, #0
28c8c     00 28 06 F6 | 	mov	local06, #0
28c90     08 3A 06 F6 | 	mov	local15, #8
28c94                 | LR__4159
28c94     14 25 02 F6 | 	mov	local04, local06
28c98     0C 20 06 F1 | 	add	local02, #12
28c9c     10 25 02 F1 | 	add	local04, local02
28ca0     12 37 CA FA | 	rdbyte	local13, local04 wz
28ca4     0C 20 86 F1 | 	sub	local02, #12
28ca8     80 00 90 AD |  if_e	jmp	#LR__4161
28cac     14 2D 02 F6 | 	mov	local08, local06
28cb0     0C 20 06 F1 | 	add	local02, #12
28cb4     10 2D 02 F1 | 	add	local08, local02
28cb8     16 33 C2 FA | 	rdbyte	local11, local08
28cbc     19 39 32 F9 | 	getword	local14, local11, #0
28cc0     2E 38 0E F2 | 	cmp	local14, #46 wz
28cc4     0C 20 86 F1 | 	sub	local02, #12
28cc8     10 3A 06 A6 |  if_e	mov	local15, #16
28ccc     19 39 32 F9 | 	getword	local14, local11, #0
28cd0     41 38 16 F2 | 	cmp	local14, #65 wc
28cd4     30 00 90 CD |  if_b	jmp	#LR__4160
28cd8     19 2D 32 F9 | 	getword	local08, local11, #0
28cdc     5B 2C 16 F2 | 	cmp	local08, #91 wc
28ce0     24 00 90 3D |  if_ae	jmp	#LR__4160
28ce4     1C 1E 06 F1 | 	add	local01, #28
28ce8     0F 2F 02 FB | 	rdlong	local09, local01
28cec     1C 1E 86 F1 | 	sub	local01, #28
28cf0     0C 2E 06 F1 | 	add	local09, #12
28cf4     17 31 C2 FA | 	rdbyte	local10, local09
28cf8     1D 39 E2 F8 | 	getbyte	local14, local15, #0
28cfc     1C 31 CA F7 | 	test	local10, local14 wz
28d00     19 33 32 59 |  if_ne	getword	local11, local11, #0
28d04     20 32 06 51 |  if_ne	add	local11, #32
28d08                 | LR__4160
28d08     13 39 02 F6 | 	mov	local14, local05
28d0c     1C 20 06 F1 | 	add	local02, #28
28d10     10 39 02 F1 | 	add	local14, local02
28d14     19 33 32 F9 | 	getword	local11, local11, #0
28d18     1C 33 42 FC | 	wrbyte	local11, local14
28d1c     01 28 06 F1 | 	add	local06, #1
28d20     01 26 06 F1 | 	add	local05, #1
28d24     1C 20 86 F1 | 	sub	local02, #28
28d28     68 FF 9F FD | 	jmp	#LR__4159
28d2c                 | LR__4161
28d2c                 | LR__4162
28d2c     1C 20 06 F1 | 	add	local02, #28
28d30     10 27 02 F1 | 	add	local05, local02
28d34     13 01 48 FC | 	wrbyte	#0, local05
28d38     1C 1E 06 F1 | 	add	local01, #28
28d3c     0F 25 02 FB | 	rdlong	local04, local01
28d40     1C 1E 86 F1 | 	sub	local01, #28
28d44     0C 24 06 F1 | 	add	local04, #12
28d48     12 37 CA FA | 	rdbyte	local13, local04 wz
28d4c     1C 20 86 F1 | 	sub	local02, #28
28d50     0C 20 06 A1 |  if_e	add	local02, #12
28d54     10 01 48 AC |  if_e	wrbyte	#0, local02
28d58     0C 20 86 A1 |  if_e	sub	local02, #12
28d5c                 | LR__4163
28d5c     1C 1E 06 F1 | 	add	local01, #28
28d60     0F 35 02 FB | 	rdlong	local12, local01
28d64     0B 34 06 F1 | 	add	local12, #11
28d68     1A 25 C2 FA | 	rdbyte	local04, local12
28d6c     3F 24 06 F5 | 	and	local04, #63
28d70     08 20 06 F1 | 	add	local02, #8
28d74     10 25 42 FC | 	wrbyte	local04, local02
28d78     08 20 86 F1 | 	sub	local02, #8
28d7c     0F 13 02 FB | 	rdlong	arg01, local01
28d80     1C 12 06 F1 | 	add	arg01, #28
28d84                 | ' {
28d84                 | ' 
28d84                 | ' 	return *((DWORD*)ptr);
28d84     09 FB 01 FB | 	rdlong	result1, arg01
28d88     10 FB 61 FC | 	wrlong	result1, local02
28d8c     0F 13 02 FB | 	rdlong	arg01, local01
28d90     16 12 06 F1 | 	add	arg01, #22
28d94                 | ' {
28d94                 | ' 
28d94                 | ' 	return *((WORD*)ptr);
28d94     09 FB E1 FA | 	rdword	result1, arg01
28d98     06 20 06 F1 | 	add	local02, #6
28d9c     10 FB 51 FC | 	wrword	result1, local02
28da0     0F 13 02 FB | 	rdlong	arg01, local01
28da4     18 12 06 F1 | 	add	arg01, #24
28da8                 | ' {
28da8                 | ' 
28da8                 | ' 	return *((WORD*)ptr);
28da8     09 FB E1 FA | 	rdword	result1, arg01
28dac     02 20 86 F1 | 	sub	local02, #2
28db0     10 FB 51 FC | 	wrword	result1, local02
28db4                 | LR__4164
28db4     A7 F0 03 F6 | 	mov	ptra, fp
28db8     B2 00 A0 FD | 	call	#popregs_
28dbc                 | _fatfs_cc_get_fileinfo_ret
28dbc     2D 00 64 FD | 	ret
28dc0                 | 
28dc0                 | _fatfs_cc_create_name
28dc0     0D 4A 05 F6 | 	mov	COUNT_, #13
28dc4     A8 00 A0 FD | 	call	#pushregs_
28dc8     34 F0 07 F1 | 	add	ptra, #52
28dcc     04 4E 05 F1 | 	add	fp, #4
28dd0     A7 12 62 FC | 	wrlong	arg01, fp
28dd4     04 4E 05 F1 | 	add	fp, #4
28dd8     A7 14 62 FC | 	wrlong	arg02, fp
28ddc     0A FB 01 FB | 	rdlong	result1, arg02
28de0     28 4E 05 F1 | 	add	fp, #40
28de4     A7 FA 61 FC | 	wrlong	result1, fp
28de8     2C 4E 85 F1 | 	sub	fp, #44
28dec     A7 FA 01 FB | 	rdlong	result1, fp
28df0     FD 1E 02 FB | 	rdlong	local01, result1
28df4     0C 1E 06 F1 | 	add	local01, #12
28df8     0F 21 02 FB | 	rdlong	local02, local01
28dfc     14 4E 05 F1 | 	add	fp, #20
28e00     A7 20 62 FC | 	wrlong	local02, fp
28e04     14 4E 05 F1 | 	add	fp, #20
28e08     A7 00 68 FC | 	wrlong	#0, fp
28e0c     2C 4E 85 F1 | 	sub	fp, #44
28e10                 | ' 
28e10                 | ' 
28e10                 | ' 
28e10                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
28e10                 | ' 	for (;;) {
28e10                 | LR__4170
28e10     30 4E 05 F1 | 	add	fp, #48
28e14     A7 12 02 F6 | 	mov	arg01, fp
28e18     30 4E 85 F1 | 	sub	fp, #48
28e1c     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
28e20     1C 4E 05 F1 | 	add	fp, #28
28e24     A7 FA 61 FC | 	wrlong	result1, fp
28e28     1C 4E 85 F1 | 	sub	fp, #28
28e2c     FF FF 7F FF 
28e30     FF FB 0D F2 | 	cmp	result1, ##-1 wz
28e34     06 FA 05 A6 |  if_e	mov	result1, #6
28e38     74 08 90 AD |  if_e	jmp	#LR__4210
28e3c     1C 4E 05 F1 | 	add	fp, #28
28e40     A7 1E 02 FB | 	rdlong	local01, fp
28e44     1C 4E 85 F1 | 	sub	fp, #28
28e48     80 00 00 FF 
28e4c     00 1E 16 F2 | 	cmp	local01, ##65536 wc
28e50     3C 00 90 CD |  if_b	jmp	#LR__4171
28e54     18 4E 05 F1 | 	add	fp, #24
28e58     A7 22 02 FB | 	rdlong	local03, fp
28e5c     14 4E 05 F1 | 	add	fp, #20
28e60     A7 1E 02 FB | 	rdlong	local01, fp
28e64     0F 25 02 F6 | 	mov	local04, local01
28e68     01 24 06 F1 | 	add	local04, #1
28e6c     A7 24 62 FC | 	wrlong	local04, fp
28e70     01 1E 66 F0 | 	shl	local01, #1
28e74     11 1F 02 F1 | 	add	local01, local03
28e78     10 4E 85 F1 | 	sub	fp, #16
28e7c     A7 26 02 FB | 	rdlong	local05, fp
28e80     1C 4E 85 F1 | 	sub	fp, #28
28e84     13 29 02 F6 | 	mov	local06, local05
28e88     10 28 46 F0 | 	shr	local06, #16
28e8c     0F 29 52 FC | 	wrword	local06, local01
28e90                 | LR__4171
28e90     1C 4E 05 F1 | 	add	fp, #28
28e94     A7 1E 02 FB | 	rdlong	local01, fp
28e98     08 4E 85 F1 | 	sub	fp, #8
28e9c     A7 1E 52 FC | 	wrword	local01, fp
28ea0     A7 1E E2 FA | 	rdword	local01, fp
28ea4     14 4E 85 F1 | 	sub	fp, #20
28ea8     20 1E 16 F2 | 	cmp	local01, #32 wc
28eac     B0 00 90 CD |  if_b	jmp	#LR__4173
28eb0     14 4E 05 F1 | 	add	fp, #20
28eb4     A7 1E E2 FA | 	rdword	local01, fp
28eb8     14 4E 85 F1 | 	sub	fp, #20
28ebc     2F 1E 0E F2 | 	cmp	local01, #47 wz
28ec0     14 4E 05 51 |  if_ne	add	fp, #20
28ec4     A7 24 E2 5A |  if_ne	rdword	local04, fp
28ec8     14 4E 85 51 |  if_ne	sub	fp, #20
28ecc     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
28ed0     8C 00 90 AD |  if_e	jmp	#LR__4173
28ed4     14 4E 05 F1 | 	add	fp, #20
28ed8     A7 12 E2 FA | 	rdword	arg01, fp
28edc     14 4E 85 F1 | 	sub	fp, #20
28ee0     80 12 16 F2 | 	cmp	arg01, #128 wc
28ee4     24 00 90 3D |  if_ae	jmp	#LR__4172
28ee8     77 01 00 FF 
28eec     24 12 06 F6 | 	mov	arg01, ##@LR__4832
28ef0     14 4E 05 F1 | 	add	fp, #20
28ef4     A7 14 E2 FA | 	rdword	arg02, fp
28ef8     14 4E 85 F1 | 	sub	fp, #20
28efc     FC D0 BF FD | 	call	#_fatfs_cc_strchr
28f00     00 FA 0D F2 | 	cmp	result1, #0 wz
28f04     06 FA 05 56 |  if_ne	mov	result1, #6
28f08     A4 07 90 5D |  if_ne	jmp	#LR__4210
28f0c                 | LR__4172
28f0c     2C 4E 05 F1 | 	add	fp, #44
28f10     A7 28 02 FB | 	rdlong	local06, fp
28f14     2C 4E 85 F1 | 	sub	fp, #44
28f18     FF 28 16 F2 | 	cmp	local06, #255 wc
28f1c     06 FA 05 36 |  if_ae	mov	result1, #6
28f20     8C 07 90 3D |  if_ae	jmp	#LR__4210
28f24     18 4E 05 F1 | 	add	fp, #24
28f28     A7 22 02 FB | 	rdlong	local03, fp
28f2c     14 4E 05 F1 | 	add	fp, #20
28f30     A7 20 02 FB | 	rdlong	local02, fp
28f34     10 25 02 F6 | 	mov	local04, local02
28f38     01 24 06 F1 | 	add	local04, #1
28f3c     A7 24 62 FC | 	wrlong	local04, fp
28f40     10 1F 02 F6 | 	mov	local01, local02
28f44     01 1E 66 F0 | 	shl	local01, #1
28f48     11 1F 02 F1 | 	add	local01, local03
28f4c     18 4E 85 F1 | 	sub	fp, #24
28f50     A7 28 E2 FA | 	rdword	local06, fp
28f54     14 4E 85 F1 | 	sub	fp, #20
28f58     0F 29 52 FC | 	wrword	local06, local01
28f5c     B0 FE 9F FD | 	jmp	#LR__4170
28f60                 | LR__4173
28f60     14 4E 05 F1 | 	add	fp, #20
28f64     A7 2A E2 FA | 	rdword	local07, fp
28f68     14 4E 85 F1 | 	sub	fp, #20
28f6c     20 2A 16 F2 | 	cmp	local07, #32 wc
28f70     10 4E 05 C1 |  if_b	add	fp, #16
28f74     A7 08 48 CC |  if_b	wrbyte	#4, fp
28f78     10 4E 85 C1 |  if_b	sub	fp, #16
28f7c     74 00 90 CD |  if_b	jmp	#LR__4178
28f80     97 24 48 FB | 	callpa	#(@LR__4176-@LR__4174)>>2,fcache_load_ptr_
28f84                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
28f84                 | LR__4174
28f84     30 4E 05 F1 | 	add	fp, #48
28f88     A7 24 02 FB | 	rdlong	local04, fp
28f8c     30 4E 85 F1 | 	sub	fp, #48
28f90     12 2B C2 FA | 	rdbyte	local07, local04
28f94     2F 2A 0E F2 | 	cmp	local07, #47 wz
28f98     18 00 90 AD |  if_e	jmp	#LR__4175
28f9c     30 4E 05 F1 | 	add	fp, #48
28fa0     A7 24 02 FB | 	rdlong	local04, fp
28fa4     30 4E 85 F1 | 	sub	fp, #48
28fa8     12 21 C2 FA | 	rdbyte	local02, local04
28fac     5C 20 0E F2 | 	cmp	local02, #92 wz
28fb0     18 00 90 5D |  if_ne	jmp	#LR__4177
28fb4                 | LR__4175
28fb4     30 4E 05 F1 | 	add	fp, #48
28fb8     A7 1E 02 FB | 	rdlong	local01, fp
28fbc     01 1E 06 F1 | 	add	local01, #1
28fc0     A7 1E 62 FC | 	wrlong	local01, fp
28fc4     30 4E 85 F1 | 	sub	fp, #48
28fc8     B8 FF 9F FD | 	jmp	#LR__4174
28fcc                 | LR__4176
28fcc                 | LR__4177
28fcc     10 4E 05 F1 | 	add	fp, #16
28fd0     A7 00 48 FC | 	wrbyte	#0, fp
28fd4     20 4E 05 F1 | 	add	fp, #32
28fd8     A7 28 02 FB | 	rdlong	local06, fp
28fdc     30 4E 85 F1 | 	sub	fp, #48
28fe0     14 2B C2 FA | 	rdbyte	local07, local06
28fe4     20 2A 16 F2 | 	cmp	local07, #32 wc
28fe8     10 4E 05 C1 |  if_b	add	fp, #16
28fec     A7 08 48 CC |  if_b	wrbyte	#4, fp
28ff0     10 4E 85 C1 |  if_b	sub	fp, #16
28ff4                 | LR__4178
28ff4     08 4E 05 F1 | 	add	fp, #8
28ff8     A7 2A 02 FB | 	rdlong	local07, fp
28ffc     28 4E 05 F1 | 	add	fp, #40
29000     A7 1E 02 FB | 	rdlong	local01, fp
29004     30 4E 85 F1 | 	sub	fp, #48
29008     15 1F 62 FC | 	wrlong	local01, local07
2900c     97 38 48 FB | 	callpa	#(@LR__4180-@LR__4179)>>2,fcache_load_ptr_
29010                 | ' 	}
29010                 | ' 	*path = p;
29010                 | ' #line 2862 "ff.c"
29010                 | ' 	while (di) {
29010                 | LR__4179
29010     2C 4E 05 F1 | 	add	fp, #44
29014     A7 2A 0A FB | 	rdlong	local07, fp wz
29018     2C 4E 85 F1 | 	sub	fp, #44
2901c     60 00 90 AD |  if_e	jmp	#LR__4181
29020     18 4E 05 F1 | 	add	fp, #24
29024     A7 28 02 FB | 	rdlong	local06, fp
29028     14 4E 05 F1 | 	add	fp, #20
2902c     A7 24 02 FB | 	rdlong	local04, fp
29030     01 24 86 F1 | 	sub	local04, #1
29034     01 24 66 F0 | 	shl	local04, #1
29038     14 25 02 F1 | 	add	local04, local06
2903c     12 29 E2 FA | 	rdword	local06, local04
29040     18 4E 85 F1 | 	sub	fp, #24
29044     A7 28 52 FC | 	wrword	local06, fp
29048     A7 2A E2 FA | 	rdword	local07, fp
2904c     14 4E 85 F1 | 	sub	fp, #20
29050     20 2A 0E F2 | 	cmp	local07, #32 wz
29054     14 4E 05 51 |  if_ne	add	fp, #20
29058     A7 1E E2 5A |  if_ne	rdword	local01, fp
2905c     14 4E 85 51 |  if_ne	sub	fp, #20
29060     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
29064     18 00 90 5D |  if_ne	jmp	#LR__4181
29068     2C 4E 05 F1 | 	add	fp, #44
2906c     A7 1E 02 FB | 	rdlong	local01, fp
29070     01 1E 86 F1 | 	sub	local01, #1
29074     A7 1E 62 FC | 	wrlong	local01, fp
29078     2C 4E 85 F1 | 	sub	fp, #44
2907c     90 FF 9F FD | 	jmp	#LR__4179
29080                 | LR__4180
29080                 | LR__4181
29080     18 4E 05 F1 | 	add	fp, #24
29084     A7 2C 02 FB | 	rdlong	local08, fp
29088     14 4E 05 F1 | 	add	fp, #20
2908c     A7 24 02 FB | 	rdlong	local04, fp
29090     01 24 66 F0 | 	shl	local04, #1
29094     16 25 02 F1 | 	add	local04, local08
29098     12 01 58 FC | 	wrword	#0, local04
2909c     A7 2A 0A FB | 	rdlong	local07, fp wz
290a0     2C 4E 85 F1 | 	sub	fp, #44
290a4     06 FA 05 A6 |  if_e	mov	result1, #6
290a8     04 06 90 AD |  if_e	jmp	#LR__4210
290ac                 | ' 
290ac                 | ' 
290ac                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
290ac     28 4E 05 F1 | 	add	fp, #40
290b0     A7 00 68 FC | 	wrlong	#0, fp
290b4     28 4E 85 F1 | 	sub	fp, #40
290b8     97 22 48 FB | 	callpa	#(@LR__4183-@LR__4182)>>2,fcache_load_ptr_
290bc                 | LR__4182
290bc     18 4E 05 F1 | 	add	fp, #24
290c0     A7 2E 02 FB | 	rdlong	local09, fp
290c4     10 4E 05 F1 | 	add	fp, #16
290c8     A7 30 02 FB | 	rdlong	local10, fp
290cc     28 4E 85 F1 | 	sub	fp, #40
290d0     01 30 66 F0 | 	shl	local10, #1
290d4     17 31 02 F1 | 	add	local10, local09
290d8     18 33 E2 FA | 	rdword	local11, local10
290dc     20 32 0E F2 | 	cmp	local11, #32 wz
290e0     1C 00 90 5D |  if_ne	jmp	#LR__4184
290e4     28 4E 05 F1 | 	add	fp, #40
290e8     A7 34 02 FB | 	rdlong	local12, fp
290ec     1A 27 02 F6 | 	mov	local05, local12
290f0     01 26 06 F1 | 	add	local05, #1
290f4     A7 26 62 FC | 	wrlong	local05, fp
290f8     28 4E 85 F1 | 	sub	fp, #40
290fc     BC FF 9F FD | 	jmp	#LR__4182
29100                 | LR__4183
29100                 | LR__4184
29100     28 4E 05 F1 | 	add	fp, #40
29104     A7 2A 02 FB | 	rdlong	local07, fp
29108     28 4E 85 F1 | 	sub	fp, #40
2910c     01 2A 16 F2 | 	cmp	local07, #1 wc
29110     28 00 90 3D |  if_ae	jmp	#LR__4185
29114     18 4E 05 F1 | 	add	fp, #24
29118     A7 22 02 FB | 	rdlong	local03, fp
2911c     10 4E 05 F1 | 	add	fp, #16
29120     A7 2E 02 FB | 	rdlong	local09, fp
29124     28 4E 85 F1 | 	sub	fp, #40
29128     01 2E 66 F0 | 	shl	local09, #1
2912c     11 2F 02 F1 | 	add	local09, local03
29130     17 1F E2 FA | 	rdword	local01, local09
29134     2E 1E 0E F2 | 	cmp	local01, #46 wz
29138     14 00 90 5D |  if_ne	jmp	#LR__4186
2913c                 | LR__4185
2913c     10 4E 05 F1 | 	add	fp, #16
29140     A7 2A C2 FA | 	rdbyte	local07, fp
29144     03 2A 46 F5 | 	or	local07, #3
29148     A7 2A 42 FC | 	wrbyte	local07, fp
2914c     10 4E 85 F1 | 	sub	fp, #16
29150                 | LR__4186
29150     97 2C 48 FB | 	callpa	#(@LR__4188-@LR__4187)>>2,fcache_load_ptr_
29154                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
29154                 | LR__4187
29154     2C 4E 05 F1 | 	add	fp, #44
29158     A7 2A 02 FB | 	rdlong	local07, fp
2915c     2C 4E 85 F1 | 	sub	fp, #44
29160     01 2A 16 F2 | 	cmp	local07, #1 wc
29164     44 00 90 CD |  if_b	jmp	#LR__4189
29168     18 4E 05 F1 | 	add	fp, #24
2916c     A7 28 02 FB | 	rdlong	local06, fp
29170     14 4E 05 F1 | 	add	fp, #20
29174     A7 22 02 FB | 	rdlong	local03, fp
29178     2C 4E 85 F1 | 	sub	fp, #44
2917c     01 22 86 F1 | 	sub	local03, #1
29180     01 22 66 F0 | 	shl	local03, #1
29184     14 23 02 F1 | 	add	local03, local06
29188     11 1F E2 FA | 	rdword	local01, local03
2918c     2E 1E 0E F2 | 	cmp	local01, #46 wz
29190     18 00 90 AD |  if_e	jmp	#LR__4189
29194     2C 4E 05 F1 | 	add	fp, #44
29198     A7 1E 02 FB | 	rdlong	local01, fp
2919c     01 1E 86 F1 | 	sub	local01, #1
291a0     A7 1E 62 FC | 	wrlong	local01, fp
291a4     2C 4E 85 F1 | 	sub	fp, #44
291a8     A8 FF 9F FD | 	jmp	#LR__4187
291ac                 | LR__4188
291ac                 | LR__4189
291ac     04 4E 05 F1 | 	add	fp, #4
291b0     A7 12 02 FB | 	rdlong	arg01, fp
291b4     04 4E 85 F1 | 	sub	fp, #4
291b8     20 12 06 F1 | 	add	arg01, #32
291bc     20 14 06 F6 | 	mov	arg02, #32
291c0     0B 16 06 F6 | 	mov	arg03, #11
291c4     09 37 02 F6 | 	mov	local13, arg01
291c8     98 00 A0 FD | 	call	#\builtin_bytefill_
291cc     1B FB 01 F6 | 	mov	result1, local13
291d0     0C 4E 05 F1 | 	add	fp, #12
291d4     A7 00 48 FC | 	wrbyte	#0, fp
291d8     A7 2A C2 FA | 	rdbyte	local07, fp
291dc     14 4E 05 F1 | 	add	fp, #20
291e0     A7 2A 62 FC | 	wrlong	local07, fp
291e4     04 4E 05 F1 | 	add	fp, #4
291e8     A7 10 68 FC | 	wrlong	#8, fp
291ec     24 4E 85 F1 | 	sub	fp, #36
291f0                 | ' 
291f0                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
291f0                 | ' 	i = b = 0; ni = 8;
291f0                 | ' 	for (;;) {
291f0                 | LR__4190
291f0     18 4E 05 F1 | 	add	fp, #24
291f4     A7 22 02 FB | 	rdlong	local03, fp
291f8     10 4E 05 F1 | 	add	fp, #16
291fc     A7 2E 02 FB | 	rdlong	local09, fp
29200     17 25 02 F6 | 	mov	local04, local09
29204     01 24 06 F1 | 	add	local04, #1
29208     A7 24 62 FC | 	wrlong	local04, fp
2920c     01 2E 66 F0 | 	shl	local09, #1
29210     11 2F 02 F1 | 	add	local09, local03
29214     17 29 E2 FA | 	rdword	local06, local09
29218     14 4E 85 F1 | 	sub	fp, #20
2921c     A7 28 52 FC | 	wrword	local06, fp
29220     A7 2A EA FA | 	rdword	local07, fp wz
29224     14 4E 85 F1 | 	sub	fp, #20
29228     74 03 90 AD |  if_e	jmp	#LR__4206
2922c     14 4E 05 F1 | 	add	fp, #20
29230     A7 2A E2 FA | 	rdword	local07, fp
29234     14 4E 85 F1 | 	sub	fp, #20
29238     20 2A 0E F2 | 	cmp	local07, #32 wz
2923c     30 00 90 AD |  if_e	jmp	#LR__4191
29240     14 4E 05 F1 | 	add	fp, #20
29244     A7 1E E2 FA | 	rdword	local01, fp
29248     14 4E 85 F1 | 	sub	fp, #20
2924c     2E 1E 0E F2 | 	cmp	local01, #46 wz
29250     34 00 90 5D |  if_ne	jmp	#LR__4192
29254     28 4E 05 F1 | 	add	fp, #40
29258     A7 24 02 FB | 	rdlong	local04, fp
2925c     04 4E 05 F1 | 	add	fp, #4
29260     A7 30 02 FB | 	rdlong	local10, fp
29264     2C 4E 85 F1 | 	sub	fp, #44
29268     18 25 0A F2 | 	cmp	local04, local10 wz
2926c     18 00 90 AD |  if_e	jmp	#LR__4192
29270                 | LR__4191
29270     10 4E 05 F1 | 	add	fp, #16
29274     A7 2A C2 FA | 	rdbyte	local07, fp
29278     03 2A 46 F5 | 	or	local07, #3
2927c     A7 2A 42 FC | 	wrbyte	local07, fp
29280     10 4E 85 F1 | 	sub	fp, #16
29284                 | ' 			cf |=  0x01  |  0x02 ;
29284                 | ' 			continue;
29284     68 FF 9F FD | 	jmp	#LR__4190
29288                 | LR__4192
29288     20 4E 05 F1 | 	add	fp, #32
2928c     A7 2A 02 FB | 	rdlong	local07, fp
29290     04 4E 05 F1 | 	add	fp, #4
29294     A7 1E 02 FB | 	rdlong	local01, fp
29298     24 4E 85 F1 | 	sub	fp, #36
2929c     0F 2B 12 F2 | 	cmp	local07, local01 wc
292a0     1C 00 90 3D |  if_ae	jmp	#LR__4193
292a4     28 4E 05 F1 | 	add	fp, #40
292a8     A7 2C 02 FB | 	rdlong	local08, fp
292ac     04 4E 05 F1 | 	add	fp, #4
292b0     A7 30 02 FB | 	rdlong	local10, fp
292b4     2C 4E 85 F1 | 	sub	fp, #44
292b8     18 2D 0A F2 | 	cmp	local08, local10 wz
292bc     B0 00 90 5D |  if_ne	jmp	#LR__4195
292c0                 | LR__4193
292c0     24 4E 05 F1 | 	add	fp, #36
292c4     A7 2A 02 FB | 	rdlong	local07, fp
292c8     24 4E 85 F1 | 	sub	fp, #36
292cc     0B 2A 0E F2 | 	cmp	local07, #11 wz
292d0     18 00 90 5D |  if_ne	jmp	#LR__4194
292d4     10 4E 05 F1 | 	add	fp, #16
292d8     A7 2A C2 FA | 	rdbyte	local07, fp
292dc     03 2A 46 F5 | 	or	local07, #3
292e0     A7 2A 42 FC | 	wrbyte	local07, fp
292e4     10 4E 85 F1 | 	sub	fp, #16
292e8                 | ' 				cf |=  0x01  |  0x02 ;
292e8                 | ' 				break;
292e8     B4 02 90 FD | 	jmp	#LR__4206
292ec                 | LR__4194
292ec     28 4E 05 F1 | 	add	fp, #40
292f0     A7 2A 02 FB | 	rdlong	local07, fp
292f4     04 4E 05 F1 | 	add	fp, #4
292f8     A7 1E 02 FB | 	rdlong	local01, fp
292fc     2C 4E 85 F1 | 	sub	fp, #44
29300     0F 2B 0A F2 | 	cmp	local07, local01 wz
29304     10 4E 05 51 |  if_ne	add	fp, #16
29308     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2930c     03 2A 46 55 |  if_ne	or	local07, #3
29310     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
29314     10 4E 85 51 |  if_ne	sub	fp, #16
29318     28 4E 05 F1 | 	add	fp, #40
2931c     A7 2A 02 FB | 	rdlong	local07, fp
29320     04 4E 05 F1 | 	add	fp, #4
29324     A7 20 02 FB | 	rdlong	local02, fp
29328     2C 4E 85 F1 | 	sub	fp, #44
2932c     10 2B 1A F2 | 	cmp	local07, local02 wcz
29330     6C 02 90 1D |  if_a	jmp	#LR__4206
29334     2C 4E 05 F1 | 	add	fp, #44
29338     A7 2A 02 FB | 	rdlong	local07, fp
2933c     04 4E 85 F1 | 	sub	fp, #4
29340     A7 2A 62 FC | 	wrlong	local07, fp
29344     08 4E 85 F1 | 	sub	fp, #8
29348     A7 10 68 FC | 	wrlong	#8, fp
2934c     04 4E 05 F1 | 	add	fp, #4
29350     A7 16 68 FC | 	wrlong	#11, fp
29354     18 4E 85 F1 | 	sub	fp, #24
29358     A7 32 C2 FA | 	rdbyte	local11, fp
2935c     19 2B E2 F8 | 	getbyte	local07, local11, #0
29360     02 2A 66 F0 | 	shl	local07, #2
29364     A7 2A 42 FC | 	wrbyte	local07, fp
29368     0C 4E 85 F1 | 	sub	fp, #12
2936c                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
2936c                 | ' 			continue;
2936c     80 FE 9F FD | 	jmp	#LR__4190
29370                 | LR__4195
29370     14 4E 05 F1 | 	add	fp, #20
29374     A7 2A E2 FA | 	rdword	local07, fp
29378     14 4E 85 F1 | 	sub	fp, #20
2937c     80 2A 16 F2 | 	cmp	local07, #128 wc
29380     6C 00 90 CD |  if_b	jmp	#LR__4197
29384     10 4E 05 F1 | 	add	fp, #16
29388     A7 2A C2 FA | 	rdbyte	local07, fp
2938c     02 2A 46 F5 | 	or	local07, #2
29390     A7 2A 42 FC | 	wrbyte	local07, fp
29394     04 4E 05 F1 | 	add	fp, #4
29398     A7 12 E2 FA | 	rdword	arg01, fp
2939c     14 4E 85 F1 | 	sub	fp, #20
293a0     01 00 00 FF 
293a4     52 15 06 F6 | 	mov	arg02, ##850
293a8     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
293ac     14 4E 05 F1 | 	add	fp, #20
293b0     A7 FA 51 FC | 	wrword	result1, fp
293b4     A7 2A E2 FA | 	rdword	local07, fp
293b8     14 4E 85 F1 | 	sub	fp, #20
293bc     80 2A CE F7 | 	test	local07, #128 wz
293c0     2C 00 90 AD |  if_e	jmp	#LR__4196
293c4     14 4E 05 F1 | 	add	fp, #20
293c8     A7 20 E2 FA | 	rdword	local02, fp
293cc     7F 20 06 F5 | 	and	local02, #127
293d0     01 00 00 FF 
293d4     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
293d8     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
293dc     10 2B C2 FA | 	rdbyte	local07, local02
293e0     A7 2A 52 FC | 	wrword	local07, fp
293e4     14 4E 85 F1 | 	sub	fp, #20
293e8     01 00 00 FF 
293ec     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
293f0                 | LR__4196
293f0                 | LR__4197
293f0     14 4E 05 F1 | 	add	fp, #20
293f4     A7 2A E2 FA | 	rdword	local07, fp
293f8     14 4E 85 F1 | 	sub	fp, #20
293fc     00 2B 16 F2 | 	cmp	local07, #256 wc
29400     88 00 90 CD |  if_b	jmp	#LR__4199
29404     24 4E 05 F1 | 	add	fp, #36
29408     A7 2A 02 FB | 	rdlong	local07, fp
2940c     01 2A 86 F1 | 	sub	local07, #1
29410     04 4E 85 F1 | 	sub	fp, #4
29414     A7 20 02 FB | 	rdlong	local02, fp
29418     20 4E 85 F1 | 	sub	fp, #32
2941c     15 21 12 F2 | 	cmp	local02, local07 wc
29420     2C 00 90 CD |  if_b	jmp	#LR__4198
29424     10 4E 05 F1 | 	add	fp, #16
29428     A7 32 C2 FA | 	rdbyte	local11, fp
2942c     19 2B E2 F8 | 	getbyte	local07, local11, #0
29430     03 2A 46 F5 | 	or	local07, #3
29434     A7 2A 42 FC | 	wrbyte	local07, fp
29438     14 4E 05 F1 | 	add	fp, #20
2943c     A7 2A 02 FB | 	rdlong	local07, fp
29440     04 4E 85 F1 | 	sub	fp, #4
29444     A7 2A 62 FC | 	wrlong	local07, fp
29448     20 4E 85 F1 | 	sub	fp, #32
2944c                 | ' 				cf |=  0x01  |  0x02 ;
2944c                 | ' 				i = ni; continue;
2944c     A0 FD 9F FD | 	jmp	#LR__4190
29450                 | LR__4198
29450     04 4E 05 F1 | 	add	fp, #4
29454     A7 2E 02 FB | 	rdlong	local09, fp
29458     1C 4E 05 F1 | 	add	fp, #28
2945c     A7 30 02 FB | 	rdlong	local10, fp
29460     18 25 02 F6 | 	mov	local04, local10
29464     01 24 06 F1 | 	add	local04, #1
29468     A7 24 62 FC | 	wrlong	local04, fp
2946c     20 2E 06 F1 | 	add	local09, #32
29470     17 31 02 F1 | 	add	local10, local09
29474     0C 4E 85 F1 | 	sub	fp, #12
29478     A7 22 E2 FA | 	rdword	local03, fp
2947c     14 4E 85 F1 | 	sub	fp, #20
29480     08 22 46 F0 | 	shr	local03, #8
29484     18 23 42 FC | 	wrbyte	local03, local10
29488     D4 00 90 FD | 	jmp	#LR__4205
2948c                 | LR__4199
2948c     14 4E 05 F1 | 	add	fp, #20
29490     A7 2A EA FA | 	rdword	local07, fp wz
29494     14 4E 85 F1 | 	sub	fp, #20
29498     20 00 90 AD |  if_e	jmp	#LR__4200
2949c     77 01 00 FF 
294a0     2D 12 06 F6 | 	mov	arg01, ##@LR__4833
294a4     14 4E 05 F1 | 	add	fp, #20
294a8     A7 14 E2 FA | 	rdword	arg02, fp
294ac     14 4E 85 F1 | 	sub	fp, #20
294b0     48 CB BF FD | 	call	#_fatfs_cc_strchr
294b4     00 FA 0D F2 | 	cmp	result1, #0 wz
294b8     20 00 90 AD |  if_e	jmp	#LR__4201
294bc                 | LR__4200
294bc     14 4E 05 F1 | 	add	fp, #20
294c0     A7 BE 58 FC | 	wrword	#95, fp
294c4     04 4E 85 F1 | 	sub	fp, #4
294c8     A7 2A C2 FA | 	rdbyte	local07, fp
294cc     03 2A 46 F5 | 	or	local07, #3
294d0     A7 2A 42 FC | 	wrbyte	local07, fp
294d4     10 4E 85 F1 | 	sub	fp, #16
294d8     84 00 90 FD | 	jmp	#LR__4204
294dc                 | LR__4201
294dc     14 4E 05 F1 | 	add	fp, #20
294e0     A7 2A E2 FA | 	rdword	local07, fp
294e4     14 4E 85 F1 | 	sub	fp, #20
294e8     41 2A 16 F2 | 	cmp	local07, #65 wc
294ec     24 00 90 CD |  if_b	jmp	#LR__4202
294f0     14 4E 05 F1 | 	add	fp, #20
294f4     A7 1E E2 FA | 	rdword	local01, fp
294f8     14 4E 85 F1 | 	sub	fp, #20
294fc     5B 1E 16 F2 | 	cmp	local01, #91 wc
29500     0C 4E 05 C1 |  if_b	add	fp, #12
29504     A7 2A C2 CA |  if_b	rdbyte	local07, fp
29508     02 2A 46 C5 |  if_b	or	local07, #2
2950c     A7 2A 42 CC |  if_b	wrbyte	local07, fp
29510     0C 4E 85 C1 |  if_b	sub	fp, #12
29514                 | LR__4202
29514     14 4E 05 F1 | 	add	fp, #20
29518     A7 2A E2 FA | 	rdword	local07, fp
2951c     14 4E 85 F1 | 	sub	fp, #20
29520     61 2A 16 F2 | 	cmp	local07, #97 wc
29524     38 00 90 CD |  if_b	jmp	#LR__4203
29528     14 4E 05 F1 | 	add	fp, #20
2952c     A7 1E E2 FA | 	rdword	local01, fp
29530     14 4E 85 F1 | 	sub	fp, #20
29534     7B 1E 16 F2 | 	cmp	local01, #123 wc
29538     24 00 90 3D |  if_ae	jmp	#LR__4203
2953c     0C 4E 05 F1 | 	add	fp, #12
29540     A7 2A C2 FA | 	rdbyte	local07, fp
29544     01 2A 46 F5 | 	or	local07, #1
29548     A7 2A 42 FC | 	wrbyte	local07, fp
2954c     08 4E 05 F1 | 	add	fp, #8
29550     A7 2A E2 FA | 	rdword	local07, fp
29554     20 2A 86 F1 | 	sub	local07, #32
29558     A7 2A 52 FC | 	wrword	local07, fp
2955c     14 4E 85 F1 | 	sub	fp, #20
29560                 | LR__4203
29560                 | LR__4204
29560                 | LR__4205
29560     04 4E 05 F1 | 	add	fp, #4
29564     A7 32 02 FB | 	rdlong	local11, fp
29568     19 2F 02 F6 | 	mov	local09, local11
2956c     1C 4E 05 F1 | 	add	fp, #28
29570     A7 20 02 FB | 	rdlong	local02, fp
29574     10 25 02 F6 | 	mov	local04, local02
29578     01 24 06 F1 | 	add	local04, #1
2957c     A7 24 62 FC | 	wrlong	local04, fp
29580     10 31 02 F6 | 	mov	local10, local02
29584     20 2E 06 F1 | 	add	local09, #32
29588     17 31 02 F1 | 	add	local10, local09
2958c     0C 4E 85 F1 | 	sub	fp, #12
29590     A7 22 E2 FA | 	rdword	local03, fp
29594     14 4E 85 F1 | 	sub	fp, #20
29598     18 23 42 FC | 	wrbyte	local03, local10
2959c     50 FC 9F FD | 	jmp	#LR__4190
295a0                 | LR__4206
295a0     04 4E 05 F1 | 	add	fp, #4
295a4     A7 32 02 FB | 	rdlong	local11, fp
295a8     04 4E 85 F1 | 	sub	fp, #4
295ac     20 32 06 F1 | 	add	local11, #32
295b0     19 2B C2 FA | 	rdbyte	local07, local11
295b4     E5 2A 0E F2 | 	cmp	local07, #229 wz
295b8     04 4E 05 A1 |  if_e	add	fp, #4
295bc     A7 2A 02 AB |  if_e	rdlong	local07, fp
295c0     04 4E 85 A1 |  if_e	sub	fp, #4
295c4     20 2A 06 A1 |  if_e	add	local07, #32
295c8     15 0B 48 AC |  if_e	wrbyte	#5, local07
295cc     24 4E 05 F1 | 	add	fp, #36
295d0     A7 2A 02 FB | 	rdlong	local07, fp
295d4     24 4E 85 F1 | 	sub	fp, #36
295d8     08 2A 0E F2 | 	cmp	local07, #8 wz
295dc     0C 4E 05 A1 |  if_e	add	fp, #12
295e0     A7 2A C2 AA |  if_e	rdbyte	local07, fp
295e4     02 2A 66 A0 |  if_e	shl	local07, #2
295e8     A7 2A 42 AC |  if_e	wrbyte	local07, fp
295ec     0C 4E 85 A1 |  if_e	sub	fp, #12
295f0     0C 4E 05 F1 | 	add	fp, #12
295f4     A7 2A C2 FA | 	rdbyte	local07, fp
295f8     0C 4E 85 F1 | 	sub	fp, #12
295fc     0C 2A 06 F5 | 	and	local07, #12
29600     0C 2A 0E F2 | 	cmp	local07, #12 wz
29604     18 00 90 AD |  if_e	jmp	#LR__4207
29608     0C 4E 05 F1 | 	add	fp, #12
2960c     A7 1E C2 FA | 	rdbyte	local01, fp
29610     0C 4E 85 F1 | 	sub	fp, #12
29614     03 1E 06 F5 | 	and	local01, #3
29618     03 1E 0E F2 | 	cmp	local01, #3 wz
2961c     14 00 90 5D |  if_ne	jmp	#LR__4208
29620                 | LR__4207
29620     10 4E 05 F1 | 	add	fp, #16
29624     A7 2A C2 FA | 	rdbyte	local07, fp
29628     02 2A 46 F5 | 	or	local07, #2
2962c     A7 2A 42 FC | 	wrbyte	local07, fp
29630     10 4E 85 F1 | 	sub	fp, #16
29634                 | LR__4208
29634     10 4E 05 F1 | 	add	fp, #16
29638     A7 2A C2 FA | 	rdbyte	local07, fp
2963c     10 4E 85 F1 | 	sub	fp, #16
29640     02 2A CE F7 | 	test	local07, #2 wz
29644     48 00 90 5D |  if_ne	jmp	#LR__4209
29648     0C 4E 05 F1 | 	add	fp, #12
2964c     A7 2A C2 FA | 	rdbyte	local07, fp
29650     0C 4E 85 F1 | 	sub	fp, #12
29654     01 2A CE F7 | 	test	local07, #1 wz
29658     10 4E 05 51 |  if_ne	add	fp, #16
2965c     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
29660     10 2A 46 55 |  if_ne	or	local07, #16
29664     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
29668     10 4E 85 51 |  if_ne	sub	fp, #16
2966c     0C 4E 05 F1 | 	add	fp, #12
29670     A7 2A C2 FA | 	rdbyte	local07, fp
29674     0C 4E 85 F1 | 	sub	fp, #12
29678     04 2A CE F7 | 	test	local07, #4 wz
2967c     10 4E 05 51 |  if_ne	add	fp, #16
29680     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
29684     08 2A 46 55 |  if_ne	or	local07, #8
29688     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2968c     10 4E 85 51 |  if_ne	sub	fp, #16
29690                 | LR__4209
29690     04 4E 05 F1 | 	add	fp, #4
29694     A7 2A 02 FB | 	rdlong	local07, fp
29698     0C 4E 05 F1 | 	add	fp, #12
2969c     A7 1E C2 FA | 	rdbyte	local01, fp
296a0     10 4E 85 F1 | 	sub	fp, #16
296a4     2B 2A 06 F1 | 	add	local07, #43
296a8     15 1F 42 FC | 	wrbyte	local01, local07
296ac                 | ' 	}
296ac                 | ' 
296ac                 | ' 	dp->fn[ 11 ] = cf;
296ac                 | ' 
296ac                 | ' 	return FR_OK;
296ac     00 FA 05 F6 | 	mov	result1, #0
296b0                 | LR__4210
296b0     A7 F0 03 F6 | 	mov	ptra, fp
296b4     B2 00 A0 FD | 	call	#popregs_
296b8                 | _fatfs_cc_create_name_ret
296b8     2D 00 64 FD | 	ret
296bc                 | 
296bc                 | _fatfs_cc_follow_path
296bc     02 4A 05 F6 | 	mov	COUNT_, #2
296c0     A8 00 A0 FD | 	call	#pushregs_
296c4     18 F0 07 F1 | 	add	ptra, #24
296c8     04 4E 05 F1 | 	add	fp, #4
296cc     A7 12 62 FC | 	wrlong	arg01, fp
296d0     04 4E 05 F1 | 	add	fp, #4
296d4     A7 14 62 FC | 	wrlong	arg02, fp
296d8     04 4E 85 F1 | 	sub	fp, #4
296dc     A7 FA 01 FB | 	rdlong	result1, fp
296e0     FD 1E 02 FB | 	rdlong	local01, result1
296e4     10 4E 05 F1 | 	add	fp, #16
296e8     A7 1E 62 FC | 	wrlong	local01, fp
296ec     14 4E 85 F1 | 	sub	fp, #20
296f0     97 24 48 FB | 	callpa	#(@LR__4222-@LR__4220)>>2,fcache_load_ptr_
296f4                 | ' )
296f4                 | ' {
296f4                 | ' 	FRESULT res;
296f4                 | ' 	BYTE ns;
296f4                 | ' 	FATFS *fs = dp->obj.fs;
296f4                 | ' #line 3034 "ff.c"
296f4                 | ' 	{
296f4                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
296f4                 | LR__4220
296f4     08 4E 05 F1 | 	add	fp, #8
296f8     A7 1E 02 FB | 	rdlong	local01, fp
296fc     08 4E 85 F1 | 	sub	fp, #8
29700     0F 1F C2 FA | 	rdbyte	local01, local01
29704     2F 1E 0E F2 | 	cmp	local01, #47 wz
29708     18 00 90 AD |  if_e	jmp	#LR__4221
2970c     08 4E 05 F1 | 	add	fp, #8
29710     A7 1E 02 FB | 	rdlong	local01, fp
29714     08 4E 85 F1 | 	sub	fp, #8
29718     0F 1F C2 FA | 	rdbyte	local01, local01
2971c     5C 1E 0E F2 | 	cmp	local01, #92 wz
29720     18 00 90 5D |  if_ne	jmp	#LR__4223
29724                 | LR__4221
29724     08 4E 05 F1 | 	add	fp, #8
29728     A7 1E 02 FB | 	rdlong	local01, fp
2972c     01 1E 06 F1 | 	add	local01, #1
29730     A7 1E 62 FC | 	wrlong	local01, fp
29734     08 4E 85 F1 | 	sub	fp, #8
29738     B8 FF 9F FD | 	jmp	#LR__4220
2973c                 | LR__4222
2973c                 | LR__4223
2973c     04 4E 05 F1 | 	add	fp, #4
29740     A7 1E 02 FB | 	rdlong	local01, fp
29744     08 1E 06 F1 | 	add	local01, #8
29748     0F 01 68 FC | 	wrlong	#0, local01
2974c     04 4E 05 F1 | 	add	fp, #4
29750     A7 1E 02 FB | 	rdlong	local01, fp
29754     08 4E 85 F1 | 	sub	fp, #8
29758     0F 1F C2 FA | 	rdbyte	local01, local01
2975c     20 1E 16 F2 | 	cmp	local01, #32 wc
29760     30 00 90 3D |  if_ae	jmp	#LR__4224
29764     04 4E 05 F1 | 	add	fp, #4
29768     A7 1E 02 FB | 	rdlong	local01, fp
2976c     2B 1E 06 F1 | 	add	local01, #43
29770     0F 01 49 FC | 	wrbyte	#128, local01
29774     A7 12 02 FB | 	rdlong	arg01, fp
29778     04 4E 85 F1 | 	sub	fp, #4
2977c     00 14 06 F6 | 	mov	arg02, #0
29780     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
29784     0C 4E 05 F1 | 	add	fp, #12
29788     A7 FA 61 FC | 	wrlong	result1, fp
2978c     0C 4E 85 F1 | 	sub	fp, #12
29790     1C 01 90 FD | 	jmp	#LR__4228
29794                 | LR__4224
29794                 | ' 		for (;;) {
29794                 | LR__4225
29794     04 4E 05 F1 | 	add	fp, #4
29798     A7 12 02 FB | 	rdlong	arg01, fp
2979c     04 4E 05 F1 | 	add	fp, #4
297a0     A7 14 02 F6 | 	mov	arg02, fp
297a4     08 4E 85 F1 | 	sub	fp, #8
297a8     14 F6 BF FD | 	call	#_fatfs_cc_create_name
297ac     0C 4E 05 F1 | 	add	fp, #12
297b0     A7 FA 61 FC | 	wrlong	result1, fp
297b4     00 FA 4D F2 | 	cmps	result1, #0 wz
297b8     0C 4E 85 F1 | 	sub	fp, #12
297bc     F0 00 90 5D |  if_ne	jmp	#LR__4227
297c0     04 4E 05 F1 | 	add	fp, #4
297c4     A7 12 02 FB | 	rdlong	arg01, fp
297c8     04 4E 85 F1 | 	sub	fp, #4
297cc     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
297d0     0C 4E 05 F1 | 	add	fp, #12
297d4     A7 FA 61 FC | 	wrlong	result1, fp
297d8     08 4E 85 F1 | 	sub	fp, #8
297dc     A7 1E 02 FB | 	rdlong	local01, fp
297e0     2B 1E 06 F1 | 	add	local01, #43
297e4     0F 1F C2 FA | 	rdbyte	local01, local01
297e8     0C 4E 05 F1 | 	add	fp, #12
297ec     A7 1E 42 FC | 	wrbyte	local01, fp
297f0     04 4E 85 F1 | 	sub	fp, #4
297f4     A7 1E 0A FB | 	rdlong	local01, fp wz
297f8     0C 4E 85 F1 | 	sub	fp, #12
297fc     34 00 90 AD |  if_e	jmp	#LR__4226
29800     0C 4E 05 F1 | 	add	fp, #12
29804     A7 1E 02 FB | 	rdlong	local01, fp
29808     0C 4E 85 F1 | 	sub	fp, #12
2980c     04 1E 0E F2 | 	cmp	local01, #4 wz
29810     9C 00 90 5D |  if_ne	jmp	#LR__4227
29814     10 4E 05 F1 | 	add	fp, #16
29818     A7 1E C2 FA | 	rdbyte	local01, fp
2981c     10 4E 85 F1 | 	sub	fp, #16
29820     04 1E CE F7 | 	test	local01, #4 wz
29824     0C 4E 05 A1 |  if_e	add	fp, #12
29828     A7 0A 68 AC |  if_e	wrlong	#5, fp
2982c     0C 4E 85 A1 |  if_e	sub	fp, #12
29830                 | ' 					}
29830                 | ' 				}
29830                 | ' 				break;
29830     7C 00 90 FD | 	jmp	#LR__4227
29834                 | LR__4226
29834     10 4E 05 F1 | 	add	fp, #16
29838     A7 1E C2 FA | 	rdbyte	local01, fp
2983c     10 4E 85 F1 | 	sub	fp, #16
29840     04 1E CE F7 | 	test	local01, #4 wz
29844     68 00 90 5D |  if_ne	jmp	#LR__4227
29848     04 4E 05 F1 | 	add	fp, #4
2984c     A7 1E 02 FB | 	rdlong	local01, fp
29850     04 4E 85 F1 | 	sub	fp, #4
29854     06 1E 06 F1 | 	add	local01, #6
29858     0F 1F C2 FA | 	rdbyte	local01, local01
2985c     10 1E CE F7 | 	test	local01, #16 wz
29860     0C 4E 05 A1 |  if_e	add	fp, #12
29864     A7 0A 68 AC |  if_e	wrlong	#5, fp
29868     0C 4E 85 A1 |  if_e	sub	fp, #12
2986c                 | ' 				res = FR_NO_PATH; break;
2986c     40 00 90 AD |  if_e	jmp	#LR__4227
29870     04 4E 05 F1 | 	add	fp, #4
29874     A7 20 02 FB | 	rdlong	local02, fp
29878     10 1F 02 F6 | 	mov	local01, local02
2987c     10 4E 05 F1 | 	add	fp, #16
29880     A7 14 02 FB | 	rdlong	arg02, fp
29884     0A 13 02 F6 | 	mov	arg01, arg02
29888     34 14 06 F1 | 	add	arg02, #52
2988c     14 4E 85 F1 | 	sub	fp, #20
29890     10 20 06 F1 | 	add	local02, #16
29894     10 21 02 FB | 	rdlong	local02, local02
29898     FF 21 06 F5 | 	and	local02, #511
2989c     10 15 02 F1 | 	add	arg02, local02
298a0     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
298a4     08 1E 06 F1 | 	add	local01, #8
298a8     0F FB 61 FC | 	wrlong	result1, local01
298ac     E4 FE 9F FD | 	jmp	#LR__4225
298b0                 | LR__4227
298b0                 | LR__4228
298b0                 | ' 			}
298b0                 | ' #line 3090 "ff.c"
298b0                 | ' 			{
298b0                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
298b0                 | ' 			}
298b0                 | ' 		}
298b0                 | ' 	}
298b0                 | ' 
298b0                 | ' 	return res;
298b0     0C 4E 05 F1 | 	add	fp, #12
298b4     A7 FA 01 FB | 	rdlong	result1, fp
298b8     0C 4E 85 F1 | 	sub	fp, #12
298bc     A7 F0 03 F6 | 	mov	ptra, fp
298c0     B2 00 A0 FD | 	call	#popregs_
298c4                 | _fatfs_cc_follow_path_ret
298c4     2D 00 64 FD | 	ret
298c8                 | 
298c8                 | _fatfs_cc_get_ldnumber
298c8     01 00 66 F6 | 	neg	_var01, #1
298cc     09 03 0A FB | 	rdlong	_var02, arg01 wz
298d0     01 05 02 F6 | 	mov	_var03, _var02
298d4     01 FA 65 A6 |  if_e	neg	result1, #1
298d8     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
298dc     97 10 48 FB | 	callpa	#(@LR__4231-@LR__4230)>>2,fcache_load_ptr_
298e0                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
298e0                 | LR__4230
298e0     02 07 C2 FA | 	rdbyte	_var04, _var03
298e4     03 FB E1 F8 | 	getbyte	result1, _var04, #0
298e8     20 FA 15 F2 | 	cmp	result1, #32 wc
298ec     01 04 06 F1 | 	add	_var03, #1
298f0     03 09 02 36 |  if_ae	mov	_var05, _var04
298f4     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
298f8     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
298fc     E0 FF 9F 1D |  if_a	jmp	#LR__4230
29900                 | LR__4231
29900     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
29904     3A 06 0E F2 | 	cmp	_var04, #58 wz
29908     40 00 90 5D |  if_ne	jmp	#LR__4233
2990c     01 0A 06 F6 | 	mov	_var06, #1
29910     01 09 C2 FA | 	rdbyte	_var05, _var02
29914     30 08 16 F2 | 	cmp	_var05, #48 wc
29918     1C 00 90 CD |  if_b	jmp	#LR__4232
2991c     01 09 C2 FA | 	rdbyte	_var05, _var02
29920     3A 08 16 F2 | 	cmp	_var05, #58 wc
29924     01 0D 02 C6 |  if_b	mov	_var07, _var02
29928     02 0C 06 C1 |  if_b	add	_var07, #2
2992c     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
29930     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
29934     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
29938                 | LR__4232
29938     01 0A 56 F2 | 	cmps	_var06, #1 wc
2993c     05 01 02 C6 |  if_b	mov	_var01, _var06
29940     09 05 62 CC |  if_b	wrlong	_var03, arg01
29944                 | ' 			vol = i;
29944                 | ' 			*path = tt;
29944                 | ' 		}
29944                 | ' 		return vol;
29944     00 FB 01 F6 | 	mov	result1, _var01
29948     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
2994c                 | LR__4233
2994c                 | ' 	}
2994c                 | ' #line 3170 "ff.c"
2994c                 | ' 	vol = 0;
2994c                 | ' 
2994c                 | ' 	return vol;
2994c     00 FA 05 F6 | 	mov	result1, #0
29950                 | _fatfs_cc_get_ldnumber_ret
29950     2D 00 64 FD | 	ret
29954                 | 
29954                 | _fatfs_cc_check_fs
29954     04 4A 05 F6 | 	mov	COUNT_, #4
29958     A8 00 A0 FD | 	call	#pushregs_
2995c     09 1F 02 F6 | 	mov	local01, arg01
29960     03 1E 06 F1 | 	add	local01, #3
29964     0F 01 48 FC | 	wrbyte	#0, local01
29968     2D 1E 06 F1 | 	add	local01, #45
2996c     FF FF FF FF 
29970     0F FF 6B FC | 	wrlong	##-1, local01
29974     30 1E 86 F1 | 	sub	local01, #48
29978     0F 13 02 F6 | 	mov	arg01, local01
2997c     18 D5 BF FD | 	call	#_fatfs_cc_move_window
29980     00 FA 0D F2 | 	cmp	result1, #0 wz
29984     04 FA 05 56 |  if_ne	mov	result1, #4
29988     94 01 90 5D |  if_ne	jmp	#LR__4244
2998c     34 1E 06 F1 | 	add	local01, #52
29990     0F 13 02 F6 | 	mov	arg01, local01
29994     FE 13 06 F1 | 	add	arg01, #510
29998                 | ' {
29998                 | ' 
29998                 | ' 	return *((WORD*)ptr);
29998     09 21 E2 FA | 	rdword	local02, arg01
2999c     0F 23 C2 FA | 	rdbyte	local03, local01
299a0     34 1E 86 F1 | 	sub	local01, #52
299a4     11 25 E2 F8 | 	getbyte	local04, local03, #0
299a8     EB 24 0E F2 | 	cmp	local04, #235 wz
299ac     11 17 02 56 |  if_ne	mov	arg03, local03
299b0     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
299b4     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
299b8     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
299bc     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
299c0     44 01 90 5D |  if_ne	jmp	#LR__4243
299c4     10 25 32 F9 | 	getword	local04, local02, #0
299c8     55 00 00 FF 
299cc     55 24 0E F2 | 	cmp	local04, ##43605 wz
299d0     2C 00 90 5D |  if_ne	jmp	#LR__4240
299d4     34 1E 06 F1 | 	add	local01, #52
299d8     0F 13 02 F6 | 	mov	arg01, local01
299dc     34 1E 86 F1 | 	sub	local01, #52
299e0     52 12 06 F1 | 	add	arg01, #82
299e4     77 01 00 FF 
299e8     34 14 06 F6 | 	mov	arg02, ##@LR__4834
299ec     08 16 06 F6 | 	mov	arg03, #8
299f0     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
299f4     00 FA 0D F2 | 	cmp	result1, #0 wz
299f8                 | ' 			return 0;
299f8     00 FA 05 A6 |  if_e	mov	result1, #0
299fc     20 01 90 AD |  if_e	jmp	#LR__4244
29a00                 | LR__4240
29a00     34 1E 06 F1 | 	add	local01, #52
29a04     0F 13 02 F6 | 	mov	arg01, local01
29a08     0B 12 06 F1 | 	add	arg01, #11
29a0c                 | ' {
29a0c                 | ' 
29a0c                 | ' 	return *((WORD*)ptr);
29a0c     09 FB E1 FA | 	rdword	result1, arg01
29a10     0D 1E 06 F1 | 	add	local01, #13
29a14     0F 23 C2 FA | 	rdbyte	local03, local01
29a18     41 1E 86 F1 | 	sub	local01, #65
29a1c     FD 24 32 F9 | 	getword	local04, result1, #0
29a20     FD 14 32 F9 | 	getword	arg02, result1, #0
29a24     01 14 86 F1 | 	sub	arg02, #1
29a28     0A 25 CA F7 | 	test	local04, arg02 wz
29a2c     D8 00 90 5D |  if_ne	jmp	#LR__4242
29a30     FD 14 32 F9 | 	getword	arg02, result1, #0
29a34     01 00 00 FF 
29a38     00 14 16 F2 | 	cmp	arg02, ##512 wc
29a3c     C8 00 90 CD |  if_b	jmp	#LR__4242
29a40     FD 14 32 F9 | 	getword	arg02, result1, #0
29a44     01 00 00 FF 
29a48     01 14 16 F2 | 	cmp	arg02, ##513 wc
29a4c     B8 00 90 3D |  if_ae	jmp	#LR__4242
29a50     11 13 02 F6 | 	mov	arg01, local03
29a54     07 12 4E F7 | 	zerox	arg01, #7 wz
29a58     AC 00 90 AD |  if_e	jmp	#LR__4242
29a5c     11 13 E2 F8 | 	getbyte	arg01, local03, #0
29a60     11 23 E2 F8 | 	getbyte	local03, local03, #0
29a64     01 22 86 F1 | 	sub	local03, #1
29a68     11 13 CA F7 | 	test	arg01, local03 wz
29a6c     98 00 90 5D |  if_ne	jmp	#LR__4242
29a70     34 1E 06 F1 | 	add	local01, #52
29a74     0F 13 02 F6 | 	mov	arg01, local01
29a78     34 1E 86 F1 | 	sub	local01, #52
29a7c     0E 12 06 F1 | 	add	arg01, #14
29a80                 | ' {
29a80                 | ' 
29a80                 | ' 	return *((WORD*)ptr);
29a80     09 FB E9 FA | 	rdword	result1, arg01 wz
29a84     80 00 90 AD |  if_e	jmp	#LR__4242
29a88     44 1E 06 F1 | 	add	local01, #68
29a8c     0F 13 C2 FA | 	rdbyte	arg01, local01
29a90     44 1E 86 F1 | 	sub	local01, #68
29a94     01 12 86 F1 | 	sub	arg01, #1
29a98     02 12 16 F2 | 	cmp	arg01, #2 wc
29a9c     68 00 90 3D |  if_ae	jmp	#LR__4242
29aa0     34 1E 06 F1 | 	add	local01, #52
29aa4     0F 13 02 F6 | 	mov	arg01, local01
29aa8     34 1E 86 F1 | 	sub	local01, #52
29aac     11 12 06 F1 | 	add	arg01, #17
29ab0                 | ' {
29ab0                 | ' 
29ab0                 | ' 	return *((WORD*)ptr);
29ab0     09 FB E9 FA | 	rdword	result1, arg01 wz
29ab4     50 00 90 AD |  if_e	jmp	#LR__4242
29ab8     34 1E 06 F1 | 	add	local01, #52
29abc     0F 13 02 F6 | 	mov	arg01, local01
29ac0     34 1E 86 F1 | 	sub	local01, #52
29ac4     13 12 06 F1 | 	add	arg01, #19
29ac8                 | ' {
29ac8                 | ' 
29ac8                 | ' 	return *((WORD*)ptr);
29ac8     09 FB E1 FA | 	rdword	result1, arg01
29acc     FD 22 32 F9 | 	getword	local03, result1, #0
29ad0     80 22 16 F2 | 	cmp	local03, #128 wc
29ad4     20 00 90 3D |  if_ae	jmp	#LR__4241
29ad8     34 1E 06 F1 | 	add	local01, #52
29adc     0F 13 02 F6 | 	mov	arg01, local01
29ae0     34 1E 86 F1 | 	sub	local01, #52
29ae4     20 12 06 F1 | 	add	arg01, #32
29ae8                 | ' {
29ae8                 | ' 
29ae8                 | ' 	return *((DWORD*)ptr);
29ae8     09 FB 01 FB | 	rdlong	result1, arg01
29aec     80 00 00 FF 
29af0     00 FA 15 F2 | 	cmp	result1, ##65536 wc
29af4     10 00 90 CD |  if_b	jmp	#LR__4242
29af8                 | LR__4241
29af8     4A 1E 06 F1 | 	add	local01, #74
29afc                 | ' {
29afc                 | ' 
29afc                 | ' 	return *((WORD*)ptr);
29afc     0F FB E9 FA | 	rdword	result1, local01 wz
29b00                 | ' 			&& b != 0 && (b & (b - 1)) == 0
29b00                 | ' 			&& ld_word(fs->win +  14 ) != 0
29b00                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
29b00                 | ' 			&& ld_word(fs->win +  17 ) != 0
29b00                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
29b00                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
29b00                 | ' 				return 0;
29b00     00 FA 05 56 |  if_ne	mov	result1, #0
29b04     18 00 90 5D |  if_ne	jmp	#LR__4244
29b08                 | LR__4242
29b08                 | LR__4243
29b08                 | ' 		}
29b08                 | ' 	}
29b08                 | ' 	return sign == 0xAA55 ? 2 : 3;
29b08     10 23 32 F9 | 	getword	local03, local02, #0
29b0c     55 00 00 FF 
29b10     55 22 0E F2 | 	cmp	local03, ##43605 wz
29b14     02 24 06 A6 |  if_e	mov	local04, #2
29b18     03 24 06 56 |  if_ne	mov	local04, #3
29b1c     12 FB 01 F6 | 	mov	result1, local04
29b20                 | LR__4244
29b20     A7 F0 03 F6 | 	mov	ptra, fp
29b24     B2 00 A0 FD | 	call	#popregs_
29b28                 | _fatfs_cc_check_fs_ret
29b28     2D 00 64 FD | 	ret
29b2c                 | 
29b2c                 | _fatfs_cc_find_volume
29b2c     05 4A 05 F6 | 	mov	COUNT_, #5
29b30     A8 00 A0 FD | 	call	#pushregs_
29b34     24 F0 07 F1 | 	add	ptra, #36
29b38     09 1F 02 F6 | 	mov	local01, arg01
29b3c     0A 21 02 F6 | 	mov	local02, arg02
29b40     0F 13 02 F6 | 	mov	arg01, local01
29b44     00 14 06 F6 | 	mov	arg02, #0
29b48     08 FE BF FD | 	call	#_fatfs_cc_check_fs
29b4c     02 FA 0D F2 | 	cmp	result1, #2 wz
29b50     0C 00 90 AD |  if_e	jmp	#LR__4250
29b54     03 FA 15 F2 | 	cmp	result1, #3 wc
29b58     00 20 0E C2 |  if_b	cmp	local02, #0 wz
29b5c     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4258
29b60                 | LR__4250
29b60                 | ' 	for (i = 0; i < 4; i++) {
29b60     00 22 06 F6 | 	mov	local03, #0
29b64     97 26 48 FB | 	callpa	#(@LR__4252-@LR__4251)>>2,fcache_load_ptr_
29b68                 | LR__4251
29b68     04 22 16 F2 | 	cmp	local03, #4 wc
29b6c     44 00 90 3D |  if_ae	jmp	#LR__4253
29b70     11 25 02 F6 | 	mov	local04, local03
29b74     02 24 66 F0 | 	shl	local04, #2
29b78     14 4E 05 F1 | 	add	fp, #20
29b7c     A7 24 02 F1 | 	add	local04, fp
29b80     34 1E 06 F1 | 	add	local01, #52
29b84     0F 13 02 F6 | 	mov	arg01, local01
29b88     34 1E 86 F1 | 	sub	local01, #52
29b8c     BE 13 06 F1 | 	add	arg01, #446
29b90     11 15 02 F6 | 	mov	arg02, local03
29b94     04 14 66 F0 | 	shl	arg02, #4
29b98     0A 13 02 F1 | 	add	arg01, arg02
29b9c     08 12 06 F1 | 	add	arg01, #8
29ba0                 | ' {
29ba0                 | ' 
29ba0                 | ' 	return *((DWORD*)ptr);
29ba0     09 FB 01 FB | 	rdlong	result1, arg01
29ba4     14 4E 85 F1 | 	sub	fp, #20
29ba8     12 FB 61 FC | 	wrlong	result1, local04
29bac     01 22 06 F1 | 	add	local03, #1
29bb0     B4 FF 9F FD | 	jmp	#LR__4251
29bb4                 | LR__4252
29bb4                 | LR__4253
29bb4     00 20 0E F2 | 	cmp	local02, #0 wz
29bb8     10 25 02 56 |  if_ne	mov	local04, local02
29bbc     01 24 86 51 |  if_ne	sub	local04, #1
29bc0     00 24 06 A6 |  if_e	mov	local04, #0
29bc4     12 23 02 F6 | 	mov	local03, local04
29bc8                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
29bc8                 | ' 	}
29bc8                 | ' 	i = part ? part - 1 : 0;
29bc8                 | ' 	do {
29bc8                 | LR__4254
29bc8     11 25 02 F6 | 	mov	local04, local03
29bcc     02 24 66 F0 | 	shl	local04, #2
29bd0     14 4E 05 F1 | 	add	fp, #20
29bd4     A7 24 02 F1 | 	add	local04, fp
29bd8     12 25 0A FB | 	rdlong	local04, local04 wz
29bdc     14 4E 85 F1 | 	sub	fp, #20
29be0     28 00 90 AD |  if_e	jmp	#LR__4255
29be4     11 25 02 F6 | 	mov	local04, local03
29be8     02 24 66 F0 | 	shl	local04, #2
29bec     14 4E 05 F1 | 	add	fp, #20
29bf0     A7 24 02 F1 | 	add	local04, fp
29bf4     12 15 02 FB | 	rdlong	arg02, local04
29bf8     0F 13 02 F6 | 	mov	arg01, local01
29bfc     14 4E 85 F1 | 	sub	fp, #20
29c00     50 FD BF FD | 	call	#_fatfs_cc_check_fs
29c04     FD 24 02 F6 | 	mov	local04, result1
29c08     04 00 90 FD | 	jmp	#LR__4256
29c0c                 | LR__4255
29c0c     03 24 06 F6 | 	mov	local04, #3
29c10                 | LR__4256
29c10     12 27 02 F6 | 	mov	local05, local04
29c14     00 20 0E F2 | 	cmp	local02, #0 wz
29c18     02 26 16 A2 |  if_e	cmp	local05, #2 wc
29c1c     0C 00 90 8D |  if_c_and_z	jmp	#LR__4257
29c20     01 22 06 A1 |  if_e	add	local03, #1
29c24     04 22 16 A2 |  if_e	cmp	local03, #4 wc
29c28     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4254
29c2c                 | LR__4257
29c2c                 | ' 	return fmt;
29c2c     13 FB 01 F6 | 	mov	result1, local05
29c30                 | LR__4258
29c30     A7 F0 03 F6 | 	mov	ptra, fp
29c34     B2 00 A0 FD | 	call	#popregs_
29c38                 | _fatfs_cc_find_volume_ret
29c38     2D 00 64 FD | 	ret
29c3c                 | 
29c3c                 | _fatfs_cc_mount_volume
29c3c     0B 4A 05 F6 | 	mov	COUNT_, #11
29c40     A8 00 A0 FD | 	call	#pushregs_
29c44     0A 1F 02 F6 | 	mov	local01, arg02
29c48     0B 21 02 F6 | 	mov	local02, arg03
29c4c     0F 01 68 FC | 	wrlong	#0, local01
29c50     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
29c54     FD 22 02 F6 | 	mov	local03, result1
29c58     00 22 56 F2 | 	cmps	local03, #0 wc
29c5c     0B FA 05 C6 |  if_b	mov	result1, #11
29c60     3C 05 90 CD |  if_b	jmp	#LR__4270
29c64     11 17 02 F6 | 	mov	arg03, local03
29c68     02 16 66 F0 | 	shl	arg03, #2
29c6c     F2 16 02 F1 | 	add	arg03, objptr
29c70     0B 25 0A FB | 	rdlong	local04, arg03 wz
29c74     0C FA 05 A6 |  if_e	mov	result1, #12
29c78     24 05 90 AD |  if_e	jmp	#LR__4270
29c7c     0F 25 62 FC | 	wrlong	local04, local01
29c80     10 21 E2 F8 | 	getbyte	local02, local02, #0
29c84     FE 20 06 F5 | 	and	local02, #254
29c88     12 17 CA FA | 	rdbyte	arg03, local04 wz
29c8c     4C 00 90 AD |  if_e	jmp	#LR__4261
29c90     01 24 06 F1 | 	add	local04, #1
29c94     12 13 CA FA | 	rdbyte	arg01, local04 wz
29c98     01 24 86 F1 | 	sub	local04, #1
29c9c     01 FA 05 56 |  if_ne	mov	result1, #1
29ca0                 | ' 
29ca0                 | ' 	return Stat;
29ca0     01 00 00 AF 
29ca4     20 E4 05 A1 |  if_e	add	objptr, ##544
29ca8     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
29cac     01 00 00 AF 
29cb0     20 E4 85 A1 |  if_e	sub	objptr, ##544
29cb4     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
29cb8     01 16 CE F7 | 	test	arg03, #1 wz
29cbc     1C 00 90 5D |  if_ne	jmp	#LR__4260
29cc0     00 20 0E F2 | 	cmp	local02, #0 wz
29cc4     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
29cc8     04 FA CD 57 |  if_ne	test	result1, #4 wz
29ccc                 | ' 				return FR_WRITE_PROTECTED;
29ccc     0A FA 05 56 |  if_ne	mov	result1, #10
29cd0     CC 04 90 5D |  if_ne	jmp	#LR__4270
29cd4                 | ' 			}
29cd4                 | ' 			return FR_OK;
29cd4     00 FA 05 F6 | 	mov	result1, #0
29cd8     C4 04 90 FD | 	jmp	#LR__4270
29cdc                 | LR__4260
29cdc                 | LR__4261
29cdc     12 01 48 FC | 	wrbyte	#0, local04
29ce0     01 24 06 F1 | 	add	local04, #1
29ce4     12 23 42 FC | 	wrbyte	local03, local04
29ce8     12 13 C2 FA | 	rdbyte	arg01, local04
29cec     01 24 86 F1 | 	sub	local04, #1
29cf0     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
29cf4     FD 16 02 F6 | 	mov	arg03, result1
29cf8     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
29cfc     01 26 CE F7 | 	test	local05, #1 wz
29d00                 | ' 		return FR_NOT_READY;
29d00     03 FA 05 56 |  if_ne	mov	result1, #3
29d04     98 04 90 5D |  if_ne	jmp	#LR__4270
29d08     00 20 0E F2 | 	cmp	local02, #0 wz
29d0c     0B 27 02 56 |  if_ne	mov	local05, arg03
29d10     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
29d14     04 26 CE 57 |  if_ne	test	local05, #4 wz
29d18                 | ' 		return FR_WRITE_PROTECTED;
29d18     0A FA 05 56 |  if_ne	mov	result1, #10
29d1c     80 04 90 5D |  if_ne	jmp	#LR__4270
29d20     12 13 02 F6 | 	mov	arg01, local04
29d24     00 14 06 F6 | 	mov	arg02, #0
29d28     00 FE BF FD | 	call	#_fatfs_cc_find_volume
29d2c     FD 12 02 F6 | 	mov	arg01, result1
29d30     04 12 0E F2 | 	cmp	arg01, #4 wz
29d34     01 FA 05 A6 |  if_e	mov	result1, #1
29d38     64 04 90 AD |  if_e	jmp	#LR__4270
29d3c     02 12 16 F2 | 	cmp	arg01, #2 wc
29d40     0D FA 05 36 |  if_ae	mov	result1, #13
29d44     58 04 90 3D |  if_ae	jmp	#LR__4270
29d48     30 24 06 F1 | 	add	local04, #48
29d4c     12 29 02 FB | 	rdlong	local06, local04
29d50     04 24 06 F1 | 	add	local04, #4
29d54     12 13 02 F6 | 	mov	arg01, local04
29d58     34 24 86 F1 | 	sub	local04, #52
29d5c     0B 12 06 F1 | 	add	arg01, #11
29d60                 | ' {
29d60                 | ' 
29d60                 | ' 	return *((WORD*)ptr);
29d60     09 FB E1 FA | 	rdword	result1, arg01
29d64     01 00 00 FF 
29d68     00 FA 0D F2 | 	cmp	result1, ##512 wz
29d6c     0D FA 05 56 |  if_ne	mov	result1, #13
29d70     2C 04 90 5D |  if_ne	jmp	#LR__4270
29d74     34 24 06 F1 | 	add	local04, #52
29d78     12 13 02 F6 | 	mov	arg01, local04
29d7c     34 24 86 F1 | 	sub	local04, #52
29d80     16 12 06 F1 | 	add	arg01, #22
29d84                 | ' {
29d84                 | ' 
29d84                 | ' 	return *((WORD*)ptr);
29d84     09 FB E1 FA | 	rdword	result1, arg01
29d88     FD 2A 0A F6 | 	mov	local07, result1 wz
29d8c     18 00 90 5D |  if_ne	jmp	#LR__4262
29d90     34 24 06 F1 | 	add	local04, #52
29d94     12 13 02 F6 | 	mov	arg01, local04
29d98     34 24 86 F1 | 	sub	local04, #52
29d9c     24 12 06 F1 | 	add	arg01, #36
29da0                 | ' {
29da0                 | ' 
29da0                 | ' 	return *((DWORD*)ptr);
29da0     09 FB 01 FB | 	rdlong	result1, arg01
29da4     FD 2A 02 F6 | 	mov	local07, result1
29da8                 | LR__4262
29da8     1C 24 06 F1 | 	add	local04, #28
29dac     12 2B 62 FC | 	wrlong	local07, local04
29db0     28 24 06 F1 | 	add	local04, #40
29db4     12 27 C2 FA | 	rdbyte	local05, local04
29db8     42 24 86 F1 | 	sub	local04, #66
29dbc     12 27 42 FC | 	wrbyte	local05, local04
29dc0     12 27 C2 FA | 	rdbyte	local05, local04
29dc4     02 24 86 F1 | 	sub	local04, #2
29dc8     01 26 0E F2 | 	cmp	local05, #1 wz
29dcc     02 24 06 51 |  if_ne	add	local04, #2
29dd0     12 27 C2 5A |  if_ne	rdbyte	local05, local04
29dd4     02 24 86 51 |  if_ne	sub	local04, #2
29dd8     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
29ddc     0D FA 05 56 |  if_ne	mov	result1, #13
29de0     BC 03 90 5D |  if_ne	jmp	#LR__4270
29de4     02 24 06 F1 | 	add	local04, #2
29de8     12 27 C2 FA | 	rdbyte	local05, local04
29dec     13 2B 02 FD | 	qmul	local07, local05
29df0     3F 24 06 F1 | 	add	local04, #63
29df4     12 27 C2 FA | 	rdbyte	local05, local04
29df8     37 24 86 F1 | 	sub	local04, #55
29dfc     12 27 52 FC | 	wrword	local05, local04
29e00     12 27 EA FA | 	rdword	local05, local04 wz
29e04     0A 24 86 F1 | 	sub	local04, #10
29e08     18 2A 62 FD | 	getqx	local07
29e0c     20 00 90 AD |  if_e	jmp	#LR__4263
29e10     0A 24 06 F1 | 	add	local04, #10
29e14     12 27 E2 FA | 	rdword	local05, local04
29e18     13 23 32 F9 | 	getword	local03, local05, #0
29e1c     0A 24 86 F1 | 	sub	local04, #10
29e20     13 27 32 F9 | 	getword	local05, local05, #0
29e24     01 26 86 F1 | 	sub	local05, #1
29e28     13 23 CA F7 | 	test	local03, local05 wz
29e2c     08 00 90 AD |  if_e	jmp	#LR__4264
29e30                 | LR__4263
29e30     0D FA 05 F6 | 	mov	result1, #13
29e34     68 03 90 FD | 	jmp	#LR__4270
29e38                 | LR__4264
29e38     34 24 06 F1 | 	add	local04, #52
29e3c     12 13 02 F6 | 	mov	arg01, local04
29e40     11 12 06 F1 | 	add	arg01, #17
29e44                 | ' {
29e44                 | ' 
29e44                 | ' 	return *((WORD*)ptr);
29e44     09 FB E1 FA | 	rdword	result1, arg01
29e48     2C 24 86 F1 | 	sub	local04, #44
29e4c     12 FB 51 FC | 	wrword	result1, local04
29e50     12 27 E2 FA | 	rdword	local05, local04
29e54     08 24 86 F1 | 	sub	local04, #8
29e58     13 13 52 F6 | 	abs	arg01, local05 wc
29e5c     09 13 42 F8 | 	getnib	arg01, arg01, #0
29e60     09 13 8A F6 | 	negc	arg01, arg01 wz
29e64     0D FA 05 56 |  if_ne	mov	result1, #13
29e68     34 03 90 5D |  if_ne	jmp	#LR__4270
29e6c     34 24 06 F1 | 	add	local04, #52
29e70     12 13 02 F6 | 	mov	arg01, local04
29e74     34 24 86 F1 | 	sub	local04, #52
29e78     13 12 06 F1 | 	add	arg01, #19
29e7c                 | ' {
29e7c                 | ' 
29e7c                 | ' 	return *((WORD*)ptr);
29e7c     09 FB E1 FA | 	rdword	result1, arg01
29e80     FD 2C 0A F6 | 	mov	local08, result1 wz
29e84     34 24 06 A1 |  if_e	add	local04, #52
29e88     12 13 02 A6 |  if_e	mov	arg01, local04
29e8c     34 24 86 A1 |  if_e	sub	local04, #52
29e90     20 12 06 A1 |  if_e	add	arg01, #32
29e94                 | ' {
29e94                 | ' 
29e94                 | ' 	return *((DWORD*)ptr);
29e94     09 2D 02 AB |  if_e	rdlong	local08, arg01
29e98     34 24 06 F1 | 	add	local04, #52
29e9c     12 13 02 F6 | 	mov	arg01, local04
29ea0     34 24 86 F1 | 	sub	local04, #52
29ea4     0E 12 06 F1 | 	add	arg01, #14
29ea8                 | ' {
29ea8                 | ' 
29ea8                 | ' 	return *((WORD*)ptr);
29ea8     09 FB E1 FA | 	rdword	result1, arg01
29eac     FD 12 02 F6 | 	mov	arg01, result1
29eb0     09 27 02 F6 | 	mov	local05, arg01
29eb4     0F 26 4E F7 | 	zerox	local05, #15 wz
29eb8     0D FA 05 A6 |  if_e	mov	result1, #13
29ebc     E0 02 90 AD |  if_e	jmp	#LR__4270
29ec0     09 2F 32 F9 | 	getword	local09, arg01, #0
29ec4     15 2F 02 F1 | 	add	local09, local07
29ec8     08 24 06 F1 | 	add	local04, #8
29ecc     12 27 E2 FA | 	rdword	local05, local04
29ed0     08 24 86 F1 | 	sub	local04, #8
29ed4     13 27 52 F6 | 	abs	local05, local05 wc
29ed8     04 26 46 F0 | 	shr	local05, #4
29edc     13 2F 82 F3 | 	sumc	local09, local05
29ee0     17 2D 12 F2 | 	cmp	local08, local09 wc
29ee4     0D FA 05 C6 |  if_b	mov	result1, #13
29ee8     B4 02 90 CD |  if_b	jmp	#LR__4270
29eec     17 2D 82 F1 | 	sub	local08, local09
29ef0     0A 24 06 F1 | 	add	local04, #10
29ef4     12 27 E2 FA | 	rdword	local05, local04
29ef8     13 2D 12 FD | 	qdiv	local08, local05
29efc     0A 24 86 F1 | 	sub	local04, #10
29f00     18 26 62 FD | 	getqx	local05
29f04     00 26 0E F2 | 	cmp	local05, #0 wz
29f08     0D FA 05 A6 |  if_e	mov	result1, #13
29f0c     90 02 90 AD |  if_e	jmp	#LR__4270
29f10     00 30 06 F6 | 	mov	local10, #0
29f14     FF FF 07 FF 
29f18     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
29f1c     03 30 06 C6 |  if_b	mov	local10, #3
29f20     7F 00 00 FF 
29f24     F6 27 16 F2 | 	cmp	local05, ##65526 wc
29f28     02 30 06 C6 |  if_b	mov	local10, #2
29f2c     07 00 00 FF 
29f30     F6 27 16 F2 | 	cmp	local05, ##4086 wc
29f34     01 30 06 C6 |  if_b	mov	local10, #1
29f38     00 30 0E F2 | 	cmp	local10, #0 wz
29f3c     0D FA 05 A6 |  if_e	mov	result1, #13
29f40     5C 02 90 AD |  if_e	jmp	#LR__4270
29f44     02 26 06 F1 | 	add	local05, #2
29f48     18 24 06 F1 | 	add	local04, #24
29f4c     12 27 62 FC | 	wrlong	local05, local04
29f50     08 24 06 F1 | 	add	local04, #8
29f54     12 29 62 FC | 	wrlong	local06, local04
29f58     14 27 02 F6 | 	mov	local05, local06
29f5c     09 13 32 F9 | 	getword	arg01, arg01, #0
29f60     09 27 02 F1 | 	add	local05, arg01
29f64     04 24 06 F1 | 	add	local04, #4
29f68     12 27 62 FC | 	wrlong	local05, local04
29f6c     14 27 02 F6 | 	mov	local05, local06
29f70     17 27 02 F1 | 	add	local05, local09
29f74     08 24 06 F1 | 	add	local04, #8
29f78     12 27 62 FC | 	wrlong	local05, local04
29f7c     2C 24 86 F1 | 	sub	local04, #44
29f80     03 30 0E F2 | 	cmp	local10, #3 wz
29f84     5C 00 90 5D |  if_ne	jmp	#LR__4265
29f88     34 24 06 F1 | 	add	local04, #52
29f8c     12 13 02 F6 | 	mov	arg01, local04
29f90     34 24 86 F1 | 	sub	local04, #52
29f94     2A 12 06 F1 | 	add	arg01, #42
29f98                 | ' {
29f98                 | ' 
29f98                 | ' 	return *((WORD*)ptr);
29f98     09 FB E9 FA | 	rdword	result1, arg01 wz
29f9c     0D FA 05 56 |  if_ne	mov	result1, #13
29fa0     FC 01 90 5D |  if_ne	jmp	#LR__4270
29fa4     08 24 06 F1 | 	add	local04, #8
29fa8     12 27 EA FA | 	rdword	local05, local04 wz
29fac     08 24 86 F1 | 	sub	local04, #8
29fb0     0D FA 05 56 |  if_ne	mov	result1, #13
29fb4     E8 01 90 5D |  if_ne	jmp	#LR__4270
29fb8     34 24 06 F1 | 	add	local04, #52
29fbc     12 13 02 F6 | 	mov	arg01, local04
29fc0     2C 12 06 F1 | 	add	arg01, #44
29fc4                 | ' {
29fc4                 | ' 
29fc4                 | ' 	return *((DWORD*)ptr);
29fc4     09 FB 01 FB | 	rdlong	result1, arg01
29fc8     0C 24 86 F1 | 	sub	local04, #12
29fcc     12 FB 61 FC | 	wrlong	result1, local04
29fd0     10 24 86 F1 | 	sub	local04, #16
29fd4     12 33 02 FB | 	rdlong	local11, local04
29fd8     18 24 86 F1 | 	sub	local04, #24
29fdc     02 32 66 F0 | 	shl	local11, #2
29fe0     6C 00 90 FD | 	jmp	#LR__4267
29fe4                 | LR__4265
29fe4     08 24 06 F1 | 	add	local04, #8
29fe8     12 27 EA FA | 	rdword	local05, local04 wz
29fec     08 24 86 F1 | 	sub	local04, #8
29ff0     0D FA 05 A6 |  if_e	mov	result1, #13
29ff4     A8 01 90 AD |  if_e	jmp	#LR__4270
29ff8     24 24 06 F1 | 	add	local04, #36
29ffc     12 27 02 FB | 	rdlong	local05, local04
2a000     15 27 02 F1 | 	add	local05, local07
2a004     04 24 06 F1 | 	add	local04, #4
2a008     12 27 62 FC | 	wrlong	local05, local04
2a00c     28 24 86 F1 | 	sub	local04, #40
2a010     02 30 0E F2 | 	cmp	local10, #2 wz
2a014     18 24 06 A1 |  if_e	add	local04, #24
2a018     12 27 02 AB |  if_e	rdlong	local05, local04
2a01c     18 24 86 A1 |  if_e	sub	local04, #24
2a020     01 26 66 A0 |  if_e	shl	local05, #1
2a024     24 00 90 AD |  if_e	jmp	#LR__4266
2a028     18 24 06 F1 | 	add	local04, #24
2a02c     12 33 02 FB | 	rdlong	local11, local04
2a030     19 27 02 F6 | 	mov	local05, local11
2a034     01 26 66 F0 | 	shl	local05, #1
2a038     19 27 02 F1 | 	add	local05, local11
2a03c     01 26 46 F0 | 	shr	local05, #1
2a040     18 24 86 F1 | 	sub	local04, #24
2a044     01 32 06 F5 | 	and	local11, #1
2a048     19 27 02 F1 | 	add	local05, local11
2a04c                 | LR__4266
2a04c     13 33 02 F6 | 	mov	local11, local05
2a050                 | LR__4267
2a050     FF 33 06 F1 | 	add	local11, #511
2a054     09 32 46 F0 | 	shr	local11, #9
2a058     1C 24 06 F1 | 	add	local04, #28
2a05c     12 17 02 FB | 	rdlong	arg03, local04
2a060     1C 24 86 F1 | 	sub	local04, #28
2a064     19 17 12 F2 | 	cmp	arg03, local11 wc
2a068     0D FA 05 C6 |  if_b	mov	result1, #13
2a06c     30 01 90 CD |  if_b	jmp	#LR__4270
2a070     14 24 06 F1 | 	add	local04, #20
2a074     FF FF FF FF 
2a078     12 FF 6B FC | 	wrlong	##-1, local04
2a07c     04 24 86 F1 | 	sub	local04, #4
2a080     FF FF FF FF 
2a084     12 FF 6B FC | 	wrlong	##-1, local04
2a088     0C 24 86 F1 | 	sub	local04, #12
2a08c     12 01 49 FC | 	wrbyte	#128, local04
2a090     04 24 86 F1 | 	sub	local04, #4
2a094     03 30 0E F2 | 	cmp	local10, #3 wz
2a098     D0 00 90 5D |  if_ne	jmp	#LR__4269
2a09c     34 24 06 F1 | 	add	local04, #52
2a0a0     12 13 02 F6 | 	mov	arg01, local04
2a0a4     34 24 86 F1 | 	sub	local04, #52
2a0a8     30 12 06 F1 | 	add	arg01, #48
2a0ac                 | ' {
2a0ac                 | ' 
2a0ac                 | ' 	return *((WORD*)ptr);
2a0ac     09 FB E1 FA | 	rdword	result1, arg01
2a0b0     FD 26 32 F9 | 	getword	local05, result1, #0
2a0b4     01 26 0E F2 | 	cmp	local05, #1 wz
2a0b8     B0 00 90 5D |  if_ne	jmp	#LR__4269
2a0bc     01 28 06 F1 | 	add	local06, #1
2a0c0     12 13 02 F6 | 	mov	arg01, local04
2a0c4     14 15 02 F6 | 	mov	arg02, local06
2a0c8     CC CD BF FD | 	call	#_fatfs_cc_move_window
2a0cc     00 FA 0D F2 | 	cmp	result1, #0 wz
2a0d0     98 00 90 5D |  if_ne	jmp	#LR__4269
2a0d4     04 24 06 F1 | 	add	local04, #4
2a0d8     12 01 48 FC | 	wrbyte	#0, local04
2a0dc     30 24 06 F1 | 	add	local04, #48
2a0e0     12 13 02 F6 | 	mov	arg01, local04
2a0e4     34 24 86 F1 | 	sub	local04, #52
2a0e8     FE 13 06 F1 | 	add	arg01, #510
2a0ec                 | ' {
2a0ec                 | ' 
2a0ec                 | ' 	return *((WORD*)ptr);
2a0ec     09 FB E1 FA | 	rdword	result1, arg01
2a0f0     FD 26 32 F9 | 	getword	local05, result1, #0
2a0f4     55 00 00 FF 
2a0f8     55 26 0E F2 | 	cmp	local05, ##43605 wz
2a0fc     34 24 06 A1 |  if_e	add	local04, #52
2a100     12 13 02 A6 |  if_e	mov	arg01, local04
2a104     34 24 86 A1 |  if_e	sub	local04, #52
2a108                 | ' {
2a108                 | ' 
2a108                 | ' 	return *((DWORD*)ptr);
2a108     09 FB 01 AB |  if_e	rdlong	result1, arg01
2a10c     A9 B0 20 AF 
2a110     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
2a114     54 00 90 5D |  if_ne	jmp	#LR__4268
2a118     34 24 06 F1 | 	add	local04, #52
2a11c     12 13 02 F6 | 	mov	arg01, local04
2a120     34 24 86 F1 | 	sub	local04, #52
2a124     E4 13 06 F1 | 	add	arg01, #484
2a128                 | ' {
2a128                 | ' 
2a128                 | ' 	return *((DWORD*)ptr);
2a128     09 FB 01 FB | 	rdlong	result1, arg01
2a12c     B9 A0 30 FF 
2a130     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
2a134     34 00 90 5D |  if_ne	jmp	#LR__4268
2a138     34 24 06 F1 | 	add	local04, #52
2a13c     12 13 02 F6 | 	mov	arg01, local04
2a140     E8 13 06 F1 | 	add	arg01, #488
2a144                 | ' {
2a144                 | ' 
2a144                 | ' 	return *((DWORD*)ptr);
2a144     09 FB 01 FB | 	rdlong	result1, arg01
2a148     20 24 86 F1 | 	sub	local04, #32
2a14c     12 FB 61 FC | 	wrlong	result1, local04
2a150     20 24 06 F1 | 	add	local04, #32
2a154     12 13 02 F6 | 	mov	arg01, local04
2a158     EC 13 06 F1 | 	add	arg01, #492
2a15c                 | ' {
2a15c                 | ' 
2a15c                 | ' 	return *((DWORD*)ptr);
2a15c     09 FB 01 FB | 	rdlong	result1, arg01
2a160     24 24 86 F1 | 	sub	local04, #36
2a164     12 FB 61 FC | 	wrlong	result1, local04
2a168     10 24 86 F1 | 	sub	local04, #16
2a16c                 | LR__4268
2a16c                 | LR__4269
2a16c     12 31 42 FC | 	wrbyte	local10, local04
2a170     04 E4 05 F1 | 	add	objptr, #4
2a174     F2 26 E2 FA | 	rdword	local05, objptr
2a178     01 26 06 F1 | 	add	local05, #1
2a17c     F2 26 52 FC | 	wrword	local05, objptr
2a180     F2 32 E2 FA | 	rdword	local11, objptr
2a184     06 24 06 F1 | 	add	local04, #6
2a188     12 33 52 FC | 	wrword	local11, local04
2a18c     04 E4 05 F1 | 	add	objptr, #4
2a190     06 24 06 F1 | 	add	local04, #6
2a194     12 E5 61 FC | 	wrlong	objptr, local04
2a198                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
2a198                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
2a198                 | ' 			{
2a198                 | ' 
2a198                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
2a198                 | ' 
2a198                 | ' 
2a198                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
2a198                 | ' 
2a198                 | ' 			}
2a198                 | ' 		}
2a198                 | ' 
2a198                 | ' 
2a198                 | ' 	}
2a198                 | ' 
2a198                 | ' 	fs->fs_type = (BYTE)fmt;
2a198                 | ' 	fs->id = ++Fsid;
2a198                 | ' 
2a198                 | ' 	fs->lfnbuf = LfnBuf;
2a198                 | ' #line 3567 "ff.c"
2a198                 | ' 	return FR_OK;
2a198     00 FA 05 F6 | 	mov	result1, #0
2a19c     08 E4 85 F1 | 	sub	objptr, #8
2a1a0                 | LR__4270
2a1a0     A7 F0 03 F6 | 	mov	ptra, fp
2a1a4     B2 00 A0 FD | 	call	#popregs_
2a1a8                 | _fatfs_cc_mount_volume_ret
2a1a8     2D 00 64 FD | 	ret
2a1ac                 | 
2a1ac                 | _fatfs_cc_validate
2a1ac     09 01 0A F6 | 	mov	_var01, arg01 wz
2a1b0     09 02 06 F6 | 	mov	_var02, #9
2a1b4     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
2a1b8     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
2a1bc     50 00 90 AD |  if_e	jmp	#LR__4280
2a1c0     04 00 06 F1 | 	add	_var01, #4
2a1c4     00 07 E2 FA | 	rdword	_var04, _var01
2a1c8     04 00 86 F1 | 	sub	_var01, #4
2a1cc     00 13 02 FB | 	rdlong	arg01, _var01
2a1d0     06 12 06 F1 | 	add	arg01, #6
2a1d4     09 FB E1 FA | 	rdword	result1, arg01
2a1d8     FD 06 0A F2 | 	cmp	_var04, result1 wz
2a1dc     30 00 90 5D |  if_ne	jmp	#LR__4280
2a1e0     00 07 02 FB | 	rdlong	_var04, _var01
2a1e4     01 06 06 F1 | 	add	_var04, #1
2a1e8     03 13 CA FA | 	rdbyte	arg01, _var04 wz
2a1ec     01 FA 05 56 |  if_ne	mov	result1, #1
2a1f0                 | ' 
2a1f0                 | ' 	return Stat;
2a1f0     01 00 00 AF 
2a1f4     20 E4 05 A1 |  if_e	add	objptr, ##544
2a1f8     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2a1fc     01 00 00 AF 
2a200     20 E4 85 A1 |  if_e	sub	objptr, ##544
2a204     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
2a208     01 04 CE F7 | 	test	_var03, #1 wz
2a20c     00 02 06 A6 |  if_e	mov	_var02, #0
2a210                 | LR__4280
2a210     00 02 0E F2 | 	cmp	_var02, #0 wz
2a214     00 05 02 AB |  if_e	rdlong	_var03, _var01
2a218     00 04 06 56 |  if_ne	mov	_var03, #0
2a21c     0A 05 62 FC | 	wrlong	_var03, arg02
2a220                 | ' 			res = FR_OK;
2a220                 | ' 		}
2a220                 | ' 
2a220                 | ' 	}
2a220                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
2a220                 | ' 	return res;
2a220     01 FB 01 F6 | 	mov	result1, _var02
2a224                 | _fatfs_cc_validate_ret
2a224     2D 00 64 FD | 	ret
2a228                 | 
2a228                 | _fatfs_cc_f_mount
2a228     01 4A 05 F6 | 	mov	COUNT_, #1
2a22c     A8 00 A0 FD | 	call	#pushregs_
2a230     20 F0 07 F1 | 	add	ptra, #32
2a234     04 4E 05 F1 | 	add	fp, #4
2a238     A7 12 62 FC | 	wrlong	arg01, fp
2a23c     04 4E 05 F1 | 	add	fp, #4
2a240     A7 14 62 FC | 	wrlong	arg02, fp
2a244     04 4E 05 F1 | 	add	fp, #4
2a248     A7 16 42 FC | 	wrbyte	arg03, fp
2a24c     04 4E 85 F1 | 	sub	fp, #4
2a250     A7 16 02 FB | 	rdlong	arg03, fp
2a254     14 4E 05 F1 | 	add	fp, #20
2a258     A7 16 62 FC | 	wrlong	arg03, fp
2a25c     A7 12 02 F6 | 	mov	arg01, fp
2a260     1C 4E 85 F1 | 	sub	fp, #28
2a264     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
2a268     14 4E 05 F1 | 	add	fp, #20
2a26c     A7 FA 61 FC | 	wrlong	result1, fp
2a270     14 4E 85 F1 | 	sub	fp, #20
2a274     00 FA 55 F2 | 	cmps	result1, #0 wc
2a278     0B FA 05 C6 |  if_b	mov	result1, #11
2a27c     C0 00 90 CD |  if_b	jmp	#LR__4291
2a280     14 4E 05 F1 | 	add	fp, #20
2a284     A7 16 02 FB | 	rdlong	arg03, fp
2a288     02 16 66 F0 | 	shl	arg03, #2
2a28c     F2 16 02 F1 | 	add	arg03, objptr
2a290     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2a294     04 4E 85 F1 | 	sub	fp, #4
2a298     A7 16 62 FC | 	wrlong	arg03, fp
2a29c     10 4E 85 F1 | 	sub	fp, #16
2a2a0     28 00 90 AD |  if_e	jmp	#LR__4290
2a2a4     10 4E 05 F1 | 	add	fp, #16
2a2a8     A7 16 02 FB | 	rdlong	arg03, fp
2a2ac     10 4E 85 F1 | 	sub	fp, #16
2a2b0     01 16 06 F1 | 	add	arg03, #1
2a2b4     0B 13 C2 FA | 	rdbyte	arg01, arg03
2a2b8     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
2a2bc     10 4E 05 F1 | 	add	fp, #16
2a2c0     A7 16 02 FB | 	rdlong	arg03, fp
2a2c4     10 4E 85 F1 | 	sub	fp, #16
2a2c8     0B 01 48 FC | 	wrbyte	#0, arg03
2a2cc                 | LR__4290
2a2cc     04 4E 05 F1 | 	add	fp, #4
2a2d0     A7 1E 0A FB | 	rdlong	local01, fp wz
2a2d4     04 4E 85 F1 | 	sub	fp, #4
2a2d8     04 4E 05 51 |  if_ne	add	fp, #4
2a2dc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2a2e0     04 4E 85 51 |  if_ne	sub	fp, #4
2a2e4     0F 01 48 5C |  if_ne	wrbyte	#0, local01
2a2e8     14 4E 05 F1 | 	add	fp, #20
2a2ec     A7 1E 02 FB | 	rdlong	local01, fp
2a2f0     02 1E 66 F0 | 	shl	local01, #2
2a2f4     F2 1E 02 F1 | 	add	local01, objptr
2a2f8     10 4E 85 F1 | 	sub	fp, #16
2a2fc     A7 16 02 FB | 	rdlong	arg03, fp
2a300     0F 17 62 FC | 	wrlong	arg03, local01
2a304     08 4E 05 F1 | 	add	fp, #8
2a308     A7 1E CA FA | 	rdbyte	local01, fp wz
2a30c     0C 4E 85 F1 | 	sub	fp, #12
2a310     00 FA 05 A6 |  if_e	mov	result1, #0
2a314     28 00 90 AD |  if_e	jmp	#LR__4291
2a318     08 4E 05 F1 | 	add	fp, #8
2a31c     A7 12 02 F6 | 	mov	arg01, fp
2a320     04 4E 85 F1 | 	sub	fp, #4
2a324     A7 14 02 F6 | 	mov	arg02, fp
2a328     04 4E 85 F1 | 	sub	fp, #4
2a32c     00 16 06 F6 | 	mov	arg03, #0
2a330     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
2a334     18 4E 05 F1 | 	add	fp, #24
2a338     A7 FA 61 FC | 	wrlong	result1, fp
2a33c                 | ' 
2a33c                 | ' 	res = mount_volume(&path, &fs, 0);
2a33c                 | ' 	return res ;
2a33c     18 4E 85 F1 | 	sub	fp, #24
2a340                 | LR__4291
2a340     A7 F0 03 F6 | 	mov	ptra, fp
2a344     B2 00 A0 FD | 	call	#popregs_
2a348                 | _fatfs_cc_f_mount_ret
2a348     2D 00 64 FD | 	ret
2a34c                 | 
2a34c                 | _fatfs_cc_f_open
2a34c     02 4A 05 F6 | 	mov	COUNT_, #2
2a350     A8 00 A0 FD | 	call	#pushregs_
2a354     60 F0 07 F1 | 	add	ptra, #96
2a358     04 4E 05 F1 | 	add	fp, #4
2a35c     A7 12 62 FC | 	wrlong	arg01, fp
2a360     04 4E 05 F1 | 	add	fp, #4
2a364     A7 14 62 FC | 	wrlong	arg02, fp
2a368     04 4E 05 F1 | 	add	fp, #4
2a36c     A7 16 42 FC | 	wrbyte	arg03, fp
2a370     08 4E 85 F1 | 	sub	fp, #8
2a374     A7 18 0A FB | 	rdlong	arg04, fp wz
2a378     04 4E 85 F1 | 	sub	fp, #4
2a37c     09 FA 05 A6 |  if_e	mov	result1, #9
2a380     98 06 90 AD |  if_e	jmp	#LR__4317
2a384     0C 4E 05 F1 | 	add	fp, #12
2a388     A7 18 C2 FA | 	rdbyte	arg04, fp
2a38c     3F 18 06 F5 | 	and	arg04, #63
2a390     A7 18 42 FC | 	wrbyte	arg04, fp
2a394     04 4E 85 F1 | 	sub	fp, #4
2a398     A7 12 02 F6 | 	mov	arg01, fp
2a39c     3C 4E 05 F1 | 	add	fp, #60
2a3a0     A7 14 02 F6 | 	mov	arg02, fp
2a3a4     38 4E 85 F1 | 	sub	fp, #56
2a3a8     A7 16 C2 FA | 	rdbyte	arg03, fp
2a3ac     0C 4E 85 F1 | 	sub	fp, #12
2a3b0     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
2a3b4     10 4E 05 F1 | 	add	fp, #16
2a3b8     A7 FA 61 FC | 	wrlong	result1, fp
2a3bc     10 4E 85 F1 | 	sub	fp, #16
2a3c0     00 FA 0D F2 | 	cmp	result1, #0 wz
2a3c4     2C 06 90 5D |  if_ne	jmp	#LR__4316
2a3c8     44 4E 05 F1 | 	add	fp, #68
2a3cc     A7 18 02 FB | 	rdlong	arg04, fp
2a3d0     30 4E 85 F1 | 	sub	fp, #48
2a3d4     A7 18 62 FC | 	wrlong	arg04, fp
2a3d8     A7 12 02 F6 | 	mov	arg01, fp
2a3dc     0C 4E 85 F1 | 	sub	fp, #12
2a3e0     A7 1E 02 FB | 	rdlong	local01, fp
2a3e4     08 4E 85 F1 | 	sub	fp, #8
2a3e8     0F 15 02 F6 | 	mov	arg02, local01
2a3ec     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
2a3f0     10 4E 05 F1 | 	add	fp, #16
2a3f4     A7 FA 61 FC | 	wrlong	result1, fp
2a3f8     10 4E 85 F1 | 	sub	fp, #16
2a3fc     00 FA 0D F2 | 	cmp	result1, #0 wz
2a400     1C 00 90 5D |  if_ne	jmp	#LR__4300
2a404     3F 4E 05 F1 | 	add	fp, #63
2a408     A7 18 C2 FA | 	rdbyte	arg04, fp
2a40c     3F 4E 85 F1 | 	sub	fp, #63
2a410     80 18 CE F7 | 	test	arg04, #128 wz
2a414     10 4E 05 51 |  if_ne	add	fp, #16
2a418     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2a41c     10 4E 85 51 |  if_ne	sub	fp, #16
2a420                 | LR__4300
2a420     0C 4E 05 F1 | 	add	fp, #12
2a424     A7 18 C2 FA | 	rdbyte	arg04, fp
2a428     0C 4E 85 F1 | 	sub	fp, #12
2a42c     1C 18 CE F7 | 	test	arg04, #28 wz
2a430     F0 01 90 AD |  if_e	jmp	#LR__4305
2a434     10 4E 05 F1 | 	add	fp, #16
2a438     A7 1E 0A FB | 	rdlong	local01, fp wz
2a43c     10 4E 85 F1 | 	sub	fp, #16
2a440     48 00 90 AD |  if_e	jmp	#LR__4302
2a444     10 4E 05 F1 | 	add	fp, #16
2a448     A7 18 02 FB | 	rdlong	arg04, fp
2a44c     10 4E 85 F1 | 	sub	fp, #16
2a450     04 18 0E F2 | 	cmp	arg04, #4 wz
2a454     1C 00 90 5D |  if_ne	jmp	#LR__4301
2a458     14 4E 05 F1 | 	add	fp, #20
2a45c     A7 12 02 F6 | 	mov	arg01, fp
2a460     14 4E 85 F1 | 	sub	fp, #20
2a464     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
2a468     10 4E 05 F1 | 	add	fp, #16
2a46c     A7 FA 61 FC | 	wrlong	result1, fp
2a470     10 4E 85 F1 | 	sub	fp, #16
2a474                 | LR__4301
2a474     0C 4E 05 F1 | 	add	fp, #12
2a478     A7 1E C2 FA | 	rdbyte	local01, fp
2a47c     08 1E 46 F5 | 	or	local01, #8
2a480     A7 1E 42 FC | 	wrbyte	local01, fp
2a484     0C 4E 85 F1 | 	sub	fp, #12
2a488     3C 00 90 FD | 	jmp	#LR__4304
2a48c                 | LR__4302
2a48c     1A 4E 05 F1 | 	add	fp, #26
2a490     A7 1E C2 FA | 	rdbyte	local01, fp
2a494     1A 4E 85 F1 | 	sub	fp, #26
2a498     11 1E CE F7 | 	test	local01, #17 wz
2a49c     10 4E 05 51 |  if_ne	add	fp, #16
2a4a0     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2a4a4     10 4E 85 51 |  if_ne	sub	fp, #16
2a4a8     1C 00 90 5D |  if_ne	jmp	#LR__4303
2a4ac     0C 4E 05 F1 | 	add	fp, #12
2a4b0     A7 1E C2 FA | 	rdbyte	local01, fp
2a4b4     0C 4E 85 F1 | 	sub	fp, #12
2a4b8     04 1E CE F7 | 	test	local01, #4 wz
2a4bc     10 4E 05 51 |  if_ne	add	fp, #16
2a4c0     A7 10 68 5C |  if_ne	wrlong	#8, fp
2a4c4     10 4E 85 51 |  if_ne	sub	fp, #16
2a4c8                 | LR__4303
2a4c8                 | LR__4304
2a4c8     10 4E 05 F1 | 	add	fp, #16
2a4cc     A7 1E 0A FB | 	rdlong	local01, fp wz
2a4d0     10 4E 85 F1 | 	sub	fp, #16
2a4d4     A8 01 90 5D |  if_ne	jmp	#LR__4308
2a4d8     0C 4E 05 F1 | 	add	fp, #12
2a4dc     A7 1E C2 FA | 	rdbyte	local01, fp
2a4e0     0C 4E 85 F1 | 	sub	fp, #12
2a4e4     08 1E CE F7 | 	test	local01, #8 wz
2a4e8     94 01 90 AD |  if_e	jmp	#LR__4308
2a4ec     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
2a4f0     54 4E 05 F1 | 	add	fp, #84
2a4f4     A7 FA 61 FC | 	wrlong	result1, fp
2a4f8     24 4E 85 F1 | 	sub	fp, #36
2a4fc     A7 12 02 FB | 	rdlong	arg01, fp
2a500     0E 12 06 F1 | 	add	arg01, #14
2a504     09 FB 61 FC | 	wrlong	result1, arg01
2a508     A7 12 02 FB | 	rdlong	arg01, fp
2a50c     16 12 06 F1 | 	add	arg01, #22
2a510     24 4E 05 F1 | 	add	fp, #36
2a514     A7 14 02 FB | 	rdlong	arg02, fp
2a518     09 15 62 FC | 	wrlong	arg02, arg01
2a51c     10 4E 85 F1 | 	sub	fp, #16
2a520     A7 12 02 FB | 	rdlong	arg01, fp
2a524     14 4E 85 F1 | 	sub	fp, #20
2a528     A7 14 02 FB | 	rdlong	arg02, fp
2a52c     30 4E 85 F1 | 	sub	fp, #48
2a530     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
2a534     48 4E 05 F1 | 	add	fp, #72
2a538     A7 FA 61 FC | 	wrlong	result1, fp
2a53c     18 4E 85 F1 | 	sub	fp, #24
2a540     A7 1E 02 FB | 	rdlong	local01, fp
2a544     0B 1E 06 F1 | 	add	local01, #11
2a548     0F 41 48 FC | 	wrbyte	#32, local01
2a54c     14 4E 05 F1 | 	add	fp, #20
2a550     A7 12 02 FB | 	rdlong	arg01, fp
2a554     14 4E 85 F1 | 	sub	fp, #20
2a558     A7 14 02 FB | 	rdlong	arg02, fp
2a55c     30 4E 85 F1 | 	sub	fp, #48
2a560     00 16 06 F6 | 	mov	arg03, #0
2a564     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
2a568     30 4E 05 F1 | 	add	fp, #48
2a56c     A7 12 02 FB | 	rdlong	arg01, fp
2a570     1C 12 06 F1 | 	add	arg01, #28
2a574     09 01 68 FC | 	wrlong	#0, arg01
2a578     14 4E 05 F1 | 	add	fp, #20
2a57c     A7 1E 02 FB | 	rdlong	local01, fp
2a580     03 1E 06 F1 | 	add	local01, #3
2a584     0F 03 48 FC | 	wrbyte	#1, local01
2a588     04 4E 05 F1 | 	add	fp, #4
2a58c     A7 1E 0A FB | 	rdlong	local01, fp wz
2a590     48 4E 85 F1 | 	sub	fp, #72
2a594     E8 00 90 AD |  if_e	jmp	#LR__4308
2a598     44 4E 05 F1 | 	add	fp, #68
2a59c     A7 1E 02 FB | 	rdlong	local01, fp
2a5a0     30 1E 06 F1 | 	add	local01, #48
2a5a4     0F 1F 02 FB | 	rdlong	local01, local01
2a5a8     14 4E 05 F1 | 	add	fp, #20
2a5ac     A7 1E 62 FC | 	wrlong	local01, fp
2a5b0     44 4E 85 F1 | 	sub	fp, #68
2a5b4     A7 12 02 F6 | 	mov	arg01, fp
2a5b8     34 4E 05 F1 | 	add	fp, #52
2a5bc     A7 14 02 FB | 	rdlong	arg02, fp
2a5c0     48 4E 85 F1 | 	sub	fp, #72
2a5c4     00 16 06 F6 | 	mov	arg03, #0
2a5c8     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
2a5cc     10 4E 05 F1 | 	add	fp, #16
2a5d0     A7 FA 61 FC | 	wrlong	result1, fp
2a5d4     10 4E 85 F1 | 	sub	fp, #16
2a5d8     00 FA 0D F2 | 	cmp	result1, #0 wz
2a5dc     A0 00 90 5D |  if_ne	jmp	#LR__4308
2a5e0     44 4E 05 F1 | 	add	fp, #68
2a5e4     A7 12 02 FB | 	rdlong	arg01, fp
2a5e8     14 4E 05 F1 | 	add	fp, #20
2a5ec     A7 14 02 FB | 	rdlong	arg02, fp
2a5f0     58 4E 85 F1 | 	sub	fp, #88
2a5f4     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
2a5f8     10 4E 05 F1 | 	add	fp, #16
2a5fc     A7 FA 61 FC | 	wrlong	result1, fp
2a600     34 4E 05 F1 | 	add	fp, #52
2a604     A7 18 02 FB | 	rdlong	arg04, fp
2a608     04 4E 05 F1 | 	add	fp, #4
2a60c     A7 1E 02 FB | 	rdlong	local01, fp
2a610     48 4E 85 F1 | 	sub	fp, #72
2a614     01 1E 86 F1 | 	sub	local01, #1
2a618     10 18 06 F1 | 	add	arg04, #16
2a61c     0C 1F 62 FC | 	wrlong	local01, arg04
2a620     5C 00 90 FD | 	jmp	#LR__4308
2a624                 | LR__4305
2a624     10 4E 05 F1 | 	add	fp, #16
2a628     A7 18 0A FB | 	rdlong	arg04, fp wz
2a62c     10 4E 85 F1 | 	sub	fp, #16
2a630     4C 00 90 5D |  if_ne	jmp	#LR__4307
2a634     1A 4E 05 F1 | 	add	fp, #26
2a638     A7 18 C2 FA | 	rdbyte	arg04, fp
2a63c     1A 4E 85 F1 | 	sub	fp, #26
2a640     10 18 CE F7 | 	test	arg04, #16 wz
2a644     10 4E 05 51 |  if_ne	add	fp, #16
2a648     A7 08 68 5C |  if_ne	wrlong	#4, fp
2a64c     10 4E 85 51 |  if_ne	sub	fp, #16
2a650     2C 00 90 5D |  if_ne	jmp	#LR__4306
2a654     0C 4E 05 F1 | 	add	fp, #12
2a658     A7 18 C2 FA | 	rdbyte	arg04, fp
2a65c     0C 4E 85 F1 | 	sub	fp, #12
2a660     02 18 CE F7 | 	test	arg04, #2 wz
2a664     1A 4E 05 51 |  if_ne	add	fp, #26
2a668     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
2a66c     1A 4E 85 51 |  if_ne	sub	fp, #26
2a670     01 1E CE 57 |  if_ne	test	local01, #1 wz
2a674     10 4E 05 51 |  if_ne	add	fp, #16
2a678     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2a67c     10 4E 85 51 |  if_ne	sub	fp, #16
2a680                 | LR__4306
2a680                 | LR__4307
2a680                 | LR__4308
2a680     10 4E 05 F1 | 	add	fp, #16
2a684     A7 1E 0A FB | 	rdlong	local01, fp wz
2a688     10 4E 85 F1 | 	sub	fp, #16
2a68c     60 00 90 5D |  if_ne	jmp	#LR__4309
2a690     0C 4E 05 F1 | 	add	fp, #12
2a694     A7 20 C2 FA | 	rdbyte	local02, fp
2a698     0C 4E 85 F1 | 	sub	fp, #12
2a69c     08 20 CE F7 | 	test	local02, #8 wz
2a6a0     0C 4E 05 51 |  if_ne	add	fp, #12
2a6a4     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
2a6a8     40 20 46 55 |  if_ne	or	local02, #64
2a6ac     A7 20 42 5C |  if_ne	wrbyte	local02, fp
2a6b0     0C 4E 85 51 |  if_ne	sub	fp, #12
2a6b4     04 4E 05 F1 | 	add	fp, #4
2a6b8     A7 20 02 FB | 	rdlong	local02, fp
2a6bc     40 4E 05 F1 | 	add	fp, #64
2a6c0     A7 1E 02 FB | 	rdlong	local01, fp
2a6c4     30 1E 06 F1 | 	add	local01, #48
2a6c8     0F 1F 02 FB | 	rdlong	local01, local01
2a6cc     20 20 06 F1 | 	add	local02, #32
2a6d0     10 1F 62 FC | 	wrlong	local01, local02
2a6d4     40 4E 85 F1 | 	sub	fp, #64
2a6d8     A7 20 02 FB | 	rdlong	local02, fp
2a6dc     2C 4E 05 F1 | 	add	fp, #44
2a6e0     A7 1E 02 FB | 	rdlong	local01, fp
2a6e4     30 4E 85 F1 | 	sub	fp, #48
2a6e8     24 20 06 F1 | 	add	local02, #36
2a6ec     10 1F 62 FC | 	wrlong	local01, local02
2a6f0                 | LR__4309
2a6f0     10 4E 05 F1 | 	add	fp, #16
2a6f4     A7 20 0A FB | 	rdlong	local02, fp wz
2a6f8     10 4E 85 F1 | 	sub	fp, #16
2a6fc     F4 02 90 5D |  if_ne	jmp	#LR__4315
2a700     04 4E 05 F1 | 	add	fp, #4
2a704     A7 20 02 FB | 	rdlong	local02, fp
2a708     40 4E 05 F1 | 	add	fp, #64
2a70c     A7 12 02 FB | 	rdlong	arg01, fp
2a710     14 4E 85 F1 | 	sub	fp, #20
2a714     A7 14 02 FB | 	rdlong	arg02, fp
2a718     30 4E 85 F1 | 	sub	fp, #48
2a71c     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
2a720     08 20 06 F1 | 	add	local02, #8
2a724     10 FB 61 FC | 	wrlong	result1, local02
2a728     04 4E 05 F1 | 	add	fp, #4
2a72c     A7 20 02 FB | 	rdlong	local02, fp
2a730     2C 4E 05 F1 | 	add	fp, #44
2a734     A7 12 02 FB | 	rdlong	arg01, fp
2a738     1C 12 06 F1 | 	add	arg01, #28
2a73c                 | ' {
2a73c                 | ' 
2a73c                 | ' 	return *((DWORD*)ptr);
2a73c     09 FB 01 FB | 	rdlong	result1, arg01
2a740     0C 20 06 F1 | 	add	local02, #12
2a744     10 FB 61 FC | 	wrlong	result1, local02
2a748     2C 4E 85 F1 | 	sub	fp, #44
2a74c     A7 20 02 FB | 	rdlong	local02, fp
2a750     40 4E 05 F1 | 	add	fp, #64
2a754     A7 1E 02 FB | 	rdlong	local01, fp
2a758     10 1F 62 FC | 	wrlong	local01, local02
2a75c     40 4E 85 F1 | 	sub	fp, #64
2a760     A7 20 02 FB | 	rdlong	local02, fp
2a764     40 4E 05 F1 | 	add	fp, #64
2a768     A7 1E 02 FB | 	rdlong	local01, fp
2a76c     06 1E 06 F1 | 	add	local01, #6
2a770     0F 1F E2 FA | 	rdword	local01, local01
2a774     04 20 06 F1 | 	add	local02, #4
2a778     10 1F 52 FC | 	wrword	local01, local02
2a77c     40 4E 85 F1 | 	sub	fp, #64
2a780     A7 20 02 FB | 	rdlong	local02, fp
2a784     08 4E 05 F1 | 	add	fp, #8
2a788     A7 1E C2 FA | 	rdbyte	local01, fp
2a78c     10 20 06 F1 | 	add	local02, #16
2a790     10 1F 42 FC | 	wrbyte	local01, local02
2a794     08 4E 85 F1 | 	sub	fp, #8
2a798     A7 20 02 FB | 	rdlong	local02, fp
2a79c     11 20 06 F1 | 	add	local02, #17
2a7a0     10 01 48 FC | 	wrbyte	#0, local02
2a7a4     A7 20 02 FB | 	rdlong	local02, fp
2a7a8     1C 20 06 F1 | 	add	local02, #28
2a7ac     10 01 68 FC | 	wrlong	#0, local02
2a7b0     A7 20 02 FB | 	rdlong	local02, fp
2a7b4     14 20 06 F1 | 	add	local02, #20
2a7b8     10 01 68 FC | 	wrlong	#0, local02
2a7bc     A7 12 02 FB | 	rdlong	arg01, fp
2a7c0     04 4E 85 F1 | 	sub	fp, #4
2a7c4     28 12 06 F1 | 	add	arg01, #40
2a7c8     00 14 06 F6 | 	mov	arg02, #0
2a7cc     09 16 C6 F9 | 	decod	arg03, #9
2a7d0     98 00 A0 FD | 	call	#\builtin_bytefill_
2a7d4     0C 4E 05 F1 | 	add	fp, #12
2a7d8     A7 20 C2 FA | 	rdbyte	local02, fp
2a7dc     0C 4E 85 F1 | 	sub	fp, #12
2a7e0     20 20 CE F7 | 	test	local02, #32 wz
2a7e4     0C 02 90 AD |  if_e	jmp	#LR__4314
2a7e8     04 4E 05 F1 | 	add	fp, #4
2a7ec     A7 1E 02 FB | 	rdlong	local01, fp
2a7f0     04 4E 85 F1 | 	sub	fp, #4
2a7f4     0C 1E 06 F1 | 	add	local01, #12
2a7f8     0F 21 02 FB | 	rdlong	local02, local01
2a7fc     01 20 16 F2 | 	cmp	local02, #1 wc
2a800     F0 01 90 CD |  if_b	jmp	#LR__4314
2a804     04 4E 05 F1 | 	add	fp, #4
2a808     A7 1E 02 FB | 	rdlong	local01, fp
2a80c     0F 21 02 F6 | 	mov	local02, local01
2a810     0C 1E 06 F1 | 	add	local01, #12
2a814     0F 1F 02 FB | 	rdlong	local01, local01
2a818     14 20 06 F1 | 	add	local02, #20
2a81c     10 1F 62 FC | 	wrlong	local01, local02
2a820     40 4E 05 F1 | 	add	fp, #64
2a824     A7 20 02 FB | 	rdlong	local02, fp
2a828     0A 20 06 F1 | 	add	local02, #10
2a82c     10 21 E2 FA | 	rdword	local02, local02
2a830     09 20 66 F0 | 	shl	local02, #9
2a834     08 4E 05 F1 | 	add	fp, #8
2a838     A7 20 62 FC | 	wrlong	local02, fp
2a83c     48 4E 85 F1 | 	sub	fp, #72
2a840     A7 20 02 FB | 	rdlong	local02, fp
2a844     08 20 06 F1 | 	add	local02, #8
2a848     10 1F 02 FB | 	rdlong	local01, local02
2a84c     4C 4E 05 F1 | 	add	fp, #76
2a850     A7 1E 62 FC | 	wrlong	local01, fp
2a854                 | ' 				fp->fptr = fp->obj.objsize;
2a854                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
2a854                 | ' 				clst = fp->obj.sclust;
2a854                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2a854     4C 4E 85 F1 | 	sub	fp, #76
2a858     A7 20 02 FB | 	rdlong	local02, fp
2a85c     0C 20 06 F1 | 	add	local02, #12
2a860     10 1F 02 FB | 	rdlong	local01, local02
2a864     58 4E 05 F1 | 	add	fp, #88
2a868     A7 1E 62 FC | 	wrlong	local01, fp
2a86c     5C 4E 85 F1 | 	sub	fp, #92
2a870                 | LR__4310
2a870     10 4E 05 F1 | 	add	fp, #16
2a874     A7 20 0A FB | 	rdlong	local02, fp wz
2a878     10 4E 85 F1 | 	sub	fp, #16
2a87c     94 00 90 5D |  if_ne	jmp	#LR__4311
2a880     5C 4E 05 F1 | 	add	fp, #92
2a884     A7 20 02 FB | 	rdlong	local02, fp
2a888     10 4E 85 F1 | 	sub	fp, #16
2a88c     A7 1E 02 FB | 	rdlong	local01, fp
2a890     4C 4E 85 F1 | 	sub	fp, #76
2a894     0F 21 1A F2 | 	cmp	local02, local01 wcz
2a898     78 00 90 ED |  if_be	jmp	#LR__4311
2a89c     04 4E 05 F1 | 	add	fp, #4
2a8a0     A7 12 02 FB | 	rdlong	arg01, fp
2a8a4     4C 4E 05 F1 | 	add	fp, #76
2a8a8     A7 14 02 FB | 	rdlong	arg02, fp
2a8ac     50 4E 85 F1 | 	sub	fp, #80
2a8b0     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
2a8b4     50 4E 05 F1 | 	add	fp, #80
2a8b8     A7 FA 61 FC | 	wrlong	result1, fp
2a8bc     50 4E 85 F1 | 	sub	fp, #80
2a8c0     02 FA 15 F2 | 	cmp	result1, #2 wc
2a8c4     10 4E 05 C1 |  if_b	add	fp, #16
2a8c8     A7 04 68 CC |  if_b	wrlong	#2, fp
2a8cc     10 4E 85 C1 |  if_b	sub	fp, #16
2a8d0     50 4E 05 F1 | 	add	fp, #80
2a8d4     A7 20 02 FB | 	rdlong	local02, fp
2a8d8     50 4E 85 F1 | 	sub	fp, #80
2a8dc     FF FF 7F FF 
2a8e0     FF 21 0E F2 | 	cmp	local02, ##-1 wz
2a8e4     10 4E 05 A1 |  if_e	add	fp, #16
2a8e8     A7 02 68 AC |  if_e	wrlong	#1, fp
2a8ec     10 4E 85 A1 |  if_e	sub	fp, #16
2a8f0     5C 4E 05 F1 | 	add	fp, #92
2a8f4     A7 20 02 FB | 	rdlong	local02, fp
2a8f8     10 4E 85 F1 | 	sub	fp, #16
2a8fc     A7 1E 02 FB | 	rdlong	local01, fp
2a900     0F 21 82 F1 | 	sub	local02, local01
2a904     10 4E 05 F1 | 	add	fp, #16
2a908     A7 20 62 FC | 	wrlong	local02, fp
2a90c     5C 4E 85 F1 | 	sub	fp, #92
2a910     5C FF 9F FD | 	jmp	#LR__4310
2a914                 | LR__4311
2a914     04 4E 05 F1 | 	add	fp, #4
2a918     A7 20 02 FB | 	rdlong	local02, fp
2a91c     4C 4E 05 F1 | 	add	fp, #76
2a920     A7 1E 02 FB | 	rdlong	local01, fp
2a924     18 20 06 F1 | 	add	local02, #24
2a928     10 1F 62 FC | 	wrlong	local01, local02
2a92c     40 4E 85 F1 | 	sub	fp, #64
2a930     A7 20 0A FB | 	rdlong	local02, fp wz
2a934     10 4E 85 F1 | 	sub	fp, #16
2a938     B8 00 90 5D |  if_ne	jmp	#LR__4313
2a93c     5C 4E 05 F1 | 	add	fp, #92
2a940     A7 1E 02 FB | 	rdlong	local01, fp
2a944     5C 4E 85 F1 | 	sub	fp, #92
2a948     FF 1F CE F7 | 	test	local01, #511 wz
2a94c     A4 00 90 AD |  if_e	jmp	#LR__4313
2a950     44 4E 05 F1 | 	add	fp, #68
2a954     A7 12 02 FB | 	rdlong	arg01, fp
2a958     0C 4E 05 F1 | 	add	fp, #12
2a95c     A7 14 02 FB | 	rdlong	arg02, fp
2a960     50 4E 85 F1 | 	sub	fp, #80
2a964     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
2a968     58 4E 05 F1 | 	add	fp, #88
2a96c     A7 FA 61 FC | 	wrlong	result1, fp
2a970     00 FA 4D F2 | 	cmps	result1, #0 wz
2a974     58 4E 85 F1 | 	sub	fp, #88
2a978     10 4E 05 A1 |  if_e	add	fp, #16
2a97c     A7 04 68 AC |  if_e	wrlong	#2, fp
2a980     10 4E 85 A1 |  if_e	sub	fp, #16
2a984     6C 00 90 AD |  if_e	jmp	#LR__4312
2a988     04 4E 05 F1 | 	add	fp, #4
2a98c     A7 20 02 FB | 	rdlong	local02, fp
2a990     54 4E 05 F1 | 	add	fp, #84
2a994     A7 1E 02 FB | 	rdlong	local01, fp
2a998     04 4E 05 F1 | 	add	fp, #4
2a99c     A7 18 02 FB | 	rdlong	arg04, fp
2a9a0     09 18 46 F0 | 	shr	arg04, #9
2a9a4     0C 1F 02 F1 | 	add	local01, arg04
2a9a8     1C 20 06 F1 | 	add	local02, #28
2a9ac     10 1F 62 FC | 	wrlong	local01, local02
2a9b0     18 4E 85 F1 | 	sub	fp, #24
2a9b4     A7 20 02 FB | 	rdlong	local02, fp
2a9b8     01 20 06 F1 | 	add	local02, #1
2a9bc     10 13 C2 FA | 	rdbyte	arg01, local02
2a9c0     40 4E 85 F1 | 	sub	fp, #64
2a9c4     A7 20 02 FB | 	rdlong	local02, fp
2a9c8     10 15 02 F6 | 	mov	arg02, local02
2a9cc     28 14 06 F1 | 	add	arg02, #40
2a9d0     04 4E 85 F1 | 	sub	fp, #4
2a9d4     1C 20 06 F1 | 	add	local02, #28
2a9d8     10 17 02 FB | 	rdlong	arg03, local02
2a9dc     01 18 06 F6 | 	mov	arg04, #1
2a9e0     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
2a9e4     00 FA 0D F2 | 	cmp	result1, #0 wz
2a9e8     10 4E 05 51 |  if_ne	add	fp, #16
2a9ec     A7 02 68 5C |  if_ne	wrlong	#1, fp
2a9f0     10 4E 85 51 |  if_ne	sub	fp, #16
2a9f4                 | LR__4312
2a9f4                 | LR__4313
2a9f4                 | LR__4314
2a9f4                 | LR__4315
2a9f4                 | LR__4316
2a9f4     10 4E 05 F1 | 	add	fp, #16
2a9f8     A7 20 0A FB | 	rdlong	local02, fp wz
2a9fc     10 4E 85 F1 | 	sub	fp, #16
2aa00     04 4E 05 51 |  if_ne	add	fp, #4
2aa04     A7 20 02 5B |  if_ne	rdlong	local02, fp
2aa08     04 4E 85 51 |  if_ne	sub	fp, #4
2aa0c     10 01 68 5C |  if_ne	wrlong	#0, local02
2aa10                 | ' 
2aa10                 | ' 	return res ;
2aa10     10 4E 05 F1 | 	add	fp, #16
2aa14     A7 FA 01 FB | 	rdlong	result1, fp
2aa18     10 4E 85 F1 | 	sub	fp, #16
2aa1c                 | LR__4317
2aa1c     A7 F0 03 F6 | 	mov	ptra, fp
2aa20     B2 00 A0 FD | 	call	#popregs_
2aa24                 | _fatfs_cc_f_open_ret
2aa24     2D 00 64 FD | 	ret
2aa28                 | 
2aa28                 | _fatfs_cc_f_read
2aa28     0E 4A 05 F6 | 	mov	COUNT_, #14
2aa2c     A8 00 A0 FD | 	call	#pushregs_
2aa30     38 F0 07 F1 | 	add	ptra, #56
2aa34     04 4E 05 F1 | 	add	fp, #4
2aa38     A7 12 62 FC | 	wrlong	arg01, fp
2aa3c     04 4E 05 F1 | 	add	fp, #4
2aa40     A7 14 62 FC | 	wrlong	arg02, fp
2aa44     04 4E 05 F1 | 	add	fp, #4
2aa48     A7 16 62 FC | 	wrlong	arg03, fp
2aa4c     04 4E 05 F1 | 	add	fp, #4
2aa50     A7 18 62 FC | 	wrlong	arg04, fp
2aa54     08 4E 85 F1 | 	sub	fp, #8
2aa58     A7 FA 01 FB | 	rdlong	result1, fp
2aa5c     2C 4E 05 F1 | 	add	fp, #44
2aa60     A7 FA 61 FC | 	wrlong	result1, fp
2aa64     24 4E 85 F1 | 	sub	fp, #36
2aa68     A7 FA 01 FB | 	rdlong	result1, fp
2aa6c     FD 00 68 FC | 	wrlong	#0, result1
2aa70     0C 4E 85 F1 | 	sub	fp, #12
2aa74     A7 12 02 FB | 	rdlong	arg01, fp
2aa78     14 4E 05 F1 | 	add	fp, #20
2aa7c     A7 14 02 F6 | 	mov	arg02, fp
2aa80     18 4E 85 F1 | 	sub	fp, #24
2aa84     24 F7 BF FD | 	call	#_fatfs_cc_validate
2aa88     14 4E 05 F1 | 	add	fp, #20
2aa8c     A7 FA 61 FC | 	wrlong	result1, fp
2aa90     00 FA 4D F2 | 	cmps	result1, #0 wz
2aa94     14 4E 85 F1 | 	sub	fp, #20
2aa98     20 00 90 5D |  if_ne	jmp	#LR__4320
2aa9c     04 4E 05 F1 | 	add	fp, #4
2aaa0     A7 14 02 FB | 	rdlong	arg02, fp
2aaa4     11 14 06 F1 | 	add	arg02, #17
2aaa8     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2aaac     10 4E 05 F1 | 	add	fp, #16
2aab0     A7 14 62 FC | 	wrlong	arg02, fp
2aab4     14 4E 85 F1 | 	sub	fp, #20
2aab8     10 00 90 AD |  if_e	jmp	#LR__4321
2aabc                 | LR__4320
2aabc     14 4E 05 F1 | 	add	fp, #20
2aac0     A7 FA 01 FB | 	rdlong	result1, fp
2aac4     14 4E 85 F1 | 	sub	fp, #20
2aac8     EC 05 90 FD | 	jmp	#LR__4340
2aacc                 | LR__4321
2aacc     04 4E 05 F1 | 	add	fp, #4
2aad0     A7 18 02 FB | 	rdlong	arg04, fp
2aad4     04 4E 85 F1 | 	sub	fp, #4
2aad8     10 18 06 F1 | 	add	arg04, #16
2aadc     0C 19 C2 FA | 	rdbyte	arg04, arg04
2aae0     01 18 CE F7 | 	test	arg04, #1 wz
2aae4     07 FA 05 A6 |  if_e	mov	result1, #7
2aae8     CC 05 90 AD |  if_e	jmp	#LR__4340
2aaec     04 4E 05 F1 | 	add	fp, #4
2aaf0     A7 1E 02 FB | 	rdlong	local01, fp
2aaf4     0F 21 02 F6 | 	mov	local02, local01
2aaf8     0C 20 06 F1 | 	add	local02, #12
2aafc     10 23 02 FB | 	rdlong	local03, local02
2ab00     14 1E 06 F1 | 	add	local01, #20
2ab04     0F 1F 02 FB | 	rdlong	local01, local01
2ab08     0F 23 82 F1 | 	sub	local03, local01
2ab0c     20 4E 05 F1 | 	add	fp, #32
2ab10     A7 22 62 FC | 	wrlong	local03, fp
2ab14     18 4E 85 F1 | 	sub	fp, #24
2ab18     A7 24 02 FB | 	rdlong	local04, fp
2ab1c     0C 4E 85 F1 | 	sub	fp, #12
2ab20     11 25 1A F2 | 	cmp	local04, local03 wcz
2ab24     24 4E 05 11 |  if_a	add	fp, #36
2ab28     A7 24 02 1B |  if_a	rdlong	local04, fp
2ab2c     18 4E 85 11 |  if_a	sub	fp, #24
2ab30     A7 24 62 1C |  if_a	wrlong	local04, fp
2ab34     0C 4E 85 11 |  if_a	sub	fp, #12
2ab38                 | ' 
2ab38                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
2ab38                 | LR__4322
2ab38     0C 4E 05 F1 | 	add	fp, #12
2ab3c     A7 20 02 FB | 	rdlong	local02, fp
2ab40     0C 4E 85 F1 | 	sub	fp, #12
2ab44     10 25 02 F6 | 	mov	local04, local02
2ab48     01 24 16 F2 | 	cmp	local04, #1 wc
2ab4c     64 05 90 CD |  if_b	jmp	#LR__4339
2ab50     04 4E 05 F1 | 	add	fp, #4
2ab54     A7 22 02 FB | 	rdlong	local03, fp
2ab58     04 4E 85 F1 | 	sub	fp, #4
2ab5c     14 22 06 F1 | 	add	local03, #20
2ab60     11 23 02 FB | 	rdlong	local03, local03
2ab64     FF 23 CE F7 | 	test	local03, #511 wz
2ab68     3C 04 90 5D |  if_ne	jmp	#LR__4337
2ab6c     04 4E 05 F1 | 	add	fp, #4
2ab70     A7 1E 02 FB | 	rdlong	local01, fp
2ab74     14 1E 06 F1 | 	add	local01, #20
2ab78     0F 23 02 FB | 	rdlong	local03, local01
2ab7c     09 22 46 F0 | 	shr	local03, #9
2ab80     14 4E 05 F1 | 	add	fp, #20
2ab84     A7 26 02 FB | 	rdlong	local05, fp
2ab88     13 29 02 F6 | 	mov	local06, local05
2ab8c     0A 28 06 F1 | 	add	local06, #10
2ab90     14 2B E2 FA | 	rdword	local07, local06
2ab94     0A 28 86 F1 | 	sub	local06, #10
2ab98     15 2D 32 F9 | 	getword	local08, local07, #0
2ab9c     01 2C 86 F1 | 	sub	local08, #1
2aba0     16 23 0A F5 | 	and	local03, local08 wz
2aba4     18 4E 05 F1 | 	add	fp, #24
2aba8     A7 22 62 FC | 	wrlong	local03, fp
2abac     30 4E 85 F1 | 	sub	fp, #48
2abb0     E0 00 90 5D |  if_ne	jmp	#LR__4327
2abb4     04 4E 05 F1 | 	add	fp, #4
2abb8     A7 22 02 FB | 	rdlong	local03, fp
2abbc     04 4E 85 F1 | 	sub	fp, #4
2abc0     14 22 06 F1 | 	add	local03, #20
2abc4     11 23 0A FB | 	rdlong	local03, local03 wz
2abc8     20 00 90 5D |  if_ne	jmp	#LR__4323
2abcc     04 4E 05 F1 | 	add	fp, #4
2abd0     A7 22 02 FB | 	rdlong	local03, fp
2abd4     08 22 06 F1 | 	add	local03, #8
2abd8     11 23 02 FB | 	rdlong	local03, local03
2abdc     18 4E 05 F1 | 	add	fp, #24
2abe0     A7 22 62 FC | 	wrlong	local03, fp
2abe4     1C 4E 85 F1 | 	sub	fp, #28
2abe8     28 00 90 FD | 	jmp	#LR__4324
2abec                 | LR__4323
2abec     04 4E 05 F1 | 	add	fp, #4
2abf0     A7 2C 02 FB | 	rdlong	local08, fp
2abf4     16 13 02 F6 | 	mov	arg01, local08
2abf8     04 4E 85 F1 | 	sub	fp, #4
2abfc     18 2C 06 F1 | 	add	local08, #24
2ac00     16 15 02 FB | 	rdlong	arg02, local08
2ac04     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
2ac08     1C 4E 05 F1 | 	add	fp, #28
2ac0c     A7 FA 61 FC | 	wrlong	result1, fp
2ac10     1C 4E 85 F1 | 	sub	fp, #28
2ac14                 | LR__4324
2ac14     1C 4E 05 F1 | 	add	fp, #28
2ac18     A7 22 02 FB | 	rdlong	local03, fp
2ac1c     1C 4E 85 F1 | 	sub	fp, #28
2ac20     02 22 16 F2 | 	cmp	local03, #2 wc
2ac24     1C 00 90 3D |  if_ae	jmp	#LR__4325
2ac28     04 4E 05 F1 | 	add	fp, #4
2ac2c     A7 22 02 FB | 	rdlong	local03, fp
2ac30     04 4E 85 F1 | 	sub	fp, #4
2ac34     11 22 06 F1 | 	add	local03, #17
2ac38     11 05 48 FC | 	wrbyte	#2, local03
2ac3c     02 FA 05 F6 | 	mov	result1, #2
2ac40     74 04 90 FD | 	jmp	#LR__4340
2ac44                 | LR__4325
2ac44     1C 4E 05 F1 | 	add	fp, #28
2ac48     A7 22 02 FB | 	rdlong	local03, fp
2ac4c     1C 4E 85 F1 | 	sub	fp, #28
2ac50     FF FF 7F FF 
2ac54     FF 23 0E F2 | 	cmp	local03, ##-1 wz
2ac58     1C 00 90 5D |  if_ne	jmp	#LR__4326
2ac5c     04 4E 05 F1 | 	add	fp, #4
2ac60     A7 22 02 FB | 	rdlong	local03, fp
2ac64     04 4E 85 F1 | 	sub	fp, #4
2ac68     11 22 06 F1 | 	add	local03, #17
2ac6c     11 03 48 FC | 	wrbyte	#1, local03
2ac70     01 FA 05 F6 | 	mov	result1, #1
2ac74     40 04 90 FD | 	jmp	#LR__4340
2ac78                 | LR__4326
2ac78     04 4E 05 F1 | 	add	fp, #4
2ac7c     A7 22 02 FB | 	rdlong	local03, fp
2ac80     18 4E 05 F1 | 	add	fp, #24
2ac84     A7 2C 02 FB | 	rdlong	local08, fp
2ac88     1C 4E 85 F1 | 	sub	fp, #28
2ac8c     18 22 06 F1 | 	add	local03, #24
2ac90     11 2D 62 FC | 	wrlong	local08, local03
2ac94                 | LR__4327
2ac94     18 4E 05 F1 | 	add	fp, #24
2ac98     A7 12 02 FB | 	rdlong	arg01, fp
2ac9c     14 4E 85 F1 | 	sub	fp, #20
2aca0     A7 22 02 FB | 	rdlong	local03, fp
2aca4     04 4E 85 F1 | 	sub	fp, #4
2aca8     18 22 06 F1 | 	add	local03, #24
2acac     11 15 02 FB | 	rdlong	arg02, local03
2acb0     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
2acb4     20 4E 05 F1 | 	add	fp, #32
2acb8     A7 FA 61 FC | 	wrlong	result1, fp
2acbc     20 4E 85 F1 | 	sub	fp, #32
2acc0     00 FA 0D F2 | 	cmp	result1, #0 wz
2acc4     1C 00 90 5D |  if_ne	jmp	#LR__4328
2acc8     04 4E 05 F1 | 	add	fp, #4
2accc     A7 22 02 FB | 	rdlong	local03, fp
2acd0     04 4E 85 F1 | 	sub	fp, #4
2acd4     11 22 06 F1 | 	add	local03, #17
2acd8     11 05 48 FC | 	wrbyte	#2, local03
2acdc     02 FA 05 F6 | 	mov	result1, #2
2ace0     D4 03 90 FD | 	jmp	#LR__4340
2ace4                 | LR__4328
2ace4     20 4E 05 F1 | 	add	fp, #32
2ace8     A7 22 02 FB | 	rdlong	local03, fp
2acec     10 4E 05 F1 | 	add	fp, #16
2acf0     A7 2C 02 FB | 	rdlong	local08, fp
2acf4     16 23 02 F1 | 	add	local03, local08
2acf8     10 4E 85 F1 | 	sub	fp, #16
2acfc     A7 22 62 FC | 	wrlong	local03, fp
2ad00     14 4E 85 F1 | 	sub	fp, #20
2ad04     A7 22 02 FB | 	rdlong	local03, fp
2ad08     09 22 46 F0 | 	shr	local03, #9
2ad0c     20 4E 05 F1 | 	add	fp, #32
2ad10     A7 22 62 FC | 	wrlong	local03, fp
2ad14     2C 4E 85 F1 | 	sub	fp, #44
2ad18     01 22 16 F2 | 	cmp	local03, #1 wc
2ad1c     5C 01 90 CD |  if_b	jmp	#LR__4332
2ad20     30 4E 05 F1 | 	add	fp, #48
2ad24     A7 22 02 FB | 	rdlong	local03, fp
2ad28     04 4E 85 F1 | 	sub	fp, #4
2ad2c     A7 2C 02 FB | 	rdlong	local08, fp
2ad30     16 23 02 F1 | 	add	local03, local08
2ad34     14 4E 85 F1 | 	sub	fp, #20
2ad38     A7 2C 02 FB | 	rdlong	local08, fp
2ad3c     18 4E 85 F1 | 	sub	fp, #24
2ad40     0A 2C 06 F1 | 	add	local08, #10
2ad44     16 2D E2 FA | 	rdword	local08, local08
2ad48     16 23 1A F2 | 	cmp	local03, local08 wcz
2ad4c     28 00 90 ED |  if_be	jmp	#LR__4329
2ad50     18 4E 05 F1 | 	add	fp, #24
2ad54     A7 1E 02 FB | 	rdlong	local01, fp
2ad58     0A 1E 06 F1 | 	add	local01, #10
2ad5c     0F 23 E2 FA | 	rdword	local03, local01
2ad60     18 4E 05 F1 | 	add	fp, #24
2ad64     A7 2C 02 FB | 	rdlong	local08, fp
2ad68     16 23 82 F1 | 	sub	local03, local08
2ad6c     04 4E 85 F1 | 	sub	fp, #4
2ad70     A7 22 62 FC | 	wrlong	local03, fp
2ad74     2C 4E 85 F1 | 	sub	fp, #44
2ad78                 | LR__4329
2ad78     18 4E 05 F1 | 	add	fp, #24
2ad7c     A7 1E 02 FB | 	rdlong	local01, fp
2ad80     01 1E 06 F1 | 	add	local01, #1
2ad84     0F 13 C2 FA | 	rdbyte	arg01, local01
2ad88     1C 4E 05 F1 | 	add	fp, #28
2ad8c     A7 14 02 FB | 	rdlong	arg02, fp
2ad90     14 4E 85 F1 | 	sub	fp, #20
2ad94     A7 16 02 FB | 	rdlong	arg03, fp
2ad98     0C 4E 05 F1 | 	add	fp, #12
2ad9c     A7 18 02 FB | 	rdlong	arg04, fp
2ada0     2C 4E 85 F1 | 	sub	fp, #44
2ada4     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
2ada8     00 FA 0D F2 | 	cmp	result1, #0 wz
2adac     1C 00 90 AD |  if_e	jmp	#LR__4330
2adb0     04 4E 05 F1 | 	add	fp, #4
2adb4     A7 22 02 FB | 	rdlong	local03, fp
2adb8     04 4E 85 F1 | 	sub	fp, #4
2adbc     11 22 06 F1 | 	add	local03, #17
2adc0     11 03 48 FC | 	wrbyte	#1, local03
2adc4     01 FA 05 F6 | 	mov	result1, #1
2adc8     EC 02 90 FD | 	jmp	#LR__4340
2adcc                 | LR__4330
2adcc     04 4E 05 F1 | 	add	fp, #4
2add0     A7 1E 02 FB | 	rdlong	local01, fp
2add4     04 4E 85 F1 | 	sub	fp, #4
2add8     10 1E 06 F1 | 	add	local01, #16
2addc     0F 23 C2 FA | 	rdbyte	local03, local01
2ade0     80 22 CE F7 | 	test	local03, #128 wz
2ade4     78 00 90 AD |  if_e	jmp	#LR__4331
2ade8     04 4E 05 F1 | 	add	fp, #4
2adec     A7 2C 02 FB | 	rdlong	local08, fp
2adf0     1C 2C 06 F1 | 	add	local08, #28
2adf4     16 2D 02 FB | 	rdlong	local08, local08
2adf8     1C 4E 05 F1 | 	add	fp, #28
2adfc     A7 2E 02 FB | 	rdlong	local09, fp
2ae00     17 2D 82 F1 | 	sub	local08, local09
2ae04     0C 4E 05 F1 | 	add	fp, #12
2ae08     A7 30 02 FB | 	rdlong	local10, fp
2ae0c     2C 4E 85 F1 | 	sub	fp, #44
2ae10     18 33 02 F6 | 	mov	local11, local10
2ae14     19 2D 12 F2 | 	cmp	local08, local11 wc
2ae18     44 00 90 3D |  if_ae	jmp	#LR__4331
2ae1c     34 4E 05 F1 | 	add	fp, #52
2ae20     A7 12 02 FB | 	rdlong	arg01, fp
2ae24     30 4E 85 F1 | 	sub	fp, #48
2ae28     A7 14 02 FB | 	rdlong	arg02, fp
2ae2c     0A 33 02 F6 | 	mov	local11, arg02
2ae30     1C 32 06 F1 | 	add	local11, #28
2ae34     19 2F 02 FB | 	rdlong	local09, local11
2ae38     1C 4E 05 F1 | 	add	fp, #28
2ae3c     A7 26 02 FB | 	rdlong	local05, fp
2ae40     13 2F 82 F1 | 	sub	local09, local05
2ae44     09 2E 66 F0 | 	shl	local09, #9
2ae48     17 33 02 F6 | 	mov	local11, local09
2ae4c     17 13 02 F1 | 	add	arg01, local09
2ae50     20 4E 85 F1 | 	sub	fp, #32
2ae54     28 14 06 F1 | 	add	arg02, #40
2ae58     09 16 C6 F9 | 	decod	arg03, #9
2ae5c     BC 48 BF FD | 	call	#__system____builtin_memmove
2ae60                 | LR__4331
2ae60     2C 4E 05 F1 | 	add	fp, #44
2ae64     A7 22 02 FB | 	rdlong	local03, fp
2ae68     09 22 66 F0 | 	shl	local03, #9
2ae6c     04 4E 85 F1 | 	sub	fp, #4
2ae70     A7 22 62 FC | 	wrlong	local03, fp
2ae74     28 4E 85 F1 | 	sub	fp, #40
2ae78                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
2ae78                 | ' 				}
2ae78                 | ' 
2ae78                 | ' 
2ae78                 | ' 				rcnt =  ((UINT) 512 )  * cc;
2ae78                 | ' 				continue;
2ae78     B4 01 90 FD | 	jmp	#LR__4338
2ae7c                 | LR__4332
2ae7c     04 4E 05 F1 | 	add	fp, #4
2ae80     A7 22 02 FB | 	rdlong	local03, fp
2ae84     1C 22 06 F1 | 	add	local03, #28
2ae88     11 23 02 FB | 	rdlong	local03, local03
2ae8c     1C 4E 05 F1 | 	add	fp, #28
2ae90     A7 1E 02 FB | 	rdlong	local01, fp
2ae94     20 4E 85 F1 | 	sub	fp, #32
2ae98     0F 23 0A F2 | 	cmp	local03, local01 wz
2ae9c     EC 00 90 AD |  if_e	jmp	#LR__4336
2aea0     04 4E 05 F1 | 	add	fp, #4
2aea4     A7 1E 02 FB | 	rdlong	local01, fp
2aea8     04 4E 85 F1 | 	sub	fp, #4
2aeac     10 1E 06 F1 | 	add	local01, #16
2aeb0     0F 23 C2 FA | 	rdbyte	local03, local01
2aeb4     80 22 CE F7 | 	test	local03, #128 wz
2aeb8     7C 00 90 AD |  if_e	jmp	#LR__4334
2aebc     18 4E 05 F1 | 	add	fp, #24
2aec0     A7 1E 02 FB | 	rdlong	local01, fp
2aec4     01 1E 06 F1 | 	add	local01, #1
2aec8     0F 13 C2 FA | 	rdbyte	arg01, local01
2aecc     14 4E 85 F1 | 	sub	fp, #20
2aed0     A7 22 02 FB | 	rdlong	local03, fp
2aed4     11 15 02 F6 | 	mov	arg02, local03
2aed8     28 14 06 F1 | 	add	arg02, #40
2aedc     04 4E 85 F1 | 	sub	fp, #4
2aee0     1C 22 06 F1 | 	add	local03, #28
2aee4     11 17 02 FB | 	rdlong	arg03, local03
2aee8     01 18 06 F6 | 	mov	arg04, #1
2aeec     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
2aef0     00 FA 0D F2 | 	cmp	result1, #0 wz
2aef4     1C 00 90 AD |  if_e	jmp	#LR__4333
2aef8     04 4E 05 F1 | 	add	fp, #4
2aefc     A7 22 02 FB | 	rdlong	local03, fp
2af00     04 4E 85 F1 | 	sub	fp, #4
2af04     11 22 06 F1 | 	add	local03, #17
2af08     11 03 48 FC | 	wrbyte	#1, local03
2af0c     01 FA 05 F6 | 	mov	result1, #1
2af10     A4 01 90 FD | 	jmp	#LR__4340
2af14                 | LR__4333
2af14     04 4E 05 F1 | 	add	fp, #4
2af18     A7 32 02 FB | 	rdlong	local11, fp
2af1c     19 23 02 F6 | 	mov	local03, local11
2af20     04 4E 85 F1 | 	sub	fp, #4
2af24     10 32 06 F1 | 	add	local11, #16
2af28     19 33 C2 FA | 	rdbyte	local11, local11
2af2c     7F 32 06 F5 | 	and	local11, #127
2af30     10 22 06 F1 | 	add	local03, #16
2af34     11 33 42 FC | 	wrbyte	local11, local03
2af38                 | LR__4334
2af38     18 4E 05 F1 | 	add	fp, #24
2af3c     A7 1E 02 FB | 	rdlong	local01, fp
2af40     01 1E 06 F1 | 	add	local01, #1
2af44     0F 13 C2 FA | 	rdbyte	arg01, local01
2af48     14 4E 85 F1 | 	sub	fp, #20
2af4c     A7 14 02 FB | 	rdlong	arg02, fp
2af50     28 14 06 F1 | 	add	arg02, #40
2af54     1C 4E 05 F1 | 	add	fp, #28
2af58     A7 16 02 FB | 	rdlong	arg03, fp
2af5c     20 4E 85 F1 | 	sub	fp, #32
2af60     01 18 06 F6 | 	mov	arg04, #1
2af64     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
2af68     00 FA 0D F2 | 	cmp	result1, #0 wz
2af6c     1C 00 90 AD |  if_e	jmp	#LR__4335
2af70     04 4E 05 F1 | 	add	fp, #4
2af74     A7 22 02 FB | 	rdlong	local03, fp
2af78     04 4E 85 F1 | 	sub	fp, #4
2af7c     11 22 06 F1 | 	add	local03, #17
2af80     11 03 48 FC | 	wrbyte	#1, local03
2af84     01 FA 05 F6 | 	mov	result1, #1
2af88     2C 01 90 FD | 	jmp	#LR__4340
2af8c                 | LR__4335
2af8c                 | LR__4336
2af8c     04 4E 05 F1 | 	add	fp, #4
2af90     A7 22 02 FB | 	rdlong	local03, fp
2af94     1C 4E 05 F1 | 	add	fp, #28
2af98     A7 32 02 FB | 	rdlong	local11, fp
2af9c     20 4E 85 F1 | 	sub	fp, #32
2afa0     1C 22 06 F1 | 	add	local03, #28
2afa4     11 33 62 FC | 	wrlong	local11, local03
2afa8                 | LR__4337
2afa8     04 4E 05 F1 | 	add	fp, #4
2afac     A7 1E 02 FB | 	rdlong	local01, fp
2afb0     14 1E 06 F1 | 	add	local01, #20
2afb4     0F 33 02 FB | 	rdlong	local11, local01
2afb8     FF 33 06 F5 | 	and	local11, #511
2afbc     09 22 C6 F9 | 	decod	local03, #9
2afc0     19 23 82 F1 | 	sub	local03, local11
2afc4     24 4E 05 F1 | 	add	fp, #36
2afc8     A7 22 62 FC | 	wrlong	local03, fp
2afcc     1C 4E 85 F1 | 	sub	fp, #28
2afd0     A7 32 02 FB | 	rdlong	local11, fp
2afd4     0C 4E 85 F1 | 	sub	fp, #12
2afd8     19 23 1A F2 | 	cmp	local03, local11 wcz
2afdc     0C 4E 05 11 |  if_a	add	fp, #12
2afe0     A7 22 02 1B |  if_a	rdlong	local03, fp
2afe4     1C 4E 05 11 |  if_a	add	fp, #28
2afe8     A7 22 62 1C |  if_a	wrlong	local03, fp
2afec     28 4E 85 11 |  if_a	sub	fp, #40
2aff0     34 4E 05 F1 | 	add	fp, #52
2aff4     A7 12 02 FB | 	rdlong	arg01, fp
2aff8     30 4E 85 F1 | 	sub	fp, #48
2affc     A7 28 02 FB | 	rdlong	local06, fp
2b000     14 15 02 F6 | 	mov	arg02, local06
2b004     28 14 06 F1 | 	add	arg02, #40
2b008     14 28 06 F1 | 	add	local06, #20
2b00c     14 33 02 FB | 	rdlong	local11, local06
2b010     19 2F 02 F6 | 	mov	local09, local11
2b014     17 31 02 F6 | 	mov	local10, local09
2b018     FF 31 06 F5 | 	and	local10, #511
2b01c     18 15 02 F1 | 	add	arg02, local10
2b020     24 4E 05 F1 | 	add	fp, #36
2b024     A7 16 02 FB | 	rdlong	arg03, fp
2b028     28 4E 85 F1 | 	sub	fp, #40
2b02c     EC 46 BF FD | 	call	#__system____builtin_memmove
2b030                 | LR__4338
2b030     0C 4E 05 F1 | 	add	fp, #12
2b034     A7 22 02 FB | 	rdlong	local03, fp
2b038     1C 4E 05 F1 | 	add	fp, #28
2b03c     A7 2C 02 FB | 	rdlong	local08, fp
2b040     16 23 82 F1 | 	sub	local03, local08
2b044     1C 4E 85 F1 | 	sub	fp, #28
2b048     A7 22 62 FC | 	wrlong	local03, fp
2b04c     04 4E 05 F1 | 	add	fp, #4
2b050     A7 1E 02 FB | 	rdlong	local01, fp
2b054     0F 2B 02 FB | 	rdlong	local07, local01
2b058     18 4E 05 F1 | 	add	fp, #24
2b05c     A7 2C 02 FB | 	rdlong	local08, fp
2b060     16 2B 02 F1 | 	add	local07, local08
2b064     0F 2B 62 FC | 	wrlong	local07, local01
2b068     0C 4E 05 F1 | 	add	fp, #12
2b06c     A7 22 02 FB | 	rdlong	local03, fp
2b070     0C 4E 85 F1 | 	sub	fp, #12
2b074     A7 34 02 FB | 	rdlong	local12, fp
2b078     1A 23 02 F1 | 	add	local03, local12
2b07c     0C 4E 05 F1 | 	add	fp, #12
2b080     A7 22 62 FC | 	wrlong	local03, fp
2b084     30 4E 85 F1 | 	sub	fp, #48
2b088     A7 36 02 FB | 	rdlong	local13, fp
2b08c     1B 23 02 F6 | 	mov	local03, local13
2b090     14 36 06 F1 | 	add	local13, #20
2b094     1B 39 02 FB | 	rdlong	local14, local13
2b098     24 4E 05 F1 | 	add	fp, #36
2b09c     A7 28 02 FB | 	rdlong	local06, fp
2b0a0     28 4E 85 F1 | 	sub	fp, #40
2b0a4     14 39 02 F1 | 	add	local14, local06
2b0a8     14 22 06 F1 | 	add	local03, #20
2b0ac     11 39 62 FC | 	wrlong	local14, local03
2b0b0     84 FA 9F FD | 	jmp	#LR__4322
2b0b4                 | LR__4339
2b0b4                 | ' 
2b0b4                 | ' 
2b0b4                 | ' 
2b0b4                 | ' 
2b0b4                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
2b0b4                 | ' 
2b0b4                 | ' 	}
2b0b4                 | ' 
2b0b4                 | ' 	return FR_OK ;
2b0b4     00 FA 05 F6 | 	mov	result1, #0
2b0b8                 | LR__4340
2b0b8     A7 F0 03 F6 | 	mov	ptra, fp
2b0bc     B2 00 A0 FD | 	call	#popregs_
2b0c0                 | _fatfs_cc_f_read_ret
2b0c0     2D 00 64 FD | 	ret
2b0c4                 | 
2b0c4                 | _fatfs_cc_f_write
2b0c4     15 4A 05 F6 | 	mov	COUNT_, #21
2b0c8     A8 00 A0 FD | 	call	#pushregs_
2b0cc     34 F0 07 F1 | 	add	ptra, #52
2b0d0     04 4E 05 F1 | 	add	fp, #4
2b0d4     A7 12 62 FC | 	wrlong	arg01, fp
2b0d8     04 4E 05 F1 | 	add	fp, #4
2b0dc     A7 14 62 FC | 	wrlong	arg02, fp
2b0e0     04 4E 05 F1 | 	add	fp, #4
2b0e4     A7 16 62 FC | 	wrlong	arg03, fp
2b0e8     04 4E 05 F1 | 	add	fp, #4
2b0ec     A7 18 62 FC | 	wrlong	arg04, fp
2b0f0     08 4E 85 F1 | 	sub	fp, #8
2b0f4     A7 FA 01 FB | 	rdlong	result1, fp
2b0f8     28 4E 05 F1 | 	add	fp, #40
2b0fc     A7 FA 61 FC | 	wrlong	result1, fp
2b100     20 4E 85 F1 | 	sub	fp, #32
2b104     A7 FA 01 FB | 	rdlong	result1, fp
2b108     FD 00 68 FC | 	wrlong	#0, result1
2b10c     0C 4E 85 F1 | 	sub	fp, #12
2b110     A7 12 02 FB | 	rdlong	arg01, fp
2b114     14 4E 05 F1 | 	add	fp, #20
2b118     A7 14 02 F6 | 	mov	arg02, fp
2b11c     18 4E 85 F1 | 	sub	fp, #24
2b120     88 F0 BF FD | 	call	#_fatfs_cc_validate
2b124     14 4E 05 F1 | 	add	fp, #20
2b128     A7 FA 61 FC | 	wrlong	result1, fp
2b12c     00 FA 4D F2 | 	cmps	result1, #0 wz
2b130     14 4E 85 F1 | 	sub	fp, #20
2b134     20 00 90 5D |  if_ne	jmp	#LR__4350
2b138     04 4E 05 F1 | 	add	fp, #4
2b13c     A7 14 02 FB | 	rdlong	arg02, fp
2b140     11 14 06 F1 | 	add	arg02, #17
2b144     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2b148     10 4E 05 F1 | 	add	fp, #16
2b14c     A7 14 62 FC | 	wrlong	arg02, fp
2b150     14 4E 85 F1 | 	sub	fp, #20
2b154     10 00 90 AD |  if_e	jmp	#LR__4351
2b158                 | LR__4350
2b158     14 4E 05 F1 | 	add	fp, #20
2b15c     A7 FA 01 FB | 	rdlong	result1, fp
2b160     14 4E 85 F1 | 	sub	fp, #20
2b164     44 07 90 FD | 	jmp	#LR__4373
2b168                 | LR__4351
2b168     04 4E 05 F1 | 	add	fp, #4
2b16c     A7 14 02 FB | 	rdlong	arg02, fp
2b170     04 4E 85 F1 | 	sub	fp, #4
2b174     10 14 06 F1 | 	add	arg02, #16
2b178     0A 15 C2 FA | 	rdbyte	arg02, arg02
2b17c     02 14 CE F7 | 	test	arg02, #2 wz
2b180     07 FA 05 A6 |  if_e	mov	result1, #7
2b184     24 07 90 AD |  if_e	jmp	#LR__4373
2b188     04 4E 05 F1 | 	add	fp, #4
2b18c     A7 14 02 FB | 	rdlong	arg02, fp
2b190     0A 13 02 F6 | 	mov	arg01, arg02
2b194     14 12 06 F1 | 	add	arg01, #20
2b198     09 13 02 FB | 	rdlong	arg01, arg01
2b19c     08 4E 05 F1 | 	add	fp, #8
2b1a0     A7 FA 01 FB | 	rdlong	result1, fp
2b1a4     FD 12 02 F1 | 	add	arg01, result1
2b1a8     0C 4E 85 F1 | 	sub	fp, #12
2b1ac     14 14 06 F1 | 	add	arg02, #20
2b1b0     0A FB 01 FB | 	rdlong	result1, arg02
2b1b4     FD 12 12 F2 | 	cmp	arg01, result1 wc
2b1b8     24 00 90 3D |  if_ae	jmp	#LR__4352
2b1bc     04 4E 05 F1 | 	add	fp, #4
2b1c0     A7 14 02 FB | 	rdlong	arg02, fp
2b1c4     01 FA 65 F6 | 	neg	result1, #1
2b1c8     14 14 06 F1 | 	add	arg02, #20
2b1cc     0A 15 02 FB | 	rdlong	arg02, arg02
2b1d0     0A FB 81 F1 | 	sub	result1, arg02
2b1d4     08 4E 05 F1 | 	add	fp, #8
2b1d8     A7 FA 61 FC | 	wrlong	result1, fp
2b1dc     0C 4E 85 F1 | 	sub	fp, #12
2b1e0                 | LR__4352
2b1e0                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2b1e0                 | ' 	}
2b1e0                 | ' 
2b1e0                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
2b1e0                 | LR__4353
2b1e0     0C 4E 05 F1 | 	add	fp, #12
2b1e4     A7 FA 01 FB | 	rdlong	result1, fp
2b1e8     0C 4E 85 F1 | 	sub	fp, #12
2b1ec     01 FA 15 F2 | 	cmp	result1, #1 wc
2b1f0     90 06 90 CD |  if_b	jmp	#LR__4372
2b1f4     04 4E 05 F1 | 	add	fp, #4
2b1f8     A7 FA 01 FB | 	rdlong	result1, fp
2b1fc     04 4E 85 F1 | 	sub	fp, #4
2b200     14 FA 05 F1 | 	add	result1, #20
2b204     FD FA 01 FB | 	rdlong	result1, result1
2b208     FF FB CD F7 | 	test	result1, #511 wz
2b20c     D8 04 90 5D |  if_ne	jmp	#LR__4368
2b210     04 4E 05 F1 | 	add	fp, #4
2b214     A7 FA 01 FB | 	rdlong	result1, fp
2b218     14 FA 05 F1 | 	add	result1, #20
2b21c     FD FA 01 FB | 	rdlong	result1, result1
2b220     09 FA 45 F0 | 	shr	result1, #9
2b224     14 4E 05 F1 | 	add	fp, #20
2b228     A7 14 02 FB | 	rdlong	arg02, fp
2b22c     0A 14 06 F1 | 	add	arg02, #10
2b230     0A 19 E2 FA | 	rdword	arg04, arg02
2b234     0C 15 32 F9 | 	getword	arg02, arg04, #0
2b238     01 14 86 F1 | 	sub	arg02, #1
2b23c     0A FB 09 F5 | 	and	result1, arg02 wz
2b240     14 4E 05 F1 | 	add	fp, #20
2b244     A7 FA 61 FC | 	wrlong	result1, fp
2b248     2C 4E 85 F1 | 	sub	fp, #44
2b24c     44 01 90 5D |  if_ne	jmp	#LR__4359
2b250     04 4E 05 F1 | 	add	fp, #4
2b254     A7 FA 01 FB | 	rdlong	result1, fp
2b258     04 4E 85 F1 | 	sub	fp, #4
2b25c     14 FA 05 F1 | 	add	result1, #20
2b260     FD 14 0A FB | 	rdlong	arg02, result1 wz
2b264     44 00 90 5D |  if_ne	jmp	#LR__4354
2b268     04 4E 05 F1 | 	add	fp, #4
2b26c     A7 14 02 FB | 	rdlong	arg02, fp
2b270     08 14 06 F1 | 	add	arg02, #8
2b274     0A 15 0A FB | 	rdlong	arg02, arg02 wz
2b278     18 4E 05 F1 | 	add	fp, #24
2b27c     A7 14 62 FC | 	wrlong	arg02, fp
2b280     1C 4E 85 F1 | 	sub	fp, #28
2b284     4C 00 90 5D |  if_ne	jmp	#LR__4355
2b288     04 4E 05 F1 | 	add	fp, #4
2b28c     A7 12 02 FB | 	rdlong	arg01, fp
2b290     04 4E 85 F1 | 	sub	fp, #4
2b294     00 14 06 F6 | 	mov	arg02, #0
2b298     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
2b29c     1C 4E 05 F1 | 	add	fp, #28
2b2a0     A7 FA 61 FC | 	wrlong	result1, fp
2b2a4     1C 4E 85 F1 | 	sub	fp, #28
2b2a8     28 00 90 FD | 	jmp	#LR__4355
2b2ac                 | LR__4354
2b2ac     04 4E 05 F1 | 	add	fp, #4
2b2b0     A7 18 02 FB | 	rdlong	arg04, fp
2b2b4     0C 13 02 F6 | 	mov	arg01, arg04
2b2b8     04 4E 85 F1 | 	sub	fp, #4
2b2bc     18 18 06 F1 | 	add	arg04, #24
2b2c0     0C 15 02 FB | 	rdlong	arg02, arg04
2b2c4     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
2b2c8     1C 4E 05 F1 | 	add	fp, #28
2b2cc     A7 FA 61 FC | 	wrlong	result1, fp
2b2d0     1C 4E 85 F1 | 	sub	fp, #28
2b2d4                 | LR__4355
2b2d4     1C 4E 05 F1 | 	add	fp, #28
2b2d8     A7 FA 09 FB | 	rdlong	result1, fp wz
2b2dc     1C 4E 85 F1 | 	sub	fp, #28
2b2e0     A0 05 90 AD |  if_e	jmp	#LR__4372
2b2e4     1C 4E 05 F1 | 	add	fp, #28
2b2e8     A7 FA 01 FB | 	rdlong	result1, fp
2b2ec     1C 4E 85 F1 | 	sub	fp, #28
2b2f0     01 FA 0D F2 | 	cmp	result1, #1 wz
2b2f4     1C 00 90 5D |  if_ne	jmp	#LR__4356
2b2f8     04 4E 05 F1 | 	add	fp, #4
2b2fc     A7 FA 01 FB | 	rdlong	result1, fp
2b300     04 4E 85 F1 | 	sub	fp, #4
2b304     11 FA 05 F1 | 	add	result1, #17
2b308     FD 04 48 FC | 	wrbyte	#2, result1
2b30c     02 FA 05 F6 | 	mov	result1, #2
2b310     98 05 90 FD | 	jmp	#LR__4373
2b314                 | LR__4356
2b314     1C 4E 05 F1 | 	add	fp, #28
2b318     A7 FA 01 FB | 	rdlong	result1, fp
2b31c     1C 4E 85 F1 | 	sub	fp, #28
2b320     FF FF 7F FF 
2b324     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2b328     1C 00 90 5D |  if_ne	jmp	#LR__4357
2b32c     04 4E 05 F1 | 	add	fp, #4
2b330     A7 FA 01 FB | 	rdlong	result1, fp
2b334     04 4E 85 F1 | 	sub	fp, #4
2b338     11 FA 05 F1 | 	add	result1, #17
2b33c     FD 02 48 FC | 	wrbyte	#1, result1
2b340     01 FA 05 F6 | 	mov	result1, #1
2b344     64 05 90 FD | 	jmp	#LR__4373
2b348                 | LR__4357
2b348     04 4E 05 F1 | 	add	fp, #4
2b34c     A7 FA 01 FB | 	rdlong	result1, fp
2b350     18 4E 05 F1 | 	add	fp, #24
2b354     A7 18 02 FB | 	rdlong	arg04, fp
2b358     18 FA 05 F1 | 	add	result1, #24
2b35c     FD 18 62 FC | 	wrlong	arg04, result1
2b360     18 4E 85 F1 | 	sub	fp, #24
2b364     A7 FA 01 FB | 	rdlong	result1, fp
2b368     04 4E 85 F1 | 	sub	fp, #4
2b36c     08 FA 05 F1 | 	add	result1, #8
2b370     FD FA 09 FB | 	rdlong	result1, result1 wz
2b374     1C 00 90 5D |  if_ne	jmp	#LR__4358
2b378     04 4E 05 F1 | 	add	fp, #4
2b37c     A7 18 02 FB | 	rdlong	arg04, fp
2b380     18 4E 05 F1 | 	add	fp, #24
2b384     A7 FA 01 FB | 	rdlong	result1, fp
2b388     1C 4E 85 F1 | 	sub	fp, #28
2b38c     08 18 06 F1 | 	add	arg04, #8
2b390     0C FB 61 FC | 	wrlong	result1, arg04
2b394                 | LR__4358
2b394                 | LR__4359
2b394     04 4E 05 F1 | 	add	fp, #4
2b398     A7 18 02 FB | 	rdlong	arg04, fp
2b39c     04 4E 85 F1 | 	sub	fp, #4
2b3a0     10 18 06 F1 | 	add	arg04, #16
2b3a4     0C 19 C2 FA | 	rdbyte	arg04, arg04
2b3a8     80 18 CE F7 | 	test	arg04, #128 wz
2b3ac     7C 00 90 AD |  if_e	jmp	#LR__4361
2b3b0     18 4E 05 F1 | 	add	fp, #24
2b3b4     A7 18 02 FB | 	rdlong	arg04, fp
2b3b8     01 18 06 F1 | 	add	arg04, #1
2b3bc     0C 13 C2 FA | 	rdbyte	arg01, arg04
2b3c0     14 4E 85 F1 | 	sub	fp, #20
2b3c4     A7 18 02 FB | 	rdlong	arg04, fp
2b3c8     0C 15 02 F6 | 	mov	arg02, arg04
2b3cc     28 14 06 F1 | 	add	arg02, #40
2b3d0     04 4E 85 F1 | 	sub	fp, #4
2b3d4     1C 18 06 F1 | 	add	arg04, #28
2b3d8     0C 17 02 FB | 	rdlong	arg03, arg04
2b3dc     01 18 06 F6 | 	mov	arg04, #1
2b3e0     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
2b3e4     00 FA 0D F2 | 	cmp	result1, #0 wz
2b3e8     1C 00 90 AD |  if_e	jmp	#LR__4360
2b3ec     04 4E 05 F1 | 	add	fp, #4
2b3f0     A7 FA 01 FB | 	rdlong	result1, fp
2b3f4     04 4E 85 F1 | 	sub	fp, #4
2b3f8     11 FA 05 F1 | 	add	result1, #17
2b3fc     FD 02 48 FC | 	wrbyte	#1, result1
2b400     01 FA 05 F6 | 	mov	result1, #1
2b404     A4 04 90 FD | 	jmp	#LR__4373
2b408                 | LR__4360
2b408     04 4E 05 F1 | 	add	fp, #4
2b40c     A7 18 02 FB | 	rdlong	arg04, fp
2b410     0C FB 01 F6 | 	mov	result1, arg04
2b414     04 4E 85 F1 | 	sub	fp, #4
2b418     10 18 06 F1 | 	add	arg04, #16
2b41c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2b420     7F 18 06 F5 | 	and	arg04, #127
2b424     10 FA 05 F1 | 	add	result1, #16
2b428     FD 18 42 FC | 	wrbyte	arg04, result1
2b42c                 | LR__4361
2b42c     18 4E 05 F1 | 	add	fp, #24
2b430     A7 12 02 FB | 	rdlong	arg01, fp
2b434     14 4E 85 F1 | 	sub	fp, #20
2b438     A7 14 02 FB | 	rdlong	arg02, fp
2b43c     04 4E 85 F1 | 	sub	fp, #4
2b440     18 14 06 F1 | 	add	arg02, #24
2b444     0A 15 02 FB | 	rdlong	arg02, arg02
2b448     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
2b44c     20 4E 05 F1 | 	add	fp, #32
2b450     A7 FA 61 FC | 	wrlong	result1, fp
2b454     20 4E 85 F1 | 	sub	fp, #32
2b458     00 FA 0D F2 | 	cmp	result1, #0 wz
2b45c     1C 00 90 5D |  if_ne	jmp	#LR__4362
2b460     04 4E 05 F1 | 	add	fp, #4
2b464     A7 FA 01 FB | 	rdlong	result1, fp
2b468     04 4E 85 F1 | 	sub	fp, #4
2b46c     11 FA 05 F1 | 	add	result1, #17
2b470     FD 04 48 FC | 	wrbyte	#2, result1
2b474     02 FA 05 F6 | 	mov	result1, #2
2b478     30 04 90 FD | 	jmp	#LR__4373
2b47c                 | LR__4362
2b47c     20 4E 05 F1 | 	add	fp, #32
2b480     A7 FA 01 FB | 	rdlong	result1, fp
2b484     0C 4E 05 F1 | 	add	fp, #12
2b488     A7 1E 02 FB | 	rdlong	local01, fp
2b48c     0F FB 01 F1 | 	add	result1, local01
2b490     0C 4E 85 F1 | 	sub	fp, #12
2b494     A7 FA 61 FC | 	wrlong	result1, fp
2b498     14 4E 85 F1 | 	sub	fp, #20
2b49c     A7 FA 01 FB | 	rdlong	result1, fp
2b4a0     09 FA 45 F0 | 	shr	result1, #9
2b4a4     1C 4E 05 F1 | 	add	fp, #28
2b4a8     A7 FA 61 FC | 	wrlong	result1, fp
2b4ac     28 4E 85 F1 | 	sub	fp, #40
2b4b0     01 FA 15 F2 | 	cmp	result1, #1 wc
2b4b4     60 01 90 CD |  if_b	jmp	#LR__4366
2b4b8     2C 4E 05 F1 | 	add	fp, #44
2b4bc     A7 FA 01 FB | 	rdlong	result1, fp
2b4c0     04 4E 85 F1 | 	sub	fp, #4
2b4c4     A7 18 02 FB | 	rdlong	arg04, fp
2b4c8     0C FB 01 F1 | 	add	result1, arg04
2b4cc     10 4E 85 F1 | 	sub	fp, #16
2b4d0     A7 18 02 FB | 	rdlong	arg04, fp
2b4d4     18 4E 85 F1 | 	sub	fp, #24
2b4d8     0A 18 06 F1 | 	add	arg04, #10
2b4dc     0C 19 E2 FA | 	rdword	arg04, arg04
2b4e0     0C FB 19 F2 | 	cmp	result1, arg04 wcz
2b4e4     28 00 90 ED |  if_be	jmp	#LR__4363
2b4e8     18 4E 05 F1 | 	add	fp, #24
2b4ec     A7 FA 01 FB | 	rdlong	result1, fp
2b4f0     0A FA 05 F1 | 	add	result1, #10
2b4f4     FD FA E1 FA | 	rdword	result1, result1
2b4f8     14 4E 05 F1 | 	add	fp, #20
2b4fc     A7 18 02 FB | 	rdlong	arg04, fp
2b500     0C FB 81 F1 | 	sub	result1, arg04
2b504     04 4E 85 F1 | 	sub	fp, #4
2b508     A7 FA 61 FC | 	wrlong	result1, fp
2b50c     28 4E 85 F1 | 	sub	fp, #40
2b510                 | LR__4363
2b510     18 4E 05 F1 | 	add	fp, #24
2b514     A7 18 02 FB | 	rdlong	arg04, fp
2b518     01 18 06 F1 | 	add	arg04, #1
2b51c     0C 13 C2 FA | 	rdbyte	arg01, arg04
2b520     18 4E 05 F1 | 	add	fp, #24
2b524     A7 14 02 FB | 	rdlong	arg02, fp
2b528     10 4E 85 F1 | 	sub	fp, #16
2b52c     A7 16 02 FB | 	rdlong	arg03, fp
2b530     08 4E 05 F1 | 	add	fp, #8
2b534     A7 18 02 FB | 	rdlong	arg04, fp
2b538     28 4E 85 F1 | 	sub	fp, #40
2b53c     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
2b540     00 FA 0D F2 | 	cmp	result1, #0 wz
2b544     1C 00 90 AD |  if_e	jmp	#LR__4364
2b548     04 4E 05 F1 | 	add	fp, #4
2b54c     A7 1E 02 FB | 	rdlong	local01, fp
2b550     04 4E 85 F1 | 	sub	fp, #4
2b554     11 1E 06 F1 | 	add	local01, #17
2b558     0F 03 48 FC | 	wrbyte	#1, local01
2b55c     01 FA 05 F6 | 	mov	result1, #1
2b560     48 03 90 FD | 	jmp	#LR__4373
2b564                 | LR__4364
2b564     04 4E 05 F1 | 	add	fp, #4
2b568     A7 FA 01 FB | 	rdlong	result1, fp
2b56c     1C FA 05 F1 | 	add	result1, #28
2b570     FD FA 01 FB | 	rdlong	result1, result1
2b574     1C 4E 05 F1 | 	add	fp, #28
2b578     A7 20 02 FB | 	rdlong	local02, fp
2b57c     10 FB 81 F1 | 	sub	result1, local02
2b580     08 4E 05 F1 | 	add	fp, #8
2b584     A7 18 02 FB | 	rdlong	arg04, fp
2b588     28 4E 85 F1 | 	sub	fp, #40
2b58c     0C FB 11 F2 | 	cmp	result1, arg04 wc
2b590     68 00 90 3D |  if_ae	jmp	#LR__4365
2b594     04 4E 05 F1 | 	add	fp, #4
2b598     A7 12 02 FB | 	rdlong	arg01, fp
2b59c     28 12 06 F1 | 	add	arg01, #40
2b5a0     2C 4E 05 F1 | 	add	fp, #44
2b5a4     A7 14 02 FB | 	rdlong	arg02, fp
2b5a8     2C 4E 85 F1 | 	sub	fp, #44
2b5ac     A7 FA 01 FB | 	rdlong	result1, fp
2b5b0     1C FA 05 F1 | 	add	result1, #28
2b5b4     FD 22 02 FB | 	rdlong	local03, result1
2b5b8     1C 4E 05 F1 | 	add	fp, #28
2b5bc     A7 18 02 FB | 	rdlong	arg04, fp
2b5c0     20 4E 85 F1 | 	sub	fp, #32
2b5c4     0C 23 82 F1 | 	sub	local03, arg04
2b5c8     09 22 66 F0 | 	shl	local03, #9
2b5cc     11 15 02 F1 | 	add	arg02, local03
2b5d0     09 16 C6 F9 | 	decod	arg03, #9
2b5d4     44 41 BF FD | 	call	#__system____builtin_memmove
2b5d8     04 4E 05 F1 | 	add	fp, #4
2b5dc     A7 18 02 FB | 	rdlong	arg04, fp
2b5e0     0C FB 01 F6 | 	mov	result1, arg04
2b5e4     04 4E 85 F1 | 	sub	fp, #4
2b5e8     10 18 06 F1 | 	add	arg04, #16
2b5ec     0C 19 C2 FA | 	rdbyte	arg04, arg04
2b5f0     7F 18 06 F5 | 	and	arg04, #127
2b5f4     10 FA 05 F1 | 	add	result1, #16
2b5f8     FD 18 42 FC | 	wrbyte	arg04, result1
2b5fc                 | LR__4365
2b5fc     28 4E 05 F1 | 	add	fp, #40
2b600     A7 FA 01 FB | 	rdlong	result1, fp
2b604     09 FA 65 F0 | 	shl	result1, #9
2b608     04 4E 85 F1 | 	sub	fp, #4
2b60c     A7 FA 61 FC | 	wrlong	result1, fp
2b610     24 4E 85 F1 | 	sub	fp, #36
2b614                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
2b614                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
2b614                 | ' 				}
2b614                 | ' 
2b614                 | ' 
2b614                 | ' 				wcnt =  ((UINT) 512 )  * cc;
2b614                 | ' 				continue;
2b614     74 01 90 FD | 	jmp	#LR__4369
2b618                 | LR__4366
2b618     04 4E 05 F1 | 	add	fp, #4
2b61c     A7 20 02 FB | 	rdlong	local02, fp
2b620     1C 20 06 F1 | 	add	local02, #28
2b624     10 FB 01 FB | 	rdlong	result1, local02
2b628     1C 4E 05 F1 | 	add	fp, #28
2b62c     A7 20 02 FB | 	rdlong	local02, fp
2b630     20 4E 85 F1 | 	sub	fp, #32
2b634     10 FB 09 F2 | 	cmp	result1, local02 wz
2b638     90 00 90 AD |  if_e	jmp	#LR__4367
2b63c     04 4E 05 F1 | 	add	fp, #4
2b640     A7 FA 01 FB | 	rdlong	result1, fp
2b644     FD 22 02 F6 | 	mov	local03, result1
2b648     04 4E 85 F1 | 	sub	fp, #4
2b64c     14 22 06 F1 | 	add	local03, #20
2b650     11 23 02 FB | 	rdlong	local03, local03
2b654     0C FA 05 F1 | 	add	result1, #12
2b658     FD 24 02 FB | 	rdlong	local04, result1
2b65c     12 27 02 F6 | 	mov	local05, local04
2b660     13 23 12 F2 | 	cmp	local03, local05 wc
2b664     64 00 90 3D |  if_ae	jmp	#LR__4367
2b668     18 4E 05 F1 | 	add	fp, #24
2b66c     A7 18 02 FB | 	rdlong	arg04, fp
2b670     01 18 06 F1 | 	add	arg04, #1
2b674     0C 13 C2 FA | 	rdbyte	arg01, arg04
2b678     14 4E 85 F1 | 	sub	fp, #20
2b67c     A7 28 02 FB | 	rdlong	local06, fp
2b680     28 28 06 F1 | 	add	local06, #40
2b684     14 2B 02 F6 | 	mov	local07, local06
2b688     1C 4E 05 F1 | 	add	fp, #28
2b68c     A7 2C 02 FB | 	rdlong	local08, fp
2b690     20 4E 85 F1 | 	sub	fp, #32
2b694     01 2E 06 F6 | 	mov	local09, #1
2b698     15 15 02 F6 | 	mov	arg02, local07
2b69c     16 17 02 F6 | 	mov	arg03, local08
2b6a0     01 18 06 F6 | 	mov	arg04, #1
2b6a4     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
2b6a8     FD 30 0A F6 | 	mov	local10, result1 wz
2b6ac     1C 00 90 AD |  if_e	jmp	#LR__4367
2b6b0     04 4E 05 F1 | 	add	fp, #4
2b6b4     A7 30 02 FB | 	rdlong	local10, fp
2b6b8     04 4E 85 F1 | 	sub	fp, #4
2b6bc     11 30 06 F1 | 	add	local10, #17
2b6c0     18 03 48 FC | 	wrbyte	#1, local10
2b6c4                 | ' 				fp->fptr < fp->obj.objsize &&
2b6c4                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
2b6c4                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
2b6c4     01 FA 05 F6 | 	mov	result1, #1
2b6c8     E0 01 90 FD | 	jmp	#LR__4373
2b6cc                 | LR__4367
2b6cc     04 4E 05 F1 | 	add	fp, #4
2b6d0     A7 18 02 FB | 	rdlong	arg04, fp
2b6d4     1C 4E 05 F1 | 	add	fp, #28
2b6d8     A7 FA 01 FB | 	rdlong	result1, fp
2b6dc     20 4E 85 F1 | 	sub	fp, #32
2b6e0     1C 18 06 F1 | 	add	arg04, #28
2b6e4     0C FB 61 FC | 	wrlong	result1, arg04
2b6e8                 | LR__4368
2b6e8     04 4E 05 F1 | 	add	fp, #4
2b6ec     A7 FA 01 FB | 	rdlong	result1, fp
2b6f0     14 FA 05 F1 | 	add	result1, #20
2b6f4     FD FA 01 FB | 	rdlong	result1, result1
2b6f8     FF FB 05 F5 | 	and	result1, #511
2b6fc     09 32 C6 F9 | 	decod	local11, #9
2b700     FD 32 82 F1 | 	sub	local11, result1
2b704     20 4E 05 F1 | 	add	fp, #32
2b708     A7 32 62 FC | 	wrlong	local11, fp
2b70c     18 4E 85 F1 | 	sub	fp, #24
2b710     A7 FA 01 FB | 	rdlong	result1, fp
2b714     0C 4E 85 F1 | 	sub	fp, #12
2b718     FD 32 1A F2 | 	cmp	local11, result1 wcz
2b71c     0C 4E 05 11 |  if_a	add	fp, #12
2b720     A7 32 02 1B |  if_a	rdlong	local11, fp
2b724     18 4E 05 11 |  if_a	add	fp, #24
2b728     A7 32 62 1C |  if_a	wrlong	local11, fp
2b72c     24 4E 85 11 |  if_a	sub	fp, #36
2b730     04 4E 05 F1 | 	add	fp, #4
2b734     A7 32 02 FB | 	rdlong	local11, fp
2b738     19 13 02 F6 | 	mov	arg01, local11
2b73c     28 12 06 F1 | 	add	arg01, #40
2b740     14 32 06 F1 | 	add	local11, #20
2b744     19 33 02 FB | 	rdlong	local11, local11
2b748     FF 33 06 F5 | 	and	local11, #511
2b74c     19 13 02 F1 | 	add	arg01, local11
2b750     2C 4E 05 F1 | 	add	fp, #44
2b754     A7 14 02 FB | 	rdlong	arg02, fp
2b758     0C 4E 85 F1 | 	sub	fp, #12
2b75c     A7 16 02 FB | 	rdlong	arg03, fp
2b760     24 4E 85 F1 | 	sub	fp, #36
2b764     B4 3F BF FD | 	call	#__system____builtin_memmove
2b768     04 4E 05 F1 | 	add	fp, #4
2b76c     A7 FA 01 FB | 	rdlong	result1, fp
2b770     FD 32 02 F6 | 	mov	local11, result1
2b774     04 4E 85 F1 | 	sub	fp, #4
2b778     10 FA 05 F1 | 	add	result1, #16
2b77c     FD FA C1 FA | 	rdbyte	result1, result1
2b780     80 FA 45 F5 | 	or	result1, #128
2b784     10 32 06 F1 | 	add	local11, #16
2b788     19 FB 41 FC | 	wrbyte	result1, local11
2b78c                 | LR__4369
2b78c     0C 4E 05 F1 | 	add	fp, #12
2b790     A7 32 02 FB | 	rdlong	local11, fp
2b794     18 4E 05 F1 | 	add	fp, #24
2b798     A7 FA 01 FB | 	rdlong	result1, fp
2b79c     FD 32 82 F1 | 	sub	local11, result1
2b7a0     18 4E 85 F1 | 	sub	fp, #24
2b7a4     A7 32 62 FC | 	wrlong	local11, fp
2b7a8     04 4E 05 F1 | 	add	fp, #4
2b7ac     A7 34 02 FB | 	rdlong	local12, fp
2b7b0     1A 33 02 FB | 	rdlong	local11, local12
2b7b4     14 4E 05 F1 | 	add	fp, #20
2b7b8     A7 36 02 FB | 	rdlong	local13, fp
2b7bc     1B 33 02 F1 | 	add	local11, local13
2b7c0     1A 33 62 FC | 	wrlong	local11, local12
2b7c4     0C 4E 05 F1 | 	add	fp, #12
2b7c8     A7 32 02 FB | 	rdlong	local11, fp
2b7cc     0C 4E 85 F1 | 	sub	fp, #12
2b7d0     A7 38 02 FB | 	rdlong	local14, fp
2b7d4     1C 33 02 F1 | 	add	local11, local14
2b7d8     0C 4E 05 F1 | 	add	fp, #12
2b7dc     A7 32 62 FC | 	wrlong	local11, fp
2b7e0     2C 4E 85 F1 | 	sub	fp, #44
2b7e4     A7 3A 02 FB | 	rdlong	local15, fp
2b7e8     1D 33 02 F6 | 	mov	local11, local15
2b7ec     14 3A 06 F1 | 	add	local15, #20
2b7f0     1D 3B 02 FB | 	rdlong	local15, local15
2b7f4     20 4E 05 F1 | 	add	fp, #32
2b7f8     A7 3C 02 FB | 	rdlong	local16, fp
2b7fc     1E 3B 02 F1 | 	add	local15, local16
2b800     14 32 06 F1 | 	add	local11, #20
2b804     19 3B 62 FC | 	wrlong	local15, local11
2b808     20 4E 85 F1 | 	sub	fp, #32
2b80c     A7 3E 02 FB | 	rdlong	local17, fp
2b810     1F 33 02 F6 | 	mov	local11, local17
2b814     1F 41 02 F6 | 	mov	local18, local17
2b818     04 4E 85 F1 | 	sub	fp, #4
2b81c     14 3E 06 F1 | 	add	local17, #20
2b820     1F 43 02 FB | 	rdlong	local19, local17
2b824     0C 40 06 F1 | 	add	local18, #12
2b828     20 45 02 FB | 	rdlong	local20, local18
2b82c     22 43 1A F2 | 	cmp	local19, local20 wcz
2b830     24 00 90 ED |  if_be	jmp	#LR__4370
2b834     04 4E 05 F1 | 	add	fp, #4
2b838     A7 26 02 FB | 	rdlong	local05, fp
2b83c     04 4E 85 F1 | 	sub	fp, #4
2b840     13 23 02 F6 | 	mov	local03, local05
2b844     14 22 06 F1 | 	add	local03, #20
2b848     11 25 02 FB | 	rdlong	local04, local03
2b84c     14 22 86 F1 | 	sub	local03, #20
2b850     12 47 02 F6 | 	mov	local21, local04
2b854     20 00 90 FD | 	jmp	#LR__4371
2b858                 | LR__4370
2b858     04 4E 05 F1 | 	add	fp, #4
2b85c     A7 2A 02 FB | 	rdlong	local07, fp
2b860     04 4E 85 F1 | 	sub	fp, #4
2b864     15 31 02 F6 | 	mov	local10, local07
2b868     0C 30 06 F1 | 	add	local10, #12
2b86c     18 2D 02 FB | 	rdlong	local08, local10
2b870     0C 30 86 F1 | 	sub	local10, #12
2b874     16 47 02 F6 | 	mov	local21, local08
2b878                 | LR__4371
2b878     0C 32 06 F1 | 	add	local11, #12
2b87c     19 47 62 FC | 	wrlong	local21, local11
2b880     5C F9 9F FD | 	jmp	#LR__4353
2b884                 | LR__4372
2b884     04 4E 05 F1 | 	add	fp, #4
2b888     A7 34 02 FB | 	rdlong	local12, fp
2b88c     1A 1F 02 F6 | 	mov	local01, local12
2b890     04 4E 85 F1 | 	sub	fp, #4
2b894     10 34 06 F1 | 	add	local12, #16
2b898     1A 33 C2 FA | 	rdbyte	local11, local12
2b89c     40 32 46 F5 | 	or	local11, #64
2b8a0     10 1E 06 F1 | 	add	local01, #16
2b8a4     0F 33 42 FC | 	wrbyte	local11, local01
2b8a8                 | ' 
2b8a8                 | ' 
2b8a8                 | ' 
2b8a8                 | ' 
2b8a8                 | ' 
2b8a8                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
2b8a8                 | ' 		fp->flag |=  0x80 ;
2b8a8                 | ' 
2b8a8                 | ' 	}
2b8a8                 | ' 
2b8a8                 | ' 	fp->flag |=  0x40 ;
2b8a8                 | ' 
2b8a8                 | ' 	return FR_OK ;
2b8a8     00 FA 05 F6 | 	mov	result1, #0
2b8ac                 | LR__4373
2b8ac     A7 F0 03 F6 | 	mov	ptra, fp
2b8b0     B2 00 A0 FD | 	call	#popregs_
2b8b4                 | _fatfs_cc_f_write_ret
2b8b4     2D 00 64 FD | 	ret
2b8b8                 | 
2b8b8                 | _fatfs_cc_f_sync
2b8b8     00 4A 05 F6 | 	mov	COUNT_, #0
2b8bc     A8 00 A0 FD | 	call	#pushregs_
2b8c0     18 F0 07 F1 | 	add	ptra, #24
2b8c4     04 4E 05 F1 | 	add	fp, #4
2b8c8     A7 12 62 FC | 	wrlong	arg01, fp
2b8cc     08 4E 05 F1 | 	add	fp, #8
2b8d0     A7 14 02 F6 | 	mov	arg02, fp
2b8d4     0C 4E 85 F1 | 	sub	fp, #12
2b8d8     D0 E8 BF FD | 	call	#_fatfs_cc_validate
2b8dc     08 4E 05 F1 | 	add	fp, #8
2b8e0     A7 FA 61 FC | 	wrlong	result1, fp
2b8e4     08 4E 85 F1 | 	sub	fp, #8
2b8e8     00 FA 0D F2 | 	cmp	result1, #0 wz
2b8ec     C0 01 90 5D |  if_ne	jmp	#LR__4383
2b8f0     04 4E 05 F1 | 	add	fp, #4
2b8f4     A7 18 02 FB | 	rdlong	arg04, fp
2b8f8     04 4E 85 F1 | 	sub	fp, #4
2b8fc     10 18 06 F1 | 	add	arg04, #16
2b900     0C 19 C2 FA | 	rdbyte	arg04, arg04
2b904     40 18 CE F7 | 	test	arg04, #64 wz
2b908     A4 01 90 AD |  if_e	jmp	#LR__4382
2b90c     04 4E 05 F1 | 	add	fp, #4
2b910     A7 18 02 FB | 	rdlong	arg04, fp
2b914     04 4E 85 F1 | 	sub	fp, #4
2b918     10 18 06 F1 | 	add	arg04, #16
2b91c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2b920     80 18 CE F7 | 	test	arg04, #128 wz
2b924     64 00 90 AD |  if_e	jmp	#LR__4380
2b928     0C 4E 05 F1 | 	add	fp, #12
2b92c     A7 18 02 FB | 	rdlong	arg04, fp
2b930     01 18 06 F1 | 	add	arg04, #1
2b934     0C 13 C2 FA | 	rdbyte	arg01, arg04
2b938     08 4E 85 F1 | 	sub	fp, #8
2b93c     A7 18 02 FB | 	rdlong	arg04, fp
2b940     0C 15 02 F6 | 	mov	arg02, arg04
2b944     28 14 06 F1 | 	add	arg02, #40
2b948     04 4E 85 F1 | 	sub	fp, #4
2b94c     1C 18 06 F1 | 	add	arg04, #28
2b950     0C 17 02 FB | 	rdlong	arg03, arg04
2b954     01 18 06 F6 | 	mov	arg04, #1
2b958     0C AE BF FD | 	call	#_fatfs_cc_disk_write
2b95c     00 FA 0D F2 | 	cmp	result1, #0 wz
2b960     01 FA 05 56 |  if_ne	mov	result1, #1
2b964     54 01 90 5D |  if_ne	jmp	#LR__4384
2b968     04 4E 05 F1 | 	add	fp, #4
2b96c     A7 18 02 FB | 	rdlong	arg04, fp
2b970     0C 17 02 F6 | 	mov	arg03, arg04
2b974     04 4E 85 F1 | 	sub	fp, #4
2b978     10 18 06 F1 | 	add	arg04, #16
2b97c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2b980     7F 18 06 F5 | 	and	arg04, #127
2b984     10 16 06 F1 | 	add	arg03, #16
2b988     0B 19 42 FC | 	wrbyte	arg04, arg03
2b98c                 | LR__4380
2b98c     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
2b990     10 4E 05 F1 | 	add	fp, #16
2b994     A7 FA 61 FC | 	wrlong	result1, fp
2b998     04 4E 85 F1 | 	sub	fp, #4
2b99c     A7 12 02 FB | 	rdlong	arg01, fp
2b9a0     08 4E 85 F1 | 	sub	fp, #8
2b9a4     A7 18 02 FB | 	rdlong	arg04, fp
2b9a8     04 4E 85 F1 | 	sub	fp, #4
2b9ac     20 18 06 F1 | 	add	arg04, #32
2b9b0     0C 15 02 FB | 	rdlong	arg02, arg04
2b9b4     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
2b9b8     08 4E 05 F1 | 	add	fp, #8
2b9bc     A7 FA 61 FC | 	wrlong	result1, fp
2b9c0     08 4E 85 F1 | 	sub	fp, #8
2b9c4     00 FA 0D F2 | 	cmp	result1, #0 wz
2b9c8     E4 00 90 5D |  if_ne	jmp	#LR__4381
2b9cc     04 4E 05 F1 | 	add	fp, #4
2b9d0     A7 18 02 FB | 	rdlong	arg04, fp
2b9d4     24 18 06 F1 | 	add	arg04, #36
2b9d8     0C 19 02 FB | 	rdlong	arg04, arg04
2b9dc     10 4E 05 F1 | 	add	fp, #16
2b9e0     A7 18 62 FC | 	wrlong	arg04, fp
2b9e4     0C 17 02 F6 | 	mov	arg03, arg04
2b9e8     0B 16 06 F1 | 	add	arg03, #11
2b9ec     0B 17 C2 FA | 	rdbyte	arg03, arg03
2b9f0     20 16 46 F5 | 	or	arg03, #32
2b9f4     0B 18 06 F1 | 	add	arg04, #11
2b9f8     0C 17 42 FC | 	wrbyte	arg03, arg04
2b9fc     10 4E 85 F1 | 	sub	fp, #16
2ba00     A7 18 02 FB | 	rdlong	arg04, fp
2ba04     0C 13 02 FB | 	rdlong	arg01, arg04
2ba08     10 4E 05 F1 | 	add	fp, #16
2ba0c     A7 14 02 FB | 	rdlong	arg02, fp
2ba10     14 4E 85 F1 | 	sub	fp, #20
2ba14     08 18 06 F1 | 	add	arg04, #8
2ba18     0C 17 02 FB | 	rdlong	arg03, arg04
2ba1c     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
2ba20     14 4E 05 F1 | 	add	fp, #20
2ba24     A7 12 02 FB | 	rdlong	arg01, fp
2ba28     1C 12 06 F1 | 	add	arg01, #28
2ba2c     10 4E 85 F1 | 	sub	fp, #16
2ba30     A7 18 02 FB | 	rdlong	arg04, fp
2ba34     0C 18 06 F1 | 	add	arg04, #12
2ba38     0C 15 02 FB | 	rdlong	arg02, arg04
2ba3c     09 15 62 FC | 	wrlong	arg02, arg01
2ba40     10 4E 05 F1 | 	add	fp, #16
2ba44     A7 12 02 FB | 	rdlong	arg01, fp
2ba48     16 12 06 F1 | 	add	arg01, #22
2ba4c     04 4E 85 F1 | 	sub	fp, #4
2ba50     A7 14 02 FB | 	rdlong	arg02, fp
2ba54     09 15 62 FC | 	wrlong	arg02, arg01
2ba58     04 4E 05 F1 | 	add	fp, #4
2ba5c     A7 12 02 FB | 	rdlong	arg01, fp
2ba60     12 12 06 F1 | 	add	arg01, #18
2ba64     09 01 58 FC | 	wrword	#0, arg01
2ba68     08 4E 85 F1 | 	sub	fp, #8
2ba6c     A7 18 02 FB | 	rdlong	arg04, fp
2ba70     03 18 06 F1 | 	add	arg04, #3
2ba74     0C 03 48 FC | 	wrbyte	#1, arg04
2ba78     A7 12 02 FB | 	rdlong	arg01, fp
2ba7c     0C 4E 85 F1 | 	sub	fp, #12
2ba80     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
2ba84     08 4E 05 F1 | 	add	fp, #8
2ba88     A7 FA 61 FC | 	wrlong	result1, fp
2ba8c     04 4E 85 F1 | 	sub	fp, #4
2ba90     A7 18 02 FB | 	rdlong	arg04, fp
2ba94     0C 17 02 F6 | 	mov	arg03, arg04
2ba98     04 4E 85 F1 | 	sub	fp, #4
2ba9c     10 18 06 F1 | 	add	arg04, #16
2baa0     0C 19 C2 FA | 	rdbyte	arg04, arg04
2baa4     BF 18 06 F5 | 	and	arg04, #191
2baa8     10 16 06 F1 | 	add	arg03, #16
2baac     0B 19 42 FC | 	wrbyte	arg04, arg03
2bab0                 | LR__4381
2bab0                 | LR__4382
2bab0                 | LR__4383
2bab0                 | ' 					dir = fp->dir_ptr;
2bab0                 | ' 					dir[ 11 ] |=  0x20 ;
2bab0                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
2bab0                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
2bab0                 | ' 					st_dword(dir +  22 , tm);
2bab0                 | ' 					st_word(dir +  18 , 0);
2bab0                 | ' 					fs->wflag = 1;
2bab0                 | ' 					res = sync_fs(fs);
2bab0                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
2bab0                 | ' 				}
2bab0                 | ' 			}
2bab0                 | ' 		}
2bab0                 | ' 	}
2bab0                 | ' 
2bab0                 | ' 	return res ;
2bab0     08 4E 05 F1 | 	add	fp, #8
2bab4     A7 FA 01 FB | 	rdlong	result1, fp
2bab8     08 4E 85 F1 | 	sub	fp, #8
2babc                 | LR__4384
2babc     A7 F0 03 F6 | 	mov	ptra, fp
2bac0     B2 00 A0 FD | 	call	#popregs_
2bac4                 | _fatfs_cc_f_sync_ret
2bac4     2D 00 64 FD | 	ret
2bac8                 | 
2bac8                 | _fatfs_cc_f_close
2bac8     01 4A 05 F6 | 	mov	COUNT_, #1
2bacc     A8 00 A0 FD | 	call	#pushregs_
2bad0     10 F0 07 F1 | 	add	ptra, #16
2bad4     04 4E 05 F1 | 	add	fp, #4
2bad8     A7 12 62 FC | 	wrlong	arg01, fp
2badc     04 4E 85 F1 | 	sub	fp, #4
2bae0     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
2bae4     08 4E 05 F1 | 	add	fp, #8
2bae8     A7 FA 61 FC | 	wrlong	result1, fp
2baec     08 4E 85 F1 | 	sub	fp, #8
2baf0     00 FA 0D F2 | 	cmp	result1, #0 wz
2baf4     38 00 90 5D |  if_ne	jmp	#LR__4390
2baf8     04 4E 05 F1 | 	add	fp, #4
2bafc     A7 12 02 FB | 	rdlong	arg01, fp
2bb00     08 4E 05 F1 | 	add	fp, #8
2bb04     A7 14 02 F6 | 	mov	arg02, fp
2bb08     0C 4E 85 F1 | 	sub	fp, #12
2bb0c     9C E6 BF FD | 	call	#_fatfs_cc_validate
2bb10     08 4E 05 F1 | 	add	fp, #8
2bb14     A7 FA 61 FC | 	wrlong	result1, fp
2bb18     08 4E 85 F1 | 	sub	fp, #8
2bb1c     00 FA 0D F2 | 	cmp	result1, #0 wz
2bb20     04 4E 05 A1 |  if_e	add	fp, #4
2bb24     A7 1E 02 AB |  if_e	rdlong	local01, fp
2bb28     04 4E 85 A1 |  if_e	sub	fp, #4
2bb2c     0F 01 68 AC |  if_e	wrlong	#0, local01
2bb30                 | LR__4390
2bb30                 | ' 
2bb30                 | ' 
2bb30                 | ' 
2bb30                 | ' 
2bb30                 | ' 			fp->obj.fs = 0;
2bb30                 | ' #line 4192 "ff.c"
2bb30                 | ' 		}
2bb30                 | ' 	}
2bb30                 | ' 	return res;
2bb30     08 4E 05 F1 | 	add	fp, #8
2bb34     A7 FA 01 FB | 	rdlong	result1, fp
2bb38     08 4E 85 F1 | 	sub	fp, #8
2bb3c     A7 F0 03 F6 | 	mov	ptra, fp
2bb40     B2 00 A0 FD | 	call	#popregs_
2bb44                 | _fatfs_cc_f_close_ret
2bb44     2D 00 64 FD | 	ret
2bb48                 | 
2bb48                 | _fatfs_cc_f_lseek
2bb48     00 4A 05 F6 | 	mov	COUNT_, #0
2bb4c     A8 00 A0 FD | 	call	#pushregs_
2bb50     24 F0 07 F1 | 	add	ptra, #36
2bb54     04 4E 05 F1 | 	add	fp, #4
2bb58     A7 12 62 FC | 	wrlong	arg01, fp
2bb5c     04 4E 05 F1 | 	add	fp, #4
2bb60     A7 14 62 FC | 	wrlong	arg02, fp
2bb64     04 4E 85 F1 | 	sub	fp, #4
2bb68     A7 12 02 FB | 	rdlong	arg01, fp
2bb6c     0C 4E 05 F1 | 	add	fp, #12
2bb70     A7 14 02 F6 | 	mov	arg02, fp
2bb74     10 4E 85 F1 | 	sub	fp, #16
2bb78     30 E6 BF FD | 	call	#_fatfs_cc_validate
2bb7c     0C 4E 05 F1 | 	add	fp, #12
2bb80     A7 FA 61 FC | 	wrlong	result1, fp
2bb84     0C 4E 85 F1 | 	sub	fp, #12
2bb88     00 FA 0D F2 | 	cmp	result1, #0 wz
2bb8c     1C 00 90 5D |  if_ne	jmp	#LR__4400
2bb90     04 4E 05 F1 | 	add	fp, #4
2bb94     A7 18 02 FB | 	rdlong	arg04, fp
2bb98     11 18 06 F1 | 	add	arg04, #17
2bb9c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2bba0     08 4E 05 F1 | 	add	fp, #8
2bba4     A7 18 62 FC | 	wrlong	arg04, fp
2bba8     0C 4E 85 F1 | 	sub	fp, #12
2bbac                 | LR__4400
2bbac     0C 4E 05 F1 | 	add	fp, #12
2bbb0     A7 18 0A FB | 	rdlong	arg04, fp wz
2bbb4     0C 4E 85 F1 | 	sub	fp, #12
2bbb8     0C 4E 05 51 |  if_ne	add	fp, #12
2bbbc     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2bbc0     0C 4E 85 51 |  if_ne	sub	fp, #12
2bbc4     40 06 90 5D |  if_ne	jmp	#LR__4423
2bbc8     04 4E 05 F1 | 	add	fp, #4
2bbcc     A7 18 02 FB | 	rdlong	arg04, fp
2bbd0     04 4E 05 F1 | 	add	fp, #4
2bbd4     A7 16 02 FB | 	rdlong	arg03, fp
2bbd8     08 4E 85 F1 | 	sub	fp, #8
2bbdc     0C 18 06 F1 | 	add	arg04, #12
2bbe0     0C 19 02 FB | 	rdlong	arg04, arg04
2bbe4     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2bbe8     3C 00 90 ED |  if_be	jmp	#LR__4401
2bbec     04 4E 05 F1 | 	add	fp, #4
2bbf0     A7 16 02 FB | 	rdlong	arg03, fp
2bbf4     04 4E 85 F1 | 	sub	fp, #4
2bbf8     10 16 06 F1 | 	add	arg03, #16
2bbfc     0B 17 C2 FA | 	rdbyte	arg03, arg03
2bc00     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
2bc04     02 16 CE F7 | 	test	arg03, #2 wz
2bc08     1C 00 90 5D |  if_ne	jmp	#LR__4401
2bc0c     04 4E 05 F1 | 	add	fp, #4
2bc10     A7 16 02 FB | 	rdlong	arg03, fp
2bc14     0C 16 06 F1 | 	add	arg03, #12
2bc18     0B 17 02 FB | 	rdlong	arg03, arg03
2bc1c     04 4E 05 F1 | 	add	fp, #4
2bc20     A7 16 62 FC | 	wrlong	arg03, fp
2bc24     08 4E 85 F1 | 	sub	fp, #8
2bc28                 | LR__4401
2bc28     04 4E 05 F1 | 	add	fp, #4
2bc2c     A7 16 02 FB | 	rdlong	arg03, fp
2bc30     14 16 06 F1 | 	add	arg03, #20
2bc34     0B 17 02 FB | 	rdlong	arg03, arg03
2bc38     1C 4E 05 F1 | 	add	fp, #28
2bc3c     A7 16 62 FC | 	wrlong	arg03, fp
2bc40     1C 4E 85 F1 | 	sub	fp, #28
2bc44     A7 16 02 FB | 	rdlong	arg03, fp
2bc48     18 4E 05 F1 | 	add	fp, #24
2bc4c     A7 00 68 FC | 	wrlong	#0, fp
2bc50     14 16 06 F1 | 	add	arg03, #20
2bc54     0B 01 68 FC | 	wrlong	#0, arg03
2bc58     14 4E 85 F1 | 	sub	fp, #20
2bc5c     A7 16 02 FB | 	rdlong	arg03, fp
2bc60     08 4E 85 F1 | 	sub	fp, #8
2bc64     01 16 16 F2 | 	cmp	arg03, #1 wc
2bc68     E4 03 90 CD |  if_b	jmp	#LR__4417
2bc6c     10 4E 05 F1 | 	add	fp, #16
2bc70     A7 16 02 FB | 	rdlong	arg03, fp
2bc74     0A 16 06 F1 | 	add	arg03, #10
2bc78     0B 19 E2 FA | 	rdword	arg04, arg03
2bc7c     09 18 66 F0 | 	shl	arg04, #9
2bc80     08 4E 05 F1 | 	add	fp, #8
2bc84     A7 18 62 FC | 	wrlong	arg04, fp
2bc88     08 4E 05 F1 | 	add	fp, #8
2bc8c     A7 18 02 FB | 	rdlong	arg04, fp
2bc90     20 4E 85 F1 | 	sub	fp, #32
2bc94     01 18 16 F2 | 	cmp	arg04, #1 wc
2bc98     AC 00 90 CD |  if_b	jmp	#LR__4402
2bc9c     08 4E 05 F1 | 	add	fp, #8
2bca0     A7 18 02 FB | 	rdlong	arg04, fp
2bca4     01 18 86 F1 | 	sub	arg04, #1
2bca8     10 4E 05 F1 | 	add	fp, #16
2bcac     A7 16 02 FB | 	rdlong	arg03, fp
2bcb0     0B 19 12 FD | 	qdiv	arg04, arg03
2bcb4     08 4E 05 F1 | 	add	fp, #8
2bcb8     A7 FA 01 FB | 	rdlong	result1, fp
2bcbc     01 FA 85 F1 | 	sub	result1, #1
2bcc0     18 18 62 FD | 	getqx	arg04
2bcc4     0B FB 11 FD | 	qdiv	result1, arg03
2bcc8     20 4E 85 F1 | 	sub	fp, #32
2bccc     18 16 62 FD | 	getqx	arg03
2bcd0     0B 19 12 F2 | 	cmp	arg04, arg03 wc
2bcd4     70 00 90 CD |  if_b	jmp	#LR__4402
2bcd8     04 4E 05 F1 | 	add	fp, #4
2bcdc     A7 16 02 FB | 	rdlong	arg03, fp
2bce0     1C 4E 05 F1 | 	add	fp, #28
2bce4     A7 FA 01 FB | 	rdlong	result1, fp
2bce8     01 FA 85 F1 | 	sub	result1, #1
2bcec     08 4E 85 F1 | 	sub	fp, #8
2bcf0     A7 18 02 FB | 	rdlong	arg04, fp
2bcf4     01 18 86 F1 | 	sub	arg04, #1
2bcf8     0C FB 21 F5 | 	andn	result1, arg04
2bcfc     14 16 06 F1 | 	add	arg03, #20
2bd00     0B FB 61 FC | 	wrlong	result1, arg03
2bd04     10 4E 85 F1 | 	sub	fp, #16
2bd08     A7 16 02 FB | 	rdlong	arg03, fp
2bd0c     04 4E 85 F1 | 	sub	fp, #4
2bd10     A7 18 02 FB | 	rdlong	arg04, fp
2bd14     14 18 06 F1 | 	add	arg04, #20
2bd18     0C 19 02 FB | 	rdlong	arg04, arg04
2bd1c     0C 17 82 F1 | 	sub	arg03, arg04
2bd20     04 4E 05 F1 | 	add	fp, #4
2bd24     A7 16 62 FC | 	wrlong	arg03, fp
2bd28     04 4E 85 F1 | 	sub	fp, #4
2bd2c     A7 16 02 FB | 	rdlong	arg03, fp
2bd30     18 16 06 F1 | 	add	arg03, #24
2bd34     0B 17 02 FB | 	rdlong	arg03, arg03
2bd38     10 4E 05 F1 | 	add	fp, #16
2bd3c     A7 16 62 FC | 	wrlong	arg03, fp
2bd40     14 4E 85 F1 | 	sub	fp, #20
2bd44     D0 00 90 FD | 	jmp	#LR__4406
2bd48                 | LR__4402
2bd48     04 4E 05 F1 | 	add	fp, #4
2bd4c     A7 16 02 FB | 	rdlong	arg03, fp
2bd50     08 16 06 F1 | 	add	arg03, #8
2bd54     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2bd58     10 4E 05 F1 | 	add	fp, #16
2bd5c     A7 16 62 FC | 	wrlong	arg03, fp
2bd60     14 4E 85 F1 | 	sub	fp, #20
2bd64     94 00 90 5D |  if_ne	jmp	#LR__4405
2bd68     04 4E 05 F1 | 	add	fp, #4
2bd6c     A7 12 02 FB | 	rdlong	arg01, fp
2bd70     04 4E 85 F1 | 	sub	fp, #4
2bd74     00 14 06 F6 | 	mov	arg02, #0
2bd78     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
2bd7c     14 4E 05 F1 | 	add	fp, #20
2bd80     A7 FA 61 FC | 	wrlong	result1, fp
2bd84     14 4E 85 F1 | 	sub	fp, #20
2bd88     01 FA 0D F2 | 	cmp	result1, #1 wz
2bd8c     1C 00 90 5D |  if_ne	jmp	#LR__4403
2bd90     04 4E 05 F1 | 	add	fp, #4
2bd94     A7 16 02 FB | 	rdlong	arg03, fp
2bd98     04 4E 85 F1 | 	sub	fp, #4
2bd9c     11 16 06 F1 | 	add	arg03, #17
2bda0     0B 05 48 FC | 	wrbyte	#2, arg03
2bda4     02 FA 05 F6 | 	mov	result1, #2
2bda8     5C 04 90 FD | 	jmp	#LR__4423
2bdac                 | LR__4403
2bdac     14 4E 05 F1 | 	add	fp, #20
2bdb0     A7 FA 01 FB | 	rdlong	result1, fp
2bdb4     14 4E 85 F1 | 	sub	fp, #20
2bdb8     FF FF 7F FF 
2bdbc     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2bdc0     1C 00 90 5D |  if_ne	jmp	#LR__4404
2bdc4     04 4E 05 F1 | 	add	fp, #4
2bdc8     A7 16 02 FB | 	rdlong	arg03, fp
2bdcc     04 4E 85 F1 | 	sub	fp, #4
2bdd0     11 16 06 F1 | 	add	arg03, #17
2bdd4     0B 03 48 FC | 	wrbyte	#1, arg03
2bdd8     01 FA 05 F6 | 	mov	result1, #1
2bddc     28 04 90 FD | 	jmp	#LR__4423
2bde0                 | LR__4404
2bde0     04 4E 05 F1 | 	add	fp, #4
2bde4     A7 16 02 FB | 	rdlong	arg03, fp
2bde8     10 4E 05 F1 | 	add	fp, #16
2bdec     A7 18 02 FB | 	rdlong	arg04, fp
2bdf0     14 4E 85 F1 | 	sub	fp, #20
2bdf4     08 16 06 F1 | 	add	arg03, #8
2bdf8     0B 19 62 FC | 	wrlong	arg04, arg03
2bdfc                 | LR__4405
2bdfc     04 4E 05 F1 | 	add	fp, #4
2be00     A7 16 02 FB | 	rdlong	arg03, fp
2be04     10 4E 05 F1 | 	add	fp, #16
2be08     A7 18 02 FB | 	rdlong	arg04, fp
2be0c     14 4E 85 F1 | 	sub	fp, #20
2be10     18 16 06 F1 | 	add	arg03, #24
2be14     0B 19 62 FC | 	wrlong	arg04, arg03
2be18                 | LR__4406
2be18     14 4E 05 F1 | 	add	fp, #20
2be1c     A7 16 0A FB | 	rdlong	arg03, fp wz
2be20     14 4E 85 F1 | 	sub	fp, #20
2be24     28 02 90 AD |  if_e	jmp	#LR__4416
2be28                 | ' 				while (ofs > bcs) {
2be28                 | LR__4407
2be28     08 4E 05 F1 | 	add	fp, #8
2be2c     A7 18 02 FB | 	rdlong	arg04, fp
2be30     10 4E 05 F1 | 	add	fp, #16
2be34     A7 16 02 FB | 	rdlong	arg03, fp
2be38     18 4E 85 F1 | 	sub	fp, #24
2be3c     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
2be40     68 01 90 ED |  if_be	jmp	#LR__4413
2be44     08 4E 05 F1 | 	add	fp, #8
2be48     A7 18 02 FB | 	rdlong	arg04, fp
2be4c     10 4E 05 F1 | 	add	fp, #16
2be50     A7 16 02 FB | 	rdlong	arg03, fp
2be54     0B 19 82 F1 | 	sub	arg04, arg03
2be58     10 4E 85 F1 | 	sub	fp, #16
2be5c     A7 18 62 FC | 	wrlong	arg04, fp
2be60     04 4E 85 F1 | 	sub	fp, #4
2be64     A7 18 02 FB | 	rdlong	arg04, fp
2be68     0C FB 01 F6 | 	mov	result1, arg04
2be6c     14 18 06 F1 | 	add	arg04, #20
2be70     0C 19 02 FB | 	rdlong	arg04, arg04
2be74     14 4E 05 F1 | 	add	fp, #20
2be78     A7 16 02 FB | 	rdlong	arg03, fp
2be7c     0B 19 02 F1 | 	add	arg04, arg03
2be80     14 FA 05 F1 | 	add	result1, #20
2be84     FD 18 62 FC | 	wrlong	arg04, result1
2be88     14 4E 85 F1 | 	sub	fp, #20
2be8c     A7 16 02 FB | 	rdlong	arg03, fp
2be90     04 4E 85 F1 | 	sub	fp, #4
2be94     10 16 06 F1 | 	add	arg03, #16
2be98     0B 17 C2 FA | 	rdbyte	arg03, arg03
2be9c     02 16 CE F7 | 	test	arg03, #2 wz
2bea0     3C 00 90 AD |  if_e	jmp	#LR__4408
2bea4     04 4E 05 F1 | 	add	fp, #4
2bea8     A7 12 02 FB | 	rdlong	arg01, fp
2beac     10 4E 05 F1 | 	add	fp, #16
2beb0     A7 14 02 FB | 	rdlong	arg02, fp
2beb4     14 4E 85 F1 | 	sub	fp, #20
2beb8     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
2bebc     14 4E 05 F1 | 	add	fp, #20
2bec0     A7 FA 61 FC | 	wrlong	result1, fp
2bec4     00 FA 4D F2 | 	cmps	result1, #0 wz
2bec8     14 4E 85 F1 | 	sub	fp, #20
2becc     08 4E 05 A1 |  if_e	add	fp, #8
2bed0     A7 00 68 AC |  if_e	wrlong	#0, fp
2bed4     08 4E 85 A1 |  if_e	sub	fp, #8
2bed8                 | ' 							ofs = 0; break;
2bed8     D0 00 90 AD |  if_e	jmp	#LR__4413
2bedc     24 00 90 FD | 	jmp	#LR__4409
2bee0                 | LR__4408
2bee0     04 4E 05 F1 | 	add	fp, #4
2bee4     A7 12 02 FB | 	rdlong	arg01, fp
2bee8     10 4E 05 F1 | 	add	fp, #16
2beec     A7 14 02 FB | 	rdlong	arg02, fp
2bef0     14 4E 85 F1 | 	sub	fp, #20
2bef4     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
2bef8     14 4E 05 F1 | 	add	fp, #20
2befc     A7 FA 61 FC | 	wrlong	result1, fp
2bf00     14 4E 85 F1 | 	sub	fp, #20
2bf04                 | LR__4409
2bf04     14 4E 05 F1 | 	add	fp, #20
2bf08     A7 16 02 FB | 	rdlong	arg03, fp
2bf0c     14 4E 85 F1 | 	sub	fp, #20
2bf10     FF FF 7F FF 
2bf14     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2bf18     1C 00 90 5D |  if_ne	jmp	#LR__4410
2bf1c     04 4E 05 F1 | 	add	fp, #4
2bf20     A7 16 02 FB | 	rdlong	arg03, fp
2bf24     04 4E 85 F1 | 	sub	fp, #4
2bf28     11 16 06 F1 | 	add	arg03, #17
2bf2c     0B 03 48 FC | 	wrbyte	#1, arg03
2bf30     01 FA 05 F6 | 	mov	result1, #1
2bf34     D0 02 90 FD | 	jmp	#LR__4423
2bf38                 | LR__4410
2bf38     14 4E 05 F1 | 	add	fp, #20
2bf3c     A7 16 02 FB | 	rdlong	arg03, fp
2bf40     14 4E 85 F1 | 	sub	fp, #20
2bf44     02 16 16 F2 | 	cmp	arg03, #2 wc
2bf48     24 00 90 CD |  if_b	jmp	#LR__4411
2bf4c     10 4E 05 F1 | 	add	fp, #16
2bf50     A7 18 02 FB | 	rdlong	arg04, fp
2bf54     04 4E 05 F1 | 	add	fp, #4
2bf58     A7 16 02 FB | 	rdlong	arg03, fp
2bf5c     14 4E 85 F1 | 	sub	fp, #20
2bf60     18 18 06 F1 | 	add	arg04, #24
2bf64     0C 19 02 FB | 	rdlong	arg04, arg04
2bf68     0C 17 12 F2 | 	cmp	arg03, arg04 wc
2bf6c     1C 00 90 CD |  if_b	jmp	#LR__4412
2bf70                 | LR__4411
2bf70     04 4E 05 F1 | 	add	fp, #4
2bf74     A7 16 02 FB | 	rdlong	arg03, fp
2bf78     04 4E 85 F1 | 	sub	fp, #4
2bf7c     11 16 06 F1 | 	add	arg03, #17
2bf80     0B 05 48 FC | 	wrbyte	#2, arg03
2bf84     02 FA 05 F6 | 	mov	result1, #2
2bf88     7C 02 90 FD | 	jmp	#LR__4423
2bf8c                 | LR__4412
2bf8c     04 4E 05 F1 | 	add	fp, #4
2bf90     A7 18 02 FB | 	rdlong	arg04, fp
2bf94     10 4E 05 F1 | 	add	fp, #16
2bf98     A7 16 02 FB | 	rdlong	arg03, fp
2bf9c     14 4E 85 F1 | 	sub	fp, #20
2bfa0     18 18 06 F1 | 	add	arg04, #24
2bfa4     0C 17 62 FC | 	wrlong	arg03, arg04
2bfa8     7C FE 9F FD | 	jmp	#LR__4407
2bfac                 | LR__4413
2bfac     04 4E 05 F1 | 	add	fp, #4
2bfb0     A7 16 02 FB | 	rdlong	arg03, fp
2bfb4     0B 13 02 F6 | 	mov	arg01, arg03
2bfb8     14 16 06 F1 | 	add	arg03, #20
2bfbc     0B 15 02 FB | 	rdlong	arg02, arg03
2bfc0     04 4E 05 F1 | 	add	fp, #4
2bfc4     A7 16 02 FB | 	rdlong	arg03, fp
2bfc8     0B 15 02 F1 | 	add	arg02, arg03
2bfcc     14 12 06 F1 | 	add	arg01, #20
2bfd0     09 15 62 FC | 	wrlong	arg02, arg01
2bfd4     A7 16 02 FB | 	rdlong	arg03, fp
2bfd8     08 4E 85 F1 | 	sub	fp, #8
2bfdc     FF 17 CE F7 | 	test	arg03, #511 wz
2bfe0     6C 00 90 AD |  if_e	jmp	#LR__4415
2bfe4     10 4E 05 F1 | 	add	fp, #16
2bfe8     A7 12 02 FB | 	rdlong	arg01, fp
2bfec     04 4E 05 F1 | 	add	fp, #4
2bff0     A7 14 02 FB | 	rdlong	arg02, fp
2bff4     14 4E 85 F1 | 	sub	fp, #20
2bff8     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
2bffc     1C 4E 05 F1 | 	add	fp, #28
2c000     A7 FA 61 FC | 	wrlong	result1, fp
2c004     1C 4E 85 F1 | 	sub	fp, #28
2c008     00 FA 0D F2 | 	cmp	result1, #0 wz
2c00c     1C 00 90 5D |  if_ne	jmp	#LR__4414
2c010     04 4E 05 F1 | 	add	fp, #4
2c014     A7 16 02 FB | 	rdlong	arg03, fp
2c018     04 4E 85 F1 | 	sub	fp, #4
2c01c     11 16 06 F1 | 	add	arg03, #17
2c020     0B 05 48 FC | 	wrbyte	#2, arg03
2c024     02 FA 05 F6 | 	mov	result1, #2
2c028     DC 01 90 FD | 	jmp	#LR__4423
2c02c                 | LR__4414
2c02c     1C 4E 05 F1 | 	add	fp, #28
2c030     A7 18 02 FB | 	rdlong	arg04, fp
2c034     14 4E 85 F1 | 	sub	fp, #20
2c038     A7 16 02 FB | 	rdlong	arg03, fp
2c03c     09 16 46 F0 | 	shr	arg03, #9
2c040     0B 19 02 F1 | 	add	arg04, arg03
2c044     14 4E 05 F1 | 	add	fp, #20
2c048     A7 18 62 FC | 	wrlong	arg04, fp
2c04c     1C 4E 85 F1 | 	sub	fp, #28
2c050                 | LR__4415
2c050                 | LR__4416
2c050                 | LR__4417
2c050     04 4E 05 F1 | 	add	fp, #4
2c054     A7 18 02 FB | 	rdlong	arg04, fp
2c058     0C 17 02 F6 | 	mov	arg03, arg04
2c05c     04 4E 85 F1 | 	sub	fp, #4
2c060     14 16 06 F1 | 	add	arg03, #20
2c064     0B 17 02 FB | 	rdlong	arg03, arg03
2c068     0C 18 06 F1 | 	add	arg04, #12
2c06c     0C 19 02 FB | 	rdlong	arg04, arg04
2c070     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2c074     3C 00 90 ED |  if_be	jmp	#LR__4418
2c078     04 4E 05 F1 | 	add	fp, #4
2c07c     A7 18 02 FB | 	rdlong	arg04, fp
2c080     0C 17 02 F6 | 	mov	arg03, arg04
2c084     14 18 06 F1 | 	add	arg04, #20
2c088     0C 19 02 FB | 	rdlong	arg04, arg04
2c08c     0C 16 06 F1 | 	add	arg03, #12
2c090     0B 19 62 FC | 	wrlong	arg04, arg03
2c094     A7 18 02 FB | 	rdlong	arg04, fp
2c098     0C 17 02 F6 | 	mov	arg03, arg04
2c09c     04 4E 85 F1 | 	sub	fp, #4
2c0a0     10 18 06 F1 | 	add	arg04, #16
2c0a4     0C 19 C2 FA | 	rdbyte	arg04, arg04
2c0a8     40 18 46 F5 | 	or	arg04, #64
2c0ac     10 16 06 F1 | 	add	arg03, #16
2c0b0     0B 19 42 FC | 	wrbyte	arg04, arg03
2c0b4                 | LR__4418
2c0b4     04 4E 05 F1 | 	add	fp, #4
2c0b8     A7 16 02 FB | 	rdlong	arg03, fp
2c0bc     04 4E 85 F1 | 	sub	fp, #4
2c0c0     14 16 06 F1 | 	add	arg03, #20
2c0c4     0B 17 02 FB | 	rdlong	arg03, arg03
2c0c8     FF 17 CE F7 | 	test	arg03, #511 wz
2c0cc     2C 01 90 AD |  if_e	jmp	#LR__4422
2c0d0     04 4E 05 F1 | 	add	fp, #4
2c0d4     A7 18 02 FB | 	rdlong	arg04, fp
2c0d8     18 4E 05 F1 | 	add	fp, #24
2c0dc     A7 16 02 FB | 	rdlong	arg03, fp
2c0e0     1C 4E 85 F1 | 	sub	fp, #28
2c0e4     1C 18 06 F1 | 	add	arg04, #28
2c0e8     0C 19 02 FB | 	rdlong	arg04, arg04
2c0ec     0C 17 0A F2 | 	cmp	arg03, arg04 wz
2c0f0     08 01 90 AD |  if_e	jmp	#LR__4422
2c0f4     04 4E 05 F1 | 	add	fp, #4
2c0f8     A7 16 02 FB | 	rdlong	arg03, fp
2c0fc     04 4E 85 F1 | 	sub	fp, #4
2c100     10 16 06 F1 | 	add	arg03, #16
2c104     0B 17 C2 FA | 	rdbyte	arg03, arg03
2c108     80 16 CE F7 | 	test	arg03, #128 wz
2c10c     7C 00 90 AD |  if_e	jmp	#LR__4420
2c110     10 4E 05 F1 | 	add	fp, #16
2c114     A7 16 02 FB | 	rdlong	arg03, fp
2c118     01 16 06 F1 | 	add	arg03, #1
2c11c     0B 13 C2 FA | 	rdbyte	arg01, arg03
2c120     0C 4E 85 F1 | 	sub	fp, #12
2c124     A7 16 02 FB | 	rdlong	arg03, fp
2c128     0B 15 02 F6 | 	mov	arg02, arg03
2c12c     28 14 06 F1 | 	add	arg02, #40
2c130     04 4E 85 F1 | 	sub	fp, #4
2c134     1C 16 06 F1 | 	add	arg03, #28
2c138     0B 17 02 FB | 	rdlong	arg03, arg03
2c13c     01 18 06 F6 | 	mov	arg04, #1
2c140     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
2c144     00 FA 0D F2 | 	cmp	result1, #0 wz
2c148     1C 00 90 AD |  if_e	jmp	#LR__4419
2c14c     04 4E 05 F1 | 	add	fp, #4
2c150     A7 16 02 FB | 	rdlong	arg03, fp
2c154     04 4E 85 F1 | 	sub	fp, #4
2c158     11 16 06 F1 | 	add	arg03, #17
2c15c     0B 03 48 FC | 	wrbyte	#1, arg03
2c160     01 FA 05 F6 | 	mov	result1, #1
2c164     A0 00 90 FD | 	jmp	#LR__4423
2c168                 | LR__4419
2c168     04 4E 05 F1 | 	add	fp, #4
2c16c     A7 18 02 FB | 	rdlong	arg04, fp
2c170     0C 17 02 F6 | 	mov	arg03, arg04
2c174     04 4E 85 F1 | 	sub	fp, #4
2c178     10 18 06 F1 | 	add	arg04, #16
2c17c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2c180     7F 18 06 F5 | 	and	arg04, #127
2c184     10 16 06 F1 | 	add	arg03, #16
2c188     0B 19 42 FC | 	wrbyte	arg04, arg03
2c18c                 | LR__4420
2c18c     10 4E 05 F1 | 	add	fp, #16
2c190     A7 16 02 FB | 	rdlong	arg03, fp
2c194     01 16 06 F1 | 	add	arg03, #1
2c198     0B 13 C2 FA | 	rdbyte	arg01, arg03
2c19c     0C 4E 85 F1 | 	sub	fp, #12
2c1a0     A7 14 02 FB | 	rdlong	arg02, fp
2c1a4     28 14 06 F1 | 	add	arg02, #40
2c1a8     18 4E 05 F1 | 	add	fp, #24
2c1ac     A7 16 02 FB | 	rdlong	arg03, fp
2c1b0     1C 4E 85 F1 | 	sub	fp, #28
2c1b4     01 18 06 F6 | 	mov	arg04, #1
2c1b8     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
2c1bc     00 FA 0D F2 | 	cmp	result1, #0 wz
2c1c0     1C 00 90 AD |  if_e	jmp	#LR__4421
2c1c4     04 4E 05 F1 | 	add	fp, #4
2c1c8     A7 16 02 FB | 	rdlong	arg03, fp
2c1cc     04 4E 85 F1 | 	sub	fp, #4
2c1d0     11 16 06 F1 | 	add	arg03, #17
2c1d4     0B 03 48 FC | 	wrbyte	#1, arg03
2c1d8     01 FA 05 F6 | 	mov	result1, #1
2c1dc     28 00 90 FD | 	jmp	#LR__4423
2c1e0                 | LR__4421
2c1e0     04 4E 05 F1 | 	add	fp, #4
2c1e4     A7 18 02 FB | 	rdlong	arg04, fp
2c1e8     18 4E 05 F1 | 	add	fp, #24
2c1ec     A7 16 02 FB | 	rdlong	arg03, fp
2c1f0     1C 4E 85 F1 | 	sub	fp, #28
2c1f4     1C 18 06 F1 | 	add	arg04, #28
2c1f8     0C 17 62 FC | 	wrlong	arg03, arg04
2c1fc                 | LR__4422
2c1fc                 | ' 
2c1fc                 | ' 			fp->sect = nsect;
2c1fc                 | ' 		}
2c1fc                 | ' 	}
2c1fc                 | ' 
2c1fc                 | ' 	return res ;
2c1fc     0C 4E 05 F1 | 	add	fp, #12
2c200     A7 FA 01 FB | 	rdlong	result1, fp
2c204     0C 4E 85 F1 | 	sub	fp, #12
2c208                 | LR__4423
2c208     A7 F0 03 F6 | 	mov	ptra, fp
2c20c     B2 00 A0 FD | 	call	#popregs_
2c210                 | _fatfs_cc_f_lseek_ret
2c210     2D 00 64 FD | 	ret
2c214                 | 
2c214                 | _fatfs_cc_f_opendir
2c214     01 4A 05 F6 | 	mov	COUNT_, #1
2c218     A8 00 A0 FD | 	call	#pushregs_
2c21c     14 F0 07 F1 | 	add	ptra, #20
2c220     04 4E 05 F1 | 	add	fp, #4
2c224     A7 12 62 FC | 	wrlong	arg01, fp
2c228     04 4E 05 F1 | 	add	fp, #4
2c22c     A7 14 62 FC | 	wrlong	arg02, fp
2c230     04 4E 85 F1 | 	sub	fp, #4
2c234     A7 16 0A FB | 	rdlong	arg03, fp wz
2c238     04 4E 85 F1 | 	sub	fp, #4
2c23c     09 FA 05 A6 |  if_e	mov	result1, #9
2c240     78 01 90 AD |  if_e	jmp	#LR__4436
2c244     08 4E 05 F1 | 	add	fp, #8
2c248     A7 12 02 F6 | 	mov	arg01, fp
2c24c     08 4E 05 F1 | 	add	fp, #8
2c250     A7 14 02 F6 | 	mov	arg02, fp
2c254     10 4E 85 F1 | 	sub	fp, #16
2c258     00 16 06 F6 | 	mov	arg03, #0
2c25c     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
2c260     0C 4E 05 F1 | 	add	fp, #12
2c264     A7 FA 61 FC | 	wrlong	result1, fp
2c268     0C 4E 85 F1 | 	sub	fp, #12
2c26c     00 FA 0D F2 | 	cmp	result1, #0 wz
2c270     20 01 90 5D |  if_ne	jmp	#LR__4435
2c274     04 4E 05 F1 | 	add	fp, #4
2c278     A7 16 02 FB | 	rdlong	arg03, fp
2c27c     0C 4E 05 F1 | 	add	fp, #12
2c280     A7 FA 01 FB | 	rdlong	result1, fp
2c284     0B FB 61 FC | 	wrlong	result1, arg03
2c288     0C 4E 85 F1 | 	sub	fp, #12
2c28c     A7 12 02 FB | 	rdlong	arg01, fp
2c290     04 4E 05 F1 | 	add	fp, #4
2c294     A7 14 02 FB | 	rdlong	arg02, fp
2c298     08 4E 85 F1 | 	sub	fp, #8
2c29c     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
2c2a0     0C 4E 05 F1 | 	add	fp, #12
2c2a4     A7 FA 61 FC | 	wrlong	result1, fp
2c2a8     0C 4E 85 F1 | 	sub	fp, #12
2c2ac     00 FA 0D F2 | 	cmp	result1, #0 wz
2c2b0     C4 00 90 5D |  if_ne	jmp	#LR__4434
2c2b4     04 4E 05 F1 | 	add	fp, #4
2c2b8     A7 16 02 FB | 	rdlong	arg03, fp
2c2bc     04 4E 85 F1 | 	sub	fp, #4
2c2c0     2B 16 06 F1 | 	add	arg03, #43
2c2c4     0B 17 C2 FA | 	rdbyte	arg03, arg03
2c2c8     80 16 CE F7 | 	test	arg03, #128 wz
2c2cc     58 00 90 5D |  if_ne	jmp	#LR__4432
2c2d0     04 4E 05 F1 | 	add	fp, #4
2c2d4     A7 16 02 FB | 	rdlong	arg03, fp
2c2d8     04 4E 85 F1 | 	sub	fp, #4
2c2dc     06 16 06 F1 | 	add	arg03, #6
2c2e0     0B 17 C2 FA | 	rdbyte	arg03, arg03
2c2e4     10 16 CE F7 | 	test	arg03, #16 wz
2c2e8     30 00 90 AD |  if_e	jmp	#LR__4430
2c2ec     04 4E 05 F1 | 	add	fp, #4
2c2f0     A7 16 02 FB | 	rdlong	arg03, fp
2c2f4     0B 1F 02 F6 | 	mov	local01, arg03
2c2f8     0C 4E 05 F1 | 	add	fp, #12
2c2fc     A7 12 02 FB | 	rdlong	arg01, fp
2c300     10 4E 85 F1 | 	sub	fp, #16
2c304     1C 16 06 F1 | 	add	arg03, #28
2c308     0B 15 02 FB | 	rdlong	arg02, arg03
2c30c     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
2c310     08 1E 06 F1 | 	add	local01, #8
2c314     0F FB 61 FC | 	wrlong	result1, local01
2c318     0C 00 90 FD | 	jmp	#LR__4431
2c31c                 | LR__4430
2c31c     0C 4E 05 F1 | 	add	fp, #12
2c320     A7 0A 68 FC | 	wrlong	#5, fp
2c324     0C 4E 85 F1 | 	sub	fp, #12
2c328                 | LR__4431
2c328                 | LR__4432
2c328     0C 4E 05 F1 | 	add	fp, #12
2c32c     A7 1E 0A FB | 	rdlong	local01, fp wz
2c330     0C 4E 85 F1 | 	sub	fp, #12
2c334     40 00 90 5D |  if_ne	jmp	#LR__4433
2c338     04 4E 05 F1 | 	add	fp, #4
2c33c     A7 1E 02 FB | 	rdlong	local01, fp
2c340     0C 4E 05 F1 | 	add	fp, #12
2c344     A7 16 02 FB | 	rdlong	arg03, fp
2c348     06 16 06 F1 | 	add	arg03, #6
2c34c     0B 17 E2 FA | 	rdword	arg03, arg03
2c350     04 1E 06 F1 | 	add	local01, #4
2c354     0F 17 52 FC | 	wrword	arg03, local01
2c358     0C 4E 85 F1 | 	sub	fp, #12
2c35c     A7 12 02 FB | 	rdlong	arg01, fp
2c360     04 4E 85 F1 | 	sub	fp, #4
2c364     00 14 06 F6 | 	mov	arg02, #0
2c368     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
2c36c     0C 4E 05 F1 | 	add	fp, #12
2c370     A7 FA 61 FC | 	wrlong	result1, fp
2c374     0C 4E 85 F1 | 	sub	fp, #12
2c378                 | LR__4433
2c378                 | LR__4434
2c378     0C 4E 05 F1 | 	add	fp, #12
2c37c     A7 1E 02 FB | 	rdlong	local01, fp
2c380     0C 4E 85 F1 | 	sub	fp, #12
2c384     04 1E 0E F2 | 	cmp	local01, #4 wz
2c388     0C 4E 05 A1 |  if_e	add	fp, #12
2c38c     A7 0A 68 AC |  if_e	wrlong	#5, fp
2c390     0C 4E 85 A1 |  if_e	sub	fp, #12
2c394                 | LR__4435
2c394     0C 4E 05 F1 | 	add	fp, #12
2c398     A7 1E 0A FB | 	rdlong	local01, fp wz
2c39c     0C 4E 85 F1 | 	sub	fp, #12
2c3a0     04 4E 05 51 |  if_ne	add	fp, #4
2c3a4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2c3a8     04 4E 85 51 |  if_ne	sub	fp, #4
2c3ac     0F 01 68 5C |  if_ne	wrlong	#0, local01
2c3b0                 | ' 
2c3b0                 | ' 	return res ;
2c3b0     0C 4E 05 F1 | 	add	fp, #12
2c3b4     A7 FA 01 FB | 	rdlong	result1, fp
2c3b8     0C 4E 85 F1 | 	sub	fp, #12
2c3bc                 | LR__4436
2c3bc     A7 F0 03 F6 | 	mov	ptra, fp
2c3c0     B2 00 A0 FD | 	call	#popregs_
2c3c4                 | _fatfs_cc_f_opendir_ret
2c3c4     2D 00 64 FD | 	ret
2c3c8                 | 
2c3c8                 | _fatfs_cc_f_closedir
2c3c8     00 4A 05 F6 | 	mov	COUNT_, #0
2c3cc     A8 00 A0 FD | 	call	#pushregs_
2c3d0     10 F0 07 F1 | 	add	ptra, #16
2c3d4     04 4E 05 F1 | 	add	fp, #4
2c3d8     A7 12 62 FC | 	wrlong	arg01, fp
2c3dc     08 4E 05 F1 | 	add	fp, #8
2c3e0     A7 14 02 F6 | 	mov	arg02, fp
2c3e4     0C 4E 85 F1 | 	sub	fp, #12
2c3e8     C0 DD BF FD | 	call	#_fatfs_cc_validate
2c3ec     08 4E 05 F1 | 	add	fp, #8
2c3f0     A7 FA 61 FC | 	wrlong	result1, fp
2c3f4     08 4E 85 F1 | 	sub	fp, #8
2c3f8     00 FA 0D F2 | 	cmp	result1, #0 wz
2c3fc     04 4E 05 A1 |  if_e	add	fp, #4
2c400     A7 FA 01 AB |  if_e	rdlong	result1, fp
2c404     04 4E 85 A1 |  if_e	sub	fp, #4
2c408     FD 00 68 AC |  if_e	wrlong	#0, result1
2c40c                 | ' 
2c40c                 | ' 
2c40c                 | ' 
2c40c                 | ' 
2c40c                 | ' 		dp->obj.fs = 0;
2c40c                 | ' #line 4633 "ff.c"
2c40c                 | ' 	}
2c40c                 | ' 	return res;
2c40c     08 4E 05 F1 | 	add	fp, #8
2c410     A7 FA 01 FB | 	rdlong	result1, fp
2c414     08 4E 85 F1 | 	sub	fp, #8
2c418     A7 F0 03 F6 | 	mov	ptra, fp
2c41c     B2 00 A0 FD | 	call	#popregs_
2c420                 | _fatfs_cc_f_closedir_ret
2c420     2D 00 64 FD | 	ret
2c424                 | 
2c424                 | _fatfs_cc_f_readdir
2c424     00 4A 05 F6 | 	mov	COUNT_, #0
2c428     A8 00 A0 FD | 	call	#pushregs_
2c42c     14 F0 07 F1 | 	add	ptra, #20
2c430     04 4E 05 F1 | 	add	fp, #4
2c434     A7 12 62 FC | 	wrlong	arg01, fp
2c438     04 4E 05 F1 | 	add	fp, #4
2c43c     A7 14 62 FC | 	wrlong	arg02, fp
2c440     04 4E 85 F1 | 	sub	fp, #4
2c444     A7 12 02 FB | 	rdlong	arg01, fp
2c448     0C 4E 05 F1 | 	add	fp, #12
2c44c     A7 14 02 F6 | 	mov	arg02, fp
2c450     10 4E 85 F1 | 	sub	fp, #16
2c454     54 DD BF FD | 	call	#_fatfs_cc_validate
2c458     0C 4E 05 F1 | 	add	fp, #12
2c45c     A7 FA 61 FC | 	wrlong	result1, fp
2c460     0C 4E 85 F1 | 	sub	fp, #12
2c464     00 FA 0D F2 | 	cmp	result1, #0 wz
2c468     BC 00 90 5D |  if_ne	jmp	#LR__4443
2c46c     08 4E 05 F1 | 	add	fp, #8
2c470     A7 FA 09 FB | 	rdlong	result1, fp wz
2c474     08 4E 85 F1 | 	sub	fp, #8
2c478     24 00 90 5D |  if_ne	jmp	#LR__4440
2c47c     04 4E 05 F1 | 	add	fp, #4
2c480     A7 12 02 FB | 	rdlong	arg01, fp
2c484     04 4E 85 F1 | 	sub	fp, #4
2c488     00 14 06 F6 | 	mov	arg02, #0
2c48c     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
2c490     0C 4E 05 F1 | 	add	fp, #12
2c494     A7 FA 61 FC | 	wrlong	result1, fp
2c498     0C 4E 85 F1 | 	sub	fp, #12
2c49c     88 00 90 FD | 	jmp	#LR__4442
2c4a0                 | LR__4440
2c4a0     04 4E 05 F1 | 	add	fp, #4
2c4a4     A7 12 02 FB | 	rdlong	arg01, fp
2c4a8     04 4E 85 F1 | 	sub	fp, #4
2c4ac     00 14 06 F6 | 	mov	arg02, #0
2c4b0     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
2c4b4     0C 4E 05 F1 | 	add	fp, #12
2c4b8     A7 FA 61 FC | 	wrlong	result1, fp
2c4bc     0C 4E 85 F1 | 	sub	fp, #12
2c4c0     04 FA 0D F2 | 	cmp	result1, #4 wz
2c4c4     0C 4E 05 A1 |  if_e	add	fp, #12
2c4c8     A7 00 68 AC |  if_e	wrlong	#0, fp
2c4cc     0C 4E 85 A1 |  if_e	sub	fp, #12
2c4d0     0C 4E 05 F1 | 	add	fp, #12
2c4d4     A7 FA 09 FB | 	rdlong	result1, fp wz
2c4d8     0C 4E 85 F1 | 	sub	fp, #12
2c4dc     48 00 90 5D |  if_ne	jmp	#LR__4441
2c4e0     04 4E 05 F1 | 	add	fp, #4
2c4e4     A7 12 02 FB | 	rdlong	arg01, fp
2c4e8     04 4E 05 F1 | 	add	fp, #4
2c4ec     A7 14 02 FB | 	rdlong	arg02, fp
2c4f0     08 4E 85 F1 | 	sub	fp, #8
2c4f4     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
2c4f8     04 4E 05 F1 | 	add	fp, #4
2c4fc     A7 12 02 FB | 	rdlong	arg01, fp
2c500     04 4E 85 F1 | 	sub	fp, #4
2c504     00 14 06 F6 | 	mov	arg02, #0
2c508     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
2c50c     0C 4E 05 F1 | 	add	fp, #12
2c510     A7 FA 61 FC | 	wrlong	result1, fp
2c514     0C 4E 85 F1 | 	sub	fp, #12
2c518     04 FA 0D F2 | 	cmp	result1, #4 wz
2c51c     0C 4E 05 A1 |  if_e	add	fp, #12
2c520     A7 00 68 AC |  if_e	wrlong	#0, fp
2c524     0C 4E 85 A1 |  if_e	sub	fp, #12
2c528                 | LR__4441
2c528                 | LR__4442
2c528                 | LR__4443
2c528                 | ' 			}
2c528                 | ' 			;
2c528                 | ' 		}
2c528                 | ' 	}
2c528                 | ' 	return res ;
2c528     0C 4E 05 F1 | 	add	fp, #12
2c52c     A7 FA 01 FB | 	rdlong	result1, fp
2c530     0C 4E 85 F1 | 	sub	fp, #12
2c534     A7 F0 03 F6 | 	mov	ptra, fp
2c538     B2 00 A0 FD | 	call	#popregs_
2c53c                 | _fatfs_cc_f_readdir_ret
2c53c     2D 00 64 FD | 	ret
2c540                 | 
2c540                 | _fatfs_cc_f_stat
2c540     00 4A 05 F6 | 	mov	COUNT_, #0
2c544     A8 00 A0 FD | 	call	#pushregs_
2c548     40 F0 07 F1 | 	add	ptra, #64
2c54c     04 4E 05 F1 | 	add	fp, #4
2c550     A7 12 62 FC | 	wrlong	arg01, fp
2c554     04 4E 05 F1 | 	add	fp, #4
2c558     A7 14 62 FC | 	wrlong	arg02, fp
2c55c     04 4E 85 F1 | 	sub	fp, #4
2c560     A7 12 02 F6 | 	mov	arg01, fp
2c564     0C 4E 05 F1 | 	add	fp, #12
2c568     A7 14 02 F6 | 	mov	arg02, fp
2c56c     10 4E 85 F1 | 	sub	fp, #16
2c570     00 16 06 F6 | 	mov	arg03, #0
2c574     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
2c578     0C 4E 05 F1 | 	add	fp, #12
2c57c     A7 FA 61 FC | 	wrlong	result1, fp
2c580     0C 4E 85 F1 | 	sub	fp, #12
2c584     00 FA 0D F2 | 	cmp	result1, #0 wz
2c588     74 00 90 5D |  if_ne	jmp	#LR__4453
2c58c     10 4E 05 F1 | 	add	fp, #16
2c590     A7 12 02 F6 | 	mov	arg01, fp
2c594     0C 4E 85 F1 | 	sub	fp, #12
2c598     A7 14 02 FB | 	rdlong	arg02, fp
2c59c     04 4E 85 F1 | 	sub	fp, #4
2c5a0     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
2c5a4     0C 4E 05 F1 | 	add	fp, #12
2c5a8     A7 FA 61 FC | 	wrlong	result1, fp
2c5ac     0C 4E 85 F1 | 	sub	fp, #12
2c5b0     00 FA 0D F2 | 	cmp	result1, #0 wz
2c5b4     48 00 90 5D |  if_ne	jmp	#LR__4452
2c5b8     3B 4E 05 F1 | 	add	fp, #59
2c5bc     A7 FA C1 FA | 	rdbyte	result1, fp
2c5c0     3B 4E 85 F1 | 	sub	fp, #59
2c5c4     80 FA CD F7 | 	test	result1, #128 wz
2c5c8     0C 4E 05 51 |  if_ne	add	fp, #12
2c5cc     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2c5d0     0C 4E 85 51 |  if_ne	sub	fp, #12
2c5d4     28 00 90 5D |  if_ne	jmp	#LR__4451
2c5d8     08 4E 05 F1 | 	add	fp, #8
2c5dc     A7 FA 09 FB | 	rdlong	result1, fp wz
2c5e0     08 4E 85 F1 | 	sub	fp, #8
2c5e4     18 00 90 AD |  if_e	jmp	#LR__4450
2c5e8     10 4E 05 F1 | 	add	fp, #16
2c5ec     A7 12 02 F6 | 	mov	arg01, fp
2c5f0     08 4E 85 F1 | 	sub	fp, #8
2c5f4     A7 14 02 FB | 	rdlong	arg02, fp
2c5f8     08 4E 85 F1 | 	sub	fp, #8
2c5fc     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
2c600                 | LR__4450
2c600                 | LR__4451
2c600                 | LR__4452
2c600                 | LR__4453
2c600                 | ' 			}
2c600                 | ' 		}
2c600                 | ' 		;
2c600                 | ' 	}
2c600                 | ' 
2c600                 | ' 	return res ;
2c600     0C 4E 05 F1 | 	add	fp, #12
2c604     A7 FA 01 FB | 	rdlong	result1, fp
2c608     0C 4E 85 F1 | 	sub	fp, #12
2c60c     A7 F0 03 F6 | 	mov	ptra, fp
2c610     B2 00 A0 FD | 	call	#popregs_
2c614                 | _fatfs_cc_f_stat_ret
2c614     2D 00 64 FD | 	ret
2c618                 | 
2c618                 | _fatfs_cc_f_unlink
2c618     00 4A 05 F6 | 	mov	COUNT_, #0
2c61c     A8 00 A0 FD | 	call	#pushregs_
2c620     74 F0 07 F1 | 	add	ptra, #116
2c624     04 4E 05 F1 | 	add	fp, #4
2c628     A7 12 62 FC | 	wrlong	arg01, fp
2c62c     68 4E 05 F1 | 	add	fp, #104
2c630     A7 00 68 FC | 	wrlong	#0, fp
2c634     68 4E 85 F1 | 	sub	fp, #104
2c638     A7 12 02 F6 | 	mov	arg01, fp
2c63c     6C 4E 05 F1 | 	add	fp, #108
2c640     A7 14 02 F6 | 	mov	arg02, fp
2c644     70 4E 85 F1 | 	sub	fp, #112
2c648     02 16 06 F6 | 	mov	arg03, #2
2c64c     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
2c650     08 4E 05 F1 | 	add	fp, #8
2c654     A7 FA 61 FC | 	wrlong	result1, fp
2c658     08 4E 85 F1 | 	sub	fp, #8
2c65c     00 FA 0D F2 | 	cmp	result1, #0 wz
2c660     E4 01 90 5D |  if_ne	jmp	#LR__4468
2c664     70 4E 05 F1 | 	add	fp, #112
2c668     A7 16 02 FB | 	rdlong	arg03, fp
2c66c     64 4E 85 F1 | 	sub	fp, #100
2c670     A7 16 62 FC | 	wrlong	arg03, fp
2c674     A7 12 02 F6 | 	mov	arg01, fp
2c678     08 4E 85 F1 | 	sub	fp, #8
2c67c     A7 14 02 FB | 	rdlong	arg02, fp
2c680     04 4E 85 F1 | 	sub	fp, #4
2c684     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
2c688     08 4E 05 F1 | 	add	fp, #8
2c68c     A7 FA 61 FC | 	wrlong	result1, fp
2c690     00 FA 4D F2 | 	cmps	result1, #0 wz
2c694     08 4E 85 F1 | 	sub	fp, #8
2c698     AC 01 90 5D |  if_ne	jmp	#LR__4467
2c69c     37 4E 05 F1 | 	add	fp, #55
2c6a0     A7 FA C1 FA | 	rdbyte	result1, fp
2c6a4     37 4E 85 F1 | 	sub	fp, #55
2c6a8     80 FA CD F7 | 	test	result1, #128 wz
2c6ac     08 4E 05 51 |  if_ne	add	fp, #8
2c6b0     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2c6b4     08 4E 85 51 |  if_ne	sub	fp, #8
2c6b8     1C 00 90 5D |  if_ne	jmp	#LR__4460
2c6bc     12 4E 05 F1 | 	add	fp, #18
2c6c0     A7 FA C1 FA | 	rdbyte	result1, fp
2c6c4     12 4E 85 F1 | 	sub	fp, #18
2c6c8     01 FA CD F7 | 	test	result1, #1 wz
2c6cc     08 4E 05 51 |  if_ne	add	fp, #8
2c6d0     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2c6d4     08 4E 85 51 |  if_ne	sub	fp, #8
2c6d8                 | LR__4460
2c6d8     08 4E 05 F1 | 	add	fp, #8
2c6dc     A7 FA 09 FB | 	rdlong	result1, fp wz
2c6e0     08 4E 85 F1 | 	sub	fp, #8
2c6e4     C8 00 90 5D |  if_ne	jmp	#LR__4463
2c6e8     70 4E 05 F1 | 	add	fp, #112
2c6ec     A7 12 02 FB | 	rdlong	arg01, fp
2c6f0     48 4E 85 F1 | 	sub	fp, #72
2c6f4     A7 14 02 FB | 	rdlong	arg02, fp
2c6f8     28 4E 85 F1 | 	sub	fp, #40
2c6fc     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
2c700     6C 4E 05 F1 | 	add	fp, #108
2c704     A7 FA 61 FC | 	wrlong	result1, fp
2c708     5A 4E 85 F1 | 	sub	fp, #90
2c70c     A7 FA C1 FA | 	rdbyte	result1, fp
2c710     12 4E 85 F1 | 	sub	fp, #18
2c714     10 FA CD F7 | 	test	result1, #16 wz
2c718     94 00 90 AD |  if_e	jmp	#LR__4462
2c71c     70 4E 05 F1 | 	add	fp, #112
2c720     A7 FA 01 FB | 	rdlong	result1, fp
2c724     34 4E 85 F1 | 	sub	fp, #52
2c728     A7 FA 61 FC | 	wrlong	result1, fp
2c72c     30 4E 05 F1 | 	add	fp, #48
2c730     A7 16 02 FB | 	rdlong	arg03, fp
2c734     28 4E 85 F1 | 	sub	fp, #40
2c738     A7 16 62 FC | 	wrlong	arg03, fp
2c73c     08 4E 85 F1 | 	sub	fp, #8
2c740     A7 12 02 F6 | 	mov	arg01, fp
2c744     3C 4E 85 F1 | 	sub	fp, #60
2c748     00 14 06 F6 | 	mov	arg02, #0
2c74c     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
2c750     08 4E 05 F1 | 	add	fp, #8
2c754     A7 FA 61 FC | 	wrlong	result1, fp
2c758     08 4E 85 F1 | 	sub	fp, #8
2c75c     00 FA 0D F2 | 	cmp	result1, #0 wz
2c760     4C 00 90 5D |  if_ne	jmp	#LR__4461
2c764     3C 4E 05 F1 | 	add	fp, #60
2c768     A7 12 02 F6 | 	mov	arg01, fp
2c76c     3C 4E 85 F1 | 	sub	fp, #60
2c770     00 14 06 F6 | 	mov	arg02, #0
2c774     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
2c778     08 4E 05 F1 | 	add	fp, #8
2c77c     A7 FA 61 FC | 	wrlong	result1, fp
2c780     00 FA 4D F2 | 	cmps	result1, #0 wz
2c784     08 4E 85 F1 | 	sub	fp, #8
2c788     08 4E 05 A1 |  if_e	add	fp, #8
2c78c     A7 0E 68 AC |  if_e	wrlong	#7, fp
2c790     08 4E 85 A1 |  if_e	sub	fp, #8
2c794     08 4E 05 F1 | 	add	fp, #8
2c798     A7 FA 01 FB | 	rdlong	result1, fp
2c79c     08 4E 85 F1 | 	sub	fp, #8
2c7a0     04 FA 0D F2 | 	cmp	result1, #4 wz
2c7a4     08 4E 05 A1 |  if_e	add	fp, #8
2c7a8     A7 00 68 AC |  if_e	wrlong	#0, fp
2c7ac     08 4E 85 A1 |  if_e	sub	fp, #8
2c7b0                 | LR__4461
2c7b0                 | LR__4462
2c7b0                 | LR__4463
2c7b0     08 4E 05 F1 | 	add	fp, #8
2c7b4     A7 FA 09 FB | 	rdlong	result1, fp wz
2c7b8     08 4E 85 F1 | 	sub	fp, #8
2c7bc     88 00 90 5D |  if_ne	jmp	#LR__4466
2c7c0     0C 4E 05 F1 | 	add	fp, #12
2c7c4     A7 12 02 F6 | 	mov	arg01, fp
2c7c8     0C 4E 85 F1 | 	sub	fp, #12
2c7cc     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
2c7d0     08 4E 05 F1 | 	add	fp, #8
2c7d4     A7 FA 61 FC | 	wrlong	result1, fp
2c7d8     08 4E 85 F1 | 	sub	fp, #8
2c7dc     00 FA 0D F2 | 	cmp	result1, #0 wz
2c7e0     38 00 90 5D |  if_ne	jmp	#LR__4464
2c7e4     6C 4E 05 F1 | 	add	fp, #108
2c7e8     A7 FA 09 FB | 	rdlong	result1, fp wz
2c7ec     6C 4E 85 F1 | 	sub	fp, #108
2c7f0     28 00 90 AD |  if_e	jmp	#LR__4464
2c7f4     0C 4E 05 F1 | 	add	fp, #12
2c7f8     A7 12 02 F6 | 	mov	arg01, fp
2c7fc     60 4E 05 F1 | 	add	fp, #96
2c800     A7 14 02 FB | 	rdlong	arg02, fp
2c804     6C 4E 85 F1 | 	sub	fp, #108
2c808     00 16 06 F6 | 	mov	arg03, #0
2c80c     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
2c810     08 4E 05 F1 | 	add	fp, #8
2c814     A7 FA 61 FC | 	wrlong	result1, fp
2c818     08 4E 85 F1 | 	sub	fp, #8
2c81c                 | LR__4464
2c81c     08 4E 05 F1 | 	add	fp, #8
2c820     A7 FA 09 FB | 	rdlong	result1, fp wz
2c824     08 4E 85 F1 | 	sub	fp, #8
2c828     1C 00 90 5D |  if_ne	jmp	#LR__4465
2c82c     70 4E 05 F1 | 	add	fp, #112
2c830     A7 12 02 FB | 	rdlong	arg01, fp
2c834     70 4E 85 F1 | 	sub	fp, #112
2c838     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
2c83c     08 4E 05 F1 | 	add	fp, #8
2c840     A7 FA 61 FC | 	wrlong	result1, fp
2c844     08 4E 85 F1 | 	sub	fp, #8
2c848                 | LR__4465
2c848                 | LR__4466
2c848                 | LR__4467
2c848                 | LR__4468
2c848                 | ' 			}
2c848                 | ' 		}
2c848                 | ' 		;
2c848                 | ' 	}
2c848                 | ' 
2c848                 | ' 	return res ;
2c848     08 4E 05 F1 | 	add	fp, #8
2c84c     A7 FA 01 FB | 	rdlong	result1, fp
2c850     08 4E 85 F1 | 	sub	fp, #8
2c854     A7 F0 03 F6 | 	mov	ptra, fp
2c858     B2 00 A0 FD | 	call	#popregs_
2c85c                 | _fatfs_cc_f_unlink_ret
2c85c     2D 00 64 FD | 	ret
2c860                 | 
2c860                 | _fatfs_cc_f_mkdir
2c860     00 4A 05 F6 | 	mov	COUNT_, #0
2c864     A8 00 A0 FD | 	call	#pushregs_
2c868     5C F0 07 F1 | 	add	ptra, #92
2c86c     04 4E 05 F1 | 	add	fp, #4
2c870     A7 12 62 FC | 	wrlong	arg01, fp
2c874     A7 12 02 F6 | 	mov	arg01, fp
2c878     48 4E 05 F1 | 	add	fp, #72
2c87c     A7 14 02 F6 | 	mov	arg02, fp
2c880     4C 4E 85 F1 | 	sub	fp, #76
2c884     02 16 06 F6 | 	mov	arg03, #2
2c888     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
2c88c     08 4E 05 F1 | 	add	fp, #8
2c890     A7 FA 61 FC | 	wrlong	result1, fp
2c894     08 4E 85 F1 | 	sub	fp, #8
2c898     00 FA 0D F2 | 	cmp	result1, #0 wz
2c89c     C4 02 90 5D |  if_ne	jmp	#LR__4475
2c8a0     4C 4E 05 F1 | 	add	fp, #76
2c8a4     A7 16 02 FB | 	rdlong	arg03, fp
2c8a8     40 4E 85 F1 | 	sub	fp, #64
2c8ac     A7 16 62 FC | 	wrlong	arg03, fp
2c8b0     A7 12 02 F6 | 	mov	arg01, fp
2c8b4     08 4E 85 F1 | 	sub	fp, #8
2c8b8     A7 14 02 FB | 	rdlong	arg02, fp
2c8bc     04 4E 85 F1 | 	sub	fp, #4
2c8c0     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
2c8c4     08 4E 05 F1 | 	add	fp, #8
2c8c8     A7 FA 61 FC | 	wrlong	result1, fp
2c8cc     00 FA 4D F2 | 	cmps	result1, #0 wz
2c8d0     08 4E 85 F1 | 	sub	fp, #8
2c8d4     08 4E 05 A1 |  if_e	add	fp, #8
2c8d8     A7 10 68 AC |  if_e	wrlong	#8, fp
2c8dc     08 4E 85 A1 |  if_e	sub	fp, #8
2c8e0     08 4E 05 F1 | 	add	fp, #8
2c8e4     A7 FA 01 FB | 	rdlong	result1, fp
2c8e8     08 4E 85 F1 | 	sub	fp, #8
2c8ec     04 FA 0D F2 | 	cmp	result1, #4 wz
2c8f0     70 02 90 5D |  if_ne	jmp	#LR__4474
2c8f4     4C 4E 05 F1 | 	add	fp, #76
2c8f8     A7 16 02 FB | 	rdlong	arg03, fp
2c8fc     10 4E 85 F1 | 	sub	fp, #16
2c900     A7 16 62 FC | 	wrlong	arg03, fp
2c904     A7 12 02 F6 | 	mov	arg01, fp
2c908     3C 4E 85 F1 | 	sub	fp, #60
2c90c     00 14 06 F6 | 	mov	arg02, #0
2c910     04 AC BF FD | 	call	#_fatfs_cc_create_chain
2c914     50 4E 05 F1 | 	add	fp, #80
2c918     A7 FA 61 FC | 	wrlong	result1, fp
2c91c     48 4E 85 F1 | 	sub	fp, #72
2c920     A7 00 68 FC | 	wrlong	#0, fp
2c924     48 4E 05 F1 | 	add	fp, #72
2c928     A7 FA 09 FB | 	rdlong	result1, fp wz
2c92c     50 4E 85 F1 | 	sub	fp, #80
2c930     08 4E 05 A1 |  if_e	add	fp, #8
2c934     A7 0E 68 AC |  if_e	wrlong	#7, fp
2c938     08 4E 85 A1 |  if_e	sub	fp, #8
2c93c     50 4E 05 F1 | 	add	fp, #80
2c940     A7 FA 01 FB | 	rdlong	result1, fp
2c944     50 4E 85 F1 | 	sub	fp, #80
2c948     01 FA 0D F2 | 	cmp	result1, #1 wz
2c94c     08 4E 05 A1 |  if_e	add	fp, #8
2c950     A7 04 68 AC |  if_e	wrlong	#2, fp
2c954     08 4E 85 A1 |  if_e	sub	fp, #8
2c958     50 4E 05 F1 | 	add	fp, #80
2c95c     A7 16 02 FB | 	rdlong	arg03, fp
2c960     50 4E 85 F1 | 	sub	fp, #80
2c964     FF FF 7F FF 
2c968     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2c96c     08 4E 05 A1 |  if_e	add	fp, #8
2c970     A7 02 68 AC |  if_e	wrlong	#1, fp
2c974     08 4E 85 A1 |  if_e	sub	fp, #8
2c978     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
2c97c     58 4E 05 F1 | 	add	fp, #88
2c980     A7 FA 61 FC | 	wrlong	result1, fp
2c984     50 4E 85 F1 | 	sub	fp, #80
2c988     A7 FA 09 FB | 	rdlong	result1, fp wz
2c98c     08 4E 85 F1 | 	sub	fp, #8
2c990     1C 01 90 5D |  if_ne	jmp	#LR__4471
2c994     4C 4E 05 F1 | 	add	fp, #76
2c998     A7 12 02 FB | 	rdlong	arg01, fp
2c99c     04 4E 05 F1 | 	add	fp, #4
2c9a0     A7 14 02 FB | 	rdlong	arg02, fp
2c9a4     50 4E 85 F1 | 	sub	fp, #80
2c9a8     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
2c9ac     08 4E 05 F1 | 	add	fp, #8
2c9b0     A7 FA 61 FC | 	wrlong	result1, fp
2c9b4     00 FA 4D F2 | 	cmps	result1, #0 wz
2c9b8     08 4E 85 F1 | 	sub	fp, #8
2c9bc     F0 00 90 5D |  if_ne	jmp	#LR__4470
2c9c0     4C 4E 05 F1 | 	add	fp, #76
2c9c4     A7 12 02 FB | 	rdlong	arg01, fp
2c9c8     4C 4E 85 F1 | 	sub	fp, #76
2c9cc     34 12 06 F1 | 	add	arg01, #52
2c9d0     20 14 06 F6 | 	mov	arg02, #32
2c9d4     0B 16 06 F6 | 	mov	arg03, #11
2c9d8     98 00 A0 FD | 	call	#\builtin_bytefill_
2c9dc     4C 4E 05 F1 | 	add	fp, #76
2c9e0     A7 FA 01 FB | 	rdlong	result1, fp
2c9e4     34 FA 05 F1 | 	add	result1, #52
2c9e8     FD 5C 48 FC | 	wrbyte	#46, result1
2c9ec     A7 16 02 FB | 	rdlong	arg03, fp
2c9f0     3F 16 06 F1 | 	add	arg03, #63
2c9f4     0B 21 48 FC | 	wrbyte	#16, arg03
2c9f8     A7 12 02 FB | 	rdlong	arg01, fp
2c9fc     4A 12 06 F1 | 	add	arg01, #74
2ca00     0C 4E 05 F1 | 	add	fp, #12
2ca04     A7 14 02 FB | 	rdlong	arg02, fp
2ca08     09 15 62 FC | 	wrlong	arg02, arg01
2ca0c     0C 4E 85 F1 | 	sub	fp, #12
2ca10     A7 14 02 FB | 	rdlong	arg02, fp
2ca14     0A 13 02 F6 | 	mov	arg01, arg02
2ca18     34 14 06 F1 | 	add	arg02, #52
2ca1c     04 4E 05 F1 | 	add	fp, #4
2ca20     A7 16 02 FB | 	rdlong	arg03, fp
2ca24     50 4E 85 F1 | 	sub	fp, #80
2ca28     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
2ca2c     4C 4E 05 F1 | 	add	fp, #76
2ca30     A7 14 02 FB | 	rdlong	arg02, fp
2ca34     0A 13 02 F6 | 	mov	arg01, arg02
2ca38     54 12 06 F1 | 	add	arg01, #84
2ca3c     4C 4E 85 F1 | 	sub	fp, #76
2ca40     34 14 06 F1 | 	add	arg02, #52
2ca44     20 16 06 F6 | 	mov	arg03, #32
2ca48     D0 2C BF FD | 	call	#__system____builtin_memmove
2ca4c     4C 4E 05 F1 | 	add	fp, #76
2ca50     A7 16 02 FB | 	rdlong	arg03, fp
2ca54     55 16 06 F1 | 	add	arg03, #85
2ca58     0B 5D 48 FC | 	wrbyte	#46, arg03
2ca5c     38 4E 85 F1 | 	sub	fp, #56
2ca60     A7 16 02 FB | 	rdlong	arg03, fp
2ca64     40 4E 05 F1 | 	add	fp, #64
2ca68     A7 16 62 FC | 	wrlong	arg03, fp
2ca6c     08 4E 85 F1 | 	sub	fp, #8
2ca70     A7 14 02 FB | 	rdlong	arg02, fp
2ca74     0A 13 02 F6 | 	mov	arg01, arg02
2ca78     54 14 06 F1 | 	add	arg02, #84
2ca7c     4C 4E 85 F1 | 	sub	fp, #76
2ca80     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
2ca84     4C 4E 05 F1 | 	add	fp, #76
2ca88     A7 16 02 FB | 	rdlong	arg03, fp
2ca8c     03 16 06 F1 | 	add	arg03, #3
2ca90     0B 03 48 FC | 	wrbyte	#1, arg03
2ca94     40 4E 85 F1 | 	sub	fp, #64
2ca98     A7 12 02 F6 | 	mov	arg01, fp
2ca9c     0C 4E 85 F1 | 	sub	fp, #12
2caa0     44 BA BF FD | 	call	#_fatfs_cc_dir_register
2caa4     08 4E 05 F1 | 	add	fp, #8
2caa8     A7 FA 61 FC | 	wrlong	result1, fp
2caac     08 4E 85 F1 | 	sub	fp, #8
2cab0                 | LR__4470
2cab0                 | LR__4471
2cab0     08 4E 05 F1 | 	add	fp, #8
2cab4     A7 FA 09 FB | 	rdlong	result1, fp wz
2cab8     08 4E 85 F1 | 	sub	fp, #8
2cabc     88 00 90 5D |  if_ne	jmp	#LR__4472
2cac0     28 4E 05 F1 | 	add	fp, #40
2cac4     A7 12 02 FB | 	rdlong	arg01, fp
2cac8     16 12 06 F1 | 	add	arg01, #22
2cacc     30 4E 05 F1 | 	add	fp, #48
2cad0     A7 14 02 FB | 	rdlong	arg02, fp
2cad4     09 15 62 FC | 	wrlong	arg02, arg01
2cad8     0C 4E 85 F1 | 	sub	fp, #12
2cadc     A7 12 02 FB | 	rdlong	arg01, fp
2cae0     24 4E 85 F1 | 	sub	fp, #36
2cae4     A7 14 02 FB | 	rdlong	arg02, fp
2cae8     28 4E 05 F1 | 	add	fp, #40
2caec     A7 16 02 FB | 	rdlong	arg03, fp
2caf0     50 4E 85 F1 | 	sub	fp, #80
2caf4     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
2caf8     28 4E 05 F1 | 	add	fp, #40
2cafc     A7 FA 01 FB | 	rdlong	result1, fp
2cb00     0B FA 05 F1 | 	add	result1, #11
2cb04     FD 20 48 FC | 	wrbyte	#16, result1
2cb08     24 4E 05 F1 | 	add	fp, #36
2cb0c     A7 FA 01 FB | 	rdlong	result1, fp
2cb10     03 FA 05 F1 | 	add	result1, #3
2cb14     FD 02 48 FC | 	wrbyte	#1, result1
2cb18     44 4E 85 F1 | 	sub	fp, #68
2cb1c     A7 FA 09 FB | 	rdlong	result1, fp wz
2cb20     08 4E 85 F1 | 	sub	fp, #8
2cb24     3C 00 90 5D |  if_ne	jmp	#LR__4473
2cb28     4C 4E 05 F1 | 	add	fp, #76
2cb2c     A7 12 02 FB | 	rdlong	arg01, fp
2cb30     4C 4E 85 F1 | 	sub	fp, #76
2cb34     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
2cb38     08 4E 05 F1 | 	add	fp, #8
2cb3c     A7 FA 61 FC | 	wrlong	result1, fp
2cb40     08 4E 85 F1 | 	sub	fp, #8
2cb44     1C 00 90 FD | 	jmp	#LR__4473
2cb48                 | LR__4472
2cb48     3C 4E 05 F1 | 	add	fp, #60
2cb4c     A7 12 02 F6 | 	mov	arg01, fp
2cb50     14 4E 05 F1 | 	add	fp, #20
2cb54     A7 14 02 FB | 	rdlong	arg02, fp
2cb58     50 4E 85 F1 | 	sub	fp, #80
2cb5c     00 16 06 F6 | 	mov	arg03, #0
2cb60     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
2cb64                 | LR__4473
2cb64                 | LR__4474
2cb64                 | LR__4475
2cb64                 | ' 				remove_chain(&sobj, dcl, 0);
2cb64                 | ' 			}
2cb64                 | ' 		}
2cb64                 | ' 		;
2cb64                 | ' 	}
2cb64                 | ' 
2cb64                 | ' 	return res ;
2cb64     08 4E 05 F1 | 	add	fp, #8
2cb68     A7 FA 01 FB | 	rdlong	result1, fp
2cb6c     08 4E 85 F1 | 	sub	fp, #8
2cb70     A7 F0 03 F6 | 	mov	ptra, fp
2cb74     B2 00 A0 FD | 	call	#popregs_
2cb78                 | _fatfs_cc_f_mkdir_ret
2cb78     2D 00 64 FD | 	ret
2cb7c                 | 
2cb7c                 | _fatfs_cc_f_rename
2cb7c     01 4A 05 F6 | 	mov	COUNT_, #1
2cb80     A8 00 A0 FD | 	call	#pushregs_
2cb84     9C F0 07 F1 | 	add	ptra, #156
2cb88     04 4E 05 F1 | 	add	fp, #4
2cb8c     A7 12 62 FC | 	wrlong	arg01, fp
2cb90     04 4E 05 F1 | 	add	fp, #4
2cb94     A7 14 62 FC | 	wrlong	arg02, fp
2cb98     A7 12 02 F6 | 	mov	arg01, fp
2cb9c     08 4E 85 F1 | 	sub	fp, #8
2cba0     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
2cba4     04 4E 05 F1 | 	add	fp, #4
2cba8     A7 12 02 F6 | 	mov	arg01, fp
2cbac     6C 4E 05 F1 | 	add	fp, #108
2cbb0     A7 14 02 F6 | 	mov	arg02, fp
2cbb4     70 4E 85 F1 | 	sub	fp, #112
2cbb8     02 16 06 F6 | 	mov	arg03, #2
2cbbc     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
2cbc0     0C 4E 05 F1 | 	add	fp, #12
2cbc4     A7 FA 61 FC | 	wrlong	result1, fp
2cbc8     0C 4E 85 F1 | 	sub	fp, #12
2cbcc     00 FA 0D F2 | 	cmp	result1, #0 wz
2cbd0     44 03 90 5D |  if_ne	jmp	#LR__4493
2cbd4     70 4E 05 F1 | 	add	fp, #112
2cbd8     A7 16 02 FB | 	rdlong	arg03, fp
2cbdc     60 4E 85 F1 | 	sub	fp, #96
2cbe0     A7 16 62 FC | 	wrlong	arg03, fp
2cbe4     A7 12 02 F6 | 	mov	arg01, fp
2cbe8     0C 4E 85 F1 | 	sub	fp, #12
2cbec     A7 14 02 FB | 	rdlong	arg02, fp
2cbf0     04 4E 85 F1 | 	sub	fp, #4
2cbf4     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
2cbf8     0C 4E 05 F1 | 	add	fp, #12
2cbfc     A7 FA 61 FC | 	wrlong	result1, fp
2cc00     00 FA 4D F2 | 	cmps	result1, #0 wz
2cc04     0C 4E 85 F1 | 	sub	fp, #12
2cc08     1C 00 90 5D |  if_ne	jmp	#LR__4480
2cc0c     3B 4E 05 F1 | 	add	fp, #59
2cc10     A7 FA C1 FA | 	rdbyte	result1, fp
2cc14     3B 4E 85 F1 | 	sub	fp, #59
2cc18     A0 FA CD F7 | 	test	result1, #160 wz
2cc1c     0C 4E 05 51 |  if_ne	add	fp, #12
2cc20     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2cc24     0C 4E 85 51 |  if_ne	sub	fp, #12
2cc28                 | LR__4480
2cc28     0C 4E 05 F1 | 	add	fp, #12
2cc2c     A7 1E 0A FB | 	rdlong	local01, fp wz
2cc30     0C 4E 85 F1 | 	sub	fp, #12
2cc34     E0 02 90 5D |  if_ne	jmp	#LR__4492
2cc38     74 4E 05 F1 | 	add	fp, #116
2cc3c     A7 12 02 F6 | 	mov	arg01, fp
2cc40     48 4E 85 F1 | 	sub	fp, #72
2cc44     A7 14 02 FB | 	rdlong	arg02, fp
2cc48     2C 4E 85 F1 | 	sub	fp, #44
2cc4c     20 16 06 F6 | 	mov	arg03, #32
2cc50     C8 2A BF FD | 	call	#__system____builtin_memmove
2cc54     40 4E 05 F1 | 	add	fp, #64
2cc58     A7 12 02 F6 | 	mov	arg01, fp
2cc5c     30 4E 85 F1 | 	sub	fp, #48
2cc60     A7 14 02 F6 | 	mov	arg02, fp
2cc64     10 4E 85 F1 | 	sub	fp, #16
2cc68     30 16 06 F6 | 	mov	arg03, #48
2cc6c     AC 2A BF FD | 	call	#__system____builtin_memmove
2cc70     40 4E 05 F1 | 	add	fp, #64
2cc74     A7 12 02 F6 | 	mov	arg01, fp
2cc78     38 4E 85 F1 | 	sub	fp, #56
2cc7c     A7 14 02 FB | 	rdlong	arg02, fp
2cc80     08 4E 85 F1 | 	sub	fp, #8
2cc84     34 CA BF FD | 	call	#_fatfs_cc_follow_path
2cc88     0C 4E 05 F1 | 	add	fp, #12
2cc8c     A7 FA 61 FC | 	wrlong	result1, fp
2cc90     0C 4E 85 F1 | 	sub	fp, #12
2cc94     00 FA 0D F2 | 	cmp	result1, #0 wz
2cc98     4C 00 90 5D |  if_ne	jmp	#LR__4483
2cc9c     48 4E 05 F1 | 	add	fp, #72
2cca0     A7 FA 01 FB | 	rdlong	result1, fp
2cca4     30 4E 85 F1 | 	sub	fp, #48
2cca8     A7 16 02 FB | 	rdlong	arg03, fp
2ccac     18 4E 85 F1 | 	sub	fp, #24
2ccb0     0B FB 09 F2 | 	cmp	result1, arg03 wz
2ccb4     20 00 90 5D |  if_ne	jmp	#LR__4481
2ccb8     50 4E 05 F1 | 	add	fp, #80
2ccbc     A7 FA 01 FB | 	rdlong	result1, fp
2ccc0     30 4E 85 F1 | 	sub	fp, #48
2ccc4     A7 16 02 FB | 	rdlong	arg03, fp
2ccc8     20 4E 85 F1 | 	sub	fp, #32
2cccc     0B FB 09 F2 | 	cmp	result1, arg03 wz
2ccd0     04 1E 06 A6 |  if_e	mov	local01, #4
2ccd4     04 00 90 AD |  if_e	jmp	#LR__4482
2ccd8                 | LR__4481
2ccd8     08 1E 06 F6 | 	mov	local01, #8
2ccdc                 | LR__4482
2ccdc     0C 4E 05 F1 | 	add	fp, #12
2cce0     A7 1E 62 FC | 	wrlong	local01, fp
2cce4     0C 4E 85 F1 | 	sub	fp, #12
2cce8                 | LR__4483
2cce8     0C 4E 05 F1 | 	add	fp, #12
2ccec     A7 1E 02 FB | 	rdlong	local01, fp
2ccf0     0C 4E 85 F1 | 	sub	fp, #12
2ccf4     04 1E 0E F2 | 	cmp	local01, #4 wz
2ccf8     CC 01 90 5D |  if_ne	jmp	#LR__4489
2ccfc     40 4E 05 F1 | 	add	fp, #64
2cd00     A7 12 02 F6 | 	mov	arg01, fp
2cd04     40 4E 85 F1 | 	sub	fp, #64
2cd08     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
2cd0c     0C 4E 05 F1 | 	add	fp, #12
2cd10     A7 FA 61 FC | 	wrlong	result1, fp
2cd14     0C 4E 85 F1 | 	sub	fp, #12
2cd18     00 FA 0D F2 | 	cmp	result1, #0 wz
2cd1c     A8 01 90 5D |  if_ne	jmp	#LR__4488
2cd20     5C 4E 05 F1 | 	add	fp, #92
2cd24     A7 12 02 FB | 	rdlong	arg01, fp
2cd28     38 4E 05 F1 | 	add	fp, #56
2cd2c     A7 12 62 FC | 	wrlong	arg01, fp
2cd30     0D 12 06 F1 | 	add	arg01, #13
2cd34     20 4E 85 F1 | 	sub	fp, #32
2cd38     A7 14 02 F6 | 	mov	arg02, fp
2cd3c     74 4E 85 F1 | 	sub	fp, #116
2cd40     0D 14 06 F1 | 	add	arg02, #13
2cd44     13 16 06 F6 | 	mov	arg03, #19
2cd48     D0 29 BF FD | 	call	#__system____builtin_memmove
2cd4c     94 4E 05 F1 | 	add	fp, #148
2cd50     A7 1E 02 FB | 	rdlong	local01, fp
2cd54     15 4E 85 F1 | 	sub	fp, #21
2cd58     A7 FA C1 FA | 	rdbyte	result1, fp
2cd5c     0B 1E 06 F1 | 	add	local01, #11
2cd60     0F FB 41 FC | 	wrbyte	result1, local01
2cd64     15 4E 05 F1 | 	add	fp, #21
2cd68     A7 1E 02 FB | 	rdlong	local01, fp
2cd6c     94 4E 85 F1 | 	sub	fp, #148
2cd70     0B 1E 06 F1 | 	add	local01, #11
2cd74     0F 1F C2 FA | 	rdbyte	local01, local01
2cd78     10 1E CE F7 | 	test	local01, #16 wz
2cd7c     24 00 90 5D |  if_ne	jmp	#LR__4484
2cd80     94 4E 05 F1 | 	add	fp, #148
2cd84     A7 FA 01 FB | 	rdlong	result1, fp
2cd88     FD 1E 02 F6 | 	mov	local01, result1
2cd8c     94 4E 85 F1 | 	sub	fp, #148
2cd90     0B FA 05 F1 | 	add	result1, #11
2cd94     FD FA C1 FA | 	rdbyte	result1, result1
2cd98     20 FA 45 F5 | 	or	result1, #32
2cd9c     0B 1E 06 F1 | 	add	local01, #11
2cda0     0F FB 41 FC | 	wrbyte	result1, local01
2cda4                 | LR__4484
2cda4     70 4E 05 F1 | 	add	fp, #112
2cda8     A7 1E 02 FB | 	rdlong	local01, fp
2cdac     03 1E 06 F1 | 	add	local01, #3
2cdb0     0F 03 48 FC | 	wrbyte	#1, local01
2cdb4     24 4E 05 F1 | 	add	fp, #36
2cdb8     A7 1E 02 FB | 	rdlong	local01, fp
2cdbc     94 4E 85 F1 | 	sub	fp, #148
2cdc0     0B 1E 06 F1 | 	add	local01, #11
2cdc4     0F 1F C2 FA | 	rdbyte	local01, local01
2cdc8     10 1E CE F7 | 	test	local01, #16 wz
2cdcc     F8 00 90 AD |  if_e	jmp	#LR__4487
2cdd0     18 4E 05 F1 | 	add	fp, #24
2cdd4     A7 16 02 FB | 	rdlong	arg03, fp
2cdd8     30 4E 05 F1 | 	add	fp, #48
2cddc     A7 1E 02 FB | 	rdlong	local01, fp
2cde0     48 4E 85 F1 | 	sub	fp, #72
2cde4     0F 17 0A F2 | 	cmp	arg03, local01 wz
2cde8     DC 00 90 AD |  if_e	jmp	#LR__4487
2cdec     70 4E 05 F1 | 	add	fp, #112
2cdf0     A7 12 02 FB | 	rdlong	arg01, fp
2cdf4     09 1F 02 F6 | 	mov	local01, arg01
2cdf8     24 4E 05 F1 | 	add	fp, #36
2cdfc     A7 14 02 FB | 	rdlong	arg02, fp
2ce00     94 4E 85 F1 | 	sub	fp, #148
2ce04     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
2ce08     FD 14 02 F6 | 	mov	arg02, result1
2ce0c     0F 13 02 F6 | 	mov	arg01, local01
2ce10     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
2ce14     98 4E 05 F1 | 	add	fp, #152
2ce18     A7 FA 61 FC | 	wrlong	result1, fp
2ce1c     00 FA 4D F2 | 	cmps	result1, #0 wz
2ce20     98 4E 85 F1 | 	sub	fp, #152
2ce24     0C 4E 05 A1 |  if_e	add	fp, #12
2ce28     A7 04 68 AC |  if_e	wrlong	#2, fp
2ce2c     0C 4E 85 A1 |  if_e	sub	fp, #12
2ce30     94 00 90 AD |  if_e	jmp	#LR__4486
2ce34     70 4E 05 F1 | 	add	fp, #112
2ce38     A7 12 02 FB | 	rdlong	arg01, fp
2ce3c     28 4E 05 F1 | 	add	fp, #40
2ce40     A7 14 02 FB | 	rdlong	arg02, fp
2ce44     98 4E 85 F1 | 	sub	fp, #152
2ce48     4C A0 BF FD | 	call	#_fatfs_cc_move_window
2ce4c     0C 4E 05 F1 | 	add	fp, #12
2ce50     A7 FA 61 FC | 	wrlong	result1, fp
2ce54     64 4E 05 F1 | 	add	fp, #100
2ce58     A7 1E 02 FB | 	rdlong	local01, fp
2ce5c     54 1E 06 F1 | 	add	local01, #84
2ce60     24 4E 05 F1 | 	add	fp, #36
2ce64     A7 1E 62 FC | 	wrlong	local01, fp
2ce68     88 4E 85 F1 | 	sub	fp, #136
2ce6c     A7 1E 0A FB | 	rdlong	local01, fp wz
2ce70     0C 4E 85 F1 | 	sub	fp, #12
2ce74     50 00 90 5D |  if_ne	jmp	#LR__4485
2ce78     94 4E 05 F1 | 	add	fp, #148
2ce7c     A7 1E 02 FB | 	rdlong	local01, fp
2ce80     94 4E 85 F1 | 	sub	fp, #148
2ce84     01 1E 06 F1 | 	add	local01, #1
2ce88     0F 1F C2 FA | 	rdbyte	local01, local01
2ce8c     2E 1E 0E F2 | 	cmp	local01, #46 wz
2ce90     34 00 90 5D |  if_ne	jmp	#LR__4485
2ce94     70 4E 05 F1 | 	add	fp, #112
2ce98     A7 12 02 FB | 	rdlong	arg01, fp
2ce9c     24 4E 05 F1 | 	add	fp, #36
2cea0     A7 14 02 FB | 	rdlong	arg02, fp
2cea4     4C 4E 85 F1 | 	sub	fp, #76
2cea8     A7 16 02 FB | 	rdlong	arg03, fp
2ceac     48 4E 85 F1 | 	sub	fp, #72
2ceb0     50 AD BF FD | 	call	#_fatfs_cc_st_clust
2ceb4     70 4E 05 F1 | 	add	fp, #112
2ceb8     A7 1E 02 FB | 	rdlong	local01, fp
2cebc     70 4E 85 F1 | 	sub	fp, #112
2cec0     03 1E 06 F1 | 	add	local01, #3
2cec4     0F 03 48 FC | 	wrbyte	#1, local01
2cec8                 | LR__4485
2cec8                 | LR__4486
2cec8                 | LR__4487
2cec8                 | LR__4488
2cec8                 | LR__4489
2cec8     0C 4E 05 F1 | 	add	fp, #12
2cecc     A7 1E 0A FB | 	rdlong	local01, fp wz
2ced0     0C 4E 85 F1 | 	sub	fp, #12
2ced4     40 00 90 5D |  if_ne	jmp	#LR__4491
2ced8     10 4E 05 F1 | 	add	fp, #16
2cedc     A7 12 02 F6 | 	mov	arg01, fp
2cee0     10 4E 85 F1 | 	sub	fp, #16
2cee4     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
2cee8     0C 4E 05 F1 | 	add	fp, #12
2ceec     A7 FA 61 FC | 	wrlong	result1, fp
2cef0     0C 4E 85 F1 | 	sub	fp, #12
2cef4     00 FA 0D F2 | 	cmp	result1, #0 wz
2cef8     1C 00 90 5D |  if_ne	jmp	#LR__4490
2cefc     70 4E 05 F1 | 	add	fp, #112
2cf00     A7 12 02 FB | 	rdlong	arg01, fp
2cf04     70 4E 85 F1 | 	sub	fp, #112
2cf08     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
2cf0c     0C 4E 05 F1 | 	add	fp, #12
2cf10     A7 FA 61 FC | 	wrlong	result1, fp
2cf14     0C 4E 85 F1 | 	sub	fp, #12
2cf18                 | LR__4490
2cf18                 | LR__4491
2cf18                 | LR__4492
2cf18                 | LR__4493
2cf18                 | ' 					res = sync_fs(fs);
2cf18                 | ' 				}
2cf18                 | ' 			}
2cf18                 | ' 
2cf18                 | ' 		}
2cf18                 | ' 		;
2cf18                 | ' 	}
2cf18                 | ' 
2cf18                 | ' 	return res ;
2cf18     0C 4E 05 F1 | 	add	fp, #12
2cf1c     A7 FA 01 FB | 	rdlong	result1, fp
2cf20     0C 4E 85 F1 | 	sub	fp, #12
2cf24     A7 F0 03 F6 | 	mov	ptra, fp
2cf28     B2 00 A0 FD | 	call	#popregs_
2cf2c                 | _fatfs_cc_f_rename_ret
2cf2c     2D 00 64 FD | 	ret
2cf30                 | 
2cf30                 | _fatfs_cc_time
2cf30     00 4A 05 F6 | 	mov	COUNT_, #0
2cf34     A8 00 A0 FD | 	call	#pushregs_
2cf38     14 F0 07 F1 | 	add	ptra, #20
2cf3c     04 4E 05 F1 | 	add	fp, #4
2cf40     A7 12 62 FC | 	wrlong	arg01, fp
2cf44     04 4E 05 F1 | 	add	fp, #4
2cf48     A7 12 02 F6 | 	mov	arg01, fp
2cf4c     08 4E 85 F1 | 	sub	fp, #8
2cf50     00 14 06 F6 | 	mov	arg02, #0
2cf54     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
2cf58     08 4E 05 F1 | 	add	fp, #8
2cf5c     A7 FA 01 FB | 	rdlong	result1, fp
2cf60     08 4E 05 F1 | 	add	fp, #8
2cf64     A7 FA 61 FC | 	wrlong	result1, fp
2cf68     0C 4E 85 F1 | 	sub	fp, #12
2cf6c     A7 FA 09 FB | 	rdlong	result1, fp wz
2cf70     04 4E 85 F1 | 	sub	fp, #4
2cf74     18 00 90 AD |  if_e	jmp	#LR__4500
2cf78     04 4E 05 F1 | 	add	fp, #4
2cf7c     A7 FA 01 FB | 	rdlong	result1, fp
2cf80     0C 4E 05 F1 | 	add	fp, #12
2cf84     A7 14 02 FB | 	rdlong	arg02, fp
2cf88     10 4E 85 F1 | 	sub	fp, #16
2cf8c     FD 14 62 FC | 	wrlong	arg02, result1
2cf90                 | LR__4500
2cf90                 | '         *tp = now;
2cf90                 | '     return now;
2cf90     10 4E 05 F1 | 	add	fp, #16
2cf94     A7 FA 01 FB | 	rdlong	result1, fp
2cf98     10 4E 85 F1 | 	sub	fp, #16
2cf9c     A7 F0 03 F6 | 	mov	ptra, fp
2cfa0     B2 00 A0 FD | 	call	#popregs_
2cfa4                 | _fatfs_cc_time_ret
2cfa4     2D 00 64 FD | 	ret
2cfa8                 | 
2cfa8                 | _fatfs_cc_mktime
2cfa8     06 4A 05 F6 | 	mov	COUNT_, #6
2cfac     A8 00 A0 FD | 	call	#pushregs_
2cfb0     09 1F 02 F6 | 	mov	local01, arg01
2cfb4     14 1E 06 F1 | 	add	local01, #20
2cfb8     0F 13 02 FB | 	rdlong	arg01, local01
2cfbc     14 1E 86 F1 | 	sub	local01, #20
2cfc0     46 12 56 F2 | 	cmps	arg01, #70 wc
2cfc4                 | '                 return (time_t) -1;
2cfc4     01 FA 65 C6 |  if_b	neg	result1, #1
2cfc8     7C 01 90 CD |  if_b	jmp	#LR__4514
2cfcc     03 00 00 FF 
2cfd0     6C 21 06 F6 | 	mov	local02, ##1900
2cfd4     14 1E 06 F1 | 	add	local01, #20
2cfd8     0F FB 01 FB | 	rdlong	result1, local01
2cfdc     FD 20 02 F1 | 	add	local02, result1
2cfe0     08 1E 86 F1 | 	sub	local01, #8
2cfe4     0F 23 02 FB | 	rdlong	local03, local01
2cfe8     01 22 86 F1 | 	sub	local03, #1
2cfec     04 1E 06 F1 | 	add	local01, #4
2cff0     0F 13 02 FB | 	rdlong	arg01, local01
2cff4     10 1E 86 F1 | 	sub	local01, #16
2cff8     02 12 66 F0 | 	shl	arg01, #2
2cffc     02 00 00 FF 
2d000     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
2d004     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2d008     09 FB 01 FB | 	rdlong	result1, arg01
2d00c     FD 22 02 F1 | 	add	local03, result1
2d010     10 13 02 F6 | 	mov	arg01, local02
2d014     02 00 00 FF 
2d018     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
2d01c     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
2d020     00 FA 0D F2 | 	cmp	result1, #0 wz
2d024     1C 00 90 AD |  if_e	jmp	#LR__4510
2d028     00 24 06 F6 | 	mov	local04, #0
2d02c     10 1E 06 F1 | 	add	local01, #16
2d030     0F FB 01 FB | 	rdlong	result1, local01
2d034     10 1E 86 F1 | 	sub	local01, #16
2d038     02 FA 55 F2 | 	cmps	result1, #2 wc
2d03c     01 24 06 36 |  if_ae	mov	local04, #1
2d040     04 00 90 FD | 	jmp	#LR__4511
2d044                 | LR__4510
2d044     00 24 06 F6 | 	mov	local04, #0
2d048                 | LR__4511
2d048     04 1E 06 F1 | 	add	local01, #4
2d04c     0F FB 01 FB | 	rdlong	result1, local01
2d050     04 1E 86 F1 | 	sub	local01, #4
2d054     0F 27 02 FB | 	rdlong	local05, local01
2d058     08 1E 06 F1 | 	add	local01, #8
2d05c     0F 13 02 FB | 	rdlong	arg01, local01
2d060     07 00 00 FF 
2d064     10 12 06 FD | 	qmul	arg01, ##3600
2d068     12 23 02 F1 | 	add	local03, local04
2d06c     FD 24 02 F6 | 	mov	local04, result1
2d070     04 24 66 F0 | 	shl	local04, #4
2d074     FD 24 82 F1 | 	sub	local04, result1
2d078     02 24 66 F0 | 	shl	local04, #2
2d07c     12 27 02 F1 | 	add	local05, local04
2d080     08 1E 86 F1 | 	sub	local01, #8
2d084     18 24 62 FD | 	getqx	local04
2d088     A8 00 00 FF 
2d08c     80 23 06 FD | 	qmul	local03, ##86400
2d090     12 27 02 F1 | 	add	local05, local04
2d094     10 23 02 F6 | 	mov	local03, local02
2d098     03 00 00 FF 
2d09c     B2 23 86 F1 | 	sub	local03, ##1970
2d0a0     18 24 62 FD | 	getqx	local04
2d0a4     99 F0 00 FF 
2d0a8     80 23 06 FD | 	qmul	local03, ##31536000
2d0ac     12 27 02 F1 | 	add	local05, local04
2d0b0     10 23 02 F6 | 	mov	local03, local02
2d0b4     03 00 00 FF 
2d0b8     B1 23 86 F1 | 	sub	local03, ##1969
2d0bc     11 29 52 F6 | 	abs	local06, local03 wc
2d0c0     02 28 46 F0 | 	shr	local06, #2
2d0c4     14 29 82 F6 | 	negc	local06, local06
2d0c8     03 00 00 FF 
2d0cc     D1 21 56 F2 | 	cmps	local02, ##2001 wc
2d0d0     18 24 62 FD | 	getqx	local04
2d0d4     12 27 02 F1 | 	add	local05, local04
2d0d8     18 00 90 CD |  if_b	jmp	#LR__4512
2d0dc     03 00 00 FF 
2d0e0     D0 21 86 F1 | 	sub	local02, ##2000
2d0e4     10 25 52 F6 | 	abs	local04, local02 wc
2d0e8     64 24 16 FD | 	qdiv	local04, #100
2d0ec     18 24 62 FD | 	getqx	local04
2d0f0     12 29 A2 F3 | 	sumnc	local06, local04
2d0f4                 | LR__4512
2d0f4     A8 00 00 FF 
2d0f8     80 29 06 FD | 	qmul	local06, ##86400
2d0fc     18 28 62 FD | 	getqx	local06
2d100     14 27 02 F1 | 	add	local05, local06
2d104     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
2d108     02 00 00 FF 
2d10c     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2d110     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
2d114     14 27 02 F1 | 	add	local05, local06
2d118     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
2d11c     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2d120     02 00 00 FF 
2d124     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2d128     01 22 0E F2 | 	cmp	local03, #1 wz
2d12c     14 00 90 5D |  if_ne	jmp	#LR__4513
2d130     0F 13 02 F6 | 	mov	arg01, local01
2d134     DC 19 B0 FD | 	call	#_fatfs_cc___indst
2d138     00 FA 0D F2 | 	cmp	result1, #0 wz
2d13c     07 00 00 5F 
2d140     10 26 86 51 |  if_ne	sub	local05, ##3600
2d144                 | LR__4513
2d144                 | '                 s -=  (3600L) ;
2d144                 | ' 
2d144                 | '         return s;
2d144     13 FB 01 F6 | 	mov	result1, local05
2d148                 | LR__4514
2d148     A7 F0 03 F6 | 	mov	ptra, fp
2d14c     B2 00 A0 FD | 	call	#popregs_
2d150                 | _fatfs_cc_mktime_ret
2d150     2D 00 64 FD | 	ret
2d154                 | 
2d154                 | _fatfs_cc__gmtime_r
2d154     03 4A 05 F6 | 	mov	COUNT_, #3
2d158     A8 00 A0 FD | 	call	#pushregs_
2d15c     09 1F 02 FB | 	rdlong	local01, arg01
2d160     A8 00 00 FF 
2d164     80 1F 16 FD | 	qdiv	local01, ##86400
2d168     18 FA 61 FD | 	getqx	result1
2d16c     04 FA 05 F1 | 	add	result1, #4
2d170     07 FA 15 FD | 	qdiv	result1, #7
2d174     18 14 06 F1 | 	add	arg02, #24
2d178     D1 7F 27 FF 
2d17c     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
2d180     D1 7F 27 3F 
2d184     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
2d188     03 00 00 3F 
2d18c     DC 21 06 36 |  if_ae	mov	local02, ##2012
2d190     03 00 00 CF 
2d194     B2 21 06 C6 |  if_b	mov	local02, ##1970
2d198                 | ' 	  year = 1970;
2d198                 | ' 	}
2d198                 | ' 
2d198                 | ' 	for(;;) {
2d198     19 FA 61 FD | 	getqy	result1
2d19c     0A FB 61 FC | 	wrlong	result1, arg02
2d1a0     18 14 86 F1 | 	sub	arg02, #24
2d1a4                 | LR__4520
2d1a4     10 13 02 F6 | 	mov	arg01, local02
2d1a8     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2d1ac     00 FA 0D F2 | 	cmp	result1, #0 wz
2d1b0     42 F1 00 5F 
2d1b4     00 23 06 56 |  if_ne	mov	local03, ##31622400
2d1b8     99 F0 00 AF 
2d1bc     80 23 06 A6 |  if_e	mov	local03, ##31536000
2d1c0     11 1F 12 F2 | 	cmp	local01, local03 wc
2d1c4                 | ' 	    break;
2d1c4     01 20 06 31 |  if_ae	add	local02, #1
2d1c8     11 1F 82 31 |  if_ae	sub	local01, local03
2d1cc     D4 FF 9F 3D |  if_ae	jmp	#LR__4520
2d1d0     A8 00 00 FF 
2d1d4     80 1F 16 FD | 	qdiv	local01, ##86400
2d1d8     10 23 02 F6 | 	mov	local03, local02
2d1dc     03 00 00 FF 
2d1e0     6C 23 86 F1 | 	sub	local03, ##1900
2d1e4     14 14 06 F1 | 	add	arg02, #20
2d1e8     0A 23 62 FC | 	wrlong	local03, arg02
2d1ec     08 14 06 F1 | 	add	arg02, #8
2d1f0     10 13 02 F6 | 	mov	arg01, local02
2d1f4     18 20 62 FD | 	getqx	local02
2d1f8     0A 21 62 FC | 	wrlong	local02, arg02
2d1fc     1C 14 86 F1 | 	sub	arg02, #28
2d200     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2d204     00 FA 0D F2 | 	cmp	result1, #0 wz
2d208     1D 22 06 56 |  if_ne	mov	local03, #29
2d20c     1C 22 06 A6 |  if_e	mov	local03, #28
2d210     02 00 00 FF 
2d214     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
2d218     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
2d21c     02 00 00 FF 
2d220     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
2d224                 | ' 
2d224                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
2d224                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
2d224     00 12 06 F6 | 	mov	arg01, #0
2d228     97 2A 48 FB | 	callpa	#(@LR__4522-@LR__4521)>>2,fcache_load_ptr_
2d22c                 | LR__4521
2d22c     09 23 02 F6 | 	mov	local03, arg01
2d230     02 22 66 F0 | 	shl	local03, #2
2d234     02 00 00 FF 
2d238     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2d23c     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2d240     11 23 02 FB | 	rdlong	local03, local03
2d244     11 21 52 F2 | 	cmps	local02, local03 wc
2d248     02 00 00 FF 
2d24c     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2d250     2C 00 90 CD |  if_b	jmp	#LR__4523
2d254     09 23 02 F6 | 	mov	local03, arg01
2d258     02 22 66 F0 | 	shl	local03, #2
2d25c     02 00 00 FF 
2d260     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2d264     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2d268     11 23 02 FB | 	rdlong	local03, local03
2d26c     11 21 82 F1 | 	sub	local02, local03
2d270     01 12 06 F1 | 	add	arg01, #1
2d274     02 00 00 FF 
2d278     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2d27c     AC FF 9F FD | 	jmp	#LR__4521
2d280                 | LR__4522
2d280                 | LR__4523
2d280     A8 00 00 FF 
2d284     80 1F 16 FD | 	qdiv	local01, ##86400
2d288     10 14 06 F1 | 	add	arg02, #16
2d28c     0A 13 62 FC | 	wrlong	arg01, arg02
2d290     01 20 06 F1 | 	add	local02, #1
2d294     04 14 86 F1 | 	sub	arg02, #4
2d298     0A 21 62 FC | 	wrlong	local02, arg02
2d29c     19 1E 62 FD | 	getqy	local01
2d2a0     07 00 00 FF 
2d2a4     10 1E 16 FD | 	qdiv	local01, ##3600
2d2a8     18 22 62 FD | 	getqx	local03
2d2ac     07 00 00 FF 
2d2b0     10 1E 16 FD | 	qdiv	local01, ##3600
2d2b4     04 14 86 F1 | 	sub	arg02, #4
2d2b8     0A 23 62 FC | 	wrlong	local03, arg02
2d2bc     19 1E 62 FD | 	getqy	local01
2d2c0     3C 1E 16 FD | 	qdiv	local01, #60
2d2c4     18 22 62 FD | 	getqx	local03
2d2c8     3C 1E 16 FD | 	qdiv	local01, #60
2d2cc     04 14 86 F1 | 	sub	arg02, #4
2d2d0     0A 23 62 FC | 	wrlong	local03, arg02
2d2d4     04 14 86 F1 | 	sub	arg02, #4
2d2d8                 | '         stm->tm_isdst = 0;
2d2d8                 | ' 
2d2d8                 | ' ;
2d2d8                 | '         return stm;
2d2d8     0A FB 01 F6 | 	mov	result1, arg02
2d2dc     19 22 62 FD | 	getqy	local03
2d2e0     0A 23 62 FC | 	wrlong	local03, arg02
2d2e4     20 14 06 F1 | 	add	arg02, #32
2d2e8     0A 01 68 FC | 	wrlong	#0, arg02
2d2ec     A7 F0 03 F6 | 	mov	ptra, fp
2d2f0     B2 00 A0 FD | 	call	#popregs_
2d2f4                 | _fatfs_cc__gmtime_r_ret
2d2f4     2D 00 64 FD | 	ret
2d2f8                 | 
2d2f8                 | _fatfs_cc__tzset
2d2f8     77 01 00 FF 
2d2fc     3D 12 06 F6 | 	mov	arg01, ##@LR__4835
2d300     34 00 B0 FD | 	call	#_fatfs_cc_getenv
2d304     FD 12 02 F6 | 	mov	arg01, result1
2d308     02 00 00 FF 
2d30c     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
2d310     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2d314     02 00 00 FF 
2d318     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2d31c     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
2d320     02 00 00 FF 
2d324     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2d328     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
2d32c     02 00 00 FF 
2d330     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
2d334                 | _fatfs_cc__tzset_ret
2d334     2D 00 64 FD | 	ret
2d338                 | 
2d338                 | _fatfs_cc_getenv
2d338     06 4A 05 F6 | 	mov	COUNT_, #6
2d33c     A8 00 A0 FD | 	call	#pushregs_
2d340     09 1F 02 F6 | 	mov	local01, arg01
2d344     09 21 02 F6 | 	mov	local02, arg01
2d348     97 06 48 FB | 	callpa	#(@LR__4531-@LR__4530)>>2,fcache_load_ptr_
2d34c                 | LR__4530
2d34c     10 FB C9 FA | 	rdbyte	result1, local02 wz
2d350     01 20 06 51 |  if_ne	add	local02, #1
2d354     F4 FF 9F 5D |  if_ne	jmp	#LR__4530
2d358                 | LR__4531
2d358     09 21 82 F1 | 	sub	local02, arg01
2d35c     10 FB 01 F6 | 	mov	result1, local02
2d360     02 00 00 FF 
2d364     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2d368     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
2d36c     02 00 00 FF 
2d370     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2d374                 | '             return 0;
2d374     00 FA 05 A6 |  if_e	mov	result1, #0
2d378     5C 00 90 AD |  if_e	jmp	#LR__4534
2d37c                 | ' 
2d37c                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
2d37c     02 00 00 FF 
2d380     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2d384     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2d388     02 00 00 FF 
2d38c     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2d390                 | LR__4532
2d390     11 25 0A FB | 	rdlong	local04, local03 wz
2d394     3C 00 90 AD |  if_e	jmp	#LR__4533
2d398     12 13 02 F6 | 	mov	arg01, local04
2d39c     0F 15 02 F6 | 	mov	arg02, local01
2d3a0     10 17 02 F6 | 	mov	arg03, local02
2d3a4     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
2d3a8     00 FA 0D F2 | 	cmp	result1, #0 wz
2d3ac     10 27 02 A6 |  if_e	mov	local05, local02
2d3b0     12 27 02 A1 |  if_e	add	local05, local04
2d3b4     13 29 C2 AA |  if_e	rdbyte	local06, local05
2d3b8     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
2d3bc                 | ' 			return name+len+1;
2d3bc     10 25 02 A1 |  if_e	add	local04, local02
2d3c0     01 24 06 A1 |  if_e	add	local04, #1
2d3c4     12 FB 01 A6 |  if_e	mov	result1, local04
2d3c8     0C 00 90 AD |  if_e	jmp	#LR__4534
2d3cc     04 22 06 F1 | 	add	local03, #4
2d3d0     BC FF 9F FD | 	jmp	#LR__4532
2d3d4                 | LR__4533
2d3d4                 | ' 	}
2d3d4                 | ' 	return 0;
2d3d4     00 FA 05 F6 | 	mov	result1, #0
2d3d8                 | LR__4534
2d3d8     A7 F0 03 F6 | 	mov	ptra, fp
2d3dc     B2 00 A0 FD | 	call	#popregs_
2d3e0                 | _fatfs_cc_getenv_ret
2d3e0     2D 00 64 FD | 	ret
2d3e4                 | 
2d3e4                 | _fatfs_cc__get_fattime
2d3e4     00 4A 05 F6 | 	mov	COUNT_, #0
2d3e8     A8 00 A0 FD | 	call	#pushregs_
2d3ec     34 F0 07 F1 | 	add	ptra, #52
2d3f0     00 12 06 F6 | 	mov	arg01, #0
2d3f4     38 FB BF FD | 	call	#_fatfs_cc_time
2d3f8     04 4E 05 F1 | 	add	fp, #4
2d3fc     A7 FA 61 FC | 	wrlong	result1, fp
2d400     A7 12 02 F6 | 	mov	arg01, fp
2d404     0C 4E 05 F1 | 	add	fp, #12
2d408     A7 14 02 F6 | 	mov	arg02, fp
2d40c     10 4E 85 F1 | 	sub	fp, #16
2d410     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
2d414     24 4E 05 F1 | 	add	fp, #36
2d418     A7 14 02 FB | 	rdlong	arg02, fp
2d41c     50 14 86 F1 | 	sub	arg02, #80
2d420     09 14 66 F0 | 	shl	arg02, #9
2d424     04 4E 85 F1 | 	sub	fp, #4
2d428     A7 FA 01 FB | 	rdlong	result1, fp
2d42c     01 FA 05 F1 | 	add	result1, #1
2d430     05 FA 65 F0 | 	shl	result1, #5
2d434     FD 14 42 F5 | 	or	arg02, result1
2d438     04 4E 85 F1 | 	sub	fp, #4
2d43c     A7 FA 01 FB | 	rdlong	result1, fp
2d440     FD 14 42 F5 | 	or	arg02, result1
2d444     14 4E 85 F1 | 	sub	fp, #20
2d448     A7 14 62 FC | 	wrlong	arg02, fp
2d44c     10 4E 05 F1 | 	add	fp, #16
2d450     A7 14 02 FB | 	rdlong	arg02, fp
2d454     0B 14 66 F0 | 	shl	arg02, #11
2d458     04 4E 85 F1 | 	sub	fp, #4
2d45c     A7 FA 01 FB | 	rdlong	result1, fp
2d460     05 FA 65 F0 | 	shl	result1, #5
2d464     FD 14 42 F5 | 	or	arg02, result1
2d468     04 4E 85 F1 | 	sub	fp, #4
2d46c     A7 FA 01 FB | 	rdlong	result1, fp
2d470     FD 14 42 F5 | 	or	arg02, result1
2d474     04 4E 85 F1 | 	sub	fp, #4
2d478     A7 14 62 FC | 	wrlong	arg02, fp
2d47c                 | ' 
2d47c                 | '     now = time(0);
2d47c                 | '     _gmtime_r (&now, &date);
2d47c                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
2d47c                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
2d47c                 | '     return (ffdate << 16) | fftime;
2d47c     04 4E 85 F1 | 	sub	fp, #4
2d480     A7 FA 01 FB | 	rdlong	result1, fp
2d484     10 FA 65 F0 | 	shl	result1, #16
2d488     08 4E 85 F1 | 	sub	fp, #8
2d48c     0A FB 41 F5 | 	or	result1, arg02
2d490     A7 F0 03 F6 | 	mov	ptra, fp
2d494     B2 00 A0 FD | 	call	#popregs_
2d498                 | _fatfs_cc__get_fattime_ret
2d498     2D 00 64 FD | 	ret
2d49c                 | 
2d49c                 | _fatfs_cc_unixtime_0928
2d49c     00 4A 05 F6 | 	mov	COUNT_, #0
2d4a0     A8 00 A0 FD | 	call	#pushregs_
2d4a4     34 F0 07 F1 | 	add	ptra, #52
2d4a8     04 4E 05 F1 | 	add	fp, #4
2d4ac     A7 12 62 FC | 	wrlong	arg01, fp
2d4b0     04 4E 05 F1 | 	add	fp, #4
2d4b4     A7 14 62 FC | 	wrlong	arg02, fp
2d4b8     04 4E 85 F1 | 	sub	fp, #4
2d4bc     A7 14 02 FB | 	rdlong	arg02, fp
2d4c0     09 14 46 F0 | 	shr	arg02, #9
2d4c4     7F 14 06 F5 | 	and	arg02, #127
2d4c8     50 FA 05 F6 | 	mov	result1, #80
2d4cc     0A FB 01 F1 | 	add	result1, arg02
2d4d0     20 4E 05 F1 | 	add	fp, #32
2d4d4     A7 FA 61 FC | 	wrlong	result1, fp
2d4d8     20 4E 85 F1 | 	sub	fp, #32
2d4dc     A7 FA 01 FB | 	rdlong	result1, fp
2d4e0     05 FA 45 F0 | 	shr	result1, #5
2d4e4     FD FA 41 F8 | 	getnib	result1, result1, #0
2d4e8     01 FA 85 F1 | 	sub	result1, #1
2d4ec     1C 4E 05 F1 | 	add	fp, #28
2d4f0     A7 FA 61 FC | 	wrlong	result1, fp
2d4f4     1C 4E 85 F1 | 	sub	fp, #28
2d4f8     A7 FA 01 FB | 	rdlong	result1, fp
2d4fc     1F FA 05 F5 | 	and	result1, #31
2d500     18 4E 05 F1 | 	add	fp, #24
2d504     A7 FA 61 FC | 	wrlong	result1, fp
2d508     14 4E 85 F1 | 	sub	fp, #20
2d50c     A7 FA 01 FB | 	rdlong	result1, fp
2d510     0B FA 45 F0 | 	shr	result1, #11
2d514     1F FA 05 F5 | 	and	result1, #31
2d518     10 4E 05 F1 | 	add	fp, #16
2d51c     A7 FA 61 FC | 	wrlong	result1, fp
2d520     10 4E 85 F1 | 	sub	fp, #16
2d524     A7 FA 01 FB | 	rdlong	result1, fp
2d528     05 FA 45 F0 | 	shr	result1, #5
2d52c     3F FA 05 F5 | 	and	result1, #63
2d530     0C 4E 05 F1 | 	add	fp, #12
2d534     A7 FA 61 FC | 	wrlong	result1, fp
2d538     0C 4E 85 F1 | 	sub	fp, #12
2d53c     A7 14 02 FB | 	rdlong	arg02, fp
2d540     1F 14 06 F5 | 	and	arg02, #31
2d544     01 14 66 F0 | 	shl	arg02, #1
2d548     08 4E 05 F1 | 	add	fp, #8
2d54c     A7 14 62 FC | 	wrlong	arg02, fp
2d550     A7 12 02 F6 | 	mov	arg01, fp
2d554     10 4E 85 F1 | 	sub	fp, #16
2d558     4C FA BF FD | 	call	#_fatfs_cc_mktime
2d55c     0C 4E 05 F1 | 	add	fp, #12
2d560     A7 FA 61 FC | 	wrlong	result1, fp
2d564                 | ' 
2d564                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
2d564                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
2d564                 | '     date.tm_mday = (dosdate & 0x1f);
2d564                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
2d564                 | '     date.tm_min = (dostime >> 5) & 0x3f;
2d564                 | '     date.tm_sec = (dostime & 0x1f) << 1;
2d564                 | ' 
2d564                 | '     t = mktime(&date);
2d564                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2d564                 | '     return t;
2d564     0C 4E 85 F1 | 	sub	fp, #12
2d568     A7 F0 03 F6 | 	mov	ptra, fp
2d56c     B2 00 A0 FD | 	call	#popregs_
2d570                 | _fatfs_cc_unixtime_0928_ret
2d570     2D 00 64 FD | 	ret
2d574                 | 
2d574                 | _fatfs_cc__set_dos_error_0930
2d574     09 01 02 F6 | 	mov	_var01, arg01
2d578                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2d578                 | '     switch (derr) {
2d578     14 00 26 F3 | 	fle	_var01, #20
2d57c     30 00 62 FD | 	jmprel	_var01
2d580                 | LR__4540
2d580     50 00 90 FD | 	jmp	#LR__4541
2d584     84 00 90 FD | 	jmp	#LR__4555
2d588     80 00 90 FD | 	jmp	#LR__4556
2d58c     7C 00 90 FD | 	jmp	#LR__4557
2d590     48 00 90 FD | 	jmp	#LR__4542
2d594     44 00 90 FD | 	jmp	#LR__4543
2d598     40 00 90 FD | 	jmp	#LR__4544
2d59c     44 00 90 FD | 	jmp	#LR__4545
2d5a0     48 00 90 FD | 	jmp	#LR__4547
2d5a4     54 00 90 FD | 	jmp	#LR__4550
2d5a8     38 00 90 FD | 	jmp	#LR__4546
2d5ac     4C 00 90 FD | 	jmp	#LR__4551
2d5b0     48 00 90 FD | 	jmp	#LR__4552
2d5b4     44 00 90 FD | 	jmp	#LR__4553
2d5b8     50 00 90 FD | 	jmp	#LR__4558
2d5bc     4C 00 90 FD | 	jmp	#LR__4558
2d5c0     48 00 90 FD | 	jmp	#LR__4558
2d5c4     2C 00 90 FD | 	jmp	#LR__4548
2d5c8     38 00 90 FD | 	jmp	#LR__4554
2d5cc     2C 00 90 FD | 	jmp	#LR__4549
2d5d0     38 00 90 FD | 	jmp	#LR__4558
2d5d4                 | LR__4541
2d5d4     00 02 06 F6 | 	mov	_var02, #0
2d5d8                 | '         r = 0;
2d5d8                 | '         break;
2d5d8     34 00 90 FD | 	jmp	#LR__4559
2d5dc                 | LR__4542
2d5dc                 | LR__4543
2d5dc                 | LR__4544
2d5dc     04 02 06 F6 | 	mov	_var02, #4
2d5e0                 | '         r =  4 ;
2d5e0                 | '         break;
2d5e0     2C 00 90 FD | 	jmp	#LR__4559
2d5e4                 | LR__4545
2d5e4                 | LR__4546
2d5e4     06 02 06 F6 | 	mov	_var02, #6
2d5e8                 | '         r =  6 ;
2d5e8                 | '         break;
2d5e8     24 00 90 FD | 	jmp	#LR__4559
2d5ec                 | LR__4547
2d5ec     09 02 06 F6 | 	mov	_var02, #9
2d5f0                 | '         r =  9 ;
2d5f0                 | '         break;
2d5f0     1C 00 90 FD | 	jmp	#LR__4559
2d5f4                 | LR__4548
2d5f4     07 02 06 F6 | 	mov	_var02, #7
2d5f8                 | '         r =  7 ;
2d5f8                 | '         break;
2d5f8     14 00 90 FD | 	jmp	#LR__4559
2d5fc                 | LR__4549
2d5fc                 | LR__4550
2d5fc                 | LR__4551
2d5fc                 | LR__4552
2d5fc                 | LR__4553
2d5fc     0A 02 06 F6 | 	mov	_var02, #10
2d600                 | '         r =  10 ;
2d600                 | '         break;
2d600     0C 00 90 FD | 	jmp	#LR__4559
2d604                 | LR__4554
2d604     0B 02 06 F6 | 	mov	_var02, #11
2d608                 | '         r =  11 ;
2d608                 | '         break;
2d608     04 00 90 FD | 	jmp	#LR__4559
2d60c                 | LR__4555
2d60c                 | LR__4556
2d60c                 | LR__4557
2d60c                 | LR__4558
2d60c     0C 02 06 F6 | 	mov	_var02, #12
2d610                 | '         r =  12 ;
2d610                 | '         break;
2d610                 | LR__4559
2d610                 | '     }
2d610                 | '     return _seterror(r);
2d610     00 02 4E F2 | 	cmps	_var02, #0 wz
2d614     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2d618     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2d61c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2d620     01 FA 65 56 |  if_ne	neg	result1, #1
2d624     00 FA 05 A6 |  if_e	mov	result1, #0
2d628                 | _fatfs_cc__set_dos_error_0930_ret
2d628     2D 00 64 FD | 	ret
2d62c                 | 
2d62c                 | _fatfs_cc_v_creat
2d62c     04 4A 05 F6 | 	mov	COUNT_, #4
2d630     A8 00 A0 FD | 	call	#pushregs_
2d634     09 1F 02 F6 | 	mov	local01, arg01
2d638     0A 21 02 F6 | 	mov	local02, arg02
2d63c     03 00 00 FF 
2d640     3C 12 06 F6 | 	mov	arg01, ##1596
2d644                 | '     return _gc_alloc(size);
2d644     10 14 06 F6 | 	mov	arg02, #16
2d648     2C 60 BF FD | 	call	#__system___gc_doalloc
2d64c     FD 22 0A F6 | 	mov	local03, result1 wz
2d650                 | '       return _seterror( 7 );
2d650     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d654     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2d658     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d65c     01 FA 65 A6 |  if_e	neg	result1, #1
2d660     58 00 90 AD |  if_e	jmp	#LR__4561
2d664     11 13 02 F6 | 	mov	arg01, local03
2d668     00 14 06 F6 | 	mov	arg02, #0
2d66c     03 00 00 FF 
2d670     3C 16 06 F6 | 	mov	arg03, ##1596
2d674     98 00 A0 FD | 	call	#\builtin_bytefill_
2d678     02 00 00 FF 
2d67c     14 22 06 F1 | 	add	local03, ##1044
2d680     11 13 02 F6 | 	mov	arg01, local03
2d684     02 00 00 FF 
2d688     14 22 86 F1 | 	sub	local03, ##1044
2d68c     10 15 02 F6 | 	mov	arg02, local02
2d690     07 16 06 F6 | 	mov	arg03, #7
2d694     B4 CC BF FD | 	call	#_fatfs_cc_f_open
2d698     FD 24 0A F6 | 	mov	local04, result1 wz
2d69c     14 00 90 AD |  if_e	jmp	#LR__4560
2d6a0     11 13 02 F6 | 	mov	arg01, local03
2d6a4                 | '     return _gc_free(ptr);
2d6a4     DC 60 BF FD | 	call	#__system___gc_free
2d6a8                 | '     free(f);
2d6a8                 | '     return _set_dos_error(r);
2d6a8     12 13 02 F6 | 	mov	arg01, local04
2d6ac     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0930
2d6b0     08 00 90 FD | 	jmp	#LR__4561
2d6b4                 | LR__4560
2d6b4     0F 23 62 FC | 	wrlong	local03, local01
2d6b8                 | '   }
2d6b8                 | '   fil->vfsdata = f;
2d6b8                 | '   return 0;
2d6b8     00 FA 05 F6 | 	mov	result1, #0
2d6bc                 | LR__4561
2d6bc     A7 F0 03 F6 | 	mov	ptra, fp
2d6c0     B2 00 A0 FD | 	call	#popregs_
2d6c4                 | _fatfs_cc_v_creat_ret
2d6c4     2D 00 64 FD | 	ret
2d6c8                 | 
2d6c8                 | _fatfs_cc_v_close
2d6c8     02 4A 05 F6 | 	mov	COUNT_, #2
2d6cc     A8 00 A0 FD | 	call	#pushregs_
2d6d0     09 1F 02 FB | 	rdlong	local01, arg01
2d6d4     02 00 00 FF 
2d6d8     14 1E 06 F1 | 	add	local01, ##1044
2d6dc     0F 13 02 F6 | 	mov	arg01, local01
2d6e0     02 00 00 FF 
2d6e4     14 1E 86 F1 | 	sub	local01, ##1044
2d6e8     DC E3 BF FD | 	call	#_fatfs_cc_f_close
2d6ec     FD 20 02 F6 | 	mov	local02, result1
2d6f0     0F 13 02 F6 | 	mov	arg01, local01
2d6f4                 | '     return _gc_free(ptr);
2d6f4     8C 60 BF FD | 	call	#__system___gc_free
2d6f8                 | '     FAT_FIL *f = fil->vfsdata;
2d6f8                 | '     r=f_close(&f->fil);
2d6f8                 | '     free(f);
2d6f8                 | '     return _set_dos_error(r);
2d6f8     10 13 02 F6 | 	mov	arg01, local02
2d6fc     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0930
2d700     A7 F0 03 F6 | 	mov	ptra, fp
2d704     B2 00 A0 FD | 	call	#popregs_
2d708                 | _fatfs_cc_v_close_ret
2d708     2D 00 64 FD | 	ret
2d70c                 | 
2d70c                 | _fatfs_cc_v_opendir
2d70c     04 4A 05 F6 | 	mov	COUNT_, #4
2d710     A8 00 A0 FD | 	call	#pushregs_
2d714     09 1F 02 F6 | 	mov	local01, arg01
2d718     0A 21 02 F6 | 	mov	local02, arg02
2d71c     30 12 06 F6 | 	mov	arg01, #48
2d720                 | '     return _gc_alloc(size);
2d720     10 14 06 F6 | 	mov	arg02, #16
2d724     50 5F BF FD | 	call	#__system___gc_doalloc
2d728     FD 22 0A F6 | 	mov	local03, result1 wz
2d72c                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2d72c                 | '       return _seterror( 7 );
2d72c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d730     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2d734     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d738     01 FA 65 A6 |  if_e	neg	result1, #1
2d73c     34 00 90 AD |  if_e	jmp	#LR__4571
2d740     10 15 02 F6 | 	mov	arg02, local02
2d744     11 13 02 F6 | 	mov	arg01, local03
2d748     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
2d74c     FD 24 0A F6 | 	mov	local04, result1 wz
2d750     14 00 90 AD |  if_e	jmp	#LR__4570
2d754     11 13 02 F6 | 	mov	arg01, local03
2d758                 | '     return _gc_free(ptr);
2d758     28 60 BF FD | 	call	#__system___gc_free
2d75c                 | '         free(f);
2d75c                 | '         return _set_dos_error(r);
2d75c     12 13 02 F6 | 	mov	arg01, local04
2d760     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0930
2d764     0C 00 90 FD | 	jmp	#LR__4571
2d768                 | LR__4570
2d768     04 1E 06 F1 | 	add	local01, #4
2d76c     0F 23 62 FC | 	wrlong	local03, local01
2d770                 | '     }
2d770                 | '     dir->vfsdata = f;
2d770                 | '     return 0;
2d770     00 FA 05 F6 | 	mov	result1, #0
2d774                 | LR__4571
2d774     A7 F0 03 F6 | 	mov	ptra, fp
2d778     B2 00 A0 FD | 	call	#popregs_
2d77c                 | _fatfs_cc_v_opendir_ret
2d77c     2D 00 64 FD | 	ret
2d780                 | 
2d780                 | _fatfs_cc_v_closedir
2d780     02 4A 05 F6 | 	mov	COUNT_, #2
2d784     A8 00 A0 FD | 	call	#pushregs_
2d788     04 12 06 F1 | 	add	arg01, #4
2d78c     09 1F 02 FB | 	rdlong	local01, arg01
2d790     0F 13 02 F6 | 	mov	arg01, local01
2d794     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
2d798     FD 20 02 F6 | 	mov	local02, result1
2d79c     0F 13 02 F6 | 	mov	arg01, local01
2d7a0                 | '     return _gc_free(ptr);
2d7a0     E0 5F BF FD | 	call	#__system___gc_free
2d7a4     00 20 0E F2 | 	cmp	local02, #0 wz
2d7a8     10 13 02 56 |  if_ne	mov	arg01, local02
2d7ac     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0930
2d7b0                 | '     return r;
2d7b0     10 FB 01 F6 | 	mov	result1, local02
2d7b4     A7 F0 03 F6 | 	mov	ptra, fp
2d7b8     B2 00 A0 FD | 	call	#popregs_
2d7bc                 | _fatfs_cc_v_closedir_ret
2d7bc     2D 00 64 FD | 	ret
2d7c0                 | 
2d7c0                 | _fatfs_cc_v_readdir
2d7c0     01 4A 05 F6 | 	mov	COUNT_, #1
2d7c4     A8 00 A0 FD | 	call	#pushregs_
2d7c8     2C F1 07 F1 | 	add	ptra, #300
2d7cc     04 4E 05 F1 | 	add	fp, #4
2d7d0     A7 12 62 FC | 	wrlong	arg01, fp
2d7d4     04 4E 05 F1 | 	add	fp, #4
2d7d8     A7 14 62 FC | 	wrlong	arg02, fp
2d7dc     04 4E 85 F1 | 	sub	fp, #4
2d7e0     A7 16 02 FB | 	rdlong	arg03, fp
2d7e4     04 16 06 F1 | 	add	arg03, #4
2d7e8     0B 13 02 FB | 	rdlong	arg01, arg03
2d7ec     08 4E 05 F1 | 	add	fp, #8
2d7f0     A7 14 02 F6 | 	mov	arg02, fp
2d7f4     0C 4E 85 F1 | 	sub	fp, #12
2d7f8     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
2d7fc     28 4F 05 F1 | 	add	fp, #296
2d800     A7 FA 61 FC | 	wrlong	result1, fp
2d804     28 4F 85 F1 | 	sub	fp, #296
2d808     00 FA 0D F2 | 	cmp	result1, #0 wz
2d80c     14 00 90 AD |  if_e	jmp	#LR__4580
2d810                 | '         return _set_dos_error(r);
2d810     28 4F 05 F1 | 	add	fp, #296
2d814     A7 12 02 FB | 	rdlong	arg01, fp
2d818     28 4F 85 F1 | 	sub	fp, #296
2d81c     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0930
2d820     C4 00 90 FD | 	jmp	#LR__4583
2d824                 | LR__4580
2d824     28 4E 05 F1 | 	add	fp, #40
2d828     A7 16 CA FA | 	rdbyte	arg03, fp wz
2d82c     28 4E 85 F1 | 	sub	fp, #40
2d830                 | '         return -1;
2d830     01 FA 65 A6 |  if_e	neg	result1, #1
2d834     B0 00 90 AD |  if_e	jmp	#LR__4583
2d838     08 4E 05 F1 | 	add	fp, #8
2d83c     A7 12 02 FB | 	rdlong	arg01, fp
2d840     20 4E 05 F1 | 	add	fp, #32
2d844     A7 14 02 F6 | 	mov	arg02, fp
2d848     28 4E 85 F1 | 	sub	fp, #40
2d84c     3F 16 06 F6 | 	mov	arg03, #63
2d850     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
2d854     08 4E 05 F1 | 	add	fp, #8
2d858     A7 16 02 FB | 	rdlong	arg03, fp
2d85c     3F 16 06 F1 | 	add	arg03, #63
2d860     0B 01 48 FC | 	wrbyte	#0, arg03
2d864     0C 4E 05 F1 | 	add	fp, #12
2d868     A7 16 C2 FA | 	rdbyte	arg03, fp
2d86c     14 4E 85 F1 | 	sub	fp, #20
2d870     10 16 CE F7 | 	test	arg03, #16 wz
2d874     18 00 90 AD |  if_e	jmp	#LR__4581
2d878     08 4E 05 F1 | 	add	fp, #8
2d87c     A7 16 02 FB | 	rdlong	arg03, fp
2d880     08 4E 85 F1 | 	sub	fp, #8
2d884     50 16 06 F1 | 	add	arg03, #80
2d888     0B 03 48 FC | 	wrbyte	#1, arg03
2d88c     14 00 90 FD | 	jmp	#LR__4582
2d890                 | LR__4581
2d890     08 4E 05 F1 | 	add	fp, #8
2d894     A7 16 02 FB | 	rdlong	arg03, fp
2d898     08 4E 85 F1 | 	sub	fp, #8
2d89c     50 16 06 F1 | 	add	arg03, #80
2d8a0     0B 01 48 FC | 	wrbyte	#0, arg03
2d8a4                 | LR__4582
2d8a4     08 4E 05 F1 | 	add	fp, #8
2d8a8     A7 16 02 FB | 	rdlong	arg03, fp
2d8ac     04 4E 05 F1 | 	add	fp, #4
2d8b0     A7 14 02 FB | 	rdlong	arg02, fp
2d8b4     48 16 06 F1 | 	add	arg03, #72
2d8b8     0B 15 62 FC | 	wrlong	arg02, arg03
2d8bc     04 4E 85 F1 | 	sub	fp, #4
2d8c0     A7 1E 02 FB | 	rdlong	local01, fp
2d8c4     08 4E 05 F1 | 	add	fp, #8
2d8c8     A7 12 E2 FA | 	rdword	arg01, fp
2d8cc     02 4E 05 F1 | 	add	fp, #2
2d8d0     A7 14 E2 FA | 	rdword	arg02, fp
2d8d4     12 4E 85 F1 | 	sub	fp, #18
2d8d8     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0928
2d8dc     4C 1E 06 F1 | 	add	local01, #76
2d8e0     0F FB 61 FC | 	wrlong	result1, local01
2d8e4                 | '         ent->d_type =  (0) ;
2d8e4                 | '     }
2d8e4                 | '     ent->d_size = finfo.fsize;
2d8e4                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
2d8e4                 | '     return 0;
2d8e4     00 FA 05 F6 | 	mov	result1, #0
2d8e8                 | LR__4583
2d8e8     A7 F0 03 F6 | 	mov	ptra, fp
2d8ec     B2 00 A0 FD | 	call	#popregs_
2d8f0                 | _fatfs_cc_v_readdir_ret
2d8f0     2D 00 64 FD | 	ret
2d8f4                 | 
2d8f4                 | _fatfs_cc_v_stat
2d8f4     03 4A 05 F6 | 	mov	COUNT_, #3
2d8f8     A8 00 A0 FD | 	call	#pushregs_
2d8fc     30 F1 07 F1 | 	add	ptra, #304
2d900     04 4E 05 F1 | 	add	fp, #4
2d904     A7 12 62 FC | 	wrlong	arg01, fp
2d908     04 4E 05 F1 | 	add	fp, #4
2d90c     A7 14 62 FC | 	wrlong	arg02, fp
2d910     08 4E 85 F1 | 	sub	fp, #8
2d914     0A 13 02 F6 | 	mov	arg01, arg02
2d918     00 14 06 F6 | 	mov	arg02, #0
2d91c     30 16 06 F6 | 	mov	arg03, #48
2d920     98 00 A0 FD | 	call	#\builtin_bytefill_
2d924     04 4E 05 F1 | 	add	fp, #4
2d928     A7 FA 01 FB | 	rdlong	result1, fp
2d92c     04 4E 85 F1 | 	sub	fp, #4
2d930     FD FA C9 FA | 	rdbyte	result1, result1 wz
2d934     2C 00 90 AD |  if_e	jmp	#LR__4590
2d938     04 4E 05 F1 | 	add	fp, #4
2d93c     A7 FA 01 FB | 	rdlong	result1, fp
2d940     04 4E 85 F1 | 	sub	fp, #4
2d944     FD FA C1 FA | 	rdbyte	result1, result1
2d948     2E FA 0D F2 | 	cmp	result1, #46 wz
2d94c     04 4E 05 A1 |  if_e	add	fp, #4
2d950     A7 1E 02 AB |  if_e	rdlong	local01, fp
2d954     04 4E 85 A1 |  if_e	sub	fp, #4
2d958     01 1E 06 A1 |  if_e	add	local01, #1
2d95c     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
2d960     18 00 90 5D |  if_ne	jmp	#LR__4591
2d964                 | LR__4590
2d964     18 4E 05 F1 | 	add	fp, #24
2d968     A7 20 48 FC | 	wrbyte	#16, fp
2d96c     0C 4E 85 F1 | 	sub	fp, #12
2d970     A7 00 68 FC | 	wrlong	#0, fp
2d974     0C 4E 85 F1 | 	sub	fp, #12
2d978     24 00 90 FD | 	jmp	#LR__4592
2d97c                 | LR__4591
2d97c     04 4E 05 F1 | 	add	fp, #4
2d980     A7 12 02 FB | 	rdlong	arg01, fp
2d984     0C 4E 05 F1 | 	add	fp, #12
2d988     A7 14 02 F6 | 	mov	arg02, fp
2d98c     10 4E 85 F1 | 	sub	fp, #16
2d990     AC EB BF FD | 	call	#_fatfs_cc_f_stat
2d994     0C 4E 05 F1 | 	add	fp, #12
2d998     A7 FA 61 FC | 	wrlong	result1, fp
2d99c     0C 4E 85 F1 | 	sub	fp, #12
2d9a0                 | LR__4592
2d9a0     0C 4E 05 F1 | 	add	fp, #12
2d9a4     A7 20 0A FB | 	rdlong	local02, fp wz
2d9a8     0C 4E 85 F1 | 	sub	fp, #12
2d9ac     14 00 90 AD |  if_e	jmp	#LR__4593
2d9b0                 | '         return _set_dos_error(r);
2d9b0     0C 4E 05 F1 | 	add	fp, #12
2d9b4     A7 12 02 FB | 	rdlong	arg01, fp
2d9b8     0C 4E 85 F1 | 	sub	fp, #12
2d9bc     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0930
2d9c0     14 01 90 FD | 	jmp	#LR__4594
2d9c4                 | LR__4593
2d9c4     2C 4F 05 F1 | 	add	fp, #300
2d9c8     A7 48 6A FC | 	wrlong	#292, fp
2d9cc     14 4F 85 F1 | 	sub	fp, #276
2d9d0     A7 22 C2 FA | 	rdbyte	local03, fp
2d9d4     18 4E 85 F1 | 	sub	fp, #24
2d9d8     01 22 CE F7 | 	test	local03, #1 wz
2d9dc     2C 4F 05 A1 |  if_e	add	fp, #300
2d9e0     A7 22 02 AB |  if_e	rdlong	local03, fp
2d9e4     92 22 46 A5 |  if_e	or	local03, #146
2d9e8     A7 22 62 AC |  if_e	wrlong	local03, fp
2d9ec     2C 4F 85 A1 |  if_e	sub	fp, #300
2d9f0     18 4E 05 F1 | 	add	fp, #24
2d9f4     A7 22 C2 FA | 	rdbyte	local03, fp
2d9f8     18 4E 85 F1 | 	sub	fp, #24
2d9fc     10 22 CE F7 | 	test	local03, #16 wz
2da00     2C 4F 05 51 |  if_ne	add	fp, #300
2da04     A7 22 02 5B |  if_ne	rdlong	local03, fp
2da08     08 00 00 5F 
2da0c     49 22 46 55 |  if_ne	or	local03, ##4169
2da10     A7 22 62 5C |  if_ne	wrlong	local03, fp
2da14     2C 4F 85 51 |  if_ne	sub	fp, #300
2da18     08 4E 05 F1 | 	add	fp, #8
2da1c     A7 22 02 FB | 	rdlong	local03, fp
2da20     24 4F 05 F1 | 	add	fp, #292
2da24     A7 20 02 FB | 	rdlong	local02, fp
2da28     08 22 06 F1 | 	add	local03, #8
2da2c     11 21 62 FC | 	wrlong	local02, local03
2da30     24 4F 85 F1 | 	sub	fp, #292
2da34     A7 22 02 FB | 	rdlong	local03, fp
2da38     0C 22 06 F1 | 	add	local03, #12
2da3c     11 03 68 FC | 	wrlong	#1, local03
2da40     A7 22 02 FB | 	rdlong	local03, fp
2da44     08 4E 05 F1 | 	add	fp, #8
2da48     A7 20 02 FB | 	rdlong	local02, fp
2da4c     18 22 06 F1 | 	add	local03, #24
2da50     11 21 62 FC | 	wrlong	local02, local03
2da54     08 4E 85 F1 | 	sub	fp, #8
2da58     A7 22 02 FB | 	rdlong	local03, fp
2da5c     1C 22 06 F1 | 	add	local03, #28
2da60     01 00 80 FF 
2da64     11 01 68 FC | 	wrlong	##512, local03
2da68     A7 20 02 FB | 	rdlong	local02, fp
2da6c     10 23 02 F6 | 	mov	local03, local02
2da70     18 20 06 F1 | 	add	local02, #24
2da74     10 21 02 FB | 	rdlong	local02, local02
2da78     FF 21 06 F1 | 	add	local02, #511
2da7c     10 21 52 F6 | 	abs	local02, local02 wc
2da80     09 20 46 F0 | 	shr	local02, #9
2da84     10 21 82 F6 | 	negc	local02, local02
2da88     20 22 06 F1 | 	add	local03, #32
2da8c     11 21 62 FC | 	wrlong	local02, local03
2da90     A7 20 02 FB | 	rdlong	local02, fp
2da94     10 23 02 F6 | 	mov	local03, local02
2da98     10 1F 02 F6 | 	mov	local01, local02
2da9c     0C 4E 05 F1 | 	add	fp, #12
2daa0     A7 12 E2 FA | 	rdword	arg01, fp
2daa4     02 4E 05 F1 | 	add	fp, #2
2daa8     A7 14 E2 FA | 	rdword	arg02, fp
2daac     16 4E 85 F1 | 	sub	fp, #22
2dab0     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0928
2dab4     2C 1E 06 F1 | 	add	local01, #44
2dab8     0F FB 61 FC | 	wrlong	result1, local01
2dabc     28 20 06 F1 | 	add	local02, #40
2dac0     10 FB 61 FC | 	wrlong	result1, local02
2dac4     24 22 06 F1 | 	add	local03, #36
2dac8     11 FB 61 FC | 	wrlong	result1, local03
2dacc                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
2dacc                 | '     }
2dacc                 | '     buf->st_mode = mode;
2dacc                 | '     buf->st_nlink = 1;
2dacc                 | '     buf->st_size = finfo.fsize;
2dacc                 | '     buf->st_blksize = 512;
2dacc                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
2dacc                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
2dacc                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2dacc                 | '     return r;
2dacc     0C 4E 05 F1 | 	add	fp, #12
2dad0     A7 FA 01 FB | 	rdlong	result1, fp
2dad4     0C 4E 85 F1 | 	sub	fp, #12
2dad8                 | LR__4594
2dad8     A7 F0 03 F6 | 	mov	ptra, fp
2dadc     B2 00 A0 FD | 	call	#popregs_
2dae0                 | _fatfs_cc_v_stat_ret
2dae0     2D 00 64 FD | 	ret
2dae4                 | 
2dae4                 | _fatfs_cc_v_read
2dae4     00 4A 05 F6 | 	mov	COUNT_, #0
2dae8     A8 00 A0 FD | 	call	#pushregs_
2daec     1C F0 07 F1 | 	add	ptra, #28
2daf0     04 4E 05 F1 | 	add	fp, #4
2daf4     A7 12 62 FC | 	wrlong	arg01, fp
2daf8     04 4E 05 F1 | 	add	fp, #4
2dafc     A7 14 62 FC | 	wrlong	arg02, fp
2db00     04 4E 05 F1 | 	add	fp, #4
2db04     A7 16 62 FC | 	wrlong	arg03, fp
2db08     08 4E 85 F1 | 	sub	fp, #8
2db0c     A7 12 02 FB | 	rdlong	arg01, fp
2db10     09 13 0A FB | 	rdlong	arg01, arg01 wz
2db14     0C 4E 05 F1 | 	add	fp, #12
2db18     A7 12 62 FC | 	wrlong	arg01, fp
2db1c     10 4E 85 F1 | 	sub	fp, #16
2db20                 | '         return _seterror( 5 );
2db20     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2db24     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2db28     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2db2c     01 FA 65 A6 |  if_e	neg	result1, #1
2db30     B8 00 90 AD |  if_e	jmp	#LR__4602
2db34     10 4E 05 F1 | 	add	fp, #16
2db38     A7 12 02 FB | 	rdlong	arg01, fp
2db3c     02 00 00 FF 
2db40     14 12 06 F1 | 	add	arg01, ##1044
2db44     08 4E 85 F1 | 	sub	fp, #8
2db48     A7 14 02 FB | 	rdlong	arg02, fp
2db4c     04 4E 05 F1 | 	add	fp, #4
2db50     A7 16 02 FB | 	rdlong	arg03, fp
2db54     0C 4E 05 F1 | 	add	fp, #12
2db58     A7 18 02 F6 | 	mov	arg04, fp
2db5c     18 4E 85 F1 | 	sub	fp, #24
2db60     C4 CE BF FD | 	call	#_fatfs_cc_f_read
2db64     14 4E 05 F1 | 	add	fp, #20
2db68     A7 FA 61 FC | 	wrlong	result1, fp
2db6c     14 4E 85 F1 | 	sub	fp, #20
2db70     00 FA 0D F2 | 	cmp	result1, #0 wz
2db74     34 00 90 AD |  if_e	jmp	#LR__4600
2db78     04 4E 05 F1 | 	add	fp, #4
2db7c     A7 18 02 FB | 	rdlong	arg04, fp
2db80     0C 17 02 F6 | 	mov	arg03, arg04
2db84     08 18 06 F1 | 	add	arg04, #8
2db88     0C 19 02 FB | 	rdlong	arg04, arg04
2db8c     20 18 46 F5 | 	or	arg04, #32
2db90     08 16 06 F1 | 	add	arg03, #8
2db94     0B 19 62 FC | 	wrlong	arg04, arg03
2db98                 | '         fil->state |=  (0x20) ;
2db98                 | '         return _set_dos_error(r);
2db98     10 4E 05 F1 | 	add	fp, #16
2db9c     A7 12 02 FB | 	rdlong	arg01, fp
2dba0     14 4E 85 F1 | 	sub	fp, #20
2dba4     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0930
2dba8     40 00 90 FD | 	jmp	#LR__4602
2dbac                 | LR__4600
2dbac     18 4E 05 F1 | 	add	fp, #24
2dbb0     A7 FA 09 FB | 	rdlong	result1, fp wz
2dbb4     18 4E 85 F1 | 	sub	fp, #24
2dbb8     24 00 90 5D |  if_ne	jmp	#LR__4601
2dbbc     04 4E 05 F1 | 	add	fp, #4
2dbc0     A7 FA 01 FB | 	rdlong	result1, fp
2dbc4     FD 18 02 F6 | 	mov	arg04, result1
2dbc8     04 4E 85 F1 | 	sub	fp, #4
2dbcc     08 FA 05 F1 | 	add	result1, #8
2dbd0     FD FA 01 FB | 	rdlong	result1, result1
2dbd4     10 FA 45 F5 | 	or	result1, #16
2dbd8     08 18 06 F1 | 	add	arg04, #8
2dbdc     0C FB 61 FC | 	wrlong	result1, arg04
2dbe0                 | LR__4601
2dbe0                 | '         fil->state |=  (0x10) ;
2dbe0                 | '     }
2dbe0                 | '     return x;
2dbe0     18 4E 05 F1 | 	add	fp, #24
2dbe4     A7 FA 01 FB | 	rdlong	result1, fp
2dbe8     18 4E 85 F1 | 	sub	fp, #24
2dbec                 | LR__4602
2dbec     A7 F0 03 F6 | 	mov	ptra, fp
2dbf0     B2 00 A0 FD | 	call	#popregs_
2dbf4                 | _fatfs_cc_v_read_ret
2dbf4     2D 00 64 FD | 	ret
2dbf8                 | 
2dbf8                 | _fatfs_cc_v_write
2dbf8     00 4A 05 F6 | 	mov	COUNT_, #0
2dbfc     A8 00 A0 FD | 	call	#pushregs_
2dc00     1C F0 07 F1 | 	add	ptra, #28
2dc04     04 4E 05 F1 | 	add	fp, #4
2dc08     A7 12 62 FC | 	wrlong	arg01, fp
2dc0c     04 4E 05 F1 | 	add	fp, #4
2dc10     A7 14 62 FC | 	wrlong	arg02, fp
2dc14     04 4E 05 F1 | 	add	fp, #4
2dc18     A7 16 62 FC | 	wrlong	arg03, fp
2dc1c     08 4E 85 F1 | 	sub	fp, #8
2dc20     A7 12 02 FB | 	rdlong	arg01, fp
2dc24     09 13 0A FB | 	rdlong	arg01, arg01 wz
2dc28     0C 4E 05 F1 | 	add	fp, #12
2dc2c     A7 12 62 FC | 	wrlong	arg01, fp
2dc30     10 4E 85 F1 | 	sub	fp, #16
2dc34                 | '         return _seterror( 5 );
2dc34     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2dc38     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2dc3c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2dc40     01 FA 65 A6 |  if_e	neg	result1, #1
2dc44     84 00 90 AD |  if_e	jmp	#LR__4611
2dc48     10 4E 05 F1 | 	add	fp, #16
2dc4c     A7 12 02 FB | 	rdlong	arg01, fp
2dc50     02 00 00 FF 
2dc54     14 12 06 F1 | 	add	arg01, ##1044
2dc58     08 4E 85 F1 | 	sub	fp, #8
2dc5c     A7 14 02 FB | 	rdlong	arg02, fp
2dc60     04 4E 05 F1 | 	add	fp, #4
2dc64     A7 16 02 FB | 	rdlong	arg03, fp
2dc68     0C 4E 05 F1 | 	add	fp, #12
2dc6c     A7 18 02 F6 | 	mov	arg04, fp
2dc70     18 4E 85 F1 | 	sub	fp, #24
2dc74     4C D4 BF FD | 	call	#_fatfs_cc_f_write
2dc78     14 4E 05 F1 | 	add	fp, #20
2dc7c     A7 FA 61 FC | 	wrlong	result1, fp
2dc80     14 4E 85 F1 | 	sub	fp, #20
2dc84     00 FA 0D F2 | 	cmp	result1, #0 wz
2dc88     34 00 90 AD |  if_e	jmp	#LR__4610
2dc8c     04 4E 05 F1 | 	add	fp, #4
2dc90     A7 18 02 FB | 	rdlong	arg04, fp
2dc94     0C 17 02 F6 | 	mov	arg03, arg04
2dc98     08 18 06 F1 | 	add	arg04, #8
2dc9c     0C 19 02 FB | 	rdlong	arg04, arg04
2dca0     20 18 46 F5 | 	or	arg04, #32
2dca4     08 16 06 F1 | 	add	arg03, #8
2dca8     0B 19 62 FC | 	wrlong	arg04, arg03
2dcac                 | '         fil->state |=  (0x20) ;
2dcac                 | '         return _set_dos_error(r);
2dcac     10 4E 05 F1 | 	add	fp, #16
2dcb0     A7 12 02 FB | 	rdlong	arg01, fp
2dcb4     14 4E 85 F1 | 	sub	fp, #20
2dcb8     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0930
2dcbc     0C 00 90 FD | 	jmp	#LR__4611
2dcc0                 | LR__4610
2dcc0                 | '     }
2dcc0                 | '     return x;
2dcc0     18 4E 05 F1 | 	add	fp, #24
2dcc4     A7 FA 01 FB | 	rdlong	result1, fp
2dcc8     18 4E 85 F1 | 	sub	fp, #24
2dccc                 | LR__4611
2dccc     A7 F0 03 F6 | 	mov	ptra, fp
2dcd0     B2 00 A0 FD | 	call	#popregs_
2dcd4                 | _fatfs_cc_v_write_ret
2dcd4     2D 00 64 FD | 	ret
2dcd8                 | 
2dcd8                 | _fatfs_cc_v_lseek
2dcd8     04 4A 05 F6 | 	mov	COUNT_, #4
2dcdc     A8 00 A0 FD | 	call	#pushregs_
2dce0     0A 1F 02 F6 | 	mov	local01, arg02
2dce4     0B 21 02 F6 | 	mov	local02, arg03
2dce8     09 23 02 FB | 	rdlong	local03, arg01
2dcec     02 00 00 FF 
2dcf0     14 22 0E F1 | 	add	local03, ##1044 wz
2dcf4                 | '         return _seterror( 5 );
2dcf4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2dcf8     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2dcfc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2dd00     01 FA 65 A6 |  if_e	neg	result1, #1
2dd04     4C 00 90 AD |  if_e	jmp	#LR__4622
2dd08     00 20 0E F2 | 	cmp	local02, #0 wz
2dd0c     24 00 90 AD |  if_e	jmp	#LR__4620
2dd10     01 20 0E F2 | 	cmp	local02, #1 wz
2dd14     14 22 06 A1 |  if_e	add	local03, #20
2dd18     11 25 02 AB |  if_e	rdlong	local04, local03
2dd1c     14 22 86 A1 |  if_e	sub	local03, #20
2dd20     12 1F 02 A1 |  if_e	add	local01, local04
2dd24     0C 22 06 51 |  if_ne	add	local03, #12
2dd28     11 25 02 5B |  if_ne	rdlong	local04, local03
2dd2c     0C 22 86 51 |  if_ne	sub	local03, #12
2dd30     12 1F 02 51 |  if_ne	add	local01, local04
2dd34                 | LR__4620
2dd34     0F 15 02 F6 | 	mov	arg02, local01
2dd38     11 13 02 F6 | 	mov	arg01, local03
2dd3c     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
2dd40     FD 12 0A F6 | 	mov	arg01, result1 wz
2dd44     08 00 90 AD |  if_e	jmp	#LR__4621
2dd48                 | '         return _set_dos_error(result);
2dd48     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0930
2dd4c     04 00 90 FD | 	jmp	#LR__4622
2dd50                 | LR__4621
2dd50                 | '     }
2dd50                 | '     return offset;
2dd50     0F FB 01 F6 | 	mov	result1, local01
2dd54                 | LR__4622
2dd54     A7 F0 03 F6 | 	mov	ptra, fp
2dd58     B2 00 A0 FD | 	call	#popregs_
2dd5c                 | _fatfs_cc_v_lseek_ret
2dd5c     2D 00 64 FD | 	ret
2dd60                 | 
2dd60                 | _fatfs_cc_v_ioctl
2dd60                 | ' {
2dd60                 | '     return _seterror( 10 );
2dd60     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2dd64     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2dd68     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2dd6c     01 FA 65 F6 | 	neg	result1, #1
2dd70                 | _fatfs_cc_v_ioctl_ret
2dd70     2D 00 64 FD | 	ret
2dd74                 | 
2dd74                 | _fatfs_cc_v_mkdir
2dd74     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
2dd78     FD 12 02 F6 | 	mov	arg01, result1
2dd7c                 | ' 
2dd7c                 | '     r = f_mkdir(name);
2dd7c                 | '     return _set_dos_error(r);
2dd7c     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0930
2dd80                 | _fatfs_cc_v_mkdir_ret
2dd80     2D 00 64 FD | 	ret
2dd84                 | 
2dd84                 | _fatfs_cc_v_remove
2dd84     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2dd88     FD 12 02 F6 | 	mov	arg01, result1
2dd8c                 | ' 
2dd8c                 | '     r = f_unlink(name);
2dd8c                 | '     return _set_dos_error(r);
2dd8c     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0930
2dd90                 | _fatfs_cc_v_remove_ret
2dd90     2D 00 64 FD | 	ret
2dd94                 | 
2dd94                 | _fatfs_cc_v_rmdir
2dd94     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2dd98     FD 12 02 F6 | 	mov	arg01, result1
2dd9c                 | ' 
2dd9c                 | '     r = f_unlink(name);
2dd9c                 | '     return _set_dos_error(r);
2dd9c     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0930
2dda0                 | _fatfs_cc_v_rmdir_ret
2dda0     2D 00 64 FD | 	ret
2dda4                 | 
2dda4                 | _fatfs_cc_v_rename
2dda4     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
2dda8     FD 12 02 F6 | 	mov	arg01, result1
2ddac                 | '     return _set_dos_error(r);
2ddac     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0930
2ddb0                 | _fatfs_cc_v_rename_ret
2ddb0     2D 00 64 FD | 	ret
2ddb4                 | 
2ddb4                 | _fatfs_cc_v_open
2ddb4     07 4A 05 F6 | 	mov	COUNT_, #7
2ddb8     A8 00 A0 FD | 	call	#pushregs_
2ddbc     09 1F 02 F6 | 	mov	local01, arg01
2ddc0     0A 21 02 F6 | 	mov	local02, arg02
2ddc4     0B 23 02 F6 | 	mov	local03, arg03
2ddc8     03 00 00 FF 
2ddcc     3C 12 06 F6 | 	mov	arg01, ##1596
2ddd0                 | '     return _gc_alloc(size);
2ddd0     10 14 06 F6 | 	mov	arg02, #16
2ddd4     A0 58 BF FD | 	call	#__system___gc_doalloc
2ddd8     FD 24 0A F6 | 	mov	local04, result1 wz
2dddc                 | '       return _seterror( 7 );
2dddc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2dde0     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2dde4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2dde8     01 FA 65 A6 |  if_e	neg	result1, #1
2ddec     98 00 90 AD |  if_e	jmp	#LR__4636
2ddf0     12 13 02 F6 | 	mov	arg01, local04
2ddf4     00 14 06 F6 | 	mov	arg02, #0
2ddf8     03 00 00 FF 
2ddfc     3C 16 06 F6 | 	mov	arg03, ##1596
2de00     98 00 A0 FD | 	call	#\builtin_bytefill_
2de04                 | '   switch (flags & 3) {
2de04     11 27 02 F6 | 	mov	local05, local03
2de08     03 26 0E F5 | 	and	local05, #3 wz
2de0c     0C 00 90 AD |  if_e	jmp	#LR__4630
2de10     01 26 0E F2 | 	cmp	local05, #1 wz
2de14     0C 00 90 AD |  if_e	jmp	#LR__4631
2de18     10 00 90 FD | 	jmp	#LR__4632
2de1c                 | LR__4630
2de1c     01 28 06 F6 | 	mov	local06, #1
2de20                 | '       fs_flags =  0x01 ;
2de20                 | '       break;
2de20     0C 00 90 FD | 	jmp	#LR__4633
2de24                 | LR__4631
2de24     02 28 06 F6 | 	mov	local06, #2
2de28                 | '       fs_flags =  0x02 ;
2de28                 | '       break;
2de28     04 00 90 FD | 	jmp	#LR__4633
2de2c                 | LR__4632
2de2c     03 28 06 F6 | 	mov	local06, #3
2de30                 | '       fs_flags =  0x01  |  0x02 ;
2de30                 | '       break;
2de30                 | LR__4633
2de30     08 22 CE F7 | 	test	local03, #8 wz
2de34     18 28 46 55 |  if_ne	or	local06, #24
2de38     08 00 90 5D |  if_ne	jmp	#LR__4634
2de3c     20 22 CE F7 | 	test	local03, #32 wz
2de40     30 28 46 55 |  if_ne	or	local06, #48
2de44                 | LR__4634
2de44     02 00 00 FF 
2de48     14 24 06 F1 | 	add	local04, ##1044
2de4c     12 13 02 F6 | 	mov	arg01, local04
2de50     02 00 00 FF 
2de54     14 24 86 F1 | 	sub	local04, ##1044
2de58     10 15 02 F6 | 	mov	arg02, local02
2de5c     14 17 02 F6 | 	mov	arg03, local06
2de60     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
2de64     FD 2A 0A F6 | 	mov	local07, result1 wz
2de68     14 00 90 AD |  if_e	jmp	#LR__4635
2de6c     12 13 02 F6 | 	mov	arg01, local04
2de70                 | '     return _gc_free(ptr);
2de70     10 59 BF FD | 	call	#__system___gc_free
2de74                 | '     free(f);
2de74                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2de74                 | '     return _set_dos_error(r);
2de74     15 13 02 F6 | 	mov	arg01, local07
2de78     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0930
2de7c     08 00 90 FD | 	jmp	#LR__4636
2de80                 | LR__4635
2de80     0F 25 62 FC | 	wrlong	local04, local01
2de84                 | '   }
2de84                 | '   fil->vfsdata = f;
2de84                 | '   return 0;
2de84     00 FA 05 F6 | 	mov	result1, #0
2de88                 | LR__4636
2de88     A7 F0 03 F6 | 	mov	ptra, fp
2de8c     B2 00 A0 FD | 	call	#popregs_
2de90                 | _fatfs_cc_v_open_ret
2de90     2D 00 64 FD | 	ret
2de94                 | 
2de94                 | _fatfs_cc_v_flush
2de94     09 13 02 FB | 	rdlong	arg01, arg01
2de98     02 00 00 FF 
2de9c     14 12 0E F1 | 	add	arg01, ##1044 wz
2dea0                 | '         return _seterror( 5 );
2dea0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2dea4     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2dea8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2deac     01 FA 65 A6 |  if_e	neg	result1, #1
2deb0     0C 00 90 AD |  if_e	jmp	#LR__4640
2deb4     00 DA BF FD | 	call	#_fatfs_cc_f_sync
2deb8     FD 12 02 F6 | 	mov	arg01, result1
2debc                 | '     }
2debc                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2debc                 | '     result = f_sync(f);
2debc                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2debc                 | '     return _set_dos_error(result);
2debc     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0930
2dec0                 | LR__4640
2dec0                 | _fatfs_cc_v_flush_ret
2dec0     2D 00 64 FD | 	ret
2dec4                 | 
2dec4                 | _fatfs_cc_v_init
2dec4                 | ' {
2dec4                 | '     return 0;
2dec4     00 FA 05 F6 | 	mov	result1, #0
2dec8                 | _fatfs_cc_v_init_ret
2dec8     2D 00 64 FD | 	ret
2decc                 | 
2decc                 | _fatfs_cc_v_deinit
2decc     77 01 00 FF 
2ded0     40 14 06 F6 | 	mov	arg02, ##@LR__4836
2ded4     00 12 06 F6 | 	mov	arg01, #0
2ded8     00 16 06 F6 | 	mov	arg03, #0
2dedc     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
2dee0     01 00 00 FF 
2dee4     08 E4 05 F1 | 	add	objptr, ##520
2dee8     F2 12 02 FB | 	rdlong	arg01, objptr
2deec     04 E4 05 F1 | 	add	objptr, #4
2def0     F2 14 02 FB | 	rdlong	arg02, objptr
2def4     01 00 00 FF 
2def8     0C E4 85 F1 | 	sub	objptr, ##524
2defc     18 40 BF FD | 	call	#__system___freepins
2df00                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2df00                 | '     _freepins(f_pinmask);
2df00                 | '     return 0;
2df00     00 FA 05 F6 | 	mov	result1, #0
2df04                 | _fatfs_cc_v_deinit_ret
2df04     2D 00 64 FD | 	ret
2df08                 | 
2df08                 | _fatfs_cc_get_vfs
2df08     01 4A 05 F6 | 	mov	COUNT_, #1
2df0c     A8 00 A0 FD | 	call	#pushregs_
2df10     09 1F 02 F6 | 	mov	local01, arg01
2df14     50 12 06 F6 | 	mov	arg01, #80
2df18     2C 57 BF FD | 	call	#__system___gc_alloc_managed
2df1c     FD 12 02 F6 | 	mov	arg01, result1
2df20     F2 FA 01 F6 | 	mov	result1, objptr
2df24     00 B8 04 FF 
2df28     00 FA 45 F5 | 	or	result1, ##158334976
2df2c     09 FB 61 FC | 	wrlong	result1, arg01
2df30     F2 FA 01 F6 | 	mov	result1, objptr
2df34     00 C0 04 FF 
2df38     00 FA 45 F5 | 	or	result1, ##159383552
2df3c     04 12 06 F1 | 	add	arg01, #4
2df40     09 FB 61 FC | 	wrlong	result1, arg01
2df44     F2 FA 01 F6 | 	mov	result1, objptr
2df48     00 C8 04 FF 
2df4c     00 FA 45 F5 | 	or	result1, ##160432128
2df50     04 12 06 F1 | 	add	arg01, #4
2df54     09 FB 61 FC | 	wrlong	result1, arg01
2df58     F2 FA 01 F6 | 	mov	result1, objptr
2df5c     00 D0 04 FF 
2df60     00 FA 45 F5 | 	or	result1, ##161480704
2df64     04 12 06 F1 | 	add	arg01, #4
2df68     09 FB 61 FC | 	wrlong	result1, arg01
2df6c     F2 FA 01 F6 | 	mov	result1, objptr
2df70     00 D8 04 FF 
2df74     00 FA 45 F5 | 	or	result1, ##162529280
2df78     04 12 06 F1 | 	add	arg01, #4
2df7c     09 FB 61 FC | 	wrlong	result1, arg01
2df80     04 12 06 F1 | 	add	arg01, #4
2df84     09 01 68 FC | 	wrlong	#0, arg01
2df88     04 12 06 F1 | 	add	arg01, #4
2df8c     09 1F 62 FC | 	wrlong	local01, arg01
2df90     04 12 06 F1 | 	add	arg01, #4
2df94     09 01 68 FC | 	wrlong	#0, arg01
2df98     F2 FA 01 F6 | 	mov	result1, objptr
2df9c     00 E0 04 FF 
2dfa0     00 FA 45 F5 | 	or	result1, ##163577856
2dfa4     04 12 06 F1 | 	add	arg01, #4
2dfa8     09 FB 61 FC | 	wrlong	result1, arg01
2dfac     F2 FA 01 F6 | 	mov	result1, objptr
2dfb0     00 E8 04 FF 
2dfb4     00 FA 45 F5 | 	or	result1, ##164626432
2dfb8     04 12 06 F1 | 	add	arg01, #4
2dfbc     09 FB 61 FC | 	wrlong	result1, arg01
2dfc0     F2 FA 01 F6 | 	mov	result1, objptr
2dfc4     00 F0 04 FF 
2dfc8     00 FA 45 F5 | 	or	result1, ##165675008
2dfcc     04 12 06 F1 | 	add	arg01, #4
2dfd0     09 FB 61 FC | 	wrlong	result1, arg01
2dfd4     F2 FA 01 F6 | 	mov	result1, objptr
2dfd8     00 F8 04 FF 
2dfdc     00 FA 45 F5 | 	or	result1, ##166723584
2dfe0     04 12 06 F1 | 	add	arg01, #4
2dfe4     09 FB 61 FC | 	wrlong	result1, arg01
2dfe8     F2 FA 01 F6 | 	mov	result1, objptr
2dfec     00 00 05 FF 
2dff0     00 FA 45 F5 | 	or	result1, ##167772160
2dff4     04 12 06 F1 | 	add	arg01, #4
2dff8     09 FB 61 FC | 	wrlong	result1, arg01
2dffc     F2 FA 01 F6 | 	mov	result1, objptr
2e000     00 08 05 FF 
2e004     00 FA 45 F5 | 	or	result1, ##168820736
2e008     04 12 06 F1 | 	add	arg01, #4
2e00c     09 FB 61 FC | 	wrlong	result1, arg01
2e010     F2 FA 01 F6 | 	mov	result1, objptr
2e014     00 10 05 FF 
2e018     00 FA 45 F5 | 	or	result1, ##169869312
2e01c     04 12 06 F1 | 	add	arg01, #4
2e020     09 FB 61 FC | 	wrlong	result1, arg01
2e024     F2 FA 01 F6 | 	mov	result1, objptr
2e028     00 18 05 FF 
2e02c     00 FA 45 F5 | 	or	result1, ##170917888
2e030     04 12 06 F1 | 	add	arg01, #4
2e034     09 FB 61 FC | 	wrlong	result1, arg01
2e038     F2 FA 01 F6 | 	mov	result1, objptr
2e03c     00 20 05 FF 
2e040     00 FA 45 F5 | 	or	result1, ##171966464
2e044     04 12 06 F1 | 	add	arg01, #4
2e048     09 FB 61 FC | 	wrlong	result1, arg01
2e04c     F2 FA 01 F6 | 	mov	result1, objptr
2e050     00 28 05 FF 
2e054     00 FA 45 F5 | 	or	result1, ##173015040
2e058     04 12 06 F1 | 	add	arg01, #4
2e05c     09 FB 61 FC | 	wrlong	result1, arg01
2e060     F2 FA 01 F6 | 	mov	result1, objptr
2e064     00 30 05 FF 
2e068     00 FA 45 F5 | 	or	result1, ##174063616
2e06c     04 12 06 F1 | 	add	arg01, #4
2e070     09 FB 61 FC | 	wrlong	result1, arg01
2e074     F2 FA 01 F6 | 	mov	result1, objptr
2e078     00 38 05 FF 
2e07c     00 FA 45 F5 | 	or	result1, ##175112192
2e080     04 12 06 F1 | 	add	arg01, #4
2e084     09 FB 61 FC | 	wrlong	result1, arg01
2e088     4C 12 86 F1 | 	sub	arg01, #76
2e08c                 | ' 
2e08c                 | '     v->close = &v_close;
2e08c                 | '     v->read = &v_read;
2e08c                 | '     v->write = &v_write;
2e08c                 | '     v->lseek = &v_lseek;
2e08c                 | '     v->ioctl = &v_ioctl;
2e08c                 | '     v->flush = 0;
2e08c                 | '     v->vfs_data = ptr;
2e08c                 | '     v->reserved = 0;
2e08c                 | ' 
2e08c                 | '     v->open = &v_open;
2e08c                 | '     v->creat = &v_creat;
2e08c                 | '     v->opendir = &v_opendir;
2e08c                 | '     v->closedir = &v_closedir;
2e08c                 | '     v->readdir = &v_readdir;
2e08c                 | '     v->stat = &v_stat;
2e08c                 | ' 
2e08c                 | '     v->mkdir = &v_mkdir;
2e08c                 | '     v->rmdir = &v_rmdir;
2e08c                 | ' 
2e08c                 | '     v->remove = &v_remove;
2e08c                 | '     v->rename = &v_rename;
2e08c                 | ' 
2e08c                 | '     v->init = &v_init;
2e08c                 | '     v->deinit = &v_deinit;
2e08c                 | ' 
2e08c                 | '     return v;
2e08c     09 FB 01 F6 | 	mov	result1, arg01
2e090     A7 F0 03 F6 | 	mov	ptra, fp
2e094     B2 00 A0 FD | 	call	#popregs_
2e098                 | _fatfs_cc_get_vfs_ret
2e098     2D 00 64 FD | 	ret
2e09c                 | 
2e09c                 | _fatfs_cc_xmit_mmc_1077
2e09c     01 00 00 FF 
2e0a0     10 E4 05 F1 | 	add	objptr, ##528
2e0a4     F2 00 02 FB | 	rdlong	_var01, objptr
2e0a8     08 E4 05 F1 | 	add	objptr, #8
2e0ac     F2 02 02 FB | 	rdlong	_var02, objptr
2e0b0     01 00 00 FF 
2e0b4     18 E4 85 F1 | 	sub	objptr, ##536
2e0b8     40 02 62 FD | 	dirl	_var02
2e0bc     28 02 64 FD | 	setq	#1
2e0c0     09 05 02 FB | 	rdlong	_var03, arg01
2e0c4     69 04 62 FD | 	rev	_var03
2e0c8     1B 04 FE F9 | 	movbyts	_var03, #27
2e0cc     01 05 22 FC | 	wypin	_var03, _var02
2e0d0     0A 05 02 F6 | 	mov	_var03, arg02
2e0d4     02 14 4E F0 | 	shr	arg02, #2 wz
2e0d8     03 04 66 F0 | 	shl	_var03, #3
2e0dc     00 05 22 FC | 	wypin	_var03, _var01
2e0e0     41 02 62 FD | 	dirh	_var02
2e0e4     08 12 06 F1 | 	add	arg01, #8
2e0e8     69 06 62 FD | 	rev	_var04
2e0ec     1B 06 FE F9 | 	movbyts	_var04, #27
2e0f0                 | LR__4650
2e0f0     01 07 22 5C |  if_ne	wypin	_var04, _var02
2e0f4     09 07 02 5B |  if_ne	rdlong	_var04, arg01
2e0f8     04 12 06 51 |  if_ne	add	arg01, #4
2e0fc     69 06 62 5D |  if_ne	rev	_var04
2e100     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
2e104                 | LR__4651
2e104     40 02 72 5D |  if_ne	testp	_var02 wc
2e108     F8 FF 9F 1D |  if_a	jmp	#LR__4651
2e10c     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4650
2e110                 | LR__4652
2e110     40 00 72 FD | 	testp	_var01 wc
2e114     F8 FF 9F 3D |  if_ae	jmp	#LR__4652
2e118     40 02 62 FD | 	dirl	_var02
2e11c     FF FF FF FF 
2e120     01 FF 2B FC | 	wypin	##-1, _var02
2e124     41 02 62 FD | 	dirh	_var02
2e128                 | _fatfs_cc_xmit_mmc_1077_ret
2e128     2D 00 64 FD | 	ret
2e12c                 | 
2e12c                 | _fatfs_cc_rcvr_mmc_1084
2e12c     01 00 00 FF 
2e130     10 E4 05 F1 | 	add	objptr, ##528
2e134     F2 00 02 FB | 	rdlong	_var01, objptr
2e138     0C E4 05 F1 | 	add	objptr, #12
2e13c     F2 02 02 FB | 	rdlong	_var02, objptr
2e140     01 00 00 FF 
2e144     1C E4 85 F1 | 	sub	objptr, ##540
2e148     01 03 08 FC | 	akpin	_var02
2e14c     0A 05 0A F6 | 	mov	_var03, arg02 wz
2e150     02 04 4E F0 | 	shr	_var03, #2 wz
2e154     30 00 90 AD |  if_e	jmp	#LR__4662
2e158     02 07 02 F6 | 	mov	_var04, _var03
2e15c     05 06 66 F0 | 	shl	_var04, #5
2e160     00 07 22 FC | 	wypin	_var04, _var01
2e164     01 7F 18 FC | 	wxpin	#63, _var02
2e168                 | LR__4660
2e168                 | LR__4661
2e168     40 02 72 FD | 	testp	_var02 wc
2e16c     F8 FF 9F 3D |  if_ae	jmp	#LR__4661
2e170     01 07 8A FA | 	rdpin	_var04, _var02
2e174     69 06 62 FD | 	rev	_var04
2e178     1B 06 FE F9 | 	movbyts	_var04, #27
2e17c     09 07 62 FC | 	wrlong	_var04, arg01
2e180     04 12 06 F1 | 	add	arg01, #4
2e184     F8 05 6E FB | 	djnz	_var03, #LR__4660
2e188                 | LR__4662
2e188     03 14 0E F5 | 	and	arg02, #3 wz
2e18c     24 00 90 AD |  if_e	jmp	#LR__4665
2e190     01 4F 18 FC | 	wxpin	#39, _var02
2e194                 | LR__4663
2e194     00 11 28 FC | 	wypin	#8, _var01
2e198                 | LR__4664
2e198     40 02 72 FD | 	testp	_var02 wc
2e19c     F8 FF 9F 3D |  if_ae	jmp	#LR__4664
2e1a0     01 07 8A FA | 	rdpin	_var04, _var02
2e1a4     69 06 62 FD | 	rev	_var04
2e1a8     09 07 42 FC | 	wrbyte	_var04, arg01
2e1ac     01 12 06 F1 | 	add	arg01, #1
2e1b0     F8 15 6E FB | 	djnz	arg02, #LR__4663
2e1b4                 | LR__4665
2e1b4                 | _fatfs_cc_rcvr_mmc_1084_ret
2e1b4     2D 00 64 FD | 	ret
2e1b8                 | 
2e1b8                 | _fatfs_cc_wait_ready_1088
2e1b8     01 4A 05 F6 | 	mov	COUNT_, #1
2e1bc     A8 00 A0 FD | 	call	#pushregs_
2e1c0     10 F0 07 F1 | 	add	ptra, #16
2e1c4     1A FA 61 FD | 	getct	result1
2e1c8     08 4E 05 F1 | 	add	fp, #8
2e1cc     A7 FA 61 FC | 	wrlong	result1, fp
2e1d0     14 1E 06 FB | 	rdlong	local01, #20
2e1d4     01 1E 46 F0 | 	shr	local01, #1
2e1d8     04 4E 05 F1 | 	add	fp, #4
2e1dc     A7 1E 62 FC | 	wrlong	local01, fp
2e1e0     0C 4E 85 F1 | 	sub	fp, #12
2e1e4                 | ' {
2e1e4                 | ' 	BYTE d;
2e1e4                 | ' 	UINT tmr, tmout;
2e1e4                 | ' 
2e1e4                 | ' 	tmr = _cnt();
2e1e4                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
2e1e4                 | ' 	for(;;) {
2e1e4                 | LR__4670
2e1e4     04 4E 05 F1 | 	add	fp, #4
2e1e8     A7 12 02 F6 | 	mov	arg01, fp
2e1ec     04 4E 85 F1 | 	sub	fp, #4
2e1f0     01 14 06 F6 | 	mov	arg02, #1
2e1f4     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1084
2e1f8     04 4E 05 F1 | 	add	fp, #4
2e1fc     A7 1E C2 FA | 	rdbyte	local01, fp
2e200     04 4E 85 F1 | 	sub	fp, #4
2e204     FF 1E 0E F2 | 	cmp	local01, #255 wz
2e208     01 FA 05 A6 |  if_e	mov	result1, #1
2e20c     28 00 90 AD |  if_e	jmp	#LR__4671
2e210     1A FA 61 FD | 	getct	result1
2e214     08 4E 05 F1 | 	add	fp, #8
2e218     A7 1E 02 FB | 	rdlong	local01, fp
2e21c     0F FB 81 F1 | 	sub	result1, local01
2e220     04 4E 05 F1 | 	add	fp, #4
2e224     A7 1E 02 FB | 	rdlong	local01, fp
2e228     0C 4E 85 F1 | 	sub	fp, #12
2e22c     0F FB 11 F2 | 	cmp	result1, local01 wc
2e230     00 FA 05 36 |  if_ae	mov	result1, #0
2e234     AC FF 9F CD |  if_b	jmp	#LR__4670
2e238                 | LR__4671
2e238     A7 F0 03 F6 | 	mov	ptra, fp
2e23c     B2 00 A0 FD | 	call	#popregs_
2e240                 | _fatfs_cc_wait_ready_1088_ret
2e240     2D 00 64 FD | 	ret
2e244                 | 
2e244                 | _fatfs_cc_deselect_1094
2e244     00 4A 05 F6 | 	mov	COUNT_, #0
2e248     A8 00 A0 FD | 	call	#pushregs_
2e24c     14 F0 07 F1 | 	add	ptra, #20
2e250     01 00 00 FF 
2e254     14 E4 05 F1 | 	add	objptr, ##532
2e258     F2 14 02 FB | 	rdlong	arg02, objptr
2e25c     04 4E 05 F1 | 	add	fp, #4
2e260     A7 14 62 FC | 	wrlong	arg02, fp
2e264     04 E4 85 F1 | 	sub	objptr, #4
2e268     F2 14 02 FB | 	rdlong	arg02, objptr
2e26c     04 4E 05 F1 | 	add	fp, #4
2e270     A7 14 62 FC | 	wrlong	arg02, fp
2e274     08 E4 05 F1 | 	add	objptr, #8
2e278     F2 14 02 FB | 	rdlong	arg02, objptr
2e27c     04 4E 05 F1 | 	add	fp, #4
2e280     A7 14 62 FC | 	wrlong	arg02, fp
2e284     04 E4 05 F1 | 	add	objptr, #4
2e288     F2 14 02 FB | 	rdlong	arg02, objptr
2e28c     01 00 00 FF 
2e290     1C E4 85 F1 | 	sub	objptr, ##540
2e294     04 4E 05 F1 | 	add	fp, #4
2e298     A7 14 62 FC | 	wrlong	arg02, fp
2e29c     0C 4E 85 F1 | 	sub	fp, #12
2e2a0     A7 12 02 FB | 	rdlong	arg01, fp
2e2a4     04 4E 85 F1 | 	sub	fp, #4
2e2a8     59 12 62 FD | 	drvh	arg01
2e2ac     1F 20 64 FD | 	waitx	#16
2e2b0     A7 12 02 F6 | 	mov	arg01, fp
2e2b4     01 14 06 F6 | 	mov	arg02, #1
2e2b8     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1084
2e2bc     A7 F0 03 F6 | 	mov	ptra, fp
2e2c0     B2 00 A0 FD | 	call	#popregs_
2e2c4                 | _fatfs_cc_deselect_1094_ret
2e2c4     2D 00 64 FD | 	ret
2e2c8                 | 
2e2c8                 | _fatfs_cc_select_1098
2e2c8     00 4A 05 F6 | 	mov	COUNT_, #0
2e2cc     A8 00 A0 FD | 	call	#pushregs_
2e2d0     10 F0 07 F1 | 	add	ptra, #16
2e2d4     01 00 00 FF 
2e2d8     14 E4 05 F1 | 	add	objptr, ##532
2e2dc     F2 14 02 FB | 	rdlong	arg02, objptr
2e2e0     08 4E 05 F1 | 	add	fp, #8
2e2e4     A7 14 62 FC | 	wrlong	arg02, fp
2e2e8     08 E4 05 F1 | 	add	objptr, #8
2e2ec     F2 12 02 FB | 	rdlong	arg01, objptr
2e2f0     01 00 00 FF 
2e2f4     1C E4 85 F1 | 	sub	objptr, ##540
2e2f8     04 4E 05 F1 | 	add	fp, #4
2e2fc     A7 12 62 FC | 	wrlong	arg01, fp
2e300     50 12 62 FD | 	fltl	arg01
2e304     04 4E 85 F1 | 	sub	fp, #4
2e308     A7 12 02 FB | 	rdlong	arg01, fp
2e30c     58 12 62 FD | 	drvl	arg01
2e310     1F 20 64 FD | 	waitx	#16
2e314     04 4E 05 F1 | 	add	fp, #4
2e318     A7 12 02 FB | 	rdlong	arg01, fp
2e31c     41 12 62 FD | 	dirh	arg01
2e320     08 4E 85 F1 | 	sub	fp, #8
2e324     A7 12 02 F6 | 	mov	arg01, fp
2e328     04 4E 85 F1 | 	sub	fp, #4
2e32c     01 14 06 F6 | 	mov	arg02, #1
2e330     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1084
2e334     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1088
2e338     00 FA 0D F2 | 	cmp	result1, #0 wz
2e33c     01 FA 05 56 |  if_ne	mov	result1, #1
2e340     08 00 90 5D |  if_ne	jmp	#LR__4680
2e344     FC FE BF FD | 	call	#_fatfs_cc_deselect_1094
2e348                 | ' 
2e348                 | ' 	deselect();
2e348                 | ' 	return 0;
2e348     00 FA 05 F6 | 	mov	result1, #0
2e34c                 | LR__4680
2e34c     A7 F0 03 F6 | 	mov	ptra, fp
2e350     B2 00 A0 FD | 	call	#popregs_
2e354                 | _fatfs_cc_select_1098_ret
2e354     2D 00 64 FD | 	ret
2e358                 | 
2e358                 | _fatfs_cc_rcvr_datablock_1102
2e358     01 4A 05 F6 | 	mov	COUNT_, #1
2e35c     A8 00 A0 FD | 	call	#pushregs_
2e360     18 F0 07 F1 | 	add	ptra, #24
2e364     04 4E 05 F1 | 	add	fp, #4
2e368     A7 12 62 FC | 	wrlong	arg01, fp
2e36c     04 4E 05 F1 | 	add	fp, #4
2e370     A7 14 62 FC | 	wrlong	arg02, fp
2e374     1A FA 61 FD | 	getct	result1
2e378     08 4E 05 F1 | 	add	fp, #8
2e37c     A7 FA 61 FC | 	wrlong	result1, fp
2e380     14 1E 06 FB | 	rdlong	local01, #20
2e384     03 1E 46 F0 | 	shr	local01, #3
2e388     04 4E 05 F1 | 	add	fp, #4
2e38c     A7 1E 62 FC | 	wrlong	local01, fp
2e390     14 4E 85 F1 | 	sub	fp, #20
2e394                 | ' 	BYTE *buff,
2e394                 | ' 	UINT btr
2e394                 | ' )
2e394                 | ' {
2e394                 | ' 	BYTE d[2];
2e394                 | ' 	UINT tmr, tmout;
2e394                 | ' 
2e394                 | ' 	tmr = _cnt();
2e394                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
2e394                 | ' 	for(;;) {
2e394                 | LR__4690
2e394     0C 4E 05 F1 | 	add	fp, #12
2e398     A7 12 02 F6 | 	mov	arg01, fp
2e39c     0C 4E 85 F1 | 	sub	fp, #12
2e3a0     01 14 06 F6 | 	mov	arg02, #1
2e3a4     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1084
2e3a8     0C 4E 05 F1 | 	add	fp, #12
2e3ac     A7 1E C2 FA | 	rdbyte	local01, fp
2e3b0     0C 4E 85 F1 | 	sub	fp, #12
2e3b4     FF 1E 0E F2 | 	cmp	local01, #255 wz
2e3b8     28 00 90 5D |  if_ne	jmp	#LR__4691
2e3bc     1A FA 61 FD | 	getct	result1
2e3c0     FD 1E 02 F6 | 	mov	local01, result1
2e3c4     10 4E 05 F1 | 	add	fp, #16
2e3c8     A7 14 02 FB | 	rdlong	arg02, fp
2e3cc     0A 1F 82 F1 | 	sub	local01, arg02
2e3d0     04 4E 05 F1 | 	add	fp, #4
2e3d4     A7 14 02 FB | 	rdlong	arg02, fp
2e3d8     14 4E 85 F1 | 	sub	fp, #20
2e3dc     0A 1F 12 F2 | 	cmp	local01, arg02 wc
2e3e0     B0 FF 9F CD |  if_b	jmp	#LR__4690
2e3e4                 | LR__4691
2e3e4     0C 4E 05 F1 | 	add	fp, #12
2e3e8     A7 1E C2 FA | 	rdbyte	local01, fp
2e3ec     0C 4E 85 F1 | 	sub	fp, #12
2e3f0     FE 1E 0E F2 | 	cmp	local01, #254 wz
2e3f4     00 FA 05 56 |  if_ne	mov	result1, #0
2e3f8     30 00 90 5D |  if_ne	jmp	#LR__4692
2e3fc     04 4E 05 F1 | 	add	fp, #4
2e400     A7 12 02 FB | 	rdlong	arg01, fp
2e404     04 4E 05 F1 | 	add	fp, #4
2e408     A7 14 02 FB | 	rdlong	arg02, fp
2e40c     08 4E 85 F1 | 	sub	fp, #8
2e410     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1084
2e414     0C 4E 05 F1 | 	add	fp, #12
2e418     A7 12 02 F6 | 	mov	arg01, fp
2e41c     0C 4E 85 F1 | 	sub	fp, #12
2e420     02 14 06 F6 | 	mov	arg02, #2
2e424     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1084
2e428                 | ' 
2e428                 | ' 	rcvr_mmc(buff, btr);
2e428                 | ' 	rcvr_mmc(d, 2);
2e428                 | ' 
2e428                 | ' 	return 1;
2e428     01 FA 05 F6 | 	mov	result1, #1
2e42c                 | LR__4692
2e42c     A7 F0 03 F6 | 	mov	ptra, fp
2e430     B2 00 A0 FD | 	call	#popregs_
2e434                 | _fatfs_cc_rcvr_datablock_1102_ret
2e434     2D 00 64 FD | 	ret
2e438                 | 
2e438                 | _fatfs_cc_xmit_datablock_1104
2e438     00 4A 05 F6 | 	mov	COUNT_, #0
2e43c     A8 00 A0 FD | 	call	#pushregs_
2e440     10 F0 07 F1 | 	add	ptra, #16
2e444     04 4E 05 F1 | 	add	fp, #4
2e448     A7 12 62 FC | 	wrlong	arg01, fp
2e44c     04 4E 05 F1 | 	add	fp, #4
2e450     A7 14 42 FC | 	wrbyte	arg02, fp
2e454     08 4E 85 F1 | 	sub	fp, #8
2e458     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1088
2e45c     00 FA 0D F2 | 	cmp	result1, #0 wz
2e460     00 FA 05 A6 |  if_e	mov	result1, #0
2e464     90 00 90 AD |  if_e	jmp	#LR__4701
2e468     08 4E 05 F1 | 	add	fp, #8
2e46c     A7 14 C2 FA | 	rdbyte	arg02, fp
2e470     04 4E 05 F1 | 	add	fp, #4
2e474     A7 14 42 FC | 	wrbyte	arg02, fp
2e478     A7 12 02 F6 | 	mov	arg01, fp
2e47c     0C 4E 85 F1 | 	sub	fp, #12
2e480     01 14 06 F6 | 	mov	arg02, #1
2e484     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1077
2e488     08 4E 05 F1 | 	add	fp, #8
2e48c     A7 14 C2 FA | 	rdbyte	arg02, fp
2e490     08 4E 85 F1 | 	sub	fp, #8
2e494     FD 14 0E F2 | 	cmp	arg02, #253 wz
2e498     58 00 90 AD |  if_e	jmp	#LR__4700
2e49c     04 4E 05 F1 | 	add	fp, #4
2e4a0     A7 12 02 FB | 	rdlong	arg01, fp
2e4a4     04 4E 85 F1 | 	sub	fp, #4
2e4a8     09 14 C6 F9 | 	decod	arg02, #9
2e4ac     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1077
2e4b0     0C 4E 05 F1 | 	add	fp, #12
2e4b4     A7 12 02 F6 | 	mov	arg01, fp
2e4b8     0C 4E 85 F1 | 	sub	fp, #12
2e4bc     02 14 06 F6 | 	mov	arg02, #2
2e4c0     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1084
2e4c4     0C 4E 05 F1 | 	add	fp, #12
2e4c8     A7 12 02 F6 | 	mov	arg01, fp
2e4cc     0C 4E 85 F1 | 	sub	fp, #12
2e4d0     01 14 06 F6 | 	mov	arg02, #1
2e4d4     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1084
2e4d8     0C 4E 05 F1 | 	add	fp, #12
2e4dc     A7 14 C2 FA | 	rdbyte	arg02, fp
2e4e0     0C 4E 85 F1 | 	sub	fp, #12
2e4e4     1F 14 06 F5 | 	and	arg02, #31
2e4e8     05 14 0E F2 | 	cmp	arg02, #5 wz
2e4ec                 | ' 			return 0;
2e4ec     00 FA 05 56 |  if_ne	mov	result1, #0
2e4f0     04 00 90 5D |  if_ne	jmp	#LR__4701
2e4f4                 | LR__4700
2e4f4                 | ' 	}
2e4f4                 | ' 
2e4f4                 | ' 	return 1;
2e4f4     01 FA 05 F6 | 	mov	result1, #1
2e4f8                 | LR__4701
2e4f8     A7 F0 03 F6 | 	mov	ptra, fp
2e4fc     B2 00 A0 FD | 	call	#popregs_
2e500                 | _fatfs_cc_xmit_datablock_1104_ret
2e500     2D 00 64 FD | 	ret
2e504                 | 
2e504                 | _fatfs_cc_send_cmd_1108
2e504     01 4A 05 F6 | 	mov	COUNT_, #1
2e508     A8 00 A0 FD | 	call	#pushregs_
2e50c     1C F0 07 F1 | 	add	ptra, #28
2e510                 | _fatfs_cc_send_cmd_1108_enter
2e510     04 4E 05 F1 | 	add	fp, #4
2e514     A7 12 42 FC | 	wrbyte	arg01, fp
2e518     04 4E 05 F1 | 	add	fp, #4
2e51c     A7 14 62 FC | 	wrlong	arg02, fp
2e520     04 4E 85 F1 | 	sub	fp, #4
2e524     A7 FA C1 FA | 	rdbyte	result1, fp
2e528     04 4E 85 F1 | 	sub	fp, #4
2e52c     80 FA CD F7 | 	test	result1, #128 wz
2e530     44 00 90 AD |  if_e	jmp	#LR__4710
2e534     04 4E 05 F1 | 	add	fp, #4
2e538     A7 14 C2 FA | 	rdbyte	arg02, fp
2e53c     7F 14 06 F5 | 	and	arg02, #127
2e540     A7 14 42 FC | 	wrbyte	arg02, fp
2e544     04 4E 85 F1 | 	sub	fp, #4
2e548     37 12 06 F6 | 	mov	arg01, #55
2e54c     00 14 06 F6 | 	mov	arg02, #0
2e550     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1108
2e554     0C 4E 05 F1 | 	add	fp, #12
2e558     A7 FA 41 FC | 	wrbyte	result1, fp
2e55c     A7 14 C2 FA | 	rdbyte	arg02, fp
2e560     0C 4E 85 F1 | 	sub	fp, #12
2e564     02 14 16 F2 | 	cmp	arg02, #2 wc
2e568     0C 4E 05 31 |  if_ae	add	fp, #12
2e56c     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
2e570     0C 4E 85 31 |  if_ae	sub	fp, #12
2e574     6C 01 90 3D |  if_ae	jmp	#LR__4714
2e578                 | LR__4710
2e578     04 4E 05 F1 | 	add	fp, #4
2e57c     A7 14 C2 FA | 	rdbyte	arg02, fp
2e580     04 4E 85 F1 | 	sub	fp, #4
2e584     0C 14 0E F2 | 	cmp	arg02, #12 wz
2e588     14 00 90 AD |  if_e	jmp	#LR__4711
2e58c     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1094
2e590     34 FD BF FD | 	call	#_fatfs_cc_select_1098
2e594     00 FA 0D F2 | 	cmp	result1, #0 wz
2e598     FF FA 05 A6 |  if_e	mov	result1, #255
2e59c     44 01 90 AD |  if_e	jmp	#LR__4714
2e5a0                 | LR__4711
2e5a0     04 4E 05 F1 | 	add	fp, #4
2e5a4     A7 14 C2 FA | 	rdbyte	arg02, fp
2e5a8     40 FA 05 F6 | 	mov	result1, #64
2e5ac     0A FB 41 F5 | 	or	result1, arg02
2e5b0     10 4E 05 F1 | 	add	fp, #16
2e5b4     A7 FA 41 FC | 	wrbyte	result1, fp
2e5b8     0C 4E 85 F1 | 	sub	fp, #12
2e5bc     A7 FA 01 FB | 	rdlong	result1, fp
2e5c0     18 FA 45 F0 | 	shr	result1, #24
2e5c4     0D 4E 05 F1 | 	add	fp, #13
2e5c8     A7 FA 41 FC | 	wrbyte	result1, fp
2e5cc     0D 4E 85 F1 | 	sub	fp, #13
2e5d0     A7 FA 01 FB | 	rdlong	result1, fp
2e5d4     10 FA 45 F0 | 	shr	result1, #16
2e5d8     0E 4E 05 F1 | 	add	fp, #14
2e5dc     A7 FA 41 FC | 	wrbyte	result1, fp
2e5e0     0E 4E 85 F1 | 	sub	fp, #14
2e5e4     A7 FA 01 FB | 	rdlong	result1, fp
2e5e8     08 FA 45 F0 | 	shr	result1, #8
2e5ec     0F 4E 05 F1 | 	add	fp, #15
2e5f0     A7 FA 41 FC | 	wrbyte	result1, fp
2e5f4     0F 4E 85 F1 | 	sub	fp, #15
2e5f8     A7 FA 01 FB | 	rdlong	result1, fp
2e5fc     10 4E 05 F1 | 	add	fp, #16
2e600     A7 FA 41 FC | 	wrbyte	result1, fp
2e604     0C 4E 85 F1 | 	sub	fp, #12
2e608     A7 02 48 FC | 	wrbyte	#1, fp
2e60c     08 4E 85 F1 | 	sub	fp, #8
2e610     A7 FA C9 FA | 	rdbyte	result1, fp wz
2e614     04 4E 85 F1 | 	sub	fp, #4
2e618     0C 4E 05 A1 |  if_e	add	fp, #12
2e61c     A7 2A 49 AC |  if_e	wrbyte	#149, fp
2e620     0C 4E 85 A1 |  if_e	sub	fp, #12
2e624     04 4E 05 F1 | 	add	fp, #4
2e628     A7 FA C1 FA | 	rdbyte	result1, fp
2e62c     04 4E 85 F1 | 	sub	fp, #4
2e630     08 FA 0D F2 | 	cmp	result1, #8 wz
2e634     0C 4E 05 A1 |  if_e	add	fp, #12
2e638     A7 0E 49 AC |  if_e	wrbyte	#135, fp
2e63c     0C 4E 85 A1 |  if_e	sub	fp, #12
2e640     0C 4E 05 F1 | 	add	fp, #12
2e644     A7 14 C2 FA | 	rdbyte	arg02, fp
2e648     0D 4E 05 F1 | 	add	fp, #13
2e64c     A7 14 42 FC | 	wrbyte	arg02, fp
2e650     05 4E 85 F1 | 	sub	fp, #5
2e654     A7 12 02 F6 | 	mov	arg01, fp
2e658     14 4E 85 F1 | 	sub	fp, #20
2e65c     06 14 06 F6 | 	mov	arg02, #6
2e660     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1077
2e664     04 4E 05 F1 | 	add	fp, #4
2e668     A7 1E C2 FA | 	rdbyte	local01, fp
2e66c     04 4E 85 F1 | 	sub	fp, #4
2e670     0C 1E 0E F2 | 	cmp	local01, #12 wz
2e674     10 4E 05 A1 |  if_e	add	fp, #16
2e678     A7 12 02 A6 |  if_e	mov	arg01, fp
2e67c     10 4E 85 A1 |  if_e	sub	fp, #16
2e680     01 14 06 A6 |  if_e	mov	arg02, #1
2e684     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1084
2e688     0C 4E 05 F1 | 	add	fp, #12
2e68c     A7 14 48 FC | 	wrbyte	#10, fp
2e690     0C 4E 85 F1 | 	sub	fp, #12
2e694                 | ' 	n = 10;
2e694                 | ' 	do
2e694                 | LR__4712
2e694     10 4E 05 F1 | 	add	fp, #16
2e698     A7 12 02 F6 | 	mov	arg01, fp
2e69c     10 4E 85 F1 | 	sub	fp, #16
2e6a0     01 14 06 F6 | 	mov	arg02, #1
2e6a4     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1084
2e6a8     10 4E 05 F1 | 	add	fp, #16
2e6ac     A7 1E C2 FA | 	rdbyte	local01, fp
2e6b0     10 4E 85 F1 | 	sub	fp, #16
2e6b4     80 1E CE F7 | 	test	local01, #128 wz
2e6b8     1C 00 90 AD |  if_e	jmp	#LR__4713
2e6bc     0C 4E 05 F1 | 	add	fp, #12
2e6c0     A7 1E C2 FA | 	rdbyte	local01, fp
2e6c4     01 1E 86 F1 | 	sub	local01, #1
2e6c8     A7 1E 42 FC | 	wrbyte	local01, fp
2e6cc     A7 1E CA FA | 	rdbyte	local01, fp wz
2e6d0     0C 4E 85 F1 | 	sub	fp, #12
2e6d4     BC FF 9F 5D |  if_ne	jmp	#LR__4712
2e6d8                 | LR__4713
2e6d8                 | ' 
2e6d8                 | ' 	return d;
2e6d8     10 4E 05 F1 | 	add	fp, #16
2e6dc     A7 FA C1 FA | 	rdbyte	result1, fp
2e6e0     10 4E 85 F1 | 	sub	fp, #16
2e6e4                 | LR__4714
2e6e4     A7 F0 03 F6 | 	mov	ptra, fp
2e6e8     B2 00 A0 FD | 	call	#popregs_
2e6ec                 | _fatfs_cc_send_cmd_1108_ret
2e6ec     2D 00 64 FD | 	ret
2e6f0                 | 
2e6f0                 | _fatfs_cc_disk_deinitialize
2e6f0     03 4A 05 F6 | 	mov	COUNT_, #3
2e6f4     A8 00 A0 FD | 	call	#pushregs_
2e6f8     00 12 4E F2 | 	cmps	arg01, #0 wz
2e6fc     01 00 00 FF 
2e700     14 E4 05 F1 | 	add	objptr, ##532
2e704     F2 12 02 FB | 	rdlong	arg01, objptr
2e708     04 E4 85 F1 | 	sub	objptr, #4
2e70c     F2 1E 02 FB | 	rdlong	local01, objptr
2e710     08 E4 05 F1 | 	add	objptr, #8
2e714     F2 20 02 FB | 	rdlong	local02, objptr
2e718     04 E4 05 F1 | 	add	objptr, #4
2e71c     F2 22 02 FB | 	rdlong	local03, objptr
2e720     01 00 00 FF 
2e724     1C E4 85 F1 | 	sub	objptr, ##540
2e728                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2e728                 | '         return RES_NOTRDY;
2e728     03 FA 05 56 |  if_ne	mov	result1, #3
2e72c     2C 00 90 5D |  if_ne	jmp	#LR__4720
2e730     50 12 62 FD | 	fltl	arg01
2e734     09 01 08 FC | 	wrpin	#0, arg01
2e738     50 1E 62 FD | 	fltl	local01
2e73c     0F 01 08 FC | 	wrpin	#0, local01
2e740     50 20 62 FD | 	fltl	local02
2e744     10 01 08 FC | 	wrpin	#0, local02
2e748     50 22 62 FD | 	fltl	local03
2e74c     11 01 08 FC | 	wrpin	#0, local03
2e750     0A 12 06 F6 | 	mov	arg01, #10
2e754     98 13 BF FD | 	call	#__system___waitms
2e758                 | '     }
2e758                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2e758                 | '     _pinclear(PIN_SS);
2e758                 | '     _pinclear(PIN_CLK);
2e758                 | '     _pinclear(PIN_DI);
2e758                 | '     _pinclear(PIN_DO);
2e758                 | ' 
2e758                 | '     _waitms(10);
2e758                 | ' 
2e758                 | '     return 0;
2e758     00 FA 05 F6 | 	mov	result1, #0
2e75c                 | LR__4720
2e75c     A7 F0 03 F6 | 	mov	ptra, fp
2e760     B2 00 A0 FD | 	call	#popregs_
2e764                 | _fatfs_cc_disk_deinitialize_ret
2e764     2D 00 64 FD | 	ret
2e768                 | 
2e768                 | _fatfs_cc_gettimeofday
2e768     04 4A 05 F6 | 	mov	COUNT_, #4
2e76c     A8 00 A0 FD | 	call	#pushregs_
2e770     09 1F 02 F6 | 	mov	local01, arg01
2e774     54 0F BF FD | 	call	#__system___getus
2e778     FD 12 02 F6 | 	mov	arg01, result1
2e77c     02 00 00 FF 
2e780     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
2e784     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
2e788     09 FB 01 F6 | 	mov	result1, arg01
2e78c     10 FB 81 F1 | 	sub	result1, local02
2e790     A1 07 00 FF 
2e794     40 FA 15 FD | 	qdiv	result1, ##1000000
2e798     02 00 00 FF 
2e79c     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2e7a0     18 20 62 FD | 	getqx	local02
2e7a4     A1 07 00 FF 
2e7a8     40 FA 15 FD | 	qdiv	result1, ##1000000
2e7ac     00 20 0E F2 | 	cmp	local02, #0 wz
2e7b0     19 22 62 FD | 	getqy	local03
2e7b4     28 00 90 AD |  if_e	jmp	#LR__4730
2e7b8     02 00 00 FF 
2e7bc     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2e7c0     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2e7c4     10 25 02 F1 | 	add	local04, local02
2e7c8     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
2e7cc     11 13 82 F1 | 	sub	arg01, local03
2e7d0     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
2e7d4     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
2e7d8     02 00 00 FF 
2e7dc     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2e7e0                 | LR__4730
2e7e0     02 00 00 FF 
2e7e4     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2e7e8     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2e7ec     02 00 00 FF 
2e7f0     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
2e7f4     0F 25 62 FC | 	wrlong	local04, local01
2e7f8     04 1E 06 F1 | 	add	local01, #4
2e7fc     0F 23 62 FC | 	wrlong	local03, local01
2e800                 | '         lastsec += secs;
2e800                 | '         lastus = now - leftover;
2e800                 | '     }
2e800                 | '     tv->tv_sec = lastsec;
2e800                 | '     tv->tv_usec = leftover;
2e800                 | '     return 0;
2e800     00 FA 05 F6 | 	mov	result1, #0
2e804     A7 F0 03 F6 | 	mov	ptra, fp
2e808     B2 00 A0 FD | 	call	#popregs_
2e80c                 | _fatfs_cc_gettimeofday_ret
2e80c     2D 00 64 FD | 	ret
2e810                 | 
2e810                 | _fatfs_cc__is_leap_year
2e810     09 FB 51 F6 | 	abs	result1, arg01 wc
2e814     03 FA 05 F5 | 	and	result1, #3
2e818     FD FA 89 F6 | 	negc	result1, result1 wz
2e81c     38 00 90 5D |  if_ne	jmp	#LR__4741
2e820     09 FB 51 F6 | 	abs	result1, arg01 wc
2e824     64 FA 15 FD | 	qdiv	result1, #100
2e828     19 FA 61 FD | 	getqy	result1
2e82c     FD FA 89 F6 | 	negc	result1, result1 wz
2e830     1C 00 90 5D |  if_ne	jmp	#LR__4740
2e834     09 FB 51 F6 | 	abs	result1, arg01 wc
2e838     90 FB 15 FD | 	qdiv	result1, #400
2e83c                 | '       return (0 == y % 400);
2e83c     00 FA 05 F6 | 	mov	result1, #0
2e840     19 00 62 FD | 	getqy	_var01
2e844     00 01 8A F6 | 	negc	_var01, _var01 wz
2e848     01 FA 05 A6 |  if_e	mov	result1, #1
2e84c     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2e850                 | LR__4740
2e850                 | '     return 1;
2e850     01 FA 05 F6 | 	mov	result1, #1
2e854     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2e858                 | LR__4741
2e858                 | '   }
2e858                 | '   return 0;
2e858     00 FA 05 F6 | 	mov	result1, #0
2e85c                 | _fatfs_cc__is_leap_year_ret
2e85c     2D 00 64 FD | 	ret
2e860                 | 
2e860                 | _fatfs_cc___tzoffset
2e860     09 01 0A F6 | 	mov	_var01, arg01 wz
2e864     FF FF FF FF 
2e868     0A FF 6B FC | 	wrlong	##-1, arg02
2e86c     01 02 06 F6 | 	mov	_var02, #1
2e870     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
2e874                 | '                 return 0;
2e874     00 FA 05 A6 |  if_e	mov	result1, #0
2e878     94 02 90 AD |  if_e	jmp	#LR__4767
2e87c     0A 01 68 FC | 	wrlong	#0, arg02
2e880     02 00 00 FF 
2e884     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2e888     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2e88c                 | ' 
2e88c                 | '        *hasdst = 0;
2e88c                 | ' 
2e88c                 | ' 	n = stdname;
2e88c                 | '         while (*s && isalpha(*s)) {
2e88c     02 00 00 FF 
2e890     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2e894     97 28 48 FB | 	callpa	#(@LR__4751-@LR__4750)>>2,fcache_load_ptr_
2e898                 | LR__4750
2e898     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2e89c     48 00 90 AD |  if_e	jmp	#LR__4752
2e8a0     00 13 C2 FA | 	rdbyte	arg01, _var01
2e8a4                 | ' {
2e8a4                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2e8a4     80 12 36 F3 | 	fle	arg01, #128 wc
2e8a8                 | '     return __ctype[c];
2e8a8     02 00 00 FF 
2e8ac     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2e8b0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2e8b4     09 FB C1 FA | 	rdbyte	result1, arg01
2e8b8     02 00 00 FF 
2e8bc     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2e8c0     0C FA CD F7 | 	test	result1, #12 wz
2e8c4     20 00 90 AD |  if_e	jmp	#LR__4752
2e8c8     00 09 02 F6 | 	mov	_var05, _var01
2e8cc     00 0B 02 F6 | 	mov	_var06, _var01
2e8d0     01 0A 06 F1 | 	add	_var06, #1
2e8d4     04 0D C2 FA | 	rdbyte	_var07, _var05
2e8d8     05 01 02 F6 | 	mov	_var01, _var06
2e8dc     03 0D 42 FC | 	wrbyte	_var07, _var04
2e8e0     01 06 06 F1 | 	add	_var04, #1
2e8e4     B0 FF 9F FD | 	jmp	#LR__4750
2e8e8                 | LR__4751
2e8e8                 | LR__4752
2e8e8     03 01 48 FC | 	wrbyte	#0, _var04
2e8ec     00 0E 06 F6 | 	mov	_var08, #0
2e8f0     00 05 C2 FA | 	rdbyte	_var03, _var01
2e8f4     2D 04 0E F2 | 	cmp	_var03, #45 wz
2e8f8     01 02 66 A6 |  if_e	neg	_var02, #1
2e8fc     01 00 06 A1 |  if_e	add	_var01, #1
2e900     97 28 48 FB | 	callpa	#(@LR__4754-@LR__4753)>>2,fcache_load_ptr_
2e904                 | '                 sgn = -1;
2e904                 | '                 s++;
2e904                 | '         }
2e904                 | '         while (isdigit(*s)) {
2e904                 | LR__4753
2e904     00 13 C2 FA | 	rdbyte	arg01, _var01
2e908                 | ' {
2e908                 | '   return  (__ctype_get(c) & 0x02 ) ;
2e908     80 12 36 F3 | 	fle	arg01, #128 wc
2e90c                 | '     return __ctype[c];
2e90c     02 00 00 FF 
2e910     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2e914     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2e918     09 FB C1 FA | 	rdbyte	result1, arg01
2e91c     02 00 00 FF 
2e920     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2e924     02 FA CD F7 | 	test	result1, #2 wz
2e928     28 00 90 AD |  if_e	jmp	#LR__4755
2e92c     07 05 02 F6 | 	mov	_var03, _var08
2e930     02 04 66 F0 | 	shl	_var03, #2
2e934     07 05 02 F1 | 	add	_var03, _var08
2e938     01 04 66 F0 | 	shl	_var03, #1
2e93c     00 09 C2 FA | 	rdbyte	_var05, _var01
2e940     30 08 86 F1 | 	sub	_var05, #48
2e944     04 05 02 F1 | 	add	_var03, _var05
2e948     02 0F 02 F6 | 	mov	_var08, _var03
2e94c     01 00 06 F1 | 	add	_var01, #1
2e950     B0 FF 9F FD | 	jmp	#LR__4753
2e954                 | LR__4754
2e954                 | LR__4755
2e954     07 00 00 FF 
2e958     10 0E 06 FD | 	qmul	_var08, ##3600
2e95c     00 05 C2 FA | 	rdbyte	_var03, _var01
2e960     3A 04 0E F2 | 	cmp	_var03, #58 wz
2e964     18 10 62 FD | 	getqx	_var09
2e968     70 00 90 5D |  if_ne	jmp	#LR__4759
2e96c     00 0E 06 F6 | 	mov	_var08, #0
2e970     01 00 06 F1 | 	add	_var01, #1
2e974     97 28 48 FB | 	callpa	#(@LR__4757-@LR__4756)>>2,fcache_load_ptr_
2e978                 | '                 x = 0;
2e978                 | '                 s++;
2e978                 | '                 while (isdigit(*s)) {
2e978                 | LR__4756
2e978     00 13 C2 FA | 	rdbyte	arg01, _var01
2e97c                 | ' {
2e97c                 | '   return  (__ctype_get(c) & 0x02 ) ;
2e97c     80 12 36 F3 | 	fle	arg01, #128 wc
2e980                 | '     return __ctype[c];
2e980     02 00 00 FF 
2e984     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2e988     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2e98c     09 FB C1 FA | 	rdbyte	result1, arg01
2e990     02 00 00 FF 
2e994     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2e998     02 FA CD F7 | 	test	result1, #2 wz
2e99c     28 00 90 AD |  if_e	jmp	#LR__4758
2e9a0     07 05 02 F6 | 	mov	_var03, _var08
2e9a4     02 04 66 F0 | 	shl	_var03, #2
2e9a8     07 05 02 F1 | 	add	_var03, _var08
2e9ac     01 04 66 F0 | 	shl	_var03, #1
2e9b0     00 09 C2 FA | 	rdbyte	_var05, _var01
2e9b4     30 08 86 F1 | 	sub	_var05, #48
2e9b8     04 05 02 F1 | 	add	_var03, _var05
2e9bc     02 0F 02 F6 | 	mov	_var08, _var03
2e9c0     01 00 06 F1 | 	add	_var01, #1
2e9c4     B0 FF 9F FD | 	jmp	#LR__4756
2e9c8                 | LR__4757
2e9c8                 | LR__4758
2e9c8     07 0D 02 F6 | 	mov	_var07, _var08
2e9cc     04 0C 66 F0 | 	shl	_var07, #4
2e9d0     07 0D 82 F1 | 	sub	_var07, _var08
2e9d4     02 0C 66 F0 | 	shl	_var07, #2
2e9d8     06 11 02 F1 | 	add	_var09, _var07
2e9dc                 | LR__4759
2e9dc     02 00 00 FF 
2e9e0     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2e9e4     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2e9e8     00 13 C2 FA | 	rdbyte	arg01, _var01
2e9ec                 | ' {
2e9ec                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2e9ec     80 12 36 F3 | 	fle	arg01, #128 wc
2e9f0                 | '     return __ctype[c];
2e9f0     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
2e9f4     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2e9f8     09 FB C1 FA | 	rdbyte	result1, arg01
2e9fc     02 00 00 FF 
2ea00     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2ea04     0C FA CD F7 | 	test	result1, #12 wz
2ea08     50 00 90 AD |  if_e	jmp	#LR__4762
2ea0c     0A 03 68 FC | 	wrlong	#1, arg02
2ea10                 | '                 *hasdst = 1;
2ea10                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
2ea10                 | LR__4760
2ea10     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2ea14     44 00 90 AD |  if_e	jmp	#LR__4761
2ea18     00 13 C2 FA | 	rdbyte	arg01, _var01
2ea1c                 | ' {
2ea1c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2ea1c     80 12 36 F3 | 	fle	arg01, #128 wc
2ea20                 | '     return __ctype[c];
2ea20     02 00 00 FF 
2ea24     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2ea28     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2ea2c     09 FB C1 FA | 	rdbyte	result1, arg01
2ea30     02 00 00 FF 
2ea34     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2ea38     0C FA CD F7 | 	test	result1, #12 wz
2ea3c     1C 00 90 AD |  if_e	jmp	#LR__4761
2ea40     00 0B 02 F6 | 	mov	_var06, _var01
2ea44     01 0A 06 F1 | 	add	_var06, #1
2ea48     00 0D C2 FA | 	rdbyte	_var07, _var01
2ea4c     05 01 02 F6 | 	mov	_var01, _var06
2ea50     03 0D 42 FC | 	wrbyte	_var07, _var04
2ea54     01 06 06 F1 | 	add	_var04, #1
2ea58     B4 FF 9F FD | 	jmp	#LR__4760
2ea5c                 | LR__4761
2ea5c                 | LR__4762
2ea5c     03 01 48 FC | 	wrbyte	#0, _var04
2ea60     02 00 00 FF 
2ea64     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2ea68     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2ea6c     02 00 00 FF 
2ea70     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2ea74     20 00 90 AD |  if_e	jmp	#LR__4763
2ea78     02 00 00 FF 
2ea7c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2ea80     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2ea84     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
2ea88     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2ea8c     02 00 00 FF 
2ea90     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2ea94     1C 00 90 FD | 	jmp	#LR__4764
2ea98                 | LR__4763
2ea98     02 00 00 FF 
2ea9c     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
2eaa0     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2eaa4     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
2eaa8     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2eaac     02 00 00 FF 
2eab0     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2eab4                 | LR__4764
2eab4     02 00 00 FF 
2eab8     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2eabc     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2eac0     02 00 00 FF 
2eac4     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
2eac8     20 00 90 AD |  if_e	jmp	#LR__4765
2eacc     02 00 00 FF 
2ead0     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2ead4     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2ead8     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
2eadc     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2eae0     02 00 00 FF 
2eae4     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2eae8     1C 00 90 FD | 	jmp	#LR__4766
2eaec                 | LR__4765
2eaec     02 00 00 FF 
2eaf0     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2eaf4     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2eaf8     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
2eafc     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2eb00     02 00 00 FF 
2eb04     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2eb08                 | LR__4766
2eb08     08 03 02 FD | 	qmul	_var02, _var09
2eb0c                 | ' 		_tzname[1] = stdname;
2eb0c                 | ' 
2eb0c                 | '         return sgn * off;
2eb0c     18 FA 61 FD | 	getqx	result1
2eb10                 | LR__4767
2eb10                 | _fatfs_cc___tzoffset_ret
2eb10     2D 00 64 FD | 	ret
2eb14                 | 
2eb14                 | _fatfs_cc___indst
2eb14     10 12 06 F1 | 	add	arg01, #16
2eb18     09 01 02 FB | 	rdlong	_var01, arg01
2eb1c     10 12 86 F1 | 	sub	arg01, #16
2eb20     02 00 0E F2 | 	cmp	_var01, #2 wz
2eb24     30 00 90 5D |  if_ne	jmp	#LR__4770
2eb28     07 00 06 F6 | 	mov	_var01, #7
2eb2c     18 12 06 F1 | 	add	arg01, #24
2eb30     09 03 02 FB | 	rdlong	_var02, arg01
2eb34     01 01 02 F1 | 	add	_var01, _var02
2eb38     0C 12 86 F1 | 	sub	arg01, #12
2eb3c     09 05 02 FB | 	rdlong	_var03, arg01
2eb40     02 01 82 F1 | 	sub	_var01, _var03
2eb44     00 00 56 F2 | 	cmps	_var01, #0 wc
2eb48                 | '                         return 1;
2eb48     01 FA 05 C6 |  if_b	mov	result1, #1
2eb4c     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2eb50                 | '                 return 0;
2eb50     00 FA 05 F6 | 	mov	result1, #0
2eb54     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2eb58                 | LR__4770
2eb58     10 12 06 F1 | 	add	arg01, #16
2eb5c     09 01 02 FB | 	rdlong	_var01, arg01
2eb60     10 12 86 F1 | 	sub	arg01, #16
2eb64     0A 00 0E F2 | 	cmp	_var01, #10 wz
2eb68     28 00 90 5D |  if_ne	jmp	#LR__4771
2eb6c     18 12 06 F1 | 	add	arg01, #24
2eb70     09 01 02 FB | 	rdlong	_var01, arg01
2eb74     0C 12 86 F1 | 	sub	arg01, #12
2eb78     09 07 02 FB | 	rdlong	_var04, arg01
2eb7c     03 01 82 F1 | 	sub	_var01, _var04
2eb80     00 00 56 F2 | 	cmps	_var01, #0 wc
2eb84                 | '                         return 0;
2eb84     00 FA 05 C6 |  if_b	mov	result1, #0
2eb88     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2eb8c                 | '                 return 1;
2eb8c     01 FA 05 F6 | 	mov	result1, #1
2eb90     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2eb94                 | LR__4771
2eb94                 | '         }
2eb94                 | ' 
2eb94                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
2eb94     00 00 06 F6 | 	mov	_var01, #0
2eb98     10 12 06 F1 | 	add	arg01, #16
2eb9c     09 03 02 FB | 	rdlong	_var02, arg01
2eba0     10 12 86 F1 | 	sub	arg01, #16
2eba4     03 02 56 F2 | 	cmps	_var02, #3 wc
2eba8     10 00 90 CD |  if_b	jmp	#LR__4772
2ebac     10 12 06 F1 | 	add	arg01, #16
2ebb0     09 05 02 FB | 	rdlong	_var03, arg01
2ebb4     0A 04 56 F2 | 	cmps	_var03, #10 wc
2ebb8     01 00 06 C6 |  if_b	mov	_var01, #1
2ebbc                 | LR__4772
2ebbc     00 FB 01 F6 | 	mov	result1, _var01
2ebc0                 | _fatfs_cc___indst_ret
2ebc0     2D 00 64 FD | 	ret
2ebc4                 | 
2ebc4                 | ' 	
2ebc4                 | ' 	FUNCTION pfunc(c as integer) as integer
2ebc4                 | ___strs_cl_pfunc
2ebc4                 | ' 		if (i < 16) then
2ebc4     04 E4 05 F1 | 	add	objptr, #4
2ebc8     F2 FA 01 FB | 	rdlong	result1, objptr
2ebcc     04 E4 85 F1 | 	sub	objptr, #4
2ebd0     10 FA 55 F2 | 	cmps	result1, #16 wc
2ebd4     2C 00 90 3D |  if_ae	jmp	#LR__4780
2ebd8     F2 FA 01 FB | 	rdlong	result1, objptr
2ebdc     04 E4 05 F1 | 	add	objptr, #4
2ebe0     F2 00 02 FB | 	rdlong	_var01, objptr
2ebe4     FD 00 02 F1 | 	add	_var01, result1
2ebe8     00 13 42 FC | 	wrbyte	arg01, _var01
2ebec     F2 FA 01 FB | 	rdlong	result1, objptr
2ebf0     01 FA 05 F1 | 	add	result1, #1
2ebf4     F2 FA 61 FC | 	wrlong	result1, objptr
2ebf8     04 E4 85 F1 | 	sub	objptr, #4
2ebfc                 | ' 			p(i) = c
2ebfc                 | ' 			i = i+1
2ebfc                 | ' 			return 1
2ebfc     01 FA 05 F6 | 	mov	result1, #1
2ec00     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
2ec04                 | LR__4780
2ec04                 | ' 			return -1
2ec04     01 FA 65 F6 | 	neg	result1, #1
2ec08                 | ___strs_cl_pfunc_ret
2ec08     2D 00 64 FD | 	ret
2ec0c                 | 
2ec0c                 | __struct__s_vfs_file_t_putchar
2ec0c     04 4A 05 F6 | 	mov	COUNT_, #4
2ec10     A8 00 A0 FD | 	call	#pushregs_
2ec14     1C E4 05 F1 | 	add	objptr, #28
2ec18     F2 1E 0A FB | 	rdlong	local01, objptr wz
2ec1c     1C E4 85 F1 | 	sub	objptr, #28
2ec20     00 FA 05 A6 |  if_e	mov	result1, #0
2ec24     48 00 90 AD |  if_e	jmp	#LR__4790
2ec28     1C E4 05 F1 | 	add	objptr, #28
2ec2c     F2 20 02 FB | 	rdlong	local02, objptr
2ec30     10 23 02 F6 | 	mov	local03, local02
2ec34     1C E4 85 F1 | 	sub	objptr, #28
2ec38     13 22 46 F7 | 	zerox	local03, #19
2ec3c     14 20 46 F0 | 	shr	local02, #20
2ec40     02 20 66 F0 | 	shl	local02, #2
2ec44     ED 20 02 F1 | 	add	local02, __methods__
2ec48     10 21 02 FB | 	rdlong	local02, local02
2ec4c     F2 14 02 F6 | 	mov	arg02, objptr
2ec50     F2 24 02 F6 | 	mov	local04, objptr
2ec54     11 E5 01 F6 | 	mov	objptr, local03
2ec58     2D 20 62 FD | 	call	local02
2ec5c     12 E5 01 F6 | 	mov	objptr, local04
2ec60                 | '     return (i < 0) ? 0 : 1;
2ec60     00 FA 55 F2 | 	cmps	result1, #0 wc
2ec64     00 1E 06 C6 |  if_b	mov	local01, #0
2ec68     01 1E 06 36 |  if_ae	mov	local01, #1
2ec6c     0F FB 01 F6 | 	mov	result1, local01
2ec70                 | LR__4790
2ec70     A7 F0 03 F6 | 	mov	ptra, fp
2ec74     B2 00 A0 FD | 	call	#popregs_
2ec78                 | __struct__s_vfs_file_t_putchar_ret
2ec78     2D 00 64 FD | 	ret
2ec7c                 | 
2ec7c                 | __struct__s_vfs_file_t_getchar
2ec7c     03 4A 05 F6 | 	mov	COUNT_, #3
2ec80     A8 00 A0 FD | 	call	#pushregs_
2ec84     20 E4 05 F1 | 	add	objptr, #32
2ec88     F2 12 0A FB | 	rdlong	arg01, objptr wz
2ec8c     20 E4 85 F1 | 	sub	objptr, #32
2ec90     01 FA 65 A6 |  if_e	neg	result1, #1
2ec94     38 00 90 AD |  if_e	jmp	#LR__4800
2ec98                 | '     return getcf(__this);
2ec98     20 E4 05 F1 | 	add	objptr, #32
2ec9c     F2 1E 02 FB | 	rdlong	local01, objptr
2eca0     0F 21 02 F6 | 	mov	local02, local01
2eca4     20 E4 85 F1 | 	sub	objptr, #32
2eca8     13 20 46 F7 | 	zerox	local02, #19
2ecac     14 1E 46 F0 | 	shr	local01, #20
2ecb0     02 1E 66 F0 | 	shl	local01, #2
2ecb4     ED 1E 02 F1 | 	add	local01, __methods__
2ecb8     0F 1F 02 FB | 	rdlong	local01, local01
2ecbc     F2 12 02 F6 | 	mov	arg01, objptr
2ecc0     F2 22 02 F6 | 	mov	local03, objptr
2ecc4     10 E5 01 F6 | 	mov	objptr, local02
2ecc8     2D 1E 62 FD | 	call	local01
2eccc     11 E5 01 F6 | 	mov	objptr, local03
2ecd0                 | LR__4800
2ecd0     A7 F0 03 F6 | 	mov	ptra, fp
2ecd4     B2 00 A0 FD | 	call	#popregs_
2ecd8                 | __struct__s_vfs_file_t_getchar_ret
2ecd8     2D 00 64 FD | 	ret
2ecdc                 | 
2ecdc                 | __struct___bas_wrap_sender_tx
2ecdc     03 4A 05 F6 | 	mov	COUNT_, #3
2ece0     A8 00 A0 FD | 	call	#pushregs_
2ece4     F2 1E 02 FB | 	rdlong	local01, objptr
2ece8     0F 21 02 F6 | 	mov	local02, local01
2ecec     13 1E 46 F7 | 	zerox	local01, #19
2ecf0     14 20 46 F0 | 	shr	local02, #20
2ecf4     02 20 66 F0 | 	shl	local02, #2
2ecf8     ED 20 02 F1 | 	add	local02, __methods__
2ecfc     10 21 02 FB | 	rdlong	local02, local02
2ed00     F2 22 02 F6 | 	mov	local03, objptr
2ed04     0F E5 01 F6 | 	mov	objptr, local01
2ed08     2D 20 62 FD | 	call	local02
2ed0c     11 E5 01 F6 | 	mov	objptr, local03
2ed10     01 FA 05 F6 | 	mov	result1, #1
2ed14     A7 F0 03 F6 | 	mov	ptra, fp
2ed18     B2 00 A0 FD | 	call	#popregs_
2ed1c                 | __struct___bas_wrap_sender_tx_ret
2ed1c     2D 00 64 FD | 	ret
2ed20                 | 
2ed20                 | __struct___bas_wrap_sender_rx
2ed20     03 4A 05 F6 | 	mov	COUNT_, #3
2ed24     A8 00 A0 FD | 	call	#pushregs_
2ed28     04 E4 05 F1 | 	add	objptr, #4
2ed2c     F2 1E 02 FB | 	rdlong	local01, objptr
2ed30     0F 21 02 F6 | 	mov	local02, local01
2ed34     04 E4 85 F1 | 	sub	objptr, #4
2ed38     13 20 46 F7 | 	zerox	local02, #19
2ed3c     14 1E 46 F0 | 	shr	local01, #20
2ed40     02 1E 66 F0 | 	shl	local01, #2
2ed44     ED 1E 02 F1 | 	add	local01, __methods__
2ed48     0F 1F 02 FB | 	rdlong	local01, local01
2ed4c     F2 22 02 F6 | 	mov	local03, objptr
2ed50     10 E5 01 F6 | 	mov	objptr, local02
2ed54     2D 1E 62 FD | 	call	local01
2ed58     11 E5 01 F6 | 	mov	objptr, local03
2ed5c     A7 F0 03 F6 | 	mov	ptra, fp
2ed60     B2 00 A0 FD | 	call	#popregs_
2ed64                 | __struct___bas_wrap_sender_rx_ret
2ed64     2D 00 64 FD | 	ret
2ed68                 | 
2ed68                 | __struct___bas_wrap_sender_close
2ed68     03 4A 05 F6 | 	mov	COUNT_, #3
2ed6c     A8 00 A0 FD | 	call	#pushregs_
2ed70     08 E4 05 F1 | 	add	objptr, #8
2ed74     F2 1E 02 FB | 	rdlong	local01, objptr
2ed78     0F 21 02 F6 | 	mov	local02, local01
2ed7c     08 E4 85 F1 | 	sub	objptr, #8
2ed80     13 20 46 F7 | 	zerox	local02, #19
2ed84     14 1E 46 F0 | 	shr	local01, #20
2ed88     02 1E 66 F0 | 	shl	local01, #2
2ed8c     ED 1E 02 F1 | 	add	local01, __methods__
2ed90     0F 1F 02 FB | 	rdlong	local01, local01
2ed94     F2 22 02 F6 | 	mov	local03, objptr
2ed98     10 E5 01 F6 | 	mov	objptr, local02
2ed9c     2D 1E 62 FD | 	call	local01
2eda0     11 E5 01 F6 | 	mov	objptr, local03
2eda4     A7 F0 03 F6 | 	mov	ptra, fp
2eda8     B2 00 A0 FD | 	call	#popregs_
2edac                 | __struct___bas_wrap_sender_close_ret
2edac     2D 00 64 FD | 	ret
2edb0                 | 
2edb0                 | LR__4810
2edb0     2F          | 	byte	"/"
2edb1     00          | 	byte	0
2edb2                 | LR__4811
2edb2     69 6E 66    | 	byte	"inf"
2edb5     00          | 	byte	0
2edb6                 | LR__4812
2edb6     6E 61 6E    | 	byte	"nan"
2edb9     00          | 	byte	0
2edba                 | LR__4813
2edba                 | 	byte	
2edba     00          | 	byte	0
2edbb                 | LR__4814
2edbb                 | 	byte	
2edbb     00          | 	byte	0
2edbc                 | LR__4815
2edbc                 | 	byte	
2edbc     00          | 	byte	0
2edbd                 | LR__4816
2edbd                 | 	byte	
2edbd     00          | 	byte	0
2edbe                 | LR__4817
2edbe                 | 	byte	
2edbe     00          | 	byte	0
2edbf                 | LR__4818
2edbf                 | 	byte	
2edbf     00          | 	byte	0
2edc0                 | LR__4819
2edc0                 | 	byte	
2edc0     00          | 	byte	0
2edc1                 | LR__4820
2edc1                 | 	byte	
2edc1     00          | 	byte	0
2edc2                 | LR__4821
2edc2     00          | 	byte	0
2edc3     00          | 	byte	0
2edc4                 | LR__4822
2edc4     00          | 	byte	0
2edc5     00          | 	byte	0
2edc6                 | LR__4823
2edc6     00          | 	byte	0
2edc7     00          | 	byte	0
2edc8                 | LR__4824
2edc8     20 21 21 21 
2edcc     20 63 6F 72 
2edd0     72 75 70 74 
2edd4     65 64 20 68 
2edd8     65 61 70 3F 
2eddc     3F 3F 20 21 
2ede0     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
2ede3     00          | 	byte	0
2ede4                 | LR__4825
2ede4     20 21 21 21 
2ede8     20 6F 75 74 
2edec     20 6F 66 20 
2edf0     68 65 61 70 
2edf4     20 6D 65 6D 
2edf8     6F 72 79 20 
2edfc     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
2ee00     00          | 	byte	0
2ee01                 | LR__4826
2ee01     20 21 21 21 
2ee05     20 63 6F 72 
2ee09     72 75 70 74 
2ee0d     65 64 20 68 
2ee11     65 61 70 20 
2ee15     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
2ee19     00          | 	byte	0
2ee1a                 | LR__4827
2ee1a     00          | 	byte	0
2ee1b     00          | 	byte	0
2ee1c                 | LR__4828
2ee1c     2E          | 	byte	"."
2ee1d     00          | 	byte	0
2ee1e                 | LR__4829
2ee1e     00          | 	byte	0
2ee1f     00          | 	byte	0
2ee20                 | LR__4830
2ee20     00          | 	byte	0
2ee21     00          | 	byte	0
2ee22                 | LR__4831
2ee22     00          | 	byte	0
2ee23     00          | 	byte	0
2ee24                 | LR__4832
2ee24     2A 3A 3C 3E 
2ee28     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
2ee2c     00          | 	byte	0
2ee2d                 | LR__4833
2ee2d     2B 2C 3B 3D 
2ee31     5B 5D       | 	byte	"+,;=[]"
2ee33     00          | 	byte	0
2ee34                 | LR__4834
2ee34     46 41 54 33 
2ee38     32 20 20 20 | 	byte	"FAT32   "
2ee3c     00          | 	byte	0
2ee3d                 | LR__4835
2ee3d     54 5A       | 	byte	"TZ"
2ee3f     00          | 	byte	0
2ee40                 | LR__4836
2ee40     00          | 	byte	0
2ee41     00          | 	byte	0
2ee42                 | LR__4837
2ee42                 | 	byte	
2ee42     00          | 	byte	0
2ee43                 | LR__4838
2ee43                 | 	byte	
2ee43     00          | 	byte	0
2ee44                 | LR__4839
2ee44     22          | 	byte	34
2ee45     00          | 	byte	0
2ee46                 | LR__4840
2ee46     22          | 	byte	34
2ee47     00          | 	byte	0
2ee48                 | LR__4841
2ee48     3A          | 	byte	":"
2ee49     00          | 	byte	0
2ee4a                 | LR__4842
2ee4a                 | 	byte	
2ee4a     00          | 	byte	0
2ee4b                 | LR__4843
2ee4b                 | 	byte	
2ee4b     00          | 	byte	0
2ee4c                 | LR__4844
2ee4c                 | 	byte	
2ee4c     00          | 	byte	0
2ee4d                 | LR__4845
2ee4d                 | 	byte	
2ee4d     00          | 	byte	0
2ee4e                 | LR__4846
2ee4e                 | 	byte	
2ee4e     00          | 	byte	0
2ee4f                 | LR__4847
2ee4f                 | 	byte	
2ee4f     00          | 	byte	0
2ee50                 | LR__4848
2ee50                 | 	byte	
2ee50     00          | 	byte	0
2ee51                 | LR__4849
2ee51     22          | 	byte	34
2ee52     00          | 	byte	0
2ee53                 | LR__4850
2ee53     22          | 	byte	34
2ee54     00          | 	byte	0
2ee55                 | LR__4851
2ee55     22          | 	byte	34
2ee56     00          | 	byte	0
2ee57                 | LR__4852
2ee57     22          | 	byte	34
2ee58     00          | 	byte	0
2ee59                 | LR__4853
2ee59     22          | 	byte	34
2ee5a     00          | 	byte	0
2ee5b                 | LR__4854
2ee5b     3E          | 	byte	">"
2ee5c     00          | 	byte	0
2ee5d                 | LR__4855
2ee5d     3C          | 	byte	"<"
2ee5e     00          | 	byte	0
2ee5f                 | LR__4856
2ee5f     2B          | 	byte	"+"
2ee60     00          | 	byte	0
2ee61                 | LR__4857
2ee61     2D          | 	byte	"-"
2ee62     00          | 	byte	0
2ee63                 | LR__4858
2ee63     2A          | 	byte	"*"
2ee64     00          | 	byte	0
2ee65                 | LR__4859
2ee65     2F          | 	byte	"/"
2ee66     00          | 	byte	0
2ee67                 | LR__4860
2ee67     5E          | 	byte	"^"
2ee68     00          | 	byte	0
2ee69                 | LR__4861
2ee69     3D          | 	byte	"="
2ee6a     00          | 	byte	0
2ee6b                 | LR__4862
2ee6b     2B          | 	byte	"+"
2ee6c     00          | 	byte	0
2ee6d                 | LR__4863
2ee6d     2B          | 	byte	"+"
2ee6e     00          | 	byte	0
2ee6f                 | LR__4864
2ee6f     2D          | 	byte	"-"
2ee70     00          | 	byte	0
2ee71                 | LR__4865
2ee71     2D          | 	byte	"-"
2ee72     00          | 	byte	0
2ee73                 | LR__4866
2ee73     3C          | 	byte	"<"
2ee74     00          | 	byte	0
2ee75                 | LR__4867
2ee75     3E          | 	byte	">"
2ee76     00          | 	byte	0
2ee77                 | LR__4868
2ee77     22          | 	byte	34
2ee78     00          | 	byte	0
2ee79                 | LR__4869
2ee79     22          | 	byte	34
2ee7a     00          | 	byte	0
2ee7b                 | LR__4870
2ee7b     2E          | 	byte	"."
2ee7c     00          | 	byte	0
2ee7d                 | LR__4871
2ee7d     3F          | 	byte	"?"
2ee7e     00          | 	byte	0
2ee7f                 | LR__4872
2ee7f     3F          | 	byte	"?"
2ee80     00          | 	byte	0
2ee81                 | LR__4873
2ee81     6D 6F 75 73 
2ee85     65          | 	byte	"mouse"
2ee86     00          | 	byte	0
2ee87                 | LR__4874
2ee87     63 75 72 73 
2ee8b     6F 72       | 	byte	"cursor"
2ee8d     00          | 	byte	0
2ee8e                 | LR__4875
2ee8e     63 6C 69 63 
2ee92     6B          | 	byte	"click"
2ee93     00          | 	byte	0
2ee94                 | LR__4876
2ee94     6F 6E       | 	byte	"on"
2ee96     00          | 	byte	0
2ee97                 | LR__4877
2ee97     31          | 	byte	"1"
2ee98     00          | 	byte	0
2ee99                 | LR__4878
2ee99     6F 66 66    | 	byte	"off"
2ee9c     00          | 	byte	0
2ee9d                 | LR__4879
2ee9d     30          | 	byte	"0"
2ee9e     00          | 	byte	0
2ee9f                 | LR__4880
2ee9f     6D 6F 64 65 | 	byte	"mode"
2eea3     00          | 	byte	0
2eea4                 | LR__4881
2eea4     6D 2E       | 	byte	"m."
2eea6     00          | 	byte	0
2eea7                 | LR__4882
2eea7     61 74 61 72 
2eeab     69          | 	byte	"atari"
2eeac     00          | 	byte	0
2eead                 | LR__4883
2eead     30          | 	byte	"0"
2eeae     00          | 	byte	0
2eeaf                 | LR__4884
2eeaf     70 63 5F 61 
2eeb3     6D 62 65 72 | 	byte	"pc_amber"
2eeb7     00          | 	byte	0
2eeb8                 | LR__4885
2eeb8     31          | 	byte	"1"
2eeb9     00          | 	byte	0
2eeba                 | LR__4886
2eeba     70 63 5F 67 
2eebe     72 65 65 6E | 	byte	"pc_green"
2eec2     00          | 	byte	0
2eec3                 | LR__4887
2eec3     32          | 	byte	"2"
2eec4     00          | 	byte	0
2eec5                 | LR__4888
2eec5     70 63 5F 77 
2eec9     68 69 74 65 | 	byte	"pc_white"
2eecd     00          | 	byte	0
2eece                 | LR__4889
2eece     33          | 	byte	"3"
2eecf     00          | 	byte	0
2eed0                 | LR__4890
2eed0     73 74       | 	byte	"st"
2eed2     00          | 	byte	0
2eed3                 | LR__4891
2eed3     34          | 	byte	"4"
2eed4     00          | 	byte	0
2eed5                 | LR__4892
2eed5                 | 	byte	
2eed5     00          | 	byte	0
2eed6                 | LR__4893
2eed6     6C 6F 61 64 | 	byte	"load"
2eeda     00          | 	byte	0
2eedb                 | LR__4894
2eedb     73 61 76 65 | 	byte	"save"
2eedf     00          | 	byte	0
2eee0                 | LR__4895
2eee0     62 72 75 6E | 	byte	"brun"
2eee4     00          | 	byte	0
2eee5                 | LR__4896
2eee5     72 75 6E    | 	byte	"run"
2eee8     00          | 	byte	0
2eee9                 | LR__4897
2eee9     6C 6F 2E    | 	byte	"lo."
2eeec     00          | 	byte	0
2eeed                 | LR__4898
2eeed     73 2E       | 	byte	"s."
2eeef     00          | 	byte	0
2eef0                 | LR__4899
2eef0     62 72 2E    | 	byte	"br."
2eef3     00          | 	byte	0
2eef4                 | LR__4900
2eef4                 | 	byte	
2eef4     00          | 	byte	0
2eef5                 | LR__4901
2eef5                 | 	byte	
2eef5     00          | 	byte	0
2eef6                 | LR__4902
2eef6                 | 	byte	
2eef6     00          | 	byte	0
2eef7                 | LR__4903
2eef7                 | 	byte	
2eef7     00          | 	byte	0
2eef8                 | LR__4904
2eef8     20 55 73 65 
2eefc     72 20 66 75 
2ef00     6E 63 74 69 
2ef04     6F 6E 73 20 
2ef08     61 6E 64 20 
2ef0c     61 72 72 61 
2ef10     79 73 20 6E 
2ef14     6F 74 20 79 
2ef18     65 74 20 69 
2ef1c     6D 70 6C 65 
2ef20     6D 65 6E 74 
2ef24     65 64       | 	byte	" User functions and arrays not yet implemented"
2ef26     00          | 	byte	0
2ef27                 | LR__4905
2ef27                 | 	byte	
2ef27     00          | 	byte	0
2ef28                 | LR__4906
2ef28                 | 	byte	
2ef28     00          | 	byte	0
2ef29                 | LR__4907
2ef29     52 65 61 64 
2ef2d     79          | 	byte	"Ready"
2ef2e     00          | 	byte	0
2ef2f                 | LR__4908
2ef2f     2B          | 	byte	"+"
2ef30     00          | 	byte	0
2ef31                 | LR__4909
2ef31     2D          | 	byte	"-"
2ef32     00          | 	byte	0
2ef33                 | LR__4910
2ef33     6F 72       | 	byte	"or"
2ef35     00          | 	byte	0
2ef36                 | LR__4911
2ef36     78 6F 72    | 	byte	"xor"
2ef39     00          | 	byte	0
2ef3a                 | LR__4912
2ef3a     2A          | 	byte	"*"
2ef3b     00          | 	byte	0
2ef3c                 | LR__4913
2ef3c     2F          | 	byte	"/"
2ef3d     00          | 	byte	0
2ef3e                 | LR__4914
2ef3e     61 6E 64    | 	byte	"and"
2ef41     00          | 	byte	0
2ef42                 | LR__4915
2ef42     64 69 76    | 	byte	"div"
2ef45     00          | 	byte	0
2ef46                 | LR__4916
2ef46     6D 6F 64    | 	byte	"mod"
2ef49     00          | 	byte	0
2ef4a                 | LR__4917
2ef4a     73 68 6C    | 	byte	"shl"
2ef4d     00          | 	byte	0
2ef4e                 | LR__4918
2ef4e     73 68 72    | 	byte	"shr"
2ef51     00          | 	byte	0
2ef52                 | LR__4919
2ef52     5E          | 	byte	"^"
2ef53     00          | 	byte	0
2ef54                 | LR__4920
2ef54     6E 6F 74    | 	byte	"not"
2ef57     00          | 	byte	0
2ef58                 | LR__4921
2ef58     40          | 	byte	"@"
2ef59     00          | 	byte	0
2ef5a                 | LR__4922
2ef5a     3D          | 	byte	"="
2ef5b     00          | 	byte	0
2ef5c                 | LR__4923
2ef5c     3E 3D       | 	byte	">="
2ef5e     00          | 	byte	0
2ef5f                 | LR__4924
2ef5f     3C 3D       | 	byte	"<="
2ef61     00          | 	byte	0
2ef62                 | LR__4925
2ef62     3C          | 	byte	"<"
2ef63     00          | 	byte	0
2ef64                 | LR__4926
2ef64     3E          | 	byte	">"
2ef65     00          | 	byte	0
2ef66                 | LR__4927
2ef66     3C 3E       | 	byte	"<>"
2ef68     00          | 	byte	0
2ef69                 | LR__4928
2ef69     2B 2B       | 	byte	"++"
2ef6b     00          | 	byte	0
2ef6c                 | LR__4929
2ef6c     2D 2D       | 	byte	"--"
2ef6e     00          | 	byte	0
2ef6f                 | LR__4930
2ef6f     23          | 	byte	"#"
2ef70     00          | 	byte	0
2ef71                 | LR__4931
2ef71     23          | 	byte	"#"
2ef72     00          | 	byte	0
2ef73                 | LR__4932
2ef73     2D          | 	byte	"-"
2ef74     00          | 	byte	0
2ef75                 | LR__4933
2ef75     30          | 	byte	"0"
2ef76     00          | 	byte	0
2ef77                 | LR__4934
2ef77     63          | 	byte	"c"
2ef78     00          | 	byte	0
2ef79                 | LR__4935
2ef79     63 23       | 	byte	"c#"
2ef7b     00          | 	byte	0
2ef7c                 | LR__4936
2ef7c     64          | 	byte	"d"
2ef7d     00          | 	byte	0
2ef7e                 | LR__4937
2ef7e     64 23       | 	byte	"d#"
2ef80     00          | 	byte	0
2ef81                 | LR__4938
2ef81     65          | 	byte	"e"
2ef82     00          | 	byte	0
2ef83                 | LR__4939
2ef83     66          | 	byte	"f"
2ef84     00          | 	byte	0
2ef85                 | LR__4940
2ef85     66 23       | 	byte	"f#"
2ef87     00          | 	byte	0
2ef88                 | LR__4941
2ef88     67          | 	byte	"g"
2ef89     00          | 	byte	0
2ef8a                 | LR__4942
2ef8a     67 23       | 	byte	"g#"
2ef8c     00          | 	byte	0
2ef8d                 | LR__4943
2ef8d     61          | 	byte	"a"
2ef8e     00          | 	byte	0
2ef8f                 | LR__4944
2ef8f     61 23       | 	byte	"a#"
2ef91     00          | 	byte	0
2ef92                 | LR__4945
2ef92     68          | 	byte	"h"
2ef93     00          | 	byte	0
2ef94                 | LR__4946
2ef94     62          | 	byte	"b"
2ef95     00          | 	byte	0
2ef96                 | LR__4947
2ef96     2B          | 	byte	"+"
2ef97     00          | 	byte	0
2ef98                 | LR__4948
2ef98     2D          | 	byte	"-"
2ef99     00          | 	byte	0
2ef9a                 | LR__4949
2ef9a     3D          | 	byte	"="
2ef9b     00          | 	byte	0
2ef9c                 | LR__4950
2ef9c     2C          | 	byte	","
2ef9d     00          | 	byte	0
2ef9e                 | LR__4951
2ef9e     2A          | 	byte	"*"
2ef9f     00          | 	byte	0
2efa0                 | LR__4952
2efa0     2F          | 	byte	"/"
2efa1     00          | 	byte	0
2efa2                 | LR__4953
2efa2     3B          | 	byte	";"
2efa3     00          | 	byte	0
2efa4                 | LR__4954
2efa4     22          | 	byte	34
2efa5     00          | 	byte	0
2efa6                 | LR__4955
2efa6     5E          | 	byte	"^"
2efa7     00          | 	byte	0
2efa8                 | LR__4956
2efa8     29          | 	byte	")"
2efa9     00          | 	byte	0
2efaa                 | LR__4957
2efaa     28          | 	byte	"("
2efab     00          | 	byte	0
2efac                 | LR__4958
2efac     3A          | 	byte	":"
2efad     00          | 	byte	0
2efae                 | LR__4959
2efae     20          | 	byte	" "
2efaf     00          | 	byte	0
2efb0                 | LR__4960
2efb0     3E          | 	byte	">"
2efb1     00          | 	byte	0
2efb2                 | LR__4961
2efb2     3C          | 	byte	"<"
2efb3     00          | 	byte	0
2efb4                 | LR__4962
2efb4     3D          | 	byte	"="
2efb5     00          | 	byte	0
2efb6                 | LR__4963
2efb6     62 65 65 70 | 	byte	"beep"
2efba     00          | 	byte	0
2efbb                 | LR__4964
2efbb     62 2E       | 	byte	"b."
2efbd     00          | 	byte	0
2efbe                 | LR__4965
2efbe     62 6F 78    | 	byte	"box"
2efc1     00          | 	byte	0
2efc2                 | LR__4966
2efc2     62 72 75 6E | 	byte	"brun"
2efc6     00          | 	byte	0
2efc7                 | LR__4967
2efc7     62 72 2E    | 	byte	"br."
2efca     00          | 	byte	0
2efcb                 | LR__4968
2efcb     63 68 61 6E 
2efcf     67 65 66 72 
2efd3     65 71       | 	byte	"changefreq"
2efd5     00          | 	byte	0
2efd6                 | LR__4969
2efd6     63 66 2E    | 	byte	"cf."
2efd9     00          | 	byte	0
2efda                 | LR__4970
2efda     63 68 61 6E 
2efde     67 65 70 61 
2efe2     6E          | 	byte	"changepan"
2efe3     00          | 	byte	0
2efe4                 | LR__4971
2efe4     63 70 2E    | 	byte	"cp."
2efe7     00          | 	byte	0
2efe8                 | LR__4972
2efe8     63 68 61 6E 
2efec     67 65 76 6F 
2eff0     6C          | 	byte	"changevol"
2eff1     00          | 	byte	0
2eff2                 | LR__4973
2eff2     63 76 2E    | 	byte	"cv."
2eff5     00          | 	byte	0
2eff6                 | LR__4974
2eff6     63 68 61 6E 
2effa     67 65 77 61 
2effe     76 65       | 	byte	"changewave"
2f000     00          | 	byte	0
2f001                 | LR__4975
2f001     63 77 2E    | 	byte	"cw."
2f004     00          | 	byte	0
2f005                 | LR__4976
2f005     63 69 72 63 
2f009     6C 65       | 	byte	"circle"
2f00b     00          | 	byte	0
2f00c                 | LR__4977
2f00c     63 69 2E    | 	byte	"ci."
2f00f     00          | 	byte	0
2f010                 | LR__4978
2f010     63 6C 69 63 
2f014     6B          | 	byte	"click"
2f015     00          | 	byte	0
2f016                 | LR__4979
2f016     63 6C 73    | 	byte	"cls"
2f019     00          | 	byte	0
2f01a                 | LR__4980
2f01a     63 6F 6C 6F 
2f01e     72          | 	byte	"color"
2f01f     00          | 	byte	0
2f020                 | LR__4981
2f020     63 2E       | 	byte	"c."
2f022     00          | 	byte	0
2f023                 | LR__4982
2f023     63 73 61 76 
2f027     65          | 	byte	"csave"
2f028     00          | 	byte	0
2f029                 | LR__4983
2f029     63 73 2E    | 	byte	"cs."
2f02c     00          | 	byte	0
2f02d                 | LR__4984
2f02d     63 75 72 73 
2f031     6F 72       | 	byte	"cursor"
2f033     00          | 	byte	0
2f034                 | LR__4985
2f034     64 65 66 73 
2f038     6E 64       | 	byte	"defsnd"
2f03a     00          | 	byte	0
2f03b                 | LR__4986
2f03b     64 65 66 65 
2f03f     6E 76       | 	byte	"defenv"
2f041     00          | 	byte	0
2f042                 | LR__4987
2f042     64 65 66 73 
2f046     70 72 69 74 
2f04a     65          | 	byte	"defsprite"
2f04b     00          | 	byte	0
2f04c                 | LR__4988
2f04c     64 73 2E    | 	byte	"ds."
2f04f     00          | 	byte	0
2f050                 | LR__4989
2f050     64 65 67    | 	byte	"deg"
2f053     00          | 	byte	0
2f054                 | LR__4990
2f054     64 69 6D    | 	byte	"dim"
2f057     00          | 	byte	0
2f058                 | LR__4991
2f058     64 69 72    | 	byte	"dir"
2f05b     00          | 	byte	0
2f05c                 | LR__4992
2f05c     64 70 6F 6B 
2f060     65          | 	byte	"dpoke"
2f061     00          | 	byte	0
2f062                 | LR__4993
2f062     64 72 61 77 | 	byte	"draw"
2f066     00          | 	byte	0
2f067                 | LR__4994
2f067     64 72 2E    | 	byte	"dr."
2f06a     00          | 	byte	0
2f06b                 | LR__4995
2f06b     65 6C 73 65 | 	byte	"else"
2f06f     00          | 	byte	0
2f070                 | LR__4996
2f070     65 6E 64    | 	byte	"end"
2f073     00          | 	byte	0
2f074                 | LR__4997
2f074     66 63 69 72 
2f078     63 6C 65    | 	byte	"fcircle"
2f07b     00          | 	byte	0
2f07c                 | LR__4998
2f07c     66 63 2E    | 	byte	"fc."
2f07f     00          | 	byte	0
2f080                 | LR__4999
2f080     66 69 6C 6C | 	byte	"fill"
2f084     00          | 	byte	0
2f085                 | LR__5000
2f085     66 69 2E    | 	byte	"fi."
2f088     00          | 	byte	0
2f089                 | LR__5001
2f089     66 6F 6E 74 | 	byte	"font"
2f08d     00          | 	byte	0
2f08e                 | LR__5002
2f08e     66 6F 72    | 	byte	"for"
2f091     00          | 	byte	0
2f092                 | LR__5003
2f092     66 2E       | 	byte	"f."
2f094     00          | 	byte	0
2f095                 | LR__5004
2f095     66 72 61 6D 
2f099     65          | 	byte	"frame"
2f09a     00          | 	byte	0
2f09b                 | LR__5005
2f09b     66 72 2E    | 	byte	"fr."
2f09e     00          | 	byte	0
2f09f                 | LR__5006
2f09f     67 6F 73 75 
2f0a3     62          | 	byte	"gosub"
2f0a4     00          | 	byte	0
2f0a5                 | LR__5007
2f0a5     67 6F 74 6F | 	byte	"goto"
2f0a9     00          | 	byte	0
2f0aa                 | LR__5008
2f0aa     67 2E       | 	byte	"g."
2f0ac     00          | 	byte	0
2f0ad                 | LR__5009
2f0ad     69 66       | 	byte	"if"
2f0af     00          | 	byte	0
2f0b0                 | LR__5010
2f0b0     69 6E 6B    | 	byte	"ink"
2f0b3     00          | 	byte	0
2f0b4                 | LR__5011
2f0b4     69 2E       | 	byte	"i."
2f0b6     00          | 	byte	0
2f0b7                 | LR__5012
2f0b7     69 6E 74    | 	byte	"int"
2f0ba     00          | 	byte	0
2f0bb                 | LR__5013
2f0bb     6C 69 73 74 | 	byte	"list"
2f0bf     00          | 	byte	0
2f0c0                 | LR__5014
2f0c0     6C 2E       | 	byte	"l."
2f0c2     00          | 	byte	0
2f0c3                 | LR__5015
2f0c3     6C 6F 61 64 | 	byte	"load"
2f0c7     00          | 	byte	0
2f0c8                 | LR__5016
2f0c8     6C 6F 2E    | 	byte	"lo."
2f0cb     00          | 	byte	0
2f0cc                 | LR__5017
2f0cc     6C 70 6F 6B 
2f0d0     65          | 	byte	"lpoke"
2f0d1     00          | 	byte	0
2f0d2                 | LR__5018
2f0d2     6D 6F 64 65 | 	byte	"mode"
2f0d6     00          | 	byte	0
2f0d7                 | LR__5019
2f0d7     6D 2E       | 	byte	"m."
2f0d9     00          | 	byte	0
2f0da                 | LR__5020
2f0da     6D 6F 75 73 
2f0de     65          | 	byte	"mouse"
2f0df     00          | 	byte	0
2f0e0                 | LR__5021
2f0e0     6E 65 77    | 	byte	"new"
2f0e3     00          | 	byte	0
2f0e4                 | LR__5022
2f0e4     6E 65 78 74 | 	byte	"next"
2f0e8     00          | 	byte	0
2f0e9                 | LR__5023
2f0e9     6E 2E       | 	byte	"n."
2f0eb     00          | 	byte	0
2f0ec                 | LR__5024
2f0ec     70 61 70 65 
2f0f0     72          | 	byte	"paper"
2f0f1     00          | 	byte	0
2f0f2                 | LR__5025
2f0f2     70 61 2E    | 	byte	"pa."
2f0f5     00          | 	byte	0
2f0f6                 | LR__5026
2f0f6     70 69 6E 66 
2f0fa     6C 6F 61 74 | 	byte	"pinfloat"
2f0fe     00          | 	byte	0
2f0ff                 | LR__5027
2f0ff     70 69 6E 68 
2f103     69          | 	byte	"pinhi"
2f104     00          | 	byte	0
2f105                 | LR__5028
2f105     70 69 6E 6C 
2f109     6F          | 	byte	"pinlo"
2f10a     00          | 	byte	0
2f10b                 | LR__5029
2f10b     70 69 6E 73 
2f10f     74 61 72 74 | 	byte	"pinstart"
2f113     00          | 	byte	0
2f114                 | LR__5030
2f114     70 69 6E 74 
2f118     6F 67 67 6C 
2f11c     65          | 	byte	"pintoggle"
2f11d     00          | 	byte	0
2f11e                 | LR__5031
2f11e     70 69 6E 77 
2f122     72 69 74 65 | 	byte	"pinwrite"
2f126     00          | 	byte	0
2f127                 | LR__5032
2f127     70 6C 61 79 | 	byte	"play"
2f12b     00          | 	byte	0
2f12c                 | LR__5033
2f12c     70 2E       | 	byte	"p."
2f12e     00          | 	byte	0
2f12f                 | LR__5034
2f12f     70 6C 6F 74 | 	byte	"plot"
2f133     00          | 	byte	0
2f134                 | LR__5035
2f134     70 6C 2E    | 	byte	"pl."
2f137     00          | 	byte	0
2f138                 | LR__5036
2f138     70 6F 6B 65 | 	byte	"poke"
2f13c     00          | 	byte	0
2f13d                 | LR__5037
2f13d     70 6F 70    | 	byte	"pop"
2f140     00          | 	byte	0
2f141                 | LR__5038
2f141     70 6F 73 69 
2f145     74 69 6F 6E | 	byte	"position"
2f149     00          | 	byte	0
2f14a                 | LR__5039
2f14a     70 6F 73 2E | 	byte	"pos."
2f14e     00          | 	byte	0
2f14f                 | LR__5040
2f14f     70 72 69 6E 
2f153     74          | 	byte	"print"
2f154     00          | 	byte	0
2f155                 | LR__5041
2f155     3F          | 	byte	"?"
2f156     00          | 	byte	0
2f157                 | LR__5042
2f157     72 61 64    | 	byte	"rad"
2f15a     00          | 	byte	0
2f15b                 | LR__5043
2f15b     72 65 6C 65 
2f15f     61 73 65    | 	byte	"release"
2f162     00          | 	byte	0
2f163                 | LR__5044
2f163     72 65 74 75 
2f167     72 6E       | 	byte	"return"
2f169     00          | 	byte	0
2f16a                 | LR__5045
2f16a     72 75 6E    | 	byte	"run"
2f16d     00          | 	byte	0
2f16e                 | LR__5046
2f16e     73 61 76 65 | 	byte	"save"
2f172     00          | 	byte	0
2f173                 | LR__5047
2f173     73 2E       | 	byte	"s."
2f175     00          | 	byte	0
2f176                 | LR__5048
2f176     73 65 74 64 
2f17a     65 6C 61 79 | 	byte	"setdelay"
2f17e     00          | 	byte	0
2f17f                 | LR__5049
2f17f     73 64 2E    | 	byte	"sd."
2f182     00          | 	byte	0
2f183                 | LR__5050
2f183     73 65 74 65 
2f187     6E 76       | 	byte	"setenv"
2f189     00          | 	byte	0
2f18a                 | LR__5051
2f18a     73 65 2E    | 	byte	"se."
2f18d     00          | 	byte	0
2f18e                 | LR__5052
2f18e     73 65 74 6C 
2f192     65 6E       | 	byte	"setlen"
2f194     00          | 	byte	0
2f195                 | LR__5053
2f195     73 6C 2E    | 	byte	"sl."
2f198     00          | 	byte	0
2f199                 | LR__5054
2f199     73 65 74 70 
2f19d     61 6E       | 	byte	"setpan"
2f19f     00          | 	byte	0
2f1a0                 | LR__5055
2f1a0     73 70       | 	byte	"sp"
2f1a2     00          | 	byte	0
2f1a3                 | LR__5056
2f1a3     73 65 74 73 
2f1a7     75 73 74 61 
2f1ab     69 6E       | 	byte	"setsustain"
2f1ad     00          | 	byte	0
2f1ae                 | LR__5057
2f1ae     73 73 2E    | 	byte	"ss."
2f1b1     00          | 	byte	0
2f1b2                 | LR__5058
2f1b2     73 65 74 76 
2f1b6     6F 6C       | 	byte	"setvol"
2f1b8     00          | 	byte	0
2f1b9                 | LR__5059
2f1b9     73 76 2E    | 	byte	"sv."
2f1bc     00          | 	byte	0
2f1bd                 | LR__5060
2f1bd     73 65 74 77 
2f1c1     61 76 65    | 	byte	"setwave"
2f1c4     00          | 	byte	0
2f1c5                 | LR__5061
2f1c5     73 77 2E    | 	byte	"sw."
2f1c8     00          | 	byte	0
2f1c9                 | LR__5062
2f1c9     73 65 74 77 
2f1cd     61 76       | 	byte	"setwav"
2f1cf     00          | 	byte	0
2f1d0                 | LR__5063
2f1d0     73 68 75 74 
2f1d4     75 70       | 	byte	"shutup"
2f1d6     00          | 	byte	0
2f1d7                 | LR__5064
2f1d7     73 68 2E    | 	byte	"sh."
2f1da     00          | 	byte	0
2f1db                 | LR__5065
2f1db     73 6F 75 6E 
2f1df     64          | 	byte	"sound"
2f1e0     00          | 	byte	0
2f1e1                 | LR__5066
2f1e1     73 6F 2E    | 	byte	"so."
2f1e4     00          | 	byte	0
2f1e5                 | LR__5067
2f1e5     73 70 72 69 
2f1e9     74 65       | 	byte	"sprite"
2f1eb     00          | 	byte	0
2f1ec                 | LR__5068
2f1ec     73 70 72 2E | 	byte	"spr."
2f1f0     00          | 	byte	0
2f1f1                 | LR__5069
2f1f1     74 68 65 6E | 	byte	"then"
2f1f5     00          | 	byte	0
2f1f6                 | LR__5070
2f1f6     77 61 69 74 
2f1fa     6D 73       | 	byte	"waitms"
2f1fc     00          | 	byte	0
2f1fd                 | LR__5071
2f1fd     77 61 69 74 
2f201     63 6C 6F 63 
2f205     6B          | 	byte	"waitclock"
2f206     00          | 	byte	0
2f207                 | LR__5072
2f207     77 63 2E    | 	byte	"wc."
2f20a     00          | 	byte	0
2f20b                 | LR__5073
2f20b     77 61 69 74 
2f20f     76 62 6C    | 	byte	"waitvbl"
2f212     00          | 	byte	0
2f213                 | LR__5074
2f213     77 76 2E    | 	byte	"wv."
2f216     00          | 	byte	0
2f217                 | LR__5075
2f217     77 78 70 69 
2f21b     6E          | 	byte	"wxpin"
2f21c     00          | 	byte	0
2f21d                 | LR__5076
2f21d     77 79 70 69 
2f221     6E          | 	byte	"wypin"
2f222     00          | 	byte	0
2f223                 | LR__5077
2f223     61 62 73    | 	byte	"abs"
2f226     00          | 	byte	0
2f227                 | LR__5078
2f227     61 63 6F 73 | 	byte	"acos"
2f22b     00          | 	byte	0
2f22c                 | LR__5079
2f22c     61 64 72    | 	byte	"adr"
2f22f     00          | 	byte	0
2f230                 | LR__5080
2f230     61 64 64 72 | 	byte	"addr"
2f234     00          | 	byte	0
2f235                 | LR__5081
2f235     61 73 63    | 	byte	"asc"
2f238     00          | 	byte	0
2f239                 | LR__5082
2f239     61 73 69 6E | 	byte	"asin"
2f23d     00          | 	byte	0
2f23e                 | LR__5083
2f23e     61 74 6E    | 	byte	"atn"
2f241     00          | 	byte	0
2f242                 | LR__5084
2f242     62 69 6E 24 | 	byte	"bin$"
2f246     00          | 	byte	0
2f247                 | LR__5085
2f247     63 68 72 24 | 	byte	"chr$"
2f24b     00          | 	byte	0
2f24c                 | LR__5086
2f24c     63 6F 73    | 	byte	"cos"
2f24f     00          | 	byte	0
2f250                 | LR__5087
2f250     64 70 65 65 
2f254     6B          | 	byte	"dpeek"
2f255     00          | 	byte	0
2f256                 | LR__5088
2f256     66 72 65    | 	byte	"fre"
2f259     00          | 	byte	0
2f25a                 | LR__5089
2f25a     67 65 74 70 
2f25e     69 78 65 6C | 	byte	"getpixel"
2f262     00          | 	byte	0
2f263                 | LR__5090
2f263     67 65 2E    | 	byte	"ge."
2f266     00          | 	byte	0
2f267                 | LR__5091
2f267     67 65 74 65 
2f26b     6E 76 73 75 
2f26f     73 74 61 69 
2f273     6E          | 	byte	"getenvsustain"
2f274     00          | 	byte	0
2f275                 | LR__5092
2f275     67 65 74 6E 
2f279     6F 74 65 76 
2f27d     61 6C 75 65 | 	byte	"getnotevalue"
2f281     00          | 	byte	0
2f282                 | LR__5093
2f282     67 65 74 74 
2f286     69 6D 65    | 	byte	"gettime"
2f289     00          | 	byte	0
2f28a                 | LR__5094
2f28a     68 65 78 24 | 	byte	"hex$"
2f28e     00          | 	byte	0
2f28f                 | LR__5095
2f28f     69 6E 6B 65 
2f293     79 24       | 	byte	"inkey$"
2f295     00          | 	byte	0
2f296                 | LR__5096
2f296     6C 65 66 74 
2f29a     24          | 	byte	"left$"
2f29b     00          | 	byte	0
2f29c                 | LR__5097
2f29c     6C 65 6E    | 	byte	"len"
2f29f     00          | 	byte	0
2f2a0                 | LR__5098
2f2a0     6C 6F 67    | 	byte	"log"
2f2a3     00          | 	byte	0
2f2a4                 | LR__5099
2f2a4     6C 70 65 65 
2f2a8     6B          | 	byte	"lpeek"
2f2a9     00          | 	byte	0
2f2aa                 | LR__5100
2f2aa     6D 69 64 24 | 	byte	"mid$"
2f2ae     00          | 	byte	0
2f2af                 | LR__5101
2f2af     6D 6F 75 73 
2f2b3     65 6B       | 	byte	"mousek"
2f2b5     00          | 	byte	0
2f2b6                 | LR__5102
2f2b6     6D 6F 75 73 
2f2ba     65 77       | 	byte	"mousew"
2f2bc     00          | 	byte	0
2f2bd                 | LR__5103
2f2bd     6D 6F 75 73 
2f2c1     65 78       | 	byte	"mousex"
2f2c3     00          | 	byte	0
2f2c4                 | LR__5104
2f2c4     6D 6F 75 73 
2f2c8     65 79       | 	byte	"mousey"
2f2ca     00          | 	byte	0
2f2cb                 | LR__5105
2f2cb     70 65 65 6B | 	byte	"peek"
2f2cf     00          | 	byte	0
2f2d0                 | LR__5106
2f2d0     70 69 6E 72 
2f2d4     65 61 64    | 	byte	"pinread"
2f2d7     00          | 	byte	0
2f2d8                 | LR__5107
2f2d8     72 64 70 69 
2f2dc     6E          | 	byte	"rdpin"
2f2dd     00          | 	byte	0
2f2de                 | LR__5108
2f2de     72 69 67 68 
2f2e2     74 24       | 	byte	"right$"
2f2e4     00          | 	byte	0
2f2e5                 | LR__5109
2f2e5     72 71 70 69 
2f2e9     6E          | 	byte	"rqpin"
2f2ea     00          | 	byte	0
2f2eb                 | LR__5110
2f2eb     72 6E 64    | 	byte	"rnd"
2f2ee     00          | 	byte	0
2f2ef                 | LR__5111
2f2ef     73 69 6E    | 	byte	"sin"
2f2f2     00          | 	byte	0
2f2f3                 | LR__5112
2f2f3     73 71 72    | 	byte	"sqr"
2f2f6     00          | 	byte	0
2f2f7                 | LR__5113
2f2f7     73 74 69 63 
2f2fb     6B          | 	byte	"stick"
2f2fc     00          | 	byte	0
2f2fd                 | LR__5114
2f2fd     73 74 72 69 
2f301     67          | 	byte	"strig"
2f302     00          | 	byte	0
2f303                 | LR__5115
2f303     73 74 72 24 | 	byte	"str$"
2f307     00          | 	byte	0
2f308                 | LR__5116
2f308     74 61 6E    | 	byte	"tan"
2f30b     00          | 	byte	0
2f30c                 | LR__5117
2f30c     76 61 6C    | 	byte	"val"
2f30f     00          | 	byte	0
2f310                 | LR__5118
2f310     76 61 72 70 
2f314     74 72       | 	byte	"varptr"
2f316     00          | 	byte	0
2f317                 | LR__5119
2f317     61          | 	byte	"a"
2f318     00          | 	byte	0
2f319                 | LR__5120
2f319     7A          | 	byte	"z"
2f31a     00          | 	byte	0
2f31b                 | LR__5121
2f31b     5F          | 	byte	"_"
2f31c     00          | 	byte	0
2f31d                 | LR__5122
2f31d     61          | 	byte	"a"
2f31e     00          | 	byte	0
2f31f                 | LR__5123
2f31f     7A          | 	byte	"z"
2f320     00          | 	byte	0
2f321                 | LR__5124
2f321     30          | 	byte	"0"
2f322     00          | 	byte	0
2f323                 | LR__5125
2f323     39          | 	byte	"9"
2f324     00          | 	byte	0
2f325                 | LR__5126
2f325     5F          | 	byte	"_"
2f326     00          | 	byte	0
2f327                 | LR__5127
2f327     2E          | 	byte	"."
2f328     00          | 	byte	0
2f329                 | LR__5128
2f329     61          | 	byte	"a"
2f32a     00          | 	byte	0
2f32b                 | LR__5129
2f32b     7A          | 	byte	"z"
2f32c     00          | 	byte	0
2f32d                 | LR__5130
2f32d     30          | 	byte	"0"
2f32e     00          | 	byte	0
2f32f                 | LR__5131
2f32f     39          | 	byte	"9"
2f330     00          | 	byte	0
2f331                 | LR__5132
2f331     5F          | 	byte	"_"
2f332     00          | 	byte	0
2f333                 | LR__5133
2f333     24          | 	byte	"$"
2f334     00          | 	byte	0
2f335                 | LR__5134
2f335     25          | 	byte	"%"
2f336     00          | 	byte	0
2f337                 | LR__5135
2f337     21          | 	byte	"!"
2f338     00          | 	byte	0
2f339                 | LR__5136
2f339     30          | 	byte	"0"
2f33a     00          | 	byte	0
2f33b                 | LR__5137
2f33b     39          | 	byte	"9"
2f33c     00          | 	byte	0
2f33d                 | LR__5138
2f33d     2E          | 	byte	"."
2f33e     00          | 	byte	0
2f33f                 | LR__5139
2f33f     24          | 	byte	"$"
2f340     00          | 	byte	0
2f341                 | LR__5140
2f341     25          | 	byte	"%"
2f342     00          | 	byte	0
2f343                 | LR__5141
2f343     2D          | 	byte	"-"
2f344     00          | 	byte	0
2f345                 | LR__5142
2f345     2E          | 	byte	"."
2f346     00          | 	byte	0
2f347                 | LR__5143
2f347     30          | 	byte	"0"
2f348     00          | 	byte	0
2f349                 | LR__5144
2f349     39          | 	byte	"9"
2f34a     00          | 	byte	0
2f34b                 | LR__5145
2f34b     5F          | 	byte	"_"
2f34c     00          | 	byte	0
2f34d                 | LR__5146
2f34d     2E          | 	byte	"."
2f34e     00          | 	byte	0
2f34f                 | LR__5147
2f34f     45          | 	byte	"E"
2f350     00          | 	byte	0
2f351                 | LR__5148
2f351     65          | 	byte	"e"
2f352     00          | 	byte	0
2f353                 | LR__5149
2f353     2D          | 	byte	"-"
2f354     00          | 	byte	0
2f355                 | LR__5150
2f355     2D          | 	byte	"-"
2f356     00          | 	byte	0
2f357                 | LR__5151
2f357     65          | 	byte	"e"
2f358     00          | 	byte	0
2f359                 | LR__5152
2f359     2E          | 	byte	"."
2f35a     00          | 	byte	0
2f35b                 | LR__5153
2f35b     45          | 	byte	"E"
2f35c     00          | 	byte	0
2f35d                 | LR__5154
2f35d     65          | 	byte	"e"
2f35e     00          | 	byte	0
2f35f                 | LR__5155
2f35f     30          | 	byte	"0"
2f360     00          | 	byte	0
2f361                 | LR__5156
2f361     39          | 	byte	"9"
2f362     00          | 	byte	0
2f363                 | LR__5157
2f363     24          | 	byte	"$"
2f364     00          | 	byte	0
2f365                 | LR__5158
2f365     25          | 	byte	"%"
2f366     00          | 	byte	0
2f367                 | LR__5159
2f367     2D          | 	byte	"-"
2f368     00          | 	byte	0
2f369                 | LR__5160
2f369     30          | 	byte	"0"
2f36a     00          | 	byte	0
2f36b                 | LR__5161
2f36b     39          | 	byte	"9"
2f36c     00          | 	byte	0
2f36d                 | LR__5162
2f36d     5F          | 	byte	"_"
2f36e     00          | 	byte	0
2f36f                 | LR__5163
2f36f     30          | 	byte	"0"
2f370     00          | 	byte	0
2f371                 | LR__5164
2f371     39          | 	byte	"9"
2f372     00          | 	byte	0
2f373                 | LR__5165
2f373     5F          | 	byte	"_"
2f374     00          | 	byte	0
2f375                 | LR__5166
2f375     22          | 	byte	34
2f376     00          | 	byte	0
2f377                 | LR__5167
2f377     22          | 	byte	34
2f378     00          | 	byte	0
2f379                 | LR__5168
2f379     44 69 6D 3A 
2f37d     20 61 74 20 
2f381     6C 69 6E 65 
2f385     20          | 	byte	"Dim: at line "
2f386     00          | 	byte	0
2f387                 | LR__5169
2f387     3A 20 77 61 
2f38b     72 6E 69 6E 
2f38f     67 3A 20 74 
2f393     68 65 20 76 
2f397     61 72 69 61 
2f39b     62 6C 65 20 
2f39f     65 78 69 73 
2f3a3     74 65 64 2E | 	byte	": warning: the variable existed."
2f3a7     00          | 	byte	0
2f3a8                 | LR__5170
2f3a8     28          | 	byte	"("
2f3a9     00          | 	byte	0
2f3aa                 | LR__5171
2f3aa     61 73       | 	byte	"as"
2f3ac     00          | 	byte	0
2f3ad                 | LR__5172
2f3ad     61 73       | 	byte	"as"
2f3af     00          | 	byte	0
2f3b0                 | LR__5173
2f3b0     2C          | 	byte	","
2f3b1     00          | 	byte	0
2f3b2                 | LR__5174
2f3b2     29          | 	byte	")"
2f3b3     00          | 	byte	0
2f3b4                 | LR__5175
2f3b4     29          | 	byte	")"
2f3b5     00          | 	byte	0
2f3b6                 | LR__5176
2f3b6     61 73       | 	byte	"as"
2f3b8     00          | 	byte	0
2f3b9                 | LR__5177
2f3b9     62 79 74 65 | 	byte	"byte"
2f3bd     00          | 	byte	0
2f3be                 | LR__5178
2f3be     75 62 79 74 
2f3c2     65          | 	byte	"ubyte"
2f3c3     00          | 	byte	0
2f3c4                 | LR__5179
2f3c4     73 68 6F 72 
2f3c8     74          | 	byte	"short"
2f3c9     00          | 	byte	0
2f3ca                 | LR__5180
2f3ca     75 73 68 6F 
2f3ce     72 74       | 	byte	"ushort"
2f3d0     00          | 	byte	0
2f3d1                 | LR__5181
2f3d1     6C 6F 6E 67 | 	byte	"long"
2f3d5     00          | 	byte	0
2f3d6                 | LR__5182
2f3d6     69 6E 74 65 
2f3da     67 65 72    | 	byte	"integer"
2f3dd     00          | 	byte	0
2f3de                 | LR__5183
2f3de     75 6C 6F 6E 
2f3e2     67          | 	byte	"ulong"
2f3e3     00          | 	byte	0
2f3e4                 | LR__5184
2f3e4     69 6E 74 36 
2f3e8     34          | 	byte	"int64"
2f3e9     00          | 	byte	0
2f3ea                 | LR__5185
2f3ea     75 69 6E 74 
2f3ee     36 34       | 	byte	"uint64"
2f3f0     00          | 	byte	0
2f3f1                 | LR__5186
2f3f1     73 69 6E 67 
2f3f5     6C 65       | 	byte	"single"
2f3f7     00          | 	byte	0
2f3f8                 | LR__5187
2f3f8     64 6F 75 62 
2f3fc     6C 65       | 	byte	"double"
2f3fe     00          | 	byte	0
2f3ff                 | LR__5188
2f3ff     73 74 72 69 
2f403     6E 67       | 	byte	"string"
2f405     00          | 	byte	0
2f406                 | LR__5189
2f406     74 6F       | 	byte	"to"
2f408     00          | 	byte	0
2f409                 | LR__5190
2f409     73 74 65 70 | 	byte	"step"
2f40d     00          | 	byte	0
2f40e                 | LR__5191
2f40e     73 2E       | 	byte	"s."
2f410     00          | 	byte	0
2f411                 | LR__5192
2f411     24          | 	byte	"$"
2f412     00          | 	byte	0
2f413                 | LR__5193
2f413     26 68       | 	byte	"&h"
2f415     00          | 	byte	0
2f416                 | LR__5194
2f416     25          | 	byte	"%"
2f417     00          | 	byte	0
2f418                 | LR__5195
2f418     26 62       | 	byte	"&b"
2f41a     00          | 	byte	0
2f41b                 | LR__5196
2f41b                 | 	byte	
2f41b     00          | 	byte	0
2f41c                 | LR__5197
2f41c     2F          | 	byte	"/"
2f41d     00          | 	byte	0
2f41e                 | LR__5198
2f41e                 | 	byte	
2f41e     00          | 	byte	0
2f41f                 | LR__5199
2f41f     53 61 76 65 
2f423     64 20 61 73 
2f427     20          | 	byte	"Saved as "
2f428     00          | 	byte	0
2f429                 | LR__5200
2f429     2F          | 	byte	"/"
2f42a     00          | 	byte	0
2f42b                 | LR__5201
2f42b                 | 	byte	
2f42b     00          | 	byte	0
2f42c                 | LR__5202
2f42c     2F          | 	byte	"/"
2f42d     00          | 	byte	0
2f42e                 | LR__5203
2f42e     2F          | 	byte	"/"
2f42f     00          | 	byte	0
2f430                 | LR__5204
2f430     2E 62 61 73 | 	byte	".bas"
2f434     00          | 	byte	0
2f435                 | LR__5205
2f435     53 79 73 74 
2f439     65 6D 20 65 
2f43d     72 72 6F 72 
2f441     20          | 	byte	"System error "
2f442     00          | 	byte	0
2f443                 | LR__5206
2f443     3A 20       | 	byte	": "
2f445     00          | 	byte	0
2f446                 | LR__5207
2f446     2E 62 61 73 | 	byte	".bas"
2f44a     00          | 	byte	0
2f44b                 | LR__5208
2f44b     2F          | 	byte	"/"
2f44c     00          | 	byte	0
2f44d                 | LR__5209
2f44d     30          | 	byte	"0"
2f44e     00          | 	byte	0
2f44f                 | LR__5210
2f44f     39          | 	byte	"9"
2f450     00          | 	byte	0
2f451                 | LR__5211
2f451                 | 	byte	
2f451     00          | 	byte	0
2f452                 | LR__5212
2f452     4C 6F 61 64 
2f456     65 64 20    | 	byte	"Loaded "
2f459     00          | 	byte	0
2f45a                 | LR__5213
2f45a     2F          | 	byte	"/"
2f45b     00          | 	byte	0
2f45c                 | LR__5214
2f45c     53 74 6F 70 
2f460     70 65 64 20 
2f464     61 74 20 6C 
2f468     69 6E 65 20 | 	byte	"Stopped at line "
2f46c     00          | 	byte	0
2f46d                 | LR__5215
2f46d                 | 	byte	
2f46d     00          | 	byte	0
2f46e                 | LR__5216
2f46e                 | 	byte	
2f46e     00          | 	byte	0
2f46f                 | LR__5217
2f46f     2F 73 64 2F 
2f473     6D 65 64 69 
2f477     61 2F 68 2F | 	byte	"/sd/media/h/"
2f47b     00          | 	byte	0
2f47c                 | LR__5218
2f47c     53 79 73 74 
2f480     65 6D 20 65 
2f484     72 72 6F 72 
2f488     20          | 	byte	"System error "
2f489     00          | 	byte	0
2f48a                 | LR__5219
2f48a     3A 20       | 	byte	": "
2f48c     00          | 	byte	0
2f48d                 | LR__5220
2f48d                 | 	byte	
2f48d     00          | 	byte	0
2f48e                 | LR__5221
2f48e                 | 	byte	
2f48e     00          | 	byte	0
2f48f                 | LR__5222
2f48f     2F 73 64 2F 
2f493     6D 65 64 69 
2f497     61 2F 73 2F | 	byte	"/sd/media/s/"
2f49b     00          | 	byte	0
2f49c                 | LR__5223
2f49c     53 79 73 74 
2f4a0     65 6D 20 65 
2f4a4     72 72 6F 72 
2f4a8     20          | 	byte	"System error "
2f4a9     00          | 	byte	0
2f4aa                 | LR__5224
2f4aa     3A 20       | 	byte	": "
2f4ac     00          | 	byte	0
2f4ad                 | LR__5225
2f4ad                 | 	byte	
2f4ad     00          | 	byte	0
2f4ae                 | LR__5226
2f4ae     6E 6F 6E 61 
2f4b2     6D 65 2E 62 
2f4b6     61 73       | 	byte	"noname.bas"
2f4b8     00          | 	byte	0
2f4b9                 | LR__5227
2f4b9     45 72 72 6F 
2f4bd     72 20       | 	byte	"Error "
2f4bf     00          | 	byte	0
2f4c0                 | LR__5228
2f4c0     3A 20       | 	byte	": "
2f4c2     00          | 	byte	0
2f4c3                 | LR__5229
2f4c3                 | 	byte	
2f4c3     00          | 	byte	0
2f4c4                 | LR__5230
2f4c4                 | 	byte	
2f4c4     00          | 	byte	0
2f4c5                 | LR__5231
2f4c5     72 6E 64 3A 
2f4c9     20          | 	byte	"rnd: "
2f4ca     00          | 	byte	0
2f4cb                 | LR__5232
2f4cb     72 6E 64 3A 
2f4cf     20          | 	byte	"rnd: "
2f4d0     00          | 	byte	0
2f4d1                 | LR__5233
2f4d1     67 65 74 65 
2f4d5     6E 76 73 75 
2f4d9     73 74 61 69 
2f4dd     6E 3A 20    | 	byte	"getenvsustain: "
2f4e0     00          | 	byte	0
2f4e1                 | LR__5234
2f4e1     73 69 6E 3A 
2f4e5     20          | 	byte	"sin: "
2f4e6     00          | 	byte	0
2f4e7                 | LR__5235
2f4e7     6D 69 64 24 
2f4eb     3A 20       | 	byte	"mid$: "
2f4ed     00          | 	byte	0
2f4ee                 | LR__5236
2f4ee     6D 69 64 24 
2f4f2     3A 20       | 	byte	"mid$: "
2f4f4     00          | 	byte	0
2f4f5                 | LR__5237
2f4f5     72 69 67 68 
2f4f9     74 24 3A 20 | 	byte	"right$: "
2f4fd     00          | 	byte	0
2f4fe                 | LR__5238
2f4fe     72 69 67 68 
2f502     74 24 3A 20 | 	byte	"right$: "
2f506     00          | 	byte	0
2f507                 | LR__5239
2f507     6C 65 66 74 
2f50b     24 3A 20    | 	byte	"left$: "
2f50e     00          | 	byte	0
2f50f                 | LR__5240
2f50f     6C 65 66 74 
2f513     24 3A 20    | 	byte	"left$: "
2f516     00          | 	byte	0
2f517                 | LR__5241
2f517     61 73 63 3A 
2f51b     20          | 	byte	"asc: "
2f51c     00          | 	byte	0
2f51d                 | LR__5242
2f51d     61 73 63 3A 
2f521     20          | 	byte	"asc: "
2f522     00          | 	byte	0
2f523                 | LR__5243
2f523     6C 65 6E 3A 
2f527     20          | 	byte	"len: "
2f528     00          | 	byte	0
2f529                 | LR__5244
2f529     6C 65 6E 3A 
2f52d     20          | 	byte	"len: "
2f52e     00          | 	byte	0
2f52f                 | LR__5245
2f52f     63 68 72 24 
2f533     3A 20       | 	byte	"chr$: "
2f535     00          | 	byte	0
2f536                 | LR__5246
2f536     76 61 6C 3A 
2f53a     20          | 	byte	"val: "
2f53b     00          | 	byte	0
2f53c                 | LR__5247
2f53c     76 61 6C 3A 
2f540     20          | 	byte	"val: "
2f541     00          | 	byte	0
2f542                 | LR__5248
2f542     24          | 	byte	"$"
2f543     00          | 	byte	0
2f544                 | LR__5249
2f544     26 68       | 	byte	"&h"
2f546     00          | 	byte	0
2f547                 | LR__5250
2f547     25          | 	byte	"%"
2f548     00          | 	byte	0
2f549                 | LR__5251
2f549     26 62       | 	byte	"&b"
2f54b     00          | 	byte	0
2f54c                 | LR__5252
2f54c     68 65 78 24 
2f550     3A 20       | 	byte	"hex$: "
2f552     00          | 	byte	0
2f553                 | LR__5253
2f553     62 69 6E 24 
2f557     3A 20       | 	byte	"bin$: "
2f559     00          | 	byte	0
2f55a                 | LR__5254
2f55a     63 6F 73 3A 
2f55e     20          | 	byte	"cos: "
2f55f     00          | 	byte	0
2f560                 | LR__5255
2f560     74 61 6E 3A 
2f564     20          | 	byte	"tan: "
2f565     00          | 	byte	0
2f566                 | LR__5256
2f566     61 73 69 6E 
2f56a     3A 20       | 	byte	"asin: "
2f56c     00          | 	byte	0
2f56d                 | LR__5257
2f56d     61 63 6F 73 
2f571     3A 20       | 	byte	"acos: "
2f573     00          | 	byte	0
2f574                 | LR__5258
2f574     61 74 6E 3A 
2f578     20          | 	byte	"atn: "
2f579     00          | 	byte	0
2f57a                 | LR__5259
2f57a     73 71 72 3A 
2f57e     20          | 	byte	"sqr: "
2f57f     00          | 	byte	0
2f580                 | LR__5260
2f580     73 74 69 63 
2f584     6B 3A 20    | 	byte	"stick: "
2f587     00          | 	byte	0
2f588                 | LR__5261
2f588     73 74 72 69 
2f58c     67 3A 20    | 	byte	"strig: "
2f58f     00          | 	byte	0
2f590                 | LR__5262
2f590     67 65 74 70 
2f594     69 78 65 6C 
2f598     3A 20       | 	byte	"getpixel: "
2f59a     00          | 	byte	0
2f59b                 | LR__5263
2f59b     6C 6F 67 3A 
2f59f     20          | 	byte	"log: "
2f5a0     00          | 	byte	0
2f5a1                 | LR__5264
2f5a1     20 42 41 53 
2f5a5     49 43 20 62 
2f5a9     79 74 65 73 
2f5ad     20 66 72 65 
2f5b1     65          | 	byte	" BASIC bytes free"
2f5b2     00          | 	byte	0
2f5b3                 | LR__5265
2f5b3                 | 	byte	
2f5b3     00          | 	byte	0
2f5b4                 | LR__5266
2f5b4     2F 73 64 2F 
2f5b8     62 61 73    | 	byte	"/sd/bas"
2f5bb     00          | 	byte	0
2f5bc                 | LR__5267
2f5bc     57 6F 72 6B 
2f5c0     69 6E 67 20 
2f5c4     64 69 72 65 
2f5c8     63 74 6F 72 
2f5cc     79 3A 20    | 	byte	"Working directory: "
2f5cf     00          | 	byte	0
2f5d0                 | LR__5268
2f5d0     2A          | 	byte	"*"
2f5d1     00          | 	byte	0
2f5d2                 | LR__5269
2f5d2                 | 	byte	
2f5d2     00          | 	byte	0
2f5d3                 | LR__5270
2f5d3     5B 64 69 72 
2f5d7     5D 20       | 	byte	"[dir] "
2f5d9     00          | 	byte	0
2f5da                 | LR__5271
2f5da     2A          | 	byte	"*"
2f5db     00          | 	byte	0
2f5dc                 | LR__5272
2f5dc                 | 	byte	
2f5dc     00          | 	byte	0
2f5dd                 | LR__5273
2f5dd     2D 2D 2D 2D 
2f5e1     2D 6D 6F 72 
2f5e5     65 2C 20 70 
2f5e9     72 65 73 73 
2f5ed     20 61 6E 79 
2f5f1     20 6B 65 79 | 	byte	"-----more, press any key"
2f5f5     00          | 	byte	0
2f5f6                 | LR__5274
2f5f6     20 20 20 20 
      ...             
2f60e     20 20 20 20 
2f612     20          | 	byte	"                             "
2f613     00          | 	byte	0
2f614                 | LR__5275
2f614     2F          | 	byte	"/"
2f615     00          | 	byte	0
2f616                 | LR__5276
2f616     2F 73 64 2F 
2f61a     62 69 6E 2F | 	byte	"/sd/bin/"
2f61e     00          | 	byte	0
2f61f                 | LR__5277
2f61f     53 79 73 74 
2f623     65 6D 20 65 
2f627     72 72 6F 72 
2f62b     20          | 	byte	"System error "
2f62c     00          | 	byte	0
2f62d                 | LR__5278
2f62d     3A 20       | 	byte	": "
2f62f     00          | 	byte	0
2f630                 | LR__5279
2f630                 | 	byte	
2f630     00          | 	byte	0
2f631                 | LR__5280
2f631     45 78 70 65 
2f635     63 74 65 64 
2f639     20 6E 75 6D 
2f63d     62 65 72 2C 
2f641     20 67 6F 74 
2f645     20 73 6F 6D 
2f649     65 74 68 69 
2f64d     6E 67 20 65 
2f651     6C 73 65 2E | 	byte	"Expected number, got something else."
2f655     00          | 	byte	0
2f656                 | LR__5281
2f656     43 61 6E 6E 
2f65a     6F 74 20 61 
2f65e     64 64 20 61 
2f662     20 6E 75 6D 
2f666     62 65 72 20 
2f66a     74 6F 20 61 
2f66e     20 73 74 72 
2f672     69 6E 67 2E | 	byte	"Cannot add a number to a string."
2f676     00          | 	byte	0
2f677                 | LR__5282
2f677     43 61 6E 6E 
2f67b     6F 74 20 73 
2f67f     75 62 73 74 
2f683     72 61 63 74 
2f687     20 73 74 72 
2f68b     69 6E 67 73 
2f68f     2E          | 	byte	"Cannot substract strings."
2f690     00          | 	byte	0
2f691                 | LR__5283
2f691     55 6E 6B 6E 
2f695     6F 77 6E 20 
2f699     65 72 72 6F 
2f69d     72 20 77 68 
2f6a1     69 6C 65 20 
2f6a5     61 64 64 69 
2f6a9     6E 67 2E    | 	byte	"Unknown error while adding."
2f6ac     00          | 	byte	0
2f6ad                 | LR__5284
2f6ad     55 6E 6B 6E 
2f6b1     6F 77 6E 20 
2f6b5     65 72 72 6F 
2f6b9     72 20 77 68 
2f6bd     69 6C 65 20 
2f6c1     73 75 62 73 
2f6c5     74 72 61 63 
2f6c9     74 69 6E 67 
2f6cd     2E          | 	byte	"Unknown error while substracting."
2f6ce     00          | 	byte	0
2f6cf                 | LR__5285
2f6cf     43 61 6E 6E 
2f6d3     6F 74 20 64 
2f6d7     6F 20 6C 6F 
2f6db     67 69 63 20 
2f6df     6F 70 65 72 
2f6e3     61 74 69 6F 
2f6e7     6E 20 6F 6E 
2f6eb     20 73 74 72 
2f6ef     69 6E 67 20 
2f6f3     6F 72 20 66 
2f6f7     6C 6F 61 74 
2f6fb     2E          | 	byte	"Cannot do logic operation on string or float."
2f6fc     00          | 	byte	0
2f6fd                 | LR__5286
2f6fd     55 6E 6B 6E 
2f701     6F 77 6E 20 
2f705     65 72 72 6F 
2f709     72 20 77 68 
2f70d     69 6C 65 20 
2f711     64 6F 69 6E 
2f715     67 20 6C 6F 
2f719     67 69 63 20 
2f71d     6F 70 65 72 
2f721     61 74 69 6F 
2f725     6E 2E       | 	byte	"Unknown error while doing logic operation."
2f727     00          | 	byte	0
2f728                 | LR__5287
2f728     43 61 6E 6E 
2f72c     6F 74 20 6D 
2f730     75 6C 74 69 
2f734     70 6C 79 20 
2f738     73 74 72 69 
2f73c     6E 67 73 2E | 	byte	"Cannot multiply strings."
2f740     00          | 	byte	0
2f741                 | LR__5288
2f741     55 6E 6B 6E 
2f745     6F 77 6E 20 
2f749     65 72 72 6F 
2f74d     72 20 77 68 
2f751     69 6C 65 20 
2f755     6D 75 6C 74 
2f759     69 70 6C 79 
2f75d     69 6E 67 2E | 	byte	"Unknown error while multiplying."
2f761     00          | 	byte	0
2f762                 | LR__5289
2f762     43 61 6E 6E 
2f766     6F 74 20 64 
2f76a     69 76 69 64 
2f76e     65 20 73 74 
2f772     72 69 6E 67 
2f776     73 2E       | 	byte	"Cannot divide strings."
2f778     00          | 	byte	0
2f779                 | LR__5290
2f779     55 6E 6B 6E 
2f77d     6F 77 6E 20 
2f781     65 72 72 6F 
2f785     72 20 77 68 
2f789     69 6C 65 20 
2f78d     64 69 76 69 
2f791     64 69 6E 67 
2f795     2E          | 	byte	"Unknown error while dividing."
2f796     00          | 	byte	0
2f797                 | LR__5291
2f797     43 61 6E 6E 
2f79b     6F 74 20 63 
2f79f     6F 6D 70 75 
2f7a3     74 65 20 61 
2f7a7     20 70 6F 77 
2f7ab     65 72 20 6F 
2f7af     66 20 61 20 
2f7b3     73 74 72 69 
2f7b7     6E 67 2E    | 	byte	"Cannot compute a power of a string."
2f7ba     00          | 	byte	0
2f7bb                 | LR__5292
2f7bb     55 6E 6B 6E 
2f7bf     6F 77 6E 20 
2f7c3     65 72 72 6F 
2f7c7     72 20 77 68 
2f7cb     69 6C 65 20 
2f7cf     63 6F 6D 70 
2f7d3     75 74 69 6E 
2f7d7     67 20 61 20 
2f7db     70 6F 77 65 
2f7df     72 2E       | 	byte	"Unknown error while computing a power."
2f7e1     00          | 	byte	0
2f7e2                 | LR__5293
2f7e2     52 69 67 68 
2f7e6     74 20 70 61 
2f7ea     72 65 6E 74 
2f7ee     68 65 73 69 
2f7f2     73 20 65 78 
2f7f6     70 65 63 74 
2f7fa     65 64 2E    | 	byte	"Right parenthesis expected."
2f7fd     00          | 	byte	0
2f7fe                 | LR__5294
2f7fe     45 78 70 65 
2f802     63 74 65 64 
2f806     20 73 74 72 
2f80a     69 6E 67 2E | 	byte	"Expected string."
2f80e     00          | 	byte	0
2f80f                 | LR__5295
2f80f     45 78 70 65 
2f813     63 74 65 64 
2f817     20 66 6C 6F 
2f81b     61 74 2E    | 	byte	"Expected float."
2f81e     00          | 	byte	0
2f81f                 | LR__5296
2f81f     45 78 70 65 
2f823     63 74 65 64 
2f827     20 75 6E 73 
2f82b     69 67 6E 65 
2f82f     64 20 69 6E 
2f833     74 65 67 65 
2f837     72 2E       | 	byte	"Expected unsigned integer."
2f839     00          | 	byte	0
2f83a                 | LR__5297
2f83a     45 78 70 65 
2f83e     63 74 65 64 
2f842     20 69 6E 74 
2f846     65 67 65 72 
2f84a     2E          | 	byte	"Expected integer."
2f84b     00          | 	byte	0
2f84c                 | LR__5298
2f84c     4E 6F 20 6D 
2f850     6F 72 65 20 
2f854     76 61 72 69 
2f858     61 62 6C 65 
2f85c     20 73 6C 6F 
2f860     74 73 2E    | 	byte	"No more variable slots."
2f863     00          | 	byte	0
2f864                 | LR__5299
2f864     56 61 72 69 
2f868     61 62 6C 65 
2f86c     20 6E 6F 74 
2f870     20 66 6F 75 
2f874     6E 64 2E    | 	byte	"Variable not found."
2f877     00          | 	byte	0
2f878                 | LR__5300
2f878     43 6F 6D 6D 
2f87c     61 20 65 78 
2f880     70 65 63 74 
2f884     65 64 2E    | 	byte	"Comma expected."
2f887     00          | 	byte	0
2f888                 | LR__5301
2f888     43 6F 6D 6D 
2f88c     61 20 6F 72 
2f890     20 73 65 6D 
2f894     69 63 6F 6C 
2f898     6F 6E 20 65 
2f89c     78 70 65 63 
2f8a0     74 65 64 2E | 	byte	"Comma or semicolon expected."
2f8a4     00          | 	byte	0
2f8a5                 | LR__5302
2f8a5     55 6E 6B 6E 
2f8a9     6F 77 6E 20 
2f8ad     63 6F 6D 6D 
2f8b1     61 6E 64 2E | 	byte	"Unknown command."
2f8b5     00          | 	byte	0
2f8b6                 | LR__5303
2f8b6     53 74 61 63 
2f8ba     6B 20 75 6E 
2f8be     64 65 72 66 
2f8c2     6C 6F 77 2E | 	byte	"Stack underflow."
2f8c6     00          | 	byte	0
2f8c7                 | LR__5304
2f8c7     43 61 6E 6E 
2f8cb     6F 74 20 65 
2f8cf     78 65 63 75 
2f8d3     74 65 20 67 
2f8d7     6F 74 6F 20 
2f8db     69 6E 20 74 
2f8df     68 65 20 69 
2f8e3     6D 6D 65 64 
2f8e7     69 61 74 65 
2f8eb     20 6D 6F 64 
2f8ef     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
2f8f1     00          | 	byte	0
2f8f2                 | LR__5305
2f8f2     43 61 6E 6E 
2f8f6     6F 74 20 6C 
2f8fa     6F 61 64 20 
2f8fe     66 72 6F 6D 
2f902     20 74 68 69 
2f906     73 20 66 69 
2f90a     6C 65 2E    | 	byte	"Cannot load from this file."
2f90d     00          | 	byte	0
2f90e                 | LR__5306
2f90e     54 68 65 20 
2f912     70 72 6F 67 
2f916     72 61 6D 20 
2f91a     69 73 20 65 
2f91e     6D 70 74 79 
2f922     2E          | 	byte	"The program is empty."
2f923     00          | 	byte	0
2f924                 | LR__5307
2f924     49 66 20 61 
2f928     66 74 65 72 
2f92c     20 69 66 2E | 	byte	"If after if."
2f930     00          | 	byte	0
2f931                 | LR__5308
2f931     45 6D 70 74 
2f935     79 20 65 78 
2f939     70 72 65 73 
2f93d     73 69 6F 6E 
2f941     2E          | 	byte	"Empty expression."
2f942     00          | 	byte	0
2f943                 | LR__5309
2f943     53 74 72 69 
2f947     6E 67 20 65 
2f94b     78 70 65 63 
2f94f     74 65 64 2E | 	byte	"String expected."
2f953     00          | 	byte	0
2f954                 | LR__5310
2f954     49 6E 74 65 
2f958     72 70 72 65 
2f95c     74 65 72 20 
2f960     69 6E 74 65 
2f964     72 6E 61 6C 
2f968     20 65 72 72 
2f96c     6F 72 2E    | 	byte	"Interpreter internal error."
2f96f     00          | 	byte	0
2f970                 | LR__5311
2f970     45 78 70 65 
2f974     63 74 65 64 
2f978     20 61 73 73 
2f97c     69 67 6E 2E | 	byte	"Expected assign."
2f980     00          | 	byte	0
2f981                 | LR__5312
2f981     45 78 70 65 
2f985     63 74 65 64 
2f989     20 27 74 6F 
2f98d     27 2E       | 	byte	"Expected 'to'."
2f98f     00          | 	byte	0
2f990                 | LR__5313
2f990     45 78 70 65 
2f994     63 74 65 64 
2f998     20 69 6E 74 
2f99c     65 67 65 72 
2f9a0     20 76 61 72 
2f9a4     69 61 62 6C 
2f9a8     65 2E       | 	byte	"Expected integer variable."
2f9aa     00          | 	byte	0
2f9ab                 | LR__5314
2f9ab     55 6E 69 6E 
2f9af     69 74 69 61 
2f9b3     6C 69 7A 65 
2f9b7     64 20 76 61 
2f9bb     72 69 61 62 
2f9bf     6C 65 20 69 
2f9c3     6E 20 27 6E 
2f9c7     65 78 74 27 
2f9cb     2C 20 75 73 
2f9cf     65 20 27 66 
2f9d3     6F 72 27 20 
2f9d7     62 65 66 6F 
2f9db     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
2f9de     00          | 	byte	0
2f9df                 | LR__5315
2f9df     4E 6F 20 6D 
2f9e3     6F 72 65 20 
2f9e7     73 6C 6F 74 
2f9eb     73 20 66 6F 
2f9ef     72 20 27 66 
2f9f3     6F 72 27 2E | 	byte	"No more slots for 'for'."
2f9f7     00          | 	byte	0
2f9f8                 | LR__5316
2f9f8     27 4E 65 78 
2f9fc     74 27 20 64 
2fa00     6F 65 73 6E 
2fa04     27 74 20 6D 
2fa08     61 74 63 68 
2fa0c     20 27 66 6F 
2fa10     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
2fa13     00          | 	byte	0
2fa14                 | LR__5317
2fa14     27 47 6F 74 
2fa18     6F 27 20 74 
2fa1c     61 72 67 65 
2fa20     74 20 6C 69 
2fa24     6E 65 20 6E 
2fa28     6F 74 20 66 
2fa2c     6F 75 6E 64 
2fa30     2E          | 	byte	"'Goto' target line not found."
2fa31     00          | 	byte	0
2fa32                 | LR__5318
2fa32     42 61 64 20 
2fa36     6E 75 6D 62 
2fa3a     65 72 20 6F 
2fa3e     66 20 70 61 
2fa42     72 61 6D 65 
2fa46     74 65 72 73 | 	byte	"Bad number of parameters"
2fa4a     00          | 	byte	0
2fa4b                 | LR__5319
2fa4b     46 75 6E 63 
2fa4f     74 69 6F 6E 
2fa53     20 75 6E 64 
2fa57     65 66 69 6E 
2fa5b     65 64 20 66 
2fa5f     6F 72 20 73 
2fa63     74 72 69 6E 
2fa67     67 73       | 	byte	"Function undefined for strings"
2fa69     00          | 	byte	0
2fa6a                 | LR__5320
2fa6a     42 61 64 20 
2fa6e     70 61 72 61 
2fa72     6D 65 74 65 
2fa76     72 2E       | 	byte	"Bad parameter."
2fa78     00          | 	byte	0
2fa79                 | LR__5321
2fa79     43 61 6E 6E 
2fa7d     6F 74 20 64 
2fa81     65 63 6C 61 
2fa85     72 65 20 61 
2fa89     6E 20 61 72 
2fa8d     72 61 79 3A 
2fa91     20 74 68 65 
2fa95     20 76 61 72 
2fa99     69 61 62 6C 
2fa9d     65 20 65 78 
2faa1     69 73 74 73 
2faa5     2E          | 	byte	"Cannot declare an array: the variable exists."
2faa6     00          | 	byte	0
2faa7                 | LR__5322
2faa7     45 78 70 65 
2faab     63 74 65 64 
2faaf     20 27 28 27 
2fab3     2E          | 	byte	"Expected '('."
2fab4     00          | 	byte	0
2fab5                 | LR__5323
2fab5     45 78 70 65 
2fab9     63 74 65 64 
2fabd     20 27 29 27 
2fac1     20 6F 72 20 
2fac5     27 2C 27 2E | 	byte	"Expected ')' or ','."
2fac9     00          | 	byte	0
2faca                 | LR__5324
2faca     4E 6F 20 6D 
2face     6F 72 65 20 
2fad2     74 68 61 6E 
2fad6     20 33 20 64 
2fada     69 6D 65 6E 
2fade     73 69 6F 6E 
2fae2     73 20 73 75 
2fae6     70 70 6F 72 
2faea     74 65 64    | 	byte	"No more than 3 dimensions supported"
2faed     00          | 	byte	0
2faee                 | LR__5325
2faee     56 61 72 69 
2faf2     61 62 6C 65 
2faf6     20 6E 61 6D 
2fafa     65 20 65 78 
2fafe     70 65 63 74 
2fb02     65 64       | 	byte	"Variable name expected"
2fb04     00          | 	byte	0
2fb05                 | LR__5326
2fb05     54 79 70 65 
2fb09     20 6E 61 6D 
2fb0d     65 20 65 78 
2fb11     70 65 63 74 
2fb15     65 64       | 	byte	"Type name expected"
2fb17     00          | 	byte	0
2fb18                 | LR__5327
2fb18     54 79 70 65 
2fb1c     20 6E 6F 74 
2fb20     20 73 75 70 
2fb24     70 6F 72 74 
2fb28     65 64 20 79 
2fb2c     65 74       | 	byte	"Type not supported yet"
2fb2e     00          | 	byte	0
2fb2f                 | LR__5328
2fb2f     41 72 72 61 
2fb33     79 20 69 6E 
2fb37     64 65 78 20 
2fb3b     6F 75 74 20 
2fb3f     6F 66 20 72 
2fb43     61 6E 67 65 | 	byte	"Array index out of range"
2fb47     00          | 	byte	0
2fb48                 | LR__5329
2fb48     42 61 64 20 
2fb4c     74 79 70 65 
2fb50     20 77 68 69 
2fb54     6C 65 20 61 
2fb58     73 73 69 67 
2fb5c     6E 69 6E 67 
2fb60     20 74 6F 20 
2fb64     61 72 72 61 
2fb68     79          | 	byte	"Bad type while assigning to array"
2fb69     00          | 	byte	0
2fb6a                 | LR__5330
2fb6a     45 72 72 6F 
2fb6e     72 20       | 	byte	"Error "
2fb70     00          | 	byte	0
2fb71                 | LR__5331
2fb71     3A 20       | 	byte	": "
2fb73     00          | 	byte	0
2fb74                 | LR__5332
2fb74     2F 73 64    | 	byte	"/sd"
2fb77     00          | 	byte	0
2fb78                 | LR__5333
2fb78     2F 73 64 2F 
2fb7c     62 61 73    | 	byte	"/sd/bas"
2fb7f     00          | 	byte	0
2fb80                 | LR__5334
2fb80     2F 73 64 2F 
2fb84     62 61 73    | 	byte	"/sd/bas"
2fb87     00          | 	byte	0
2fb88                 | LR__5335
2fb88     20 42 41 53 
2fb8c     49 43 20 62 
2fb90     79 74 65 73 
2fb94     20 66 72 65 
2fb98     65          | 	byte	" BASIC bytes free"
2fb99     00          | 	byte	0
2fb9a                 | LR__5336
2fb9a     52 65 61 64 
2fb9e     79          | 	byte	"Ready"
2fb9f     00          | 	byte	0
2fba0                 | LR__5337
2fba0     6E 6F 6E 61 
2fba4     6D 65 2E 62 
2fba8     61 73       | 	byte	"noname.bas"
2fbaa     00          | 	byte	0
2fbab                 | LR__5338
2fbab                 | 	byte	
2fbab     00          | 	byte	0
2fbac                 | LR__5339
2fbac                 | 	byte	
2fbac     00          | 	byte	0
2fbad                 | LR__5340
2fbad                 | 	byte	
2fbad     00          | 	byte	0
2fbae     00 00       | 	alignl
2fbb0                 | _dat_
2fbb0     00 00 00 00 
2fbb4     00 00 00 00 
2fbb8     00 00 00 00 
2fbbc     00 00 00 00 | 	byte	$00[16]
2fbc0     61 41 17 0E 
2fbc4     62 42 00 00 
2fbc8     63 43 19 10 
2fbcc     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
2fbd0     65 45 18 0F 
2fbd4     66 46 00 00 
2fbd8     67 47 00 00 
2fbdc     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
2fbe0     69 49 00 00 
2fbe4     6A 4A 00 00 
2fbe8     6B 4B 00 00 
2fbec     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
2fbf0     6D 4D 00 00 
2fbf4     6E 4E 1A 11 
2fbf8     6F 4F 1E 15 
2fbfc     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
2fc00     71 51 00 00 
2fc04     72 52 00 00 
2fc08     73 53 1B 12 
2fc0c     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
2fc10     75 55 00 00 
2fc14     76 56 00 00 
2fc18     77 57 00 00 
2fc1c     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
2fc20     79 59 00 00 
2fc24     7A 5A 1D 14 
2fc28     31 21 04 00 
2fc2c     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
2fc30     33 23 06 00 
2fc34     34 24 07 00 
2fc38     35 25 08 00 
2fc3c     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
2fc40     37 26 0A 00 
2fc44     38 2A 0B 00 
2fc48     39 28 0C 00 
2fc4c     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
2fc50     8D 8D 00 00 
2fc54     9B 9B 00 00 
2fc58     88 88 00 00 
2fc5c     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
2fc60     20 20 00 00 
2fc64     2D 5F 00 00 
2fc68     3D 2B 00 00 
2fc6c     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
2fc70     5D 7D 00 00 
2fc74     5C 7C 00 00 
2fc78     23 7E 00 00 
2fc7c     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
2fc80     27 22 00 00 
2fc84     60 7E 03 00 
2fc88     2C 3C 00 00 
2fc8c     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
2fc90     2F 3F 00 00 
2fc94     B9 B9 00 00 
2fc98     BA 00 00 00 
2fc9c     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
2fca0     BC 00 00 00 
2fca4     BD 00 00 00 
2fca8     BE 00 00 00 
2fcac     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
2fcb0     C0 00 00 00 
2fcb4     C1 00 00 00 
2fcb8     C2 00 00 00 
2fcbc     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
2fcc0     C4 00 00 00 
2fcc4     C5 00 00 00 
2fcc8     C6 00 00 00 
2fccc     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
2fcd0     C8 00 00 00 
2fcd4     C9 00 00 00 
2fcd8     CA 00 00 00 
2fcdc     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
2fce0     7F 7F 00 00 
2fce4     CC 00 00 00 
2fce8     CD 00 00 00 
2fcec     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
2fcf0     CF 00 00 00 
2fcf4     D0 00 00 00 
2fcf8     D1 00 00 00 
2fcfc     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
2fd00     2F 2F 00 00 
2fd04     2A 2A 00 00 
2fd08     2D 2D 00 00 
2fd0c     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
2fd10     8D 8D 00 00 
2fd14     31 31 00 00 
2fd18     32 32 00 00 
2fd1c     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
2fd20     34 34 00 00 
2fd24     35 35 00 00 
2fd28     36 36 00 00 
2fd2c     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
2fd30     38 38 00 00 
2fd34     39 39 00 00 
2fd38     30 30 00 00 
2fd3c     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
2fd40     5C 7C 00 00 
2fd44     00 00 00 00 
2fd48     00 00 00 00 
2fd4c     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
2fd50     00 00 00 00 
      ...             
2fda8     00 00 00 00 
2fdac     00 00 00 00 | 	byte	$00[96]
2fdb0     2B 00 A6 F2 
2fdb4     24 A7 09 80 
2fdb8     5B 88 4D 89 
2fdbc     80 88 A5 88 | atari_spl file "atari.spl"
2fdc0     6D 88 B8 88 
2fdc4     80 88 CB 88 
2fdc8     92 88 A5 88 
2fdcc     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
2fdd0     A5 88 CA 88 
2fdd4     A6 88 DD 88 
2fdd8     B8 88 AB 89 
2fddc     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
2fde0     C8 AD C6 F1 
2fde4     91 06 B6 FF 
2fde8     13 00 4A 00 
2fdec     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
2fdf0     5D 00 5E 00 
2fdf4     5D 00 5E 00 
2fdf8     5E 00 5D 00 
2fdfc     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
2fe00     38 00 83 00 
2fe04     25 00 83 00 
2fe08     C3 FE D1 04 
2fe0c     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
2fe10     48 88 38 85 
2fe14     41 8A CB 88 
2fe18     28 89 B8 88 
2fe1c     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
2fe20     15 89 03 89 
2fe24     02 89 15 89 
2fe28     16 89 15 89 
2fe2c     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
2fe30     15 89 3A 89 
2fe34     72 89 E3 89 
2fe38     52 83 AD 97 
2fe3c     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
2fe40     0C 02 B6 FF 
2fe44     E1 00 A8 00 
2fe48     F3 00 A8 00 
2fe4c     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
2fe50     CE 00 CD 00 
2fe54     CD 00 BA 00 
2fe58     E1 00 BB 00 
2fe5c     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
2fe60     DF 00 C9 FF 
2fe64     E6 01 B6 06 
2fe68     EE DD 8D 98 
2fe6c     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
2fe70     97 89 73 89 
2fe74     3B 89 60 89 
2fe78     60 89 60 89 
2fe7c     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
2fe80     73 89 72 89 
2fe84     85 89 73 89 
2fe88     AA 89 60 89 
2fe8c     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
2fe90     E8 8A 18 86 
2fe94     92 88 A5 C2 
2fe98     E0 00 C3 05 
2fe9c     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
2fea0     F2 00 64 01 
2fea4     06 01 3E 01 
2fea8     2B 01 2B 01 
2feac     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
2feb0     2B 01 2A 01 
2feb4     2B 01 2B 01 
2feb8     2B 01 18 01 
2febc     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
2fec0     39 07 61 F3 
2fec4     C0 AF 37 85 
2fec8     0F 88 8B 8A 
2fecc     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
2fed0     AB 89 D0 89 
2fed4     AB 89 D0 89 
2fed8     D0 89 CF 89 
2fedc     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
2fee0     D0 89 F5 89 
2fee4     BD 89 08 8A 
2fee8     CF 89 E8 8A 
2feec     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
2fef0     53 B3 0D F8 
2fef4     F4 07 38 00 
2fef8     63 01 63 01 
2fefc     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
2ff00     88 01 88 01 
2ff04     76 01 88 01 
2ff08     88 01 89 01 
2ff0c     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
2ff10     75 01 AE 01 
2ff14     76 01 88 01 
2ff18     4A 00 46 06 
2ff1c     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
2ff20     08 8A 9A 86 
2ff24     33 8B 08 8A 
2ff28     2D 8A F5 89 
2ff2c     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
2ff30     2D 8A 2D 8A 
2ff34     2E 8A 1B 8A 
2ff38     40 8A 2D 8A 
2ff3c     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
2ff40     2E 8A 79 8A 
2ff44     66 8A C8 8B 
2ff48     72 82 2B 97 
2ff4c     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
2ff50     1D 02 05 01 
2ff54     F8 01 C0 01 
2ff58     0B 02 C0 01 
2ff5c     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
2ff60     F9 01 D3 01 
2ff64     F8 01 D3 01 
2ff68     F8 01 D2 01 
2ff6c     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
2ff70     E6 01 2B 01 
2ff74     8E 02 5F 07 
2ff78     F7 E2 ED 9C 
2ff7c     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
2ff80     E8 8A 78 8A 
2ff84     78 8A 65 8A 
2ff88     8B 8A 78 8A 
2ff8c     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
2ff90     8B 8A 9D 8A 
2ff94     9D 8A 8B 8A 
2ff98     C2 8A 78 8A 
2ff9c     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
2ffa0     70 8C 18 86 
2ffa4     8B 8A 23 C9 
2ffa8     CB 03 C4 05 
2ffac     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
2ffb0     0B 02 7B 02 
2ffb4     1E 02 55 02 
2ffb8     30 02 43 02 
2ffbc     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
2ffc0     43 02 44 02 
2ffc4     43 02 30 02 
2ffc8     68 02 31 02 
2ffcc     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
2ffd0     07 08 3F F7 
2ffd4     73 B2 13 85 
2ffd8     15 89 ED 8B 
2ffdc     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
2ffe0     B0 8A FB 8A 
2ffe4     D5 8A FA 8A 
2ffe8     E8 8A FB 8A 
2ffec     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
2fff0     E8 8A 21 8B 
2fff4     E7 8A 33 8B 
2fff8     E8 8A 26 8C 
2fffc     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
30000     8D B0 27 F6 
30004     9C 08 AD 01 
30008     7B 02 8D 02 
3000c     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
30010     A1 02 A0 02 
30014     A1 02 A0 02 
30018     A0 02 A0 02 
3001c     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
30020     7B 02 D8 02 
30024     7B 02 C6 02 
30028     3E 01 C3 05 
3002c     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
30030     00 8C 2A 86 
30034     E0 8C FA 8A 
30038     6A 8B FB 8A 
3003c     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
30040     45 8B 45 8B 
30044     45 8B 6B 8B 
30048     46 8B 59 8B 
3004c     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
30050     6B 8B 6B 8B 
30054     6B 8B 6B 8B 
30058     7D 8B 7D 8B 
3005c     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
30060     90 8B 91 8B 
30064     90 8B 90 8B 
30068     A3 8B A3 8B 
3006c     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
30070     B5 8B B6 8B 
30074     B5 8B B5 8B 
30078     B6 8B C8 8B 
3007c     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
30080     C8 8B DA 8B 
30084     DB 8B DB 8B 
30088     DB 8B DC 8B 
3008c     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
30090     EE 8B EE 8B 
30094     00 8C 01 8C 
30098     00 8C 01 8C 
3009c     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
300a0     12 8C 13 8C 
300a4     13 8C 26 8C 
300a8     26 8C 26 8C 
300ac     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
300b0     38 8C 38 8C 
300b4     38 8C 38 8C 
300b8     4B 8C 4B 8C 
300bc     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
300c0     5E 8C 5E 8C 
300c4     5E 8C 5E 8C 
300c8     70 8C 70 8C 
300cc     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
300d0     70 8C 83 8C 
300d4     83 8C 83 8C 
300d8     83 8C 96 8C 
300dc     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
300e0     95 8C A9 8C 
300e4     A9 8C A8 8C 
300e8     A8 8C A8 8C 
300ec     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
300f0     BB 8C BB 8C 
300f4     BB 8C CE 8C 
300f8     CE 8C CE 8C 
300fc     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
30100     E0 8C E1 8C 
30104     E1 8C E0 8C 
30108     F4 8C F2 8C 
3010c     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
30110     05 8D 05 8D 
30114     06 8D 06 8D 
30118     19 8D 19 8D 
3011c     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
30120     18 8D 2B 8D 
30124     2B 8D 2B 8D 
30128     2A 8D 3E 8D 
3012c     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
30130     3E 8D 51 8D 
30134     50 8D 50 8D 
30138     50 8D 51 8D 
3013c     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
30140     63 8D 64 8D 
30144     76 8D 75 8D 
30148     75 8D 76 8D 
3014c     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
30150     88 8D 88 8D 
30154     89 8D 9B 8D 
30158     9A 8D 9B 8D 
3015c     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
30160     AD 8D AE 8D 
30164     AD 8D AE 8D 
30168     C1 8D C1 8D 
3016c     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
30170     D3 8D D3 8D 
30174     D3 8D D3 8D 
30178     D3 8D E6 8D 
3017c     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
30180     E6 8D E6 8D 
30184     F9 8D F9 8D 
30188     F9 8D F8 8D 
3018c     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
30190     0B 8E 0B 8E 
30194     1D 8E 1D 8E 
30198     1E 8E 1E 8E 
3019c     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
301a0     31 8E 31 8E 
301a4     31 8E 42 8E 
301a8     43 8E 43 8E 
301ac     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
301b0     56 8E 56 8E 
301b4     55 8E 56 8E 
301b8     68 8E 69 8E 
301bc     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
301c0     69 8E 7B 8E 
301c4     7C 8E 7B 8E 
301c8     7B 8E 8D 8E 
301cc     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
301d0     8D 8E A1 8E 
301d4     A0 8E A1 8E 
301d8     A1 8E A0 8E 
301dc     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
301e0     B3 8E B3 8E 
301e4     C6 8E C5 8E 
301e8     C6 8E C6 8E 
301ec     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
301f0     D8 8E D9 8E 
301f4     D8 8E EC 8E 
301f8     EB 8E EC 8E 
301fc     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
30200     FE 8E FE 8E 
30204     FE 8E FE 8E 
30208     10 8F 10 8F 
3020c     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
30210     11 8F 23 8F 
30214     24 8F 23 8F 
30218     24 8F 37 8F 
3021c     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
30220     36 8F 36 8F 
30224     48 8F 49 8F 
30228     49 8F 49 8F 
3022c     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
30230     5B 8F 5C 8F 
30234     5B 8F 6E 8F 
30238     6E 8F 6E 8F 
3023c     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
30240     81 8F 81 8F 
30244     81 8F 81 8F 
30248     93 8F 93 8F 
3024c     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
30250     93 8F A6 8F 
30254     A6 8F A6 8F 
30258     A6 8F B9 8F 
3025c     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
30260     B9 8F B9 8F 
30264     CC 8F CB 8F 
30268     CB 8F CC 8F 
3026c     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
30270     DF 8F DE 8F 
30274     DE 8F F1 8F 
30278     F1 8F F1 8F 
3027c     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
30280     03 90 04 90 
30284     04 90 04 90 
30288     16 90 17 90 
3028c     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
30290     29 90 28 90 
30294     29 90 28 90 
30298     29 90 3C 90 
3029c     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
302a0     3C 90 4F 90 
302a4     4E 90 4E 90 
302a8     4E 90 4E 90 
302ac     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
302b0     61 90 61 90 
302b4     73 90 74 90 
302b8     74 90 74 90 
302bc     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
302c0     87 90 86 90 
302c4     87 90 86 90 
302c8     99 90 99 90 
302cc     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
302d0     AB 90 AB 90 
302d4     AC 90 AB 90 
302d8     AB 90 BF 90 
302dc     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
302e0     BE 90 D1 90 
302e4     D0 90 D1 90 
302e8     D1 90 D1 90 
302ec     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
302f0     E3 90 E4 90 
302f4     F6 90 F6 90 
302f8     F6 90 F6 90 
302fc     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
30300     09 91 0A 91 
30304     0A 91 1C 91 
30308     1C 91 1C 91 
3030c     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
30310     2F 91 2E 91 
30314     2F 91 2F 91 
30318     2E 91 41 91 
3031c     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
30320     41 91 53 91 
30324     54 91 54 91 
30328     53 91 54 91 
3032c     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
30330     67 91 67 91 
30334     79 91 7A 91 
30338     79 91 78 91 
3033c     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
30340     8C 91 8B 91 
30344     8C 91 8C 91 
30348     9E 91 9E 91 
3034c     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
30350     B1 91 B1 91 
30354     B2 91 B1 91 
30358     B1 91 C4 91 
3035c     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
30360     C4 91 D6 91 
30364     D7 91 D7 91 
30368     D7 91 D6 91 
3036c     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
30370     EA 91 EA 91 
30374     EA 91 FC 91 
30378     FC 91 FB 91 
3037c     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
30380     0E 92 0F 92 
30384     0F 92 0E 92 
30388     21 92 21 92 
3038c     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
30390     21 92 34 92 
30394     33 92 34 92 
30398     34 92 47 92 
3039c     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
303a0     46 92 47 92 
303a4     59 92 59 92 
303a8     59 92 59 92 
303ac     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
303b0     6C 92 6C 92 
303b4     6B 92 7E 92 
303b8     7E 92 7E 92 
303bc     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
303c0     92 92 91 92 
303c4     91 92 90 92 
303c8     91 92 A4 92 
303cc     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
303d0     A3 92 B6 92 
303d4     B6 92 B7 92 
303d8     B7 92 B6 92 
303dc     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
303e0     CA 92 C9 92 
303e4     CA 92 DC 92 
303e8     DC 92 DC 92 
303ec     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
303f0     EF 92 EF 92 
303f4     EF 92 EF 92 
303f8     01 93 01 93 
303fc     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
30400     15 93 14 93 
30404     14 93 14 93 
30408     14 93 27 93 
3040c     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
30410     27 93 39 93 
30414     3A 93 39 93 
30418     39 93 39 93 
3041c     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
30420     4B 93 4C 93 
30424     5F 93 5F 93 
30428     5F 93 5E 93 
3042c     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
30430     5F 93 84 93 
30434     4C 93 96 93 
30438     5F 93 AE 94 
3043c     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
30440     7B C1 00 00 
30444     00 00 00 00 
30448     00 00 00 00 
3044c     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30450     00 00 00 00 | 	byte	$00, $00, $00, $00
30454     00 00 00 00 | zero long 0
30458     7A D7 00 80 
3045c     87 8A 48 8F 
30460     EC 8C 76 8D 
30464     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
30468     3C 8D 82 8D 
3046c     42 8D 88 8D 
30470     8C 8D 8E 8D 
30474     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
30478     97 8D DE 8D 
3047c     E1 8D F1 8E 
30480     D8 8C A3 83 
30484     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
30488     65 71 C9 65 
3048c     FC 64 C4 65 
30490     C1 65 BF 65 
30494     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
30498     B6 65 B4 65 
3049c     B2 65 AE 65 
304a0     AC 65 ED 65 
304a4     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
304a8     5E 65 25 66 
304ac     FA 62 23 6B 
304b0     B5 6C 61 0A 
304b4     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
304b8     5D 90 BE 8D 
304bc     47 8E C3 8D 
304c0     09 8E C9 8D 
304c4     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
304c8     15 8E 19 8E 
304cc     1B 8E 62 8E 
304d0     64 8E 68 8E 
304d4     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
304d8     B5 8E 4C 90 
304dc     FA 84 3C 9D 
304e0     98 13 79 6D 
304e4     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
304e8     D9 66 50 66 
304ec     D4 66 4B 66 
304f0     8C 66 46 66 
304f4     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
304f8     81 66 3A 66 
304fc     7C 66 36 66 
30500     76 66 30 66 
30504     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
30508     6B 66 88 72 
3050c     BF 37 E7 B7 
30510     75 83 8B 8E 
30514     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
30518     94 8E 96 8E 
3051c     DD 8E 9C 8E 
30520     E2 8E A2 8E 
30524     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
30528     EE 8E AE 8E 
3052c     38 8F B5 8E 
30530     3F 8F FD 8E 
30534     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
30538     A5 87 1E E3 
3053c     6D 5D FA 71 
30540     41 64 25 67 
30544     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
30548     D9 66 1A 67 
3054c     18 67 15 67 
30550     12 67 0F 67 
30554     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
30558     07 67 C0 66 
3055c     01 67 BC 66 
30560     B8 66 DE 64 
30564     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
30568     43 E5 1F 8B 
3056c     14 8A F1 90 
30570     1C 8F 63 8F 
30574     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
30578     29 8F 6E 8F 
3057c     72 8F 75 8F 
30580     34 8F BE 8F 
30584     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
30588     84 8F 87 8F 
3058c     CC 8F 56 90 
30590     67 91 49 80 
30594     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
30598     46 77 A6 66 
3059c     E8 66 B0 67 
305a0     AD 67 ED 67 
305a4     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
305a8     A2 67 E3 67 
305ac     9D 67 9A 67 
305b0     98 67 94 67 
305b4     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
305b8     49 67 CD 67 
305bc     28 65 5F 6E 
305c0     82 67 3A 01 
305c4     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
305c8     C2 91 A9 8F 
305cc     EF 8F AE 8F 
305d0     F4 8F B5 8F 
305d4     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
305d8     01 90 03 90 
305dc     07 90 09 90 
305e0     0C 90 53 90 
305e4     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
305e8     18 90 44 93 
305ec     85 84 D6 9D 
305f0     87 1F 2F 75 
305f4     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
305f8     C4 68 F6 67 
305fc     BE 68 F1 67 
30600     76 68 2E 68 
30604     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
30608     27 68 24 68 
3060c     64 68 1E 68 
30610     5F 68 19 68 
30614     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
30618     DC 68 56 72 
3061c     7E 36 C2 B8 
30620     D7 84 73 90 
30624     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
30628     7B 90 7F 90 
3062c     82 90 84 90 
30630     CB 90 8B 90 
30634     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
30638     D7 90 96 90 
3063c     20 91 59 90 
30640     25 91 A2 90 
30644     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
30648     D0 89 40 EE 
3064c     12 64 C4 71 
30650     29 66 0C 69 
30654     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
30658     C0 68 02 69 
3065c     FE 68 FB 68 
30660     F9 68 F6 68 
30664     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
30668     EE 68 A8 68 
3066c     2C 69 5F 68 
30670     E2 68 81 66 
30674     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
30678     1E EB A6 8A 
3067c     73 8B 5E 93 
30680     7B 90 48 91 
30684     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
30688     0D 91 11 91 
3068c     14 91 16 91 
30690     5C 91 1C 91 
30694     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
30698     68 91 AF 91 
3069c     2A 91 B5 91 
306a0     75 91 1A 94 
306a4     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
306a8     70 0E CB 6C 
306ac     5D 6E C4 67 
306b0     99 69 54 69 
306b4     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
306b8     D2 69 49 69 
306bc     89 69 86 69 
306c0     40 69 C4 69 
306c4     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
306c8     35 69 76 69 
306cc     58 67 EB 6D 
306d0     E9 6D 89 0F 
306d4     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
306d8     33 94 94 91 
306dc     D9 91 56 91 
306e0     E0 91 9F 91 
306e4     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
306e8     EC 91 EE 91 
306ec     F1 91 F4 91 
306f0     F7 91 3D 92 
306f4     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
306f8     46 92 21 94 
306fc     11 89 A4 9D 
30700     FD 0E 8F 6C 
30704     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
30708     28 6A E1 69 
3070c     65 6A 1F 6A 
30710     5F 6A 1A 6A 
30714     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
30718     54 6A 0F 6A 
3071c     4F 6A 09 6A 
30720     06 6A 03 6A 
30724     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
30728     23 68 69 77 
3072c     3A 4D 38 CA 
30730     38 86 4E 91 
30734     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
30738     64 92 24 92 
3073c     6A 92 2A 92 
30740     70 92 30 92 
30744     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
30748     7B 92 7E 92 
3074c     C5 92 84 92 
30750     CB 92 8A 92 
30754     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
30758     4D 8D F9 E2 
3075c     97 59 FE 74 
30760     DB 68 6D 6A 
30764     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
30768     A8 6A A5 6A 
3076c     A3 6A 9F 6A 
30770     9D 6A 9B 6A 
30774     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
30778     D6 6A 8F 6A 
3077c     CF 6A 46 6A 
30780     CA 6A E1 67 
30784     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
30788     D3 F7 15 92 
3078c     90 8C BF 94 
30790     A6 92 EB 92 
30794     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
30798     B1 92 F7 92 
3079c     FA 92 FD 92 
307a0     00 93 02 93 
307a4     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
307a8     4F 93 52 93 
307ac     54 93 22 94 
307b0     5A 93 8F 88 
307b4     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
307b8     1C 77 07 6C 
307bc     E8 69 7A 6B 
307c0     34 6B 75 6B 
307c4     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
307c8     29 6B 26 6B 
307cc     24 6B 21 6B 
307d0     1D 6B 5E 6B 
307d4     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
307d8     12 6B 52 6B 
307dc     34 69 34 6E 
307e0     BA 73 A4 24 
307e4     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
307e8     7A 94 B3 93 
307ec     72 93 31 93 
307f0     78 93 7A 93 
307f4     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
307f8     83 93 86 93 
307fc     89 93 D0 93 
30800     D2 93 D5 93 
30804     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
30808     DD 93 40 96 
3080c     30 8B 99 9C 
30810     52 10 94 71 
30814     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
30818     46 6C 79 6B 
3081c     40 6C B7 6B 
30820     F7 6B B1 6B 
30824     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
30828     EC 6B A5 6B 
3082c     A2 6B 9F 6B 
30830     9D 6B 9A 6B 
30834     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
30838     C8 6A E4 76 
3083c     20 4B F9 CE 
30840     2E 8A 1A 92 
30844     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
30848     FB 93 BA 93 
3084c     01 94 03 94 
30850     4A 94 09 94 
30854     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
30858     55 94 14 94 
3085c     9E 94 1A 94 
30860     61 94 20 94 
30864     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
30868     3E 87 E5 CD 
3086c     5F 50 6C 78 
30870     B5 6A 04 6C 
30874     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
30878     83 6C 7F 6C 
3087c     7C 6C 36 6C 
30880     76 6C 74 6C 
30884     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
30888     6B 6C 25 6C 
3088c     66 6C 1F 6C 
30890     1D 6C 41 6A 
30894     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
30898     BA FA FC 94 
3089c     5B 8D 97 96 
308a0     3B 94 C5 94 
308a4     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
308a8     89 94 8C 94 
308ac     8F 94 92 94 
308b0     94 94 DB 94 
308b4     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
308b8     E4 94 E7 94 
308bc     2D 95 74 95 
308c0     C8 96 15 89 
308c4     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
308c8     CB 75 31 6F 
308cc     7E 6B 10 6D 
308d0     C9 6C 0A 6D 
308d4     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
308d8     BD 6C FF 6C 
308dc     FB 6C F9 6C 
308e0     B2 6C F3 6C 
308e4     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
308e8     A7 6C E8 6C 
308ec     0D 6B 85 6F 
308f0     C7 74 10 28 
308f4     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
308f8     96 96 47 95 
308fc     06 95 0A 95 
30900     0C 95 0F 95 
30904     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
30908     17 95 5E 95 
3090c     61 95 63 95 
30910     22 95 AC 95 
30914     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
30918     72 95 17 98 
3091c     59 8E 01 96 
30920     CF FC 5A 68 
30924     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
30928     96 6D 50 6D 
3092c     D5 6D 4A 6D 
30930     8C 6D 89 6D 
30934     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
30938     80 6D 3A 6D 
3093c     7A 6D 77 6D 
30940     75 6D 71 6D 
30944     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
30948     18 6C BC 78 
3094c     9A 4F 7E CF 
30950     1F 89 F1 93 
30954     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
30958     D2 95 4E 95 
3095c     D7 95 53 95 
30960     DD 95 E0 95 
30964     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
30968     A5 95 EB 95 
3096c     EE 95 F0 95 
30970     37 96 B3 95 
30974     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
30978     1A 98 D5 8D 
3097c     C5 9F CD 0F 
30980     0F 71 F3 73 
30984     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
30988     D9 6D 5E 6E 
3098c     D3 6D 58 6E 
30990     12 6E 0F 6E 
30994     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
30998     49 6E BF 6D 
3099c     87 6E 76 6D 
309a0     81 6E 11 6B 
309a4     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
309a8     3F 09 44 95 
309ac     E5 8D 3F 99 
309b0     D4 95 A2 96 
309b4     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
309b8     23 96 69 96 
309bc     6B 96 6E 96 
309c0     71 96 74 96 
309c4     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
309c8     BF 96 3C 96 
309cc     C6 96 C8 96 
309d0     A3 98 51 8D 
309d4     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
309d8     CF 75 29 73 
309dc     90 6C EC 6E 
309e0     62 6E E7 6E 
309e4     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
309e8     9A 6E 98 6E 
309ec     95 6E 91 6E 
309f0     8E 6E CF 6E 
309f4     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
309f8     40 6E C3 6E 
309fc     E8 6C 45 6F 
30a00     A5 7B C9 35 
30a04     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
30a08     2D 98 23 97 
30a0c     E1 96 A0 96 
30a10     A4 96 EA 96 
30a14     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
30a18     AF 96 F4 96 
30a1c     F8 96 3E 97 
30a20     FD 96 43 97 
30a24     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
30a28     08 97 6B 99 
30a2c     D6 92 88 91 
30a30     D8 EE 84 66 
30a34     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
30a38     2E 6F E7 6E 
30a3c     6C 6F 24 6F 
30a40     21 6F 1F 6F 
30a44     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
30a48     17 6F 13 6F 
30a4c     54 6F 0E 6F 
30a50     0B 6F 4B 6F 
30a54     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
30a58     27 6D 1C 7B 
30a5c     19 59 9F DB 
30a60     66 8E BC 94 
30a64     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
30a68     67 97 26 97 
30a6c     6D 97 2B 97 
30a70     72 97 32 97 
30a74     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
30a78     C1 97 7F 97 
30a7c     C6 97 85 97 
30a80     CB 97 CE 97 
30a84     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
30a88     EC 8A C4 C6 
30a8c     68 4C F4 7D 
30a90     63 6E E8 6E 
30a94     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
30a98     ED 6F A7 6F 
30a9c     E7 6F A0 6F 
30aa0     E1 6F 9B 6F 
30aa4     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
30aa8     D5 6F 8F 6F 
30aac     CE 6F 45 6F 
30ab0     86 6F 68 6D 
30ab4     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
30ab8     C0 13 AD A2 
30abc     A7 8E 79 99 
30ac0     E6 97 E8 97 
30ac4     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
30ac8     F1 97 F3 97 
30acc     F6 97 F9 97 
30ad0     FB 97 FE 97 
30ad4     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
30ad8     4A 98 0A 98 
30adc     93 98 0F 98 
30ae0     7F 9B BF 8C 
30ae4     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
30ae8     91 7B 62 73 
30aec     1A 6E B9 70 
30af0     EB 6F B3 70 
30af4     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
30af8     25 70 20 70 
30afc     1E 70 1B 70 
30b00     18 70 15 70 
30b04     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
30b08     0D 70 09 70 
30b0c     07 70 03 70 
30b10     01 70 FD 6F 
30b14     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
30b18     F6 6F F2 6F 
30b1c     EF 6F EC 6F 
30b20     2C 70 E6 6F 
30b24     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
30b28     DD 6F 97 6F 
30b2c     D7 6F 84 6E 
30b30     8F 6F 3F 7D 
30b34     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
30b36     00 00 00 00 | zero1 long 0
30b3a     FF FF FF FF 
30b3e     FF FF       | atarist_spl file "atarist.spl" '512
30b40     00 00 00 00 
30b44     00 00 00 00 
30b48     00 00       | 	byte	$00[10]
30b4a     17 7F F2 7F 
30b4e     B2 7F 72 7F 
30b52     33 7F F4 7E 
30b56     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
30b5a     36 7E F5 7D 
30b5e     E9 51 F2 0D 
30b62     8E 00 F3 FD 
30b66     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
30b6a     57 FD 58 FD 
30b6e     5B FD 5C FD 
30b72     5C FD 60 7D 
30b76     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
30b7a     D6 7C 98 7C 
30b7e     59 7C 1A 7C 
30b82     DC 7B 9E 7B 
30b86     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
30b8a     F3 05 00 FD 
30b8e     41 FB EA FA 
30b92     D9 FA DB FA 
30b96     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
30b9a     E4 FA 9B 36 
30b9e     F8 7A C0 7A 
30ba2     84 7A 45 7A 
30ba6     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
30baa     8E 79 51 79 
30bae     15 79 D7 78 
30bb2     3C 1F EB FF 
30bb6     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
30bba     6D F8 65 F8 
30bbe     68 F8 6D F8 
30bc2     70 F8 74 F8 
30bc6     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
30bca     AB 60 79 60 
30bce     4B 60 1A 60 
30bd2     E9 5F B9 5F 
30bd6     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
30bda     FB 59 B2 0B 
30bde     92 FA 3A F7 
30be2     96 F6 79 F6 
30be6     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
30bea     82 F6 86 F6 
30bee     8C F6 DB 5D 
30bf2     F1 5E C1 5E 
30bf6     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
30bfa     34 5E 04 5E 
30bfe     D6 5D A6 5D 
30c02     78 5D D4 3E 
30c06     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
30c0a     27 F5 BA F4 
30c0e     AB F4 AD F4 
30c12     B2 F4 B8 F4 
30c16     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
30c1a     26 5D 2B 5D 
30c1e     FC 5C CD 5C 
30c22     9F 5C 70 5C 
30c26     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
30c2a     E5 5B B8 5B 
30c2e     DB 24 A7 FC 
30c32     D1 F4 4D F3 
30c36     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
30c3a     04 F3 0B F3 
30c3e     11 F3 16 F3 
30c42     DE 18 98 5B 
30c46     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
30c4a     4E 4A 29 48 
30c4e     A0 47 6A 47 
30c52     43 47 20 47 
30c56     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
30c5a     E2 F6 98 F2 
30c5e     C5 F1 A3 F1 
30c62     A3 F1 A8 F1 
30c66     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
30c6a     BF F1 00 3D 
30c6e     EF 46 CD 46 
30c72     AA 46 86 46 
30c76     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
30c7a     1C 46 F9 45 
30c7e     D7 45 EE 43 
30c82     DE 02 E8 F3 
30c86     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
30c8a     61 F0 65 F0 
30c8e     6D F0 74 F0 
30c92     7C F0 84 F0 
30c96     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
30c9a     8E 45 6D 45 
30c9e     49 45 27 45 
30ca2     05 45 E1 44 
30ca6     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
30caa     F1 2F A9 FB 
30cae     8B F1 9B EF 
30cb2     40 EF 36 EF 
30cb6     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
30cba     4D EF 56 EF 
30cbe     5E EF 7B 44 
30cc2     8C 44 69 44 
30cc6     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
30cca     03 44 E1 43 
30cce     C0 43 F5 37 
30cd2     69 33 0F 11 
30cd6     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
30cda     66 EE 37 EE 
30cde     38 EE 40 EE 
30ce2     48 EE 51 EE 
30ce6     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
30cea     7D 32 6A 32 
30cee     51 32 37 32 
30cf2     1F 32 05 32 
30cf6     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
30cfa     B9 31 A1 31 
30cfe     F1 04 F4 F1 
30d02     50 EE A0 ED 
30d06     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
30d0a     93 ED 9A ED 
30d0e     A4 ED AD ED 
30d12     F4 27 C1 31 
30d16     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
30d1a     78 31 5F 31 
30d1e     46 31 2E 31 
30d22     15 31 FC 30 
30d26     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
30d2a     C4 EF 4A ED 
30d2e     DC EC CB EC 
30d32     D2 EC DA EC 
30d36     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
30d3a     F9 EC 64 2F 
30d3e     0A 31 F1 30 
30d42     D9 30 C0 30 
30d46     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
30d4a     78 30 5F 30 
30d4e     46 30 38 23 
30d52     A6 F6 19 EE 
30d56     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
30d5a     20 EC 28 EC 
30d5e     32 EC 3C EC 
30d62     47 EC 51 EC 
30d66     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
30d6a     A3 22 93 22 
30d6e     7F 22 6E 22 
30d72     5D 22 4C 22 
30d76     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
30d7a     77 09 76 F1 
30d7e     CC EC F0 EB 
30d82     CD EB CE EB 
30d86     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
30d8a     ED EB F5 EB 
30d8e     3E F6 6B 22 
30d92     5F 22 4E 22 
30d96     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
30d9a     1B 22 0B 22 
30d9e     FA 21 E9 21 
30da2     D8 21 4D FF 
30da6     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
30daa     92 EB 7B EB 
30dae     82 EB 8C EB 
30db2     97 EB A1 EB 
30db6     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
30dba     15 22 04 22 
30dbe     F3 21 E3 21 
30dc2     D2 21 C0 21 
30dc6     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
30dca     8E 21 7D 21 
30dce     9A F8 A4 ED 
30dd2     8E EB 2F EB 
30dd6     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
30dda     37 EB 42 EB 
30dde     4C EB 57 EB 
30de2     B2 17 22 19 
30de6     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
30dea     FD 18 EF 18 
30dee     E3 18 D6 18 
30df2     CA 18 BD 18 
30df6     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
30dfa     60 EC 35 EB 
30dfe     01 EB 01 EB 
30e02     0C EB 16 EB 
30e06     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
30e0a     34 EB D0 18 
30e0e     00 19 F4 18 
30e12     E8 18 DA 18 
30e16     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
30e1a     B6 18 A9 18 
30e1e     9D 18 91 05 
30e22     F0 EF CA EB 
30e26     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
30e2a     E8 EA F2 EA 
30e2e     FE EA 07 EB 
30e32     12 EB C2 EF 
30e36     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
30e3a     D9 18 CD 18 
30e3e     C0 18 B3 18 
30e42     A7 18 9B 18 
30e46     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
30e4a     B8 FC 30 EE 
30e4e     61 EB DC EA 
30e52     CD EA D2 EA 
30e56     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
30e5a     F3 EA FE EA 
30e5e     D2 09 D1 18 
30e62     C3 18 17 18 
30e66     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
30e6a     66 11 52 11 
30e6e     49 11 41 11 
30e72     38 11 E0 F4 
30e76     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
30e7a     C9 EA C5 EA 
30e7e     CF EA DB EA 
30e82     E6 EA EF EA 
30e86     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
30e8a     89 11 80 11 
30e8e     78 11 6E 11 
30e92     67 11 5D 11 
30e96     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
30e9a     43 11 32 0D 
30e9e     9C F1 07 EC 
30ea2     F8 EA CD EA 
30ea6     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
30eaa     E4 EA ED EA 
30eae     F8 EA 02 EB 
30eb2     55 11 91 11 
30eb6     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
30eba     75 11 6E 11 
30ebe     64 11 5E 11 
30ec2     54 11 4A 11 
30ec6     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
30eca     A8 EB F1 EA 
30ece     D9 EA DC EA 
30ed2     E8 EA F1 EA 
30ed6     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
30eda     A6 EB 9E 11 
30ede     A0 11 96 11 
30ee2     8D 11 85 11 
30ee6     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
30eea     6A 11 CA 0D 
30eee     36 0B 57 F8 
30ef2     6C ED 57 EB 
30ef6     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
30efa     F4 EA FF EA 
30efe     09 EB 15 EB 
30f02     1E EB 1A FD 
30f06     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
30f0a     ED 0A E8 0A 
30f0e     E2 0A DC 0A 
30f12     D6 0A D1 0A 
30f16     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
30f1a     F8 F3 BC EC 
30f1e     57 EB 1E EB 
30f22     18 EB 24 EB 
30f26     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
30f2a     42 EB 4D EB 
30f2e     08 09 20 0B 
30f32     1A 0B 14 0B 
30f36     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
30f3a     04 0B FE 0A 
30f3e     F9 0A F2 0A 
30f42     84 08 3A F1 
30f46     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
30f4a     42 EB 42 EB 
30f4e     4E EB 57 EB 
30f52     62 EB 6B EB 
30f56     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
30f5a     48 0B 43 0B 
30f5e     3C 0B 36 0B 
30f62     31 0B 2C 0B 
30f66     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
30f6a     1B 0B 5C 00 
30f6e     6A EF 1B EC 
30f72     81 EB 6A EB 
30f76     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
30f7a     85 EB 8E EB 
30f7e     99 EB A3 EB 
30f82     DD 05 E5 05 
30f86     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
30f8a     DB 05 D8 05 
30f8e     D5 05 D1 05 
30f92     D0 05 CB 05 
30f96     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
30f9a     0C EC BB EB 
30f9e     B3 EB BB EB 
30fa2     C5 EB D0 EB 
30fa6     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
30faa     E4 F7 2C 06 
30fae     28 06 24 06 
30fb2     22 06 1F 06 
30fb6     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
30fba     16 06 14 06 
30fbe     0F 06 D0 F3 
30fc2     65 ED 2D EC 
30fc6     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
30fca     01 EC 0A EC 
30fce     14 EC 1E EC 
30fd2     29 EC FB 03 
30fd6     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
30fda     63 06 60 06 
30fde     5E 06 59 06 
30fe2     58 06 54 06 
30fe6     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
30fea     69 F1 21 ED 
30fee     55 EC 33 EC 
30ff2     36 EC 40 EC 
30ff6     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
30ffa     5C EC 68 EC 
30ffe     92 02 D9 02 
31002     D7 02 D7 02 
31006     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
3100a     D1 02 D1 02 
3100e     CE 02 CD 02 
31012     5D FC 80 EF 
31016     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
3101a     83 EC 8A EC 
3101e     93 EC 9C EC 
31022     A5 EC B1 EC 
31026     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
3102a     2B 03 2A 03 
3102e     29 03 26 03 
31032     25 03 24 03 
31036     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
3103a     1F 03 70 F7 
3103e     D0 EE 27 ED 
31042     DB EC D4 EC 
31046     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
3104a     F0 EC FA EC 
3104e     02 ED F9 F4 
31052     7B 03 7C 03 
31056     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
3105a     75 03 73 03 
3105e     72 03 70 03 
31062     6D 03 6C 03 
31066     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
3106a     54 ED 22 ED 
3106e     22 ED 2C ED 
31072     35 ED 3F ED 
31076     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
3107a     14 01 C3 03 
3107e     C1 03 C0 03 
31082     5F 01 A5 00 
31086     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
3108a     7B 00 7C 00 
3108e     20 00 85 F1 
31092     2A EE 89 ED 
31096     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
3109a     80 ED 87 ED 
3109e     90 ED 9A ED 
310a2     A3 ED 73 00 
310a6     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
310aa     D0 00 D0 00 
310ae     D0 00 D0 00 
310b2     D0 00 CF 00 
310b6     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
310ba     80 F0 3D EE 
310be     D5 ED C7 ED 
310c2     CD ED D6 ED 
310c6     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
310ca     F2 ED FA ED 
310ce     1D 01 29 01 
310d2     27 01 27 01 
310d6     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
310da     25 01 26 01 
310de     26 01 23 01 
310e2     D0 F7 EC EF 
310e6     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
310ea     1C EE 24 EE 
310ee     2D EE 37 EE 
310f2     40 EE 47 EE 
310f6     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
310fa     7D 01 7B 01 
310fe     7A 01 7A 01 
31102     79 01 78 01 
31106     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
3110a     84 FE DE F3 
3110e     6C EF 93 EE 
31112     72 EE 72 EE 
31116     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
3111a     8B EE 95 EE 
3111e     9E EE 15 FC 
31122     67 FE 67 FE 
31126     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
3112a     6B FE 6B FE 
3112e     6D FE 6D FE 
31132     6D FE 6F FE 
31136     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
3113a     DF EE CC EE 
3113e     CF EE D9 EE 
31142     E1 EE EA EE 
31146     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
3114a     5A FE C4 FE 
3114e     C3 FE C5 FE 
31152     C6 FE C6 FE 
31156     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
3115a     C8 FE C7 FE 
3115e     DA FB 85 F1 
31162     8D EF 31 EF 
31166     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
3116a     34 EF 3E EF 
3116e     46 EF 4F EF 
31172     57 EF 0D FF 
31176     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
3117a     1F FF 1F FF 
3117e     21 FF 21 FF 
31182     21 FF 21 FF 
31186     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
3118a     15 F1 BE EF 
3118e     84 EF 7E EF 
31192     88 EF 8F EF 
31196     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
3119a     A9 EF 06 F2 
3119e     A6 FC AB FC 
311a2     AD FC AE FC 
311a6     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
311aa     B2 FC B4 FC 
311ae     B6 FC B7 FC 
311b2     8B F4 BD F0 
311b6     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
311ba     E4 EF EE EF 
311be     F6 EF FD EF 
311c2     04 F0 0E F0 
311c6     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
311ca     0B FD 0D FD 
311ce     0F FD 11 FD 
311d2     11 FD 13 FD 
311d6     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
311da     17 FD 64 F3 
311de     CD F0 52 F0 
311e2     41 F0 45 F0 
311e6     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
311ea     5B F0 64 F0 
311ee     6D F0 FB FC 
311f2     65 FD 68 FD 
311f6     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
311fa     6C FD 6D FD 
311fe     6F FD 70 FD 
31202     72 FD B3 FB 
31206     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
3120a     A4 F0 99 F0 
3120e     A0 F0 A8 F0 
31212     AE F0 B9 F0 
31216     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
3121a     CB FB DD FB 
3121e     DE FB E0 FB 
31222     E3 FB E3 FB 
31226     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
3122a     E9 FB EC FB 
3122e     62 F7 27 F2 
31232     2A F1 FF F0 
31236     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
3123a     0C F1 13 F1 
3123e     1B F1 23 F1 
31242     33 F2 3C FC 
31246     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
3124a     42 FC 45 FC 
3124e     47 FC 48 FC 
31252     4A FC 4C FC 
31256     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
3125a     20 F2 77 F1 
3125e     5C F1 5F F1 
31262     64 F1 6C F1 
31266     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
3126a     83 F1 DC F8 
3126e     9A FC 9A FC 
31272     9B FC 9E FC 
31276     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
3127a     A3 FC A4 FC 
3127e     A6 FC A9 FC 
31282     90 F4 33 F2 
31286     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
3128a     BA F1 BF F1 
3128e     C7 F1 CE F1 
31292     D6 F1 DC F1 
31296     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
3129a     F3 FC F5 FC 
3129e     FE FB 79 FB 
312a2     62 FB 5F FB 
312a6     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
312aa     6F FA AF F3 
312ae     53 F2 12 F2 
312b2     0F F2 15 F2 
312b6     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
312ba     2A F2 32 F2 
312be     38 F2 9A FB 
312c2     AF FB B1 FB 
312c6     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
312ca     B7 FB B8 FB 
312ce     BA FB BC FB 
312d2     C1 FB 3B F8 
312d6     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
312da     6E F2 6C F2 
312de     74 F2 7A F2 
312e2     81 F2 87 F2 
312e6     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
312ea     06 FC 09 FC 
312ee     0C FC 0E FC 
312f2     0F FC 12 FC 
312f6     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
312fa     17 FC 1A FC 
312fe     B2 F6 7B F3 
31302     DD F2 C5 F2 
31306     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
3130a     D4 F2 DB F2 
3130e     E0 F2 E8 F2 
31312     28 F8 60 FC 
31316     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
3131a     64 FC 66 FC 
3131e     68 FC 6A FC 
31322     6D FC 52 FC 
31326     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
3132a     78 F3 24 F3 
3132e     1A F3 1E F3 
31332     24 F3 2A F3 
31336     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
3133a     3D F3 80 FA 
3133e     0C FB 0F FB 
31342     10 FB 14 FB 
31346     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
3134a     1B FB 1D FB 
3134e     1F FB 92 FA 
31352     DE F4 AE F3 
31356     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
3135a     79 F3 7E F3 
3135e     84 F3 8C F3 
31362     92 F3 97 F3 
31366     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
3136a     67 FB 69 FB 
3136e     6B FB 6F FB 
31372     71 FB 72 FB 
31376     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
3137a     E3 F8 BA F4 
3137e     EE F3 CC F3 
31382     CA F3 CF F3 
31386     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
3138a     E2 F3 E8 F3 
3138e     ED F3 B7 FB 
31392     BC FB BE FB 
31396     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
3139a     C4 FB C6 FB 
3139e     C8 FB C9 FB 
313a2     CC FB 8F F7 
313a6     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
313aa     1E F4 1E F4 
313ae     24 F4 2A F4 
313b2     30 F4 38 F4 
313b6     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
313ba     AD FA B1 FA 
313be     B4 FA B6 FA 
313c2     BA FA BB FA 
313c6     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
313ca     C2 FA C6 FA 
313ce     55 F6 C6 F4 
313d2     7D F4 72 F4 
313d6     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
313da     83 F4 89 F4 
313de     8F F4 94 F4 
313e2     66 FA 03 FB 
313e6     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
313ea     0A FB 0E FB 
313ee     10 FB 11 FB 
313f2     16 FB 18 FB 
313f6     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
313fa     F9 F4 CA F4 
313fe     C5 F4 CB F4 
31402     D1 F4 D7 F4 
31406     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
3140a     E8 F4 3F FB 
3140e     56 FB 58 FB 
31412     5A FB 5E FB 
31416     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
3141a     64 FB 64 FB 
3141e     69 FB 99 F9 
31422     E9 F5 33 F5 
31426     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
3142a     1D F5 22 F5 
3142e     27 F5 2E F5 
31432     32 F5 37 F5 
31436     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
3143a     BC FA BC FA 
3143e     C1 FA C2 FA 
31442     C4 FA C8 FA 
31446     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
3144a     F9 F7 DB F5 
3144e     78 F5 69 F5 
31452     6A F5 70 F5 
31456     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
3145a     7F F5 85 F5 
3145e     6E F7 06 FB 
31462     0A FB 0B FB 
31466     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
3146a     14 FB 15 FB 
3146e     18 FB 1B FB 
31472     1D FB 70 F7 
31476     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
3147a     B6 F5 BB F5 
3147e     C0 F5 C6 F5 
31482     CA F5 CF F5 
31486     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
3148a     54 FB 56 FB 
3148e     5A FB 5B FB 
31492     5E FB 5F FB 
31496     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
3149a     67 FB 52 FB 
3149e     29 F7 33 F6 
314a2     06 F6 02 F6 
314a6     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
314aa     10 F6 16 F6 
314ae     1A F6 1F F6 
314b2     81 FB 9F FB 
314b6     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
314ba     51 FB F2 FA 
314be     E3 FA E3 FA 
314c2     E5 FA E9 FA 
314c6     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
314ca     64 F6 4D F6 
314ce     4D F6 53 F6 
314d2     57 F6 5C F6 
314d6     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
314da     6A F6 19 FB 
314de     1E FB 22 FB 
314e2     23 FB 24 FB 
314e6     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
314ea     2C FB 2E FB 
314ee     32 FB F0 F8 
314f2     01 F7 A5 F6 
314f6     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
314fa     9F F6 A3 F6 
314fe     A6 F6 AC F6 
31502     B0 F6 EB F7 
31506     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
3150a     68 FB 6C FB 
3150e     6E FB 71 FB 
31512     72 FB 74 FB 
31516     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
3151a     71 F8 21 F7 
3151e     E5 F6 DD F6 
31522     E1 F6 E6 F6 
31526     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
3152a     F5 F6 F7 F6 
3152e     F7 FA AB FB 
31532     AD FB AF FB 
31536     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
3153a     B6 FB B9 FB 
3153e     BB FB BC FB 
31542     21 FB 07 F8 
31546     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
3154a     22 F7 26 F7 
3154e     2B F7 2E F7 
31552     34 F7 38 F7 
31556     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
3155a     13 FB 16 FB 
3155e     17 FB 1B FB 
31562     1E FB 20 FB 
31566     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
3156a     26 FB 77 FA 
3156e     F3 F7 7C F7 
31572     67 F7 6A F7 
31576     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
3157a     74 F7 7A F7 
3157e     7E F7 82 F7 
31582     53 FB 5A FB 
31586     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
3158a     5F FB 63 FB 
3158e     65 FB 67 FB 
31592     69 FB 6A FB 
31596     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
3159a     B5 F7 A9 F7 
3159e     AD F7 B0 F7 
315a2     B5 F7 B8 F7 
315a6     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
315aa     6E F8 99 FB 
315ae     9C FB 9D FB 
315b2     9F FB A4 FB 
315b6     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
315ba     A9 FB AB FB 
315be     AD FB 46 F9 
315c2     26 F8 F0 F7 
315c6     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
315ca     F4 F7 F8 F7 
315ce     FB F7 FF F7 
315d2     03 F8 65 FA 
315d6     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
315da     2B FB 2F FB 
315de     30 FB 32 FB 
315e2     34 FB 38 FB 
315e6     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
315ea     E9 F8 4A F8 
315ee     2E F8 2C F8 
315f2     2F F8 36 F8 
315f6     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
315fa     41 F8 44 F8 
315fe     4A FB 67 FB 
31602     68 FB 6B FB 
31606     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
3160a     73 FB 74 FB 
3160e     78 FB 7A FB 
31612     14 FB E7 F8 
31616     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
3161a     6D F8 70 F8 
3161e     73 F8 78 F8 
31622     7C F8 80 F8 
31626     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
3162a     A6 FB A7 FB 
3162e     A9 FB AC FB 
31632     AF FB B1 FB 
31636     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
3163a     B7 FB 73 FA 
3163e     F8 F8 B4 F8 
31642     A9 F8 AB F8 
31646     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
3164a     B4 F8 B8 F8 
3164e     BB F8 FA F8 
31652     64 FB 65 FB 
31656     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
3165a     6D FB 6F FB 
3165e     70 FB 74 FB 
31662     77 FB 77 FB 
31666     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
3166a     E9 F8 E4 F8 
3166e     E8 F8 EB F8 
31672     EE F8 F2 F8 
31676     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
3167a     B5 FA 9F FB 
3167e     A1 FB A4 FB 
31682     A5 FB A9 FB 
31686     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
3168a     AE FB B1 FB 
3168e     B2 FB C7 F9 
31692     39 F9 22 F9 
31696     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
3169a     26 F9 2A F9 
3169e     2E F9 32 F9 
316a2     33 F9 BA FB 
316a6     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
316aa     DE FB E1 FB 
316ae     E2 FB E4 FB 
316b2     E5 FB E7 FB 
316b6     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
316ba     C5 F9 67 F9 
316be     57 F9 56 F9 
316c2     5B F9 5F F9 
316c6     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
316ca     68 F9 6C F9 
316ce     0B FC 11 FC 
316d2     14 FC 15 FC 
316d6     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
316da     B5 FB B5 FB 
316de     B6 FB B8 FB 
316e2     E9 FA C8 F9 
316e6     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
316ea     90 F9 94 F9 
316ee     95 F9 99 F9 
316f2     9D F9 9F F9 
316f6     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
316fa     DE FB DF FB 
316fe     E2 FB E4 FB 
31702     E6 FB E8 FB 
31706     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
3170a     EF FB AC FA 
3170e     E9 F9 C7 F9 
31712     C3 F9 C8 F9 
31716     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
3171a     D0 F9 D4 F9 
3171e     D6 F9 0E FB 
31722     11 FC 13 FC 
31726     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
3172a     19 FC 1B FC 
3172e     1D FC 1E FC 
31732     21 FC 22 FC 
31736     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
3173a     F7 F9 F7 F9 
3173e     FB F9 FE F9 
31742     00 FA 03 FA 
31746     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
3174a     1B FC 45 FC 
3174e     46 FC 48 FC 
31752     4A FC 4B FC 
31756     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
3175a     52 FC 54 FC 
3175e     F3 FB 82 FA 
31762     35 FA 28 FA 
31766     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
3176a     31 FA 32 FA 
3176e     37 FA 37 FA 
31772     3C FA 00 FC 
31776     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
3177a     09 FC 0B FC 
3177e     0F FC 12 FC 
31782     12 FC 15 FC 
31786     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
3178a     8D FA 60 FA 
3178e     5B FA 5C FA 
31792     60 FA 61 FA 
31796     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
3179a     6C FA 6D FA 
3179e     37 FC 3A FC 
317a2     3B FC 3D FC 
317a6     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
317aa     43 FC 44 FC 
317ae     45 FC 47 FC 
317b2     51 FB AB FA 
317b6     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
317ba     8E FA 91 FA 
317be     93 FA 95 FA 
317c2     98 FA 9B FA 
317c6     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
317ca     68 FC 6A FC 
317ce     6C FC 6E FC 
317d2     70 FC 72 FC 
317d6     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
317da     76 FC 3B FB 
317de     D0 FA BB FA 
317e2     B9 FA BD FA 
317e6     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
317ea     C4 FA C6 FA 
317ee     CA FA 13 FC 
317f2     3A FC 3A FC 
317f6     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
317fa     41 FC 43 FC 
317fe     44 FC 47 FC 
31802     48 FC 3C FC 
31806     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
3180a     E6 FA E8 FA 
3180e     EB FA EE FA 
31812     F0 FA F2 FA 
31816     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
3181a     61 FC 66 FC 
3181e     68 FC 6B FC 
31822     6C FC 6E FC 
31826     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
3182a     73 FC 75 FC 
3182e     13 FC 3F FB 
31832     17 FB 12 FB 
31836     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
3183a     1A FB 1D FB 
3183e     1F FB 20 FB 
31842     23 FB 92 FC 
31846     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
3184a     96 FC 97 FC 
3184e     9A FC 9C FC 
31852     9E FC 9F FC 
31856     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
3185a     5A FB 41 FB 
3185e     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
31862     00 00 00 00 | zero2 long 0
31866     01 00 00 00 
3186a     00 00 00 00 
3186e     00 00 00 00 
31872     00 00 00 00 | mouse  file "mouse2.def"
31876     00 00 00 00 
3187a     00 00 00 00 
3187e     00 00 00 00 
31882     00 00 00 00 | 	byte	$00[16]
31886     01 01 00 00 
3188a     00 00 00 00 
3188e     00 00 00 00 
31892     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31896     00 00 00 00 
3189a     00 00 00 00 
3189e     00 00 00 00 
318a2     00 00 00 00 | 	byte	$00[16]
318a6     01 0D 01 00 
318aa     00 00 00 00 
318ae     00 00 00 00 
318b2     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
318b6     00 00 00 00 
318ba     00 00 00 00 
318be     00 00 00 00 
318c2     00 00 00 00 | 	byte	$00[16]
318c6     01 0D 0D 01 
318ca     00 00 00 00 
318ce     00 00 00 00 
318d2     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
318d6     00 00 00 00 
318da     00 00 00 00 
318de     00 00 00 00 
318e2     00 00 00 00 | 	byte	$00[16]
318e6     01 0D 0D 0D 
318ea     01 00 00 00 
318ee     00 00 00 00 
318f2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
318f6     00 00 00 00 
318fa     00 00 00 00 
318fe     00 00 00 00 
31902     00 00 00 00 | 	byte	$00[16]
31906     01 0D 0D 0D 
3190a     0D 01 00 00 
3190e     00 00 00 00 
31912     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31916     00 00 00 00 
3191a     00 00 00 00 
3191e     00 00 00 00 
31922     00 00 00 00 | 	byte	$00[16]
31926     01 0D 0D 0D 
3192a     0D 0D 01 00 
3192e     00 00 00 00 
31932     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
31936     00 00 00 00 
3193a     00 00 00 00 
3193e     00 00 00 00 
31942     00 00 00 00 | 	byte	$00[16]
31946     01 0D 0D 0D 
3194a     0D 0D 0D 01 
3194e     00 00 00 00 
31952     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
31956     00 00 00 00 
3195a     00 00 00 00 
3195e     00 00 00 00 
31962     00 00 00 00 | 	byte	$00[16]
31966     01 0D 0D 0D 
3196a     0D 0D 0D 0C 
3196e     01 00 00 00 
31972     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
31976     00 00 00 00 
3197a     00 00 00 00 
3197e     00 00 00 00 
31982     00 00 00 00 | 	byte	$00[16]
31986     01 0D 0D 0D 
3198a     0D 0D 0D 0D 
3198e     0C 01 00 00 
31992     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
31996     00 00 00 00 
3199a     00 00 00 00 
3199e     00 00 00 00 
319a2     00 00 00 00 | 	byte	$00[16]
319a6     01 0D 0D 0D 
319aa     0D 0D 0D 0D 
319ae     0D 0C 01 00 
319b2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
319b6     00 00 00 00 
319ba     00 00 00 00 
319be     00 00 00 00 
319c2     00 00 00 00 | 	byte	$00[16]
319c6     01 0D 0D 0D 
319ca     0D 0D 0D 0D 
319ce     0D 0D 0B 01 
319d2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
319d6     00 00 00 00 
319da     00 00 00 00 
319de     00 00 00 00 
319e2     00 00 00 00 | 	byte	$00[16]
319e6     01 0D 0D 0D 
319ea     0C 0D 0D 03 
319ee     01 01 01 01 
319f2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
319f6     00 00 00 00 
319fa     00 00 00 00 
319fe     00 00 00 00 
31a02     00 00 00 00 | 	byte	$00[16]
31a06     01 0D 0D 0C 
31a0a     01 09 0D 03 
31a0e     00 00 00 00 
31a12     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
31a16     00 00 00 00 
31a1a     00 00 00 00 
31a1e     00 00 00 00 
31a22     00 00 00 00 | 	byte	$00[16]
31a26     01 0D 0C 01 
31a2a     00 01 0D 0B 
31a2e     01 00 00 00 
31a32     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
31a36     00 00 00 00 
31a3a     00 00 00 00 
31a3e     00 00 00 00 
31a42     00 00 00 00 | 	byte	$00[16]
31a46     01 0C 01 00 
31a4a     00 01 0A 0D 
31a4e     01 00 00 00 
31a52     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
31a56     00 00 00 00 
31a5a     00 00 00 00 
31a5e     00 00 00 00 
31a62     00 00 00 00 | 	byte	$00[16]
31a66     01 01 00 00 
31a6a     00 00 01 0D 
31a6e     0B 01 00 00 
31a72     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
31a76     00 00 00 00 
31a7a     00 00 00 00 
31a7e     00 00 00 00 
31a82     00 00 00 00 
31a86     00 00 00 00 
31a8a     00 00       | 	byte	$00[22]
31a8c     01 0B 0D 01 
31a90     00 00 00 00 
31a94     00 00 00 00 
31a98     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31a9c     00 00 00 00 
31aa0     00 00 00 00 
31aa4     00 00 00 00 
31aa8     00 00 00 00 
31aac     00          | 	byte	$00[17]
31aad     01 01 00 00 
31ab1     00 00 00 00 
31ab5     00 00 00 00 
31ab9     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31abd     00 00 00 00 
      ...             
31c61     00 00 00 00 
31c65     00          | 	byte	$00[425]
31c66     73 32 00 04 
31c6a     00 00 10 00 
31c6e     00 00 00 00 
31c72     00 00 00 00 | atari2 file "atari2.s2"
31c76     43 87 43 87 
31c7a     43 87 44 87 
31c7e     43 87 44 87 
31c82     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
31c86     43 87 43 87 
31c8a     43 87 44 87 
31c8e     43 87 43 87 
31c92     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
31c96     44 87 43 87 
31c9a     44 87 43 87 
31c9e     43 87 43 87 
31ca2     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
31ca6     43 87 43 87 
31caa     44 87 43 87 
31cae     44 87 44 87 
31cb2     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
31cb6     43 87 43 87 
31cba     44 87 43 87 
31cbe     43 87 42 87 
31cc2     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
31cc6     43 87 43 87 
31cca     43 87 43 87 
31cce     44 87 43 87 
31cd2     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
31cd6     44 87 44 87 
31cda     43 87 44 87 
31cde     43 87 44 87 
31ce2     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
31ce6     44 87 43 87 
31cea     44 87 44 87 
31cee     43 87 43 87 
31cf2     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
31cf6     43 87 44 87 
31cfa     44 87 43 87 
31cfe     43 87 44 87 
31d02     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
31d06     43 87 43 87 
31d0a     43 87 43 87 
31d0e     43 87 43 87 
31d12     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
31d16     42 87 43 87 
31d1a     44 87 42 87 
31d1e     43 87 43 87 
31d22     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
31d26     43 87 44 87 
31d2a     44 87 43 87 
31d2e     43 87 43 87 
31d32     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
31d36     43 87 5C 87 
31d3a     EE 86 AC 87 
31d3e     4C 7C A3 78 
31d42     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
31d46     BC 78 BB 78 
31d4a     BD 78 BC 78 
31d4e     BB 78 BD 78 
31d52     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
31d56     BB 78 BB 78 
31d5a     BC 78 BC 78 
31d5e     BC 78 BB 78 
31d62     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
31d66     BC 78 BC 78 
31d6a     BC 78 BC 78 
31d6e     BC 78 BC 78 
31d72     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
31d76     BB 78 BC 78 
31d7a     A0 78 4C 7C 
31d7e     11 7A 29 89 
31d82     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
31d86     44 87 43 87 
31d8a     44 87 43 87 
31d8e     43 87 42 87 
31d92     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
31d96     43 87 43 87 
31d9a     44 87 ED 85 
31d9e     71 85 52 79 
31da2     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
31da6     BC 78 BC 78 
31daa     BC 78 BC 78 
31dae     BC 78 BC 78 
31db2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
31db6     BC 78 BC 78 
31dba     BC 78 A0 78 
31dbe     CF 7A B9 81 
31dc2     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
31dc6     44 87 43 87 
31dca     43 87 44 87 
31dce     43 87 44 87 
31dd2     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
31dd6     43 87 43 87 
31dda     43 87 43 87 
31dde     44 87 43 87 
31de2     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
31de6     43 87 43 87 
31dea     44 87 43 87 
31dee     44 87 43 87 
31df2     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
31df6     44 87 43 87 
31dfa     43 87 43 87 
31dfe     5A 87 39 81 
31e02     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
31e06     A5 78 BC 78 
31e0a     BB 78 BC 78 
31e0e     BB 78 BC 78 
31e12     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
31e16     BC 78 BC 78 
31e1a     BC 78 BC 78 
31e1e     BC 78 8F 79 
31e22     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
31e26     09 85 47 87 
31e2a     43 87 43 87 
31e2e     42 87 42 87 
31e32     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
31e36     43 87 43 87 
31e3a     43 87 43 87 
31e3e     43 87 44 87 
31e42     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
31e46     43 87 43 87 
31e4a     44 87 43 87 
31e4e     42 87 43 87 
31e52     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
31e56     44 87 43 87 
31e5a     43 87 43 87 
31e5e     44 87 44 87 
31e62     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
31e66     94 78 55 7A 
31e6a     B9 78 BC 78 
31e6e     BC 78 BC 78 
31e72     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
31e76     BC 78 BB 78 
31e7a     BC 78 BC 78 
31e7e     BC 78 BC 78 
31e82     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
31e86     BB 78 BC 78 
31e8a     BC 78 BC 78 
31e8e     BB 78 BC 78 
31e92     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
31e96     BC 78 BC 78 
31e9a     BD 78 BC 78 
31e9e     BC 78 BB 78 
31ea2     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
31ea6     94 78 B3 84 
31eaa     36 84 4A 87 
31eae     43 87 43 87 
31eb2     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
31eb6     43 87 44 87 
31eba     43 87 43 87 
31ebe     43 87 43 87 
31ec2     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
31ec6     43 87 44 87 
31eca     43 87 44 87 
31ece     43 87 43 87 
31ed2     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
31ed6     43 87 43 87 
31eda     43 87 45 87 
31ede     43 87 43 87 
31ee2     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
31ee6     43 87 44 87 
31eea     44 87 44 87 
31eee     43 87 43 87 
31ef2     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
31ef6     43 87 42 87 
31efa     43 87 43 87 
31efe     44 87 43 87 
31f02     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
31f06     54 87 3C 82 
31f0a     36 83 52 79 
31f0e     C6 78 BC 78 
31f12     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
31f16     BB 78 BB 78 
31f1a     BC 78 BC 78 
31f1e     BC 78 BC 78 
31f22     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
31f26     BD 78 ED 78 
31f2a     1B 79 F4 83 
31f2e     4D 83 4E 87 
31f32     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
31f36     44 87 43 87 
31f3a     42 87 44 87 
31f3e     43 87 42 87 
31f42     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
31f46     43 87 54 87 
31f4a     26 82 B3 84 
31f4e     D6 77 BB 78 
31f52     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
31f56     BC 78 BB 78 
31f5a     BB 78 BB 78 
31f5e     BB 78 BB 78 
31f62     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
31f66     BC 78 BC 78 
31f6a     26 79 18 75 
31f6e     36 83 1F 84 
31f72     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
31f76     43 87 43 87 
31f7a     43 87 43 87 
31f7e     43 87 44 87 
31f82     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
31f86     43 87 44 87 
31f8a     44 87 43 87 
31f8e     43 87 43 87 
31f92     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
31f96     43 87 43 87 
31f9a     43 87 43 87 
31f9e     44 87 44 87 
31fa2     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
31fa6     44 87 43 87 
31faa     43 87 43 87 
31fae     43 87 44 87 
31fb2     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
31fb6     44 87 44 87 
31fba     44 87 43 87 
31fbe     44 87 43 87 
31fc2     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
31fc6     43 87 43 87 
31fca     43 87 44 87 
31fce     44 87 43 87 
31fd2     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
31fd6     43 87 43 87 
31fda     43 87 43 87 
31fde     43 87 44 87 
31fe2     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
31fe6     43 87 44 87 
31fea     43 87 44 87 
31fee     19 87 7D 86 
31ff2     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
31ff6     B1 78 BC 78 
31ffa     BC 78 BC 78 
31ffe     BC 78 BC 78 
32002     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
32006     BC 78 BC 78 
3200a     BD 78 BC 78 
3200e     B7 78 3B 7B 
32012     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
32016     96 86 44 87 
3201a     43 87 43 87 
3201e     43 87 43 87 
32022     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
32026     44 87 44 87 
3202a     43 87 44 87 
3202e     43 87 44 87 
32032     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
32036     43 87 44 87 
3203a     43 87 44 87 
3203e     43 87 44 87 
32042     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
32046     43 87 44 87 
3204a     43 87 43 87 
3204e     44 87 43 87 
32052     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
32056     44 87 44 87 
3205a     43 87 43 87 
3205e     43 87 44 87 
32062     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
32066     43 87 43 87 
3206a     43 87 43 87 
3206e     44 87 44 87 
32072     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
32076     36 83 CF 7A 
3207a     AB 78 BB 78 
3207e     BC 78 BC 78 
32082     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
32086     BB 78 BC 78 
3208a     BC 78 BC 78 
3208e     BC 78 BC 78 
32092     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
32096     BC 78 BC 78 
3209a     BC 78 BB 78 
3209e     BC 78 BC 78 
320a2     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
320a6     BB 78 BC 78 
320aa     BB 78 BC 78 
320ae     BC 78 BD 78 
320b2     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
320b6     BC 78 BC 78 
320ba     BC 78 BC 78 
320be     BC 78 BD 78 
320c2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
320c6     BC 78 BB 78 
320ca     BC 78 BB 78 
320ce     BB 78 BC 78 
320d2     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
320d6     BC 78 BC 78 
320da     BC 78 BC 78 
320de     BC 78 BB 78 
320e2     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
320e6     BC 78 BC 78 
320ea     BC 78 BD 78 
320ee     BB 78 BC 78 
320f2     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
320f6     BC 78 BC 78 
320fa     BC 78 BB 78 
320fe     BC 78 BB 78 
32102     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
32106     BB 78 BC 78 
3210a     BC 78 BC 78 
3210e     BC 78 BB 78 
32112     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
32116     BC 78 BC 78 
3211a     BC 78 BB 78 
3211e     BC 78 BB 78 
32122     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
32126     BC 78 BC 78 
3212a     BC 78 BC 78 
3212e     BB 78 BC 78 
32132     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
32136     BC 78 9F 78 
3213a     52 79 B3 84 
3213e     2F 86 60 87 
32142     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
32146     44 87 43 87 
3214a     43 87 43 87 
3214e     43 87 43 87 
32152     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
32156     43 87 43 87 
3215a     43 87 44 87 
3215e     43 87 43 87 
32162     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
32166     43 87 43 87 
3216a     43 87 43 87 
3216e     43 87 44 87 
32172     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
32176     44 87 44 87 
3217a     5E 87 BC 80 
3217e     FB 80 94 78 
32182     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
32186     BD 78 BC 78 
3218a     BB 78 BC 78 
3218e     BB 78 BB 78 
32192     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
32196     BC 78 BB 78 
3219a     BB 78 6B 79 
3219e     D6 77 AC 87 
321a2     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
321a6     43 87 44 87 
321aa     43 87 43 87 
321ae     44 87 43 87 
321b2     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
321b6     43 87 44 87 
321ba     43 87 5C 87 
321be     E7 80 00 80 
321c2     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
321c6     BC 78 BD 78 
321ca     BC 78 BC 78 
321ce     BC 78 BB 78 
321d2     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
321d6     BC 78 BC 78 
321da     BB 78 BC 78 
321de     BB 78 BC 78 
321e2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
321e6     BB 78 BC 78 
321ea     BC 78 BC 78 
321ee     BC 78 BC 78 
321f2     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
321f6     BC 78 BC 78 
321fa     BC 78 BC 78 
321fe     A0 78 8D 7B 
32202     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
32206     60 87 43 87 
3220a     44 87 44 87 
3220e     43 87 43 87 
32212     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
32216     44 87 43 87 
3221a     43 87 43 87 
3221e     44 87 73 86 
32222     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
32226     51 7B B6 78 
3222a     BC 78 BD 78 
3222e     BC 78 BC 78 
32232     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
32236     BB 78 BC 78 
3223a     BD 78 BB 78 
3223e     BC 78 BB 78 
32242     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
32246     BC 78 BC 78 
3224a     BC 78 BC 78 
3224e     BB 78 BC 78 
32252     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
32256     BC 78 BB 78 
3225a     BB 78 BC 78 
3225e     BC 78 BB 78 
32262     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
32266     22 8C AF 84 
3226a     48 87 43 87 
3226e     44 87 43 87 
32272     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
32276     43 87 42 87 
3227a     43 87 43 87 
3227e     44 87 43 87 
32282     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
32286     43 87 43 87 
3228a     44 87 44 87 
3228e     43 87 43 87 
32292     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
32296     43 87 43 87 
3229a     43 87 43 87 
3229e     44 87 43 87 
322a2     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
322a6     9F 8B D6 77 
322aa     16 7C B3 78 
322ae     BC 78 BB 78 
322b2     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
322b6     BB 78 BC 78 
322ba     BB 78 BC 78 
322be     BC 78 BC 78 
322c2     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
322c6     BC 78 BB 78 
322ca     BB 78 BC 78 
322ce     BB 78 BC 78 
322d2     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
322d6     BB 78 BB 78 
322da     BC 78 BC 78 
322de     BC 78 BB 78 
322e2     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
322e6     BC 78 BC 78 
322ea     BC 78 BD 78 
322ee     BB 78 BC 78 
322f2     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
322f6     BC 78 BC 78 
322fa     BC 78 BB 78 
322fe     BC 78 BC 78 
32302     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
32306     A8 78 54 7E 
3230a     F4 83 17 82 
3230e     50 87 43 87 
32312     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
32316     44 87 43 87 
3231a     44 87 43 87 
3231e     43 87 44 87 
32322     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
32326     43 87 28 87 
3232a     20 85 CF 7A 
3232e     70 7D AD 78 
32332     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
32336     BB 78 BC 78 
3233a     BC 78 BC 78 
3233e     BB 78 BB 78 
32342     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
32346     BB 78 B2 78 
3234a     9A 7C CF 7A 
3234e     4A 87 0D 87 
32352     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
32356     43 87 44 87 
3235a     43 87 44 87 
3235e     43 87 43 87 
32362     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
32366     44 87 43 87 
3236a     28 87 51 85 
3236e     11 7A 1E 7D 
32372     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
32376     BC 78 BB 78 
3237a     BC 78 BC 78 
3237e     BC 78 BC 78 
32382     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
32386     BB 78 BC 78 
3238a     BB 78 BC 78 
3238e     BC 78 BC 78 
32392     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
32396     BB 78 BC 78 
3239a     BC 78 BC 78 
3239e     BD 78 BB 78 
323a2     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
323a6     BC 78 BB 78 
323aa     BC 78 BC 78 
323ae     BC 78 BB 78 
323b2     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
323b6     BC 78 BC 78 
323ba     BC 78 BC 78 
323be     BB 78 BC 78 
323c2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
323c6     BC 78 BD 78 
323ca     BC 78 BC 78 
323ce     BC 78 BB 78 
323d2     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
323d6     BC 78 BB 78 
323da     BB 78 BC 78 
323de     BC 78 BB 78 
323e2     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
323e6     BB 78 BB 78 
323ea     BB 78 BC 78 
323ee     B6 78 48 7D 
323f2     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
323f6     56 87 43 87 
323fa     42 87 44 87 
323fe     44 87 43 87 
32402     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
32406     43 87 44 87 
3240a     43 87 44 87 
3240e     4C 87 7E 83 
32412     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
32416     F7 78 BC 78 
3241a     BC 78 BB 78 
3241e     BB 78 BC 78 
32422     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
32426     BC 78 BB 78 
3242a     BC 78 BC 78 
3242e     BB 78 BC 78 
32432     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
32436     BB 78 BC 78 
3243a     BC 78 BC 78 
3243e     BC 78 BB 78 
32442     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
32446     BC 78 BC 78 
3244a     BC 78 BC 78 
3244e     BC 78 BB 78 
32452     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
32456     BC 78 BB 78 
3245a     BB 78 BC 78 
3245e     BC 78 BB 78 
32462     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
32466     BC 78 BC 78 
3246a     BB 78 BC 78 
3246e     BC 78 BC 78 
32472     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
32476     73 32 00 04 
3247a     00 00 10 00 
3247e     00 00 00 00 
32482     00 00 00 00 | atari12 file "atari12.s2"
32486     00 6D 00 6D 
3248a     00 6D 00 6D 
3248e     00 6D 00 6D 
32492     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
32496     00 6D 00 6D 
3249a     00 6D 00 6D 
3249e     00 6D 00 6D 
324a2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
324a6     00 6D 00 6D 
324aa     00 6D 00 6D 
324ae     00 6D 00 6D 
324b2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
324b6     00 6D 00 6D 
324ba     00 6D 00 6D 
324be     00 6D 00 6D 
324c2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
324c6     00 6D 00 6D 
324ca     00 6D 00 6D 
324ce     00 6D 00 6D 
324d2     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
324d6     00 6C 00 6C 
324da     00 6C 00 6C 
324de     00 6C 00 6C 
324e2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
324e6     00 6C 00 6C 
324ea     00 6C 00 6C 
324ee     00 6C 00 6C 
324f2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
324f6     00 6C 00 6C 
324fa     00 6C 00 6C 
324fe     00 6C 00 6C 
32502     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
32506     00 6C 00 6C 
3250a     00 6C 00 6C 
3250e     00 6C 00 6C 
32512     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
32516     00 6C 00 6C 
3251a     00 6C 00 6C 
3251e     00 6C 00 6C 
32522     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
32526     00 6C 00 6C 
3252a     00 6C 00 6C 
3252e     00 6C 00 6C 
32532     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
32536     00 6C 00 6C 
3253a     00 6C 00 6C 
3253e     00 6C 00 6C 
32542     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
32546     00 6C 00 6C 
3254a     00 6C 00 6C 
3254e     00 6C 00 6C 
32552     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
32556     00 6C 00 6C 
3255a     00 6C 00 6C 
3255e     00 6C 00 6C 
32562     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
32566     00 6C 00 6C 
3256a     00 6C 00 6C 
3256e     00 6C 00 6C 
32572     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
32576     00 6C 00 6C 
3257a     00 6C 00 6C 
3257e     00 6C 00 6C 
32582     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
32586     00 6C 00 6B 
3258a     00 6B 00 6B 
3258e     00 6B 00 6B 
32592     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
32596     00 6B 00 6B 
3259a     00 6B 00 6B 
3259e     00 6B 00 6B 
325a2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
325a6     00 6B 00 6B 
325aa     00 6B 00 6B 
325ae     00 6B 00 6B 
325b2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
325b6     00 6B 00 6B 
325ba     00 6B 00 6B 
325be     00 6B 00 6B 
325c2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
325c6     00 6B 00 6B 
325ca     00 6B 00 6B 
325ce     00 6B 00 6B 
325d2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
325d6     00 6B 00 6B 
325da     00 6B 00 6B 
325de     00 6B 00 6B 
325e2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
325e6     00 6B 00 6B 
325ea     00 6B 00 6B 
325ee     00 6B 00 6B 
325f2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
325f6     00 6B 00 6B 
325fa     00 6B 00 6B 
325fe     00 6B 00 6B 
32602     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
32606     00 6B 00 6B 
3260a     00 6B 00 6B 
3260e     00 6B 00 6B 
32612     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
32616     00 6B 00 6B 
3261a     00 6B 00 6B 
3261e     00 6A 00 9D 
32622     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
32626     00 9E 00 9E 
3262a     00 9E 00 9E 
3262e     00 9E 00 9E 
32632     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
32636     00 9E 00 9E 
3263a     00 9E 00 9E 
3263e     00 9E 00 9E 
32642     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
32646     00 9E 00 9E 
3264a     00 9E 00 9E 
3264e     00 9E 00 9E 
32652     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
32656     00 9E 00 9E 
3265a     00 9E 00 9E 
3265e     00 9E 00 9E 
32662     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
32666     00 9E 00 9E 
3266a     00 9E 00 9E 
3266e     00 9E 00 9E 
32672     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
32676     00 9E 00 9E 
3267a     00 9E 00 9E 
3267e     00 9E 00 9E 
32682     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
32686     00 9E 00 9E 
3268a     00 9E 00 9E 
3268e     00 9E 00 9E 
32692     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
32696     00 9E 00 9E 
3269a     00 9E 00 9E 
3269e     00 9E 00 9E 
326a2     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
326a6     00 9E 00 9E 
326aa     00 9E 00 9E 
326ae     00 9E 00 9E 
326b2     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
326b6     00 9F 00 9F 
326ba     00 9F 00 9F 
326be     00 9F 00 9F 
326c2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
326c6     00 9F 00 9F 
326ca     00 9F 00 9F 
326ce     00 9F 00 9F 
326d2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
326d6     00 9F 00 9F 
326da     00 9F 00 9F 
326de     00 9F 00 9F 
326e2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
326e6     00 9F 00 9F 
326ea     00 9F 00 9F 
326ee     00 9F 00 9F 
326f2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
326f6     00 9F 00 9F 
326fa     00 9F 00 9F 
326fe     00 9F 00 9F 
32702     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
32706     00 9F 00 9F 
3270a     00 9F 00 9F 
3270e     00 9F 00 9F 
32712     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
32716     00 9F 00 9F 
3271a     00 9F 00 9F 
3271e     00 9F 00 9F 
32722     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
32726     00 9F 00 9F 
3272a     00 9F 00 9F 
3272e     00 9F 00 9F 
32732     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
32736     00 9F 00 9F 
3273a     00 9F 00 9F 
3273e     00 9F 00 9F 
32742     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
32746     00 9F 00 9F 
3274a     00 9F 00 9F 
3274e     00 9F 00 9F 
32752     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
32756     00 9F 00 9F 
3275a     00 9F 00 9F 
3275e     00 9F 00 9F 
32762     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
32766     00 9F 00 9F 
3276a     00 9F 00 9F 
3276e     00 9F 00 9F 
32772     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
32776     00 9F 00 9F 
3277a     00 9F 00 A0 
3277e     00 A0 00 A0 
32782     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
32786     00 A0 00 A0 
3278a     00 A0 00 A0 
3278e     00 A0 00 A0 
32792     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
32796     00 A0 00 A0 
3279a     00 A0 00 A0 
3279e     00 A0 00 A0 
327a2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
327a6     00 A0 00 A0 
327aa     00 A0 00 A0 
327ae     00 A0 00 A0 
327b2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
327b6     00 A0 00 A0 
327ba     00 A0 00 A0 
327be     00 A0 00 A0 
327c2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
327c6     00 A0 00 A0 
327ca     00 A0 00 A0 
327ce     00 A0 00 A0 
327d2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
327d6     00 A0 00 A0 
327da     00 A0 00 A0 
327de     00 A0 00 A0 
327e2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
327e6     00 A0 00 A0 
327ea     00 A0 00 A0 
327ee     00 A0 00 A0 
327f2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
327f6     00 A0 00 A0 
327fa     00 A0 00 A0 
327fe     00 A0 00 A0 
32802     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
32806     00 A0 00 A0 
3280a     00 A0 00 A0 
3280e     00 A0 00 A0 
32812     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
32816     00 A0 00 A0 
3281a     00 A0 00 A0 
3281e     00 A0 00 A0 
32822     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
32826     00 A0 00 A0 
3282a     00 A0 00 A0 
3282e     00 A0 00 A0 
32832     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
32836     00 A0 00 A0 
3283a     00 A0 00 A0 
3283e     00 A0 00 A0 
32842     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
32846     00 6D 00 6D 
3284a     00 6D 00 6D 
3284e     00 6D 00 6D 
32852     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
32856     00 6D 00 6D 
3285a     00 6D 00 6D 
3285e     00 6D 00 6D 
32862     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
32866     00 6D 00 6D 
3286a     00 6D 00 6D 
3286e     00 6D 00 6D 
32872     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
32876     00 6D 00 6D 
3287a     00 6D 00 6D 
3287e     00 6D 00 6D 
32882     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
32886     00 6D 00 6D 
3288a     00 6D 00 6D 
3288e     00 6D 00 6D 
32892     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
32896     00 6D 00 6D 
3289a     00 6D 00 6D 
3289e     00 6D 00 6D 
328a2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
328a6     00 6D 00 6D 
328aa     00 6D 00 6D 
328ae     00 6D 00 6D 
328b2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
328b6     00 6D 00 6D 
328ba     00 6D 00 6D 
328be     00 6D 00 6D 
328c2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
328c6     00 6D 00 6D 
328ca     00 A0 00 A0 
328ce     00 A0 00 A0 
328d2     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
328d6     00 A0 00 A0 
328da     00 A0 00 A0 
328de     00 A0 00 A0 
328e2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
328e6     00 A0 00 A0 
328ea     00 A0 00 A0 
328ee     00 A0 00 A0 
328f2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
328f6     00 A0 00 A0 
328fa     00 A0 00 A0 
328fe     00 A0 00 A0 
32902     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
32906     00 A0 00 A0 
3290a     00 A0 00 A0 
3290e     00 A0 00 A0 
32912     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
32916     00 A0 00 A0 
3291a     00 A0 00 A0 
3291e     00 A0 00 A0 
32922     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
32926     00 A0 00 A0 
3292a     00 A0 00 A0 
3292e     00 A0 00 A0 
32932     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
32936     00 A0 00 A0 
3293a     00 A0 00 A0 
3293e     00 A0 00 A0 
32942     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
32946     00 A0 00 A0 
3294a     00 A0 00 A0 
3294e     00 A0 00 A0 
32952     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
32956     00 6D 00 6D 
3295a     00 6D 00 6D 
3295e     00 6D 00 6D 
32962     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
32966     00 6D 00 6D 
3296a     00 6D 00 6D 
3296e     00 6D 00 6D 
32972     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
32976     00 6D 00 6D 
3297a     00 6D 00 6D 
3297e     00 6D 00 6D 
32982     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
32986     00 6D 00 6D 
3298a     00 6D 00 6D 
3298e     00 6D 00 6D 
32992     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
32996     00 6D 00 6D 
3299a     00 6D 00 6D 
3299e     00 6D 00 6D 
329a2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
329a6     00 6D 00 6D 
329aa     00 6D 00 6D 
329ae     00 6D 00 6D 
329b2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
329b6     00 6D 00 6D 
329ba     00 6D 00 6D 
329be     00 6D 00 6D 
329c2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
329c6     00 6D 00 6D 
329ca     00 6D 00 6D 
329ce     00 6D 00 6D 
329d2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
329d6     00 6D 00 6D 
329da     00 6C 00 A0 
329de     00 9F 00 A0 
329e2     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
329e6     00 A0 00 A0 
329ea     00 A0 00 A0 
329ee     00 A0 00 A0 
329f2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
329f6     00 A0 00 A0 
329fa     00 A0 00 A0 
329fe     00 A0 00 A0 
32a02     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
32a06     00 A0 00 A0 
32a0a     00 A0 00 A0 
32a0e     00 A0 00 A0 
32a12     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
32a16     00 A0 00 A0 
32a1a     00 A0 00 A0 
32a1e     00 A0 00 A0 
32a22     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
32a26     00 A0 00 A0 
32a2a     00 A0 00 A0 
32a2e     00 A0 00 A0 
32a32     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
32a36     00 A0 00 A0 
32a3a     00 A0 00 A0 
32a3e     00 A0 00 A0 
32a42     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
32a46     00 A0 00 A0 
32a4a     00 A0 00 A0 
32a4e     00 A0 00 A0 
32a52     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
32a56     00 A0 00 A0 
32a5a     00 A0 00 A0 
32a5e     00 A0 00 A0 
32a62     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
32a66     00 A0 00 A0 
32a6a     00 A0 00 A0 
32a6e     00 A0 00 A0 
32a72     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
32a76     00 A0 00 A0 
32a7a     00 A0 00 A0 
32a7e     00 A0 00 A0 
32a82     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
32a86     00 A0 00 A0 
32a8a     00 A0 00 A0 
32a8e     00 A0 00 A0 
32a92     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
32a96     00 A1 00 A1 
32a9a     00 A1 00 A1 
32a9e     00 A1 00 A1 
32aa2     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
32aa6     00 A1 00 A1 
32aaa     00 A1 00 A1 
32aae     00 A1 00 A1 
32ab2     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
32ab6     00 A1 00 A1 
32aba     00 A1 00 A1 
32abe     00 A1 00 A1 
32ac2     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
32ac6     00 A1 00 A1 
32aca     00 A1 00 A1 
32ace     00 A1 00 A1 
32ad2     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
32ad6     00 A1 00 A1 
32ada     00 A1 00 A1 
32ade     00 A1 00 A1 
32ae2     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
32ae6     00 A1 00 A1 
32aea     00 A1 00 A1 
32aee     00 6E 00 6E 
32af2     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
32af6     00 6E 00 6E 
32afa     00 6E 00 6E 
32afe     00 6E 00 6E 
32b02     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
32b06     00 6E 00 6E 
32b0a     00 6E 00 6E 
32b0e     00 6E 00 6E 
32b12     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
32b16     00 6E 00 6E 
32b1a     00 6E 00 6E 
32b1e     00 6E 00 6E 
32b22     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
32b26     00 6E 00 6D 
32b2a     00 6D 00 6D 
32b2e     00 6D 00 6D 
32b32     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
32b36     00 6D 00 6D 
32b3a     00 6D 00 6D 
32b3e     00 6D 00 6D 
32b42     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
32b46     00 6D 00 6D 
32b4a     00 6D 00 6D 
32b4e     00 6D 00 6D 
32b52     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
32b56     00 6D 00 6D 
32b5a     00 6D 00 6D 
32b5e     00 6D 00 6D 
32b62     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
32b66     00 6D 00 6D 
32b6a     00 6D 00 6D 
32b6e     00 6D 00 6D 
32b72     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
32b76     00 6D 00 6D 
32b7a     00 6D 00 6D 
32b7e     00 6D 00 6D 
32b82     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
32b86     00 6D 00 6D 
32b8a     00 6D 00 6D 
32b8e     00 6D 00 6D 
32b92     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
32b96     00 6D 00 6D 
32b9a     00 6D 00 6D 
32b9e     00 6D 00 6D 
32ba2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
32ba6     00 6D 00 6D 
32baa     00 6D 00 6D 
32bae     00 6D 00 6D 
32bb2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
32bb6     00 6D 00 6D 
32bba     00 6D 00 6D 
32bbe     00 6D 00 6D 
32bc2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
32bc6     00 6D 00 6D 
32bca     00 6D 00 6D 
32bce     00 6D 00 6D 
32bd2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
32bd6     00 6D 00 6D 
32bda     00 6C 00 6C 
32bde     00 6C 00 6C 
32be2     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
32be6     00 6C 00 6C 
32bea     00 6C 00 6C 
32bee     00 6C 00 6C 
32bf2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
32bf6     00 6C 00 6C 
32bfa     00 6C 00 6C 
32bfe     00 9D 00 9F 
32c02     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
32c06     00 9F 00 9F 
32c0a     00 9F 00 9F 
32c0e     00 A0 00 A0 
32c12     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
32c16     00 A0 00 A0 
32c1a     00 A0 00 A0 
32c1e     00 A0 00 A0 
32c22     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
32c26     00 A0 00 A0 
32c2a     00 A0 00 A0 
32c2e     00 A0 00 A0 
32c32     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
32c36     00 A0 00 A0 
32c3a     00 A0 00 A0 
32c3e     00 A0 00 A0 
32c42     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
32c46     00 A0 00 A0 
32c4a     00 A0 00 A0 
32c4e     00 A0 00 A0 
32c52     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
32c56     00 A0 00 A0 
32c5a     00 A0 00 A0 
32c5e     00 A0 00 A0 
32c62     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
32c66     00 A0 00 A0 
32c6a     00 A0 00 A0 
32c6e     00 A0 00 A0 
32c72     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
32c76     00 A0 00 A0 
32c7a     00 A0 00 A0 
32c7e     00 A0 00 A0 
32c82     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
32c86                 | 
32c86     00 00       |              	org
32c88 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
32c8c 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
32c90 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
32c94 003             | 
32c94 003 00 30 04 F6 |                 mov     psramaddr,#0
32c98 004             | 
32c98 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
32c9c 005 20 00 00 FF 
32ca0 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
32ca4 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
32ca8 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
32cac 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
32cb0 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
32cb4 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
32cb8 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
32cbc 00d             | 
32cbc 00d 20 00 00 FF 
32cc0 00e 00 30 04 F1 |                 add 	psramaddr,##16384
32cc4 00f E0 03 00 FF 
32cc8 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
32ccc 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
32cd0 012             | 
32cd0 012             |                 
32cd0 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
32cd4 013             |     
32cd4 013 01 2C 60 FD |                 cogid 	t11				' get id
32cd8 014 00 00 EC FC |                 coginit #0,#0				' start the new program
32cdc 015 03 2C 60 FD |                 cogstop t11				' stop the loader
32ce0 016             | 
32ce0 016 00 00 00 00 | t11 		long 	0
32ce4 017 00 FF 07 00 | mailbox 	long 	$7FF00
32ce8 018 00 00 00 00 | psramaddr 	long 	0
32cec 019 00 00 00 00 | pslockval	long 	0
32cf0 01a 00 00 00 00 | cmd             long    0
32cf4 01b 00 00 00 00 | buf1            long    0
32cf8 01c 00 40 00 00 | buf2            long    16384
32cfc 01d 00 2D 03 00 | 	long	@@@_dat_ + 12624
32d00 01e 50 32 20 52 
32d04 01f 65 74 72 6F 
32d08 020 6D 61 63 68 
32d0c 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
32d10 022 42 41 53 49 
32d14 023 43 20 76 65 
32d18 024 72 73 69 6F 
32d1c 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
32d20 026 32 39 62 00 | 	byte	$32, $39, $62, $00
32d24 027             | 	alignl
32d24 027             | _hg010b_spin2_dat_
32d24 027             | 
32d24 027 00 00 00 00 
32d28 028 00 00 00 00 
32d2c 029 00 00 00 00 
32d30 02a 00 00 00 00 
32d34 02b 00 00 00    | vga_font       file "vgafont.def"
32d37 02b 7E 81 A5 81 
32d3b 02c 81 BD 99 81 
32d3f 02d 81 7E 00 00 
32d43 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
32d47 02f 7E FF DB FF 
32d4b 030 FF C3 E7 FF 
32d4f 031 FF 7E 00 00 
32d53 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
32d57 033 00 36 7F 7F 
32d5b 034 7F 7F 3E 1C 
32d5f 035 08 00 00 00 
32d63 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
32d67 037 00 08 1C 3E 
32d6b 038 7F 3E 1C 08 
32d6f 039 00 00 00 00 
32d73 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
32d77 03b 18 3C 3C E7 
32d7b 03c E7 E7 18 18 
32d7f 03d 3C 00 00 00 
32d83 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
32d87 03f 18 3C 7E FF 
32d8b 040 FF 7E 18 18 
32d8f 041 3C 00 00 00 
32d93 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
32d97 043 00 00 00 18 
32d9b 044 3C 3C 18 00 
32d9f 045 00 00 00 00 
32da3 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
32da7 047 FF FF FF E7 
32dab 048 C3 C3 E7 FF 
32daf 049 FF FF FF FF 
32db3 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
32db7 04b 00 00 3C 66 
32dbb 04c 42 42 66 3C 
32dbf 04d 00 00 00 00 
32dc3 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
32dc7 04f FF FF C3 99 
32dcb 050 BD BD 99 C3 
32dcf 051 FF FF FF FF 
32dd3 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
32dd7 053 78 70 58 4C 
32ddb 054 1E 33 33 33 
32ddf 055 33 1E 00 00 
32de3 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
32de7 057 3C 66 66 66 
32deb 058 66 3C 18 7E 
32def 059 18 18 00 00 
32df3 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
32df7 05b FC CC FC 0C 
32dfb 05c 0C 0C 0C 0E 
32dff 05d 0F 07 00 00 
32e03 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
32e07 05f FE C6 FE C6 
32e0b 060 C6 C6 C6 E6 
32e0f 061 E7 67 03 00 
32e13 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
32e17 063 18 18 DB 3C 
32e1b 064 E7 3C DB 18 
32e1f 065 18 00 00 00 
32e23 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
32e27 067 03 07 0F 1F 
32e2b 068 7F 1F 0F 07 
32e2f 069 03 01 00 00 
32e33 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
32e37 06b 60 70 78 7C 
32e3b 06c 7F 7C 78 70 
32e3f 06d 60 40 00 00 
32e43 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
32e47 06f 18 3C 7E 18 
32e4b 070 18 18 7E 3C 
32e4f 071 18 00 00 00 
32e53 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
32e57 073 66 66 66 66 
32e5b 074 66 66 66    | 	byte	$66[7]
32e5e 075 00 66 66 00 
32e62 076 00 00 00 00 
32e66 077 00 FE DB DB 
32e6a 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
32e6e 079 D8 D8 D8 00 
32e72 07a 00 00 00 3E 
32e76 07b 63 06 1C 36 
32e7a 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
32e7e 07d 30 63 3E 00 
32e82 07e 00 00 00 00 
32e86 07f 00 00 00 00 
32e8a 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
32e8e 081 7F 7F 7F 00 
32e92 082 00 00 00 00 
32e96 083 00 18 3C 7E 
32e9a 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
32e9e 085 3C 18 7E 00 
32ea2 086 00 00 00 00 
32ea6 087 00 18 3C 7E 
32eaa 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
32eae 089 18 18 18 00 
32eb2 08a 00 00 00 00 
32eb6 08b 00 18 18 18 
32eba 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
32ebe 08d 7E 3C 18 00 
32ec2 08e 00 00 00 00 
32ec6 08f 00 00 00 18 
32eca 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
32ece 091 00 00 00 00 
32ed2 092 00 00 00 00 
32ed6 093 00 00 00    | 	byte	$00[11]
32ed9 094 0C 06 7F 06 
32edd 095 0C 00 00 00 
32ee1 096 00 00 00 00 
32ee5 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32ee9 098 00 03 03 03 
32eed 099 7F 00 00 00 
32ef1 09a 00 00 00 00 
32ef5 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32ef9 09c 14 36 7F 36 
32efd 09d 14 00 00 00 
32f01 09e 00 00 00 00 
32f05 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
32f09 0a0 1C 1C 3E 3E 
32f0d 0a1 7F 7F 00 00 
32f11 0a2 00 00 00 00 
32f15 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
32f19 0a4 7F 3E 3E 1C 
32f1d 0a5 1C 08 00 00 
32f21 0a6 00 00 00 00 
32f25 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32f29 0a8 00 00 00 00 
32f2d 0a9 00 00 00 00 
32f31 0aa 00 00 00 00 
32f35 0ab 00 00       | 	byte	$00[14]
32f37 0ab 18 3C 3C 3C 
32f3b 0ac 18 18 18 00 
32f3f 0ad 18 18 00 00 
32f43 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
32f47 0af 66 24 00 00 
32f4b 0b0 00 00 00 00 
32f4f 0b1 00 00 00 00 
32f53 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32f57 0b3 00 36 36 7F 
32f5b 0b4 36 36 36 7F 
32f5f 0b5 36 36 00 00 
32f63 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
32f67 0b7 3E 63 43 03 
32f6b 0b8 3E 60 60 61 
32f6f 0b9 63 3E 18 18 
32f73 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
32f77 0bb 00 00 43 63 
32f7b 0bc 30 18 0C 06 
32f7f 0bd 63 61 00 00 
32f83 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
32f87 0bf 1C 36 36 1C 
32f8b 0c0 6E 3B 33 33 
32f8f 0c1 33 6E 00 00 
32f93 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
32f97 0c3 0C 0C 0C 06 
32f9b 0c4 00 00 00 00 
32f9f 0c5 00 00 00 00 
32fa3 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32fa7 0c7 30 18 0C 0C 
32fab 0c8 0C 0C 0C 0C 
32faf 0c9 18 30 00 00 
32fb3 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
32fb7 0cb 0C 18 30 30 
32fbb 0cc 30 30 30 30 
32fbf 0cd 18 0C 00 00 
32fc3 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
32fc7 0cf 00 00 00 66 
32fcb 0d0 3C FF 3C 66 
32fcf 0d1 00 00 00 00 
32fd3 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
32fd7 0d3 00 00 00 18 
32fdb 0d4 18 7E 18 18 
32fdf 0d5 00 00 00 00 
32fe3 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
32fe7 0d7 00 00 00 00 
32feb 0d8 00 00 00 00 | 	byte	$00[8]
32fef 0d9 18 18 18 0C 
32ff3 0da 00 00 00 00 
32ff7 0db 00 00 00 00 
32ffb 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
32fff 0dd 00 00 00 00 
33003 0de 00 00 00 00 
33007 0df 00 00 00 00 
3300b 0e0 00 00 00 00 | 	byte	$00[16]
3300f 0e1 18 18 00 00 
33013 0e2 00 00 00 00 
33017 0e3 00 00 40 60 
3301b 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
3301f 0e5 03 01 00 00 
33023 0e6 00 00 00 00 
33027 0e7 1C 36 63 63 
3302b 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
3302f 0e9 36 1C 00 00 
33033 0ea 00 00 00 00 
33037 0eb 18 1C 1E 18 
3303b 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
3303f 0ed 18 7E 00 00 
33043 0ee 00 00 00 00 
33047 0ef 3E 63 60 30 
3304b 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
3304f 0f1 63 7F 00 00 
33053 0f2 00 00 00 00 
33057 0f3 3E 63 60 60 
3305b 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
3305f 0f5 63 3E 00 00 
33063 0f6 00 00 00 00 
33067 0f7 30 38 3C 36 
3306b 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
3306f 0f9 30 78 00 00 
33073 0fa 00 00 00 00 
33077 0fb 7F 03 03 03 
3307b 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
3307f 0fd 63 3E 00 00 
33083 0fe 00 00 00 00 
33087 0ff 1C 06 03 03 
3308b 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
3308f 101 63 3E 00 00 
33093 102 00 00 00 00 
33097 103 7F 63 60 60 
3309b 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
3309f 105 0C 0C 00 00 
330a3 106 00 00 00 00 
330a7 107 3E 63 63 63 
330ab 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
330af 109 63 3E 00 00 
330b3 10a 00 00 00 00 
330b7 10b 3E 63 63 63 
330bb 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
330bf 10d 30 1E 00 00 
330c3 10e 00 00 00 00 
330c7 10f 00 00 00 18 
330cb 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
330cf 111 18 18 00 00 
330d3 112 00 00 00 00 
330d7 113 00 00 00 18 
330db 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
330df 115 18 18 0C 00 
330e3 116 00 00 00 00 
330e7 117 00 60 30 18 
330eb 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
330ef 119 30 60 00 00 
330f3 11a 00 00 00 00 
330f7 11b 00 00 00 7E 
330fb 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
330ff 11d 00 00 00 00 
33103 11e 00 00 00 00 
33107 11f 00          | 	byte	$00[9]
33108 120 06 0C 18 30 
3310c 121 60 30 18 0C 
33110 122 06 00 00 00 
33114 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
33118 124 63 63 30 18 
3311c 125 18 18 00 18 
33120 126 18 00 00 00 
33124 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
33128 128 3E 63 63 7B 
3312c 129 7B 7B 3B 03 
33130 12a 3E 00 00 00 
33134 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
33138 12c 1C 36 63 63 
3313c 12d 7F 63 63 63 
33140 12e 63 00 00 00 
33144 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
33148 130 66 66 66 3E 
3314c 131 66 66 66 66 
33150 132 3F 00 00 00 
33154 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
33158 134 66 43 03 03 
3315c 135 03 03 43 66 
33160 136 3C 00 00 00 
33164 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
33168 138 36 66 66 66 
3316c 139 66 66 66 36 
33170 13a 1F 00 00 00 
33174 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
33178 13c 66 46 16 1E 
3317c 13d 16 06 46 66 
33180 13e 7F 00 00 00 
33184 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
33188 140 66 46 16 1E 
3318c 141 16 06 06 06 
33190 142 0F 00 00 00 
33194 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
33198 144 66 43 03 03 
3319c 145 7B 63 63 66 
331a0 146 5C 00 00 00 
331a4 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
331a8 148 63 63 63 7F 
331ac 149 63 63 63 63 
331b0 14a 63 00 00 00 
331b4 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
331b8 14c 18 18 18 18 
331bc 14d 18 18 18 18 | 	byte	$18[8]
331c0 14e 3C 00 00 00 
331c4 14f 00 00 00 78 
331c8 150 30 30 30 30 
331cc 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
331d0 152 1E 00 00 00 
331d4 153 00 00 00 67 
331d8 154 66 66 36 1E 
331dc 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
331e0 156 67 00 00 00 
331e4 157 00 00 00 0F 
331e8 158 06 06 06 06 
331ec 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
331f0 15a 7F 00 00 00 
331f4 15b 00 00 00 63 
331f8 15c 77 7F 7F 6B 
331fc 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
33200 15e 63 00 00 00 
33204 15f 00 00 00 63 
33208 160 67 6F 7F 7B 
3320c 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
33210 162 63 00 00 00 
33214 163 00 00 00 3E 
33218 164 63 63 63 63 
3321c 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
33220 166 3E 00 00 00 
33224 167 00 00 00 3F 
33228 168 66 66 66 3E 
3322c 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
33230 16a 0F 00 00 00 
33234 16b 00 00 00 3E 
33238 16c 63 63 63 63 
3323c 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
33240 16e 3E 30 70 00 
33244 16f 00 00 00 3F 
33248 170 66 66 66 3E 
3324c 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
33250 172 67 00 00 00 
33254 173 00 00 00 3E 
33258 174 63 63 06 1C 
3325c 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
33260 176 3E 00 00 00 
33264 177 00 00 00 7E 
33268 178 7E 5A 18 18 
3326c 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
33270 17a 3C 00 00 00 
33274 17b 00 00 00 63 
33278 17c 63 63 63 63 
3327c 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
33280 17e 3E 00 00 00 
33284 17f 00 00 00 63 
33288 180 63 63 63 63 
3328c 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
33290 182 08 00 00 00 
33294 183 00 00 00 63 
33298 184 63 63 63 6B 
3329c 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
332a0 186 36 00 00 00 
332a4 187 00 00 00 63 
332a8 188 63 36 3E 1C 
332ac 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
332b0 18a 63 00 00 00 
332b4 18b 00 00 00 66 
332b8 18c 66 66 66 3C 
332bc 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
332c0 18e 3C 00 00 00 
332c4 18f 00 00 00 7F 
332c8 190 63 61 30 18 
332cc 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
332d0 192 7F 00 00 00 
332d4 193 00 00 00 3C 
332d8 194 0C 0C 0C 0C 
332dc 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
332e0 196 3C 00 00 00 
332e4 197 00 00 00 00 
332e8 198 01 03 07 0E 
332ec 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
332f0 19a 40 00 00 00 
332f4 19b 00 00 00 3C 
332f8 19c 30 30 30 30 
332fc 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
33300 19e 3C 00 00 00 
33304 19f 1C 36 00 00 
33308 1a0 00 00 00 00 
3330c 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33310 1a2 00 00 00 00 
33314 1a3 00 00 00 00 
33318 1a4 00 00 00 00 
3331c 1a5 00 00 00 00 
33320 1a6 00          | 	byte	$00[17]
33321 1a6 FF 00 00 0C 
33325 1a7 18 00 00 00 
33329 1a8 00 00 00 00 
3332d 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33331 1aa 00 00 00 00 
33335 1ab 00 00 00 00 
33339 1ac 00          | 	byte	$00[9]
3333a 1ac 1E 30 3E 33 
3333e 1ad 33 33 6E 00 
33342 1ae 00 00 00 00 
33346 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
3334a 1b0 1E 36 66 66 
3334e 1b1 66 66 3E 00 
33352 1b2 00 00 00 00 
33356 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3335a 1b4 3E 63 03 03 
3335e 1b5 03 63 3E 00 
33362 1b6 00 00 00 00 
33366 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
3336a 1b8 3C 36 33 33 
3336e 1b9 33 33 6E 00 
33372 1ba 00 00 00 00 
33376 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3337a 1bc 3E 63 7F 03 
3337e 1bd 03 63 3E 00 
33382 1be 00 00 00 00 
33386 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
3338a 1c0 0C 1E 0C 0C 
3338e 1c1 0C 0C 1E 00 
33392 1c2 00 00 00 00 
33396 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3339a 1c4 6E 33 33 33 
3339e 1c5 33 33 3E 30 
333a2 1c6 33 1E 00 00 
333a6 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
333aa 1c8 36 6E 66 66 
333ae 1c9 66 66 67 00 
333b2 1ca 00 00 00 00 
333b6 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
333ba 1cc 1C 18 18 18 
333be 1cd 18 18 3C 00 
333c2 1ce 00 00 00 00 
333c6 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
333ca 1d0 70 60 60 60 
333ce 1d1 60 60 60 66 
333d2 1d2 66 3C 00 00 
333d6 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
333da 1d4 66 36 1E 1E 
333de 1d5 36 66 67 00 
333e2 1d6 00 00 00 00 
333e6 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
333ea 1d8 18 18 18 18 
333ee 1d9 18 18       | 	byte	$18[6]
333f0 1da 3C 00 00 00 
333f4 1db 00 00 00 00 
333f8 1dc 00 00 37 7F 
333fc 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
33400 1de 63 00 00 00 
33404 1df 00 00 00 00 
33408 1e0 00 00 3B 66 
3340c 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
33410 1e2 66 00 00 00 
33414 1e3 00 00 00 00 
33418 1e4 00 00 3E 63 
3341c 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
33420 1e6 3E 00 00 00 
33424 1e7 00 00 00 00 
33428 1e8 00 00 3B 66 
3342c 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
33430 1ea 3E 06 06 0F 
33434 1eb 00 00 00 00 
33438 1ec 00 00 6E 33 
3343c 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
33440 1ee 3E 30 30 78 
33444 1ef 00 00 00 00 
33448 1f0 00 00 3B 6E 
3344c 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
33450 1f2 0F 00 00 00 
33454 1f3 00 00 00 00 
33458 1f4 00 00 3E 63 
3345c 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
33460 1f6 3E 00 00 00 
33464 1f7 00 00 00 08 
33468 1f8 0C 0C 3F 0C 
3346c 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
33470 1fa 38 00 00 00 
33474 1fb 00 00 00 00 
33478 1fc 00 00 33 33 
3347c 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
33480 1fe 6E 00 00 00 
33484 1ff 00 00 00 00 
33488 200 00 00 63 63 
3348c 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
33490 202 1C 00 00 00 
33494 203 00 00 00 00 
33498 204 00 00 63 63 
3349c 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
334a0 206 36 00 00 00 
334a4 207 00 00 00 00 
334a8 208 00 00 63 36 
334ac 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
334b0 20a 63 00 00 00 
334b4 20b 00 00 00 00 
334b8 20c 00 00 63 63 
334bc 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
334c0 20e 7E 60 30 1F 
334c4 20f 00 00 00 00 
334c8 210 00 00 7F 33 
334cc 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
334d0 212 7F 00 00 00 
334d4 213 00 00 00 70 
334d8 214 18 18 18 0E 
334dc 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
334e0 216 70 00 00 00 
334e4 217 00 00 00 18 
334e8 218 18 18 18 18 
334ec 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
334f0 21a 18 00 00 00 
334f4 21b 00 00 00 0E 
334f8 21c 18 18 18 70 
334fc 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
33500 21e 0E 00 00 00 
33504 21f 6E 3B 00 00 
33508 220 00 00 00 00 
3350c 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33510 222 00 00 00 00 
33514 223 00 00 00 00 
33518 224 00 00       | 	byte	$00[10]
3351a 224 08 1C 36 63 
3351e 225 63 63 7F 00 
33522 226 00 00 00 00 
33526 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
3352a 228 03 03 03 03 
3352e 229 43 66 3C 18 
33532 22a 30 1E 00 00 
33536 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
3353a 22c 33 33 33 33 
3353e 22d 33 33       | 	byte	$33[6]
33540 22e 6E 00 00 00 
33544 22f 00 00 60 30 
33548 230 18 00 3E 63 
3354c 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
33550 232 3E 00 00 00 
33554 233 00 00 08 1C 
33558 234 36 00 1E 30 
3355c 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
33560 236 6E 00 00 00 
33564 237 00 00 00 00 
33568 238 33 00 1E 30 
3356c 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
33570 23a 6E 00 00 00 
33574 23b 00 00 1C 36 
33578 23c 1C 00 33 33 
3357c 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
33580 23e 6E 00 00 00 
33584 23f 00 00 60 30 
33588 240 18 00 3E 63 
3358c 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
33590 242 3E 00 00 00 
33594 243 00 00 00 00 
33598 244 00 00 3E 63 
3359c 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
335a0 246 3E 18 30 1E 
335a4 247 00 00 00 1C 
335a8 248 58 78 38 18 
335ac 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
335b0 24a 3C 00 00 00 
335b4 24b 00 00 00 00 
335b8 24c 63 00 3E 63 
335bc 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
335c0 24e 3E 00 00 00 
335c4 24f 66 33 00 3E 
335c8 250 63 63 63 63 
335cc 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
335d0 252 3E 00 00 00 
335d4 253 00 00 CC 66 
335d8 254 33 00 3E 63 
335dc 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
335e0 256 3E 00 00 00 
335e4 257 00 00 18 3C 
335e8 258 66 00 1C 18 
335ec 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
335f0 25a 3C 00 00 00 
335f4 25b 30 18 00 7F 
335f8 25c 63 61 30 18 
335fc 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
33600 25e 7F 00 00 00 
33604 25f 00 63 00 08 
33608 260 1C 36 63 63 
3360c 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
33610 262 63 00 00 00 
33614 263 30 18 00 3C 
33618 264 66 43 03 03 
3361c 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
33620 266 3C 00 00 00 
33624 267 30 18 00 7F 
33628 268 66 46 16 1E 
3362c 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
33630 26a 7F 00 00 00 
33634 26b 0C 06 00 0F 
33638 26c 06 06 06 06 
3363c 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
33640 26e 7F 00 00 00 
33644 26f 30 18 00 1C 
33648 270 18 18 18 18 
3364c 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
33650 272 3C 00 00 00 
33654 273 00 00 08 1C 
33658 274 36 00 3E 63 
3365c 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
33660 276 3E 00 00 00 
33664 277 00 00 00 00 
33668 278 63 00 3E 63 
3366c 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
33670 27a 3E 00 00 00 
33674 27b 00 00 00 6F 
33678 27c 46 26 06 06 
3367c 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
33680 27e 7F 00 00 00 
33684 27f 00 00 00 6E 
33688 280 4C 2C 0C 0C 
3368c 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
33690 282 1E 00 00 00 
33694 283 30 18 00 3E 
33698 284 63 63 06 1C 
3369c 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
336a0 286 3E 00 00 00 
336a4 287 00 00 60 30 
336a8 288 18 00 3E 63 
336ac 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
336b0 28a 3E 00 00 00 
336b4 28b 00 63 00 3E 
336b8 28c 63 63 63 63 
336bc 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
336c0 28e 3E 00 00 00 
336c4 28f 00 63 00 63 
336c8 290 63 63 63 63 
336cc 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
336d0 292 3E 00 00 00 
336d4 293 6C 38 00 7E 
336d8 294 7E 5A 18 18 
336dc 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
336e0 296 3C 00 00 00 
336e4 297 00 00 60 48 
336e8 298 2C 0C 3F 0C 
336ec 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
336f0 29a 38 00 00 00 
336f4 29b 00 00 00 0F 
336f8 29c 26 36 1E 0E 
336fc 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
33700 29e 7F 00 00 00 
33704 29f 00 00 00 00 
33708 2a0 00 63 36 1C 
3370c 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
33710 2a2 00 00 00 00 
33714 2a3 00 00       | 	byte	$00[6]
33716 2a3 36 1C 08 00 
3371a 2a4 3E 63 03 03 
3371e 2a5 03 63 3E 00 
33722 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
33726 2a7 30 18 0C 00 
3372a 2a8 1E 30 3E 33 
3372e 2a9 33 33 6E 00 
33732 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
33736 2ab 60 30 18 00 
3373a 2ac 1C 18 18 18 
3373e 2ad 18 18 3C 00 
33742 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
33746 2af 60 30 18 00 
3374a 2b0 3E 63 63 63 
3374e 2b1 63 63 3E 00 
33752 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
33756 2b3 30 18 0C 00 
3375a 2b4 33 33 33 33 
3375e 2b5 33 33 6E 00 
33762 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
33766 2b7 00 08 1C 36 
3376a 2b8 63 63 7F 63 
3376e 2b9 63 63 63 18 
33772 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
33776 2bb 00 00 00 00 
3377a 2bc 1E 30 3E 33 
3377e 2bd 33 33 6E 18 
33782 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
33786 2bf 00 7F 63 61 
3378a 2c0 30 18 0C 06 
3378e 2c1 43 63 7F 00 
33792 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
33796 2c3 36 1C 08 00 
3379a 2c4 7F 33 18 0C 
3379e 2c5 06 63 7F 00 
337a2 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
337a6 2c7 00 7F 66 46 
337aa 2c8 16 1E 16 06 
337ae 2c9 46 66 7F 18 
337b2 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
337b6 2cb 00 00 00 00 
337ba 2cc 3E 63 7F 03 
337be 2cd 03 63 3E 18 
337c2 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
337c6 2cf 00 3C 66 03 
337ca 2d0 1F 03 0F 03 
337ce 2d1 03 66 3C 00 
337d2 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
337d6 2d3 60 30 18 00 
337da 2d4 7F 33 18 0C 
337de 2d5 06 63 7F 00 
337e2 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
337e6 2d7 00 3C 66 43 
337ea 2d8 03 03 03 03 
337ee 2d9 43 66 3C 00 
337f2 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
337f6 2db 00 00 00 00 
337fa 2dc 3E 63 06 1C 
337fe 2dd 30 63 3E 18 
33802 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
33806 2df 00 00 00 00 
3380a 2e0 00 00       | 	byte	$00[6]
3380c 2e1 6C 36 1B 36 
33810 2e2 6C 00 00 00 
33814 2e3 00 00 00 00 
33818 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3381c 2e5 1B 36 6C 36 
33820 2e6 1B 00 00 00 
33824 2e7 88 22 88 22 
33828 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
3382c 2e9 88 22 88 22 
33830 2ea 88 22 88 22 
33834 2eb AA 55 AA 55 
33838 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
3383c 2ed AA 55 AA 55 
33840 2ee AA 55 AA 55 
33844 2ef BB EE BB EE 
33848 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
3384c 2f1 BB EE BB EE 
33850 2f2 BB EE BB EE 
33854 2f3 18 18 18 18 
33858 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
3385c 2f5 18 18 18 18 
33860 2f6 18 18 18 18 
33864 2f7 18 18 18 18 
33868 2f8 18 18 18    | 	byte	$18[15]
3386b 2f8 1F 18 18 18 
3386f 2f9 18 18 18 18 
33873 2fa 18 30 18 00 
33877 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
3387b 2fc 63 7F 63 63 
3387f 2fd 63 63 00 00 
33883 2fe 00 1C 36 00 
33887 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
3388b 300 63 7F 63 63 
3388f 301 63 63 00 00 
33893 302 00 36 1C 00 
33897 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
3389b 304 1E 16 06 46 
3389f 305 66 7F 00 00 
338a3 306 00 00 00 00 
338a7 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
338ab 308 1C 30 60 63 
338af 309 63 3E 18 30 
338b3 30a 1E 6C 6C 6C 
338b7 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
338bb 30c 6F 6C 6C 6C 
338bf 30d 6C 6C 6C 6C 
338c3 30e 6C 6C 6C 6C 
338c7 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
338cb 310 6C 6C 6C 6C 
338cf 311 6C 6C 6C 6C 
338d3 312 6C          | 	byte	$6c[9]
338d4 313 00 00 00 00 
338d8 314 00          | 	byte	$00[5]
338d9 314 7F 60 6F 6C 
338dd 315 6C 6C 6C 6C 
338e1 316 6C 6C 6C 6C 
338e5 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
338e9 318 6F 60 7F 00 
338ed 319 00 00 00 00 
338f1 31a 00 00 00 18 
338f5 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
338f9 31c 61 30 18 0C 
338fd 31d 06 43 63 7F 
33901 31e 00 00 00 00 
33905 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
33909 320 00 7F 33 18 
3390d 321 0C 06 63 7F 
33911 322 00 00 00 00 
33915 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
33919 324 00 00 1F 18 
3391d 325 18 18 18 18 
33921 326 18 18 18 18 
33925 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
33929 328 18 18 F8 00 
3392d 329 00 00 00 00 
33931 32a 00 00 00 18 
33935 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
33939 32c 18 18 FF 00 
3393d 32d 00 00 00 00 
33941 32e 00 00 00 00 
33945 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33949 330 00 00 FF 18 
3394d 331 18 18 18 18 
33951 332 18 18 18 18 
33955 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
33959 334 18 18 F8 18 
3395d 335 18 18 18 18 
33961 336 18 18 18 00 
33965 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
33969 338 00 00 FF 00 
3396d 339 00 00 00 00 
33971 33a 00 00 00 18 
33975 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
33979 33c 18 18 FF 18 
3397d 33d 18 18 18 18 
33981 33e 18 18 18 63 
33985 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
33989 340 36 63 63 7F 
3398d 341 63 63 63 63 
33991 342 00 00 00 00 
33995 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
33999 344 00 1E 30 3E 
3399d 345 33 33 33 6E 
339a1 346 00 00 00 6C 
339a5 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
339a9 348 EC 0C FC 00 
339ad 349 00 00 00 00 
339b1 34a 00 00 00 00 
339b5 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
339b9 34c FC 0C EC 6C 
339bd 34d 6C 6C 6C 6C 
339c1 34e 6C 6C 6C 6C 
339c5 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
339c9 350 EF 00 FF 00 
339cd 351 00 00 00 00 
339d1 352 00 00 00 00 
339d5 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
339d9 354 FF 00 EF 6C 
339dd 355 6C 6C 6C 6C 
339e1 356 6C 6C 6C 6C 
339e5 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
339e9 358 EC 0C EC 6C 
339ed 359 6C 6C 6C 6C 
339f1 35a 6C 6C 6C 00 
339f5 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
339f9 35c FF 00 FF 00 
339fd 35d 00 00 00 00 
33a01 35e 00 00 00 6C 
33a05 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
33a09 360 EF 00 EF 6C 
33a0d 361 6C 6C 6C 6C 
33a11 362 6C 6C 6C 00 
33a15 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
33a19 364 63 3E 63 63 
33a1d 365 63 63 3E 63 
33a21 366 00 00 00 00 
33a25 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
33a29 368 30 3C 36 33 
33a2d 369 33 33 33 6E 
33a31 36a 00 00 00 00 
33a35 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
33a39 36c 66 66 6F 66 
33a3d 36d 66 66 36 1F 
33a41 36e 00 00 00 36 
33a45 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
33a49 370 66 66 66 66 
33a4d 371 66 66       | 	byte	$66[6]
33a4f 371 36 1F 00 00 
33a53 372 00 00 63 00 
33a57 373 7F 66 46 16 
33a5b 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
33a5f 375 66 7F 00 00 
33a63 376 00 6C 38 00 
33a67 377 38 30 30 3C 
33a6b 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
33a6f 379 33 6E 00 00 
33a73 37a 00 36 1C 00 
33a77 37b 63 67 6F 7F 
33a7b 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
33a7f 37d 63 63 00 00 
33a83 37e 00 30 18 00 
33a87 37f 3C 18 18 18 
33a8b 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
33a8f 381 18 3C 00 00 
33a93 382 00 3C 66 00 
33a97 383 3C 18 18 18 
33a9b 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
33a9f 385 18 3C 00 00 
33aa3 386 00 00 00 36 
33aa7 387 1C 08 00 3E 
33aab 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
33aaf 389 63 3E 00 00 
33ab3 38a 00 18 18 18 
33ab7 38b 18 18 18 18 
33abb 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
33abf 38d 00 00 00 00 
33ac3 38e 00 00 00 00 
33ac7 38f 00 00 00 00 | 	byte	$00[12]
33acb 390 F8 18 18 18 
33acf 391 18 18 18 18 
33ad3 392 18 FF FF FF 
33ad7 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
33adb 394 FF FF FF FF 
33adf 395 FF FF FF FF 
33ae3 396 FF          | 	byte	$ff[9]
33ae4 397 00 00 00 00 
33ae8 398 00 00 00    | 	byte	$00[7]
33aeb 398 FF FF FF FF 
33aef 399 FF FF FF FF 
33af3 39a FF          | 	byte	$ff[9]
33af4 39b 00 00 00 7E 
33af8 39c 7E 5A 18 18 
33afc 39d 18 18 18 18 
33b00 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
33b04 39f 1C 36 1C 63 
33b08 3a0 63 63 63 63 
33b0c 3a1 63 63 63 63 
33b10 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
33b14 3a3 FF FF FF FF 
33b18 3a4 FF FF FF    | 	byte	$ff[7]
33b1b 3a4 00 00 00 00 
33b1f 3a5 00 00 00 00 
33b23 3a6 00          | 	byte	$00[9]
33b24 3a7 30 18 00 3E 
33b28 3a8 63 63 63 63 
33b2c 3a9 63 63 63 63 
33b30 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
33b34 3ab 00 00 00 1E 
33b38 3ac 33 33 33 1B 
33b3c 3ad 33 63 63 63 
33b40 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
33b44 3af 1C 36 00 3E 
33b48 3b0 63 63 63 63 
33b4c 3b1 63 63 63 63 
33b50 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
33b54 3b3 30 18 00 63 
33b58 3b4 67 6F 7F 7B 
33b5c 3b5 73 63 63 63 
33b60 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
33b64 3b7 00 00 60 30 
33b68 3b8 18 00 3B 66 
33b6c 3b9 66 66 66 66 
33b70 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
33b74 3bb 00 00 36 1C 
33b78 3bc 08 00 3B 66 
33b7c 3bd 66 66 66 66 
33b80 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
33b84 3bf 36 1C 00 3E 
33b88 3c0 63 63 06 1C 
33b8c 3c1 30 60 63 63 
33b90 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
33b94 3c3 00 00 36 1C 
33b98 3c4 08 00 3E 63 
33b9c 3c5 06 1C 30 63 
33ba0 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
33ba4 3c7 30 18 00 3F 
33ba8 3c8 66 66 66 3E 
33bac 3c9 36 66 66 66 
33bb0 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
33bb4 3cb 30 18 00 63 
33bb8 3cc 63 63 63 63 
33bbc 3cd 63 63 63 63 
33bc0 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
33bc4 3cf 00 00 60 30 
33bc8 3d0 18 00 3B 6E 
33bcc 3d1 66 06 06 06 
33bd0 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
33bd4 3d3 66 33 00 63 
33bd8 3d4 63 63 63 63 
33bdc 3d5 63 63 63 63 
33be0 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
33be4 3d7 00 00 60 30 
33be8 3d8 18 00 63 63 
33bec 3d9 63 63 63 63 
33bf0 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
33bf4 3db 30 18 00 66 
33bf8 3dc 66 66 66 3C 
33bfc 3dd 18 18 18 18 
33c00 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
33c04 3df 00 00 00 08 
33c08 3e0 0C 0C 3F 0C 
33c0c 3e1 0C 0C 0C 6C 
33c10 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
33c14 3e3 30 18 00 00 
33c18 3e4 00 00 00 00 
33c1c 3e5 00 00 00 00 
33c20 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33c24 3e7 00 00 00 00 
33c28 3e8 00 00 00 00 | 	byte	$00[8]
33c2c 3e9 7F 00 00 00 
33c30 3ea 00 00 00 00 
33c34 3eb 66 33 00 00 
33c38 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
33c3c 3ed 00 00 00 00 
33c40 3ee 00 00 00 00 
33c44 3ef 00 00 00 00 
33c48 3f0 00 00 00 00 
33c4c 3f1 00 00 00 00 
33c50 3f2 00          | 	byte	$00[21]
33c51 3f2 0C 06 3C 36 
33c55 3f3 1C 00 00 00 
33c59 3f4 00 00 00 00 
33c5d 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33c61 3f6 00 00 00 63 
33c65 3f7 3E 00 00 00 
33c69 3f8 00 00 00 00 
33c6d 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33c71 3fa 00 00 00 00 
33c75 3fb 3E 63 06 1C 
33c79 3fc 36 63 63 36 
33c7d 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
33c81 3fe 00 00 00 00 
33c85 3ff 00 00 00 00 | 	byte	$00[8]
33c89 400 18 00 7E 00 
33c8d 401 18 00 00 00 
33c91 402 00 00 00 00 
33c95 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33c99 404 00 00 00 00 
33c9d 405 00 00 00 00 | 	byte	$00[8]
33ca1 406 18 30 1E 00 
33ca5 407 00 00 1C 36 
33ca9 408 36 1C 00 00 
33cad 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
33cb1 40a 00 00 00 00 
33cb5 40b 63 00 00 00 
33cb9 40c 00 00 00 00 
33cbd 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33cc1 40e 00 00 00 18 
33cc5 40f 18 00 00 00 
33cc9 410 00 00 00 00 
33ccd 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33cd1 412 00 00 00 00 
33cd5 413 00          | 	byte	$00[5]
33cd6 413 CC 66 33 00 
33cda 414 33 33 33 33 
33cde 415 33 33 6E 00 
33ce2 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
33ce6 417 00 3F 66 66 
33cea 418 66 3E 36 66 
33cee 419 66 66 6F 00 
33cf2 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
33cf6 41b 36 1C 08 00 
33cfa 41c 3B 6E 66 06 
33cfe 41d 06 06 0F 00 
33d02 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
33d06 41f 00 00 00 7E 
33d0a 420 7E 7E 7E 7E 
33d0e 421 7E 7E 00 00 
33d12 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
33d16 423 00 00 00 00 
33d1a 424 00 00 00 00 
33d1e 425 00 00 00 00 
33d22 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33d24 427             | 'vga_font       file "vgafont.def"
33d24 427 00 00 00 00 
      ...             
33d54 433 00 00 00 00 
33d58 434 00 00 00    | st_font        file "st4font.def"
33d5b 434 FF FF 00 00 
33d5f 435 00 00 00 00 
33d63 436 00 18 18 18 
33d67 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
33d6b 438 18 18 18 18 
33d6f 439 18 18 18 18 
33d73 43a 18          | 	byte	$18[9]
33d74 43b 00 00 00 00 
33d78 43c 00 00 00    | 	byte	$00[7]
33d7b 43c FF FF 18 18 
33d7f 43d 18 18 18 18 
33d83 43e 18 18 18 18 
33d87 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
33d8b 440 FF FF 00 00 
33d8f 441 00 00 00 00 
33d93 442 00 18 18 18 
33d97 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
33d9b 444 1F 1F 18 18 
33d9f 445 18 18 18 18 
33da3 446 18 18 18 18 
33da7 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
33dab 448 F8 F8 18 18 
33daf 449 18 18 18 18 
33db3 44a 18 00 00 00 
33db7 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
33dbb 44c 1F 1F 18 18 
33dbf 44d 18 18 18 18 
33dc3 44e 18 00 00 00 
33dc7 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
33dcb 450 F8 F8 18 18 
33dcf 451 18 18 18 18 
33dd3 452 18 18 18 18 
33dd7 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
33ddb 454 1F 1F 00 00 
33ddf 455 00 00 00 00 
33de3 456 00 18 18 18 
33de7 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
33deb 458 F8 F8 00 00 
33def 459 00 00 00 00 
33df3 45a 00 18 18 18 
33df7 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
33dfb 45c FF FF 18 18 
33dff 45d 18 18 18 18 
33e03 45e 18 00 00 18 
33e07 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
33e0b 460 66 7E 7E 66 
33e0f 461 66 66 66 30 
33e13 462 18 00 00 7E 
33e17 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
33e1b 464 3E 06 06 06 
33e1f 465 06 7E 7E 18 
33e23 466 0C 30 18 3C 
33e27 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
33e2b 468 06 06 06 66 
33e2f 469 66 7E 3C 00 
33e33 46a 00 30 18 66 
33e37 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
33e3b 46c 7E 7E 76 76 
33e3f 46d 66 66 66 00 
33e43 46e 00 30 18 7C 
33e47 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
33e4b 470 1C 38 70 60 
33e4f 471 60 7E 3E 00 
33e53 472 00 30 18 7E 
33e57 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
33e5b 474 18 0C 0C 06 
33e5f 475 06 7E 7E 00 
33e63 476 00 18 18 00 
33e67 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
33e6b 478 18 18 0C 0C 
33e6f 479 06 7E 7E 00 
33e73 47a 00 30 18 3C 
33e77 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
33e7b 47c 66 66 66 66 
33e7f 47d 66          | 	byte	$66[5]
33e80 47e 7E 3C 00 00 
33e84 47f 00 00 06 06 
33e88 480 06 06 16 1E 
33e8c 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
33e90 482 7E 7E 00 00 
33e94 483 00 00 00 00 
33e98 484 00 3C 7C 60 
33e9c 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
33ea0 486 7E 7C 30 18 
33ea4 487 00 00 00 00 
33ea8 488 00 3C 7E 66 
33eac 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
33eb0 48a 7E 7C 18 0C 
33eb4 48b 00 00 30 18 
33eb8 48c 00 3C 3E 06 
33ebc 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
33ec0 48e 7E 7C 00 00 
33ec4 48f 00 00 30 18 
33ec8 490 00 3E 7E 66 
33ecc 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
33ed0 492 66 66 00 00 
33ed4 493 00 00 30 18 
33ed8 494 00 7C 7E 06 
33edc 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
33ee0 496 7E 3E 00 00 
33ee4 497 00 00 30 18 
33ee8 498 00 7E 7E 30 
33eec 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
33ef0 49a 7E 7E 00 00 
33ef4 49b 00 00 18 18 
33ef8 49c 00 7E 7E 30 
33efc 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
33f00 49e 7E 7E 00 00 
33f04 49f 00 00 30 18 
33f08 4a0 00 3C 7E 66 
33f0c 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
33f10 4a2 7E 3C 00 00 
33f14 4a3 00 00 1C 1C 
33f18 4a4 18 18 38 3C 
33f1c 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
33f20 4a6 3C 3C 00 00 
33f24 4a7 00 00 00 00 
33f28 4a8 00 00 00 00 
33f2c 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33f30 4aa 00 00 00 00 
33f34 4ab 00 00       | 	byte	$00[6]
33f36 4ab 18 18 18 18 
33f3a 4ac 18 18 18 18 | 	byte	$18[8]
33f3e 4ad 00 00 18 18 
33f42 4ae 00 00 00 00 
33f46 4af 66 66 66 66 
33f4a 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
33f4e 4b1 00 00 00 00 
33f52 4b2 00 00 00 00 
33f56 4b3 00          | 	byte	$00[9]
33f57 4b3 66 66 FF FF 
33f5b 4b4 66 66 FF FF 
33f5f 4b5 66 66 00 00 
33f63 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
33f67 4b7 7C 7E 06 06 
33f6b 4b8 3E 7C 60 60 
33f6f 4b9 7E 3E 18 18 
33f73 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
33f77 4bb 66 30 30 18 
33f7b 4bc 18 0C 0C 66 
33f7f 4bd 66 00 00 00 
33f83 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
33f87 4bf 66 66 3C 1C 
33f8b 4c0 1C FC FE 66 
33f8f 4c1 66 FE FC 00 
33f93 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
33f97 4c3 18 18 18 18 
33f9b 4c4 00 00 00 00 
33f9f 4c5 00 00 00 00 
33fa3 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
33fa7 4c7 18 1C 0C 0C 
33fab 4c8 0C 0C 0C 0C 
33faf 4c9 1C 18 30 00 
33fb3 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
33fb7 4cb 18 38 30 30 
33fbb 4cc 30 30 30 30 
33fbf 4cd 38 18 0C 00 
33fc3 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
33fc7 4cf 66 66 3C 3C 
33fcb 4d0 FF FF 3C 3C 
33fcf 4d1 66 66 00 00 
33fd3 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
33fd7 4d3 00 18 18 18 
33fdb 4d4 7E 7E 18 18 
33fdf 4d5 18 00 00 00 
33fe3 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
33fe7 4d7 00 00 00 00 
33feb 4d8 00 00       | 	byte	$00[6]
33fed 4d9 18 18 18 18 
33ff1 4da 18          | 	byte	$18[5]
33ff2 4da 0C 04 00 00 
33ff6 4db 00 00 00 00 
33ffa 4dc 7E 7E 00 00 
33ffe 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
34002 4de 00 00 00 00 
34006 4df 00 00 00 00 
3400a 4e0 00 00 00 00 
3400e 4e1 00          | 	byte	$00[13]
3400f 4e1 18 18 18 00 
34013 4e2 00 00 00 60 
34017 4e3 60 60 30 30 
3401b 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
3401f 4e5 06 06 06 00 
34023 4e6 00 00 00 3C 
34027 4e7 7E 66 66 66 
3402b 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
3402f 4e9 66 7E 3C 00 
34033 4ea 00 00 00 18 
34037 4eb 18 1C 1C 18 
3403b 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
3403f 4ed 18 7E 7E 00 
34043 4ee 00 00 00 3C 
34047 4ef 7E 66 66 30 
3404b 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
3404f 4f1 0C 7E 7E 00 
34053 4f2 00 00 00 7E 
34057 4f3 7E 30 30 18 
3405b 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
3405f 4f5 66 7E 3C 00 
34063 4f6 00 00 00 30 
34067 4f7 30 38 38 3C 
3406b 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
3406f 4f9 7E 30 30 00 
34073 4fa 00 00 00 7E 
34077 4fb 7E 06 06 3E 
3407b 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
3407f 4fd 66 7E 3C 00 
34083 4fe 00 00 00 38 
34087 4ff 3C 0E 06 06 
3408b 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
3408f 501 66 7E 3C 00 
34093 502 00 00 00 7E 
34097 503 7E 60 60 30 
3409b 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
3409f 505 0C 0C 0C 00 
340a3 506 00 00 00 3C 
340a7 507 7E 66 66 3C 
340ab 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
340af 509 66 7E 3C 00 
340b3 50a 00 00 00 3C 
340b7 50b 7E 66 66 7E 
340bb 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
340bf 50d 70 3C 1C 00 
340c3 50e 00 00 00 00 
340c7 50f 00 00 18 18 
340cb 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
340cf 511 18 18 18 00 
340d3 512 00 00 00 00 
340d7 513 00 00 18 18 
340db 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
340df 515 18 18 18 0C 
340e3 516 04 00 00 00 
340e7 517 70 38 1C 0E 
340eb 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
340ef 519 70 00 00 00 
340f3 51a 00 00 00 00 
340f7 51b 00 00 7E 7E 
340fb 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
340ff 51d 00 00 00 00 
34103 51e 00 00 00 00 | 	byte	$00[8]
34107 51f 0E 1C 38 70 
3410b 520 E0 70 38 1C 
3410f 521 0E 00 00 00 
34113 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
34117 523 7E 66 66 30 
3411b 524 30 18 18 18 
3411f 525 00 18 18 00 
34123 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
34127 527 7E 66 66 66 
3412b 528 66 36 06 66 
3412f 529 66 7E 3C 00 
34133 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
34137 52b 3C 7E 66 66 
3413b 52c 66 7E 7E 66 
3413f 52d 66 66 66 00 
34143 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
34147 52f 7E 66 66 7E 
3414b 530 3E 66 66 66 
3414f 531 66 7E 3E 00 
34153 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
34157 533 7E 66 66 06 
3415b 534 06 06 06 66 
3415f 535 66 7E 3C 00 
34163 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
34167 537 7E 66 66 66 
3416b 538 66 66 66 66 
3416f 539 66 7E 3E 00 
34173 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
34177 53b 7E 06 06 3E 
3417b 53c 3E 06 06 06 
3417f 53d 06 7E 7E 00 
34183 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
34187 53f 7E 06 06 3E 
3418b 540 3E 06 06 06 
3418f 541 06 06 06 00 
34193 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
34197 543 7E 06 06 76 
3419b 544 76 66 66 66 
3419f 545 66 7E 3C 00 
341a3 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
341a7 547 66 66 66 7E 
341ab 548 7E 66 66 66 
341af 549 66 66 66 00 
341b3 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
341b7 54b 7E 18 18 18 
341bb 54c 18 18 18 18 
341bf 54d 18 7E 7E 00 
341c3 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
341c7 54f 60 60 60 60 
341cb 550 60 60 60    | 	byte	$60[7]
341ce 551 66 66 7E 3C 
341d2 552 00 00 00 00 
341d6 553 66 66 36 36 
341da 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
341de 555 66 66 C6 C6 
341e2 556 00 00 00 00 
341e6 557 06 06 06 06 
341ea 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
341ee 559 06 06 7E 7E 
341f2 55a 00 00 00 00 
341f6 55b C6 C6 EE EE 
341fa 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
341fe 55d C6 C6 C6 C6 
34202 55e 00 00 00 00 
34206 55f 66 66 66 6E 
3420a 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
3420e 561 76 66 66 66 
34212 562 00 00 00 00 
34216 563 3C 7E 66 66 
3421a 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3421e 565 66 66 7E 3C 
34222 566 00 00 00 00 
34226 567 3E 7E 66 66 
3422a 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
3422e 569 06 06 06 06 
34232 56a 00 00 00 00 
34236 56b 3C 7E 66 66 
3423a 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3423e 56d 66 56 3E 6C 
34242 56e 00 00 00 00 
34246 56f 3E 7E 66 66 
3424a 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
3424e 571 66 66 C6 C6 
34252 572 00 00 00 00 
34256 573 7C 7E 06 06 
3425a 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
3425e 575 60 60 7E 3E 
34262 576 00 00 00 00 
34266 577 7E 7E 18 18 
3426a 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
3426e 579 18 18 18 18 
34272 57a 00 00 00 00 
34276 57b 66 66 66 66 
3427a 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3427e 57d 66 66 7E 3C 
34282 57e 00 00 00 00 
34286 57f 66 66 66 66 
3428a 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3428e 581 3C 3C 18 18 
34292 582 00 00 00 00 
34296 583 C6 C6 C6 C6 
3429a 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
3429e 585 FE EE C6 82 
342a2 586 00 00 00 00 
342a6 587 66 66 66 3C 
342aa 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
342ae 589 3C 66 66 66 
342b2 58a 00 00 00 00 
342b6 58b 66 66 66 66 
342ba 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
342be 58d 18 18 18 18 
342c2 58e 00 00 00 00 
342c6 58f 7E 7E 30 30 
342ca 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
342ce 591 06 06 7E 7E 
342d2 592 00 00 00 00 
342d6 593 3C 3C 0C 0C 
342da 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
342de 595 0C 0C 3C 3C 
342e2 596 00 00 00 00 
342e6 597 06 06 0C 0C 
342ea 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
342ee 599 60 60 C0 C0 
342f2 59a 00 00 00 00 
342f6 59b 3C 3C 30 30 
342fa 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
342fe 59d 30 30 3C 3C 
34302 59e 00 00 00 00 
34306 59f 18 18 3C 3C 
3430a 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
3430e 5a1 00 00 00 00 
34312 5a2 00 00 00 00 
34316 5a3 00 00 00 00 
3431a 5a4 00 00 00 00 
3431e 5a5 00 00       | 	byte	$00[18]
34320 5a6 FE FE 00 00 
34324 5a7 00 00 0C 0C 
34328 5a8 18 18 00 00 
3432c 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
34330 5aa 00 00 00 00 
34334 5ab 00 00 00 00 
34338 5ac 00          | 	byte	$00[9]
34339 5ac 3C 7C 60 7C 
3433d 5ad 7E 66 66 7E 
34341 5ae 7C 00 00 00 
34345 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
34349 5b0 3E 7E 66 66 
3434d 5b1 66 66 66 7E 
34351 5b2 3E 00 00 00 
34355 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
34359 5b4 3C 3E 06 06 
3435d 5b5 06 06 06 7E 
34361 5b6 7C 00 00 00 
34365 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
34369 5b8 7C 7E 66 66 
3436d 5b9 66 66 66 7E 
34371 5ba 7C 00 00 00 
34375 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
34379 5bc 3C 7E 66 66 
3437d 5bd 7E 06 06 7E 
34381 5be 7C 00 00 00 
34385 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
34389 5c0 18 7E 7E 18 
3438d 5c1 18 18 18 18 
34391 5c2 18 00 00 00 
34395 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
34399 5c4 7C 7E 66 66 
3439d 5c5 66 66 7E 7C 
343a1 5c6 60 7E 3E 00 
343a5 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
343a9 5c8 3E 7E 66 66 
343ad 5c9 66 66 66 66 
343b1 5ca 66 00 00 00 
343b5 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
343b9 5cc 1C 1C 18 18 
343bd 5cd 18 18 18 3C 
343c1 5ce 3C 00 00 00 
343c5 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
343c9 5d0 30 30 30 30 
343cd 5d1 30 30 30 30 
343d1 5d2 30          | 	byte	$30[9]
343d2 5d2 3E 1E 00 00 
343d6 5d3 06 06 06 36 
343da 5d4 36 1E 1E 1E 
343de 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
343e2 5d6 00 00 00 00 
343e6 5d7 1C 1C 18 18 
343ea 5d8 18 18 18 18 
343ee 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
343f2 5da 00 00 00 00 
343f6 5db 00 00 00    | 	byte	$00[7]
343f9 5dc 6C FE FE D6 
343fd 5dd D6 C6 C6 C6 
34401 5de C6 00 00 00 
34405 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
34409 5e0 3E 7E 66 66 
3440d 5e1 66 66 66 66 
34411 5e2 66 00 00 00 
34415 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
34419 5e4 3C 7E 66 66 
3441d 5e5 66 66 66 7E 
34421 5e6 3C 00 00 00 
34425 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
34429 5e8 3E 7E 66 66 
3442d 5e9 66 66 66 7E 
34431 5ea 3E 06 06 00 
34435 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
34439 5ec 7C 7E 66 66 
3443d 5ed 66 66 66 7E 
34441 5ee 7C 60 60 00 
34445 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
34449 5f0 3E 7E 66 06 
3444d 5f1 06 06 06 06 
34451 5f2 06 00 00 00 
34455 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
34459 5f4 7C 7E 06 0E 
3445d 5f5 3C 70 60 7E 
34461 5f6 3E 00 00 00 
34465 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
34469 5f8 7E 7E 18 18 
3446d 5f9 18 18 18 78 
34471 5fa 70 00 00 00 
34475 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
34479 5fc 66 66 66 66 
3447d 5fd 66 66 66    | 	byte	$66[7]
34480 5fe 7E 7C 00 00 
34484 5ff 00 00 00 00 
34488 600 00 66 66 66 
3448c 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
34490 602 18 18 00 00 
34494 603 00 00 00 00 
34498 604 00 C6 C6 D6 
3449c 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
344a0 606 C6 82 00 00 
344a4 607 00 00 00 00 
344a8 608 00 66 66 3C 
344ac 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
344b0 60a 66 66 00 00 
344b4 60b 00 00 00 00 
344b8 60c 00 66 66 66 
344bc 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
344c0 60e 7C 60 7E 3E 
344c4 60f 00 00 00 00 
344c8 610 00 7E 7E 30 
344cc 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
344d0 612 7E 7E 00 00 
344d4 613 00 00 30 18 
344d8 614 18 18 18 0C 
344dc 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
344e0 616 18 30 00 00 
344e4 617 00 00 18 18 
344e8 618 18 18 18 18 
344ec 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
344f0 61a 18 18 00 00 
344f4 61b 00 00 0C 18 
344f8 61c 18 18 18 30 
344fc 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
34500 61e 18 0C 00 00 
34504 61f 00 00 6C 7E 
34508 620 36 00 00 00 
3450c 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
34510 622 00 00 00 00 
34514 623 00 00 00 00 
34518 624 00          | 	byte	$00[9]
34519 624 18 18 18 18 
3451d 625 18 18 00 00 
34521 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
34524 627             | 'amiga_font     file "amigafont.def"
34524 627 00 6C FE FE 
34528 628 7C 38 10 00 
3452c 629 18 18 18 F8 
34530 62a F8 18 18 18 | a8_font        file "atari8.fnt"
34534 62b C0 C0 C0 C0 
34538 62c C0 C0 C0 C0 | 	byte	$c0[8]
3453c 62d 18 18 18 1F 
34540 62e 1F 00 00 00 
34544 62f 18 18 18 1F 
34548 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
3454c 631 00 00 00 1F 
34550 632 1F 18 18 18 
34554 633 C0 E0 70 38 
34558 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
3455c 635 03 07 0E 1C 
34560 636 38 70 E0 C0 
34564 637 80 C0 E0 F0 
34568 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
3456c 639 00 00 00 00 
34570 63a F0 F0 F0 F0 
34574 63b 01 03 07 0F 
34578 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
3457c 63d F0 F0 F0 F0 
34580 63e 00 00 00 00 
34584 63f 0F 0F 0F 0F 
34588 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
3458c 641 FF FF 00 00 
34590 642 00 00 00 00 
34594 643 00 00 00 00 
34598 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
3459c 645 00 00 00 00 
345a0 646 0F 0F 0F 0F 
345a4 647 00 38 38 EE 
345a8 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
345ac 649 00 00 00 F8 
345b0 64a F8 18 18 18 
345b4 64b 00 00 00 FF 
345b8 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
345bc 64d 18 18 18 FF 
345c0 64e FF 18 18 18 
345c4 64f 00 00 3C 7E 
345c8 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
345cc 651 00 00 00 00 
345d0 652 FF FF FF FF 
345d4 653 03 03 03 03 
345d8 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
345dc 655 00 00 00 FF 
345e0 656 FF 18 18 18 
345e4 657 18 18 18 FF 
345e8 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
345ec 659 0F 0F 0F 0F 
345f0 65a 0F 0F 0F 0F | 	byte	$0f[8]
345f4 65b 18 18 18 F8 
345f8 65c F8 00 00 00 
345fc 65d 1E 06 1E 06 
34600 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
34604 65f 00 18 3C 7E 
34608 660 18 18 18 00 
3460c 661 00 18 18 18 
34610 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
34614 663 00 18 0C 7E 
34618 664 0C 18 00 00 
3461c 665 00 18 30 7E 
34620 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
34624 667 00 00 00 00 
34628 668 00 00 00 00 
3462c 669 00          | 	byte	$00[9]
3462d 669 18 18 18 18 
34631 66a 00 18 00 00 
34635 66b 66 66 66 00 
34639 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
3463d 66d 66 FF 66 66 
34641 66e FF 66 00 18 
34645 66f 7C 06 3C 60 
34649 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
3464d 671 66 36 18 0C 
34651 672 66 62 00 38 
34655 673 6C 38 1C F6 
34659 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
3465d 675 18 18 18 00 
34661 676 00 00 00 00 
34665 677 70 38 18 18 
34669 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
3466d 679 0E 1C 18 18 
34671 67a 1C 0E 00 00 
34675 67b 66 3C FF 3C 
34679 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
3467d 67d 18 18 7E 18 
34681 67e 18 00 00 00 
34685 67f 00 00 00 00 
34689 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
3468d 681 00 00 7E 00 
34691 682 00 00 00 00 
34695 683 00 00 00 00 
34699 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
3469d 685 60 30 18 0C 
346a1 686 06 02 00 00 
346a5 687 3C 66 76 6E 
346a9 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
346ad 689 18 1C 18 18 
346b1 68a 18 7E 00 00 
346b5 68b 3C 66 30 18 
346b9 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
346bd 68d 7E 30 18 30 
346c1 68e 66 3C 00 00 
346c5 68f 30 38 3C 36 
346c9 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
346cd 691 7E 06 3E 60 
346d1 692 66 3C 00 00 
346d5 693 3C 06 3E 66 
346d9 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
346dd 695 7E 60 30 18 
346e1 696 0C 0C 00 00 
346e5 697 3C 66 3C 66 
346e9 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
346ed 699 3C 66 7C 60 
346f1 69a 30 1C 00 00 
346f5 69b 00 18 18 00 
346f9 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
346fd 69d 00 18 18 00 
34701 69e 18 18 0C 60 
34705 69f 30 18 0C 18 
34709 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
3470d 6a1 00 7E 00 00 
34711 6a2 7E 00 00 06 
34715 6a3 0C 18 30 18 
34719 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
3471d 6a5 3C 66 30 18 
34721 6a6 00 18 00 00 
34725 6a7 3C 66 76 76 
34729 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
3472d 6a9 18 3C 66 66 
34731 6aa 7E 66 00 00 
34735 6ab 3E 66 3E 66 
34739 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
3473d 6ad 3C 66 06 06 
34741 6ae 66 3C 00 00 
34745 6af 1E 36 66 66 
34749 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
3474d 6b1 7E 06 3E 06 
34751 6b2 06 7E 00 00 
34755 6b3 7E 06 3E 06 
34759 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
3475d 6b5 7C 06 06 76 
34761 6b6 66 7C 00 00 
34765 6b7 66 66 7E 66 
34769 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
3476d 6b9 7E 18 18 18 
34771 6ba 18 7E 00 00 
34775 6bb 60 60 60 60 
34779 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
3477d 6bd 66 36 1E 1E 
34781 6be 36 66 00 00 
34785 6bf 06 06 06 06 
34789 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
3478d 6c1 C6 EE FE D6 
34791 6c2 C6 C6 00 00 
34795 6c3 66 6E 7E 7E 
34799 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
3479d 6c5 3C 66 66 66 
347a1 6c6 66 3C 00 00 
347a5 6c7 3E 66 66 3E 
347a9 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
347ad 6c9 3C 66 66 66 
347b1 6ca 36 6C 00 00 
347b5 6cb 3E 66 66 3E 
347b9 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
347bd 6cd 3C 06 3C 60 
347c1 6ce 60 3C 00 00 
347c5 6cf 7E 18 18 18 
347c9 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
347cd 6d1 66 66 66 66 
347d1 6d2 66          | 	byte	$66[5]
347d2 6d2 7E 00 00 66 
347d6 6d3 66 66 66 3C 
347da 6d4 18 00 00 C6 
347de 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
347e2 6d6 C6 00 00 66 
347e6 6d7 66 3C 3C 66 
347ea 6d8 66 00 00 66 
347ee 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
347f2 6da 18 00 00 7E 
347f6 6db 30 18 0C 06 
347fa 6dc 7E 00 00 78 
347fe 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
34802 6de 78 00 00 02 
34806 6df 06 0C 18 30 
3480a 6e0 60 00 00 1E 
3480e 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
34812 6e2 1E 00 00 10 
34816 6e3 38 6C C6 00 
3481a 6e4 00 00 00 00 
3481e 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
34822 6e6 FF 00 00 18 
34826 6e7 3C 7E 7E 3C 
3482a 6e8 18 00 00 00 
3482e 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
34832 6ea 7C 00 00 06 
34836 6eb 06 3E 66 66 
3483a 6ec 3E 00 00 00 
3483e 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
34842 6ee 3C 00 00 60 
34846 6ef 60 7C 66 66 
3484a 6f0 7C 00 00 00 
3484e 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
34852 6f2 3C 00 00 70 
34856 6f3 18 7C 18 18 
3485a 6f4 18 00 00 00 
3485e 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
34862 6f6 60 3E 00 06 
34866 6f7 06 3E 66 66 
3486a 6f8 66 00 00 18 
3486e 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
34872 6fa 3C 00 00 60 
34876 6fb 00 60 60 60 
3487a 6fc 60 3C 00 06 
3487e 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
34882 6fe 66 00 00 1C 
34886 6ff 18 18 18 18 
3488a 700 3C 00 00 00 
3488e 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
34892 702 C6 00 00 00 
34896 703 3E 66 66 66 
3489a 704 66 00 00 00 
3489e 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
348a2 706 3C 00 00 00 
348a6 707 3E 66 66 3E 
348aa 708 06 06 00 00 
348ae 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
348b2 70a 60 60 00 00 
348b6 70b 3E 66 06 06 
348ba 70c 06 00 00 00 
348be 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
348c2 70e 3E 00 00 18 
348c6 70f 7E 18 18 18 
348ca 710 70 00 00 00 
348ce 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
348d2 712 7C 00 00 00 
348d6 713 66 66 66 3C 
348da 714 18 00 00 00 
348de 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
348e2 716 6C 00 00 00 
348e6 717 66 3C 18 3C 
348ea 718 66 00 00 00 
348ee 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
348f2 71a 30 1E 00 00 
348f6 71b 7E 30 18 0C 
348fa 71c 7E 00 00 18 
348fe 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
34902 71e 3C 00 18 18 
34906 71f 18 18 18 18 
3490a 720 18 18 00 7E 
3490e 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
34912 722 60 00 10 18 
34916 723 1C 1E 1C 18 
3491a 724 10 00 08 18 
3491e 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
34922 726 08 00       | 	byte	$08, $00
34924 727 00 00 00 00 
34928 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
34929 728 80 00 00 00 
3492d 729 00 80 00 00 
34931 72a 80 80 00 00 
34935 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
34939 72c 80 00 80 00 
3493d 72d 00 40 80 00 
34941 72e AA AA AA 00 
34945 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
34949 730 FF 00 00 00 
3494d 731 00 FF 00 00 
34951 732 FF FF 00 00 
34955 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
34959 734 FF 00 FF 00 
3495d 735 00 FF FF 00 
34961 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
34964 737 00 00 00 00 
34968 738 00          | ataripalette   file "ataripalettep2.def"
34969 738 11 11 11 00 
3496d 739 22 22 22 00 
34971 73a 33 33 33 00 
34975 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
34979 73c 55 55 55 00 
3497d 73d 66 66 66 00 
34981 73e 77 77 77 00 
34985 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
34989 740 99 99 99 00 
3498d 741 AA AA AA 00 
34991 742 BB BB BB 00 
34995 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
34999 744 DD DD DD 00 
3499d 745 EE EE EE 00 
349a1 746 FF FF FF 00 
349a5 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
349a9 748 00 14 40 00 
349ad 749 00 1E 60 00 
349b1 74a 00 28 80 00 
349b5 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
349b9 74c 00 3C BF 00 
349bd 74d 00 46 DF 00 
349c1 74e 00 50 FF 00 
349c5 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
349c9 750 39 77 FF 00 
349cd 751 55 8A FF 00 
349d1 752 71 9E FF 00 
349d5 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
349d9 754 AA C5 FF 00 
349dd 755 C6 D8 FF 00 
349e1 756 E3 EC FF 00 
349e5 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
349e9 758 00 00 40 00 
349ed 759 00 00 60 00 
349f1 75a 00 00 80 00 
349f5 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
349f9 75c 00 00 BF 00 
349fd 75d 00 00 DF 00 
34a01 75e 00 00 FF 00 
34a05 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
34a09 760 39 39 FF 00 
34a0d 761 55 55 FF 00 
34a11 762 71 71 FF 00 
34a15 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
34a19 764 AA AA FF 00 
34a1d 765 C6 C6 FF 00 
34a21 766 E3 E3 FF 00 
34a25 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
34a29 768 20 00 40 00 
34a2d 769 30 00 60 00 
34a31 76a 40 00 80 00 
34a35 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
34a39 76c 60 00 BF 00 
34a3d 76d 70 00 DF 00 
34a41 76e 80 00 FF 00 
34a45 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
34a49 770 9C 39 FF 00 
34a4d 771 AA 55 FF 00 
34a51 772 B8 71 FF 00 
34a55 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
34a59 774 D5 AA FF 00 
34a5d 775 E3 C6 FF 00 
34a61 776 F1 E3 FF 00 
34a65 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
34a69 778 40 00 40 00 
34a6d 779 60 00 60 00 
34a71 77a 80 00 80 00 
34a75 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
34a79 77c BF 00 BF 00 
34a7d 77d DF 00 DF 00 
34a81 77e FF 00 FF 00 
34a85 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
34a89 780 FF 39 FF 00 
34a8d 781 FF 55 FF 00 
34a91 782 FF 71 FF 00 
34a95 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
34a99 784 FF AA FF 00 
34a9d 785 FF C6 FF 00 
34aa1 786 FF E3 FF 00 
34aa5 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
34aa9 788 40 00 20 00 
34aad 789 60 00 30 00 
34ab1 78a 80 00 40 00 
34ab5 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
34ab9 78c BF 00 60 00 
34abd 78d DF 00 70 00 
34ac1 78e FF 00 80 00 
34ac5 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
34ac9 790 FF 39 9C 00 
34acd 791 FF 55 AA 00 
34ad1 792 FF 71 B8 00 
34ad5 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
34ad9 794 FF AA D5 00 
34add 795 FF C6 E3 00 
34ae1 796 FF E3 F1 00 
34ae5 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
34ae9 798 40 00 00 00 
34aed 799 60 00 00 00 
34af1 79a 80 00 00 00 
34af5 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
34af9 79c BF 00 00 00 
34afd 79d DF 00 00 00 
34b01 79e FF 00 00 00 
34b05 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
34b09 7a0 FF 39 39 00 
34b0d 7a1 FF 55 55 00 
34b11 7a2 FF 71 71 00 
34b15 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
34b19 7a4 FF AA AA 00 
34b1d 7a5 FF C6 C6 00 
34b21 7a6 FF E3 E3 00 
34b25 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
34b29 7a8 40 10 00 00 
34b2d 7a9 60 18 00 00 
34b31 7aa 80 20 00 00 
34b35 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
34b39 7ac BF 30 00 00 
34b3d 7ad DF 38 00 00 
34b41 7ae FF 40 00 00 
34b45 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
34b49 7b0 FF 6A 39 00 
34b4d 7b1 FF 80 55 00 
34b51 7b2 FF 95 71 00 
34b55 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
34b59 7b4 FF BF AA 00 
34b5d 7b5 FF D5 C6 00 
34b61 7b6 FF EA E3 00 
34b65 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
34b69 7b8 40 20 00 00 
34b6d 7b9 60 30 00 00 
34b71 7ba 80 40 00 00 
34b75 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
34b79 7bc BF 60 00 00 
34b7d 7bd DF 70 00 00 
34b81 7be FF 80 00 00 
34b85 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
34b89 7c0 FF 9C 39 00 
34b8d 7c1 FF AA 55 00 
34b91 7c2 FF B8 71 00 
34b95 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
34b99 7c4 FF D5 AA 00 
34b9d 7c5 FF E3 C6 00 
34ba1 7c6 FF F1 E3 00 
34ba5 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
34ba9 7c8 40 30 00 00 
34bad 7c9 60 48 00 00 
34bb1 7ca 80 60 00 00 
34bb5 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
34bb9 7cc BF 90 00 00 
34bbd 7cd DF A8 00 00 
34bc1 7ce FF C0 00 00 
34bc5 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
34bc9 7d0 FF CE 39 00 
34bcd 7d1 FF D5 55 00 
34bd1 7d2 FF DC 71 00 
34bd5 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
34bd9 7d4 FF EA AA 00 
34bdd 7d5 FF F1 C6 00 
34be1 7d6 FF F8 E3 00 
34be5 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
34be9 7d8 30 40 00 00 
34bed 7d9 48 60 00 00 
34bf1 7da 60 80 00 00 
34bf5 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
34bf9 7dc 90 BF 00 00 
34bfd 7dd A8 DF 00 00 
34c01 7de C0 FF 00 00 
34c05 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
34c09 7e0 CE FF 39 00 
34c0d 7e1 D5 FF 55 00 
34c11 7e2 DC FF 71 00 
34c15 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
34c19 7e4 EA FF AA 00 
34c1d 7e5 F1 FF C6 00 
34c21 7e6 F8 FF E3 00 
34c25 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
34c29 7e8 00 40 00 00 
34c2d 7e9 00 60 00 00 
34c31 7ea 00 80 00 00 
34c35 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
34c39 7ec 00 BF 00 00 
34c3d 7ed 00 DF 00 00 
34c41 7ee 00 FF 00 00 
34c45 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
34c49 7f0 39 FF 39 00 
34c4d 7f1 55 FF 55 00 
34c51 7f2 71 FF 71 00 
34c55 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
34c59 7f4 AA FF AA 00 
34c5d 7f5 C6 FF C6 00 
34c61 7f6 E3 FF E3 00 
34c65 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
34c69 7f8 00 40 14 00 
34c6d 7f9 00 60 1E 00 
34c71 7fa 00 80 28 00 
34c75 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
34c79 7fc 00 BF 3C 00 
34c7d 7fd 00 DF 46 00 
34c81 7fe 00 FF 50 00 
34c85 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
34c89 800 39 FF 77 00 
34c8d 801 55 FF 8A 00 
34c91 802 71 FF 9E 00 
34c95 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
34c99 804 AA FF C5 00 
34c9d 805 C6 FF D8 00 
34ca1 806 E3 FF EC 00 
34ca5 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
34ca9 808 00 40 28 00 
34cad 809 00 60 3C 00 
34cb1 80a 00 80 50 00 
34cb5 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
34cb9 80c 00 BF 78 00 
34cbd 80d 00 DF 8C 00 
34cc1 80e 00 FF A0 00 
34cc5 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
34cc9 810 39 FF B5 00 
34ccd 811 55 FF C0 00 
34cd1 812 71 FF CA 00 
34cd5 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
34cd9 814 AA FF DF 00 
34cdd 815 C6 FF EA 00 
34ce1 816 E3 FF F4 00 
34ce5 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
34ce9 818 00 40 40 00 
34ced 819 00 60 60 00 
34cf1 81a 00 80 80 00 
34cf5 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
34cf9 81c 00 BF BF 00 
34cfd 81d 00 DF DF 00 
34d01 81e 00 FF FF 00 
34d05 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
34d09 820 39 FF FF 00 
34d0d 821 55 FF FF 00 
34d11 822 71 FF FF 00 
34d15 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
34d19 824 AA FF FF 00 
34d1d 825 C6 FF FF 00 
34d21 826 E3 FF FF 00 
34d25 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
34d29 828 00 28 40 00 
34d2d 829 00 3C 60 00 
34d31 82a 00 50 80 00 
34d35 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
34d39 82c 00 78 BF 00 
34d3d 82d 00 8C DF 00 
34d41 82e 00 A0 FF 00 
34d45 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
34d49 830 39 B5 FF 00 
34d4d 831 55 C0 FF 00 
34d51 832 71 CA FF 00 
34d55 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
34d59 834 AA DF FF 00 
34d5d 835 C6 EA FF 00 
34d61 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
34d64 837             | 
34d64 837             | '**********************************************************************************
34d64 837             | '
34d64 837             | '        Timings and colors definitions
34d64 837             | '
34d64 837             | '**********************************************************************************
34d64 837             | 
34d64 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
34d64 837 08 00 00 00 
34d68 838 3C 00 00 00 
34d6c 839 08 00 00 00 
34d70 83a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
34d74 83b 07 00 00 00 
34d78 83c 04 00 00 00 
34d7c 83d 01 00 00 00 
34d80 83e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
34d84 83f 58 02 00 00 
34d88 840 20 9E 4B 14 
34d8c 841 FB A8 9E 01 
34d90 842 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
34d94 843 00 00 00 00 
34d98 844 C0 00 00 00 
34d9c 845 00 00 00 00 
34da0 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34da4 847             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
34da4 847 00 75 C7 97 
34da8 848 27 47 F6 0A 
34dac 849 05 79 CB 9B 
34db0 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
34db4 84b             | 
34db4 84b             | ''--------  Initialization  ----------------------------------------------------------------
34db4 84b             | 
34db4 84b 28 0C 64 FD | hdmi            setq    #6
34db8 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
34dbc 84d 28 10 64 FD |                 setq    #8
34dc0 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
34dc4 84f             | 
34dc4 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
34dc8 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
34dcc 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
34dd0 852 D6 C6 01 F1 |                 add     t1,hbase
34dd4 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
34dd8 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
34ddc 855 7B 0B 80 5F 
34de0 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
34de4 857 66 66 86 FF 
34de8 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
34dec 859             | '
34dec 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
34df0 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
34df4 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
34df8 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
34dfc 85d             | 
34dfc 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
34e00 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
34e04 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
34e08 860             | 
34e08 860             | ''--------  frame rendering main loop  ---------------------------------------------------
34e08 860             | 
34e08 860 28 06 64 FD | p101            setq 	#3
34e0c 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
34e10 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
34e14 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
34e18 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
34e1c 865 00 A0 05 F6 |                 mov     dlinum, #0
34e20 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
34e24 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
34e28 868             | 
34e28 868             | 
34e28 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
34e2c 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
34e30 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
34e34 86b             |                 
34e34 86b             | 
34e34 86b             | 
34e34 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
34e34 86b             |   
34e34 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
34e38 86c 29 FE 65 3D |          if_nc  setq2   #255
34e3c 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
34e40 86e             | 
34e40 86e             | '' -----   up porch (before the picture)
34e40 86e             | 
34e40 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
34e44 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
34e48 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
34e4c 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
34e50 872             |  
34e50 872             |    
34e50 872             |  
34e50 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
34e54 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
34e58 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
34e5c 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
34e60 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
34e64 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
34e68 878             | 
34e68 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
34e6c 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
34e70 87a 48 00 B0 FD | 		call    #dli
34e74 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
34e78 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
34e7c 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
34e80 87e             |                 	
34e80 87e             |                 
34e80 87e             | 
34e80 87e             |  
34e80 87e             | '' ------- the main screen drawing starts here
34e80 87e             | 
34e80 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
34e84 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
34e88 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
34e8c 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
34e90 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
34e94 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
34e98 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
34e9c 885             |               
34e9c 885             | 
34e9c 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
34ea0 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
34ea4 887             | 
34ea4 887             | ' ---------------- All visible lines displayed now, start vblank  
34ea4 887             | 
34ea4 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
34ea8 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
34eac 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
34eb0 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
34eb4 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
34eb8 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
34ebc 88d             | 
34ebc 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
34ebc 88d             | 
34ebc 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
34ebc 88d             | 
34ebc 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
34ec0 88e             | 
34ec0 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
34ec4 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
34ec8 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
34ecc 891             | 
34ecc 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
34ed0 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
34ed4 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
34ed8 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
34edc 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
34ee0 896             | 
34ee0 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
34ee4 897 DD C6 41 F8 |                 getnib  t1,dl,#0
34ee8 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
34eec 899 70 00 90 AD |     if_z        jmp     #preload
34ef0 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
34ef4 89b 94 00 90 AD |     if_z        jmp     #preload2
34ef8 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
34efc 89d 0C 00 90 AD |     if_z        jmp     #p390
34f00 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
34f04 89f 28 00 90 AD |     if_z        jmp     #p391  
34f08 8a0             | 
34f08 8a0 2D 00 64 FD | p308            ret
34f0c 8a1             |    
34f0c 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
34f10 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
34f14 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
34f18 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
34f1c 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
34f20 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
34f24 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
34f28 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
34f2c 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
34f30 8aa             |  
34f30 8aa             | '' --------  Reload palette. To do 
34f30 8aa             | 
34f30 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
34f34 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
34f38 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
34f3c 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
34f40 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
34f44 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
34f48 8b0 70 FF 9F FD |         	jmp     #dli                
34f4c 8b1             |       
34f4c 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
34f4c 8b1             | 
34f4c 8b1             | 
34f4c 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
34f4c 8b1             | 
34f4c 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
34f50 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
34f54 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
34f58 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
34f5c 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
34f60 8b6             |         
34f60 8b6             | '' -------------- Preload a line from PSRAM        
34f60 8b6             |         
34f60 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
34f64 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
34f68 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
34f6c 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
34f70 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
34f74 8bb             | 
34f74 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
34f78 8bc 32 B7 01 F6 |                 mov     buf2,a1024
34f7c 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
34f80 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
34f84 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
34f88 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
34f8c 8c1             |  
34f8c 8c1             |  
34f8c 8c1             | preload2      '  incmod  dlinum,#3
34f8c 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
34f90 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
34f94 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
34f98 8c4 28 02 64 FD |                 setq	#1
34f9c 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
34fa0 8c6             |                 
34fa0 8c6             | 
34fa0 8c6             | '' -------------- Draw sprites
34fa0 8c6             | 
34fa0 8c6 CF 5C 02 F6 | sprite          mov t8,frames
34fa4 8c7 10 5C 0E F5 | 		and t8,#16 wz
34fa8 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
34fac 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
34fb0 8ca             | 		
34fb0 8ca             | 
34fb0 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
34fb4 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
34fb8 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
34fbc 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
34fc0 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
34fc4 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
34fc8 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
34fcc 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
34fd0 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
34fd4 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
34fd8 8d4 01 52 86 F1 |                 sub     sprite_h,#1
34fdc 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
34fe0 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
34fe4 8d7             | 
34fe4 8d7             | 
34fe4 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
34fe8 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
34fec 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
34ff0 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
34ff4 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
34ff8 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
34ffc 8dd 00 5E 06 F6 |                 mov 	t9,#0
35000 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
35004 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
35008 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
3500c 8e1             |      
3500c 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
35010 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
35014 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
35018 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
3501c 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
35020 8e6             |                 
35020 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
35024 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
35028 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
3502c 8e9             |   		
3502c 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
35030 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
35034 8eb             | 
35034 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
35038 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
3503c 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
35040 8ee             |  
35040 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
35044 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
35048 8f0 10 00 90 CD |      if_c 	jmp     #p899		
3504c 8f1             | 	
3504c 8f1             | 	
3504c 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
35050 8f2 28 CD 01 F1 | 		add	t4,sprite_w
35054 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
35058 8f4             | 
35058 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
3505c 8f5             | 
3505c 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
35060 8f6 01 58 86 F1 | 	 	sub     t6,#1
35064 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
35068 8f8             | 
35068 8f8 28 58 62 FD |                 setq   	t6
3506c 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
35070 8fa 28 5D 02 F6 |                 mov t8,sprite_w
35074 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
35078 8fc 24 00 90 AD |         if_z    jmp #p898
3507c 8fd             |          
3507c 8fd             |         
3507c 8fd 70 5F 06 F6 |                 mov  t9,#368
35080 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
35084 8ff             | 
35084 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
35088 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
3508c 901 FF FF 7F FF 
35090 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
35094 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
35098 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
3509c 905 2D 01 00 F5 |                 and 0-0, t7
350a0 906             |                
350a0 906             | 
350a0 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
350a4 907 E5 E0 7A FA |                 wmlong 368,t3				
350a8 908             |                 
350a8 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
350ac 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
350b0 90a 2D 00 64 FD |                 ret
350b4 90b             | 	
350b4 90b             | 	
350b4 90b             |                
350b4 90b             |  
350b4 90b             | '' -------------- Graphics line ------------------------------------------------------------
350b4 90b             |  
350b4 90b             | 
350b4 90b             | '' consts and vars
350b4 90b             | 
350b4 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
350b8 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
350bc 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
350c0 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
350c4 90f             | 
350c4 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
350c8 910             | 
350c8 910             | '------ these longs will be set by setmode function
350c8 910             | 
350c8 910 00 00 00 00 | m_bs            long    0        'blanks before sync
350cc 911 00 00 00 00 | m_sn            long    0        'sync
350d0 912 00 00 00 00 | m_bv            long    0        'blanks before visible
350d4 913 00 00 00 00 | m_vi            long    0        'visible pixels #
350d8 914             | 'm_border        long    0        'left/right borders
350d8 914 00 00 00 00 | i_upporch       long    0        'up porch lines
350dc 915 00 00 00 00 | i_vsync         long    0        'vsync lines
350e0 916 00 00 00 00 | i_downporch     long    0        'down porch lines
350e4 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
350e8 918 00 00 00 00 | i_totalvis      long    0
350ec 919             | 
350ec 919             | '-------------------------------------
350ec 919             |  
350ec 919 00 00 00 00 | linenum         long    0
350f0 91a 00 00 00 00 | frames          long    0
350f4 91b 00 00 00 00 | dlinum long 0
350f8 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
350fc 91d             | 
350fc 91d 00 00 00 00 | vblankptr       long    0
35100 91e 00 00 00 00 | modeptr         long    0
35104 91f 00 00 00 00 | paletteptr      long    0
35108 920 00 00 00 00 | dlptr           long    0
3510c 921 01 00 00 00 | hbase           long    1
35110 922 00 00 00 00 | mailbox         long    0
35114 923 00 00 00 00 | spriteptr          long 0
35118 924             | 
35118 924 00 00 00 00 | cmd             long    0
3511c 925 00 B0 07 00 | buf1            long    $80000-16384-4096
35120 926 00 04 00 00 | buf2            long    1024
35124 927 01 00 00 00 | dlptr2          long    1
35128 928 01 00 00 00 | dl              long    1
3512c 929             | 
3512c 929 00 00 00 00 | buf1c long 0
35130 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
35134 92b 01 00 00 00 | framebuf2       long    1
35138 92c 01 00 00 00 | hsync0          long    1
3513c 92d 01 00 00 00 | hsync1          long    1
35140 92e             | 
35140 92e 01 00 00 00 | t1              long    1
35144 92f 00 00 00 00 | t2 long 0
35148 930 00 00 00 00 | t3 long 0
3514c 931 00 00 00 00 | t4 long 0
35150 932             | 
35150 932 00 00 00 00 | rcnt            long    0  'dl repeat count
35154 933 00 00 00 00 | rcnt2           long    0
35158 934 00 00 00 00 | rcnt2a          long    0
3515c 935 00 00 00 00 | roffset         long    0
35160 936 00 00 00 00 | rdl             long    0  'dl repeat line
35164 937 00 00 00 00 | dlc             long    0  'dl command
35168 938             | 
35168 938 FF FF FF FF | affffffff       long    $ffffffff
3516c 939 00 00 00 00 | sprite1pointer long 0
35170 93a 00 00 00 00 | sprite1xy      long 0
35174 93b 00 00 00 00 | sprite1wh      long 0
35178 93c 00 00 00 00 | sprite2pointer long 0
3517c 93d 00 00 00 00 | sprite2xy      long 0
35180 93e 00 00 00 00 | sprite2wh      long 0
35184 93f 00 00 00 00 | sprite3pointer long 0
35188 940 00 00 00 00 | sprite3xy      long 0
3518c 941 00 00 00 00 | sprite3wh      long 0
35190 942 00 00 00 00 | sprite4pointer long 0
35194 943 00 00 00 00 | sprite4xy      long 0
35198 944 00 00 00 00 | sprite4wh      long 0
3519c 945 00 00 00 00 | sprite5pointer long 0
351a0 946 00 00 00 00 | sprite5xy      long 0
351a4 947 00 00 00 00 | sprite5wh      long 0
351a8 948 00 00 00 00 | sprite6pointer long 0
351ac 949 00 00 00 00 | sprite6xy      long 0
351b0 94a 00 00 00 00 | sprite6wh      long 0
351b4 94b 00 00 00 00 | sprite7pointer long 0
351b8 94c 00 00 00 00 | sprite7xy      long 0
351bc 94d 00 00 00 00 | sprite7wh      long 0
351c0 94e 00 00 00 00 | sprite8pointer long 0
351c4 94f 00 00 00 00 | sprite8xy      long 0
351c8 950 00 00 00 00 | sprite8wh      long 0
351cc 951 00 00 00 00 | sprite9pointer long 0
351d0 952 00 00 00 00 | sprite9xy      long 0
351d4 953 00 00 00 00 | sprite9wh      long 0
351d8 954 00 00 00 00 | sprite10pointer long 0
351dc 955 00 00 00 00 | sprite10xy      long 0
351e0 956 00 00 00 00 | sprite10wh      long 0
351e4 957 00 00 00 00 | sprite11pointer long 0
351e8 958 00 00 00 00 | sprite11xy      long 0
351ec 959 00 00 00 00 | sprite11wh      long 0
351f0 95a 00 00 00 00 | sprite12pointer long 0
351f4 95b 00 00 00 00 | sprite12xy      long 0
351f8 95c 00 00 00 00 | sprite12wh      long 0
351fc 95d 00 00 00 00 | sprite13pointer long 0
35200 95e 00 00 00 00 | sprite13xy      long 0
35204 95f 00 00 00 00 | sprite13wh      long 0
35208 960 00 00 00 00 | sprite14pointer long 0
3520c 961 00 00 00 00 | sprite14xy      long 0
35210 962 00 00 00 00 | sprite14wh      long 0
35214 963 00 00 00 00 | sprite15pointer long 0
35218 964 00 00 00 00 | sprite15xy      long 0
3521c 965 00 00 00 00 | sprite15wh      long 0
35220 966 00 00 00 00 | sprite16pointer long 0
35224 967 00 00 00 00 | sprite16xy      long 0
35228 968 00 00 00 00 | sprite16wh      long 0
3522c 969 00 00 00 00 | sprite17pointer long 0
35230 96a 00 00 00 00 | sprite17xy      long 0
35234 96b 00 00 00 00 | sprite17wh      long 0
35238 96c 00 00 00 00 | sprite18pointer long 0
3523c 96d 00 00 00 00 | sprite18xy      long 0
35240 96e 00 00 00 00 | sprite18wh      long 0
35244 96f 00 00 00 00 | spritenum long 0
35248 970             | 
35248 970 00 00 00 00 | spriteline long 0
3524c 971 84 03 00 00 | sprite_x long 900
35250 972 00 00 00 00 | sprite_y long 0
35254 973 10 00 00 00 | sprite_w long 16
35258 974 40 00 00 00 | sprite_h long 64
3525c 975 00 00 00 00 | l2 long 0
35260 976 00 00 00 00 | t5 long 0
35264 977 00 00 00 00 | t6 long 0
35268 978 00 00 00 00 | t7 long 0
3526c 979 00 00 00 00 | t8 long 0
35270 97a 00 00 00 00 | t9 long 0
35274 97b 00 00 00 00 | preloadaddr long 0
35278 97c 00 00 00 00 | preloadlineaddr long 0
3527c 97d 00 04 00 00 | a1024 long 1024
35280 97e             | 
35280 97e E0 03 00 00 | aa long 992
35284 97f FF 03 00 00 | a1023 long 1023
35288 980 00 10 00 00 | a4096 long 4096
3528c 981             |  fit 368
3528c 981             | _psram_spin2_dat_
3528c 981 00 00 00 00 
      ...             
35384 9bf 00 00 00 00 
35388 9c0 00 00 00 00 |     listdata long 0[8*8]
3538c 9c1             |             orgh
3538c                 | 
3538c                 | ' driver state
3538c     FF FF FF FF | drivercog   long    -1  ' COG id of driver
35390     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
35394                 | 
35394                 | ' delay profile
35394     07 00 00 00 
35398     00 CF 7B 05 
3539c     80 D1 F0 08 
353a0     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
353a4     80 C4 60 0F 
353a8     80 39 7A 12 
353ac     40 2D D9 13 
353b0     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
353b4                 | 
353b4                 | ' data to be passed to driver when starting it
353b4                 | startupData
353b4     00 00 00 00 |     long    0           ' current frequency
353b8     00 00 00 00 |     long    FLAGS       ' optional flags for driver
353bc     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
353c0     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
353c4     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
353c8     D4 53 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
353cc     54 54 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
353d0     74 54 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
353d4                 | 
353d4                 | ' data for memory
353d4                 | deviceData
353d4                 |     ' 16 bank parameters follow (16MB per bank)
353d4     00 00 00 00 
      ...             
3540c     00 00 00 00 
35410     00 00 00 00 |     long    0[16]                               ' banks 0-15
35414                 |     ' 16 banks of pin parameters follow
35414     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
35418     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
3541c     FF FF FF FF 
      ...             
3544c     FF FF FF FF 
35450     FF FF FF FF |     long    -1[14]                              ' banks 2-15
35454                 | 
35454                 | ' data for COG polling
35454                 | qosData 
35454     00 00 FF FF 
35458     00 00 FF FF 
3545c     00 00 FF FF 
35460     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
35464     00 00 FF FF 
35468     00 00 FF FF 
3546c     00 00 FF FF 
35470     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
35474                 |     
35474                 | ' mailbox storage
35474                 | 
35474                 | mailboxes
35474     00 00 00 00 
      ...             
354cc     00 00 00 00 
354d0     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
354d4                 | 	alignl
354d4                 | _psram16drv_spin2_dat_
354d4                 |                             orgh
354d4     00 00 00 00 
      ...             
354ec     00 00 00 00 
354f0     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
354f4                 | 
354f4                 | driver_start
354f4                 |                             org
354f4 000             | '..................................................................................................
354f4 000             | ' Memory layout for COG RAM once operational:
354f4 000             | '
354f4 000             | '  COG RAM address      Usage
354f4 000             | '  ---------------      ----
354f4 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
354f4 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
354f4 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
354f4 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
354f4 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
354f4 000             | '  ~$198-$1F3           State and register variables
354f4 000             | '
354f4 000             | ' Also during driver COG startup:
354f4 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
354f4 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
354f4 000             | '..................................................................................................
354f4 000             |                             
354f4 000             | ' Mailbox storage after vector initialization
354f4 000             | 
354f4 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
354f8 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
354fc 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
35500 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
35504 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
35508 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
3550c 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
35510 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
35514 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
35518 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
3551c 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
35520 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
35524 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
35528 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
3552c 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
35530 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
35534 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
35538 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
3553c 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
35540 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
35544 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
35548 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
3554c 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
35550 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
35554 018             | 
35554 018             | ' Mailbox parameter addresses per COG once patched
35554 018             |                             
35554 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
35558 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
3555c 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
35560 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
35564 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
35568 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
3556c 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
35570 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
35574 020             | 
35574 020             | '..................................................................................................
35574 020             | ' Per COG request and state setup and service branching
35574 020             |         
35574 020             | cog0                 
35574 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
35578 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
3557c 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
35580 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
35584 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
35588 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3558c 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
35590 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
35594 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
35598 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3559c 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
355a0 02b 33 CA 63 FD |                             execf   request-0               'jump to service
355a4 02c             | cog1                        
355a4 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
355a8 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
355ac 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
355b0 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
355b4 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
355b8 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
355bc 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
355c0 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
355c4 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
355c8 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
355cc 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
355d0 037 33 CA 63 FD |                             execf   request-0               'jump to service
355d4 038             | cog2                         
355d4 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
355d8 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
355dc 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
355e0 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
355e4 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
355e8 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
355ec 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
355f0 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
355f4 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
355f8 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
355fc 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
35600 043 33 CA 63 FD |                             execf   request-0               'jump to service
35604 044             | cog3                        
35604 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
35608 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
3560c 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
35610 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
35614 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
35618 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3561c 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
35620 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
35624 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
35628 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3562c 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
35630 04f 33 CA 63 FD |                             execf   request-0               'jump to service
35634 050             | cog4                        
35634 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
35638 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
3563c 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
35640 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
35644 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
35648 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3564c 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
35650 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
35654 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
35658 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3565c 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
35660 05b 33 CA 63 FD |                             execf   request-0               'jump to service
35664 05c             | cog5                        
35664 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
35668 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
3566c 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
35670 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
35674 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
35678 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3567c 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
35680 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
35684 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
35688 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3568c 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
35690 067 33 CA 63 FD |                             execf   request-0               'jump to service
35694 068             | cog6                        
35694 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
35698 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
3569c 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
356a0 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
356a4 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
356a8 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
356ac 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
356b0 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
356b4 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
356b8 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
356bc 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
356c0 073 33 CA 63 FD |                             execf   request-0               'jump to service
356c4 074             | cog7                        
356c4 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
356c8 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
356cc 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
356d0 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
356d4 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
356d8 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
356dc 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
356e0 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
356e4 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
356e8 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
356ec 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
356f0 07f 33 CA 63 FD |                             execf   request-0               'jump to service
356f4 080             |                             fit     128
356f4 080             | 
356f4 080             |                             fit     128
356f4 080             | pad                         long    0[128-$]                'align init code to $80
356f4 080             | 
356f4 080             | '..................................................................................................
356f4 080             | 
356f4 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
356f4 080             | 
356f4 080             | init                        
356f4 080             |                             ' get driver scratch long address in hub
356f4 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
356f8 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
356fc 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
35700 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
35704 084             |                     
35704 084             |                             ' read in the additional LUT RAM code
35704 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
35708 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
3570c 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
35710 087             | 
35710 087             |                             ' read the startup parameters
35710 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
35714 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
35718 089             | 
35718 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
35718 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
3571c 08a             | 
3571c 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
35720 08b 01 00 00 5F 
35724 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
35728 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
3572c 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
35730 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
35734 090             | 
35734 090             |                             ' setup data pin modes and data bus pin group in streamer commands
35734 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
35738 091 01 00 00 FF 
3573c 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
35740 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
35744 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
35748 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
3574c 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
35750 097 08 DE 47 F5 |                             or      a, #8
35754 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
35758 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
3575c 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
35760 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
35764 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
35768 09d 01 DE 07 F1 |                             add     a, #1
3576c 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
35770 09f             |  
35770 09f             |                             ' setup device control pin states
35770 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
35774 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
35778 0a1 01 00 00 FF 
3577c 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
35780 0a3             | 
35780 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
35784 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
35788 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
3578c 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
35790 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
35794 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
35798 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
3579c 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
357a0 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
357a4 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
357a8 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
357ac 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
357b0 0af             | pinloop
357b0 0af             |                             ' generate minimum CE high time before access
357b0 0af A1 07 00 FF 
357b4 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
357b8 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
357bc 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
357c0 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
357c4 0b4 1F DE 63 FD |                             waitx   a                       'delay
357c8 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
357cc 0b6             | 
357cc 0b6             |                             ' setup the COG mailboxes and addresses 
357cc 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
357d0 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
357d4 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
357d8 0b9             | 
357d8 0b9 28 2E 64 FD |                             setq    #24-1
357dc 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
357e0 0bb             | 
357e0 0bb             |                             ' setup the polling loop for active COGs 
357e0 0bb 01 C2 63 FD |                             cogid   id
357e4 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
357e8 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
357ec 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
357f0 0bf 0A F0 07 F6 |                             mov     ptra, #10
357f4 0c0 E1 F1 03 FA |                             mul     ptra, id
357f8 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
357fc 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
35800 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
35804 0c4 03 C2 07 FA |                             mul     id, #3
35808 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
3580c 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
35810 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
35814 0c8 D8 01 B0 FD |                             call    #reloadcogs
35818 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
3581c 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
35820 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
35820 0cb D8 E5 B7 F9 |                             setd    d, #addr1
35824 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
35828 0cd 08 04 DC FC |                             rep     #2, #8
3582c 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
35830 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
35834 0d0             | 
35834 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
35834 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
35834 0d0 01 C2 63 FD |                             cogid   id
35838 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
3583c 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
35840 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
35844 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
35848 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
3584c 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
35850 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
35854 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
35858 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
3585c 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
35860 0db 3F E4 A7 F9 |                             alti    d, #%111_111
35864 0dc 00 00 00 F6 |                             mov     0-0, 0-0
35868 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
3586c 0de A5 E5 03 F1 |                             add     d, const512
35870 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
35874 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
35878 0e1 00 00 00 F6 |                             mov     0-0, 0-0
3587c 0e2             |                             
3587c 0e2             |                             ' setup register values for control vector loop setup after we return
3587c 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
35880 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
35884 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
35888 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
3588c 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
35890 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
35894 0e8 D0 C3 8F F9 |                             altd    id, #id0
35898 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
3589c 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
358a0 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
358a4 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
358a8 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
358ac 0ee             |  
358ac 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
358b0 0ef 07 CA 07 F5 |                             and     request, #7
358b4 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
358b8 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
358bc 0f2             |                             fit     $100                    'ensure all init code fits this space
358bc 0f2             | 
358bc 0f2             |                             fit     $100                    'ensure all init code fits this space
358bc 0f2             | 
358bc 0f2 00 00 00 00 
      ...             
358ec 0fe 00 00 00 00 
358f0 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
358f4 100             | 
358f4 100             | '..................................................................................................
358f4 100             | ' Error result handling and COG notification of request completion
358f4 100             | 
358f4 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
358f8 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
358fc 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
35900 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
35904 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
35908 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
3590c 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
35910 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
35914 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
35918 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
3591c 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
35920 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
35924 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
35928 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
3592c 10e             | ' Poller re-starts here after a COG is serviced
3592c 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
35930 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
35934 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
35938 111             | ' Main dynamic polling loop repeats until a request arrives
35938 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
3593c 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
35940 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
35944 114             | 
35944 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
35948 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
3594c 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
35950 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
35954 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
35958 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
3595c 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
35960 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
35964 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
35968 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
3596c 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
35970 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
35974 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
35978 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
3597c 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
35980 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
35984 124             | 
35984 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
35988 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
3598c 126             |  
3598c 126             | '..................................................................................................
3598c 126             | ' List handler                               
3598c 126             | 
3598c 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
35990 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
35994 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
35998 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
3599c 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
359a0 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
359a4 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
359a8 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
359ac 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
359b0 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
359b4 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
359b8 131 33 00 60 FD |                             execf   0-0                     'process the request 
359bc 132             | 
359bc 132             | '..................................................................................................
359bc 132             | ' Restoring per COG state and resuming where we left off
359bc 132             | 
359bc 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
359c0 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
359c4 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
359c8 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
359cc 136 D8 CB FB F8 |                             getbyte request, addr1, #3
359d0 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
359d4 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
359d8 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
359dc 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
359e0 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
359e4 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
359e8 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
359ec 13e             |                    
359ec 13e             | '..................................................................................................
359ec 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
359ec 13e             | 
359ec 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
359f0 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
359f4 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
359f8 141 D0 DF B7 F9 |                             setd    a, #id0
359fc 142 D8 DF BF F9 |                             sets    a, #addr1
35a00 143 FE FF FF FF 
35a04 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
35a08 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
35a0c 146 3F DE A7 F9 |                             alti    a, #%111_111 
35a10 147 00 00 F0 F9 |                             muxq    0-0, 0-0
35a14 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
35a18 149 01 E2 63 FD |                             cogid   c
35a1c 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
35a20 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
35a24 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
35a28 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
35a2c 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
35a30 14f 00 E0 03 F6 |                             mov     b, 0-0
35a34 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
35a38 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
35a3c 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
35a40 153 0C 00 90 AD |             if_z            jmp     #excluded               
35a44 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
35a48 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
35a4c 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
35a50 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
35a54 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
35a58 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
35a5c 15a             | 
35a5c 15a             | 'determine priority cogs and build instructions for the polling sequence
35a5c 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
35a60 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
35a64 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
35a68 15d             | 
35a68 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
35a6c 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
35a70 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
35a74 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
35a78 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
35a7c 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
35a80 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
35a84 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
35a88 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
35a8c 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
35a90 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
35a94 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
35a98 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
35a9c 16a             | endprioloop
35a9c 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
35aa0 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
35aa4 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
35aa8 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
35aac 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
35ab0 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
35ab4 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
35ab8 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
35abc 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
35ac0 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
35ac4 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
35ac8 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
35acc 176             | 
35acc 176             | ' populate the round robin COG polling instructions
35acc 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
35ad0 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
35ad4 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
35ad8 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
35adc 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
35ae0 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
35ae4 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
35ae8 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
35aec 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
35af0 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
35af4 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
35af8 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
35afc 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
35b00 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
35b04 184             | '..................................................................................................
35b04 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
35b04 184             | 
35b04 184             | set_latency                                                 '            (a) set latency
35b04 184             | get_latency                                                 '            (b) get latency
35b04 184             | set_burst                                                   '            (c) set burst size of bank
35b04 184             | get_burst                                                   '            (d) get burst size of bank
35b04 184             |                                                             '            (e) dump state
35b04 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
35b08 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
35b0c 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
35b10 187             |                                                             ' | | | | e  account for following AUGS
35b10 187 04 00 00 FF 
35b14 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
35b18 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
35b1c 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
35b20 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
35b24 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
35b28 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
35b2c 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
35b30 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
35b34 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
35b38 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
35b3c 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
35b40 193             | 
35b40 193             | '..................................................................................................
35b40 193             | ' Misc EXECF code
35b40 193             | 
35b40 193 33 72 63 FD | start_read_exec             execf   newburstr
35b44 194 33 7C 63 FD | start_write_exec            execf   resumewrites
35b48 195 33 78 63 FD | continue_read_exec          execf   lockedreads
35b4c 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
35b50 197             | 
35b50 197             | '..................................................................................................
35b50 197             | ' Variables
35b50 197             | 
35b50 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
35b54 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
35b58 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
35b5c 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
35b60 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
35b64 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
35b68 19d             | 
35b68 19d 00 00 00 80 | xfreq1          long    $80000000
35b6c 19e 00 00 00 40 | xfreq2          long    $40000000
35b70 19f 03 00 00 00 | delay           long    3
35b74 1a0             | 
35b74 1a0             | lutcodeaddr                 
35b74 1a0             | startupparams
35b74 1a0             | excludedcogs                                    'careful: shared register use!
35b74 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
35b78 1a1 00 00 00 00 | flags           long    0
35b7c 1a2             | mask                                            'careful: shared register use!
35b7c 1a2 00 00 00 00 | resetmaskA      long    0
35b80 1a3             | limit                                           'careful: shared register use!
35b80 1a3 00 00 00 00 | resetmaskB      long    0
35b84 1a4 00 00 00 00 | datapins        long    0
35b88 1a5             | const512                                        'careful: shared register use!
35b88 1a5 00 00 00 00 | devicelist      long    0
35b8c 1a6 00 00 00 00 | coglist         long    0
35b90 1a7 00 00 00 00 | mbox            long    0 
35b94 1a8             | 
35b94 1a8             | clkpin                                          'shared with code patched during init
35b94 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
35b98 1a9             | cspin                                           'shared with code patched during init
35b98 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
35b9c 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
35ba0 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
35ba4 1ac 01 00 00 00 | clkdelay        long    1
35ba8 1ad 00 00 00 00 | regdatabus      long    0
35bac 1ae             | 
35bac 1ae 10 00 00 00 | deviceaddr      long    $10
35bb0 1af             | rrcounter
35bb0 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
35bb4 1b0             | 
35bb4 1b0             | ' jump addresses for the per COG handlers
35bb4 1b0 20 00 00 00 | cog0_handler    long    cog0
35bb8 1b1 2C 00 00 00 | cog1_handler    long    cog1
35bbc 1b2 38 00 00 00 | cog2_handler    long    cog2
35bc0 1b3 44 00 00 00 | cog3_handler    long    cog3
35bc4 1b4 50 00 00 00 | cog4_handler    long    cog4
35bc8 1b5 5C 00 00 00 | cog5_handler    long    cog5
35bcc 1b6 68 00 00 00 | cog6_handler    long    cog6
35bd0 1b7 74 00 00 00 | cog7_handler    long    cog7
35bd4 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
35bd8 1b9             | 
35bd8 1b9             | ' EXECF sequences
35bd8 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
35bdc 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
35be0 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
35be4 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
35be8 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
35bec 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
35bf0 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
35bf4 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
35bf4 1c0             | 
35bf4 1c0             | 
35bf4 1c0             | ' SKIPF sequences
35bf4 1c0             | skiptable
35bf4 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
35bf8 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
35bfc 1c2 00 00 00 00 |                 long    0                      ' read modify write long
35c00 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
35c04 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
35c08 1c5 00 00 00 00 | pattern2        long    0
35c0c 1c6 00 00 00 00 | pattern3        long    0
35c10 1c7 77 02 00 00 | singlelong      long    %1001110111  
35c14 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
35c18 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
35c1c 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
35c20 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
35c24 1cc             | 
35c24 1cc             | ' LUT RAM address values
35c24 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
35c28 1cd DD 02 00 00 | continue_read   long    continue_read_lut
35c2c 1ce DB 02 00 00 | continue_write  long    continue_write_lut
35c30 1cf F6 02 00 00 | noread          long    noread_lut
35c34 1d0             | 
35c34 1d0 00 00 00 00 | id0             long    0
35c38 1d1 01 00 00 00 | id1             long    1
35c3c 1d2 02 00 00 00 | id2             long    2
35c40 1d3 03 00 00 00 | id3             long    3
35c44 1d4 04 00 00 00 | id4             long    4
35c48 1d5 05 00 00 00 | id5             long    5
35c4c 1d6 06 00 00 00 | id6             long    6
35c50 1d7 07 00 00 00 | id7             long    7
35c54 1d8             | 
35c54 1d8             | 'These next 10 request registers below are also temporarily reused during init 
35c54 1d8             | 'and COG updates and need to follow immediately after id0-id7
35c54 1d8 00 00 00 00 | addr1           long    0
35c58 1d9 00 00 00 00 | hubdata         long    0
35c5c 1da 00 00 00 00 | count           long    0
35c60 1db 00 00 00 00 | addr2           long    0
35c64 1dc 00 00 00 00 | total           long    0
35c68 1dd 00 00 00 00 | offset1         long    0
35c6c 1de 00 00 00 00 | offset2         long    0
35c70 1df 00 00 00 00 | link            long    0
35c74 1e0             | 
35c74 1e0             | burstwrite                                      'note shared register use during init
35c74 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
35c78 1e1 00 00 00 00 | id              long    0
35c7c 1e2             | 
35c7c 1e2 00 00 00 00 | header          long    0
35c80 1e3 00 00 00 00 | trailer         long    0
35c84 1e4 00 00 00 00 | cmdaddr         long    0
35c88 1e5 00 00 00 00 | request         long    0
35c8c 1e6 00 00 00 00 | rrlimit         long    0
35c90 1e7 00 00 00 00 | pinconfig       long    0
35c94 1e8 00 00 00 00 | clks            long    0
35c98 1e9 00 00 00 00 | resume          long    0
35c9c 1ea 00 00 00 00 | orighubsize     long    0
35ca0 1eb 00 00 00 00 | wrclks          long    0
35ca4 1ec             | 
35ca4 1ec 00 00 00 00 | pattern         long    0
35ca8 1ed 00 00 00 00 | hubscratch      long    0
35cac 1ee 00 10 00 00 | val4k           long    4096
35cb0 1ef             | 
35cb0 1ef             | ' temporary general purpose regs
35cb0 1ef 00 00 00 00 | a               long    0
35cb4 1f0 00 00 00 00 | b               long    0
35cb8 1f1 00 00 00 00 | c               long    0
35cbc 1f2 00 00 00 00 | d               long    0
35cc0 1f3             |                 fit     502
35cc0 1f3             | 
35cc0 1f3             |                 fit     502
35cc0 1f3             | 
35cc0 1f3             | '..................................................................................................
35cc0 1f3             | 
35cc0 1f3             |             orgh
35cc0                 | 
35cc0                 | lut_code
35cc0                 | 'HW init code up to 80 longs
35cc0                 | 
35cc0                 | '..................................................................................................
35cc0                 | ' Memory layout for LUT RAM once operational:
35cc0                 | '
35cc0                 | '  LUT RAM address      Usage
35cc0                 | '  ---------------      ----
35cc0                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
35cc0                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
35cc0                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
35cc0                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
35cc0                 | '
35cc0                 | ' Also during driver COG startup:
35cc0                 | ' $230-$24F is used for HW init setup
35cc0                 | ' $250-$26F is used as temporary vector storage 
35cc0                 | '..................................................................................................
35cc0                 | 
35cc0                 |                 org $230    
35cc0 230             | 
35cc0 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
35cc0 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
35cc4 231 24 16 60 FD |                             pollxfi
35cc8 232 FF AA 2A FF 
35ccc 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
35cd0 234 28 00 B0 FD |                             call    #sendqspi
35cd4 235 07 F8 07 FF 
35cd8 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
35cdc 237 28 00 B0 FD |                             call    #sendspi
35ce0 238 F8 07 78 FF 
35ce4 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
35ce8 23a 1C 00 B0 FD |                             call    #sendspi
35cec 23b 7F 78 78 FF 
35cf0 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
35cf4 23d 10 00 B0 FD |                             call    #sendspi 
35cf8 23e 2D 00 64 FD |                             ret
35cfc 23f             | 
35cfc 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
35d00 240 32 0C 64 FD |                             skipf   #%110
35d04 241 9C EF 03 F6 |                             mov     pb, xsendimm
35d08 242             | 
35d08 242 10 D0 07 F6 | sendspi                     mov     clks, #16
35d0c 243 97 EF 03 F6 |                             mov     pb, ximm8lut
35d10 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
35d14 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
35d18 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
35d1c 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
35d20 248 24 36 60 FD |                             waitxfi                         'wait for the completion
35d24 249 50 48 63 FD |                             fltl    datapins                'float data bus
35d28 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
35d2c 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
35d30 24c             | 
35d30 24c 00 00 00 00 
35d34 24d 00 00 00 00 
35d38 24e 00 00 00 00 
35d3c 24f 00 00 00 00 |                 long    0[$270-32-$]
35d40 250             |                 fit     $270-32  ' keep room for 32 vector longs
35d40 250             |     
35d40 250             |                 fit     $270-32  ' keep room for 32 vector longs
35d40 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
35d40 250             | rw_vect ' PSRAM jump vectors
35d40 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
35d44 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
35d48 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
35d4c 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
35d50 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
35d54 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
35d58 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
35d5c 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
35d60 258             | ro_vect ' R/O PSRAM jump vectors
35d60 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
35d64 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
35d68 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
35d6c 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
35d70 25c 00 01 00 00 |                 long    unsupported
35d74 25d 00 01 00 00 |                 long    unsupported
35d78 25e 00 01 00 00 |                 long    unsupported
35d7c 25f 00 01 00 00 |                 long    unsupported
35d80 260             | ctrl_vect ' Control jump vectors
35d80 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
35d84 261 00 01 00 00 |                 long    unsupported
35d88 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
35d8c 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
35d90 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
35d94 265 00 01 00 00 |                 long    unsupported
35d98 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
35d9c 267 3E 01 00 00 |                 long    reconfig 
35da0 268             | no_vect ' Invalid bank jump vectors
35da0 268 01 01 00 00 |                 long    invalidbank
35da4 269 01 01 00 00 |                 long    invalidbank
35da8 26a 01 01 00 00 |                 long    invalidbank
35dac 26b 01 01 00 00 |                 long    invalidbank
35db0 26c 01 01 00 00 |                 long    invalidbank
35db4 26d 01 01 00 00 |                 long    invalidbank
35db8 26e 01 01 00 00 |                 long    invalidbank
35dbc 26f 01 01 00 00 |                 long    invalidbank
35dc0 270             |                 fit     $270
35dc0 270             | 
35dc0 270             |                 fit     $270
35dc0 270             | '..................................................................................................
35dc0 270             | ' PSRAM READS
35dc0 270             |                                                             ' a b c d e f
35dc0 270             |                                                             ' B W L B R L  (a) byte read
35dc0 270             |                                                             ' Y O O U E O  (b) word read
35dc0 270             |                                                             ' T R N R S C  (c) long read
35dc0 270             |                                                             ' E D G S U K  (d) new burst read
35dc0 270             |                                                             '       T M E  (e) resumed sub-burst
35dc0 270             |                                                             '         E D  (f) locked sub-burst
35dc0 270             | 
35dc0 270             | 
35dc0 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
35dc4 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
35dc8 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
35dcc 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
35dd0 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
35dd4 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
35dd8 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
35ddc 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
35de0 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
35de4 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
35de8 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
35dec 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
35df0 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
35df4 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
35df8 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
35dfc 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
35e00 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
35e04 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
35e08 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
35e0c 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
35e10 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
35e14 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
35e18 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
35e1c 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
35e20 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
35e24 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
35e28 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
35e2c 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
35e30 28c             | 
35e30 28c             |                             ' fall through to read bursts
35e30 28c             |                         
35e30 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
35e30 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
35e34 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
35e38 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
35e3c 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
35e40 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
35e44 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
35e48 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
35e4c 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
35e50 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
35e54 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
35e58 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
35e5c 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
35e60 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
35e64 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
35e68 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
35e6c 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
35e70 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
35e74 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
35e78 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
35e7c 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
35e80 2a0 E8 D1 03 F1 |                             add     clks, clks
35e84 2a1             | readcommon
35e84 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
35e88 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
35e8c 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
35e90 2a4             | 
35e90 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
35e94 2a5 69 C8 63 FD |                             rev     cmdaddr
35e98 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
35e9c 2a7 61 C8 63 FD |                             mergeb  cmdaddr
35ea0 2a8             | 
35ea0 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
35ea4 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
35ea8 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
35ea8 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
35eac 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
35eb0 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
35eb4 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
35eb8 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
35eb8 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
35ebc 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
35ec0 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
35ec4 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
35ec8 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
35ecc 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
35ed0 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
35ed0 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
35ed4 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
35ed8 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
35edc 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
35ee0 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
35ee4 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
35ee8 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
35eec 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
35ef0 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
35ef4 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
35ef8 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
35efc 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
35f00 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
35f04 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
35f08 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
35f08 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
35f0c 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
35f10 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
35f14 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
35f18 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
35f1c 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
35f20 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
35f24 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
35f28 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
35f2c 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
35f30 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
35f34 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
35f38 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
35f3c 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
35f40 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
35f44 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
35f48 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
35f4c 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
35f50 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
35f54 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
35f58 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
35f5c 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
35f60 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
35f64 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
35f68 2da 10 03 90 FD |                             jmp     #writecommon
35f6c 2db             | 
35f6c 2db             | '..................................................................................................
35f6c 2db             | ' Burst continuation testing
35f6c 2db             | 
35f6c 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
35f70 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
35f74 2dd             | continue_read_lut          
35f74 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
35f78 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
35f7c 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
35f80 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
35f84 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
35f88 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
35f8c 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
35f90 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
35f94 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
35f98 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
35f9c 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
35fa0 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
35fa4 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
35fa8 2ea             | 
35fa8 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
35fac 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
35fb0 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
35fb4 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
35fb8 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
35fbc 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
35fc0 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
35fc4 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
35fc8 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
35fcc 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
35fd0 2f4 2A 1C 66 0D |             _ret_           push    #poller
35fd4 2f5             | 
35fd4 2f5             | 
35fd4 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
35fd8 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
35fd8 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
35fdc 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
35fe0 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
35fe4 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
35fe8 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
35fec 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
35ff0 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
35ff4 2fd 2D 00 64 FD |                             ret                             ' | continue processing
35ff8 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
35ffc 2ff             | '..................................................................................................
35ffc 2ff             | ' Completion of requests
35ffc 2ff             | 
35ffc 2ff             | complete_rw_lut             
35ffc 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
36000 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
36004 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
36008 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
3600c 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
36010 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
36014 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
36018 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
3601c 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
36020 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
36024 309 32 62 64 AD |             if_z            skipf   #%110001
36028 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
3602c 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
36030 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
36034 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
36038 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
3603c 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
36040 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
36044 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
36048 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
3604c 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
36050 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
36054 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
36058 316             |                                                             ' skipcase (a) gfx copy to/from hub
36058 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
36058 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
36058 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
3605c 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
36060 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
36064 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
36068 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
3606c 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
36070 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
36074 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
36078 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
3607c 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
36080 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
36084 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
36088 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
3608c 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
36090 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
36094 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
36098 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
3609c 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
360a0 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
360a4 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
360a8 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
360ac 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
360b0 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
360b4 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
360b8 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
360bc 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
360c0 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
360c4 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
360c8 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
360cc 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
360d0 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
360d4 335 DF B7 03 A6 |             if_z            mov     addr2, link
360d8 336 34 FF 9F AD |             if_z            jmp     #checknext
360dc 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
360e0 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
360e4 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
360e8 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
360ec 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
360f0 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
360f4 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
360f8 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
360fc 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
36100 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
36104 341             | 
36104 341             | '..................................................................................................
36104 341             | ' PSRAM WRITES
36104 341             |                                                             '  a b c d e f g h
36104 341             | 
36104 341             |                                                             '  B W L F B R L L (a) byte write(s)
36104 341             |                                                             '  Y O O I U E O O (b) word write(s)
36104 341             |                                                             '  T R N L R S C C (c) long write(s)
36104 341             |                                                             '  E D G L S U K K (d) resumed fill
36104 341             |                                                             '          T M E E (e) new burst write
36104 341             |                                                             '            E D D (f) resumed burst
36104 341             |                                                             '              F B (g) locked fill
36104 341             |                                                             '              I U (h) locked burst write
36104 341             |                                                             '              L R 
36104 341             |                                                             '              L S 
36104 341             |                                                             '                T 
36104 341             | 
36104 341             | w_single                   
36104 341             | w_fill_cont           
36104 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
36108 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
3610c 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
36110 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
36114 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
36118 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
3611c 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
36120 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
36124 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
36128 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
3612c 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
36130 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
36134 34d             |                ' disable call to r_resume_burst for single longs when z=0
36134 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
36138 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
3613c 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
36140 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
36144 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
36148 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
3614c 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
36150 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
36154 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
36158 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
3615c 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
36160 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
36164 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
36168 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
3616c 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
36170 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
36174 35d             |         
36174 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
36174 35d             |             '
36174 35d             |             '  At least one of these 3 optional components will be sent
36174 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
36174 35d             |             '     body - N x full longs of data
36174 35d             |             '     trailer - last partial long of data
36174 35d             |             '
36174 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
36174 35d             |             '
36174 35d             |             'Case    Type                           Sends
36174 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
36174 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
36174 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
36174 35d             |             ' 4)     Multiple long fill             body only
36174 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
36174 35d             | 
36174 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
36174 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
36178 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3617c 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
36180 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
36184 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
36188 362 13 8C 07 F6 |                             mov     pattern3, #%10011
3618c 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
36190 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
36194 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
36198 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
3619c 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
361a0 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
361a4 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
361a8 36a             |                             
361a8 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
361ac 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
361b0 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
361b4 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
361b8 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
361bc 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
361c0 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
361c4 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
361c8 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
361cc 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
361d0 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
361d4 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
361d8 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
361dc 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
361e0 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
361e4 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
361e8 37a             | 
361e8 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
361ec 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
361f0 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
361f4 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
361f8 37e             |                  
361f8 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
361fc 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
36200 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
36204 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
36208 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
3620c 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
36210 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
36214 385             | 
36214 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
36218 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
3621c 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
36220 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
36224 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
36228 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
3622c 38b             | 
3622c 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
3622c 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
36230 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
36234 38d 2A B0 63 FD |                             push    addr1                   'save address
36238 38e             | 
36238 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
36238 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
3623c 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
36240 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
36244 391             |             
36244 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
36248 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
3624c 393 2B B0 63 FD |                             pop     addr1                   'restore address
36250 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
36254 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
36258 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
3625c 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
36260 398             | 
36260 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
36264 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
36268 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
3626c 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
36270 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
36274 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
36278 39e             | 
36278 39e             |                             'trailer is done
36278 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
3627c 39f             | 
3627c 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
36280 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
36284 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
36288 3a2             | 
36288 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3628c 3a3 69 C8 63 FD |                             rev     cmdaddr                 
36290 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
36294 3a5 61 C8 63 FD |                             mergeb  cmdaddr
36298 3a6             |                             
36298 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
3629c 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
362a0 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
362a4 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
362a8 3aa             |                                                          
362a8 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
362ac 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
362b0 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
362b4 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
362b8 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
362bc 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
362c0 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
362c4 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
362c8 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
362cc 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
362d0 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
362d4 3b5             |  
362d4 3b5 59 52 63 FD |                             drvh    cspin
362d8 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
362dc 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
362e0 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
362e4 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
362e8 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
362ec 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
362f0 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
362f4 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
362f8 3be EA E5 03 F6 |                             mov     d, orighubsize
362fc 3bf EF E5 63 F0 |                             shl     d, a
36300 3c0 F2 E3 83 F1 |                             sub     c, d
36304 3c1 DD E3 03 F1 |                             add     c, offset1
36308 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
3630c 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
36310 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
36314 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
36318 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
3631c 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
36320 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
36324 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
36328 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
3632c 3cb BB D3 03 F6 |                             mov     resume, restorefill
36330 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
36334 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
36338 3ce 6C FC BF CD |             if_c            call    #yield
3633c 3cf 2D 00 64 FD |                             ret
36340 3d0             |                            
36340 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
36340 3d0             |                       '     rczl    pa                      'rotate left into address offset
36340 3d0             |                       '     rczl    c wcz                   'restore count and flags
36340 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
36344 3d1 02 EC 67 F0 |                             shl     pa, #2
36348 3d2 28 06 64 AD |             if_z            setq    #3
3634c 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
36350 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
36354 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
36358 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
3635c 3d7             | 
3635c 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
36360 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
36364 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
36368 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
3636c 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
36370 3dc             |                 fit 1024-32
36370 3dc             |         
36370 3dc             | 
36370 3dc             | '..................................................................................................
36370 3dc             | 
36370 3dc             |                 fit 1024-32
36370 3dc 00 00 00 00 
36374 3dd 00 00 00 00 
36378 3de 00 00 00 00 
3637c 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
36380 3e0             |                 org 1024-32
36380 000             | 
36380 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
36380 000 00 00 00 00 |                 long $0000
36384 001 11 11 00 00 |                 long $1111
36388 002 22 22 00 00 |                 long $2222
3638c 003 33 33 00 00 |                 long $3333
36390 004 44 44 00 00 |                 long $4444
36394 005 55 55 00 00 |                 long $5555
36398 006 66 66 00 00 |                 long $6666
3639c 007 77 77 00 00 |                 long $7777
363a0 008 88 88 00 00 |                 long $8888
363a4 009 99 99 00 00 |                 long $9999
363a8 00a AA AA 00 00 |                 long $aaaa
363ac 00b BB BB 00 00 |                 long $bbbb
363b0 00c CC CC 00 00 |                 long $cccc
363b4 00d DD DD 00 00 |                 long $dddd
363b8 00e EE EE 00 00 |                 long $eeee
363bc 00f FF FF 00 00 |                 long $ffff
363c0 010             | 
363c0 010             | 'masks
363c0 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
363c4 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
363c8 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
363cc 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
363d0 014             | 
363d0 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
363d4 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
363d8 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
363dc 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
363e0 018             | 
363e0 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
363e4 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
363e8 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
363ec 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
363f0 01c             | 
363f0 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
363f4 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
363f8 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
363fc 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
36400 020             |         fit 1024
36400 020             | 
36400 020             |         fit 1024
36400 020             | 
36400 020             | '--------------------------------------------------------------------------------------------------
36400 020             |         orgh
36400                 | 
36400                 | gfxexpansion
36400                 |                             'simple line drawing graphics expansion of memory driver
36400                 |                             'jmp     #donerepeats                'just return for now
36400                 | 
36400     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
36404     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
36408     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
3640c     DD E1 03 F6 |                             mov     b, offset1              'get error term
36410     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
36414     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
36418     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
3641c     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
36420     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
36424     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
36428     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
3642c     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
36430     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
36434     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
36438     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
3643c     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
36440     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
36444     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
36448     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
3644c     DC E5 33 F9 |                             getword d, total, #0            'get line width
36450     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
36454     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
36458     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
3645c     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
36460     C3 03 80 FD |                             jmp     #readmask               'continue filling
36464                 | 	alignl
36464                 | _usbnew_spin2_dat_
36464                 |                 org     $000
36464 000             | 
36464 000             | usb_host_start
36464 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
36468 001             | 
36468 001 03 00 00 FF 
3646c 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
36470 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
36474 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
36478 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
3647c 006 29 70 63 FD |                 setq2   htmp
36480 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
36484 008             | 
36484 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
36488 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
3648c 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
36490 00b             | 
36490 00b             | '------------------------------------------------------------------------------
36490 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
36490 00b             | ' special because the receiving function must not respond with either STALL or
36490 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
36490 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
36490 00b             | ' corrupt packet, it must ignore the transaction
36490 00b             | '------------------------------------------------------------------------------
36490 00b             | ' On entry:
36490 00b             | '   PTRA - start address of the SETUP data struct.
36490 00b             | ' On exit:
36490 00b             | '   retval - PID_ACK on success, otherwise error code.
36490 00b             | '------------------------------------------------------------------------------
36490 00b             | txn_setup
36490 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
36494 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
36498 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
3649c 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
364a0 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
364a4 010             | .setup
364a4 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
364a8 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
364ac 012 2D 00 64 AD |         if_z    ret
364b0 013 7C 0B B0 FD |                 call    #retry_wait
364b4 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
364b8 015 2D 00 64 AD |         if_z    ret
364bc 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
364c0 017 E0 FF 9F FD |                 jmp     #.setup
364c4 018             | 
364c4 018             | '------------------------------------------------------------------------------
364c4 018             | ' IN/INTERRUPT transaction.
364c4 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
364c4 018             | '------------------------------------------------------------------------------
364c4 018             | ' On entry:
364c4 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
364c4 018             | '     CRC(b19..23).
364c4 018             | ' On exit:
364c4 018             | '------------------------------------------------------------------------------
364c4 018             | txn_in
364c4 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
364c8 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
364cc 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
364d0 01b             | 
364d0 01b             |                 ' Fall through to urx_packet
364d0 01b             | 
364d0 01b             | '------------------------------------------------------------------------------
364d0 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
364d0 01b             | ' received are handshakes and IN DATAx.
364d0 01b             | '------------------------------------------------------------------------------
364d0 01b             | ' On entry:
364d0 01b             | ' On exit:
364d0 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
364d0 01b             | '     returned.
364d0 01b             | '------------------------------------------------------------------------------
364d0 01b             | urx_packet
364d0 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
364d4 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
364d8 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
364dc 01e 1A 92 63 FD |                 getct   hct2
364e0 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
364e4 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
364e8 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
364ec 022             | .wait_sop
364ec 022 22 A7 8A FA |                 rdpin   urx, dm
364f0 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
364f4 024 08 00 90 CD |         if_c    jmp     #.get_pid
364f8 025 FC 25 CC FB |                 jnct2   #.wait_sop
364fc 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
36500 027             | .get_pid
36500 027 28 02 B0 FD |                 call    #urx_next
36504 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
36508 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
3650c 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
36510 02b             | .chk_pid
36510 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36514 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
36518 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
3651c 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
36520 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
36524 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
36528 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
3652c 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
36530 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
36534 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
36538 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
3653c 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
36540 037             | .ack_resend
36540 037 22 A7 82 FA |                 rqpin   urx, dm
36544 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
36548 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
3654c 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
36550 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
36554 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
36558 03d             | .chk_eop
36558 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3655c 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
36560 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
36564 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
36568 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
3656c 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
36570 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
36574 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
36578 045 2D 00 64 FD |                 ret
3657c 046             | .idle
3657c 046 22 A7 82 FA |                 rqpin   urx, dm
36580 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
36584 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
36588 049 2D 00 64 FD |                 ret
3658c 04a             | 
3658c 04a             | '------------------------------------------------------------------------------
3658c 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
3658c 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
3658c 04a             | ' if one is required.
3658c 04a             | '------------------------------------------------------------------------------
3658c 04a             | ' On entry:
3658c 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
3658c 04a             | ' On exit:
3658c 04a             | '------------------------------------------------------------------------------
3658c 04a             | utx_token
3658c 04a 22 A7 82 FA |                 rqpin   urx, dm
36590 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
36594 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
36598 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3659c 04e 34 0D B0 CD |         if_c    call    #utx_pre
365a0 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
365a4 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
365a8 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
365ac 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
365b0 053             | .next_byte
365b0 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
365b4 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
365b8 055             | .wait
365b8 055 40 46 72 FD |                 testp   dp                      wc
365bc 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
365c0 057 23 03 08 FC |                 akpin   dp
365c4 058 22 A5 22 FC |                 wypin   utx, dm
365c8 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
365cc 05a             | 
365cc 05a             | '------------------------------------------------------------------------------
365cc 05a             | ' SETUP/OUT/INTERRUPT transaction.
365cc 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
365cc 05a             | '------------------------------------------------------------------------------
365cc 05a             | ' On entry:
365cc 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
365cc 05a             | '     CRC(b19..23).
365cc 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
365cc 05a             | '   pkt_data - count of DATAx payload bytes to send.
365cc 05a             | ' On exit:
365cc 05a             | '------------------------------------------------------------------------------
365cc 05a             | txn_out
365cc 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
365d0 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
365d4 05c 00 00 C0 FF 
365d8 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
365dc 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
365e0 05f             | 
365e0 05f             |                 ' Fall through to utx_data
365e0 05f             | 
365e0 05f             | '------------------------------------------------------------------------------
365e0 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
365e0 05f             | ' calculated while the data byte is being shifted out. Since data stage
365e0 05f             | ' success/fail is not determined until the status stage of the transaction,
365e0 05f             | ' this routine is only concerned about the current DATAx packet.
365e0 05f             | '------------------------------------------------------------------------------
365e0 05f             | ' On entry:
365e0 05f             | '   PTRA - hub start address of the data to read.
365e0 05f             | '   pkt_cnt - data payload size.
365e0 05f             | ' On exit:
365e0 05f             | '------------------------------------------------------------------------------
365e0 05f             | utx_data
365e0 05f 22 A7 82 FA |                 rqpin   urx, dm
365e4 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
365e8 061 F4 FF 9F CD |         if_c    jmp     #utx_data
365ec 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
365f0 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
365f4 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
365f8 065 D8 0C B0 CD |         if_c    call    #utx_pre
365fc 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
36600 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
36604 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
36608 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
3660c 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
36610 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
36614 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
36618 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
3661c 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
36620 06f             | .read_byte
36620 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
36624 070 F0 00 B0 FD |                 call    #utx_byte
36628 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
3662c 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
36630 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
36634 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
36638 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
3663c 076             | .send_crc
3663c 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
36640 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
36644 078 D0 00 B0 FD |                 call    #utx_byte
36648 079 5D A5 EA F8 |                 getbyte utx, crc, #1
3664c 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
36650 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
36654 07c             | 
36654 07c             | '------------------------------------------------------------------------------
36654 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
36654 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
36654 07c             | ' expects that the packet includes at least the CRC word.
36654 07c             | '
36654 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
36654 07c             | ' was requested, which makes it difficult to determine where the data stops
36654 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
36654 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
36654 07c             | ' USB-16 expected residual value of 0xB001.
36654 07c             | '
36654 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
36654 07c             | ' so the caller can verify IN success before writing the data to its final
36654 07c             | ' destination.
36654 07c             | '------------------------------------------------------------------------------
36654 07c             | ' On entry:
36654 07c             | '   pkt_data - max byte count expected to be in the packet.
36654 07c             | '   newb_flg - signals new byte ready when toggled.
36654 07c             | ' On exit:
36654 07c             | '   pkt_cnt - actual number of bytes read.
36654 07c             | '------------------------------------------------------------------------------
36654 07c             | urx_data
36654 07c F7 75 03 F6 |                 mov     htmp2, pb
36658 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
3665c 07e 00 00 C0 FF 
36660 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
36664 080 BA EF 03 F6 |                 mov     pb, htmp2
36668 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3666c 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
36670 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
36674 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
36678 085             | .wait_byte
36678 085             | ' In-line rx for max speed
36678 085 22 A7 82 FA |                 rqpin   urx, dm
3667c 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
36680 087 53 A5 02 F5 |                 and     utx, urx
36684 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
36688 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3668c 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
36690 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
36694 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
36698 08d DC FF 9F FD |                 jmp     #.wait_byte
3669c 08e             | .get_byte
3669c 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
366a0 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
366a4 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
366a8 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
366ac 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
366b0 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
366b4 094             | .end_crc
366b4 094 01 B8 06 F1 |                 add     pkt_cnt, #1
366b8 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
366bc 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
366c0 097 2D 00 64 1D |         if_a    ret
366c4 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
366c4 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
366c4 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
366c4 098             | ' to miss it, so cheat a bit and look for SOP clear here.
366c4 098 22 A7 82 FA |                 rqpin   urx, dm
366c8 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
366cc 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
366d0 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
366d0 09b             | .chk_crc
366d0 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
366d4 09c 58 00 00 FF 
366d8 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
366dc 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
366e0 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
366e4 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
366e8 0a1 34 09 B0 FD |                 call    #poll_waitx
366ec 0a2             | 
366ec 0a2             |                 ' Fall through to utx_handshake
366ec 0a2             | 
366ec 0a2             | '------------------------------------------------------------------------------
366ec 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
366ec 0a2             | ' the appropriate IP delay has been inserted.
366ec 0a2             | '------------------------------------------------------------------------------
366ec 0a2             | ' On entry:
366ec 0a2             | '   retval - handshake PID to send.
366ec 0a2             | ' On exit:
366ec 0a2             | '   retval unchanged.
366ec 0a2             | '------------------------------------------------------------------------------
366ec 0a2             | utx_handshake
366ec 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
366f0 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
366f4 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
366f8 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
366fc 0a6 5F A5 02 F6 |                 mov     utx, retval
36700 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
36704 0a8             | .idle
36704 0a8 22 A7 82 FA |                 rqpin   urx, dm
36708 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3670c 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
36710 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
36714 0ac 08 09 90 FD |                 jmp     #poll_waitx
36718 0ad             | 
36718 0ad             | '------------------------------------------------------------------------------
36718 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
36718 0ad             | '------------------------------------------------------------------------------
36718 0ad             | ' On entry:
36718 0ad             | '   utx - byte to transmit.
36718 0ad             | ' On exit:
36718 0ad             | '------------------------------------------------------------------------------
36718 0ad             | utx_byte
36718 0ad 40 46 72 FD |                 testp   dp                      wc
3671c 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
36720 0af 23 03 08 FC |                 akpin   dp
36724 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
36728 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
3672c 0b2             | 
3672c 0b2             | '------------------------------------------------------------------------------
3672c 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
3672c 0b2             | '------------------------------------------------------------------------------
3672c 0b2             | ' On entry:
3672c 0b2             | ' On exit:
3672c 0b2             | '   retval - the byte read.
3672c 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
3672c 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
3672c 0b2             | '     received.
3672c 0b2             | '------------------------------------------------------------------------------
3672c 0b2             | urx_next
3672c 0b2 22 A7 8A FA |                 rdpin   urx, dm
36730 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
36734 0b4 53 A5 02 F5 |                 and     utx, urx
36738 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3673c 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
36740 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
36744 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
36748 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3674c 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
36750 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
36754 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
36758 0bd 2D 00 64 FD |                 ret
3675c 0be             | 
3675c 0be             | '------------------------------------------------------------------------------
3675c 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
3675c 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
3675c 0be             | ' length, and the PID is not included in the CRC calculation:
3675c 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
3675c 0be             | '  CRC5  ENDP ADDRESS PID
3675c 0be             | ' %00000_1111_1111111_xxxxxxxx
3675c 0be             | '------------------------------------------------------------------------------
3675c 0be             | ' On entry:
3675c 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
3675c 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
3675c 0be             | ' On exit:
3675c 0be             | '   ep_addr_pid - CRC value appended to the packet.
3675c 0be             | '------------------------------------------------------------------------------
3675c 0be             | calc_crc5
3675c 0be FF 03 00 FF 
36760 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
36764 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
36768 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
3676c 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
36770 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
36774 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
36778 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
3677c 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
36780 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
36784 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
36788 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
3678c 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
36790 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
36794 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
36798 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
3679c 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
367a0 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
367a4 0d0             | 
367a4 0d0             | '------------------------------------------------------------------------------
367a4 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
367a4 0d0             | '------------------------------------------------------------------------------
367a4 0d0             | isr1_fsframe
367a4 0d0 1A 92 62 FD |                 getct   iframe_ct_base
367a8 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
367ac 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
367b0 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
367b4 0d4             | .wait
367b4 0d4 40 46 72 FD |                 testp   dp                      wc
367b8 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
367bc 0d6 23 03 08 FC |                 akpin   dp
367c0 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
367c4 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
367c8 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
367cc 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
367d0 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
367d4 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
367d8 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
367dc 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
367e0 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
367e4 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
367e8 0e1 2C FF BF FD |                 call    #utx_byte
367ec 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
367f0 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
367f4 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
367f8 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
367fc 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
36800 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
36804 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
36808 0e9 5B A5 42 F5 |                 or      utx, icrc
3680c 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
36810 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
36814 0ec 20 00 90 FD |                 jmp     #isr1_wait
36818 0ed             | isr1_lsframe
36818 0ed 1A 92 62 FD |                 getct   iframe_ct_base
3681c 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
36820 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
36824 0f0             | .wait
36824 0f0 40 46 72 FD |                 testp   dp                      wc
36828 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
3682c 0f2 23 03 08 FC |                 akpin   dp
36830 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
36834 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
36838 0f5             | isr1_wait
36838 0f5 22 A5 82 FA |                 rqpin   utx, dm
3683c 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
36840 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
36844 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
36848 0f9 03 00 00 FF 
3684c 0fa FF B3 06 F5 |                 and     frame, ##$7ff
36850 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
36854 0fc F5 FF 3B FB |                 reti1
36858 0fd             | 
36858 0fd             | '------------------------------------------------------------------------------
36858 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
36858 0fd             | ' transaction will complete before the next frame is triggered.
36858 0fd             | '------------------------------------------------------------------------------
36858 0fd             | ' On entry:
36858 0fd             | ' On exit:
36858 0fd             | '------------------------------------------------------------------------------
36858 0fd             | wait_txn_ok
36858 0fd 1A 74 63 FD |                 getct   htmp2
3685c 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
36860 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
36864 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
36868 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
3686c 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
36870 103 2D 00 64 FD |                 ret
36874 104             | 
36874 104             | '------------------------------------------------------------------------------
36874 104             | ' A device connection was detected, or a bus reset was requested by the USB
36874 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
36874 104             | ' and perform a reset sequence prior to device enumeration.
36874 104             | '------------------------------------------------------------------------------
36874 104             | dev_reset
36874 104 22 A7 82 FA |                 rqpin   urx, dm
36878 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
3687c 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
36880 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
36884 108             | reset
36884 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
36888 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
3688c 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
36890 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
36894 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
36898 10d 1A 92 62 FD |                 getct   iframe_ct_base
3689c 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
368a0 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
368a4 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
368a8 111 24 70 07 F1 |                 add     htmp, #36
368ac 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
368b0 113             | .framewait
368b0 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
368b4 114 F8 FF 9F CD |         if_b    jmp     #.framewait
368b8 115 2D 00 64 FD |                 ret
368bc 116             | 
368bc 116             | '------------------------------------------------------------------------------
368bc 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
368bc 116             | '------------------------------------------------------------------------------
368bc 116             | ' On entry:
368bc 116             | '   PTRA - source address.
368bc 116             | '   PB - destination address.
368bc 116             | '   hr0 - length of copy, in bytes.
368bc 116             | ' On exit:
368bc 116             | '------------------------------------------------------------------------------
368bc 116             | hmemcpy
368bc 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
368c0 117 F7 71 43 FC |                 wrbyte  htmp, pb
368c4 118 01 EE 07 F1 |                 add     pb, #1
368c8 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
368cc 11a             | 
368cc 11a             | '------------------------------------------------------------------------------
368cc 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
368cc 11a             | ' loop until the errant device is disconnected.
368cc 11a             | '------------------------------------------------------------------------------
368cc 11a             | ' On entry:
368cc 11a             | ' On exit:
368cc 11a             | '------------------------------------------------------------------------------
368cc 11a             | host_error
368cc 11a             |           if ERROR_LED >= 0
368cc 11a             |           end
368cc 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
368d0 11b             | 
368d0 11b             | '------------------------------------------------------------------------------
368d0 11b             | ' Get HID descriptor buffer for current port
368d0 11b             | '------------------------------------------------------------------------------
368d0 11b             | ' On entry:
368d0 11b             | ' On exit:
368d0 11b             | '   PB - HID descriptor buffer pointer
368d0 11b             | '------------------------------------------------------------------------------
368d0 11b             | get_hid_descr_buffer
368d0 11b 2D EF 03 F6 |                 mov     pb, hdev_port
368d4 11c 01 EE E7 F2 |                 cmpsub  pb, #1
368d8 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
368dc 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
368e0 11f             | 
368e0 11f             | 
368e0 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
368e4 120             | 
368e4 120             | ' USB commands and error codes
368e4 120 00 00 00 00 | cmd_data        long    0
368e8 121 00 00 00 00 | usb_err_code    long    ERR_NONE
368ec 122             | 
368ec 122             | ' Parameters block assigned at cog startup
368ec 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
368f0 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
368f4 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
368f8 125             | if ACTIVITY_LED >= 0
368f8 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
368f8 125             | end
368f8 125             | if ERROR_LED >= 0
368f8 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
368f8 125             | end
368f8 125 00 00 00 00 | hid_descr_p     long    0
368fc 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
368fc 126             | 'hkbd_report_p   long    0
368fc 126 00 00 00 00 | hub_descr_p     long    0
36900 127 00 00 00 00 | urx_buff_p      long    0
36904 128 00 00 00 00 | dev_desc_buff_p long    0
36908 129 00 00 00 00 | con_desc_buff_p long    0
3690c 12a 00 00 00 00 | cache_start_p   long    0
36910 12b 00 00 00 00 | cache_end_p     long    0
36914 12c             | if EMUPAD_MAX_PLAYER > 0
36914 12c             | emupad_out_ptr  long    0
36914 12c             | end
36914 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
36918 12d             | 
36918 12d             | hdev_init_start
36918 12d             | hdev_port       res     1
36918 12d             | hdev_port       res     1
36918 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
36918 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
36918 12d             | kbm_next_datax  res     1
36918 12d             | kbm_next_datax  res     1
36918 12d             | hub_intf_num    res     1
36918 12d             | hub_intf_num    res     1
36918 12d             | hub_next_datax  res     1
36918 12d             | hub_next_datax  res     1
36918 12d             | hub_status_chg  res     1
36918 12d             | hub_status_chg  res     1
36918 12d             | hub_port_status res     1
36918 12d             | hub_port_status res     1
36918 12d             | if HAVE_MOUSE
36918 12d             | ms_intf_num     res     1
36918 12d             | ms_intf_num     res     1
36918 12d             | ms_in_max_pkt   res     1
36918 12d             | ms_in_max_pkt   res     1
36918 12d             | end
36918 12d             | kb_intf_num     res     1
36918 12d             | kb_intf_num     res     1
36918 12d             | kb_interval     res     1
36918 12d             | kb_interval     res     1
36918 12d             | kb_in_max_pkt   res     1
36918 12d             | kb_in_max_pkt   res     1
36918 12d             | kb_max_index    res     1
36918 12d             | kb_max_index    res     1
36918 12d             | kb_led_states   res     1
36918 12d             | kb_led_states   res     1
36918 12d             | gp_intf_num     res     1
36918 12d             | gp_intf_num     res     1
36918 12d             | gp_interval     res     1
36918 12d             | gp_interval     res     1
36918 12d             | gp_max_index    res     1
36918 12d             | gp_max_index    res     1
36918 12d             | gp_descr_len    res     1+MAX_DEVICES
36918 12d             | gp_descr_len    res     1+MAX_DEVICES
36918 12d             | hdev_init_end
36918 12d             | 
36918 12d             | ' Initialized at cog startup:
36918 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
36918 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
36918 12d             | iframe_ct_new   res     1
36918 12d             | iframe_ct_new   res     1
36918 12d             | iframe_ct_base  res     1
36918 12d             | iframe_ct_base  res     1
36918 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
36918 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
36918 12d             | 
36918 12d             | ' This register block is reset to zero when a USB device connects
36918 12d             | hreg_init_start
36918 12d             | hstatus         res     1         ' Host status flags
36918 12d             | hstatus         res     1         ' Host status flags
36918 12d             | hctwait         res     1         ' Poll-based wait clocks
36918 12d             | hctwait         res     1         ' Poll-based wait clocks
36918 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
36918 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
36918 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
36918 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
36918 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
36918 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
36918 12d             | xfer_retry      res     1         ' Control transfer retry count
36918 12d             | xfer_retry      res     1         ' Control transfer retry count
36918 12d             | retry           res     1         ' Transaction retry count
36918 12d             | retry           res     1         ' Transaction retry count
36918 12d             | utx             res     1         ' Byte to transmit on USB
36918 12d             | utx             res     1         ' Byte to transmit on USB
36918 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
36918 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
36918 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
36918 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
36918 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
36918 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
36918 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
36918 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
36918 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
36918 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
36918 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
36918 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
36918 12d             | frame           res     1         ' USB 1ms frame counter value
36918 12d             | frame           res     1         ' USB 1ms frame counter value
36918 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
36918 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
36918 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
36918 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
36918 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
36918 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
36918 12d             | crc             res     1         ' Used for CRC16 calculation
36918 12d             | crc             res     1         ' Used for CRC16 calculation
36918 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
36918 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
36918 12d             | retval          res     1         ' Global success/fail return parameter
36918 12d             | retval          res     1         ' Global success/fail return parameter
36918 12d             | context_retval  res     1         ' Operation contextual return parameter
36918 12d             | context_retval  res     1         ' Operation contextual return parameter
36918 12d             | ' Device stuff
36918 12d             | hdev_id         res     1+MAX_DEVICES
36918 12d             | hdev_id         res     1+MAX_DEVICES
36918 12d             | hdev_bcd        res     1
36918 12d             | hdev_bcd        res     1
36918 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
36918 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
36918 12d             | ' Keyboard/mouse stuff
36918 12d             | hctrl_ep_addr   res     1
36918 12d             | hctrl_ep_addr   res     1
36918 12d             | hctrl_max_pkt   res     1
36918 12d             | hctrl_max_pkt   res     1
36918 12d             | hconfig_base    res     1
36918 12d             | hconfig_base    res     1
36918 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
36918 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
36918 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
36918 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
36918 12d             | hdev_class      res     1
36918 12d             | hdev_class      res     1
36918 12d             | hdev_subclass   res     1
36918 12d             | hdev_subclass   res     1
36918 12d             | hdev_protocol   res     1
36918 12d             | hdev_protocol   res     1
36918 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
36918 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
36918 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
36918 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
36918 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
36918 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
36918 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
36918 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
36918 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
36918 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
36918 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
36918 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
36918 12d             | if HAVE_MOUSE
36918 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
36918 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
36918 12d             | end
36918 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
36918 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
36918 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
36918 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
36918 12d             | hdev_ep_addr    res     1+MAX_DEVICES
36918 12d             | hdev_ep_addr    res     1+MAX_DEVICES
36918 12d             | hdev_out_addr   res     1
36918 12d             | hdev_out_addr   res     1
36918 12d             | 
36918 12d             | if EMUPAD_MAX_PLAYER > 0
36918 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
36918 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
36918 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
36918 12d             | end
36918 12d             | 
36918 12d             | hreg_init_end
36918 12d             | 
36918 12d             | hidr_start
36918 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
36918 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
36918 12d             | hidr_flags      res     1
36918 12d             | hidr_flags      res     1
36918 12d             | hidr_axis       res     3
36918 12d             | hidr_axis       res     3
36918 12d             | hidr_buttons    res     1
36918 12d             | hidr_buttons    res     1
36918 12d             | hidr_hats       res     1
36918 12d             | hidr_hats       res     1
36918 12d             | '' Above are actually useful values, 6 longs
36918 12d             | hidr_id         res     1
36918 12d             | hidr_id         res     1
36918 12d             | hidr_state      res     1
36918 12d             | hidr_state      res     1
36918 12d             | hidr_size       res     1
36918 12d             | hidr_size       res     1
36918 12d             | hidr_count      res     1
36918 12d             | hidr_count      res     1
36918 12d             | hidr_offset     res     1
36918 12d             | hidr_offset     res     1
36918 12d             | hidr_usage_idx  res     1
36918 12d             | hidr_usage_idx  res     1
36918 12d             | hidr_lminmax    res     1
36918 12d             | hidr_lminmax    res     1
36918 12d             | hidr_pminmax    res     1
36918 12d             | hidr_pminmax    res     1
36918 12d             | hidr_type       res     1
36918 12d             | hidr_type       res     1
36918 12d             | hidr_end
36918 12d             | 
36918 12d             | ' Variables dependent on the system freqency
36918 12d             | _var_64_lower_  res     1
36918 12d             | _var_64_lower_  res     1
36918 12d             | _var_64_upper_  res     1
36918 12d             | _var_64_upper_  res     1
36918 12d             | _12Mbps_        res     1
36918 12d             | _12Mbps_        res     1
36918 12d             | _1_5Mbps_       res     1
36918 12d             | _1_5Mbps_       res     1
36918 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
36918 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
36918 12d             | _1us_           res     1         ' 1us
36918 12d             | _1us_           res     1         ' 1us
36918 12d             | _10us_          res     1         ' 10us
36918 12d             | _10us_          res     1         ' 10us
36918 12d             | _33us_          res     1         ' 33us
36918 12d             | _33us_          res     1         ' 33us
36918 12d             | _txn_err_       res     1         ' 250us
36918 12d             | _txn_err_       res     1         ' 250us
36918 12d             | _500us_         res     1         ' 500us
36918 12d             | _500us_         res     1         ' 500us
36918 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
36918 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
36918 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
36918 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
36918 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
36918 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
36918 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
36918 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
36918 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
36918 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
36918 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
36918 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
36918 12d             | _preamble_wait_ res     1
36918 12d             | _preamble_wait_ res     1
36918 12d             | _1ms_           res     1         ' 1ms
36918 12d             | _1ms_           res     1         ' 1ms
36918 12d             | _2ms_           res     1         ' 2ms
36918 12d             | _2ms_           res     1         ' 2ms
36918 12d             | _suspend_wait_  res     1         ' 3ms
36918 12d             | _suspend_wait_  res     1         ' 3ms
36918 12d             | _4ms_           res     1         ' 4ms
36918 12d             | _4ms_           res     1         ' 4ms
36918 12d             | _xfer_wait_     res     1         ' 5ms
36918 12d             | _xfer_wait_     res     1         ' 5ms
36918 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
36918 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
36918 12d             | _reset_hold_    res     1         ' 15ms
36918 12d             | _reset_hold_    res     1         ' 15ms
36918 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
36918 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
36918 12d             | _21ms_          res     1         ' 21ms
36918 12d             | _21ms_          res     1         ' 21ms
36918 12d             | _100ms_         res     1         ' 100ms
36918 12d             | _100ms_         res     1         ' 100ms
36918 12d             | _500ms_         res     1         ' 500ms
36918 12d             | _500ms_         res     1         ' 500ms
36918 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
36918 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
36918 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
36918 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
36918 12d             | '------------------------------------------------------------------------------
36918 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
36918 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
36918 12d             | _usb_d_ls_nco_  res     1
36918 12d             | _usb_d_ls_nco_  res     1
36918 12d             | _usb_h_fs_nco_  res     1
36918 12d             | _usb_h_fs_nco_  res     1
36918 12d             | _usb_d_fs_nco_  res     1
36918 12d             | _usb_d_fs_nco_  res     1
36918 12d             | '------------------------------------------------------------------------------
36918 12d             | ' Scratch registers
36918 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
36918 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
36918 12d             | htmp1           res     1
36918 12d             | htmp1           res     1
36918 12d             | htmp2           res     1
36918 12d             | htmp2           res     1
36918 12d             | htmp3           res     1
36918 12d             | htmp3           res     1
36918 12d             | hrep            res     1         ' Repeat count
36918 12d             | hrep            res     1         ' Repeat count
36918 12d             | hsave0          res     1         ' Subroutine parameter saves
36918 12d             | hsave0          res     1         ' Subroutine parameter saves
36918 12d             | hsave1          res     1
36918 12d             | hsave1          res     1
36918 12d             | hsave2          res     1
36918 12d             | hsave2          res     1
36918 12d             | isrtmp1         res     1
36918 12d             | isrtmp1         res     1
36918 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
36918 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
36918 12d             | hr0             res     1         ' Multi-purpose registers
36918 12d             | hr0             res     1         ' Multi-purpose registers
36918 12d             | hr1             res     1
36918 12d             | hr1             res     1
36918 12d             | hr2             res     1
36918 12d             | hr2             res     1
36918 12d             | hr3             res     1
36918 12d             | hr3             res     1
36918 12d             | hpar1           res     1         ' Routine entry/exit parameters
36918 12d             | hpar1           res     1         ' Routine entry/exit parameters
36918 12d             | hpar2           res     1
36918 12d             | hpar2           res     1
36918 12d             | hpar3           res     1
36918 12d             | hpar3           res     1
36918 12d             | hct2            res     1         ' Function response bus turn-around timer
36918 12d             | hct2            res     1         ' Function response bus turn-around timer
36918 12d             | hct3            res     1         ' Keyboard/mouse poll timer
36918 12d             | hct3            res     1         ' Keyboard/mouse poll timer
36918 12d             | mod_cnt         res     1         ' Used in idle loops
36918 12d             | mod_cnt         res     1         ' Used in idle loops
36918 12d             |                 fit     $1F0
36918 12d             |                 org     $200
36918 200             | hlut_start
36918 200             | 
36918 200             | '------------------------------------------------------------------------------
36918 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
36918 200             | ' settings to startup defaults.
36918 200             | '------------------------------------------------------------------------------
36918 200             | ' On entry:
36918 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
36918 200             | '------------------------------------------------------------------------------
36918 200             | set_speed_full
36918 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
3691c 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
36920 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
36924 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
36928 204             | '                ret                             wcz     ' Restore caller flags on exit
36928 204             | 
36928 204             | '------------------------------------------------------------------------------
36928 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
36928 204             | ' is a downstream hub connected (not yet implemented), the baud generator
36928 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
36928 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
36928 204             | ' putting the smart pins into reset.
36928 204             | '------------------------------------------------------------------------------
36928 204             | ' On entry:
36928 204             | ' On exit: CZ flags restored to caller states
36928 204             | '------------------------------------------------------------------------------
36928 204             | set_speed_low
36928 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
3692c 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
36930 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
36934 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
36938 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3693c 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
36940 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
36944 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
36948 20c             | 
36948 20c             | '------------------------------------------------------------------------------
36948 20c             | ' Perform configuration stuff required when a device intitially connects.
36948 20c             | '------------------------------------------------------------------------------
36948 20c             | ' On entry:
36948 20c             | ' On exit:
36948 20c             | '------------------------------------------------------------------------------
36948 20c             | on_connect
36948 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
3694c 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
36950 20e             | .retry
36950 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
36954 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
36958 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
3695c 211 00 08 00 FF 
36960 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
36964 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
36968 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3696c 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
36970 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
36974 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
36978 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3697c 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
36980 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
36984 21b 4C 03 B0 FD |                 call    #poll_waitx
36988 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
3698c 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
36990 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
36994 21f B8 FF 9F FD |                 jmp     #.retry
36998 220             | .get_dev_desc
36998 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3699c 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
369a0 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
369a4 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
369a8 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
369ac 225 88 FB BF FD |                 call    #reset
369b0 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
369b4 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
369b8 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
369bc 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
369c0 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
369c4 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
369c8 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
369cc 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
369d0 22e 04 00 00 FF 
369d4 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
369d8 230 34 FA BF FD |                 call    #calc_crc5
369dc 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
369e0 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
369e4 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
369e8 234 F7 AD C2 FA |                 rdbyte  total_data, pb
369ec 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
369f0 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
369f4 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
369f8 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
369fc 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
36a00 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
36a04 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
36a08 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
36a0c 23d C4 02 B0 FD |                 call    #poll_waitx
36a10 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
36a14 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
36a18 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
36a1c 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
36a20 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
36a24 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36a28 244 2D 00 64 5D |         if_nz   ret
36a2c 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
36a30 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
36a34 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
36a38 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
36a3c 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
36a40 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
36a44 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
36a48 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
36a4c 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
36a50 24e 2C FB 9F CD |         if_b    jmp     #host_error
36a54 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
36a58 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
36a5c 251 2D EC 63 FD |                 call    pa
36a60 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
36a64 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
36a68 254 2C EC 63 FD |                 jmp     pa
36a6c 255             | 
36a6c 255             | '------------------------------------------------------------------------------
36a6c 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
36a6c 255             | ' Status reporting is always in the function-to-host direction.
36a6c 255             | '------------------------------------------------------------------------------
36a6c 255             | ' On entry:
36a6c 255             | '   PTRA - start address of the SETUP data in hub.
36a6c 255             | '   PB - start address of the buffer/struct to be written to during the IN data
36a6c 255             | '     stage.
36a6c 255             | '   ep_addr_pid - device address, endpoint and CRC5.
36a6c 255             | ' On exit:
36a6c 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
36a6c 255             | '     contains the count of data stage bytes actually received, which must
36a6c 255             | '     always be <= the count requested.
36a6c 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
36a6c 255             | '     more specific USB operation error code.
36a6c 255             | '------------------------------------------------------------------------------
36a6c 255             | control_read
36a6c 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
36a70 256 F8 8F 03 F6 |                 mov     hpar2, ptra
36a74 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
36a78 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
36a7c 259             | .xfer_start
36a7c 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
36a80 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
36a84 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36a88 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
36a8c 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
36a90 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
36a94 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
36a98 260 61 00 00 FF 
36a9c 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
36aa0 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
36aa4 263             | .data
36aa4 263 56 B1 02 F6 |                 mov     pkt_data, total_data
36aa8 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
36aac 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
36ab0 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
36ab4 267             | .nak_retry
36ab4 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
36ab8 268             | .in_retry
36ab8 268 BC F6 BF FD |                 call    #txn_in
36abc 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
36ac0 26a 28 00 90 AD |         if_z    jmp     #.commit
36ac4 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
36ac8 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
36acc 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
36ad0 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
36ad4 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
36ad8 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
36adc 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
36ae0 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
36ae4 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
36ae8 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
36aec 275             | .commit
36aec 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
36af0 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
36af4 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
36af8 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
36afc 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
36b00 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
36b04 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
36b08 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
36b0c 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
36b10 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
36b14 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
36b18 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
36b1c 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
36b20 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
36b24 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
36b28 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
36b2c 285             | .pre_status
36b2c 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
36b30 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
36b34 287 00 B0 06 F6 |                 mov     pkt_data, #0
36b38 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
36b3c 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
36b40 28a 61 00 00 FF 
36b44 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
36b48 28c             | .out_retry
36b48 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
36b4c 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36b50 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
36b54 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
36b58 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
36b5c 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
36b60 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
36b64 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
36b68 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
36b6c 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
36b70 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
36b74 297             | ' I've encountered transfer STALL, even though the data looks correct, and
36b74 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
36b74 297             | ' ControlRead() transfer gets things unstuck most of the time...
36b74 297             | .xfer_retry
36b74 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
36b78 298 58 01 B0 FD |                 call    #poll_waitx
36b7c 299 8C F9 BF FD |                 call    #wait_txn_ok
36b80 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
36b84 29b C7 F1 03 F6 |                 mov     ptra, hpar2
36b88 29c C8 EF 03 F6 |                 mov     pb, hpar3
36b8c 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
36b90 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
36b94 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
36b98 2a0             | 
36b98 2a0             | '------------------------------------------------------------------------------
36b98 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
36b98 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
36b98 2a0             | ' the SETUP data struct is filled with the required values.
36b98 2a0             | '------------------------------------------------------------------------------
36b98 2a0             | ' On entry:
36b98 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
36b98 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
36b98 2a0             | '     stage.
36b98 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
36b98 2a0             | ' On exit:
36b98 2a0             | '   retval - used to convey the success/failure of each stage.
36b98 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
36b98 2a0             | '     more specific USB operation error code.
36b98 2a0             | '------------------------------------------------------------------------------
36b98 2a0             | control_write
36b98 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
36b9c 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
36ba0 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
36ba4 2a3             | 
36ba4 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
36ba8 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
36bac 2a5 F7 91 03 F6 |                 mov     hpar3, pb
36bb0 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
36bb4 2a7             | .xfer_start
36bb4 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
36bb8 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
36bbc 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
36bc0 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36bc4 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
36bc8 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
36bcc 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
36bd0 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
36bd4 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
36bd8 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
36bdc 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
36be0 2b2             | .data
36be0 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
36be4 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
36be8 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
36bec 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
36bf0 2b6             | .out_retry
36bf0 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
36bf4 2b7 88 F6 BF FD |                 call    #txn_out
36bf8 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36bfc 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
36c00 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
36c04 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
36c08 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
36c0c 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
36c10 2be             | .commit
36c10 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
36c14 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
36c18 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
36c1c 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
36c20 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
36c24 2c3             | pre_status_in
36c24 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
36c28 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
36c2c 2c5             | .status_retry
36c2c 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
36c30 2c6 44 F5 BF FD |                 call    #txn_in
36c34 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
36c38 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
36c3c 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
36c40 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
36c44 2cb 2D 00 64 AD |         if_z    ret
36c48 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
36c4c 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
36c50 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
36c54 2cf             | '               ret                                     ' Caller must handle transfer retirement
36c54 2cf             | 
36c54 2cf             | '------------------------------------------------------------------------------
36c54 2cf             | ' Execute an IN interrupt transaction.
36c54 2cf             | '------------------------------------------------------------------------------
36c54 2cf             | ' On entry:
36c54 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
36c54 2cf             | '   hpar2 - Address of the IN data buffer
36c54 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
36c54 2cf             | ' On exit:
36c54 2cf             | '   retval - the result of the operation.
36c54 2cf             | '   hpar3 - the count of IN data bytes actually received.
36c54 2cf             | '------------------------------------------------------------------------------
36c54 2cf             | do_int_in
36c54 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
36c58 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
36c5c 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
36c60 2d2             | 
36c60 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
36c64 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
36c68 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
36c6c 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
36c70 2d6             | .retry
36c70 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
36c74 2d7 00 F5 BF FD |                 call    #txn_in
36c78 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
36c7c 2d9 1C 00 90 AD |         if_z    jmp     #.commit
36c80 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
36c84 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
36c88 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
36c8c 2dd 54 00 B0 FD |                 call    #retry_wait
36c90 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
36c94 2df 18 00 90 AD |         if_z    jmp     #.post_ret
36c98 2e0 D4 FF 9F FD |                 jmp     #.retry
36c9c 2e1             | .commit
36c9c 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
36ca0 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
36ca4 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
36ca8 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
36cac 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
36cb0 2e6             | .post_ret
36cb0 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
36cb4 2e7             | 
36cb4 2e7             | 
36cb4 2e7             | '------------------------------------------------------------------------------
36cb4 2e7             | ' Resets the downstream hub port to FS
36cb4 2e7             | '------------------------------------------------------------------------------
36cb4 2e7             | dwnstream_reset
36cb4 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
36cb8 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
36cbc 2e9             | 
36cbc 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
36cc0 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
36cc4 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
36cc8 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
36ccc 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
36cd0 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
36cd4 2ef             | 
36cd4 2ef             | '------------------------------------------------------------------------------
36cd4 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
36cd4 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
36cd4 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
36cd4 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
36cd4 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
36cd4 2ef             | '------------------------------------------------------------------------------
36cd4 2ef             | ' On entry:
36cd4 2ef             | '   hctwait - wait interval in sysclocks.
36cd4 2ef             | ' On exit:
36cd4 2ef             | '------------------------------------------------------------------------------
36cd4 2ef             | poll_waitx
36cd4 2ef 1A 92 63 FD |                 getct   hct2
36cd8 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
36cdc 2f1             | .wait
36cdc 2f1 FF 25 CC FB |                 jnct2   #.wait
36ce0 2f2 2D 00 64 FD |                 ret
36ce4 2f3             | 
36ce4 2f3             | '------------------------------------------------------------------------------
36ce4 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
36ce4 2f3             | '------------------------------------------------------------------------------
36ce4 2f3             | ' On entry:
36ce4 2f3             | '   retval - transaction response PID or error code.
36ce4 2f3             | ' On exit:
36ce4 2f3             | '------------------------------------------------------------------------------
36ce4 2f3             | retry_wait
36ce4 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
36ce8 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
36cec 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
36cf0 2f6 14 00 90 AD |         if_z    jmp     #.nak
36cf4 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
36cf8 2f8 D8 FF BF FD |                 call    #poll_waitx
36cfc 2f9             | .dec
36cfc 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
36d00 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
36d04 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
36d08 2fc             | .nak
36d08 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
36d0c 2fd C4 FF BF FD |                 call    #poll_waitx
36d10 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
36d14 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
36d18 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
36d1c 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
36d20 302 2D 00 64 FD |                 ret
36d24 303             | 
36d24 303             | host_reset
36d24 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
36d28 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
36d2c 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
36d2c 305 BD 01 05 FF 
36d30 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
36d34 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
36d38 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
36d3c 309             | ' Check to see if the system clock has been changed.
36d3c 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
36d40 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
36d44 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
36d48 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
36d4c 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
36d50 30e 40 46 62 FD |                 dirl    dp
36d54 30f             | 
36d54 30f 28 02 64 FD |                 setq    #1
36d58 310 80 00 80 FF 
36d5c 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
36d60 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
36d64 313             | .enable
36d64 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
36d68 314 41 46 62 FD |                 dirh    dp
36d6c 315 1F 36 63 FD |                 waitx   _1us_
36d70 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
36d74 317             | 
36d74 317             |                 ' Handle Port protection enable and startup delay
36d74 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
36d78 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
36d7c 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
36d80 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
36d84 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
36d88 31c             | 
36d88 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
36d8c 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
36d90 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
36d94 31f 00 00 04 F6 |                 mov     0-0, #0
36d98 320             | .regloop
36d98 320             | 
36d98 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
36d98 320             | 
36d98 320             | discon_entry
36d98 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
36d9c 321             | 
36d9c 321             |               
36d9c 321             |         if HAVE_HIDPAD
36d9c 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
36da0 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
36da4 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
36da8 324 F7 01 68 FC |                 wrlong  #0,pb
36dac 325             |         end
36dac 325             |         if EMUPAD_MAX_PLAYER > 0
36dac 325             |         end
36dac 325             | 
36dac 325             |                 ' Fall through to disconnected loop
36dac 325             | 
36dac 325             | '-----------------------------------------------------------------------------------------------------------------
36dac 325             | ' Device connect handling (Section 7.1.7.3).
36dac 325             | '-----------------------------------------------------------------------------------------------------------------
36dac 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
36dac 325             | ' device to connect (Section 7.1.7.3).
36dac 325             | '-----------------------------------------------------------------------------------------------------------------
36dac 325             | disconnected
36dac 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
36db0 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
36db4 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
36db8 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
36dbc 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
36dc0 32a             |         if ACTIVITY_LED >= 0
36dc0 32a             |         end
36dc0 32a 22 A7 82 FA |                 rqpin   urx, dm
36dc4 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
36dc8 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
36dcc 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
36dd0 32e             | .se1_test
36dd0 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
36dd4 32f FC FE BF FD |                 call    #poll_waitx
36dd8 330 22 A7 82 FA |                 rqpin   urx, dm
36ddc 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
36de0 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
36de4 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
36de8 334             | .se1            'SE1 is a fatal error condition
36de8 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
36dec 335 E4 FE BF FD |                 call    #poll_waitx
36df0 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
36df4 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
36df8 338             | .connect_test                                           ' Test lines until stable J/K state seen
36df8 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
36dfc 339 22 A7 82 FA |                 rqpin   urx, dm
36e00 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
36e04 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
36e08 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
36e0c 33d             | connected
36e0c 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
36e10 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
36e14 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
36e18 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
36e1c 341             | .set_pulse
36e1c 341 1A 64 63 FD |                 getct   _pulse_time_
36e20 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
36e24 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
36e24 343             | ' of 1ms and make a correction, if necessary.
36e24 343             | '                mov     htmp, _1ms_
36e24 343             | '                subs    htmp, iframe_delta
36e24 343             | '                adds    _frame1ms_clks_, htmp
36e24 343             | '                debug(udec(_frame1ms_clks_))
36e24 343             | 
36e24 343             |                 ' Fall through to idle/processing loop
36e24 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
36e28 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
36e2c 345             | 
36e2c 345             | hidle
36e2c 345 22 A7 82 FA |                 rqpin   urx, dm
36e30 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
36e34 347 98 00 90 CD |         if_c    jmp     #.se0_test
36e38 348 24 06 70 FD |                 pollct3                         wc
36e3c 349 68 00 90 3D |         if_nc   jmp     #.nopoll
36e40 34a 1A 94 63 FD |                 getct   hct3
36e44 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
36e48 34c             | 
36e48 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
36e4c 34d 00 70 E3 F8 |                 getbyte htmp
36e50 34e             | 
36e50 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
36e54 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
36e58 350 40 00 90 AD |         if_z    jmp     #.poll
36e5c 351             | 
36e5c 351             |         if _HAVE_GAMEPAD
36e5c 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
36e60 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
36e64 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
36e68 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
36e6c 355 2C 00 90 AD |         if_z    jmp     #.poll
36e70 356             |         end
36e70 356             | 
36e70 356             |         if HAVE_MOUSE
36e70 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
36e74 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
36e78 358 20 00 90 AD |         if_z    jmp     #.poll
36e7c 359             |         end
36e7c 359             | 
36e7c 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
36e80 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
36e84 35b 14 00 90 AD |         if_z    jmp     #.poll
36e88 35c             | 
36e88 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
36e8c 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
36e90 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
36e94 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
36e98 360             |         if HAVE_MOUSE
36e98 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
36e9c 361             |         else
36e9c 361             |         end
36e9c 361             | 
36e9c 361             | .poll
36e9c 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
36ea0 362 2D EC 63 FD |                 call    pa
36ea4 363             | .skip_poll
36ea4 363             | 
36ea4 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
36ea8 364             | 
36ea8 364             | .nopoll
36ea8 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
36eac 365 44 00 90 AD |         if_z    jmp     #hsuspend
36eb0 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
36eb4 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
36eb8 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
36ebc 369 1A 84 63 FD |                 getct   hr0
36ec0 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
36ec4 36b             |         if ACTIVITY_LED >= 0
36ec4 36b             |         end
36ec4 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
36ec8 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
36ecc 36d 5C FF 9F FD |                 jmp     #hidle
36ed0 36e             | ' Check for extended SE0 state on the bus
36ed0 36e             | .se0_test
36ed0 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
36ed4 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
36ed8 370 22 A7 82 FA |                 rqpin   urx, dm
36edc 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
36ee0 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
36ee4 373 24 F6 BF FD |                 call    #wait_txn_ok
36ee8 374 00 00 80 FF 
36eec 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
36ef0 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
36ef0 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
36ef4 377             | 
36ef4 377             | hsuspend
36ef4 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
36ef8 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
36efc 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
36f00 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
36f04 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
36f08 37c 00 96 07 F6 |                 mov     mod_cnt, #0
36f0c 37d             | 
36f0c 37d             |                 ' Fall through to resume wait loop
36f0c 37d             | 
36f0c 37d             | hwait_resume
36f0c 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
36f10 37e 02 86 47 F0 |                 shr     hr1, #2
36f14 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
36f18 380             |         if ACTIVITY_LED >= 0
36f18 380             |         end
36f18 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
36f1c 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
36f20 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
36f24 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
36f28 384 18 00 90 AD |         if_z    jmp     #.resume
36f2c 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
36f30 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
36f34 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
36f38 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
36f3c 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
36f40 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
36f44 38b             | .resume
36f44 38b 22 05 28 FC |                 wypin   #OUT_K, dm
36f48 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
36f4c 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
36f50 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
36f54 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
36f58 390 1F 70 63 FD |                 waitx   htmp
36f5c 391 22 07 28 FC |                 wypin   #OUT_J, dm
36f60 392 01 70 47 F0 |                 shr     htmp, #1
36f64 393 1F 70 63 FD |                 waitx   htmp
36f68 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
36f6c 395 1A 92 62 FD |                 getct   iframe_ct_base
36f70 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
36f74 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
36f78 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
36f7c 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
36f80 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
36f84 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
36f88 39c             | 
36f88 39c             | '------------------------------------------------------------------------------
36f88 39c             | ' Send preamble to enable low-speed HUB ports
36f88 39c             | '------------------------------------------------------------------------------
36f88 39c             | ' On entry:
36f88 39c             | ' On exit:
36f88 39c             | '   USB baud rate set to low-speed
36f88 39c             | '------------------------------------------------------------------------------
36f88 39c             | utx_pre
36f88 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
36f8c 39d 40 46 62 FD |                 dirl    dp
36f90 39e 28 02 64 FD |                 setq    #1
36f94 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
36f98 3a0 58 44 62 FD |                 drvl    dm
36f9c 3a1 59 46 62 FD |                 drvh    dp
36fa0 3a2             | 
36fa0 3a2 1E 00 00 FF 
36fa4 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
36fa8 3a4             | 
36fa8 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
36fac 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
36fb0 3a6 28 02 64 3D |         if_nc   setq    #1
36fb4 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
36fb8 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
36fbc 3a9             | .l1
36fbc 3a9             | 
36fbc 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
36fc0 3aa 40 46 62 FD |                 dirl    dp
36fc4 3ab 28 02 64 FD |                 setq    #1
36fc8 3ac 80 00 80 FF 
36fcc 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
36fd0 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
36fd4 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
36fd8 3b0 41 46 62 FD |                 dirh    dp
36fdc 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
36fe0 3b2             | 
36fe0 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
36fe4 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
36fe8 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
36fec 3b5             | 
36fec 3b5             | hlut_end
36fec 3b5             |                 fit     $400
36fec 3b5             |                 orgh
36fec                 | if OVERLAP_MEMORY
36fec                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
36fec                 | end
36fec                 | '------------------------------------------------------------------------------
36fec                 | ' Routines called from cog space.
36fec                 | '------------------------------------------------------------------------------
36fec                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
36fec                 | '------------------------------------------------------------------------------
36fec                 | 
36fec                 | '------------------------------------------------------------------------------
36fec                 | ' USB host cog initialization.
36fec                 | '------------------------------------------------------------------------------
36fec                 | usb_host_init
36fec                 |                 ' Initialize buffer pointers
36fec                 |         if OVERLAP_MEMORY
36fec                 |         else
36fec     40 15 B0 FE |                 loc     pb, #hid_descr
36ff0                 |         end
36ff0     F7 4B 02 F6 |                 mov     hid_descr_p, pb
36ff4                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
36ff4                 |                 {
36ff4                 |                 }
36ff4                 |         
36ff4                 |                 {
36ff4                 |                 }
36ff4                 |                 'loc     pb,#hkbd_report
36ff4                 |                 'mov     hkbd_report_p,pb
36ff4                 | 
36ff4     08 1D B0 FE |                 loc     pb, #hub_descr
36ff8     F7 4D 02 F6 |                 mov     hub_descr_p, pb
36ffc     1D 1D B0 FE |                 loc     pb, #urx_buff
37000     F7 4F 02 F6 |                 mov     urx_buff_p, pb
37004     95 1D B0 FE |                 loc     pb, #dev_desc_buff
37008     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
3700c     9F 1D B0 FE |                 loc     pb, #con_desc_buff
37010     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
37014     18 15 B0 FE |                 loc     pb, #usb_cache_start
37018     F7 55 02 F6 |                 mov     cache_start_p, pb
3701c     E9 1C B0 FE |                 loc     pb, #usb_cache_end
37020     F7 57 02 F6 |                 mov     cache_end_p, pb
37024                 | 
37024                 |         if ERROR_LED >= 0
37024                 |         end
37024                 | 
37024                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
37024                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
37024                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
37024                 | ' Configure and enable the Serial Host USB port.
37024     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
37028                 | 
37028                 | '------------------------------------------------------------------------------
37028                 | ' Timing calculations happen before any interrupt(s) are enabled.
37028                 | '------------------------------------------------------------------------------
37028                 | ' On entry:
37028                 | '   htmp - current CLKFREQ value.
37028                 | '------------------------------------------------------------------------------
37028                 | hinit_usb_timings
37028                 | '                getct   htmp2
37028     B8 59 02 F6 |                 mov     save_sysclk, htmp
3702c     8D 5B 80 FF 
37030     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
37034     18 30 63 FD |                 getqx   _12Mbps_
37038     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
3703c     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
37040     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
37044     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
37048     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
3704c     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
37050     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
37054     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
37058     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
3705c     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
37060     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
37064     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
37068     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
3706c     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
37070     80 00 00 FF 
37074     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
37078     18 2C 63 FD |                 getqx   _var_64_lower_
3707c     19 2E 63 FD |                 getqy   _var_64_upper_
37080     28 2C 63 FD |                 setq    _var_64_lower_
37084     65 CD 1D FF 
37088     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
3708c     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
37090     01 00 00 FF 
37094     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
37098     18 2C 63 FD |                 getqx   _var_64_lower_
3709c     19 2E 63 FD |                 getqy   _var_64_upper_
370a0     28 2C 63 FD |                 setq    _var_64_lower_
370a4     A1 07 00 FF 
370a8     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
370ac     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
370b0     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
370b4     09 36 57 F0 |                 shr     _1us_, #9               wc
370b8     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
370bc     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
370c0     18 38 63 FD |                 getqx   _10us_
370c4     09 38 57 F0 |                 shr     _10us_, #9              wc
370c8     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
370cc     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
370d0     18 3A 63 FD |                 getqx   _33us_
370d4     09 3A 57 F0 |                 shr     _33us_, #9              wc
370d8     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
370dc     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
370e0     18 3C 63 FD |                 getqx   _txn_err_
370e4     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
370e8     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
370ec     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
370f0     18 3E 63 FD |                 getqx   _500us_
370f4     09 3E 57 F0 |                 shr     _500us_, #9             wc
370f8     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
370fc     01 00 00 FF 
37100     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
37104     18 40 63 FD |                 getqx   _txn_ok_ls_
37108     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
3710c     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
37110     01 00 00 FF 
37114     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
37118     18 42 63 FD |                 getqx   _txn_ok_fs_
3711c     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
37120     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
37124     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
37128     05 00 00 FF 
3712c     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
37130     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
37134     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
37138     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
3713c     1C 00 00 FF 
37140     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
37144     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
37148     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
3714c     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
37150     00 00 00 FF 
37154     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
37158     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
3715c     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
37160     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
37164     04 00 00 FF 
37168     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
3716c     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
37170     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
37174     8D 5B 00 FF 
37178     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
3717c     18 4C 63 FD |                 getqx   _preamble_wait_
37180     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
37184     01 00 00 FF 
37188     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
3718c     18 2C 63 FD |                 getqx   _var_64_lower_
37190     19 2E 63 FD |                 getqy   _var_64_upper_
37194     28 2C 63 FD |                 setq    _var_64_lower_
37198     01 00 00 FF 
3719c     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
371a0     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
371a4     09 4E 57 F0 |                 shr     _1ms_, #9               wc
371a8     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
371ac     FF FF 7F FF 
371b0     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
371b4     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
371b8     A7 51 03 F6 |                 mov     _2ms_, _1ms_
371bc     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
371c0     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
371c4     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
371c8     A7 55 03 F6 |                 mov     _4ms_, _1ms_
371cc     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
371d0     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
371d4     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
371d8     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
371dc     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
371e0     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
371e4     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
371e8     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
371ec     A7 59 03 F6 |                 mov     _8ms_, _1ms_
371f0     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
371f4     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
371f8     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
371fc     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
37200     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
37204     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
37208     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
3720c     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
37210     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
37214     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
37218     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
3721c                 | '        _ret_   mov     _1sec_, save_sysclk
3721c                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
3721c                 | '                ret
3721c                 | {
3721c                 | }
3721c                 | 
3721c                 | '------------------------------------------------------------------------------
3721c                 | ' Parse a configuration descriptor chain to see if the device is a recognized
3721c                 | ' one. If it is, start the task progression that will configure the device for
3721c                 | ' use.
3721c                 | '------------------------------------------------------------------------------
3721c                 | ' On entry:
3721c                 | '   hconfig_base - start address of the cached config descriptor chain.
3721c                 | ' On exit:
3721c                 | '------------------------------------------------------------------------------
3721c                 | hparse_con_desc
3721c     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
37220     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
37224     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
37228     4E 70 FF F9 |                 movbyts htmp,#%%1032
3722c     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
37230                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
37230                 | 
37230     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
37234     6E ED 03 F1 |                 add     pa, hconfig_base
37238     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
3723c                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
3723c                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
3723c                 | ' that defines a keyboard and/or mouse.
3723c     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
37240                 | .next_intf
37240     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
37244     BC 01 90 3D |         if_ae   jmp     #hset_config
37248     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3724c     75 F3 03 F1 |                 add     ptrb, hnext_desc
37250     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
37254     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
37258     0C 00 90 AD |         if_z    jmp     #.intf
3725c     80 71 C7 FA |                 rdbyte  htmp, ptrb
37260     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
37264     D8 FF 9F FD |                 jmp     #.next_intf
37268                 | .intf
37268     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
3726c     00 90 07 F6 |                 mov     hpar3, #0
37270     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
37274     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
37278     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
3727c     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
37280                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
37280                 | 
37280                 | .endp
37280     80 71 C7 FA |                 rdbyte  htmp, ptrb
37284     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
37288     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3728c     78 00 90 3D |         if_ae   jmp     #.get_device
37290     6E F3 03 F6 |                 mov     ptrb, hconfig_base
37294     75 F3 03 F1 |                 add     ptrb, hnext_desc
37298     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3729c     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
372a0     64 00 90 AD |         if_z    jmp     #.get_device
372a4     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
372a8     04 00 90 AD |         if_z    jmp     #.get_ep
372ac     D0 FF 9F FD |                 jmp     #.endp
372b0                 | .get_ep
372b0     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
372b4     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
372b8     0F 86 67 F0 |                 shl     hr1, #8 + 7
372bc     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
372c0     3F 00 00 FF 
372c4     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
372c8     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
372cc     00 8E 0F F2 |                 cmp     hpar2, #0               wz
372d0     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
372d4     00 90 0F F2 |                 cmp     hpar3, #0               wz
372d8     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
372dc     A0 FF 9F FD |                 jmp     #.endp
372e0                 | .in_ep
372e0     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
372e4     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
372e8                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
372e8     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
372ec     C2 89 DB F8 |                 setbyte hr2, hr0, #3
372f0     8C FF 9F FD |                 jmp     #.endp
372f4                 | .out_ep
372f4     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
372f8     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
372fc                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
372fc     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
37300     C2 8B DB F8 |                 setbyte hr3, hr0, #3
37304     78 FF 9F FD |                 jmp     #.endp
37308                 | 
37308                 | .get_device
37308     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
3730c     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
37310     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
37314     68 00 90 AD |         if_z    jmp     #.gamepad
37318     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
3731c     AC 00 90 AD |         if_z    jmp     #.hub
37320     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
37324     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
37328     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3732c     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
37330     4C 00 90 AD |         if_z    jmp     #.gamepad
37334     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
37338     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
3733c                 | .keyboard
3733c     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
37340                 |         if HAVE_MOUSE
37340     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
37344                 |         else
37344                 |         end
37344     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
37348     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
3734c     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
37350     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
37354     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
37358     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
3735c                 |                 'debug(udec(kb_intf_num))
3735c                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3735c     E0 FE 9F FD |                 jmp     #.next_intf
37360                 | if HAVE_MOUSE
37360                 | .mouse
37360     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
37364     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
37368     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
3736c     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
37370     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
37374                 |                 'getbyte ms_interval, hr2, #3
37374     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
37378     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
3737c                 |                 'debug(udec(kb_intf_num))
3737c                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3737c     C0 FE 9F FD |                 jmp     #.next_intf
37380                 | end
37380                 | .gamepad
37380     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
37384     C7 71 63 F5 |                 xor     htmp, hpar2
37388     3F 00 00 FF 
3738c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
37390     AC FE 9F AD |         if_z    jmp     #.next_intf
37394                 |         if HAVE_MOUSE
37394     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
37398     C7 71 63 F5 |                 xor     htmp, hpar2
3739c     3F 00 00 FF 
373a0     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
373a4     98 FE 9F AD |         if_z    jmp     #.next_intf
373a8                 |         end
373a8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
373ac     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
373b0     8C FE 9F 5D |         if_nz   jmp     #.next_intf
373b4                 | 
373b4     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
373b8     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
373bc     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
373c0     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
373c4     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
373c8                 |                 'debug(udec(gp_intf_num))
373c8                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
373c8     74 FE 9F FD |                 jmp     #.next_intf
373cc                 | .hub
373cc     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
373d0     6C FE 9F 5D |         if_nz   jmp     #.next_intf
373d4     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
373d8     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
373dc     60 FE 9F 5D |         if_nz   jmp     #.next_intf
373e0     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
373e4     58 FE 9F 5D |         if_nz   jmp     #.next_intf
373e8     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
373ec     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
373f0     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
373f4     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
373f8     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
373fc     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
37400                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
37400     3C FE 9F FD |                 jmp     #.next_intf
37404                 | 
37404                 | '------------------------------------------------------------------------------
37404                 | ' If a newly-connected device is recognized, do whatever is needed to configure
37404                 | ' it according to its function, or functions. In the case of this boot protocol
37404                 | ' keyboard/mouse class driver:
37404                 | ' - SetConfiguration(config_num)
37404                 | ' - SetProtocol(boot)
37404                 | ' - SetIdle(indefinite)
37404                 | ' - Enter the device interrupt IN polling task stage.
37404                 | '------------------------------------------------------------------------------
37404                 | ' On entry:
37404                 | ' On exit:
37404                 | '------------------------------------------------------------------------------
37404                 | hset_config
37404                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
37404                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
37404     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
37408     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3740c     00 00 0C F2 |                 cmp     0-0, #0                 wz
37410     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
37414                 |         if HAVE_MOUSE
37414     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
37418                 |         end
37418     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
3741c     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
37420                 | .set_config
37420     6C 0E D0 FE |                 loc     ptra, #set_config
37424     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
37428     6E ED 03 F1 |                 add     pa, hconfig_base
3742c     F6 8D C3 FA |                 rdbyte  hpar1, pa
37430     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
37434     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
37438     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
3743c     A0 02 A0 FD |                 call    #control_write
37440     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37444     2D 00 64 5D |         if_nz   ret
37448                 | .kbd_config
37448     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
3744c     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
37450                 | 
37450     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
37454     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
37458     3F 00 00 FF 
3745c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
37460     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
37464                 | 
37464     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
37468     34 0E D0 FE |                 loc     ptra, #set_protocol
3746c     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
37470     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
37474     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
37478     A0 02 A0 FD |                 call    #control_write
3747c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37480     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
37484     E4 02 90 5D |         if_nz   jmp     #.notify_client
37488     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3748c     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
37490     30 03 B0 FD |                 call    #hset_idle
37494                 |                 'cmp     retval, #PID_ACK        wz
37494                 |         'if_nz   mov     hkbd_ep_addr, #0
37494                 |         'if_nz   jmp     #.notify_client
37494     A8 99 02 F6 |                 mov     hctwait, _2ms_
37498     EF 02 A0 FD |                 call    #poll_waitx
3749c     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
374a0     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
374a4     90 17 90 FE |                 loc     pa, #hkbd_led_rep
374a8     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
374ac     2C 03 B0 FD |                 call    #hset_kbdled_report
374b0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
374b4     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
374b8     B0 02 90 5D |         if_nz   jmp     #.notify_client
374bc     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
374c0     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
374c4     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
374c8     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
374cc     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
374d0     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
374d4     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
374d8     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
374dc     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
374e0     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
374e4     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
374e8                 |         if !!HAVE_MOUSE
374e8                 |         end
374e8                 | 
374e8                 | .mouse_config
374e8                 | if HAVE_MOUSE
374e8     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
374ec     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
374f0     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
374f4     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
374f8     3F 00 00 FF 
374fc     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
37500     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
37504                 | 
37504                 |                 debug("mouse passed addr check")
37504                 | 
37504     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
37508     00 00 80 FF 
3750c     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
37510     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
37514     1B 01 A0 FD |                 call    #get_hid_descr_buffer
37518     55 02 A0 FD |                 call    #control_read
3751c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37520     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
37524     44 02 90 5D |         if_nz   jmp     #.notify_client
37528     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3752c     56 01 00 F6 |                 mov     0-0, total_data
37530     1B 01 A0 FD |                 call    #get_hid_descr_buffer
37534                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
37534                 | 
37534     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
37538     64 0D D0 FE |                 loc     ptra, #set_protocol
3753c     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
37540     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
37544     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
37548     A0 02 A0 FD |                 call    #control_write
3754c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37550     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
37554     14 02 90 5D |         if_nz   jmp     #.notify_client
37558                 |                 debug("mouse passed SetProtocol")
37558     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3755c     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
37560     60 02 B0 FD |                 call    #hset_idle
37564                 |                 'cmp     retval, #PID_ACK        wz
37564                 |         'if_nz   mov     hmouse_ep_addr, #0
37564                 |         'if_nz   jmp     #.notify_client
37564                 |                 debug("mouse passed SetIdle")
37564     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
37568     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3756c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
37570     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
37574     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
37578     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3757c     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
37580     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
37584     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
37588     3F 00 00 FF 
3758c     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
37590     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
37594     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
37598     D0 01 90 FD |                 jmp     #.notify_client
3759c                 | end
3759c                 | .gamepad_config
3759c                 | if _HAVE_GAMEPAD
3759c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
375a0     00 00 0C F2 |                 cmp     0-0, #0                 wz
375a4     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
375a8     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
375ac     00 70 03 F6 |                 mov     htmp, 0-0
375b0     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
375b4     3F 00 00 FF 
375b8     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
375bc     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
375c0                 | 
375c0     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
375c4     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
375c8     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
375cc     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
375d0     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
375d4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
375d8     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
375dc     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
375e0     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
375e4     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
375e8     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
375ec     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
375f0     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
375f4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
375f8                 | 
375f8                 |                 if EMUPAD_MAX_PLAYER > 0
375f8                 |                 
375f8                 | .rule_loop           
375f8                 |                 end
375f8                 | 
375f8     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
375fc     5C 00 90 AD |         if_e    jmp     #.xinput
37600     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
37604     00 70 03 F6 |                 mov     htmp,0-0
37608     01 A6 02 FF 
3760c     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
37610     7C 00 90 AD |         if_e    jmp     #.ps3
37614                 | 
37614     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
37618     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
3761c     00 00 80 5F 
37620     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
37624     03 00 80 AF 
37628     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
3762c     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
37630     1B 01 A0 FD |                 call    #get_hid_descr_buffer
37634     55 02 A0 FD |                 call    #control_read
37638     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3763c     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
37640     00 00 04 56 |         if_nz   mov     0-0, #0
37644     24 01 90 5D |         if_nz   jmp     #.notify_client
37648     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3764c     56 01 00 F6 |                 mov     0-0, total_data
37650     1B 01 A0 FD |                 call    #get_hid_descr_buffer
37654                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
37654                 | 
37654     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
37658     10 01 90 FD |                 jmp     #.notify_client
3765c                 | .xinput
3765c     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
37660     2D EF 03 F6 |                 mov     pb,hdev_port
37664     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
37668     03 EE 27 F3 |                 fle     pb,#3
3766c     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
37670     02 EF 47 FC |                 wrbyte  pb, ptra[2]
37674                 | 
37674     03 B0 06 F6 |                 mov     pkt_data, #3
37678     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
3767c     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
37680     5A 00 A0 FD |                 call    #txn_out
37684     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
37688                 | 
37688     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
3768c     DC 00 90 FD |                 jmp     #.notify_client
37690                 | .ps3
37690     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
37694     2D EF 03 F6 |                 mov     pb,hdev_port
37698     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
3769c     04 EE 27 F3 |                 fle     pb,#4
376a0     F7 EF C3 F9 |                 decod   pb
376a4     09 EF 47 FC |                 wrbyte  pb, ptra[9]
376a8                 | 
376a8     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
376ac     00 0C D0 FE |                 loc     ptra, #set_report
376b0     01 00 80 FF 
376b4     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
376b8     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
376bc     03 61 5C FC |                 wrword  #48, ptra[wLength]
376c0     20 0C B0 FE |                 loc     pb, #ps3_command_buff
376c4     A0 02 A0 FD |                 call    #control_write
376c8                 | 
376c8     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
376cc     E0 0B D0 FE |                 loc     ptra, #set_report
376d0     01 00 80 FF 
376d4     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
376d8     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
376dc     03 09 5C FC |                 wrword  #4, ptra[wLength]
376e0     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
376e4     A0 02 A0 FD |                 call    #control_write
376e8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
376ec     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
376f0     00 00 04 56 |         if_nz   mov     0-0, #0
376f4     74 00 90 5D |         if_nz   jmp     #.notify_client
376f8                 | 
376f8     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
376fc     6C 00 90 FD |                 jmp     #.notify_client
37700                 | end
37700                 | 
37700                 | .hub_config
37700     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
37704     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
37708     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
3770c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
37710     3F 00 00 FF 
37714     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
37718     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
3771c                 | 
3771c     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
37720     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
37724     26 EF 03 F6 |                 mov     pb, hub_descr_p
37728     55 02 A0 FD |                 call    #control_read
3772c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37730     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
37734     34 00 90 5D |         if_nz   jmp     #.notify_client
37738                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
37738                 | 
37738     26 F1 03 F6 |                 mov     ptra, hub_descr_p
3773c     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
37740     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
37744                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
37744                 | .pwr_loop
37744     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
37748     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
3774c     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
37750     A0 02 A0 FD |                 call    #control_write
37754     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
37758                 | 
37758     B1 99 02 F6 |                 mov     hctwait, _500ms_
3775c     B0 99 02 F1 |                 add     hctwait, _100ms_
37760     EF 02 A0 FD |                 call    #poll_waitx
37764                 | 
37764     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
37768     00 00 90 FD |                 jmp     #.notify_client
3776c                 | 
3776c                 | .notify_client
3776c     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
37770     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
37774                 |                 debug(uhex_long(hdev_type,hdev_type+1))
37774                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
37774     2D 00 64 FD |                 ret
37778                 | 
37778                 | '------------------------------------------------------------------------------
37778                 | ' Initialize the keyboard/mouse data area to start-up values.
37778                 | '------------------------------------------------------------------------------
37778                 | ' On entry:
37778                 | ' On exit:
37778                 | '------------------------------------------------------------------------------
37778                 | init_kbdm_data
37778     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
3777c     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
37780                 | 
37780     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
37784     2B ED 03 F6 |                 mov     pa, cache_end_p
37788                 | .loop
37788     61 01 4C FC |                 wrbyte  #0, ptra++
3778c     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
37790     F4 FF 9F CD |         if_b    jmp     #.loop
37794                 |         
37794                 |         if EMUPAD_MAX_PLAYER > 0
37794                 |         end
37794                 | 
37794                 | 
37794     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
37798                 | .regloop
37798     00 EC 8F F9 |                 altd    pa
3779c     00 00 04 F6 |                 mov     0-0, #0
377a0     01 EC 07 F1 |                 add     pa, #1
377a4     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
377a8     EC FF 9F 5D |         if_nz   jmp     #.regloop
377ac                 | 
377ac     E1 E1 61 FF 
377b0     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
377b4     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
377b8     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
377bc     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
377c0                 | 
377c0     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
377c4                 | 
377c4                 | '------------------------------------------------------------------------------
377c4                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
377c4                 | ' function.
377c4                 | '------------------------------------------------------------------------------
377c4                 | ' On entry:
377c4                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
377c4                 | '   hpar2 - index number of the target interface.
377c4                 | ' On exit:
377c4                 | '------------------------------------------------------------------------------
377c4                 | hset_idle
377c4     A8 99 02 F6 |                 mov     hctwait, _2ms_
377c8     EF 02 A0 FD |                 call    #poll_waitx
377cc     D8 0A D0 FE |                 loc     ptra, #set_idle
377d0     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
377d4     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
377d8     A0 02 80 FD |                 jmp     #control_write
377dc                 | 
377dc                 | '------------------------------------------------------------------------------
377dc                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
377dc                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
377dc                 | '------------------------------------------------------------------------------
377dc                 | ' On entry:
377dc                 | '   ep_addr_pid - device address and enpoint for the request.
377dc                 | ' On exit:
377dc                 | '   retval - transaction result.
377dc                 | '------------------------------------------------------------------------------
377dc                 | hset_kbdled_report
377dc     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
377e0     CC 0A D0 FE |                 loc     ptra, #set_report
377e4     01 00 80 FF 
377e8     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
377ec     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
377f0     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
377f4     27 EF 03 F6 |                 mov     pb, urx_buff_p
377f8     F7 77 42 FC |                 wrbyte  kb_led_states, pb
377fc     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
37800                 | 
37800                 | '------------------------------------------------------------------------------
37800                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
37800                 | '------------------------------------------------------------------------------
37800                 | ' On entry:
37800                 | ' On exit:
37800                 | '------------------------------------------------------------------------------
37800                 | hget_kbd_in_report
37800     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
37804     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
37808     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
3780c     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
37810     CF 02 A0 FD |                 call    #do_int_in
37814     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37818     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3781c                 | 
3781c     00 90 0F F2 |                 cmp     hpar3, #0               wz
37820     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
37824                 | 
37824     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
37828     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3782c     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
37830     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
37834                 | 
37834     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
37838     18 00 B0 FD |                 call    #hkbd_compare
3783c                 |         if EMUPAD_MAX_PLAYER > 0
3783c                 |         end
3783c                 | 
3783c                 | .led_check
3783c     3B 71 03 F6 |                 mov     htmp, kb_led_states
37840     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
37844     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
37848     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
3784c     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
37850     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
37854                 | 
37854                 | '------------------------------------------------------------------------------
37854                 | ' Compare current and previous keyboard data buffers for keypress changes.
37854                 | '------------------------------------------------------------------------------
37854                 | hkbd_compare
37854     27 F1 03 F6 |                 mov     ptra, urx_buff_p
37858     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
3785c     61 73 07 FB |                 rdlong  htmp1, ptra++
37860     E1 75 07 FB |                 rdlong  htmp2, ptrb++
37864     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
37868     61 73 07 FB |                 rdlong  htmp1, ptra++
3786c     E1 75 07 FB |                 rdlong  htmp2, ptrb++
37870     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
37874     2D 00 64 AD |         if_z    ret
37878                 | 
37878     B4 13 D0 FE |                 loc     ptra, #hkbd_report
3787c                 | 
3787c                 |                 ' Handle modifiers
3787c     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
37880     00 87 C7 FA |                 rdbyte  hr1, ptra
37884     C7 87 43 F9 |                 rolword hr1,hpar2,#0
37888     63 86 63 FD |                 mergew  hr1
3788c     08 EC 07 F6 |                 mov     pa,#8
37890                 | .modloop
37890     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
37894     E8 8C 07 F6 |                 mov     hpar1,#$E8
37898     F6 8D 83 F1 |                 sub     hpar1,pa
3789c     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
378a0     FB ED 6F FB |                 djnz    pa,#.modloop
378a4                 | 
378a4     6F E0 75 FD | .release        modc    _set    wc
378a8                 |                 'alts    hdev_port, #hid_report_p
378a8                 |                 'mov     ptra, hid_report_p
378a8     02 F0 07 F1 |                 add     ptra, #2
378ac     06 EC 07 F6 |                 mov     pa, #6
378b0     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
378b4     20 00 90 AD |         if_z    jmp     #.rl3
378b8     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
378bc     02 F2 07 F1 |                 add     ptrb, #2
378c0     06 EE 07 F6 |                 mov     pb, #6
378c4     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
378c8     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
378cc     08 00 90 AD |         if_z    jmp     #.rl3
378d0     FC EF 6F FB |                 djnz    pb, #.rl2
378d4     68 00 B0 FD |                 call    #hkbd_translate
378d8     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
378dc                 | 
378dc     00 90 07 F6 |                 mov     hpar3, #0
378e0     1F 90 27 F4 |                 bith    hpar3, #31
378e4                 | 
378e4     6F 00 74 FD | .press          modc    _clr    wc
378e8     27 F1 03 F6 |                 mov     ptra, urx_buff_p
378ec     02 F0 07 F1 |                 add     ptra, #2
378f0     06 EC 07 F6 |                 mov     pa, #6
378f4     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
378f8     20 00 90 AD |         if_z    jmp     #.pl3
378fc     30 13 F0 FE |                 loc     ptrb, #hkbd_report
37900     02 F2 07 F1 |                 add     ptrb, #2
37904     06 EE 07 F6 |                 mov     pb, #6
37908     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
3790c     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
37910     08 00 90 AD |         if_z    jmp     #.pl3
37914     FC EF 6F FB |                 djnz    pb, #.pl2
37918     24 00 B0 FD |                 call    #hkbd_translate
3791c     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
37920                 | 
37920     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
37924     08 13 F0 FE |                 loc     ptrb, #hkbd_report
37928     28 02 64 FD |                 setq #1
3792c     61 73 07 FB |                 rdlong  htmp1, ptra++
37930     28 02 64 FD |                 setq #1
37934     E1 73 67 FC |                 wrlong  htmp1, ptrb++
37938     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
3793c                 | 
3793c     2D 00 64 FD |                 ret
37940                 | 
37940                 | '------------------------------------------------------------------------------
37940                 | ' Translate keyboard scancode to ASCII
37940                 | '------------------------------------------------------------------------------
37940                 | ' On entry:
37940                 | '   hpar1 - scancode
37940                 | '   hpar2 - key modifiers state
37940                 | '       c - pressed (0) or released (1) flag
37940                 | ' On exit:
37940                 | '   hpar1 - bit     31 = 0 pressed, 1 released
37940                 | '               30..17 = unused
37940                 | '                   18 = scroll-lock state 
37940                 | '                   17 = caps-lock state
37940                 | '                   16 = num-lock state 
37940                 | '                15..8 = key modifiers state
37940                 | '                 7..0 = scancode
37940                 | '------------------------------------------------------------------------------
37940                 | hkbd_translate
37940     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
37944     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
37948     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
3794c     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
37950     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
37954     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
37958                 | 
37958                 |         if EMUPAD_MAX_PLAYER > 0
37958                 | 
37958                 |         if EMUPAD_BT0_BIT >= 0
37958                 |         end
37958                 |         if EMUPAD_BT1_BIT >= 0
37958                 |         end
37958                 |         if EMUPAD_BT2_BIT >= 0
37958                 |         end
37958                 |         if EMUPAD_BT3_BIT >= 0
37958                 |         end
37958                 |         if EMUPAD_BT4_BIT >= 0
37958                 |         end
37958                 |         if EMUPAD_BT5_BIT >= 0
37958                 |         end
37958                 |         if EMUPAD_BT6_BIT >= 0
37958                 |         end
37958                 |         if EMUPAD_BT7_BIT >= 0
37958                 |         end
37958                 |         if EMUPAD_BT8_BIT >= 0
37958                 |         end
37958                 |         if EMUPAD_BT9_BIT >= 0
37958                 |         end
37958                 | 
37958                 |         end
37958     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
3795c     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
37960     1F 8C 47 F4 |                 bitc    hpar1, #31
37964                 |         if KEYQUEUE_SIZE > 0
37964     C4 09 B0 FE |                 loc pb,#keyq_head
37968     F7 71 E3 FA |                 rdword htmp,pb
3796c     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
37970     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
37974     B8 75 03 F6 |                 mov htmp2,htmp
37978     04 74 07 FA |                 mul htmp2,#4
3797c     F7 75 03 F1 |                 add htmp2,pb
37980     02 74 07 F1 |                 add htmp2,#2
37984     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
37988     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
3798c     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
37990     F7 71 43 5C |         if_nz   wrbyte htmp,pb
37994                 |         end
37994     2D 00 7C FD |                 ret wcz
37998                 | 
37998                 | if HAVE_MOUSE
37998                 | '------------------------------------------------------------------------------
37998                 | ' Execute an IN interrupt transaction to poll for mouse activity.
37998                 | '------------------------------------------------------------------------------
37998                 | ' On entry:
37998                 | ' On exit:
37998                 | '------------------------------------------------------------------------------
37998                 | hget_mouse_in_report
37998     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3799c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
379a0     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
379a4     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
379a8     CF 02 A0 FD |                 call    #do_int_in
379ac     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
379b0     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
379b4                 | 
379b4     00 90 0F F2 |                 cmp     hpar3, #0               wz
379b8     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
379bc                 | 
379bc     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
379c0     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
379c4     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
379c8     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
379cc                 | 
379cc     27 F1 03 F6 |                 mov     ptra, urx_buff_p
379d0     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
379d4     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
379d8     01 90 87 31 |         if_ae   sub     hpar3, #1
379dc                 | 
379dc     40 09 90 FE |                 loc     pa, #mouse_limits
379e0     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
379e4                 | 
379e4                 |                 ' load xacc,yacc,zacc
379e4     28 04 64 FD |                 setq    #3-1
379e8     80 87 07 FB |                 rdlong  hr1,ptrb
379ec                 |                 ' load limits and outptr
379ec     28 04 64 FD |                 setq    #3-1
379f0     F6 73 03 FB |                 rdlong  htmp1,pa
379f4                 | 
379f4     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
379f8     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
379fc     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
37a00     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
37a04     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
37a08     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
37a0c     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
37a10     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
37a14                 |               
37a14                 | 
37a14     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
37a18     07 70 67 F7 |                 signx   htmp, #7
37a1c     B8 87 03 F1 |                 add     hr1,htmp
37a20     00 72 0F F2 |                 cmp     htmp1,#0 wz
37a24     B9 87 63 53 |         if_ne   fles    hr1,htmp1
37a28     00 86 47 53 |         if_ne   fges    hr1,#0
37a2c                 | 
37a2c     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
37a30     07 70 67 F7 |                 signx   htmp, #7
37a34     B8 89 03 F1 |                 add     hr2,htmp
37a38     00 74 0F F2 |                 cmp     htmp2,#0 wz
37a3c     BA 89 63 53 |         if_ne   fles    hr2,htmp2
37a40     00 88 47 53 |         if_ne   fges    hr2,#0
37a44                 |                 
37a44                 | 
37a44     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
37a48     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
37a4c     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
37a50     B8 8B 03 A1 |         if_z    add     hr3,htmp
37a54                 | 
37a54     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
37a58     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
37a5c                 | 
37a5c                 |                 ' write back accumulators
37a5c     28 04 64 FD |                 setq    #3-1
37a60     80 87 67 FC |                 wrlong  hr1,ptrb
37a64                 |                 ' if outptr set, write X/Y words
37a64     00 76 0F F2 |                 cmp htmp3,#0                    wz
37a68     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
37a6c     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
37a70     2D 00 64 FD |                 ret
37a74                 | end
37a74                 | 
37a74                 | '------------------------------------------------------------------------------
37a74                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
37a74                 | '------------------------------------------------------------------------------
37a74                 | ' On entry:
37a74                 | ' On exit:
37a74                 | '------------------------------------------------------------------------------
37a74                 | if _HAVE_GAMEPAD
37a74                 | hget_gp_in_report
37a74     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
37a78     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
37a7c                 | 
37a7c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
37a80     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
37a84     00 90 E3 F8 |                 getbyte hpar3
37a88     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
37a8c     CF 02 A0 FD |                 call    #do_int_in
37a90     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37a94     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
37a98                 | 
37a98     00 90 0F F2 |                 cmp     hpar3, #0               wz
37a9c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
37aa0                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
37aa0                 | 
37aa0     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
37aa4     00 70 E3 F8 |                 getbyte htmp                            ' |
37aa8     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
37aac     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
37ab0     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
37ab4     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
37ab8     B8 01 C0 F8 |                 setbyte htmp                            ' |
37abc                 | 
37abc                 | ' Note: the following code compares the current and previous reports
37abc                 | ' and process the data if there are changes to ease the debug output.
37abc                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
37abc                 | ' gpPreReport buffer.
37abc                 | 
37abc                 |                 ' ----- start of block to remove
37abc                 |                 {
37abc                 |                 }
37abc                 |                 ' ----- end of block to remove
37abc     F4 04 90 FE |                 loc pa,#hpad_translate
37ac0     2A EC 63 FD |                 push pa
37ac4                 | 
37ac4                 |                 ' FALL THROUGH !!!!
37ac4                 | 
37ac4                 | '------------------------------------------------------------------------------
37ac4                 | ' Decode controller report
37ac4                 | '------------------------------------------------------------------------------
37ac4                 | hid_decode
37ac4                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
37ac4     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
37ac8     00 04 00 FF 
37acc     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
37ad0                 | 
37ad0     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
37ad4                 | 
37ad4     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
37ad8     00 2A E3 F8 |                 getbyte hidr_type
37adc     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
37ae0     34 02 90 AD |         if_z    jmp     #hpad_xinput
37ae4     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
37ae8     1C 03 90 AD |         if_z    jmp     #hpad_ps3
37aec     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
37af0     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
37af4     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
37af8                 |                 
37af8                 | 
37af8                 | '------------------------------------------------------------------------------
37af8                 | ' Handle HID controller (or mouse now
37af8                 | ' On entry:
37af8                 | '   ptrb - controller report
37af8                 | '------------------------------------------------------------------------------
37af8                 | hpad_hid
37af8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
37afc     F7 F1 03 F6 |                 mov     ptra, pb
37b00     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
37b04     00 EC 03 F6 |                 mov     pa, 0-0
37b08                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
37b08     19 2A 3B FF 
37b0c     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
37b10                 | 
37b10                 | .next
37b10     00 EC 5F F2 |                 cmps    pa, #0      wcz
37b14     2D 00 7C ED |         if_be   ret     wcz
37b18                 | 
37b18     61 8D C7 FA |                 rdbyte  hpar1, ptra++
37b1c     01 EC 87 F1 |                 sub     pa, #1
37b20     00 8E 07 F6 |                 mov     hpar2, #0
37b24                 | 
37b24     C6 71 03 F6 |                 mov     htmp, hpar1
37b28     03 70 07 F5 |                 and     htmp, #$03
37b2c     01 70 0F F2 |                 cmp     htmp, #1    wz
37b30     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
37b34     07 8E 67 A7 |         if_z    signx   hpar2,#7
37b38     01 EC 87 A1 |         if_z    sub     pa, #1
37b3c     02 70 0F F2 |                 cmp     htmp, #2    wz
37b40     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
37b44     0F 8E 67 A7 |         if_z    signx   hpar2,#15
37b48     02 EC 87 A1 |         if_z    sub     pa, #2
37b4c     03 70 0F F2 |                 cmp     htmp, #3    wz
37b50     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
37b54     04 EC 87 A1 |         if_z    sub     pa, #4
37b58                 | 
37b58     FC 8C 07 F5 |                 and     hpar1, #$FC
37b5c                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
37b5c                 | 
37b5c     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
37b60     0C 01 90 AD |         if_z    jmp     #.report_id
37b64     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
37b68     24 01 90 AD |         if_z    jmp     #.usage_page
37b6c     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
37b70     2C 01 90 AD |         if_z    jmp     #.usage
37b74     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
37b78     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
37b7c     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
37b80     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
37b84     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
37b88     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
37b8c     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
37b90     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
37b94     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
37b98     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
37b9c     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
37ba0     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
37ba4     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
37ba8     64 FF 9F 5D |         if_nz   jmp     #.next
37bac                 | 
37bac     D8 1D A7 FB |                 tjf     hidr_state,#.next
37bb0                 | 
37bb0     03 8E 07 F5 |                 and     hpar2, #$03
37bb4     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
37bb8     18 00 90 5D |         if_nz   jmp     #.skip
37bbc                 | 
37bbc     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
37bc0     20 00 90 AD |         if_z    jmp     #.axes
37bc4     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
37bc8     5C 00 90 AD |         if_z    jmp     #.hats
37bcc     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
37bd0     70 00 90 AD |         if_z    jmp     #.buttons
37bd4                 | .skip
37bd4     8F 71 03 F6 |                 mov     htmp, hidr_size
37bd8     90 71 03 FA |                 mul     htmp, hidr_count
37bdc     B8 23 03 F1 |                 add     hidr_offset, htmp
37be0     2C FF 9F FD |                 jmp     #.next
37be4                 | .axes
37be4                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
37be4     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
37be8     90 87 03 F6 |                 mov     hr1, hidr_count
37bec                 | .l1
37bec     91 8D 03 F6 |                 mov     hpar1, hidr_offset
37bf0     8F 8F 03 F6 |                 mov     hpar2, hidr_size
37bf4     04 03 B0 FD |                 call    #hpad_getbits
37bf8     64 03 B0 FD |                 call    #hpad_normalize
37bfc     06 84 1F F2 |                 cmp     hr0, #6         wcz
37c00     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
37c04     00 88 43 C8 |         if_b    getnib  hr2
37c08     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
37c0c     5F 01 20 C9 |         if_b    setword retval
37c10     01 84 07 C1 |         if_b    add     hr0, #1
37c14     8F 23 03 F1 |                 add     hidr_offset, hidr_size
37c18     F4 87 6F FB |                 djnz    hr1, #.l1
37c1c                 | 
37c1c     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
37c20     01 1C 07 F6 |                 mov     hidr_state, #1
37c24     E8 FE 9F FD |                 jmp     #.next
37c28                 | .hats
37c28                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
37c28     91 8D 03 F6 |                 mov     hpar1, hidr_offset
37c2c     8F 8F 03 F6 |                 mov     hpar2, hidr_size
37c30     C8 02 B0 FD |                 call    #hpad_getbits
37c34     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
37c38     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
37c3c     01 1C 07 F6 |                 mov     hidr_state, #1
37c40     90 FF 9F FD |                 jmp     #.skip
37c44                 | .buttons
37c44                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
37c44     91 8D 03 F6 |                 mov     hpar1, hidr_offset
37c48     8F 8F 03 F6 |                 mov     hpar2, hidr_size
37c4c     90 8F 03 FA |                 mul     hpar2, hidr_count
37c50     A8 02 B0 FD |                 call    #hpad_getbits
37c54     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
37c58     B8 BF 62 F0 |                 shl     retval, htmp
37c5c     5F 17 43 F5 |                 or      hidr_buttons, retval
37c60     90 71 03 F1 |                 add     htmp, hidr_count
37c64     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
37c68     01 1C 07 F6 |                 mov     hidr_state, #1
37c6c     64 FF 9F FD |                 jmp     #.skip
37c70                 | .report_id
37c70     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
37c74     2D 00 7C 5D |         if_nz   ret     wcz
37c78     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
37c7c     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
37c80     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
37c84     01 1C 67 56 |         if_nz   neg     hidr_state,#1
37c88     01 F2 87 51 |         if_nz   sub     ptrb,#1
37c8c     80 FE 9F FD |                 jmp     #.next
37c90                 | .usage_page
37c90     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
37c94     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
37c98     04 1C 07 A6 |         if_z    mov     hidr_state, #4
37c9c     70 FE 9F FD |                 jmp     #.next
37ca0                 | .usage
37ca0     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
37ca4     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
37ca8     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
37cac     01 1C 07 A6 |         if_z    mov     hidr_state, #1
37cb0     5C FE 9F AD |         if_z    jmp     #.next
37cb4     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
37cb8     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
37cbc     01 1C 07 A6 |         if_z    mov     hidr_state, #1
37cc0     4C FE 9F AD |         if_z    jmp     #.next
37cc4     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
37cc8     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
37ccc     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
37cd0     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
37cd4     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
37cd8     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
37cdc     10 00 90 AD |         if_z    jmp     #.usage_axis
37ce0     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
37ce4     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
37ce8     03 1C 07 A6 |         if_z    mov     hidr_state, #3
37cec     20 FE 9F FD |                 jmp     #.next
37cf0                 | .usage_axis
37cf0     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
37cf4     18 FE 9F CD |         if_b    jmp     #.next
37cf8     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
37cfc     C7 01 00 F8 |                 setnib  hpar2
37d00                 | 
37d00     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
37d04     C7 8F C3 F9 |                 decod   hpar2
37d08     C7 0F 43 F5 |                 or      hidr_flags, hpar2
37d0c                 | 
37d0c     01 24 07 F1 |                 add     hidr_usage_idx, #1
37d10     02 1C 07 F6 |                 mov     hidr_state, #2
37d14     F8 FD 9F FD |                 jmp     #.next
37d18                 | 
37d18                 | '------------------------------------------------------------------------------
37d18                 | ' Handle XInput controller
37d18                 | ' On entry:
37d18                 | '   ptrb - controller report
37d18                 | '------------------------------------------------------------------------------
37d18                 | '   Default implementation translates the report to a pseudo-defacto hid
37d18                 | '   standard and jumps to hpad_translate for actions.
37d18                 | '   Implementors may take specific actions for this kind of controller.
37d18                 | '------------------------------------------------------------------------------
37d18                 | hpad_xinput
37d18     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
37d1c     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
37d20     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
37d24     14 70 0F F2 |                 cmp     htmp, #$14      wz
37d28     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
37d2c                 | 
37d2c                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
37d2c                 | 
37d2c     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
37d30     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
37d34                 | 
37d34     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
37d38     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
37d3c     5F BF 22 F6 |                 not     retval
37d40     5F 11 2B F9 |                 setword hidr_axis, retval, #1
37d44     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
37d48     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
37d4c     5F BF 22 F6 |                 not     retval
37d50     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
37d54                 | 
37d54     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
37d58     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
37d5c     C0 BE 1E F2 |                 cmp     retval, #192    wcz
37d60     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
37d64     F8 01 B0 FD |                 call    #hpad_normalize
37d68     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
37d6c     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
37d70     C0 BE 1E F2 |                 cmp     retval, #192    wcz
37d74     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
37d78     E4 01 B0 FD |                 call    #hpad_normalize
37d7c     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
37d80                 | 
37d80     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
37d84     81 BF E6 FA |                 rdword  retval, ptrb[1]
37d88     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
37d8c     00 16 47 F4 |                 bitc    hidr_buttons, #0
37d90     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
37d94     01 16 47 F4 |                 bitc    hidr_buttons, #1
37d98     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
37d9c     02 16 47 F4 |                 bitc    hidr_buttons, #2
37da0     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
37da4     03 16 47 F4 |                 bitc    hidr_buttons, #3
37da8     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
37dac     04 16 47 F4 |                 bitc    hidr_buttons, #4
37db0     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
37db4     05 16 47 F4 |                 bitc    hidr_buttons, #5
37db8     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
37dbc     08 16 47 F4 |                 bitc    hidr_buttons, #8
37dc0     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
37dc4     09 16 47 F4 |                 bitc    hidr_buttons, #9
37dc8     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
37dcc     0A 16 47 F4 |                 bitc    hidr_buttons, #10
37dd0     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
37dd4     0B 16 47 F4 |                 bitc    hidr_buttons, #11
37dd8     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
37ddc     0C 16 47 F4 |                 bitc    hidr_buttons, #12
37de0                 | 
37de0     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
37de4     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
37de8     7A BB 7A FF 
37dec     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
37df0     F9 FF 7F FF 
37df4     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
37df8     B9 71 5F F9 |                 altgn   htmp, #htmp1
37dfc     00 70 43 F8 |                 getnib  htmp
37e00     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
37e04                 | 
37e04     AC 01 90 FD |                 jmp     #hpad_translate
37e08                 | 
37e08                 | '------------------------------------------------------------------------------
37e08                 | ' Handle PS3 controller
37e08                 | ' On entry:
37e08                 | '   ptrb - controller report
37e08                 | '------------------------------------------------------------------------------
37e08                 | '   Default implementation translates the report to a pseudo-defacto hid
37e08                 | '   standard and jumps to hpad_translate for actions.
37e08                 | '   Implementors may take specific actions for this kind of controller.
37e08                 | '------------------------------------------------------------------------------
37e08                 | hpad_ps3
37e08     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
37e0c     01 70 0F F2 |                 cmp     htmp, #$01      wz
37e10     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
37e14                 | 
37e14                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
37e14                 | 
37e14     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
37e18     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
37e1c     40 01 B0 FD |                 call    #hpad_normalize
37e20     5F 11 23 F9 |                 setword hidr_axis, retval, #0
37e24     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
37e28     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
37e2c     30 01 B0 FD |                 call    #hpad_normalize
37e30     5F 11 2B F9 |                 setword hidr_axis, retval, #1
37e34     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
37e38     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
37e3c     20 01 B0 FD |                 call    #hpad_normalize
37e40     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
37e44     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
37e48     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
37e4c     10 01 B0 FD |                 call    #hpad_normalize
37e50     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
37e54     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
37e58     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
37e5c                 | 
37e5c     08 8C 07 F6 |                 mov     hpar1, #8
37e60     13 8E 07 F6 |                 mov     hpar2, #19
37e64     94 00 B0 FD |                 call    #hpad_getbits
37e68                 | 
37e68     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
37e6c     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
37e70     00 16 47 F4 |                 bitc    hidr_buttons, #0
37e74     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
37e78     01 16 47 F4 |                 bitc    hidr_buttons, #1
37e7c     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
37e80     02 16 47 F4 |                 bitc    hidr_buttons, #2
37e84     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
37e88     03 16 47 F4 |                 bitc    hidr_buttons, #3
37e8c     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
37e90     04 16 47 F4 |                 bitc    hidr_buttons, #4
37e94     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
37e98     05 16 47 F4 |                 bitc    hidr_buttons, #5
37e9c     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
37ea0     06 16 47 F4 |                 bitc    hidr_buttons, #6
37ea4     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
37ea8     07 16 47 F4 |                 bitc    hidr_buttons, #7
37eac     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
37eb0     08 16 47 F4 |                 bitc    hidr_buttons, #8
37eb4     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
37eb8     09 16 47 F4 |                 bitc    hidr_buttons, #9
37ebc     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
37ec0     0A 16 47 F4 |                 bitc    hidr_buttons, #10
37ec4     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
37ec8     0B 16 47 F4 |                 bitc    hidr_buttons, #11
37ecc     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
37ed0     0C 16 47 F4 |                 bitc    hidr_buttons, #12
37ed4                 | 
37ed4     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
37ed8     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
37edc     09 FA 79 FF 
37ee0     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
37ee4     FF FA 7F FF 
37ee8     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
37eec     B9 71 5F F9 |                 altgn   htmp, #htmp1
37ef0     00 70 43 F8 |                 getnib  htmp
37ef4     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
37ef8                 | 
37ef8     B8 00 90 FD |                 jmp     #hpad_translate
37efc                 | 
37efc                 | '------------------------------------------------------------------------------
37efc                 | ' Read bits from report data buffer
37efc                 | '------------------------------------------------------------------------------
37efc                 | ' On entry:
37efc                 | '   PTRB - report buffer
37efc                 | '   hpar1 - start bit
37efc                 | '   hpar2 - number of bits
37efc                 | ' On exit:
37efc                 | '   retval - bits
37efc                 | '------------------------------------------------------------------------------
37efc                 | hpad_getbits
37efc     C6 71 03 F6 |                 mov     htmp, hpar1
37f00     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
37f04     F9 71 03 F1 |                 add     htmp, ptrb
37f08     B8 BF 02 FB |                 rdlong  retval, htmp
37f0c                 | 
37f0c     C6 73 03 F6 |                 mov     htmp1, hpar1
37f10     07 72 07 F5 |                 and     htmp1, #$07     ' shift
37f14     B9 BF 42 F0 |                 shr     retval, htmp1
37f18                 | 
37f18     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
37f1c     10 00 90 1D |         if_a    jmp     #.l1
37f20                 | 
37f20     C7 8F C3 F9 |                 decod   hpar2
37f24     01 8E 87 F1 |                 sub     hpar2, #1
37f28     C7 BF 02 F5 |                 and     retval, hpar2
37f2c     2D 00 64 FD |                 ret
37f30                 | .l1
37f30     FF 7F 00 FF 
37f34     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
37f38     03 70 07 F1 |                 add     htmp, #3
37f3c     B8 75 03 FB |                 rdlong  htmp2, htmp
37f40     18 8E 87 F1 |                 sub     hpar2, #24
37f44     C7 8F C3 F9 |                 decod   hpar2
37f48     01 8E 87 F1 |                 sub     hpar2, #1
37f4c     B9 75 43 F0 |                 shr     htmp2, htmp1
37f50     C7 75 03 F5 |                 and     htmp2, hpar2
37f54     18 74 67 F0 |                 shl     htmp2, #24
37f58     BA BF 42 F5 |                 or      retval, htmp2
37f5c     2D 00 64 FD |                 ret
37f60                 | 
37f60                 | '------------------------------------------------------------------------------
37f60                 | ' Normalize value to signed word (-32768 / 32767)
37f60                 | '------------------------------------------------------------------------------
37f60                 | ' On entry:
37f60                 | '   retval - value to normalize
37f60                 | '   hidr_lminmax - min (word 1) max (word 0) value range
37f60                 | '   - or -
37f60                 | '   hidr_pminmax - min (word 1) max (word 0) value range
37f60                 | '   hidr_size - value bits length
37f60                 | ' On exit:
37f60                 | '   retval - normalized value
37f60                 | '------------------------------------------------------------------------------
37f60                 | hpad_normalize
37f60     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
37f64     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
37f68     2D 00 64 AD |         if_z    ret
37f6c     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
37f70     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
37f74     0F 72 77 F7 |                 signx   htmp1, #15      wc
37f78     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
37f7c     00 BE 66 C7 |         if_c    signx   retval, #0-0
37f80     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
37f84     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
37f88     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
37f8c     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
37f90     B8 71 53 F6 |                 abs     htmp            wc
37f94     1F BE 0E F4 |                 testb   retval, #31     wz
37f98     5F BF 42 F6 |                 abs     retval
37f9c     B8 BF 12 FD |                 qdiv    retval, htmp
37fa0     18 BE 62 FD |                 getqx   retval
37fa4     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
37fa8     C0 FF 7F FF 
37fac     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
37fb0     2D 00 64 FD |                 ret
37fb4                 | 
37fb4                 | '------------------------------------------------------------------------------
37fb4                 | ' Perform controller actions
37fb4                 | ' On entry:
37fb4                 | '    hidr_id        report id
37fb4                 | '    hidr_axis      axis value (signed word, 2 axes per long)
37fb4                 | '                      X = hidr_axis+0, #0
37fb4                 | '                      Y = hidr_axis+0, #1
37fb4                 | '                      Z = hidr_axis+1, #0
37fb4                 | '                     RX = hidr_axis+1, #1
37fb4                 | '                     RY = hidr_axis+2, #0
37fb4                 | '                     RZ = hidr_axis+2, #1
37fb4                 | '    hidr_buttons   buttons state (bits 0 to 31)
37fb4                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
37fb4                 | '
37fb4                 | '                     -------3 -------2 -------1 -------0 byte
37fb4                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
37fb4                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
37fb4                 | '                                zyx||| |||||||| ++++++++ n. buttons
37fb4                 | '                                |||||| ||||++++--------- n. axes
37fb4                 | '                                |||||| ++++------------- n. hats
37fb4                 | '                                ++++++------------------ valid axes
37fb4                 | '------------------------------------------------------------------------------
37fb4                 | hpad_translate
37fb4                 | 
37fb4                 | 
37fb4                 |         if HAVE_HIDPAD
37fb4     84 0C F0 FE |                 loc     ptrb,#hidpad_report
37fb8     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
37fbc     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
37fc0     01 70 E7 F2 |                 cmpsub  htmp,#1
37fc4     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
37fc8     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
37fcc     2D 00 7C 3D |         if_ae   ret     wcz
37fd0     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
37fd4     B8 F3 03 F1 |                 add     ptrb,htmp
37fd8     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
37fdc     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
37fe0     28 0C 64 FD |                 setq    #7-1
37fe4     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
37fe8                 |         end
37fe8                 | 
37fe8                 | 
37fe8                 |         if EMUPAD_MAX_PLAYER > 0
37fe8                 | .emupad_no_hat
37fe8                 |         if EMUPAD_BT0_BIT >= 0
37fe8                 |         end
37fe8                 |         if EMUPAD_BT1_BIT >= 0
37fe8                 |         end
37fe8                 |         if EMUPAD_BT2_BIT >= 0
37fe8                 |         end
37fe8                 |         if EMUPAD_BT3_BIT >= 0
37fe8                 |         end
37fe8                 |         if EMUPAD_BT4_BIT >= 0
37fe8                 |         end
37fe8                 |         if EMUPAD_BT5_BIT >= 0
37fe8                 |         end
37fe8                 |         if EMUPAD_BT6_BIT >= 0
37fe8                 |         end
37fe8                 |         if EMUPAD_BT7_BIT >= 0
37fe8                 |         end
37fe8                 |         if EMUPAD_BT8_BIT >= 0
37fe8                 |         end
37fe8                 |         if EMUPAD_BT9_BIT >= 0
37fe8                 |         end
37fe8                 | .emupad_slot_over
37fe8                 |         end
37fe8                 | 
37fe8                 |         if 0
37fe8                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
37fe8                 | 
37fe8                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
37fe8                 | 
37fe8                 |         end
37fe8     2D 00 64 FD |                 ret
37fec                 | end
37fec                 | 
37fec                 | if EMUPAD_MAX_PLAYER > 0
37fec                 | '------------------------------------------------------------------------------
37fec                 | ' Clear EmuPad state
37fec                 | '------------------------------------------------------------------------------
37fec                 | emupad_reset
37fec                 | 
37fec                 | '------------------------------------------------------------------------------
37fec                 | ' Get EmuPad Player number for current device (into retval)
37fec                 | ' Z flag is also set if current device is valid
37fec                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
37fec                 | '------------------------------------------------------------------------------
37fec                 | emupad_getnum
37fec                 | .loop
37fec                 | '------------------------------------------------------------------------------
37fec                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
37fec                 | '------------------------------------------------------------------------------
37fec                 | emupad_discon
37fec                 | .loop         
37fec                 |         
37fec                 |         ' FALL THROUGH!!!
37fec                 | 
37fec                 | '------------------------------------------------------------------------------
37fec                 | ' Update EmuPad reports (all of them...)
37fec                 | '------------------------------------------------------------------------------
37fec                 | emupad_write_reports
37fec                 | .devloop
37fec                 | 
37fec                 | end
37fec                 | 
37fec                 | 
37fec                 | '------------------------------------------------------------------------------
37fec                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
37fec                 | '------------------------------------------------------------------------------
37fec                 | ' On entry:
37fec                 | ' On exit:
37fec                 | '------------------------------------------------------------------------------
37fec                 | hget_hub_status
37fec     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
37ff0     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
37ff4     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
37ff8     01 90 2F F9 |                 setword hpar3, #1, #1
37ffc     CF 02 A0 FD |                 call    #do_int_in
38000     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38004     0C 00 90 AD |         if_z    jmp     #.data
38008     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3800c     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
38010     2D 00 64 FD |                 ret
38014                 | .data
38014     00 90 0F F2 |                 cmp     hpar3, #0               wz
38018     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3801c                 | 
3801c     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
38020     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
38024     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
38028     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
3802c                 |                 debug(ubin_long(hub_status_chg))
3802c                 | 
3802c     01 5A 06 F6 |                 mov     hdev_port, #1
38030                 | .loop
38030     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
38034     0C 00 B0 AD |         if_x1   call    #hub_port_handler
38038     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
3803c     F0 FF 9F 3D |         if_nc   jmp     #.loop
38040     2D 00 64 FD |                 ret
38044                 | 
38044                 | hub_port_handler
38044     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
38048     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3804c     27 EF 03 F6 |                 mov     pb, urx_buff_p
38050     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
38054     55 02 A0 FD |                 call    #control_read
38058     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3805c                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3805c                 | 
3805c     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
38060     50 01 90 5D |         if_x0   jmp     #.other
38064     68 02 D0 FE |                 loc     ptra, #clr_port_feat
38068     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
3806c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
38070     A0 02 A0 FD |                 call    #control_write
38074     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
38078     7C 01 90 5D |         if_x0   jmp     #.disconnect
3807c     B0 99 02 F6 |                 mov     hctwait, _100ms_
38080     EF 02 A0 FD |                 call    #poll_waitx
38084                 | 
38084     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
38088     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
3808c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
38090     A0 02 A0 FD |                 call    #control_write
38094                 | 
38094     02 76 07 F6 |                 mov     htmp3, #2
38098                 | .wait_reset
38098     AC 99 02 F6 |                 mov     hctwait, _8ms_
3809c     EF 02 A0 FD |                 call    #poll_waitx
380a0     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
380a4     27 EF 03 F6 |                 mov     pb, urx_buff_p
380a8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
380ac     55 02 A0 FD |                 call    #control_read
380b0     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
380b4     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
380b8     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
380bc                 | 
380bc     10 02 D0 FE |                 loc     ptra, #clr_port_feat
380c0     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
380c4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
380c8     A0 02 A0 FD |                 call    #control_write
380cc                 | 
380cc     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
380d0                 | .wait_recover
380d0     A7 99 02 F6 |                 mov     hctwait, _1ms_
380d4     EF 02 A0 FD |                 call    #poll_waitx
380d8     FD 71 6F FB |                 djnz    htmp,#.wait_recover
380dc                 | 
380dc     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
380e0     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
380e4     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
380e8                 | 
380e8     00 08 00 FF 
380ec     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
380f0     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
380f4     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
380f8     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
380fc     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
38100     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38104     48 01 90 5D |         if_nz   jmp     #.done
38108                 | .get_dev_desc
38108     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3810c     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
38110     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
38114     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
38118     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
3811c     01 71 57 FC |                 wrword  htmp, ptra[wValue]
38120     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
38124     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38128     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3812c     AC 99 02 F6 |                 mov     hctwait, _8ms_
38130     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
38134     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
38138     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
3813c     BE 00 A0 FD |                 call    #calc_crc5
38140     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
38144     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
38148     F7 AD C2 FA |                 rdbyte  total_data, pb
3814c     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
38150     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
38154     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38158     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3815c     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
38160     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
38164                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
38164     9F 99 02 F6 |                 mov     hctwait, _500us_
38168     EF 02 A0 FD |                 call    #poll_waitx
3816c     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
38170     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
38174     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
38178     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3817c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38180     CC 00 90 5D |         if_nz   jmp     #.done
38184     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
38188     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3818c     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
38190     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
38194     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
38198     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3819c     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
381a0     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
381a4     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
381a8     A4 00 90 CD |         if_b    jmp     #.done
381ac     6C F0 BF FD |                 call    #hparse_con_desc
381b0     9C 00 90 FD |                 jmp     #.done
381b4                 | 
381b4                 | .other
381b4     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
381b8     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
381bc     28 00 90 AD |         if_x1   jmp     #.reset_feature
381c0     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
381c4     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
381c8     1C 00 90 AD |         if_x1   jmp     #.reset_feature
381cc     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
381d0     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
381d4     10 00 90 AD |         if_x1   jmp     #.reset_feature
381d8     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
381dc     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
381e0     04 00 90 AD |         if_x1   jmp     #.reset_feature
381e4     68 00 90 FD |                 jmp     #.done
381e8                 | .reset_feature
381e8     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
381ec     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
381f0     A0 02 A0 FD |                 call    #control_write
381f4     58 00 90 FD |                 jmp     #.done
381f8                 | .disconnect
381f8                 | 
381f8     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
381fc     00 70 E3 F8 |                 getbyte htmp
38200     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
38204     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
38208     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
3820c     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
38210     00 76 06 A6 |         if_z    mov     kb_led_states, #0
38214     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
38218                 |         if EMUPAD_MAX_PLAYER > 0
38218                 |         end
38218                 |         if HAVE_MOUSE
38218     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3821c     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
38220     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
38224                 |         end
38224                 |         if HAVE_HIDPAD
38224     14 0A F0 FE |                 loc ptrb,#hidpad_report
38228     2D 71 03 F6 |                 mov htmp,hdev_port
3822c     01 70 E7 F2 |                 cmpsub htmp,#1
38230     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
38234     B8 F3 03 F1 |                 add ptrb,htmp
38238     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
3823c     80 01 6C FC |                 wrlong #0,ptrb
38240                 |         end
38240                 | 
38240     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
38244     00 00 C4 F8 |                 setbyte #0
38248     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3824c     00 00 04 F6 |                 mov     0-0, #0
38250                 | 
38250                 | .done
38250     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
38254     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
38258     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3825c     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
38260     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
38264     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
38268                 | 
38268     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3826c     27 EF 03 F6 |                 mov     pb, urx_buff_p
38270     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
38274     55 02 A0 FD |                 call    #control_read
38278     00 69 06 FB |                 rdlong  hub_port_status, ptra
3827c                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3827c     2D 00 64 FD |                 ret
38280                 | 
38280                 | '------------------------------------------------------------------------------
38280                 | ' Partially populated SETUP packets
38280                 | '------------------------------------------------------------------------------
38280     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
38281     06          |                 byte    REQ_GET_DESC
38282     00 01       |                 word    TYPE_DEVICE << 8
38284     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
38286     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
38288     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
38289     06          |                 byte    REQ_GET_DESC
3828a     00 02       |                 word    TYPE_CONFIG << 8
3828c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3828e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
38290     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
38291     09          |                 byte    REQ_SET_CONFIG
38292     00 00       |                 word    0       ' Configuration value
38294     00 00       |                 word    0       ' Zero
38296     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
38298     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
38299     05          |                 byte    REQ_SET_ADDR
3829a     00 00       |                 word    0       ' Zero
3829c     00 00       |                 word    0       ' Zero
3829e     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
382a0                 | '------------------------------------------------------------------------------
382a0                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
382a0                 | ' wValue field dictates which protocol should be used.
382a0                 | '
382a0                 | ' When initialized, all devices default to report protocol. However the host
382a0                 | ' should not make any assumptions about the device state and should set the
382a0                 | ' desired protocol whenever initializing a device.
382a0                 | '------------------------------------------------------------------------------
382a0     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
382a1     0B          |                 byte    HID_SET_PROTO
382a2     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
382a4                 |                                                 ' (HID 1.11 Section 7.2.6).
382a4     00 00       |                 word    0               ' Interface index number.
382a6     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
382a8                 | '------------------------------------------------------------------------------
382a8     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
382a9     0A          |                 byte    HID_SET_IDLE
382aa     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
382ac                 |                                         ' reporting until a change is detected in the report data
382ac                 | 
382ac                 |                                         ' (HID 1.11 Section 7.2.4).
382ac     00 00       |                 word    0       ' Interface index number.
382ae     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
382b0     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
382b1     09          |                 byte    HID_SET_REPORT
382b2     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
382b4                 |                                         ' (HID 1.11 Section 7.2.2).
382b4     00 00       |                 word    0       ' Interface index number.
382b6     00 00       |                 word    0       ' Size of the report, in bytes.
382b8     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
382b9     06          |                 byte    REQ_GET_DESC
382ba     00 22       |                 word    TYPE_REPORT << 8
382bc     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
382be     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
382c0                 | '------------------------------------------------------------------------------
382c0     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
382c1     06          |                 byte    REQ_GET_DESC
382c2     00 29       |                 word    TYPE_HUB << 8
382c4     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
382c6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
382c8     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
382c9     03          |                 byte    REQ_SET_FEATURE
382ca     00 00       |                 word    0       ' port power
382cc     01 00       |                 word    1       ' Port index number (1+)
382ce     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
382d0     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
382d1     01          |                 byte    REQ_CLEAR_FEATURE
382d2     00 00       |                 word    0       ' port power
382d4     01 00       |                 word    1       ' Port index number (1+)
382d6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
382d8     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
382d9     00          |                 byte    REQ_GET_STATUS
382da     00 00       |                 word    0
382dc     01 00       |                 word    1       ' Port index number (1+)
382de     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
382e0                 | '------------------------------------------------------------------------------
382e0                 | if _HAVE_GAMEPAD
382e0     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
382e4                 | ps3_command_buff
382e4     00 00 00 00 
382e8     00          |                 byte    $00, $00, $00, $00, $00
382e9     00 00 00 00 
382ed     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
382ee     FF 27 10 00 
382f2     32          |                 byte    $FF, $27, $10, $00, $32
382f3     FF 27 10 00 
382f7     32          |                 byte    $FF, $27, $10, $00, $32
382f8     FF 27 10 00 
382fc     32          |                 byte    $FF, $27, $10, $00, $32
382fd     FF 27 10 00 
38301     32          |                 byte    $FF, $27, $10, $00, $32
38302     00 00 00 00 
38306     00          |                 byte    $00, $00, $00, $00, $00
38307     00 00 00 00 
3830b     00          |                 byte    $00, $00, $00, $00, $00
3830c     00 00 00 00 
38310     00          |                 byte    $00, $00, $00, $00, $00
38311     00 00 00    |                 byte    $00, $00, $00
38314                 | '------------------------------------------------------------------------------
38314     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
38317                 |                                         ' 0x01 All blinking
38317                 |                                         ' 0x02 1 flashes, then on
38317                 |                                         ' 0x03 2 flashes, then on
38317                 |                                         ' 0x04 3 flashes, then on
38317                 |                                         ' 0x05 4 flashes, then on
38317                 |                                         ' 0x06 1 on
38317                 |                                         ' 0x07 2 on
38317                 |                                         ' 0x08 3 on
38317                 |                                         ' 0x09 4 on
38317                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
38317                 |                                         ' 0x0B Blinking*
38317                 |                                         ' 0x0C Slow blinking*
38317                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
38317     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
3831a     00          |                 byte    $00             ' Left rumble
3831b     00          |                 byte    $00             ' Right rumble
3831c     00 00 00    |                 byte    $00, $00, $00
3831f     00          | end
38320                 | alignl
38320                 | 
38320                 | if HAVE_MOUSE
38320     00 00 00 00 
38324     00 00 00 00 | mouse_limits long 0[2]
38328     00 00 00 00 | mouse_outptr long 0
3832c                 | end
3832c                 | 
3832c                 | if KEYQUEUE_SIZE > 0
3832c     00          | keyq_head byte 0
3832d     00          | keyq_tail byte 0
3832e     00 00 00 00 
      ...             
3852a     00 00 00 00 
3852e     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
38530                 | alignl
38530                 | end
38530                 | 
38530                 | if EMUPAD_MAX_PLAYER > 0
38530                 | emupad_rule_buffer
38530                 | if EMUPAD_BUILTIN_RULES
38530                 | file "padmap_builtin.dat"
38530                 | end
38530                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
38530                 | '' Default rule directly follows!
38530                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
38530                 | end
38530                 | 
38530                 | '------------------------------------------------------------------------------
38530                 | ' The USB data cache area gets zero-filled at every device disconnect
38530                 | '------------------------------------------------------------------------------
38530                 | usb_cache_start
38530                 | 
38530                 | ' HID descriptor and report buffers
38530                 | if !!OVERLAP_MEMORY
38530     00 00 00 00 
      ...             
38c28     00 00 00 00 
38c2c     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
38c30                 | end
38c30     00 00 00 00 
38c34     00 00 00 00 | hkbd_report     byte    0[8]
38c38     00 00 00 00 | hkbd_led_rep    byte    0
38c3c                 | alignl
38c3c                 | 
38c3c                 | if HAVE_HIDPAD
38c3c     00 00 00 00 
      ...             
38cf8     00 00 00 00 
38cfc     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
38d00                 | end
38d00                 | 
38d00                 | ' HUB descriptor
38d00     00          | hub_descr       byte    0   ' bDescLength
38d01     00          |                 byte    0   ' bDescriptorType
38d02     00          |                 byte    0   ' bNbrPorts
38d03     00 00       |                 word    0   ' wHubCharacteristics
38d05     00          |                 byte    0   ' bPwrOn2PwrGood
38d06     00          |                 byte    0   ' bHubContrCurrent
38d07     00          |                 byte    0   ' DeviceRemoveable
38d08     00          |                 byte    0   ' PortPwrCtrlMask
38d09                 | 
38d09                 | usb_cache_end
38d09                 | 
38d09                 | if HAVE_MOUSE
38d09     00 00 00 00 | mouse_xacc      long 0
38d0d     00 00 00 00 | mouse_yacc      long 0
38d11     00 00 00 00 | mouse_zacc      long 0
38d15     00          | mouse_bstate    byte 0
38d16     00          | mouse_lpending  byte 0
38d17     00          | mouse_rpending  byte 0
38d18     00          | mouse_mpending  byte 0
38d19     00          | mouse_lock      byte 0
38d1a     00 00 00    |                 byte 0[3] ' padding
38d1d                 | end
38d1d                 | 
38d1d     00 00 00 00 
      ...             
38d95     00 00 00 00 
38d99     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
38d9d     00 00 00 00 
38da1     00 00 00 00 
38da5     00 00 00 00 
38da9     00 00 00 00 
38dad     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
38daf     00 00 00 00 
      ...             
38ea7     00 00 00 00 
38eab     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
38eaf                 | 
38eaf     00          | driver_cog      byte    0                       ' Current driver cog + 1
38eb0                 | 	alignl
38eb0                 | _audio096_spin2_dat_
38eb0                 | 
38eb0                 | audio       org     0
38eb0                 | 
38eb0     61 CD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
38eb4     61 1B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
38eb8     61 27 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
38ebc                 |  
38ebc     01 EC 63 FD |             cogid   pa                   ' compute cogid
38ec0     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
38ec4     F6 CD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
38ec8     E6 CA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
38ecc                 | 
38ecc     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
38ed0     0E 24 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
38ed4     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
38ed8     0F 24 06 FC |             wrpin   dac2,#right
38edc     0F 00 1E FC |             wxpin   #256,#right    
38ee0     41 9C 64 FD |             dirh    #left addpins 1
38ee4     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
38ee8     CD E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
38eec     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
38ef0                 |             
38ef0                 | '---------------------------------------------------------------------------------        
38ef0                 | '----------------- The main loop -------------------------------------------------
38ef0                 | '---------------------------------------------------------------------------------
38ef0                 | 
38ef0     D6 AE 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
38ef4     10 00 90 CD |       if_c  jmp     #loop1
38ef8                 |   
38ef8     09 00 06 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
38efc     D6 00 8E F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
38f00     D5 00 80 F1 |             sub     0-0,a40000000
38f04     FD 01 6E FB |             djnz    cn,#p402
38f08                 |     
38f08     00 00 06 F6 | loop1       mov     cn,#0               ' Find the channel to compute
38f0c     D8 02 02 F6 |             mov     ct,time1            ' with the lowest next sample time
38f10     D9 02 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
38f14     01 00 06 C6 |     if_c    mov     cn,#1
38f18     DA 02 3A F3 |             fle     ct,time3 wcz
38f1c     02 00 06 C6 |     if_c    mov     cn,#2     
38f20     DB 02 3A F3 |             fle     ct,time4 wcz
38f24     03 00 06 C6 |     if_c    mov     cn,#3
38f28     DC 02 3A F3 |             fle     ct,time5 wcz
38f2c     04 00 06 C6 |     if_c    mov     cn,#4
38f30     DD 02 3A F3 |             fle     ct,time6 wcz
38f34     05 00 06 C6 |     if_c    mov     cn,#5
38f38     DE 02 3A F3 |             fle     ct,time7 wcz
38f3c     06 00 06 C6 |     if_c    mov     cn,#6
38f40     DF 02 3A F3 |             fle     ct,time8 wcz
38f44     07 00 06 C6 |     if_c    mov     cn,#7
38f48                 | 
38f48                 | 
38f48                 | '----------------------------------------------------------------------------------
38f48                 | '------------- Compute channel samples --------------------------------------------
38f48                 | '----------------------------------------------------------------------------------
38f48                 | 
38f48                 | 
38f48     00 C1 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
38f4c     06 C0 65 F0 |             shl     channeladd,#6
38f50     E0 F0 03 F1 |             add     ptra,channeladd
38f54                 | 
38f54     28 16 64 FD |             setq    #11                        	' read parameters
38f58     00 D7 05 FB |             rdlong  pointer0,ptra
38f5c                 |     	    
38f5c     1F E4 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
38f60     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
38f64     F2 C4 31 F9 |             getword qq,command0,#0            	' get the new rate
38f68     4E C4 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
38f6c     E2 C4 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
38f70     00 C4 0D F2 |             cmp     qq,#0 wz                         
38f74     4E 24 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
38f78     4E 22 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
38f7c                 |             
38f7c     1E E4 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
38f80     E6 CA 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
38f84     00 CA 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
38f88                 | 
38f88     EC 06 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
38f8c     EC 08 3A F9 |             getword oldrs,sample0,#1
38f90     F0 FC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
38f94     F0 FA 31 F9 |     	    getword avol0,volpan0,#0
38f98     F1 F8 39 F9 |             getword askip0,freqskip0,#1    	    
38f9c     F1 F6 31 F9 |             getword afreq0,freqskip0,#0
38fa0                 | 
38fa0     D8 00 96 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
38fa4     00 04 02 F6 |             mov     dt0,0-0    
38fa8     D7 04 82 F1 |             sub     dt0,time0
38fac                 |             
38fac     D8 00 8E F9 |             altd    cn, #time1                ' add channel period to channel time
38fb0     FB 00 00 F1 |             add     0-0,afreq0  	
38fb4                 |             
38fb4                 | '---- envelopes
38fb4                 |             
38fb4     00 E8 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
38fb8     20 00 00 AF 
38fbc     00 48 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
38fc0     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
38fc4                 | 
38fc4     FB 48 02 F6 |             mov     envs1,afreq0
38fc8     F5 48 02 FA |             mul     envs1,envspd0
38fcc     24 E7 01 F1 |             add     envph0,envs1 
38fd0                 | 
38fd0     F3 44 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
38fd4     06 44 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
38fd8     22 47 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
38fdc     10 44 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
38fe0     F6 44 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
38fe4     F6 44 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
38fe8     00 46 06 36 |     if_ge   mov     envlo,#0
38fec     F6 E6 01 36 |     if_ge   mov     envph0,envlen0
38ff0     16 E6 65 30 |     if_ge   shl     envph0,#22
38ff4                 | 
38ff4     22 49 02 F6 |             mov     envs1,envhi			' get the phase acc
38ff8     01 48 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
38ffc     F4 48 02 F1 |             add     envs1,envptr0		' and add the pointer
39000     24 49 02 FB |             rdlong  envs1,envs1			' then read 2 entries
39004     24 4B 3A F9 |             getword envs2,envs1,#1		' next value
39008     24 49 32 F9 |             getword envs1,envs1,#0		' current value
3900c     23 4B 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
39010     23 47 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
39014     23 49 02 FA |             mul     envs1,envlo
39018     25 49 02 F1 |             add     envs1,envs2
3901c     12 48 46 F0 |             shr     envs1,#18			' normalize it to $4000
39020                 |             
39020     1B DA 0D F4 | p410        testb   sstart0, #27 wz
39024     1B C6 61 AD |     if_z    getrnd  spl
39028     58 00 90 AD |     if_z    jmp     #p406
3902c                 |  
3902c     FC D6 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
39030     EB 42 C2 F8 |             setbyte pointer00,pointer0,#0
39034     08 D6 45 F0 |             shr     pointer0,#8
39038                 |          
39038     1F DA 0D F4 |             testb   sstart0,#31 wz            
3903c     01 D6 65 A0 |     if_z    shl     pointer0,#1        
39040     1C DA 0D F4 |             testb   sstart0,#28 wz            
39044     01 D6 65 A0 |     if_z    shl     pointer0,#1        
39048                 |         
39048     EF D6 19 F2 |             cmp     pointer0,lend0 wcz
3904c     EF D6 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
39050     EE D6 01 31 |     if_ge   add     pointer0,lstart0       
39054                 |             
39054     EB C4 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
39058     ED C4 01 F1 |             add     qq,sstart0            
3905c                 | 
3905c     FF CB 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
39060     E2 C6 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
39064     1C 01 B0 1D |     if_gt   call    #cache_read
39068                 |          
39068     1F DA 0D F4 |             testb   sstart0,#31 wz 
3906c     08 C6 65 50 |     if_nz   shl     spl,#8
39070     08 D6 65 50 |     if_nz   shl     pointer0,#8
39074     07 D6 65 A0 |     if_z    shl     pointer0,#7
39078     1C DA 0D F4 |             testb   sstart0,#28 wz            
3907c     01 D6 45 A0 |     if_z    shr     pointer0,#1    
39080     21 D7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
39084                 | 
39084                 | 
39084     24 C7 31 FA | p406        scas    spl,envs1			' apply envelope
39088     00 C6 01 F6 |             mov     spl,0-0
3908c     FD C6 31 FA |             scas    spl,avol0                 	' apply volume
39090     00 C6 01 F6 |             mov     spl,0-0
39094                 | 
39094     FE C6 31 FA |             scas    spl,apan0                 	' apply pan
39098     00 0A 02 F6 |             mov     ls0,0-0
3909c     20 00 00 FF 
390a0     00 C4 05 F6 |             mov     qq,##16384
390a4     FE C4 81 F1 |             sub     qq,apan0
390a8     E2 C6 31 FA |             scas    spl,qq
390ac     00 0C 02 F6 |             mov     rs0, 0-0
390b0                 | 
390b0     04 11 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
390b4     06 11 02 F1 |             add     rs,rs0
390b8     03 0F 82 F1 |             sub     ls,oldls
390bc     05 0F 02 F1 |             add     ls,ls0
390c0                 |    
390c0     06 D9 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
390c4     05 D9 21 F9 |             setword sample0,ls0,#0
390c8                 |             
390c8     1E DA 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
390cc     00 D6 05 A6 |     if_z    mov     pointer0, #0  		
390d0     00 E6 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
390d4                 |   '  if_z    mov     sample0,#0
390d4     02 DB 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
390d8     1D DA 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
390dc     04 00 00 AF 
390e0     00 B0 05 A1 |     if_z    add     time1,##2048
390e4     D8 B2 01 A6 |     if_z    mov     time2,time1
390e8     02 DB 65 AC |     if_z    wrlong  sstart0,ptra[2]
390ec                 | 
390ec     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
390f0     00 D7 65 FC |             wrlong  pointer0,ptra
390f4     08 E7 65 FC |             wrlong  envph0,ptra[8]
390f8     E0 F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
390fc                 |                       
390fc     D7 FE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
39100     FF C3 25 A7 |     if_z    decmod  front, #511          
39104                 |          
39104     07 07 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
39108     08 09 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
3910c     0F 06 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
39110     0F 08 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
39114                 | 	    
39114                 | 		    
39114     03 09 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
39118     0A 13 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
3911c     04 15 02 F6 |             mov     newsample, oldrs       
39120                 | 
39120     D7 FE 01 F6 |             mov     oldt0,time0              ' update global time
39124     02 AF 01 F1 |             add     time0,dt0    
39128                 |                                      
39128     00 04 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
3912c     D8 FD 9F AD |     if_z    jmp     #loop1
39130     02 C5 01 F6 |             mov     qq,dt0
39134                 | 
39134                 |     
39134                 |             
39134     01 4E 36 F0 | p301        rol     dropper,#1 wc
39138     40 00 90 3D |     if_nc   jmp     #p399
3913c     FF F3 97 F9 | p398        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
39140     00 C2 9D F2 |             cmpr    front, #0-0 wcz
39144     F4 FF 9F AD |     if_e    jmp     #p398   
39148                 | 		
39148     00 1A 0E F2 | 	    cmp     scbase,#0 wz
3914c     20 00 90 AD |     if_z    jmp     #p302	   
39150                 |   
39150     3F 20 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
39154     0E 1F 02 C6 |     if_c    mov     scptr2,scptr
39158     02 1E 66 C0 |     if_c    shl     scptr2,#2
3915c     0D 1F 02 C1 |     if_c    add     scptr2,scbase     
39160     60 1E 66 FC |             wrlong  scptr2,#$60
39164     0F 13 62 CC |     if_c    wrlong  oldsample,scptr2
39168     01 00 00 CF 
3916c     7F 1C 06 C7 |     if_c    incmod  scptr,##639
39170                 | 			    
39170     E1 12 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
39174     00 00 00 FF 
39178     FF C3 05 F7 |             incmod  front, ##511
3917c     ED C5 6D FB | p399        djnz    qq,#p301
39180                 |             
39180     6C FD 9F FD |             jmp     #loop            'loop
39184                 | 
39184                 | '----------------------------------------------------------------------------------
39184                 | '------------- This is the end of the main loop -----------------------------------
39184                 | '----------------------------------------------------------------------------------
39184                 | 
39184                 | '----------------------------------------------------------------------------------
39184                 | '------------- PSRAM cache ----------- --------------------------------------------
39184                 | '----------------------------------------------------------------------------------
39184                 | 
39184                 | ' There are 8 cache pointers for 8 channels
39184                 | ' if 24 higher bits of address=cache, then get a word from the cache
39184                 | ' else load the cache from PSRAM, update the pointer, then read a sample
39184                 | 
39184                 | 
39184     E2 3E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
39188                 |             
39188     E2 40 02 F6 | 	    mov     addrhi,qq		
3918c     08 40 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
39190     14 01 96 F9 | 	    alts    cn,#cache1            
39194     00 40 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
39198     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
3919c                 | 	
3919c     14 01 8E F9 | p702	    altd    cn,#cache1			' cache miss. 
391a0     20 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
391a4     20 39 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
391a8     08 38 66 F0 | 	    shl     cmd,#8
391ac     0B 38 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
391b0     00 3B 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
391b4     08 3A 66 F0 |             shl     hubaddr,#8                  '
391b8     13 3B 02 F1 |             add     hubaddr,hubptr 
391bc     00 3D 06 F6 |             mov     count,#256                  ' 256 bytes
391c0     28 04 64 FD |             setq    #2                          ' write 3 longs
391c4     E5 38 62 FC |             wrlong  cmd, mailbox                ' run it
391c8     E5 38 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
391cc     FE 39 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
391d0                 |             
391d0                 | 	
391d0     00 C5 01 F6 | p701	    mov     qq,cn			' cache hit
391d4     08 C4 65 F0 | 	    shl     qq,#8			' compute the cache start
391d8     13 C5 01 F1 | 	    add     qq,hubptr
391dc     1F C5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
391e0     E2 C6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
391e4                 |           
391e4                 | 
391e4                 | '--------------------------------------------------------------------------
391e4                 | '------ Interrupt service -------------------------------------------------
391e4                 | '------ Output the sample, get the next one if exists ---------------------
391e4                 | '--------------------------------------------------------------------------
391e4                 | 
391e4     0E CE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
391e8     0F D0 25 FC |             wypin   rsample,#right       '4
391ec     E1 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
391f0     80 D3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
391f4     FF F3 07 57 |     if_ne   incmod  ptrb,#511
391f8     E9 D0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
391fc     E9 CE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
39200                 |     
39200     F5 FF 3B FB |             reti1                        '17/19 
39204                 |           
39204                 | '---------------------------------------------------------------------------
39204                 | '-------- End of interrupt -------------------------------------------------
39204                 | '---------------------------------------------------------------------------    
39204                 | 
39204                 | 
39204                 | '---------------------------------------------------------------------------
39204                 | '------- Variables ---------------------------------------------------------
39204                 | '---------------------------------------------------------------------------
39204                 | 
39204                 | ' constants
39204                 | 
39204     00 00 00 40 | a40000000   long $40000000
39208     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
3920c                 | 
3920c                 | ' Time variables
3920c                 | 
3920c     00 00 00 00 | time0       long 0    ' Global sample computing time
39210     01 00 00 00 | time1       long 1    ' Local channels time
39214     02 00 00 00 | time2       long 2
39218     03 00 00 00 | time3       long 3
3921c     04 00 00 00 | time4       long 4
39220     05 00 00 00 | time5       long 5
39224     06 00 00 00 | time6       long 6
39228     07 00 00 00 | time7       long 7
3922c     08 00 00 00 | time8       long 8
39230                 | 
39230     00 00 00 00 | channeladd long 0
39234                 | 
39234     00 00 00 00 | front       long 0
39238                 | 
39238                 | ' temporary variables 
39238     00 00 00 00 | qq          long 0
3923c     00 00 00 00 | spl         long 0
39240     00 00 00 00 | zero        long 0
39244     00 00 00 00 | mailbox     long 0
39248     00 00 00 00 | mailbox2 long 0
3924c                 | 
3924c                 | ' Interrupt ISR variables
3924c                 | 
3924c     00 00 00 00 | lsample     long 0
39250     00 00 00 00 | rsample     long 0
39254     00 00 00 00 | lsnext      long 0
39258     00 00 00 00 | rsnext      long 0 
3925c                 | 
3925c                 | ' channel parameter block
3925c                 | 
3925c     00 00 00 00 | pointer0    long 0     
39260     00 00 00 00 | sample0     long 0
39264     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
39268     00 00 00 00 | lstart0     long 0
3926c     00 00 00 00 | lend0       long 0
39270     00 00 00 00 | volpan0     long 0
39274     00 00 00 00 | freqskip0   long 0
39278     00 00 00 00 | command0    long 0
3927c     00 00 00 00 | envph0	    long 0
39280     00 00 00 00 | envptr0	    long 0
39284     00 00 00 00 | envspd0	    long 0
39288     00 00 00 00 | envlen0	    long 0
3928c     00 00 00 00 | res5	    long 0
39290     00 00 00 00 | res6	    long 0
39294     00 00 00 00 | res7	    long 0
39298     00 00 00 00 | res8	    long 0
3929c                 | 
3929c     00 00 00 00 | afreq0      long 0
392a0     00 00 00 00 | askip0      long 0
392a4     00 00 00 00 | avol0       long 0
392a8     00 00 00 00 | apan0       long 0
392ac                 | 
392ac     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
392b0     00 00 00 00 | cn          long 0
392b4     00 00 00 00 | ct          long 0
392b8     00 00 00 00 | dt0         long 0
392bc                 | 
392bc                 | ' Samples
392bc     00 00 00 00 | oldls       long 0
392c0     00 00 00 00 | oldrs       long 0
392c4                 | 
392c4     00 00 00 00 | ls0         long 0
392c8     00 00 00 00 | rs0         long 0
392cc                 | 
392cc     00 00 00 00 | ls          long 0    
392d0     00 00 00 00 | rs          long 0
392d4                 | 
392d4     00 00 00 00 | oldsample   long 0
392d8     00 00 00 00 | newsample   long 0
392dc                 | 
392dc     00 00 00 00 | nrsample    long 0
392e0     00 00 00 00 | nlsample    long 0
392e4                 | 
392e4     00 00 00 00 | scbase long 0
392e8     00 00 00 00 | scptr long 0
392ec     00 00 00 00 | scptr2 long 0
392f0     00 00 00 00 | scope long 0
392f4                 | 
392f4     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
392f8     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
392fc                 | 
392fc     00 18 07 00 | hubptr      long $71800
39300     00 00 00 00 | cache1      long 0
39304     00 00 00 00 | cache2      long 0
39308     00 00 00 00 | cache3      long 0
3930c     00 00 00 00 | cache4      long 0
39310     00 00 00 00 | cache5      long 0
39314     00 00 00 00 | cache6      long 0
39318     00 00 00 00 | cache7      long 0
3931c     00 00 00 00 | cache8      long 0
39320                 | 
39320                 | 
39320     00 00 00 00 | cmd         long 0
39324     00 00 00 00 | hubaddr     long 0
39328     00 01 00 00 | count       long 256
3932c     00 00 00 00 | addrlo long 0
39330     00 00 00 00 | addrhi long 0
39334     00 00 00 00 | pointer00 long 0
39338     00 00 00 00 | envhi long 0
3933c     00 00 00 00 | envlo long 0
39340     00 00 00 00 | envs1 long 0
39344     00 00 00 00 | envs2 long 0
39348     00 00 00 00 | noise0 long 0
3934c     92 92 92 92 | dropper long %10010010_10010010_10010010_10010010
39350     00 00 00 00 
39354     00 00 00 00 | null  			long 	0,0           ' for channel reset
39358                 | 	alignl
39358                 | __system__dat_
39358     00 00 00 00 
3935c     00 00 00 00 | 	byte	$00[8]
39360     03 00 00 00 
39364     00 00 00 00 
39368     00 00 00 00 
3936c     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39370     00 00 00 00 
      ...             
395fc     00 00 00 00 
39600     00 00 00 00 | 	byte	$00[660]
39604     00 00 00 09 | 	long	(144 {__system____root_opendir})<<20
39608     00 00 10 09 | 	long	(145 {__system____root_closedir})<<20
3960c     00 00 20 09 | 	long	(146 {__system____root_readdir})<<20
39610     00 00 30 09 | 	long	(147 {__system____root_stat})<<20
39614     00 00 00 00 
39618     00 00 00 00 
3961c     00 00 00 00 
39620     00 00 00 00 
39624     00 00 00 00 
39628     00 00 00 00 
3962c     00 00 00 00 | 	byte	$00[28]
39630     98 96 03 00 | 	long	@@@__system__dat_ + 832
39634     9B 96 03 00 | 	long	@@@__system__dat_ + 835
39638     BC 96 03 00 | 	long	@@@__system__dat_ + 868
3963c     D5 96 03 00 | 	long	@@@__system__dat_ + 893
39640     F0 96 03 00 | 	long	@@@__system__dat_ + 920
39644     0A 97 03 00 | 	long	@@@__system__dat_ + 946
39648     1A 97 03 00 | 	long	@@@__system__dat_ + 962
3964c     2C 97 03 00 | 	long	@@@__system__dat_ + 980
39650     3E 97 03 00 | 	long	@@@__system__dat_ + 998
39654     50 97 03 00 | 	long	@@@__system__dat_ + 1016
39658     5C 97 03 00 | 	long	@@@__system__dat_ + 1028
3965c     6D 97 03 00 | 	long	@@@__system__dat_ + 1045
39660     81 97 03 00 | 	long	@@@__system__dat_ + 1065
39664     8B 97 03 00 | 	long	@@@__system__dat_ + 1075
39668     9B 97 03 00 | 	long	@@@__system__dat_ + 1091
3966c     AA 97 03 00 | 	long	@@@__system__dat_ + 1106
39670     C0 97 03 00 | 	long	@@@__system__dat_ + 1128
39674     D9 97 03 00 | 	long	@@@__system__dat_ + 1153
39678     ED 97 03 00 | 	long	@@@__system__dat_ + 1173
3967c     FB 97 03 00 | 	long	@@@__system__dat_ + 1187
39680     0F 98 03 00 | 	long	@@@__system__dat_ + 1207
39684     1B 98 03 00 | 	long	@@@__system__dat_ + 1219
39688     2D 98 03 00 | 	long	@@@__system__dat_ + 1237
3968c     45 98 03 00 | 	long	@@@__system__dat_ + 1261
39690     57 98 03 00 | 	long	@@@__system__dat_ + 1279
39694     6A 98 03 00 | 	long	@@@__system__dat_ + 1298
39698     4F 4B 00 4E 
3969c     75 6D 65 72 
396a0     69 63 61 6C 
396a4     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
396a8     75 6D 65 6E 
396ac     74 20 6F 75 
396b0     74 20 6F 66 
396b4     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
396b8     61 69 6E 00 
396bc     52 65 73 75 
396c0     6C 74 20 6E 
396c4     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
396c8     65 70 72 65 
396cc     73 65 6E 74 
396d0     61 62 6C 65 
396d4     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
396d8     65 67 61 6C 
396dc     20 6D 75 6C 
396e0     74 69 62 79 
396e4     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
396e8     65 71 75 65 
396ec     6E 63 65 00 
396f0     4E 6F 20 73 
396f4     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
396f8     66 69 6C 65 
396fc     20 6F 72 20 
39700     64 69 72 65 
39704     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
39708     79 00 42 61 
3970c     64 20 66 69 
39710     6C 65 20 6E 
39714     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
39718     72 00 50 65 
3971c     72 6D 69 73 
39720     73 69 6F 6E 
39724     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
39728     69 65 64 00 
3972c     4E 6F 74 20 
39730     65 6E 6F 75 
39734     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
39738     65 6D 6F 72 
3973c     79 00 54 65 
39740     6D 70 6F 72 
39744     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
39748     66 61 69 6C 
3974c     75 72 65 00 
39750     46 69 6C 65 
39754     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
39758     73 74 73 00 
3975c     49 6E 76 61 
39760     6C 69 64 20 
39764     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
39768     6D 65 6E 74 
3976c     00 54 6F 6F 
39770     20 6D 61 6E 
39774     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
39778     65 6E 20 66 
3977c     69 6C 65 73 
39780     00 49 2F 4F 
39784     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
39788     6F 72 00 4E 
3978c     6F 74 20 61 
39790     20 64 69 72 
39794     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
39798     72 79 00 49 
3979c     73 20 61 20 
397a0     64 69 72 65 
397a4     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
397a8     79 00 52 65 
397ac     61 64 20 6F 
397b0     6E 6C 79 20 
397b4     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
397b8     20 73 79 73 
397bc     74 65 6D 00 
397c0     46 75 6E 63 
397c4     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
397c8     20 6E 6F 74 
397cc     20 69 6D 70 
397d0     6C 65 6D 65 
397d4     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
397d8     00 44 69 72 
397dc     65 63 74 6F 
397e0     72 79 20 6E 
397e4     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
397e8     6D 70 74 79 
397ec     00 4E 61 6D 
397f0     65 20 74 6F 
397f4     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
397f8     6E 67 00 44 
397fc     65 76 69 63 
39800     65 20 6E 6F 
39804     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
39808     65 6B 61 62 
3980c     6C 65 00 42 
39810     61 64 20 61 
39814     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
39818     73 73 00 42 
3981c     72 6F 6B 65 
39820     6E 20 63 6F 
39824     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
39828     74 69 6F 6E 
3982c     00 44 65 76 
39830     69 63 65 20 
39834     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
39838     65 73 6F 75 
3983c     72 63 65 20 
39840     62 75 73 79 
39844     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
39848     73 73 20 64 
3984c     65 76 69 63 
39850     65 20 6C 69 
39854     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
39858     6F 20 73 70 
3985c     61 63 65 20 
39860     6F 6E 20 64 
39864     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
39868     65 00 55 6E 
3986c     6B 6E 6F 77 
39870     6E 20 65 72 
39874     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
39878     00 00 00 00 
3987c     00 00 00 00 | 	byte	$00[8]
39880     05 00 00 00 
39884     00 00 00 00 
39888     00 00 00 00 
3988c     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39890     00 00 00 00 | 	byte	$00, $00, $00, $00
39894     00 00 80 0A | 	long	(168 {__system___tx})<<20
39898     00 00 90 0A | 	long	(169 {__system___rx})<<20
3989c     00 00 00 00 | 	byte	$00, $00, $00, $00
398a0     00 00 A0 0A | 	long	(170 {__system___rxtxioctl_0664})<<20
398a4     00 00 B0 0A | 	long	(171 {__system____dummy_flush_0665})<<20
398a8     00 00 00 00 
398ac     00 00 00 00 | 	byte	$00[8]
398b0     01 00 00 00 
398b4     06 00 00 00 
398b8     00 00 00 00 
398bc     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
398c0     00 00 00 00 
398c4     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
398c8     00 00 80 0A | 	long	(168 {__system___tx})<<20
398cc     00 00 90 0A | 	long	(169 {__system___rx})<<20
398d0     00 00 00 00 | 	byte	$00, $00, $00, $00
398d4     00 00 A0 0A | 	long	(170 {__system___rxtxioctl_0664})<<20
398d8     00 00 B0 0A | 	long	(171 {__system____dummy_flush_0665})<<20
398dc     00 00 00 00 
398e0     00 00 00 00 | 	byte	$00[8]
398e4     01 00 00 00 
398e8     06 00 00 00 
398ec     00 00 00 00 
398f0     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
398f4     00 00 00 00 
398f8     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
398fc     00 00 80 0A | 	long	(168 {__system___tx})<<20
39900     00 00 90 0A | 	long	(169 {__system___rx})<<20
39904     00 00 00 00 | 	byte	$00, $00, $00, $00
39908     00 00 A0 0A | 	long	(170 {__system___rxtxioctl_0664})<<20
3990c     00 00 B0 0A | 	long	(171 {__system____dummy_flush_0665})<<20
39910     00 00 00 00 
      ...             
39a80     00 00 00 00 
39a84     00 00 00 00 | 	byte	$00[376]
39a88     8C 9A 03 00 | 	long	@@@__system__dat_ + 1844
39a8c     00 00 00 00 
39a90     00 00 00 00 
39a94     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39a98                 | 	alignl
39a98                 | _fatfs_cc_dat_
39a98     C7 00 FC 00 
39a9c     E9 00 E2 00 
39aa0     E4 00 E0 00 
39aa4     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
39aa8     EA 00 EB 00 
39aac     E8 00 EF 00 
39ab0     EE 00 EC 00 
39ab4     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
39ab8     C9 00 E6 00 
39abc     C6 00 F4 00 
39ac0     F6 00 F2 00 
39ac4     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
39ac8     FF 00 D6 00 
39acc     DC 00 F8 00 
39ad0     A3 00 D8 00 
39ad4     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
39ad8     E1 00 ED 00 
39adc     F3 00 FA 00 
39ae0     F1 00 D1 00 
39ae4     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
39ae8     BF 00 AE 00 
39aec     AC 00 BD 00 
39af0     BC 00 A1 00 
39af4     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
39af8     91 25 92 25 
39afc     93 25 02 25 
39b00     24 25 C1 00 
39b04     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
39b08     A9 00 63 25 
39b0c     51 25 57 25 
39b10     5D 25 A2 00 
39b14     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
39b18     14 25 34 25 
39b1c     2C 25 1C 25 
39b20     00 25 3C 25 
39b24     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
39b28     5A 25 54 25 
39b2c     69 25 66 25 
39b30     60 25 50 25 
39b34     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
39b38     F0 00 D0 00 
39b3c     CA 00 CB 00 
39b40     C8 00 31 01 
39b44     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
39b48     CF 00 18 25 
39b4c     0C 25 88 25 
39b50     84 25 A6 00 
39b54     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
39b58     D3 00 DF 00 
39b5c     D4 00 D2 00 
39b60     F5 00 D5 00 
39b64     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
39b68     DE 00 DA 00 
39b6c     DB 00 D9 00 
39b70     FD 00 DD 00 
39b74     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
39b78     AD 00 B1 00 
39b7c     17 20 BE 00 
39b80     B6 00 A7 00 
39b84     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
39b88     B0 00 A8 00 
39b8c     B7 00 B9 00 
39b90     B3 00 B2 00 
39b94     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
39b98     61 00 1A 03 
39b9c     E0 00 17 03 
39ba0     F8 00 07 03 
39ba4     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
39ba8     78 01 00 01 
39bac     30 01 32 01 
39bb0     06 01 39 01 
39bb4     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
39bb8     2E 01 79 01 
39bbc     06 01 80 01 
39bc0     4D 00 43 02 
39bc4     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
39bc8     82 01 84 01 
39bcc     84 01 86 01 
39bd0     87 01 87 01 
39bd4     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
39bd8     8B 01 8B 01 
39bdc     8D 01 8E 01 
39be0     8F 01 90 01 
39be4     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
39be8     93 01 94 01 
39bec     F6 01 96 01 
39bf0     97 01 98 01 
39bf4     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
39bf8     9B 01 9C 01 
39bfc     9D 01 20 02 
39c00     9F 01 A0 01 
39c04     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
39c08     A2 01 A4 01 
39c0c     A4 01 A6 01 
39c10     A7 01 A7 01 
39c14     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
39c18     AB 01 AC 01 
39c1c     AC 01 AE 01 
39c20     AF 01 AF 01 
39c24     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
39c28     B3 01 B3 01 
39c2c     B5 01 B5 01 
39c30     B7 01 B8 01 
39c34     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
39c38     BB 01 BC 01 
39c3c     BC 01 BE 01 
39c40     F7 01 C0 01 
39c44     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
39c48     C3 01 C4 01 
39c4c     C5 01 C4 01 
39c50     C7 01 C8 01 
39c54     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
39c58     CB 01 CA 01 
39c5c     CD 01 10 01 
39c60     DD 01 01 00 
39c64     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
39c68     12 01 F3 01 
39c6c     03 00 F1 01 
39c70     F4 01 F4 01 
39c74     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
39c78     22 02 12 01 
39c7c     3A 02 09 00 
39c80     65 2C 3B 02 
39c84     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
39c88     66 2C 3F 02 
39c8c     40 02 41 02 
39c90     41 02 46 02 
39c94     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
39c98     40 00 81 01 
39c9c     86 01 55 02 
39ca0     89 01 8A 01 
39ca4     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
39ca8     5A 02 90 01 
39cac     5C 02 5D 02 
39cb0     5E 02 5F 02 
39cb4     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
39cb8     62 02 94 01 
39cbc     64 02 65 02 
39cc0     66 02 67 02 
39cc4     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
39cc8     6A 02 62 2C 
39ccc     6C 02 6D 02 
39cd0     6E 02 9C 01 
39cd4     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
39cd8     9D 01 73 02 
39cdc     74 02 9F 01 
39ce0     76 02 77 02 
39ce4     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
39ce8     7A 02 7B 02 
39cec     7C 02 64 2C 
39cf0     7E 02 7F 02 
39cf4     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
39cf8     82 02 A9 01 
39cfc     84 02 85 02 
39d00     86 02 87 02 
39d04     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
39d08     B1 01 B2 01 
39d0c     45 02 8D 02 
39d10     8E 02 8F 02 
39d14     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
39d18     B7 01 7B 03 
39d1c     03 00 FD 03 
39d20     FE 03 FF 03 
39d24     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
39d28     86 03 88 03 
39d2c     89 03 8A 03 
39d30     B1 03 11 03 
39d34     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
39d38     A3 03 A3 03 
39d3c     C4 03 08 03 
39d40     CC 03 03 00 
39d44     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
39d48     8F 03 D8 03 
39d4c     18 01 F2 03 
39d50     0A 00 F9 03 
39d54     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
39d58     F5 03 F6 03 
39d5c     F7 03 F7 03 
39d60     F9 03 FA 03 
39d64     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
39d68     20 03 50 04 
39d6c     10 07 60 04 
39d70     22 01 8A 04 
39d74     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
39d78     0E 01 CF 04 
39d7c     01 00 C0 04 
39d80     D0 04 44 01 
39d84     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
39d88     00 00 7D 1D 
39d8c     01 00 63 2C 
39d90     00 1E 96 01 
39d94     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
39d98     00 1F 08 06 
39d9c     10 1F 06 06 
39da0     20 1F 08 06 
39da4     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
39da8     40 1F 06 06 
39dac     51 1F 07 00 
39db0     59 1F 52 1F 
39db4     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
39db8     5D 1F 56 1F 
39dbc     5F 1F 60 1F 
39dc0     08 06 70 1F 
39dc4     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
39dc8     BB 1F C8 1F 
39dcc     C9 1F CA 1F 
39dd0     CB 1F DA 1F 
39dd4     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
39dd8     F9 1F EA 1F 
39ddc     EB 1F FA 1F 
39de0     FB 1F 80 1F 
39de4     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
39de8     08 06 A0 1F 
39dec     08 06 B0 1F 
39df0     04 00 B8 1F 
39df4     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
39df8     BC 1F CC 1F 
39dfc     01 00 C3 1F 
39e00     D0 1F 02 06 
39e04     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
39e08     E5 1F 01 00 
39e0c     EC 1F F3 1F 
39e10     01 00 FC 1F 
39e14     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
39e18     32 21 70 21 
39e1c     10 02 84 21 
39e20     01 00 83 21 
39e24     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
39e28     30 2C 2F 04 
39e2c     60 2C 02 01 
39e30     67 2C 06 01 
39e34     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
39e38     80 2C 64 01 
39e3c     00 2D 26 08 
39e40     41 FF 1A 03 
39e44     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
39e48     05 07 09 0E 
39e4c     10 12 14 16 
39e50     18 1C 1E 43 
39e54     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
39e58     41 41 43 45 
39e5c     45 45 49 49 
39e60     49 41 41 45 
39e64     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
39e68     4F 55 55 59 
39e6c     4F 55 4F 9C 
39e70     4F 9E 9F 41 
39e74     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
39e78     A5 A6 A7 A8 
39e7c     A9 AA AB AC 
39e80     AD AE AF B0 
39e84     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
39e88     41 41 41 B8 
39e8c     B9 BA BB BC 
39e90     BD BE BF C0 
39e94     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
39e98     C5 41 41 C8 
39e9c     C9 CA CB CC 
39ea0     CD CE CF D1 
39ea4     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
39ea8     49 49 49 49 
39eac     D9 DA DB DC 
39eb0     DD 49 DF 4F 
39eb4     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
39eb8     4F E6 E8 E8 
39ebc     55 55 55 59 
39ec0     59 EE EF F0 
39ec4     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
39ec8     F5 F6 F7 F8 
39ecc     F9 FA FB FC 
39ed0     FD FE FF 00 
39ed4     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
39ed8     00 00 00 00 | 	byte	$00, $00, $00, $00
39edc     00 00 70 09 | 	long	(151 {_fatfs_cc_v_close})<<20
39ee0     00 00 80 09 | 	long	(152 {_fatfs_cc_v_read})<<20
39ee4     00 00 90 09 | 	long	(153 {_fatfs_cc_v_write})<<20
39ee8     00 00 A0 09 | 	long	(154 {_fatfs_cc_v_lseek})<<20
39eec     00 00 B0 09 | 	long	(155 {_fatfs_cc_v_ioctl})<<20
39ef0     00 00 C0 0A | 	long	(172 {_fatfs_cc_v_flush})<<20
39ef4     00 00 00 00 
39ef8     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
39efc     00 00 C0 09 | 	long	(156 {_fatfs_cc_v_open})<<20
39f00     00 00 D0 09 | 	long	(157 {_fatfs_cc_v_creat})<<20
39f04     00 00 E0 09 | 	long	(158 {_fatfs_cc_v_opendir})<<20
39f08     00 00 F0 09 | 	long	(159 {_fatfs_cc_v_closedir})<<20
39f0c     00 00 00 0A | 	long	(160 {_fatfs_cc_v_readdir})<<20
39f10     00 00 10 0A | 	long	(161 {_fatfs_cc_v_stat})<<20
39f14     00 00 20 0A | 	long	(162 {_fatfs_cc_v_mkdir})<<20
39f18     00 00 30 0A | 	long	(163 {_fatfs_cc_v_rmdir})<<20
39f1c     00 00 40 0A | 	long	(164 {_fatfs_cc_v_remove})<<20
39f20     00 00 50 0A | 	long	(165 {_fatfs_cc_v_rename})<<20
39f24     00 00 60 0A | 	long	(166 {_fatfs_cc_v_init})<<20
39f28     00 00 70 0A | 	long	(167 {_fatfs_cc_v_deinit})<<20
39f2c     FF FF FF FF 
39f30     1F 00 00 00 
39f34     1C 00 00 00 
39f38     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
39f3c     1E 00 00 00 
39f40     1F 00 00 00 
39f44     1E 00 00 00 
39f48     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
39f4c     1F 00 00 00 
39f50     1E 00 00 00 
39f54     1F 00 00 00 
39f58     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
39f5c     1F 00 00 00 
39f60     00 00 00 00 
39f64     1F 00 00 00 
39f68     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
39f6c     5A 00 00 00 
39f70     78 00 00 00 
39f74     97 00 00 00 
39f78     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
39f7c     D4 00 00 00 
39f80     F3 00 00 00 
39f84     11 01 00 00 
39f88     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
39f8c     4E 01 00 00 
39f90     6D 01 00 00 
39f94     FF FF FF FF 
39f98     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
39f9c     00 00 00 00 
      ...             
39fb4     00 00 00 00 
39fb8     00 00 00 00 | 	byte	$00[32]
39fbc     DA 9F 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
39fc0     DE 9F 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
39fc4     00 00 00 00 
39fc8     00 00 00 00 
39fcc     00 00 00 00 
39fd0     00 00 00 00 
39fd4     00 00       | 	byte	$00[18]
39fd6     3F 3F 3F 00 
39fda     55 43 54 00 
39fde     55 43 54 00 
39fe2     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
39fe6     00 00 00 00 
39fea     00 00 00    | 	byte	$00[7]
39fed     CA 9A 3B 00 
39ff1     00 00 00 01 
39ff5     01 01 01 01 
39ff9     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
39ffd     91 11 11 11 
3a001     11 01 01 01 
3a005     01 01 01 01 
3a009     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
3a00d     01 01 01 01 
3a011     01 01 01    | 	byte	$01[7]
3a014     90 20 20 20 
3a018     20 20 20 20 
3a01c     20 20 20 20 
3a020     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
3a024     42 42 42 42 
3a028     42 42 42 42 
3a02c     42 42       | 	byte	$42[10]
3a02e     20 20 20 20 
3a032     20 20 20    | 	byte	$20[7]
3a035     44 44 44 44 
3a039     44 44       | 	byte	$44[6]
3a03b     04 04 04 04 
3a03f     04 04 04 04 
3a043     04 04 04 04 
3a047     04 04 04 04 
3a04b     04 04 04 04 | 	byte	$04[20]
3a04f     20 20 20 20 
3a053     20 20       | 	byte	$20[6]
3a055     48 48 48 48 
3a059     48 48       | 	byte	$48[6]
3a05b     08 08 08 08 
3a05f     08 08 08 08 
3a063     08 08 08 08 
3a067     08 08 08 08 
3a06b     08 08 08 08 | 	byte	$08[20]
3a06f     20 20 20 20 
3a073     01 00 00 00 
3a077     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
3a078                 | __methodtable__
3a078     F8 93 01 00 | 	long	@_do_no_command
3a07c     7C 09 01 00 | 	long	@_do_plus
3a080     68 0E 01 00 | 	long	@_do_minus
3a084     30 13 01 00 | 	long	@_do_or
3a088     48 14 01 00 | 	long	@_do_mul
3a08c     D4 19 01 00 | 	long	@_do_fdiv
3a090     18 12 01 00 | 	long	@_do_and
3a094     B4 17 01 00 | 	long	@_do_div
3a098     9C 1B 01 00 | 	long	@_do_mod
3a09c     BC 1D 01 00 | 	long	@_do_shl
3a0a0     D4 1E 01 00 | 	long	@_do_shr
3a0a4     EC 1F 01 00 | 	long	@_do_power
3a0a8     FC FC 00 00 | 	long	@_do_getvar
3a0ac     B4 AC 00 00 | 	long	@_do_push
3a0b0     FC F6 00 00 | 	long	@_do_assign
3a0b4     88 65 01 00 | 	long	@_do_cls
3a0b8     FC EE 00 00 | 	long	@_do_new
3a0bc     00 66 01 00 | 	long	@_do_plot
3a0c0     D0 66 01 00 | 	long	@_do_draw
3a0c4     44 70 01 00 | 	long	@_do_print
3a0c8     3C 69 01 00 | 	long	@_do_circle
3a0cc     C4 67 01 00 | 	long	@_do_fcircle
3a0d0     B4 6A 01 00 | 	long	@_do_box
3a0d4     5C 6E 01 00 | 	long	@_do_frame
3a0d8     C8 65 01 00 | 	long	@_do_color
3a0dc     84 88 00 00 | 	long	@_do_for
3a0e0     DC 8B 00 00 | 	long	@_do_next
3a0e4     60 EC 00 00 | 	long	@_do_list
3a0e8     40 C0 00 00 | 	long	@_do_run
3a0ec     B8 F5 00 00 | 	long	@_do_error
3a0f0     28 F1 00 00 | 	long	@_do_fast_goto
3a0f4     18 F2 00 00 | 	long	@_do_find_goto
3a0f8     28 F4 00 00 | 	long	@_do_slow_goto
3a0fc     14 90 01 00 | 	long	@_do_nothing
3a100     F8 B2 00 00 | 	long	@_test_csave
3a104     5C B6 00 00 | 	long	@_do_save
3a108     58 BA 00 00 | 	long	@_do_load
3a10c     F0 7E 01 00 | 	long	@_do_pinwrite
3a110     8C 89 01 00 | 	long	@_do_waitms
3a114     C8 8A 01 00 | 	long	@_do_waitvbl
3a118     68 8E 01 00 | 	long	@_do_if
3a11c     4C 8F 01 00 | 	long	@_do_else
3a120     B4 21 01 00 | 	long	@_do_eq
3a124     2C 30 01 00 | 	long	@_do_ge
3a128     04 35 01 00 | 	long	@_do_le
3a12c     8C 26 01 00 | 	long	@_do_gt
3a130     64 2B 01 00 | 	long	@_do_lt
3a134     DC 39 01 00 | 	long	@_do_ne
3a138     04 40 01 00 | 	long	@_do_rnd
3a13c     18 90 01 00 | 	long	@_do_brun
3a140     E4 92 01 00 | 	long	@_do_beep
3a144     F8 8A 01 00 | 	long	@_do_dir
3a148     0C 75 01 00 | 	long	@_do_paper
3a14c     94 75 01 00 | 	long	@_do_ink
3a150     30 76 01 00 | 	long	@_do_font
3a154     AC 76 01 00 | 	long	@_do_mode
3a158     50 92 01 00 | 	long	@_do_mouse
3a15c     20 65 01 00 | 	long	@_do_gettime
3a160     84 92 01 00 | 	long	@_do_cursor
3a164     B8 92 01 00 | 	long	@_do_click
3a168     AC 62 01 00 | 	long	@_do_mousex
3a16c     F0 62 01 00 | 	long	@_do_mousey
3a170     78 63 01 00 | 	long	@_do_mousek
3a174     34 63 01 00 | 	long	@_do_mousew
3a178     D8 42 01 00 | 	long	@_do_sin
3a17c     7C 58 01 00 | 	long	@_do_stick
3a180     00 5A 01 00 | 	long	@_do_strig
3a184     C0 61 01 00 | 	long	@_do_sprite
3a188     4C 5E 01 00 | 	long	@_do_defsprite
3a18c     84 5B 01 00 | 	long	@_do_getpixel
3a190     D4 8A 01 00 | 	long	@_do_waitclock
3a194     04 94 01 00 | 	long	@_do_negative
3a198     BC 63 01 00 | 	long	@_do_rdpin
3a19c     28 64 01 00 | 	long	@_do_rqpin
3a1a0     9C 64 01 00 | 	long	@_do_pinread
3a1a4     88 81 01 00 | 	long	@_do_wrpin
3a1a8     08 82 01 00 | 	long	@_do_wxpin
3a1ac     88 82 01 00 | 	long	@_do_wypin
3a1b0     78 7F 01 00 | 	long	@_do_pinfloat
3a1b4     B8 7F 01 00 | 	long	@_do_pinlo
3a1b8     F8 7F 01 00 | 	long	@_do_pinhi
3a1bc     78 80 01 00 | 	long	@_do_pinstart
3a1c0     38 80 01 00 | 	long	@_do_pintoggle
3a1c4     08 83 01 00 | 	long	@_do_position
3a1c8     34 52 01 00 | 	long	@_do_cos
3a1cc     54 53 01 00 | 	long	@_do_tan
3a1d0     78 56 01 00 | 	long	@_do_atn
3a1d4     60 54 01 00 | 	long	@_do_asin
3a1d8     6C 55 01 00 | 	long	@_do_acos
3a1dc     8C 57 01 00 | 	long	@_do_sqr
3a1e0     9C 6C 01 00 | 	long	@_do_fill
3a1e4     74 E3 00 00 | 	long	@_do_defsnd
3a1e8     8C C3 00 00 | 	long	@_do_defenv
3a1ec     70 8F 01 00 | 	long	@_do_rad
3a1f0     98 8F 01 00 | 	long	@_do_deg
3a1f4     C0 8F 01 00 | 	long	@_do_int
3a1f8     20 D0 00 00 | 	long	@_do_play
3a1fc     50 7C 01 00 | 	long	@_do_setdelay
3a200     A8 7B 01 00 | 	long	@_do_setenv
3a204     F8 7C 01 00 | 	long	@_do_setlen
3a208     48 7E 01 00 | 	long	@_do_setpan
3a20c     A0 7D 01 00 | 	long	@_do_setvol
3a210     58 7A 01 00 | 	long	@_do_setwave
3a214     00 7B 01 00 | 	long	@_do_setsustain
3a218     DC E2 00 00 | 	long	@_do_release
3a21c     CC 41 01 00 | 	long	@_do_getenvsustain
3a220     90 83 01 00 | 	long	@_do_poke
3a224     68 84 01 00 | 	long	@_do_dpoke
3a228     40 85 01 00 | 	long	@_do_lpoke
3a22c     18 86 01 00 | 	long	@_do_peek
3a230     C8 86 01 00 | 	long	@_do_dpeek
3a234     74 87 01 00 | 	long	@_do_lpeek
3a238     84 88 01 00 | 	long	@_do_adr
3a23c     20 88 01 00 | 	long	@_do_fre
3a240     88 88 01 00 | 	long	@_do_getnotevalue
3a244     B4 02 01 00 | 	long	@_do_getaddr
3a248     A4 06 01 00 | 	long	@_do_inkey
3a24c     B4 94 01 00 | 	long	@_do_abs
3a250     74 4F 01 00 | 	long	@_do_hex
3a254     D4 50 01 00 | 	long	@_do_bin
3a258     70 4C 01 00 | 	long	@_do_val
3a25c     74 4B 01 00 | 	long	@_do_chr
3a260     B0 48 01 00 | 	long	@_do_asc
3a264     2C 47 01 00 | 	long	@_do_left
3a268     A8 45 01 00 | 	long	@_do_right
3a26c     E4 43 01 00 | 	long	@_do_mid
3a270     08 4A 01 00 | 	long	@_do_len
3a274     6C 87 00 00 | 	long	@_do_gosub
3a278     F8 8A 00 00 | 	long	@_do_return
3a27c     0C C0 00 00 | 	long	@_do_end
3a280     A4 8B 00 00 | 	long	@_do_pop
3a284     D4 5C 01 00 | 	long	@_do_log
3a288     58 DC 00 00 | 	long	@_do_changevol
3a28c     A0 E0 00 00 | 	long	@_do_changewav
3a290     38 DD 00 00 | 	long	@_do_changepan
3a294     48 DE 00 00 | 	long	@_do_changefreq
3a298     CC E1 00 00 | 	long	@_do_shutup
3a29c     28 E2 01 00 | 	long	@_hg010b_spin2_putchar
3a2a0     DC EC 02 00 | 	long	@__struct___bas_wrap_sender_tx
3a2a4     20 ED 02 00 | 	long	@__struct___bas_wrap_sender_rx
3a2a8     68 ED 02 00 | 	long	@__struct___bas_wrap_sender_close
3a2ac     0C EC 02 00 | 	long	@__struct__s_vfs_file_t_putchar
3a2b0     7C EC 02 00 | 	long	@__struct__s_vfs_file_t_getchar
3a2b4     C4 EB 02 00 | 	long	@___strs_cl_pfunc
3a2b8     20 4B 02 00 | 	long	@__system____root_opendir
3a2bc     BC 4B 02 00 | 	long	@__system____root_closedir
3a2c0     38 4B 02 00 | 	long	@__system____root_readdir
3a2c4     C4 4B 02 00 | 	long	@__system____root_stat
3a2c8     4C 44 02 00 | 	long	@__system____default_putc
3a2cc     D0 43 02 00 | 	long	@__system____default_getc
3a2d0     F4 44 02 00 | 	long	@__system____default_flush
3a2d4     C8 D6 02 00 | 	long	@_fatfs_cc_v_close
3a2d8     E4 DA 02 00 | 	long	@_fatfs_cc_v_read
3a2dc     F8 DB 02 00 | 	long	@_fatfs_cc_v_write
3a2e0     D8 DC 02 00 | 	long	@_fatfs_cc_v_lseek
3a2e4     60 DD 02 00 | 	long	@_fatfs_cc_v_ioctl
3a2e8     B4 DD 02 00 | 	long	@_fatfs_cc_v_open
3a2ec     2C D6 02 00 | 	long	@_fatfs_cc_v_creat
3a2f0     0C D7 02 00 | 	long	@_fatfs_cc_v_opendir
3a2f4     80 D7 02 00 | 	long	@_fatfs_cc_v_closedir
3a2f8     C0 D7 02 00 | 	long	@_fatfs_cc_v_readdir
3a2fc     F4 D8 02 00 | 	long	@_fatfs_cc_v_stat
3a300     74 DD 02 00 | 	long	@_fatfs_cc_v_mkdir
3a304     94 DD 02 00 | 	long	@_fatfs_cc_v_rmdir
3a308     84 DD 02 00 | 	long	@_fatfs_cc_v_remove
3a30c     A4 DD 02 00 | 	long	@_fatfs_cc_v_rename
3a310     C4 DE 02 00 | 	long	@_fatfs_cc_v_init
3a314     CC DE 02 00 | 	long	@_fatfs_cc_v_deinit
3a318     F4 F8 01 00 | 	long	@__system___tx
3a31c     34 F9 01 00 | 	long	@__system___rx
3a320     30 57 02 00 | 	long	@__system___rxtxioctl_0664
3a324     88 57 02 00 | 	long	@__system____dummy_flush_0665
3a328     94 DE 02 00 | 	long	@_fatfs_cc_v_flush
3a32c                 | __heap_base
3a32c     00 00 00 00 
      ...             
6912c     00 00 00 00 
69130     00 00 00 00 | 	long	0[48002]
69134                 | objmem
69134     00 00 00 00 
      ...             
74598     00 00 00 00 
7459c     00 00 00 00 | 	long	0[11547]
745a0                 | stackspace
745a0     00 00 00 00 | 	long	0[1]
745a4 100             | 	org	COG_BSS_START
745a4 100             | _var01
745a4 100             | 	res	1
745a4 101             | _var02
745a4 101             | 	res	1
745a4 102             | _var03
745a4 102             | 	res	1
745a4 103             | _var04
745a4 103             | 	res	1
745a4 104             | _var05
745a4 104             | 	res	1
745a4 105             | _var06
745a4 105             | 	res	1
745a4 106             | _var07
745a4 106             | 	res	1
745a4 107             | _var08
745a4 107             | 	res	1
745a4 108             | _var09
745a4 108             | 	res	1
745a4 109             | arg01
745a4 109             | 	res	1
745a4 10a             | arg02
745a4 10a             | 	res	1
745a4 10b             | arg03
745a4 10b             | 	res	1
745a4 10c             | arg04
745a4 10c             | 	res	1
745a4 10d             | arg05
745a4 10d             | 	res	1
745a4 10e             | arg06
745a4 10e             | 	res	1
745a4 10f             | local01
745a4 10f             | 	res	1
745a4 110             | local02
745a4 110             | 	res	1
745a4 111             | local03
745a4 111             | 	res	1
745a4 112             | local04
745a4 112             | 	res	1
745a4 113             | local05
745a4 113             | 	res	1
745a4 114             | local06
745a4 114             | 	res	1
745a4 115             | local07
745a4 115             | 	res	1
745a4 116             | local08
745a4 116             | 	res	1
745a4 117             | local09
745a4 117             | 	res	1
745a4 118             | local10
745a4 118             | 	res	1
745a4 119             | local11
745a4 119             | 	res	1
745a4 11a             | local12
745a4 11a             | 	res	1
745a4 11b             | local13
745a4 11b             | 	res	1
745a4 11c             | local14
745a4 11c             | 	res	1
745a4 11d             | local15
745a4 11d             | 	res	1
745a4 11e             | local16
745a4 11e             | 	res	1
745a4 11f             | local17
745a4 11f             | 	res	1
745a4 120             | local18
745a4 120             | 	res	1
745a4 121             | local19
745a4 121             | 	res	1
745a4 122             | local20
745a4 122             | 	res	1
745a4 123             | local21
745a4 123             | 	res	1
745a4 124             | local22
745a4 124             | 	res	1
745a4 125             | local23
745a4 125             | 	res	1
745a4 126             | local24
745a4 126             | 	res	1
745a4 127             | local25
745a4 127             | 	res	1
745a4 128             | local26
745a4 128             | 	res	1
745a4 129             | local27
745a4 129             | 	res	1
745a4 12a             | local28
745a4 12a             | 	res	1
745a4 12b             | local29
745a4 12b             | 	res	1
745a4 12c             | local30
745a4 12c             | 	res	1
745a4 12d             | local31
745a4 12d             | 	res	1
745a4 12e             | local32
745a4 12e             | 	res	1
745a4 12f             | local33
745a4 12f             | 	res	1
745a4 130             | local34
745a4 130             | 	res	1
745a4 131             | local35
745a4 131             | 	res	1
745a4 132             | muldiva_
745a4 132             | 	res	1
745a4 133             | muldivb_
745a4 133             | 	res	1
745a4 134             | 	fit	480
745a4 134             | 
