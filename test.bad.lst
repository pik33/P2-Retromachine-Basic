00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/test.p2asm"
00000                 | con
00000                 | 	_clkfreq = 160000000
00000                 | 	_clkmode = 16779259
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 160000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $10007fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 94 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 C9 F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 03 80 80 FF 
00420 007 00 F0 67 FD | 	hubset	##16779256
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 03 80 00 FF 
00430 00b FB ED 07 F6 | 	mov	pa, ##16779259
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e B4 C4 84 FF 
00440 00f 14 00 6C FC | 	wrlong	##160000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 34 07 A0 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 A0 61 FD | 	cogid	arg01
00614 084 03 A0 61 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 8F 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 95 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 A1 05 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D 94 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 A4 55 F0 |         shr	arg03, #1 wc
00668 099 D0 A2 41 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 A0 05 C1 |  if_c   add	arg01, #1
00670 09b 00 A2 FD F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 A4 55 F0 |         shr	arg03, #1 wc
00678 09d D0 A2 51 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 A0 05 C1 |  if_c   add	arg01, #2
00680 09f D1 A2 29 F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 D0 00 88 FC |         wrfast	#0,arg01
00688 0a1 00 A4 0D F2 |         cmp	arg03, #0 wz
0068c 0a2 D2 02 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 A2 61 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 AB 65 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F AB 05 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba E5 CA 59 F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C 8C 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc E4 C8 51 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd E5 C8 11 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 8C 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 CA 61 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 C8 61 FD |        getqy   muldiva_                       'get remainder
00708 0c1 E4 C8 81 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 8C 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 E5 CA 81 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | 
00714 0c4             | __methods__
00714 0c4 68 16 00 00 | 	long	@__methodtable__
00718 0c5             | itmp1_
00718 0c5 00 00 00 00 | 	long	0
0071c 0c6             | itmp2_
0071c 0c6 00 00 00 00 | 	long	0
00720 0c7             | objptr
00720 0c7 98 16 00 00 | 	long	@objmem
00724 0c8             | ptr___system__dat__
00724 0c8 38 14 00 00 | 	long	@__system__dat_
00728 0c9             | ptr_stackspace_
00728 0c9 9C 17 00 00 | 	long	@stackspace
0072c 0ca             | result1
0072c 0ca 00 00 00 00 | 	long	0
00730 0cb             | result2
00730 0cb 01 00 00 00 | 	long	1
00734 0cc             | COG_BSS_START
00734 0cc             | 	fit	480
00734                 | 	orgh
00734                 | hubentry
00734                 | 
00734                 | _program
00734     03 4A 05 F6 | 	mov	COUNT_, #3
00738     A8 00 A0 FD | 	call	#pushregs_
0073c                 | ' 
0073c                 | ' var1:=@var2
0073c     C7 A6 01 F6 | 	mov	arg04, objptr
00740     04 A6 05 F1 | 	add	arg04, #4
00744     C7 A6 61 FC | 	wrlong	arg04, objptr
00748                 | ' word[var2+17*12+4]:=8			 
00748     04 8E 05 F1 | 	add	objptr, #4
0074c     C7 A6 01 FB | 	rdlong	arg04, objptr
00750     D0 A6 05 F1 | 	add	arg04, #208
00754     D3 10 58 FC | 	wrword	#8, arg04
00758                 | ' word[var2+17*12+6]:=16
00758     C7 A6 01 FB | 	rdlong	arg04, objptr
0075c     04 8E 85 F1 | 	sub	objptr, #4
00760     D2 A6 05 F1 | 	add	arg04, #210
00764     D3 20 58 FC | 	wrword	#16, arg04
00768                 | ' 
00768                 | ' test2.start
00768                 | ' print varptr(test2.var2)
00768     00 A0 05 F6 | 	mov	arg01, #0
0076c     40 0A B0 FD | 	call	#__system___getiolock_0087
00770     CA A0 01 F6 | 	mov	arg01, result1
00774     00 94 05 F6 | 	mov	result1, #0
00778     01 94 61 FD | 	cogid	result1
0077c     00 95 05 F1 | 	add	result1, #256
00780                 | LR__0001
00780     D0 AA 09 FB | 	rdlong	local01, arg01 wz
00784     D0 94 61 AC |  if_e	wrlong	result1, arg01
00788     D0 AA 01 AB |  if_e	rdlong	local01, arg01
0078c     D0 AA 01 AB |  if_e	rdlong	local01, arg01
00790     CA AA 09 F2 | 	cmp	local01, result1 wz
00794     E8 FF 9F 5D |  if_ne	jmp	#LR__0001
00798     C7 A0 01 F6 | 	mov	arg01, objptr
0079c     04 A0 05 F1 | 	add	arg01, #4
007a0     D0 AA 01 FB | 	rdlong	local01, arg01
007a4     00 A0 05 F6 | 	mov	arg01, #0
007a8     00 AC 05 F6 | 	mov	local02, #0
007ac     44 0A B0 FD | 	call	#__system___gettxfunc
007b0     CA AE 09 F6 | 	mov	local03, result1 wz
007b4     3A AC 25 54 |  if_ne	bith	local02, #58
007b8     D7 A0 01 56 |  if_ne	mov	arg01, local03
007bc     D6 A2 01 56 |  if_ne	mov	arg02, local02
007c0     D5 A4 01 56 |  if_ne	mov	arg03, local01
007c4     10 A6 05 56 |  if_ne	mov	arg04, #16
007c8     C4 03 B0 5D |  if_ne	call	#__system___fmtnum
007cc     00 A0 05 F6 | 	mov	arg01, #0
007d0     0A AE 05 F6 | 	mov	local03, #10
007d4     1C 0A B0 FD | 	call	#__system___gettxfunc
007d8     CA AC 09 F6 | 	mov	local02, result1 wz
007dc     2C 00 90 AD |  if_e	jmp	#LR__0002
007e0     D6 AA 01 F6 | 	mov	local01, local02
007e4     13 AC 45 F7 | 	zerox	local02, #19
007e8     14 AA 45 F0 | 	shr	local01, #20
007ec     02 AA 65 F0 | 	shl	local01, #2
007f0     C4 AA 01 F1 | 	add	local01, __methods__
007f4     D5 AA 01 FB | 	rdlong	local01, local01
007f8     D7 A0 01 F6 | 	mov	arg01, local03
007fc     C7 AE 01 F6 | 	mov	local03, objptr
00800     D6 8E 01 F6 | 	mov	objptr, local02
00804     2D AA 61 FD | 	call	local01
00808     D7 8E 01 F6 | 	mov	objptr, local03
0080c                 | LR__0002
0080c     00 A0 05 F6 | 	mov	arg01, #0
00810     9C 09 B0 FD | 	call	#__system___getiolock_0087
00814     CA 00 68 FC | 	wrlong	#0, result1
00818     A7 F0 03 F6 | 	mov	ptra, fp
0081c     B2 00 A0 FD | 	call	#popregs_
00820                 | _program_ret
00820     2D 00 64 FD | 	ret
00824                 | hubexit
00824     81 00 80 FD | 	jmp	#cogexit
00828                 | 
00828                 | __system___setbaud
00828     14 C8 05 FB | 	rdlong	muldiva_, #20
0082c     D0 CA 01 F6 | 	mov	muldivb_, arg01
00830     BA 00 A0 FD | 	call	#divide_
00834     97 06 48 FB | 	callpa	#(@LR__0011-@LR__0010)>>2,fcache_load_ptr_
00838                 | LR__0010
00838     3E 94 9D FA | 	rdpin	result1, #62 wc
0083c     CB 96 A1 F1 | 	subx	result2, result2
00840     F4 FF 9F CD |  if_b	jmp	#LR__0010
00844                 | LR__0011
00844     40 7C 64 FD | 	dirl	#62
00848     40 7E 64 FD | 	dirl	#63
0084c     C8 CA 61 FC | 	wrlong	muldivb_, ptr___system__dat__
00850     10 CA 65 F0 | 	shl	muldivb_, #16
00854     07 A2 05 F6 | 	mov	arg02, #7
00858     E5 A2 01 F1 | 	add	arg02, muldivb_
0085c     3E F8 0C FC | 	wrpin	#124, #62
00860     3E A2 15 FC | 	wxpin	arg02, #62
00864     3F 7C 0C FC | 	wrpin	#62, #63
00868     14 A2 05 F1 | 	add	arg02, #20
0086c     3F A2 15 FC | 	wxpin	arg02, #63
00870     41 7C 64 FD | 	dirh	#62
00874     41 7E 64 FD | 	dirh	#63
00878                 | __system___setbaud_ret
00878     2D 00 64 FD | 	ret
0087c                 | 
0087c                 | __system___txraw
0087c     01 4A 05 F6 | 	mov	COUNT_, #1
00880     A8 00 A0 FD | 	call	#pushregs_
00884     D0 AA 01 F6 | 	mov	local01, arg01
00888     97 06 48 FB | 	callpa	#(@LR__0021-@LR__0020)>>2,fcache_load_ptr_
0088c                 | LR__0020
0088c     3E 94 9D FA | 	rdpin	result1, #62 wc
00890     CB 96 A1 F1 | 	subx	result2, result2
00894     F4 FF 9F CD |  if_b	jmp	#LR__0020
00898                 | LR__0021
00898     C8 94 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0089c     C2 01 00 AF 
008a0     00 A0 05 A6 |  if_e	mov	arg01, ##230400
008a4     80 FF BF AD |  if_e	call	#__system___setbaud
008a8     58 7C 64 FD | 	drvl	#62
008ac     3E AA 25 FC | 	wypin	local01, #62
008b0     01 94 05 F6 | 	mov	result1, #1
008b4     A7 F0 03 F6 | 	mov	ptra, fp
008b8     B2 00 A0 FD | 	call	#popregs_
008bc                 | __system___txraw_ret
008bc     2D 00 64 FD | 	ret
008c0                 | 
008c0                 | __system___rxraw
008c0     0D 4A 05 F6 | 	mov	COUNT_, #13
008c4     A8 00 A0 FD | 	call	#pushregs_
008c8     D0 AA 01 F6 | 	mov	local01, arg01
008cc     C8 AC 09 FB | 	rdlong	local02, ptr___system__dat__ wz
008d0     C2 01 00 AF 
008d4     00 A0 05 A6 |  if_e	mov	arg01, ##230400
008d8     4C FF BF AD |  if_e	call	#__system___setbaud
008dc     00 AA 0D F2 | 	cmp	local01, #0 wz
008e0     14 AE 05 5B |  if_ne	rdlong	local03, #20
008e4     0A AE 45 50 |  if_ne	shr	local03, #10
008e8     D7 AA 01 5D |  if_ne	qmul	local01, local03
008ec     1A 94 61 5D |  if_ne	getct	result1
008f0     01 B0 65 F6 | 	neg	local04, #1
008f4     3F B2 05 F6 | 	mov	local05, #63
008f8     00 B4 05 F6 | 	mov	local06, #0
008fc     04 90 05 F1 | 	add	ptr___system__dat__, #4
00900     C8 B6 01 FB | 	rdlong	local07, ptr___system__dat__
00904     04 90 85 F1 | 	sub	ptr___system__dat__, #4
00908     18 B8 61 5D |  if_ne	getqx	local08
0090c     DC 94 01 51 |  if_ne	add	result1, local08
00910     CA BA 01 56 |  if_ne	mov	local09, result1
00914     00 BA 05 A6 |  if_e	mov	local09, #0
00918                 | LR__0030
00918     08 B6 15 F4 | 	testb	local07, #8 wc
0091c     09 B6 75 F4 | 	testbn	local07, #9 andc
00920     0A B6 45 F0 | 	shr	local07, #10
00924     01 B4 05 C6 |  if_b	mov	local06, #1
00928     40 7E 6C 3D |  if_ae	testp	#63 wz
0092c     01 B4 05 26 |  if_nc_and_z	mov	local06, #1
00930     3F B6 8D 2A |  if_nc_and_z	rdpin	local07, #63
00934     04 B6 45 20 |  if_nc_and_z	shr	local07, #4
00938                 | LR__0031
00938     00 AC 05 F6 | 	mov	local02, #0
0093c     00 B4 0D F2 | 	cmp	local06, #0 wz
00940     01 AC 65 56 |  if_ne	neg	local02, #1
00944     00 BC 05 F6 | 	mov	local10, #0
00948     00 AE 05 F6 | 	mov	local03, #0
0094c     00 AA 0D F2 | 	cmp	local01, #0 wz
00950     01 AE 65 56 |  if_ne	neg	local03, #1
00954     00 B8 05 F6 | 	mov	local08, #0
00958     00 BE 05 F6 | 	mov	local11, #0
0095c     DD C0 01 F6 | 	mov	local12, local09
00960     1A 94 61 FD | 	getct	result1
00964     CA C2 01 F6 | 	mov	local13, result1
00968     E1 C0 81 F1 | 	sub	local12, local13
0096c     00 C0 55 F2 | 	cmps	local12, #0 wc
00970     00 BE 25 C6 |  if_b	not	local11, #0
00974     00 BE 0D F2 | 	cmp	local11, #0 wz
00978     00 B8 25 56 |  if_ne	not	local08, #0
0097c     DC AE C9 F7 | 	test	local03, local08 wz
00980     00 BC 25 56 |  if_ne	not	local10, #0
00984     DE AC 49 F5 | 	or	local02, local10 wz
00988     8C FF 9F AD |  if_e	jmp	#LR__0030
0098c     00 B4 0D F2 | 	cmp	local06, #0 wz
00990     DB B0 01 56 |  if_ne	mov	local04, local07
00994     D8 B0 E1 58 |  if_ne	getbyte	local04, local04, #0
00998     04 90 05 F1 | 	add	ptr___system__dat__, #4
0099c     C8 B6 61 FC | 	wrlong	local07, ptr___system__dat__
009a0     04 90 85 F1 | 	sub	ptr___system__dat__, #4
009a4     D8 94 01 F6 | 	mov	result1, local04
009a8     A7 F0 03 F6 | 	mov	ptra, fp
009ac     B2 00 A0 FD | 	call	#popregs_
009b0                 | __system___rxraw_ret
009b0     2D 00 64 FD | 	ret
009b4                 | 
009b4                 | __system___tx
009b4     02 4A 05 F6 | 	mov	COUNT_, #2
009b8     A8 00 A0 FD | 	call	#pushregs_
009bc     D0 AA 01 F6 | 	mov	local01, arg01
009c0     0A AA 0D F2 | 	cmp	local01, #10 wz
009c4     18 00 90 5D |  if_ne	jmp	#LR__0040
009c8     08 90 05 F1 | 	add	ptr___system__dat__, #8
009cc     C8 AC 01 FB | 	rdlong	local02, ptr___system__dat__
009d0     08 90 85 F1 | 	sub	ptr___system__dat__, #8
009d4     02 AC CD F7 | 	test	local02, #2 wz
009d8     0D A0 05 56 |  if_ne	mov	arg01, #13
009dc     9C FE BF 5D |  if_ne	call	#__system___txraw
009e0                 | LR__0040
009e0     D5 A0 01 F6 | 	mov	arg01, local01
009e4     94 FE BF FD | 	call	#__system___txraw
009e8     A7 F0 03 F6 | 	mov	ptra, fp
009ec     B2 00 A0 FD | 	call	#popregs_
009f0                 | __system___tx_ret
009f0     2D 00 64 FD | 	ret
009f4                 | 
009f4                 | __system___rx
009f4     01 4A 05 F6 | 	mov	COUNT_, #1
009f8     A8 00 A0 FD | 	call	#pushregs_
009fc                 | LR__0050
009fc     00 A0 05 F6 | 	mov	arg01, #0
00a00     BC FE BF FD | 	call	#__system___rxraw
00a04     CA AA 01 F6 | 	mov	local01, result1
00a08     FF FF 7F FF 
00a0c     FF AB 0D F2 | 	cmp	local01, ##-1 wz
00a10     E8 FF 9F AD |  if_e	jmp	#LR__0050
00a14     0D AA 0D F2 | 	cmp	local01, #13 wz
00a18     14 00 90 5D |  if_ne	jmp	#LR__0051
00a1c     08 90 05 F1 | 	add	ptr___system__dat__, #8
00a20     C8 94 01 FB | 	rdlong	result1, ptr___system__dat__
00a24     08 90 85 F1 | 	sub	ptr___system__dat__, #8
00a28     02 94 CD F7 | 	test	result1, #2 wz
00a2c     0A AA 05 56 |  if_ne	mov	local01, #10
00a30                 | LR__0051
00a30     08 90 05 F1 | 	add	ptr___system__dat__, #8
00a34     C8 A0 01 FB | 	rdlong	arg01, ptr___system__dat__
00a38     08 90 85 F1 | 	sub	ptr___system__dat__, #8
00a3c     01 A0 CD F7 | 	test	arg01, #1 wz
00a40     1C 00 90 AD |  if_e	jmp	#LR__0054
00a44     7F AA 0D F2 | 	cmp	local01, #127 wz
00a48     0C 00 90 5D |  if_ne	jmp	#LR__0052
00a4c     08 A0 05 F6 | 	mov	arg01, #8
00a50     60 FF BF FD | 	call	#__system___tx
00a54     08 00 90 FD | 	jmp	#LR__0053
00a58                 | LR__0052
00a58     D5 A0 01 F6 | 	mov	arg01, local01
00a5c     54 FF BF FD | 	call	#__system___tx
00a60                 | LR__0053
00a60                 | LR__0054
00a60     D5 94 01 F6 | 	mov	result1, local01
00a64     A7 F0 03 F6 | 	mov	ptra, fp
00a68     B2 00 A0 FD | 	call	#popregs_
00a6c                 | __system___rx_ret
00a6c     2D 00 64 FD | 	ret
00a70                 | 
00a70                 | __system___fmtchar
00a70     00 4A 05 F6 | 	mov	COUNT_, #0
00a74     A8 00 A0 FD | 	call	#pushregs_
00a78     10 F0 07 F1 | 	add	ptra, #16
00a7c     0C 4E 05 F1 | 	add	fp, #12
00a80     A7 A4 61 FC | 	wrlong	arg03, fp
00a84     D2 A4 E1 F8 | 	getbyte	arg03, arg03, #0
00a88     A7 A4 61 FC | 	wrlong	arg03, fp
00a8c     A7 A4 01 F6 | 	mov	arg03, fp
00a90     0C 4E 85 F1 | 	sub	fp, #12
00a94     0C 00 B0 FD | 	call	#__system___fmtstr
00a98     A7 F0 03 F6 | 	mov	ptra, fp
00a9c     B2 00 A0 FD | 	call	#popregs_
00aa0                 | __system___fmtchar_ret
00aa0     2D 00 64 FD | 	ret
00aa4                 | 
00aa4                 | __system___fmtstr
00aa4     09 4A 05 F6 | 	mov	COUNT_, #9
00aa8     A8 00 A0 FD | 	call	#pushregs_
00aac     D0 AA 01 F6 | 	mov	local01, arg01
00ab0     D1 AC 01 F6 | 	mov	local02, arg02
00ab4     D2 AE 01 F6 | 	mov	local03, arg03
00ab8     D6 A6 E1 F8 | 	getbyte	arg04, local02, #0
00abc     D7 A0 01 F6 | 	mov	arg01, local03
00ac0     D0 B0 01 F6 | 	mov	local04, arg01
00ac4     97 06 48 FB | 	callpa	#(@LR__0061-@LR__0060)>>2,fcache_load_ptr_
00ac8                 | LR__0060
00ac8     D8 94 C9 FA | 	rdbyte	result1, local04 wz
00acc     01 B0 05 51 |  if_ne	add	local04, #1
00ad0     F4 FF 9F 5D |  if_ne	jmp	#LR__0060
00ad4                 | LR__0061
00ad4     D0 B0 81 F1 | 	sub	local04, arg01
00ad8     00 A6 0D F2 | 	cmp	arg04, #0 wz
00adc     D3 B0 79 53 |  if_ne	fles	local04, arg04 wcz
00ae0     D6 A2 01 F6 | 	mov	arg02, local02
00ae4     D8 A4 01 F6 | 	mov	arg03, local04
00ae8     D5 A0 01 F6 | 	mov	arg01, local01
00aec     02 A6 05 F6 | 	mov	arg04, #2
00af0     F4 05 B0 FD | 	call	#__system___fmtpad
00af4     CA B2 01 F6 | 	mov	local05, result1
00af8     00 B2 55 F2 | 	cmps	local05, #0 wc
00afc     D9 94 01 C6 |  if_b	mov	result1, local05
00b00     80 00 90 CD |  if_b	jmp	#LR__0064
00b04     01 B0 55 F2 | 	cmps	local04, #1 wc
00b08     50 00 90 CD |  if_b	jmp	#LR__0063
00b0c     D8 B4 01 F6 | 	mov	local06, local04
00b10                 | LR__0062
00b10     D5 B6 01 F6 | 	mov	local07, local01
00b14     D5 B8 01 F6 | 	mov	local08, local01
00b18     13 B6 45 F7 | 	zerox	local07, #19
00b1c     14 B8 45 F0 | 	shr	local08, #20
00b20     02 B8 65 F0 | 	shl	local08, #2
00b24     C4 B8 01 F1 | 	add	local08, __methods__
00b28     DC B8 01 FB | 	rdlong	local08, local08
00b2c     D7 A0 C1 FA | 	rdbyte	arg01, local03
00b30     C7 BA 01 F6 | 	mov	local09, objptr
00b34     DB 8E 01 F6 | 	mov	objptr, local07
00b38     01 AE 05 F1 | 	add	local03, #1
00b3c     2D B8 61 FD | 	call	local08
00b40     DD 8E 01 F6 | 	mov	objptr, local09
00b44     CA BA 01 F6 | 	mov	local09, result1
00b48     00 BA 55 F2 | 	cmps	local09, #0 wc
00b4c     DD 94 01 C6 |  if_b	mov	result1, local09
00b50     30 00 90 CD |  if_b	jmp	#LR__0064
00b54     DD B2 01 F1 | 	add	local05, local09
00b58     ED B5 6D FB | 	djnz	local06, #LR__0062
00b5c                 | LR__0063
00b5c     D6 A2 01 F6 | 	mov	arg02, local02
00b60     D8 A4 01 F6 | 	mov	arg03, local04
00b64     D5 A0 01 F6 | 	mov	arg01, local01
00b68     01 A6 05 F6 | 	mov	arg04, #1
00b6c     78 05 B0 FD | 	call	#__system___fmtpad
00b70     CA BA 01 F6 | 	mov	local09, result1
00b74     00 BA 55 F2 | 	cmps	local09, #0 wc
00b78     DD 94 01 C6 |  if_b	mov	result1, local09
00b7c     DD B2 01 31 |  if_ae	add	local05, local09
00b80     D9 94 01 36 |  if_ae	mov	result1, local05
00b84                 | LR__0064
00b84     A7 F0 03 F6 | 	mov	ptra, fp
00b88     B2 00 A0 FD | 	call	#popregs_
00b8c                 | __system___fmtstr_ret
00b8c     2D 00 64 FD | 	ret
00b90                 | 
00b90                 | __system___fmtnum
00b90     0F 4A 05 F6 | 	mov	COUNT_, #15
00b94     A8 00 A0 FD | 	call	#pushregs_
00b98     D0 AA 01 F6 | 	mov	local01, arg01
00b9c     D1 AC 01 F6 | 	mov	local02, arg02
00ba0     D2 AE 01 F6 | 	mov	local03, arg03
00ba4     D3 B0 01 F6 | 	mov	local04, arg04
00ba8     F8 B3 01 F6 | 	mov	local05, ptra
00bac     D9 B4 01 F6 | 	mov	local06, local05
00bb0     00 B6 05 F6 | 	mov	local07, #0
00bb4     D6 B8 01 F6 | 	mov	local08, local02
00bb8     10 B8 45 F0 | 	shr	local08, #16
00bbc     3F B8 05 F5 | 	and	local08, #63
00bc0     D6 BA E1 F8 | 	getbyte	local09, local02, #0
00bc4     D6 BC 01 F6 | 	mov	local10, local02
00bc8     1A BC 45 F0 | 	shr	local10, #26
00bcc     03 BC 05 F5 | 	and	local10, #3
00bd0     DE BE 01 F6 | 	mov	local11, local10
00bd4     01 B8 55 F2 | 	cmps	local08, #1 wc
00bd8     44 F0 07 F1 | 	add	ptra, #68
00bdc     01 B8 85 31 |  if_ae	sub	local08, #1
00be0     41 BA 55 F2 | 	cmps	local09, #65 wc
00be4     00 BA 0D C2 |  if_b	cmp	local09, #0 wz
00be8     40 BA 05 B6 |  if_nc_or_z	mov	local09, #64
00bec     03 BE 0D F2 | 	cmp	local11, #3 wz
00bf0     00 BE 05 A6 |  if_e	mov	local11, #0
00bf4     00 AE 55 52 |  if_ne	cmps	local03, #0 wc
00bf8     04 BE 05 46 |  if_c_and_nz	mov	local11, #4
00bfc     D7 AE 61 46 |  if_c_and_nz	neg	local03, local03
00c00     00 BE 0D F2 | 	cmp	local11, #0 wz
00c04     4C 00 90 AD |  if_e	jmp	#LR__0073
00c08     01 B6 05 F6 | 	mov	local07, #1
00c0c     DD B8 09 F2 | 	cmp	local08, local09 wz
00c10     18 00 90 5D |  if_ne	jmp	#LR__0071
00c14     05 B8 6D FB | 	djnz	local08, #LR__0070
00c18     D5 A0 01 F6 | 	mov	arg01, local01
00c1c     D6 A2 01 F6 | 	mov	arg02, local02
00c20     23 A4 05 F6 | 	mov	arg03, #35
00c24     48 FE BF FD | 	call	#__system___fmtchar
00c28     E0 00 90 FD | 	jmp	#LR__0078
00c2c                 | LR__0070
00c2c                 | LR__0071
00c2c     02 BE 0D F2 | 	cmp	local11, #2 wz
00c30     DA BC 01 A6 |  if_e	mov	local10, local06
00c34     01 B4 05 A1 |  if_e	add	local06, #1
00c38     DE 40 48 AC |  if_e	wrbyte	#32, local10
00c3c     14 00 90 AD |  if_e	jmp	#LR__0072
00c40     04 BE 0D F2 | 	cmp	local11, #4 wz
00c44     DA 5A 48 AC |  if_e	wrbyte	#45, local06
00c48     01 B4 05 A1 |  if_e	add	local06, #1
00c4c     DA 56 48 5C |  if_ne	wrbyte	#43, local06
00c50     01 B4 05 51 |  if_ne	add	local06, #1
00c54                 | LR__0072
00c54                 | LR__0073
00c54     DB BC 01 F6 | 	mov	local10, local07
00c58     DA C0 01 F6 | 	mov	local12, local06
00c5c     D7 A2 01 F6 | 	mov	arg02, local03
00c60     D8 A4 01 F6 | 	mov	arg03, local04
00c64     DC A6 01 F6 | 	mov	arg04, local08
00c68     00 A8 05 F6 | 	mov	arg05, #0
00c6c     1D AC 2D F4 | 	testbn	local02, #29 wz
00c70     01 A8 05 56 |  if_ne	mov	arg05, #1
00c74     00 A8 4D F2 | 	cmps	arg05, #0 wz
00c78     E0 A8 01 F6 | 	mov	arg05, local12
00c7c     00 C2 05 F6 | 	mov	local13, #0
00c80     37 C4 05 56 |  if_ne	mov	local14, #55
00c84     57 C4 05 A6 |  if_e	mov	local14, #87
00c88                 | LR__0074
00c88     D2 A2 11 FD | 	qdiv	arg02, arg03
00c8c     19 C6 61 FD | 	getqy	local15
00c90     D2 A2 11 FD | 	qdiv	arg02, arg03
00c94     0A C6 15 F2 | 	cmp	local15, #10 wc
00c98     30 C6 05 C1 |  if_b	add	local15, #48
00c9c     E2 C6 01 31 |  if_ae	add	local15, local14
00ca0     D4 C6 41 FC | 	wrbyte	local15, arg05
00ca4     01 A8 05 F1 | 	add	arg05, #1
00ca8     01 C2 05 F1 | 	add	local13, #1
00cac     18 A2 61 FD | 	getqx	arg02
00cb0     00 A2 0D F2 | 	cmp	arg02, #0 wz
00cb4     D0 FF 9F 5D |  if_ne	jmp	#LR__0074
00cb8     D3 C2 11 F2 | 	cmp	local13, arg04 wc
00cbc     C8 FF 9F CD |  if_b	jmp	#LR__0074
00cc0     D4 00 48 FC | 	wrbyte	#0, arg05
00cc4     E0 A0 01 F6 | 	mov	arg01, local12
00cc8     CC 03 B0 FD | 	call	#__system___strrev
00ccc     E1 BC 01 F1 | 	add	local10, local13
00cd0     DD BC 59 F2 | 	cmps	local10, local09 wcz
00cd4     24 00 90 ED |  if_be	jmp	#LR__0077
00cd8     97 0E 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
00cdc                 | LR__0075
00cdc     DD BC 01 F6 | 	mov	local10, local09
00ce0     01 BC 55 F2 | 	cmps	local10, #1 wc
00ce4     01 BA 85 F1 | 	sub	local09, #1
00ce8     DA BC 01 36 |  if_ae	mov	local10, local06
00cec     01 B4 05 31 |  if_ae	add	local06, #1
00cf0     DE 46 48 3C |  if_ae	wrbyte	#35, local10
00cf4     E4 FF 9F 3D |  if_ae	jmp	#LR__0075
00cf8                 | LR__0076
00cf8     DA 00 48 FC | 	wrbyte	#0, local06
00cfc                 | LR__0077
00cfc     D5 A0 01 F6 | 	mov	arg01, local01
00d00     D6 A2 01 F6 | 	mov	arg02, local02
00d04     D9 A4 01 F6 | 	mov	arg03, local05
00d08     98 FD BF FD | 	call	#__system___fmtstr
00d0c                 | LR__0078
00d0c     A7 F0 03 F6 | 	mov	ptra, fp
00d10     B2 00 A0 FD | 	call	#popregs_
00d14                 | __system___fmtnum_ret
00d14     2D 00 64 FD | 	ret
00d18                 | 
00d18                 | __system____default_getc
00d18     07 4A 05 F6 | 	mov	COUNT_, #7
00d1c     A8 00 A0 FD | 	call	#pushregs_
00d20     D0 AA 01 F6 | 	mov	local01, arg01
00d24     D5 AC 01 FB | 	rdlong	local02, local01
00d28     08 AA 05 F1 | 	add	local01, #8
00d2c     D5 A4 01 FB | 	rdlong	arg03, local01
00d30     08 AA 85 F1 | 	sub	local01, #8
00d34     08 A4 CD F7 | 	test	arg03, #8 wz
00d38     D5 A0 01 56 |  if_ne	mov	arg01, local01
00d3c     B0 01 B0 5D |  if_ne	call	#__system____default_flush
00d40     08 AA 05 F1 | 	add	local01, #8
00d44     D5 A4 01 FB | 	rdlong	arg03, local01
00d48     04 A4 45 F5 | 	or	arg03, #4
00d4c     D5 A4 61 FC | 	wrlong	arg03, local01
00d50     08 AA 85 F1 | 	sub	local01, #8
00d54     D6 AE 09 FB | 	rdlong	local03, local02 wz
00d58     B8 00 90 5D |  if_ne	jmp	#LR__0080
00d5c     D5 B0 01 F6 | 	mov	local04, local01
00d60     D8 B2 01 FB | 	rdlong	local05, local04
00d64     08 B2 05 F1 | 	add	local05, #8
00d68     D9 B4 09 FB | 	rdlong	local06, local05 wz
00d6c     08 B2 85 F1 | 	sub	local05, #8
00d70     10 B2 05 A1 |  if_e	add	local05, #16
00d74     D9 B4 01 A6 |  if_e	mov	local06, local05
00d78     04 B2 85 A1 |  if_e	sub	local05, #4
00d7c     D9 B4 61 AC |  if_e	wrlong	local06, local05
00d80     04 B2 85 A1 |  if_e	sub	local05, #4
00d84     02 00 80 AF 
00d88     D9 00 68 AC |  if_e	wrlong	##1024, local05
00d8c     08 B2 85 A1 |  if_e	sub	local05, #8
00d90     14 B0 05 F1 | 	add	local04, #20
00d94     D8 B6 01 FB | 	rdlong	local07, local04
00d98     DB AE 01 F6 | 	mov	local03, local07
00d9c     14 B0 85 F1 | 	sub	local04, #20
00da0     13 AE 45 F7 | 	zerox	local03, #19
00da4     14 B6 45 F0 | 	shr	local07, #20
00da8     02 B6 65 F0 | 	shl	local07, #2
00dac     C4 B6 01 F1 | 	add	local07, __methods__
00db0     DB B6 01 FB | 	rdlong	local07, local07
00db4     D8 A0 01 F6 | 	mov	arg01, local04
00db8     0C B2 05 F1 | 	add	local05, #12
00dbc     D9 A2 01 FB | 	rdlong	arg02, local05
00dc0     04 B2 85 F1 | 	sub	local05, #4
00dc4     D9 A4 01 FB | 	rdlong	arg03, local05
00dc8     08 B2 85 F1 | 	sub	local05, #8
00dcc     C7 AA 01 F6 | 	mov	local01, objptr
00dd0     D7 8E 01 F6 | 	mov	objptr, local03
00dd4     2D B6 61 FD | 	call	local07
00dd8     D5 8E 01 F6 | 	mov	objptr, local01
00ddc     CA AE 01 F6 | 	mov	local03, result1
00de0     00 AE 55 F2 | 	cmps	local03, #0 wc
00de4     01 94 65 C6 |  if_b	neg	result1, #1
00de8     D9 AE 61 3C |  if_ae	wrlong	local03, local05
00dec     0C B2 05 31 |  if_ae	add	local05, #12
00df0     D9 B6 01 3B |  if_ae	rdlong	local07, local05
00df4     08 B2 85 31 |  if_ae	sub	local05, #8
00df8     D9 B6 61 3C |  if_ae	wrlong	local07, local05
00dfc     08 B0 05 31 |  if_ae	add	local04, #8
00e00     D8 B4 01 3B |  if_ae	rdlong	local06, local04
00e04     04 B4 45 35 |  if_ae	or	local06, #4
00e08     D8 B4 61 3C |  if_ae	wrlong	local06, local04
00e0c     D7 94 01 36 |  if_ae	mov	result1, local03
00e10     CA AE 01 F6 | 	mov	local03, result1
00e14                 | LR__0080
00e14     01 AE 55 F2 | 	cmps	local03, #1 wc
00e18     01 94 65 C6 |  if_b	neg	result1, #1
00e1c     01 AE 85 31 |  if_ae	sub	local03, #1
00e20     D6 AE 61 3C |  if_ae	wrlong	local03, local02
00e24     04 AC 05 31 |  if_ae	add	local02, #4
00e28     D6 AE 01 3B |  if_ae	rdlong	local03, local02
00e2c     D7 94 C1 3A |  if_ae	rdbyte	result1, local03
00e30     01 AE 05 31 |  if_ae	add	local03, #1
00e34     D6 AE 61 3C |  if_ae	wrlong	local03, local02
00e38     A7 F0 03 F6 | 	mov	ptra, fp
00e3c     B2 00 A0 FD | 	call	#popregs_
00e40                 | __system____default_getc_ret
00e40     2D 00 64 FD | 	ret
00e44                 | 
00e44                 | __system____default_putc
00e44     06 4A 05 F6 | 	mov	COUNT_, #6
00e48     A8 00 A0 FD | 	call	#pushregs_
00e4c     D0 AA 01 F6 | 	mov	local01, arg01
00e50     D1 AC 01 F6 | 	mov	local02, arg02
00e54     D6 AE 01 FB | 	rdlong	local03, local02
00e58     08 AC 05 F1 | 	add	local02, #8
00e5c     D6 A2 01 FB | 	rdlong	arg02, local02
00e60     08 AC 85 F1 | 	sub	local02, #8
00e64     04 A2 CD F7 | 	test	arg02, #4 wz
00e68     D6 A0 01 56 |  if_ne	mov	arg01, local02
00e6c     80 00 B0 5D |  if_ne	call	#__system____default_flush
00e70     08 AC 05 F1 | 	add	local02, #8
00e74     D6 B0 01 FB | 	rdlong	local04, local02
00e78     08 B0 45 F5 | 	or	local04, #8
00e7c     D6 B0 61 FC | 	wrlong	local04, local02
00e80     D7 B2 01 FB | 	rdlong	local05, local03
00e84     0C AE 05 F1 | 	add	local03, #12
00e88     D7 A2 01 FB | 	rdlong	arg02, local03
00e8c     0C AE 85 F1 | 	sub	local03, #12
00e90     D9 94 01 F6 | 	mov	result1, local05
00e94     D1 94 01 F1 | 	add	result1, arg02
00e98     CA AA 41 FC | 	wrbyte	local01, result1
00e9c     D5 AA E1 F8 | 	getbyte	local01, local01, #0
00ea0     01 B2 05 F1 | 	add	local05, #1
00ea4     D7 B2 61 FC | 	wrlong	local05, local03
00ea8     02 AC 85 F1 | 	sub	local02, #2
00eac     D6 B4 E9 FA | 	rdword	local06, local02 wz
00eb0     06 AC 85 F1 | 	sub	local02, #6
00eb4     08 AE 05 51 |  if_ne	add	local03, #8
00eb8     D7 B0 01 5B |  if_ne	rdlong	local04, local03
00ebc     D8 B2 09 52 |  if_ne	cmp	local05, local04 wz
00ec0     0C 00 90 AD |  if_e	jmp	#LR__0090
00ec4     0A AA 0D F2 | 	cmp	local01, #10 wz
00ec8     01 B4 0D A2 |  if_e	cmp	local06, #1 wz
00ecc     10 00 90 5D |  if_ne	jmp	#LR__0091
00ed0                 | LR__0090
00ed0     D6 A0 01 F6 | 	mov	arg01, local02
00ed4     18 00 B0 FD | 	call	#__system____default_flush
00ed8     00 94 0D F2 | 	cmp	result1, #0 wz
00edc     01 AA 65 56 |  if_ne	neg	local01, #1
00ee0                 | LR__0091
00ee0     D5 94 01 F6 | 	mov	result1, local01
00ee4     A7 F0 03 F6 | 	mov	ptra, fp
00ee8     B2 00 A0 FD | 	call	#popregs_
00eec                 | __system____default_putc_ret
00eec     2D 00 64 FD | 	ret
00ef0                 | 
00ef0                 | __system____default_flush
00ef0     07 4A 05 F6 | 	mov	COUNT_, #7
00ef4     A8 00 A0 FD | 	call	#pushregs_
00ef8     D0 AA 01 F6 | 	mov	local01, arg01
00efc     D5 AC 01 FB | 	rdlong	local02, local01
00f00     D6 AE 01 FB | 	rdlong	local03, local02
00f04     08 AA 05 F1 | 	add	local01, #8
00f08     D5 96 01 FB | 	rdlong	result2, local01
00f0c     08 AA 85 F1 | 	sub	local01, #8
00f10     08 96 CD F7 | 	test	result2, #8 wz
00f14     D4 00 90 AD |  if_e	jmp	#LR__0102
00f18     01 AE 55 F2 | 	cmps	local03, #1 wc
00f1c     2C 01 90 CD |  if_b	jmp	#LR__0104
00f20     08 AA 05 F1 | 	add	local01, #8
00f24     D5 96 01 FB | 	rdlong	result2, local01
00f28     08 AA 85 F1 | 	sub	local01, #8
00f2c     80 96 CD F7 | 	test	result2, #128 wz
00f30     6C 00 90 AD |  if_e	jmp	#LR__0101
00f34     08 AA 05 F1 | 	add	local01, #8
00f38     D5 A4 01 FB | 	rdlong	arg03, local01
00f3c     08 AA 85 F1 | 	sub	local01, #8
00f40     00 A5 CD F7 | 	test	arg03, #256 wz
00f44     58 00 90 AD |  if_e	jmp	#LR__0100
00f48     30 AA 05 F1 | 	add	local01, #48
00f4c     D5 B0 01 FB | 	rdlong	local04, local01
00f50     D8 B2 01 F6 | 	mov	local05, local04
00f54     30 AA 85 F1 | 	sub	local01, #48
00f58     13 B2 45 F7 | 	zerox	local05, #19
00f5c     14 B0 45 F0 | 	shr	local04, #20
00f60     02 B0 65 F0 | 	shl	local04, #2
00f64     C4 B0 01 F1 | 	add	local04, __methods__
00f68     D8 B0 01 FB | 	rdlong	local04, local04
00f6c     D5 A0 01 F6 | 	mov	arg01, local01
00f70     00 A2 05 F6 | 	mov	arg02, #0
00f74     00 A4 05 F6 | 	mov	arg03, #0
00f78     02 A6 05 F6 | 	mov	arg04, #2
00f7c     C7 B4 01 F6 | 	mov	local06, objptr
00f80     D9 8E 01 F6 | 	mov	objptr, local05
00f84     2D B0 61 FD | 	call	local04
00f88     DA 8E 01 F6 | 	mov	objptr, local06
00f8c     08 AA 05 F1 | 	add	local01, #8
00f90     D5 B4 01 FB | 	rdlong	local06, local01
00f94     00 B5 25 F5 | 	andn	local06, #256
00f98     D5 B4 61 FC | 	wrlong	local06, local01
00f9c     08 AA 85 F1 | 	sub	local01, #8
00fa0                 | LR__0100
00fa0                 | LR__0101
00fa0     18 AA 05 F1 | 	add	local01, #24
00fa4     D5 B0 01 FB | 	rdlong	local04, local01
00fa8     D8 B2 01 F6 | 	mov	local05, local04
00fac     18 AA 85 F1 | 	sub	local01, #24
00fb0     13 B2 45 F7 | 	zerox	local05, #19
00fb4     14 B0 45 F0 | 	shr	local04, #20
00fb8     02 B0 65 F0 | 	shl	local04, #2
00fbc     C4 B0 01 F1 | 	add	local04, __methods__
00fc0     D8 B0 01 FB | 	rdlong	local04, local04
00fc4     0C AC 05 F1 | 	add	local02, #12
00fc8     D6 A2 01 FB | 	rdlong	arg02, local02
00fcc     0C AC 85 F1 | 	sub	local02, #12
00fd0     D5 A0 01 F6 | 	mov	arg01, local01
00fd4     D7 A4 01 F6 | 	mov	arg03, local03
00fd8     C7 B4 01 F6 | 	mov	local06, objptr
00fdc     D9 8E 01 F6 | 	mov	objptr, local05
00fe0     2D B0 61 FD | 	call	local04
00fe4     DA 8E 01 F6 | 	mov	objptr, local06
00fe8     60 00 90 FD | 	jmp	#LR__0104
00fec                 | LR__0102
00fec     08 AA 05 F1 | 	add	local01, #8
00ff0     D5 B4 01 FB | 	rdlong	local06, local01
00ff4     08 AA 85 F1 | 	sub	local01, #8
00ff8     04 B4 CD F7 | 	test	local06, #4 wz
00ffc     00 AE 0D 52 |  if_ne	cmp	local03, #0 wz
01000     48 00 90 AD |  if_e	jmp	#LR__0103
01004     D7 A2 61 F6 | 	neg	arg02, local03
01008     D1 A4 01 F6 | 	mov	arg03, arg02
0100c     1F A4 C5 F0 | 	sar	arg03, #31
01010     30 AA 05 F1 | 	add	local01, #48
01014     D5 B0 01 FB | 	rdlong	local04, local01
01018     D8 B2 01 F6 | 	mov	local05, local04
0101c     30 AA 85 F1 | 	sub	local01, #48
01020     13 B2 45 F7 | 	zerox	local05, #19
01024     14 B0 45 F0 | 	shr	local04, #20
01028     02 B0 65 F0 | 	shl	local04, #2
0102c     C4 B0 01 F1 | 	add	local04, __methods__
01030     D8 B0 01 FB | 	rdlong	local04, local04
01034     D5 A0 01 F6 | 	mov	arg01, local01
01038     01 A6 05 F6 | 	mov	arg04, #1
0103c     C7 B4 01 F6 | 	mov	local06, objptr
01040     D9 8E 01 F6 | 	mov	objptr, local05
01044     2D B0 61 FD | 	call	local04
01048     DA 8E 01 F6 | 	mov	objptr, local06
0104c                 | LR__0103
0104c                 | LR__0104
0104c     D6 00 68 FC | 	wrlong	#0, local02
01050     04 AC 05 F1 | 	add	local02, #4
01054     D6 00 68 FC | 	wrlong	#0, local02
01058     08 AA 05 F1 | 	add	local01, #8
0105c     D5 B6 01 FB | 	rdlong	local07, local01
01060     0C B6 25 F5 | 	andn	local07, #12
01064     D5 B6 61 FC | 	wrlong	local07, local01
01068     00 94 05 F6 | 	mov	result1, #0
0106c     A7 F0 03 F6 | 	mov	ptra, fp
01070     B2 00 A0 FD | 	call	#popregs_
01074                 | __system____default_flush_ret
01074     2D 00 64 FD | 	ret
01078                 | 
01078                 | __system____getftab
01078     0A A0 15 F2 | 	cmp	arg01, #10 wc
0107c     34 A0 05 CD |  if_b	qmul	arg01, #52
01080     00 94 05 36 |  if_ae	mov	result1, #0
01084     C8 A0 01 C6 |  if_b	mov	arg01, ptr___system__dat__
01088     28 A0 05 C1 |  if_b	add	arg01, #40
0108c     18 94 61 CD |  if_b	getqx	result1
01090     D0 94 01 C1 |  if_b	add	result1, arg01
01094                 | __system____getftab_ret
01094     2D 00 64 FD | 	ret
01098                 | 
01098                 | __system___strrev
01098     D0 98 C9 FA | 	rdbyte	_var01, arg01 wz
0109c     44 00 90 AD |  if_e	jmp	#__system___strrev_ret
010a0     D0 9A 01 F6 | 	mov	_var02, arg01
010a4     97 06 48 FB | 	callpa	#(@LR__0111-@LR__0110)>>2,fcache_load_ptr_
010a8                 | LR__0110
010a8     CD 98 C9 FA | 	rdbyte	_var01, _var02 wz
010ac     01 9A 05 51 |  if_ne	add	_var02, #1
010b0     F4 FF 9F 5D |  if_ne	jmp	#LR__0110
010b4                 | LR__0111
010b4     01 9A 85 F1 | 	sub	_var02, #1
010b8     97 14 48 FB | 	callpa	#(@LR__0113-@LR__0112)>>2,fcache_load_ptr_
010bc                 | LR__0112
010bc     D0 9A 59 F2 | 	cmps	_var02, arg01 wcz
010c0     D0 9C C1 1A |  if_a	rdbyte	_var03, arg01
010c4     D0 98 01 16 |  if_a	mov	_var01, arg01
010c8     CD 9E C1 1A |  if_a	rdbyte	_var04, _var02
010cc     01 A0 05 11 |  if_a	add	arg01, #1
010d0     CC 9E 41 1C |  if_a	wrbyte	_var04, _var01
010d4     CD 98 01 16 |  if_a	mov	_var01, _var02
010d8     01 9A 85 11 |  if_a	sub	_var02, #1
010dc     CC 9C 41 1C |  if_a	wrbyte	_var03, _var01
010e0     D8 FF 9F 1D |  if_a	jmp	#LR__0112
010e4                 | LR__0113
010e4                 | __system___strrev_ret
010e4     2D 00 64 FD | 	ret
010e8                 | 
010e8                 | __system___fmtpad
010e8     06 4A 05 F6 | 	mov	COUNT_, #6
010ec     A8 00 A0 FD | 	call	#pushregs_
010f0     D0 AA 01 F6 | 	mov	local01, arg01
010f4     D1 AC 01 F6 | 	mov	local02, arg02
010f8     D2 AE 01 F6 | 	mov	local03, arg03
010fc     D6 A0 E9 F8 | 	getbyte	arg01, local02, #1
01100     16 AC 45 F0 | 	shr	local02, #22
01104     03 AC 0D F5 | 	and	local02, #3 wz
01108     00 B0 05 F6 | 	mov	local04, #0
0110c     01 AC 05 A6 |  if_e	mov	local02, #1
01110     D3 AC C9 F7 | 	test	local02, arg04 wz
01114     00 94 05 A6 |  if_e	mov	result1, #0
01118     88 00 90 AD |  if_e	jmp	#LR__0123
0111c     D0 AE C1 F2 | 	subr	local03, arg01
01120     01 AE 55 F2 | 	cmps	local03, #1 wc
01124     00 94 05 C6 |  if_b	mov	result1, #0
01128     78 00 90 CD |  if_b	jmp	#LR__0123
0112c     03 AC 0D F2 | 	cmp	local02, #3 wz
01130     18 00 90 5D |  if_ne	jmp	#LR__0120
01134     01 A6 0D F2 | 	cmp	arg04, #1 wz
01138     6E AC 61 FD | 	wrz	local02
0113c     D6 AE 01 F1 | 	add	local03, local02
01140     D7 AE 51 F6 | 	abs	local03, local03 wc
01144     01 AE 45 F0 | 	shr	local03, #1
01148     D7 AE 81 F6 | 	negc	local03, local03
0114c                 | LR__0120
0114c     01 AE 55 F2 | 	cmps	local03, #1 wc
01150     4C 00 90 CD |  if_b	jmp	#LR__0122
01154     D7 B2 01 F6 | 	mov	local05, local03
01158                 | LR__0121
01158     D5 AC 01 F6 | 	mov	local02, local01
0115c     D5 B4 01 F6 | 	mov	local06, local01
01160     13 AC 45 F7 | 	zerox	local02, #19
01164     14 B4 45 F0 | 	shr	local06, #20
01168     02 B4 65 F0 | 	shl	local06, #2
0116c     C4 B4 01 F1 | 	add	local06, __methods__
01170     DA B4 01 FB | 	rdlong	local06, local06
01174     20 A0 05 F6 | 	mov	arg01, #32
01178     C7 AE 01 F6 | 	mov	local03, objptr
0117c     D6 8E 01 F6 | 	mov	objptr, local02
01180     2D B4 61 FD | 	call	local06
01184     D7 8E 01 F6 | 	mov	objptr, local03
01188     CA B4 01 F6 | 	mov	local06, result1
0118c     00 B4 55 F2 | 	cmps	local06, #0 wc
01190     DA 94 01 C6 |  if_b	mov	result1, local06
01194     0C 00 90 CD |  if_b	jmp	#LR__0123
01198     DA B0 01 F1 | 	add	local04, local06
0119c     EE B3 6D FB | 	djnz	local05, #LR__0121
011a0                 | LR__0122
011a0     D8 94 01 F6 | 	mov	result1, local04
011a4                 | LR__0123
011a4     A7 F0 03 F6 | 	mov	ptra, fp
011a8     B2 00 A0 FD | 	call	#popregs_
011ac                 | __system___fmtpad_ret
011ac     2D 00 64 FD | 	ret
011b0                 | 
011b0                 | __system___getiolock_0087
011b0     01 4A 05 F6 | 	mov	COUNT_, #1
011b4     A8 00 A0 FD | 	call	#pushregs_
011b8     BC FE BF FD | 	call	#__system____getftab
011bc     CA AA 09 F6 | 	mov	local01, result1 wz
011c0     10 00 90 AD |  if_e	jmp	#LR__0130
011c4     08 AA 05 F1 | 	add	local01, #8
011c8     D5 94 09 FB | 	rdlong	result1, local01 wz
011cc     08 AA 85 F1 | 	sub	local01, #8
011d0     0C 00 90 5D |  if_ne	jmp	#LR__0131
011d4                 | LR__0130
011d4     C8 94 01 F6 | 	mov	result1, ptr___system__dat__
011d8     24 94 05 F1 | 	add	result1, #36
011dc     08 00 90 FD | 	jmp	#LR__0132
011e0                 | LR__0131
011e0     0C AA 05 F1 | 	add	local01, #12
011e4     D5 94 01 F6 | 	mov	result1, local01
011e8                 | LR__0132
011e8     A7 F0 03 F6 | 	mov	ptra, fp
011ec     B2 00 A0 FD | 	call	#popregs_
011f0                 | __system___getiolock_0087_ret
011f0     2D 00 64 FD | 	ret
011f4                 | 
011f4                 | __system___gettxfunc
011f4     01 4A 05 F6 | 	mov	COUNT_, #1
011f8     A8 00 A0 FD | 	call	#pushregs_
011fc     78 FE BF FD | 	call	#__system____getftab
01200     CA AA 09 F6 | 	mov	local01, result1 wz
01204     10 00 90 AD |  if_e	jmp	#LR__0140
01208     08 AA 05 F1 | 	add	local01, #8
0120c     D5 A2 09 FB | 	rdlong	arg02, local01 wz
01210     08 AA 85 F1 | 	sub	local01, #8
01214     08 00 90 5D |  if_ne	jmp	#LR__0141
01218                 | LR__0140
01218     00 94 05 F6 | 	mov	result1, #0
0121c     08 00 90 FD | 	jmp	#LR__0142
01220                 | LR__0141
01220     34 AA 25 F4 | 	bith	local01, #52
01224     D5 94 01 F6 | 	mov	result1, local01
01228                 | LR__0142
01228     A7 F0 03 F6 | 	mov	ptra, fp
0122c     B2 00 A0 FD | 	call	#popregs_
01230                 | __system___gettxfunc_ret
01230     2D 00 64 FD | 	ret
01234                 | 
01234                 | __system___rxtxioctl_0137
01234     00 A3 0D F2 | 	cmp	arg02, #256 wz
01238     0C 00 90 AD |  if_e	jmp	#LR__0150
0123c     01 A3 0D F2 | 	cmp	arg02, #257 wz
01240     1C 00 90 AD |  if_e	jmp	#LR__0151
01244     30 00 90 FD | 	jmp	#LR__0152
01248                 | LR__0150
01248     08 90 05 F1 | 	add	ptr___system__dat__, #8
0124c     C8 94 01 FB | 	rdlong	result1, ptr___system__dat__
01250     08 90 85 F1 | 	sub	ptr___system__dat__, #8
01254     D2 94 61 FC | 	wrlong	result1, arg03
01258     00 94 05 F6 | 	mov	result1, #0
0125c     28 00 90 FD | 	jmp	#LR__0153
01260                 | LR__0151
01260     D2 A0 01 FB | 	rdlong	arg01, arg03
01264     08 90 05 F1 | 	add	ptr___system__dat__, #8
01268     C8 A0 61 FC | 	wrlong	arg01, ptr___system__dat__
0126c     08 90 85 F1 | 	sub	ptr___system__dat__, #8
01270     00 94 05 F6 | 	mov	result1, #0
01274     10 00 90 FD | 	jmp	#LR__0153
01278                 | LR__0152
01278     20 90 05 F1 | 	add	ptr___system__dat__, #32
0127c     C8 14 68 FC | 	wrlong	#10, ptr___system__dat__
01280     20 90 85 F1 | 	sub	ptr___system__dat__, #32
01284     01 94 65 F6 | 	neg	result1, #1
01288                 | LR__0153
01288                 | __system___rxtxioctl_0137_ret
01288     2D 00 64 FD | 	ret
0128c                 | 
0128c                 | __system____dummy_flush_0138
0128c     00 94 05 F6 | 	mov	result1, #0
01290                 | __system____dummy_flush_0138_ret
01290     2D 00 64 FD | 	ret
01294                 | 
01294                 | __system___struct__s_vfs_file_t_putchar_
01294     04 4A 05 F6 | 	mov	COUNT_, #4
01298     A8 00 A0 FD | 	call	#pushregs_
0129c     1C 8E 05 F1 | 	add	objptr, #28
012a0     C7 AA 09 FB | 	rdlong	local01, objptr wz
012a4     1C 8E 85 F1 | 	sub	objptr, #28
012a8     00 94 05 A6 |  if_e	mov	result1, #0
012ac     48 00 90 AD |  if_e	jmp	#LR__0160
012b0     1C 8E 05 F1 | 	add	objptr, #28
012b4     C7 AC 01 FB | 	rdlong	local02, objptr
012b8     D6 AE 01 F6 | 	mov	local03, local02
012bc     1C 8E 85 F1 | 	sub	objptr, #28
012c0     13 AE 45 F7 | 	zerox	local03, #19
012c4     14 AC 45 F0 | 	shr	local02, #20
012c8     02 AC 65 F0 | 	shl	local02, #2
012cc     C4 AC 01 F1 | 	add	local02, __methods__
012d0     D6 AC 01 FB | 	rdlong	local02, local02
012d4     C7 A2 01 F6 | 	mov	arg02, objptr
012d8     C7 B0 01 F6 | 	mov	local04, objptr
012dc     D7 8E 01 F6 | 	mov	objptr, local03
012e0     2D AC 61 FD | 	call	local02
012e4     D8 8E 01 F6 | 	mov	objptr, local04
012e8                 | '     return (i < 0) ? 0 : 1;
012e8     00 94 55 F2 | 	cmps	result1, #0 wc
012ec     00 AA 05 C6 |  if_b	mov	local01, #0
012f0     01 AA 05 36 |  if_ae	mov	local01, #1
012f4     D5 94 01 F6 | 	mov	result1, local01
012f8                 | LR__0160
012f8     A7 F0 03 F6 | 	mov	ptra, fp
012fc     B2 00 A0 FD | 	call	#popregs_
01300                 | __system___struct__s_vfs_file_t_putchar__ret
01300     2D 00 64 FD | 	ret
01304                 | 
01304                 | __system___struct__s_vfs_file_t_getchar_
01304     03 4A 05 F6 | 	mov	COUNT_, #3
01308     A8 00 A0 FD | 	call	#pushregs_
0130c     20 8E 05 F1 | 	add	objptr, #32
01310     C7 A0 09 FB | 	rdlong	arg01, objptr wz
01314     20 8E 85 F1 | 	sub	objptr, #32
01318     01 94 65 A6 |  if_e	neg	result1, #1
0131c     38 00 90 AD |  if_e	jmp	#LR__0170
01320                 | '     return getcf(__this);
01320     20 8E 05 F1 | 	add	objptr, #32
01324     C7 AA 01 FB | 	rdlong	local01, objptr
01328     D5 AC 01 F6 | 	mov	local02, local01
0132c     20 8E 85 F1 | 	sub	objptr, #32
01330     13 AC 45 F7 | 	zerox	local02, #19
01334     14 AA 45 F0 | 	shr	local01, #20
01338     02 AA 65 F0 | 	shl	local01, #2
0133c     C4 AA 01 F1 | 	add	local01, __methods__
01340     D5 AA 01 FB | 	rdlong	local01, local01
01344     C7 A0 01 F6 | 	mov	arg01, objptr
01348     C7 AE 01 F6 | 	mov	local03, objptr
0134c     D6 8E 01 F6 | 	mov	objptr, local02
01350     2D AA 61 FD | 	call	local01
01354     D7 8E 01 F6 | 	mov	objptr, local03
01358                 | LR__0170
01358     A7 F0 03 F6 | 	mov	ptra, fp
0135c     B2 00 A0 FD | 	call	#popregs_
01360                 | __system___struct__s_vfs_file_t_getchar__ret
01360     2D 00 64 FD | 	ret
01364                 | 
01364                 | __system___struct___bas_wrap_sender_tx_
01364     03 4A 05 F6 | 	mov	COUNT_, #3
01368     A8 00 A0 FD | 	call	#pushregs_
0136c     C7 AA 01 FB | 	rdlong	local01, objptr
01370     D5 AC 01 F6 | 	mov	local02, local01
01374     13 AA 45 F7 | 	zerox	local01, #19
01378     14 AC 45 F0 | 	shr	local02, #20
0137c     02 AC 65 F0 | 	shl	local02, #2
01380     C4 AC 01 F1 | 	add	local02, __methods__
01384     D6 AC 01 FB | 	rdlong	local02, local02
01388     C7 AE 01 F6 | 	mov	local03, objptr
0138c     D5 8E 01 F6 | 	mov	objptr, local01
01390     2D AC 61 FD | 	call	local02
01394     D7 8E 01 F6 | 	mov	objptr, local03
01398     01 94 05 F6 | 	mov	result1, #1
0139c     A7 F0 03 F6 | 	mov	ptra, fp
013a0     B2 00 A0 FD | 	call	#popregs_
013a4                 | __system___struct___bas_wrap_sender_tx__ret
013a4     2D 00 64 FD | 	ret
013a8                 | 
013a8                 | __system___struct___bas_wrap_sender_rx_
013a8     03 4A 05 F6 | 	mov	COUNT_, #3
013ac     A8 00 A0 FD | 	call	#pushregs_
013b0     04 8E 05 F1 | 	add	objptr, #4
013b4     C7 AA 01 FB | 	rdlong	local01, objptr
013b8     D5 AC 01 F6 | 	mov	local02, local01
013bc     04 8E 85 F1 | 	sub	objptr, #4
013c0     13 AC 45 F7 | 	zerox	local02, #19
013c4     14 AA 45 F0 | 	shr	local01, #20
013c8     02 AA 65 F0 | 	shl	local01, #2
013cc     C4 AA 01 F1 | 	add	local01, __methods__
013d0     D5 AA 01 FB | 	rdlong	local01, local01
013d4     C7 AE 01 F6 | 	mov	local03, objptr
013d8     D6 8E 01 F6 | 	mov	objptr, local02
013dc     2D AA 61 FD | 	call	local01
013e0     D7 8E 01 F6 | 	mov	objptr, local03
013e4     A7 F0 03 F6 | 	mov	ptra, fp
013e8     B2 00 A0 FD | 	call	#popregs_
013ec                 | __system___struct___bas_wrap_sender_rx__ret
013ec     2D 00 64 FD | 	ret
013f0                 | 
013f0                 | __system___struct___bas_wrap_sender_close_
013f0     03 4A 05 F6 | 	mov	COUNT_, #3
013f4     A8 00 A0 FD | 	call	#pushregs_
013f8     08 8E 05 F1 | 	add	objptr, #8
013fc     C7 AA 01 FB | 	rdlong	local01, objptr
01400     D5 AC 01 F6 | 	mov	local02, local01
01404     08 8E 85 F1 | 	sub	objptr, #8
01408     13 AC 45 F7 | 	zerox	local02, #19
0140c     14 AA 45 F0 | 	shr	local01, #20
01410     02 AA 65 F0 | 	shl	local01, #2
01414     C4 AA 01 F1 | 	add	local01, __methods__
01418     D5 AA 01 FB | 	rdlong	local01, local01
0141c     C7 AE 01 F6 | 	mov	local03, objptr
01420     D6 8E 01 F6 | 	mov	objptr, local02
01424     2D AA 61 FD | 	call	local01
01428     D7 8E 01 F6 | 	mov	objptr, local03
0142c     A7 F0 03 F6 | 	mov	ptra, fp
01430     B2 00 A0 FD | 	call	#popregs_
01434                 | __system___struct___bas_wrap_sender_close__ret
01434     2D 00 64 FD | 	ret
01438                 | 	alignl
01438                 | __system__dat_
01438     00 00 00 00 
0143c     00 00 00 00 | 	byte	$00[8]
01440     03 00 00 00 
01444     00 00 00 00 
01448     00 00 00 00 
0144c     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
01450     00 00 00 00 
01454     00 00 00 00 
01458     00 00 00 00 
0145c     00 00 00 00 
01460     00 00 00 00 
01464     00 00 00 00 | 	byte	$00[24]
01468     01 80 00 00 
0146c     00 00 00 00 
01470     00 00 00 00 
01474     00 00 00 00 | 	byte	$01, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
01478     00 00 00 00 | 	byte	$00, $00, $00, $00
0147c     00 00 80 00 | 	long	(8 {__system___tx})<<20
01480     00 00 90 00 | 	long	(9 {__system___rx})<<20
01484     00 00 00 00 | 	byte	$00, $00, $00, $00
01488     00 00 A0 00 | 	long	(10 {__system___rxtxioctl_0137})<<20
0148c     00 00 B0 00 | 	long	(11 {__system____dummy_flush_0138})<<20
01490     00 00 00 00 
01494     00 00 00 00 | 	byte	$00[8]
01498     01 00 00 00 
0149c     02 80 00 00 
014a0     00 00 00 00 
014a4     00 00 00 00 | 	byte	$01, $00, $00, $00, $02, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
014a8     00 00 00 00 
014ac     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
014b0     00 00 80 00 | 	long	(8 {__system___tx})<<20
014b4     00 00 90 00 | 	long	(9 {__system___rx})<<20
014b8     00 00 00 00 | 	byte	$00, $00, $00, $00
014bc     00 00 A0 00 | 	long	(10 {__system___rxtxioctl_0137})<<20
014c0     00 00 B0 00 | 	long	(11 {__system____dummy_flush_0138})<<20
014c4     00 00 00 00 
014c8     00 00 00 00 | 	byte	$00[8]
014cc     01 00 00 00 
014d0     02 80 00 00 
014d4     00 00 00 00 
014d8     00 00 00 00 | 	byte	$01, $00, $00, $00, $02, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
014dc     00 00 00 00 
014e0     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
014e4     00 00 80 00 | 	long	(8 {__system___tx})<<20
014e8     00 00 90 00 | 	long	(9 {__system___rx})<<20
014ec     00 00 00 00 | 	byte	$00, $00, $00, $00
014f0     00 00 A0 00 | 	long	(10 {__system___rxtxioctl_0137})<<20
014f4     00 00 B0 00 | 	long	(11 {__system____dummy_flush_0138})<<20
014f8     00 00 00 00 
      ...             
01660     00 00 00 00 
01664     00 00 00 00 | 	byte	$00[368]
01668                 | __methodtable__
01668     64 13 00 00 | 	long	@__system___struct___bas_wrap_sender_tx_
0166c     A8 13 00 00 | 	long	@__system___struct___bas_wrap_sender_rx_
01670     F0 13 00 00 | 	long	@__system___struct___bas_wrap_sender_close_
01674     94 12 00 00 | 	long	@__system___struct__s_vfs_file_t_putchar_
01678     04 13 00 00 | 	long	@__system___struct__s_vfs_file_t_getchar_
0167c     44 0E 00 00 | 	long	@__system____default_putc
01680     18 0D 00 00 | 	long	@__system____default_getc
01684     F0 0E 00 00 | 	long	@__system____default_flush
01688     B4 09 00 00 | 	long	@__system___tx
0168c     F4 09 00 00 | 	long	@__system___rx
01690     34 12 00 00 | 	long	@__system___rxtxioctl_0137
01694     8C 12 00 00 | 	long	@__system____dummy_flush_0138
01698                 | objmem
01698     00 00 00 00 
      ...             
01794     00 00 00 00 
01798     00 00 00 00 | 	long	0[65]
0179c                 | stackspace
0179c     00 00 00 00 | 	long	0[1]
017a0 0cc             | 	org	COG_BSS_START
017a0 0cc             | _var01
017a0 0cc             | 	res	1
017a0 0cd             | _var02
017a0 0cd             | 	res	1
017a0 0ce             | _var03
017a0 0ce             | 	res	1
017a0 0cf             | _var04
017a0 0cf             | 	res	1
017a0 0d0             | arg01
017a0 0d0             | 	res	1
017a0 0d1             | arg02
017a0 0d1             | 	res	1
017a0 0d2             | arg03
017a0 0d2             | 	res	1
017a0 0d3             | arg04
017a0 0d3             | 	res	1
017a0 0d4             | arg05
017a0 0d4             | 	res	1
017a0 0d5             | local01
017a0 0d5             | 	res	1
017a0 0d6             | local02
017a0 0d6             | 	res	1
017a0 0d7             | local03
017a0 0d7             | 	res	1
017a0 0d8             | local04
017a0 0d8             | 	res	1
017a0 0d9             | local05
017a0 0d9             | 	res	1
017a0 0da             | local06
017a0 0da             | 	res	1
017a0 0db             | local07
017a0 0db             | 	res	1
017a0 0dc             | local08
017a0 0dc             | 	res	1
017a0 0dd             | local09
017a0 0dd             | 	res	1
017a0 0de             | local10
017a0 0de             | 	res	1
017a0 0df             | local11
017a0 0df             | 	res	1
017a0 0e0             | local12
017a0 0e0             | 	res	1
017a0 0e1             | local13
017a0 0e1             | 	res	1
017a0 0e2             | local14
017a0 0e2             | 	res	1
017a0 0e3             | local15
017a0 0e3             | 	res	1
017a0 0e4             | muldiva_
017a0 0e4             | 	res	1
017a0 0e5             | muldivb_
017a0 0e5             | 	res	1
017a0 0e6             | 	fit	480
017a0 0e6             | 
