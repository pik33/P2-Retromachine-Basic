00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic025.p2asm"
00000                 | con
00000                 | 	_clkfreq = 337000000
00000                 | 	_clkmode = 21844219
00000                 | 	HEAPSIZE = 192000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 25
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getivar = 17
00000                 | 	fun_getuvar = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1023
00000                 | 	maxstack = 512
00000                 | 	maxfor = 128
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 337000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $14d50fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 A8 A6 80 FF 
00420 007 00 F0 65 FD | 	hubset	##21844216
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a A8 A6 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##21844219
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 1B 0B 8A FF 
00440 00f 14 80 6C FC | 	wrlong	##337000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 68 79 A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 32 65 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 31 63 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 32 63 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 64 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 62 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 31 63 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 32 65 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec C0 54 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 84 52 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 C8 42 06 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 64 45 03 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 C8 40 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 C8 AD 02 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 A4 4C 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 3C DF 02 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 04 08 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 EC 06 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa A4 04 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 7C 16 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 48 39 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' 
00804                 | ' 
00804                 | ' '----------------------------------- this is the end of the main loop ------------------------------------------------------------------
00804                 | ' 
00804                 | ' sub housekeeper
00804                 | _housekeeper
00804                 | ' 
00804                 | ' do
00804                 | LR__0001
00804                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
00804     45 E4 05 F1 | 	add	objptr, #69
00808                 | LR__0002
00808     F2 12 02 FB | 	rdlong	arg01, objptr
0080c     01 12 0E F2 | 	cmp	arg01, #1 wz
00810     F4 FF 9F 5D |  if_ne	jmp	#LR__0002
00814     7A 00 00 FF 
00818     93 E5 05 F1 | 	add	objptr, ##62867
0081c     F2 12 02 FB | 	rdlong	arg01, objptr
00820     01 12 06 F1 | 	add	arg01, #1
00824     F2 12 62 FC | 	wrlong	arg01, objptr
00828     7A 00 00 FF 
0082c     D8 E5 85 F1 | 	sub	objptr, ##62936
00830     80 00 B0 FD | 	call	#_gethdi
00834     05 12 06 F6 | 	mov	arg01, #5
00838     20 A7 B1 FD | 	call	#__system___waitms
0083c     7A 00 00 FF 
00840     D8 E5 05 F1 | 	add	objptr, ##62936
00844     F2 12 02 FB | 	rdlong	arg01, objptr
00848     01 12 06 F1 | 	add	arg01, #1
0084c     F2 12 62 FC | 	wrlong	arg01, objptr
00850     7A 00 00 FF 
00854     D8 E5 85 F1 | 	sub	objptr, ##62936
00858     58 00 B0 FD | 	call	#_gethdi
0085c     05 12 06 F6 | 	mov	arg01, #5
00860     F8 A6 B1 FD | 	call	#__system___waitms
00864     7A 00 00 FF 
00868     D8 E5 05 F1 | 	add	objptr, ##62936
0086c     F2 12 02 FB | 	rdlong	arg01, objptr
00870     01 12 06 F1 | 	add	arg01, #1
00874     F2 12 62 FC | 	wrlong	arg01, objptr
00878     7A 00 00 FF 
0087c     D8 E5 85 F1 | 	sub	objptr, ##62936
00880     30 00 B0 FD | 	call	#_gethdi
00884     05 12 06 F6 | 	mov	arg01, #5
00888     D0 A6 B1 FD | 	call	#__system___waitms
0088c     7A 00 00 FF 
00890     D8 E5 05 F1 | 	add	objptr, ##62936
00894     F2 12 02 FB | 	rdlong	arg01, objptr
00898     01 12 06 F1 | 	add	arg01, #1
0089c     F2 12 62 FC | 	wrlong	arg01, objptr
008a0     7A 00 00 FF 
008a4     D8 E5 85 F1 | 	sub	objptr, ##62936
008a8     08 00 B0 FD | 	call	#_gethdi
008ac     54 FF 9F FD | 	jmp	#LR__0001
008b0                 | _housekeeper_ret
008b0     2D 00 64 FD | 	ret
008b4                 | 
008b4                 | ' 
008b4                 | ' 
008b4                 | ' sub gethdi
008b4                 | _gethdi
008b4     03 4A 05 F6 | 	mov	COUNT_, #3
008b8     A8 00 A0 FD | 	call	#pushregs_
008bc                 | '   x := mouse_xacc
008bc     14 00 00 FF 
008c0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
008c4     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
008c8                 | '   y := mouse_yacc
008c8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008cc     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
008d0     7A 00 00 FF 
008d4     50 E5 05 F1 | 	add	objptr, ##62800
008d8     F2 14 62 FC | 	wrlong	arg02, objptr
008dc     04 E4 05 F1 | 	add	objptr, #4
008e0     F2 12 62 FC | 	wrlong	arg01, objptr
008e4                 | '   x := 0
008e4                 | '   y := mouse_zacc
008e4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008e8     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
008ec     08 E4 05 F1 | 	add	objptr, #8
008f0     F2 FA 61 FC | 	wrlong	result1, objptr
008f4                 | '   return mouse_bstate&7
008f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008f8     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
008fc     14 00 00 FF 
00900     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
00904     07 FA 05 F5 | 	and	result1, #7
00908     04 E4 85 F1 | 	sub	objptr, #4
0090c     F2 FA 61 FC | 	wrlong	result1, objptr
00910     7A 00 00 FF 
00914     58 E5 85 F1 | 	sub	objptr, ##62808
00918     00 1E 06 F6 | 	mov	local01, #0
0091c                 | ' 
0091c                 | '   mousex,mousey=kbm.mouse_xy()
0091c                 | '   dummy,mousew=kbm.mouse_scroll()
0091c                 | '   mousek=kbm.mouse_buttons()
0091c                 | '   
0091c                 | '   i=0:
0091c                 | '   for j=0 to 6
0091c     00 20 06 F6 | 	mov	local02, #0
00920                 | LR__0010
00920                 | '     if kbm.hidpad_id(j)>0 then
00920     10 13 02 F6 | 	mov	arg01, local02
00924     64 9C B1 FD | 	call	#_usbnew_spin2_hidpad_id
00928     01 FA 55 F2 | 	cmps	result1, #1 wc
0092c     8C 00 90 CD |  if_b	jmp	#LR__0011
00930     10 13 02 F6 | 	mov	arg01, local02
00934     00 14 06 F6 | 	mov	arg02, #0
00938     B4 9C B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0093c     FD 22 02 F6 | 	mov	local03, result1
00940     10 13 02 F6 | 	mov	arg01, local02
00944     01 14 06 F6 | 	mov	arg02, #1
00948     A4 9C B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0094c     60 00 00 FF 
00950     00 22 06 F1 | 	add	local03, ##49152
00954     0F 22 46 F0 | 	shr	local03, #15
00958     01 14 06 F6 | 	mov	arg02, #1
0095c     11 15 02 F1 | 	add	arg02, local03
00960     60 00 00 FF 
00964     00 FA 05 F1 | 	add	result1, ##49152
00968     0F FA 45 F0 | 	shr	result1, #15
0096c     01 12 06 F6 | 	mov	arg01, #1
00970     FD 12 02 F1 | 	add	arg01, result1
00974     0F 23 02 F6 | 	mov	local03, local01
00978     02 22 66 F0 | 	shl	local03, #2
0097c     7A 00 00 FF 
00980     60 E5 05 F1 | 	add	objptr, ##62816
00984     F2 22 02 F1 | 	add	local03, objptr
00988     02 12 66 F0 | 	shl	arg01, #2
0098c     09 15 02 F1 | 	add	arg02, arg01
00990     11 15 62 FC | 	wrlong	arg02, local03
00994     0F 23 02 F6 | 	mov	local03, local01
00998     02 22 66 F0 | 	shl	local03, #2
0099c     1C E4 05 F1 | 	add	objptr, #28
009a0     F2 22 02 F1 | 	add	local03, objptr
009a4     10 13 02 F6 | 	mov	arg01, local02
009a8     7A 00 00 FF 
009ac     7C E5 85 F1 | 	sub	objptr, ##62844
009b0     08 9C B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
009b4     11 FB 61 FC | 	wrlong	result1, local03
009b8     01 1E 06 F1 | 	add	local01, #1
009bc                 | LR__0011
009bc     01 20 06 F1 | 	add	local02, #1
009c0     07 20 16 F2 | 	cmp	local02, #7 wc
009c4     58 FF 9F CD |  if_b	jmp	#LR__0010
009c8     97 22 48 FB | 	callpa	#(@LR__0013-@LR__0012)>>2,fcache_load_ptr_
009cc                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
009cc                 | LR__0012
009cc     07 1E 16 F2 | 	cmp	local01, #7 wc
009d0     3C 00 90 3D |  if_ae	jmp	#LR__0014
009d4     0F 23 02 F6 | 	mov	local03, local01
009d8     02 22 66 F0 | 	shl	local03, #2
009dc     7A 00 00 FF 
009e0     60 E5 05 F1 | 	add	objptr, ##62816
009e4     F2 22 02 F1 | 	add	local03, objptr
009e8     11 01 68 FC | 	wrlong	#0, local03
009ec     0F 23 02 F6 | 	mov	local03, local01
009f0     02 22 66 F0 | 	shl	local03, #2
009f4     1C E4 05 F1 | 	add	objptr, #28
009f8     F2 22 02 F1 | 	add	local03, objptr
009fc     11 01 68 FC | 	wrlong	#0, local03
00a00     01 1E 06 F1 | 	add	local01, #1
00a04     7A 00 00 FF 
00a08     7C E5 85 F1 | 	sub	objptr, ##62844
00a0c     BC FF 9F FD | 	jmp	#LR__0012
00a10                 | LR__0013
00a10                 | LR__0014
00a10     A7 F0 03 F6 | 	mov	ptra, fp
00a14     B2 00 A0 FD | 	call	#popregs_
00a18                 | _gethdi_ret
00a18     2D 00 64 FD | 	ret
00a1c                 | 
00a1c                 | ' 
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' '----------------------------------- The line interpreter/tokenizer --------------------------------------------------------------------
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' 
00a1c                 | ' sub interpret
00a1c                 | _interpret
00a1c     22 4A 05 F6 | 	mov	COUNT_, #34
00a20     A8 00 A0 FD | 	call	#pushregs_
00a24     01 00 00 FF 
00a28     4C F0 07 F1 | 	add	ptra, ##588
00a2c     56 00 00 FF 
00a30     80 E5 05 F1 | 	add	objptr, ##44416
00a34     F2 1E 02 FB | 	rdlong	local01, objptr
00a38     04 E4 05 F1 | 	add	objptr, #4
00a3c     F2 1E 62 FC | 	wrlong	local01, objptr
00a40     04 E4 05 F1 | 	add	objptr, #4
00a44     FF FF FF FF 
00a48     F2 FE 6B FC | 	wrlong	##-1, objptr
00a4c     24 00 00 FF 
00a50     6C E4 05 F1 | 	add	objptr, ##18540
00a54     F2 00 68 FC | 	wrlong	#0, objptr
00a58     11 00 00 FF 
00a5c     14 E4 85 F1 | 	sub	objptr, ##8724
00a60     F2 00 68 FC | 	wrlong	#0, objptr
00a64     69 00 00 FF 
00a68     E0 E5 85 F1 | 	sub	objptr, ##54240
00a6c     00 20 06 F6 | 	mov	local02, #0
00a70                 | LR__0020
00a70                 | ' 
00a70                 | ' ' ---------------------------------------------------  Pass 1: Split the line to parts, detect and concatenate strings
00a70                 | ' 
00a70                 | ' fullline$=line$: cont=-1  : linenum=0 : lineptr=0 : err=0
00a70                 | ' 
00a70                 | ' 108 for i=0 to 125: separators(i)=0 :next i
00a70     00 22 06 F6 | 	mov	local03, #0
00a74     20 4E 05 F1 | 	add	fp, #32
00a78     97 0E 48 FB | 	callpa	#(@LR__0022-@LR__0021)>>2,fcache_load_ptr_
00a7c                 | LR__0021
00a7c     11 25 02 F6 | 	mov	local04, local03
00a80     02 24 66 F0 | 	shl	local04, #2
00a84     A7 24 02 F1 | 	add	local04, fp
00a88     12 01 68 FC | 	wrlong	#0, local04
00a8c     01 22 06 F1 | 	add	local03, #1
00a90     7E 22 56 F2 | 	cmps	local03, #126 wc
00a94     E4 FF 9F CD |  if_b	jmp	#LR__0021
00a98                 | LR__0022
00a98     20 4E 85 F1 | 	sub	fp, #32
00a9c                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
00a9c     00 22 06 F6 | 	mov	local03, #0
00aa0     54 00 00 FF 
00aa4     70 E5 05 F1 | 	add	objptr, ##43376
00aa8     97 20 48 FB | 	callpa	#(@LR__0024-@LR__0023)>>2,fcache_load_ptr_
00aac                 | LR__0023
00aac     11 1F 02 F6 | 	mov	local01, local03
00ab0     03 1E 66 F0 | 	shl	local01, #3
00ab4     F2 1E 02 F1 | 	add	local01, objptr
00ab8     51 01 00 FF 
00abc     3A 16 06 F6 | 	mov	arg03, ##@LR__4397
00ac0     0F 17 62 FC | 	wrlong	arg03, local01
00ac4     11 1F 02 F6 | 	mov	local01, local03
00ac8     03 1E 66 F0 | 	shl	local01, #3
00acc     F2 26 02 F6 | 	mov	local05, objptr
00ad0     F2 1E 02 F1 | 	add	local01, objptr
00ad4     00 28 06 F6 | 	mov	local06, #0
00ad8     04 1E 06 F1 | 	add	local01, #4
00adc     0F 01 68 FC | 	wrlong	#0, local01
00ae0     01 22 06 F1 | 	add	local03, #1
00ae4     7E 22 56 F2 | 	cmps	local03, #126 wc
00ae8     C0 FF 9F CD |  if_b	jmp	#LR__0023
00aec                 | LR__0024
00aec     02 00 00 FF 
00af0     10 E4 05 F1 | 	add	objptr, ##1040
00af4     F2 12 02 FB | 	rdlong	arg01, objptr
00af8     56 00 00 FF 
00afc     80 E5 85 F1 | 	sub	objptr, ##44416
00b00     E0 C5 B1 FD | 	call	#__system__RTrim_S
00b04     FD 12 02 F6 | 	mov	arg01, result1
00b08     18 C5 B1 FD | 	call	#__system__LTrim_S
00b0c     56 00 00 FF 
00b10     80 E5 05 F1 | 	add	objptr, ##44416
00b14     F2 FA 61 FC | 	wrlong	result1, objptr
00b18     51 01 00 FF 
00b1c     3B 1E 06 F6 | 	mov	local01, ##@LR__4398
00b20     24 00 00 FF 
00b24     A4 E4 05 F1 | 	add	objptr, ##18596
00b28     F2 1E 62 FC | 	wrlong	local01, objptr
00b2c     24 00 00 FF 
00b30     A4 E4 85 F1 | 	sub	objptr, ##18596
00b34     F2 12 02 FB | 	rdlong	arg01, objptr
00b38     56 00 00 FF 
00b3c     80 E5 85 F1 | 	sub	objptr, ##44416
00b40     09 2B 02 F6 | 	mov	local07, arg01
00b44     97 06 48 FB | 	callpa	#(@LR__0026-@LR__0025)>>2,fcache_load_ptr_
00b48                 | LR__0025
00b48     15 FB C9 FA | 	rdbyte	result1, local07 wz
00b4c     01 2A 06 51 |  if_ne	add	local07, #1
00b50     F4 FF 9F 5D |  if_ne	jmp	#LR__0025
00b54                 | LR__0026
00b54     09 2B 8A F1 | 	sub	local07, arg01 wz
00b58     7B 00 00 FF 
00b5c     28 E4 05 F1 | 	add	objptr, ##63016
00b60     F2 2A 62 FC | 	wrlong	local07, objptr
00b64                 | ' if l=0 then goto 101
00b64     7B 00 00 FF 
00b68     28 E4 85 F1 | 	sub	objptr, ##63016
00b6c     D4 26 90 AD |  if_e	jmp	#LR__0148
00b70     7B 00 00 FF 
00b74     2C E4 05 F1 | 	add	objptr, ##63020
00b78     F2 00 68 FC | 	wrlong	#0, objptr
00b7c                 | ' ' before we split the line, we have to find colons that are inside a string,,,,
00b7c                 | ' for i=1 to len(line$)
00b7c     01 22 06 F6 | 	mov	local03, #1
00b80     24 00 00 FF 
00b84     AC E4 85 F1 | 	sub	objptr, ##18604
00b88     F2 12 02 FB | 	rdlong	arg01, objptr
00b8c     56 00 00 FF 
00b90     80 E5 85 F1 | 	sub	objptr, ##44416
00b94     09 2B 02 F6 | 	mov	local07, arg01
00b98     97 06 48 FB | 	callpa	#(@LR__0028-@LR__0027)>>2,fcache_load_ptr_
00b9c                 | LR__0027
00b9c     15 FB C9 FA | 	rdbyte	result1, local07 wz
00ba0     01 2A 06 51 |  if_ne	add	local07, #1
00ba4     F4 FF 9F 5D |  if_ne	jmp	#LR__0027
00ba8                 | LR__0028
00ba8     09 2B 82 F1 | 	sub	local07, arg01
00bac     15 2D 02 F6 | 	mov	local08, local07
00bb0     01 2C 06 F1 | 	add	local08, #1
00bb4                 | LR__0029
00bb4     16 23 52 F2 | 	cmps	local03, local08 wc
00bb8     00 01 90 3D |  if_ae	jmp	#LR__0032
00bbc                 | ' 
00bbc                 | '   if mid$(line$,i,1)="""" andalso d=0 then 
00bbc     56 00 00 FF 
00bc0     80 E5 05 F1 | 	add	objptr, ##44416
00bc4     F2 12 02 FB | 	rdlong	arg01, objptr
00bc8     56 00 00 FF 
00bcc     80 E5 85 F1 | 	sub	objptr, ##44416
00bd0     11 15 02 F6 | 	mov	arg02, local03
00bd4     01 16 06 F6 | 	mov	arg03, #1
00bd8     EC C1 B1 FD | 	call	#__system__Mid_S
00bdc     FD 12 02 F6 | 	mov	arg01, result1
00be0     51 01 00 FF 
00be4     3C 14 06 F6 | 	mov	arg02, ##@LR__4399
00be8     A4 A0 B1 FD | 	call	#__system___string_cmp
00bec     00 FA 0D F2 | 	cmp	result1, #0 wz
00bf0     2C 00 90 5D |  if_ne	jmp	#LR__0030
00bf4     7B 00 00 FF 
00bf8     2C E4 05 F1 | 	add	objptr, ##63020
00bfc     F2 24 0A FB | 	rdlong	local04, objptr wz
00c00     7B 00 00 FF 
00c04     2C E4 85 F1 | 	sub	objptr, ##63020
00c08     7B 00 00 AF 
00c0c     2C E4 05 A1 |  if_e	add	objptr, ##63020
00c10     F2 02 68 AC |  if_e	wrlong	#1, objptr
00c14     7B 00 00 AF 
00c18     2C E4 85 A1 |  if_e	sub	objptr, ##63020
00c1c     60 00 90 AD |  if_e	jmp	#LR__0031
00c20                 | LR__0030
00c20     56 00 00 FF 
00c24     80 E5 05 F1 | 	add	objptr, ##44416
00c28     F2 12 02 FB | 	rdlong	arg01, objptr
00c2c     56 00 00 FF 
00c30     80 E5 85 F1 | 	sub	objptr, ##44416
00c34     11 15 02 F6 | 	mov	arg02, local03
00c38     01 16 06 F6 | 	mov	arg03, #1
00c3c     88 C1 B1 FD | 	call	#__system__Mid_S
00c40     FD 12 02 F6 | 	mov	arg01, result1
00c44     51 01 00 FF 
00c48     3E 14 06 F6 | 	mov	arg02, ##@LR__4400
00c4c     40 A0 B1 FD | 	call	#__system___string_cmp
00c50     00 FA 0D F2 | 	cmp	result1, #0 wz
00c54     7B 00 00 AF 
00c58     2C E4 05 A1 |  if_e	add	objptr, ##63020
00c5c     F2 24 02 AB |  if_e	rdlong	local04, objptr
00c60     7B 00 00 AF 
00c64     2C E4 85 A1 |  if_e	sub	objptr, ##63020
00c68     01 24 0E A2 |  if_e	cmp	local04, #1 wz
00c6c     7B 00 00 AF 
00c70     2C E4 05 A1 |  if_e	add	objptr, ##63020
00c74     F2 00 68 AC |  if_e	wrlong	#0, objptr
00c78     7B 00 00 AF 
00c7c     2C E4 85 A1 |  if_e	sub	objptr, ##63020
00c80                 | LR__0031
00c80     11 1F 02 F6 | 	mov	local01, local03
00c84     03 1E 66 F0 | 	shl	local01, #3
00c88     54 00 00 FF 
00c8c     70 E5 05 F1 | 	add	objptr, ##43376
00c90     F2 26 02 F6 | 	mov	local05, objptr
00c94     F2 1E 02 F1 | 	add	local01, objptr
00c98     26 00 00 FF 
00c9c     BC E4 05 F1 | 	add	objptr, ##19644
00ca0     F2 28 02 FB | 	rdlong	local06, objptr
00ca4     7B 00 00 FF 
00ca8     2C E4 85 F1 | 	sub	objptr, ##63020
00cac     04 1E 06 F1 | 	add	local01, #4
00cb0     0F 29 62 FC | 	wrlong	local06, local01
00cb4     01 22 06 F1 | 	add	local03, #1
00cb8     F8 FE 9F FD | 	jmp	#LR__0029
00cbc                 | LR__0032
00cbc     01 22 06 F6 | 	mov	local03, #1
00cc0                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop
00cc0                 | LR__0033
00cc0     56 00 00 FF 
00cc4     80 E5 05 F1 | 	add	objptr, ##44416
00cc8     F2 12 02 FB | 	rdlong	arg01, objptr
00ccc     56 00 00 FF 
00cd0     80 E5 85 F1 | 	sub	objptr, ##44416
00cd4     11 15 02 F6 | 	mov	arg02, local03
00cd8     01 16 06 F6 | 	mov	arg03, #1
00cdc     E8 C0 B1 FD | 	call	#__system__Mid_S
00ce0     FD 12 02 F6 | 	mov	arg01, result1
00ce4     51 01 00 FF 
00ce8     40 2E 06 F6 | 	mov	local09, ##@LR__4401
00cec     17 15 02 F6 | 	mov	arg02, local09
00cf0     9C 9F B1 FD | 	call	#__system___string_cmp
00cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
00cf8     34 00 90 5D |  if_ne	jmp	#LR__0034
00cfc     11 27 02 F6 | 	mov	local05, local03
00d00     03 26 66 F0 | 	shl	local05, #3
00d04     54 00 00 FF 
00d08     70 E5 05 F1 | 	add	objptr, ##43376
00d0c     F2 28 02 F6 | 	mov	local06, objptr
00d10     F2 26 02 F1 | 	add	local05, objptr
00d14     04 26 06 F1 | 	add	local05, #4
00d18     13 31 02 FB | 	rdlong	local10, local05
00d1c     04 26 86 F1 | 	sub	local05, #4
00d20     18 33 0A F6 | 	mov	local11, local10 wz
00d24     54 00 00 FF 
00d28     70 E5 85 F1 | 	sub	objptr, ##43376
00d2c     24 00 90 AD |  if_e	jmp	#LR__0035
00d30                 | LR__0034
00d30     7B 00 00 FF 
00d34     28 E4 05 F1 | 	add	objptr, ##63016
00d38     F2 34 02 FB | 	rdlong	local12, objptr
00d3c     7B 00 00 FF 
00d40     28 E4 85 F1 | 	sub	objptr, ##63016
00d44     1A 37 02 F6 | 	mov	local13, local12
00d48     1B 23 52 F2 | 	cmps	local03, local13 wc
00d4c     01 22 06 C1 |  if_b	add	local03, #1
00d50     6C FF 9F CD |  if_b	jmp	#LR__0033
00d54                 | LR__0035
00d54                 | ' 
00d54                 | ' 'let d=instr(1,line$,":"): if d>0 andalso d<len(line$) andalso lparts(d).token=0  then let rest$=trim$(right$(line$,len(line$)-d)):line$=trim$(left$(line$,d-1)) else rest$=""  
00d54                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 
00d54     7B 00 00 FF 
00d58     28 E4 05 F1 | 	add	objptr, ##63016
00d5c     F2 1E 02 FB | 	rdlong	local01, objptr
00d60     7B 00 00 FF 
00d64     28 E4 85 F1 | 	sub	objptr, ##63016
00d68     0F 23 52 F2 | 	cmps	local03, local01 wc
00d6c     A4 00 90 3D |  if_ae	jmp	#LR__0038
00d70     56 00 00 FF 
00d74     80 E5 05 F1 | 	add	objptr, ##44416
00d78     F2 28 02 FB | 	rdlong	local06, objptr
00d7c     56 00 00 FF 
00d80     80 E5 85 F1 | 	sub	objptr, ##44416
00d84     14 13 02 F6 | 	mov	arg01, local06
00d88     09 2B 02 F6 | 	mov	local07, arg01
00d8c     97 06 48 FB | 	callpa	#(@LR__0037-@LR__0036)>>2,fcache_load_ptr_
00d90                 | LR__0036
00d90     15 FB C9 FA | 	rdbyte	result1, local07 wz
00d94     01 2A 06 51 |  if_ne	add	local07, #1
00d98     F4 FF 9F 5D |  if_ne	jmp	#LR__0036
00d9c                 | LR__0037
00d9c     09 2B 82 F1 | 	sub	local07, arg01
00da0     15 15 02 F6 | 	mov	arg02, local07
00da4     11 15 82 F1 | 	sub	arg02, local03
00da8     14 13 02 F6 | 	mov	arg01, local06
00dac     88 BF B1 FD | 	call	#__system__Right_S
00db0     FD 12 02 F6 | 	mov	arg01, result1
00db4     2C C3 B1 FD | 	call	#__system__RTrim_S
00db8     FD 12 02 F6 | 	mov	arg01, result1
00dbc     64 C2 B1 FD | 	call	#__system__LTrim_S
00dc0     7B 00 00 FF 
00dc4     30 E4 05 F1 | 	add	objptr, ##63024
00dc8     F2 FA 61 FC | 	wrlong	result1, objptr
00dcc     24 00 00 FF 
00dd0     B0 E4 85 F1 | 	sub	objptr, ##18608
00dd4     F2 12 02 FB | 	rdlong	arg01, objptr
00dd8     56 00 00 FF 
00ddc     80 E5 85 F1 | 	sub	objptr, ##44416
00de0     01 22 86 F1 | 	sub	local03, #1
00de4     11 15 02 F6 | 	mov	arg02, local03
00de8     C4 BE B1 FD | 	call	#__system__Left_S
00dec     FD 12 02 F6 | 	mov	arg01, result1
00df0     F0 C2 B1 FD | 	call	#__system__RTrim_S
00df4     FD 12 02 F6 | 	mov	arg01, result1
00df8     28 C2 B1 FD | 	call	#__system__LTrim_S
00dfc     56 00 00 FF 
00e00     80 E5 05 F1 | 	add	objptr, ##44416
00e04     F2 FA 61 FC | 	wrlong	result1, objptr
00e08     56 00 00 FF 
00e0c     80 E5 85 F1 | 	sub	objptr, ##44416
00e10     1C 00 90 FD | 	jmp	#LR__0039
00e14                 | LR__0038
00e14     51 01 00 FF 
00e18     42 1E 06 F6 | 	mov	local01, ##@LR__4402
00e1c     7B 00 00 FF 
00e20     30 E4 05 F1 | 	add	objptr, ##63024
00e24     F2 1E 62 FC | 	wrlong	local01, objptr
00e28     7B 00 00 FF 
00e2c     30 E4 85 F1 | 	sub	objptr, ##63024
00e30                 | LR__0039
00e30                 | ' 'print "line$=";line$
00e30                 | ' 'print "rest$=";rest$
00e30                 | ' 
00e30                 | ' 
00e30                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not last part
00e30     56 00 00 FF 
00e34     88 E5 05 F1 | 	add	objptr, ##44424
00e38     F2 1E 02 FB | 	rdlong	local01, objptr
00e3c     56 00 00 FF 
00e40     88 E5 85 F1 | 	sub	objptr, ##44424
00e44     FF FF 7F FF 
00e48     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00e4c     3C 00 90 5D |  if_ne	jmp	#LR__0040
00e50     7B 00 00 FF 
00e54     30 E4 05 F1 | 	add	objptr, ##63024
00e58     F2 12 02 FB | 	rdlong	arg01, objptr
00e5c     7B 00 00 FF 
00e60     30 E4 85 F1 | 	sub	objptr, ##63024
00e64     51 01 00 FF 
00e68     43 14 06 F6 | 	mov	arg02, ##@LR__4403
00e6c     20 9E B1 FD | 	call	#__system___string_cmp
00e70     00 FA 0D F2 | 	cmp	result1, #0 wz
00e74     56 00 00 5F 
00e78     88 E5 05 51 |  if_ne	add	objptr, ##44424
00e7c     F2 00 68 5C |  if_ne	wrlong	#0, objptr
00e80     56 00 00 5F 
00e84     88 E5 85 51 |  if_ne	sub	objptr, ##44424
00e88     08 01 90 5D |  if_ne	jmp	#LR__0044
00e8c                 | LR__0040
00e8c                 | ' if cont=-1 andalso rest$="" then cont=3 : goto 107		' this is the first AND last part
00e8c     56 00 00 FF 
00e90     88 E5 05 F1 | 	add	objptr, ##44424
00e94     F2 1E 02 FB | 	rdlong	local01, objptr
00e98     56 00 00 FF 
00e9c     88 E5 85 F1 | 	sub	objptr, ##44424
00ea0     FF FF 7F FF 
00ea4     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00ea8     3C 00 90 5D |  if_ne	jmp	#LR__0041
00eac     7B 00 00 FF 
00eb0     30 E4 05 F1 | 	add	objptr, ##63024
00eb4     F2 12 02 FB | 	rdlong	arg01, objptr
00eb8     7B 00 00 FF 
00ebc     30 E4 85 F1 | 	sub	objptr, ##63024
00ec0     51 01 00 FF 
00ec4     44 14 06 F6 | 	mov	arg02, ##@LR__4404
00ec8     C4 9D B1 FD | 	call	#__system___string_cmp
00ecc     00 FA 0D F2 | 	cmp	result1, #0 wz
00ed0     56 00 00 AF 
00ed4     88 E5 05 A1 |  if_e	add	objptr, ##44424
00ed8     F2 06 68 AC |  if_e	wrlong	#3, objptr
00edc     56 00 00 AF 
00ee0     88 E5 85 A1 |  if_e	sub	objptr, ##44424
00ee4     AC 00 90 AD |  if_e	jmp	#LR__0044
00ee8                 | LR__0041
00ee8                 | ' if cont=4 andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
00ee8     56 00 00 FF 
00eec     88 E5 05 F1 | 	add	objptr, ##44424
00ef0     F2 1E 02 FB | 	rdlong	local01, objptr
00ef4     56 00 00 FF 
00ef8     88 E5 85 F1 | 	sub	objptr, ##44424
00efc     04 1E 0E F2 | 	cmp	local01, #4 wz
00f00     3C 00 90 5D |  if_ne	jmp	#LR__0042
00f04     7B 00 00 FF 
00f08     30 E4 05 F1 | 	add	objptr, ##63024
00f0c     F2 12 02 FB | 	rdlong	arg01, objptr
00f10     7B 00 00 FF 
00f14     30 E4 85 F1 | 	sub	objptr, ##63024
00f18     51 01 00 FF 
00f1c     45 14 06 F6 | 	mov	arg02, ##@LR__4405
00f20     6C 9D B1 FD | 	call	#__system___string_cmp
00f24     00 FA 0D F2 | 	cmp	result1, #0 wz
00f28     56 00 00 5F 
00f2c     88 E5 05 51 |  if_ne	add	objptr, ##44424
00f30     F2 02 68 5C |  if_ne	wrlong	#1, objptr
00f34     56 00 00 5F 
00f38     88 E5 85 51 |  if_ne	sub	objptr, ##44424
00f3c     54 00 90 5D |  if_ne	jmp	#LR__0044
00f40                 | LR__0042
00f40                 | ' if cont=4 andalso rest$="" then cont=2 :goto 107		' this is the last, and not the first, part
00f40     56 00 00 FF 
00f44     88 E5 05 F1 | 	add	objptr, ##44424
00f48     F2 1E 02 FB | 	rdlong	local01, objptr
00f4c     56 00 00 FF 
00f50     88 E5 85 F1 | 	sub	objptr, ##44424
00f54     04 1E 0E F2 | 	cmp	local01, #4 wz
00f58     38 00 90 5D |  if_ne	jmp	#LR__0043
00f5c     7B 00 00 FF 
00f60     30 E4 05 F1 | 	add	objptr, ##63024
00f64     F2 12 02 FB | 	rdlong	arg01, objptr
00f68     7B 00 00 FF 
00f6c     30 E4 85 F1 | 	sub	objptr, ##63024
00f70     51 01 00 FF 
00f74     46 14 06 F6 | 	mov	arg02, ##@LR__4406
00f78     14 9D B1 FD | 	call	#__system___string_cmp
00f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
00f80     56 00 00 AF 
00f84     88 E5 05 A1 |  if_e	add	objptr, ##44424
00f88     F2 04 68 AC |  if_e	wrlong	#2, objptr
00f8c     56 00 00 AF 
00f90     88 E5 85 A1 |  if_e	sub	objptr, ##44424
00f94                 | LR__0043
00f94                 | LR__0044
00f94     20 4E 05 F1 | 	add	fp, #32
00f98     A7 00 68 FC | 	wrlong	#0, fp
00f9c     20 4E 85 F1 | 	sub	fp, #32
00fa0     00 22 06 F6 | 	mov	local03, #0
00fa4     01 38 06 F6 | 	mov	local14, #1
00fa8                 | ' 
00fa8                 | ' ' 1b: find separators
00fa8                 | ' 
00fa8                 | ' 107
00fa8                 | ' separators(0)=0
00fa8                 | ' i=0: j=1 : do: i+=1 : let c$=mid$(line$,i,1) 
00fa8                 | LR__0045
00fa8     01 22 06 F1 | 	add	local03, #1
00fac     56 00 00 FF 
00fb0     80 E5 05 F1 | 	add	objptr, ##44416
00fb4     F2 12 02 FB | 	rdlong	arg01, objptr
00fb8     56 00 00 FF 
00fbc     80 E5 85 F1 | 	sub	objptr, ##44416
00fc0     11 15 02 F6 | 	mov	arg02, local03
00fc4     01 16 06 F6 | 	mov	arg03, #1
00fc8     FC BD B1 FD | 	call	#__system__Mid_S
00fcc     7B 00 00 FF 
00fd0     34 E4 05 F1 | 	add	objptr, ##63028
00fd4     F2 FA 61 FC | 	wrlong	result1, objptr
00fd8                 | ' if isseparator(c$) then separators(j)=i: j+=1 
00fd8     FD 12 02 F6 | 	mov	arg01, result1
00fdc     7B 00 00 FF 
00fe0     34 E4 85 F1 | 	sub	objptr, ##63028
00fe4     68 25 B0 FD | 	call	#_isseparator
00fe8     00 FA 0D F2 | 	cmp	result1, #0 wz
00fec     1C 00 90 AD |  if_e	jmp	#LR__0046
00ff0     1C 25 02 F6 | 	mov	local04, local14
00ff4     02 24 66 F0 | 	shl	local04, #2
00ff8     20 4E 05 F1 | 	add	fp, #32
00ffc     A7 24 02 F1 | 	add	local04, fp
01000     12 23 62 FC | 	wrlong	local03, local04
01004     01 38 06 F1 | 	add	local14, #1
01008     20 4E 85 F1 | 	sub	fp, #32
0100c                 | LR__0046
0100c     7B 00 00 FF 
01010     28 E4 05 F1 | 	add	objptr, ##63016
01014     F2 1E 02 FB | 	rdlong	local01, objptr
01018     7B 00 00 FF 
0101c     28 E4 85 F1 | 	sub	objptr, ##63016
01020     0F 23 5A F2 | 	cmps	local03, local01 wcz
01024     80 FF 9F ED |  if_be	jmp	#LR__0045
01028     1C 25 02 F6 | 	mov	local04, local14
0102c     02 24 66 F0 | 	shl	local04, #2
01030     20 4E 05 F1 | 	add	fp, #32
01034     A7 24 02 F1 | 	add	local04, fp
01038     12 23 62 FC | 	wrlong	local03, local04
0103c     00 3A 06 F6 | 	mov	local15, #0
01040                 | ' for i=0 to j-1 
01040     00 22 06 F6 | 	mov	local03, #0
01044     1C 3D 02 F6 | 	mov	local16, local14
01048     20 4E 85 F1 | 	sub	fp, #32
0104c                 | LR__0047
0104c     1E 23 52 F2 | 	cmps	local03, local16 wc
01050     88 01 90 3D |  if_ae	jmp	#LR__0051
01054     11 25 02 F6 | 	mov	local04, local03
01058     02 24 66 F0 | 	shl	local04, #2
0105c     20 4E 05 F1 | 	add	fp, #32
01060     A7 24 02 F1 | 	add	local04, fp
01064     12 27 02 FB | 	rdlong	local05, local04
01068     7B 00 00 FF 
0106c     3C E4 05 F1 | 	add	objptr, ##63036
01070     F2 26 62 FC | 	wrlong	local05, objptr
01074     11 25 02 F6 | 	mov	local04, local03
01078     01 24 06 F1 | 	add	local04, #1
0107c     02 24 66 F0 | 	shl	local04, #2
01080     A7 2E 02 F6 | 	mov	local09, fp
01084     A7 24 02 F1 | 	add	local04, fp
01088     12 27 02 FB | 	rdlong	local05, local04
0108c     04 E4 05 F1 | 	add	objptr, #4
01090     F2 26 62 FC | 	wrlong	local05, objptr
01094                 | '   if p1>0 then let p$=mid$(line$,p1,1):  if   p$<>"" then lparts(k).part$=p$ : k+=1 
01094     04 E4 85 F1 | 	sub	objptr, #4
01098     F2 1E 02 FB | 	rdlong	local01, objptr
0109c     7B 00 00 FF 
010a0     3C E4 85 F1 | 	sub	objptr, ##63036
010a4     01 1E 56 F2 | 	cmps	local01, #1 wc
010a8     20 4E 85 F1 | 	sub	fp, #32
010ac     84 00 90 CD |  if_b	jmp	#LR__0049
010b0     56 00 00 FF 
010b4     80 E5 05 F1 | 	add	objptr, ##44416
010b8     F2 12 02 FB | 	rdlong	arg01, objptr
010bc     24 00 00 FF 
010c0     BC E4 05 F1 | 	add	objptr, ##18620
010c4     F2 14 02 FB | 	rdlong	arg02, objptr
010c8     7B 00 00 FF 
010cc     3C E4 85 F1 | 	sub	objptr, ##63036
010d0     01 16 06 F6 | 	mov	arg03, #1
010d4     F0 BC B1 FD | 	call	#__system__Mid_S
010d8     7B 00 00 FF 
010dc     44 E4 05 F1 | 	add	objptr, ##63044
010e0     F2 FA 61 FC | 	wrlong	result1, objptr
010e4     7B 00 00 FF 
010e8     44 E4 85 F1 | 	sub	objptr, ##63044
010ec     FD 12 02 F6 | 	mov	arg01, result1
010f0     51 01 00 FF 
010f4     47 14 06 F6 | 	mov	arg02, ##@LR__4407
010f8     94 9B B1 FD | 	call	#__system___string_cmp
010fc     00 FA 0D F2 | 	cmp	result1, #0 wz
01100     30 00 90 AD |  if_e	jmp	#LR__0048
01104     1D 2F 02 F6 | 	mov	local09, local15
01108     03 2E 66 F0 | 	shl	local09, #3
0110c     54 00 00 FF 
01110     70 E5 05 F1 | 	add	objptr, ##43376
01114     F2 2E 02 F1 | 	add	local09, objptr
01118     26 00 00 FF 
0111c     D4 E4 05 F1 | 	add	objptr, ##19668
01120     F2 28 02 FB | 	rdlong	local06, objptr
01124     7B 00 00 FF 
01128     44 E4 85 F1 | 	sub	objptr, ##63044
0112c     17 29 62 FC | 	wrlong	local06, local09
01130     01 3A 06 F1 | 	add	local15, #1
01134                 | LR__0048
01134                 | LR__0049
01134     56 00 00 FF 
01138     80 E5 05 F1 | 	add	objptr, ##44416
0113c     F2 12 02 FB | 	rdlong	arg01, objptr
01140     24 00 00 FF 
01144     BC E4 05 F1 | 	add	objptr, ##18620
01148     F2 14 02 FB | 	rdlong	arg02, objptr
0114c     01 14 06 F1 | 	add	arg02, #1
01150     04 E4 05 F1 | 	add	objptr, #4
01154     F2 16 02 FB | 	rdlong	arg03, objptr
01158     04 E4 85 F1 | 	sub	objptr, #4
0115c     F2 30 02 FB | 	rdlong	local10, objptr
01160     7B 00 00 FF 
01164     3C E4 85 F1 | 	sub	objptr, ##63036
01168     18 33 02 F6 | 	mov	local11, local10
0116c     19 17 82 F1 | 	sub	arg03, local11
01170     01 16 86 F1 | 	sub	arg03, #1
01174     50 BC B1 FD | 	call	#__system__Mid_S
01178     7B 00 00 FF 
0117c     44 E4 05 F1 | 	add	objptr, ##63044
01180     F2 FA 61 FC | 	wrlong	result1, objptr
01184     7B 00 00 FF 
01188     44 E4 85 F1 | 	sub	objptr, ##63044
0118c     FD 12 02 F6 | 	mov	arg01, result1
01190     51 01 00 FF 
01194     48 14 06 F6 | 	mov	arg02, ##@LR__4408
01198     F4 9A B1 FD | 	call	#__system___string_cmp
0119c     00 FA 0D F2 | 	cmp	result1, #0 wz
011a0     30 00 90 AD |  if_e	jmp	#LR__0050
011a4     1D 2F 02 F6 | 	mov	local09, local15
011a8     03 2E 66 F0 | 	shl	local09, #3
011ac     54 00 00 FF 
011b0     70 E5 05 F1 | 	add	objptr, ##43376
011b4     F2 2E 02 F1 | 	add	local09, objptr
011b8     26 00 00 FF 
011bc     D4 E4 05 F1 | 	add	objptr, ##19668
011c0     F2 28 02 FB | 	rdlong	local06, objptr
011c4     7B 00 00 FF 
011c8     44 E4 85 F1 | 	sub	objptr, ##63044
011cc     17 29 62 FC | 	wrlong	local06, local09
011d0     01 3A 06 F1 | 	add	local15, #1
011d4                 | LR__0050
011d4     01 22 06 F1 | 	add	local03, #1
011d8     70 FE 9F FD | 	jmp	#LR__0047
011dc                 | LR__0051
011dc     00 22 06 F6 | 	mov	local03, #0
011e0                 | ' 
011e0                 | ' ' 1d : find strings
011e0                 | ' 
011e0                 | ' i=0
011e0                 | ' do
011e0                 | LR__0052
011e0                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
011e0     11 27 02 F6 | 	mov	local05, local03
011e4     03 26 66 F0 | 	shl	local05, #3
011e8     54 00 00 FF 
011ec     70 E5 05 F1 | 	add	objptr, ##43376
011f0     F2 26 02 F1 | 	add	local05, objptr
011f4     13 13 02 FB | 	rdlong	arg01, local05
011f8     51 01 00 FF 
011fc     49 14 06 F6 | 	mov	arg02, ##@LR__4409
01200     54 00 00 FF 
01204     70 E5 85 F1 | 	sub	objptr, ##43376
01208     84 9A B1 FD | 	call	#__system___string_cmp
0120c     00 FA 0D F2 | 	cmp	result1, #0 wz
01210     01 22 06 51 |  if_ne	add	local03, #1
01214     50 01 90 5D |  if_ne	jmp	#LR__0057
01218     11 3F 02 F6 | 	mov	local17, local03
0121c                 | LR__0053
0121c     11 2F 02 F6 | 	mov	local09, local03
01220     01 2E 06 F1 | 	add	local09, #1
01224     03 2E 66 F0 | 	shl	local09, #3
01228     54 00 00 FF 
0122c     70 E5 05 F1 | 	add	objptr, ##43376
01230     F2 2E 02 F1 | 	add	local09, objptr
01234     17 31 02 FB | 	rdlong	local10, local09
01238     26 00 00 FF 
0123c     D4 E4 05 F1 | 	add	objptr, ##19668
01240     F2 30 62 FC | 	wrlong	local10, objptr
01244     1F 2F 02 F6 | 	mov	local09, local17
01248     03 2E 66 F0 | 	shl	local09, #3
0124c     26 00 00 FF 
01250     D4 E4 85 F1 | 	sub	objptr, ##19668
01254     F2 2E 02 F1 | 	add	local09, objptr
01258     1F 37 02 F6 | 	mov	local13, local17
0125c     03 36 66 F0 | 	shl	local13, #3
01260     F2 36 02 F1 | 	add	local13, objptr
01264     1B 13 02 FB | 	rdlong	arg01, local13
01268     54 00 00 FF 
0126c     70 E5 85 F1 | 	sub	objptr, ##43376
01270     18 33 02 F6 | 	mov	local11, local10
01274     19 15 02 F6 | 	mov	arg02, local11
01278     48 9A B1 FD | 	call	#__system___string_concat
0127c     17 FB 61 FC | 	wrlong	result1, local09
01280     11 39 02 F6 | 	mov	local14, local03
01284     01 38 06 F1 | 	add	local14, #1
01288     1D 41 02 F6 | 	mov	local18, local15
0128c     01 40 06 F1 | 	add	local18, #1
01290     97 3C 48 FB | 	callpa	#(@LR__0055-@LR__0054)>>2,fcache_load_ptr_
01294                 | LR__0054
01294     20 39 52 F2 | 	cmps	local14, local18 wc
01298     70 00 90 3D |  if_ae	jmp	#LR__0056
0129c     1C 27 02 F6 | 	mov	local05, local14
012a0     01 26 06 F1 | 	add	local05, #1
012a4     03 26 66 F0 | 	shl	local05, #3
012a8     54 00 00 FF 
012ac     70 E5 05 F1 | 	add	objptr, ##43376
012b0     F2 26 02 F1 | 	add	local05, objptr
012b4     13 1F 02 FB | 	rdlong	local01, local05
012b8     1C 29 02 F6 | 	mov	local06, local14
012bc     01 28 06 F1 | 	add	local06, #1
012c0     03 28 66 F0 | 	shl	local06, #3
012c4     F2 28 02 F1 | 	add	local06, objptr
012c8     04 28 06 F1 | 	add	local06, #4
012cc     14 25 02 FB | 	rdlong	local04, local06
012d0     1C 29 02 F6 | 	mov	local06, local14
012d4     03 28 66 F0 | 	shl	local06, #3
012d8     F2 32 02 F6 | 	mov	local11, objptr
012dc     F2 28 02 F1 | 	add	local06, objptr
012e0     14 1F 62 FC | 	wrlong	local01, local06
012e4     1C 31 02 F6 | 	mov	local10, local14
012e8     18 35 02 F6 | 	mov	local12, local10
012ec     03 34 66 F0 | 	shl	local12, #3
012f0     F2 34 02 F1 | 	add	local12, objptr
012f4     04 34 06 F1 | 	add	local12, #4
012f8     1A 25 62 FC | 	wrlong	local04, local12
012fc     01 38 06 F1 | 	add	local14, #1
01300     54 00 00 FF 
01304     70 E5 85 F1 | 	sub	objptr, ##43376
01308     88 FF 9F FD | 	jmp	#LR__0054
0130c                 | LR__0055
0130c                 | LR__0056
0130c     01 3A 86 F1 | 	sub	local15, #1
01310     7B 00 00 FF 
01314     44 E4 05 F1 | 	add	objptr, ##63044
01318     F2 12 02 FB | 	rdlong	arg01, objptr
0131c     7B 00 00 FF 
01320     44 E4 85 F1 | 	sub	objptr, ##63044
01324     51 01 00 FF 
01328     4B 14 06 F6 | 	mov	arg02, ##@LR__4410
0132c     60 99 B1 FD | 	call	#__system___string_cmp
01330     00 FA 0D F2 | 	cmp	result1, #0 wz
01334     1D 23 52 52 |  if_ne	cmps	local03, local15 wc
01338     E0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0053
0133c                 | '   if p$<>"""" then k+=1:i+=1
0133c     7B 00 00 FF 
01340     44 E4 05 F1 | 	add	objptr, ##63044
01344     F2 12 02 FB | 	rdlong	arg01, objptr
01348     7B 00 00 FF 
0134c     44 E4 85 F1 | 	sub	objptr, ##63044
01350     51 01 00 FF 
01354     4D 14 06 F6 | 	mov	arg02, ##@LR__4411
01358     34 99 B1 FD | 	call	#__system___string_cmp
0135c     00 FA 0D F2 | 	cmp	result1, #0 wz
01360     01 3A 06 51 |  if_ne	add	local15, #1
01364     01 22 06 51 |  if_ne	add	local03, #1
01368                 | LR__0057
01368     1D 23 52 F2 | 	cmps	local03, local15 wc
0136c     70 FE 9F CD |  if_b	jmp	#LR__0052
01370     00 22 06 F6 | 	mov	local03, #0
01374                 | ' 
01374                 | ' ' 1e : concatenate strings if "" detected between
01374                 | '  
01374                 | ' i=0 : do
01374                 | LR__0058
01374                 | '  if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
01374     11 27 02 F6 | 	mov	local05, local03
01378     03 26 66 F0 | 	shl	local05, #3
0137c     54 00 00 FF 
01380     70 E5 05 F1 | 	add	objptr, ##43376
01384     F2 26 02 F1 | 	add	local05, objptr
01388     13 13 02 FB | 	rdlong	arg01, local05
0138c     01 14 06 F6 | 	mov	arg02, #1
01390     54 00 00 FF 
01394     70 E5 85 F1 | 	sub	objptr, ##43376
01398     9C B9 B1 FD | 	call	#__system__Right_S
0139c     FD 12 02 F6 | 	mov	arg01, result1
013a0     51 01 00 FF 
013a4     4F 14 06 F6 | 	mov	arg02, ##@LR__4412
013a8     E4 98 B1 FD | 	call	#__system___string_cmp
013ac     00 FA 0D F2 | 	cmp	result1, #0 wz
013b0     78 01 90 5D |  if_ne	jmp	#LR__0064
013b4     11 29 02 F6 | 	mov	local06, local03
013b8     01 28 06 F1 | 	add	local06, #1
013bc     03 28 66 F0 | 	shl	local06, #3
013c0     54 00 00 FF 
013c4     70 E5 05 F1 | 	add	objptr, ##43376
013c8     F2 32 02 F6 | 	mov	local11, objptr
013cc     F2 28 02 F1 | 	add	local06, objptr
013d0     14 13 02 FB | 	rdlong	arg01, local06
013d4     01 14 06 F6 | 	mov	arg02, #1
013d8     54 00 00 FF 
013dc     70 E5 85 F1 | 	sub	objptr, ##43376
013e0     CC B8 B1 FD | 	call	#__system__Left_S
013e4     FD 12 02 F6 | 	mov	arg01, result1
013e8     51 01 00 FF 
013ec     51 14 06 F6 | 	mov	arg02, ##@LR__4413
013f0     9C 98 B1 FD | 	call	#__system___string_cmp
013f4     00 FA 0D F2 | 	cmp	result1, #0 wz
013f8     30 01 90 5D |  if_ne	jmp	#LR__0064
013fc     11 2F 02 F6 | 	mov	local09, local03
01400     03 2E 66 F0 | 	shl	local09, #3
01404     54 00 00 FF 
01408     70 E5 05 F1 | 	add	objptr, ##43376
0140c     F2 2E 02 F1 | 	add	local09, objptr
01410     11 37 02 F6 | 	mov	local13, local03
01414     03 36 66 F0 | 	shl	local13, #3
01418     F2 36 02 F1 | 	add	local13, objptr
0141c     1B 29 02 FB | 	rdlong	local06, local13
01420     11 35 02 F6 | 	mov	local12, local03
01424     01 34 06 F1 | 	add	local12, #1
01428     03 34 66 F0 | 	shl	local12, #3
0142c     F2 34 02 F1 | 	add	local12, objptr
01430     1A 33 02 FB | 	rdlong	local11, local12
01434     11 43 02 F6 | 	mov	local19, local03
01438     01 42 06 F1 | 	add	local19, #1
0143c     21 45 02 F6 | 	mov	local20, local19
01440     03 44 66 F0 | 	shl	local20, #3
01444     F2 46 02 F6 | 	mov	local21, objptr
01448     F2 44 02 F1 | 	add	local20, objptr
0144c     22 13 02 FB | 	rdlong	arg01, local20
01450     54 00 00 FF 
01454     70 E5 85 F1 | 	sub	objptr, ##43376
01458     09 2B 02 F6 | 	mov	local07, arg01
0145c     97 06 48 FB | 	callpa	#(@LR__0060-@LR__0059)>>2,fcache_load_ptr_
01460                 | LR__0059
01460     15 FB C9 FA | 	rdbyte	result1, local07 wz
01464     01 2A 06 51 |  if_ne	add	local07, #1
01468     F4 FF 9F 5D |  if_ne	jmp	#LR__0059
0146c                 | LR__0060
0146c     09 2B 82 F1 | 	sub	local07, arg01
01470     15 31 02 F6 | 	mov	local10, local07
01474     01 30 86 F1 | 	sub	local10, #1
01478     19 13 02 F6 | 	mov	arg01, local11
0147c     18 15 02 F6 | 	mov	arg02, local10
01480     B4 B8 B1 FD | 	call	#__system__Right_S
01484     FD 32 02 F6 | 	mov	local11, result1
01488     14 13 02 F6 | 	mov	arg01, local06
0148c     19 15 02 F6 | 	mov	arg02, local11
01490     30 98 B1 FD | 	call	#__system___string_concat
01494     17 FB 61 FC | 	wrlong	result1, local09
01498                 | '    for j=i+1 to k: lparts(j)=lparts(j+1): next j  
01498     11 39 02 F6 | 	mov	local14, local03
0149c     01 38 06 F1 | 	add	local14, #1
014a0     1D 49 02 F6 | 	mov	local22, local15
014a4     01 48 06 F1 | 	add	local22, #1
014a8     97 3C 48 FB | 	callpa	#(@LR__0062-@LR__0061)>>2,fcache_load_ptr_
014ac                 | LR__0061
014ac     24 39 52 F2 | 	cmps	local14, local22 wc
014b0     70 00 90 3D |  if_ae	jmp	#LR__0063
014b4     1C 27 02 F6 | 	mov	local05, local14
014b8     01 26 06 F1 | 	add	local05, #1
014bc     03 26 66 F0 | 	shl	local05, #3
014c0     54 00 00 FF 
014c4     70 E5 05 F1 | 	add	objptr, ##43376
014c8     F2 26 02 F1 | 	add	local05, objptr
014cc     13 1F 02 FB | 	rdlong	local01, local05
014d0     1C 29 02 F6 | 	mov	local06, local14
014d4     01 28 06 F1 | 	add	local06, #1
014d8     03 28 66 F0 | 	shl	local06, #3
014dc     F2 28 02 F1 | 	add	local06, objptr
014e0     04 28 06 F1 | 	add	local06, #4
014e4     14 25 02 FB | 	rdlong	local04, local06
014e8     1C 29 02 F6 | 	mov	local06, local14
014ec     03 28 66 F0 | 	shl	local06, #3
014f0     F2 32 02 F6 | 	mov	local11, objptr
014f4     F2 28 02 F1 | 	add	local06, objptr
014f8     14 1F 62 FC | 	wrlong	local01, local06
014fc     1C 31 02 F6 | 	mov	local10, local14
01500     18 35 02 F6 | 	mov	local12, local10
01504     03 34 66 F0 | 	shl	local12, #3
01508     F2 34 02 F1 | 	add	local12, objptr
0150c     04 34 06 F1 | 	add	local12, #4
01510     1A 25 62 FC | 	wrlong	local04, local12
01514     01 38 06 F1 | 	add	local14, #1
01518     54 00 00 FF 
0151c     70 E5 85 F1 | 	sub	objptr, ##43376
01520     88 FF 9F FD | 	jmp	#LR__0061
01524                 | LR__0062
01524                 | LR__0063
01524     01 22 86 F1 | 	sub	local03, #1
01528     01 3A 86 F1 | 	sub	local15, #1
0152c                 | LR__0064
0152c     01 22 06 F1 | 	add	local03, #1
01530     1D 23 52 F2 | 	cmps	local03, local15 wc
01534     3C FE 9F CD |  if_b	jmp	#LR__0058
01538     00 22 06 F6 | 	mov	local03, #0
0153c                 | '  
0153c                 | ' ' 1e2: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
0153c                 | '  
0153c                 | ' i=0 : do
0153c                 | LR__0065
0153c     11 2F 02 F6 | 	mov	local09, local03
01540     03 2E 66 F0 | 	shl	local09, #3
01544     54 00 00 FF 
01548     70 E5 05 F1 | 	add	objptr, ##43376
0154c     F2 2E 02 F1 | 	add	local09, objptr
01550     17 29 02 FB | 	rdlong	local06, local09
01554     26 00 00 FF 
01558     DC E4 05 F1 | 	add	objptr, ##19676
0155c     F2 28 62 FC | 	wrlong	local06, objptr
01560     11 2F 02 F6 | 	mov	local09, local03
01564     01 2E 06 F1 | 	add	local09, #1
01568     03 2E 66 F0 | 	shl	local09, #3
0156c     26 00 00 FF 
01570     DC E4 85 F1 | 	sub	objptr, ##19676
01574     F2 2E 02 F1 | 	add	local09, objptr
01578     17 29 02 FB | 	rdlong	local06, local09
0157c     26 00 00 FF 
01580     E0 E4 05 F1 | 	add	objptr, ##19680
01584     F2 28 62 FC | 	wrlong	local06, objptr
01588                 | '   if ((s1$=">" orelse s1$=">" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
01588     04 E4 85 F1 | 	sub	objptr, #4
0158c     F2 12 02 FB | 	rdlong	arg01, objptr
01590     7B 00 00 FF 
01594     4C E4 85 F1 | 	sub	objptr, ##63052
01598     51 01 00 FF 
0159c     53 14 06 F6 | 	mov	arg02, ##@LR__4414
015a0     EC 96 B1 FD | 	call	#__system___string_cmp
015a4     00 FA 0D F2 | 	cmp	result1, #0 wz
015a8     04 01 90 AD |  if_e	jmp	#LR__0066
015ac     7B 00 00 FF 
015b0     4C E4 05 F1 | 	add	objptr, ##63052
015b4     F2 12 02 FB | 	rdlong	arg01, objptr
015b8     7B 00 00 FF 
015bc     4C E4 85 F1 | 	sub	objptr, ##63052
015c0     51 01 00 FF 
015c4     55 14 06 F6 | 	mov	arg02, ##@LR__4415
015c8     C4 96 B1 FD | 	call	#__system___string_cmp
015cc     FD 24 0A F6 | 	mov	local04, result1 wz
015d0     DC 00 90 AD |  if_e	jmp	#LR__0066
015d4     7B 00 00 FF 
015d8     4C E4 05 F1 | 	add	objptr, ##63052
015dc     F2 12 02 FB | 	rdlong	arg01, objptr
015e0     7B 00 00 FF 
015e4     4C E4 85 F1 | 	sub	objptr, ##63052
015e8     51 01 00 FF 
015ec     57 14 06 F6 | 	mov	arg02, ##@LR__4416
015f0     9C 96 B1 FD | 	call	#__system___string_cmp
015f4     00 FA 0D F2 | 	cmp	result1, #0 wz
015f8     B4 00 90 AD |  if_e	jmp	#LR__0066
015fc     7B 00 00 FF 
01600     4C E4 05 F1 | 	add	objptr, ##63052
01604     F2 12 02 FB | 	rdlong	arg01, objptr
01608     7B 00 00 FF 
0160c     4C E4 85 F1 | 	sub	objptr, ##63052
01610     51 01 00 FF 
01614     59 32 06 F6 | 	mov	local11, ##@LR__4417
01618     19 15 02 F6 | 	mov	arg02, local11
0161c     70 96 B1 FD | 	call	#__system___string_cmp
01620     00 FA 0D F2 | 	cmp	result1, #0 wz
01624     88 00 90 AD |  if_e	jmp	#LR__0066
01628     7B 00 00 FF 
0162c     4C E4 05 F1 | 	add	objptr, ##63052
01630     F2 12 02 FB | 	rdlong	arg01, objptr
01634     7B 00 00 FF 
01638     4C E4 85 F1 | 	sub	objptr, ##63052
0163c     51 01 00 FF 
01640     5B 30 06 F6 | 	mov	local10, ##@LR__4418
01644     18 33 02 F6 | 	mov	local11, local10
01648     19 15 02 F6 | 	mov	arg02, local11
0164c     40 96 B1 FD | 	call	#__system___string_cmp
01650     00 FA 0D F2 | 	cmp	result1, #0 wz
01654     58 00 90 AD |  if_e	jmp	#LR__0066
01658     7B 00 00 FF 
0165c     4C E4 05 F1 | 	add	objptr, ##63052
01660     F2 12 02 FB | 	rdlong	arg01, objptr
01664     7B 00 00 FF 
01668     4C E4 85 F1 | 	sub	objptr, ##63052
0166c     51 01 00 FF 
01670     5D 30 06 F6 | 	mov	local10, ##@LR__4419
01674     18 15 02 F6 | 	mov	arg02, local10
01678     14 96 B1 FD | 	call	#__system___string_cmp
0167c     FD 32 0A F6 | 	mov	local11, result1 wz
01680     2C 00 90 AD |  if_e	jmp	#LR__0066
01684     7B 00 00 FF 
01688     4C E4 05 F1 | 	add	objptr, ##63052
0168c     F2 12 02 FB | 	rdlong	arg01, objptr
01690     7B 00 00 FF 
01694     4C E4 85 F1 | 	sub	objptr, ##63052
01698     51 01 00 FF 
0169c     5F 36 06 F6 | 	mov	local13, ##@LR__4420
016a0     1B 15 02 F6 | 	mov	arg02, local13
016a4     E8 95 B1 FD | 	call	#__system___string_cmp
016a8     FD 30 0A F6 | 	mov	local10, result1 wz
016ac     30 00 90 5D |  if_ne	jmp	#LR__0067
016b0                 | LR__0066
016b0     7B 00 00 FF 
016b4     50 E4 05 F1 | 	add	objptr, ##63056
016b8     F2 12 02 FB | 	rdlong	arg01, objptr
016bc     7B 00 00 FF 
016c0     50 E4 85 F1 | 	sub	objptr, ##63056
016c4     51 01 00 FF 
016c8     61 4A 06 F6 | 	mov	local23, ##@LR__4421
016cc     25 35 02 F6 | 	mov	local12, local23
016d0     1A 15 02 F6 | 	mov	arg02, local12
016d4     B8 95 B1 FD | 	call	#__system___string_cmp
016d8     FD 36 0A F6 | 	mov	local13, result1 wz
016dc     18 01 90 AD |  if_e	jmp	#LR__0070
016e0                 | LR__0067
016e0     7B 00 00 FF 
016e4     4C E4 05 F1 | 	add	objptr, ##63052
016e8     F2 12 02 FB | 	rdlong	arg01, objptr
016ec     7B 00 00 FF 
016f0     4C E4 85 F1 | 	sub	objptr, ##63052
016f4     51 01 00 FF 
016f8     63 4A 06 F6 | 	mov	local23, ##@LR__4422
016fc     25 15 02 F6 | 	mov	arg02, local23
01700     8C 95 B1 FD | 	call	#__system___string_cmp
01704     FD 34 0A F6 | 	mov	local12, result1 wz
01708     30 00 90 5D |  if_ne	jmp	#LR__0068
0170c     7B 00 00 FF 
01710     50 E4 05 F1 | 	add	objptr, ##63056
01714     F2 12 02 FB | 	rdlong	arg01, objptr
01718     7B 00 00 FF 
0171c     50 E4 85 F1 | 	sub	objptr, ##63056
01720     51 01 00 FF 
01724     65 44 06 F6 | 	mov	local20, ##@LR__4423
01728     22 43 02 F6 | 	mov	local19, local20
0172c     21 15 02 F6 | 	mov	arg02, local19
01730     5C 95 B1 FD | 	call	#__system___string_cmp
01734     FD 4A 0A F6 | 	mov	local23, result1 wz
01738     BC 00 90 AD |  if_e	jmp	#LR__0070
0173c                 | LR__0068
0173c     7B 00 00 FF 
01740     4C E4 05 F1 | 	add	objptr, ##63052
01744     F2 12 02 FB | 	rdlong	arg01, objptr
01748     7B 00 00 FF 
0174c     4C E4 85 F1 | 	sub	objptr, ##63052
01750     51 01 00 FF 
01754     67 44 06 F6 | 	mov	local20, ##@LR__4424
01758     22 15 02 F6 | 	mov	arg02, local20
0175c     30 95 B1 FD | 	call	#__system___string_cmp
01760     FD 42 0A F6 | 	mov	local19, result1 wz
01764     30 00 90 5D |  if_ne	jmp	#LR__0069
01768     7B 00 00 FF 
0176c     50 E4 05 F1 | 	add	objptr, ##63056
01770     F2 12 02 FB | 	rdlong	arg01, objptr
01774     7B 00 00 FF 
01778     50 E4 85 F1 | 	sub	objptr, ##63056
0177c     51 01 00 FF 
01780     69 4C 06 F6 | 	mov	local24, ##@LR__4425
01784     26 47 02 F6 | 	mov	local21, local24
01788     23 15 02 F6 | 	mov	arg02, local21
0178c     00 95 B1 FD | 	call	#__system___string_cmp
01790     FD 44 0A F6 | 	mov	local20, result1 wz
01794     60 00 90 AD |  if_e	jmp	#LR__0070
01798                 | LR__0069
01798     7B 00 00 FF 
0179c     4C E4 05 F1 | 	add	objptr, ##63052
017a0     F2 12 02 FB | 	rdlong	arg01, objptr
017a4     7B 00 00 FF 
017a8     4C E4 85 F1 | 	sub	objptr, ##63052
017ac     51 01 00 FF 
017b0     6B 4E 06 F6 | 	mov	local25, ##@LR__4426
017b4     27 4D 02 F6 | 	mov	local24, local25
017b8     26 15 02 F6 | 	mov	arg02, local24
017bc     D0 94 B1 FD | 	call	#__system___string_cmp
017c0     FD 46 0A F6 | 	mov	local21, result1 wz
017c4     10 01 90 5D |  if_ne	jmp	#LR__0074
017c8     7B 00 00 FF 
017cc     50 E4 05 F1 | 	add	objptr, ##63056
017d0     F2 12 02 FB | 	rdlong	arg01, objptr
017d4     7B 00 00 FF 
017d8     50 E4 85 F1 | 	sub	objptr, ##63056
017dc     51 01 00 FF 
017e0     6D 50 06 F6 | 	mov	local26, ##@LR__4427
017e4     28 4F 02 F6 | 	mov	local25, local26
017e8     27 15 02 F6 | 	mov	arg02, local25
017ec     A0 94 B1 FD | 	call	#__system___string_cmp
017f0     FD 4C 0A F6 | 	mov	local24, result1 wz
017f4     E0 00 90 5D |  if_ne	jmp	#LR__0074
017f8                 | LR__0070
017f8     11 2F 02 F6 | 	mov	local09, local03
017fc     03 2E 66 F0 | 	shl	local09, #3
01800     54 00 00 FF 
01804     70 E5 05 F1 | 	add	objptr, ##43376
01808     F2 2E 02 F1 | 	add	local09, objptr
0180c     26 00 00 FF 
01810     DC E4 05 F1 | 	add	objptr, ##19676
01814     F2 12 02 FB | 	rdlong	arg01, objptr
01818     04 E4 05 F1 | 	add	objptr, #4
0181c     F2 30 02 FB | 	rdlong	local10, objptr
01820     7B 00 00 FF 
01824     50 E4 85 F1 | 	sub	objptr, ##63056
01828     18 33 02 F6 | 	mov	local11, local10
0182c     19 15 02 F6 | 	mov	arg02, local11
01830     90 94 B1 FD | 	call	#__system___string_concat
01834     17 FB 61 FC | 	wrlong	result1, local09
01838                 | '     lparts(i).part$=s1$+s2$
01838                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
01838     11 39 02 F6 | 	mov	local14, local03
0183c     01 38 06 F1 | 	add	local14, #1
01840     1D 53 02 F6 | 	mov	local27, local15
01844     01 52 06 F1 | 	add	local27, #1
01848     97 42 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
0184c                 | LR__0071
0184c     29 39 52 F2 | 	cmps	local14, local27 wc
01850     7C 00 90 3D |  if_ae	jmp	#LR__0073
01854     1C 27 02 F6 | 	mov	local05, local14
01858     01 26 06 F1 | 	add	local05, #1
0185c     03 26 66 F0 | 	shl	local05, #3
01860     54 00 00 FF 
01864     70 E5 05 F1 | 	add	objptr, ##43376
01868     F2 26 02 F1 | 	add	local05, objptr
0186c     13 1F 02 FB | 	rdlong	local01, local05
01870     1C 29 02 F6 | 	mov	local06, local14
01874     01 28 06 F1 | 	add	local06, #1
01878     03 28 66 F0 | 	shl	local06, #3
0187c     F2 28 02 F1 | 	add	local06, objptr
01880     04 28 06 F1 | 	add	local06, #4
01884     14 25 02 FB | 	rdlong	local04, local06
01888     1C 29 02 F6 | 	mov	local06, local14
0188c     03 28 66 F0 | 	shl	local06, #3
01890     F2 32 02 F6 | 	mov	local11, objptr
01894     F2 28 02 F1 | 	add	local06, objptr
01898     14 1F 62 FC | 	wrlong	local01, local06
0189c     1C 31 02 F6 | 	mov	local10, local14
018a0     18 37 02 F6 | 	mov	local13, local10
018a4     1B 35 02 F6 | 	mov	local12, local13
018a8     03 34 66 F0 | 	shl	local12, #3
018ac     F2 4A 02 F6 | 	mov	local23, objptr
018b0     F2 34 02 F1 | 	add	local12, objptr
018b4     04 34 06 F1 | 	add	local12, #4
018b8     1A 25 62 FC | 	wrlong	local04, local12
018bc     04 34 86 F1 | 	sub	local12, #4
018c0     01 38 06 F1 | 	add	local14, #1
018c4     54 00 00 FF 
018c8     70 E5 85 F1 | 	sub	objptr, ##43376
018cc     7C FF 9F FD | 	jmp	#LR__0071
018d0                 | LR__0072
018d0                 | LR__0073
018d0     01 22 86 F1 | 	sub	local03, #1
018d4     01 3A 86 F1 | 	sub	local15, #1
018d8                 | LR__0074
018d8     01 22 06 F1 | 	add	local03, #1
018dc     1D 23 52 F2 | 	cmps	local03, local15 wc
018e0     58 FC 9F CD |  if_b	jmp	#LR__0065
018e4                 | '  
018e4                 | ' ' 1f : now remove parts that are spaces
018e4                 | ' 
018e4                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
018e4     00 22 06 F6 | 	mov	local03, #0
018e8     1D 55 02 F6 | 	mov	local28, local15
018ec     01 54 06 F1 | 	add	local28, #1
018f0                 | LR__0075
018f0     2A 23 52 F2 | 	cmps	local03, local28 wc
018f4     50 00 90 3D |  if_ae	jmp	#LR__0076
018f8     11 2F 02 F6 | 	mov	local09, local03
018fc     03 2E 66 F0 | 	shl	local09, #3
01900     54 00 00 FF 
01904     70 E5 05 F1 | 	add	objptr, ##43376
01908     F2 2E 02 F1 | 	add	local09, objptr
0190c     11 33 02 F6 | 	mov	local11, local03
01910     19 31 02 F6 | 	mov	local10, local11
01914     18 37 02 F6 | 	mov	local13, local10
01918     03 36 66 F0 | 	shl	local13, #3
0191c     F2 34 02 F6 | 	mov	local12, objptr
01920     F2 36 02 F1 | 	add	local13, objptr
01924     1B 13 02 FB | 	rdlong	arg01, local13
01928     54 00 00 FF 
0192c     70 E5 85 F1 | 	sub	objptr, ##43376
01930     B0 B7 B1 FD | 	call	#__system__RTrim_S
01934     FD 12 02 F6 | 	mov	arg01, result1
01938     E8 B6 B1 FD | 	call	#__system__LTrim_S
0193c     17 FB 61 FC | 	wrlong	result1, local09
01940     01 22 06 F1 | 	add	local03, #1
01944     A8 FF 9F FD | 	jmp	#LR__0075
01948                 | LR__0076
01948     00 22 06 F6 | 	mov	local03, #0
0194c     97 8A 48 FB | 	callpa	#(@LR__0083-@LR__0077)>>2,fcache_load_ptr_
01950                 | ' 
01950                 | ' i=0
01950                 | ' do 
01950                 | LR__0077
01950                 | '   if len(lparts(i).part$)=0 then 
01950     11 2F 02 F6 | 	mov	local09, local03
01954     17 27 02 F6 | 	mov	local05, local09
01958     03 26 66 F0 | 	shl	local05, #3
0195c     54 00 00 FF 
01960     70 E5 05 F1 | 	add	objptr, ##43376
01964     F2 26 02 F1 | 	add	local05, objptr
01968     13 13 02 FB | 	rdlong	arg01, local05
0196c     54 00 00 FF 
01970     70 E5 85 F1 | 	sub	objptr, ##43376
01974     09 2B 02 F6 | 	mov	local07, arg01
01978                 | LR__0078
01978     15 FB C9 FA | 	rdbyte	result1, local07 wz
0197c     01 2A 06 51 |  if_ne	add	local07, #1
01980     F4 FF 9F 5D |  if_ne	jmp	#LR__0078
01984     09 2B 8A F1 | 	sub	local07, arg01 wz
01988     C4 00 90 5D |  if_ne	jmp	#LR__0082
0198c                 | '     if i=k-1 then k-=1  :  exit
0198c     1D 1F 02 F6 | 	mov	local01, local15
01990     01 1E 86 F1 | 	sub	local01, #1
01994     0F 23 0A F2 | 	cmp	local03, local01 wz
01998     01 3A 86 A1 |  if_e	sub	local15, #1
0199c     C4 00 90 AD |  if_e	jmp	#LR__0084
019a0                 | '     if i<k-1 then 
019a0     1D 1F 02 F6 | 	mov	local01, local15
019a4     01 1E 86 F1 | 	sub	local01, #1
019a8     0F 23 52 F2 | 	cmps	local03, local01 wc
019ac     A0 00 90 3D |  if_ae	jmp	#LR__0081
019b0                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
019b0     11 39 02 F6 | 	mov	local14, local03
019b4     1D 57 02 F6 | 	mov	local29, local15
019b8     01 56 86 F1 | 	sub	local29, #1
019bc                 | LR__0079
019bc     2B 39 52 F2 | 	cmps	local14, local29 wc
019c0     80 00 90 3D |  if_ae	jmp	#LR__0080
019c4     1C 27 02 F6 | 	mov	local05, local14
019c8     01 26 06 F1 | 	add	local05, #1
019cc     03 26 66 F0 | 	shl	local05, #3
019d0     54 00 00 FF 
019d4     70 E5 05 F1 | 	add	objptr, ##43376
019d8     F2 26 02 F1 | 	add	local05, objptr
019dc     13 1F 02 FB | 	rdlong	local01, local05
019e0     1C 29 02 F6 | 	mov	local06, local14
019e4     01 28 06 F1 | 	add	local06, #1
019e8     03 28 66 F0 | 	shl	local06, #3
019ec     F2 28 02 F1 | 	add	local06, objptr
019f0     04 28 06 F1 | 	add	local06, #4
019f4     14 25 02 FB | 	rdlong	local04, local06
019f8     1C 2F 02 F6 | 	mov	local09, local14
019fc     17 29 02 F6 | 	mov	local06, local09
01a00     03 28 66 F0 | 	shl	local06, #3
01a04     F2 32 02 F6 | 	mov	local11, objptr
01a08     F2 28 02 F1 | 	add	local06, objptr
01a0c     14 1F 62 FC | 	wrlong	local01, local06
01a10     1C 31 02 F6 | 	mov	local10, local14
01a14     18 37 02 F6 | 	mov	local13, local10
01a18     1B 35 02 F6 | 	mov	local12, local13
01a1c     03 34 66 F0 | 	shl	local12, #3
01a20     F2 4A 02 F6 | 	mov	local23, objptr
01a24     F2 34 02 F1 | 	add	local12, objptr
01a28     04 34 06 F1 | 	add	local12, #4
01a2c     1A 25 62 FC | 	wrlong	local04, local12
01a30     04 34 86 F1 | 	sub	local12, #4
01a34     01 38 06 F1 | 	add	local14, #1
01a38     54 00 00 FF 
01a3c     70 E5 85 F1 | 	sub	objptr, ##43376
01a40     78 FF 9F FD | 	jmp	#LR__0079
01a44                 | LR__0080
01a44     01 3A 86 F1 | 	sub	local15, #1
01a48                 | '       if i>0 then i-=1 
01a48     01 22 56 F2 | 	cmps	local03, #1 wc
01a4c     01 22 86 31 |  if_ae	sub	local03, #1
01a50                 | LR__0081
01a50                 | LR__0082
01a50     01 22 06 F1 | 	add	local03, #1
01a54     1D 1F 02 F6 | 	mov	local01, local15
01a58     01 1E 86 F1 | 	sub	local01, #1
01a5c     0F 23 5A F2 | 	cmps	local03, local01 wcz
01a60     EC FE 9F ED |  if_be	jmp	#LR__0077
01a64                 | LR__0083
01a64                 | LR__0084
01a64                 | ' 
01a64                 | ' ' 1g: lowercase all that is not a string
01a64                 | ' 
01a64                 | ' for j=0 to k-1
01a64     00 38 06 F6 | 	mov	local14, #0
01a68     1D 59 02 F6 | 	mov	local30, local15
01a6c                 | LR__0085
01a6c     2C 39 52 F2 | 	cmps	local14, local30 wc
01a70     C0 00 90 3D |  if_ae	jmp	#LR__0088
01a74                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
01a74     1C 27 02 F6 | 	mov	local05, local14
01a78     03 26 66 F0 | 	shl	local05, #3
01a7c     54 00 00 FF 
01a80     70 E5 05 F1 | 	add	objptr, ##43376
01a84     F2 26 02 F1 | 	add	local05, objptr
01a88     13 13 02 FB | 	rdlong	arg01, local05
01a8c     01 14 06 F6 | 	mov	arg02, #1
01a90     54 00 00 FF 
01a94     70 E5 85 F1 | 	sub	objptr, ##43376
01a98     14 B2 B1 FD | 	call	#__system__Left_S
01a9c     FD 12 02 F6 | 	mov	arg01, result1
01aa0     51 01 00 FF 
01aa4     6F 14 06 F6 | 	mov	arg02, ##@LR__4428
01aa8     E4 91 B1 FD | 	call	#__system___string_cmp
01aac     00 FA 0D F2 | 	cmp	result1, #0 wz
01ab0     40 00 90 5D |  if_ne	jmp	#LR__0086
01ab4     1C 29 02 F6 | 	mov	local06, local14
01ab8     03 28 66 F0 | 	shl	local06, #3
01abc     54 00 00 FF 
01ac0     70 E5 05 F1 | 	add	objptr, ##43376
01ac4     F2 28 02 F1 | 	add	local06, objptr
01ac8     14 13 02 FB | 	rdlong	arg01, local06
01acc     01 14 06 F6 | 	mov	arg02, #1
01ad0     54 00 00 FF 
01ad4     70 E5 85 F1 | 	sub	objptr, ##43376
01ad8     5C B2 B1 FD | 	call	#__system__Right_S
01adc     FD 12 02 F6 | 	mov	arg01, result1
01ae0     51 01 00 FF 
01ae4     71 14 06 F6 | 	mov	arg02, ##@LR__4429
01ae8     A4 91 B1 FD | 	call	#__system___string_cmp
01aec     00 FA 0D F2 | 	cmp	result1, #0 wz
01af0     38 00 90 AD |  if_e	jmp	#LR__0087
01af4                 | LR__0086
01af4     1C 2F 02 F6 | 	mov	local09, local14
01af8     03 2E 66 F0 | 	shl	local09, #3
01afc     54 00 00 FF 
01b00     70 E5 05 F1 | 	add	objptr, ##43376
01b04     F2 2E 02 F1 | 	add	local09, objptr
01b08     1C 37 02 F6 | 	mov	local13, local14
01b0c     03 36 66 F0 | 	shl	local13, #3
01b10     F2 34 02 F6 | 	mov	local12, objptr
01b14     F2 36 02 F1 | 	add	local13, objptr
01b18     1B 13 02 FB | 	rdlong	arg01, local13
01b1c     54 00 00 FF 
01b20     70 E5 85 F1 | 	sub	objptr, ##43376
01b24     3C B4 B1 FD | 	call	#__system__LCase_S
01b28     17 FB 61 FC | 	wrlong	result1, local09
01b2c                 | LR__0087
01b2c     01 38 06 F1 | 	add	local14, #1
01b30     38 FF 9F FD | 	jmp	#LR__0085
01b34                 | LR__0088
01b34                 | ' 
01b34                 | ' '                                                         for i=0 to k-1 : print lparts(i).part$,: next i : print
01b34                 | ' 
01b34                 | ' for i=0 to k: lparts(i).token=-1: next i
01b34     00 22 06 F6 | 	mov	local03, #0
01b38     1D 5B 02 F6 | 	mov	local31, local15
01b3c     01 5A 06 F1 | 	add	local31, #1
01b40     97 1C 48 FB | 	callpa	#(@LR__0090-@LR__0089)>>2,fcache_load_ptr_
01b44                 | LR__0089
01b44     2D 23 52 F2 | 	cmps	local03, local31 wc
01b48     30 00 90 3D |  if_ae	jmp	#LR__0091
01b4c     11 2F 02 F6 | 	mov	local09, local03
01b50     03 2E 66 F0 | 	shl	local09, #3
01b54     54 00 00 FF 
01b58     70 E5 05 F1 | 	add	objptr, ##43376
01b5c     F2 2E 02 F1 | 	add	local09, objptr
01b60     04 2E 06 F1 | 	add	local09, #4
01b64     FF FF FF FF 
01b68     17 FF 6B FC | 	wrlong	##-1, local09
01b6c     01 22 06 F1 | 	add	local03, #1
01b70     54 00 00 FF 
01b74     70 E5 85 F1 | 	sub	objptr, ##43376
01b78     C8 FF 9F FD | 	jmp	#LR__0089
01b7c                 | LR__0090
01b7c                 | LR__0091
01b7c                 | ' 
01b7c                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
01b7c                 | ' 
01b7c                 | ' if len(lparts(0).part$)=0 then goto 101				' empty line, nothing to do
01b7c     54 00 00 FF 
01b80     70 E5 05 F1 | 	add	objptr, ##43376
01b84     F2 12 02 FB | 	rdlong	arg01, objptr
01b88     54 00 00 FF 
01b8c     70 E5 85 F1 | 	sub	objptr, ##43376
01b90     09 2B 02 F6 | 	mov	local07, arg01
01b94     97 06 48 FB | 	callpa	#(@LR__0093-@LR__0092)>>2,fcache_load_ptr_
01b98                 | LR__0092
01b98     15 FB C9 FA | 	rdbyte	result1, local07 wz
01b9c     01 2A 06 51 |  if_ne	add	local07, #1
01ba0     F4 FF 9F 5D |  if_ne	jmp	#LR__0092
01ba4                 | LR__0093
01ba4     09 2B 8A F1 | 	sub	local07, arg01 wz
01ba8     98 16 90 AD |  if_e	jmp	#LR__0148
01bac                 | ' 
01bac                 | ' 
01bac                 | ' if isdec(lparts(0).part$) then let addptr=1 else let addptr=0
01bac     54 00 00 FF 
01bb0     70 E5 05 F1 | 	add	objptr, ##43376
01bb4     F2 12 02 FB | 	rdlong	arg01, objptr
01bb8     54 00 00 FF 
01bbc     70 E5 85 F1 | 	sub	objptr, ##43376
01bc0     10 30 B0 FD | 	call	#_isdec
01bc4     00 FA 0D F2 | 	cmp	result1, #0 wz
01bc8     7B 00 00 5F 
01bcc     54 E4 05 51 |  if_ne	add	objptr, ##63060
01bd0     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01bd4     7B 00 00 FF 
01bd8     54 E4 E5 F3 | 	sumnz	objptr, ##63060
01bdc     F2 00 68 AC |  if_e	wrlong	#0, objptr
01be0     7B 00 00 AF 
01be4     54 E4 85 A1 |  if_e	sub	objptr, ##63060
01be8     7B 00 00 FF 
01bec     54 E4 05 F1 | 	add	objptr, ##63060
01bf0     F2 26 02 FB | 	rdlong	local05, objptr
01bf4     03 26 66 F0 | 	shl	local05, #3
01bf8     26 00 00 FF 
01bfc     E4 E4 85 F1 | 	sub	objptr, ##19684
01c00     F2 26 02 F1 | 	add	local05, objptr
01c04     13 33 02 FB | 	rdlong	local11, local05
01c08     26 00 00 FF 
01c0c     E8 E4 05 F1 | 	add	objptr, ##19688
01c10     F2 32 62 FC | 	wrlong	local11, objptr
01c14     04 E4 85 F1 | 	sub	objptr, #4
01c18     F2 32 02 FB | 	rdlong	local11, objptr
01c1c     03 32 66 F0 | 	shl	local11, #3
01c20     26 00 00 FF 
01c24     E4 E4 85 F1 | 	sub	objptr, ##19684
01c28     F2 30 02 F6 | 	mov	local10, objptr
01c2c     F2 32 02 F1 | 	add	local11, objptr
01c30     19 15 02 FB | 	rdlong	arg02, local11
01c34     51 01 00 FF 
01c38     73 16 06 F6 | 	mov	arg03, ##@LR__4430
01c3c     01 12 06 F6 | 	mov	arg01, #1
01c40     54 00 00 FF 
01c44     70 E5 85 F1 | 	sub	objptr, ##43376
01c48     50 B5 B1 FD | 	call	#__system__Instr
01c4c     7B 00 00 FF 
01c50     5C E4 05 F1 | 	add	objptr, ##63068
01c54     F2 FA 61 FC | 	wrlong	result1, objptr
01c58                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 
01c58     FD 1E 02 F6 | 	mov	local01, result1
01c5c     7B 00 00 FF 
01c60     5C E4 85 F1 | 	sub	objptr, ##63068
01c64     01 1E 56 F2 | 	cmps	local01, #1 wc
01c68     DC 01 90 CD |  if_b	jmp	#LR__0100
01c6c     7B 00 00 FF 
01c70     54 E4 05 F1 | 	add	objptr, ##63060
01c74     F2 30 02 FB | 	rdlong	local10, objptr
01c78     03 30 66 F0 | 	shl	local10, #3
01c7c     26 00 00 FF 
01c80     E4 E4 85 F1 | 	sub	objptr, ##19684
01c84     F2 36 02 F6 | 	mov	local13, objptr
01c88     F2 30 02 F1 | 	add	local10, objptr
01c8c     18 13 02 FB | 	rdlong	arg01, local10
01c90     54 00 00 FF 
01c94     70 E5 85 F1 | 	sub	objptr, ##43376
01c98     09 2B 02 F6 | 	mov	local07, arg01
01c9c     97 06 48 FB | 	callpa	#(@LR__0095-@LR__0094)>>2,fcache_load_ptr_
01ca0                 | LR__0094
01ca0     15 FB C9 FA | 	rdbyte	result1, local07 wz
01ca4     01 2A 06 51 |  if_ne	add	local07, #1
01ca8     F4 FF 9F 5D |  if_ne	jmp	#LR__0094
01cac                 | LR__0095
01cac     09 2B 82 F1 | 	sub	local07, arg01
01cb0     15 2F 02 F6 | 	mov	local09, local07
01cb4     7B 00 00 FF 
01cb8     5C E4 05 F1 | 	add	objptr, ##63068
01cbc     F2 26 02 FB | 	rdlong	local05, objptr
01cc0     7B 00 00 FF 
01cc4     5C E4 85 F1 | 	sub	objptr, ##63068
01cc8     17 27 52 F2 | 	cmps	local05, local09 wc
01ccc     78 01 90 3D |  if_ae	jmp	#LR__0100
01cd0     01 3A 06 F1 | 	add	local15, #1
01cd4                 | '   k+=1
01cd4                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01cd4     1D 23 02 F6 | 	mov	local03, local15
01cd8     7B 00 00 FF 
01cdc     54 E4 05 F1 | 	add	objptr, ##63060
01ce0     F2 5C 02 FB | 	rdlong	local32, objptr
01ce4     01 5C 06 F1 | 	add	local32, #1
01ce8     26 00 00 FF 
01cec     E4 E4 85 F1 | 	sub	objptr, ##19684
01cf0     97 2E 48 FB | 	callpa	#(@LR__0097-@LR__0096)>>2,fcache_load_ptr_
01cf4                 | LR__0096
01cf4     11 29 02 F6 | 	mov	local06, local03
01cf8     01 28 86 F1 | 	sub	local06, #1
01cfc     03 28 66 F0 | 	shl	local06, #3
01d00     F2 28 02 F1 | 	add	local06, objptr
01d04     14 25 02 FB | 	rdlong	local04, local06
01d08     11 33 02 F6 | 	mov	local11, local03
01d0c     01 32 86 F1 | 	sub	local11, #1
01d10     03 32 66 F0 | 	shl	local11, #3
01d14     F2 32 02 F1 | 	add	local11, objptr
01d18     04 32 06 F1 | 	add	local11, #4
01d1c     19 2F 02 FB | 	rdlong	local09, local11
01d20     11 33 02 F6 | 	mov	local11, local03
01d24     03 32 66 F0 | 	shl	local11, #3
01d28     F2 32 02 F1 | 	add	local11, objptr
01d2c     19 25 62 FC | 	wrlong	local04, local11
01d30     11 4B 02 F6 | 	mov	local23, local03
01d34     03 4A 66 F0 | 	shl	local23, #3
01d38     F2 4A 02 F1 | 	add	local23, objptr
01d3c     04 4A 06 F1 | 	add	local23, #4
01d40     25 2F 62 FC | 	wrlong	local09, local23
01d44     01 22 86 F1 | 	sub	local03, #1
01d48     2E 23 52 F2 | 	cmps	local03, local32 wc
01d4c     A4 FF 9F 3D |  if_ae	jmp	#LR__0096
01d50                 | LR__0097
01d50     26 00 00 FF 
01d54     E4 E4 05 F1 | 	add	objptr, ##19684
01d58     F2 4A 02 FB | 	rdlong	local23, objptr
01d5c     25 27 02 F6 | 	mov	local05, local23
01d60     01 26 06 F1 | 	add	local05, #1
01d64     03 26 66 F0 | 	shl	local05, #3
01d68     26 00 00 FF 
01d6c     E4 E4 85 F1 | 	sub	objptr, ##19684
01d70     F2 26 02 F1 | 	add	local05, objptr
01d74     03 4A 66 F0 | 	shl	local23, #3
01d78     F2 4A 02 F1 | 	add	local23, objptr
01d7c     25 33 02 FB | 	rdlong	local11, local23
01d80     26 00 00 FF 
01d84     E4 E4 05 F1 | 	add	objptr, ##19684
01d88     F2 44 02 FB | 	rdlong	local20, objptr
01d8c     22 47 02 F6 | 	mov	local21, local20
01d90     03 46 66 F0 | 	shl	local21, #3
01d94     26 00 00 FF 
01d98     E4 E4 85 F1 | 	sub	objptr, ##19684
01d9c     F2 4C 02 F6 | 	mov	local24, objptr
01da0     F2 46 02 F1 | 	add	local21, objptr
01da4     23 13 02 FB | 	rdlong	arg01, local21
01da8     54 00 00 FF 
01dac     70 E5 85 F1 | 	sub	objptr, ##43376
01db0     09 2B 02 F6 | 	mov	local07, arg01
01db4     97 06 48 FB | 	callpa	#(@LR__0099-@LR__0098)>>2,fcache_load_ptr_
01db8                 | LR__0098
01db8     15 FB C9 FA | 	rdbyte	result1, local07 wz
01dbc     01 2A 06 51 |  if_ne	add	local07, #1
01dc0     F4 FF 9F 5D |  if_ne	jmp	#LR__0098
01dc4                 | LR__0099
01dc4     09 2B 82 F1 | 	sub	local07, arg01
01dc8     15 15 02 F6 | 	mov	arg02, local07
01dcc     7B 00 00 FF 
01dd0     5C E4 05 F1 | 	add	objptr, ##63068
01dd4     F2 4A 02 FB | 	rdlong	local23, objptr
01dd8     7B 00 00 FF 
01ddc     5C E4 85 F1 | 	sub	objptr, ##63068
01de0     25 15 82 F1 | 	sub	arg02, local23
01de4     19 13 02 F6 | 	mov	arg01, local11
01de8     4C AF B1 FD | 	call	#__system__Right_S
01dec     13 FB 61 FC | 	wrlong	result1, local05
01df0     7B 00 00 FF 
01df4     54 E4 05 F1 | 	add	objptr, ##63060
01df8     F2 34 02 FB | 	rdlong	local12, objptr
01dfc     1A 27 02 F6 | 	mov	local05, local12
01e00     03 26 66 F0 | 	shl	local05, #3
01e04     26 00 00 FF 
01e08     E4 E4 85 F1 | 	sub	objptr, ##19684
01e0c     F2 26 02 F1 | 	add	local05, objptr
01e10     1A 4B 02 F6 | 	mov	local23, local12
01e14     03 4A 66 F0 | 	shl	local23, #3
01e18     F2 42 02 F6 | 	mov	local19, objptr
01e1c     F2 4A 02 F1 | 	add	local23, objptr
01e20     25 13 02 FB | 	rdlong	arg01, local23
01e24     26 00 00 FF 
01e28     EC E4 05 F1 | 	add	objptr, ##19692
01e2c     F2 36 02 FB | 	rdlong	local13, objptr
01e30     7B 00 00 FF 
01e34     5C E4 85 F1 | 	sub	objptr, ##63068
01e38     1B 31 02 F6 | 	mov	local10, local13
01e3c     18 15 02 F6 | 	mov	arg02, local10
01e40     6C AE B1 FD | 	call	#__system__Left_S
01e44     13 FB 61 FC | 	wrlong	result1, local05
01e48                 | LR__0100
01e48                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then
01e48     7B 00 00 FF 
01e4c     54 E4 05 F1 | 	add	objptr, ##63060
01e50     F2 28 02 FB | 	rdlong	local06, objptr
01e54     03 28 66 F0 | 	shl	local06, #3
01e58     26 00 00 FF 
01e5c     E4 E4 85 F1 | 	sub	objptr, ##19684
01e60     F2 28 02 F1 | 	add	local06, objptr
01e64     14 13 02 FB | 	rdlong	arg01, local06
01e68     01 14 06 F6 | 	mov	arg02, #1
01e6c     54 00 00 FF 
01e70     70 E5 85 F1 | 	sub	objptr, ##43376
01e74     38 AE B1 FD | 	call	#__system__Left_S
01e78     FD 12 02 F6 | 	mov	arg01, result1
01e7c     51 01 00 FF 
01e80     75 14 06 F6 | 	mov	arg02, ##@LR__4431
01e84     08 8E B1 FD | 	call	#__system___string_cmp
01e88     00 FA 0D F2 | 	cmp	result1, #0 wz
01e8c     9C 01 90 5D |  if_ne	jmp	#LR__0107
01e90     7B 00 00 FF 
01e94     54 E4 05 F1 | 	add	objptr, ##63060
01e98     F2 32 02 FB | 	rdlong	local11, objptr
01e9c     03 32 66 F0 | 	shl	local11, #3
01ea0     26 00 00 FF 
01ea4     E4 E4 85 F1 | 	sub	objptr, ##19684
01ea8     F2 30 02 F6 | 	mov	local10, objptr
01eac     F2 32 02 F1 | 	add	local11, objptr
01eb0     19 13 02 FB | 	rdlong	arg01, local11
01eb4     54 00 00 FF 
01eb8     70 E5 85 F1 | 	sub	objptr, ##43376
01ebc     09 2B 02 F6 | 	mov	local07, arg01
01ec0     97 06 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01ec4                 | LR__0101
01ec4     15 FB C9 FA | 	rdbyte	result1, local07 wz
01ec8     01 2A 06 51 |  if_ne	add	local07, #1
01ecc     F4 FF 9F 5D |  if_ne	jmp	#LR__0101
01ed0                 | LR__0102
01ed0     09 2B 82 F1 | 	sub	local07, arg01
01ed4     02 2A 56 F2 | 	cmps	local07, #2 wc
01ed8     50 01 90 CD |  if_b	jmp	#LR__0107
01edc     01 3A 06 F1 | 	add	local15, #1
01ee0                 | '   k+=1
01ee0                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01ee0     1D 23 02 F6 | 	mov	local03, local15
01ee4     7B 00 00 FF 
01ee8     54 E4 05 F1 | 	add	objptr, ##63060
01eec     F2 5E 02 FB | 	rdlong	local33, objptr
01ef0     01 5E 06 F1 | 	add	local33, #1
01ef4     26 00 00 FF 
01ef8     E4 E4 85 F1 | 	sub	objptr, ##19684
01efc     97 2E 48 FB | 	callpa	#(@LR__0104-@LR__0103)>>2,fcache_load_ptr_
01f00                 | LR__0103
01f00     11 29 02 F6 | 	mov	local06, local03
01f04     01 28 86 F1 | 	sub	local06, #1
01f08     03 28 66 F0 | 	shl	local06, #3
01f0c     F2 28 02 F1 | 	add	local06, objptr
01f10     14 25 02 FB | 	rdlong	local04, local06
01f14     11 33 02 F6 | 	mov	local11, local03
01f18     01 32 86 F1 | 	sub	local11, #1
01f1c     03 32 66 F0 | 	shl	local11, #3
01f20     F2 32 02 F1 | 	add	local11, objptr
01f24     04 32 06 F1 | 	add	local11, #4
01f28     19 2F 02 FB | 	rdlong	local09, local11
01f2c     11 33 02 F6 | 	mov	local11, local03
01f30     03 32 66 F0 | 	shl	local11, #3
01f34     F2 32 02 F1 | 	add	local11, objptr
01f38     19 25 62 FC | 	wrlong	local04, local11
01f3c     11 4B 02 F6 | 	mov	local23, local03
01f40     03 4A 66 F0 | 	shl	local23, #3
01f44     F2 4A 02 F1 | 	add	local23, objptr
01f48     04 4A 06 F1 | 	add	local23, #4
01f4c     25 2F 62 FC | 	wrlong	local09, local23
01f50     01 22 86 F1 | 	sub	local03, #1
01f54     2F 23 52 F2 | 	cmps	local03, local33 wc
01f58     A4 FF 9F 3D |  if_ae	jmp	#LR__0103
01f5c                 | LR__0104
01f5c     26 00 00 FF 
01f60     E4 E4 05 F1 | 	add	objptr, ##19684
01f64     F2 4A 02 FB | 	rdlong	local23, objptr
01f68     25 27 02 F6 | 	mov	local05, local23
01f6c     01 26 06 F1 | 	add	local05, #1
01f70     03 26 66 F0 | 	shl	local05, #3
01f74     26 00 00 FF 
01f78     E4 E4 85 F1 | 	sub	objptr, ##19684
01f7c     F2 26 02 F1 | 	add	local05, objptr
01f80     03 4A 66 F0 | 	shl	local23, #3
01f84     F2 4A 02 F1 | 	add	local23, objptr
01f88     25 33 02 FB | 	rdlong	local11, local23
01f8c     26 00 00 FF 
01f90     E4 E4 05 F1 | 	add	objptr, ##19684
01f94     F2 42 02 FB | 	rdlong	local19, objptr
01f98     21 4B 02 F6 | 	mov	local23, local19
01f9c     25 45 02 F6 | 	mov	local20, local23
01fa0     22 47 02 F6 | 	mov	local21, local20
01fa4     03 46 66 F0 | 	shl	local21, #3
01fa8     26 00 00 FF 
01fac     E4 E4 85 F1 | 	sub	objptr, ##19684
01fb0     F2 4C 02 F6 | 	mov	local24, objptr
01fb4     F2 46 02 F1 | 	add	local21, objptr
01fb8     23 13 02 FB | 	rdlong	arg01, local21
01fbc     54 00 00 FF 
01fc0     70 E5 85 F1 | 	sub	objptr, ##43376
01fc4     09 2B 02 F6 | 	mov	local07, arg01
01fc8     97 06 48 FB | 	callpa	#(@LR__0106-@LR__0105)>>2,fcache_load_ptr_
01fcc                 | LR__0105
01fcc     15 FB C9 FA | 	rdbyte	result1, local07 wz
01fd0     01 2A 06 51 |  if_ne	add	local07, #1
01fd4     F4 FF 9F 5D |  if_ne	jmp	#LR__0105
01fd8                 | LR__0106
01fd8     09 2B 82 F1 | 	sub	local07, arg01
01fdc     15 35 02 F6 | 	mov	local12, local07
01fe0     1A 37 02 F6 | 	mov	local13, local12
01fe4     01 36 86 F1 | 	sub	local13, #1
01fe8     1B 31 02 F6 | 	mov	local10, local13
01fec     19 13 02 F6 | 	mov	arg01, local11
01ff0     18 15 02 F6 | 	mov	arg02, local10
01ff4     40 AD B1 FD | 	call	#__system__Right_S
01ff8     13 FB 61 FC | 	wrlong	result1, local05
01ffc     7B 00 00 FF 
02000     54 E4 05 F1 | 	add	objptr, ##63060
02004     F2 26 02 FB | 	rdlong	local05, objptr
02008     03 26 66 F0 | 	shl	local05, #3
0200c     26 00 00 FF 
02010     E4 E4 85 F1 | 	sub	objptr, ##19684
02014     F2 26 02 F1 | 	add	local05, objptr
02018     51 01 00 FF 
0201c     77 32 06 F6 | 	mov	local11, ##@LR__4432
02020     13 33 62 FC | 	wrlong	local11, local05
02024     54 00 00 FF 
02028     70 E5 85 F1 | 	sub	objptr, ##43376
0202c                 | LR__0107
0202c     7B 00 00 FF 
02030     54 E4 05 F1 | 	add	objptr, ##63060
02034     F2 26 02 FB | 	rdlong	local05, objptr
02038     03 26 66 F0 | 	shl	local05, #3
0203c     26 00 00 FF 
02040     E4 E4 85 F1 | 	sub	objptr, ##19684
02044     F2 26 02 F1 | 	add	local05, objptr
02048     13 33 02 FB | 	rdlong	local11, local05
0204c     26 00 00 FF 
02050     E8 E4 05 F1 | 	add	objptr, ##19688
02054     F2 32 62 FC | 	wrlong	local11, objptr
02058                 | ' 
02058                 | ' ' process the case when simple load or save is called without ""
02058                 | ' 
02058                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") andalso lparts(addptr+1).token=token_name then 
02058     7B 00 00 FF 
0205c     58 E4 85 F1 | 	sub	objptr, ##63064
02060     51 01 00 FF 
02064     79 14 06 F6 | 	mov	arg02, ##@LR__4433
02068     19 13 02 F6 | 	mov	arg01, local11
0206c     20 8C B1 FD | 	call	#__system___string_cmp
02070     00 FA 0D F2 | 	cmp	result1, #0 wz
02074     50 00 90 AD |  if_e	jmp	#LR__0108
02078     7B 00 00 FF 
0207c     58 E4 05 F1 | 	add	objptr, ##63064
02080     F2 12 02 FB | 	rdlong	arg01, objptr
02084     7B 00 00 FF 
02088     58 E4 85 F1 | 	sub	objptr, ##63064
0208c     51 01 00 FF 
02090     7F 14 06 F6 | 	mov	arg02, ##@LR__4434
02094     F8 8B B1 FD | 	call	#__system___string_cmp
02098     00 FA 0D F2 | 	cmp	result1, #0 wz
0209c     28 00 90 AD |  if_e	jmp	#LR__0108
020a0     7B 00 00 FF 
020a4     58 E4 05 F1 | 	add	objptr, ##63064
020a8     F2 12 02 FB | 	rdlong	arg01, objptr
020ac     7B 00 00 FF 
020b0     58 E4 85 F1 | 	sub	objptr, ##63064
020b4     51 01 00 FF 
020b8     86 14 06 F6 | 	mov	arg02, ##@LR__4435
020bc     D0 8B B1 FD | 	call	#__system___string_cmp
020c0     00 FA 0D F2 | 	cmp	result1, #0 wz
020c4     94 01 90 5D |  if_ne	jmp	#LR__0111
020c8                 | LR__0108
020c8     7B 00 00 FF 
020cc     54 E4 05 F1 | 	add	objptr, ##63060
020d0     F2 32 02 FB | 	rdlong	local11, objptr
020d4     01 32 06 F1 | 	add	local11, #1
020d8     19 31 02 F6 | 	mov	local10, local11
020dc     03 30 66 F0 | 	shl	local10, #3
020e0     26 00 00 FF 
020e4     E4 E4 85 F1 | 	sub	objptr, ##19684
020e8     F2 36 02 F6 | 	mov	local13, objptr
020ec     F2 30 02 F1 | 	add	local10, objptr
020f0     04 30 06 F1 | 	add	local10, #4
020f4     18 4B 02 FB | 	rdlong	local23, local10
020f8     04 30 86 F1 | 	sub	local10, #4
020fc     25 35 02 F6 | 	mov	local12, local23
02100     01 00 00 FF 
02104     04 34 0E F2 | 	cmp	local12, ##516 wz
02108     54 00 00 FF 
0210c     70 E5 85 F1 | 	sub	objptr, ##43376
02110     48 01 90 5D |  if_ne	jmp	#LR__0111
02114                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(addptr+1).token=token_decimal
02114     7B 00 00 FF 
02118     54 E4 05 F1 | 	add	objptr, ##63060
0211c     F2 28 02 FB | 	rdlong	local06, objptr
02120     01 28 06 F1 | 	add	local06, #1
02124     03 28 66 F0 | 	shl	local06, #3
02128     26 00 00 FF 
0212c     E4 E4 85 F1 | 	sub	objptr, ##19684
02130     F2 28 02 F1 | 	add	local06, objptr
02134     14 13 02 FB | 	rdlong	arg01, local06
02138     51 01 00 FF 
0213c     8C 14 06 F6 | 	mov	arg02, ##@LR__4436
02140     54 00 00 FF 
02144     70 E5 85 F1 | 	sub	objptr, ##43376
02148     44 8B B1 FD | 	call	#__system___string_cmp
0214c     00 FA 0D F2 | 	cmp	result1, #0 wz
02150     60 00 90 5D |  if_ne	jmp	#LR__0109
02154     7B 00 00 FF 
02158     54 E4 05 F1 | 	add	objptr, ##63060
0215c     F2 26 02 FB | 	rdlong	local05, objptr
02160     01 26 06 F1 | 	add	local05, #1
02164     03 26 66 F0 | 	shl	local05, #3
02168     26 00 00 FF 
0216c     E4 E4 85 F1 | 	sub	objptr, ##19684
02170     F2 26 02 F1 | 	add	local05, objptr
02174     51 01 00 FF 
02178     8F 32 06 F6 | 	mov	local11, ##@LR__4437
0217c     13 33 62 FC | 	wrlong	local11, local05
02180     26 00 00 FF 
02184     E4 E4 05 F1 | 	add	objptr, ##19684
02188     F2 26 02 FB | 	rdlong	local05, objptr
0218c     01 26 06 F1 | 	add	local05, #1
02190     03 26 66 F0 | 	shl	local05, #3
02194     26 00 00 FF 
02198     E4 E4 85 F1 | 	sub	objptr, ##19684
0219c     F2 26 02 F1 | 	add	local05, objptr
021a0     04 26 06 F1 | 	add	local05, #4
021a4     01 00 80 FF 
021a8     13 01 68 FC | 	wrlong	##512, local05
021ac     54 00 00 FF 
021b0     70 E5 85 F1 | 	sub	objptr, ##43376
021b4                 | LR__0109
021b4                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(addptr+1).token=token_decimal
021b4     7B 00 00 FF 
021b8     54 E4 05 F1 | 	add	objptr, ##63060
021bc     F2 28 02 FB | 	rdlong	local06, objptr
021c0     01 28 06 F1 | 	add	local06, #1
021c4     03 28 66 F0 | 	shl	local06, #3
021c8     26 00 00 FF 
021cc     E4 E4 85 F1 | 	sub	objptr, ##19684
021d0     F2 32 02 F6 | 	mov	local11, objptr
021d4     F2 28 02 F1 | 	add	local06, objptr
021d8     14 13 02 FB | 	rdlong	arg01, local06
021dc     51 01 00 FF 
021e0     91 14 06 F6 | 	mov	arg02, ##@LR__4438
021e4     54 00 00 FF 
021e8     70 E5 85 F1 | 	sub	objptr, ##43376
021ec     A0 8A B1 FD | 	call	#__system___string_cmp
021f0     00 FA 0D F2 | 	cmp	result1, #0 wz
021f4     64 00 90 5D |  if_ne	jmp	#LR__0110
021f8     7B 00 00 FF 
021fc     54 E4 05 F1 | 	add	objptr, ##63060
02200     F2 26 02 FB | 	rdlong	local05, objptr
02204     01 26 06 F1 | 	add	local05, #1
02208     03 26 66 F0 | 	shl	local05, #3
0220c     26 00 00 FF 
02210     E4 E4 85 F1 | 	sub	objptr, ##19684
02214     F2 26 02 F1 | 	add	local05, objptr
02218     51 01 00 FF 
0221c     95 32 06 F6 | 	mov	local11, ##@LR__4439
02220     13 33 62 FC | 	wrlong	local11, local05
02224     26 00 00 FF 
02228     E4 E4 05 F1 | 	add	objptr, ##19684
0222c     F2 26 02 FB | 	rdlong	local05, objptr
02230     01 26 06 F1 | 	add	local05, #1
02234     03 26 66 F0 | 	shl	local05, #3
02238     26 00 00 FF 
0223c     E4 E4 85 F1 | 	sub	objptr, ##19684
02240     F2 26 02 F1 | 	add	local05, objptr
02244     09 32 C6 F9 | 	decod	local11, #9
02248     04 26 06 F1 | 	add	local05, #4
0224c     01 00 80 FF 
02250     13 01 68 FC | 	wrlong	##512, local05
02254     54 00 00 FF 
02258     70 E5 85 F1 | 	sub	objptr, ##43376
0225c                 | LR__0110
0225c                 | LR__0111
0225c                 | ' if (lp$="mode" orelse lp$="m.") then 
0225c     7B 00 00 FF 
02260     58 E4 05 F1 | 	add	objptr, ##63064
02264     F2 12 02 FB | 	rdlong	arg01, objptr
02268     7B 00 00 FF 
0226c     58 E4 85 F1 | 	sub	objptr, ##63064
02270     51 01 00 FF 
02274     97 14 06 F6 | 	mov	arg02, ##@LR__4440
02278     14 8A B1 FD | 	call	#__system___string_cmp
0227c     00 FA 0D F2 | 	cmp	result1, #0 wz
02280     28 00 90 AD |  if_e	jmp	#LR__0112
02284     7B 00 00 FF 
02288     58 E4 05 F1 | 	add	objptr, ##63064
0228c     F2 12 02 FB | 	rdlong	arg01, objptr
02290     7B 00 00 FF 
02294     58 E4 85 F1 | 	sub	objptr, ##63064
02298     51 01 00 FF 
0229c     9C 14 06 F6 | 	mov	arg02, ##@LR__4441
022a0     EC 89 B1 FD | 	call	#__system___string_cmp
022a4     00 FA 0D F2 | 	cmp	result1, #0 wz
022a8     48 02 90 5D |  if_ne	jmp	#LR__0118
022ac                 | LR__0112
022ac                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"  
022ac     7B 00 00 FF 
022b0     54 E4 05 F1 | 	add	objptr, ##63060
022b4     F2 28 02 FB | 	rdlong	local06, objptr
022b8     01 28 06 F1 | 	add	local06, #1
022bc     03 28 66 F0 | 	shl	local06, #3
022c0     26 00 00 FF 
022c4     E4 E4 85 F1 | 	sub	objptr, ##19684
022c8     F2 28 02 F1 | 	add	local06, objptr
022cc     14 13 02 FB | 	rdlong	arg01, local06
022d0     51 01 00 FF 
022d4     9F 14 06 F6 | 	mov	arg02, ##@LR__4442
022d8     54 00 00 FF 
022dc     70 E5 85 F1 | 	sub	objptr, ##43376
022e0     AC 89 B1 FD | 	call	#__system___string_cmp
022e4     00 FA 0D F2 | 	cmp	result1, #0 wz
022e8     34 00 90 5D |  if_ne	jmp	#LR__0113
022ec     7B 00 00 FF 
022f0     54 E4 05 F1 | 	add	objptr, ##63060
022f4     F2 26 02 FB | 	rdlong	local05, objptr
022f8     01 26 06 F1 | 	add	local05, #1
022fc     03 26 66 F0 | 	shl	local05, #3
02300     26 00 00 FF 
02304     E4 E4 85 F1 | 	sub	objptr, ##19684
02308     F2 26 02 F1 | 	add	local05, objptr
0230c     51 01 00 FF 
02310     A5 32 06 F6 | 	mov	local11, ##@LR__4443
02314     13 33 62 FC | 	wrlong	local11, local05
02318     54 00 00 FF 
0231c     70 E5 85 F1 | 	sub	objptr, ##43376
02320                 | LR__0113
02320                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02320     7B 00 00 FF 
02324     54 E4 05 F1 | 	add	objptr, ##63060
02328     F2 28 02 FB | 	rdlong	local06, objptr
0232c     01 28 06 F1 | 	add	local06, #1
02330     03 28 66 F0 | 	shl	local06, #3
02334     26 00 00 FF 
02338     E4 E4 85 F1 | 	sub	objptr, ##19684
0233c     F2 28 02 F1 | 	add	local06, objptr
02340     14 13 02 FB | 	rdlong	arg01, local06
02344     51 01 00 FF 
02348     A7 14 06 F6 | 	mov	arg02, ##@LR__4444
0234c     54 00 00 FF 
02350     70 E5 85 F1 | 	sub	objptr, ##43376
02354     38 89 B1 FD | 	call	#__system___string_cmp
02358     00 FA 0D F2 | 	cmp	result1, #0 wz
0235c     34 00 90 5D |  if_ne	jmp	#LR__0114
02360     7B 00 00 FF 
02364     54 E4 05 F1 | 	add	objptr, ##63060
02368     F2 26 02 FB | 	rdlong	local05, objptr
0236c     01 26 06 F1 | 	add	local05, #1
02370     03 26 66 F0 | 	shl	local05, #3
02374     26 00 00 FF 
02378     E4 E4 85 F1 | 	sub	objptr, ##19684
0237c     F2 26 02 F1 | 	add	local05, objptr
02380     51 01 00 FF 
02384     B0 32 06 F6 | 	mov	local11, ##@LR__4445
02388     13 33 62 FC | 	wrlong	local11, local05
0238c     54 00 00 FF 
02390     70 E5 85 F1 | 	sub	objptr, ##43376
02394                 | LR__0114
02394                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02394     7B 00 00 FF 
02398     54 E4 05 F1 | 	add	objptr, ##63060
0239c     F2 28 02 FB | 	rdlong	local06, objptr
023a0     01 28 06 F1 | 	add	local06, #1
023a4     03 28 66 F0 | 	shl	local06, #3
023a8     26 00 00 FF 
023ac     E4 E4 85 F1 | 	sub	objptr, ##19684
023b0     F2 28 02 F1 | 	add	local06, objptr
023b4     14 13 02 FB | 	rdlong	arg01, local06
023b8     51 01 00 FF 
023bc     B2 14 06 F6 | 	mov	arg02, ##@LR__4446
023c0     54 00 00 FF 
023c4     70 E5 85 F1 | 	sub	objptr, ##43376
023c8     C4 88 B1 FD | 	call	#__system___string_cmp
023cc     00 FA 0D F2 | 	cmp	result1, #0 wz
023d0     34 00 90 5D |  if_ne	jmp	#LR__0115
023d4     7B 00 00 FF 
023d8     54 E4 05 F1 | 	add	objptr, ##63060
023dc     F2 26 02 FB | 	rdlong	local05, objptr
023e0     01 26 06 F1 | 	add	local05, #1
023e4     03 26 66 F0 | 	shl	local05, #3
023e8     26 00 00 FF 
023ec     E4 E4 85 F1 | 	sub	objptr, ##19684
023f0     F2 26 02 F1 | 	add	local05, objptr
023f4     51 01 00 FF 
023f8     BB 32 06 F6 | 	mov	local11, ##@LR__4447
023fc     13 33 62 FC | 	wrlong	local11, local05
02400     54 00 00 FF 
02404     70 E5 85 F1 | 	sub	objptr, ##43376
02408                 | LR__0115
02408                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02408     7B 00 00 FF 
0240c     54 E4 05 F1 | 	add	objptr, ##63060
02410     F2 28 02 FB | 	rdlong	local06, objptr
02414     01 28 06 F1 | 	add	local06, #1
02418     03 28 66 F0 | 	shl	local06, #3
0241c     26 00 00 FF 
02420     E4 E4 85 F1 | 	sub	objptr, ##19684
02424     F2 28 02 F1 | 	add	local06, objptr
02428     14 13 02 FB | 	rdlong	arg01, local06
0242c     51 01 00 FF 
02430     BD 14 06 F6 | 	mov	arg02, ##@LR__4448
02434     54 00 00 FF 
02438     70 E5 85 F1 | 	sub	objptr, ##43376
0243c     50 88 B1 FD | 	call	#__system___string_cmp
02440     00 FA 0D F2 | 	cmp	result1, #0 wz
02444     34 00 90 5D |  if_ne	jmp	#LR__0116
02448     7B 00 00 FF 
0244c     54 E4 05 F1 | 	add	objptr, ##63060
02450     F2 26 02 FB | 	rdlong	local05, objptr
02454     01 26 06 F1 | 	add	local05, #1
02458     03 26 66 F0 | 	shl	local05, #3
0245c     26 00 00 FF 
02460     E4 E4 85 F1 | 	sub	objptr, ##19684
02464     F2 26 02 F1 | 	add	local05, objptr
02468     51 01 00 FF 
0246c     C6 32 06 F6 | 	mov	local11, ##@LR__4449
02470     13 33 62 FC | 	wrlong	local11, local05
02474     54 00 00 FF 
02478     70 E5 85 F1 | 	sub	objptr, ##43376
0247c                 | LR__0116
0247c                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
0247c     7B 00 00 FF 
02480     54 E4 05 F1 | 	add	objptr, ##63060
02484     F2 28 02 FB | 	rdlong	local06, objptr
02488     01 28 06 F1 | 	add	local06, #1
0248c     03 28 66 F0 | 	shl	local06, #3
02490     26 00 00 FF 
02494     E4 E4 85 F1 | 	sub	objptr, ##19684
02498     F2 32 02 F6 | 	mov	local11, objptr
0249c     F2 28 02 F1 | 	add	local06, objptr
024a0     14 13 02 FB | 	rdlong	arg01, local06
024a4     51 01 00 FF 
024a8     C8 14 06 F6 | 	mov	arg02, ##@LR__4450
024ac     54 00 00 FF 
024b0     70 E5 85 F1 | 	sub	objptr, ##43376
024b4     D8 87 B1 FD | 	call	#__system___string_cmp
024b8     00 FA 0D F2 | 	cmp	result1, #0 wz
024bc     34 00 90 5D |  if_ne	jmp	#LR__0117
024c0     7B 00 00 FF 
024c4     54 E4 05 F1 | 	add	objptr, ##63060
024c8     F2 26 02 FB | 	rdlong	local05, objptr
024cc     01 26 06 F1 | 	add	local05, #1
024d0     03 26 66 F0 | 	shl	local05, #3
024d4     26 00 00 FF 
024d8     E4 E4 85 F1 | 	sub	objptr, ##19684
024dc     F2 26 02 F1 | 	add	local05, objptr
024e0     51 01 00 FF 
024e4     CB 32 06 F6 | 	mov	local11, ##@LR__4451
024e8     13 33 62 FC | 	wrlong	local11, local05
024ec     54 00 00 FF 
024f0     70 E5 85 F1 | 	sub	objptr, ##43376
024f4                 | LR__0117
024f4                 | LR__0118
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' ' 2a find part types 
024f4                 | ' 
024f4                 | ' for i=0 to k-1
024f4     00 22 06 F6 | 	mov	local03, #0
024f8     1D 61 02 F6 | 	mov	local34, local15
024fc                 | LR__0119
024fc     30 23 52 F2 | 	cmps	local03, local34 wc
02500     74 05 90 3D |  if_ae	jmp	#LR__0128
02504     11 2F 02 F6 | 	mov	local09, local03
02508     03 2E 66 F0 | 	shl	local09, #3
0250c     54 00 00 FF 
02510     70 E5 05 F1 | 	add	objptr, ##43376
02514     F2 2E 02 F1 | 	add	local09, objptr
02518     11 35 02 F6 | 	mov	local12, local03
0251c     03 34 66 F0 | 	shl	local12, #3
02520     F2 4A 02 F6 | 	mov	local23, objptr
02524     F2 34 02 F1 | 	add	local12, objptr
02528     1A 13 02 FB | 	rdlong	arg01, local12
0252c     54 00 00 FF 
02530     70 E5 85 F1 | 	sub	objptr, ##43376
02534     18 10 B0 FD | 	call	#_isseparator
02538     FD FA E1 F8 | 	getbyte	result1, result1, #0
0253c     04 2E 06 F1 | 	add	local09, #4
02540     17 FB 61 FC | 	wrlong	result1, local09
02544                 | ' lparts(i).token=isseparator(lparts(i).part$): if lparts(i).token>0 then goto 102
02544     11 2F 02 F6 | 	mov	local09, local03
02548     03 2E 66 F0 | 	shl	local09, #3
0254c     54 00 00 FF 
02550     70 E5 05 F1 | 	add	objptr, ##43376
02554     F2 2E 02 F1 | 	add	local09, objptr
02558     04 2E 06 F1 | 	add	local09, #4
0255c     17 33 02 FB | 	rdlong	local11, local09
02560     01 32 56 F2 | 	cmps	local11, #1 wc
02564     54 00 00 FF 
02568     70 E5 85 F1 | 	sub	objptr, ##43376
0256c     00 05 90 3D |  if_ae	jmp	#LR__0127
02570     11 2F 02 F6 | 	mov	local09, local03
02574     03 2E 66 F0 | 	shl	local09, #3
02578     54 00 00 FF 
0257c     70 E5 05 F1 | 	add	objptr, ##43376
02580     F2 2E 02 F1 | 	add	local09, objptr
02584     11 35 02 F6 | 	mov	local12, local03
02588     03 34 66 F0 | 	shl	local12, #3
0258c     F2 4A 02 F6 | 	mov	local23, objptr
02590     F2 34 02 F1 | 	add	local12, objptr
02594     1A 13 02 FB | 	rdlong	arg01, local12
02598     54 00 00 FF 
0259c     70 E5 85 F1 | 	sub	objptr, ##43376
025a0     CC 0C B0 FD | 	call	#_isoperator
025a4     FD FA E1 F8 | 	getbyte	result1, result1, #0
025a8     04 2E 06 F1 | 	add	local09, #4
025ac     17 FB 61 FC | 	wrlong	result1, local09
025b0                 | ' lparts(i).token=isoperator(lparts(i).part$): if lparts(i).token>0 then goto 102
025b0     11 2F 02 F6 | 	mov	local09, local03
025b4     03 2E 66 F0 | 	shl	local09, #3
025b8     54 00 00 FF 
025bc     70 E5 05 F1 | 	add	objptr, ##43376
025c0     F2 2E 02 F1 | 	add	local09, objptr
025c4     04 2E 06 F1 | 	add	local09, #4
025c8     17 33 02 FB | 	rdlong	local11, local09
025cc     01 32 56 F2 | 	cmps	local11, #1 wc
025d0     54 00 00 FF 
025d4     70 E5 85 F1 | 	sub	objptr, ##43376
025d8     94 04 90 3D |  if_ae	jmp	#LR__0127
025dc     11 2F 02 F6 | 	mov	local09, local03
025e0     03 2E 66 F0 | 	shl	local09, #3
025e4     54 00 00 FF 
025e8     70 E5 05 F1 | 	add	objptr, ##43376
025ec     F2 2E 02 F1 | 	add	local09, objptr
025f0     11 35 02 F6 | 	mov	local12, local03
025f4     03 34 66 F0 | 	shl	local12, #3
025f8     F2 4A 02 F6 | 	mov	local23, objptr
025fc     F2 34 02 F1 | 	add	local12, objptr
02600     1A 13 02 FB | 	rdlong	arg01, local12
02604     54 00 00 FF 
02608     70 E5 85 F1 | 	sub	objptr, ##43376
0260c                 | ' 
0260c                 | ' select case s
0260c     51 01 00 FF 
02610     81 15 06 F6 | 	mov	arg02, ##@LR__4504
02614     78 86 B1 FD | 	call	#__system___string_cmp
02618     00 FA 0D F2 | 	cmp	result1, #0 wz
0261c     1B FA 05 A6 |  if_e	mov	result1, #27
02620     00 FA 05 56 |  if_ne	mov	result1, #0
02624     FD FA E1 F8 | 	getbyte	result1, result1, #0
02628     04 2E 06 F1 | 	add	local09, #4
0262c     17 FB 61 FC | 	wrlong	result1, local09
02630                 | ' lparts(i).token=isassign(lparts(i).part$) : if lparts(i).token>0 then goto 102
02630     11 2F 02 F6 | 	mov	local09, local03
02634     03 2E 66 F0 | 	shl	local09, #3
02638     54 00 00 FF 
0263c     70 E5 05 F1 | 	add	objptr, ##43376
02640     F2 2E 02 F1 | 	add	local09, objptr
02644     04 2E 06 F1 | 	add	local09, #4
02648     17 33 02 FB | 	rdlong	local11, local09
0264c     01 32 56 F2 | 	cmps	local11, #1 wc
02650     54 00 00 FF 
02654     70 E5 85 F1 | 	sub	objptr, ##43376
02658     14 04 90 3D |  if_ae	jmp	#LR__0127
0265c     11 2F 02 F6 | 	mov	local09, local03
02660     03 2E 66 F0 | 	shl	local09, #3
02664     54 00 00 FF 
02668     70 E5 05 F1 | 	add	objptr, ##43376
0266c     F2 2E 02 F1 | 	add	local09, objptr
02670     11 35 02 F6 | 	mov	local12, local03
02674     03 34 66 F0 | 	shl	local12, #3
02678     F2 4A 02 F6 | 	mov	local23, objptr
0267c     F2 34 02 F1 | 	add	local12, objptr
02680     1A 13 02 FB | 	rdlong	arg01, local12
02684     54 00 00 FF 
02688     70 E5 85 F1 | 	sub	objptr, ##43376
0268c     C0 10 B0 FD | 	call	#_iscommand
02690     FD FA E1 F8 | 	getbyte	result1, result1, #0
02694     04 2E 06 F1 | 	add	local09, #4
02698     17 FB 61 FC | 	wrlong	result1, local09
0269c                 | ' lparts(i).token=iscommand(lparts(i).part$): if lparts(i).token>0 then goto 102
0269c     11 2F 02 F6 | 	mov	local09, local03
026a0     03 2E 66 F0 | 	shl	local09, #3
026a4     54 00 00 FF 
026a8     70 E5 05 F1 | 	add	objptr, ##43376
026ac     F2 2E 02 F1 | 	add	local09, objptr
026b0     04 2E 06 F1 | 	add	local09, #4
026b4     17 33 02 FB | 	rdlong	local11, local09
026b8     01 32 56 F2 | 	cmps	local11, #1 wc
026bc     54 00 00 FF 
026c0     70 E5 85 F1 | 	sub	objptr, ##43376
026c4     A8 03 90 3D |  if_ae	jmp	#LR__0127
026c8     11 2F 02 F6 | 	mov	local09, local03
026cc     03 2E 66 F0 | 	shl	local09, #3
026d0     54 00 00 FF 
026d4     70 E5 05 F1 | 	add	objptr, ##43376
026d8     F2 2E 02 F1 | 	add	local09, objptr
026dc     11 31 02 F6 | 	mov	local10, local03
026e0     18 37 02 F6 | 	mov	local13, local10
026e4     1B 35 02 F6 | 	mov	local12, local13
026e8     03 34 66 F0 | 	shl	local12, #3
026ec     F2 4A 02 F6 | 	mov	local23, objptr
026f0     F2 34 02 F1 | 	add	local12, objptr
026f4     1A 13 02 FB | 	rdlong	arg01, local12
026f8     54 00 00 FF 
026fc     70 E5 85 F1 | 	sub	objptr, ##43376
02700     6C 1B B0 FD | 	call	#_isfunction
02704     FD FA E1 F8 | 	getbyte	result1, result1, #0
02708     04 2E 06 F1 | 	add	local09, #4
0270c     17 FB 61 FC | 	wrlong	result1, local09
02710                 | ' lparts(i).token=isfunction(lparts(i).part$): if lparts(i).token>0 then goto 102
02710     11 2F 02 F6 | 	mov	local09, local03
02714     03 2E 66 F0 | 	shl	local09, #3
02718     54 00 00 FF 
0271c     70 E5 05 F1 | 	add	objptr, ##43376
02720     F2 2E 02 F1 | 	add	local09, objptr
02724     04 2E 06 F1 | 	add	local09, #4
02728     17 33 02 FB | 	rdlong	local11, local09
0272c     01 32 56 F2 | 	cmps	local11, #1 wc
02730     54 00 00 FF 
02734     70 E5 85 F1 | 	sub	objptr, ##43376
02738     34 03 90 3D |  if_ae	jmp	#LR__0127
0273c     11 27 02 F6 | 	mov	local05, local03
02740     03 26 66 F0 | 	shl	local05, #3
02744     54 00 00 FF 
02748     70 E5 05 F1 | 	add	objptr, ##43376
0274c     F2 26 02 F1 | 	add	local05, objptr
02750     13 13 02 FB | 	rdlong	arg01, local05
02754     54 00 00 FF 
02758     70 E5 85 F1 | 	sub	objptr, ##43376
0275c     44 20 B0 FD | 	call	#_isnum
02760     FD 1E 02 F6 | 	mov	local01, result1
02764     7B 00 00 FF 
02768     60 E4 05 F1 | 	add	objptr, ##63072
0276c     F2 1E 62 FC | 	wrlong	local01, objptr
02770     11 27 02 F6 | 	mov	local05, local03
02774     03 26 66 F0 | 	shl	local05, #3
02778     26 00 00 FF 
0277c     F0 E4 85 F1 | 	sub	objptr, ##19696
02780     F2 26 02 F1 | 	add	local05, objptr
02784     13 13 02 FB | 	rdlong	arg01, local05
02788     54 00 00 FF 
0278c     70 E5 85 F1 | 	sub	objptr, ##43376
02790     E8 22 B0 FD | 	call	#_isint
02794     FD 1E 02 F6 | 	mov	local01, result1
02798     7B 00 00 FF 
0279c     64 E4 05 F1 | 	add	objptr, ##63076
027a0     F2 1E 62 FC | 	wrlong	local01, objptr
027a4     11 27 02 F6 | 	mov	local05, local03
027a8     03 26 66 F0 | 	shl	local05, #3
027ac     26 00 00 FF 
027b0     F4 E4 85 F1 | 	sub	objptr, ##19700
027b4     F2 28 02 F6 | 	mov	local06, objptr
027b8     F2 26 02 F1 | 	add	local05, objptr
027bc     13 13 02 FB | 	rdlong	arg01, local05
027c0     54 00 00 FF 
027c4     70 E5 85 F1 | 	sub	objptr, ##43376
027c8     08 24 B0 FD | 	call	#_isdec
027cc     7B 00 00 FF 
027d0     68 E4 05 F1 | 	add	objptr, ##63080
027d4     F2 FA 61 FC | 	wrlong	result1, objptr
027d8                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal : goto 102 					' pure decimal for line num
027d8     08 E4 85 F1 | 	sub	objptr, #8
027dc     F2 1E 0A FB | 	rdlong	local01, objptr wz
027e0     7B 00 00 FF 
027e4     60 E4 85 F1 | 	sub	objptr, ##63072
027e8     60 00 90 AD |  if_e	jmp	#LR__0120
027ec     7B 00 00 FF 
027f0     64 E4 05 F1 | 	add	objptr, ##63076
027f4     F2 2E 0A FB | 	rdlong	local09, objptr wz
027f8     7B 00 00 FF 
027fc     64 E4 85 F1 | 	sub	objptr, ##63076
02800     48 00 90 AD |  if_e	jmp	#LR__0120
02804     7B 00 00 FF 
02808     68 E4 05 F1 | 	add	objptr, ##63080
0280c     F2 32 0A FB | 	rdlong	local11, objptr wz
02810     7B 00 00 FF 
02814     68 E4 85 F1 | 	sub	objptr, ##63080
02818     30 00 90 AD |  if_e	jmp	#LR__0120
0281c     11 25 02 F6 | 	mov	local04, local03
02820     12 2F 02 F6 | 	mov	local09, local04
02824     03 2E 66 F0 | 	shl	local09, #3
02828     54 00 00 FF 
0282c     70 E5 05 F1 | 	add	objptr, ##43376
02830     F2 2E 02 F1 | 	add	local09, objptr
02834     04 2E 06 F1 | 	add	local09, #4
02838     01 00 80 FF 
0283c     17 01 68 FC | 	wrlong	##512, local09
02840     54 00 00 FF 
02844     70 E5 85 F1 | 	sub	objptr, ##43376
02848     24 02 90 FD | 	jmp	#LR__0127
0284c                 | LR__0120
0284c                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer : goto 102 				' integer
0284c     7B 00 00 FF 
02850     60 E4 05 F1 | 	add	objptr, ##63072
02854     F2 1E 0A FB | 	rdlong	local01, objptr wz
02858     7B 00 00 FF 
0285c     60 E4 85 F1 | 	sub	objptr, ##63072
02860     64 00 90 AD |  if_e	jmp	#LR__0121
02864     7B 00 00 FF 
02868     64 E4 05 F1 | 	add	objptr, ##63076
0286c     F2 2E 0A FB | 	rdlong	local09, objptr wz
02870     7B 00 00 FF 
02874     64 E4 85 F1 | 	sub	objptr, ##63076
02878     7B 00 00 5F 
0287c     68 E4 05 51 |  if_ne	add	objptr, ##63080
02880     F2 32 02 5B |  if_ne	rdlong	local11, objptr
02884     7B 00 00 5F 
02888     68 E4 85 51 |  if_ne	sub	objptr, ##63080
0288c     19 29 22 56 |  if_ne	not	local06, local11
02890     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
02894     30 00 90 AD |  if_e	jmp	#LR__0121
02898     11 25 02 F6 | 	mov	local04, local03
0289c     12 2F 02 F6 | 	mov	local09, local04
028a0     03 2E 66 F0 | 	shl	local09, #3
028a4     54 00 00 FF 
028a8     70 E5 05 F1 | 	add	objptr, ##43376
028ac     F2 2E 02 F1 | 	add	local09, objptr
028b0     04 2E 06 F1 | 	add	local09, #4
028b4     01 00 80 FF 
028b8     17 03 68 FC | 	wrlong	##513, local09
028bc     54 00 00 FF 
028c0     70 E5 85 F1 | 	sub	objptr, ##43376
028c4     A8 01 90 FD | 	jmp	#LR__0127
028c8                 | LR__0121
028c8                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float :goto 102 				' float
028c8     7B 00 00 FF 
028cc     60 E4 05 F1 | 	add	objptr, ##63072
028d0     F2 1E 0A FB | 	rdlong	local01, objptr wz
028d4     7B 00 00 FF 
028d8     60 E4 85 F1 | 	sub	objptr, ##63072
028dc     7B 00 00 5F 
028e0     64 E4 05 51 |  if_ne	add	objptr, ##63076
028e4     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
028e8     7B 00 00 5F 
028ec     64 E4 85 51 |  if_ne	sub	objptr, ##63076
028f0     17 2F 22 56 |  if_ne	not	local09, local09
028f4     00 2E 0E 52 |  if_ne	cmp	local09, #0 wz
028f8     7B 00 00 5F 
028fc     68 E4 05 51 |  if_ne	add	objptr, ##63080
02900     F2 32 02 5B |  if_ne	rdlong	local11, objptr
02904     7B 00 00 5F 
02908     68 E4 85 51 |  if_ne	sub	objptr, ##63080
0290c     19 29 22 56 |  if_ne	not	local06, local11
02910     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
02914     30 00 90 AD |  if_e	jmp	#LR__0122
02918     11 25 02 F6 | 	mov	local04, local03
0291c     12 2F 02 F6 | 	mov	local09, local04
02920     03 2E 66 F0 | 	shl	local09, #3
02924     54 00 00 FF 
02928     70 E5 05 F1 | 	add	objptr, ##43376
0292c     F2 2E 02 F1 | 	add	local09, objptr
02930     04 2E 06 F1 | 	add	local09, #4
02934     01 00 80 FF 
02938     17 05 68 FC | 	wrlong	##514, local09
0293c     54 00 00 FF 
02940     70 E5 85 F1 | 	sub	objptr, ##43376
02944     28 01 90 FD | 	jmp	#LR__0127
02948                 | LR__0122
02948                 | ' 
02948                 | ' if isstring(lparts(i).part$) then 
02948     11 27 02 F6 | 	mov	local05, local03
0294c     03 26 66 F0 | 	shl	local05, #3
02950     54 00 00 FF 
02954     70 E5 05 F1 | 	add	objptr, ##43376
02958     F2 26 02 F1 | 	add	local05, objptr
0295c     13 13 02 FB | 	rdlong	arg01, local05
02960     54 00 00 FF 
02964     70 E5 85 F1 | 	sub	objptr, ##43376
02968     28 23 B0 FD | 	call	#_isstring
0296c     00 FA 0D F2 | 	cmp	result1, #0 wz
02970     A0 00 90 AD |  if_e	jmp	#LR__0125
02974     11 2F 02 F6 | 	mov	local09, local03
02978     03 2E 66 F0 | 	shl	local09, #3
0297c     54 00 00 FF 
02980     70 E5 05 F1 | 	add	objptr, ##43376
02984     F2 2E 02 F1 | 	add	local09, objptr
02988     04 2E 06 F1 | 	add	local09, #4
0298c     01 00 80 FF 
02990     17 07 68 FC | 	wrlong	##515, local09
02994     11 25 02 F6 | 	mov	local04, local03
02998     12 2F 02 F6 | 	mov	local09, local04
0299c     03 2E 66 F0 | 	shl	local09, #3
029a0     F2 2E 02 F1 | 	add	local09, objptr
029a4     11 37 02 F6 | 	mov	local13, local03
029a8     03 36 66 F0 | 	shl	local13, #3
029ac     F2 36 02 F1 | 	add	local13, objptr
029b0     1B 29 02 FB | 	rdlong	local06, local13
029b4     02 32 06 F6 | 	mov	local11, #2
029b8     11 4B 02 F6 | 	mov	local23, local03
029bc     25 43 02 F6 | 	mov	local19, local23
029c0     21 45 02 F6 | 	mov	local20, local19
029c4     03 44 66 F0 | 	shl	local20, #3
029c8     F2 46 02 F6 | 	mov	local21, objptr
029cc     F2 44 02 F1 | 	add	local20, objptr
029d0     22 13 02 FB | 	rdlong	arg01, local20
029d4     54 00 00 FF 
029d8     70 E5 85 F1 | 	sub	objptr, ##43376
029dc     09 2B 02 F6 | 	mov	local07, arg01
029e0     97 06 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
029e4                 | LR__0123
029e4     15 FB C9 FA | 	rdbyte	result1, local07 wz
029e8     01 2A 06 51 |  if_ne	add	local07, #1
029ec     F4 FF 9F 5D |  if_ne	jmp	#LR__0123
029f0                 | LR__0124
029f0     09 2B 82 F1 | 	sub	local07, arg01
029f4     15 35 02 F6 | 	mov	local12, local07
029f8     1A 17 02 F6 | 	mov	arg03, local12
029fc     02 16 86 F1 | 	sub	arg03, #2
02a00     14 13 02 F6 | 	mov	arg01, local06
02a04     19 15 02 F6 | 	mov	arg02, local11
02a08     BC A3 B1 FD | 	call	#__system__Mid_S
02a0c     17 FB 61 FC | 	wrlong	result1, local09
02a10     5C 00 90 FD | 	jmp	#LR__0127
02a14                 | LR__0125
02a14                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
02a14     11 25 02 F6 | 	mov	local04, local03
02a18     12 27 02 F6 | 	mov	local05, local04
02a1c     03 26 66 F0 | 	shl	local05, #3
02a20     54 00 00 FF 
02a24     70 E5 05 F1 | 	add	objptr, ##43376
02a28     F2 26 02 F1 | 	add	local05, objptr
02a2c     13 13 02 FB | 	rdlong	arg01, local05
02a30     54 00 00 FF 
02a34     70 E5 85 F1 | 	sub	objptr, ##43376
02a38     F4 1A B0 FD | 	call	#_isname
02a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
02a40     2C 00 90 AD |  if_e	jmp	#LR__0126
02a44     11 25 02 F6 | 	mov	local04, local03
02a48     12 2F 02 F6 | 	mov	local09, local04
02a4c     03 2E 66 F0 | 	shl	local09, #3
02a50     54 00 00 FF 
02a54     70 E5 05 F1 | 	add	objptr, ##43376
02a58     F2 2E 02 F1 | 	add	local09, objptr
02a5c     04 2E 06 F1 | 	add	local09, #4
02a60     01 00 80 FF 
02a64     17 09 68 FC | 	wrlong	##516, local09
02a68     54 00 00 FF 
02a6c     70 E5 85 F1 | 	sub	objptr, ##43376
02a70                 | LR__0126
02a70                 | LR__0127
02a70     01 22 06 F1 | 	add	local03, #1
02a74     84 FA 9F FD | 	jmp	#LR__0119
02a78                 | LR__0128
02a78     1D 2F 02 F6 | 	mov	local09, local15
02a7c     03 2E 66 F0 | 	shl	local09, #3
02a80     54 00 00 FF 
02a84     70 E5 05 F1 | 	add	objptr, ##43376
02a88     F2 2E 02 F1 | 	add	local09, objptr
02a8c     04 2E 06 F1 | 	add	local09, #4
02a90     17 FD 6B FC | 	wrlong	#510, local09
02a94     1D 2F 02 F6 | 	mov	local09, local15
02a98     03 2E 66 F0 | 	shl	local09, #3
02a9c     F2 26 02 F6 | 	mov	local05, objptr
02aa0     F2 2E 02 F1 | 	add	local09, objptr
02aa4     51 01 00 FF 
02aa8     CD 28 06 F6 | 	mov	local06, ##@LR__4452
02aac     17 29 62 FC | 	wrlong	local06, local09
02ab0     10 00 00 FF 
02ab4     54 E4 05 F1 | 	add	objptr, ##8276
02ab8     F2 3A 62 FC | 	wrlong	local15, objptr
02abc                 | ' 
02abc                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
02abc                 | ' 
02abc                 | '  '                                      					 	for i=0 to k: print lparts(i).token,lparts(i).part$ : next i
02abc                 | '  
02abc                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="lo." orelse lp$="s." orelse lp$="br.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
02abc     16 00 00 FF 
02ac0     94 E4 05 F1 | 	add	objptr, ##11412
02ac4     F2 12 02 FB | 	rdlong	arg01, objptr
02ac8     7B 00 00 FF 
02acc     58 E4 85 F1 | 	sub	objptr, ##63064
02ad0     51 01 00 FF 
02ad4     CE 2E 06 F6 | 	mov	local09, ##@LR__4453
02ad8     17 15 02 F6 | 	mov	arg02, local09
02adc     B0 81 B1 FD | 	call	#__system___string_cmp
02ae0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ae4     EC 00 90 AD |  if_e	jmp	#LR__0129
02ae8     7B 00 00 FF 
02aec     58 E4 05 F1 | 	add	objptr, ##63064
02af0     F2 12 02 FB | 	rdlong	arg01, objptr
02af4     7B 00 00 FF 
02af8     58 E4 85 F1 | 	sub	objptr, ##63064
02afc     51 01 00 FF 
02b00     D3 26 06 F6 | 	mov	local05, ##@LR__4454
02b04     13 2F 02 F6 | 	mov	local09, local05
02b08     17 15 02 F6 | 	mov	arg02, local09
02b0c     80 81 B1 FD | 	call	#__system___string_cmp
02b10     00 FA 0D F2 | 	cmp	result1, #0 wz
02b14     BC 00 90 AD |  if_e	jmp	#LR__0129
02b18     7B 00 00 FF 
02b1c     58 E4 05 F1 | 	add	objptr, ##63064
02b20     F2 12 02 FB | 	rdlong	arg01, objptr
02b24     7B 00 00 FF 
02b28     58 E4 85 F1 | 	sub	objptr, ##63064
02b2c     51 01 00 FF 
02b30     D8 28 06 F6 | 	mov	local06, ##@LR__4455
02b34     14 27 02 F6 | 	mov	local05, local06
02b38     13 15 02 F6 | 	mov	arg02, local05
02b3c     50 81 B1 FD | 	call	#__system___string_cmp
02b40     FD 2E 0A F6 | 	mov	local09, result1 wz
02b44     8C 00 90 AD |  if_e	jmp	#LR__0129
02b48     7B 00 00 FF 
02b4c     58 E4 05 F1 | 	add	objptr, ##63064
02b50     F2 12 02 FB | 	rdlong	arg01, objptr
02b54     7B 00 00 FF 
02b58     58 E4 85 F1 | 	sub	objptr, ##63064
02b5c     51 01 00 FF 
02b60     DD 32 06 F6 | 	mov	local11, ##@LR__4456
02b64     19 29 02 F6 | 	mov	local06, local11
02b68     14 15 02 F6 | 	mov	arg02, local06
02b6c     20 81 B1 FD | 	call	#__system___string_cmp
02b70     FD 26 0A F6 | 	mov	local05, result1 wz
02b74     5C 00 90 AD |  if_e	jmp	#LR__0129
02b78     7B 00 00 FF 
02b7c     58 E4 05 F1 | 	add	objptr, ##63064
02b80     F2 12 02 FB | 	rdlong	arg01, objptr
02b84     7B 00 00 FF 
02b88     58 E4 85 F1 | 	sub	objptr, ##63064
02b8c     51 01 00 FF 
02b90     E1 32 06 F6 | 	mov	local11, ##@LR__4457
02b94     19 15 02 F6 | 	mov	arg02, local11
02b98     F4 80 B1 FD | 	call	#__system___string_cmp
02b9c     FD 28 0A F6 | 	mov	local06, result1 wz
02ba0     30 00 90 AD |  if_e	jmp	#LR__0129
02ba4     7B 00 00 FF 
02ba8     58 E4 05 F1 | 	add	objptr, ##63064
02bac     F2 12 02 FB | 	rdlong	arg01, objptr
02bb0     7B 00 00 FF 
02bb4     58 E4 85 F1 | 	sub	objptr, ##63064
02bb8     51 01 00 FF 
02bbc     E4 36 06 F6 | 	mov	local13, ##@LR__4458
02bc0     1B 31 02 F6 | 	mov	local10, local13
02bc4     18 15 02 F6 | 	mov	arg02, local10
02bc8     C4 80 B1 FD | 	call	#__system___string_cmp
02bcc     FD 32 0A F6 | 	mov	local11, result1 wz
02bd0     9C 00 90 5D |  if_ne	jmp	#LR__0130
02bd4                 | LR__0129
02bd4     7B 00 00 FF 
02bd8     54 E4 05 F1 | 	add	objptr, ##63060
02bdc     F2 36 02 FB | 	rdlong	local13, objptr
02be0     1B 31 02 F6 | 	mov	local10, local13
02be4     01 30 06 F1 | 	add	local10, #1
02be8     18 35 02 F6 | 	mov	local12, local10
02bec     1A 4B 02 F6 | 	mov	local23, local12
02bf0     03 4A 66 F0 | 	shl	local23, #3
02bf4     26 00 00 FF 
02bf8     E4 E4 85 F1 | 	sub	objptr, ##19684
02bfc     F2 42 02 F6 | 	mov	local19, objptr
02c00     F2 4A 02 F1 | 	add	local23, objptr
02c04     04 4A 06 F1 | 	add	local23, #4
02c08     25 47 02 FB | 	rdlong	local21, local23
02c0c     04 4A 86 F1 | 	sub	local23, #4
02c10     23 45 02 F6 | 	mov	local20, local21
02c14     01 00 00 FF 
02c18     04 44 0E F2 | 	cmp	local20, ##516 wz
02c1c     54 00 00 FF 
02c20     70 E5 85 F1 | 	sub	objptr, ##43376
02c24     48 00 90 5D |  if_ne	jmp	#LR__0130
02c28     7B 00 00 FF 
02c2c     54 E4 05 F1 | 	add	objptr, ##63060
02c30     F2 2E 02 FB | 	rdlong	local09, objptr
02c34     01 2E 06 F1 | 	add	local09, #1
02c38     17 27 02 F6 | 	mov	local05, local09
02c3c     03 26 66 F0 | 	shl	local05, #3
02c40     26 00 00 FF 
02c44     E4 E4 85 F1 | 	sub	objptr, ##19684
02c48     F2 28 02 F6 | 	mov	local06, objptr
02c4c     F2 26 02 F1 | 	add	local05, objptr
02c50     01 00 00 FF 
02c54     03 32 06 F6 | 	mov	local11, ##515
02c58     04 26 06 F1 | 	add	local05, #4
02c5c     01 00 80 FF 
02c60     13 07 68 FC | 	wrlong	##515, local05
02c64     04 26 86 F1 | 	sub	local05, #4
02c68     54 00 00 FF 
02c6c     70 E5 85 F1 | 	sub	objptr, ##43376
02c70                 | LR__0130
02c70                 | ' 
02c70                 | ' ' abbreviated command has to be at the position addptr
02c70                 | ' 
02c70                 | ' 
02c70                 | ' 
02c70                 | ' '2b determine a type of the line
02c70                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
02c70     54 00 00 FF 
02c74     70 E5 05 F1 | 	add	objptr, ##43376
02c78     F2 12 02 FB | 	rdlong	arg01, objptr
02c7c     54 00 00 FF 
02c80     70 E5 85 F1 | 	sub	objptr, ##43376
02c84     4C 1F B0 FD | 	call	#_isdec
02c88     00 FA 0D F2 | 	cmp	result1, #0 wz
02c8c     30 00 90 AD |  if_e	jmp	#LR__0131
02c90     54 00 00 FF 
02c94     70 E5 05 F1 | 	add	objptr, ##43376
02c98     F2 12 02 FB | 	rdlong	arg01, objptr
02c9c     54 00 00 FF 
02ca0     70 E5 85 F1 | 	sub	objptr, ##43376
02ca4     00 14 06 F6 | 	mov	arg02, #0
02ca8     58 B1 B1 FD | 	call	#__system____builtin_atoi
02cac     7A 00 00 FF 
02cb0     F4 E5 05 F1 | 	add	objptr, ##62964
02cb4     F2 FA 61 FC | 	wrlong	result1, objptr
02cb8     7A 00 00 FF 
02cbc     F4 E5 85 F1 | 	sub	objptr, ##62964
02cc0                 | LR__0131
02cc0                 | ' 
02cc0                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104
02cc0     7A 00 00 FF 
02cc4     F4 E5 05 F1 | 	add	objptr, ##62964
02cc8     F2 1E 02 FB | 	rdlong	local01, objptr
02ccc     7A 00 00 FF 
02cd0     F4 E5 85 F1 | 	sub	objptr, ##62964
02cd4     01 1E 16 F2 | 	cmp	local01, #1 wc
02cd8     3C 00 90 CD |  if_b	jmp	#LR__0132
02cdc     01 3A 0E F2 | 	cmp	local15, #1 wz
02ce0     56 00 00 AF 
02ce4     88 E5 05 A1 |  if_e	add	objptr, ##44424
02ce8     F2 26 02 AB |  if_e	rdlong	local05, objptr
02cec     56 00 00 AF 
02cf0     88 E5 85 A1 |  if_e	sub	objptr, ##44424
02cf4     03 26 0E A2 |  if_e	cmp	local05, #3 wz
02cf8     1C 00 90 5D |  if_ne	jmp	#LR__0132
02cfc     7A 00 00 FF 
02d00     F4 E5 05 F1 | 	add	objptr, ##62964
02d04     F2 12 02 FB | 	rdlong	arg01, objptr
02d08     7A 00 00 FF 
02d0c     F4 E5 85 F1 | 	sub	objptr, ##62964
02d10     E4 1F B0 FD | 	call	#_deleteline
02d14     4C 05 90 FD | 	jmp	#LR__0149
02d18                 | LR__0132
02d18                 | ' 
02d18                 | ' if linenum>0  andalso (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  
02d18     7A 00 00 FF 
02d1c     F4 E5 05 F1 | 	add	objptr, ##62964
02d20     F2 1E 02 FB | 	rdlong	local01, objptr
02d24     7A 00 00 FF 
02d28     F4 E5 85 F1 | 	sub	objptr, ##62964
02d2c     01 1E 16 F2 | 	cmp	local01, #1 wc
02d30     EC 00 90 CD |  if_b	jmp	#LR__0135
02d34     56 00 00 FF 
02d38     88 E5 05 F1 | 	add	objptr, ##44424
02d3c     F2 26 02 FB | 	rdlong	local05, objptr
02d40     56 00 00 FF 
02d44     88 E5 85 F1 | 	sub	objptr, ##44424
02d48     13 2F 0A F6 | 	mov	local09, local05 wz
02d4c     20 00 90 AD |  if_e	jmp	#LR__0133
02d50     56 00 00 FF 
02d54     88 E5 05 F1 | 	add	objptr, ##44424
02d58     F2 32 02 FB | 	rdlong	local11, objptr
02d5c     56 00 00 FF 
02d60     88 E5 85 F1 | 	sub	objptr, ##44424
02d64     19 29 02 F6 | 	mov	local06, local11
02d68     03 28 0E F2 | 	cmp	local06, #3 wz
02d6c     B0 00 90 5D |  if_ne	jmp	#LR__0135
02d70                 | LR__0133
02d70     54 00 00 FF 
02d74     84 E5 05 F1 | 	add	objptr, ##43396
02d78     F2 36 02 FB | 	rdlong	local13, objptr
02d7c     54 00 00 FF 
02d80     84 E5 85 F1 | 	sub	objptr, ##43396
02d84     1B 31 02 F6 | 	mov	local10, local13
02d88     1B 30 0E F2 | 	cmp	local10, #27 wz
02d8c     90 00 90 AD |  if_e	jmp	#LR__0135
02d90     7A 00 00 FF 
02d94     F4 E5 05 F1 | 	add	objptr, ##62964
02d98     F2 12 02 FB | 	rdlong	arg01, objptr
02d9c     24 00 00 FF 
02da0     6C E4 85 F1 | 	sub	objptr, ##18540
02da4     F2 16 02 FB | 	rdlong	arg03, objptr
02da8     56 00 00 FF 
02dac     88 E5 85 F1 | 	sub	objptr, ##44424
02db0     00 14 06 F6 | 	mov	arg02, #0
02db4     3C 33 B0 FD | 	call	#_compile
02db8     FD 20 0A F6 | 	mov	local02, result1 wz
02dbc                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02dbc                 | '   if err<>0 then printerror(err): goto 104
02dbc     0C 00 90 AD |  if_e	jmp	#LR__0134
02dc0     10 13 02 F6 | 	mov	arg01, local02
02dc4     90 48 B1 FD | 	call	#_printerror
02dc8     98 04 90 FD | 	jmp	#LR__0149
02dcc                 | LR__0134
02dcc                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
02dcc     7B 00 00 FF 
02dd0     30 E4 05 F1 | 	add	objptr, ##63024
02dd4     F2 12 02 FB | 	rdlong	arg01, objptr
02dd8     7B 00 00 FF 
02ddc     30 E4 85 F1 | 	sub	objptr, ##63024
02de0     51 01 00 FF 
02de4     E8 14 06 F6 | 	mov	arg02, ##@LR__4459
02de8     A4 7E B1 FD | 	call	#__system___string_cmp
02dec     00 FA 0D F2 | 	cmp	result1, #0 wz
02df0     70 04 90 AD |  if_e	jmp	#LR__0149
02df4     7B 00 00 FF 
02df8     30 E4 05 F1 | 	add	objptr, ##63024
02dfc     F2 1E 02 FB | 	rdlong	local01, objptr
02e00     24 00 00 FF 
02e04     B0 E4 85 F1 | 	sub	objptr, ##18608
02e08     F2 1E 62 FC | 	wrlong	local01, objptr
02e0c     08 E4 05 F1 | 	add	objptr, #8
02e10     F2 08 68 FC | 	wrlong	#4, objptr
02e14     56 00 00 FF 
02e18     88 E5 85 F1 | 	sub	objptr, ##44424
02e1c     50 DC 9F FD | 	jmp	#LR__0020
02e20                 | LR__0135
02e20                 | '       							
02e20                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 
02e20     7A 00 00 FF 
02e24     F4 E5 05 F1 | 	add	objptr, ##62964
02e28     F2 1E 02 FB | 	rdlong	local01, objptr
02e2c     7A 00 00 FF 
02e30     F4 E5 85 F1 | 	sub	objptr, ##62964
02e34     01 1E 16 F2 | 	cmp	local01, #1 wc
02e38     EC 00 90 CD |  if_b	jmp	#LR__0138
02e3c     56 00 00 FF 
02e40     88 E5 05 F1 | 	add	objptr, ##44424
02e44     F2 26 02 FB | 	rdlong	local05, objptr
02e48     56 00 00 FF 
02e4c     88 E5 85 F1 | 	sub	objptr, ##44424
02e50     01 26 0E F2 | 	cmp	local05, #1 wz
02e54     20 00 90 AD |  if_e	jmp	#LR__0136
02e58     56 00 00 FF 
02e5c     88 E5 05 F1 | 	add	objptr, ##44424
02e60     F2 32 02 FB | 	rdlong	local11, objptr
02e64     56 00 00 FF 
02e68     88 E5 85 F1 | 	sub	objptr, ##44424
02e6c     19 29 02 F6 | 	mov	local06, local11
02e70     02 28 0E F2 | 	cmp	local06, #2 wz
02e74     B0 00 90 5D |  if_ne	jmp	#LR__0138
02e78                 | LR__0136
02e78     54 00 00 FF 
02e7c     7C E5 05 F1 | 	add	objptr, ##43388
02e80     F2 36 02 FB | 	rdlong	local13, objptr
02e84     54 00 00 FF 
02e88     7C E5 85 F1 | 	sub	objptr, ##43388
02e8c     1B 31 02 F6 | 	mov	local10, local13
02e90     1B 30 0E F2 | 	cmp	local10, #27 wz
02e94     90 00 90 AD |  if_e	jmp	#LR__0138
02e98     7A 00 00 FF 
02e9c     F4 E5 05 F1 | 	add	objptr, ##62964
02ea0     F2 12 02 FB | 	rdlong	arg01, objptr
02ea4     24 00 00 FF 
02ea8     6C E4 85 F1 | 	sub	objptr, ##18540
02eac     F2 16 02 FB | 	rdlong	arg03, objptr
02eb0     56 00 00 FF 
02eb4     88 E5 85 F1 | 	sub	objptr, ##44424
02eb8     00 14 06 F6 | 	mov	arg02, #0
02ebc     34 32 B0 FD | 	call	#_compile
02ec0     FD 20 0A F6 | 	mov	local02, result1 wz
02ec4                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02ec4                 | '   if err<>0 then printerror(err): goto 104
02ec4     0C 00 90 AD |  if_e	jmp	#LR__0137
02ec8     10 13 02 F6 | 	mov	arg01, local02
02ecc     88 47 B1 FD | 	call	#_printerror
02ed0     90 03 90 FD | 	jmp	#LR__0149
02ed4                 | LR__0137
02ed4                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
02ed4     7B 00 00 FF 
02ed8     30 E4 05 F1 | 	add	objptr, ##63024
02edc     F2 12 02 FB | 	rdlong	arg01, objptr
02ee0     7B 00 00 FF 
02ee4     30 E4 85 F1 | 	sub	objptr, ##63024
02ee8     51 01 00 FF 
02eec     E9 14 06 F6 | 	mov	arg02, ##@LR__4460
02ef0     9C 7D B1 FD | 	call	#__system___string_cmp
02ef4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ef8     68 03 90 AD |  if_e	jmp	#LR__0149
02efc     7B 00 00 FF 
02f00     30 E4 05 F1 | 	add	objptr, ##63024
02f04     F2 1E 02 FB | 	rdlong	local01, objptr
02f08     24 00 00 FF 
02f0c     B0 E4 85 F1 | 	sub	objptr, ##18608
02f10     F2 1E 62 FC | 	wrlong	local01, objptr
02f14     08 E4 05 F1 | 	add	objptr, #8
02f18     F2 08 68 FC | 	wrlong	#4, objptr
02f1c     56 00 00 FF 
02f20     88 E5 85 F1 | 	sub	objptr, ##44424
02f24     48 DB 9F FD | 	jmp	#LR__0020
02f28                 | LR__0138
02f28                 | ' 							 
02f28                 | ' if linenum>0 andalso (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  
02f28     7A 00 00 FF 
02f2c     F4 E5 05 F1 | 	add	objptr, ##62964
02f30     F2 1E 02 FB | 	rdlong	local01, objptr
02f34     7A 00 00 FF 
02f38     F4 E5 85 F1 | 	sub	objptr, ##62964
02f3c     01 1E 16 F2 | 	cmp	local01, #1 wc
02f40     D4 00 90 CD |  if_b	jmp	#LR__0140
02f44     56 00 00 FF 
02f48     88 E5 05 F1 | 	add	objptr, ##44424
02f4c     F2 26 0A FB | 	rdlong	local05, objptr wz
02f50     56 00 00 FF 
02f54     88 E5 85 F1 | 	sub	objptr, ##44424
02f58     20 00 90 AD |  if_e	jmp	#LR__0139
02f5c     56 00 00 FF 
02f60     88 E5 05 F1 | 	add	objptr, ##44424
02f64     F2 32 02 FB | 	rdlong	local11, objptr
02f68     56 00 00 FF 
02f6c     88 E5 85 F1 | 	sub	objptr, ##44424
02f70     19 29 02 F6 | 	mov	local06, local11
02f74     03 28 0E F2 | 	cmp	local06, #3 wz
02f78     9C 00 90 5D |  if_ne	jmp	#LR__0140
02f7c                 | LR__0139
02f7c     54 00 00 FF 
02f80     84 E5 05 F1 | 	add	objptr, ##43396
02f84     F2 36 02 FB | 	rdlong	local13, objptr
02f88     54 00 00 FF 
02f8c     84 E5 85 F1 | 	sub	objptr, ##43396
02f90     1B 31 02 F6 | 	mov	local10, local13
02f94     1B 30 0E F2 | 	cmp	local10, #27 wz
02f98     7C 00 90 5D |  if_ne	jmp	#LR__0140
02f9c     7A 00 00 FF 
02fa0     F4 E5 05 F1 | 	add	objptr, ##62964
02fa4     F2 12 02 FB | 	rdlong	arg01, objptr
02fa8     24 00 00 FF 
02fac     6C E4 85 F1 | 	sub	objptr, ##18540
02fb0     F2 16 02 FB | 	rdlong	arg03, objptr
02fb4     56 00 00 FF 
02fb8     88 E5 85 F1 | 	sub	objptr, ##44424
02fbc     00 14 06 F6 | 	mov	arg02, #0
02fc0     00 32 B0 FD | 	call	#_compile_assign
02fc4                 | '   compile_assign(linenum,0,cont)': print "called compile_assign with cont=";cont, "line$=";line$
02fc4                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
02fc4     7B 00 00 FF 
02fc8     30 E4 05 F1 | 	add	objptr, ##63024
02fcc     F2 12 02 FB | 	rdlong	arg01, objptr
02fd0     7B 00 00 FF 
02fd4     30 E4 85 F1 | 	sub	objptr, ##63024
02fd8     51 01 00 FF 
02fdc     EA 14 06 F6 | 	mov	arg02, ##@LR__4461
02fe0     AC 7C B1 FD | 	call	#__system___string_cmp
02fe4     00 FA 0D F2 | 	cmp	result1, #0 wz
02fe8     78 02 90 AD |  if_e	jmp	#LR__0149
02fec     7B 00 00 FF 
02ff0     30 E4 05 F1 | 	add	objptr, ##63024
02ff4     F2 1E 02 FB | 	rdlong	local01, objptr
02ff8     24 00 00 FF 
02ffc     B0 E4 85 F1 | 	sub	objptr, ##18608
03000     F2 1E 62 FC | 	wrlong	local01, objptr
03004     08 E4 05 F1 | 	add	objptr, #8
03008     F2 08 68 FC | 	wrlong	#4, objptr
0300c     56 00 00 FF 
03010     88 E5 85 F1 | 	sub	objptr, ##44424
03014     58 DA 9F FD | 	jmp	#LR__0020
03018                 | LR__0140
03018                 | '     							 
03018                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 
03018     7A 00 00 FF 
0301c     F4 E5 05 F1 | 	add	objptr, ##62964
03020     F2 1E 02 FB | 	rdlong	local01, objptr
03024     7A 00 00 FF 
03028     F4 E5 85 F1 | 	sub	objptr, ##62964
0302c     01 1E 16 F2 | 	cmp	local01, #1 wc
03030     CC 00 90 CD |  if_b	jmp	#LR__0141
03034     56 00 00 FF 
03038     88 E5 05 F1 | 	add	objptr, ##44424
0303c     F2 26 02 FB | 	rdlong	local05, objptr
03040     56 00 00 FF 
03044     88 E5 85 F1 | 	sub	objptr, ##44424
03048     01 26 0E F2 | 	cmp	local05, #1 wz
0304c     56 00 00 5F 
03050     88 E5 05 51 |  if_ne	add	objptr, ##44424
03054     F2 32 02 5B |  if_ne	rdlong	local11, objptr
03058     56 00 00 5F 
0305c     88 E5 85 51 |  if_ne	sub	objptr, ##44424
03060     02 32 0E 52 |  if_ne	cmp	local11, #2 wz
03064     54 00 00 AF 
03068     7C E5 05 A1 |  if_e	add	objptr, ##43388
0306c     F2 36 02 AB |  if_e	rdlong	local13, objptr
03070     54 00 00 AF 
03074     7C E5 85 A1 |  if_e	sub	objptr, ##43388
03078     1B 31 02 A6 |  if_e	mov	local10, local13
0307c     1B 30 0E A2 |  if_e	cmp	local10, #27 wz
03080     7C 00 90 5D |  if_ne	jmp	#LR__0141
03084     7A 00 00 FF 
03088     F4 E5 05 F1 | 	add	objptr, ##62964
0308c     F2 12 02 FB | 	rdlong	arg01, objptr
03090     24 00 00 FF 
03094     6C E4 85 F1 | 	sub	objptr, ##18540
03098     F2 16 02 FB | 	rdlong	arg03, objptr
0309c     56 00 00 FF 
030a0     88 E5 85 F1 | 	sub	objptr, ##44424
030a4     00 14 06 F6 | 	mov	arg02, #0
030a8     18 31 B0 FD | 	call	#_compile_assign
030ac                 | '   compile_assign(linenum,0,cont) ': print "called compile_assign with cont=";cont, "line$=";line$
030ac                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								'<-- TODO: add a line to a program
030ac     7B 00 00 FF 
030b0     30 E4 05 F1 | 	add	objptr, ##63024
030b4     F2 12 02 FB | 	rdlong	arg01, objptr
030b8     7B 00 00 FF 
030bc     30 E4 85 F1 | 	sub	objptr, ##63024
030c0     51 01 00 FF 
030c4     EB 14 06 F6 | 	mov	arg02, ##@LR__4462
030c8     C4 7B B1 FD | 	call	#__system___string_cmp
030cc     00 FA 0D F2 | 	cmp	result1, #0 wz
030d0     90 01 90 AD |  if_e	jmp	#LR__0149
030d4     7B 00 00 FF 
030d8     30 E4 05 F1 | 	add	objptr, ##63024
030dc     F2 1E 02 FB | 	rdlong	local01, objptr
030e0     24 00 00 FF 
030e4     B0 E4 85 F1 | 	sub	objptr, ##18608
030e8     F2 1E 62 FC | 	wrlong	local01, objptr
030ec     08 E4 05 F1 | 	add	objptr, #8
030f0     F2 08 68 FC | 	wrlong	#4, objptr
030f4     56 00 00 FF 
030f8     88 E5 85 F1 | 	sub	objptr, ##44424
030fc     70 D9 9F FD | 	jmp	#LR__0020
03100                 | LR__0141
03100                 | ' 
03100                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_eq then compile_assign(0) : goto 103    					' assign a variable
03100     54 00 00 FF 
03104     74 E5 05 F1 | 	add	objptr, ##43380
03108     F2 1E 02 FB | 	rdlong	local01, objptr
0310c     54 00 00 FF 
03110     74 E5 85 F1 | 	sub	objptr, ##43380
03114     01 00 00 FF 
03118     04 1E 0E F2 | 	cmp	local01, ##516 wz
0311c     54 00 00 AF 
03120     7C E5 05 A1 |  if_e	add	objptr, ##43388
03124     F2 2E 02 AB |  if_e	rdlong	local09, objptr
03128     54 00 00 AF 
0312c     7C E5 85 A1 |  if_e	sub	objptr, ##43388
03130     1B 2E 0E A2 |  if_e	cmp	local09, #27 wz
03134     14 00 90 5D |  if_ne	jmp	#LR__0142
03138     00 12 06 F6 | 	mov	arg01, #0
0313c     00 14 06 F6 | 	mov	arg02, #0
03140     00 16 06 F6 | 	mov	arg03, #0
03144     7C 30 B0 FD | 	call	#_compile_assign
03148     90 00 90 FD | 	jmp	#LR__0144
0314c                 | LR__0142
0314c                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_rpar then print " User functions and arrays not yet implemented" : goto 101
0314c     54 00 00 FF 
03150     74 E5 05 F1 | 	add	objptr, ##43380
03154     F2 1E 02 FB | 	rdlong	local01, objptr
03158     54 00 00 FF 
0315c     74 E5 85 F1 | 	sub	objptr, ##43380
03160     01 00 00 FF 
03164     04 1E 0E F2 | 	cmp	local01, ##516 wz
03168     54 00 00 AF 
0316c     7C E5 05 A1 |  if_e	add	objptr, ##43388
03170     F2 2E 02 AB |  if_e	rdlong	local09, objptr
03174     54 00 00 AF 
03178     7C E5 85 A1 |  if_e	sub	objptr, ##43388
0317c     14 2E 0E A2 |  if_e	cmp	local09, #20 wz
03180     44 00 90 5D |  if_ne	jmp	#LR__0143
03184     00 12 06 F6 | 	mov	arg01, #0
03188     10 D4 B1 FD | 	call	#__system___getiolock_0442
0318c     FD 12 02 F6 | 	mov	arg01, result1
03190     D4 7A B1 FD | 	call	#__system___lockmem
03194     51 01 00 FF 
03198     EC 14 06 F6 | 	mov	arg02, ##@LR__4463
0319c     00 12 06 F6 | 	mov	arg01, #0
031a0     00 16 06 F6 | 	mov	arg03, #0
031a4     C8 87 B1 FD | 	call	#__system___basic_print_string
031a8     00 12 06 F6 | 	mov	arg01, #0
031ac     0A 14 06 F6 | 	mov	arg02, #10
031b0     00 16 06 F6 | 	mov	arg03, #0
031b4     60 87 B1 FD | 	call	#__system___basic_print_char
031b8     00 12 06 F6 | 	mov	arg01, #0
031bc     DC D3 B1 FD | 	call	#__system___getiolock_0442
031c0     FD 00 68 FC | 	wrlong	#0, result1
031c4     7C 00 90 FD | 	jmp	#LR__0148
031c8                 | LR__0143
031c8     00 12 06 F6 | 	mov	arg01, #0
031cc     00 14 06 F6 | 	mov	arg02, #0
031d0     00 16 06 F6 | 	mov	arg03, #0
031d4     1C 2F B0 FD | 	call	#_compile
031d8     FD 20 02 F6 | 	mov	local02, result1
031dc                 | LR__0144
031dc                 | ' 
031dc                 | ' ' if we are here, this is not a program line to add, so try to execute this
031dc                 | ' 
031dc                 | ' err=compile(0) : '' execute(0) ' print "  this is a command to execute"  ''' param=line to compile
031dc                 | ' 103  'for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, : next i
031dc                 | ' if err=0 then execute_line() else printerror(err)
031dc     00 20 0E F2 | 	cmp	local02, #0 wz
031e0     0C 00 90 5D |  if_ne	jmp	#LR__0145
031e4     00 12 06 F6 | 	mov	arg01, #0
031e8     08 68 B0 FD | 	call	#_execute_line
031ec     08 00 90 FD | 	jmp	#LR__0146
031f0                 | LR__0145
031f0     10 13 02 F6 | 	mov	arg01, local02
031f4     60 44 B1 FD | 	call	#_printerror
031f8                 | LR__0146
031f8                 | ' if rest$<>"" then line$=rest$:  goto 108 
031f8     7B 00 00 FF 
031fc     30 E4 05 F1 | 	add	objptr, ##63024
03200     F2 12 02 FB | 	rdlong	arg01, objptr
03204     7B 00 00 FF 
03208     30 E4 85 F1 | 	sub	objptr, ##63024
0320c     51 01 00 FF 
03210     1B 15 06 F6 | 	mov	arg02, ##@LR__4464
03214     78 7A B1 FD | 	call	#__system___string_cmp
03218     00 FA 0D F2 | 	cmp	result1, #0 wz
0321c     24 00 90 AD |  if_e	jmp	#LR__0147
03220     7B 00 00 FF 
03224     30 E4 05 F1 | 	add	objptr, ##63024
03228     F2 1E 02 FB | 	rdlong	local01, objptr
0322c     24 00 00 FF 
03230     B0 E4 85 F1 | 	sub	objptr, ##18608
03234     F2 1E 62 FC | 	wrlong	local01, objptr
03238     56 00 00 FF 
0323c     80 E5 85 F1 | 	sub	objptr, ##44416
03240     2C D8 9F FD | 	jmp	#LR__0020
03244                 | LR__0147
03244                 | LR__0148
03244     51 01 00 FF 
03248     1C 13 06 F6 | 	mov	arg01, ##@LR__4465
0324c                 | ' 
0324c                 | ' write(text)
0324c     78 69 B1 FD | 	call	#_hg010b_spin2_write
03250                 | ' crlf
03250     D4 6A B1 FD | 	call	#_hg010b_spin2_crlf
03254     51 01 00 FF 
03258     1D 13 06 F6 | 	mov	arg01, ##@LR__4466
0325c                 | ' 
0325c                 | ' write(text)
0325c     68 69 B1 FD | 	call	#_hg010b_spin2_write
03260                 | ' crlf
03260     C4 6A B1 FD | 	call	#_hg010b_spin2_crlf
03264                 | LR__0149
03264     A7 F0 03 F6 | 	mov	ptra, fp
03268     B2 00 A0 FD | 	call	#popregs_
0326c                 | _interpret_ret
0326c     2D 00 64 FD | 	ret
03270                 | 
03270                 | ' 
03270                 | ' 
03270                 | ' '------------------------------ Helper functions for the tokenizer -------------------------------------------
03270                 | ' 
03270                 | ' function isoperator(s as string) as ubyte
03270                 | _isoperator
03270     01 4A 05 F6 | 	mov	COUNT_, #1
03274     A8 00 A0 FD | 	call	#pushregs_
03278                 | ' 
03278                 | ' select case s
03278     09 1F 02 F6 | 	mov	local01, arg01
0327c     51 01 00 FF 
03280     23 15 06 F6 | 	mov	arg02, ##@LR__4467
03284     0F 13 02 F6 | 	mov	arg01, local01
03288     04 7A B1 FD | 	call	#__system___string_cmp
0328c     00 FA 0D F2 | 	cmp	result1, #0 wz
03290     FC 01 90 AD |  if_e	jmp	#LR__0150
03294     51 01 00 FF 
03298     25 15 06 F6 | 	mov	arg02, ##@LR__4468
0329c     0F 13 02 F6 | 	mov	arg01, local01
032a0     EC 79 B1 FD | 	call	#__system___string_cmp
032a4     00 FA 0D F2 | 	cmp	result1, #0 wz
032a8     EC 01 90 AD |  if_e	jmp	#LR__0151
032ac     51 01 00 FF 
032b0     27 15 06 F6 | 	mov	arg02, ##@LR__4469
032b4     0F 13 02 F6 | 	mov	arg01, local01
032b8     D4 79 B1 FD | 	call	#__system___string_cmp
032bc     00 FA 0D F2 | 	cmp	result1, #0 wz
032c0     DC 01 90 AD |  if_e	jmp	#LR__0152
032c4     51 01 00 FF 
032c8     2A 15 06 F6 | 	mov	arg02, ##@LR__4470
032cc     0F 13 02 F6 | 	mov	arg01, local01
032d0     BC 79 B1 FD | 	call	#__system___string_cmp
032d4     00 FA 0D F2 | 	cmp	result1, #0 wz
032d8     CC 01 90 AD |  if_e	jmp	#LR__0153
032dc     51 01 00 FF 
032e0     2E 15 06 F6 | 	mov	arg02, ##@LR__4471
032e4     0F 13 02 F6 | 	mov	arg01, local01
032e8     A4 79 B1 FD | 	call	#__system___string_cmp
032ec     00 FA 0D F2 | 	cmp	result1, #0 wz
032f0     BC 01 90 AD |  if_e	jmp	#LR__0154
032f4     51 01 00 FF 
032f8     30 15 06 F6 | 	mov	arg02, ##@LR__4472
032fc     0F 13 02 F6 | 	mov	arg01, local01
03300     8C 79 B1 FD | 	call	#__system___string_cmp
03304     00 FA 0D F2 | 	cmp	result1, #0 wz
03308     AC 01 90 AD |  if_e	jmp	#LR__0155
0330c     51 01 00 FF 
03310     32 15 06 F6 | 	mov	arg02, ##@LR__4473
03314     0F 13 02 F6 | 	mov	arg01, local01
03318     74 79 B1 FD | 	call	#__system___string_cmp
0331c     00 FA 0D F2 | 	cmp	result1, #0 wz
03320     9C 01 90 AD |  if_e	jmp	#LR__0156
03324     51 01 00 FF 
03328     36 15 06 F6 | 	mov	arg02, ##@LR__4474
0332c     0F 13 02 F6 | 	mov	arg01, local01
03330     5C 79 B1 FD | 	call	#__system___string_cmp
03334     00 FA 0D F2 | 	cmp	result1, #0 wz
03338     8C 01 90 AD |  if_e	jmp	#LR__0157
0333c     51 01 00 FF 
03340     3A 15 06 F6 | 	mov	arg02, ##@LR__4475
03344     0F 13 02 F6 | 	mov	arg01, local01
03348     44 79 B1 FD | 	call	#__system___string_cmp
0334c     00 FA 0D F2 | 	cmp	result1, #0 wz
03350     7C 01 90 AD |  if_e	jmp	#LR__0158
03354     51 01 00 FF 
03358     3E 15 06 F6 | 	mov	arg02, ##@LR__4476
0335c     0F 13 02 F6 | 	mov	arg01, local01
03360     2C 79 B1 FD | 	call	#__system___string_cmp
03364     00 FA 0D F2 | 	cmp	result1, #0 wz
03368     6C 01 90 AD |  if_e	jmp	#LR__0159
0336c     51 01 00 FF 
03370     42 15 06 F6 | 	mov	arg02, ##@LR__4477
03374     0F 13 02 F6 | 	mov	arg01, local01
03378     14 79 B1 FD | 	call	#__system___string_cmp
0337c     00 FA 0D F2 | 	cmp	result1, #0 wz
03380     5C 01 90 AD |  if_e	jmp	#LR__0160
03384     51 01 00 FF 
03388     46 15 06 F6 | 	mov	arg02, ##@LR__4478
0338c     0F 13 02 F6 | 	mov	arg01, local01
03390     FC 78 B1 FD | 	call	#__system___string_cmp
03394     00 FA 0D F2 | 	cmp	result1, #0 wz
03398     4C 01 90 AD |  if_e	jmp	#LR__0161
0339c     51 01 00 FF 
033a0     48 15 06 F6 | 	mov	arg02, ##@LR__4479
033a4     0F 13 02 F6 | 	mov	arg01, local01
033a8     E4 78 B1 FD | 	call	#__system___string_cmp
033ac     00 FA 0D F2 | 	cmp	result1, #0 wz
033b0     3C 01 90 AD |  if_e	jmp	#LR__0162
033b4     51 01 00 FF 
033b8     4C 15 06 F6 | 	mov	arg02, ##@LR__4480
033bc     0F 13 02 F6 | 	mov	arg01, local01
033c0     CC 78 B1 FD | 	call	#__system___string_cmp
033c4     00 FA 0D F2 | 	cmp	result1, #0 wz
033c8     2C 01 90 AD |  if_e	jmp	#LR__0163
033cc     51 01 00 FF 
033d0     4E 15 06 F6 | 	mov	arg02, ##@LR__4481
033d4     0F 13 02 F6 | 	mov	arg01, local01
033d8     B4 78 B1 FD | 	call	#__system___string_cmp
033dc     00 FA 0D F2 | 	cmp	result1, #0 wz
033e0     1C 01 90 AD |  if_e	jmp	#LR__0164
033e4     51 01 00 FF 
033e8     50 15 06 F6 | 	mov	arg02, ##@LR__4482
033ec     0F 13 02 F6 | 	mov	arg01, local01
033f0     9C 78 B1 FD | 	call	#__system___string_cmp
033f4     00 FA 0D F2 | 	cmp	result1, #0 wz
033f8     0C 01 90 AD |  if_e	jmp	#LR__0165
033fc     51 01 00 FF 
03400     53 15 06 F6 | 	mov	arg02, ##@LR__4483
03404     0F 13 02 F6 | 	mov	arg01, local01
03408     84 78 B1 FD | 	call	#__system___string_cmp
0340c     00 FA 0D F2 | 	cmp	result1, #0 wz
03410     FC 00 90 AD |  if_e	jmp	#LR__0166
03414     51 01 00 FF 
03418     56 15 06 F6 | 	mov	arg02, ##@LR__4484
0341c     0F 13 02 F6 | 	mov	arg01, local01
03420     6C 78 B1 FD | 	call	#__system___string_cmp
03424     00 FA 0D F2 | 	cmp	result1, #0 wz
03428     EC 00 90 AD |  if_e	jmp	#LR__0167
0342c     51 01 00 FF 
03430     58 15 06 F6 | 	mov	arg02, ##@LR__4485
03434     0F 13 02 F6 | 	mov	arg01, local01
03438     54 78 B1 FD | 	call	#__system___string_cmp
0343c     00 FA 0D F2 | 	cmp	result1, #0 wz
03440     DC 00 90 AD |  if_e	jmp	#LR__0168
03444     51 01 00 FF 
03448     5A 15 06 F6 | 	mov	arg02, ##@LR__4486
0344c     0F 13 02 F6 | 	mov	arg01, local01
03450     3C 78 B1 FD | 	call	#__system___string_cmp
03454     00 FA 0D F2 | 	cmp	result1, #0 wz
03458     CC 00 90 AD |  if_e	jmp	#LR__0169
0345c     51 01 00 FF 
03460     5D 15 06 F6 | 	mov	arg02, ##@LR__4487
03464     0F 13 02 F6 | 	mov	arg01, local01
03468     24 78 B1 FD | 	call	#__system___string_cmp
0346c     00 FA 0D F2 | 	cmp	result1, #0 wz
03470     BC 00 90 AD |  if_e	jmp	#LR__0170
03474     51 01 00 FF 
03478     60 15 06 F6 | 	mov	arg02, ##@LR__4488
0347c     0F 13 02 F6 | 	mov	arg01, local01
03480     0C 78 B1 FD | 	call	#__system___string_cmp
03484     00 FA 0D F2 | 	cmp	result1, #0 wz
03488     AC 00 90 AD |  if_e	jmp	#LR__0171
0348c     B0 00 90 FD | 	jmp	#LR__0172
03490                 | LR__0150
03490     01 FA 05 F6 | 	mov	result1, #1
03494     AC 00 90 FD | 	jmp	#LR__0173
03498                 | LR__0151
03498     02 FA 05 F6 | 	mov	result1, #2
0349c     A4 00 90 FD | 	jmp	#LR__0173
034a0                 | LR__0152
034a0     03 FA 05 F6 | 	mov	result1, #3
034a4     9C 00 90 FD | 	jmp	#LR__0173
034a8                 | LR__0153
034a8     04 FA 05 F6 | 	mov	result1, #4
034ac     94 00 90 FD | 	jmp	#LR__0173
034b0                 | LR__0154
034b0     05 FA 05 F6 | 	mov	result1, #5
034b4     8C 00 90 FD | 	jmp	#LR__0173
034b8                 | LR__0155
034b8     06 FA 05 F6 | 	mov	result1, #6
034bc     84 00 90 FD | 	jmp	#LR__0173
034c0                 | LR__0156
034c0     07 FA 05 F6 | 	mov	result1, #7
034c4     7C 00 90 FD | 	jmp	#LR__0173
034c8                 | LR__0157
034c8     08 FA 05 F6 | 	mov	result1, #8
034cc     74 00 90 FD | 	jmp	#LR__0173
034d0                 | LR__0158
034d0     09 FA 05 F6 | 	mov	result1, #9
034d4     6C 00 90 FD | 	jmp	#LR__0173
034d8                 | LR__0159
034d8     0A FA 05 F6 | 	mov	result1, #10
034dc     64 00 90 FD | 	jmp	#LR__0173
034e0                 | LR__0160
034e0     0B FA 05 F6 | 	mov	result1, #11
034e4     5C 00 90 FD | 	jmp	#LR__0173
034e8                 | LR__0161
034e8     0C FA 05 F6 | 	mov	result1, #12
034ec     54 00 90 FD | 	jmp	#LR__0173
034f0                 | LR__0162
034f0     0D FA 05 F6 | 	mov	result1, #13
034f4     4C 00 90 FD | 	jmp	#LR__0173
034f8                 | LR__0163
034f8     0E FA 05 F6 | 	mov	result1, #14
034fc     44 00 90 FD | 	jmp	#LR__0173
03500                 | LR__0164
03500     1B FA 05 F6 | 	mov	result1, #27
03504     3C 00 90 FD | 	jmp	#LR__0173
03508                 | LR__0165
03508     27 FA 05 F6 | 	mov	result1, #39
0350c     34 00 90 FD | 	jmp	#LR__0173
03510                 | LR__0166
03510     26 FA 05 F6 | 	mov	result1, #38
03514     2C 00 90 FD | 	jmp	#LR__0173
03518                 | LR__0167
03518     10 FA 05 F6 | 	mov	result1, #16
0351c     24 00 90 FD | 	jmp	#LR__0173
03520                 | LR__0168
03520     0F FA 05 F6 | 	mov	result1, #15
03524     1C 00 90 FD | 	jmp	#LR__0173
03528                 | LR__0169
03528     2A FA 05 F6 | 	mov	result1, #42
0352c     14 00 90 FD | 	jmp	#LR__0173
03530                 | LR__0170
03530     28 FA 05 F6 | 	mov	result1, #40
03534     0C 00 90 FD | 	jmp	#LR__0173
03538                 | LR__0171
03538     29 FA 05 F6 | 	mov	result1, #41
0353c     04 00 90 FD | 	jmp	#LR__0173
03540                 | LR__0172
03540     00 FA 05 F6 | 	mov	result1, #0
03544                 | LR__0173
03544     A7 F0 03 F6 | 	mov	ptra, fp
03548     B2 00 A0 FD | 	call	#popregs_
0354c                 | _isoperator_ret
0354c     2D 00 64 FD | 	ret
03550                 | 
03550                 | ' 
03550                 | ' function isseparator(s as string) as ubyte
03550                 | _isseparator
03550     01 4A 05 F6 | 	mov	COUNT_, #1
03554     A8 00 A0 FD | 	call	#pushregs_
03558                 | ' 
03558                 | ' select case s
03558     09 1F 02 F6 | 	mov	local01, arg01
0355c     51 01 00 FF 
03560     63 15 06 F6 | 	mov	arg02, ##@LR__4489
03564     0F 13 02 F6 | 	mov	arg01, local01
03568     24 77 B1 FD | 	call	#__system___string_cmp
0356c     00 FA 0D F2 | 	cmp	result1, #0 wz
03570     54 01 90 AD |  if_e	jmp	#LR__0180
03574     51 01 00 FF 
03578     65 15 06 F6 | 	mov	arg02, ##@LR__4490
0357c     0F 13 02 F6 | 	mov	arg01, local01
03580     0C 77 B1 FD | 	call	#__system___string_cmp
03584     00 FA 0D F2 | 	cmp	result1, #0 wz
03588     44 01 90 AD |  if_e	jmp	#LR__0181
0358c     51 01 00 FF 
03590     67 15 06 F6 | 	mov	arg02, ##@LR__4491
03594     0F 13 02 F6 | 	mov	arg01, local01
03598     F4 76 B1 FD | 	call	#__system___string_cmp
0359c     00 FA 0D F2 | 	cmp	result1, #0 wz
035a0     34 01 90 AD |  if_e	jmp	#LR__0182
035a4     51 01 00 FF 
035a8     69 15 06 F6 | 	mov	arg02, ##@LR__4492
035ac     0F 13 02 F6 | 	mov	arg01, local01
035b0     DC 76 B1 FD | 	call	#__system___string_cmp
035b4     00 FA 0D F2 | 	cmp	result1, #0 wz
035b8     24 01 90 AD |  if_e	jmp	#LR__0183
035bc     51 01 00 FF 
035c0     6B 15 06 F6 | 	mov	arg02, ##@LR__4493
035c4     0F 13 02 F6 | 	mov	arg01, local01
035c8     C4 76 B1 FD | 	call	#__system___string_cmp
035cc     00 FA 0D F2 | 	cmp	result1, #0 wz
035d0     14 01 90 AD |  if_e	jmp	#LR__0184
035d4     51 01 00 FF 
035d8     6D 15 06 F6 | 	mov	arg02, ##@LR__4494
035dc     0F 13 02 F6 | 	mov	arg01, local01
035e0     AC 76 B1 FD | 	call	#__system___string_cmp
035e4     00 FA 0D F2 | 	cmp	result1, #0 wz
035e8     04 01 90 AD |  if_e	jmp	#LR__0185
035ec     51 01 00 FF 
035f0     6F 15 06 F6 | 	mov	arg02, ##@LR__4495
035f4     0F 13 02 F6 | 	mov	arg01, local01
035f8     94 76 B1 FD | 	call	#__system___string_cmp
035fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03600     F4 00 90 AD |  if_e	jmp	#LR__0186
03604     51 01 00 FF 
03608     71 15 06 F6 | 	mov	arg02, ##@LR__4496
0360c     0F 13 02 F6 | 	mov	arg01, local01
03610     7C 76 B1 FD | 	call	#__system___string_cmp
03614     00 FA 0D F2 | 	cmp	result1, #0 wz
03618     E4 00 90 AD |  if_e	jmp	#LR__0187
0361c     51 01 00 FF 
03620     73 15 06 F6 | 	mov	arg02, ##@LR__4497
03624     0F 13 02 F6 | 	mov	arg01, local01
03628     64 76 B1 FD | 	call	#__system___string_cmp
0362c     00 FA 0D F2 | 	cmp	result1, #0 wz
03630     D4 00 90 AD |  if_e	jmp	#LR__0188
03634     51 01 00 FF 
03638     75 15 06 F6 | 	mov	arg02, ##@LR__4498
0363c     0F 13 02 F6 | 	mov	arg01, local01
03640     4C 76 B1 FD | 	call	#__system___string_cmp
03644     00 FA 0D F2 | 	cmp	result1, #0 wz
03648     C4 00 90 AD |  if_e	jmp	#LR__0189
0364c     51 01 00 FF 
03650     77 15 06 F6 | 	mov	arg02, ##@LR__4499
03654     0F 13 02 F6 | 	mov	arg01, local01
03658     34 76 B1 FD | 	call	#__system___string_cmp
0365c     00 FA 0D F2 | 	cmp	result1, #0 wz
03660     B4 00 90 AD |  if_e	jmp	#LR__0190
03664     51 01 00 FF 
03668     79 15 06 F6 | 	mov	arg02, ##@LR__4500
0366c     0F 13 02 F6 | 	mov	arg01, local01
03670     1C 76 B1 FD | 	call	#__system___string_cmp
03674     00 FA 0D F2 | 	cmp	result1, #0 wz
03678     A4 00 90 AD |  if_e	jmp	#LR__0191
0367c     51 01 00 FF 
03680     7B 15 06 F6 | 	mov	arg02, ##@LR__4501
03684     0F 13 02 F6 | 	mov	arg01, local01
03688     04 76 B1 FD | 	call	#__system___string_cmp
0368c     00 FA 0D F2 | 	cmp	result1, #0 wz
03690     94 00 90 AD |  if_e	jmp	#LR__0192
03694     51 01 00 FF 
03698     7D 15 06 F6 | 	mov	arg02, ##@LR__4502
0369c     0F 13 02 F6 | 	mov	arg01, local01
036a0     EC 75 B1 FD | 	call	#__system___string_cmp
036a4     00 FA 0D F2 | 	cmp	result1, #0 wz
036a8     84 00 90 AD |  if_e	jmp	#LR__0193
036ac     51 01 00 FF 
036b0     7F 15 06 F6 | 	mov	arg02, ##@LR__4503
036b4     0F 13 02 F6 | 	mov	arg01, local01
036b8     D4 75 B1 FD | 	call	#__system___string_cmp
036bc     00 FA 0D F2 | 	cmp	result1, #0 wz
036c0     74 00 90 AD |  if_e	jmp	#LR__0194
036c4     78 00 90 FD | 	jmp	#LR__0195
036c8                 | LR__0180
036c8     01 FA 05 F6 | 	mov	result1, #1
036cc     74 00 90 FD | 	jmp	#LR__0196
036d0                 | LR__0181
036d0     02 FA 05 F6 | 	mov	result1, #2
036d4     6C 00 90 FD | 	jmp	#LR__0196
036d8                 | LR__0182
036d8     1B FA 05 F6 | 	mov	result1, #27
036dc     64 00 90 FD | 	jmp	#LR__0196
036e0                 | LR__0183
036e0     11 FA 05 F6 | 	mov	result1, #17
036e4     5C 00 90 FD | 	jmp	#LR__0196
036e8                 | LR__0184
036e8     05 FA 05 F6 | 	mov	result1, #5
036ec     54 00 90 FD | 	jmp	#LR__0196
036f0                 | LR__0185
036f0     06 FA 05 F6 | 	mov	result1, #6
036f4     4C 00 90 FD | 	jmp	#LR__0196
036f8                 | LR__0186
036f8     12 FA 05 F6 | 	mov	result1, #18
036fc     44 00 90 FD | 	jmp	#LR__0196
03700                 | LR__0187
03700     13 FA 05 F6 | 	mov	result1, #19
03704     3C 00 90 FD | 	jmp	#LR__0196
03708                 | LR__0188
03708     0C FA 05 F6 | 	mov	result1, #12
0370c     34 00 90 FD | 	jmp	#LR__0196
03710                 | LR__0189
03710     14 FA 05 F6 | 	mov	result1, #20
03714     2C 00 90 FD | 	jmp	#LR__0196
03718                 | LR__0190
03718     15 FA 05 F6 | 	mov	result1, #21
0371c     24 00 90 FD | 	jmp	#LR__0196
03720                 | LR__0191
03720     16 FA 05 F6 | 	mov	result1, #22
03724     1C 00 90 FD | 	jmp	#LR__0196
03728                 | LR__0192
03728     FF FB 05 F6 | 	mov	result1, #511
0372c     14 00 90 FD | 	jmp	#LR__0196
03730                 | LR__0193
03730     0F FA 05 F6 | 	mov	result1, #15
03734     0C 00 90 FD | 	jmp	#LR__0196
03738                 | LR__0194
03738     10 FA 05 F6 | 	mov	result1, #16
0373c     04 00 90 FD | 	jmp	#LR__0196
03740                 | LR__0195
03740     00 FA 05 F6 | 	mov	result1, #0
03744                 | LR__0196
03744     A7 F0 03 F6 | 	mov	ptra, fp
03748     B2 00 A0 FD | 	call	#popregs_
0374c                 | _isseparator_ret
0374c     2D 00 64 FD | 	ret
03750                 | 
03750                 | ' 
03750                 | ' 
03750                 | ' function iscommand(s as string) as ubyte
03750                 | _iscommand
03750     01 4A 05 F6 | 	mov	COUNT_, #1
03754     A8 00 A0 FD | 	call	#pushregs_
03758                 | ' 
03758                 | ' select case s
03758     09 1F 02 F6 | 	mov	local01, arg01
0375c     51 01 00 FF 
03760     83 15 06 F6 | 	mov	arg02, ##@LR__4505
03764     0F 13 02 F6 | 	mov	arg01, local01
03768     24 75 B1 FD | 	call	#__system___string_cmp
0376c     00 FA 0D F2 | 	cmp	result1, #0 wz
03770     2C 08 90 AD |  if_e	jmp	#LR__0200
03774     51 01 00 FF 
03778     88 15 06 F6 | 	mov	arg02, ##@LR__4506
0377c     0F 13 02 F6 | 	mov	arg01, local01
03780     0C 75 B1 FD | 	call	#__system___string_cmp
03784     00 FA 0D F2 | 	cmp	result1, #0 wz
03788     1C 08 90 AD |  if_e	jmp	#LR__0201
0378c     51 01 00 FF 
03790     8B 15 06 F6 | 	mov	arg02, ##@LR__4507
03794     0F 13 02 F6 | 	mov	arg01, local01
03798     F4 74 B1 FD | 	call	#__system___string_cmp
0379c     00 FA 0D F2 | 	cmp	result1, #0 wz
037a0     0C 08 90 AD |  if_e	jmp	#LR__0202
037a4     51 01 00 FF 
037a8     8F 15 06 F6 | 	mov	arg02, ##@LR__4508
037ac     0F 13 02 F6 | 	mov	arg01, local01
037b0     DC 74 B1 FD | 	call	#__system___string_cmp
037b4     00 FA 0D F2 | 	cmp	result1, #0 wz
037b8     FC 07 90 AD |  if_e	jmp	#LR__0203
037bc     51 01 00 FF 
037c0     94 15 06 F6 | 	mov	arg02, ##@LR__4509
037c4     0F 13 02 F6 | 	mov	arg01, local01
037c8     C4 74 B1 FD | 	call	#__system___string_cmp
037cc     00 FA 0D F2 | 	cmp	result1, #0 wz
037d0     EC 07 90 AD |  if_e	jmp	#LR__0204
037d4     51 01 00 FF 
037d8     98 15 06 F6 | 	mov	arg02, ##@LR__4510
037dc     0F 13 02 F6 | 	mov	arg01, local01
037e0     AC 74 B1 FD | 	call	#__system___string_cmp
037e4     00 FA 0D F2 | 	cmp	result1, #0 wz
037e8     DC 07 90 AD |  if_e	jmp	#LR__0205
037ec     51 01 00 FF 
037f0     9F 15 06 F6 | 	mov	arg02, ##@LR__4511
037f4     0F 13 02 F6 | 	mov	arg01, local01
037f8     94 74 B1 FD | 	call	#__system___string_cmp
037fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03800     CC 07 90 AD |  if_e	jmp	#LR__0206
03804     51 01 00 FF 
03808     A3 15 06 F6 | 	mov	arg02, ##@LR__4512
0380c     0F 13 02 F6 | 	mov	arg01, local01
03810     7C 74 B1 FD | 	call	#__system___string_cmp
03814     00 FA 0D F2 | 	cmp	result1, #0 wz
03818     BC 07 90 AD |  if_e	jmp	#LR__0207
0381c     51 01 00 FF 
03820     A9 15 06 F6 | 	mov	arg02, ##@LR__4513
03824     0F 13 02 F6 | 	mov	arg01, local01
03828     64 74 B1 FD | 	call	#__system___string_cmp
0382c     00 FA 0D F2 | 	cmp	result1, #0 wz
03830     AC 07 90 AD |  if_e	jmp	#LR__0208
03834     51 01 00 FF 
03838     AD 15 06 F6 | 	mov	arg02, ##@LR__4514
0383c     0F 13 02 F6 | 	mov	arg01, local01
03840     4C 74 B1 FD | 	call	#__system___string_cmp
03844     00 FA 0D F2 | 	cmp	result1, #0 wz
03848     9C 07 90 AD |  if_e	jmp	#LR__0209
0384c     51 01 00 FF 
03850     B3 15 06 F6 | 	mov	arg02, ##@LR__4515
03854     0F 13 02 F6 | 	mov	arg01, local01
03858     34 74 B1 FD | 	call	#__system___string_cmp
0385c     00 FA 0D F2 | 	cmp	result1, #0 wz
03860     8C 07 90 AD |  if_e	jmp	#LR__0210
03864     51 01 00 FF 
03868     B6 15 06 F6 | 	mov	arg02, ##@LR__4516
0386c     0F 13 02 F6 | 	mov	arg01, local01
03870     1C 74 B1 FD | 	call	#__system___string_cmp
03874     00 FA 0D F2 | 	cmp	result1, #0 wz
03878     7C 07 90 AD |  if_e	jmp	#LR__0211
0387c     51 01 00 FF 
03880     BC 15 06 F6 | 	mov	arg02, ##@LR__4517
03884     0F 13 02 F6 | 	mov	arg01, local01
03888     04 74 B1 FD | 	call	#__system___string_cmp
0388c     00 FA 0D F2 | 	cmp	result1, #0 wz
03890     6C 07 90 AD |  if_e	jmp	#LR__0212
03894     51 01 00 FF 
03898     C0 15 06 F6 | 	mov	arg02, ##@LR__4518
0389c     0F 13 02 F6 | 	mov	arg01, local01
038a0     EC 73 B1 FD | 	call	#__system___string_cmp
038a4     00 FA 0D F2 | 	cmp	result1, #0 wz
038a8     5C 07 90 AD |  if_e	jmp	#LR__0213
038ac     51 01 00 FF 
038b0     C7 15 06 F6 | 	mov	arg02, ##@LR__4519
038b4     0F 13 02 F6 | 	mov	arg01, local01
038b8     D4 73 B1 FD | 	call	#__system___string_cmp
038bc     00 FA 0D F2 | 	cmp	result1, #0 wz
038c0     4C 07 90 AD |  if_e	jmp	#LR__0214
038c4     51 01 00 FF 
038c8     CE 15 06 F6 | 	mov	arg02, ##@LR__4520
038cc     0F 13 02 F6 | 	mov	arg01, local01
038d0     BC 73 B1 FD | 	call	#__system___string_cmp
038d4     00 FA 0D F2 | 	cmp	result1, #0 wz
038d8     3C 07 90 AD |  if_e	jmp	#LR__0215
038dc     51 01 00 FF 
038e0     D5 15 06 F6 | 	mov	arg02, ##@LR__4521
038e4     0F 13 02 F6 | 	mov	arg01, local01
038e8     A4 73 B1 FD | 	call	#__system___string_cmp
038ec     00 FA 0D F2 | 	cmp	result1, #0 wz
038f0     2C 07 90 AD |  if_e	jmp	#LR__0216
038f4     51 01 00 FF 
038f8     DF 15 06 F6 | 	mov	arg02, ##@LR__4522
038fc     0F 13 02 F6 | 	mov	arg01, local01
03900     8C 73 B1 FD | 	call	#__system___string_cmp
03904     00 FA 0D F2 | 	cmp	result1, #0 wz
03908     1C 07 90 AD |  if_e	jmp	#LR__0217
0390c     51 01 00 FF 
03910     E3 15 06 F6 | 	mov	arg02, ##@LR__4523
03914     0F 13 02 F6 | 	mov	arg01, local01
03918     74 73 B1 FD | 	call	#__system___string_cmp
0391c     00 FA 0D F2 | 	cmp	result1, #0 wz
03920     0C 07 90 AD |  if_e	jmp	#LR__0218
03924     51 01 00 FF 
03928     E7 15 06 F6 | 	mov	arg02, ##@LR__4524
0392c     0F 13 02 F6 | 	mov	arg01, local01
03930     5C 73 B1 FD | 	call	#__system___string_cmp
03934     00 FA 0D F2 | 	cmp	result1, #0 wz
03938     FC 06 90 AD |  if_e	jmp	#LR__0219
0393c     51 01 00 FF 
03940     EB 15 06 F6 | 	mov	arg02, ##@LR__4525
03944     0F 13 02 F6 | 	mov	arg01, local01
03948     44 73 B1 FD | 	call	#__system___string_cmp
0394c     00 FA 0D F2 | 	cmp	result1, #0 wz
03950     EC 06 90 AD |  if_e	jmp	#LR__0220
03954     51 01 00 FF 
03958     EF 15 06 F6 | 	mov	arg02, ##@LR__4526
0395c     0F 13 02 F6 | 	mov	arg01, local01
03960     2C 73 B1 FD | 	call	#__system___string_cmp
03964     00 FA 0D F2 | 	cmp	result1, #0 wz
03968     DC 06 90 AD |  if_e	jmp	#LR__0221
0396c     51 01 00 FF 
03970     F4 15 06 F6 | 	mov	arg02, ##@LR__4527
03974     0F 13 02 F6 | 	mov	arg01, local01
03978     14 73 B1 FD | 	call	#__system___string_cmp
0397c     00 FA 0D F2 | 	cmp	result1, #0 wz
03980     CC 06 90 AD |  if_e	jmp	#LR__0222
03984     51 01 00 FF 
03988     F8 15 06 F6 | 	mov	arg02, ##@LR__4528
0398c     0F 13 02 F6 | 	mov	arg01, local01
03990     FC 72 B1 FD | 	call	#__system___string_cmp
03994     00 FA 0D F2 | 	cmp	result1, #0 wz
03998     BC 06 90 AD |  if_e	jmp	#LR__0223
0399c     51 01 00 FF 
039a0     FD 15 06 F6 | 	mov	arg02, ##@LR__4529
039a4     0F 13 02 F6 | 	mov	arg01, local01
039a8     E4 72 B1 FD | 	call	#__system___string_cmp
039ac     00 FA 0D F2 | 	cmp	result1, #0 wz
039b0     AC 06 90 AD |  if_e	jmp	#LR__0224
039b4     52 01 00 FF 
039b8     05 14 06 F6 | 	mov	arg02, ##@LR__4530
039bc     0F 13 02 F6 | 	mov	arg01, local01
039c0     CC 72 B1 FD | 	call	#__system___string_cmp
039c4     00 FA 0D F2 | 	cmp	result1, #0 wz
039c8     9C 06 90 AD |  if_e	jmp	#LR__0225
039cc     52 01 00 FF 
039d0     09 14 06 F6 | 	mov	arg02, ##@LR__4531
039d4     0F 13 02 F6 | 	mov	arg01, local01
039d8     B4 72 B1 FD | 	call	#__system___string_cmp
039dc     00 FA 0D F2 | 	cmp	result1, #0 wz
039e0     8C 06 90 AD |  if_e	jmp	#LR__0226
039e4     52 01 00 FF 
039e8     0E 14 06 F6 | 	mov	arg02, ##@LR__4532
039ec     0F 13 02 F6 | 	mov	arg01, local01
039f0     9C 72 B1 FD | 	call	#__system___string_cmp
039f4     00 FA 0D F2 | 	cmp	result1, #0 wz
039f8     7C 06 90 AD |  if_e	jmp	#LR__0227
039fc     52 01 00 FF 
03a00     12 14 06 F6 | 	mov	arg02, ##@LR__4533
03a04     0F 13 02 F6 | 	mov	arg01, local01
03a08     84 72 B1 FD | 	call	#__system___string_cmp
03a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a10     6C 06 90 AD |  if_e	jmp	#LR__0228
03a14     52 01 00 FF 
03a18     17 14 06 F6 | 	mov	arg02, ##@LR__4534
03a1c     0F 13 02 F6 | 	mov	arg01, local01
03a20     6C 72 B1 FD | 	call	#__system___string_cmp
03a24     00 FA 0D F2 | 	cmp	result1, #0 wz
03a28     5C 06 90 AD |  if_e	jmp	#LR__0229
03a2c     52 01 00 FF 
03a30     1B 14 06 F6 | 	mov	arg02, ##@LR__4535
03a34     0F 13 02 F6 | 	mov	arg01, local01
03a38     54 72 B1 FD | 	call	#__system___string_cmp
03a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a40     4C 06 90 AD |  if_e	jmp	#LR__0230
03a44     52 01 00 FF 
03a48     1E 14 06 F6 | 	mov	arg02, ##@LR__4536
03a4c     0F 13 02 F6 | 	mov	arg01, local01
03a50     3C 72 B1 FD | 	call	#__system___string_cmp
03a54     00 FA 0D F2 | 	cmp	result1, #0 wz
03a58     3C 06 90 AD |  if_e	jmp	#LR__0231
03a5c     52 01 00 FF 
03a60     24 14 06 F6 | 	mov	arg02, ##@LR__4537
03a64     0F 13 02 F6 | 	mov	arg01, local01
03a68     24 72 B1 FD | 	call	#__system___string_cmp
03a6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a70     2C 06 90 AD |  if_e	jmp	#LR__0232
03a74     52 01 00 FF 
03a78     28 14 06 F6 | 	mov	arg02, ##@LR__4538
03a7c     0F 13 02 F6 | 	mov	arg01, local01
03a80     0C 72 B1 FD | 	call	#__system___string_cmp
03a84     00 FA 0D F2 | 	cmp	result1, #0 wz
03a88     1C 06 90 AD |  if_e	jmp	#LR__0233
03a8c     52 01 00 FF 
03a90     2D 14 06 F6 | 	mov	arg02, ##@LR__4539
03a94     0F 13 02 F6 | 	mov	arg01, local01
03a98     F4 71 B1 FD | 	call	#__system___string_cmp
03a9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03aa0     0C 06 90 AD |  if_e	jmp	#LR__0234
03aa4     52 01 00 FF 
03aa8     30 14 06 F6 | 	mov	arg02, ##@LR__4540
03aac     0F 13 02 F6 | 	mov	arg01, local01
03ab0     DC 71 B1 FD | 	call	#__system___string_cmp
03ab4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ab8     FC 05 90 AD |  if_e	jmp	#LR__0235
03abc     52 01 00 FF 
03ac0     33 14 06 F6 | 	mov	arg02, ##@LR__4541
03ac4     0F 13 02 F6 | 	mov	arg01, local01
03ac8     C4 71 B1 FD | 	call	#__system___string_cmp
03acc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ad0     EC 05 90 AD |  if_e	jmp	#LR__0236
03ad4     52 01 00 FF 
03ad8     37 14 06 F6 | 	mov	arg02, ##@LR__4542
03adc     0F 13 02 F6 | 	mov	arg01, local01
03ae0     AC 71 B1 FD | 	call	#__system___string_cmp
03ae4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ae8     DC 05 90 AD |  if_e	jmp	#LR__0237
03aec     52 01 00 FF 
03af0     3A 14 06 F6 | 	mov	arg02, ##@LR__4543
03af4     0F 13 02 F6 | 	mov	arg01, local01
03af8     94 71 B1 FD | 	call	#__system___string_cmp
03afc     00 FA 0D F2 | 	cmp	result1, #0 wz
03b00     CC 05 90 AD |  if_e	jmp	#LR__0238
03b04     52 01 00 FF 
03b08     3E 14 06 F6 | 	mov	arg02, ##@LR__4544
03b0c     0F 13 02 F6 | 	mov	arg01, local01
03b10     7C 71 B1 FD | 	call	#__system___string_cmp
03b14     00 FA 0D F2 | 	cmp	result1, #0 wz
03b18     BC 05 90 AD |  if_e	jmp	#LR__0239
03b1c     52 01 00 FF 
03b20     43 14 06 F6 | 	mov	arg02, ##@LR__4545
03b24     0F 13 02 F6 | 	mov	arg01, local01
03b28     64 71 B1 FD | 	call	#__system___string_cmp
03b2c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b30     AC 05 90 AD |  if_e	jmp	#LR__0240
03b34     52 01 00 FF 
03b38     46 14 06 F6 | 	mov	arg02, ##@LR__4546
03b3c     0F 13 02 F6 | 	mov	arg01, local01
03b40     4C 71 B1 FD | 	call	#__system___string_cmp
03b44     00 FA 0D F2 | 	cmp	result1, #0 wz
03b48     9C 05 90 AD |  if_e	jmp	#LR__0241
03b4c     52 01 00 FF 
03b50     4B 14 06 F6 | 	mov	arg02, ##@LR__4547
03b54     0F 13 02 F6 | 	mov	arg01, local01
03b58     34 71 B1 FD | 	call	#__system___string_cmp
03b5c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b60     8C 05 90 AD |  if_e	jmp	#LR__0242
03b64     52 01 00 FF 
03b68     4F 14 06 F6 | 	mov	arg02, ##@LR__4548
03b6c     0F 13 02 F6 | 	mov	arg01, local01
03b70     1C 71 B1 FD | 	call	#__system___string_cmp
03b74     00 FA 0D F2 | 	cmp	result1, #0 wz
03b78     7C 05 90 AD |  if_e	jmp	#LR__0243
03b7c     52 01 00 FF 
03b80     54 14 06 F6 | 	mov	arg02, ##@LR__4549
03b84     0F 13 02 F6 | 	mov	arg01, local01
03b88     04 71 B1 FD | 	call	#__system___string_cmp
03b8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b90     6C 05 90 AD |  if_e	jmp	#LR__0244
03b94     52 01 00 FF 
03b98     57 14 06 F6 | 	mov	arg02, ##@LR__4550
03b9c     0F 13 02 F6 | 	mov	arg01, local01
03ba0     EC 70 B1 FD | 	call	#__system___string_cmp
03ba4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ba8     5C 05 90 AD |  if_e	jmp	#LR__0245
03bac     52 01 00 FF 
03bb0     5D 14 06 F6 | 	mov	arg02, ##@LR__4551
03bb4     0F 13 02 F6 | 	mov	arg01, local01
03bb8     D4 70 B1 FD | 	call	#__system___string_cmp
03bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
03bc0     4C 05 90 AD |  if_e	jmp	#LR__0246
03bc4     52 01 00 FF 
03bc8     61 14 06 F6 | 	mov	arg02, ##@LR__4552
03bcc     0F 13 02 F6 | 	mov	arg01, local01
03bd0     BC 70 B1 FD | 	call	#__system___string_cmp
03bd4     00 FA 0D F2 | 	cmp	result1, #0 wz
03bd8     3C 05 90 AD |  if_e	jmp	#LR__0247
03bdc     52 01 00 FF 
03be0     66 14 06 F6 | 	mov	arg02, ##@LR__4553
03be4     0F 13 02 F6 | 	mov	arg01, local01
03be8     A4 70 B1 FD | 	call	#__system___string_cmp
03bec     00 FA 0D F2 | 	cmp	result1, #0 wz
03bf0     2C 05 90 AD |  if_e	jmp	#LR__0248
03bf4     52 01 00 FF 
03bf8     69 14 06 F6 | 	mov	arg02, ##@LR__4554
03bfc     0F 13 02 F6 | 	mov	arg01, local01
03c00     8C 70 B1 FD | 	call	#__system___string_cmp
03c04     00 FA 0D F2 | 	cmp	result1, #0 wz
03c08     1C 05 90 AD |  if_e	jmp	#LR__0249
03c0c     52 01 00 FF 
03c10     6F 14 06 F6 | 	mov	arg02, ##@LR__4555
03c14     0F 13 02 F6 | 	mov	arg01, local01
03c18     74 70 B1 FD | 	call	#__system___string_cmp
03c1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c20     0C 05 90 AD |  if_e	jmp	#LR__0250
03c24     52 01 00 FF 
03c28     72 14 06 F6 | 	mov	arg02, ##@LR__4556
03c2c     0F 13 02 F6 | 	mov	arg01, local01
03c30     5C 70 B1 FD | 	call	#__system___string_cmp
03c34     00 FA 0D F2 | 	cmp	result1, #0 wz
03c38     FC 04 90 AD |  if_e	jmp	#LR__0251
03c3c     52 01 00 FF 
03c40     7B 14 06 F6 | 	mov	arg02, ##@LR__4557
03c44     0F 13 02 F6 | 	mov	arg01, local01
03c48     44 70 B1 FD | 	call	#__system___string_cmp
03c4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c50     EC 04 90 AD |  if_e	jmp	#LR__0252
03c54     52 01 00 FF 
03c58     81 14 06 F6 | 	mov	arg02, ##@LR__4558
03c5c     0F 13 02 F6 | 	mov	arg01, local01
03c60     2C 70 B1 FD | 	call	#__system___string_cmp
03c64     00 FA 0D F2 | 	cmp	result1, #0 wz
03c68     DC 04 90 AD |  if_e	jmp	#LR__0253
03c6c     52 01 00 FF 
03c70     87 14 06 F6 | 	mov	arg02, ##@LR__4559
03c74     0F 13 02 F6 | 	mov	arg01, local01
03c78     14 70 B1 FD | 	call	#__system___string_cmp
03c7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c80     CC 04 90 AD |  if_e	jmp	#LR__0254
03c84     52 01 00 FF 
03c88     90 14 06 F6 | 	mov	arg02, ##@LR__4560
03c8c     0F 13 02 F6 | 	mov	arg01, local01
03c90     FC 6F B1 FD | 	call	#__system___string_cmp
03c94     00 FA 0D F2 | 	cmp	result1, #0 wz
03c98     BC 04 90 AD |  if_e	jmp	#LR__0255
03c9c     52 01 00 FF 
03ca0     9A 14 06 F6 | 	mov	arg02, ##@LR__4561
03ca4     0F 13 02 F6 | 	mov	arg01, local01
03ca8     E4 6F B1 FD | 	call	#__system___string_cmp
03cac     00 FA 0D F2 | 	cmp	result1, #0 wz
03cb0     AC 04 90 AD |  if_e	jmp	#LR__0256
03cb4     52 01 00 FF 
03cb8     A3 14 06 F6 | 	mov	arg02, ##@LR__4562
03cbc     0F 13 02 F6 | 	mov	arg01, local01
03cc0     CC 6F B1 FD | 	call	#__system___string_cmp
03cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cc8     9C 04 90 AD |  if_e	jmp	#LR__0257
03ccc     52 01 00 FF 
03cd0     A8 14 06 F6 | 	mov	arg02, ##@LR__4563
03cd4     0F 13 02 F6 | 	mov	arg01, local01
03cd8     B4 6F B1 FD | 	call	#__system___string_cmp
03cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ce0     8C 04 90 AD |  if_e	jmp	#LR__0258
03ce4     52 01 00 FF 
03ce8     AD 14 06 F6 | 	mov	arg02, ##@LR__4564
03cec     0F 13 02 F6 | 	mov	arg01, local01
03cf0     9C 6F B1 FD | 	call	#__system___string_cmp
03cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cf8     7C 04 90 AD |  if_e	jmp	#LR__0259
03cfc     52 01 00 FF 
03d00     B1 14 06 F6 | 	mov	arg02, ##@LR__4565
03d04     0F 13 02 F6 | 	mov	arg01, local01
03d08     84 6F B1 FD | 	call	#__system___string_cmp
03d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d10     6C 04 90 AD |  if_e	jmp	#LR__0260
03d14     52 01 00 FF 
03d18     BA 14 06 F6 | 	mov	arg02, ##@LR__4566
03d1c     0F 13 02 F6 | 	mov	arg01, local01
03d20     6C 6F B1 FD | 	call	#__system___string_cmp
03d24     00 FA 0D F2 | 	cmp	result1, #0 wz
03d28     5C 04 90 AD |  if_e	jmp	#LR__0261
03d2c     52 01 00 FF 
03d30     BF 14 06 F6 | 	mov	arg02, ##@LR__4567
03d34     0F 13 02 F6 | 	mov	arg01, local01
03d38     54 6F B1 FD | 	call	#__system___string_cmp
03d3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d40     4C 04 90 AD |  if_e	jmp	#LR__0262
03d44     52 01 00 FF 
03d48     C5 14 06 F6 | 	mov	arg02, ##@LR__4568
03d4c     0F 13 02 F6 | 	mov	arg01, local01
03d50     3C 6F B1 FD | 	call	#__system___string_cmp
03d54     00 FA 0D F2 | 	cmp	result1, #0 wz
03d58     3C 04 90 AD |  if_e	jmp	#LR__0263
03d5c     52 01 00 FF 
03d60     C7 14 06 F6 | 	mov	arg02, ##@LR__4569
03d64     0F 13 02 F6 | 	mov	arg01, local01
03d68     24 6F B1 FD | 	call	#__system___string_cmp
03d6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d70     2C 04 90 AD |  if_e	jmp	#LR__0264
03d74     52 01 00 FF 
03d78     CB 14 06 F6 | 	mov	arg02, ##@LR__4570
03d7c     0F 13 02 F6 | 	mov	arg01, local01
03d80     0C 6F B1 FD | 	call	#__system___string_cmp
03d84     00 FA 0D F2 | 	cmp	result1, #0 wz
03d88     1C 04 90 AD |  if_e	jmp	#LR__0265
03d8c     52 01 00 FF 
03d90     D3 14 06 F6 | 	mov	arg02, ##@LR__4571
03d94     0F 13 02 F6 | 	mov	arg01, local01
03d98     F4 6E B1 FD | 	call	#__system___string_cmp
03d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03da0     0C 04 90 AD |  if_e	jmp	#LR__0266
03da4     52 01 00 FF 
03da8     D7 14 06 F6 | 	mov	arg02, ##@LR__4572
03dac     0F 13 02 F6 | 	mov	arg01, local01
03db0     DC 6E B1 FD | 	call	#__system___string_cmp
03db4     00 FA 0D F2 | 	cmp	result1, #0 wz
03db8     FC 03 90 AD |  if_e	jmp	#LR__0267
03dbc     52 01 00 FF 
03dc0     DC 14 06 F6 | 	mov	arg02, ##@LR__4573
03dc4     0F 13 02 F6 | 	mov	arg01, local01
03dc8     C4 6E B1 FD | 	call	#__system___string_cmp
03dcc     00 FA 0D F2 | 	cmp	result1, #0 wz
03dd0     EC 03 90 AD |  if_e	jmp	#LR__0268
03dd4     52 01 00 FF 
03dd8     DF 14 06 F6 | 	mov	arg02, ##@LR__4574
03ddc     0F 13 02 F6 | 	mov	arg01, local01
03de0     AC 6E B1 FD | 	call	#__system___string_cmp
03de4     00 FA 0D F2 | 	cmp	result1, #0 wz
03de8     DC 03 90 AD |  if_e	jmp	#LR__0269
03dec     52 01 00 FF 
03df0     E8 14 06 F6 | 	mov	arg02, ##@LR__4575
03df4     0F 13 02 F6 | 	mov	arg01, local01
03df8     94 6E B1 FD | 	call	#__system___string_cmp
03dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
03e00     CC 03 90 AD |  if_e	jmp	#LR__0270
03e04     52 01 00 FF 
03e08     EF 14 06 F6 | 	mov	arg02, ##@LR__4576
03e0c     0F 13 02 F6 | 	mov	arg01, local01
03e10     7C 6E B1 FD | 	call	#__system___string_cmp
03e14     00 FA 0D F2 | 	cmp	result1, #0 wz
03e18     BC 03 90 AD |  if_e	jmp	#LR__0271
03e1c     52 01 00 FF 
03e20     F6 14 06 F6 | 	mov	arg02, ##@LR__4577
03e24     0F 13 02 F6 | 	mov	arg01, local01
03e28     64 6E B1 FD | 	call	#__system___string_cmp
03e2c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e30     AC 03 90 AD |  if_e	jmp	#LR__0272
03e34     52 01 00 FF 
03e38     FD 14 06 F6 | 	mov	arg02, ##@LR__4578
03e3c     0F 13 02 F6 | 	mov	arg01, local01
03e40     4C 6E B1 FD | 	call	#__system___string_cmp
03e44     00 FA 0D F2 | 	cmp	result1, #0 wz
03e48     9C 03 90 AD |  if_e	jmp	#LR__0273
03e4c     52 01 00 FF 
03e50     08 15 06 F6 | 	mov	arg02, ##@LR__4579
03e54     0F 13 02 F6 | 	mov	arg01, local01
03e58     34 6E B1 FD | 	call	#__system___string_cmp
03e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e60     8C 03 90 AD |  if_e	jmp	#LR__0274
03e64     52 01 00 FF 
03e68     0F 15 06 F6 | 	mov	arg02, ##@LR__4580
03e6c     0F 13 02 F6 | 	mov	arg01, local01
03e70     1C 6E B1 FD | 	call	#__system___string_cmp
03e74     00 FA 0D F2 | 	cmp	result1, #0 wz
03e78     7C 03 90 AD |  if_e	jmp	#LR__0275
03e7c     52 01 00 FF 
03e80     17 15 06 F6 | 	mov	arg02, ##@LR__4581
03e84     0F 13 02 F6 | 	mov	arg01, local01
03e88     04 6E B1 FD | 	call	#__system___string_cmp
03e8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e90     6C 03 90 AD |  if_e	jmp	#LR__0276
03e94     52 01 00 FF 
03e98     1D 15 06 F6 | 	mov	arg02, ##@LR__4582
03e9c     0F 13 02 F6 | 	mov	arg01, local01
03ea0     EC 6D B1 FD | 	call	#__system___string_cmp
03ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ea8     5C 03 90 AD |  if_e	jmp	#LR__0277
03eac     52 01 00 FF 
03eb0     21 15 06 F6 | 	mov	arg02, ##@LR__4583
03eb4     0F 13 02 F6 | 	mov	arg01, local01
03eb8     D4 6D B1 FD | 	call	#__system___string_cmp
03ebc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ec0     4C 03 90 AD |  if_e	jmp	#LR__0278
03ec4     52 01 00 FF 
03ec8     28 15 06 F6 | 	mov	arg02, ##@LR__4584
03ecc     0F 13 02 F6 | 	mov	arg01, local01
03ed0     BC 6D B1 FD | 	call	#__system___string_cmp
03ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ed8     3C 03 90 AD |  if_e	jmp	#LR__0279
03edc     52 01 00 FF 
03ee0     2C 15 06 F6 | 	mov	arg02, ##@LR__4585
03ee4     0F 13 02 F6 | 	mov	arg01, local01
03ee8     A4 6D B1 FD | 	call	#__system___string_cmp
03eec     00 FA 0D F2 | 	cmp	result1, #0 wz
03ef0     2C 03 90 AD |  if_e	jmp	#LR__0280
03ef4     52 01 00 FF 
03ef8     31 15 06 F6 | 	mov	arg02, ##@LR__4586
03efc     0F 13 02 F6 | 	mov	arg01, local01
03f00     8C 6D B1 FD | 	call	#__system___string_cmp
03f04     00 FA 0D F2 | 	cmp	result1, #0 wz
03f08     1C 03 90 AD |  if_e	jmp	#LR__0281
03f0c     52 01 00 FF 
03f10     38 15 06 F6 | 	mov	arg02, ##@LR__4587
03f14     0F 13 02 F6 | 	mov	arg01, local01
03f18     74 6D B1 FD | 	call	#__system___string_cmp
03f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f20     0C 03 90 AD |  if_e	jmp	#LR__0282
03f24     52 01 00 FF 
03f28     42 15 06 F6 | 	mov	arg02, ##@LR__4588
03f2c     0F 13 02 F6 | 	mov	arg01, local01
03f30     5C 6D B1 FD | 	call	#__system___string_cmp
03f34     00 FA 0D F2 | 	cmp	result1, #0 wz
03f38     FC 02 90 AD |  if_e	jmp	#LR__0283
03f3c     52 01 00 FF 
03f40     46 15 06 F6 | 	mov	arg02, ##@LR__4589
03f44     0F 13 02 F6 | 	mov	arg01, local01
03f48     44 6D B1 FD | 	call	#__system___string_cmp
03f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f50     EC 02 90 AD |  if_e	jmp	#LR__0284
03f54     52 01 00 FF 
03f58     4E 15 06 F6 | 	mov	arg02, ##@LR__4590
03f5c     0F 13 02 F6 | 	mov	arg01, local01
03f60     2C 6D B1 FD | 	call	#__system___string_cmp
03f64     00 FA 0D F2 | 	cmp	result1, #0 wz
03f68     DC 02 90 AD |  if_e	jmp	#LR__0285
03f6c     52 01 00 FF 
03f70     52 15 06 F6 | 	mov	arg02, ##@LR__4591
03f74     0F 13 02 F6 | 	mov	arg01, local01
03f78     14 6D B1 FD | 	call	#__system___string_cmp
03f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f80     CC 02 90 AD |  if_e	jmp	#LR__0286
03f84     52 01 00 FF 
03f88     58 15 06 F6 | 	mov	arg02, ##@LR__4592
03f8c     0F 13 02 F6 | 	mov	arg01, local01
03f90     FC 6C B1 FD | 	call	#__system___string_cmp
03f94     00 FA 0D F2 | 	cmp	result1, #0 wz
03f98     BC 02 90 AD |  if_e	jmp	#LR__0287
03f9c     C0 02 90 FD | 	jmp	#LR__0288
03fa0                 | LR__0200
03fa0     5C FA 05 F6 | 	mov	result1, #92
03fa4     BC 02 90 FD | 	jmp	#LR__0289
03fa8                 | LR__0201
03fa8     5C FA 05 F6 | 	mov	result1, #92
03fac     B4 02 90 FD | 	jmp	#LR__0289
03fb0                 | LR__0202
03fb0     47 FA 05 F6 | 	mov	result1, #71
03fb4     AC 02 90 FD | 	jmp	#LR__0289
03fb8                 | LR__0203
03fb8     59 FA 05 F6 | 	mov	result1, #89
03fbc     A4 02 90 FD | 	jmp	#LR__0289
03fc0                 | LR__0204
03fc0     59 FA 05 F6 | 	mov	result1, #89
03fc4     9C 02 90 FD | 	jmp	#LR__0289
03fc8                 | LR__0205
03fc8     45 FA 05 F6 | 	mov	result1, #69
03fcc     94 02 90 FD | 	jmp	#LR__0289
03fd0                 | LR__0206
03fd0     45 FA 05 F6 | 	mov	result1, #69
03fd4     8C 02 90 FD | 	jmp	#LR__0289
03fd8                 | LR__0207
03fd8     69 FA 05 F6 | 	mov	result1, #105
03fdc     84 02 90 FD | 	jmp	#LR__0289
03fe0                 | LR__0208
03fe0     40 FA 05 F6 | 	mov	result1, #64
03fe4     7C 02 90 FD | 	jmp	#LR__0289
03fe8                 | LR__0209
03fe8     49 FA 05 F6 | 	mov	result1, #73
03fec     74 02 90 FD | 	jmp	#LR__0289
03ff0                 | LR__0210
03ff0     49 FA 05 F6 | 	mov	result1, #73
03ff4     6C 02 90 FD | 	jmp	#LR__0289
03ff8                 | LR__0211
03ff8     50 FA 05 F6 | 	mov	result1, #80
03ffc     64 02 90 FD | 	jmp	#LR__0289
04000                 | LR__0212
04000     50 FA 05 F6 | 	mov	result1, #80
04004     5C 02 90 FD | 	jmp	#LR__0289
04008                 | LR__0213
04008     68 FA 05 F6 | 	mov	result1, #104
0400c     54 02 90 FD | 	jmp	#LR__0289
04010                 | LR__0214
04010     73 FA 05 F6 | 	mov	result1, #115
04014     4C 02 90 FD | 	jmp	#LR__0289
04018                 | LR__0215
04018     74 FA 05 F6 | 	mov	result1, #116
0401c     44 02 90 FD | 	jmp	#LR__0289
04020                 | LR__0216
04020     6C FA 05 F6 | 	mov	result1, #108
04024     3C 02 90 FD | 	jmp	#LR__0289
04028                 | LR__0217
04028     6C FA 05 F6 | 	mov	result1, #108
0402c     34 02 90 FD | 	jmp	#LR__0289
04030                 | LR__0218
04030     89 FA 05 F6 | 	mov	result1, #137
04034     2C 02 90 FD | 	jmp	#LR__0289
04038                 | LR__0219
04038     72 FA 05 F6 | 	mov	result1, #114
0403c     24 02 90 FD | 	jmp	#LR__0289
04040                 | LR__0220
04040     5D FA 05 F6 | 	mov	result1, #93
04044     1C 02 90 FD | 	jmp	#LR__0289
04048                 | LR__0221
04048     43 FA 05 F6 | 	mov	result1, #67
0404c     14 02 90 FD | 	jmp	#LR__0289
04050                 | LR__0222
04050     43 FA 05 F6 | 	mov	result1, #67
04054     0C 02 90 FD | 	jmp	#LR__0289
04058                 | LR__0223
04058     5A FA 05 F6 | 	mov	result1, #90
0405c     04 02 90 FD | 	jmp	#LR__0289
04060                 | LR__0224
04060     46 FA 05 F6 | 	mov	result1, #70
04064     FC 01 90 FD | 	jmp	#LR__0289
04068                 | LR__0225
04068     46 FA 05 F6 | 	mov	result1, #70
0406c     F4 01 90 FD | 	jmp	#LR__0289
04070                 | LR__0226
04070     71 FA 05 F6 | 	mov	result1, #113
04074     EC 01 90 FD | 	jmp	#LR__0289
04078                 | LR__0227
04078     71 FA 05 F6 | 	mov	result1, #113
0407c     E4 01 90 FD | 	jmp	#LR__0289
04080                 | LR__0228
04080     60 FA 05 F6 | 	mov	result1, #96
04084     DC 01 90 FD | 	jmp	#LR__0289
04088                 | LR__0229
04088     4A FA 05 F6 | 	mov	result1, #74
0408c     D4 01 90 FD | 	jmp	#LR__0289
04090                 | LR__0230
04090     4A FA 05 F6 | 	mov	result1, #74
04094     CC 01 90 FD | 	jmp	#LR__0289
04098                 | LR__0231
04098     48 FA 05 F6 | 	mov	result1, #72
0409c     C4 01 90 FD | 	jmp	#LR__0289
040a0                 | LR__0232
040a0     48 FA 05 F6 | 	mov	result1, #72
040a4     BC 01 90 FD | 	jmp	#LR__0289
040a8                 | LR__0233
040a8     4E FA 05 F6 | 	mov	result1, #78
040ac     B4 01 90 FD | 	jmp	#LR__0289
040b0                 | LR__0234
040b0     4E FA 05 F6 | 	mov	result1, #78
040b4     AC 01 90 FD | 	jmp	#LR__0289
040b8                 | LR__0235
040b8     58 FA 05 F6 | 	mov	result1, #88
040bc     A4 01 90 FD | 	jmp	#LR__0289
040c0                 | LR__0236
040c0     5F FA 05 F6 | 	mov	result1, #95
040c4     9C 01 90 FD | 	jmp	#LR__0289
040c8                 | LR__0237
040c8     5F FA 05 F6 | 	mov	result1, #95
040cc     94 01 90 FD | 	jmp	#LR__0289
040d0                 | LR__0238
040d0     8A FA 05 F6 | 	mov	result1, #138
040d4     8C 01 90 FD | 	jmp	#LR__0289
040d8                 | LR__0239
040d8     4C FA 05 F6 | 	mov	result1, #76
040dc     84 01 90 FD | 	jmp	#LR__0289
040e0                 | LR__0240
040e0     4C FA 05 F6 | 	mov	result1, #76
040e4     7C 01 90 FD | 	jmp	#LR__0289
040e8                 | LR__0241
040e8     52 FA 05 F6 | 	mov	result1, #82
040ec     74 01 90 FD | 	jmp	#LR__0289
040f0                 | LR__0242
040f0     52 FA 05 F6 | 	mov	result1, #82
040f4     6C 01 90 FD | 	jmp	#LR__0289
040f8                 | LR__0243
040f8     61 FA 05 F6 | 	mov	result1, #97
040fc     64 01 90 FD | 	jmp	#LR__0289
04100                 | LR__0244
04100     61 FA 05 F6 | 	mov	result1, #97
04104     5C 01 90 FD | 	jmp	#LR__0289
04108                 | LR__0245
04108     63 FA 05 F6 | 	mov	result1, #99
0410c     54 01 90 FD | 	jmp	#LR__0289
04110                 | LR__0246
04110     41 FA 05 F6 | 	mov	result1, #65
04114     4C 01 90 FD | 	jmp	#LR__0289
04118                 | LR__0247
04118     4B FA 05 F6 | 	mov	result1, #75
0411c     44 01 90 FD | 	jmp	#LR__0289
04120                 | LR__0248
04120     4B FA 05 F6 | 	mov	result1, #75
04124     3C 01 90 FD | 	jmp	#LR__0289
04128                 | LR__0249
04128     5E FA 05 F6 | 	mov	result1, #94
0412c     34 01 90 FD | 	jmp	#LR__0289
04130                 | LR__0250
04130     5E FA 05 F6 | 	mov	result1, #94
04134     2C 01 90 FD | 	jmp	#LR__0289
04138                 | LR__0251
04138     7C FA 05 F6 | 	mov	result1, #124
0413c     24 01 90 FD | 	jmp	#LR__0289
04140                 | LR__0252
04140     7E FA 05 F6 | 	mov	result1, #126
04144     1C 01 90 FD | 	jmp	#LR__0289
04148                 | LR__0253
04148     7D FA 05 F6 | 	mov	result1, #125
0414c     14 01 90 FD | 	jmp	#LR__0289
04150                 | LR__0254
04150     7F FA 05 F6 | 	mov	result1, #127
04154     0C 01 90 FD | 	jmp	#LR__0289
04158                 | LR__0255
04158     80 FA 05 F6 | 	mov	result1, #128
0415c     04 01 90 FD | 	jmp	#LR__0289
04160                 | LR__0256
04160     55 FA 05 F6 | 	mov	result1, #85
04164     FC 00 90 FD | 	jmp	#LR__0289
04168                 | LR__0257
04168     75 FA 05 F6 | 	mov	result1, #117
0416c     F4 00 90 FD | 	jmp	#LR__0289
04170                 | LR__0258
04170     42 FA 05 F6 | 	mov	result1, #66
04174     EC 00 90 FD | 	jmp	#LR__0289
04178                 | LR__0259
04178     42 FA 05 F6 | 	mov	result1, #66
0417c     E4 00 90 FD | 	jmp	#LR__0289
04180                 | LR__0260
04180     81 FA 05 F6 | 	mov	result1, #129
04184     DC 00 90 FD | 	jmp	#LR__0289
04188                 | LR__0261
04188     81 FA 05 F6 | 	mov	result1, #129
0418c     D4 00 90 FD | 	jmp	#LR__0289
04190                 | LR__0262
04190     44 FA 05 F6 | 	mov	result1, #68
04194     CC 00 90 FD | 	jmp	#LR__0289
04198                 | LR__0263
04198     44 FA 05 F6 | 	mov	result1, #68
0419c     C4 00 90 FD | 	jmp	#LR__0289
041a0                 | LR__0264
041a0     88 FA 05 F6 | 	mov	result1, #136
041a4     BC 00 90 FD | 	jmp	#LR__0289
041a8                 | LR__0265
041a8     92 FA 05 F6 | 	mov	result1, #146
041ac     B4 00 90 FD | 	jmp	#LR__0289
041b0                 | LR__0266
041b0     4D FA 05 F6 | 	mov	result1, #77
041b4     AC 00 90 FD | 	jmp	#LR__0289
041b8                 | LR__0267
041b8     51 FA 05 F6 | 	mov	result1, #81
041bc     A4 00 90 FD | 	jmp	#LR__0289
041c0                 | LR__0268
041c0     51 FA 05 F6 | 	mov	result1, #81
041c4     9C 00 90 FD | 	jmp	#LR__0289
041c8                 | LR__0269
041c8     8E FA 05 F6 | 	mov	result1, #142
041cc     94 00 90 FD | 	jmp	#LR__0289
041d0                 | LR__0270
041d0     90 FA 05 F6 | 	mov	result1, #144
041d4     8C 00 90 FD | 	jmp	#LR__0289
041d8                 | LR__0271
041d8     8D FA 05 F6 | 	mov	result1, #141
041dc     84 00 90 FD | 	jmp	#LR__0289
041e0                 | LR__0272
041e0     8C FA 05 F6 | 	mov	result1, #140
041e4     7C 00 90 FD | 	jmp	#LR__0289
041e8                 | LR__0273
041e8     91 FA 05 F6 | 	mov	result1, #145
041ec     74 00 90 FD | 	jmp	#LR__0289
041f0                 | LR__0274
041f0     8B FA 05 F6 | 	mov	result1, #139
041f4     6C 00 90 FD | 	jmp	#LR__0289
041f8                 | LR__0275
041f8     8F FA 05 F6 | 	mov	result1, #143
041fc     64 00 90 FD | 	jmp	#LR__0289
04200                 | LR__0276
04200     75 FA 05 F6 | 	mov	result1, #117
04204     5C 00 90 FD | 	jmp	#LR__0289
04208                 | LR__0277
04208     75 FA 05 F6 | 	mov	result1, #117
0420c     54 00 90 FD | 	jmp	#LR__0289
04210                 | LR__0278
04210     6D FA 05 F6 | 	mov	result1, #109
04214     4C 00 90 FD | 	jmp	#LR__0289
04218                 | LR__0279
04218     6D FA 05 F6 | 	mov	result1, #109
0421c     44 00 90 FD | 	jmp	#LR__0289
04220                 | LR__0280
04220     5B FA 05 F6 | 	mov	result1, #91
04224     3C 00 90 FD | 	jmp	#LR__0289
04228                 | LR__0281
04228     56 FA 05 F6 | 	mov	result1, #86
0422c     34 00 90 FD | 	jmp	#LR__0289
04230                 | LR__0282
04230     70 FA 05 F6 | 	mov	result1, #112
04234     2C 00 90 FD | 	jmp	#LR__0289
04238                 | LR__0283
04238     70 FA 05 F6 | 	mov	result1, #112
0423c     24 00 90 FD | 	jmp	#LR__0289
04240                 | LR__0284
04240     57 FA 05 F6 | 	mov	result1, #87
04244     1C 00 90 FD | 	jmp	#LR__0289
04248                 | LR__0285
04248     57 FA 05 F6 | 	mov	result1, #87
0424c     14 00 90 FD | 	jmp	#LR__0289
04250                 | LR__0286
04250     77 FA 05 F6 | 	mov	result1, #119
04254     0C 00 90 FD | 	jmp	#LR__0289
04258                 | LR__0287
04258     78 FA 05 F6 | 	mov	result1, #120
0425c     04 00 90 FD | 	jmp	#LR__0289
04260                 | LR__0288
04260     00 FA 05 F6 | 	mov	result1, #0
04264                 | LR__0289
04264     A7 F0 03 F6 | 	mov	ptra, fp
04268     B2 00 A0 FD | 	call	#popregs_
0426c                 | _iscommand_ret
0426c     2D 00 64 FD | 	ret
04270                 | 
04270                 | ' 
04270                 | ' function isfunction(s as string) as ubyte
04270                 | _isfunction
04270     01 4A 05 F6 | 	mov	COUNT_, #1
04274     A8 00 A0 FD | 	call	#pushregs_
04278                 | ' 
04278                 | ' select case s
04278     09 1F 02 F6 | 	mov	local01, arg01
0427c     52 01 00 FF 
04280     5E 15 06 F6 | 	mov	arg02, ##@LR__4593
04284     0F 13 02 F6 | 	mov	arg01, local01
04288     04 6A B1 FD | 	call	#__system___string_cmp
0428c     00 FA 0D F2 | 	cmp	result1, #0 wz
04290     E4 01 90 AD |  if_e	jmp	#LR__0290
04294     52 01 00 FF 
04298     63 15 06 F6 | 	mov	arg02, ##@LR__4594
0429c     0F 13 02 F6 | 	mov	arg01, local01
042a0     EC 69 B1 FD | 	call	#__system___string_cmp
042a4     00 FA 0D F2 | 	cmp	result1, #0 wz
042a8     D4 01 90 AD |  if_e	jmp	#LR__0291
042ac     52 01 00 FF 
042b0     68 15 06 F6 | 	mov	arg02, ##@LR__4595
042b4     0F 13 02 F6 | 	mov	arg01, local01
042b8     D4 69 B1 FD | 	call	#__system___string_cmp
042bc     00 FA 0D F2 | 	cmp	result1, #0 wz
042c0     C4 01 90 AD |  if_e	jmp	#LR__0292
042c4     52 01 00 FF 
042c8     6C 15 06 F6 | 	mov	arg02, ##@LR__4596
042cc     0F 13 02 F6 | 	mov	arg01, local01
042d0     BC 69 B1 FD | 	call	#__system___string_cmp
042d4     00 FA 0D F2 | 	cmp	result1, #0 wz
042d8     B4 01 90 AD |  if_e	jmp	#LR__0293
042dc     52 01 00 FF 
042e0     70 15 06 F6 | 	mov	arg02, ##@LR__4597
042e4     0F 13 02 F6 | 	mov	arg01, local01
042e8     A4 69 B1 FD | 	call	#__system___string_cmp
042ec     00 FA 0D F2 | 	cmp	result1, #0 wz
042f0     A4 01 90 AD |  if_e	jmp	#LR__0294
042f4     52 01 00 FF 
042f8     79 15 06 F6 | 	mov	arg02, ##@LR__4598
042fc     0F 13 02 F6 | 	mov	arg01, local01
04300     8C 69 B1 FD | 	call	#__system___string_cmp
04304     00 FA 0D F2 | 	cmp	result1, #0 wz
04308     94 01 90 AD |  if_e	jmp	#LR__0295
0430c     52 01 00 FF 
04310     7D 15 06 F6 | 	mov	arg02, ##@LR__4599
04314     0F 13 02 F6 | 	mov	arg01, local01
04318     74 69 B1 FD | 	call	#__system___string_cmp
0431c     00 FA 0D F2 | 	cmp	result1, #0 wz
04320     84 01 90 AD |  if_e	jmp	#LR__0296
04324     52 01 00 FF 
04328     8B 15 06 F6 | 	mov	arg02, ##@LR__4600
0432c     0F 13 02 F6 | 	mov	arg01, local01
04330     5C 69 B1 FD | 	call	#__system___string_cmp
04334     00 FA 0D F2 | 	cmp	result1, #0 wz
04338     74 01 90 AD |  if_e	jmp	#LR__0297
0433c     52 01 00 FF 
04340     93 15 06 F6 | 	mov	arg02, ##@LR__4601
04344     0F 13 02 F6 | 	mov	arg01, local01
04348     44 69 B1 FD | 	call	#__system___string_cmp
0434c     00 FA 0D F2 | 	cmp	result1, #0 wz
04350     64 01 90 AD |  if_e	jmp	#LR__0298
04354     52 01 00 FF 
04358     9A 15 06 F6 | 	mov	arg02, ##@LR__4602
0435c     0F 13 02 F6 | 	mov	arg01, local01
04360     2C 69 B1 FD | 	call	#__system___string_cmp
04364     00 FA 0D F2 | 	cmp	result1, #0 wz
04368     54 01 90 AD |  if_e	jmp	#LR__0299
0436c     52 01 00 FF 
04370     A1 15 06 F6 | 	mov	arg02, ##@LR__4603
04374     0F 13 02 F6 | 	mov	arg01, local01
04378     14 69 B1 FD | 	call	#__system___string_cmp
0437c     00 FA 0D F2 | 	cmp	result1, #0 wz
04380     44 01 90 AD |  if_e	jmp	#LR__0300
04384     52 01 00 FF 
04388     A8 15 06 F6 | 	mov	arg02, ##@LR__4604
0438c     0F 13 02 F6 | 	mov	arg01, local01
04390     FC 68 B1 FD | 	call	#__system___string_cmp
04394     00 FA 0D F2 | 	cmp	result1, #0 wz
04398     34 01 90 AD |  if_e	jmp	#LR__0301
0439c     52 01 00 FF 
043a0     AF 15 06 F6 | 	mov	arg02, ##@LR__4605
043a4     0F 13 02 F6 | 	mov	arg01, local01
043a8     E4 68 B1 FD | 	call	#__system___string_cmp
043ac     00 FA 0D F2 | 	cmp	result1, #0 wz
043b0     24 01 90 AD |  if_e	jmp	#LR__0302
043b4     52 01 00 FF 
043b8     B7 15 06 F6 | 	mov	arg02, ##@LR__4606
043bc     0F 13 02 F6 | 	mov	arg01, local01
043c0     CC 68 B1 FD | 	call	#__system___string_cmp
043c4     00 FA 0D F2 | 	cmp	result1, #0 wz
043c8     14 01 90 AD |  if_e	jmp	#LR__0303
043cc     52 01 00 FF 
043d0     BD 15 06 F6 | 	mov	arg02, ##@LR__4607
043d4     0F 13 02 F6 | 	mov	arg01, local01
043d8     B4 68 B1 FD | 	call	#__system___string_cmp
043dc     00 FA 0D F2 | 	cmp	result1, #0 wz
043e0     04 01 90 AD |  if_e	jmp	#LR__0304
043e4     52 01 00 FF 
043e8     C3 15 06 F6 | 	mov	arg02, ##@LR__4608
043ec     0F 13 02 F6 | 	mov	arg01, local01
043f0     9C 68 B1 FD | 	call	#__system___string_cmp
043f4     00 FA 0D F2 | 	cmp	result1, #0 wz
043f8     F4 00 90 AD |  if_e	jmp	#LR__0305
043fc     52 01 00 FF 
04400     C7 15 06 F6 | 	mov	arg02, ##@LR__4609
04404     0F 13 02 F6 | 	mov	arg01, local01
04408     84 68 B1 FD | 	call	#__system___string_cmp
0440c     00 FA 0D F2 | 	cmp	result1, #0 wz
04410     E4 00 90 AD |  if_e	jmp	#LR__0306
04414     52 01 00 FF 
04418     CB 15 06 F6 | 	mov	arg02, ##@LR__4610
0441c     0F 13 02 F6 | 	mov	arg01, local01
04420     6C 68 B1 FD | 	call	#__system___string_cmp
04424     00 FA 0D F2 | 	cmp	result1, #0 wz
04428     D4 00 90 AD |  if_e	jmp	#LR__0307
0442c     52 01 00 FF 
04430     CF 15 06 F6 | 	mov	arg02, ##@LR__4611
04434     0F 13 02 F6 | 	mov	arg01, local01
04438     54 68 B1 FD | 	call	#__system___string_cmp
0443c     00 FA 0D F2 | 	cmp	result1, #0 wz
04440     C4 00 90 AD |  if_e	jmp	#LR__0308
04444     52 01 00 FF 
04448     D5 15 06 F6 | 	mov	arg02, ##@LR__4612
0444c     0F 13 02 F6 | 	mov	arg01, local01
04450     3C 68 B1 FD | 	call	#__system___string_cmp
04454     00 FA 0D F2 | 	cmp	result1, #0 wz
04458     B4 00 90 AD |  if_e	jmp	#LR__0309
0445c     52 01 00 FF 
04460     DB 15 06 F6 | 	mov	arg02, ##@LR__4613
04464     0F 13 02 F6 | 	mov	arg01, local01
04468     24 68 B1 FD | 	call	#__system___string_cmp
0446c     00 FA 0D F2 | 	cmp	result1, #0 wz
04470     A4 00 90 AD |  if_e	jmp	#LR__0310
04474     A8 00 90 FD | 	jmp	#LR__0311
04478                 | LR__0290
04478     85 FA 05 F6 | 	mov	result1, #133
0447c     A4 00 90 FD | 	jmp	#LR__0312
04480                 | LR__0291
04480     84 FA 05 F6 | 	mov	result1, #132
04484     9C 00 90 FD | 	jmp	#LR__0312
04488                 | LR__0292
04488     86 FA 05 F6 | 	mov	result1, #134
0448c     94 00 90 FD | 	jmp	#LR__0312
04490                 | LR__0293
04490     82 FA 05 F6 | 	mov	result1, #130
04494     8C 00 90 FD | 	jmp	#LR__0312
04498                 | LR__0294
04498     6F FA 05 F6 | 	mov	result1, #111
0449c     84 00 90 FD | 	jmp	#LR__0312
044a0                 | LR__0295
044a0     6F FA 05 F6 | 	mov	result1, #111
044a4     7C 00 90 FD | 	jmp	#LR__0312
044a8                 | LR__0296
044a8     93 FA 05 F6 | 	mov	result1, #147
044ac     74 00 90 FD | 	jmp	#LR__0312
044b0                 | LR__0297
044b0     62 FA 05 F6 | 	mov	result1, #98
044b4     6C 00 90 FD | 	jmp	#LR__0312
044b8                 | LR__0298
044b8     66 FA 05 F6 | 	mov	result1, #102
044bc     64 00 90 FD | 	jmp	#LR__0312
044c0                 | LR__0299
044c0     67 FA 05 F6 | 	mov	result1, #103
044c4     5C 00 90 FD | 	jmp	#LR__0312
044c8                 | LR__0300
044c8     64 FA 05 F6 | 	mov	result1, #100
044cc     54 00 90 FD | 	jmp	#LR__0312
044d0                 | LR__0301
044d0     65 FA 05 F6 | 	mov	result1, #101
044d4     4C 00 90 FD | 	jmp	#LR__0312
044d8                 | LR__0302
044d8     7B FA 05 F6 | 	mov	result1, #123
044dc     44 00 90 FD | 	jmp	#LR__0312
044e0                 | LR__0303
044e0     76 FA 05 F6 | 	mov	result1, #118
044e4     3C 00 90 FD | 	jmp	#LR__0312
044e8                 | LR__0304
044e8     7A FA 05 F6 | 	mov	result1, #122
044ec     34 00 90 FD | 	jmp	#LR__0312
044f0                 | LR__0305
044f0     54 FA 05 F6 | 	mov	result1, #84
044f4     2C 00 90 FD | 	jmp	#LR__0312
044f8                 | LR__0306
044f8     6B FA 05 F6 | 	mov	result1, #107
044fc     24 00 90 FD | 	jmp	#LR__0312
04500                 | LR__0307
04500     87 FA 05 F6 | 	mov	result1, #135
04504     1C 00 90 FD | 	jmp	#LR__0312
04508                 | LR__0308
04508     6A FA 05 F6 | 	mov	result1, #106
0450c     14 00 90 FD | 	jmp	#LR__0312
04510                 | LR__0309
04510     6E FA 05 F6 | 	mov	result1, #110
04514     0C 00 90 FD | 	jmp	#LR__0312
04518                 | LR__0310
04518     83 FA 05 F6 | 	mov	result1, #131
0451c     04 00 90 FD | 	jmp	#LR__0312
04520                 | LR__0311
04520     00 FA 05 F6 | 	mov	result1, #0
04524                 | LR__0312
04524     A7 F0 03 F6 | 	mov	ptra, fp
04528     B2 00 A0 FD | 	call	#popregs_
0452c                 | _isfunction_ret
0452c     2D 00 64 FD | 	ret
04530                 | 
04530                 | ' 
04530                 | ' function isname(s as string) as boolean
04530                 | _isname
04530     0D 4A 05 F6 | 	mov	COUNT_, #13
04534     A8 00 A0 FD | 	call	#pushregs_
04538     09 1F 02 F6 | 	mov	local01, arg01
0453c     09 21 02 F6 | 	mov	local02, arg01
04540     97 06 48 FB | 	callpa	#(@LR__0321-@LR__0320)>>2,fcache_load_ptr_
04544                 | LR__0320
04544     10 FB C9 FA | 	rdbyte	result1, local02 wz
04548     01 20 06 51 |  if_ne	add	local02, #1
0454c     F4 FF 9F 5D |  if_ne	jmp	#LR__0320
04550                 | LR__0321
04550     09 21 82 F1 | 	sub	local02, arg01
04554     10 FB 01 F6 | 	mov	result1, local02
04558     FD 22 0A F6 | 	mov	local03, result1 wz
0455c     00 FA 05 A6 |  if_e	mov	result1, #0
04560     34 02 90 AD |  if_e	jmp	#LR__0333
04564     0F 13 02 F6 | 	mov	arg01, local01
04568     01 14 06 F6 | 	mov	arg02, #1
0456c     01 16 06 F6 | 	mov	arg03, #1
04570     54 88 B1 FD | 	call	#__system__Mid_S
04574     FD 24 02 F6 | 	mov	local04, result1
04578                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
04578     52 01 00 FF 
0457c     DF 15 06 F6 | 	mov	arg02, ##@LR__4614
04580     12 13 02 F6 | 	mov	arg01, local04
04584     08 67 B1 FD | 	call	#__system___string_cmp
04588     00 FA 55 F2 | 	cmps	result1, #0 wc
0458c     18 00 90 CD |  if_b	jmp	#LR__0322
04590     52 01 00 FF 
04594     E1 15 06 F6 | 	mov	arg02, ##@LR__4615
04598     12 13 02 F6 | 	mov	arg01, local04
0459c     F0 66 B1 FD | 	call	#__system___string_cmp
045a0     01 FA 55 F2 | 	cmps	result1, #1 wc
045a4     1C 00 90 CD |  if_b	jmp	#LR__0323
045a8                 | LR__0322
045a8     52 01 00 FF 
045ac     E3 15 06 F6 | 	mov	arg02, ##@LR__4616
045b0     12 13 02 F6 | 	mov	arg01, local04
045b4     D8 66 B1 FD | 	call	#__system___string_cmp
045b8     00 FA 0D F2 | 	cmp	result1, #0 wz
045bc     00 FA 05 56 |  if_ne	mov	result1, #0
045c0     D4 01 90 5D |  if_ne	jmp	#LR__0333
045c4                 | LR__0323
045c4                 | ' if l>2 then 
045c4     03 22 56 F2 | 	cmps	local03, #3 wc
045c8     C8 01 90 CD |  if_b	jmp	#LR__0332
045cc                 | '   for i=2 to l
045cc     02 26 06 F6 | 	mov	local05, #2
045d0     11 29 02 F6 | 	mov	local06, local03
045d4     01 28 06 F1 | 	add	local06, #1
045d8                 | LR__0324
045d8     14 27 52 F2 | 	cmps	local05, local06 wc
045dc     B4 01 90 3D |  if_ae	jmp	#LR__0331
045e0     0F 13 02 F6 | 	mov	arg01, local01
045e4     13 15 02 F6 | 	mov	arg02, local05
045e8     01 16 06 F6 | 	mov	arg03, #1
045ec     D8 87 B1 FD | 	call	#__system__Mid_S
045f0     FD 24 02 F6 | 	mov	local04, result1
045f4                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false
045f4     11 27 52 F2 | 	cmps	local05, local03 wc
045f8     9C 00 90 3D |  if_ae	jmp	#LR__0327
045fc     52 01 00 FF 
04600     E5 15 06 F6 | 	mov	arg02, ##@LR__4617
04604     12 13 02 F6 | 	mov	arg01, local04
04608     84 66 B1 FD | 	call	#__system___string_cmp
0460c     00 FA 55 F2 | 	cmps	result1, #0 wc
04610     18 00 90 CD |  if_b	jmp	#LR__0325
04614     52 01 00 FF 
04618     E7 15 06 F6 | 	mov	arg02, ##@LR__4618
0461c     12 13 02 F6 | 	mov	arg01, local04
04620     6C 66 B1 FD | 	call	#__system___string_cmp
04624     01 FA 55 F2 | 	cmps	result1, #1 wc
04628     6C 00 90 CD |  if_b	jmp	#LR__0327
0462c                 | LR__0325
0462c     52 01 00 FF 
04630     E9 15 06 F6 | 	mov	arg02, ##@LR__4619
04634     12 13 02 F6 | 	mov	arg01, local04
04638     54 66 B1 FD | 	call	#__system___string_cmp
0463c     00 FA 55 F2 | 	cmps	result1, #0 wc
04640     18 00 90 CD |  if_b	jmp	#LR__0326
04644     52 01 00 FF 
04648     EB 15 06 F6 | 	mov	arg02, ##@LR__4620
0464c     12 13 02 F6 | 	mov	arg01, local04
04650     3C 66 B1 FD | 	call	#__system___string_cmp
04654     01 FA 55 F2 | 	cmps	result1, #1 wc
04658     3C 00 90 CD |  if_b	jmp	#LR__0327
0465c                 | LR__0326
0465c     52 01 00 FF 
04660     ED 2B 06 F6 | 	mov	local07, ##@LR__4621
04664     12 13 02 F6 | 	mov	arg01, local04
04668     15 15 02 F6 | 	mov	arg02, local07
0466c     20 66 B1 FD | 	call	#__system___string_cmp
04670     00 FA 0D F2 | 	cmp	result1, #0 wz
04674     20 00 90 AD |  if_e	jmp	#LR__0327
04678     52 01 00 FF 
0467c     EF 2D 06 F6 | 	mov	local08, ##@LR__4622
04680     12 13 02 F6 | 	mov	arg01, local04
04684     16 15 02 F6 | 	mov	arg02, local08
04688     04 66 B1 FD | 	call	#__system___string_cmp
0468c     FD 2E 0A F6 | 	mov	local09, result1 wz
04690     00 FA 05 56 |  if_ne	mov	result1, #0
04694     00 01 90 5D |  if_ne	jmp	#LR__0333
04698                 | LR__0327
04698                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
04698     11 27 0A F2 | 	cmp	local05, local03 wz
0469c     EC 00 90 5D |  if_ne	jmp	#LR__0330
046a0     52 01 00 FF 
046a4     F1 31 06 F6 | 	mov	local10, ##@LR__4623
046a8     12 13 02 F6 | 	mov	arg01, local04
046ac     18 15 02 F6 | 	mov	arg02, local10
046b0     DC 65 B1 FD | 	call	#__system___string_cmp
046b4     FD 32 02 F6 | 	mov	local11, result1
046b8     00 32 56 F2 | 	cmps	local11, #0 wc
046bc     1C 00 90 CD |  if_b	jmp	#LR__0328
046c0     52 01 00 FF 
046c4     F3 15 06 F6 | 	mov	arg02, ##@LR__4624
046c8     12 13 02 F6 | 	mov	arg01, local04
046cc     C0 65 B1 FD | 	call	#__system___string_cmp
046d0     FD 30 02 F6 | 	mov	local10, result1
046d4     01 30 56 F2 | 	cmps	local10, #1 wc
046d8     B0 00 90 CD |  if_b	jmp	#LR__0330
046dc                 | LR__0328
046dc     52 01 00 FF 
046e0     F5 15 06 F6 | 	mov	arg02, ##@LR__4625
046e4     12 13 02 F6 | 	mov	arg01, local04
046e8     A4 65 B1 FD | 	call	#__system___string_cmp
046ec     00 FA 55 F2 | 	cmps	result1, #0 wc
046f0     1C 00 90 CD |  if_b	jmp	#LR__0329
046f4     52 01 00 FF 
046f8     F7 2F 06 F6 | 	mov	local09, ##@LR__4626
046fc     12 13 02 F6 | 	mov	arg01, local04
04700     17 15 02 F6 | 	mov	arg02, local09
04704     88 65 B1 FD | 	call	#__system___string_cmp
04708     01 FA 55 F2 | 	cmps	result1, #1 wc
0470c     7C 00 90 CD |  if_b	jmp	#LR__0330
04710                 | LR__0329
04710     52 01 00 FF 
04714     F9 2F 06 F6 | 	mov	local09, ##@LR__4627
04718     12 13 02 F6 | 	mov	arg01, local04
0471c     17 15 02 F6 | 	mov	arg02, local09
04720     6C 65 B1 FD | 	call	#__system___string_cmp
04724     00 FA 4D F2 | 	cmps	result1, #0 wz
04728     60 00 90 AD |  if_e	jmp	#LR__0330
0472c     52 01 00 FF 
04730     FB 2D 06 F6 | 	mov	local08, ##@LR__4628
04734     12 13 02 F6 | 	mov	arg01, local04
04738     16 15 02 F6 | 	mov	arg02, local08
0473c     50 65 B1 FD | 	call	#__system___string_cmp
04740     FD 2E 0A F6 | 	mov	local09, result1 wz
04744     44 00 90 AD |  if_e	jmp	#LR__0330
04748     52 01 00 FF 
0474c     FD 35 06 F6 | 	mov	local12, ##@LR__4629
04750     1A 2D 02 F6 | 	mov	local08, local12
04754     12 13 02 F6 | 	mov	arg01, local04
04758     16 15 02 F6 | 	mov	arg02, local08
0475c     30 65 B1 FD | 	call	#__system___string_cmp
04760     FD 2A 0A F6 | 	mov	local07, result1 wz
04764     24 00 90 AD |  if_e	jmp	#LR__0330
04768     52 01 00 FF 
0476c     FF 37 06 F6 | 	mov	local13, ##@LR__4630
04770     1B 35 02 F6 | 	mov	local12, local13
04774     12 13 02 F6 | 	mov	arg01, local04
04778     1A 15 02 F6 | 	mov	arg02, local12
0477c     10 65 B1 FD | 	call	#__system___string_cmp
04780     FD 2C 0A F6 | 	mov	local08, result1 wz
04784     00 FA 05 56 |  if_ne	mov	result1, #0
04788     0C 00 90 5D |  if_ne	jmp	#LR__0333
0478c                 | LR__0330
0478c     01 26 06 F1 | 	add	local05, #1
04790     44 FE 9F FD | 	jmp	#LR__0324
04794                 | LR__0331
04794                 | LR__0332
04794                 | ' return true
04794     01 FA 65 F6 | 	neg	result1, #1
04798                 | LR__0333
04798     A7 F0 03 F6 | 	mov	ptra, fp
0479c     B2 00 A0 FD | 	call	#popregs_
047a0                 | _isname_ret
047a0     2D 00 64 FD | 	ret
047a4                 | 
047a4                 | ' 
047a4                 | ' function isnum(s as string) as boolean
047a4                 | _isnum
047a4     0D 4A 05 F6 | 	mov	COUNT_, #13
047a8     A8 00 A0 FD | 	call	#pushregs_
047ac     09 1F 02 F6 | 	mov	local01, arg01
047b0     00 20 06 F6 | 	mov	local02, #0
047b4     00 22 06 F6 | 	mov	local03, #0
047b8     0F 13 02 F6 | 	mov	arg01, local01
047bc     09 25 02 F6 | 	mov	local04, arg01
047c0     97 06 48 FB | 	callpa	#(@LR__0341-@LR__0340)>>2,fcache_load_ptr_
047c4                 | LR__0340
047c4     12 FB C9 FA | 	rdbyte	result1, local04 wz
047c8     01 24 06 51 |  if_ne	add	local04, #1
047cc     F4 FF 9F 5D |  if_ne	jmp	#LR__0340
047d0                 | LR__0341
047d0     09 25 82 F1 | 	sub	local04, arg01
047d4     12 FB 01 F6 | 	mov	result1, local04
047d8     FD 26 0A F6 | 	mov	local05, result1 wz
047dc     00 FA 05 A6 |  if_e	mov	result1, #0
047e0     8C 02 90 AD |  if_e	jmp	#LR__0352
047e4     0F 13 02 F6 | 	mov	arg01, local01
047e8     01 14 06 F6 | 	mov	arg02, #1
047ec     01 16 06 F6 | 	mov	arg03, #1
047f0     D4 85 B1 FD | 	call	#__system__Mid_S
047f4     FD 28 02 F6 | 	mov	local06, result1
047f8                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
047f8     53 01 00 FF 
047fc     01 14 06 F6 | 	mov	arg02, ##@LR__4631
04800     14 13 02 F6 | 	mov	arg01, local06
04804     88 64 B1 FD | 	call	#__system___string_cmp
04808     00 FA 55 F2 | 	cmps	result1, #0 wc
0480c     18 00 90 CD |  if_b	jmp	#LR__0342
04810     53 01 00 FF 
04814     03 14 06 F6 | 	mov	arg02, ##@LR__4632
04818     14 13 02 F6 | 	mov	arg01, local06
0481c     70 64 B1 FD | 	call	#__system___string_cmp
04820     01 FA 55 F2 | 	cmps	result1, #1 wc
04824     78 00 90 CD |  if_b	jmp	#LR__0343
04828                 | LR__0342
04828     53 01 00 FF 
0482c     05 14 06 F6 | 	mov	arg02, ##@LR__4633
04830     14 13 02 F6 | 	mov	arg01, local06
04834     58 64 B1 FD | 	call	#__system___string_cmp
04838     00 FA 0D F2 | 	cmp	result1, #0 wz
0483c     60 00 90 AD |  if_e	jmp	#LR__0343
04840     53 01 00 FF 
04844     07 2A 06 F6 | 	mov	local07, ##@LR__4634
04848     14 13 02 F6 | 	mov	arg01, local06
0484c     15 15 02 F6 | 	mov	arg02, local07
04850     3C 64 B1 FD | 	call	#__system___string_cmp
04854     00 FA 0D F2 | 	cmp	result1, #0 wz
04858     44 00 90 AD |  if_e	jmp	#LR__0343
0485c     53 01 00 FF 
04860     09 2C 06 F6 | 	mov	local08, ##@LR__4635
04864     16 2B 02 F6 | 	mov	local07, local08
04868     14 13 02 F6 | 	mov	arg01, local06
0486c     15 15 02 F6 | 	mov	arg02, local07
04870     1C 64 B1 FD | 	call	#__system___string_cmp
04874     00 FA 4D F2 | 	cmps	result1, #0 wz
04878     24 00 90 AD |  if_e	jmp	#LR__0343
0487c     53 01 00 FF 
04880     0B 2E 06 F6 | 	mov	local09, ##@LR__4636
04884     17 2D 02 F6 | 	mov	local08, local09
04888     14 13 02 F6 | 	mov	arg01, local06
0488c     16 15 02 F6 | 	mov	arg02, local08
04890     FC 63 B1 FD | 	call	#__system___string_cmp
04894     FD 2A 0A F6 | 	mov	local07, result1 wz
04898     00 FA 05 56 |  if_ne	mov	result1, #0
0489c     D0 01 90 5D |  if_ne	jmp	#LR__0352
048a0                 | LR__0343
048a0                 | ' if m$="." then ds=1
048a0     53 01 00 FF 
048a4     0D 14 06 F6 | 	mov	arg02, ##@LR__4637
048a8     14 13 02 F6 | 	mov	arg01, local06
048ac     E0 63 B1 FD | 	call	#__system___string_cmp
048b0     00 FA 0D F2 | 	cmp	result1, #0 wz
048b4     01 20 06 A6 |  if_e	mov	local02, #1
048b8                 | ' if l>1 then 
048b8     02 26 56 F2 | 	cmps	local05, #2 wc
048bc     AC 01 90 CD |  if_b	jmp	#LR__0351
048c0                 | '   for i=2 to l
048c0     02 30 06 F6 | 	mov	local10, #2
048c4     13 33 02 F6 | 	mov	local11, local05
048c8     01 32 06 F1 | 	add	local11, #1
048cc                 | LR__0344
048cc     19 31 52 F2 | 	cmps	local10, local11 wc
048d0     98 01 90 3D |  if_ae	jmp	#LR__0350
048d4     0F 13 02 F6 | 	mov	arg01, local01
048d8     18 15 02 F6 | 	mov	arg02, local10
048dc     01 16 06 F6 | 	mov	arg03, #1
048e0     E4 84 B1 FD | 	call	#__system__Mid_S
048e4     FD 28 02 F6 | 	mov	local06, result1
048e8                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." andalso m$<>"E" andalso m$<>"e" andalso m$<>"-" then return false
048e8     53 01 00 FF 
048ec     0F 14 06 F6 | 	mov	arg02, ##@LR__4638
048f0     14 13 02 F6 | 	mov	arg01, local06
048f4     98 63 B1 FD | 	call	#__system___string_cmp
048f8     00 FA 55 F2 | 	cmps	result1, #0 wc
048fc     18 00 90 CD |  if_b	jmp	#LR__0345
04900     53 01 00 FF 
04904     11 14 06 F6 | 	mov	arg02, ##@LR__4639
04908     14 13 02 F6 | 	mov	arg01, local06
0490c     80 63 B1 FD | 	call	#__system___string_cmp
04910     01 FA 55 F2 | 	cmps	result1, #1 wc
04914     98 00 90 CD |  if_b	jmp	#LR__0346
04918                 | LR__0345
04918     53 01 00 FF 
0491c     13 14 06 F6 | 	mov	arg02, ##@LR__4640
04920     14 13 02 F6 | 	mov	arg01, local06
04924     68 63 B1 FD | 	call	#__system___string_cmp
04928     00 FA 0D F2 | 	cmp	result1, #0 wz
0492c     80 00 90 AD |  if_e	jmp	#LR__0346
04930     53 01 00 FF 
04934     15 2A 06 F6 | 	mov	local07, ##@LR__4641
04938     14 13 02 F6 | 	mov	arg01, local06
0493c     15 15 02 F6 | 	mov	arg02, local07
04940     4C 63 B1 FD | 	call	#__system___string_cmp
04944     00 FA 4D F2 | 	cmps	result1, #0 wz
04948     64 00 90 AD |  if_e	jmp	#LR__0346
0494c     53 01 00 FF 
04950     17 2C 06 F6 | 	mov	local08, ##@LR__4642
04954     16 2B 02 F6 | 	mov	local07, local08
04958     14 13 02 F6 | 	mov	arg01, local06
0495c     15 15 02 F6 | 	mov	arg02, local07
04960     2C 63 B1 FD | 	call	#__system___string_cmp
04964     FD 34 0A F6 | 	mov	local12, result1 wz
04968     44 00 90 AD |  if_e	jmp	#LR__0346
0496c     53 01 00 FF 
04970     19 2E 06 F6 | 	mov	local09, ##@LR__4643
04974     17 2D 02 F6 | 	mov	local08, local09
04978     14 13 02 F6 | 	mov	arg01, local06
0497c     16 15 02 F6 | 	mov	arg02, local08
04980     0C 63 B1 FD | 	call	#__system___string_cmp
04984     FD 2A 0A F6 | 	mov	local07, result1 wz
04988     24 00 90 AD |  if_e	jmp	#LR__0346
0498c     53 01 00 FF 
04990     1B 36 06 F6 | 	mov	local13, ##@LR__4644
04994     1B 2F 02 F6 | 	mov	local09, local13
04998     14 13 02 F6 | 	mov	arg01, local06
0499c     17 15 02 F6 | 	mov	arg02, local09
049a0     EC 62 B1 FD | 	call	#__system___string_cmp
049a4     FD 2C 0A F6 | 	mov	local08, result1 wz
049a8     00 FA 05 56 |  if_ne	mov	result1, #0
049ac     C0 00 90 5D |  if_ne	jmp	#LR__0352
049b0                 | LR__0346
049b0                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
049b0     53 01 00 FF 
049b4     1D 14 06 F6 | 	mov	arg02, ##@LR__4645
049b8     14 13 02 F6 | 	mov	arg01, local06
049bc     D0 62 B1 FD | 	call	#__system___string_cmp
049c0     00 FA 0D F2 | 	cmp	result1, #0 wz
049c4     38 00 90 5D |  if_ne	jmp	#LR__0347
049c8     18 15 02 F6 | 	mov	arg02, local10
049cc     01 14 86 F1 | 	sub	arg02, #1
049d0     0F 13 02 F6 | 	mov	arg01, local01
049d4     01 16 06 F6 | 	mov	arg03, #1
049d8     EC 83 B1 FD | 	call	#__system__Mid_S
049dc     FD 12 02 F6 | 	mov	arg01, result1
049e0     80 85 B1 FD | 	call	#__system__LCase_S
049e4     FD 12 02 F6 | 	mov	arg01, result1
049e8     53 01 00 FF 
049ec     1F 14 06 F6 | 	mov	arg02, ##@LR__4646
049f0     9C 62 B1 FD | 	call	#__system___string_cmp
049f4     00 FA 0D F2 | 	cmp	result1, #0 wz
049f8     00 FA 05 56 |  if_ne	mov	result1, #0
049fc     70 00 90 5D |  if_ne	jmp	#LR__0352
04a00                 | LR__0347
04a00                 | '     if m$="." then ds+=1: if ds>1 then return false
04a00     53 01 00 FF 
04a04     21 14 06 F6 | 	mov	arg02, ##@LR__4647
04a08     14 13 02 F6 | 	mov	arg01, local06
04a0c     80 62 B1 FD | 	call	#__system___string_cmp
04a10     00 FA 0D F2 | 	cmp	result1, #0 wz
04a14     01 20 06 A1 |  if_e	add	local02, #1
04a18     02 20 56 A2 |  if_e	cmps	local02, #2 wc
04a1c     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
04a20     4C 00 90 2D |  if_nc_and_z	jmp	#LR__0352
04a24                 | '     if m$="E" orelse m$="e" then es+=1: if es>1 then return false
04a24     53 01 00 FF 
04a28     23 14 06 F6 | 	mov	arg02, ##@LR__4648
04a2c     14 13 02 F6 | 	mov	arg01, local06
04a30     5C 62 B1 FD | 	call	#__system___string_cmp
04a34     00 FA 4D F2 | 	cmps	result1, #0 wz
04a38     18 00 90 AD |  if_e	jmp	#LR__0348
04a3c     53 01 00 FF 
04a40     25 14 06 F6 | 	mov	arg02, ##@LR__4649
04a44     14 13 02 F6 | 	mov	arg01, local06
04a48     44 62 B1 FD | 	call	#__system___string_cmp
04a4c     00 FA 4D F2 | 	cmps	result1, #0 wz
04a50     10 00 90 5D |  if_ne	jmp	#LR__0349
04a54                 | LR__0348
04a54     01 22 06 F1 | 	add	local03, #1
04a58     02 22 56 F2 | 	cmps	local03, #2 wc
04a5c     00 FA 05 36 |  if_ae	mov	result1, #0
04a60     0C 00 90 3D |  if_ae	jmp	#LR__0352
04a64                 | LR__0349
04a64     01 30 06 F1 | 	add	local10, #1
04a68     60 FE 9F FD | 	jmp	#LR__0344
04a6c                 | LR__0350
04a6c                 | LR__0351
04a6c                 | ' return true
04a6c     01 FA 65 F6 | 	neg	result1, #1
04a70                 | LR__0352
04a70     A7 F0 03 F6 | 	mov	ptra, fp
04a74     B2 00 A0 FD | 	call	#popregs_
04a78                 | _isnum_ret
04a78     2D 00 64 FD | 	ret
04a7c                 | 
04a7c                 | '   
04a7c                 | ' function isint(s as string) as boolean
04a7c                 | _isint
04a7c     05 4A 05 F6 | 	mov	COUNT_, #5
04a80     A8 00 A0 FD | 	call	#pushregs_
04a84     09 1F 02 F6 | 	mov	local01, arg01
04a88     09 21 02 F6 | 	mov	local02, arg01
04a8c     97 06 48 FB | 	callpa	#(@LR__0361-@LR__0360)>>2,fcache_load_ptr_
04a90                 | LR__0360
04a90     10 FB C9 FA | 	rdbyte	result1, local02 wz
04a94     01 20 06 51 |  if_ne	add	local02, #1
04a98     F4 FF 9F 5D |  if_ne	jmp	#LR__0360
04a9c                 | LR__0361
04a9c     09 21 82 F1 | 	sub	local02, arg01
04aa0     10 FB 01 F6 | 	mov	result1, local02
04aa4     FD 20 0A F6 | 	mov	local02, result1 wz
04aa8     00 FA 05 A6 |  if_e	mov	result1, #0
04aac     18 01 90 AD |  if_e	jmp	#LR__0369
04ab0     0F 13 02 F6 | 	mov	arg01, local01
04ab4     01 14 06 F6 | 	mov	arg02, #1
04ab8     01 16 06 F6 | 	mov	arg03, #1
04abc     08 83 B1 FD | 	call	#__system__Mid_S
04ac0     FD 22 02 F6 | 	mov	local03, result1
04ac4                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
04ac4     53 01 00 FF 
04ac8     27 14 06 F6 | 	mov	arg02, ##@LR__4650
04acc     11 13 02 F6 | 	mov	arg01, local03
04ad0     BC 61 B1 FD | 	call	#__system___string_cmp
04ad4     00 FA 55 F2 | 	cmps	result1, #0 wc
04ad8     18 00 90 CD |  if_b	jmp	#LR__0362
04adc     53 01 00 FF 
04ae0     29 14 06 F6 | 	mov	arg02, ##@LR__4651
04ae4     11 13 02 F6 | 	mov	arg01, local03
04ae8     A4 61 B1 FD | 	call	#__system___string_cmp
04aec     01 FA 55 F2 | 	cmps	result1, #1 wc
04af0     4C 00 90 CD |  if_b	jmp	#LR__0363
04af4                 | LR__0362
04af4     53 01 00 FF 
04af8     2B 14 06 F6 | 	mov	arg02, ##@LR__4652
04afc     11 13 02 F6 | 	mov	arg01, local03
04b00     8C 61 B1 FD | 	call	#__system___string_cmp
04b04     00 FA 0D F2 | 	cmp	result1, #0 wz
04b08     34 00 90 AD |  if_e	jmp	#LR__0363
04b0c     53 01 00 FF 
04b10     2D 14 06 F6 | 	mov	arg02, ##@LR__4653
04b14     11 13 02 F6 | 	mov	arg01, local03
04b18     74 61 B1 FD | 	call	#__system___string_cmp
04b1c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b20     1C 00 90 AD |  if_e	jmp	#LR__0363
04b24     53 01 00 FF 
04b28     2F 14 06 F6 | 	mov	arg02, ##@LR__4654
04b2c     11 13 02 F6 | 	mov	arg01, local03
04b30     5C 61 B1 FD | 	call	#__system___string_cmp
04b34     00 FA 0D F2 | 	cmp	result1, #0 wz
04b38     00 FA 05 56 |  if_ne	mov	result1, #0
04b3c     88 00 90 5D |  if_ne	jmp	#LR__0369
04b40                 | LR__0363
04b40                 | ' 
04b40                 | ' if l>1 then 
04b40     02 20 56 F2 | 	cmps	local02, #2 wc
04b44     7C 00 90 CD |  if_b	jmp	#LR__0368
04b48                 | '   for i=2 to l
04b48     02 24 06 F6 | 	mov	local04, #2
04b4c     10 27 02 F6 | 	mov	local05, local02
04b50     01 26 06 F1 | 	add	local05, #1
04b54                 | LR__0364
04b54     13 25 52 F2 | 	cmps	local04, local05 wc
04b58     68 00 90 3D |  if_ae	jmp	#LR__0367
04b5c     0F 13 02 F6 | 	mov	arg01, local01
04b60     12 15 02 F6 | 	mov	arg02, local04
04b64     01 16 06 F6 | 	mov	arg03, #1
04b68     5C 82 B1 FD | 	call	#__system__Mid_S
04b6c     FD 22 02 F6 | 	mov	local03, result1
04b70                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
04b70     53 01 00 FF 
04b74     31 14 06 F6 | 	mov	arg02, ##@LR__4655
04b78     11 13 02 F6 | 	mov	arg01, local03
04b7c     10 61 B1 FD | 	call	#__system___string_cmp
04b80     00 FA 55 F2 | 	cmps	result1, #0 wc
04b84     18 00 90 CD |  if_b	jmp	#LR__0365
04b88     53 01 00 FF 
04b8c     33 14 06 F6 | 	mov	arg02, ##@LR__4656
04b90     11 13 02 F6 | 	mov	arg01, local03
04b94     F8 60 B1 FD | 	call	#__system___string_cmp
04b98     01 FA 55 F2 | 	cmps	result1, #1 wc
04b9c     1C 00 90 CD |  if_b	jmp	#LR__0366
04ba0                 | LR__0365
04ba0     53 01 00 FF 
04ba4     35 14 06 F6 | 	mov	arg02, ##@LR__4657
04ba8     11 13 02 F6 | 	mov	arg01, local03
04bac     E0 60 B1 FD | 	call	#__system___string_cmp
04bb0     00 FA 0D F2 | 	cmp	result1, #0 wz
04bb4     00 FA 05 56 |  if_ne	mov	result1, #0
04bb8     0C 00 90 5D |  if_ne	jmp	#LR__0369
04bbc                 | LR__0366
04bbc     01 24 06 F1 | 	add	local04, #1
04bc0     90 FF 9F FD | 	jmp	#LR__0364
04bc4                 | LR__0367
04bc4                 | LR__0368
04bc4                 | ' return true
04bc4     01 FA 65 F6 | 	neg	result1, #1
04bc8                 | LR__0369
04bc8     A7 F0 03 F6 | 	mov	ptra, fp
04bcc     B2 00 A0 FD | 	call	#popregs_
04bd0                 | _isint_ret
04bd0     2D 00 64 FD | 	ret
04bd4                 | 
04bd4                 | ' 
04bd4                 | ' function isdec(s as string) as boolean
04bd4                 | _isdec
04bd4     05 4A 05 F6 | 	mov	COUNT_, #5
04bd8     A8 00 A0 FD | 	call	#pushregs_
04bdc     09 1F 02 F6 | 	mov	local01, arg01
04be0     09 21 02 F6 | 	mov	local02, arg01
04be4     97 06 48 FB | 	callpa	#(@LR__0371-@LR__0370)>>2,fcache_load_ptr_
04be8                 | LR__0370
04be8     10 FB C9 FA | 	rdbyte	result1, local02 wz
04bec     01 20 06 51 |  if_ne	add	local02, #1
04bf0     F4 FF 9F 5D |  if_ne	jmp	#LR__0370
04bf4                 | LR__0371
04bf4     09 21 82 F1 | 	sub	local02, arg01
04bf8     10 FB 01 F6 | 	mov	result1, local02
04bfc     FD 20 0A F6 | 	mov	local02, result1 wz
04c00     00 FA 05 A6 |  if_e	mov	result1, #0
04c04     80 00 90 AD |  if_e	jmp	#LR__0376
04c08                 | ' for i=1 to l
04c08     01 22 06 F6 | 	mov	local03, #1
04c0c     10 25 02 F6 | 	mov	local04, local02
04c10     01 24 06 F1 | 	add	local04, #1
04c14                 | LR__0372
04c14     12 23 52 F2 | 	cmps	local03, local04 wc
04c18     68 00 90 3D |  if_ae	jmp	#LR__0375
04c1c     0F 13 02 F6 | 	mov	arg01, local01
04c20     11 15 02 F6 | 	mov	arg02, local03
04c24     01 16 06 F6 | 	mov	arg03, #1
04c28     9C 81 B1 FD | 	call	#__system__Mid_S
04c2c     FD 26 02 F6 | 	mov	local05, result1
04c30                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
04c30     53 01 00 FF 
04c34     37 14 06 F6 | 	mov	arg02, ##@LR__4658
04c38     13 13 02 F6 | 	mov	arg01, local05
04c3c     50 60 B1 FD | 	call	#__system___string_cmp
04c40     00 FA 55 F2 | 	cmps	result1, #0 wc
04c44     18 00 90 CD |  if_b	jmp	#LR__0373
04c48     53 01 00 FF 
04c4c     39 14 06 F6 | 	mov	arg02, ##@LR__4659
04c50     13 13 02 F6 | 	mov	arg01, local05
04c54     38 60 B1 FD | 	call	#__system___string_cmp
04c58     01 FA 55 F2 | 	cmps	result1, #1 wc
04c5c     1C 00 90 CD |  if_b	jmp	#LR__0374
04c60                 | LR__0373
04c60     53 01 00 FF 
04c64     3B 14 06 F6 | 	mov	arg02, ##@LR__4660
04c68     13 13 02 F6 | 	mov	arg01, local05
04c6c     20 60 B1 FD | 	call	#__system___string_cmp
04c70     00 FA 0D F2 | 	cmp	result1, #0 wz
04c74     00 FA 05 56 |  if_ne	mov	result1, #0
04c78     0C 00 90 5D |  if_ne	jmp	#LR__0376
04c7c                 | LR__0374
04c7c     01 22 06 F1 | 	add	local03, #1
04c80     90 FF 9F FD | 	jmp	#LR__0372
04c84                 | LR__0375
04c84                 | ' return true
04c84     01 FA 65 F6 | 	neg	result1, #1
04c88                 | LR__0376
04c88     A7 F0 03 F6 | 	mov	ptra, fp
04c8c     B2 00 A0 FD | 	call	#popregs_
04c90                 | _isdec_ret
04c90     2D 00 64 FD | 	ret
04c94                 | 
04c94                 | ' 
04c94                 | ' function isstring(s as string) as boolean
04c94                 | _isstring
04c94     01 4A 05 F6 | 	mov	COUNT_, #1
04c98     A8 00 A0 FD | 	call	#pushregs_
04c9c                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
04c9c     09 1F 02 F6 | 	mov	local01, arg01
04ca0     01 14 06 F6 | 	mov	arg02, #1
04ca4     08 80 B1 FD | 	call	#__system__Left_S
04ca8     FD 12 02 F6 | 	mov	arg01, result1
04cac     53 01 00 FF 
04cb0     3D 14 06 F6 | 	mov	arg02, ##@LR__4661
04cb4     D8 5F B1 FD | 	call	#__system___string_cmp
04cb8     00 FA 4D F2 | 	cmps	result1, #0 wz
04cbc     28 00 90 5D |  if_ne	jmp	#LR__0380
04cc0     0F 13 02 F6 | 	mov	arg01, local01
04cc4     01 14 06 F6 | 	mov	arg02, #1
04cc8     6C 80 B1 FD | 	call	#__system__Right_S
04ccc     FD 12 02 F6 | 	mov	arg01, result1
04cd0     53 01 00 FF 
04cd4     3F 14 06 F6 | 	mov	arg02, ##@LR__4662
04cd8     B4 5F B1 FD | 	call	#__system___string_cmp
04cdc     00 FA 4D F2 | 	cmps	result1, #0 wz
04ce0     01 FA 65 A6 |  if_e	neg	result1, #1
04ce4     04 00 90 AD |  if_e	jmp	#LR__0381
04ce8                 | LR__0380
04ce8     00 FA 05 F6 | 	mov	result1, #0
04cec                 | LR__0381
04cec     A7 F0 03 F6 | 	mov	ptra, fp
04cf0     B2 00 A0 FD | 	call	#popregs_
04cf4                 | _isstring_ret
04cf4     2D 00 64 FD | 	ret
04cf8                 | 
04cf8                 | ' 
04cf8                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
04cf8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
04cf8                 | ' 
04cf8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
04cf8                 | ' '----------------------Reverse Polish notation precompiler -----------------------------------------------------------------------------
04cf8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
04cf8                 | ' 
04cf8                 | ' '----- delete a line from a program
04cf8                 | ' 
04cf8                 | ' function deleteline(aline as ulong) as integer
04cf8                 | _deleteline
04cf8     03 4A 05 F6 | 	mov	COUNT_, #3
04cfc     A8 00 A0 FD | 	call	#pushregs_
04d00     2C F0 07 F1 | 	add	ptra, #44
04d04     04 4E 05 F1 | 	add	fp, #4
04d08     A7 12 62 FC | 	wrlong	arg01, fp
04d0c     69 00 00 FF 
04d10     E8 E5 05 F1 | 	add	objptr, ##54248
04d14     F2 1E 02 FB | 	rdlong	local01, objptr
04d18     0C 4E 05 F1 | 	add	fp, #12
04d1c     A7 1E 62 FC | 	wrlong	local01, fp
04d20     10 4E 85 F1 | 	sub	fp, #16
04d24                 | ' 
04d24                 | ' 
04d24                 | ' searchptr=programstart
04d24                 | ' 
04d24                 | ' do
04d24     5E 00 00 FF 
04d28     28 E5 85 F1 | 	sub	objptr, ##48424
04d2c                 | LR__0390
04d2c     14 4E 05 F1 | 	add	fp, #20
04d30     A7 12 02 F6 | 	mov	arg01, fp
04d34     04 4E 85 F1 | 	sub	fp, #4
04d38     A7 14 02 FB | 	rdlong	arg02, fp
04d3c     10 4E 85 F1 | 	sub	fp, #16
04d40     18 16 06 F6 | 	mov	arg03, #24
04d44     B8 53 B1 FD | 	call	#_psram_spin2_read1
04d48     10 4E 05 F1 | 	add	fp, #16
04d4c     A7 1E 02 FB | 	rdlong	local01, fp
04d50     08 4E 85 F1 | 	sub	fp, #8
04d54     A7 1E 62 FC | 	wrlong	local01, fp
04d58     20 4E 05 F1 | 	add	fp, #32
04d5c     A7 1E 02 FB | 	rdlong	local01, fp
04d60     18 4E 85 F1 | 	sub	fp, #24
04d64     A7 1E 62 FC | 	wrlong	local01, fp
04d68     04 4E 05 F1 | 	add	fp, #4
04d6c     A7 1E 02 FB | 	rdlong	local01, fp
04d70     10 4E 85 F1 | 	sub	fp, #16
04d74     A7 16 02 FB | 	rdlong	arg03, fp
04d78     04 4E 85 F1 | 	sub	fp, #4
04d7c     0B 1F 12 F2 | 	cmp	local01, arg03 wc
04d80     28 4E 05 C1 |  if_b	add	fp, #40
04d84     A7 20 02 CB |  if_b	rdlong	local02, fp
04d88     28 4E 85 C1 |  if_b	sub	fp, #40
04d8c     FF FF 3F CF 
04d90     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
04d94     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0390
04d98     0B 00 00 FF 
04d9c     C0 E4 85 F1 | 	sub	objptr, ##5824
04da0                 | ' 
04da0                 | ' 
04da0                 | ' if header(0)<>aline then return -1
04da0     14 4E 05 F1 | 	add	fp, #20
04da4     A7 1E 02 FB | 	rdlong	local01, fp
04da8     10 4E 85 F1 | 	sub	fp, #16
04dac     A7 22 02 FB | 	rdlong	local03, fp
04db0     04 4E 85 F1 | 	sub	fp, #4
04db4     11 1F 0A F2 | 	cmp	local01, local03 wz
04db8     01 FA 65 56 |  if_ne	neg	result1, #1
04dbc     58 03 90 5D |  if_ne	jmp	#LR__0396
04dc0     08 4E 05 F1 | 	add	fp, #8
04dc4     A7 12 02 FB | 	rdlong	arg01, fp
04dc8     08 4E 85 F1 | 	sub	fp, #8
04dcc     01 14 66 F6 | 	neg	arg02, #1
04dd0     01 16 06 F6 | 	mov	arg03, #1
04dd4     00 18 06 F6 | 	mov	arg04, #0
04dd8     0B 00 00 FF 
04ddc     C0 E4 05 F1 | 	add	objptr, ##5824
04de0                 | '     return fill(addr, pattern, count, listPtr, 4)
04de0     04 1A 06 F6 | 	mov	arg05, #4
04de4     50 54 B1 FD | 	call	#_psram_spin2_fill
04de8     0B 00 00 FF 
04dec     C0 E4 85 F1 | 	sub	objptr, ##5824
04df0                 | ' 
04df0                 | ' pslpoke(lineptr2,$FFFF_FFFF) ' flag the deleted line
04df0                 | ' 
04df0                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  ' this is one and only line in the program
04df0     28 4E 05 F1 | 	add	fp, #40
04df4     A7 1E 02 FB | 	rdlong	local01, fp
04df8     28 4E 85 F1 | 	sub	fp, #40
04dfc     FF FF 3F FF 
04e00     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04e04     24 4E 05 A1 |  if_e	add	fp, #36
04e08     A7 22 02 AB |  if_e	rdlong	local03, fp
04e0c     24 4E 85 A1 |  if_e	sub	fp, #36
04e10     FF FF 7F AF 
04e14     FF 23 0E A2 |  if_e	cmp	local03, ##-1 wz
04e18     9C 00 90 5D |  if_ne	jmp	#LR__0391
04e1c     69 00 00 FF 
04e20     E8 E5 05 F1 | 	add	objptr, ##54248
04e24     F2 00 68 FC | 	wrlong	#0, objptr
04e28     07 00 00 FF 
04e2c     28 E4 85 F1 | 	sub	objptr, ##3624
04e30     F2 00 68 FC | 	wrlong	#0, objptr
04e34     07 00 00 FF 
04e38     2C E4 05 F1 | 	add	objptr, ##3628
04e3c     F2 00 68 FC | 	wrlong	#0, objptr
04e40     04 E4 05 F1 | 	add	objptr, #4
04e44     FF FF FF FF 
04e48     F2 FE 6B FC | 	wrlong	##-1, objptr
04e4c     00 12 06 F6 | 	mov	arg01, #0
04e50     01 14 66 F6 | 	neg	arg02, #1
04e54     01 16 06 F6 | 	mov	arg03, #1
04e58     00 18 06 F6 | 	mov	arg04, #0
04e5c     5E 00 00 FF 
04e60     30 E5 85 F1 | 	sub	objptr, ##48432
04e64                 | '     return fill(addr, pattern, count, listPtr, 4)
04e64     04 1A 06 F6 | 	mov	arg05, #4
04e68     CC 53 B1 FD | 	call	#_psram_spin2_fill
04e6c     10 12 06 F6 | 	mov	arg01, #16
04e70     01 14 66 F6 | 	neg	arg02, #1
04e74     01 16 06 F6 | 	mov	arg03, #1
04e78     00 18 06 F6 | 	mov	arg04, #0
04e7c                 | '     return fill(addr, pattern, count, listPtr, 4)
04e7c     04 1A 06 F6 | 	mov	arg05, #4
04e80     B4 53 B1 FD | 	call	#_psram_spin2_fill
04e84     14 12 06 F6 | 	mov	arg01, #20
04e88     1E 14 CE F9 | 	bmask	arg02, #30
04e8c     01 16 06 F6 | 	mov	arg03, #1
04e90     00 18 06 F6 | 	mov	arg04, #0
04e94                 | '     return fill(addr, pattern, count, listPtr, 4)
04e94     04 1A 06 F6 | 	mov	arg05, #4
04e98     9C 53 B1 FD | 	call	#_psram_spin2_fill
04e9c     6E 00 00 FF 
04ea0     54 E4 05 F1 | 	add	objptr, ##56404
04ea4     F2 00 68 FC | 	wrlong	#0, objptr
04ea8     04 E4 05 F1 | 	add	objptr, #4
04eac     F2 00 68 FC | 	wrlong	#0, objptr
04eb0     79 00 00 FF 
04eb4     18 E5 85 F1 | 	sub	objptr, ##62232
04eb8                 | LR__0391
04eb8                 | ' 
04eb8                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' this is the last, and not first, line of the program
04eb8     28 4E 05 F1 | 	add	fp, #40
04ebc     A7 1E 02 FB | 	rdlong	local01, fp
04ec0     28 4E 85 F1 | 	sub	fp, #40
04ec4     FF FF 3F FF 
04ec8     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04ecc     88 00 90 5D |  if_ne	jmp	#LR__0392
04ed0     24 4E 05 F1 | 	add	fp, #36
04ed4     A7 22 02 FB | 	rdlong	local03, fp
04ed8     24 4E 85 F1 | 	sub	fp, #36
04edc     FF FF 7F FF 
04ee0     FF 23 0E F2 | 	cmp	local03, ##-1 wz
04ee4     70 00 90 AD |  if_e	jmp	#LR__0392
04ee8     24 4E 05 F1 | 	add	fp, #36
04eec     A7 12 02 FB | 	rdlong	arg01, fp
04ef0     24 4E 85 F1 | 	sub	fp, #36
04ef4     14 12 06 F1 | 	add	arg01, #20
04ef8     1E 14 CE F9 | 	bmask	arg02, #30
04efc     01 16 06 F6 | 	mov	arg03, #1
04f00     00 18 06 F6 | 	mov	arg04, #0
04f04     0B 00 00 FF 
04f08     C0 E4 05 F1 | 	add	objptr, ##5824
04f0c                 | '     return fill(addr, pattern, count, listPtr, 4)
04f0c     04 1A 06 F6 | 	mov	arg05, #4
04f10     24 53 B1 FD | 	call	#_psram_spin2_fill
04f14     24 4E 05 F1 | 	add	fp, #36
04f18     A7 1E 02 FB | 	rdlong	local01, fp
04f1c     5E 00 00 FF 
04f20     30 E5 05 F1 | 	add	objptr, ##48432
04f24     F2 1E 62 FC | 	wrlong	local01, objptr
04f28     69 00 00 FF 
04f2c     F0 E5 85 F1 | 	sub	objptr, ##54256
04f30     A7 12 02 FB | 	rdlong	arg01, fp
04f34     24 4E 85 F1 | 	sub	fp, #36
04f38     D8 28 B1 FD | 	call	#_pslpeek
04f3c     69 00 00 FF 
04f40     EC E5 05 F1 | 	add	objptr, ##54252
04f44     F2 FA 61 FC | 	wrlong	result1, objptr
04f48     69 00 00 FF 
04f4c     EC E5 85 F1 | 	sub	objptr, ##54252
04f50                 | '   pslpoke(header(4)+20,$7FFF_FFFF) ' unlink the previous line
04f50                 | '   lastlineptr=header(4)            ' keep last line pointer to avoid searching while sequentially adding a new line
04f50                 | '   lastline=pslpeek(header(4))
04f50                 | '   return 0
04f50     00 FA 05 F6 | 	mov	result1, #0
04f54     C0 01 90 FD | 	jmp	#LR__0396
04f58                 | LR__0392
04f58                 | ' 
04f58                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is the first line, but not the last
04f58     28 4E 05 F1 | 	add	fp, #40
04f5c     A7 1E 02 FB | 	rdlong	local01, fp
04f60     28 4E 85 F1 | 	sub	fp, #40
04f64     FF FF 3F FF 
04f68     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04f6c     6C 00 90 AD |  if_e	jmp	#LR__0393
04f70     24 4E 05 F1 | 	add	fp, #36
04f74     A7 22 02 FB | 	rdlong	local03, fp
04f78     24 4E 85 F1 | 	sub	fp, #36
04f7c     FF FF 7F FF 
04f80     FF 23 0E F2 | 	cmp	local03, ##-1 wz
04f84     54 00 90 5D |  if_ne	jmp	#LR__0393
04f88     28 4E 05 F1 | 	add	fp, #40
04f8c     A7 12 02 FB | 	rdlong	arg01, fp
04f90     28 4E 85 F1 | 	sub	fp, #40
04f94     10 12 06 F1 | 	add	arg01, #16
04f98     01 14 66 F6 | 	neg	arg02, #1
04f9c     01 16 06 F6 | 	mov	arg03, #1
04fa0     00 18 06 F6 | 	mov	arg04, #0
04fa4     0B 00 00 FF 
04fa8     C0 E4 05 F1 | 	add	objptr, ##5824
04fac                 | '     return fill(addr, pattern, count, listPtr, 4)
04fac     04 1A 06 F6 | 	mov	arg05, #4
04fb0     84 52 B1 FD | 	call	#_psram_spin2_fill
04fb4     28 4E 05 F1 | 	add	fp, #40
04fb8     A7 1E 02 FB | 	rdlong	local01, fp
04fbc     28 4E 85 F1 | 	sub	fp, #40
04fc0     5E 00 00 FF 
04fc4     28 E5 05 F1 | 	add	objptr, ##48424
04fc8     F2 1E 62 FC | 	wrlong	local01, objptr
04fcc     69 00 00 FF 
04fd0     E8 E5 85 F1 | 	sub	objptr, ##54248
04fd4                 | ' '   print "deleted first line"
04fd4                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
04fd4                 | '   programstart=header(5) ' adjust the program start to point on the first new line
04fd4                 | '   return 0
04fd4     00 FA 05 F6 | 	mov	result1, #0
04fd8     3C 01 90 FD | 	jmp	#LR__0396
04fdc                 | LR__0393
04fdc                 | ' 
04fdc                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' the line is not first and not last
04fdc     28 4E 05 F1 | 	add	fp, #40
04fe0     A7 1E 02 FB | 	rdlong	local01, fp
04fe4     28 4E 85 F1 | 	sub	fp, #40
04fe8     FF FF 3F FF 
04fec     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04ff0     24 4E 05 51 |  if_ne	add	fp, #36
04ff4     A7 22 02 5B |  if_ne	rdlong	local03, fp
04ff8     24 4E 85 51 |  if_ne	sub	fp, #36
04ffc     FF FF 7F 5F 
05000     FF 23 0E 52 |  if_ne	cmp	local03, ##-1 wz
05004     68 00 90 AD |  if_e	jmp	#LR__0394
05008     28 4E 05 F1 | 	add	fp, #40
0500c     A7 12 02 FB | 	rdlong	arg01, fp
05010     10 12 06 F1 | 	add	arg01, #16
05014     04 4E 85 F1 | 	sub	fp, #4
05018     A7 14 02 FB | 	rdlong	arg02, fp
0501c     24 4E 85 F1 | 	sub	fp, #36
05020     01 16 06 F6 | 	mov	arg03, #1
05024     00 18 06 F6 | 	mov	arg04, #0
05028     0B 00 00 FF 
0502c     C0 E4 05 F1 | 	add	objptr, ##5824
05030                 | '     return fill(addr, pattern, count, listPtr, 4)
05030     04 1A 06 F6 | 	mov	arg05, #4
05034     00 52 B1 FD | 	call	#_psram_spin2_fill
05038     24 4E 05 F1 | 	add	fp, #36
0503c     A7 12 02 FB | 	rdlong	arg01, fp
05040     14 12 06 F1 | 	add	arg01, #20
05044     04 4E 05 F1 | 	add	fp, #4
05048     A7 14 02 FB | 	rdlong	arg02, fp
0504c     28 4E 85 F1 | 	sub	fp, #40
05050     01 16 06 F6 | 	mov	arg03, #1
05054     00 18 06 F6 | 	mov	arg04, #0
05058                 | '     return fill(addr, pattern, count, listPtr, 4)
05058     04 1A 06 F6 | 	mov	arg05, #4
0505c     D8 51 B1 FD | 	call	#_psram_spin2_fill
05060     0B 00 00 FF 
05064     C0 E4 85 F1 | 	sub	objptr, ##5824
05068                 | '    pslpoke(header(5)+16,header(4))  
05068                 | '    pslpoke(header(4)+20, header(5))
05068                 | '    return 0
05068     00 FA 05 F6 | 	mov	result1, #0
0506c     A8 00 90 FD | 	jmp	#LR__0396
05070                 | LR__0394
05070     10 4E 05 F1 | 	add	fp, #16
05074     A7 1E 02 FB | 	rdlong	local01, fp
05078     08 4E 85 F1 | 	sub	fp, #8
0507c     A7 1E 62 FC | 	wrlong	local01, fp
05080     69 00 00 FF 
05084     E8 E5 05 F1 | 	add	objptr, ##54248
05088     F2 1E 02 FB | 	rdlong	local01, objptr
0508c     08 4E 05 F1 | 	add	fp, #8
05090     A7 1E 62 FC | 	wrlong	local01, fp
05094     10 4E 85 F1 | 	sub	fp, #16
05098                 | ' 
05098                 | ' 
05098                 | ' 
05098                 | ' ' now find if the deleted line was a target for goto and replace fast_goto with find_goto
05098                 | ' 
05098                 | ' lineptr2=searchptr
05098                 | ' searchptr=programstart
05098                 | ' 
05098                 | ' do
05098     5E 00 00 FF 
0509c     28 E5 85 F1 | 	sub	objptr, ##48424
050a0                 | LR__0395
050a0     14 4E 05 F1 | 	add	fp, #20
050a4     A7 12 02 F6 | 	mov	arg01, fp
050a8     04 4E 85 F1 | 	sub	fp, #4
050ac     A7 14 02 FB | 	rdlong	arg02, fp
050b0     10 4E 85 F1 | 	sub	fp, #16
050b4     18 16 06 F6 | 	mov	arg03, #24
050b8     44 50 B1 FD | 	call	#_psram_spin2_read1
050bc     10 4E 05 F1 | 	add	fp, #16
050c0     A7 1E 02 FB | 	rdlong	local01, fp
050c4     08 4E 85 F1 | 	sub	fp, #8
050c8     A7 1E 62 FC | 	wrlong	local01, fp
050cc     20 4E 05 F1 | 	add	fp, #32
050d0     A7 1E 02 FB | 	rdlong	local01, fp
050d4     18 4E 85 F1 | 	sub	fp, #24
050d8     A7 1E 62 FC | 	wrlong	local01, fp
050dc     04 4E 05 F1 | 	add	fp, #4
050e0     A7 1E 02 FB | 	rdlong	local01, fp
050e4     10 4E 85 F1 | 	sub	fp, #16
050e8     A7 22 02 FB | 	rdlong	local03, fp
050ec     04 4E 85 F1 | 	sub	fp, #4
050f0     11 1F 12 F2 | 	cmp	local01, local03 wc
050f4     28 4E 05 C1 |  if_b	add	fp, #40
050f8     A7 20 02 CB |  if_b	rdlong	local02, fp
050fc     28 4E 85 C1 |  if_b	sub	fp, #40
05100     FF FF 3F CF 
05104     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
05108     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0395
0510c     0B 00 00 FF 
05110     C0 E4 85 F1 | 	sub	objptr, ##5824
05114     00 FA 05 F6 | 	mov	result1, #0
05118                 | LR__0396
05118     A7 F0 03 F6 | 	mov	ptra, fp
0511c     B2 00 A0 FD | 	call	#popregs_
05120                 | _deleteline_ret
05120     2D 00 64 FD | 	ret
05124                 | 
05124                 | ' 
05124                 | ' sub save_line
05124                 | _save_line
05124     03 4A 05 F6 | 	mov	COUNT_, #3
05128     A8 00 A0 FD | 	call	#pushregs_
0512c     69 00 00 FF 
05130     E0 E5 05 F1 | 	add	objptr, ##54240
05134     F2 16 02 FB | 	rdlong	arg03, objptr
05138     01 16 06 F1 | 	add	arg03, #1
0513c     05 00 00 FF 
05140     18 E4 85 F1 | 	sub	objptr, ##2584
05144     F2 14 02 FB | 	rdlong	arg02, objptr
05148     0B 15 02 FD | 	qmul	arg02, arg03
0514c     0E 00 00 FF 
05150     44 E4 85 F1 | 	sub	objptr, ##7236
05154     F2 12 02 FB | 	rdlong	arg01, objptr
05158     56 00 00 FF 
0515c     84 E5 85 F1 | 	sub	objptr, ##44420
05160     09 1F 02 F6 | 	mov	local01, arg01
05164     18 20 62 FD | 	getqx	local02
05168     97 06 48 FB | 	callpa	#(@LR__0401-@LR__0400)>>2,fcache_load_ptr_
0516c                 | LR__0400
0516c     0F FB C9 FA | 	rdbyte	result1, local01 wz
05170     01 1E 06 51 |  if_ne	add	local01, #1
05174     F4 FF 9F 5D |  if_ne	jmp	#LR__0400
05178                 | LR__0401
05178     09 1F 82 F1 | 	sub	local01, arg01
0517c     03 1E CE F7 | 	test	local01, #3 wz
05180     02 1E 46 50 |  if_ne	shr	local01, #2
05184     01 1E 06 51 |  if_ne	add	local01, #1
05188     02 1E 66 50 |  if_ne	shl	local01, #2
0518c     10 23 02 F6 | 	mov	local03, local02
05190     0F 23 02 F1 | 	add	local03, local01
05194     62 00 00 FF 
05198     C0 E5 05 F1 | 	add	objptr, ##50624
0519c     F2 16 02 FB | 	rdlong	arg03, objptr
051a0     10 17 02 F1 | 	add	arg03, local02
051a4     04 00 00 FF 
051a8     28 E4 05 F1 | 	add	objptr, ##2088
051ac     F2 16 62 FC | 	wrlong	arg03, objptr
051b0     04 E4 05 F1 | 	add	objptr, #4
051b4     F2 1E 62 FC | 	wrlong	local01, objptr
051b8     0C E4 85 F1 | 	sub	objptr, #12
051bc     F2 12 02 F6 | 	mov	arg01, objptr
051c0     04 00 00 FF 
051c4     20 E4 85 F1 | 	sub	objptr, ##2080
051c8     F2 14 02 FB | 	rdlong	arg02, objptr
051cc     10 17 02 F6 | 	mov	arg03, local02
051d0     57 00 00 FF 
051d4     00 E5 85 F1 | 	sub	objptr, ##44800
051d8     C0 4F B1 FD | 	call	#_psram_spin2_write
051dc     4B 00 00 FF 
051e0     C4 E4 05 F1 | 	add	objptr, ##38596
051e4     F2 12 02 FB | 	rdlong	arg01, objptr
051e8     0C 00 00 FF 
051ec     3C E4 05 F1 | 	add	objptr, ##6204
051f0     F2 14 02 FB | 	rdlong	arg02, objptr
051f4     10 15 02 F1 | 	add	arg02, local02
051f8     0F 17 02 F6 | 	mov	arg03, local01
051fc     57 00 00 FF 
05200     00 E5 85 F1 | 	sub	objptr, ##44800
05204     94 4F B1 FD | 	call	#_psram_spin2_write
05208     57 00 00 FF 
0520c     00 E5 05 F1 | 	add	objptr, ##44800
05210     F2 1E 02 FB | 	rdlong	local01, objptr
05214     11 1F 02 F1 | 	add	local01, local03
05218     F2 1E 62 FC | 	wrlong	local01, objptr
0521c     62 00 00 FF 
05220     C0 E5 85 F1 | 	sub	objptr, ##50624
05224     A7 F0 03 F6 | 	mov	ptra, fp
05228     B2 00 A0 FD | 	call	#popregs_
0522c                 | _save_line_ret
0522c     2D 00 64 FD | 	ret
05230                 | 
05230                 | ' 
05230                 | ' 
05230                 | ' function insertline(aline as ulong) as integer
05230                 | _insertline
05230     02 4A 05 F6 | 	mov	COUNT_, #2
05234     A8 00 A0 FD | 	call	#pushregs_
05238     28 F0 07 F1 | 	add	ptra, #40
0523c     04 4E 05 F1 | 	add	fp, #4
05240     A7 12 62 FC | 	wrlong	arg01, fp
05244     69 00 00 FF 
05248     E8 E5 05 F1 | 	add	objptr, ##54248
0524c     F2 1E 02 FB | 	rdlong	local01, objptr
05250     04 4E 05 F1 | 	add	fp, #4
05254     A7 1E 62 FC | 	wrlong	local01, fp
05258     08 4E 85 F1 | 	sub	fp, #8
0525c                 | ' 
0525c                 | ' do
0525c     5E 00 00 FF 
05260     28 E5 85 F1 | 	sub	objptr, ##48424
05264                 | LR__0410
05264     10 4E 05 F1 | 	add	fp, #16
05268     A7 12 02 F6 | 	mov	arg01, fp
0526c     08 4E 85 F1 | 	sub	fp, #8
05270     A7 14 02 FB | 	rdlong	arg02, fp
05274     08 4E 85 F1 | 	sub	fp, #8
05278     18 16 06 F6 | 	mov	arg03, #24
0527c     80 4E B1 FD | 	call	#_psram_spin2_read1
05280     08 4E 05 F1 | 	add	fp, #8
05284     A7 1E 02 FB | 	rdlong	local01, fp
05288     04 4E 05 F1 | 	add	fp, #4
0528c     A7 1E 62 FC | 	wrlong	local01, fp
05290     18 4E 05 F1 | 	add	fp, #24
05294     A7 1E 02 FB | 	rdlong	local01, fp
05298     1C 4E 85 F1 | 	sub	fp, #28
0529c     A7 1E 62 FC | 	wrlong	local01, fp
052a0     08 4E 05 F1 | 	add	fp, #8
052a4     A7 1E 02 FB | 	rdlong	local01, fp
052a8     0C 4E 85 F1 | 	sub	fp, #12
052ac     A7 16 02 FB | 	rdlong	arg03, fp
052b0     04 4E 85 F1 | 	sub	fp, #4
052b4     0B 1F 12 F2 | 	cmp	local01, arg03 wc
052b8     24 4E 05 C1 |  if_b	add	fp, #36
052bc     A7 20 02 CB |  if_b	rdlong	local02, fp
052c0     24 4E 85 C1 |  if_b	sub	fp, #36
052c4     FF FF 3F CF 
052c8     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
052cc     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0410
052d0     0B 00 00 FF 
052d4     C0 E4 85 F1 | 	sub	objptr, ##5824
052d8                 | ' 
052d8                 | ' if header(0)=aline then return -1 ' delete it first
052d8     10 4E 05 F1 | 	add	fp, #16
052dc     A7 1E 02 FB | 	rdlong	local01, fp
052e0     0C 4E 85 F1 | 	sub	fp, #12
052e4     A7 20 02 FB | 	rdlong	local02, fp
052e8     04 4E 85 F1 | 	sub	fp, #4
052ec     10 1F 0A F2 | 	cmp	local01, local02 wz
052f0     01 FA 65 A6 |  if_e	neg	result1, #1
052f4     74 01 90 AD |  if_e	jmp	#LR__0413
052f8                 | ' if header(0)<aline then return -2 ' end of program reached
052f8     10 4E 05 F1 | 	add	fp, #16
052fc     A7 1E 02 FB | 	rdlong	local01, fp
05300     0C 4E 85 F1 | 	sub	fp, #12
05304     A7 16 02 FB | 	rdlong	arg03, fp
05308     04 4E 85 F1 | 	sub	fp, #4
0530c     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05310     02 FA 65 C6 |  if_b	neg	result1, #2
05314     54 01 90 CD |  if_b	jmp	#LR__0413
05318                 | ' 
05318                 | ' if  header(4)=$FFFF_FFFF then ' this is one first line in the program so the inserted line will be new first
05318     20 4E 05 F1 | 	add	fp, #32
0531c     A7 1E 02 FB | 	rdlong	local01, fp
05320     20 4E 85 F1 | 	sub	fp, #32
05324     FF FF 7F FF 
05328     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0532c     84 00 90 5D |  if_ne	jmp	#LR__0411
05330     62 00 00 FF 
05334     C0 E5 05 F1 | 	add	objptr, ##50624
05338     F2 1E 02 FB | 	rdlong	local01, objptr
0533c     07 00 00 FF 
05340     28 E4 05 F1 | 	add	objptr, ##3624
05344     F2 1E 62 FC | 	wrlong	local01, objptr
05348     0C 4E 05 F1 | 	add	fp, #12
0534c     A7 12 02 FB | 	rdlong	arg01, fp
05350     0C 4E 85 F1 | 	sub	fp, #12
05354     10 12 06 F1 | 	add	arg01, #16
05358     07 00 00 FF 
0535c     28 E4 85 F1 | 	sub	objptr, ##3624
05360     F2 14 02 FB | 	rdlong	arg02, objptr
05364     01 16 06 F6 | 	mov	arg03, #1
05368     00 18 06 F6 | 	mov	arg04, #0
0536c     57 00 00 FF 
05370     00 E5 85 F1 | 	sub	objptr, ##44800
05374                 | '     return fill(addr, pattern, count, listPtr, 4)
05374     04 1A 06 F6 | 	mov	arg05, #4
05378     BC 4E B1 FD | 	call	#_psram_spin2_fill
0537c     5B 00 00 FF 
05380     30 E5 05 F1 | 	add	objptr, ##46896
05384     FF FF FF FF 
05388     F2 FE 6B FC | 	wrlong	##-1, objptr
0538c     0C 4E 05 F1 | 	add	fp, #12
05390     A7 1E 02 FB | 	rdlong	local01, fp
05394     0C 4E 85 F1 | 	sub	fp, #12
05398     04 E4 05 F1 | 	add	objptr, #4
0539c     F2 1E 62 FC | 	wrlong	local01, objptr
053a0     66 00 00 FF 
053a4     F4 E5 85 F1 | 	sub	objptr, ##52724
053a8     78 FD BF FD | 	call	#_save_line
053ac                 | '   programstart=programptr
053ac                 | '   pslpoke(lineptr2+16,programptr)
053ac                 | '   ucompiledline(4)=$FFFF_FFFF
053ac                 | '   ucompiledline(5)=lineptr2
053ac                 | '   save_line
053ac                 | '   return 0
053ac     00 FA 05 F6 | 	mov	result1, #0
053b0     B8 00 90 FD | 	jmp	#LR__0413
053b4                 | LR__0411
053b4                 | ' 
053b4                 | ' if header(4)<>$FFFF_FFFF then ' this is not first line of the program. It doesn't matter if it is last as we will insert it before
053b4     20 4E 05 F1 | 	add	fp, #32
053b8     A7 1E 02 FB | 	rdlong	local01, fp
053bc     20 4E 85 F1 | 	sub	fp, #32
053c0     FF FF 7F FF 
053c4     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
053c8     9C 00 90 AD |  if_e	jmp	#LR__0412
053cc     20 4E 05 F1 | 	add	fp, #32
053d0     A7 1E 02 FB | 	rdlong	local01, fp
053d4     66 00 00 FF 
053d8     F0 E5 05 F1 | 	add	objptr, ##52720
053dc     F2 1E 62 FC | 	wrlong	local01, objptr
053e0     14 4E 85 F1 | 	sub	fp, #20
053e4     A7 1E 02 FB | 	rdlong	local01, fp
053e8     04 E4 05 F1 | 	add	objptr, #4
053ec     F2 1E 62 FC | 	wrlong	local01, objptr
053f0     A7 12 02 FB | 	rdlong	arg01, fp
053f4     0C 4E 85 F1 | 	sub	fp, #12
053f8     10 12 06 F1 | 	add	arg01, #16
053fc     04 00 00 FF 
05400     34 E4 85 F1 | 	sub	objptr, ##2100
05404     F2 14 02 FB | 	rdlong	arg02, objptr
05408     01 16 06 F6 | 	mov	arg03, #1
0540c     00 18 06 F6 | 	mov	arg04, #0
05410     57 00 00 FF 
05414     00 E5 85 F1 | 	sub	objptr, ##44800
05418                 | '     return fill(addr, pattern, count, listPtr, 4)
05418     04 1A 06 F6 | 	mov	arg05, #4
0541c     18 4E B1 FD | 	call	#_psram_spin2_fill
05420     20 4E 05 F1 | 	add	fp, #32
05424     A7 12 02 FB | 	rdlong	arg01, fp
05428     20 4E 85 F1 | 	sub	fp, #32
0542c     14 12 06 F1 | 	add	arg01, #20
05430     57 00 00 FF 
05434     00 E5 05 F1 | 	add	objptr, ##44800
05438     F2 14 02 FB | 	rdlong	arg02, objptr
0543c     01 16 06 F6 | 	mov	arg03, #1
05440     00 18 06 F6 | 	mov	arg04, #0
05444     57 00 00 FF 
05448     00 E5 85 F1 | 	sub	objptr, ##44800
0544c                 | '     return fill(addr, pattern, count, listPtr, 4)
0544c     04 1A 06 F6 | 	mov	arg05, #4
05450     E4 4D B1 FD | 	call	#_psram_spin2_fill
05454     0B 00 00 FF 
05458     C0 E4 85 F1 | 	sub	objptr, ##5824
0545c     C4 FC BF FD | 	call	#_save_line
05460                 | '   ucompiledline(4)=header(4)
05460                 | '   ucompiledline(5)=lineptr2
05460                 | '   pslpoke(lineptr2+16,programptr)
05460                 | '   pslpoke(header(4)+20,programptr)
05460                 | '   save_line
05460                 | '   return 0
05460     00 FA 05 F6 | 	mov	result1, #0
05464     04 00 90 FD | 	jmp	#LR__0413
05468                 | LR__0412
05468     00 FA 05 F6 | 	mov	result1, #0
0546c                 | LR__0413
0546c     A7 F0 03 F6 | 	mov	ptra, fp
05470     B2 00 A0 FD | 	call	#popregs_
05474                 | _insertline_ret
05474     2D 00 64 FD | 	ret
05478                 | 
05478                 | ' 
05478                 | ' sub add_line_at_end(aline) 
05478                 | _add_line_at_end
05478     69 00 00 FF 
0547c     EC E5 05 F1 | 	add	objptr, ##54252
05480     F2 12 62 FC | 	wrlong	arg01, objptr
05484     04 E4 05 F1 | 	add	objptr, #4
05488     F2 14 02 FB | 	rdlong	arg02, objptr
0548c     03 00 00 FF 
05490     00 E4 85 F1 | 	sub	objptr, ##1536
05494     F2 14 62 FC | 	wrlong	arg02, objptr
05498     03 00 00 FF 
0549c     00 E4 05 F1 | 	add	objptr, ##1536
054a0     F2 12 02 FB | 	rdlong	arg01, objptr
054a4     14 12 06 F1 | 	add	arg01, #20
054a8     07 00 00 FF 
054ac     30 E4 85 F1 | 	sub	objptr, ##3632
054b0     F2 14 02 FB | 	rdlong	arg02, objptr
054b4     01 16 06 F6 | 	mov	arg03, #1
054b8     00 18 06 F6 | 	mov	arg04, #0
054bc     57 00 00 FF 
054c0     00 E5 85 F1 | 	sub	objptr, ##44800
054c4                 | '     return fill(addr, pattern, count, listPtr, 4)
054c4     04 1A 06 F6 | 	mov	arg05, #4
054c8     6C 4D B1 FD | 	call	#_psram_spin2_fill
054cc     57 00 00 FF 
054d0     00 E5 05 F1 | 	add	objptr, ##44800
054d4     F2 14 02 FB | 	rdlong	arg02, objptr
054d8     07 00 00 FF 
054dc     30 E4 05 F1 | 	add	objptr, ##3632
054e0     F2 14 62 FC | 	wrlong	arg02, objptr
054e4     02 00 00 FF 
054e8     FC E5 85 F1 | 	sub	objptr, ##1532
054ec     FF FF BF FF 
054f0     F2 FE 6B FC | 	wrlong	##2147483647, objptr
054f4                 | ' 
054f4                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
054f4                 | ' if programptr=0 then ucompiledline(4)=$FFFFFFFF ' that is the first line
054f4     04 00 00 FF 
054f8     34 E4 85 F1 | 	sub	objptr, ##2100
054fc     F2 14 0A FB | 	rdlong	arg02, objptr wz
05500     62 00 00 FF 
05504     C0 E5 85 F1 | 	sub	objptr, ##50624
05508     66 00 00 AF 
0550c     F0 E5 05 A1 |  if_e	add	objptr, ##52720
05510     FF FF FF AF 
05514     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
05518     66 00 00 AF 
0551c     F0 E5 85 A1 |  if_e	sub	objptr, ##52720
05520     00 FC BF FD | 	call	#_save_line
05524     62 00 00 FF 
05528     C0 E5 05 F1 | 	add	objptr, ##50624
0552c     F2 12 02 FB | 	rdlong	arg01, objptr
05530     01 14 66 F6 | 	neg	arg02, #1
05534     01 16 06 F6 | 	mov	arg03, #1
05538     00 18 06 F6 | 	mov	arg04, #0
0553c     57 00 00 FF 
05540     00 E5 85 F1 | 	sub	objptr, ##44800
05544                 | '     return fill(addr, pattern, count, listPtr, 4)
05544     04 1A 06 F6 | 	mov	arg05, #4
05548     EC 4C B1 FD | 	call	#_psram_spin2_fill
0554c     0B 00 00 FF 
05550     C0 E4 85 F1 | 	sub	objptr, ##5824
05554                 | _add_line_at_end_ret
05554     2D 00 64 FD | 	ret
05558                 | 
05558                 | ' 
05558                 | ' function compile_immediate(linetype as ulong) as integer
05558                 | _compile_immediate
05558     09 4A 05 F6 | 	mov	COUNT_, #9
0555c     A8 00 A0 FD | 	call	#pushregs_
05560                 | _compile_immediate_enter
05560     09 25 0A F6 | 	mov	local04, arg01 wz
05564     00 26 06 F6 | 	mov	local05, #0
05568     00 28 06 F6 | 	mov	local06, #0
0556c                 | ' 
0556c                 | ' ' linetype=cont+1, linetype=0 immediate
0556c                 | ' '  : 1: this is the first part of the line that will continue
0556c                 | ' ' 2 - this is the continuation of the line
0556c                 | ' ' 3 - this is the last continued line
0556c                 | ' ' 4 - this is the one and only part
0556c                 | ' 
0556c                 | ' err=0
0556c                 | ' cmd=0
0556c                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
0556c     2C 00 90 5D |  if_ne	jmp	#LR__0420
05570     54 00 00 FF 
05574     74 E5 05 F1 | 	add	objptr, ##43380
05578     F2 28 02 FB | 	rdlong	local06, objptr
0557c     02 00 00 FF 
05580     34 E4 05 F1 | 	add	objptr, ##1076
05584     F2 02 68 FC | 	wrlong	#1, objptr
05588     13 00 00 FF 
0558c     38 E4 05 F1 | 	add	objptr, ##9784
05590     F2 00 68 FC | 	wrlong	#0, objptr
05594     69 00 00 FF 
05598     E0 E5 85 F1 | 	sub	objptr, ##54240
0559c                 | LR__0420
0559c                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
0559c     02 24 0E F2 | 	cmp	local04, #2 wz
055a0     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
055a4     54 00 00 AF 
055a8     74 E5 05 A1 |  if_e	add	objptr, ##43380
055ac     F2 28 02 AB |  if_e	rdlong	local06, objptr
055b0     02 00 00 AF 
055b4     34 E4 05 A1 |  if_e	add	objptr, ##1076
055b8     F2 02 68 AC |  if_e	wrlong	#1, objptr
055bc     56 00 00 AF 
055c0     A8 E5 85 A1 |  if_e	sub	objptr, ##44456
055c4                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
055c4     04 24 0E F2 | 	cmp	local04, #4 wz
055c8     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
055cc     2C 00 90 5D |  if_ne	jmp	#LR__0421
055d0     54 00 00 FF 
055d4     7C E5 05 F1 | 	add	objptr, ##43388
055d8     F2 28 02 FB | 	rdlong	local06, objptr
055dc     02 00 00 FF 
055e0     2C E4 05 F1 | 	add	objptr, ##1068
055e4     F2 04 68 FC | 	wrlong	#2, objptr
055e8     13 00 00 FF 
055ec     38 E4 05 F1 | 	add	objptr, ##9784
055f0     F2 04 68 FC | 	wrlong	#2, objptr
055f4     69 00 00 FF 
055f8     E0 E5 85 F1 | 	sub	objptr, ##54240
055fc                 | LR__0421
055fc                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
055fc     05 24 0E F2 | 	cmp	local04, #5 wz
05600     40 00 90 5D |  if_ne	jmp	#LR__0422
05604     56 00 00 FF 
05608     A8 E5 05 F1 | 	add	objptr, ##44456
0560c     F2 2A 02 FB | 	rdlong	local07, objptr
05610     15 29 02 F6 | 	mov	local06, local07
05614     03 28 66 F0 | 	shl	local06, #3
05618     02 00 00 FF 
0561c     38 E4 85 F1 | 	sub	objptr, ##1080
05620     F2 28 02 F1 | 	add	local06, objptr
05624     04 28 06 F1 | 	add	local06, #4
05628     14 29 02 FB | 	rdlong	local06, local06
0562c     01 2A 06 F1 | 	add	local07, #1
05630     02 00 00 FF 
05634     38 E4 05 F1 | 	add	objptr, ##1080
05638     F2 2A 62 FC | 	wrlong	local07, objptr
0563c     56 00 00 FF 
05640     A8 E5 85 F1 | 	sub	objptr, ##44456
05644                 | LR__0422
05644     00 2C 06 F6 | 	mov	local08, #0
05648                 | ' vars=0
05648                 | ' 'print  "In compile_immediate cmd=:", cmd
05648                 | ' 451 select case cmd
05648     5C 28 0E F2 | 	cmp	local06, #92 wz
0564c     F0 01 90 AD |  if_e	jmp	#LR__0423
05650     47 28 0E F2 | 	cmp	local06, #71 wz
05654     F4 01 90 AD |  if_e	jmp	#LR__0424
05658     59 28 0E F2 | 	cmp	local06, #89 wz
0565c     F8 01 90 AD |  if_e	jmp	#LR__0425
05660     45 28 0E F2 | 	cmp	local06, #69 wz
05664     FC 01 90 AD |  if_e	jmp	#LR__0426
05668     69 28 0E F2 | 	cmp	local06, #105 wz
0566c     00 02 90 AD |  if_e	jmp	#LR__0427
05670     40 28 0E F2 | 	cmp	local06, #64 wz
05674     4C 04 90 AD |  if_e	jmp	#LR__0479
05678     49 28 0E F2 | 	cmp	local06, #73 wz
0567c     FC 01 90 AD |  if_e	jmp	#LR__0428
05680     50 28 0E F2 | 	cmp	local06, #80 wz
05684     00 02 90 AD |  if_e	jmp	#LR__0429
05688     68 28 0E F2 | 	cmp	local06, #104 wz
0568c     04 02 90 AD |  if_e	jmp	#LR__0430
05690     74 28 0E F2 | 	cmp	local06, #116 wz
05694     08 02 90 AD |  if_e	jmp	#LR__0431
05698     73 28 0E F2 | 	cmp	local06, #115 wz
0569c     0C 02 90 AD |  if_e	jmp	#LR__0432
056a0     6C 28 0E F2 | 	cmp	local06, #108 wz
056a4     10 02 90 AD |  if_e	jmp	#LR__0433
056a8     89 28 0E F2 | 	cmp	local06, #137 wz
056ac     14 04 90 AD |  if_e	jmp	#LR__0479
056b0     72 28 0E F2 | 	cmp	local06, #114 wz
056b4     0C 02 90 AD |  if_e	jmp	#LR__0434
056b8     5D 28 0E F2 | 	cmp	local06, #93 wz
056bc     04 04 90 AD |  if_e	jmp	#LR__0479
056c0     43 28 0E F2 | 	cmp	local06, #67 wz
056c4     04 02 90 AD |  if_e	jmp	#LR__0435
056c8     5A 28 0E F2 | 	cmp	local06, #90 wz
056cc     08 02 90 AD |  if_e	jmp	#LR__0436
056d0     4E 28 0E F2 | 	cmp	local06, #78 wz
056d4     08 02 90 AD |  if_e	jmp	#LR__0437
056d8     46 28 0E F2 | 	cmp	local06, #70 wz
056dc     1C 02 90 AD |  if_e	jmp	#LR__0439
056e0     71 28 0E F2 | 	cmp	local06, #113 wz
056e4     20 02 90 AD |  if_e	jmp	#LR__0440
056e8     60 28 0E F2 | 	cmp	local06, #96 wz
056ec     24 02 90 AD |  if_e	jmp	#LR__0441
056f0     4A 28 0E F2 | 	cmp	local06, #74 wz
056f4     28 02 90 AD |  if_e	jmp	#LR__0442
056f8     48 28 0E F2 | 	cmp	local06, #72 wz
056fc     28 02 90 AD |  if_e	jmp	#LR__0443
05700     58 28 0E F2 | 	cmp	local06, #88 wz
05704     2C 02 90 AD |  if_e	jmp	#LR__0444
05708     5F 28 0E F2 | 	cmp	local06, #95 wz
0570c     2C 02 90 AD |  if_e	jmp	#LR__0445
05710     8A 28 0E F2 | 	cmp	local06, #138 wz
05714     30 02 90 AD |  if_e	jmp	#LR__0446
05718     4C 28 0E F2 | 	cmp	local06, #76 wz
0571c     34 02 90 AD |  if_e	jmp	#LR__0447
05720     52 28 0E F2 | 	cmp	local06, #82 wz
05724     38 02 90 AD |  if_e	jmp	#LR__0448
05728     61 28 0E F2 | 	cmp	local06, #97 wz
0572c     3C 02 90 AD |  if_e	jmp	#LR__0449
05730     63 28 0E F2 | 	cmp	local06, #99 wz
05734     40 02 90 AD |  if_e	jmp	#LR__0450
05738     41 28 0E F2 | 	cmp	local06, #65 wz
0573c     84 03 90 AD |  if_e	jmp	#LR__0479
05740     4B 28 0E F2 | 	cmp	local06, #75 wz
05744     3C 02 90 AD |  if_e	jmp	#LR__0451
05748     5E 28 0E F2 | 	cmp	local06, #94 wz
0574c     3C 02 90 AD |  if_e	jmp	#LR__0452
05750     7C 28 0E F2 | 	cmp	local06, #124 wz
05754     40 02 90 AD |  if_e	jmp	#LR__0453
05758     7D 28 0E F2 | 	cmp	local06, #125 wz
0575c     44 02 90 AD |  if_e	jmp	#LR__0454
05760     7E 28 0E F2 | 	cmp	local06, #126 wz
05764     48 02 90 AD |  if_e	jmp	#LR__0455
05768     7F 28 0E F2 | 	cmp	local06, #127 wz
0576c     4C 02 90 AD |  if_e	jmp	#LR__0456
05770     80 28 0E F2 | 	cmp	local06, #128 wz
05774     50 02 90 AD |  if_e	jmp	#LR__0457
05778     55 28 0E F2 | 	cmp	local06, #85 wz
0577c     54 02 90 AD |  if_e	jmp	#LR__0458
05780     75 28 0E F2 | 	cmp	local06, #117 wz
05784     58 02 90 AD |  if_e	jmp	#LR__0459
05788     42 28 0E F2 | 	cmp	local06, #66 wz
0578c     5C 02 90 AD |  if_e	jmp	#LR__0460
05790     81 28 0E F2 | 	cmp	local06, #129 wz
05794     60 02 90 AD |  if_e	jmp	#LR__0461
05798     44 28 0E F2 | 	cmp	local06, #68 wz
0579c     64 02 90 AD |  if_e	jmp	#LR__0462
057a0     88 28 0E F2 | 	cmp	local06, #136 wz
057a4     1C 03 90 AD |  if_e	jmp	#LR__0479
057a8     92 28 0E F2 | 	cmp	local06, #146 wz
057ac     60 02 90 AD |  if_e	jmp	#LR__0463
057b0     4D 28 0E F2 | 	cmp	local06, #77 wz
057b4     0C 03 90 AD |  if_e	jmp	#LR__0479
057b8     51 28 0E F2 | 	cmp	local06, #81 wz
057bc     58 02 90 AD |  if_e	jmp	#LR__0464
057c0     8E 28 0E F2 | 	cmp	local06, #142 wz
057c4     5C 02 90 AD |  if_e	jmp	#LR__0465
057c8     90 28 0E F2 | 	cmp	local06, #144 wz
057cc     60 02 90 AD |  if_e	jmp	#LR__0466
057d0     8D 28 0E F2 | 	cmp	local06, #141 wz
057d4     64 02 90 AD |  if_e	jmp	#LR__0467
057d8     8C 28 0E F2 | 	cmp	local06, #140 wz
057dc     68 02 90 AD |  if_e	jmp	#LR__0468
057e0     91 28 0E F2 | 	cmp	local06, #145 wz
057e4     6C 02 90 AD |  if_e	jmp	#LR__0469
057e8     8B 28 0E F2 | 	cmp	local06, #139 wz
057ec     70 02 90 AD |  if_e	jmp	#LR__0470
057f0     8F 28 0E F2 | 	cmp	local06, #143 wz
057f4     74 02 90 AD |  if_e	jmp	#LR__0471
057f8     6D 28 0E F2 | 	cmp	local06, #109 wz
057fc     78 02 90 AD |  if_e	jmp	#LR__0472
05800     70 28 0E F2 | 	cmp	local06, #112 wz
05804     BC 02 90 AD |  if_e	jmp	#LR__0479
05808     56 28 0E F2 | 	cmp	local06, #86 wz
0580c     74 02 90 AD |  if_e	jmp	#LR__0473
05810     57 28 0E F2 | 	cmp	local06, #87 wz
05814     AC 02 90 AD |  if_e	jmp	#LR__0479
05818     79 28 0E F2 | 	cmp	local06, #121 wz
0581c     70 02 90 AD |  if_e	jmp	#LR__0474
05820     77 28 0E F2 | 	cmp	local06, #119 wz
05824     74 02 90 AD |  if_e	jmp	#LR__0475
05828     78 28 0E F2 | 	cmp	local06, #120 wz
0582c     78 02 90 AD |  if_e	jmp	#LR__0476
05830     01 00 00 FF 
05834     04 28 0E F2 | 	cmp	local06, ##516 wz
05838     78 02 90 AD |  if_e	jmp	#LR__0477
0583c     7C 02 90 FD | 	jmp	#LR__0478
05840                 | LR__0423
05840     B8 0B B0 FD | 	call	#_compile_fun_2p
05844     FD 26 02 F6 | 	mov	local05, result1
05848     78 02 90 FD | 	jmp	#LR__0479
0584c                 | LR__0424
0584c     EC 0C B0 FD | 	call	#_compile_fun_4p
05850     FD 26 02 F6 | 	mov	local05, result1
05854     6C 02 90 FD | 	jmp	#LR__0479
05858                 | LR__0425
05858     EC 2D B0 FD | 	call	#_expr
0585c                 | ' expr()
0585c                 | ' return 0
0585c     00 26 06 F6 | 	mov	local05, #0
05860     60 02 90 FD | 	jmp	#LR__0479
05864                 | LR__0426
05864     08 0C B0 FD | 	call	#_compile_fun_3p
05868     FD 26 02 F6 | 	mov	local05, result1
0586c     54 02 90 FD | 	jmp	#LR__0479
05870                 | LR__0427
05870     D4 2D B0 FD | 	call	#_expr
05874                 | ' expr()
05874                 | ' return 0
05874     00 26 06 F6 | 	mov	local05, #0
05878     48 02 90 FD | 	jmp	#LR__0479
0587c                 | LR__0428
0587c     C8 2D B0 FD | 	call	#_expr
05880                 | ' expr()
05880                 | ' return 0
05880     00 26 06 F6 | 	mov	local05, #0
05884     3C 02 90 FD | 	jmp	#LR__0479
05888                 | LR__0429
05888     50 0F B0 FD | 	call	#_compile_fun_varp
0588c     FD 2C 02 F6 | 	mov	local08, result1
05890     30 02 90 FD | 	jmp	#LR__0479
05894                 | LR__0430
05894     B0 2D B0 FD | 	call	#_expr
05898                 | ' expr()
05898                 | ' return 0
05898     00 26 06 F6 | 	mov	local05, #0
0589c     24 02 90 FD | 	jmp	#LR__0479
058a0                 | LR__0431
058a0     38 0F B0 FD | 	call	#_compile_fun_varp
058a4     FD 2C 02 F6 | 	mov	local08, result1
058a8     18 02 90 FD | 	jmp	#LR__0479
058ac                 | LR__0432
058ac     2C 0F B0 FD | 	call	#_compile_fun_varp
058b0     FD 2C 02 F6 | 	mov	local08, result1
058b4     0C 02 90 FD | 	jmp	#LR__0479
058b8                 | LR__0433
058b8     A4 0D B0 FD | 	call	#_compile_fun_5p
058bc     FD 26 02 F6 | 	mov	local05, result1
058c0     00 02 90 FD | 	jmp	#LR__0479
058c4                 | LR__0434
058c4     00 19 B0 FD | 	call	#_compile_dim
058c8     B4 02 90 FD | 	jmp	#LR__0480
058cc                 | LR__0435
058cc     2C 0B B0 FD | 	call	#_compile_fun_2p
058d0     FD 26 02 F6 | 	mov	local05, result1
058d4     EC 01 90 FD | 	jmp	#LR__0479
058d8                 | LR__0436
058d8     C4 17 B0 FD | 	call	#_compile_else
058dc     A0 02 90 FD | 	jmp	#LR__0480
058e0                 | LR__0437
058e0     01 24 16 F2 | 	cmp	local04, #1 wc
058e4     08 00 90 CD |  if_b	jmp	#LR__0438
058e8     FC 29 B0 FD | 	call	#_compile_goto
058ec     90 02 90 FD | 	jmp	#LR__0480
058f0                 | LR__0438
058f0     19 12 06 F6 | 	mov	arg01, #25
058f4     60 1D B1 FD | 	call	#_printerror
058f8     84 02 90 FD | 	jmp	#LR__0480
058fc                 | LR__0439
058fc     70 0B B0 FD | 	call	#_compile_fun_3p
05900     FD 26 02 F6 | 	mov	local05, result1
05904     BC 01 90 FD | 	jmp	#LR__0479
05908                 | LR__0440
05908     30 0C B0 FD | 	call	#_compile_fun_4p
0590c     FD 26 02 F6 | 	mov	local05, result1
05910     B0 01 90 FD | 	jmp	#LR__0479
05914                 | LR__0441
05914     30 2D B0 FD | 	call	#_expr
05918                 | ' expr()
05918                 | ' return 0
05918     00 26 06 F6 | 	mov	local05, #0
0591c     A4 01 90 FD | 	jmp	#LR__0479
05920                 | LR__0442
05920     EC 1F B0 FD | 	call	#_compile_for
05924     58 02 90 FD | 	jmp	#LR__0480
05928                 | LR__0443
05928     10 0C B0 FD | 	call	#_compile_fun_4p
0592c     FD 26 02 F6 | 	mov	local05, result1
05930     90 01 90 FD | 	jmp	#LR__0479
05934                 | LR__0444
05934     28 16 B0 FD | 	call	#_compile_if
05938     44 02 90 FD | 	jmp	#LR__0480
0593c                 | LR__0445
0593c     08 2D B0 FD | 	call	#_expr
05940                 | ' expr()
05940                 | ' return 0
05940     00 26 06 F6 | 	mov	local05, #0
05944     7C 01 90 FD | 	jmp	#LR__0479
05948                 | LR__0446
05948     FC 2C B0 FD | 	call	#_expr
0594c                 | ' expr()
0594c                 | ' return 0
0594c     00 26 06 F6 | 	mov	local05, #0
05950     70 01 90 FD | 	jmp	#LR__0479
05954                 | LR__0447
05954     84 0E B0 FD | 	call	#_compile_fun_varp
05958     FD 2C 02 F6 | 	mov	local08, result1
0595c     64 01 90 FD | 	jmp	#LR__0479
05960                 | LR__0448
05960     78 0E B0 FD | 	call	#_compile_fun_varp
05964     FD 2C 02 F6 | 	mov	local08, result1
05968     58 01 90 FD | 	jmp	#LR__0479
0596c                 | LR__0449
0596c     D8 2C B0 FD | 	call	#_expr
05970                 | ' expr()
05970                 | ' return 0
05970     00 26 06 F6 | 	mov	local05, #0
05974     4C 01 90 FD | 	jmp	#LR__0479
05978                 | LR__0450
05978     CC 2C B0 FD | 	call	#_expr
0597c                 | ' expr()
0597c                 | ' return 0
0597c     00 26 06 F6 | 	mov	local05, #0
05980     40 01 90 FD | 	jmp	#LR__0479
05984                 | LR__0451
05984     B0 27 B0 FD | 	call	#_compile_next
05988     F4 01 90 FD | 	jmp	#LR__0480
0598c                 | LR__0452
0598c     B8 2C B0 FD | 	call	#_expr
05990                 | ' expr()
05990                 | ' return 0
05990     00 26 06 F6 | 	mov	local05, #0
05994     2C 01 90 FD | 	jmp	#LR__0479
05998                 | LR__0453
05998     AC 2C B0 FD | 	call	#_expr
0599c                 | ' expr()
0599c                 | ' return 0
0599c     00 26 06 F6 | 	mov	local05, #0
059a0     20 01 90 FD | 	jmp	#LR__0479
059a4                 | LR__0454
059a4     A0 2C B0 FD | 	call	#_expr
059a8                 | ' expr()
059a8                 | ' return 0
059a8     00 26 06 F6 | 	mov	local05, #0
059ac     14 01 90 FD | 	jmp	#LR__0479
059b0                 | LR__0455
059b0     94 2C B0 FD | 	call	#_expr
059b4                 | ' expr()
059b4                 | ' return 0
059b4     00 26 06 F6 | 	mov	local05, #0
059b8     08 01 90 FD | 	jmp	#LR__0479
059bc                 | LR__0456
059bc     7C 0B B0 FD | 	call	#_compile_fun_4p
059c0     FD 26 02 F6 | 	mov	local05, result1
059c4     FC 00 90 FD | 	jmp	#LR__0479
059c8                 | LR__0457
059c8     7C 2C B0 FD | 	call	#_expr
059cc                 | ' expr()
059cc                 | ' return 0
059cc     00 26 06 F6 | 	mov	local05, #0
059d0     F0 00 90 FD | 	jmp	#LR__0479
059d4                 | LR__0458
059d4     24 0A B0 FD | 	call	#_compile_fun_2p
059d8     FD 26 02 F6 | 	mov	local05, result1
059dc     E4 00 90 FD | 	jmp	#LR__0479
059e0                 | LR__0459
059e0     F8 0D B0 FD | 	call	#_compile_fun_varp
059e4     FD 2C 02 F6 | 	mov	local08, result1
059e8     D8 00 90 FD | 	jmp	#LR__0479
059ec                 | LR__0460
059ec     0C 0A B0 FD | 	call	#_compile_fun_2p
059f0     FD 26 02 F6 | 	mov	local05, result1
059f4     CC 00 90 FD | 	jmp	#LR__0479
059f8                 | LR__0461
059f8     00 0A B0 FD | 	call	#_compile_fun_2p
059fc     FD 26 02 F6 | 	mov	local05, result1
05a00     C0 00 90 FD | 	jmp	#LR__0479
05a04                 | LR__0462
05a04     80 0E B0 FD | 	call	#_compile_print
05a08     FD 26 02 F6 | 	mov	local05, result1
05a0c     70 01 90 FD | 	jmp	#LR__0480
05a10                 | LR__0463
05a10     34 2C B0 FD | 	call	#_expr
05a14                 | ' expr()
05a14                 | ' return 0
05a14     AC 00 90 FD | 	jmp	#LR__0479
05a18                 | LR__0464
05a18     C0 0D B0 FD | 	call	#_compile_fun_varp
05a1c     FD 2C 02 F6 | 	mov	local08, result1
05a20     A0 00 90 FD | 	jmp	#LR__0479
05a24                 | LR__0465
05a24     D4 09 B0 FD | 	call	#_compile_fun_2p
05a28     FD 26 02 F6 | 	mov	local05, result1
05a2c     94 00 90 FD | 	jmp	#LR__0479
05a30                 | LR__0466
05a30     C8 09 B0 FD | 	call	#_compile_fun_2p
05a34     FD 26 02 F6 | 	mov	local05, result1
05a38     88 00 90 FD | 	jmp	#LR__0479
05a3c                 | LR__0467
05a3c     BC 09 B0 FD | 	call	#_compile_fun_2p
05a40     FD 26 02 F6 | 	mov	local05, result1
05a44     7C 00 90 FD | 	jmp	#LR__0479
05a48                 | LR__0468
05a48     B0 09 B0 FD | 	call	#_compile_fun_2p
05a4c     FD 26 02 F6 | 	mov	local05, result1
05a50     70 00 90 FD | 	jmp	#LR__0479
05a54                 | LR__0469
05a54     A4 09 B0 FD | 	call	#_compile_fun_2p
05a58     FD 26 02 F6 | 	mov	local05, result1
05a5c     64 00 90 FD | 	jmp	#LR__0479
05a60                 | LR__0470
05a60     98 09 B0 FD | 	call	#_compile_fun_2p
05a64     FD 26 02 F6 | 	mov	local05, result1
05a68     58 00 90 FD | 	jmp	#LR__0479
05a6c                 | LR__0471
05a6c     8C 09 B0 FD | 	call	#_compile_fun_2p
05a70     FD 26 02 F6 | 	mov	local05, result1
05a74     4C 00 90 FD | 	jmp	#LR__0479
05a78                 | LR__0472
05a78     F4 09 B0 FD | 	call	#_compile_fun_3p
05a7c     FD 26 02 F6 | 	mov	local05, result1
05a80     40 00 90 FD | 	jmp	#LR__0479
05a84                 | LR__0473
05a84     C0 2B B0 FD | 	call	#_expr
05a88                 | ' expr()
05a88                 | ' return 0
05a88     00 26 06 F6 | 	mov	local05, #0
05a8c     34 00 90 FD | 	jmp	#LR__0479
05a90                 | LR__0474
05a90     68 09 B0 FD | 	call	#_compile_fun_2p
05a94     FD 26 02 F6 | 	mov	local05, result1
05a98     28 00 90 FD | 	jmp	#LR__0479
05a9c                 | LR__0475
05a9c     5C 09 B0 FD | 	call	#_compile_fun_2p
05aa0     FD 26 02 F6 | 	mov	local05, result1
05aa4     1C 00 90 FD | 	jmp	#LR__0479
05aa8                 | LR__0476
05aa8     50 09 B0 FD | 	call	#_compile_fun_2p
05aac     FD 26 02 F6 | 	mov	local05, result1
05ab0     10 00 90 FD | 	jmp	#LR__0479
05ab4                 | LR__0477
05ab4     20 01 B0 FD | 	call	#_compile_array_assign
05ab8     C4 00 90 FD | 	jmp	#LR__0480
05abc                 | LR__0478
05abc     80 08 B0 FD | 	call	#_compile_unknown
05ac0     BC 00 90 FD | 	jmp	#LR__0480
05ac4                 | LR__0479
05ac4     14 23 02 F6 | 	mov	local03, local06
05ac8     16 1F 02 F6 | 	mov	local01, local08
05acc     0F 2B 02 F6 | 	mov	local07, local01
05ad0     10 2F 02 F6 | 	mov	local09, local02
05ad4     11 1F 02 F6 | 	mov	local01, local03
05ad8     69 00 00 FF 
05adc     E0 E5 05 F1 | 	add	objptr, ##54240
05ae0     F2 2C 02 FB | 	rdlong	local08, objptr
05ae4     16 29 02 F6 | 	mov	local06, local08
05ae8     01 28 66 F0 | 	shl	local06, #1
05aec     16 29 02 F1 | 	add	local06, local08
05af0     02 28 66 F0 | 	shl	local06, #2
05af4     03 00 00 FF 
05af8     00 E4 85 F1 | 	sub	objptr, ##1536
05afc     F2 28 02 F1 | 	add	local06, objptr
05b00     14 2B 62 FC | 	wrlong	local07, local06
05b04     03 00 00 FF 
05b08     00 E4 05 F1 | 	add	objptr, ##1536
05b0c     F2 2C 02 FB | 	rdlong	local08, objptr
05b10     16 2B 02 F6 | 	mov	local07, local08
05b14     01 2A 66 F0 | 	shl	local07, #1
05b18     16 2B 02 F1 | 	add	local07, local08
05b1c     02 2A 66 F0 | 	shl	local07, #2
05b20     03 00 00 FF 
05b24     00 E4 85 F1 | 	sub	objptr, ##1536
05b28     F2 2A 02 F1 | 	add	local07, objptr
05b2c     04 2A 06 F1 | 	add	local07, #4
05b30     15 2F 62 FC | 	wrlong	local09, local07
05b34     03 00 00 FF 
05b38     00 E4 05 F1 | 	add	objptr, ##1536
05b3c     F2 2E 02 FB | 	rdlong	local09, objptr
05b40     17 2D 02 F6 | 	mov	local08, local09
05b44     01 2C 66 F0 | 	shl	local08, #1
05b48     17 2D 02 F1 | 	add	local08, local09
05b4c     02 2C 66 F0 | 	shl	local08, #2
05b50     03 00 00 FF 
05b54     00 E4 85 F1 | 	sub	objptr, ##1536
05b58     F2 2C 02 F1 | 	add	local08, objptr
05b5c     08 2C 06 F1 | 	add	local08, #8
05b60     16 1F 62 FC | 	wrlong	local01, local08
05b64     03 00 00 FF 
05b68     00 E4 05 F1 | 	add	objptr, ##1536
05b6c     F2 2A 02 FB | 	rdlong	local07, objptr
05b70     01 2A 06 F1 | 	add	local07, #1
05b74     F2 2A 62 FC | 	wrlong	local07, objptr
05b78     69 00 00 FF 
05b7c     E0 E5 85 F1 | 	sub	objptr, ##54240
05b80                 | LR__0480
05b80                 | ' 
05b80                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
05b80                 | ' 450 if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
05b80     00 24 0E F2 | 	cmp	local04, #0 wz
05b84     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05b88     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
05b8c     38 00 90 5D |  if_ne	jmp	#LR__0481
05b90     69 00 00 FF 
05b94     E0 E5 05 F1 | 	add	objptr, ##54240
05b98     F2 2E 02 FB | 	rdlong	local09, objptr
05b9c     17 1F 02 F6 | 	mov	local01, local09
05ba0     01 1E 66 F0 | 	shl	local01, #1
05ba4     17 1F 02 F1 | 	add	local01, local09
05ba8     02 1E 66 F0 | 	shl	local01, #2
05bac     03 00 00 FF 
05bb0     00 E4 85 F1 | 	sub	objptr, ##1536
05bb4     F2 1E 02 F1 | 	add	local01, objptr
05bb8     08 1E 06 F1 | 	add	local01, #8
05bbc     0F FD 6B FC | 	wrlong	#510, local01
05bc0     66 00 00 FF 
05bc4     E0 E5 85 F1 | 	sub	objptr, ##52704
05bc8                 | LR__0481
05bc8                 | ' 
05bc8                 | ' ' print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
05bc8                 | ' return err
05bc8     13 FB 01 F6 | 	mov	result1, local05
05bcc     A7 F0 03 F6 | 	mov	ptra, fp
05bd0     B2 00 A0 FD | 	call	#popregs_
05bd4                 | _compile_immediate_ret
05bd4     2D 00 64 FD | 	ret
05bd8                 | 
05bd8                 | ' 
05bd8                 | ' sub compile_array_assign
05bd8                 | _compile_array_assign
05bd8     0A 4A 05 F6 | 	mov	COUNT_, #10
05bdc     A8 00 A0 FD | 	call	#pushregs_
05be0     00 24 06 F6 | 	mov	local04, #0
05be4     56 00 00 FF 
05be8     A8 E5 05 F1 | 	add	objptr, ##44456
05bec     F2 26 02 FB | 	rdlong	local05, objptr
05bf0     13 FB 01 F6 | 	mov	result1, local05
05bf4     01 FA 85 F1 | 	sub	result1, #1
05bf8     03 FA 65 F0 | 	shl	result1, #3
05bfc     02 00 00 FF 
05c00     38 E4 85 F1 | 	sub	objptr, ##1080
05c04     F2 FA 01 F1 | 	add	result1, objptr
05c08     FD 28 02 FB | 	rdlong	local06, result1
05c0c                 | ' numpar=0
05c0c                 | ' 'print "In array_assign, lparts(ct).token=",lparts(ct).token,lparts(ct).part$
05c0c                 | ' ' todo here: recognize params and t1.result.twowords=numpar
05c0c                 | ' varname$=lparts(ct-1).part$' : print "In array_assign, varname$=";varname$
05c0c                 | ' if lparts(ct).token=token_lpar then
05c0c     03 26 66 F0 | 	shl	local05, #3
05c10     F2 26 02 F1 | 	add	local05, objptr
05c14     04 26 06 F1 | 	add	local05, #4
05c18     13 27 02 FB | 	rdlong	local05, local05
05c1c     15 26 0E F2 | 	cmp	local05, #21 wz
05c20     54 00 00 FF 
05c24     70 E5 85 F1 | 	sub	objptr, ##43376
05c28     D4 01 90 5D |  if_ne	jmp	#LR__0494
05c2c     56 00 00 FF 
05c30     A8 E5 05 F1 | 	add	objptr, ##44456
05c34     F2 2A 02 FB | 	rdlong	local07, objptr
05c38     01 2A 06 F1 | 	add	local07, #1
05c3c     F2 2A 62 FC | 	wrlong	local07, objptr
05c40     56 00 00 FF 
05c44     A8 E5 85 F1 | 	sub	objptr, ##44456
05c48                 | '   ct+=1 											' omit this lpar, this is for expr list
05c48                 | '   do
05c48                 | LR__0490
05c48     FC 29 B0 FD | 	call	#_expr
05c4c     56 00 00 FF 
05c50     A8 E5 05 F1 | 	add	objptr, ##44456
05c54     F2 26 02 FB | 	rdlong	local05, objptr
05c58     01 26 06 F1 | 	add	local05, #1
05c5c     F2 26 62 FC | 	wrlong	local05, objptr
05c60     01 24 06 F1 | 	add	local04, #1
05c64     01 26 86 F1 | 	sub	local05, #1
05c68     03 26 66 F0 | 	shl	local05, #3
05c6c     02 00 00 FF 
05c70     38 E4 85 F1 | 	sub	objptr, ##1080
05c74     F2 26 02 F1 | 	add	local05, objptr
05c78     04 26 06 F1 | 	add	local05, #4
05c7c     13 2B 02 FB | 	rdlong	local07, local05
05c80     14 2A 0E F2 | 	cmp	local07, #20 wz
05c84     54 00 00 FF 
05c88     70 E5 85 F1 | 	sub	objptr, ##43376
05c8c     34 00 90 AD |  if_e	jmp	#LR__0491
05c90     56 00 00 FF 
05c94     A8 E5 05 F1 | 	add	objptr, ##44456
05c98     F2 2A 02 FB | 	rdlong	local07, objptr
05c9c     03 2A 66 F0 | 	shl	local07, #3
05ca0     02 00 00 FF 
05ca4     38 E4 85 F1 | 	sub	objptr, ##1080
05ca8     F2 2A 02 F1 | 	add	local07, objptr
05cac     04 2A 06 F1 | 	add	local07, #4
05cb0     15 2B 02 FB | 	rdlong	local07, local07
05cb4     FE 2B 0E F2 | 	cmp	local07, #510 wz
05cb8     54 00 00 FF 
05cbc     70 E5 85 F1 | 	sub	objptr, ##43376
05cc0     84 FF 9F 5D |  if_ne	jmp	#LR__0490
05cc4                 | LR__0491
05cc4     56 00 00 FF 
05cc8     A8 E5 05 F1 | 	add	objptr, ##44456
05ccc     F2 2A 02 FB | 	rdlong	local07, objptr
05cd0     01 2A 06 F1 | 	add	local07, #1
05cd4     F2 2A 62 FC | 	wrlong	local07, objptr
05cd8     56 00 00 FF 
05cdc     A8 E5 85 F1 | 	sub	objptr, ##44456
05ce0     64 29 B0 FD | 	call	#_expr
05ce4     01 2C 66 F6 | 	neg	local08, #1
05ce8     00 2E 06 F6 | 	mov	local09, #0
05cec                 | ' '   print "in array_assign, rpar found, numpar=",numpar
05cec                 | '  'if lparts(ct).token=token_end then print "in getfun, end found, numpar=",numpar
05cec                 | ' 'if lparts(ct).token<>token_eq then print "in array_assign,= expected" else print "in array_assign,= found"
05cec                 | ' ct+=1 : expr()
05cec                 | ' ' now find the vae
05cec                 | ' 
05cec                 | ' j=-1 : i=0 : do : 
05cec                 | LR__0492
05cec                 | '   if variables(i).name=varname$ then j=i: exit loop
05cec     17 27 02 F6 | 	mov	local05, local09
05cf0     04 26 66 F0 | 	shl	local05, #4
05cf4     34 00 00 FF 
05cf8     6C E5 05 F1 | 	add	objptr, ##26988
05cfc     F2 26 02 F1 | 	add	local05, objptr
05d00     13 13 02 FB | 	rdlong	arg01, local05
05d04     14 15 02 F6 | 	mov	arg02, local06
05d08     34 00 00 FF 
05d0c     6C E5 85 F1 | 	sub	objptr, ##26988
05d10     7C 4F B1 FD | 	call	#__system___string_cmp
05d14     00 FA 0D F2 | 	cmp	result1, #0 wz
05d18     17 2D 02 A6 |  if_e	mov	local08, local09
05d1c     20 00 90 AD |  if_e	jmp	#LR__0493
05d20     01 2E 06 F1 | 	add	local09, #1
05d24     54 00 00 FF 
05d28     6C E5 05 F1 | 	add	objptr, ##43372
05d2c     F2 2A 02 FB | 	rdlong	local07, objptr
05d30     54 00 00 FF 
05d34     6C E5 85 F1 | 	sub	objptr, ##43372
05d38     15 2F 5A F2 | 	cmps	local09, local07 wcz
05d3c     AC FF 9F ED |  if_be	jmp	#LR__0492
05d40                 | LR__0493
05d40     16 1F 02 F6 | 	mov	local01, local08
05d44     12 21 02 F6 | 	mov	local02, local04
05d48     17 22 06 F6 | 	mov	local03, #23
05d4c     0F 2B 02 F6 | 	mov	local07, local01
05d50     10 31 02 F6 | 	mov	local10, local02
05d54     11 2D 02 F6 | 	mov	local08, local03
05d58     69 00 00 FF 
05d5c     E0 E5 05 F1 | 	add	objptr, ##54240
05d60     F2 1E 02 FB | 	rdlong	local01, objptr
05d64     0F 2F 02 F6 | 	mov	local09, local01
05d68     01 2E 66 F0 | 	shl	local09, #1
05d6c     0F 2F 02 F1 | 	add	local09, local01
05d70     02 2E 66 F0 | 	shl	local09, #2
05d74     03 00 00 FF 
05d78     00 E4 85 F1 | 	sub	objptr, ##1536
05d7c     F2 2E 02 F1 | 	add	local09, objptr
05d80     17 2B 62 FC | 	wrlong	local07, local09
05d84     03 00 00 FF 
05d88     00 E4 05 F1 | 	add	objptr, ##1536
05d8c     F2 1E 02 FB | 	rdlong	local01, objptr
05d90     0F 2F 02 F6 | 	mov	local09, local01
05d94     01 2E 66 F0 | 	shl	local09, #1
05d98     0F 2F 02 F1 | 	add	local09, local01
05d9c     02 2E 66 F0 | 	shl	local09, #2
05da0     03 00 00 FF 
05da4     00 E4 85 F1 | 	sub	objptr, ##1536
05da8     F2 2E 02 F1 | 	add	local09, objptr
05dac     04 2E 06 F1 | 	add	local09, #4
05db0     17 31 62 FC | 	wrlong	local10, local09
05db4     03 00 00 FF 
05db8     00 E4 05 F1 | 	add	objptr, ##1536
05dbc     F2 30 02 FB | 	rdlong	local10, objptr
05dc0     18 1F 02 F6 | 	mov	local01, local10
05dc4     01 1E 66 F0 | 	shl	local01, #1
05dc8     18 1F 02 F1 | 	add	local01, local10
05dcc     02 1E 66 F0 | 	shl	local01, #2
05dd0     03 00 00 FF 
05dd4     00 E4 85 F1 | 	sub	objptr, ##1536
05dd8     F2 1E 02 F1 | 	add	local01, objptr
05ddc     08 1E 06 F1 | 	add	local01, #8
05de0     0F 2D 62 FC | 	wrlong	local08, local01
05de4     03 00 00 FF 
05de8     00 E4 05 F1 | 	add	objptr, ##1536
05dec     F2 2A 02 FB | 	rdlong	local07, objptr
05df0     01 2A 06 F1 | 	add	local07, #1
05df4     F2 2A 62 FC | 	wrlong	local07, objptr
05df8     69 00 00 FF 
05dfc     E0 E5 85 F1 | 	sub	objptr, ##54240
05e00                 | LR__0494
05e00     A7 F0 03 F6 | 	mov	ptra, fp
05e04     B2 00 A0 FD | 	call	#popregs_
05e08                 | _compile_array_assign_ret
05e08     2D 00 64 FD | 	ret
05e0c                 | 
05e0c                 | ' 
05e0c                 | ' 
05e0c                 | ' sub compile_immediate_assign(linetype as ulong)
05e0c                 | _compile_immediate_assign
05e0c     09 4A 05 F6 | 	mov	COUNT_, #9
05e10     A8 00 A0 FD | 	call	#pushregs_
05e14     09 25 0A F6 | 	mov	local04, arg01 wz
05e18     FF 22 06 F6 | 	mov	local03, #255
05e1c     01 26 66 F6 | 	neg	local05, #1
05e20                 | ' 
05e20                 | ' t1.result_type=result_error : t1.result.uresult=0
05e20                 | ' i=-1: j=-1
05e20                 | ' 
05e20                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
05e20     2C 00 90 5D |  if_ne	jmp	#LR__0500
05e24     54 00 00 FF 
05e28     70 E5 05 F1 | 	add	objptr, ##43376
05e2c     F2 28 02 FB | 	rdlong	local06, objptr
05e30     02 00 00 FF 
05e34     38 E4 05 F1 | 	add	objptr, ##1080
05e38     F2 04 68 FC | 	wrlong	#2, objptr
05e3c     13 00 00 FF 
05e40     38 E4 05 F1 | 	add	objptr, ##9784
05e44     F2 00 68 FC | 	wrlong	#0, objptr
05e48     69 00 00 FF 
05e4c     E0 E5 85 F1 | 	sub	objptr, ##54240
05e50                 | LR__0500
05e50                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
05e50     02 24 0E F2 | 	cmp	local04, #2 wz
05e54     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05e58     54 00 00 AF 
05e5c     70 E5 05 A1 |  if_e	add	objptr, ##43376
05e60     F2 28 02 AB |  if_e	rdlong	local06, objptr
05e64     02 00 00 AF 
05e68     38 E4 05 A1 |  if_e	add	objptr, ##1080
05e6c     F2 04 68 AC |  if_e	wrlong	#2, objptr
05e70     56 00 00 AF 
05e74     A8 E5 85 A1 |  if_e	sub	objptr, ##44456
05e78                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
05e78     04 24 0E F2 | 	cmp	local04, #4 wz
05e7c     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
05e80     2C 00 90 5D |  if_ne	jmp	#LR__0501
05e84     54 00 00 FF 
05e88     78 E5 05 F1 | 	add	objptr, ##43384
05e8c     F2 28 02 FB | 	rdlong	local06, objptr
05e90     02 00 00 FF 
05e94     30 E4 05 F1 | 	add	objptr, ##1072
05e98     F2 06 68 FC | 	wrlong	#3, objptr
05e9c     13 00 00 FF 
05ea0     38 E4 05 F1 | 	add	objptr, ##9784
05ea4     F2 04 68 FC | 	wrlong	#2, objptr
05ea8     69 00 00 FF 
05eac     E0 E5 85 F1 | 	sub	objptr, ##54240
05eb0                 | LR__0501
05eb0                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
05eb0     05 24 0E F2 | 	cmp	local04, #5 wz
05eb4     3C 00 90 5D |  if_ne	jmp	#LR__0502
05eb8     56 00 00 FF 
05ebc     A8 E5 05 F1 | 	add	objptr, ##44456
05ec0     F2 FA 01 FB | 	rdlong	result1, objptr
05ec4     FD 28 02 F6 | 	mov	local06, result1
05ec8     03 28 66 F0 | 	shl	local06, #3
05ecc     02 00 00 FF 
05ed0     38 E4 85 F1 | 	sub	objptr, ##1080
05ed4     F2 28 02 F1 | 	add	local06, objptr
05ed8     14 29 02 FB | 	rdlong	local06, local06
05edc     02 FA 05 F1 | 	add	result1, #2
05ee0     02 00 00 FF 
05ee4     38 E4 05 F1 | 	add	objptr, ##1080
05ee8     F2 FA 61 FC | 	wrlong	result1, objptr
05eec     56 00 00 FF 
05ef0     A8 E5 85 F1 | 	sub	objptr, ##44456
05ef4                 | LR__0502
05ef4     14 13 02 F6 | 	mov	arg01, local06
05ef8     01 14 06 F6 | 	mov	arg02, #1
05efc     38 6E B1 FD | 	call	#__system__Right_S
05f00     44 27 B0 FD | 	call	#_expr
05f04                 | '  
05f04                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
05f04                 | ' 
05f04                 | ' suffix2$=right$(varname2$,1)
05f04                 | ' expr()
05f04                 | ' 
05f04                 | ' 
05f04                 | ' if varnum>0 then
05f04     54 00 00 FF 
05f08     6C E5 05 F1 | 	add	objptr, ##43372
05f0c     F2 2A 02 FB | 	rdlong	local07, objptr
05f10     54 00 00 FF 
05f14     6C E5 85 F1 | 	sub	objptr, ##43372
05f18     01 2A 56 F2 | 	cmps	local07, #1 wc
05f1c     58 00 90 CD |  if_b	jmp	#LR__0505
05f20                 | '   for i=0 to varnum-1
05f20     00 2C 06 F6 | 	mov	local08, #0
05f24     54 00 00 FF 
05f28     6C E5 05 F1 | 	add	objptr, ##43372
05f2c     F2 2E 02 FB | 	rdlong	local09, objptr
05f30     54 00 00 FF 
05f34     6C E5 85 F1 | 	sub	objptr, ##43372
05f38                 | LR__0503
05f38     17 2D 52 F2 | 	cmps	local08, local09 wc
05f3c     38 00 90 3D |  if_ae	jmp	#LR__0504
05f40                 | '     if variables(i).name=varname2$ then j=i : exit
05f40     16 2B 02 F6 | 	mov	local07, local08
05f44     04 2A 66 F0 | 	shl	local07, #4
05f48     34 00 00 FF 
05f4c     6C E5 05 F1 | 	add	objptr, ##26988
05f50     F2 2A 02 F1 | 	add	local07, objptr
05f54     15 13 02 FB | 	rdlong	arg01, local07
05f58     14 15 02 F6 | 	mov	arg02, local06
05f5c     34 00 00 FF 
05f60     6C E5 85 F1 | 	sub	objptr, ##26988
05f64     28 4D B1 FD | 	call	#__system___string_cmp
05f68     00 FA 0D F2 | 	cmp	result1, #0 wz
05f6c     16 27 02 A6 |  if_e	mov	local05, local08
05f70     01 2C 06 51 |  if_ne	add	local08, #1
05f74     C0 FF 9F 5D |  if_ne	jmp	#LR__0503
05f78                 | LR__0504
05f78                 | LR__0505
05f78                 | ' if  j=-1 andalso varnum<maxvars then   
05f78     FF FF 7F FF 
05f7c     FF 27 0E F2 | 	cmp	local05, ##-1 wz
05f80     60 00 90 5D |  if_ne	jmp	#LR__0506
05f84     54 00 00 FF 
05f88     6C E5 05 F1 | 	add	objptr, ##43372
05f8c     F2 2A 02 FB | 	rdlong	local07, objptr
05f90     54 00 00 FF 
05f94     6C E5 85 F1 | 	sub	objptr, ##43372
05f98     01 00 00 FF 
05f9c     FF 2B 56 F2 | 	cmps	local07, ##1023 wc
05fa0     40 00 90 3D |  if_ae	jmp	#LR__0506
05fa4     54 00 00 FF 
05fa8     6C E5 05 F1 | 	add	objptr, ##43372
05fac     F2 2E 02 FB | 	rdlong	local09, objptr
05fb0     04 2E 66 F0 | 	shl	local09, #4
05fb4     20 00 00 FF 
05fb8     00 E4 85 F1 | 	sub	objptr, ##16384
05fbc     F2 2E 02 F1 | 	add	local09, objptr
05fc0     17 29 62 FC | 	wrlong	local06, local09
05fc4     20 00 00 FF 
05fc8     00 E4 05 F1 | 	add	objptr, ##16384
05fcc     F2 2A 02 FB | 	rdlong	local07, objptr
05fd0     15 27 02 F6 | 	mov	local05, local07
05fd4     01 2A 06 F1 | 	add	local07, #1
05fd8     F2 2A 62 FC | 	wrlong	local07, objptr
05fdc     54 00 00 FF 
05fe0     6C E5 85 F1 | 	sub	objptr, ##43372
05fe4                 | LR__0506
05fe4     13 1F 02 F6 | 	mov	local01, local05
05fe8     17 22 06 F6 | 	mov	local03, #23
05fec     0F 2B 02 F6 | 	mov	local07, local01
05ff0     10 2F 02 F6 | 	mov	local09, local02
05ff4     11 1F 02 F6 | 	mov	local01, local03
05ff8     69 00 00 FF 
05ffc     E0 E5 05 F1 | 	add	objptr, ##54240
06000     F2 2C 02 FB | 	rdlong	local08, objptr
06004     16 29 02 F6 | 	mov	local06, local08
06008     01 28 66 F0 | 	shl	local06, #1
0600c     16 29 02 F1 | 	add	local06, local08
06010     02 28 66 F0 | 	shl	local06, #2
06014     03 00 00 FF 
06018     00 E4 85 F1 | 	sub	objptr, ##1536
0601c     F2 28 02 F1 | 	add	local06, objptr
06020     14 2B 62 FC | 	wrlong	local07, local06
06024     03 00 00 FF 
06028     00 E4 05 F1 | 	add	objptr, ##1536
0602c     F2 2C 02 FB | 	rdlong	local08, objptr
06030     16 2B 02 F6 | 	mov	local07, local08
06034     01 2A 66 F0 | 	shl	local07, #1
06038     16 2B 02 F1 | 	add	local07, local08
0603c     02 2A 66 F0 | 	shl	local07, #2
06040     03 00 00 FF 
06044     00 E4 85 F1 | 	sub	objptr, ##1536
06048     F2 2A 02 F1 | 	add	local07, objptr
0604c     04 2A 06 F1 | 	add	local07, #4
06050     15 2F 62 FC | 	wrlong	local09, local07
06054     03 00 00 FF 
06058     00 E4 05 F1 | 	add	objptr, ##1536
0605c     F2 2E 02 FB | 	rdlong	local09, objptr
06060     17 2D 02 F6 | 	mov	local08, local09
06064     01 2C 66 F0 | 	shl	local08, #1
06068     17 2D 02 F1 | 	add	local08, local09
0606c     02 2C 66 F0 | 	shl	local08, #2
06070     03 00 00 FF 
06074     00 E4 85 F1 | 	sub	objptr, ##1536
06078     F2 2C 02 F1 | 	add	local08, objptr
0607c     08 2C 06 F1 | 	add	local08, #8
06080     16 1F 62 FC | 	wrlong	local01, local08
06084     03 00 00 FF 
06088     00 E4 05 F1 | 	add	objptr, ##1536
0608c     F2 2A 02 FB | 	rdlong	local07, objptr
06090     01 2A 06 F1 | 	add	local07, #1
06094     F2 2A 62 FC | 	wrlong	local07, objptr
06098     69 00 00 FF 
0609c     E0 E5 85 F1 | 	sub	objptr, ##54240
060a0                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
060a0                 | ' 
060a0                 | ' 
060a0                 | ' 
060a0                 | ' 
060a0                 | ' 
060a0                 | ' 
060a0                 | ' compiledline(lineptr)=t1:  lineptr+=1 
060a0                 | '  if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
060a0     00 24 0E F2 | 	cmp	local04, #0 wz
060a4     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
060a8     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
060ac     38 00 90 5D |  if_ne	jmp	#LR__0507
060b0     69 00 00 FF 
060b4     E0 E5 05 F1 | 	add	objptr, ##54240
060b8     F2 1E 02 FB | 	rdlong	local01, objptr
060bc     0F 2F 02 F6 | 	mov	local09, local01
060c0     01 2E 66 F0 | 	shl	local09, #1
060c4     0F 2F 02 F1 | 	add	local09, local01
060c8     02 2E 66 F0 | 	shl	local09, #2
060cc     03 00 00 FF 
060d0     00 E4 85 F1 | 	sub	objptr, ##1536
060d4     F2 2E 02 F1 | 	add	local09, objptr
060d8     08 2E 06 F1 | 	add	local09, #8
060dc     17 FD 6B FC | 	wrlong	#510, local09
060e0     66 00 00 FF 
060e4     E0 E5 85 F1 | 	sub	objptr, ##52704
060e8                 | LR__0507
060e8     A7 F0 03 F6 | 	mov	ptra, fp
060ec     B2 00 A0 FD | 	call	#popregs_
060f0                 | _compile_immediate_assign_ret
060f0     2D 00 64 FD | 	ret
060f4                 | 
060f4                 | ' 
060f4                 | ' ' ------------------ compile the line that is calling a command 
060f4                 | ' 
060f4                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
060f4                 | _compile
060f4     04 4A 05 F6 | 	mov	COUNT_, #4
060f8     A8 00 A0 FD | 	call	#pushregs_
060fc     09 1F 0A F6 | 	mov	local01, arg01 wz
06100     0A 21 02 F6 | 	mov	local02, arg02
06104     0B 23 02 F6 | 	mov	local03, arg03
06108                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
06108                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
06108                 | '  
06108                 | ' '  print "called compile with line= "; alinemajor;" and cont= "; cont 
06108                 | ' if alinemajor=0 then err=compile_immediate(0) : return err  
06108     0C 00 90 5D |  if_ne	jmp	#LR__0510
0610c     00 12 06 F6 | 	mov	arg01, #0
06110     44 F4 BF FD | 	call	#_compile_immediate
06114     A0 00 90 FD | 	jmp	#LR__0517
06118                 | LR__0510
06118     66 00 00 FF 
0611c     E0 E5 05 F1 | 	add	objptr, ##52704
06120     F2 1E 62 FC | 	wrlong	local01, objptr
06124     04 E4 05 F1 | 	add	objptr, #4
06128     F2 20 62 FC | 	wrlong	local02, objptr
0612c     66 00 00 FF 
06130     E4 E5 85 F1 | 	sub	objptr, ##52708
06134     11 13 02 F6 | 	mov	arg01, local03
06138     01 12 06 F1 | 	add	arg01, #1
0613c     18 F4 BF FD | 	call	#_compile_immediate
06140     FD 24 0A F6 | 	mov	local04, result1 wz
06144                 | ' 
06144                 | ' ucompiledline(0)=alinemajor
06144                 | ' ucompiledline(1)=alineminor
06144                 | ' 
06144                 | ' 
06144                 | ' ' cont: 0: this is the first part of the line that will continue
06144                 | ' ' 1 - this is the continuation of the line
06144                 | ' ' 2 - this is the last continued line
06144                 | ' ' 3 - this is the ome and only part
06144                 | ' 
06144                 | ' err=compile_immediate(cont+1) 
06144                 | ' if err=0 then
06144     6C 00 90 5D |  if_ne	jmp	#LR__0516
06148                 | '   if cont=3 orelse cont=2 then 
06148     03 22 0E F2 | 	cmp	local03, #3 wz
0614c     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
06150     60 00 90 5D |  if_ne	jmp	#LR__0515
06154                 | '     if alinemajor >lastline then 
06154     69 00 00 FF 
06158     EC E5 05 F1 | 	add	objptr, ##54252
0615c     F2 16 02 FB | 	rdlong	arg03, objptr
06160     69 00 00 FF 
06164     EC E5 85 F1 | 	sub	objptr, ##54252
06168     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
0616c     0C 00 90 ED |  if_be	jmp	#LR__0511
06170     0F 13 02 F6 | 	mov	arg01, local01
06174     00 F3 BF FD | 	call	#_add_line_at_end
06178     38 00 90 FD | 	jmp	#LR__0514
0617c                 | LR__0511
0617c     0F 13 02 F6 | 	mov	arg01, local01
06180     74 EB BF FD | 	call	#_deleteline
06184                 | '       deleteline(alinemajor)  
06184                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' yes I know that's not optimal    
06184     69 00 00 FF 
06188     EC E5 05 F1 | 	add	objptr, ##54252
0618c     F2 16 02 FB | 	rdlong	arg03, objptr
06190     69 00 00 FF 
06194     EC E5 85 F1 | 	sub	objptr, ##54252
06198     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
0619c     0C 00 90 ED |  if_be	jmp	#LR__0512
061a0     0F 13 02 F6 | 	mov	arg01, local01
061a4     D0 F2 BF FD | 	call	#_add_line_at_end
061a8     08 00 90 FD | 	jmp	#LR__0513
061ac                 | LR__0512
061ac     0F 13 02 F6 | 	mov	arg01, local01
061b0     7C F0 BF FD | 	call	#_insertline
061b4                 | LR__0513
061b4                 | LR__0514
061b4                 | LR__0515
061b4                 | LR__0516
061b4                 | ' return err
061b4     12 FB 01 F6 | 	mov	result1, local04
061b8                 | LR__0517
061b8     A7 F0 03 F6 | 	mov	ptra, fp
061bc     B2 00 A0 FD | 	call	#popregs_
061c0                 | _compile_ret
061c0     2D 00 64 FD | 	ret
061c4                 | 
061c4                 | ' 
061c4                 | ' ' ------------------ compile the line that is assigning to a variable
061c4                 | ' 
061c4                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
061c4                 | _compile_assign
061c4     03 4A 05 F6 | 	mov	COUNT_, #3
061c8     A8 00 A0 FD | 	call	#pushregs_
061cc     09 1F 0A F6 | 	mov	local01, arg01 wz
061d0     0A 21 02 F6 | 	mov	local02, arg02
061d4     0B 23 02 F6 | 	mov	local03, arg03
061d8                 | ' 
061d8                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
061d8                 | ' if alinemajor=0 then compile_immediate_assign(0) : return  
061d8     0C 00 90 5D |  if_ne	jmp	#LR__0520
061dc     00 12 06 F6 | 	mov	arg01, #0
061e0     28 FC BF FD | 	call	#_compile_immediate_assign
061e4     94 00 90 FD | 	jmp	#LR__0526
061e8                 | LR__0520
061e8     66 00 00 FF 
061ec     E0 E5 05 F1 | 	add	objptr, ##52704
061f0     F2 1E 62 FC | 	wrlong	local01, objptr
061f4     04 E4 05 F1 | 	add	objptr, #4
061f8     F2 20 62 FC | 	wrlong	local02, objptr
061fc     66 00 00 FF 
06200     E4 E5 85 F1 | 	sub	objptr, ##52708
06204     11 13 02 F6 | 	mov	arg01, local03
06208     01 12 06 F1 | 	add	arg01, #1
0620c     FC FB BF FD | 	call	#_compile_immediate_assign
06210                 | ' 
06210                 | ' ucompiledline(0)=alinemajor
06210                 | ' ucompiledline(1)=alineminor
06210                 | ' 
06210                 | ' compile_immediate_assign(cont+1) 
06210                 | ' 
06210                 | ' if cont=3 orelse cont=2 then 
06210     03 22 0E F2 | 	cmp	local03, #3 wz
06214     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
06218     60 00 90 5D |  if_ne	jmp	#LR__0525
0621c                 | '   if alinemajor >lastline then 
0621c     69 00 00 FF 
06220     EC E5 05 F1 | 	add	objptr, ##54252
06224     F2 16 02 FB | 	rdlong	arg03, objptr
06228     69 00 00 FF 
0622c     EC E5 85 F1 | 	sub	objptr, ##54252
06230     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
06234     0C 00 90 ED |  if_be	jmp	#LR__0521
06238     0F 13 02 F6 | 	mov	arg01, local01
0623c     38 F2 BF FD | 	call	#_add_line_at_end
06240     38 00 90 FD | 	jmp	#LR__0524
06244                 | LR__0521
06244     0F 13 02 F6 | 	mov	arg01, local01
06248     AC EA BF FD | 	call	#_deleteline
0624c                 | '     deleteline(alinemajor)  
0624c                 | '     if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
0624c     69 00 00 FF 
06250     EC E5 05 F1 | 	add	objptr, ##54252
06254     F2 16 02 FB | 	rdlong	arg03, objptr
06258     69 00 00 FF 
0625c     EC E5 85 F1 | 	sub	objptr, ##54252
06260     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
06264     0C 00 90 ED |  if_be	jmp	#LR__0522
06268     0F 13 02 F6 | 	mov	arg01, local01
0626c     08 F2 BF FD | 	call	#_add_line_at_end
06270     08 00 90 FD | 	jmp	#LR__0523
06274                 | LR__0522
06274     0F 13 02 F6 | 	mov	arg01, local01
06278     B4 EF BF FD | 	call	#_insertline
0627c                 | LR__0523
0627c                 | LR__0524
0627c                 | LR__0525
0627c                 | LR__0526
0627c     A7 F0 03 F6 | 	mov	ptra, fp
06280     B2 00 A0 FD | 	call	#popregs_
06284                 | _compile_assign_ret
06284     2D 00 64 FD | 	ret
06288                 | 
06288                 | ' 
06288                 | ' sub compile_error(errno)
06288                 | _compile_error
06288     FF 04 06 F6 | 	mov	_var03, #255
0628c     01 07 02 F6 | 	mov	_var04, _var02
06290     02 09 02 F6 | 	mov	_var05, _var03
06294     69 00 00 FF 
06298     E0 E5 05 F1 | 	add	objptr, ##54240
0629c     F2 0A 02 FB | 	rdlong	_var06, objptr
062a0     05 0D 02 F6 | 	mov	_var07, _var06
062a4     01 0C 66 F0 | 	shl	_var07, #1
062a8     05 0D 02 F1 | 	add	_var07, _var06
062ac     02 0C 66 F0 | 	shl	_var07, #2
062b0     03 00 00 FF 
062b4     00 E4 85 F1 | 	sub	objptr, ##1536
062b8     F2 0C 02 F1 | 	add	_var07, objptr
062bc     06 13 62 FC | 	wrlong	arg01, _var07
062c0     03 00 00 FF 
062c4     00 E4 05 F1 | 	add	objptr, ##1536
062c8     F2 0C 02 FB | 	rdlong	_var07, objptr
062cc     06 0B 02 F6 | 	mov	_var06, _var07
062d0     01 0A 66 F0 | 	shl	_var06, #1
062d4     06 0B 02 F1 | 	add	_var06, _var07
062d8     02 0A 66 F0 | 	shl	_var06, #2
062dc     03 00 00 FF 
062e0     00 E4 85 F1 | 	sub	objptr, ##1536
062e4     F2 0A 02 F1 | 	add	_var06, objptr
062e8     04 0A 06 F1 | 	add	_var06, #4
062ec     05 07 62 FC | 	wrlong	_var04, _var06
062f0     03 00 00 FF 
062f4     00 E4 05 F1 | 	add	objptr, ##1536
062f8     F2 0C 02 FB | 	rdlong	_var07, objptr
062fc     06 0B 02 F6 | 	mov	_var06, _var07
06300     01 0A 66 F0 | 	shl	_var06, #1
06304     06 0B 02 F1 | 	add	_var06, _var07
06308     02 0A 66 F0 | 	shl	_var06, #2
0630c     03 00 00 FF 
06310     00 E4 85 F1 | 	sub	objptr, ##1536
06314     F2 0A 02 F1 | 	add	_var06, objptr
06318     08 0A 06 F1 | 	add	_var06, #8
0631c     05 09 62 FC | 	wrlong	_var05, _var06
06320     03 00 00 FF 
06324     00 E4 05 F1 | 	add	objptr, ##1536
06328     F2 12 02 FB | 	rdlong	arg01, objptr
0632c     01 12 06 F1 | 	add	arg01, #1
06330     F2 12 62 FC | 	wrlong	arg01, objptr
06334     69 00 00 FF 
06338     E0 E5 85 F1 | 	sub	objptr, ##54240
0633c                 | _compile_error_ret
0633c     2D 00 64 FD | 	ret
06340                 | 
06340                 | ' 
06340                 | ' sub compile_unknown() 
06340                 | _compile_unknown
06340     FF 04 06 F6 | 	mov	_var03, #255
06344     17 00 06 F6 | 	mov	_var01, #23
06348     01 07 02 F6 | 	mov	_var04, _var02
0634c     02 01 02 F6 | 	mov	_var01, _var03
06350     69 00 00 FF 
06354     E0 E5 05 F1 | 	add	objptr, ##54240
06358     F2 08 02 FB | 	rdlong	_var05, objptr
0635c     04 0B 02 F6 | 	mov	_var06, _var05
06360     01 0A 66 F0 | 	shl	_var06, #1
06364     04 0B 02 F1 | 	add	_var06, _var05
06368     02 0A 66 F0 | 	shl	_var06, #2
0636c     03 00 00 FF 
06370     00 E4 85 F1 | 	sub	objptr, ##1536
06374     F2 0A 02 F1 | 	add	_var06, objptr
06378     05 2F 68 FC | 	wrlong	#23, _var06
0637c     03 00 00 FF 
06380     00 E4 05 F1 | 	add	objptr, ##1536
06384     F2 0A 02 FB | 	rdlong	_var06, objptr
06388     05 09 02 F6 | 	mov	_var05, _var06
0638c     01 08 66 F0 | 	shl	_var05, #1
06390     05 09 02 F1 | 	add	_var05, _var06
06394     02 08 66 F0 | 	shl	_var05, #2
06398     03 00 00 FF 
0639c     00 E4 85 F1 | 	sub	objptr, ##1536
063a0     F2 08 02 F1 | 	add	_var05, objptr
063a4     04 08 06 F1 | 	add	_var05, #4
063a8     04 07 62 FC | 	wrlong	_var04, _var05
063ac     03 00 00 FF 
063b0     00 E4 05 F1 | 	add	objptr, ##1536
063b4     F2 0A 02 FB | 	rdlong	_var06, objptr
063b8     05 09 02 F6 | 	mov	_var05, _var06
063bc     01 08 66 F0 | 	shl	_var05, #1
063c0     05 09 02 F1 | 	add	_var05, _var06
063c4     02 08 66 F0 | 	shl	_var05, #2
063c8     03 00 00 FF 
063cc     00 E4 85 F1 | 	sub	objptr, ##1536
063d0     F2 08 02 F1 | 	add	_var05, objptr
063d4     08 08 06 F1 | 	add	_var05, #8
063d8     04 01 62 FC | 	wrlong	_var01, _var05
063dc     03 00 00 FF 
063e0     00 E4 05 F1 | 	add	objptr, ##1536
063e4     F2 0A 02 FB | 	rdlong	_var06, objptr
063e8     01 0A 06 F1 | 	add	_var06, #1
063ec     F2 0A 62 FC | 	wrlong	_var06, objptr
063f0     69 00 00 FF 
063f4     E0 E5 85 F1 | 	sub	objptr, ##54240
063f8                 | _compile_unknown_ret
063f8     2D 00 64 FD | 	ret
063fc                 | 
063fc                 | ' 
063fc                 | ' function compile_fun_2p() as ulong
063fc                 | _compile_fun_2p
063fc     01 4A 05 F6 | 	mov	COUNT_, #1
06400     A8 00 A0 FD | 	call	#pushregs_
06404     40 22 B0 FD | 	call	#_expr
06408                 | ' 
06408                 | ' expr()
06408                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06408     56 00 00 FF 
0640c     A8 E5 05 F1 | 	add	objptr, ##44456
06410     F2 1E 02 FB | 	rdlong	local01, objptr
06414     03 1E 66 F0 | 	shl	local01, #3
06418     02 00 00 FF 
0641c     38 E4 85 F1 | 	sub	objptr, ##1080
06420     F2 1E 02 F1 | 	add	local01, objptr
06424     04 1E 06 F1 | 	add	local01, #4
06428     0F 1F 02 FB | 	rdlong	local01, local01
0642c     11 1E 0E F2 | 	cmp	local01, #17 wz
06430     54 00 00 FF 
06434     70 E5 85 F1 | 	sub	objptr, ##43376
06438     15 FA 05 56 |  if_ne	mov	result1, #21
0643c     24 00 90 5D |  if_ne	jmp	#LR__0530
06440     56 00 00 FF 
06444     A8 E5 05 F1 | 	add	objptr, ##44456
06448     F2 1E 02 FB | 	rdlong	local01, objptr
0644c     01 1E 06 F1 | 	add	local01, #1
06450     F2 1E 62 FC | 	wrlong	local01, objptr
06454     56 00 00 FF 
06458     A8 E5 85 F1 | 	sub	objptr, ##44456
0645c     E8 21 B0 FD | 	call	#_expr
06460     00 FA 05 F6 | 	mov	result1, #0
06464                 | LR__0530
06464     A7 F0 03 F6 | 	mov	ptra, fp
06468     B2 00 A0 FD | 	call	#popregs_
0646c                 | _compile_fun_2p_ret
0646c     2D 00 64 FD | 	ret
06470                 | 
06470                 | ' 
06470                 | ' function compile_fun_3p() as ulong
06470                 | _compile_fun_3p
06470     01 4A 05 F6 | 	mov	COUNT_, #1
06474     A8 00 A0 FD | 	call	#pushregs_
06478     CC 21 B0 FD | 	call	#_expr
0647c                 | ' 
0647c                 | ' expr()
0647c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0647c     56 00 00 FF 
06480     A8 E5 05 F1 | 	add	objptr, ##44456
06484     F2 1E 02 FB | 	rdlong	local01, objptr
06488     03 1E 66 F0 | 	shl	local01, #3
0648c     02 00 00 FF 
06490     38 E4 85 F1 | 	sub	objptr, ##1080
06494     F2 1E 02 F1 | 	add	local01, objptr
06498     04 1E 06 F1 | 	add	local01, #4
0649c     0F 1F 02 FB | 	rdlong	local01, local01
064a0     11 1E 0E F2 | 	cmp	local01, #17 wz
064a4     54 00 00 FF 
064a8     70 E5 85 F1 | 	sub	objptr, ##43376
064ac     15 FA 05 56 |  if_ne	mov	result1, #21
064b0     7C 00 90 5D |  if_ne	jmp	#LR__0540
064b4     56 00 00 FF 
064b8     A8 E5 05 F1 | 	add	objptr, ##44456
064bc     F2 1E 02 FB | 	rdlong	local01, objptr
064c0     01 1E 06 F1 | 	add	local01, #1
064c4     F2 1E 62 FC | 	wrlong	local01, objptr
064c8     56 00 00 FF 
064cc     A8 E5 85 F1 | 	sub	objptr, ##44456
064d0     74 21 B0 FD | 	call	#_expr
064d4                 | ' expr()
064d4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
064d4     56 00 00 FF 
064d8     A8 E5 05 F1 | 	add	objptr, ##44456
064dc     F2 1E 02 FB | 	rdlong	local01, objptr
064e0     03 1E 66 F0 | 	shl	local01, #3
064e4     02 00 00 FF 
064e8     38 E4 85 F1 | 	sub	objptr, ##1080
064ec     F2 1E 02 F1 | 	add	local01, objptr
064f0     04 1E 06 F1 | 	add	local01, #4
064f4     0F 1F 02 FB | 	rdlong	local01, local01
064f8     11 1E 0E F2 | 	cmp	local01, #17 wz
064fc     54 00 00 FF 
06500     70 E5 85 F1 | 	sub	objptr, ##43376
06504     15 FA 05 56 |  if_ne	mov	result1, #21
06508     24 00 90 5D |  if_ne	jmp	#LR__0540
0650c     56 00 00 FF 
06510     A8 E5 05 F1 | 	add	objptr, ##44456
06514     F2 1E 02 FB | 	rdlong	local01, objptr
06518     01 1E 06 F1 | 	add	local01, #1
0651c     F2 1E 62 FC | 	wrlong	local01, objptr
06520     56 00 00 FF 
06524     A8 E5 85 F1 | 	sub	objptr, ##44456
06528     1C 21 B0 FD | 	call	#_expr
0652c     00 FA 05 F6 | 	mov	result1, #0
06530                 | LR__0540
06530     A7 F0 03 F6 | 	mov	ptra, fp
06534     B2 00 A0 FD | 	call	#popregs_
06538                 | _compile_fun_3p_ret
06538     2D 00 64 FD | 	ret
0653c                 | 
0653c                 | ' 
0653c                 | ' function compile_fun_4p() as ulong
0653c                 | _compile_fun_4p
0653c     01 4A 05 F6 | 	mov	COUNT_, #1
06540     A8 00 A0 FD | 	call	#pushregs_
06544     00 21 B0 FD | 	call	#_expr
06548                 | ' 
06548                 | ' expr()
06548                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06548     56 00 00 FF 
0654c     A8 E5 05 F1 | 	add	objptr, ##44456
06550     F2 1E 02 FB | 	rdlong	local01, objptr
06554     03 1E 66 F0 | 	shl	local01, #3
06558     02 00 00 FF 
0655c     38 E4 85 F1 | 	sub	objptr, ##1080
06560     F2 1E 02 F1 | 	add	local01, objptr
06564     04 1E 06 F1 | 	add	local01, #4
06568     0F 1F 02 FB | 	rdlong	local01, local01
0656c     11 1E 0E F2 | 	cmp	local01, #17 wz
06570     54 00 00 FF 
06574     70 E5 85 F1 | 	sub	objptr, ##43376
06578     15 FA 05 56 |  if_ne	mov	result1, #21
0657c     D4 00 90 5D |  if_ne	jmp	#LR__0550
06580     56 00 00 FF 
06584     A8 E5 05 F1 | 	add	objptr, ##44456
06588     F2 1E 02 FB | 	rdlong	local01, objptr
0658c     01 1E 06 F1 | 	add	local01, #1
06590     F2 1E 62 FC | 	wrlong	local01, objptr
06594     56 00 00 FF 
06598     A8 E5 85 F1 | 	sub	objptr, ##44456
0659c     A8 20 B0 FD | 	call	#_expr
065a0                 | ' expr()
065a0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
065a0     56 00 00 FF 
065a4     A8 E5 05 F1 | 	add	objptr, ##44456
065a8     F2 1E 02 FB | 	rdlong	local01, objptr
065ac     03 1E 66 F0 | 	shl	local01, #3
065b0     02 00 00 FF 
065b4     38 E4 85 F1 | 	sub	objptr, ##1080
065b8     F2 1E 02 F1 | 	add	local01, objptr
065bc     04 1E 06 F1 | 	add	local01, #4
065c0     0F 1F 02 FB | 	rdlong	local01, local01
065c4     11 1E 0E F2 | 	cmp	local01, #17 wz
065c8     54 00 00 FF 
065cc     70 E5 85 F1 | 	sub	objptr, ##43376
065d0     15 FA 05 56 |  if_ne	mov	result1, #21
065d4     7C 00 90 5D |  if_ne	jmp	#LR__0550
065d8     56 00 00 FF 
065dc     A8 E5 05 F1 | 	add	objptr, ##44456
065e0     F2 1E 02 FB | 	rdlong	local01, objptr
065e4     01 1E 06 F1 | 	add	local01, #1
065e8     F2 1E 62 FC | 	wrlong	local01, objptr
065ec     56 00 00 FF 
065f0     A8 E5 85 F1 | 	sub	objptr, ##44456
065f4     50 20 B0 FD | 	call	#_expr
065f8                 | ' expr()
065f8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
065f8     56 00 00 FF 
065fc     A8 E5 05 F1 | 	add	objptr, ##44456
06600     F2 1E 02 FB | 	rdlong	local01, objptr
06604     03 1E 66 F0 | 	shl	local01, #3
06608     02 00 00 FF 
0660c     38 E4 85 F1 | 	sub	objptr, ##1080
06610     F2 1E 02 F1 | 	add	local01, objptr
06614     04 1E 06 F1 | 	add	local01, #4
06618     0F 1F 02 FB | 	rdlong	local01, local01
0661c     11 1E 0E F2 | 	cmp	local01, #17 wz
06620     54 00 00 FF 
06624     70 E5 85 F1 | 	sub	objptr, ##43376
06628     15 FA 05 56 |  if_ne	mov	result1, #21
0662c     24 00 90 5D |  if_ne	jmp	#LR__0550
06630     56 00 00 FF 
06634     A8 E5 05 F1 | 	add	objptr, ##44456
06638     F2 1E 02 FB | 	rdlong	local01, objptr
0663c     01 1E 06 F1 | 	add	local01, #1
06640     F2 1E 62 FC | 	wrlong	local01, objptr
06644     56 00 00 FF 
06648     A8 E5 85 F1 | 	sub	objptr, ##44456
0664c     F8 1F B0 FD | 	call	#_expr
06650     00 FA 05 F6 | 	mov	result1, #0
06654                 | LR__0550
06654     A7 F0 03 F6 | 	mov	ptra, fp
06658     B2 00 A0 FD | 	call	#popregs_
0665c                 | _compile_fun_4p_ret
0665c     2D 00 64 FD | 	ret
06660                 | 
06660                 | ' 
06660                 | ' 
06660                 | ' function compile_fun_5p() as ulong
06660                 | _compile_fun_5p
06660     01 4A 05 F6 | 	mov	COUNT_, #1
06664     A8 00 A0 FD | 	call	#pushregs_
06668     DC 1F B0 FD | 	call	#_expr
0666c                 | ' 
0666c                 | ' expr()
0666c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0666c     56 00 00 FF 
06670     A8 E5 05 F1 | 	add	objptr, ##44456
06674     F2 1E 02 FB | 	rdlong	local01, objptr
06678     03 1E 66 F0 | 	shl	local01, #3
0667c     02 00 00 FF 
06680     38 E4 85 F1 | 	sub	objptr, ##1080
06684     F2 1E 02 F1 | 	add	local01, objptr
06688     04 1E 06 F1 | 	add	local01, #4
0668c     0F 1F 02 FB | 	rdlong	local01, local01
06690     11 1E 0E F2 | 	cmp	local01, #17 wz
06694     54 00 00 FF 
06698     70 E5 85 F1 | 	sub	objptr, ##43376
0669c     15 FA 05 56 |  if_ne	mov	result1, #21
066a0     2C 01 90 5D |  if_ne	jmp	#LR__0560
066a4     56 00 00 FF 
066a8     A8 E5 05 F1 | 	add	objptr, ##44456
066ac     F2 1E 02 FB | 	rdlong	local01, objptr
066b0     01 1E 06 F1 | 	add	local01, #1
066b4     F2 1E 62 FC | 	wrlong	local01, objptr
066b8     56 00 00 FF 
066bc     A8 E5 85 F1 | 	sub	objptr, ##44456
066c0     84 1F B0 FD | 	call	#_expr
066c4                 | ' expr()
066c4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
066c4     56 00 00 FF 
066c8     A8 E5 05 F1 | 	add	objptr, ##44456
066cc     F2 1E 02 FB | 	rdlong	local01, objptr
066d0     03 1E 66 F0 | 	shl	local01, #3
066d4     02 00 00 FF 
066d8     38 E4 85 F1 | 	sub	objptr, ##1080
066dc     F2 1E 02 F1 | 	add	local01, objptr
066e0     04 1E 06 F1 | 	add	local01, #4
066e4     0F 1F 02 FB | 	rdlong	local01, local01
066e8     11 1E 0E F2 | 	cmp	local01, #17 wz
066ec     54 00 00 FF 
066f0     70 E5 85 F1 | 	sub	objptr, ##43376
066f4     15 FA 05 56 |  if_ne	mov	result1, #21
066f8     D4 00 90 5D |  if_ne	jmp	#LR__0560
066fc     56 00 00 FF 
06700     A8 E5 05 F1 | 	add	objptr, ##44456
06704     F2 1E 02 FB | 	rdlong	local01, objptr
06708     01 1E 06 F1 | 	add	local01, #1
0670c     F2 1E 62 FC | 	wrlong	local01, objptr
06710     56 00 00 FF 
06714     A8 E5 85 F1 | 	sub	objptr, ##44456
06718     2C 1F B0 FD | 	call	#_expr
0671c                 | ' expr()
0671c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0671c     56 00 00 FF 
06720     A8 E5 05 F1 | 	add	objptr, ##44456
06724     F2 1E 02 FB | 	rdlong	local01, objptr
06728     03 1E 66 F0 | 	shl	local01, #3
0672c     02 00 00 FF 
06730     38 E4 85 F1 | 	sub	objptr, ##1080
06734     F2 1E 02 F1 | 	add	local01, objptr
06738     04 1E 06 F1 | 	add	local01, #4
0673c     0F 1F 02 FB | 	rdlong	local01, local01
06740     11 1E 0E F2 | 	cmp	local01, #17 wz
06744     54 00 00 FF 
06748     70 E5 85 F1 | 	sub	objptr, ##43376
0674c     15 FA 05 56 |  if_ne	mov	result1, #21
06750     7C 00 90 5D |  if_ne	jmp	#LR__0560
06754     56 00 00 FF 
06758     A8 E5 05 F1 | 	add	objptr, ##44456
0675c     F2 1E 02 FB | 	rdlong	local01, objptr
06760     01 1E 06 F1 | 	add	local01, #1
06764     F2 1E 62 FC | 	wrlong	local01, objptr
06768     56 00 00 FF 
0676c     A8 E5 85 F1 | 	sub	objptr, ##44456
06770     D4 1E B0 FD | 	call	#_expr
06774                 | ' expr()
06774                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06774     56 00 00 FF 
06778     A8 E5 05 F1 | 	add	objptr, ##44456
0677c     F2 1E 02 FB | 	rdlong	local01, objptr
06780     03 1E 66 F0 | 	shl	local01, #3
06784     02 00 00 FF 
06788     38 E4 85 F1 | 	sub	objptr, ##1080
0678c     F2 1E 02 F1 | 	add	local01, objptr
06790     04 1E 06 F1 | 	add	local01, #4
06794     0F 1F 02 FB | 	rdlong	local01, local01
06798     11 1E 0E F2 | 	cmp	local01, #17 wz
0679c     54 00 00 FF 
067a0     70 E5 85 F1 | 	sub	objptr, ##43376
067a4     15 FA 05 56 |  if_ne	mov	result1, #21
067a8     24 00 90 5D |  if_ne	jmp	#LR__0560
067ac     56 00 00 FF 
067b0     A8 E5 05 F1 | 	add	objptr, ##44456
067b4     F2 1E 02 FB | 	rdlong	local01, objptr
067b8     01 1E 06 F1 | 	add	local01, #1
067bc     F2 1E 62 FC | 	wrlong	local01, objptr
067c0     56 00 00 FF 
067c4     A8 E5 85 F1 | 	sub	objptr, ##44456
067c8     7C 1E B0 FD | 	call	#_expr
067cc     00 FA 05 F6 | 	mov	result1, #0
067d0                 | LR__0560
067d0     A7 F0 03 F6 | 	mov	ptra, fp
067d4     B2 00 A0 FD | 	call	#popregs_
067d8                 | _compile_fun_5p_ret
067d8     2D 00 64 FD | 	ret
067dc                 | 
067dc                 | ' 
067dc                 | ' function compile_fun_varp() as ulong 
067dc                 | _compile_fun_varp
067dc     02 4A 05 F6 | 	mov	COUNT_, #2
067e0     A8 00 A0 FD | 	call	#pushregs_
067e4     00 1E 06 F6 | 	mov	local01, #0
067e8                 | ' i=0
067e8                 | ' if lparts(ct).token<>token_end then
067e8     56 00 00 FF 
067ec     A8 E5 05 F1 | 	add	objptr, ##44456
067f0     F2 20 02 FB | 	rdlong	local02, objptr
067f4     03 20 66 F0 | 	shl	local02, #3
067f8     02 00 00 FF 
067fc     38 E4 85 F1 | 	sub	objptr, ##1080
06800     F2 20 02 F1 | 	add	local02, objptr
06804     04 20 06 F1 | 	add	local02, #4
06808     10 21 02 FB | 	rdlong	local02, local02
0680c     FE 21 0E F2 | 	cmp	local02, #510 wz
06810     54 00 00 FF 
06814     70 E5 85 F1 | 	sub	objptr, ##43376
06818     5C 00 90 AD |  if_e	jmp	#LR__0572
0681c                 | '   do
0681c                 | LR__0570
0681c     28 1E B0 FD | 	call	#_expr
06820     01 1E 06 F1 | 	add	local01, #1
06824                 | '   expr()
06824                 | '    i+=1
06824                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
06824     56 00 00 FF 
06828     A8 E5 05 F1 | 	add	objptr, ##44456
0682c     F2 20 02 FB | 	rdlong	local02, objptr
06830     03 20 66 F0 | 	shl	local02, #3
06834     02 00 00 FF 
06838     38 E4 85 F1 | 	sub	objptr, ##1080
0683c     F2 20 02 F1 | 	add	local02, objptr
06840     04 20 06 F1 | 	add	local02, #4
06844     10 21 02 FB | 	rdlong	local02, local02
06848     11 20 0E F2 | 	cmp	local02, #17 wz
0684c     54 00 00 FF 
06850     70 E5 85 F1 | 	sub	objptr, ##43376
06854     20 00 90 5D |  if_ne	jmp	#LR__0571
06858     56 00 00 FF 
0685c     A8 E5 05 F1 | 	add	objptr, ##44456
06860     F2 20 02 FB | 	rdlong	local02, objptr
06864     01 20 06 F1 | 	add	local02, #1
06868     F2 20 62 FC | 	wrlong	local02, objptr
0686c     56 00 00 FF 
06870     A8 E5 85 F1 | 	sub	objptr, ##44456
06874     A4 FF 9F FD | 	jmp	#LR__0570
06878                 | LR__0571
06878                 | LR__0572
06878                 | ' return i
06878     0F FB 01 F6 | 	mov	result1, local01
0687c     A7 F0 03 F6 | 	mov	ptra, fp
06880     B2 00 A0 FD | 	call	#popregs_
06884                 | _compile_fun_varp_ret
06884     2D 00 64 FD | 	ret
06888                 | 
06888                 | ' 
06888                 | ' 
06888                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
06888                 | _compile_print
06888     0B 4A 05 F6 | 	mov	COUNT_, #11
0688c     A8 00 A0 FD | 	call	#pushregs_
06890     00 1E 06 F6 | 	mov	local01, #0
06894     1D 22 06 F6 | 	mov	local03, #29
06898                 | ' t1.result.uresult=0 : t1.result_type=result_uint
06898                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
06898     56 00 00 FF 
0689c     A8 E5 05 F1 | 	add	objptr, ##44456
068a0     F2 24 02 FB | 	rdlong	local04, objptr
068a4     03 24 66 F0 | 	shl	local04, #3
068a8     02 00 00 FF 
068ac     38 E4 85 F1 | 	sub	objptr, ##1080
068b0     F2 24 02 F1 | 	add	local04, objptr
068b4     04 24 06 F1 | 	add	local04, #4
068b8     12 25 02 FB | 	rdlong	local04, local04
068bc     FE 25 0E F2 | 	cmp	local04, #510 wz
068c0     54 00 00 FF 
068c4     70 E5 85 F1 | 	sub	objptr, ##43376
068c8     68 01 90 5D |  if_ne	jmp	#LR__0580
068cc     20 22 06 F6 | 	mov	local03, #32
068d0     0F 27 02 F6 | 	mov	local05, local01
068d4     10 29 02 F6 | 	mov	local06, local02
068d8     11 2B 02 F6 | 	mov	local07, local03
068dc     69 00 00 FF 
068e0     E0 E5 05 F1 | 	add	objptr, ##54240
068e4     F2 2C 02 FB | 	rdlong	local08, objptr
068e8     16 2F 02 F6 | 	mov	local09, local08
068ec     01 2E 66 F0 | 	shl	local09, #1
068f0     16 2F 02 F1 | 	add	local09, local08
068f4     02 2E 66 F0 | 	shl	local09, #2
068f8     03 00 00 FF 
068fc     00 E4 85 F1 | 	sub	objptr, ##1536
06900     F2 2E 02 F1 | 	add	local09, objptr
06904     17 27 62 FC | 	wrlong	local05, local09
06908     03 00 00 FF 
0690c     00 E4 05 F1 | 	add	objptr, ##1536
06910     F2 26 02 FB | 	rdlong	local05, objptr
06914     13 31 02 F6 | 	mov	local10, local05
06918     01 30 66 F0 | 	shl	local10, #1
0691c     13 31 02 F1 | 	add	local10, local05
06920     02 30 66 F0 | 	shl	local10, #2
06924     03 00 00 FF 
06928     00 E4 85 F1 | 	sub	objptr, ##1536
0692c     F2 30 02 F1 | 	add	local10, objptr
06930     04 30 06 F1 | 	add	local10, #4
06934     18 29 62 FC | 	wrlong	local06, local10
06938     03 00 00 FF 
0693c     00 E4 05 F1 | 	add	objptr, ##1536
06940     F2 26 02 FB | 	rdlong	local05, objptr
06944     13 33 02 F6 | 	mov	local11, local05
06948     01 32 66 F0 | 	shl	local11, #1
0694c     13 33 02 F1 | 	add	local11, local05
06950     02 32 66 F0 | 	shl	local11, #2
06954     03 00 00 FF 
06958     00 E4 85 F1 | 	sub	objptr, ##1536
0695c     F2 32 02 F1 | 	add	local11, objptr
06960     08 32 06 F1 | 	add	local11, #8
06964     19 2B 62 FC | 	wrlong	local07, local11
06968     03 00 00 FF 
0696c     00 E4 05 F1 | 	add	objptr, ##1536
06970     F2 26 02 FB | 	rdlong	local05, objptr
06974     01 26 06 F1 | 	add	local05, #1
06978     F2 26 62 FC | 	wrlong	local05, objptr
0697c     44 22 06 F6 | 	mov	local03, #68
06980     0F 27 02 F6 | 	mov	local05, local01
06984     10 29 02 F6 | 	mov	local06, local02
06988     11 2B 02 F6 | 	mov	local07, local03
0698c     F2 2C 02 FB | 	rdlong	local08, objptr
06990     16 2F 02 F6 | 	mov	local09, local08
06994     01 2E 66 F0 | 	shl	local09, #1
06998     16 2F 02 F1 | 	add	local09, local08
0699c     02 2E 66 F0 | 	shl	local09, #2
069a0     03 00 00 FF 
069a4     00 E4 85 F1 | 	sub	objptr, ##1536
069a8     F2 2E 02 F1 | 	add	local09, objptr
069ac     17 27 62 FC | 	wrlong	local05, local09
069b0     03 00 00 FF 
069b4     00 E4 05 F1 | 	add	objptr, ##1536
069b8     F2 32 02 FB | 	rdlong	local11, objptr
069bc     19 31 02 F6 | 	mov	local10, local11
069c0     01 30 66 F0 | 	shl	local10, #1
069c4     19 31 02 F1 | 	add	local10, local11
069c8     02 30 66 F0 | 	shl	local10, #2
069cc     03 00 00 FF 
069d0     00 E4 85 F1 | 	sub	objptr, ##1536
069d4     F2 30 02 F1 | 	add	local10, objptr
069d8     04 30 06 F1 | 	add	local10, #4
069dc     18 29 62 FC | 	wrlong	local06, local10
069e0     03 00 00 FF 
069e4     00 E4 05 F1 | 	add	objptr, ##1536
069e8     F2 30 02 FB | 	rdlong	local10, objptr
069ec     18 33 02 F6 | 	mov	local11, local10
069f0     01 32 66 F0 | 	shl	local11, #1
069f4     18 33 02 F1 | 	add	local11, local10
069f8     02 32 66 F0 | 	shl	local11, #2
069fc     03 00 00 FF 
06a00     00 E4 85 F1 | 	sub	objptr, ##1536
06a04     F2 32 02 F1 | 	add	local11, objptr
06a08     08 32 06 F1 | 	add	local11, #8
06a0c     19 2B 62 FC | 	wrlong	local07, local11
06a10     03 00 00 FF 
06a14     00 E4 05 F1 | 	add	objptr, ##1536
06a18     F2 26 02 FB | 	rdlong	local05, objptr
06a1c     01 26 06 F1 | 	add	local05, #1
06a20     F2 26 62 FC | 	wrlong	local05, objptr
06a24     69 00 00 FF 
06a28     E0 E5 85 F1 | 	sub	objptr, ##54240
06a2c     00 FA 05 F6 | 	mov	result1, #0
06a30     20 05 90 FD | 	jmp	#LR__0587
06a34                 | LR__0580
06a34                 | ' do
06a34                 | LR__0581
06a34     10 1C B0 FD | 	call	#_expr
06a38                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
06a38                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
06a38     56 00 00 FF 
06a3c     A8 E5 05 F1 | 	add	objptr, ##44456
06a40     F2 24 02 FB | 	rdlong	local04, objptr
06a44     03 24 66 F0 | 	shl	local04, #3
06a48     02 00 00 FF 
06a4c     38 E4 85 F1 | 	sub	objptr, ##1080
06a50     F2 24 02 F1 | 	add	local04, objptr
06a54     04 24 06 F1 | 	add	local04, #4
06a58     12 2D 02 FB | 	rdlong	local08, local04
06a5c     11 2C 0E F2 | 	cmp	local08, #17 wz
06a60     54 00 00 FF 
06a64     70 E5 85 F1 | 	sub	objptr, ##43376
06a68     60 01 90 5D |  if_ne	jmp	#LR__0582
06a6c     21 22 06 F6 | 	mov	local03, #33
06a70     0F 27 02 F6 | 	mov	local05, local01
06a74     10 29 02 F6 | 	mov	local06, local02
06a78     11 2B 02 F6 | 	mov	local07, local03
06a7c     69 00 00 FF 
06a80     E0 E5 05 F1 | 	add	objptr, ##54240
06a84     F2 2C 02 FB | 	rdlong	local08, objptr
06a88     16 2F 02 F6 | 	mov	local09, local08
06a8c     01 2E 66 F0 | 	shl	local09, #1
06a90     16 2F 02 F1 | 	add	local09, local08
06a94     02 2E 66 F0 | 	shl	local09, #2
06a98     03 00 00 FF 
06a9c     00 E4 85 F1 | 	sub	objptr, ##1536
06aa0     F2 2E 02 F1 | 	add	local09, objptr
06aa4     17 27 62 FC | 	wrlong	local05, local09
06aa8     03 00 00 FF 
06aac     00 E4 05 F1 | 	add	objptr, ##1536
06ab0     F2 32 02 FB | 	rdlong	local11, objptr
06ab4     19 31 02 F6 | 	mov	local10, local11
06ab8     01 30 66 F0 | 	shl	local10, #1
06abc     19 31 02 F1 | 	add	local10, local11
06ac0     02 30 66 F0 | 	shl	local10, #2
06ac4     03 00 00 FF 
06ac8     00 E4 85 F1 | 	sub	objptr, ##1536
06acc     F2 30 02 F1 | 	add	local10, objptr
06ad0     04 30 06 F1 | 	add	local10, #4
06ad4     18 29 62 FC | 	wrlong	local06, local10
06ad8     03 00 00 FF 
06adc     00 E4 05 F1 | 	add	objptr, ##1536
06ae0     F2 26 02 FB | 	rdlong	local05, objptr
06ae4     13 33 02 F6 | 	mov	local11, local05
06ae8     01 32 66 F0 | 	shl	local11, #1
06aec     13 33 02 F1 | 	add	local11, local05
06af0     02 32 66 F0 | 	shl	local11, #2
06af4     03 00 00 FF 
06af8     00 E4 85 F1 | 	sub	objptr, ##1536
06afc     F2 32 02 F1 | 	add	local11, objptr
06b00     08 32 06 F1 | 	add	local11, #8
06b04     19 2B 62 FC | 	wrlong	local07, local11
06b08     03 00 00 FF 
06b0c     00 E4 05 F1 | 	add	objptr, ##1536
06b10     F2 26 02 FB | 	rdlong	local05, objptr
06b14     01 26 06 F1 | 	add	local05, #1
06b18     F2 26 62 FC | 	wrlong	local05, objptr
06b1c     44 22 06 F6 | 	mov	local03, #68
06b20     0F 27 02 F6 | 	mov	local05, local01
06b24     10 29 02 F6 | 	mov	local06, local02
06b28     11 2B 02 F6 | 	mov	local07, local03
06b2c     F2 2C 02 FB | 	rdlong	local08, objptr
06b30     16 2F 02 F6 | 	mov	local09, local08
06b34     01 2E 66 F0 | 	shl	local09, #1
06b38     16 2F 02 F1 | 	add	local09, local08
06b3c     02 2E 66 F0 | 	shl	local09, #2
06b40     03 00 00 FF 
06b44     00 E4 85 F1 | 	sub	objptr, ##1536
06b48     F2 2E 02 F1 | 	add	local09, objptr
06b4c     17 27 62 FC | 	wrlong	local05, local09
06b50     03 00 00 FF 
06b54     00 E4 05 F1 | 	add	objptr, ##1536
06b58     F2 32 02 FB | 	rdlong	local11, objptr
06b5c     19 31 02 F6 | 	mov	local10, local11
06b60     01 30 66 F0 | 	shl	local10, #1
06b64     19 31 02 F1 | 	add	local10, local11
06b68     02 30 66 F0 | 	shl	local10, #2
06b6c     03 00 00 FF 
06b70     00 E4 85 F1 | 	sub	objptr, ##1536
06b74     F2 30 02 F1 | 	add	local10, objptr
06b78     04 30 06 F1 | 	add	local10, #4
06b7c     18 29 62 FC | 	wrlong	local06, local10
06b80     03 00 00 FF 
06b84     00 E4 05 F1 | 	add	objptr, ##1536
06b88     F2 30 02 FB | 	rdlong	local10, objptr
06b8c     18 33 02 F6 | 	mov	local11, local10
06b90     01 32 66 F0 | 	shl	local11, #1
06b94     18 33 02 F1 | 	add	local11, local10
06b98     02 32 66 F0 | 	shl	local11, #2
06b9c     03 00 00 FF 
06ba0     00 E4 85 F1 | 	sub	objptr, ##1536
06ba4     F2 32 02 F1 | 	add	local11, objptr
06ba8     08 32 06 F1 | 	add	local11, #8
06bac     19 2B 62 FC | 	wrlong	local07, local11
06bb0     03 00 00 FF 
06bb4     00 E4 05 F1 | 	add	objptr, ##1536
06bb8     F2 26 02 FB | 	rdlong	local05, objptr
06bbc     01 26 06 F1 | 	add	local05, #1
06bc0     F2 26 62 FC | 	wrlong	local05, objptr
06bc4     69 00 00 FF 
06bc8     E0 E5 85 F1 | 	sub	objptr, ##54240
06bcc                 | LR__0582
06bcc                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
06bcc     56 00 00 FF 
06bd0     A8 E5 05 F1 | 	add	objptr, ##44456
06bd4     F2 24 02 FB | 	rdlong	local04, objptr
06bd8     03 24 66 F0 | 	shl	local04, #3
06bdc     02 00 00 FF 
06be0     38 E4 85 F1 | 	sub	objptr, ##1080
06be4     F2 24 02 F1 | 	add	local04, objptr
06be8     04 24 06 F1 | 	add	local04, #4
06bec     12 2D 02 FB | 	rdlong	local08, local04
06bf0     12 2C 0E F2 | 	cmp	local08, #18 wz
06bf4     54 00 00 FF 
06bf8     70 E5 85 F1 | 	sub	objptr, ##43376
06bfc     60 01 90 5D |  if_ne	jmp	#LR__0583
06c00     22 22 06 F6 | 	mov	local03, #34
06c04     0F 27 02 F6 | 	mov	local05, local01
06c08     10 29 02 F6 | 	mov	local06, local02
06c0c     11 2B 02 F6 | 	mov	local07, local03
06c10     69 00 00 FF 
06c14     E0 E5 05 F1 | 	add	objptr, ##54240
06c18     F2 2C 02 FB | 	rdlong	local08, objptr
06c1c     16 2F 02 F6 | 	mov	local09, local08
06c20     01 2E 66 F0 | 	shl	local09, #1
06c24     16 2F 02 F1 | 	add	local09, local08
06c28     02 2E 66 F0 | 	shl	local09, #2
06c2c     03 00 00 FF 
06c30     00 E4 85 F1 | 	sub	objptr, ##1536
06c34     F2 2E 02 F1 | 	add	local09, objptr
06c38     17 27 62 FC | 	wrlong	local05, local09
06c3c     03 00 00 FF 
06c40     00 E4 05 F1 | 	add	objptr, ##1536
06c44     F2 32 02 FB | 	rdlong	local11, objptr
06c48     19 31 02 F6 | 	mov	local10, local11
06c4c     01 30 66 F0 | 	shl	local10, #1
06c50     19 31 02 F1 | 	add	local10, local11
06c54     02 30 66 F0 | 	shl	local10, #2
06c58     03 00 00 FF 
06c5c     00 E4 85 F1 | 	sub	objptr, ##1536
06c60     F2 30 02 F1 | 	add	local10, objptr
06c64     04 30 06 F1 | 	add	local10, #4
06c68     18 29 62 FC | 	wrlong	local06, local10
06c6c     03 00 00 FF 
06c70     00 E4 05 F1 | 	add	objptr, ##1536
06c74     F2 26 02 FB | 	rdlong	local05, objptr
06c78     13 33 02 F6 | 	mov	local11, local05
06c7c     01 32 66 F0 | 	shl	local11, #1
06c80     13 33 02 F1 | 	add	local11, local05
06c84     02 32 66 F0 | 	shl	local11, #2
06c88     03 00 00 FF 
06c8c     00 E4 85 F1 | 	sub	objptr, ##1536
06c90     F2 32 02 F1 | 	add	local11, objptr
06c94     08 32 06 F1 | 	add	local11, #8
06c98     19 2B 62 FC | 	wrlong	local07, local11
06c9c     03 00 00 FF 
06ca0     00 E4 05 F1 | 	add	objptr, ##1536
06ca4     F2 26 02 FB | 	rdlong	local05, objptr
06ca8     01 26 06 F1 | 	add	local05, #1
06cac     F2 26 62 FC | 	wrlong	local05, objptr
06cb0     44 22 06 F6 | 	mov	local03, #68
06cb4     0F 27 02 F6 | 	mov	local05, local01
06cb8     10 29 02 F6 | 	mov	local06, local02
06cbc     11 2B 02 F6 | 	mov	local07, local03
06cc0     F2 2C 02 FB | 	rdlong	local08, objptr
06cc4     16 2F 02 F6 | 	mov	local09, local08
06cc8     01 2E 66 F0 | 	shl	local09, #1
06ccc     16 2F 02 F1 | 	add	local09, local08
06cd0     02 2E 66 F0 | 	shl	local09, #2
06cd4     03 00 00 FF 
06cd8     00 E4 85 F1 | 	sub	objptr, ##1536
06cdc     F2 2E 02 F1 | 	add	local09, objptr
06ce0     17 27 62 FC | 	wrlong	local05, local09
06ce4     03 00 00 FF 
06ce8     00 E4 05 F1 | 	add	objptr, ##1536
06cec     F2 32 02 FB | 	rdlong	local11, objptr
06cf0     19 31 02 F6 | 	mov	local10, local11
06cf4     01 30 66 F0 | 	shl	local10, #1
06cf8     19 31 02 F1 | 	add	local10, local11
06cfc     02 30 66 F0 | 	shl	local10, #2
06d00     03 00 00 FF 
06d04     00 E4 85 F1 | 	sub	objptr, ##1536
06d08     F2 30 02 F1 | 	add	local10, objptr
06d0c     04 30 06 F1 | 	add	local10, #4
06d10     18 29 62 FC | 	wrlong	local06, local10
06d14     03 00 00 FF 
06d18     00 E4 05 F1 | 	add	objptr, ##1536
06d1c     F2 30 02 FB | 	rdlong	local10, objptr
06d20     18 33 02 F6 | 	mov	local11, local10
06d24     01 32 66 F0 | 	shl	local11, #1
06d28     18 33 02 F1 | 	add	local11, local10
06d2c     02 32 66 F0 | 	shl	local11, #2
06d30     03 00 00 FF 
06d34     00 E4 85 F1 | 	sub	objptr, ##1536
06d38     F2 32 02 F1 | 	add	local11, objptr
06d3c     08 32 06 F1 | 	add	local11, #8
06d40     19 2B 62 FC | 	wrlong	local07, local11
06d44     03 00 00 FF 
06d48     00 E4 05 F1 | 	add	objptr, ##1536
06d4c     F2 26 02 FB | 	rdlong	local05, objptr
06d50     01 26 06 F1 | 	add	local05, #1
06d54     F2 26 62 FC | 	wrlong	local05, objptr
06d58     69 00 00 FF 
06d5c     E0 E5 85 F1 | 	sub	objptr, ##54240
06d60                 | LR__0583
06d60                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
06d60     56 00 00 FF 
06d64     A8 E5 05 F1 | 	add	objptr, ##44456
06d68     F2 24 02 FB | 	rdlong	local04, objptr
06d6c     03 24 66 F0 | 	shl	local04, #3
06d70     02 00 00 FF 
06d74     38 E4 85 F1 | 	sub	objptr, ##1080
06d78     F2 24 02 F1 | 	add	local04, objptr
06d7c     04 24 06 F1 | 	add	local04, #4
06d80     12 2D 02 FB | 	rdlong	local08, local04
06d84     FE 2D 0E F2 | 	cmp	local08, #510 wz
06d88     54 00 00 FF 
06d8c     70 E5 85 F1 | 	sub	objptr, ##43376
06d90     B8 00 90 5D |  if_ne	jmp	#LR__0584
06d94     44 22 06 F6 | 	mov	local03, #68
06d98     0F 27 02 F6 | 	mov	local05, local01
06d9c     10 29 02 F6 | 	mov	local06, local02
06da0     11 2B 02 F6 | 	mov	local07, local03
06da4     69 00 00 FF 
06da8     E0 E5 05 F1 | 	add	objptr, ##54240
06dac     F2 2C 02 FB | 	rdlong	local08, objptr
06db0     16 2F 02 F6 | 	mov	local09, local08
06db4     01 2E 66 F0 | 	shl	local09, #1
06db8     16 2F 02 F1 | 	add	local09, local08
06dbc     02 2E 66 F0 | 	shl	local09, #2
06dc0     03 00 00 FF 
06dc4     00 E4 85 F1 | 	sub	objptr, ##1536
06dc8     F2 2E 02 F1 | 	add	local09, objptr
06dcc     17 27 62 FC | 	wrlong	local05, local09
06dd0     03 00 00 FF 
06dd4     00 E4 05 F1 | 	add	objptr, ##1536
06dd8     F2 32 02 FB | 	rdlong	local11, objptr
06ddc     19 31 02 F6 | 	mov	local10, local11
06de0     01 30 66 F0 | 	shl	local10, #1
06de4     19 31 02 F1 | 	add	local10, local11
06de8     02 30 66 F0 | 	shl	local10, #2
06dec     03 00 00 FF 
06df0     00 E4 85 F1 | 	sub	objptr, ##1536
06df4     F2 30 02 F1 | 	add	local10, objptr
06df8     04 30 06 F1 | 	add	local10, #4
06dfc     18 29 62 FC | 	wrlong	local06, local10
06e00     03 00 00 FF 
06e04     00 E4 05 F1 | 	add	objptr, ##1536
06e08     F2 30 02 FB | 	rdlong	local10, objptr
06e0c     18 33 02 F6 | 	mov	local11, local10
06e10     01 32 66 F0 | 	shl	local11, #1
06e14     18 33 02 F1 | 	add	local11, local10
06e18     02 32 66 F0 | 	shl	local11, #2
06e1c     03 00 00 FF 
06e20     00 E4 85 F1 | 	sub	objptr, ##1536
06e24     F2 32 02 F1 | 	add	local11, objptr
06e28     08 32 06 F1 | 	add	local11, #8
06e2c     19 2B 62 FC | 	wrlong	local07, local11
06e30     03 00 00 FF 
06e34     00 E4 05 F1 | 	add	objptr, ##1536
06e38     F2 26 02 FB | 	rdlong	local05, objptr
06e3c     01 26 06 F1 | 	add	local05, #1
06e40     F2 26 62 FC | 	wrlong	local05, objptr
06e44     69 00 00 FF 
06e48     E0 E5 85 F1 | 	sub	objptr, ##54240
06e4c                 | LR__0584
06e4c                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
06e4c     56 00 00 FF 
06e50     A8 E5 05 F1 | 	add	objptr, ##44456
06e54     F2 24 02 FB | 	rdlong	local04, objptr
06e58     03 24 66 F0 | 	shl	local04, #3
06e5c     02 00 00 FF 
06e60     38 E4 85 F1 | 	sub	objptr, ##1080
06e64     F2 24 02 F1 | 	add	local04, objptr
06e68     04 24 06 F1 | 	add	local04, #4
06e6c     12 2D 02 FB | 	rdlong	local08, local04
06e70     11 2C 0E F2 | 	cmp	local08, #17 wz
06e74     54 00 00 FF 
06e78     70 E5 85 F1 | 	sub	objptr, ##43376
06e7c     6C 00 90 AD |  if_e	jmp	#LR__0585
06e80     56 00 00 FF 
06e84     A8 E5 05 F1 | 	add	objptr, ##44456
06e88     F2 2C 02 FB | 	rdlong	local08, objptr
06e8c     03 2C 66 F0 | 	shl	local08, #3
06e90     02 00 00 FF 
06e94     38 E4 85 F1 | 	sub	objptr, ##1080
06e98     F2 2C 02 F1 | 	add	local08, objptr
06e9c     04 2C 06 F1 | 	add	local08, #4
06ea0     16 2D 02 FB | 	rdlong	local08, local08
06ea4     12 2C 0E F2 | 	cmp	local08, #18 wz
06ea8     54 00 00 FF 
06eac     70 E5 85 F1 | 	sub	objptr, ##43376
06eb0     38 00 90 AD |  if_e	jmp	#LR__0585
06eb4     56 00 00 FF 
06eb8     A8 E5 05 F1 | 	add	objptr, ##44456
06ebc     F2 32 02 FB | 	rdlong	local11, objptr
06ec0     03 32 66 F0 | 	shl	local11, #3
06ec4     02 00 00 FF 
06ec8     38 E4 85 F1 | 	sub	objptr, ##1080
06ecc     F2 32 02 F1 | 	add	local11, objptr
06ed0     04 32 06 F1 | 	add	local11, #4
06ed4     19 33 02 FB | 	rdlong	local11, local11
06ed8     FE 33 0E F2 | 	cmp	local11, #510 wz
06edc     54 00 00 FF 
06ee0     70 E5 85 F1 | 	sub	objptr, ##43376
06ee4     16 FA 05 56 |  if_ne	mov	result1, #22
06ee8     68 00 90 5D |  if_ne	jmp	#LR__0587
06eec                 | LR__0585
06eec     56 00 00 FF 
06ef0     A8 E5 05 F1 | 	add	objptr, ##44456
06ef4     F2 24 02 FB | 	rdlong	local04, objptr
06ef8     01 24 06 F1 | 	add	local04, #1
06efc     F2 24 62 FC | 	wrlong	local04, objptr
06f00     03 24 66 F0 | 	shl	local04, #3
06f04     02 00 00 FF 
06f08     38 E4 85 F1 | 	sub	objptr, ##1080
06f0c     F2 24 02 F1 | 	add	local04, objptr
06f10     04 24 06 F1 | 	add	local04, #4
06f14     12 2D 02 FB | 	rdlong	local08, local04
06f18     FE 2D 0E F2 | 	cmp	local08, #510 wz
06f1c     54 00 00 FF 
06f20     70 E5 85 F1 | 	sub	objptr, ##43376
06f24     28 00 90 AD |  if_e	jmp	#LR__0586
06f28     56 00 00 FF 
06f2c     A8 E5 05 F1 | 	add	objptr, ##44456
06f30     F2 32 02 FB | 	rdlong	local11, objptr
06f34     0E 00 00 FF 
06f38     1C E4 05 F1 | 	add	objptr, ##7196
06f3c     F2 30 02 FB | 	rdlong	local10, objptr
06f40     64 00 00 FF 
06f44     C4 E5 85 F1 | 	sub	objptr, ##51652
06f48     18 33 52 F2 | 	cmps	local11, local10 wc
06f4c     E4 FA 9F CD |  if_b	jmp	#LR__0581
06f50                 | LR__0586
06f50                 | ' return 0
06f50     00 FA 05 F6 | 	mov	result1, #0
06f54                 | LR__0587
06f54     A7 F0 03 F6 | 	mov	ptra, fp
06f58     B2 00 A0 FD | 	call	#popregs_
06f5c                 | _compile_print_ret
06f5c     2D 00 64 FD | 	ret
06f60                 | 
06f60                 | ' 
06f60                 | ' function compile_if() as ulong  
06f60                 | _compile_if
06f60     05 4A 05 F6 | 	mov	COUNT_, #5
06f64     A8 00 A0 FD | 	call	#pushregs_
06f68                 | _compile_if_enter
06f68     DC 16 B0 FD | 	call	#_expr
06f6c                 | ' expr()
06f6c                 | ' return 0
06f6c     56 00 00 FF 
06f70     A8 E5 05 F1 | 	add	objptr, ##44456
06f74     F2 FA 01 FB | 	rdlong	result1, objptr
06f78     01 FA 05 F1 | 	add	result1, #1
06f7c     F2 FA 61 FC | 	wrlong	result1, objptr
06f80     58 22 06 F6 | 	mov	local03, #88
06f84     0F 25 02 F6 | 	mov	local04, local01
06f88     10 27 02 F6 | 	mov	local05, local02
06f8c     11 1F 02 F6 | 	mov	local01, local03
06f90     13 00 00 FF 
06f94     38 E4 05 F1 | 	add	objptr, ##9784
06f98     F2 12 02 FB | 	rdlong	arg01, objptr
06f9c     09 FB 01 F6 | 	mov	result1, arg01
06fa0     01 FA 65 F0 | 	shl	result1, #1
06fa4     09 FB 01 F1 | 	add	result1, arg01
06fa8     02 FA 65 F0 | 	shl	result1, #2
06fac     03 00 00 FF 
06fb0     00 E4 85 F1 | 	sub	objptr, ##1536
06fb4     F2 FA 01 F1 | 	add	result1, objptr
06fb8     FD 24 62 FC | 	wrlong	local04, result1
06fbc     03 00 00 FF 
06fc0     00 E4 05 F1 | 	add	objptr, ##1536
06fc4     F2 12 02 FB | 	rdlong	arg01, objptr
06fc8     09 25 02 F6 | 	mov	local04, arg01
06fcc     01 24 66 F0 | 	shl	local04, #1
06fd0     09 25 02 F1 | 	add	local04, arg01
06fd4     02 24 66 F0 | 	shl	local04, #2
06fd8     03 00 00 FF 
06fdc     00 E4 85 F1 | 	sub	objptr, ##1536
06fe0     F2 24 02 F1 | 	add	local04, objptr
06fe4     04 24 06 F1 | 	add	local04, #4
06fe8     12 27 62 FC | 	wrlong	local05, local04
06fec     03 00 00 FF 
06ff0     00 E4 05 F1 | 	add	objptr, ##1536
06ff4     F2 24 02 FB | 	rdlong	local04, objptr
06ff8     12 27 02 F6 | 	mov	local05, local04
06ffc     01 26 66 F0 | 	shl	local05, #1
07000     12 27 02 F1 | 	add	local05, local04
07004     02 26 66 F0 | 	shl	local05, #2
07008     03 00 00 FF 
0700c     00 E4 85 F1 | 	sub	objptr, ##1536
07010     F2 26 02 F1 | 	add	local05, objptr
07014     08 26 06 F1 | 	add	local05, #8
07018     13 1F 62 FC | 	wrlong	local01, local05
0701c     03 00 00 FF 
07020     00 E4 05 F1 | 	add	objptr, ##1536
07024     F2 24 02 FB | 	rdlong	local04, objptr
07028     01 24 06 F1 | 	add	local04, #1
0702c     F2 24 62 FC | 	wrlong	local04, objptr
07030                 | ' 
07030                 | ' 'print "In compile_if"
07030                 | ' compile_fun_1p()
07030                 | ' cmd=lparts(ct).token : ct+=1
07030                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
07030                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
07030                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
07030     13 00 00 FF 
07034     38 E4 85 F1 | 	sub	objptr, ##9784
07038     F2 26 02 FB | 	rdlong	local05, objptr
0703c     01 26 06 F1 | 	add	local05, #1
07040     03 26 66 F0 | 	shl	local05, #3
07044     02 00 00 FF 
07048     38 E4 85 F1 | 	sub	objptr, ##1080
0704c     F2 26 02 F1 | 	add	local05, objptr
07050     13 13 02 FB | 	rdlong	arg01, local05
07054     54 00 00 FF 
07058     70 E5 85 F1 | 	sub	objptr, ##43376
0705c                 | ' 
0705c                 | ' select case s
0705c     51 01 00 FF 
07060     81 15 06 F6 | 	mov	arg02, ##@LR__4504
07064     28 3C B1 FD | 	call	#__system___string_cmp
07068     00 FA 0D F2 | 	cmp	result1, #0 wz
0706c     1B FA 05 A6 |  if_e	mov	result1, #27
07070     00 FA 05 56 |  if_ne	mov	result1, #0
07074     00 FA 0D F2 | 	cmp	result1, #0 wz
07078     0C 00 90 AD |  if_e	jmp	#LR__0590
0707c     05 12 06 F6 | 	mov	arg01, #5
07080     88 ED BF FD | 	call	#_compile_immediate_assign
07084     08 00 90 FD | 	jmp	#LR__0591
07088                 | LR__0590
07088     05 12 06 F6 | 	mov	arg01, #5
0708c     C8 E4 BF FD | 	call	#_compile_immediate
07090                 | LR__0591
07090                 | ' 
07090                 | ' 
07090                 | ' return 0
07090     00 FA 05 F6 | 	mov	result1, #0
07094     A7 F0 03 F6 | 	mov	ptra, fp
07098     B2 00 A0 FD | 	call	#popregs_
0709c                 | _compile_if_ret
0709c     2D 00 64 FD | 	ret
070a0                 | 
070a0                 | ' 
070a0                 | ' function compile_else() as ulong  
070a0                 | _compile_else
070a0     05 4A 05 F6 | 	mov	COUNT_, #5
070a4     A8 00 A0 FD | 	call	#pushregs_
070a8                 | _compile_else_enter
070a8     5A 22 06 F6 | 	mov	local03, #90
070ac     0F 25 02 F6 | 	mov	local04, local01
070b0     10 27 02 F6 | 	mov	local05, local02
070b4     11 1F 02 F6 | 	mov	local01, local03
070b8     69 00 00 FF 
070bc     E0 E5 05 F1 | 	add	objptr, ##54240
070c0     F2 12 02 FB | 	rdlong	arg01, objptr
070c4     09 FB 01 F6 | 	mov	result1, arg01
070c8     01 FA 65 F0 | 	shl	result1, #1
070cc     09 FB 01 F1 | 	add	result1, arg01
070d0     02 FA 65 F0 | 	shl	result1, #2
070d4     03 00 00 FF 
070d8     00 E4 85 F1 | 	sub	objptr, ##1536
070dc     F2 FA 01 F1 | 	add	result1, objptr
070e0     FD 24 62 FC | 	wrlong	local04, result1
070e4     03 00 00 FF 
070e8     00 E4 05 F1 | 	add	objptr, ##1536
070ec     F2 FA 01 FB | 	rdlong	result1, objptr
070f0     FD 24 02 F6 | 	mov	local04, result1
070f4     01 24 66 F0 | 	shl	local04, #1
070f8     FD 24 02 F1 | 	add	local04, result1
070fc     02 24 66 F0 | 	shl	local04, #2
07100     03 00 00 FF 
07104     00 E4 85 F1 | 	sub	objptr, ##1536
07108     F2 24 02 F1 | 	add	local04, objptr
0710c     04 24 06 F1 | 	add	local04, #4
07110     12 27 62 FC | 	wrlong	local05, local04
07114     03 00 00 FF 
07118     00 E4 05 F1 | 	add	objptr, ##1536
0711c     F2 24 02 FB | 	rdlong	local04, objptr
07120     12 27 02 F6 | 	mov	local05, local04
07124     01 26 66 F0 | 	shl	local05, #1
07128     12 27 02 F1 | 	add	local05, local04
0712c     02 26 66 F0 | 	shl	local05, #2
07130     03 00 00 FF 
07134     00 E4 85 F1 | 	sub	objptr, ##1536
07138     F2 26 02 F1 | 	add	local05, objptr
0713c     08 26 06 F1 | 	add	local05, #8
07140     13 1F 62 FC | 	wrlong	local01, local05
07144     03 00 00 FF 
07148     00 E4 05 F1 | 	add	objptr, ##1536
0714c     F2 24 02 FB | 	rdlong	local04, objptr
07150     01 24 06 F1 | 	add	local04, #1
07154     F2 24 62 FC | 	wrlong	local04, objptr
07158                 | ' 
07158                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
07158                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
07158     13 00 00 FF 
0715c     38 E4 85 F1 | 	sub	objptr, ##9784
07160     F2 26 02 FB | 	rdlong	local05, objptr
07164     01 26 06 F1 | 	add	local05, #1
07168     03 26 66 F0 | 	shl	local05, #3
0716c     02 00 00 FF 
07170     38 E4 85 F1 | 	sub	objptr, ##1080
07174     F2 26 02 F1 | 	add	local05, objptr
07178     13 13 02 FB | 	rdlong	arg01, local05
0717c     54 00 00 FF 
07180     70 E5 85 F1 | 	sub	objptr, ##43376
07184                 | ' 
07184                 | ' select case s
07184     51 01 00 FF 
07188     81 15 06 F6 | 	mov	arg02, ##@LR__4504
0718c     00 3B B1 FD | 	call	#__system___string_cmp
07190     00 FA 0D F2 | 	cmp	result1, #0 wz
07194     1B FA 05 A6 |  if_e	mov	result1, #27
07198     00 FA 05 56 |  if_ne	mov	result1, #0
0719c     00 FA 0D F2 | 	cmp	result1, #0 wz
071a0     0C 00 90 AD |  if_e	jmp	#LR__0600
071a4     05 12 06 F6 | 	mov	arg01, #5
071a8     60 EC BF FD | 	call	#_compile_immediate_assign
071ac     08 00 90 FD | 	jmp	#LR__0601
071b0                 | LR__0600
071b0     05 12 06 F6 | 	mov	arg01, #5
071b4     A0 E3 BF FD | 	call	#_compile_immediate
071b8                 | LR__0601
071b8                 | ' 
071b8                 | ' 
071b8                 | ' return 0
071b8     00 FA 05 F6 | 	mov	result1, #0
071bc     A7 F0 03 F6 | 	mov	ptra, fp
071c0     B2 00 A0 FD | 	call	#popregs_
071c4                 | _compile_else_ret
071c4     2D 00 64 FD | 	ret
071c8                 | 
071c8                 | ' 
071c8                 | ' 
071c8                 | ' function compile_dim() as ulong  
071c8                 | _compile_dim
071c8     11 4A 05 F6 | 	mov	COUNT_, #17
071cc     A8 00 A0 FD | 	call	#pushregs_
071d0     01 1E 06 F6 | 	mov	local01, #1
071d4     01 20 06 F6 | 	mov	local02, #1
071d8     01 22 06 F6 | 	mov	local03, #1
071dc                 | ' 
071dc                 | ' dims(0)=1: dims(1)=1: dims(2)=1
071dc                 | ' 
071dc                 | ' if isname(lparts(ct).part$) then 
071dc     56 00 00 FF 
071e0     A8 E5 05 F1 | 	add	objptr, ##44456
071e4     F2 18 02 FB | 	rdlong	arg04, objptr
071e8     03 18 66 F0 | 	shl	arg04, #3
071ec     02 00 00 FF 
071f0     38 E4 85 F1 | 	sub	objptr, ##1080
071f4     F2 18 02 F1 | 	add	arg04, objptr
071f8     0C 13 02 FB | 	rdlong	arg01, arg04
071fc     54 00 00 FF 
07200     70 E5 85 F1 | 	sub	objptr, ##43376
07204     28 D3 BF FD | 	call	#_isname
07208     00 FA 0D F2 | 	cmp	result1, #0 wz
0720c     AC 05 90 AD |  if_e	jmp	#LR__0634
07210     56 00 00 FF 
07214     A8 E5 05 F1 | 	add	objptr, ##44456
07218     F2 24 02 FB | 	rdlong	local04, objptr
0721c     03 24 66 F0 | 	shl	local04, #3
07220     02 00 00 FF 
07224     38 E4 85 F1 | 	sub	objptr, ##1080
07228     F2 24 02 F1 | 	add	local04, objptr
0722c     12 27 02 FB | 	rdlong	local05, local04
07230     01 28 66 F6 | 	neg	local06, #1
07234                 | '   varname2$=lparts(ct).part$ 
07234                 | '   j=-1
07234                 | '   if varnum>0 then
07234     04 E4 85 F1 | 	sub	objptr, #4
07238     F2 2A 02 FB | 	rdlong	local07, objptr
0723c     54 00 00 FF 
07240     6C E5 85 F1 | 	sub	objptr, ##43372
07244     01 2A 56 F2 | 	cmps	local07, #1 wc
07248     58 00 90 CD |  if_b	jmp	#LR__0612
0724c                 | '  '   print "in dim, varnum=";varnum
0724c                 | '     for i=0 to varnum-1
0724c     00 2C 06 F6 | 	mov	local08, #0
07250     54 00 00 FF 
07254     6C E5 05 F1 | 	add	objptr, ##43372
07258     F2 2E 02 FB | 	rdlong	local09, objptr
0725c     54 00 00 FF 
07260     6C E5 85 F1 | 	sub	objptr, ##43372
07264                 | LR__0610
07264     17 2D 52 F2 | 	cmps	local08, local09 wc
07268     38 00 90 3D |  if_ae	jmp	#LR__0611
0726c                 | '       if variables(i).name=varname2$ then j=i : exit
0726c     16 25 02 F6 | 	mov	local04, local08
07270     04 24 66 F0 | 	shl	local04, #4
07274     34 00 00 FF 
07278     6C E5 05 F1 | 	add	objptr, ##26988
0727c     F2 24 02 F1 | 	add	local04, objptr
07280     12 13 02 FB | 	rdlong	arg01, local04
07284     13 15 02 F6 | 	mov	arg02, local05
07288     34 00 00 FF 
0728c     6C E5 85 F1 | 	sub	objptr, ##26988
07290     FC 39 B1 FD | 	call	#__system___string_cmp
07294     00 FA 0D F2 | 	cmp	result1, #0 wz
07298     16 29 02 A6 |  if_e	mov	local06, local08
0729c     01 2C 06 51 |  if_ne	add	local08, #1
072a0     C0 FF 9F 5D |  if_ne	jmp	#LR__0610
072a4                 | LR__0611
072a4                 | LR__0612
072a4                 | ' '  if j<>-1 then printerror (42) : return 42
072a4                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
072a4     FF FF 7F FF 
072a8     FF 29 0E F2 | 	cmp	local06, ##-1 wz
072ac     54 00 00 AF 
072b0     6C E5 05 A1 |  if_e	add	objptr, ##43372
072b4     F2 28 02 AB |  if_e	rdlong	local06, objptr
072b8     54 00 00 AF 
072bc     6C E5 85 A1 |  if_e	sub	objptr, ##43372
072c0     78 00 90 AD |  if_e	jmp	#LR__0613
072c4     00 12 06 F6 | 	mov	arg01, #0
072c8     D0 92 B1 FD | 	call	#__system___getiolock_0442
072cc     FD 12 02 F6 | 	mov	arg01, result1
072d0     94 39 B1 FD | 	call	#__system___lockmem
072d4     53 01 00 FF 
072d8     41 14 06 F6 | 	mov	arg02, ##@LR__4663
072dc     00 12 06 F6 | 	mov	arg01, #0
072e0     00 16 06 F6 | 	mov	arg03, #0
072e4     88 46 B1 FD | 	call	#__system___basic_print_string
072e8     7A 00 00 FF 
072ec     F4 E5 05 F1 | 	add	objptr, ##62964
072f0     F2 14 02 FB | 	rdlong	arg02, objptr
072f4     7A 00 00 FF 
072f8     F4 E5 85 F1 | 	sub	objptr, ##62964
072fc     00 12 06 F6 | 	mov	arg01, #0
07300     00 16 06 F6 | 	mov	arg03, #0
07304     0A 18 06 F6 | 	mov	arg04, #10
07308     E8 46 B1 FD | 	call	#__system___basic_print_unsigned
0730c     53 01 00 FF 
07310     4F 14 06 F6 | 	mov	arg02, ##@LR__4664
07314     00 12 06 F6 | 	mov	arg01, #0
07318     00 16 06 F6 | 	mov	arg03, #0
0731c     50 46 B1 FD | 	call	#__system___basic_print_string
07320     00 12 06 F6 | 	mov	arg01, #0
07324     0A 14 06 F6 | 	mov	arg02, #10
07328     00 16 06 F6 | 	mov	arg03, #0
0732c     E8 45 B1 FD | 	call	#__system___basic_print_char
07330     00 12 06 F6 | 	mov	arg01, #0
07334     64 92 B1 FD | 	call	#__system___getiolock_0442
07338     FD 00 68 FC | 	wrlong	#0, result1
0733c                 | LR__0613
0733c                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then printerror(43) : return 43
0733c     56 00 00 FF 
07340     A8 E5 05 F1 | 	add	objptr, ##44456
07344     F2 18 02 FB | 	rdlong	arg04, objptr
07348     01 18 06 F1 | 	add	arg04, #1
0734c     03 18 66 F0 | 	shl	arg04, #3
07350     02 00 00 FF 
07354     38 E4 85 F1 | 	sub	objptr, ##1080
07358     F2 18 02 F1 | 	add	arg04, objptr
0735c     0C 13 02 FB | 	rdlong	arg01, arg04
07360     53 01 00 FF 
07364     70 14 06 F6 | 	mov	arg02, ##@LR__4665
07368     54 00 00 FF 
0736c     70 E5 85 F1 | 	sub	objptr, ##43376
07370     1C 39 B1 FD | 	call	#__system___string_cmp
07374     00 FA 0D F2 | 	cmp	result1, #0 wz
07378     50 00 90 AD |  if_e	jmp	#LR__0614
0737c     56 00 00 FF 
07380     A8 E5 05 F1 | 	add	objptr, ##44456
07384     F2 2E 02 FB | 	rdlong	local09, objptr
07388     01 2E 06 F1 | 	add	local09, #1
0738c     03 2E 66 F0 | 	shl	local09, #3
07390     02 00 00 FF 
07394     38 E4 85 F1 | 	sub	objptr, ##1080
07398     F2 2E 02 F1 | 	add	local09, objptr
0739c     17 13 02 FB | 	rdlong	arg01, local09
073a0     53 01 00 FF 
073a4     72 14 06 F6 | 	mov	arg02, ##@LR__4666
073a8     54 00 00 FF 
073ac     70 E5 85 F1 | 	sub	objptr, ##43376
073b0     DC 38 B1 FD | 	call	#__system___string_cmp
073b4     00 FA 0D F2 | 	cmp	result1, #0 wz
073b8     10 00 90 AD |  if_e	jmp	#LR__0614
073bc     2B 12 06 F6 | 	mov	arg01, #43
073c0     94 02 B1 FD | 	call	#_printerror
073c4     2B FA 05 F6 | 	mov	result1, #43
073c8     38 05 90 FD | 	jmp	#LR__0636
073cc                 | LR__0614
073cc                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350
073cc     56 00 00 FF 
073d0     A8 E5 05 F1 | 	add	objptr, ##44456
073d4     F2 14 02 FB | 	rdlong	arg02, objptr
073d8     01 14 06 F1 | 	add	arg02, #1
073dc     03 14 66 F0 | 	shl	arg02, #3
073e0     02 00 00 FF 
073e4     38 E4 85 F1 | 	sub	objptr, ##1080
073e8     F2 14 02 F1 | 	add	arg02, objptr
073ec     0A 13 02 FB | 	rdlong	arg01, arg02
073f0     53 01 00 FF 
073f4     75 14 06 F6 | 	mov	arg02, ##@LR__4667
073f8     54 00 00 FF 
073fc     70 E5 85 F1 | 	sub	objptr, ##43376
07400     8C 38 B1 FD | 	call	#__system___string_cmp
07404     00 FA 0D F2 | 	cmp	result1, #0 wz
07408     56 00 00 AF 
0740c     A8 E5 05 A1 |  if_e	add	objptr, ##44456
07410     F2 30 02 AB |  if_e	rdlong	local10, objptr
07414     56 00 00 AF 
07418     A8 E5 85 A1 |  if_e	sub	objptr, ##44456
0741c     01 30 06 A1 |  if_e	add	local10, #1
07420     7C 01 90 AD |  if_e	jmp	#LR__0620
07424     56 00 00 FF 
07428     A8 E5 05 F1 | 	add	objptr, ##44456
0742c     F2 30 02 FB | 	rdlong	local10, objptr
07430     56 00 00 FF 
07434     A8 E5 85 F1 | 	sub	objptr, ##44456
07438     02 30 06 F1 | 	add	local10, #2
0743c     00 32 06 F6 | 	mov	local11, #0
07440                 | '   l=ct+2 : m=0 : do
07440                 | LR__0615
07440                 | '    ' print "in dim, lparts: ";lparts(l).part$, isdec(lparts(l).part$)
07440                 | '     if isdec(lparts(l).part$) then 
07440     18 25 02 F6 | 	mov	local04, local10
07444     03 24 66 F0 | 	shl	local04, #3
07448     54 00 00 FF 
0744c     70 E5 05 F1 | 	add	objptr, ##43376
07450     F2 24 02 F1 | 	add	local04, objptr
07454     12 13 02 FB | 	rdlong	arg01, local04
07458     54 00 00 FF 
0745c     70 E5 85 F1 | 	sub	objptr, ##43376
07460     70 D7 BF FD | 	call	#_isdec
07464     00 FA 0D F2 | 	cmp	result1, #0 wz
07468     44 00 90 AD |  if_e	jmp	#LR__0616
0746c     19 35 02 F6 | 	mov	local12, local11
07470     0F 35 06 F1 | 	add	local12, #local01
07474     18 2F 02 F6 | 	mov	local09, local10
07478     03 2E 66 F0 | 	shl	local09, #3
0747c     54 00 00 FF 
07480     70 E5 05 F1 | 	add	objptr, ##43376
07484     F2 2E 02 F1 | 	add	local09, objptr
07488     17 13 02 FB | 	rdlong	arg01, local09
0748c     00 14 06 F6 | 	mov	arg02, #0
07490     54 00 00 FF 
07494     70 E5 85 F1 | 	sub	objptr, ##43376
07498     68 69 B1 FD | 	call	#__system____builtin_atoi
0749c     FD 36 02 F6 | 	mov	local13, result1
074a0                 | 	'.live	local13
074a0                 | 	'.live	local12
074a0     00 34 8E F9 | 	altd	local12, #0
074a4     1B 35 02 F6 | 	mov	local12, local13
074a8     01 32 06 F1 | 	add	local11, #1
074ac     10 00 90 FD | 	jmp	#LR__0617
074b0                 | LR__0616
074b0     11 12 06 F6 | 	mov	arg01, #17
074b4     A0 01 B1 FD | 	call	#_printerror
074b8                 | '       printerror (17)  : return(17)
074b8     11 FA 05 F6 | 	mov	result1, #17
074bc     44 04 90 FD | 	jmp	#LR__0636
074c0                 | LR__0617
074c0                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
074c0     18 25 02 F6 | 	mov	local04, local10
074c4     01 24 06 F1 | 	add	local04, #1
074c8     03 24 66 F0 | 	shl	local04, #3
074cc     54 00 00 FF 
074d0     70 E5 05 F1 | 	add	objptr, ##43376
074d4     F2 24 02 F1 | 	add	local04, objptr
074d8     12 13 02 FB | 	rdlong	arg01, local04
074dc     53 01 00 FF 
074e0     78 14 06 F6 | 	mov	arg02, ##@LR__4668
074e4     54 00 00 FF 
074e8     70 E5 85 F1 | 	sub	objptr, ##43376
074ec     A0 37 B1 FD | 	call	#__system___string_cmp
074f0     00 FA 0D F2 | 	cmp	result1, #0 wz
074f4     48 00 90 AD |  if_e	jmp	#LR__0618
074f8     18 37 02 F6 | 	mov	local13, local10
074fc     01 36 06 F1 | 	add	local13, #1
07500     03 36 66 F0 | 	shl	local13, #3
07504     54 00 00 FF 
07508     70 E5 05 F1 | 	add	objptr, ##43376
0750c     F2 36 02 F1 | 	add	local13, objptr
07510     1B 13 02 FB | 	rdlong	arg01, local13
07514     53 01 00 FF 
07518     7A 14 06 F6 | 	mov	arg02, ##@LR__4669
0751c     54 00 00 FF 
07520     70 E5 85 F1 | 	sub	objptr, ##43376
07524     68 37 B1 FD | 	call	#__system___string_cmp
07528     00 FA 0D F2 | 	cmp	result1, #0 wz
0752c     10 00 90 AD |  if_e	jmp	#LR__0618
07530     2C 12 06 F6 | 	mov	arg01, #44
07534     20 01 B1 FD | 	call	#_printerror
07538     2C FA 05 F6 | 	mov	result1, #44
0753c     C4 03 90 FD | 	jmp	#LR__0636
07540                 | LR__0618
07540     02 30 06 F1 | 	add	local10, #2
07544     18 25 02 F6 | 	mov	local04, local10
07548     01 24 86 F1 | 	sub	local04, #1
0754c     03 24 66 F0 | 	shl	local04, #3
07550     54 00 00 FF 
07554     70 E5 05 F1 | 	add	objptr, ##43376
07558     F2 24 02 F1 | 	add	local04, objptr
0755c     12 13 02 FB | 	rdlong	arg01, local04
07560     53 01 00 FF 
07564     7C 14 06 F6 | 	mov	arg02, ##@LR__4670
07568     54 00 00 FF 
0756c     70 E5 85 F1 | 	sub	objptr, ##43376
07570     1C 37 B1 FD | 	call	#__system___string_cmp
07574     00 FA 0D F2 | 	cmp	result1, #0 wz
07578     03 32 56 52 |  if_ne	cmps	local11, #3 wc
0757c     C0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0615
07580                 | '   if m>3 then printerror(45): return(45)
07580     04 32 56 F2 | 	cmps	local11, #4 wc
07584     10 00 90 CD |  if_b	jmp	#LR__0619
07588     2D 12 06 F6 | 	mov	arg01, #45
0758c     C8 00 B1 FD | 	call	#_printerror
07590     2D FA 05 F6 | 	mov	result1, #45
07594     6C 03 90 FD | 	jmp	#LR__0636
07598                 | LR__0619
07598     00 39 06 F6 | 	mov	local14, #256
0759c     0C 3A 06 F6 | 	mov	local15, #12
075a0                 | LR__0620
075a0                 | '  ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' print lparts(l-1).part$,lparts(l).part$, lparts(l+1).part$
075a0                 | '   arraytype=array_no_type : esize=12
075a0                 | ' 1350 
075a0                 | '   if lparts(l).part$="as" then
075a0     18 25 02 F6 | 	mov	local04, local10
075a4     03 24 66 F0 | 	shl	local04, #3
075a8     54 00 00 FF 
075ac     70 E5 05 F1 | 	add	objptr, ##43376
075b0     F2 24 02 F1 | 	add	local04, objptr
075b4     12 13 02 FB | 	rdlong	arg01, local04
075b8     53 01 00 FF 
075bc     7E 14 06 F6 | 	mov	arg02, ##@LR__4671
075c0     54 00 00 FF 
075c4     70 E5 85 F1 | 	sub	objptr, ##43376
075c8     C4 36 B1 FD | 	call	#__system___string_cmp
075cc     00 FA 0D F2 | 	cmp	result1, #0 wz
075d0     F8 01 90 5D |  if_ne	jmp	#LR__0635
075d4                 | '     select case lparts(l+1).part$
075d4     18 35 02 F6 | 	mov	local12, local10
075d8     01 34 06 F1 | 	add	local12, #1
075dc     03 34 66 F0 | 	shl	local12, #3
075e0     54 00 00 FF 
075e4     70 E5 05 F1 | 	add	objptr, ##43376
075e8     F2 34 02 F1 | 	add	local12, objptr
075ec     1A 3D 02 FB | 	rdlong	local16, local12
075f0     53 01 00 FF 
075f4     81 14 06 F6 | 	mov	arg02, ##@LR__4672
075f8     1E 13 02 F6 | 	mov	arg01, local16
075fc     54 00 00 FF 
07600     70 E5 85 F1 | 	sub	objptr, ##43376
07604     88 36 B1 FD | 	call	#__system___string_cmp
07608     00 FA 0D F2 | 	cmp	result1, #0 wz
0760c     0C 01 90 AD |  if_e	jmp	#LR__0621
07610     53 01 00 FF 
07614     86 14 06 F6 | 	mov	arg02, ##@LR__4673
07618     1E 13 02 F6 | 	mov	arg01, local16
0761c     70 36 B1 FD | 	call	#__system___string_cmp
07620     00 FA 0D F2 | 	cmp	result1, #0 wz
07624     00 01 90 AD |  if_e	jmp	#LR__0622
07628     53 01 00 FF 
0762c     8C 14 06 F6 | 	mov	arg02, ##@LR__4674
07630     1E 13 02 F6 | 	mov	arg01, local16
07634     58 36 B1 FD | 	call	#__system___string_cmp
07638     00 FA 0D F2 | 	cmp	result1, #0 wz
0763c     F4 00 90 AD |  if_e	jmp	#LR__0623
07640     53 01 00 FF 
07644     92 14 06 F6 | 	mov	arg02, ##@LR__4675
07648     1E 13 02 F6 | 	mov	arg01, local16
0764c     40 36 B1 FD | 	call	#__system___string_cmp
07650     00 FA 0D F2 | 	cmp	result1, #0 wz
07654     E8 00 90 AD |  if_e	jmp	#LR__0624
07658     53 01 00 FF 
0765c     99 14 06 F6 | 	mov	arg02, ##@LR__4676
07660     1E 13 02 F6 | 	mov	arg01, local16
07664     28 36 B1 FD | 	call	#__system___string_cmp
07668     00 FA 0D F2 | 	cmp	result1, #0 wz
0766c     DC 00 90 AD |  if_e	jmp	#LR__0625
07670     53 01 00 FF 
07674     9E 14 06 F6 | 	mov	arg02, ##@LR__4677
07678     1E 13 02 F6 | 	mov	arg01, local16
0767c     10 36 B1 FD | 	call	#__system___string_cmp
07680     00 FA 0D F2 | 	cmp	result1, #0 wz
07684     D0 00 90 AD |  if_e	jmp	#LR__0626
07688     53 01 00 FF 
0768c     A6 14 06 F6 | 	mov	arg02, ##@LR__4678
07690     1E 13 02 F6 | 	mov	arg01, local16
07694     F8 35 B1 FD | 	call	#__system___string_cmp
07698     00 FA 0D F2 | 	cmp	result1, #0 wz
0769c     C4 00 90 AD |  if_e	jmp	#LR__0627
076a0     53 01 00 FF 
076a4     AC 14 06 F6 | 	mov	arg02, ##@LR__4679
076a8     1E 13 02 F6 | 	mov	arg01, local16
076ac     E0 35 B1 FD | 	call	#__system___string_cmp
076b0     00 FA 0D F2 | 	cmp	result1, #0 wz
076b4     B8 00 90 AD |  if_e	jmp	#LR__0628
076b8     53 01 00 FF 
076bc     B2 14 06 F6 | 	mov	arg02, ##@LR__4680
076c0     1E 13 02 F6 | 	mov	arg01, local16
076c4     C8 35 B1 FD | 	call	#__system___string_cmp
076c8     00 FA 0D F2 | 	cmp	result1, #0 wz
076cc     AC 00 90 AD |  if_e	jmp	#LR__0629
076d0     53 01 00 FF 
076d4     B9 14 06 F6 | 	mov	arg02, ##@LR__4681
076d8     1E 13 02 F6 | 	mov	arg01, local16
076dc     B0 35 B1 FD | 	call	#__system___string_cmp
076e0     00 FA 0D F2 | 	cmp	result1, #0 wz
076e4     A0 00 90 AD |  if_e	jmp	#LR__0630
076e8     53 01 00 FF 
076ec     C0 14 06 F6 | 	mov	arg02, ##@LR__4682
076f0     1E 13 02 F6 | 	mov	arg01, local16
076f4     98 35 B1 FD | 	call	#__system___string_cmp
076f8     00 FA 0D F2 | 	cmp	result1, #0 wz
076fc     94 00 90 AD |  if_e	jmp	#LR__0631
07700     53 01 00 FF 
07704     C7 14 06 F6 | 	mov	arg02, ##@LR__4683
07708     1E 13 02 F6 | 	mov	arg01, local16
0770c     80 35 B1 FD | 	call	#__system___string_cmp
07710     00 FA 0D F2 | 	cmp	result1, #0 wz
07714     88 00 90 AD |  if_e	jmp	#LR__0632
07718     90 00 90 FD | 	jmp	#LR__0633
0771c                 | LR__0621
0771c     01 39 06 F6 | 	mov	local14, #257
07720     01 3A 06 F6 | 	mov	local15, #1
07724     A4 00 90 FD | 	jmp	#LR__0635
07728                 | LR__0622
07728     02 39 06 F6 | 	mov	local14, #258
0772c     01 3A 06 F6 | 	mov	local15, #1
07730     98 00 90 FD | 	jmp	#LR__0635
07734                 | LR__0623
07734     03 39 06 F6 | 	mov	local14, #259
07738     02 3A 06 F6 | 	mov	local15, #2
0773c     8C 00 90 FD | 	jmp	#LR__0635
07740                 | LR__0624
07740     04 39 06 F6 | 	mov	local14, #260
07744     02 3A 06 F6 | 	mov	local15, #2
07748     80 00 90 FD | 	jmp	#LR__0635
0774c                 | LR__0625
0774c     05 39 06 F6 | 	mov	local14, #261
07750     04 3A 06 F6 | 	mov	local15, #4
07754     74 00 90 FD | 	jmp	#LR__0635
07758                 | LR__0626
07758     05 39 06 F6 | 	mov	local14, #261
0775c     04 3A 06 F6 | 	mov	local15, #4
07760     68 00 90 FD | 	jmp	#LR__0635
07764                 | LR__0627
07764     06 39 06 F6 | 	mov	local14, #262
07768     04 3A 06 F6 | 	mov	local15, #4
0776c     5C 00 90 FD | 	jmp	#LR__0635
07770                 | LR__0628
07770     07 39 06 F6 | 	mov	local14, #263
07774     08 3A 06 F6 | 	mov	local15, #8
07778     50 00 90 FD | 	jmp	#LR__0635
0777c                 | LR__0629
0777c     08 39 06 F6 | 	mov	local14, #264
07780     08 3A 06 F6 | 	mov	local15, #8
07784     44 00 90 FD | 	jmp	#LR__0635
07788                 | LR__0630
07788     09 39 06 F6 | 	mov	local14, #265
0778c     04 3A 06 F6 | 	mov	local15, #4
07790     38 00 90 FD | 	jmp	#LR__0635
07794                 | LR__0631
07794     0A 39 06 F6 | 	mov	local14, #266
07798     08 3A 06 F6 | 	mov	local15, #8
0779c     2C 00 90 FD | 	jmp	#LR__0635
077a0                 | LR__0632
077a0     0B 39 06 F6 | 	mov	local14, #267
077a4     04 3A 06 F6 | 	mov	local15, #4
077a8     20 00 90 FD | 	jmp	#LR__0635
077ac                 | LR__0633
077ac     2F 12 06 F6 | 	mov	arg01, #47
077b0     A4 FE B0 FD | 	call	#_printerror
077b4     2F FA 05 F6 | 	mov	result1, #47
077b8     48 01 90 FD | 	jmp	#LR__0636
077bc                 | LR__0634
077bc     2E 12 06 F6 | 	mov	arg01, #46
077c0     94 FE B0 FD | 	call	#_printerror
077c4                 | '   printerror(46): return 46
077c4     2E FA 05 F6 | 	mov	result1, #46
077c8     38 01 90 FD | 	jmp	#LR__0636
077cc                 | LR__0635
077cc     0F 3B 02 FD | 	qmul	local15, local01
077d0     18 2A 62 FD | 	getqx	local07
077d4     10 2B 02 FD | 	qmul	local07, local02
077d8     18 3C 62 FD | 	getqx	local16
077dc     11 3D 02 FD | 	qmul	local16, local03
077e0     7A 00 00 FF 
077e4     DC E5 05 F1 | 	add	objptr, ##62940
077e8     F2 3E 02 FB | 	rdlong	local17, objptr
077ec     1C 15 02 F6 | 	mov	arg02, local14
077f0     01 16 06 F6 | 	mov	arg03, #1
077f4     00 18 06 F6 | 	mov	arg04, #0
077f8                 | '     return fill(addr, pattern, count, listPtr, 4)
077f8     04 1A 06 F6 | 	mov	arg05, #4
077fc     18 3C 62 FD | 	getqx	local16
07800     1E 3F 82 F1 | 	sub	local17, local16
07804     10 3E 86 F1 | 	sub	local17, #16
07808     F2 3E 62 FC | 	wrlong	local17, objptr
0780c     1F 13 02 F6 | 	mov	arg01, local17
07810     6F 00 00 FF 
07814     1C E5 85 F1 | 	sub	objptr, ##57116
07818     1C 2A B1 FD | 	call	#_psram_spin2_fill
0781c     1F 13 02 F6 | 	mov	arg01, local17
07820     02 12 06 F1 | 	add	arg01, #2
07824     1D 15 02 F6 | 	mov	arg02, local15
07828     01 16 06 F6 | 	mov	arg03, #1
0782c     00 18 06 F6 | 	mov	arg04, #0
07830                 | '     return fill(addr, pattern, count, listPtr, 1)
07830     01 1A 06 F6 | 	mov	arg05, #1
07834     00 2A B1 FD | 	call	#_psram_spin2_fill
07838     1F 13 02 F6 | 	mov	arg01, local17
0783c     04 12 06 F1 | 	add	arg01, #4
07840     0F 15 02 F6 | 	mov	arg02, local01
07844     01 16 06 F6 | 	mov	arg03, #1
07848     00 18 06 F6 | 	mov	arg04, #0
0784c                 | '     return fill(addr, pattern, count, listPtr, 4)
0784c     04 1A 06 F6 | 	mov	arg05, #4
07850     E4 29 B1 FD | 	call	#_psram_spin2_fill
07854     1F 13 02 F6 | 	mov	arg01, local17
07858     08 12 06 F1 | 	add	arg01, #8
0785c     10 15 02 F6 | 	mov	arg02, local02
07860     01 16 06 F6 | 	mov	arg03, #1
07864     00 18 06 F6 | 	mov	arg04, #0
07868                 | '     return fill(addr, pattern, count, listPtr, 4)
07868     04 1A 06 F6 | 	mov	arg05, #4
0786c     C8 29 B1 FD | 	call	#_psram_spin2_fill
07870     1F 13 02 F6 | 	mov	arg01, local17
07874     0C 12 06 F1 | 	add	arg01, #12
07878     11 15 02 F6 | 	mov	arg02, local03
0787c     01 16 06 F6 | 	mov	arg03, #1
07880     00 18 06 F6 | 	mov	arg04, #0
07884                 | '     return fill(addr, pattern, count, listPtr, 4)
07884     04 1A 06 F6 | 	mov	arg05, #4
07888     AC 29 B1 FD | 	call	#_psram_spin2_fill
0788c     14 35 02 F6 | 	mov	local12, local06
07890     04 34 66 F0 | 	shl	local12, #4
07894     29 00 00 FF 
07898     AC E4 05 F1 | 	add	objptr, ##21164
0789c     F2 34 02 F1 | 	add	local12, objptr
078a0     1A 27 62 FC | 	wrlong	local05, local12
078a4     14 35 02 F6 | 	mov	local12, local06
078a8     04 34 66 F0 | 	shl	local12, #4
078ac     F2 34 02 F1 | 	add	local12, objptr
078b0     04 34 06 F1 | 	add	local12, #4
078b4     1A 3F 62 FC | 	wrlong	local17, local12
078b8     14 35 02 F6 | 	mov	local12, local06
078bc     04 34 66 F0 | 	shl	local12, #4
078c0     F2 34 02 F1 | 	add	local12, objptr
078c4     0C 34 06 F1 | 	add	local12, #12
078c8     1A 39 62 FC | 	wrlong	local14, local12
078cc                 | ' 'print dims(0),dims(1),dims(2),arraytype
078cc                 | ' 
078cc                 | ' arraysize=esize*dims(0)*dims(1)*dims(2)
078cc                 | ' arrayptr=memtop-arraysize-16
078cc                 | ' memtop=arrayptr
078cc                 | ' 
078cc                 | ' pslpoke arrayptr,arraytype
078cc                 | ' pspoke arrayptr+2,esize
078cc                 | ' pslpoke arrayptr+4,dims(0)
078cc                 | ' pslpoke arrayptr+8,dims(1)
078cc                 | ' pslpoke arrayptr+12,dims(2)
078cc                 | ' 
078cc                 | ' variables(j).name=varname2$
078cc                 | ' variables(j).value.uresult=arrayptr
078cc                 | ' variables(j).vartype=arraytype
078cc                 | ' if j=varnum then varnum+=1
078cc     20 00 00 FF 
078d0     00 E4 05 F1 | 	add	objptr, ##16384
078d4     F2 2A 02 FB | 	rdlong	local07, objptr
078d8     54 00 00 FF 
078dc     6C E5 85 F1 | 	sub	objptr, ##43372
078e0     15 29 0A F2 | 	cmp	local06, local07 wz
078e4     54 00 00 AF 
078e8     6C E5 05 A1 |  if_e	add	objptr, ##43372
078ec     F2 2A 02 AB |  if_e	rdlong	local07, objptr
078f0     01 2A 06 A1 |  if_e	add	local07, #1
078f4     F2 2A 62 AC |  if_e	wrlong	local07, objptr
078f8     54 00 00 AF 
078fc     6C E5 85 A1 |  if_e	sub	objptr, ##43372
07900                 | ' 
07900                 | ' return 0
07900     00 FA 05 F6 | 	mov	result1, #0
07904                 | LR__0636
07904     A7 F0 03 F6 | 	mov	ptra, fp
07908     B2 00 A0 FD | 	call	#popregs_
0790c                 | _compile_dim_ret
0790c     2D 00 64 FD | 	ret
07910                 | 
07910                 | ' 
07910                 | ' 
07910                 | ' function compile_for() as ulong  
07910                 | _compile_for
07910     07 4A 05 F6 | 	mov	COUNT_, #7
07914     A8 00 A0 FD | 	call	#pushregs_
07918                 | ' 
07918                 | ' 
07918                 | ' 
07918                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
07918     56 00 00 FF 
0791c     A8 E5 05 F1 | 	add	objptr, ##44456
07920     F2 14 02 FB | 	rdlong	arg02, objptr
07924     01 14 06 F1 | 	add	arg02, #1
07928     03 14 66 F0 | 	shl	arg02, #3
0792c     02 00 00 FF 
07930     38 E4 85 F1 | 	sub	objptr, ##1080
07934     F2 14 02 F1 | 	add	arg02, objptr
07938     0A 13 02 FB | 	rdlong	arg01, arg02
0793c     54 00 00 FF 
07940     70 E5 85 F1 | 	sub	objptr, ##43376
07944                 | ' 
07944                 | ' select case s
07944     51 01 00 FF 
07948     81 15 06 F6 | 	mov	arg02, ##@LR__4504
0794c     40 33 B1 FD | 	call	#__system___string_cmp
07950     00 FA 0D F2 | 	cmp	result1, #0 wz
07954     1B FA 05 A6 |  if_e	mov	result1, #27
07958     00 FA 05 56 |  if_ne	mov	result1, #0
0795c     00 FA 0D F2 | 	cmp	result1, #0 wz
07960     0C 00 90 AD |  if_e	jmp	#LR__0640
07964     05 12 06 F6 | 	mov	arg01, #5
07968     A0 E4 BF FD | 	call	#_compile_immediate_assign
0796c     10 00 90 FD | 	jmp	#LR__0641
07970                 | LR__0640
07970     20 12 06 F6 | 	mov	arg01, #32
07974     10 E9 BF FD | 	call	#_compile_error
07978     20 FA 05 F6 | 	mov	result1, #32
0797c     E8 02 90 FD | 	jmp	#LR__0647
07980                 | LR__0641
07980     69 00 00 FF 
07984     E0 E5 05 F1 | 	add	objptr, ##54240
07988     F2 12 02 FB | 	rdlong	arg01, objptr
0798c     09 25 02 F6 | 	mov	local04, arg01
07990     01 24 86 F1 | 	sub	local04, #1
07994     12 15 02 F6 | 	mov	arg02, local04
07998     01 14 66 F0 | 	shl	arg02, #1
0799c     12 15 02 F1 | 	add	arg02, local04
079a0     02 14 66 F0 | 	shl	arg02, #2
079a4     03 00 00 FF 
079a8     00 E4 85 F1 | 	sub	objptr, ##1536
079ac     F2 14 02 F1 | 	add	arg02, objptr
079b0     0A 1F 02 FB | 	rdlong	local01, arg02
079b4     04 14 06 F1 | 	add	arg02, #4
079b8     0A 27 02 FB | 	rdlong	local05, arg02
079bc     01 12 86 F1 | 	sub	arg01, #1
079c0     09 29 02 F6 | 	mov	local06, arg01
079c4     01 28 66 F0 | 	shl	local06, #1
079c8     09 29 02 F1 | 	add	local06, arg01
079cc     02 28 66 F0 | 	shl	local06, #2
079d0     F2 28 02 F1 | 	add	local06, objptr
079d4     08 28 06 F1 | 	add	local06, #8
079d8     14 13 02 FB | 	rdlong	arg01, local06
079dc     13 21 02 F6 | 	mov	local02, local05
079e0     09 23 02 F6 | 	mov	local03, arg01
079e4                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
079e4                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
079e4     17 22 0E F2 | 	cmp	local03, #23 wz
079e8     66 00 00 FF 
079ec     E0 E5 85 F1 | 	sub	objptr, ##52704
079f0     10 00 90 AD |  if_e	jmp	#LR__0642
079f4     22 12 06 F6 | 	mov	arg01, #34
079f8     8C E8 BF FD | 	call	#_compile_error
079fc     22 FA 05 F6 | 	mov	result1, #34
07a00     64 02 90 FD | 	jmp	#LR__0647
07a04                 | LR__0642
07a04     0F 2B 02 F6 | 	mov	local07, local01
07a08                 | ' varnum=t1.result.uresult
07a08                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
07a08     56 00 00 FF 
07a0c     A8 E5 05 F1 | 	add	objptr, ##44456
07a10     F2 24 02 FB | 	rdlong	local04, objptr
07a14     03 24 66 F0 | 	shl	local04, #3
07a18     02 00 00 FF 
07a1c     38 E4 85 F1 | 	sub	objptr, ##1080
07a20     F2 24 02 F1 | 	add	local04, objptr
07a24     12 13 02 FB | 	rdlong	arg01, local04
07a28     53 01 00 FF 
07a2c     CE 14 06 F6 | 	mov	arg02, ##@LR__4684
07a30     54 00 00 FF 
07a34     70 E5 85 F1 | 	sub	objptr, ##43376
07a38     54 32 B1 FD | 	call	#__system___string_cmp
07a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
07a40     10 00 90 AD |  if_e	jmp	#LR__0643
07a44     21 12 06 F6 | 	mov	arg01, #33
07a48     3C E8 BF FD | 	call	#_compile_error
07a4c     21 FA 05 F6 | 	mov	result1, #33
07a50     14 02 90 FD | 	jmp	#LR__0647
07a54                 | LR__0643
07a54     56 00 00 FF 
07a58     A8 E5 05 F1 | 	add	objptr, ##44456
07a5c     F2 24 02 FB | 	rdlong	local04, objptr
07a60     01 24 06 F1 | 	add	local04, #1
07a64     F2 24 62 FC | 	wrlong	local04, objptr
07a68     56 00 00 FF 
07a6c     A8 E5 85 F1 | 	sub	objptr, ##44456
07a70     D4 0B B0 FD | 	call	#_expr
07a74                 | ' ct+=1
07a74                 | ' expr()  ' there is "to" value pushed on the stack
07a74                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
07a74     56 00 00 FF 
07a78     A8 E5 05 F1 | 	add	objptr, ##44456
07a7c     F2 24 02 FB | 	rdlong	local04, objptr
07a80     03 24 66 F0 | 	shl	local04, #3
07a84     02 00 00 FF 
07a88     38 E4 85 F1 | 	sub	objptr, ##1080
07a8c     F2 24 02 F1 | 	add	local04, objptr
07a90     12 13 02 FB | 	rdlong	arg01, local04
07a94     53 01 00 FF 
07a98     D1 14 06 F6 | 	mov	arg02, ##@LR__4685
07a9c     54 00 00 FF 
07aa0     70 E5 85 F1 | 	sub	objptr, ##43376
07aa4     E8 31 B1 FD | 	call	#__system___string_cmp
07aa8     00 FA 0D F2 | 	cmp	result1, #0 wz
07aac     3C 00 90 AD |  if_e	jmp	#LR__0644
07ab0     56 00 00 FF 
07ab4     A8 E5 05 F1 | 	add	objptr, ##44456
07ab8     F2 28 02 FB | 	rdlong	local06, objptr
07abc     03 28 66 F0 | 	shl	local06, #3
07ac0     02 00 00 FF 
07ac4     38 E4 85 F1 | 	sub	objptr, ##1080
07ac8     F2 28 02 F1 | 	add	local06, objptr
07acc     14 13 02 FB | 	rdlong	arg01, local06
07ad0     53 01 00 FF 
07ad4     D6 14 06 F6 | 	mov	arg02, ##@LR__4686
07ad8     54 00 00 FF 
07adc     70 E5 85 F1 | 	sub	objptr, ##43376
07ae0     AC 31 B1 FD | 	call	#__system___string_cmp
07ae4     00 FA 0D F2 | 	cmp	result1, #0 wz
07ae8     24 00 90 5D |  if_ne	jmp	#LR__0645
07aec                 | LR__0644
07aec     56 00 00 FF 
07af0     A8 E5 05 F1 | 	add	objptr, ##44456
07af4     F2 28 02 FB | 	rdlong	local06, objptr
07af8     01 28 06 F1 | 	add	local06, #1
07afc     F2 28 62 FC | 	wrlong	local06, objptr
07b00     56 00 00 FF 
07b04     A8 E5 85 F1 | 	sub	objptr, ##44456
07b08     3C 0B B0 FD | 	call	#_expr
07b0c     78 00 90 FD | 	jmp	#LR__0646
07b10                 | LR__0645
07b10     69 00 00 FF 
07b14     E0 E5 05 F1 | 	add	objptr, ##54240
07b18     F2 28 02 FB | 	rdlong	local06, objptr
07b1c     14 27 02 F6 | 	mov	local05, local06
07b20     01 26 66 F0 | 	shl	local05, #1
07b24     14 27 02 F1 | 	add	local05, local06
07b28     02 26 66 F0 | 	shl	local05, #2
07b2c     03 00 00 FF 
07b30     00 E4 85 F1 | 	sub	objptr, ##1536
07b34     F2 26 02 F1 | 	add	local05, objptr
07b38     08 26 06 F1 | 	add	local05, #8
07b3c     13 39 68 FC | 	wrlong	#28, local05
07b40     03 00 00 FF 
07b44     00 E4 05 F1 | 	add	objptr, ##1536
07b48     F2 28 02 FB | 	rdlong	local06, objptr
07b4c     14 27 02 F6 | 	mov	local05, local06
07b50     01 26 66 F0 | 	shl	local05, #1
07b54     14 27 02 F1 | 	add	local05, local06
07b58     02 26 66 F0 | 	shl	local05, #2
07b5c     03 00 00 FF 
07b60     00 E4 85 F1 | 	sub	objptr, ##1536
07b64     F2 26 02 F1 | 	add	local05, objptr
07b68     13 03 68 FC | 	wrlong	#1, local05
07b6c     03 00 00 FF 
07b70     00 E4 05 F1 | 	add	objptr, ##1536
07b74     F2 28 02 FB | 	rdlong	local06, objptr
07b78     01 28 06 F1 | 	add	local06, #1
07b7c     F2 28 62 FC | 	wrlong	local06, objptr
07b80     69 00 00 FF 
07b84     E0 E5 85 F1 | 	sub	objptr, ##54240
07b88                 | LR__0646
07b88     69 00 00 FF 
07b8c     E0 E5 05 F1 | 	add	objptr, ##54240
07b90     F2 28 02 FB | 	rdlong	local06, objptr
07b94     14 27 02 F6 | 	mov	local05, local06
07b98     01 26 66 F0 | 	shl	local05, #1
07b9c     14 27 02 F1 | 	add	local05, local06
07ba0     02 26 66 F0 | 	shl	local05, #2
07ba4     03 00 00 FF 
07ba8     00 E4 85 F1 | 	sub	objptr, ##1536
07bac     F2 26 02 F1 | 	add	local05, objptr
07bb0     08 26 06 F1 | 	add	local05, #8
07bb4     13 39 68 FC | 	wrlong	#28, local05
07bb8     03 00 00 FF 
07bbc     00 E4 05 F1 | 	add	objptr, ##1536
07bc0     F2 28 02 FB | 	rdlong	local06, objptr
07bc4     14 27 02 F6 | 	mov	local05, local06
07bc8     01 26 66 F0 | 	shl	local05, #1
07bcc     14 27 02 F1 | 	add	local05, local06
07bd0     02 26 66 F0 | 	shl	local05, #2
07bd4     03 00 00 FF 
07bd8     00 E4 85 F1 | 	sub	objptr, ##1536
07bdc     F2 26 02 F1 | 	add	local05, objptr
07be0     13 2B 62 FC | 	wrlong	local07, local05
07be4     03 00 00 FF 
07be8     00 E4 05 F1 | 	add	objptr, ##1536
07bec     F2 2A 02 FB | 	rdlong	local07, objptr
07bf0     01 2A 06 F1 | 	add	local07, #1
07bf4     F2 2A 62 FC | 	wrlong	local07, objptr
07bf8     15 29 02 F6 | 	mov	local06, local07
07bfc     01 28 66 F0 | 	shl	local06, #1
07c00     15 29 02 F1 | 	add	local06, local07
07c04     02 28 66 F0 | 	shl	local06, #2
07c08     03 00 00 FF 
07c0c     00 E4 85 F1 | 	sub	objptr, ##1536
07c10     F2 28 02 F1 | 	add	local06, objptr
07c14     08 28 06 F1 | 	add	local06, #8
07c18     14 95 68 FC | 	wrlong	#74, local06
07c1c     03 00 00 FF 
07c20     00 E4 05 F1 | 	add	objptr, ##1536
07c24     F2 2A 02 FB | 	rdlong	local07, objptr
07c28     15 29 02 F6 | 	mov	local06, local07
07c2c     01 28 66 F0 | 	shl	local06, #1
07c30     15 29 02 F1 | 	add	local06, local07
07c34     02 28 66 F0 | 	shl	local06, #2
07c38     03 00 00 FF 
07c3c     00 E4 85 F1 | 	sub	objptr, ##1536
07c40     F2 28 02 F1 | 	add	local06, objptr
07c44     14 01 68 FC | 	wrlong	#0, local06
07c48     03 00 00 FF 
07c4c     00 E4 05 F1 | 	add	objptr, ##1536
07c50     F2 2A 02 FB | 	rdlong	local07, objptr
07c54     01 2A 06 F1 | 	add	local07, #1
07c58     F2 2A 62 FC | 	wrlong	local07, objptr
07c5c     69 00 00 FF 
07c60     E0 E5 85 F1 | 	sub	objptr, ##54240
07c64                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
07c64                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
07c64                 | ' 
07c64                 | ' 
07c64                 | ' return 0
07c64     00 FA 05 F6 | 	mov	result1, #0
07c68                 | LR__0647
07c68     A7 F0 03 F6 | 	mov	ptra, fp
07c6c     B2 00 A0 FD | 	call	#popregs_
07c70                 | _compile_for_ret
07c70     2D 00 64 FD | 	ret
07c74                 | 
07c74                 | ' 
07c74                 | ' 
07c74                 | ' sub do_for()
07c74                 | _do_for
07c74     05 4A 05 F6 | 	mov	COUNT_, #5
07c78     A8 00 A0 FD | 	call	#pushregs_
07c7c     79 00 00 FF 
07c80     3C E5 05 F1 | 	add	objptr, ##62268
07c84     F2 24 02 FB | 	rdlong	local04, objptr
07c88     01 24 06 F1 | 	add	local04, #1
07c8c     F2 24 62 FC | 	wrlong	local04, objptr
07c90     79 00 00 FF 
07c94     3C E5 85 F1 | 	sub	objptr, ##62268
07c98     5C 1E B0 FD | 	call	#_pop
07c9c     FD 1E 02 F6 | 	mov	local01, result1
07ca0     FE 20 02 F6 | 	mov	local02, result2
07ca4     FF 22 02 F6 | 	mov	local03, result3
07ca8     79 00 00 FF 
07cac     3C E5 05 F1 | 	add	objptr, ##62268
07cb0     F2 24 02 FB | 	rdlong	local04, objptr
07cb4     12 27 02 F6 | 	mov	local05, local04
07cb8     02 26 66 F0 | 	shl	local05, #2
07cbc     12 27 02 F1 | 	add	local05, local04
07cc0     02 26 66 F0 | 	shl	local05, #2
07cc4     07 00 00 FF 
07cc8     40 E5 85 F1 | 	sub	objptr, ##3904
07ccc     F2 26 02 F1 | 	add	local05, objptr
07cd0     08 26 06 F1 | 	add	local05, #8
07cd4     13 1F 62 FC | 	wrlong	local01, local05
07cd8     71 00 00 FF 
07cdc     FC E5 85 F1 | 	sub	objptr, ##58364
07ce0     14 1E B0 FD | 	call	#_pop
07ce4     FD 1E 02 F6 | 	mov	local01, result1
07ce8     FE 20 02 F6 | 	mov	local02, result2
07cec     FF 22 02 F6 | 	mov	local03, result3
07cf0     79 00 00 FF 
07cf4     3C E5 05 F1 | 	add	objptr, ##62268
07cf8     F2 24 02 FB | 	rdlong	local04, objptr
07cfc     12 27 02 F6 | 	mov	local05, local04
07d00     02 26 66 F0 | 	shl	local05, #2
07d04     12 27 02 F1 | 	add	local05, local04
07d08     02 26 66 F0 | 	shl	local05, #2
07d0c     07 00 00 FF 
07d10     40 E5 85 F1 | 	sub	objptr, ##3904
07d14     F2 26 02 F1 | 	add	local05, objptr
07d18     0C 26 06 F1 | 	add	local05, #12
07d1c     13 1F 62 FC | 	wrlong	local01, local05
07d20     71 00 00 FF 
07d24     FC E5 85 F1 | 	sub	objptr, ##58364
07d28     CC 1D B0 FD | 	call	#_pop
07d2c     FD 1E 02 F6 | 	mov	local01, result1
07d30     FE 20 02 F6 | 	mov	local02, result2
07d34     FF 22 02 F6 | 	mov	local03, result3
07d38     79 00 00 FF 
07d3c     3C E5 05 F1 | 	add	objptr, ##62268
07d40     F2 24 02 FB | 	rdlong	local04, objptr
07d44     12 27 02 F6 | 	mov	local05, local04
07d48     02 26 66 F0 | 	shl	local05, #2
07d4c     12 27 02 F1 | 	add	local05, local04
07d50     02 26 66 F0 | 	shl	local05, #2
07d54     07 00 00 FF 
07d58     40 E5 85 F1 | 	sub	objptr, ##3904
07d5c     F2 26 02 F1 | 	add	local05, objptr
07d60     10 26 06 F1 | 	add	local05, #16
07d64     13 1F 62 FC | 	wrlong	local01, local05
07d68                 | ' fortop+=1
07d68                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
07d68                 | ' 'if i> maxfor then printerror(36) : return
07d68                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
07d68                 | ' t1=pop() : fortable(fortop).stepval=t1.result.iresult
07d68                 | ' t1=pop() : fortable(fortop).endval=t1.result.iresult
07d68                 | ' if compiledline(lineptr_e).result_type=token_end then
07d68     08 00 00 FF 
07d6c     18 E4 85 F1 | 	sub	objptr, ##4120
07d70     F2 1E 02 FB | 	rdlong	local01, objptr
07d74     0F 27 02 F6 | 	mov	local05, local01
07d78     01 26 66 F0 | 	shl	local05, #1
07d7c     0F 27 02 F1 | 	add	local05, local01
07d80     02 26 66 F0 | 	shl	local05, #2
07d84     03 00 00 FF 
07d88     04 E4 85 F1 | 	sub	objptr, ##1540
07d8c     F2 26 02 F1 | 	add	local05, objptr
07d90     08 26 06 F1 | 	add	local05, #8
07d94     13 27 02 FB | 	rdlong	local05, local05
07d98     FE 27 0E F2 | 	cmp	local05, #510 wz
07d9c     66 00 00 FF 
07da0     E0 E5 85 F1 | 	sub	objptr, ##52704
07da4     70 00 90 5D |  if_ne	jmp	#LR__0650
07da8     79 00 00 FF 
07dac     3C E5 05 F1 | 	add	objptr, ##62268
07db0     F2 1E 02 FB | 	rdlong	local01, objptr
07db4     0F 27 02 F6 | 	mov	local05, local01
07db8     02 26 66 F0 | 	shl	local05, #2
07dbc     0F 27 02 F1 | 	add	local05, local01
07dc0     02 26 66 F0 | 	shl	local05, #2
07dc4     07 00 00 FF 
07dc8     40 E5 85 F1 | 	sub	objptr, ##3904
07dcc     F2 26 02 F1 | 	add	local05, objptr
07dd0     07 00 00 FF 
07dd4     18 E5 05 F1 | 	add	objptr, ##3864
07dd8     F2 1E 02 FB | 	rdlong	local01, objptr
07ddc     13 1F 62 FC | 	wrlong	local01, local05
07de0     28 E4 05 F1 | 	add	objptr, #40
07de4     F2 1E 02 FB | 	rdlong	local01, objptr
07de8     0F 27 02 F6 | 	mov	local05, local01
07dec     02 26 66 F0 | 	shl	local05, #2
07df0     0F 27 02 F1 | 	add	local05, local01
07df4     02 26 66 F0 | 	shl	local05, #2
07df8     07 00 00 FF 
07dfc     40 E5 85 F1 | 	sub	objptr, ##3904
07e00     F2 26 02 F1 | 	add	local05, objptr
07e04     04 26 06 F1 | 	add	local05, #4
07e08     13 01 68 FC | 	wrlong	#0, local05
07e0c     71 00 00 FF 
07e10     FC E5 85 F1 | 	sub	objptr, ##58364
07e14     7C 00 90 FD | 	jmp	#LR__0651
07e18                 | LR__0650
07e18     79 00 00 FF 
07e1c     3C E5 05 F1 | 	add	objptr, ##62268
07e20     F2 1E 02 FB | 	rdlong	local01, objptr
07e24     0F 27 02 F6 | 	mov	local05, local01
07e28     02 26 66 F0 | 	shl	local05, #2
07e2c     0F 27 02 F1 | 	add	local05, local01
07e30     02 26 66 F0 | 	shl	local05, #2
07e34     07 00 00 FF 
07e38     40 E5 85 F1 | 	sub	objptr, ##3904
07e3c     F2 26 02 F1 | 	add	local05, objptr
07e40     07 00 00 FF 
07e44     20 E5 05 F1 | 	add	objptr, ##3872
07e48     F2 1E 02 FB | 	rdlong	local01, objptr
07e4c     13 1F 62 FC | 	wrlong	local01, local05
07e50     20 E4 05 F1 | 	add	objptr, #32
07e54     F2 1E 02 FB | 	rdlong	local01, objptr
07e58     0F 27 02 F6 | 	mov	local05, local01
07e5c     02 26 66 F0 | 	shl	local05, #2
07e60     0F 27 02 F1 | 	add	local05, local01
07e64     02 26 66 F0 | 	shl	local05, #2
07e68     07 00 00 FF 
07e6c     40 E5 85 F1 | 	sub	objptr, ##3904
07e70     F2 26 02 F1 | 	add	local05, objptr
07e74     08 00 00 FF 
07e78     18 E4 85 F1 | 	sub	objptr, ##4120
07e7c     F2 1E 02 FB | 	rdlong	local01, objptr
07e80     69 00 00 FF 
07e84     E4 E5 85 F1 | 	sub	objptr, ##54244
07e88     01 1E 06 F1 | 	add	local01, #1
07e8c     04 26 06 F1 | 	add	local05, #4
07e90     13 1F 62 FC | 	wrlong	local01, local05
07e94                 | LR__0651
07e94     A7 F0 03 F6 | 	mov	ptra, fp
07e98     B2 00 A0 FD | 	call	#popregs_
07e9c                 | _do_for_ret
07e9c     2D 00 64 FD | 	ret
07ea0                 | 
07ea0                 | ' 
07ea0                 | ' ' now do_next todo
07ea0                 | ' 
07ea0                 | ' sub do_next()
07ea0                 | _do_next
07ea0     04 4A 05 F6 | 	mov	COUNT_, #4
07ea4     A8 00 A0 FD | 	call	#pushregs_
07ea8     4C 1C B0 FD | 	call	#_pop
07eac     FD 1E 02 F6 | 	mov	local01, result1
07eb0     FE 20 02 F6 | 	mov	local02, result2
07eb4     FF 22 02 F6 | 	mov	local03, result3
07eb8                 | ' 
07eb8                 | ' t1=pop() :varnum=t1.result.uresult
07eb8                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
07eb8     79 00 00 FF 
07ebc     3C E5 05 F1 | 	add	objptr, ##62268
07ec0     F2 12 02 FB | 	rdlong	arg01, objptr
07ec4     09 25 02 F6 | 	mov	local04, arg01
07ec8     02 24 66 F0 | 	shl	local04, #2
07ecc     09 25 02 F1 | 	add	local04, arg01
07ed0     02 24 66 F0 | 	shl	local04, #2
07ed4     07 00 00 FF 
07ed8     40 E5 85 F1 | 	sub	objptr, ##3904
07edc     F2 24 02 F1 | 	add	local04, objptr
07ee0     08 24 06 F1 | 	add	local04, #8
07ee4     12 25 02 FB | 	rdlong	local04, local04
07ee8     0F 25 0A F2 | 	cmp	local04, local01 wz
07eec     71 00 00 FF 
07ef0     FC E5 85 F1 | 	sub	objptr, ##58364
07ef4     0C 00 90 AD |  if_e	jmp	#LR__0660
07ef8     25 12 06 F6 | 	mov	arg01, #37
07efc     58 F7 B0 FD | 	call	#_printerror
07f00     28 02 90 FD | 	jmp	#LR__0664
07f04                 | LR__0660
07f04     79 00 00 FF 
07f08     3C E5 05 F1 | 	add	objptr, ##62268
07f0c     F2 12 02 FB | 	rdlong	arg01, objptr
07f10     09 25 02 F6 | 	mov	local04, arg01
07f14     02 24 66 F0 | 	shl	local04, #2
07f18     09 25 02 F1 | 	add	local04, arg01
07f1c     02 24 66 F0 | 	shl	local04, #2
07f20     07 00 00 FF 
07f24     40 E5 85 F1 | 	sub	objptr, ##3904
07f28     F2 24 02 F1 | 	add	local04, objptr
07f2c     0C 24 06 F1 | 	add	local04, #12
07f30     12 25 02 FB | 	rdlong	local04, local04
07f34     0F 13 02 F6 | 	mov	arg01, local01
07f38     04 12 66 F0 | 	shl	arg01, #4
07f3c     3D 00 00 FF 
07f40     90 E4 85 F1 | 	sub	objptr, ##31376
07f44     F2 12 02 F1 | 	add	arg01, objptr
07f48     0F FF 01 F6 | 	mov	result3, local01
07f4c     04 FE 65 F0 | 	shl	result3, #4
07f50     F2 FE 01 F1 | 	add	result3, objptr
07f54     04 FE 05 F1 | 	add	result3, #4
07f58     FF FE 01 FB | 	rdlong	result3, result3
07f5c     12 FF 01 F1 | 	add	result3, local04
07f60     04 12 06 F1 | 	add	arg01, #4
07f64     09 FF 61 FC | 	wrlong	result3, arg01
07f68                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
07f68                 | ' if fortable(fortop).stepval>=0 then
07f68     44 00 00 FF 
07f6c     D0 E5 05 F1 | 	add	objptr, ##35280
07f70     F2 12 02 FB | 	rdlong	arg01, objptr
07f74     09 25 02 F6 | 	mov	local04, arg01
07f78     02 24 66 F0 | 	shl	local04, #2
07f7c     09 25 02 F1 | 	add	local04, arg01
07f80     02 24 66 F0 | 	shl	local04, #2
07f84     07 00 00 FF 
07f88     40 E5 85 F1 | 	sub	objptr, ##3904
07f8c     F2 24 02 F1 | 	add	local04, objptr
07f90     0C 24 06 F1 | 	add	local04, #12
07f94     12 25 02 FB | 	rdlong	local04, local04
07f98     00 24 56 F2 | 	cmps	local04, #0 wc
07f9c     71 00 00 FF 
07fa0     FC E5 85 F1 | 	sub	objptr, ##58364
07fa4     78 00 90 CD |  if_b	jmp	#LR__0661
07fa8                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
07fa8     04 1E 66 F0 | 	shl	local01, #4
07fac     34 00 00 FF 
07fb0     6C E5 05 F1 | 	add	objptr, ##26988
07fb4     F2 1E 02 F1 | 	add	local01, objptr
07fb8     44 00 00 FF 
07fbc     D0 E5 05 F1 | 	add	objptr, ##35280
07fc0     F2 24 02 FB | 	rdlong	local04, objptr
07fc4     12 13 02 F6 | 	mov	arg01, local04
07fc8     02 12 66 F0 | 	shl	arg01, #2
07fcc     12 13 02 F1 | 	add	arg01, local04
07fd0     02 12 66 F0 | 	shl	arg01, #2
07fd4     07 00 00 FF 
07fd8     40 E5 85 F1 | 	sub	objptr, ##3904
07fdc     F2 12 02 F1 | 	add	arg01, objptr
07fe0     04 1E 06 F1 | 	add	local01, #4
07fe4     0F 25 02 FB | 	rdlong	local04, local01
07fe8     10 12 06 F1 | 	add	arg01, #16
07fec     09 13 02 FB | 	rdlong	arg01, arg01
07ff0     09 25 5A F2 | 	cmps	local04, arg01 wcz
07ff4     71 00 00 FF 
07ff8     FC E5 85 F1 | 	sub	objptr, ##58364
07ffc     9C 00 90 ED |  if_be	jmp	#LR__0663
08000     79 00 00 FF 
08004     3C E5 05 F1 | 	add	objptr, ##62268
08008     F2 24 02 FB | 	rdlong	local04, objptr
0800c     01 24 86 F1 | 	sub	local04, #1
08010     F2 24 62 FC | 	wrlong	local04, objptr
08014     79 00 00 FF 
08018     3C E5 85 F1 | 	sub	objptr, ##62268
0801c     0C 01 90 FD | 	jmp	#LR__0664
08020                 | LR__0661
08020                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
08020     0F 13 02 F6 | 	mov	arg01, local01
08024     04 12 66 F0 | 	shl	arg01, #4
08028     34 00 00 FF 
0802c     6C E5 05 F1 | 	add	objptr, ##26988
08030     F2 12 02 F1 | 	add	arg01, objptr
08034     44 00 00 FF 
08038     D0 E5 05 F1 | 	add	objptr, ##35280
0803c     F2 24 02 FB | 	rdlong	local04, objptr
08040     12 1F 02 F6 | 	mov	local01, local04
08044     02 1E 66 F0 | 	shl	local01, #2
08048     12 1F 02 F1 | 	add	local01, local04
0804c     02 1E 66 F0 | 	shl	local01, #2
08050     07 00 00 FF 
08054     40 E5 85 F1 | 	sub	objptr, ##3904
08058     F2 1E 02 F1 | 	add	local01, objptr
0805c     04 12 06 F1 | 	add	arg01, #4
08060     09 13 02 FB | 	rdlong	arg01, arg01
08064     10 1E 06 F1 | 	add	local01, #16
08068     0F 1F 02 FB | 	rdlong	local01, local01
0806c     0F 13 52 F2 | 	cmps	arg01, local01 wc
08070     71 00 00 FF 
08074     FC E5 85 F1 | 	sub	objptr, ##58364
08078     20 00 90 3D |  if_ae	jmp	#LR__0662
0807c     79 00 00 FF 
08080     3C E5 05 F1 | 	add	objptr, ##62268
08084     F2 24 02 FB | 	rdlong	local04, objptr
08088     01 24 86 F1 | 	sub	local04, #1
0808c     F2 24 62 FC | 	wrlong	local04, objptr
08090     79 00 00 FF 
08094     3C E5 85 F1 | 	sub	objptr, ##62268
08098     90 00 90 FD | 	jmp	#LR__0664
0809c                 | LR__0662
0809c                 | LR__0663
0809c     79 00 00 FF 
080a0     3C E5 05 F1 | 	add	objptr, ##62268
080a4     F2 1E 02 FB | 	rdlong	local01, objptr
080a8     0F 25 02 F6 | 	mov	local04, local01
080ac     02 24 66 F0 | 	shl	local04, #2
080b0     0F 25 02 F1 | 	add	local04, local01
080b4     02 24 66 F0 | 	shl	local04, #2
080b8     07 00 00 FF 
080bc     40 E5 85 F1 | 	sub	objptr, ##3904
080c0     F2 24 02 F1 | 	add	local04, objptr
080c4     12 25 02 FB | 	rdlong	local04, local04
080c8     07 00 00 FF 
080cc     18 E5 05 F1 | 	add	objptr, ##3864
080d0     F2 24 62 FC | 	wrlong	local04, objptr
080d4     28 E4 05 F1 | 	add	objptr, #40
080d8     F2 1E 02 FB | 	rdlong	local01, objptr
080dc     0F 25 02 F6 | 	mov	local04, local01
080e0     02 24 66 F0 | 	shl	local04, #2
080e4     0F 25 02 F1 | 	add	local04, local01
080e8     02 24 66 F0 | 	shl	local04, #2
080ec     07 00 00 FF 
080f0     40 E5 85 F1 | 	sub	objptr, ##3904
080f4     F2 24 02 F1 | 	add	local04, objptr
080f8     04 24 06 F1 | 	add	local04, #4
080fc     12 25 02 FB | 	rdlong	local04, local04
08100     07 00 00 FF 
08104     1C E5 05 F1 | 	add	objptr, ##3868
08108     F2 24 62 FC | 	wrlong	local04, objptr
0810c     0F 00 00 FF 
08110     38 E5 85 F1 | 	sub	objptr, ##7992
08114     F2 24 02 FB | 	rdlong	local04, objptr
08118     01 24 86 F1 | 	sub	local04, #1
0811c     04 E4 05 F1 | 	add	objptr, #4
08120     F2 24 62 FC | 	wrlong	local04, objptr
08124     69 00 00 FF 
08128     E4 E5 85 F1 | 	sub	objptr, ##54244
0812c                 | LR__0664
0812c     A7 F0 03 F6 | 	mov	ptra, fp
08130     B2 00 A0 FD | 	call	#popregs_
08134                 | _do_next_ret
08134     2D 00 64 FD | 	ret
08138                 | 
08138                 | ' 
08138                 | ' 
08138                 | ' function compile_next() as ulong
08138                 | _compile_next
08138     04 4A 05 F6 | 	mov	COUNT_, #4
0813c     A8 00 A0 FD | 	call	#pushregs_
08140     56 00 00 FF 
08144     A8 E5 05 F1 | 	add	objptr, ##44456
08148     F2 12 02 FB | 	rdlong	arg01, objptr
0814c     03 12 66 F0 | 	shl	arg01, #3
08150     02 00 00 FF 
08154     38 E4 85 F1 | 	sub	objptr, ##1080
08158     F2 12 02 F1 | 	add	arg01, objptr
0815c     09 1F 02 FB | 	rdlong	local01, arg01
08160                 | ' 
08160                 | ' varname$=lparts(ct).part$ 
08160                 | ' 'suffix$=right$(varname$,1)
08160                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
08160                 | ' if varnum=0 then compile_error(35)  : return 35
08160     04 E4 85 F1 | 	sub	objptr, #4
08164     F2 14 0A FB | 	rdlong	arg02, objptr wz
08168     54 00 00 FF 
0816c     6C E5 85 F1 | 	sub	objptr, ##43372
08170     10 00 90 5D |  if_ne	jmp	#LR__0670
08174     23 12 06 F6 | 	mov	arg01, #35
08178     0C E1 BF FD | 	call	#_compile_error
0817c     23 FA 05 F6 | 	mov	result1, #35
08180     58 01 90 FD | 	jmp	#LR__0674
08184                 | LR__0670
08184     01 20 66 F6 | 	neg	local02, #1
08188                 | ' j=-1
08188                 | ' for i=0 to varnum-1
08188     00 22 06 F6 | 	mov	local03, #0
0818c     54 00 00 FF 
08190     6C E5 05 F1 | 	add	objptr, ##43372
08194     F2 24 02 FB | 	rdlong	local04, objptr
08198     54 00 00 FF 
0819c     6C E5 85 F1 | 	sub	objptr, ##43372
081a0                 | LR__0671
081a0     12 23 12 F2 | 	cmp	local03, local04 wc
081a4     38 00 90 3D |  if_ae	jmp	#LR__0672
081a8                 | '   if variables(i).name=varname$ then j=i : exit
081a8     11 15 02 F6 | 	mov	arg02, local03
081ac     04 14 66 F0 | 	shl	arg02, #4
081b0     34 00 00 FF 
081b4     6C E5 05 F1 | 	add	objptr, ##26988
081b8     F2 14 02 F1 | 	add	arg02, objptr
081bc     0A 13 02 FB | 	rdlong	arg01, arg02
081c0     0F 15 02 F6 | 	mov	arg02, local01
081c4     34 00 00 FF 
081c8     6C E5 85 F1 | 	sub	objptr, ##26988
081cc     C0 2A B1 FD | 	call	#__system___string_cmp
081d0     00 FA 0D F2 | 	cmp	result1, #0 wz
081d4     11 21 02 A6 |  if_e	mov	local02, local03
081d8     01 22 06 51 |  if_ne	add	local03, #1
081dc     C0 FF 9F 5D |  if_ne	jmp	#LR__0671
081e0                 | LR__0672
081e0                 | ' if j=-1 then compile_error(35) : return 35
081e0     FF FF 7F FF 
081e4     FF 21 0E F2 | 	cmp	local02, ##-1 wz
081e8     10 00 90 5D |  if_ne	jmp	#LR__0673
081ec     23 12 06 F6 | 	mov	arg01, #35
081f0     94 E0 BF FD | 	call	#_compile_error
081f4     23 FA 05 F6 | 	mov	result1, #35
081f8     E0 00 90 FD | 	jmp	#LR__0674
081fc                 | LR__0673
081fc     69 00 00 FF 
08200     E0 E5 05 F1 | 	add	objptr, ##54240
08204     F2 24 02 FB | 	rdlong	local04, objptr
08208     12 23 02 F6 | 	mov	local03, local04
0820c     01 22 66 F0 | 	shl	local03, #1
08210     12 23 02 F1 | 	add	local03, local04
08214     02 22 66 F0 | 	shl	local03, #2
08218     03 00 00 FF 
0821c     00 E4 85 F1 | 	sub	objptr, ##1536
08220     F2 22 02 F1 | 	add	local03, objptr
08224     08 22 06 F1 | 	add	local03, #8
08228     11 39 68 FC | 	wrlong	#28, local03
0822c     03 00 00 FF 
08230     00 E4 05 F1 | 	add	objptr, ##1536
08234     F2 24 02 FB | 	rdlong	local04, objptr
08238     12 23 02 F6 | 	mov	local03, local04
0823c     01 22 66 F0 | 	shl	local03, #1
08240     12 23 02 F1 | 	add	local03, local04
08244     02 22 66 F0 | 	shl	local03, #2
08248     03 00 00 FF 
0824c     00 E4 85 F1 | 	sub	objptr, ##1536
08250     F2 22 02 F1 | 	add	local03, objptr
08254     11 21 62 FC | 	wrlong	local02, local03
08258     03 00 00 FF 
0825c     00 E4 05 F1 | 	add	objptr, ##1536
08260     F2 24 02 FB | 	rdlong	local04, objptr
08264     01 24 06 F1 | 	add	local04, #1
08268     F2 24 62 FC | 	wrlong	local04, objptr
0826c     12 23 02 F6 | 	mov	local03, local04
08270     01 22 66 F0 | 	shl	local03, #1
08274     12 23 02 F1 | 	add	local03, local04
08278     02 22 66 F0 | 	shl	local03, #2
0827c     03 00 00 FF 
08280     00 E4 85 F1 | 	sub	objptr, ##1536
08284     F2 22 02 F1 | 	add	local03, objptr
08288     08 22 06 F1 | 	add	local03, #8
0828c     11 97 68 FC | 	wrlong	#75, local03
08290     03 00 00 FF 
08294     00 E4 05 F1 | 	add	objptr, ##1536
08298     F2 24 02 FB | 	rdlong	local04, objptr
0829c     12 23 02 F6 | 	mov	local03, local04
082a0     01 22 66 F0 | 	shl	local03, #1
082a4     12 23 02 F1 | 	add	local03, local04
082a8     02 22 66 F0 | 	shl	local03, #2
082ac     03 00 00 FF 
082b0     00 E4 85 F1 | 	sub	objptr, ##1536
082b4     F2 22 02 F1 | 	add	local03, objptr
082b8     11 01 68 FC | 	wrlong	#0, local03
082bc     03 00 00 FF 
082c0     00 E4 05 F1 | 	add	objptr, ##1536
082c4     F2 24 02 FB | 	rdlong	local04, objptr
082c8     01 24 06 F1 | 	add	local04, #1
082cc     F2 24 62 FC | 	wrlong	local04, objptr
082d0     69 00 00 FF 
082d4     E0 E5 85 F1 | 	sub	objptr, ##54240
082d8                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
082d8                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
082d8                 | ' return 0
082d8     00 FA 05 F6 | 	mov	result1, #0
082dc                 | LR__0674
082dc     A7 F0 03 F6 | 	mov	ptra, fp
082e0     B2 00 A0 FD | 	call	#popregs_
082e4                 | _compile_next_ret
082e4     2D 00 64 FD | 	ret
082e8                 | 
082e8                 | ' 
082e8                 | ' 
082e8                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
082e8                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
082e8                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
082e8                 | ' 
082e8                 | ' 
082e8                 | ' function compile_goto( ) as ulong
082e8                 | _compile_goto
082e8     03 4A 05 F6 | 	mov	COUNT_, #3
082ec     A8 00 A0 FD | 	call	#pushregs_
082f0     28 F0 07 F1 | 	add	ptra, #40
082f4                 | ' 
082f4                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
082f4     56 00 00 FF 
082f8     A8 E5 05 F1 | 	add	objptr, ##44456
082fc     F2 16 02 FB | 	rdlong	arg03, objptr
08300     03 16 66 F0 | 	shl	arg03, #3
08304     02 00 00 FF 
08308     38 E4 85 F1 | 	sub	objptr, ##1080
0830c     F2 16 02 F1 | 	add	arg03, objptr
08310     04 16 06 F1 | 	add	arg03, #4
08314     0B 17 02 FB | 	rdlong	arg03, arg03
08318     01 00 00 FF 
0831c     00 16 0E F2 | 	cmp	arg03, ##512 wz
08320     54 00 00 FF 
08324     70 E5 85 F1 | 	sub	objptr, ##43376
08328     CC 02 90 5D |  if_ne	jmp	#LR__0685
0832c     56 00 00 FF 
08330     A8 E5 05 F1 | 	add	objptr, ##44456
08334     F2 16 02 FB | 	rdlong	arg03, objptr
08338     01 16 06 F1 | 	add	arg03, #1
0833c     03 16 66 F0 | 	shl	arg03, #3
08340     02 00 00 FF 
08344     38 E4 85 F1 | 	sub	objptr, ##1080
08348     F2 16 02 F1 | 	add	arg03, objptr
0834c     04 16 06 F1 | 	add	arg03, #4
08350     0B 17 02 FB | 	rdlong	arg03, arg03
08354     FE 17 0E F2 | 	cmp	arg03, #510 wz
08358     54 00 00 FF 
0835c     70 E5 85 F1 | 	sub	objptr, ##43376
08360     94 02 90 5D |  if_ne	jmp	#LR__0685
08364     56 00 00 FF 
08368     A8 E5 05 F1 | 	add	objptr, ##44456
0836c     F2 16 02 FB | 	rdlong	arg03, objptr
08370     03 16 66 F0 | 	shl	arg03, #3
08374     02 00 00 FF 
08378     38 E4 85 F1 | 	sub	objptr, ##1080
0837c     F2 16 02 F1 | 	add	arg03, objptr
08380     0B 13 02 FB | 	rdlong	arg01, arg03
08384     00 14 06 F6 | 	mov	arg02, #0
08388     54 00 00 FF 
0838c     70 E5 85 F1 | 	sub	objptr, ##43376
08390     70 5A B1 FD | 	call	#__system____builtin_atoi
08394     04 4E 05 F1 | 	add	fp, #4
08398     A7 FA 61 FC | 	wrlong	result1, fp
0839c     69 00 00 FF 
083a0     E0 E5 05 F1 | 	add	objptr, ##54240
083a4     F2 1E 02 FB | 	rdlong	local01, objptr
083a8     0F 21 02 F6 | 	mov	local02, local01
083ac     01 20 66 F0 | 	shl	local02, #1
083b0     0F 21 02 F1 | 	add	local02, local01
083b4     02 20 66 F0 | 	shl	local02, #2
083b8     03 00 00 FF 
083bc     00 E4 85 F1 | 	sub	objptr, ##1536
083c0     F2 20 02 F1 | 	add	local02, objptr
083c4     08 20 06 F1 | 	add	local02, #8
083c8     10 9D 68 FC | 	wrlong	#78, local02
083cc     03 00 00 FF 
083d0     08 E4 05 F1 | 	add	objptr, ##1544
083d4     F2 22 02 FB | 	rdlong	local03, objptr
083d8     69 00 00 FF 
083dc     E8 E5 85 F1 | 	sub	objptr, ##54248
083e0     04 4E 05 F1 | 	add	fp, #4
083e4     A7 22 62 FC | 	wrlong	local03, fp
083e8     08 4E 85 F1 | 	sub	fp, #8
083ec                 | ' 
083ec                 | '   gotoline=val%(lparts(ct).part$) 
083ec                 | '   compiledline(lineptr).result_type=token_fast_goto
083ec                 | ' ' now find a pointer to goto
083ec                 | '   gotoptr=programstart
083ec                 | '   do
083ec                 | LR__0680
083ec     10 4E 05 F1 | 	add	fp, #16
083f0     A7 12 02 F6 | 	mov	arg01, fp
083f4     08 4E 85 F1 | 	sub	fp, #8
083f8     A7 14 02 FB | 	rdlong	arg02, fp
083fc     08 4E 85 F1 | 	sub	fp, #8
08400     18 16 06 F6 | 	mov	arg03, #24
08404     0B 00 00 FF 
08408     C0 E4 05 F1 | 	add	objptr, ##5824
0840c     F0 1C B1 FD | 	call	#_psram_spin2_read1
08410     0B 00 00 FF 
08414     C0 E4 85 F1 | 	sub	objptr, ##5824
08418                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
08418                 | '     if gotoheader(0)<>$FFFFFFFF then
08418     10 4E 05 F1 | 	add	fp, #16
0841c     A7 22 02 FB | 	rdlong	local03, fp
08420     10 4E 85 F1 | 	sub	fp, #16
08424     FF FF 7F FF 
08428     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0842c     24 00 90 AD |  if_e	jmp	#LR__0681
08430     08 4E 05 F1 | 	add	fp, #8
08434     A7 22 02 FB | 	rdlong	local03, fp
08438     04 4E 05 F1 | 	add	fp, #4
0843c     A7 22 62 FC | 	wrlong	local03, fp
08440     18 4E 05 F1 | 	add	fp, #24
08444     A7 22 02 FB | 	rdlong	local03, fp
08448     1C 4E 85 F1 | 	sub	fp, #28
0844c     A7 22 62 FC | 	wrlong	local03, fp
08450     08 4E 85 F1 | 	sub	fp, #8
08454                 | LR__0681
08454     24 4E 05 F1 | 	add	fp, #36
08458     A7 22 02 FB | 	rdlong	local03, fp
0845c     24 4E 85 F1 | 	sub	fp, #36
08460     FF FF 3F FF 
08464     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
08468     10 4E 05 51 |  if_ne	add	fp, #16
0846c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
08470     10 4E 85 51 |  if_ne	sub	fp, #16
08474     FF FF 7F 5F 
08478     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0847c     1C 00 90 AD |  if_e	jmp	#LR__0682
08480     10 4E 05 F1 | 	add	fp, #16
08484     A7 22 02 FB | 	rdlong	local03, fp
08488     0C 4E 85 F1 | 	sub	fp, #12
0848c     A7 20 02 FB | 	rdlong	local02, fp
08490     04 4E 85 F1 | 	sub	fp, #4
08494     10 23 0A F2 | 	cmp	local03, local02 wz
08498     50 FF 9F 5D |  if_ne	jmp	#LR__0680
0849c                 | LR__0682
0849c                 | '   if gotoheader(0)=gotoline then
0849c     10 4E 05 F1 | 	add	fp, #16
084a0     A7 22 02 FB | 	rdlong	local03, fp
084a4     0C 4E 85 F1 | 	sub	fp, #12
084a8     A7 1E 02 FB | 	rdlong	local01, fp
084ac     04 4E 85 F1 | 	sub	fp, #4
084b0     0F 23 0A F2 | 	cmp	local03, local01 wz
084b4     7C 00 90 5D |  if_ne	jmp	#LR__0683
084b8     69 00 00 FF 
084bc     E0 E5 05 F1 | 	add	objptr, ##54240
084c0     F2 1E 02 FB | 	rdlong	local01, objptr
084c4     0F 21 02 F6 | 	mov	local02, local01
084c8     01 20 66 F0 | 	shl	local02, #1
084cc     0F 21 02 F1 | 	add	local02, local01
084d0     02 20 66 F0 | 	shl	local02, #2
084d4     03 00 00 FF 
084d8     00 E4 85 F1 | 	sub	objptr, ##1536
084dc     F2 20 02 F1 | 	add	local02, objptr
084e0     0C 4E 05 F1 | 	add	fp, #12
084e4     A7 22 02 FB | 	rdlong	local03, fp
084e8     10 23 62 FC | 	wrlong	local03, local02
084ec     03 00 00 FF 
084f0     00 E4 05 F1 | 	add	objptr, ##1536
084f4     F2 1E 02 FB | 	rdlong	local01, objptr
084f8     0F 21 02 F6 | 	mov	local02, local01
084fc     01 20 66 F0 | 	shl	local02, #1
08500     0F 21 02 F1 | 	add	local02, local01
08504     02 20 66 F0 | 	shl	local02, #2
08508     03 00 00 FF 
0850c     00 E4 85 F1 | 	sub	objptr, ##1536
08510     F2 20 02 F1 | 	add	local02, objptr
08514     08 4E 85 F1 | 	sub	fp, #8
08518     A7 22 02 FB | 	rdlong	local03, fp
0851c     04 4E 85 F1 | 	sub	fp, #4
08520     04 20 06 F1 | 	add	local02, #4
08524     10 23 62 FC | 	wrlong	local03, local02
08528     66 00 00 FF 
0852c     E0 E5 85 F1 | 	sub	objptr, ##52704
08530     A4 00 90 FD | 	jmp	#LR__0684
08534                 | LR__0683
08534     69 00 00 FF 
08538     E0 E5 05 F1 | 	add	objptr, ##54240
0853c     F2 1E 02 FB | 	rdlong	local01, objptr
08540     0F 21 02 F6 | 	mov	local02, local01
08544     01 20 66 F0 | 	shl	local02, #1
08548     0F 21 02 F1 | 	add	local02, local01
0854c     02 20 66 F0 | 	shl	local02, #2
08550     03 00 00 FF 
08554     00 E4 85 F1 | 	sub	objptr, ##1536
08558     F2 20 02 F1 | 	add	local02, objptr
0855c     00 00 C0 FF 
08560     10 01 68 FC | 	wrlong	##-2147483648, local02
08564     03 00 00 FF 
08568     00 E4 05 F1 | 	add	objptr, ##1536
0856c     F2 1E 02 FB | 	rdlong	local01, objptr
08570     0F 21 02 F6 | 	mov	local02, local01
08574     01 20 66 F0 | 	shl	local02, #1
08578     0F 21 02 F1 | 	add	local02, local01
0857c     02 20 66 F0 | 	shl	local02, #2
08580     03 00 00 FF 
08584     00 E4 85 F1 | 	sub	objptr, ##1536
08588     F2 20 02 F1 | 	add	local02, objptr
0858c     04 4E 05 F1 | 	add	fp, #4
08590     A7 22 02 FB | 	rdlong	local03, fp
08594     04 4E 85 F1 | 	sub	fp, #4
08598     04 20 06 F1 | 	add	local02, #4
0859c     10 23 62 FC | 	wrlong	local03, local02
085a0     03 00 00 FF 
085a4     00 E4 05 F1 | 	add	objptr, ##1536
085a8     F2 1E 02 FB | 	rdlong	local01, objptr
085ac     0F 21 02 F6 | 	mov	local02, local01
085b0     01 20 66 F0 | 	shl	local02, #1
085b4     0F 21 02 F1 | 	add	local02, local01
085b8     02 20 66 F0 | 	shl	local02, #2
085bc     03 00 00 FF 
085c0     00 E4 85 F1 | 	sub	objptr, ##1536
085c4     F2 20 02 F1 | 	add	local02, objptr
085c8     08 20 06 F1 | 	add	local02, #8
085cc     10 A7 68 FC | 	wrlong	#83, local02
085d0     66 00 00 FF 
085d4     E0 E5 85 F1 | 	sub	objptr, ##52704
085d8                 | LR__0684
085d8     69 00 00 FF 
085dc     E0 E5 05 F1 | 	add	objptr, ##54240
085e0     F2 22 02 FB | 	rdlong	local03, objptr
085e4     01 22 06 F1 | 	add	local03, #1
085e8     F2 22 62 FC | 	wrlong	local03, objptr
085ec     69 00 00 FF 
085f0     E0 E5 85 F1 | 	sub	objptr, ##54240
085f4     40 00 90 FD | 	jmp	#LR__0686
085f8                 | LR__0685
085f8                 | '    print "We have a slow goto, todo  "
085f8     00 12 06 F6 | 	mov	arg01, #0
085fc     9C 7F B1 FD | 	call	#__system___getiolock_0442
08600     FD 12 02 F6 | 	mov	arg01, result1
08604     60 26 B1 FD | 	call	#__system___lockmem
08608     53 01 00 FF 
0860c     D9 14 06 F6 | 	mov	arg02, ##@LR__4687
08610     00 12 06 F6 | 	mov	arg01, #0
08614     00 16 06 F6 | 	mov	arg03, #0
08618     54 33 B1 FD | 	call	#__system___basic_print_string
0861c     00 12 06 F6 | 	mov	arg01, #0
08620     0A 14 06 F6 | 	mov	arg02, #10
08624     00 16 06 F6 | 	mov	arg03, #0
08628     EC 32 B1 FD | 	call	#__system___basic_print_char
0862c     00 12 06 F6 | 	mov	arg01, #0
08630     68 7F B1 FD | 	call	#__system___getiolock_0442
08634     FD 00 68 FC | 	wrlong	#0, result1
08638                 | LR__0686
08638                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
08638                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
08638                 | ' return 0
08638     00 FA 05 F6 | 	mov	result1, #0
0863c     A7 F0 03 F6 | 	mov	ptra, fp
08640     B2 00 A0 FD | 	call	#popregs_
08644                 | _compile_goto_ret
08644     2D 00 64 FD | 	ret
08648                 | 
08648                 | ' 
08648                 | ' 
08648                 | ' 
08648                 | ' 
08648                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08648                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
08648                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08648                 | ' 
08648                 | ' 
08648                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08648                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
08648                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08648                 | ' 
08648                 | ' 
08648                 | ' function expr() as integer 
08648                 | _expr
08648     07 4A 05 F6 | 	mov	COUNT_, #7
0864c     A8 00 A0 FD | 	call	#pushregs_
08650                 | _expr_enter
08650     56 00 00 FF 
08654     A8 E5 05 F1 | 	add	objptr, ##44456
08658     F2 24 02 FB | 	rdlong	local04, objptr
0865c     03 24 66 F0 | 	shl	local04, #3
08660     02 00 00 FF 
08664     38 E4 85 F1 | 	sub	objptr, ##1080
08668     F2 24 02 F1 | 	add	local04, objptr
0866c     04 24 06 F1 | 	add	local04, #4
08670     12 27 02 FB | 	rdlong	local05, local04
08674                 | ' 
08674                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
08674     FE 27 0E F2 | 	cmp	local05, #510 wz
08678     54 00 00 FF 
0867c     70 E5 85 F1 | 	sub	objptr, ##43376
08680     C4 00 90 5D |  if_ne	jmp	#LR__0690
08684     1D 1E 06 F6 | 	mov	local01, #29
08688     FF 22 06 F6 | 	mov	local03, #255
0868c     0F 29 02 F6 | 	mov	local06, local01
08690     10 2B 02 F6 | 	mov	local07, local02
08694     11 1F 02 F6 | 	mov	local01, local03
08698     69 00 00 FF 
0869c     E0 E5 05 F1 | 	add	objptr, ##54240
086a0     F2 26 02 FB | 	rdlong	local05, objptr
086a4     13 25 02 F6 | 	mov	local04, local05
086a8     01 24 66 F0 | 	shl	local04, #1
086ac     13 25 02 F1 | 	add	local04, local05
086b0     02 24 66 F0 | 	shl	local04, #2
086b4     03 00 00 FF 
086b8     00 E4 85 F1 | 	sub	objptr, ##1536
086bc     F2 24 02 F1 | 	add	local04, objptr
086c0     12 29 62 FC | 	wrlong	local06, local04
086c4     03 00 00 FF 
086c8     00 E4 05 F1 | 	add	objptr, ##1536
086cc     F2 28 02 FB | 	rdlong	local06, objptr
086d0     14 27 02 F6 | 	mov	local05, local06
086d4     01 26 66 F0 | 	shl	local05, #1
086d8     14 27 02 F1 | 	add	local05, local06
086dc     02 26 66 F0 | 	shl	local05, #2
086e0     03 00 00 FF 
086e4     00 E4 85 F1 | 	sub	objptr, ##1536
086e8     F2 26 02 F1 | 	add	local05, objptr
086ec     04 26 06 F1 | 	add	local05, #4
086f0     13 2B 62 FC | 	wrlong	local07, local05
086f4     03 00 00 FF 
086f8     00 E4 05 F1 | 	add	objptr, ##1536
086fc     F2 2A 02 FB | 	rdlong	local07, objptr
08700     15 29 02 F6 | 	mov	local06, local07
08704     01 28 66 F0 | 	shl	local06, #1
08708     15 29 02 F1 | 	add	local06, local07
0870c     02 28 66 F0 | 	shl	local06, #2
08710     03 00 00 FF 
08714     00 E4 85 F1 | 	sub	objptr, ##1536
08718     F2 28 02 F1 | 	add	local06, objptr
0871c     08 28 06 F1 | 	add	local06, #8
08720     14 1F 62 FC | 	wrlong	local01, local06
08724     03 00 00 FF 
08728     00 E4 05 F1 | 	add	objptr, ##1536
0872c     F2 28 02 FB | 	rdlong	local06, objptr
08730     01 28 06 F1 | 	add	local06, #1
08734     F2 28 62 FC | 	wrlong	local06, objptr
08738     69 00 00 FF 
0873c     E0 E5 85 F1 | 	sub	objptr, ##54240
08740     1D FA 05 F6 | 	mov	result1, #29
08744     54 01 90 FD | 	jmp	#LR__0693
08748                 | LR__0690
08748     00 1E 06 F6 | 	mov	local01, #0
0874c     58 01 B0 FD | 	call	#_addsub
08750     56 00 00 FF 
08754     A8 E5 05 F1 | 	add	objptr, ##44456
08758     F2 24 02 FB | 	rdlong	local04, objptr
0875c     03 24 66 F0 | 	shl	local04, #3
08760     02 00 00 FF 
08764     38 E4 85 F1 | 	sub	objptr, ##1080
08768     F2 24 02 F1 | 	add	local04, objptr
0876c     04 24 06 F1 | 	add	local04, #4
08770     12 27 02 FB | 	rdlong	local05, local04
08774                 | ' t3.result.uresult=0
08774                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
08774                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
08774                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
08774     54 00 00 FF 
08778     70 E5 85 F1 | 	sub	objptr, ##43376
0877c                 | LR__0691
0877c     1B 26 0E F2 | 	cmp	local05, #27 wz
08780     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
08784     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
08788     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
0878c     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
08790     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
08794     00 01 90 5D |  if_ne	jmp	#LR__0692
08798     56 00 00 FF 
0879c     A8 E5 05 F1 | 	add	objptr, ##44456
087a0     F2 28 02 FB | 	rdlong	local06, objptr
087a4     01 28 06 F1 | 	add	local06, #1
087a8     F2 28 62 FC | 	wrlong	local06, objptr
087ac     56 00 00 FF 
087b0     A8 E5 85 F1 | 	sub	objptr, ##44456
087b4     F0 00 B0 FD | 	call	#_addsub
087b8     13 23 02 F6 | 	mov	local03, local05
087bc     0F 29 02 F6 | 	mov	local06, local01
087c0     10 2B 02 F6 | 	mov	local07, local02
087c4     11 27 02 F6 | 	mov	local05, local03
087c8     69 00 00 FF 
087cc     E0 E5 05 F1 | 	add	objptr, ##54240
087d0     F2 24 02 FB | 	rdlong	local04, objptr
087d4     12 FB 01 F6 | 	mov	result1, local04
087d8     01 FA 65 F0 | 	shl	result1, #1
087dc     12 FB 01 F1 | 	add	result1, local04
087e0     02 FA 65 F0 | 	shl	result1, #2
087e4     03 00 00 FF 
087e8     00 E4 85 F1 | 	sub	objptr, ##1536
087ec     F2 FA 01 F1 | 	add	result1, objptr
087f0     FD 28 62 FC | 	wrlong	local06, result1
087f4     03 00 00 FF 
087f8     00 E4 05 F1 | 	add	objptr, ##1536
087fc     F2 28 02 FB | 	rdlong	local06, objptr
08800     14 25 02 F6 | 	mov	local04, local06
08804     01 24 66 F0 | 	shl	local04, #1
08808     14 25 02 F1 | 	add	local04, local06
0880c     02 24 66 F0 | 	shl	local04, #2
08810     03 00 00 FF 
08814     00 E4 85 F1 | 	sub	objptr, ##1536
08818     F2 24 02 F1 | 	add	local04, objptr
0881c     04 24 06 F1 | 	add	local04, #4
08820     12 2B 62 FC | 	wrlong	local07, local04
08824     03 00 00 FF 
08828     00 E4 05 F1 | 	add	objptr, ##1536
0882c     F2 2A 02 FB | 	rdlong	local07, objptr
08830     15 29 02 F6 | 	mov	local06, local07
08834     01 28 66 F0 | 	shl	local06, #1
08838     15 29 02 F1 | 	add	local06, local07
0883c     02 28 66 F0 | 	shl	local06, #2
08840     03 00 00 FF 
08844     00 E4 85 F1 | 	sub	objptr, ##1536
08848     F2 28 02 F1 | 	add	local06, objptr
0884c     08 28 06 F1 | 	add	local06, #8
08850     14 27 62 FC | 	wrlong	local05, local06
08854     03 00 00 FF 
08858     00 E4 05 F1 | 	add	objptr, ##1536
0885c     F2 28 02 FB | 	rdlong	local06, objptr
08860     01 28 06 F1 | 	add	local06, #1
08864     F2 28 62 FC | 	wrlong	local06, objptr
08868     13 00 00 FF 
0886c     38 E4 85 F1 | 	sub	objptr, ##9784
08870     F2 24 02 FB | 	rdlong	local04, objptr
08874     03 24 66 F0 | 	shl	local04, #3
08878     02 00 00 FF 
0887c     38 E4 85 F1 | 	sub	objptr, ##1080
08880     F2 24 02 F1 | 	add	local04, objptr
08884     04 24 06 F1 | 	add	local04, #4
08888     12 27 02 FB | 	rdlong	local05, local04
0888c     54 00 00 FF 
08890     70 E5 85 F1 | 	sub	objptr, ##43376
08894     E4 FE 9F FD | 	jmp	#LR__0691
08898                 | LR__0692
08898                 | ' return 0  
08898     00 FA 05 F6 | 	mov	result1, #0
0889c                 | LR__0693
0889c     A7 F0 03 F6 | 	mov	ptra, fp
088a0     B2 00 A0 FD | 	call	#popregs_
088a4                 | _expr_ret
088a4     2D 00 64 FD | 	ret
088a8                 | 
088a8                 | ' 
088a8                 | ' 
088a8                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
088a8                 | ' 
088a8                 | ' function addsub() as integer 
088a8                 | _addsub
088a8     07 4A 05 F6 | 	mov	COUNT_, #7
088ac     A8 00 A0 FD | 	call	#pushregs_
088b0                 | _addsub_enter
088b0     00 1E 06 F6 | 	mov	local01, #0
088b4     50 01 B0 FD | 	call	#_muldiv
088b8     56 00 00 FF 
088bc     A8 E5 05 F1 | 	add	objptr, ##44456
088c0     F2 24 02 FB | 	rdlong	local04, objptr
088c4     03 24 66 F0 | 	shl	local04, #3
088c8     02 00 00 FF 
088cc     38 E4 85 F1 | 	sub	objptr, ##1080
088d0     F2 24 02 F1 | 	add	local04, objptr
088d4     04 24 06 F1 | 	add	local04, #4
088d8     12 27 02 FB | 	rdlong	local05, local04
088dc                 | ' t3.result.uresult=0
088dc                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
088dc                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
088dc                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
088dc     54 00 00 FF 
088e0     70 E5 85 F1 | 	sub	objptr, ##43376
088e4                 | LR__0700
088e4     01 26 0E F2 | 	cmp	local05, #1 wz
088e8     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
088ec     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
088f0     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
088f4     00 01 90 5D |  if_ne	jmp	#LR__0701
088f8     56 00 00 FF 
088fc     A8 E5 05 F1 | 	add	objptr, ##44456
08900     F2 24 02 FB | 	rdlong	local04, objptr
08904     01 24 06 F1 | 	add	local04, #1
08908     F2 24 62 FC | 	wrlong	local04, objptr
0890c     56 00 00 FF 
08910     A8 E5 85 F1 | 	sub	objptr, ##44456
08914     F0 00 B0 FD | 	call	#_muldiv
08918     13 23 02 F6 | 	mov	local03, local05
0891c     0F 29 02 F6 | 	mov	local06, local01
08920     10 2B 02 F6 | 	mov	local07, local02
08924     11 27 02 F6 | 	mov	local05, local03
08928     69 00 00 FF 
0892c     E0 E5 05 F1 | 	add	objptr, ##54240
08930     F2 24 02 FB | 	rdlong	local04, objptr
08934     12 FB 01 F6 | 	mov	result1, local04
08938     01 FA 65 F0 | 	shl	result1, #1
0893c     12 FB 01 F1 | 	add	result1, local04
08940     02 FA 65 F0 | 	shl	result1, #2
08944     03 00 00 FF 
08948     00 E4 85 F1 | 	sub	objptr, ##1536
0894c     F2 FA 01 F1 | 	add	result1, objptr
08950     FD 28 62 FC | 	wrlong	local06, result1
08954     03 00 00 FF 
08958     00 E4 05 F1 | 	add	objptr, ##1536
0895c     F2 28 02 FB | 	rdlong	local06, objptr
08960     14 25 02 F6 | 	mov	local04, local06
08964     01 24 66 F0 | 	shl	local04, #1
08968     14 25 02 F1 | 	add	local04, local06
0896c     02 24 66 F0 | 	shl	local04, #2
08970     03 00 00 FF 
08974     00 E4 85 F1 | 	sub	objptr, ##1536
08978     F2 24 02 F1 | 	add	local04, objptr
0897c     04 24 06 F1 | 	add	local04, #4
08980     12 2B 62 FC | 	wrlong	local07, local04
08984     03 00 00 FF 
08988     00 E4 05 F1 | 	add	objptr, ##1536
0898c     F2 2A 02 FB | 	rdlong	local07, objptr
08990     15 29 02 F6 | 	mov	local06, local07
08994     01 28 66 F0 | 	shl	local06, #1
08998     15 29 02 F1 | 	add	local06, local07
0899c     02 28 66 F0 | 	shl	local06, #2
089a0     03 00 00 FF 
089a4     00 E4 85 F1 | 	sub	objptr, ##1536
089a8     F2 28 02 F1 | 	add	local06, objptr
089ac     08 28 06 F1 | 	add	local06, #8
089b0     14 27 62 FC | 	wrlong	local05, local06
089b4     03 00 00 FF 
089b8     00 E4 05 F1 | 	add	objptr, ##1536
089bc     F2 28 02 FB | 	rdlong	local06, objptr
089c0     01 28 06 F1 | 	add	local06, #1
089c4     F2 28 62 FC | 	wrlong	local06, objptr
089c8     13 00 00 FF 
089cc     38 E4 85 F1 | 	sub	objptr, ##9784
089d0     F2 24 02 FB | 	rdlong	local04, objptr
089d4     03 24 66 F0 | 	shl	local04, #3
089d8     02 00 00 FF 
089dc     38 E4 85 F1 | 	sub	objptr, ##1080
089e0     F2 24 02 F1 | 	add	local04, objptr
089e4     04 24 06 F1 | 	add	local04, #4
089e8     12 27 02 FB | 	rdlong	local05, local04
089ec     54 00 00 FF 
089f0     70 E5 85 F1 | 	sub	objptr, ##43376
089f4     EC FE 9F FD | 	jmp	#LR__0700
089f8                 | LR__0701
089f8                 | '   return 0
089f8     00 FA 05 F6 | 	mov	result1, #0
089fc     A7 F0 03 F6 | 	mov	ptra, fp
08a00     B2 00 A0 FD | 	call	#popregs_
08a04                 | _addsub_ret
08a04     2D 00 64 FD | 	ret
08a08                 | 
08a08                 | ' 
08a08                 | ' sub muldiv()
08a08                 | _muldiv
08a08     08 4A 05 F6 | 	mov	COUNT_, #8
08a0c     A8 00 A0 FD | 	call	#pushregs_
08a10                 | _muldiv_enter
08a10     00 1E 06 F6 | 	mov	local01, #0
08a14     58 01 B0 FD | 	call	#_getvalue
08a18     56 00 00 FF 
08a1c     A8 E5 05 F1 | 	add	objptr, ##44456
08a20     F2 24 02 FB | 	rdlong	local04, objptr
08a24     03 24 66 F0 | 	shl	local04, #3
08a28     02 00 00 FF 
08a2c     38 E4 85 F1 | 	sub	objptr, ##1080
08a30     F2 24 02 F1 | 	add	local04, objptr
08a34     04 24 06 F1 | 	add	local04, #4
08a38     12 27 02 FB | 	rdlong	local05, local04
08a3c                 | ' t3.result.uresult=0
08a3c                 | ' getvalue()    
08a3c                 | ' op = lparts(ct).token
08a3c                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
08a3c     54 00 00 FF 
08a40     70 E5 85 F1 | 	sub	objptr, ##43376
08a44                 | LR__0710
08a44     05 26 0E F2 | 	cmp	local05, #5 wz
08a48     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
08a4c     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
08a50     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
08a54     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
08a58     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
08a5c     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
08a60     00 01 90 5D |  if_ne	jmp	#LR__0711
08a64     56 00 00 FF 
08a68     A8 E5 05 F1 | 	add	objptr, ##44456
08a6c     F2 24 02 FB | 	rdlong	local04, objptr
08a70     01 24 06 F1 | 	add	local04, #1
08a74     F2 24 62 FC | 	wrlong	local04, objptr
08a78     56 00 00 FF 
08a7c     A8 E5 85 F1 | 	sub	objptr, ##44456
08a80     EC 00 B0 FD | 	call	#_getvalue
08a84     13 23 02 F6 | 	mov	local03, local05
08a88     0F 29 02 F6 | 	mov	local06, local01
08a8c     10 2B 02 F6 | 	mov	local07, local02
08a90     11 27 02 F6 | 	mov	local05, local03
08a94     69 00 00 FF 
08a98     E0 E5 05 F1 | 	add	objptr, ##54240
08a9c     F2 24 02 FB | 	rdlong	local04, objptr
08aa0     12 2D 02 F6 | 	mov	local08, local04
08aa4     01 2C 66 F0 | 	shl	local08, #1
08aa8     12 2D 02 F1 | 	add	local08, local04
08aac     02 2C 66 F0 | 	shl	local08, #2
08ab0     03 00 00 FF 
08ab4     00 E4 85 F1 | 	sub	objptr, ##1536
08ab8     F2 2C 02 F1 | 	add	local08, objptr
08abc     16 29 62 FC | 	wrlong	local06, local08
08ac0     03 00 00 FF 
08ac4     00 E4 05 F1 | 	add	objptr, ##1536
08ac8     F2 2C 02 FB | 	rdlong	local08, objptr
08acc     16 29 02 F6 | 	mov	local06, local08
08ad0     01 28 66 F0 | 	shl	local06, #1
08ad4     16 29 02 F1 | 	add	local06, local08
08ad8     02 28 66 F0 | 	shl	local06, #2
08adc     03 00 00 FF 
08ae0     00 E4 85 F1 | 	sub	objptr, ##1536
08ae4     F2 28 02 F1 | 	add	local06, objptr
08ae8     04 28 06 F1 | 	add	local06, #4
08aec     14 2B 62 FC | 	wrlong	local07, local06
08af0     03 00 00 FF 
08af4     00 E4 05 F1 | 	add	objptr, ##1536
08af8     F2 2C 02 FB | 	rdlong	local08, objptr
08afc     16 2B 02 F6 | 	mov	local07, local08
08b00     01 2A 66 F0 | 	shl	local07, #1
08b04     16 2B 02 F1 | 	add	local07, local08
08b08     02 2A 66 F0 | 	shl	local07, #2
08b0c     03 00 00 FF 
08b10     00 E4 85 F1 | 	sub	objptr, ##1536
08b14     F2 2A 02 F1 | 	add	local07, objptr
08b18     08 2A 06 F1 | 	add	local07, #8
08b1c     15 27 62 FC | 	wrlong	local05, local07
08b20     03 00 00 FF 
08b24     00 E4 05 F1 | 	add	objptr, ##1536
08b28     F2 28 02 FB | 	rdlong	local06, objptr
08b2c     01 28 06 F1 | 	add	local06, #1
08b30     F2 28 62 FC | 	wrlong	local06, objptr
08b34     13 00 00 FF 
08b38     38 E4 85 F1 | 	sub	objptr, ##9784
08b3c     F2 24 02 FB | 	rdlong	local04, objptr
08b40     03 24 66 F0 | 	shl	local04, #3
08b44     02 00 00 FF 
08b48     38 E4 85 F1 | 	sub	objptr, ##1080
08b4c     F2 24 02 F1 | 	add	local04, objptr
08b50     04 24 06 F1 | 	add	local04, #4
08b54     12 27 02 FB | 	rdlong	local05, local04
08b58     54 00 00 FF 
08b5c     70 E5 85 F1 | 	sub	objptr, ##43376
08b60     E0 FE 9F FD | 	jmp	#LR__0710
08b64                 | LR__0711
08b64     A7 F0 03 F6 | 	mov	ptra, fp
08b68     B2 00 A0 FD | 	call	#popregs_
08b6c                 | _muldiv_ret
08b6c     2D 00 64 FD | 	ret
08b70                 | 
08b70                 | ' 
08b70                 | ' sub getvalue() 
08b70                 | _getvalue
08b70     0B 4A 05 F6 | 	mov	COUNT_, #11
08b74     A8 00 A0 FD | 	call	#pushregs_
08b78                 | _getvalue_enter
08b78     01 24 06 F6 | 	mov	local04, #1
08b7c     00 1E 06 F6 | 	mov	local01, #0
08b80     1D 22 06 F6 | 	mov	local03, #29
08b84     56 00 00 FF 
08b88     A8 E5 05 F1 | 	add	objptr, ##44456
08b8c     F2 16 02 FB | 	rdlong	arg03, objptr
08b90     03 16 66 F0 | 	shl	arg03, #3
08b94     02 00 00 FF 
08b98     38 E4 85 F1 | 	sub	objptr, ##1080
08b9c     F2 16 02 F1 | 	add	arg03, objptr
08ba0     04 16 06 F1 | 	add	arg03, #4
08ba4     0B 27 02 FB | 	rdlong	local05, arg03
08ba8                 | ' m=1
08ba8                 | ' t1.result.uresult=0: t1.result_type=result_uint
08ba8                 | ' op=lparts(ct).token
08ba8                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
08ba8     02 26 0E F2 | 	cmp	local05, #2 wz
08bac     54 00 00 FF 
08bb0     70 E5 85 F1 | 	sub	objptr, ##43376
08bb4     38 00 90 5D |  if_ne	jmp	#LR__0720
08bb8     01 24 66 F6 | 	neg	local04, #1
08bbc     56 00 00 FF 
08bc0     A8 E5 05 F1 | 	add	objptr, ##44456
08bc4     F2 26 02 FB | 	rdlong	local05, objptr
08bc8     01 26 06 F1 | 	add	local05, #1
08bcc     F2 26 62 FC | 	wrlong	local05, objptr
08bd0     03 26 66 F0 | 	shl	local05, #3
08bd4     02 00 00 FF 
08bd8     38 E4 85 F1 | 	sub	objptr, ##1080
08bdc     F2 26 02 F1 | 	add	local05, objptr
08be0     04 26 06 F1 | 	add	local05, #4
08be4     13 27 02 FB | 	rdlong	local05, local05
08be8     54 00 00 FF 
08bec     70 E5 85 F1 | 	sub	objptr, ##43376
08bf0                 | LR__0720
08bf0                 | ' select case op
08bf0     01 00 00 FF 
08bf4     00 26 0E F2 | 	cmp	local05, ##512 wz
08bf8     3C 00 90 AD |  if_e	jmp	#LR__0721
08bfc     01 00 00 FF 
08c00     01 26 0E F2 | 	cmp	local05, ##513 wz
08c04     88 01 90 AD |  if_e	jmp	#LR__0724
08c08     01 00 00 FF 
08c0c     02 26 0E F2 | 	cmp	local05, ##514 wz
08c10     84 02 90 AD |  if_e	jmp	#LR__0725
08c14     01 00 00 FF 
08c18     03 26 0E F2 | 	cmp	local05, ##515 wz
08c1c     E8 03 90 AD |  if_e	jmp	#LR__0728
08c20     01 00 00 FF 
08c24     04 26 0E F2 | 	cmp	local05, ##516 wz
08c28     E0 05 90 AD |  if_e	jmp	#LR__0733
08c2c     15 26 0E F2 | 	cmp	local05, #21 wz
08c30     00 06 90 AD |  if_e	jmp	#LR__0734
08c34     70 06 90 FD | 	jmp	#LR__0735
08c38                 | LR__0721
08c38                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
08c38     01 24 0E F2 | 	cmp	local04, #1 wz
08c3c     3C 00 90 5D |  if_ne	jmp	#LR__0722
08c40     56 00 00 FF 
08c44     A8 E5 05 F1 | 	add	objptr, ##44456
08c48     F2 26 02 FB | 	rdlong	local05, objptr
08c4c     03 26 66 F0 | 	shl	local05, #3
08c50     02 00 00 FF 
08c54     38 E4 85 F1 | 	sub	objptr, ##1080
08c58     F2 26 02 F1 | 	add	local05, objptr
08c5c     13 13 02 FB | 	rdlong	arg01, local05
08c60     00 14 06 F6 | 	mov	arg02, #0
08c64     54 00 00 FF 
08c68     70 E5 85 F1 | 	sub	objptr, ##43376
08c6c     94 51 B1 FD | 	call	#__system____builtin_atoi
08c70     FD 24 02 FD | 	qmul	local04, result1
08c74     18 1E 62 FD | 	getqx	local01
08c78     1C 22 06 F6 | 	mov	local03, #28
08c7c                 | LR__0722
08c7c                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
08c7c     FF FF 7F FF 
08c80     FF 25 0E F2 | 	cmp	local04, ##-1 wz
08c84     3C 00 90 5D |  if_ne	jmp	#LR__0723
08c88     56 00 00 FF 
08c8c     A8 E5 05 F1 | 	add	objptr, ##44456
08c90     F2 26 02 FB | 	rdlong	local05, objptr
08c94     03 26 66 F0 | 	shl	local05, #3
08c98     02 00 00 FF 
08c9c     38 E4 85 F1 | 	sub	objptr, ##1080
08ca0     F2 26 02 F1 | 	add	local05, objptr
08ca4     13 13 02 FB | 	rdlong	arg01, local05
08ca8     00 14 06 F6 | 	mov	arg02, #0
08cac     54 00 00 FF 
08cb0     70 E5 85 F1 | 	sub	objptr, ##43376
08cb4     4C 51 B1 FD | 	call	#__system____builtin_atoi
08cb8     FD 24 02 FD | 	qmul	local04, result1
08cbc     18 1E 62 FD | 	getqx	local01
08cc0     1C 22 06 F6 | 	mov	local03, #28
08cc4                 | LR__0723
08cc4     0F 29 02 F6 | 	mov	local06, local01
08cc8     10 2B 02 F6 | 	mov	local07, local02
08ccc     11 27 02 F6 | 	mov	local05, local03
08cd0     69 00 00 FF 
08cd4     E0 E5 05 F1 | 	add	objptr, ##54240
08cd8     F2 1E 02 FB | 	rdlong	local01, objptr
08cdc     0F 25 02 F6 | 	mov	local04, local01
08ce0     01 24 66 F0 | 	shl	local04, #1
08ce4     0F 25 02 F1 | 	add	local04, local01
08ce8     02 24 66 F0 | 	shl	local04, #2
08cec     03 00 00 FF 
08cf0     00 E4 85 F1 | 	sub	objptr, ##1536
08cf4     F2 24 02 F1 | 	add	local04, objptr
08cf8     12 29 62 FC | 	wrlong	local06, local04
08cfc     03 00 00 FF 
08d00     00 E4 05 F1 | 	add	objptr, ##1536
08d04     F2 28 02 FB | 	rdlong	local06, objptr
08d08     14 1F 02 F6 | 	mov	local01, local06
08d0c     01 1E 66 F0 | 	shl	local01, #1
08d10     14 1F 02 F1 | 	add	local01, local06
08d14     02 1E 66 F0 | 	shl	local01, #2
08d18     03 00 00 FF 
08d1c     00 E4 85 F1 | 	sub	objptr, ##1536
08d20     F2 1E 02 F1 | 	add	local01, objptr
08d24     04 1E 06 F1 | 	add	local01, #4
08d28     0F 2B 62 FC | 	wrlong	local07, local01
08d2c     03 00 00 FF 
08d30     00 E4 05 F1 | 	add	objptr, ##1536
08d34     F2 2A 02 FB | 	rdlong	local07, objptr
08d38     15 29 02 F6 | 	mov	local06, local07
08d3c     01 28 66 F0 | 	shl	local06, #1
08d40     15 29 02 F1 | 	add	local06, local07
08d44     02 28 66 F0 | 	shl	local06, #2
08d48     03 00 00 FF 
08d4c     00 E4 85 F1 | 	sub	objptr, ##1536
08d50     F2 28 02 F1 | 	add	local06, objptr
08d54     08 28 06 F1 | 	add	local06, #8
08d58     14 27 62 FC | 	wrlong	local05, local06
08d5c     03 00 00 FF 
08d60     00 E4 05 F1 | 	add	objptr, ##1536
08d64     F2 28 02 FB | 	rdlong	local06, objptr
08d68     01 28 06 F1 | 	add	local06, #1
08d6c     F2 28 62 FC | 	wrlong	local06, objptr
08d70     13 00 00 FF 
08d74     38 E4 85 F1 | 	sub	objptr, ##9784
08d78     F2 28 02 FB | 	rdlong	local06, objptr
08d7c     01 28 06 F1 | 	add	local06, #1
08d80     F2 28 62 FC | 	wrlong	local06, objptr
08d84     56 00 00 FF 
08d88     A8 E5 85 F1 | 	sub	objptr, ##44456
08d8c     3C 05 90 FD | 	jmp	#LR__0736
08d90                 | LR__0724
08d90     56 00 00 FF 
08d94     A8 E5 05 F1 | 	add	objptr, ##44456
08d98     F2 28 02 FB | 	rdlong	local06, objptr
08d9c     03 28 66 F0 | 	shl	local06, #3
08da0     02 00 00 FF 
08da4     38 E4 85 F1 | 	sub	objptr, ##1080
08da8     F2 28 02 F1 | 	add	local06, objptr
08dac     14 13 02 FB | 	rdlong	arg01, local06
08db0     00 14 06 F6 | 	mov	arg02, #0
08db4     54 00 00 FF 
08db8     70 E5 85 F1 | 	sub	objptr, ##43376
08dbc     44 50 B1 FD | 	call	#__system____builtin_atoi
08dc0     FD 24 02 FD | 	qmul	local04, result1
08dc4     69 00 00 FF 
08dc8     E0 E5 05 F1 | 	add	objptr, ##54240
08dcc     F2 28 02 FB | 	rdlong	local06, objptr
08dd0     14 2D 02 F6 | 	mov	local08, local06
08dd4     01 2C 66 F0 | 	shl	local08, #1
08dd8     14 2D 02 F1 | 	add	local08, local06
08ddc     02 2C 66 F0 | 	shl	local08, #2
08de0     03 00 00 FF 
08de4     00 E4 85 F1 | 	sub	objptr, ##1536
08de8     F2 2C 02 F1 | 	add	local08, objptr
08dec     03 00 00 FF 
08df0     00 E4 05 F1 | 	add	objptr, ##1536
08df4     18 1E 62 FD | 	getqx	local01
08df8     1C 22 06 F6 | 	mov	local03, #28
08dfc     0F 29 02 F6 | 	mov	local06, local01
08e00     10 2B 02 F6 | 	mov	local07, local02
08e04     16 29 62 FC | 	wrlong	local06, local08
08e08     11 2D 02 F6 | 	mov	local08, local03
08e0c     F2 28 02 FB | 	rdlong	local06, objptr
08e10     14 27 02 F6 | 	mov	local05, local06
08e14     01 26 66 F0 | 	shl	local05, #1
08e18     14 27 02 F1 | 	add	local05, local06
08e1c     02 26 66 F0 | 	shl	local05, #2
08e20     03 00 00 FF 
08e24     00 E4 85 F1 | 	sub	objptr, ##1536
08e28     F2 26 02 F1 | 	add	local05, objptr
08e2c     04 26 06 F1 | 	add	local05, #4
08e30     13 2B 62 FC | 	wrlong	local07, local05
08e34     03 00 00 FF 
08e38     00 E4 05 F1 | 	add	objptr, ##1536
08e3c     F2 2A 02 FB | 	rdlong	local07, objptr
08e40     15 29 02 F6 | 	mov	local06, local07
08e44     01 28 66 F0 | 	shl	local06, #1
08e48     15 29 02 F1 | 	add	local06, local07
08e4c     02 28 66 F0 | 	shl	local06, #2
08e50     03 00 00 FF 
08e54     00 E4 85 F1 | 	sub	objptr, ##1536
08e58     F2 28 02 F1 | 	add	local06, objptr
08e5c     08 28 06 F1 | 	add	local06, #8
08e60     14 2D 62 FC | 	wrlong	local08, local06
08e64     03 00 00 FF 
08e68     00 E4 05 F1 | 	add	objptr, ##1536
08e6c     F2 28 02 FB | 	rdlong	local06, objptr
08e70     01 28 06 F1 | 	add	local06, #1
08e74     F2 28 62 FC | 	wrlong	local06, objptr
08e78     13 00 00 FF 
08e7c     38 E4 85 F1 | 	sub	objptr, ##9784
08e80     F2 28 02 FB | 	rdlong	local06, objptr
08e84     01 28 06 F1 | 	add	local06, #1
08e88     F2 28 62 FC | 	wrlong	local06, objptr
08e8c     56 00 00 FF 
08e90     A8 E5 85 F1 | 	sub	objptr, ##44456
08e94     34 04 90 FD | 	jmp	#LR__0736
08e98                 | LR__0725
08e98                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
08e98     01 24 0E F2 | 	cmp	local04, #1 wz
08e9c     48 00 90 5D |  if_ne	jmp	#LR__0726
08ea0     00 C0 1F FF 
08ea4     00 28 06 F6 | 	mov	local06, ##1065353216
08ea8     56 00 00 FF 
08eac     A8 E5 05 F1 | 	add	objptr, ##44456
08eb0     F2 2C 02 FB | 	rdlong	local08, objptr
08eb4     03 2C 66 F0 | 	shl	local08, #3
08eb8     02 00 00 FF 
08ebc     38 E4 85 F1 | 	sub	objptr, ##1080
08ec0     F2 2C 02 F1 | 	add	local08, objptr
08ec4     16 13 02 FB | 	rdlong	arg01, local08
08ec8     54 00 00 FF 
08ecc     70 E5 85 F1 | 	sub	objptr, ##43376
08ed0     A0 50 B1 FD | 	call	#__system____builtin_atof
08ed4     FD 14 02 F6 | 	mov	arg02, result1
08ed8     14 13 02 F6 | 	mov	arg01, local06
08edc     AC 48 B1 FD | 	call	#__system___float_mul
08ee0     FD 1E 02 F6 | 	mov	local01, result1
08ee4     1E 22 06 F6 | 	mov	local03, #30
08ee8                 | LR__0726
08ee8                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
08ee8     FF FF 7F FF 
08eec     FF 25 0E F2 | 	cmp	local04, ##-1 wz
08ef0     48 00 90 5D |  if_ne	jmp	#LR__0727
08ef4     00 C0 5F FF 
08ef8     00 28 06 F6 | 	mov	local06, ##-1082130432
08efc     56 00 00 FF 
08f00     A8 E5 05 F1 | 	add	objptr, ##44456
08f04     F2 2C 02 FB | 	rdlong	local08, objptr
08f08     03 2C 66 F0 | 	shl	local08, #3
08f0c     02 00 00 FF 
08f10     38 E4 85 F1 | 	sub	objptr, ##1080
08f14     F2 2C 02 F1 | 	add	local08, objptr
08f18     16 13 02 FB | 	rdlong	arg01, local08
08f1c     54 00 00 FF 
08f20     70 E5 85 F1 | 	sub	objptr, ##43376
08f24     4C 50 B1 FD | 	call	#__system____builtin_atof
08f28     FD 14 02 F6 | 	mov	arg02, result1
08f2c     14 13 02 F6 | 	mov	arg01, local06
08f30     58 48 B1 FD | 	call	#__system___float_mul
08f34     FD 1E 02 F6 | 	mov	local01, result1
08f38     1E 22 06 F6 | 	mov	local03, #30
08f3c                 | LR__0727
08f3c     0F 29 02 F6 | 	mov	local06, local01
08f40     10 2B 02 F6 | 	mov	local07, local02
08f44     11 27 02 F6 | 	mov	local05, local03
08f48     69 00 00 FF 
08f4c     E0 E5 05 F1 | 	add	objptr, ##54240
08f50     F2 1E 02 FB | 	rdlong	local01, objptr
08f54     0F 2D 02 F6 | 	mov	local08, local01
08f58     01 2C 66 F0 | 	shl	local08, #1
08f5c     0F 2D 02 F1 | 	add	local08, local01
08f60     02 2C 66 F0 | 	shl	local08, #2
08f64     03 00 00 FF 
08f68     00 E4 85 F1 | 	sub	objptr, ##1536
08f6c     F2 2C 02 F1 | 	add	local08, objptr
08f70     16 29 62 FC | 	wrlong	local06, local08
08f74     03 00 00 FF 
08f78     00 E4 05 F1 | 	add	objptr, ##1536
08f7c     F2 2C 02 FB | 	rdlong	local08, objptr
08f80     16 29 02 F6 | 	mov	local06, local08
08f84     01 28 66 F0 | 	shl	local06, #1
08f88     16 29 02 F1 | 	add	local06, local08
08f8c     02 28 66 F0 | 	shl	local06, #2
08f90     03 00 00 FF 
08f94     00 E4 85 F1 | 	sub	objptr, ##1536
08f98     F2 28 02 F1 | 	add	local06, objptr
08f9c     04 28 06 F1 | 	add	local06, #4
08fa0     14 2B 62 FC | 	wrlong	local07, local06
08fa4     03 00 00 FF 
08fa8     00 E4 05 F1 | 	add	objptr, ##1536
08fac     F2 2C 02 FB | 	rdlong	local08, objptr
08fb0     16 2B 02 F6 | 	mov	local07, local08
08fb4     01 2A 66 F0 | 	shl	local07, #1
08fb8     16 2B 02 F1 | 	add	local07, local08
08fbc     02 2A 66 F0 | 	shl	local07, #2
08fc0     03 00 00 FF 
08fc4     00 E4 85 F1 | 	sub	objptr, ##1536
08fc8     F2 2A 02 F1 | 	add	local07, objptr
08fcc     08 2A 06 F1 | 	add	local07, #8
08fd0     15 27 62 FC | 	wrlong	local05, local07
08fd4     03 00 00 FF 
08fd8     00 E4 05 F1 | 	add	objptr, ##1536
08fdc     F2 28 02 FB | 	rdlong	local06, objptr
08fe0     01 28 06 F1 | 	add	local06, #1
08fe4     F2 28 62 FC | 	wrlong	local06, objptr
08fe8     13 00 00 FF 
08fec     38 E4 85 F1 | 	sub	objptr, ##9784
08ff0     F2 28 02 FB | 	rdlong	local06, objptr
08ff4     01 28 06 F1 | 	add	local06, #1
08ff8     F2 28 62 FC | 	wrlong	local06, objptr
08ffc     56 00 00 FF 
09000     A8 E5 85 F1 | 	sub	objptr, ##44456
09004     C4 02 90 FD | 	jmp	#LR__0736
09008                 | LR__0728
09008     1F 22 06 F6 | 	mov	local03, #31
0900c     56 00 00 FF 
09010     A8 E5 05 F1 | 	add	objptr, ##44456
09014     F2 16 02 FB | 	rdlong	arg03, objptr
09018     03 16 66 F0 | 	shl	arg03, #3
0901c     02 00 00 FF 
09020     38 E4 85 F1 | 	sub	objptr, ##1080
09024     F2 16 02 F1 | 	add	arg03, objptr
09028     0B 13 02 FB | 	rdlong	arg01, arg03
0902c     54 00 00 FF 
09030     70 E5 85 F1 | 	sub	objptr, ##43376
09034     09 2F 02 F6 | 	mov	local09, arg01
09038     97 06 48 FB | 	callpa	#(@LR__0730-@LR__0729)>>2,fcache_load_ptr_
0903c                 | LR__0729
0903c     17 FB C9 FA | 	rdbyte	result1, local09 wz
09040     01 2E 06 51 |  if_ne	add	local09, #1
09044     F4 FF 9F 5D |  if_ne	jmp	#LR__0729
09048                 | LR__0730
09048     09 2F 82 F1 | 	sub	local09, arg01
0904c     17 FB 01 F6 | 	mov	result1, local09
09050     7B 00 00 FF 
09054     28 E4 05 F1 | 	add	objptr, ##63016
09058     F2 FA 61 FC | 	wrlong	result1, objptr
0905c     4C E4 85 F1 | 	sub	objptr, #76
09060     F2 12 02 FB | 	rdlong	arg01, objptr
09064     FD 12 82 F1 | 	sub	arg01, result1
09068     04 12 86 F1 | 	sub	arg01, #4
0906c     03 12 26 F5 | 	andn	arg01, #3
09070     F2 12 62 FC | 	wrlong	arg01, objptr
09074     4C E4 05 F1 | 	add	objptr, #76
09078     F2 14 02 FB | 	rdlong	arg02, objptr
0907c     01 16 06 F6 | 	mov	arg03, #1
09080     00 18 06 F6 | 	mov	arg04, #0
09084     6F 00 00 FF 
09088     68 E5 85 F1 | 	sub	objptr, ##57192
0908c                 | '     return fill(addr, pattern, count, listPtr, 4)
0908c     04 1A 06 F6 | 	mov	arg05, #4
09090     A4 11 B1 FD | 	call	#_psram_spin2_fill
09094                 | '     pslpoke memtop,l
09094                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
09094     01 30 06 F6 | 	mov	local10, #1
09098     6F 00 00 FF 
0909c     68 E5 05 F1 | 	add	objptr, ##57192
090a0     F2 32 02 FB | 	rdlong	local11, objptr
090a4     7B 00 00 FF 
090a8     28 E4 85 F1 | 	sub	objptr, ##63016
090ac     01 32 06 F1 | 	add	local11, #1
090b0                 | LR__0731
090b0     19 31 52 F2 | 	cmps	local10, local11 wc
090b4     78 00 90 3D |  if_ae	jmp	#LR__0732
090b8     7A 00 00 FF 
090bc     DC E5 05 F1 | 	add	objptr, ##62940
090c0     F2 2A 02 FB | 	rdlong	local07, objptr
090c4     03 2A 06 F1 | 	add	local07, #3
090c8     18 2B 02 F1 | 	add	local07, local10
090cc     24 00 00 FF 
090d0     34 E4 85 F1 | 	sub	objptr, ##18484
090d4     F2 2C 02 FB | 	rdlong	local08, objptr
090d8     03 2C 66 F0 | 	shl	local08, #3
090dc     02 00 00 FF 
090e0     38 E4 85 F1 | 	sub	objptr, ##1080
090e4     F2 2C 02 F1 | 	add	local08, objptr
090e8     16 13 02 FB | 	rdlong	arg01, local08
090ec     18 15 02 F6 | 	mov	arg02, local10
090f0     01 16 06 F6 | 	mov	arg03, #1
090f4     54 00 00 FF 
090f8     70 E5 85 F1 | 	sub	objptr, ##43376
090fc     C8 3C B1 FD | 	call	#__system__Mid_S
09100     FD 14 C2 FA | 	rdbyte	arg02, result1
09104     15 13 02 F6 | 	mov	arg01, local07
09108     01 16 06 F6 | 	mov	arg03, #1
0910c     00 18 06 F6 | 	mov	arg04, #0
09110     0B 00 00 FF 
09114     C0 E4 05 F1 | 	add	objptr, ##5824
09118                 | '     return fill(addr, pattern, count, listPtr, 1)
09118     01 1A 06 F6 | 	mov	arg05, #1
0911c     18 11 B1 FD | 	call	#_psram_spin2_fill
09120     0B 00 00 FF 
09124     C0 E4 85 F1 | 	sub	objptr, ##5824
09128     01 30 06 F1 | 	add	local10, #1
0912c     80 FF 9F FD | 	jmp	#LR__0731
09130                 | LR__0732
09130     7A 00 00 FF 
09134     DC E5 05 F1 | 	add	objptr, ##62940
09138     F2 1E 02 FB | 	rdlong	local01, objptr
0913c     2B 22 06 F6 | 	mov	local03, #43
09140     0F 29 02 F6 | 	mov	local06, local01
09144     10 2B 02 F6 | 	mov	local07, local02
09148     11 33 02 F6 | 	mov	local11, local03
0914c     10 00 00 FF 
09150     FC E5 85 F1 | 	sub	objptr, ##8700
09154     F2 30 02 FB | 	rdlong	local10, objptr
09158     18 2D 02 F6 | 	mov	local08, local10
0915c     01 2C 66 F0 | 	shl	local08, #1
09160     18 2D 02 F1 | 	add	local08, local10
09164     02 2C 66 F0 | 	shl	local08, #2
09168     03 00 00 FF 
0916c     00 E4 85 F1 | 	sub	objptr, ##1536
09170     F2 2C 02 F1 | 	add	local08, objptr
09174     16 29 62 FC | 	wrlong	local06, local08
09178     03 00 00 FF 
0917c     00 E4 05 F1 | 	add	objptr, ##1536
09180     F2 30 02 FB | 	rdlong	local10, objptr
09184     18 2D 02 F6 | 	mov	local08, local10
09188     01 2C 66 F0 | 	shl	local08, #1
0918c     18 2D 02 F1 | 	add	local08, local10
09190     02 2C 66 F0 | 	shl	local08, #2
09194     03 00 00 FF 
09198     00 E4 85 F1 | 	sub	objptr, ##1536
0919c     F2 2C 02 F1 | 	add	local08, objptr
091a0     04 2C 06 F1 | 	add	local08, #4
091a4     16 2B 62 FC | 	wrlong	local07, local08
091a8     03 00 00 FF 
091ac     00 E4 05 F1 | 	add	objptr, ##1536
091b0     F2 30 02 FB | 	rdlong	local10, objptr
091b4     18 2D 02 F6 | 	mov	local08, local10
091b8     01 2C 66 F0 | 	shl	local08, #1
091bc     18 2D 02 F1 | 	add	local08, local10
091c0     02 2C 66 F0 | 	shl	local08, #2
091c4     03 00 00 FF 
091c8     00 E4 85 F1 | 	sub	objptr, ##1536
091cc     F2 2C 02 F1 | 	add	local08, objptr
091d0     08 2C 06 F1 | 	add	local08, #8
091d4     16 33 62 FC | 	wrlong	local11, local08
091d8     03 00 00 FF 
091dc     00 E4 05 F1 | 	add	objptr, ##1536
091e0     F2 28 02 FB | 	rdlong	local06, objptr
091e4     01 28 06 F1 | 	add	local06, #1
091e8     F2 28 62 FC | 	wrlong	local06, objptr
091ec     13 00 00 FF 
091f0     38 E4 85 F1 | 	sub	objptr, ##9784
091f4     F2 28 02 FB | 	rdlong	local06, objptr
091f8     01 28 06 F1 | 	add	local06, #1
091fc     F2 28 62 FC | 	wrlong	local06, objptr
09200     56 00 00 FF 
09204     A8 E5 85 F1 | 	sub	objptr, ##44456
09208     C0 00 90 FD | 	jmp	#LR__0736
0920c                 | LR__0733
0920c     12 13 02 F6 | 	mov	arg01, local04
09210     B8 03 B0 FD | 	call	#_getvar
09214     56 00 00 FF 
09218     A8 E5 05 F1 | 	add	objptr, ##44456
0921c     F2 28 02 FB | 	rdlong	local06, objptr
09220     01 28 06 F1 | 	add	local06, #1
09224     F2 28 62 FC | 	wrlong	local06, objptr
09228     56 00 00 FF 
0922c     A8 E5 85 F1 | 	sub	objptr, ##44456
09230     98 00 90 FD | 	jmp	#LR__0736
09234                 | LR__0734
09234     56 00 00 FF 
09238     A8 E5 05 F1 | 	add	objptr, ##44456
0923c     F2 28 02 FB | 	rdlong	local06, objptr
09240     01 28 06 F1 | 	add	local06, #1
09244     F2 28 62 FC | 	wrlong	local06, objptr
09248     56 00 00 FF 
0924c     A8 E5 85 F1 | 	sub	objptr, ##44456
09250     F4 F3 BF FD | 	call	#_expr
09254                 | '     ct+=1
09254                 | '     expr() 
09254                 | '     if lparts(ct).token=token_rpar then ct+=1
09254     56 00 00 FF 
09258     A8 E5 05 F1 | 	add	objptr, ##44456
0925c     F2 32 02 FB | 	rdlong	local11, objptr
09260     03 32 66 F0 | 	shl	local11, #3
09264     02 00 00 FF 
09268     38 E4 85 F1 | 	sub	objptr, ##1080
0926c     F2 32 02 F1 | 	add	local11, objptr
09270     04 32 06 F1 | 	add	local11, #4
09274     19 33 02 FB | 	rdlong	local11, local11
09278     14 32 0E F2 | 	cmp	local11, #20 wz
0927c     54 00 00 FF 
09280     70 E5 85 F1 | 	sub	objptr, ##43376
09284     44 00 90 5D |  if_ne	jmp	#LR__0736
09288     56 00 00 FF 
0928c     A8 E5 05 F1 | 	add	objptr, ##44456
09290     F2 28 02 FB | 	rdlong	local06, objptr
09294     01 28 06 F1 | 	add	local06, #1
09298     F2 28 62 FC | 	wrlong	local06, objptr
0929c     56 00 00 FF 
092a0     A8 E5 85 F1 | 	sub	objptr, ##44456
092a4     24 00 90 FD | 	jmp	#LR__0736
092a8                 | LR__0735
092a8     12 13 02 F6 | 	mov	arg01, local04
092ac     28 00 B0 FD | 	call	#_getfun
092b0     56 00 00 FF 
092b4     A8 E5 05 F1 | 	add	objptr, ##44456
092b8     F2 28 02 FB | 	rdlong	local06, objptr
092bc     01 28 06 F1 | 	add	local06, #1
092c0     F2 28 62 FC | 	wrlong	local06, objptr
092c4     56 00 00 FF 
092c8     A8 E5 85 F1 | 	sub	objptr, ##44456
092cc                 | LR__0736
092cc     A7 F0 03 F6 | 	mov	ptra, fp
092d0     B2 00 A0 FD | 	call	#popregs_
092d4                 | _getvalue_ret
092d4     2D 00 64 FD | 	ret
092d8                 | 
092d8                 | ' 
092d8                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
092d8                 | _getfun
092d8     0A 4A 05 F6 | 	mov	COUNT_, #10
092dc     A8 00 A0 FD | 	call	#pushregs_
092e0                 | _getfun_enter
092e0     09 25 02 F6 | 	mov	local04, arg01
092e4     56 00 00 FF 
092e8     A8 E5 05 F1 | 	add	objptr, ##44456
092ec     F2 26 02 FB | 	rdlong	local05, objptr
092f0     13 29 02 F6 | 	mov	local06, local05
092f4     00 2A 06 F6 | 	mov	local07, #0
092f8                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
092f8                 | ' oldct=ct
092f8                 | ' numpar=0
092f8                 | '   
092f8                 | ' if lparts(ct+1).token=token_lpar then
092f8     01 26 06 F1 | 	add	local05, #1
092fc     03 26 66 F0 | 	shl	local05, #3
09300     02 00 00 FF 
09304     38 E4 85 F1 | 	sub	objptr, ##1080
09308     F2 26 02 F1 | 	add	local05, objptr
0930c     04 26 06 F1 | 	add	local05, #4
09310     13 27 02 FB | 	rdlong	local05, local05
09314     15 26 0E F2 | 	cmp	local05, #21 wz
09318     54 00 00 FF 
0931c     70 E5 85 F1 | 	sub	objptr, ##43376
09320     08 01 90 5D |  if_ne	jmp	#LR__0744
09324     56 00 00 FF 
09328     A8 E5 05 F1 | 	add	objptr, ##44456
0932c     F2 2C 02 FB | 	rdlong	local08, objptr
09330     01 2C 06 F1 | 	add	local08, #1
09334     F2 2C 62 FC | 	wrlong	local08, objptr
09338     56 00 00 FF 
0933c     A8 E5 85 F1 | 	sub	objptr, ##44456
09340                 | '   ct+=1 											' omit this lpar, this is for expr list
09340                 | '   do
09340                 | LR__0740
09340     56 00 00 FF 
09344     A8 E5 05 F1 | 	add	objptr, ##44456
09348     F2 26 02 FB | 	rdlong	local05, objptr
0934c     01 26 06 F1 | 	add	local05, #1
09350     F2 26 62 FC | 	wrlong	local05, objptr
09354                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
09354                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
09354     03 26 66 F0 | 	shl	local05, #3
09358     02 00 00 FF 
0935c     38 E4 85 F1 | 	sub	objptr, ##1080
09360     F2 26 02 F1 | 	add	local05, objptr
09364     04 26 06 F1 | 	add	local05, #4
09368     13 2D 02 FB | 	rdlong	local08, local05
0936c     15 2C 0E F2 | 	cmp	local08, #21 wz
09370     54 00 00 FF 
09374     70 E5 85 F1 | 	sub	objptr, ##43376
09378     40 00 90 5D |  if_ne	jmp	#LR__0741
0937c     56 00 00 FF 
09380     A8 E5 05 F1 | 	add	objptr, ##44456
09384     F2 2C 02 FB | 	rdlong	local08, objptr
09388     01 2C 06 F1 | 	add	local08, #1
0938c     F2 2C 62 FC | 	wrlong	local08, objptr
09390     56 00 00 FF 
09394     A8 E5 85 F1 | 	sub	objptr, ##44456
09398     AC F2 BF FD | 	call	#_expr
0939c     56 00 00 FF 
093a0     A8 E5 05 F1 | 	add	objptr, ##44456
093a4     F2 2C 02 FB | 	rdlong	local08, objptr
093a8     01 2C 06 F1 | 	add	local08, #1
093ac     F2 2C 62 FC | 	wrlong	local08, objptr
093b0     56 00 00 FF 
093b4     A8 E5 85 F1 | 	sub	objptr, ##44456
093b8     04 00 90 FD | 	jmp	#LR__0742
093bc                 | LR__0741
093bc     88 F2 BF FD | 	call	#_expr
093c0                 | LR__0742
093c0     01 2A 06 F1 | 	add	local07, #1
093c4     56 00 00 FF 
093c8     A8 E5 05 F1 | 	add	objptr, ##44456
093cc     F2 26 02 FB | 	rdlong	local05, objptr
093d0     03 26 66 F0 | 	shl	local05, #3
093d4     02 00 00 FF 
093d8     38 E4 85 F1 | 	sub	objptr, ##1080
093dc     F2 26 02 F1 | 	add	local05, objptr
093e0     04 26 06 F1 | 	add	local05, #4
093e4     13 2D 02 FB | 	rdlong	local08, local05
093e8     14 2C 0E F2 | 	cmp	local08, #20 wz
093ec     54 00 00 FF 
093f0     70 E5 85 F1 | 	sub	objptr, ##43376
093f4     34 00 90 AD |  if_e	jmp	#LR__0743
093f8     56 00 00 FF 
093fc     A8 E5 05 F1 | 	add	objptr, ##44456
09400     F2 2C 02 FB | 	rdlong	local08, objptr
09404     03 2C 66 F0 | 	shl	local08, #3
09408     02 00 00 FF 
0940c     38 E4 85 F1 | 	sub	objptr, ##1080
09410     F2 2C 02 F1 | 	add	local08, objptr
09414     04 2C 06 F1 | 	add	local08, #4
09418     16 2D 02 FB | 	rdlong	local08, local08
0941c     FE 2D 0E F2 | 	cmp	local08, #510 wz
09420     54 00 00 FF 
09424     70 E5 85 F1 | 	sub	objptr, ##43376
09428     14 FF 9F 5D |  if_ne	jmp	#LR__0740
0942c                 | LR__0743
0942c                 | LR__0744
0942c     15 1F 02 F6 | 	mov	local01, local07
09430     03 28 66 F0 | 	shl	local06, #3
09434     54 00 00 FF 
09438     70 E5 05 F1 | 	add	objptr, ##43376
0943c     F2 28 02 F1 | 	add	local06, objptr
09440     04 28 06 F1 | 	add	local06, #4
09444     14 23 02 FB | 	rdlong	local03, local06
09448     0F 2D 02 F6 | 	mov	local08, local01
0944c     10 2B 02 F6 | 	mov	local07, local02
09450     11 29 02 F6 | 	mov	local06, local03
09454     15 00 00 FF 
09458     70 E4 05 F1 | 	add	objptr, ##10864
0945c     F2 26 02 FB | 	rdlong	local05, objptr
09460     13 13 02 F6 | 	mov	arg01, local05
09464     01 12 66 F0 | 	shl	arg01, #1
09468     13 13 02 F1 | 	add	arg01, local05
0946c     02 12 66 F0 | 	shl	arg01, #2
09470     03 00 00 FF 
09474     00 E4 85 F1 | 	sub	objptr, ##1536
09478     F2 12 02 F1 | 	add	arg01, objptr
0947c     09 2D 62 FC | 	wrlong	local08, arg01
09480     03 00 00 FF 
09484     00 E4 05 F1 | 	add	objptr, ##1536
09488     F2 2C 02 FB | 	rdlong	local08, objptr
0948c     16 2F 02 F6 | 	mov	local09, local08
09490     01 2E 66 F0 | 	shl	local09, #1
09494     16 2F 02 F1 | 	add	local09, local08
09498     02 2E 66 F0 | 	shl	local09, #2
0949c     03 00 00 FF 
094a0     00 E4 85 F1 | 	sub	objptr, ##1536
094a4     F2 2E 02 F1 | 	add	local09, objptr
094a8     04 2E 06 F1 | 	add	local09, #4
094ac     17 2B 62 FC | 	wrlong	local07, local09
094b0     03 00 00 FF 
094b4     00 E4 05 F1 | 	add	objptr, ##1536
094b8     F2 2C 02 FB | 	rdlong	local08, objptr
094bc     16 31 02 F6 | 	mov	local10, local08
094c0     01 30 66 F0 | 	shl	local10, #1
094c4     16 31 02 F1 | 	add	local10, local08
094c8     02 30 66 F0 | 	shl	local10, #2
094cc     03 00 00 FF 
094d0     00 E4 85 F1 | 	sub	objptr, ##1536
094d4     F2 30 02 F1 | 	add	local10, objptr
094d8     08 30 06 F1 | 	add	local10, #8
094dc     18 29 62 FC | 	wrlong	local06, local10
094e0     03 00 00 FF 
094e4     00 E4 05 F1 | 	add	objptr, ##1536
094e8     F2 2C 02 FB | 	rdlong	local08, objptr
094ec     01 2C 06 F1 | 	add	local08, #1
094f0     F2 2C 62 FC | 	wrlong	local08, objptr
094f4     69 00 00 FF 
094f8     E0 E5 85 F1 | 	sub	objptr, ##54240
094fc                 | ' 
094fc                 | ' t2.result.uresult=numpar
094fc                 | ' 
094fc                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
094fc                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
094fc                 | ' 
094fc                 | '   
094fc                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
094fc     FF FF 7F FF 
09500     FF 25 0E F2 | 	cmp	local04, ##-1 wz
09504     B8 00 90 5D |  if_ne	jmp	#LR__0745
09508     15 22 06 F6 | 	mov	local03, #21
0950c     0F 2D 02 F6 | 	mov	local08, local01
09510     10 2B 02 F6 | 	mov	local07, local02
09514     11 29 02 F6 | 	mov	local06, local03
09518     69 00 00 FF 
0951c     E0 E5 05 F1 | 	add	objptr, ##54240
09520     F2 26 02 FB | 	rdlong	local05, objptr
09524     13 13 02 F6 | 	mov	arg01, local05
09528     01 12 66 F0 | 	shl	arg01, #1
0952c     13 13 02 F1 | 	add	arg01, local05
09530     02 12 66 F0 | 	shl	arg01, #2
09534     03 00 00 FF 
09538     00 E4 85 F1 | 	sub	objptr, ##1536
0953c     F2 12 02 F1 | 	add	arg01, objptr
09540     09 2D 62 FC | 	wrlong	local08, arg01
09544     03 00 00 FF 
09548     00 E4 05 F1 | 	add	objptr, ##1536
0954c     F2 30 02 FB | 	rdlong	local10, objptr
09550     18 2F 02 F6 | 	mov	local09, local10
09554     01 2E 66 F0 | 	shl	local09, #1
09558     18 2F 02 F1 | 	add	local09, local10
0955c     02 2E 66 F0 | 	shl	local09, #2
09560     03 00 00 FF 
09564     00 E4 85 F1 | 	sub	objptr, ##1536
09568     F2 2E 02 F1 | 	add	local09, objptr
0956c     04 2E 06 F1 | 	add	local09, #4
09570     17 2B 62 FC | 	wrlong	local07, local09
09574     03 00 00 FF 
09578     00 E4 05 F1 | 	add	objptr, ##1536
0957c     F2 2E 02 FB | 	rdlong	local09, objptr
09580     17 31 02 F6 | 	mov	local10, local09
09584     01 30 66 F0 | 	shl	local10, #1
09588     17 31 02 F1 | 	add	local10, local09
0958c     02 30 66 F0 | 	shl	local10, #2
09590     03 00 00 FF 
09594     00 E4 85 F1 | 	sub	objptr, ##1536
09598     F2 30 02 F1 | 	add	local10, objptr
0959c     08 30 06 F1 | 	add	local10, #8
095a0     18 29 62 FC | 	wrlong	local06, local10
095a4     03 00 00 FF 
095a8     00 E4 05 F1 | 	add	objptr, ##1536
095ac     F2 2C 02 FB | 	rdlong	local08, objptr
095b0     01 2C 06 F1 | 	add	local08, #1
095b4     F2 2C 62 FC | 	wrlong	local08, objptr
095b8     69 00 00 FF 
095bc     E0 E5 85 F1 | 	sub	objptr, ##54240
095c0                 | LR__0745
095c0     A7 F0 03 F6 | 	mov	ptra, fp
095c4     B2 00 A0 FD | 	call	#popregs_
095c8                 | _getfun_ret
095c8     2D 00 64 FD | 	ret
095cc                 | 
095cc                 | '   
095cc                 | '   
095cc                 | ' sub getvar(m as integer) 
095cc                 | _getvar
095cc     0A 4A 05 F6 | 	mov	COUNT_, #10
095d0     A8 00 A0 FD | 	call	#pushregs_
095d4                 | _getvar_enter
095d4     09 25 02 F6 | 	mov	local04, arg01
095d8     56 00 00 FF 
095dc     A8 E5 05 F1 | 	add	objptr, ##44456
095e0     F2 14 02 FB | 	rdlong	arg02, objptr
095e4     03 14 66 F0 | 	shl	arg02, #3
095e8     02 00 00 FF 
095ec     38 E4 85 F1 | 	sub	objptr, ##1080
095f0     F2 14 02 F1 | 	add	arg02, objptr
095f4     0A 27 02 FB | 	rdlong	local05, arg02
095f8     13 13 02 F6 | 	mov	arg01, local05
095fc     01 14 06 F6 | 	mov	arg02, #1
09600     54 00 00 FF 
09604     70 E5 85 F1 | 	sub	objptr, ##43376
09608     2C 37 B1 FD | 	call	#__system__Right_S
0960c     FD 28 02 F6 | 	mov	local06, result1
09610     01 2A 66 F6 | 	neg	local07, #1
09614                 | ' 
09614                 | ' varname$=lparts(ct).part$
09614                 | ' suffix$=right$(varname$,1)
09614                 | ' j=-1
09614                 | ' 
09614                 | ' for i=0 to varnum-1
09614     00 2C 06 F6 | 	mov	local08, #0
09618     54 00 00 FF 
0961c     6C E5 05 F1 | 	add	objptr, ##43372
09620     F2 2E 02 FB | 	rdlong	local09, objptr
09624     54 00 00 FF 
09628     6C E5 85 F1 | 	sub	objptr, ##43372
0962c                 | LR__0750
0962c     17 2D 52 F2 | 	cmps	local08, local09 wc
09630     38 00 90 3D |  if_ae	jmp	#LR__0751
09634                 | '   if variables(i).name=varname$ then j=i : exit
09634     16 15 02 F6 | 	mov	arg02, local08
09638     04 14 66 F0 | 	shl	arg02, #4
0963c     34 00 00 FF 
09640     6C E5 05 F1 | 	add	objptr, ##26988
09644     F2 14 02 F1 | 	add	arg02, objptr
09648     0A 13 02 FB | 	rdlong	arg01, arg02
0964c     13 15 02 F6 | 	mov	arg02, local05
09650     34 00 00 FF 
09654     6C E5 85 F1 | 	sub	objptr, ##26988
09658     34 16 B1 FD | 	call	#__system___string_cmp
0965c     00 FA 0D F2 | 	cmp	result1, #0 wz
09660     16 2B 02 A6 |  if_e	mov	local07, local08
09664     01 2C 06 51 |  if_ne	add	local08, #1
09668     C0 FF 9F 5D |  if_ne	jmp	#LR__0750
0966c                 | LR__0751
0966c                 | ' if  j=-1 andalso varnum<maxvars then   
0966c     FF FF 7F FF 
09670     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
09674     A8 00 90 5D |  if_ne	jmp	#LR__0752
09678     54 00 00 FF 
0967c     6C E5 05 F1 | 	add	objptr, ##43372
09680     F2 2E 02 FB | 	rdlong	local09, objptr
09684     54 00 00 FF 
09688     6C E5 85 F1 | 	sub	objptr, ##43372
0968c     01 00 00 FF 
09690     FF 2F 56 F2 | 	cmps	local09, ##1023 wc
09694     88 00 90 3D |  if_ae	jmp	#LR__0752
09698     54 00 00 FF 
0969c     6C E5 05 F1 | 	add	objptr, ##43372
096a0     F2 2E 02 FB | 	rdlong	local09, objptr
096a4     04 2E 66 F0 | 	shl	local09, #4
096a8     20 00 00 FF 
096ac     00 E4 85 F1 | 	sub	objptr, ##16384
096b0     F2 2E 02 F1 | 	add	local09, objptr
096b4     17 27 62 FC | 	wrlong	local05, local09
096b8     20 00 00 FF 
096bc     00 E4 05 F1 | 	add	objptr, ##16384
096c0     F2 2E 02 FB | 	rdlong	local09, objptr
096c4     04 2E 66 F0 | 	shl	local09, #4
096c8     20 00 00 FF 
096cc     00 E4 85 F1 | 	sub	objptr, ##16384
096d0     F2 2E 02 F1 | 	add	local09, objptr
096d4     04 2E 06 F1 | 	add	local09, #4
096d8     17 01 68 FC | 	wrlong	#0, local09
096dc     20 00 00 FF 
096e0     00 E4 05 F1 | 	add	objptr, ##16384
096e4     F2 2E 02 FB | 	rdlong	local09, objptr
096e8     04 2E 66 F0 | 	shl	local09, #4
096ec     20 00 00 FF 
096f0     00 E4 85 F1 | 	sub	objptr, ##16384
096f4     F2 2E 02 F1 | 	add	local09, objptr
096f8     0C 2E 06 F1 | 	add	local09, #12
096fc     17 39 68 FC | 	wrlong	#28, local09
09700     20 00 00 FF 
09704     00 E4 05 F1 | 	add	objptr, ##16384
09708     F2 2E 02 FB | 	rdlong	local09, objptr
0970c     17 2B 02 F6 | 	mov	local07, local09
09710     01 2E 06 F1 | 	add	local09, #1
09714     F2 2E 62 FC | 	wrlong	local09, objptr
09718     54 00 00 FF 
0971c     6C E5 85 F1 | 	sub	objptr, ##43372
09720                 | LR__0752
09720     00 2E 06 F6 | 	mov	local09, #0
09724                 | ' numpar=0
09724                 | ' ' check if it is an array
09724                 | ' 
09724                 | ' if lparts(ct+1).token=token_lpar then
09724     56 00 00 FF 
09728     A8 E5 05 F1 | 	add	objptr, ##44456
0972c     F2 2C 02 FB | 	rdlong	local08, objptr
09730     01 2C 06 F1 | 	add	local08, #1
09734     03 2C 66 F0 | 	shl	local08, #3
09738     02 00 00 FF 
0973c     38 E4 85 F1 | 	sub	objptr, ##1080
09740     F2 2C 02 F1 | 	add	local08, objptr
09744     04 2C 06 F1 | 	add	local08, #4
09748     16 2D 02 FB | 	rdlong	local08, local08
0974c     15 2C 0E F2 | 	cmp	local08, #21 wz
09750     54 00 00 FF 
09754     70 E5 85 F1 | 	sub	objptr, ##43376
09758     08 01 90 5D |  if_ne	jmp	#LR__0757
0975c     56 00 00 FF 
09760     A8 E5 05 F1 | 	add	objptr, ##44456
09764     F2 30 02 FB | 	rdlong	local10, objptr
09768     01 30 06 F1 | 	add	local10, #1
0976c     F2 30 62 FC | 	wrlong	local10, objptr
09770     56 00 00 FF 
09774     A8 E5 85 F1 | 	sub	objptr, ##44456
09778                 | '   ct+=1 											' omit this lpar, this is for expr list
09778                 | '   do
09778                 | LR__0753
09778     56 00 00 FF 
0977c     A8 E5 05 F1 | 	add	objptr, ##44456
09780     F2 2C 02 FB | 	rdlong	local08, objptr
09784     01 2C 06 F1 | 	add	local08, #1
09788     F2 2C 62 FC | 	wrlong	local08, objptr
0978c                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0978c                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
0978c     03 2C 66 F0 | 	shl	local08, #3
09790     02 00 00 FF 
09794     38 E4 85 F1 | 	sub	objptr, ##1080
09798     F2 2C 02 F1 | 	add	local08, objptr
0979c     04 2C 06 F1 | 	add	local08, #4
097a0     16 31 02 FB | 	rdlong	local10, local08
097a4     15 30 0E F2 | 	cmp	local10, #21 wz
097a8     54 00 00 FF 
097ac     70 E5 85 F1 | 	sub	objptr, ##43376
097b0     40 00 90 5D |  if_ne	jmp	#LR__0754
097b4     56 00 00 FF 
097b8     A8 E5 05 F1 | 	add	objptr, ##44456
097bc     F2 30 02 FB | 	rdlong	local10, objptr
097c0     01 30 06 F1 | 	add	local10, #1
097c4     F2 30 62 FC | 	wrlong	local10, objptr
097c8     56 00 00 FF 
097cc     A8 E5 85 F1 | 	sub	objptr, ##44456
097d0     74 EE BF FD | 	call	#_expr
097d4     56 00 00 FF 
097d8     A8 E5 05 F1 | 	add	objptr, ##44456
097dc     F2 30 02 FB | 	rdlong	local10, objptr
097e0     01 30 06 F1 | 	add	local10, #1
097e4     F2 30 62 FC | 	wrlong	local10, objptr
097e8     56 00 00 FF 
097ec     A8 E5 85 F1 | 	sub	objptr, ##44456
097f0     04 00 90 FD | 	jmp	#LR__0755
097f4                 | LR__0754
097f4     50 EE BF FD | 	call	#_expr
097f8                 | LR__0755
097f8     01 2E 06 F1 | 	add	local09, #1
097fc     56 00 00 FF 
09800     A8 E5 05 F1 | 	add	objptr, ##44456
09804     F2 2C 02 FB | 	rdlong	local08, objptr
09808     03 2C 66 F0 | 	shl	local08, #3
0980c     02 00 00 FF 
09810     38 E4 85 F1 | 	sub	objptr, ##1080
09814     F2 2C 02 F1 | 	add	local08, objptr
09818     04 2C 06 F1 | 	add	local08, #4
0981c     16 31 02 FB | 	rdlong	local10, local08
09820     14 30 0E F2 | 	cmp	local10, #20 wz
09824     54 00 00 FF 
09828     70 E5 85 F1 | 	sub	objptr, ##43376
0982c     34 00 90 AD |  if_e	jmp	#LR__0756
09830     56 00 00 FF 
09834     A8 E5 05 F1 | 	add	objptr, ##44456
09838     F2 30 02 FB | 	rdlong	local10, objptr
0983c     03 30 66 F0 | 	shl	local10, #3
09840     02 00 00 FF 
09844     38 E4 85 F1 | 	sub	objptr, ##1080
09848     F2 30 02 F1 | 	add	local10, objptr
0984c     04 30 06 F1 | 	add	local10, #4
09850     18 31 02 FB | 	rdlong	local10, local10
09854     FE 31 0E F2 | 	cmp	local10, #510 wz
09858     54 00 00 FF 
0985c     70 E5 85 F1 | 	sub	objptr, ##43376
09860     14 FF 9F 5D |  if_ne	jmp	#LR__0753
09864                 | LR__0756
09864                 | LR__0757
09864     17 21 02 F6 | 	mov	local02, local09
09868     11 22 06 F6 | 	mov	local03, #17
0986c     15 1F 02 F6 | 	mov	local01, local07
09870     0F 31 02 F6 | 	mov	local10, local01
09874     10 2F 02 F6 | 	mov	local09, local02
09878     11 2D 02 F6 | 	mov	local08, local03
0987c     69 00 00 FF 
09880     E0 E5 05 F1 | 	add	objptr, ##54240
09884     F2 2A 02 FB | 	rdlong	local07, objptr
09888     15 29 02 F6 | 	mov	local06, local07
0988c     01 28 66 F0 | 	shl	local06, #1
09890     15 29 02 F1 | 	add	local06, local07
09894     02 28 66 F0 | 	shl	local06, #2
09898     03 00 00 FF 
0989c     00 E4 85 F1 | 	sub	objptr, ##1536
098a0     F2 28 02 F1 | 	add	local06, objptr
098a4     14 31 62 FC | 	wrlong	local10, local06
098a8     03 00 00 FF 
098ac     00 E4 05 F1 | 	add	objptr, ##1536
098b0     F2 30 02 FB | 	rdlong	local10, objptr
098b4     18 27 02 F6 | 	mov	local05, local10
098b8     01 26 66 F0 | 	shl	local05, #1
098bc     18 27 02 F1 | 	add	local05, local10
098c0     02 26 66 F0 | 	shl	local05, #2
098c4     03 00 00 FF 
098c8     00 E4 85 F1 | 	sub	objptr, ##1536
098cc     F2 26 02 F1 | 	add	local05, objptr
098d0     04 26 06 F1 | 	add	local05, #4
098d4     13 2F 62 FC | 	wrlong	local09, local05
098d8     03 00 00 FF 
098dc     00 E4 05 F1 | 	add	objptr, ##1536
098e0     F2 30 02 FB | 	rdlong	local10, objptr
098e4     18 FB 01 F6 | 	mov	result1, local10
098e8     01 FA 65 F0 | 	shl	result1, #1
098ec     18 FB 01 F1 | 	add	result1, local10
098f0     02 FA 65 F0 | 	shl	result1, #2
098f4     03 00 00 FF 
098f8     00 E4 85 F1 | 	sub	objptr, ##1536
098fc     F2 FA 01 F1 | 	add	result1, objptr
09900     08 FA 05 F1 | 	add	result1, #8
09904     FD 2C 62 FC | 	wrlong	local08, result1
09908     03 00 00 FF 
0990c     00 E4 05 F1 | 	add	objptr, ##1536
09910     F2 30 02 FB | 	rdlong	local10, objptr
09914     01 30 06 F1 | 	add	local10, #1
09918     F2 30 62 FC | 	wrlong	local10, objptr
0991c     69 00 00 FF 
09920     E0 E5 85 F1 | 	sub	objptr, ##54240
09924                 | ' 
09924                 | ' t2.result.twowords(1)=numpar
09924                 | ' 
09924                 | ' 
09924                 | ' 
09924                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
09924                 | ' 
09924                 | ' 
09924                 | '  
09924                 | ' 
09924                 | ' 701 
09924                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
09924                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
09924     FF FF 7F FF 
09928     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0992c     B8 00 90 5D |  if_ne	jmp	#LR__0758
09930     15 22 06 F6 | 	mov	local03, #21
09934     0F 31 02 F6 | 	mov	local10, local01
09938     10 2F 02 F6 | 	mov	local09, local02
0993c     11 2D 02 F6 | 	mov	local08, local03
09940     69 00 00 FF 
09944     E0 E5 05 F1 | 	add	objptr, ##54240
09948     F2 2A 02 FB | 	rdlong	local07, objptr
0994c     15 29 02 F6 | 	mov	local06, local07
09950     01 28 66 F0 | 	shl	local06, #1
09954     15 29 02 F1 | 	add	local06, local07
09958     02 28 66 F0 | 	shl	local06, #2
0995c     03 00 00 FF 
09960     00 E4 85 F1 | 	sub	objptr, ##1536
09964     F2 28 02 F1 | 	add	local06, objptr
09968     14 31 62 FC | 	wrlong	local10, local06
0996c     03 00 00 FF 
09970     00 E4 05 F1 | 	add	objptr, ##1536
09974     F2 1E 02 FB | 	rdlong	local01, objptr
09978     0F 27 02 F6 | 	mov	local05, local01
0997c     01 26 66 F0 | 	shl	local05, #1
09980     0F 27 02 F1 | 	add	local05, local01
09984     02 26 66 F0 | 	shl	local05, #2
09988     03 00 00 FF 
0998c     00 E4 85 F1 | 	sub	objptr, ##1536
09990     F2 26 02 F1 | 	add	local05, objptr
09994     04 26 06 F1 | 	add	local05, #4
09998     13 2F 62 FC | 	wrlong	local09, local05
0999c     03 00 00 FF 
099a0     00 E4 05 F1 | 	add	objptr, ##1536
099a4     F2 1E 02 FB | 	rdlong	local01, objptr
099a8     0F FB 01 F6 | 	mov	result1, local01
099ac     01 FA 65 F0 | 	shl	result1, #1
099b0     0F FB 01 F1 | 	add	result1, local01
099b4     02 FA 65 F0 | 	shl	result1, #2
099b8     03 00 00 FF 
099bc     00 E4 85 F1 | 	sub	objptr, ##1536
099c0     F2 FA 01 F1 | 	add	result1, objptr
099c4     08 FA 05 F1 | 	add	result1, #8
099c8     FD 2C 62 FC | 	wrlong	local08, result1
099cc     03 00 00 FF 
099d0     00 E4 05 F1 | 	add	objptr, ##1536
099d4     F2 30 02 FB | 	rdlong	local10, objptr
099d8     01 30 06 F1 | 	add	local10, #1
099dc     F2 30 62 FC | 	wrlong	local10, objptr
099e0     69 00 00 FF 
099e4     E0 E5 85 F1 | 	sub	objptr, ##54240
099e8                 | LR__0758
099e8     A7 F0 03 F6 | 	mov	ptra, fp
099ec     B2 00 A0 FD | 	call	#popregs_
099f0                 | _getvar_ret
099f0     2D 00 64 FD | 	ret
099f4                 | 
099f4                 | ' 
099f4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
099f4                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
099f4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
099f4                 | ' 
099f4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
099f4                 | ' '--------------------------------------------- Runtime functions ------------------------------------------------------------------------ 
099f4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
099f4                 | ' 
099f4                 | ' function execute_line (astart=0 as integer) as integer
099f4                 | _execute_line
099f4     04 4A 05 F6 | 	mov	COUNT_, #4
099f8     A8 00 A0 FD | 	call	#pushregs_
099fc     79 00 00 FF 
09a00     18 E5 05 F1 | 	add	objptr, ##62232
09a04     F2 00 68 FC | 	wrlong	#0, objptr
09a08                 | ' runptr2=0
09a08                 | ' for lineptr_e=astart to lineptr-1
09a08     0F 00 00 FF 
09a0c     34 E5 85 F1 | 	sub	objptr, ##7988
09a10     F2 12 62 FC | 	wrlong	arg01, objptr
09a14     04 E4 85 F1 | 	sub	objptr, #4
09a18     F2 1E 02 FB | 	rdlong	local01, objptr
09a1c     69 00 00 FF 
09a20     E0 E5 85 F1 | 	sub	objptr, ##54240
09a24                 | LR__0760
09a24     69 00 00 FF 
09a28     E4 E5 05 F1 | 	add	objptr, ##54244
09a2c     F2 FA 01 FB | 	rdlong	result1, objptr
09a30     69 00 00 FF 
09a34     E4 E5 85 F1 | 	sub	objptr, ##54244
09a38     0F FB 51 F2 | 	cmps	result1, local01 wc
09a3c     98 00 90 3D |  if_ae	jmp	#LR__0761
09a40     69 00 00 FF 
09a44     E4 E5 05 F1 | 	add	objptr, ##54244
09a48     F2 FA 01 FB | 	rdlong	result1, objptr
09a4c     FD 20 02 F6 | 	mov	local02, result1
09a50     01 20 66 F0 | 	shl	local02, #1
09a54     FD 20 02 F1 | 	add	local02, result1
09a58     02 20 66 F0 | 	shl	local02, #2
09a5c     03 00 00 FF 
09a60     04 E4 85 F1 | 	sub	objptr, ##1540
09a64     F2 20 02 F1 | 	add	local02, objptr
09a68     08 20 06 F1 | 	add	local02, #8
09a6c     10 21 02 FB | 	rdlong	local02, local02
09a70     10 21 E2 F8 | 	getbyte	local02, local02, #0
09a74     02 20 66 F0 | 	shl	local02, #2
09a78     04 00 00 FF 
09a7c     1C E4 85 F1 | 	sub	objptr, ##2076
09a80     F2 20 02 F1 | 	add	local02, objptr
09a84     10 21 02 FB | 	rdlong	local02, local02
09a88     10 23 02 F6 | 	mov	local03, local02
09a8c     13 20 46 F7 | 	zerox	local02, #19
09a90     14 22 46 F0 | 	shr	local03, #20
09a94     02 22 66 F0 | 	shl	local03, #2
09a98     ED 22 02 F1 | 	add	local03, __methods__
09a9c     11 23 02 FB | 	rdlong	local03, local03
09aa0     62 00 00 FF 
09aa4     C4 E5 85 F1 | 	sub	objptr, ##50628
09aa8     F2 24 02 F6 | 	mov	local04, objptr
09aac     10 E5 01 F6 | 	mov	objptr, local02
09ab0     2D 22 62 FD | 	call	local03
09ab4     12 E5 01 F6 | 	mov	objptr, local04
09ab8     69 00 00 FF 
09abc     E4 E5 05 F1 | 	add	objptr, ##54244
09ac0     F2 24 02 FB | 	rdlong	local04, objptr
09ac4     01 24 06 F1 | 	add	local04, #1
09ac8     F2 24 62 FC | 	wrlong	local04, objptr
09acc     69 00 00 FF 
09ad0     E4 E5 85 F1 | 	sub	objptr, ##54244
09ad4     4C FF 9F FD | 	jmp	#LR__0760
09ad8                 | LR__0761
09ad8                 | ' return runptr2
09ad8     79 00 00 FF 
09adc     18 E5 05 F1 | 	add	objptr, ##62232
09ae0     F2 FA 01 FB | 	rdlong	result1, objptr
09ae4     79 00 00 FF 
09ae8     18 E5 85 F1 | 	sub	objptr, ##62232
09aec     A7 F0 03 F6 | 	mov	ptra, fp
09af0     B2 00 A0 FD | 	call	#popregs_
09af4                 | _execute_line_ret
09af4     2D 00 64 FD | 	ret
09af8                 | 
09af8                 | ' 
09af8                 | ' 
09af8                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
09af8                 | ' 
09af8                 | ' function pop() as expr_result
09af8                 | _pop
09af8                 | ' 
09af8                 | ' if stackpointer=0 then
09af8     62 00 00 FF 
09afc     BC E5 05 F1 | 	add	objptr, ##50620
09b00     F2 FA 09 FB | 	rdlong	result1, objptr wz
09b04     62 00 00 FF 
09b08     BC E5 85 F1 | 	sub	objptr, ##50620
09b0c     FF 04 06 A6 |  if_e	mov	_var03, #255
09b10     18 00 06 A6 |  if_e	mov	_var01, #24
09b14     68 00 90 AD |  if_e	jmp	#LR__0770
09b18     62 00 00 FF 
09b1c     BC E5 05 F1 | 	add	objptr, ##50620
09b20     F2 FA 01 FB | 	rdlong	result1, objptr
09b24     01 FA 85 F1 | 	sub	result1, #1
09b28     F2 FA 61 FC | 	wrlong	result1, objptr
09b2c     FD FE 01 F6 | 	mov	result3, result1
09b30     01 FE 65 F0 | 	shl	result3, #1
09b34     FD FE 01 F1 | 	add	result3, result1
09b38     02 FE 65 F0 | 	shl	result3, #2
09b3c     0C 00 00 FF 
09b40     0C E4 85 F1 | 	sub	objptr, ##6156
09b44     F2 FE 01 F1 | 	add	result3, objptr
09b48     FF 00 02 FB | 	rdlong	_var01, result3
09b4c     04 FE 05 F1 | 	add	result3, #4
09b50     FF FE 01 FB | 	rdlong	result3, result3
09b54     FD FC 01 F6 | 	mov	result2, result1
09b58     01 FC 65 F0 | 	shl	result2, #1
09b5c     FD FC 01 F1 | 	add	result2, result1
09b60     02 FC 65 F0 | 	shl	result2, #2
09b64     F2 FC 01 F1 | 	add	result2, objptr
09b68     08 FC 05 F1 | 	add	result2, #8
09b6c     FE FA 01 FB | 	rdlong	result1, result2
09b70     FF 02 02 F6 | 	mov	_var02, result3
09b74     FD 04 02 F6 | 	mov	_var03, result1
09b78     56 00 00 FF 
09b7c     B0 E5 85 F1 | 	sub	objptr, ##44464
09b80                 | LR__0770
09b80                 | ' return t1
09b80     01 FD 01 F6 | 	mov	result2, _var02
09b84     02 FF 01 F6 | 	mov	result3, _var03
09b88     00 FB 01 F6 | 	mov	result1, _var01
09b8c                 | _pop_ret
09b8c     2D 00 64 FD | 	ret
09b90                 | 
09b90                 | ' 
09b90                 | ' sub push(t1 as expr_result )
09b90                 | _push
09b90                 | ' 
09b90                 | ' 'print "In push: "; t1.result_type
09b90                 | ' 'print "In push: "; t1.result.uresult
09b90                 | ' 
09b90                 | ' if stackpointer<maxstack then 
09b90     62 00 00 FF 
09b94     BC E5 05 F1 | 	add	objptr, ##50620
09b98     F2 00 02 FB | 	rdlong	_var01, objptr
09b9c     62 00 00 FF 
09ba0     BC E5 85 F1 | 	sub	objptr, ##50620
09ba4     01 00 00 FF 
09ba8     00 00 56 F2 | 	cmps	_var01, ##512 wc
09bac     BC 00 90 3D |  if_ae	jmp	#LR__0780
09bb0     09 01 02 FB | 	rdlong	_var01, arg01
09bb4     04 12 06 F1 | 	add	arg01, #4
09bb8     09 03 02 FB | 	rdlong	_var02, arg01
09bbc     04 12 06 F1 | 	add	arg01, #4
09bc0     09 13 02 FB | 	rdlong	arg01, arg01
09bc4     62 00 00 FF 
09bc8     BC E5 05 F1 | 	add	objptr, ##50620
09bcc     F2 04 02 FB | 	rdlong	_var03, objptr
09bd0     02 07 02 F6 | 	mov	_var04, _var03
09bd4     01 06 66 F0 | 	shl	_var04, #1
09bd8     02 07 02 F1 | 	add	_var04, _var03
09bdc     02 06 66 F0 | 	shl	_var04, #2
09be0     0C 00 00 FF 
09be4     0C E4 85 F1 | 	sub	objptr, ##6156
09be8     F2 06 02 F1 | 	add	_var04, objptr
09bec     03 01 62 FC | 	wrlong	_var01, _var04
09bf0     0C 00 00 FF 
09bf4     0C E4 05 F1 | 	add	objptr, ##6156
09bf8     F2 06 02 FB | 	rdlong	_var04, objptr
09bfc     03 05 02 F6 | 	mov	_var03, _var04
09c00     01 04 66 F0 | 	shl	_var03, #1
09c04     03 05 02 F1 | 	add	_var03, _var04
09c08     02 04 66 F0 | 	shl	_var03, #2
09c0c     0C 00 00 FF 
09c10     0C E4 85 F1 | 	sub	objptr, ##6156
09c14     F2 04 02 F1 | 	add	_var03, objptr
09c18     04 04 06 F1 | 	add	_var03, #4
09c1c     02 03 62 FC | 	wrlong	_var02, _var03
09c20     0C 00 00 FF 
09c24     0C E4 05 F1 | 	add	objptr, ##6156
09c28     F2 06 02 FB | 	rdlong	_var04, objptr
09c2c     03 05 02 F6 | 	mov	_var03, _var04
09c30     01 04 66 F0 | 	shl	_var03, #1
09c34     03 05 02 F1 | 	add	_var03, _var04
09c38     02 04 66 F0 | 	shl	_var03, #2
09c3c     0C 00 00 FF 
09c40     0C E4 85 F1 | 	sub	objptr, ##6156
09c44     F2 04 02 F1 | 	add	_var03, objptr
09c48     08 04 06 F1 | 	add	_var03, #8
09c4c     02 13 62 FC | 	wrlong	arg01, _var03
09c50     0C 00 00 FF 
09c54     0C E4 05 F1 | 	add	objptr, ##6156
09c58     F2 00 02 FB | 	rdlong	_var01, objptr
09c5c     01 00 06 F1 | 	add	_var01, #1
09c60     F2 00 62 FC | 	wrlong	_var01, objptr
09c64     62 00 00 FF 
09c68     BC E5 85 F1 | 	sub	objptr, ##50620
09c6c                 | LR__0780
09c6c                 | _push_ret
09c6c     2D 00 64 FD | 	ret
09c70                 | 
09c70                 | ' 
09c70                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
09c70                 | ' 
09c70                 | ' sub do_push
09c70                 | _do_push
09c70                 | ' if stackpointer<maxstack then 
09c70     62 00 00 FF 
09c74     BC E5 05 F1 | 	add	objptr, ##50620
09c78     F2 00 02 FB | 	rdlong	_var01, objptr
09c7c     62 00 00 FF 
09c80     BC E5 85 F1 | 	sub	objptr, ##50620
09c84     01 00 00 FF 
09c88     00 00 56 F2 | 	cmps	_var01, ##512 wc
09c8c     F8 00 90 3D |  if_ae	jmp	#LR__0790
09c90     69 00 00 FF 
09c94     E4 E5 05 F1 | 	add	objptr, ##54244
09c98     F2 02 02 FB | 	rdlong	_var02, objptr
09c9c     01 05 02 F6 | 	mov	_var03, _var02
09ca0     01 04 66 F0 | 	shl	_var03, #1
09ca4     01 05 02 F1 | 	add	_var03, _var02
09ca8     02 04 66 F0 | 	shl	_var03, #2
09cac     03 00 00 FF 
09cb0     04 E4 85 F1 | 	sub	objptr, ##1540
09cb4     F2 04 02 F1 | 	add	_var03, objptr
09cb8     02 01 02 FB | 	rdlong	_var01, _var03
09cbc     04 04 06 F1 | 	add	_var03, #4
09cc0     02 07 02 FB | 	rdlong	_var04, _var03
09cc4     01 05 02 F6 | 	mov	_var03, _var02
09cc8     01 04 66 F0 | 	shl	_var03, #1
09ccc     01 05 02 F1 | 	add	_var03, _var02
09cd0     02 04 66 F0 | 	shl	_var03, #2
09cd4     F2 04 02 F1 | 	add	_var03, objptr
09cd8     08 04 06 F1 | 	add	_var03, #8
09cdc     02 03 02 FB | 	rdlong	_var02, _var03
09ce0     04 00 00 FF 
09ce4     24 E4 85 F1 | 	sub	objptr, ##2084
09ce8     F2 04 02 FB | 	rdlong	_var03, objptr
09cec     02 09 02 F6 | 	mov	_var05, _var03
09cf0     01 08 66 F0 | 	shl	_var05, #1
09cf4     02 09 02 F1 | 	add	_var05, _var03
09cf8     02 08 66 F0 | 	shl	_var05, #2
09cfc     0C 00 00 FF 
09d00     0C E4 85 F1 | 	sub	objptr, ##6156
09d04     F2 08 02 F1 | 	add	_var05, objptr
09d08     04 01 62 FC | 	wrlong	_var01, _var05
09d0c     0C 00 00 FF 
09d10     0C E4 05 F1 | 	add	objptr, ##6156
09d14     F2 08 02 FB | 	rdlong	_var05, objptr
09d18     04 05 02 F6 | 	mov	_var03, _var05
09d1c     01 04 66 F0 | 	shl	_var03, #1
09d20     04 05 02 F1 | 	add	_var03, _var05
09d24     02 04 66 F0 | 	shl	_var03, #2
09d28     0C 00 00 FF 
09d2c     0C E4 85 F1 | 	sub	objptr, ##6156
09d30     F2 04 02 F1 | 	add	_var03, objptr
09d34     04 04 06 F1 | 	add	_var03, #4
09d38     02 07 62 FC | 	wrlong	_var04, _var03
09d3c     0C 00 00 FF 
09d40     0C E4 05 F1 | 	add	objptr, ##6156
09d44     F2 08 02 FB | 	rdlong	_var05, objptr
09d48     04 07 02 F6 | 	mov	_var04, _var05
09d4c     01 06 66 F0 | 	shl	_var04, #1
09d50     04 07 02 F1 | 	add	_var04, _var05
09d54     02 06 66 F0 | 	shl	_var04, #2
09d58     0C 00 00 FF 
09d5c     0C E4 85 F1 | 	sub	objptr, ##6156
09d60     F2 06 02 F1 | 	add	_var04, objptr
09d64     08 06 06 F1 | 	add	_var04, #8
09d68     03 03 62 FC | 	wrlong	_var02, _var04
09d6c     0C 00 00 FF 
09d70     0C E4 05 F1 | 	add	objptr, ##6156
09d74     F2 00 02 FB | 	rdlong	_var01, objptr
09d78     01 00 06 F1 | 	add	_var01, #1
09d7c     F2 00 62 FC | 	wrlong	_var01, objptr
09d80     62 00 00 FF 
09d84     BC E5 85 F1 | 	sub	objptr, ##50620
09d88                 | LR__0790
09d88                 | _do_push_ret
09d88     2D 00 64 FD | 	ret
09d8c                 | 
09d8c                 | ' 
09d8c                 | '   
09d8c                 | ' sub csave_block(address as ulong)
09d8c                 | _csave_block
09d8c     09 01 02 F6 | 	mov	_var01, arg01
09d90                 | ' 
09d90                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
09d90                 | ' ' we enter it at the state of playing 1 kHz header tone
09d90                 | ' 
09d90                 | ' for i=0 to 63 step 2
09d90     00 02 06 F6 | 	mov	_var02, #0
09d94                 | LR__0800
09d94                 | '   do: loop until lpeek(base+32*7)>32768
09d94     56 00 00 FF 
09d98     74 E5 05 F1 | 	add	objptr, ##44404
09d9c     97 0C 48 FB | 	callpa	#(@LR__0802-@LR__0801)>>2,fcache_load_ptr_
09da0                 | LR__0801
09da0     F2 12 02 FB | 	rdlong	arg01, objptr
09da4     E0 12 06 F1 | 	add	arg01, #224
09da8     09 FB 01 FB | 	rdlong	result1, arg01
09dac     40 00 00 FF 
09db0     01 FA 55 F2 | 	cmps	result1, ##32769 wc
09db4     E8 FF 9F CD |  if_b	jmp	#LR__0801
09db8                 | LR__0802
09db8     00 13 02 F6 | 	mov	arg01, _var01
09dbc     01 05 02 F6 | 	mov	_var03, _var02
09dc0     02 04 66 F0 | 	shl	_var03, #2
09dc4     02 13 02 F1 | 	add	arg01, _var03
09dc8     09 07 02 FB | 	rdlong	_var04, arg01
09dcc     24 00 00 FF 
09dd0     D4 E4 05 F1 | 	add	objptr, ##18644
09dd4     F2 06 62 FC | 	wrlong	_var04, objptr
09dd8     7B 00 00 FF 
09ddc     48 E4 85 F1 | 	sub	objptr, ##63048
09de0                 | '   q=lpeek(address+4*i)
09de0                 | '      for bit=0 to 31
09de0     00 08 06 F6 | 	mov	_var05, #0
09de4     97 84 48 FB | 	callpa	#(@LR__0807-@LR__0803)>>2,fcache_load_ptr_
09de8                 | LR__0803
09de8                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
09de8     7B 00 00 FF 
09dec     48 E4 05 F1 | 	add	objptr, ##63048
09df0     F2 06 02 FB | 	rdlong	_var04, objptr
09df4     7B 00 00 FF 
09df8     48 E4 85 F1 | 	sub	objptr, ##63048
09dfc     04 05 C2 F9 | 	decod	_var03, _var05
09e00     02 07 CA F7 | 	test	_var04, _var03 wz
09e04     60 00 90 AD |  if_e	jmp	#LR__0804
09e08     04 05 02 F6 | 	mov	_var03, _var05
09e0c     02 04 66 F0 | 	shl	_var03, #2
09e10     77 00 00 FF 
09e14     10 E4 05 F1 | 	add	objptr, ##60944
09e18     F2 04 02 F1 | 	add	_var03, objptr
09e1c     02 FF 48 FC | 	wrbyte	#127, _var03
09e20     04 05 02 F6 | 	mov	_var03, _var05
09e24     02 04 66 F0 | 	shl	_var03, #2
09e28     01 04 06 F1 | 	add	_var03, #1
09e2c     F2 04 02 F1 | 	add	_var03, objptr
09e30     02 01 49 FC | 	wrbyte	#128, _var03
09e34     04 05 02 F6 | 	mov	_var03, _var05
09e38     02 04 66 F0 | 	shl	_var03, #2
09e3c     02 04 06 F1 | 	add	_var03, #2
09e40     F2 04 02 F1 | 	add	_var03, objptr
09e44     02 FF 48 FC | 	wrbyte	#127, _var03
09e48     04 05 02 F6 | 	mov	_var03, _var05
09e4c     02 04 66 F0 | 	shl	_var03, #2
09e50     03 04 06 F1 | 	add	_var03, #3
09e54     F2 04 02 F1 | 	add	_var03, objptr
09e58     02 01 49 FC | 	wrbyte	#128, _var03
09e5c     77 00 00 FF 
09e60     10 E4 85 F1 | 	sub	objptr, ##60944
09e64     5C 00 90 FD | 	jmp	#LR__0805
09e68                 | LR__0804
09e68     04 05 02 F6 | 	mov	_var03, _var05
09e6c     02 04 66 F0 | 	shl	_var03, #2
09e70     77 00 00 FF 
09e74     10 E4 05 F1 | 	add	objptr, ##60944
09e78     F2 04 02 F1 | 	add	_var03, objptr
09e7c     02 01 49 FC | 	wrbyte	#128, _var03
09e80     04 05 02 F6 | 	mov	_var03, _var05
09e84     02 04 66 F0 | 	shl	_var03, #2
09e88     01 04 06 F1 | 	add	_var03, #1
09e8c     F2 04 02 F1 | 	add	_var03, objptr
09e90     02 01 49 FC | 	wrbyte	#128, _var03
09e94     04 05 02 F6 | 	mov	_var03, _var05
09e98     02 04 66 F0 | 	shl	_var03, #2
09e9c     02 04 06 F1 | 	add	_var03, #2
09ea0     F2 04 02 F1 | 	add	_var03, objptr
09ea4     02 FF 48 FC | 	wrbyte	#127, _var03
09ea8     04 05 02 F6 | 	mov	_var03, _var05
09eac     02 04 66 F0 | 	shl	_var03, #2
09eb0     03 04 06 F1 | 	add	_var03, #3
09eb4     F2 04 02 F1 | 	add	_var03, objptr
09eb8     02 FF 48 FC | 	wrbyte	#127, _var03
09ebc     77 00 00 FF 
09ec0     10 E4 85 F1 | 	sub	objptr, ##60944
09ec4                 | LR__0805
09ec4     01 08 06 F1 | 	add	_var05, #1
09ec8     20 08 56 F2 | 	cmps	_var05, #32 wc
09ecc     18 FF 9F CD |  if_b	jmp	#LR__0803
09ed0                 | '   do: loop until lpeek(base+32*7)<32768
09ed0     56 00 00 FF 
09ed4     74 E5 05 F1 | 	add	objptr, ##44404
09ed8                 | LR__0806
09ed8     F2 12 02 FB | 	rdlong	arg01, objptr
09edc     E0 12 06 F1 | 	add	arg01, #224
09ee0     09 FB 01 FB | 	rdlong	result1, arg01
09ee4     40 00 00 FF 
09ee8     00 FA 55 F2 | 	cmps	result1, ##32768 wc
09eec     E8 FF 9F 3D |  if_ae	jmp	#LR__0806
09ef0                 | LR__0807
09ef0     00 13 02 F6 | 	mov	arg01, _var01
09ef4     04 12 06 F1 | 	add	arg01, #4
09ef8     01 05 02 F6 | 	mov	_var03, _var02
09efc     02 04 66 F0 | 	shl	_var03, #2
09f00     02 13 02 F1 | 	add	arg01, _var03
09f04     09 07 02 FB | 	rdlong	_var04, arg01
09f08     24 00 00 FF 
09f0c     D4 E4 05 F1 | 	add	objptr, ##18644
09f10     F2 06 62 FC | 	wrlong	_var04, objptr
09f14     7B 00 00 FF 
09f18     48 E4 85 F1 | 	sub	objptr, ##63048
09f1c                 | '   q=lpeek(address+4+4*i)
09f1c                 | '      for bit=0 to 31
09f1c     00 08 06 F6 | 	mov	_var05, #0
09f20     97 94 48 FB | 	callpa	#(@LR__0811-@LR__0808)>>2,fcache_load_ptr_
09f24                 | LR__0808
09f24                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
09f24     7B 00 00 FF 
09f28     48 E4 05 F1 | 	add	objptr, ##63048
09f2c     F2 06 02 FB | 	rdlong	_var04, objptr
09f30     7B 00 00 FF 
09f34     48 E4 85 F1 | 	sub	objptr, ##63048
09f38     04 05 C2 F9 | 	decod	_var03, _var05
09f3c     02 07 CA F7 | 	test	_var04, _var03 wz
09f40     80 00 90 AD |  if_e	jmp	#LR__0809
09f44     04 0B 02 F6 | 	mov	_var06, _var05
09f48     02 0A 66 F0 | 	shl	_var06, #2
09f4c     80 04 06 F6 | 	mov	_var03, #128
09f50     05 05 02 F1 | 	add	_var03, _var06
09f54     77 00 00 FF 
09f58     10 E4 05 F1 | 	add	objptr, ##60944
09f5c     F2 04 02 F1 | 	add	_var03, objptr
09f60     02 FF 48 FC | 	wrbyte	#127, _var03
09f64     04 0B 02 F6 | 	mov	_var06, _var05
09f68     02 0A 66 F0 | 	shl	_var06, #2
09f6c     80 04 06 F6 | 	mov	_var03, #128
09f70     05 05 02 F1 | 	add	_var03, _var06
09f74     01 04 06 F1 | 	add	_var03, #1
09f78     F2 04 02 F1 | 	add	_var03, objptr
09f7c     02 01 49 FC | 	wrbyte	#128, _var03
09f80     04 0B 02 F6 | 	mov	_var06, _var05
09f84     02 0A 66 F0 | 	shl	_var06, #2
09f88     80 04 06 F6 | 	mov	_var03, #128
09f8c     05 05 02 F1 | 	add	_var03, _var06
09f90     02 04 06 F1 | 	add	_var03, #2
09f94     F2 04 02 F1 | 	add	_var03, objptr
09f98     02 FF 48 FC | 	wrbyte	#127, _var03
09f9c     04 0B 02 F6 | 	mov	_var06, _var05
09fa0     02 0A 66 F0 | 	shl	_var06, #2
09fa4     80 04 06 F6 | 	mov	_var03, #128
09fa8     05 05 02 F1 | 	add	_var03, _var06
09fac     03 04 06 F1 | 	add	_var03, #3
09fb0     F2 04 02 F1 | 	add	_var03, objptr
09fb4     02 01 49 FC | 	wrbyte	#128, _var03
09fb8     77 00 00 FF 
09fbc     10 E4 85 F1 | 	sub	objptr, ##60944
09fc0     7C 00 90 FD | 	jmp	#LR__0810
09fc4                 | LR__0809
09fc4     04 0B 02 F6 | 	mov	_var06, _var05
09fc8     02 0A 66 F0 | 	shl	_var06, #2
09fcc     80 04 06 F6 | 	mov	_var03, #128
09fd0     05 05 02 F1 | 	add	_var03, _var06
09fd4     77 00 00 FF 
09fd8     10 E4 05 F1 | 	add	objptr, ##60944
09fdc     F2 04 02 F1 | 	add	_var03, objptr
09fe0     02 01 49 FC | 	wrbyte	#128, _var03
09fe4     04 0B 02 F6 | 	mov	_var06, _var05
09fe8     02 0A 66 F0 | 	shl	_var06, #2
09fec     80 04 06 F6 | 	mov	_var03, #128
09ff0     05 05 02 F1 | 	add	_var03, _var06
09ff4     01 04 06 F1 | 	add	_var03, #1
09ff8     F2 04 02 F1 | 	add	_var03, objptr
09ffc     02 01 49 FC | 	wrbyte	#128, _var03
0a000     04 0B 02 F6 | 	mov	_var06, _var05
0a004     02 0A 66 F0 | 	shl	_var06, #2
0a008     80 04 06 F6 | 	mov	_var03, #128
0a00c     05 05 02 F1 | 	add	_var03, _var06
0a010     02 04 06 F1 | 	add	_var03, #2
0a014     F2 04 02 F1 | 	add	_var03, objptr
0a018     02 FF 48 FC | 	wrbyte	#127, _var03
0a01c     04 0B 02 F6 | 	mov	_var06, _var05
0a020     02 0A 66 F0 | 	shl	_var06, #2
0a024     80 04 06 F6 | 	mov	_var03, #128
0a028     05 05 02 F1 | 	add	_var03, _var06
0a02c     03 04 06 F1 | 	add	_var03, #3
0a030     F2 04 02 F1 | 	add	_var03, objptr
0a034     02 FF 48 FC | 	wrbyte	#127, _var03
0a038     77 00 00 FF 
0a03c     10 E4 85 F1 | 	sub	objptr, ##60944
0a040                 | LR__0810
0a040     01 08 06 F1 | 	add	_var05, #1
0a044     20 08 56 F2 | 	cmps	_var05, #32 wc
0a048     D8 FE 9F CD |  if_b	jmp	#LR__0808
0a04c                 | LR__0811
0a04c     02 02 06 F1 | 	add	_var02, #2
0a050     40 02 56 F2 | 	cmps	_var02, #64 wc
0a054     3C FD 9F CD |  if_b	jmp	#LR__0800
0a058                 | ' do: loop until lpeek(base+32*7)>32768
0a058     56 00 00 FF 
0a05c     74 E5 05 F1 | 	add	objptr, ##44404
0a060     97 84 48 FB | 	callpa	#(@LR__0820-@LR__0812)>>2,fcache_load_ptr_
0a064                 | LR__0812
0a064     F2 12 02 FB | 	rdlong	arg01, objptr
0a068     E0 12 06 F1 | 	add	arg01, #224
0a06c     09 FB 01 FB | 	rdlong	result1, arg01
0a070     40 00 00 FF 
0a074     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0a078     E8 FF 9F CD |  if_b	jmp	#LR__0812
0a07c     56 00 00 FF 
0a080     74 E5 85 F1 | 	sub	objptr, ##44404
0a084                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0a084     00 02 06 F6 | 	mov	_var02, #0
0a088                 | LR__0813
0a088     01 07 52 F6 | 	abs	_var04, _var02 wc
0a08c     07 06 06 F5 | 	and	_var04, #7
0a090     03 07 82 F6 | 	negc	_var04, _var04
0a094     04 06 56 F2 | 	cmps	_var04, #4 wc
0a098     20 00 90 3D |  if_ae	jmp	#LR__0814
0a09c     01 0B 02 F6 | 	mov	_var06, _var02
0a0a0     77 00 00 FF 
0a0a4     10 E4 05 F1 | 	add	objptr, ##60944
0a0a8     F2 0A 02 F1 | 	add	_var06, objptr
0a0ac     05 FF 48 FC | 	wrbyte	#127, _var06
0a0b0     77 00 00 FF 
0a0b4     10 E4 85 F1 | 	sub	objptr, ##60944
0a0b8     1C 00 90 FD | 	jmp	#LR__0815
0a0bc                 | LR__0814
0a0bc     01 0B 02 F6 | 	mov	_var06, _var02
0a0c0     77 00 00 FF 
0a0c4     10 E4 05 F1 | 	add	objptr, ##60944
0a0c8     F2 0A 02 F1 | 	add	_var06, objptr
0a0cc     05 01 49 FC | 	wrbyte	#128, _var06
0a0d0     77 00 00 FF 
0a0d4     10 E4 85 F1 | 	sub	objptr, ##60944
0a0d8                 | LR__0815
0a0d8     01 02 06 F1 | 	add	_var02, #1
0a0dc     80 02 56 F2 | 	cmps	_var02, #128 wc
0a0e0     A4 FF 9F CD |  if_b	jmp	#LR__0813
0a0e4                 | ' 
0a0e4                 | ' do: loop until lpeek(base+32*7)<32768
0a0e4     56 00 00 FF 
0a0e8     74 E5 05 F1 | 	add	objptr, ##44404
0a0ec                 | LR__0816
0a0ec     F2 12 02 FB | 	rdlong	arg01, objptr
0a0f0     E0 12 06 F1 | 	add	arg01, #224
0a0f4     09 FB 01 FB | 	rdlong	result1, arg01
0a0f8     40 00 00 FF 
0a0fc     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0a100     E8 FF 9F 3D |  if_ae	jmp	#LR__0816
0a104     56 00 00 FF 
0a108     74 E5 85 F1 | 	sub	objptr, ##44404
0a10c                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0a10c     80 02 06 F6 | 	mov	_var02, #128
0a110                 | LR__0817
0a110     01 07 52 F6 | 	abs	_var04, _var02 wc
0a114     07 06 06 F5 | 	and	_var04, #7
0a118     03 07 82 F6 | 	negc	_var04, _var04
0a11c     04 06 56 F2 | 	cmps	_var04, #4 wc
0a120     20 00 90 3D |  if_ae	jmp	#LR__0818
0a124     01 0B 02 F6 | 	mov	_var06, _var02
0a128     77 00 00 FF 
0a12c     10 E4 05 F1 | 	add	objptr, ##60944
0a130     F2 0A 02 F1 | 	add	_var06, objptr
0a134     05 FF 48 FC | 	wrbyte	#127, _var06
0a138     77 00 00 FF 
0a13c     10 E4 85 F1 | 	sub	objptr, ##60944
0a140     1C 00 90 FD | 	jmp	#LR__0819
0a144                 | LR__0818
0a144     01 0B 02 F6 | 	mov	_var06, _var02
0a148     77 00 00 FF 
0a14c     10 E4 05 F1 | 	add	objptr, ##60944
0a150     F2 0A 02 F1 | 	add	_var06, objptr
0a154     05 01 49 FC | 	wrbyte	#128, _var06
0a158     77 00 00 FF 
0a15c     10 E4 85 F1 | 	sub	objptr, ##60944
0a160                 | LR__0819
0a160     01 02 06 F1 | 	add	_var02, #1
0a164     00 03 16 F2 | 	cmp	_var02, #256 wc
0a168     A4 FF 9F CD |  if_b	jmp	#LR__0817
0a16c                 | LR__0820
0a16c                 | _csave_block_ret
0a16c     2D 00 64 FD | 	ret
0a170                 | 
0a170                 | ' 
0a170                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
0a170                 | _csave_addtoblock
0a170     04 4A 05 F6 | 	mov	COUNT_, #4
0a174     A8 00 A0 FD | 	call	#pushregs_
0a178     09 1F 02 F6 | 	mov	local01, arg01
0a17c                 | ' 
0a17c                 | ' 
0a17c                 | ' if force=0 then
0a17c     07 14 4E F7 | 	zerox	arg02, #7 wz
0a180     78 00 90 5D |  if_ne	jmp	#LR__0830
0a184     79 00 00 FF 
0a188     10 E5 05 F1 | 	add	objptr, ##62224
0a18c     F2 14 02 FB | 	rdlong	arg02, objptr
0a190     02 00 00 FF 
0a194     00 E4 85 F1 | 	sub	objptr, ##1024
0a198     F2 14 02 F1 | 	add	arg02, objptr
0a19c     0A 1F 42 FC | 	wrbyte	local01, arg02
0a1a0     02 00 00 FF 
0a1a4     00 E4 05 F1 | 	add	objptr, ##1024
0a1a8     F2 1E 02 FB | 	rdlong	local01, objptr
0a1ac     01 1E 06 F1 | 	add	local01, #1
0a1b0     F2 1E 62 FC | 	wrlong	local01, objptr
0a1b4                 | '   block(blockptr)=d
0a1b4                 | '   blockptr+=1
0a1b4                 | '   if blockptr>=255 then
0a1b4     79 00 00 FF 
0a1b8     10 E5 85 F1 | 	sub	objptr, ##62224
0a1bc     FF 1E 16 F2 | 	cmp	local01, #255 wc
0a1c0     E4 00 90 CD |  if_b	jmp	#LR__0834
0a1c4     77 00 00 FF 
0a1c8     10 E5 05 F1 | 	add	objptr, ##61200
0a1cc     F2 12 02 F6 | 	mov	arg01, objptr
0a1d0     77 00 00 FF 
0a1d4     10 E5 85 F1 | 	sub	objptr, ##61200
0a1d8     B0 FB BF FD | 	call	#_csave_block
0a1dc     79 00 00 FF 
0a1e0     10 E5 05 F1 | 	add	objptr, ##62224
0a1e4     F2 00 68 FC | 	wrlong	#0, objptr
0a1e8     79 00 00 FF 
0a1ec     10 E5 85 F1 | 	sub	objptr, ##62224
0a1f0     2C 13 06 F6 | 	mov	arg01, #300
0a1f4     64 0D B1 FD | 	call	#__system___waitms
0a1f8     AC 00 90 FD | 	jmp	#LR__0834
0a1fc                 | LR__0830
0a1fc     79 00 00 FF 
0a200     10 E5 05 F1 | 	add	objptr, ##62224
0a204     F2 20 02 FB | 	rdlong	local02, objptr
0a208     02 00 00 FF 
0a20c     00 E4 85 F1 | 	sub	objptr, ##1024
0a210     F2 20 02 F1 | 	add	local02, objptr
0a214     10 1F 42 FC | 	wrbyte	local01, local02
0a218                 | '   block(blockptr)=d
0a218                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0a218     02 00 00 FF 
0a21c     00 E4 05 F1 | 	add	objptr, ##1024
0a220     F2 22 02 FB | 	rdlong	local03, objptr
0a224     79 00 00 FF 
0a228     10 E5 85 F1 | 	sub	objptr, ##62224
0a22c     FF 22 16 F2 | 	cmp	local03, #255 wc
0a230     40 00 90 3D |  if_ae	jmp	#LR__0833
0a234     79 00 00 FF 
0a238     10 E5 05 F1 | 	add	objptr, ##62224
0a23c     F2 24 02 FB | 	rdlong	local04, objptr
0a240     79 00 00 FF 
0a244     10 E5 85 F1 | 	sub	objptr, ##62224
0a248                 | LR__0831
0a248     00 25 56 F2 | 	cmps	local04, #256 wc
0a24c     24 00 90 3D |  if_ae	jmp	#LR__0832
0a250     12 21 02 F6 | 	mov	local02, local04
0a254     77 00 00 FF 
0a258     10 E5 05 F1 | 	add	objptr, ##61200
0a25c     F2 20 02 F1 | 	add	local02, objptr
0a260     10 01 48 FC | 	wrbyte	#0, local02
0a264     01 24 06 F1 | 	add	local04, #1
0a268     77 00 00 FF 
0a26c     10 E5 85 F1 | 	sub	objptr, ##61200
0a270     D4 FF 9F FD | 	jmp	#LR__0831
0a274                 | LR__0832
0a274                 | LR__0833
0a274     77 00 00 FF 
0a278     10 E5 05 F1 | 	add	objptr, ##61200
0a27c     F2 12 02 F6 | 	mov	arg01, objptr
0a280     77 00 00 FF 
0a284     10 E5 85 F1 | 	sub	objptr, ##61200
0a288     00 FB BF FD | 	call	#_csave_block
0a28c     79 00 00 FF 
0a290     10 E5 05 F1 | 	add	objptr, ##62224
0a294     F2 00 68 FC | 	wrlong	#0, objptr
0a298     79 00 00 FF 
0a29c     10 E5 85 F1 | 	sub	objptr, ##62224
0a2a0     2C 13 06 F6 | 	mov	arg01, #300
0a2a4     B4 0C B1 FD | 	call	#__system___waitms
0a2a8                 | LR__0834
0a2a8     A7 F0 03 F6 | 	mov	ptra, fp
0a2ac     B2 00 A0 FD | 	call	#popregs_
0a2b0                 | _csave_addtoblock_ret
0a2b0     2D 00 64 FD | 	ret
0a2b4                 | 
0a2b4                 | ' 
0a2b4                 | ' sub test_csave
0a2b4                 | _test_csave
0a2b4     04 4A 05 F6 | 	mov	COUNT_, #4
0a2b8     A8 00 A0 FD | 	call	#pushregs_
0a2bc     C0 F0 07 F1 | 	add	ptra, #192
0a2c0                 | ' 'dim fileheader,savestart, saveptr as ulong
0a2c0                 | ' 
0a2c0                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0a2c0     69 00 00 FF 
0a2c4     E8 E5 05 F1 | 	add	objptr, ##54248
0a2c8     F2 12 02 FB | 	rdlong	arg01, objptr
0a2cc     69 00 00 FF 
0a2d0     E8 E5 85 F1 | 	sub	objptr, ##54248
0a2d4     3C D5 B0 FD | 	call	#_pslpeek
0a2d8     FF FF 7F FF 
0a2dc     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0a2e0     0C 00 90 5D |  if_ne	jmp	#LR__0840
0a2e4     1B 12 06 F6 | 	mov	arg01, #27
0a2e8     6C D3 B0 FD | 	call	#_printerror
0a2ec     0C 03 90 FD | 	jmp	#LR__0852
0a2f0                 | LR__0840
0a2f0     04 F8 BF FD | 	call	#_pop
0a2f4     FF 1E 02 F6 | 	mov	local01, result3
0a2f8     90 4E 05 F1 | 	add	fp, #144
0a2fc     A7 FA 61 FC | 	wrlong	result1, fp
0a300     04 4E 05 F1 | 	add	fp, #4
0a304     A7 FC 61 FC | 	wrlong	result2, fp
0a308     04 4E 05 F1 | 	add	fp, #4
0a30c     A7 1E 62 FC | 	wrlong	local01, fp
0a310                 | ' t1=pop()
0a310                 | ' if t1.result_type<>result_string then name$="noname.bas" else name$=t1.result.sresult
0a310     98 4E 85 F1 | 	sub	fp, #152
0a314     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a318     53 01 00 5F 
0a31c     F5 1E 06 56 |  if_ne	mov	local01, ##@LR__4688
0a320     8C 4E 05 51 |  if_ne	add	fp, #140
0a324     A7 1E 62 5C |  if_ne	wrlong	local01, fp
0a328     8C 4E 85 51 |  if_ne	sub	fp, #140
0a32c     90 4E 05 A1 |  if_e	add	fp, #144
0a330     A7 1E 02 AB |  if_e	rdlong	local01, fp
0a334     04 4E 85 A1 |  if_e	sub	fp, #4
0a338     A7 1E 62 AC |  if_e	wrlong	local01, fp
0a33c     8C 4E 85 A1 |  if_e	sub	fp, #140
0a340                 | ' 
0a340                 | ' ' prepare 1 kHz header wave
0a340                 | ' 
0a340                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0a340     A7 00 68 FC | 	wrlong	#0, fp
0a344     97 34 48 FB | 	callpa	#(@LR__0844-@LR__0841)>>2,fcache_load_ptr_
0a348                 | LR__0841
0a348     A7 1E 02 FB | 	rdlong	local01, fp
0a34c     0F 1F 52 F6 | 	abs	local01, local01 wc
0a350     07 1E 06 F5 | 	and	local01, #7
0a354     0F 1F 82 F6 | 	negc	local01, local01
0a358     04 1E 56 F2 | 	cmps	local01, #4 wc
0a35c     20 00 90 3D |  if_ae	jmp	#LR__0842
0a360     A7 1E 02 FB | 	rdlong	local01, fp
0a364     77 00 00 FF 
0a368     10 E4 05 F1 | 	add	objptr, ##60944
0a36c     F2 1E 02 F1 | 	add	local01, objptr
0a370     0F FF 48 FC | 	wrbyte	#127, local01
0a374     77 00 00 FF 
0a378     10 E4 85 F1 | 	sub	objptr, ##60944
0a37c     1C 00 90 FD | 	jmp	#LR__0843
0a380                 | LR__0842
0a380     A7 1E 02 FB | 	rdlong	local01, fp
0a384     77 00 00 FF 
0a388     10 E4 05 F1 | 	add	objptr, ##60944
0a38c     F2 1E 02 F1 | 	add	local01, objptr
0a390     0F 01 49 FC | 	wrbyte	#128, local01
0a394     77 00 00 FF 
0a398     10 E4 85 F1 | 	sub	objptr, ##60944
0a39c                 | LR__0843
0a39c     A7 1E 02 FB | 	rdlong	local01, fp
0a3a0     01 1E 06 F1 | 	add	local01, #1
0a3a4     A7 1E 62 FC | 	wrlong	local01, fp
0a3a8     00 1F 56 F2 | 	cmps	local01, #256 wc
0a3ac     98 FF 9F CD |  if_b	jmp	#LR__0841
0a3b0                 | LR__0844
0a3b0     77 00 00 FF 
0a3b4     10 E4 05 F1 | 	add	objptr, ##60944
0a3b8     F2 14 02 F6 | 	mov	arg02, objptr
0a3bc     07 12 06 F6 | 	mov	arg01, #7
0a3c0     0F 00 00 FF 
0a3c4     40 17 06 F6 | 	mov	arg03, ##8000
0a3c8     0E 18 C6 F9 | 	decod	arg04, #14
0a3cc     00 1B 06 F6 | 	mov	arg05, #256
0a3d0     00 1C 06 F6 | 	mov	arg06, #0
0a3d4     6B 00 00 FF 
0a3d8     50 E5 85 F1 | 	sub	objptr, ##55120
0a3dc     D4 04 B1 FD | 	call	#_audio096_spin2_play8
0a3e0     0B 00 00 FF 
0a3e4     C0 E4 85 F1 | 	sub	objptr, ##5824
0a3e8     05 00 00 FF 
0a3ec     B8 13 06 F6 | 	mov	arg01, ##3000
0a3f0     68 0B B1 FD | 	call	#__system___waitms
0a3f4     79 00 00 FF 
0a3f8     10 E5 05 F1 | 	add	objptr, ##62224
0a3fc     F2 00 68 FC | 	wrlong	#0, objptr
0a400     79 00 00 FF 
0a404     10 E5 85 F1 | 	sub	objptr, ##62224
0a408     72 12 06 F6 | 	mov	arg01, #114
0a40c     00 14 06 F6 | 	mov	arg02, #0
0a410     5C FD BF FD | 	call	#_csave_addtoblock
0a414     62 12 06 F6 | 	mov	arg01, #98
0a418     00 14 06 F6 | 	mov	arg02, #0
0a41c     50 FD BF FD | 	call	#_csave_addtoblock
0a420     61 12 06 F6 | 	mov	arg01, #97
0a424     00 14 06 F6 | 	mov	arg02, #0
0a428     44 FD BF FD | 	call	#_csave_addtoblock
0a42c     0D 12 06 F6 | 	mov	arg01, #13
0a430     00 14 06 F6 | 	mov	arg02, #0
0a434     38 FD BF FD | 	call	#_csave_addtoblock
0a438                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0a438                 | ' waitms 3000 
0a438                 | ' 
0a438                 | ' blockptr=0
0a438                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0a438                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0a438     A7 02 68 FC | 	wrlong	#1, fp
0a43c     8C 4E 05 F1 | 	add	fp, #140
0a440     A7 12 02 FB | 	rdlong	arg01, fp
0a444     8C 4E 85 F1 | 	sub	fp, #140
0a448     09 21 02 F6 | 	mov	local02, arg01
0a44c     97 06 48 FB | 	callpa	#(@LR__0846-@LR__0845)>>2,fcache_load_ptr_
0a450                 | LR__0845
0a450     10 FB C9 FA | 	rdbyte	result1, local02 wz
0a454     01 20 06 51 |  if_ne	add	local02, #1
0a458     F4 FF 9F 5D |  if_ne	jmp	#LR__0845
0a45c                 | LR__0846
0a45c     09 21 82 F1 | 	sub	local02, arg01
0a460     10 23 02 F6 | 	mov	local03, local02
0a464     01 22 06 F1 | 	add	local03, #1
0a468                 | LR__0847
0a468     A7 1E 02 FB | 	rdlong	local01, fp
0a46c     11 1F 52 F2 | 	cmps	local01, local03 wc
0a470     34 00 90 3D |  if_ae	jmp	#LR__0848
0a474     8C 4E 05 F1 | 	add	fp, #140
0a478     A7 12 02 FB | 	rdlong	arg01, fp
0a47c     8C 4E 85 F1 | 	sub	fp, #140
0a480     A7 14 02 FB | 	rdlong	arg02, fp
0a484     01 16 06 F6 | 	mov	arg03, #1
0a488     3C 29 B1 FD | 	call	#__system__Mid_S
0a48c     FD 12 C2 FA | 	rdbyte	arg01, result1
0a490     00 14 06 F6 | 	mov	arg02, #0
0a494     D8 FC BF FD | 	call	#_csave_addtoblock
0a498     A7 1E 02 FB | 	rdlong	local01, fp
0a49c     01 1E 06 F1 | 	add	local01, #1
0a4a0     A7 1E 62 FC | 	wrlong	local01, fp
0a4a4     C0 FF 9F FD | 	jmp	#LR__0847
0a4a8                 | LR__0848
0a4a8     00 12 06 F6 | 	mov	arg01, #0
0a4ac     00 14 06 F6 | 	mov	arg02, #0
0a4b0     BC FC BF FD | 	call	#_csave_addtoblock
0a4b4     72 12 06 F6 | 	mov	arg01, #114
0a4b8     00 14 06 F6 | 	mov	arg02, #0
0a4bc     B0 FC BF FD | 	call	#_csave_addtoblock
0a4c0     62 12 06 F6 | 	mov	arg01, #98
0a4c4     00 14 06 F6 | 	mov	arg02, #0
0a4c8     A4 FC BF FD | 	call	#_csave_addtoblock
0a4cc     73 12 06 F6 | 	mov	arg01, #115
0a4d0     00 14 06 F6 | 	mov	arg02, #0
0a4d4     98 FC BF FD | 	call	#_csave_addtoblock
0a4d8     0D 12 06 F6 | 	mov	arg01, #13
0a4dc     00 14 06 F6 | 	mov	arg02, #0
0a4e0     8C FC BF FD | 	call	#_csave_addtoblock
0a4e4     69 00 00 FF 
0a4e8     E8 E5 05 F1 | 	add	objptr, ##54248
0a4ec     F2 1E 02 FB | 	rdlong	local01, objptr
0a4f0     69 00 00 FF 
0a4f4     E8 E5 85 F1 | 	sub	objptr, ##54248
0a4f8     9C 4E 05 F1 | 	add	fp, #156
0a4fc     A7 1E 62 FC | 	wrlong	local01, fp
0a500     9C 4E 85 F1 | 	sub	fp, #156
0a504                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0a504                 | ' 
0a504                 | ' saveptr=programstart
0a504                 | ' do
0a504                 | LR__0849
0a504     A0 4E 05 F1 | 	add	fp, #160
0a508     A7 12 02 F6 | 	mov	arg01, fp
0a50c     04 4E 85 F1 | 	sub	fp, #4
0a510     A7 14 02 FB | 	rdlong	arg02, fp
0a514     9C 4E 85 F1 | 	sub	fp, #156
0a518     18 16 06 F6 | 	mov	arg03, #24
0a51c     0B 00 00 FF 
0a520     C0 E4 05 F1 | 	add	objptr, ##5824
0a524     D8 FB B0 FD | 	call	#_psram_spin2_read1
0a528     0C 4E 05 F1 | 	add	fp, #12
0a52c     A7 12 02 F6 | 	mov	arg01, fp
0a530     9C 4E 05 F1 | 	add	fp, #156
0a534     A7 14 02 FB | 	rdlong	arg02, fp
0a538     04 4E 05 F1 | 	add	fp, #4
0a53c     A7 16 02 FB | 	rdlong	arg03, fp
0a540     AC 4E 85 F1 | 	sub	fp, #172
0a544     B8 FB B0 FD | 	call	#_psram_spin2_read1
0a548     0B 00 00 FF 
0a54c     C0 E4 85 F1 | 	sub	objptr, ##5824
0a550     AC 4E 05 F1 | 	add	fp, #172
0a554     A7 12 02 FB | 	rdlong	arg01, fp
0a558     AC 4E 85 F1 | 	sub	fp, #172
0a55c     00 14 06 F6 | 	mov	arg02, #0
0a560     0C FC BF FD | 	call	#_csave_addtoblock
0a564                 | '   psram.read1(varptr(header(0)),saveptr,24)
0a564                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0a564                 | '   csave_addtoblock(header(3),0) ' that's always <255
0a564                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)    :next i
0a564     A7 00 68 FC | 	wrlong	#0, fp
0a568     AC 4E 05 F1 | 	add	fp, #172
0a56c     A7 24 02 FB | 	rdlong	local04, fp
0a570     AC 4E 85 F1 | 	sub	fp, #172
0a574                 | LR__0850
0a574     A7 1E 02 FB | 	rdlong	local01, fp
0a578     12 1F 52 F2 | 	cmps	local01, local04 wc
0a57c     2C 00 90 3D |  if_ae	jmp	#LR__0851
0a580     A7 22 02 FB | 	rdlong	local03, fp
0a584     0C 4E 05 F1 | 	add	fp, #12
0a588     A7 22 02 F1 | 	add	local03, fp
0a58c     11 13 C2 FA | 	rdbyte	arg01, local03
0a590     00 14 06 F6 | 	mov	arg02, #0
0a594     0C 4E 85 F1 | 	sub	fp, #12
0a598     D4 FB BF FD | 	call	#_csave_addtoblock
0a59c     A7 22 02 FB | 	rdlong	local03, fp
0a5a0     01 22 06 F1 | 	add	local03, #1
0a5a4     A7 22 62 FC | 	wrlong	local03, fp
0a5a8     C8 FF 9F FD | 	jmp	#LR__0850
0a5ac                 | LR__0851
0a5ac     B4 4E 05 F1 | 	add	fp, #180
0a5b0     A7 1E 02 FB | 	rdlong	local01, fp
0a5b4     18 4E 85 F1 | 	sub	fp, #24
0a5b8     A7 1E 62 FC | 	wrlong	local01, fp
0a5bc     18 4E 05 F1 | 	add	fp, #24
0a5c0     A7 1E 02 FB | 	rdlong	local01, fp
0a5c4     B4 4E 85 F1 | 	sub	fp, #180
0a5c8     FF FF 3F FF 
0a5cc     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0a5d0     30 FF 9F 5D |  if_ne	jmp	#LR__0849
0a5d4     00 12 06 F6 | 	mov	arg01, #0
0a5d8     01 14 06 F6 | 	mov	arg02, #1
0a5dc     90 FB BF FD | 	call	#_csave_addtoblock
0a5e0     56 00 00 FF 
0a5e4     74 E5 05 F1 | 	add	objptr, ##44404
0a5e8     F2 12 02 FB | 	rdlong	arg01, objptr
0a5ec     56 00 00 FF 
0a5f0     74 E5 85 F1 | 	sub	objptr, ##44404
0a5f4     F4 12 06 F1 | 	add	arg01, #244
0a5f8     09 01 58 FC | 	wrword	#0, arg01
0a5fc                 | LR__0852
0a5fc     A7 F0 03 F6 | 	mov	ptra, fp
0a600     B2 00 A0 FD | 	call	#popregs_
0a604                 | _test_csave_ret
0a604     2D 00 64 FD | 	ret
0a608                 | 
0a608                 | ' 
0a608                 | ' ' ----------------- Save the program
0a608                 | ' 
0a608                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
0a608                 | _do_save
0a608     02 4A 05 F6 | 	mov	COUNT_, #2
0a60c     A8 00 A0 FD | 	call	#pushregs_
0a610     01 00 00 FF 
0a614     BC F0 07 F1 | 	add	ptra, ##700
0a618     01 00 00 FF 
0a61c     10 4E 05 F1 | 	add	fp, ##528
0a620     B1 B0 86 FF 
0a624     A7 E4 68 FC | 	wrlong	##224486002, fp
0a628     01 00 00 FF 
0a62c     10 4E 85 F1 | 	sub	fp, ##528
0a630     C4 F4 BF FD | 	call	#_pop
0a634     FF 16 02 F6 | 	mov	arg03, result3
0a638     A7 FA 61 FC | 	wrlong	result1, fp
0a63c     04 4E 05 F1 | 	add	fp, #4
0a640     A7 FC 61 FC | 	wrlong	result2, fp
0a644     04 4E 05 F1 | 	add	fp, #4
0a648     A7 16 62 FC | 	wrlong	arg03, fp
0a64c     08 4E 85 F1 | 	sub	fp, #8
0a650                 | ' 
0a650                 | ' fileheader=$0D616272' rba+ver'
0a650                 | ' 
0a650                 | ' t1=pop() 
0a650                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0a650     69 00 00 FF 
0a654     E8 E5 05 F1 | 	add	objptr, ##54248
0a658     F2 12 02 FB | 	rdlong	arg01, objptr
0a65c     69 00 00 FF 
0a660     E8 E5 85 F1 | 	sub	objptr, ##54248
0a664     AC D1 B0 FD | 	call	#_pslpeek
0a668     FF FF 7F FF 
0a66c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0a670     0C 00 90 5D |  if_ne	jmp	#LR__0860
0a674     1B 12 06 F6 | 	mov	arg01, #27
0a678     DC CF B0 FD | 	call	#_printerror
0a67c     68 02 90 FD | 	jmp	#LR__0866
0a680                 | LR__0860
0a680                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0a680     08 4E 05 F1 | 	add	fp, #8
0a684     A7 16 02 FB | 	rdlong	arg03, fp
0a688     08 4E 85 F1 | 	sub	fp, #8
0a68c     2B 16 0E F2 | 	cmp	arg03, #43 wz
0a690     18 00 90 5D |  if_ne	jmp	#LR__0861
0a694     A7 12 02 FB | 	rdlong	arg01, fp
0a698     78 33 B0 FD | 	call	#_convertstring
0a69c     A7 FA 61 FC | 	wrlong	result1, fp
0a6a0     08 4E 05 F1 | 	add	fp, #8
0a6a4     A7 3E 68 FC | 	wrlong	#31, fp
0a6a8     08 4E 85 F1 | 	sub	fp, #8
0a6ac                 | LR__0861
0a6ac                 | ' if t1.result_type=result_string then
0a6ac     08 4E 05 F1 | 	add	fp, #8
0a6b0     A7 1E 02 FB | 	rdlong	local01, fp
0a6b4     08 4E 85 F1 | 	sub	fp, #8
0a6b8     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a6bc     28 02 90 5D |  if_ne	jmp	#LR__0865
0a6c0                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas"
0a6c0     A7 12 02 FB | 	rdlong	arg01, fp
0a6c4     53 01 00 FF 
0a6c8     00 15 06 F6 | 	mov	arg02, ##@LR__4689
0a6cc     C0 05 B1 FD | 	call	#__system___string_cmp
0a6d0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a6d4     53 01 00 AF 
0a6d8     01 1F 06 A6 |  if_e	mov	local01, ##@LR__4690
0a6dc     A7 1E 62 AC |  if_e	wrlong	local01, fp
0a6e0                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
0a6e0     09 12 06 F6 | 	mov	arg01, #9
0a6e4     E8 54 B1 FD | 	call	#__system__close
0a6e8     09 1E 06 F6 | 	mov	local01, #9
0a6ec     71 00 00 FF 
0a6f0     F8 E5 05 F1 | 	add	objptr, ##58360
0a6f4     F2 12 02 FB | 	rdlong	arg01, objptr
0a6f8     71 00 00 FF 
0a6fc     F8 E5 85 F1 | 	sub	objptr, ##58360
0a700     53 01 00 FF 
0a704     0C 15 06 F6 | 	mov	arg02, ##@LR__4691
0a708     B8 05 B1 FD | 	call	#__system___string_concat
0a70c     FD 12 02 F6 | 	mov	arg01, result1
0a710     A7 14 02 FB | 	rdlong	arg02, fp
0a714     AC 05 B1 FD | 	call	#__system___string_concat
0a718     FD 14 02 F6 | 	mov	arg02, result1
0a71c     0F 13 02 F6 | 	mov	arg01, local01
0a720     0D 16 06 F6 | 	mov	arg03, #13
0a724     44 11 B1 FD | 	call	#__system___basic_open_string
0a728     01 00 00 FF 
0a72c     0C 4E 05 F1 | 	add	fp, ##524
0a730     A7 0A 68 FC | 	wrlong	#5, fp
0a734     69 00 00 FF 
0a738     E8 E5 05 F1 | 	add	objptr, ##54248
0a73c     F2 1E 02 FB | 	rdlong	local01, objptr
0a740     69 00 00 FF 
0a744     E8 E5 85 F1 | 	sub	objptr, ##54248
0a748     0C 4E 05 F1 | 	add	fp, #12
0a74c     A7 1E 62 FC | 	wrlong	local01, fp
0a750     01 00 00 FF 
0a754     18 4E 85 F1 | 	sub	fp, ##536
0a758                 | ' '  put #9,1,fileheader,1
0a758                 | '   i=5
0a758                 | '   saveptr=programstart
0a758                 | '   do
0a758                 | LR__0862
0a758     01 00 00 FF 
0a75c     1C 4E 05 F1 | 	add	fp, ##540
0a760     A7 12 02 F6 | 	mov	arg01, fp
0a764     04 4E 85 F1 | 	sub	fp, #4
0a768     A7 14 02 FB | 	rdlong	arg02, fp
0a76c     01 00 00 FF 
0a770     18 4E 85 F1 | 	sub	fp, ##536
0a774     18 16 06 F6 | 	mov	arg03, #24
0a778     0B 00 00 FF 
0a77c     C0 E4 05 F1 | 	add	objptr, ##5824
0a780     7C F9 B0 FD | 	call	#_psram_spin2_read1
0a784     01 00 00 FF 
0a788     34 4E 05 F1 | 	add	fp, ##564
0a78c     A7 12 02 F6 | 	mov	arg01, fp
0a790     10 4E 85 F1 | 	sub	fp, #16
0a794     A7 14 02 FB | 	rdlong	arg02, fp
0a798     04 4E 05 F1 | 	add	fp, #4
0a79c     A7 16 02 FB | 	rdlong	arg03, fp
0a7a0     01 00 00 FF 
0a7a4     28 4E 85 F1 | 	sub	fp, ##552
0a7a8     54 F9 B0 FD | 	call	#_psram_spin2_read1
0a7ac     0B 00 00 FF 
0a7b0     C0 E4 85 F1 | 	sub	objptr, ##5824
0a7b4     53 01 00 FF 
0a7b8     0E 1F 06 F6 | 	mov	local01, ##@LR__4692
0a7bc     01 00 00 FF 
0a7c0     B4 4E 05 F1 | 	add	fp, ##692
0a7c4     A7 1E 62 FC | 	wrlong	local01, fp
0a7c8                 | '     psram.read1(varptr(header(0)),saveptr,24)
0a7c8                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
0a7c8                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
0a7c8     A8 4E 85 F1 | 	sub	fp, #168
0a7cc     A7 02 68 FC | 	wrlong	#1, fp
0a7d0     1C 4E 05 F1 | 	add	fp, #28
0a7d4     A7 20 02 FB | 	rdlong	local02, fp
0a7d8     01 00 00 FF 
0a7dc     28 4E 85 F1 | 	sub	fp, ##552
0a7e0     01 20 06 F1 | 	add	local02, #1
0a7e4                 | LR__0863
0a7e4     01 00 00 FF 
0a7e8     0C 4E 05 F1 | 	add	fp, ##524
0a7ec     A7 1E 02 FB | 	rdlong	local01, fp
0a7f0     01 00 00 FF 
0a7f4     0C 4E 85 F1 | 	sub	fp, ##524
0a7f8     10 1F 52 F2 | 	cmps	local01, local02 wc
0a7fc     64 00 90 3D |  if_ae	jmp	#LR__0864
0a800     01 00 00 FF 
0a804     B4 4E 05 F1 | 	add	fp, ##692
0a808     A7 1E 02 FB | 	rdlong	local01, fp
0a80c     A8 4E 85 F1 | 	sub	fp, #168
0a810     A7 16 02 FB | 	rdlong	arg03, fp
0a814     01 16 86 F1 | 	sub	arg03, #1
0a818     28 4E 05 F1 | 	add	fp, #40
0a81c     A7 16 02 F1 | 	add	arg03, fp
0a820     0B 13 C2 FA | 	rdbyte	arg01, arg03
0a824     01 00 00 FF 
0a828     34 4E 85 F1 | 	sub	fp, ##564
0a82c     44 26 B1 FD | 	call	#__system__Chr_S
0a830     FD 14 02 F6 | 	mov	arg02, result1
0a834     0F 13 02 F6 | 	mov	arg01, local01
0a838     88 04 B1 FD | 	call	#__system___string_concat
0a83c     01 00 00 FF 
0a840     B4 4E 05 F1 | 	add	fp, ##692
0a844     A7 FA 61 FC | 	wrlong	result1, fp
0a848     A8 4E 85 F1 | 	sub	fp, #168
0a84c     A7 1E 02 FB | 	rdlong	local01, fp
0a850     01 1E 06 F1 | 	add	local01, #1
0a854     A7 1E 62 FC | 	wrlong	local01, fp
0a858     01 00 00 FF 
0a85c     0C 4E 85 F1 | 	sub	fp, ##524
0a860     80 FF 9F FD | 	jmp	#LR__0863
0a864                 | LR__0864
0a864                 | '  '   put #9,i,header(3),1 : i+=4
0a864                 | '  '   put #9,i,linebuf(0),header(3) : i+=header(3)
0a864                 | '      print #9, saveline$
0a864     09 12 06 F6 | 	mov	arg01, #9
0a868     30 5D B1 FD | 	call	#__system___getiolock_0442
0a86c     FD 12 02 F6 | 	mov	arg01, result1
0a870     F4 03 B1 FD | 	call	#__system___lockmem
0a874     01 00 00 FF 
0a878     B4 4E 05 F1 | 	add	fp, ##692
0a87c     A7 14 02 FB | 	rdlong	arg02, fp
0a880     01 00 00 FF 
0a884     B4 4E 85 F1 | 	sub	fp, ##692
0a888     09 12 06 F6 | 	mov	arg01, #9
0a88c     00 16 06 F6 | 	mov	arg03, #0
0a890     DC 10 B1 FD | 	call	#__system___basic_print_string
0a894     09 12 06 F6 | 	mov	arg01, #9
0a898     0A 14 06 F6 | 	mov	arg02, #10
0a89c     00 16 06 F6 | 	mov	arg03, #0
0a8a0     74 10 B1 FD | 	call	#__system___basic_print_char
0a8a4     09 12 06 F6 | 	mov	arg01, #9
0a8a8     F0 5C B1 FD | 	call	#__system___getiolock_0442
0a8ac     FD 00 68 FC | 	wrlong	#0, result1
0a8b0     01 00 00 FF 
0a8b4     30 4E 05 F1 | 	add	fp, ##560
0a8b8     A7 1E 02 FB | 	rdlong	local01, fp
0a8bc     18 4E 85 F1 | 	sub	fp, #24
0a8c0     A7 1E 62 FC | 	wrlong	local01, fp
0a8c4     18 4E 05 F1 | 	add	fp, #24
0a8c8     A7 1E 02 FB | 	rdlong	local01, fp
0a8cc     01 00 00 FF 
0a8d0     30 4E 85 F1 | 	sub	fp, ##560
0a8d4     FF FF 3F FF 
0a8d8     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0a8dc     78 FE 9F 5D |  if_ne	jmp	#LR__0862
0a8e0                 | '   close #9  
0a8e0     09 12 06 F6 | 	mov	arg01, #9
0a8e4     E8 52 B1 FD | 	call	#__system__close
0a8e8                 | LR__0865
0a8e8                 | LR__0866
0a8e8     A7 F0 03 F6 | 	mov	ptra, fp
0a8ec     B2 00 A0 FD | 	call	#popregs_
0a8f0                 | _do_save_ret
0a8f0     2D 00 64 FD | 	ret
0a8f4                 | 
0a8f4                 | ' 
0a8f4                 | ' '----------------- Load the program
0a8f4                 | ' 'lo todo: errors while loading
0a8f4                 | ' sub do_load
0a8f4                 | _do_load
0a8f4     01 4A 05 F6 | 	mov	COUNT_, #1
0a8f8     A8 00 A0 FD | 	call	#pushregs_
0a8fc     A4 F0 07 F1 | 	add	ptra, #164
0a900     A0 4E 05 F1 | 	add	fp, #160
0a904     A7 12 02 F6 | 	mov	arg01, fp
0a908     80 4E 85 F1 | 	sub	fp, #128
0a90c     A7 14 02 F6 | 	mov	arg02, fp
0a910     20 4E 85 F1 | 	sub	fp, #32
0a914     09 15 62 FC | 	wrlong	arg02, arg01
0a918     DC F1 BF FD | 	call	#_pop
0a91c     FF 1A 02 F6 | 	mov	arg05, result3
0a920     A7 FA 61 FC | 	wrlong	result1, fp
0a924     04 4E 05 F1 | 	add	fp, #4
0a928     A7 FC 61 FC | 	wrlong	result2, fp
0a92c     04 4E 05 F1 | 	add	fp, #4
0a930     A7 1A 62 FC | 	wrlong	arg05, fp
0a934                 | ' 
0a934                 | ' lpoke varptr(line2$),varptr(line2)
0a934                 | ' t1=pop() 
0a934                 | ' 'print "popped "; t1.result.uresult, t1.result_type
0a934                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
0a934     08 4E 85 F1 | 	sub	fp, #8
0a938     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0a93c     18 00 90 5D |  if_ne	jmp	#LR__0870
0a940     A7 12 02 FB | 	rdlong	arg01, fp
0a944     CC 30 B0 FD | 	call	#_convertstring
0a948     A7 FA 61 FC | 	wrlong	result1, fp
0a94c     08 4E 05 F1 | 	add	fp, #8
0a950     A7 3E 68 FC | 	wrlong	#31, fp
0a954     08 4E 85 F1 | 	sub	fp, #8
0a958                 | LR__0870
0a958                 | ' if t1.result_type=result_string then
0a958     08 4E 05 F1 | 	add	fp, #8
0a95c     A7 1E 02 FB | 	rdlong	local01, fp
0a960     08 4E 85 F1 | 	sub	fp, #8
0a964     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a968     40 03 90 5D |  if_ne	jmp	#LR__0877
0a96c     0C 2B B0 FD | 	call	#_do_new
0a970                 | '   do_new
0a970                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas" 
0a970     A7 12 02 FB | 	rdlong	arg01, fp
0a974     53 01 00 FF 
0a978     0F 15 06 F6 | 	mov	arg02, ##@LR__4693
0a97c     10 03 B1 FD | 	call	#__system___string_cmp
0a980     00 FA 0D F2 | 	cmp	result1, #0 wz
0a984     53 01 00 AF 
0a988     10 1F 06 A6 |  if_e	mov	local01, ##@LR__4694
0a98c     A7 1E 62 AC |  if_e	wrlong	local01, fp
0a990                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0a990     09 12 06 F6 | 	mov	arg01, #9
0a994     38 52 B1 FD | 	call	#__system__close
0a998     09 1E 06 F6 | 	mov	local01, #9
0a99c     71 00 00 FF 
0a9a0     F8 E5 05 F1 | 	add	objptr, ##58360
0a9a4     F2 12 02 FB | 	rdlong	arg01, objptr
0a9a8     71 00 00 FF 
0a9ac     F8 E5 85 F1 | 	sub	objptr, ##58360
0a9b0     53 01 00 FF 
0a9b4     1B 15 06 F6 | 	mov	arg02, ##@LR__4695
0a9b8     08 03 B1 FD | 	call	#__system___string_concat
0a9bc     FD 12 02 F6 | 	mov	arg01, result1
0a9c0     A7 14 02 FB | 	rdlong	arg02, fp
0a9c4     FC 02 B1 FD | 	call	#__system___string_concat
0a9c8     FD 14 02 F6 | 	mov	arg02, result1
0a9cc     0F 13 02 F6 | 	mov	arg01, local01
0a9d0     00 16 06 F6 | 	mov	arg03, #0
0a9d4     94 0E B1 FD | 	call	#__system___basic_open_string
0a9d8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0a9dc     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0a9e0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0a9e4     10 4E 05 F1 | 	add	fp, #16
0a9e8     A7 FA 61 FC | 	wrlong	result1, fp
0a9ec                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0a9ec     10 4E 85 F1 | 	sub	fp, #16
0a9f0     9C 00 90 AD |  if_e	jmp	#LR__0871
0a9f4     00 12 06 F6 | 	mov	arg01, #0
0a9f8     A0 5B B1 FD | 	call	#__system___getiolock_0442
0a9fc     FD 12 02 F6 | 	mov	arg01, result1
0aa00     64 02 B1 FD | 	call	#__system___lockmem
0aa04     53 01 00 FF 
0aa08     1D 15 06 F6 | 	mov	arg02, ##@LR__4696
0aa0c     00 12 06 F6 | 	mov	arg01, #0
0aa10     00 16 06 F6 | 	mov	arg03, #0
0aa14     58 0F B1 FD | 	call	#__system___basic_print_string
0aa18     10 4E 05 F1 | 	add	fp, #16
0aa1c     A7 14 02 FB | 	rdlong	arg02, fp
0aa20     10 4E 85 F1 | 	sub	fp, #16
0aa24     00 12 06 F6 | 	mov	arg01, #0
0aa28     00 16 06 F6 | 	mov	arg03, #0
0aa2c     0A 18 06 F6 | 	mov	arg04, #10
0aa30     80 0F B1 FD | 	call	#__system___basic_print_integer
0aa34     53 01 00 FF 
0aa38     2B 15 06 F6 | 	mov	arg02, ##@LR__4697
0aa3c     00 12 06 F6 | 	mov	arg01, #0
0aa40     00 16 06 F6 | 	mov	arg03, #0
0aa44     28 0F B1 FD | 	call	#__system___basic_print_string
0aa48     10 4E 05 F1 | 	add	fp, #16
0aa4c     A7 12 02 FB | 	rdlong	arg01, fp
0aa50     10 4E 85 F1 | 	sub	fp, #16
0aa54     48 28 B1 FD | 	call	#__system___strerror
0aa58     FD 14 02 F6 | 	mov	arg02, result1
0aa5c     00 12 06 F6 | 	mov	arg01, #0
0aa60     00 16 06 F6 | 	mov	arg03, #0
0aa64     08 0F B1 FD | 	call	#__system___basic_print_string
0aa68     00 12 06 F6 | 	mov	arg01, #0
0aa6c     0A 14 06 F6 | 	mov	arg02, #10
0aa70     00 16 06 F6 | 	mov	arg03, #0
0aa74     A0 0E B1 FD | 	call	#__system___basic_print_char
0aa78     00 12 06 F6 | 	mov	arg01, #0
0aa7c     1C 5B B1 FD | 	call	#__system___getiolock_0442
0aa80     FD 00 68 FC | 	wrlong	#0, result1
0aa84     09 12 06 F6 | 	mov	arg01, #9
0aa88     44 51 B1 FD | 	call	#__system__close
0aa8c     24 02 90 FD | 	jmp	#LR__0879
0aa90                 | LR__0871
0aa90     0C 4E 05 F1 | 	add	fp, #12
0aa94     A7 0A 68 FC | 	wrlong	#5, fp
0aa98                 | '   i=5
0aa98                 | '   get #9,1,header,1
0aa98     0C 4E 05 F1 | 	add	fp, #12
0aa9c     A7 16 02 F6 | 	mov	arg03, fp
0aaa0     18 4E 85 F1 | 	sub	fp, #24
0aaa4     09 12 06 F6 | 	mov	arg01, #9
0aaa8     01 14 06 F6 | 	mov	arg02, #1
0aaac     01 18 06 F6 | 	mov	arg04, #1
0aab0     04 1A 06 F6 | 	mov	arg05, #4
0aab4     C8 0F B1 FD | 	call	#__system___basic_get
0aab8                 | '   
0aab8                 | '   if header<>$0D616272 then 
0aab8     18 4E 05 F1 | 	add	fp, #24
0aabc     A7 1E 02 FB | 	rdlong	local01, fp
0aac0     18 4E 85 F1 | 	sub	fp, #24
0aac4     B1 B0 06 FF 
0aac8     72 1E 0E F2 | 	cmp	local01, ##224486002 wz
0aacc     F0 00 90 AD |  if_e	jmp	#LR__0874
0aad0                 | '     close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0aad0     09 12 06 F6 | 	mov	arg01, #9
0aad4     F8 50 B1 FD | 	call	#__system__close
0aad8     09 1E 06 F6 | 	mov	local01, #9
0aadc     71 00 00 FF 
0aae0     F8 E5 05 F1 | 	add	objptr, ##58360
0aae4     F2 12 02 FB | 	rdlong	arg01, objptr
0aae8     71 00 00 FF 
0aaec     F8 E5 85 F1 | 	sub	objptr, ##58360
0aaf0     53 01 00 FF 
0aaf4     2E 15 06 F6 | 	mov	arg02, ##@LR__4698
0aaf8     C8 01 B1 FD | 	call	#__system___string_concat
0aafc     FD 12 02 F6 | 	mov	arg01, result1
0ab00     A7 14 02 FB | 	rdlong	arg02, fp
0ab04     BC 01 B1 FD | 	call	#__system___string_concat
0ab08     FD 14 02 F6 | 	mov	arg02, result1
0ab0c     0F 13 02 F6 | 	mov	arg01, local01
0ab10     00 16 06 F6 | 	mov	arg03, #0
0ab14     54 0D B1 FD | 	call	#__system___basic_open_string
0ab18                 | '     do
0ab18                 | LR__0872
0ab18     09 12 06 F6 | 	mov	arg01, #9
0ab1c     54 03 B1 FD | 	call	#__system___basic_read_line
0ab20     56 00 00 FF 
0ab24     80 E5 05 F1 | 	add	objptr, ##44416
0ab28     F2 FA 61 FC | 	wrlong	result1, objptr
0ab2c                 | '       if left$(line$,1) >="0" andalso left$(line$,1)<="9" then interpret
0ab2c     56 00 00 FF 
0ab30     80 E5 85 F1 | 	sub	objptr, ##44416
0ab34     FD 12 02 F6 | 	mov	arg01, result1
0ab38     01 14 06 F6 | 	mov	arg02, #1
0ab3c     70 21 B1 FD | 	call	#__system__Left_S
0ab40     FD 12 02 F6 | 	mov	arg01, result1
0ab44     53 01 00 FF 
0ab48     30 15 06 F6 | 	mov	arg02, ##@LR__4699
0ab4c     40 01 B1 FD | 	call	#__system___string_cmp
0ab50     00 FA 55 F2 | 	cmps	result1, #0 wc
0ab54     34 00 90 CD |  if_b	jmp	#LR__0873
0ab58     56 00 00 FF 
0ab5c     80 E5 05 F1 | 	add	objptr, ##44416
0ab60     F2 12 02 FB | 	rdlong	arg01, objptr
0ab64     56 00 00 FF 
0ab68     80 E5 85 F1 | 	sub	objptr, ##44416
0ab6c     01 14 06 F6 | 	mov	arg02, #1
0ab70     3C 21 B1 FD | 	call	#__system__Left_S
0ab74     FD 12 02 F6 | 	mov	arg01, result1
0ab78     53 01 00 FF 
0ab7c     32 15 06 F6 | 	mov	arg02, ##@LR__4700
0ab80     0C 01 B1 FD | 	call	#__system___string_cmp
0ab84     01 FA 55 F2 | 	cmps	result1, #1 wc
0ab88     90 5E BF CD |  if_b	call	#_interpret
0ab8c                 | LR__0873
0ab8c     56 00 00 FF 
0ab90     80 E5 05 F1 | 	add	objptr, ##44416
0ab94     F2 12 02 FB | 	rdlong	arg01, objptr
0ab98     56 00 00 FF 
0ab9c     80 E5 85 F1 | 	sub	objptr, ##44416
0aba0     53 01 00 FF 
0aba4     34 15 06 F6 | 	mov	arg02, ##@LR__4701
0aba8     E4 00 B1 FD | 	call	#__system___string_cmp
0abac     00 FA 0D F2 | 	cmp	result1, #0 wz
0abb0     64 FF 9F 5D |  if_ne	jmp	#LR__0872
0abb4                 | '     close #9
0abb4     09 12 06 F6 | 	mov	arg01, #9
0abb8     14 50 B1 FD | 	call	#__system__close
0abbc     F4 00 90 FD | 	jmp	#LR__0878
0abc0                 | LR__0874
0abc0                 | '   'printerror(26) : close #9 : return
0abc0                 | '     do
0abc0                 | LR__0875
0abc0                 | '       get #9,i,linelength,1,amount : i+=4 : line2(linelength)=0
0abc0     0C 4E 05 F1 | 	add	fp, #12
0abc4     A7 14 02 FB | 	rdlong	arg02, fp
0abc8     10 4E 05 F1 | 	add	fp, #16
0abcc     A7 16 02 F6 | 	mov	arg03, fp
0abd0     1C 4E 85 F1 | 	sub	fp, #28
0abd4     09 12 06 F6 | 	mov	arg01, #9
0abd8     01 18 06 F6 | 	mov	arg04, #1
0abdc     04 1A 06 F6 | 	mov	arg05, #4
0abe0     9C 0E B1 FD | 	call	#__system___basic_get
0abe4     14 4E 05 F1 | 	add	fp, #20
0abe8     A7 FA 61 FC | 	wrlong	result1, fp
0abec     08 4E 85 F1 | 	sub	fp, #8
0abf0     A7 1E 02 FB | 	rdlong	local01, fp
0abf4     04 1E 06 F1 | 	add	local01, #4
0abf8     A7 1E 62 FC | 	wrlong	local01, fp
0abfc     10 4E 05 F1 | 	add	fp, #16
0ac00     A7 1E 02 FB | 	rdlong	local01, fp
0ac04     04 4E 05 F1 | 	add	fp, #4
0ac08     A7 1E 02 F1 | 	add	local01, fp
0ac0c     0F 01 48 FC | 	wrbyte	#0, local01
0ac10                 | '       if amount=1 then  
0ac10     0C 4E 85 F1 | 	sub	fp, #12
0ac14     A7 1E 02 FB | 	rdlong	local01, fp
0ac18     14 4E 85 F1 | 	sub	fp, #20
0ac1c     01 1E 0E F2 | 	cmp	local01, #1 wz
0ac20     68 00 90 5D |  if_ne	jmp	#LR__0876
0ac24                 | '         get #9,i,line2(0),linelength : i+=linelength
0ac24     0C 4E 05 F1 | 	add	fp, #12
0ac28     A7 14 02 FB | 	rdlong	arg02, fp
0ac2c     14 4E 05 F1 | 	add	fp, #20
0ac30     A7 16 02 F6 | 	mov	arg03, fp
0ac34     04 4E 85 F1 | 	sub	fp, #4
0ac38     A7 18 02 FB | 	rdlong	arg04, fp
0ac3c     1C 4E 85 F1 | 	sub	fp, #28
0ac40     09 12 06 F6 | 	mov	arg01, #9
0ac44     01 1A 06 F6 | 	mov	arg05, #1
0ac48     34 0E B1 FD | 	call	#__system___basic_get
0ac4c     0C 4E 05 F1 | 	add	fp, #12
0ac50     A7 1E 02 FB | 	rdlong	local01, fp
0ac54     10 4E 05 F1 | 	add	fp, #16
0ac58     A7 1A 02 FB | 	rdlong	arg05, fp
0ac5c     0D 1F 02 F1 | 	add	local01, arg05
0ac60     10 4E 85 F1 | 	sub	fp, #16
0ac64     A7 1E 62 FC | 	wrlong	local01, fp
0ac68     94 4E 05 F1 | 	add	fp, #148
0ac6c     A7 1E 02 FB | 	rdlong	local01, fp
0ac70     A0 4E 85 F1 | 	sub	fp, #160
0ac74     56 00 00 FF 
0ac78     80 E5 05 F1 | 	add	objptr, ##44416
0ac7c     F2 1E 62 FC | 	wrlong	local01, objptr
0ac80     56 00 00 FF 
0ac84     80 E5 85 F1 | 	sub	objptr, ##44416
0ac88     90 5D BF FD | 	call	#_interpret
0ac8c                 | LR__0876
0ac8c     14 4E 05 F1 | 	add	fp, #20
0ac90     A7 1E 02 FB | 	rdlong	local01, fp
0ac94     14 4E 85 F1 | 	sub	fp, #20
0ac98     01 1E 56 F2 | 	cmps	local01, #1 wc
0ac9c     20 FF 9F 3D |  if_ae	jmp	#LR__0875
0aca0                 | '     close #9 
0aca0     09 12 06 F6 | 	mov	arg01, #9
0aca4     28 4F B1 FD | 	call	#__system__close
0aca8     08 00 90 FD | 	jmp	#LR__0878
0acac                 | LR__0877
0acac     1E 12 06 F6 | 	mov	arg01, #30
0acb0     A4 C9 B0 FD | 	call	#_printerror
0acb4                 | LR__0878
0acb4                 | LR__0879
0acb4     A7 F0 03 F6 | 	mov	ptra, fp
0acb8     B2 00 A0 FD | 	call	#popregs_
0acbc                 | _do_load_ret
0acbc     2D 00 64 FD | 	ret
0acc0                 | 
0acc0                 | ' 
0acc0                 | ' '----------------- Run the program 
0acc0                 | ' 
0acc0                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
0acc0                 | ' 
0acc0                 | ' sub do_run
0acc0                 | _do_run
0acc0     01 4A 05 F6 | 	mov	COUNT_, #1
0acc4     A8 00 A0 FD | 	call	#pushregs_
0acc8     69 00 00 FF 
0accc     E8 E5 05 F1 | 	add	objptr, ##54248
0acd0     F2 1C 02 FB | 	rdlong	arg06, objptr
0acd4     0F 00 00 FF 
0acd8     2C E5 05 F1 | 	add	objptr, ##7980
0acdc     F2 1C 62 FC | 	wrlong	arg06, objptr
0ace0     04 E4 05 F1 | 	add	objptr, #4
0ace4     F2 00 68 FC | 	wrlong	#0, objptr
0ace8     04 E4 05 F1 | 	add	objptr, #4
0acec     FF FF FF FF 
0acf0     F2 FE 6B FC | 	wrlong	##-1, objptr
0acf4                 | ' if inrun>0 then 
0acf4     04 E4 05 F1 | 	add	objptr, #4
0acf8     F2 1C 02 FB | 	rdlong	arg06, objptr
0acfc     79 00 00 FF 
0ad00     20 E5 85 F1 | 	sub	objptr, ##62240
0ad04     01 1C 16 F2 | 	cmp	arg06, #1 wc
0ad08     30 00 90 CD |  if_b	jmp	#LR__0880
0ad0c     79 00 00 FF 
0ad10     24 E5 05 F1 | 	add	objptr, ##62244
0ad14     F2 12 02 F6 | 	mov	arg01, objptr
0ad18     10 E4 85 F1 | 	sub	objptr, #16
0ad1c     F2 14 02 FB | 	rdlong	arg02, objptr
0ad20     18 16 06 F6 | 	mov	arg03, #24
0ad24     6E 00 00 FF 
0ad28     54 E4 85 F1 | 	sub	objptr, ##56404
0ad2c     D0 F3 B0 FD | 	call	#_psram_spin2_read1
0ad30     0B 00 00 FF 
0ad34     C0 E4 85 F1 | 	sub	objptr, ##5824
0ad38                 | '   psram.read1(varptr(runheader),runptr,24)  
0ad38                 | '   return
0ad38     9C 02 90 FD | 	jmp	#LR__0886
0ad3c                 | LR__0880
0ad3c     79 00 00 FF 
0ad40     20 E5 05 F1 | 	add	objptr, ##62240
0ad44     F2 02 68 FC | 	wrlong	#1, objptr
0ad48     04 E4 05 F1 | 	add	objptr, #4
0ad4c     F2 12 02 F6 | 	mov	arg01, objptr
0ad50     10 E4 85 F1 | 	sub	objptr, #16
0ad54     F2 14 02 FB | 	rdlong	arg02, objptr
0ad58     18 16 06 F6 | 	mov	arg03, #24
0ad5c     6E 00 00 FF 
0ad60     54 E4 85 F1 | 	sub	objptr, ##56404
0ad64     98 F3 B0 FD | 	call	#_psram_spin2_read1
0ad68                 | ' inrun=1
0ad68                 | ' psram.read1(varptr(runheader),runptr,24) 
0ad68                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
0ad68     6E 00 00 FF 
0ad6c     64 E4 05 F1 | 	add	objptr, ##56420
0ad70     F2 1E 02 FB | 	rdlong	local01, objptr
0ad74     79 00 00 FF 
0ad78     24 E5 85 F1 | 	sub	objptr, ##62244
0ad7c     FF FF 7F FF 
0ad80     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0ad84     79 00 00 AF 
0ad88     20 E5 05 A1 |  if_e	add	objptr, ##62240
0ad8c     F2 00 68 AC |  if_e	wrlong	#0, objptr
0ad90     79 00 00 AF 
0ad94     20 E5 85 A1 |  if_e	sub	objptr, ##62240
0ad98     3C 02 90 AD |  if_e	jmp	#LR__0886
0ad9c                 | ' do 
0ad9c                 | LR__0881
0ad9c                 | '   if runptr<>oldrunptr then
0ad9c     79 00 00 FF 
0ada0     14 E5 05 F1 | 	add	objptr, ##62228
0ada4     F2 1E 02 FB | 	rdlong	local01, objptr
0ada8     08 E4 05 F1 | 	add	objptr, #8
0adac     F2 1C 02 FB | 	rdlong	arg06, objptr
0adb0     79 00 00 FF 
0adb4     1C E5 85 F1 | 	sub	objptr, ##62236
0adb8     0E 1F 0A F2 | 	cmp	local01, arg06 wz
0adbc     CC 00 90 AD |  if_e	jmp	#LR__0882
0adc0     79 00 00 FF 
0adc4     24 E5 05 F1 | 	add	objptr, ##62244
0adc8     F2 12 02 F6 | 	mov	arg01, objptr
0adcc     10 E4 85 F1 | 	sub	objptr, #16
0add0     F2 14 02 FB | 	rdlong	arg02, objptr
0add4     18 16 06 F6 | 	mov	arg03, #24
0add8     6E 00 00 FF 
0addc     54 E4 85 F1 | 	sub	objptr, ##56404
0ade0     1C F3 B0 FD | 	call	#_psram_spin2_read1
0ade4     5B 00 00 FF 
0ade8     20 E5 05 F1 | 	add	objptr, ##46880
0adec     F2 12 02 F6 | 	mov	arg01, objptr
0adf0     12 00 00 FF 
0adf4     34 E5 05 F1 | 	add	objptr, ##9524
0adf8     F2 14 02 FB | 	rdlong	arg02, objptr
0adfc     14 00 00 FF 
0ae00     4C E5 85 F1 | 	sub	objptr, ##10572
0ae04     F2 1E 02 FB | 	rdlong	local01, objptr
0ae08     01 1E 66 F0 | 	shl	local01, #1
0ae0c     0F 15 02 F1 | 	add	arg02, local01
0ae10     14 00 00 FF 
0ae14     64 E5 05 F1 | 	add	objptr, ##10596
0ae18     F2 16 02 FB | 	rdlong	arg03, objptr
0ae1c     18 E4 85 F1 | 	sub	objptr, #24
0ae20     F2 1E 02 FB | 	rdlong	local01, objptr
0ae24     0F 17 82 F1 | 	sub	arg03, local01
0ae28     6E 00 00 FF 
0ae2c     54 E4 85 F1 | 	sub	objptr, ##56404
0ae30     CC F2 B0 FD | 	call	#_psram_spin2_read1
0ae34     6E 00 00 FF 
0ae38     6C E4 05 F1 | 	add	objptr, ##56428
0ae3c     F2 1E 02 FB | 	rdlong	local01, objptr
0ae40     18 E4 85 F1 | 	sub	objptr, #24
0ae44     F2 1C 02 FB | 	rdlong	arg06, objptr
0ae48     0E 1F 82 F1 | 	sub	local01, arg06
0ae4c     14 00 00 FF 
0ae50     4C E5 85 F1 | 	sub	objptr, ##10572
0ae54     F2 1C 02 FB | 	rdlong	arg06, objptr
0ae58     0E 1F 12 FD | 	qdiv	local01, arg06
0ae5c     05 00 00 FF 
0ae60     18 E4 05 F1 | 	add	objptr, ##2584
0ae64     18 1E 62 FD | 	getqx	local01
0ae68     03 1E 86 F1 | 	sub	local01, #3
0ae6c     F2 1E 62 FC | 	wrlong	local01, objptr
0ae70     0F 00 00 FF 
0ae74     34 E5 05 F1 | 	add	objptr, ##7988
0ae78     F2 1E 02 FB | 	rdlong	local01, objptr
0ae7c     08 E4 05 F1 | 	add	objptr, #8
0ae80     F2 1E 62 FC | 	wrlong	local01, objptr
0ae84     79 00 00 FF 
0ae88     1C E5 85 F1 | 	sub	objptr, ##62236
0ae8c                 | LR__0882
0ae8c     79 00 00 FF 
0ae90     38 E5 05 F1 | 	add	objptr, ##62264
0ae94     F2 1E 02 FB | 	rdlong	local01, objptr
0ae98     24 E4 85 F1 | 	sub	objptr, #36
0ae9c     F2 1E 62 FC | 	wrlong	local01, objptr
0aea0     04 E4 05 F1 | 	add	objptr, #4
0aea4     F2 12 02 FB | 	rdlong	arg01, objptr
0aea8     79 00 00 FF 
0aeac     18 E5 85 F1 | 	sub	objptr, ##62232
0aeb0     40 EB BF FD | 	call	#_execute_line
0aeb4     79 00 00 FF 
0aeb8     18 E5 05 F1 | 	add	objptr, ##62232
0aebc     F2 FA 61 FC | 	wrlong	result1, objptr
0aec0     04 E4 85 F1 | 	sub	objptr, #4
0aec4     F2 1E 02 FB | 	rdlong	local01, objptr
0aec8     79 00 00 FF 
0aecc     14 E5 85 F1 | 	sub	objptr, ##62228
0aed0     FF FF 3F FF 
0aed4     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0aed8     0C 00 90 AD |  if_e	jmp	#LR__0883
0aedc     B0 F5 B0 FD | 	call	#_usbnew_spin2_get_key
0aee0     06 FB 0D F2 | 	cmp	result1, #262 wz
0aee4     B4 FE 9F 5D |  if_ne	jmp	#LR__0881
0aee8                 | LR__0883
0aee8                 | ' if runheader(5)<>$7FFF_FFFF then 
0aee8     79 00 00 FF 
0aeec     38 E5 05 F1 | 	add	objptr, ##62264
0aef0     F2 1E 02 FB | 	rdlong	local01, objptr
0aef4     79 00 00 FF 
0aef8     38 E5 85 F1 | 	sub	objptr, ##62264
0aefc     FF FF 3F FF 
0af00     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0af04     BC 00 90 AD |  if_e	jmp	#LR__0885
0af08                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len)  
0af08     79 00 00 FF 
0af0c     44 E5 05 F1 | 	add	objptr, ##62276
0af10     F2 1E 02 FB | 	rdlong	local01, objptr
0af14     79 00 00 FF 
0af18     44 E5 85 F1 | 	sub	objptr, ##62276
0af1c     01 1E 0E F2 | 	cmp	local01, #1 wz
0af20     3C 00 90 5D |  if_ne	jmp	#LR__0884
0af24     7A 00 00 FF 
0af28     E8 E5 05 F1 | 	add	objptr, ##62952
0af2c     F2 14 02 FB | 	rdlong	arg02, objptr
0af30     04 E4 85 F1 | 	sub	objptr, #4
0af34     F2 1A 02 FB | 	rdlong	arg05, objptr
0af38     07 12 06 F6 | 	mov	arg01, #7
0af3c     56 00 00 FF 
0af40     44 16 06 F6 | 	mov	arg03, ##44100
0af44     0E 18 C6 F9 | 	decod	arg04, #14
0af48     01 1C 66 F6 | 	neg	arg06, #1
0af4c     6F 00 00 FF 
0af50     24 E5 85 F1 | 	sub	objptr, ##57124
0af54     C0 F8 B0 FD | 	call	#_audio096_spin2_play
0af58     0B 00 00 FF 
0af5c     C0 E4 85 F1 | 	sub	objptr, ##5824
0af60                 | LR__0884
0af60                 | '   print "Stopped at line ";runheader(0)
0af60     00 12 06 F6 | 	mov	arg01, #0
0af64     34 56 B1 FD | 	call	#__system___getiolock_0442
0af68     FD 12 02 F6 | 	mov	arg01, result1
0af6c     F8 FC B0 FD | 	call	#__system___lockmem
0af70     53 01 00 FF 
0af74     35 15 06 F6 | 	mov	arg02, ##@LR__4702
0af78     00 12 06 F6 | 	mov	arg01, #0
0af7c     00 16 06 F6 | 	mov	arg03, #0
0af80     EC 09 B1 FD | 	call	#__system___basic_print_string
0af84     79 00 00 FF 
0af88     24 E5 05 F1 | 	add	objptr, ##62244
0af8c     F2 14 02 FB | 	rdlong	arg02, objptr
0af90     79 00 00 FF 
0af94     24 E5 85 F1 | 	sub	objptr, ##62244
0af98     00 12 06 F6 | 	mov	arg01, #0
0af9c     00 16 06 F6 | 	mov	arg03, #0
0afa0     0A 18 06 F6 | 	mov	arg04, #10
0afa4     4C 0A B1 FD | 	call	#__system___basic_print_unsigned
0afa8     00 12 06 F6 | 	mov	arg01, #0
0afac     0A 14 06 F6 | 	mov	arg02, #10
0afb0     00 16 06 F6 | 	mov	arg03, #0
0afb4     60 09 B1 FD | 	call	#__system___basic_print_char
0afb8     00 12 06 F6 | 	mov	arg01, #0
0afbc     DC 55 B1 FD | 	call	#__system___getiolock_0442
0afc0     FD 00 68 FC | 	wrlong	#0, result1
0afc4                 | LR__0885
0afc4     79 00 00 FF 
0afc8     20 E5 05 F1 | 	add	objptr, ##62240
0afcc     F2 00 68 FC | 	wrlong	#0, objptr
0afd0     79 00 00 FF 
0afd4     20 E5 85 F1 | 	sub	objptr, ##62240
0afd8                 | LR__0886
0afd8     A7 F0 03 F6 | 	mov	ptra, fp
0afdc     B2 00 A0 FD | 	call	#popregs_
0afe0                 | _do_run_ret
0afe0     2D 00 64 FD | 	ret
0afe4                 | 
0afe4                 | ' 
0afe4                 | ' sub do_defenv
0afe4                 | _do_defenv
0afe4     09 4A 05 F6 | 	mov	COUNT_, #9
0afe8     A8 00 A0 FD | 	call	#pushregs_
0afec     B4 F0 07 F1 | 	add	ptra, #180
0aff0     69 00 00 FF 
0aff4     E4 E5 05 F1 | 	add	objptr, ##54244
0aff8     F2 1E 02 FB | 	rdlong	local01, objptr
0affc     0F 1B 02 F6 | 	mov	arg05, local01
0b000     01 1A 66 F0 | 	shl	arg05, #1
0b004     0F 1B 02 F1 | 	add	arg05, local01
0b008     02 1A 66 F0 | 	shl	arg05, #2
0b00c     03 00 00 FF 
0b010     04 E4 85 F1 | 	sub	objptr, ##1540
0b014     F2 20 02 F6 | 	mov	local02, objptr
0b018     F2 1A 02 F1 | 	add	arg05, objptr
0b01c     0D 1B 02 FB | 	rdlong	arg05, arg05
0b020     10 4E 05 F1 | 	add	fp, #16
0b024     A7 1A 62 FC | 	wrlong	arg05, fp
0b028                 | ' 
0b028                 | ' numpar=compiledline(lineptr_e).result.uresult
0b028                 | ' 
0b028                 | ' 
0b028                 | ' ' defenv channel, string - tries to load from /media/h a h2 file from PC-Softsynth
0b028                 | ' ' defenv channel, l1,r1,l2,r2,l3,r3,l4,r4 - defines ADSR in Yamaha DX  style, except these are linear values
0b028                 | ' ' defsnd channel, a,d,s,r - defines ADSR attack time, decay time, sus level, release time. Sus point has to be returned - how?
0b028                 | ' 
0b028                 | ' 
0b028                 | ' if numpar<>2 andalso numpar<>5 andalso numpar<>9 then return ' and print error
0b028     10 4E 85 F1 | 	sub	fp, #16
0b02c     02 1A 0E F2 | 	cmp	arg05, #2 wz
0b030     66 00 00 FF 
0b034     E0 E5 85 F1 | 	sub	objptr, ##52704
0b038     10 4E 05 51 |  if_ne	add	fp, #16
0b03c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0b040     10 4E 85 51 |  if_ne	sub	fp, #16
0b044     05 1E 0E 52 |  if_ne	cmp	local01, #5 wz
0b048     10 4E 05 51 |  if_ne	add	fp, #16
0b04c     0F 21 02 56 |  if_ne	mov	local02, local01
0b050     10 4E 85 51 |  if_ne	sub	fp, #16
0b054     09 20 0E 52 |  if_ne	cmp	local02, #9 wz
0b058     24 0C 90 5D |  if_ne	jmp	#LR__0911
0b05c                 | ' 
0b05c                 | '  
0b05c                 | ' if numpar=2 then
0b05c     10 4E 05 F1 | 	add	fp, #16
0b060     A7 20 02 FB | 	rdlong	local02, fp
0b064     10 4E 85 F1 | 	sub	fp, #16
0b068     02 20 0E F2 | 	cmp	local02, #2 wz
0b06c     CC 03 90 5D |  if_ne	jmp	#LR__0902
0b070     84 EA BF FD | 	call	#_pop
0b074     FF 1A 02 F6 | 	mov	arg05, result3
0b078     5C 4E 05 F1 | 	add	fp, #92
0b07c     A7 FA 61 FC | 	wrlong	result1, fp
0b080     04 4E 05 F1 | 	add	fp, #4
0b084     A7 FC 61 FC | 	wrlong	result2, fp
0b088     04 4E 05 F1 | 	add	fp, #4
0b08c     A7 1A 62 FC | 	wrlong	arg05, fp
0b090                 | '   t1=pop()
0b090                 | '   if t1.result_type=result_string2 then 
0b090     64 4E 85 F1 | 	sub	fp, #100
0b094     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0b098     20 00 90 5D |  if_ne	jmp	#LR__0890
0b09c     5C 4E 05 F1 | 	add	fp, #92
0b0a0     A7 12 02 FB | 	rdlong	arg01, fp
0b0a4     5C 4E 85 F1 | 	sub	fp, #92
0b0a8     68 29 B0 FD | 	call	#_convertstring
0b0ac     68 4E 05 F1 | 	add	fp, #104
0b0b0     A7 FA 61 FC | 	wrlong	result1, fp
0b0b4     68 4E 85 F1 | 	sub	fp, #104
0b0b8     58 00 90 FD | 	jmp	#LR__0893
0b0bc                 | LR__0890
0b0bc     64 4E 05 F1 | 	add	fp, #100
0b0c0     A7 20 02 FB | 	rdlong	local02, fp
0b0c4     64 4E 85 F1 | 	sub	fp, #100
0b0c8     1F 20 0E F2 | 	cmp	local02, #31 wz
0b0cc     18 00 90 5D |  if_ne	jmp	#LR__0891
0b0d0     5C 4E 05 F1 | 	add	fp, #92
0b0d4     A7 20 02 FB | 	rdlong	local02, fp
0b0d8     0C 4E 05 F1 | 	add	fp, #12
0b0dc     A7 20 62 FC | 	wrlong	local02, fp
0b0e0     68 4E 85 F1 | 	sub	fp, #104
0b0e4     2C 00 90 FD | 	jmp	#LR__0892
0b0e8                 | LR__0891
0b0e8     53 01 00 FF 
0b0ec     46 21 06 F6 | 	mov	local02, ##@LR__4703
0b0f0     68 4E 05 F1 | 	add	fp, #104
0b0f4     A7 20 62 FC | 	wrlong	local02, fp
0b0f8     0C 4E 85 F1 | 	sub	fp, #12
0b0fc     A7 12 02 F6 | 	mov	arg01, fp
0b100     5C 4E 85 F1 | 	sub	fp, #92
0b104     40 6D B0 FD | 	call	#_converttoint
0b108     24 4E 05 F1 | 	add	fp, #36
0b10c     A7 FA 61 FC | 	wrlong	result1, fp
0b110     24 4E 85 F1 | 	sub	fp, #36
0b114                 | LR__0892
0b114                 | LR__0893
0b114                 | ' 
0b114                 | '     
0b114                 | '   if s1<>"" then 
0b114     68 4E 05 F1 | 	add	fp, #104
0b118     A7 12 02 FB | 	rdlong	arg01, fp
0b11c     68 4E 85 F1 | 	sub	fp, #104
0b120     53 01 00 FF 
0b124     47 15 06 F6 | 	mov	arg02, ##@LR__4704
0b128     64 FB B0 FD | 	call	#__system___string_cmp
0b12c     00 FA 0D F2 | 	cmp	result1, #0 wz
0b130     F8 01 90 AD |  if_e	jmp	#LR__0897
0b134     C0 E9 BF FD | 	call	#_pop
0b138     FF 1E 02 F6 | 	mov	local01, result3
0b13c     5C 4E 05 F1 | 	add	fp, #92
0b140     A7 FA 61 FC | 	wrlong	result1, fp
0b144     04 4E 05 F1 | 	add	fp, #4
0b148     A7 FC 61 FC | 	wrlong	result2, fp
0b14c     04 4E 05 F1 | 	add	fp, #4
0b150     A7 1E 62 FC | 	wrlong	local01, fp
0b154     08 4E 85 F1 | 	sub	fp, #8
0b158     A7 12 02 F6 | 	mov	arg01, fp
0b15c     5C 4E 85 F1 | 	sub	fp, #92
0b160     E4 6C B0 FD | 	call	#_converttoint
0b164     20 4E 05 F1 | 	add	fp, #32
0b168     A7 FA 61 FC | 	wrlong	result1, fp
0b16c     20 4E 85 F1 | 	sub	fp, #32
0b170                 | '     t1=pop()
0b170                 | '     channel=converttoint(t1) 
0b170                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0b170     09 12 06 F6 | 	mov	arg01, #9
0b174     58 4A B1 FD | 	call	#__system__close
0b178     09 20 06 F6 | 	mov	local02, #9
0b17c     53 01 00 FF 
0b180     48 13 06 F6 | 	mov	arg01, ##@LR__4705
0b184     68 4E 05 F1 | 	add	fp, #104
0b188     A7 14 02 FB | 	rdlong	arg02, fp
0b18c     68 4E 85 F1 | 	sub	fp, #104
0b190     30 FB B0 FD | 	call	#__system___string_concat
0b194     FD 14 02 F6 | 	mov	arg02, result1
0b198     10 13 02 F6 | 	mov	arg01, local02
0b19c     00 16 06 F6 | 	mov	arg03, #0
0b1a0     C8 06 B1 FD | 	call	#__system___basic_open_string
0b1a4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0b1a8     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0b1ac     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0b1b0     0C 4E 05 F1 | 	add	fp, #12
0b1b4     A7 FA 61 FC | 	wrlong	result1, fp
0b1b8                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0b1b8     0C 4E 85 F1 | 	sub	fp, #12
0b1bc     A0 00 90 AD |  if_e	jmp	#LR__0894
0b1c0     00 12 06 F6 | 	mov	arg01, #0
0b1c4     D4 53 B1 FD | 	call	#__system___getiolock_0442
0b1c8     FD 12 02 F6 | 	mov	arg01, result1
0b1cc     98 FA B0 FD | 	call	#__system___lockmem
0b1d0     53 01 00 FF 
0b1d4     55 15 06 F6 | 	mov	arg02, ##@LR__4706
0b1d8     00 12 06 F6 | 	mov	arg01, #0
0b1dc     00 16 06 F6 | 	mov	arg03, #0
0b1e0     8C 07 B1 FD | 	call	#__system___basic_print_string
0b1e4     0C 4E 05 F1 | 	add	fp, #12
0b1e8     A7 14 02 FB | 	rdlong	arg02, fp
0b1ec     0C 4E 85 F1 | 	sub	fp, #12
0b1f0     00 12 06 F6 | 	mov	arg01, #0
0b1f4     00 16 06 F6 | 	mov	arg03, #0
0b1f8     0A 18 06 F6 | 	mov	arg04, #10
0b1fc     B4 07 B1 FD | 	call	#__system___basic_print_integer
0b200     53 01 00 FF 
0b204     63 15 06 F6 | 	mov	arg02, ##@LR__4707
0b208     00 12 06 F6 | 	mov	arg01, #0
0b20c     00 16 06 F6 | 	mov	arg03, #0
0b210     5C 07 B1 FD | 	call	#__system___basic_print_string
0b214     00 20 06 F6 | 	mov	local02, #0
0b218     0C 4E 05 F1 | 	add	fp, #12
0b21c     A7 12 02 FB | 	rdlong	arg01, fp
0b220     0C 4E 85 F1 | 	sub	fp, #12
0b224     78 20 B1 FD | 	call	#__system___strerror
0b228     FD 14 02 F6 | 	mov	arg02, result1
0b22c     10 13 02 F6 | 	mov	arg01, local02
0b230     00 16 06 F6 | 	mov	arg03, #0
0b234     38 07 B1 FD | 	call	#__system___basic_print_string
0b238     00 12 06 F6 | 	mov	arg01, #0
0b23c     0A 14 06 F6 | 	mov	arg02, #10
0b240     00 16 06 F6 | 	mov	arg03, #0
0b244     D0 06 B1 FD | 	call	#__system___basic_print_char
0b248     00 12 06 F6 | 	mov	arg01, #0
0b24c     4C 53 B1 FD | 	call	#__system___getiolock_0442
0b250     FD 00 68 FC | 	wrlong	#0, result1
0b254     09 12 06 F6 | 	mov	arg01, #9
0b258     74 49 B1 FD | 	call	#__system__close
0b25c     20 0A 90 FD | 	jmp	#LR__0911
0b260                 | LR__0894
0b260                 | '     get #9,17,envbuf8(channel,0),256
0b260     20 4E 05 F1 | 	add	fp, #32
0b264     A7 1A 02 FB | 	rdlong	arg05, fp
0b268     20 4E 85 F1 | 	sub	fp, #32
0b26c     0D 17 02 F6 | 	mov	arg03, arg05
0b270     09 16 66 F0 | 	shl	arg03, #9
0b274     0D 17 02 F1 | 	add	arg03, arg05
0b278     2C 00 00 FF 
0b27c     CC E4 05 F1 | 	add	objptr, ##22732
0b280     F2 16 02 F1 | 	add	arg03, objptr
0b284     09 12 06 F6 | 	mov	arg01, #9
0b288     11 14 06 F6 | 	mov	arg02, #17
0b28c     00 19 06 F6 | 	mov	arg04, #256
0b290     01 1A 06 F6 | 	mov	arg05, #1
0b294     2C 00 00 FF 
0b298     CC E4 85 F1 | 	sub	objptr, ##22732
0b29c     E0 07 B1 FD | 	call	#__system___basic_get
0b2a0                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0b2a0     14 4E 05 F1 | 	add	fp, #20
0b2a4     A7 FE 69 FC | 	wrlong	#255, fp
0b2a8     14 4E 85 F1 | 	sub	fp, #20
0b2ac     2C 00 00 FF 
0b2b0     CC E4 05 F1 | 	add	objptr, ##22732
0b2b4     97 30 48 FB | 	callpa	#(@LR__0896-@LR__0895)>>2,fcache_load_ptr_
0b2b8                 | LR__0895
0b2b8     20 4E 05 F1 | 	add	fp, #32
0b2bc     A7 18 02 FB | 	rdlong	arg04, fp
0b2c0     0C 21 02 F6 | 	mov	local02, arg04
0b2c4     09 20 66 F0 | 	shl	local02, #9
0b2c8     F2 20 02 F1 | 	add	local02, objptr
0b2cc     0C 4E 85 F1 | 	sub	fp, #12
0b2d0     A7 1E 02 FB | 	rdlong	local01, fp
0b2d4     0F 1B 02 F6 | 	mov	arg05, local01
0b2d8     01 1A 66 F0 | 	shl	arg05, #1
0b2dc     10 1B 02 F1 | 	add	arg05, local02
0b2e0     0C 21 02 F6 | 	mov	local02, arg04
0b2e4     09 20 66 F0 | 	shl	local02, #9
0b2e8     0C 21 02 F1 | 	add	local02, arg04
0b2ec     F2 20 02 F1 | 	add	local02, objptr
0b2f0     10 1F 02 F1 | 	add	local01, local02
0b2f4     0F 21 C2 FA | 	rdbyte	local02, local01
0b2f8     00 21 06 FA | 	mul	local02, #256
0b2fc     0D 21 52 FC | 	wrword	local02, arg05
0b300     A7 20 02 FB | 	rdlong	local02, fp
0b304     01 20 86 F1 | 	sub	local02, #1
0b308     A7 20 62 FC | 	wrlong	local02, fp
0b30c     14 4E 85 F1 | 	sub	fp, #20
0b310     00 20 56 F2 | 	cmps	local02, #0 wc
0b314     A0 FF 9F 3D |  if_ae	jmp	#LR__0895
0b318                 | LR__0896
0b318     2C 00 00 FF 
0b31c     CC E4 85 F1 | 	sub	objptr, ##22732
0b320                 | '     close #9
0b320     09 12 06 F6 | 	mov	arg01, #9
0b324     A8 48 B1 FD | 	call	#__system__close
0b328                 | '                                                                     '  for i=0 to 255: v.putpixel(i,288-envbuf(channel,i)/400,40) : next i
0b328                 | '     return
0b328     54 09 90 FD | 	jmp	#LR__0911
0b32c                 | LR__0897
0b32c                 | '     if wptr < ($80000 - 2048) then 
0b32c     24 4E 05 F1 | 	add	fp, #36
0b330     A7 22 02 FB | 	rdlong	local03, fp
0b334     24 4E 85 F1 | 	sub	fp, #36
0b338     FC 03 00 FF 
0b33c     00 22 56 F2 | 	cmps	local03, ##522240 wc
0b340     7C 00 90 3D |  if_ae	jmp	#LR__0900
0b344                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0b344     14 4E 05 F1 | 	add	fp, #20
0b348     A7 00 68 FC | 	wrlong	#0, fp
0b34c     14 4E 85 F1 | 	sub	fp, #20
0b350     2C 00 00 FF 
0b354     CC E4 05 F1 | 	add	objptr, ##22732
0b358     97 2C 48 FB | 	callpa	#(@LR__0899-@LR__0898)>>2,fcache_load_ptr_
0b35c                 | LR__0898
0b35c     20 4E 05 F1 | 	add	fp, #32
0b360     A7 22 02 FB | 	rdlong	local03, fp
0b364     09 22 66 F0 | 	shl	local03, #9
0b368     F2 22 02 F1 | 	add	local03, objptr
0b36c     0C 4E 85 F1 | 	sub	fp, #12
0b370     A7 20 02 FB | 	rdlong	local02, fp
0b374     10 1F 02 F6 | 	mov	local01, local02
0b378     01 1E 66 F0 | 	shl	local01, #1
0b37c     11 1F 02 F1 | 	add	local01, local03
0b380     10 4E 05 F1 | 	add	fp, #16
0b384     A7 12 02 FB | 	rdlong	arg01, fp
0b388     01 20 66 F0 | 	shl	local02, #1
0b38c     10 13 02 F1 | 	add	arg01, local02
0b390     09 FB E1 FA | 	rdword	result1, arg01
0b394     0F FB 51 FC | 	wrword	result1, local01
0b398     10 4E 85 F1 | 	sub	fp, #16
0b39c     A7 22 02 FB | 	rdlong	local03, fp
0b3a0     01 22 06 F1 | 	add	local03, #1
0b3a4     A7 22 62 FC | 	wrlong	local03, fp
0b3a8     14 4E 85 F1 | 	sub	fp, #20
0b3ac     00 23 56 F2 | 	cmps	local03, #256 wc
0b3b0     A8 FF 9F CD |  if_b	jmp	#LR__0898
0b3b4                 | LR__0899
0b3b4     2C 00 00 FF 
0b3b8     CC E4 85 F1 | 	sub	objptr, ##22732
0b3bc     C0 08 90 FD | 	jmp	#LR__0911
0b3c0                 | LR__0900
0b3c0                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0b3c0     14 4E 05 F1 | 	add	fp, #20
0b3c4     A7 00 68 FC | 	wrlong	#0, fp
0b3c8     14 4E 85 F1 | 	sub	fp, #20
0b3cc                 | LR__0901
0b3cc     20 4E 05 F1 | 	add	fp, #32
0b3d0     A7 22 02 FB | 	rdlong	local03, fp
0b3d4     09 22 66 F0 | 	shl	local03, #9
0b3d8     2C 00 00 FF 
0b3dc     CC E4 05 F1 | 	add	objptr, ##22732
0b3e0     F2 22 02 F1 | 	add	local03, objptr
0b3e4     0C 4E 85 F1 | 	sub	fp, #12
0b3e8     A7 20 02 FB | 	rdlong	local02, fp
0b3ec     10 1F 02 F6 | 	mov	local01, local02
0b3f0     01 1E 66 F0 | 	shl	local01, #1
0b3f4     11 1F 02 F1 | 	add	local01, local03
0b3f8     10 4E 05 F1 | 	add	fp, #16
0b3fc     A7 12 02 FB | 	rdlong	arg01, fp
0b400     24 4E 85 F1 | 	sub	fp, #36
0b404     01 20 66 F0 | 	shl	local02, #1
0b408     10 13 02 F1 | 	add	arg01, local02
0b40c     2C 00 00 FF 
0b410     CC E4 85 F1 | 	sub	objptr, ##22732
0b414     54 C4 B0 FD | 	call	#_psdpeek
0b418     0F FB 51 FC | 	wrword	result1, local01
0b41c     14 4E 05 F1 | 	add	fp, #20
0b420     A7 24 02 FB | 	rdlong	local04, fp
0b424     01 24 06 F1 | 	add	local04, #1
0b428     A7 24 62 FC | 	wrlong	local04, fp
0b42c     14 4E 85 F1 | 	sub	fp, #20
0b430     00 25 56 F2 | 	cmps	local04, #256 wc
0b434     94 FF 9F CD |  if_b	jmp	#LR__0901
0b438                 | '     return   
0b438     44 08 90 FD | 	jmp	#LR__0911
0b43c                 | LR__0902
0b43c                 | ' 
0b43c                 | ' if numpar=5 then    'simple adsr
0b43c     10 4E 05 F1 | 	add	fp, #16
0b440     A7 22 02 FB | 	rdlong	local03, fp
0b444     10 4E 85 F1 | 	sub	fp, #16
0b448     05 22 0E F2 | 	cmp	local03, #5 wz
0b44c     30 08 90 5D |  if_ne	jmp	#LR__0910
0b450     A4 E6 BF FD | 	call	#_pop
0b454     FF 1E 02 F6 | 	mov	local01, result3
0b458     5C 4E 05 F1 | 	add	fp, #92
0b45c     A7 FA 61 FC | 	wrlong	result1, fp
0b460     04 4E 05 F1 | 	add	fp, #4
0b464     A7 FC 61 FC | 	wrlong	result2, fp
0b468     04 4E 05 F1 | 	add	fp, #4
0b46c     A7 1E 62 FC | 	wrlong	local01, fp
0b470     08 4E 85 F1 | 	sub	fp, #8
0b474     A7 12 02 F6 | 	mov	arg01, fp
0b478     5C 4E 85 F1 | 	sub	fp, #92
0b47c     74 6A B0 FD | 	call	#_converttofloat
0b480     FD 22 02 F6 | 	mov	local03, result1
0b484     34 4E 05 F1 | 	add	fp, #52
0b488     A7 22 62 FC | 	wrlong	local03, fp
0b48c     34 4E 85 F1 | 	sub	fp, #52
0b490     64 E6 BF FD | 	call	#_pop
0b494     FF 1E 02 F6 | 	mov	local01, result3
0b498     5C 4E 05 F1 | 	add	fp, #92
0b49c     A7 FA 61 FC | 	wrlong	result1, fp
0b4a0     04 4E 05 F1 | 	add	fp, #4
0b4a4     A7 FC 61 FC | 	wrlong	result2, fp
0b4a8     04 4E 05 F1 | 	add	fp, #4
0b4ac     A7 1E 62 FC | 	wrlong	local01, fp
0b4b0     08 4E 85 F1 | 	sub	fp, #8
0b4b4     A7 12 02 F6 | 	mov	arg01, fp
0b4b8     5C 4E 85 F1 | 	sub	fp, #92
0b4bc     34 6A B0 FD | 	call	#_converttofloat
0b4c0     FD 22 02 F6 | 	mov	local03, result1
0b4c4     30 4E 05 F1 | 	add	fp, #48
0b4c8     A7 22 62 FC | 	wrlong	local03, fp
0b4cc     30 4E 85 F1 | 	sub	fp, #48
0b4d0     24 E6 BF FD | 	call	#_pop
0b4d4     FF 1E 02 F6 | 	mov	local01, result3
0b4d8     5C 4E 05 F1 | 	add	fp, #92
0b4dc     A7 FA 61 FC | 	wrlong	result1, fp
0b4e0     04 4E 05 F1 | 	add	fp, #4
0b4e4     A7 FC 61 FC | 	wrlong	result2, fp
0b4e8     04 4E 05 F1 | 	add	fp, #4
0b4ec     A7 1E 62 FC | 	wrlong	local01, fp
0b4f0     08 4E 85 F1 | 	sub	fp, #8
0b4f4     A7 12 02 F6 | 	mov	arg01, fp
0b4f8     5C 4E 85 F1 | 	sub	fp, #92
0b4fc     F4 69 B0 FD | 	call	#_converttofloat
0b500     FD 22 02 F6 | 	mov	local03, result1
0b504     2C 4E 05 F1 | 	add	fp, #44
0b508     A7 22 62 FC | 	wrlong	local03, fp
0b50c     2C 4E 85 F1 | 	sub	fp, #44
0b510     E4 E5 BF FD | 	call	#_pop
0b514     FF 1E 02 F6 | 	mov	local01, result3
0b518     5C 4E 05 F1 | 	add	fp, #92
0b51c     A7 FA 61 FC | 	wrlong	result1, fp
0b520     04 4E 05 F1 | 	add	fp, #4
0b524     A7 FC 61 FC | 	wrlong	result2, fp
0b528     04 4E 05 F1 | 	add	fp, #4
0b52c     A7 1E 62 FC | 	wrlong	local01, fp
0b530     08 4E 85 F1 | 	sub	fp, #8
0b534     A7 12 02 F6 | 	mov	arg01, fp
0b538     5C 4E 85 F1 | 	sub	fp, #92
0b53c     B4 69 B0 FD | 	call	#_converttofloat
0b540     FD 22 02 F6 | 	mov	local03, result1
0b544     28 4E 05 F1 | 	add	fp, #40
0b548     A7 22 62 FC | 	wrlong	local03, fp
0b54c     28 4E 85 F1 | 	sub	fp, #40
0b550     A4 E5 BF FD | 	call	#_pop
0b554     FF 1E 02 F6 | 	mov	local01, result3
0b558     5C 4E 05 F1 | 	add	fp, #92
0b55c     A7 FA 61 FC | 	wrlong	result1, fp
0b560     04 4E 05 F1 | 	add	fp, #4
0b564     A7 FC 61 FC | 	wrlong	result2, fp
0b568     04 4E 05 F1 | 	add	fp, #4
0b56c     A7 1E 62 FC | 	wrlong	local01, fp
0b570     08 4E 85 F1 | 	sub	fp, #8
0b574     A7 12 02 F6 | 	mov	arg01, fp
0b578     5C 4E 85 F1 | 	sub	fp, #92
0b57c     C8 68 B0 FD | 	call	#_converttoint
0b580     20 4E 05 F1 | 	add	fp, #32
0b584     A7 FA 61 FC | 	wrlong	result1, fp
0b588                 | ' 
0b588                 | '   t1=pop() : rr=converttofloat(t1)
0b588                 | '   t1=pop() : ss=converttofloat(t1) 
0b588                 | '   t1=pop() : dd=converttofloat(t1)
0b588                 | '   t1=pop() : aa=converttofloat(t1)
0b588                 | '   t1=pop() : channel=converttoint(t1)
0b588                 | '   if ss<0.0 then ss=0.0 
0b588     10 4E 05 F1 | 	add	fp, #16
0b58c     A7 12 02 FB | 	rdlong	arg01, fp
0b590     30 4E 85 F1 | 	sub	fp, #48
0b594     00 14 06 F6 | 	mov	arg02, #0
0b598     01 16 06 F6 | 	mov	arg03, #1
0b59c     20 26 B1 FD | 	call	#__system___float_cmp
0b5a0     00 FA 55 F2 | 	cmps	result1, #0 wc
0b5a4     30 4E 05 C1 |  if_b	add	fp, #48
0b5a8     A7 00 68 CC |  if_b	wrlong	#0, fp
0b5ac     30 4E 85 C1 |  if_b	sub	fp, #48
0b5b0                 | '   if ss>1.0 then ss=1.0
0b5b0     30 4E 05 F1 | 	add	fp, #48
0b5b4     A7 12 02 FB | 	rdlong	arg01, fp
0b5b8     30 4E 85 F1 | 	sub	fp, #48
0b5bc     00 C0 1F FF 
0b5c0     00 14 06 F6 | 	mov	arg02, ##1065353216
0b5c4     01 16 66 F6 | 	neg	arg03, #1
0b5c8     F4 25 B1 FD | 	call	#__system___float_cmp
0b5cc     01 FA 55 F2 | 	cmps	result1, #1 wc
0b5d0     30 4E 05 31 |  if_ae	add	fp, #48
0b5d4     00 C0 9F 3F 
0b5d8     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
0b5dc     30 4E 85 31 |  if_ae	sub	fp, #48
0b5e0     28 4E 05 F1 | 	add	fp, #40
0b5e4     A7 12 02 FB | 	rdlong	arg01, fp
0b5e8     04 4E 05 F1 | 	add	fp, #4
0b5ec     A7 14 02 FB | 	rdlong	arg02, fp
0b5f0     2C 4E 85 F1 | 	sub	fp, #44
0b5f4     C4 1D B1 FD | 	call	#__system___float_add
0b5f8     FD 12 02 F6 | 	mov	arg01, result1
0b5fc     34 4E 05 F1 | 	add	fp, #52
0b600     A7 14 02 FB | 	rdlong	arg02, fp
0b604     34 4E 85 F1 | 	sub	fp, #52
0b608     B0 1D B1 FD | 	call	#__system___float_add
0b60c     4C 4E 05 F1 | 	add	fp, #76
0b610     A7 FA 61 FC | 	wrlong	result1, fp
0b614     FD 14 02 F6 | 	mov	arg02, result1
0b618     4C 4E 85 F1 | 	sub	fp, #76
0b61c     00 C0 21 FF 
0b620     00 12 06 F6 | 	mov	arg01, ##1132462080
0b624     68 23 B1 FD | 	call	#__system___float_div
0b628     50 4E 05 F1 | 	add	fp, #80
0b62c     A7 FA 61 FC | 	wrlong	result1, fp
0b630     28 4E 85 F1 | 	sub	fp, #40
0b634     A7 12 02 FB | 	rdlong	arg01, fp
0b638     FD 14 02 F6 | 	mov	arg02, result1
0b63c     28 4E 85 F1 | 	sub	fp, #40
0b640     48 21 B1 FD | 	call	#__system___float_mul
0b644     FD 12 02 F6 | 	mov	arg01, result1
0b648     01 14 06 F6 | 	mov	arg02, #1
0b64c     04 26 B1 FD | 	call	#__system___float_tointeger
0b650     A7 FA 61 FC | 	wrlong	result1, fp
0b654     2C 4E 05 F1 | 	add	fp, #44
0b658     A7 12 02 FB | 	rdlong	arg01, fp
0b65c     24 4E 05 F1 | 	add	fp, #36
0b660     A7 14 02 FB | 	rdlong	arg02, fp
0b664     50 4E 85 F1 | 	sub	fp, #80
0b668     20 21 B1 FD | 	call	#__system___float_mul
0b66c     FD 12 02 F6 | 	mov	arg01, result1
0b670     01 14 06 F6 | 	mov	arg02, #1
0b674     DC 25 B1 FD | 	call	#__system___float_tointeger
0b678     04 4E 05 F1 | 	add	fp, #4
0b67c     A7 FA 61 FC | 	wrlong	result1, fp
0b680     30 4E 05 F1 | 	add	fp, #48
0b684     A7 12 02 FB | 	rdlong	arg01, fp
0b688     1C 4E 05 F1 | 	add	fp, #28
0b68c     A7 14 02 FB | 	rdlong	arg02, fp
0b690     50 4E 85 F1 | 	sub	fp, #80
0b694     F4 20 B1 FD | 	call	#__system___float_mul
0b698     FD 12 02 F6 | 	mov	arg01, result1
0b69c     01 14 06 F6 | 	mov	arg02, #1
0b6a0     B0 25 B1 FD | 	call	#__system___float_tointeger
0b6a4     FD 22 02 F6 | 	mov	local03, result1
0b6a8     0C 4E 05 F1 | 	add	fp, #12
0b6ac     A7 22 62 FC | 	wrlong	local03, fp
0b6b0     0C 4E 85 F1 | 	sub	fp, #12
0b6b4                 | '   fulltime=aa+dd+rr
0b6b4                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit) :print a,d,r,a+d+r
0b6b4     00 12 06 F6 | 	mov	arg01, #0
0b6b8     E0 4E B1 FD | 	call	#__system___getiolock_0442
0b6bc     FD 12 02 F6 | 	mov	arg01, result1
0b6c0     A4 F5 B0 FD | 	call	#__system___lockmem
0b6c4     A7 14 02 FB | 	rdlong	arg02, fp
0b6c8     00 12 06 F6 | 	mov	arg01, #0
0b6cc     00 16 06 F6 | 	mov	arg03, #0
0b6d0     0A 18 06 F6 | 	mov	arg04, #10
0b6d4     DC 02 B1 FD | 	call	#__system___basic_print_integer
0b6d8     00 12 06 F6 | 	mov	arg01, #0
0b6dc     09 14 06 F6 | 	mov	arg02, #9
0b6e0     00 16 06 F6 | 	mov	arg03, #0
0b6e4     30 02 B1 FD | 	call	#__system___basic_print_char
0b6e8     04 4E 05 F1 | 	add	fp, #4
0b6ec     A7 14 02 FB | 	rdlong	arg02, fp
0b6f0     04 4E 85 F1 | 	sub	fp, #4
0b6f4     00 12 06 F6 | 	mov	arg01, #0
0b6f8     00 16 06 F6 | 	mov	arg03, #0
0b6fc     0A 18 06 F6 | 	mov	arg04, #10
0b700     B0 02 B1 FD | 	call	#__system___basic_print_integer
0b704     00 12 06 F6 | 	mov	arg01, #0
0b708     09 14 06 F6 | 	mov	arg02, #9
0b70c     00 16 06 F6 | 	mov	arg03, #0
0b710     04 02 B1 FD | 	call	#__system___basic_print_char
0b714     0C 4E 05 F1 | 	add	fp, #12
0b718     A7 14 02 FB | 	rdlong	arg02, fp
0b71c     0C 4E 85 F1 | 	sub	fp, #12
0b720     00 12 06 F6 | 	mov	arg01, #0
0b724     00 16 06 F6 | 	mov	arg03, #0
0b728     0A 18 06 F6 | 	mov	arg04, #10
0b72c     84 02 B1 FD | 	call	#__system___basic_print_integer
0b730     00 12 06 F6 | 	mov	arg01, #0
0b734     09 14 06 F6 | 	mov	arg02, #9
0b738     00 16 06 F6 | 	mov	arg03, #0
0b73c     D8 01 B1 FD | 	call	#__system___basic_print_char
0b740     A7 14 02 FB | 	rdlong	arg02, fp
0b744     04 4E 05 F1 | 	add	fp, #4
0b748     A7 22 02 FB | 	rdlong	local03, fp
0b74c     11 15 02 F1 | 	add	arg02, local03
0b750     08 4E 05 F1 | 	add	fp, #8
0b754     A7 22 02 FB | 	rdlong	local03, fp
0b758     0C 4E 85 F1 | 	sub	fp, #12
0b75c     11 15 02 F1 | 	add	arg02, local03
0b760     00 12 06 F6 | 	mov	arg01, #0
0b764     00 16 06 F6 | 	mov	arg03, #0
0b768     0A 18 06 F6 | 	mov	arg04, #10
0b76c     44 02 B1 FD | 	call	#__system___basic_print_integer
0b770     00 12 06 F6 | 	mov	arg01, #0
0b774     0A 14 06 F6 | 	mov	arg02, #10
0b778     00 16 06 F6 | 	mov	arg03, #0
0b77c     98 01 B1 FD | 	call	#__system___basic_print_char
0b780     00 12 06 F6 | 	mov	arg01, #0
0b784     14 4E B1 FD | 	call	#__system___getiolock_0442
0b788     FD 00 68 FC | 	wrlong	#0, result1
0b78c     F8 BF 23 FF 
0b790     00 22 06 F6 | 	mov	local03, ##1199566848
0b794     A7 12 02 FB | 	rdlong	arg01, fp
0b798     09 13 52 F6 | 	abs	arg01, arg01 wc
0b79c     1F 26 C6 C9 |  if_b	decod	local05, #31
0b7a0     00 26 06 36 |  if_ae	mov	local05, #0
0b7a4     E0 1B B1 FD | 	call	#__system___float_fromuns
0b7a8     13 FB 61 F5 | 	xor	result1, local05
0b7ac     FD 14 02 F6 | 	mov	arg02, result1
0b7b0     11 13 02 F6 | 	mov	arg01, local03
0b7b4     D8 21 B1 FD | 	call	#__system___float_div
0b7b8     54 4E 05 F1 | 	add	fp, #84
0b7bc     A7 FA 61 FC | 	wrlong	result1, fp
0b7c0     F8 BF 23 FF 
0b7c4     00 22 06 F6 | 	mov	local03, ##1199566848
0b7c8     24 4E 85 F1 | 	sub	fp, #36
0b7cc     A7 14 02 FB | 	rdlong	arg02, fp
0b7d0     30 4E 85 F1 | 	sub	fp, #48
0b7d4     F8 BF 23 FF 
0b7d8     00 12 06 F6 | 	mov	arg01, ##1199566848
0b7dc     AC 1F B1 FD | 	call	#__system___float_mul
0b7e0     FD 14 02 F6 | 	mov	arg02, result1
0b7e4     11 13 02 F6 | 	mov	arg01, local03
0b7e8     1F 14 E6 F4 | 	bitnot	arg02, #31
0b7ec     CC 1B B1 FD | 	call	#__system___float_add
0b7f0     FD 22 02 F6 | 	mov	local03, result1
0b7f4     04 4E 05 F1 | 	add	fp, #4
0b7f8     A7 12 02 FB | 	rdlong	arg01, fp
0b7fc     04 4E 85 F1 | 	sub	fp, #4
0b800     09 13 52 F6 | 	abs	arg01, arg01 wc
0b804     1F 26 C6 C9 |  if_b	decod	local05, #31
0b808     00 26 06 36 |  if_ae	mov	local05, #0
0b80c     78 1B B1 FD | 	call	#__system___float_fromuns
0b810     13 FB 61 F5 | 	xor	result1, local05
0b814     FD 14 02 F6 | 	mov	arg02, result1
0b818     11 13 02 F6 | 	mov	arg01, local03
0b81c     70 21 B1 FD | 	call	#__system___float_div
0b820     2C 4E 05 F1 | 	add	fp, #44
0b824     A7 FA 61 FC | 	wrlong	result1, fp
0b828     04 4E 05 F1 | 	add	fp, #4
0b82c     A7 14 02 FB | 	rdlong	arg02, fp
0b830     30 4E 85 F1 | 	sub	fp, #48
0b834     F8 BF 23 FF 
0b838     00 12 06 F6 | 	mov	arg01, ##1199566848
0b83c     4C 1F B1 FD | 	call	#__system___float_mul
0b840     FD 22 02 F6 | 	mov	local03, result1
0b844     0C 4E 05 F1 | 	add	fp, #12
0b848     A7 12 02 FB | 	rdlong	arg01, fp
0b84c     0C 4E 85 F1 | 	sub	fp, #12
0b850     09 13 52 F6 | 	abs	arg01, arg01 wc
0b854     1F 26 C6 C9 |  if_b	decod	local05, #31
0b858     00 26 06 36 |  if_ae	mov	local05, #0
0b85c     28 1B B1 FD | 	call	#__system___float_fromuns
0b860     13 FB 61 F5 | 	xor	result1, local05
0b864     FD 14 02 F6 | 	mov	arg02, result1
0b868     11 13 02 F6 | 	mov	arg01, local03
0b86c     20 21 B1 FD | 	call	#__system___float_div
0b870     FD 22 02 F6 | 	mov	local03, result1
0b874     58 4E 05 F1 | 	add	fp, #88
0b878     A7 22 62 FC | 	wrlong	local03, fp
0b87c     58 4E 85 F1 | 	sub	fp, #88
0b880                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r : print da,dd,dr
0b880     00 12 06 F6 | 	mov	arg01, #0
0b884     14 4D B1 FD | 	call	#__system___getiolock_0442
0b888     FD 12 02 F6 | 	mov	arg01, result1
0b88c     D8 F3 B0 FD | 	call	#__system___lockmem
0b890     54 4E 05 F1 | 	add	fp, #84
0b894     A7 14 02 FB | 	rdlong	arg02, fp
0b898     54 4E 85 F1 | 	sub	fp, #84
0b89c     00 12 06 F6 | 	mov	arg01, #0
0b8a0     00 16 06 F6 | 	mov	arg03, #0
0b8a4     23 18 06 F6 | 	mov	arg04, #35
0b8a8     F8 24 B1 FD | 	call	#__system___basic_print_float
0b8ac     00 12 06 F6 | 	mov	arg01, #0
0b8b0     09 14 06 F6 | 	mov	arg02, #9
0b8b4     00 16 06 F6 | 	mov	arg03, #0
0b8b8     5C 00 B1 FD | 	call	#__system___basic_print_char
0b8bc     2C 4E 05 F1 | 	add	fp, #44
0b8c0     A7 14 02 FB | 	rdlong	arg02, fp
0b8c4     2C 4E 85 F1 | 	sub	fp, #44
0b8c8     00 12 06 F6 | 	mov	arg01, #0
0b8cc     00 16 06 F6 | 	mov	arg03, #0
0b8d0     23 18 06 F6 | 	mov	arg04, #35
0b8d4     CC 24 B1 FD | 	call	#__system___basic_print_float
0b8d8     00 12 06 F6 | 	mov	arg01, #0
0b8dc     09 14 06 F6 | 	mov	arg02, #9
0b8e0     00 16 06 F6 | 	mov	arg03, #0
0b8e4     30 00 B1 FD | 	call	#__system___basic_print_char
0b8e8     58 4E 05 F1 | 	add	fp, #88
0b8ec     A7 14 02 FB | 	rdlong	arg02, fp
0b8f0     58 4E 85 F1 | 	sub	fp, #88
0b8f4     00 12 06 F6 | 	mov	arg01, #0
0b8f8     00 16 06 F6 | 	mov	arg03, #0
0b8fc     23 18 06 F6 | 	mov	arg04, #35
0b900     A0 24 B1 FD | 	call	#__system___basic_print_float
0b904     00 12 06 F6 | 	mov	arg01, #0
0b908     0A 14 06 F6 | 	mov	arg02, #10
0b90c     00 16 06 F6 | 	mov	arg03, #0
0b910     04 00 B1 FD | 	call	#__system___basic_print_char
0b914     00 12 06 F6 | 	mov	arg01, #0
0b918     80 4C B1 FD | 	call	#__system___getiolock_0442
0b91c     FD 00 68 FC | 	wrlong	#0, result1
0b920     20 4E 05 F1 | 	add	fp, #32
0b924     A7 28 02 FB | 	rdlong	local06, fp
0b928     20 4E 85 F1 | 	sub	fp, #32
0b92c     01 28 66 F0 | 	shl	local06, #1
0b930     7A 00 00 FF 
0b934     F8 E5 05 F1 | 	add	objptr, ##62968
0b938     F2 28 02 F1 | 	add	local06, objptr
0b93c     A7 2A 02 FB | 	rdlong	local07, fp
0b940     04 4E 05 F1 | 	add	fp, #4
0b944     A7 22 02 FB | 	rdlong	local03, fp
0b948     11 2B 02 F1 | 	add	local07, local03
0b94c     14 2B 52 FC | 	wrword	local07, local06
0b950     24 4E 05 F1 | 	add	fp, #36
0b954     A7 00 68 FC | 	wrlong	#0, fp
0b958                 | '   suspoints(channel)=a+d
0b958                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
0b958     14 4E 85 F1 | 	sub	fp, #20
0b95c     A7 00 68 FC | 	wrlong	#0, fp
0b960     14 4E 85 F1 | 	sub	fp, #20
0b964     A7 2C 02 FB | 	rdlong	local08, fp
0b968     7A 00 00 FF 
0b96c     F8 E5 85 F1 | 	sub	objptr, ##62968
0b970                 | LR__0903
0b970     14 4E 05 F1 | 	add	fp, #20
0b974     A7 22 02 FB | 	rdlong	local03, fp
0b978     14 4E 85 F1 | 	sub	fp, #20
0b97c     16 23 52 F2 | 	cmps	local03, local08 wc
0b980     80 00 90 3D |  if_ae	jmp	#LR__0904
0b984     20 4E 05 F1 | 	add	fp, #32
0b988     A7 28 02 FB | 	rdlong	local06, fp
0b98c     09 28 66 F0 | 	shl	local06, #9
0b990     2C 00 00 FF 
0b994     CC E4 05 F1 | 	add	objptr, ##22732
0b998     F2 28 02 F1 | 	add	local06, objptr
0b99c     0C 4E 85 F1 | 	sub	fp, #12
0b9a0     A7 22 02 FB | 	rdlong	local03, fp
0b9a4     01 22 66 F0 | 	shl	local03, #1
0b9a8     14 23 02 F1 | 	add	local03, local06
0b9ac     14 4E 05 F1 | 	add	fp, #20
0b9b0     A7 12 02 FB | 	rdlong	arg01, fp
0b9b4     28 4E 85 F1 | 	sub	fp, #40
0b9b8     2C 00 00 FF 
0b9bc     CC E4 85 F1 | 	sub	objptr, ##22732
0b9c0     01 14 06 F6 | 	mov	arg02, #1
0b9c4     8C 22 B1 FD | 	call	#__system___float_tointeger
0b9c8     11 FB 51 FC | 	wrword	result1, local03
0b9cc     28 4E 05 F1 | 	add	fp, #40
0b9d0     A7 12 02 FB | 	rdlong	arg01, fp
0b9d4     2C 4E 05 F1 | 	add	fp, #44
0b9d8     A7 14 02 FB | 	rdlong	arg02, fp
0b9dc     54 4E 85 F1 | 	sub	fp, #84
0b9e0     D8 19 B1 FD | 	call	#__system___float_add
0b9e4     28 4E 05 F1 | 	add	fp, #40
0b9e8     A7 FA 61 FC | 	wrlong	result1, fp
0b9ec     14 4E 85 F1 | 	sub	fp, #20
0b9f0     A7 20 02 FB | 	rdlong	local02, fp
0b9f4     01 20 06 F1 | 	add	local02, #1
0b9f8     A7 20 62 FC | 	wrlong	local02, fp
0b9fc     14 4E 85 F1 | 	sub	fp, #20
0ba00     6C FF 9F FD | 	jmp	#LR__0903
0ba04                 | LR__0904
0ba04                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
0ba04     A7 22 02 FB | 	rdlong	local03, fp
0ba08     14 4E 05 F1 | 	add	fp, #20
0ba0c     A7 22 62 FC | 	wrlong	local03, fp
0ba10     14 4E 85 F1 | 	sub	fp, #20
0ba14     A7 2E 02 FB | 	rdlong	local09, fp
0ba18     04 4E 05 F1 | 	add	fp, #4
0ba1c     A7 22 02 FB | 	rdlong	local03, fp
0ba20     04 4E 85 F1 | 	sub	fp, #4
0ba24     11 2F 02 F1 | 	add	local09, local03
0ba28                 | LR__0905
0ba28     14 4E 05 F1 | 	add	fp, #20
0ba2c     A7 22 02 FB | 	rdlong	local03, fp
0ba30     14 4E 85 F1 | 	sub	fp, #20
0ba34     17 23 52 F2 | 	cmps	local03, local09 wc
0ba38     A8 00 90 3D |  if_ae	jmp	#LR__0906
0ba3c     20 4E 05 F1 | 	add	fp, #32
0ba40     A7 2C 02 FB | 	rdlong	local08, fp
0ba44     09 2C 66 F0 | 	shl	local08, #9
0ba48     2C 00 00 FF 
0ba4c     CC E4 05 F1 | 	add	objptr, ##22732
0ba50     F2 2C 02 F1 | 	add	local08, objptr
0ba54     0C 4E 85 F1 | 	sub	fp, #12
0ba58     A7 2A 02 FB | 	rdlong	local07, fp
0ba5c     01 2A 66 F0 | 	shl	local07, #1
0ba60     16 2B 02 F1 | 	add	local07, local08
0ba64     14 4E 05 F1 | 	add	fp, #20
0ba68     A7 12 02 FB | 	rdlong	arg01, fp
0ba6c     28 4E 85 F1 | 	sub	fp, #40
0ba70     2C 00 00 FF 
0ba74     CC E4 85 F1 | 	sub	objptr, ##22732
0ba78     01 14 06 F6 | 	mov	arg02, #1
0ba7c     D4 21 B1 FD | 	call	#__system___float_tointeger
0ba80     15 FB 51 FC | 	wrword	result1, local07
0ba84     28 4E 05 F1 | 	add	fp, #40
0ba88     A7 12 02 FB | 	rdlong	arg01, fp
0ba8c     04 4E 05 F1 | 	add	fp, #4
0ba90     A7 14 02 FB | 	rdlong	arg02, fp
0ba94     2C 4E 85 F1 | 	sub	fp, #44
0ba98     1F 14 E6 F4 | 	bitnot	arg02, #31
0ba9c     1C 19 B1 FD | 	call	#__system___float_add
0baa0     28 4E 05 F1 | 	add	fp, #40
0baa4     A7 FA 61 FC | 	wrlong	result1, fp
0baa8     28 4E 85 F1 | 	sub	fp, #40
0baac     FD 12 02 F6 | 	mov	arg01, result1
0bab0     00 14 06 F6 | 	mov	arg02, #0
0bab4     01 16 06 F6 | 	mov	arg03, #1
0bab8     04 21 B1 FD | 	call	#__system___float_cmp
0babc     00 FA 55 F2 | 	cmps	result1, #0 wc
0bac0     28 4E 05 C1 |  if_b	add	fp, #40
0bac4     A7 00 68 CC |  if_b	wrlong	#0, fp
0bac8     28 4E 85 C1 |  if_b	sub	fp, #40
0bacc     14 4E 05 F1 | 	add	fp, #20
0bad0     A7 20 02 FB | 	rdlong	local02, fp
0bad4     01 20 06 F1 | 	add	local02, #1
0bad8     A7 20 62 FC | 	wrlong	local02, fp
0badc     14 4E 85 F1 | 	sub	fp, #20
0bae0     44 FF 9F FD | 	jmp	#LR__0905
0bae4                 | LR__0906
0bae4                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
0bae4     A7 22 02 FB | 	rdlong	local03, fp
0bae8     04 4E 05 F1 | 	add	fp, #4
0baec     A7 2E 02 FB | 	rdlong	local09, fp
0baf0     17 23 02 F1 | 	add	local03, local09
0baf4     10 4E 05 F1 | 	add	fp, #16
0baf8     A7 22 62 FC | 	wrlong	local03, fp
0bafc     14 4E 85 F1 | 	sub	fp, #20
0bb00                 | LR__0907
0bb00     14 4E 05 F1 | 	add	fp, #20
0bb04     A7 28 02 FB | 	rdlong	local06, fp
0bb08     14 4E 85 F1 | 	sub	fp, #20
0bb0c     00 29 56 F2 | 	cmps	local06, #256 wc
0bb10     A8 00 90 3D |  if_ae	jmp	#LR__0908
0bb14     20 4E 05 F1 | 	add	fp, #32
0bb18     A7 2E 02 FB | 	rdlong	local09, fp
0bb1c     09 2E 66 F0 | 	shl	local09, #9
0bb20     2C 00 00 FF 
0bb24     CC E4 05 F1 | 	add	objptr, ##22732
0bb28     F2 2E 02 F1 | 	add	local09, objptr
0bb2c     0C 4E 85 F1 | 	sub	fp, #12
0bb30     A7 2C 02 FB | 	rdlong	local08, fp
0bb34     01 2C 66 F0 | 	shl	local08, #1
0bb38     17 2D 02 F1 | 	add	local08, local09
0bb3c     14 4E 05 F1 | 	add	fp, #20
0bb40     A7 12 02 FB | 	rdlong	arg01, fp
0bb44     28 4E 85 F1 | 	sub	fp, #40
0bb48     2C 00 00 FF 
0bb4c     CC E4 85 F1 | 	sub	objptr, ##22732
0bb50     01 14 06 F6 | 	mov	arg02, #1
0bb54     FC 20 B1 FD | 	call	#__system___float_tointeger
0bb58     16 FB 51 FC | 	wrword	result1, local08
0bb5c     28 4E 05 F1 | 	add	fp, #40
0bb60     A7 12 02 FB | 	rdlong	arg01, fp
0bb64     30 4E 05 F1 | 	add	fp, #48
0bb68     A7 14 02 FB | 	rdlong	arg02, fp
0bb6c     58 4E 85 F1 | 	sub	fp, #88
0bb70     1F 14 E6 F4 | 	bitnot	arg02, #31
0bb74     44 18 B1 FD | 	call	#__system___float_add
0bb78     28 4E 05 F1 | 	add	fp, #40
0bb7c     A7 FA 61 FC | 	wrlong	result1, fp
0bb80     28 4E 85 F1 | 	sub	fp, #40
0bb84     FD 12 02 F6 | 	mov	arg01, result1
0bb88     00 14 06 F6 | 	mov	arg02, #0
0bb8c     01 16 06 F6 | 	mov	arg03, #1
0bb90     2C 20 B1 FD | 	call	#__system___float_cmp
0bb94     00 FA 55 F2 | 	cmps	result1, #0 wc
0bb98     28 4E 05 C1 |  if_b	add	fp, #40
0bb9c     A7 00 68 CC |  if_b	wrlong	#0, fp
0bba0     28 4E 85 C1 |  if_b	sub	fp, #40
0bba4     14 4E 05 F1 | 	add	fp, #20
0bba8     A7 2E 02 FB | 	rdlong	local09, fp
0bbac     01 2E 06 F1 | 	add	local09, #1
0bbb0     A7 2E 62 FC | 	wrlong	local09, fp
0bbb4     14 4E 85 F1 | 	sub	fp, #20
0bbb8     44 FF 9F FD | 	jmp	#LR__0907
0bbbc                 | LR__0908
0bbbc     20 4E 05 F1 | 	add	fp, #32
0bbc0     A7 28 02 FB | 	rdlong	local06, fp
0bbc4     09 28 66 F0 | 	shl	local06, #9
0bbc8     2C 00 00 FF 
0bbcc     CC E4 05 F1 | 	add	objptr, ##22732
0bbd0     F2 28 02 F1 | 	add	local06, objptr
0bbd4     FE 29 06 F1 | 	add	local06, #510
0bbd8     14 01 58 FC | 	wrword	#0, local06
0bbdc                 | '   envbuf(channel,255)=0
0bbdc                 | '   for i=0 to 255 : print envbuf(channel,i), : next i
0bbdc     0C 4E 85 F1 | 	sub	fp, #12
0bbe0     A7 00 68 FC | 	wrlong	#0, fp
0bbe4     14 4E 85 F1 | 	sub	fp, #20
0bbe8     2C 00 00 FF 
0bbec     CC E4 85 F1 | 	sub	objptr, ##22732
0bbf0                 | LR__0909
0bbf0     00 12 06 F6 | 	mov	arg01, #0
0bbf4     A4 49 B1 FD | 	call	#__system___getiolock_0442
0bbf8     FD 12 02 F6 | 	mov	arg01, result1
0bbfc     68 F0 B0 FD | 	call	#__system___lockmem
0bc00     20 4E 05 F1 | 	add	fp, #32
0bc04     A7 2E 02 FB | 	rdlong	local09, fp
0bc08     09 2E 66 F0 | 	shl	local09, #9
0bc0c     2C 00 00 FF 
0bc10     CC E4 05 F1 | 	add	objptr, ##22732
0bc14     F2 2E 02 F1 | 	add	local09, objptr
0bc18     0C 4E 85 F1 | 	sub	fp, #12
0bc1c     A7 2C 02 FB | 	rdlong	local08, fp
0bc20     14 4E 85 F1 | 	sub	fp, #20
0bc24     01 2C 66 F0 | 	shl	local08, #1
0bc28     17 2D 02 F1 | 	add	local08, local09
0bc2c     16 15 E2 FA | 	rdword	arg02, local08
0bc30     00 12 06 F6 | 	mov	arg01, #0
0bc34     00 16 06 F6 | 	mov	arg03, #0
0bc38     0A 18 06 F6 | 	mov	arg04, #10
0bc3c     2C 00 00 FF 
0bc40     CC E4 85 F1 | 	sub	objptr, ##22732
0bc44     AC FD B0 FD | 	call	#__system___basic_print_unsigned
0bc48     00 12 06 F6 | 	mov	arg01, #0
0bc4c     09 14 06 F6 | 	mov	arg02, #9
0bc50     00 16 06 F6 | 	mov	arg03, #0
0bc54     C0 FC B0 FD | 	call	#__system___basic_print_char
0bc58     00 12 06 F6 | 	mov	arg01, #0
0bc5c     3C 49 B1 FD | 	call	#__system___getiolock_0442
0bc60     FD 00 68 FC | 	wrlong	#0, result1
0bc64     14 4E 05 F1 | 	add	fp, #20
0bc68     A7 2E 02 FB | 	rdlong	local09, fp
0bc6c     01 2E 06 F1 | 	add	local09, #1
0bc70     A7 2E 62 FC | 	wrlong	local09, fp
0bc74     14 4E 85 F1 | 	sub	fp, #20
0bc78     00 2F 56 F2 | 	cmps	local09, #256 wc
0bc7c     70 FF 9F CD |  if_b	jmp	#LR__0909
0bc80                 | LR__0910
0bc80                 | LR__0911
0bc80     A7 F0 03 F6 | 	mov	ptra, fp
0bc84     B2 00 A0 FD | 	call	#popregs_
0bc88                 | _do_defenv_ret
0bc88     2D 00 64 FD | 	ret
0bc8c                 | 
0bc8c                 | ' 
0bc8c                 | ' 
0bc8c                 | ' sub do_play
0bc8c                 | _do_play
0bc8c     05 4A 05 F6 | 	mov	COUNT_, #5
0bc90     A8 00 A0 FD | 	call	#pushregs_
0bc94     74 F0 07 F1 | 	add	ptra, #116
0bc98     60 4E 05 F1 | 	add	fp, #96
0bc9c     F5 25 A2 FF 
0bca0     A7 AA 68 FC | 	wrlong	##1145825877, fp
0bca4                 | ' speed_coeff=815.6614449376854599406528189911
0bca4                 | ' 
0bca4                 | ' for i=0 to 8 : params(i)=-2.0 : next i
0bca4     5C 4E 85 F1 | 	sub	fp, #92
0bca8     A7 00 68 FC | 	wrlong	#0, fp
0bcac     97 18 48 FB | 	callpa	#(@LR__0921-@LR__0920)>>2,fcache_load_ptr_
0bcb0                 | LR__0920
0bcb0     A7 18 02 FB | 	rdlong	arg04, fp
0bcb4     02 18 66 F0 | 	shl	arg04, #2
0bcb8     2C 4E 05 F1 | 	add	fp, #44
0bcbc     A7 18 02 F1 | 	add	arg04, fp
0bcc0     00 00 E0 FF 
0bcc4     0C 01 68 FC | 	wrlong	##-1073741824, arg04
0bcc8     2C 4E 85 F1 | 	sub	fp, #44
0bccc     A7 1E 02 FB | 	rdlong	local01, fp
0bcd0     01 1E 06 F1 | 	add	local01, #1
0bcd4     A7 1E 62 FC | 	wrlong	local01, fp
0bcd8     09 1E 56 F2 | 	cmps	local01, #9 wc
0bcdc     D0 FF 9F CD |  if_b	jmp	#LR__0920
0bce0                 | LR__0921
0bce0     04 4E 85 F1 | 	sub	fp, #4
0bce4     69 00 00 FF 
0bce8     E4 E5 05 F1 | 	add	objptr, ##54244
0bcec     F2 20 02 FB | 	rdlong	local02, objptr
0bcf0     10 23 02 F6 | 	mov	local03, local02
0bcf4     01 22 66 F0 | 	shl	local03, #1
0bcf8     10 23 02 F1 | 	add	local03, local02
0bcfc     02 22 66 F0 | 	shl	local03, #2
0bd00     03 00 00 FF 
0bd04     04 E4 85 F1 | 	sub	objptr, ##1540
0bd08     F2 22 02 F1 | 	add	local03, objptr
0bd0c     11 25 02 FB | 	rdlong	local04, local03
0bd10     A7 24 62 FC | 	wrlong	local04, fp
0bd14                 | ' 'params(0)=0: params(1)=440.0 : params(2)=16.0 : params(3)=0.0 : params(4)=0.0 : params(5)=1.0 : params(6)=0.0 : params(7)=0.0 : 
0bd14                 | ' 'chn		freq		   vol		   wave#	   env#		   len		   delay	   pan		: sus 
0bd14                 | ' numpar=compiledline(lineptr_e).result.uresult
0bd14                 | ' for i=numpar to 1 step -1 
0bd14     04 4E 05 F1 | 	add	fp, #4
0bd18     A7 24 62 FC | 	wrlong	local04, fp
0bd1c     04 4E 85 F1 | 	sub	fp, #4
0bd20     66 00 00 FF 
0bd24     E0 E5 85 F1 | 	sub	objptr, ##52704
0bd28                 | LR__0922
0bd28     CC DD BF FD | 	call	#_pop
0bd2c     54 4E 05 F1 | 	add	fp, #84
0bd30     A7 FA 61 FC | 	wrlong	result1, fp
0bd34     04 4E 05 F1 | 	add	fp, #4
0bd38     A7 FC 61 FC | 	wrlong	result2, fp
0bd3c     04 4E 05 F1 | 	add	fp, #4
0bd40     A7 FE 61 FC | 	wrlong	result3, fp
0bd44     58 4E 85 F1 | 	sub	fp, #88
0bd48     A7 22 02 FB | 	rdlong	local03, fp
0bd4c     01 22 86 F1 | 	sub	local03, #1
0bd50     02 22 66 F0 | 	shl	local03, #2
0bd54     2C 4E 05 F1 | 	add	fp, #44
0bd58     A7 22 02 F1 | 	add	local03, fp
0bd5c     24 4E 05 F1 | 	add	fp, #36
0bd60     A7 26 02 F6 | 	mov	local05, fp
0bd64     13 13 02 F6 | 	mov	arg01, local05
0bd68     54 4E 85 F1 | 	sub	fp, #84
0bd6c     84 61 B0 FD | 	call	#_converttofloat
0bd70     11 FB 61 FC | 	wrlong	result1, local03
0bd74     04 4E 05 F1 | 	add	fp, #4
0bd78     A7 1E 02 FB | 	rdlong	local01, fp
0bd7c     01 1E 86 F1 | 	sub	local01, #1
0bd80     A7 1E 62 FC | 	wrlong	local01, fp
0bd84     04 4E 85 F1 | 	sub	fp, #4
0bd88     01 1E 56 F2 | 	cmps	local01, #1 wc
0bd8c     98 FF 9F 3D |  if_ae	jmp	#LR__0922
0bd90                 | ' if params(0)<0 then channel=0 else channel=round(params(0))
0bd90     30 4E 05 F1 | 	add	fp, #48
0bd94     A7 12 02 FB | 	rdlong	arg01, fp
0bd98     30 4E 85 F1 | 	sub	fp, #48
0bd9c     00 14 06 F6 | 	mov	arg02, #0
0bda0     01 16 06 F6 | 	mov	arg03, #1
0bda4     18 1E B1 FD | 	call	#__system___float_cmp
0bda8     00 FA 55 F2 | 	cmps	result1, #0 wc
0bdac     0C 4E 05 C1 |  if_b	add	fp, #12
0bdb0     A7 00 68 CC |  if_b	wrlong	#0, fp
0bdb4     0C 4E 85 C1 |  if_b	sub	fp, #12
0bdb8     20 00 90 CD |  if_b	jmp	#LR__0923
0bdbc     30 4E 05 F1 | 	add	fp, #48
0bdc0     A7 12 02 FB | 	rdlong	arg01, fp
0bdc4     30 4E 85 F1 | 	sub	fp, #48
0bdc8     01 14 06 F6 | 	mov	arg02, #1
0bdcc     84 1E B1 FD | 	call	#__system___float_tointeger
0bdd0     0C 4E 05 F1 | 	add	fp, #12
0bdd4     A7 FA 61 FC | 	wrlong	result1, fp
0bdd8     0C 4E 85 F1 | 	sub	fp, #12
0bddc                 | LR__0923
0bddc                 | ' if params(1)<0 then freq=440.0 else freq=params(1)
0bddc     34 4E 05 F1 | 	add	fp, #52
0bde0     A7 12 02 FB | 	rdlong	arg01, fp
0bde4     34 4E 85 F1 | 	sub	fp, #52
0bde8     00 14 06 F6 | 	mov	arg02, #0
0bdec     01 16 06 F6 | 	mov	arg03, #1
0bdf0     CC 1D B1 FD | 	call	#__system___float_cmp
0bdf4     00 FA 55 F2 | 	cmps	result1, #0 wc
0bdf8     64 4E 05 C1 |  if_b	add	fp, #100
0bdfc     00 EE A1 CF 
0be00     A7 00 68 CC |  if_b	wrlong	##1138491392, fp
0be04     64 4E 85 C1 |  if_b	sub	fp, #100
0be08     34 4E 05 31 |  if_ae	add	fp, #52
0be0c     A7 24 02 3B |  if_ae	rdlong	local04, fp
0be10     30 4E 05 31 |  if_ae	add	fp, #48
0be14     A7 24 62 3C |  if_ae	wrlong	local04, fp
0be18     64 4E 85 31 |  if_ae	sub	fp, #100
0be1c                 | ' if params(2)<0 orelse params(2)>16.384 then vol=channels(channel).vol else vol=params(2) : channels(channel).vol=vol
0be1c     38 4E 05 F1 | 	add	fp, #56
0be20     A7 12 02 FB | 	rdlong	arg01, fp
0be24     38 4E 85 F1 | 	sub	fp, #56
0be28     00 14 06 F6 | 	mov	arg02, #0
0be2c     01 16 06 F6 | 	mov	arg03, #1
0be30     8C 1D B1 FD | 	call	#__system___float_cmp
0be34     00 FA 55 F2 | 	cmps	result1, #0 wc
0be38     24 00 90 CD |  if_b	jmp	#LR__0924
0be3c     38 4E 05 F1 | 	add	fp, #56
0be40     A7 12 02 FB | 	rdlong	arg01, fp
0be44     38 4E 85 F1 | 	sub	fp, #56
0be48     89 C1 20 FF 
0be4c     6F 14 06 F6 | 	mov	arg02, ##1099108975
0be50     01 16 66 F6 | 	neg	arg03, #1
0be54     68 1D B1 FD | 	call	#__system___float_cmp
0be58     01 FA 55 F2 | 	cmps	result1, #1 wc
0be5c     44 00 90 CD |  if_b	jmp	#LR__0925
0be60                 | LR__0924
0be60     0C 4E 05 F1 | 	add	fp, #12
0be64     A7 20 02 FB | 	rdlong	local02, fp
0be68     10 23 02 F6 | 	mov	local03, local02
0be6c     02 22 66 F0 | 	shl	local03, #2
0be70     10 23 02 F1 | 	add	local03, local02
0be74     02 22 66 F0 | 	shl	local03, #2
0be78     34 00 00 FF 
0be7c     CC E4 05 F1 | 	add	objptr, ##26828
0be80     F2 22 02 F1 | 	add	local03, objptr
0be84     08 22 06 F1 | 	add	local03, #8
0be88     11 23 02 FB | 	rdlong	local03, local03
0be8c     60 4E 05 F1 | 	add	fp, #96
0be90     A7 22 62 FC | 	wrlong	local03, fp
0be94     6C 4E 85 F1 | 	sub	fp, #108
0be98     34 00 00 FF 
0be9c     CC E4 85 F1 | 	sub	objptr, ##26828
0bea0     48 00 90 FD | 	jmp	#LR__0926
0bea4                 | LR__0925
0bea4     38 4E 05 F1 | 	add	fp, #56
0bea8     A7 24 02 FB | 	rdlong	local04, fp
0beac     34 4E 05 F1 | 	add	fp, #52
0beb0     A7 24 62 FC | 	wrlong	local04, fp
0beb4     60 4E 85 F1 | 	sub	fp, #96
0beb8     A7 20 02 FB | 	rdlong	local02, fp
0bebc     10 23 02 F6 | 	mov	local03, local02
0bec0     02 22 66 F0 | 	shl	local03, #2
0bec4     10 23 02 F1 | 	add	local03, local02
0bec8     02 22 66 F0 | 	shl	local03, #2
0becc     34 00 00 FF 
0bed0     CC E4 05 F1 | 	add	objptr, ##26828
0bed4     F2 22 02 F1 | 	add	local03, objptr
0bed8     0C 4E 85 F1 | 	sub	fp, #12
0bedc     08 22 06 F1 | 	add	local03, #8
0bee0     11 25 62 FC | 	wrlong	local04, local03
0bee4     34 00 00 FF 
0bee8     CC E4 85 F1 | 	sub	objptr, ##26828
0beec                 | LR__0926
0beec                 | ' if params(3)<0 orelse params(3)>8.0 then wave=channels(channel).wave else wave=round(params(3)) : channels(channel).wave=wave
0beec     3C 4E 05 F1 | 	add	fp, #60
0bef0     A7 12 02 FB | 	rdlong	arg01, fp
0bef4     3C 4E 85 F1 | 	sub	fp, #60
0bef8     00 14 06 F6 | 	mov	arg02, #0
0befc     01 16 06 F6 | 	mov	arg03, #1
0bf00     BC 1C B1 FD | 	call	#__system___float_cmp
0bf04     00 FA 55 F2 | 	cmps	result1, #0 wc
0bf08     24 00 90 CD |  if_b	jmp	#LR__0927
0bf0c     3C 4E 05 F1 | 	add	fp, #60
0bf10     A7 12 02 FB | 	rdlong	arg01, fp
0bf14     3C 4E 85 F1 | 	sub	fp, #60
0bf18     00 80 20 FF 
0bf1c     00 14 06 F6 | 	mov	arg02, ##1090519040
0bf20     01 16 66 F6 | 	neg	arg03, #1
0bf24     98 1C B1 FD | 	call	#__system___float_cmp
0bf28     01 FA 55 F2 | 	cmps	result1, #1 wc
0bf2c     40 00 90 CD |  if_b	jmp	#LR__0928
0bf30                 | LR__0927
0bf30     0C 4E 05 F1 | 	add	fp, #12
0bf34     A7 22 02 FB | 	rdlong	local03, fp
0bf38     11 25 02 F6 | 	mov	local04, local03
0bf3c     02 24 66 F0 | 	shl	local04, #2
0bf40     11 25 02 F1 | 	add	local04, local03
0bf44     02 24 66 F0 | 	shl	local04, #2
0bf48     34 00 00 FF 
0bf4c     CC E4 05 F1 | 	add	objptr, ##26828
0bf50     F2 24 02 F1 | 	add	local04, objptr
0bf54     12 25 C2 FA | 	rdbyte	local04, local04
0bf58     14 4E 05 F1 | 	add	fp, #20
0bf5c     A7 24 62 FC | 	wrlong	local04, fp
0bf60     20 4E 85 F1 | 	sub	fp, #32
0bf64     34 00 00 FF 
0bf68     CC E4 85 F1 | 	sub	objptr, ##26828
0bf6c     50 00 90 FD | 	jmp	#LR__0929
0bf70                 | LR__0928
0bf70     3C 4E 05 F1 | 	add	fp, #60
0bf74     A7 12 02 FB | 	rdlong	arg01, fp
0bf78     3C 4E 85 F1 | 	sub	fp, #60
0bf7c     01 14 06 F6 | 	mov	arg02, #1
0bf80     D0 1C B1 FD | 	call	#__system___float_tointeger
0bf84     20 4E 05 F1 | 	add	fp, #32
0bf88     A7 FA 61 FC | 	wrlong	result1, fp
0bf8c     14 4E 85 F1 | 	sub	fp, #20
0bf90     A7 20 02 FB | 	rdlong	local02, fp
0bf94     10 23 02 F6 | 	mov	local03, local02
0bf98     02 22 66 F0 | 	shl	local03, #2
0bf9c     10 23 02 F1 | 	add	local03, local02
0bfa0     02 22 66 F0 | 	shl	local03, #2
0bfa4     34 00 00 FF 
0bfa8     CC E4 05 F1 | 	add	objptr, ##26828
0bfac     F2 22 02 F1 | 	add	local03, objptr
0bfb0     0C 4E 85 F1 | 	sub	fp, #12
0bfb4     11 FB 41 FC | 	wrbyte	result1, local03
0bfb8     34 00 00 FF 
0bfbc     CC E4 85 F1 | 	sub	objptr, ##26828
0bfc0                 | LR__0929
0bfc0                 | ' if params(4)<0 orelse params(4)>8.0 then env=channels(channel).env else env=round(params(4)) : channels(channel).env=env
0bfc0     40 4E 05 F1 | 	add	fp, #64
0bfc4     A7 12 02 FB | 	rdlong	arg01, fp
0bfc8     40 4E 85 F1 | 	sub	fp, #64
0bfcc     00 14 06 F6 | 	mov	arg02, #0
0bfd0     01 16 06 F6 | 	mov	arg03, #1
0bfd4     E8 1B B1 FD | 	call	#__system___float_cmp
0bfd8     00 FA 55 F2 | 	cmps	result1, #0 wc
0bfdc     24 00 90 CD |  if_b	jmp	#LR__0930
0bfe0     40 4E 05 F1 | 	add	fp, #64
0bfe4     A7 12 02 FB | 	rdlong	arg01, fp
0bfe8     40 4E 85 F1 | 	sub	fp, #64
0bfec     00 80 20 FF 
0bff0     00 14 06 F6 | 	mov	arg02, ##1090519040
0bff4     01 16 66 F6 | 	neg	arg03, #1
0bff8     C4 1B B1 FD | 	call	#__system___float_cmp
0bffc     01 FA 55 F2 | 	cmps	result1, #1 wc
0c000     48 00 90 CD |  if_b	jmp	#LR__0931
0c004                 | LR__0930
0c004     0C 4E 05 F1 | 	add	fp, #12
0c008     A7 22 02 FB | 	rdlong	local03, fp
0c00c     11 27 02 F6 | 	mov	local05, local03
0c010     02 26 66 F0 | 	shl	local05, #2
0c014     11 27 02 F1 | 	add	local05, local03
0c018     02 26 66 F0 | 	shl	local05, #2
0c01c     34 00 00 FF 
0c020     CC E4 05 F1 | 	add	objptr, ##26828
0c024     F2 26 02 F1 | 	add	local05, objptr
0c028     01 26 06 F1 | 	add	local05, #1
0c02c     13 27 C2 FA | 	rdbyte	local05, local05
0c030     13 25 E2 F8 | 	getbyte	local04, local05, #0
0c034     18 4E 05 F1 | 	add	fp, #24
0c038     A7 24 62 FC | 	wrlong	local04, fp
0c03c     24 4E 85 F1 | 	sub	fp, #36
0c040     34 00 00 FF 
0c044     CC E4 85 F1 | 	sub	objptr, ##26828
0c048     54 00 90 FD | 	jmp	#LR__0932
0c04c                 | LR__0931
0c04c     40 4E 05 F1 | 	add	fp, #64
0c050     A7 12 02 FB | 	rdlong	arg01, fp
0c054     40 4E 85 F1 | 	sub	fp, #64
0c058     01 14 06 F6 | 	mov	arg02, #1
0c05c     F4 1B B1 FD | 	call	#__system___float_tointeger
0c060     24 4E 05 F1 | 	add	fp, #36
0c064     A7 FA 61 FC | 	wrlong	result1, fp
0c068     18 4E 85 F1 | 	sub	fp, #24
0c06c     A7 20 02 FB | 	rdlong	local02, fp
0c070     10 23 02 F6 | 	mov	local03, local02
0c074     02 22 66 F0 | 	shl	local03, #2
0c078     10 23 02 F1 | 	add	local03, local02
0c07c     02 22 66 F0 | 	shl	local03, #2
0c080     34 00 00 FF 
0c084     CC E4 05 F1 | 	add	objptr, ##26828
0c088     F2 22 02 F1 | 	add	local03, objptr
0c08c     0C 4E 85 F1 | 	sub	fp, #12
0c090     01 22 06 F1 | 	add	local03, #1
0c094     11 FB 41 FC | 	wrbyte	result1, local03
0c098     34 00 00 FF 
0c09c     CC E4 85 F1 | 	sub	objptr, ##26828
0c0a0                 | LR__0932
0c0a0                 | ' if params(5)<0 orelse params(5)>1000.0 then slen=channels(channel).length else slen=params(5) : channels(channel).length=slen
0c0a0     44 4E 05 F1 | 	add	fp, #68
0c0a4     A7 12 02 FB | 	rdlong	arg01, fp
0c0a8     44 4E 85 F1 | 	sub	fp, #68
0c0ac     00 14 06 F6 | 	mov	arg02, #0
0c0b0     01 16 06 F6 | 	mov	arg03, #1
0c0b4     08 1B B1 FD | 	call	#__system___float_cmp
0c0b8     00 FA 55 F2 | 	cmps	result1, #0 wc
0c0bc     24 00 90 CD |  if_b	jmp	#LR__0933
0c0c0     44 4E 05 F1 | 	add	fp, #68
0c0c4     A7 12 02 FB | 	rdlong	arg01, fp
0c0c8     44 4E 85 F1 | 	sub	fp, #68
0c0cc     00 3D 22 FF 
0c0d0     00 14 06 F6 | 	mov	arg02, ##1148846080
0c0d4     01 16 66 F6 | 	neg	arg03, #1
0c0d8     E4 1A B1 FD | 	call	#__system___float_cmp
0c0dc     01 FA 55 F2 | 	cmps	result1, #1 wc
0c0e0     44 00 90 CD |  if_b	jmp	#LR__0934
0c0e4                 | LR__0933
0c0e4     0C 4E 05 F1 | 	add	fp, #12
0c0e8     A7 20 02 FB | 	rdlong	local02, fp
0c0ec     10 23 02 F6 | 	mov	local03, local02
0c0f0     02 22 66 F0 | 	shl	local03, #2
0c0f4     10 23 02 F1 | 	add	local03, local02
0c0f8     02 22 66 F0 | 	shl	local03, #2
0c0fc     34 00 00 FF 
0c100     CC E4 05 F1 | 	add	objptr, ##26828
0c104     F2 22 02 F1 | 	add	local03, objptr
0c108     04 22 06 F1 | 	add	local03, #4
0c10c     11 25 02 FB | 	rdlong	local04, local03
0c110     64 4E 05 F1 | 	add	fp, #100
0c114     A7 24 62 FC | 	wrlong	local04, fp
0c118     70 4E 85 F1 | 	sub	fp, #112
0c11c     34 00 00 FF 
0c120     CC E4 85 F1 | 	sub	objptr, ##26828
0c124     48 00 90 FD | 	jmp	#LR__0935
0c128                 | LR__0934
0c128     44 4E 05 F1 | 	add	fp, #68
0c12c     A7 24 02 FB | 	rdlong	local04, fp
0c130     2C 4E 05 F1 | 	add	fp, #44
0c134     A7 24 62 FC | 	wrlong	local04, fp
0c138     64 4E 85 F1 | 	sub	fp, #100
0c13c     A7 20 02 FB | 	rdlong	local02, fp
0c140     10 23 02 F6 | 	mov	local03, local02
0c144     02 22 66 F0 | 	shl	local03, #2
0c148     10 23 02 F1 | 	add	local03, local02
0c14c     02 22 66 F0 | 	shl	local03, #2
0c150     34 00 00 FF 
0c154     CC E4 05 F1 | 	add	objptr, ##26828
0c158     F2 22 02 F1 | 	add	local03, objptr
0c15c     0C 4E 85 F1 | 	sub	fp, #12
0c160     04 22 06 F1 | 	add	local03, #4
0c164     11 25 62 FC | 	wrlong	local04, local03
0c168     34 00 00 FF 
0c16c     CC E4 85 F1 | 	sub	objptr, ##26828
0c170                 | LR__0935
0c170                 | ' if params(6)<0 orelse params(6)>10000.0 then delay=channels(channel).delay else delay=round(params(6)) : channels(channel).delay=delay
0c170     48 4E 05 F1 | 	add	fp, #72
0c174     A7 12 02 FB | 	rdlong	arg01, fp
0c178     48 4E 85 F1 | 	sub	fp, #72
0c17c     00 14 06 F6 | 	mov	arg02, #0
0c180     01 16 06 F6 | 	mov	arg03, #1
0c184     38 1A B1 FD | 	call	#__system___float_cmp
0c188     00 FA 55 F2 | 	cmps	result1, #0 wc
0c18c     24 00 90 CD |  if_b	jmp	#LR__0936
0c190     48 4E 05 F1 | 	add	fp, #72
0c194     A7 12 02 FB | 	rdlong	arg01, fp
0c198     48 4E 85 F1 | 	sub	fp, #72
0c19c     20 0E 23 FF 
0c1a0     00 14 06 F6 | 	mov	arg02, ##1176256512
0c1a4     01 16 66 F6 | 	neg	arg03, #1
0c1a8     14 1A B1 FD | 	call	#__system___float_cmp
0c1ac     01 FA 55 F2 | 	cmps	result1, #1 wc
0c1b0     48 00 90 CD |  if_b	jmp	#LR__0937
0c1b4                 | LR__0936
0c1b4     0C 4E 05 F1 | 	add	fp, #12
0c1b8     A7 22 02 FB | 	rdlong	local03, fp
0c1bc     11 27 02 F6 | 	mov	local05, local03
0c1c0     02 26 66 F0 | 	shl	local05, #2
0c1c4     11 27 02 F1 | 	add	local05, local03
0c1c8     02 26 66 F0 | 	shl	local05, #2
0c1cc     34 00 00 FF 
0c1d0     CC E4 05 F1 | 	add	objptr, ##26828
0c1d4     F2 26 02 F1 | 	add	local05, objptr
0c1d8     02 26 06 F1 | 	add	local05, #2
0c1dc     13 27 E2 FA | 	rdword	local05, local05
0c1e0     13 25 32 F9 | 	getword	local04, local05, #0
0c1e4     1C 4E 05 F1 | 	add	fp, #28
0c1e8     A7 24 62 FC | 	wrlong	local04, fp
0c1ec     28 4E 85 F1 | 	sub	fp, #40
0c1f0     34 00 00 FF 
0c1f4     CC E4 85 F1 | 	sub	objptr, ##26828
0c1f8     54 00 90 FD | 	jmp	#LR__0938
0c1fc                 | LR__0937
0c1fc     48 4E 05 F1 | 	add	fp, #72
0c200     A7 12 02 FB | 	rdlong	arg01, fp
0c204     48 4E 85 F1 | 	sub	fp, #72
0c208     01 14 06 F6 | 	mov	arg02, #1
0c20c     44 1A B1 FD | 	call	#__system___float_tointeger
0c210     28 4E 05 F1 | 	add	fp, #40
0c214     A7 FA 61 FC | 	wrlong	result1, fp
0c218     1C 4E 85 F1 | 	sub	fp, #28
0c21c     A7 20 02 FB | 	rdlong	local02, fp
0c220     10 23 02 F6 | 	mov	local03, local02
0c224     02 22 66 F0 | 	shl	local03, #2
0c228     10 23 02 F1 | 	add	local03, local02
0c22c     02 22 66 F0 | 	shl	local03, #2
0c230     34 00 00 FF 
0c234     CC E4 05 F1 | 	add	objptr, ##26828
0c238     F2 22 02 F1 | 	add	local03, objptr
0c23c     0C 4E 85 F1 | 	sub	fp, #12
0c240     02 22 06 F1 | 	add	local03, #2
0c244     11 FB 51 FC | 	wrword	result1, local03
0c248     34 00 00 FF 
0c24c     CC E4 85 F1 | 	sub	objptr, ##26828
0c250                 | LR__0938
0c250                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
0c250     4C 4E 05 F1 | 	add	fp, #76
0c254     A7 12 02 FB | 	rdlong	arg01, fp
0c258     4C 4E 85 F1 | 	sub	fp, #76
0c25c     00 C0 5F FF 
0c260     00 14 06 F6 | 	mov	arg02, ##-1082130432
0c264     01 16 06 F6 | 	mov	arg03, #1
0c268     54 19 B1 FD | 	call	#__system___float_cmp
0c26c     00 FA 55 F2 | 	cmps	result1, #0 wc
0c270     24 00 90 CD |  if_b	jmp	#LR__0939
0c274     4C 4E 05 F1 | 	add	fp, #76
0c278     A7 12 02 FB | 	rdlong	arg01, fp
0c27c     4C 4E 85 F1 | 	sub	fp, #76
0c280     00 C0 1F FF 
0c284     00 14 06 F6 | 	mov	arg02, ##1065353216
0c288     01 16 66 F6 | 	neg	arg03, #1
0c28c     30 19 B1 FD | 	call	#__system___float_cmp
0c290     01 FA 55 F2 | 	cmps	result1, #1 wc
0c294     44 00 90 CD |  if_b	jmp	#LR__0940
0c298                 | LR__0939
0c298     0C 4E 05 F1 | 	add	fp, #12
0c29c     A7 20 02 FB | 	rdlong	local02, fp
0c2a0     10 23 02 F6 | 	mov	local03, local02
0c2a4     02 22 66 F0 | 	shl	local03, #2
0c2a8     10 23 02 F1 | 	add	local03, local02
0c2ac     02 22 66 F0 | 	shl	local03, #2
0c2b0     34 00 00 FF 
0c2b4     CC E4 05 F1 | 	add	objptr, ##26828
0c2b8     F2 22 02 F1 | 	add	local03, objptr
0c2bc     0C 22 06 F1 | 	add	local03, #12
0c2c0     11 27 02 FB | 	rdlong	local05, local03
0c2c4     5C 4E 05 F1 | 	add	fp, #92
0c2c8     A7 26 62 FC | 	wrlong	local05, fp
0c2cc     68 4E 85 F1 | 	sub	fp, #104
0c2d0     34 00 00 FF 
0c2d4     CC E4 85 F1 | 	sub	objptr, ##26828
0c2d8     48 00 90 FD | 	jmp	#LR__0941
0c2dc                 | LR__0940
0c2dc     4C 4E 05 F1 | 	add	fp, #76
0c2e0     A7 26 02 FB | 	rdlong	local05, fp
0c2e4     1C 4E 05 F1 | 	add	fp, #28
0c2e8     A7 26 62 FC | 	wrlong	local05, fp
0c2ec     5C 4E 85 F1 | 	sub	fp, #92
0c2f0     A7 20 02 FB | 	rdlong	local02, fp
0c2f4     10 23 02 F6 | 	mov	local03, local02
0c2f8     02 22 66 F0 | 	shl	local03, #2
0c2fc     10 23 02 F1 | 	add	local03, local02
0c300     02 22 66 F0 | 	shl	local03, #2
0c304     34 00 00 FF 
0c308     CC E4 05 F1 | 	add	objptr, ##26828
0c30c     F2 22 02 F1 | 	add	local03, objptr
0c310     0C 4E 85 F1 | 	sub	fp, #12
0c314     0C 22 06 F1 | 	add	local03, #12
0c318     11 27 62 FC | 	wrlong	local05, local03
0c31c     34 00 00 FF 
0c320     CC E4 85 F1 | 	sub	objptr, ##26828
0c324                 | LR__0941
0c324                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
0c324     50 4E 05 F1 | 	add	fp, #80
0c328     A7 12 02 FB | 	rdlong	arg01, fp
0c32c     50 4E 85 F1 | 	sub	fp, #80
0c330     00 14 06 F6 | 	mov	arg02, #0
0c334     01 16 06 F6 | 	mov	arg03, #1
0c338     84 18 B1 FD | 	call	#__system___float_cmp
0c33c     00 FA 55 F2 | 	cmps	result1, #0 wc
0c340     24 00 90 CD |  if_b	jmp	#LR__0942
0c344     50 4E 05 F1 | 	add	fp, #80
0c348     A7 12 02 FB | 	rdlong	arg01, fp
0c34c     50 4E 85 F1 | 	sub	fp, #80
0c350     80 BF 21 FF 
0c354     00 14 06 F6 | 	mov	arg02, ##1132396544
0c358     01 16 66 F6 | 	neg	arg03, #1
0c35c     60 18 B1 FD | 	call	#__system___float_cmp
0c360     01 FA 55 F2 | 	cmps	result1, #1 wc
0c364     44 00 90 CD |  if_b	jmp	#LR__0943
0c368                 | LR__0942
0c368     0C 4E 05 F1 | 	add	fp, #12
0c36c     A7 22 02 FB | 	rdlong	local03, fp
0c370     11 27 02 F6 | 	mov	local05, local03
0c374     02 26 66 F0 | 	shl	local05, #2
0c378     11 27 02 F1 | 	add	local05, local03
0c37c     02 26 66 F0 | 	shl	local05, #2
0c380     34 00 00 FF 
0c384     CC E4 05 F1 | 	add	objptr, ##26828
0c388     F2 26 02 F1 | 	add	local05, objptr
0c38c     10 26 06 F1 | 	add	local05, #16
0c390     13 25 E2 FA | 	rdword	local04, local05
0c394     20 4E 05 F1 | 	add	fp, #32
0c398     A7 24 62 FC | 	wrlong	local04, fp
0c39c     2C 4E 85 F1 | 	sub	fp, #44
0c3a0     34 00 00 FF 
0c3a4     CC E4 85 F1 | 	sub	objptr, ##26828
0c3a8     54 00 90 FD | 	jmp	#LR__0944
0c3ac                 | LR__0943
0c3ac     50 4E 05 F1 | 	add	fp, #80
0c3b0     A7 12 02 FB | 	rdlong	arg01, fp
0c3b4     50 4E 85 F1 | 	sub	fp, #80
0c3b8     01 14 06 F6 | 	mov	arg02, #1
0c3bc     94 18 B1 FD | 	call	#__system___float_tointeger
0c3c0     2C 4E 05 F1 | 	add	fp, #44
0c3c4     A7 FA 61 FC | 	wrlong	result1, fp
0c3c8     20 4E 85 F1 | 	sub	fp, #32
0c3cc     A7 20 02 FB | 	rdlong	local02, fp
0c3d0     10 23 02 F6 | 	mov	local03, local02
0c3d4     02 22 66 F0 | 	shl	local03, #2
0c3d8     10 23 02 F1 | 	add	local03, local02
0c3dc     02 22 66 F0 | 	shl	local03, #2
0c3e0     34 00 00 FF 
0c3e4     CC E4 05 F1 | 	add	objptr, ##26828
0c3e8     F2 22 02 F1 | 	add	local03, objptr
0c3ec     0C 4E 85 F1 | 	sub	fp, #12
0c3f0     10 22 06 F1 | 	add	local03, #16
0c3f4     11 FB 51 FC | 	wrword	result1, local03
0c3f8     34 00 00 FF 
0c3fc     CC E4 85 F1 | 	sub	objptr, ##26828
0c400                 | LR__0944
0c400     60 4E 05 F1 | 	add	fp, #96
0c404     A7 12 02 FB | 	rdlong	arg01, fp
0c408     10 4E 05 F1 | 	add	fp, #16
0c40c     A7 14 02 FB | 	rdlong	arg02, fp
0c410     70 4E 85 F1 | 	sub	fp, #112
0c414     78 15 B1 FD | 	call	#__system___float_div
0c418     FD 12 02 F6 | 	mov	arg01, result1
0c41c     01 14 06 F6 | 	mov	arg02, #1
0c420     30 18 B1 FD | 	call	#__system___float_tointeger
0c424     FD 24 02 F6 | 	mov	local04, result1
0c428     14 4E 05 F1 | 	add	fp, #20
0c42c     A7 24 62 FC | 	wrlong	local04, fp
0c430     54 4E 05 F1 | 	add	fp, #84
0c434     A7 14 02 FB | 	rdlong	arg02, fp
0c438     68 4E 85 F1 | 	sub	fp, #104
0c43c     00 00 23 FF 
0c440     00 12 06 F6 | 	mov	arg01, ##1174405120
0c444     44 13 B1 FD | 	call	#__system___float_mul
0c448     FD 12 02 F6 | 	mov	arg01, result1
0c44c     01 14 06 F6 | 	mov	arg02, #1
0c450     00 18 B1 FD | 	call	#__system___float_tointeger
0c454     0D 24 C6 F9 | 	decod	local04, #13
0c458     FD 24 02 F1 | 	add	local04, result1
0c45c     18 4E 05 F1 | 	add	fp, #24
0c460     A7 24 62 FC | 	wrlong	local04, fp
0c464     54 4E 05 F1 | 	add	fp, #84
0c468     A7 14 02 FB | 	rdlong	arg02, fp
0c46c     6C 4E 85 F1 | 	sub	fp, #108
0c470     00 3D 22 FF 
0c474     00 12 06 F6 | 	mov	arg01, ##1148846080
0c478     10 13 B1 FD | 	call	#__system___float_mul
0c47c     FD 12 02 F6 | 	mov	arg01, result1
0c480     01 14 06 F6 | 	mov	arg02, #1
0c484     CC 17 B1 FD | 	call	#__system___float_tointeger
0c488     1C 4E 05 F1 | 	add	fp, #28
0c48c     A7 FA 61 FC | 	wrlong	result1, fp
0c490     56 00 00 FF 
0c494     74 E5 05 F1 | 	add	objptr, ##44404
0c498     F2 24 02 FB | 	rdlong	local04, objptr
0c49c     56 00 00 FF 
0c4a0     74 E5 85 F1 | 	sub	objptr, ##44404
0c4a4     10 4E 85 F1 | 	sub	fp, #16
0c4a8     A7 20 02 FB | 	rdlong	local02, fp
0c4ac     06 20 66 F0 | 	shl	local02, #6
0c4b0     10 25 02 F1 | 	add	local04, local02
0c4b4     04 4E 85 F1 | 	sub	fp, #4
0c4b8     A7 24 62 FC | 	wrlong	local04, fp
0c4bc     5C 4E 05 F1 | 	add	fp, #92
0c4c0     A7 12 02 FB | 	rdlong	arg01, fp
0c4c4     64 4E 85 F1 | 	sub	fp, #100
0c4c8     72 3F 20 FF 
0c4cc     EA 14 06 F6 | 	mov	arg02, ##1082057962
0c4d0     B8 12 B1 FD | 	call	#__system___float_mul
0c4d4     FD 12 02 F6 | 	mov	arg01, result1
0c4d8     01 14 06 F6 | 	mov	arg02, #1
0c4dc     74 17 B1 FD | 	call	#__system___float_tointeger
0c4e0     10 4E 05 F1 | 	add	fp, #16
0c4e4     A7 FA 61 FC | 	wrlong	result1, fp
0c4e8                 | ' 
0c4e8                 | ' speed=round(speed_coeff/slen)
0c4e8                 | ' ipan=8192+round(8192*pan)
0c4e8                 | ' ivol=round(1000.0*vol)
0c4e8                 | ' base2=base+64*channel
0c4e8                 | ' skip=round(freq*3.9827219) 
0c4e8                 | ' if wave <8 then 
0c4e8     10 4E 05 F1 | 	add	fp, #16
0c4ec     A7 24 02 FB | 	rdlong	local04, fp
0c4f0     20 4E 85 F1 | 	sub	fp, #32
0c4f4     08 24 56 F2 | 	cmps	local04, #8 wc
0c4f8     40 00 90 3D |  if_ae	jmp	#LR__0945
0c4fc     08 4E 05 F1 | 	add	fp, #8
0c500     A7 12 02 FB | 	rdlong	arg01, fp
0c504     08 12 06 F1 | 	add	arg01, #8
0c508     18 4E 05 F1 | 	add	fp, #24
0c50c     A7 14 02 FB | 	rdlong	arg02, fp
0c510     20 4E 85 F1 | 	sub	fp, #32
0c514     0B 14 66 F0 | 	shl	arg02, #11
0c518     0C 00 00 FF 
0c51c     CC E4 05 F1 | 	add	objptr, ##6348
0c520     F2 14 02 F1 | 	add	arg02, objptr
0c524     0C 00 00 FF 
0c528     CC E4 85 F1 | 	sub	objptr, ##6348
0c52c     00 00 60 FF 
0c530     00 14 06 F1 | 	add	arg02, ##-1073741824
0c534     09 15 62 FC | 	wrlong	arg02, arg01
0c538     18 00 90 FD | 	jmp	#LR__0946
0c53c                 | LR__0945
0c53c     08 4E 05 F1 | 	add	fp, #8
0c540     A7 12 02 FB | 	rdlong	arg01, fp
0c544     08 4E 85 F1 | 	sub	fp, #8
0c548     08 12 06 F1 | 	add	arg01, #8
0c54c     00 00 E4 FF 
0c550     09 01 68 FC | 	wrlong	##-939524096, arg01
0c554                 | LR__0946
0c554     08 4E 05 F1 | 	add	fp, #8
0c558     A7 12 02 FB | 	rdlong	arg01, fp
0c55c     10 12 06 F1 | 	add	arg01, #16
0c560     04 00 80 FF 
0c564     09 01 68 FC | 	wrlong	##2048, arg01
0c568     A7 12 02 FB | 	rdlong	arg01, fp
0c56c     0C 12 06 F1 | 	add	arg01, #12
0c570     09 01 68 FC | 	wrlong	#0, arg01
0c574     A7 12 02 FB | 	rdlong	arg01, fp
0c578     14 12 06 F1 | 	add	arg01, #20
0c57c     14 4E 05 F1 | 	add	fp, #20
0c580     A7 14 02 FB | 	rdlong	arg02, fp
0c584     09 15 52 FC | 	wrword	arg02, arg01
0c588     14 4E 85 F1 | 	sub	fp, #20
0c58c     A7 12 02 FB | 	rdlong	arg01, fp
0c590     16 12 06 F1 | 	add	arg01, #22
0c594     10 4E 05 F1 | 	add	fp, #16
0c598     A7 14 02 FB | 	rdlong	arg02, fp
0c59c     09 15 52 FC | 	wrword	arg02, arg01
0c5a0                 | '   
0c5a0                 | ' lpoke base2+16,2048
0c5a0                 | ' lpoke base2+12,0
0c5a0                 | ' dpoke base2+20,ivol 
0c5a0                 | ' dpoke base2+22,ipan 
0c5a0                 | ' if wave<8 then
0c5a0     08 4E 05 F1 | 	add	fp, #8
0c5a4     A7 24 02 FB | 	rdlong	local04, fp
0c5a8     20 4E 85 F1 | 	sub	fp, #32
0c5ac     08 24 56 F2 | 	cmps	local04, #8 wc
0c5b0     2C 00 90 3D |  if_ae	jmp	#LR__0947
0c5b4     08 4E 05 F1 | 	add	fp, #8
0c5b8     A7 12 02 FB | 	rdlong	arg01, fp
0c5bc     18 12 06 F1 | 	add	arg01, #24
0c5c0     09 29 58 FC | 	wrword	#20, arg01
0c5c4     A7 12 02 FB | 	rdlong	arg01, fp
0c5c8     1A 12 06 F1 | 	add	arg01, #26
0c5cc     08 4E 05 F1 | 	add	fp, #8
0c5d0     A7 14 02 FB | 	rdlong	arg02, fp
0c5d4     10 4E 85 F1 | 	sub	fp, #16
0c5d8     09 15 52 FC | 	wrword	arg02, arg01
0c5dc     A4 00 90 FD | 	jmp	#LR__0948
0c5e0                 | LR__0947
0c5e0     08 4E 05 F1 | 	add	fp, #8
0c5e4     A7 24 02 FB | 	rdlong	local04, fp
0c5e8     18 24 06 F1 | 	add	local04, #24
0c5ec     5C 4E 05 F1 | 	add	fp, #92
0c5f0     A7 14 02 FB | 	rdlong	arg02, fp
0c5f4     64 4E 85 F1 | 	sub	fp, #100
0c5f8     58 D0 24 FF 
0c5fc     B0 13 06 F6 | 	mov	arg01, ##1235268016
0c600     8C 13 B1 FD | 	call	#__system___float_div
0c604     FD 12 02 F6 | 	mov	arg01, result1
0c608     01 14 06 F6 | 	mov	arg02, #1
0c60c     44 16 B1 FD | 	call	#__system___float_tointeger
0c610     12 FB 51 FC | 	wrword	result1, local04
0c614                 | '   dpoke base2+24,round(1316406/freq)  : print 1316406/freq
0c614     00 12 06 F6 | 	mov	arg01, #0
0c618     80 3F B1 FD | 	call	#__system___getiolock_0442
0c61c     FD 12 02 F6 | 	mov	arg01, result1
0c620     44 E6 B0 FD | 	call	#__system___lockmem
0c624     00 20 06 F6 | 	mov	local02, #0
0c628     64 4E 05 F1 | 	add	fp, #100
0c62c     A7 14 02 FB | 	rdlong	arg02, fp
0c630     64 4E 85 F1 | 	sub	fp, #100
0c634     58 D0 24 FF 
0c638     B0 13 06 F6 | 	mov	arg01, ##1235268016
0c63c     50 13 B1 FD | 	call	#__system___float_div
0c640     FD 14 02 F6 | 	mov	arg02, result1
0c644     10 13 02 F6 | 	mov	arg01, local02
0c648     00 16 06 F6 | 	mov	arg03, #0
0c64c     23 18 06 F6 | 	mov	arg04, #35
0c650     50 17 B1 FD | 	call	#__system___basic_print_float
0c654     00 12 06 F6 | 	mov	arg01, #0
0c658     0A 14 06 F6 | 	mov	arg02, #10
0c65c     00 16 06 F6 | 	mov	arg03, #0
0c660     B4 F2 B0 FD | 	call	#__system___basic_print_char
0c664     00 12 06 F6 | 	mov	arg01, #0
0c668     30 3F B1 FD | 	call	#__system___getiolock_0442
0c66c     FD 00 68 FC | 	wrlong	#0, result1
0c670     08 4E 05 F1 | 	add	fp, #8
0c674     A7 12 02 FB | 	rdlong	arg01, fp
0c678     08 4E 85 F1 | 	sub	fp, #8
0c67c     1A 12 06 F1 | 	add	arg01, #26
0c680     09 01 5A FC | 	wrword	#256, arg01
0c684                 | LR__0948
0c684     08 4E 05 F1 | 	add	fp, #8
0c688     A7 12 02 FB | 	rdlong	arg01, fp
0c68c     20 12 06 F1 | 	add	arg01, #32
0c690     09 01 68 FC | 	wrlong	#0, arg01
0c694                 | ' 'dpoke base2+28,$4000_0000
0c694                 | ' lpoke base2+32,0 
0c694                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
0c694     1C 4E 05 F1 | 	add	fp, #28
0c698     A7 24 02 FB | 	rdlong	local04, fp
0c69c     24 4E 85 F1 | 	sub	fp, #36
0c6a0     08 24 0E F2 | 	cmp	local04, #8 wz
0c6a4     18 00 90 5D |  if_ne	jmp	#LR__0949
0c6a8     08 4E 05 F1 | 	add	fp, #8
0c6ac     A7 12 02 FB | 	rdlong	arg01, fp
0c6b0     08 4E 85 F1 | 	sub	fp, #8
0c6b4     24 12 06 F1 | 	add	arg01, #36
0c6b8     09 01 68 FC | 	wrlong	#0, arg01
0c6bc     34 00 90 FD | 	jmp	#LR__0950
0c6c0                 | LR__0949
0c6c0     08 4E 05 F1 | 	add	fp, #8
0c6c4     A7 12 02 FB | 	rdlong	arg01, fp
0c6c8     24 12 06 F1 | 	add	arg01, #36
0c6cc     1C 4E 05 F1 | 	add	fp, #28
0c6d0     A7 14 02 FB | 	rdlong	arg02, fp
0c6d4     24 4E 85 F1 | 	sub	fp, #36
0c6d8     09 14 66 F0 | 	shl	arg02, #9
0c6dc     2C 00 00 FF 
0c6e0     CC E4 05 F1 | 	add	objptr, ##22732
0c6e4     F2 14 02 F1 | 	add	arg02, objptr
0c6e8     2C 00 00 FF 
0c6ec     CC E4 85 F1 | 	sub	objptr, ##22732
0c6f0     09 15 62 FC | 	wrlong	arg02, arg01
0c6f4                 | LR__0950
0c6f4     08 4E 05 F1 | 	add	fp, #8
0c6f8     A7 12 02 FB | 	rdlong	arg01, fp
0c6fc     28 12 06 F1 | 	add	arg01, #40
0c700     0C 4E 05 F1 | 	add	fp, #12
0c704     A7 14 02 FB | 	rdlong	arg02, fp
0c708     09 15 62 FC | 	wrlong	arg02, arg01
0c70c     0C 4E 85 F1 | 	sub	fp, #12
0c710     A7 12 02 FB | 	rdlong	arg01, fp
0c714     2C 12 06 F1 | 	add	arg01, #44
0c718     24 4E 05 F1 | 	add	fp, #36
0c71c     A7 14 02 FB | 	rdlong	arg02, fp
0c720     09 15 62 FC | 	wrlong	arg02, arg01
0c724                 | ' lpoke base2+40,speed' speed
0c724                 | ' lpoke base2+44,sus 'len
0c724                 | ' 
0c724                 | ' if delay>0 then waitms(delay) ' : print "wait "; round(params(6)) : l
0c724     04 4E 85 F1 | 	sub	fp, #4
0c728     A7 24 02 FB | 	rdlong	local04, fp
0c72c     28 4E 85 F1 | 	sub	fp, #40
0c730     01 24 56 F2 | 	cmps	local04, #1 wc
0c734     28 4E 05 31 |  if_ae	add	fp, #40
0c738     A7 12 02 3B |  if_ae	rdlong	arg01, fp
0c73c     28 4E 85 31 |  if_ae	sub	fp, #40
0c740     18 E8 B0 3D |  if_ae	call	#__system___waitms
0c744     A7 F0 03 F6 | 	mov	ptra, fp
0c748     B2 00 A0 FD | 	call	#popregs_
0c74c                 | _do_play_ret
0c74c     2D 00 64 FD | 	ret
0c750                 | 
0c750                 | ' 
0c750                 | ' sub do_release
0c750                 | _do_release
0c750     00 4A 05 F6 | 	mov	COUNT_, #0
0c754     A8 00 A0 FD | 	call	#pushregs_
0c758     10 F0 07 F1 | 	add	ptra, #16
0c75c     98 D3 BF FD | 	call	#_pop
0c760     FF 14 02 F6 | 	mov	arg02, result3
0c764     A7 FA 61 FC | 	wrlong	result1, fp
0c768     04 4E 05 F1 | 	add	fp, #4
0c76c     A7 FC 61 FC | 	wrlong	result2, fp
0c770     04 4E 05 F1 | 	add	fp, #4
0c774     A7 14 62 FC | 	wrlong	arg02, fp
0c778     08 4E 85 F1 | 	sub	fp, #8
0c77c     A7 12 02 F6 | 	mov	arg01, fp
0c780     C4 56 B0 FD | 	call	#_converttoint
0c784     0C 4E 05 F1 | 	add	fp, #12
0c788     A7 FA 61 FC | 	wrlong	result1, fp
0c78c                 | ' t1=pop()
0c78c                 | ' channel=converttoint(t1)
0c78c                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255 ' else printerror
0c78c     0C 4E 85 F1 | 	sub	fp, #12
0c790     00 FA 55 F2 | 	cmps	result1, #0 wc
0c794     44 00 90 CD |  if_b	jmp	#LR__0960
0c798     0C 4E 05 F1 | 	add	fp, #12
0c79c     A7 14 02 FB | 	rdlong	arg02, fp
0c7a0     0C 4E 85 F1 | 	sub	fp, #12
0c7a4     08 14 56 F2 | 	cmps	arg02, #8 wc
0c7a8     30 00 90 3D |  if_ae	jmp	#LR__0960
0c7ac     56 00 00 FF 
0c7b0     74 E5 05 F1 | 	add	objptr, ##44404
0c7b4     F2 12 02 FB | 	rdlong	arg01, objptr
0c7b8     56 00 00 FF 
0c7bc     74 E5 85 F1 | 	sub	objptr, ##44404
0c7c0     0C 4E 05 F1 | 	add	fp, #12
0c7c4     A7 14 02 FB | 	rdlong	arg02, fp
0c7c8     0C 4E 85 F1 | 	sub	fp, #12
0c7cc     06 14 66 F0 | 	shl	arg02, #6
0c7d0     0A 13 02 F1 | 	add	arg01, arg02
0c7d4     2C 12 06 F1 | 	add	arg01, #44
0c7d8     09 FF 69 FC | 	wrlong	#255, arg01
0c7dc                 | LR__0960
0c7dc     A7 F0 03 F6 | 	mov	ptra, fp
0c7e0     B2 00 A0 FD | 	call	#popregs_
0c7e4                 | _do_release_ret
0c7e4     2D 00 64 FD | 	ret
0c7e8                 | 
0c7e8                 | ' 
0c7e8                 | ' 
0c7e8                 | ' sub do_defsnd
0c7e8                 | _do_defsnd
0c7e8     05 4A 05 F6 | 	mov	COUNT_, #5
0c7ec     A8 00 A0 FD | 	call	#pushregs_
0c7f0     88 F0 07 F1 | 	add	ptra, #136
0c7f4     69 00 00 FF 
0c7f8     E4 E5 05 F1 | 	add	objptr, ##54244
0c7fc     F2 1A 02 FB | 	rdlong	arg05, objptr
0c800     0D 19 02 F6 | 	mov	arg04, arg05
0c804     01 18 66 F0 | 	shl	arg04, #1
0c808     0D 19 02 F1 | 	add	arg04, arg05
0c80c     02 18 66 F0 | 	shl	arg04, #2
0c810     03 00 00 FF 
0c814     04 E4 85 F1 | 	sub	objptr, ##1540
0c818     F2 18 02 F1 | 	add	arg04, objptr
0c81c     0C 1B 02 FB | 	rdlong	arg05, arg04
0c820     A7 1A 62 FC | 	wrlong	arg05, fp
0c824                 | ' 
0c824                 | ' numpar=compiledline(lineptr_e).result.uresult
0c824                 | ' 
0c824                 | ' 
0c824                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0c824                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0c824                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0c824                 | ' ' defsnd channel, oneint - loads the wave from the pointer
0c824                 | ' 
0c824                 | ' if numpar<2 then return
0c824     02 1A 56 F2 | 	cmps	arg05, #2 wc
0c828     66 00 00 FF 
0c82c     E0 E5 85 F1 | 	sub	objptr, ##52704
0c830     A0 09 90 CD |  if_b	jmp	#LR__0998
0c834                 | ' 
0c834                 | '   
0c834                 | ' if numpar=2 then
0c834     A7 1A 02 FB | 	rdlong	arg05, fp
0c838     02 1A 0E F2 | 	cmp	arg05, #2 wz
0c83c     0C 04 90 5D |  if_ne	jmp	#LR__0981
0c840     B4 D2 BF FD | 	call	#_pop
0c844     FF 1A 02 F6 | 	mov	arg05, result3
0c848     2C 4E 05 F1 | 	add	fp, #44
0c84c     A7 FA 61 FC | 	wrlong	result1, fp
0c850     04 4E 05 F1 | 	add	fp, #4
0c854     A7 FC 61 FC | 	wrlong	result2, fp
0c858     04 4E 05 F1 | 	add	fp, #4
0c85c     A7 1A 62 FC | 	wrlong	arg05, fp
0c860                 | '   t1=pop()
0c860                 | '   if t1.result_type=result_string2 then 
0c860     34 4E 85 F1 | 	sub	fp, #52
0c864     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0c868     20 00 90 5D |  if_ne	jmp	#LR__0970
0c86c     2C 4E 05 F1 | 	add	fp, #44
0c870     A7 12 02 FB | 	rdlong	arg01, fp
0c874     2C 4E 85 F1 | 	sub	fp, #44
0c878     98 11 B0 FD | 	call	#_convertstring
0c87c     38 4E 05 F1 | 	add	fp, #56
0c880     A7 FA 61 FC | 	wrlong	result1, fp
0c884     38 4E 85 F1 | 	sub	fp, #56
0c888     58 00 90 FD | 	jmp	#LR__0973
0c88c                 | LR__0970
0c88c     34 4E 05 F1 | 	add	fp, #52
0c890     A7 1A 02 FB | 	rdlong	arg05, fp
0c894     34 4E 85 F1 | 	sub	fp, #52
0c898     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0c89c     18 00 90 5D |  if_ne	jmp	#LR__0971
0c8a0     2C 4E 05 F1 | 	add	fp, #44
0c8a4     A7 1A 02 FB | 	rdlong	arg05, fp
0c8a8     0C 4E 05 F1 | 	add	fp, #12
0c8ac     A7 1A 62 FC | 	wrlong	arg05, fp
0c8b0     38 4E 85 F1 | 	sub	fp, #56
0c8b4     2C 00 90 FD | 	jmp	#LR__0972
0c8b8                 | LR__0971
0c8b8     53 01 00 FF 
0c8bc     66 1B 06 F6 | 	mov	arg05, ##@LR__4708
0c8c0     38 4E 05 F1 | 	add	fp, #56
0c8c4     A7 1A 62 FC | 	wrlong	arg05, fp
0c8c8     0C 4E 85 F1 | 	sub	fp, #12
0c8cc     A7 12 02 F6 | 	mov	arg01, fp
0c8d0     2C 4E 85 F1 | 	sub	fp, #44
0c8d4     70 55 B0 FD | 	call	#_converttoint
0c8d8     14 4E 05 F1 | 	add	fp, #20
0c8dc     A7 FA 61 FC | 	wrlong	result1, fp
0c8e0     14 4E 85 F1 | 	sub	fp, #20
0c8e4                 | LR__0972
0c8e4                 | LR__0973
0c8e4                 | ' 
0c8e4                 | '     
0c8e4                 | '   if s<>"" then 
0c8e4     38 4E 05 F1 | 	add	fp, #56
0c8e8     A7 12 02 FB | 	rdlong	arg01, fp
0c8ec     38 4E 85 F1 | 	sub	fp, #56
0c8f0     53 01 00 FF 
0c8f4     67 15 06 F6 | 	mov	arg02, ##@LR__4709
0c8f8     94 E3 B0 FD | 	call	#__system___string_cmp
0c8fc     00 FA 0D F2 | 	cmp	result1, #0 wz
0c900     88 01 90 AD |  if_e	jmp	#LR__0975
0c904     F0 D1 BF FD | 	call	#_pop
0c908     FF 1A 02 F6 | 	mov	arg05, result3
0c90c     2C 4E 05 F1 | 	add	fp, #44
0c910     A7 FA 61 FC | 	wrlong	result1, fp
0c914     04 4E 05 F1 | 	add	fp, #4
0c918     A7 FC 61 FC | 	wrlong	result2, fp
0c91c     04 4E 05 F1 | 	add	fp, #4
0c920     A7 1A 62 FC | 	wrlong	arg05, fp
0c924     08 4E 85 F1 | 	sub	fp, #8
0c928     A7 12 02 F6 | 	mov	arg01, fp
0c92c     2C 4E 85 F1 | 	sub	fp, #44
0c930     14 55 B0 FD | 	call	#_converttoint
0c934     10 4E 05 F1 | 	add	fp, #16
0c938     A7 FA 61 FC | 	wrlong	result1, fp
0c93c     10 4E 85 F1 | 	sub	fp, #16
0c940                 | '     t1=pop()
0c940                 | '     channel=converttoint(t1) 
0c940                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0c940     09 12 06 F6 | 	mov	arg01, #9
0c944     88 32 B1 FD | 	call	#__system__close
0c948     09 1E 06 F6 | 	mov	local01, #9
0c94c     53 01 00 FF 
0c950     68 13 06 F6 | 	mov	arg01, ##@LR__4710
0c954     38 4E 05 F1 | 	add	fp, #56
0c958     A7 14 02 FB | 	rdlong	arg02, fp
0c95c     38 4E 85 F1 | 	sub	fp, #56
0c960     60 E3 B0 FD | 	call	#__system___string_concat
0c964     FD 14 02 F6 | 	mov	arg02, result1
0c968     0F 13 02 F6 | 	mov	arg01, local01
0c96c     00 16 06 F6 | 	mov	arg03, #0
0c970     F8 EE B0 FD | 	call	#__system___basic_open_string
0c974     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0c978     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0c97c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0c980     7B 00 00 FF 
0c984     74 E4 05 F1 | 	add	objptr, ##63092
0c988     F2 FA 61 FC | 	wrlong	result1, objptr
0c98c                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0c98c     7B 00 00 FF 
0c990     74 E4 85 F1 | 	sub	objptr, ##63092
0c994     B0 00 90 AD |  if_e	jmp	#LR__0974
0c998     00 12 06 F6 | 	mov	arg01, #0
0c99c     FC 3B B1 FD | 	call	#__system___getiolock_0442
0c9a0     FD 12 02 F6 | 	mov	arg01, result1
0c9a4     C0 E2 B0 FD | 	call	#__system___lockmem
0c9a8     53 01 00 FF 
0c9ac     75 15 06 F6 | 	mov	arg02, ##@LR__4711
0c9b0     00 12 06 F6 | 	mov	arg01, #0
0c9b4     00 16 06 F6 | 	mov	arg03, #0
0c9b8     B4 EF B0 FD | 	call	#__system___basic_print_string
0c9bc     7B 00 00 FF 
0c9c0     74 E4 05 F1 | 	add	objptr, ##63092
0c9c4     F2 14 02 FB | 	rdlong	arg02, objptr
0c9c8     7B 00 00 FF 
0c9cc     74 E4 85 F1 | 	sub	objptr, ##63092
0c9d0     00 12 06 F6 | 	mov	arg01, #0
0c9d4     00 16 06 F6 | 	mov	arg03, #0
0c9d8     0A 18 06 F6 | 	mov	arg04, #10
0c9dc     D4 EF B0 FD | 	call	#__system___basic_print_integer
0c9e0     53 01 00 FF 
0c9e4     83 15 06 F6 | 	mov	arg02, ##@LR__4712
0c9e8     00 12 06 F6 | 	mov	arg01, #0
0c9ec     00 16 06 F6 | 	mov	arg03, #0
0c9f0     7C EF B0 FD | 	call	#__system___basic_print_string
0c9f4     00 1E 06 F6 | 	mov	local01, #0
0c9f8     7B 00 00 FF 
0c9fc     74 E4 05 F1 | 	add	objptr, ##63092
0ca00     F2 12 02 FB | 	rdlong	arg01, objptr
0ca04     7B 00 00 FF 
0ca08     74 E4 85 F1 | 	sub	objptr, ##63092
0ca0c     90 08 B1 FD | 	call	#__system___strerror
0ca10     FD 14 02 F6 | 	mov	arg02, result1
0ca14     0F 13 02 F6 | 	mov	arg01, local01
0ca18     00 16 06 F6 | 	mov	arg03, #0
0ca1c     50 EF B0 FD | 	call	#__system___basic_print_string
0ca20     00 12 06 F6 | 	mov	arg01, #0
0ca24     0A 14 06 F6 | 	mov	arg02, #10
0ca28     00 16 06 F6 | 	mov	arg03, #0
0ca2c     E8 EE B0 FD | 	call	#__system___basic_print_char
0ca30     00 12 06 F6 | 	mov	arg01, #0
0ca34     64 3B B1 FD | 	call	#__system___getiolock_0442
0ca38     FD 00 68 FC | 	wrlong	#0, result1
0ca3c     09 12 06 F6 | 	mov	arg01, #9
0ca40     8C 31 B1 FD | 	call	#__system__close
0ca44     8C 07 90 FD | 	jmp	#LR__0998
0ca48                 | LR__0974
0ca48                 | '     get #9,17,samplebuf(channel,0),1024
0ca48     10 4E 05 F1 | 	add	fp, #16
0ca4c     A7 16 02 FB | 	rdlong	arg03, fp
0ca50     10 4E 85 F1 | 	sub	fp, #16
0ca54     0B 16 66 F0 | 	shl	arg03, #11
0ca58     0C 00 00 FF 
0ca5c     CC E4 05 F1 | 	add	objptr, ##6348
0ca60     F2 16 02 F1 | 	add	arg03, objptr
0ca64     09 12 06 F6 | 	mov	arg01, #9
0ca68     11 14 06 F6 | 	mov	arg02, #17
0ca6c     0A 18 C6 F9 | 	decod	arg04, #10
0ca70     02 1A 06 F6 | 	mov	arg05, #2
0ca74     0C 00 00 FF 
0ca78     CC E4 85 F1 | 	sub	objptr, ##6348
0ca7c     00 F0 B0 FD | 	call	#__system___basic_get
0ca80                 | '     close #9
0ca80     09 12 06 F6 | 	mov	arg01, #9
0ca84     48 31 B1 FD | 	call	#__system__close
0ca88                 | '                                                                        'for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0ca88                 | '     return
0ca88     48 07 90 FD | 	jmp	#LR__0998
0ca8c                 | LR__0975
0ca8c                 | '     if wptr < ($80000 - 2048) then 
0ca8c     14 4E 05 F1 | 	add	fp, #20
0ca90     A7 1E 02 FB | 	rdlong	local01, fp
0ca94     14 4E 85 F1 | 	sub	fp, #20
0ca98     FC 03 00 FF 
0ca9c     00 1E 56 F2 | 	cmps	local01, ##522240 wc
0caa0     80 00 90 3D |  if_ae	jmp	#LR__0978
0caa4                 | '       for i=0 to 1023: samplebuf(channel,i)=dpeek(wptr+2*i): next i
0caa4     04 4E 05 F1 | 	add	fp, #4
0caa8     A7 00 68 FC | 	wrlong	#0, fp
0caac     04 4E 85 F1 | 	sub	fp, #4
0cab0     0C 00 00 FF 
0cab4     CC E4 05 F1 | 	add	objptr, ##6348
0cab8     97 2E 48 FB | 	callpa	#(@LR__0977-@LR__0976)>>2,fcache_load_ptr_
0cabc                 | LR__0976
0cabc     10 4E 05 F1 | 	add	fp, #16
0cac0     A7 1E 02 FB | 	rdlong	local01, fp
0cac4     0B 1E 66 F0 | 	shl	local01, #11
0cac8     F2 1E 02 F1 | 	add	local01, objptr
0cacc     0C 4E 85 F1 | 	sub	fp, #12
0cad0     A7 1A 02 FB | 	rdlong	arg05, fp
0cad4     0D 19 02 F6 | 	mov	arg04, arg05
0cad8     01 18 66 F0 | 	shl	arg04, #1
0cadc     0F 19 02 F1 | 	add	arg04, local01
0cae0     10 4E 05 F1 | 	add	fp, #16
0cae4     A7 12 02 FB | 	rdlong	arg01, fp
0cae8     01 1A 66 F0 | 	shl	arg05, #1
0caec     0D 13 02 F1 | 	add	arg01, arg05
0caf0     09 FB E1 FA | 	rdword	result1, arg01
0caf4     0C FB 51 FC | 	wrword	result1, arg04
0caf8     10 4E 85 F1 | 	sub	fp, #16
0cafc     A7 1E 02 FB | 	rdlong	local01, fp
0cb00     01 1E 06 F1 | 	add	local01, #1
0cb04     A7 1E 62 FC | 	wrlong	local01, fp
0cb08     04 4E 85 F1 | 	sub	fp, #4
0cb0c     02 00 00 FF 
0cb10     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0cb14     A4 FF 9F CD |  if_b	jmp	#LR__0976
0cb18                 | LR__0977
0cb18     0C 00 00 FF 
0cb1c     CC E4 85 F1 | 	sub	objptr, ##6348
0cb20     B0 06 90 FD | 	jmp	#LR__0998
0cb24                 | LR__0978
0cb24                 | '       for i=0 to 1023 : samplebuf(channel,i)=psdpeek(wptr+2*i) : next i
0cb24     04 4E 05 F1 | 	add	fp, #4
0cb28     A7 00 68 FC | 	wrlong	#0, fp
0cb2c     04 4E 85 F1 | 	sub	fp, #4
0cb30                 | LR__0979
0cb30     10 4E 05 F1 | 	add	fp, #16
0cb34     A7 1A 02 FB | 	rdlong	arg05, fp
0cb38     0B 1A 66 F0 | 	shl	arg05, #11
0cb3c     0C 00 00 FF 
0cb40     CC E4 05 F1 | 	add	objptr, ##6348
0cb44     F2 1A 02 F1 | 	add	arg05, objptr
0cb48     0C 4E 85 F1 | 	sub	fp, #12
0cb4c     A7 18 02 FB | 	rdlong	arg04, fp
0cb50     0C 21 02 F6 | 	mov	local02, arg04
0cb54     01 20 66 F0 | 	shl	local02, #1
0cb58     0D 21 02 F1 | 	add	local02, arg05
0cb5c     10 4E 05 F1 | 	add	fp, #16
0cb60     A7 12 02 FB | 	rdlong	arg01, fp
0cb64     14 4E 85 F1 | 	sub	fp, #20
0cb68     01 18 66 F0 | 	shl	arg04, #1
0cb6c     0C 13 02 F1 | 	add	arg01, arg04
0cb70     0C 00 00 FF 
0cb74     CC E4 85 F1 | 	sub	objptr, ##6348
0cb78     F0 AC B0 FD | 	call	#_psdpeek
0cb7c     10 FB 51 FC | 	wrword	result1, local02
0cb80     04 4E 05 F1 | 	add	fp, #4
0cb84     A7 22 02 FB | 	rdlong	local03, fp
0cb88     01 22 06 F1 | 	add	local03, #1
0cb8c     A7 22 62 FC | 	wrlong	local03, fp
0cb90     04 4E 85 F1 | 	sub	fp, #4
0cb94     02 00 00 FF 
0cb98     00 22 56 F2 | 	cmps	local03, ##1024 wc
0cb9c     90 FF 9F CD |  if_b	jmp	#LR__0979
0cba0                 | '     return 
0cba0     30 06 90 FD | 	jmp	#LR__0998
0cba4                 | '   
0cba4                 | '   par=converttoint(t1)  : print par
0cba4                 | '   t1=pop()
0cba4                 | '   channel=converttoint(t1)  
0cba4                 | '   if par=0 then for i=0 to 1023: samplebuf(channel,i)=round(32600*sin(1.0/512*3.14159265359*i)) : next i
0cba4                 | LR__0980
0cba4     10 4E 05 F1 | 	add	fp, #16
0cba8     A7 22 02 FB | 	rdlong	local03, fp
0cbac     0B 22 66 F0 | 	shl	local03, #11
0cbb0     0C 00 00 FF 
0cbb4     CC E4 05 F1 | 	add	objptr, ##6348
0cbb8     F2 22 02 F1 | 	add	local03, objptr
0cbbc     0C 4E 85 F1 | 	sub	fp, #12
0cbc0     A7 12 02 FB | 	rdlong	arg01, fp
0cbc4     09 21 02 F6 | 	mov	local02, arg01
0cbc8     01 20 66 F0 | 	shl	local02, #1
0cbcc     11 21 02 F1 | 	add	local02, local03
0cbd0     04 4E 85 F1 | 	sub	fp, #4
0cbd4     0C 00 00 FF 
0cbd8     CC E4 85 F1 | 	sub	objptr, ##6348
0cbdc     09 13 52 F6 | 	abs	arg01, arg01 wc
0cbe0     1F 24 C6 C9 |  if_b	decod	local04, #31
0cbe4     00 24 06 36 |  if_ae	mov	local04, #0
0cbe8     9C 07 B1 FD | 	call	#__system___float_fromuns
0cbec     12 FB 61 F5 | 	xor	result1, local04
0cbf0     FD 14 02 F6 | 	mov	arg02, result1
0cbf4     87 E4 1D FF 
0cbf8     DB 13 06 F6 | 	mov	arg01, ##1003032539
0cbfc     8C 0B B1 FD | 	call	#__system___float_mul
0cc00     FD 12 02 F6 | 	mov	arg01, result1
0cc04     C0 14 B1 FD | 	call	#__system____builtin_sinf
0cc08     FD 14 02 F6 | 	mov	arg02, result1
0cc0c     58 7F 23 FF 
0cc10     00 12 06 F6 | 	mov	arg01, ##1191096320
0cc14     74 0B B1 FD | 	call	#__system___float_mul
0cc18     FD 12 02 F6 | 	mov	arg01, result1
0cc1c     01 14 06 F6 | 	mov	arg02, #1
0cc20     30 10 B1 FD | 	call	#__system___float_tointeger
0cc24     10 FB 51 FC | 	wrword	result1, local02
0cc28     04 4E 05 F1 | 	add	fp, #4
0cc2c     A7 22 02 FB | 	rdlong	local03, fp
0cc30     01 22 06 F1 | 	add	local03, #1
0cc34     A7 22 62 FC | 	wrlong	local03, fp
0cc38     04 4E 85 F1 | 	sub	fp, #4
0cc3c     02 00 00 FF 
0cc40     00 22 56 F2 | 	cmps	local03, ##1024 wc
0cc44     5C FF 9F CD |  if_b	jmp	#LR__0980
0cc48                 | '                                                                            '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0cc48                 | '   return
0cc48     88 05 90 FD | 	jmp	#LR__0998
0cc4c                 | LR__0981
0cc4c                 | ' for i=0 to 15 : harm(i)=0: next i  
0cc4c     04 4E 05 F1 | 	add	fp, #4
0cc50     A7 00 68 FC | 	wrlong	#0, fp
0cc54     97 16 48 FB | 	callpa	#(@LR__0983-@LR__0982)>>2,fcache_load_ptr_
0cc58                 | LR__0982
0cc58     A7 22 02 FB | 	rdlong	local03, fp
0cc5c     02 22 66 F0 | 	shl	local03, #2
0cc60     38 4E 05 F1 | 	add	fp, #56
0cc64     A7 22 02 F1 | 	add	local03, fp
0cc68     11 01 68 FC | 	wrlong	#0, local03
0cc6c     38 4E 85 F1 | 	sub	fp, #56
0cc70     A7 22 02 FB | 	rdlong	local03, fp
0cc74     01 22 06 F1 | 	add	local03, #1
0cc78     A7 22 62 FC | 	wrlong	local03, fp
0cc7c     10 22 56 F2 | 	cmps	local03, #16 wc
0cc80     D4 FF 9F CD |  if_b	jmp	#LR__0982
0cc84                 | LR__0983
0cc84     04 4E 85 F1 | 	sub	fp, #4
0cc88                 | ' for i=numpar to 2 step -1 
0cc88     A7 1E 02 FB | 	rdlong	local01, fp
0cc8c     04 4E 05 F1 | 	add	fp, #4
0cc90     A7 1E 62 FC | 	wrlong	local01, fp
0cc94     04 4E 85 F1 | 	sub	fp, #4
0cc98                 | LR__0984
0cc98     5C CE BF FD | 	call	#_pop
0cc9c     2C 4E 05 F1 | 	add	fp, #44
0cca0     A7 FA 61 FC | 	wrlong	result1, fp
0cca4     04 4E 05 F1 | 	add	fp, #4
0cca8     A7 FC 61 FC | 	wrlong	result2, fp
0ccac     04 4E 05 F1 | 	add	fp, #4
0ccb0     A7 FE 61 FC | 	wrlong	result3, fp
0ccb4     30 4E 85 F1 | 	sub	fp, #48
0ccb8     A7 22 02 FB | 	rdlong	local03, fp
0ccbc     02 22 86 F1 | 	sub	local03, #2
0ccc0     02 22 66 F0 | 	shl	local03, #2
0ccc4     38 4E 05 F1 | 	add	fp, #56
0ccc8     A7 22 02 F1 | 	add	local03, fp
0cccc     10 4E 85 F1 | 	sub	fp, #16
0ccd0     A7 12 02 F6 | 	mov	arg01, fp
0ccd4     2C 4E 85 F1 | 	sub	fp, #44
0ccd8     18 52 B0 FD | 	call	#_converttofloat
0ccdc     11 FB 61 FC | 	wrlong	result1, local03
0cce0     04 4E 05 F1 | 	add	fp, #4
0cce4     A7 22 02 FB | 	rdlong	local03, fp
0cce8     01 22 86 F1 | 	sub	local03, #1
0ccec     A7 22 62 FC | 	wrlong	local03, fp
0ccf0     04 4E 85 F1 | 	sub	fp, #4
0ccf4     02 22 56 F2 | 	cmps	local03, #2 wc
0ccf8     9C FF 9F 3D |  if_ae	jmp	#LR__0984
0ccfc     F8 CD BF FD | 	call	#_pop
0cd00     FF 1E 02 F6 | 	mov	local01, result3
0cd04     2C 4E 05 F1 | 	add	fp, #44
0cd08     A7 FA 61 FC | 	wrlong	result1, fp
0cd0c     04 4E 05 F1 | 	add	fp, #4
0cd10     A7 FC 61 FC | 	wrlong	result2, fp
0cd14     04 4E 05 F1 | 	add	fp, #4
0cd18     A7 1E 62 FC | 	wrlong	local01, fp
0cd1c     08 4E 85 F1 | 	sub	fp, #8
0cd20     A7 12 02 F6 | 	mov	arg01, fp
0cd24     2C 4E 85 F1 | 	sub	fp, #44
0cd28     1C 51 B0 FD | 	call	#_converttoint
0cd2c     FD 1E 02 F6 | 	mov	local01, result1
0cd30     10 4E 05 F1 | 	add	fp, #16
0cd34     A7 1E 62 FC | 	wrlong	local01, fp
0cd38     10 4E 85 F1 | 	sub	fp, #16
0cd3c                 | ' t1=pop()
0cd3c                 | ' channel=converttoint(t1) : print channel
0cd3c     00 12 06 F6 | 	mov	arg01, #0
0cd40     58 38 B1 FD | 	call	#__system___getiolock_0442
0cd44     FD 12 02 F6 | 	mov	arg01, result1
0cd48     1C DF B0 FD | 	call	#__system___lockmem
0cd4c     10 4E 05 F1 | 	add	fp, #16
0cd50     A7 14 02 FB | 	rdlong	arg02, fp
0cd54     10 4E 85 F1 | 	sub	fp, #16
0cd58     00 12 06 F6 | 	mov	arg01, #0
0cd5c     00 16 06 F6 | 	mov	arg03, #0
0cd60     0A 18 06 F6 | 	mov	arg04, #10
0cd64     4C EC B0 FD | 	call	#__system___basic_print_integer
0cd68     00 12 06 F6 | 	mov	arg01, #0
0cd6c     0A 14 06 F6 | 	mov	arg02, #10
0cd70     00 16 06 F6 | 	mov	arg03, #0
0cd74     A0 EB B0 FD | 	call	#__system___basic_print_char
0cd78     00 12 06 F6 | 	mov	arg01, #0
0cd7c     1C 38 B1 FD | 	call	#__system___getiolock_0442
0cd80     FD 00 68 FC | 	wrlong	#0, result1
0cd84                 | ' for j=0 to 1023: samplebuf(channel, i) =0 : next j
0cd84     08 4E 05 F1 | 	add	fp, #8
0cd88     02 00 80 FF 
0cd8c     A7 00 68 FC | 	wrlong	##1024, fp
0cd90     08 4E 85 F1 | 	sub	fp, #8
0cd94     0C 00 00 FF 
0cd98     CC E4 05 F1 | 	add	objptr, ##6348
0cd9c     97 18 48 FB | 	callpa	#(@LR__0987-@LR__0985)>>2,fcache_load_ptr_
0cda0                 | LR__0985
0cda0     02 00 00 FF 
0cda4     00 14 DC FC | 	rep	@LR__0988, ##1024
0cda8                 | LR__0986
0cda8     10 4E 05 F1 | 	add	fp, #16
0cdac     A7 20 02 FB | 	rdlong	local02, fp
0cdb0     0B 20 66 F0 | 	shl	local02, #11
0cdb4     F2 20 02 F1 | 	add	local02, objptr
0cdb8     0C 4E 85 F1 | 	sub	fp, #12
0cdbc     A7 22 02 FB | 	rdlong	local03, fp
0cdc0     04 4E 85 F1 | 	sub	fp, #4
0cdc4     01 22 66 F0 | 	shl	local03, #1
0cdc8     10 23 02 F1 | 	add	local03, local02
0cdcc     11 01 58 FC | 	wrword	#0, local03
0cdd0                 | LR__0987
0cdd0                 | LR__0988
0cdd0     0C 00 00 FF 
0cdd4     CC E4 85 F1 | 	sub	objptr, ##6348
0cdd8     20 4E 05 F1 | 	add	fp, #32
0cddc     A7 00 68 FC | 	wrlong	#0, fp
0cde0                 | ' max=0
0cde0                 | ' if harm(0)<0 then
0cde0     1C 4E 05 F1 | 	add	fp, #28
0cde4     A7 12 02 FB | 	rdlong	arg01, fp
0cde8     3C 4E 85 F1 | 	sub	fp, #60
0cdec     00 14 06 F6 | 	mov	arg02, #0
0cdf0     01 16 06 F6 | 	mov	arg03, #1
0cdf4     C8 0D B1 FD | 	call	#__system___float_cmp
0cdf8     00 FA 55 F2 | 	cmps	result1, #0 wc
0cdfc     04 01 90 3D |  if_ae	jmp	#LR__0991
0ce00     3C 4E 05 F1 | 	add	fp, #60
0ce04     A7 FA 01 FB | 	rdlong	result1, fp
0ce08     1F FA 05 F4 | 	bitl	result1, #31
0ce0c     24 4E 85 F1 | 	sub	fp, #36
0ce10     A7 FA 61 FC | 	wrlong	result1, fp
0ce14     28 4E 05 F1 | 	add	fp, #40
0ce18     A7 FA 01 FB | 	rdlong	result1, fp
0ce1c     1F FA 05 F4 | 	bitl	result1, #31
0ce20     24 4E 85 F1 | 	sub	fp, #36
0ce24     A7 FA 61 FC | 	wrlong	result1, fp
0ce28     20 4E 05 F1 | 	add	fp, #32
0ce2c     00 C0 9F FF 
0ce30     A7 00 68 FC | 	wrlong	##1065353216, fp
0ce34     24 4E 85 F1 | 	sub	fp, #36
0ce38     A7 1E 02 FB | 	rdlong	local01, fp
0ce3c     28 4E 05 F1 | 	add	fp, #40
0ce40     A7 1E 62 FC | 	wrlong	local01, fp
0ce44     24 4E 85 F1 | 	sub	fp, #36
0ce48     A7 1E 02 FB | 	rdlong	local01, fp
0ce4c     28 4E 05 F1 | 	add	fp, #40
0ce50     A7 1E 62 FC | 	wrlong	local01, fp
0ce54                 | '   harm(0)=1
0ce54                 | '   harm(1)=even
0ce54                 | '   harm(2)=odd
0ce54                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0ce54     40 4E 85 F1 | 	sub	fp, #64
0ce58     A7 06 68 FC | 	wrlong	#3, fp
0ce5c                 | LR__0989
0ce5c     A7 22 02 FB | 	rdlong	local03, fp
0ce60     11 27 02 F6 | 	mov	local05, local03
0ce64     02 26 66 F0 | 	shl	local05, #2
0ce68     38 4E 05 F1 | 	add	fp, #56
0ce6c     A7 26 02 F1 | 	add	local05, fp
0ce70     02 22 86 F1 | 	sub	local03, #2
0ce74     02 22 66 F0 | 	shl	local03, #2
0ce78     A7 22 02 F1 | 	add	local03, fp
0ce7c     11 13 02 FB | 	rdlong	arg01, local03
0ce80     24 4E 85 F1 | 	sub	fp, #36
0ce84     A7 14 02 FB | 	rdlong	arg02, fp
0ce88     18 4E 85 F1 | 	sub	fp, #24
0ce8c     FC 08 B1 FD | 	call	#__system___float_mul
0ce90     13 FB 61 FC | 	wrlong	result1, local05
0ce94     04 4E 05 F1 | 	add	fp, #4
0ce98     A7 22 02 FB | 	rdlong	local03, fp
0ce9c     02 22 06 F1 | 	add	local03, #2
0cea0     A7 22 62 FC | 	wrlong	local03, fp
0cea4     10 22 56 F2 | 	cmps	local03, #16 wc
0cea8     B0 FF 9F CD |  if_b	jmp	#LR__0989
0ceac                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0ceac     A7 08 68 FC | 	wrlong	#4, fp
0ceb0                 | LR__0990
0ceb0     A7 22 02 FB | 	rdlong	local03, fp
0ceb4     11 27 02 F6 | 	mov	local05, local03
0ceb8     02 26 66 F0 | 	shl	local05, #2
0cebc     38 4E 05 F1 | 	add	fp, #56
0cec0     A7 26 02 F1 | 	add	local05, fp
0cec4     02 22 86 F1 | 	sub	local03, #2
0cec8     02 22 66 F0 | 	shl	local03, #2
0cecc     A7 22 02 F1 | 	add	local03, fp
0ced0     11 13 02 FB | 	rdlong	arg01, local03
0ced4     20 4E 85 F1 | 	sub	fp, #32
0ced8     A7 14 02 FB | 	rdlong	arg02, fp
0cedc     1C 4E 85 F1 | 	sub	fp, #28
0cee0     A8 08 B1 FD | 	call	#__system___float_mul
0cee4     13 FB 61 FC | 	wrlong	result1, local05
0cee8     04 4E 05 F1 | 	add	fp, #4
0ceec     A7 22 02 FB | 	rdlong	local03, fp
0cef0     02 22 06 F1 | 	add	local03, #2
0cef4     A7 22 62 FC | 	wrlong	local03, fp
0cef8     0F 22 56 F2 | 	cmps	local03, #15 wc
0cefc     B0 FF 9F CD |  if_b	jmp	#LR__0990
0cf00     04 4E 85 F1 | 	sub	fp, #4
0cf04                 | LR__0991
0cf04                 | ' if harm(0)>=0 then ' synthesize with harmonics
0cf04     3C 4E 05 F1 | 	add	fp, #60
0cf08     A7 12 02 FB | 	rdlong	arg01, fp
0cf0c     3C 4E 85 F1 | 	sub	fp, #60
0cf10     00 14 06 F6 | 	mov	arg02, #0
0cf14     01 16 66 F6 | 	neg	arg03, #1
0cf18     A4 0C B1 FD | 	call	#__system___float_cmp
0cf1c     00 FA 55 F2 | 	cmps	result1, #0 wc
0cf20     B0 02 90 CD |  if_b	jmp	#LR__0997
0cf24                 | '   for i=0 to 1023
0cf24     04 4E 05 F1 | 	add	fp, #4
0cf28     A7 00 68 FC | 	wrlong	#0, fp
0cf2c     04 4E 85 F1 | 	sub	fp, #4
0cf30                 | LR__0992
0cf30     24 4E 05 F1 | 	add	fp, #36
0cf34     A7 00 68 FC | 	wrlong	#0, fp
0cf38                 | '     spl=0
0cf38                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0cf38     1C 4E 85 F1 | 	sub	fp, #28
0cf3c     A7 00 68 FC | 	wrlong	#0, fp
0cf40                 | LR__0993
0cf40     A7 26 02 FB | 	rdlong	local05, fp
0cf44     02 26 66 F0 | 	shl	local05, #2
0cf48     34 4E 05 F1 | 	add	fp, #52
0cf4c     A7 26 02 F1 | 	add	local05, fp
0cf50     13 23 02 FB | 	rdlong	local03, local05
0cf54     87 E4 1D FF 
0cf58     DB 27 06 F6 | 	mov	local05, ##1003032539
0cf5c     38 4E 85 F1 | 	sub	fp, #56
0cf60     A7 12 02 FB | 	rdlong	arg01, fp
0cf64     04 4E 85 F1 | 	sub	fp, #4
0cf68     09 13 52 F6 | 	abs	arg01, arg01 wc
0cf6c     1F 24 C6 C9 |  if_b	decod	local04, #31
0cf70     00 24 06 36 |  if_ae	mov	local04, #0
0cf74     10 04 B1 FD | 	call	#__system___float_fromuns
0cf78     12 FB 61 F5 | 	xor	result1, local04
0cf7c     FD 14 02 F6 | 	mov	arg02, result1
0cf80     13 13 02 F6 | 	mov	arg01, local05
0cf84     04 08 B1 FD | 	call	#__system___float_mul
0cf88     FD 26 02 F6 | 	mov	local05, result1
0cf8c     08 4E 05 F1 | 	add	fp, #8
0cf90     A7 12 02 FB | 	rdlong	arg01, fp
0cf94     08 4E 85 F1 | 	sub	fp, #8
0cf98     01 12 06 F1 | 	add	arg01, #1
0cf9c     09 13 52 F6 | 	abs	arg01, arg01 wc
0cfa0     1F 24 C6 C9 |  if_b	decod	local04, #31
0cfa4     00 24 06 36 |  if_ae	mov	local04, #0
0cfa8     DC 03 B1 FD | 	call	#__system___float_fromuns
0cfac     12 FB 61 F5 | 	xor	result1, local04
0cfb0     FD 14 02 F6 | 	mov	arg02, result1
0cfb4     13 13 02 F6 | 	mov	arg01, local05
0cfb8     D0 07 B1 FD | 	call	#__system___float_mul
0cfbc     FD 12 02 F6 | 	mov	arg01, result1
0cfc0     04 11 B1 FD | 	call	#__system____builtin_sinf
0cfc4     FD 14 02 F6 | 	mov	arg02, result1
0cfc8     11 13 02 F6 | 	mov	arg01, local03
0cfcc     BC 07 B1 FD | 	call	#__system___float_mul
0cfd0     FD 14 02 F6 | 	mov	arg02, result1
0cfd4     24 4E 05 F1 | 	add	fp, #36
0cfd8     A7 12 02 FB | 	rdlong	arg01, fp
0cfdc     24 4E 85 F1 | 	sub	fp, #36
0cfe0     D8 03 B1 FD | 	call	#__system___float_add
0cfe4     24 4E 05 F1 | 	add	fp, #36
0cfe8     A7 FA 61 FC | 	wrlong	result1, fp
0cfec     1C 4E 85 F1 | 	sub	fp, #28
0cff0     A7 16 02 FB | 	rdlong	arg03, fp
0cff4     01 16 06 F1 | 	add	arg03, #1
0cff8     A7 16 62 FC | 	wrlong	arg03, fp
0cffc     10 16 56 F2 | 	cmps	arg03, #16 wc
0d000     3C FF 9F CD |  if_b	jmp	#LR__0993
0d004                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0d004     1C 4E 05 F1 | 	add	fp, #28
0d008     A7 12 02 FB | 	rdlong	arg01, fp
0d00c     1F 12 06 F4 | 	bitl	arg01, #31
0d010     04 4E 85 F1 | 	sub	fp, #4
0d014     A7 14 02 FB | 	rdlong	arg02, fp
0d018     20 4E 85 F1 | 	sub	fp, #32
0d01c     01 16 66 F6 | 	neg	arg03, #1
0d020     9C 0B B1 FD | 	call	#__system___float_cmp
0d024     01 FA 55 F2 | 	cmps	result1, #1 wc
0d028     18 00 90 CD |  if_b	jmp	#LR__0994
0d02c     24 4E 05 F1 | 	add	fp, #36
0d030     A7 FA 01 FB | 	rdlong	result1, fp
0d034     1F FA 05 F4 | 	bitl	result1, #31
0d038     04 4E 85 F1 | 	sub	fp, #4
0d03c     A7 FA 61 FC | 	wrlong	result1, fp
0d040     20 4E 85 F1 | 	sub	fp, #32
0d044                 | LR__0994
0d044     04 4E 05 F1 | 	add	fp, #4
0d048     A7 22 02 FB | 	rdlong	local03, fp
0d04c     01 22 06 F1 | 	add	local03, #1
0d050     A7 22 62 FC | 	wrlong	local03, fp
0d054     04 4E 85 F1 | 	sub	fp, #4
0d058     02 00 00 FF 
0d05c     00 22 56 F2 | 	cmps	local03, ##1024 wc
0d060     CC FE 9F CD |  if_b	jmp	#LR__0992
0d064                 | '   for i=0 to 1023
0d064     04 4E 05 F1 | 	add	fp, #4
0d068     A7 00 68 FC | 	wrlong	#0, fp
0d06c     04 4E 85 F1 | 	sub	fp, #4
0d070                 | LR__0995
0d070     24 4E 05 F1 | 	add	fp, #36
0d074     A7 00 68 FC | 	wrlong	#0, fp
0d078                 | '     spl=0
0d078                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0d078     1C 4E 85 F1 | 	sub	fp, #28
0d07c     A7 00 68 FC | 	wrlong	#0, fp
0d080                 | LR__0996
0d080     A7 26 02 FB | 	rdlong	local05, fp
0d084     02 26 66 F0 | 	shl	local05, #2
0d088     34 4E 05 F1 | 	add	fp, #52
0d08c     A7 26 02 F1 | 	add	local05, fp
0d090     13 27 02 FB | 	rdlong	local05, local05
0d094     1C 4E 85 F1 | 	sub	fp, #28
0d098     A7 14 02 FB | 	rdlong	arg02, fp
0d09c     20 4E 85 F1 | 	sub	fp, #32
0d0a0     58 7F 23 FF 
0d0a4     00 12 06 F6 | 	mov	arg01, ##1191096320
0d0a8     E4 08 B1 FD | 	call	#__system___float_div
0d0ac     FD 14 02 F6 | 	mov	arg02, result1
0d0b0     13 13 02 F6 | 	mov	arg01, local05
0d0b4     D4 06 B1 FD | 	call	#__system___float_mul
0d0b8     FD 22 02 F6 | 	mov	local03, result1
0d0bc     87 E4 1D FF 
0d0c0     DB 27 06 F6 | 	mov	local05, ##1003032539
0d0c4     04 4E 05 F1 | 	add	fp, #4
0d0c8     A7 12 02 FB | 	rdlong	arg01, fp
0d0cc     04 4E 85 F1 | 	sub	fp, #4
0d0d0     09 13 52 F6 | 	abs	arg01, arg01 wc
0d0d4     1F 24 C6 C9 |  if_b	decod	local04, #31
0d0d8     00 24 06 36 |  if_ae	mov	local04, #0
0d0dc     A8 02 B1 FD | 	call	#__system___float_fromuns
0d0e0     12 FB 61 F5 | 	xor	result1, local04
0d0e4     FD 14 02 F6 | 	mov	arg02, result1
0d0e8     13 13 02 F6 | 	mov	arg01, local05
0d0ec     9C 06 B1 FD | 	call	#__system___float_mul
0d0f0     FD 26 02 F6 | 	mov	local05, result1
0d0f4     08 4E 05 F1 | 	add	fp, #8
0d0f8     A7 12 02 FB | 	rdlong	arg01, fp
0d0fc     08 4E 85 F1 | 	sub	fp, #8
0d100     01 12 06 F1 | 	add	arg01, #1
0d104     09 13 52 F6 | 	abs	arg01, arg01 wc
0d108     1F 24 C6 C9 |  if_b	decod	local04, #31
0d10c     00 24 06 36 |  if_ae	mov	local04, #0
0d110     74 02 B1 FD | 	call	#__system___float_fromuns
0d114     12 FB 61 F5 | 	xor	result1, local04
0d118     FD 14 02 F6 | 	mov	arg02, result1
0d11c     13 13 02 F6 | 	mov	arg01, local05
0d120     68 06 B1 FD | 	call	#__system___float_mul
0d124     FD 12 02 F6 | 	mov	arg01, result1
0d128     9C 0F B1 FD | 	call	#__system____builtin_sinf
0d12c     FD 14 02 F6 | 	mov	arg02, result1
0d130     11 13 02 F6 | 	mov	arg01, local03
0d134     54 06 B1 FD | 	call	#__system___float_mul
0d138     FD 14 02 F6 | 	mov	arg02, result1
0d13c     24 4E 05 F1 | 	add	fp, #36
0d140     A7 12 02 FB | 	rdlong	arg01, fp
0d144     24 4E 85 F1 | 	sub	fp, #36
0d148     70 02 B1 FD | 	call	#__system___float_add
0d14c     24 4E 05 F1 | 	add	fp, #36
0d150     A7 FA 61 FC | 	wrlong	result1, fp
0d154     1C 4E 85 F1 | 	sub	fp, #28
0d158     A7 26 02 FB | 	rdlong	local05, fp
0d15c     01 26 06 F1 | 	add	local05, #1
0d160     A7 26 62 FC | 	wrlong	local05, fp
0d164     10 26 56 F2 | 	cmps	local05, #16 wc
0d168     14 FF 9F CD |  if_b	jmp	#LR__0996
0d16c     08 4E 05 F1 | 	add	fp, #8
0d170     A7 26 02 FB | 	rdlong	local05, fp
0d174     0B 26 66 F0 | 	shl	local05, #11
0d178     0C 00 00 FF 
0d17c     CC E4 05 F1 | 	add	objptr, ##6348
0d180     F2 26 02 F1 | 	add	local05, objptr
0d184     0C 4E 85 F1 | 	sub	fp, #12
0d188     A7 20 02 FB | 	rdlong	local02, fp
0d18c     01 20 66 F0 | 	shl	local02, #1
0d190     13 21 02 F1 | 	add	local02, local05
0d194     20 4E 05 F1 | 	add	fp, #32
0d198     A7 12 02 FB | 	rdlong	arg01, fp
0d19c     24 4E 85 F1 | 	sub	fp, #36
0d1a0     0C 00 00 FF 
0d1a4     CC E4 85 F1 | 	sub	objptr, ##6348
0d1a8     01 14 06 F6 | 	mov	arg02, #1
0d1ac     A4 0A B1 FD | 	call	#__system___float_tointeger
0d1b0     10 FB 51 FC | 	wrword	result1, local02
0d1b4     04 4E 05 F1 | 	add	fp, #4
0d1b8     A7 22 02 FB | 	rdlong	local03, fp
0d1bc     01 22 06 F1 | 	add	local03, #1
0d1c0     A7 22 62 FC | 	wrlong	local03, fp
0d1c4     04 4E 85 F1 | 	sub	fp, #4
0d1c8     02 00 00 FF 
0d1cc     00 22 56 F2 | 	cmps	local03, ##1024 wc
0d1d0     9C FE 9F CD |  if_b	jmp	#LR__0995
0d1d4                 | LR__0997
0d1d4                 | LR__0998
0d1d4     A7 F0 03 F6 | 	mov	ptra, fp
0d1d8     B2 00 A0 FD | 	call	#popregs_
0d1dc                 | _do_defsnd_ret
0d1dc     2D 00 64 FD | 	ret
0d1e0                 | 
0d1e0                 | ' 
0d1e0                 | ' ' ---------------  List the program. 
0d1e0                 | ' 
0d1e0                 | ' sub do_list
0d1e0                 | _do_list
0d1e0     02 4A 05 F6 | 	mov	COUNT_, #2
0d1e4     A8 00 A0 FD | 	call	#pushregs_
0d1e8     B8 F0 07 F1 | 	add	ptra, #184
0d1ec     04 4E 05 F1 | 	add	fp, #4
0d1f0     A7 00 68 FC | 	wrlong	#0, fp
0d1f4     04 4E 05 F1 | 	add	fp, #4
0d1f8     FF FF BF FF 
0d1fc     A7 FE 6B FC | 	wrlong	##2147483647, fp
0d200     08 4E 85 F1 | 	sub	fp, #8
0d204     69 00 00 FF 
0d208     E4 E5 05 F1 | 	add	objptr, ##54244
0d20c     F2 1E 02 FB | 	rdlong	local01, objptr
0d210     0F 17 02 F6 | 	mov	arg03, local01
0d214     01 16 66 F0 | 	shl	arg03, #1
0d218     0F 17 02 F1 | 	add	arg03, local01
0d21c     02 16 66 F0 | 	shl	arg03, #2
0d220     03 00 00 FF 
0d224     04 E4 85 F1 | 	sub	objptr, ##1540
0d228     F2 16 02 F1 | 	add	arg03, objptr
0d22c     0B 17 02 FB | 	rdlong	arg03, arg03
0d230     A7 16 62 FC | 	wrlong	arg03, fp
0d234                 | ' 
0d234                 | ' startline=0 : endline=$7FFFFFFF
0d234                 | ' numpar=compiledline(lineptr_e).result.uresult
0d234                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
0d234     01 16 0E F2 | 	cmp	arg03, #1 wz
0d238     66 00 00 FF 
0d23c     E0 E5 85 F1 | 	sub	objptr, ##52704
0d240     3C 00 90 5D |  if_ne	jmp	#LR__1000
0d244     B0 C8 BF FD | 	call	#_pop
0d248     FF 1E 02 F6 | 	mov	local01, result3
0d24c     0C 4E 05 F1 | 	add	fp, #12
0d250     A7 FA 61 FC | 	wrlong	result1, fp
0d254     04 4E 05 F1 | 	add	fp, #4
0d258     A7 FC 61 FC | 	wrlong	result2, fp
0d25c     04 4E 05 F1 | 	add	fp, #4
0d260     A7 1E 62 FC | 	wrlong	local01, fp
0d264     08 4E 85 F1 | 	sub	fp, #8
0d268     A7 12 02 F6 | 	mov	arg01, fp
0d26c     0C 4E 85 F1 | 	sub	fp, #12
0d270     D4 4B B0 FD | 	call	#_converttoint
0d274     04 4E 05 F1 | 	add	fp, #4
0d278     A7 FA 61 FC | 	wrlong	result1, fp
0d27c     04 4E 85 F1 | 	sub	fp, #4
0d280                 | LR__1000
0d280                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
0d280     A7 16 02 FB | 	rdlong	arg03, fp
0d284     02 16 0E F2 | 	cmp	arg03, #2 wz
0d288     7C 00 90 5D |  if_ne	jmp	#LR__1001
0d28c     68 C8 BF FD | 	call	#_pop
0d290     FF 1E 02 F6 | 	mov	local01, result3
0d294     0C 4E 05 F1 | 	add	fp, #12
0d298     A7 FA 61 FC | 	wrlong	result1, fp
0d29c     04 4E 05 F1 | 	add	fp, #4
0d2a0     A7 FC 61 FC | 	wrlong	result2, fp
0d2a4     04 4E 05 F1 | 	add	fp, #4
0d2a8     A7 1E 62 FC | 	wrlong	local01, fp
0d2ac     08 4E 85 F1 | 	sub	fp, #8
0d2b0     A7 12 02 F6 | 	mov	arg01, fp
0d2b4     0C 4E 85 F1 | 	sub	fp, #12
0d2b8     8C 4B B0 FD | 	call	#_converttoint
0d2bc     FD 1E 02 F6 | 	mov	local01, result1
0d2c0     08 4E 05 F1 | 	add	fp, #8
0d2c4     A7 1E 62 FC | 	wrlong	local01, fp
0d2c8     08 4E 85 F1 | 	sub	fp, #8
0d2cc     28 C8 BF FD | 	call	#_pop
0d2d0     FF 1E 02 F6 | 	mov	local01, result3
0d2d4     0C 4E 05 F1 | 	add	fp, #12
0d2d8     A7 FA 61 FC | 	wrlong	result1, fp
0d2dc     04 4E 05 F1 | 	add	fp, #4
0d2e0     A7 FC 61 FC | 	wrlong	result2, fp
0d2e4     04 4E 05 F1 | 	add	fp, #4
0d2e8     A7 1E 62 FC | 	wrlong	local01, fp
0d2ec     08 4E 85 F1 | 	sub	fp, #8
0d2f0     A7 12 02 F6 | 	mov	arg01, fp
0d2f4     0C 4E 85 F1 | 	sub	fp, #12
0d2f8     4C 4B B0 FD | 	call	#_converttoint
0d2fc     04 4E 05 F1 | 	add	fp, #4
0d300     A7 FA 61 FC | 	wrlong	result1, fp
0d304     04 4E 85 F1 | 	sub	fp, #4
0d308                 | LR__1001
0d308                 | ' 
0d308                 | ' 
0d308                 | ' print
0d308     00 12 06 F6 | 	mov	arg01, #0
0d30c     8C 32 B1 FD | 	call	#__system___getiolock_0442
0d310     FD 12 02 F6 | 	mov	arg01, result1
0d314     50 D9 B0 FD | 	call	#__system___lockmem
0d318     00 12 06 F6 | 	mov	arg01, #0
0d31c     0A 14 06 F6 | 	mov	arg02, #10
0d320     00 16 06 F6 | 	mov	arg03, #0
0d324     F0 E5 B0 FD | 	call	#__system___basic_print_char
0d328     00 12 06 F6 | 	mov	arg01, #0
0d32c     6C 32 B1 FD | 	call	#__system___getiolock_0442
0d330     FD 00 68 FC | 	wrlong	#0, result1
0d334     69 00 00 FF 
0d338     E8 E5 05 F1 | 	add	objptr, ##54248
0d33c     F2 20 02 FB | 	rdlong	local02, objptr
0d340     11 00 00 FF 
0d344     84 E4 05 F1 | 	add	objptr, ##8836
0d348     F2 20 62 FC | 	wrlong	local02, objptr
0d34c     7B 00 00 FF 
0d350     6C E4 85 F1 | 	sub	objptr, ##63084
0d354                 | ' do 
0d354                 | LR__1002
0d354     20 4E 05 F1 | 	add	fp, #32
0d358     A7 12 02 F6 | 	mov	arg01, fp
0d35c     20 4E 85 F1 | 	sub	fp, #32
0d360     7B 00 00 FF 
0d364     6C E4 05 F1 | 	add	objptr, ##63084
0d368     F2 14 02 FB | 	rdlong	arg02, objptr
0d36c     18 16 06 F6 | 	mov	arg03, #24
0d370     6F 00 00 FF 
0d374     AC E5 85 F1 | 	sub	objptr, ##57260
0d378     84 CD B0 FD | 	call	#_psram_spin2_read1
0d37c     0B 00 00 FF 
0d380     C0 E4 85 F1 | 	sub	objptr, ##5824
0d384                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
0d384                 | '   
0d384                 | '   if header(0)<> $FFFFFFFF then
0d384     20 4E 05 F1 | 	add	fp, #32
0d388     A7 20 02 FB | 	rdlong	local02, fp
0d38c     20 4E 85 F1 | 	sub	fp, #32
0d390     FF FF 7F FF 
0d394     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0d398     A8 00 90 AD |  if_e	jmp	#LR__1004
0d39c     38 4E 05 F1 | 	add	fp, #56
0d3a0     3F 16 06 F6 | 	mov	arg03, #63
0d3a4     28 16 62 FD | 	setq	arg03
0d3a8     A7 00 68 FC | 	wrlong	#0, fp
0d3ac     A7 12 02 F6 | 	mov	arg01, fp
0d3b0     10 4E 85 F1 | 	sub	fp, #16
0d3b4     A7 14 02 FB | 	rdlong	arg02, fp
0d3b8     04 4E 05 F1 | 	add	fp, #4
0d3bc     A7 16 02 FB | 	rdlong	arg03, fp
0d3c0     2C 4E 85 F1 | 	sub	fp, #44
0d3c4     0B 00 00 FF 
0d3c8     C0 E4 05 F1 | 	add	objptr, ##5824
0d3cc     30 CD B0 FD | 	call	#_psram_spin2_read1
0d3d0     0B 00 00 FF 
0d3d4     C0 E4 85 F1 | 	sub	objptr, ##5824
0d3d8                 | '     longfill(linebuf,0,64)
0d3d8                 | '     psram.read1(varptr(linebuf),header(2),header(3))
0d3d8                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
0d3d8     20 4E 05 F1 | 	add	fp, #32
0d3dc     A7 20 02 FB | 	rdlong	local02, fp
0d3e0     1C 4E 85 F1 | 	sub	fp, #28
0d3e4     A7 1E 02 FB | 	rdlong	local01, fp
0d3e8     04 4E 85 F1 | 	sub	fp, #4
0d3ec     0F 21 52 F2 | 	cmps	local02, local01 wc
0d3f0     30 00 90 CD |  if_b	jmp	#LR__1003
0d3f4     20 4E 05 F1 | 	add	fp, #32
0d3f8     A7 20 02 FB | 	rdlong	local02, fp
0d3fc     18 4E 85 F1 | 	sub	fp, #24
0d400     A7 16 02 FB | 	rdlong	arg03, fp
0d404     08 4E 85 F1 | 	sub	fp, #8
0d408     0B 21 5A F2 | 	cmps	local02, arg03 wcz
0d40c     14 00 90 1D |  if_a	jmp	#LR__1003
0d410     38 4E 05 F1 | 	add	fp, #56
0d414     A7 12 02 F6 | 	mov	arg01, fp
0d418     38 4E 85 F1 | 	sub	fp, #56
0d41c                 | ' 
0d41c                 | ' write(text)
0d41c     A8 C7 B0 FD | 	call	#_hg010b_spin2_write
0d420                 | ' crlf
0d420     04 C9 B0 FD | 	call	#_hg010b_spin2_crlf
0d424                 | LR__1003
0d424     34 4E 05 F1 | 	add	fp, #52
0d428     A7 20 02 FB | 	rdlong	local02, fp
0d42c     34 4E 85 F1 | 	sub	fp, #52
0d430     7B 00 00 FF 
0d434     6C E4 05 F1 | 	add	objptr, ##63084
0d438     F2 20 62 FC | 	wrlong	local02, objptr
0d43c     7B 00 00 FF 
0d440     6C E4 85 F1 | 	sub	objptr, ##63084
0d444                 | LR__1004
0d444     34 4E 05 F1 | 	add	fp, #52
0d448     A7 20 02 FB | 	rdlong	local02, fp
0d44c     34 4E 85 F1 | 	sub	fp, #52
0d450     FF FF 3F FF 
0d454     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0d458     20 4E 05 51 |  if_ne	add	fp, #32
0d45c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0d460     20 4E 85 51 |  if_ne	sub	fp, #32
0d464     FF FF 7F 5F 
0d468     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0d46c     E4 FE 9F 5D |  if_ne	jmp	#LR__1002
0d470     A7 F0 03 F6 | 	mov	ptra, fp
0d474     B2 00 A0 FD | 	call	#popregs_
0d478                 | _do_list_ret
0d478     2D 00 64 FD | 	ret
0d47c                 | 
0d47c                 | ' 
0d47c                 | ' '---------------- Clear the program
0d47c                 | ' 
0d47c                 | ' sub do_new
0d47c                 | _do_new
0d47c     03 4A 05 F6 | 	mov	COUNT_, #3
0d480     A8 00 A0 FD | 	call	#pushregs_
0d484     00 12 06 F6 | 	mov	arg01, #0
0d488     01 14 66 F6 | 	neg	arg02, #1
0d48c     01 16 06 F6 | 	mov	arg03, #1
0d490     00 18 06 F6 | 	mov	arg04, #0
0d494     0B 00 00 FF 
0d498     C0 E4 05 F1 | 	add	objptr, ##5824
0d49c                 | '     return fill(addr, pattern, count, listPtr, 4)
0d49c     04 1A 06 F6 | 	mov	arg05, #4
0d4a0     94 CD B0 FD | 	call	#_psram_spin2_fill
0d4a4     49 00 00 FF 
0d4a8     AC E4 05 F1 | 	add	objptr, ##37548
0d4ac     F2 00 68 FC | 	wrlong	#0, objptr
0d4b0     15 00 00 FF 
0d4b4     7C E4 05 F1 | 	add	objptr, ##10876
0d4b8     F2 00 68 FC | 	wrlong	#0, objptr
0d4bc     0F 00 00 FF 
0d4c0     2C E5 05 F1 | 	add	objptr, ##7980
0d4c4     F2 00 68 FC | 	wrlong	#0, objptr
0d4c8     04 E4 05 F1 | 	add	objptr, #4
0d4cc     F2 00 68 FC | 	wrlong	#0, objptr
0d4d0     16 00 00 FF 
0d4d4     5C E5 85 F1 | 	sub	objptr, ##11612
0d4d8     F2 00 68 FC | 	wrlong	#0, objptr
0d4dc     07 00 00 FF 
0d4e0     24 E4 05 F1 | 	add	objptr, ##3620
0d4e4     F2 00 68 FC | 	wrlong	#0, objptr
0d4e8     07 00 00 FF 
0d4ec     20 E4 85 F1 | 	sub	objptr, ##3616
0d4f0     F2 00 68 FC | 	wrlong	#0, objptr
0d4f4     0F 00 00 FF 
0d4f8     34 E4 05 F1 | 	add	objptr, ##7732
0d4fc     F2 00 68 FC | 	wrlong	#0, objptr
0d500     08 00 00 FF 
0d504     08 E4 85 F1 | 	sub	objptr, ##4104
0d508     F2 00 68 FC | 	wrlong	#0, objptr
0d50c     04 E4 05 F1 | 	add	objptr, #4
0d510     FF FF FF FF 
0d514     F2 FE 6B FC | 	wrlong	##-1, objptr
0d518     0F 00 00 FF 
0d51c     4C E5 05 F1 | 	add	objptr, ##8012
0d520     F2 00 68 FC | 	wrlong	#0, objptr
0d524                 | ' 
0d524                 | ' pslpoke(0,$FFFFFFFF)
0d524                 | ' varnum=0
0d524                 | ' programstart=0 :runptr=0 : runptr2=0
0d524                 | ' stackpointer=0
0d524                 | ' lineptr=0 
0d524                 | ' programptr=0 : stringptr=0
0d524                 | ' lastline=0 : lastlineptr=-1 :fortop=0
0d524                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
0d524     00 1E 06 F6 | 	mov	local01, #0
0d528     07 00 00 FF 
0d52c     40 E5 85 F1 | 	sub	objptr, ##3904
0d530     97 16 48 FB | 	callpa	#(@LR__1011-@LR__1010)>>2,fcache_load_ptr_
0d534                 | LR__1010
0d534     0F 21 02 F6 | 	mov	local02, local01
0d538     02 20 66 F0 | 	shl	local02, #2
0d53c     0F 21 02 F1 | 	add	local02, local01
0d540     02 20 66 F0 | 	shl	local02, #2
0d544     F2 20 02 F1 | 	add	local02, objptr
0d548     08 20 06 F1 | 	add	local02, #8
0d54c     FF FF FF FF 
0d550     10 FF 6B FC | 	wrlong	##-1, local02
0d554     01 1E 06 F1 | 	add	local01, #1
0d558     81 1E 56 F2 | 	cmps	local01, #129 wc
0d55c     D4 FF 9F CD |  if_b	jmp	#LR__1010
0d560                 | LR__1011
0d560     71 00 00 FF 
0d564     FC E5 85 F1 | 	sub	objptr, ##58364
0d568                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i))
0d568     00 1E 06 F6 | 	mov	local01, #0
0d56c                 | LR__1012
0d56c     0F 21 02 F6 | 	mov	local02, local01
0d570     02 20 66 F0 | 	shl	local02, #2
0d574     7A 00 00 FF 
0d578     98 E5 05 F1 | 	add	objptr, ##62872
0d57c     F2 20 02 F1 | 	add	local02, objptr
0d580     10 21 0A FB | 	rdlong	local02, local02 wz
0d584     7A 00 00 FF 
0d588     98 E5 85 F1 | 	sub	objptr, ##62872
0d58c     34 00 90 AD |  if_e	jmp	#LR__1013
0d590     0F 13 02 F6 | 	mov	arg01, local01
0d594     00 14 06 F6 | 	mov	arg02, #0
0d598     00 16 06 F6 | 	mov	arg03, #0
0d59c     B4 B6 B0 FD | 	call	#_hg010b_spin2_setspritesize
0d5a0     0F 21 02 F6 | 	mov	local02, local01
0d5a4     02 20 66 F0 | 	shl	local02, #2
0d5a8     7A 00 00 FF 
0d5ac     98 E5 05 F1 | 	add	objptr, ##62872
0d5b0     F2 20 02 F1 | 	add	local02, objptr
0d5b4     10 13 02 FB | 	rdlong	arg01, local02
0d5b8     7A 00 00 FF 
0d5bc     98 E5 85 F1 | 	sub	objptr, ##62872
0d5c0     D0 15 B1 FD | 	call	#__system___gc_free
0d5c4                 | LR__1013
0d5c4     7A 00 00 FF 
0d5c8     EC E5 05 F1 | 	add	objptr, ##62956
0d5cc     00 C0 9F FF 
0d5d0     F2 00 68 FC | 	wrlong	##1065353216, objptr
0d5d4     04 E4 05 F1 | 	add	objptr, #4
0d5d8     00 C0 9F FF 
0d5dc     F2 00 68 FC | 	wrlong	##1065353216, objptr
0d5e0     7A 00 00 FF 
0d5e4     F0 E5 85 F1 | 	sub	objptr, ##62960
0d5e8     F2 22 02 FB | 	rdlong	local03, objptr
0d5ec     7A 00 00 FF 
0d5f0     DC E5 05 F1 | 	add	objptr, ##62940
0d5f4     F2 22 62 FC | 	wrlong	local03, objptr
0d5f8     7A 00 00 FF 
0d5fc     DC E5 85 F1 | 	sub	objptr, ##62940
0d600     11 12 06 F6 | 	mov	arg01, #17
0d604     08 14 06 F6 | 	mov	arg02, #8
0d608     10 16 06 F6 | 	mov	arg03, #16
0d60c     44 B6 B0 FD | 	call	#_hg010b_spin2_setspritesize
0d610     10 12 06 F6 | 	mov	arg01, #16
0d614     20 14 06 F6 | 	mov	arg02, #32
0d618     20 16 06 F6 | 	mov	arg03, #32
0d61c     34 B6 B0 FD | 	call	#_hg010b_spin2_setspritesize
0d620     01 1E 06 F1 | 	add	local01, #1
0d624     10 1E 56 F2 | 	cmps	local01, #16 wc
0d628     40 FF 9F CD |  if_b	jmp	#LR__1012
0d62c     A7 F0 03 F6 | 	mov	ptra, fp
0d630     B2 00 A0 FD | 	call	#popregs_
0d634                 | _do_new_ret
0d634     2D 00 64 FD | 	ret
0d638                 | 
0d638                 | ' 
0d638                 | ' '----------------------- goto
0d638                 | ' sub do_fast_goto
0d638                 | _do_fast_goto
0d638     02 4A 05 F6 | 	mov	COUNT_, #2
0d63c     A8 00 A0 FD | 	call	#pushregs_
0d640                 | _do_fast_goto_enter
0d640     69 00 00 FF 
0d644     E4 E5 05 F1 | 	add	objptr, ##54244
0d648     F2 12 02 FB | 	rdlong	arg01, objptr
0d64c     09 1F 02 F6 | 	mov	local01, arg01
0d650     01 1E 66 F0 | 	shl	local01, #1
0d654     09 1F 02 F1 | 	add	local01, arg01
0d658     02 1E 66 F0 | 	shl	local01, #2
0d65c     03 00 00 FF 
0d660     04 E4 85 F1 | 	sub	objptr, ##1540
0d664     F2 1E 02 F1 | 	add	local01, objptr
0d668     0F 21 02 FB | 	rdlong	local02, local01
0d66c     10 13 02 F6 | 	mov	arg01, local02
0d670     66 00 00 FF 
0d674     E0 E5 85 F1 | 	sub	objptr, ##52704
0d678     98 A1 B0 FD | 	call	#_pslpeek
0d67c     FD 12 02 F6 | 	mov	arg01, result1
0d680                 | ' 
0d680                 | ' testptr=compiledline(lineptr_e).result.uresult
0d680                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
0d680                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
0d680     69 00 00 FF 
0d684     E4 E5 05 F1 | 	add	objptr, ##54244
0d688     F2 FA 01 FB | 	rdlong	result1, objptr
0d68c     FD 1E 02 F6 | 	mov	local01, result1
0d690     01 1E 66 F0 | 	shl	local01, #1
0d694     FD 1E 02 F1 | 	add	local01, result1
0d698     02 1E 66 F0 | 	shl	local01, #2
0d69c     03 00 00 FF 
0d6a0     04 E4 85 F1 | 	sub	objptr, ##1540
0d6a4     F2 1E 02 F1 | 	add	local01, objptr
0d6a8     04 1E 06 F1 | 	add	local01, #4
0d6ac     0F 1F 02 FB | 	rdlong	local01, local01
0d6b0     0F 13 0A F2 | 	cmp	arg01, local01 wz
0d6b4     66 00 00 FF 
0d6b8     E0 E5 85 F1 | 	sub	objptr, ##52704
0d6bc     58 00 90 5D |  if_ne	jmp	#LR__1020
0d6c0     79 00 00 FF 
0d6c4     14 E5 05 F1 | 	add	objptr, ##62228
0d6c8     F2 20 62 FC | 	wrlong	local02, objptr
0d6cc     0F 00 00 FF 
0d6d0     34 E5 85 F1 | 	sub	objptr, ##7988
0d6d4     F2 20 02 FB | 	rdlong	local02, objptr
0d6d8     01 20 86 F1 | 	sub	local02, #1
0d6dc     04 E4 05 F1 | 	add	objptr, #4
0d6e0     F2 20 62 FC | 	wrlong	local02, objptr
0d6e4                 | '   runptr=testptr
0d6e4                 | '   lineptr_e=lineptr-1
0d6e4                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
0d6e4     0F 00 00 FF 
0d6e8     54 E5 05 F1 | 	add	objptr, ##8020
0d6ec     F2 20 02 FB | 	rdlong	local02, objptr
0d6f0     79 00 00 FF 
0d6f4     38 E5 85 F1 | 	sub	objptr, ##62264
0d6f8     FF FF 3F FF 
0d6fc     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0d700     79 00 00 AF 
0d704     38 E5 05 A1 |  if_e	add	objptr, ##62264
0d708     F2 00 68 AC |  if_e	wrlong	#0, objptr
0d70c     79 00 00 AF 
0d710     38 E5 85 A1 |  if_e	sub	objptr, ##62264
0d714     04 00 90 FD | 	jmp	#LR__1021
0d718                 | LR__1020
0d718     0C 00 B0 FD | 	call	#_do_find_goto
0d71c                 | LR__1021
0d71c     A7 F0 03 F6 | 	mov	ptra, fp
0d720     B2 00 A0 FD | 	call	#popregs_
0d724                 | _do_fast_goto_ret
0d724     2D 00 64 FD | 	ret
0d728                 | 
0d728                 | ' 
0d728                 | ' 
0d728                 | ' 
0d728                 | ' 
0d728                 | ' sub do_find_goto
0d728                 | _do_find_goto
0d728     03 4A 05 F6 | 	mov	COUNT_, #3
0d72c     A8 00 A0 FD | 	call	#pushregs_
0d730     24 F0 07 F1 | 	add	ptra, #36
0d734                 | _do_find_goto_enter
0d734     69 00 00 FF 
0d738     E4 E5 05 F1 | 	add	objptr, ##54244
0d73c     F2 1E 02 FB | 	rdlong	local01, objptr
0d740     0F 21 02 F6 | 	mov	local02, local01
0d744     01 20 66 F0 | 	shl	local02, #1
0d748     0F 21 02 F1 | 	add	local02, local01
0d74c     02 20 66 F0 | 	shl	local02, #2
0d750     03 00 00 FF 
0d754     04 E4 85 F1 | 	sub	objptr, ##1540
0d758     F2 20 02 F1 | 	add	local02, objptr
0d75c     04 20 06 F1 | 	add	local02, #4
0d760     10 21 02 FB | 	rdlong	local02, local02
0d764     A7 20 62 FC | 	wrlong	local02, fp
0d768     03 00 00 FF 
0d76c     08 E4 05 F1 | 	add	objptr, ##1544
0d770     F2 22 02 FB | 	rdlong	local03, objptr
0d774     69 00 00 FF 
0d778     E8 E5 85 F1 | 	sub	objptr, ##54248
0d77c     04 4E 05 F1 | 	add	fp, #4
0d780     A7 22 62 FC | 	wrlong	local03, fp
0d784     04 4E 85 F1 | 	sub	fp, #4
0d788                 | ' 
0d788                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
0d788                 | '  ' print "find goto"                                                                     'print gotoline 
0d788                 | ' gotoptr=programstart
0d788                 | ' do
0d788                 | LR__1030
0d788     0C 4E 05 F1 | 	add	fp, #12
0d78c     A7 12 02 F6 | 	mov	arg01, fp
0d790     08 4E 85 F1 | 	sub	fp, #8
0d794     A7 14 02 FB | 	rdlong	arg02, fp
0d798     04 4E 85 F1 | 	sub	fp, #4
0d79c     18 16 06 F6 | 	mov	arg03, #24
0d7a0     0B 00 00 FF 
0d7a4     C0 E4 05 F1 | 	add	objptr, ##5824
0d7a8     54 C9 B0 FD | 	call	#_psram_spin2_read1
0d7ac     0B 00 00 FF 
0d7b0     C0 E4 85 F1 | 	sub	objptr, ##5824
0d7b4                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
0d7b4                 | '   if gotoheader(0)<>$FFFFFFFF then
0d7b4     0C 4E 05 F1 | 	add	fp, #12
0d7b8     A7 22 02 FB | 	rdlong	local03, fp
0d7bc     0C 4E 85 F1 | 	sub	fp, #12
0d7c0     FF FF 7F FF 
0d7c4     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0d7c8     24 00 90 AD |  if_e	jmp	#LR__1031
0d7cc     04 4E 05 F1 | 	add	fp, #4
0d7d0     A7 22 02 FB | 	rdlong	local03, fp
0d7d4     04 4E 05 F1 | 	add	fp, #4
0d7d8     A7 22 62 FC | 	wrlong	local03, fp
0d7dc     18 4E 05 F1 | 	add	fp, #24
0d7e0     A7 22 02 FB | 	rdlong	local03, fp
0d7e4     1C 4E 85 F1 | 	sub	fp, #28
0d7e8     A7 22 62 FC | 	wrlong	local03, fp
0d7ec     04 4E 85 F1 | 	sub	fp, #4
0d7f0                 | LR__1031
0d7f0     20 4E 05 F1 | 	add	fp, #32
0d7f4     A7 22 02 FB | 	rdlong	local03, fp
0d7f8     20 4E 85 F1 | 	sub	fp, #32
0d7fc     FF FF 3F FF 
0d800     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0d804     0C 4E 05 51 |  if_ne	add	fp, #12
0d808     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0d80c     0C 4E 85 51 |  if_ne	sub	fp, #12
0d810     FF FF 7F 5F 
0d814     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0d818     18 00 90 AD |  if_e	jmp	#LR__1032
0d81c     0C 4E 05 F1 | 	add	fp, #12
0d820     A7 22 02 FB | 	rdlong	local03, fp
0d824     0C 4E 85 F1 | 	sub	fp, #12
0d828     A7 20 02 FB | 	rdlong	local02, fp
0d82c     10 23 0A F2 | 	cmp	local03, local02 wz
0d830     54 FF 9F 5D |  if_ne	jmp	#LR__1030
0d834                 | LR__1032
0d834                 | ' 
0d834                 | ' if gotoheader(0)=gotoline then
0d834     0C 4E 05 F1 | 	add	fp, #12
0d838     A7 22 02 FB | 	rdlong	local03, fp
0d83c     0C 4E 85 F1 | 	sub	fp, #12
0d840     A7 1E 02 FB | 	rdlong	local01, fp
0d844     0F 23 0A F2 | 	cmp	local03, local01 wz
0d848     D8 00 90 5D |  if_ne	jmp	#LR__1033
0d84c     69 00 00 FF 
0d850     E4 E5 05 F1 | 	add	objptr, ##54244
0d854     F2 1E 02 FB | 	rdlong	local01, objptr
0d858     0F 21 02 F6 | 	mov	local02, local01
0d85c     01 20 66 F0 | 	shl	local02, #1
0d860     0F 21 02 F1 | 	add	local02, local01
0d864     02 20 66 F0 | 	shl	local02, #2
0d868     03 00 00 FF 
0d86c     04 E4 85 F1 | 	sub	objptr, ##1540
0d870     F2 20 02 F1 | 	add	local02, objptr
0d874     08 4E 05 F1 | 	add	fp, #8
0d878     A7 22 02 FB | 	rdlong	local03, fp
0d87c     10 23 62 FC | 	wrlong	local03, local02
0d880     03 00 00 FF 
0d884     04 E4 05 F1 | 	add	objptr, ##1540
0d888     F2 1E 02 FB | 	rdlong	local01, objptr
0d88c     0F 21 02 F6 | 	mov	local02, local01
0d890     01 20 66 F0 | 	shl	local02, #1
0d894     0F 21 02 F1 | 	add	local02, local01
0d898     02 20 66 F0 | 	shl	local02, #2
0d89c     03 00 00 FF 
0d8a0     04 E4 85 F1 | 	sub	objptr, ##1540
0d8a4     F2 20 02 F1 | 	add	local02, objptr
0d8a8     08 20 06 F1 | 	add	local02, #8
0d8ac     10 9D 68 FC | 	wrlong	#78, local02
0d8b0     03 00 00 FF 
0d8b4     04 E4 05 F1 | 	add	objptr, ##1540
0d8b8     F2 20 02 FB | 	rdlong	local02, objptr
0d8bc     10 13 02 F6 | 	mov	arg01, local02
0d8c0     01 12 66 F0 | 	shl	arg01, #1
0d8c4     10 13 02 F1 | 	add	arg01, local02
0d8c8     02 12 66 F0 | 	shl	arg01, #2
0d8cc     03 00 00 FF 
0d8d0     04 E4 85 F1 | 	sub	objptr, ##1540
0d8d4     F2 12 02 F1 | 	add	arg01, objptr
0d8d8     12 00 00 FF 
0d8dc     3C E5 05 F1 | 	add	objptr, ##9532
0d8e0     F2 14 02 FB | 	rdlong	arg02, objptr
0d8e4     02 22 06 F6 | 	mov	local03, #2
0d8e8     10 23 02 F1 | 	add	local03, local02
0d8ec     14 00 00 FF 
0d8f0     54 E5 85 F1 | 	sub	objptr, ##10580
0d8f4     F2 16 02 FB | 	rdlong	arg03, objptr
0d8f8     0B 23 02 FD | 	qmul	local03, arg03
0d8fc     08 4E 85 F1 | 	sub	fp, #8
0d900     59 00 00 FF 
0d904     08 E5 85 F1 | 	sub	objptr, ##45832
0d908     18 22 62 FD | 	getqx	local03
0d90c     11 15 02 F1 | 	add	arg02, local03
0d910     88 C8 B0 FD | 	call	#_psram_spin2_write
0d914     0B 00 00 FF 
0d918     C0 E4 85 F1 | 	sub	objptr, ##5824
0d91c     18 FD BF FD | 	call	#_do_fast_goto
0d920     08 00 90 FD | 	jmp	#LR__1034
0d924                 | LR__1033
0d924     26 12 06 F6 | 	mov	arg01, #38
0d928     2C 9D B0 FD | 	call	#_printerror
0d92c                 | LR__1034
0d92c     A7 F0 03 F6 | 	mov	ptra, fp
0d930     B2 00 A0 FD | 	call	#popregs_
0d934                 | _do_find_goto_ret
0d934     2D 00 64 FD | 	ret
0d938                 | 
0d938                 | ' 
0d938                 | ' sub do_slow_goto
0d938                 | _do_slow_goto
0d938                 | _do_slow_goto_ret
0d938     2D 00 64 FD | 	ret
0d93c                 | 
0d93c                 | ' 
0d93c                 | ' '----------------------- Error processing
0d93c                 | ' 
0d93c                 | ' sub do_error
0d93c                 | _do_error
0d93c     01 4A 05 F6 | 	mov	COUNT_, #1
0d940     A8 00 A0 FD | 	call	#pushregs_
0d944     69 00 00 FF 
0d948     E4 E5 05 F1 | 	add	objptr, ##54244
0d94c     F2 18 02 FB | 	rdlong	arg04, objptr
0d950     0C 17 02 F6 | 	mov	arg03, arg04
0d954     01 16 66 F0 | 	shl	arg03, #1
0d958     0C 17 02 F1 | 	add	arg03, arg04
0d95c     02 16 66 F0 | 	shl	arg03, #2
0d960     03 00 00 FF 
0d964     04 E4 85 F1 | 	sub	objptr, ##1540
0d968     F2 16 02 F1 | 	add	arg03, objptr
0d96c     0B 1F 02 FB | 	rdlong	local01, arg03
0d970                 | ' r=compiledline(lineptr_e).result.uresult
0d970                 | ' print "Error ";r;": ";errors$(r)
0d970     00 12 06 F6 | 	mov	arg01, #0
0d974     66 00 00 FF 
0d978     E0 E5 85 F1 | 	sub	objptr, ##52704
0d97c     1C 2C B1 FD | 	call	#__system___getiolock_0442
0d980     FD 12 02 F6 | 	mov	arg01, result1
0d984     E0 D2 B0 FD | 	call	#__system___lockmem
0d988     53 01 00 FF 
0d98c     86 15 06 F6 | 	mov	arg02, ##@LR__4713
0d990     00 12 06 F6 | 	mov	arg01, #0
0d994     00 16 06 F6 | 	mov	arg03, #0
0d998     D4 DF B0 FD | 	call	#__system___basic_print_string
0d99c     00 12 06 F6 | 	mov	arg01, #0
0d9a0     0F 15 02 F6 | 	mov	arg02, local01
0d9a4     00 16 06 F6 | 	mov	arg03, #0
0d9a8     0A 18 06 F6 | 	mov	arg04, #10
0d9ac     44 E0 B0 FD | 	call	#__system___basic_print_unsigned
0d9b0     53 01 00 FF 
0d9b4     8D 15 06 F6 | 	mov	arg02, ##@LR__4714
0d9b8     00 12 06 F6 | 	mov	arg01, #0
0d9bc     00 16 06 F6 | 	mov	arg03, #0
0d9c0     AC DF B0 FD | 	call	#__system___basic_print_string
0d9c4     02 1E 66 F0 | 	shl	local01, #2
0d9c8     64 00 00 FF 
0d9cc     E0 E5 05 F1 | 	add	objptr, ##51680
0d9d0     F2 1E 02 F1 | 	add	local01, objptr
0d9d4     0F 15 02 FB | 	rdlong	arg02, local01
0d9d8     00 12 06 F6 | 	mov	arg01, #0
0d9dc     00 16 06 F6 | 	mov	arg03, #0
0d9e0     64 00 00 FF 
0d9e4     E0 E5 85 F1 | 	sub	objptr, ##51680
0d9e8     84 DF B0 FD | 	call	#__system___basic_print_string
0d9ec     00 12 06 F6 | 	mov	arg01, #0
0d9f0     0A 14 06 F6 | 	mov	arg02, #10
0d9f4     00 16 06 F6 | 	mov	arg03, #0
0d9f8     1C DF B0 FD | 	call	#__system___basic_print_char
0d9fc     00 12 06 F6 | 	mov	arg01, #0
0da00     98 2B B1 FD | 	call	#__system___getiolock_0442
0da04     FD 00 68 FC | 	wrlong	#0, result1
0da08     A7 F0 03 F6 | 	mov	ptra, fp
0da0c     B2 00 A0 FD | 	call	#popregs_
0da10                 | _do_error_ret
0da10     2D 00 64 FD | 	ret
0da14                 | 
0da14                 | ' 
0da14                 | ' 
0da14                 | ' '------------------ Assigning to a variable  
0da14                 | ' 
0da14                 | ' function  convertstring(psaddr as ulong) as string
0da14                 | _convertstring
0da14     04 4A 05 F6 | 	mov	COUNT_, #4
0da18     A8 00 A0 FD | 	call	#pushregs_
0da1c     09 1F 02 F6 | 	mov	local01, arg01
0da20     F0 9D B0 FD | 	call	#_pslpeek
0da24     FD 20 02 F6 | 	mov	local02, result1
0da28     53 01 00 FF 
0da2c     90 23 06 F6 | 	mov	local03, ##@LR__4715
0da30                 | ' 'print "in convertstring: psaddr=";psaddr
0da30                 | ' l=pslpeek(psaddr)
0da30                 | ' 'print "in convertstring: len=";l
0da30                 | ' s="" 
0da30                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0da30     01 24 06 F6 | 	mov	local04, #1
0da34     01 20 06 F1 | 	add	local02, #1
0da38                 | LR__1040
0da38     10 25 52 F2 | 	cmps	local04, local02 wc
0da3c     30 00 90 3D |  if_ae	jmp	#LR__1041
0da40     0F 13 02 F6 | 	mov	arg01, local01
0da44     03 12 06 F1 | 	add	arg01, #3
0da48     12 13 02 F1 | 	add	arg01, local04
0da4c     6C 9D B0 FD | 	call	#_pspeek
0da50     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0da54     1C F4 B0 FD | 	call	#__system__Chr_S
0da58     FD 14 02 F6 | 	mov	arg02, result1
0da5c     11 13 02 F6 | 	mov	arg01, local03
0da60     60 D2 B0 FD | 	call	#__system___string_concat
0da64     FD 22 02 F6 | 	mov	local03, result1
0da68     01 24 06 F1 | 	add	local04, #1
0da6c     C8 FF 9F FD | 	jmp	#LR__1040
0da70                 | LR__1041
0da70                 | ' 'print "in convertstring: str=";s
0da70                 | ' return s
0da70     11 FB 01 F6 | 	mov	result1, local03
0da74     A7 F0 03 F6 | 	mov	ptra, fp
0da78     B2 00 A0 FD | 	call	#popregs_
0da7c                 | _convertstring_ret
0da7c     2D 00 64 FD | 	ret
0da80                 | 
0da80                 | ' 
0da80                 | ' sub do_assign
0da80                 | _do_assign
0da80     05 4A 05 F6 | 	mov	COUNT_, #5
0da84     A8 00 A0 FD | 	call	#pushregs_
0da88     44 F0 07 F1 | 	add	ptra, #68
0da8c     69 00 00 FF 
0da90     E4 E5 05 F1 | 	add	objptr, ##54244
0da94     F2 16 02 FB | 	rdlong	arg03, objptr
0da98     0B 15 02 F6 | 	mov	arg02, arg03
0da9c     01 14 66 F0 | 	shl	arg02, #1
0daa0     0B 15 02 F1 | 	add	arg02, arg03
0daa4     02 14 66 F0 | 	shl	arg02, #2
0daa8     03 00 00 FF 
0daac     04 E4 85 F1 | 	sub	objptr, ##1540
0dab0     F2 14 02 F1 | 	add	arg02, objptr
0dab4     0A 15 02 FB | 	rdlong	arg02, arg02
0dab8     18 4E 05 F1 | 	add	fp, #24
0dabc     A7 14 62 FC | 	wrlong	arg02, fp
0dac0                 | ' 
0dac0                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
0dac0                 | ' 
0dac0                 | ' if variables(varnum).vartype<array_no_type then 
0dac0     18 4E 85 F1 | 	sub	fp, #24
0dac4     04 14 66 F0 | 	shl	arg02, #4
0dac8     32 00 00 FF 
0dacc     74 E4 85 F1 | 	sub	objptr, ##25716
0dad0     F2 14 02 F1 | 	add	arg02, objptr
0dad4     0C 14 06 F1 | 	add	arg02, #12
0dad8     0A 17 02 FB | 	rdlong	arg03, arg02
0dadc     00 17 16 F2 | 	cmp	arg03, #256 wc
0dae0     34 00 00 FF 
0dae4     6C E5 85 F1 | 	sub	objptr, ##26988
0dae8     18 01 90 3D |  if_ae	jmp	#LR__1050
0daec     08 C0 BF FD | 	call	#_pop
0daf0     A7 FA 61 FC | 	wrlong	result1, fp
0daf4     04 4E 05 F1 | 	add	fp, #4
0daf8     A7 FC 61 FC | 	wrlong	result2, fp
0dafc     04 4E 05 F1 | 	add	fp, #4
0db00     A7 FE 61 FC | 	wrlong	result3, fp
0db04     08 4E 85 F1 | 	sub	fp, #8
0db08     A7 16 02 FB | 	rdlong	arg03, fp
0db0c     04 4E 05 F1 | 	add	fp, #4
0db10     A7 14 02 FB | 	rdlong	arg02, fp
0db14     14 4E 05 F1 | 	add	fp, #20
0db18     A7 12 02 FB | 	rdlong	arg01, fp
0db1c     04 12 66 F0 | 	shl	arg01, #4
0db20     34 00 00 FF 
0db24     6C E5 05 F1 | 	add	objptr, ##26988
0db28     F2 12 02 F1 | 	add	arg01, objptr
0db2c     04 12 06 F1 | 	add	arg01, #4
0db30     09 17 62 FC | 	wrlong	arg03, arg01
0db34     A7 16 02 FB | 	rdlong	arg03, fp
0db38     04 16 66 F0 | 	shl	arg03, #4
0db3c     F2 16 02 F1 | 	add	arg03, objptr
0db40     08 16 06 F1 | 	add	arg03, #8
0db44     0B 15 62 FC | 	wrlong	arg02, arg03
0db48     A7 16 02 FB | 	rdlong	arg03, fp
0db4c     04 16 66 F0 | 	shl	arg03, #4
0db50     F2 16 02 F1 | 	add	arg03, objptr
0db54     10 4E 85 F1 | 	sub	fp, #16
0db58     A7 14 02 FB | 	rdlong	arg02, fp
0db5c     0C 16 06 F1 | 	add	arg03, #12
0db60     0B 15 62 FC | 	wrlong	arg02, arg03
0db64                 | '   t1=pop() 
0db64                 | ' 'print "In do_assign value to assign=";t1.result.uresult, "type to assign=";t1.result_type  
0db64                 | '    variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
0db64                 | '   if variables(varnum).vartype<>result_string2 then return
0db64     10 4E 05 F1 | 	add	fp, #16
0db68     A7 16 02 FB | 	rdlong	arg03, fp
0db6c     18 4E 85 F1 | 	sub	fp, #24
0db70     04 16 66 F0 | 	shl	arg03, #4
0db74     F2 16 02 F1 | 	add	arg03, objptr
0db78     0C 16 06 F1 | 	add	arg03, #12
0db7c     0B 17 02 FB | 	rdlong	arg03, arg03
0db80     2B 16 0E F2 | 	cmp	arg03, #43 wz
0db84     34 00 00 FF 
0db88     6C E5 85 F1 | 	sub	objptr, ##26988
0db8c     30 06 90 5D |  if_ne	jmp	#LR__1073
0db90     18 4E 05 F1 | 	add	fp, #24
0db94     A7 16 02 FB | 	rdlong	arg03, fp
0db98     0B 1F 02 F6 | 	mov	local01, arg03
0db9c     04 1E 66 F0 | 	shl	local01, #4
0dba0     34 00 00 FF 
0dba4     6C E5 05 F1 | 	add	objptr, ##26988
0dba8     F2 1E 02 F1 | 	add	local01, objptr
0dbac     18 4E 85 F1 | 	sub	fp, #24
0dbb0     04 16 66 F0 | 	shl	arg03, #4
0dbb4     F2 16 02 F1 | 	add	arg03, objptr
0dbb8     04 16 06 F1 | 	add	arg03, #4
0dbbc     0B 13 02 FB | 	rdlong	arg01, arg03
0dbc0     34 00 00 FF 
0dbc4     6C E5 85 F1 | 	sub	objptr, ##26988
0dbc8     48 FE BF FD | 	call	#_convertstring
0dbcc     04 1E 06 F1 | 	add	local01, #4
0dbd0     0F FB 61 FC | 	wrlong	result1, local01
0dbd4     18 4E 05 F1 | 	add	fp, #24
0dbd8     A7 1E 02 FB | 	rdlong	local01, fp
0dbdc     18 4E 85 F1 | 	sub	fp, #24
0dbe0     04 1E 66 F0 | 	shl	local01, #4
0dbe4     34 00 00 FF 
0dbe8     6C E5 05 F1 | 	add	objptr, ##26988
0dbec     F2 1E 02 F1 | 	add	local01, objptr
0dbf0     0C 1E 06 F1 | 	add	local01, #12
0dbf4     0F 3F 68 FC | 	wrlong	#31, local01
0dbf8                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
0dbf8                 | '   variables(varnum).vartype=result_string
0dbf8                 | '   return
0dbf8     34 00 00 FF 
0dbfc     6C E5 85 F1 | 	sub	objptr, ##26988
0dc00     BC 05 90 FD | 	jmp	#LR__1073
0dc04                 | LR__1050
0dc04                 | ' for i=0 to 2 : arrid(i)=0 : next i
0dc04     1C 4E 05 F1 | 	add	fp, #28
0dc08     A7 00 68 FC | 	wrlong	#0, fp
0dc0c     97 16 48 FB | 	callpa	#(@LR__1052-@LR__1051)>>2,fcache_load_ptr_
0dc10                 | LR__1051
0dc10     A7 1E 02 FB | 	rdlong	local01, fp
0dc14     02 1E 66 F0 | 	shl	local01, #2
0dc18     18 4E 05 F1 | 	add	fp, #24
0dc1c     A7 1E 02 F1 | 	add	local01, fp
0dc20     0F 01 68 FC | 	wrlong	#0, local01
0dc24     18 4E 85 F1 | 	sub	fp, #24
0dc28     A7 1E 02 FB | 	rdlong	local01, fp
0dc2c     01 1E 06 F1 | 	add	local01, #1
0dc30     A7 1E 62 FC | 	wrlong	local01, fp
0dc34     03 1E 16 F2 | 	cmp	local01, #3 wc
0dc38     D4 FF 9F CD |  if_b	jmp	#LR__1051
0dc3c                 | LR__1052
0dc3c     69 00 00 FF 
0dc40     E4 E5 05 F1 | 	add	objptr, ##54244
0dc44     F2 16 02 FB | 	rdlong	arg03, objptr
0dc48     0B 1F 02 F6 | 	mov	local01, arg03
0dc4c     01 1E 66 F0 | 	shl	local01, #1
0dc50     0B 1F 02 F1 | 	add	local01, arg03
0dc54     02 1E 66 F0 | 	shl	local01, #2
0dc58     03 00 00 FF 
0dc5c     04 E4 85 F1 | 	sub	objptr, ##1540
0dc60     F2 1E 02 F1 | 	add	local01, objptr
0dc64     04 1E 06 F1 | 	add	local01, #4
0dc68     0F 21 02 FB | 	rdlong	local02, local01
0dc6c     04 4E 05 F1 | 	add	fp, #4
0dc70     A7 20 62 FC | 	wrlong	local02, fp
0dc74     20 4E 85 F1 | 	sub	fp, #32
0dc78     66 00 00 FF 
0dc7c     E0 E5 85 F1 | 	sub	objptr, ##52704
0dc80     74 BE BF FD | 	call	#_pop
0dc84     A7 FA 61 FC | 	wrlong	result1, fp
0dc88     04 4E 05 F1 | 	add	fp, #4
0dc8c     A7 FC 61 FC | 	wrlong	result2, fp
0dc90     04 4E 05 F1 | 	add	fp, #4
0dc94     A7 FE 61 FC | 	wrlong	result3, fp
0dc98                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
0dc98                 | ' t1=pop() ' var value
0dc98                 | ' if numpar>0 then
0dc98     18 4E 05 F1 | 	add	fp, #24
0dc9c     A7 22 02 FB | 	rdlong	local03, fp
0dca0     20 4E 85 F1 | 	sub	fp, #32
0dca4     01 22 16 F2 | 	cmp	local03, #1 wc
0dca8     78 00 90 CD |  if_b	jmp	#LR__1055
0dcac                 | '   for i=numpar to 1 step -1
0dcac     20 4E 05 F1 | 	add	fp, #32
0dcb0     A7 24 0A FB | 	rdlong	local04, fp wz
0dcb4     04 4E 85 F1 | 	sub	fp, #4
0dcb8     A7 24 62 FC | 	wrlong	local04, fp
0dcbc     1C 4E 85 F1 | 	sub	fp, #28
0dcc0     60 00 90 AD |  if_e	jmp	#LR__1054
0dcc4                 | LR__1053
0dcc4     30 BE BF FD | 	call	#_pop
0dcc8     0C 4E 05 F1 | 	add	fp, #12
0dccc     A7 FA 61 FC | 	wrlong	result1, fp
0dcd0     04 4E 05 F1 | 	add	fp, #4
0dcd4     A7 FC 61 FC | 	wrlong	result2, fp
0dcd8     04 4E 05 F1 | 	add	fp, #4
0dcdc     A7 FE 61 FC | 	wrlong	result3, fp
0dce0     08 4E 05 F1 | 	add	fp, #8
0dce4     A7 22 02 FB | 	rdlong	local03, fp
0dce8     01 22 86 F1 | 	sub	local03, #1
0dcec     02 22 66 F0 | 	shl	local03, #2
0dcf0     18 4E 05 F1 | 	add	fp, #24
0dcf4     A7 22 02 F1 | 	add	local03, fp
0dcf8     28 4E 85 F1 | 	sub	fp, #40
0dcfc     A7 12 02 F6 | 	mov	arg01, fp
0dd00     0C 4E 85 F1 | 	sub	fp, #12
0dd04     40 41 B0 FD | 	call	#_converttoint
0dd08     11 FB 61 FC | 	wrlong	result1, local03
0dd0c     1C 4E 05 F1 | 	add	fp, #28
0dd10     A7 24 02 FB | 	rdlong	local04, fp
0dd14     01 24 8E F1 | 	sub	local04, #1 wz
0dd18     A7 24 62 FC | 	wrlong	local04, fp
0dd1c     1C 4E 85 F1 | 	sub	fp, #28
0dd20     A0 FF 9F 5D |  if_ne	jmp	#LR__1053
0dd24                 | LR__1054
0dd24                 | LR__1055
0dd24     18 4E 05 F1 | 	add	fp, #24
0dd28     A7 1E 02 FB | 	rdlong	local01, fp
0dd2c     04 1E 66 F0 | 	shl	local01, #4
0dd30     34 00 00 FF 
0dd34     6C E5 05 F1 | 	add	objptr, ##26988
0dd38     F2 1E 02 F1 | 	add	local01, objptr
0dd3c     04 1E 06 F1 | 	add	local01, #4
0dd40     0F 13 02 FB | 	rdlong	arg01, local01
0dd44     0C 4E 05 F1 | 	add	fp, #12
0dd48     A7 12 62 FC | 	wrlong	arg01, fp
0dd4c     24 4E 85 F1 | 	sub	fp, #36
0dd50     34 00 00 FF 
0dd54     6C E5 85 F1 | 	sub	objptr, ##26988
0dd58     B8 9A B0 FD | 	call	#_pslpeek
0dd5c     FD 24 32 F9 | 	getword	local04, result1, #0
0dd60     28 4E 05 F1 | 	add	fp, #40
0dd64     A7 24 62 FC | 	wrlong	local04, fp
0dd68     04 4E 85 F1 | 	sub	fp, #4
0dd6c     A7 12 02 FB | 	rdlong	arg01, fp
0dd70     24 4E 85 F1 | 	sub	fp, #36
0dd74     02 12 06 F1 | 	add	arg01, #2
0dd78     40 9A B0 FD | 	call	#_pspeek
0dd7c     FD FA E1 F8 | 	getbyte	result1, result1, #0
0dd80     2C 4E 05 F1 | 	add	fp, #44
0dd84     A7 FA 61 FC | 	wrlong	result1, fp
0dd88                 | ' esize=pspeek(arrptr+2)
0dd88                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
0dd88     08 4E 85 F1 | 	sub	fp, #8
0dd8c     A7 12 02 FB | 	rdlong	arg01, fp
0dd90     24 4E 85 F1 | 	sub	fp, #36
0dd94     04 12 06 F1 | 	add	arg01, #4
0dd98     78 9A B0 FD | 	call	#_pslpeek
0dd9c     FD 24 02 F6 | 	mov	local04, result1
0dda0     34 4E 05 F1 | 	add	fp, #52
0dda4     A7 1E 02 FB | 	rdlong	local01, fp
0dda8     34 4E 85 F1 | 	sub	fp, #52
0ddac     12 1F 12 F2 | 	cmp	local01, local04 wc
0ddb0     54 00 90 3D |  if_ae	jmp	#LR__1056
0ddb4     24 4E 05 F1 | 	add	fp, #36
0ddb8     A7 12 02 FB | 	rdlong	arg01, fp
0ddbc     24 4E 85 F1 | 	sub	fp, #36
0ddc0     08 12 06 F1 | 	add	arg01, #8
0ddc4     4C 9A B0 FD | 	call	#_pslpeek
0ddc8     FD 1E 02 F6 | 	mov	local01, result1
0ddcc     38 4E 05 F1 | 	add	fp, #56
0ddd0     A7 24 02 FB | 	rdlong	local04, fp
0ddd4     38 4E 85 F1 | 	sub	fp, #56
0ddd8     0F 25 12 F2 | 	cmp	local04, local01 wc
0dddc     28 00 90 3D |  if_ae	jmp	#LR__1056
0dde0     24 4E 05 F1 | 	add	fp, #36
0dde4     A7 12 02 FB | 	rdlong	arg01, fp
0dde8     24 4E 85 F1 | 	sub	fp, #36
0ddec     0C 12 06 F1 | 	add	arg01, #12
0ddf0     20 9A B0 FD | 	call	#_pslpeek
0ddf4     3C 4E 05 F1 | 	add	fp, #60
0ddf8     A7 24 02 FB | 	rdlong	local04, fp
0ddfc     3C 4E 85 F1 | 	sub	fp, #60
0de00     FD 24 12 F2 | 	cmp	local04, result1 wc
0de04     0C 00 90 CD |  if_b	jmp	#LR__1057
0de08                 | LR__1056
0de08     31 12 06 F6 | 	mov	arg01, #49
0de0c     48 98 B0 FD | 	call	#_printerror
0de10     AC 03 90 FD | 	jmp	#LR__1073
0de14                 | LR__1057
0de14     24 4E 05 F1 | 	add	fp, #36
0de18     A7 12 02 FB | 	rdlong	arg01, fp
0de1c     09 25 02 F6 | 	mov	local04, arg01
0de20     10 24 06 F1 | 	add	local04, #16
0de24     24 4E 85 F1 | 	sub	fp, #36
0de28     04 12 06 F1 | 	add	arg01, #4
0de2c     E4 99 B0 FD | 	call	#_pslpeek
0de30     FD 1E 02 F6 | 	mov	local01, result1
0de34     38 4E 05 F1 | 	add	fp, #56
0de38     A7 20 02 FB | 	rdlong	local02, fp
0de3c     10 1F 02 FD | 	qmul	local01, local02
0de40     04 4E 85 F1 | 	sub	fp, #4
0de44     A7 22 02 FB | 	rdlong	local03, fp
0de48     10 4E 85 F1 | 	sub	fp, #16
0de4c     A7 12 02 FB | 	rdlong	arg01, fp
0de50     24 4E 85 F1 | 	sub	fp, #36
0de54     08 12 06 F1 | 	add	arg01, #8
0de58     18 20 62 FD | 	getqx	local02
0de5c     10 23 02 F1 | 	add	local03, local02
0de60     B0 99 B0 FD | 	call	#_pslpeek
0de64     FD 20 02 F6 | 	mov	local02, result1
0de68     24 4E 05 F1 | 	add	fp, #36
0de6c     A7 12 02 FB | 	rdlong	arg01, fp
0de70     24 4E 85 F1 | 	sub	fp, #36
0de74     04 12 06 F1 | 	add	arg01, #4
0de78     98 99 B0 FD | 	call	#_pslpeek
0de7c     FD 20 02 FD | 	qmul	local02, result1
0de80     3C 4E 05 F1 | 	add	fp, #60
0de84     A7 20 02 FB | 	rdlong	local02, fp
0de88     18 1E 62 FD | 	getqx	local01
0de8c     10 1F 02 FD | 	qmul	local01, local02
0de90     10 4E 85 F1 | 	sub	fp, #16
0de94     A7 20 02 FB | 	rdlong	local02, fp
0de98     18 1E 62 FD | 	getqx	local01
0de9c     0F 23 02 F1 | 	add	local03, local01
0dea0     11 21 02 FD | 	qmul	local02, local03
0dea4     04 4E 05 F1 | 	add	fp, #4
0dea8                 | ' 
0dea8                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
0dea8                 | ' select case arrtype
0dea8     18 22 62 FD | 	getqx	local03
0deac     11 25 02 F1 | 	add	local04, local03
0deb0     A7 24 62 FC | 	wrlong	local04, fp
0deb4     08 4E 85 F1 | 	sub	fp, #8
0deb8     A7 26 02 FB | 	rdlong	local05, fp
0debc     28 4E 85 F1 | 	sub	fp, #40
0dec0     00 27 86 F1 | 	sub	local05, #256
0dec4     0C 26 26 F3 | 	fle	local05, #12
0dec8     30 26 62 FD | 	jmprel	local05
0decc                 | LR__1058
0decc     30 00 90 FD | 	jmp	#LR__1059
0ded0     58 00 90 FD | 	jmp	#LR__1060
0ded4     88 00 90 FD | 	jmp	#LR__1061
0ded8     B8 00 90 FD | 	jmp	#LR__1062
0dedc     10 01 90 FD | 	jmp	#LR__1063
0dee0     68 01 90 FD | 	jmp	#LR__1064
0dee4     98 01 90 FD | 	jmp	#LR__1065
0dee8     C8 01 90 FD | 	jmp	#LR__1066
0deec     F8 01 90 FD | 	jmp	#LR__1067
0def0     28 02 90 FD | 	jmp	#LR__1068
0def4     58 02 90 FD | 	jmp	#LR__1069
0def8     88 02 90 FD | 	jmp	#LR__1070
0defc     B8 02 90 FD | 	jmp	#LR__1071
0df00                 | LR__1059
0df00     A7 12 02 F6 | 	mov	arg01, fp
0df04     30 4E 05 F1 | 	add	fp, #48
0df08     A7 14 02 FB | 	rdlong	arg02, fp
0df0c     30 4E 85 F1 | 	sub	fp, #48
0df10     0C 16 06 F6 | 	mov	arg03, #12
0df14     0B 00 00 FF 
0df18     C0 E4 05 F1 | 	add	objptr, ##5824
0df1c     7C C2 B0 FD | 	call	#_psram_spin2_write
0df20     0B 00 00 FF 
0df24     C0 E4 85 F1 | 	sub	objptr, ##5824
0df28     94 02 90 FD | 	jmp	#LR__1072
0df2c                 | LR__1060
0df2c     30 4E 05 F1 | 	add	fp, #48
0df30     A7 12 02 FB | 	rdlong	arg01, fp
0df34     30 4E 85 F1 | 	sub	fp, #48
0df38     A7 14 02 FB | 	rdlong	arg02, fp
0df3c     01 16 06 F6 | 	mov	arg03, #1
0df40     00 18 06 F6 | 	mov	arg04, #0
0df44     0B 00 00 FF 
0df48     C0 E4 05 F1 | 	add	objptr, ##5824
0df4c                 | '     return fill(addr, pattern, count, listPtr, 1)
0df4c     01 1A 06 F6 | 	mov	arg05, #1
0df50     E4 C2 B0 FD | 	call	#_psram_spin2_fill
0df54     0B 00 00 FF 
0df58     C0 E4 85 F1 | 	sub	objptr, ##5824
0df5c     60 02 90 FD | 	jmp	#LR__1072
0df60                 | LR__1061
0df60     30 4E 05 F1 | 	add	fp, #48
0df64     A7 12 02 FB | 	rdlong	arg01, fp
0df68     30 4E 85 F1 | 	sub	fp, #48
0df6c     A7 14 02 FB | 	rdlong	arg02, fp
0df70     01 16 06 F6 | 	mov	arg03, #1
0df74     00 18 06 F6 | 	mov	arg04, #0
0df78     0B 00 00 FF 
0df7c     C0 E4 05 F1 | 	add	objptr, ##5824
0df80                 | '     return fill(addr, pattern, count, listPtr, 1)
0df80     01 1A 06 F6 | 	mov	arg05, #1
0df84     B0 C2 B0 FD | 	call	#_psram_spin2_fill
0df88     0B 00 00 FF 
0df8c     C0 E4 85 F1 | 	sub	objptr, ##5824
0df90     2C 02 90 FD | 	jmp	#LR__1072
0df94                 | LR__1062
0df94     30 4E 05 F1 | 	add	fp, #48
0df98     A7 12 02 FB | 	rdlong	arg01, fp
0df9c     30 4E 85 F1 | 	sub	fp, #48
0dfa0     A7 14 02 FB | 	rdlong	arg02, fp
0dfa4     01 16 06 F6 | 	mov	arg03, #1
0dfa8     00 18 06 F6 | 	mov	arg04, #0
0dfac     0B 00 00 FF 
0dfb0     C0 E4 05 F1 | 	add	objptr, ##5824
0dfb4                 | '     return fill(addr, pattern, count, listPtr, 1)
0dfb4     01 1A 06 F6 | 	mov	arg05, #1
0dfb8     7C C2 B0 FD | 	call	#_psram_spin2_fill
0dfbc     30 4E 05 F1 | 	add	fp, #48
0dfc0     A7 12 02 FB | 	rdlong	arg01, fp
0dfc4     30 4E 85 F1 | 	sub	fp, #48
0dfc8     01 12 06 F1 | 	add	arg01, #1
0dfcc     A7 14 02 FB | 	rdlong	arg02, fp
0dfd0     08 14 46 F0 | 	shr	arg02, #8
0dfd4     01 16 06 F6 | 	mov	arg03, #1
0dfd8     00 18 06 F6 | 	mov	arg04, #0
0dfdc                 | '     return fill(addr, pattern, count, listPtr, 1)
0dfdc     01 1A 06 F6 | 	mov	arg05, #1
0dfe0     54 C2 B0 FD | 	call	#_psram_spin2_fill
0dfe4     0B 00 00 FF 
0dfe8     C0 E4 85 F1 | 	sub	objptr, ##5824
0dfec     D0 01 90 FD | 	jmp	#LR__1072
0dff0                 | LR__1063
0dff0     30 4E 05 F1 | 	add	fp, #48
0dff4     A7 12 02 FB | 	rdlong	arg01, fp
0dff8     30 4E 85 F1 | 	sub	fp, #48
0dffc     A7 14 02 FB | 	rdlong	arg02, fp
0e000     01 16 06 F6 | 	mov	arg03, #1
0e004     00 18 06 F6 | 	mov	arg04, #0
0e008     0B 00 00 FF 
0e00c     C0 E4 05 F1 | 	add	objptr, ##5824
0e010                 | '     return fill(addr, pattern, count, listPtr, 1)
0e010     01 1A 06 F6 | 	mov	arg05, #1
0e014     20 C2 B0 FD | 	call	#_psram_spin2_fill
0e018     30 4E 05 F1 | 	add	fp, #48
0e01c     A7 12 02 FB | 	rdlong	arg01, fp
0e020     30 4E 85 F1 | 	sub	fp, #48
0e024     01 12 06 F1 | 	add	arg01, #1
0e028     A7 14 02 FB | 	rdlong	arg02, fp
0e02c     08 14 46 F0 | 	shr	arg02, #8
0e030     01 16 06 F6 | 	mov	arg03, #1
0e034     00 18 06 F6 | 	mov	arg04, #0
0e038                 | '     return fill(addr, pattern, count, listPtr, 1)
0e038     01 1A 06 F6 | 	mov	arg05, #1
0e03c     F8 C1 B0 FD | 	call	#_psram_spin2_fill
0e040     0B 00 00 FF 
0e044     C0 E4 85 F1 | 	sub	objptr, ##5824
0e048     74 01 90 FD | 	jmp	#LR__1072
0e04c                 | LR__1064
0e04c     30 4E 05 F1 | 	add	fp, #48
0e050     A7 12 02 FB | 	rdlong	arg01, fp
0e054     30 4E 85 F1 | 	sub	fp, #48
0e058     A7 14 02 FB | 	rdlong	arg02, fp
0e05c     01 16 06 F6 | 	mov	arg03, #1
0e060     00 18 06 F6 | 	mov	arg04, #0
0e064     0B 00 00 FF 
0e068     C0 E4 05 F1 | 	add	objptr, ##5824
0e06c                 | '     return fill(addr, pattern, count, listPtr, 4)
0e06c     04 1A 06 F6 | 	mov	arg05, #4
0e070     C4 C1 B0 FD | 	call	#_psram_spin2_fill
0e074     0B 00 00 FF 
0e078     C0 E4 85 F1 | 	sub	objptr, ##5824
0e07c     40 01 90 FD | 	jmp	#LR__1072
0e080                 | LR__1065
0e080     30 4E 05 F1 | 	add	fp, #48
0e084     A7 12 02 FB | 	rdlong	arg01, fp
0e088     30 4E 85 F1 | 	sub	fp, #48
0e08c     A7 14 02 FB | 	rdlong	arg02, fp
0e090     01 16 06 F6 | 	mov	arg03, #1
0e094     00 18 06 F6 | 	mov	arg04, #0
0e098     0B 00 00 FF 
0e09c     C0 E4 05 F1 | 	add	objptr, ##5824
0e0a0                 | '     return fill(addr, pattern, count, listPtr, 4)
0e0a0     04 1A 06 F6 | 	mov	arg05, #4
0e0a4     90 C1 B0 FD | 	call	#_psram_spin2_fill
0e0a8     0B 00 00 FF 
0e0ac     C0 E4 85 F1 | 	sub	objptr, ##5824
0e0b0     0C 01 90 FD | 	jmp	#LR__1072
0e0b4                 | LR__1066
0e0b4     30 4E 05 F1 | 	add	fp, #48
0e0b8     A7 12 02 FB | 	rdlong	arg01, fp
0e0bc     30 4E 85 F1 | 	sub	fp, #48
0e0c0     A7 14 02 FB | 	rdlong	arg02, fp
0e0c4     01 16 06 F6 | 	mov	arg03, #1
0e0c8     00 18 06 F6 | 	mov	arg04, #0
0e0cc     0B 00 00 FF 
0e0d0     C0 E4 05 F1 | 	add	objptr, ##5824
0e0d4                 | '     return fill(addr, pattern, count, listPtr, 4)
0e0d4     04 1A 06 F6 | 	mov	arg05, #4
0e0d8     5C C1 B0 FD | 	call	#_psram_spin2_fill
0e0dc     0B 00 00 FF 
0e0e0     C0 E4 85 F1 | 	sub	objptr, ##5824
0e0e4     D8 00 90 FD | 	jmp	#LR__1072
0e0e8                 | LR__1067
0e0e8     30 4E 05 F1 | 	add	fp, #48
0e0ec     A7 12 02 FB | 	rdlong	arg01, fp
0e0f0     30 4E 85 F1 | 	sub	fp, #48
0e0f4     A7 14 02 FB | 	rdlong	arg02, fp
0e0f8     01 16 06 F6 | 	mov	arg03, #1
0e0fc     00 18 06 F6 | 	mov	arg04, #0
0e100     0B 00 00 FF 
0e104     C0 E4 05 F1 | 	add	objptr, ##5824
0e108                 | '     return fill(addr, pattern, count, listPtr, 4)
0e108     04 1A 06 F6 | 	mov	arg05, #4
0e10c     28 C1 B0 FD | 	call	#_psram_spin2_fill
0e110     0B 00 00 FF 
0e114     C0 E4 85 F1 | 	sub	objptr, ##5824
0e118     A4 00 90 FD | 	jmp	#LR__1072
0e11c                 | LR__1068
0e11c     30 4E 05 F1 | 	add	fp, #48
0e120     A7 12 02 FB | 	rdlong	arg01, fp
0e124     30 4E 85 F1 | 	sub	fp, #48
0e128     A7 14 02 FB | 	rdlong	arg02, fp
0e12c     01 16 06 F6 | 	mov	arg03, #1
0e130     00 18 06 F6 | 	mov	arg04, #0
0e134     0B 00 00 FF 
0e138     C0 E4 05 F1 | 	add	objptr, ##5824
0e13c                 | '     return fill(addr, pattern, count, listPtr, 4)
0e13c     04 1A 06 F6 | 	mov	arg05, #4
0e140     F4 C0 B0 FD | 	call	#_psram_spin2_fill
0e144     0B 00 00 FF 
0e148     C0 E4 85 F1 | 	sub	objptr, ##5824
0e14c     70 00 90 FD | 	jmp	#LR__1072
0e150                 | LR__1069
0e150     30 4E 05 F1 | 	add	fp, #48
0e154     A7 12 02 FB | 	rdlong	arg01, fp
0e158     30 4E 85 F1 | 	sub	fp, #48
0e15c     A7 14 02 FB | 	rdlong	arg02, fp
0e160     01 16 06 F6 | 	mov	arg03, #1
0e164     00 18 06 F6 | 	mov	arg04, #0
0e168     0B 00 00 FF 
0e16c     C0 E4 05 F1 | 	add	objptr, ##5824
0e170                 | '     return fill(addr, pattern, count, listPtr, 4)
0e170     04 1A 06 F6 | 	mov	arg05, #4
0e174     C0 C0 B0 FD | 	call	#_psram_spin2_fill
0e178     0B 00 00 FF 
0e17c     C0 E4 85 F1 | 	sub	objptr, ##5824
0e180     3C 00 90 FD | 	jmp	#LR__1072
0e184                 | LR__1070
0e184     30 4E 05 F1 | 	add	fp, #48
0e188     A7 12 02 FB | 	rdlong	arg01, fp
0e18c     30 4E 85 F1 | 	sub	fp, #48
0e190     A7 14 02 FB | 	rdlong	arg02, fp
0e194     01 16 06 F6 | 	mov	arg03, #1
0e198     00 18 06 F6 | 	mov	arg04, #0
0e19c     0B 00 00 FF 
0e1a0     C0 E4 05 F1 | 	add	objptr, ##5824
0e1a4                 | '     return fill(addr, pattern, count, listPtr, 4)
0e1a4     04 1A 06 F6 | 	mov	arg05, #4
0e1a8     8C C0 B0 FD | 	call	#_psram_spin2_fill
0e1ac     0B 00 00 FF 
0e1b0     C0 E4 85 F1 | 	sub	objptr, ##5824
0e1b4     08 00 90 FD | 	jmp	#LR__1072
0e1b8                 | LR__1071
0e1b8     2F 12 06 F6 | 	mov	arg01, #47
0e1bc     98 94 B0 FD | 	call	#_printerror
0e1c0                 | LR__1072
0e1c0                 | LR__1073
0e1c0     A7 F0 03 F6 | 	mov	ptra, fp
0e1c4     B2 00 A0 FD | 	call	#popregs_
0e1c8                 | _do_assign_ret
0e1c8     2D 00 64 FD | 	ret
0e1cc                 | 
0e1cc                 | ' 
0e1cc                 | ' 
0e1cc                 | ' ' --------------------- Read a variable and push to the stack
0e1cc                 | ' 
0e1cc                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
0e1cc                 | ' 
0e1cc                 | ' sub do_getvar
0e1cc                 | _do_getvar
0e1cc     04 4A 05 F6 | 	mov	COUNT_, #4
0e1d0     A8 00 A0 FD | 	call	#pushregs_
0e1d4     3C F0 07 F1 | 	add	ptra, #60
0e1d8                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0e1d8                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0e1d8     69 00 00 FF 
0e1dc     E4 E5 05 F1 | 	add	objptr, ##54244
0e1e0     F2 1E 02 FB | 	rdlong	local01, objptr
0e1e4     0F 17 02 F6 | 	mov	arg03, local01
0e1e8     01 16 66 F0 | 	shl	arg03, #1
0e1ec     0F 17 02 F1 | 	add	arg03, local01
0e1f0     02 16 66 F0 | 	shl	arg03, #2
0e1f4     03 00 00 FF 
0e1f8     04 E4 85 F1 | 	sub	objptr, ##1540
0e1fc     F2 16 02 F1 | 	add	arg03, objptr
0e200     04 16 06 F1 | 	add	arg03, #4
0e204     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0e208     66 00 00 FF 
0e20c     E0 E5 85 F1 | 	sub	objptr, ##52704
0e210     C4 00 90 5D |  if_ne	jmp	#LR__1081
0e214     69 00 00 FF 
0e218     E4 E5 05 F1 | 	add	objptr, ##54244
0e21c     F2 1E 02 FB | 	rdlong	local01, objptr
0e220     0F 13 02 F6 | 	mov	arg01, local01
0e224     01 12 66 F0 | 	shl	arg01, #1
0e228     0F 13 02 F1 | 	add	arg01, local01
0e22c     02 12 66 F0 | 	shl	arg01, #2
0e230     03 00 00 FF 
0e234     04 E4 85 F1 | 	sub	objptr, ##1540
0e238     F2 12 02 F1 | 	add	arg01, objptr
0e23c     09 1F 02 FB | 	rdlong	local01, arg01
0e240     04 1E 66 F0 | 	shl	local01, #4
0e244     32 00 00 FF 
0e248     74 E4 85 F1 | 	sub	objptr, ##25716
0e24c     F2 1E 02 F1 | 	add	local01, objptr
0e250     04 1E 06 F1 | 	add	local01, #4
0e254     0F 13 02 FB | 	rdlong	arg01, local01
0e258     04 1E 06 F1 | 	add	local01, #4
0e25c     0F 1F 02 FB | 	rdlong	local01, local01
0e260     A7 12 62 FC | 	wrlong	arg01, fp
0e264     04 4E 05 F1 | 	add	fp, #4
0e268     A7 1E 62 FC | 	wrlong	local01, fp
0e26c     35 00 00 FF 
0e270     78 E4 05 F1 | 	add	objptr, ##27256
0e274     F2 1E 02 FB | 	rdlong	local01, objptr
0e278     0F 13 02 F6 | 	mov	arg01, local01
0e27c     01 12 66 F0 | 	shl	arg01, #1
0e280     0F 13 02 F1 | 	add	arg01, local01
0e284     02 12 66 F0 | 	shl	arg01, #2
0e288     03 00 00 FF 
0e28c     04 E4 85 F1 | 	sub	objptr, ##1540
0e290     F2 12 02 F1 | 	add	arg01, objptr
0e294     09 1F 02 FB | 	rdlong	local01, arg01
0e298     04 1E 66 F0 | 	shl	local01, #4
0e29c     32 00 00 FF 
0e2a0     74 E4 85 F1 | 	sub	objptr, ##25716
0e2a4     F2 1E 02 F1 | 	add	local01, objptr
0e2a8     0C 1E 06 F1 | 	add	local01, #12
0e2ac     0F 1F 02 FB | 	rdlong	local01, local01
0e2b0     04 4E 05 F1 | 	add	fp, #4
0e2b4     A7 1E 62 FC | 	wrlong	local01, fp
0e2b8                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
0e2b8                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0e2b8                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
0e2b8     08 4E 85 F1 | 	sub	fp, #8
0e2bc     00 1F 16 F2 | 	cmp	local01, #256 wc
0e2c0     34 00 00 FF 
0e2c4     6C E5 85 F1 | 	sub	objptr, ##26988
0e2c8     0C 00 90 3D |  if_ae	jmp	#LR__1080
0e2cc     A7 12 02 F6 | 	mov	arg01, fp
0e2d0     BC B8 BF FD | 	call	#_push
0e2d4     A0 04 90 FD | 	jmp	#LR__1102
0e2d8                 | LR__1080
0e2d8                 | LR__1081
0e2d8     69 00 00 FF 
0e2dc     E4 E5 05 F1 | 	add	objptr, ##54244
0e2e0     F2 16 02 FB | 	rdlong	arg03, objptr
0e2e4     0B 15 02 F6 | 	mov	arg02, arg03
0e2e8     01 14 66 F0 | 	shl	arg02, #1
0e2ec     0B 15 02 F1 | 	add	arg02, arg03
0e2f0     02 14 66 F0 | 	shl	arg02, #2
0e2f4     03 00 00 FF 
0e2f8     04 E4 85 F1 | 	sub	objptr, ##1540
0e2fc     F2 14 02 F1 | 	add	arg02, objptr
0e300     0A 17 02 FB | 	rdlong	arg03, arg02
0e304     04 16 66 F0 | 	shl	arg03, #4
0e308     32 00 00 FF 
0e30c     74 E4 85 F1 | 	sub	objptr, ##25716
0e310     F2 16 02 F1 | 	add	arg03, objptr
0e314     04 16 06 F1 | 	add	arg03, #4
0e318     0B 13 02 FB | 	rdlong	arg01, arg03
0e31c     0C 4E 05 F1 | 	add	fp, #12
0e320     A7 12 62 FC | 	wrlong	arg01, fp
0e324     0C 4E 85 F1 | 	sub	fp, #12
0e328     34 00 00 FF 
0e32c     6C E5 85 F1 | 	sub	objptr, ##26988
0e330     E0 94 B0 FD | 	call	#_pslpeek
0e334     FD FA 31 F9 | 	getword	result1, result1, #0
0e338     10 4E 05 F1 | 	add	fp, #16
0e33c     A7 FA 61 FC | 	wrlong	result1, fp
0e340     69 00 00 FF 
0e344     E4 E5 05 F1 | 	add	objptr, ##54244
0e348     F2 16 02 FB | 	rdlong	arg03, objptr
0e34c     0B 15 02 F6 | 	mov	arg02, arg03
0e350     01 14 66 F0 | 	shl	arg02, #1
0e354     0B 15 02 F1 | 	add	arg02, arg03
0e358     02 14 66 F0 | 	shl	arg02, #2
0e35c     03 00 00 FF 
0e360     04 E4 85 F1 | 	sub	objptr, ##1540
0e364     F2 14 02 F1 | 	add	arg02, objptr
0e368     04 14 06 F1 | 	add	arg02, #4
0e36c     0A 17 02 FB | 	rdlong	arg03, arg02
0e370     04 4E 05 F1 | 	add	fp, #4
0e374     A7 16 62 FC | 	wrlong	arg03, fp
0e378     08 4E 85 F1 | 	sub	fp, #8
0e37c     A7 12 02 FB | 	rdlong	arg01, fp
0e380     0C 4E 85 F1 | 	sub	fp, #12
0e384     02 12 06 F1 | 	add	arg01, #2
0e388     66 00 00 FF 
0e38c     E0 E5 85 F1 | 	sub	objptr, ##52704
0e390     28 94 B0 FD | 	call	#_pspeek
0e394     FD FA E1 F8 | 	getbyte	result1, result1, #0
0e398     18 4E 05 F1 | 	add	fp, #24
0e39c     A7 FA 61 FC | 	wrlong	result1, fp
0e3a0     0C 4E 85 F1 | 	sub	fp, #12
0e3a4     A7 12 02 FB | 	rdlong	arg01, fp
0e3a8     0C 4E 85 F1 | 	sub	fp, #12
0e3ac     04 12 06 F1 | 	add	arg01, #4
0e3b0     60 94 B0 FD | 	call	#_pslpeek
0e3b4     1C 4E 05 F1 | 	add	fp, #28
0e3b8     A7 FA 61 FC | 	wrlong	result1, fp
0e3bc     10 4E 85 F1 | 	sub	fp, #16
0e3c0     A7 12 02 FB | 	rdlong	arg01, fp
0e3c4     0C 4E 85 F1 | 	sub	fp, #12
0e3c8     08 12 06 F1 | 	add	arg01, #8
0e3cc     44 94 B0 FD | 	call	#_pslpeek
0e3d0     20 4E 05 F1 | 	add	fp, #32
0e3d4     A7 FA 61 FC | 	wrlong	result1, fp
0e3d8     14 4E 85 F1 | 	sub	fp, #20
0e3dc     A7 12 02 FB | 	rdlong	arg01, fp
0e3e0     0C 4E 85 F1 | 	sub	fp, #12
0e3e4     0C 12 06 F1 | 	add	arg01, #12
0e3e8     28 94 B0 FD | 	call	#_pslpeek
0e3ec     24 4E 05 F1 | 	add	fp, #36
0e3f0     A7 FA 61 FC | 	wrlong	result1, fp
0e3f4                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0e3f4                 | ' esize=pspeek(arrptr+2)
0e3f4                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0e3f4                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0e3f4                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0e3f4                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
0e3f4     10 4E 85 F1 | 	sub	fp, #16
0e3f8     A7 16 02 FB | 	rdlong	arg03, fp
0e3fc     14 4E 85 F1 | 	sub	fp, #20
0e400     03 16 16 F2 | 	cmp	arg03, #3 wc
0e404     38 00 90 CD |  if_b	jmp	#LR__1082
0e408     EC B6 BF FD | 	call	#_pop
0e40c     FF 16 02 F6 | 	mov	arg03, result3
0e410     A7 FA 61 FC | 	wrlong	result1, fp
0e414     04 4E 05 F1 | 	add	fp, #4
0e418     A7 FC 61 FC | 	wrlong	result2, fp
0e41c     04 4E 05 F1 | 	add	fp, #4
0e420     A7 16 62 FC | 	wrlong	arg03, fp
0e424     08 4E 85 F1 | 	sub	fp, #8
0e428     A7 12 02 F6 | 	mov	arg01, fp
0e42c     18 3A B0 FD | 	call	#_converttoint
0e430     30 4E 05 F1 | 	add	fp, #48
0e434     A7 FA 61 FC | 	wrlong	result1, fp
0e438     30 4E 85 F1 | 	sub	fp, #48
0e43c     0C 00 90 FD | 	jmp	#LR__1083
0e440                 | LR__1082
0e440     30 4E 05 F1 | 	add	fp, #48
0e444     A7 00 68 FC | 	wrlong	#0, fp
0e448     30 4E 85 F1 | 	sub	fp, #48
0e44c                 | LR__1083
0e44c                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
0e44c     14 4E 05 F1 | 	add	fp, #20
0e450     A7 16 02 FB | 	rdlong	arg03, fp
0e454     14 4E 85 F1 | 	sub	fp, #20
0e458     02 16 16 F2 | 	cmp	arg03, #2 wc
0e45c     38 00 90 CD |  if_b	jmp	#LR__1084
0e460     94 B6 BF FD | 	call	#_pop
0e464     FF 16 02 F6 | 	mov	arg03, result3
0e468     A7 FA 61 FC | 	wrlong	result1, fp
0e46c     04 4E 05 F1 | 	add	fp, #4
0e470     A7 FC 61 FC | 	wrlong	result2, fp
0e474     04 4E 05 F1 | 	add	fp, #4
0e478     A7 16 62 FC | 	wrlong	arg03, fp
0e47c     08 4E 85 F1 | 	sub	fp, #8
0e480     A7 12 02 F6 | 	mov	arg01, fp
0e484     C0 39 B0 FD | 	call	#_converttoint
0e488     2C 4E 05 F1 | 	add	fp, #44
0e48c     A7 FA 61 FC | 	wrlong	result1, fp
0e490     2C 4E 85 F1 | 	sub	fp, #44
0e494     0C 00 90 FD | 	jmp	#LR__1085
0e498                 | LR__1084
0e498     2C 4E 05 F1 | 	add	fp, #44
0e49c     A7 00 68 FC | 	wrlong	#0, fp
0e4a0     2C 4E 85 F1 | 	sub	fp, #44
0e4a4                 | LR__1085
0e4a4                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
0e4a4     14 4E 05 F1 | 	add	fp, #20
0e4a8     A7 16 02 FB | 	rdlong	arg03, fp
0e4ac     14 4E 85 F1 | 	sub	fp, #20
0e4b0     01 16 16 F2 | 	cmp	arg03, #1 wc
0e4b4     38 00 90 CD |  if_b	jmp	#LR__1086
0e4b8     3C B6 BF FD | 	call	#_pop
0e4bc     FF 16 02 F6 | 	mov	arg03, result3
0e4c0     A7 FA 61 FC | 	wrlong	result1, fp
0e4c4     04 4E 05 F1 | 	add	fp, #4
0e4c8     A7 FC 61 FC | 	wrlong	result2, fp
0e4cc     04 4E 05 F1 | 	add	fp, #4
0e4d0     A7 16 62 FC | 	wrlong	arg03, fp
0e4d4     08 4E 85 F1 | 	sub	fp, #8
0e4d8     A7 12 02 F6 | 	mov	arg01, fp
0e4dc     68 39 B0 FD | 	call	#_converttoint
0e4e0     28 4E 05 F1 | 	add	fp, #40
0e4e4     A7 FA 61 FC | 	wrlong	result1, fp
0e4e8     28 4E 85 F1 | 	sub	fp, #40
0e4ec     0C 00 90 FD | 	jmp	#LR__1087
0e4f0                 | LR__1086
0e4f0     28 4E 05 F1 | 	add	fp, #40
0e4f4     A7 00 68 FC | 	wrlong	#0, fp
0e4f8     28 4E 85 F1 | 	sub	fp, #40
0e4fc                 | LR__1087
0e4fc     0C 4E 05 F1 | 	add	fp, #12
0e500     A7 20 02 FB | 	rdlong	local02, fp
0e504     1C 4E 05 F1 | 	add	fp, #28
0e508     A7 22 02 FB | 	rdlong	local03, fp
0e50c     04 4E 05 F1 | 	add	fp, #4
0e510     A7 FC 01 FB | 	rdlong	result2, fp
0e514     10 4E 85 F1 | 	sub	fp, #16
0e518     A7 FE 01 FB | 	rdlong	result3, fp
0e51c     FF FC 01 FD | 	qmul	result2, result3
0e520     10 20 06 F1 | 	add	local02, #16
0e524     14 4E 05 F1 | 	add	fp, #20
0e528     A7 FC 01 FB | 	rdlong	result2, fp
0e52c     18 FA 61 FD | 	getqx	result1
0e530     FF FC 01 FD | 	qmul	result2, result3
0e534     FD 22 02 F1 | 	add	local03, result1
0e538     10 4E 85 F1 | 	sub	fp, #16
0e53c     A7 FE 01 FB | 	rdlong	result3, fp
0e540     18 FC 61 FD | 	getqx	result2
0e544     FF FC 01 FD | 	qmul	result2, result3
0e548     08 4E 85 F1 | 	sub	fp, #8
0e54c     A7 FE 01 FB | 	rdlong	result3, fp
0e550     18 FC 61 FD | 	getqx	result2
0e554     FE 22 02 F1 | 	add	local03, result2
0e558     FF 22 02 FD | 	qmul	local03, result3
0e55c     1C 4E 05 F1 | 	add	fp, #28
0e560                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0e560                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize ': print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
0e560                 | ' 
0e560                 | ' select case vartype
0e560     18 FC 61 FD | 	getqx	result2
0e564     FE 20 02 F1 | 	add	local02, result2
0e568     A7 20 62 FC | 	wrlong	local02, fp
0e56c     24 4E 85 F1 | 	sub	fp, #36
0e570     A7 24 02 FB | 	rdlong	local04, fp
0e574     10 4E 85 F1 | 	sub	fp, #16
0e578     00 25 86 F1 | 	sub	local04, #256
0e57c     0C 24 26 F3 | 	fle	local04, #12
0e580     30 24 62 FD | 	jmprel	local04
0e584                 | LR__1088
0e584     30 00 90 FD | 	jmp	#LR__1089
0e588     58 00 90 FD | 	jmp	#LR__1090
0e58c     8C 00 90 FD | 	jmp	#LR__1091
0e590     AC 00 90 FD | 	jmp	#LR__1092
0e594     E8 00 90 FD | 	jmp	#LR__1093
0e598     08 01 90 FD | 	jmp	#LR__1094
0e59c     24 01 90 FD | 	jmp	#LR__1095
0e5a0     40 01 90 FD | 	jmp	#LR__1096
0e5a4     50 01 90 FD | 	jmp	#LR__1097
0e5a8     60 01 90 FD | 	jmp	#LR__1098
0e5ac     7C 01 90 FD | 	jmp	#LR__1099
0e5b0     8C 01 90 FD | 	jmp	#LR__1100
0e5b4     B8 01 90 FD | 	jmp	#LR__1101
0e5b8                 | LR__1089
0e5b8     A7 12 02 F6 | 	mov	arg01, fp
0e5bc     34 4E 05 F1 | 	add	fp, #52
0e5c0     A7 14 02 FB | 	rdlong	arg02, fp
0e5c4     34 4E 85 F1 | 	sub	fp, #52
0e5c8     0C 16 06 F6 | 	mov	arg03, #12
0e5cc     0B 00 00 FF 
0e5d0     C0 E4 05 F1 | 	add	objptr, ##5824
0e5d4     28 BB B0 FD | 	call	#_psram_spin2_read1
0e5d8     0B 00 00 FF 
0e5dc     C0 E4 85 F1 | 	sub	objptr, ##5824
0e5e0     8C 01 90 FD | 	jmp	#LR__1101
0e5e4                 | LR__1090
0e5e4     08 4E 05 F1 | 	add	fp, #8
0e5e8     A7 38 68 FC | 	wrlong	#28, fp
0e5ec     2C 4E 05 F1 | 	add	fp, #44
0e5f0     A7 12 02 FB | 	rdlong	arg01, fp
0e5f4     34 4E 85 F1 | 	sub	fp, #52
0e5f8     C0 91 B0 FD | 	call	#_pspeek
0e5fc     FD FA E1 F8 | 	getbyte	result1, result1, #0
0e600     A7 FA 61 FC | 	wrlong	result1, fp
0e604     80 FA 15 F2 | 	cmp	result1, #128 wc
0e608     00 1F 66 36 |  if_ae	neg	local01, #256
0e60c     A7 22 02 3B |  if_ae	rdlong	local03, fp
0e610     11 1F 42 35 |  if_ae	or	local01, local03
0e614     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0e618     54 01 90 FD | 	jmp	#LR__1101
0e61c                 | LR__1091
0e61c     08 4E 05 F1 | 	add	fp, #8
0e620     A7 3A 68 FC | 	wrlong	#29, fp
0e624     2C 4E 05 F1 | 	add	fp, #44
0e628     A7 12 02 FB | 	rdlong	arg01, fp
0e62c     34 4E 85 F1 | 	sub	fp, #52
0e630     88 91 B0 FD | 	call	#_pspeek
0e634     FD FA E1 F8 | 	getbyte	result1, result1, #0
0e638     A7 FA 61 FC | 	wrlong	result1, fp
0e63c     30 01 90 FD | 	jmp	#LR__1101
0e640                 | LR__1092
0e640     08 4E 05 F1 | 	add	fp, #8
0e644     A7 38 68 FC | 	wrlong	#28, fp
0e648     2C 4E 05 F1 | 	add	fp, #44
0e64c     A7 12 02 FB | 	rdlong	arg01, fp
0e650     34 4E 85 F1 | 	sub	fp, #52
0e654     BC 91 B0 FD | 	call	#_pslpeek
0e658     FD FA 31 F9 | 	getword	result1, result1, #0
0e65c     A7 FA 61 FC | 	wrlong	result1, fp
0e660     40 00 00 FF 
0e664     00 FA 15 F2 | 	cmp	result1, ##32768 wc
0e668     FF 7F 00 3F 
0e66c     00 1F 06 36 |  if_ae	mov	local01, ##16776960
0e670     A7 22 02 3B |  if_ae	rdlong	local03, fp
0e674     11 1F 42 35 |  if_ae	or	local01, local03
0e678     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0e67c     F0 00 90 FD | 	jmp	#LR__1101
0e680                 | LR__1093
0e680     08 4E 05 F1 | 	add	fp, #8
0e684     A7 3A 68 FC | 	wrlong	#29, fp
0e688     2C 4E 05 F1 | 	add	fp, #44
0e68c     A7 12 02 FB | 	rdlong	arg01, fp
0e690     34 4E 85 F1 | 	sub	fp, #52
0e694     7C 91 B0 FD | 	call	#_pslpeek
0e698     FD FA 31 F9 | 	getword	result1, result1, #0
0e69c     A7 FA 61 FC | 	wrlong	result1, fp
0e6a0     CC 00 90 FD | 	jmp	#LR__1101
0e6a4                 | LR__1094
0e6a4     08 4E 05 F1 | 	add	fp, #8
0e6a8     A7 38 68 FC | 	wrlong	#28, fp
0e6ac     2C 4E 05 F1 | 	add	fp, #44
0e6b0     A7 12 02 FB | 	rdlong	arg01, fp
0e6b4     34 4E 85 F1 | 	sub	fp, #52
0e6b8     58 91 B0 FD | 	call	#_pslpeek
0e6bc     A7 FA 61 FC | 	wrlong	result1, fp
0e6c0     AC 00 90 FD | 	jmp	#LR__1101
0e6c4                 | LR__1095
0e6c4     08 4E 05 F1 | 	add	fp, #8
0e6c8     A7 3A 68 FC | 	wrlong	#29, fp
0e6cc     2C 4E 05 F1 | 	add	fp, #44
0e6d0     A7 12 02 FB | 	rdlong	arg01, fp
0e6d4     34 4E 85 F1 | 	sub	fp, #52
0e6d8     38 91 B0 FD | 	call	#_pslpeek
0e6dc     A7 FA 61 FC | 	wrlong	result1, fp
0e6e0     8C 00 90 FD | 	jmp	#LR__1101
0e6e4                 | LR__1096
0e6e4     08 4E 05 F1 | 	add	fp, #8
0e6e8     A7 FE 69 FC | 	wrlong	#255, fp
0e6ec     08 4E 85 F1 | 	sub	fp, #8
0e6f0     A7 60 68 FC | 	wrlong	#48, fp
0e6f4     78 00 90 FD | 	jmp	#LR__1101
0e6f8                 | LR__1097
0e6f8     08 4E 05 F1 | 	add	fp, #8
0e6fc     A7 FE 69 FC | 	wrlong	#255, fp
0e700     08 4E 85 F1 | 	sub	fp, #8
0e704     A7 60 68 FC | 	wrlong	#48, fp
0e708     64 00 90 FD | 	jmp	#LR__1101
0e70c                 | LR__1098
0e70c     08 4E 05 F1 | 	add	fp, #8
0e710     A7 3C 68 FC | 	wrlong	#30, fp
0e714     2C 4E 05 F1 | 	add	fp, #44
0e718     A7 12 02 FB | 	rdlong	arg01, fp
0e71c     34 4E 85 F1 | 	sub	fp, #52
0e720     F0 90 B0 FD | 	call	#_pslpeek
0e724     A7 FA 61 FC | 	wrlong	result1, fp
0e728     44 00 90 FD | 	jmp	#LR__1101
0e72c                 | LR__1099
0e72c     08 4E 05 F1 | 	add	fp, #8
0e730     A7 FE 69 FC | 	wrlong	#255, fp
0e734     08 4E 85 F1 | 	sub	fp, #8
0e738     A7 60 68 FC | 	wrlong	#48, fp
0e73c     30 00 90 FD | 	jmp	#LR__1101
0e740                 | LR__1100
0e740     08 4E 05 F1 | 	add	fp, #8
0e744     A7 3E 68 FC | 	wrlong	#31, fp
0e748     2C 4E 05 F1 | 	add	fp, #44
0e74c     A7 12 02 FB | 	rdlong	arg01, fp
0e750     34 4E 85 F1 | 	sub	fp, #52
0e754     BC 90 B0 FD | 	call	#_pslpeek
0e758     A7 FA 61 FC | 	wrlong	result1, fp
0e75c     00 04 00 FF 
0e760     00 FA 15 F2 | 	cmp	result1, ##524288 wc
0e764     08 4E 05 31 |  if_ae	add	fp, #8
0e768     A7 56 68 3C |  if_ae	wrlong	#43, fp
0e76c     08 4E 85 31 |  if_ae	sub	fp, #8
0e770                 | LR__1101
0e770     A7 12 02 F6 | 	mov	arg01, fp
0e774     18 B4 BF FD | 	call	#_push
0e778                 | LR__1102
0e778     A7 F0 03 F6 | 	mov	ptra, fp
0e77c     B2 00 A0 FD | 	call	#popregs_
0e780                 | _do_getvar_ret
0e780     2D 00 64 FD | 	ret
0e784                 | 
0e784                 | ' 
0e784                 | ' '------------------------ Operators 
0e784                 | ' 
0e784                 | ' sub do_plus 
0e784                 | _do_plus
0e784     05 4A 05 F6 | 	mov	COUNT_, #5
0e788     A8 00 A0 FD | 	call	#pushregs_
0e78c     18 F0 07 F1 | 	add	ptra, #24
0e790     64 B3 BF FD | 	call	#_pop
0e794     FD 1E 02 F6 | 	mov	local01, result1
0e798     FE 20 02 F6 | 	mov	local02, result2
0e79c     FF 22 02 F6 | 	mov	local03, result3
0e7a0     0C 4E 05 F1 | 	add	fp, #12
0e7a4     A7 1E 62 FC | 	wrlong	local01, fp
0e7a8     04 4E 05 F1 | 	add	fp, #4
0e7ac     A7 20 62 FC | 	wrlong	local02, fp
0e7b0     04 4E 05 F1 | 	add	fp, #4
0e7b4     A7 22 62 FC | 	wrlong	local03, fp
0e7b8     14 4E 85 F1 | 	sub	fp, #20
0e7bc     38 B3 BF FD | 	call	#_pop
0e7c0     FF 22 02 F6 | 	mov	local03, result3
0e7c4     A7 FA 61 FC | 	wrlong	result1, fp
0e7c8     04 4E 05 F1 | 	add	fp, #4
0e7cc     A7 FC 61 FC | 	wrlong	result2, fp
0e7d0     04 4E 05 F1 | 	add	fp, #4
0e7d4     A7 22 62 FC | 	wrlong	local03, fp
0e7d8                 | ' 
0e7d8                 | ' t2=pop()
0e7d8                 | ' t1=pop()
0e7d8                 | ' 
0e7d8                 | ' 
0e7d8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
0e7d8     08 4E 85 F1 | 	sub	fp, #8
0e7dc     1D 22 0E F2 | 	cmp	local03, #29 wz
0e7e0     14 4E 05 A1 |  if_e	add	fp, #20
0e7e4     A7 24 02 AB |  if_e	rdlong	local04, fp
0e7e8     14 4E 85 A1 |  if_e	sub	fp, #20
0e7ec     12 23 02 A6 |  if_e	mov	local03, local04
0e7f0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e7f4     1C 00 90 5D |  if_ne	jmp	#LR__1110
0e7f8     A7 1E 02 FB | 	rdlong	local01, fp
0e7fc     0C 4E 05 F1 | 	add	fp, #12
0e800     A7 20 02 FB | 	rdlong	local02, fp
0e804     0C 4E 85 F1 | 	sub	fp, #12
0e808     10 1F 02 F1 | 	add	local01, local02
0e80c     A7 1E 62 FC | 	wrlong	local01, fp
0e810     48 04 90 FD | 	jmp	#LR__1125
0e814                 | LR__1110
0e814                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
0e814     08 4E 05 F1 | 	add	fp, #8
0e818     A7 1E 02 FB | 	rdlong	local01, fp
0e81c     08 4E 85 F1 | 	sub	fp, #8
0e820     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e824     14 4E 05 A1 |  if_e	add	fp, #20
0e828     A7 24 02 AB |  if_e	rdlong	local04, fp
0e82c     14 4E 85 A1 |  if_e	sub	fp, #20
0e830     12 23 02 A6 |  if_e	mov	local03, local04
0e834     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e838     28 00 90 5D |  if_ne	jmp	#LR__1111
0e83c     A7 1E 02 FB | 	rdlong	local01, fp
0e840     0C 4E 05 F1 | 	add	fp, #12
0e844     A7 20 02 FB | 	rdlong	local02, fp
0e848     0C 4E 85 F1 | 	sub	fp, #12
0e84c     10 1F 02 F1 | 	add	local01, local02
0e850     A7 1E 62 FC | 	wrlong	local01, fp
0e854     08 4E 05 F1 | 	add	fp, #8
0e858     A7 38 68 FC | 	wrlong	#28, fp
0e85c     08 4E 85 F1 | 	sub	fp, #8
0e860     F8 03 90 FD | 	jmp	#LR__1125
0e864                 | LR__1111
0e864                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0e864     08 4E 05 F1 | 	add	fp, #8
0e868     A7 1E 02 FB | 	rdlong	local01, fp
0e86c     08 4E 85 F1 | 	sub	fp, #8
0e870     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e874     14 4E 05 A1 |  if_e	add	fp, #20
0e878     A7 24 02 AB |  if_e	rdlong	local04, fp
0e87c     14 4E 85 A1 |  if_e	sub	fp, #20
0e880     12 23 02 A6 |  if_e	mov	local03, local04
0e884     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e888     30 00 90 5D |  if_ne	jmp	#LR__1112
0e88c     A7 12 02 FB | 	rdlong	arg01, fp
0e890     F4 EA B0 FD | 	call	#__system___float_fromuns
0e894     FD 12 02 F6 | 	mov	arg01, result1
0e898     0C 4E 05 F1 | 	add	fp, #12
0e89c     A7 14 02 FB | 	rdlong	arg02, fp
0e8a0     0C 4E 85 F1 | 	sub	fp, #12
0e8a4     14 EB B0 FD | 	call	#__system___float_add
0e8a8     A7 FA 61 FC | 	wrlong	result1, fp
0e8ac     08 4E 05 F1 | 	add	fp, #8
0e8b0     A7 3C 68 FC | 	wrlong	#30, fp
0e8b4     08 4E 85 F1 | 	sub	fp, #8
0e8b8     A0 03 90 FD | 	jmp	#LR__1125
0e8bc                 | LR__1112
0e8bc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
0e8bc     08 4E 05 F1 | 	add	fp, #8
0e8c0     A7 1E 02 FB | 	rdlong	local01, fp
0e8c4     08 4E 85 F1 | 	sub	fp, #8
0e8c8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e8cc     14 4E 05 A1 |  if_e	add	fp, #20
0e8d0     A7 24 02 AB |  if_e	rdlong	local04, fp
0e8d4     14 4E 85 A1 |  if_e	sub	fp, #20
0e8d8     12 23 02 A6 |  if_e	mov	local03, local04
0e8dc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e8e0     1C 00 90 5D |  if_ne	jmp	#LR__1113
0e8e4     A7 1E 02 FB | 	rdlong	local01, fp
0e8e8     0C 4E 05 F1 | 	add	fp, #12
0e8ec     A7 20 02 FB | 	rdlong	local02, fp
0e8f0     0C 4E 85 F1 | 	sub	fp, #12
0e8f4     10 1F 02 F1 | 	add	local01, local02
0e8f8     A7 1E 62 FC | 	wrlong	local01, fp
0e8fc     5C 03 90 FD | 	jmp	#LR__1125
0e900                 | LR__1113
0e900                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
0e900     08 4E 05 F1 | 	add	fp, #8
0e904     A7 1E 02 FB | 	rdlong	local01, fp
0e908     08 4E 85 F1 | 	sub	fp, #8
0e90c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e910     14 4E 05 A1 |  if_e	add	fp, #20
0e914     A7 24 02 AB |  if_e	rdlong	local04, fp
0e918     14 4E 85 A1 |  if_e	sub	fp, #20
0e91c     12 23 02 A6 |  if_e	mov	local03, local04
0e920     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e924     1C 00 90 5D |  if_ne	jmp	#LR__1114
0e928     A7 1E 02 FB | 	rdlong	local01, fp
0e92c     0C 4E 05 F1 | 	add	fp, #12
0e930     A7 20 02 FB | 	rdlong	local02, fp
0e934     0C 4E 85 F1 | 	sub	fp, #12
0e938     10 1F 02 F1 | 	add	local01, local02
0e93c     A7 1E 62 FC | 	wrlong	local01, fp
0e940     18 03 90 FD | 	jmp	#LR__1125
0e944                 | LR__1114
0e944                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0e944     08 4E 05 F1 | 	add	fp, #8
0e948     A7 1E 02 FB | 	rdlong	local01, fp
0e94c     08 4E 85 F1 | 	sub	fp, #8
0e950     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e954     14 4E 05 A1 |  if_e	add	fp, #20
0e958     A7 24 02 AB |  if_e	rdlong	local04, fp
0e95c     14 4E 85 A1 |  if_e	sub	fp, #20
0e960     12 23 02 A6 |  if_e	mov	local03, local04
0e964     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e968     40 00 90 5D |  if_ne	jmp	#LR__1115
0e96c     A7 12 02 FB | 	rdlong	arg01, fp
0e970     09 13 52 F6 | 	abs	arg01, arg01 wc
0e974     1F 26 C6 C9 |  if_b	decod	local05, #31
0e978     00 26 06 36 |  if_ae	mov	local05, #0
0e97c     08 EA B0 FD | 	call	#__system___float_fromuns
0e980     13 FB 61 F5 | 	xor	result1, local05
0e984     FD 12 02 F6 | 	mov	arg01, result1
0e988     0C 4E 05 F1 | 	add	fp, #12
0e98c     A7 14 02 FB | 	rdlong	arg02, fp
0e990     0C 4E 85 F1 | 	sub	fp, #12
0e994     24 EA B0 FD | 	call	#__system___float_add
0e998     A7 FA 61 FC | 	wrlong	result1, fp
0e99c     08 4E 05 F1 | 	add	fp, #8
0e9a0     A7 3C 68 FC | 	wrlong	#30, fp
0e9a4     08 4E 85 F1 | 	sub	fp, #8
0e9a8     B0 02 90 FD | 	jmp	#LR__1125
0e9ac                 | LR__1115
0e9ac                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
0e9ac     08 4E 05 F1 | 	add	fp, #8
0e9b0     A7 1E 02 FB | 	rdlong	local01, fp
0e9b4     08 4E 85 F1 | 	sub	fp, #8
0e9b8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e9bc     14 4E 05 A1 |  if_e	add	fp, #20
0e9c0     A7 24 02 AB |  if_e	rdlong	local04, fp
0e9c4     14 4E 85 A1 |  if_e	sub	fp, #20
0e9c8     12 23 02 A6 |  if_e	mov	local03, local04
0e9cc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e9d0     28 00 90 5D |  if_ne	jmp	#LR__1116
0e9d4     A7 1E 02 FB | 	rdlong	local01, fp
0e9d8     0C 4E 05 F1 | 	add	fp, #12
0e9dc     A7 12 02 FB | 	rdlong	arg01, fp
0e9e0     0C 4E 85 F1 | 	sub	fp, #12
0e9e4     A0 E9 B0 FD | 	call	#__system___float_fromuns
0e9e8     FD 14 02 F6 | 	mov	arg02, result1
0e9ec     0F 13 02 F6 | 	mov	arg01, local01
0e9f0     C8 E9 B0 FD | 	call	#__system___float_add
0e9f4     A7 FA 61 FC | 	wrlong	result1, fp
0e9f8     60 02 90 FD | 	jmp	#LR__1125
0e9fc                 | LR__1116
0e9fc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
0e9fc     08 4E 05 F1 | 	add	fp, #8
0ea00     A7 1E 02 FB | 	rdlong	local01, fp
0ea04     08 4E 85 F1 | 	sub	fp, #8
0ea08     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ea0c     14 4E 05 A1 |  if_e	add	fp, #20
0ea10     A7 24 02 AB |  if_e	rdlong	local04, fp
0ea14     14 4E 85 A1 |  if_e	sub	fp, #20
0ea18     12 23 02 A6 |  if_e	mov	local03, local04
0ea1c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ea20     38 00 90 5D |  if_ne	jmp	#LR__1117
0ea24     A7 1E 02 FB | 	rdlong	local01, fp
0ea28     0C 4E 05 F1 | 	add	fp, #12
0ea2c     A7 12 02 FB | 	rdlong	arg01, fp
0ea30     0C 4E 85 F1 | 	sub	fp, #12
0ea34     09 13 52 F6 | 	abs	arg01, arg01 wc
0ea38     1F 26 C6 C9 |  if_b	decod	local05, #31
0ea3c     00 26 06 36 |  if_ae	mov	local05, #0
0ea40     44 E9 B0 FD | 	call	#__system___float_fromuns
0ea44     13 FB 61 F5 | 	xor	result1, local05
0ea48     FD 14 02 F6 | 	mov	arg02, result1
0ea4c     0F 13 02 F6 | 	mov	arg01, local01
0ea50     68 E9 B0 FD | 	call	#__system___float_add
0ea54     A7 FA 61 FC | 	wrlong	result1, fp
0ea58     00 02 90 FD | 	jmp	#LR__1125
0ea5c                 | LR__1117
0ea5c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
0ea5c     08 4E 05 F1 | 	add	fp, #8
0ea60     A7 1E 02 FB | 	rdlong	local01, fp
0ea64     08 4E 85 F1 | 	sub	fp, #8
0ea68     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ea6c     14 4E 05 A1 |  if_e	add	fp, #20
0ea70     A7 24 02 AB |  if_e	rdlong	local04, fp
0ea74     14 4E 85 A1 |  if_e	sub	fp, #20
0ea78     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
0ea7c     1C 00 90 5D |  if_ne	jmp	#LR__1118
0ea80     A7 12 02 FB | 	rdlong	arg01, fp
0ea84     0C 4E 05 F1 | 	add	fp, #12
0ea88     A7 14 02 FB | 	rdlong	arg02, fp
0ea8c     0C 4E 85 F1 | 	sub	fp, #12
0ea90     28 E9 B0 FD | 	call	#__system___float_add
0ea94     A7 FA 61 FC | 	wrlong	result1, fp
0ea98     C0 01 90 FD | 	jmp	#LR__1125
0ea9c                 | LR__1118
0ea9c                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0ea9c     08 4E 05 F1 | 	add	fp, #8
0eaa0     A7 1E 02 FB | 	rdlong	local01, fp
0eaa4     08 4E 85 F1 | 	sub	fp, #8
0eaa8     1F 1E 0E F2 | 	cmp	local01, #31 wz
0eaac     24 00 90 5D |  if_ne	jmp	#LR__1119
0eab0     14 4E 05 F1 | 	add	fp, #20
0eab4     A7 22 02 FB | 	rdlong	local03, fp
0eab8     14 4E 85 F1 | 	sub	fp, #20
0eabc     1F 22 0E F2 | 	cmp	local03, #31 wz
0eac0     A7 04 68 5C |  if_ne	wrlong	#2, fp
0eac4     08 4E 05 51 |  if_ne	add	fp, #8
0eac8     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0eacc     08 4E 85 51 |  if_ne	sub	fp, #8
0ead0     88 01 90 5D |  if_ne	jmp	#LR__1125
0ead4                 | LR__1119
0ead4                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0ead4     14 4E 05 F1 | 	add	fp, #20
0ead8     A7 1E 02 FB | 	rdlong	local01, fp
0eadc     14 4E 85 F1 | 	sub	fp, #20
0eae0     1F 1E 0E F2 | 	cmp	local01, #31 wz
0eae4     24 00 90 5D |  if_ne	jmp	#LR__1120
0eae8     08 4E 05 F1 | 	add	fp, #8
0eaec     A7 22 02 FB | 	rdlong	local03, fp
0eaf0     08 4E 85 F1 | 	sub	fp, #8
0eaf4     1F 22 0E F2 | 	cmp	local03, #31 wz
0eaf8     A7 04 68 5C |  if_ne	wrlong	#2, fp
0eafc     08 4E 05 51 |  if_ne	add	fp, #8
0eb00     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0eb04     08 4E 85 51 |  if_ne	sub	fp, #8
0eb08     50 01 90 5D |  if_ne	jmp	#LR__1125
0eb0c                 | LR__1120
0eb0c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
0eb0c     08 4E 05 F1 | 	add	fp, #8
0eb10     A7 1E 02 FB | 	rdlong	local01, fp
0eb14     08 4E 85 F1 | 	sub	fp, #8
0eb18     1F 1E 0E F2 | 	cmp	local01, #31 wz
0eb1c     14 4E 05 A1 |  if_e	add	fp, #20
0eb20     A7 22 02 AB |  if_e	rdlong	local03, fp
0eb24     14 4E 85 A1 |  if_e	sub	fp, #20
0eb28     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0eb2c     1C 00 90 5D |  if_ne	jmp	#LR__1121
0eb30     A7 12 02 FB | 	rdlong	arg01, fp
0eb34     0C 4E 05 F1 | 	add	fp, #12
0eb38     A7 14 02 FB | 	rdlong	arg02, fp
0eb3c     0C 4E 85 F1 | 	sub	fp, #12
0eb40     80 C1 B0 FD | 	call	#__system___string_concat
0eb44     A7 FA 61 FC | 	wrlong	result1, fp
0eb48     10 01 90 FD | 	jmp	#LR__1125
0eb4c                 | LR__1121
0eb4c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
0eb4c     08 4E 05 F1 | 	add	fp, #8
0eb50     A7 1E 02 FB | 	rdlong	local01, fp
0eb54     08 4E 85 F1 | 	sub	fp, #8
0eb58     2B 1E 0E F2 | 	cmp	local01, #43 wz
0eb5c     14 4E 05 A1 |  if_e	add	fp, #20
0eb60     A7 22 02 AB |  if_e	rdlong	local03, fp
0eb64     14 4E 85 A1 |  if_e	sub	fp, #20
0eb68     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0eb6c     30 00 90 5D |  if_ne	jmp	#LR__1122
0eb70     A7 12 02 FB | 	rdlong	arg01, fp
0eb74     9C EE BF FD | 	call	#_convertstring
0eb78     FD 12 02 F6 | 	mov	arg01, result1
0eb7c     0C 4E 05 F1 | 	add	fp, #12
0eb80     A7 14 02 FB | 	rdlong	arg02, fp
0eb84     0C 4E 85 F1 | 	sub	fp, #12
0eb88     38 C1 B0 FD | 	call	#__system___string_concat
0eb8c     A7 FA 61 FC | 	wrlong	result1, fp
0eb90     08 4E 05 F1 | 	add	fp, #8
0eb94     A7 3E 68 FC | 	wrlong	#31, fp
0eb98     08 4E 85 F1 | 	sub	fp, #8
0eb9c     BC 00 90 FD | 	jmp	#LR__1125
0eba0                 | LR__1122
0eba0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
0eba0     08 4E 05 F1 | 	add	fp, #8
0eba4     A7 1E 02 FB | 	rdlong	local01, fp
0eba8     08 4E 85 F1 | 	sub	fp, #8
0ebac     1F 1E 0E F2 | 	cmp	local01, #31 wz
0ebb0     14 4E 05 A1 |  if_e	add	fp, #20
0ebb4     A7 22 02 AB |  if_e	rdlong	local03, fp
0ebb8     14 4E 85 A1 |  if_e	sub	fp, #20
0ebbc     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0ebc0     28 00 90 5D |  if_ne	jmp	#LR__1123
0ebc4     A7 1E 02 FB | 	rdlong	local01, fp
0ebc8     0C 4E 05 F1 | 	add	fp, #12
0ebcc     A7 12 02 FB | 	rdlong	arg01, fp
0ebd0     0C 4E 85 F1 | 	sub	fp, #12
0ebd4     3C EE BF FD | 	call	#_convertstring
0ebd8     FD 14 02 F6 | 	mov	arg02, result1
0ebdc     0F 13 02 F6 | 	mov	arg01, local01
0ebe0     E0 C0 B0 FD | 	call	#__system___string_concat
0ebe4     A7 FA 61 FC | 	wrlong	result1, fp
0ebe8     70 00 90 FD | 	jmp	#LR__1125
0ebec                 | LR__1123
0ebec                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
0ebec     08 4E 05 F1 | 	add	fp, #8
0ebf0     A7 1E 02 FB | 	rdlong	local01, fp
0ebf4     08 4E 85 F1 | 	sub	fp, #8
0ebf8     2B 1E 0E F2 | 	cmp	local01, #43 wz
0ebfc     14 4E 05 A1 |  if_e	add	fp, #20
0ec00     A7 22 02 AB |  if_e	rdlong	local03, fp
0ec04     14 4E 85 A1 |  if_e	sub	fp, #20
0ec08     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0ec0c     3C 00 90 5D |  if_ne	jmp	#LR__1124
0ec10     A7 12 02 FB | 	rdlong	arg01, fp
0ec14     FC ED BF FD | 	call	#_convertstring
0ec18     FD 1E 02 F6 | 	mov	local01, result1
0ec1c     0C 4E 05 F1 | 	add	fp, #12
0ec20     A7 12 02 FB | 	rdlong	arg01, fp
0ec24     0C 4E 85 F1 | 	sub	fp, #12
0ec28     E8 ED BF FD | 	call	#_convertstring
0ec2c     FD 14 02 F6 | 	mov	arg02, result1
0ec30     0F 13 02 F6 | 	mov	arg01, local01
0ec34     8C C0 B0 FD | 	call	#__system___string_concat
0ec38     A7 FA 61 FC | 	wrlong	result1, fp
0ec3c     08 4E 05 F1 | 	add	fp, #8
0ec40     A7 3E 68 FC | 	wrlong	#31, fp
0ec44     08 4E 85 F1 | 	sub	fp, #8
0ec48     10 00 90 FD | 	jmp	#LR__1125
0ec4c                 | LR__1124
0ec4c     A7 08 68 FC | 	wrlong	#4, fp
0ec50     08 4E 05 F1 | 	add	fp, #8
0ec54     A7 FE 69 FC | 	wrlong	#255, fp
0ec58     08 4E 85 F1 | 	sub	fp, #8
0ec5c                 | LR__1125
0ec5c     A7 12 02 F6 | 	mov	arg01, fp
0ec60     2C AF BF FD | 	call	#_push
0ec64     A7 F0 03 F6 | 	mov	ptra, fp
0ec68     B2 00 A0 FD | 	call	#popregs_
0ec6c                 | _do_plus_ret
0ec6c     2D 00 64 FD | 	ret
0ec70                 | 
0ec70                 | ' 
0ec70                 | ' sub do_minus
0ec70                 | _do_minus
0ec70     05 4A 05 F6 | 	mov	COUNT_, #5
0ec74     A8 00 A0 FD | 	call	#pushregs_
0ec78     18 F0 07 F1 | 	add	ptra, #24
0ec7c     78 AE BF FD | 	call	#_pop
0ec80     FD 1E 02 F6 | 	mov	local01, result1
0ec84     FE 20 02 F6 | 	mov	local02, result2
0ec88     FF 22 02 F6 | 	mov	local03, result3
0ec8c     0C 4E 05 F1 | 	add	fp, #12
0ec90     A7 1E 62 FC | 	wrlong	local01, fp
0ec94     04 4E 05 F1 | 	add	fp, #4
0ec98     A7 20 62 FC | 	wrlong	local02, fp
0ec9c     04 4E 05 F1 | 	add	fp, #4
0eca0     A7 22 62 FC | 	wrlong	local03, fp
0eca4     14 4E 85 F1 | 	sub	fp, #20
0eca8     4C AE BF FD | 	call	#_pop
0ecac     FF 22 02 F6 | 	mov	local03, result3
0ecb0     A7 FA 61 FC | 	wrlong	result1, fp
0ecb4     04 4E 05 F1 | 	add	fp, #4
0ecb8     A7 FC 61 FC | 	wrlong	result2, fp
0ecbc     04 4E 05 F1 | 	add	fp, #4
0ecc0     A7 22 62 FC | 	wrlong	local03, fp
0ecc4                 | ' 
0ecc4                 | ' t2=pop()
0ecc4                 | ' t1=pop()
0ecc4                 | ' 
0ecc4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
0ecc4     08 4E 85 F1 | 	sub	fp, #8
0ecc8     1D 22 0E F2 | 	cmp	local03, #29 wz
0eccc     14 4E 05 A1 |  if_e	add	fp, #20
0ecd0     A7 24 02 AB |  if_e	rdlong	local04, fp
0ecd4     14 4E 85 A1 |  if_e	sub	fp, #20
0ecd8     12 23 02 A6 |  if_e	mov	local03, local04
0ecdc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0ece0     5C 00 90 5D |  if_ne	jmp	#LR__1131
0ece4                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
0ece4     0C 4E 05 F1 | 	add	fp, #12
0ece8     A7 1E 02 FB | 	rdlong	local01, fp
0ecec     0C 4E 85 F1 | 	sub	fp, #12
0ecf0     A7 22 02 FB | 	rdlong	local03, fp
0ecf4     11 1F 12 F2 | 	cmp	local01, local03 wc
0ecf8     1C 00 90 3D |  if_ae	jmp	#LR__1130
0ecfc     A7 1E 02 FB | 	rdlong	local01, fp
0ed00     0C 4E 05 F1 | 	add	fp, #12
0ed04     A7 20 02 FB | 	rdlong	local02, fp
0ed08     0C 4E 85 F1 | 	sub	fp, #12
0ed0c     10 1F 82 F1 | 	sub	local01, local02
0ed10     A7 1E 62 FC | 	wrlong	local01, fp
0ed14     F4 02 90 FD | 	jmp	#LR__1140
0ed18                 | LR__1130
0ed18     A7 1E 02 FB | 	rdlong	local01, fp
0ed1c     0C 4E 05 F1 | 	add	fp, #12
0ed20     A7 20 02 FB | 	rdlong	local02, fp
0ed24     0C 4E 85 F1 | 	sub	fp, #12
0ed28     10 1F 82 F1 | 	sub	local01, local02
0ed2c     A7 1E 62 FC | 	wrlong	local01, fp
0ed30     08 4E 05 F1 | 	add	fp, #8
0ed34     A7 38 68 FC | 	wrlong	#28, fp
0ed38     08 4E 85 F1 | 	sub	fp, #8
0ed3c     CC 02 90 FD | 	jmp	#LR__1140
0ed40                 | LR__1131
0ed40                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
0ed40     08 4E 05 F1 | 	add	fp, #8
0ed44     A7 1E 02 FB | 	rdlong	local01, fp
0ed48     08 4E 85 F1 | 	sub	fp, #8
0ed4c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0ed50     14 4E 05 A1 |  if_e	add	fp, #20
0ed54     A7 24 02 AB |  if_e	rdlong	local04, fp
0ed58     14 4E 85 A1 |  if_e	sub	fp, #20
0ed5c     12 23 02 A6 |  if_e	mov	local03, local04
0ed60     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ed64     28 00 90 5D |  if_ne	jmp	#LR__1132
0ed68     A7 1E 02 FB | 	rdlong	local01, fp
0ed6c     0C 4E 05 F1 | 	add	fp, #12
0ed70     A7 20 02 FB | 	rdlong	local02, fp
0ed74     0C 4E 85 F1 | 	sub	fp, #12
0ed78     10 1F 82 F1 | 	sub	local01, local02
0ed7c     A7 1E 62 FC | 	wrlong	local01, fp
0ed80     08 4E 05 F1 | 	add	fp, #8
0ed84     A7 38 68 FC | 	wrlong	#28, fp
0ed88     08 4E 85 F1 | 	sub	fp, #8
0ed8c     7C 02 90 FD | 	jmp	#LR__1140
0ed90                 | LR__1132
0ed90                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0ed90     08 4E 05 F1 | 	add	fp, #8
0ed94     A7 1E 02 FB | 	rdlong	local01, fp
0ed98     08 4E 85 F1 | 	sub	fp, #8
0ed9c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0eda0     14 4E 05 A1 |  if_e	add	fp, #20
0eda4     A7 24 02 AB |  if_e	rdlong	local04, fp
0eda8     14 4E 85 A1 |  if_e	sub	fp, #20
0edac     12 23 02 A6 |  if_e	mov	local03, local04
0edb0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0edb4     34 00 90 5D |  if_ne	jmp	#LR__1133
0edb8     A7 12 02 FB | 	rdlong	arg01, fp
0edbc     C8 E5 B0 FD | 	call	#__system___float_fromuns
0edc0     FD 12 02 F6 | 	mov	arg01, result1
0edc4     0C 4E 05 F1 | 	add	fp, #12
0edc8     A7 14 02 FB | 	rdlong	arg02, fp
0edcc     0C 4E 85 F1 | 	sub	fp, #12
0edd0     1F 14 E6 F4 | 	bitnot	arg02, #31
0edd4     E4 E5 B0 FD | 	call	#__system___float_add
0edd8     A7 FA 61 FC | 	wrlong	result1, fp
0eddc     08 4E 05 F1 | 	add	fp, #8
0ede0     A7 3C 68 FC | 	wrlong	#30, fp
0ede4     08 4E 85 F1 | 	sub	fp, #8
0ede8     20 02 90 FD | 	jmp	#LR__1140
0edec                 | LR__1133
0edec                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
0edec     08 4E 05 F1 | 	add	fp, #8
0edf0     A7 1E 02 FB | 	rdlong	local01, fp
0edf4     08 4E 85 F1 | 	sub	fp, #8
0edf8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0edfc     14 4E 05 A1 |  if_e	add	fp, #20
0ee00     A7 24 02 AB |  if_e	rdlong	local04, fp
0ee04     14 4E 85 A1 |  if_e	sub	fp, #20
0ee08     12 23 02 A6 |  if_e	mov	local03, local04
0ee0c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0ee10     1C 00 90 5D |  if_ne	jmp	#LR__1134
0ee14     A7 1E 02 FB | 	rdlong	local01, fp
0ee18     0C 4E 05 F1 | 	add	fp, #12
0ee1c     A7 20 02 FB | 	rdlong	local02, fp
0ee20     0C 4E 85 F1 | 	sub	fp, #12
0ee24     10 1F 82 F1 | 	sub	local01, local02
0ee28     A7 1E 62 FC | 	wrlong	local01, fp
0ee2c     DC 01 90 FD | 	jmp	#LR__1140
0ee30                 | LR__1134
0ee30                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
0ee30     08 4E 05 F1 | 	add	fp, #8
0ee34     A7 1E 02 FB | 	rdlong	local01, fp
0ee38     08 4E 85 F1 | 	sub	fp, #8
0ee3c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ee40     14 4E 05 A1 |  if_e	add	fp, #20
0ee44     A7 24 02 AB |  if_e	rdlong	local04, fp
0ee48     14 4E 85 A1 |  if_e	sub	fp, #20
0ee4c     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0ee50     1C 00 90 5D |  if_ne	jmp	#LR__1135
0ee54     A7 1E 02 FB | 	rdlong	local01, fp
0ee58     0C 4E 05 F1 | 	add	fp, #12
0ee5c     A7 20 02 FB | 	rdlong	local02, fp
0ee60     0C 4E 85 F1 | 	sub	fp, #12
0ee64     10 1F 82 F1 | 	sub	local01, local02
0ee68     A7 1E 62 FC | 	wrlong	local01, fp
0ee6c     9C 01 90 FD | 	jmp	#LR__1140
0ee70                 | LR__1135
0ee70                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0ee70     08 4E 05 F1 | 	add	fp, #8
0ee74     A7 1E 02 FB | 	rdlong	local01, fp
0ee78     08 4E 85 F1 | 	sub	fp, #8
0ee7c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ee80     14 4E 05 A1 |  if_e	add	fp, #20
0ee84     A7 22 02 AB |  if_e	rdlong	local03, fp
0ee88     14 4E 85 A1 |  if_e	sub	fp, #20
0ee8c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ee90     44 00 90 5D |  if_ne	jmp	#LR__1136
0ee94     A7 12 02 FB | 	rdlong	arg01, fp
0ee98     09 13 52 F6 | 	abs	arg01, arg01 wc
0ee9c     1F 26 C6 C9 |  if_b	decod	local05, #31
0eea0     00 26 06 36 |  if_ae	mov	local05, #0
0eea4     E0 E4 B0 FD | 	call	#__system___float_fromuns
0eea8     13 FB 61 F5 | 	xor	result1, local05
0eeac     FD 12 02 F6 | 	mov	arg01, result1
0eeb0     0C 4E 05 F1 | 	add	fp, #12
0eeb4     A7 14 02 FB | 	rdlong	arg02, fp
0eeb8     0C 4E 85 F1 | 	sub	fp, #12
0eebc     1F 14 E6 F4 | 	bitnot	arg02, #31
0eec0     F8 E4 B0 FD | 	call	#__system___float_add
0eec4     A7 FA 61 FC | 	wrlong	result1, fp
0eec8     08 4E 05 F1 | 	add	fp, #8
0eecc     A7 3C 68 FC | 	wrlong	#30, fp
0eed0     08 4E 85 F1 | 	sub	fp, #8
0eed4     34 01 90 FD | 	jmp	#LR__1140
0eed8                 | LR__1136
0eed8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
0eed8     08 4E 05 F1 | 	add	fp, #8
0eedc     A7 1E 02 FB | 	rdlong	local01, fp
0eee0     08 4E 85 F1 | 	sub	fp, #8
0eee4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0eee8     14 4E 05 A1 |  if_e	add	fp, #20
0eeec     A7 22 02 AB |  if_e	rdlong	local03, fp
0eef0     14 4E 85 A1 |  if_e	sub	fp, #20
0eef4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0eef8     2C 00 90 5D |  if_ne	jmp	#LR__1137
0eefc     A7 1E 02 FB | 	rdlong	local01, fp
0ef00     0C 4E 05 F1 | 	add	fp, #12
0ef04     A7 12 02 FB | 	rdlong	arg01, fp
0ef08     0C 4E 85 F1 | 	sub	fp, #12
0ef0c     78 E4 B0 FD | 	call	#__system___float_fromuns
0ef10     FD 14 02 F6 | 	mov	arg02, result1
0ef14     0F 13 02 F6 | 	mov	arg01, local01
0ef18     1F 14 E6 F4 | 	bitnot	arg02, #31
0ef1c     9C E4 B0 FD | 	call	#__system___float_add
0ef20     A7 FA 61 FC | 	wrlong	result1, fp
0ef24     E4 00 90 FD | 	jmp	#LR__1140
0ef28                 | LR__1137
0ef28                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
0ef28     08 4E 05 F1 | 	add	fp, #8
0ef2c     A7 1E 02 FB | 	rdlong	local01, fp
0ef30     08 4E 85 F1 | 	sub	fp, #8
0ef34     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ef38     14 4E 05 A1 |  if_e	add	fp, #20
0ef3c     A7 22 02 AB |  if_e	rdlong	local03, fp
0ef40     14 4E 85 A1 |  if_e	sub	fp, #20
0ef44     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ef48     3C 00 90 5D |  if_ne	jmp	#LR__1138
0ef4c     A7 1E 02 FB | 	rdlong	local01, fp
0ef50     0C 4E 05 F1 | 	add	fp, #12
0ef54     A7 12 02 FB | 	rdlong	arg01, fp
0ef58     0C 4E 85 F1 | 	sub	fp, #12
0ef5c     09 13 52 F6 | 	abs	arg01, arg01 wc
0ef60     1F 26 C6 C9 |  if_b	decod	local05, #31
0ef64     00 26 06 36 |  if_ae	mov	local05, #0
0ef68     1C E4 B0 FD | 	call	#__system___float_fromuns
0ef6c     13 FB 61 F5 | 	xor	result1, local05
0ef70     FD 14 02 F6 | 	mov	arg02, result1
0ef74     0F 13 02 F6 | 	mov	arg01, local01
0ef78     1F 14 E6 F4 | 	bitnot	arg02, #31
0ef7c     3C E4 B0 FD | 	call	#__system___float_add
0ef80     A7 FA 61 FC | 	wrlong	result1, fp
0ef84     84 00 90 FD | 	jmp	#LR__1140
0ef88                 | LR__1138
0ef88                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
0ef88     08 4E 05 F1 | 	add	fp, #8
0ef8c     A7 1E 02 FB | 	rdlong	local01, fp
0ef90     08 4E 85 F1 | 	sub	fp, #8
0ef94     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ef98     14 4E 05 A1 |  if_e	add	fp, #20
0ef9c     A7 22 02 AB |  if_e	rdlong	local03, fp
0efa0     14 4E 85 A1 |  if_e	sub	fp, #20
0efa4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0efa8     20 00 90 5D |  if_ne	jmp	#LR__1139
0efac     A7 12 02 FB | 	rdlong	arg01, fp
0efb0     0C 4E 05 F1 | 	add	fp, #12
0efb4     A7 14 02 FB | 	rdlong	arg02, fp
0efb8     0C 4E 85 F1 | 	sub	fp, #12
0efbc     1F 14 E6 F4 | 	bitnot	arg02, #31
0efc0     F8 E3 B0 FD | 	call	#__system___float_add
0efc4     A7 FA 61 FC | 	wrlong	result1, fp
0efc8     40 00 90 FD | 	jmp	#LR__1140
0efcc                 | LR__1139
0efcc                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
0efcc     08 4E 05 F1 | 	add	fp, #8
0efd0     A7 1E 02 FB | 	rdlong	local01, fp
0efd4     08 4E 85 F1 | 	sub	fp, #8
0efd8     1F 1E 0E F2 | 	cmp	local01, #31 wz
0efdc     14 4E 05 51 |  if_ne	add	fp, #20
0efe0     A7 22 02 5B |  if_ne	rdlong	local03, fp
0efe4     14 4E 85 51 |  if_ne	sub	fp, #20
0efe8     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0efec     A7 06 68 AC |  if_e	wrlong	#3, fp
0eff0     08 4E 05 A1 |  if_e	add	fp, #8
0eff4     A7 FE 69 AC |  if_e	wrlong	#255, fp
0eff8     08 4E 85 A1 |  if_e	sub	fp, #8
0effc     A7 0A 68 5C |  if_ne	wrlong	#5, fp
0f000     08 4E 05 51 |  if_ne	add	fp, #8
0f004     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0f008     08 4E 85 51 |  if_ne	sub	fp, #8
0f00c                 | LR__1140
0f00c     A7 12 02 F6 | 	mov	arg01, fp
0f010     7C AB BF FD | 	call	#_push
0f014     A7 F0 03 F6 | 	mov	ptra, fp
0f018     B2 00 A0 FD | 	call	#popregs_
0f01c                 | _do_minus_ret
0f01c     2D 00 64 FD | 	ret
0f020                 | 
0f020                 | ' 
0f020                 | ' sub do_and 
0f020                 | _do_and
0f020     03 4A 05 F6 | 	mov	COUNT_, #3
0f024     A8 00 A0 FD | 	call	#pushregs_
0f028     18 F0 07 F1 | 	add	ptra, #24
0f02c     C8 AA BF FD | 	call	#_pop
0f030     FD 12 02 F6 | 	mov	arg01, result1
0f034     FE 1E 02 F6 | 	mov	local01, result2
0f038     FF 20 02 F6 | 	mov	local02, result3
0f03c     0C 4E 05 F1 | 	add	fp, #12
0f040     A7 12 62 FC | 	wrlong	arg01, fp
0f044     04 4E 05 F1 | 	add	fp, #4
0f048     A7 1E 62 FC | 	wrlong	local01, fp
0f04c     04 4E 05 F1 | 	add	fp, #4
0f050     A7 20 62 FC | 	wrlong	local02, fp
0f054     14 4E 85 F1 | 	sub	fp, #20
0f058     9C AA BF FD | 	call	#_pop
0f05c     FF 22 02 F6 | 	mov	local03, result3
0f060     A7 FA 61 FC | 	wrlong	result1, fp
0f064     04 4E 05 F1 | 	add	fp, #4
0f068     A7 FC 61 FC | 	wrlong	result2, fp
0f06c     04 4E 05 F1 | 	add	fp, #4
0f070     A7 22 62 FC | 	wrlong	local03, fp
0f074                 | ' 
0f074                 | ' t2=pop()
0f074                 | ' t1=pop()
0f074                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0f074     08 4E 85 F1 | 	sub	fp, #8
0f078     1C 22 0E F2 | 	cmp	local03, #28 wz
0f07c     A7 22 02 AB |  if_e	rdlong	local03, fp
0f080     A7 22 62 AC |  if_e	wrlong	local03, fp
0f084     08 4E 05 A1 |  if_e	add	fp, #8
0f088     A7 3A 68 AC |  if_e	wrlong	#29, fp
0f08c     08 4E 85 A1 |  if_e	sub	fp, #8
0f090                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0f090     14 4E 05 F1 | 	add	fp, #20
0f094     A7 22 02 FB | 	rdlong	local03, fp
0f098     14 4E 85 F1 | 	sub	fp, #20
0f09c     1C 22 0E F2 | 	cmp	local03, #28 wz
0f0a0     18 00 90 5D |  if_ne	jmp	#LR__1150
0f0a4     0C 4E 05 F1 | 	add	fp, #12
0f0a8     A7 22 02 FB | 	rdlong	local03, fp
0f0ac     A7 22 62 FC | 	wrlong	local03, fp
0f0b0     08 4E 05 F1 | 	add	fp, #8
0f0b4     A7 3A 68 FC | 	wrlong	#29, fp
0f0b8     14 4E 85 F1 | 	sub	fp, #20
0f0bc                 | LR__1150
0f0bc                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
0f0bc     08 4E 05 F1 | 	add	fp, #8
0f0c0     A7 22 02 FB | 	rdlong	local03, fp
0f0c4     08 4E 85 F1 | 	sub	fp, #8
0f0c8     1F 22 0E F2 | 	cmp	local03, #31 wz
0f0cc     14 4E 05 51 |  if_ne	add	fp, #20
0f0d0     A7 20 02 5B |  if_ne	rdlong	local02, fp
0f0d4     14 4E 85 51 |  if_ne	sub	fp, #20
0f0d8     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0f0dc     08 4E 05 51 |  if_ne	add	fp, #8
0f0e0     A7 22 02 5B |  if_ne	rdlong	local03, fp
0f0e4     08 4E 85 51 |  if_ne	sub	fp, #8
0f0e8     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0f0ec     14 4E 05 51 |  if_ne	add	fp, #20
0f0f0     14 4E 85 51 |  if_ne	sub	fp, #20
0f0f4     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0f0f8     A7 0C 68 AC |  if_e	wrlong	#6, fp
0f0fc     08 4E 05 A1 |  if_e	add	fp, #8
0f100     A7 FE 69 AC |  if_e	wrlong	#255, fp
0f104     08 4E 85 A1 |  if_e	sub	fp, #8
0f108     18 00 90 AD |  if_e	jmp	#LR__1151
0f10c     A7 22 02 FB | 	rdlong	local03, fp
0f110     0C 4E 05 F1 | 	add	fp, #12
0f114     A7 1E 02 FB | 	rdlong	local01, fp
0f118     0C 4E 85 F1 | 	sub	fp, #12
0f11c     0F 23 02 F5 | 	and	local03, local01
0f120     A7 22 62 FC | 	wrlong	local03, fp
0f124                 | LR__1151
0f124     A7 12 02 F6 | 	mov	arg01, fp
0f128     64 AA BF FD | 	call	#_push
0f12c     A7 F0 03 F6 | 	mov	ptra, fp
0f130     B2 00 A0 FD | 	call	#popregs_
0f134                 | _do_and_ret
0f134     2D 00 64 FD | 	ret
0f138                 | 
0f138                 | ' 
0f138                 | ' sub do_or 
0f138                 | _do_or
0f138     03 4A 05 F6 | 	mov	COUNT_, #3
0f13c     A8 00 A0 FD | 	call	#pushregs_
0f140     18 F0 07 F1 | 	add	ptra, #24
0f144     B0 A9 BF FD | 	call	#_pop
0f148     FD 12 02 F6 | 	mov	arg01, result1
0f14c     FE 1E 02 F6 | 	mov	local01, result2
0f150     FF 20 02 F6 | 	mov	local02, result3
0f154     0C 4E 05 F1 | 	add	fp, #12
0f158     A7 12 62 FC | 	wrlong	arg01, fp
0f15c     04 4E 05 F1 | 	add	fp, #4
0f160     A7 1E 62 FC | 	wrlong	local01, fp
0f164     04 4E 05 F1 | 	add	fp, #4
0f168     A7 20 62 FC | 	wrlong	local02, fp
0f16c     14 4E 85 F1 | 	sub	fp, #20
0f170     84 A9 BF FD | 	call	#_pop
0f174     FF 22 02 F6 | 	mov	local03, result3
0f178     A7 FA 61 FC | 	wrlong	result1, fp
0f17c     04 4E 05 F1 | 	add	fp, #4
0f180     A7 FC 61 FC | 	wrlong	result2, fp
0f184     04 4E 05 F1 | 	add	fp, #4
0f188     A7 22 62 FC | 	wrlong	local03, fp
0f18c                 | ' 
0f18c                 | ' t2=pop()
0f18c                 | ' t1=pop()
0f18c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0f18c     08 4E 85 F1 | 	sub	fp, #8
0f190     1C 22 0E F2 | 	cmp	local03, #28 wz
0f194     A7 22 02 AB |  if_e	rdlong	local03, fp
0f198     A7 22 62 AC |  if_e	wrlong	local03, fp
0f19c     08 4E 05 A1 |  if_e	add	fp, #8
0f1a0     A7 3A 68 AC |  if_e	wrlong	#29, fp
0f1a4     08 4E 85 A1 |  if_e	sub	fp, #8
0f1a8                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0f1a8     14 4E 05 F1 | 	add	fp, #20
0f1ac     A7 22 02 FB | 	rdlong	local03, fp
0f1b0     14 4E 85 F1 | 	sub	fp, #20
0f1b4     1C 22 0E F2 | 	cmp	local03, #28 wz
0f1b8     18 00 90 5D |  if_ne	jmp	#LR__1160
0f1bc     0C 4E 05 F1 | 	add	fp, #12
0f1c0     A7 22 02 FB | 	rdlong	local03, fp
0f1c4     A7 22 62 FC | 	wrlong	local03, fp
0f1c8     08 4E 05 F1 | 	add	fp, #8
0f1cc     A7 3A 68 FC | 	wrlong	#29, fp
0f1d0     14 4E 85 F1 | 	sub	fp, #20
0f1d4                 | LR__1160
0f1d4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
0f1d4     08 4E 05 F1 | 	add	fp, #8
0f1d8     A7 22 02 FB | 	rdlong	local03, fp
0f1dc     08 4E 85 F1 | 	sub	fp, #8
0f1e0     1F 22 0E F2 | 	cmp	local03, #31 wz
0f1e4     14 4E 05 51 |  if_ne	add	fp, #20
0f1e8     A7 20 02 5B |  if_ne	rdlong	local02, fp
0f1ec     14 4E 85 51 |  if_ne	sub	fp, #20
0f1f0     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0f1f4     08 4E 05 51 |  if_ne	add	fp, #8
0f1f8     A7 22 02 5B |  if_ne	rdlong	local03, fp
0f1fc     08 4E 85 51 |  if_ne	sub	fp, #8
0f200     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0f204     14 4E 05 51 |  if_ne	add	fp, #20
0f208     14 4E 85 51 |  if_ne	sub	fp, #20
0f20c     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0f210     A7 0C 68 AC |  if_e	wrlong	#6, fp
0f214     08 4E 05 A1 |  if_e	add	fp, #8
0f218     A7 FE 69 AC |  if_e	wrlong	#255, fp
0f21c     08 4E 85 A1 |  if_e	sub	fp, #8
0f220     18 00 90 AD |  if_e	jmp	#LR__1161
0f224     A7 22 02 FB | 	rdlong	local03, fp
0f228     0C 4E 05 F1 | 	add	fp, #12
0f22c     A7 1E 02 FB | 	rdlong	local01, fp
0f230     0C 4E 85 F1 | 	sub	fp, #12
0f234     0F 23 42 F5 | 	or	local03, local01
0f238     A7 22 62 FC | 	wrlong	local03, fp
0f23c                 | LR__1161
0f23c     A7 12 02 F6 | 	mov	arg01, fp
0f240     4C A9 BF FD | 	call	#_push
0f244     A7 F0 03 F6 | 	mov	ptra, fp
0f248     B2 00 A0 FD | 	call	#popregs_
0f24c                 | _do_or_ret
0f24c     2D 00 64 FD | 	ret
0f250                 | 
0f250                 | ' 
0f250                 | ' sub do_mul
0f250                 | _do_mul
0f250     05 4A 05 F6 | 	mov	COUNT_, #5
0f254     A8 00 A0 FD | 	call	#pushregs_
0f258     18 F0 07 F1 | 	add	ptra, #24
0f25c     98 A8 BF FD | 	call	#_pop
0f260     FD 1E 02 F6 | 	mov	local01, result1
0f264     FE 20 02 F6 | 	mov	local02, result2
0f268     FF 22 02 F6 | 	mov	local03, result3
0f26c     0C 4E 05 F1 | 	add	fp, #12
0f270     A7 1E 62 FC | 	wrlong	local01, fp
0f274     04 4E 05 F1 | 	add	fp, #4
0f278     A7 20 62 FC | 	wrlong	local02, fp
0f27c     04 4E 05 F1 | 	add	fp, #4
0f280     A7 22 62 FC | 	wrlong	local03, fp
0f284     14 4E 85 F1 | 	sub	fp, #20
0f288     6C A8 BF FD | 	call	#_pop
0f28c     FF 22 02 F6 | 	mov	local03, result3
0f290     A7 FA 61 FC | 	wrlong	result1, fp
0f294     04 4E 05 F1 | 	add	fp, #4
0f298     A7 FC 61 FC | 	wrlong	result2, fp
0f29c     04 4E 05 F1 | 	add	fp, #4
0f2a0     A7 22 62 FC | 	wrlong	local03, fp
0f2a4                 | ' 
0f2a4                 | ' t2=pop()
0f2a4                 | ' t1=pop()
0f2a4                 | ' 
0f2a4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
0f2a4     08 4E 85 F1 | 	sub	fp, #8
0f2a8     1D 22 0E F2 | 	cmp	local03, #29 wz
0f2ac     14 4E 05 A1 |  if_e	add	fp, #20
0f2b0     A7 24 02 AB |  if_e	rdlong	local04, fp
0f2b4     14 4E 85 A1 |  if_e	sub	fp, #20
0f2b8     12 23 02 A6 |  if_e	mov	local03, local04
0f2bc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f2c0     20 00 90 5D |  if_ne	jmp	#LR__1170
0f2c4     A7 20 02 FB | 	rdlong	local02, fp
0f2c8     0C 4E 05 F1 | 	add	fp, #12
0f2cc     A7 22 02 FB | 	rdlong	local03, fp
0f2d0     11 21 02 FD | 	qmul	local02, local03
0f2d4     0C 4E 85 F1 | 	sub	fp, #12
0f2d8     18 1E 62 FD | 	getqx	local01
0f2dc     A7 1E 62 FC | 	wrlong	local01, fp
0f2e0     C4 02 90 FD | 	jmp	#LR__1179
0f2e4                 | LR__1170
0f2e4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
0f2e4     08 4E 05 F1 | 	add	fp, #8
0f2e8     A7 1E 02 FB | 	rdlong	local01, fp
0f2ec     08 4E 85 F1 | 	sub	fp, #8
0f2f0     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f2f4     14 4E 05 A1 |  if_e	add	fp, #20
0f2f8     A7 24 02 AB |  if_e	rdlong	local04, fp
0f2fc     14 4E 85 A1 |  if_e	sub	fp, #20
0f300     12 23 02 A6 |  if_e	mov	local03, local04
0f304     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f308     2C 00 90 5D |  if_ne	jmp	#LR__1171
0f30c     A7 20 02 FB | 	rdlong	local02, fp
0f310     0C 4E 05 F1 | 	add	fp, #12
0f314     A7 22 02 FB | 	rdlong	local03, fp
0f318     11 21 02 FD | 	qmul	local02, local03
0f31c     0C 4E 85 F1 | 	sub	fp, #12
0f320     18 1E 62 FD | 	getqx	local01
0f324     A7 1E 62 FC | 	wrlong	local01, fp
0f328     08 4E 05 F1 | 	add	fp, #8
0f32c     A7 38 68 FC | 	wrlong	#28, fp
0f330     08 4E 85 F1 | 	sub	fp, #8
0f334     70 02 90 FD | 	jmp	#LR__1179
0f338                 | LR__1171
0f338                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0f338     08 4E 05 F1 | 	add	fp, #8
0f33c     A7 1E 02 FB | 	rdlong	local01, fp
0f340     08 4E 85 F1 | 	sub	fp, #8
0f344     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f348     14 4E 05 A1 |  if_e	add	fp, #20
0f34c     A7 24 02 AB |  if_e	rdlong	local04, fp
0f350     14 4E 85 A1 |  if_e	sub	fp, #20
0f354     12 23 02 A6 |  if_e	mov	local03, local04
0f358     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f35c     30 00 90 5D |  if_ne	jmp	#LR__1172
0f360     A7 12 02 FB | 	rdlong	arg01, fp
0f364     20 E0 B0 FD | 	call	#__system___float_fromuns
0f368     FD 12 02 F6 | 	mov	arg01, result1
0f36c     0C 4E 05 F1 | 	add	fp, #12
0f370     A7 14 02 FB | 	rdlong	arg02, fp
0f374     0C 4E 85 F1 | 	sub	fp, #12
0f378     10 E4 B0 FD | 	call	#__system___float_mul
0f37c     A7 FA 61 FC | 	wrlong	result1, fp
0f380     08 4E 05 F1 | 	add	fp, #8
0f384     A7 3C 68 FC | 	wrlong	#30, fp
0f388     08 4E 85 F1 | 	sub	fp, #8
0f38c     18 02 90 FD | 	jmp	#LR__1179
0f390                 | LR__1172
0f390                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
0f390     08 4E 05 F1 | 	add	fp, #8
0f394     A7 1E 02 FB | 	rdlong	local01, fp
0f398     08 4E 85 F1 | 	sub	fp, #8
0f39c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f3a0     14 4E 05 A1 |  if_e	add	fp, #20
0f3a4     A7 24 02 AB |  if_e	rdlong	local04, fp
0f3a8     14 4E 85 A1 |  if_e	sub	fp, #20
0f3ac     12 23 02 A6 |  if_e	mov	local03, local04
0f3b0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f3b4     20 00 90 5D |  if_ne	jmp	#LR__1173
0f3b8     A7 20 02 FB | 	rdlong	local02, fp
0f3bc     0C 4E 05 F1 | 	add	fp, #12
0f3c0     A7 22 02 FB | 	rdlong	local03, fp
0f3c4     11 21 02 FD | 	qmul	local02, local03
0f3c8     0C 4E 85 F1 | 	sub	fp, #12
0f3cc     18 1E 62 FD | 	getqx	local01
0f3d0     A7 1E 62 FC | 	wrlong	local01, fp
0f3d4     D0 01 90 FD | 	jmp	#LR__1179
0f3d8                 | LR__1173
0f3d8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
0f3d8     08 4E 05 F1 | 	add	fp, #8
0f3dc     A7 1E 02 FB | 	rdlong	local01, fp
0f3e0     08 4E 85 F1 | 	sub	fp, #8
0f3e4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f3e8     14 4E 05 A1 |  if_e	add	fp, #20
0f3ec     A7 24 02 AB |  if_e	rdlong	local04, fp
0f3f0     14 4E 85 A1 |  if_e	sub	fp, #20
0f3f4     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0f3f8     20 00 90 5D |  if_ne	jmp	#LR__1174
0f3fc     A7 20 02 FB | 	rdlong	local02, fp
0f400     0C 4E 05 F1 | 	add	fp, #12
0f404     A7 22 02 FB | 	rdlong	local03, fp
0f408     11 21 02 FD | 	qmul	local02, local03
0f40c     0C 4E 85 F1 | 	sub	fp, #12
0f410     18 1E 62 FD | 	getqx	local01
0f414     A7 1E 62 FC | 	wrlong	local01, fp
0f418     8C 01 90 FD | 	jmp	#LR__1179
0f41c                 | LR__1174
0f41c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0f41c     08 4E 05 F1 | 	add	fp, #8
0f420     A7 1E 02 FB | 	rdlong	local01, fp
0f424     08 4E 85 F1 | 	sub	fp, #8
0f428     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f42c     14 4E 05 A1 |  if_e	add	fp, #20
0f430     A7 22 02 AB |  if_e	rdlong	local03, fp
0f434     14 4E 85 A1 |  if_e	sub	fp, #20
0f438     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f43c     40 00 90 5D |  if_ne	jmp	#LR__1175
0f440     A7 12 02 FB | 	rdlong	arg01, fp
0f444     09 13 52 F6 | 	abs	arg01, arg01 wc
0f448     1F 26 C6 C9 |  if_b	decod	local05, #31
0f44c     00 26 06 36 |  if_ae	mov	local05, #0
0f450     34 DF B0 FD | 	call	#__system___float_fromuns
0f454     13 FB 61 F5 | 	xor	result1, local05
0f458     FD 12 02 F6 | 	mov	arg01, result1
0f45c     0C 4E 05 F1 | 	add	fp, #12
0f460     A7 14 02 FB | 	rdlong	arg02, fp
0f464     0C 4E 85 F1 | 	sub	fp, #12
0f468     20 E3 B0 FD | 	call	#__system___float_mul
0f46c     A7 FA 61 FC | 	wrlong	result1, fp
0f470     08 4E 05 F1 | 	add	fp, #8
0f474     A7 3C 68 FC | 	wrlong	#30, fp
0f478     08 4E 85 F1 | 	sub	fp, #8
0f47c     28 01 90 FD | 	jmp	#LR__1179
0f480                 | LR__1175
0f480                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
0f480     08 4E 05 F1 | 	add	fp, #8
0f484     A7 1E 02 FB | 	rdlong	local01, fp
0f488     08 4E 85 F1 | 	sub	fp, #8
0f48c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f490     14 4E 05 A1 |  if_e	add	fp, #20
0f494     A7 22 02 AB |  if_e	rdlong	local03, fp
0f498     14 4E 85 A1 |  if_e	sub	fp, #20
0f49c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f4a0     28 00 90 5D |  if_ne	jmp	#LR__1176
0f4a4     A7 1E 02 FB | 	rdlong	local01, fp
0f4a8     0C 4E 05 F1 | 	add	fp, #12
0f4ac     A7 12 02 FB | 	rdlong	arg01, fp
0f4b0     0C 4E 85 F1 | 	sub	fp, #12
0f4b4     D0 DE B0 FD | 	call	#__system___float_fromuns
0f4b8     FD 14 02 F6 | 	mov	arg02, result1
0f4bc     0F 13 02 F6 | 	mov	arg01, local01
0f4c0     C8 E2 B0 FD | 	call	#__system___float_mul
0f4c4     A7 FA 61 FC | 	wrlong	result1, fp
0f4c8     DC 00 90 FD | 	jmp	#LR__1179
0f4cc                 | LR__1176
0f4cc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
0f4cc     08 4E 05 F1 | 	add	fp, #8
0f4d0     A7 1E 02 FB | 	rdlong	local01, fp
0f4d4     08 4E 85 F1 | 	sub	fp, #8
0f4d8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f4dc     14 4E 05 A1 |  if_e	add	fp, #20
0f4e0     A7 22 02 AB |  if_e	rdlong	local03, fp
0f4e4     14 4E 85 A1 |  if_e	sub	fp, #20
0f4e8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f4ec     38 00 90 5D |  if_ne	jmp	#LR__1177
0f4f0     A7 1E 02 FB | 	rdlong	local01, fp
0f4f4     0C 4E 05 F1 | 	add	fp, #12
0f4f8     A7 12 02 FB | 	rdlong	arg01, fp
0f4fc     0C 4E 85 F1 | 	sub	fp, #12
0f500     09 13 52 F6 | 	abs	arg01, arg01 wc
0f504     1F 26 C6 C9 |  if_b	decod	local05, #31
0f508     00 26 06 36 |  if_ae	mov	local05, #0
0f50c     78 DE B0 FD | 	call	#__system___float_fromuns
0f510     13 FB 61 F5 | 	xor	result1, local05
0f514     FD 14 02 F6 | 	mov	arg02, result1
0f518     0F 13 02 F6 | 	mov	arg01, local01
0f51c     6C E2 B0 FD | 	call	#__system___float_mul
0f520     A7 FA 61 FC | 	wrlong	result1, fp
0f524     80 00 90 FD | 	jmp	#LR__1179
0f528                 | LR__1177
0f528                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
0f528     08 4E 05 F1 | 	add	fp, #8
0f52c     A7 1E 02 FB | 	rdlong	local01, fp
0f530     08 4E 85 F1 | 	sub	fp, #8
0f534     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f538     14 4E 05 A1 |  if_e	add	fp, #20
0f53c     A7 22 02 AB |  if_e	rdlong	local03, fp
0f540     14 4E 85 A1 |  if_e	sub	fp, #20
0f544     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f548     1C 00 90 5D |  if_ne	jmp	#LR__1178
0f54c     A7 12 02 FB | 	rdlong	arg01, fp
0f550     0C 4E 05 F1 | 	add	fp, #12
0f554     A7 14 02 FB | 	rdlong	arg02, fp
0f558     0C 4E 85 F1 | 	sub	fp, #12
0f55c     2C E2 B0 FD | 	call	#__system___float_mul
0f560     A7 FA 61 FC | 	wrlong	result1, fp
0f564     40 00 90 FD | 	jmp	#LR__1179
0f568                 | LR__1178
0f568                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
0f568     08 4E 05 F1 | 	add	fp, #8
0f56c     A7 1E 02 FB | 	rdlong	local01, fp
0f570     08 4E 85 F1 | 	sub	fp, #8
0f574     1F 1E 0E F2 | 	cmp	local01, #31 wz
0f578     14 4E 05 51 |  if_ne	add	fp, #20
0f57c     A7 22 02 5B |  if_ne	rdlong	local03, fp
0f580     14 4E 85 51 |  if_ne	sub	fp, #20
0f584     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0f588     A7 10 68 AC |  if_e	wrlong	#8, fp
0f58c     08 4E 05 A1 |  if_e	add	fp, #8
0f590     A7 FE 69 AC |  if_e	wrlong	#255, fp
0f594     08 4E 85 A1 |  if_e	sub	fp, #8
0f598     A7 12 68 5C |  if_ne	wrlong	#9, fp
0f59c     08 4E 05 51 |  if_ne	add	fp, #8
0f5a0     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0f5a4     08 4E 85 51 |  if_ne	sub	fp, #8
0f5a8                 | LR__1179
0f5a8     A7 12 02 F6 | 	mov	arg01, fp
0f5ac     E0 A5 BF FD | 	call	#_push
0f5b0     A7 F0 03 F6 | 	mov	ptra, fp
0f5b4     B2 00 A0 FD | 	call	#popregs_
0f5b8                 | _do_mul_ret
0f5b8     2D 00 64 FD | 	ret
0f5bc                 | 
0f5bc                 | ' 
0f5bc                 | ' sub do_div 
0f5bc                 | _do_div
0f5bc     01 4A 05 F6 | 	mov	COUNT_, #1
0f5c0     A8 00 A0 FD | 	call	#pushregs_
0f5c4     18 F0 07 F1 | 	add	ptra, #24
0f5c8     2C A5 BF FD | 	call	#_pop
0f5cc     FD 64 02 F6 | 	mov	muldivb_, result1
0f5d0     FE 62 02 F6 | 	mov	muldiva_, result2
0f5d4     FF 1E 02 F6 | 	mov	local01, result3
0f5d8     0C 4E 05 F1 | 	add	fp, #12
0f5dc     A7 64 62 FC | 	wrlong	muldivb_, fp
0f5e0     04 4E 05 F1 | 	add	fp, #4
0f5e4     A7 62 62 FC | 	wrlong	muldiva_, fp
0f5e8     04 4E 05 F1 | 	add	fp, #4
0f5ec     A7 1E 62 FC | 	wrlong	local01, fp
0f5f0     14 4E 85 F1 | 	sub	fp, #20
0f5f4     00 A5 BF FD | 	call	#_pop
0f5f8     A7 FA 61 FC | 	wrlong	result1, fp
0f5fc     04 4E 05 F1 | 	add	fp, #4
0f600     A7 FC 61 FC | 	wrlong	result2, fp
0f604     04 4E 05 F1 | 	add	fp, #4
0f608     A7 FE 61 FC | 	wrlong	result3, fp
0f60c                 | ' 
0f60c                 | ' t2=pop()
0f60c                 | ' t1=pop()
0f60c                 | ' 
0f60c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
0f60c     08 4E 85 F1 | 	sub	fp, #8
0f610     1F FE 0D F2 | 	cmp	result3, #31 wz
0f614     14 4E 05 51 |  if_ne	add	fp, #20
0f618     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0f61c     14 4E 85 51 |  if_ne	sub	fp, #20
0f620     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0f624     A7 14 68 AC |  if_e	wrlong	#10, fp
0f628     08 4E 05 A1 |  if_e	add	fp, #8
0f62c     A7 FE 69 AC |  if_e	wrlong	#255, fp
0f630     08 4E 85 A1 |  if_e	sub	fp, #8
0f634     90 01 90 AD |  if_e	jmp	#LR__1186
0f638                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0f638     08 4E 05 F1 | 	add	fp, #8
0f63c     A7 64 02 FB | 	rdlong	muldivb_, fp
0f640     08 4E 85 F1 | 	sub	fp, #8
0f644     1E 64 0E F2 | 	cmp	muldivb_, #30 wz
0f648     1C 00 90 5D |  if_ne	jmp	#LR__1180
0f64c     08 4E 05 F1 | 	add	fp, #8
0f650     A7 38 68 FC | 	wrlong	#28, fp
0f654     08 4E 85 F1 | 	sub	fp, #8
0f658     A7 12 02 FB | 	rdlong	arg01, fp
0f65c     00 14 06 F6 | 	mov	arg02, #0
0f660     F0 E5 B0 FD | 	call	#__system___float_tointeger
0f664     A7 FA 61 FC | 	wrlong	result1, fp
0f668                 | LR__1180
0f668                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0f668     14 4E 05 F1 | 	add	fp, #20
0f66c     A7 64 02 FB | 	rdlong	muldivb_, fp
0f670     14 4E 85 F1 | 	sub	fp, #20
0f674     1E 64 0E F2 | 	cmp	muldivb_, #30 wz
0f678     28 00 90 5D |  if_ne	jmp	#LR__1181
0f67c     14 4E 05 F1 | 	add	fp, #20
0f680     A7 38 68 FC | 	wrlong	#28, fp
0f684     08 4E 85 F1 | 	sub	fp, #8
0f688     A7 12 02 FB | 	rdlong	arg01, fp
0f68c     0C 4E 85 F1 | 	sub	fp, #12
0f690     00 14 06 F6 | 	mov	arg02, #0
0f694     BC E5 B0 FD | 	call	#__system___float_tointeger
0f698     0C 4E 05 F1 | 	add	fp, #12
0f69c     A7 FA 61 FC | 	wrlong	result1, fp
0f6a0     0C 4E 85 F1 | 	sub	fp, #12
0f6a4                 | LR__1181
0f6a4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
0f6a4     08 4E 05 F1 | 	add	fp, #8
0f6a8     A7 64 02 FB | 	rdlong	muldivb_, fp
0f6ac     08 4E 85 F1 | 	sub	fp, #8
0f6b0     1D 64 0E F2 | 	cmp	muldivb_, #29 wz
0f6b4     14 4E 05 A1 |  if_e	add	fp, #20
0f6b8     A7 1E 02 AB |  if_e	rdlong	local01, fp
0f6bc     14 4E 85 A1 |  if_e	sub	fp, #20
0f6c0     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0f6c4     20 00 90 5D |  if_ne	jmp	#LR__1182
0f6c8     0C 4E 05 F1 | 	add	fp, #12
0f6cc     A7 1E 02 FB | 	rdlong	local01, fp
0f6d0     0C 4E 85 F1 | 	sub	fp, #12
0f6d4     A7 64 02 FB | 	rdlong	muldivb_, fp
0f6d8     0F 65 12 FD | 	qdiv	muldivb_, local01
0f6dc     18 1E 62 FD | 	getqx	local01
0f6e0     A7 1E 62 FC | 	wrlong	local01, fp
0f6e4     E0 00 90 FD | 	jmp	#LR__1186
0f6e8                 | LR__1182
0f6e8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
0f6e8     08 4E 05 F1 | 	add	fp, #8
0f6ec     A7 64 02 FB | 	rdlong	muldivb_, fp
0f6f0     08 4E 85 F1 | 	sub	fp, #8
0f6f4     1D 64 0E F2 | 	cmp	muldivb_, #29 wz
0f6f8     14 4E 05 A1 |  if_e	add	fp, #20
0f6fc     A7 1E 02 AB |  if_e	rdlong	local01, fp
0f700     14 4E 85 A1 |  if_e	sub	fp, #20
0f704     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0f708     2C 00 90 5D |  if_ne	jmp	#LR__1183
0f70c     0C 4E 05 F1 | 	add	fp, #12
0f710     A7 1E 02 FB | 	rdlong	local01, fp
0f714     0C 4E 85 F1 | 	sub	fp, #12
0f718     A7 64 02 FB | 	rdlong	muldivb_, fp
0f71c     0F 65 12 FD | 	qdiv	muldivb_, local01
0f720     18 1E 62 FD | 	getqx	local01
0f724     A7 1E 62 FC | 	wrlong	local01, fp
0f728     08 4E 05 F1 | 	add	fp, #8
0f72c     A7 38 68 FC | 	wrlong	#28, fp
0f730     08 4E 85 F1 | 	sub	fp, #8
0f734     90 00 90 FD | 	jmp	#LR__1186
0f738                 | LR__1183
0f738                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
0f738     08 4E 05 F1 | 	add	fp, #8
0f73c     A7 64 02 FB | 	rdlong	muldivb_, fp
0f740     08 4E 85 F1 | 	sub	fp, #8
0f744     1C 64 0E F2 | 	cmp	muldivb_, #28 wz
0f748     14 4E 05 A1 |  if_e	add	fp, #20
0f74c     A7 1E 02 AB |  if_e	rdlong	local01, fp
0f750     14 4E 85 A1 |  if_e	sub	fp, #20
0f754     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0f758     1C 00 90 5D |  if_ne	jmp	#LR__1184
0f75c     A7 62 02 FB | 	rdlong	muldiva_, fp
0f760     0C 4E 05 F1 | 	add	fp, #12
0f764     A7 64 02 FB | 	rdlong	muldivb_, fp
0f768     0C 4E 85 F1 | 	sub	fp, #12
0f76c     BA 00 A0 FD | 	call	#divide_
0f770     A7 64 62 FC | 	wrlong	muldivb_, fp
0f774     50 00 90 FD | 	jmp	#LR__1186
0f778                 | LR__1184
0f778                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
0f778     08 4E 05 F1 | 	add	fp, #8
0f77c     A7 64 02 FB | 	rdlong	muldivb_, fp
0f780     08 4E 85 F1 | 	sub	fp, #8
0f784     1C 64 0E F2 | 	cmp	muldivb_, #28 wz
0f788     14 4E 05 A1 |  if_e	add	fp, #20
0f78c     A7 1E 02 AB |  if_e	rdlong	local01, fp
0f790     14 4E 85 A1 |  if_e	sub	fp, #20
0f794     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0f798     1C 00 90 5D |  if_ne	jmp	#LR__1185
0f79c     A7 62 02 FB | 	rdlong	muldiva_, fp
0f7a0     0C 4E 05 F1 | 	add	fp, #12
0f7a4     A7 64 02 FB | 	rdlong	muldivb_, fp
0f7a8     0C 4E 85 F1 | 	sub	fp, #12
0f7ac     BA 00 A0 FD | 	call	#divide_
0f7b0     A7 64 62 FC | 	wrlong	muldivb_, fp
0f7b4     10 00 90 FD | 	jmp	#LR__1186
0f7b8                 | LR__1185
0f7b8     A7 16 68 FC | 	wrlong	#11, fp
0f7bc     08 4E 05 F1 | 	add	fp, #8
0f7c0     A7 FE 69 FC | 	wrlong	#255, fp
0f7c4     08 4E 85 F1 | 	sub	fp, #8
0f7c8                 | LR__1186
0f7c8     A7 12 02 F6 | 	mov	arg01, fp
0f7cc     C0 A3 BF FD | 	call	#_push
0f7d0     A7 F0 03 F6 | 	mov	ptra, fp
0f7d4     B2 00 A0 FD | 	call	#popregs_
0f7d8                 | _do_div_ret
0f7d8     2D 00 64 FD | 	ret
0f7dc                 | 
0f7dc                 | ' 
0f7dc                 | ' sub do_fdiv 
0f7dc                 | _do_fdiv
0f7dc     02 4A 05 F6 | 	mov	COUNT_, #2
0f7e0     A8 00 A0 FD | 	call	#pushregs_
0f7e4     18 F0 07 F1 | 	add	ptra, #24
0f7e8     0C A3 BF FD | 	call	#_pop
0f7ec     FD 14 02 F6 | 	mov	arg02, result1
0f7f0     FE 12 02 F6 | 	mov	arg01, result2
0f7f4     FF 1E 02 F6 | 	mov	local01, result3
0f7f8     0C 4E 05 F1 | 	add	fp, #12
0f7fc     A7 14 62 FC | 	wrlong	arg02, fp
0f800     04 4E 05 F1 | 	add	fp, #4
0f804     A7 12 62 FC | 	wrlong	arg01, fp
0f808     04 4E 05 F1 | 	add	fp, #4
0f80c     A7 1E 62 FC | 	wrlong	local01, fp
0f810     14 4E 85 F1 | 	sub	fp, #20
0f814     E0 A2 BF FD | 	call	#_pop
0f818     A7 FA 61 FC | 	wrlong	result1, fp
0f81c     04 4E 05 F1 | 	add	fp, #4
0f820     A7 FC 61 FC | 	wrlong	result2, fp
0f824     04 4E 05 F1 | 	add	fp, #4
0f828     A7 FE 61 FC | 	wrlong	result3, fp
0f82c                 | ' 
0f82c                 | ' t2=pop()
0f82c                 | ' t1=pop()
0f82c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
0f82c     08 4E 85 F1 | 	sub	fp, #8
0f830     1F FE 0D F2 | 	cmp	result3, #31 wz
0f834     14 4E 05 51 |  if_ne	add	fp, #20
0f838     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0f83c     14 4E 85 51 |  if_ne	sub	fp, #20
0f840     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0f844     A7 14 68 AC |  if_e	wrlong	#10, fp
0f848     08 4E 05 A1 |  if_e	add	fp, #8
0f84c     A7 FE 69 AC |  if_e	wrlong	#255, fp
0f850     08 4E 85 A1 |  if_e	sub	fp, #8
0f854     38 01 90 AD |  if_e	jmp	#LR__1195
0f858                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0f858     08 4E 05 F1 | 	add	fp, #8
0f85c     A7 14 02 FB | 	rdlong	arg02, fp
0f860     08 4E 85 F1 | 	sub	fp, #8
0f864     1C 14 0E F2 | 	cmp	arg02, #28 wz
0f868     28 00 90 5D |  if_ne	jmp	#LR__1190
0f86c     08 4E 05 F1 | 	add	fp, #8
0f870     A7 3C 68 FC | 	wrlong	#30, fp
0f874     08 4E 85 F1 | 	sub	fp, #8
0f878     A7 12 02 FB | 	rdlong	arg01, fp
0f87c     09 13 52 F6 | 	abs	arg01, arg01 wc
0f880     1F 20 C6 C9 |  if_b	decod	local02, #31
0f884     00 20 06 36 |  if_ae	mov	local02, #0
0f888     FC DA B0 FD | 	call	#__system___float_fromuns
0f88c     10 FB 61 F5 | 	xor	result1, local02
0f890     A7 FA 61 FC | 	wrlong	result1, fp
0f894                 | LR__1190
0f894                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
0f894     08 4E 05 F1 | 	add	fp, #8
0f898     A7 14 02 FB | 	rdlong	arg02, fp
0f89c     08 4E 85 F1 | 	sub	fp, #8
0f8a0     1D 14 0E F2 | 	cmp	arg02, #29 wz
0f8a4     18 00 90 5D |  if_ne	jmp	#LR__1191
0f8a8     08 4E 05 F1 | 	add	fp, #8
0f8ac     A7 3C 68 FC | 	wrlong	#30, fp
0f8b0     08 4E 85 F1 | 	sub	fp, #8
0f8b4     A7 12 02 FB | 	rdlong	arg01, fp
0f8b8     CC DA B0 FD | 	call	#__system___float_fromuns
0f8bc     A7 FA 61 FC | 	wrlong	result1, fp
0f8c0                 | LR__1191
0f8c0                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0f8c0     14 4E 05 F1 | 	add	fp, #20
0f8c4     A7 14 02 FB | 	rdlong	arg02, fp
0f8c8     14 4E 85 F1 | 	sub	fp, #20
0f8cc     1C 14 0E F2 | 	cmp	arg02, #28 wz
0f8d0     34 00 90 5D |  if_ne	jmp	#LR__1192
0f8d4     14 4E 05 F1 | 	add	fp, #20
0f8d8     A7 3C 68 FC | 	wrlong	#30, fp
0f8dc     08 4E 85 F1 | 	sub	fp, #8
0f8e0     A7 12 02 FB | 	rdlong	arg01, fp
0f8e4     0C 4E 85 F1 | 	sub	fp, #12
0f8e8     09 13 52 F6 | 	abs	arg01, arg01 wc
0f8ec     1F 20 C6 C9 |  if_b	decod	local02, #31
0f8f0     00 20 06 36 |  if_ae	mov	local02, #0
0f8f4     90 DA B0 FD | 	call	#__system___float_fromuns
0f8f8     10 FB 61 F5 | 	xor	result1, local02
0f8fc     0C 4E 05 F1 | 	add	fp, #12
0f900     A7 FA 61 FC | 	wrlong	result1, fp
0f904     0C 4E 85 F1 | 	sub	fp, #12
0f908                 | LR__1192
0f908                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0f908     14 4E 05 F1 | 	add	fp, #20
0f90c     A7 14 02 FB | 	rdlong	arg02, fp
0f910     14 4E 85 F1 | 	sub	fp, #20
0f914     1D 14 0E F2 | 	cmp	arg02, #29 wz
0f918     24 00 90 5D |  if_ne	jmp	#LR__1193
0f91c     14 4E 05 F1 | 	add	fp, #20
0f920     A7 3C 68 FC | 	wrlong	#30, fp
0f924     08 4E 85 F1 | 	sub	fp, #8
0f928     A7 12 02 FB | 	rdlong	arg01, fp
0f92c     0C 4E 85 F1 | 	sub	fp, #12
0f930     54 DA B0 FD | 	call	#__system___float_fromuns
0f934     0C 4E 05 F1 | 	add	fp, #12
0f938     A7 FA 61 FC | 	wrlong	result1, fp
0f93c     0C 4E 85 F1 | 	sub	fp, #12
0f940                 | LR__1193
0f940                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
0f940     08 4E 05 F1 | 	add	fp, #8
0f944     A7 14 02 FB | 	rdlong	arg02, fp
0f948     08 4E 85 F1 | 	sub	fp, #8
0f94c     1E 14 0E F2 | 	cmp	arg02, #30 wz
0f950     14 4E 05 A1 |  if_e	add	fp, #20
0f954     A7 1E 02 AB |  if_e	rdlong	local01, fp
0f958     14 4E 85 A1 |  if_e	sub	fp, #20
0f95c     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0f960     1C 00 90 5D |  if_ne	jmp	#LR__1194
0f964     A7 12 02 FB | 	rdlong	arg01, fp
0f968     0C 4E 05 F1 | 	add	fp, #12
0f96c     A7 14 02 FB | 	rdlong	arg02, fp
0f970     0C 4E 85 F1 | 	sub	fp, #12
0f974     18 E0 B0 FD | 	call	#__system___float_div
0f978     A7 FA 61 FC | 	wrlong	result1, fp
0f97c     10 00 90 FD | 	jmp	#LR__1195
0f980                 | LR__1194
0f980     A7 16 68 FC | 	wrlong	#11, fp
0f984     08 4E 05 F1 | 	add	fp, #8
0f988     A7 FE 69 FC | 	wrlong	#255, fp
0f98c     08 4E 85 F1 | 	sub	fp, #8
0f990                 | LR__1195
0f990     A7 12 02 F6 | 	mov	arg01, fp
0f994     F8 A1 BF FD | 	call	#_push
0f998     A7 F0 03 F6 | 	mov	ptra, fp
0f99c     B2 00 A0 FD | 	call	#popregs_
0f9a0                 | _do_fdiv_ret
0f9a0     2D 00 64 FD | 	ret
0f9a4                 | 
0f9a4                 | ' 
0f9a4                 | ' 
0f9a4                 | ' sub do_mod 
0f9a4                 | _do_mod
0f9a4     01 4A 05 F6 | 	mov	COUNT_, #1
0f9a8     A8 00 A0 FD | 	call	#pushregs_
0f9ac     18 F0 07 F1 | 	add	ptra, #24
0f9b0     44 A1 BF FD | 	call	#_pop
0f9b4     FD 64 02 F6 | 	mov	muldivb_, result1
0f9b8     FE 62 02 F6 | 	mov	muldiva_, result2
0f9bc     FF 1E 02 F6 | 	mov	local01, result3
0f9c0     0C 4E 05 F1 | 	add	fp, #12
0f9c4     A7 64 62 FC | 	wrlong	muldivb_, fp
0f9c8     04 4E 05 F1 | 	add	fp, #4
0f9cc     A7 62 62 FC | 	wrlong	muldiva_, fp
0f9d0     04 4E 05 F1 | 	add	fp, #4
0f9d4     A7 1E 62 FC | 	wrlong	local01, fp
0f9d8     14 4E 85 F1 | 	sub	fp, #20
0f9dc     18 A1 BF FD | 	call	#_pop
0f9e0     A7 FA 61 FC | 	wrlong	result1, fp
0f9e4     04 4E 05 F1 | 	add	fp, #4
0f9e8     A7 FC 61 FC | 	wrlong	result2, fp
0f9ec     04 4E 05 F1 | 	add	fp, #4
0f9f0     A7 FE 61 FC | 	wrlong	result3, fp
0f9f4                 | ' 
0f9f4                 | ' t2=pop()
0f9f4                 | ' t1=pop()
0f9f4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
0f9f4     08 4E 85 F1 | 	sub	fp, #8
0f9f8     1F FE 0D F2 | 	cmp	result3, #31 wz
0f9fc     14 4E 05 51 |  if_ne	add	fp, #20
0fa00     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0fa04     14 4E 85 51 |  if_ne	sub	fp, #20
0fa08     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0fa0c     A7 14 68 AC |  if_e	wrlong	#10, fp
0fa10     08 4E 05 A1 |  if_e	add	fp, #8
0fa14     A7 FE 69 AC |  if_e	wrlong	#255, fp
0fa18     08 4E 85 A1 |  if_e	sub	fp, #8
0fa1c     90 01 90 AD |  if_e	jmp	#LR__1206
0fa20                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0fa20     08 4E 05 F1 | 	add	fp, #8
0fa24     A7 64 02 FB | 	rdlong	muldivb_, fp
0fa28     08 4E 85 F1 | 	sub	fp, #8
0fa2c     1E 64 0E F2 | 	cmp	muldivb_, #30 wz
0fa30     1C 00 90 5D |  if_ne	jmp	#LR__1200
0fa34     08 4E 05 F1 | 	add	fp, #8
0fa38     A7 38 68 FC | 	wrlong	#28, fp
0fa3c     08 4E 85 F1 | 	sub	fp, #8
0fa40     A7 12 02 FB | 	rdlong	arg01, fp
0fa44     00 14 06 F6 | 	mov	arg02, #0
0fa48     08 E2 B0 FD | 	call	#__system___float_tointeger
0fa4c     A7 FA 61 FC | 	wrlong	result1, fp
0fa50                 | LR__1200
0fa50                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0fa50     14 4E 05 F1 | 	add	fp, #20
0fa54     A7 64 02 FB | 	rdlong	muldivb_, fp
0fa58     14 4E 85 F1 | 	sub	fp, #20
0fa5c     1E 64 0E F2 | 	cmp	muldivb_, #30 wz
0fa60     28 00 90 5D |  if_ne	jmp	#LR__1201
0fa64     14 4E 05 F1 | 	add	fp, #20
0fa68     A7 38 68 FC | 	wrlong	#28, fp
0fa6c     08 4E 85 F1 | 	sub	fp, #8
0fa70     A7 12 02 FB | 	rdlong	arg01, fp
0fa74     0C 4E 85 F1 | 	sub	fp, #12
0fa78     00 14 06 F6 | 	mov	arg02, #0
0fa7c     D4 E1 B0 FD | 	call	#__system___float_tointeger
0fa80     0C 4E 05 F1 | 	add	fp, #12
0fa84     A7 FA 61 FC | 	wrlong	result1, fp
0fa88     0C 4E 85 F1 | 	sub	fp, #12
0fa8c                 | LR__1201
0fa8c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
0fa8c     08 4E 05 F1 | 	add	fp, #8
0fa90     A7 64 02 FB | 	rdlong	muldivb_, fp
0fa94     08 4E 85 F1 | 	sub	fp, #8
0fa98     1D 64 0E F2 | 	cmp	muldivb_, #29 wz
0fa9c     14 4E 05 A1 |  if_e	add	fp, #20
0faa0     A7 1E 02 AB |  if_e	rdlong	local01, fp
0faa4     14 4E 85 A1 |  if_e	sub	fp, #20
0faa8     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0faac     20 00 90 5D |  if_ne	jmp	#LR__1202
0fab0     0C 4E 05 F1 | 	add	fp, #12
0fab4     A7 1E 02 FB | 	rdlong	local01, fp
0fab8     0C 4E 85 F1 | 	sub	fp, #12
0fabc     A7 64 02 FB | 	rdlong	muldivb_, fp
0fac0     0F 65 12 FD | 	qdiv	muldivb_, local01
0fac4     19 1E 62 FD | 	getqy	local01
0fac8     A7 1E 62 FC | 	wrlong	local01, fp
0facc     E0 00 90 FD | 	jmp	#LR__1206
0fad0                 | LR__1202
0fad0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
0fad0     08 4E 05 F1 | 	add	fp, #8
0fad4     A7 64 02 FB | 	rdlong	muldivb_, fp
0fad8     08 4E 85 F1 | 	sub	fp, #8
0fadc     1D 64 0E F2 | 	cmp	muldivb_, #29 wz
0fae0     14 4E 05 A1 |  if_e	add	fp, #20
0fae4     A7 1E 02 AB |  if_e	rdlong	local01, fp
0fae8     14 4E 85 A1 |  if_e	sub	fp, #20
0faec     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0faf0     2C 00 90 5D |  if_ne	jmp	#LR__1203
0faf4     0C 4E 05 F1 | 	add	fp, #12
0faf8     A7 1E 02 FB | 	rdlong	local01, fp
0fafc     0C 4E 85 F1 | 	sub	fp, #12
0fb00     A7 64 02 FB | 	rdlong	muldivb_, fp
0fb04     0F 65 12 FD | 	qdiv	muldivb_, local01
0fb08     19 1E 62 FD | 	getqy	local01
0fb0c     A7 1E 62 FC | 	wrlong	local01, fp
0fb10     08 4E 05 F1 | 	add	fp, #8
0fb14     A7 38 68 FC | 	wrlong	#28, fp
0fb18     08 4E 85 F1 | 	sub	fp, #8
0fb1c     90 00 90 FD | 	jmp	#LR__1206
0fb20                 | LR__1203
0fb20                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
0fb20     08 4E 05 F1 | 	add	fp, #8
0fb24     A7 64 02 FB | 	rdlong	muldivb_, fp
0fb28     08 4E 85 F1 | 	sub	fp, #8
0fb2c     1C 64 0E F2 | 	cmp	muldivb_, #28 wz
0fb30     14 4E 05 A1 |  if_e	add	fp, #20
0fb34     A7 1E 02 AB |  if_e	rdlong	local01, fp
0fb38     14 4E 85 A1 |  if_e	sub	fp, #20
0fb3c     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0fb40     1C 00 90 5D |  if_ne	jmp	#LR__1204
0fb44     A7 62 02 FB | 	rdlong	muldiva_, fp
0fb48     0C 4E 05 F1 | 	add	fp, #12
0fb4c     A7 64 02 FB | 	rdlong	muldivb_, fp
0fb50     0C 4E 85 F1 | 	sub	fp, #12
0fb54     BA 00 A0 FD | 	call	#divide_
0fb58     A7 62 62 FC | 	wrlong	muldiva_, fp
0fb5c     50 00 90 FD | 	jmp	#LR__1206
0fb60                 | LR__1204
0fb60                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
0fb60     08 4E 05 F1 | 	add	fp, #8
0fb64     A7 64 02 FB | 	rdlong	muldivb_, fp
0fb68     08 4E 85 F1 | 	sub	fp, #8
0fb6c     1C 64 0E F2 | 	cmp	muldivb_, #28 wz
0fb70     14 4E 05 A1 |  if_e	add	fp, #20
0fb74     A7 1E 02 AB |  if_e	rdlong	local01, fp
0fb78     14 4E 85 A1 |  if_e	sub	fp, #20
0fb7c     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0fb80     1C 00 90 5D |  if_ne	jmp	#LR__1205
0fb84     A7 62 02 FB | 	rdlong	muldiva_, fp
0fb88     0C 4E 05 F1 | 	add	fp, #12
0fb8c     A7 64 02 FB | 	rdlong	muldivb_, fp
0fb90     0C 4E 85 F1 | 	sub	fp, #12
0fb94     BA 00 A0 FD | 	call	#divide_
0fb98     A7 62 62 FC | 	wrlong	muldiva_, fp
0fb9c     10 00 90 FD | 	jmp	#LR__1206
0fba0                 | LR__1205
0fba0     A7 16 68 FC | 	wrlong	#11, fp
0fba4     08 4E 05 F1 | 	add	fp, #8
0fba8     A7 FE 69 FC | 	wrlong	#255, fp
0fbac     08 4E 85 F1 | 	sub	fp, #8
0fbb0                 | LR__1206
0fbb0     A7 12 02 F6 | 	mov	arg01, fp
0fbb4     D8 9F BF FD | 	call	#_push
0fbb8     A7 F0 03 F6 | 	mov	ptra, fp
0fbbc     B2 00 A0 FD | 	call	#popregs_
0fbc0                 | _do_mod_ret
0fbc0     2D 00 64 FD | 	ret
0fbc4                 | 
0fbc4                 | ' 
0fbc4                 | ' sub do_shl 
0fbc4                 | _do_shl
0fbc4     03 4A 05 F6 | 	mov	COUNT_, #3
0fbc8     A8 00 A0 FD | 	call	#pushregs_
0fbcc     18 F0 07 F1 | 	add	ptra, #24
0fbd0     24 9F BF FD | 	call	#_pop
0fbd4     FD 12 02 F6 | 	mov	arg01, result1
0fbd8     FE 1E 02 F6 | 	mov	local01, result2
0fbdc     FF 20 02 F6 | 	mov	local02, result3
0fbe0     0C 4E 05 F1 | 	add	fp, #12
0fbe4     A7 12 62 FC | 	wrlong	arg01, fp
0fbe8     04 4E 05 F1 | 	add	fp, #4
0fbec     A7 1E 62 FC | 	wrlong	local01, fp
0fbf0     04 4E 05 F1 | 	add	fp, #4
0fbf4     A7 20 62 FC | 	wrlong	local02, fp
0fbf8     14 4E 85 F1 | 	sub	fp, #20
0fbfc     F8 9E BF FD | 	call	#_pop
0fc00     FF 22 02 F6 | 	mov	local03, result3
0fc04     A7 FA 61 FC | 	wrlong	result1, fp
0fc08     04 4E 05 F1 | 	add	fp, #4
0fc0c     A7 FC 61 FC | 	wrlong	result2, fp
0fc10     04 4E 05 F1 | 	add	fp, #4
0fc14     A7 22 62 FC | 	wrlong	local03, fp
0fc18                 | ' 
0fc18                 | ' t2=pop()
0fc18                 | ' t1=pop()
0fc18                 | ' 
0fc18                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0fc18     08 4E 85 F1 | 	sub	fp, #8
0fc1c     1C 22 0E F2 | 	cmp	local03, #28 wz
0fc20     A7 22 02 AB |  if_e	rdlong	local03, fp
0fc24     A7 22 62 AC |  if_e	wrlong	local03, fp
0fc28     08 4E 05 A1 |  if_e	add	fp, #8
0fc2c     A7 3A 68 AC |  if_e	wrlong	#29, fp
0fc30     08 4E 85 A1 |  if_e	sub	fp, #8
0fc34                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0fc34     14 4E 05 F1 | 	add	fp, #20
0fc38     A7 22 02 FB | 	rdlong	local03, fp
0fc3c     14 4E 85 F1 | 	sub	fp, #20
0fc40     1C 22 0E F2 | 	cmp	local03, #28 wz
0fc44     18 00 90 5D |  if_ne	jmp	#LR__1210
0fc48     0C 4E 05 F1 | 	add	fp, #12
0fc4c     A7 22 02 FB | 	rdlong	local03, fp
0fc50     A7 22 62 FC | 	wrlong	local03, fp
0fc54     08 4E 05 F1 | 	add	fp, #8
0fc58     A7 3A 68 FC | 	wrlong	#29, fp
0fc5c     14 4E 85 F1 | 	sub	fp, #20
0fc60                 | LR__1210
0fc60                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
0fc60     08 4E 05 F1 | 	add	fp, #8
0fc64     A7 22 02 FB | 	rdlong	local03, fp
0fc68     08 4E 85 F1 | 	sub	fp, #8
0fc6c     1F 22 0E F2 | 	cmp	local03, #31 wz
0fc70     14 4E 05 51 |  if_ne	add	fp, #20
0fc74     A7 20 02 5B |  if_ne	rdlong	local02, fp
0fc78     14 4E 85 51 |  if_ne	sub	fp, #20
0fc7c     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0fc80     08 4E 05 51 |  if_ne	add	fp, #8
0fc84     A7 22 02 5B |  if_ne	rdlong	local03, fp
0fc88     08 4E 85 51 |  if_ne	sub	fp, #8
0fc8c     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0fc90     14 4E 05 51 |  if_ne	add	fp, #20
0fc94     14 4E 85 51 |  if_ne	sub	fp, #20
0fc98     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0fc9c     A7 0C 68 AC |  if_e	wrlong	#6, fp
0fca0     08 4E 05 A1 |  if_e	add	fp, #8
0fca4     A7 FE 69 AC |  if_e	wrlong	#255, fp
0fca8     08 4E 85 A1 |  if_e	sub	fp, #8
0fcac     18 00 90 AD |  if_e	jmp	#LR__1211
0fcb0     A7 22 02 FB | 	rdlong	local03, fp
0fcb4     0C 4E 05 F1 | 	add	fp, #12
0fcb8     A7 1E 02 FB | 	rdlong	local01, fp
0fcbc     0C 4E 85 F1 | 	sub	fp, #12
0fcc0     0F 23 62 F0 | 	shl	local03, local01
0fcc4     A7 22 62 FC | 	wrlong	local03, fp
0fcc8                 | LR__1211
0fcc8     A7 12 02 F6 | 	mov	arg01, fp
0fccc     C0 9E BF FD | 	call	#_push
0fcd0     A7 F0 03 F6 | 	mov	ptra, fp
0fcd4     B2 00 A0 FD | 	call	#popregs_
0fcd8                 | _do_shl_ret
0fcd8     2D 00 64 FD | 	ret
0fcdc                 | 
0fcdc                 | ' 
0fcdc                 | ' sub do_shr 
0fcdc                 | _do_shr
0fcdc     03 4A 05 F6 | 	mov	COUNT_, #3
0fce0     A8 00 A0 FD | 	call	#pushregs_
0fce4     18 F0 07 F1 | 	add	ptra, #24
0fce8     0C 9E BF FD | 	call	#_pop
0fcec     FD 12 02 F6 | 	mov	arg01, result1
0fcf0     FE 1E 02 F6 | 	mov	local01, result2
0fcf4     FF 20 02 F6 | 	mov	local02, result3
0fcf8     0C 4E 05 F1 | 	add	fp, #12
0fcfc     A7 12 62 FC | 	wrlong	arg01, fp
0fd00     04 4E 05 F1 | 	add	fp, #4
0fd04     A7 1E 62 FC | 	wrlong	local01, fp
0fd08     04 4E 05 F1 | 	add	fp, #4
0fd0c     A7 20 62 FC | 	wrlong	local02, fp
0fd10     14 4E 85 F1 | 	sub	fp, #20
0fd14     E0 9D BF FD | 	call	#_pop
0fd18     FF 22 02 F6 | 	mov	local03, result3
0fd1c     A7 FA 61 FC | 	wrlong	result1, fp
0fd20     04 4E 05 F1 | 	add	fp, #4
0fd24     A7 FC 61 FC | 	wrlong	result2, fp
0fd28     04 4E 05 F1 | 	add	fp, #4
0fd2c     A7 22 62 FC | 	wrlong	local03, fp
0fd30                 | ' t2=pop()
0fd30                 | ' t1=pop()
0fd30                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0fd30     08 4E 85 F1 | 	sub	fp, #8
0fd34     1C 22 0E F2 | 	cmp	local03, #28 wz
0fd38     A7 22 02 AB |  if_e	rdlong	local03, fp
0fd3c     A7 22 62 AC |  if_e	wrlong	local03, fp
0fd40     08 4E 05 A1 |  if_e	add	fp, #8
0fd44     A7 3A 68 AC |  if_e	wrlong	#29, fp
0fd48     08 4E 85 A1 |  if_e	sub	fp, #8
0fd4c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0fd4c     14 4E 05 F1 | 	add	fp, #20
0fd50     A7 22 02 FB | 	rdlong	local03, fp
0fd54     14 4E 85 F1 | 	sub	fp, #20
0fd58     1C 22 0E F2 | 	cmp	local03, #28 wz
0fd5c     18 00 90 5D |  if_ne	jmp	#LR__1220
0fd60     0C 4E 05 F1 | 	add	fp, #12
0fd64     A7 22 02 FB | 	rdlong	local03, fp
0fd68     A7 22 62 FC | 	wrlong	local03, fp
0fd6c     08 4E 05 F1 | 	add	fp, #8
0fd70     A7 3A 68 FC | 	wrlong	#29, fp
0fd74     14 4E 85 F1 | 	sub	fp, #20
0fd78                 | LR__1220
0fd78                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
0fd78     08 4E 05 F1 | 	add	fp, #8
0fd7c     A7 22 02 FB | 	rdlong	local03, fp
0fd80     08 4E 85 F1 | 	sub	fp, #8
0fd84     1F 22 0E F2 | 	cmp	local03, #31 wz
0fd88     14 4E 05 51 |  if_ne	add	fp, #20
0fd8c     A7 20 02 5B |  if_ne	rdlong	local02, fp
0fd90     14 4E 85 51 |  if_ne	sub	fp, #20
0fd94     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0fd98     08 4E 05 51 |  if_ne	add	fp, #8
0fd9c     A7 22 02 5B |  if_ne	rdlong	local03, fp
0fda0     08 4E 85 51 |  if_ne	sub	fp, #8
0fda4     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0fda8     14 4E 05 51 |  if_ne	add	fp, #20
0fdac     14 4E 85 51 |  if_ne	sub	fp, #20
0fdb0     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0fdb4     A7 0C 68 AC |  if_e	wrlong	#6, fp
0fdb8     08 4E 05 A1 |  if_e	add	fp, #8
0fdbc     A7 FE 69 AC |  if_e	wrlong	#255, fp
0fdc0     08 4E 85 A1 |  if_e	sub	fp, #8
0fdc4     18 00 90 AD |  if_e	jmp	#LR__1221
0fdc8     A7 22 02 FB | 	rdlong	local03, fp
0fdcc     0C 4E 05 F1 | 	add	fp, #12
0fdd0     A7 1E 02 FB | 	rdlong	local01, fp
0fdd4     0C 4E 85 F1 | 	sub	fp, #12
0fdd8     0F 23 42 F0 | 	shr	local03, local01
0fddc     A7 22 62 FC | 	wrlong	local03, fp
0fde0                 | LR__1221
0fde0     A7 12 02 F6 | 	mov	arg01, fp
0fde4     A8 9D BF FD | 	call	#_push
0fde8     A7 F0 03 F6 | 	mov	ptra, fp
0fdec     B2 00 A0 FD | 	call	#popregs_
0fdf0                 | _do_shr_ret
0fdf0     2D 00 64 FD | 	ret
0fdf4                 | 
0fdf4                 | ' 
0fdf4                 | ' sub do_power 
0fdf4                 | _do_power
0fdf4     02 4A 05 F6 | 	mov	COUNT_, #2
0fdf8     A8 00 A0 FD | 	call	#pushregs_
0fdfc     18 F0 07 F1 | 	add	ptra, #24
0fe00     F4 9C BF FD | 	call	#_pop
0fe04     FD 14 02 F6 | 	mov	arg02, result1
0fe08     FE 12 02 F6 | 	mov	arg01, result2
0fe0c     FF 1E 02 F6 | 	mov	local01, result3
0fe10     0C 4E 05 F1 | 	add	fp, #12
0fe14     A7 14 62 FC | 	wrlong	arg02, fp
0fe18     04 4E 05 F1 | 	add	fp, #4
0fe1c     A7 12 62 FC | 	wrlong	arg01, fp
0fe20     04 4E 05 F1 | 	add	fp, #4
0fe24     A7 1E 62 FC | 	wrlong	local01, fp
0fe28     14 4E 85 F1 | 	sub	fp, #20
0fe2c     C8 9C BF FD | 	call	#_pop
0fe30     A7 FA 61 FC | 	wrlong	result1, fp
0fe34     04 4E 05 F1 | 	add	fp, #4
0fe38     A7 FC 61 FC | 	wrlong	result2, fp
0fe3c     04 4E 05 F1 | 	add	fp, #4
0fe40     A7 FE 61 FC | 	wrlong	result3, fp
0fe44                 | ' t2=pop()
0fe44                 | ' t1=pop()
0fe44                 | ' 
0fe44                 | ' 
0fe44                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
0fe44     08 4E 85 F1 | 	sub	fp, #8
0fe48     1F FE 0D F2 | 	cmp	result3, #31 wz
0fe4c     14 4E 05 51 |  if_ne	add	fp, #20
0fe50     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0fe54     14 4E 85 51 |  if_ne	sub	fp, #20
0fe58     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0fe5c     A7 18 68 AC |  if_e	wrlong	#12, fp
0fe60     08 4E 05 A1 |  if_e	add	fp, #8
0fe64     A7 FE 69 AC |  if_e	wrlong	#255, fp
0fe68     08 4E 85 A1 |  if_e	sub	fp, #8
0fe6c     38 01 90 AD |  if_e	jmp	#LR__1235
0fe70                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0fe70     08 4E 05 F1 | 	add	fp, #8
0fe74     A7 14 02 FB | 	rdlong	arg02, fp
0fe78     08 4E 85 F1 | 	sub	fp, #8
0fe7c     1C 14 0E F2 | 	cmp	arg02, #28 wz
0fe80     28 00 90 5D |  if_ne	jmp	#LR__1230
0fe84     08 4E 05 F1 | 	add	fp, #8
0fe88     A7 3C 68 FC | 	wrlong	#30, fp
0fe8c     08 4E 85 F1 | 	sub	fp, #8
0fe90     A7 12 02 FB | 	rdlong	arg01, fp
0fe94     09 13 52 F6 | 	abs	arg01, arg01 wc
0fe98     1F 20 C6 C9 |  if_b	decod	local02, #31
0fe9c     00 20 06 36 |  if_ae	mov	local02, #0
0fea0     E4 D4 B0 FD | 	call	#__system___float_fromuns
0fea4     10 FB 61 F5 | 	xor	result1, local02
0fea8     A7 FA 61 FC | 	wrlong	result1, fp
0feac                 | LR__1230
0feac                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
0feac     08 4E 05 F1 | 	add	fp, #8
0feb0     A7 14 02 FB | 	rdlong	arg02, fp
0feb4     08 4E 85 F1 | 	sub	fp, #8
0feb8     1D 14 0E F2 | 	cmp	arg02, #29 wz
0febc     18 00 90 5D |  if_ne	jmp	#LR__1231
0fec0     08 4E 05 F1 | 	add	fp, #8
0fec4     A7 3C 68 FC | 	wrlong	#30, fp
0fec8     08 4E 85 F1 | 	sub	fp, #8
0fecc     A7 12 02 FB | 	rdlong	arg01, fp
0fed0     B4 D4 B0 FD | 	call	#__system___float_fromuns
0fed4     A7 FA 61 FC | 	wrlong	result1, fp
0fed8                 | LR__1231
0fed8                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0fed8     14 4E 05 F1 | 	add	fp, #20
0fedc     A7 14 02 FB | 	rdlong	arg02, fp
0fee0     14 4E 85 F1 | 	sub	fp, #20
0fee4     1C 14 0E F2 | 	cmp	arg02, #28 wz
0fee8     34 00 90 5D |  if_ne	jmp	#LR__1232
0feec     14 4E 05 F1 | 	add	fp, #20
0fef0     A7 3C 68 FC | 	wrlong	#30, fp
0fef4     08 4E 85 F1 | 	sub	fp, #8
0fef8     A7 12 02 FB | 	rdlong	arg01, fp
0fefc     0C 4E 85 F1 | 	sub	fp, #12
0ff00     09 13 52 F6 | 	abs	arg01, arg01 wc
0ff04     1F 20 C6 C9 |  if_b	decod	local02, #31
0ff08     00 20 06 36 |  if_ae	mov	local02, #0
0ff0c     78 D4 B0 FD | 	call	#__system___float_fromuns
0ff10     10 FB 61 F5 | 	xor	result1, local02
0ff14     0C 4E 05 F1 | 	add	fp, #12
0ff18     A7 FA 61 FC | 	wrlong	result1, fp
0ff1c     0C 4E 85 F1 | 	sub	fp, #12
0ff20                 | LR__1232
0ff20                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0ff20     14 4E 05 F1 | 	add	fp, #20
0ff24     A7 14 02 FB | 	rdlong	arg02, fp
0ff28     14 4E 85 F1 | 	sub	fp, #20
0ff2c     1D 14 0E F2 | 	cmp	arg02, #29 wz
0ff30     24 00 90 5D |  if_ne	jmp	#LR__1233
0ff34     14 4E 05 F1 | 	add	fp, #20
0ff38     A7 3C 68 FC | 	wrlong	#30, fp
0ff3c     08 4E 85 F1 | 	sub	fp, #8
0ff40     A7 12 02 FB | 	rdlong	arg01, fp
0ff44     0C 4E 85 F1 | 	sub	fp, #12
0ff48     3C D4 B0 FD | 	call	#__system___float_fromuns
0ff4c     0C 4E 05 F1 | 	add	fp, #12
0ff50     A7 FA 61 FC | 	wrlong	result1, fp
0ff54     0C 4E 85 F1 | 	sub	fp, #12
0ff58                 | LR__1233
0ff58                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
0ff58     08 4E 05 F1 | 	add	fp, #8
0ff5c     A7 14 02 FB | 	rdlong	arg02, fp
0ff60     08 4E 85 F1 | 	sub	fp, #8
0ff64     1E 14 0E F2 | 	cmp	arg02, #30 wz
0ff68     14 4E 05 A1 |  if_e	add	fp, #20
0ff6c     A7 1E 02 AB |  if_e	rdlong	local01, fp
0ff70     14 4E 85 A1 |  if_e	sub	fp, #20
0ff74     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0ff78     1C 00 90 5D |  if_ne	jmp	#LR__1234
0ff7c     A7 12 02 FB | 	rdlong	arg01, fp
0ff80     0C 4E 05 F1 | 	add	fp, #12
0ff84     A7 14 02 FB | 	rdlong	arg02, fp
0ff88     0C 4E 85 F1 | 	sub	fp, #12
0ff8c     E0 E6 B0 FD | 	call	#__system____builtin_powf
0ff90     A7 FA 61 FC | 	wrlong	result1, fp
0ff94     10 00 90 FD | 	jmp	#LR__1235
0ff98                 | LR__1234
0ff98     A7 1A 68 FC | 	wrlong	#13, fp
0ff9c     08 4E 05 F1 | 	add	fp, #8
0ffa0     A7 FE 69 FC | 	wrlong	#255, fp
0ffa4     08 4E 85 F1 | 	sub	fp, #8
0ffa8                 | LR__1235
0ffa8     A7 12 02 F6 | 	mov	arg01, fp
0ffac     E0 9B BF FD | 	call	#_push
0ffb0     A7 F0 03 F6 | 	mov	ptra, fp
0ffb4     B2 00 A0 FD | 	call	#popregs_
0ffb8                 | _do_power_ret
0ffb8     2D 00 64 FD | 	ret
0ffbc                 | 
0ffbc                 | ' 
0ffbc                 | ' 
0ffbc                 | ' sub do_eq
0ffbc                 | _do_eq
0ffbc     05 4A 05 F6 | 	mov	COUNT_, #5
0ffc0     A8 00 A0 FD | 	call	#pushregs_
0ffc4     18 F0 07 F1 | 	add	ptra, #24
0ffc8     2C 9B BF FD | 	call	#_pop
0ffcc     FD 1E 02 F6 | 	mov	local01, result1
0ffd0     FE 20 02 F6 | 	mov	local02, result2
0ffd4     FF 22 02 F6 | 	mov	local03, result3
0ffd8     0C 4E 05 F1 | 	add	fp, #12
0ffdc     A7 1E 62 FC | 	wrlong	local01, fp
0ffe0     04 4E 05 F1 | 	add	fp, #4
0ffe4     A7 20 62 FC | 	wrlong	local02, fp
0ffe8     04 4E 05 F1 | 	add	fp, #4
0ffec     A7 22 62 FC | 	wrlong	local03, fp
0fff0     14 4E 85 F1 | 	sub	fp, #20
0fff4     00 9B BF FD | 	call	#_pop
0fff8     FF 22 02 F6 | 	mov	local03, result3
0fffc     A7 FA 61 FC | 	wrlong	result1, fp
10000     04 4E 05 F1 | 	add	fp, #4
10004     A7 FC 61 FC | 	wrlong	result2, fp
10008     04 4E 05 F1 | 	add	fp, #4
1000c     A7 22 62 FC | 	wrlong	local03, fp
10010                 | ' t2=pop()
10010                 | ' t1=pop()
10010                 | ' 
10010                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
10010     08 4E 85 F1 | 	sub	fp, #8
10014     1F 22 0E F2 | 	cmp	local03, #31 wz
10018     14 4E 05 A1 |  if_e	add	fp, #20
1001c     A7 24 02 AB |  if_e	rdlong	local04, fp
10020     14 4E 85 A1 |  if_e	sub	fp, #20
10024     12 23 02 A6 |  if_e	mov	local03, local04
10028     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1002c     28 00 90 5D |  if_ne	jmp	#LR__1240
10030     00 1E 06 F6 | 	mov	local01, #0
10034     A7 12 02 FB | 	rdlong	arg01, fp
10038     0C 4E 05 F1 | 	add	fp, #12
1003c     A7 14 02 FB | 	rdlong	arg02, fp
10040     0C 4E 85 F1 | 	sub	fp, #12
10044     48 AC B0 FD | 	call	#__system___string_cmp
10048     00 FA 0D F2 | 	cmp	result1, #0 wz
1004c     00 1E 26 A6 |  if_e	not	local01, #0
10050     A7 1E 62 FC | 	wrlong	local01, fp
10054     1C 04 90 FD | 	jmp	#LR__1253
10058                 | LR__1240
10058                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
10058     08 4E 05 F1 | 	add	fp, #8
1005c     A7 1E 02 FB | 	rdlong	local01, fp
10060     08 4E 85 F1 | 	sub	fp, #8
10064     1E 1E 0E F2 | 	cmp	local01, #30 wz
10068     14 4E 05 A1 |  if_e	add	fp, #20
1006c     A7 24 02 AB |  if_e	rdlong	local04, fp
10070     14 4E 85 A1 |  if_e	sub	fp, #20
10074     12 23 02 A6 |  if_e	mov	local03, local04
10078     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1007c     2C 00 90 5D |  if_ne	jmp	#LR__1241
10080     00 1E 06 F6 | 	mov	local01, #0
10084     A7 12 02 FB | 	rdlong	arg01, fp
10088     0C 4E 05 F1 | 	add	fp, #12
1008c     A7 14 02 FB | 	rdlong	arg02, fp
10090     0C 4E 85 F1 | 	sub	fp, #12
10094     01 16 06 F6 | 	mov	arg03, #1
10098     24 DB B0 FD | 	call	#__system___float_cmp
1009c     00 FA 0D F2 | 	cmp	result1, #0 wz
100a0     00 1E 26 A6 |  if_e	not	local01, #0
100a4     A7 1E 62 FC | 	wrlong	local01, fp
100a8     C8 03 90 FD | 	jmp	#LR__1253
100ac                 | LR__1241
100ac                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
100ac     08 4E 05 F1 | 	add	fp, #8
100b0     A7 1E 02 FB | 	rdlong	local01, fp
100b4     08 4E 85 F1 | 	sub	fp, #8
100b8     1E 1E 0E F2 | 	cmp	local01, #30 wz
100bc     14 4E 05 A1 |  if_e	add	fp, #20
100c0     A7 24 02 AB |  if_e	rdlong	local04, fp
100c4     14 4E 85 A1 |  if_e	sub	fp, #20
100c8     12 23 02 A6 |  if_e	mov	local03, local04
100cc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
100d0     48 00 90 5D |  if_ne	jmp	#LR__1242
100d4     00 1E 06 F6 | 	mov	local01, #0
100d8     A7 20 02 FB | 	rdlong	local02, fp
100dc     0C 4E 05 F1 | 	add	fp, #12
100e0     A7 12 02 FB | 	rdlong	arg01, fp
100e4     0C 4E 85 F1 | 	sub	fp, #12
100e8     09 13 52 F6 | 	abs	arg01, arg01 wc
100ec     1F 26 C6 C9 |  if_b	decod	local05, #31
100f0     00 26 06 36 |  if_ae	mov	local05, #0
100f4     90 D2 B0 FD | 	call	#__system___float_fromuns
100f8     13 FB 61 F5 | 	xor	result1, local05
100fc     FD 14 02 F6 | 	mov	arg02, result1
10100     10 13 02 F6 | 	mov	arg01, local02
10104     01 16 06 F6 | 	mov	arg03, #1
10108     B4 DA B0 FD | 	call	#__system___float_cmp
1010c     00 FA 0D F2 | 	cmp	result1, #0 wz
10110     00 1E 26 A6 |  if_e	not	local01, #0
10114     A7 1E 62 FC | 	wrlong	local01, fp
10118     58 03 90 FD | 	jmp	#LR__1253
1011c                 | LR__1242
1011c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
1011c     08 4E 05 F1 | 	add	fp, #8
10120     A7 1E 02 FB | 	rdlong	local01, fp
10124     08 4E 85 F1 | 	sub	fp, #8
10128     1E 1E 0E F2 | 	cmp	local01, #30 wz
1012c     14 4E 05 A1 |  if_e	add	fp, #20
10130     A7 24 02 AB |  if_e	rdlong	local04, fp
10134     14 4E 85 A1 |  if_e	sub	fp, #20
10138     12 23 02 A6 |  if_e	mov	local03, local04
1013c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10140     38 00 90 5D |  if_ne	jmp	#LR__1243
10144     00 1E 06 F6 | 	mov	local01, #0
10148     A7 20 02 FB | 	rdlong	local02, fp
1014c     0C 4E 05 F1 | 	add	fp, #12
10150     A7 12 02 FB | 	rdlong	arg01, fp
10154     0C 4E 85 F1 | 	sub	fp, #12
10158     2C D2 B0 FD | 	call	#__system___float_fromuns
1015c     FD 14 02 F6 | 	mov	arg02, result1
10160     10 13 02 F6 | 	mov	arg01, local02
10164     01 16 06 F6 | 	mov	arg03, #1
10168     54 DA B0 FD | 	call	#__system___float_cmp
1016c     00 FA 0D F2 | 	cmp	result1, #0 wz
10170     00 1E 26 A6 |  if_e	not	local01, #0
10174     A7 1E 62 FC | 	wrlong	local01, fp
10178     F8 02 90 FD | 	jmp	#LR__1253
1017c                 | LR__1243
1017c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
1017c     08 4E 05 F1 | 	add	fp, #8
10180     A7 1E 02 FB | 	rdlong	local01, fp
10184     08 4E 85 F1 | 	sub	fp, #8
10188     1C 1E 0E F2 | 	cmp	local01, #28 wz
1018c     14 4E 05 A1 |  if_e	add	fp, #20
10190     A7 24 02 AB |  if_e	rdlong	local04, fp
10194     14 4E 85 A1 |  if_e	sub	fp, #20
10198     12 23 02 A6 |  if_e	mov	local03, local04
1019c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
101a0     44 00 90 5D |  if_ne	jmp	#LR__1244
101a4     00 1E 06 F6 | 	mov	local01, #0
101a8     A7 12 02 FB | 	rdlong	arg01, fp
101ac     09 13 52 F6 | 	abs	arg01, arg01 wc
101b0     1F 26 C6 C9 |  if_b	decod	local05, #31
101b4     00 26 06 36 |  if_ae	mov	local05, #0
101b8     CC D1 B0 FD | 	call	#__system___float_fromuns
101bc     13 FB 61 F5 | 	xor	result1, local05
101c0     FD 12 02 F6 | 	mov	arg01, result1
101c4     0C 4E 05 F1 | 	add	fp, #12
101c8     A7 14 02 FB | 	rdlong	arg02, fp
101cc     0C 4E 85 F1 | 	sub	fp, #12
101d0     01 16 06 F6 | 	mov	arg03, #1
101d4     E8 D9 B0 FD | 	call	#__system___float_cmp
101d8     00 FA 0D F2 | 	cmp	result1, #0 wz
101dc     00 1E 26 A6 |  if_e	not	local01, #0
101e0     A7 1E 62 FC | 	wrlong	local01, fp
101e4     8C 02 90 FD | 	jmp	#LR__1253
101e8                 | LR__1244
101e8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
101e8     08 4E 05 F1 | 	add	fp, #8
101ec     A7 1E 02 FB | 	rdlong	local01, fp
101f0     08 4E 85 F1 | 	sub	fp, #8
101f4     1C 1E 0E F2 | 	cmp	local01, #28 wz
101f8     14 4E 05 A1 |  if_e	add	fp, #20
101fc     A7 24 02 AB |  if_e	rdlong	local04, fp
10200     14 4E 85 A1 |  if_e	sub	fp, #20
10204     12 23 02 A6 |  if_e	mov	local03, local04
10208     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1020c     24 00 90 5D |  if_ne	jmp	#LR__1245
10210     00 1E 06 F6 | 	mov	local01, #0
10214     A7 20 02 FB | 	rdlong	local02, fp
10218     0C 4E 05 F1 | 	add	fp, #12
1021c     A7 22 02 FB | 	rdlong	local03, fp
10220     0C 4E 85 F1 | 	sub	fp, #12
10224     11 21 0A F2 | 	cmp	local02, local03 wz
10228     01 1E 66 A6 |  if_e	neg	local01, #1
1022c     A7 1E 62 FC | 	wrlong	local01, fp
10230     40 02 90 FD | 	jmp	#LR__1253
10234                 | LR__1245
10234                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
10234     08 4E 05 F1 | 	add	fp, #8
10238     A7 1E 02 FB | 	rdlong	local01, fp
1023c     08 4E 85 F1 | 	sub	fp, #8
10240     1C 1E 0E F2 | 	cmp	local01, #28 wz
10244     14 4E 05 A1 |  if_e	add	fp, #20
10248     A7 24 02 AB |  if_e	rdlong	local04, fp
1024c     14 4E 85 A1 |  if_e	sub	fp, #20
10250     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
10254     24 00 90 5D |  if_ne	jmp	#LR__1246
10258     00 1E 06 F6 | 	mov	local01, #0
1025c     A7 20 02 FB | 	rdlong	local02, fp
10260     0C 4E 05 F1 | 	add	fp, #12
10264     A7 22 02 FB | 	rdlong	local03, fp
10268     0C 4E 85 F1 | 	sub	fp, #12
1026c     11 21 0A F2 | 	cmp	local02, local03 wz
10270     01 1E 66 A6 |  if_e	neg	local01, #1
10274     A7 1E 62 FC | 	wrlong	local01, fp
10278     F8 01 90 FD | 	jmp	#LR__1253
1027c                 | LR__1246
1027c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
1027c     08 4E 05 F1 | 	add	fp, #8
10280     A7 1E 02 FB | 	rdlong	local01, fp
10284     08 4E 85 F1 | 	sub	fp, #8
10288     1D 1E 0E F2 | 	cmp	local01, #29 wz
1028c     14 4E 05 A1 |  if_e	add	fp, #20
10290     A7 22 02 AB |  if_e	rdlong	local03, fp
10294     14 4E 85 A1 |  if_e	sub	fp, #20
10298     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1029c     34 00 90 5D |  if_ne	jmp	#LR__1247
102a0     00 1E 06 F6 | 	mov	local01, #0
102a4     A7 12 02 FB | 	rdlong	arg01, fp
102a8     DC D0 B0 FD | 	call	#__system___float_fromuns
102ac     FD 12 02 F6 | 	mov	arg01, result1
102b0     0C 4E 05 F1 | 	add	fp, #12
102b4     A7 14 02 FB | 	rdlong	arg02, fp
102b8     0C 4E 85 F1 | 	sub	fp, #12
102bc     01 16 06 F6 | 	mov	arg03, #1
102c0     FC D8 B0 FD | 	call	#__system___float_cmp
102c4     00 FA 0D F2 | 	cmp	result1, #0 wz
102c8     00 1E 26 A6 |  if_e	not	local01, #0
102cc     A7 1E 62 FC | 	wrlong	local01, fp
102d0     A0 01 90 FD | 	jmp	#LR__1253
102d4                 | LR__1247
102d4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
102d4     08 4E 05 F1 | 	add	fp, #8
102d8     A7 1E 02 FB | 	rdlong	local01, fp
102dc     08 4E 85 F1 | 	sub	fp, #8
102e0     1D 1E 0E F2 | 	cmp	local01, #29 wz
102e4     14 4E 05 A1 |  if_e	add	fp, #20
102e8     A7 22 02 AB |  if_e	rdlong	local03, fp
102ec     14 4E 85 A1 |  if_e	sub	fp, #20
102f0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
102f4     24 00 90 5D |  if_ne	jmp	#LR__1248
102f8     00 1E 06 F6 | 	mov	local01, #0
102fc     A7 20 02 FB | 	rdlong	local02, fp
10300     0C 4E 05 F1 | 	add	fp, #12
10304     A7 22 02 FB | 	rdlong	local03, fp
10308     0C 4E 85 F1 | 	sub	fp, #12
1030c     11 21 0A F2 | 	cmp	local02, local03 wz
10310     01 1E 66 A6 |  if_e	neg	local01, #1
10314     A7 1E 62 FC | 	wrlong	local01, fp
10318     58 01 90 FD | 	jmp	#LR__1253
1031c                 | LR__1248
1031c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
1031c     08 4E 05 F1 | 	add	fp, #8
10320     A7 1E 02 FB | 	rdlong	local01, fp
10324     08 4E 85 F1 | 	sub	fp, #8
10328     1D 1E 0E F2 | 	cmp	local01, #29 wz
1032c     14 4E 05 A1 |  if_e	add	fp, #20
10330     A7 22 02 AB |  if_e	rdlong	local03, fp
10334     14 4E 85 A1 |  if_e	sub	fp, #20
10338     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1033c     24 00 90 5D |  if_ne	jmp	#LR__1249
10340     00 1E 06 F6 | 	mov	local01, #0
10344     A7 20 02 FB | 	rdlong	local02, fp
10348     0C 4E 05 F1 | 	add	fp, #12
1034c     A7 22 02 FB | 	rdlong	local03, fp
10350     0C 4E 85 F1 | 	sub	fp, #12
10354     11 21 0A F2 | 	cmp	local02, local03 wz
10358     01 1E 66 A6 |  if_e	neg	local01, #1
1035c     A7 1E 62 FC | 	wrlong	local01, fp
10360     10 01 90 FD | 	jmp	#LR__1253
10364                 | LR__1249
10364                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
10364     08 4E 05 F1 | 	add	fp, #8
10368     A7 1E 02 FB | 	rdlong	local01, fp
1036c     08 4E 85 F1 | 	sub	fp, #8
10370     2B 1E 0E F2 | 	cmp	local01, #43 wz
10374     14 4E 05 A1 |  if_e	add	fp, #20
10378     A7 22 02 AB |  if_e	rdlong	local03, fp
1037c     14 4E 85 A1 |  if_e	sub	fp, #20
10380     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10384     30 00 90 5D |  if_ne	jmp	#LR__1250
10388     00 1E 06 F6 | 	mov	local01, #0
1038c     A7 12 02 FB | 	rdlong	arg01, fp
10390     80 D6 BF FD | 	call	#_convertstring
10394     FD 12 02 F6 | 	mov	arg01, result1
10398     0C 4E 05 F1 | 	add	fp, #12
1039c     A7 14 02 FB | 	rdlong	arg02, fp
103a0     0C 4E 85 F1 | 	sub	fp, #12
103a4     E8 A8 B0 FD | 	call	#__system___string_cmp
103a8     00 FA 0D F2 | 	cmp	result1, #0 wz
103ac     00 1E 26 A6 |  if_e	not	local01, #0
103b0     A7 1E 62 FC | 	wrlong	local01, fp
103b4     BC 00 90 FD | 	jmp	#LR__1253
103b8                 | LR__1250
103b8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
103b8     08 4E 05 F1 | 	add	fp, #8
103bc     A7 1E 02 FB | 	rdlong	local01, fp
103c0     08 4E 85 F1 | 	sub	fp, #8
103c4     1F 1E 0E F2 | 	cmp	local01, #31 wz
103c8     14 4E 05 A1 |  if_e	add	fp, #20
103cc     A7 22 02 AB |  if_e	rdlong	local03, fp
103d0     14 4E 85 A1 |  if_e	sub	fp, #20
103d4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
103d8     34 00 90 5D |  if_ne	jmp	#LR__1251
103dc     00 1E 06 F6 | 	mov	local01, #0
103e0     A7 20 02 FB | 	rdlong	local02, fp
103e4     0C 4E 05 F1 | 	add	fp, #12
103e8     A7 12 02 FB | 	rdlong	arg01, fp
103ec     0C 4E 85 F1 | 	sub	fp, #12
103f0     20 D6 BF FD | 	call	#_convertstring
103f4     FD 14 02 F6 | 	mov	arg02, result1
103f8     10 13 02 F6 | 	mov	arg01, local02
103fc     90 A8 B0 FD | 	call	#__system___string_cmp
10400     00 FA 0D F2 | 	cmp	result1, #0 wz
10404     00 1E 26 A6 |  if_e	not	local01, #0
10408     A7 1E 62 FC | 	wrlong	local01, fp
1040c     64 00 90 FD | 	jmp	#LR__1253
10410                 | LR__1251
10410                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
10410     08 4E 05 F1 | 	add	fp, #8
10414     A7 1E 02 FB | 	rdlong	local01, fp
10418     08 4E 85 F1 | 	sub	fp, #8
1041c     2B 1E 0E F2 | 	cmp	local01, #43 wz
10420     14 4E 05 A1 |  if_e	add	fp, #20
10424     A7 22 02 AB |  if_e	rdlong	local03, fp
10428     14 4E 85 A1 |  if_e	sub	fp, #20
1042c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10430     3C 00 90 5D |  if_ne	jmp	#LR__1252
10434     00 1E 06 F6 | 	mov	local01, #0
10438     A7 12 02 FB | 	rdlong	arg01, fp
1043c     D4 D5 BF FD | 	call	#_convertstring
10440     FD 20 02 F6 | 	mov	local02, result1
10444     0C 4E 05 F1 | 	add	fp, #12
10448     A7 12 02 FB | 	rdlong	arg01, fp
1044c     0C 4E 85 F1 | 	sub	fp, #12
10450     C0 D5 BF FD | 	call	#_convertstring
10454     FD 14 02 F6 | 	mov	arg02, result1
10458     10 13 02 F6 | 	mov	arg01, local02
1045c     30 A8 B0 FD | 	call	#__system___string_cmp
10460     00 FA 0D F2 | 	cmp	result1, #0 wz
10464     00 1E 26 A6 |  if_e	not	local01, #0
10468     A7 1E 62 FC | 	wrlong	local01, fp
1046c     04 00 90 FD | 	jmp	#LR__1253
10470                 | LR__1252
10470     A7 00 68 FC | 	wrlong	#0, fp
10474                 | LR__1253
10474     08 4E 05 F1 | 	add	fp, #8
10478     A7 38 68 FC | 	wrlong	#28, fp
1047c     08 4E 85 F1 | 	sub	fp, #8
10480     A7 12 02 F6 | 	mov	arg01, fp
10484     08 97 BF FD | 	call	#_push
10488     A7 F0 03 F6 | 	mov	ptra, fp
1048c     B2 00 A0 FD | 	call	#popregs_
10490                 | _do_eq_ret
10490     2D 00 64 FD | 	ret
10494                 | 
10494                 | ' 
10494                 | ' sub do_gt
10494                 | _do_gt
10494     05 4A 05 F6 | 	mov	COUNT_, #5
10498     A8 00 A0 FD | 	call	#pushregs_
1049c     18 F0 07 F1 | 	add	ptra, #24
104a0     54 96 BF FD | 	call	#_pop
104a4     FD 1E 02 F6 | 	mov	local01, result1
104a8     FE 20 02 F6 | 	mov	local02, result2
104ac     FF 22 02 F6 | 	mov	local03, result3
104b0     0C 4E 05 F1 | 	add	fp, #12
104b4     A7 1E 62 FC | 	wrlong	local01, fp
104b8     04 4E 05 F1 | 	add	fp, #4
104bc     A7 20 62 FC | 	wrlong	local02, fp
104c0     04 4E 05 F1 | 	add	fp, #4
104c4     A7 22 62 FC | 	wrlong	local03, fp
104c8     14 4E 85 F1 | 	sub	fp, #20
104cc     28 96 BF FD | 	call	#_pop
104d0     FF 22 02 F6 | 	mov	local03, result3
104d4     A7 FA 61 FC | 	wrlong	result1, fp
104d8     04 4E 05 F1 | 	add	fp, #4
104dc     A7 FC 61 FC | 	wrlong	result2, fp
104e0     04 4E 05 F1 | 	add	fp, #4
104e4     A7 22 62 FC | 	wrlong	local03, fp
104e8                 | ' t2=pop()
104e8                 | ' t1=pop()
104e8                 | ' 
104e8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
104e8     08 4E 85 F1 | 	sub	fp, #8
104ec     1F 22 0E F2 | 	cmp	local03, #31 wz
104f0     14 4E 05 A1 |  if_e	add	fp, #20
104f4     A7 24 02 AB |  if_e	rdlong	local04, fp
104f8     14 4E 85 A1 |  if_e	sub	fp, #20
104fc     12 23 02 A6 |  if_e	mov	local03, local04
10500     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10504     28 00 90 5D |  if_ne	jmp	#LR__1260
10508     00 1E 06 F6 | 	mov	local01, #0
1050c     A7 12 02 FB | 	rdlong	arg01, fp
10510     0C 4E 05 F1 | 	add	fp, #12
10514     A7 14 02 FB | 	rdlong	arg02, fp
10518     0C 4E 85 F1 | 	sub	fp, #12
1051c     70 A7 B0 FD | 	call	#__system___string_cmp
10520     01 FA 55 F2 | 	cmps	result1, #1 wc
10524     00 1E 26 36 |  if_ae	not	local01, #0
10528     A7 1E 62 FC | 	wrlong	local01, fp
1052c     1C 04 90 FD | 	jmp	#LR__1273
10530                 | LR__1260
10530                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
10530     08 4E 05 F1 | 	add	fp, #8
10534     A7 1E 02 FB | 	rdlong	local01, fp
10538     08 4E 85 F1 | 	sub	fp, #8
1053c     1E 1E 0E F2 | 	cmp	local01, #30 wz
10540     14 4E 05 A1 |  if_e	add	fp, #20
10544     A7 24 02 AB |  if_e	rdlong	local04, fp
10548     14 4E 85 A1 |  if_e	sub	fp, #20
1054c     12 23 02 A6 |  if_e	mov	local03, local04
10550     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10554     2C 00 90 5D |  if_ne	jmp	#LR__1261
10558     00 1E 06 F6 | 	mov	local01, #0
1055c     A7 12 02 FB | 	rdlong	arg01, fp
10560     0C 4E 05 F1 | 	add	fp, #12
10564     A7 14 02 FB | 	rdlong	arg02, fp
10568     0C 4E 85 F1 | 	sub	fp, #12
1056c     01 16 66 F6 | 	neg	arg03, #1
10570     4C D6 B0 FD | 	call	#__system___float_cmp
10574     01 FA 55 F2 | 	cmps	result1, #1 wc
10578     00 1E 26 36 |  if_ae	not	local01, #0
1057c     A7 1E 62 FC | 	wrlong	local01, fp
10580     C8 03 90 FD | 	jmp	#LR__1273
10584                 | LR__1261
10584                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
10584     08 4E 05 F1 | 	add	fp, #8
10588     A7 1E 02 FB | 	rdlong	local01, fp
1058c     08 4E 85 F1 | 	sub	fp, #8
10590     1E 1E 0E F2 | 	cmp	local01, #30 wz
10594     14 4E 05 A1 |  if_e	add	fp, #20
10598     A7 24 02 AB |  if_e	rdlong	local04, fp
1059c     14 4E 85 A1 |  if_e	sub	fp, #20
105a0     12 23 02 A6 |  if_e	mov	local03, local04
105a4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
105a8     48 00 90 5D |  if_ne	jmp	#LR__1262
105ac     00 1E 06 F6 | 	mov	local01, #0
105b0     A7 20 02 FB | 	rdlong	local02, fp
105b4     0C 4E 05 F1 | 	add	fp, #12
105b8     A7 12 02 FB | 	rdlong	arg01, fp
105bc     0C 4E 85 F1 | 	sub	fp, #12
105c0     09 13 52 F6 | 	abs	arg01, arg01 wc
105c4     1F 26 C6 C9 |  if_b	decod	local05, #31
105c8     00 26 06 36 |  if_ae	mov	local05, #0
105cc     B8 CD B0 FD | 	call	#__system___float_fromuns
105d0     13 FB 61 F5 | 	xor	result1, local05
105d4     FD 14 02 F6 | 	mov	arg02, result1
105d8     10 13 02 F6 | 	mov	arg01, local02
105dc     01 16 66 F6 | 	neg	arg03, #1
105e0     DC D5 B0 FD | 	call	#__system___float_cmp
105e4     01 FA 55 F2 | 	cmps	result1, #1 wc
105e8     00 1E 26 36 |  if_ae	not	local01, #0
105ec     A7 1E 62 FC | 	wrlong	local01, fp
105f0     58 03 90 FD | 	jmp	#LR__1273
105f4                 | LR__1262
105f4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
105f4     08 4E 05 F1 | 	add	fp, #8
105f8     A7 1E 02 FB | 	rdlong	local01, fp
105fc     08 4E 85 F1 | 	sub	fp, #8
10600     1E 1E 0E F2 | 	cmp	local01, #30 wz
10604     14 4E 05 A1 |  if_e	add	fp, #20
10608     A7 24 02 AB |  if_e	rdlong	local04, fp
1060c     14 4E 85 A1 |  if_e	sub	fp, #20
10610     12 23 02 A6 |  if_e	mov	local03, local04
10614     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10618     38 00 90 5D |  if_ne	jmp	#LR__1263
1061c     00 1E 06 F6 | 	mov	local01, #0
10620     A7 20 02 FB | 	rdlong	local02, fp
10624     0C 4E 05 F1 | 	add	fp, #12
10628     A7 12 02 FB | 	rdlong	arg01, fp
1062c     0C 4E 85 F1 | 	sub	fp, #12
10630     54 CD B0 FD | 	call	#__system___float_fromuns
10634     FD 14 02 F6 | 	mov	arg02, result1
10638     10 13 02 F6 | 	mov	arg01, local02
1063c     01 16 66 F6 | 	neg	arg03, #1
10640     7C D5 B0 FD | 	call	#__system___float_cmp
10644     01 FA 55 F2 | 	cmps	result1, #1 wc
10648     00 1E 26 36 |  if_ae	not	local01, #0
1064c     A7 1E 62 FC | 	wrlong	local01, fp
10650     F8 02 90 FD | 	jmp	#LR__1273
10654                 | LR__1263
10654                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
10654     08 4E 05 F1 | 	add	fp, #8
10658     A7 1E 02 FB | 	rdlong	local01, fp
1065c     08 4E 85 F1 | 	sub	fp, #8
10660     1C 1E 0E F2 | 	cmp	local01, #28 wz
10664     14 4E 05 A1 |  if_e	add	fp, #20
10668     A7 24 02 AB |  if_e	rdlong	local04, fp
1066c     14 4E 85 A1 |  if_e	sub	fp, #20
10670     12 23 02 A6 |  if_e	mov	local03, local04
10674     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10678     44 00 90 5D |  if_ne	jmp	#LR__1264
1067c     00 1E 06 F6 | 	mov	local01, #0
10680     A7 12 02 FB | 	rdlong	arg01, fp
10684     09 13 52 F6 | 	abs	arg01, arg01 wc
10688     1F 26 C6 C9 |  if_b	decod	local05, #31
1068c     00 26 06 36 |  if_ae	mov	local05, #0
10690     F4 CC B0 FD | 	call	#__system___float_fromuns
10694     13 FB 61 F5 | 	xor	result1, local05
10698     FD 12 02 F6 | 	mov	arg01, result1
1069c     0C 4E 05 F1 | 	add	fp, #12
106a0     A7 14 02 FB | 	rdlong	arg02, fp
106a4     0C 4E 85 F1 | 	sub	fp, #12
106a8     01 16 66 F6 | 	neg	arg03, #1
106ac     10 D5 B0 FD | 	call	#__system___float_cmp
106b0     01 FA 55 F2 | 	cmps	result1, #1 wc
106b4     00 1E 26 36 |  if_ae	not	local01, #0
106b8     A7 1E 62 FC | 	wrlong	local01, fp
106bc     8C 02 90 FD | 	jmp	#LR__1273
106c0                 | LR__1264
106c0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
106c0     08 4E 05 F1 | 	add	fp, #8
106c4     A7 1E 02 FB | 	rdlong	local01, fp
106c8     08 4E 85 F1 | 	sub	fp, #8
106cc     1C 1E 0E F2 | 	cmp	local01, #28 wz
106d0     14 4E 05 A1 |  if_e	add	fp, #20
106d4     A7 24 02 AB |  if_e	rdlong	local04, fp
106d8     14 4E 85 A1 |  if_e	sub	fp, #20
106dc     12 23 02 A6 |  if_e	mov	local03, local04
106e0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
106e4     24 00 90 5D |  if_ne	jmp	#LR__1265
106e8     00 1E 06 F6 | 	mov	local01, #0
106ec     A7 20 02 FB | 	rdlong	local02, fp
106f0     0C 4E 05 F1 | 	add	fp, #12
106f4     A7 22 02 FB | 	rdlong	local03, fp
106f8     0C 4E 85 F1 | 	sub	fp, #12
106fc     11 21 5A F2 | 	cmps	local02, local03 wcz
10700     01 1E 66 16 |  if_a	neg	local01, #1
10704     A7 1E 62 FC | 	wrlong	local01, fp
10708     40 02 90 FD | 	jmp	#LR__1273
1070c                 | LR__1265
1070c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
1070c     08 4E 05 F1 | 	add	fp, #8
10710     A7 1E 02 FB | 	rdlong	local01, fp
10714     08 4E 85 F1 | 	sub	fp, #8
10718     1C 1E 0E F2 | 	cmp	local01, #28 wz
1071c     14 4E 05 A1 |  if_e	add	fp, #20
10720     A7 24 02 AB |  if_e	rdlong	local04, fp
10724     14 4E 85 A1 |  if_e	sub	fp, #20
10728     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
1072c     24 00 90 5D |  if_ne	jmp	#LR__1266
10730     00 1E 06 F6 | 	mov	local01, #0
10734     A7 20 02 FB | 	rdlong	local02, fp
10738     0C 4E 05 F1 | 	add	fp, #12
1073c     A7 22 02 FB | 	rdlong	local03, fp
10740     0C 4E 85 F1 | 	sub	fp, #12
10744     11 21 5A F2 | 	cmps	local02, local03 wcz
10748     01 1E 66 16 |  if_a	neg	local01, #1
1074c     A7 1E 62 FC | 	wrlong	local01, fp
10750     F8 01 90 FD | 	jmp	#LR__1273
10754                 | LR__1266
10754                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
10754     08 4E 05 F1 | 	add	fp, #8
10758     A7 1E 02 FB | 	rdlong	local01, fp
1075c     08 4E 85 F1 | 	sub	fp, #8
10760     1D 1E 0E F2 | 	cmp	local01, #29 wz
10764     14 4E 05 A1 |  if_e	add	fp, #20
10768     A7 22 02 AB |  if_e	rdlong	local03, fp
1076c     14 4E 85 A1 |  if_e	sub	fp, #20
10770     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10774     34 00 90 5D |  if_ne	jmp	#LR__1267
10778     00 1E 06 F6 | 	mov	local01, #0
1077c     A7 12 02 FB | 	rdlong	arg01, fp
10780     04 CC B0 FD | 	call	#__system___float_fromuns
10784     FD 12 02 F6 | 	mov	arg01, result1
10788     0C 4E 05 F1 | 	add	fp, #12
1078c     A7 14 02 FB | 	rdlong	arg02, fp
10790     0C 4E 85 F1 | 	sub	fp, #12
10794     01 16 66 F6 | 	neg	arg03, #1
10798     24 D4 B0 FD | 	call	#__system___float_cmp
1079c     01 FA 55 F2 | 	cmps	result1, #1 wc
107a0     00 1E 26 36 |  if_ae	not	local01, #0
107a4     A7 1E 62 FC | 	wrlong	local01, fp
107a8     A0 01 90 FD | 	jmp	#LR__1273
107ac                 | LR__1267
107ac                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
107ac     08 4E 05 F1 | 	add	fp, #8
107b0     A7 1E 02 FB | 	rdlong	local01, fp
107b4     08 4E 85 F1 | 	sub	fp, #8
107b8     1D 1E 0E F2 | 	cmp	local01, #29 wz
107bc     14 4E 05 A1 |  if_e	add	fp, #20
107c0     A7 22 02 AB |  if_e	rdlong	local03, fp
107c4     14 4E 85 A1 |  if_e	sub	fp, #20
107c8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
107cc     24 00 90 5D |  if_ne	jmp	#LR__1268
107d0     00 1E 06 F6 | 	mov	local01, #0
107d4     A7 20 02 FB | 	rdlong	local02, fp
107d8     0C 4E 05 F1 | 	add	fp, #12
107dc     A7 22 02 FB | 	rdlong	local03, fp
107e0     0C 4E 85 F1 | 	sub	fp, #12
107e4     11 21 5A F2 | 	cmps	local02, local03 wcz
107e8     01 1E 66 16 |  if_a	neg	local01, #1
107ec     A7 1E 62 FC | 	wrlong	local01, fp
107f0     58 01 90 FD | 	jmp	#LR__1273
107f4                 | LR__1268
107f4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
107f4     08 4E 05 F1 | 	add	fp, #8
107f8     A7 1E 02 FB | 	rdlong	local01, fp
107fc     08 4E 85 F1 | 	sub	fp, #8
10800     1D 1E 0E F2 | 	cmp	local01, #29 wz
10804     14 4E 05 A1 |  if_e	add	fp, #20
10808     A7 22 02 AB |  if_e	rdlong	local03, fp
1080c     14 4E 85 A1 |  if_e	sub	fp, #20
10810     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10814     24 00 90 5D |  if_ne	jmp	#LR__1269
10818     00 1E 06 F6 | 	mov	local01, #0
1081c     A7 20 02 FB | 	rdlong	local02, fp
10820     0C 4E 05 F1 | 	add	fp, #12
10824     A7 22 02 FB | 	rdlong	local03, fp
10828     0C 4E 85 F1 | 	sub	fp, #12
1082c     11 21 1A F2 | 	cmp	local02, local03 wcz
10830     01 1E 66 16 |  if_a	neg	local01, #1
10834     A7 1E 62 FC | 	wrlong	local01, fp
10838     10 01 90 FD | 	jmp	#LR__1273
1083c                 | LR__1269
1083c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
1083c     08 4E 05 F1 | 	add	fp, #8
10840     A7 1E 02 FB | 	rdlong	local01, fp
10844     08 4E 85 F1 | 	sub	fp, #8
10848     2B 1E 0E F2 | 	cmp	local01, #43 wz
1084c     14 4E 05 A1 |  if_e	add	fp, #20
10850     A7 22 02 AB |  if_e	rdlong	local03, fp
10854     14 4E 85 A1 |  if_e	sub	fp, #20
10858     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1085c     30 00 90 5D |  if_ne	jmp	#LR__1270
10860     00 1E 06 F6 | 	mov	local01, #0
10864     A7 12 02 FB | 	rdlong	arg01, fp
10868     A8 D1 BF FD | 	call	#_convertstring
1086c     FD 12 02 F6 | 	mov	arg01, result1
10870     0C 4E 05 F1 | 	add	fp, #12
10874     A7 14 02 FB | 	rdlong	arg02, fp
10878     0C 4E 85 F1 | 	sub	fp, #12
1087c     10 A4 B0 FD | 	call	#__system___string_cmp
10880     01 FA 55 F2 | 	cmps	result1, #1 wc
10884     00 1E 26 36 |  if_ae	not	local01, #0
10888     A7 1E 62 FC | 	wrlong	local01, fp
1088c     BC 00 90 FD | 	jmp	#LR__1273
10890                 | LR__1270
10890                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
10890     08 4E 05 F1 | 	add	fp, #8
10894     A7 1E 02 FB | 	rdlong	local01, fp
10898     08 4E 85 F1 | 	sub	fp, #8
1089c     1F 1E 0E F2 | 	cmp	local01, #31 wz
108a0     14 4E 05 A1 |  if_e	add	fp, #20
108a4     A7 22 02 AB |  if_e	rdlong	local03, fp
108a8     14 4E 85 A1 |  if_e	sub	fp, #20
108ac     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
108b0     34 00 90 5D |  if_ne	jmp	#LR__1271
108b4     00 1E 06 F6 | 	mov	local01, #0
108b8     A7 20 02 FB | 	rdlong	local02, fp
108bc     0C 4E 05 F1 | 	add	fp, #12
108c0     A7 12 02 FB | 	rdlong	arg01, fp
108c4     0C 4E 85 F1 | 	sub	fp, #12
108c8     48 D1 BF FD | 	call	#_convertstring
108cc     FD 14 02 F6 | 	mov	arg02, result1
108d0     10 13 02 F6 | 	mov	arg01, local02
108d4     B8 A3 B0 FD | 	call	#__system___string_cmp
108d8     01 FA 55 F2 | 	cmps	result1, #1 wc
108dc     00 1E 26 36 |  if_ae	not	local01, #0
108e0     A7 1E 62 FC | 	wrlong	local01, fp
108e4     64 00 90 FD | 	jmp	#LR__1273
108e8                 | LR__1271
108e8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
108e8     08 4E 05 F1 | 	add	fp, #8
108ec     A7 1E 02 FB | 	rdlong	local01, fp
108f0     08 4E 85 F1 | 	sub	fp, #8
108f4     2B 1E 0E F2 | 	cmp	local01, #43 wz
108f8     14 4E 05 A1 |  if_e	add	fp, #20
108fc     A7 22 02 AB |  if_e	rdlong	local03, fp
10900     14 4E 85 A1 |  if_e	sub	fp, #20
10904     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10908     3C 00 90 5D |  if_ne	jmp	#LR__1272
1090c     00 1E 06 F6 | 	mov	local01, #0
10910     A7 12 02 FB | 	rdlong	arg01, fp
10914     FC D0 BF FD | 	call	#_convertstring
10918     FD 20 02 F6 | 	mov	local02, result1
1091c     0C 4E 05 F1 | 	add	fp, #12
10920     A7 12 02 FB | 	rdlong	arg01, fp
10924     0C 4E 85 F1 | 	sub	fp, #12
10928     E8 D0 BF FD | 	call	#_convertstring
1092c     FD 14 02 F6 | 	mov	arg02, result1
10930     10 13 02 F6 | 	mov	arg01, local02
10934     58 A3 B0 FD | 	call	#__system___string_cmp
10938     01 FA 55 F2 | 	cmps	result1, #1 wc
1093c     00 1E 26 36 |  if_ae	not	local01, #0
10940     A7 1E 62 FC | 	wrlong	local01, fp
10944     04 00 90 FD | 	jmp	#LR__1273
10948                 | LR__1272
10948     A7 00 68 FC | 	wrlong	#0, fp
1094c                 | LR__1273
1094c     08 4E 05 F1 | 	add	fp, #8
10950     A7 38 68 FC | 	wrlong	#28, fp
10954     08 4E 85 F1 | 	sub	fp, #8
10958     A7 12 02 F6 | 	mov	arg01, fp
1095c     30 92 BF FD | 	call	#_push
10960     A7 F0 03 F6 | 	mov	ptra, fp
10964     B2 00 A0 FD | 	call	#popregs_
10968                 | _do_gt_ret
10968     2D 00 64 FD | 	ret
1096c                 | 
1096c                 | ' 
1096c                 | ' sub do_lt
1096c                 | _do_lt
1096c     05 4A 05 F6 | 	mov	COUNT_, #5
10970     A8 00 A0 FD | 	call	#pushregs_
10974     18 F0 07 F1 | 	add	ptra, #24
10978     7C 91 BF FD | 	call	#_pop
1097c     FD 1E 02 F6 | 	mov	local01, result1
10980     FE 20 02 F6 | 	mov	local02, result2
10984     FF 22 02 F6 | 	mov	local03, result3
10988     0C 4E 05 F1 | 	add	fp, #12
1098c     A7 1E 62 FC | 	wrlong	local01, fp
10990     04 4E 05 F1 | 	add	fp, #4
10994     A7 20 62 FC | 	wrlong	local02, fp
10998     04 4E 05 F1 | 	add	fp, #4
1099c     A7 22 62 FC | 	wrlong	local03, fp
109a0     14 4E 85 F1 | 	sub	fp, #20
109a4     50 91 BF FD | 	call	#_pop
109a8     FF 22 02 F6 | 	mov	local03, result3
109ac     A7 FA 61 FC | 	wrlong	result1, fp
109b0     04 4E 05 F1 | 	add	fp, #4
109b4     A7 FC 61 FC | 	wrlong	result2, fp
109b8     04 4E 05 F1 | 	add	fp, #4
109bc     A7 22 62 FC | 	wrlong	local03, fp
109c0                 | ' t2=pop()
109c0                 | ' t1=pop()
109c0                 | ' 
109c0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
109c0     08 4E 85 F1 | 	sub	fp, #8
109c4     1F 22 0E F2 | 	cmp	local03, #31 wz
109c8     14 4E 05 A1 |  if_e	add	fp, #20
109cc     A7 24 02 AB |  if_e	rdlong	local04, fp
109d0     14 4E 85 A1 |  if_e	sub	fp, #20
109d4     12 23 02 A6 |  if_e	mov	local03, local04
109d8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
109dc     28 00 90 5D |  if_ne	jmp	#LR__1280
109e0     00 1E 06 F6 | 	mov	local01, #0
109e4     A7 12 02 FB | 	rdlong	arg01, fp
109e8     0C 4E 05 F1 | 	add	fp, #12
109ec     A7 14 02 FB | 	rdlong	arg02, fp
109f0     0C 4E 85 F1 | 	sub	fp, #12
109f4     98 A2 B0 FD | 	call	#__system___string_cmp
109f8     00 FA 55 F2 | 	cmps	result1, #0 wc
109fc     00 1E 26 C6 |  if_b	not	local01, #0
10a00     A7 1E 62 FC | 	wrlong	local01, fp
10a04     0C 04 90 FD | 	jmp	#LR__1293
10a08                 | LR__1280
10a08                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
10a08     08 4E 05 F1 | 	add	fp, #8
10a0c     A7 1E 02 FB | 	rdlong	local01, fp
10a10     08 4E 85 F1 | 	sub	fp, #8
10a14     1E 1E 0E F2 | 	cmp	local01, #30 wz
10a18     14 4E 05 A1 |  if_e	add	fp, #20
10a1c     A7 24 02 AB |  if_e	rdlong	local04, fp
10a20     14 4E 85 A1 |  if_e	sub	fp, #20
10a24     12 23 02 A6 |  if_e	mov	local03, local04
10a28     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10a2c     2C 00 90 5D |  if_ne	jmp	#LR__1281
10a30     00 1E 06 F6 | 	mov	local01, #0
10a34     A7 12 02 FB | 	rdlong	arg01, fp
10a38     0C 4E 05 F1 | 	add	fp, #12
10a3c     A7 14 02 FB | 	rdlong	arg02, fp
10a40     0C 4E 85 F1 | 	sub	fp, #12
10a44     01 16 06 F6 | 	mov	arg03, #1
10a48     74 D1 B0 FD | 	call	#__system___float_cmp
10a4c     00 FA 55 F2 | 	cmps	result1, #0 wc
10a50     00 1E 26 C6 |  if_b	not	local01, #0
10a54     A7 1E 62 FC | 	wrlong	local01, fp
10a58     B8 03 90 FD | 	jmp	#LR__1293
10a5c                 | LR__1281
10a5c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
10a5c     08 4E 05 F1 | 	add	fp, #8
10a60     A7 1E 02 FB | 	rdlong	local01, fp
10a64     08 4E 85 F1 | 	sub	fp, #8
10a68     1E 1E 0E F2 | 	cmp	local01, #30 wz
10a6c     14 4E 05 A1 |  if_e	add	fp, #20
10a70     A7 24 02 AB |  if_e	rdlong	local04, fp
10a74     14 4E 85 A1 |  if_e	sub	fp, #20
10a78     12 23 02 A6 |  if_e	mov	local03, local04
10a7c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10a80     48 00 90 5D |  if_ne	jmp	#LR__1282
10a84     00 1E 06 F6 | 	mov	local01, #0
10a88     A7 20 02 FB | 	rdlong	local02, fp
10a8c     0C 4E 05 F1 | 	add	fp, #12
10a90     A7 12 02 FB | 	rdlong	arg01, fp
10a94     0C 4E 85 F1 | 	sub	fp, #12
10a98     09 13 52 F6 | 	abs	arg01, arg01 wc
10a9c     1F 26 C6 C9 |  if_b	decod	local05, #31
10aa0     00 26 06 36 |  if_ae	mov	local05, #0
10aa4     E0 C8 B0 FD | 	call	#__system___float_fromuns
10aa8     13 FB 61 F5 | 	xor	result1, local05
10aac     FD 14 02 F6 | 	mov	arg02, result1
10ab0     10 13 02 F6 | 	mov	arg01, local02
10ab4     01 16 06 F6 | 	mov	arg03, #1
10ab8     04 D1 B0 FD | 	call	#__system___float_cmp
10abc     00 FA 55 F2 | 	cmps	result1, #0 wc
10ac0     00 1E 26 C6 |  if_b	not	local01, #0
10ac4     A7 1E 62 FC | 	wrlong	local01, fp
10ac8     48 03 90 FD | 	jmp	#LR__1293
10acc                 | LR__1282
10acc                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
10acc     08 4E 05 F1 | 	add	fp, #8
10ad0     A7 1E 02 FB | 	rdlong	local01, fp
10ad4     08 4E 85 F1 | 	sub	fp, #8
10ad8     1E 1E 0E F2 | 	cmp	local01, #30 wz
10adc     14 4E 05 A1 |  if_e	add	fp, #20
10ae0     A7 24 02 AB |  if_e	rdlong	local04, fp
10ae4     14 4E 85 A1 |  if_e	sub	fp, #20
10ae8     12 23 02 A6 |  if_e	mov	local03, local04
10aec     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10af0     38 00 90 5D |  if_ne	jmp	#LR__1283
10af4     00 1E 06 F6 | 	mov	local01, #0
10af8     A7 20 02 FB | 	rdlong	local02, fp
10afc     0C 4E 05 F1 | 	add	fp, #12
10b00     A7 12 02 FB | 	rdlong	arg01, fp
10b04     0C 4E 85 F1 | 	sub	fp, #12
10b08     7C C8 B0 FD | 	call	#__system___float_fromuns
10b0c     FD 14 02 F6 | 	mov	arg02, result1
10b10     10 13 02 F6 | 	mov	arg01, local02
10b14     01 16 06 F6 | 	mov	arg03, #1
10b18     A4 D0 B0 FD | 	call	#__system___float_cmp
10b1c     00 FA 55 F2 | 	cmps	result1, #0 wc
10b20     00 1E 26 C6 |  if_b	not	local01, #0
10b24     A7 1E 62 FC | 	wrlong	local01, fp
10b28     E8 02 90 FD | 	jmp	#LR__1293
10b2c                 | LR__1283
10b2c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
10b2c     08 4E 05 F1 | 	add	fp, #8
10b30     A7 1E 02 FB | 	rdlong	local01, fp
10b34     08 4E 85 F1 | 	sub	fp, #8
10b38     1C 1E 0E F2 | 	cmp	local01, #28 wz
10b3c     14 4E 05 A1 |  if_e	add	fp, #20
10b40     A7 24 02 AB |  if_e	rdlong	local04, fp
10b44     14 4E 85 A1 |  if_e	sub	fp, #20
10b48     12 23 02 A6 |  if_e	mov	local03, local04
10b4c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10b50     44 00 90 5D |  if_ne	jmp	#LR__1284
10b54     00 1E 06 F6 | 	mov	local01, #0
10b58     A7 12 02 FB | 	rdlong	arg01, fp
10b5c     09 13 52 F6 | 	abs	arg01, arg01 wc
10b60     1F 26 C6 C9 |  if_b	decod	local05, #31
10b64     00 26 06 36 |  if_ae	mov	local05, #0
10b68     1C C8 B0 FD | 	call	#__system___float_fromuns
10b6c     13 FB 61 F5 | 	xor	result1, local05
10b70     FD 12 02 F6 | 	mov	arg01, result1
10b74     0C 4E 05 F1 | 	add	fp, #12
10b78     A7 14 02 FB | 	rdlong	arg02, fp
10b7c     0C 4E 85 F1 | 	sub	fp, #12
10b80     01 16 06 F6 | 	mov	arg03, #1
10b84     38 D0 B0 FD | 	call	#__system___float_cmp
10b88     00 FA 55 F2 | 	cmps	result1, #0 wc
10b8c     00 1E 26 C6 |  if_b	not	local01, #0
10b90     A7 1E 62 FC | 	wrlong	local01, fp
10b94     7C 02 90 FD | 	jmp	#LR__1293
10b98                 | LR__1284
10b98                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
10b98     08 4E 05 F1 | 	add	fp, #8
10b9c     A7 1E 02 FB | 	rdlong	local01, fp
10ba0     08 4E 85 F1 | 	sub	fp, #8
10ba4     1C 1E 0E F2 | 	cmp	local01, #28 wz
10ba8     14 4E 05 A1 |  if_e	add	fp, #20
10bac     A7 24 02 AB |  if_e	rdlong	local04, fp
10bb0     14 4E 85 A1 |  if_e	sub	fp, #20
10bb4     12 23 02 A6 |  if_e	mov	local03, local04
10bb8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10bbc     20 00 90 5D |  if_ne	jmp	#LR__1285
10bc0     A7 20 02 FB | 	rdlong	local02, fp
10bc4     0C 4E 05 F1 | 	add	fp, #12
10bc8     A7 22 02 FB | 	rdlong	local03, fp
10bcc     0C 4E 85 F1 | 	sub	fp, #12
10bd0     11 21 52 F2 | 	cmps	local02, local03 wc
10bd4     0F 1F A2 F1 | 	subx	local01, local01
10bd8     A7 1E 62 FC | 	wrlong	local01, fp
10bdc     34 02 90 FD | 	jmp	#LR__1293
10be0                 | LR__1285
10be0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
10be0     08 4E 05 F1 | 	add	fp, #8
10be4     A7 1E 02 FB | 	rdlong	local01, fp
10be8     08 4E 85 F1 | 	sub	fp, #8
10bec     1C 1E 0E F2 | 	cmp	local01, #28 wz
10bf0     14 4E 05 A1 |  if_e	add	fp, #20
10bf4     A7 24 02 AB |  if_e	rdlong	local04, fp
10bf8     14 4E 85 A1 |  if_e	sub	fp, #20
10bfc     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
10c00     20 00 90 5D |  if_ne	jmp	#LR__1286
10c04     A7 20 02 FB | 	rdlong	local02, fp
10c08     0C 4E 05 F1 | 	add	fp, #12
10c0c     A7 22 02 FB | 	rdlong	local03, fp
10c10     0C 4E 85 F1 | 	sub	fp, #12
10c14     11 21 52 F2 | 	cmps	local02, local03 wc
10c18     0F 1F A2 F1 | 	subx	local01, local01
10c1c     A7 1E 62 FC | 	wrlong	local01, fp
10c20     F0 01 90 FD | 	jmp	#LR__1293
10c24                 | LR__1286
10c24                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
10c24     08 4E 05 F1 | 	add	fp, #8
10c28     A7 1E 02 FB | 	rdlong	local01, fp
10c2c     08 4E 85 F1 | 	sub	fp, #8
10c30     1D 1E 0E F2 | 	cmp	local01, #29 wz
10c34     14 4E 05 A1 |  if_e	add	fp, #20
10c38     A7 22 02 AB |  if_e	rdlong	local03, fp
10c3c     14 4E 85 A1 |  if_e	sub	fp, #20
10c40     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10c44     34 00 90 5D |  if_ne	jmp	#LR__1287
10c48     00 1E 06 F6 | 	mov	local01, #0
10c4c     A7 12 02 FB | 	rdlong	arg01, fp
10c50     34 C7 B0 FD | 	call	#__system___float_fromuns
10c54     FD 12 02 F6 | 	mov	arg01, result1
10c58     0C 4E 05 F1 | 	add	fp, #12
10c5c     A7 14 02 FB | 	rdlong	arg02, fp
10c60     0C 4E 85 F1 | 	sub	fp, #12
10c64     01 16 06 F6 | 	mov	arg03, #1
10c68     54 CF B0 FD | 	call	#__system___float_cmp
10c6c     00 FA 55 F2 | 	cmps	result1, #0 wc
10c70     00 1E 26 C6 |  if_b	not	local01, #0
10c74     A7 1E 62 FC | 	wrlong	local01, fp
10c78     98 01 90 FD | 	jmp	#LR__1293
10c7c                 | LR__1287
10c7c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
10c7c     08 4E 05 F1 | 	add	fp, #8
10c80     A7 1E 02 FB | 	rdlong	local01, fp
10c84     08 4E 85 F1 | 	sub	fp, #8
10c88     1D 1E 0E F2 | 	cmp	local01, #29 wz
10c8c     14 4E 05 A1 |  if_e	add	fp, #20
10c90     A7 22 02 AB |  if_e	rdlong	local03, fp
10c94     14 4E 85 A1 |  if_e	sub	fp, #20
10c98     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10c9c     20 00 90 5D |  if_ne	jmp	#LR__1288
10ca0     A7 20 02 FB | 	rdlong	local02, fp
10ca4     0C 4E 05 F1 | 	add	fp, #12
10ca8     A7 22 02 FB | 	rdlong	local03, fp
10cac     0C 4E 85 F1 | 	sub	fp, #12
10cb0     11 21 52 F2 | 	cmps	local02, local03 wc
10cb4     0F 1F A2 F1 | 	subx	local01, local01
10cb8     A7 1E 62 FC | 	wrlong	local01, fp
10cbc     54 01 90 FD | 	jmp	#LR__1293
10cc0                 | LR__1288
10cc0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
10cc0     08 4E 05 F1 | 	add	fp, #8
10cc4     A7 1E 02 FB | 	rdlong	local01, fp
10cc8     08 4E 85 F1 | 	sub	fp, #8
10ccc     1D 1E 0E F2 | 	cmp	local01, #29 wz
10cd0     14 4E 05 A1 |  if_e	add	fp, #20
10cd4     A7 22 02 AB |  if_e	rdlong	local03, fp
10cd8     14 4E 85 A1 |  if_e	sub	fp, #20
10cdc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10ce0     20 00 90 5D |  if_ne	jmp	#LR__1289
10ce4     A7 20 02 FB | 	rdlong	local02, fp
10ce8     0C 4E 05 F1 | 	add	fp, #12
10cec     A7 22 02 FB | 	rdlong	local03, fp
10cf0     0C 4E 85 F1 | 	sub	fp, #12
10cf4     11 21 12 F2 | 	cmp	local02, local03 wc
10cf8     0F 1F A2 F1 | 	subx	local01, local01
10cfc     A7 1E 62 FC | 	wrlong	local01, fp
10d00     10 01 90 FD | 	jmp	#LR__1293
10d04                 | LR__1289
10d04                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
10d04     08 4E 05 F1 | 	add	fp, #8
10d08     A7 1E 02 FB | 	rdlong	local01, fp
10d0c     08 4E 85 F1 | 	sub	fp, #8
10d10     2B 1E 0E F2 | 	cmp	local01, #43 wz
10d14     14 4E 05 A1 |  if_e	add	fp, #20
10d18     A7 22 02 AB |  if_e	rdlong	local03, fp
10d1c     14 4E 85 A1 |  if_e	sub	fp, #20
10d20     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10d24     30 00 90 5D |  if_ne	jmp	#LR__1290
10d28     00 1E 06 F6 | 	mov	local01, #0
10d2c     A7 12 02 FB | 	rdlong	arg01, fp
10d30     E0 CC BF FD | 	call	#_convertstring
10d34     FD 12 02 F6 | 	mov	arg01, result1
10d38     0C 4E 05 F1 | 	add	fp, #12
10d3c     A7 14 02 FB | 	rdlong	arg02, fp
10d40     0C 4E 85 F1 | 	sub	fp, #12
10d44     48 9F B0 FD | 	call	#__system___string_cmp
10d48     00 FA 55 F2 | 	cmps	result1, #0 wc
10d4c     00 1E 26 C6 |  if_b	not	local01, #0
10d50     A7 1E 62 FC | 	wrlong	local01, fp
10d54     BC 00 90 FD | 	jmp	#LR__1293
10d58                 | LR__1290
10d58                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
10d58     08 4E 05 F1 | 	add	fp, #8
10d5c     A7 1E 02 FB | 	rdlong	local01, fp
10d60     08 4E 85 F1 | 	sub	fp, #8
10d64     1F 1E 0E F2 | 	cmp	local01, #31 wz
10d68     14 4E 05 A1 |  if_e	add	fp, #20
10d6c     A7 22 02 AB |  if_e	rdlong	local03, fp
10d70     14 4E 85 A1 |  if_e	sub	fp, #20
10d74     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10d78     34 00 90 5D |  if_ne	jmp	#LR__1291
10d7c     00 1E 06 F6 | 	mov	local01, #0
10d80     A7 20 02 FB | 	rdlong	local02, fp
10d84     0C 4E 05 F1 | 	add	fp, #12
10d88     A7 12 02 FB | 	rdlong	arg01, fp
10d8c     0C 4E 85 F1 | 	sub	fp, #12
10d90     80 CC BF FD | 	call	#_convertstring
10d94     FD 14 02 F6 | 	mov	arg02, result1
10d98     10 13 02 F6 | 	mov	arg01, local02
10d9c     F0 9E B0 FD | 	call	#__system___string_cmp
10da0     00 FA 55 F2 | 	cmps	result1, #0 wc
10da4     00 1E 26 C6 |  if_b	not	local01, #0
10da8     A7 1E 62 FC | 	wrlong	local01, fp
10dac     64 00 90 FD | 	jmp	#LR__1293
10db0                 | LR__1291
10db0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
10db0     08 4E 05 F1 | 	add	fp, #8
10db4     A7 1E 02 FB | 	rdlong	local01, fp
10db8     08 4E 85 F1 | 	sub	fp, #8
10dbc     2B 1E 0E F2 | 	cmp	local01, #43 wz
10dc0     14 4E 05 A1 |  if_e	add	fp, #20
10dc4     A7 22 02 AB |  if_e	rdlong	local03, fp
10dc8     14 4E 85 A1 |  if_e	sub	fp, #20
10dcc     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10dd0     3C 00 90 5D |  if_ne	jmp	#LR__1292
10dd4     00 1E 06 F6 | 	mov	local01, #0
10dd8     A7 12 02 FB | 	rdlong	arg01, fp
10ddc     34 CC BF FD | 	call	#_convertstring
10de0     FD 20 02 F6 | 	mov	local02, result1
10de4     0C 4E 05 F1 | 	add	fp, #12
10de8     A7 12 02 FB | 	rdlong	arg01, fp
10dec     0C 4E 85 F1 | 	sub	fp, #12
10df0     20 CC BF FD | 	call	#_convertstring
10df4     FD 14 02 F6 | 	mov	arg02, result1
10df8     10 13 02 F6 | 	mov	arg01, local02
10dfc     90 9E B0 FD | 	call	#__system___string_cmp
10e00     00 FA 55 F2 | 	cmps	result1, #0 wc
10e04     00 1E 26 C6 |  if_b	not	local01, #0
10e08     A7 1E 62 FC | 	wrlong	local01, fp
10e0c     04 00 90 FD | 	jmp	#LR__1293
10e10                 | LR__1292
10e10     A7 00 68 FC | 	wrlong	#0, fp
10e14                 | LR__1293
10e14     08 4E 05 F1 | 	add	fp, #8
10e18     A7 38 68 FC | 	wrlong	#28, fp
10e1c     08 4E 85 F1 | 	sub	fp, #8
10e20     A7 12 02 F6 | 	mov	arg01, fp
10e24     68 8D BF FD | 	call	#_push
10e28     A7 F0 03 F6 | 	mov	ptra, fp
10e2c     B2 00 A0 FD | 	call	#popregs_
10e30                 | _do_lt_ret
10e30     2D 00 64 FD | 	ret
10e34                 | 
10e34                 | ' 
10e34                 | ' sub do_ge
10e34                 | _do_ge
10e34     05 4A 05 F6 | 	mov	COUNT_, #5
10e38     A8 00 A0 FD | 	call	#pushregs_
10e3c     18 F0 07 F1 | 	add	ptra, #24
10e40     B4 8C BF FD | 	call	#_pop
10e44     FD 1E 02 F6 | 	mov	local01, result1
10e48     FE 20 02 F6 | 	mov	local02, result2
10e4c     FF 22 02 F6 | 	mov	local03, result3
10e50     0C 4E 05 F1 | 	add	fp, #12
10e54     A7 1E 62 FC | 	wrlong	local01, fp
10e58     04 4E 05 F1 | 	add	fp, #4
10e5c     A7 20 62 FC | 	wrlong	local02, fp
10e60     04 4E 05 F1 | 	add	fp, #4
10e64     A7 22 62 FC | 	wrlong	local03, fp
10e68     14 4E 85 F1 | 	sub	fp, #20
10e6c     88 8C BF FD | 	call	#_pop
10e70     FF 22 02 F6 | 	mov	local03, result3
10e74     A7 FA 61 FC | 	wrlong	result1, fp
10e78     04 4E 05 F1 | 	add	fp, #4
10e7c     A7 FC 61 FC | 	wrlong	result2, fp
10e80     04 4E 05 F1 | 	add	fp, #4
10e84     A7 22 62 FC | 	wrlong	local03, fp
10e88                 | ' t2=pop()
10e88                 | ' t1=pop()
10e88                 | ' 
10e88                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
10e88     08 4E 85 F1 | 	sub	fp, #8
10e8c     1F 22 0E F2 | 	cmp	local03, #31 wz
10e90     14 4E 05 A1 |  if_e	add	fp, #20
10e94     A7 24 02 AB |  if_e	rdlong	local04, fp
10e98     14 4E 85 A1 |  if_e	sub	fp, #20
10e9c     12 23 02 A6 |  if_e	mov	local03, local04
10ea0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10ea4     28 00 90 5D |  if_ne	jmp	#LR__1300
10ea8     00 1E 06 F6 | 	mov	local01, #0
10eac     A7 12 02 FB | 	rdlong	arg01, fp
10eb0     0C 4E 05 F1 | 	add	fp, #12
10eb4     A7 14 02 FB | 	rdlong	arg02, fp
10eb8     0C 4E 85 F1 | 	sub	fp, #12
10ebc     D0 9D B0 FD | 	call	#__system___string_cmp
10ec0     00 FA 55 F2 | 	cmps	result1, #0 wc
10ec4     00 1E 26 36 |  if_ae	not	local01, #0
10ec8     A7 1E 62 FC | 	wrlong	local01, fp
10ecc     1C 04 90 FD | 	jmp	#LR__1313
10ed0                 | LR__1300
10ed0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
10ed0     08 4E 05 F1 | 	add	fp, #8
10ed4     A7 1E 02 FB | 	rdlong	local01, fp
10ed8     08 4E 85 F1 | 	sub	fp, #8
10edc     1E 1E 0E F2 | 	cmp	local01, #30 wz
10ee0     14 4E 05 A1 |  if_e	add	fp, #20
10ee4     A7 24 02 AB |  if_e	rdlong	local04, fp
10ee8     14 4E 85 A1 |  if_e	sub	fp, #20
10eec     12 23 02 A6 |  if_e	mov	local03, local04
10ef0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10ef4     2C 00 90 5D |  if_ne	jmp	#LR__1301
10ef8     00 1E 06 F6 | 	mov	local01, #0
10efc     A7 12 02 FB | 	rdlong	arg01, fp
10f00     0C 4E 05 F1 | 	add	fp, #12
10f04     A7 14 02 FB | 	rdlong	arg02, fp
10f08     0C 4E 85 F1 | 	sub	fp, #12
10f0c     01 16 66 F6 | 	neg	arg03, #1
10f10     AC CC B0 FD | 	call	#__system___float_cmp
10f14     00 FA 55 F2 | 	cmps	result1, #0 wc
10f18     00 1E 26 36 |  if_ae	not	local01, #0
10f1c     A7 1E 62 FC | 	wrlong	local01, fp
10f20     C8 03 90 FD | 	jmp	#LR__1313
10f24                 | LR__1301
10f24                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
10f24     08 4E 05 F1 | 	add	fp, #8
10f28     A7 1E 02 FB | 	rdlong	local01, fp
10f2c     08 4E 85 F1 | 	sub	fp, #8
10f30     1E 1E 0E F2 | 	cmp	local01, #30 wz
10f34     14 4E 05 A1 |  if_e	add	fp, #20
10f38     A7 24 02 AB |  if_e	rdlong	local04, fp
10f3c     14 4E 85 A1 |  if_e	sub	fp, #20
10f40     12 23 02 A6 |  if_e	mov	local03, local04
10f44     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10f48     48 00 90 5D |  if_ne	jmp	#LR__1302
10f4c     00 1E 06 F6 | 	mov	local01, #0
10f50     A7 20 02 FB | 	rdlong	local02, fp
10f54     0C 4E 05 F1 | 	add	fp, #12
10f58     A7 12 02 FB | 	rdlong	arg01, fp
10f5c     0C 4E 85 F1 | 	sub	fp, #12
10f60     09 13 52 F6 | 	abs	arg01, arg01 wc
10f64     1F 26 C6 C9 |  if_b	decod	local05, #31
10f68     00 26 06 36 |  if_ae	mov	local05, #0
10f6c     18 C4 B0 FD | 	call	#__system___float_fromuns
10f70     13 FB 61 F5 | 	xor	result1, local05
10f74     FD 14 02 F6 | 	mov	arg02, result1
10f78     10 13 02 F6 | 	mov	arg01, local02
10f7c     01 16 66 F6 | 	neg	arg03, #1
10f80     3C CC B0 FD | 	call	#__system___float_cmp
10f84     00 FA 55 F2 | 	cmps	result1, #0 wc
10f88     00 1E 26 36 |  if_ae	not	local01, #0
10f8c     A7 1E 62 FC | 	wrlong	local01, fp
10f90     58 03 90 FD | 	jmp	#LR__1313
10f94                 | LR__1302
10f94                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
10f94     08 4E 05 F1 | 	add	fp, #8
10f98     A7 1E 02 FB | 	rdlong	local01, fp
10f9c     08 4E 85 F1 | 	sub	fp, #8
10fa0     1E 1E 0E F2 | 	cmp	local01, #30 wz
10fa4     14 4E 05 A1 |  if_e	add	fp, #20
10fa8     A7 24 02 AB |  if_e	rdlong	local04, fp
10fac     14 4E 85 A1 |  if_e	sub	fp, #20
10fb0     12 23 02 A6 |  if_e	mov	local03, local04
10fb4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10fb8     38 00 90 5D |  if_ne	jmp	#LR__1303
10fbc     00 1E 06 F6 | 	mov	local01, #0
10fc0     A7 20 02 FB | 	rdlong	local02, fp
10fc4     0C 4E 05 F1 | 	add	fp, #12
10fc8     A7 12 02 FB | 	rdlong	arg01, fp
10fcc     0C 4E 85 F1 | 	sub	fp, #12
10fd0     B4 C3 B0 FD | 	call	#__system___float_fromuns
10fd4     FD 14 02 F6 | 	mov	arg02, result1
10fd8     10 13 02 F6 | 	mov	arg01, local02
10fdc     01 16 66 F6 | 	neg	arg03, #1
10fe0     DC CB B0 FD | 	call	#__system___float_cmp
10fe4     00 FA 55 F2 | 	cmps	result1, #0 wc
10fe8     00 1E 26 36 |  if_ae	not	local01, #0
10fec     A7 1E 62 FC | 	wrlong	local01, fp
10ff0     F8 02 90 FD | 	jmp	#LR__1313
10ff4                 | LR__1303
10ff4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
10ff4     08 4E 05 F1 | 	add	fp, #8
10ff8     A7 1E 02 FB | 	rdlong	local01, fp
10ffc     08 4E 85 F1 | 	sub	fp, #8
11000     1C 1E 0E F2 | 	cmp	local01, #28 wz
11004     14 4E 05 A1 |  if_e	add	fp, #20
11008     A7 24 02 AB |  if_e	rdlong	local04, fp
1100c     14 4E 85 A1 |  if_e	sub	fp, #20
11010     12 23 02 A6 |  if_e	mov	local03, local04
11014     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11018     44 00 90 5D |  if_ne	jmp	#LR__1304
1101c     00 1E 06 F6 | 	mov	local01, #0
11020     A7 12 02 FB | 	rdlong	arg01, fp
11024     09 13 52 F6 | 	abs	arg01, arg01 wc
11028     1F 26 C6 C9 |  if_b	decod	local05, #31
1102c     00 26 06 36 |  if_ae	mov	local05, #0
11030     54 C3 B0 FD | 	call	#__system___float_fromuns
11034     13 FB 61 F5 | 	xor	result1, local05
11038     FD 12 02 F6 | 	mov	arg01, result1
1103c     0C 4E 05 F1 | 	add	fp, #12
11040     A7 14 02 FB | 	rdlong	arg02, fp
11044     0C 4E 85 F1 | 	sub	fp, #12
11048     01 16 66 F6 | 	neg	arg03, #1
1104c     70 CB B0 FD | 	call	#__system___float_cmp
11050     00 FA 55 F2 | 	cmps	result1, #0 wc
11054     00 1E 26 36 |  if_ae	not	local01, #0
11058     A7 1E 62 FC | 	wrlong	local01, fp
1105c     8C 02 90 FD | 	jmp	#LR__1313
11060                 | LR__1304
11060                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
11060     08 4E 05 F1 | 	add	fp, #8
11064     A7 1E 02 FB | 	rdlong	local01, fp
11068     08 4E 85 F1 | 	sub	fp, #8
1106c     1C 1E 0E F2 | 	cmp	local01, #28 wz
11070     14 4E 05 A1 |  if_e	add	fp, #20
11074     A7 24 02 AB |  if_e	rdlong	local04, fp
11078     14 4E 85 A1 |  if_e	sub	fp, #20
1107c     12 23 02 A6 |  if_e	mov	local03, local04
11080     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11084     24 00 90 5D |  if_ne	jmp	#LR__1305
11088     00 1E 06 F6 | 	mov	local01, #0
1108c     A7 20 02 FB | 	rdlong	local02, fp
11090     0C 4E 05 F1 | 	add	fp, #12
11094     A7 22 02 FB | 	rdlong	local03, fp
11098     0C 4E 85 F1 | 	sub	fp, #12
1109c     11 21 52 F2 | 	cmps	local02, local03 wc
110a0     01 1E 66 36 |  if_ae	neg	local01, #1
110a4     A7 1E 62 FC | 	wrlong	local01, fp
110a8     40 02 90 FD | 	jmp	#LR__1313
110ac                 | LR__1305
110ac                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
110ac     08 4E 05 F1 | 	add	fp, #8
110b0     A7 1E 02 FB | 	rdlong	local01, fp
110b4     08 4E 85 F1 | 	sub	fp, #8
110b8     1C 1E 0E F2 | 	cmp	local01, #28 wz
110bc     14 4E 05 A1 |  if_e	add	fp, #20
110c0     A7 24 02 AB |  if_e	rdlong	local04, fp
110c4     14 4E 85 A1 |  if_e	sub	fp, #20
110c8     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
110cc     24 00 90 5D |  if_ne	jmp	#LR__1306
110d0     00 1E 06 F6 | 	mov	local01, #0
110d4     A7 20 02 FB | 	rdlong	local02, fp
110d8     0C 4E 05 F1 | 	add	fp, #12
110dc     A7 22 02 FB | 	rdlong	local03, fp
110e0     0C 4E 85 F1 | 	sub	fp, #12
110e4     11 21 52 F2 | 	cmps	local02, local03 wc
110e8     01 1E 66 36 |  if_ae	neg	local01, #1
110ec     A7 1E 62 FC | 	wrlong	local01, fp
110f0     F8 01 90 FD | 	jmp	#LR__1313
110f4                 | LR__1306
110f4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
110f4     08 4E 05 F1 | 	add	fp, #8
110f8     A7 1E 02 FB | 	rdlong	local01, fp
110fc     08 4E 85 F1 | 	sub	fp, #8
11100     1D 1E 0E F2 | 	cmp	local01, #29 wz
11104     14 4E 05 A1 |  if_e	add	fp, #20
11108     A7 22 02 AB |  if_e	rdlong	local03, fp
1110c     14 4E 85 A1 |  if_e	sub	fp, #20
11110     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11114     34 00 90 5D |  if_ne	jmp	#LR__1307
11118     00 1E 06 F6 | 	mov	local01, #0
1111c     A7 12 02 FB | 	rdlong	arg01, fp
11120     64 C2 B0 FD | 	call	#__system___float_fromuns
11124     FD 12 02 F6 | 	mov	arg01, result1
11128     0C 4E 05 F1 | 	add	fp, #12
1112c     A7 14 02 FB | 	rdlong	arg02, fp
11130     0C 4E 85 F1 | 	sub	fp, #12
11134     01 16 66 F6 | 	neg	arg03, #1
11138     84 CA B0 FD | 	call	#__system___float_cmp
1113c     00 FA 55 F2 | 	cmps	result1, #0 wc
11140     00 1E 26 36 |  if_ae	not	local01, #0
11144     A7 1E 62 FC | 	wrlong	local01, fp
11148     A0 01 90 FD | 	jmp	#LR__1313
1114c                 | LR__1307
1114c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
1114c     08 4E 05 F1 | 	add	fp, #8
11150     A7 1E 02 FB | 	rdlong	local01, fp
11154     08 4E 85 F1 | 	sub	fp, #8
11158     1D 1E 0E F2 | 	cmp	local01, #29 wz
1115c     14 4E 05 A1 |  if_e	add	fp, #20
11160     A7 22 02 AB |  if_e	rdlong	local03, fp
11164     14 4E 85 A1 |  if_e	sub	fp, #20
11168     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1116c     24 00 90 5D |  if_ne	jmp	#LR__1308
11170     00 1E 06 F6 | 	mov	local01, #0
11174     A7 20 02 FB | 	rdlong	local02, fp
11178     0C 4E 05 F1 | 	add	fp, #12
1117c     A7 22 02 FB | 	rdlong	local03, fp
11180     0C 4E 85 F1 | 	sub	fp, #12
11184     11 21 52 F2 | 	cmps	local02, local03 wc
11188     01 1E 66 36 |  if_ae	neg	local01, #1
1118c     A7 1E 62 FC | 	wrlong	local01, fp
11190     58 01 90 FD | 	jmp	#LR__1313
11194                 | LR__1308
11194                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
11194     08 4E 05 F1 | 	add	fp, #8
11198     A7 1E 02 FB | 	rdlong	local01, fp
1119c     08 4E 85 F1 | 	sub	fp, #8
111a0     1D 1E 0E F2 | 	cmp	local01, #29 wz
111a4     14 4E 05 A1 |  if_e	add	fp, #20
111a8     A7 22 02 AB |  if_e	rdlong	local03, fp
111ac     14 4E 85 A1 |  if_e	sub	fp, #20
111b0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
111b4     24 00 90 5D |  if_ne	jmp	#LR__1309
111b8     00 1E 06 F6 | 	mov	local01, #0
111bc     A7 20 02 FB | 	rdlong	local02, fp
111c0     0C 4E 05 F1 | 	add	fp, #12
111c4     A7 22 02 FB | 	rdlong	local03, fp
111c8     0C 4E 85 F1 | 	sub	fp, #12
111cc     11 21 12 F2 | 	cmp	local02, local03 wc
111d0     01 1E 66 36 |  if_ae	neg	local01, #1
111d4     A7 1E 62 FC | 	wrlong	local01, fp
111d8     10 01 90 FD | 	jmp	#LR__1313
111dc                 | LR__1309
111dc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
111dc     08 4E 05 F1 | 	add	fp, #8
111e0     A7 1E 02 FB | 	rdlong	local01, fp
111e4     08 4E 85 F1 | 	sub	fp, #8
111e8     2B 1E 0E F2 | 	cmp	local01, #43 wz
111ec     14 4E 05 A1 |  if_e	add	fp, #20
111f0     A7 22 02 AB |  if_e	rdlong	local03, fp
111f4     14 4E 85 A1 |  if_e	sub	fp, #20
111f8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
111fc     30 00 90 5D |  if_ne	jmp	#LR__1310
11200     00 1E 06 F6 | 	mov	local01, #0
11204     A7 12 02 FB | 	rdlong	arg01, fp
11208     08 C8 BF FD | 	call	#_convertstring
1120c     FD 12 02 F6 | 	mov	arg01, result1
11210     0C 4E 05 F1 | 	add	fp, #12
11214     A7 14 02 FB | 	rdlong	arg02, fp
11218     0C 4E 85 F1 | 	sub	fp, #12
1121c     70 9A B0 FD | 	call	#__system___string_cmp
11220     00 FA 55 F2 | 	cmps	result1, #0 wc
11224     00 1E 26 36 |  if_ae	not	local01, #0
11228     A7 1E 62 FC | 	wrlong	local01, fp
1122c     BC 00 90 FD | 	jmp	#LR__1313
11230                 | LR__1310
11230                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
11230     08 4E 05 F1 | 	add	fp, #8
11234     A7 1E 02 FB | 	rdlong	local01, fp
11238     08 4E 85 F1 | 	sub	fp, #8
1123c     1F 1E 0E F2 | 	cmp	local01, #31 wz
11240     14 4E 05 A1 |  if_e	add	fp, #20
11244     A7 22 02 AB |  if_e	rdlong	local03, fp
11248     14 4E 85 A1 |  if_e	sub	fp, #20
1124c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11250     34 00 90 5D |  if_ne	jmp	#LR__1311
11254     00 1E 06 F6 | 	mov	local01, #0
11258     A7 20 02 FB | 	rdlong	local02, fp
1125c     0C 4E 05 F1 | 	add	fp, #12
11260     A7 12 02 FB | 	rdlong	arg01, fp
11264     0C 4E 85 F1 | 	sub	fp, #12
11268     A8 C7 BF FD | 	call	#_convertstring
1126c     FD 14 02 F6 | 	mov	arg02, result1
11270     10 13 02 F6 | 	mov	arg01, local02
11274     18 9A B0 FD | 	call	#__system___string_cmp
11278     00 FA 55 F2 | 	cmps	result1, #0 wc
1127c     00 1E 26 36 |  if_ae	not	local01, #0
11280     A7 1E 62 FC | 	wrlong	local01, fp
11284     64 00 90 FD | 	jmp	#LR__1313
11288                 | LR__1311
11288                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
11288     08 4E 05 F1 | 	add	fp, #8
1128c     A7 1E 02 FB | 	rdlong	local01, fp
11290     08 4E 85 F1 | 	sub	fp, #8
11294     2B 1E 0E F2 | 	cmp	local01, #43 wz
11298     14 4E 05 A1 |  if_e	add	fp, #20
1129c     A7 22 02 AB |  if_e	rdlong	local03, fp
112a0     14 4E 85 A1 |  if_e	sub	fp, #20
112a4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
112a8     3C 00 90 5D |  if_ne	jmp	#LR__1312
112ac     00 1E 06 F6 | 	mov	local01, #0
112b0     A7 12 02 FB | 	rdlong	arg01, fp
112b4     5C C7 BF FD | 	call	#_convertstring
112b8     FD 20 02 F6 | 	mov	local02, result1
112bc     0C 4E 05 F1 | 	add	fp, #12
112c0     A7 12 02 FB | 	rdlong	arg01, fp
112c4     0C 4E 85 F1 | 	sub	fp, #12
112c8     48 C7 BF FD | 	call	#_convertstring
112cc     FD 14 02 F6 | 	mov	arg02, result1
112d0     10 13 02 F6 | 	mov	arg01, local02
112d4     B8 99 B0 FD | 	call	#__system___string_cmp
112d8     00 FA 55 F2 | 	cmps	result1, #0 wc
112dc     00 1E 26 36 |  if_ae	not	local01, #0
112e0     A7 1E 62 FC | 	wrlong	local01, fp
112e4     04 00 90 FD | 	jmp	#LR__1313
112e8                 | LR__1312
112e8     A7 00 68 FC | 	wrlong	#0, fp
112ec                 | LR__1313
112ec     08 4E 05 F1 | 	add	fp, #8
112f0     A7 38 68 FC | 	wrlong	#28, fp
112f4     08 4E 85 F1 | 	sub	fp, #8
112f8     A7 12 02 F6 | 	mov	arg01, fp
112fc     90 88 BF FD | 	call	#_push
11300     A7 F0 03 F6 | 	mov	ptra, fp
11304     B2 00 A0 FD | 	call	#popregs_
11308                 | _do_ge_ret
11308     2D 00 64 FD | 	ret
1130c                 | 
1130c                 | ' 
1130c                 | ' sub do_le
1130c                 | _do_le
1130c     05 4A 05 F6 | 	mov	COUNT_, #5
11310     A8 00 A0 FD | 	call	#pushregs_
11314     18 F0 07 F1 | 	add	ptra, #24
11318     DC 87 BF FD | 	call	#_pop
1131c     FD 1E 02 F6 | 	mov	local01, result1
11320     FE 20 02 F6 | 	mov	local02, result2
11324     FF 22 02 F6 | 	mov	local03, result3
11328     0C 4E 05 F1 | 	add	fp, #12
1132c     A7 1E 62 FC | 	wrlong	local01, fp
11330     04 4E 05 F1 | 	add	fp, #4
11334     A7 20 62 FC | 	wrlong	local02, fp
11338     04 4E 05 F1 | 	add	fp, #4
1133c     A7 22 62 FC | 	wrlong	local03, fp
11340     14 4E 85 F1 | 	sub	fp, #20
11344     B0 87 BF FD | 	call	#_pop
11348     FF 22 02 F6 | 	mov	local03, result3
1134c     A7 FA 61 FC | 	wrlong	result1, fp
11350     04 4E 05 F1 | 	add	fp, #4
11354     A7 FC 61 FC | 	wrlong	result2, fp
11358     04 4E 05 F1 | 	add	fp, #4
1135c     A7 22 62 FC | 	wrlong	local03, fp
11360                 | ' t2=pop()
11360                 | ' t1=pop()
11360                 | ' 
11360                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
11360     08 4E 85 F1 | 	sub	fp, #8
11364     1F 22 0E F2 | 	cmp	local03, #31 wz
11368     14 4E 05 A1 |  if_e	add	fp, #20
1136c     A7 24 02 AB |  if_e	rdlong	local04, fp
11370     14 4E 85 A1 |  if_e	sub	fp, #20
11374     12 23 02 A6 |  if_e	mov	local03, local04
11378     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1137c     28 00 90 5D |  if_ne	jmp	#LR__1320
11380     00 1E 06 F6 | 	mov	local01, #0
11384     A7 12 02 FB | 	rdlong	arg01, fp
11388     0C 4E 05 F1 | 	add	fp, #12
1138c     A7 14 02 FB | 	rdlong	arg02, fp
11390     0C 4E 85 F1 | 	sub	fp, #12
11394     F8 98 B0 FD | 	call	#__system___string_cmp
11398     01 FA 55 F2 | 	cmps	result1, #1 wc
1139c     00 1E 26 C6 |  if_b	not	local01, #0
113a0     A7 1E 62 FC | 	wrlong	local01, fp
113a4     1C 04 90 FD | 	jmp	#LR__1333
113a8                 | LR__1320
113a8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
113a8     08 4E 05 F1 | 	add	fp, #8
113ac     A7 1E 02 FB | 	rdlong	local01, fp
113b0     08 4E 85 F1 | 	sub	fp, #8
113b4     1E 1E 0E F2 | 	cmp	local01, #30 wz
113b8     14 4E 05 A1 |  if_e	add	fp, #20
113bc     A7 24 02 AB |  if_e	rdlong	local04, fp
113c0     14 4E 85 A1 |  if_e	sub	fp, #20
113c4     12 23 02 A6 |  if_e	mov	local03, local04
113c8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
113cc     2C 00 90 5D |  if_ne	jmp	#LR__1321
113d0     00 1E 06 F6 | 	mov	local01, #0
113d4     A7 12 02 FB | 	rdlong	arg01, fp
113d8     0C 4E 05 F1 | 	add	fp, #12
113dc     A7 14 02 FB | 	rdlong	arg02, fp
113e0     0C 4E 85 F1 | 	sub	fp, #12
113e4     01 16 06 F6 | 	mov	arg03, #1
113e8     D4 C7 B0 FD | 	call	#__system___float_cmp
113ec     01 FA 55 F2 | 	cmps	result1, #1 wc
113f0     00 1E 26 C6 |  if_b	not	local01, #0
113f4     A7 1E 62 FC | 	wrlong	local01, fp
113f8     C8 03 90 FD | 	jmp	#LR__1333
113fc                 | LR__1321
113fc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
113fc     08 4E 05 F1 | 	add	fp, #8
11400     A7 1E 02 FB | 	rdlong	local01, fp
11404     08 4E 85 F1 | 	sub	fp, #8
11408     1E 1E 0E F2 | 	cmp	local01, #30 wz
1140c     14 4E 05 A1 |  if_e	add	fp, #20
11410     A7 24 02 AB |  if_e	rdlong	local04, fp
11414     14 4E 85 A1 |  if_e	sub	fp, #20
11418     12 23 02 A6 |  if_e	mov	local03, local04
1141c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11420     48 00 90 5D |  if_ne	jmp	#LR__1322
11424     00 1E 06 F6 | 	mov	local01, #0
11428     A7 20 02 FB | 	rdlong	local02, fp
1142c     0C 4E 05 F1 | 	add	fp, #12
11430     A7 12 02 FB | 	rdlong	arg01, fp
11434     0C 4E 85 F1 | 	sub	fp, #12
11438     09 13 52 F6 | 	abs	arg01, arg01 wc
1143c     1F 26 C6 C9 |  if_b	decod	local05, #31
11440     00 26 06 36 |  if_ae	mov	local05, #0
11444     40 BF B0 FD | 	call	#__system___float_fromuns
11448     13 FB 61 F5 | 	xor	result1, local05
1144c     FD 14 02 F6 | 	mov	arg02, result1
11450     10 13 02 F6 | 	mov	arg01, local02
11454     01 16 06 F6 | 	mov	arg03, #1
11458     64 C7 B0 FD | 	call	#__system___float_cmp
1145c     01 FA 55 F2 | 	cmps	result1, #1 wc
11460     00 1E 26 C6 |  if_b	not	local01, #0
11464     A7 1E 62 FC | 	wrlong	local01, fp
11468     58 03 90 FD | 	jmp	#LR__1333
1146c                 | LR__1322
1146c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
1146c     08 4E 05 F1 | 	add	fp, #8
11470     A7 1E 02 FB | 	rdlong	local01, fp
11474     08 4E 85 F1 | 	sub	fp, #8
11478     1E 1E 0E F2 | 	cmp	local01, #30 wz
1147c     14 4E 05 A1 |  if_e	add	fp, #20
11480     A7 24 02 AB |  if_e	rdlong	local04, fp
11484     14 4E 85 A1 |  if_e	sub	fp, #20
11488     12 23 02 A6 |  if_e	mov	local03, local04
1148c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11490     38 00 90 5D |  if_ne	jmp	#LR__1323
11494     00 1E 06 F6 | 	mov	local01, #0
11498     A7 20 02 FB | 	rdlong	local02, fp
1149c     0C 4E 05 F1 | 	add	fp, #12
114a0     A7 12 02 FB | 	rdlong	arg01, fp
114a4     0C 4E 85 F1 | 	sub	fp, #12
114a8     DC BE B0 FD | 	call	#__system___float_fromuns
114ac     FD 14 02 F6 | 	mov	arg02, result1
114b0     10 13 02 F6 | 	mov	arg01, local02
114b4     01 16 06 F6 | 	mov	arg03, #1
114b8     04 C7 B0 FD | 	call	#__system___float_cmp
114bc     01 FA 55 F2 | 	cmps	result1, #1 wc
114c0     00 1E 26 C6 |  if_b	not	local01, #0
114c4     A7 1E 62 FC | 	wrlong	local01, fp
114c8     F8 02 90 FD | 	jmp	#LR__1333
114cc                 | LR__1323
114cc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
114cc     08 4E 05 F1 | 	add	fp, #8
114d0     A7 1E 02 FB | 	rdlong	local01, fp
114d4     08 4E 85 F1 | 	sub	fp, #8
114d8     1C 1E 0E F2 | 	cmp	local01, #28 wz
114dc     14 4E 05 A1 |  if_e	add	fp, #20
114e0     A7 24 02 AB |  if_e	rdlong	local04, fp
114e4     14 4E 85 A1 |  if_e	sub	fp, #20
114e8     12 23 02 A6 |  if_e	mov	local03, local04
114ec     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
114f0     44 00 90 5D |  if_ne	jmp	#LR__1324
114f4     00 1E 06 F6 | 	mov	local01, #0
114f8     A7 12 02 FB | 	rdlong	arg01, fp
114fc     09 13 52 F6 | 	abs	arg01, arg01 wc
11500     1F 26 C6 C9 |  if_b	decod	local05, #31
11504     00 26 06 36 |  if_ae	mov	local05, #0
11508     7C BE B0 FD | 	call	#__system___float_fromuns
1150c     13 FB 61 F5 | 	xor	result1, local05
11510     FD 12 02 F6 | 	mov	arg01, result1
11514     0C 4E 05 F1 | 	add	fp, #12
11518     A7 14 02 FB | 	rdlong	arg02, fp
1151c     0C 4E 85 F1 | 	sub	fp, #12
11520     01 16 06 F6 | 	mov	arg03, #1
11524     98 C6 B0 FD | 	call	#__system___float_cmp
11528     01 FA 55 F2 | 	cmps	result1, #1 wc
1152c     00 1E 26 C6 |  if_b	not	local01, #0
11530     A7 1E 62 FC | 	wrlong	local01, fp
11534     8C 02 90 FD | 	jmp	#LR__1333
11538                 | LR__1324
11538                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
11538     08 4E 05 F1 | 	add	fp, #8
1153c     A7 1E 02 FB | 	rdlong	local01, fp
11540     08 4E 85 F1 | 	sub	fp, #8
11544     1C 1E 0E F2 | 	cmp	local01, #28 wz
11548     14 4E 05 A1 |  if_e	add	fp, #20
1154c     A7 24 02 AB |  if_e	rdlong	local04, fp
11550     14 4E 85 A1 |  if_e	sub	fp, #20
11554     12 23 02 A6 |  if_e	mov	local03, local04
11558     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1155c     24 00 90 5D |  if_ne	jmp	#LR__1325
11560     00 1E 06 F6 | 	mov	local01, #0
11564     A7 20 02 FB | 	rdlong	local02, fp
11568     0C 4E 05 F1 | 	add	fp, #12
1156c     A7 22 02 FB | 	rdlong	local03, fp
11570     0C 4E 85 F1 | 	sub	fp, #12
11574     11 21 5A F2 | 	cmps	local02, local03 wcz
11578     01 1E 66 E6 |  if_be	neg	local01, #1
1157c     A7 1E 62 FC | 	wrlong	local01, fp
11580     40 02 90 FD | 	jmp	#LR__1333
11584                 | LR__1325
11584                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
11584     08 4E 05 F1 | 	add	fp, #8
11588     A7 1E 02 FB | 	rdlong	local01, fp
1158c     08 4E 85 F1 | 	sub	fp, #8
11590     1C 1E 0E F2 | 	cmp	local01, #28 wz
11594     14 4E 05 A1 |  if_e	add	fp, #20
11598     A7 24 02 AB |  if_e	rdlong	local04, fp
1159c     14 4E 85 A1 |  if_e	sub	fp, #20
115a0     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
115a4     24 00 90 5D |  if_ne	jmp	#LR__1326
115a8     00 1E 06 F6 | 	mov	local01, #0
115ac     A7 20 02 FB | 	rdlong	local02, fp
115b0     0C 4E 05 F1 | 	add	fp, #12
115b4     A7 22 02 FB | 	rdlong	local03, fp
115b8     0C 4E 85 F1 | 	sub	fp, #12
115bc     11 21 5A F2 | 	cmps	local02, local03 wcz
115c0     01 1E 66 E6 |  if_be	neg	local01, #1
115c4     A7 1E 62 FC | 	wrlong	local01, fp
115c8     F8 01 90 FD | 	jmp	#LR__1333
115cc                 | LR__1326
115cc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
115cc     08 4E 05 F1 | 	add	fp, #8
115d0     A7 1E 02 FB | 	rdlong	local01, fp
115d4     08 4E 85 F1 | 	sub	fp, #8
115d8     1D 1E 0E F2 | 	cmp	local01, #29 wz
115dc     14 4E 05 A1 |  if_e	add	fp, #20
115e0     A7 22 02 AB |  if_e	rdlong	local03, fp
115e4     14 4E 85 A1 |  if_e	sub	fp, #20
115e8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
115ec     34 00 90 5D |  if_ne	jmp	#LR__1327
115f0     00 1E 06 F6 | 	mov	local01, #0
115f4     A7 12 02 FB | 	rdlong	arg01, fp
115f8     8C BD B0 FD | 	call	#__system___float_fromuns
115fc     FD 12 02 F6 | 	mov	arg01, result1
11600     0C 4E 05 F1 | 	add	fp, #12
11604     A7 14 02 FB | 	rdlong	arg02, fp
11608     0C 4E 85 F1 | 	sub	fp, #12
1160c     01 16 06 F6 | 	mov	arg03, #1
11610     AC C5 B0 FD | 	call	#__system___float_cmp
11614     01 FA 55 F2 | 	cmps	result1, #1 wc
11618     00 1E 26 C6 |  if_b	not	local01, #0
1161c     A7 1E 62 FC | 	wrlong	local01, fp
11620     A0 01 90 FD | 	jmp	#LR__1333
11624                 | LR__1327
11624                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
11624     08 4E 05 F1 | 	add	fp, #8
11628     A7 1E 02 FB | 	rdlong	local01, fp
1162c     08 4E 85 F1 | 	sub	fp, #8
11630     1D 1E 0E F2 | 	cmp	local01, #29 wz
11634     14 4E 05 A1 |  if_e	add	fp, #20
11638     A7 22 02 AB |  if_e	rdlong	local03, fp
1163c     14 4E 85 A1 |  if_e	sub	fp, #20
11640     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11644     24 00 90 5D |  if_ne	jmp	#LR__1328
11648     00 1E 06 F6 | 	mov	local01, #0
1164c     A7 20 02 FB | 	rdlong	local02, fp
11650     0C 4E 05 F1 | 	add	fp, #12
11654     A7 22 02 FB | 	rdlong	local03, fp
11658     0C 4E 85 F1 | 	sub	fp, #12
1165c     11 21 5A F2 | 	cmps	local02, local03 wcz
11660     01 1E 66 E6 |  if_be	neg	local01, #1
11664     A7 1E 62 FC | 	wrlong	local01, fp
11668     58 01 90 FD | 	jmp	#LR__1333
1166c                 | LR__1328
1166c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
1166c     08 4E 05 F1 | 	add	fp, #8
11670     A7 1E 02 FB | 	rdlong	local01, fp
11674     08 4E 85 F1 | 	sub	fp, #8
11678     1D 1E 0E F2 | 	cmp	local01, #29 wz
1167c     14 4E 05 A1 |  if_e	add	fp, #20
11680     A7 22 02 AB |  if_e	rdlong	local03, fp
11684     14 4E 85 A1 |  if_e	sub	fp, #20
11688     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1168c     24 00 90 5D |  if_ne	jmp	#LR__1329
11690     00 1E 06 F6 | 	mov	local01, #0
11694     A7 20 02 FB | 	rdlong	local02, fp
11698     0C 4E 05 F1 | 	add	fp, #12
1169c     A7 22 02 FB | 	rdlong	local03, fp
116a0     0C 4E 85 F1 | 	sub	fp, #12
116a4     11 21 1A F2 | 	cmp	local02, local03 wcz
116a8     01 1E 66 E6 |  if_be	neg	local01, #1
116ac     A7 1E 62 FC | 	wrlong	local01, fp
116b0     10 01 90 FD | 	jmp	#LR__1333
116b4                 | LR__1329
116b4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
116b4     08 4E 05 F1 | 	add	fp, #8
116b8     A7 1E 02 FB | 	rdlong	local01, fp
116bc     08 4E 85 F1 | 	sub	fp, #8
116c0     2B 1E 0E F2 | 	cmp	local01, #43 wz
116c4     14 4E 05 A1 |  if_e	add	fp, #20
116c8     A7 22 02 AB |  if_e	rdlong	local03, fp
116cc     14 4E 85 A1 |  if_e	sub	fp, #20
116d0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
116d4     30 00 90 5D |  if_ne	jmp	#LR__1330
116d8     00 1E 06 F6 | 	mov	local01, #0
116dc     A7 12 02 FB | 	rdlong	arg01, fp
116e0     30 C3 BF FD | 	call	#_convertstring
116e4     FD 12 02 F6 | 	mov	arg01, result1
116e8     0C 4E 05 F1 | 	add	fp, #12
116ec     A7 14 02 FB | 	rdlong	arg02, fp
116f0     0C 4E 85 F1 | 	sub	fp, #12
116f4     98 95 B0 FD | 	call	#__system___string_cmp
116f8     01 FA 55 F2 | 	cmps	result1, #1 wc
116fc     00 1E 26 C6 |  if_b	not	local01, #0
11700     A7 1E 62 FC | 	wrlong	local01, fp
11704     BC 00 90 FD | 	jmp	#LR__1333
11708                 | LR__1330
11708                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
11708     08 4E 05 F1 | 	add	fp, #8
1170c     A7 1E 02 FB | 	rdlong	local01, fp
11710     08 4E 85 F1 | 	sub	fp, #8
11714     1F 1E 0E F2 | 	cmp	local01, #31 wz
11718     14 4E 05 A1 |  if_e	add	fp, #20
1171c     A7 22 02 AB |  if_e	rdlong	local03, fp
11720     14 4E 85 A1 |  if_e	sub	fp, #20
11724     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11728     34 00 90 5D |  if_ne	jmp	#LR__1331
1172c     00 1E 06 F6 | 	mov	local01, #0
11730     A7 20 02 FB | 	rdlong	local02, fp
11734     0C 4E 05 F1 | 	add	fp, #12
11738     A7 12 02 FB | 	rdlong	arg01, fp
1173c     0C 4E 85 F1 | 	sub	fp, #12
11740     D0 C2 BF FD | 	call	#_convertstring
11744     FD 14 02 F6 | 	mov	arg02, result1
11748     10 13 02 F6 | 	mov	arg01, local02
1174c     40 95 B0 FD | 	call	#__system___string_cmp
11750     01 FA 55 F2 | 	cmps	result1, #1 wc
11754     00 1E 26 C6 |  if_b	not	local01, #0
11758     A7 1E 62 FC | 	wrlong	local01, fp
1175c     64 00 90 FD | 	jmp	#LR__1333
11760                 | LR__1331
11760                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
11760     08 4E 05 F1 | 	add	fp, #8
11764     A7 1E 02 FB | 	rdlong	local01, fp
11768     08 4E 85 F1 | 	sub	fp, #8
1176c     2B 1E 0E F2 | 	cmp	local01, #43 wz
11770     14 4E 05 A1 |  if_e	add	fp, #20
11774     A7 22 02 AB |  if_e	rdlong	local03, fp
11778     14 4E 85 A1 |  if_e	sub	fp, #20
1177c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11780     3C 00 90 5D |  if_ne	jmp	#LR__1332
11784     00 1E 06 F6 | 	mov	local01, #0
11788     A7 12 02 FB | 	rdlong	arg01, fp
1178c     84 C2 BF FD | 	call	#_convertstring
11790     FD 20 02 F6 | 	mov	local02, result1
11794     0C 4E 05 F1 | 	add	fp, #12
11798     A7 12 02 FB | 	rdlong	arg01, fp
1179c     0C 4E 85 F1 | 	sub	fp, #12
117a0     70 C2 BF FD | 	call	#_convertstring
117a4     FD 14 02 F6 | 	mov	arg02, result1
117a8     10 13 02 F6 | 	mov	arg01, local02
117ac     E0 94 B0 FD | 	call	#__system___string_cmp
117b0     01 FA 55 F2 | 	cmps	result1, #1 wc
117b4     00 1E 26 C6 |  if_b	not	local01, #0
117b8     A7 1E 62 FC | 	wrlong	local01, fp
117bc     04 00 90 FD | 	jmp	#LR__1333
117c0                 | LR__1332
117c0     A7 00 68 FC | 	wrlong	#0, fp
117c4                 | LR__1333
117c4     08 4E 05 F1 | 	add	fp, #8
117c8     A7 38 68 FC | 	wrlong	#28, fp
117cc     08 4E 85 F1 | 	sub	fp, #8
117d0     A7 12 02 F6 | 	mov	arg01, fp
117d4     B8 83 BF FD | 	call	#_push
117d8     A7 F0 03 F6 | 	mov	ptra, fp
117dc     B2 00 A0 FD | 	call	#popregs_
117e0                 | _do_le_ret
117e0     2D 00 64 FD | 	ret
117e4                 | 
117e4                 | ' 
117e4                 | ' 
117e4                 | ' sub do_ne
117e4                 | _do_ne
117e4     05 4A 05 F6 | 	mov	COUNT_, #5
117e8     A8 00 A0 FD | 	call	#pushregs_
117ec     18 F0 07 F1 | 	add	ptra, #24
117f0     04 83 BF FD | 	call	#_pop
117f4     FD 1E 02 F6 | 	mov	local01, result1
117f8     FE 20 02 F6 | 	mov	local02, result2
117fc     FF 22 02 F6 | 	mov	local03, result3
11800     0C 4E 05 F1 | 	add	fp, #12
11804     A7 1E 62 FC | 	wrlong	local01, fp
11808     04 4E 05 F1 | 	add	fp, #4
1180c     A7 20 62 FC | 	wrlong	local02, fp
11810     04 4E 05 F1 | 	add	fp, #4
11814     A7 22 62 FC | 	wrlong	local03, fp
11818     14 4E 85 F1 | 	sub	fp, #20
1181c     D8 82 BF FD | 	call	#_pop
11820     FF 22 02 F6 | 	mov	local03, result3
11824     A7 FA 61 FC | 	wrlong	result1, fp
11828     04 4E 05 F1 | 	add	fp, #4
1182c     A7 FC 61 FC | 	wrlong	result2, fp
11830     04 4E 05 F1 | 	add	fp, #4
11834     A7 22 62 FC | 	wrlong	local03, fp
11838                 | ' t2=pop()
11838                 | ' t1=pop()
11838                 | ' 
11838                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
11838     08 4E 85 F1 | 	sub	fp, #8
1183c     1F 22 0E F2 | 	cmp	local03, #31 wz
11840     14 4E 05 A1 |  if_e	add	fp, #20
11844     A7 24 02 AB |  if_e	rdlong	local04, fp
11848     14 4E 85 A1 |  if_e	sub	fp, #20
1184c     12 23 02 A6 |  if_e	mov	local03, local04
11850     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11854     28 00 90 5D |  if_ne	jmp	#LR__1340
11858     00 1E 06 F6 | 	mov	local01, #0
1185c     A7 12 02 FB | 	rdlong	arg01, fp
11860     0C 4E 05 F1 | 	add	fp, #12
11864     A7 14 02 FB | 	rdlong	arg02, fp
11868     0C 4E 85 F1 | 	sub	fp, #12
1186c     20 94 B0 FD | 	call	#__system___string_cmp
11870     00 FA 0D F2 | 	cmp	result1, #0 wz
11874     00 1E 26 56 |  if_ne	not	local01, #0
11878     A7 1E 62 FC | 	wrlong	local01, fp
1187c     1C 04 90 FD | 	jmp	#LR__1353
11880                 | LR__1340
11880                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
11880     08 4E 05 F1 | 	add	fp, #8
11884     A7 1E 02 FB | 	rdlong	local01, fp
11888     08 4E 85 F1 | 	sub	fp, #8
1188c     1E 1E 0E F2 | 	cmp	local01, #30 wz
11890     14 4E 05 A1 |  if_e	add	fp, #20
11894     A7 24 02 AB |  if_e	rdlong	local04, fp
11898     14 4E 85 A1 |  if_e	sub	fp, #20
1189c     12 23 02 A6 |  if_e	mov	local03, local04
118a0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
118a4     2C 00 90 5D |  if_ne	jmp	#LR__1341
118a8     00 1E 06 F6 | 	mov	local01, #0
118ac     A7 12 02 FB | 	rdlong	arg01, fp
118b0     0C 4E 05 F1 | 	add	fp, #12
118b4     A7 14 02 FB | 	rdlong	arg02, fp
118b8     0C 4E 85 F1 | 	sub	fp, #12
118bc     01 16 06 F6 | 	mov	arg03, #1
118c0     FC C2 B0 FD | 	call	#__system___float_cmp
118c4     00 FA 0D F2 | 	cmp	result1, #0 wz
118c8     00 1E 26 56 |  if_ne	not	local01, #0
118cc     A7 1E 62 FC | 	wrlong	local01, fp
118d0     C8 03 90 FD | 	jmp	#LR__1353
118d4                 | LR__1341
118d4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
118d4     08 4E 05 F1 | 	add	fp, #8
118d8     A7 1E 02 FB | 	rdlong	local01, fp
118dc     08 4E 85 F1 | 	sub	fp, #8
118e0     1E 1E 0E F2 | 	cmp	local01, #30 wz
118e4     14 4E 05 A1 |  if_e	add	fp, #20
118e8     A7 24 02 AB |  if_e	rdlong	local04, fp
118ec     14 4E 85 A1 |  if_e	sub	fp, #20
118f0     12 23 02 A6 |  if_e	mov	local03, local04
118f4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
118f8     48 00 90 5D |  if_ne	jmp	#LR__1342
118fc     00 1E 06 F6 | 	mov	local01, #0
11900     A7 20 02 FB | 	rdlong	local02, fp
11904     0C 4E 05 F1 | 	add	fp, #12
11908     A7 12 02 FB | 	rdlong	arg01, fp
1190c     0C 4E 85 F1 | 	sub	fp, #12
11910     09 13 52 F6 | 	abs	arg01, arg01 wc
11914     1F 26 C6 C9 |  if_b	decod	local05, #31
11918     00 26 06 36 |  if_ae	mov	local05, #0
1191c     68 BA B0 FD | 	call	#__system___float_fromuns
11920     13 FB 61 F5 | 	xor	result1, local05
11924     FD 14 02 F6 | 	mov	arg02, result1
11928     10 13 02 F6 | 	mov	arg01, local02
1192c     01 16 06 F6 | 	mov	arg03, #1
11930     8C C2 B0 FD | 	call	#__system___float_cmp
11934     00 FA 0D F2 | 	cmp	result1, #0 wz
11938     00 1E 26 56 |  if_ne	not	local01, #0
1193c     A7 1E 62 FC | 	wrlong	local01, fp
11940     58 03 90 FD | 	jmp	#LR__1353
11944                 | LR__1342
11944                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
11944     08 4E 05 F1 | 	add	fp, #8
11948     A7 1E 02 FB | 	rdlong	local01, fp
1194c     08 4E 85 F1 | 	sub	fp, #8
11950     1E 1E 0E F2 | 	cmp	local01, #30 wz
11954     14 4E 05 A1 |  if_e	add	fp, #20
11958     A7 24 02 AB |  if_e	rdlong	local04, fp
1195c     14 4E 85 A1 |  if_e	sub	fp, #20
11960     12 23 02 A6 |  if_e	mov	local03, local04
11964     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11968     38 00 90 5D |  if_ne	jmp	#LR__1343
1196c     00 1E 06 F6 | 	mov	local01, #0
11970     A7 20 02 FB | 	rdlong	local02, fp
11974     0C 4E 05 F1 | 	add	fp, #12
11978     A7 12 02 FB | 	rdlong	arg01, fp
1197c     0C 4E 85 F1 | 	sub	fp, #12
11980     04 BA B0 FD | 	call	#__system___float_fromuns
11984     FD 14 02 F6 | 	mov	arg02, result1
11988     10 13 02 F6 | 	mov	arg01, local02
1198c     01 16 06 F6 | 	mov	arg03, #1
11990     2C C2 B0 FD | 	call	#__system___float_cmp
11994     00 FA 0D F2 | 	cmp	result1, #0 wz
11998     00 1E 26 56 |  if_ne	not	local01, #0
1199c     A7 1E 62 FC | 	wrlong	local01, fp
119a0     F8 02 90 FD | 	jmp	#LR__1353
119a4                 | LR__1343
119a4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
119a4     08 4E 05 F1 | 	add	fp, #8
119a8     A7 1E 02 FB | 	rdlong	local01, fp
119ac     08 4E 85 F1 | 	sub	fp, #8
119b0     1C 1E 0E F2 | 	cmp	local01, #28 wz
119b4     14 4E 05 A1 |  if_e	add	fp, #20
119b8     A7 24 02 AB |  if_e	rdlong	local04, fp
119bc     14 4E 85 A1 |  if_e	sub	fp, #20
119c0     12 23 02 A6 |  if_e	mov	local03, local04
119c4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
119c8     44 00 90 5D |  if_ne	jmp	#LR__1344
119cc     00 1E 06 F6 | 	mov	local01, #0
119d0     A7 12 02 FB | 	rdlong	arg01, fp
119d4     09 13 52 F6 | 	abs	arg01, arg01 wc
119d8     1F 26 C6 C9 |  if_b	decod	local05, #31
119dc     00 26 06 36 |  if_ae	mov	local05, #0
119e0     A4 B9 B0 FD | 	call	#__system___float_fromuns
119e4     13 FB 61 F5 | 	xor	result1, local05
119e8     FD 12 02 F6 | 	mov	arg01, result1
119ec     0C 4E 05 F1 | 	add	fp, #12
119f0     A7 14 02 FB | 	rdlong	arg02, fp
119f4     0C 4E 85 F1 | 	sub	fp, #12
119f8     01 16 06 F6 | 	mov	arg03, #1
119fc     C0 C1 B0 FD | 	call	#__system___float_cmp
11a00     00 FA 0D F2 | 	cmp	result1, #0 wz
11a04     00 1E 26 56 |  if_ne	not	local01, #0
11a08     A7 1E 62 FC | 	wrlong	local01, fp
11a0c     8C 02 90 FD | 	jmp	#LR__1353
11a10                 | LR__1344
11a10                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
11a10     08 4E 05 F1 | 	add	fp, #8
11a14     A7 1E 02 FB | 	rdlong	local01, fp
11a18     08 4E 85 F1 | 	sub	fp, #8
11a1c     1C 1E 0E F2 | 	cmp	local01, #28 wz
11a20     14 4E 05 A1 |  if_e	add	fp, #20
11a24     A7 24 02 AB |  if_e	rdlong	local04, fp
11a28     14 4E 85 A1 |  if_e	sub	fp, #20
11a2c     12 23 02 A6 |  if_e	mov	local03, local04
11a30     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11a34     24 00 90 5D |  if_ne	jmp	#LR__1345
11a38     00 1E 06 F6 | 	mov	local01, #0
11a3c     A7 20 02 FB | 	rdlong	local02, fp
11a40     0C 4E 05 F1 | 	add	fp, #12
11a44     A7 22 02 FB | 	rdlong	local03, fp
11a48     0C 4E 85 F1 | 	sub	fp, #12
11a4c     11 21 0A F2 | 	cmp	local02, local03 wz
11a50     01 1E 66 56 |  if_ne	neg	local01, #1
11a54     A7 1E 62 FC | 	wrlong	local01, fp
11a58     40 02 90 FD | 	jmp	#LR__1353
11a5c                 | LR__1345
11a5c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
11a5c     08 4E 05 F1 | 	add	fp, #8
11a60     A7 1E 02 FB | 	rdlong	local01, fp
11a64     08 4E 85 F1 | 	sub	fp, #8
11a68     1C 1E 0E F2 | 	cmp	local01, #28 wz
11a6c     14 4E 05 A1 |  if_e	add	fp, #20
11a70     A7 24 02 AB |  if_e	rdlong	local04, fp
11a74     14 4E 85 A1 |  if_e	sub	fp, #20
11a78     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
11a7c     24 00 90 5D |  if_ne	jmp	#LR__1346
11a80     00 1E 06 F6 | 	mov	local01, #0
11a84     A7 20 02 FB | 	rdlong	local02, fp
11a88     0C 4E 05 F1 | 	add	fp, #12
11a8c     A7 22 02 FB | 	rdlong	local03, fp
11a90     0C 4E 85 F1 | 	sub	fp, #12
11a94     11 21 0A F2 | 	cmp	local02, local03 wz
11a98     01 1E 66 56 |  if_ne	neg	local01, #1
11a9c     A7 1E 62 FC | 	wrlong	local01, fp
11aa0     F8 01 90 FD | 	jmp	#LR__1353
11aa4                 | LR__1346
11aa4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
11aa4     08 4E 05 F1 | 	add	fp, #8
11aa8     A7 1E 02 FB | 	rdlong	local01, fp
11aac     08 4E 85 F1 | 	sub	fp, #8
11ab0     1D 1E 0E F2 | 	cmp	local01, #29 wz
11ab4     14 4E 05 A1 |  if_e	add	fp, #20
11ab8     A7 22 02 AB |  if_e	rdlong	local03, fp
11abc     14 4E 85 A1 |  if_e	sub	fp, #20
11ac0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11ac4     34 00 90 5D |  if_ne	jmp	#LR__1347
11ac8     00 1E 06 F6 | 	mov	local01, #0
11acc     A7 12 02 FB | 	rdlong	arg01, fp
11ad0     B4 B8 B0 FD | 	call	#__system___float_fromuns
11ad4     FD 12 02 F6 | 	mov	arg01, result1
11ad8     0C 4E 05 F1 | 	add	fp, #12
11adc     A7 14 02 FB | 	rdlong	arg02, fp
11ae0     0C 4E 85 F1 | 	sub	fp, #12
11ae4     01 16 06 F6 | 	mov	arg03, #1
11ae8     D4 C0 B0 FD | 	call	#__system___float_cmp
11aec     00 FA 0D F2 | 	cmp	result1, #0 wz
11af0     00 1E 26 56 |  if_ne	not	local01, #0
11af4     A7 1E 62 FC | 	wrlong	local01, fp
11af8     A0 01 90 FD | 	jmp	#LR__1353
11afc                 | LR__1347
11afc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
11afc     08 4E 05 F1 | 	add	fp, #8
11b00     A7 1E 02 FB | 	rdlong	local01, fp
11b04     08 4E 85 F1 | 	sub	fp, #8
11b08     1D 1E 0E F2 | 	cmp	local01, #29 wz
11b0c     14 4E 05 A1 |  if_e	add	fp, #20
11b10     A7 22 02 AB |  if_e	rdlong	local03, fp
11b14     14 4E 85 A1 |  if_e	sub	fp, #20
11b18     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11b1c     24 00 90 5D |  if_ne	jmp	#LR__1348
11b20     00 1E 06 F6 | 	mov	local01, #0
11b24     A7 20 02 FB | 	rdlong	local02, fp
11b28     0C 4E 05 F1 | 	add	fp, #12
11b2c     A7 22 02 FB | 	rdlong	local03, fp
11b30     0C 4E 85 F1 | 	sub	fp, #12
11b34     11 21 0A F2 | 	cmp	local02, local03 wz
11b38     01 1E 66 56 |  if_ne	neg	local01, #1
11b3c     A7 1E 62 FC | 	wrlong	local01, fp
11b40     58 01 90 FD | 	jmp	#LR__1353
11b44                 | LR__1348
11b44                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
11b44     08 4E 05 F1 | 	add	fp, #8
11b48     A7 1E 02 FB | 	rdlong	local01, fp
11b4c     08 4E 85 F1 | 	sub	fp, #8
11b50     1D 1E 0E F2 | 	cmp	local01, #29 wz
11b54     14 4E 05 A1 |  if_e	add	fp, #20
11b58     A7 22 02 AB |  if_e	rdlong	local03, fp
11b5c     14 4E 85 A1 |  if_e	sub	fp, #20
11b60     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11b64     24 00 90 5D |  if_ne	jmp	#LR__1349
11b68     00 1E 06 F6 | 	mov	local01, #0
11b6c     A7 20 02 FB | 	rdlong	local02, fp
11b70     0C 4E 05 F1 | 	add	fp, #12
11b74     A7 22 02 FB | 	rdlong	local03, fp
11b78     0C 4E 85 F1 | 	sub	fp, #12
11b7c     11 21 0A F2 | 	cmp	local02, local03 wz
11b80     01 1E 66 56 |  if_ne	neg	local01, #1
11b84     A7 1E 62 FC | 	wrlong	local01, fp
11b88     10 01 90 FD | 	jmp	#LR__1353
11b8c                 | LR__1349
11b8c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
11b8c     08 4E 05 F1 | 	add	fp, #8
11b90     A7 1E 02 FB | 	rdlong	local01, fp
11b94     08 4E 85 F1 | 	sub	fp, #8
11b98     2B 1E 0E F2 | 	cmp	local01, #43 wz
11b9c     14 4E 05 A1 |  if_e	add	fp, #20
11ba0     A7 22 02 AB |  if_e	rdlong	local03, fp
11ba4     14 4E 85 A1 |  if_e	sub	fp, #20
11ba8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11bac     30 00 90 5D |  if_ne	jmp	#LR__1350
11bb0     00 1E 06 F6 | 	mov	local01, #0
11bb4     A7 12 02 FB | 	rdlong	arg01, fp
11bb8     58 BE BF FD | 	call	#_convertstring
11bbc     FD 12 02 F6 | 	mov	arg01, result1
11bc0     0C 4E 05 F1 | 	add	fp, #12
11bc4     A7 14 02 FB | 	rdlong	arg02, fp
11bc8     0C 4E 85 F1 | 	sub	fp, #12
11bcc     C0 90 B0 FD | 	call	#__system___string_cmp
11bd0     00 FA 0D F2 | 	cmp	result1, #0 wz
11bd4     00 1E 26 56 |  if_ne	not	local01, #0
11bd8     A7 1E 62 FC | 	wrlong	local01, fp
11bdc     BC 00 90 FD | 	jmp	#LR__1353
11be0                 | LR__1350
11be0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
11be0     08 4E 05 F1 | 	add	fp, #8
11be4     A7 1E 02 FB | 	rdlong	local01, fp
11be8     08 4E 85 F1 | 	sub	fp, #8
11bec     1F 1E 0E F2 | 	cmp	local01, #31 wz
11bf0     14 4E 05 A1 |  if_e	add	fp, #20
11bf4     A7 22 02 AB |  if_e	rdlong	local03, fp
11bf8     14 4E 85 A1 |  if_e	sub	fp, #20
11bfc     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11c00     34 00 90 5D |  if_ne	jmp	#LR__1351
11c04     00 1E 06 F6 | 	mov	local01, #0
11c08     A7 20 02 FB | 	rdlong	local02, fp
11c0c     0C 4E 05 F1 | 	add	fp, #12
11c10     A7 12 02 FB | 	rdlong	arg01, fp
11c14     0C 4E 85 F1 | 	sub	fp, #12
11c18     F8 BD BF FD | 	call	#_convertstring
11c1c     FD 14 02 F6 | 	mov	arg02, result1
11c20     10 13 02 F6 | 	mov	arg01, local02
11c24     68 90 B0 FD | 	call	#__system___string_cmp
11c28     00 FA 0D F2 | 	cmp	result1, #0 wz
11c2c     00 1E 26 56 |  if_ne	not	local01, #0
11c30     A7 1E 62 FC | 	wrlong	local01, fp
11c34     64 00 90 FD | 	jmp	#LR__1353
11c38                 | LR__1351
11c38                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
11c38     08 4E 05 F1 | 	add	fp, #8
11c3c     A7 1E 02 FB | 	rdlong	local01, fp
11c40     08 4E 85 F1 | 	sub	fp, #8
11c44     2B 1E 0E F2 | 	cmp	local01, #43 wz
11c48     14 4E 05 A1 |  if_e	add	fp, #20
11c4c     A7 22 02 AB |  if_e	rdlong	local03, fp
11c50     14 4E 85 A1 |  if_e	sub	fp, #20
11c54     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11c58     3C 00 90 5D |  if_ne	jmp	#LR__1352
11c5c     00 1E 06 F6 | 	mov	local01, #0
11c60     A7 12 02 FB | 	rdlong	arg01, fp
11c64     AC BD BF FD | 	call	#_convertstring
11c68     FD 20 02 F6 | 	mov	local02, result1
11c6c     0C 4E 05 F1 | 	add	fp, #12
11c70     A7 12 02 FB | 	rdlong	arg01, fp
11c74     0C 4E 85 F1 | 	sub	fp, #12
11c78     98 BD BF FD | 	call	#_convertstring
11c7c     FD 14 02 F6 | 	mov	arg02, result1
11c80     10 13 02 F6 | 	mov	arg01, local02
11c84     08 90 B0 FD | 	call	#__system___string_cmp
11c88     00 FA 0D F2 | 	cmp	result1, #0 wz
11c8c     00 1E 26 56 |  if_ne	not	local01, #0
11c90     A7 1E 62 FC | 	wrlong	local01, fp
11c94     04 00 90 FD | 	jmp	#LR__1353
11c98                 | LR__1352
11c98     A7 00 68 FC | 	wrlong	#0, fp
11c9c                 | LR__1353
11c9c     08 4E 05 F1 | 	add	fp, #8
11ca0     A7 38 68 FC | 	wrlong	#28, fp
11ca4     08 4E 85 F1 | 	sub	fp, #8
11ca8     A7 12 02 F6 | 	mov	arg01, fp
11cac     E0 7E BF FD | 	call	#_push
11cb0     A7 F0 03 F6 | 	mov	ptra, fp
11cb4     B2 00 A0 FD | 	call	#popregs_
11cb8                 | _do_ne_ret
11cb8     2D 00 64 FD | 	ret
11cbc                 | 
11cbc                 | ' 
11cbc                 | ' 
11cbc                 | ' 
11cbc                 | ' ' -------------------   convert a variable on the top of stack to integer
11cbc                 | ' 
11cbc                 | ' sub do_converttoint
11cbc                 | _do_converttoint
11cbc     02 4A 05 F6 | 	mov	COUNT_, #2
11cc0     A8 00 A0 FD | 	call	#pushregs_
11cc4     18 F0 07 F1 | 	add	ptra, #24
11cc8     2C 7E BF FD | 	call	#_pop
11ccc     FE 1E 02 F6 | 	mov	local01, result2
11cd0     FF 20 02 F6 | 	mov	local02, result3
11cd4     A7 FA 61 FC | 	wrlong	result1, fp
11cd8     04 4E 05 F1 | 	add	fp, #4
11cdc     A7 1E 62 FC | 	wrlong	local01, fp
11ce0     04 4E 05 F1 | 	add	fp, #4
11ce4     A7 20 62 FC | 	wrlong	local02, fp
11ce8                 | ' t1=pop() 
11ce8                 | ' select case t1.result_type
11ce8     08 4E 85 F1 | 	sub	fp, #8
11cec     1C 20 0E F2 | 	cmp	local02, #28 wz
11cf0     2C 00 90 AD |  if_e	jmp	#LR__1360
11cf4     1D 20 0E F2 | 	cmp	local02, #29 wz
11cf8     40 00 90 AD |  if_e	jmp	#LR__1361
11cfc     1E 20 0E F2 | 	cmp	local02, #30 wz
11d00     54 00 90 AD |  if_e	jmp	#LR__1362
11d04     1F 20 0E F2 | 	cmp	local02, #31 wz
11d08     70 00 90 AD |  if_e	jmp	#LR__1363
11d0c     2B 20 0E F2 | 	cmp	local02, #43 wz
11d10     94 00 90 AD |  if_e	jmp	#LR__1364
11d14     FF 20 0E F2 | 	cmp	local02, #255 wz
11d18     C0 00 90 AD |  if_e	jmp	#LR__1365
11d1c     DC 00 90 FD | 	jmp	#LR__1366
11d20                 | LR__1360
11d20     A7 20 02 FB | 	rdlong	local02, fp
11d24     0C 4E 05 F1 | 	add	fp, #12
11d28     A7 20 62 FC | 	wrlong	local02, fp
11d2c     04 4E 05 F1 | 	add	fp, #4
11d30     A7 38 68 FC | 	wrlong	#28, fp
11d34     10 4E 85 F1 | 	sub	fp, #16
11d38     D4 00 90 FD | 	jmp	#LR__1367
11d3c                 | LR__1361
11d3c     A7 20 02 FB | 	rdlong	local02, fp
11d40     0C 4E 05 F1 | 	add	fp, #12
11d44     A7 20 62 FC | 	wrlong	local02, fp
11d48     04 4E 05 F1 | 	add	fp, #4
11d4c     A7 38 68 FC | 	wrlong	#28, fp
11d50     10 4E 85 F1 | 	sub	fp, #16
11d54     B8 00 90 FD | 	jmp	#LR__1367
11d58                 | LR__1362
11d58     A7 12 02 FB | 	rdlong	arg01, fp
11d5c     01 14 06 F6 | 	mov	arg02, #1
11d60     F0 BE B0 FD | 	call	#__system___float_tointeger
11d64     0C 4E 05 F1 | 	add	fp, #12
11d68     A7 FA 61 FC | 	wrlong	result1, fp
11d6c     04 4E 05 F1 | 	add	fp, #4
11d70     A7 38 68 FC | 	wrlong	#28, fp
11d74     10 4E 85 F1 | 	sub	fp, #16
11d78     94 00 90 FD | 	jmp	#LR__1367
11d7c                 | LR__1363
11d7c     A7 12 02 FB | 	rdlong	arg01, fp
11d80     F0 C1 B0 FD | 	call	#__system____builtin_atof
11d84     FD 12 02 F6 | 	mov	arg01, result1
11d88     00 14 06 F6 | 	mov	arg02, #0
11d8c     C4 BE B0 FD | 	call	#__system___float_tointeger
11d90     0C 4E 05 F1 | 	add	fp, #12
11d94     A7 FA 61 FC | 	wrlong	result1, fp
11d98     04 4E 05 F1 | 	add	fp, #4
11d9c     A7 38 68 FC | 	wrlong	#28, fp
11da0     10 4E 85 F1 | 	sub	fp, #16
11da4     68 00 90 FD | 	jmp	#LR__1367
11da8                 | LR__1364
11da8     A7 12 02 FB | 	rdlong	arg01, fp
11dac     64 BC BF FD | 	call	#_convertstring
11db0     FD 12 02 F6 | 	mov	arg01, result1
11db4     BC C1 B0 FD | 	call	#__system____builtin_atof
11db8     FD 12 02 F6 | 	mov	arg01, result1
11dbc     00 14 06 F6 | 	mov	arg02, #0
11dc0     90 BE B0 FD | 	call	#__system___float_tointeger
11dc4     0C 4E 05 F1 | 	add	fp, #12
11dc8     A7 FA 61 FC | 	wrlong	result1, fp
11dcc     04 4E 05 F1 | 	add	fp, #4
11dd0     A7 38 68 FC | 	wrlong	#28, fp
11dd4     10 4E 85 F1 | 	sub	fp, #16
11dd8     34 00 90 FD | 	jmp	#LR__1367
11ddc                 | LR__1365
11ddc     0C 4E 05 F1 | 	add	fp, #12
11de0     A7 00 68 FC | 	wrlong	#0, fp
11de4     0C 4E 85 F1 | 	sub	fp, #12
11de8     A7 20 02 FB | 	rdlong	local02, fp
11dec     10 4E 05 F1 | 	add	fp, #16
11df0     A7 20 62 FC | 	wrlong	local02, fp
11df4     10 4E 85 F1 | 	sub	fp, #16
11df8     14 00 90 FD | 	jmp	#LR__1367
11dfc                 | LR__1366
11dfc     0C 4E 05 F1 | 	add	fp, #12
11e00     A7 00 68 FC | 	wrlong	#0, fp
11e04     04 4E 05 F1 | 	add	fp, #4
11e08     A7 02 68 FC | 	wrlong	#1, fp
11e0c     10 4E 85 F1 | 	sub	fp, #16
11e10                 | LR__1367
11e10     0C 4E 05 F1 | 	add	fp, #12
11e14     A7 20 02 FB | 	rdlong	local02, fp
11e18     0C 4E 85 F1 | 	sub	fp, #12
11e1c     A7 20 62 FC | 	wrlong	local02, fp
11e20     10 4E 05 F1 | 	add	fp, #16
11e24     A7 20 02 FB | 	rdlong	local02, fp
11e28     08 4E 85 F1 | 	sub	fp, #8
11e2c     A7 20 62 FC | 	wrlong	local02, fp
11e30     08 4E 85 F1 | 	sub	fp, #8
11e34     A7 12 02 F6 | 	mov	arg01, fp
11e38     54 7D BF FD | 	call	#_push
11e3c     A7 F0 03 F6 | 	mov	ptra, fp
11e40     B2 00 A0 FD | 	call	#popregs_
11e44                 | _do_converttoint_ret
11e44     2D 00 64 FD | 	ret
11e48                 | 
11e48                 | ' 
11e48                 | ' function converttoint (t1 as expr_result) as integer
11e48                 | _converttoint
11e48     02 4A 05 F6 | 	mov	COUNT_, #2
11e4c     A8 00 A0 FD | 	call	#pushregs_
11e50     09 1F 02 F6 | 	mov	local01, arg01
11e54                 | ' 
11e54                 | ' select case t1.result_type
11e54     08 1E 06 F1 | 	add	local01, #8
11e58     0F 21 02 FB | 	rdlong	local02, local01
11e5c     08 1E 86 F1 | 	sub	local01, #8
11e60     1C 20 0E F2 | 	cmp	local02, #28 wz
11e64     24 00 90 AD |  if_e	jmp	#LR__1370
11e68     1D 20 0E F2 | 	cmp	local02, #29 wz
11e6c     24 00 90 AD |  if_e	jmp	#LR__1371
11e70     1E 20 0E F2 | 	cmp	local02, #30 wz
11e74     24 00 90 AD |  if_e	jmp	#LR__1372
11e78     1F 20 0E F2 | 	cmp	local02, #31 wz
11e7c     2C 00 90 AD |  if_e	jmp	#LR__1373
11e80     2B 20 0E F2 | 	cmp	local02, #43 wz
11e84     3C 00 90 AD |  if_e	jmp	#LR__1374
11e88     58 00 90 FD | 	jmp	#LR__1375
11e8c                 | LR__1370
11e8c     0F FB 01 FB | 	rdlong	result1, local01
11e90     54 00 90 FD | 	jmp	#LR__1376
11e94                 | LR__1371
11e94     0F FB 01 FB | 	rdlong	result1, local01
11e98     4C 00 90 FD | 	jmp	#LR__1376
11e9c                 | LR__1372
11e9c     0F 13 02 FB | 	rdlong	arg01, local01
11ea0     01 14 06 F6 | 	mov	arg02, #1
11ea4     AC BD B0 FD | 	call	#__system___float_tointeger
11ea8     3C 00 90 FD | 	jmp	#LR__1376
11eac                 | LR__1373
11eac     0F 13 02 FB | 	rdlong	arg01, local01
11eb0     C0 C0 B0 FD | 	call	#__system____builtin_atof
11eb4     FD 12 02 F6 | 	mov	arg01, result1
11eb8     00 14 06 F6 | 	mov	arg02, #0
11ebc     94 BD B0 FD | 	call	#__system___float_tointeger
11ec0     24 00 90 FD | 	jmp	#LR__1376
11ec4                 | LR__1374
11ec4     0F 13 02 FB | 	rdlong	arg01, local01
11ec8     48 BB BF FD | 	call	#_convertstring
11ecc     FD 12 02 F6 | 	mov	arg01, result1
11ed0     A0 C0 B0 FD | 	call	#__system____builtin_atof
11ed4     FD 12 02 F6 | 	mov	arg01, result1
11ed8     00 14 06 F6 | 	mov	arg02, #0
11edc     74 BD B0 FD | 	call	#__system___float_tointeger
11ee0     04 00 90 FD | 	jmp	#LR__1376
11ee4                 | LR__1375
11ee4     00 FA 05 F6 | 	mov	result1, #0
11ee8                 | LR__1376
11ee8     A7 F0 03 F6 | 	mov	ptra, fp
11eec     B2 00 A0 FD | 	call	#popregs_
11ef0                 | _converttoint_ret
11ef0     2D 00 64 FD | 	ret
11ef4                 | 
11ef4                 | ' 
11ef4                 | ' function converttofloat (t1 as expr_result) as single
11ef4                 | _converttofloat
11ef4     03 4A 05 F6 | 	mov	COUNT_, #3
11ef8     A8 00 A0 FD | 	call	#pushregs_
11efc     09 1F 02 F6 | 	mov	local01, arg01
11f00                 | ' 
11f00                 | ' select case t1.result_type
11f00     08 1E 06 F1 | 	add	local01, #8
11f04     0F 21 02 FB | 	rdlong	local02, local01
11f08     08 1E 86 F1 | 	sub	local01, #8
11f0c     1C 20 0E F2 | 	cmp	local02, #28 wz
11f10     24 00 90 AD |  if_e	jmp	#LR__1380
11f14     1D 20 0E F2 | 	cmp	local02, #29 wz
11f18     38 00 90 AD |  if_e	jmp	#LR__1381
11f1c     1E 20 0E F2 | 	cmp	local02, #30 wz
11f20     3C 00 90 AD |  if_e	jmp	#LR__1382
11f24     1F 20 0E F2 | 	cmp	local02, #31 wz
11f28     3C 00 90 AD |  if_e	jmp	#LR__1383
11f2c     2B 20 0E F2 | 	cmp	local02, #43 wz
11f30     40 00 90 AD |  if_e	jmp	#LR__1384
11f34     50 00 90 FD | 	jmp	#LR__1385
11f38                 | LR__1380
11f38     0F 13 02 FB | 	rdlong	arg01, local01
11f3c     09 13 52 F6 | 	abs	arg01, arg01 wc
11f40     1F 22 C6 C9 |  if_b	decod	local03, #31
11f44     00 22 06 36 |  if_ae	mov	local03, #0
11f48     3C B4 B0 FD | 	call	#__system___float_fromuns
11f4c     11 FB 61 F5 | 	xor	result1, local03
11f50     38 00 90 FD | 	jmp	#LR__1386
11f54                 | LR__1381
11f54     0F 13 02 FB | 	rdlong	arg01, local01
11f58     2C B4 B0 FD | 	call	#__system___float_fromuns
11f5c     2C 00 90 FD | 	jmp	#LR__1386
11f60                 | LR__1382
11f60     0F FB 01 FB | 	rdlong	result1, local01
11f64     24 00 90 FD | 	jmp	#LR__1386
11f68                 | LR__1383
11f68     0F 13 02 FB | 	rdlong	arg01, local01
11f6c     04 C0 B0 FD | 	call	#__system____builtin_atof
11f70     18 00 90 FD | 	jmp	#LR__1386
11f74                 | LR__1384
11f74     0F 13 02 FB | 	rdlong	arg01, local01
11f78     98 BA BF FD | 	call	#_convertstring
11f7c     FD 12 02 F6 | 	mov	arg01, result1
11f80     F0 BF B0 FD | 	call	#__system____builtin_atof
11f84     04 00 90 FD | 	jmp	#LR__1386
11f88                 | LR__1385
11f88     00 FA 05 F6 | 	mov	result1, #0
11f8c                 | LR__1386
11f8c     A7 F0 03 F6 | 	mov	ptra, fp
11f90     B2 00 A0 FD | 	call	#popregs_
11f94                 | _converttofloat_ret
11f94     2D 00 64 FD | 	ret
11f98                 | 
11f98                 | ' 
11f98                 | ' sub do_rnd
11f98                 | _do_rnd
11f98     01 4A 05 F6 | 	mov	COUNT_, #1
11f9c     A8 00 A0 FD | 	call	#pushregs_
11fa0     10 F0 07 F1 | 	add	ptra, #16
11fa4     69 00 00 FF 
11fa8     E4 E5 05 F1 | 	add	objptr, ##54244
11fac     F2 1E 02 FB | 	rdlong	local01, objptr
11fb0     0F 17 02 F6 | 	mov	arg03, local01
11fb4     01 16 66 F0 | 	shl	arg03, #1
11fb8     0F 17 02 F1 | 	add	arg03, local01
11fbc     02 16 66 F0 | 	shl	arg03, #2
11fc0     03 00 00 FF 
11fc4     04 E4 85 F1 | 	sub	objptr, ##1540
11fc8     F2 16 02 F1 | 	add	arg03, objptr
11fcc     0B 17 02 FB | 	rdlong	arg03, arg03
11fd0     0C 4E 05 F1 | 	add	fp, #12
11fd4     A7 16 62 FC | 	wrlong	arg03, fp
11fd8                 | ' 
11fd8                 | ' numpar=compiledline(lineptr_e).result.uresult
11fd8                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
11fd8     0C 4E 85 F1 | 	sub	fp, #12
11fdc     02 16 16 F2 | 	cmp	arg03, #2 wc
11fe0     66 00 00 FF 
11fe4     E0 E5 85 F1 | 	sub	objptr, ##52704
11fe8     3C 00 90 CD |  if_b	jmp	#LR__1390
11fec     00 12 06 F6 | 	mov	arg01, #0
11ff0     A8 E5 B0 FD | 	call	#__system___getiolock_0442
11ff4     FD 12 02 F6 | 	mov	arg01, result1
11ff8     6C 8C B0 FD | 	call	#__system___lockmem
11ffc     53 01 00 FF 
12000     91 15 06 F6 | 	mov	arg02, ##@LR__4716
12004     00 12 06 F6 | 	mov	arg01, #0
12008     00 16 06 F6 | 	mov	arg03, #0
1200c     60 99 B0 FD | 	call	#__system___basic_print_string
12010     00 12 06 F6 | 	mov	arg01, #0
12014     84 E5 B0 FD | 	call	#__system___getiolock_0442
12018     FD 00 68 FC | 	wrlong	#0, result1
1201c     27 12 06 F6 | 	mov	arg01, #39
12020     34 56 B0 FD | 	call	#_printerror
12024     2C 01 90 FD | 	jmp	#LR__1397
12028                 | LR__1390
12028                 | ' if numpar=0 then
12028     0C 4E 05 F1 | 	add	fp, #12
1202c     A7 FE 09 FB | 	rdlong	result3, fp wz
12030     0C 4E 85 F1 | 	sub	fp, #12
12034     20 00 90 5D |  if_ne	jmp	#LR__1391
12038     08 4E 05 F1 | 	add	fp, #8
1203c     A7 3A 68 FC | 	wrlong	#29, fp
12040     08 4E 85 F1 | 	sub	fp, #8
12044     1B FA 61 FD | 	getrnd	result1
12048     A7 FA 61 FC | 	wrlong	result1, fp
1204c     A7 12 02 F6 | 	mov	arg01, fp
12050     3C 7B BF FD | 	call	#_push
12054     FC 00 90 FD | 	jmp	#LR__1396
12058                 | LR__1391
12058     9C 7A BF FD | 	call	#_pop
1205c     A7 FA 61 FC | 	wrlong	result1, fp
12060     04 4E 05 F1 | 	add	fp, #4
12064     A7 FC 61 FC | 	wrlong	result2, fp
12068     04 4E 05 F1 | 	add	fp, #4
1206c     A7 FE 61 FC | 	wrlong	result3, fp
12070                 | '   t1=pop()
12070                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
12070     08 4E 85 F1 | 	sub	fp, #8
12074     1C FE 0D F2 | 	cmp	result3, #28 wz
12078     08 4E 05 51 |  if_ne	add	fp, #8
1207c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12080     08 4E 85 51 |  if_ne	sub	fp, #8
12084     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
12088     2C 00 90 5D |  if_ne	jmp	#LR__1392
1208c     1B FA 61 FD | 	getrnd	result1
12090     A7 1E 02 FB | 	rdlong	local01, fp
12094     0F FB 11 FD | 	qdiv	result1, local01
12098     A7 12 02 F6 | 	mov	arg01, fp
1209c     19 1E 62 FD | 	getqy	local01
120a0     A7 1E 62 FC | 	wrlong	local01, fp
120a4     08 4E 05 F1 | 	add	fp, #8
120a8     A7 3A 68 FC | 	wrlong	#29, fp
120ac     08 4E 85 F1 | 	sub	fp, #8
120b0     DC 7A BF FD | 	call	#_push
120b4     9C 00 90 FD | 	jmp	#LR__1395
120b8                 | LR__1392
120b8     08 4E 05 F1 | 	add	fp, #8
120bc     A7 1E 02 FB | 	rdlong	local01, fp
120c0     08 4E 85 F1 | 	sub	fp, #8
120c4     1E 1E 0E F2 | 	cmp	local01, #30 wz
120c8     48 00 90 5D |  if_ne	jmp	#LR__1393
120cc     A7 12 02 FB | 	rdlong	arg01, fp
120d0     00 C0 24 FF 
120d4     00 14 06 F6 | 	mov	arg02, ##1233125376
120d8     B4 B8 B0 FD | 	call	#__system___float_div
120dc     FD 1E 02 F6 | 	mov	local01, result1
120e0     1B 12 62 FD | 	getrnd	arg01
120e4     74 13 06 F4 | 	bitl	arg01, #372
120e8     9C B2 B0 FD | 	call	#__system___float_fromuns
120ec     FD 14 02 F6 | 	mov	arg02, result1
120f0     0F 13 02 F6 | 	mov	arg01, local01
120f4     94 B6 B0 FD | 	call	#__system___float_mul
120f8     A7 FA 61 FC | 	wrlong	result1, fp
120fc     08 4E 05 F1 | 	add	fp, #8
12100     A7 3C 68 FC | 	wrlong	#30, fp
12104     08 4E 85 F1 | 	sub	fp, #8
12108     A7 12 02 F6 | 	mov	arg01, fp
1210c     80 7A BF FD | 	call	#_push
12110     40 00 90 FD | 	jmp	#LR__1394
12114                 | LR__1393
12114                 | '     print "rnd: "; : printerror(40) 
12114     00 12 06 F6 | 	mov	arg01, #0
12118     80 E4 B0 FD | 	call	#__system___getiolock_0442
1211c     FD 12 02 F6 | 	mov	arg01, result1
12120     44 8B B0 FD | 	call	#__system___lockmem
12124     53 01 00 FF 
12128     97 15 06 F6 | 	mov	arg02, ##@LR__4717
1212c     00 12 06 F6 | 	mov	arg01, #0
12130     00 16 06 F6 | 	mov	arg03, #0
12134     38 98 B0 FD | 	call	#__system___basic_print_string
12138     00 12 06 F6 | 	mov	arg01, #0
1213c     5C E4 B0 FD | 	call	#__system___getiolock_0442
12140     FD 00 68 FC | 	wrlong	#0, result1
12144     28 12 06 F6 | 	mov	arg01, #40
12148     0C 55 B0 FD | 	call	#_printerror
1214c     A7 12 02 F6 | 	mov	arg01, fp
12150     3C 7A BF FD | 	call	#_push
12154                 | LR__1394
12154                 | LR__1395
12154                 | LR__1396
12154                 | LR__1397
12154     A7 F0 03 F6 | 	mov	ptra, fp
12158     B2 00 A0 FD | 	call	#popregs_
1215c                 | _do_rnd_ret
1215c     2D 00 64 FD | 	ret
12160                 | 
12160                 | ' 
12160                 | ' sub do_getenvsustain
12160                 | _do_getenvsustain
12160     01 4A 05 F6 | 	mov	COUNT_, #1
12164     A8 00 A0 FD | 	call	#pushregs_
12168     10 F0 07 F1 | 	add	ptra, #16
1216c     69 00 00 FF 
12170     E4 E5 05 F1 | 	add	objptr, ##54244
12174     F2 1E 02 FB | 	rdlong	local01, objptr
12178     0F 17 02 F6 | 	mov	arg03, local01
1217c     01 16 66 F0 | 	shl	arg03, #1
12180     0F 17 02 F1 | 	add	arg03, local01
12184     02 16 66 F0 | 	shl	arg03, #2
12188     03 00 00 FF 
1218c     04 E4 85 F1 | 	sub	objptr, ##1540
12190     F2 16 02 F1 | 	add	arg03, objptr
12194     0B 17 02 FB | 	rdlong	arg03, arg03
12198     0C 4E 05 F1 | 	add	fp, #12
1219c     A7 16 62 FC | 	wrlong	arg03, fp
121a0                 | ' 
121a0                 | ' numpar=compiledline(lineptr_e).result.uresult
121a0                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
121a0     0C 4E 85 F1 | 	sub	fp, #12
121a4     02 16 16 F2 | 	cmp	arg03, #2 wc
121a8     66 00 00 FF 
121ac     E0 E5 85 F1 | 	sub	objptr, ##52704
121b0     0C 4E 05 C1 |  if_b	add	fp, #12
121b4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
121b8     0C 4E 85 C1 |  if_b	sub	fp, #12
121bc     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1400
121c0     00 12 06 F6 | 	mov	arg01, #0
121c4     D4 E3 B0 FD | 	call	#__system___getiolock_0442
121c8     FD 12 02 F6 | 	mov	arg01, result1
121cc     98 8A B0 FD | 	call	#__system___lockmem
121d0     53 01 00 FF 
121d4     9D 15 06 F6 | 	mov	arg02, ##@LR__4718
121d8     00 12 06 F6 | 	mov	arg01, #0
121dc     00 16 06 F6 | 	mov	arg03, #0
121e0     8C 97 B0 FD | 	call	#__system___basic_print_string
121e4     00 12 06 F6 | 	mov	arg01, #0
121e8     B0 E3 B0 FD | 	call	#__system___getiolock_0442
121ec     FD 00 68 FC | 	wrlong	#0, result1
121f0     27 12 06 F6 | 	mov	arg01, #39
121f4     60 54 B0 FD | 	call	#_printerror
121f8     64 00 90 FD | 	jmp	#LR__1401
121fc                 | LR__1400
121fc     F8 78 BF FD | 	call	#_pop
12200     FD 1E 02 F6 | 	mov	local01, result1
12204     FE 16 02 F6 | 	mov	arg03, result2
12208     A7 1E 62 FC | 	wrlong	local01, fp
1220c     04 4E 05 F1 | 	add	fp, #4
12210     A7 16 62 FC | 	wrlong	arg03, fp
12214     04 4E 05 F1 | 	add	fp, #4
12218     A7 FE 61 FC | 	wrlong	result3, fp
1221c     08 4E 85 F1 | 	sub	fp, #8
12220     A7 12 02 F6 | 	mov	arg01, fp
12224     20 FC BF FD | 	call	#_converttoint
12228     FD 1E 02 F6 | 	mov	local01, result1
1222c     01 1E 66 F0 | 	shl	local01, #1
12230     7A 00 00 FF 
12234     F8 E5 05 F1 | 	add	objptr, ##62968
12238     F2 1E 02 F1 | 	add	local01, objptr
1223c     0F 1F E2 FA | 	rdword	local01, local01
12240     A7 1E 62 FC | 	wrlong	local01, fp
12244     08 4E 05 F1 | 	add	fp, #8
12248     A7 38 68 FC | 	wrlong	#28, fp
1224c     08 4E 85 F1 | 	sub	fp, #8
12250     A7 12 02 F6 | 	mov	arg01, fp
12254     7A 00 00 FF 
12258     F8 E5 85 F1 | 	sub	objptr, ##62968
1225c     30 79 BF FD | 	call	#_push
12260                 | LR__1401
12260     A7 F0 03 F6 | 	mov	ptra, fp
12264     B2 00 A0 FD | 	call	#popregs_
12268                 | _do_getenvsustain_ret
12268     2D 00 64 FD | 	ret
1226c                 | 
1226c                 | ' 
1226c                 | ' sub do_sin
1226c                 | _do_sin
1226c     01 4A 05 F6 | 	mov	COUNT_, #1
12270     A8 00 A0 FD | 	call	#pushregs_
12274     10 F0 07 F1 | 	add	ptra, #16
12278     69 00 00 FF 
1227c     E4 E5 05 F1 | 	add	objptr, ##54244
12280     F2 1E 02 FB | 	rdlong	local01, objptr
12284     0F 17 02 F6 | 	mov	arg03, local01
12288     01 16 66 F0 | 	shl	arg03, #1
1228c     0F 17 02 F1 | 	add	arg03, local01
12290     02 16 66 F0 | 	shl	arg03, #2
12294     03 00 00 FF 
12298     04 E4 85 F1 | 	sub	objptr, ##1540
1229c     F2 16 02 F1 | 	add	arg03, objptr
122a0     0B 17 02 FB | 	rdlong	arg03, arg03
122a4     0C 4E 05 F1 | 	add	fp, #12
122a8     A7 16 62 FC | 	wrlong	arg03, fp
122ac                 | ' 
122ac                 | ' numpar=compiledline(lineptr_e).result.uresult
122ac                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
122ac     0C 4E 85 F1 | 	sub	fp, #12
122b0     02 16 16 F2 | 	cmp	arg03, #2 wc
122b4     66 00 00 FF 
122b8     E0 E5 85 F1 | 	sub	objptr, ##52704
122bc     0C 4E 05 C1 |  if_b	add	fp, #12
122c0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
122c4     0C 4E 85 C1 |  if_b	sub	fp, #12
122c8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1410
122cc     00 12 06 F6 | 	mov	arg01, #0
122d0     C8 E2 B0 FD | 	call	#__system___getiolock_0442
122d4     FD 12 02 F6 | 	mov	arg01, result1
122d8     8C 89 B0 FD | 	call	#__system___lockmem
122dc     53 01 00 FF 
122e0     AD 15 06 F6 | 	mov	arg02, ##@LR__4719
122e4     00 12 06 F6 | 	mov	arg01, #0
122e8     00 16 06 F6 | 	mov	arg03, #0
122ec     80 96 B0 FD | 	call	#__system___basic_print_string
122f0     00 12 06 F6 | 	mov	arg01, #0
122f4     A4 E2 B0 FD | 	call	#__system___getiolock_0442
122f8     FD 00 68 FC | 	wrlong	#0, result1
122fc     27 12 06 F6 | 	mov	arg01, #39
12300     54 53 B0 FD | 	call	#_printerror
12304     64 00 90 FD | 	jmp	#LR__1411
12308                 | LR__1410
12308     EC 77 BF FD | 	call	#_pop
1230c     A7 FA 61 FC | 	wrlong	result1, fp
12310     04 4E 05 F1 | 	add	fp, #4
12314     A7 FC 61 FC | 	wrlong	result2, fp
12318     04 4E 05 F1 | 	add	fp, #4
1231c     A7 FE 61 FC | 	wrlong	result3, fp
12320     08 4E 85 F1 | 	sub	fp, #8
12324     7A 00 00 FF 
12328     EC E5 05 F1 | 	add	objptr, ##62956
1232c     F2 1E 02 FB | 	rdlong	local01, objptr
12330     7A 00 00 FF 
12334     EC E5 85 F1 | 	sub	objptr, ##62956
12338     A7 12 02 F6 | 	mov	arg01, fp
1233c     B4 FB BF FD | 	call	#_converttofloat
12340     FD 14 02 F6 | 	mov	arg02, result1
12344     0F 13 02 F6 | 	mov	arg01, local01
12348     40 B4 B0 FD | 	call	#__system___float_mul
1234c     FD 12 02 F6 | 	mov	arg01, result1
12350     74 BD B0 FD | 	call	#__system____builtin_sinf
12354     A7 FA 61 FC | 	wrlong	result1, fp
12358     08 4E 05 F1 | 	add	fp, #8
1235c     A7 3C 68 FC | 	wrlong	#30, fp
12360     08 4E 85 F1 | 	sub	fp, #8
12364     A7 12 02 F6 | 	mov	arg01, fp
12368     24 78 BF FD | 	call	#_push
1236c                 | LR__1411
1236c     A7 F0 03 F6 | 	mov	ptra, fp
12370     B2 00 A0 FD | 	call	#popregs_
12374                 | _do_sin_ret
12374     2D 00 64 FD | 	ret
12378                 | 
12378                 | ' 
12378                 | ' sub do_cos
12378                 | _do_cos
12378     01 4A 05 F6 | 	mov	COUNT_, #1
1237c     A8 00 A0 FD | 	call	#pushregs_
12380     10 F0 07 F1 | 	add	ptra, #16
12384     69 00 00 FF 
12388     E4 E5 05 F1 | 	add	objptr, ##54244
1238c     F2 1E 02 FB | 	rdlong	local01, objptr
12390     0F 17 02 F6 | 	mov	arg03, local01
12394     01 16 66 F0 | 	shl	arg03, #1
12398     0F 17 02 F1 | 	add	arg03, local01
1239c     02 16 66 F0 | 	shl	arg03, #2
123a0     03 00 00 FF 
123a4     04 E4 85 F1 | 	sub	objptr, ##1540
123a8     F2 16 02 F1 | 	add	arg03, objptr
123ac     0B 17 02 FB | 	rdlong	arg03, arg03
123b0     0C 4E 05 F1 | 	add	fp, #12
123b4     A7 16 62 FC | 	wrlong	arg03, fp
123b8                 | ' 
123b8                 | ' numpar=compiledline(lineptr_e).result.uresult
123b8                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
123b8     0C 4E 85 F1 | 	sub	fp, #12
123bc     02 16 16 F2 | 	cmp	arg03, #2 wc
123c0     66 00 00 FF 
123c4     E0 E5 85 F1 | 	sub	objptr, ##52704
123c8     0C 4E 05 C1 |  if_b	add	fp, #12
123cc     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
123d0     0C 4E 85 C1 |  if_b	sub	fp, #12
123d4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1420
123d8     00 12 06 F6 | 	mov	arg01, #0
123dc     BC E1 B0 FD | 	call	#__system___getiolock_0442
123e0     FD 12 02 F6 | 	mov	arg01, result1
123e4     80 88 B0 FD | 	call	#__system___lockmem
123e8     53 01 00 FF 
123ec     B3 15 06 F6 | 	mov	arg02, ##@LR__4720
123f0     00 12 06 F6 | 	mov	arg01, #0
123f4     00 16 06 F6 | 	mov	arg03, #0
123f8     74 95 B0 FD | 	call	#__system___basic_print_string
123fc     00 12 06 F6 | 	mov	arg01, #0
12400     98 E1 B0 FD | 	call	#__system___getiolock_0442
12404     FD 00 68 FC | 	wrlong	#0, result1
12408     27 12 06 F6 | 	mov	arg01, #39
1240c     48 52 B0 FD | 	call	#_printerror
12410     78 00 90 FD | 	jmp	#LR__1421
12414                 | LR__1420
12414     E0 76 BF FD | 	call	#_pop
12418     A7 FA 61 FC | 	wrlong	result1, fp
1241c     04 4E 05 F1 | 	add	fp, #4
12420     A7 FC 61 FC | 	wrlong	result2, fp
12424     04 4E 05 F1 | 	add	fp, #4
12428     A7 FE 61 FC | 	wrlong	result3, fp
1242c     08 4E 85 F1 | 	sub	fp, #8
12430     7A 00 00 FF 
12434     EC E5 05 F1 | 	add	objptr, ##62956
12438     F2 1E 02 FB | 	rdlong	local01, objptr
1243c     7A 00 00 FF 
12440     EC E5 85 F1 | 	sub	objptr, ##62956
12444     A7 12 02 F6 | 	mov	arg01, fp
12448     A8 FA BF FD | 	call	#_converttofloat
1244c     FD 14 02 F6 | 	mov	arg02, result1
12450     0F 13 02 F6 | 	mov	arg01, local01
12454     34 B3 B0 FD | 	call	#__system___float_mul
12458     FD 14 02 F6 | 	mov	arg02, result1
1245c     87 E4 1F FF 
12460     DB 13 06 F6 | 	mov	arg01, ##1070141403
12464     1F 14 E6 F4 | 	bitnot	arg02, #31
12468     50 AF B0 FD | 	call	#__system___float_add
1246c     FD 12 02 F6 | 	mov	arg01, result1
12470     54 BC B0 FD | 	call	#__system____builtin_sinf
12474     A7 FA 61 FC | 	wrlong	result1, fp
12478     08 4E 05 F1 | 	add	fp, #8
1247c     A7 3C 68 FC | 	wrlong	#30, fp
12480     08 4E 85 F1 | 	sub	fp, #8
12484     A7 12 02 F6 | 	mov	arg01, fp
12488     04 77 BF FD | 	call	#_push
1248c                 | LR__1421
1248c     A7 F0 03 F6 | 	mov	ptra, fp
12490     B2 00 A0 FD | 	call	#popregs_
12494                 | _do_cos_ret
12494     2D 00 64 FD | 	ret
12498                 | 
12498                 | ' 
12498                 | ' sub do_tan
12498                 | _do_tan
12498     01 4A 05 F6 | 	mov	COUNT_, #1
1249c     A8 00 A0 FD | 	call	#pushregs_
124a0     10 F0 07 F1 | 	add	ptra, #16
124a4     69 00 00 FF 
124a8     E4 E5 05 F1 | 	add	objptr, ##54244
124ac     F2 1E 02 FB | 	rdlong	local01, objptr
124b0     0F 17 02 F6 | 	mov	arg03, local01
124b4     01 16 66 F0 | 	shl	arg03, #1
124b8     0F 17 02 F1 | 	add	arg03, local01
124bc     02 16 66 F0 | 	shl	arg03, #2
124c0     03 00 00 FF 
124c4     04 E4 85 F1 | 	sub	objptr, ##1540
124c8     F2 16 02 F1 | 	add	arg03, objptr
124cc     0B 17 02 FB | 	rdlong	arg03, arg03
124d0     0C 4E 05 F1 | 	add	fp, #12
124d4     A7 16 62 FC | 	wrlong	arg03, fp
124d8                 | ' 
124d8                 | ' numpar=compiledline(lineptr_e).result.uresult
124d8                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
124d8     0C 4E 85 F1 | 	sub	fp, #12
124dc     02 16 16 F2 | 	cmp	arg03, #2 wc
124e0     66 00 00 FF 
124e4     E0 E5 85 F1 | 	sub	objptr, ##52704
124e8     0C 4E 05 C1 |  if_b	add	fp, #12
124ec     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
124f0     0C 4E 85 C1 |  if_b	sub	fp, #12
124f4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1430
124f8     00 12 06 F6 | 	mov	arg01, #0
124fc     9C E0 B0 FD | 	call	#__system___getiolock_0442
12500     FD 12 02 F6 | 	mov	arg01, result1
12504     60 87 B0 FD | 	call	#__system___lockmem
12508     53 01 00 FF 
1250c     B9 15 06 F6 | 	mov	arg02, ##@LR__4721
12510     00 12 06 F6 | 	mov	arg01, #0
12514     00 16 06 F6 | 	mov	arg03, #0
12518     54 94 B0 FD | 	call	#__system___basic_print_string
1251c     00 12 06 F6 | 	mov	arg01, #0
12520     78 E0 B0 FD | 	call	#__system___getiolock_0442
12524     FD 00 68 FC | 	wrlong	#0, result1
12528     27 12 06 F6 | 	mov	arg01, #39
1252c     28 51 B0 FD | 	call	#_printerror
12530     64 00 90 FD | 	jmp	#LR__1431
12534                 | LR__1430
12534     C0 75 BF FD | 	call	#_pop
12538     A7 FA 61 FC | 	wrlong	result1, fp
1253c     04 4E 05 F1 | 	add	fp, #4
12540     A7 FC 61 FC | 	wrlong	result2, fp
12544     04 4E 05 F1 | 	add	fp, #4
12548     A7 FE 61 FC | 	wrlong	result3, fp
1254c     08 4E 85 F1 | 	sub	fp, #8
12550     7A 00 00 FF 
12554     EC E5 05 F1 | 	add	objptr, ##62956
12558     F2 1E 02 FB | 	rdlong	local01, objptr
1255c     7A 00 00 FF 
12560     EC E5 85 F1 | 	sub	objptr, ##62956
12564     A7 12 02 F6 | 	mov	arg01, fp
12568     88 F9 BF FD | 	call	#_converttofloat
1256c     FD 14 02 F6 | 	mov	arg02, result1
12570     0F 13 02 F6 | 	mov	arg01, local01
12574     14 B2 B0 FD | 	call	#__system___float_mul
12578     FD 12 02 F6 | 	mov	arg01, result1
1257c     94 BC B0 FD | 	call	#__system____builtin_tanf
12580     A7 FA 61 FC | 	wrlong	result1, fp
12584     08 4E 05 F1 | 	add	fp, #8
12588     A7 3C 68 FC | 	wrlong	#30, fp
1258c     08 4E 85 F1 | 	sub	fp, #8
12590     A7 12 02 F6 | 	mov	arg01, fp
12594     F8 75 BF FD | 	call	#_push
12598                 | LR__1431
12598     A7 F0 03 F6 | 	mov	ptra, fp
1259c     B2 00 A0 FD | 	call	#popregs_
125a0                 | _do_tan_ret
125a0     2D 00 64 FD | 	ret
125a4                 | 
125a4                 | ' 
125a4                 | ' sub do_asin
125a4                 | _do_asin
125a4     01 4A 05 F6 | 	mov	COUNT_, #1
125a8     A8 00 A0 FD | 	call	#pushregs_
125ac     10 F0 07 F1 | 	add	ptra, #16
125b0     69 00 00 FF 
125b4     E4 E5 05 F1 | 	add	objptr, ##54244
125b8     F2 1E 02 FB | 	rdlong	local01, objptr
125bc     0F 17 02 F6 | 	mov	arg03, local01
125c0     01 16 66 F0 | 	shl	arg03, #1
125c4     0F 17 02 F1 | 	add	arg03, local01
125c8     02 16 66 F0 | 	shl	arg03, #2
125cc     03 00 00 FF 
125d0     04 E4 85 F1 | 	sub	objptr, ##1540
125d4     F2 16 02 F1 | 	add	arg03, objptr
125d8     0B 17 02 FB | 	rdlong	arg03, arg03
125dc     0C 4E 05 F1 | 	add	fp, #12
125e0     A7 16 62 FC | 	wrlong	arg03, fp
125e4                 | ' 
125e4                 | ' numpar=compiledline(lineptr_e).result.uresult
125e4                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
125e4     0C 4E 85 F1 | 	sub	fp, #12
125e8     02 16 16 F2 | 	cmp	arg03, #2 wc
125ec     66 00 00 FF 
125f0     E0 E5 85 F1 | 	sub	objptr, ##52704
125f4     0C 4E 05 C1 |  if_b	add	fp, #12
125f8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
125fc     0C 4E 85 C1 |  if_b	sub	fp, #12
12600     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1440
12604     00 12 06 F6 | 	mov	arg01, #0
12608     90 DF B0 FD | 	call	#__system___getiolock_0442
1260c     FD 12 02 F6 | 	mov	arg01, result1
12610     54 86 B0 FD | 	call	#__system___lockmem
12614     53 01 00 FF 
12618     BF 15 06 F6 | 	mov	arg02, ##@LR__4722
1261c     00 12 06 F6 | 	mov	arg01, #0
12620     00 16 06 F6 | 	mov	arg03, #0
12624     48 93 B0 FD | 	call	#__system___basic_print_string
12628     00 12 06 F6 | 	mov	arg01, #0
1262c     6C DF B0 FD | 	call	#__system___getiolock_0442
12630     FD 00 68 FC | 	wrlong	#0, result1
12634     27 12 06 F6 | 	mov	arg01, #39
12638     1C 50 B0 FD | 	call	#_printerror
1263c     64 00 90 FD | 	jmp	#LR__1441
12640                 | LR__1440
12640     B4 74 BF FD | 	call	#_pop
12644     FF 1E 02 F6 | 	mov	local01, result3
12648     A7 FA 61 FC | 	wrlong	result1, fp
1264c     04 4E 05 F1 | 	add	fp, #4
12650     A7 FC 61 FC | 	wrlong	result2, fp
12654     04 4E 05 F1 | 	add	fp, #4
12658     A7 1E 62 FC | 	wrlong	local01, fp
1265c     08 4E 85 F1 | 	sub	fp, #8
12660     A7 12 02 F6 | 	mov	arg01, fp
12664     8C F8 BF FD | 	call	#_converttofloat
12668     FD 12 02 F6 | 	mov	arg01, result1
1266c     EC BB B0 FD | 	call	#__system____builtin_asinf
12670     FD 12 02 F6 | 	mov	arg01, result1
12674     7A 00 00 FF 
12678     F0 E5 05 F1 | 	add	objptr, ##62960
1267c     F2 14 02 FB | 	rdlong	arg02, objptr
12680     7A 00 00 FF 
12684     F0 E5 85 F1 | 	sub	objptr, ##62960
12688     00 B1 B0 FD | 	call	#__system___float_mul
1268c     A7 FA 61 FC | 	wrlong	result1, fp
12690     08 4E 05 F1 | 	add	fp, #8
12694     A7 3C 68 FC | 	wrlong	#30, fp
12698     08 4E 85 F1 | 	sub	fp, #8
1269c     A7 12 02 F6 | 	mov	arg01, fp
126a0     EC 74 BF FD | 	call	#_push
126a4                 | LR__1441
126a4     A7 F0 03 F6 | 	mov	ptra, fp
126a8     B2 00 A0 FD | 	call	#popregs_
126ac                 | _do_asin_ret
126ac     2D 00 64 FD | 	ret
126b0                 | 
126b0                 | ' 
126b0                 | ' sub do_acos
126b0                 | _do_acos
126b0     01 4A 05 F6 | 	mov	COUNT_, #1
126b4     A8 00 A0 FD | 	call	#pushregs_
126b8     10 F0 07 F1 | 	add	ptra, #16
126bc     69 00 00 FF 
126c0     E4 E5 05 F1 | 	add	objptr, ##54244
126c4     F2 1E 02 FB | 	rdlong	local01, objptr
126c8     0F 17 02 F6 | 	mov	arg03, local01
126cc     01 16 66 F0 | 	shl	arg03, #1
126d0     0F 17 02 F1 | 	add	arg03, local01
126d4     02 16 66 F0 | 	shl	arg03, #2
126d8     03 00 00 FF 
126dc     04 E4 85 F1 | 	sub	objptr, ##1540
126e0     F2 16 02 F1 | 	add	arg03, objptr
126e4     0B 17 02 FB | 	rdlong	arg03, arg03
126e8     0C 4E 05 F1 | 	add	fp, #12
126ec     A7 16 62 FC | 	wrlong	arg03, fp
126f0                 | ' 
126f0                 | ' numpar=compiledline(lineptr_e).result.uresult
126f0                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
126f0     0C 4E 85 F1 | 	sub	fp, #12
126f4     02 16 16 F2 | 	cmp	arg03, #2 wc
126f8     66 00 00 FF 
126fc     E0 E5 85 F1 | 	sub	objptr, ##52704
12700     0C 4E 05 C1 |  if_b	add	fp, #12
12704     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
12708     0C 4E 85 C1 |  if_b	sub	fp, #12
1270c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1450
12710     00 12 06 F6 | 	mov	arg01, #0
12714     84 DE B0 FD | 	call	#__system___getiolock_0442
12718     FD 12 02 F6 | 	mov	arg01, result1
1271c     48 85 B0 FD | 	call	#__system___lockmem
12720     53 01 00 FF 
12724     C6 15 06 F6 | 	mov	arg02, ##@LR__4723
12728     00 12 06 F6 | 	mov	arg01, #0
1272c     00 16 06 F6 | 	mov	arg03, #0
12730     3C 92 B0 FD | 	call	#__system___basic_print_string
12734     00 12 06 F6 | 	mov	arg01, #0
12738     60 DE B0 FD | 	call	#__system___getiolock_0442
1273c     FD 00 68 FC | 	wrlong	#0, result1
12740     27 12 06 F6 | 	mov	arg01, #39
12744     10 4F B0 FD | 	call	#_printerror
12748     64 00 90 FD | 	jmp	#LR__1451
1274c                 | LR__1450
1274c     A8 73 BF FD | 	call	#_pop
12750     FF 1E 02 F6 | 	mov	local01, result3
12754     A7 FA 61 FC | 	wrlong	result1, fp
12758     04 4E 05 F1 | 	add	fp, #4
1275c     A7 FC 61 FC | 	wrlong	result2, fp
12760     04 4E 05 F1 | 	add	fp, #4
12764     A7 1E 62 FC | 	wrlong	local01, fp
12768     08 4E 85 F1 | 	sub	fp, #8
1276c     A7 12 02 F6 | 	mov	arg01, fp
12770     80 F7 BF FD | 	call	#_converttofloat
12774     FD 12 02 F6 | 	mov	arg01, result1
12778     2C BB B0 FD | 	call	#__system____builtin_acosf
1277c     FD 12 02 F6 | 	mov	arg01, result1
12780     7A 00 00 FF 
12784     F0 E5 05 F1 | 	add	objptr, ##62960
12788     F2 14 02 FB | 	rdlong	arg02, objptr
1278c     7A 00 00 FF 
12790     F0 E5 85 F1 | 	sub	objptr, ##62960
12794     F4 AF B0 FD | 	call	#__system___float_mul
12798     A7 FA 61 FC | 	wrlong	result1, fp
1279c     08 4E 05 F1 | 	add	fp, #8
127a0     A7 3C 68 FC | 	wrlong	#30, fp
127a4     08 4E 85 F1 | 	sub	fp, #8
127a8     A7 12 02 F6 | 	mov	arg01, fp
127ac     E0 73 BF FD | 	call	#_push
127b0                 | LR__1451
127b0     A7 F0 03 F6 | 	mov	ptra, fp
127b4     B2 00 A0 FD | 	call	#popregs_
127b8                 | _do_acos_ret
127b8     2D 00 64 FD | 	ret
127bc                 | 
127bc                 | ' 
127bc                 | ' sub do_atn
127bc                 | _do_atn
127bc     01 4A 05 F6 | 	mov	COUNT_, #1
127c0     A8 00 A0 FD | 	call	#pushregs_
127c4     10 F0 07 F1 | 	add	ptra, #16
127c8     69 00 00 FF 
127cc     E4 E5 05 F1 | 	add	objptr, ##54244
127d0     F2 1E 02 FB | 	rdlong	local01, objptr
127d4     0F 17 02 F6 | 	mov	arg03, local01
127d8     01 16 66 F0 | 	shl	arg03, #1
127dc     0F 17 02 F1 | 	add	arg03, local01
127e0     02 16 66 F0 | 	shl	arg03, #2
127e4     03 00 00 FF 
127e8     04 E4 85 F1 | 	sub	objptr, ##1540
127ec     F2 16 02 F1 | 	add	arg03, objptr
127f0     0B 17 02 FB | 	rdlong	arg03, arg03
127f4     0C 4E 05 F1 | 	add	fp, #12
127f8     A7 16 62 FC | 	wrlong	arg03, fp
127fc                 | ' 
127fc                 | ' numpar=compiledline(lineptr_e).result.uresult
127fc                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
127fc     0C 4E 85 F1 | 	sub	fp, #12
12800     02 16 16 F2 | 	cmp	arg03, #2 wc
12804     66 00 00 FF 
12808     E0 E5 85 F1 | 	sub	objptr, ##52704
1280c     0C 4E 05 C1 |  if_b	add	fp, #12
12810     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
12814     0C 4E 85 C1 |  if_b	sub	fp, #12
12818     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1460
1281c     00 12 06 F6 | 	mov	arg01, #0
12820     78 DD B0 FD | 	call	#__system___getiolock_0442
12824     FD 12 02 F6 | 	mov	arg01, result1
12828     3C 84 B0 FD | 	call	#__system___lockmem
1282c     53 01 00 FF 
12830     CD 15 06 F6 | 	mov	arg02, ##@LR__4724
12834     00 12 06 F6 | 	mov	arg01, #0
12838     00 16 06 F6 | 	mov	arg03, #0
1283c     30 91 B0 FD | 	call	#__system___basic_print_string
12840     00 12 06 F6 | 	mov	arg01, #0
12844     54 DD B0 FD | 	call	#__system___getiolock_0442
12848     FD 00 68 FC | 	wrlong	#0, result1
1284c     27 12 06 F6 | 	mov	arg01, #39
12850     04 4E B0 FD | 	call	#_printerror
12854     6C 00 90 FD | 	jmp	#LR__1461
12858                 | LR__1460
12858     9C 72 BF FD | 	call	#_pop
1285c     FF 1E 02 F6 | 	mov	local01, result3
12860     A7 FA 61 FC | 	wrlong	result1, fp
12864     04 4E 05 F1 | 	add	fp, #4
12868     A7 FC 61 FC | 	wrlong	result2, fp
1286c     04 4E 05 F1 | 	add	fp, #4
12870     A7 1E 62 FC | 	wrlong	local01, fp
12874     08 4E 85 F1 | 	sub	fp, #8
12878     A7 12 02 F6 | 	mov	arg01, fp
1287c     74 F6 BF FD | 	call	#_converttofloat
12880     FD 12 02 F6 | 	mov	arg01, result1
12884     00 C0 1F FF 
12888     00 14 06 F6 | 	mov	arg02, ##1065353216
1288c     64 BA B0 FD | 	call	#__system____builtin_atan2f
12890     FD 12 02 F6 | 	mov	arg01, result1
12894     7A 00 00 FF 
12898     F0 E5 05 F1 | 	add	objptr, ##62960
1289c     F2 14 02 FB | 	rdlong	arg02, objptr
128a0     7A 00 00 FF 
128a4     F0 E5 85 F1 | 	sub	objptr, ##62960
128a8     E0 AE B0 FD | 	call	#__system___float_mul
128ac     A7 FA 61 FC | 	wrlong	result1, fp
128b0     08 4E 05 F1 | 	add	fp, #8
128b4     A7 3C 68 FC | 	wrlong	#30, fp
128b8     08 4E 85 F1 | 	sub	fp, #8
128bc     A7 12 02 F6 | 	mov	arg01, fp
128c0     CC 72 BF FD | 	call	#_push
128c4                 | LR__1461
128c4     A7 F0 03 F6 | 	mov	ptra, fp
128c8     B2 00 A0 FD | 	call	#popregs_
128cc                 | _do_atn_ret
128cc     2D 00 64 FD | 	ret
128d0                 | 
128d0                 | ' 
128d0                 | ' sub do_sqr
128d0                 | _do_sqr
128d0     01 4A 05 F6 | 	mov	COUNT_, #1
128d4     A8 00 A0 FD | 	call	#pushregs_
128d8     10 F0 07 F1 | 	add	ptra, #16
128dc     69 00 00 FF 
128e0     E4 E5 05 F1 | 	add	objptr, ##54244
128e4     F2 1E 02 FB | 	rdlong	local01, objptr
128e8     0F 17 02 F6 | 	mov	arg03, local01
128ec     01 16 66 F0 | 	shl	arg03, #1
128f0     0F 17 02 F1 | 	add	arg03, local01
128f4     02 16 66 F0 | 	shl	arg03, #2
128f8     03 00 00 FF 
128fc     04 E4 85 F1 | 	sub	objptr, ##1540
12900     F2 16 02 F1 | 	add	arg03, objptr
12904     0B 17 02 FB | 	rdlong	arg03, arg03
12908     0C 4E 05 F1 | 	add	fp, #12
1290c     A7 16 62 FC | 	wrlong	arg03, fp
12910                 | ' 
12910                 | ' numpar=compiledline(lineptr_e).result.uresult
12910                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
12910     0C 4E 85 F1 | 	sub	fp, #12
12914     02 16 16 F2 | 	cmp	arg03, #2 wc
12918     66 00 00 FF 
1291c     E0 E5 85 F1 | 	sub	objptr, ##52704
12920     0C 4E 05 C1 |  if_b	add	fp, #12
12924     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
12928     0C 4E 85 C1 |  if_b	sub	fp, #12
1292c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1470
12930     00 12 06 F6 | 	mov	arg01, #0
12934     64 DC B0 FD | 	call	#__system___getiolock_0442
12938     FD 12 02 F6 | 	mov	arg01, result1
1293c     28 83 B0 FD | 	call	#__system___lockmem
12940     53 01 00 FF 
12944     D3 15 06 F6 | 	mov	arg02, ##@LR__4725
12948     00 12 06 F6 | 	mov	arg01, #0
1294c     00 16 06 F6 | 	mov	arg03, #0
12950     1C 90 B0 FD | 	call	#__system___basic_print_string
12954     00 12 06 F6 | 	mov	arg01, #0
12958     40 DC B0 FD | 	call	#__system___getiolock_0442
1295c     FD 00 68 FC | 	wrlong	#0, result1
12960     27 12 06 F6 | 	mov	arg01, #39
12964     F0 4C B0 FD | 	call	#_printerror
12968     48 00 90 FD | 	jmp	#LR__1471
1296c                 | LR__1470
1296c     88 71 BF FD | 	call	#_pop
12970     FF 1E 02 F6 | 	mov	local01, result3
12974     A7 FA 61 FC | 	wrlong	result1, fp
12978     04 4E 05 F1 | 	add	fp, #4
1297c     A7 FC 61 FC | 	wrlong	result2, fp
12980     04 4E 05 F1 | 	add	fp, #4
12984     A7 1E 62 FC | 	wrlong	local01, fp
12988     08 4E 85 F1 | 	sub	fp, #8
1298c     A7 12 02 F6 | 	mov	arg01, fp
12990     60 F5 BF FD | 	call	#_converttofloat
12994     FD 12 02 F6 | 	mov	arg01, result1
12998     18 AD B0 FD | 	call	#__system___float_sqrt
1299c     A7 FA 61 FC | 	wrlong	result1, fp
129a0     08 4E 05 F1 | 	add	fp, #8
129a4     A7 3C 68 FC | 	wrlong	#30, fp
129a8     08 4E 85 F1 | 	sub	fp, #8
129ac     A7 12 02 F6 | 	mov	arg01, fp
129b0     DC 71 BF FD | 	call	#_push
129b4                 | LR__1471
129b4     A7 F0 03 F6 | 	mov	ptra, fp
129b8     B2 00 A0 FD | 	call	#popregs_
129bc                 | _do_sqr_ret
129bc     2D 00 64 FD | 	ret
129c0                 | 
129c0                 | ' 
129c0                 | ' sub do_stick
129c0                 | _do_stick
129c0     01 4A 05 F6 | 	mov	COUNT_, #1
129c4     A8 00 A0 FD | 	call	#pushregs_
129c8     10 F0 07 F1 | 	add	ptra, #16
129cc     69 00 00 FF 
129d0     E4 E5 05 F1 | 	add	objptr, ##54244
129d4     F2 1E 02 FB | 	rdlong	local01, objptr
129d8     0F 17 02 F6 | 	mov	arg03, local01
129dc     01 16 66 F0 | 	shl	arg03, #1
129e0     0F 17 02 F1 | 	add	arg03, local01
129e4     02 16 66 F0 | 	shl	arg03, #2
129e8     03 00 00 FF 
129ec     04 E4 85 F1 | 	sub	objptr, ##1540
129f0     F2 16 02 F1 | 	add	arg03, objptr
129f4     0B 17 02 FB | 	rdlong	arg03, arg03
129f8     0C 4E 05 F1 | 	add	fp, #12
129fc     A7 16 62 FC | 	wrlong	arg03, fp
12a00                 | ' 
12a00                 | ' numpar=compiledline(lineptr_e).result.uresult
12a00                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
12a00     0C 4E 85 F1 | 	sub	fp, #12
12a04     02 16 16 F2 | 	cmp	arg03, #2 wc
12a08     66 00 00 FF 
12a0c     E0 E5 85 F1 | 	sub	objptr, ##52704
12a10     3C 00 90 CD |  if_b	jmp	#LR__1480
12a14     00 12 06 F6 | 	mov	arg01, #0
12a18     80 DB B0 FD | 	call	#__system___getiolock_0442
12a1c     FD 12 02 F6 | 	mov	arg01, result1
12a20     44 82 B0 FD | 	call	#__system___lockmem
12a24     53 01 00 FF 
12a28     D9 15 06 F6 | 	mov	arg02, ##@LR__4726
12a2c     00 12 06 F6 | 	mov	arg01, #0
12a30     00 16 06 F6 | 	mov	arg03, #0
12a34     38 8F B0 FD | 	call	#__system___basic_print_string
12a38     00 12 06 F6 | 	mov	arg01, #0
12a3c     5C DB B0 FD | 	call	#__system___getiolock_0442
12a40     FD 00 68 FC | 	wrlong	#0, result1
12a44     27 12 06 F6 | 	mov	arg01, #39
12a48     0C 4C B0 FD | 	call	#_printerror
12a4c     E8 00 90 FD | 	jmp	#LR__1484
12a50                 | LR__1480
12a50                 | ' 
12a50                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
12a50     0C 4E 05 F1 | 	add	fp, #12
12a54     A7 FE 09 FB | 	rdlong	result3, fp wz
12a58     0C 4E 85 F1 | 	sub	fp, #12
12a5c     30 00 90 5D |  if_ne	jmp	#LR__1481
12a60     7A 00 00 FF 
12a64     60 E5 05 F1 | 	add	objptr, ##62816
12a68     F2 1E 02 FB | 	rdlong	local01, objptr
12a6c     7A 00 00 FF 
12a70     60 E5 85 F1 | 	sub	objptr, ##62816
12a74     A7 1E 62 FC | 	wrlong	local01, fp
12a78     08 4E 05 F1 | 	add	fp, #8
12a7c     A7 3A 68 FC | 	wrlong	#29, fp
12a80     08 4E 85 F1 | 	sub	fp, #8
12a84     A7 12 02 F6 | 	mov	arg01, fp
12a88     04 71 BF FD | 	call	#_push
12a8c     A8 00 90 FD | 	jmp	#LR__1484
12a90                 | LR__1481
12a90     64 70 BF FD | 	call	#_pop
12a94     A7 FA 61 FC | 	wrlong	result1, fp
12a98     04 4E 05 F1 | 	add	fp, #4
12a9c     A7 FC 61 FC | 	wrlong	result2, fp
12aa0     04 4E 05 F1 | 	add	fp, #4
12aa4     A7 FE 61 FC | 	wrlong	result3, fp
12aa8                 | ' 
12aa8                 | ' t1=pop()
12aa8                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
12aa8     08 4E 85 F1 | 	sub	fp, #8
12aac     1C FE 0D F2 | 	cmp	result3, #28 wz
12ab0     08 4E 05 51 |  if_ne	add	fp, #8
12ab4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12ab8     08 4E 85 51 |  if_ne	sub	fp, #8
12abc     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
12ac0     6C 00 90 5D |  if_ne	jmp	#LR__1483
12ac4     A7 1E 02 FB | 	rdlong	local01, fp
12ac8     7B 00 00 FF 
12acc     48 E4 05 F1 | 	add	objptr, ##63048
12ad0     F2 1E 62 FC | 	wrlong	local01, objptr
12ad4                 | '   q=t1.result.uresult
12ad4                 | '   if q<7 then 
12ad4     7B 00 00 FF 
12ad8     48 E4 85 F1 | 	sub	objptr, ##63048
12adc     07 1E 56 F2 | 	cmps	local01, #7 wc
12ae0     40 00 90 3D |  if_ae	jmp	#LR__1482
12ae4     7B 00 00 FF 
12ae8     48 E4 05 F1 | 	add	objptr, ##63048
12aec     F2 1E 02 FB | 	rdlong	local01, objptr
12af0     02 1E 66 F0 | 	shl	local01, #2
12af4     E8 E4 85 F1 | 	sub	objptr, #232
12af8     F2 1E 02 F1 | 	add	local01, objptr
12afc     0F 1F 02 FB | 	rdlong	local01, local01
12b00     A7 1E 62 FC | 	wrlong	local01, fp
12b04     08 4E 05 F1 | 	add	fp, #8
12b08     A7 3A 68 FC | 	wrlong	#29, fp
12b0c     08 4E 85 F1 | 	sub	fp, #8
12b10     A7 12 02 F6 | 	mov	arg01, fp
12b14     7A 00 00 FF 
12b18     60 E5 85 F1 | 	sub	objptr, ##62816
12b1c     70 70 BF FD | 	call	#_push
12b20                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
12b20     14 00 90 FD | 	jmp	#LR__1484
12b24                 | LR__1482
12b24     29 12 06 F6 | 	mov	arg01, #41
12b28     2C 4B B0 FD | 	call	#_printerror
12b2c                 | '      printerror(41) : return
12b2c     08 00 90 FD | 	jmp	#LR__1484
12b30                 | LR__1483
12b30     29 12 06 F6 | 	mov	arg01, #41
12b34     20 4B B0 FD | 	call	#_printerror
12b38                 | LR__1484
12b38     A7 F0 03 F6 | 	mov	ptra, fp
12b3c     B2 00 A0 FD | 	call	#popregs_
12b40                 | _do_stick_ret
12b40     2D 00 64 FD | 	ret
12b44                 | 
12b44                 | ' 
12b44                 | ' sub do_strig
12b44                 | _do_strig
12b44     01 4A 05 F6 | 	mov	COUNT_, #1
12b48     A8 00 A0 FD | 	call	#pushregs_
12b4c     10 F0 07 F1 | 	add	ptra, #16
12b50     69 00 00 FF 
12b54     E4 E5 05 F1 | 	add	objptr, ##54244
12b58     F2 1E 02 FB | 	rdlong	local01, objptr
12b5c     0F 17 02 F6 | 	mov	arg03, local01
12b60     01 16 66 F0 | 	shl	arg03, #1
12b64     0F 17 02 F1 | 	add	arg03, local01
12b68     02 16 66 F0 | 	shl	arg03, #2
12b6c     03 00 00 FF 
12b70     04 E4 85 F1 | 	sub	objptr, ##1540
12b74     F2 16 02 F1 | 	add	arg03, objptr
12b78     0B 17 02 FB | 	rdlong	arg03, arg03
12b7c     0C 4E 05 F1 | 	add	fp, #12
12b80     A7 16 62 FC | 	wrlong	arg03, fp
12b84                 | ' 
12b84                 | ' numpar=compiledline(lineptr_e).result.uresult
12b84                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
12b84     0C 4E 85 F1 | 	sub	fp, #12
12b88     02 16 16 F2 | 	cmp	arg03, #2 wc
12b8c     66 00 00 FF 
12b90     E0 E5 85 F1 | 	sub	objptr, ##52704
12b94     3C 00 90 CD |  if_b	jmp	#LR__1490
12b98     00 12 06 F6 | 	mov	arg01, #0
12b9c     FC D9 B0 FD | 	call	#__system___getiolock_0442
12ba0     FD 12 02 F6 | 	mov	arg01, result1
12ba4     C0 80 B0 FD | 	call	#__system___lockmem
12ba8     53 01 00 FF 
12bac     E1 15 06 F6 | 	mov	arg02, ##@LR__4727
12bb0     00 12 06 F6 | 	mov	arg01, #0
12bb4     00 16 06 F6 | 	mov	arg03, #0
12bb8     B4 8D B0 FD | 	call	#__system___basic_print_string
12bbc     00 12 06 F6 | 	mov	arg01, #0
12bc0     D8 D9 B0 FD | 	call	#__system___getiolock_0442
12bc4     FD 00 68 FC | 	wrlong	#0, result1
12bc8     27 12 06 F6 | 	mov	arg01, #39
12bcc     88 4A B0 FD | 	call	#_printerror
12bd0     E8 00 90 FD | 	jmp	#LR__1494
12bd4                 | LR__1490
12bd4                 | ' 
12bd4                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
12bd4     0C 4E 05 F1 | 	add	fp, #12
12bd8     A7 FE 09 FB | 	rdlong	result3, fp wz
12bdc     0C 4E 85 F1 | 	sub	fp, #12
12be0     30 00 90 5D |  if_ne	jmp	#LR__1491
12be4     7A 00 00 FF 
12be8     7C E5 05 F1 | 	add	objptr, ##62844
12bec     F2 1E 02 FB | 	rdlong	local01, objptr
12bf0     7A 00 00 FF 
12bf4     7C E5 85 F1 | 	sub	objptr, ##62844
12bf8     A7 1E 62 FC | 	wrlong	local01, fp
12bfc     08 4E 05 F1 | 	add	fp, #8
12c00     A7 3A 68 FC | 	wrlong	#29, fp
12c04     08 4E 85 F1 | 	sub	fp, #8
12c08     A7 12 02 F6 | 	mov	arg01, fp
12c0c     80 6F BF FD | 	call	#_push
12c10     A8 00 90 FD | 	jmp	#LR__1494
12c14                 | LR__1491
12c14     E0 6E BF FD | 	call	#_pop
12c18     A7 FA 61 FC | 	wrlong	result1, fp
12c1c     04 4E 05 F1 | 	add	fp, #4
12c20     A7 FC 61 FC | 	wrlong	result2, fp
12c24     04 4E 05 F1 | 	add	fp, #4
12c28     A7 FE 61 FC | 	wrlong	result3, fp
12c2c                 | ' 
12c2c                 | ' t1=pop()
12c2c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
12c2c     08 4E 85 F1 | 	sub	fp, #8
12c30     1C FE 0D F2 | 	cmp	result3, #28 wz
12c34     08 4E 05 51 |  if_ne	add	fp, #8
12c38     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12c3c     08 4E 85 51 |  if_ne	sub	fp, #8
12c40     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
12c44     6C 00 90 5D |  if_ne	jmp	#LR__1493
12c48     A7 1E 02 FB | 	rdlong	local01, fp
12c4c     7B 00 00 FF 
12c50     48 E4 05 F1 | 	add	objptr, ##63048
12c54     F2 1E 62 FC | 	wrlong	local01, objptr
12c58                 | '   q=t1.result.uresult
12c58                 | '   if q<7 then 
12c58     7B 00 00 FF 
12c5c     48 E4 85 F1 | 	sub	objptr, ##63048
12c60     07 1E 56 F2 | 	cmps	local01, #7 wc
12c64     40 00 90 3D |  if_ae	jmp	#LR__1492
12c68     7B 00 00 FF 
12c6c     48 E4 05 F1 | 	add	objptr, ##63048
12c70     F2 1E 02 FB | 	rdlong	local01, objptr
12c74     02 1E 66 F0 | 	shl	local01, #2
12c78     CC E4 85 F1 | 	sub	objptr, #204
12c7c     F2 1E 02 F1 | 	add	local01, objptr
12c80     0F 1F 02 FB | 	rdlong	local01, local01
12c84     A7 1E 62 FC | 	wrlong	local01, fp
12c88     08 4E 05 F1 | 	add	fp, #8
12c8c     A7 3A 68 FC | 	wrlong	#29, fp
12c90     08 4E 85 F1 | 	sub	fp, #8
12c94     A7 12 02 F6 | 	mov	arg01, fp
12c98     7A 00 00 FF 
12c9c     7C E5 85 F1 | 	sub	objptr, ##62844
12ca0     EC 6E BF FD | 	call	#_push
12ca4                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
12ca4     14 00 90 FD | 	jmp	#LR__1494
12ca8                 | LR__1492
12ca8     29 12 06 F6 | 	mov	arg01, #41
12cac     A8 49 B0 FD | 	call	#_printerror
12cb0                 | '      printerror(41) : return
12cb0     08 00 90 FD | 	jmp	#LR__1494
12cb4                 | LR__1493
12cb4     29 12 06 F6 | 	mov	arg01, #41
12cb8     9C 49 B0 FD | 	call	#_printerror
12cbc                 | LR__1494
12cbc     A7 F0 03 F6 | 	mov	ptra, fp
12cc0     B2 00 A0 FD | 	call	#popregs_
12cc4                 | _do_strig_ret
12cc4     2D 00 64 FD | 	ret
12cc8                 | 
12cc8                 | ' 
12cc8                 | ' sub do_getpixel
12cc8                 | _do_getpixel
12cc8     00 4A 05 F6 | 	mov	COUNT_, #0
12ccc     A8 00 A0 FD | 	call	#pushregs_
12cd0     24 F0 07 F1 | 	add	ptra, #36
12cd4     69 00 00 FF 
12cd8     E4 E5 05 F1 | 	add	objptr, ##54244
12cdc     F2 16 02 FB | 	rdlong	arg03, objptr
12ce0     0B 15 02 F6 | 	mov	arg02, arg03
12ce4     01 14 66 F0 | 	shl	arg02, #1
12ce8     0B 15 02 F1 | 	add	arg02, arg03
12cec     02 14 66 F0 | 	shl	arg02, #2
12cf0     03 00 00 FF 
12cf4     04 E4 85 F1 | 	sub	objptr, ##1540
12cf8     F2 14 02 F1 | 	add	arg02, objptr
12cfc     0A 17 02 FB | 	rdlong	arg03, arg02
12d00     18 4E 05 F1 | 	add	fp, #24
12d04     A7 16 62 FC | 	wrlong	arg03, fp
12d08                 | ' 
12d08                 | ' numpar=compiledline(lineptr_e).result.uresult
12d08                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
12d08     18 4E 85 F1 | 	sub	fp, #24
12d0c     02 16 0E F2 | 	cmp	arg03, #2 wz
12d10     66 00 00 FF 
12d14     E0 E5 85 F1 | 	sub	objptr, ##52704
12d18     3C 00 90 AD |  if_e	jmp	#LR__1500
12d1c     00 12 06 F6 | 	mov	arg01, #0
12d20     78 D8 B0 FD | 	call	#__system___getiolock_0442
12d24     FD 12 02 F6 | 	mov	arg01, result1
12d28     3C 7F B0 FD | 	call	#__system___lockmem
12d2c     53 01 00 FF 
12d30     E9 15 06 F6 | 	mov	arg02, ##@LR__4728
12d34     00 12 06 F6 | 	mov	arg01, #0
12d38     00 16 06 F6 | 	mov	arg03, #0
12d3c     30 8C B0 FD | 	call	#__system___basic_print_string
12d40     00 12 06 F6 | 	mov	arg01, #0
12d44     54 D8 B0 FD | 	call	#__system___getiolock_0442
12d48     FD 00 68 FC | 	wrlong	#0, result1
12d4c     27 12 06 F6 | 	mov	arg01, #39
12d50     04 49 B0 FD | 	call	#_printerror
12d54     B4 00 90 FD | 	jmp	#LR__1501
12d58                 | LR__1500
12d58     9C 6D BF FD | 	call	#_pop
12d5c     FD 16 02 F6 | 	mov	arg03, result1
12d60     FE 14 02 F6 | 	mov	arg02, result2
12d64     FF 12 02 F6 | 	mov	arg01, result3
12d68     0C 4E 05 F1 | 	add	fp, #12
12d6c     A7 16 62 FC | 	wrlong	arg03, fp
12d70     04 4E 05 F1 | 	add	fp, #4
12d74     A7 14 62 FC | 	wrlong	arg02, fp
12d78     04 4E 05 F1 | 	add	fp, #4
12d7c     A7 12 62 FC | 	wrlong	arg01, fp
12d80     14 4E 85 F1 | 	sub	fp, #20
12d84     70 6D BF FD | 	call	#_pop
12d88     FF 16 02 F6 | 	mov	arg03, result3
12d8c     A7 FA 61 FC | 	wrlong	result1, fp
12d90     04 4E 05 F1 | 	add	fp, #4
12d94     A7 FC 61 FC | 	wrlong	result2, fp
12d98     04 4E 05 F1 | 	add	fp, #4
12d9c     A7 16 62 FC | 	wrlong	arg03, fp
12da0     08 4E 85 F1 | 	sub	fp, #8
12da4     A7 12 02 F6 | 	mov	arg01, fp
12da8     9C F0 BF FD | 	call	#_converttoint
12dac     1C 4E 05 F1 | 	add	fp, #28
12db0     A7 FA 61 FC | 	wrlong	result1, fp
12db4     10 4E 85 F1 | 	sub	fp, #16
12db8     A7 12 02 F6 | 	mov	arg01, fp
12dbc     0C 4E 85 F1 | 	sub	fp, #12
12dc0     84 F0 BF FD | 	call	#_converttoint
12dc4     FD 16 02 F6 | 	mov	arg03, result1
12dc8     20 4E 05 F1 | 	add	fp, #32
12dcc     A7 16 62 FC | 	wrlong	arg03, fp
12dd0     F2 12 02 FB | 	rdlong	arg01, objptr
12dd4     04 4E 85 F1 | 	sub	fp, #4
12dd8     A7 FE 01 FB | 	rdlong	result3, fp
12ddc     FF 12 02 F1 | 	add	arg01, result3
12de0     1C 4E 85 F1 | 	sub	fp, #28
12de4     0A 16 66 F0 | 	shl	arg03, #10
12de8     0B 13 02 F1 | 	add	arg01, arg03
12dec     CC 49 B0 FD | 	call	#_pspeek
12df0     FD FA E1 F8 | 	getbyte	result1, result1, #0
12df4     A7 FA 61 FC | 	wrlong	result1, fp
12df8     08 4E 05 F1 | 	add	fp, #8
12dfc     A7 3A 68 FC | 	wrlong	#29, fp
12e00     08 4E 85 F1 | 	sub	fp, #8
12e04     A7 12 02 F6 | 	mov	arg01, fp
12e08     84 6D BF FD | 	call	#_push
12e0c                 | LR__1501
12e0c     A7 F0 03 F6 | 	mov	ptra, fp
12e10     B2 00 A0 FD | 	call	#popregs_
12e14                 | _do_getpixel_ret
12e14     2D 00 64 FD | 	ret
12e18                 | 
12e18                 | ' 
12e18                 | ' 
12e18                 | ' 
12e18                 | ' sub do_defsprite
12e18                 | _do_defsprite
12e18     07 4A 05 F6 | 	mov	COUNT_, #7
12e1c     A8 00 A0 FD | 	call	#pushregs_
12e20     5C F0 07 F1 | 	add	ptra, #92
12e24     D0 6C BF FD | 	call	#_pop
12e28     FD 16 02 F6 | 	mov	arg03, result1
12e2c     FE 14 02 F6 | 	mov	arg02, result2
12e30     FF 12 02 F6 | 	mov	arg01, result3
12e34     30 4E 05 F1 | 	add	fp, #48
12e38     A7 16 62 FC | 	wrlong	arg03, fp
12e3c     04 4E 05 F1 | 	add	fp, #4
12e40     A7 14 62 FC | 	wrlong	arg02, fp
12e44     04 4E 05 F1 | 	add	fp, #4
12e48     A7 12 62 FC | 	wrlong	arg01, fp
12e4c     38 4E 85 F1 | 	sub	fp, #56
12e50     A4 6C BF FD | 	call	#_pop
12e54     FD 16 02 F6 | 	mov	arg03, result1
12e58     FE 14 02 F6 | 	mov	arg02, result2
12e5c     FF 12 02 F6 | 	mov	arg01, result3
12e60     24 4E 05 F1 | 	add	fp, #36
12e64     A7 16 62 FC | 	wrlong	arg03, fp
12e68     04 4E 05 F1 | 	add	fp, #4
12e6c     A7 14 62 FC | 	wrlong	arg02, fp
12e70     04 4E 05 F1 | 	add	fp, #4
12e74     A7 12 62 FC | 	wrlong	arg01, fp
12e78     2C 4E 85 F1 | 	sub	fp, #44
12e7c     78 6C BF FD | 	call	#_pop
12e80     FD 16 02 F6 | 	mov	arg03, result1
12e84     FE 14 02 F6 | 	mov	arg02, result2
12e88     FF 12 02 F6 | 	mov	arg01, result3
12e8c     18 4E 05 F1 | 	add	fp, #24
12e90     A7 16 62 FC | 	wrlong	arg03, fp
12e94     04 4E 05 F1 | 	add	fp, #4
12e98     A7 14 62 FC | 	wrlong	arg02, fp
12e9c     04 4E 05 F1 | 	add	fp, #4
12ea0     A7 12 62 FC | 	wrlong	arg01, fp
12ea4     20 4E 85 F1 | 	sub	fp, #32
12ea8     4C 6C BF FD | 	call	#_pop
12eac     FD 16 02 F6 | 	mov	arg03, result1
12eb0     FE 14 02 F6 | 	mov	arg02, result2
12eb4     FF 12 02 F6 | 	mov	arg01, result3
12eb8     0C 4E 05 F1 | 	add	fp, #12
12ebc     A7 16 62 FC | 	wrlong	arg03, fp
12ec0     04 4E 05 F1 | 	add	fp, #4
12ec4     A7 14 62 FC | 	wrlong	arg02, fp
12ec8     04 4E 05 F1 | 	add	fp, #4
12ecc     A7 12 62 FC | 	wrlong	arg01, fp
12ed0     14 4E 85 F1 | 	sub	fp, #20
12ed4     20 6C BF FD | 	call	#_pop
12ed8     FF 16 02 F6 | 	mov	arg03, result3
12edc     A7 FA 61 FC | 	wrlong	result1, fp
12ee0     04 4E 05 F1 | 	add	fp, #4
12ee4     A7 FC 61 FC | 	wrlong	result2, fp
12ee8     04 4E 05 F1 | 	add	fp, #4
12eec     A7 16 62 FC | 	wrlong	arg03, fp
12ef0     08 4E 85 F1 | 	sub	fp, #8
12ef4     A7 12 02 F6 | 	mov	arg01, fp
12ef8     4C EF BF FD | 	call	#_converttoint
12efc     3C 4E 05 F1 | 	add	fp, #60
12f00     A7 FA 61 FC | 	wrlong	result1, fp
12f04     30 4E 85 F1 | 	sub	fp, #48
12f08     A7 12 02 F6 | 	mov	arg01, fp
12f0c     0C 4E 85 F1 | 	sub	fp, #12
12f10     34 EF BF FD | 	call	#_converttoint
12f14     40 4E 05 F1 | 	add	fp, #64
12f18     A7 FA 61 FC | 	wrlong	result1, fp
12f1c     28 4E 85 F1 | 	sub	fp, #40
12f20     A7 12 02 F6 | 	mov	arg01, fp
12f24     18 4E 85 F1 | 	sub	fp, #24
12f28     1C EF BF FD | 	call	#_converttoint
12f2c     44 4E 05 F1 | 	add	fp, #68
12f30     A7 FA 61 FC | 	wrlong	result1, fp
12f34     20 4E 85 F1 | 	sub	fp, #32
12f38     A7 12 02 F6 | 	mov	arg01, fp
12f3c     24 4E 85 F1 | 	sub	fp, #36
12f40     04 EF BF FD | 	call	#_converttoint
12f44     48 4E 05 F1 | 	add	fp, #72
12f48     A7 FA 61 FC | 	wrlong	result1, fp
12f4c     18 4E 85 F1 | 	sub	fp, #24
12f50     A7 12 02 F6 | 	mov	arg01, fp
12f54     30 4E 85 F1 | 	sub	fp, #48
12f58     EC EE BF FD | 	call	#_converttoint
12f5c     4C 4E 05 F1 | 	add	fp, #76
12f60     A7 FA 61 FC | 	wrlong	result1, fp
12f64                 | ' 
12f64                 | ' t5=pop()
12f64                 | ' t4=pop()
12f64                 | ' t3=pop()
12f64                 | ' t2=pop()
12f64                 | ' t1=pop()
12f64                 | ' 
12f64                 | ' ' do convert, defsprite is not a racing command
12f64                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
12f64                 | '  
12f64                 | ' ' todo: check parameters for linits
12f64                 | ' if sprite(a1)<> nil then delete(sprite(a1))
12f64     10 4E 85 F1 | 	sub	fp, #16
12f68     A7 16 02 FB | 	rdlong	arg03, fp
12f6c     3C 4E 85 F1 | 	sub	fp, #60
12f70     02 16 66 F0 | 	shl	arg03, #2
12f74     7A 00 00 FF 
12f78     98 E5 05 F1 | 	add	objptr, ##62872
12f7c     F2 16 02 F1 | 	add	arg03, objptr
12f80     0B 17 0A FB | 	rdlong	arg03, arg03 wz
12f84     7A 00 00 FF 
12f88     98 E5 85 F1 | 	sub	objptr, ##62872
12f8c     2C 00 90 AD |  if_e	jmp	#LR__1510
12f90     3C 4E 05 F1 | 	add	fp, #60
12f94     A7 16 02 FB | 	rdlong	arg03, fp
12f98     3C 4E 85 F1 | 	sub	fp, #60
12f9c     02 16 66 F0 | 	shl	arg03, #2
12fa0     7A 00 00 FF 
12fa4     98 E5 05 F1 | 	add	objptr, ##62872
12fa8     F2 16 02 F1 | 	add	arg03, objptr
12fac     0B 13 02 FB | 	rdlong	arg01, arg03
12fb0     7A 00 00 FF 
12fb4     98 E5 85 F1 | 	sub	objptr, ##62872
12fb8     D8 BB B0 FD | 	call	#__system___gc_free
12fbc                 | LR__1510
12fbc     3C 4E 05 F1 | 	add	fp, #60
12fc0     A7 1E 02 FB | 	rdlong	local01, fp
12fc4     0C 4E 05 F1 | 	add	fp, #12
12fc8     A7 16 02 FB | 	rdlong	arg03, fp
12fcc     04 4E 05 F1 | 	add	fp, #4
12fd0     A7 14 02 FB | 	rdlong	arg02, fp
12fd4     0A 17 02 FD | 	qmul	arg03, arg02
12fd8     02 1E 66 F0 | 	shl	local01, #2
12fdc     7A 00 00 FF 
12fe0     98 E5 05 F1 | 	add	objptr, ##62872
12fe4     F2 1E 02 F1 | 	add	local01, objptr
12fe8     4C 4E 85 F1 | 	sub	fp, #76
12fec     7A 00 00 FF 
12ff0     98 E5 85 F1 | 	sub	objptr, ##62872
12ff4     18 12 62 FD | 	getqx	arg01
12ff8     5C BA B0 FD | 	call	#__system___gc_alloc_managed
12ffc     0F FB 61 FC | 	wrlong	result1, local01
13000                 | ' for y=a3 to a3+a5-1
13000     44 4E 05 F1 | 	add	fp, #68
13004     A7 20 02 FB | 	rdlong	local02, fp
13008     0C 4E 05 F1 | 	add	fp, #12
1300c     A7 20 62 FC | 	wrlong	local02, fp
13010     0C 4E 85 F1 | 	sub	fp, #12
13014     A7 22 02 FB | 	rdlong	local03, fp
13018     08 4E 05 F1 | 	add	fp, #8
1301c     A7 24 02 FB | 	rdlong	local04, fp
13020     4C 4E 85 F1 | 	sub	fp, #76
13024     12 23 02 F1 | 	add	local03, local04
13028                 | LR__1511
13028     50 4E 05 F1 | 	add	fp, #80
1302c     A7 20 02 FB | 	rdlong	local02, fp
13030     50 4E 85 F1 | 	sub	fp, #80
13034     11 21 52 F2 | 	cmps	local02, local03 wc
13038     10 01 90 3D |  if_ae	jmp	#LR__1514
1303c                 | '   for x=a2 to a4+a2-1
1303c     40 4E 05 F1 | 	add	fp, #64
13040     A7 1E 02 FB | 	rdlong	local01, fp
13044     7B 00 00 FF 
13048     1C E4 05 F1 | 	add	objptr, ##63004
1304c     F2 1E 62 FC | 	wrlong	local01, objptr
13050     7B 00 00 FF 
13054     1C E4 85 F1 | 	sub	objptr, ##63004
13058     08 4E 05 F1 | 	add	fp, #8
1305c     A7 26 02 FB | 	rdlong	local05, fp
13060     08 4E 85 F1 | 	sub	fp, #8
13064     A7 28 02 FB | 	rdlong	local06, fp
13068     40 4E 85 F1 | 	sub	fp, #64
1306c     14 27 02 F1 | 	add	local05, local06
13070                 | LR__1512
13070     7B 00 00 FF 
13074     1C E4 05 F1 | 	add	objptr, ##63004
13078     F2 1E 02 FB | 	rdlong	local01, objptr
1307c     7B 00 00 FF 
13080     1C E4 85 F1 | 	sub	objptr, ##63004
13084     13 1F 52 F2 | 	cmps	local01, local05 wc
13088     A8 00 90 3D |  if_ae	jmp	#LR__1513
1308c     3C 4E 05 F1 | 	add	fp, #60
13090     A7 28 02 FB | 	rdlong	local06, fp
13094     04 4E 05 F1 | 	add	fp, #4
13098     A7 24 02 FB | 	rdlong	local04, fp
1309c     10 4E 05 F1 | 	add	fp, #16
130a0     A7 20 02 FB | 	rdlong	local02, fp
130a4     10 1F 02 F6 | 	mov	local01, local02
130a8     0C 4E 85 F1 | 	sub	fp, #12
130ac     A7 16 02 FB | 	rdlong	arg03, fp
130b0     0B 1F 82 F1 | 	sub	local01, arg03
130b4     04 4E 05 F1 | 	add	fp, #4
130b8     A7 16 02 FB | 	rdlong	arg03, fp
130bc     0B 1F 02 FD | 	qmul	local01, arg03
130c0     02 28 66 F0 | 	shl	local06, #2
130c4     7A 00 00 FF 
130c8     98 E5 05 F1 | 	add	objptr, ##62872
130cc     F2 28 02 F1 | 	add	local06, objptr
130d0     14 29 02 FB | 	rdlong	local06, local06
130d4     84 E4 05 F1 | 	add	objptr, #132
130d8     F2 1E 02 FB | 	rdlong	local01, objptr
130dc     7B 00 00 FF 
130e0     1C E4 85 F1 | 	sub	objptr, ##63004
130e4     0F 2B 02 F6 | 	mov	local07, local01
130e8     12 2B 82 F1 | 	sub	local07, local04
130ec     F2 12 02 FB | 	rdlong	arg01, objptr
130f0     0F 13 02 F1 | 	add	arg01, local01
130f4     48 4E 85 F1 | 	sub	fp, #72
130f8     0A 20 66 F0 | 	shl	local02, #10
130fc     10 13 02 F1 | 	add	arg01, local02
13100     18 24 62 FD | 	getqx	local04
13104     12 2B 02 F1 | 	add	local07, local04
13108     14 2B 02 F1 | 	add	local07, local06
1310c     AC 46 B0 FD | 	call	#_pspeek
13110     15 FB 41 FC | 	wrbyte	result1, local07
13114     7B 00 00 FF 
13118     1C E4 05 F1 | 	add	objptr, ##63004
1311c     F2 2A 02 FB | 	rdlong	local07, objptr
13120     01 2A 06 F1 | 	add	local07, #1
13124     F2 2A 62 FC | 	wrlong	local07, objptr
13128     7B 00 00 FF 
1312c     1C E4 85 F1 | 	sub	objptr, ##63004
13130     3C FF 9F FD | 	jmp	#LR__1512
13134                 | LR__1513
13134     50 4E 05 F1 | 	add	fp, #80
13138     A7 2A 02 FB | 	rdlong	local07, fp
1313c     01 2A 06 F1 | 	add	local07, #1
13140     A7 2A 62 FC | 	wrlong	local07, fp
13144     50 4E 85 F1 | 	sub	fp, #80
13148     DC FE 9F FD | 	jmp	#LR__1511
1314c                 | LR__1514
1314c     3C 4E 05 F1 | 	add	fp, #60
13150     A7 2A 02 FB | 	rdlong	local07, fp
13154     15 13 02 F6 | 	mov	arg01, local07
13158     3C 4E 85 F1 | 	sub	fp, #60
1315c     02 2A 66 F0 | 	shl	local07, #2
13160     7A 00 00 FF 
13164     98 E5 05 F1 | 	add	objptr, ##62872
13168     F2 2A 02 F1 | 	add	local07, objptr
1316c     15 15 02 FB | 	rdlong	arg02, local07
13170     7A 00 00 FF 
13174     98 E5 85 F1 | 	sub	objptr, ##62872
13178     64 5A B0 FD | 	call	#_hg010b_spin2_setspriteptr
1317c     3C 4E 05 F1 | 	add	fp, #60
13180     A7 12 02 FB | 	rdlong	arg01, fp
13184     0C 4E 05 F1 | 	add	fp, #12
13188     A7 14 02 FB | 	rdlong	arg02, fp
1318c     04 4E 05 F1 | 	add	fp, #4
13190     A7 16 02 FB | 	rdlong	arg03, fp
13194     4C 4E 85 F1 | 	sub	fp, #76
13198     B8 5A B0 FD | 	call	#_hg010b_spin2_setspritesize
1319c     A7 F0 03 F6 | 	mov	ptra, fp
131a0     B2 00 A0 FD | 	call	#popregs_
131a4                 | _do_defsprite_ret
131a4     2D 00 64 FD | 	ret
131a8                 | 
131a8                 | ' 
131a8                 | ' sub do_sprite
131a8                 | _do_sprite
131a8     00 4A 05 F6 | 	mov	COUNT_, #0
131ac     A8 00 A0 FD | 	call	#pushregs_
131b0     30 F0 07 F1 | 	add	ptra, #48
131b4     40 69 BF FD | 	call	#_pop
131b8     FD 16 02 F6 | 	mov	arg03, result1
131bc     FE 14 02 F6 | 	mov	arg02, result2
131c0     FF 12 02 F6 | 	mov	arg01, result3
131c4     18 4E 05 F1 | 	add	fp, #24
131c8     A7 16 62 FC | 	wrlong	arg03, fp
131cc     04 4E 05 F1 | 	add	fp, #4
131d0     A7 14 62 FC | 	wrlong	arg02, fp
131d4     04 4E 05 F1 | 	add	fp, #4
131d8     A7 12 62 FC | 	wrlong	arg01, fp
131dc     20 4E 85 F1 | 	sub	fp, #32
131e0     14 69 BF FD | 	call	#_pop
131e4     FD 16 02 F6 | 	mov	arg03, result1
131e8     FE 14 02 F6 | 	mov	arg02, result2
131ec     FF 12 02 F6 | 	mov	arg01, result3
131f0     0C 4E 05 F1 | 	add	fp, #12
131f4     A7 16 62 FC | 	wrlong	arg03, fp
131f8     04 4E 05 F1 | 	add	fp, #4
131fc     A7 14 62 FC | 	wrlong	arg02, fp
13200     04 4E 05 F1 | 	add	fp, #4
13204     A7 12 62 FC | 	wrlong	arg01, fp
13208     14 4E 85 F1 | 	sub	fp, #20
1320c     E8 68 BF FD | 	call	#_pop
13210     FF 16 02 F6 | 	mov	arg03, result3
13214     A7 FA 61 FC | 	wrlong	result1, fp
13218     04 4E 05 F1 | 	add	fp, #4
1321c     A7 FC 61 FC | 	wrlong	result2, fp
13220     04 4E 05 F1 | 	add	fp, #4
13224     A7 16 62 FC | 	wrlong	arg03, fp
13228     08 4E 85 F1 | 	sub	fp, #8
1322c     A7 12 02 F6 | 	mov	arg01, fp
13230     14 EC BF FD | 	call	#_converttoint
13234     24 4E 05 F1 | 	add	fp, #36
13238     A7 FA 61 FC | 	wrlong	result1, fp
1323c     18 4E 85 F1 | 	sub	fp, #24
13240     A7 12 02 F6 | 	mov	arg01, fp
13244     0C 4E 85 F1 | 	sub	fp, #12
13248     FC EB BF FD | 	call	#_converttoint
1324c     28 4E 05 F1 | 	add	fp, #40
13250     A7 FA 61 FC | 	wrlong	result1, fp
13254     10 4E 85 F1 | 	sub	fp, #16
13258     A7 12 02 F6 | 	mov	arg01, fp
1325c     18 4E 85 F1 | 	sub	fp, #24
13260     E4 EB BF FD | 	call	#_converttoint
13264     2C 4E 05 F1 | 	add	fp, #44
13268     A7 FA 61 FC | 	wrlong	result1, fp
1326c     08 4E 85 F1 | 	sub	fp, #8
13270     A7 12 02 FB | 	rdlong	arg01, fp
13274     04 4E 05 F1 | 	add	fp, #4
13278     A7 14 02 FB | 	rdlong	arg02, fp
1327c     FD 16 02 F6 | 	mov	arg03, result1
13280     28 4E 85 F1 | 	sub	fp, #40
13284     80 59 B0 FD | 	call	#_hg010b_spin2_setspritepos
13288     A7 F0 03 F6 | 	mov	ptra, fp
1328c     B2 00 A0 FD | 	call	#popregs_
13290                 | _do_sprite_ret
13290     2D 00 64 FD | 	ret
13294                 | 
13294                 | ' 
13294                 | ' sub do_mousex
13294                 | _do_mousex
13294     00 4A 05 F6 | 	mov	COUNT_, #0
13298     A8 00 A0 FD | 	call	#pushregs_
1329c     0C F0 07 F1 | 	add	ptra, #12
132a0     08 4E 05 F1 | 	add	fp, #8
132a4     A7 3A 68 FC | 	wrlong	#29, fp
132a8     08 4E 85 F1 | 	sub	fp, #8
132ac     7A 00 00 FF 
132b0     50 E5 05 F1 | 	add	objptr, ##62800
132b4     F2 12 02 FB | 	rdlong	arg01, objptr
132b8     7A 00 00 FF 
132bc     50 E5 85 F1 | 	sub	objptr, ##62800
132c0     A7 12 62 FC | 	wrlong	arg01, fp
132c4     A7 12 02 F6 | 	mov	arg01, fp
132c8     C4 68 BF FD | 	call	#_push
132cc     A7 F0 03 F6 | 	mov	ptra, fp
132d0     B2 00 A0 FD | 	call	#popregs_
132d4                 | _do_mousex_ret
132d4     2D 00 64 FD | 	ret
132d8                 | 
132d8                 | ' 
132d8                 | ' sub do_mousey
132d8                 | _do_mousey
132d8     00 4A 05 F6 | 	mov	COUNT_, #0
132dc     A8 00 A0 FD | 	call	#pushregs_
132e0     0C F0 07 F1 | 	add	ptra, #12
132e4     08 4E 05 F1 | 	add	fp, #8
132e8     A7 3A 68 FC | 	wrlong	#29, fp
132ec     08 4E 85 F1 | 	sub	fp, #8
132f0     7A 00 00 FF 
132f4     54 E5 05 F1 | 	add	objptr, ##62804
132f8     F2 12 02 FB | 	rdlong	arg01, objptr
132fc     7A 00 00 FF 
13300     54 E5 85 F1 | 	sub	objptr, ##62804
13304     A7 12 62 FC | 	wrlong	arg01, fp
13308     A7 12 02 F6 | 	mov	arg01, fp
1330c     80 68 BF FD | 	call	#_push
13310     A7 F0 03 F6 | 	mov	ptra, fp
13314     B2 00 A0 FD | 	call	#popregs_
13318                 | _do_mousey_ret
13318     2D 00 64 FD | 	ret
1331c                 | 
1331c                 | ' 
1331c                 | ' sub do_mousew
1331c                 | _do_mousew
1331c     00 4A 05 F6 | 	mov	COUNT_, #0
13320     A8 00 A0 FD | 	call	#pushregs_
13324     0C F0 07 F1 | 	add	ptra, #12
13328     08 4E 05 F1 | 	add	fp, #8
1332c     A7 38 68 FC | 	wrlong	#28, fp
13330     08 4E 85 F1 | 	sub	fp, #8
13334     7A 00 00 FF 
13338     5C E5 05 F1 | 	add	objptr, ##62812
1333c     F2 12 02 FB | 	rdlong	arg01, objptr
13340     7A 00 00 FF 
13344     5C E5 85 F1 | 	sub	objptr, ##62812
13348     A7 12 62 FC | 	wrlong	arg01, fp
1334c     A7 12 02 F6 | 	mov	arg01, fp
13350     3C 68 BF FD | 	call	#_push
13354     A7 F0 03 F6 | 	mov	ptra, fp
13358     B2 00 A0 FD | 	call	#popregs_
1335c                 | _do_mousew_ret
1335c     2D 00 64 FD | 	ret
13360                 | 
13360                 | ' 
13360                 | ' sub do_mousek
13360                 | _do_mousek
13360     00 4A 05 F6 | 	mov	COUNT_, #0
13364     A8 00 A0 FD | 	call	#pushregs_
13368     0C F0 07 F1 | 	add	ptra, #12
1336c     08 4E 05 F1 | 	add	fp, #8
13370     A7 3A 68 FC | 	wrlong	#29, fp
13374     08 4E 85 F1 | 	sub	fp, #8
13378     7A 00 00 FF 
1337c     58 E5 05 F1 | 	add	objptr, ##62808
13380     F2 12 02 FB | 	rdlong	arg01, objptr
13384     7A 00 00 FF 
13388     58 E5 85 F1 | 	sub	objptr, ##62808
1338c     A7 12 62 FC | 	wrlong	arg01, fp
13390     A7 12 02 F6 | 	mov	arg01, fp
13394     F8 67 BF FD | 	call	#_push
13398     A7 F0 03 F6 | 	mov	ptra, fp
1339c     B2 00 A0 FD | 	call	#popregs_
133a0                 | _do_mousek_ret
133a0     2D 00 64 FD | 	ret
133a4                 | 
133a4                 | ' 
133a4                 | ' 
133a4                 | ' sub do_rdpin
133a4                 | _do_rdpin
133a4     00 4A 05 F6 | 	mov	COUNT_, #0
133a8     A8 00 A0 FD | 	call	#pushregs_
133ac     0C F0 07 F1 | 	add	ptra, #12
133b0     44 67 BF FD | 	call	#_pop
133b4     A7 FA 61 FC | 	wrlong	result1, fp
133b8     04 4E 05 F1 | 	add	fp, #4
133bc     A7 FC 61 FC | 	wrlong	result2, fp
133c0     04 4E 05 F1 | 	add	fp, #4
133c4     A7 FE 61 FC | 	wrlong	result3, fp
133c8     08 4E 85 F1 | 	sub	fp, #8
133cc     A7 12 02 F6 | 	mov	arg01, fp
133d0     74 EA BF FD | 	call	#_converttoint
133d4     FD FA 89 FA | 	rdpin	result1, result1
133d8     7B 00 00 FF 
133dc     74 E4 05 F1 | 	add	objptr, ##63092
133e0     F2 FA 61 FC | 	wrlong	result1, objptr
133e4     7B 00 00 FF 
133e8     74 E4 85 F1 | 	sub	objptr, ##63092
133ec     08 4E 05 F1 | 	add	fp, #8
133f0     A7 3A 68 FC | 	wrlong	#29, fp
133f4     08 4E 85 F1 | 	sub	fp, #8
133f8     A7 08 68 FC | 	wrlong	#4, fp
133fc     A7 12 02 F6 | 	mov	arg01, fp
13400     8C 67 BF FD | 	call	#_push
13404     A7 F0 03 F6 | 	mov	ptra, fp
13408     B2 00 A0 FD | 	call	#popregs_
1340c                 | _do_rdpin_ret
1340c     2D 00 64 FD | 	ret
13410                 | 
13410                 | ' 
13410                 | ' sub do_rqpin
13410                 | _do_rqpin
13410     00 4A 05 F6 | 	mov	COUNT_, #0
13414     A8 00 A0 FD | 	call	#pushregs_
13418     0C F0 07 F1 | 	add	ptra, #12
1341c     D8 66 BF FD | 	call	#_pop
13420     A7 FA 61 FC | 	wrlong	result1, fp
13424     04 4E 05 F1 | 	add	fp, #4
13428     A7 FC 61 FC | 	wrlong	result2, fp
1342c     04 4E 05 F1 | 	add	fp, #4
13430     A7 FE 61 FC | 	wrlong	result3, fp
13434     08 4E 85 F1 | 	sub	fp, #8
13438     A7 12 02 F6 | 	mov	arg01, fp
1343c     08 EA BF FD | 	call	#_converttoint
13440     FD 12 02 F6 | 	mov	arg01, result1
13444     00 FA 05 F6 | 	mov	result1, #0
13448     09 FB 81 FA | 	rqpin	result1, arg01
1344c     7B 00 00 FF 
13450     74 E4 05 F1 | 	add	objptr, ##63092
13454     F2 FA 61 FC | 	wrlong	result1, objptr
13458     7B 00 00 FF 
1345c     74 E4 85 F1 | 	sub	objptr, ##63092
13460     08 4E 05 F1 | 	add	fp, #8
13464     A7 3A 68 FC | 	wrlong	#29, fp
13468     08 4E 85 F1 | 	sub	fp, #8
1346c     A7 08 68 FC | 	wrlong	#4, fp
13470     A7 12 02 F6 | 	mov	arg01, fp
13474     18 67 BF FD | 	call	#_push
13478     A7 F0 03 F6 | 	mov	ptra, fp
1347c     B2 00 A0 FD | 	call	#popregs_
13480                 | _do_rqpin_ret
13480     2D 00 64 FD | 	ret
13484                 | 
13484                 | ' 
13484                 | ' sub do_pinread
13484                 | _do_pinread
13484     00 4A 05 F6 | 	mov	COUNT_, #0
13488     A8 00 A0 FD | 	call	#pushregs_
1348c     0C F0 07 F1 | 	add	ptra, #12
13490     64 66 BF FD | 	call	#_pop
13494     A7 FA 61 FC | 	wrlong	result1, fp
13498     04 4E 05 F1 | 	add	fp, #4
1349c     A7 FC 61 FC | 	wrlong	result2, fp
134a0     04 4E 05 F1 | 	add	fp, #4
134a4     A7 FE 61 FC | 	wrlong	result3, fp
134a8     08 4E 85 F1 | 	sub	fp, #8
134ac     A7 12 02 F6 | 	mov	arg01, fp
134b0     94 E9 BF FD | 	call	#_converttoint
134b4     FD 12 02 F6 | 	mov	arg01, result1
134b8     20 12 CE F7 | 	test	arg01, #32 wz
134bc     FF FB 01 56 |  if_ne	mov	result1, inb
134c0     FE FB 01 A6 |  if_e	mov	result1, ina
134c4     09 FB 41 F0 | 	shr	result1, arg01
134c8     06 12 46 F0 | 	shr	arg01, #6
134cc     09 FB 41 F7 | 	zerox	result1, arg01
134d0     7B 00 00 FF 
134d4     74 E4 05 F1 | 	add	objptr, ##63092
134d8     F2 FA 61 FC | 	wrlong	result1, objptr
134dc     7B 00 00 FF 
134e0     74 E4 85 F1 | 	sub	objptr, ##63092
134e4     08 4E 05 F1 | 	add	fp, #8
134e8     A7 3A 68 FC | 	wrlong	#29, fp
134ec     08 4E 85 F1 | 	sub	fp, #8
134f0     A7 08 68 FC | 	wrlong	#4, fp
134f4     A7 12 02 F6 | 	mov	arg01, fp
134f8     94 66 BF FD | 	call	#_push
134fc     A7 F0 03 F6 | 	mov	ptra, fp
13500     B2 00 A0 FD | 	call	#popregs_
13504                 | _do_pinread_ret
13504     2D 00 64 FD | 	ret
13508                 | 
13508                 | ' 
13508                 | ' sub do_gettime
13508                 | _do_gettime
13508     02 4A 05 F6 | 	mov	COUNT_, #2
1350c     A8 00 A0 FD | 	call	#pushregs_
13510     14 F0 07 F1 | 	add	ptra, #20
13514                 | ' 
13514                 | ' const asm 
13514     1A 1E 72 FD | 	getct	local01 wc
13518     1A 20 62 FD | 	getct	local02
1351c                 | ' 
1351c                 | ' return hi1, lo1
1351c     10 FD 01 F6 | 	mov	result2, local02
13520     A7 1E 62 FC | 	wrlong	local01, fp
13524     04 4E 05 F1 | 	add	fp, #4
13528     A7 FC 61 FC | 	wrlong	result2, fp
1352c     0C 4E 05 F1 | 	add	fp, #12
13530     A7 3A 68 FC | 	wrlong	#29, fp
13534     0C 4E 85 F1 | 	sub	fp, #12
13538     A7 12 02 FB | 	rdlong	arg01, fp
1353c     04 4E 05 F1 | 	add	fp, #4
13540     A7 12 62 FC | 	wrlong	arg01, fp
13544     08 4E 85 F1 | 	sub	fp, #8
13548     A7 12 02 FB | 	rdlong	arg01, fp
1354c     0C 4E 05 F1 | 	add	fp, #12
13550     A7 12 62 FC | 	wrlong	arg01, fp
13554     04 4E 85 F1 | 	sub	fp, #4
13558     A7 12 02 F6 | 	mov	arg01, fp
1355c     08 4E 85 F1 | 	sub	fp, #8
13560     2C 66 BF FD | 	call	#_push
13564     A7 F0 03 F6 | 	mov	ptra, fp
13568     B2 00 A0 FD | 	call	#popregs_
1356c                 | _do_gettime_ret
1356c     2D 00 64 FD | 	ret
13570                 | 
13570                 | '    
13570                 | ' 
13570                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
13570                 | ' 
13570                 | ' '' ----------------------------- Clear the screen
13570                 | ' 
13570                 | ' sub do_cls
13570                 | _do_cls
13570     56 00 00 FF 
13574     A0 E5 05 F1 | 	add	objptr, ##44448
13578     F2 12 02 FB | 	rdlong	arg01, objptr
1357c     04 E4 85 F1 | 	sub	objptr, #4
13580     F2 14 02 FB | 	rdlong	arg02, objptr
13584     56 00 00 FF 
13588     9C E5 85 F1 | 	sub	objptr, ##44444
1358c     7C 63 B0 FD | 	call	#_hg010b_spin2_cls
13590     56 00 00 FF 
13594     A0 E5 05 F1 | 	add	objptr, ##44448
13598     F2 14 02 FB | 	rdlong	arg02, objptr
1359c     14 E4 85 F1 | 	sub	objptr, #20
135a0     F2 14 62 FC | 	wrlong	arg02, objptr
135a4     56 00 00 FF 
135a8     8C E5 85 F1 | 	sub	objptr, ##44428
135ac                 | ' cls(ink,paper): plot_color=ink: print
135ac     00 12 06 F6 | 	mov	arg01, #0
135b0     E8 CF B0 FD | 	call	#__system___getiolock_0442
135b4     FD 12 02 F6 | 	mov	arg01, result1
135b8     AC 76 B0 FD | 	call	#__system___lockmem
135bc     00 12 06 F6 | 	mov	arg01, #0
135c0     0A 14 06 F6 | 	mov	arg02, #10
135c4     00 16 06 F6 | 	mov	arg03, #0
135c8     4C 83 B0 FD | 	call	#__system___basic_print_char
135cc     00 12 06 F6 | 	mov	arg01, #0
135d0     C8 CF B0 FD | 	call	#__system___getiolock_0442
135d4     FD 00 68 FC | 	wrlong	#0, result1
135d8                 | _do_cls_ret
135d8     2D 00 64 FD | 	ret
135dc                 | 
135dc                 | ' 
135dc                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
135dc                 | ' 
135dc                 | ' sub do_color
135dc                 | _do_color
135dc     03 4A 05 F6 | 	mov	COUNT_, #3
135e0     A8 00 A0 FD | 	call	#pushregs_
135e4     10 65 BF FD | 	call	#_pop
135e8     FD 1E 02 F6 | 	mov	local01, result1
135ec     FE 20 02 F6 | 	mov	local02, result2
135f0     FF 22 02 F6 | 	mov	local03, result3
135f4     56 00 00 FF 
135f8     8C E5 05 F1 | 	add	objptr, ##44428
135fc     F2 1E 62 FC | 	wrlong	local01, objptr
13600     56 00 00 FF 
13604     8C E5 85 F1 | 	sub	objptr, ##44428
13608     A7 F0 03 F6 | 	mov	ptra, fp
1360c     B2 00 A0 FD | 	call	#popregs_
13610                 | _do_color_ret
13610     2D 00 64 FD | 	ret
13614                 | 
13614                 | ' 
13614                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
13614                 | ' 
13614                 | ' sub do_plot
13614                 | _do_plot
13614     00 4A 05 F6 | 	mov	COUNT_, #0
13618     A8 00 A0 FD | 	call	#pushregs_
1361c     20 F0 07 F1 | 	add	ptra, #32
13620     D4 64 BF FD | 	call	#_pop
13624     FD 16 02 F6 | 	mov	arg03, result1
13628     FE 14 02 F6 | 	mov	arg02, result2
1362c     FF 12 02 F6 | 	mov	arg01, result3
13630     0C 4E 05 F1 | 	add	fp, #12
13634     A7 16 62 FC | 	wrlong	arg03, fp
13638     04 4E 05 F1 | 	add	fp, #4
1363c     A7 14 62 FC | 	wrlong	arg02, fp
13640     04 4E 05 F1 | 	add	fp, #4
13644     A7 12 62 FC | 	wrlong	arg01, fp
13648     14 4E 85 F1 | 	sub	fp, #20
1364c     A8 64 BF FD | 	call	#_pop
13650     FF 16 02 F6 | 	mov	arg03, result3
13654     A7 FA 61 FC | 	wrlong	result1, fp
13658     04 4E 05 F1 | 	add	fp, #4
1365c     A7 FC 61 FC | 	wrlong	result2, fp
13660     04 4E 05 F1 | 	add	fp, #4
13664     A7 16 62 FC | 	wrlong	arg03, fp
13668     08 4E 85 F1 | 	sub	fp, #8
1366c     A7 12 02 F6 | 	mov	arg01, fp
13670     D4 E7 BF FD | 	call	#_converttoint
13674     18 4E 05 F1 | 	add	fp, #24
13678     A7 FA 61 FC | 	wrlong	result1, fp
1367c     0C 4E 85 F1 | 	sub	fp, #12
13680     A7 12 02 F6 | 	mov	arg01, fp
13684     0C 4E 85 F1 | 	sub	fp, #12
13688     BC E7 BF FD | 	call	#_converttoint
1368c     1C 4E 05 F1 | 	add	fp, #28
13690     A7 FA 61 FC | 	wrlong	result1, fp
13694     04 4E 85 F1 | 	sub	fp, #4
13698     A7 16 02 FB | 	rdlong	arg03, fp
1369c     56 00 00 FF 
136a0     90 E5 05 F1 | 	add	objptr, ##44432
136a4     F2 16 62 FC | 	wrlong	arg03, objptr
136a8     04 4E 05 F1 | 	add	fp, #4
136ac     A7 14 02 FB | 	rdlong	arg02, fp
136b0     1C 4E 85 F1 | 	sub	fp, #28
136b4     04 E4 05 F1 | 	add	objptr, #4
136b8     F2 14 62 FC | 	wrlong	arg02, objptr
136bc     04 E4 85 F1 | 	sub	objptr, #4
136c0     F2 12 02 FB | 	rdlong	arg01, objptr
136c4     04 E4 85 F1 | 	sub	objptr, #4
136c8     F2 16 02 FB | 	rdlong	arg03, objptr
136cc     56 00 00 FF 
136d0     8C E5 85 F1 | 	sub	objptr, ##44428
136d4     C8 55 B0 FD | 	call	#_hg010b_spin2_putpixel
136d8     A7 F0 03 F6 | 	mov	ptra, fp
136dc     B2 00 A0 FD | 	call	#popregs_
136e0                 | _do_plot_ret
136e0     2D 00 64 FD | 	ret
136e4                 | 
136e4                 | ' 
136e4                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
136e4                 | ' 
136e4                 | ' sub do_draw
136e4                 | _do_draw
136e4     00 4A 05 F6 | 	mov	COUNT_, #0
136e8     A8 00 A0 FD | 	call	#pushregs_
136ec     20 F0 07 F1 | 	add	ptra, #32
136f0     04 64 BF FD | 	call	#_pop
136f4     FD 1A 02 F6 | 	mov	arg05, result1
136f8     FE 18 02 F6 | 	mov	arg04, result2
136fc     FF 16 02 F6 | 	mov	arg03, result3
13700     0C 4E 05 F1 | 	add	fp, #12
13704     A7 1A 62 FC | 	wrlong	arg05, fp
13708     04 4E 05 F1 | 	add	fp, #4
1370c     A7 18 62 FC | 	wrlong	arg04, fp
13710     04 4E 05 F1 | 	add	fp, #4
13714     A7 16 62 FC | 	wrlong	arg03, fp
13718     14 4E 85 F1 | 	sub	fp, #20
1371c     D8 63 BF FD | 	call	#_pop
13720     FF 1A 02 F6 | 	mov	arg05, result3
13724     A7 FA 61 FC | 	wrlong	result1, fp
13728     04 4E 05 F1 | 	add	fp, #4
1372c     A7 FC 61 FC | 	wrlong	result2, fp
13730     04 4E 05 F1 | 	add	fp, #4
13734     A7 1A 62 FC | 	wrlong	arg05, fp
13738     08 4E 85 F1 | 	sub	fp, #8
1373c     A7 12 02 F6 | 	mov	arg01, fp
13740     04 E7 BF FD | 	call	#_converttoint
13744     18 4E 05 F1 | 	add	fp, #24
13748     A7 FA 61 FC | 	wrlong	result1, fp
1374c     0C 4E 85 F1 | 	sub	fp, #12
13750     A7 12 02 F6 | 	mov	arg01, fp
13754     0C 4E 85 F1 | 	sub	fp, #12
13758     EC E6 BF FD | 	call	#_converttoint
1375c     1C 4E 05 F1 | 	add	fp, #28
13760     A7 FA 61 FC | 	wrlong	result1, fp
13764     56 00 00 FF 
13768     90 E5 05 F1 | 	add	objptr, ##44432
1376c     F2 12 02 FB | 	rdlong	arg01, objptr
13770     04 E4 05 F1 | 	add	objptr, #4
13774     F2 14 02 FB | 	rdlong	arg02, objptr
13778     04 4E 85 F1 | 	sub	fp, #4
1377c     A7 16 02 FB | 	rdlong	arg03, fp
13780     FD 18 02 F6 | 	mov	arg04, result1
13784     18 4E 85 F1 | 	sub	fp, #24
13788     08 E4 85 F1 | 	sub	objptr, #8
1378c     F2 1A 02 FB | 	rdlong	arg05, objptr
13790     56 00 00 FF 
13794     8C E5 85 F1 | 	sub	objptr, ##44428
13798     B4 57 B0 FD | 	call	#_hg010b_spin2_draw
1379c     18 4E 05 F1 | 	add	fp, #24
137a0     A7 1A 02 FB | 	rdlong	arg05, fp
137a4     56 00 00 FF 
137a8     90 E5 05 F1 | 	add	objptr, ##44432
137ac     F2 1A 62 FC | 	wrlong	arg05, objptr
137b0     04 4E 05 F1 | 	add	fp, #4
137b4     A7 1A 02 FB | 	rdlong	arg05, fp
137b8     1C 4E 85 F1 | 	sub	fp, #28
137bc     04 E4 05 F1 | 	add	objptr, #4
137c0     F2 1A 62 FC | 	wrlong	arg05, objptr
137c4     56 00 00 FF 
137c8     94 E5 85 F1 | 	sub	objptr, ##44436
137cc     A7 F0 03 F6 | 	mov	ptra, fp
137d0     B2 00 A0 FD | 	call	#popregs_
137d4                 | _do_draw_ret
137d4     2D 00 64 FD | 	ret
137d8                 | 
137d8                 | ' 
137d8                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
137d8                 | ' 
137d8                 | ' sub do_fcircle
137d8                 | _do_fcircle
137d8     02 4A 05 F6 | 	mov	COUNT_, #2
137dc     A8 00 A0 FD | 	call	#pushregs_
137e0     24 F0 07 F1 | 	add	ptra, #36
137e4     10 63 BF FD | 	call	#_pop
137e8     FD 18 02 F6 | 	mov	arg04, result1
137ec     FE 16 02 F6 | 	mov	arg03, result2
137f0     FF 14 02 F6 | 	mov	arg02, result3
137f4     18 4E 05 F1 | 	add	fp, #24
137f8     A7 18 62 FC | 	wrlong	arg04, fp
137fc     04 4E 05 F1 | 	add	fp, #4
13800     A7 16 62 FC | 	wrlong	arg03, fp
13804     04 4E 05 F1 | 	add	fp, #4
13808     A7 14 62 FC | 	wrlong	arg02, fp
1380c     20 4E 85 F1 | 	sub	fp, #32
13810     E4 62 BF FD | 	call	#_pop
13814     FD 18 02 F6 | 	mov	arg04, result1
13818     FE 16 02 F6 | 	mov	arg03, result2
1381c     FF 1E 02 F6 | 	mov	local01, result3
13820     0C 4E 05 F1 | 	add	fp, #12
13824     A7 18 62 FC | 	wrlong	arg04, fp
13828     04 4E 05 F1 | 	add	fp, #4
1382c     A7 16 62 FC | 	wrlong	arg03, fp
13830     04 4E 05 F1 | 	add	fp, #4
13834     A7 1E 62 FC | 	wrlong	local01, fp
13838     14 4E 85 F1 | 	sub	fp, #20
1383c     B8 62 BF FD | 	call	#_pop
13840     A7 FA 61 FC | 	wrlong	result1, fp
13844     04 4E 05 F1 | 	add	fp, #4
13848     A7 FC 61 FC | 	wrlong	result2, fp
1384c     04 4E 05 F1 | 	add	fp, #4
13850     A7 FE 61 FC | 	wrlong	result3, fp
13854                 | ' 
13854                 | ' t3=pop()
13854                 | ' t2=pop()
13854                 | ' t1=pop()
13854                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
13854     FF 18 02 F6 | 	mov	arg04, result3
13858     08 4E 85 F1 | 	sub	fp, #8
1385c     1C 18 0E F2 | 	cmp	arg04, #28 wz
13860     08 4E 05 51 |  if_ne	add	fp, #8
13864     A7 1E 02 5B |  if_ne	rdlong	local01, fp
13868     08 4E 85 51 |  if_ne	sub	fp, #8
1386c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
13870     7C 00 90 5D |  if_ne	jmp	#LR__1520
13874     14 4E 05 F1 | 	add	fp, #20
13878     A7 1E 02 FB | 	rdlong	local01, fp
1387c     14 4E 85 F1 | 	sub	fp, #20
13880     1C 1E 0E F2 | 	cmp	local01, #28 wz
13884     14 4E 05 51 |  if_ne	add	fp, #20
13888     A7 18 02 5B |  if_ne	rdlong	arg04, fp
1388c     14 4E 85 51 |  if_ne	sub	fp, #20
13890     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
13894     58 00 90 5D |  if_ne	jmp	#LR__1520
13898     20 4E 05 F1 | 	add	fp, #32
1389c     A7 1E 02 FB | 	rdlong	local01, fp
138a0     20 4E 85 F1 | 	sub	fp, #32
138a4     1C 1E 0E F2 | 	cmp	local01, #28 wz
138a8     20 4E 05 51 |  if_ne	add	fp, #32
138ac     A7 18 02 5B |  if_ne	rdlong	arg04, fp
138b0     20 4E 85 51 |  if_ne	sub	fp, #32
138b4     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
138b8     34 00 90 5D |  if_ne	jmp	#LR__1520
138bc     A7 12 02 FB | 	rdlong	arg01, fp
138c0     0C 4E 05 F1 | 	add	fp, #12
138c4     A7 14 02 FB | 	rdlong	arg02, fp
138c8     0C 4E 05 F1 | 	add	fp, #12
138cc     A7 16 02 FB | 	rdlong	arg03, fp
138d0     18 4E 85 F1 | 	sub	fp, #24
138d4     56 00 00 FF 
138d8     8C E5 05 F1 | 	add	objptr, ##44428
138dc     F2 18 02 FB | 	rdlong	arg04, objptr
138e0     56 00 00 FF 
138e4     8C E5 85 F1 | 	sub	objptr, ##44428
138e8     E8 5A B0 FD | 	call	#_hg010b_spin2_fcircle
138ec                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
138ec     54 00 90 FD | 	jmp	#LR__1521
138f0                 | LR__1520
138f0     A7 12 02 F6 | 	mov	arg01, fp
138f4     50 E5 BF FD | 	call	#_converttoint
138f8     FD 1E 02 F6 | 	mov	local01, result1
138fc     0C 4E 05 F1 | 	add	fp, #12
13900     A7 12 02 F6 | 	mov	arg01, fp
13904     0C 4E 85 F1 | 	sub	fp, #12
13908     3C E5 BF FD | 	call	#_converttoint
1390c     FD 20 02 F6 | 	mov	local02, result1
13910     18 4E 05 F1 | 	add	fp, #24
13914     A7 12 02 F6 | 	mov	arg01, fp
13918     18 4E 85 F1 | 	sub	fp, #24
1391c     28 E5 BF FD | 	call	#_converttoint
13920     FD 16 02 F6 | 	mov	arg03, result1
13924     56 00 00 FF 
13928     8C E5 05 F1 | 	add	objptr, ##44428
1392c     F2 18 02 FB | 	rdlong	arg04, objptr
13930     56 00 00 FF 
13934     8C E5 85 F1 | 	sub	objptr, ##44428
13938     0F 13 02 F6 | 	mov	arg01, local01
1393c     10 15 02 F6 | 	mov	arg02, local02
13940     90 5A B0 FD | 	call	#_hg010b_spin2_fcircle
13944                 | LR__1521
13944     A7 F0 03 F6 | 	mov	ptra, fp
13948     B2 00 A0 FD | 	call	#popregs_
1394c                 | _do_fcircle_ret
1394c     2D 00 64 FD | 	ret
13950                 | 
13950                 | ' 
13950                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
13950                 | ' 
13950                 | ' sub do_circle
13950                 | _do_circle
13950     02 4A 05 F6 | 	mov	COUNT_, #2
13954     A8 00 A0 FD | 	call	#pushregs_
13958     24 F0 07 F1 | 	add	ptra, #36
1395c     98 61 BF FD | 	call	#_pop
13960     FD 18 02 F6 | 	mov	arg04, result1
13964     FE 16 02 F6 | 	mov	arg03, result2
13968     FF 14 02 F6 | 	mov	arg02, result3
1396c     18 4E 05 F1 | 	add	fp, #24
13970     A7 18 62 FC | 	wrlong	arg04, fp
13974     04 4E 05 F1 | 	add	fp, #4
13978     A7 16 62 FC | 	wrlong	arg03, fp
1397c     04 4E 05 F1 | 	add	fp, #4
13980     A7 14 62 FC | 	wrlong	arg02, fp
13984     20 4E 85 F1 | 	sub	fp, #32
13988     6C 61 BF FD | 	call	#_pop
1398c     FD 18 02 F6 | 	mov	arg04, result1
13990     FE 16 02 F6 | 	mov	arg03, result2
13994     FF 1E 02 F6 | 	mov	local01, result3
13998     0C 4E 05 F1 | 	add	fp, #12
1399c     A7 18 62 FC | 	wrlong	arg04, fp
139a0     04 4E 05 F1 | 	add	fp, #4
139a4     A7 16 62 FC | 	wrlong	arg03, fp
139a8     04 4E 05 F1 | 	add	fp, #4
139ac     A7 1E 62 FC | 	wrlong	local01, fp
139b0     14 4E 85 F1 | 	sub	fp, #20
139b4     40 61 BF FD | 	call	#_pop
139b8     A7 FA 61 FC | 	wrlong	result1, fp
139bc     04 4E 05 F1 | 	add	fp, #4
139c0     A7 FC 61 FC | 	wrlong	result2, fp
139c4     04 4E 05 F1 | 	add	fp, #4
139c8     A7 FE 61 FC | 	wrlong	result3, fp
139cc                 | ' 
139cc                 | ' t3=pop()
139cc                 | ' t2=pop()
139cc                 | ' t1=pop()
139cc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
139cc     FF 18 02 F6 | 	mov	arg04, result3
139d0     08 4E 85 F1 | 	sub	fp, #8
139d4     1C 18 0E F2 | 	cmp	arg04, #28 wz
139d8     08 4E 05 51 |  if_ne	add	fp, #8
139dc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
139e0     08 4E 85 51 |  if_ne	sub	fp, #8
139e4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
139e8     7C 00 90 5D |  if_ne	jmp	#LR__1530
139ec     14 4E 05 F1 | 	add	fp, #20
139f0     A7 1E 02 FB | 	rdlong	local01, fp
139f4     14 4E 85 F1 | 	sub	fp, #20
139f8     1C 1E 0E F2 | 	cmp	local01, #28 wz
139fc     14 4E 05 51 |  if_ne	add	fp, #20
13a00     A7 18 02 5B |  if_ne	rdlong	arg04, fp
13a04     14 4E 85 51 |  if_ne	sub	fp, #20
13a08     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
13a0c     58 00 90 5D |  if_ne	jmp	#LR__1530
13a10     20 4E 05 F1 | 	add	fp, #32
13a14     A7 1E 02 FB | 	rdlong	local01, fp
13a18     20 4E 85 F1 | 	sub	fp, #32
13a1c     1C 1E 0E F2 | 	cmp	local01, #28 wz
13a20     20 4E 05 51 |  if_ne	add	fp, #32
13a24     A7 18 02 5B |  if_ne	rdlong	arg04, fp
13a28     20 4E 85 51 |  if_ne	sub	fp, #32
13a2c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
13a30     34 00 90 5D |  if_ne	jmp	#LR__1530
13a34     A7 12 02 FB | 	rdlong	arg01, fp
13a38     0C 4E 05 F1 | 	add	fp, #12
13a3c     A7 14 02 FB | 	rdlong	arg02, fp
13a40     0C 4E 05 F1 | 	add	fp, #12
13a44     A7 16 02 FB | 	rdlong	arg03, fp
13a48     18 4E 85 F1 | 	sub	fp, #24
13a4c     56 00 00 FF 
13a50     8C E5 05 F1 | 	add	objptr, ##44428
13a54     F2 18 02 FB | 	rdlong	arg04, objptr
13a58     56 00 00 FF 
13a5c     8C E5 85 F1 | 	sub	objptr, ##44428
13a60     7C 5A B0 FD | 	call	#_hg010b_spin2_circle
13a64                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
13a64     54 00 90 FD | 	jmp	#LR__1531
13a68                 | LR__1530
13a68     A7 12 02 F6 | 	mov	arg01, fp
13a6c     D8 E3 BF FD | 	call	#_converttoint
13a70     FD 1E 02 F6 | 	mov	local01, result1
13a74     0C 4E 05 F1 | 	add	fp, #12
13a78     A7 12 02 F6 | 	mov	arg01, fp
13a7c     0C 4E 85 F1 | 	sub	fp, #12
13a80     C4 E3 BF FD | 	call	#_converttoint
13a84     FD 20 02 F6 | 	mov	local02, result1
13a88     18 4E 05 F1 | 	add	fp, #24
13a8c     A7 12 02 F6 | 	mov	arg01, fp
13a90     18 4E 85 F1 | 	sub	fp, #24
13a94     B0 E3 BF FD | 	call	#_converttoint
13a98     FD 16 02 F6 | 	mov	arg03, result1
13a9c     56 00 00 FF 
13aa0     8C E5 05 F1 | 	add	objptr, ##44428
13aa4     F2 18 02 FB | 	rdlong	arg04, objptr
13aa8     56 00 00 FF 
13aac     8C E5 85 F1 | 	sub	objptr, ##44428
13ab0     0F 13 02 F6 | 	mov	arg01, local01
13ab4     10 15 02 F6 | 	mov	arg02, local02
13ab8     24 5A B0 FD | 	call	#_hg010b_spin2_circle
13abc                 | LR__1531
13abc     A7 F0 03 F6 | 	mov	ptra, fp
13ac0     B2 00 A0 FD | 	call	#popregs_
13ac4                 | _do_circle_ret
13ac4     2D 00 64 FD | 	ret
13ac8                 | 
13ac8                 | ' 
13ac8                 | ' ' -------------------------- Draw a rectangle
13ac8                 | ' 
13ac8                 | ' sub do_box
13ac8                 | _do_box
13ac8     03 4A 05 F6 | 	mov	COUNT_, #3
13acc     A8 00 A0 FD | 	call	#pushregs_
13ad0     30 F0 07 F1 | 	add	ptra, #48
13ad4     20 60 BF FD | 	call	#_pop
13ad8     FD 1A 02 F6 | 	mov	arg05, result1
13adc     FE 18 02 F6 | 	mov	arg04, result2
13ae0     FF 16 02 F6 | 	mov	arg03, result3
13ae4     24 4E 05 F1 | 	add	fp, #36
13ae8     A7 1A 62 FC | 	wrlong	arg05, fp
13aec     04 4E 05 F1 | 	add	fp, #4
13af0     A7 18 62 FC | 	wrlong	arg04, fp
13af4     04 4E 05 F1 | 	add	fp, #4
13af8     A7 16 62 FC | 	wrlong	arg03, fp
13afc     2C 4E 85 F1 | 	sub	fp, #44
13b00     F4 5F BF FD | 	call	#_pop
13b04     FD 1A 02 F6 | 	mov	arg05, result1
13b08     FE 18 02 F6 | 	mov	arg04, result2
13b0c     FF 16 02 F6 | 	mov	arg03, result3
13b10     18 4E 05 F1 | 	add	fp, #24
13b14     A7 1A 62 FC | 	wrlong	arg05, fp
13b18     04 4E 05 F1 | 	add	fp, #4
13b1c     A7 18 62 FC | 	wrlong	arg04, fp
13b20     04 4E 05 F1 | 	add	fp, #4
13b24     A7 16 62 FC | 	wrlong	arg03, fp
13b28     20 4E 85 F1 | 	sub	fp, #32
13b2c     C8 5F BF FD | 	call	#_pop
13b30     FD 1A 02 F6 | 	mov	arg05, result1
13b34     FE 18 02 F6 | 	mov	arg04, result2
13b38     FF 1E 02 F6 | 	mov	local01, result3
13b3c     0C 4E 05 F1 | 	add	fp, #12
13b40     A7 1A 62 FC | 	wrlong	arg05, fp
13b44     04 4E 05 F1 | 	add	fp, #4
13b48     A7 18 62 FC | 	wrlong	arg04, fp
13b4c     04 4E 05 F1 | 	add	fp, #4
13b50     A7 1E 62 FC | 	wrlong	local01, fp
13b54     14 4E 85 F1 | 	sub	fp, #20
13b58     9C 5F BF FD | 	call	#_pop
13b5c     A7 FA 61 FC | 	wrlong	result1, fp
13b60     04 4E 05 F1 | 	add	fp, #4
13b64     A7 FC 61 FC | 	wrlong	result2, fp
13b68     04 4E 05 F1 | 	add	fp, #4
13b6c     A7 FE 61 FC | 	wrlong	result3, fp
13b70                 | ' 
13b70                 | ' t4=pop()
13b70                 | ' t3=pop()
13b70                 | ' t2=pop()
13b70                 | ' t1=pop()
13b70                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
13b70     FF 1A 02 F6 | 	mov	arg05, result3
13b74     08 4E 85 F1 | 	sub	fp, #8
13b78     1C 1A 0E F2 | 	cmp	arg05, #28 wz
13b7c     08 4E 05 51 |  if_ne	add	fp, #8
13b80     A7 1E 02 5B |  if_ne	rdlong	local01, fp
13b84     08 4E 85 51 |  if_ne	sub	fp, #8
13b88     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
13b8c     A8 00 90 5D |  if_ne	jmp	#LR__1540
13b90     14 4E 05 F1 | 	add	fp, #20
13b94     A7 1E 02 FB | 	rdlong	local01, fp
13b98     14 4E 85 F1 | 	sub	fp, #20
13b9c     1C 1E 0E F2 | 	cmp	local01, #28 wz
13ba0     14 4E 05 51 |  if_ne	add	fp, #20
13ba4     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
13ba8     14 4E 85 51 |  if_ne	sub	fp, #20
13bac     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
13bb0     84 00 90 5D |  if_ne	jmp	#LR__1540
13bb4     20 4E 05 F1 | 	add	fp, #32
13bb8     A7 1E 02 FB | 	rdlong	local01, fp
13bbc     20 4E 85 F1 | 	sub	fp, #32
13bc0     1C 1E 0E F2 | 	cmp	local01, #28 wz
13bc4     20 4E 05 51 |  if_ne	add	fp, #32
13bc8     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
13bcc     20 4E 85 51 |  if_ne	sub	fp, #32
13bd0     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
13bd4     60 00 90 5D |  if_ne	jmp	#LR__1540
13bd8     2C 4E 05 F1 | 	add	fp, #44
13bdc     A7 1E 02 FB | 	rdlong	local01, fp
13be0     2C 4E 85 F1 | 	sub	fp, #44
13be4     1C 1E 0E F2 | 	cmp	local01, #28 wz
13be8     2C 4E 05 51 |  if_ne	add	fp, #44
13bec     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
13bf0     2C 4E 85 51 |  if_ne	sub	fp, #44
13bf4     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
13bf8     3C 00 90 5D |  if_ne	jmp	#LR__1540
13bfc     A7 12 02 FB | 	rdlong	arg01, fp
13c00     0C 4E 05 F1 | 	add	fp, #12
13c04     A7 14 02 FB | 	rdlong	arg02, fp
13c08     0C 4E 05 F1 | 	add	fp, #12
13c0c     A7 16 02 FB | 	rdlong	arg03, fp
13c10     0C 4E 05 F1 | 	add	fp, #12
13c14     A7 18 02 FB | 	rdlong	arg04, fp
13c18     24 4E 85 F1 | 	sub	fp, #36
13c1c     56 00 00 FF 
13c20     8C E5 05 F1 | 	add	objptr, ##44428
13c24     F2 1A 02 FB | 	rdlong	arg05, objptr
13c28     56 00 00 FF 
13c2c     8C E5 85 F1 | 	sub	objptr, ##44428
13c30     78 5A B0 FD | 	call	#_hg010b_spin2_box
13c34                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
13c34     6C 00 90 FD | 	jmp	#LR__1541
13c38                 | LR__1540
13c38     A7 12 02 F6 | 	mov	arg01, fp
13c3c     08 E2 BF FD | 	call	#_converttoint
13c40     FD 20 02 F6 | 	mov	local02, result1
13c44     0C 4E 05 F1 | 	add	fp, #12
13c48     A7 12 02 F6 | 	mov	arg01, fp
13c4c     0C 4E 85 F1 | 	sub	fp, #12
13c50     F4 E1 BF FD | 	call	#_converttoint
13c54     FD 22 02 F6 | 	mov	local03, result1
13c58     18 4E 05 F1 | 	add	fp, #24
13c5c     A7 12 02 F6 | 	mov	arg01, fp
13c60     18 4E 85 F1 | 	sub	fp, #24
13c64     E0 E1 BF FD | 	call	#_converttoint
13c68     FD 1E 02 F6 | 	mov	local01, result1
13c6c     24 4E 05 F1 | 	add	fp, #36
13c70     A7 12 02 F6 | 	mov	arg01, fp
13c74     24 4E 85 F1 | 	sub	fp, #36
13c78     CC E1 BF FD | 	call	#_converttoint
13c7c     FD 18 02 F6 | 	mov	arg04, result1
13c80     56 00 00 FF 
13c84     8C E5 05 F1 | 	add	objptr, ##44428
13c88     F2 1A 02 FB | 	rdlong	arg05, objptr
13c8c     56 00 00 FF 
13c90     8C E5 85 F1 | 	sub	objptr, ##44428
13c94     10 13 02 F6 | 	mov	arg01, local02
13c98     11 15 02 F6 | 	mov	arg02, local03
13c9c     0F 17 02 F6 | 	mov	arg03, local01
13ca0     08 5A B0 FD | 	call	#_hg010b_spin2_box
13ca4                 | LR__1541
13ca4     A7 F0 03 F6 | 	mov	ptra, fp
13ca8     B2 00 A0 FD | 	call	#popregs_
13cac                 | _do_box_ret
13cac     2D 00 64 FD | 	ret
13cb0                 | 
13cb0                 | ' 
13cb0                 | ' sub do_fill
13cb0                 | _do_fill
13cb0     03 4A 05 F6 | 	mov	COUNT_, #3
13cb4     A8 00 A0 FD | 	call	#pushregs_
13cb8     30 F0 07 F1 | 	add	ptra, #48
13cbc     38 5E BF FD | 	call	#_pop
13cc0     FD 18 02 F6 | 	mov	arg04, result1
13cc4     FE 16 02 F6 | 	mov	arg03, result2
13cc8     FF 14 02 F6 | 	mov	arg02, result3
13ccc     24 4E 05 F1 | 	add	fp, #36
13cd0     A7 18 62 FC | 	wrlong	arg04, fp
13cd4     04 4E 05 F1 | 	add	fp, #4
13cd8     A7 16 62 FC | 	wrlong	arg03, fp
13cdc     04 4E 05 F1 | 	add	fp, #4
13ce0     A7 14 62 FC | 	wrlong	arg02, fp
13ce4     2C 4E 85 F1 | 	sub	fp, #44
13ce8     0C 5E BF FD | 	call	#_pop
13cec     FD 18 02 F6 | 	mov	arg04, result1
13cf0     FE 16 02 F6 | 	mov	arg03, result2
13cf4     FF 14 02 F6 | 	mov	arg02, result3
13cf8     18 4E 05 F1 | 	add	fp, #24
13cfc     A7 18 62 FC | 	wrlong	arg04, fp
13d00     04 4E 05 F1 | 	add	fp, #4
13d04     A7 16 62 FC | 	wrlong	arg03, fp
13d08     04 4E 05 F1 | 	add	fp, #4
13d0c     A7 14 62 FC | 	wrlong	arg02, fp
13d10     20 4E 85 F1 | 	sub	fp, #32
13d14     E0 5D BF FD | 	call	#_pop
13d18     FD 18 02 F6 | 	mov	arg04, result1
13d1c     FE 16 02 F6 | 	mov	arg03, result2
13d20     FF 1E 02 F6 | 	mov	local01, result3
13d24     0C 4E 05 F1 | 	add	fp, #12
13d28     A7 18 62 FC | 	wrlong	arg04, fp
13d2c     04 4E 05 F1 | 	add	fp, #4
13d30     A7 16 62 FC | 	wrlong	arg03, fp
13d34     04 4E 05 F1 | 	add	fp, #4
13d38     A7 1E 62 FC | 	wrlong	local01, fp
13d3c     14 4E 85 F1 | 	sub	fp, #20
13d40     B4 5D BF FD | 	call	#_pop
13d44     A7 FA 61 FC | 	wrlong	result1, fp
13d48     04 4E 05 F1 | 	add	fp, #4
13d4c     A7 FC 61 FC | 	wrlong	result2, fp
13d50     04 4E 05 F1 | 	add	fp, #4
13d54     A7 FE 61 FC | 	wrlong	result3, fp
13d58                 | ' 
13d58                 | ' t4=pop()
13d58                 | ' t3=pop()
13d58                 | ' t2=pop()
13d58                 | ' t1=pop()
13d58                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
13d58     FF 18 02 F6 | 	mov	arg04, result3
13d5c     08 4E 85 F1 | 	sub	fp, #8
13d60     1C 18 0E F2 | 	cmp	arg04, #28 wz
13d64     08 4E 05 51 |  if_ne	add	fp, #8
13d68     A7 1E 02 5B |  if_ne	rdlong	local01, fp
13d6c     08 4E 85 51 |  if_ne	sub	fp, #8
13d70     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
13d74     94 00 90 5D |  if_ne	jmp	#LR__1550
13d78     14 4E 05 F1 | 	add	fp, #20
13d7c     A7 1E 02 FB | 	rdlong	local01, fp
13d80     14 4E 85 F1 | 	sub	fp, #20
13d84     1C 1E 0E F2 | 	cmp	local01, #28 wz
13d88     14 4E 05 51 |  if_ne	add	fp, #20
13d8c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
13d90     14 4E 85 51 |  if_ne	sub	fp, #20
13d94     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
13d98     70 00 90 5D |  if_ne	jmp	#LR__1550
13d9c     20 4E 05 F1 | 	add	fp, #32
13da0     A7 1E 02 FB | 	rdlong	local01, fp
13da4     20 4E 85 F1 | 	sub	fp, #32
13da8     1C 1E 0E F2 | 	cmp	local01, #28 wz
13dac     20 4E 05 51 |  if_ne	add	fp, #32
13db0     A7 18 02 5B |  if_ne	rdlong	arg04, fp
13db4     20 4E 85 51 |  if_ne	sub	fp, #32
13db8     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
13dbc     4C 00 90 5D |  if_ne	jmp	#LR__1550
13dc0     2C 4E 05 F1 | 	add	fp, #44
13dc4     A7 1E 02 FB | 	rdlong	local01, fp
13dc8     2C 4E 85 F1 | 	sub	fp, #44
13dcc     1C 1E 0E F2 | 	cmp	local01, #28 wz
13dd0     2C 4E 05 51 |  if_ne	add	fp, #44
13dd4     A7 18 02 5B |  if_ne	rdlong	arg04, fp
13dd8     2C 4E 85 51 |  if_ne	sub	fp, #44
13ddc     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
13de0     28 00 90 5D |  if_ne	jmp	#LR__1550
13de4     A7 12 02 FB | 	rdlong	arg01, fp
13de8     0C 4E 05 F1 | 	add	fp, #12
13dec     A7 14 02 FB | 	rdlong	arg02, fp
13df0     0C 4E 05 F1 | 	add	fp, #12
13df4     A7 16 02 FB | 	rdlong	arg03, fp
13df8     0C 4E 05 F1 | 	add	fp, #12
13dfc     A7 18 02 FB | 	rdlong	arg04, fp
13e00     24 4E 85 F1 | 	sub	fp, #36
13e04     38 53 B0 FD | 	call	#_hg010b_spin2_fill
13e08                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
13e08     58 00 90 FD | 	jmp	#LR__1551
13e0c                 | LR__1550
13e0c     A7 12 02 F6 | 	mov	arg01, fp
13e10     34 E0 BF FD | 	call	#_converttoint
13e14     FD 20 02 F6 | 	mov	local02, result1
13e18     0C 4E 05 F1 | 	add	fp, #12
13e1c     A7 12 02 F6 | 	mov	arg01, fp
13e20     0C 4E 85 F1 | 	sub	fp, #12
13e24     20 E0 BF FD | 	call	#_converttoint
13e28     FD 22 02 F6 | 	mov	local03, result1
13e2c     18 4E 05 F1 | 	add	fp, #24
13e30     A7 12 02 F6 | 	mov	arg01, fp
13e34     18 4E 85 F1 | 	sub	fp, #24
13e38     0C E0 BF FD | 	call	#_converttoint
13e3c     FD 1E 02 F6 | 	mov	local01, result1
13e40     24 4E 05 F1 | 	add	fp, #36
13e44     A7 12 02 F6 | 	mov	arg01, fp
13e48     24 4E 85 F1 | 	sub	fp, #36
13e4c     F8 DF BF FD | 	call	#_converttoint
13e50     FD 18 02 F6 | 	mov	arg04, result1
13e54     10 13 02 F6 | 	mov	arg01, local02
13e58     11 15 02 F6 | 	mov	arg02, local03
13e5c     0F 17 02 F6 | 	mov	arg03, local01
13e60     DC 52 B0 FD | 	call	#_hg010b_spin2_fill
13e64                 | LR__1551
13e64     A7 F0 03 F6 | 	mov	ptra, fp
13e68     B2 00 A0 FD | 	call	#popregs_
13e6c                 | _do_fill_ret
13e6c     2D 00 64 FD | 	ret
13e70                 | 
13e70                 | ' 
13e70                 | ' ' -------------------------- Draw a frane
13e70                 | ' 
13e70                 | ' sub do_frame
13e70                 | _do_frame
13e70     03 4A 05 F6 | 	mov	COUNT_, #3
13e74     A8 00 A0 FD | 	call	#pushregs_
13e78     30 F0 07 F1 | 	add	ptra, #48
13e7c     78 5C BF FD | 	call	#_pop
13e80     FD 1A 02 F6 | 	mov	arg05, result1
13e84     FE 18 02 F6 | 	mov	arg04, result2
13e88     FF 16 02 F6 | 	mov	arg03, result3
13e8c     24 4E 05 F1 | 	add	fp, #36
13e90     A7 1A 62 FC | 	wrlong	arg05, fp
13e94     04 4E 05 F1 | 	add	fp, #4
13e98     A7 18 62 FC | 	wrlong	arg04, fp
13e9c     04 4E 05 F1 | 	add	fp, #4
13ea0     A7 16 62 FC | 	wrlong	arg03, fp
13ea4     2C 4E 85 F1 | 	sub	fp, #44
13ea8     4C 5C BF FD | 	call	#_pop
13eac     FD 1A 02 F6 | 	mov	arg05, result1
13eb0     FE 18 02 F6 | 	mov	arg04, result2
13eb4     FF 16 02 F6 | 	mov	arg03, result3
13eb8     18 4E 05 F1 | 	add	fp, #24
13ebc     A7 1A 62 FC | 	wrlong	arg05, fp
13ec0     04 4E 05 F1 | 	add	fp, #4
13ec4     A7 18 62 FC | 	wrlong	arg04, fp
13ec8     04 4E 05 F1 | 	add	fp, #4
13ecc     A7 16 62 FC | 	wrlong	arg03, fp
13ed0     20 4E 85 F1 | 	sub	fp, #32
13ed4     20 5C BF FD | 	call	#_pop
13ed8     FD 1A 02 F6 | 	mov	arg05, result1
13edc     FE 18 02 F6 | 	mov	arg04, result2
13ee0     FF 1E 02 F6 | 	mov	local01, result3
13ee4     0C 4E 05 F1 | 	add	fp, #12
13ee8     A7 1A 62 FC | 	wrlong	arg05, fp
13eec     04 4E 05 F1 | 	add	fp, #4
13ef0     A7 18 62 FC | 	wrlong	arg04, fp
13ef4     04 4E 05 F1 | 	add	fp, #4
13ef8     A7 1E 62 FC | 	wrlong	local01, fp
13efc     14 4E 85 F1 | 	sub	fp, #20
13f00     F4 5B BF FD | 	call	#_pop
13f04     A7 FA 61 FC | 	wrlong	result1, fp
13f08     04 4E 05 F1 | 	add	fp, #4
13f0c     A7 FC 61 FC | 	wrlong	result2, fp
13f10     04 4E 05 F1 | 	add	fp, #4
13f14     A7 FE 61 FC | 	wrlong	result3, fp
13f18                 | ' 
13f18                 | ' t4=pop()
13f18                 | ' t3=pop()
13f18                 | ' t2=pop()
13f18                 | ' t1=pop()
13f18                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
13f18     FF 1A 02 F6 | 	mov	arg05, result3
13f1c     08 4E 85 F1 | 	sub	fp, #8
13f20     1C 1A 0E F2 | 	cmp	arg05, #28 wz
13f24     08 4E 05 51 |  if_ne	add	fp, #8
13f28     A7 1E 02 5B |  if_ne	rdlong	local01, fp
13f2c     08 4E 85 51 |  if_ne	sub	fp, #8
13f30     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
13f34     A8 00 90 5D |  if_ne	jmp	#LR__1560
13f38     14 4E 05 F1 | 	add	fp, #20
13f3c     A7 1E 02 FB | 	rdlong	local01, fp
13f40     14 4E 85 F1 | 	sub	fp, #20
13f44     1C 1E 0E F2 | 	cmp	local01, #28 wz
13f48     14 4E 05 51 |  if_ne	add	fp, #20
13f4c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
13f50     14 4E 85 51 |  if_ne	sub	fp, #20
13f54     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
13f58     84 00 90 5D |  if_ne	jmp	#LR__1560
13f5c     20 4E 05 F1 | 	add	fp, #32
13f60     A7 1E 02 FB | 	rdlong	local01, fp
13f64     20 4E 85 F1 | 	sub	fp, #32
13f68     1C 1E 0E F2 | 	cmp	local01, #28 wz
13f6c     20 4E 05 51 |  if_ne	add	fp, #32
13f70     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
13f74     20 4E 85 51 |  if_ne	sub	fp, #32
13f78     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
13f7c     60 00 90 5D |  if_ne	jmp	#LR__1560
13f80     2C 4E 05 F1 | 	add	fp, #44
13f84     A7 1E 02 FB | 	rdlong	local01, fp
13f88     2C 4E 85 F1 | 	sub	fp, #44
13f8c     1C 1E 0E F2 | 	cmp	local01, #28 wz
13f90     2C 4E 05 51 |  if_ne	add	fp, #44
13f94     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
13f98     2C 4E 85 51 |  if_ne	sub	fp, #44
13f9c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
13fa0     3C 00 90 5D |  if_ne	jmp	#LR__1560
13fa4     A7 12 02 FB | 	rdlong	arg01, fp
13fa8     0C 4E 05 F1 | 	add	fp, #12
13fac     A7 14 02 FB | 	rdlong	arg02, fp
13fb0     0C 4E 05 F1 | 	add	fp, #12
13fb4     A7 16 02 FB | 	rdlong	arg03, fp
13fb8     0C 4E 05 F1 | 	add	fp, #12
13fbc     A7 18 02 FB | 	rdlong	arg04, fp
13fc0     24 4E 85 F1 | 	sub	fp, #36
13fc4     56 00 00 FF 
13fc8     8C E5 05 F1 | 	add	objptr, ##44428
13fcc     F2 1A 02 FB | 	rdlong	arg05, objptr
13fd0     56 00 00 FF 
13fd4     8C E5 85 F1 | 	sub	objptr, ##44428
13fd8     50 56 B0 FD | 	call	#_hg010b_spin2_frame
13fdc                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
13fdc     6C 00 90 FD | 	jmp	#LR__1561
13fe0                 | LR__1560
13fe0     A7 12 02 F6 | 	mov	arg01, fp
13fe4     60 DE BF FD | 	call	#_converttoint
13fe8     FD 20 02 F6 | 	mov	local02, result1
13fec     0C 4E 05 F1 | 	add	fp, #12
13ff0     A7 12 02 F6 | 	mov	arg01, fp
13ff4     0C 4E 85 F1 | 	sub	fp, #12
13ff8     4C DE BF FD | 	call	#_converttoint
13ffc     FD 22 02 F6 | 	mov	local03, result1
14000     18 4E 05 F1 | 	add	fp, #24
14004     A7 12 02 F6 | 	mov	arg01, fp
14008     18 4E 85 F1 | 	sub	fp, #24
1400c     38 DE BF FD | 	call	#_converttoint
14010     FD 1E 02 F6 | 	mov	local01, result1
14014     24 4E 05 F1 | 	add	fp, #36
14018     A7 12 02 F6 | 	mov	arg01, fp
1401c     24 4E 85 F1 | 	sub	fp, #36
14020     24 DE BF FD | 	call	#_converttoint
14024     FD 18 02 F6 | 	mov	arg04, result1
14028     56 00 00 FF 
1402c     8C E5 05 F1 | 	add	objptr, ##44428
14030     F2 1A 02 FB | 	rdlong	arg05, objptr
14034     56 00 00 FF 
14038     8C E5 85 F1 | 	sub	objptr, ##44428
1403c     10 13 02 F6 | 	mov	arg01, local02
14040     11 15 02 F6 | 	mov	arg02, local03
14044     0F 17 02 F6 | 	mov	arg03, local01
14048     E0 55 B0 FD | 	call	#_hg010b_spin2_frame
1404c                 | LR__1561
1404c     A7 F0 03 F6 | 	mov	ptra, fp
14050     B2 00 A0 FD | 	call	#popregs_
14054                 | _do_frame_ret
14054     2D 00 64 FD | 	ret
14058                 | 
14058                 | ' 
14058                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
14058                 | ' 
14058                 | ' ' ------------------------- Print to the screem
14058                 | ' 
14058                 | ' sub do_print  
14058                 | _do_print
14058     0A 4A 05 F6 | 	mov	COUNT_, #10
1405c     A8 00 A0 FD | 	call	#pushregs_
14060     00 24 06 F6 | 	mov	local04, #0
14064     90 5A BF FD | 	call	#_pop
14068     FD 26 02 F6 | 	mov	local05, result1
1406c     FE 28 02 F6 | 	mov	local06, result2
14070     FF 2A 02 F6 | 	mov	local07, result3
14074     13 1F 02 F6 | 	mov	local01, local05
14078     14 21 02 F6 | 	mov	local02, local06
1407c     15 23 02 F6 | 	mov	local03, local07
14080                 | '  
14080                 | ' r=0
14080                 | ' t1=pop() 
14080                 | ' 'print t1.result_type,t1.result.uresult
14080                 | ' 
14080                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
14080     21 22 0E F2 | 	cmp	local03, #33 wz
14084     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
14088     20 00 90 5D |  if_ne	jmp	#LR__1570
1408c     11 25 02 F6 | 	mov	local04, local03
14090     64 5A BF FD | 	call	#_pop
14094     FD 26 02 F6 | 	mov	local05, result1
14098     FE 28 02 F6 | 	mov	local06, result2
1409c     FF 2A 02 F6 | 	mov	local07, result3
140a0     13 1F 02 F6 | 	mov	local01, local05
140a4     14 21 02 F6 | 	mov	local02, local06
140a8     15 23 02 F6 | 	mov	local03, local07
140ac                 | LR__1570
140ac                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
140ac     20 22 0E F2 | 	cmp	local03, #32 wz
140b0     11 25 02 A6 |  if_e	mov	local04, local03
140b4                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
140b4     FF 22 0E F2 | 	cmp	local03, #255 wz
140b8     0C 00 90 5D |  if_ne	jmp	#LR__1571
140bc     0F 13 02 F6 | 	mov	arg01, local01
140c0     94 35 B0 FD | 	call	#_printerror
140c4     4C 04 90 FD | 	jmp	#LR__1589
140c8                 | LR__1571
140c8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
140c8     2B 22 0E F2 | 	cmp	local03, #43 wz
140cc     14 00 90 5D |  if_ne	jmp	#LR__1572
140d0     0F 13 02 F6 | 	mov	arg01, local01
140d4     3C 99 BF FD | 	call	#_convertstring
140d8     FD 26 02 F6 | 	mov	local05, result1
140dc     13 1F 02 F6 | 	mov	local01, local05
140e0     1F 22 06 F6 | 	mov	local03, #31
140e4                 | LR__1572
140e4                 | ' 
140e4                 | ' if r=print_mod_comma  then
140e4     21 24 0E F2 | 	cmp	local04, #33 wz
140e8     AC 01 90 5D |  if_ne	jmp	#LR__1577
140ec                 | '   if t1.result_type=result_int then print t1.result.iresult,
140ec     1C 22 0E F2 | 	cmp	local03, #28 wz
140f0     64 00 90 5D |  if_ne	jmp	#LR__1573
140f4     00 12 06 F6 | 	mov	arg01, #0
140f8     A0 C4 B0 FD | 	call	#__system___getiolock_0442
140fc     FD 12 02 F6 | 	mov	arg01, result1
14100     64 6B B0 FD | 	call	#__system___lockmem
14104     00 28 06 F6 | 	mov	local06, #0
14108     00 12 06 F6 | 	mov	arg01, #0
1410c     0F 15 02 F6 | 	mov	arg02, local01
14110     00 16 06 F6 | 	mov	arg03, #0
14114     0A 18 06 F6 | 	mov	arg04, #10
14118     98 78 B0 FD | 	call	#__system___basic_print_integer
1411c     FD 2A 02 F6 | 	mov	local07, result1
14120     14 27 02 F6 | 	mov	local05, local06
14124     15 27 02 F1 | 	add	local05, local07
14128     00 2C 06 F6 | 	mov	local08, #0
1412c     00 12 06 F6 | 	mov	arg01, #0
14130     09 14 06 F6 | 	mov	arg02, #9
14134     00 16 06 F6 | 	mov	arg03, #0
14138     DC 77 B0 FD | 	call	#__system___basic_print_char
1413c     FD 2E 02 F6 | 	mov	local09, result1
14140     FD 26 02 F1 | 	add	local05, result1
14144     00 12 06 F6 | 	mov	arg01, #0
14148     50 C4 B0 FD | 	call	#__system___getiolock_0442
1414c     FD 00 68 FC | 	wrlong	#0, result1
14150     00 FA 05 F6 | 	mov	result1, #0
14154     00 30 06 F6 | 	mov	local10, #0
14158                 | LR__1573
14158                 | '   if t1.result_type=result_uint then print t1.result.uresult,
14158     1D 22 0E F2 | 	cmp	local03, #29 wz
1415c     64 00 90 5D |  if_ne	jmp	#LR__1574
14160     00 12 06 F6 | 	mov	arg01, #0
14164     34 C4 B0 FD | 	call	#__system___getiolock_0442
14168     FD 12 02 F6 | 	mov	arg01, result1
1416c     F8 6A B0 FD | 	call	#__system___lockmem
14170     00 28 06 F6 | 	mov	local06, #0
14174     00 12 06 F6 | 	mov	arg01, #0
14178     0F 15 02 F6 | 	mov	arg02, local01
1417c     00 16 06 F6 | 	mov	arg03, #0
14180     0A 18 06 F6 | 	mov	arg04, #10
14184     6C 78 B0 FD | 	call	#__system___basic_print_unsigned
14188     FD 2A 02 F6 | 	mov	local07, result1
1418c     14 27 02 F6 | 	mov	local05, local06
14190     15 27 02 F1 | 	add	local05, local07
14194     00 2C 06 F6 | 	mov	local08, #0
14198     00 12 06 F6 | 	mov	arg01, #0
1419c     09 14 06 F6 | 	mov	arg02, #9
141a0     00 16 06 F6 | 	mov	arg03, #0
141a4     70 77 B0 FD | 	call	#__system___basic_print_char
141a8     FD 2E 02 F6 | 	mov	local09, result1
141ac     FD 26 02 F1 | 	add	local05, result1
141b0     00 12 06 F6 | 	mov	arg01, #0
141b4     E4 C3 B0 FD | 	call	#__system___getiolock_0442
141b8     FD 00 68 FC | 	wrlong	#0, result1
141bc     00 FA 05 F6 | 	mov	result1, #0
141c0     00 30 06 F6 | 	mov	local10, #0
141c4                 | LR__1574
141c4                 | '   if t1.result_type=result_float then print t1.result.fresult,
141c4     1E 22 0E F2 | 	cmp	local03, #30 wz
141c8     64 00 90 5D |  if_ne	jmp	#LR__1575
141cc     00 12 06 F6 | 	mov	arg01, #0
141d0     C8 C3 B0 FD | 	call	#__system___getiolock_0442
141d4     FD 12 02 F6 | 	mov	arg01, result1
141d8     8C 6A B0 FD | 	call	#__system___lockmem
141dc     00 28 06 F6 | 	mov	local06, #0
141e0     00 12 06 F6 | 	mov	arg01, #0
141e4     0F 15 02 F6 | 	mov	arg02, local01
141e8     00 16 06 F6 | 	mov	arg03, #0
141ec     23 18 06 F6 | 	mov	arg04, #35
141f0     B0 9B B0 FD | 	call	#__system___basic_print_float
141f4     FD 2A 02 F6 | 	mov	local07, result1
141f8     14 27 02 F6 | 	mov	local05, local06
141fc     15 27 02 F1 | 	add	local05, local07
14200     00 2C 06 F6 | 	mov	local08, #0
14204     00 12 06 F6 | 	mov	arg01, #0
14208     09 14 06 F6 | 	mov	arg02, #9
1420c     00 16 06 F6 | 	mov	arg03, #0
14210     04 77 B0 FD | 	call	#__system___basic_print_char
14214     FD 2E 02 F6 | 	mov	local09, result1
14218     FD 26 02 F1 | 	add	local05, result1
1421c     00 12 06 F6 | 	mov	arg01, #0
14220     78 C3 B0 FD | 	call	#__system___getiolock_0442
14224     FD 00 68 FC | 	wrlong	#0, result1
14228     00 FA 05 F6 | 	mov	result1, #0
1422c     00 30 06 F6 | 	mov	local10, #0
14230                 | LR__1575
14230                 | '   if t1.result_type=result_string then print t1.result.sresult,
14230     1F 22 0E F2 | 	cmp	local03, #31 wz
14234     60 00 90 5D |  if_ne	jmp	#LR__1576
14238     00 12 06 F6 | 	mov	arg01, #0
1423c     5C C3 B0 FD | 	call	#__system___getiolock_0442
14240     FD 12 02 F6 | 	mov	arg01, result1
14244     20 6A B0 FD | 	call	#__system___lockmem
14248     00 28 06 F6 | 	mov	local06, #0
1424c     00 12 06 F6 | 	mov	arg01, #0
14250     0F 15 02 F6 | 	mov	arg02, local01
14254     00 16 06 F6 | 	mov	arg03, #0
14258     14 77 B0 FD | 	call	#__system___basic_print_string
1425c     FD 2A 02 F6 | 	mov	local07, result1
14260     14 27 02 F6 | 	mov	local05, local06
14264     15 27 02 F1 | 	add	local05, local07
14268     00 2C 06 F6 | 	mov	local08, #0
1426c     00 12 06 F6 | 	mov	arg01, #0
14270     09 14 06 F6 | 	mov	arg02, #9
14274     00 16 06 F6 | 	mov	arg03, #0
14278     9C 76 B0 FD | 	call	#__system___basic_print_char
1427c     FD 2E 02 F6 | 	mov	local09, result1
14280     FD 26 02 F1 | 	add	local05, result1
14284     00 12 06 F6 | 	mov	arg01, #0
14288     10 C3 B0 FD | 	call	#__system___getiolock_0442
1428c     FD 00 68 FC | 	wrlong	#0, result1
14290     00 FA 05 F6 | 	mov	result1, #0
14294     00 30 06 F6 | 	mov	local10, #0
14298                 | LR__1576
14298                 | LR__1577
14298                 | ' if r=print_mod_semicolon then 
14298     22 24 0E F2 | 	cmp	local04, #34 wz
1429c     1C 01 90 5D |  if_ne	jmp	#LR__1582
142a0                 | '   if t1.result_type=result_int then print t1.result.iresult;
142a0     1C 22 0E F2 | 	cmp	local03, #28 wz
142a4     50 00 90 5D |  if_ne	jmp	#LR__1578
142a8     00 12 06 F6 | 	mov	arg01, #0
142ac     EC C2 B0 FD | 	call	#__system___getiolock_0442
142b0     FD 12 02 F6 | 	mov	arg01, result1
142b4     B0 69 B0 FD | 	call	#__system___lockmem
142b8     00 28 06 F6 | 	mov	local06, #0
142bc     00 30 06 F6 | 	mov	local10, #0
142c0     0A 2C 06 F6 | 	mov	local08, #10
142c4     00 12 06 F6 | 	mov	arg01, #0
142c8     0F 15 02 F6 | 	mov	arg02, local01
142cc     00 16 06 F6 | 	mov	arg03, #0
142d0     0A 18 06 F6 | 	mov	arg04, #10
142d4     DC 76 B0 FD | 	call	#__system___basic_print_integer
142d8     FD 2A 02 F6 | 	mov	local07, result1
142dc     14 27 02 F6 | 	mov	local05, local06
142e0     15 27 02 F1 | 	add	local05, local07
142e4     00 12 06 F6 | 	mov	arg01, #0
142e8     B0 C2 B0 FD | 	call	#__system___getiolock_0442
142ec     FD 00 68 FC | 	wrlong	#0, result1
142f0     00 FA 05 F6 | 	mov	result1, #0
142f4     00 2E 06 F6 | 	mov	local09, #0
142f8                 | LR__1578
142f8                 | '   if t1.result_type=result_uint then print t1.result.uresult;
142f8     1D 22 0E F2 | 	cmp	local03, #29 wz
142fc     50 00 90 5D |  if_ne	jmp	#LR__1579
14300     00 12 06 F6 | 	mov	arg01, #0
14304     94 C2 B0 FD | 	call	#__system___getiolock_0442
14308     FD 12 02 F6 | 	mov	arg01, result1
1430c     58 69 B0 FD | 	call	#__system___lockmem
14310     00 28 06 F6 | 	mov	local06, #0
14314     00 30 06 F6 | 	mov	local10, #0
14318     0A 2C 06 F6 | 	mov	local08, #10
1431c     00 12 06 F6 | 	mov	arg01, #0
14320     0F 15 02 F6 | 	mov	arg02, local01
14324     00 16 06 F6 | 	mov	arg03, #0
14328     0A 18 06 F6 | 	mov	arg04, #10
1432c     C4 76 B0 FD | 	call	#__system___basic_print_unsigned
14330     FD 2A 02 F6 | 	mov	local07, result1
14334     14 27 02 F6 | 	mov	local05, local06
14338     15 27 02 F1 | 	add	local05, local07
1433c     00 12 06 F6 | 	mov	arg01, #0
14340     58 C2 B0 FD | 	call	#__system___getiolock_0442
14344     FD 00 68 FC | 	wrlong	#0, result1
14348     00 FA 05 F6 | 	mov	result1, #0
1434c     00 2E 06 F6 | 	mov	local09, #0
14350                 | LR__1579
14350                 | '   if t1.result_type=result_float then print t1.result.fresult;
14350     1E 22 0E F2 | 	cmp	local03, #30 wz
14354     30 00 90 5D |  if_ne	jmp	#LR__1580
14358     00 12 06 F6 | 	mov	arg01, #0
1435c     3C C2 B0 FD | 	call	#__system___getiolock_0442
14360     FD 12 02 F6 | 	mov	arg01, result1
14364     00 69 B0 FD | 	call	#__system___lockmem
14368     00 12 06 F6 | 	mov	arg01, #0
1436c     0F 15 02 F6 | 	mov	arg02, local01
14370     00 16 06 F6 | 	mov	arg03, #0
14374     23 18 06 F6 | 	mov	arg04, #35
14378     28 9A B0 FD | 	call	#__system___basic_print_float
1437c     00 12 06 F6 | 	mov	arg01, #0
14380     18 C2 B0 FD | 	call	#__system___getiolock_0442
14384     FD 00 68 FC | 	wrlong	#0, result1
14388                 | LR__1580
14388                 | '   if t1.result_type=result_string then print t1.result.sresult;
14388     1F 22 0E F2 | 	cmp	local03, #31 wz
1438c     2C 00 90 5D |  if_ne	jmp	#LR__1581
14390     00 12 06 F6 | 	mov	arg01, #0
14394     04 C2 B0 FD | 	call	#__system___getiolock_0442
14398     FD 12 02 F6 | 	mov	arg01, result1
1439c     C8 68 B0 FD | 	call	#__system___lockmem
143a0     00 12 06 F6 | 	mov	arg01, #0
143a4     0F 15 02 F6 | 	mov	arg02, local01
143a8     00 16 06 F6 | 	mov	arg03, #0
143ac     C0 75 B0 FD | 	call	#__system___basic_print_string
143b0     00 12 06 F6 | 	mov	arg01, #0
143b4     E4 C1 B0 FD | 	call	#__system___getiolock_0442
143b8     FD 00 68 FC | 	wrlong	#0, result1
143bc                 | LR__1581
143bc                 | LR__1582
143bc                 | ' if r=0 then 
143bc     00 24 0E F2 | 	cmp	local04, #0 wz
143c0     1C 01 90 5D |  if_ne	jmp	#LR__1587
143c4                 | '   if t1.result_type=result_int then print t1.result.iresult
143c4     1C 22 0E F2 | 	cmp	local03, #28 wz
143c8     40 00 90 5D |  if_ne	jmp	#LR__1583
143cc     00 12 06 F6 | 	mov	arg01, #0
143d0     C8 C1 B0 FD | 	call	#__system___getiolock_0442
143d4     FD 12 02 F6 | 	mov	arg01, result1
143d8     8C 68 B0 FD | 	call	#__system___lockmem
143dc     00 12 06 F6 | 	mov	arg01, #0
143e0     0F 15 02 F6 | 	mov	arg02, local01
143e4     00 16 06 F6 | 	mov	arg03, #0
143e8     0A 18 06 F6 | 	mov	arg04, #10
143ec     C4 75 B0 FD | 	call	#__system___basic_print_integer
143f0     00 12 06 F6 | 	mov	arg01, #0
143f4     0A 14 06 F6 | 	mov	arg02, #10
143f8     00 16 06 F6 | 	mov	arg03, #0
143fc     18 75 B0 FD | 	call	#__system___basic_print_char
14400     00 12 06 F6 | 	mov	arg01, #0
14404     94 C1 B0 FD | 	call	#__system___getiolock_0442
14408     FD 00 68 FC | 	wrlong	#0, result1
1440c                 | LR__1583
1440c                 | '   if t1.result_type=result_uint then print t1.result.uresult
1440c     1D 22 0E F2 | 	cmp	local03, #29 wz
14410     40 00 90 5D |  if_ne	jmp	#LR__1584
14414     00 12 06 F6 | 	mov	arg01, #0
14418     80 C1 B0 FD | 	call	#__system___getiolock_0442
1441c     FD 12 02 F6 | 	mov	arg01, result1
14420     44 68 B0 FD | 	call	#__system___lockmem
14424     00 12 06 F6 | 	mov	arg01, #0
14428     0F 15 02 F6 | 	mov	arg02, local01
1442c     00 16 06 F6 | 	mov	arg03, #0
14430     0A 18 06 F6 | 	mov	arg04, #10
14434     BC 75 B0 FD | 	call	#__system___basic_print_unsigned
14438     00 12 06 F6 | 	mov	arg01, #0
1443c     0A 14 06 F6 | 	mov	arg02, #10
14440     00 16 06 F6 | 	mov	arg03, #0
14444     D0 74 B0 FD | 	call	#__system___basic_print_char
14448     00 12 06 F6 | 	mov	arg01, #0
1444c     4C C1 B0 FD | 	call	#__system___getiolock_0442
14450     FD 00 68 FC | 	wrlong	#0, result1
14454                 | LR__1584
14454                 | '   if t1.result_type=result_float then print t1.result.fresult
14454     1E 22 0E F2 | 	cmp	local03, #30 wz
14458     40 00 90 5D |  if_ne	jmp	#LR__1585
1445c     00 12 06 F6 | 	mov	arg01, #0
14460     38 C1 B0 FD | 	call	#__system___getiolock_0442
14464     FD 12 02 F6 | 	mov	arg01, result1
14468     FC 67 B0 FD | 	call	#__system___lockmem
1446c     00 12 06 F6 | 	mov	arg01, #0
14470     0F 15 02 F6 | 	mov	arg02, local01
14474     00 16 06 F6 | 	mov	arg03, #0
14478     23 18 06 F6 | 	mov	arg04, #35
1447c     24 99 B0 FD | 	call	#__system___basic_print_float
14480     00 12 06 F6 | 	mov	arg01, #0
14484     0A 14 06 F6 | 	mov	arg02, #10
14488     00 16 06 F6 | 	mov	arg03, #0
1448c     88 74 B0 FD | 	call	#__system___basic_print_char
14490     00 12 06 F6 | 	mov	arg01, #0
14494     04 C1 B0 FD | 	call	#__system___getiolock_0442
14498     FD 00 68 FC | 	wrlong	#0, result1
1449c                 | LR__1585
1449c                 | '   if t1.result_type=result_string then print t1.result.sresult
1449c     1F 22 0E F2 | 	cmp	local03, #31 wz
144a0     3C 00 90 5D |  if_ne	jmp	#LR__1586
144a4     00 12 06 F6 | 	mov	arg01, #0
144a8     F0 C0 B0 FD | 	call	#__system___getiolock_0442
144ac     FD 12 02 F6 | 	mov	arg01, result1
144b0     B4 67 B0 FD | 	call	#__system___lockmem
144b4     00 12 06 F6 | 	mov	arg01, #0
144b8     0F 15 02 F6 | 	mov	arg02, local01
144bc     00 16 06 F6 | 	mov	arg03, #0
144c0     AC 74 B0 FD | 	call	#__system___basic_print_string
144c4     00 12 06 F6 | 	mov	arg01, #0
144c8     0A 14 06 F6 | 	mov	arg02, #10
144cc     00 16 06 F6 | 	mov	arg03, #0
144d0     44 74 B0 FD | 	call	#__system___basic_print_char
144d4     00 12 06 F6 | 	mov	arg01, #0
144d8     C0 C0 B0 FD | 	call	#__system___getiolock_0442
144dc     FD 00 68 FC | 	wrlong	#0, result1
144e0                 | LR__1586
144e0                 | LR__1587
144e0                 | ' if r=print_mod_empty then print
144e0     20 24 0E F2 | 	cmp	local04, #32 wz
144e4     2C 00 90 5D |  if_ne	jmp	#LR__1588
144e8     00 12 06 F6 | 	mov	arg01, #0
144ec     AC C0 B0 FD | 	call	#__system___getiolock_0442
144f0     FD 12 02 F6 | 	mov	arg01, result1
144f4     70 67 B0 FD | 	call	#__system___lockmem
144f8     00 12 06 F6 | 	mov	arg01, #0
144fc     0A 14 06 F6 | 	mov	arg02, #10
14500     00 16 06 F6 | 	mov	arg03, #0
14504     10 74 B0 FD | 	call	#__system___basic_print_char
14508     00 12 06 F6 | 	mov	arg01, #0
1450c     8C C0 B0 FD | 	call	#__system___getiolock_0442
14510     FD 00 68 FC | 	wrlong	#0, result1
14514                 | LR__1588
14514                 | LR__1589
14514     A7 F0 03 F6 | 	mov	ptra, fp
14518     B2 00 A0 FD | 	call	#popregs_
1451c                 | _do_print_ret
1451c     2D 00 64 FD | 	ret
14520                 | 
14520                 | ' 
14520                 | ' 
14520                 | ' sub do_paper
14520                 | _do_paper
14520     03 4A 05 F6 | 	mov	COUNT_, #3
14524     A8 00 A0 FD | 	call	#pushregs_
14528     CC 55 BF FD | 	call	#_pop
1452c     FD 1E 02 F6 | 	mov	local01, result1
14530     FE 20 02 F6 | 	mov	local02, result2
14534     FF 22 02 F6 | 	mov	local03, result3
14538                 | ' t1=pop() 
14538                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
14538     1E 22 0E F2 | 	cmp	local03, #30 wz
1453c     10 00 90 5D |  if_ne	jmp	#LR__1590
14540     0F 13 02 F6 | 	mov	arg01, local01
14544     00 14 06 F6 | 	mov	arg02, #0
14548     08 97 B0 FD | 	call	#__system___float_tointeger
1454c     FD 1E 02 F6 | 	mov	local01, result1
14550                 | LR__1590
14550                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
14550     1F 22 0E F2 | 	cmp	local03, #31 wz
14554     18 00 90 5D |  if_ne	jmp	#LR__1591
14558     0F 13 02 F6 | 	mov	arg01, local01
1455c     14 9A B0 FD | 	call	#__system____builtin_atof
14560     FD 12 02 F6 | 	mov	arg01, result1
14564     00 14 06 F6 | 	mov	arg02, #0
14568     E8 96 B0 FD | 	call	#__system___float_tointeger
1456c     FD 1E 02 F6 | 	mov	local01, result1
14570                 | LR__1591
14570     56 00 00 FF 
14574     9C E5 05 F1 | 	add	objptr, ##44444
14578     F2 1E 62 FC | 	wrlong	local01, objptr
1457c     04 E4 05 F1 | 	add	objptr, #4
14580     F2 12 02 FB | 	rdlong	arg01, objptr
14584                 | ' 
14584                 | ' write_color:=ff
14584     56 00 00 FF 
14588     63 E5 85 F1 | 	sub	objptr, ##44387
1458c     F2 12 62 FC | 	wrlong	arg01, objptr
14590                 | ' write_background:=bb
14590     04 E4 05 F1 | 	add	objptr, #4
14594     F2 1E 62 FC | 	wrlong	local01, objptr
14598     41 E4 85 F1 | 	sub	objptr, #65
1459c     A7 F0 03 F6 | 	mov	ptra, fp
145a0     B2 00 A0 FD | 	call	#popregs_
145a4                 | _do_paper_ret
145a4     2D 00 64 FD | 	ret
145a8                 | 
145a8                 | ' 
145a8                 | ' sub do_ink
145a8                 | _do_ink
145a8     03 4A 05 F6 | 	mov	COUNT_, #3
145ac     A8 00 A0 FD | 	call	#pushregs_
145b0     44 55 BF FD | 	call	#_pop
145b4     FD 1E 02 F6 | 	mov	local01, result1
145b8     FE 20 02 F6 | 	mov	local02, result2
145bc     FF 22 02 F6 | 	mov	local03, result3
145c0                 | ' t1=pop() 
145c0                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
145c0     1E 22 0E F2 | 	cmp	local03, #30 wz
145c4     10 00 90 5D |  if_ne	jmp	#LR__1600
145c8     0F 13 02 F6 | 	mov	arg01, local01
145cc     00 14 06 F6 | 	mov	arg02, #0
145d0     80 96 B0 FD | 	call	#__system___float_tointeger
145d4     FD 1E 02 F6 | 	mov	local01, result1
145d8                 | LR__1600
145d8                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
145d8     1F 22 0E F2 | 	cmp	local03, #31 wz
145dc     18 00 90 5D |  if_ne	jmp	#LR__1601
145e0     0F 13 02 F6 | 	mov	arg01, local01
145e4     8C 99 B0 FD | 	call	#__system____builtin_atof
145e8     FD 12 02 F6 | 	mov	arg01, result1
145ec     00 14 06 F6 | 	mov	arg02, #0
145f0     60 96 B0 FD | 	call	#__system___float_tointeger
145f4     FD 1E 02 F6 | 	mov	local01, result1
145f8                 | LR__1601
145f8     56 00 00 FF 
145fc     A0 E5 05 F1 | 	add	objptr, ##44448
14600     F2 1E 62 FC | 	wrlong	local01, objptr
14604     04 E4 85 F1 | 	sub	objptr, #4
14608     F2 14 02 FB | 	rdlong	arg02, objptr
1460c                 | ' 
1460c                 | ' write_color:=ff
1460c     56 00 00 FF 
14610     5F E5 85 F1 | 	sub	objptr, ##44383
14614     F2 1E 62 FC | 	wrlong	local01, objptr
14618                 | ' write_background:=bb
14618     04 E4 05 F1 | 	add	objptr, #4
1461c     F2 14 62 FC | 	wrlong	arg02, objptr
14620     56 00 00 FF 
14624     5F E5 05 F1 | 	add	objptr, ##44383
14628     F2 12 02 FB | 	rdlong	arg01, objptr
1462c     56 00 00 FF 
14630     A0 E5 85 F1 | 	sub	objptr, ##44448
14634     8C 42 B0 FD | 	call	#_hg010b_spin2_setcursorcolor
14638     A7 F0 03 F6 | 	mov	ptra, fp
1463c     B2 00 A0 FD | 	call	#popregs_
14640                 | _do_ink_ret
14640     2D 00 64 FD | 	ret
14644                 | 
14644                 | ' 
14644                 | ' 
14644                 | ' sub do_font
14644                 | _do_font
14644     03 4A 05 F6 | 	mov	COUNT_, #3
14648     A8 00 A0 FD | 	call	#pushregs_
1464c     A8 54 BF FD | 	call	#_pop
14650     FD 1E 02 F6 | 	mov	local01, result1
14654     FE 20 02 F6 | 	mov	local02, result2
14658     FF 22 02 F6 | 	mov	local03, result3
1465c                 | ' t1=pop() 
1465c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
1465c     1E 22 0E F2 | 	cmp	local03, #30 wz
14660     10 00 90 5D |  if_ne	jmp	#LR__1610
14664     0F 13 02 F6 | 	mov	arg01, local01
14668     00 14 06 F6 | 	mov	arg02, #0
1466c     E4 95 B0 FD | 	call	#__system___float_tointeger
14670     FD 1E 02 F6 | 	mov	local01, result1
14674                 | LR__1610
14674                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
14674     1F 22 0E F2 | 	cmp	local03, #31 wz
14678     18 00 90 5D |  if_ne	jmp	#LR__1611
1467c     0F 13 02 F6 | 	mov	arg01, local01
14680     F0 98 B0 FD | 	call	#__system____builtin_atof
14684     FD 12 02 F6 | 	mov	arg01, result1
14688     00 14 06 F6 | 	mov	arg02, #0
1468c     C4 95 B0 FD | 	call	#__system___float_tointeger
14690     FD 1E 02 F6 | 	mov	local01, result1
14694                 | LR__1611
14694     56 00 00 FF 
14698     A4 E5 05 F1 | 	add	objptr, ##44452
1469c     F2 1E 62 FC | 	wrlong	local01, objptr
146a0     56 00 00 FF 
146a4     A4 E5 85 F1 | 	sub	objptr, ##44452
146a8     02 1E 66 F0 | 	shl	local01, #2
146ac     0F 13 02 F6 | 	mov	arg01, local01
146b0     70 51 B0 FD | 	call	#_hg010b_spin2_setfontfamily
146b4     A7 F0 03 F6 | 	mov	ptra, fp
146b8     B2 00 A0 FD | 	call	#popregs_
146bc                 | _do_font_ret
146bc     2D 00 64 FD | 	ret
146c0                 | 
146c0                 | ' 
146c0                 | ' sub do_mode
146c0                 | _do_mode
146c0     04 4A 05 F6 | 	mov	COUNT_, #4
146c4     A8 00 A0 FD | 	call	#pushregs_
146c8     2C 54 BF FD | 	call	#_pop
146cc     FD 1E 02 F6 | 	mov	local01, result1
146d0     FE 20 02 F6 | 	mov	local02, result2
146d4     FF 22 02 F6 | 	mov	local03, result3
146d8                 | ' t1=pop() 
146d8                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
146d8     1E 22 0E F2 | 	cmp	local03, #30 wz
146dc     10 00 90 5D |  if_ne	jmp	#LR__1620
146e0     0F 13 02 F6 | 	mov	arg01, local01
146e4     00 14 06 F6 | 	mov	arg02, #0
146e8     68 95 B0 FD | 	call	#__system___float_tointeger
146ec     FD 1E 02 F6 | 	mov	local01, result1
146f0                 | LR__1620
146f0                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
146f0     1F 22 0E F2 | 	cmp	local03, #31 wz
146f4     18 00 90 5D |  if_ne	jmp	#LR__1621
146f8     0F 13 02 F6 | 	mov	arg01, local01
146fc     74 98 B0 FD | 	call	#__system____builtin_atof
14700     FD 12 02 F6 | 	mov	arg01, result1
14704     00 14 06 F6 | 	mov	arg02, #0
14708     48 95 B0 FD | 	call	#__system___float_tointeger
1470c     FD 1E 02 F6 | 	mov	local01, result1
14710                 | LR__1621
14710                 | ' select case t1.result.iresult
14710     0F 25 02 F6 | 	mov	local04, local01
14714     05 24 26 F3 | 	fle	local04, #5
14718     30 24 62 FD | 	jmprel	local04
1471c                 | LR__1622
1471c     14 00 90 FD | 	jmp	#LR__1623
14720     A8 00 90 FD | 	jmp	#LR__1624
14724     10 01 90 FD | 	jmp	#LR__1625
14728     78 01 90 FD | 	jmp	#LR__1626
1472c     E0 01 90 FD | 	jmp	#LR__1627
14730     70 02 90 FD | 	jmp	#LR__1628
14734                 | LR__1623
14734     56 00 00 FF 
14738     A4 E5 05 F1 | 	add	objptr, ##44452
1473c     F2 02 68 FC | 	wrlong	#1, objptr
14740     04 E4 85 F1 | 	sub	objptr, #4
14744     F2 34 69 FC | 	wrlong	#154, objptr
14748     22 00 00 FF 
1474c     A4 E5 05 F1 | 	add	objptr, ##17828
14750     F2 02 68 FC | 	wrlong	#1, objptr
14754     22 00 00 FF 
14758     A8 E5 85 F1 | 	sub	objptr, ##17832
1475c     F2 26 69 FC | 	wrlong	#147, objptr
14760     56 00 00 FF 
14764     9C E5 85 F1 | 	sub	objptr, ##44444
14768     04 12 06 F6 | 	mov	arg01, #4
1476c     B4 50 B0 FD | 	call	#_hg010b_spin2_setfontfamily
14770     56 00 00 FF 
14774     A0 E5 05 F1 | 	add	objptr, ##44448
14778     F2 12 02 FB | 	rdlong	arg01, objptr
1477c     04 E4 85 F1 | 	sub	objptr, #4
14780     F2 14 02 FB | 	rdlong	arg02, objptr
14784                 | ' 
14784                 | ' write_color:=ff
14784     56 00 00 FF 
14788     5F E5 85 F1 | 	sub	objptr, ##44383
1478c     F2 12 62 FC | 	wrlong	arg01, objptr
14790                 | ' write_background:=bb
14790     04 E4 05 F1 | 	add	objptr, #4
14794     F2 14 62 FC | 	wrlong	arg02, objptr
14798     01 00 00 FF 
1479c     00 EA 05 F1 | 	add	ptr__dat__, ##512
147a0     7A 00 00 FF 
147a4     A7 E5 05 F1 | 	add	objptr, ##62887
147a8     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
147ac     04 E4 85 F1 | 	sub	objptr, #4
147b0     03 00 80 FF 
147b4     F2 30 69 FC | 	wrlong	##1688, objptr
147b8     7A 00 00 FF 
147bc     E4 E5 85 F1 | 	sub	objptr, ##62948
147c0     01 00 00 FF 
147c4     00 EA 85 F1 | 	sub	ptr__dat__, ##512
147c8     D8 01 90 FD | 	jmp	#LR__1628
147cc                 | LR__1624
147cc     56 00 00 FF 
147d0     A4 E5 05 F1 | 	add	objptr, ##44452
147d4     F2 00 68 FC | 	wrlong	#0, objptr
147d8     04 E4 85 F1 | 	sub	objptr, #4
147dc     F2 2E 68 FC | 	wrlong	#23, objptr
147e0     22 00 00 FF 
147e4     A4 E5 05 F1 | 	add	objptr, ##17828
147e8     F2 00 68 FC | 	wrlong	#0, objptr
147ec     22 00 00 FF 
147f0     A8 E5 85 F1 | 	sub	objptr, ##17832
147f4     F2 00 68 FC | 	wrlong	#0, objptr
147f8     56 00 00 FF 
147fc     9C E5 85 F1 | 	sub	objptr, ##44444
14800     00 12 06 F6 | 	mov	arg01, #0
14804     1C 50 B0 FD | 	call	#_hg010b_spin2_setfontfamily
14808     56 00 00 FF 
1480c     A0 E5 05 F1 | 	add	objptr, ##44448
14810     F2 12 02 FB | 	rdlong	arg01, objptr
14814     04 E4 85 F1 | 	sub	objptr, #4
14818     F2 14 02 FB | 	rdlong	arg02, objptr
1481c                 | ' 
1481c                 | ' write_color:=ff
1481c     56 00 00 FF 
14820     5F E5 85 F1 | 	sub	objptr, ##44383
14824     F2 12 62 FC | 	wrlong	arg01, objptr
14828                 | ' write_background:=bb
14828     04 E4 05 F1 | 	add	objptr, #4
1482c     F2 14 62 FC | 	wrlong	arg02, objptr
14830     41 E4 85 F1 | 	sub	objptr, #65
14834     6C 01 90 FD | 	jmp	#LR__1628
14838                 | LR__1625
14838     56 00 00 FF 
1483c     A4 E5 05 F1 | 	add	objptr, ##44452
14840     F2 00 68 FC | 	wrlong	#0, objptr
14844     04 E4 85 F1 | 	sub	objptr, #4
14848     F2 6A 69 FC | 	wrlong	#181, objptr
1484c     22 00 00 FF 
14850     A4 E5 05 F1 | 	add	objptr, ##17828
14854     F2 00 68 FC | 	wrlong	#0, objptr
14858     22 00 00 FF 
1485c     A8 E5 85 F1 | 	sub	objptr, ##17832
14860     F2 00 68 FC | 	wrlong	#0, objptr
14864     56 00 00 FF 
14868     9C E5 85 F1 | 	sub	objptr, ##44444
1486c     00 12 06 F6 | 	mov	arg01, #0
14870     B0 4F B0 FD | 	call	#_hg010b_spin2_setfontfamily
14874     56 00 00 FF 
14878     A0 E5 05 F1 | 	add	objptr, ##44448
1487c     F2 12 02 FB | 	rdlong	arg01, objptr
14880     04 E4 85 F1 | 	sub	objptr, #4
14884     F2 14 02 FB | 	rdlong	arg02, objptr
14888                 | ' 
14888                 | ' write_color:=ff
14888     56 00 00 FF 
1488c     5F E5 85 F1 | 	sub	objptr, ##44383
14890     F2 12 62 FC | 	wrlong	arg01, objptr
14894                 | ' write_background:=bb
14894     04 E4 05 F1 | 	add	objptr, #4
14898     F2 14 62 FC | 	wrlong	arg02, objptr
1489c     41 E4 85 F1 | 	sub	objptr, #65
148a0     00 01 90 FD | 	jmp	#LR__1628
148a4                 | LR__1626
148a4     56 00 00 FF 
148a8     A4 E5 05 F1 | 	add	objptr, ##44452
148ac     F2 00 68 FC | 	wrlong	#0, objptr
148b0     04 E4 85 F1 | 	sub	objptr, #4
148b4     F2 1E 68 FC | 	wrlong	#15, objptr
148b8     22 00 00 FF 
148bc     A4 E5 05 F1 | 	add	objptr, ##17828
148c0     F2 00 68 FC | 	wrlong	#0, objptr
148c4     22 00 00 FF 
148c8     A8 E5 85 F1 | 	sub	objptr, ##17832
148cc     F2 00 68 FC | 	wrlong	#0, objptr
148d0     56 00 00 FF 
148d4     9C E5 85 F1 | 	sub	objptr, ##44444
148d8     00 12 06 F6 | 	mov	arg01, #0
148dc     44 4F B0 FD | 	call	#_hg010b_spin2_setfontfamily
148e0     56 00 00 FF 
148e4     A0 E5 05 F1 | 	add	objptr, ##44448
148e8     F2 12 02 FB | 	rdlong	arg01, objptr
148ec     04 E4 85 F1 | 	sub	objptr, #4
148f0     F2 14 02 FB | 	rdlong	arg02, objptr
148f4                 | ' 
148f4                 | ' write_color:=ff
148f4     56 00 00 FF 
148f8     5F E5 85 F1 | 	sub	objptr, ##44383
148fc     F2 12 62 FC | 	wrlong	arg01, objptr
14900                 | ' write_background:=bb
14900     04 E4 05 F1 | 	add	objptr, #4
14904     F2 14 62 FC | 	wrlong	arg02, objptr
14908     41 E4 85 F1 | 	sub	objptr, #65
1490c     94 00 90 FD | 	jmp	#LR__1628
14910                 | LR__1627
14910     56 00 00 FF 
14914     A4 E5 05 F1 | 	add	objptr, ##44452
14918     F2 02 68 FC | 	wrlong	#1, objptr
1491c     04 E4 85 F1 | 	sub	objptr, #4
14920     F2 02 68 FC | 	wrlong	#1, objptr
14924     22 00 00 FF 
14928     A4 E5 05 F1 | 	add	objptr, ##17828
1492c     F2 02 68 FC | 	wrlong	#1, objptr
14930     22 00 00 FF 
14934     A8 E5 85 F1 | 	sub	objptr, ##17832
14938     F2 1C 68 FC | 	wrlong	#14, objptr
1493c     56 00 00 FF 
14940     9C E5 85 F1 | 	sub	objptr, ##44444
14944     04 12 06 F6 | 	mov	arg01, #4
14948     D8 4E B0 FD | 	call	#_hg010b_spin2_setfontfamily
1494c     56 00 00 FF 
14950     A0 E5 05 F1 | 	add	objptr, ##44448
14954     F2 12 02 FB | 	rdlong	arg01, objptr
14958     04 E4 85 F1 | 	sub	objptr, #4
1495c     F2 14 02 FB | 	rdlong	arg02, objptr
14960                 | ' 
14960                 | ' write_color:=ff
14960     56 00 00 FF 
14964     5F E5 85 F1 | 	sub	objptr, ##44383
14968     F2 12 62 FC | 	wrlong	arg01, objptr
1496c                 | ' write_background:=bb
1496c     04 E4 05 F1 | 	add	objptr, #4
14970     F2 14 62 FC | 	wrlong	arg02, objptr
14974     07 00 00 FF 
14978     8A EB 05 F1 | 	add	ptr__dat__, ##3978
1497c     7A 00 00 FF 
14980     A7 E5 05 F1 | 	add	objptr, ##62887
14984     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
14988     04 E4 85 F1 | 	sub	objptr, #4
1498c     03 00 80 FF 
14990     F2 30 69 FC | 	wrlong	##1688, objptr
14994     7A 00 00 FF 
14998     E4 E5 85 F1 | 	sub	objptr, ##62948
1499c     07 00 00 FF 
149a0     8A EB 85 F1 | 	sub	ptr__dat__, ##3978
149a4                 | LR__1628
149a4     7A 00 00 FF 
149a8     E0 E5 05 F1 | 	add	objptr, ##62944
149ac     F2 1E 62 FC | 	wrlong	local01, objptr
149b0     24 00 00 FF 
149b4     40 E4 85 F1 | 	sub	objptr, ##18496
149b8     F2 12 02 FB | 	rdlong	arg01, objptr
149bc     04 E4 85 F1 | 	sub	objptr, #4
149c0     F2 14 02 FB | 	rdlong	arg02, objptr
149c4     56 00 00 FF 
149c8     9C E5 85 F1 | 	sub	objptr, ##44444
149cc     3C 4F B0 FD | 	call	#_hg010b_spin2_cls
149d0     53 01 00 FF 
149d4     F4 13 06 F6 | 	mov	arg01, ##@LR__4729
149d8                 | ' 
149d8                 | ' write(text)
149d8     EC 51 B0 FD | 	call	#_hg010b_spin2_write
149dc                 | ' crlf
149dc     48 53 B0 FD | 	call	#_hg010b_spin2_crlf
149e0     18 00 00 FF 
149e4     4C EB 05 F1 | 	add	ptr__dat__, ##12620
149e8     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
149ec     18 00 00 FF 
149f0     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
149f4                 | ' 
149f4                 | ' write(text)
149f4     D0 51 B0 FD | 	call	#_hg010b_spin2_write
149f8                 | ' crlf
149f8     2C 53 B0 FD | 	call	#_hg010b_spin2_crlf
149fc     79 00 00 FF 
14a00     40 E5 05 F1 | 	add	objptr, ##62272
14a04     F2 12 02 FB | 	rdlong	arg01, objptr
14a08     79 00 00 FF 
14a0c     40 E5 85 F1 | 	sub	objptr, ##62272
14a10                 | ' 
14a10                 | ' write(text)
14a10     B4 51 B0 FD | 	call	#_hg010b_spin2_write
14a14                 | ' crlf
14a14     10 53 B0 FD | 	call	#_hg010b_spin2_crlf
14a18     A7 F0 03 F6 | 	mov	ptra, fp
14a1c     B2 00 A0 FD | 	call	#popregs_
14a20                 | _do_mode_ret
14a20     2D 00 64 FD | 	ret
14a24                 | 
14a24                 | ' 
14a24                 | ' sub do_setwave
14a24                 | _do_setwave
14a24     02 4A 05 F6 | 	mov	COUNT_, #2
14a28     A8 00 A0 FD | 	call	#pushregs_
14a2c     18 F0 07 F1 | 	add	ptra, #24
14a30     C4 50 BF FD | 	call	#_pop
14a34     FD 12 02 F6 | 	mov	arg01, result1
14a38     FE 1E 02 F6 | 	mov	local01, result2
14a3c     FF 20 02 F6 | 	mov	local02, result3
14a40     A7 12 62 FC | 	wrlong	arg01, fp
14a44     04 4E 05 F1 | 	add	fp, #4
14a48     A7 1E 62 FC | 	wrlong	local01, fp
14a4c     04 4E 05 F1 | 	add	fp, #4
14a50     A7 20 62 FC | 	wrlong	local02, fp
14a54     08 4E 85 F1 | 	sub	fp, #8
14a58     9C 50 BF FD | 	call	#_pop
14a5c     FD 20 02 F6 | 	mov	local02, result1
14a60     0C 4E 05 F1 | 	add	fp, #12
14a64     A7 20 62 FC | 	wrlong	local02, fp
14a68     04 4E 05 F1 | 	add	fp, #4
14a6c     A7 FC 61 FC | 	wrlong	result2, fp
14a70     04 4E 05 F1 | 	add	fp, #4
14a74     A7 FE 61 FC | 	wrlong	result3, fp
14a78     08 4E 85 F1 | 	sub	fp, #8
14a7c     A7 12 02 F6 | 	mov	arg01, fp
14a80     0C 4E 85 F1 | 	sub	fp, #12
14a84     C0 D3 BF FD | 	call	#_converttoint
14a88     FD 20 02 F6 | 	mov	local02, result1
14a8c     10 1F 02 F6 | 	mov	local01, local02
14a90     02 1E 66 F0 | 	shl	local01, #2
14a94     10 1F 02 F1 | 	add	local01, local02
14a98     02 1E 66 F0 | 	shl	local01, #2
14a9c     34 00 00 FF 
14aa0     CC E4 05 F1 | 	add	objptr, ##26828
14aa4     F2 1E 02 F1 | 	add	local01, objptr
14aa8     A7 12 02 F6 | 	mov	arg01, fp
14aac     34 00 00 FF 
14ab0     CC E4 85 F1 | 	sub	objptr, ##26828
14ab4     90 D3 BF FD | 	call	#_converttoint
14ab8     0F FB 41 FC | 	wrbyte	result1, local01
14abc     A7 F0 03 F6 | 	mov	ptra, fp
14ac0     B2 00 A0 FD | 	call	#popregs_
14ac4                 | _do_setwave_ret
14ac4     2D 00 64 FD | 	ret
14ac8                 | 
14ac8                 | ' 
14ac8                 | ' sub do_setsustain
14ac8                 | _do_setsustain
14ac8     02 4A 05 F6 | 	mov	COUNT_, #2
14acc     A8 00 A0 FD | 	call	#pushregs_
14ad0     18 F0 07 F1 | 	add	ptra, #24
14ad4     20 50 BF FD | 	call	#_pop
14ad8     FD 12 02 F6 | 	mov	arg01, result1
14adc     FE 1E 02 F6 | 	mov	local01, result2
14ae0     FF 20 02 F6 | 	mov	local02, result3
14ae4     A7 12 62 FC | 	wrlong	arg01, fp
14ae8     04 4E 05 F1 | 	add	fp, #4
14aec     A7 1E 62 FC | 	wrlong	local01, fp
14af0     04 4E 05 F1 | 	add	fp, #4
14af4     A7 20 62 FC | 	wrlong	local02, fp
14af8     08 4E 85 F1 | 	sub	fp, #8
14afc     F8 4F BF FD | 	call	#_pop
14b00     FD 20 02 F6 | 	mov	local02, result1
14b04     0C 4E 05 F1 | 	add	fp, #12
14b08     A7 20 62 FC | 	wrlong	local02, fp
14b0c     04 4E 05 F1 | 	add	fp, #4
14b10     A7 FC 61 FC | 	wrlong	result2, fp
14b14     04 4E 05 F1 | 	add	fp, #4
14b18     A7 FE 61 FC | 	wrlong	result3, fp
14b1c     08 4E 85 F1 | 	sub	fp, #8
14b20     A7 12 02 F6 | 	mov	arg01, fp
14b24     0C 4E 85 F1 | 	sub	fp, #12
14b28     1C D3 BF FD | 	call	#_converttoint
14b2c     FD 20 02 F6 | 	mov	local02, result1
14b30     10 1F 02 F6 | 	mov	local01, local02
14b34     02 1E 66 F0 | 	shl	local01, #2
14b38     10 1F 02 F1 | 	add	local01, local02
14b3c     02 1E 66 F0 | 	shl	local01, #2
14b40     34 00 00 FF 
14b44     CC E4 05 F1 | 	add	objptr, ##26828
14b48     F2 1E 02 F1 | 	add	local01, objptr
14b4c     A7 12 02 F6 | 	mov	arg01, fp
14b50     34 00 00 FF 
14b54     CC E4 85 F1 | 	sub	objptr, ##26828
14b58     EC D2 BF FD | 	call	#_converttoint
14b5c     10 1E 06 F1 | 	add	local01, #16
14b60     0F FB 51 FC | 	wrword	result1, local01
14b64     A7 F0 03 F6 | 	mov	ptra, fp
14b68     B2 00 A0 FD | 	call	#popregs_
14b6c                 | _do_setsustain_ret
14b6c     2D 00 64 FD | 	ret
14b70                 | 
14b70                 | ' 
14b70                 | ' sub do_setenv
14b70                 | _do_setenv
14b70     02 4A 05 F6 | 	mov	COUNT_, #2
14b74     A8 00 A0 FD | 	call	#pushregs_
14b78     18 F0 07 F1 | 	add	ptra, #24
14b7c     78 4F BF FD | 	call	#_pop
14b80     FD 12 02 F6 | 	mov	arg01, result1
14b84     FE 1E 02 F6 | 	mov	local01, result2
14b88     FF 20 02 F6 | 	mov	local02, result3
14b8c     A7 12 62 FC | 	wrlong	arg01, fp
14b90     04 4E 05 F1 | 	add	fp, #4
14b94     A7 1E 62 FC | 	wrlong	local01, fp
14b98     04 4E 05 F1 | 	add	fp, #4
14b9c     A7 20 62 FC | 	wrlong	local02, fp
14ba0     08 4E 85 F1 | 	sub	fp, #8
14ba4     50 4F BF FD | 	call	#_pop
14ba8     FD 20 02 F6 | 	mov	local02, result1
14bac     0C 4E 05 F1 | 	add	fp, #12
14bb0     A7 20 62 FC | 	wrlong	local02, fp
14bb4     04 4E 05 F1 | 	add	fp, #4
14bb8     A7 FC 61 FC | 	wrlong	result2, fp
14bbc     04 4E 05 F1 | 	add	fp, #4
14bc0     A7 FE 61 FC | 	wrlong	result3, fp
14bc4     08 4E 85 F1 | 	sub	fp, #8
14bc8     A7 12 02 F6 | 	mov	arg01, fp
14bcc     0C 4E 85 F1 | 	sub	fp, #12
14bd0     74 D2 BF FD | 	call	#_converttoint
14bd4     FD 20 02 F6 | 	mov	local02, result1
14bd8     10 1F 02 F6 | 	mov	local01, local02
14bdc     02 1E 66 F0 | 	shl	local01, #2
14be0     10 1F 02 F1 | 	add	local01, local02
14be4     02 1E 66 F0 | 	shl	local01, #2
14be8     34 00 00 FF 
14bec     CC E4 05 F1 | 	add	objptr, ##26828
14bf0     F2 1E 02 F1 | 	add	local01, objptr
14bf4     A7 12 02 F6 | 	mov	arg01, fp
14bf8     34 00 00 FF 
14bfc     CC E4 85 F1 | 	sub	objptr, ##26828
14c00     44 D2 BF FD | 	call	#_converttoint
14c04     01 1E 06 F1 | 	add	local01, #1
14c08     0F FB 41 FC | 	wrbyte	result1, local01
14c0c     A7 F0 03 F6 | 	mov	ptra, fp
14c10     B2 00 A0 FD | 	call	#popregs_
14c14                 | _do_setenv_ret
14c14     2D 00 64 FD | 	ret
14c18                 | 
14c18                 | ' 
14c18                 | ' sub do_setdelay
14c18                 | _do_setdelay
14c18     02 4A 05 F6 | 	mov	COUNT_, #2
14c1c     A8 00 A0 FD | 	call	#pushregs_
14c20     18 F0 07 F1 | 	add	ptra, #24
14c24     D0 4E BF FD | 	call	#_pop
14c28     FD 12 02 F6 | 	mov	arg01, result1
14c2c     FE 1E 02 F6 | 	mov	local01, result2
14c30     FF 20 02 F6 | 	mov	local02, result3
14c34     A7 12 62 FC | 	wrlong	arg01, fp
14c38     04 4E 05 F1 | 	add	fp, #4
14c3c     A7 1E 62 FC | 	wrlong	local01, fp
14c40     04 4E 05 F1 | 	add	fp, #4
14c44     A7 20 62 FC | 	wrlong	local02, fp
14c48     08 4E 85 F1 | 	sub	fp, #8
14c4c     A8 4E BF FD | 	call	#_pop
14c50     FD 20 02 F6 | 	mov	local02, result1
14c54     0C 4E 05 F1 | 	add	fp, #12
14c58     A7 20 62 FC | 	wrlong	local02, fp
14c5c     04 4E 05 F1 | 	add	fp, #4
14c60     A7 FC 61 FC | 	wrlong	result2, fp
14c64     04 4E 05 F1 | 	add	fp, #4
14c68     A7 FE 61 FC | 	wrlong	result3, fp
14c6c     08 4E 85 F1 | 	sub	fp, #8
14c70     A7 12 02 F6 | 	mov	arg01, fp
14c74     0C 4E 85 F1 | 	sub	fp, #12
14c78     CC D1 BF FD | 	call	#_converttoint
14c7c     FD 20 02 F6 | 	mov	local02, result1
14c80     10 1F 02 F6 | 	mov	local01, local02
14c84     02 1E 66 F0 | 	shl	local01, #2
14c88     10 1F 02 F1 | 	add	local01, local02
14c8c     02 1E 66 F0 | 	shl	local01, #2
14c90     34 00 00 FF 
14c94     CC E4 05 F1 | 	add	objptr, ##26828
14c98     F2 1E 02 F1 | 	add	local01, objptr
14c9c     A7 12 02 F6 | 	mov	arg01, fp
14ca0     34 00 00 FF 
14ca4     CC E4 85 F1 | 	sub	objptr, ##26828
14ca8     9C D1 BF FD | 	call	#_converttoint
14cac     02 1E 06 F1 | 	add	local01, #2
14cb0     0F FB 51 FC | 	wrword	result1, local01
14cb4     A7 F0 03 F6 | 	mov	ptra, fp
14cb8     B2 00 A0 FD | 	call	#popregs_
14cbc                 | _do_setdelay_ret
14cbc     2D 00 64 FD | 	ret
14cc0                 | 
14cc0                 | ' 
14cc0                 | ' sub do_setlen
14cc0                 | _do_setlen
14cc0     02 4A 05 F6 | 	mov	COUNT_, #2
14cc4     A8 00 A0 FD | 	call	#pushregs_
14cc8     18 F0 07 F1 | 	add	ptra, #24
14ccc     28 4E BF FD | 	call	#_pop
14cd0     FD 12 02 F6 | 	mov	arg01, result1
14cd4     FE 1E 02 F6 | 	mov	local01, result2
14cd8     FF 20 02 F6 | 	mov	local02, result3
14cdc     A7 12 62 FC | 	wrlong	arg01, fp
14ce0     04 4E 05 F1 | 	add	fp, #4
14ce4     A7 1E 62 FC | 	wrlong	local01, fp
14ce8     04 4E 05 F1 | 	add	fp, #4
14cec     A7 20 62 FC | 	wrlong	local02, fp
14cf0     08 4E 85 F1 | 	sub	fp, #8
14cf4     00 4E BF FD | 	call	#_pop
14cf8     FD 20 02 F6 | 	mov	local02, result1
14cfc     0C 4E 05 F1 | 	add	fp, #12
14d00     A7 20 62 FC | 	wrlong	local02, fp
14d04     04 4E 05 F1 | 	add	fp, #4
14d08     A7 FC 61 FC | 	wrlong	result2, fp
14d0c     04 4E 05 F1 | 	add	fp, #4
14d10     A7 FE 61 FC | 	wrlong	result3, fp
14d14     08 4E 85 F1 | 	sub	fp, #8
14d18     A7 12 02 F6 | 	mov	arg01, fp
14d1c     0C 4E 85 F1 | 	sub	fp, #12
14d20     24 D1 BF FD | 	call	#_converttoint
14d24     FD 20 02 F6 | 	mov	local02, result1
14d28     10 1F 02 F6 | 	mov	local01, local02
14d2c     02 1E 66 F0 | 	shl	local01, #2
14d30     10 1F 02 F1 | 	add	local01, local02
14d34     02 1E 66 F0 | 	shl	local01, #2
14d38     34 00 00 FF 
14d3c     CC E4 05 F1 | 	add	objptr, ##26828
14d40     F2 1E 02 F1 | 	add	local01, objptr
14d44     A7 12 02 F6 | 	mov	arg01, fp
14d48     34 00 00 FF 
14d4c     CC E4 85 F1 | 	sub	objptr, ##26828
14d50     A0 D1 BF FD | 	call	#_converttofloat
14d54     04 1E 06 F1 | 	add	local01, #4
14d58     0F FB 61 FC | 	wrlong	result1, local01
14d5c     A7 F0 03 F6 | 	mov	ptra, fp
14d60     B2 00 A0 FD | 	call	#popregs_
14d64                 | _do_setlen_ret
14d64     2D 00 64 FD | 	ret
14d68                 | 
14d68                 | ' 
14d68                 | ' sub do_setvol
14d68                 | _do_setvol
14d68     02 4A 05 F6 | 	mov	COUNT_, #2
14d6c     A8 00 A0 FD | 	call	#pushregs_
14d70     18 F0 07 F1 | 	add	ptra, #24
14d74     80 4D BF FD | 	call	#_pop
14d78     FD 12 02 F6 | 	mov	arg01, result1
14d7c     FE 1E 02 F6 | 	mov	local01, result2
14d80     FF 20 02 F6 | 	mov	local02, result3
14d84     A7 12 62 FC | 	wrlong	arg01, fp
14d88     04 4E 05 F1 | 	add	fp, #4
14d8c     A7 1E 62 FC | 	wrlong	local01, fp
14d90     04 4E 05 F1 | 	add	fp, #4
14d94     A7 20 62 FC | 	wrlong	local02, fp
14d98     08 4E 85 F1 | 	sub	fp, #8
14d9c     58 4D BF FD | 	call	#_pop
14da0     FD 20 02 F6 | 	mov	local02, result1
14da4     0C 4E 05 F1 | 	add	fp, #12
14da8     A7 20 62 FC | 	wrlong	local02, fp
14dac     04 4E 05 F1 | 	add	fp, #4
14db0     A7 FC 61 FC | 	wrlong	result2, fp
14db4     04 4E 05 F1 | 	add	fp, #4
14db8     A7 FE 61 FC | 	wrlong	result3, fp
14dbc     08 4E 85 F1 | 	sub	fp, #8
14dc0     A7 12 02 F6 | 	mov	arg01, fp
14dc4     0C 4E 85 F1 | 	sub	fp, #12
14dc8     7C D0 BF FD | 	call	#_converttoint
14dcc     FD 20 02 F6 | 	mov	local02, result1
14dd0     10 1F 02 F6 | 	mov	local01, local02
14dd4     02 1E 66 F0 | 	shl	local01, #2
14dd8     10 1F 02 F1 | 	add	local01, local02
14ddc     02 1E 66 F0 | 	shl	local01, #2
14de0     34 00 00 FF 
14de4     CC E4 05 F1 | 	add	objptr, ##26828
14de8     F2 1E 02 F1 | 	add	local01, objptr
14dec     A7 12 02 F6 | 	mov	arg01, fp
14df0     34 00 00 FF 
14df4     CC E4 85 F1 | 	sub	objptr, ##26828
14df8     F8 D0 BF FD | 	call	#_converttofloat
14dfc     08 1E 06 F1 | 	add	local01, #8
14e00     0F FB 61 FC | 	wrlong	result1, local01
14e04     A7 F0 03 F6 | 	mov	ptra, fp
14e08     B2 00 A0 FD | 	call	#popregs_
14e0c                 | _do_setvol_ret
14e0c     2D 00 64 FD | 	ret
14e10                 | 
14e10                 | ' 
14e10                 | ' sub do_setpan
14e10                 | _do_setpan
14e10     02 4A 05 F6 | 	mov	COUNT_, #2
14e14     A8 00 A0 FD | 	call	#pushregs_
14e18     18 F0 07 F1 | 	add	ptra, #24
14e1c     D8 4C BF FD | 	call	#_pop
14e20     FD 12 02 F6 | 	mov	arg01, result1
14e24     FE 1E 02 F6 | 	mov	local01, result2
14e28     FF 20 02 F6 | 	mov	local02, result3
14e2c     A7 12 62 FC | 	wrlong	arg01, fp
14e30     04 4E 05 F1 | 	add	fp, #4
14e34     A7 1E 62 FC | 	wrlong	local01, fp
14e38     04 4E 05 F1 | 	add	fp, #4
14e3c     A7 20 62 FC | 	wrlong	local02, fp
14e40     08 4E 85 F1 | 	sub	fp, #8
14e44     B0 4C BF FD | 	call	#_pop
14e48     FD 20 02 F6 | 	mov	local02, result1
14e4c     0C 4E 05 F1 | 	add	fp, #12
14e50     A7 20 62 FC | 	wrlong	local02, fp
14e54     04 4E 05 F1 | 	add	fp, #4
14e58     A7 FC 61 FC | 	wrlong	result2, fp
14e5c     04 4E 05 F1 | 	add	fp, #4
14e60     A7 FE 61 FC | 	wrlong	result3, fp
14e64     08 4E 85 F1 | 	sub	fp, #8
14e68     A7 12 02 F6 | 	mov	arg01, fp
14e6c     0C 4E 85 F1 | 	sub	fp, #12
14e70     D4 CF BF FD | 	call	#_converttoint
14e74     FD 20 02 F6 | 	mov	local02, result1
14e78     10 1F 02 F6 | 	mov	local01, local02
14e7c     02 1E 66 F0 | 	shl	local01, #2
14e80     10 1F 02 F1 | 	add	local01, local02
14e84     02 1E 66 F0 | 	shl	local01, #2
14e88     34 00 00 FF 
14e8c     CC E4 05 F1 | 	add	objptr, ##26828
14e90     F2 1E 02 F1 | 	add	local01, objptr
14e94     A7 12 02 F6 | 	mov	arg01, fp
14e98     34 00 00 FF 
14e9c     CC E4 85 F1 | 	sub	objptr, ##26828
14ea0     50 D0 BF FD | 	call	#_converttofloat
14ea4     0C 1E 06 F1 | 	add	local01, #12
14ea8     0F FB 61 FC | 	wrlong	result1, local01
14eac     A7 F0 03 F6 | 	mov	ptra, fp
14eb0     B2 00 A0 FD | 	call	#popregs_
14eb4                 | _do_setpan_ret
14eb4     2D 00 64 FD | 	ret
14eb8                 | 
14eb8                 | ' 
14eb8                 | ' 
14eb8                 | ' sub do_pinwrite
14eb8                 | _do_pinwrite
14eb8     01 4A 05 F6 | 	mov	COUNT_, #1
14ebc     A8 00 A0 FD | 	call	#pushregs_
14ec0     18 F0 07 F1 | 	add	ptra, #24
14ec4     30 4C BF FD | 	call	#_pop
14ec8     FD 14 02 F6 | 	mov	arg02, result1
14ecc     FE 12 02 F6 | 	mov	arg01, result2
14ed0     FF 1E 02 F6 | 	mov	local01, result3
14ed4     A7 14 62 FC | 	wrlong	arg02, fp
14ed8     04 4E 05 F1 | 	add	fp, #4
14edc     A7 12 62 FC | 	wrlong	arg01, fp
14ee0     04 4E 05 F1 | 	add	fp, #4
14ee4     A7 1E 62 FC | 	wrlong	local01, fp
14ee8     08 4E 85 F1 | 	sub	fp, #8
14eec     08 4C BF FD | 	call	#_pop
14ef0     FF 1E 02 F6 | 	mov	local01, result3
14ef4     0C 4E 05 F1 | 	add	fp, #12
14ef8     A7 FA 61 FC | 	wrlong	result1, fp
14efc     04 4E 05 F1 | 	add	fp, #4
14f00     A7 FC 61 FC | 	wrlong	result2, fp
14f04     04 4E 05 F1 | 	add	fp, #4
14f08     A7 1E 62 FC | 	wrlong	local01, fp
14f0c     08 4E 85 F1 | 	sub	fp, #8
14f10     A7 12 02 F6 | 	mov	arg01, fp
14f14     0C 4E 85 F1 | 	sub	fp, #12
14f18     2C CF BF FD | 	call	#_converttoint
14f1c     FD 1E 02 F6 | 	mov	local01, result1
14f20     A7 12 02 F6 | 	mov	arg01, fp
14f24     20 CF BF FD | 	call	#_converttoint
14f28     FD 14 02 F6 | 	mov	arg02, result1
14f2c     0F 13 02 F6 | 	mov	arg01, local01
14f30     E8 5E B0 FD | 	call	#__system___pinwrite
14f34     A7 F0 03 F6 | 	mov	ptra, fp
14f38     B2 00 A0 FD | 	call	#popregs_
14f3c                 | _do_pinwrite_ret
14f3c     2D 00 64 FD | 	ret
14f40                 | 
14f40                 | ' 
14f40                 | ' sub do_pinfloat
14f40                 | _do_pinfloat
14f40     00 4A 05 F6 | 	mov	COUNT_, #0
14f44     A8 00 A0 FD | 	call	#pushregs_
14f48     0C F0 07 F1 | 	add	ptra, #12
14f4c     A8 4B BF FD | 	call	#_pop
14f50     A7 FA 61 FC | 	wrlong	result1, fp
14f54     04 4E 05 F1 | 	add	fp, #4
14f58     A7 FC 61 FC | 	wrlong	result2, fp
14f5c     04 4E 05 F1 | 	add	fp, #4
14f60     A7 FE 61 FC | 	wrlong	result3, fp
14f64     08 4E 85 F1 | 	sub	fp, #8
14f68     A7 12 02 F6 | 	mov	arg01, fp
14f6c     D8 CE BF FD | 	call	#_converttoint
14f70     50 FA 61 FD | 	fltl	result1
14f74     A7 F0 03 F6 | 	mov	ptra, fp
14f78     B2 00 A0 FD | 	call	#popregs_
14f7c                 | _do_pinfloat_ret
14f7c     2D 00 64 FD | 	ret
14f80                 | 
14f80                 | ' 
14f80                 | ' sub do_pinlo
14f80                 | _do_pinlo
14f80     00 4A 05 F6 | 	mov	COUNT_, #0
14f84     A8 00 A0 FD | 	call	#pushregs_
14f88     0C F0 07 F1 | 	add	ptra, #12
14f8c     68 4B BF FD | 	call	#_pop
14f90     A7 FA 61 FC | 	wrlong	result1, fp
14f94     04 4E 05 F1 | 	add	fp, #4
14f98     A7 FC 61 FC | 	wrlong	result2, fp
14f9c     04 4E 05 F1 | 	add	fp, #4
14fa0     A7 FE 61 FC | 	wrlong	result3, fp
14fa4     08 4E 85 F1 | 	sub	fp, #8
14fa8     A7 12 02 F6 | 	mov	arg01, fp
14fac     98 CE BF FD | 	call	#_converttoint
14fb0     58 FA 61 FD | 	drvl	result1
14fb4     A7 F0 03 F6 | 	mov	ptra, fp
14fb8     B2 00 A0 FD | 	call	#popregs_
14fbc                 | _do_pinlo_ret
14fbc     2D 00 64 FD | 	ret
14fc0                 | 
14fc0                 | ' 
14fc0                 | ' sub do_pinhi
14fc0                 | _do_pinhi
14fc0     00 4A 05 F6 | 	mov	COUNT_, #0
14fc4     A8 00 A0 FD | 	call	#pushregs_
14fc8     0C F0 07 F1 | 	add	ptra, #12
14fcc     28 4B BF FD | 	call	#_pop
14fd0     A7 FA 61 FC | 	wrlong	result1, fp
14fd4     04 4E 05 F1 | 	add	fp, #4
14fd8     A7 FC 61 FC | 	wrlong	result2, fp
14fdc     04 4E 05 F1 | 	add	fp, #4
14fe0     A7 FE 61 FC | 	wrlong	result3, fp
14fe4     08 4E 85 F1 | 	sub	fp, #8
14fe8     A7 12 02 F6 | 	mov	arg01, fp
14fec     58 CE BF FD | 	call	#_converttoint
14ff0     59 FA 61 FD | 	drvh	result1
14ff4     A7 F0 03 F6 | 	mov	ptra, fp
14ff8     B2 00 A0 FD | 	call	#popregs_
14ffc                 | _do_pinhi_ret
14ffc     2D 00 64 FD | 	ret
15000                 | 
15000                 | ' 
15000                 | ' sub do_pintoggle
15000                 | _do_pintoggle
15000     00 4A 05 F6 | 	mov	COUNT_, #0
15004     A8 00 A0 FD | 	call	#pushregs_
15008     0C F0 07 F1 | 	add	ptra, #12
1500c     E8 4A BF FD | 	call	#_pop
15010     A7 FA 61 FC | 	wrlong	result1, fp
15014     04 4E 05 F1 | 	add	fp, #4
15018     A7 FC 61 FC | 	wrlong	result2, fp
1501c     04 4E 05 F1 | 	add	fp, #4
15020     A7 FE 61 FC | 	wrlong	result3, fp
15024     08 4E 85 F1 | 	sub	fp, #8
15028     A7 12 02 F6 | 	mov	arg01, fp
1502c     18 CE BF FD | 	call	#_converttoint
15030     5F FA 61 FD | 	drvnot	result1
15034     A7 F0 03 F6 | 	mov	ptra, fp
15038     B2 00 A0 FD | 	call	#popregs_
1503c                 | _do_pintoggle_ret
1503c     2D 00 64 FD | 	ret
15040                 | 
15040                 | ' 
15040                 | ' 
15040                 | ' sub do_pinstart
15040                 | _do_pinstart
15040     03 4A 05 F6 | 	mov	COUNT_, #3
15044     A8 00 A0 FD | 	call	#pushregs_
15048     30 F0 07 F1 | 	add	ptra, #48
1504c     A8 4A BF FD | 	call	#_pop
15050     FD 16 02 F6 | 	mov	arg03, result1
15054     FE 14 02 F6 | 	mov	arg02, result2
15058     FF 18 02 F6 | 	mov	arg04, result3
1505c     A7 16 62 FC | 	wrlong	arg03, fp
15060     04 4E 05 F1 | 	add	fp, #4
15064     A7 14 62 FC | 	wrlong	arg02, fp
15068     04 4E 05 F1 | 	add	fp, #4
1506c     A7 18 62 FC | 	wrlong	arg04, fp
15070     08 4E 85 F1 | 	sub	fp, #8
15074     80 4A BF FD | 	call	#_pop
15078     FD 16 02 F6 | 	mov	arg03, result1
1507c     FE 14 02 F6 | 	mov	arg02, result2
15080     FF 18 02 F6 | 	mov	arg04, result3
15084     0C 4E 05 F1 | 	add	fp, #12
15088     A7 16 62 FC | 	wrlong	arg03, fp
1508c     04 4E 05 F1 | 	add	fp, #4
15090     A7 14 62 FC | 	wrlong	arg02, fp
15094     04 4E 05 F1 | 	add	fp, #4
15098     A7 18 62 FC | 	wrlong	arg04, fp
1509c     14 4E 85 F1 | 	sub	fp, #20
150a0     54 4A BF FD | 	call	#_pop
150a4     FD 16 02 F6 | 	mov	arg03, result1
150a8     FE 14 02 F6 | 	mov	arg02, result2
150ac     FF 18 02 F6 | 	mov	arg04, result3
150b0     18 4E 05 F1 | 	add	fp, #24
150b4     A7 16 62 FC | 	wrlong	arg03, fp
150b8     04 4E 05 F1 | 	add	fp, #4
150bc     A7 14 62 FC | 	wrlong	arg02, fp
150c0     04 4E 05 F1 | 	add	fp, #4
150c4     A7 18 62 FC | 	wrlong	arg04, fp
150c8     20 4E 85 F1 | 	sub	fp, #32
150cc     28 4A BF FD | 	call	#_pop
150d0     FF 16 02 F6 | 	mov	arg03, result3
150d4     24 4E 05 F1 | 	add	fp, #36
150d8     A7 FA 61 FC | 	wrlong	result1, fp
150dc     04 4E 05 F1 | 	add	fp, #4
150e0     A7 FC 61 FC | 	wrlong	result2, fp
150e4     04 4E 05 F1 | 	add	fp, #4
150e8     A7 16 62 FC | 	wrlong	arg03, fp
150ec     08 4E 85 F1 | 	sub	fp, #8
150f0     A7 12 02 F6 | 	mov	arg01, fp
150f4     24 4E 85 F1 | 	sub	fp, #36
150f8     4C CD BF FD | 	call	#_converttoint
150fc     FD 1E 02 F6 | 	mov	local01, result1
15100     18 4E 05 F1 | 	add	fp, #24
15104     A7 12 02 F6 | 	mov	arg01, fp
15108     18 4E 85 F1 | 	sub	fp, #24
1510c     38 CD BF FD | 	call	#_converttoint
15110     FD 20 02 F6 | 	mov	local02, result1
15114     0C 4E 05 F1 | 	add	fp, #12
15118     A7 12 02 F6 | 	mov	arg01, fp
1511c     0C 4E 85 F1 | 	sub	fp, #12
15120     24 CD BF FD | 	call	#_converttoint
15124     FD 22 02 F6 | 	mov	local03, result1
15128     A7 12 02 F6 | 	mov	arg01, fp
1512c     18 CD BF FD | 	call	#_converttoint
15130     40 1E 62 FD | 	dirl	local01
15134     0F 21 02 FC | 	wrpin	local02, local01
15138     0F 23 12 FC | 	wxpin	local03, local01
1513c     0F FB 21 FC | 	wypin	result1, local01
15140     41 1E 62 FD | 	dirh	local01
15144     A7 F0 03 F6 | 	mov	ptra, fp
15148     B2 00 A0 FD | 	call	#popregs_
1514c                 | _do_pinstart_ret
1514c     2D 00 64 FD | 	ret
15150                 | 
15150                 | ' 
15150                 | ' 
15150                 | ' sub do_wrpin
15150                 | _do_wrpin
15150     01 4A 05 F6 | 	mov	COUNT_, #1
15154     A8 00 A0 FD | 	call	#pushregs_
15158     18 F0 07 F1 | 	add	ptra, #24
1515c     98 49 BF FD | 	call	#_pop
15160     FD 14 02 F6 | 	mov	arg02, result1
15164     FE 12 02 F6 | 	mov	arg01, result2
15168     FF 1E 02 F6 | 	mov	local01, result3
1516c     A7 14 62 FC | 	wrlong	arg02, fp
15170     04 4E 05 F1 | 	add	fp, #4
15174     A7 12 62 FC | 	wrlong	arg01, fp
15178     04 4E 05 F1 | 	add	fp, #4
1517c     A7 1E 62 FC | 	wrlong	local01, fp
15180     08 4E 85 F1 | 	sub	fp, #8
15184     70 49 BF FD | 	call	#_pop
15188     FF 1E 02 F6 | 	mov	local01, result3
1518c     0C 4E 05 F1 | 	add	fp, #12
15190     A7 FA 61 FC | 	wrlong	result1, fp
15194     04 4E 05 F1 | 	add	fp, #4
15198     A7 FC 61 FC | 	wrlong	result2, fp
1519c     04 4E 05 F1 | 	add	fp, #4
151a0     A7 1E 62 FC | 	wrlong	local01, fp
151a4     08 4E 85 F1 | 	sub	fp, #8
151a8     A7 12 02 F6 | 	mov	arg01, fp
151ac     0C 4E 85 F1 | 	sub	fp, #12
151b0     94 CC BF FD | 	call	#_converttoint
151b4     FD 1E 02 F6 | 	mov	local01, result1
151b8     A7 12 02 F6 | 	mov	arg01, fp
151bc     88 CC BF FD | 	call	#_converttoint
151c0     0F FB 01 FC | 	wrpin	result1, local01
151c4     A7 F0 03 F6 | 	mov	ptra, fp
151c8     B2 00 A0 FD | 	call	#popregs_
151cc                 | _do_wrpin_ret
151cc     2D 00 64 FD | 	ret
151d0                 | 
151d0                 | ' 
151d0                 | ' sub do_wxpin
151d0                 | _do_wxpin
151d0     01 4A 05 F6 | 	mov	COUNT_, #1
151d4     A8 00 A0 FD | 	call	#pushregs_
151d8     18 F0 07 F1 | 	add	ptra, #24
151dc     18 49 BF FD | 	call	#_pop
151e0     FD 14 02 F6 | 	mov	arg02, result1
151e4     FE 12 02 F6 | 	mov	arg01, result2
151e8     FF 1E 02 F6 | 	mov	local01, result3
151ec     A7 14 62 FC | 	wrlong	arg02, fp
151f0     04 4E 05 F1 | 	add	fp, #4
151f4     A7 12 62 FC | 	wrlong	arg01, fp
151f8     04 4E 05 F1 | 	add	fp, #4
151fc     A7 1E 62 FC | 	wrlong	local01, fp
15200     08 4E 85 F1 | 	sub	fp, #8
15204     F0 48 BF FD | 	call	#_pop
15208     FF 1E 02 F6 | 	mov	local01, result3
1520c     0C 4E 05 F1 | 	add	fp, #12
15210     A7 FA 61 FC | 	wrlong	result1, fp
15214     04 4E 05 F1 | 	add	fp, #4
15218     A7 FC 61 FC | 	wrlong	result2, fp
1521c     04 4E 05 F1 | 	add	fp, #4
15220     A7 1E 62 FC | 	wrlong	local01, fp
15224     08 4E 85 F1 | 	sub	fp, #8
15228     A7 12 02 F6 | 	mov	arg01, fp
1522c     0C 4E 85 F1 | 	sub	fp, #12
15230     14 CC BF FD | 	call	#_converttoint
15234     FD 1E 02 F6 | 	mov	local01, result1
15238     A7 12 02 F6 | 	mov	arg01, fp
1523c     08 CC BF FD | 	call	#_converttoint
15240     0F FB 11 FC | 	wxpin	result1, local01
15244     A7 F0 03 F6 | 	mov	ptra, fp
15248     B2 00 A0 FD | 	call	#popregs_
1524c                 | _do_wxpin_ret
1524c     2D 00 64 FD | 	ret
15250                 | 
15250                 | ' 
15250                 | ' sub do_wypin
15250                 | _do_wypin
15250     01 4A 05 F6 | 	mov	COUNT_, #1
15254     A8 00 A0 FD | 	call	#pushregs_
15258     18 F0 07 F1 | 	add	ptra, #24
1525c     98 48 BF FD | 	call	#_pop
15260     FD 14 02 F6 | 	mov	arg02, result1
15264     FE 12 02 F6 | 	mov	arg01, result2
15268     FF 1E 02 F6 | 	mov	local01, result3
1526c     A7 14 62 FC | 	wrlong	arg02, fp
15270     04 4E 05 F1 | 	add	fp, #4
15274     A7 12 62 FC | 	wrlong	arg01, fp
15278     04 4E 05 F1 | 	add	fp, #4
1527c     A7 1E 62 FC | 	wrlong	local01, fp
15280     08 4E 85 F1 | 	sub	fp, #8
15284     70 48 BF FD | 	call	#_pop
15288     FF 1E 02 F6 | 	mov	local01, result3
1528c     0C 4E 05 F1 | 	add	fp, #12
15290     A7 FA 61 FC | 	wrlong	result1, fp
15294     04 4E 05 F1 | 	add	fp, #4
15298     A7 FC 61 FC | 	wrlong	result2, fp
1529c     04 4E 05 F1 | 	add	fp, #4
152a0     A7 1E 62 FC | 	wrlong	local01, fp
152a4     08 4E 85 F1 | 	sub	fp, #8
152a8     A7 12 02 F6 | 	mov	arg01, fp
152ac     0C 4E 85 F1 | 	sub	fp, #12
152b0     94 CB BF FD | 	call	#_converttoint
152b4     FD 1E 02 F6 | 	mov	local01, result1
152b8     A7 12 02 F6 | 	mov	arg01, fp
152bc     88 CB BF FD | 	call	#_converttoint
152c0     0F FB 21 FC | 	wypin	result1, local01
152c4     A7 F0 03 F6 | 	mov	ptra, fp
152c8     B2 00 A0 FD | 	call	#popregs_
152cc                 | _do_wypin_ret
152cc     2D 00 64 FD | 	ret
152d0                 | 
152d0                 | ' 
152d0                 | ' sub do_position
152d0                 | _do_position
152d0     01 4A 05 F6 | 	mov	COUNT_, #1
152d4     A8 00 A0 FD | 	call	#pushregs_
152d8     18 F0 07 F1 | 	add	ptra, #24
152dc     18 48 BF FD | 	call	#_pop
152e0     FD 14 02 F6 | 	mov	arg02, result1
152e4     FE 12 02 F6 | 	mov	arg01, result2
152e8     FF 1E 02 F6 | 	mov	local01, result3
152ec     A7 14 62 FC | 	wrlong	arg02, fp
152f0     04 4E 05 F1 | 	add	fp, #4
152f4     A7 12 62 FC | 	wrlong	arg01, fp
152f8     04 4E 05 F1 | 	add	fp, #4
152fc     A7 1E 62 FC | 	wrlong	local01, fp
15300     08 4E 85 F1 | 	sub	fp, #8
15304     F0 47 BF FD | 	call	#_pop
15308     FF 1E 02 F6 | 	mov	local01, result3
1530c     0C 4E 05 F1 | 	add	fp, #12
15310     A7 FA 61 FC | 	wrlong	result1, fp
15314     04 4E 05 F1 | 	add	fp, #4
15318     A7 FC 61 FC | 	wrlong	result2, fp
1531c     04 4E 05 F1 | 	add	fp, #4
15320     A7 1E 62 FC | 	wrlong	local01, fp
15324     08 4E 85 F1 | 	sub	fp, #8
15328     A7 12 02 F6 | 	mov	arg01, fp
1532c     0C 4E 85 F1 | 	sub	fp, #12
15330     14 CB BF FD | 	call	#_converttoint
15334     FD 1E 02 F6 | 	mov	local01, result1
15338     A7 12 02 F6 | 	mov	arg01, fp
1533c     08 CB BF FD | 	call	#_converttoint
15340     FD 14 02 F6 | 	mov	arg02, result1
15344     0F 13 02 F6 | 	mov	arg01, local01
15348     18 45 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1534c     A7 F0 03 F6 | 	mov	ptra, fp
15350     B2 00 A0 FD | 	call	#popregs_
15354                 | _do_position_ret
15354     2D 00 64 FD | 	ret
15358                 | 
15358                 | ' 
15358                 | ' sub do_waitms
15358                 | _do_waitms
15358     01 4A 05 F6 | 	mov	COUNT_, #1
1535c     A8 00 A0 FD | 	call	#pushregs_
15360     18 F0 07 F1 | 	add	ptra, #24
15364     90 47 BF FD | 	call	#_pop
15368     A7 FA 61 FC | 	wrlong	result1, fp
1536c     04 4E 05 F1 | 	add	fp, #4
15370     A7 FC 61 FC | 	wrlong	result2, fp
15374     04 4E 05 F1 | 	add	fp, #4
15378     A7 FE 61 FC | 	wrlong	result3, fp
1537c                 | ' 
1537c                 | ' t1=pop() 'value
1537c                 | ' 
1537c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
1537c     08 4E 85 F1 | 	sub	fp, #8
15380     1C FE 0D F2 | 	cmp	result3, #28 wz
15384     08 4E 05 51 |  if_ne	add	fp, #8
15388     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1538c     08 4E 85 51 |  if_ne	sub	fp, #8
15390     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
15394     A7 12 02 AB |  if_e	rdlong	arg01, fp
15398     0C 4E 05 A1 |  if_e	add	fp, #12
1539c     A7 12 62 AC |  if_e	wrlong	arg01, fp
153a0     0C 4E 85 A1 |  if_e	sub	fp, #12
153a4     14 00 90 AD |  if_e	jmp	#LR__1630
153a8     A7 12 02 F6 | 	mov	arg01, fp
153ac     98 CA BF FD | 	call	#_converttoint
153b0     0C 4E 05 F1 | 	add	fp, #12
153b4     A7 FA 61 FC | 	wrlong	result1, fp
153b8     0C 4E 85 F1 | 	sub	fp, #12
153bc                 | LR__1630
153bc                 | ' if t<0 then return
153bc     0C 4E 05 F1 | 	add	fp, #12
153c0     A7 12 02 FB | 	rdlong	arg01, fp
153c4     0C 4E 85 F1 | 	sub	fp, #12
153c8     00 12 56 F2 | 	cmps	arg01, #0 wc
153cc     B8 00 90 CD |  if_b	jmp	#LR__1635
153d0                 | ' if t < 5000 then 
153d0     0C 4E 05 F1 | 	add	fp, #12
153d4     A7 12 02 FB | 	rdlong	arg01, fp
153d8     0C 4E 85 F1 | 	sub	fp, #12
153dc     09 00 00 FF 
153e0     88 13 56 F2 | 	cmps	arg01, ##5000 wc
153e4     14 00 90 3D |  if_ae	jmp	#LR__1631
153e8     0C 4E 05 F1 | 	add	fp, #12
153ec     A7 12 02 FB | 	rdlong	arg01, fp
153f0     0C 4E 85 F1 | 	sub	fp, #12
153f4     64 5B B0 FD | 	call	#__system___waitms
153f8     8C 00 90 FD | 	jmp	#LR__1634
153fc                 | LR__1631
153fc     10 4E 05 F1 | 	add	fp, #16
15400     A7 02 68 FC | 	wrlong	#1, fp
15404     04 4E 85 F1 | 	sub	fp, #4
15408     A7 12 02 FB | 	rdlong	arg01, fp
1540c     09 13 52 F6 | 	abs	arg01, arg01 wc
15410     09 00 00 FF 
15414     88 13 16 FD | 	qdiv	arg01, ##5000
15418                 | '   for i=1 to t/5000
15418     0C 4E 85 F1 | 	sub	fp, #12
1541c     18 1E 62 FD | 	getqx	local01
15420     0F 1F 82 F6 | 	negc	local01, local01
15424     01 1E 06 F1 | 	add	local01, #1
15428                 | LR__1632
15428     10 4E 05 F1 | 	add	fp, #16
1542c     A7 12 02 FB | 	rdlong	arg01, fp
15430     10 4E 85 F1 | 	sub	fp, #16
15434     0F 13 52 F2 | 	cmps	arg01, local01 wc
15438     28 00 90 3D |  if_ae	jmp	#LR__1633
1543c     0C 4E 05 F1 | 	add	fp, #12
15440     A7 12 02 FB | 	rdlong	arg01, fp
15444     0C 4E 85 F1 | 	sub	fp, #12
15448     10 5B B0 FD | 	call	#__system___waitms
1544c     10 4E 05 F1 | 	add	fp, #16
15450     A7 12 02 FB | 	rdlong	arg01, fp
15454     01 12 06 F1 | 	add	arg01, #1
15458     A7 12 62 FC | 	wrlong	arg01, fp
1545c     10 4E 85 F1 | 	sub	fp, #16
15460     C4 FF 9F FD | 	jmp	#LR__1632
15464                 | LR__1633
15464     0C 4E 05 F1 | 	add	fp, #12
15468     A7 1E 02 FB | 	rdlong	local01, fp
1546c     0F 1F 52 F6 | 	abs	local01, local01 wc
15470     09 00 00 FF 
15474     88 1F 16 FD | 	qdiv	local01, ##5000
15478     0C 4E 85 F1 | 	sub	fp, #12
1547c     19 1E 62 FD | 	getqy	local01
15480     0F 13 82 F6 | 	negc	arg01, local01
15484     D4 5A B0 FD | 	call	#__system___waitms
15488                 | LR__1634
15488                 | LR__1635
15488     A7 F0 03 F6 | 	mov	ptra, fp
1548c     B2 00 A0 FD | 	call	#popregs_
15490                 | _do_waitms_ret
15490     2D 00 64 FD | 	ret
15494                 | 
15494                 | ' 
15494                 | ' sub do_waitvbl
15494                 | _do_waitvbl
15494     01 12 06 F6 | 	mov	arg01, #1
15498     00 44 B0 FD | 	call	#_hg010b_spin2_waitvbl
1549c                 | _do_waitvbl_ret
1549c     2D 00 64 FD | 	ret
154a0                 | 
154a0                 | ' 
154a0                 | ' sub do_waitclock
154a0                 | _do_waitclock
154a0     7A 00 00 FF 
154a4     D8 E5 05 F1 | 	add	objptr, ##62936
154a8     F2 00 02 FB | 	rdlong	_var01, objptr
154ac                 | ' c=hkcnt
154ac                 | ' do: loop until hkcnt<>c
154ac                 | LR__1640
154ac     F2 02 02 FB | 	rdlong	_var02, objptr
154b0     00 03 0A F2 | 	cmp	_var02, _var01 wz
154b4     F4 FF 9F AD |  if_e	jmp	#LR__1640
154b8     7A 00 00 FF 
154bc     D8 E5 85 F1 | 	sub	objptr, ##62936
154c0                 | _do_waitclock_ret
154c0     2D 00 64 FD | 	ret
154c4                 | 
154c4                 | ' 
154c4                 | ' sub do_dir
154c4                 | _do_dir
154c4     03 4A 05 F6 | 	mov	COUNT_, #3
154c8     A8 00 A0 FD | 	call	#pushregs_
154cc     53 01 00 FF 
154d0     F5 13 06 F6 | 	mov	arg01, ##@LR__4730
154d4     1C 5E B0 FD | 	call	#__system___chdir
154d8                 | ' chdir("/sd/bas")       ' set working directory
154d8                 | ' print "Working directory: "; currentdir$ 
154d8     00 12 06 F6 | 	mov	arg01, #0
154dc     BC B0 B0 FD | 	call	#__system___getiolock_0442
154e0     FD 12 02 F6 | 	mov	arg01, result1
154e4     80 57 B0 FD | 	call	#__system___lockmem
154e8     53 01 00 FF 
154ec     FD 15 06 F6 | 	mov	arg02, ##@LR__4731
154f0     00 12 06 F6 | 	mov	arg01, #0
154f4     00 16 06 F6 | 	mov	arg03, #0
154f8     74 64 B0 FD | 	call	#__system___basic_print_string
154fc     71 00 00 FF 
15500     F8 E5 05 F1 | 	add	objptr, ##58360
15504     F2 14 02 FB | 	rdlong	arg02, objptr
15508     71 00 00 FF 
1550c     F8 E5 85 F1 | 	sub	objptr, ##58360
15510     00 12 06 F6 | 	mov	arg01, #0
15514     00 16 06 F6 | 	mov	arg03, #0
15518     54 64 B0 FD | 	call	#__system___basic_print_string
1551c     00 12 06 F6 | 	mov	arg01, #0
15520     0A 14 06 F6 | 	mov	arg02, #10
15524     00 16 06 F6 | 	mov	arg03, #0
15528     EC 63 B0 FD | 	call	#__system___basic_print_char
1552c     00 12 06 F6 | 	mov	arg01, #0
15530     68 B0 B0 FD | 	call	#__system___getiolock_0442
15534     FD 00 68 FC | 	wrlong	#0, result1
15538     54 01 00 FF 
1553c     11 12 06 F6 | 	mov	arg01, ##@LR__4732
15540     10 14 06 F6 | 	mov	arg02, #16
15544     8C B1 B0 FD | 	call	#__system___basic_dir
15548     FD 1E 02 F6 | 	mov	local01, result1
1554c                 | ' 
1554c                 | ' filename=dir$("*", fbDirectory)
1554c                 | ' while filename <> "" and filename <> nil
1554c                 | LR__1650
1554c     00 20 06 F6 | 	mov	local02, #0
15550     54 01 00 FF 
15554     13 14 06 F6 | 	mov	arg02, ##@LR__4733
15558     0F 13 02 F6 | 	mov	arg01, local01
1555c     30 57 B0 FD | 	call	#__system___string_cmp
15560     00 FA 0D F2 | 	cmp	result1, #0 wz
15564     00 20 26 56 |  if_ne	not	local02, #0
15568     00 22 06 F6 | 	mov	local03, #0
1556c     0F 13 02 F6 | 	mov	arg01, local01
15570     00 14 06 F6 | 	mov	arg02, #0
15574     18 57 B0 FD | 	call	#__system___string_cmp
15578     00 FA 0D F2 | 	cmp	result1, #0 wz
1557c     00 22 26 56 |  if_ne	not	local03, #0
15580     11 21 CA F7 | 	test	local02, local03 wz
15584     64 00 90 AD |  if_e	jmp	#LR__1651
15588                 | '   print "[dir] ";filename
15588     00 12 06 F6 | 	mov	arg01, #0
1558c     0C B0 B0 FD | 	call	#__system___getiolock_0442
15590     FD 12 02 F6 | 	mov	arg01, result1
15594     D0 56 B0 FD | 	call	#__system___lockmem
15598     54 01 00 FF 
1559c     14 14 06 F6 | 	mov	arg02, ##@LR__4734
155a0     00 12 06 F6 | 	mov	arg01, #0
155a4     00 16 06 F6 | 	mov	arg03, #0
155a8     C4 63 B0 FD | 	call	#__system___basic_print_string
155ac     00 12 06 F6 | 	mov	arg01, #0
155b0     0F 15 02 F6 | 	mov	arg02, local01
155b4     00 16 06 F6 | 	mov	arg03, #0
155b8     B4 63 B0 FD | 	call	#__system___basic_print_string
155bc     00 12 06 F6 | 	mov	arg01, #0
155c0     0A 14 06 F6 | 	mov	arg02, #10
155c4     00 16 06 F6 | 	mov	arg03, #0
155c8     4C 63 B0 FD | 	call	#__system___basic_print_char
155cc     00 12 06 F6 | 	mov	arg01, #0
155d0     C8 AF B0 FD | 	call	#__system___getiolock_0442
155d4     FD 00 68 FC | 	wrlong	#0, result1
155d8     00 12 06 F6 | 	mov	arg01, #0
155dc     00 14 06 F6 | 	mov	arg02, #0
155e0     F0 B0 B0 FD | 	call	#__system___basic_dir
155e4     FD 1E 02 F6 | 	mov	local01, result1
155e8     60 FF 9F FD | 	jmp	#LR__1650
155ec                 | LR__1651
155ec     54 01 00 FF 
155f0     1B 12 06 F6 | 	mov	arg01, ##@LR__4735
155f4     21 14 06 F6 | 	mov	arg02, #33
155f8     D8 B0 B0 FD | 	call	#__system___basic_dir
155fc     FD 1E 02 F6 | 	mov	local01, result1
15600                 | ' 
15600                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
15600                 | ' do while filename <> "" and filename <> nil
15600                 | LR__1652
15600     00 20 06 F6 | 	mov	local02, #0
15604     54 01 00 FF 
15608     1D 14 06 F6 | 	mov	arg02, ##@LR__4736
1560c     0F 13 02 F6 | 	mov	arg01, local01
15610     7C 56 B0 FD | 	call	#__system___string_cmp
15614     00 FA 0D F2 | 	cmp	result1, #0 wz
15618     00 20 26 56 |  if_ne	not	local02, #0
1561c     00 22 06 F6 | 	mov	local03, #0
15620     0F 13 02 F6 | 	mov	arg01, local01
15624     00 14 06 F6 | 	mov	arg02, #0
15628     64 56 B0 FD | 	call	#__system___string_cmp
1562c     00 FA 0D F2 | 	cmp	result1, #0 wz
15630     00 22 26 56 |  if_ne	not	local03, #0
15634     11 21 CA F7 | 	test	local02, local03 wz
15638     4C 01 90 AD |  if_e	jmp	#LR__1656
1563c                 | '   print filename
1563c     00 12 06 F6 | 	mov	arg01, #0
15640     58 AF B0 FD | 	call	#__system___getiolock_0442
15644     FD 12 02 F6 | 	mov	arg01, result1
15648     1C 56 B0 FD | 	call	#__system___lockmem
1564c     00 12 06 F6 | 	mov	arg01, #0
15650     0F 15 02 F6 | 	mov	arg02, local01
15654     00 16 06 F6 | 	mov	arg03, #0
15658     14 63 B0 FD | 	call	#__system___basic_print_string
1565c     00 12 06 F6 | 	mov	arg01, #0
15660     0A 14 06 F6 | 	mov	arg02, #10
15664     00 16 06 F6 | 	mov	arg03, #0
15668     AC 62 B0 FD | 	call	#__system___basic_print_char
1566c     00 12 06 F6 | 	mov	arg01, #0
15670     28 AF B0 FD | 	call	#__system___getiolock_0442
15674     FD 00 68 FC | 	wrlong	#0, result1
15678     00 12 06 F6 | 	mov	arg01, #0
1567c     00 14 06 F6 | 	mov	arg02, #0
15680     50 B0 B0 FD | 	call	#__system___basic_dir
15684     FD 1E 02 F6 | 	mov	local01, result1
15688                 | '   filename = dir$()      ' continue scan
15688                 | '     if v.getcursory()=34 then    'bug, after first break, cursory is always 35
15688                 | ' return cursor_y
15688     3A E4 05 F1 | 	add	objptr, #58
1568c     F2 FA C1 FA | 	rdbyte	result1, objptr
15690     3A E4 85 F1 | 	sub	objptr, #58
15694     22 FA 0D F2 | 	cmp	result1, #34 wz
15698     64 FF 9F 5D |  if_ne	jmp	#LR__1652
1569c                 | '     print "-----more, press any key";
1569c     00 12 06 F6 | 	mov	arg01, #0
156a0     F8 AE B0 FD | 	call	#__system___getiolock_0442
156a4     FD 12 02 F6 | 	mov	arg01, result1
156a8     BC 55 B0 FD | 	call	#__system___lockmem
156ac     54 01 00 FF 
156b0     1E 14 06 F6 | 	mov	arg02, ##@LR__4737
156b4     00 12 06 F6 | 	mov	arg01, #0
156b8     00 16 06 F6 | 	mov	arg03, #0
156bc     B0 62 B0 FD | 	call	#__system___basic_print_string
156c0     00 12 06 F6 | 	mov	arg01, #0
156c4     D4 AE B0 FD | 	call	#__system___getiolock_0442
156c8     FD 00 68 FC | 	wrlong	#0, result1
156cc                 | '     do 
156cc                 | LR__1653
156cc     C0 4D B0 FD | 	call	#_usbnew_spin2_get_key
156d0     00 FA 0D F2 | 	cmp	result1, #0 wz
156d4     F4 FF 9F 5D |  if_ne	jmp	#LR__1653
156d8                 | '     do
156d8                 | LR__1654
156d8     B4 4D B0 FD | 	call	#_usbnew_spin2_get_key
156dc     00 FA 0D F2 | 	cmp	result1, #0 wz
156e0     F4 FF 9F AD |  if_e	jmp	#LR__1654
156e4                 | '       if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len) 
156e4     79 00 00 FF 
156e8     44 E5 05 F1 | 	add	objptr, ##62276
156ec     F2 20 02 FB | 	rdlong	local02, objptr
156f0     79 00 00 FF 
156f4     44 E5 85 F1 | 	sub	objptr, ##62276
156f8     01 20 0E F2 | 	cmp	local02, #1 wz
156fc     3C 00 90 5D |  if_ne	jmp	#LR__1655
15700     7A 00 00 FF 
15704     E8 E5 05 F1 | 	add	objptr, ##62952
15708     F2 14 02 FB | 	rdlong	arg02, objptr
1570c     04 E4 85 F1 | 	sub	objptr, #4
15710     F2 1A 02 FB | 	rdlong	arg05, objptr
15714     07 12 06 F6 | 	mov	arg01, #7
15718     56 00 00 FF 
1571c     44 16 06 F6 | 	mov	arg03, ##44100
15720     0E 18 C6 F9 | 	decod	arg04, #14
15724     01 1C 66 F6 | 	neg	arg06, #1
15728     6F 00 00 FF 
1572c     24 E5 85 F1 | 	sub	objptr, ##57124
15730     E4 50 B0 FD | 	call	#_audio096_spin2_play
15734     0B 00 00 FF 
15738     C0 E4 85 F1 | 	sub	objptr, ##5824
1573c                 | LR__1655
1573c     00 12 06 F6 | 	mov	arg01, #0
15740     23 14 06 F6 | 	mov	arg02, #35
15744     1C 41 B0 FD | 	call	#_hg010b_spin2_setcursorpos
15748                 | '     position 0,35: print "                             ";: position 4,35  
15748     00 12 06 F6 | 	mov	arg01, #0
1574c     4C AE B0 FD | 	call	#__system___getiolock_0442
15750     FD 12 02 F6 | 	mov	arg01, result1
15754     10 55 B0 FD | 	call	#__system___lockmem
15758     54 01 00 FF 
1575c     37 14 06 F6 | 	mov	arg02, ##@LR__4738
15760     00 12 06 F6 | 	mov	arg01, #0
15764     00 16 06 F6 | 	mov	arg03, #0
15768     04 62 B0 FD | 	call	#__system___basic_print_string
1576c     00 12 06 F6 | 	mov	arg01, #0
15770     28 AE B0 FD | 	call	#__system___getiolock_0442
15774     FD 00 68 FC | 	wrlong	#0, result1
15778     04 12 06 F6 | 	mov	arg01, #4
1577c     23 14 06 F6 | 	mov	arg02, #35
15780     E0 40 B0 FD | 	call	#_hg010b_spin2_setcursorpos
15784     78 FE 9F FD | 	jmp	#LR__1652
15788                 | LR__1656
15788     A7 F0 03 F6 | 	mov	ptra, fp
1578c     B2 00 A0 FD | 	call	#popregs_
15790                 | _do_dir_ret
15790     2D 00 64 FD | 	ret
15794                 | 
15794                 | ' 
15794                 | ' sub do_if
15794                 | _do_if
15794     05 4A 05 F6 | 	mov	COUNT_, #5
15798     A8 00 A0 FD | 	call	#pushregs_
1579c     58 43 BF FD | 	call	#_pop
157a0     FD 1E 0A F6 | 	mov	local01, result1 wz
157a4     FE 20 02 F6 | 	mov	local02, result2
157a8     FF 22 02 F6 | 	mov	local03, result3
157ac                 | ' t1=pop()
157ac                 | ' ' if uresult=0, jump over else
157ac                 | ' if t1.result.uresult = 0 then 
157ac     BC 00 90 5D |  if_ne	jmp	#LR__1662
157b0                 | '   for i=lineptr_e to lineptr-1
157b0     69 00 00 FF 
157b4     E4 E5 05 F1 | 	add	objptr, ##54244
157b8     F2 24 02 FB | 	rdlong	local04, objptr
157bc     04 E4 85 F1 | 	sub	objptr, #4
157c0     F2 26 02 FB | 	rdlong	local05, objptr
157c4     69 00 00 FF 
157c8     E0 E5 85 F1 | 	sub	objptr, ##54240
157cc                 | LR__1660
157cc     13 25 52 F2 | 	cmps	local04, local05 wc
157d0     78 00 90 3D |  if_ae	jmp	#LR__1661
157d4     12 FF 01 F6 | 	mov	result3, local04
157d8     01 FE 65 F0 | 	shl	result3, #1
157dc     12 FF 01 F1 | 	add	result3, local04
157e0     02 FE 65 F0 | 	shl	result3, #2
157e4     66 00 00 FF 
157e8     E0 E5 05 F1 | 	add	objptr, ##52704
157ec     F2 FE 01 F1 | 	add	result3, objptr
157f0     FF 1E 02 FB | 	rdlong	local01, result3
157f4     04 FE 05 F1 | 	add	result3, #4
157f8     FF FC 01 FB | 	rdlong	result2, result3
157fc     12 FF 01 F6 | 	mov	result3, local04
15800     01 FE 65 F0 | 	shl	result3, #1
15804     12 FF 01 F1 | 	add	result3, local04
15808     02 FE 65 F0 | 	shl	result3, #2
1580c     F2 FE 01 F1 | 	add	result3, objptr
15810     08 FE 05 F1 | 	add	result3, #8
15814     FF FE 01 FB | 	rdlong	result3, result3
15818     FE 20 02 F6 | 	mov	local02, result2
1581c     FF 22 02 F6 | 	mov	local03, result3
15820                 | '     t1=compiledline(i)
15820                 | '     if t1.result_type=token_else then lineptr_e=i : return
15820     5A 22 0E F2 | 	cmp	local03, #90 wz
15824     66 00 00 FF 
15828     E0 E5 85 F1 | 	sub	objptr, ##52704
1582c     69 00 00 AF 
15830     E4 E5 05 A1 |  if_e	add	objptr, ##54244
15834     F2 24 62 AC |  if_e	wrlong	local04, objptr
15838     69 00 00 AF 
1583c     E4 E5 85 A1 |  if_e	sub	objptr, ##54244
15840     28 00 90 AD |  if_e	jmp	#LR__1663
15844     01 24 06 F1 | 	add	local04, #1
15848     80 FF 9F FD | 	jmp	#LR__1660
1584c                 | LR__1661
1584c     69 00 00 FF 
15850     E0 E5 05 F1 | 	add	objptr, ##54240
15854     F2 26 02 FB | 	rdlong	local05, objptr
15858     01 26 86 F1 | 	sub	local05, #1
1585c     04 E4 05 F1 | 	add	objptr, #4
15860     F2 26 62 FC | 	wrlong	local05, objptr
15864     69 00 00 FF 
15868     E4 E5 85 F1 | 	sub	objptr, ##54244
1586c                 | LR__1662
1586c                 | LR__1663
1586c     A7 F0 03 F6 | 	mov	ptra, fp
15870     B2 00 A0 FD | 	call	#popregs_
15874                 | _do_if_ret
15874     2D 00 64 FD | 	ret
15878                 | 
15878                 | ' 
15878                 | ' sub do_else
15878                 | _do_else
15878     69 00 00 FF 
1587c     E0 E5 05 F1 | 	add	objptr, ##54240
15880     F2 00 02 FB | 	rdlong	_var01, objptr
15884     01 00 86 F1 | 	sub	_var01, #1
15888     04 E4 05 F1 | 	add	objptr, #4
1588c     F2 00 62 FC | 	wrlong	_var01, objptr
15890     69 00 00 FF 
15894     E4 E5 85 F1 | 	sub	objptr, ##54244
15898                 | _do_else_ret
15898     2D 00 64 FD | 	ret
1589c                 | 
1589c                 | ' 
1589c                 | ' sub do_rad
1589c                 | _do_rad
1589c     7A 00 00 FF 
158a0     EC E5 05 F1 | 	add	objptr, ##62956
158a4     00 C0 9F FF 
158a8     F2 00 68 FC | 	wrlong	##1065353216, objptr
158ac     04 E4 05 F1 | 	add	objptr, #4
158b0     00 C0 9F FF 
158b4     F2 00 68 FC | 	wrlong	##1065353216, objptr
158b8     7A 00 00 FF 
158bc     F0 E5 85 F1 | 	sub	objptr, ##62960
158c0                 | _do_rad_ret
158c0     2D 00 64 FD | 	ret
158c4                 | 
158c4                 | ' 
158c4                 | ' sub do_deg
158c4                 | _do_deg
158c4     7A 00 00 FF 
158c8     EC E5 05 F1 | 	add	objptr, ##62956
158cc     7D 47 9E FF 
158d0     F2 6A 68 FC | 	wrlong	##1016003125, objptr
158d4     04 E4 05 F1 | 	add	objptr, #4
158d8     97 32 A1 FF 
158dc     F2 C2 69 FC | 	wrlong	##1113927393, objptr
158e0     7A 00 00 FF 
158e4     F0 E5 85 F1 | 	sub	objptr, ##62960
158e8                 | _do_deg_ret
158e8     2D 00 64 FD | 	ret
158ec                 | 
158ec                 | ' 
158ec                 | ' sub do_int
158ec                 | _do_int
158ec     00 4A 05 F6 | 	mov	COUNT_, #0
158f0     A8 00 A0 FD | 	call	#pushregs_
158f4     0C F0 07 F1 | 	add	ptra, #12
158f8     FC 41 BF FD | 	call	#_pop
158fc     A7 FA 61 FC | 	wrlong	result1, fp
15900     04 4E 05 F1 | 	add	fp, #4
15904     A7 FC 61 FC | 	wrlong	result2, fp
15908     04 4E 05 F1 | 	add	fp, #4
1590c     A7 FE 61 FC | 	wrlong	result3, fp
15910     08 4E 85 F1 | 	sub	fp, #8
15914     A7 12 02 F6 | 	mov	arg01, fp
15918     2C C5 BF FD | 	call	#_converttoint
1591c     A7 FA 61 FC | 	wrlong	result1, fp
15920     08 4E 05 F1 | 	add	fp, #8
15924     A7 38 68 FC | 	wrlong	#28, fp
15928     08 4E 85 F1 | 	sub	fp, #8
1592c     A7 12 02 F6 | 	mov	arg01, fp
15930     5C 42 BF FD | 	call	#_push
15934     A7 F0 03 F6 | 	mov	ptra, fp
15938     B2 00 A0 FD | 	call	#popregs_
1593c                 | _do_int_ret
1593c     2D 00 64 FD | 	ret
15940                 | 
15940                 | ' 
15940                 | ' sub do_nothing
15940                 | _do_nothing
15940                 | _do_nothing_ret
15940     2D 00 64 FD | 	ret
15944                 | 
15944                 | ' 
15944                 | ' sub do_brun
15944                 | _do_brun
15944     08 4A 05 F6 | 	mov	COUNT_, #8
15948     A8 00 A0 FD | 	call	#pushregs_
1594c     A8 41 BF FD | 	call	#_pop
15950     FE 1A 02 F6 | 	mov	arg05, result2
15954     FF 18 02 F6 | 	mov	arg04, result3
15958     FD 1E 02 F6 | 	mov	local01, result1
1595c     0D 21 02 F6 | 	mov	local02, arg05
15960     0C 23 02 F6 | 	mov	local03, arg04
15964                 | ' 
15964                 | ' t1=pop() 
15964                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
15964     2B 22 0E F2 | 	cmp	local03, #43 wz
15968     10 00 90 5D |  if_ne	jmp	#LR__1670
1596c     0F 13 02 F6 | 	mov	arg01, local01
15970     A0 80 BF FD | 	call	#_convertstring
15974     FD 1E 02 F6 | 	mov	local01, result1
15978     1F 22 06 F6 | 	mov	local03, #31
1597c                 | LR__1670
1597c                 | ' if t1.result_type=result_string then
1597c     1F 22 0E F2 | 	cmp	local03, #31 wz
15980     EC 01 90 5D |  if_ne	jmp	#LR__1674
15984     0F 25 02 F6 | 	mov	local04, local01
15988                 | '   filename=t1.result.sresult
15988                 | '   if left$(filename,1)="/" then 
15988     12 13 02 F6 | 	mov	arg01, local04
1598c     01 14 06 F6 | 	mov	arg02, #1
15990     1C 73 B0 FD | 	call	#__system__Left_S
15994     FD 12 02 F6 | 	mov	arg01, result1
15998     54 01 00 FF 
1599c     55 14 06 F6 | 	mov	arg02, ##@LR__4739
159a0     EC 52 B0 FD | 	call	#__system___string_cmp
159a4     00 FA 0D F2 | 	cmp	result1, #0 wz
159a8     12 27 02 A6 |  if_e	mov	local05, local04
159ac     14 00 90 AD |  if_e	jmp	#LR__1671
159b0     54 01 00 FF 
159b4     57 12 06 F6 | 	mov	arg01, ##@LR__4740
159b8     12 15 02 F6 | 	mov	arg02, local04
159bc     04 53 B0 FD | 	call	#__system___string_concat
159c0     FD 26 02 F6 | 	mov	local05, result1
159c4                 | LR__1671
159c4                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
159c4                 | '   open fullfilename for input as #9
159c4     09 12 06 F6 | 	mov	arg01, #9
159c8     13 15 02 F6 | 	mov	arg02, local05
159cc     00 16 06 F6 | 	mov	arg03, #0
159d0     98 5E B0 FD | 	call	#__system___basic_open_string
159d4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
159d8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
159dc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
159e0     FD 28 0A F6 | 	mov	local06, result1 wz
159e4                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
159e4     8C 00 90 AD |  if_e	jmp	#LR__1672
159e8     00 12 06 F6 | 	mov	arg01, #0
159ec     AC AB B0 FD | 	call	#__system___getiolock_0442
159f0     FD 12 02 F6 | 	mov	arg01, result1
159f4     70 52 B0 FD | 	call	#__system___lockmem
159f8     54 01 00 FF 
159fc     60 14 06 F6 | 	mov	arg02, ##@LR__4741
15a00     00 12 06 F6 | 	mov	arg01, #0
15a04     00 16 06 F6 | 	mov	arg03, #0
15a08     64 5F B0 FD | 	call	#__system___basic_print_string
15a0c     00 12 06 F6 | 	mov	arg01, #0
15a10     14 15 02 F6 | 	mov	arg02, local06
15a14     00 16 06 F6 | 	mov	arg03, #0
15a18     0A 18 06 F6 | 	mov	arg04, #10
15a1c     94 5F B0 FD | 	call	#__system___basic_print_integer
15a20     54 01 00 FF 
15a24     6E 14 06 F6 | 	mov	arg02, ##@LR__4742
15a28     00 12 06 F6 | 	mov	arg01, #0
15a2c     00 16 06 F6 | 	mov	arg03, #0
15a30     3C 5F B0 FD | 	call	#__system___basic_print_string
15a34     14 13 02 F6 | 	mov	arg01, local06
15a38     64 78 B0 FD | 	call	#__system___strerror
15a3c     FD 14 02 F6 | 	mov	arg02, result1
15a40     00 12 06 F6 | 	mov	arg01, #0
15a44     00 16 06 F6 | 	mov	arg03, #0
15a48     24 5F B0 FD | 	call	#__system___basic_print_string
15a4c     00 12 06 F6 | 	mov	arg01, #0
15a50     0A 14 06 F6 | 	mov	arg02, #10
15a54     00 16 06 F6 | 	mov	arg03, #0
15a58     BC 5E B0 FD | 	call	#__system___basic_print_char
15a5c     00 12 06 F6 | 	mov	arg01, #0
15a60     38 AB B0 FD | 	call	#__system___getiolock_0442
15a64     FD 00 68 FC | 	wrlong	#0, result1
15a68     09 12 06 F6 | 	mov	arg01, #9
15a6c     60 A1 B0 FD | 	call	#__system__close
15a70     FC 00 90 FD | 	jmp	#LR__1675
15a74                 | LR__1672
15a74     01 2A 06 F6 | 	mov	local07, #1
15a78     00 2C 06 F6 | 	mov	local08, #0
15a7c                 | '   do
15a7c                 | LR__1673
15a7c                 | '     get #9,pos,block(0),1024,r : pos+=r	
15a7c     77 00 00 FF 
15a80     10 E5 05 F1 | 	add	objptr, ##61200
15a84     F2 16 02 F6 | 	mov	arg03, objptr
15a88     77 00 00 FF 
15a8c     10 E5 85 F1 | 	sub	objptr, ##61200
15a90     09 12 06 F6 | 	mov	arg01, #9
15a94     15 15 02 F6 | 	mov	arg02, local07
15a98     0A 18 C6 F9 | 	decod	arg04, #10
15a9c     01 1A 06 F6 | 	mov	arg05, #1
15aa0     DC 5F B0 FD | 	call	#__system___basic_get
15aa4     FD 28 02 F6 | 	mov	local06, result1
15aa8     FD 2A 02 F1 | 	add	local07, result1
15aac     77 00 00 FF 
15ab0     10 E5 05 F1 | 	add	objptr, ##61200
15ab4     F2 12 02 F6 | 	mov	arg01, objptr
15ab8     16 15 02 F6 | 	mov	arg02, local08
15abc     0A 16 C6 F9 | 	decod	arg03, #10
15ac0     6C 00 00 FF 
15ac4     50 E4 85 F1 | 	sub	objptr, ##55376
15ac8     D0 46 B0 FD | 	call	#_psram_spin2_write
15acc     0B 00 00 FF 
15ad0     C0 E4 85 F1 | 	sub	objptr, ##5824
15ad4     14 2D 02 F1 | 	add	local08, local06
15ad8     02 00 00 FF 
15adc     00 28 0E F2 | 	cmp	local06, ##1024 wz
15ae0     E0 03 00 AF 
15ae4     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
15ae8     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1673
15aec     56 00 00 FF 
15af0     60 E5 05 F1 | 	add	objptr, ##44384
15af4     F2 12 02 FB | 	rdlong	arg01, objptr
15af8     03 12 62 FD | 	cogstop	arg01
15afc     04 E4 05 F1 | 	add	objptr, #4
15b00     F2 12 02 FB | 	rdlong	arg01, objptr
15b04     03 12 62 FD | 	cogstop	arg01
15b08     04 E4 05 F1 | 	add	objptr, #4
15b0c     F2 12 02 FB | 	rdlong	arg01, objptr
15b10     03 12 62 FD | 	cogstop	arg01
15b14     22 00 00 FF 
15b18     E0 E5 05 F1 | 	add	objptr, ##17888
15b1c     F2 12 02 FB | 	rdlong	arg01, objptr
15b20     03 12 62 FD | 	cogstop	arg01
15b24     18 00 00 FF 
15b28     D8 EA 05 F1 | 	add	ptr__dat__, ##12504
15b2c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
15b30     18 00 00 FF 
15b34     D8 EA 85 F1 | 	sub	ptr__dat__, ##12504
15b38     22 00 00 FF 
15b3c     D8 E5 85 F1 | 	sub	objptr, ##17880
15b40     1E 2C 06 F6 | 	mov	local08, #30
15b44     28 E4 61 FD | 	setq	objptr
15b48     0A 2D F2 FC | 	coginit	local08, arg02 wc
15b4c     01 2C 66 C6 |  if_b	neg	local08, #1
15b50     24 00 00 FF 
15b54     0C E5 05 F1 | 	add	objptr, ##18700
15b58     F2 2C 62 FC | 	wrlong	local08, objptr
15b5c     7B 00 00 FF 
15b60     7C E4 85 F1 | 	sub	objptr, ##63100
15b64     00 12 06 F6 | 	mov	arg01, #0
15b68     01 12 62 FD | 	cogid	arg01
15b6c     03 12 62 FD | 	cogstop	arg01
15b70                 | LR__1674
15b70                 | LR__1675
15b70     A7 F0 03 F6 | 	mov	ptra, fp
15b74     B2 00 A0 FD | 	call	#popregs_
15b78                 | _do_brun_ret
15b78     2D 00 64 FD | 	ret
15b7c                 | 
15b7c                 | ' 
15b7c                 | ' 
15b7c                 | ' sub do_mouse
15b7c                 | _do_mouse
15b7c     78 3F BF FD | 	call	#_pop
15b80     00 FA 4D F2 | 	cmps	result1, #0 wz
15b84                 | ' 
15b84                 | ' t1=pop()
15b84                 | ' 
15b84                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
15b84     14 00 90 5D |  if_ne	jmp	#LR__1680
15b88     10 12 06 F6 | 	mov	arg01, #16
15b8c     00 14 06 F6 | 	mov	arg02, #0
15b90     00 16 06 F6 | 	mov	arg03, #0
15b94     BC 30 B0 FD | 	call	#_hg010b_spin2_setspritesize
15b98     10 00 90 FD | 	jmp	#LR__1681
15b9c                 | LR__1680
15b9c     10 12 06 F6 | 	mov	arg01, #16
15ba0     20 14 06 F6 | 	mov	arg02, #32
15ba4     20 16 06 F6 | 	mov	arg03, #32
15ba8     A8 30 B0 FD | 	call	#_hg010b_spin2_setspritesize
15bac                 | LR__1681
15bac                 | _do_mouse_ret
15bac     2D 00 64 FD | 	ret
15bb0                 | 
15bb0                 | ' 
15bb0                 | ' sub do_cursor
15bb0                 | _do_cursor
15bb0     44 3F BF FD | 	call	#_pop
15bb4     00 FA 4D F2 | 	cmps	result1, #0 wz
15bb8                 | ' 
15bb8                 | ' t1=pop()
15bb8                 | ' 
15bb8                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
15bb8     14 00 90 5D |  if_ne	jmp	#LR__1690
15bbc     11 12 06 F6 | 	mov	arg01, #17
15bc0     00 14 06 F6 | 	mov	arg02, #0
15bc4     00 16 06 F6 | 	mov	arg03, #0
15bc8     88 30 B0 FD | 	call	#_hg010b_spin2_setspritesize
15bcc     10 00 90 FD | 	jmp	#LR__1691
15bd0                 | LR__1690
15bd0     11 12 06 F6 | 	mov	arg01, #17
15bd4     08 14 06 F6 | 	mov	arg02, #8
15bd8     10 16 06 F6 | 	mov	arg03, #16
15bdc     74 30 B0 FD | 	call	#_hg010b_spin2_setspritesize
15be0                 | LR__1691
15be0                 | _do_cursor_ret
15be0     2D 00 64 FD | 	ret
15be4                 | 
15be4                 | ' 
15be4                 | ' 
15be4                 | ' sub do_click
15be4                 | _do_click
15be4     10 3F BF FD | 	call	#_pop
15be8     00 FA 4D F2 | 	cmps	result1, #0 wz
15bec                 | ' 
15bec                 | ' t1=pop()
15bec                 | ' 
15bec                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
15bec     79 00 00 AF 
15bf0     44 E5 05 A1 |  if_e	add	objptr, ##62276
15bf4     F2 00 68 AC |  if_e	wrlong	#0, objptr
15bf8     79 00 00 FF 
15bfc     44 E5 C5 F3 | 	sumz	objptr, ##62276
15c00     F2 02 68 5C |  if_ne	wrlong	#1, objptr
15c04     79 00 00 5F 
15c08     44 E5 85 51 |  if_ne	sub	objptr, ##62276
15c0c                 | _do_click_ret
15c0c     2D 00 64 FD | 	ret
15c10                 | 
15c10                 | ' 
15c10                 | ' 
15c10                 | ' sub do_beep
15c10                 | _do_beep
15c10     02 4A 05 F6 | 	mov	COUNT_, #2
15c14     A8 00 A0 FD | 	call	#pushregs_
15c18     20 F0 07 F1 | 	add	ptra, #32
15c1c     D8 3E BF FD | 	call	#_pop
15c20     FD 1E 02 F6 | 	mov	local01, result1
15c24     FE 1C 02 F6 | 	mov	arg06, result2
15c28     FF 20 02 F6 | 	mov	local02, result3
15c2c     0C 4E 05 F1 | 	add	fp, #12
15c30     A7 1E 62 FC | 	wrlong	local01, fp
15c34     04 4E 05 F1 | 	add	fp, #4
15c38     A7 1C 62 FC | 	wrlong	arg06, fp
15c3c     04 4E 05 F1 | 	add	fp, #4
15c40     A7 20 62 FC | 	wrlong	local02, fp
15c44     14 4E 85 F1 | 	sub	fp, #20
15c48     AC 3E BF FD | 	call	#_pop
15c4c     A7 FA 61 FC | 	wrlong	result1, fp
15c50     04 4E 05 F1 | 	add	fp, #4
15c54     A7 FC 61 FC | 	wrlong	result2, fp
15c58     04 4E 05 F1 | 	add	fp, #4
15c5c     A7 FE 61 FC | 	wrlong	result3, fp
15c60                 | ' 
15c60                 | ' 
15c60                 | ' 
15c60                 | ' t2=pop()
15c60                 | ' t1=pop()
15c60                 | ' 
15c60                 | ' 
15c60                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
15c60     08 4E 85 F1 | 	sub	fp, #8
15c64     1C FE 0D F2 | 	cmp	result3, #28 wz
15c68     08 4E 05 51 |  if_ne	add	fp, #8
15c6c     A7 20 02 5B |  if_ne	rdlong	local02, fp
15c70     08 4E 85 51 |  if_ne	sub	fp, #8
15c74     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
15c78     A7 1E 02 AB |  if_e	rdlong	local01, fp
15c7c     18 4E 05 A1 |  if_e	add	fp, #24
15c80     A7 1E 62 AC |  if_e	wrlong	local01, fp
15c84     18 4E 85 A1 |  if_e	sub	fp, #24
15c88     14 00 90 AD |  if_e	jmp	#LR__1700
15c8c     A7 12 02 F6 | 	mov	arg01, fp
15c90     B4 C1 BF FD | 	call	#_converttoint
15c94     18 4E 05 F1 | 	add	fp, #24
15c98     A7 FA 61 FC | 	wrlong	result1, fp
15c9c     18 4E 85 F1 | 	sub	fp, #24
15ca0                 | LR__1700
15ca0     1C 4E 05 F1 | 	add	fp, #28
15ca4     A7 FE 48 FC | 	wrbyte	#127, fp
15ca8     01 4E 05 F1 | 	add	fp, #1
15cac     A7 00 49 FC | 	wrbyte	#128, fp
15cb0     01 4E 85 F1 | 	sub	fp, #1
15cb4     A7 14 02 F6 | 	mov	arg02, fp
15cb8     04 4E 85 F1 | 	sub	fp, #4
15cbc     A7 16 02 FB | 	rdlong	arg03, fp
15cc0     18 4E 85 F1 | 	sub	fp, #24
15cc4     01 16 66 F0 | 	shl	arg03, #1
15cc8     07 12 06 F6 | 	mov	arg01, #7
15ccc     0E 18 C6 F9 | 	decod	arg04, #14
15cd0     02 1A 06 F6 | 	mov	arg05, #2
15cd4     00 1C 06 F6 | 	mov	arg06, #0
15cd8     0B 00 00 FF 
15cdc     C0 E4 05 F1 | 	add	objptr, ##5824
15ce0     D0 4B B0 FD | 	call	#_audio096_spin2_play8
15ce4     0B 00 00 FF 
15ce8     C0 E4 85 F1 | 	sub	objptr, ##5824
15cec     0C 4E 05 F1 | 	add	fp, #12
15cf0     A7 12 02 F6 | 	mov	arg01, fp
15cf4     0C 4E 85 F1 | 	sub	fp, #12
15cf8     94 3E BF FD | 	call	#_push
15cfc     58 F6 BF FD | 	call	#_do_waitms
15d00     07 12 06 F6 | 	mov	arg01, #7
15d04     0B 00 00 FF 
15d08     C0 E4 05 F1 | 	add	objptr, ##5824
15d0c     58 4C B0 FD | 	call	#_audio096_spin2_stop
15d10     0B 00 00 FF 
15d14     C0 E4 85 F1 | 	sub	objptr, ##5824
15d18     A7 F0 03 F6 | 	mov	ptra, fp
15d1c     B2 00 A0 FD | 	call	#popregs_
15d20                 | _do_beep_ret
15d20     2D 00 64 FD | 	ret
15d24                 | 
15d24                 | ' 
15d24                 | ' sub do_no_command
15d24                 | _do_no_command
15d24     17 12 06 F6 | 	mov	arg01, #23
15d28     2C 19 B0 FD | 	call	#_printerror
15d2c                 | _do_no_command_ret
15d2c     2D 00 64 FD | 	ret
15d30                 | 
15d30                 | ' 
15d30                 | ' sub do_negative
15d30                 | _do_negative
15d30     02 4A 05 F6 | 	mov	COUNT_, #2
15d34     A8 00 A0 FD | 	call	#pushregs_
15d38     0C F0 07 F1 | 	add	ptra, #12
15d3c     B8 3D BF FD | 	call	#_pop
15d40     FF 1E 02 F6 | 	mov	local01, result3
15d44     A7 FA 61 FC | 	wrlong	result1, fp
15d48     04 4E 05 F1 | 	add	fp, #4
15d4c     A7 FC 61 FC | 	wrlong	result2, fp
15d50     04 4E 05 F1 | 	add	fp, #4
15d54     A7 1E 62 FC | 	wrlong	local01, fp
15d58                 | ' t1=pop()
15d58                 | ' if t1.result_type=result_int then 
15d58     08 4E 85 F1 | 	sub	fp, #8
15d5c     1C 1E 0E F2 | 	cmp	local01, #28 wz
15d60     A7 20 02 AB |  if_e	rdlong	local02, fp
15d64     10 1F 62 A6 |  if_e	neg	local01, local02
15d68     A7 1E 62 AC |  if_e	wrlong	local01, fp
15d6c     5C 00 90 AD |  if_e	jmp	#LR__1712
15d70     08 4E 05 F1 | 	add	fp, #8
15d74     A7 1E 02 FB | 	rdlong	local01, fp
15d78     08 4E 85 F1 | 	sub	fp, #8
15d7c     1D 1E 0E F2 | 	cmp	local01, #29 wz
15d80     1C 00 90 5D |  if_ne	jmp	#LR__1710
15d84     A7 20 02 FB | 	rdlong	local02, fp
15d88     10 1F 62 F6 | 	neg	local01, local02
15d8c     A7 1E 62 FC | 	wrlong	local01, fp
15d90     08 4E 05 F1 | 	add	fp, #8
15d94     A7 38 68 FC | 	wrlong	#28, fp
15d98     08 4E 85 F1 | 	sub	fp, #8
15d9c     2C 00 90 FD | 	jmp	#LR__1711
15da0                 | LR__1710
15da0     08 4E 05 F1 | 	add	fp, #8
15da4     A7 1E 02 FB | 	rdlong	local01, fp
15da8     08 4E 85 F1 | 	sub	fp, #8
15dac     1E 1E 0E F2 | 	cmp	local01, #30 wz
15db0     A7 FA 01 AB |  if_e	rdlong	result1, fp
15db4     1F FA E5 A4 |  if_e	bitnot	result1, #31
15db8     A7 FA 61 AC |  if_e	wrlong	result1, fp
15dbc     08 4E 05 51 |  if_ne	add	fp, #8
15dc0     A7 FE 69 5C |  if_ne	wrlong	#255, fp
15dc4     08 4E 85 51 |  if_ne	sub	fp, #8
15dc8     A7 50 68 5C |  if_ne	wrlong	#40, fp
15dcc                 | LR__1711
15dcc                 | LR__1712
15dcc     A7 12 02 F6 | 	mov	arg01, fp
15dd0     BC 3D BF FD | 	call	#_push
15dd4     A7 F0 03 F6 | 	mov	ptra, fp
15dd8     B2 00 A0 FD | 	call	#popregs_
15ddc                 | _do_negative_ret
15ddc     2D 00 64 FD | 	ret
15de0                 | 
15de0                 | ' 
15de0                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
15de0                 | ' 
15de0                 | ' ''----------------------------------------------------------------------------------------------------
15de0                 | ' ''------------------ Initialization procedures -------------------------------------------------------
15de0                 | ' ''----------------------------------------------------------------------------------------------------
15de0                 | ' 
15de0                 | ' ''--------------------------- Command function pointers
15de0                 | ' 
15de0                 | ' sub init_commands
15de0                 | _init_commands
15de0                 | ' 
15de0                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
15de0     00 00 06 F6 | 	mov	_var01, #0
15de4     97 16 48 FB | 	callpa	#(@LR__1721-@LR__1720)>>2,fcache_load_ptr_
15de8                 | LR__1720
15de8     00 FB 01 F6 | 	mov	result1, _var01
15dec     02 FA 65 F0 | 	shl	result1, #2
15df0     62 00 00 FF 
15df4     C4 E5 05 F1 | 	add	objptr, ##50628
15df8     F2 FA 01 F1 | 	add	result1, objptr
15dfc     62 00 00 FF 
15e00     C4 E5 85 F1 | 	sub	objptr, ##50628
15e04     FD E4 61 FC | 	wrlong	objptr, result1
15e08     01 00 06 F1 | 	add	_var01, #1
15e0c     00 01 56 F2 | 	cmps	_var01, #256 wc
15e10     D4 FF 9F CD |  if_b	jmp	#LR__1720
15e14                 | LR__1721
15e14     F2 FA 01 F6 | 	mov	result1, objptr
15e18     14 FA 25 F4 | 	bith	result1, #20
15e1c     62 00 00 FF 
15e20     C8 E5 05 F1 | 	add	objptr, ##50632
15e24     F2 FA 61 FC | 	wrlong	result1, objptr
15e28     62 00 00 FF 
15e2c     C8 E5 85 F1 | 	sub	objptr, ##50632
15e30     F2 FA 01 F6 | 	mov	result1, objptr
15e34     15 FA 25 F4 | 	bith	result1, #21
15e38     62 00 00 FF 
15e3c     CC E5 05 F1 | 	add	objptr, ##50636
15e40     F2 FA 61 FC | 	wrlong	result1, objptr
15e44     62 00 00 FF 
15e48     CC E5 85 F1 | 	sub	objptr, ##50636
15e4c     F2 FA 01 F6 | 	mov	result1, objptr
15e50     34 FA 25 F4 | 	bith	result1, #52
15e54     62 00 00 FF 
15e58     D0 E5 05 F1 | 	add	objptr, ##50640
15e5c     F2 FA 61 FC | 	wrlong	result1, objptr
15e60     62 00 00 FF 
15e64     D0 E5 85 F1 | 	sub	objptr, ##50640
15e68     F2 FA 01 F6 | 	mov	result1, objptr
15e6c     16 FA 25 F4 | 	bith	result1, #22
15e70     62 00 00 FF 
15e74     D8 E5 05 F1 | 	add	objptr, ##50648
15e78     F2 FA 61 FC | 	wrlong	result1, objptr
15e7c     62 00 00 FF 
15e80     D8 E5 85 F1 | 	sub	objptr, ##50648
15e84     F2 FA 01 F6 | 	mov	result1, objptr
15e88     00 28 00 FF 
15e8c     00 FA 45 F5 | 	or	result1, ##5242880
15e90     62 00 00 FF 
15e94     DC E5 05 F1 | 	add	objptr, ##50652
15e98     F2 FA 61 FC | 	wrlong	result1, objptr
15e9c     62 00 00 FF 
15ea0     DC E5 85 F1 | 	sub	objptr, ##50652
15ea4     F2 FA 01 F6 | 	mov	result1, objptr
15ea8     35 FA 25 F4 | 	bith	result1, #53
15eac     62 00 00 FF 
15eb0     E0 E5 05 F1 | 	add	objptr, ##50656
15eb4     F2 FA 61 FC | 	wrlong	result1, objptr
15eb8     62 00 00 FF 
15ebc     E0 E5 85 F1 | 	sub	objptr, ##50656
15ec0     F2 FA 01 F6 | 	mov	result1, objptr
15ec4     54 FA 25 F4 | 	bith	result1, #84
15ec8     62 00 00 FF 
15ecc     E4 E5 05 F1 | 	add	objptr, ##50660
15ed0     F2 FA 61 FC | 	wrlong	result1, objptr
15ed4     62 00 00 FF 
15ed8     E4 E5 85 F1 | 	sub	objptr, ##50660
15edc     F2 FA 01 F6 | 	mov	result1, objptr
15ee0     17 FA 25 F4 | 	bith	result1, #23
15ee4     62 00 00 FF 
15ee8     E8 E5 05 F1 | 	add	objptr, ##50664
15eec     F2 FA 61 FC | 	wrlong	result1, objptr
15ef0     62 00 00 FF 
15ef4     E8 E5 85 F1 | 	sub	objptr, ##50664
15ef8     F2 FA 01 F6 | 	mov	result1, objptr
15efc     00 48 00 FF 
15f00     00 FA 45 F5 | 	or	result1, ##9437184
15f04     62 00 00 FF 
15f08     EC E5 05 F1 | 	add	objptr, ##50668
15f0c     F2 FA 61 FC | 	wrlong	result1, objptr
15f10     62 00 00 FF 
15f14     EC E5 85 F1 | 	sub	objptr, ##50668
15f18     F2 FA 01 F6 | 	mov	result1, objptr
15f1c     00 50 00 FF 
15f20     00 FA 45 F5 | 	or	result1, ##10485760
15f24     62 00 00 FF 
15f28     F0 E5 05 F1 | 	add	objptr, ##50672
15f2c     F2 FA 61 FC | 	wrlong	result1, objptr
15f30     62 00 00 FF 
15f34     F0 E5 85 F1 | 	sub	objptr, ##50672
15f38     F2 FA 01 F6 | 	mov	result1, objptr
15f3c     00 58 00 FF 
15f40     00 FA 45 F5 | 	or	result1, ##11534336
15f44     62 00 00 FF 
15f48     F4 E5 05 F1 | 	add	objptr, ##50676
15f4c     F2 FA 61 FC | 	wrlong	result1, objptr
15f50     62 00 00 FF 
15f54     F4 E5 85 F1 | 	sub	objptr, ##50676
15f58     F2 FA 01 F6 | 	mov	result1, objptr
15f5c     36 FA 25 F4 | 	bith	result1, #54
15f60     63 00 00 FF 
15f64     08 E4 05 F1 | 	add	objptr, ##50696
15f68     F2 FA 61 FC | 	wrlong	result1, objptr
15f6c     63 00 00 FF 
15f70     08 E4 85 F1 | 	sub	objptr, ##50696
15f74     F2 FA 01 F6 | 	mov	result1, objptr
15f78     00 68 00 FF 
15f7c     00 FA 45 F5 | 	or	result1, ##13631488
15f80     63 00 00 FF 
15f84     38 E4 05 F1 | 	add	objptr, ##50744
15f88     F2 FA 61 FC | 	wrlong	result1, objptr
15f8c     63 00 00 FF 
15f90     38 E4 85 F1 | 	sub	objptr, ##50744
15f94     F2 FA 01 F6 | 	mov	result1, objptr
15f98     00 68 00 FF 
15f9c     00 FA 45 F5 | 	or	result1, ##13631488
15fa0     63 00 00 FF 
15fa4     34 E4 05 F1 | 	add	objptr, ##50740
15fa8     F2 FA 61 FC | 	wrlong	result1, objptr
15fac     63 00 00 FF 
15fb0     34 E4 85 F1 | 	sub	objptr, ##50740
15fb4     F2 FA 01 F6 | 	mov	result1, objptr
15fb8     00 68 00 FF 
15fbc     00 FA 45 F5 | 	or	result1, ##13631488
15fc0     63 00 00 FF 
15fc4     3C E4 05 F1 | 	add	objptr, ##50748
15fc8     F2 FA 61 FC | 	wrlong	result1, objptr
15fcc     63 00 00 FF 
15fd0     3C E4 85 F1 | 	sub	objptr, ##50748
15fd4     F2 FA 01 F6 | 	mov	result1, objptr
15fd8     00 68 00 FF 
15fdc     00 FA 45 F5 | 	or	result1, ##13631488
15fe0     63 00 00 FF 
15fe4     40 E4 05 F1 | 	add	objptr, ##50752
15fe8     F2 FA 61 FC | 	wrlong	result1, objptr
15fec     63 00 00 FF 
15ff0     40 E4 85 F1 | 	sub	objptr, ##50752
15ff4     F2 FA 01 F6 | 	mov	result1, objptr
15ff8     00 68 00 FF 
15ffc     00 FA 45 F5 | 	or	result1, ##13631488
16000     63 00 00 FF 
16004     70 E4 05 F1 | 	add	objptr, ##50800
16008     F2 FA 61 FC | 	wrlong	result1, objptr
1600c     63 00 00 FF 
16010     70 E4 85 F1 | 	sub	objptr, ##50800
16014     F2 FA 01 F6 | 	mov	result1, objptr
16018     55 FA 25 F4 | 	bith	result1, #85
1601c     63 00 00 FF 
16020     20 E4 05 F1 | 	add	objptr, ##50720
16024     F2 FA 61 FC | 	wrlong	result1, objptr
16028     63 00 00 FF 
1602c     20 E4 85 F1 | 	sub	objptr, ##50720
16030     F2 FA 01 F6 | 	mov	result1, objptr
16034     00 68 00 FF 
16038     00 FA 45 F5 | 	or	result1, ##13631488
1603c     63 00 00 FF 
16040     44 E4 05 F1 | 	add	objptr, ##50756
16044     F2 FA 61 FC | 	wrlong	result1, objptr
16048     63 00 00 FF 
1604c     44 E4 85 F1 | 	sub	objptr, ##50756
16050     F2 FA 01 F6 | 	mov	result1, objptr
16054     00 68 00 FF 
16058     00 FA 45 F5 | 	or	result1, ##13631488
1605c     63 00 00 FF 
16060     48 E4 05 F1 | 	add	objptr, ##50760
16064     F2 FA 61 FC | 	wrlong	result1, objptr
16068     63 00 00 FF 
1606c     48 E4 85 F1 | 	sub	objptr, ##50760
16070     F2 FA 01 F6 | 	mov	result1, objptr
16074     00 68 00 FF 
16078     00 FA 45 F5 | 	or	result1, ##13631488
1607c     63 00 00 FF 
16080     4C E4 05 F1 | 	add	objptr, ##50764
16084     F2 FA 61 FC | 	wrlong	result1, objptr
16088     63 00 00 FF 
1608c     4C E4 85 F1 | 	sub	objptr, ##50764
16090     F2 FA 01 F6 | 	mov	result1, objptr
16094     74 FA 25 F4 | 	bith	result1, #116
16098     63 00 00 FF 
1609c     C4 E4 05 F1 | 	add	objptr, ##50884
160a0     F2 FA 61 FC | 	wrlong	result1, objptr
160a4     63 00 00 FF 
160a8     C4 E4 85 F1 | 	sub	objptr, ##50884
160ac     F2 FA 01 F6 | 	mov	result1, objptr
160b0     18 FA 25 F4 | 	bith	result1, #24
160b4     63 00 00 FF 
160b8     C8 E4 05 F1 | 	add	objptr, ##50888
160bc     F2 FA 61 FC | 	wrlong	result1, objptr
160c0     63 00 00 FF 
160c4     C8 E4 85 F1 | 	sub	objptr, ##50888
160c8     F2 FA 01 F6 | 	mov	result1, objptr
160cc     00 88 00 FF 
160d0     00 FA 45 F5 | 	or	result1, ##17825792
160d4     63 00 00 FF 
160d8     CC E4 05 F1 | 	add	objptr, ##50892
160dc     F2 FA 61 FC | 	wrlong	result1, objptr
160e0     63 00 00 FF 
160e4     CC E4 85 F1 | 	sub	objptr, ##50892
160e8     F2 FA 01 F6 | 	mov	result1, objptr
160ec     00 90 00 FF 
160f0     00 FA 45 F5 | 	or	result1, ##18874368
160f4     63 00 00 FF 
160f8     D0 E4 05 F1 | 	add	objptr, ##50896
160fc     F2 FA 61 FC | 	wrlong	result1, objptr
16100     63 00 00 FF 
16104     D0 E4 85 F1 | 	sub	objptr, ##50896
16108     F2 FA 01 F6 | 	mov	result1, objptr
1610c     00 98 00 FF 
16110     00 FA 45 F5 | 	or	result1, ##19922944
16114     63 00 00 FF 
16118     D4 E4 05 F1 | 	add	objptr, ##50900
1611c     F2 FA 61 FC | 	wrlong	result1, objptr
16120     63 00 00 FF 
16124     D4 E4 85 F1 | 	sub	objptr, ##50900
16128     F2 FA 01 F6 | 	mov	result1, objptr
1612c     00 A0 00 FF 
16130     00 FA 45 F5 | 	or	result1, ##20971520
16134     63 00 00 FF 
16138     D8 E4 05 F1 | 	add	objptr, ##50904
1613c     F2 FA 61 FC | 	wrlong	result1, objptr
16140     63 00 00 FF 
16144     D8 E4 85 F1 | 	sub	objptr, ##50904
16148     F2 FA 01 F6 | 	mov	result1, objptr
1614c     00 A8 00 FF 
16150     00 FA 45 F5 | 	or	result1, ##22020096
16154     63 00 00 FF 
16158     DC E4 05 F1 | 	add	objptr, ##50908
1615c     F2 FA 61 FC | 	wrlong	result1, objptr
16160     63 00 00 FF 
16164     DC E4 85 F1 | 	sub	objptr, ##50908
16168     F2 FA 01 F6 | 	mov	result1, objptr
1616c     00 B0 00 FF 
16170     00 FA 45 F5 | 	or	result1, ##23068672
16174     63 00 00 FF 
16178     E0 E4 05 F1 | 	add	objptr, ##50912
1617c     F2 FA 61 FC | 	wrlong	result1, objptr
16180     63 00 00 FF 
16184     E0 E4 85 F1 | 	sub	objptr, ##50912
16188     F2 FA 01 F6 | 	mov	result1, objptr
1618c     00 B8 00 FF 
16190     00 FA 45 F5 | 	or	result1, ##24117248
16194     63 00 00 FF 
16198     E4 E4 05 F1 | 	add	objptr, ##50916
1619c     F2 FA 61 FC | 	wrlong	result1, objptr
161a0     63 00 00 FF 
161a4     E4 E4 85 F1 | 	sub	objptr, ##50916
161a8     F2 FA 01 F6 | 	mov	result1, objptr
161ac     37 FA 25 F4 | 	bith	result1, #55
161b0     63 00 00 FF 
161b4     E8 E4 05 F1 | 	add	objptr, ##50920
161b8     F2 FA 61 FC | 	wrlong	result1, objptr
161bc     63 00 00 FF 
161c0     E8 E4 85 F1 | 	sub	objptr, ##50920
161c4     F2 FA 01 F6 | 	mov	result1, objptr
161c8     00 C8 00 FF 
161cc     00 FA 45 F5 | 	or	result1, ##26214400
161d0     63 00 00 FF 
161d4     EC E4 05 F1 | 	add	objptr, ##50924
161d8     F2 FA 61 FC | 	wrlong	result1, objptr
161dc     63 00 00 FF 
161e0     EC E4 85 F1 | 	sub	objptr, ##50924
161e4     F2 FA 01 F6 | 	mov	result1, objptr
161e8     00 D0 00 FF 
161ec     00 FA 45 F5 | 	or	result1, ##27262976
161f0     63 00 00 FF 
161f4     F0 E4 05 F1 | 	add	objptr, ##50928
161f8     F2 FA 61 FC | 	wrlong	result1, objptr
161fc     63 00 00 FF 
16200     F0 E4 85 F1 | 	sub	objptr, ##50928
16204     F2 FA 01 F6 | 	mov	result1, objptr
16208     00 D8 00 FF 
1620c     00 FA 45 F5 | 	or	result1, ##28311552
16210     63 00 00 FF 
16214     F4 E4 05 F1 | 	add	objptr, ##50932
16218     F2 FA 61 FC | 	wrlong	result1, objptr
1621c     63 00 00 FF 
16220     F4 E4 85 F1 | 	sub	objptr, ##50932
16224     F2 FA 01 F6 | 	mov	result1, objptr
16228     56 FA 25 F4 | 	bith	result1, #86
1622c     63 00 00 FF 
16230     F8 E4 05 F1 | 	add	objptr, ##50936
16234     F2 FA 61 FC | 	wrlong	result1, objptr
16238     63 00 00 FF 
1623c     F8 E4 85 F1 | 	sub	objptr, ##50936
16240     F2 FA 01 F6 | 	mov	result1, objptr
16244     00 E8 00 FF 
16248     00 FA 45 F5 | 	or	result1, ##30408704
1624c     64 00 00 FF 
16250     C0 E5 05 F1 | 	add	objptr, ##51648
16254     F2 FA 61 FC | 	wrlong	result1, objptr
16258     64 00 00 FF 
1625c     C0 E5 85 F1 | 	sub	objptr, ##51648
16260     F2 FA 01 F6 | 	mov	result1, objptr
16264     75 FA 25 F4 | 	bith	result1, #117
16268     63 00 00 FF 
1626c     FC E4 05 F1 | 	add	objptr, ##50940
16270     F2 FA 61 FC | 	wrlong	result1, objptr
16274     63 00 00 FF 
16278     FC E4 85 F1 | 	sub	objptr, ##50940
1627c     F2 FA 01 F6 | 	mov	result1, objptr
16280     94 FA 25 F4 | 	bith	result1, #148
16284     63 00 00 FF 
16288     10 E5 05 F1 | 	add	objptr, ##50960
1628c     F2 FA 61 FC | 	wrlong	result1, objptr
16290     63 00 00 FF 
16294     10 E5 85 F1 | 	sub	objptr, ##50960
16298     F2 FA 01 F6 | 	mov	result1, objptr
1629c     19 FA 25 F4 | 	bith	result1, #25
162a0     63 00 00 FF 
162a4     00 E5 05 F1 | 	add	objptr, ##50944
162a8     F2 FA 61 FC | 	wrlong	result1, objptr
162ac     63 00 00 FF 
162b0     00 E5 85 F1 | 	sub	objptr, ##50944
162b4     F2 FA 01 F6 | 	mov	result1, objptr
162b8     00 08 01 FF 
162bc     00 FA 45 F5 | 	or	result1, ##34603008
162c0     63 00 00 FF 
162c4     1C E4 05 F1 | 	add	objptr, ##50716
162c8     F2 FA 61 FC | 	wrlong	result1, objptr
162cc     63 00 00 FF 
162d0     1C E4 85 F1 | 	sub	objptr, ##50716
162d4     F2 FA 01 F6 | 	mov	result1, objptr
162d8     00 10 01 FF 
162dc     00 FA 45 F5 | 	or	result1, ##35651584
162e0     63 00 00 FF 
162e4     04 E5 05 F1 | 	add	objptr, ##50948
162e8     F2 FA 61 FC | 	wrlong	result1, objptr
162ec     63 00 00 FF 
162f0     04 E5 85 F1 | 	sub	objptr, ##50948
162f4     F2 FA 01 F6 | 	mov	result1, objptr
162f8     00 18 01 FF 
162fc     00 FA 45 F5 | 	or	result1, ##36700160
16300     63 00 00 FF 
16304     08 E5 05 F1 | 	add	objptr, ##50952
16308     F2 FA 61 FC | 	wrlong	result1, objptr
1630c     63 00 00 FF 
16310     08 E5 85 F1 | 	sub	objptr, ##50952
16314     F2 FA 01 F6 | 	mov	result1, objptr
16318     00 20 01 FF 
1631c     00 FA 45 F5 | 	or	result1, ##37748736
16320     63 00 00 FF 
16324     0C E5 05 F1 | 	add	objptr, ##50956
16328     F2 FA 61 FC | 	wrlong	result1, objptr
1632c     63 00 00 FF 
16330     0C E5 85 F1 | 	sub	objptr, ##50956
16334     F2 FA 01 F6 | 	mov	result1, objptr
16338     00 28 01 FF 
1633c     00 FA 45 F5 | 	or	result1, ##38797312
16340     63 00 00 FF 
16344     18 E5 05 F1 | 	add	objptr, ##50968
16348     F2 FA 61 FC | 	wrlong	result1, objptr
1634c     63 00 00 FF 
16350     18 E5 85 F1 | 	sub	objptr, ##50968
16354     F2 FA 01 F6 | 	mov	result1, objptr
16358     00 30 01 FF 
1635c     00 FA 45 F5 | 	or	result1, ##39845888
16360     63 00 00 FF 
16364     1C E5 05 F1 | 	add	objptr, ##50972
16368     F2 FA 61 FC | 	wrlong	result1, objptr
1636c     63 00 00 FF 
16370     1C E5 85 F1 | 	sub	objptr, ##50972
16374     F2 FA 01 F6 | 	mov	result1, objptr
16378     00 38 01 FF 
1637c     00 FA 45 F5 | 	or	result1, ##40894464
16380     63 00 00 FF 
16384     20 E5 05 F1 | 	add	objptr, ##50976
16388     F2 FA 61 FC | 	wrlong	result1, objptr
1638c     63 00 00 FF 
16390     20 E5 85 F1 | 	sub	objptr, ##50976
16394     F2 FA 01 F6 | 	mov	result1, objptr
16398     00 40 01 FF 
1639c     00 FA 45 F5 | 	or	result1, ##41943040
163a0     63 00 00 FF 
163a4     24 E5 05 F1 | 	add	objptr, ##50980
163a8     F2 FA 61 FC | 	wrlong	result1, objptr
163ac     63 00 00 FF 
163b0     24 E5 85 F1 | 	sub	objptr, ##50980
163b4     F2 FA 01 F6 | 	mov	result1, objptr
163b8     00 48 01 FF 
163bc     00 FA 45 F5 | 	or	result1, ##42991616
163c0     63 00 00 FF 
163c4     2C E5 05 F1 | 	add	objptr, ##50988
163c8     F2 FA 61 FC | 	wrlong	result1, objptr
163cc     63 00 00 FF 
163d0     2C E5 85 F1 | 	sub	objptr, ##50988
163d4     F2 FA 01 F6 | 	mov	result1, objptr
163d8     00 50 01 FF 
163dc     00 FA 45 F5 | 	or	result1, ##44040192
163e0     63 00 00 FF 
163e4     30 E5 05 F1 | 	add	objptr, ##50992
163e8     F2 FA 61 FC | 	wrlong	result1, objptr
163ec     63 00 00 FF 
163f0     30 E5 85 F1 | 	sub	objptr, ##50992
163f4     F2 FA 01 F6 | 	mov	result1, objptr
163f8     00 58 01 FF 
163fc     00 FA 45 F5 | 	or	result1, ##45088768
16400     63 00 00 FF 
16404     30 E4 05 F1 | 	add	objptr, ##50736
16408     F2 FA 61 FC | 	wrlong	result1, objptr
1640c     63 00 00 FF 
16410     30 E4 85 F1 | 	sub	objptr, ##50736
16414     F2 FA 01 F6 | 	mov	result1, objptr
16418     00 60 01 FF 
1641c     00 FA 45 F5 | 	or	result1, ##46137344
16420     63 00 00 FF 
16424     60 E4 05 F1 | 	add	objptr, ##50784
16428     F2 FA 61 FC | 	wrlong	result1, objptr
1642c     63 00 00 FF 
16430     60 E4 85 F1 | 	sub	objptr, ##50784
16434     F2 FA 01 F6 | 	mov	result1, objptr
16438     00 68 01 FF 
1643c     00 FA 45 F5 | 	or	result1, ##47185920
16440     63 00 00 FF 
16444     5C E4 05 F1 | 	add	objptr, ##50780
16448     F2 FA 61 FC | 	wrlong	result1, objptr
1644c     63 00 00 FF 
16450     5C E4 85 F1 | 	sub	objptr, ##50780
16454     F2 FA 01 F6 | 	mov	result1, objptr
16458     00 70 01 FF 
1645c     00 FA 45 F5 | 	or	result1, ##48234496
16460     63 00 00 FF 
16464     00 E4 05 F1 | 	add	objptr, ##50688
16468     F2 FA 61 FC | 	wrlong	result1, objptr
1646c     63 00 00 FF 
16470     00 E4 85 F1 | 	sub	objptr, ##50688
16474     F2 FA 01 F6 | 	mov	result1, objptr
16478     00 78 01 FF 
1647c     00 FA 45 F5 | 	or	result1, ##49283072
16480     63 00 00 FF 
16484     04 E4 05 F1 | 	add	objptr, ##50692
16488     F2 FA 61 FC | 	wrlong	result1, objptr
1648c     63 00 00 FF 
16490     04 E4 85 F1 | 	sub	objptr, ##50692
16494     F2 FA 01 F6 | 	mov	result1, objptr
16498     38 FA 25 F4 | 	bith	result1, #56
1649c     63 00 00 FF 
164a0     6C E4 05 F1 | 	add	objptr, ##50796
164a4     F2 FA 61 FC | 	wrlong	result1, objptr
164a8     63 00 00 FF 
164ac     6C E4 85 F1 | 	sub	objptr, ##50796
164b0     F2 FA 01 F6 | 	mov	result1, objptr
164b4     00 88 01 FF 
164b8     00 FA 45 F5 | 	or	result1, ##51380224
164bc     63 00 00 FF 
164c0     14 E5 05 F1 | 	add	objptr, ##50964
164c4     F2 FA 61 FC | 	wrlong	result1, objptr
164c8     63 00 00 FF 
164cc     14 E5 85 F1 | 	sub	objptr, ##50964
164d0     F2 FA 01 F6 | 	mov	result1, objptr
164d4     00 90 01 FF 
164d8     00 FA 45 F5 | 	or	result1, ##52428800
164dc     63 00 00 FF 
164e0     28 E5 05 F1 | 	add	objptr, ##50984
164e4     F2 FA 61 FC | 	wrlong	result1, objptr
164e8     63 00 00 FF 
164ec     28 E5 85 F1 | 	sub	objptr, ##50984
164f0     F2 FA 01 F6 | 	mov	result1, objptr
164f4     00 98 01 FF 
164f8     00 FA 45 F5 | 	or	result1, ##53477376
164fc     63 00 00 FF 
16500     34 E5 05 F1 | 	add	objptr, ##50996
16504     F2 FA 61 FC | 	wrlong	result1, objptr
16508     63 00 00 FF 
1650c     34 E5 85 F1 | 	sub	objptr, ##50996
16510     F2 FA 01 F6 | 	mov	result1, objptr
16514     00 A0 01 FF 
16518     00 FA 45 F5 | 	or	result1, ##54525952
1651c     63 00 00 FF 
16520     38 E5 05 F1 | 	add	objptr, ##51000
16524     F2 FA 61 FC | 	wrlong	result1, objptr
16528     63 00 00 FF 
1652c     38 E5 85 F1 | 	sub	objptr, ##51000
16530     F2 FA 01 F6 | 	mov	result1, objptr
16534     00 A8 01 FF 
16538     00 FA 45 F5 | 	or	result1, ##55574528
1653c     63 00 00 FF 
16540     3C E5 05 F1 | 	add	objptr, ##51004
16544     F2 FA 61 FC | 	wrlong	result1, objptr
16548     63 00 00 FF 
1654c     3C E5 85 F1 | 	sub	objptr, ##51004
16550     F2 FA 01 F6 | 	mov	result1, objptr
16554     00 B0 01 FF 
16558     00 FA 45 F5 | 	or	result1, ##56623104
1655c     63 00 00 FF 
16560     40 E5 05 F1 | 	add	objptr, ##51008
16564     F2 FA 61 FC | 	wrlong	result1, objptr
16568     63 00 00 FF 
1656c     40 E5 85 F1 | 	sub	objptr, ##51008
16570     F2 FA 01 F6 | 	mov	result1, objptr
16574     00 B8 01 FF 
16578     00 FA 45 F5 | 	or	result1, ##57671680
1657c     63 00 00 FF 
16580     44 E5 05 F1 | 	add	objptr, ##51012
16584     F2 FA 61 FC | 	wrlong	result1, objptr
16588     63 00 00 FF 
1658c     44 E5 85 F1 | 	sub	objptr, ##51012
16590     F2 FA 01 F6 | 	mov	result1, objptr
16594     57 FA 25 F4 | 	bith	result1, #87
16598     63 00 00 FF 
1659c     48 E5 05 F1 | 	add	objptr, ##51016
165a0     F2 FA 61 FC | 	wrlong	result1, objptr
165a4     63 00 00 FF 
165a8     48 E5 85 F1 | 	sub	objptr, ##51016
165ac     F2 FA 01 F6 | 	mov	result1, objptr
165b0     94 FA 25 F4 | 	bith	result1, #148
165b4     63 00 00 FF 
165b8     10 E5 05 F1 | 	add	objptr, ##50960
165bc     F2 FA 61 FC | 	wrlong	result1, objptr
165c0     63 00 00 FF 
165c4     10 E5 85 F1 | 	sub	objptr, ##50960
165c8     F2 FA 01 F6 | 	mov	result1, objptr
165cc     00 C8 01 FF 
165d0     00 FA 45 F5 | 	or	result1, ##59768832
165d4     63 00 00 FF 
165d8     50 E5 05 F1 | 	add	objptr, ##51024
165dc     F2 FA 61 FC | 	wrlong	result1, objptr
165e0     63 00 00 FF 
165e4     50 E5 85 F1 | 	sub	objptr, ##51024
165e8     F2 FA 01 F6 | 	mov	result1, objptr
165ec     00 D0 01 FF 
165f0     00 FA 45 F5 | 	or	result1, ##60817408
165f4     63 00 00 FF 
165f8     4C E5 05 F1 | 	add	objptr, ##51020
165fc     F2 FA 61 FC | 	wrlong	result1, objptr
16600     63 00 00 FF 
16604     4C E5 85 F1 | 	sub	objptr, ##51020
16608     F2 FA 01 F6 | 	mov	result1, objptr
1660c     00 D8 01 FF 
16610     00 FA 45 F5 | 	or	result1, ##61865984
16614     63 00 00 FF 
16618     64 E5 05 F1 | 	add	objptr, ##51044
1661c     F2 FA 61 FC | 	wrlong	result1, objptr
16620     63 00 00 FF 
16624     64 E5 85 F1 | 	sub	objptr, ##51044
16628     F2 FA 01 F6 | 	mov	result1, objptr
1662c     76 FA 25 F4 | 	bith	result1, #118
16630     63 00 00 FF 
16634     68 E5 05 F1 | 	add	objptr, ##51048
16638     F2 FA 61 FC | 	wrlong	result1, objptr
1663c     63 00 00 FF 
16640     68 E5 85 F1 | 	sub	objptr, ##51048
16644     F2 FA 01 F6 | 	mov	result1, objptr
16648     00 E8 01 FF 
1664c     00 FA 45 F5 | 	or	result1, ##63963136
16650     63 00 00 FF 
16654     54 E5 05 F1 | 	add	objptr, ##51028
16658     F2 FA 61 FC | 	wrlong	result1, objptr
1665c     63 00 00 FF 
16660     54 E5 85 F1 | 	sub	objptr, ##51028
16664     F2 FA 01 F6 | 	mov	result1, objptr
16668     95 FA 25 F4 | 	bith	result1, #149
1666c     63 00 00 FF 
16670     58 E5 05 F1 | 	add	objptr, ##51032
16674     F2 FA 61 FC | 	wrlong	result1, objptr
16678     63 00 00 FF 
1667c     58 E5 85 F1 | 	sub	objptr, ##51032
16680     F2 FA 01 F6 | 	mov	result1, objptr
16684     B4 FA 25 F4 | 	bith	result1, #180
16688     63 00 00 FF 
1668c     5C E5 05 F1 | 	add	objptr, ##51036
16690     F2 FA 61 FC | 	wrlong	result1, objptr
16694     63 00 00 FF 
16698     5C E5 85 F1 | 	sub	objptr, ##51036
1669c     F2 FA 01 F6 | 	mov	result1, objptr
166a0     1A FA 25 F4 | 	bith	result1, #26
166a4     63 00 00 FF 
166a8     60 E5 05 F1 | 	add	objptr, ##51040
166ac     F2 FA 61 FC | 	wrlong	result1, objptr
166b0     63 00 00 FF 
166b4     60 E5 85 F1 | 	sub	objptr, ##51040
166b8     F2 FA 01 F6 | 	mov	result1, objptr
166bc     00 08 02 FF 
166c0     00 FA 45 F5 | 	or	result1, ##68157440
166c4     63 00 00 FF 
166c8     70 E5 05 F1 | 	add	objptr, ##51056
166cc     F2 FA 61 FC | 	wrlong	result1, objptr
166d0     63 00 00 FF 
166d4     70 E5 85 F1 | 	sub	objptr, ##51056
166d8     F2 FA 01 F6 | 	mov	result1, objptr
166dc     00 10 02 FF 
166e0     00 FA 45 F5 | 	or	result1, ##69206016
166e4     63 00 00 FF 
166e8     6C E5 05 F1 | 	add	objptr, ##51052
166ec     F2 FA 61 FC | 	wrlong	result1, objptr
166f0     63 00 00 FF 
166f4     6C E5 85 F1 | 	sub	objptr, ##51052
166f8     F2 FA 01 F6 | 	mov	result1, objptr
166fc     00 18 02 FF 
16700     00 FA 45 F5 | 	or	result1, ##70254592
16704     63 00 00 FF 
16708     7C E5 05 F1 | 	add	objptr, ##51068
1670c     F2 FA 61 FC | 	wrlong	result1, objptr
16710     63 00 00 FF 
16714     7C E5 85 F1 | 	sub	objptr, ##51068
16718     F2 FA 01 F6 | 	mov	result1, objptr
1671c     00 20 02 FF 
16720     00 FA 45 F5 | 	or	result1, ##71303168
16724     63 00 00 FF 
16728     78 E5 05 F1 | 	add	objptr, ##51064
1672c     F2 FA 61 FC | 	wrlong	result1, objptr
16730     63 00 00 FF 
16734     78 E5 85 F1 | 	sub	objptr, ##51064
16738     F2 FA 01 F6 | 	mov	result1, objptr
1673c     00 28 02 FF 
16740     00 FA 45 F5 | 	or	result1, ##72351744
16744     63 00 00 FF 
16748     74 E5 05 F1 | 	add	objptr, ##51060
1674c     F2 FA 61 FC | 	wrlong	result1, objptr
16750     63 00 00 FF 
16754     74 E5 85 F1 | 	sub	objptr, ##51060
16758     F2 FA 01 F6 | 	mov	result1, objptr
1675c     00 30 02 FF 
16760     00 FA 45 F5 | 	or	result1, ##73400320
16764     63 00 00 FF 
16768     80 E5 05 F1 | 	add	objptr, ##51072
1676c     F2 FA 61 FC | 	wrlong	result1, objptr
16770     63 00 00 FF 
16774     80 E5 85 F1 | 	sub	objptr, ##51072
16778     F2 FA 01 F6 | 	mov	result1, objptr
1677c     00 38 02 FF 
16780     00 FA 45 F5 | 	or	result1, ##74448896
16784     63 00 00 FF 
16788     84 E5 05 F1 | 	add	objptr, ##51076
1678c     F2 FA 61 FC | 	wrlong	result1, objptr
16790     63 00 00 FF 
16794     84 E5 85 F1 | 	sub	objptr, ##51076
16798     F2 FA 01 F6 | 	mov	result1, objptr
1679c     00 40 02 FF 
167a0     00 FA 45 F5 | 	or	result1, ##75497472
167a4     63 00 00 FF 
167a8     18 E4 05 F1 | 	add	objptr, ##50712
167ac     F2 FA 61 FC | 	wrlong	result1, objptr
167b0     63 00 00 FF 
167b4     18 E4 85 F1 | 	sub	objptr, ##50712
167b8     F2 FA 01 F6 | 	mov	result1, objptr
167bc     00 48 02 FF 
167c0     00 FA 45 F5 | 	or	result1, ##76546048
167c4     63 00 00 FF 
167c8     9C E5 05 F1 | 	add	objptr, ##51100
167cc     F2 FA 61 FC | 	wrlong	result1, objptr
167d0     63 00 00 FF 
167d4     9C E5 85 F1 | 	sub	objptr, ##51100
167d8     F2 FA 01 F6 | 	mov	result1, objptr
167dc     00 50 02 FF 
167e0     00 FA 45 F5 | 	or	result1, ##77594624
167e4     63 00 00 FF 
167e8     AC E5 05 F1 | 	add	objptr, ##51116
167ec     F2 FA 61 FC | 	wrlong	result1, objptr
167f0     63 00 00 FF 
167f4     AC E5 85 F1 | 	sub	objptr, ##51116
167f8     F2 FA 01 F6 | 	mov	result1, objptr
167fc     00 58 02 FF 
16800     00 FA 45 F5 | 	or	result1, ##78643200
16804     63 00 00 FF 
16808     B0 E5 05 F1 | 	add	objptr, ##51120
1680c     F2 FA 61 FC | 	wrlong	result1, objptr
16810     63 00 00 FF 
16814     B0 E5 85 F1 | 	sub	objptr, ##51120
16818     F2 FA 01 F6 | 	mov	result1, objptr
1681c     00 60 02 FF 
16820     00 FA 45 F5 | 	or	result1, ##79691776
16824     63 00 00 FF 
16828     A8 E5 05 F1 | 	add	objptr, ##51112
1682c     F2 FA 61 FC | 	wrlong	result1, objptr
16830     63 00 00 FF 
16834     A8 E5 85 F1 | 	sub	objptr, ##51112
16838     F2 FA 01 F6 | 	mov	result1, objptr
1683c     00 68 02 FF 
16840     00 FA 45 F5 | 	or	result1, ##80740352
16844     63 00 00 FF 
16848     A0 E5 05 F1 | 	add	objptr, ##51104
1684c     F2 FA 61 FC | 	wrlong	result1, objptr
16850     63 00 00 FF 
16854     A0 E5 85 F1 | 	sub	objptr, ##51104
16858     F2 FA 01 F6 | 	mov	result1, objptr
1685c     00 70 02 FF 
16860     00 FA 45 F5 | 	or	result1, ##81788928
16864     63 00 00 FF 
16868     A4 E5 05 F1 | 	add	objptr, ##51108
1686c     F2 FA 61 FC | 	wrlong	result1, objptr
16870     63 00 00 FF 
16874     A4 E5 85 F1 | 	sub	objptr, ##51108
16878     F2 FA 01 F6 | 	mov	result1, objptr
1687c     00 78 02 FF 
16880     00 FA 45 F5 | 	or	result1, ##82837504
16884     63 00 00 FF 
16888     B4 E5 05 F1 | 	add	objptr, ##51124
1688c     F2 FA 61 FC | 	wrlong	result1, objptr
16890     63 00 00 FF 
16894     B4 E5 85 F1 | 	sub	objptr, ##51124
16898     F2 FA 01 F6 | 	mov	result1, objptr
1689c     00 80 02 FF 
168a0     00 FA 45 F5 | 	or	result1, ##83886080
168a4     63 00 00 FF 
168a8     B8 E5 05 F1 | 	add	objptr, ##51128
168ac     F2 FA 61 FC | 	wrlong	result1, objptr
168b0     63 00 00 FF 
168b4     B8 E5 85 F1 | 	sub	objptr, ##51128
168b8     F2 FA 01 F6 | 	mov	result1, objptr
168bc     00 88 02 FF 
168c0     00 FA 45 F5 | 	or	result1, ##84934656
168c4     63 00 00 FF 
168c8     BC E5 05 F1 | 	add	objptr, ##51132
168cc     F2 FA 61 FC | 	wrlong	result1, objptr
168d0     63 00 00 FF 
168d4     BC E5 85 F1 | 	sub	objptr, ##51132
168d8     F2 FA 01 F6 | 	mov	result1, objptr
168dc     00 90 02 FF 
168e0     00 FA 45 F5 | 	or	result1, ##85983232
168e4     63 00 00 FF 
168e8     C0 E5 05 F1 | 	add	objptr, ##51136
168ec     F2 FA 61 FC | 	wrlong	result1, objptr
168f0     63 00 00 FF 
168f4     C0 E5 85 F1 | 	sub	objptr, ##51136
168f8     F2 FA 01 F6 | 	mov	result1, objptr
168fc     00 98 02 FF 
16900     00 FA 45 F5 | 	or	result1, ##87031808
16904     63 00 00 FF 
16908     C4 E5 05 F1 | 	add	objptr, ##51140
1690c     F2 FA 61 FC | 	wrlong	result1, objptr
16910     63 00 00 FF 
16914     C4 E5 85 F1 | 	sub	objptr, ##51140
16918     F2 FA 01 F6 | 	mov	result1, objptr
1691c     00 A0 02 FF 
16920     00 FA 45 F5 | 	or	result1, ##88080384
16924     63 00 00 FF 
16928     C8 E5 05 F1 | 	add	objptr, ##51144
1692c     F2 FA 61 FC | 	wrlong	result1, objptr
16930     63 00 00 FF 
16934     C8 E5 85 F1 | 	sub	objptr, ##51144
16938     F2 FA 01 F6 | 	mov	result1, objptr
1693c     00 A8 02 FF 
16940     00 FA 45 F5 | 	or	result1, ##89128960
16944     63 00 00 FF 
16948     CC E5 05 F1 | 	add	objptr, ##51148
1694c     F2 FA 61 FC | 	wrlong	result1, objptr
16950     63 00 00 FF 
16954     CC E5 85 F1 | 	sub	objptr, ##51148
16958     F2 FA 01 F6 | 	mov	result1, objptr
1695c     00 B0 02 FF 
16960     00 FA 45 F5 | 	or	result1, ##90177536
16964     63 00 00 FF 
16968     D0 E5 05 F1 | 	add	objptr, ##51152
1696c     F2 FA 61 FC | 	wrlong	result1, objptr
16970     63 00 00 FF 
16974     D0 E5 85 F1 | 	sub	objptr, ##51152
16978     F2 FA 01 F6 | 	mov	result1, objptr
1697c     00 B8 02 FF 
16980     00 FA 45 F5 | 	or	result1, ##91226112
16984     63 00 00 FF 
16988     DC E5 05 F1 | 	add	objptr, ##51164
1698c     F2 FA 61 FC | 	wrlong	result1, objptr
16990     63 00 00 FF 
16994     DC E5 85 F1 | 	sub	objptr, ##51164
16998     F2 FA 01 F6 | 	mov	result1, objptr
1699c     00 C0 02 FF 
169a0     00 FA 45 F5 | 	or	result1, ##92274688
169a4     63 00 00 FF 
169a8     D4 E5 05 F1 | 	add	objptr, ##51156
169ac     F2 FA 61 FC | 	wrlong	result1, objptr
169b0     63 00 00 FF 
169b4     D4 E5 85 F1 | 	sub	objptr, ##51156
169b8     F2 FA 01 F6 | 	mov	result1, objptr
169bc     00 C8 02 FF 
169c0     00 FA 45 F5 | 	or	result1, ##93323264
169c4     63 00 00 FF 
169c8     D8 E5 05 F1 | 	add	objptr, ##51160
169cc     F2 FA 61 FC | 	wrlong	result1, objptr
169d0     63 00 00 FF 
169d4     D8 E5 85 F1 | 	sub	objptr, ##51160
169d8     F2 FA 01 F6 | 	mov	result1, objptr
169dc     00 D0 02 FF 
169e0     00 FA 45 F5 | 	or	result1, ##94371840
169e4     63 00 00 FF 
169e8     E0 E5 05 F1 | 	add	objptr, ##51168
169ec     F2 FA 61 FC | 	wrlong	result1, objptr
169f0     63 00 00 FF 
169f4     E0 E5 85 F1 | 	sub	objptr, ##51168
169f8     F2 FA 01 F6 | 	mov	result1, objptr
169fc     00 D8 02 FF 
16a00     00 FA 45 F5 | 	or	result1, ##95420416
16a04     63 00 00 FF 
16a08     88 E5 05 F1 | 	add	objptr, ##51080
16a0c     F2 FA 61 FC | 	wrlong	result1, objptr
16a10     63 00 00 FF 
16a14     88 E5 85 F1 | 	sub	objptr, ##51080
16a18     F2 FA 01 F6 | 	mov	result1, objptr
16a1c     00 E0 02 FF 
16a20     00 FA 45 F5 | 	or	result1, ##96468992
16a24     63 00 00 FF 
16a28     90 E5 05 F1 | 	add	objptr, ##51088
16a2c     F2 FA 61 FC | 	wrlong	result1, objptr
16a30     63 00 00 FF 
16a34     90 E5 85 F1 | 	sub	objptr, ##51088
16a38     F2 FA 01 F6 | 	mov	result1, objptr
16a3c     00 E8 02 FF 
16a40     00 FA 45 F5 | 	or	result1, ##97517568
16a44     63 00 00 FF 
16a48     94 E5 05 F1 | 	add	objptr, ##51092
16a4c     F2 FA 61 FC | 	wrlong	result1, objptr
16a50     63 00 00 FF 
16a54     94 E5 85 F1 | 	sub	objptr, ##51092
16a58     F2 FA 01 F6 | 	mov	result1, objptr
16a5c     00 F0 02 FF 
16a60     00 FA 45 F5 | 	or	result1, ##98566144
16a64     63 00 00 FF 
16a68     E4 E5 05 F1 | 	add	objptr, ##51172
16a6c     F2 FA 61 FC | 	wrlong	result1, objptr
16a70     63 00 00 FF 
16a74     E4 E5 85 F1 | 	sub	objptr, ##51172
16a78     F2 FA 01 F6 | 	mov	result1, objptr
16a7c     00 F8 02 FF 
16a80     00 FA 45 F5 | 	or	result1, ##99614720
16a84     63 00 00 FF 
16a88     E8 E5 05 F1 | 	add	objptr, ##51176
16a8c     F2 FA 61 FC | 	wrlong	result1, objptr
16a90     63 00 00 FF 
16a94     E8 E5 85 F1 | 	sub	objptr, ##51176
16a98     F2 FA 01 F6 | 	mov	result1, objptr
16a9c     39 FA 25 F4 | 	bith	result1, #57
16aa0     63 00 00 FF 
16aa4     EC E5 05 F1 | 	add	objptr, ##51180
16aa8     F2 FA 61 FC | 	wrlong	result1, objptr
16aac     63 00 00 FF 
16ab0     EC E5 85 F1 | 	sub	objptr, ##51180
16ab4     F2 FA 01 F6 | 	mov	result1, objptr
16ab8     00 08 03 FF 
16abc     00 FA 45 F5 | 	or	result1, ##101711872
16ac0     63 00 00 FF 
16ac4     98 E5 05 F1 | 	add	objptr, ##51096
16ac8     F2 FA 61 FC | 	wrlong	result1, objptr
16acc     63 00 00 FF 
16ad0     98 E5 85 F1 | 	sub	objptr, ##51096
16ad4     F2 FA 01 F6 | 	mov	result1, objptr
16ad8     00 10 03 FF 
16adc     00 FA 45 F5 | 	or	result1, ##102760448
16ae0     63 00 00 FF 
16ae4     FC E5 05 F1 | 	add	objptr, ##51196
16ae8     F2 FA 61 FC | 	wrlong	result1, objptr
16aec     63 00 00 FF 
16af0     FC E5 85 F1 | 	sub	objptr, ##51196
16af4     F2 FA 01 F6 | 	mov	result1, objptr
16af8     00 18 03 FF 
16afc     00 FA 45 F5 | 	or	result1, ##103809024
16b00     64 00 00 FF 
16b04     04 E4 05 F1 | 	add	objptr, ##51204
16b08     F2 FA 61 FC | 	wrlong	result1, objptr
16b0c     64 00 00 FF 
16b10     04 E4 85 F1 | 	sub	objptr, ##51204
16b14     F2 FA 01 F6 | 	mov	result1, objptr
16b18     00 20 03 FF 
16b1c     00 FA 45 F5 | 	or	result1, ##104857600
16b20     63 00 00 FF 
16b24     F8 E5 05 F1 | 	add	objptr, ##51192
16b28     F2 FA 61 FC | 	wrlong	result1, objptr
16b2c     63 00 00 FF 
16b30     F8 E5 85 F1 | 	sub	objptr, ##51192
16b34     F2 FA 01 F6 | 	mov	result1, objptr
16b38     00 28 03 FF 
16b3c     00 FA 45 F5 | 	or	result1, ##105906176
16b40     63 00 00 FF 
16b44     F4 E5 05 F1 | 	add	objptr, ##51188
16b48     F2 FA 61 FC | 	wrlong	result1, objptr
16b4c     63 00 00 FF 
16b50     F4 E5 85 F1 | 	sub	objptr, ##51188
16b54     F2 FA 01 F6 | 	mov	result1, objptr
16b58     00 30 03 FF 
16b5c     00 FA 45 F5 | 	or	result1, ##106954752
16b60     63 00 00 FF 
16b64     F0 E5 05 F1 | 	add	objptr, ##51184
16b68     F2 FA 61 FC | 	wrlong	result1, objptr
16b6c     63 00 00 FF 
16b70     F0 E5 85 F1 | 	sub	objptr, ##51184
16b74     F2 FA 01 F6 | 	mov	result1, objptr
16b78     00 38 03 FF 
16b7c     00 FA 45 F5 | 	or	result1, ##108003328
16b80     64 00 00 FF 
16b84     00 E4 05 F1 | 	add	objptr, ##51200
16b88     F2 FA 61 FC | 	wrlong	result1, objptr
16b8c     64 00 00 FF 
16b90     00 E4 85 F1 | 	sub	objptr, ##51200
16b94     F2 FA 01 F6 | 	mov	result1, objptr
16b98     00 40 03 FF 
16b9c     00 FA 45 F5 | 	or	result1, ##109051904
16ba0     64 00 00 FF 
16ba4     08 E4 05 F1 | 	add	objptr, ##51208
16ba8     F2 FA 61 FC | 	wrlong	result1, objptr
16bac     64 00 00 FF 
16bb0     08 E4 85 F1 | 	sub	objptr, ##51208
16bb4     F2 FA 01 F6 | 	mov	result1, objptr
16bb8     00 48 03 FF 
16bbc     00 FA 45 F5 | 	or	result1, ##110100480
16bc0     64 00 00 FF 
16bc4     0C E4 05 F1 | 	add	objptr, ##51212
16bc8     F2 FA 61 FC | 	wrlong	result1, objptr
16bcc     64 00 00 FF 
16bd0     0C E4 85 F1 | 	sub	objptr, ##51212
16bd4     F2 FA 01 F6 | 	mov	result1, objptr
16bd8     00 50 03 FF 
16bdc     00 FA 45 F5 | 	or	result1, ##111149056
16be0     64 00 00 FF 
16be4     10 E4 05 F1 | 	add	objptr, ##51216
16be8     F2 FA 61 FC | 	wrlong	result1, objptr
16bec     64 00 00 FF 
16bf0     10 E4 85 F1 | 	sub	objptr, ##51216
16bf4                 | _init_commands_ret
16bf4     2D 00 64 FD | 	ret
16bf8                 | 
16bf8                 | ' 
16bf8                 | ' ''--------------------------------Error strings -------------------------------------
16bf8                 | ' sub init_audio
16bf8                 | _init_audio
16bf8     05 4A 05 F6 | 	mov	COUNT_, #5
16bfc     A8 00 A0 FD | 	call	#pushregs_
16c00     93 12 06 F6 | 	mov	arg01, #147
16c04     9A 14 06 F6 | 	mov	arg02, #154
16c08     00 2D B0 FD | 	call	#_hg010b_spin2_cls
16c0c     00 C0 1F FF 
16c10     00 1E 06 F6 | 	mov	local01, ##1065353216
16c14                 | ' for i=0 to 1023 : samplebuf(0,i)=round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
16c14     00 20 06 F6 | 	mov	local02, #0
16c18                 | LR__1730
16c18     10 23 02 F6 | 	mov	local03, local02
16c1c     01 22 66 F0 | 	shl	local03, #1
16c20     0C 00 00 FF 
16c24     CC E4 05 F1 | 	add	objptr, ##6348
16c28     F2 22 02 F1 | 	add	local03, objptr
16c2c     58 7F 23 FF 
16c30     00 24 06 F6 | 	mov	local04, ##1191096320
16c34     0C 00 00 FF 
16c38     CC E4 85 F1 | 	sub	objptr, ##6348
16c3c     10 13 52 F6 | 	abs	arg01, local02 wc
16c40     1F 26 C6 C9 |  if_b	decod	local05, #31
16c44     00 26 06 36 |  if_ae	mov	local05, #0
16c48     3C 67 B0 FD | 	call	#__system___float_fromuns
16c4c     13 FB 61 F5 | 	xor	result1, local05
16c50     FD 12 02 F6 | 	mov	arg01, result1
16c54     87 24 20 FF 
16c58     DB 15 06 F6 | 	mov	arg02, ##1078530011
16c5c     2C 6B B0 FD | 	call	#__system___float_mul
16c60     FD 12 02 F6 | 	mov	arg01, result1
16c64     00 00 22 FF 
16c68     00 14 06 F6 | 	mov	arg02, ##1140850688
16c6c     20 6D B0 FD | 	call	#__system___float_div
16c70     FD 12 02 F6 | 	mov	arg01, result1
16c74     50 74 B0 FD | 	call	#__system____builtin_sinf
16c78     FD 14 02 F6 | 	mov	arg02, result1
16c7c     12 13 02 F6 | 	mov	arg01, local04
16c80     08 6B B0 FD | 	call	#__system___float_mul
16c84     FD 12 02 F6 | 	mov	arg01, result1
16c88     01 14 06 F6 | 	mov	arg02, #1
16c8c     C4 6F B0 FD | 	call	#__system___float_tointeger
16c90     11 FB 51 FC | 	wrword	result1, local03
16c94     01 20 06 F1 | 	add	local02, #1
16c98     02 00 00 FF 
16c9c     00 20 56 F2 | 	cmps	local02, ##1024 wc
16ca0     74 FF 9F CD |  if_b	jmp	#LR__1730
16ca4                 | ' for i=0 to 511  : samplebuf(1,i)= -32512+127*i: samplebuf(1,512+i)=-samplebuf(1,i) : next i   		' 1 : triangle 
16ca4     00 20 06 F6 | 	mov	local02, #0
16ca8     10 00 00 FF 
16cac     CC E4 05 F1 | 	add	objptr, ##8396
16cb0     97 6A 48 FB | 	callpa	#(@LR__1734-@LR__1731)>>2,fcache_load_ptr_
16cb4                 | LR__1731
16cb4     10 23 02 F6 | 	mov	local03, local02
16cb8     01 22 66 F0 | 	shl	local03, #1
16cbc     F2 22 02 F1 | 	add	local03, objptr
16cc0     10 27 02 F6 | 	mov	local05, local02
16cc4     07 26 66 F0 | 	shl	local05, #7
16cc8     10 27 82 F1 | 	sub	local05, local02
16ccc     C0 FF 7F FF 
16cd0     00 25 06 F6 | 	mov	local04, ##-32512
16cd4     13 25 02 F1 | 	add	local04, local05
16cd8     11 25 52 FC | 	wrword	local04, local03
16cdc     09 22 C6 F9 | 	decod	local03, #9
16ce0     10 23 02 F1 | 	add	local03, local02
16ce4     01 22 66 F0 | 	shl	local03, #1
16ce8     F2 22 02 F1 | 	add	local03, objptr
16cec     10 25 02 F6 | 	mov	local04, local02
16cf0     01 24 66 F0 | 	shl	local04, #1
16cf4     F2 24 02 F1 | 	add	local04, objptr
16cf8     12 25 E2 FA | 	rdword	local04, local04
16cfc     0F 24 66 F7 | 	signx	local04, #15
16d00     12 25 62 F6 | 	neg	local04, local04
16d04     11 25 52 FC | 	wrword	local04, local03
16d08     01 20 06 F1 | 	add	local02, #1
16d0c     01 00 00 FF 
16d10     00 20 56 F2 | 	cmps	local02, ##512 wc
16d14     9C FF 9F CD |  if_b	jmp	#LR__1731
16d18                 | ' for i=0 to 1023 : samplebuf(2,i)= -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
16d18     00 20 06 F6 | 	mov	local02, #0
16d1c     04 00 00 FF 
16d20     00 E4 05 F1 | 	add	objptr, ##2048
16d24                 | LR__1732
16d24     10 23 02 F6 | 	mov	local03, local02
16d28     01 22 66 F0 | 	shl	local03, #1
16d2c     F2 22 02 F1 | 	add	local03, objptr
16d30     10 27 02 F6 | 	mov	local05, local02
16d34     06 26 66 F0 | 	shl	local05, #6
16d38     10 27 82 F1 | 	sub	local05, local02
16d3c     C1 FF 7F FF 
16d40     00 24 06 F6 | 	mov	local04, ##-32256
16d44     13 25 02 F1 | 	add	local04, local05
16d48     11 25 52 FC | 	wrword	local04, local03
16d4c     01 20 06 F1 | 	add	local02, #1
16d50     02 00 00 FF 
16d54     00 20 56 F2 | 	cmps	local02, ##1024 wc
16d58     C8 FF 9F CD |  if_b	jmp	#LR__1732
16d5c                 | ' for i=0 to 127  : samplebuf(3,i)= -32600 : next i : for i=128 to 1023 : samplebuf(3,i) =32600 : next i 	' 3 pulse 12.5%
16d5c     00 20 06 F6 | 	mov	local02, #0
16d60     04 00 00 FF 
16d64     00 E4 05 F1 | 	add	objptr, ##2048
16d68                 | LR__1733
16d68     10 23 02 F6 | 	mov	local03, local02
16d6c     01 22 66 F0 | 	shl	local03, #1
16d70     F2 22 02 F1 | 	add	local03, objptr
16d74     40 00 80 FF 
16d78     11 51 59 FC | 	wrword	##32936, local03
16d7c     01 20 06 F1 | 	add	local02, #1
16d80     80 20 56 F2 | 	cmps	local02, #128 wc
16d84     E0 FF 9F CD |  if_b	jmp	#LR__1733
16d88                 | LR__1734
16d88     80 20 06 F6 | 	mov	local02, #128
16d8c     97 68 48 FB | 	callpa	#(@LR__1740-@LR__1735)>>2,fcache_load_ptr_
16d90                 | LR__1735
16d90     10 23 02 F6 | 	mov	local03, local02
16d94     01 22 66 F0 | 	shl	local03, #1
16d98     F2 22 02 F1 | 	add	local03, objptr
16d9c     3F 00 80 FF 
16da0     11 B1 5A FC | 	wrword	##32600, local03
16da4     01 20 06 F1 | 	add	local02, #1
16da8     02 00 00 FF 
16dac     00 20 16 F2 | 	cmp	local02, ##1024 wc
16db0     DC FF 9F CD |  if_b	jmp	#LR__1735
16db4                 | ' for i=0 to 511  : samplebuf(4,i)= -32600 : next i : for i=512 to 1023 : samplebuf(4,i) =32600 : next i 	' 4 square
16db4     00 20 06 F6 | 	mov	local02, #0
16db8     04 00 00 FF 
16dbc     00 E4 05 F1 | 	add	objptr, ##2048
16dc0                 | LR__1736
16dc0     10 23 02 F6 | 	mov	local03, local02
16dc4     01 22 66 F0 | 	shl	local03, #1
16dc8     F2 22 02 F1 | 	add	local03, objptr
16dcc     40 00 80 FF 
16dd0     11 51 59 FC | 	wrword	##32936, local03
16dd4     01 20 06 F1 | 	add	local02, #1
16dd8     01 00 00 FF 
16ddc     00 20 56 F2 | 	cmps	local02, ##512 wc
16de0     DC FF 9F CD |  if_b	jmp	#LR__1736
16de4     09 20 C6 F9 | 	decod	local02, #9
16de8                 | LR__1737
16de8     10 23 02 F6 | 	mov	local03, local02
16dec     01 22 66 F0 | 	shl	local03, #1
16df0     F2 22 02 F1 | 	add	local03, objptr
16df4     3F 00 80 FF 
16df8     11 B1 5A FC | 	wrword	##32600, local03
16dfc     01 20 06 F1 | 	add	local02, #1
16e00     02 00 00 FF 
16e04     00 20 16 F2 | 	cmp	local02, ##1024 wc
16e08     DC FF 9F CD |  if_b	jmp	#LR__1737
16e0c                 | ' for i=0 to 255  : samplebuf(5,i)= -32600 : next i : for i=256 to 1023 : samplebuf(5,i) =32600 : next i 	' 5 pulse 25%
16e0c     00 20 06 F6 | 	mov	local02, #0
16e10     04 00 00 FF 
16e14     00 E4 05 F1 | 	add	objptr, ##2048
16e18                 | LR__1738
16e18     10 23 02 F6 | 	mov	local03, local02
16e1c     01 22 66 F0 | 	shl	local03, #1
16e20     F2 22 02 F1 | 	add	local03, objptr
16e24     40 00 80 FF 
16e28     11 51 59 FC | 	wrword	##32936, local03
16e2c     01 20 06 F1 | 	add	local02, #1
16e30     00 21 56 F2 | 	cmps	local02, #256 wc
16e34     E0 FF 9F CD |  if_b	jmp	#LR__1738
16e38     00 21 06 F6 | 	mov	local02, #256
16e3c                 | LR__1739
16e3c     10 23 02 F6 | 	mov	local03, local02
16e40     01 22 66 F0 | 	shl	local03, #1
16e44     F2 22 02 F1 | 	add	local03, objptr
16e48     3F 00 80 FF 
16e4c     11 B1 5A FC | 	wrword	##32600, local03
16e50     01 20 06 F1 | 	add	local02, #1
16e54     02 00 00 FF 
16e58     00 20 16 F2 | 	cmp	local02, ##1024 wc
16e5c     DC FF 9F CD |  if_b	jmp	#LR__1739
16e60                 | LR__1740
16e60                 | ' for i=0 to 1023 : samplebuf(6,i)= dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
16e60     00 20 06 F6 | 	mov	local02, #0
16e64     04 00 00 FF 
16e68     00 E4 05 F1 | 	add	objptr, ##2048
16e6c     14 00 00 FF 
16e70     C6 EA 05 F1 | 	add	ptr__dat__, ##10438
16e74     97 1C 48 FB | 	callpa	#(@LR__1742-@LR__1741)>>2,fcache_load_ptr_
16e78                 | LR__1741
16e78     10 23 02 F6 | 	mov	local03, local02
16e7c     01 22 66 F0 | 	shl	local03, #1
16e80     F2 22 02 F1 | 	add	local03, objptr
16e84     F5 12 02 F6 | 	mov	arg01, ptr__dat__
16e88     10 12 06 F1 | 	add	arg01, #16
16e8c     10 FB 01 F6 | 	mov	result1, local02
16e90     01 FA 65 F0 | 	shl	result1, #1
16e94     FD 12 02 F1 | 	add	arg01, result1
16e98     09 FB E1 FA | 	rdword	result1, arg01
16e9c     11 FB 51 FC | 	wrword	result1, local03
16ea0     01 20 06 F1 | 	add	local02, #1
16ea4     02 00 00 FF 
16ea8     00 20 56 F2 | 	cmps	local02, ##1024 wc
16eac     C8 FF 9F CD |  if_b	jmp	#LR__1741
16eb0                 | LR__1742
16eb0                 | ' for i=0 to 1023 : samplebuf(7,i)= dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
16eb0     00 20 06 F6 | 	mov	local02, #0
16eb4     04 00 00 FF 
16eb8     00 E4 05 F1 | 	add	objptr, ##2048
16ebc     04 00 00 FF 
16ec0     10 EA 85 F1 | 	sub	ptr__dat__, ##2064
16ec4     97 1C 48 FB | 	callpa	#(@LR__1744-@LR__1743)>>2,fcache_load_ptr_
16ec8                 | LR__1743
16ec8     10 23 02 F6 | 	mov	local03, local02
16ecc     01 22 66 F0 | 	shl	local03, #1
16ed0     F2 22 02 F1 | 	add	local03, objptr
16ed4     F5 12 02 F6 | 	mov	arg01, ptr__dat__
16ed8     10 12 06 F1 | 	add	arg01, #16
16edc     10 FB 01 F6 | 	mov	result1, local02
16ee0     01 FA 65 F0 | 	shl	result1, #1
16ee4     FD 12 02 F1 | 	add	arg01, result1
16ee8     09 FB E1 FA | 	rdword	result1, arg01
16eec     11 FB 51 FC | 	wrword	result1, local03
16ef0     01 20 06 F1 | 	add	local02, #1
16ef4     02 00 00 FF 
16ef8     00 20 56 F2 | 	cmps	local02, ##1024 wc
16efc     C8 FF 9F CD |  if_b	jmp	#LR__1743
16f00                 | LR__1744
16f00     10 00 00 FF 
16f04     B6 EA 85 F1 | 	sub	ptr__dat__, ##8374
16f08                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
16f08     00 20 06 F6 | 	mov	local02, #0
16f0c     04 00 00 FF 
16f10     00 E4 05 F1 | 	add	objptr, ##2048
16f14     97 18 48 FB | 	callpa	#(@LR__1746-@LR__1745)>>2,fcache_load_ptr_
16f18                 | LR__1745
16f18     10 23 02 F6 | 	mov	local03, local02
16f1c     01 22 66 F0 | 	shl	local03, #1
16f20     F2 22 02 F1 | 	add	local03, objptr
16f24     10 27 02 F6 | 	mov	local05, local02
16f28     08 26 66 F0 | 	shl	local05, #8
16f2c     7F 00 00 FF 
16f30     00 25 06 F6 | 	mov	local04, ##65280
16f34     13 25 82 F1 | 	sub	local04, local05
16f38     11 25 52 FC | 	wrword	local04, local03
16f3c     01 20 06 F1 | 	add	local02, #1
16f40     00 21 56 F2 | 	cmps	local02, #256 wc
16f44     D0 FF 9F CD |  if_b	jmp	#LR__1745
16f48                 | LR__1746
16f48     2C 00 00 FF 
16f4c     CC E4 85 F1 | 	sub	objptr, ##22732
16f50                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
16f50     00 20 06 F6 | 	mov	local02, #0
16f54                 | LR__1747
16f54     10 23 02 F6 | 	mov	local03, local02
16f58     01 22 66 F0 | 	shl	local03, #1
16f5c     2D 00 00 FF 
16f60     CC E4 05 F1 | 	add	objptr, ##23244
16f64     F2 22 02 F1 | 	add	local03, objptr
16f68     80 BF 23 FF 
16f6c     00 12 06 F6 | 	mov	arg01, ##1199505408
16f70     0F 15 02 F6 | 	mov	arg02, local01
16f74     2D 00 00 FF 
16f78     CC E4 85 F1 | 	sub	objptr, ##23244
16f7c     0C 68 B0 FD | 	call	#__system___float_mul
16f80     FD 12 02 F6 | 	mov	arg01, result1
16f84     01 14 06 F6 | 	mov	arg02, #1
16f88     C8 6C B0 FD | 	call	#__system___float_tointeger
16f8c     11 FB 51 FC | 	wrword	result1, local03
16f90     0F 13 02 F6 | 	mov	arg01, local01
16f94     CC BC 1F FF 
16f98     9A 15 06 F6 | 	mov	arg02, ##1064933786
16f9c     EC 67 B0 FD | 	call	#__system___float_mul
16fa0     FD 1E 02 F6 | 	mov	local01, result1
16fa4     01 20 06 F1 | 	add	local02, #1
16fa8     00 21 56 F2 | 	cmps	local02, #256 wc
16fac     A4 FF 9F CD |  if_b	jmp	#LR__1747
16fb0     2E 00 00 FF 
16fb4     CA E4 05 F1 | 	add	objptr, ##23754
16fb8     F2 00 58 FC | 	wrword	#0, objptr
16fbc                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
16fbc     00 20 06 F6 | 	mov	local02, #0
16fc0     02 E4 05 F1 | 	add	objptr, #2
16fc4     97 10 48 FB | 	callpa	#(@LR__1749-@LR__1748)>>2,fcache_load_ptr_
16fc8                 | LR__1748
16fc8     10 23 02 F6 | 	mov	local03, local02
16fcc     01 22 66 F0 | 	shl	local03, #1
16fd0     F2 22 02 F1 | 	add	local03, objptr
16fd4     7F 00 80 FF 
16fd8     11 01 5A FC | 	wrword	##65280, local03
16fdc     01 20 06 F1 | 	add	local02, #1
16fe0     FF 20 56 F2 | 	cmps	local02, #255 wc
16fe4     E0 FF 9F CD |  if_b	jmp	#LR__1748
16fe8                 | LR__1749
16fe8     FE E5 05 F1 | 	add	objptr, #510
16fec     F2 00 58 FC | 	wrword	#0, objptr
16ff0                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
16ff0     00 20 06 F6 | 	mov	local02, #0
16ff4     02 E4 05 F1 | 	add	objptr, #2
16ff8     97 52 48 FB | 	callpa	#(@LR__1754-@LR__1750)>>2,fcache_load_ptr_
16ffc                 | LR__1750
16ffc     10 23 02 F6 | 	mov	local03, local02
17000     01 22 66 F0 | 	shl	local03, #1
17004     F2 22 02 F1 | 	add	local03, objptr
17008     10 25 02 F6 | 	mov	local04, local02
1700c     0C 24 66 F0 | 	shl	local04, #12
17010     11 25 52 FC | 	wrword	local04, local03
17014     01 20 06 F1 | 	add	local02, #1
17018     10 20 56 F2 | 	cmps	local02, #16 wc
1701c     DC FF 9F CD |  if_b	jmp	#LR__1750
17020                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
17020     10 20 06 F6 | 	mov	local02, #16
17024                 | LR__1751
17024     10 23 02 F6 | 	mov	local03, local02
17028     01 22 66 F0 | 	shl	local03, #1
1702c     F2 22 02 F1 | 	add	local03, objptr
17030     7F 00 80 FF 
17034     11 01 5A FC | 	wrword	##65280, local03
17038     01 20 06 F1 | 	add	local02, #1
1703c     F0 20 16 F2 | 	cmp	local02, #240 wc
17040     E0 FF 9F CD |  if_b	jmp	#LR__1751
17044                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
17044     F0 20 06 F6 | 	mov	local02, #240
17048                 | LR__1752
17048     10 23 02 F6 | 	mov	local03, local02
1704c     01 22 66 F0 | 	shl	local03, #1
17050     F2 22 02 F1 | 	add	local03, objptr
17054     FF 26 06 F6 | 	mov	local05, #255
17058     10 27 82 F1 | 	sub	local05, local02
1705c     0C 26 66 F0 | 	shl	local05, #12
17060     11 27 52 FC | 	wrword	local05, local03
17064     01 20 06 F1 | 	add	local02, #1
17068     00 21 16 F2 | 	cmp	local02, #256 wc
1706c     D8 FF 9F CD |  if_b	jmp	#LR__1752
17070                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
17070     00 20 06 F6 | 	mov	local02, #0
17074     01 00 00 FF 
17078     00 E4 05 F1 | 	add	objptr, ##512
1707c                 | LR__1753
1707c     10 23 02 F6 | 	mov	local03, local02
17080     01 22 66 F0 | 	shl	local03, #1
17084     F2 22 02 F1 | 	add	local03, objptr
17088     10 25 02 F6 | 	mov	local04, local02
1708c     08 24 66 F0 | 	shl	local04, #8
17090     11 25 52 FC | 	wrword	local04, local03
17094     01 20 06 F1 | 	add	local02, #1
17098     00 21 56 F2 | 	cmps	local02, #256 wc
1709c     DC FF 9F CD |  if_b	jmp	#LR__1753
170a0                 | LR__1754
170a0     FE E5 05 F1 | 	add	objptr, #510
170a4     F2 00 58 FC | 	wrword	#0, objptr
170a8                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
170a8     00 20 06 F6 | 	mov	local02, #0
170ac     02 E4 05 F1 | 	add	objptr, #2
170b0     97 6A 48 FB | 	callpa	#(@LR__1759-@LR__1755)>>2,fcache_load_ptr_
170b4                 | LR__1755
170b4     10 23 02 F6 | 	mov	local03, local02
170b8     01 22 66 F0 | 	shl	local03, #1
170bc     F2 22 02 F1 | 	add	local03, objptr
170c0     10 25 02 F6 | 	mov	local04, local02
170c4     04 24 66 F0 | 	shl	local04, #4
170c8     10 25 02 F1 | 	add	local04, local02
170cc     04 24 66 F0 | 	shl	local04, #4
170d0     11 25 52 FC | 	wrword	local04, local03
170d4     01 20 06 F1 | 	add	local02, #1
170d8     F0 20 56 F2 | 	cmps	local02, #240 wc
170dc     D4 FF 9F CD |  if_b	jmp	#LR__1755
170e0     F0 20 06 F6 | 	mov	local02, #240
170e4                 | LR__1756
170e4     10 23 02 F6 | 	mov	local03, local02
170e8     01 22 66 F0 | 	shl	local03, #1
170ec     F2 22 02 F1 | 	add	local03, objptr
170f0     FF 26 06 F6 | 	mov	local05, #255
170f4     10 27 82 F1 | 	sub	local05, local02
170f8     0C 26 66 F0 | 	shl	local05, #12
170fc     11 27 52 FC | 	wrword	local05, local03
17100     01 20 06 F1 | 	add	local02, #1
17104     00 21 16 F2 | 	cmp	local02, #256 wc
17108     D8 FF 9F CD |  if_b	jmp	#LR__1756
1710c                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
1710c     00 20 06 F6 | 	mov	local02, #0
17110     01 00 00 FF 
17114     00 E4 05 F1 | 	add	objptr, ##512
17118                 | LR__1757
17118     10 23 02 F6 | 	mov	local03, local02
1711c     01 22 66 F0 | 	shl	local03, #1
17120     F2 22 02 F1 | 	add	local03, objptr
17124     10 25 02 F6 | 	mov	local04, local02
17128     09 24 66 F0 | 	shl	local04, #9
1712c     11 25 52 FC | 	wrword	local04, local03
17130     FF 22 06 F6 | 	mov	local03, #255
17134     10 23 82 F1 | 	sub	local03, local02
17138     01 22 66 F0 | 	shl	local03, #1
1713c     F2 22 02 F1 | 	add	local03, objptr
17140     10 25 02 F6 | 	mov	local04, local02
17144     09 24 66 F0 | 	shl	local04, #9
17148     11 25 52 FC | 	wrword	local04, local03
1714c     01 20 06 F1 | 	add	local02, #1
17150     80 20 56 F2 | 	cmps	local02, #128 wc
17154     C0 FF 9F CD |  if_b	jmp	#LR__1757
17158                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
17158     00 20 06 F6 | 	mov	local02, #0
1715c     01 00 00 FF 
17160     00 E4 05 F1 | 	add	objptr, ##512
17164                 | LR__1758
17164     10 23 02 F6 | 	mov	local03, local02
17168     01 22 66 F0 | 	shl	local03, #1
1716c     F2 22 02 F1 | 	add	local03, objptr
17170     10 25 02 F6 | 	mov	local04, local02
17174     0D 24 66 F0 | 	shl	local04, #13
17178     11 25 52 FC | 	wrword	local04, local03
1717c     01 20 06 F1 | 	add	local02, #1
17180     08 20 56 F2 | 	cmps	local02, #8 wc
17184     DC FF 9F CD |  if_b	jmp	#LR__1758
17188                 | LR__1759
17188                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
17188     08 20 06 F6 | 	mov	local02, #8
1718c     97 C6 48 FB | 	callpa	#(@LR__1764-@LR__1760)>>2,fcache_load_ptr_
17190                 | LR__1760
17190     10 23 02 F6 | 	mov	local03, local02
17194     01 22 66 F0 | 	shl	local03, #1
17198     F2 22 02 F1 | 	add	local03, objptr
1719c     10 1F 02 F6 | 	mov	local01, local02
171a0     08 1E 86 F1 | 	sub	local01, #8
171a4     0B 1E 66 F0 | 	shl	local01, #11
171a8     7F 00 00 FF 
171ac     00 25 06 F6 | 	mov	local04, ##65280
171b0     0F 25 82 F1 | 	sub	local04, local01
171b4     11 25 52 FC | 	wrword	local04, local03
171b8     01 20 06 F1 | 	add	local02, #1
171bc     18 20 16 F2 | 	cmp	local02, #24 wc
171c0     CC FF 9F CD |  if_b	jmp	#LR__1760
171c4                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
171c4     18 20 06 F6 | 	mov	local02, #24
171c8                 | LR__1761
171c8     10 23 02 F6 | 	mov	local03, local02
171cc     01 22 66 F0 | 	shl	local03, #1
171d0     F2 22 02 F1 | 	add	local03, objptr
171d4     40 00 80 FF 
171d8     11 01 58 FC | 	wrword	##32768, local03
171dc     01 20 06 F1 | 	add	local02, #1
171e0     81 20 16 F2 | 	cmp	local02, #129 wc
171e4     E0 FF 9F CD |  if_b	jmp	#LR__1761
171e8                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i 							' classic adsr
171e8     81 20 06 F6 | 	mov	local02, #129
171ec                 | LR__1762
171ec     10 23 02 F6 | 	mov	local03, local02
171f0     01 22 66 F0 | 	shl	local03, #1
171f4     F2 22 02 F1 | 	add	local03, objptr
171f8     FF 26 06 F6 | 	mov	local05, #255
171fc     10 27 82 F1 | 	sub	local05, local02
17200     08 26 66 F0 | 	shl	local05, #8
17204     11 27 52 FC | 	wrword	local05, local03
17208     01 20 06 F1 | 	add	local02, #1
1720c     00 21 16 F2 | 	cmp	local02, #256 wc
17210     D8 FF 9F CD |  if_b	jmp	#LR__1762
17214     33 00 00 FF 
17218     CC E4 85 F1 | 	sub	objptr, ##26316
1721c                 | ' for i=0 to 7
1721c     00 20 06 F6 | 	mov	local02, #0
17220                 | LR__1763
17220     10 23 02 F6 | 	mov	local03, local02
17224     02 22 66 F0 | 	shl	local03, #2
17228     10 23 02 F1 | 	add	local03, local02
1722c     02 22 66 F0 | 	shl	local03, #2
17230     34 00 00 FF 
17234     CC E4 05 F1 | 	add	objptr, ##26828
17238     F2 22 02 F1 | 	add	local03, objptr
1723c     11 21 42 FC | 	wrbyte	local02, local03
17240     10 23 02 F6 | 	mov	local03, local02
17244     02 22 66 F0 | 	shl	local03, #2
17248     10 23 02 F1 | 	add	local03, local02
1724c     02 22 66 F0 | 	shl	local03, #2
17250     F2 22 02 F1 | 	add	local03, objptr
17254     01 22 06 F1 | 	add	local03, #1
17258     11 21 42 FC | 	wrbyte	local02, local03
1725c     10 23 02 F6 | 	mov	local03, local02
17260     02 22 66 F0 | 	shl	local03, #2
17264     10 23 02 F1 | 	add	local03, local02
17268     02 22 66 F0 | 	shl	local03, #2
1726c     F2 22 02 F1 | 	add	local03, objptr
17270     02 22 06 F1 | 	add	local03, #2
17274     11 01 58 FC | 	wrword	#0, local03
17278     10 23 02 F6 | 	mov	local03, local02
1727c     02 22 66 F0 | 	shl	local03, #2
17280     10 23 02 F1 | 	add	local03, local02
17284     02 22 66 F0 | 	shl	local03, #2
17288     F2 22 02 F1 | 	add	local03, objptr
1728c     04 22 06 F1 | 	add	local03, #4
17290     00 C0 9F FF 
17294     11 01 68 FC | 	wrlong	##1065353216, local03
17298     10 23 02 F6 | 	mov	local03, local02
1729c     02 22 66 F0 | 	shl	local03, #2
172a0     10 23 02 F1 | 	add	local03, local02
172a4     02 22 66 F0 | 	shl	local03, #2
172a8     F2 22 02 F1 | 	add	local03, objptr
172ac     08 22 06 F1 | 	add	local03, #8
172b0     00 40 A0 FF 
172b4     11 01 68 FC | 	wrlong	##1082130432, local03
172b8     10 23 02 F6 | 	mov	local03, local02
172bc     02 22 66 F0 | 	shl	local03, #2
172c0     10 23 02 F1 | 	add	local03, local02
172c4     02 22 66 F0 | 	shl	local03, #2
172c8     F2 22 02 F1 | 	add	local03, objptr
172cc     0C 22 06 F1 | 	add	local03, #12
172d0     11 01 68 FC | 	wrlong	#0, local03
172d4     10 23 02 F6 | 	mov	local03, local02
172d8     02 22 66 F0 | 	shl	local03, #2
172dc     10 23 02 F1 | 	add	local03, local02
172e0     02 22 66 F0 | 	shl	local03, #2
172e4     F2 22 02 F1 | 	add	local03, objptr
172e8     10 22 06 F1 | 	add	local03, #16
172ec     11 FF 59 FC | 	wrword	#255, local03
172f0     10 23 02 F6 | 	mov	local03, local02
172f4     01 22 66 F0 | 	shl	local03, #1
172f8     46 00 00 FF 
172fc     2C E5 05 F1 | 	add	objptr, ##36140
17300     F2 22 02 F1 | 	add	local03, objptr
17304     11 FF 59 FC | 	wrword	#255, local03
17308     01 20 06 F1 | 	add	local02, #1
1730c     08 20 56 F2 | 	cmps	local02, #8 wc
17310     7A 00 00 FF 
17314     F8 E5 85 F1 | 	sub	objptr, ##62968
17318     04 FF 9F CD |  if_b	jmp	#LR__1763
1731c                 | LR__1764
1731c     A7 F0 03 F6 | 	mov	ptra, fp
17320     B2 00 A0 FD | 	call	#popregs_
17324                 | _init_audio_ret
17324     2D 00 64 FD | 	ret
17328                 | 
17328                 | ' 
17328                 | ' sub init_error_strings
17328                 | _init_error_strings
17328     54 01 00 FF 
1732c     71 00 06 F6 | 	mov	_var01, ##@LR__4743
17330     64 00 00 FF 
17334     E0 E5 05 F1 | 	add	objptr, ##51680
17338     F2 00 62 FC | 	wrlong	_var01, objptr
1733c     54 01 00 FF 
17340     72 00 06 F6 | 	mov	_var01, ##@LR__4744
17344     04 E4 05 F1 | 	add	objptr, #4
17348     F2 00 62 FC | 	wrlong	_var01, objptr
1734c     54 01 00 FF 
17350     97 00 06 F6 | 	mov	_var01, ##@LR__4745
17354     04 E4 05 F1 | 	add	objptr, #4
17358     F2 00 62 FC | 	wrlong	_var01, objptr
1735c     54 01 00 FF 
17360     B8 00 06 F6 | 	mov	_var01, ##@LR__4746
17364     04 E4 05 F1 | 	add	objptr, #4
17368     F2 00 62 FC | 	wrlong	_var01, objptr
1736c     54 01 00 FF 
17370     D2 00 06 F6 | 	mov	_var01, ##@LR__4747
17374     04 E4 05 F1 | 	add	objptr, #4
17378     F2 00 62 FC | 	wrlong	_var01, objptr
1737c     54 01 00 FF 
17380     EE 00 06 F6 | 	mov	_var01, ##@LR__4748
17384     04 E4 05 F1 | 	add	objptr, #4
17388     F2 00 62 FC | 	wrlong	_var01, objptr
1738c     54 01 00 FF 
17390     10 01 06 F6 | 	mov	_var01, ##@LR__4749
17394     04 E4 05 F1 | 	add	objptr, #4
17398     F2 00 62 FC | 	wrlong	_var01, objptr
1739c     54 01 00 FF 
173a0     3E 01 06 F6 | 	mov	_var01, ##@LR__4750
173a4     04 E4 05 F1 | 	add	objptr, #4
173a8     F2 00 62 FC | 	wrlong	_var01, objptr
173ac     54 01 00 FF 
173b0     69 01 06 F6 | 	mov	_var01, ##@LR__4751
173b4     04 E4 05 F1 | 	add	objptr, #4
173b8     F2 00 62 FC | 	wrlong	_var01, objptr
173bc     54 01 00 FF 
173c0     82 01 06 F6 | 	mov	_var01, ##@LR__4752
173c4     04 E4 05 F1 | 	add	objptr, #4
173c8     F2 00 62 FC | 	wrlong	_var01, objptr
173cc     54 01 00 FF 
173d0     A3 01 06 F6 | 	mov	_var01, ##@LR__4753
173d4     04 E4 05 F1 | 	add	objptr, #4
173d8     F2 00 62 FC | 	wrlong	_var01, objptr
173dc     54 01 00 FF 
173e0     BA 01 06 F6 | 	mov	_var01, ##@LR__4754
173e4     04 E4 05 F1 | 	add	objptr, #4
173e8     F2 00 62 FC | 	wrlong	_var01, objptr
173ec     54 01 00 FF 
173f0     D8 01 06 F6 | 	mov	_var01, ##@LR__4755
173f4     04 E4 05 F1 | 	add	objptr, #4
173f8     F2 00 62 FC | 	wrlong	_var01, objptr
173fc     54 01 00 FF 
17400     FC 01 06 F6 | 	mov	_var01, ##@LR__4756
17404     04 E4 05 F1 | 	add	objptr, #4
17408     F2 00 62 FC | 	wrlong	_var01, objptr
1740c     55 01 00 FF 
17410     23 00 06 F6 | 	mov	_var01, ##@LR__4757
17414     04 E4 05 F1 | 	add	objptr, #4
17418     F2 00 62 FC | 	wrlong	_var01, objptr
1741c     55 01 00 FF 
17420     3F 00 06 F6 | 	mov	_var01, ##@LR__4758
17424     04 E4 05 F1 | 	add	objptr, #4
17428     F2 00 62 FC | 	wrlong	_var01, objptr
1742c     55 01 00 FF 
17430     50 00 06 F6 | 	mov	_var01, ##@LR__4759
17434     04 E4 05 F1 | 	add	objptr, #4
17438     F2 00 62 FC | 	wrlong	_var01, objptr
1743c     55 01 00 FF 
17440     60 00 06 F6 | 	mov	_var01, ##@LR__4760
17444     04 E4 05 F1 | 	add	objptr, #4
17448     F2 00 62 FC | 	wrlong	_var01, objptr
1744c     55 01 00 FF 
17450     7B 00 06 F6 | 	mov	_var01, ##@LR__4761
17454     04 E4 05 F1 | 	add	objptr, #4
17458     F2 00 62 FC | 	wrlong	_var01, objptr
1745c     55 01 00 FF 
17460     8D 00 06 F6 | 	mov	_var01, ##@LR__4762
17464     04 E4 05 F1 | 	add	objptr, #4
17468     F2 00 62 FC | 	wrlong	_var01, objptr
1746c     55 01 00 FF 
17470     A5 00 06 F6 | 	mov	_var01, ##@LR__4763
17474     04 E4 05 F1 | 	add	objptr, #4
17478     F2 00 62 FC | 	wrlong	_var01, objptr
1747c     55 01 00 FF 
17480     B9 00 06 F6 | 	mov	_var01, ##@LR__4764
17484     04 E4 05 F1 | 	add	objptr, #4
17488     F2 00 62 FC | 	wrlong	_var01, objptr
1748c     55 01 00 FF 
17490     C9 00 06 F6 | 	mov	_var01, ##@LR__4765
17494     04 E4 05 F1 | 	add	objptr, #4
17498     F2 00 62 FC | 	wrlong	_var01, objptr
1749c     55 01 00 FF 
174a0     E6 00 06 F6 | 	mov	_var01, ##@LR__4766
174a4     04 E4 05 F1 | 	add	objptr, #4
174a8     F2 00 62 FC | 	wrlong	_var01, objptr
174ac     55 01 00 FF 
174b0     F7 00 06 F6 | 	mov	_var01, ##@LR__4767
174b4     04 E4 05 F1 | 	add	objptr, #4
174b8     F2 00 62 FC | 	wrlong	_var01, objptr
174bc     55 01 00 FF 
174c0     08 01 06 F6 | 	mov	_var01, ##@LR__4768
174c4     04 E4 05 F1 | 	add	objptr, #4
174c8     F2 00 62 FC | 	wrlong	_var01, objptr
174cc     55 01 00 FF 
174d0     33 01 06 F6 | 	mov	_var01, ##@LR__4769
174d4     04 E4 05 F1 | 	add	objptr, #4
174d8     F2 00 62 FC | 	wrlong	_var01, objptr
174dc     55 01 00 FF 
174e0     4F 01 06 F6 | 	mov	_var01, ##@LR__4770
174e4     04 E4 05 F1 | 	add	objptr, #4
174e8     F2 00 62 FC | 	wrlong	_var01, objptr
174ec     55 01 00 FF 
174f0     65 01 06 F6 | 	mov	_var01, ##@LR__4771
174f4     04 E4 05 F1 | 	add	objptr, #4
174f8     F2 00 62 FC | 	wrlong	_var01, objptr
174fc     55 01 00 FF 
17500     72 01 06 F6 | 	mov	_var01, ##@LR__4772
17504     04 E4 05 F1 | 	add	objptr, #4
17508     F2 00 62 FC | 	wrlong	_var01, objptr
1750c     55 01 00 FF 
17510     84 01 06 F6 | 	mov	_var01, ##@LR__4773
17514     04 E4 05 F1 | 	add	objptr, #4
17518     F2 00 62 FC | 	wrlong	_var01, objptr
1751c     55 01 00 FF 
17520     95 01 06 F6 | 	mov	_var01, ##@LR__4774
17524     04 E4 05 F1 | 	add	objptr, #4
17528     F2 00 62 FC | 	wrlong	_var01, objptr
1752c     55 01 00 FF 
17530     B1 01 06 F6 | 	mov	_var01, ##@LR__4775
17534     04 E4 05 F1 | 	add	objptr, #4
17538     F2 00 62 FC | 	wrlong	_var01, objptr
1753c     55 01 00 FF 
17540     C2 01 06 F6 | 	mov	_var01, ##@LR__4776
17544     04 E4 05 F1 | 	add	objptr, #4
17548     F2 00 62 FC | 	wrlong	_var01, objptr
1754c     55 01 00 FF 
17550     D1 01 06 F6 | 	mov	_var01, ##@LR__4777
17554     04 E4 05 F1 | 	add	objptr, #4
17558     F2 00 62 FC | 	wrlong	_var01, objptr
1755c     55 01 00 FF 
17560     EC 01 06 F6 | 	mov	_var01, ##@LR__4778
17564     04 E4 05 F1 | 	add	objptr, #4
17568     F2 00 62 FC | 	wrlong	_var01, objptr
1756c     56 01 00 FF 
17570     20 00 06 F6 | 	mov	_var01, ##@LR__4779
17574     04 E4 05 F1 | 	add	objptr, #4
17578     F2 00 62 FC | 	wrlong	_var01, objptr
1757c     56 01 00 FF 
17580     39 00 06 F6 | 	mov	_var01, ##@LR__4780
17584     04 E4 05 F1 | 	add	objptr, #4
17588     F2 00 62 FC | 	wrlong	_var01, objptr
1758c     56 01 00 FF 
17590     55 00 06 F6 | 	mov	_var01, ##@LR__4781
17594     04 E4 05 F1 | 	add	objptr, #4
17598     F2 00 62 FC | 	wrlong	_var01, objptr
1759c     56 01 00 FF 
175a0     73 00 06 F6 | 	mov	_var01, ##@LR__4782
175a4     04 E4 05 F1 | 	add	objptr, #4
175a8     F2 00 62 FC | 	wrlong	_var01, objptr
175ac     56 01 00 FF 
175b0     8C 00 06 F6 | 	mov	_var01, ##@LR__4783
175b4     04 E4 05 F1 | 	add	objptr, #4
175b8     F2 00 62 FC | 	wrlong	_var01, objptr
175bc     56 01 00 FF 
175c0     AB 00 06 F6 | 	mov	_var01, ##@LR__4784
175c4     04 E4 05 F1 | 	add	objptr, #4
175c8     F2 00 62 FC | 	wrlong	_var01, objptr
175cc     56 01 00 FF 
175d0     BA 00 06 F6 | 	mov	_var01, ##@LR__4785
175d4     04 E4 05 F1 | 	add	objptr, #4
175d8     F2 00 62 FC | 	wrlong	_var01, objptr
175dc     56 01 00 FF 
175e0     E8 00 06 F6 | 	mov	_var01, ##@LR__4786
175e4     04 E4 05 F1 | 	add	objptr, #4
175e8     F2 00 62 FC | 	wrlong	_var01, objptr
175ec     56 01 00 FF 
175f0     F6 00 06 F6 | 	mov	_var01, ##@LR__4787
175f4     04 E4 05 F1 | 	add	objptr, #4
175f8     F2 00 62 FC | 	wrlong	_var01, objptr
175fc     56 01 00 FF 
17600     0B 01 06 F6 | 	mov	_var01, ##@LR__4788
17604     04 E4 05 F1 | 	add	objptr, #4
17608     F2 00 62 FC | 	wrlong	_var01, objptr
1760c     56 01 00 FF 
17610     2F 01 06 F6 | 	mov	_var01, ##@LR__4789
17614     04 E4 05 F1 | 	add	objptr, #4
17618     F2 00 62 FC | 	wrlong	_var01, objptr
1761c     56 01 00 FF 
17620     46 01 06 F6 | 	mov	_var01, ##@LR__4790
17624     04 E4 05 F1 | 	add	objptr, #4
17628     F2 00 62 FC | 	wrlong	_var01, objptr
1762c     56 01 00 FF 
17630     59 01 06 F6 | 	mov	_var01, ##@LR__4791
17634     04 E4 05 F1 | 	add	objptr, #4
17638     F2 00 62 FC | 	wrlong	_var01, objptr
1763c     56 01 00 FF 
17640     70 01 06 F6 | 	mov	_var01, ##@LR__4792
17644     04 E4 05 F1 | 	add	objptr, #4
17648     F2 00 62 FC | 	wrlong	_var01, objptr
1764c     65 00 00 FF 
17650     A4 E4 85 F1 | 	sub	objptr, ##51876
17654                 | _init_error_strings_ret
17654     2D 00 64 FD | 	ret
17658                 | 
17658                 | '         
17658                 | ' sub printerror(err as integer)
17658                 | _printerror
17658     01 4A 05 F6 | 	mov	COUNT_, #1
1765c     A8 00 A0 FD | 	call	#pushregs_
17660     09 1F 02 F6 | 	mov	local01, arg01
17664     56 01 00 FF 
17668     89 13 06 F6 | 	mov	arg01, ##@LR__4793
1766c     58 25 B0 FD | 	call	#_hg010b_spin2_write
17670     0F 13 02 F6 | 	mov	arg01, local01
17674     50 27 B0 FD | 	call	#_hg010b_spin2_inttostr
17678     FD 12 02 F6 | 	mov	arg01, result1
1767c     48 25 B0 FD | 	call	#_hg010b_spin2_write
17680     56 01 00 FF 
17684     90 13 06 F6 | 	mov	arg01, ##@LR__4794
17688     3C 25 B0 FD | 	call	#_hg010b_spin2_write
1768c     02 1E 66 F0 | 	shl	local01, #2
17690     64 00 00 FF 
17694     E0 E5 05 F1 | 	add	objptr, ##51680
17698     F2 1E 02 F1 | 	add	local01, objptr
1769c     0F 13 02 FB | 	rdlong	arg01, local01
176a0     64 00 00 FF 
176a4     E0 E5 85 F1 | 	sub	objptr, ##51680
176a8                 | ' 
176a8                 | ' write(text)
176a8     1C 25 B0 FD | 	call	#_hg010b_spin2_write
176ac                 | ' crlf
176ac     78 26 B0 FD | 	call	#_hg010b_spin2_crlf
176b0     A7 F0 03 F6 | 	mov	ptra, fp
176b4     B2 00 A0 FD | 	call	#popregs_
176b8                 | _printerror_ret
176b8     2D 00 64 FD | 	ret
176bc                 | 
176bc                 | ' 
176bc                 | ' '' ------------------------------- Hardware start/stop/initialization 
176bc                 | ' 
176bc                 | ' sub startpsram
176bc                 | _startpsram
176bc     00 12 06 F6 | 	mov	arg01, #0
176c0     0A 14 C6 F9 | 	decod	arg02, #10
176c4     0B 16 06 F6 | 	mov	arg03, #11
176c8     07 18 06 F6 | 	mov	arg04, #7
176cc     0B 00 00 FF 
176d0     C0 E4 05 F1 | 	add	objptr, ##5824
176d4     FC 27 B0 FD | 	call	#_psram_spin2_startx
176d8     4B 00 00 FF 
176dc     AC E4 05 F1 | 	add	objptr, ##38572
176e0     F2 FA 61 FC | 	wrlong	result1, objptr
176e4                 | '     return $7FF00 + cog*12
176e4     0C E4 05 F1 | 	add	objptr, #12
176e8     FF 03 80 FF 
176ec     F2 00 6A FC | 	wrlong	##524032, objptr
176f0     56 00 00 FF 
176f4     78 E5 85 F1 | 	sub	objptr, ##44408
176f8                 | _startpsram_ret
176f8     2D 00 64 FD | 	ret
176fc                 | 
176fc                 | ' 
176fc                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
176fc                 | _startvideo
176fc     01 4A 05 F6 | 	mov	COUNT_, #1
17700     A8 00 A0 FD | 	call	#pushregs_
17704     56 00 00 FF 
17708     78 E5 05 F1 | 	add	objptr, ##44408
1770c     F2 18 02 FB | 	rdlong	arg04, objptr
17710     56 00 00 FF 
17714     78 E5 85 F1 | 	sub	objptr, ##44408
17718     0A 13 02 F6 | 	mov	arg01, arg02
1771c     0C 15 02 F6 | 	mov	arg02, arg04
17720     C4 0F B0 FD | 	call	#_hg010b_spin2_start
17724     56 00 00 FF 
17728     64 E5 05 F1 | 	add	objptr, ##44388
1772c     F2 FA 61 FC | 	wrlong	result1, objptr
17730                 | ' 
17730                 | ' videocog=v.start(pin,mbox)
17730                 | ' 
17730                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
17730     00 1E 06 F6 | 	mov	local01, #0
17734     4B 00 00 FF 
17738     A4 E4 85 F1 | 	sub	objptr, ##38564
1773c                 | LR__1770
1773c     0F 13 02 F6 | 	mov	arg01, local01
17740     00 28 00 FF 
17744     00 14 06 F6 | 	mov	arg02, ##5242880
17748     E0 2B B0 FD | 	call	#_psram_spin2_setQos
1774c     01 1E 06 F1 | 	add	local01, #1
17750     08 1E 56 F2 | 	cmps	local01, #8 wc
17754     E4 FF 9F CD |  if_b	jmp	#LR__1770
17758     4B 00 00 FF 
1775c     A4 E4 05 F1 | 	add	objptr, ##38564
17760     F2 12 02 FB | 	rdlong	arg01, objptr
17764     7A 00 02 FF 
17768     00 14 06 F6 | 	mov	arg02, ##67171328
1776c     4B 00 00 FF 
17770     A4 E4 85 F1 | 	sub	objptr, ##38564
17774     B4 2B B0 FD | 	call	#_psram_spin2_setQos
17778     0B 00 00 FF 
1777c     C0 E4 85 F1 | 	sub	objptr, ##5824
17780                 | ' psram.setQoS(videocog, $0400f400) 
17780                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
17780     F2 14 02 F6 | 	mov	arg02, objptr
17784     00 58 03 FF 
17788     00 14 46 F5 | 	or	arg02, ##112197632
1778c     00 16 06 F6 | 	mov	arg03, #0
17790     00 18 06 F6 | 	mov	arg04, #0
17794     00 12 06 F6 | 	mov	arg01, #0
17798     74 3F B0 FD | 	call	#__system___basic_open
1779c                 | ' return videocog
1779c     56 00 00 FF 
177a0     64 E5 05 F1 | 	add	objptr, ##44388
177a4     F2 FA 01 FB | 	rdlong	result1, objptr
177a8     56 00 00 FF 
177ac     64 E5 85 F1 | 	sub	objptr, ##44388
177b0     A7 F0 03 F6 | 	mov	ptra, fp
177b4     B2 00 A0 FD | 	call	#popregs_
177b8                 | _startvideo_ret
177b8     2D 00 64 FD | 	ret
177bc                 | 
177bc                 | ' 
177bc                 | ' function pspeek(adr as ulong) as ubyte
177bc                 | _pspeek
177bc     00 4A 05 F6 | 	mov	COUNT_, #0
177c0     A8 00 A0 FD | 	call	#pushregs_
177c4     0C F0 07 F1 | 	add	ptra, #12
177c8     04 4E 05 F1 | 	add	fp, #4
177cc     A7 12 62 FC | 	wrlong	arg01, fp
177d0     04 4E 05 F1 | 	add	fp, #4
177d4     A7 12 02 F6 | 	mov	arg01, fp
177d8     04 4E 85 F1 | 	sub	fp, #4
177dc     A7 14 02 FB | 	rdlong	arg02, fp
177e0     04 4E 85 F1 | 	sub	fp, #4
177e4     01 16 06 F6 | 	mov	arg03, #1
177e8     0B 00 00 FF 
177ec     C0 E4 05 F1 | 	add	objptr, ##5824
177f0     0C 29 B0 FD | 	call	#_psram_spin2_read1
177f4     0B 00 00 FF 
177f8     C0 E4 85 F1 | 	sub	objptr, ##5824
177fc                 | ' psram.read1(varptr(res),adr,1)
177fc                 | ' return res
177fc     08 4E 05 F1 | 	add	fp, #8
17800     A7 FA C1 FA | 	rdbyte	result1, fp
17804     08 4E 85 F1 | 	sub	fp, #8
17808     A7 F0 03 F6 | 	mov	ptra, fp
1780c     B2 00 A0 FD | 	call	#popregs_
17810                 | _pspeek_ret
17810     2D 00 64 FD | 	ret
17814                 | 
17814                 | ' 
17814                 | ' function pslpeek(adr as ulong) as ulong
17814                 | _pslpeek
17814     00 4A 05 F6 | 	mov	COUNT_, #0
17818     A8 00 A0 FD | 	call	#pushregs_
1781c     0C F0 07 F1 | 	add	ptra, #12
17820     04 4E 05 F1 | 	add	fp, #4
17824     A7 12 62 FC | 	wrlong	arg01, fp
17828     04 4E 05 F1 | 	add	fp, #4
1782c     A7 12 02 F6 | 	mov	arg01, fp
17830     04 4E 85 F1 | 	sub	fp, #4
17834     A7 14 02 FB | 	rdlong	arg02, fp
17838     04 4E 85 F1 | 	sub	fp, #4
1783c     04 16 06 F6 | 	mov	arg03, #4
17840     0B 00 00 FF 
17844     C0 E4 05 F1 | 	add	objptr, ##5824
17848     B4 28 B0 FD | 	call	#_psram_spin2_read1
1784c     0B 00 00 FF 
17850     C0 E4 85 F1 | 	sub	objptr, ##5824
17854                 | ' psram.read1(varptr(res),adr,4)
17854                 | ' return res
17854     08 4E 05 F1 | 	add	fp, #8
17858     A7 FA 01 FB | 	rdlong	result1, fp
1785c     08 4E 85 F1 | 	sub	fp, #8
17860     A7 F0 03 F6 | 	mov	ptra, fp
17864     B2 00 A0 FD | 	call	#popregs_
17868                 | _pslpeek_ret
17868     2D 00 64 FD | 	ret
1786c                 | 
1786c                 | ' 
1786c                 | ' function psdpeek(adr as ulong) as ulong
1786c                 | _psdpeek
1786c     00 4A 05 F6 | 	mov	COUNT_, #0
17870     A8 00 A0 FD | 	call	#pushregs_
17874     0C F0 07 F1 | 	add	ptra, #12
17878     04 4E 05 F1 | 	add	fp, #4
1787c     A7 12 62 FC | 	wrlong	arg01, fp
17880     04 4E 05 F1 | 	add	fp, #4
17884     A7 12 02 F6 | 	mov	arg01, fp
17888     04 4E 85 F1 | 	sub	fp, #4
1788c     A7 14 02 FB | 	rdlong	arg02, fp
17890     04 4E 85 F1 | 	sub	fp, #4
17894     02 16 06 F6 | 	mov	arg03, #2
17898     0B 00 00 FF 
1789c     C0 E4 05 F1 | 	add	objptr, ##5824
178a0     5C 28 B0 FD | 	call	#_psram_spin2_read1
178a4     0B 00 00 FF 
178a8     C0 E4 85 F1 | 	sub	objptr, ##5824
178ac                 | ' psram.read1(varptr(res),adr,2)
178ac                 | ' return res
178ac     08 4E 05 F1 | 	add	fp, #8
178b0     A7 FA E1 FA | 	rdword	result1, fp
178b4     08 4E 85 F1 | 	sub	fp, #8
178b8     A7 F0 03 F6 | 	mov	ptra, fp
178bc     B2 00 A0 FD | 	call	#popregs_
178c0                 | _psdpeek_ret
178c0     2D 00 64 FD | 	ret
178c4                 | 
178c4                 | ' 
178c4                 | ' '' ------------------------------- USB keyboard scan to char translator
178c4                 | ' 
178c4                 | ' function scantochar(key)
178c4                 | _scantochar
178c4                 | ' 
178c4                 | ' select case (key shr 8) and 255
178c4     09 01 02 F6 | 	mov	_var01, arg01
178c8     08 00 C6 F0 | 	sar	_var01, #8
178cc     FF 00 0E F5 | 	and	_var01, #255 wz
178d0     24 00 90 AD |  if_e	jmp	#LR__1780
178d4     02 00 0E F2 | 	cmp	_var01, #2 wz
178d8     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
178dc     30 00 90 AD |  if_e	jmp	#LR__1781
178e0     40 00 0E F2 | 	cmp	_var01, #64 wz
178e4     44 00 90 AD |  if_e	jmp	#LR__1782
178e8     42 00 0E F2 | 	cmp	_var01, #66 wz
178ec     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
178f0     70 00 90 5D |  if_ne	jmp	#LR__1784
178f4     50 00 90 FD | 	jmp	#LR__1783
178f8                 | LR__1780
178f8     09 FB 01 F6 | 	mov	result1, arg01
178fc     7F FA 05 F5 | 	and	result1, #127
17900     02 FA 65 F0 | 	shl	result1, #2
17904     F5 FA 01 F1 | 	add	result1, ptr__dat__
17908     FD FA C1 FA | 	rdbyte	result1, result1
1790c     54 00 90 FD | 	jmp	#_scantochar_ret
17910                 | LR__1781
17910     09 FB 01 F6 | 	mov	result1, arg01
17914     7F FA 05 F5 | 	and	result1, #127
17918     02 FA 65 F0 | 	shl	result1, #2
1791c     01 FA 05 F1 | 	add	result1, #1
17920     F5 FA 01 F1 | 	add	result1, ptr__dat__
17924     FD FA C1 FA | 	rdbyte	result1, result1
17928     38 00 90 FD | 	jmp	#_scantochar_ret
1792c                 | LR__1782
1792c     09 FB 01 F6 | 	mov	result1, arg01
17930     7F FA 05 F5 | 	and	result1, #127
17934     02 FA 65 F0 | 	shl	result1, #2
17938     02 FA 05 F1 | 	add	result1, #2
1793c     F5 FA 01 F1 | 	add	result1, ptr__dat__
17940     FD FA C1 FA | 	rdbyte	result1, result1
17944     1C 00 90 FD | 	jmp	#_scantochar_ret
17948                 | LR__1783
17948     09 FB 01 F6 | 	mov	result1, arg01
1794c     7F FA 05 F5 | 	and	result1, #127
17950     02 FA 65 F0 | 	shl	result1, #2
17954     03 FA 05 F1 | 	add	result1, #3
17958     F5 FA 01 F1 | 	add	result1, ptr__dat__
1795c     FD FA C1 FA | 	rdbyte	result1, result1
17960     00 00 90 FD | 	jmp	#_scantochar_ret
17964                 | LR__1784
17964                 | _scantochar_ret
17964     2D 00 64 FD | 	ret
17968                 | 
17968                 | _program
17968     0B 4A 05 F6 | 	mov	COUNT_, #11
1796c     A8 00 A0 FD | 	call	#pushregs_
17970     48 FD BF FD | 	call	#_startpsram
17974     40 12 06 F6 | 	mov	arg01, #64
17978     00 14 06 F6 | 	mov	arg02, #0
1797c     00 16 06 F6 | 	mov	arg03, #0
17980     78 FD BF FD | 	call	#_startvideo
17984     00 12 06 F6 | 	mov	arg01, #0
17988     00 14 06 F6 | 	mov	arg02, #0
1798c     00 16 06 F6 | 	mov	arg03, #0
17990     0B 00 00 FF 
17994     C0 E4 05 F1 | 	add	objptr, ##5824
17998     A4 2C B0 FD | 	call	#_audio096_spin2_start
1799c     FE 1C 02 F6 | 	mov	arg06, result2
179a0     4B 00 00 FF 
179a4     A0 E4 05 F1 | 	add	objptr, ##38560
179a8     F2 FA 61 FC | 	wrlong	result1, objptr
179ac     14 E4 05 F1 | 	add	objptr, #20
179b0     F2 1C 62 FC | 	wrlong	arg06, objptr
179b4     56 00 00 FF 
179b8     74 E5 85 F1 | 	sub	objptr, ##44404
179bc     32 12 06 F6 | 	mov	arg01, #50
179c0     98 35 B0 FD | 	call	#__system___waitms
179c4     56 00 00 FF 
179c8     74 E5 05 F1 | 	add	objptr, ##44404
179cc     F2 12 02 FB | 	rdlong	arg01, objptr
179d0     56 00 00 FF 
179d4     74 E5 85 F1 | 	sub	objptr, ##44404
179d8     14 12 06 F1 | 	add	arg01, #20
179dc     20 00 80 FF 
179e0     09 01 58 FC | 	wrword	##16384, arg01
179e4     4C 2A B0 FD | 	call	#_usbnew_spin2_start
179e8     56 00 00 FF 
179ec     68 E5 05 F1 | 	add	objptr, ##44392
179f0     F2 FA 61 FC | 	wrlong	result1, objptr
179f4                 | '   mouse_limits[0] := xlim
179f4     0F 00 00 FF 
179f8     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
179fc     01 00 80 FF 
17a00     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
17a04                 | '   mouse_limits[1] := ylim
17a04     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
17a08     01 00 80 FF 
17a0c     FB 7E 68 FC | 	wrlong	##575, ptr__usbnew_spin2_dat__
17a10     56 00 00 FF 
17a14     5B E4 85 F1 | 	sub	objptr, ##44123
17a18     F2 12 02 F6 | 	mov	arg01, objptr
17a1c     0D E5 85 F1 | 	sub	objptr, #269
17a20     C4 12 06 F1 | 	add	arg01, #196
17a24                 | '   mouse_outptr := ptr
17a24     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
17a28     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
17a2c     0F 00 00 FF 
17a30     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
17a34     0E 00 00 FF 
17a38     B6 EA 05 F1 | 	add	ptr__dat__, ##7350
17a3c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
17a40     0E 00 00 FF 
17a44     B6 EA 85 F1 | 	sub	ptr__dat__, ##7350
17a48     10 12 06 F6 | 	mov	arg01, #16
17a4c     90 11 B0 FD | 	call	#_hg010b_spin2_setspriteptr
17a50     10 12 06 F6 | 	mov	arg01, #16
17a54     20 14 06 F6 | 	mov	arg02, #32
17a58     20 16 06 F6 | 	mov	arg03, #32
17a5c     F4 11 B0 FD | 	call	#_hg010b_spin2_setspritesize
17a60     09 12 C6 F9 | 	decod	arg01, #9
17a64     20 15 06 F6 | 	mov	arg02, #288
17a68     84 2A B0 FD | 	call	#_usbnew_spin2_mouse_move
17a6c     F2 1C 02 F6 | 	mov	arg06, objptr
17a70     79 00 00 FF 
17a74     4C E5 05 F1 | 	add	objptr, ##62284
17a78     F2 1A 02 F6 | 	mov	arg05, objptr
17a7c     0D 1D 62 FC | 	wrlong	arg06, arg05
17a80     04 1A 06 F1 | 	add	arg05, #4
17a84     0D F1 61 FC | 	wrlong	ptr__housekeeper_, arg05
17a88     EF 14 02 F6 | 	mov	arg02, entryptr__
17a8c     F2 1E 02 F6 | 	mov	local01, objptr
17a90     1E FA 05 F6 | 	mov	result1, #30
17a94     28 1E 62 FD | 	setq	local01
17a98     0A FB F1 FC | 	coginit	result1, arg02 wc
17a9c     01 FA 65 C6 |  if_b	neg	result1, #1
17aa0     04 E4 85 F1 | 	sub	objptr, #4
17aa4     F2 FA 61 FC | 	wrlong	result1, objptr
17aa8     01 00 00 FF 
17aac     90 E4 05 F1 | 	add	objptr, ##656
17ab0     F2 00 68 FC | 	wrlong	#0, objptr
17ab4     24 00 00 FF 
17ab8     40 E4 85 F1 | 	sub	objptr, ##18496
17abc     F2 04 68 FC | 	wrlong	#2, objptr
17ac0     04 E4 05 F1 | 	add	objptr, #4
17ac4     F2 26 69 FC | 	wrlong	#147, objptr
17ac8     04 E4 05 F1 | 	add	objptr, #4
17acc     F2 34 69 FC | 	wrlong	#154, objptr
17ad0     04 E4 05 F1 | 	add	objptr, #4
17ad4     F2 08 68 FC | 	wrlong	#4, objptr
17ad8     04 E4 85 F1 | 	sub	objptr, #4
17adc     F2 1C 02 FB | 	rdlong	arg06, objptr
17ae0     14 E4 85 F1 | 	sub	objptr, #20
17ae4     F2 1C 62 FC | 	wrlong	arg06, objptr
17ae8     04 E4 05 F1 | 	add	objptr, #4
17aec     F2 00 68 FC | 	wrlong	#0, objptr
17af0     04 E4 05 F1 | 	add	objptr, #4
17af4     F2 00 68 FC | 	wrlong	#0, objptr
17af8     22 00 00 FF 
17afc     B0 E5 05 F1 | 	add	objptr, ##17840
17b00     F2 02 68 FC | 	wrlong	#1, objptr
17b04     01 00 00 FF 
17b08     9C E4 05 F1 | 	add	objptr, ##668
17b0c     F2 00 68 FC | 	wrlong	#0, objptr
17b10     01 00 00 FF 
17b14     00 EA 05 F1 | 	add	ptr__dat__, ##512
17b18     08 E4 05 F1 | 	add	objptr, #8
17b1c     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
17b20     04 E4 85 F1 | 	sub	objptr, #4
17b24     03 00 80 FF 
17b28     F2 3C 69 FC | 	wrlong	##1694, objptr
17b2c     16 00 00 FF 
17b30     1C E4 85 F1 | 	sub	objptr, ##11292
17b34     F2 18 68 FC | 	wrlong	#12, objptr
17b38     64 00 00 FF 
17b3c     C8 E5 85 F1 | 	sub	objptr, ##51656
17b40     01 00 00 FF 
17b44     00 EA 85 F1 | 	sub	ptr__dat__, ##512
17b48     94 E2 BF FD | 	call	#_init_commands
17b4c     D8 F7 BF FD | 	call	#_init_error_strings
17b50     A4 F0 BF FD | 	call	#_init_audio
17b54     24 59 BF FD | 	call	#_do_new
17b58     56 00 00 FF 
17b5c     A0 E5 05 F1 | 	add	objptr, ##44448
17b60     F2 12 02 FB | 	rdlong	arg01, objptr
17b64     04 E4 85 F1 | 	sub	objptr, #4
17b68     F2 14 02 FB | 	rdlong	arg02, objptr
17b6c     56 00 00 FF 
17b70     9C E5 85 F1 | 	sub	objptr, ##44444
17b74     94 1D B0 FD | 	call	#_hg010b_spin2_cls
17b78     56 00 00 FF 
17b7c     A4 E5 05 F1 | 	add	objptr, ##44452
17b80     F2 12 02 FB | 	rdlong	arg01, objptr
17b84     56 00 00 FF 
17b88     A4 E5 85 F1 | 	sub	objptr, ##44452
17b8c     94 1C B0 FD | 	call	#_hg010b_spin2_setfontfamily
17b90                 | ' 
17b90                 | ' leading_spaces:=amount
17b90     01 00 00 FF 
17b94     B2 E4 05 F1 | 	add	objptr, ##690
17b98     F2 04 68 FC | 	wrlong	#2, objptr
17b9c     01 00 00 FF 
17ba0     B2 E4 85 F1 | 	sub	objptr, ##690
17ba4     56 01 00 FF 
17ba8     93 21 06 F6 | 	mov	local02, ##@LR__4795
17bac     3D 12 06 F6 | 	mov	arg01, #61
17bb0     3C 14 06 F6 | 	mov	arg02, #60
17bb4     3B 16 06 F6 | 	mov	arg03, #59
17bb8     3A 18 06 F6 | 	mov	arg04, #58
17bbc     78 7A B0 FD | 	call	#__system___vfs_open_sdcardx
17bc0     FD 14 02 F6 | 	mov	arg02, result1
17bc4     10 13 02 F6 | 	mov	arg01, local02
17bc8     68 34 B0 FD | 	call	#__system___mount
17bcc     56 01 00 FF 
17bd0     97 13 06 F6 | 	mov	arg01, ##@LR__4796
17bd4     1C 37 B0 FD | 	call	#__system___chdir
17bd8     56 01 00 FF 
17bdc     9F 21 06 F6 | 	mov	local02, ##@LR__4797
17be0     71 00 00 FF 
17be4     F8 E5 05 F1 | 	add	objptr, ##58360
17be8     F2 20 62 FC | 	wrlong	local02, objptr
17bec     1B 00 00 FF 
17bf0     60 E4 85 F1 | 	sub	objptr, ##13920
17bf4     F2 12 02 FB | 	rdlong	arg01, objptr
17bf8     56 00 00 FF 
17bfc     98 E5 85 F1 | 	sub	objptr, ##44440
17c00     01 12 66 F0 | 	shl	arg01, #1
17c04     01 14 06 F6 | 	mov	arg02, #1
17c08     58 1C B0 FD | 	call	#_hg010b_spin2_setcursorpos
17c0c                 | ' 
17c0c                 | ' init_commands
17c0c                 | ' init_error_strings
17c0c                 | ' init_audio
17c0c                 | ' do_new
17c0c                 | ' 
17c0c                 | ' 
17c0c                 | ' cls(ink, paper)
17c0c                 | ' v.setfontfamily(font) 				' use ST Mono font
17c0c                 | ' v.setleadingspaces(2)
17c0c                 | ' mount "/sd", _vfs_open_sdcard()
17c0c                 | ' chdir "/sd/bas"
17c0c                 | ' 
17c0c                 | ' currentdir$="/sd/bas"
17c0c                 | ' 
17c0c                 | ' position 2*editor_spaces,1 : print ver$
17c0c     00 12 06 F6 | 	mov	arg01, #0
17c10     88 89 B0 FD | 	call	#__system___getiolock_0442
17c14     FD 12 02 F6 | 	mov	arg01, result1
17c18     4C 30 B0 FD | 	call	#__system___lockmem
17c1c     18 00 00 FF 
17c20     4C EB 05 F1 | 	add	ptr__dat__, ##12620
17c24     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
17c28     18 00 00 FF 
17c2c     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
17c30     00 12 06 F6 | 	mov	arg01, #0
17c34     00 16 06 F6 | 	mov	arg03, #0
17c38     34 3D B0 FD | 	call	#__system___basic_print_string
17c3c     00 12 06 F6 | 	mov	arg01, #0
17c40     0A 14 06 F6 | 	mov	arg02, #10
17c44     00 16 06 F6 | 	mov	arg03, #0
17c48     CC 3C B0 FD | 	call	#__system___basic_print_char
17c4c     00 12 06 F6 | 	mov	arg01, #0
17c50     48 89 B0 FD | 	call	#__system___getiolock_0442
17c54     FD 00 68 FC | 	wrlong	#0, result1
17c58     F2 12 02 FB | 	rdlong	arg01, objptr
17c5c     00 14 06 F6 | 	mov	arg02, #0
17c60     0A 16 06 F6 | 	mov	arg03, #10
17c64     40 52 B0 FD | 	call	#__system__Number_S
17c68     FD 12 02 F6 | 	mov	arg01, result1
17c6c     56 01 00 FF 
17c70     A7 15 06 F6 | 	mov	arg02, ##@LR__4798
17c74     4C 30 B0 FD | 	call	#__system___string_concat
17c78     FD 20 02 F6 | 	mov	local02, result1
17c7c     79 00 00 FF 
17c80     40 E5 05 F1 | 	add	objptr, ##62272
17c84     F2 20 62 FC | 	wrlong	local02, objptr
17c88     79 00 00 FF 
17c8c     40 E5 85 F1 | 	sub	objptr, ##62272
17c90                 | ' free$=decuns$(v.buf_ptr)+" BASIC bytes free" : print free$
17c90     00 12 06 F6 | 	mov	arg01, #0
17c94     04 89 B0 FD | 	call	#__system___getiolock_0442
17c98     FD 12 02 F6 | 	mov	arg01, result1
17c9c     C8 2F B0 FD | 	call	#__system___lockmem
17ca0     79 00 00 FF 
17ca4     40 E5 05 F1 | 	add	objptr, ##62272
17ca8     F2 14 02 FB | 	rdlong	arg02, objptr
17cac     79 00 00 FF 
17cb0     40 E5 85 F1 | 	sub	objptr, ##62272
17cb4     00 12 06 F6 | 	mov	arg01, #0
17cb8     00 16 06 F6 | 	mov	arg03, #0
17cbc     B0 3C B0 FD | 	call	#__system___basic_print_string
17cc0     00 12 06 F6 | 	mov	arg01, #0
17cc4     0A 14 06 F6 | 	mov	arg02, #10
17cc8     00 16 06 F6 | 	mov	arg03, #0
17ccc     48 3C B0 FD | 	call	#__system___basic_print_char
17cd0     00 12 06 F6 | 	mov	arg01, #0
17cd4     C4 88 B0 FD | 	call	#__system___getiolock_0442
17cd8     FD 00 68 FC | 	wrlong	#0, result1
17cdc     56 00 00 FF 
17ce0     98 E5 05 F1 | 	add	objptr, ##44440
17ce4     F2 12 02 FB | 	rdlong	arg01, objptr
17ce8     56 00 00 FF 
17cec     98 E5 85 F1 | 	sub	objptr, ##44440
17cf0     01 12 66 F0 | 	shl	arg01, #1
17cf4     04 14 06 F6 | 	mov	arg02, #4
17cf8     68 1B B0 FD | 	call	#_hg010b_spin2_setcursorpos
17cfc                 | ' position 2*editor_spaces,4 : print "Ready"
17cfc     00 12 06 F6 | 	mov	arg01, #0
17d00     98 88 B0 FD | 	call	#__system___getiolock_0442
17d04     FD 12 02 F6 | 	mov	arg01, result1
17d08     5C 2F B0 FD | 	call	#__system___lockmem
17d0c     56 01 00 FF 
17d10     B9 15 06 F6 | 	mov	arg02, ##@LR__4799
17d14     00 12 06 F6 | 	mov	arg01, #0
17d18     00 16 06 F6 | 	mov	arg03, #0
17d1c     50 3C B0 FD | 	call	#__system___basic_print_string
17d20     FD 22 02 F6 | 	mov	local03, result1
17d24     00 12 06 F6 | 	mov	arg01, #0
17d28     0A 14 06 F6 | 	mov	arg02, #10
17d2c     00 16 06 F6 | 	mov	arg03, #0
17d30     E4 3B B0 FD | 	call	#__system___basic_print_char
17d34     01 24 06 F6 | 	mov	local04, #1
17d38     00 12 06 F6 | 	mov	arg01, #0
17d3c     5C 88 B0 FD | 	call	#__system___getiolock_0442
17d40     FD 00 68 FC | 	wrlong	#0, result1
17d44     00 26 06 F6 | 	mov	local05, #0
17d48     00 14 06 F6 | 	mov	arg02, #0
17d4c     01 14 D6 F7 | 	test	arg02, #1 wc
17d50     5A 4C 64 FD | 	drvc	#38
17d54     01 14 D6 F7 | 	test	arg02, #1 wc
17d58     5A 4E 64 FD | 	drvc	#39
17d5c                 | ' 'hubset( %1_000001__00_0001_1010__1111_1011)
17d5c                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
17d5c                 | ' 
17d5c                 | ' 'paula.play(0,@samplebuf(0,0),88200,16484,0,2048)
17d5c                 | ' 
17d5c                 | ' 'base2:=@channel1[0]+64*channel
17d5c                 | ' 'long[base2+8]:=sample+$C0000000 
17d5c                 | ' 'long[base2+12]:= len
17d5c                 | ' 'if loop >=0 
17d5c                 | ' '  long[base2+16]:= loop
17d5c                 | ' 'else
17d5c                 | ' '  long[base2+16]:= len+2
17d5c                 | ' 'word[base2+20]:=vol
17d5c                 | ' 'word[base2+24]:= 3546911/splfreq 
17d5c                 | ' 'word[base2+26]:=256 ' todo: use skip to make accurate sample rate
17d5c                 | ' 'long[base2+28]:=$40000000
17d5c                 | ' 
17d5c                 | ' 'lpoke base+8,varptr(samplebuf(0,0))+$C000_0000 
17d5c                 | ' 'lpoke base+16,2048
17d5c                 | ' 'lpoke base+12,0
17d5c                 | ' 'dpoke base+20,16383
17d5c                 | ' 'dpoke base+22,8192
17d5c                 | ' 'dpoke base+24,60
17d5c                 | ' 'dpoke base+26,256 ' todo: use skip to make accurate sample rate
17d5c                 | ' 'dpoke base+28,$4000_0000
17d5c                 | ' 'lpoke base+32,0 
17d5c                 | ' 'lpoke base+36, 0
17d5c                 | ' 'lpoke base+40,25600' speed
17d5c                 | ' 'lpoke base+44,1023 'len
17d5c                 | ' 
17d5c                 | ' 'do: position 0,0 : print lpeek(base+32): loop 
17d5c                 | ' 
17d5c                 | ' '-------------------------------------------------------------------------------------------------------- 
17d5c                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
17d5c                 | ' '--------------------------------------------------------------------------------------------------------
17d5c                 | ' 
17d5c                 | ' do
17d5c                 | LR__1790
17d5c     01 12 06 F6 | 	mov	arg01, #1
17d60     38 1B B0 FD | 	call	#_hg010b_spin2_waitvbl
17d64     06 12 06 F6 | 	mov	arg01, #6
17d68     0B 00 00 FF 
17d6c     C0 E4 05 F1 | 	add	objptr, ##5824
17d70     F4 2B B0 FD | 	call	#_audio096_spin2_stop
17d74     0B 00 00 FF 
17d78     C0 E4 85 F1 | 	sub	objptr, ##5824
17d7c     10 27 B0 FD | 	call	#_usbnew_spin2_get_key
17d80     64 00 00 FF 
17d84     D8 E5 05 F1 | 	add	objptr, ##51672
17d88     F2 FA 61 FC | 	wrlong	result1, objptr
17d8c                 | '   return hkbd_led_rep
17d8c     13 00 00 FF 
17d90     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
17d94     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
17d98     13 00 00 FF 
17d9c     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
17da0     16 00 00 FF 
17da4     30 E4 05 F1 | 	add	objptr, ##11312
17da8     F2 FA 61 FC | 	wrlong	result1, objptr
17dac                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
17dac     16 00 00 FF 
17db0     30 E4 85 F1 | 	sub	objptr, ##11312
17db4     F2 20 02 FB | 	rdlong	local02, objptr
17db8     64 00 00 FF 
17dbc     D8 E5 85 F1 | 	sub	objptr, ##51672
17dc0     01 20 16 F2 | 	cmp	local02, #1 wc
17dc4     BC 00 90 CD |  if_b	jmp	#LR__1791
17dc8     64 00 00 FF 
17dcc     D8 E5 05 F1 | 	add	objptr, ##51672
17dd0     F2 24 02 FB | 	rdlong	local04, objptr
17dd4     64 00 00 FF 
17dd8     D8 E5 85 F1 | 	sub	objptr, ##51672
17ddc     12 23 02 F6 | 	mov	local03, local04
17de0     04 22 16 F2 | 	cmp	local03, #4 wc
17de4     9C 00 90 3D |  if_ae	jmp	#LR__1791
17de8     79 00 00 FF 
17dec     44 E5 05 F1 | 	add	objptr, ##62276
17df0     F2 1E 02 FB | 	rdlong	local01, objptr
17df4     79 00 00 FF 
17df8     44 E5 85 F1 | 	sub	objptr, ##62276
17dfc     0F 27 02 F6 | 	mov	local05, local01
17e00     01 26 0E F2 | 	cmp	local05, #1 wz
17e04     7C 00 90 5D |  if_ne	jmp	#LR__1791
17e08     04 00 00 FF 
17e0c     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
17e10     F5 14 02 F6 | 	mov	arg02, ptr__dat__
17e14     04 00 00 FF 
17e18     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
17e1c     56 00 00 FF 
17e20     44 22 06 F6 | 	mov	local03, ##44100
17e24     0C 24 C6 F9 | 	decod	local04, #12
17e28     00 26 06 F6 | 	mov	local05, #0
17e2c     03 00 00 FF 
17e30     DE 1E 06 F6 | 	mov	local01, ##1758
17e34     07 12 06 F6 | 	mov	arg01, #7
17e38     56 00 00 FF 
17e3c     44 16 06 F6 | 	mov	arg03, ##44100
17e40     0C 18 C6 F9 | 	decod	arg04, #12
17e44     00 1A 06 F6 | 	mov	arg05, #0
17e48     03 00 00 FF 
17e4c     DE 1C 06 F6 | 	mov	arg06, ##1758
17e50     0B 00 00 FF 
17e54     C0 E4 05 F1 | 	add	objptr, ##5824
17e58     BC 29 B0 FD | 	call	#_audio096_spin2_play
17e5c     0B 00 00 FF 
17e60     C0 E4 85 F1 | 	sub	objptr, ##5824
17e64     0A 12 06 F6 | 	mov	arg01, #10
17e68     F0 30 B0 FD | 	call	#__system___waitms
17e6c     07 12 06 F6 | 	mov	arg01, #7
17e70     0B 00 00 FF 
17e74     C0 E4 05 F1 | 	add	objptr, ##5824
17e78     EC 2A B0 FD | 	call	#_audio096_spin2_stop
17e7c     0B 00 00 FF 
17e80     C0 E4 85 F1 | 	sub	objptr, ##5824
17e84                 | LR__1791
17e84                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then let key2=key : let rpt=1 : let key3=key2
17e84     64 00 00 FF 
17e88     D8 E5 05 F1 | 	add	objptr, ##51672
17e8c     F2 20 02 FB | 	rdlong	local02, objptr
17e90     64 00 00 FF 
17e94     D8 E5 85 F1 | 	sub	objptr, ##51672
17e98     04 20 16 F2 | 	cmp	local02, #4 wc
17e9c     80 00 90 CD |  if_b	jmp	#LR__1792
17ea0     64 00 00 FF 
17ea4     D8 E5 05 F1 | 	add	objptr, ##51672
17ea8     F2 24 02 FB | 	rdlong	local04, objptr
17eac     64 00 00 FF 
17eb0     D8 E5 85 F1 | 	sub	objptr, ##51672
17eb4     12 23 02 F6 | 	mov	local03, local04
17eb8     00 00 40 FF 
17ebc     00 22 16 F2 | 	cmp	local03, ##-2147483648 wc
17ec0     64 00 00 CF 
17ec4     D8 E5 05 C1 |  if_b	add	objptr, ##51672
17ec8     F2 1E 02 CB |  if_b	rdlong	local01, objptr
17ecc     64 00 00 CF 
17ed0     D8 E5 85 C1 |  if_b	sub	objptr, ##51672
17ed4     0F 27 E2 C8 |  if_b	getbyte	local05, local01, #0
17ed8     E0 26 16 C2 |  if_b	cmp	local05, #224 wc
17edc     40 00 90 3D |  if_ae	jmp	#LR__1792
17ee0     64 00 00 FF 
17ee4     D8 E5 05 F1 | 	add	objptr, ##51672
17ee8     F2 20 02 FB | 	rdlong	local02, objptr
17eec     04 E4 05 F1 | 	add	objptr, #4
17ef0     F2 20 62 FC | 	wrlong	local02, objptr
17ef4     16 00 00 FF 
17ef8     30 E4 05 F1 | 	add	objptr, ##11312
17efc     F2 02 68 FC | 	wrlong	#1, objptr
17f00     16 00 00 FF 
17f04     30 E4 85 F1 | 	sub	objptr, ##11312
17f08     F2 20 02 FB | 	rdlong	local02, objptr
17f0c     16 00 00 FF 
17f10     34 E4 05 F1 | 	add	objptr, ##11316
17f14     F2 20 62 FC | 	wrlong	local02, objptr
17f18     7B 00 00 FF 
17f1c     10 E4 85 F1 | 	sub	objptr, ##62992
17f20                 | LR__1792
17f20                 | ' if key>$80000000 then let rptcnt=0 : let rpt=0
17f20     64 00 00 FF 
17f24     D8 E5 05 F1 | 	add	objptr, ##51672
17f28     F2 20 02 FB | 	rdlong	local02, objptr
17f2c     64 00 00 FF 
17f30     D8 E5 85 F1 | 	sub	objptr, ##51672
17f34     00 00 40 FF 
17f38     01 20 16 F2 | 	cmp	local02, ##-2147483647 wc
17f3c     7B 00 00 3F 
17f40     14 E4 05 31 |  if_ae	add	objptr, ##62996
17f44     F2 00 68 3C |  if_ae	wrlong	#0, objptr
17f48     08 E4 85 31 |  if_ae	sub	objptr, #8
17f4c     F2 00 68 3C |  if_ae	wrlong	#0, objptr
17f50     7B 00 00 3F 
17f54     0C E4 85 31 |  if_ae	sub	objptr, ##62988
17f58                 | ' if key=0 andalso rpt=1 then rptcnt+=1
17f58     64 00 00 FF 
17f5c     D8 E5 05 F1 | 	add	objptr, ##51672
17f60     F2 20 0A FB | 	rdlong	local02, objptr wz
17f64     64 00 00 FF 
17f68     D8 E5 85 F1 | 	sub	objptr, ##51672
17f6c     7B 00 00 AF 
17f70     0C E4 05 A1 |  if_e	add	objptr, ##62988
17f74     F2 24 02 AB |  if_e	rdlong	local04, objptr
17f78     7B 00 00 AF 
17f7c     0C E4 85 A1 |  if_e	sub	objptr, ##62988
17f80     12 23 02 A6 |  if_e	mov	local03, local04
17f84     01 22 0E A2 |  if_e	cmp	local03, #1 wz
17f88     7B 00 00 AF 
17f8c     14 E4 05 A1 |  if_e	add	objptr, ##62996
17f90     F2 20 02 AB |  if_e	rdlong	local02, objptr
17f94     01 20 06 A1 |  if_e	add	local02, #1
17f98     F2 20 62 AC |  if_e	wrlong	local02, objptr
17f9c     7B 00 00 AF 
17fa0     14 E4 85 A1 |  if_e	sub	objptr, ##62996
17fa4                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
17fa4     64 00 00 FF 
17fa8     D8 E5 05 F1 | 	add	objptr, ##51672
17fac     F2 20 02 FB | 	rdlong	local02, objptr
17fb0     64 00 00 FF 
17fb4     D8 E5 85 F1 | 	sub	objptr, ##51672
17fb8     00 00 40 FF 
17fbc     00 20 16 F2 | 	cmp	local02, ##-2147483648 wc
17fc0     44 00 90 3D |  if_ae	jmp	#LR__1794
17fc4     7B 00 00 FF 
17fc8     14 E4 05 F1 | 	add	objptr, ##62996
17fcc     F2 20 02 FB | 	rdlong	local02, objptr
17fd0     7B 00 00 FF 
17fd4     14 E4 85 F1 | 	sub	objptr, ##62996
17fd8     19 20 0E F2 | 	cmp	local02, #25 wz
17fdc     28 00 90 5D |  if_ne	jmp	#LR__1793
17fe0     64 00 00 FF 
17fe4     DC E5 05 F1 | 	add	objptr, ##51676
17fe8     F2 20 02 FB | 	rdlong	local02, objptr
17fec     16 00 00 FF 
17ff0     34 E4 05 F1 | 	add	objptr, ##11316
17ff4     F2 20 62 FC | 	wrlong	local02, objptr
17ff8     04 E4 05 F1 | 	add	objptr, #4
17ffc     F2 2A 68 FC | 	wrlong	#21, objptr
18000     7B 00 00 FF 
18004     14 E4 85 F1 | 	sub	objptr, ##62996
18008                 | LR__1793
18008                 | LR__1794
18008                 | ' 
18008                 | ' 
18008                 | ' if key3<>0 then
18008     7B 00 00 FF 
1800c     10 E4 05 F1 | 	add	objptr, ##62992
18010     F2 28 0A FB | 	rdlong	local06, objptr wz
18014     7B 00 00 FF 
18018     10 E4 85 F1 | 	sub	objptr, ##62992
1801c     3C FD 9F AD |  if_e	jmp	#LR__1790
18020                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
18020     79 00 00 FF 
18024     44 E5 05 F1 | 	add	objptr, ##62276
18028     F2 20 02 FB | 	rdlong	local02, objptr
1802c     79 00 00 FF 
18030     44 E5 85 F1 | 	sub	objptr, ##62276
18034     01 20 0E F2 | 	cmp	local02, #1 wz
18038     50 00 90 5D |  if_ne	jmp	#LR__1795
1803c     7A 00 00 FF 
18040     E8 E5 05 F1 | 	add	objptr, ##62952
18044     F2 14 02 FB | 	rdlong	arg02, objptr
18048     56 00 00 FF 
1804c     44 22 06 F6 | 	mov	local03, ##44100
18050     0C 24 C6 F9 | 	decod	local04, #12
18054     04 E4 85 F1 | 	sub	objptr, #4
18058     F2 26 02 FB | 	rdlong	local05, objptr
1805c     01 1E 66 F6 | 	neg	local01, #1
18060     07 12 06 F6 | 	mov	arg01, #7
18064     56 00 00 FF 
18068     44 16 06 F6 | 	mov	arg03, ##44100
1806c     0C 18 C6 F9 | 	decod	arg04, #12
18070     13 1B 02 F6 | 	mov	arg05, local05
18074     01 1C 66 F6 | 	neg	arg06, #1
18078     6F 00 00 FF 
1807c     24 E5 85 F1 | 	sub	objptr, ##57124
18080     94 27 B0 FD | 	call	#_audio096_spin2_play
18084     0B 00 00 FF 
18088     C0 E4 85 F1 | 	sub	objptr, ##5824
1808c                 | LR__1795
1808c     7B 00 00 FF 
18090     10 E4 05 F1 | 	add	objptr, ##62992
18094     F2 12 02 FB | 	rdlong	arg01, objptr
18098     7B 00 00 FF 
1809c     10 E4 85 F1 | 	sub	objptr, ##62992
180a0     20 F8 BF FD | 	call	#_scantochar
180a4     7B 00 00 FF 
180a8     18 E4 05 F1 | 	add	objptr, ##63000
180ac     F2 FA 61 FC | 	wrlong	result1, objptr
180b0                 | '   if leds and 2 = 2 then 
180b0     10 E4 85 F1 | 	sub	objptr, #16
180b4     F2 20 0A FB | 	rdlong	local02, objptr wz
180b8     7B 00 00 FF 
180bc     08 E4 85 F1 | 	sub	objptr, ##62984
180c0     68 01 90 AD |  if_e	jmp	#LR__1803
180c4                 | '     if key4>96 andalso key4<123 then
180c4     7B 00 00 FF 
180c8     18 E4 05 F1 | 	add	objptr, ##63000
180cc     F2 20 02 FB | 	rdlong	local02, objptr
180d0     7B 00 00 FF 
180d4     18 E4 85 F1 | 	sub	objptr, ##63000
180d8     61 20 56 F2 | 	cmps	local02, #97 wc
180dc     40 00 90 CD |  if_b	jmp	#LR__1796
180e0     7B 00 00 FF 
180e4     18 E4 05 F1 | 	add	objptr, ##63000
180e8     F2 24 02 FB | 	rdlong	local04, objptr
180ec     7B 00 00 FF 
180f0     18 E4 85 F1 | 	sub	objptr, ##63000
180f4     12 23 02 F6 | 	mov	local03, local04
180f8     7B 22 56 F2 | 	cmps	local03, #123 wc
180fc     20 00 90 3D |  if_ae	jmp	#LR__1796
18100     7B 00 00 FF 
18104     18 E4 05 F1 | 	add	objptr, ##63000
18108     F2 20 02 FB | 	rdlong	local02, objptr
1810c     20 20 86 F1 | 	sub	local02, #32
18110     F2 20 62 FC | 	wrlong	local02, objptr
18114     7B 00 00 FF 
18118     18 E4 85 F1 | 	sub	objptr, ##63000
1811c     0C 01 90 FD | 	jmp	#LR__1802
18120                 | LR__1796
18120     7B 00 00 FF 
18124     18 E4 05 F1 | 	add	objptr, ##63000
18128     F2 20 02 FB | 	rdlong	local02, objptr
1812c     7B 00 00 FF 
18130     18 E4 85 F1 | 	sub	objptr, ##63000
18134     41 20 56 F2 | 	cmps	local02, #65 wc
18138     40 00 90 CD |  if_b	jmp	#LR__1797
1813c     7B 00 00 FF 
18140     18 E4 05 F1 | 	add	objptr, ##63000
18144     F2 24 02 FB | 	rdlong	local04, objptr
18148     7B 00 00 FF 
1814c     18 E4 85 F1 | 	sub	objptr, ##63000
18150     12 23 02 F6 | 	mov	local03, local04
18154     5B 22 56 F2 | 	cmps	local03, #91 wc
18158     20 00 90 3D |  if_ae	jmp	#LR__1797
1815c     7B 00 00 FF 
18160     18 E4 05 F1 | 	add	objptr, ##63000
18164     F2 20 02 FB | 	rdlong	local02, objptr
18168     20 20 06 F1 | 	add	local02, #32
1816c     F2 20 62 FC | 	wrlong	local02, objptr
18170     7B 00 00 FF 
18174     18 E4 85 F1 | 	sub	objptr, ##63000
18178     B0 00 90 FD | 	jmp	#LR__1801
1817c                 | LR__1797
1817c     7B 00 00 FF 
18180     18 E4 05 F1 | 	add	objptr, ##63000
18184     F2 20 02 FB | 	rdlong	local02, objptr
18188     7B 00 00 FF 
1818c     18 E4 85 F1 | 	sub	objptr, ##63000
18190     17 20 56 F2 | 	cmps	local02, #23 wc
18194     40 00 90 CD |  if_b	jmp	#LR__1798
18198     7B 00 00 FF 
1819c     18 E4 05 F1 | 	add	objptr, ##63000
181a0     F2 24 02 FB | 	rdlong	local04, objptr
181a4     7B 00 00 FF 
181a8     18 E4 85 F1 | 	sub	objptr, ##63000
181ac     12 23 02 F6 | 	mov	local03, local04
181b0     20 22 56 F2 | 	cmps	local03, #32 wc
181b4     20 00 90 3D |  if_ae	jmp	#LR__1798
181b8     7B 00 00 FF 
181bc     18 E4 05 F1 | 	add	objptr, ##63000
181c0     F2 20 02 FB | 	rdlong	local02, objptr
181c4     09 20 86 F1 | 	sub	local02, #9
181c8     F2 20 62 FC | 	wrlong	local02, objptr
181cc     7B 00 00 FF 
181d0     18 E4 85 F1 | 	sub	objptr, ##63000
181d4     54 00 90 FD | 	jmp	#LR__1800
181d8                 | LR__1798
181d8     7B 00 00 FF 
181dc     18 E4 05 F1 | 	add	objptr, ##63000
181e0     F2 20 02 FB | 	rdlong	local02, objptr
181e4     7B 00 00 FF 
181e8     18 E4 85 F1 | 	sub	objptr, ##63000
181ec     0E 20 56 F2 | 	cmps	local02, #14 wc
181f0     38 00 90 CD |  if_b	jmp	#LR__1799
181f4     7B 00 00 FF 
181f8     18 E4 05 F1 | 	add	objptr, ##63000
181fc     F2 24 02 FB | 	rdlong	local04, objptr
18200     7B 00 00 FF 
18204     18 E4 85 F1 | 	sub	objptr, ##63000
18208     12 23 02 F6 | 	mov	local03, local04
1820c     17 22 56 F2 | 	cmps	local03, #23 wc
18210     7B 00 00 CF 
18214     18 E4 05 C1 |  if_b	add	objptr, ##63000
18218     F2 20 02 CB |  if_b	rdlong	local02, objptr
1821c     27 20 06 C1 |  if_b	add	local02, #39
18220     F2 20 62 CC |  if_b	wrlong	local02, objptr
18224     7B 00 00 CF 
18228     18 E4 85 C1 |  if_b	sub	objptr, ##63000
1822c                 | LR__1799
1822c                 | LR__1800
1822c                 | LR__1801
1822c                 | LR__1802
1822c                 | LR__1803
1822c                 | '  
1822c                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then line$+=chr$(key4): v.putchar(key4)
1822c     7B 00 00 FF 
18230     18 E4 05 F1 | 	add	objptr, ##63000
18234     F2 20 02 FB | 	rdlong	local02, objptr
18238     7B 00 00 FF 
1823c     18 E4 85 F1 | 	sub	objptr, ##63000
18240     01 20 56 F2 | 	cmps	local02, #1 wc
18244     90 00 90 CD |  if_b	jmp	#LR__1804
18248     7B 00 00 FF 
1824c     18 E4 05 F1 | 	add	objptr, ##63000
18250     F2 24 02 FB | 	rdlong	local04, objptr
18254     7B 00 00 FF 
18258     18 E4 85 F1 | 	sub	objptr, ##63000
1825c     12 23 02 F6 | 	mov	local03, local04
18260     7F 22 56 F2 | 	cmps	local03, #127 wc
18264     38 E4 05 C1 |  if_b	add	objptr, #56
18268     F2 1E E2 CA |  if_b	rdword	local01, objptr
1826c     38 E4 85 C1 |  if_b	sub	objptr, #56
18270     0F 27 32 C9 |  if_b	getword	local05, local01, #0
18274     FE 26 16 C2 |  if_b	cmp	local05, #254 wc
18278     5C 00 90 3D |  if_ae	jmp	#LR__1804
1827c     7B 00 00 FF 
18280     18 E4 05 F1 | 	add	objptr, ##63000
18284     F2 12 02 FB | 	rdlong	arg01, objptr
18288     7B 00 00 FF 
1828c     18 E4 85 F1 | 	sub	objptr, ##63000
18290     E0 4B B0 FD | 	call	#__system__Chr_S
18294     FD 2A 02 F6 | 	mov	local07, result1
18298     56 00 00 FF 
1829c     80 E5 05 F1 | 	add	objptr, ##44416
182a0     F2 12 02 FB | 	rdlong	arg01, objptr
182a4     56 00 00 FF 
182a8     80 E5 85 F1 | 	sub	objptr, ##44416
182ac     15 15 02 F6 | 	mov	arg02, local07
182b0     10 2A B0 FD | 	call	#__system___string_concat
182b4     56 00 00 FF 
182b8     80 E5 05 F1 | 	add	objptr, ##44416
182bc     F2 FA 61 FC | 	wrlong	result1, objptr
182c0     24 00 00 FF 
182c4     98 E4 05 F1 | 	add	objptr, ##18584
182c8     F2 12 02 FB | 	rdlong	arg01, objptr
182cc     7B 00 00 FF 
182d0     18 E4 85 F1 | 	sub	objptr, ##63000
182d4     D4 16 B0 FD | 	call	#_hg010b_spin2_putchar
182d8                 | LR__1804
182d8                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
182d8     7B 00 00 FF 
182dc     18 E4 05 F1 | 	add	objptr, ##63000
182e0     F2 20 02 FB | 	rdlong	local02, objptr
182e4     7B 00 00 FF 
182e8     18 E4 85 F1 | 	sub	objptr, ##63000
182ec     01 20 56 F2 | 	cmps	local02, #1 wc
182f0     D0 00 90 CD |  if_b	jmp	#LR__1805
182f4     7B 00 00 FF 
182f8     18 E4 05 F1 | 	add	objptr, ##63000
182fc     F2 24 02 FB | 	rdlong	local04, objptr
18300     7B 00 00 FF 
18304     18 E4 85 F1 | 	sub	objptr, ##63000
18308     12 23 02 F6 | 	mov	local03, local04
1830c     7F 22 56 F2 | 	cmps	local03, #127 wc
18310     B0 00 90 3D |  if_ae	jmp	#LR__1805
18314     38 E4 05 F1 | 	add	objptr, #56
18318     F2 1E E2 FA | 	rdword	local01, objptr
1831c     38 E4 85 F1 | 	sub	objptr, #56
18320     0F 27 32 F9 | 	getword	local05, local01, #0
18324     FE 26 0E F2 | 	cmp	local05, #254 wz
18328     79 00 00 AF 
1832c     44 E5 05 A1 |  if_e	add	objptr, ##62276
18330     F2 2C 02 AB |  if_e	rdlong	local08, objptr
18334     79 00 00 AF 
18338     44 E5 85 A1 |  if_e	sub	objptr, ##62276
1833c     16 2F 02 A6 |  if_e	mov	local09, local08
18340     01 2E 0E A2 |  if_e	cmp	local09, #1 wz
18344     7C 00 90 5D |  if_ne	jmp	#LR__1805
18348     04 00 00 FF 
1834c     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
18350     F5 14 02 F6 | 	mov	arg02, ptr__dat__
18354     04 00 00 FF 
18358     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
1835c     56 00 00 FF 
18360     44 22 06 F6 | 	mov	local03, ##44100
18364     0C 24 C6 F9 | 	decod	local04, #12
18368     00 26 06 F6 | 	mov	local05, #0
1836c     03 00 00 FF 
18370     DE 1E 06 F6 | 	mov	local01, ##1758
18374     07 12 06 F6 | 	mov	arg01, #7
18378     56 00 00 FF 
1837c     44 16 06 F6 | 	mov	arg03, ##44100
18380     0C 18 C6 F9 | 	decod	arg04, #12
18384     00 1A 06 F6 | 	mov	arg05, #0
18388     03 00 00 FF 
1838c     DE 1C 06 F6 | 	mov	arg06, ##1758
18390     0B 00 00 FF 
18394     C0 E4 05 F1 | 	add	objptr, ##5824
18398     7C 24 B0 FD | 	call	#_audio096_spin2_play
1839c     0B 00 00 FF 
183a0     C0 E4 85 F1 | 	sub	objptr, ##5824
183a4     2C 13 06 F6 | 	mov	arg01, #300
183a8     B0 2B B0 FD | 	call	#__system___waitms
183ac     07 12 06 F6 | 	mov	arg01, #7
183b0     0B 00 00 FF 
183b4     C0 E4 05 F1 | 	add	objptr, ##5824
183b8     AC 25 B0 FD | 	call	#_audio096_spin2_stop
183bc     0B 00 00 FF 
183c0     C0 E4 85 F1 | 	sub	objptr, ##5824
183c4                 | LR__1805
183c4                 | '  
183c4                 | '   'tab
183c4                 | '   if (key3 and 255) = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)
183c4     7B 00 00 FF 
183c8     10 E4 05 F1 | 	add	objptr, ##62992
183cc     F2 20 02 FB | 	rdlong	local02, objptr
183d0     7B 00 00 FF 
183d4     10 E4 85 F1 | 	sub	objptr, ##62992
183d8     10 21 E2 F8 | 	getbyte	local02, local02, #0
183dc     2B 20 0E F2 | 	cmp	local02, #43 wz
183e0     B4 00 90 5D |  if_ne	jmp	#LR__1806
183e4     38 E4 05 F1 | 	add	objptr, #56
183e8     F2 24 E2 FA | 	rdword	local04, objptr
183ec     38 E4 85 F1 | 	sub	objptr, #56
183f0     12 23 32 F9 | 	getword	local03, local04, #0
183f4     F0 22 16 F2 | 	cmp	local03, #240 wc
183f8     9C 00 90 CD |  if_b	jmp	#LR__1806
183fc     79 00 00 FF 
18400     44 E5 05 F1 | 	add	objptr, ##62276
18404     F2 1E 02 FB | 	rdlong	local01, objptr
18408     79 00 00 FF 
1840c     44 E5 85 F1 | 	sub	objptr, ##62276
18410     0F 27 02 F6 | 	mov	local05, local01
18414     01 26 0E F2 | 	cmp	local05, #1 wz
18418     7C 00 90 5D |  if_ne	jmp	#LR__1806
1841c     04 00 00 FF 
18420     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
18424     F5 14 02 F6 | 	mov	arg02, ptr__dat__
18428     04 00 00 FF 
1842c     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
18430     56 00 00 FF 
18434     44 22 06 F6 | 	mov	local03, ##44100
18438     0E 24 C6 F9 | 	decod	local04, #14
1843c     00 26 06 F6 | 	mov	local05, #0
18440     03 00 00 FF 
18444     DE 1E 06 F6 | 	mov	local01, ##1758
18448     00 12 06 F6 | 	mov	arg01, #0
1844c     56 00 00 FF 
18450     44 16 06 F6 | 	mov	arg03, ##44100
18454     0E 18 C6 F9 | 	decod	arg04, #14
18458     00 1A 06 F6 | 	mov	arg05, #0
1845c     03 00 00 FF 
18460     DE 1C 06 F6 | 	mov	arg06, ##1758
18464     0B 00 00 FF 
18468     C0 E4 05 F1 | 	add	objptr, ##5824
1846c     A8 23 B0 FD | 	call	#_audio096_spin2_play
18470     0B 00 00 FF 
18474     C0 E4 85 F1 | 	sub	objptr, ##5824
18478     2C 13 06 F6 | 	mov	arg01, #300
1847c     DC 2A B0 FD | 	call	#__system___waitms
18480     00 12 06 F6 | 	mov	arg01, #0
18484     0B 00 00 FF 
18488     C0 E4 05 F1 | 	add	objptr, ##5824
1848c     D8 24 B0 FD | 	call	#_audio096_spin2_stop
18490     0B 00 00 FF 
18494     C0 E4 85 F1 | 	sub	objptr, ##5824
18498                 | LR__1806
18498                 | '   if (key3 and 255) = 43 andalso v.cursor_x<240 then let x=(v.cursor_x mod 16)/2: for i=x to 7: line$+=" " :  v.write (" ") : next i  
18498     7B 00 00 FF 
1849c     10 E4 05 F1 | 	add	objptr, ##62992
184a0     F2 20 02 FB | 	rdlong	local02, objptr
184a4     7B 00 00 FF 
184a8     10 E4 85 F1 | 	sub	objptr, ##62992
184ac     10 21 E2 F8 | 	getbyte	local02, local02, #0
184b0     2B 20 0E F2 | 	cmp	local02, #43 wz
184b4     AC 00 90 5D |  if_ne	jmp	#LR__1809
184b8     38 E4 05 F1 | 	add	objptr, #56
184bc     F2 24 E2 FA | 	rdword	local04, objptr
184c0     38 E4 85 F1 | 	sub	objptr, #56
184c4     12 23 32 F9 | 	getword	local03, local04, #0
184c8     F0 22 16 F2 | 	cmp	local03, #240 wc
184cc     94 00 90 3D |  if_ae	jmp	#LR__1809
184d0     38 E4 05 F1 | 	add	objptr, #56
184d4     F2 20 E2 FA | 	rdword	local02, objptr
184d8     10 23 52 F6 | 	abs	local03, local02 wc
184dc     11 23 42 F8 | 	getnib	local03, local03, #0
184e0     11 23 82 F6 | 	negc	local03, local03
184e4     11 25 52 F6 | 	abs	local04, local03 wc
184e8     01 24 46 F0 | 	shr	local04, #1
184ec     12 25 82 F6 | 	negc	local04, local04
184f0     7A 00 00 FF 
184f4     E4 E5 05 F1 | 	add	objptr, ##62948
184f8     F2 24 62 FC | 	wrlong	local04, objptr
184fc     12 31 02 F6 | 	mov	local10, local04
18500     7B 00 00 FF 
18504     1C E4 85 F1 | 	sub	objptr, ##63004
18508                 | LR__1807
18508     08 30 56 F2 | 	cmps	local10, #8 wc
1850c     54 00 90 3D |  if_ae	jmp	#LR__1808
18510     56 00 00 FF 
18514     80 E5 05 F1 | 	add	objptr, ##44416
18518     F2 12 02 FB | 	rdlong	arg01, objptr
1851c     56 00 00 FF 
18520     80 E5 85 F1 | 	sub	objptr, ##44416
18524     56 01 00 FF 
18528     BF 25 06 F6 | 	mov	local04, ##@LR__4800
1852c     12 15 02 F6 | 	mov	arg02, local04
18530     90 27 B0 FD | 	call	#__system___string_concat
18534     56 00 00 FF 
18538     80 E5 05 F1 | 	add	objptr, ##44416
1853c     F2 FA 61 FC | 	wrlong	result1, objptr
18540     56 00 00 FF 
18544     80 E5 85 F1 | 	sub	objptr, ##44416
18548     56 01 00 FF 
1854c     C1 13 06 F6 | 	mov	arg01, ##@LR__4801
18550     74 16 B0 FD | 	call	#_hg010b_spin2_write
18554     18 23 02 F6 | 	mov	local03, local10
18558     01 22 06 F1 | 	add	local03, #1
1855c     11 31 02 F6 | 	mov	local10, local03
18560     A4 FF 9F FD | 	jmp	#LR__1807
18564                 | LR__1808
18564                 | LR__1809
18564                 | '  
18564                 | '   'backspace
18564                 | '   if (key3 and 255) = 42 then 
18564     7B 00 00 FF 
18568     10 E4 05 F1 | 	add	objptr, ##62992
1856c     F2 20 02 FB | 	rdlong	local02, objptr
18570     7B 00 00 FF 
18574     10 E4 85 F1 | 	sub	objptr, ##62992
18578     10 21 E2 F8 | 	getbyte	local02, local02, #0
1857c     2A 20 0E F2 | 	cmp	local02, #42 wz
18580     D4 00 90 5D |  if_ne	jmp	#LR__1814
18584                 | '       if v.cursor_x>4 then 
18584     38 E4 05 F1 | 	add	objptr, #56
18588     F2 20 E2 FA | 	rdword	local02, objptr
1858c     38 E4 85 F1 | 	sub	objptr, #56
18590     05 20 16 F2 | 	cmp	local02, #5 wc
18594     9C 00 90 CD |  if_b	jmp	#LR__1812
18598     56 00 00 FF 
1859c     80 E5 05 F1 | 	add	objptr, ##44416
185a0     F2 26 02 FB | 	rdlong	local05, objptr
185a4     56 00 00 FF 
185a8     80 E5 85 F1 | 	sub	objptr, ##44416
185ac     13 13 02 F6 | 	mov	arg01, local05
185b0     09 33 02 F6 | 	mov	local11, arg01
185b4     97 06 48 FB | 	callpa	#(@LR__1811-@LR__1810)>>2,fcache_load_ptr_
185b8                 | LR__1810
185b8     19 FB C9 FA | 	rdbyte	result1, local11 wz
185bc     01 32 06 51 |  if_ne	add	local11, #1
185c0     F4 FF 9F 5D |  if_ne	jmp	#LR__1810
185c4                 | LR__1811
185c4     09 33 82 F1 | 	sub	local11, arg01
185c8     19 15 02 F6 | 	mov	arg02, local11
185cc     01 14 86 F1 | 	sub	arg02, #1
185d0     13 13 02 F6 | 	mov	arg01, local05
185d4     D8 46 B0 FD | 	call	#__system__Left_S
185d8     56 00 00 FF 
185dc     80 E5 05 F1 | 	add	objptr, ##44416
185e0     F2 FA 61 FC | 	wrlong	result1, objptr
185e4     56 00 00 FF 
185e8     48 E5 85 F1 | 	sub	objptr, ##44360
185ec     F2 12 E2 FA | 	rdword	arg01, objptr
185f0     02 12 86 F1 | 	sub	arg01, #2
185f4     02 E4 05 F1 | 	add	objptr, #2
185f8     F2 14 C2 FA | 	rdbyte	arg02, objptr
185fc     3A E4 85 F1 | 	sub	objptr, #58
18600     60 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
18604     20 12 06 F6 | 	mov	arg01, #32
18608     A0 13 B0 FD | 	call	#_hg010b_spin2_putchar
1860c     38 E4 05 F1 | 	add	objptr, #56
18610     F2 12 E2 FA | 	rdword	arg01, objptr
18614     02 12 86 F1 | 	sub	arg01, #2
18618     02 E4 05 F1 | 	add	objptr, #2
1861c     F2 24 C2 FA | 	rdbyte	local04, objptr
18620     3A E4 85 F1 | 	sub	objptr, #58
18624     12 23 E2 F8 | 	getbyte	local03, local04, #0
18628     11 15 02 F6 | 	mov	arg02, local03
1862c     34 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
18630     24 00 90 FD | 	jmp	#LR__1813
18634                 | LR__1812
18634     56 01 00 FF 
18638     C3 21 06 F6 | 	mov	local02, ##@LR__4802
1863c     56 00 00 FF 
18640     80 E5 05 F1 | 	add	objptr, ##44416
18644     F2 20 62 FC | 	wrlong	local02, objptr
18648     56 00 00 FF 
1864c     48 E5 85 F1 | 	sub	objptr, ##44360
18650     F2 08 58 FC | 	wrword	#4, objptr
18654     38 E4 85 F1 | 	sub	objptr, #56
18658                 | LR__1813
18658                 | LR__1814
18658                 | '    
18658                 | '  ' To do: arrows and DEL; use textscreen array to implement fullscreen editing
18658                 | '  
18658                 | '   if key4=key_enter then 
18658     7B 00 00 FF 
1865c     18 E4 05 F1 | 	add	objptr, ##63000
18660     F2 28 02 FB | 	rdlong	local06, objptr
18664     7B 00 00 FF 
18668     18 E4 85 F1 | 	sub	objptr, ##63000
1866c     8D 28 0E F2 | 	cmp	local06, #141 wz
18670     50 00 90 5D |  if_ne	jmp	#LR__1815
18674     B0 16 B0 FD | 	call	#_hg010b_spin2_crlf
18678     A0 83 BE FD | 	call	#_interpret
1867c     56 01 00 FF 
18680     C4 21 06 F6 | 	mov	local02, ##@LR__4803
18684     56 00 00 FF 
18688     80 E5 05 F1 | 	add	objptr, ##44416
1868c     F2 20 62 FC | 	wrlong	local02, objptr
18690     1A FA 61 FD | 	getct	result1
18694     24 00 00 FF 
18698     A0 E4 05 F1 | 	add	objptr, ##18592
1869c     F2 24 02 FB | 	rdlong	local04, objptr
186a0     12 23 02 F6 | 	mov	local03, local04
186a4     11 FB 81 F1 | 	sub	result1, local03
186a8     F2 FA 61 FC | 	wrlong	result1, objptr
186ac     14 E4 85 F1 | 	sub	objptr, #20
186b0     F2 00 68 FC | 	wrlong	#0, objptr
186b4     08 E4 05 F1 | 	add	objptr, #8
186b8     F2 00 68 FC | 	wrlong	#0, objptr
186bc     7B 00 00 FF 
186c0     14 E4 85 F1 | 	sub	objptr, ##62996
186c4                 | LR__1815
186c4     7B 00 00 FF 
186c8     10 E4 05 F1 | 	add	objptr, ##62992
186cc     F2 00 68 FC | 	wrlong	#0, objptr
186d0     7B 00 00 FF 
186d4     10 E4 85 F1 | 	sub	objptr, ##62992
186d8     80 F6 9F FD | 	jmp	#LR__1790
186dc     A7 F0 03 F6 | 	mov	ptra, fp
186e0     B2 00 A0 FD | 	call	#popregs_
186e4                 | _program_ret
186e4     2D 00 64 FD | 	ret
186e8                 | 
186e8                 | ' '' this is not a main program.
186e8                 | ' 
186e8                 | ' '****************************************************************************************************************
186e8                 | ' '                                                                                                             	*
186e8                 | ' 'Start the driver with graphics mode 'mode' at pins 'base'                            		rev 20220320 	*
186e8                 | ' '                                                                                                            	*
186e8                 | ' ' mode - mode #, see below											*
186e8                 | ' ' base - HDMI base pin												*
186e8                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
186e8                 | ' '														*
186e8                 | ' '' mode number: :  %p_tn_bb_cc_vv_hh										*
186e8                 | ' '' set bit #15 for custom timings														*
186e8                 | ' '' p - 1 - psram, 0 - hub											*
186e8                 | ' '' t - 1 - graphics, 0 - text											*
186e8                 | ' '' n - 1 - 60 Hz,  0 - 50 Hz 											*
186e8                 | ' '' hh - h.zoom, vv-v.zoom, cc-color depth if graphic, unused in text,						*
186e8                 | ' '' bb - borders, 00-wide, 01 medium, 10 no border, 11 no border, extended resolution (1024x576/896x496)		*
186e8                 | ' '														*
186e8                 | ' '****************************************************************************************************************
186e8                 | ' 
186e8                 | ' pub start(base,mb):result |i
186e8                 | _hg010b_spin2_start
186e8                 | ' 
186e8                 | ' '--------------------------- initialize pointers and variables
186e8                 | ' 
186e8                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
186e8     30 E4 05 F1 | 	add	objptr, #48
186ec     F2 FA 01 F6 | 	mov	result1, objptr
186f0     28 E4 85 F1 | 	sub	objptr, #40
186f4     F2 FA 61 FC | 	wrlong	result1, objptr
186f8                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
186f8                 | ' hdmibase:=base							' HDMI base pin, 8*n
186f8     18 E4 05 F1 | 	add	objptr, #24
186fc     F2 12 62 FC | 	wrlong	arg01, objptr
18700                 | ' mailbox_ptr:=mb		
18700     04 E4 05 F1 | 	add	objptr, #4
18704     F2 14 62 FC | 	wrlong	arg02, objptr
18708                 | ' mailbox0:=mb				' PSRAM mailbox pointer
18708     C1 E5 05 F1 | 	add	objptr, #449
1870c     F2 14 62 FC | 	wrlong	arg02, objptr
18710                 | ' sprite_ptr:=@spr1ptr
18710     D8 E4 85 F1 | 	sub	objptr, #216
18714     F2 FA 01 F6 | 	mov	result1, objptr
18718     E5 E4 85 F1 | 	sub	objptr, #229
1871c     F2 FA 61 FC | 	wrlong	result1, objptr
18720                 | ' 
18720                 | ' 		'
18720                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
18720     E5 E4 05 F1 | 	add	objptr, #229
18724     F2 FA 01 FB | 	rdlong	result1, objptr
18728     D0 FA 05 F1 | 	add	result1, #208
1872c     FD 10 58 FC | 	wrword	#8, result1
18730                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
18730     F2 16 02 FB | 	rdlong	arg03, objptr
18734     D2 16 06 F1 | 	add	arg03, #210
18738     0B 21 58 FC | 	wrword	#16, arg03
1873c                 | ' leading_spaces:=0				'
1873c     A5 E5 05 F1 | 	add	objptr, #421
18740     F2 00 68 FC | 	wrlong	#0, objptr
18744                 | ' 
18744                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
18744     99 E4 85 F1 | 	sub	objptr, #153
18748     00 00 A0 FF 
1874c     F2 0E 68 FC | 	wrlong	##1073741831, objptr
18750                 | ' emptydl[1]:=0
18750     04 E4 05 F1 | 	add	objptr, #4
18754     F2 00 68 FC | 	wrlong	#0, objptr
18758                 | ' 
18758                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
18758                 | ' 
18758                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
18758     28 E5 85 F1 | 	sub	objptr, #296
1875c     F2 02 68 FC | 	wrlong	#1, objptr
18760                 | ' if s_debug<>0
18760                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
18760     20 00 80 FF 
18764     F2 00 68 FC | 	wrlong	##16384, objptr
18768     F5 E4 85 F1 | 	sub	objptr, #245
1876c                 | ' setmode()							' set the mode, see below
1876c     A4 01 B0 FD | 	call	#_hg010b_spin2_setmode
18770                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
18770     45 E4 05 F1 | 	add	objptr, #69
18774     F2 FA 01 F6 | 	mov	result1, objptr
18778     35 E4 85 F1 | 	sub	objptr, #53
1877c     F2 FA 61 FC | 	wrlong	result1, objptr
18780                 | ' cursor_ptr:=@cursor_x						
18780     28 E4 05 F1 | 	add	objptr, #40
18784     F2 16 02 F6 | 	mov	arg03, objptr
18788     2C E4 85 F1 | 	sub	objptr, #44
1878c     F2 16 62 FC | 	wrlong	arg03, objptr
18790                 | ' fontnum:=0  							' start with a PC type font 
18790     55 E4 05 F1 | 	add	objptr, #85
18794     F2 00 68 FC | 	wrlong	#0, objptr
18798                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
18798     1C E4 05 F1 | 	add	objptr, #28
1879c     F2 12 02 F6 | 	mov	arg01, objptr
187a0     7D E4 85 F1 | 	sub	objptr, #125
187a4     10 00 00 FF 
187a8     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
187ac     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
187b0     10 00 00 FF 
187b4     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
187b8     10 16 06 F6 | 	mov	arg03, #16
187bc     C8 23 B0 FD | 	call	#__system____builtin_memmove
187c0                 | ' leading_spaces:=0
187c0     01 00 00 FF 
187c4     B2 E4 05 F1 | 	add	objptr, ##690
187c8     F2 00 68 FC | 	wrlong	#0, objptr
187cc     01 00 00 FF 
187d0     B2 E4 85 F1 | 	sub	objptr, ##690
187d4                 | ' '---------------------------- initialize a cursor (MSDOS type)
187d4                 | ' 
187d4                 | ' initcursor(154)
187d4     9A 12 06 F6 | 	mov	arg01, #154
187d8     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
187dc                 | ' 
187dc                 | ' '---------------------------- start the cog
187dc                 | ' 
187dc                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
187dc     10 00 00 FF 
187e0     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
187e4     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
187e8     10 00 00 FF 
187ec     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
187f0     10 E4 05 F1 | 	add	objptr, #16
187f4     10 FA 05 F6 | 	mov	result1, #16
187f8     28 E4 61 FD | 	setq	objptr
187fc     0A FB F1 FC | 	coginit	result1, arg02 wc
18800     01 FA 65 C6 |  if_b	neg	result1, #1
18804     1C E4 05 F1 | 	add	objptr, #28
18808     F2 FA 61 FC | 	wrlong	result1, objptr
1880c     2C E4 85 F1 | 	sub	objptr, #44
18810                 | ' waitms(40)							' wait for stabilize
18810     28 12 06 F6 | 	mov	arg01, #40
18814     44 27 B0 FD | 	call	#__system___waitms
18818                 | ' return cog							' return the driver's cog #
18818     2C E4 05 F1 | 	add	objptr, #44
1881c     F2 FA 01 FB | 	rdlong	result1, objptr
18820     2C E4 85 F1 | 	sub	objptr, #44
18824                 | _hg010b_spin2_start_ret
18824     2D 00 64 FD | 	ret
18828                 | 
18828                 | ' 
18828                 | ' 
18828                 | ' '**************************************************************************************************************** 
18828                 | ' '                                                                                                             	*
18828                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
18828                 | ' '  Mode number - see start() above or bits below								*
18828                 | ' '                                                                                                             	*
18828                 | ' '****************************************************************************************************************
18828                 | ' 
18828                 | ' '---------------------------- initialize a cursor (MSDOS type)
18828                 | ' pub initcursor(color) |i
18828                 | _hg010b_spin2_initcursor
18828     03 4A 05 F6 | 	mov	COUNT_, #3
1882c     A8 00 A0 FD | 	call	#pushregs_
18830     09 1F 02 F6 | 	mov	local01, arg01
18834                 | ' 
18834                 | ' cursor_x:=0							' place the cursor at 0:0
18834     38 E4 05 F1 | 	add	objptr, #56
18838     F2 00 58 FC | 	wrword	#0, objptr
1883c                 | ' cursor_y:=0
1883c     02 E4 05 F1 | 	add	objptr, #2
18840     F2 00 48 FC | 	wrbyte	#0, objptr
18844                 | ' repeat i from 0 to 111
18844     00 20 06 F6 | 	mov	local02, #0
18848     F8 E5 05 F1 | 	add	objptr, #504
1884c     97 1A 48 FB | 	callpa	#(@LR__1822-@LR__1820)>>2,fcache_load_ptr_
18850                 | LR__1820
18850                 | '   cursor[i]:=0
18850     10 23 02 F6 | 	mov	local03, local02
18854     F2 22 02 F1 | 	add	local03, objptr
18858     11 01 48 FC | 	wrbyte	#0, local03
1885c     01 20 06 F1 | 	add	local02, #1
18860     70 20 56 F2 | 	cmps	local02, #112 wc
18864     E8 FF 9F CD |  if_b	jmp	#LR__1820
18868                 | ' repeat i from 112 to 127
18868     70 20 06 F6 | 	mov	local02, #112
1886c                 | LR__1821
1886c                 | '   cursor[i]:=color  
1886c     10 23 02 F6 | 	mov	local03, local02
18870     F2 22 02 F1 | 	add	local03, objptr
18874     11 1F 42 FC | 	wrbyte	local01, local03
18878     01 20 06 F1 | 	add	local02, #1
1887c     80 20 16 F2 | 	cmp	local02, #128 wc
18880     E8 FF 9F CD |  if_b	jmp	#LR__1821
18884                 | LR__1822
18884                 | ' 'repeat i from 0 to 127
18884                 | ' '  if ((i/8)//2)
18884                 | ' '    cursor[i]:=15
18884                 | ' '  else
18884                 | ' '    cursor[i]:=0
18884                 | ' '  if i>=120    
18884                 | ' '    cursor[i]:=40
18884                 | ' setspriteptr(17,@cursor)
18884     F2 14 02 F6 | 	mov	arg02, objptr
18888     01 00 00 FF 
1888c     32 E4 85 F1 | 	sub	objptr, ##562
18890     11 12 06 F6 | 	mov	arg01, #17
18894     48 03 B0 FD | 	call	#_hg010b_spin2_setspriteptr
18898                 | ' setspritesize(17,8,16)
18898     11 12 06 F6 | 	mov	arg01, #17
1889c     08 14 06 F6 | 	mov	arg02, #8
188a0     10 16 06 F6 | 	mov	arg03, #16
188a4     AC 03 B0 FD | 	call	#_hg010b_spin2_setspritesize
188a8                 | ' setspritepos(17,0,0)
188a8     11 12 06 F6 | 	mov	arg01, #17
188ac     00 14 06 F6 | 	mov	arg02, #0
188b0     00 16 06 F6 | 	mov	arg03, #0
188b4     50 03 B0 FD | 	call	#_hg010b_spin2_setspritepos
188b8     A7 F0 03 F6 | 	mov	ptra, fp
188bc     B2 00 A0 FD | 	call	#popregs_
188c0                 | _hg010b_spin2_initcursor_ret
188c0     2D 00 64 FD | 	ret
188c4                 | 
188c4                 | ' 
188c4                 | '  
188c4                 | ' pub setcursorcolor(color) |i
188c4                 | _hg010b_spin2_setcursorcolor
188c4                 | ' 
188c4                 | ' 
188c4                 | ' repeat i from 0 to 111
188c4     00 00 06 F6 | 	mov	_var01, #0
188c8     01 00 00 FF 
188cc     32 E4 05 F1 | 	add	objptr, ##562
188d0     97 1A 48 FB | 	callpa	#(@LR__1832-@LR__1830)>>2,fcache_load_ptr_
188d4                 | LR__1830
188d4                 | '   cursor[i]:=0
188d4     00 03 02 F6 | 	mov	_var02, _var01
188d8     F2 02 02 F1 | 	add	_var02, objptr
188dc     01 01 48 FC | 	wrbyte	#0, _var02
188e0     01 00 06 F1 | 	add	_var01, #1
188e4     70 00 56 F2 | 	cmps	_var01, #112 wc
188e8     E8 FF 9F CD |  if_b	jmp	#LR__1830
188ec                 | ' repeat i from 112 to 127
188ec     70 00 06 F6 | 	mov	_var01, #112
188f0                 | LR__1831
188f0                 | '   cursor[i]:=color  
188f0     00 03 02 F6 | 	mov	_var02, _var01
188f4     F2 02 02 F1 | 	add	_var02, objptr
188f8     01 13 42 FC | 	wrbyte	arg01, _var02
188fc     01 00 06 F1 | 	add	_var01, #1
18900     80 00 16 F2 | 	cmp	_var01, #128 wc
18904     E8 FF 9F CD |  if_b	jmp	#LR__1831
18908                 | LR__1832
18908     01 00 00 FF 
1890c     32 E4 85 F1 | 	sub	objptr, ##562
18910                 | _hg010b_spin2_setcursorcolor_ret
18910     2D 00 64 FD | 	ret
18914                 | 
18914                 | '  
18914                 | ' 
18914                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
18914                 | _hg010b_spin2_setmode
18914     02 4A 05 F6 | 	mov	COUNT_, #2
18918     A8 00 A0 FD | 	call	#pushregs_
1891c                 | ' 
1891c                 | ' 
1891c                 | ' dl_ptr:=@emptydl[0]
1891c     01 00 00 FF 
18920     19 E4 05 F1 | 	add	objptr, ##537
18924     F2 64 02 F6 | 	mov	muldivb_, objptr
18928     FD E5 85 F1 | 	sub	objptr, #509
1892c     F2 64 62 FC | 	wrlong	muldivb_, objptr
18930                 | ' 
18930                 | ' if cog>0 
18930     10 E4 05 F1 | 	add	objptr, #16
18934     F2 64 02 FB | 	rdlong	muldivb_, objptr
18938     2C E4 85 F1 | 	sub	objptr, #44
1893c     01 64 56 F2 | 	cmps	muldivb_, #1 wc
18940                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
18940     01 12 06 36 |  if_ae	mov	arg01, #1
18944     54 0F B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
18948                 | ' xres:=1024
18948     01 00 00 FF 
1894c     22 E4 05 F1 | 	add	objptr, ##546
18950     02 00 80 FF 
18954     F2 00 68 FC | 	wrlong	##1024, objptr
18958                 | ' yres:=576  
18958     04 E4 05 F1 | 	add	objptr, #4
1895c     01 00 80 FF 
18960     F2 80 68 FC | 	wrlong	##576, objptr
18964                 | ' ppl:=(timings[3])
18964     10 00 00 FF 
18968     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
1896c     F7 64 02 FB | 	rdlong	muldivb_, ptr__hg010b_spin2_dat__
18970     51 E5 85 F1 | 	sub	objptr, #337
18974     F2 64 62 FC | 	wrlong	muldivb_, objptr
18978                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
18978     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
1897c     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
18980     01 1E 66 F0 | 	shl	local01, #1
18984     80 E4 85 F1 | 	sub	objptr, #128
18988     F2 1E 62 FC | 	wrlong	local01, objptr
1898c                 | ' cpl1:=cpl '' todo remove
1898c     04 E4 05 F1 | 	add	objptr, #4
18990     F2 1E 62 FC | 	wrlong	local01, objptr
18994                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
18994     02 00 00 FF 
18998     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
1899c     41 E4 85 F1 | 	sub	objptr, #65
189a0     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
189a4                 | ' repeat i from 0 to 3
189a4     00 20 06 F6 | 	mov	local02, #0
189a8     02 00 00 FF 
189ac     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
189b0     08 E4 05 F1 | 	add	objptr, #8
189b4     97 20 48 FB | 	callpa	#(@LR__1841-@LR__1840)>>2,fcache_load_ptr_
189b8                 | LR__1840
189b8                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
189b8     10 1F 02 F6 | 	mov	local01, local02
189bc     02 1E 66 F0 | 	shl	local01, #2
189c0     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
189c4     F2 64 02 FB | 	rdlong	muldivb_, objptr
189c8     11 64 66 F0 | 	shl	muldivb_, #17
189cc     0F 1F 02 FB | 	rdlong	local01, local01
189d0     32 1F 02 F1 | 	add	local01, muldivb_
189d4     80 40 38 FF 
189d8     00 1E 06 F1 | 	add	local01, ##1887502336
189dc     10 65 02 F6 | 	mov	muldivb_, local02
189e0     02 64 66 F0 | 	shl	muldivb_, #2
189e4     F7 64 02 F1 | 	add	muldivb_, ptr__hg010b_spin2_dat__
189e8     32 1F 62 FC | 	wrlong	local01, muldivb_
189ec     01 20 06 F1 | 	add	local02, #1
189f0     04 20 56 F2 | 	cmps	local02, #4 wc
189f4     C0 FF 9F CD |  if_b	jmp	#LR__1840
189f8                 | LR__1841
189f8     20 E4 85 F1 | 	sub	objptr, #32
189fc                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
189fc     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
18a00     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
18a04     14 1E 66 FC | 	wrlong	local01, #20
18a08                 | ' hubset(timings[10])
18a08     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
18a0c     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
18a10     10 00 00 FF 
18a14     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
18a18     00 12 62 FD | 	hubset	arg01
18a1c                 | ' waitms(1)                                                   	' wait for stabilization
18a1c     01 12 06 F6 | 	mov	arg01, #1
18a20     38 25 B0 FD | 	call	#__system___waitms
18a24     10 00 00 FF 
18a28     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
18a2c     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
18a30     5D E4 05 F1 | 	add	objptr, #93
18a34     F2 20 62 FC | 	wrlong	local02, objptr
18a38     10 1F 52 F6 | 	abs	local01, local02 wc
18a3c     04 1E 46 F0 | 	shr	local01, #4
18a40     0F 1F 82 F6 | 	negc	local01, local01
18a44     9C E4 05 F1 | 	add	objptr, #156
18a48     F2 1E 62 FC | 	wrlong	local01, objptr
18a4c     A4 E4 85 F1 | 	sub	objptr, #164
18a50     F2 20 02 FB | 	rdlong	local02, objptr
18a54     08 E4 05 F1 | 	add	objptr, #8
18a58     F2 1E 02 FB | 	rdlong	local01, objptr
18a5c     0F 21 02 FD | 	qmul	local02, local01
18a60                 | ' lines:=timings[11]
18a60                 | ' t_lines:=lines/16
18a60                 | ' buflen:=cpl*lines						' framebuffer length in longs
18a60     29 E4 85 F1 | 	sub	objptr, #41
18a64                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
18a64     19 1E C6 F9 | 	decod	local01, #25
18a68                 | ' mode_ptr:=@timings						' set pointers to timings
18a68     2C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #44
18a6c                 | ' graphmode:=1024+512+192+48							' det global variable
18a6c                 | ' makedl(graphmode)							' make a DL for the mode
18a6c     03 00 00 FF 
18a70     F0 12 06 F6 | 	mov	arg01, ##1776
18a74     18 20 62 FD | 	getqx	local02
18a78     F2 20 62 FC | 	wrlong	local02, objptr
18a7c     34 E4 85 F1 | 	sub	objptr, #52
18a80     02 20 66 F0 | 	shl	local02, #2
18a84     10 1F 82 F1 | 	sub	local01, local02
18a88     F2 1E 62 FC | 	wrlong	local01, objptr
18a8c     14 E4 05 F1 | 	add	objptr, #20
18a90     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
18a94     79 E4 05 F1 | 	add	objptr, #121
18a98     03 00 80 FF 
18a9c     F2 E0 69 FC | 	wrlong	##1776, objptr
18aa0     8D E4 85 F1 | 	sub	objptr, #141
18aa4     10 00 00 FF 
18aa8     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
18aac     AC 00 B0 FD | 	call	#_hg010b_spin2_makedl
18ab0                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
18ab0     F2 1E 02 FB | 	rdlong	local01, objptr
18ab4     D9 E4 05 F1 | 	add	objptr, #217
18ab8     F2 1E 62 FC | 	wrlong	local01, objptr
18abc                 | ' s_font_ptr:=font_ptr
18abc     D5 E4 85 F1 | 	sub	objptr, #213
18ac0     F2 1E 02 FB | 	rdlong	local01, objptr
18ac4     D9 E4 05 F1 | 	add	objptr, #217
18ac8     F2 1E 62 FC | 	wrlong	local01, objptr
18acc                 | ' s_lines:=lines
18acc     80 E4 85 F1 | 	sub	objptr, #128
18ad0     F2 1E 02 FB | 	rdlong	local01, objptr
18ad4     84 E4 05 F1 | 	add	objptr, #132
18ad8     F2 1E 62 FC | 	wrlong	local01, objptr
18adc                 | ' s_buflen:=buflen
18adc     AD E4 85 F1 | 	sub	objptr, #173
18ae0     F2 1E 02 FB | 	rdlong	local01, objptr
18ae4     B5 E4 05 F1 | 	add	objptr, #181
18ae8     F2 1E 62 FC | 	wrlong	local01, objptr
18aec                 | ' s_cpl:=cpl
18aec     94 E4 85 F1 | 	sub	objptr, #148
18af0     F2 1E 02 FB | 	rdlong	local01, objptr
18af4     90 E4 05 F1 | 	add	objptr, #144
18af8     F2 1E 62 FC | 	wrlong	local01, objptr
18afc                 | ' s_cpl1:=cpl
18afc     90 E4 85 F1 | 	sub	objptr, #144
18b00     F2 1E 02 FB | 	rdlong	local01, objptr
18b04     98 E4 05 F1 | 	add	objptr, #152
18b08     F2 1E 62 FC | 	wrlong	local01, objptr
18b0c                 | ' st_lines:=t_lines
18b0c     0C E4 05 F1 | 	add	objptr, #12
18b10     F2 1E 02 FB | 	rdlong	local01, objptr
18b14     04 E4 05 F1 | 	add	objptr, #4
18b18     F2 1E 62 FC | 	wrlong	local01, objptr
18b1c                 | ' ppl:=ppl/xzoom  
18b1c     28 E4 85 F1 | 	sub	objptr, #40
18b20     F2 62 02 FB | 	rdlong	muldiva_, objptr
18b24     2C E4 05 F1 | 	add	objptr, #44
18b28     F2 64 02 FB | 	rdlong	muldivb_, objptr
18b2c     01 E5 85 F1 | 	sub	objptr, #257
18b30     BA 00 A0 FD | 	call	#divide_
18b34     D5 E4 05 F1 | 	add	objptr, #213
18b38     F2 64 62 FC | 	wrlong	muldivb_, objptr
18b3c                 | ' s_ppl:=ppl
18b3c     1C E4 05 F1 | 	add	objptr, #28
18b40     F2 64 62 FC | 	wrlong	muldivb_, objptr
18b44     F1 E4 85 F1 | 	sub	objptr, #241
18b48                 | ' waitms(20)							' wait 
18b48     14 12 06 F6 | 	mov	arg01, #20
18b4c     0C 24 B0 FD | 	call	#__system___waitms
18b50     A7 F0 03 F6 | 	mov	ptra, fp
18b54     B2 00 A0 FD | 	call	#popregs_
18b58                 | _hg010b_spin2_setmode_ret
18b58     2D 00 64 FD | 	ret
18b5c                 | 
18b5c                 | ' 
18b5c                 | ' 
18b5c                 | ' '****************************************************************************************************************
18b5c                 | ' '                                                                                                             	*
18b5c                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
18b5c                 | ' '                                                                                                             	*
18b5c                 | ' '****************************************************************************************************************
18b5c                 | ' 
18b5c                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
18b5c                 | _hg010b_spin2_makedl
18b5c                 | ' 
18b5c                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
18b5c                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
18b5c                 | ' repeat i from 0 to 11                                                           ' clear DL
18b5c     00 00 06 F6 | 	mov	_var01, #0
18b60     E9 E5 05 F1 | 	add	objptr, #489
18b64     97 0E 48 FB | 	callpa	#(@LR__1851-@LR__1850)>>2,fcache_load_ptr_
18b68                 | LR__1850
18b68                 | '   displaylist[i]:=0 
18b68     00 03 02 F6 | 	mov	_var02, _var01
18b6c     02 02 66 F0 | 	shl	_var02, #2
18b70     F2 02 02 F1 | 	add	_var02, objptr
18b74     01 01 68 FC | 	wrlong	#0, _var02
18b78     01 00 06 F1 | 	add	_var01, #1
18b7c     0C 00 56 F2 | 	cmps	_var01, #12 wc
18b80     E4 FF 9F CD |  if_b	jmp	#LR__1850
18b84                 | LR__1851
18b84                 | '                         ' 
18b84                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
18b84     8C E5 85 F1 | 	sub	objptr, #396
18b88     F2 02 02 FB | 	rdlong	_var02, objptr
18b8c     14 02 66 F0 | 	shl	_var02, #20
18b90     01 02 06 F1 | 	add	_var02, #1
18b94     04 E4 85 F1 | 	sub	objptr, #4
18b98     F2 00 02 FB | 	rdlong	_var01, objptr
18b9c     02 00 66 F0 | 	shl	_var01, #2
18ba0     04 00 66 F0 | 	shl	_var01, #4
18ba4     00 03 02 F1 | 	add	_var02, _var01
18ba8     90 E5 05 F1 | 	add	objptr, #400
18bac     F2 02 62 FC | 	wrlong	_var02, objptr
18bb0     E9 E5 85 F1 | 	sub	objptr, #489
18bb4                 | ' displaylist[1]:=buf_ptr<<4+%10  
18bb4     F2 02 02 FB | 	rdlong	_var02, objptr
18bb8     04 02 66 F0 | 	shl	_var02, #4
18bbc     02 02 06 F1 | 	add	_var02, #2
18bc0     ED E5 05 F1 | 	add	objptr, #493
18bc4     F2 02 62 FC | 	wrlong	_var02, objptr
18bc8                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
18bc8     04 E4 85 F1 | 	sub	objptr, #4
18bcc     F2 02 02 F6 | 	mov	_var02, objptr
18bd0     CD E5 85 F1 | 	sub	objptr, #461
18bd4     F2 02 62 FC | 	wrlong	_var02, objptr
18bd8     1C E4 85 F1 | 	sub	objptr, #28
18bdc                 | _hg010b_spin2_makedl_ret
18bdc     2D 00 64 FD | 	ret
18be0                 | 
18be0                 | ' 
18be0                 | ' 
18be0                 | ' '****************************************************************************************************************
18be0                 | ' '                                                                        					*
18be0                 | ' '  Graphic primitives                                                    					*
18be0                 | ' '                                                                        					*
18be0                 | ' '****************************************************************************************************************
18be0                 | ' 
18be0                 | ' pub setspriteptr(num,ptr)
18be0                 | _hg010b_spin2_setspriteptr
18be0                 | ' long[@spr1ptr+12*num]:=ptr
18be0     0D E5 05 F1 | 	add	objptr, #269
18be4     F2 00 02 F6 | 	mov	_var01, objptr
18be8     09 03 02 F6 | 	mov	_var02, arg01
18bec     01 02 66 F0 | 	shl	_var02, #1
18bf0     09 03 02 F1 | 	add	_var02, arg01
18bf4     02 02 66 F0 | 	shl	_var02, #2
18bf8     01 01 02 F1 | 	add	_var01, _var02
18bfc     00 15 62 FC | 	wrlong	arg02, _var01
18c00     0D E5 85 F1 | 	sub	objptr, #269
18c04                 | _hg010b_spin2_setspriteptr_ret
18c04     2D 00 64 FD | 	ret
18c08                 | 
18c08                 | ' 
18c08                 | ' pub setspritepos(num,x,y)
18c08                 | _hg010b_spin2_setspritepos
18c08                 | ' word[@spr1ptr+12*num+4]:=x
18c08     0D E5 05 F1 | 	add	objptr, #269
18c0c     F2 00 02 F6 | 	mov	_var01, objptr
18c10     09 03 02 F6 | 	mov	_var02, arg01
18c14     01 02 66 F0 | 	shl	_var02, #1
18c18     09 03 02 F1 | 	add	_var02, arg01
18c1c     02 02 66 F0 | 	shl	_var02, #2
18c20     01 01 02 F1 | 	add	_var01, _var02
18c24     04 00 06 F1 | 	add	_var01, #4
18c28     00 15 52 FC | 	wrword	arg02, _var01
18c2c                 | ' word[@spr1ptr+12*num+6]:=y
18c2c     F2 00 02 F6 | 	mov	_var01, objptr
18c30     09 03 02 F6 | 	mov	_var02, arg01
18c34     01 02 66 F0 | 	shl	_var02, #1
18c38     09 03 02 F1 | 	add	_var02, arg01
18c3c     02 02 66 F0 | 	shl	_var02, #2
18c40     01 01 02 F1 | 	add	_var01, _var02
18c44     06 00 06 F1 | 	add	_var01, #6
18c48     00 17 52 FC | 	wrword	arg03, _var01
18c4c     0D E5 85 F1 | 	sub	objptr, #269
18c50                 | _hg010b_spin2_setspritepos_ret
18c50     2D 00 64 FD | 	ret
18c54                 | 
18c54                 | ' 
18c54                 | ' pub setspritesize(num,w,h)
18c54                 | _hg010b_spin2_setspritesize
18c54                 | ' word[@spr1ptr+12*num+8]:=w
18c54     0D E5 05 F1 | 	add	objptr, #269
18c58     F2 00 02 F6 | 	mov	_var01, objptr
18c5c     09 03 02 F6 | 	mov	_var02, arg01
18c60     01 02 66 F0 | 	shl	_var02, #1
18c64     09 03 02 F1 | 	add	_var02, arg01
18c68     02 02 66 F0 | 	shl	_var02, #2
18c6c     01 01 02 F1 | 	add	_var01, _var02
18c70     08 00 06 F1 | 	add	_var01, #8
18c74     00 15 52 FC | 	wrword	arg02, _var01
18c78                 | ' word[@spr1ptr+12*num+10]:=h
18c78     F2 00 02 F6 | 	mov	_var01, objptr
18c7c     09 03 02 F6 | 	mov	_var02, arg01
18c80     01 02 66 F0 | 	shl	_var02, #1
18c84     09 03 02 F1 | 	add	_var02, arg01
18c88     02 02 66 F0 | 	shl	_var02, #2
18c8c     01 01 02 F1 | 	add	_var01, _var02
18c90     0A 00 06 F1 | 	add	_var01, #10
18c94     00 17 52 FC | 	wrword	arg03, _var01
18c98     0D E5 85 F1 | 	sub	objptr, #269
18c9c                 | _hg010b_spin2_setspritesize_ret
18c9c     2D 00 64 FD | 	ret
18ca0                 | 
18ca0                 | ' 
18ca0                 | ' 
18ca0                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
18ca0                 | ' 
18ca0                 | ' 
18ca0                 | ' pub putpixel(x,y,c)
18ca0                 | _hg010b_spin2_putpixel
18ca0     04 4A 05 F6 | 	mov	COUNT_, #4
18ca4     A8 00 A0 FD | 	call	#pushregs_
18ca8     09 1F 02 F6 | 	mov	local01, arg01
18cac                 | ' 
18cac                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
18cac     00 20 06 F6 | 	mov	local02, #0
18cb0     00 1E 56 F2 | 	cmps	local01, #0 wc
18cb4     01 20 66 36 |  if_ae	neg	local02, #1
18cb8     E5 E4 05 F1 | 	add	objptr, #229
18cbc     F2 1A 02 FB | 	rdlong	arg05, objptr
18cc0     02 1A 66 F0 | 	shl	arg05, #2
18cc4     0D 1F 52 F2 | 	cmps	local01, arg05 wc
18cc8     11 23 A2 F1 | 	subx	local03, local03
18ccc     11 21 02 F5 | 	and	local02, local03
18cd0     00 22 06 F6 | 	mov	local03, #0
18cd4     00 14 56 F2 | 	cmps	arg02, #0 wc
18cd8     01 22 66 36 |  if_ae	neg	local03, #1
18cdc     11 21 02 F5 | 	and	local02, local03
18ce0     04 E4 85 F1 | 	sub	objptr, #4
18ce4     F2 22 02 FB | 	rdlong	local03, objptr
18ce8     E1 E4 85 F1 | 	sub	objptr, #225
18cec     11 15 52 F2 | 	cmps	arg02, local03 wc
18cf0     12 25 A2 F1 | 	subx	local04, local04
18cf4     12 21 CA F7 | 	test	local02, local04 wz
18cf8     48 00 90 AD |  if_e	jmp	#LR__1860
18cfc     D9 E4 05 F1 | 	add	objptr, #217
18d00     F2 12 02 FB | 	rdlong	arg01, objptr
18d04     14 E4 05 F1 | 	add	objptr, #20
18d08     F2 24 02 FB | 	rdlong	local04, objptr
18d0c     02 24 66 F0 | 	shl	local04, #2
18d10     0A 25 02 FD | 	qmul	local04, arg02
18d14                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
18d14     0B 15 02 F6 | 	mov	arg02, arg03
18d18     01 16 06 F6 | 	mov	arg03, #1
18d1c     00 18 06 F6 | 	mov	arg04, #0
18d20     01 1A 06 F6 | 	mov	arg05, #1
18d24     0A 00 00 FF 
18d28     D3 E5 05 F1 | 	add	objptr, ##5587
18d2c     18 24 62 FD | 	getqx	local04
18d30     0F 25 02 F1 | 	add	local04, local01
18d34     12 13 02 F1 | 	add	arg01, local04
18d38     FC 14 B0 FD | 	call	#_psram_spin2_fill
18d3c     0B 00 00 FF 
18d40     C0 E4 85 F1 | 	sub	objptr, ##5824
18d44                 | LR__1860
18d44     A7 F0 03 F6 | 	mov	ptra, fp
18d48     B2 00 A0 FD | 	call	#popregs_
18d4c                 | _hg010b_spin2_putpixel_ret
18d4c     2D 00 64 FD | 	ret
18d50                 | 
18d50                 | ' 
18d50                 | ' pub putpixel2(x,y,c)
18d50                 | _hg010b_spin2_putpixel2
18d50     02 4A 05 F6 | 	mov	COUNT_, #2
18d54     A8 00 A0 FD | 	call	#pushregs_
18d58     D9 E4 05 F1 | 	add	objptr, #217
18d5c     F2 1E 02 FB | 	rdlong	local01, objptr
18d60     14 E4 05 F1 | 	add	objptr, #20
18d64     F2 1A 02 FB | 	rdlong	arg05, objptr
18d68     02 1A 66 F0 | 	shl	arg05, #2
18d6c     0A 1B 02 FD | 	qmul	arg05, arg02
18d70                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
18d70     0B 15 02 F6 | 	mov	arg02, arg03
18d74     01 16 06 F6 | 	mov	arg03, #1
18d78     00 18 06 F6 | 	mov	arg04, #0
18d7c     01 1A 06 F6 | 	mov	arg05, #1
18d80     0A 00 00 FF 
18d84     D3 E5 05 F1 | 	add	objptr, ##5587
18d88     18 20 62 FD | 	getqx	local02
18d8c     09 21 02 F1 | 	add	local02, arg01
18d90     10 1F 02 F1 | 	add	local01, local02
18d94     0F 13 02 F6 | 	mov	arg01, local01
18d98     9C 14 B0 FD | 	call	#_psram_spin2_fill
18d9c     0B 00 00 FF 
18da0     C0 E4 85 F1 | 	sub	objptr, ##5824
18da4     A7 F0 03 F6 | 	mov	ptra, fp
18da8     B2 00 A0 FD | 	call	#popregs_
18dac                 | _hg010b_spin2_putpixel2_ret
18dac     2D 00 64 FD | 	ret
18db0                 | 
18db0                 | ' 
18db0                 | ' pub getpixel2(x,y): c 
18db0                 | _hg010b_spin2_getpixel2
18db0     02 4A 05 F6 | 	mov	COUNT_, #2
18db4     A8 00 A0 FD | 	call	#pushregs_
18db8     0C F0 07 F1 | 	add	ptra, #12
18dbc     04 4E 05 F1 | 	add	fp, #4
18dc0     A7 12 62 FC | 	wrlong	arg01, fp
18dc4     04 4E 05 F1 | 	add	fp, #4
18dc8     A7 14 62 FC | 	wrlong	arg02, fp
18dcc     08 4E 85 F1 | 	sub	fp, #8
18dd0     A7 00 68 FC | 	wrlong	#0, fp
18dd4     A7 12 02 F6 | 	mov	arg01, fp
18dd8     D9 E4 05 F1 | 	add	objptr, #217
18ddc     F2 14 02 FB | 	rdlong	arg02, objptr
18de0     14 E4 05 F1 | 	add	objptr, #20
18de4     F2 16 02 FB | 	rdlong	arg03, objptr
18de8     02 16 66 F0 | 	shl	arg03, #2
18dec     08 4E 05 F1 | 	add	fp, #8
18df0     A7 FA 01 FB | 	rdlong	result1, fp
18df4     FD 16 02 FD | 	qmul	arg03, result1
18df8                 | ' 
18df8                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
18df8     04 4E 85 F1 | 	sub	fp, #4
18dfc     A7 1E 02 FB | 	rdlong	local01, fp
18e00     04 4E 85 F1 | 	sub	fp, #4
18e04     01 16 06 F6 | 	mov	arg03, #1
18e08     0A 00 00 FF 
18e0c     D3 E5 05 F1 | 	add	objptr, ##5587
18e10     18 20 62 FD | 	getqx	local02
18e14     0F 21 02 F1 | 	add	local02, local01
18e18     10 15 02 F1 | 	add	arg02, local02
18e1c     E0 12 B0 FD | 	call	#_psram_spin2_read1
18e20     0B 00 00 FF 
18e24     C0 E4 85 F1 | 	sub	objptr, ##5824
18e28                 | ' return c
18e28     A7 FA 01 FB | 	rdlong	result1, fp
18e2c     A7 F0 03 F6 | 	mov	ptra, fp
18e30     B2 00 A0 FD | 	call	#popregs_
18e34                 | _hg010b_spin2_getpixel2_ret
18e34     2D 00 64 FD | 	ret
18e38                 | 
18e38                 | '   
18e38                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
18e38                 | ' 
18e38                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
18e38                 | _hg010b_spin2_fastline
18e38     02 4A 05 F6 | 	mov	COUNT_, #2
18e3c     A8 00 A0 FD | 	call	#pushregs_
18e40     09 1F 02 F6 | 	mov	local01, arg01
18e44     0A 21 02 F6 | 	mov	local02, arg02
18e48                 | ' 
18e48                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
18e48     00 16 56 F2 | 	cmps	arg03, #0 wc
18e4c     F4 00 90 CD |  if_b	jmp	#LR__1870
18e50     01 00 00 FF 
18e54     26 E4 05 F1 | 	add	objptr, ##550
18e58     F2 1A 02 FB | 	rdlong	arg05, objptr
18e5c     01 00 00 FF 
18e60     26 E4 85 F1 | 	sub	objptr, ##550
18e64     0D 17 52 F2 | 	cmps	arg03, arg05 wc
18e68     D8 00 90 3D |  if_ae	jmp	#LR__1870
18e6c     00 1E 56 F2 | 	cmps	local01, #0 wc
18e70     00 20 56 C2 |  if_b	cmps	local02, #0 wc
18e74     CC 00 90 CD |  if_b	jmp	#LR__1870
18e78     01 00 00 FF 
18e7c     22 E4 05 F1 | 	add	objptr, ##546
18e80     F2 1A 02 FB | 	rdlong	arg05, objptr
18e84     01 00 00 FF 
18e88     22 E4 85 F1 | 	sub	objptr, ##546
18e8c     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
18e90     01 00 00 1F 
18e94     22 E4 05 11 |  if_a	add	objptr, ##546
18e98     F2 12 02 1B |  if_a	rdlong	arg01, objptr
18e9c     01 00 00 1F 
18ea0     22 E4 85 11 |  if_a	sub	objptr, ##546
18ea4     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
18ea8                 | '   return
18ea8     98 00 90 1D |  if_a	jmp	#LR__1870
18eac     10 1F 5A F2 | 	cmps	local01, local02 wcz
18eb0     0F 1B 02 16 |  if_a	mov	arg05, local01
18eb4     10 1F 02 16 |  if_a	mov	local01, local02
18eb8     0D 21 02 16 |  if_a	mov	local02, arg05
18ebc     00 1E 56 F2 | 	cmps	local01, #0 wc
18ec0     00 1E 06 C6 |  if_b	mov	local01, #0
18ec4     01 00 00 FF 
18ec8     22 E4 05 F1 | 	add	objptr, ##546
18ecc     F2 1A 02 FB | 	rdlong	arg05, objptr
18ed0     01 00 00 FF 
18ed4     22 E4 85 F1 | 	sub	objptr, ##546
18ed8     0D 21 52 F2 | 	cmps	local02, arg05 wc
18edc     01 00 00 3F 
18ee0     22 E4 05 31 |  if_ae	add	objptr, ##546
18ee4     F2 20 02 3B |  if_ae	rdlong	local02, objptr
18ee8     01 00 00 3F 
18eec     22 E4 85 31 |  if_ae	sub	objptr, ##546
18ef0     D9 E4 05 F1 | 	add	objptr, #217
18ef4     F2 12 02 FB | 	rdlong	arg01, objptr
18ef8     14 E4 05 F1 | 	add	objptr, #20
18efc     F2 1A 02 FB | 	rdlong	arg05, objptr
18f00     02 1A 66 F0 | 	shl	arg05, #2
18f04     0B 1B 02 FD | 	qmul	arg05, arg03
18f08                 | ' if x1>x2
18f08                 | '   x1,x2:=x2,x1
18f08                 | ' if x1<0 
18f08                 | '   x1:=0
18f08                 | ' if x2>=xres
18f08                 | '   x2:=xres-1  
18f08     01 20 86 31 |  if_ae	sub	local02, #1
18f0c                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
18f0c     01 16 06 F6 | 	mov	arg03, #1
18f10     10 17 02 F1 | 	add	arg03, local02
18f14     0F 17 82 F1 | 	sub	arg03, local01
18f18     0C 15 02 F6 | 	mov	arg02, arg04
18f1c     00 18 06 F6 | 	mov	arg04, #0
18f20     01 1A 06 F6 | 	mov	arg05, #1
18f24     0A 00 00 FF 
18f28     D3 E5 05 F1 | 	add	objptr, ##5587
18f2c     18 20 62 FD | 	getqx	local02
18f30     0F 21 02 F1 | 	add	local02, local01
18f34     10 13 02 F1 | 	add	arg01, local02
18f38     FC 12 B0 FD | 	call	#_psram_spin2_fill
18f3c     0B 00 00 FF 
18f40     C0 E4 85 F1 | 	sub	objptr, ##5824
18f44                 | LR__1870
18f44     A7 F0 03 F6 | 	mov	ptra, fp
18f48     B2 00 A0 FD | 	call	#popregs_
18f4c                 | _hg010b_spin2_fastline_ret
18f4c     2D 00 64 FD | 	ret
18f50                 | 
18f50                 | ' 
18f50                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
18f50                 | _hg010b_spin2_draw
18f50     0E 4A 05 F6 | 	mov	COUNT_, #14
18f54     A8 00 A0 FD | 	call	#pushregs_
18f58     09 1F 02 F6 | 	mov	local01, arg01
18f5c     0A 21 02 F6 | 	mov	local02, arg02
18f60     0B 23 02 F6 | 	mov	local03, arg03
18f64     0C 25 02 F6 | 	mov	local04, arg04
18f68     0D 27 02 F6 | 	mov	local05, arg05
18f6c                 | ' 
18f6c                 | ' if (y1==y2)
18f6c     12 21 0A F2 | 	cmp	local02, local04 wz
18f70     18 00 90 5D |  if_ne	jmp	#LR__1880
18f74                 | '   fastline(x1,x2,y1,c)
18f74     0F 13 02 F6 | 	mov	arg01, local01
18f78     11 15 02 F6 | 	mov	arg02, local03
18f7c     10 17 02 F6 | 	mov	arg03, local02
18f80     13 19 02 F6 | 	mov	arg04, local05
18f84     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
18f88     F8 00 90 FD | 	jmp	#LR__1886
18f8c                 | LR__1880
18f8c                 | ' else  
18f8c                 | '   x:=x1
18f8c     0F 29 02 F6 | 	mov	local06, local01
18f90                 | '   y:=y1
18f90     10 2B 02 F6 | 	mov	local07, local02
18f94                 | ' 
18f94                 | '   if (x1<x2) 
18f94     11 1F 52 F2 | 	cmps	local01, local03 wc
18f98                 | '     xi:=1
18f98     01 2C 06 C6 |  if_b	mov	local08, #1
18f9c                 | '     dx:=x2-x1
18f9c     11 2F 02 C6 |  if_b	mov	local09, local03
18fa0     0F 2F 82 C1 |  if_b	sub	local09, local01
18fa4                 | '   else
18fa4                 | '     xi:=-1
18fa4     01 2C 66 36 |  if_ae	neg	local08, #1
18fa8                 | '     dx:=x1-x2
18fa8     11 1F 82 31 |  if_ae	sub	local01, local03
18fac     0F 2F 02 36 |  if_ae	mov	local09, local01
18fb0                 | '   
18fb0                 | '   if (y1<y2) 
18fb0     12 21 52 F2 | 	cmps	local02, local04 wc
18fb4                 | '     yi:=1
18fb4     01 30 06 C6 |  if_b	mov	local10, #1
18fb8                 | '     dy:=y2-y1
18fb8     12 33 02 C6 |  if_b	mov	local11, local04
18fbc     10 33 82 C1 |  if_b	sub	local11, local02
18fc0                 | '   else
18fc0                 | '     yi:=-1
18fc0     01 30 66 36 |  if_ae	neg	local10, #1
18fc4                 | '     dy:=y1-y2
18fc4     12 21 82 31 |  if_ae	sub	local02, local04
18fc8     10 33 02 36 |  if_ae	mov	local11, local02
18fcc                 | ' 
18fcc                 | '   putpixel(x,y,c)
18fcc     13 17 02 F6 | 	mov	arg03, local05
18fd0     14 13 02 F6 | 	mov	arg01, local06
18fd4     15 15 02 F6 | 	mov	arg02, local07
18fd8     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
18fdc                 | ' 
18fdc                 | '   if (dx>dy)
18fdc     19 2F 5A F2 | 	cmps	local09, local11 wcz
18fe0     50 00 90 ED |  if_be	jmp	#LR__1882
18fe4                 | '     ai:=(dy-dx)*2
18fe4     19 35 02 F6 | 	mov	local12, local11
18fe8     17 35 82 F1 | 	sub	local12, local09
18fec     01 34 66 F0 | 	shl	local12, #1
18ff0                 | '     bi:=dy*2
18ff0     01 32 66 F0 | 	shl	local11, #1
18ff4     19 37 02 F6 | 	mov	local13, local11
18ff8                 | '     d:= bi-dx
18ff8     1B 39 02 F6 | 	mov	local14, local13
18ffc     17 39 82 F1 | 	sub	local14, local09
19000                 | '     repeat while (x<>x2) 
19000                 | LR__1881
19000     11 29 0A F2 | 	cmp	local06, local03 wz
19004     7C 00 90 AD |  if_e	jmp	#LR__1885
19008                 | '       if (d>=0) 
19008     00 38 56 F2 | 	cmps	local14, #0 wc
1900c                 | '         x+=xi
1900c     16 29 02 31 |  if_ae	add	local06, local08
19010                 | '         y+=yi
19010     18 2B 02 31 |  if_ae	add	local07, local10
19014                 | '         d+=ai
19014     1A 39 02 31 |  if_ae	add	local14, local12
19018                 | '       else
19018                 | '         d+=bi
19018     1B 39 02 C1 |  if_b	add	local14, local13
1901c                 | '         x+=xi
1901c     16 29 02 C1 |  if_b	add	local06, local08
19020                 | '       putpixel(x,y,c)
19020     14 13 02 F6 | 	mov	arg01, local06
19024     15 15 02 F6 | 	mov	arg02, local07
19028     13 17 02 F6 | 	mov	arg03, local05
1902c     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
19030     CC FF 9F FD | 	jmp	#LR__1881
19034                 | LR__1882
19034                 | '   else
19034                 | '     ai:=(dx-dy)*2
19034     17 35 02 F6 | 	mov	local12, local09
19038     19 35 82 F1 | 	sub	local12, local11
1903c     01 34 66 F0 | 	shl	local12, #1
19040                 | '     bi:=dx*2
19040     01 2E 66 F0 | 	shl	local09, #1
19044     17 37 02 F6 | 	mov	local13, local09
19048                 | '     d:=bi-dy
19048     1B 39 02 F6 | 	mov	local14, local13
1904c     19 39 82 F1 | 	sub	local14, local11
19050                 | '     repeat while (y<>y2)
19050                 | LR__1883
19050     12 2B 0A F2 | 	cmp	local07, local04 wz
19054     2C 00 90 AD |  if_e	jmp	#LR__1884
19058                 | '       if (d>=0)
19058     00 38 56 F2 | 	cmps	local14, #0 wc
1905c                 | '         x+=xi
1905c     16 29 02 31 |  if_ae	add	local06, local08
19060                 | '         y+=yi
19060     18 2B 02 31 |  if_ae	add	local07, local10
19064                 | '         d+=ai
19064     1A 39 02 31 |  if_ae	add	local14, local12
19068                 | '       else
19068                 | '         d+=bi
19068     1B 39 02 C1 |  if_b	add	local14, local13
1906c                 | '         y+=yi
1906c     18 2B 02 C1 |  if_b	add	local07, local10
19070                 | '       putpixel(x, y,c)
19070     14 13 02 F6 | 	mov	arg01, local06
19074     15 15 02 F6 | 	mov	arg02, local07
19078     13 17 02 F6 | 	mov	arg03, local05
1907c     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
19080     CC FF 9F FD | 	jmp	#LR__1883
19084                 | LR__1884
19084                 | LR__1885
19084                 | LR__1886
19084     A7 F0 03 F6 | 	mov	ptra, fp
19088     B2 00 A0 FD | 	call	#popregs_
1908c                 | _hg010b_spin2_draw_ret
1908c     2D 00 64 FD | 	ret
19090                 | 
19090                 | '  
19090                 | ' pub fillpush(val) 
19090                 | _hg010b_spin2_fillpush
19090                 | ' fillstack[fillptr]:=val
19090     0B 00 00 FF 
19094     B6 E4 05 F1 | 	add	objptr, ##5814
19098     F2 00 02 FB | 	rdlong	_var01, objptr
1909c     02 00 66 F0 | 	shl	_var01, #2
190a0     0A 00 00 FF 
190a4     00 E4 85 F1 | 	sub	objptr, ##5120
190a8     F2 00 02 F1 | 	add	_var01, objptr
190ac     00 13 62 FC | 	wrlong	arg01, _var01
190b0                 | ' fillptr+=1   
190b0     0A 00 00 FF 
190b4     00 E4 05 F1 | 	add	objptr, ##5120
190b8     F2 00 02 FB | 	rdlong	_var01, objptr
190bc     01 00 06 F1 | 	add	_var01, #1
190c0     F2 00 62 FC | 	wrlong	_var01, objptr
190c4     0B 00 00 FF 
190c8     B6 E4 85 F1 | 	sub	objptr, ##5814
190cc                 | _hg010b_spin2_fillpush_ret
190cc     2D 00 64 FD | 	ret
190d0                 | 
190d0                 | ' 
190d0                 | '     
190d0                 | ' pub fillpop() : val
190d0                 | _hg010b_spin2_fillpop
190d0                 | ' 
190d0                 | ' fillptr-=1
190d0     0B 00 00 FF 
190d4     B6 E4 05 F1 | 	add	objptr, ##5814
190d8     F2 FA 01 FB | 	rdlong	result1, objptr
190dc     01 FA 85 F1 | 	sub	result1, #1
190e0     F2 FA 61 FC | 	wrlong	result1, objptr
190e4                 | ' if fillptr<0
190e4     0B 00 00 FF 
190e8     B6 E4 85 F1 | 	sub	objptr, ##5814
190ec     00 FA 55 F2 | 	cmps	result1, #0 wc
190f0                 | '   fillptr:=0
190f0     0B 00 00 CF 
190f4     B6 E4 05 C1 |  if_b	add	objptr, ##5814
190f8     F2 00 68 CC |  if_b	wrlong	#0, objptr
190fc     0B 00 00 CF 
19100     B6 E4 85 C1 |  if_b	sub	objptr, ##5814
19104                 | '   val:=-12345
19104     E7 FF 7F CF 
19108     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
1910c     28 00 90 CD |  if_b	jmp	#LR__1890
19110                 | ' else 
19110                 | '   val:=fillstack[fillptr]
19110     0B 00 00 FF 
19114     B6 E4 05 F1 | 	add	objptr, ##5814
19118     F2 00 02 FB | 	rdlong	_var01, objptr
1911c     02 00 66 F0 | 	shl	_var01, #2
19120     0A 00 00 FF 
19124     00 E4 85 F1 | 	sub	objptr, ##5120
19128     F2 00 02 F1 | 	add	_var01, objptr
1912c     00 01 02 FB | 	rdlong	_var01, _var01
19130     01 00 00 FF 
19134     B6 E4 85 F1 | 	sub	objptr, ##694
19138                 | LR__1890
19138                 | ' return val
19138     00 FB 01 F6 | 	mov	result1, _var01
1913c                 | _hg010b_spin2_fillpop_ret
1913c     2D 00 64 FD | 	ret
19140                 | 
19140                 | ' 
19140                 | '       
19140                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
19140                 | _hg010b_spin2_fill
19140     0B 4A 05 F6 | 	mov	COUNT_, #11
19144     A8 00 A0 FD | 	call	#pushregs_
19148                 | ' 
19148                 | ' newcolor:=newcolor & 255
19148     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
1914c                 | ' oldcolor:=oldcolor & 255
1914c     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
19150                 | ' 
19150                 | ' if (oldcolor == newcolor) 
19150     0F 21 0A F2 | 	cmp	local02, local01 wz
19154                 | '   return
19154     70 02 90 AD |  if_e	jmp	#LR__1909
19158                 | ' 
19158                 | ' fillptr:=0
19158     0B 00 00 FF 
1915c     B6 E4 05 F1 | 	add	objptr, ##5814
19160     F2 00 68 FC | 	wrlong	#0, objptr
19164                 | ' fillmax:=0
19164     04 E4 05 F1 | 	add	objptr, #4
19168     F2 00 68 FC | 	wrlong	#0, objptr
1916c     0B 00 00 FF 
19170     BA E4 85 F1 | 	sub	objptr, ##5818
19174                 | ' fillpush(x)
19174     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
19178                 | ' fillpush(y)
19178     0A 13 02 F6 | 	mov	arg01, arg02
1917c     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
19180                 | ' y:=fillpop()
19180     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
19184     FD 22 02 F6 | 	mov	local03, result1
19188                 | ' x:=fillpop()
19188     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
1918c     FD 24 02 F6 | 	mov	local04, result1
19190                 | ' 'pinhigh(38)
19190                 | ' repeat while (x>-1)       
19190                 | LR__1900
19190     00 24 56 F2 | 	cmps	local04, #0 wc
19194     30 02 90 CD |  if_b	jmp	#LR__1908
19198                 | '  ' pintoggle(39)
19198                 | '   x1 := x
19198     12 27 02 F6 | 	mov	local05, local04
1919c                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
1919c                 | LR__1901
1919c     00 28 06 F6 | 	mov	local06, #0
191a0     00 2A 06 F6 | 	mov	local07, #0
191a4     00 26 56 F2 | 	cmps	local05, #0 wc
191a8     01 2A 66 36 |  if_ae	neg	local07, #1
191ac     00 2A 0E F2 | 	cmp	local07, #0 wz
191b0     00 28 26 56 |  if_ne	not	local06, #0
191b4     00 2C 06 F6 | 	mov	local08, #0
191b8     00 2E 06 F6 | 	mov	local09, #0
191bc     11 15 02 F6 | 	mov	arg02, local03
191c0     13 13 02 F6 | 	mov	arg01, local05
191c4     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
191c8     10 FB 09 F2 | 	cmp	result1, local02 wz
191cc     00 2E 26 A6 |  if_e	not	local09, #0
191d0     00 2E 0E F2 | 	cmp	local09, #0 wz
191d4     00 2C 26 56 |  if_ne	not	local08, #0
191d8     16 29 CA F7 | 	test	local06, local08 wz
191dc                 | '     x1--
191dc     01 26 86 51 |  if_ne	sub	local05, #1
191e0     B8 FF 9F 5D |  if_ne	jmp	#LR__1901
191e4                 | '   x1++
191e4     01 26 06 F1 | 	add	local05, #1
191e8                 | '   spanabove := 0
191e8     00 30 06 F6 | 	mov	local10, #0
191ec                 | '   spanbelow := 0
191ec     00 32 06 F6 | 	mov	local11, #0
191f0                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
191f0                 | LR__1902
191f0     00 28 06 F6 | 	mov	local06, #0
191f4     02 00 00 FF 
191f8     00 26 56 F2 | 	cmps	local05, ##1024 wc
191fc     00 28 26 C6 |  if_b	not	local06, #0
19200     00 2C 06 F6 | 	mov	local08, #0
19204     00 2E 06 F6 | 	mov	local09, #0
19208     11 15 02 F6 | 	mov	arg02, local03
1920c     13 13 02 F6 | 	mov	arg01, local05
19210     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
19214     10 FB 09 F2 | 	cmp	result1, local02 wz
19218     00 2E 26 A6 |  if_e	not	local09, #0
1921c     00 2E 0E F2 | 	cmp	local09, #0 wz
19220     00 2C 26 56 |  if_ne	not	local08, #0
19224     16 29 CA F7 | 	test	local06, local08 wz
19228     88 01 90 AD |  if_e	jmp	#LR__1907
1922c                 | '     putpixel2 (x1,y, newcolor & 255)
1922c     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
19230     13 13 02 F6 | 	mov	arg01, local05
19234     11 15 02 F6 | 	mov	arg02, local03
19238     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
1923c                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
1923c     00 28 06 F6 | 	mov	local06, #0
19240     00 2A 06 F6 | 	mov	local07, #0
19244     00 30 0E F2 | 	cmp	local10, #0 wz
19248     01 22 56 A2 |  if_e	cmps	local03, #1 wc
1924c     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
19250     00 2A 0E F2 | 	cmp	local07, #0 wz
19254     00 28 26 56 |  if_ne	not	local06, #0
19258     00 2C 06 F6 | 	mov	local08, #0
1925c     00 2E 06 F6 | 	mov	local09, #0
19260     11 15 02 F6 | 	mov	arg02, local03
19264     01 14 86 F1 | 	sub	arg02, #1
19268     13 13 02 F6 | 	mov	arg01, local05
1926c     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
19270     10 FB 09 F2 | 	cmp	result1, local02 wz
19274     00 2E 26 A6 |  if_e	not	local09, #0
19278     00 2E 0E F2 | 	cmp	local09, #0 wz
1927c     00 2C 26 56 |  if_ne	not	local08, #0
19280     16 29 CA F7 | 	test	local06, local08 wz
19284     1C 00 90 AD |  if_e	jmp	#LR__1903
19288                 | '       fillpush(x1)
19288     13 13 02 F6 | 	mov	arg01, local05
1928c     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
19290                 | '       fillpush(y-1)
19290     11 13 02 F6 | 	mov	arg01, local03
19294     01 12 86 F1 | 	sub	arg01, #1
19298     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
1929c                 | '       spanabove := 1 
1929c     01 30 06 F6 | 	mov	local10, #1
192a0     4C 00 90 FD | 	jmp	#LR__1904
192a4                 | LR__1903
192a4                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
192a4     00 28 06 F6 | 	mov	local06, #0
192a8     00 2A 06 F6 | 	mov	local07, #0
192ac     00 30 0E F2 | 	cmp	local10, #0 wz
192b0     01 22 56 52 |  if_ne	cmps	local03, #1 wc
192b4     01 2A 66 16 |  if_a	neg	local07, #1
192b8     00 2A 0E F2 | 	cmp	local07, #0 wz
192bc     00 28 26 56 |  if_ne	not	local06, #0
192c0     00 2C 06 F6 | 	mov	local08, #0
192c4     00 2E 06 F6 | 	mov	local09, #0
192c8     11 15 02 F6 | 	mov	arg02, local03
192cc     01 14 86 F1 | 	sub	arg02, #1
192d0     13 13 02 F6 | 	mov	arg01, local05
192d4     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
192d8     10 FB 09 F2 | 	cmp	result1, local02 wz
192dc     00 2E 26 56 |  if_ne	not	local09, #0
192e0     00 2E 0E F2 | 	cmp	local09, #0 wz
192e4     00 2C 26 56 |  if_ne	not	local08, #0
192e8     16 29 CA F7 | 	test	local06, local08 wz
192ec                 | '       spanabove := 0 
192ec     00 30 06 56 |  if_ne	mov	local10, #0
192f0                 | LR__1904
192f0                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
192f0     00 28 06 F6 | 	mov	local06, #0
192f4     00 2A 06 F6 | 	mov	local07, #0
192f8     00 32 0E F2 | 	cmp	local11, #0 wz
192fc     01 00 00 AF 
19300     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
19304     01 2A 66 86 |  if_c_and_z	neg	local07, #1
19308     00 2A 0E F2 | 	cmp	local07, #0 wz
1930c     00 28 26 56 |  if_ne	not	local06, #0
19310     00 2C 06 F6 | 	mov	local08, #0
19314     00 2E 06 F6 | 	mov	local09, #0
19318     11 15 02 F6 | 	mov	arg02, local03
1931c     01 14 06 F1 | 	add	arg02, #1
19320     13 13 02 F6 | 	mov	arg01, local05
19324     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
19328     10 FB 09 F2 | 	cmp	result1, local02 wz
1932c     00 2E 26 A6 |  if_e	not	local09, #0
19330     00 2E 0E F2 | 	cmp	local09, #0 wz
19334     00 2C 26 56 |  if_ne	not	local08, #0
19338     16 29 CA F7 | 	test	local06, local08 wz
1933c     1C 00 90 AD |  if_e	jmp	#LR__1905
19340                 | '       fillpush(x1)
19340     13 13 02 F6 | 	mov	arg01, local05
19344     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
19348                 | '       fillpush(y + 1)
19348     11 13 02 F6 | 	mov	arg01, local03
1934c     01 12 06 F1 | 	add	arg01, #1
19350     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
19354                 | '       spanBelow := 1
19354     01 32 06 F6 | 	mov	local11, #1
19358     50 00 90 FD | 	jmp	#LR__1906
1935c                 | LR__1905
1935c                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
1935c     00 28 06 F6 | 	mov	local06, #0
19360     00 2A 06 F6 | 	mov	local07, #0
19364     00 32 0E F2 | 	cmp	local11, #0 wz
19368     01 00 00 5F 
1936c     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
19370     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
19374     00 2A 0E F2 | 	cmp	local07, #0 wz
19378     00 28 26 56 |  if_ne	not	local06, #0
1937c     00 2C 06 F6 | 	mov	local08, #0
19380     00 2E 06 F6 | 	mov	local09, #0
19384     11 15 02 F6 | 	mov	arg02, local03
19388     01 14 06 F1 | 	add	arg02, #1
1938c     13 13 02 F6 | 	mov	arg01, local05
19390     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
19394     10 FB 09 F2 | 	cmp	result1, local02 wz
19398     00 2E 26 56 |  if_ne	not	local09, #0
1939c     00 2E 0E F2 | 	cmp	local09, #0 wz
193a0     00 2C 26 56 |  if_ne	not	local08, #0
193a4     16 29 CA F7 | 	test	local06, local08 wz
193a8                 | '       spanbelow := 0
193a8     00 32 06 56 |  if_ne	mov	local11, #0
193ac                 | LR__1906
193ac                 | '     x1++
193ac     01 26 06 F1 | 	add	local05, #1
193b0     3C FE 9F FD | 	jmp	#LR__1902
193b4                 | LR__1907
193b4                 | '   y:=fillpop()
193b4     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
193b8     FD 22 02 F6 | 	mov	local03, result1
193bc                 | '   x:=fillpop()
193bc     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
193c0     FD 24 02 F6 | 	mov	local04, result1
193c4     C8 FD 9F FD | 	jmp	#LR__1900
193c8                 | LR__1908
193c8                 | LR__1909
193c8     A7 F0 03 F6 | 	mov	ptra, fp
193cc     B2 00 A0 FD | 	call	#popregs_
193d0                 | _hg010b_spin2_fill_ret
193d0     2D 00 64 FD | 	ret
193d4                 | 
193d4                 | ' 'pinlow(38)    
193d4                 | ' 
193d4                 | ' '-- A filled circle -----------------------------------------------------
193d4                 | ' 
193d4                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
193d4                 | _hg010b_spin2_fcircle
193d4     08 4A 05 F6 | 	mov	COUNT_, #8
193d8     A8 00 A0 FD | 	call	#pushregs_
193dc     0B 1F 02 F6 | 	mov	local01, arg03
193e0     FF FF 7F FF 
193e4     FE 1F 06 FD | 	qmul	local01, ##-2
193e8     09 21 02 F6 | 	mov	local02, arg01
193ec     0A 23 02 F6 | 	mov	local03, arg02
193f0     0C 25 02 F6 | 	mov	local04, arg04
193f4                 | ' 
193f4                 | ' d:=5-4*r
193f4     0F 19 02 F6 | 	mov	arg04, local01
193f8     02 18 66 F0 | 	shl	arg04, #2
193fc     05 26 06 F6 | 	mov	local05, #5
19400     0C 27 82 F1 | 	sub	local05, arg04
19404                 | ' x:=0
19404     00 28 06 F6 | 	mov	local06, #0
19408                 | ' y:=r
19408                 | ' da:=(-2*r+5)*4
19408                 | ' db:=3*4
19408     0C 2A 06 F6 | 	mov	local07, #12
1940c                 | ' repeat while (x<=y) 
1940c     18 2C 62 FD | 	getqx	local08
19410     05 2C 06 F1 | 	add	local08, #5
19414     02 2C 66 F0 | 	shl	local08, #2
19418                 | LR__1910
19418     0F 29 5A F2 | 	cmps	local06, local01 wcz
1941c     B4 00 90 1D |  if_a	jmp	#LR__1912
19420                 | '   fastline(x0-x,x0+x,y0-y,c)
19420     10 13 02 F6 | 	mov	arg01, local02
19424     14 13 82 F1 | 	sub	arg01, local06
19428     10 15 02 F6 | 	mov	arg02, local02
1942c     14 15 02 F1 | 	add	arg02, local06
19430     11 17 02 F6 | 	mov	arg03, local03
19434     0F 17 82 F1 | 	sub	arg03, local01
19438     12 19 02 F6 | 	mov	arg04, local04
1943c     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
19440                 | '   fastline(x0-x,x0+x,y0+y,c)
19440     10 13 02 F6 | 	mov	arg01, local02
19444     14 13 82 F1 | 	sub	arg01, local06
19448     10 15 02 F6 | 	mov	arg02, local02
1944c     14 15 02 F1 | 	add	arg02, local06
19450     11 17 02 F6 | 	mov	arg03, local03
19454     0F 17 02 F1 | 	add	arg03, local01
19458     12 19 02 F6 | 	mov	arg04, local04
1945c     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
19460                 | '   fastline(x0-y,x0+y,y0-x,c)
19460     10 13 02 F6 | 	mov	arg01, local02
19464     0F 13 82 F1 | 	sub	arg01, local01
19468     10 15 02 F6 | 	mov	arg02, local02
1946c     0F 15 02 F1 | 	add	arg02, local01
19470     11 17 02 F6 | 	mov	arg03, local03
19474     14 17 82 F1 | 	sub	arg03, local06
19478     12 19 02 F6 | 	mov	arg04, local04
1947c     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
19480                 | '   fastline(x0-y,x0+y,y0+x,c)
19480     10 13 02 F6 | 	mov	arg01, local02
19484     0F 13 82 F1 | 	sub	arg01, local01
19488     10 15 02 F6 | 	mov	arg02, local02
1948c     0F 15 02 F1 | 	add	arg02, local01
19490     11 17 02 F6 | 	mov	arg03, local03
19494     14 17 02 F1 | 	add	arg03, local06
19498     12 19 02 F6 | 	mov	arg04, local04
1949c     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
194a0                 | '   if d>0 
194a0     01 26 56 F2 | 	cmps	local05, #1 wc
194a4     18 00 90 CD |  if_b	jmp	#LR__1911
194a8                 | '     d+=da
194a8     16 27 02 F1 | 	add	local05, local08
194ac                 | '     y-=1
194ac     01 1E 86 F1 | 	sub	local01, #1
194b0                 | '     x+=1
194b0     01 28 06 F1 | 	add	local06, #1
194b4                 | '     da+=4*4
194b4     10 2C 06 F1 | 	add	local08, #16
194b8                 | '     db+=2*4
194b8     08 2A 06 F1 | 	add	local07, #8
194bc     58 FF 9F FD | 	jmp	#LR__1910
194c0                 | LR__1911
194c0                 | '   else
194c0                 | '     d+=db
194c0     15 27 02 F1 | 	add	local05, local07
194c4                 | '     x+=1
194c4     01 28 06 F1 | 	add	local06, #1
194c8                 | '     da+=2*4
194c8     08 2C 06 F1 | 	add	local08, #8
194cc                 | '     db+=2*4
194cc     08 2A 06 F1 | 	add	local07, #8
194d0     44 FF 9F FD | 	jmp	#LR__1910
194d4                 | LR__1912
194d4     A7 F0 03 F6 | 	mov	ptra, fp
194d8     B2 00 A0 FD | 	call	#popregs_
194dc                 | _hg010b_spin2_fcircle_ret
194dc     2D 00 64 FD | 	ret
194e0                 | 
194e0                 | '  
194e0                 | ' '-- A circle ------------------------------------------------------------ 
194e0                 | '  
194e0                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
194e0                 | _hg010b_spin2_circle
194e0     08 4A 05 F6 | 	mov	COUNT_, #8
194e4     A8 00 A0 FD | 	call	#pushregs_
194e8     0B 1F 02 F6 | 	mov	local01, arg03
194ec     FF FF 7F FF 
194f0     FE 1F 06 FD | 	qmul	local01, ##-2
194f4     09 21 02 F6 | 	mov	local02, arg01
194f8     0A 23 02 F6 | 	mov	local03, arg02
194fc     0C 25 02 F6 | 	mov	local04, arg04
19500                 | ' 
19500                 | '  
19500                 | ' d:=5-4*r
19500     0F 19 02 F6 | 	mov	arg04, local01
19504     02 18 66 F0 | 	shl	arg04, #2
19508     05 26 06 F6 | 	mov	local05, #5
1950c     0C 27 82 F1 | 	sub	local05, arg04
19510                 | ' x:=0
19510     00 28 06 F6 | 	mov	local06, #0
19514                 | ' y:=r
19514                 | ' da:=(-2*r+5)*4
19514                 | ' db:=3*4
19514     0C 2A 06 F6 | 	mov	local07, #12
19518                 | ' repeat while (x<=y) 
19518     18 2C 62 FD | 	getqx	local08
1951c     05 2C 06 F1 | 	add	local08, #5
19520     02 2C 66 F0 | 	shl	local08, #2
19524                 | LR__1920
19524     0F 29 5A F2 | 	cmps	local06, local01 wcz
19528     F4 00 90 1D |  if_a	jmp	#LR__1922
1952c                 | '   putpixel(x0-x,y0-y,c)
1952c     10 13 02 F6 | 	mov	arg01, local02
19530     14 13 82 F1 | 	sub	arg01, local06
19534     11 15 02 F6 | 	mov	arg02, local03
19538     0F 15 82 F1 | 	sub	arg02, local01
1953c     12 17 02 F6 | 	mov	arg03, local04
19540     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
19544                 | '   putpixel(x0-x,y0+y,c)
19544     10 13 02 F6 | 	mov	arg01, local02
19548     14 13 82 F1 | 	sub	arg01, local06
1954c     11 15 02 F6 | 	mov	arg02, local03
19550     0F 15 02 F1 | 	add	arg02, local01
19554     12 17 02 F6 | 	mov	arg03, local04
19558     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1955c                 | '   putpixel(x0+x,y0-y,c)
1955c     10 13 02 F6 | 	mov	arg01, local02
19560     14 13 02 F1 | 	add	arg01, local06
19564     11 15 02 F6 | 	mov	arg02, local03
19568     0F 15 82 F1 | 	sub	arg02, local01
1956c     12 17 02 F6 | 	mov	arg03, local04
19570     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
19574                 | '   putpixel(x0+x,y0+y,c)
19574     10 13 02 F6 | 	mov	arg01, local02
19578     14 13 02 F1 | 	add	arg01, local06
1957c     11 15 02 F6 | 	mov	arg02, local03
19580     0F 15 02 F1 | 	add	arg02, local01
19584     12 17 02 F6 | 	mov	arg03, local04
19588     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1958c                 | '   putpixel(x0-y,y0-x,c)
1958c     10 13 02 F6 | 	mov	arg01, local02
19590     0F 13 82 F1 | 	sub	arg01, local01
19594     11 15 02 F6 | 	mov	arg02, local03
19598     14 15 82 F1 | 	sub	arg02, local06
1959c     12 17 02 F6 | 	mov	arg03, local04
195a0     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
195a4                 | '   putpixel(x0-y,y0+x,c)
195a4     10 13 02 F6 | 	mov	arg01, local02
195a8     0F 13 82 F1 | 	sub	arg01, local01
195ac     11 15 02 F6 | 	mov	arg02, local03
195b0     14 15 02 F1 | 	add	arg02, local06
195b4     12 17 02 F6 | 	mov	arg03, local04
195b8     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
195bc                 | '   putpixel(x0+y,y0-x,c)
195bc     10 13 02 F6 | 	mov	arg01, local02
195c0     0F 13 02 F1 | 	add	arg01, local01
195c4     11 15 02 F6 | 	mov	arg02, local03
195c8     14 15 82 F1 | 	sub	arg02, local06
195cc     12 17 02 F6 | 	mov	arg03, local04
195d0     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
195d4                 | '   putpixel(x0+y,y0+x,c)
195d4     10 13 02 F6 | 	mov	arg01, local02
195d8     0F 13 02 F1 | 	add	arg01, local01
195dc     11 15 02 F6 | 	mov	arg02, local03
195e0     14 15 02 F1 | 	add	arg02, local06
195e4     12 17 02 F6 | 	mov	arg03, local04
195e8     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
195ec                 | '   if d>0 
195ec     01 26 56 F2 | 	cmps	local05, #1 wc
195f0     18 00 90 CD |  if_b	jmp	#LR__1921
195f4                 | '     d+=da
195f4     16 27 02 F1 | 	add	local05, local08
195f8                 | '     y-=1
195f8     01 1E 86 F1 | 	sub	local01, #1
195fc                 | '     x+=1
195fc     01 28 06 F1 | 	add	local06, #1
19600                 | '     da+=4*4
19600     10 2C 06 F1 | 	add	local08, #16
19604                 | '     db+=2*4
19604     08 2A 06 F1 | 	add	local07, #8
19608     18 FF 9F FD | 	jmp	#LR__1920
1960c                 | LR__1921
1960c                 | '   else
1960c                 | '     d+=db
1960c     15 27 02 F1 | 	add	local05, local07
19610                 | '     x+=1
19610     01 28 06 F1 | 	add	local06, #1
19614                 | '     da+=2*4
19614     08 2C 06 F1 | 	add	local08, #8
19618                 | '     db+=2*4
19618     08 2A 06 F1 | 	add	local07, #8
1961c     04 FF 9F FD | 	jmp	#LR__1920
19620                 | LR__1922
19620     A7 F0 03 F6 | 	mov	ptra, fp
19624     B2 00 A0 FD | 	call	#popregs_
19628                 | _hg010b_spin2_circle_ret
19628     2D 00 64 FD | 	ret
1962c                 | 
1962c                 | '     
1962c                 | ' '-- A frame (an empty rectangle) ---------------------------------------
1962c                 | ' 
1962c                 | ' pub frame(x1,y1,x2,y2,c)
1962c                 | _hg010b_spin2_frame
1962c     05 4A 05 F6 | 	mov	COUNT_, #5
19630     A8 00 A0 FD | 	call	#pushregs_
19634     09 1F 02 F6 | 	mov	local01, arg01
19638     0A 21 02 F6 | 	mov	local02, arg02
1963c     0B 23 02 F6 | 	mov	local03, arg03
19640     0C 25 02 F6 | 	mov	local04, arg04
19644     0D 27 02 F6 | 	mov	local05, arg05
19648                 | ' 
19648                 | ' fastline(x1,x2,y1,c)
19648     0F 13 02 F6 | 	mov	arg01, local01
1964c     11 15 02 F6 | 	mov	arg02, local03
19650     10 17 02 F6 | 	mov	arg03, local02
19654     13 19 02 F6 | 	mov	arg04, local05
19658     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
1965c                 | ' fastline(x1,x2,y2,c)
1965c     0F 13 02 F6 | 	mov	arg01, local01
19660     11 15 02 F6 | 	mov	arg02, local03
19664     12 17 02 F6 | 	mov	arg03, local04
19668     13 19 02 F6 | 	mov	arg04, local05
1966c     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
19670                 | ' line(x1,y1,x1,y2,c)
19670     0F 13 02 F6 | 	mov	arg01, local01
19674     10 15 02 F6 | 	mov	arg02, local02
19678     0F 17 02 F6 | 	mov	arg03, local01
1967c     12 19 02 F6 | 	mov	arg04, local04
19680     13 1B 02 F6 | 	mov	arg05, local05
19684                 | ' draw(x1,y1,x2,y2,c)
19684     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
19688                 | ' line(x2,y1,x2,y2,c)
19688     11 13 02 F6 | 	mov	arg01, local03
1968c     10 15 02 F6 | 	mov	arg02, local02
19690     11 17 02 F6 | 	mov	arg03, local03
19694     12 19 02 F6 | 	mov	arg04, local04
19698     13 1B 02 F6 | 	mov	arg05, local05
1969c                 | ' draw(x1,y1,x2,y2,c)
1969c     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
196a0     A7 F0 03 F6 | 	mov	ptra, fp
196a4     B2 00 A0 FD | 	call	#popregs_
196a8                 | _hg010b_spin2_frame_ret
196a8     2D 00 64 FD | 	ret
196ac                 | 
196ac                 | ' 
196ac                 | ' '-- A box (a filled rectangle) ----------------------------------------
196ac                 | ' 
196ac                 | ' pub box(x1,y1,x2,y2,c) |yy
196ac                 | _hg010b_spin2_box
196ac     06 4A 05 F6 | 	mov	COUNT_, #6
196b0     A8 00 A0 FD | 	call	#pushregs_
196b4     09 1F 02 F6 | 	mov	local01, arg01
196b8     0A 21 02 F6 | 	mov	local02, arg02
196bc     0B 23 02 F6 | 	mov	local03, arg03
196c0     0C 25 02 F6 | 	mov	local04, arg04
196c4     0D 27 02 F6 | 	mov	local05, arg05
196c8                 | ' 
196c8                 | ' repeat yy from y1 to y2
196c8     10 25 52 F2 | 	cmps	local04, local02 wc
196cc     01 28 86 F6 | 	negc	local06, #1
196d0     14 25 02 F1 | 	add	local04, local06
196d4                 | LR__1930
196d4                 | '   fastline(x1,x2,yy,c)
196d4     0F 13 02 F6 | 	mov	arg01, local01
196d8     11 15 02 F6 | 	mov	arg02, local03
196dc     13 19 02 F6 | 	mov	arg04, local05
196e0     10 17 02 F6 | 	mov	arg03, local02
196e4     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
196e8     14 21 02 F1 | 	add	local02, local06
196ec     12 21 0A F2 | 	cmp	local02, local04 wz
196f0     E0 FF 9F 5D |  if_ne	jmp	#LR__1930
196f4     A7 F0 03 F6 | 	mov	ptra, fp
196f8     B2 00 A0 FD | 	call	#popregs_
196fc                 | _hg010b_spin2_box_ret
196fc     2D 00 64 FD | 	ret
19700                 | 
19700                 | '       
19700                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
19700                 | _hg010b_spin2_putcharxycgf
19700                 | ' 
19700                 | '  
19700                 | ' repeat yy from 0 to 15
19700     00 00 06 F6 | 	mov	_var01, #0
19704     97 8C 48 FB | 	callpa	#(@LR__1942-@LR__1940)>>2,fcache_load_ptr_
19708                 | LR__1940
19708                 | ' 
19708                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
19708     91 E4 05 F1 | 	add	objptr, #145
1970c     F2 02 02 FB | 	rdlong	_var02, objptr
19710     0A 02 66 F0 | 	shl	_var02, #10
19714     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
19718     01 05 02 F1 | 	add	_var03, _var02
1971c     0B 03 02 F6 | 	mov	_var02, arg03
19720     04 02 66 F0 | 	shl	_var02, #4
19724     01 05 02 F1 | 	add	_var03, _var02
19728     00 05 02 F1 | 	add	_var03, _var01
1972c     02 05 C2 FA | 	rdbyte	_var03, _var03
19730                 | '   asm
19730     00 04 0E F4 | 	testb	_var03, #0 wz
19734     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
19738     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
1973c     01 04 0E F4 | 	testb	_var03, #1 wz
19740     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
19744     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
19748     02 04 0E F4 | 	testb	_var03, #2 wz
1974c     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
19750     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
19754     03 04 0E F4 | 	testb	_var03, #3 wz
19758     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
1975c     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
19760     04 04 0E F4 | 	testb	_var03, #4 wz
19764     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
19768     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
1976c     05 04 0E F4 | 	testb	_var03, #5 wz
19770     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
19774     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
19778     06 04 0E F4 | 	testb	_var03, #6 wz
1977c     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
19780     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
19784     07 04 0E F4 | 	testb	_var03, #7 wz
19788     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
1978c     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
19790                 | '   
19790                 | '   ccc[0]:=c1
19790     99 E5 05 F1 | 	add	objptr, #409
19794     F2 06 62 FC | 	wrlong	_var04, objptr
19798                 | '   ccc[1]:=c2 
19798     04 E4 05 F1 | 	add	objptr, #4
1979c     F2 08 62 FC | 	wrlong	_var05, objptr
197a0                 | '   long[mailbox0][2]:=8
197a0     49 E4 85 F1 | 	sub	objptr, #73
197a4     F2 04 02 FB | 	rdlong	_var03, objptr
197a8     08 04 06 F1 | 	add	_var03, #8
197ac     02 11 68 FC | 	wrlong	#8, _var03
197b0                 | '   long[mailbox0][1]:=@ccc
197b0     45 E4 05 F1 | 	add	objptr, #69
197b4     F2 04 02 F6 | 	mov	_var03, objptr
197b8     45 E4 85 F1 | 	sub	objptr, #69
197bc     F2 02 02 FB | 	rdlong	_var02, objptr
197c0     04 02 06 F1 | 	add	_var02, #4
197c4     01 05 62 FC | 	wrlong	_var03, _var02
197c8                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
197c8     0C E5 85 F1 | 	sub	objptr, #268
197cc     F2 04 02 FB | 	rdlong	_var03, objptr
197d0     0A 03 02 F6 | 	mov	_var02, arg02
197d4     00 03 02 F1 | 	add	_var02, _var01
197d8     0A 02 66 F0 | 	shl	_var02, #10
197dc     09 0B 02 F6 | 	mov	_var06, arg01
197e0     02 0A 66 F0 | 	shl	_var06, #2
197e4     05 03 02 F1 | 	add	_var02, _var06
197e8     01 05 02 F1 | 	add	_var03, _var02
197ec     00 00 78 FF 
197f0     00 04 06 F1 | 	add	_var03, ##-268435456
197f4     0C E5 05 F1 | 	add	objptr, #268
197f8     F2 0A 02 FB | 	rdlong	_var06, objptr
197fc     05 05 62 FC | 	wrlong	_var03, _var06
19800                 | '   repeat
19800                 | LR__1941
19800     F2 04 02 FB | 	rdlong	_var03, objptr
19804     02 03 02 FB | 	rdlong	_var02, _var03
19808     00 02 56 F2 | 	cmps	_var02, #0 wc
1980c     F0 FF 9F CD |  if_b	jmp	#LR__1941
19810     E5 E5 85 F1 | 	sub	objptr, #485
19814     01 00 06 F1 | 	add	_var01, #1
19818     10 00 56 F2 | 	cmps	_var01, #16 wc
1981c     E8 FE 9F CD |  if_b	jmp	#LR__1940
19820                 | LR__1942
19820                 | _hg010b_spin2_putcharxycgf_ret
19820     2D 00 64 FD | 	ret
19824                 | 
19824                 | ' 
19824                 | ' 
19824                 | ' '**********************************************************************r***
19824                 | ' '                                                                        *
19824                 | ' ' Font related functions                                                 *
19824                 | ' '                                                                        *
19824                 | ' '*************************************************************************
19824                 | ' 
19824                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
19824                 | ' 
19824                 | ' pub setfontfamily(afontnum)
19824                 | _hg010b_spin2_setfontfamily
19824                 | ' 
19824                 | ' font_family:=afontnum
19824     91 E4 05 F1 | 	add	objptr, #145
19828     F2 12 62 FC | 	wrlong	arg01, objptr
1982c     91 E4 85 F1 | 	sub	objptr, #145
19830                 | ' 'if afontnum==8
19830                 | ' '  font_ptr:=@amiga_font
19830                 | ' 
19830                 | ' if afontnum==4
19830     04 12 0E F2 | 	cmp	arg01, #4 wz
19834                 | '   font_ptr:=@st_font
19834     08 00 00 AF 
19838     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
1983c     04 E4 05 A1 |  if_e	add	objptr, #4
19840     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
19844     04 E4 85 A1 |  if_e	sub	objptr, #4
19848     08 00 00 AF 
1984c     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
19850                 | ' if afontnum==0
19850     00 12 0E F2 | 	cmp	arg01, #0 wz
19854                 | '   font_ptr:=@vga_font
19854     04 E4 05 A1 |  if_e	add	objptr, #4
19858     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1985c     04 E4 85 A1 |  if_e	sub	objptr, #4
19860                 | _hg010b_spin2_setfontfamily_ret
19860     2D 00 64 FD | 	ret
19864                 | 
19864                 | ' 
19864                 | ' '*************************************************************************
19864                 | ' '                                                                        *
19864                 | ' '  Cursor functions                                                      *
19864                 | ' '                                                                        *
19864                 | ' '*************************************************************************
19864                 | ' 
19864                 | ' 
19864                 | ' pub setcursorpos(x,y)
19864                 | _hg010b_spin2_setcursorpos
19864                 | ' 
19864                 | ' ''---------- Set the (x,y) position of cursor
19864                 | ' 
19864                 | ' cursor_x:=x
19864     38 E4 05 F1 | 	add	objptr, #56
19868     F2 12 52 FC | 	wrword	arg01, objptr
1986c                 | ' cursor_y:=y
1986c     02 E4 05 F1 | 	add	objptr, #2
19870     F2 14 42 FC | 	wrbyte	arg02, objptr
19874                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
19874     02 E4 85 F1 | 	sub	objptr, #2
19878     F2 14 E2 FA | 	rdword	arg02, objptr
1987c     02 14 66 F0 | 	shl	arg02, #2
19880     02 E4 05 F1 | 	add	objptr, #2
19884     F2 16 C2 FA | 	rdbyte	arg03, objptr
19888     3A E4 85 F1 | 	sub	objptr, #58
1988c     04 16 66 F0 | 	shl	arg03, #4
19890     11 12 06 F6 | 	mov	arg01, #17
19894     70 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
19898                 | _hg010b_spin2_setcursorpos_ret
19898     2D 00 64 FD | 	ret
1989c                 | 
1989c                 | ' 
1989c                 | ' '*************************************************************************
1989c                 | ' '                                                                        *
1989c                 | ' '  VBlank functions                                                      *
1989c                 | ' '                                                                        *
1989c                 | ' '*************************************************************************
1989c                 | ' 
1989c                 | ' pub waitvbl(amount) | i
1989c                 | _hg010b_spin2_waitvbl
1989c     03 4A 05 F6 | 	mov	COUNT_, #3
198a0     A8 00 A0 FD | 	call	#pushregs_
198a4     09 1F 02 F6 | 	mov	local01, arg01
198a8                 | ' 
198a8                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
198a8                 | ' 
198a8                 | ' repeat i from 1 to amount
198a8     01 20 06 F6 | 	mov	local02, #1
198ac     01 1E 56 F2 | 	cmps	local01, #1 wc
198b0     01 22 86 F6 | 	negc	local03, #1
198b4     11 1F 02 F1 | 	add	local01, local03
198b8                 | LR__1950
198b8                 | '   repeat until vblank==0
198b8                 | LR__1951
198b8     45 E4 05 F1 | 	add	objptr, #69
198bc     F2 12 0A FB | 	rdlong	arg01, objptr wz
198c0     45 E4 85 F1 | 	sub	objptr, #69
198c4     0C 00 90 AD |  if_e	jmp	#LR__1952
198c8                 | '     waitus(100)
198c8     64 12 06 F6 | 	mov	arg01, #100
198cc     F8 16 B0 FD | 	call	#__system___waitus
198d0     E4 FF 9F FD | 	jmp	#LR__1951
198d4                 | LR__1952
198d4                 | '   repeat until vblank==1
198d4                 | LR__1953
198d4     45 E4 05 F1 | 	add	objptr, #69
198d8     F2 12 02 FB | 	rdlong	arg01, objptr
198dc     45 E4 85 F1 | 	sub	objptr, #69
198e0     01 12 0E F2 | 	cmp	arg01, #1 wz
198e4     0C 00 90 AD |  if_e	jmp	#LR__1954
198e8                 | '     waitus(100)
198e8     64 12 06 F6 | 	mov	arg01, #100
198ec     D8 16 B0 FD | 	call	#__system___waitus
198f0     E0 FF 9F FD | 	jmp	#LR__1953
198f4                 | LR__1954
198f4     11 21 02 F1 | 	add	local02, local03
198f8     0F 21 0A F2 | 	cmp	local02, local01 wz
198fc     B8 FF 9F 5D |  if_ne	jmp	#LR__1950
19900     A7 F0 03 F6 | 	mov	ptra, fp
19904     B2 00 A0 FD | 	call	#popregs_
19908                 | _hg010b_spin2_waitvbl_ret
19908     2D 00 64 FD | 	ret
1990c                 | 
1990c                 | ' 
1990c                 | ' 
1990c                 | ' pub cls(fc,bc)   :c,i
1990c                 | _hg010b_spin2_cls
1990c     02 4A 05 F6 | 	mov	COUNT_, #2
19910     A8 00 A0 FD | 	call	#pushregs_
19914     09 1F 02 F6 | 	mov	local01, arg01
19918     0A 21 02 F6 | 	mov	local02, arg02
1991c                 | ' 
1991c                 | ' c:=bc
1991c                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
1991c     D9 E4 05 F1 | 	add	objptr, #217
19920     F2 12 02 FB | 	rdlong	arg01, objptr
19924     A5 E4 85 F1 | 	sub	objptr, #165
19928     F2 16 02 FB | 	rdlong	arg03, objptr
1992c     02 16 66 F0 | 	shl	arg03, #2
19930     10 15 02 F6 | 	mov	arg02, local02
19934     00 18 06 F6 | 	mov	arg04, #0
19938     01 1A 06 F6 | 	mov	arg05, #1
1993c     0B 00 00 FF 
19940     8C E4 05 F1 | 	add	objptr, ##5772
19944     F0 08 B0 FD | 	call	#_psram_spin2_fill
19948                 | ' setwritecolors(fc,bc)
19948                 | ' 
19948                 | ' write_color:=ff
19948     0B 00 00 FF 
1994c     83 E4 85 F1 | 	sub	objptr, ##5763
19950     F2 1E 62 FC | 	wrlong	local01, objptr
19954                 | ' write_background:=bb
19954     04 E4 05 F1 | 	add	objptr, #4
19958     F2 20 62 FC | 	wrlong	local02, objptr
1995c                 | ' cursor_x:=0
1995c     09 E4 85 F1 | 	sub	objptr, #9
19960     F2 00 58 FC | 	wrword	#0, objptr
19964                 | ' cursor_y:=0
19964     02 E4 05 F1 | 	add	objptr, #2
19968     F2 00 48 FC | 	wrbyte	#0, objptr
1996c                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
1996c     02 E4 85 F1 | 	sub	objptr, #2
19970     F2 14 E2 FA | 	rdword	arg02, objptr
19974     02 14 66 F0 | 	shl	arg02, #2
19978     02 E4 05 F1 | 	add	objptr, #2
1997c     F2 16 C2 FA | 	rdbyte	arg03, objptr
19980     3A E4 85 F1 | 	sub	objptr, #58
19984     04 16 66 F0 | 	shl	arg03, #4
19988     11 12 06 F6 | 	mov	arg01, #17
1998c     78 F2 BF FD | 	call	#_hg010b_spin2_setspritepos
19990                 | ' setcursorcolor(fc)
19990     0F 13 02 F6 | 	mov	arg01, local01
19994     2C EF BF FD | 	call	#_hg010b_spin2_setcursorcolor
19998     10 FB 01 F6 | 	mov	result1, local02
1999c     00 FC 05 F6 | 	mov	result2, #0
199a0     A7 F0 03 F6 | 	mov	ptra, fp
199a4     B2 00 A0 FD | 	call	#popregs_
199a8                 | _hg010b_spin2_cls_ret
199a8     2D 00 64 FD | 	ret
199ac                 | 
199ac                 | ' 
199ac                 | ' ''---------- Output a char at the cursor position, move the cursor 
199ac                 | ' 
199ac                 | ' pub putchar(achar) | c,x,y,l,newcpl
199ac                 | _hg010b_spin2_putchar
199ac     01 4A 05 F6 | 	mov	COUNT_, #1
199b0     A8 00 A0 FD | 	call	#pushregs_
199b4     09 1F 02 F6 | 	mov	local01, arg01
199b8                 | ' 
199b8                 | ' if achar==10
199b8     0A 1E 0E F2 | 	cmp	local01, #10 wz
199bc                 | '   crlf()
199bc     68 03 B0 AD |  if_e	call	#_hg010b_spin2_crlf
199c0                 | ' if achar==9
199c0     09 1E 0E F2 | 	cmp	local01, #9 wz
199c4     18 00 90 5D |  if_ne	jmp	#LR__1960
199c8                 | '   cursor_x:=(cursor_x& %11110000)+16
199c8     38 E4 05 F1 | 	add	objptr, #56
199cc     F2 16 E2 FA | 	rdword	arg03, objptr
199d0     F0 16 06 F5 | 	and	arg03, #240
199d4     10 16 06 F1 | 	add	arg03, #16
199d8     F2 16 52 FC | 	wrword	arg03, objptr
199dc     38 E4 85 F1 | 	sub	objptr, #56
199e0                 | LR__1960
199e0                 | '   
199e0                 | ' if (achar<>9) && (achar<>10) 
199e0     09 1E 0E F2 | 	cmp	local01, #9 wz
199e4     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
199e8     44 00 90 AD |  if_e	jmp	#LR__1961
199ec                 | '   putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
199ec     38 E4 05 F1 | 	add	objptr, #56
199f0     F2 12 E2 FA | 	rdword	arg01, objptr
199f4     02 E4 05 F1 | 	add	objptr, #2
199f8     F2 14 C2 FA | 	rdbyte	arg02, objptr
199fc     04 14 66 F0 | 	shl	arg02, #4
19a00     03 E4 05 F1 | 	add	objptr, #3
19a04     F2 18 02 FB | 	rdlong	arg04, objptr
19a08     04 E4 05 F1 | 	add	objptr, #4
19a0c     F2 1A 02 FB | 	rdlong	arg05, objptr
19a10     41 E4 85 F1 | 	sub	objptr, #65
19a14     0F 17 02 F6 | 	mov	arg03, local01
19a18     E4 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
19a1c                 | '   cursor_x+=2
19a1c     38 E4 05 F1 | 	add	objptr, #56
19a20     F2 1E E2 FA | 	rdword	local01, objptr
19a24     02 1E 06 F1 | 	add	local01, #2
19a28     F2 1E 52 FC | 	wrword	local01, objptr
19a2c     38 E4 85 F1 | 	sub	objptr, #56
19a30                 | LR__1961
19a30                 | ' 
19a30                 | ' if cursor_x>=256
19a30     38 E4 05 F1 | 	add	objptr, #56
19a34     F2 1E E2 FA | 	rdword	local01, objptr
19a38     38 E4 85 F1 | 	sub	objptr, #56
19a3c     00 1F 56 F2 | 	cmps	local01, #256 wc
19a40     64 00 90 CD |  if_b	jmp	#LR__1963
19a44                 | '   cursor_x:=0
19a44     38 E4 05 F1 | 	add	objptr, #56
19a48     F2 00 58 FC | 	wrword	#0, objptr
19a4c                 | '   cursor_y+=1
19a4c     02 E4 05 F1 | 	add	objptr, #2
19a50     F2 1E C2 FA | 	rdbyte	local01, objptr
19a54     01 1E 06 F1 | 	add	local01, #1
19a58     F2 1E 42 FC | 	wrbyte	local01, objptr
19a5c                 | '   if cursor_y>st_lines-1
19a5c     C3 E4 05 F1 | 	add	objptr, #195
19a60     F2 1E 02 FB | 	rdlong	local01, objptr
19a64     01 1E 86 F1 | 	sub	local01, #1
19a68     C3 E4 85 F1 | 	sub	objptr, #195
19a6c     F2 16 C2 FA | 	rdbyte	arg03, objptr
19a70     3A E4 85 F1 | 	sub	objptr, #58
19a74     0F 17 5A F2 | 	cmps	arg03, local01 wcz
19a78     2C 00 90 ED |  if_be	jmp	#LR__1962
19a7c                 | '     scrollup()
19a7c     00 12 06 F6 | 	mov	arg01, #0
19a80     01 00 00 FF 
19a84     40 14 06 F6 | 	mov	arg02, ##576
19a88     10 16 06 F6 | 	mov	arg03, #16
19a8c     9C 01 B0 FD | 	call	#_hg010b_spin2_scrollup
19a90                 | '     cursor_y:=st_lines-1
19a90     FD E4 05 F1 | 	add	objptr, #253
19a94     F2 1E 02 FB | 	rdlong	local01, objptr
19a98     01 1E 86 F1 | 	sub	local01, #1
19a9c     C3 E4 85 F1 | 	sub	objptr, #195
19aa0     F2 1E 42 FC | 	wrbyte	local01, objptr
19aa4     3A E4 85 F1 | 	sub	objptr, #58
19aa8                 | LR__1962
19aa8                 | LR__1963
19aa8                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
19aa8     38 E4 05 F1 | 	add	objptr, #56
19aac     F2 14 E2 FA | 	rdword	arg02, objptr
19ab0     02 14 66 F0 | 	shl	arg02, #2
19ab4     02 E4 05 F1 | 	add	objptr, #2
19ab8     F2 16 C2 FA | 	rdbyte	arg03, objptr
19abc     3A E4 85 F1 | 	sub	objptr, #58
19ac0     04 16 66 F0 | 	shl	arg03, #4
19ac4     11 12 06 F6 | 	mov	arg01, #17
19ac8     3C F1 BF FD | 	call	#_hg010b_spin2_setspritepos
19acc     A7 F0 03 F6 | 	mov	ptra, fp
19ad0     B2 00 A0 FD | 	call	#popregs_
19ad4                 | _hg010b_spin2_putchar_ret
19ad4     2D 00 64 FD | 	ret
19ad8                 | 
19ad8                 | '     
19ad8                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
19ad8                 | ' 
19ad8                 | ' pub putchar2(achar) | c,x,y,l,newcpl
19ad8                 | _hg010b_spin2_putchar2
19ad8     01 4A 05 F6 | 	mov	COUNT_, #1
19adc     A8 00 A0 FD | 	call	#pushregs_
19ae0                 | ' 
19ae0                 | ' putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
19ae0     38 E4 05 F1 | 	add	objptr, #56
19ae4     F2 1E E2 FA | 	rdword	local01, objptr
19ae8     02 E4 05 F1 | 	add	objptr, #2
19aec     F2 14 C2 FA | 	rdbyte	arg02, objptr
19af0     04 14 66 F0 | 	shl	arg02, #4
19af4     09 17 02 F6 | 	mov	arg03, arg01
19af8     03 E4 05 F1 | 	add	objptr, #3
19afc     F2 18 02 FB | 	rdlong	arg04, objptr
19b00     04 E4 05 F1 | 	add	objptr, #4
19b04     F2 1A 02 FB | 	rdlong	arg05, objptr
19b08     41 E4 85 F1 | 	sub	objptr, #65
19b0c     0F 13 02 F6 | 	mov	arg01, local01
19b10     EC FB BF FD | 	call	#_hg010b_spin2_putcharxycgf
19b14                 | ' cursor_x+=2
19b14     38 E4 05 F1 | 	add	objptr, #56
19b18     F2 1E E2 FA | 	rdword	local01, objptr
19b1c     02 1E 06 F1 | 	add	local01, #2
19b20     F2 1E 52 FC | 	wrword	local01, objptr
19b24                 | ' if cursor_x>=256
19b24     F2 1E E2 FA | 	rdword	local01, objptr
19b28     38 E4 85 F1 | 	sub	objptr, #56
19b2c     00 1F 56 F2 | 	cmps	local01, #256 wc
19b30     64 00 90 CD |  if_b	jmp	#LR__1971
19b34                 | '   cursor_x:=0
19b34     38 E4 05 F1 | 	add	objptr, #56
19b38     F2 00 58 FC | 	wrword	#0, objptr
19b3c                 | '   cursor_y+=1
19b3c     02 E4 05 F1 | 	add	objptr, #2
19b40     F2 1E C2 FA | 	rdbyte	local01, objptr
19b44     01 1E 06 F1 | 	add	local01, #1
19b48     F2 1E 42 FC | 	wrbyte	local01, objptr
19b4c                 | '   if cursor_y>st_lines-1
19b4c     C3 E4 05 F1 | 	add	objptr, #195
19b50     F2 1E 02 FB | 	rdlong	local01, objptr
19b54     01 1E 86 F1 | 	sub	local01, #1
19b58     C3 E4 85 F1 | 	sub	objptr, #195
19b5c     F2 1A C2 FA | 	rdbyte	arg05, objptr
19b60     3A E4 85 F1 | 	sub	objptr, #58
19b64     0F 1B 5A F2 | 	cmps	arg05, local01 wcz
19b68     2C 00 90 ED |  if_be	jmp	#LR__1970
19b6c                 | '     scrollup()
19b6c     00 12 06 F6 | 	mov	arg01, #0
19b70     01 00 00 FF 
19b74     40 14 06 F6 | 	mov	arg02, ##576
19b78     10 16 06 F6 | 	mov	arg03, #16
19b7c     AC 00 B0 FD | 	call	#_hg010b_spin2_scrollup
19b80                 | '     cursor_y:=st_lines-1
19b80     FD E4 05 F1 | 	add	objptr, #253
19b84     F2 1E 02 FB | 	rdlong	local01, objptr
19b88     01 1E 86 F1 | 	sub	local01, #1
19b8c     C3 E4 85 F1 | 	sub	objptr, #195
19b90     F2 1E 42 FC | 	wrbyte	local01, objptr
19b94     3A E4 85 F1 | 	sub	objptr, #58
19b98                 | LR__1970
19b98                 | LR__1971
19b98                 | ' setspritepos(17,4*cursor_x,16*cursor_y ) 
19b98     38 E4 05 F1 | 	add	objptr, #56
19b9c     F2 14 E2 FA | 	rdword	arg02, objptr
19ba0     02 14 66 F0 | 	shl	arg02, #2
19ba4     02 E4 05 F1 | 	add	objptr, #2
19ba8     F2 16 C2 FA | 	rdbyte	arg03, objptr
19bac     3A E4 85 F1 | 	sub	objptr, #58
19bb0     04 16 66 F0 | 	shl	arg03, #4
19bb4     11 12 06 F6 | 	mov	arg01, #17
19bb8     4C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
19bbc     A7 F0 03 F6 | 	mov	ptra, fp
19bc0     B2 00 A0 FD | 	call	#popregs_
19bc4                 | _hg010b_spin2_putchar2_ret
19bc4     2D 00 64 FD | 	ret
19bc8                 | 
19bc8                 | ' ''--------- Output a string at the cursor position, move the cursor  
19bc8                 | ' 
19bc8                 | ' pub write(text) | iii,c,ncx,ncy
19bc8                 | _hg010b_spin2_write
19bc8     04 4A 05 F6 | 	mov	COUNT_, #4
19bcc     A8 00 A0 FD | 	call	#pushregs_
19bd0     09 1F 02 F6 | 	mov	local01, arg01
19bd4                 | ' 
19bd4                 | ' repeat iii from 0 to strsize(text)-1
19bd4     00 20 06 F6 | 	mov	local02, #0
19bd8     0F 13 02 F6 | 	mov	arg01, local01
19bdc     09 23 02 F6 | 	mov	local03, arg01
19be0     97 06 48 FB | 	callpa	#(@LR__1981-@LR__1980)>>2,fcache_load_ptr_
19be4                 | LR__1980
19be4     11 FB C9 FA | 	rdbyte	result1, local03 wz
19be8     01 22 06 51 |  if_ne	add	local03, #1
19bec     F4 FF 9F 5D |  if_ne	jmp	#LR__1980
19bf0                 | LR__1981
19bf0     09 23 82 F1 | 	sub	local03, arg01
19bf4     01 22 86 F1 | 	sub	local03, #1
19bf8     00 22 56 F2 | 	cmps	local03, #0 wc
19bfc     01 24 86 F6 | 	negc	local04, #1
19c00     12 23 02 F1 | 	add	local03, local04
19c04                 | LR__1982
19c04                 | '   putchar2(byte[text+iii])
19c04     0F 13 02 F6 | 	mov	arg01, local01
19c08     10 13 02 F1 | 	add	arg01, local02
19c0c     09 13 C2 FA | 	rdbyte	arg01, arg01
19c10     C4 FE BF FD | 	call	#_hg010b_spin2_putchar2
19c14     12 21 02 F1 | 	add	local02, local04
19c18     11 21 0A F2 | 	cmp	local02, local03 wz
19c1c     E4 FF 9F 5D |  if_ne	jmp	#LR__1982
19c20     A7 F0 03 F6 | 	mov	ptra, fp
19c24     B2 00 A0 FD | 	call	#popregs_
19c28                 | _hg010b_spin2_write_ret
19c28     2D 00 64 FD | 	ret
19c2c                 | 
19c2c                 | ' 
19c2c                 | ' ''-----------  Scroll the screen one line up
19c2c                 | ' 
19c2c                 | ' pub scrollup(start=0, end=576 , amount=16) | i
19c2c                 | _hg010b_spin2_scrollup
19c2c     01 4A 05 F6 | 	mov	COUNT_, #1
19c30     A8 00 A0 FD | 	call	#pushregs_
19c34                 | ' 	
19c34                 | ' repeat i from 0 to 559 
19c34     00 1E 06 F6 | 	mov	local01, #0
19c38                 | LR__1990
19c38     F5 E4 05 F1 | 	add	objptr, #245
19c3c     F2 18 02 FB | 	rdlong	arg04, objptr
19c40     1C E4 85 F1 | 	sub	objptr, #28
19c44     F2 14 02 FB | 	rdlong	arg02, objptr
19c48     0F 13 02 F6 | 	mov	arg01, local01
19c4c     10 12 06 F1 | 	add	arg01, #16
19c50     02 12 66 F0 | 	shl	arg01, #2
19c54     14 E4 05 F1 | 	add	objptr, #20
19c58     F2 16 02 FB | 	rdlong	arg03, objptr
19c5c     0B 13 02 FD | 	qmul	arg01, arg03
19c60                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
19c60     F6 03 00 FF 
19c64     00 12 06 F6 | 	mov	arg01, ##519168
19c68     0C 13 82 F1 | 	sub	arg01, arg04
19c6c     02 16 66 F0 | 	shl	arg03, #2
19c70     0A 00 00 FF 
19c74     D3 E5 05 F1 | 	add	objptr, ##5587
19c78     18 18 62 FD | 	getqx	arg04
19c7c     0C 15 02 F1 | 	add	arg02, arg04
19c80     7C 04 B0 FD | 	call	#_psram_spin2_read1
19c84     0A 00 00 FF 
19c88     CB E5 85 F1 | 	sub	objptr, ##5579
19c8c     F2 18 02 FB | 	rdlong	arg04, objptr
19c90     1C E4 85 F1 | 	sub	objptr, #28
19c94     F2 14 02 FB | 	rdlong	arg02, objptr
19c98     0F 13 02 F6 | 	mov	arg01, local01
19c9c     02 12 66 F0 | 	shl	arg01, #2
19ca0     14 E4 05 F1 | 	add	objptr, #20
19ca4     F2 16 02 FB | 	rdlong	arg03, objptr
19ca8     0B 13 02 FD | 	qmul	arg01, arg03
19cac                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
19cac     F6 03 00 FF 
19cb0     00 12 06 F6 | 	mov	arg01, ##519168
19cb4     0C 13 82 F1 | 	sub	arg01, arg04
19cb8     02 16 66 F0 | 	shl	arg03, #2
19cbc     0A 00 00 FF 
19cc0     D3 E5 05 F1 | 	add	objptr, ##5587
19cc4     18 18 62 FD | 	getqx	arg04
19cc8     0C 15 02 F1 | 	add	arg02, arg04
19ccc     CC 04 B0 FD | 	call	#_psram_spin2_write
19cd0     0B 00 00 FF 
19cd4     C0 E4 85 F1 | 	sub	objptr, ##5824
19cd8     01 1E 06 F1 | 	add	local01, #1
19cdc     01 00 00 FF 
19ce0     30 1E 56 F2 | 	cmps	local01, ##560 wc
19ce4     50 FF 9F CD |  if_b	jmp	#LR__1990
19ce8                 | ' 
19ce8                 | ' repeat i from 560 to 575
19ce8     01 00 00 FF 
19cec     30 1E 06 F6 | 	mov	local01, ##560
19cf0                 | LR__1991
19cf0                 | '    fastline(0,1023,i,write_background)   
19cf0     41 E4 05 F1 | 	add	objptr, #65
19cf4     F2 18 02 FB | 	rdlong	arg04, objptr
19cf8     41 E4 85 F1 | 	sub	objptr, #65
19cfc     00 12 06 F6 | 	mov	arg01, #0
19d00     09 14 CE F9 | 	bmask	arg02, #9
19d04     0F 17 02 F6 | 	mov	arg03, local01
19d08     2C F1 BF FD | 	call	#_hg010b_spin2_fastline
19d0c     01 1E 06 F1 | 	add	local01, #1
19d10     01 00 00 FF 
19d14     40 1E 16 F2 | 	cmp	local01, ##576 wc
19d18     D4 FF 9F CD |  if_b	jmp	#LR__1991
19d1c     A7 F0 03 F6 | 	mov	ptra, fp
19d20     B2 00 A0 FD | 	call	#popregs_
19d24                 | _hg010b_spin2_scrollup_ret
19d24     2D 00 64 FD | 	ret
19d28                 | 
19d28                 | ' 
19d28                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
19d28                 | ' 
19d28                 | ' pub crlf()
19d28                 | _hg010b_spin2_crlf
19d28                 | ' 
19d28                 | ' cursor_x:=leading_spaces*2
19d28     01 00 00 FF 
19d2c     B2 E4 05 F1 | 	add	objptr, ##690
19d30     F2 16 02 FB | 	rdlong	arg03, objptr
19d34     01 16 66 F0 | 	shl	arg03, #1
19d38     01 00 00 FF 
19d3c     7A E4 85 F1 | 	sub	objptr, ##634
19d40     F2 16 52 FC | 	wrword	arg03, objptr
19d44                 | ' cursor_y+=1
19d44     02 E4 05 F1 | 	add	objptr, #2
19d48     F2 16 C2 FA | 	rdbyte	arg03, objptr
19d4c     01 16 06 F1 | 	add	arg03, #1
19d50     F2 16 42 FC | 	wrbyte	arg03, objptr
19d54                 | ' if cursor_y>st_lines-1
19d54     C3 E4 05 F1 | 	add	objptr, #195
19d58     F2 16 02 FB | 	rdlong	arg03, objptr
19d5c     01 16 86 F1 | 	sub	arg03, #1
19d60     C3 E4 85 F1 | 	sub	objptr, #195
19d64     F2 14 C2 FA | 	rdbyte	arg02, objptr
19d68     3A E4 85 F1 | 	sub	objptr, #58
19d6c     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
19d70     2C 00 90 ED |  if_be	jmp	#LR__2000
19d74                 | '   scrollup()
19d74     00 12 06 F6 | 	mov	arg01, #0
19d78     01 00 00 FF 
19d7c     40 14 06 F6 | 	mov	arg02, ##576
19d80     10 16 06 F6 | 	mov	arg03, #16
19d84     A4 FE BF FD | 	call	#_hg010b_spin2_scrollup
19d88                 | '   cursor_y:=st_lines-1
19d88     FD E4 05 F1 | 	add	objptr, #253
19d8c     F2 16 02 FB | 	rdlong	arg03, objptr
19d90     01 16 86 F1 | 	sub	arg03, #1
19d94     C3 E4 85 F1 | 	sub	objptr, #195
19d98     F2 16 42 FC | 	wrbyte	arg03, objptr
19d9c     3A E4 85 F1 | 	sub	objptr, #58
19da0                 | LR__2000
19da0                 | ' setspritepos(17,4*cursor_x,16*cursor_y )  
19da0     38 E4 05 F1 | 	add	objptr, #56
19da4     F2 14 E2 FA | 	rdword	arg02, objptr
19da8     02 14 66 F0 | 	shl	arg02, #2
19dac     02 E4 05 F1 | 	add	objptr, #2
19db0     F2 16 C2 FA | 	rdbyte	arg03, objptr
19db4     3A E4 85 F1 | 	sub	objptr, #58
19db8     04 16 66 F0 | 	shl	arg03, #4
19dbc     11 12 06 F6 | 	mov	arg01, #17
19dc0     44 EE BF FD | 	call	#_hg010b_spin2_setspritepos
19dc4                 | _hg010b_spin2_crlf_ret
19dc4     2D 00 64 FD | 	ret
19dc8                 | 
19dc8                 | ' 
19dc8                 | ' 
19dc8                 | ' '*************************************************************************
19dc8                 | ' '                                                                        *
19dc8                 | ' '  Conversions                                                           *
19dc8                 | ' '                                                                        *
19dc8                 | ' '*************************************************************************
19dc8                 | ' 
19dc8                 | ' ''---------- Convert a integer to dec string, return a pointer
19dc8                 | ' 
19dc8                 | ' pub inttostr(i):result |q,pos,k,j
19dc8                 | _hg010b_spin2_inttostr
19dc8     03 4A 05 F6 | 	mov	COUNT_, #3
19dcc     A8 00 A0 FD | 	call	#pushregs_
19dd0     09 1F 0A F6 | 	mov	local01, arg01 wz
19dd4                 | ' 
19dd4                 | ' j:=i
19dd4                 | ' pos:=10
19dd4     0A 20 06 F6 | 	mov	local02, #10
19dd8                 | ' k:=0
19dd8     00 22 06 F6 | 	mov	local03, #0
19ddc                 | ' 
19ddc                 | ' if (j==0)
19ddc     18 00 90 5D |  if_ne	jmp	#LR__2010
19de0                 | '   n_string[0]:=48
19de0     49 E4 05 F1 | 	add	objptr, #73
19de4     F2 60 48 FC | 	wrbyte	#48, objptr
19de8                 | '   n_string[1]:=0
19de8     01 E4 05 F1 | 	add	objptr, #1
19dec     F2 00 48 FC | 	wrbyte	#0, objptr
19df0     4A E4 85 F1 | 	sub	objptr, #74
19df4     C4 00 90 FD | 	jmp	#LR__2017
19df8                 | LR__2010
19df8                 | ' 
19df8                 | ' else
19df8                 | '   if (j<0)
19df8     0F 1F 52 F6 | 	abs	local01, local01 wc
19dfc                 | '     j:=0-j
19dfc                 | '     k:=45
19dfc     2D 22 06 C6 |  if_b	mov	local03, #45
19e00                 | ' 
19e00                 | '   n_string[11]:=0
19e00     54 E4 05 F1 | 	add	objptr, #84
19e04     F2 00 48 FC | 	wrbyte	#0, objptr
19e08     54 E4 85 F1 | 	sub	objptr, #84
19e0c     97 24 48 FB | 	callpa	#(@LR__2012-@LR__2011)>>2,fcache_load_ptr_
19e10                 | '   repeat while (pos>-1)
19e10                 | LR__2011
19e10     00 20 56 F2 | 	cmps	local02, #0 wc
19e14     40 00 90 CD |  if_b	jmp	#LR__2013
19e18     0F FB 51 F6 | 	abs	result1, local01 wc
19e1c     0A FA 15 FD | 	qdiv	result1, #10
19e20                 | '     q:=j//10
19e20     19 FA 61 FD | 	getqy	result1
19e24     FD FA 81 F6 | 	negc	result1, result1
19e28     0F 1F 52 F6 | 	abs	local01, local01 wc
19e2c     0A 1E 16 FD | 	qdiv	local01, #10
19e30                 | '     q:=48+q
19e30     30 FA 05 F1 | 	add	result1, #48
19e34                 | '     n_string[pos]:=q
19e34     10 1F 02 F6 | 	mov	local01, local02
19e38     49 E4 05 F1 | 	add	objptr, #73
19e3c     F2 1E 02 F1 | 	add	local01, objptr
19e40     0F FB 41 FC | 	wrbyte	result1, local01
19e44                 | '     j:=j/10
19e44     49 E4 85 F1 | 	sub	objptr, #73
19e48                 | '     pos-=1
19e48     01 20 86 F1 | 	sub	local02, #1
19e4c     18 1E 62 FD | 	getqx	local01
19e50     0F 1F 82 F6 | 	negc	local01, local01
19e54     B8 FF 9F FD | 	jmp	#LR__2011
19e58                 | LR__2012
19e58                 | LR__2013
19e58                 | '   repeat while n_string[0]==48
19e58                 | LR__2014
19e58     49 E4 05 F1 | 	add	objptr, #73
19e5c     F2 16 C2 FA | 	rdbyte	arg03, objptr
19e60     49 E4 85 F1 | 	sub	objptr, #73
19e64     30 16 0E F2 | 	cmp	arg03, #48 wz
19e68     20 00 90 5D |  if_ne	jmp	#LR__2015
19e6c                 | '     bytemove(@n_string,@n_string+1,12)
19e6c     49 E4 05 F1 | 	add	objptr, #73
19e70     F2 12 02 F6 | 	mov	arg01, objptr
19e74     F2 14 02 F6 | 	mov	arg02, objptr
19e78     49 E4 85 F1 | 	sub	objptr, #73
19e7c     01 14 06 F1 | 	add	arg02, #1
19e80     0C 16 06 F6 | 	mov	arg03, #12
19e84     00 0D B0 FD | 	call	#__system____builtin_memmove
19e88     CC FF 9F FD | 	jmp	#LR__2014
19e8c                 | LR__2015
19e8c                 | ' 
19e8c                 | '   if k==45
19e8c     2D 22 0E F2 | 	cmp	local03, #45 wz
19e90     28 00 90 5D |  if_ne	jmp	#LR__2016
19e94                 | '      bytemove(@n_string+1,@n_string,12)
19e94     49 E4 05 F1 | 	add	objptr, #73
19e98     F2 12 02 F6 | 	mov	arg01, objptr
19e9c     01 12 06 F1 | 	add	arg01, #1
19ea0     F2 14 02 F6 | 	mov	arg02, objptr
19ea4     49 E4 85 F1 | 	sub	objptr, #73
19ea8     0C 16 06 F6 | 	mov	arg03, #12
19eac     D8 0C B0 FD | 	call	#__system____builtin_memmove
19eb0                 | '      n_string[0]:=k
19eb0     49 E4 05 F1 | 	add	objptr, #73
19eb4     F2 22 42 FC | 	wrbyte	local03, objptr
19eb8     49 E4 85 F1 | 	sub	objptr, #73
19ebc                 | LR__2016
19ebc                 | LR__2017
19ebc                 | ' 
19ebc                 | ' q:=@n_string
19ebc     49 E4 05 F1 | 	add	objptr, #73
19ec0     F2 FA 01 F6 | 	mov	result1, objptr
19ec4     49 E4 85 F1 | 	sub	objptr, #73
19ec8                 | ' return q
19ec8     A7 F0 03 F6 | 	mov	ptra, fp
19ecc     B2 00 A0 FD | 	call	#popregs_
19ed0                 | _hg010b_spin2_inttostr_ret
19ed0     2D 00 64 FD | 	ret
19ed4                 | 
19ed4                 | ' 
19ed4                 | ' '..............................................................................
19ed4                 | ' 
19ed4                 | ' {{
19ed4                 | ' }}
19ed4                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
19ed4                 | _psram_spin2_startx
19ed4     04 4A 05 F6 | 	mov	COUNT_, #4
19ed8     A8 00 A0 FD | 	call	#pushregs_
19edc     09 1F 02 F6 | 	mov	local01, arg01
19ee0     0B 21 02 F6 | 	mov	local02, arg03
19ee4     0C 23 02 F6 | 	mov	local03, arg04
19ee8                 | '     stop() ' restart driver if required
19ee8     54 01 B0 FD | 	call	#_psram_spin2_stop
19eec     00 1E 0E F2 | 	cmp	local01, #0 wz
19ef0     14 1E 06 AB |  if_e	rdlong	local01, #20
19ef4     0F 15 52 F6 | 	abs	arg02, local01 wc
19ef8     A1 07 00 FF 
19efc     40 14 16 FD | 	qdiv	arg02, ##1000000
19f00                 | ' 
19f00                 | '     ' use current frequency if none specified
19f00                 | ' 
19f00                 | '     if freq == 0 
19f00                 | '         freq := clkfreq 
19f00                 | ' 
19f00                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
19f00                 | ' 
19f00                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
19f00                 | '     if burst < 0
19f00                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
19f00     18 14 62 FD | 	getqx	arg02
19f04     0A 19 82 F6 | 	negc	arg04, arg02
19f08     03 18 66 F0 | 	shl	arg04, #3
19f0c     84 18 86 F1 | 	sub	arg04, #132
19f10     04 18 46 F0 | 	shr	arg04, #4
19f14     04 18 66 F0 | 	shl	arg04, #4
19f18     00 18 56 F2 | 	cmps	arg04, #0 wc
19f1c     0E FA 65 C6 |  if_b	neg	result1, #14
19f20     10 01 90 CD |  if_b	jmp	#LR__2023
19f24                 | ' 
19f24                 | '     ' compute the input delay
19f24                 | ' 
19f24                 | '     if delay <= 0
19f24     01 20 56 F2 | 	cmps	local02, #1 wc
19f28     10 00 90 3D |  if_ae	jmp	#LR__2020
19f2c                 | '         delay := lookupDelay(freq)
19f2c     0F 13 02 F6 | 	mov	arg01, local01
19f30     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
19f34     FD 20 02 F6 | 	mov	local02, result1
19f38     04 00 90 FD | 	jmp	#LR__2021
19f3c                 | LR__2020
19f3c                 | '     else
19f3c                 | '         delay <#= $f ' limit to 15
19f3c     0F 20 66 F3 | 	fles	local02, #15
19f40                 | LR__2021
19f40                 | ' 
19f40                 | '     ' create our lock
19f40                 | ' 
19f40                 | '     driverlock := LOCKNEW()  
19f40     00 FA 05 F6 | 	mov	result1, #0
19f44     04 FA 61 FD | 	locknew	result1
19f48     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
19f4c     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
19f50                 | '     if driverlock == -1
19f50     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
19f54     FF FF 7F FF 
19f58     FF FB 0D F2 | 	cmp	result1, ##-1 wz
19f5c                 | '         return ERR_NO_LOCK
19f5c     1A FA 65 A6 |  if_e	neg	result1, #26
19f60     D0 00 90 AD |  if_e	jmp	#LR__2023
19f64                 | ' 
19f64                 | '     ' patch in the proper data and HUB addresses to the startup structure
19f64                 | ' 
19f64                 | '     long[@startupData][0]:=clkfreq
19f64     14 1E 06 FB | 	rdlong	local01, #20
19f68     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
19f6c     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
19f70                 | ' '    long[@startupData][1]:=$1000_0000
19f70                 | '     long[@startupData][5]:=@deviceData
19f70     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
19f74     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
19f78     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
19f7c     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
19f80     14 14 06 F1 | 	add	arg02, #20
19f84     0A 1F 62 FC | 	wrlong	local01, arg02
19f88                 | '     long[@startupData][6]:=@qosData
19f88     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
19f8c     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
19f90     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
19f94     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
19f98     18 14 06 F1 | 	add	arg02, #24
19f9c     0A 1F 62 FC | 	wrlong	local01, arg02
19fa0                 | '     long[@startupData][7]:=$7FF00
19fa0     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
19fa4     1C 1E 06 F1 | 	add	local01, #28
19fa8     FF 03 80 FF 
19fac     0F 01 6A FC | 	wrlong	##524032, local01
19fb0                 | ' 
19fb0                 | '     ' setup some default bank and QoS parameter values
19fb0                 | ' 
19fb0                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
19fb0     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
19fb4     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
19fb8     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
19fbc     10 18 66 F0 | 	shl	arg04, #16
19fc0     0C 20 66 F0 | 	shl	local02, #12
19fc4     10 19 42 F5 | 	or	arg04, local02
19fc8     18 18 46 F5 | 	or	arg04, #24
19fcc     0C 15 02 F6 | 	mov	arg02, arg04
19fd0     02 16 06 F6 | 	mov	arg03, #2
19fd4     A0 00 A0 FD | 	call	#\builtin_longfill_
19fd8                 | '     longfill(@qosData, $FFFF0000, 8)
19fd8     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
19fdc     07 16 06 F6 | 	mov	arg03, #7
19fe0     28 16 62 FD | 	setq	arg03
19fe4     80 FF FF FF 
19fe8     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
19fec                 | ' 
19fec                 | '     ' get the address of the PSRAM memory driver so we can start it
19fec                 | ' 
19fec                 | '     driverAddr:= driver.getDriverAddr()
19fec                 | '     return @driver_start
19fec     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
19ff0     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
19ff4     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
19ff8                 | ' 
19ff8                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
19ff8                 | ' 
19ff8                 | '     if desiredcog < 0
19ff8     00 22 56 F2 | 	cmps	local03, #0 wc
19ffc                 | '         desiredcog := NEWCOG
19ffc     10 22 06 C6 |  if_b	mov	local03, #16
1a000                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
1a000     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1a004     11 25 02 F6 | 	mov	local04, local03
1a008     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
1a00c     0A 25 F2 FC | 	coginit	local04, arg02 wc
1a010     01 24 66 C6 |  if_b	neg	local04, #1
1a014     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1a018     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
1a01c                 | '     repeat until long[@startupData] == 0 
1a01c     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
1a020                 | LR__2022
1a020     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
1a024     F8 FF 9F 5D |  if_ne	jmp	#LR__2022
1a028                 | ' 
1a028                 | '     return drivercog
1a028     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1a02c     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
1a030     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1a034                 | LR__2023
1a034     A7 F0 03 F6 | 	mov	ptra, fp
1a038     B2 00 A0 FD | 	call	#popregs_
1a03c                 | _psram_spin2_startx_ret
1a03c     2D 00 64 FD | 	ret
1a040                 | 
1a040                 | ' 
1a040                 | ' '..............................................................................
1a040                 | ' 
1a040                 | ' {{
1a040                 | ' }}
1a040                 | ' PUB stop() : i
1a040                 | _psram_spin2_stop
1a040     00 00 06 F6 | 	mov	_var01, #0
1a044                 | '     if drivercog <> -1
1a044     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1a048     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1a04c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1a050     FF FF 7F FF 
1a054     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
1a058     70 00 90 AD |  if_e	jmp	#LR__2033
1a05c                 | '         cogstop(drivercog) ' a rather brutal stop
1a05c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1a060     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1a064     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1a068     03 12 62 FD | 	cogstop	arg01
1a06c     97 26 48 FB | 	callpa	#(@LR__2032-@LR__2030)>>2,fcache_load_ptr_
1a070                 | '         repeat i from 0 to 7
1a070                 | LR__2030
1a070                 | '             if long[$7FF00][i*3] < 0
1a070     00 FB 01 F6 | 	mov	result1, _var01
1a074     01 FA 65 F0 | 	shl	result1, #1
1a078     00 FB 01 F1 | 	add	result1, _var01
1a07c     02 FA 65 F0 | 	shl	result1, #2
1a080     FF 03 00 FF 
1a084     00 FB 05 F1 | 	add	result1, ##524032
1a088     FD FA 01 FB | 	rdlong	result1, result1
1a08c     00 FA 55 F2 | 	cmps	result1, #0 wc
1a090     1C 00 90 3D |  if_ae	jmp	#LR__2031
1a094                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
1a094     00 FB 01 F6 | 	mov	result1, _var01
1a098     01 FA 65 F0 | 	shl	result1, #1
1a09c     00 FB 01 F1 | 	add	result1, _var01
1a0a0     02 FA 65 F0 | 	shl	result1, #2
1a0a4     FF 03 00 FF 
1a0a8     00 FB 05 F1 | 	add	result1, ##524032
1a0ac     FD 20 68 FC | 	wrlong	#16, result1
1a0b0                 | LR__2031
1a0b0     01 00 06 F1 | 	add	_var01, #1
1a0b4     08 00 56 F2 | 	cmps	_var01, #8 wc
1a0b8     B4 FF 9F CD |  if_b	jmp	#LR__2030
1a0bc                 | LR__2032
1a0bc                 | '         drivercog := -1
1a0bc     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1a0c0     FF FF FF FF 
1a0c4     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
1a0c8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1a0cc                 | LR__2033
1a0cc                 | '     if driverlock <> -1
1a0cc     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1a0d0     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1a0d4     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1a0d8     FF FF 7F FF 
1a0dc     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1a0e0                 | '         LOCKRET(driverlock)
1a0e0     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
1a0e4     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
1a0e8     05 12 62 5D |  if_ne	lockret	arg01
1a0ec                 | '         driverlock := -1
1a0ec     FF FF FF 5F 
1a0f0     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
1a0f4     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
1a0f8     00 FB 01 F6 | 	mov	result1, _var01
1a0fc                 | _psram_spin2_stop_ret
1a0fc     2D 00 64 FD | 	ret
1a100                 | 
1a100                 | ' 
1a100                 | ' '..............................................................................
1a100                 | ' 
1a100                 | ' {{
1a100                 | ' }}
1a100                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
1a100                 | _psram_spin2_read1
1a100                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1a100                 | '     if drivercog == -1 ' driver must be running
1a100     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1a104     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1a108     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1a10c     FF FF 7F FF 
1a110     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1a114                 | '         return ERR_INACTIVE
1a114     0F FA 65 A6 |  if_e	neg	result1, #15
1a118     7C 00 90 AD |  if_e	jmp	#LR__2041
1a11c                 | '     if count == 0 ' don't even bother reading
1a11c     00 16 0E F2 | 	cmp	arg03, #0 wz
1a120                 | '         return 0
1a120     00 FA 05 A6 |  if_e	mov	result1, #0
1a124     70 00 90 AD |  if_e	jmp	#LR__2041
1a128                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1a128     00 FA 05 F6 | 	mov	result1, #0
1a12c     01 FA 61 FD | 	cogid	result1
1a130     FD 00 02 F6 | 	mov	_var01, result1
1a134     01 00 66 F0 | 	shl	_var01, #1
1a138     FD 00 02 F1 | 	add	_var01, result1
1a13c     02 00 66 F0 | 	shl	_var01, #2
1a140     FF 03 00 FF 
1a144     00 03 06 F6 | 	mov	_var02, ##524032
1a148     00 03 02 F1 | 	add	_var02, _var01
1a14c                 | '     if long[mailbox] < 0
1a14c     01 01 02 FB | 	rdlong	_var01, _var02
1a150     00 00 56 F2 | 	cmps	_var01, #0 wc
1a154                 | '         return ERR_MAILBOX_BUSY
1a154     1C FA 65 C6 |  if_b	neg	result1, #28
1a158     3C 00 90 CD |  if_b	jmp	#LR__2041
1a15c                 | '     long[mailbox][2] := count
1a15c     08 02 06 F1 | 	add	_var02, #8
1a160     01 17 62 FC | 	wrlong	arg03, _var02
1a164                 | '     long[mailbox][1] := dstHubAddr
1a164     04 02 86 F1 | 	sub	_var02, #4
1a168     01 13 62 FC | 	wrlong	arg01, _var02
1a16c     04 02 86 F1 | 	sub	_var02, #4
1a170                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
1a170     0A 05 02 F6 | 	mov	_var03, arg02
1a174     D9 04 06 F4 | 	bitl	_var03, #217
1a178     00 00 58 FF 
1a17c     00 00 06 F6 | 	mov	_var01, ##-1342177280
1a180     02 01 02 F1 | 	add	_var01, _var03
1a184     01 01 62 FC | 	wrlong	_var01, _var02
1a188                 | '     repeat
1a188                 | LR__2040
1a188                 | '         result := long[mailbox]    
1a188     01 05 02 FB | 	rdlong	_var03, _var02
1a18c     00 04 56 F2 | 	cmps	_var03, #0 wc
1a190     F4 FF 9F CD |  if_b	jmp	#LR__2040
1a194                 | '     while result < 0   
1a194                 | '     return -result                       'return success or error
1a194     02 FB 61 F6 | 	neg	result1, _var03
1a198                 | LR__2041
1a198                 | _psram_spin2_read1_ret
1a198     2D 00 64 FD | 	ret
1a19c                 | 
1a19c                 | ' 
1a19c                 | ' '..............................................................................
1a19c                 | ' 
1a19c                 | ' {{
1a19c                 | ' }}
1a19c                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
1a19c                 | _psram_spin2_write
1a19c                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1a19c                 | '     if drivercog == -1 ' driver must be running
1a19c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1a1a0     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1a1a4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1a1a8     FF FF 7F FF 
1a1ac     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1a1b0                 | '         return ERR_INACTIVE
1a1b0     0F FA 65 A6 |  if_e	neg	result1, #15
1a1b4     7C 00 90 AD |  if_e	jmp	#LR__2051
1a1b8                 | '     if count == 0 ' don't even bother writing
1a1b8     00 16 0E F2 | 	cmp	arg03, #0 wz
1a1bc                 | '         return 0
1a1bc     00 FA 05 A6 |  if_e	mov	result1, #0
1a1c0     70 00 90 AD |  if_e	jmp	#LR__2051
1a1c4                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1a1c4     00 FA 05 F6 | 	mov	result1, #0
1a1c8     01 FA 61 FD | 	cogid	result1
1a1cc     FD 00 02 F6 | 	mov	_var01, result1
1a1d0     01 00 66 F0 | 	shl	_var01, #1
1a1d4     FD 00 02 F1 | 	add	_var01, result1
1a1d8     02 00 66 F0 | 	shl	_var01, #2
1a1dc     FF 03 00 FF 
1a1e0     00 03 06 F6 | 	mov	_var02, ##524032
1a1e4     00 03 02 F1 | 	add	_var02, _var01
1a1e8                 | '     if long[mailbox] < 0
1a1e8     01 01 02 FB | 	rdlong	_var01, _var02
1a1ec     00 00 56 F2 | 	cmps	_var01, #0 wc
1a1f0                 | '         return ERR_MAILBOX_BUSY
1a1f0     1C FA 65 C6 |  if_b	neg	result1, #28
1a1f4     3C 00 90 CD |  if_b	jmp	#LR__2051
1a1f8                 | '     long[mailbox][2] := count
1a1f8     08 02 06 F1 | 	add	_var02, #8
1a1fc     01 17 62 FC | 	wrlong	arg03, _var02
1a200                 | '     long[mailbox][1] := srcHubAddr
1a200     04 02 86 F1 | 	sub	_var02, #4
1a204     01 13 62 FC | 	wrlong	arg01, _var02
1a208     04 02 86 F1 | 	sub	_var02, #4
1a20c                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
1a20c     0A 05 02 F6 | 	mov	_var03, arg02
1a210     D9 04 06 F4 | 	bitl	_var03, #217
1a214     00 00 78 FF 
1a218     00 00 06 F6 | 	mov	_var01, ##-268435456
1a21c     02 01 02 F1 | 	add	_var01, _var03
1a220     01 01 62 FC | 	wrlong	_var01, _var02
1a224                 | '     repeat
1a224                 | LR__2050
1a224                 | '         result := long[mailbox]    
1a224     01 05 02 FB | 	rdlong	_var03, _var02
1a228     00 04 56 F2 | 	cmps	_var03, #0 wc
1a22c     F4 FF 9F CD |  if_b	jmp	#LR__2050
1a230                 | '     while result < 0   
1a230                 | '     return -result                       'return success or error
1a230     02 FB 61 F6 | 	neg	result1, _var03
1a234                 | LR__2051
1a234                 | _psram_spin2_write_ret
1a234     2D 00 64 FD | 	ret
1a238                 | 
1a238                 | ' 
1a238                 | ' ' generalized fill
1a238                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
1a238                 | _psram_spin2_fill
1a238     09 01 02 F6 | 	mov	_var01, arg01
1a23c     0A 03 02 F6 | 	mov	_var02, arg02
1a240     0B 05 02 F6 | 	mov	_var03, arg03
1a244     0D 07 02 F6 | 	mov	_var04, arg05
1a248                 | '     case datasize 
1a248     01 06 86 F1 | 	sub	_var04, #1
1a24c     04 06 26 F3 | 	fle	_var04, #4
1a250     30 06 62 FD | 	jmprel	_var04
1a254                 | LR__2060
1a254     10 00 90 FD | 	jmp	#LR__2061
1a258     18 00 90 FD | 	jmp	#LR__2062
1a25c     2C 00 90 FD | 	jmp	#LR__2064
1a260     1C 00 90 FD | 	jmp	#LR__2063
1a264     24 00 90 FD | 	jmp	#LR__2064
1a268                 | LR__2061
1a268                 | '         1: req := driver.R_WRITEBYTE
1a268     00 00 60 FF 
1a26c     00 08 06 F6 | 	mov	_var05, ##-1073741824
1a270     20 00 90 FD | 	jmp	#LR__2065
1a274                 | LR__2062
1a274                 | '         2: req := driver.R_WRITEWORD
1a274     00 00 68 FF 
1a278     00 08 06 F6 | 	mov	_var05, ##-805306368
1a27c     14 00 90 FD | 	jmp	#LR__2065
1a280                 | LR__2063
1a280                 | '         4: req := driver.R_WRITELONG
1a280     00 00 70 FF 
1a284     00 08 06 F6 | 	mov	_var05, ##-536870912
1a288     08 00 90 FD | 	jmp	#LR__2065
1a28c                 | LR__2064
1a28c                 | '         other : return ERR_INVALID
1a28c     06 FA 65 F6 | 	neg	result1, #6
1a290     94 00 90 FD | 	jmp	#LR__2067
1a294                 | LR__2065
1a294                 | '     if count == 0   ' nothing to do
1a294     00 04 0E F2 | 	cmp	_var03, #0 wz
1a298                 | '         return 0
1a298     00 FA 05 A6 |  if_e	mov	result1, #0
1a29c     88 00 90 AD |  if_e	jmp	#LR__2067
1a2a0                 | '     if drivercog == -1
1a2a0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1a2a4     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
1a2a8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1a2ac     FF FF 7F FF 
1a2b0     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
1a2b4                 | '         return ERR_INACTIVE
1a2b4     0F FA 65 A6 |  if_e	neg	result1, #15
1a2b8     6C 00 90 AD |  if_e	jmp	#LR__2067
1a2bc                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
1a2bc     00 FA 05 F6 | 	mov	result1, #0
1a2c0     01 FA 61 FD | 	cogid	result1
1a2c4     FD 06 02 F6 | 	mov	_var04, result1
1a2c8     01 06 66 F0 | 	shl	_var04, #1
1a2cc     FD 06 02 F1 | 	add	_var04, result1
1a2d0     02 06 66 F0 | 	shl	_var04, #2
1a2d4     FF 03 00 FF 
1a2d8     00 0B 06 F6 | 	mov	_var06, ##524032
1a2dc     03 0B 02 F1 | 	add	_var06, _var04
1a2e0                 | '     if long[mailbox] < 0
1a2e0     05 07 02 FB | 	rdlong	_var04, _var06
1a2e4     00 06 56 F2 | 	cmps	_var04, #0 wc
1a2e8                 | '         return ERR_MAILBOX_BUSY
1a2e8     1C FA 65 C6 |  if_b	neg	result1, #28
1a2ec     38 00 90 CD |  if_b	jmp	#LR__2067
1a2f0                 | '     long[mailbox][2] := count
1a2f0     08 0A 06 F1 | 	add	_var06, #8
1a2f4     05 05 62 FC | 	wrlong	_var03, _var06
1a2f8                 | '     long[mailbox][1] := pattern
1a2f8     04 0A 86 F1 | 	sub	_var06, #4
1a2fc     05 03 62 FC | 	wrlong	_var02, _var06
1a300     04 0A 86 F1 | 	sub	_var06, #4
1a304                 | '     long[mailbox] := req + (addr & $1ffffff)
1a304     04 0D 02 F6 | 	mov	_var07, _var05
1a308     00 0F 02 F6 | 	mov	_var08, _var01
1a30c     D9 0E 06 F4 | 	bitl	_var08, #217
1a310     07 0D 02 F1 | 	add	_var07, _var08
1a314     05 0D 62 FC | 	wrlong	_var07, _var06
1a318                 | '     repeat
1a318                 | LR__2066
1a318                 | '         r := long[mailbox]
1a318     05 0F 02 FB | 	rdlong	_var08, _var06
1a31c     00 0E 56 F2 | 	cmps	_var08, #0 wc
1a320     F4 FF 9F CD |  if_b	jmp	#LR__2066
1a324                 | '     while r < 0
1a324                 | '     return -r                  ' return 0 for success or negated error code
1a324     07 FB 61 F6 | 	neg	result1, _var08
1a328                 | LR__2067
1a328                 | _psram_spin2_fill_ret
1a328     2D 00 64 FD | 	ret
1a32c                 | 
1a32c                 | ' 
1a32c                 | ' '..............................................................................
1a32c                 | ' 
1a32c                 | ' {{
1a32c                 | ' }}
1a32c                 | ' PUB setQos(cog, qos) : result | mailbox
1a32c                 | _psram_spin2_setQos
1a32c     09 01 02 F6 | 	mov	_var01, arg01
1a330                 | '     if drivercog == -1 ' driver must be running
1a330     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1a334     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1a338     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1a33c     FF FF 7F FF 
1a340     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1a344                 | '         return ERR_INACTIVE
1a344     0F FA 65 A6 |  if_e	neg	result1, #15
1a348     9C 00 90 AD |  if_e	jmp	#LR__2074
1a34c                 | '     if cog < 0 or cog > 7 ' enforce cog id range
1a34c     00 00 56 F2 | 	cmps	_var01, #0 wc
1a350     08 00 90 CD |  if_b	jmp	#LR__2070
1a354     08 00 56 F2 | 	cmps	_var01, #8 wc
1a358     08 00 90 CD |  if_b	jmp	#LR__2071
1a35c                 | LR__2070
1a35c                 | '         return ERR_INVALID
1a35c     06 FA 65 F6 | 	neg	result1, #6
1a360     84 00 90 FD | 	jmp	#LR__2074
1a364                 | LR__2071
1a364                 | '     long[@qosData][cog] := qos & !$1ff
1a364     FF 15 26 F5 | 	andn	arg02, #511
1a368     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1a36c     02 00 66 F0 | 	shl	_var01, #2
1a370     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
1a374     00 15 62 FC | 	wrlong	arg02, _var01
1a378                 | '     mailbox := $7FF00 + drivercog*12
1a378     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
1a37c     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
1a380     02 07 02 F6 | 	mov	_var04, _var03
1a384     01 06 66 F0 | 	shl	_var04, #1
1a388     02 07 02 F1 | 	add	_var04, _var03
1a38c     02 06 66 F0 | 	shl	_var04, #2
1a390     FF 03 00 FF 
1a394     00 09 06 F6 | 	mov	_var05, ##524032
1a398     03 09 02 F1 | 	add	_var05, _var04
1a39c                 | '     repeat until LOCKTRY(driverlock)
1a39c     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
1a3a0                 | LR__2072
1a3a0     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1a3a4     06 12 72 FD | 	locktry	arg01 wc
1a3a8     F4 FF 9F 3D |  if_ae	jmp	#LR__2072
1a3ac     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1a3b0                 | '     long[mailbox] := driver.R_CONFIG + cogid()
1a3b0     00 06 06 F6 | 	mov	_var04, #0
1a3b4     01 06 62 FD | 	cogid	_var04
1a3b8     00 00 78 FF 
1a3bc     00 02 06 F6 | 	mov	_var02, ##-268435456
1a3c0     03 03 02 F1 | 	add	_var02, _var04
1a3c4     04 03 62 FC | 	wrlong	_var02, _var05
1a3c8                 | '     repeat while long[mailbox] < 0
1a3c8                 | LR__2073
1a3c8     04 03 02 FB | 	rdlong	_var02, _var05
1a3cc     00 02 56 F2 | 	cmps	_var02, #0 wc
1a3d0     F4 FF 9F CD |  if_b	jmp	#LR__2073
1a3d4                 | '     LOCKREL(driverlock)
1a3d4     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1a3d8     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1a3dc     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1a3e0     07 12 72 FD | 	lockrel	arg01 wc
1a3e4     00 FA 05 F6 | 	mov	result1, #0
1a3e8                 | LR__2074
1a3e8                 | _psram_spin2_setQos_ret
1a3e8     2D 00 64 FD | 	ret
1a3ec                 | 
1a3ec                 | ' 
1a3ec                 | ' '..............................................................................
1a3ec                 | ' 
1a3ec                 | ' {{
1a3ec                 | ' }}
1a3ec                 | ' PRI lookupDelay(freq) : delay | profile
1a3ec                 | _psram_spin2_lookupDelay
1a3ec                 | '     profile := @delayTable
1a3ec     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
1a3f0     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
1a3f4                 | '     delay := long[profile][0]
1a3f4     00 03 02 FB | 	rdlong	_var02, _var01
1a3f8                 | '     repeat while long[profile][1] 
1a3f8     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
1a3fc     97 16 48 FB | 	callpa	#(@LR__2081-@LR__2080)>>2,fcache_load_ptr_
1a400                 | LR__2080
1a400     04 00 06 F1 | 	add	_var01, #4
1a404     00 FB 09 FB | 	rdlong	result1, _var01 wz
1a408     04 00 86 F1 | 	sub	_var01, #4
1a40c     1C 00 90 AD |  if_e	jmp	#LR__2082
1a410                 | '         if freq +< long[profile][1] 
1a410     04 00 06 F1 | 	add	_var01, #4
1a414     00 FB 01 FB | 	rdlong	result1, _var01
1a418     04 00 86 F1 | 	sub	_var01, #4
1a41c     FD 12 12 F2 | 	cmp	arg01, result1 wc
1a420                 | '             quit
1a420                 | '         profile += 4
1a420     04 00 06 31 |  if_ae	add	_var01, #4
1a424                 | '         delay++
1a424     01 02 06 31 |  if_ae	add	_var02, #1
1a428     D4 FF 9F 3D |  if_ae	jmp	#LR__2080
1a42c                 | LR__2081
1a42c                 | LR__2082
1a42c     01 FB 01 F6 | 	mov	result1, _var02
1a430                 | _psram_spin2_lookupDelay_ret
1a430     2D 00 64 FD | 	ret
1a434                 | 
1a434                 | ' 
1a434                 | ' PUB start() : r
1a434                 | _usbnew_spin2_start
1a434     00 00 06 F6 | 	mov	_var01, #0
1a438                 | '   ifnot driver_cog
1a438     15 00 00 FF 
1a43c     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
1a440     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
1a444     15 00 00 FF 
1a448     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
1a44c     38 00 90 5D |  if_ne	jmp	#LR__2090
1a450                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
1a450     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
1a454     10 00 06 F6 | 	mov	_var01, #16
1a458     00 16 06 F6 | 	mov	arg03, #0
1a45c     28 16 62 FD | 	setq	arg03
1a460     0A 01 F2 FC | 	coginit	_var01, arg02 wc
1a464     01 00 66 C6 |  if_b	neg	_var01, #1
1a468                 | '     if r >= 0
1a468     00 00 56 F2 | 	cmps	_var01, #0 wc
1a46c                 | '       driver_cog := r+1
1a46c     00 03 02 36 |  if_ae	mov	_var02, _var01
1a470     01 02 06 31 |  if_ae	add	_var02, #1
1a474     15 00 00 3F 
1a478     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
1a47c     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
1a480     15 00 00 3F 
1a484     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
1a488                 | LR__2090
1a488     00 FB 01 F6 | 	mov	result1, _var01
1a48c                 | _usbnew_spin2_start_ret
1a48c     2D 00 64 FD | 	ret
1a490                 | 
1a490                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
1a490                 | ' 
1a490                 | ' '' Return key event from buffer if there is one
1a490                 | ' PUB get_key() : r | tail
1a490                 | _usbnew_spin2_get_key
1a490                 | '   tail := keyq_tail
1a490     0F 00 00 FF 
1a494     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
1a498     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
1a49c                 | '   if keyq_head == tail
1a49c     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
1a4a0     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
1a4a4     0F 00 00 FF 
1a4a8     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
1a4ac     00 03 0A F2 | 	cmp	_var02, _var01 wz
1a4b0                 | '     return 0 ' No event
1a4b0     00 FA 05 A6 |  if_e	mov	result1, #0
1a4b4     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
1a4b8                 | '   r := keyq_data[tail]
1a4b8     00 03 02 F6 | 	mov	_var02, _var01
1a4bc     02 02 66 F0 | 	shl	_var02, #2
1a4c0     0F 00 00 FF 
1a4c4     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
1a4c8     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
1a4cc     01 FB 01 FB | 	rdlong	result1, _var02
1a4d0                 | '   if ++tail == KEYQUEUE_SIZE
1a4d0     01 00 06 F1 | 	add	_var01, #1
1a4d4     80 00 0E F2 | 	cmp	_var01, #128 wz
1a4d8                 | '     tail := 0
1a4d8     00 00 06 A6 |  if_e	mov	_var01, #0
1a4dc                 | '   keyq_tail := tail
1a4dc     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
1a4e0     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
1a4e4     0F 00 00 FF 
1a4e8     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
1a4ec                 | _usbnew_spin2_get_key_ret
1a4ec     2D 00 64 FD | 	ret
1a4f0                 | 
1a4f0                 | ' 
1a4f0                 | ' '' Emulate mouse movement
1a4f0                 | ' PUB mouse_move(x,y)
1a4f0                 | _usbnew_spin2_mouse_move
1a4f0     02 4A 05 F6 | 	mov	COUNT_, #2
1a4f4     A8 00 A0 FD | 	call	#pushregs_
1a4f8     09 1F 02 F6 | 	mov	local01, arg01
1a4fc     0A 21 02 F6 | 	mov	local02, arg02
1a500                 | '   mouse_lock := 1
1a500     14 00 00 FF 
1a504     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
1a508     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
1a50c     14 00 00 FF 
1a510     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
1a514                 | '   waitus(2) ' hope driver is now done
1a514     02 12 06 F6 | 	mov	arg01, #2
1a518     AC 0A B0 FD | 	call	#__system___waitus
1a51c                 | '   mouse_xacc := x
1a51c     14 00 00 FF 
1a520     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
1a524     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
1a528                 | '   mouse_yacc := y
1a528     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1a52c     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
1a530                 | '   if mouse_outptr
1a530     04 00 00 FF 
1a534     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
1a538     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
1a53c     0F 00 00 FF 
1a540     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1a544     24 00 90 AD |  if_e	jmp	#LR__2100
1a548                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
1a548     10 20 66 F0 | 	shl	local02, #16
1a54c     0F 1F 32 F9 | 	getword	local01, local01, #0
1a550     0F 21 42 F5 | 	or	local02, local01
1a554     0F 00 00 FF 
1a558     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
1a55c     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
1a560     0F 00 00 FF 
1a564     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1a568     0F 21 62 FC | 	wrlong	local02, local01
1a56c                 | LR__2100
1a56c                 | '   mouse_lock := 0
1a56c     14 00 00 FF 
1a570     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
1a574     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
1a578     14 00 00 FF 
1a57c     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
1a580     A7 F0 03 F6 | 	mov	ptra, fp
1a584     B2 00 A0 FD | 	call	#popregs_
1a588                 | _usbnew_spin2_mouse_move_ret
1a588     2D 00 64 FD | 	ret
1a58c                 | 
1a58c                 | '     '' Set HAVE_HIDPAD to enable.
1a58c                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
1a58c                 | ' 
1a58c                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
1a58c                 | ' PUB hidpad_id(dev) : r
1a58c                 | _usbnew_spin2_hidpad_id
1a58c                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
1a58c     13 00 00 FF 
1a590     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1a594     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1a598     09 01 02 F6 | 	mov	_var01, arg01
1a59c     03 00 66 F0 | 	shl	_var01, #3
1a5a0     09 01 82 F1 | 	sub	_var01, arg01
1a5a4     02 00 66 F0 | 	shl	_var01, #2
1a5a8     00 FB 01 F1 | 	add	result1, _var01
1a5ac     FD FA 01 FB | 	rdlong	result1, result1
1a5b0     13 00 00 FF 
1a5b4     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1a5b8                 | _usbnew_spin2_hidpad_id_ret
1a5b8     2D 00 64 FD | 	ret
1a5bc                 | 
1a5bc                 | ' 
1a5bc                 | ' '' Get all button states for a device
1a5bc                 | ' PUB hidpad_buttons(dev) : r 
1a5bc                 | _usbnew_spin2_hidpad_buttons
1a5bc                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
1a5bc     13 00 00 FF 
1a5c0     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1a5c4     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1a5c8     09 01 02 F6 | 	mov	_var01, arg01
1a5cc     03 00 66 F0 | 	shl	_var01, #3
1a5d0     09 01 82 F1 | 	sub	_var01, arg01
1a5d4     02 00 66 F0 | 	shl	_var01, #2
1a5d8     00 FB 01 F1 | 	add	result1, _var01
1a5dc     14 FA 05 F1 | 	add	result1, #20
1a5e0     FD FA 01 FB | 	rdlong	result1, result1
1a5e4     13 00 00 FF 
1a5e8     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1a5ec                 | _usbnew_spin2_hidpad_buttons_ret
1a5ec     2D 00 64 FD | 	ret
1a5f0                 | 
1a5f0                 | ' 
1a5f0                 | ' '' Get state of an axis (normalized between -32768 and 32767)
1a5f0                 | ' PUB hidpad_axis(dev,axnum) : r
1a5f0                 | _usbnew_spin2_hidpad_axis
1a5f0                 | '   if axnum +>= 6
1a5f0     06 14 16 F2 | 	cmp	arg02, #6 wc
1a5f4                 | '     return 0
1a5f4     00 FA 05 36 |  if_ae	mov	result1, #0
1a5f8     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
1a5fc                 | '   else 
1a5fc                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
1a5fc     13 00 00 FF 
1a600     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1a604     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1a608     09 01 02 F6 | 	mov	_var01, arg01
1a60c     03 00 66 F0 | 	shl	_var01, #3
1a610     09 01 82 F1 | 	sub	_var01, arg01
1a614     02 00 66 F0 | 	shl	_var01, #2
1a618     00 FB 01 F1 | 	add	result1, _var01
1a61c     04 00 06 F6 | 	mov	_var01, #4
1a620     0A 01 02 F1 | 	add	_var01, arg02
1a624     01 00 66 F0 | 	shl	_var01, #1
1a628     FD 00 02 F1 | 	add	_var01, result1
1a62c     00 FB E1 FA | 	rdword	result1, _var01
1a630     0F FA 65 F7 | 	signx	result1, #15
1a634     13 00 00 FF 
1a638     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1a63c                 | _usbnew_spin2_hidpad_axis_ret
1a63c     2D 00 64 FD | 	ret
1a640                 | 
1a640                 | ' 
1a640                 | ' 
1a640                 | ' '--------------------------------------------------------------
1a640                 | ' '---------- Init the variables, start the cog. ----------------
1a640                 | ' '--------------------------------------------------------------
1a640                 | ' 
1a640                 | ' pub start(mbox,scope,cache) :cog,base | iii
1a640                 | _audio096_spin2_start
1a640     04 4A 05 F6 | 	mov	COUNT_, #4
1a644     A8 00 A0 FD | 	call	#pushregs_
1a648     09 1F 02 F6 | 	mov	local01, arg01
1a64c                 | ' 
1a64c                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
1a64c                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
1a64c                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
1a64c                 | ' 
1a64c                 | ' mailboxaddr:=mbox 
1a64c     F2 1E 62 FC | 	wrlong	local01, objptr
1a650                 | ' scope_ptr:=scope
1a650     04 E4 05 F1 | 	add	objptr, #4
1a654     F2 14 62 FC | 	wrlong	arg02, objptr
1a658                 | ' cache_ptr:=cache
1a658     04 E4 05 F1 | 	add	objptr, #4
1a65c     F2 16 62 FC | 	wrlong	arg03, objptr
1a660                 | ' base:=@channel1[0]
1a660     04 E4 05 F1 | 	add	objptr, #4
1a664     F2 20 02 F6 | 	mov	local02, objptr
1a668                 | ' 
1a668                 | ' repeat iii from 0 to 7
1a668     00 22 06 F6 | 	mov	local03, #0
1a66c     02 00 00 FF 
1a670     94 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1172
1a674     0C E4 85 F1 | 	sub	objptr, #12
1a678     97 B0 48 FB | 	callpa	#(@LR__2111-@LR__2110)>>2,fcache_load_ptr_
1a67c                 | LR__2110
1a67c                 | '   long[base+64*iii]:=0
1a67c     10 1F 02 F6 | 	mov	local01, local02
1a680     11 FD 01 F6 | 	mov	result2, local03
1a684     06 FC 65 F0 | 	shl	result2, #6
1a688     FE 1E 02 F1 | 	add	local01, result2
1a68c     0F 01 68 FC | 	wrlong	#0, local01
1a690                 | '   long[base+64*iii+4]:=0
1a690     10 1F 02 F6 | 	mov	local01, local02
1a694     11 FD 01 F6 | 	mov	result2, local03
1a698     06 FC 65 F0 | 	shl	result2, #6
1a69c     FE 1E 02 F1 | 	add	local01, result2
1a6a0     04 1E 06 F1 | 	add	local01, #4
1a6a4     0F 01 68 FC | 	wrlong	#0, local01
1a6a8                 | '   long[base+64*iii+12]:=0
1a6a8     10 25 02 F6 | 	mov	local04, local02
1a6ac     11 1F 02 F6 | 	mov	local01, local03
1a6b0     06 1E 66 F0 | 	shl	local01, #6
1a6b4     0F 25 02 F1 | 	add	local04, local01
1a6b8     0C 24 06 F1 | 	add	local04, #12
1a6bc     12 01 68 FC | 	wrlong	#0, local04
1a6c0                 | '   long[base+64*iii+16]:=2 
1a6c0     10 25 02 F6 | 	mov	local04, local02
1a6c4     11 1F 02 F6 | 	mov	local01, local03
1a6c8     06 1E 66 F0 | 	shl	local01, #6
1a6cc     0F 25 02 F1 | 	add	local04, local01
1a6d0     10 24 06 F1 | 	add	local04, #16
1a6d4     12 05 68 FC | 	wrlong	#2, local04
1a6d8                 | '   word[base+64*iii+20]:=0
1a6d8     10 25 02 F6 | 	mov	local04, local02
1a6dc     11 1F 02 F6 | 	mov	local01, local03
1a6e0     06 1E 66 F0 | 	shl	local01, #6
1a6e4     0F 25 02 F1 | 	add	local04, local01
1a6e8     14 24 06 F1 | 	add	local04, #20
1a6ec     12 01 58 FC | 	wrword	#0, local04
1a6f0                 | '   word[base+64*iii+22]:=8192
1a6f0     10 25 02 F6 | 	mov	local04, local02
1a6f4     11 1F 02 F6 | 	mov	local01, local03
1a6f8     06 1E 66 F0 | 	shl	local01, #6
1a6fc     0F 25 02 F1 | 	add	local04, local01
1a700     16 24 06 F1 | 	add	local04, #22
1a704     10 00 80 FF 
1a708     12 01 58 FC | 	wrword	##8192, local04
1a70c                 | '   word[base+64*iii+24]:=4000+2*iii
1a70c     11 25 02 F6 | 	mov	local04, local03
1a710     01 24 66 F0 | 	shl	local04, #1
1a714     07 00 00 FF 
1a718     A0 1F 06 F6 | 	mov	local01, ##4000
1a71c     12 1F 02 F1 | 	add	local01, local04
1a720     10 25 02 F6 | 	mov	local04, local02
1a724     11 FD 01 F6 | 	mov	result2, local03
1a728     06 FC 65 F0 | 	shl	result2, #6
1a72c     FE 24 02 F1 | 	add	local04, result2
1a730     18 24 06 F1 | 	add	local04, #24
1a734     12 1F 52 FC | 	wrword	local01, local04
1a738                 | '   word[base+64*iii+26]:=2
1a738     10 25 02 F6 | 	mov	local04, local02
1a73c     11 1F 02 F6 | 	mov	local01, local03
1a740     06 1E 66 F0 | 	shl	local01, #6
1a744     0F 25 02 F1 | 	add	local04, local01
1a748     1A 24 06 F1 | 	add	local04, #26
1a74c     12 05 58 FC | 	wrword	#2, local04
1a750                 | '   long [base+64*iii+8]:=@null | $C0000000
1a750     F4 1E 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
1a754     3E 1E 26 F4 | 	bith	local01, #62
1a758     10 25 02 F6 | 	mov	local04, local02
1a75c     11 17 02 F6 | 	mov	arg03, local03
1a760     06 16 66 F0 | 	shl	arg03, #6
1a764     0B 25 02 F1 | 	add	local04, arg03
1a768     08 24 06 F1 | 	add	local04, #8
1a76c     12 1F 62 FC | 	wrlong	local01, local04
1a770                 | '   long[base+64*iii+32]:=0
1a770     10 25 02 F6 | 	mov	local04, local02
1a774     11 1F 02 F6 | 	mov	local01, local03
1a778     06 1E 66 F0 | 	shl	local01, #6
1a77c     0F 25 02 F1 | 	add	local04, local01
1a780     20 24 06 F1 | 	add	local04, #32
1a784     12 01 68 FC | 	wrlong	#0, local04
1a788                 | '   long[base+64*iii+36]:=0
1a788     10 25 02 F6 | 	mov	local04, local02
1a78c     11 1F 02 F6 | 	mov	local01, local03
1a790     06 1E 66 F0 | 	shl	local01, #6
1a794     0F 25 02 F1 | 	add	local04, local01
1a798     24 24 06 F1 | 	add	local04, #36
1a79c     12 01 68 FC | 	wrlong	#0, local04
1a7a0                 | '   long[base+64*iii+40]:=0
1a7a0     10 25 02 F6 | 	mov	local04, local02
1a7a4     11 1F 02 F6 | 	mov	local01, local03
1a7a8     06 1E 66 F0 | 	shl	local01, #6
1a7ac     0F 25 02 F1 | 	add	local04, local01
1a7b0     28 24 06 F1 | 	add	local04, #40
1a7b4     12 01 68 FC | 	wrlong	#0, local04
1a7b8                 | '   long[base+64*iii+44]:=0
1a7b8     10 25 02 F6 | 	mov	local04, local02
1a7bc     11 1F 02 F6 | 	mov	local01, local03
1a7c0     06 1E 66 F0 | 	shl	local01, #6
1a7c4     0F 25 02 F1 | 	add	local04, local01
1a7c8     2C 24 06 F1 | 	add	local04, #44
1a7cc     12 01 68 FC | 	wrlong	#0, local04
1a7d0     01 22 06 F1 | 	add	local03, #1
1a7d4     08 22 56 F2 | 	cmps	local03, #8 wc
1a7d8     A0 FE 9F CD |  if_b	jmp	#LR__2110
1a7dc                 | LR__2111
1a7dc     02 00 00 FF 
1a7e0     94 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1172
1a7e4                 | '   
1a7e4                 | ' cog:=coginit(16,@audio,@mailboxaddr)
1a7e4     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
1a7e8     F2 16 02 F6 | 	mov	arg03, objptr
1a7ec     10 24 06 F6 | 	mov	local04, #16
1a7f0     28 16 62 FD | 	setq	arg03
1a7f4     0A 25 F2 FC | 	coginit	local04, arg02 wc
1a7f8     01 24 66 C6 |  if_b	neg	local04, #1
1a7fc                 | ' waitms(100)
1a7fc     64 12 06 F6 | 	mov	arg01, #100
1a800     58 07 B0 FD | 	call	#__system___waitms
1a804                 | ' return cog,base
1a804     10 FD 01 F6 | 	mov	result2, local02
1a808     12 FB 01 F6 | 	mov	result1, local04
1a80c     A7 F0 03 F6 | 	mov	ptra, fp
1a810     B2 00 A0 FD | 	call	#popregs_
1a814                 | _audio096_spin2_start_ret
1a814     2D 00 64 FD | 	ret
1a818                 | 
1a818                 | ' 
1a818                 | ' ' a simple play procedure to not poke everything. 
1a818                 | ' 
1a818                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
1a818                 | _audio096_spin2_play
1a818     0C E4 05 F1 | 	add	objptr, #12
1a81c     F2 00 02 F6 | 	mov	_var01, objptr
1a820     06 12 66 F0 | 	shl	arg01, #6
1a824     09 01 02 F1 | 	add	_var01, arg01
1a828     00 13 02 F6 | 	mov	arg01, _var01
1a82c     0C 12 06 F1 | 	add	arg01, #12
1a830     09 1B 62 FC | 	wrlong	arg05, arg01
1a834     00 1C 56 F2 | 	cmps	arg06, #0 wc
1a838     00 13 02 36 |  if_ae	mov	arg01, _var01
1a83c     10 12 06 31 |  if_ae	add	arg01, #16
1a840     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
1a844     02 1A 06 C1 |  if_b	add	arg05, #2
1a848     00 13 02 C6 |  if_b	mov	arg01, _var01
1a84c     10 12 06 C1 |  if_b	add	arg01, #16
1a850     09 1B 62 CC |  if_b	wrlong	arg05, arg01
1a854     0B 13 52 F6 | 	abs	arg01, arg03 wc
1a858     0B 0A 80 FF 
1a85c     09 6D 18 FD | 	qdiv	##1316406, arg01
1a860                 | ' 
1a860                 | ' base2:=@channel1[0]+64*channel
1a860                 | ' 
1a860                 | ' 
1a860                 | ' long[base2+12]:= len
1a860                 | ' if loop >=0 
1a860                 | '   long[base2+16]:= loop
1a860     0C E4 85 F1 | 	sub	objptr, #12
1a864                 | ' else
1a864                 | '   long[base2+16]:= len+2
1a864                 | ' word[base2+20]:=vol
1a864     00 13 02 F6 | 	mov	arg01, _var01
1a868     14 12 06 F1 | 	add	arg01, #20
1a86c     09 19 52 FC | 	wrword	arg04, arg01
1a870                 | ' word[base2+24]:= 1316406/splfreq 
1a870     00 19 02 F6 | 	mov	arg04, _var01
1a874     18 18 06 F1 | 	add	arg04, #24
1a878                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
1a878                 | ' long[base2+28]:=$40000000
1a878                 | ' long[base2+8]:=sample+$C0000000 
1a878     00 00 60 FF 
1a87c     00 14 06 F1 | 	add	arg02, ##-1073741824
1a880     18 12 62 FD | 	getqx	arg01
1a884     09 13 82 F6 | 	negc	arg01, arg01
1a888     0C 13 52 FC | 	wrword	arg01, arg04
1a88c     00 13 02 F6 | 	mov	arg01, _var01
1a890     1A 12 06 F1 | 	add	arg01, #26
1a894     09 01 5A FC | 	wrword	#256, arg01
1a898     00 13 02 F6 | 	mov	arg01, _var01
1a89c     1C 12 06 F1 | 	add	arg01, #28
1a8a0     00 00 A0 FF 
1a8a4     09 01 68 FC | 	wrlong	##1073741824, arg01
1a8a8     08 00 06 F1 | 	add	_var01, #8
1a8ac     00 15 62 FC | 	wrlong	arg02, _var01
1a8b0                 | _audio096_spin2_play_ret
1a8b0     2D 00 64 FD | 	ret
1a8b4                 | 
1a8b4                 | ' 
1a8b4                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
1a8b4                 | _audio096_spin2_play8
1a8b4                 | ' 
1a8b4                 | ' base2:=@channel1[0]+64*channel
1a8b4     0C E4 05 F1 | 	add	objptr, #12
1a8b8     F2 00 02 F6 | 	mov	_var01, objptr
1a8bc     06 12 66 F0 | 	shl	arg01, #6
1a8c0     09 01 02 F1 | 	add	_var01, arg01
1a8c4                 | ' long[base2]:=0
1a8c4     00 01 68 FC | 	wrlong	#0, _var01
1a8c8                 | ' long[base2+8]:=sample+$40000000 
1a8c8     00 00 20 FF 
1a8cc     00 14 06 F1 | 	add	arg02, ##1073741824
1a8d0     00 13 02 F6 | 	mov	arg01, _var01
1a8d4     08 12 06 F1 | 	add	arg01, #8
1a8d8     09 15 62 FC | 	wrlong	arg02, arg01
1a8dc                 | ' if loop>=0
1a8dc     00 1C 56 F2 | 	cmps	arg06, #0 wc
1a8e0     0C E4 85 F1 | 	sub	objptr, #12
1a8e4     1C 00 90 CD |  if_b	jmp	#LR__2120
1a8e8                 | '   long[base2+12]:=loop
1a8e8     00 15 02 F6 | 	mov	arg02, _var01
1a8ec     0C 14 06 F1 | 	add	arg02, #12
1a8f0     0A 1D 62 FC | 	wrlong	arg06, arg02
1a8f4                 | '   long[base2+16]:= len
1a8f4     00 1D 02 F6 | 	mov	arg06, _var01
1a8f8     10 1C 06 F1 | 	add	arg06, #16
1a8fc     0E 1B 62 FC | 	wrlong	arg05, arg06
1a900     1C 00 90 FD | 	jmp	#LR__2121
1a904                 | LR__2120
1a904                 | ' else
1a904                 | '   long[base2+12]:= len
1a904     00 1D 02 F6 | 	mov	arg06, _var01
1a908     0C 1C 06 F1 | 	add	arg06, #12
1a90c     0E 1B 62 FC | 	wrlong	arg05, arg06
1a910                 | '   long[base2+16]:= len+1
1a910     01 1A 06 F1 | 	add	arg05, #1
1a914     00 13 02 F6 | 	mov	arg01, _var01
1a918     10 12 06 F1 | 	add	arg01, #16
1a91c     09 1B 62 FC | 	wrlong	arg05, arg01
1a920                 | LR__2121
1a920     0B 17 52 F6 | 	abs	arg03, arg03 wc
1a924     0B 0A 80 FF 
1a928     0B 6D 18 FD | 	qdiv	##1316406, arg03
1a92c                 | ' word[base2+20]:=vol
1a92c     00 17 02 F6 | 	mov	arg03, _var01
1a930     14 16 06 F1 | 	add	arg03, #20
1a934     0B 19 52 FC | 	wrword	arg04, arg03
1a938                 | ' word[base2+24]:= 1316406 /splfreq 
1a938     00 13 02 F6 | 	mov	arg01, _var01
1a93c     18 12 06 F1 | 	add	arg01, #24
1a940                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
1a940                 | ' long[base2+28]:=$40000000
1a940     18 18 62 FD | 	getqx	arg04
1a944     0C 19 82 F6 | 	negc	arg04, arg04
1a948     09 19 52 FC | 	wrword	arg04, arg01
1a94c     00 19 02 F6 | 	mov	arg04, _var01
1a950     1A 18 06 F1 | 	add	arg04, #26
1a954     0C 01 5A FC | 	wrword	#256, arg04
1a958     1C 00 06 F1 | 	add	_var01, #28
1a95c     00 00 A0 FF 
1a960     00 01 68 FC | 	wrlong	##1073741824, _var01
1a964                 | _audio096_spin2_play8_ret
1a964     2D 00 64 FD | 	ret
1a968                 | 
1a968                 | ' 
1a968                 | '     
1a968                 | ' pub stop(channel) 'silence it
1a968                 | _audio096_spin2_stop
1a968                 | ' 
1a968                 | ' word[@channel1[0]+64*channel+20]:=0
1a968     0C E4 05 F1 | 	add	objptr, #12
1a96c     F2 00 02 F6 | 	mov	_var01, objptr
1a970     09 03 02 F6 | 	mov	_var02, arg01
1a974     06 02 66 F0 | 	shl	_var02, #6
1a978     01 01 02 F1 | 	add	_var01, _var02
1a97c     14 00 06 F1 | 	add	_var01, #20
1a980     00 01 58 FC | 	wrword	#0, _var01
1a984                 | ' word[@channel1[0]+64*channel+20]:=0
1a984     F2 00 02 F6 | 	mov	_var01, objptr
1a988     06 12 66 F0 | 	shl	arg01, #6
1a98c     09 01 02 F1 | 	add	_var01, arg01
1a990     14 00 06 F1 | 	add	_var01, #20
1a994     00 01 58 FC | 	wrword	#0, _var01
1a998     0C E4 85 F1 | 	sub	objptr, #12
1a99c                 | _audio096_spin2_stop_ret
1a99c     2D 00 64 FD | 	ret
1a9a0                 | hubexit
1a9a0     81 00 80 FD | 	jmp	#cogexit
1a9a4                 | 
1a9a4                 | __system___setbaud
1a9a4     14 62 06 FB | 	rdlong	muldiva_, #20
1a9a8     09 65 02 F6 | 	mov	muldivb_, arg01
1a9ac     BA 00 A0 FD | 	call	#divide_
1a9b0     97 06 48 FB | 	callpa	#(@LR__2131-@LR__2130)>>2,fcache_load_ptr_
1a9b4                 | LR__2130
1a9b4     3E FA 9D FA | 	rdpin	result1, #62 wc
1a9b8     FE FC A1 F1 | 	subx	result2, result2
1a9bc     F4 FF 9F CD |  if_b	jmp	#LR__2130
1a9c0                 | LR__2131
1a9c0     40 7C 64 FD | 	dirl	#62
1a9c4     40 7E 64 FD | 	dirl	#63
1a9c8     F3 64 62 FC | 	wrlong	muldivb_, ptr___system__dat__
1a9cc     10 64 66 F0 | 	shl	muldivb_, #16
1a9d0     07 14 06 F6 | 	mov	arg02, #7
1a9d4     32 15 02 F1 | 	add	arg02, muldivb_
1a9d8     3E F8 0C FC | 	wrpin	#124, #62
1a9dc     3E 14 16 FC | 	wxpin	arg02, #62
1a9e0     3F 7C 0C FC | 	wrpin	#62, #63
1a9e4     14 14 06 F1 | 	add	arg02, #20
1a9e8     3F 14 16 FC | 	wxpin	arg02, #63
1a9ec     41 7C 64 FD | 	dirh	#62
1a9f0     41 7E 64 FD | 	dirh	#63
1a9f4                 | __system___setbaud_ret
1a9f4     2D 00 64 FD | 	ret
1a9f8                 | 
1a9f8                 | __system___txraw
1a9f8     01 4A 05 F6 | 	mov	COUNT_, #1
1a9fc     A8 00 A0 FD | 	call	#pushregs_
1aa00     09 1F 02 F6 | 	mov	local01, arg01
1aa04     97 06 48 FB | 	callpa	#(@LR__2141-@LR__2140)>>2,fcache_load_ptr_
1aa08                 | LR__2140
1aa08     3E FA 9D FA | 	rdpin	result1, #62 wc
1aa0c     FE FC A1 F1 | 	subx	result2, result2
1aa10     F4 FF 9F CD |  if_b	jmp	#LR__2140
1aa14                 | LR__2141
1aa14     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
1aa18     C2 01 00 AF 
1aa1c     00 12 06 A6 |  if_e	mov	arg01, ##230400
1aa20     80 FF BF AD |  if_e	call	#__system___setbaud
1aa24     58 7C 64 FD | 	drvl	#62
1aa28     3E 1E 26 FC | 	wypin	local01, #62
1aa2c     01 FA 05 F6 | 	mov	result1, #1
1aa30     A7 F0 03 F6 | 	mov	ptra, fp
1aa34     B2 00 A0 FD | 	call	#popregs_
1aa38                 | __system___txraw_ret
1aa38     2D 00 64 FD | 	ret
1aa3c                 | 
1aa3c                 | __system___rxraw
1aa3c     0D 4A 05 F6 | 	mov	COUNT_, #13
1aa40     A8 00 A0 FD | 	call	#pushregs_
1aa44     09 1F 02 F6 | 	mov	local01, arg01
1aa48     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1aa4c     C2 01 00 AF 
1aa50     00 12 06 A6 |  if_e	mov	arg01, ##230400
1aa54     4C FF BF AD |  if_e	call	#__system___setbaud
1aa58     00 1E 0E F2 | 	cmp	local01, #0 wz
1aa5c     20 00 90 AD |  if_e	jmp	#LR__2150
1aa60     14 22 06 FB | 	rdlong	local03, #20
1aa64     0A 22 46 F0 | 	shr	local03, #10
1aa68     11 1F 02 FD | 	qmul	local01, local03
1aa6c     1A FA 61 FD | 	getct	result1
1aa70     18 24 62 FD | 	getqx	local04
1aa74     12 FB 01 F1 | 	add	result1, local04
1aa78     FD 26 02 F6 | 	mov	local05, result1
1aa7c     04 00 90 FD | 	jmp	#LR__2151
1aa80                 | LR__2150
1aa80     00 26 06 F6 | 	mov	local05, #0
1aa84                 | LR__2151
1aa84     01 28 66 F6 | 	neg	local06, #1
1aa88     3F 2A 06 F6 | 	mov	local07, #63
1aa8c     00 2C 06 F6 | 	mov	local08, #0
1aa90     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1aa94     F3 2E 02 FB | 	rdlong	local09, ptr___system__dat__
1aa98     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
1aa9c                 | LR__2152
1aa9c     08 2E 16 F4 | 	testb	local09, #8 wc
1aaa0     09 2E 76 F4 | 	testbn	local09, #9 andc
1aaa4     0A 2E 46 F0 | 	shr	local09, #10
1aaa8     01 2C 06 C6 |  if_b	mov	local08, #1
1aaac     40 7E 6C 3D |  if_ae	testp	#63 wz
1aab0     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
1aab4     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
1aab8     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
1aabc                 | LR__2153
1aabc     00 20 06 F6 | 	mov	local02, #0
1aac0     00 2C 0E F2 | 	cmp	local08, #0 wz
1aac4     01 20 66 56 |  if_ne	neg	local02, #1
1aac8     00 30 06 F6 | 	mov	local10, #0
1aacc     00 22 06 F6 | 	mov	local03, #0
1aad0     00 1E 0E F2 | 	cmp	local01, #0 wz
1aad4     01 22 66 56 |  if_ne	neg	local03, #1
1aad8     00 24 06 F6 | 	mov	local04, #0
1aadc     00 32 06 F6 | 	mov	local11, #0
1aae0     1A FA 61 FD | 	getct	result1
1aae4     FD 34 02 F6 | 	mov	local12, result1
1aae8     1A 37 02 F6 | 	mov	local13, local12
1aaec     13 37 82 F1 | 	sub	local13, local05
1aaf0     00 36 56 F2 | 	cmps	local13, #0 wc
1aaf4     00 32 26 C6 |  if_b	not	local11, #0
1aaf8     00 32 0E F2 | 	cmp	local11, #0 wz
1aafc     00 24 26 56 |  if_ne	not	local04, #0
1ab00     12 23 CA F7 | 	test	local03, local04 wz
1ab04     00 30 26 56 |  if_ne	not	local10, #0
1ab08     18 21 4A F5 | 	or	local02, local10 wz
1ab0c     8C FF 9F AD |  if_e	jmp	#LR__2152
1ab10     00 2C 0E F2 | 	cmp	local08, #0 wz
1ab14     17 29 02 56 |  if_ne	mov	local06, local09
1ab18     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
1ab1c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1ab20     F3 2E 62 FC | 	wrlong	local09, ptr___system__dat__
1ab24     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
1ab28     14 FB 01 F6 | 	mov	result1, local06
1ab2c     A7 F0 03 F6 | 	mov	ptra, fp
1ab30     B2 00 A0 FD | 	call	#popregs_
1ab34                 | __system___rxraw_ret
1ab34     2D 00 64 FD | 	ret
1ab38                 | 
1ab38                 | __system___getus
1ab38     1A FC 71 FD | 	getct	result2 wc
1ab3c     1A 00 62 FD | 	getct	_var01
1ab40     10 E6 05 F1 | 	add	ptr___system__dat__, #16
1ab44     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
1ab48     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1ab4c     20 00 90 5D |  if_ne	jmp	#LR__2160
1ab50     14 02 06 FB | 	rdlong	_var02, #20
1ab54     A1 07 00 FF 
1ab58     40 02 16 FD | 	qdiv	_var02, ##1000000
1ab5c     10 E6 05 F1 | 	add	ptr___system__dat__, #16
1ab60     18 FA 61 FD | 	getqx	result1
1ab64     FD 02 02 F6 | 	mov	_var02, result1
1ab68     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
1ab6c     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1ab70                 | LR__2160
1ab70     01 FD 11 FD | 	qdiv	result2, _var02
1ab74     19 FC 61 FD | 	getqy	result2
1ab78     28 FC 61 FD | 	setq	result2
1ab7c     01 01 12 FD | 	qdiv	_var01, _var02
1ab80     18 FA 61 FD | 	getqx	result1
1ab84                 | __system___getus_ret
1ab84     2D 00 64 FD | 	ret
1ab88                 | 
1ab88                 | __system____builtin_memmove
1ab88     09 01 02 F6 | 	mov	_var01, arg01
1ab8c     0A 13 52 F2 | 	cmps	arg01, arg02 wc
1ab90     10 00 90 CD |  if_b	jmp	#LR__2170
1ab94     0A 03 02 F6 | 	mov	_var02, arg02
1ab98     0B 03 02 F1 | 	add	_var02, arg03
1ab9c     01 13 52 F2 | 	cmps	arg01, _var02 wc
1aba0     48 00 90 CD |  if_b	jmp	#LR__2176
1aba4                 | LR__2170
1aba4     0B 05 02 F6 | 	mov	_var03, arg03
1aba8     02 04 4E F0 | 	shr	_var03, #2 wz
1abac     18 00 90 AD |  if_e	jmp	#LR__2175
1abb0     97 0A 48 FB | 	callpa	#(@LR__2173-@LR__2171)>>2,fcache_load_ptr_
1abb4                 | LR__2171
1abb4     02 09 D8 FC | 	rep	@LR__2174, _var03
1abb8                 | LR__2172
1abb8     0A 05 02 FB | 	rdlong	_var03, arg02
1abbc     09 05 62 FC | 	wrlong	_var03, arg01
1abc0     04 12 06 F1 | 	add	arg01, #4
1abc4     04 14 06 F1 | 	add	arg02, #4
1abc8                 | LR__2173
1abc8                 | LR__2174
1abc8                 | LR__2175
1abc8     02 16 CE F7 | 	test	arg03, #2 wz
1abcc     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
1abd0     09 03 52 5C |  if_ne	wrword	_var02, arg01
1abd4     02 12 06 51 |  if_ne	add	arg01, #2
1abd8     02 14 06 51 |  if_ne	add	arg02, #2
1abdc     01 16 CE F7 | 	test	arg03, #1 wz
1abe0     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
1abe4     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
1abe8     28 00 90 FD | 	jmp	#LR__2182
1abec                 | LR__2176
1abec     0B 13 02 F1 | 	add	arg01, arg03
1abf0     0B 15 02 F1 | 	add	arg02, arg03
1abf4     0B 07 0A F6 | 	mov	_var04, arg03 wz
1abf8     18 00 90 AD |  if_e	jmp	#LR__2181
1abfc     97 0A 48 FB | 	callpa	#(@LR__2179-@LR__2177)>>2,fcache_load_ptr_
1ac00                 | LR__2177
1ac00     03 09 D8 FC | 	rep	@LR__2180, _var04
1ac04                 | LR__2178
1ac04     01 12 86 F1 | 	sub	arg01, #1
1ac08     01 14 86 F1 | 	sub	arg02, #1
1ac0c     0A 03 C2 FA | 	rdbyte	_var02, arg02
1ac10     09 03 42 FC | 	wrbyte	_var02, arg01
1ac14                 | LR__2179
1ac14                 | LR__2180
1ac14                 | LR__2181
1ac14                 | LR__2182
1ac14     00 FB 01 F6 | 	mov	result1, _var01
1ac18                 | __system____builtin_memmove_ret
1ac18     2D 00 64 FD | 	ret
1ac1c                 | 
1ac1c                 | __system____builtin_strcpy
1ac1c     09 01 02 F6 | 	mov	_var01, arg01
1ac20     97 0A 48 FB | 	callpa	#(@LR__2191-@LR__2190)>>2,fcache_load_ptr_
1ac24                 | LR__2190
1ac24     0A FB C9 FA | 	rdbyte	result1, arg02 wz
1ac28     09 FB 41 FC | 	wrbyte	result1, arg01
1ac2c     01 14 06 F1 | 	add	arg02, #1
1ac30     01 12 06 F1 | 	add	arg01, #1
1ac34     EC FF 9F 5D |  if_ne	jmp	#LR__2190
1ac38                 | LR__2191
1ac38     00 FB 01 F6 | 	mov	result1, _var01
1ac3c                 | __system____builtin_strcpy_ret
1ac3c     2D 00 64 FD | 	ret
1ac40                 | 
1ac40                 | __system____topofstack
1ac40     00 4A 05 F6 | 	mov	COUNT_, #0
1ac44     A8 00 A0 FD | 	call	#pushregs_
1ac48     08 F0 07 F1 | 	add	ptra, #8
1ac4c     04 4E 05 F1 | 	add	fp, #4
1ac50     A7 12 62 FC | 	wrlong	arg01, fp
1ac54     A7 FA 01 F6 | 	mov	result1, fp
1ac58     04 4E 85 F1 | 	sub	fp, #4
1ac5c     A7 F0 03 F6 | 	mov	ptra, fp
1ac60     B2 00 A0 FD | 	call	#popregs_
1ac64                 | __system____topofstack_ret
1ac64     2D 00 64 FD | 	ret
1ac68                 | 
1ac68                 | __system___lockmem
1ac68     00 FA 05 F6 | 	mov	result1, #0
1ac6c     01 FA 61 FD | 	cogid	result1
1ac70     00 FB 05 F1 | 	add	result1, #256
1ac74                 | LR__2200
1ac74     09 01 0A FB | 	rdlong	_var01, arg01 wz
1ac78     09 FB 61 AC |  if_e	wrlong	result1, arg01
1ac7c     09 01 02 AB |  if_e	rdlong	_var01, arg01
1ac80     09 01 02 AB |  if_e	rdlong	_var01, arg01
1ac84     FD 00 0A F2 | 	cmp	_var01, result1 wz
1ac88     E8 FF 9F 5D |  if_ne	jmp	#LR__2200
1ac8c                 | __system___lockmem_ret
1ac8c     2D 00 64 FD | 	ret
1ac90                 | 
1ac90                 | __system___string_cmp
1ac90     97 14 48 FB | 	callpa	#(@LR__2211-@LR__2210)>>2,fcache_load_ptr_
1ac94                 | LR__2210
1ac94     09 01 C2 FA | 	rdbyte	_var01, arg01
1ac98     0A 03 C2 FA | 	rdbyte	_var02, arg02
1ac9c     00 05 02 F6 | 	mov	_var03, _var01
1aca0     01 05 8A F1 | 	sub	_var03, _var02 wz
1aca4     01 12 06 F1 | 	add	arg01, #1
1aca8     01 14 06 F1 | 	add	arg02, #1
1acac     0C 00 90 5D |  if_ne	jmp	#LR__2212
1acb0     00 00 0E F2 | 	cmp	_var01, #0 wz
1acb4     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
1acb8     D8 FF 9F 5D |  if_ne	jmp	#LR__2210
1acbc                 | LR__2211
1acbc                 | LR__2212
1acbc     02 FB 01 F6 | 	mov	result1, _var03
1acc0                 | __system___string_cmp_ret
1acc0     2D 00 64 FD | 	ret
1acc4                 | 
1acc4                 | __system___string_concat
1acc4     05 4A 05 F6 | 	mov	COUNT_, #5
1acc8     A8 00 A0 FD | 	call	#pushregs_
1accc     09 1F 02 F6 | 	mov	local01, arg01
1acd0     0A 21 02 F6 | 	mov	local02, arg02
1acd4     0F 13 02 F6 | 	mov	arg01, local01
1acd8     09 23 02 F6 | 	mov	local03, arg01
1acdc     97 06 48 FB | 	callpa	#(@LR__2221-@LR__2220)>>2,fcache_load_ptr_
1ace0                 | LR__2220
1ace0     11 FB C9 FA | 	rdbyte	result1, local03 wz
1ace4     01 22 06 51 |  if_ne	add	local03, #1
1ace8     F4 FF 9F 5D |  if_ne	jmp	#LR__2220
1acec                 | LR__2221
1acec     09 23 82 F1 | 	sub	local03, arg01
1acf0     11 25 02 F6 | 	mov	local04, local03
1acf4     10 13 02 F6 | 	mov	arg01, local02
1acf8     09 23 02 F6 | 	mov	local03, arg01
1acfc     97 06 48 FB | 	callpa	#(@LR__2223-@LR__2222)>>2,fcache_load_ptr_
1ad00                 | LR__2222
1ad00     11 FB C9 FA | 	rdbyte	result1, local03 wz
1ad04     01 22 06 51 |  if_ne	add	local03, #1
1ad08     F4 FF 9F 5D |  if_ne	jmp	#LR__2222
1ad0c                 | LR__2223
1ad0c     09 23 82 F1 | 	sub	local03, arg01
1ad10     12 13 02 F6 | 	mov	arg01, local04
1ad14     11 13 02 F1 | 	add	arg01, local03
1ad18     01 12 06 F1 | 	add	arg01, #1
1ad1c     38 3D B0 FD | 	call	#__system___gc_alloc_managed
1ad20     FD 26 0A F6 | 	mov	local05, result1 wz
1ad24     28 00 90 AD |  if_e	jmp	#LR__2224
1ad28     13 13 02 F6 | 	mov	arg01, local05
1ad2c     0F 15 02 F6 | 	mov	arg02, local01
1ad30     12 17 02 F6 | 	mov	arg03, local04
1ad34     50 FE BF FD | 	call	#__system____builtin_memmove
1ad38     13 13 02 F6 | 	mov	arg01, local05
1ad3c     12 13 02 F1 | 	add	arg01, local04
1ad40     01 22 06 F1 | 	add	local03, #1
1ad44     10 15 02 F6 | 	mov	arg02, local02
1ad48     11 17 02 F6 | 	mov	arg03, local03
1ad4c     38 FE BF FD | 	call	#__system____builtin_memmove
1ad50                 | LR__2224
1ad50     13 FB 01 F6 | 	mov	result1, local05
1ad54     A7 F0 03 F6 | 	mov	ptra, fp
1ad58     B2 00 A0 FD | 	call	#popregs_
1ad5c                 | __system___string_concat_ret
1ad5c     2D 00 64 FD | 	ret
1ad60                 | 
1ad60                 | __system___tx
1ad60     02 4A 05 F6 | 	mov	COUNT_, #2
1ad64     A8 00 A0 FD | 	call	#pushregs_
1ad68     09 1F 02 F6 | 	mov	local01, arg01
1ad6c     0A 1E 0E F2 | 	cmp	local01, #10 wz
1ad70     18 00 90 5D |  if_ne	jmp	#LR__2230
1ad74     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1ad78     F3 20 02 FB | 	rdlong	local02, ptr___system__dat__
1ad7c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1ad80     02 20 CE F7 | 	test	local02, #2 wz
1ad84     0D 12 06 56 |  if_ne	mov	arg01, #13
1ad88     6C FC BF 5D |  if_ne	call	#__system___txraw
1ad8c                 | LR__2230
1ad8c     0F 13 02 F6 | 	mov	arg01, local01
1ad90     64 FC BF FD | 	call	#__system___txraw
1ad94     A7 F0 03 F6 | 	mov	ptra, fp
1ad98     B2 00 A0 FD | 	call	#popregs_
1ad9c                 | __system___tx_ret
1ad9c     2D 00 64 FD | 	ret
1ada0                 | 
1ada0                 | __system___rx
1ada0     01 4A 05 F6 | 	mov	COUNT_, #1
1ada4     A8 00 A0 FD | 	call	#pushregs_
1ada8                 | LR__2240
1ada8     00 12 06 F6 | 	mov	arg01, #0
1adac     8C FC BF FD | 	call	#__system___rxraw
1adb0     FD 1E 02 F6 | 	mov	local01, result1
1adb4     FF FF 7F FF 
1adb8     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
1adbc     E8 FF 9F AD |  if_e	jmp	#LR__2240
1adc0     0D 1E 0E F2 | 	cmp	local01, #13 wz
1adc4     14 00 90 5D |  if_ne	jmp	#LR__2241
1adc8     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1adcc     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1add0     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1add4     02 FA CD F7 | 	test	result1, #2 wz
1add8     0A 1E 06 56 |  if_ne	mov	local01, #10
1addc                 | LR__2241
1addc     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1ade0     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1ade4     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1ade8     01 12 CE F7 | 	test	arg01, #1 wz
1adec     1C 00 90 AD |  if_e	jmp	#LR__2244
1adf0     7F 1E 0E F2 | 	cmp	local01, #127 wz
1adf4     0C 00 90 5D |  if_ne	jmp	#LR__2242
1adf8     08 12 06 F6 | 	mov	arg01, #8
1adfc     60 FF BF FD | 	call	#__system___tx
1ae00     08 00 90 FD | 	jmp	#LR__2243
1ae04                 | LR__2242
1ae04     0F 13 02 F6 | 	mov	arg01, local01
1ae08     54 FF BF FD | 	call	#__system___tx
1ae0c                 | LR__2243
1ae0c                 | LR__2244
1ae0c     0F FB 01 F6 | 	mov	result1, local01
1ae10     A7 F0 03 F6 | 	mov	ptra, fp
1ae14     B2 00 A0 FD | 	call	#popregs_
1ae18                 | __system___rx_ret
1ae18     2D 00 64 FD | 	ret
1ae1c                 | 
1ae1c                 | __system___pinwrite
1ae1c     09 01 02 F6 | 	mov	_var01, arg01
1ae20     1F 00 06 F5 | 	and	_var01, #31
1ae24     20 12 CE F7 | 	test	arg01, #32 wz
1ae28     06 12 46 F0 | 	shr	arg01, #6
1ae2c     09 13 CA F9 | 	bmask	arg01, arg01
1ae30     00 13 62 F0 | 	shl	arg01, _var01
1ae34     00 15 62 F0 | 	shl	arg02, _var01
1ae38     1C 00 90 AD |  if_e	jmp	#LR__2250
1ae3c     09 F7 43 F5 | 	or	dirb, arg01
1ae40     FD 01 02 F6 | 	mov	_var01, outb
1ae44     09 01 22 F5 | 	andn	_var01, arg01
1ae48     09 15 02 F5 | 	and	arg02, arg01
1ae4c     0A 01 42 F5 | 	or	_var01, arg02
1ae50     00 FB 03 F6 | 	mov	outb, _var01
1ae54     18 00 90 FD | 	jmp	#LR__2251
1ae58                 | LR__2250
1ae58     09 F5 43 F5 | 	or	dira, arg01
1ae5c     FC 01 02 F6 | 	mov	_var01, outa
1ae60     09 01 22 F5 | 	andn	_var01, arg01
1ae64     09 15 02 F5 | 	and	arg02, arg01
1ae68     0A 01 42 F5 | 	or	_var01, arg02
1ae6c     00 F9 03 F6 | 	mov	outa, _var01
1ae70                 | LR__2251
1ae70                 | __system___pinwrite_ret
1ae70     2D 00 64 FD | 	ret
1ae74                 | 
1ae74                 | __system___basic_read_line
1ae74     06 4A 05 F6 | 	mov	COUNT_, #6
1ae78     A8 00 A0 FD | 	call	#pushregs_
1ae7c     09 1F 02 F6 | 	mov	local01, arg01
1ae80     00 20 06 F6 | 	mov	local02, #0
1ae84     18 22 06 F6 | 	mov	local03, #24
1ae88     00 24 06 F6 | 	mov	local04, #0
1ae8c     18 12 06 F6 | 	mov	arg01, #24
1ae90     C4 3B B0 FD | 	call	#__system___gc_alloc_managed
1ae94     FD 26 0A F6 | 	mov	local05, result1 wz
1ae98     13 FB 01 A6 |  if_e	mov	result1, local05
1ae9c     B0 00 90 AD |  if_e	jmp	#LR__2263
1aea0                 | LR__2260
1aea0     0F 13 02 F6 | 	mov	arg01, local01
1aea4     8C 0B B0 FD | 	call	#__system___basic_get_char
1aea8     FD 28 02 F6 | 	mov	local06, result1
1aeac     01 28 56 F2 | 	cmps	local06, #1 wc
1aeb0     8C 00 90 CD |  if_b	jmp	#LR__2262
1aeb4     0A 28 0E F2 | 	cmp	local06, #10 wz
1aeb8     10 00 90 5D |  if_ne	jmp	#LR__2261
1aebc     00 24 0E F2 | 	cmp	local04, #0 wz
1aec0     01 20 56 52 |  if_ne	cmps	local02, #1 wc
1aec4     01 20 86 11 |  if_a	sub	local02, #1
1aec8     74 00 90 FD | 	jmp	#LR__2262
1aecc                 | LR__2261
1aecc     0D 28 0E F2 | 	cmp	local06, #13 wz
1aed0     01 24 06 A6 |  if_e	mov	local04, #1
1aed4     00 24 06 56 |  if_ne	mov	local04, #0
1aed8     08 28 0E F2 | 	cmp	local06, #8 wz
1aedc     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
1aee0     01 20 56 A2 |  if_e	cmps	local02, #1 wc
1aee4     01 20 86 21 |  if_nc_and_z	sub	local02, #1
1aee8     B4 FF 9F AD |  if_e	jmp	#LR__2260
1aeec     13 17 02 F6 | 	mov	arg03, local05
1aef0     10 17 02 F1 | 	add	arg03, local02
1aef4     0B 29 42 FC | 	wrbyte	local06, arg03
1aef8     01 20 06 F1 | 	add	local02, #1
1aefc     11 21 0A F2 | 	cmp	local02, local03 wz
1af00     9C FF 9F 5D |  if_ne	jmp	#LR__2260
1af04     11 13 02 F6 | 	mov	arg01, local03
1af08     20 12 06 F1 | 	add	arg01, #32
1af0c     48 3B B0 FD | 	call	#__system___gc_alloc_managed
1af10     FD 28 0A F6 | 	mov	local06, result1 wz
1af14     14 FB 01 A6 |  if_e	mov	result1, local06
1af18     34 00 90 AD |  if_e	jmp	#LR__2263
1af1c     14 13 02 F6 | 	mov	arg01, local06
1af20     13 15 02 F6 | 	mov	arg02, local05
1af24     11 17 02 F6 | 	mov	arg03, local03
1af28     5C FC BF FD | 	call	#__system____builtin_memmove
1af2c     20 22 06 F1 | 	add	local03, #32
1af30     13 13 02 F6 | 	mov	arg01, local05
1af34     5C 3C B0 FD | 	call	#__system___gc_free
1af38     14 27 02 F6 | 	mov	local05, local06
1af3c     60 FF 9F FD | 	jmp	#LR__2260
1af40                 | LR__2262
1af40     13 29 02 F6 | 	mov	local06, local05
1af44     10 29 02 F1 | 	add	local06, local02
1af48     14 01 48 FC | 	wrbyte	#0, local06
1af4c     13 FB 01 F6 | 	mov	result1, local05
1af50                 | LR__2263
1af50     A7 F0 03 F6 | 	mov	ptra, fp
1af54     B2 00 A0 FD | 	call	#popregs_
1af58                 | __system___basic_read_line_ret
1af58     2D 00 64 FD | 	ret
1af5c                 | 
1af5c                 | __system___waitms
1af5c     09 01 02 F6 | 	mov	_var01, arg01
1af60     1A 02 62 FD | 	getct	_var02
1af64     14 04 06 FB | 	rdlong	_var03, #20
1af68     97 14 48 FB | 	callpa	#(@LR__2271-@LR__2270)>>2,fcache_load_ptr_
1af6c                 | LR__2270
1af6c     01 00 00 FF 
1af70     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
1af74     1C 00 90 CD |  if_b	jmp	#LR__2272
1af78     02 03 02 F1 | 	add	_var02, _var03
1af7c     01 13 02 F6 | 	mov	arg01, _var02
1af80     00 12 66 FA | 	addct1	arg01, #0
1af84     24 22 60 FD | 	waitct1
1af88     01 00 00 FF 
1af8c     E8 01 86 F1 | 	sub	_var01, ##1000
1af90     D8 FF 9F FD | 	jmp	#LR__2270
1af94                 | LR__2271
1af94                 | LR__2272
1af94     01 00 56 F2 | 	cmps	_var01, #1 wc
1af98     28 00 90 CD |  if_b	jmp	#LR__2273
1af9c     02 01 02 FD | 	qmul	_var01, _var03
1afa0     01 00 00 FF 
1afa4     E8 17 06 F6 | 	mov	arg03, ##1000
1afa8     19 FA 61 FD | 	getqy	result1
1afac     18 12 62 FD | 	getqx	arg01
1afb0     28 FA 61 FD | 	setq	result1
1afb4     0B 13 12 FD | 	qdiv	arg01, arg03
1afb8     18 12 62 FD | 	getqx	arg01
1afbc     01 13 62 FA | 	addct1	arg01, _var02
1afc0     24 22 60 FD | 	waitct1
1afc4                 | LR__2273
1afc4                 | __system___waitms_ret
1afc4     2D 00 64 FD | 	ret
1afc8                 | 
1afc8                 | __system___waitus
1afc8     09 01 02 F6 | 	mov	_var01, arg01
1afcc     1A 02 62 FD | 	getct	_var02
1afd0     14 04 06 FB | 	rdlong	_var03, #20
1afd4     97 14 48 FB | 	callpa	#(@LR__2281-@LR__2280)>>2,fcache_load_ptr_
1afd8                 | LR__2280
1afd8     A1 07 00 FF 
1afdc     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
1afe0     1C 00 90 CD |  if_b	jmp	#LR__2282
1afe4     02 03 02 F1 | 	add	_var02, _var03
1afe8     01 13 02 F6 | 	mov	arg01, _var02
1afec     00 12 66 FA | 	addct1	arg01, #0
1aff0     24 22 60 FD | 	waitct1
1aff4     A1 07 00 FF 
1aff8     40 00 86 F1 | 	sub	_var01, ##1000000
1affc     D8 FF 9F FD | 	jmp	#LR__2280
1b000                 | LR__2281
1b000                 | LR__2282
1b000     01 00 56 F2 | 	cmps	_var01, #1 wc
1b004     28 00 90 CD |  if_b	jmp	#LR__2283
1b008     02 01 02 FD | 	qmul	_var01, _var03
1b00c     A1 07 00 FF 
1b010     40 16 06 F6 | 	mov	arg03, ##1000000
1b014     19 FA 61 FD | 	getqy	result1
1b018     18 12 62 FD | 	getqx	arg01
1b01c     28 FA 61 FD | 	setq	result1
1b020     0B 13 12 FD | 	qdiv	arg01, arg03
1b024     18 FA 61 FD | 	getqx	result1
1b028     FD 02 62 FA | 	addct1	_var02, result1
1b02c     24 22 60 FD | 	waitct1
1b030                 | LR__2283
1b030                 | __system___waitus_ret
1b030     2D 00 64 FD | 	ret
1b034                 | 
1b034                 | __system___mount
1b034     0B 4A 05 F6 | 	mov	COUNT_, #11
1b038     A8 00 A0 FD | 	call	#pushregs_
1b03c     09 1F 02 F6 | 	mov	local01, arg01
1b040     0A 21 0A F6 | 	mov	local02, arg02 wz
1b044     01 22 66 F6 | 	neg	local03, #1
1b048     01 FA 65 A6 |  if_e	neg	result1, #1
1b04c     98 02 90 AD |  if_e	jmp	#LR__2305
1b050     0F FB C1 FA | 	rdbyte	result1, local01
1b054     2F FA 0D F2 | 	cmp	result1, #47 wz
1b058     28 00 90 5D |  if_ne	jmp	#LR__2292
1b05c     0F 13 02 F6 | 	mov	arg01, local01
1b060     09 25 02 F6 | 	mov	local04, arg01
1b064     97 06 48 FB | 	callpa	#(@LR__2291-@LR__2290)>>2,fcache_load_ptr_
1b068                 | LR__2290
1b068     12 FB C9 FA | 	rdbyte	result1, local04 wz
1b06c     01 24 06 51 |  if_ne	add	local04, #1
1b070     F4 FF 9F 5D |  if_ne	jmp	#LR__2290
1b074                 | LR__2291
1b074     09 25 82 F1 | 	sub	local04, arg01
1b078     12 FB 01 F6 | 	mov	result1, local04
1b07c     10 FA 55 F2 | 	cmps	result1, #16 wc
1b080     14 00 90 CD |  if_b	jmp	#LR__2293
1b084                 | LR__2292
1b084     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1b088     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
1b08c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1b090     01 FA 65 F6 | 	neg	result1, #1
1b094     50 02 90 FD | 	jmp	#LR__2305
1b098                 | LR__2293
1b098     00 26 06 F6 | 	mov	local05, #0
1b09c                 | LR__2294
1b09c     04 26 56 F2 | 	cmps	local05, #4 wc
1b0a0     B0 00 90 3D |  if_ae	jmp	#LR__2299
1b0a4     13 13 02 F6 | 	mov	arg01, local05
1b0a8     02 12 66 F0 | 	shl	arg01, #2
1b0ac     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1b0b0     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1b0b4     09 FB 09 FB | 	rdlong	result1, arg01 wz
1b0b8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1b0bc     00 22 56 A2 |  if_e	cmps	local03, #0 wc
1b0c0     13 23 02 86 |  if_c_and_z	mov	local03, local05
1b0c4     84 00 90 8D |  if_c_and_z	jmp	#LR__2298
1b0c8     13 13 02 F6 | 	mov	arg01, local05
1b0cc     02 12 66 F0 | 	shl	arg01, #2
1b0d0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1b0d4     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1b0d8     09 13 02 FB | 	rdlong	arg01, arg01
1b0dc     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1b0e0     09 25 02 F6 | 	mov	local04, arg01
1b0e4     97 06 48 FB | 	callpa	#(@LR__2296-@LR__2295)>>2,fcache_load_ptr_
1b0e8                 | LR__2295
1b0e8     12 FB C9 FA | 	rdbyte	result1, local04 wz
1b0ec     01 24 06 51 |  if_ne	add	local04, #1
1b0f0     F4 FF 9F 5D |  if_ne	jmp	#LR__2295
1b0f4                 | LR__2296
1b0f4     09 25 82 F1 | 	sub	local04, arg01
1b0f8     12 29 02 F6 | 	mov	local06, local04
1b0fc     14 13 02 F6 | 	mov	arg01, local06
1b100     0F 13 02 F1 | 	add	arg01, local01
1b104     09 FB C1 FA | 	rdbyte	result1, arg01
1b108     2F FA 0D F2 | 	cmp	result1, #47 wz
1b10c     14 2B 02 56 |  if_ne	mov	local07, local06
1b110     0F 2B 02 51 |  if_ne	add	local07, local01
1b114     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
1b118     30 00 90 5D |  if_ne	jmp	#LR__2297
1b11c     13 17 02 F6 | 	mov	arg03, local05
1b120     02 16 66 F0 | 	shl	arg03, #2
1b124     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1b128     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
1b12c     0B 15 02 FB | 	rdlong	arg02, arg03
1b130     0F 13 02 F6 | 	mov	arg01, local01
1b134     14 17 02 F6 | 	mov	arg03, local06
1b138     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1b13c     58 4D B0 FD | 	call	#__system__strncmp
1b140     00 FA 0D F2 | 	cmp	result1, #0 wz
1b144     13 23 02 A6 |  if_e	mov	local03, local05
1b148     08 00 90 AD |  if_e	jmp	#LR__2299
1b14c                 | LR__2297
1b14c                 | LR__2298
1b14c     01 26 06 F1 | 	add	local05, #1
1b150     48 FF 9F FD | 	jmp	#LR__2294
1b154                 | LR__2299
1b154     FF FF 7F FF 
1b158     FF 23 0E F2 | 	cmp	local03, ##-1 wz
1b15c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
1b160     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
1b164     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
1b168     01 FA 65 A6 |  if_e	neg	result1, #1
1b16c     78 01 90 AD |  if_e	jmp	#LR__2305
1b170     11 27 02 F6 | 	mov	local05, local03
1b174     13 2B 02 F6 | 	mov	local07, local05
1b178     02 2A 66 F0 | 	shl	local07, #2
1b17c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1b180     F3 2A 02 F1 | 	add	local07, ptr___system__dat__
1b184     15 29 0A FB | 	rdlong	local06, local07 wz
1b188     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1b18c     58 00 90 AD |  if_e	jmp	#LR__2300
1b190     4C 28 06 F1 | 	add	local06, #76
1b194     14 2B 0A FB | 	rdlong	local07, local06 wz
1b198     4C 28 86 F1 | 	sub	local06, #76
1b19c     48 00 90 AD |  if_e	jmp	#LR__2300
1b1a0     4C 28 06 F1 | 	add	local06, #76
1b1a4     14 2B 02 FB | 	rdlong	local07, local06
1b1a8     15 23 02 F6 | 	mov	local03, local07
1b1ac     13 2A 46 F7 | 	zerox	local07, #19
1b1b0     14 22 46 F0 | 	shr	local03, #20
1b1b4     02 22 66 F0 | 	shl	local03, #2
1b1b8     ED 22 02 F1 | 	add	local03, __methods__
1b1bc     11 23 02 FB | 	rdlong	local03, local03
1b1c0     13 29 02 F6 | 	mov	local06, local05
1b1c4     02 28 66 F0 | 	shl	local06, #2
1b1c8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1b1cc     F3 28 02 F1 | 	add	local06, ptr___system__dat__
1b1d0     14 13 02 FB | 	rdlong	arg01, local06
1b1d4     F2 28 02 F6 | 	mov	local06, objptr
1b1d8     15 E5 01 F6 | 	mov	objptr, local07
1b1dc     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1b1e0     2D 22 62 FD | 	call	local03
1b1e4     14 E5 01 F6 | 	mov	objptr, local06
1b1e8                 | LR__2300
1b1e8     13 2D 02 F6 | 	mov	local08, local05
1b1ec     02 2C 66 F0 | 	shl	local08, #2
1b1f0     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1b1f4     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
1b1f8     16 21 62 FC | 	wrlong	local02, local08
1b1fc     00 20 0E F2 | 	cmp	local02, #0 wz
1b200     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1b204     18 00 90 5D |  if_ne	jmp	#LR__2301
1b208     02 26 66 F0 | 	shl	local05, #2
1b20c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1b210     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1b214     13 01 68 FC | 	wrlong	#0, local05
1b218     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1b21c     C4 00 90 FD | 	jmp	#LR__2304
1b220                 | LR__2301
1b220     13 2F 02 F6 | 	mov	local09, local05
1b224     04 2E 66 F0 | 	shl	local09, #4
1b228     24 E6 05 F1 | 	add	ptr___system__dat__, #36
1b22c     F3 2E 02 F1 | 	add	local09, ptr___system__dat__
1b230     17 13 02 F6 | 	mov	arg01, local09
1b234     0F 15 02 F6 | 	mov	arg02, local01
1b238     10 16 06 F6 | 	mov	arg03, #16
1b23c     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
1b240     A8 4B B0 FD | 	call	#__system__strncpy
1b244     48 20 06 F1 | 	add	local02, #72
1b248     10 2D 0A FB | 	rdlong	local08, local02 wz
1b24c     48 20 86 F1 | 	sub	local02, #72
1b250     7C 00 90 AD |  if_e	jmp	#LR__2303
1b254     48 20 06 F1 | 	add	local02, #72
1b258     10 2D 02 FB | 	rdlong	local08, local02
1b25c     16 31 02 F6 | 	mov	local10, local08
1b260     13 2C 46 F7 | 	zerox	local08, #19
1b264     14 30 46 F0 | 	shr	local10, #20
1b268     02 30 66 F0 | 	shl	local10, #2
1b26c     ED 30 02 F1 | 	add	local10, __methods__
1b270     18 31 02 FB | 	rdlong	local10, local10
1b274     17 13 02 F6 | 	mov	arg01, local09
1b278     F2 32 02 F6 | 	mov	local11, objptr
1b27c     16 E5 01 F6 | 	mov	objptr, local08
1b280     2D 30 62 FD | 	call	local10
1b284     19 E5 01 F6 | 	mov	objptr, local11
1b288     FD 12 0A F6 | 	mov	arg01, result1 wz
1b28c     40 00 90 AD |  if_e	jmp	#LR__2302
1b290     13 2D 02 F6 | 	mov	local08, local05
1b294     02 2C 66 F0 | 	shl	local08, #2
1b298     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1b29c     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
1b2a0     16 01 68 FC | 	wrlong	#0, local08
1b2a4     02 26 66 F0 | 	shl	local05, #2
1b2a8     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1b2ac     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1b2b0     13 01 68 FC | 	wrlong	#0, local05
1b2b4     09 13 6A F6 | 	neg	arg01, arg01 wz
1b2b8     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
1b2bc     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1b2c0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1b2c4     01 FA 65 56 |  if_ne	neg	result1, #1
1b2c8     00 FA 05 A6 |  if_e	mov	result1, #0
1b2cc     18 00 90 FD | 	jmp	#LR__2305
1b2d0                 | LR__2302
1b2d0                 | LR__2303
1b2d0     02 26 66 F0 | 	shl	local05, #2
1b2d4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1b2d8     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1b2dc     13 2F 62 FC | 	wrlong	local09, local05
1b2e0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1b2e4                 | LR__2304
1b2e4     00 FA 05 F6 | 	mov	result1, #0
1b2e8                 | LR__2305
1b2e8     A7 F0 03 F6 | 	mov	ptra, fp
1b2ec     B2 00 A0 FD | 	call	#popregs_
1b2f0                 | __system___mount_ret
1b2f0     2D 00 64 FD | 	ret
1b2f4                 | 
1b2f4                 | __system___chdir
1b2f4     00 4A 05 F6 | 	mov	COUNT_, #0
1b2f8     A8 00 A0 FD | 	call	#pushregs_
1b2fc     40 F0 07 F1 | 	add	ptra, #64
1b300     04 4E 05 F1 | 	add	fp, #4
1b304     A7 12 62 FC | 	wrlong	arg01, fp
1b308     04 4E 05 F1 | 	add	fp, #4
1b30c     A7 14 02 F6 | 	mov	arg02, fp
1b310     08 4E 85 F1 | 	sub	fp, #8
1b314     B4 47 B0 FD | 	call	#__system__stat
1b318     3C 4E 05 F1 | 	add	fp, #60
1b31c     A7 FA 61 FC | 	wrlong	result1, fp
1b320     3C 4E 85 F1 | 	sub	fp, #60
1b324     00 FA 0D F2 | 	cmp	result1, #0 wz
1b328     3C 4E 05 51 |  if_ne	add	fp, #60
1b32c     A7 FA 01 5B |  if_ne	rdlong	result1, fp
1b330     3C 4E 85 51 |  if_ne	sub	fp, #60
1b334     BC 00 90 5D |  if_ne	jmp	#LR__2312
1b338     10 4E 05 F1 | 	add	fp, #16
1b33c     A7 12 02 FB | 	rdlong	arg01, fp
1b340     10 4E 85 F1 | 	sub	fp, #16
1b344     78 00 00 FF 
1b348     00 12 06 F5 | 	and	arg01, ##61440
1b34c     08 00 00 FF 
1b350     00 12 0E F2 | 	cmp	arg01, ##4096 wz
1b354     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
1b358     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
1b35c     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
1b360     01 FA 65 56 |  if_ne	neg	result1, #1
1b364     8C 00 90 5D |  if_ne	jmp	#LR__2312
1b368     04 4E 05 F1 | 	add	fp, #4
1b36c     A7 16 02 FB | 	rdlong	arg03, fp
1b370     04 4E 85 F1 | 	sub	fp, #4
1b374     0B 17 C2 FA | 	rdbyte	arg03, arg03
1b378     2F 16 0E F2 | 	cmp	arg03, #47 wz
1b37c     24 00 90 5D |  if_ne	jmp	#LR__2310
1b380     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1b384     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1b388     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1b38c     04 4E 05 F1 | 	add	fp, #4
1b390     A7 14 02 FB | 	rdlong	arg02, fp
1b394     04 4E 85 F1 | 	sub	fp, #4
1b398     00 17 06 F6 | 	mov	arg03, #256
1b39c     4C 4A B0 FD | 	call	#__system__strncpy
1b3a0     4C 00 90 FD | 	jmp	#LR__2311
1b3a4                 | LR__2310
1b3a4     84 E7 05 F1 | 	add	ptr___system__dat__, #388
1b3a8     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1b3ac     38 4E 05 F1 | 	add	fp, #56
1b3b0     A7 12 62 FC | 	wrlong	arg01, fp
1b3b4     38 4E 85 F1 | 	sub	fp, #56
1b3b8     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
1b3bc     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
1b3c0     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1b3c4     00 17 06 F6 | 	mov	arg03, #256
1b3c8     20 4A B0 FD | 	call	#__system__strncpy
1b3cc     38 4E 05 F1 | 	add	fp, #56
1b3d0     A7 12 02 FB | 	rdlong	arg01, fp
1b3d4     34 4E 85 F1 | 	sub	fp, #52
1b3d8     A7 14 02 FB | 	rdlong	arg02, fp
1b3dc     04 4E 85 F1 | 	sub	fp, #4
1b3e0     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1b3e4     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
1b3e8     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1b3ec     10 00 B0 FD | 	call	#__system____getvfsforfile
1b3f0                 | LR__2311
1b3f0     00 FA 05 F6 | 	mov	result1, #0
1b3f4                 | LR__2312
1b3f4     A7 F0 03 F6 | 	mov	ptra, fp
1b3f8     B2 00 A0 FD | 	call	#popregs_
1b3fc                 | __system___chdir_ret
1b3fc     2D 00 64 FD | 	ret
1b400                 | 
1b400                 | __system____getvfsforfile
1b400     0E 4A 05 F6 | 	mov	COUNT_, #14
1b404     A8 00 A0 FD | 	call	#pushregs_
1b408     09 1F 02 F6 | 	mov	local01, arg01
1b40c     0A 21 02 F6 | 	mov	local02, arg02
1b410     0B 23 02 F6 | 	mov	local03, arg03
1b414     97 10 48 FB | 	callpa	#(@LR__2321-@LR__2320)>>2,fcache_load_ptr_
1b418                 | LR__2320
1b418     10 FB C1 FA | 	rdbyte	result1, local02
1b41c     2F FA 0D F2 | 	cmp	result1, #47 wz
1b420     01 20 06 A1 |  if_e	add	local02, #1
1b424     10 25 C2 AA |  if_e	rdbyte	local04, local02
1b428     01 20 86 A1 |  if_e	sub	local02, #1
1b42c     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
1b430     01 20 06 A1 |  if_e	add	local02, #1
1b434     E0 FF 9F AD |  if_e	jmp	#LR__2320
1b438                 | LR__2321
1b438     10 25 C2 FA | 	rdbyte	local04, local02
1b43c     2F 24 0E F2 | 	cmp	local04, #47 wz
1b440     14 00 90 5D |  if_ne	jmp	#LR__2322
1b444     0F 13 02 F6 | 	mov	arg01, local01
1b448     10 15 02 F6 | 	mov	arg02, local02
1b44c     00 17 06 F6 | 	mov	arg03, #256
1b450     98 49 B0 FD | 	call	#__system__strncpy
1b454     7C 00 90 FD | 	jmp	#LR__2324
1b458                 | LR__2322
1b458     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1b45c     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
1b460     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1b464     0F 13 02 F6 | 	mov	arg01, local01
1b468     00 17 06 F6 | 	mov	arg03, #256
1b46c     7C 49 B0 FD | 	call	#__system__strncpy
1b470     10 25 CA FA | 	rdbyte	local04, local02 wz
1b474     5C 00 90 AD |  if_e	jmp	#LR__2323
1b478     10 25 C2 FA | 	rdbyte	local04, local02
1b47c     2E 24 0E F2 | 	cmp	local04, #46 wz
1b480     01 20 06 A1 |  if_e	add	local02, #1
1b484     10 27 C2 AA |  if_e	rdbyte	local05, local02
1b488     01 20 86 A1 |  if_e	sub	local02, #1
1b48c     13 29 02 A6 |  if_e	mov	local06, local05
1b490     07 28 4E A7 |  if_e	zerox	local06, #7 wz
1b494     3C 00 90 AD |  if_e	jmp	#LR__2323
1b498     0F 27 C2 FA | 	rdbyte	local05, local01
1b49c     2F 26 0E F2 | 	cmp	local05, #47 wz
1b4a0     01 1E 06 A1 |  if_e	add	local01, #1
1b4a4     0F 25 C2 AA |  if_e	rdbyte	local04, local01
1b4a8     01 1E 86 A1 |  if_e	sub	local01, #1
1b4ac     00 24 4E A2 |  if_e	cmps	local04, #0 wz
1b4b0     50 01 00 5F 
1b4b4     A8 15 06 56 |  if_ne	mov	arg02, ##@LR__4370
1b4b8     0F 13 02 56 |  if_ne	mov	arg01, local01
1b4bc     00 17 06 56 |  if_ne	mov	arg03, #256
1b4c0     74 49 B0 5D |  if_ne	call	#__system__strncat
1b4c4     0F 13 02 F6 | 	mov	arg01, local01
1b4c8     10 15 02 F6 | 	mov	arg02, local02
1b4cc     00 17 06 F6 | 	mov	arg03, #256
1b4d0     64 49 B0 FD | 	call	#__system__strncat
1b4d4                 | LR__2323
1b4d4                 | LR__2324
1b4d4     0F 13 02 F6 | 	mov	arg01, local01
1b4d8     1C 4B B0 FD | 	call	#__system___normalizeName
1b4dc     0F 25 CA FA | 	rdbyte	local04, local01 wz
1b4e0     1C 00 90 AD |  if_e	jmp	#LR__2325
1b4e4     0F 25 C2 FA | 	rdbyte	local04, local01
1b4e8     2F 24 0E F2 | 	cmp	local04, #47 wz
1b4ec     01 1E 06 A1 |  if_e	add	local01, #1
1b4f0     0F 29 C2 AA |  if_e	rdbyte	local06, local01
1b4f4     01 1E 86 A1 |  if_e	sub	local01, #1
1b4f8     00 28 4E A2 |  if_e	cmps	local06, #0 wz
1b4fc     18 00 90 5D |  if_ne	jmp	#LR__2326
1b500                 | LR__2325
1b500     01 00 00 FF 
1b504     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
1b508     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
1b50c     01 00 00 FF 
1b510     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
1b514     EC 01 90 FD | 	jmp	#LR__2340
1b518                 | LR__2326
1b518     00 2A 06 F6 | 	mov	local07, #0
1b51c                 | LR__2327
1b51c     04 2A 56 F2 | 	cmps	local07, #4 wc
1b520     CC 01 90 3D |  if_ae	jmp	#LR__2339
1b524     15 29 02 F6 | 	mov	local06, local07
1b528     02 28 66 F0 | 	shl	local06, #2
1b52c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1b530     F3 28 02 F1 | 	add	local06, ptr___system__dat__
1b534     14 29 0A FB | 	rdlong	local06, local06 wz
1b538     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1b53c     A8 01 90 AD |  if_e	jmp	#LR__2338
1b540     15 25 02 F6 | 	mov	local04, local07
1b544     02 24 66 F0 | 	shl	local04, #2
1b548     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1b54c     F3 24 02 F1 | 	add	local04, ptr___system__dat__
1b550     12 13 02 FB | 	rdlong	arg01, local04
1b554     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1b558     09 2D 02 F6 | 	mov	local08, arg01
1b55c     97 06 48 FB | 	callpa	#(@LR__2329-@LR__2328)>>2,fcache_load_ptr_
1b560                 | LR__2328
1b560     16 FB C9 FA | 	rdbyte	result1, local08 wz
1b564     01 2C 06 51 |  if_ne	add	local08, #1
1b568     F4 FF 9F 5D |  if_ne	jmp	#LR__2328
1b56c                 | LR__2329
1b56c     09 2D 82 F1 | 	sub	local08, arg01
1b570     16 2F 02 F6 | 	mov	local09, local08
1b574     17 25 02 F6 | 	mov	local04, local09
1b578     0F 25 02 F1 | 	add	local04, local01
1b57c     12 29 C2 FA | 	rdbyte	local06, local04
1b580     2F 28 0E F2 | 	cmp	local06, #47 wz
1b584     17 31 02 56 |  if_ne	mov	local10, local09
1b588     0F 31 02 51 |  if_ne	add	local10, local01
1b58c     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
1b590     54 01 90 5D |  if_ne	jmp	#LR__2337
1b594     15 17 02 F6 | 	mov	arg03, local07
1b598     02 16 66 F0 | 	shl	arg03, #2
1b59c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1b5a0     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
1b5a4     0B 15 02 FB | 	rdlong	arg02, arg03
1b5a8     17 17 02 F6 | 	mov	arg03, local09
1b5ac     0F 13 02 F6 | 	mov	arg01, local01
1b5b0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1b5b4     E0 48 B0 FD | 	call	#__system__strncmp
1b5b8     00 FA 4D F2 | 	cmps	result1, #0 wz
1b5bc     28 01 90 5D |  if_ne	jmp	#LR__2337
1b5c0     15 33 02 F6 | 	mov	local11, local07
1b5c4     02 32 66 F0 | 	shl	local11, #2
1b5c8     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1b5cc     F3 32 02 F1 | 	add	local11, ptr___system__dat__
1b5d0     19 35 02 FB | 	rdlong	local12, local11
1b5d4     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1b5d8     97 22 48 FB | 	callpa	#(@LR__2331-@LR__2330)>>2,fcache_load_ptr_
1b5dc                 | LR__2330
1b5dc     17 29 02 F6 | 	mov	local06, local09
1b5e0     01 28 06 F1 | 	add	local06, #1
1b5e4     0F 29 02 F1 | 	add	local06, local01
1b5e8     14 33 C2 FA | 	rdbyte	local11, local06
1b5ec     2E 32 0E F2 | 	cmp	local11, #46 wz
1b5f0     2C 00 90 5D |  if_ne	jmp	#LR__2332
1b5f4     17 33 02 F6 | 	mov	local11, local09
1b5f8     02 32 06 F1 | 	add	local11, #2
1b5fc     0F 33 02 F1 | 	add	local11, local01
1b600     19 31 C2 FA | 	rdbyte	local10, local11
1b604     2F 30 0E F2 | 	cmp	local10, #47 wz
1b608     17 37 02 56 |  if_ne	mov	local13, local09
1b60c     02 36 06 51 |  if_ne	add	local13, #2
1b610     0F 37 02 51 |  if_ne	add	local13, local01
1b614     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
1b618     01 2E 06 A1 |  if_e	add	local09, #1
1b61c     BC FF 9F AD |  if_e	jmp	#LR__2330
1b620                 | LR__2331
1b620                 | LR__2332
1b620     00 22 0E F2 | 	cmp	local03, #0 wz
1b624     11 13 02 56 |  if_ne	mov	arg01, local03
1b628     0F 15 02 56 |  if_ne	mov	arg02, local01
1b62c     00 17 06 56 |  if_ne	mov	arg03, #256
1b630     B8 47 B0 5D |  if_ne	call	#__system__strncpy
1b634     0F 15 02 F6 | 	mov	arg02, local01
1b638     17 15 02 F1 | 	add	arg02, local09
1b63c     01 14 06 F1 | 	add	arg02, #1
1b640     0F 13 02 F6 | 	mov	arg01, local01
1b644     D4 F5 BF FD | 	call	#__system____builtin_strcpy
1b648     0F 13 02 F6 | 	mov	arg01, local01
1b64c     09 2D 02 F6 | 	mov	local08, arg01
1b650     97 06 48 FB | 	callpa	#(@LR__2334-@LR__2333)>>2,fcache_load_ptr_
1b654                 | LR__2333
1b654     16 FB C9 FA | 	rdbyte	result1, local08 wz
1b658     01 2C 06 51 |  if_ne	add	local08, #1
1b65c     F4 FF 9F 5D |  if_ne	jmp	#LR__2333
1b660                 | LR__2334
1b660     09 2D 82 F1 | 	sub	local08, arg01
1b664     16 2F 02 F6 | 	mov	local09, local08
1b668                 | LR__2335
1b668     01 2E 56 F2 | 	cmps	local09, #1 wc
1b66c     70 00 90 CD |  if_b	jmp	#LR__2336
1b670     17 25 02 F6 | 	mov	local04, local09
1b674     0F 25 02 F1 | 	add	local04, local01
1b678     12 33 C2 FA | 	rdbyte	local11, local04
1b67c     2F 32 0E F2 | 	cmp	local11, #47 wz
1b680     17 33 02 A6 |  if_e	mov	local11, local09
1b684     0F 33 02 A1 |  if_e	add	local11, local01
1b688     19 01 48 AC |  if_e	wrbyte	#0, local11
1b68c     01 2E 86 A1 |  if_e	sub	local09, #1
1b690     D4 FF 9F AD |  if_e	jmp	#LR__2335
1b694     17 25 02 F6 | 	mov	local04, local09
1b698     0F 25 02 F1 | 	add	local04, local01
1b69c     12 33 C2 FA | 	rdbyte	local11, local04
1b6a0     2E 32 0E F2 | 	cmp	local11, #46 wz
1b6a4     38 00 90 5D |  if_ne	jmp	#LR__2336
1b6a8     02 2E 56 F2 | 	cmps	local09, #2 wc
1b6ac     30 00 90 CD |  if_b	jmp	#LR__2336
1b6b0     17 39 02 F6 | 	mov	local14, local09
1b6b4     01 38 86 F1 | 	sub	local14, #1
1b6b8     0F 39 02 F1 | 	add	local14, local01
1b6bc     1C 27 C2 FA | 	rdbyte	local05, local14
1b6c0     2F 26 0E F2 | 	cmp	local05, #47 wz
1b6c4     18 00 90 5D |  if_ne	jmp	#LR__2336
1b6c8     17 25 02 F6 | 	mov	local04, local09
1b6cc     01 24 86 F1 | 	sub	local04, #1
1b6d0     0F 25 02 F1 | 	add	local04, local01
1b6d4     12 01 48 FC | 	wrbyte	#0, local04
1b6d8     02 2E 86 F1 | 	sub	local09, #2
1b6dc     88 FF 9F FD | 	jmp	#LR__2335
1b6e0                 | LR__2336
1b6e0     1A FB 01 F6 | 	mov	result1, local12
1b6e4     1C 00 90 FD | 	jmp	#LR__2340
1b6e8                 | LR__2337
1b6e8                 | LR__2338
1b6e8     01 2A 06 F1 | 	add	local07, #1
1b6ec     2C FE 9F FD | 	jmp	#LR__2327
1b6f0                 | LR__2339
1b6f0     03 00 00 FF 
1b6f4     38 E7 05 F1 | 	add	ptr___system__dat__, ##1848
1b6f8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1b6fc     03 00 00 FF 
1b700     38 E7 85 F1 | 	sub	ptr___system__dat__, ##1848
1b704                 | LR__2340
1b704     A7 F0 03 F6 | 	mov	ptra, fp
1b708     B2 00 A0 FD | 	call	#popregs_
1b70c                 | __system____getvfsforfile_ret
1b70c     2D 00 64 FD | 	ret
1b710                 | 
1b710                 | __system___basic_open
1b710     05 4A 05 F6 | 	mov	COUNT_, #5
1b714     A8 00 A0 FD | 	call	#pushregs_
1b718     0A 1F 02 F6 | 	mov	local01, arg02
1b71c     0B 21 02 F6 | 	mov	local02, arg03
1b720     0C 23 02 F6 | 	mov	local03, arg04
1b724     00 24 06 F6 | 	mov	local04, #0
1b728     98 46 B0 FD | 	call	#__system____getftab
1b72c     FD 26 0A F6 | 	mov	local05, result1 wz
1b730     18 00 90 5D |  if_ne	jmp	#LR__2350
1b734     EE 12 02 F6 | 	mov	arg01, abortchain
1b738     0C 14 06 F6 | 	mov	arg02, #12
1b73c     01 16 06 F6 | 	mov	arg03, #1
1b740     DA 00 A0 FD | 	call	#__longjmp
1b744     01 FA 65 F6 | 	neg	result1, #1
1b748     14 01 90 FD | 	jmp	#LR__2359
1b74c                 | LR__2350
1b74c     08 26 06 F1 | 	add	local05, #8
1b750     13 FB 09 FB | 	rdlong	result1, local05 wz
1b754     08 26 86 F1 | 	sub	local05, #8
1b758     13 13 02 56 |  if_ne	mov	arg01, local05
1b75c     F4 3D B0 5D |  if_ne	call	#__system___closeraw
1b760     00 1E 0E F2 | 	cmp	local01, #0 wz
1b764     00 20 0E A2 |  if_e	cmp	local02, #0 wz
1b768     00 22 0E A2 |  if_e	cmp	local03, #0 wz
1b76c     3C 00 90 AD |  if_e	jmp	#LR__2352
1b770     0C 12 06 F6 | 	mov	arg01, #12
1b774     E0 32 B0 FD | 	call	#__system___gc_alloc_managed
1b778     FD 24 0A F6 | 	mov	local04, result1 wz
1b77c     18 00 90 5D |  if_ne	jmp	#LR__2351
1b780     EE 12 02 F6 | 	mov	arg01, abortchain
1b784     07 14 06 F6 | 	mov	arg02, #7
1b788     01 16 06 F6 | 	mov	arg03, #1
1b78c     DA 00 A0 FD | 	call	#__longjmp
1b790     01 FA 65 F6 | 	neg	result1, #1
1b794     C8 00 90 FD | 	jmp	#LR__2359
1b798                 | LR__2351
1b798     12 01 68 FC | 	wrlong	#0, local04
1b79c     04 24 06 F1 | 	add	local04, #4
1b7a0     12 01 68 FC | 	wrlong	#0, local04
1b7a4     04 24 86 F1 | 	sub	local04, #4
1b7a8     13 25 62 FC | 	wrlong	local04, local05
1b7ac                 | LR__2352
1b7ac     00 1E 0E F2 | 	cmp	local01, #0 wz
1b7b0     20 00 90 AD |  if_e	jmp	#LR__2353
1b7b4     12 1F 62 FC | 	wrlong	local01, local04
1b7b8     12 FB 01 F6 | 	mov	result1, local04
1b7bc     00 60 03 FF 
1b7c0     00 FA 45 F5 | 	or	result1, ##113246208
1b7c4     1C 26 06 F1 | 	add	local05, #28
1b7c8     13 FB 61 FC | 	wrlong	result1, local05
1b7cc     1C 26 86 F1 | 	sub	local05, #28
1b7d0     0C 00 90 FD | 	jmp	#LR__2354
1b7d4                 | LR__2353
1b7d4     1C 26 06 F1 | 	add	local05, #28
1b7d8     13 01 68 FC | 	wrlong	#0, local05
1b7dc     1C 26 86 F1 | 	sub	local05, #28
1b7e0                 | LR__2354
1b7e0     00 20 0E F2 | 	cmp	local02, #0 wz
1b7e4     28 00 90 AD |  if_e	jmp	#LR__2355
1b7e8     04 24 06 F1 | 	add	local04, #4
1b7ec     12 21 62 FC | 	wrlong	local02, local04
1b7f0     04 24 86 F1 | 	sub	local04, #4
1b7f4     12 FB 01 F6 | 	mov	result1, local04
1b7f8     00 68 03 FF 
1b7fc     00 FA 45 F5 | 	or	result1, ##114294784
1b800     20 26 06 F1 | 	add	local05, #32
1b804     13 FB 61 FC | 	wrlong	result1, local05
1b808     20 26 86 F1 | 	sub	local05, #32
1b80c     0C 00 90 FD | 	jmp	#LR__2356
1b810                 | LR__2355
1b810     20 26 06 F1 | 	add	local05, #32
1b814     13 01 68 FC | 	wrlong	#0, local05
1b818     20 26 86 F1 | 	sub	local05, #32
1b81c                 | LR__2356
1b81c     00 22 0E F2 | 	cmp	local03, #0 wz
1b820     24 00 90 AD |  if_e	jmp	#LR__2357
1b824     08 24 06 F1 | 	add	local04, #8
1b828     12 23 62 FC | 	wrlong	local03, local04
1b82c     08 24 86 F1 | 	sub	local04, #8
1b830     00 70 03 FF 
1b834     00 24 46 F5 | 	or	local04, ##115343360
1b838     24 26 06 F1 | 	add	local05, #36
1b83c     13 25 62 FC | 	wrlong	local04, local05
1b840     24 26 86 F1 | 	sub	local05, #36
1b844     0C 00 90 FD | 	jmp	#LR__2358
1b848                 | LR__2357
1b848     24 26 06 F1 | 	add	local05, #36
1b84c     13 01 68 FC | 	wrlong	#0, local05
1b850     24 26 86 F1 | 	sub	local05, #36
1b854                 | LR__2358
1b854     08 26 06 F1 | 	add	local05, #8
1b858     13 0F 68 FC | 	wrlong	#7, local05
1b85c     00 FA 05 F6 | 	mov	result1, #0
1b860                 | LR__2359
1b860     A7 F0 03 F6 | 	mov	ptra, fp
1b864     B2 00 A0 FD | 	call	#popregs_
1b868                 | __system___basic_open_ret
1b868     2D 00 64 FD | 	ret
1b86c                 | 
1b86c                 | __system___basic_open_string
1b86c     04 4A 05 F6 | 	mov	COUNT_, #4
1b870     A8 00 A0 FD | 	call	#pushregs_
1b874     0A 1F 02 F6 | 	mov	local01, arg02
1b878     0B 21 02 F6 | 	mov	local02, arg03
1b87c     44 45 B0 FD | 	call	#__system____getftab
1b880     FD 22 0A F6 | 	mov	local03, result1 wz
1b884     18 00 90 5D |  if_ne	jmp	#LR__2360
1b888     EE 12 02 F6 | 	mov	arg01, abortchain
1b88c     0C 14 06 F6 | 	mov	arg02, #12
1b890     01 16 06 F6 | 	mov	arg03, #1
1b894     DA 00 A0 FD | 	call	#__longjmp
1b898     01 FA 65 F6 | 	neg	result1, #1
1b89c     58 00 90 FD | 	jmp	#LR__2362
1b8a0                 | LR__2360
1b8a0     08 22 06 F1 | 	add	local03, #8
1b8a4     11 19 0A FB | 	rdlong	arg04, local03 wz
1b8a8     08 22 86 F1 | 	sub	local03, #8
1b8ac     11 13 02 56 |  if_ne	mov	arg01, local03
1b8b0     A0 3C B0 5D |  if_ne	call	#__system___closeraw
1b8b4     0F 15 02 F6 | 	mov	arg02, local01
1b8b8     10 17 02 F6 | 	mov	arg03, local02
1b8bc     11 13 02 F6 | 	mov	arg01, local03
1b8c0     B6 19 06 F6 | 	mov	arg04, #438
1b8c4     8C 39 B0 FD | 	call	#__system___openraw
1b8c8     FD 24 02 F6 | 	mov	local04, result1
1b8cc     00 24 56 F2 | 	cmps	local04, #0 wc
1b8d0     20 00 90 3D |  if_ae	jmp	#LR__2361
1b8d4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1b8d8     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
1b8dc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1b8e0     EE 12 02 F6 | 	mov	arg01, abortchain
1b8e4     01 16 06 F6 | 	mov	arg03, #1
1b8e8     DA 00 A0 FD | 	call	#__longjmp
1b8ec     01 FA 65 F6 | 	neg	result1, #1
1b8f0     04 00 90 FD | 	jmp	#LR__2362
1b8f4                 | LR__2361
1b8f4     12 FB 01 F6 | 	mov	result1, local04
1b8f8                 | LR__2362
1b8f8     A7 F0 03 F6 | 	mov	ptra, fp
1b8fc     B2 00 A0 FD | 	call	#popregs_
1b900                 | __system___basic_open_string_ret
1b900     2D 00 64 FD | 	ret
1b904                 | 
1b904                 | __system___basic_print_nl
1b904     0A 14 06 F6 | 	mov	arg02, #10
1b908     00 16 06 F6 | 	mov	arg03, #0
1b90c     08 00 B0 FD | 	call	#__system___basic_print_char
1b910     01 FA 05 F6 | 	mov	result1, #1
1b914                 | __system___basic_print_nl_ret
1b914     2D 00 64 FD | 	ret
1b918                 | 
1b918                 | __system___basic_print_char
1b918     03 4A 05 F6 | 	mov	COUNT_, #3
1b91c     A8 00 A0 FD | 	call	#pushregs_
1b920     0A 1F 02 F6 | 	mov	local01, arg02
1b924     F0 4B B0 FD | 	call	#__system___gettxfunc
1b928     FD 20 0A F6 | 	mov	local02, result1 wz
1b92c     00 FA 05 A6 |  if_e	mov	result1, #0
1b930     30 00 90 AD |  if_e	jmp	#LR__2370
1b934     10 23 02 F6 | 	mov	local03, local02
1b938     13 20 46 F7 | 	zerox	local02, #19
1b93c     14 22 46 F0 | 	shr	local03, #20
1b940     02 22 66 F0 | 	shl	local03, #2
1b944     ED 22 02 F1 | 	add	local03, __methods__
1b948     11 23 02 FB | 	rdlong	local03, local03
1b94c     0F 13 02 F6 | 	mov	arg01, local01
1b950     F2 1E 02 F6 | 	mov	local01, objptr
1b954     10 E5 01 F6 | 	mov	objptr, local02
1b958     2D 22 62 FD | 	call	local03
1b95c     0F E5 01 F6 | 	mov	objptr, local01
1b960     01 FA 05 F6 | 	mov	result1, #1
1b964                 | LR__2370
1b964     A7 F0 03 F6 | 	mov	ptra, fp
1b968     B2 00 A0 FD | 	call	#popregs_
1b96c                 | __system___basic_print_char_ret
1b96c     2D 00 64 FD | 	ret
1b970                 | 
1b970                 | __system___basic_print_string
1b970     03 4A 05 F6 | 	mov	COUNT_, #3
1b974     A8 00 A0 FD | 	call	#pushregs_
1b978     0A 1F 02 F6 | 	mov	local01, arg02
1b97c     0B 21 02 F6 | 	mov	local02, arg03
1b980     94 4B B0 FD | 	call	#__system___gettxfunc
1b984     FD 22 0A F6 | 	mov	local03, result1 wz
1b988     00 FA 05 A6 |  if_e	mov	result1, #0
1b98c     18 00 90 AD |  if_e	jmp	#LR__2380
1b990     00 1E 0E F2 | 	cmp	local01, #0 wz
1b994     00 FA 05 A6 |  if_e	mov	result1, #0
1b998     11 13 02 56 |  if_ne	mov	arg01, local03
1b99c     10 15 02 56 |  if_ne	mov	arg02, local02
1b9a0     0F 17 02 56 |  if_ne	mov	arg03, local01
1b9a4     C0 01 B0 5D |  if_ne	call	#__system___fmtstr
1b9a8                 | LR__2380
1b9a8     A7 F0 03 F6 | 	mov	ptra, fp
1b9ac     B2 00 A0 FD | 	call	#popregs_
1b9b0                 | __system___basic_print_string_ret
1b9b0     2D 00 64 FD | 	ret
1b9b4                 | 
1b9b4                 | __system___basic_print_integer
1b9b4     04 4A 05 F6 | 	mov	COUNT_, #4
1b9b8     A8 00 A0 FD | 	call	#pushregs_
1b9bc     0A 1F 02 F6 | 	mov	local01, arg02
1b9c0     0B 21 02 F6 | 	mov	local02, arg03
1b9c4     0C 23 02 F6 | 	mov	local03, arg04
1b9c8     4C 4B B0 FD | 	call	#__system___gettxfunc
1b9cc     FD 24 0A F6 | 	mov	local04, result1 wz
1b9d0     00 FA 05 A6 |  if_e	mov	result1, #0
1b9d4     12 13 02 56 |  if_ne	mov	arg01, local04
1b9d8     10 15 02 56 |  if_ne	mov	arg02, local02
1b9dc     0F 17 02 56 |  if_ne	mov	arg03, local01
1b9e0     11 19 02 56 |  if_ne	mov	arg04, local03
1b9e4     6C 02 B0 5D |  if_ne	call	#__system___fmtnum
1b9e8     A7 F0 03 F6 | 	mov	ptra, fp
1b9ec     B2 00 A0 FD | 	call	#popregs_
1b9f0                 | __system___basic_print_integer_ret
1b9f0     2D 00 64 FD | 	ret
1b9f4                 | 
1b9f4                 | __system___basic_print_unsigned
1b9f4     03 4A 05 F6 | 	mov	COUNT_, #3
1b9f8     A8 00 A0 FD | 	call	#pushregs_
1b9fc     0A 1F 02 F6 | 	mov	local01, arg02
1ba00     0B 21 02 F6 | 	mov	local02, arg03
1ba04     0C 23 02 F6 | 	mov	local03, arg04
1ba08     0C 4B B0 FD | 	call	#__system___gettxfunc
1ba0c     FD 12 0A F6 | 	mov	arg01, result1 wz
1ba10     00 FA 05 A6 |  if_e	mov	result1, #0
1ba14     3A 20 26 54 |  if_ne	bith	local02, #58
1ba18     10 15 02 56 |  if_ne	mov	arg02, local02
1ba1c     0F 17 02 56 |  if_ne	mov	arg03, local01
1ba20     11 19 02 56 |  if_ne	mov	arg04, local03
1ba24     2C 02 B0 5D |  if_ne	call	#__system___fmtnum
1ba28     A7 F0 03 F6 | 	mov	ptra, fp
1ba2c     B2 00 A0 FD | 	call	#popregs_
1ba30                 | __system___basic_print_unsigned_ret
1ba30     2D 00 64 FD | 	ret
1ba34                 | 
1ba34                 | __system___basic_get_char
1ba34     03 4A 05 F6 | 	mov	COUNT_, #3
1ba38     A8 00 A0 FD | 	call	#pushregs_
1ba3c     1C 4B B0 FD | 	call	#__system___getrxfunc
1ba40     FD 1E 0A F6 | 	mov	local01, result1 wz
1ba44     01 FA 65 A6 |  if_e	neg	result1, #1
1ba48     28 00 90 AD |  if_e	jmp	#LR__2390
1ba4c     0F 21 02 F6 | 	mov	local02, local01
1ba50     13 1E 46 F7 | 	zerox	local01, #19
1ba54     14 20 46 F0 | 	shr	local02, #20
1ba58     02 20 66 F0 | 	shl	local02, #2
1ba5c     ED 20 02 F1 | 	add	local02, __methods__
1ba60     10 21 02 FB | 	rdlong	local02, local02
1ba64     F2 22 02 F6 | 	mov	local03, objptr
1ba68     0F E5 01 F6 | 	mov	objptr, local01
1ba6c     2D 20 62 FD | 	call	local02
1ba70     11 E5 01 F6 | 	mov	objptr, local03
1ba74                 | LR__2390
1ba74     A7 F0 03 F6 | 	mov	ptra, fp
1ba78     B2 00 A0 FD | 	call	#popregs_
1ba7c                 | __system___basic_get_char_ret
1ba7c     2D 00 64 FD | 	ret
1ba80                 | 
1ba80                 | __system___basic_get
1ba80     04 4A 05 F6 | 	mov	COUNT_, #4
1ba84     A8 00 A0 FD | 	call	#pushregs_
1ba88     0D 1F 02 F6 | 	mov	local01, arg05
1ba8c     0F 19 02 FD | 	qmul	arg04, local01
1ba90     09 21 02 F6 | 	mov	local02, arg01
1ba94     0B 23 02 F6 | 	mov	local03, arg03
1ba98     00 14 0E F2 | 	cmp	arg02, #0 wz
1ba9c     01 14 86 51 |  if_ne	sub	arg02, #1
1baa0     10 13 02 56 |  if_ne	mov	arg01, local02
1baa4     00 16 06 56 |  if_ne	mov	arg03, #0
1baa8     18 24 62 FD | 	getqx	local04
1baac     5C 41 B0 5D |  if_ne	call	#__system__lseek
1bab0     11 15 02 F6 | 	mov	arg02, local03
1bab4     12 17 02 F6 | 	mov	arg03, local04
1bab8     10 13 02 F6 | 	mov	arg01, local02
1babc     D4 40 B0 FD | 	call	#__system__read
1bac0     FD 24 02 F6 | 	mov	local04, result1
1bac4     01 24 56 F2 | 	cmps	local04, #1 wc
1bac8     10 00 90 CD |  if_b	jmp	#LR__2400
1bacc     12 63 02 F6 | 	mov	muldiva_, local04
1bad0     0F 65 02 F6 | 	mov	muldivb_, local01
1bad4     BA 00 A0 FD | 	call	#divide_
1bad8     32 25 02 F6 | 	mov	local04, muldivb_
1badc                 | LR__2400
1badc     12 FB 01 F6 | 	mov	result1, local04
1bae0     A7 F0 03 F6 | 	mov	ptra, fp
1bae4     B2 00 A0 FD | 	call	#popregs_
1bae8                 | __system___basic_get_ret
1bae8     2D 00 64 FD | 	ret
1baec                 | 
1baec                 | __system____lockio
1baec     AC 4A B0 FD | 	call	#__system___getiolock_0442
1baf0     FD 12 02 F6 | 	mov	arg01, result1
1baf4     70 F1 BF FD | 	call	#__system___lockmem
1baf8     00 FA 05 F6 | 	mov	result1, #0
1bafc                 | __system____lockio_ret
1bafc     2D 00 64 FD | 	ret
1bb00                 | 
1bb00                 | __system____unlockio
1bb00     98 4A B0 FD | 	call	#__system___getiolock_0442
1bb04     FD 00 68 FC | 	wrlong	#0, result1
1bb08     00 FA 05 F6 | 	mov	result1, #0
1bb0c                 | __system____unlockio_ret
1bb0c     2D 00 64 FD | 	ret
1bb10                 | 
1bb10                 | __system___fmtchar
1bb10     00 4A 05 F6 | 	mov	COUNT_, #0
1bb14     A8 00 A0 FD | 	call	#pushregs_
1bb18     10 F0 07 F1 | 	add	ptra, #16
1bb1c     04 4E 05 F1 | 	add	fp, #4
1bb20     A7 12 62 FC | 	wrlong	arg01, fp
1bb24     04 4E 05 F1 | 	add	fp, #4
1bb28     A7 14 62 FC | 	wrlong	arg02, fp
1bb2c     04 4E 05 F1 | 	add	fp, #4
1bb30     A7 16 62 FC | 	wrlong	arg03, fp
1bb34     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
1bb38     A7 16 62 FC | 	wrlong	arg03, fp
1bb3c     08 4E 85 F1 | 	sub	fp, #8
1bb40     A7 12 02 FB | 	rdlong	arg01, fp
1bb44     04 4E 05 F1 | 	add	fp, #4
1bb48     A7 14 02 FB | 	rdlong	arg02, fp
1bb4c     04 4E 05 F1 | 	add	fp, #4
1bb50     A7 16 02 F6 | 	mov	arg03, fp
1bb54     0C 4E 85 F1 | 	sub	fp, #12
1bb58     0C 00 B0 FD | 	call	#__system___fmtstr
1bb5c     A7 F0 03 F6 | 	mov	ptra, fp
1bb60     B2 00 A0 FD | 	call	#popregs_
1bb64                 | __system___fmtchar_ret
1bb64     2D 00 64 FD | 	ret
1bb68                 | 
1bb68                 | __system___fmtstr
1bb68     09 4A 05 F6 | 	mov	COUNT_, #9
1bb6c     A8 00 A0 FD | 	call	#pushregs_
1bb70     09 1F 02 F6 | 	mov	local01, arg01
1bb74     0A 21 02 F6 | 	mov	local02, arg02
1bb78     0B 23 02 F6 | 	mov	local03, arg03
1bb7c     10 19 E2 F8 | 	getbyte	arg04, local02, #0
1bb80     11 13 02 F6 | 	mov	arg01, local03
1bb84     09 25 02 F6 | 	mov	local04, arg01
1bb88     97 06 48 FB | 	callpa	#(@LR__2411-@LR__2410)>>2,fcache_load_ptr_
1bb8c                 | LR__2410
1bb8c     12 FB C9 FA | 	rdbyte	result1, local04 wz
1bb90     01 24 06 51 |  if_ne	add	local04, #1
1bb94     F4 FF 9F 5D |  if_ne	jmp	#LR__2410
1bb98                 | LR__2411
1bb98     09 25 82 F1 | 	sub	local04, arg01
1bb9c     00 18 0E F2 | 	cmp	arg04, #0 wz
1bba0     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
1bba4     10 15 02 F6 | 	mov	arg02, local02
1bba8     12 17 02 F6 | 	mov	arg03, local04
1bbac     0F 13 02 F6 | 	mov	arg01, local01
1bbb0     02 18 06 F6 | 	mov	arg04, #2
1bbb4     00 46 B0 FD | 	call	#__system___fmtpad
1bbb8     FD 26 02 F6 | 	mov	local05, result1
1bbbc     00 26 56 F2 | 	cmps	local05, #0 wc
1bbc0     13 FB 01 C6 |  if_b	mov	result1, local05
1bbc4     80 00 90 CD |  if_b	jmp	#LR__2414
1bbc8     01 24 56 F2 | 	cmps	local04, #1 wc
1bbcc     50 00 90 CD |  if_b	jmp	#LR__2413
1bbd0     12 29 02 F6 | 	mov	local06, local04
1bbd4                 | LR__2412
1bbd4     0F 2B 02 F6 | 	mov	local07, local01
1bbd8     0F 2D 02 F6 | 	mov	local08, local01
1bbdc     13 2A 46 F7 | 	zerox	local07, #19
1bbe0     14 2C 46 F0 | 	shr	local08, #20
1bbe4     02 2C 66 F0 | 	shl	local08, #2
1bbe8     ED 2C 02 F1 | 	add	local08, __methods__
1bbec     16 2D 02 FB | 	rdlong	local08, local08
1bbf0     11 13 C2 FA | 	rdbyte	arg01, local03
1bbf4     F2 2E 02 F6 | 	mov	local09, objptr
1bbf8     15 E5 01 F6 | 	mov	objptr, local07
1bbfc     01 22 06 F1 | 	add	local03, #1
1bc00     2D 2C 62 FD | 	call	local08
1bc04     17 E5 01 F6 | 	mov	objptr, local09
1bc08     FD 2E 02 F6 | 	mov	local09, result1
1bc0c     00 2E 56 F2 | 	cmps	local09, #0 wc
1bc10     17 FB 01 C6 |  if_b	mov	result1, local09
1bc14     30 00 90 CD |  if_b	jmp	#LR__2414
1bc18     17 27 02 F1 | 	add	local05, local09
1bc1c     ED 29 6E FB | 	djnz	local06, #LR__2412
1bc20                 | LR__2413
1bc20     10 15 02 F6 | 	mov	arg02, local02
1bc24     12 17 02 F6 | 	mov	arg03, local04
1bc28     0F 13 02 F6 | 	mov	arg01, local01
1bc2c     01 18 06 F6 | 	mov	arg04, #1
1bc30     84 45 B0 FD | 	call	#__system___fmtpad
1bc34     FD 2E 02 F6 | 	mov	local09, result1
1bc38     00 2E 56 F2 | 	cmps	local09, #0 wc
1bc3c     17 FB 01 C6 |  if_b	mov	result1, local09
1bc40     17 27 02 31 |  if_ae	add	local05, local09
1bc44     13 FB 01 36 |  if_ae	mov	result1, local05
1bc48                 | LR__2414
1bc48     A7 F0 03 F6 | 	mov	ptra, fp
1bc4c     B2 00 A0 FD | 	call	#popregs_
1bc50                 | __system___fmtstr_ret
1bc50     2D 00 64 FD | 	ret
1bc54                 | 
1bc54                 | __system___fmtnum
1bc54     0B 4A 05 F6 | 	mov	COUNT_, #11
1bc58     A8 00 A0 FD | 	call	#pushregs_
1bc5c     09 1F 02 F6 | 	mov	local01, arg01
1bc60     0A 21 02 F6 | 	mov	local02, arg02
1bc64     0B 23 02 F6 | 	mov	local03, arg03
1bc68     0C 25 02 F6 | 	mov	local04, arg04
1bc6c     F8 27 02 F6 | 	mov	local05, ptra
1bc70     13 29 02 F6 | 	mov	local06, local05
1bc74     00 2A 06 F6 | 	mov	local07, #0
1bc78     10 2D 02 F6 | 	mov	local08, local02
1bc7c     10 2C 46 F0 | 	shr	local08, #16
1bc80     3F 2C 06 F5 | 	and	local08, #63
1bc84     10 2F E2 F8 | 	getbyte	local09, local02, #0
1bc88     10 31 02 F6 | 	mov	local10, local02
1bc8c     1A 30 46 F0 | 	shr	local10, #26
1bc90     03 30 06 F5 | 	and	local10, #3
1bc94     18 33 02 F6 | 	mov	local11, local10
1bc98     01 2C 56 F2 | 	cmps	local08, #1 wc
1bc9c     44 F0 07 F1 | 	add	ptra, #68
1bca0     01 2C 86 31 |  if_ae	sub	local08, #1
1bca4     41 2E 56 F2 | 	cmps	local09, #65 wc
1bca8     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
1bcac     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
1bcb0     03 32 0E F2 | 	cmp	local11, #3 wz
1bcb4     00 32 06 A6 |  if_e	mov	local11, #0
1bcb8     00 22 56 52 |  if_ne	cmps	local03, #0 wc
1bcbc     04 32 06 46 |  if_c_and_nz	mov	local11, #4
1bcc0     11 23 62 46 |  if_c_and_nz	neg	local03, local03
1bcc4     00 32 0E F2 | 	cmp	local11, #0 wz
1bcc8     4C 00 90 AD |  if_e	jmp	#LR__2423
1bccc     01 2A 06 F6 | 	mov	local07, #1
1bcd0     17 2D 0A F2 | 	cmp	local08, local09 wz
1bcd4     18 00 90 5D |  if_ne	jmp	#LR__2421
1bcd8     05 2C 6E FB | 	djnz	local08, #LR__2420
1bcdc     0F 13 02 F6 | 	mov	arg01, local01
1bce0     10 15 02 F6 | 	mov	arg02, local02
1bce4     23 16 06 F6 | 	mov	arg03, #35
1bce8     24 FE BF FD | 	call	#__system___fmtchar
1bcec     88 00 90 FD | 	jmp	#LR__2427
1bcf0                 | LR__2420
1bcf0                 | LR__2421
1bcf0     02 32 0E F2 | 	cmp	local11, #2 wz
1bcf4     14 31 02 A6 |  if_e	mov	local10, local06
1bcf8     01 28 06 A1 |  if_e	add	local06, #1
1bcfc     18 41 48 AC |  if_e	wrbyte	#32, local10
1bd00     14 00 90 AD |  if_e	jmp	#LR__2422
1bd04     04 32 0E F2 | 	cmp	local11, #4 wz
1bd08     14 5B 48 AC |  if_e	wrbyte	#45, local06
1bd0c     01 28 06 A1 |  if_e	add	local06, #1
1bd10     14 57 48 5C |  if_ne	wrbyte	#43, local06
1bd14     01 28 06 51 |  if_ne	add	local06, #1
1bd18                 | LR__2422
1bd18                 | LR__2423
1bd18     14 13 02 F6 | 	mov	arg01, local06
1bd1c     11 15 02 F6 | 	mov	arg02, local03
1bd20     12 17 02 F6 | 	mov	arg03, local04
1bd24     16 19 02 F6 | 	mov	arg04, local08
1bd28     00 1A 06 F6 | 	mov	arg05, #0
1bd2c     1D 20 2E F4 | 	testbn	local02, #29 wz
1bd30     01 1A 06 56 |  if_ne	mov	arg05, #1
1bd34     48 45 B0 FD | 	call	#__system___uitoa
1bd38     FD 2A 02 F1 | 	add	local07, result1
1bd3c     17 2B 5A F2 | 	cmps	local07, local09 wcz
1bd40     24 00 90 ED |  if_be	jmp	#LR__2426
1bd44     97 0E 48 FB | 	callpa	#(@LR__2425-@LR__2424)>>2,fcache_load_ptr_
1bd48                 | LR__2424
1bd48     17 31 02 F6 | 	mov	local10, local09
1bd4c     01 30 56 F2 | 	cmps	local10, #1 wc
1bd50     01 2E 86 F1 | 	sub	local09, #1
1bd54     14 31 02 36 |  if_ae	mov	local10, local06
1bd58     01 28 06 31 |  if_ae	add	local06, #1
1bd5c     18 47 48 3C |  if_ae	wrbyte	#35, local10
1bd60     E4 FF 9F 3D |  if_ae	jmp	#LR__2424
1bd64                 | LR__2425
1bd64     14 01 48 FC | 	wrbyte	#0, local06
1bd68                 | LR__2426
1bd68     0F 13 02 F6 | 	mov	arg01, local01
1bd6c     10 15 02 F6 | 	mov	arg02, local02
1bd70     13 17 02 F6 | 	mov	arg03, local05
1bd74     F0 FD BF FD | 	call	#__system___fmtstr
1bd78                 | LR__2427
1bd78     A7 F0 03 F6 | 	mov	ptra, fp
1bd7c     B2 00 A0 FD | 	call	#popregs_
1bd80                 | __system___fmtnum_ret
1bd80     2D 00 64 FD | 	ret
1bd84                 | 
1bd84                 | __system___fmtfloat
1bd84     10 4A 05 F6 | 	mov	COUNT_, #16
1bd88     A8 00 A0 FD | 	call	#pushregs_
1bd8c     24 F1 07 F1 | 	add	ptra, #292
1bd90     04 4E 05 F1 | 	add	fp, #4
1bd94     A7 12 62 FC | 	wrlong	arg01, fp
1bd98     04 4E 05 F1 | 	add	fp, #4
1bd9c     A7 14 62 FC | 	wrlong	arg02, fp
1bda0     04 4E 05 F1 | 	add	fp, #4
1bda4     A7 16 62 FC | 	wrlong	arg03, fp
1bda8     04 4E 05 F1 | 	add	fp, #4
1bdac     A7 18 62 FC | 	wrlong	arg04, fp
1bdb0     0C 4E 05 F1 | 	add	fp, #12
1bdb4     A7 14 68 FC | 	wrlong	#10, fp
1bdb8     08 4E 05 F1 | 	add	fp, #8
1bdbc     A7 00 68 FC | 	wrlong	#0, fp
1bdc0     08 4E 05 F1 | 	add	fp, #8
1bdc4     A7 00 68 FC | 	wrlong	#0, fp
1bdc8     08 4E 05 F1 | 	add	fp, #8
1bdcc     A7 00 68 FC | 	wrlong	#0, fp
1bdd0     04 4E 05 F1 | 	add	fp, #4
1bdd4     A7 04 68 FC | 	wrlong	#2, fp
1bdd8     04 4E 05 F1 | 	add	fp, #4
1bddc     A7 00 68 FC | 	wrlong	#0, fp
1bde0     04 4E 05 F1 | 	add	fp, #4
1bde4     A7 00 68 FC | 	wrlong	#0, fp
1bde8     04 4E 05 F1 | 	add	fp, #4
1bdec     A7 00 68 FC | 	wrlong	#0, fp
1bdf0     04 4E 05 F1 | 	add	fp, #4
1bdf4     A7 00 68 FC | 	wrlong	#0, fp
1bdf8     18 4E 05 F1 | 	add	fp, #24
1bdfc     A7 00 68 FC | 	wrlong	#0, fp
1be00     68 4E 05 F1 | 	add	fp, #104
1be04     A7 1E 02 F6 | 	mov	local01, fp
1be08     08 4E 85 F1 | 	sub	fp, #8
1be0c     A7 1E 62 FC | 	wrlong	local01, fp
1be10     04 4E 05 F1 | 	add	fp, #4
1be14     A7 1E 62 FC | 	wrlong	local01, fp
1be18     BC 4E 85 F1 | 	sub	fp, #188
1be1c     A7 1E 02 FB | 	rdlong	local01, fp
1be20     10 1E 46 F0 | 	shr	local01, #16
1be24     3F 1E 06 F5 | 	and	local01, #63
1be28     B0 4E 05 F1 | 	add	fp, #176
1be2c     A7 1E 62 FC | 	wrlong	local01, fp
1be30     B0 4E 85 F1 | 	sub	fp, #176
1be34     A7 1E 02 FB | 	rdlong	local01, fp
1be38     1C 1E 46 F0 | 	shr	local01, #28
1be3c     01 1E 06 F5 | 	and	local01, #1
1be40     08 4F 05 F1 | 	add	fp, #264
1be44     A7 1E 62 FC | 	wrlong	local01, fp
1be48     58 4E 85 F1 | 	sub	fp, #88
1be4c     A7 1E 0A FB | 	rdlong	local01, fp wz
1be50     B8 4E 85 F1 | 	sub	fp, #184
1be54     3C 00 90 5D |  if_ne	jmp	#LR__2431
1be58     10 4E 05 F1 | 	add	fp, #16
1be5c     A7 1E 02 FB | 	rdlong	local01, fp
1be60     10 4E 85 F1 | 	sub	fp, #16
1be64     61 1E 0E F2 | 	cmp	local01, #97 wz
1be68     18 00 90 5D |  if_ne	jmp	#LR__2430
1be6c     B8 4E 05 F1 | 	add	fp, #184
1be70     A7 1A 68 FC | 	wrlong	#13, fp
1be74     84 4E 85 F1 | 	sub	fp, #132
1be78     A7 02 68 FC | 	wrlong	#1, fp
1be7c     34 4E 85 F1 | 	sub	fp, #52
1be80     24 00 90 FD | 	jmp	#LR__2432
1be84                 | LR__2430
1be84     B8 4E 05 F1 | 	add	fp, #184
1be88     A7 0C 68 FC | 	wrlong	#6, fp
1be8c     B8 4E 85 F1 | 	sub	fp, #184
1be90     14 00 90 FD | 	jmp	#LR__2432
1be94                 | LR__2431
1be94     B8 4E 05 F1 | 	add	fp, #184
1be98     A7 1E 02 FB | 	rdlong	local01, fp
1be9c     01 1E 86 F1 | 	sub	local01, #1
1bea0     A7 1E 62 FC | 	wrlong	local01, fp
1bea4     B8 4E 85 F1 | 	sub	fp, #184
1bea8                 | LR__2432
1bea8     08 4E 05 F1 | 	add	fp, #8
1beac     A7 1E 02 FB | 	rdlong	local01, fp
1beb0     16 1E 46 F0 | 	shr	local01, #22
1beb4     03 1E 06 F5 | 	and	local01, #3
1beb8     04 4F 05 F1 | 	add	fp, #260
1bebc     A7 1E 62 FC | 	wrlong	local01, fp
1bec0     04 4F 85 F1 | 	sub	fp, #260
1bec4     A7 1E 02 FB | 	rdlong	local01, fp
1bec8     1D 1E 46 F0 | 	shr	local01, #29
1becc     01 1E 06 F5 | 	and	local01, #1
1bed0     B4 4E 05 F1 | 	add	fp, #180
1bed4     A7 1E 62 FC | 	wrlong	local01, fp
1bed8     B4 4E 85 F1 | 	sub	fp, #180
1bedc     A7 1E 02 FB | 	rdlong	local01, fp
1bee0     0F 1F EA F8 | 	getbyte	local01, local01, #1
1bee4     60 4E 05 F1 | 	add	fp, #96
1bee8     A7 1E 62 FC | 	wrlong	local01, fp
1beec     60 4E 85 F1 | 	sub	fp, #96
1bef0     A7 1E 02 FB | 	rdlong	local01, fp
1bef4     0F 1F E2 F8 | 	getbyte	local01, local01, #0
1bef8     64 4E 05 F1 | 	add	fp, #100
1befc     A7 1E 62 FC | 	wrlong	local01, fp
1bf00     00 1E 06 F6 | 	mov	local01, #0
1bf04     5C 4E 85 F1 | 	sub	fp, #92
1bf08     A7 1A 02 FB | 	rdlong	arg05, fp
1bf0c     65 1A 0E F2 | 	cmp	arg05, #101 wz
1bf10     01 1E 06 A6 |  if_e	mov	local01, #1
1bf14     14 4E 05 F1 | 	add	fp, #20
1bf18     A7 1E 62 FC | 	wrlong	local01, fp
1bf1c     98 4E 05 F1 | 	add	fp, #152
1bf20     A7 20 0A FB | 	rdlong	local02, fp wz
1bf24     45 1E 06 56 |  if_ne	mov	local01, #69
1bf28     65 1E 06 A6 |  if_e	mov	local01, #101
1bf2c     8C 4E 85 F1 | 	sub	fp, #140
1bf30     A7 1E 62 FC | 	wrlong	local01, fp
1bf34     20 4E 85 F1 | 	sub	fp, #32
1bf38     A7 1E 02 FB | 	rdlong	local01, fp
1bf3c     10 4E 85 F1 | 	sub	fp, #16
1bf40     61 1E 0E F2 | 	cmp	local01, #97 wz
1bf44     4C 00 90 5D |  if_ne	jmp	#LR__2433
1bf48     24 4E 05 F1 | 	add	fp, #36
1bf4c     A7 02 68 FC | 	wrlong	#1, fp
1bf50     98 4E 05 F1 | 	add	fp, #152
1bf54     A7 20 0A FB | 	rdlong	local02, fp wz
1bf58     50 1E 06 56 |  if_ne	mov	local01, #80
1bf5c     70 1E 06 A6 |  if_e	mov	local01, #112
1bf60     8C 4E 85 F1 | 	sub	fp, #140
1bf64     A7 1E 62 FC | 	wrlong	local01, fp
1bf68     14 4E 85 F1 | 	sub	fp, #20
1bf6c     A7 04 68 FC | 	wrlong	#2, fp
1bf70     1C 4E 05 F1 | 	add	fp, #28
1bf74     A7 02 68 FC | 	wrlong	#1, fp
1bf78     84 4E 05 F1 | 	add	fp, #132
1bf7c     A7 20 0A FB | 	rdlong	local02, fp wz
1bf80     58 1E 06 56 |  if_ne	mov	local01, #88
1bf84     78 1E 06 A6 |  if_e	mov	local01, #120
1bf88     7C 4E 85 F1 | 	sub	fp, #124
1bf8c     A7 1E 62 FC | 	wrlong	local01, fp
1bf90     40 4E 85 F1 | 	sub	fp, #64
1bf94                 | LR__2433
1bf94     10 4E 05 F1 | 	add	fp, #16
1bf98     A7 1E 02 FB | 	rdlong	local01, fp
1bf9c     10 4E 85 F1 | 	sub	fp, #16
1bfa0     23 1E 0E F2 | 	cmp	local01, #35 wz
1bfa4     3C 00 90 5D |  if_ne	jmp	#LR__2436
1bfa8     48 4E 05 F1 | 	add	fp, #72
1bfac     A7 02 68 FC | 	wrlong	#1, fp
1bfb0     C8 4E 05 F1 | 	add	fp, #200
1bfb4     A7 1E 0A FB | 	rdlong	local01, fp wz
1bfb8     10 4F 85 F1 | 	sub	fp, #272
1bfbc     18 00 90 AD |  if_e	jmp	#LR__2434
1bfc0     10 4E 05 F1 | 	add	fp, #16
1bfc4     A7 CC 68 FC | 	wrlong	#102, fp
1bfc8     00 4F 05 F1 | 	add	fp, #256
1bfcc     A7 00 68 FC | 	wrlong	#0, fp
1bfd0     10 4F 85 F1 | 	sub	fp, #272
1bfd4     0C 00 90 FD | 	jmp	#LR__2435
1bfd8                 | LR__2434
1bfd8     10 4F 05 F1 | 	add	fp, #272
1bfdc     A7 02 68 FC | 	wrlong	#1, fp
1bfe0     10 4F 85 F1 | 	sub	fp, #272
1bfe4                 | LR__2435
1bfe4                 | LR__2436
1bfe4     08 4E 05 F1 | 	add	fp, #8
1bfe8     A7 1E 02 FB | 	rdlong	local01, fp
1bfec     1A 1E 46 F0 | 	shr	local01, #26
1bff0     03 1E 06 F5 | 	and	local01, #3
1bff4     5C 4E 05 F1 | 	add	fp, #92
1bff8     A7 1E 62 FC | 	wrlong	local01, fp
1bffc     58 4E 85 F1 | 	sub	fp, #88
1c000     A7 FA 01 FB | 	rdlong	result1, fp
1c004     0C 4E 85 F1 | 	sub	fp, #12
1c008     1F FA 4D F0 | 	shr	result1, #31 wz
1c00c     20 00 90 AD |  if_e	jmp	#LR__2437
1c010     2C 4E 05 F1 | 	add	fp, #44
1c014     A7 5A 68 FC | 	wrlong	#45, fp
1c018     20 4E 85 F1 | 	sub	fp, #32
1c01c     A7 FA 01 FB | 	rdlong	result1, fp
1c020     1F FA E5 F4 | 	bitnot	result1, #31
1c024     A7 FA 61 FC | 	wrlong	result1, fp
1c028     0C 4E 85 F1 | 	sub	fp, #12
1c02c     3C 00 90 FD | 	jmp	#LR__2439
1c030                 | LR__2437
1c030     64 4E 05 F1 | 	add	fp, #100
1c034     A7 1E 02 FB | 	rdlong	local01, fp
1c038     64 4E 85 F1 | 	sub	fp, #100
1c03c     01 1E 0E F2 | 	cmp	local01, #1 wz
1c040     2C 4E 05 A1 |  if_e	add	fp, #44
1c044     A7 56 68 AC |  if_e	wrlong	#43, fp
1c048     2C 4E 85 A1 |  if_e	sub	fp, #44
1c04c     1C 00 90 AD |  if_e	jmp	#LR__2438
1c050     64 4E 05 F1 | 	add	fp, #100
1c054     A7 1E 02 FB | 	rdlong	local01, fp
1c058     64 4E 85 F1 | 	sub	fp, #100
1c05c     02 1E 0E F2 | 	cmp	local01, #2 wz
1c060     2C 4E 05 A1 |  if_e	add	fp, #44
1c064     A7 40 68 AC |  if_e	wrlong	#32, fp
1c068     2C 4E 85 A1 |  if_e	sub	fp, #44
1c06c                 | LR__2438
1c06c                 | LR__2439
1c06c     08 4E 05 F1 | 	add	fp, #8
1c070     A7 1E 02 FB | 	rdlong	local01, fp
1c074     18 1E 46 F0 | 	shr	local01, #24
1c078     03 1E 06 F5 | 	and	local01, #3
1c07c     3C 4E 05 F1 | 	add	fp, #60
1c080     A7 1E 62 FC | 	wrlong	local01, fp
1c084     00 1E 06 F6 | 	mov	local01, #0
1c088     18 4E 85 F1 | 	sub	fp, #24
1c08c     A7 22 0A FB | 	rdlong	local03, fp wz
1c090     2C 4E 85 F1 | 	sub	fp, #44
1c094     18 00 90 5D |  if_ne	jmp	#LR__2440
1c098     1C 4E 05 F1 | 	add	fp, #28
1c09c     A7 24 02 FB | 	rdlong	local04, fp
1c0a0     1C 4E 85 F1 | 	sub	fp, #28
1c0a4     12 27 02 F6 | 	mov	local05, local04
1c0a8     0A 26 0E F2 | 	cmp	local05, #10 wz
1c0ac     04 00 90 AD |  if_e	jmp	#LR__2441
1c0b0                 | LR__2440
1c0b0     01 1E 66 F5 | 	xor	local01, #1
1c0b4                 | LR__2441
1c0b4     3C 4E 05 F1 | 	add	fp, #60
1c0b8     A7 1E 62 FC | 	wrlong	local01, fp
1c0bc     3C 4E 85 F1 | 	sub	fp, #60
1c0c0     00 1E 0E F2 | 	cmp	local01, #0 wz
1c0c4     0C 01 90 AD |  if_e	jmp	#LR__2443
1c0c8     44 4E 05 F1 | 	add	fp, #68
1c0cc     A7 26 02 FB | 	rdlong	local05, fp
1c0d0     44 4E 85 F1 | 	sub	fp, #68
1c0d4     13 23 02 F6 | 	mov	local03, local05
1c0d8     02 22 0E F2 | 	cmp	local03, #2 wz
1c0dc     F4 00 90 5D |  if_ne	jmp	#LR__2443
1c0e0     0C 4F 05 F1 | 	add	fp, #268
1c0e4     A7 28 02 FB | 	rdlong	local06, fp
1c0e8     0C 4F 85 F1 | 	sub	fp, #268
1c0ec     14 25 02 F6 | 	mov	local04, local06
1c0f0     02 24 0E F2 | 	cmp	local04, #2 wz
1c0f4     DC 00 90 AD |  if_e	jmp	#LR__2443
1c0f8     C0 4E 05 F1 | 	add	fp, #192
1c0fc     A7 12 02 FB | 	rdlong	arg01, fp
1c100     94 4E 85 F1 | 	sub	fp, #148
1c104     A7 14 02 FB | 	rdlong	arg02, fp
1c108     14 4E 05 F1 | 	add	fp, #20
1c10c     A7 16 02 FB | 	rdlong	arg03, fp
1c110     40 4E 85 F1 | 	sub	fp, #64
1c114     D0 43 B0 FD | 	call	#__system__emitsign_0402
1c118     14 4F 05 F1 | 	add	fp, #276
1c11c     A7 FA 61 FC | 	wrlong	result1, fp
1c120     14 4F 85 F1 | 	sub	fp, #276
1c124     00 FA 55 F2 | 	cmps	result1, #0 wc
1c128     14 4F 05 C1 |  if_b	add	fp, #276
1c12c     A7 FA 01 CB |  if_b	rdlong	result1, fp
1c130     14 4F 85 C1 |  if_b	sub	fp, #276
1c134     6C 0B 90 CD |  if_b	jmp	#LR__2493
1c138     C0 4E 05 F1 | 	add	fp, #192
1c13c     A7 1E 02 FB | 	rdlong	local01, fp
1c140     54 4E 05 F1 | 	add	fp, #84
1c144     A7 26 02 FB | 	rdlong	local05, fp
1c148     13 23 02 F6 | 	mov	local03, local05
1c14c     13 1F 02 F1 | 	add	local01, local05
1c150     54 4E 85 F1 | 	sub	fp, #84
1c154     A7 1E 62 FC | 	wrlong	local01, fp
1c158     58 4E 85 F1 | 	sub	fp, #88
1c15c     A7 1E 0A FB | 	rdlong	local01, fp wz
1c160     68 4E 85 F1 | 	sub	fp, #104
1c164     60 00 90 AD |  if_e	jmp	#LR__2442
1c168     68 4E 05 F1 | 	add	fp, #104
1c16c     A7 1E 02 FB | 	rdlong	local01, fp
1c170     AC 4E 05 F1 | 	add	fp, #172
1c174     A7 22 02 FB | 	rdlong	local03, fp
1c178     11 1F 82 F1 | 	sub	local01, local03
1c17c     AC 4E 85 F1 | 	sub	fp, #172
1c180     A7 1E 62 FC | 	wrlong	local01, fp
1c184     68 4E 85 F1 | 	sub	fp, #104
1c188     00 1E 56 F2 | 	cmps	local01, #0 wc
1c18c     68 4E 05 C1 |  if_b	add	fp, #104
1c190     A7 00 68 CC |  if_b	wrlong	#0, fp
1c194     68 4E 85 C1 |  if_b	sub	fp, #104
1c198     08 4E 05 F1 | 	add	fp, #8
1c19c     A7 1E 02 FB | 	rdlong	local01, fp
1c1a0     E8 1E 06 F4 | 	bitl	local01, #232
1c1a4     A7 1E 62 FC | 	wrlong	local01, fp
1c1a8     60 4E 05 F1 | 	add	fp, #96
1c1ac     A7 26 02 FB | 	rdlong	local05, fp
1c1b0     13 23 02 F6 | 	mov	local03, local05
1c1b4     08 22 66 F0 | 	shl	local03, #8
1c1b8     11 1F 42 F5 | 	or	local01, local03
1c1bc     60 4E 85 F1 | 	sub	fp, #96
1c1c0     A7 1E 62 FC | 	wrlong	local01, fp
1c1c4     08 4E 85 F1 | 	sub	fp, #8
1c1c8                 | LR__2442
1c1c8     3C 4E 05 F1 | 	add	fp, #60
1c1cc     A7 00 68 FC | 	wrlong	#0, fp
1c1d0     3C 4E 85 F1 | 	sub	fp, #60
1c1d4                 | LR__2443
1c1d4     0C 4E 05 F1 | 	add	fp, #12
1c1d8     A7 12 02 FB | 	rdlong	arg01, fp
1c1dc     0C 4E 85 F1 | 	sub	fp, #12
1c1e0     A8 1E B0 FD | 	call	#__system____builtin_ilogb
1c1e4     FF FF 3F FF 
1c1e8     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
1c1ec     50 00 90 5D |  if_ne	jmp	#LR__2445
1c1f0     2C 4E 05 F1 | 	add	fp, #44
1c1f4     A7 1E 0A FB | 	rdlong	local01, fp wz
1c1f8     2C 4E 85 F1 | 	sub	fp, #44
1c1fc     24 00 90 AD |  if_e	jmp	#LR__2444
1c200     C0 4E 05 F1 | 	add	fp, #192
1c204     A7 20 02 FB | 	rdlong	local02, fp
1c208     10 23 02 F6 | 	mov	local03, local02
1c20c     01 22 06 F1 | 	add	local03, #1
1c210     A7 22 62 FC | 	wrlong	local03, fp
1c214     94 4E 85 F1 | 	sub	fp, #148
1c218     A7 24 02 FB | 	rdlong	local04, fp
1c21c     2C 4E 85 F1 | 	sub	fp, #44
1c220     10 25 42 FC | 	wrbyte	local04, local02
1c224                 | LR__2444
1c224     C0 4E 05 F1 | 	add	fp, #192
1c228     A7 12 02 FB | 	rdlong	arg01, fp
1c22c     C0 4E 85 F1 | 	sub	fp, #192
1c230     50 01 00 FF 
1c234     AA 15 06 F6 | 	mov	arg02, ##@LR__4371
1c238     E0 E9 BF FD | 	call	#__system____builtin_strcpy
1c23c     A4 08 90 FD | 	jmp	#LR__2481
1c240                 | LR__2445
1c240     0C 4E 05 F1 | 	add	fp, #12
1c244     A7 20 02 FB | 	rdlong	local02, fp
1c248     0C 4E 85 F1 | 	sub	fp, #12
1c24c     10 13 02 F6 | 	mov	arg01, local02
1c250     38 1E B0 FD | 	call	#__system____builtin_ilogb
1c254     00 00 40 FF 
1c258     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
1c25c     50 00 90 5D |  if_ne	jmp	#LR__2447
1c260     2C 4E 05 F1 | 	add	fp, #44
1c264     A7 1E 0A FB | 	rdlong	local01, fp wz
1c268     2C 4E 85 F1 | 	sub	fp, #44
1c26c     24 00 90 AD |  if_e	jmp	#LR__2446
1c270     C0 4E 05 F1 | 	add	fp, #192
1c274     A7 20 02 FB | 	rdlong	local02, fp
1c278     10 23 02 F6 | 	mov	local03, local02
1c27c     01 22 06 F1 | 	add	local03, #1
1c280     A7 22 62 FC | 	wrlong	local03, fp
1c284     94 4E 85 F1 | 	sub	fp, #148
1c288     A7 24 02 FB | 	rdlong	local04, fp
1c28c     2C 4E 85 F1 | 	sub	fp, #44
1c290     10 25 42 FC | 	wrbyte	local04, local02
1c294                 | LR__2446
1c294     C0 4E 05 F1 | 	add	fp, #192
1c298     A7 12 02 FB | 	rdlong	arg01, fp
1c29c     C0 4E 85 F1 | 	sub	fp, #192
1c2a0     50 01 00 FF 
1c2a4     AE 15 06 F6 | 	mov	arg02, ##@LR__4372
1c2a8     70 E9 BF FD | 	call	#__system____builtin_strcpy
1c2ac     34 08 90 FD | 	jmp	#LR__2481
1c2b0                 | LR__2447
1c2b0     10 4E 05 F1 | 	add	fp, #16
1c2b4     A7 1E 02 FB | 	rdlong	local01, fp
1c2b8     10 4E 85 F1 | 	sub	fp, #16
1c2bc     67 1E 0E F2 | 	cmp	local01, #103 wz
1c2c0     10 4E 05 51 |  if_ne	add	fp, #16
1c2c4     A7 22 02 5B |  if_ne	rdlong	local03, fp
1c2c8     10 4E 85 51 |  if_ne	sub	fp, #16
1c2cc     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
1c2d0     94 01 90 5D |  if_ne	jmp	#LR__2452
1c2d4     0C 4E 05 F1 | 	add	fp, #12
1c2d8     A7 12 02 FB | 	rdlong	arg01, fp
1c2dc     08 4E 05 F1 | 	add	fp, #8
1c2e0     A7 14 02 F6 | 	mov	arg02, fp
1c2e4     0C 4E 05 F1 | 	add	fp, #12
1c2e8     A7 16 02 F6 | 	mov	arg03, fp
1c2ec     98 4E 05 F1 | 	add	fp, #152
1c2f0     A7 18 02 FB | 	rdlong	arg04, fp
1c2f4     9C 4E 85 F1 | 	sub	fp, #156
1c2f8     A7 1A 02 FB | 	rdlong	arg05, fp
1c2fc     1C 4E 85 F1 | 	sub	fp, #28
1c300     F0 3F B0 FD | 	call	#__system__disassemble_0400
1c304     10 4E 05 F1 | 	add	fp, #16
1c308     A7 1E 02 FB | 	rdlong	local01, fp
1c30c     10 4E 85 F1 | 	sub	fp, #16
1c310     23 1E 0E F2 | 	cmp	local01, #35 wz
1c314     A0 00 90 5D |  if_ne	jmp	#LR__2449
1c318     20 4E 05 F1 | 	add	fp, #32
1c31c     A7 1E 02 FB | 	rdlong	local01, fp
1c320     98 4E 05 F1 | 	add	fp, #152
1c324     A7 22 02 FB | 	rdlong	local03, fp
1c328     B8 4E 85 F1 | 	sub	fp, #184
1c32c     11 1F 5A F2 | 	cmps	local01, local03 wcz
1c330     24 4E 05 11 |  if_a	add	fp, #36
1c334     A7 02 68 1C |  if_a	wrlong	#1, fp
1c338     24 4E 85 11 |  if_a	sub	fp, #36
1c33c     A4 01 90 1D |  if_a	jmp	#LR__2455
1c340     20 4E 05 F1 | 	add	fp, #32
1c344     A7 1E 02 FB | 	rdlong	local01, fp
1c348     20 4E 85 F1 | 	sub	fp, #32
1c34c     00 1E 56 F2 | 	cmps	local01, #0 wc
1c350     2C 00 90 3D |  if_ae	jmp	#LR__2448
1c354     B8 4E 05 F1 | 	add	fp, #184
1c358     A7 1E 02 FB | 	rdlong	local01, fp
1c35c     0F 1F 62 F6 | 	neg	local01, local01
1c360     98 4E 85 F1 | 	sub	fp, #152
1c364     A7 22 02 FB | 	rdlong	local03, fp
1c368     20 4E 85 F1 | 	sub	fp, #32
1c36c     0F 23 5A F2 | 	cmps	local03, local01 wcz
1c370     24 4E 05 E1 |  if_be	add	fp, #36
1c374     A7 02 68 EC |  if_be	wrlong	#1, fp
1c378     24 4E 85 E1 |  if_be	sub	fp, #36
1c37c     64 01 90 FD | 	jmp	#LR__2455
1c380                 | LR__2448
1c380     20 4E 05 F1 | 	add	fp, #32
1c384     A7 1E 02 FB | 	rdlong	local01, fp
1c388     20 4E 85 F1 | 	sub	fp, #32
1c38c     01 1E 56 F2 | 	cmps	local01, #1 wc
1c390     50 01 90 CD |  if_b	jmp	#LR__2455
1c394     B8 4E 05 F1 | 	add	fp, #184
1c398     A7 1E 02 FB | 	rdlong	local01, fp
1c39c     98 4E 85 F1 | 	sub	fp, #152
1c3a0     A7 22 02 FB | 	rdlong	local03, fp
1c3a4     11 1F 82 F1 | 	sub	local01, local03
1c3a8     98 4E 05 F1 | 	add	fp, #152
1c3ac     A7 1E 62 FC | 	wrlong	local01, fp
1c3b0     B8 4E 85 F1 | 	sub	fp, #184
1c3b4     2C 01 90 FD | 	jmp	#LR__2455
1c3b8                 | LR__2449
1c3b8     00 1E 06 F6 | 	mov	local01, #0
1c3bc     08 4E 05 F1 | 	add	fp, #8
1c3c0     A7 20 02 FB | 	rdlong	local02, fp
1c3c4     1C 20 46 F0 | 	shr	local02, #28
1c3c8     01 20 0E F5 | 	and	local02, #1 wz
1c3cc     01 1E 06 A6 |  if_e	mov	local01, #1
1c3d0     2C 4E 05 F1 | 	add	fp, #44
1c3d4     A7 1E 62 FC | 	wrlong	local01, fp
1c3d8     14 4E 85 F1 | 	sub	fp, #20
1c3dc     A7 1E 02 FB | 	rdlong	local01, fp
1c3e0     98 4E 05 F1 | 	add	fp, #152
1c3e4     A7 22 02 FB | 	rdlong	local03, fp
1c3e8     B8 4E 85 F1 | 	sub	fp, #184
1c3ec     11 1F 52 F2 | 	cmps	local01, local03 wc
1c3f0     18 00 90 3D |  if_ae	jmp	#LR__2450
1c3f4     20 4E 05 F1 | 	add	fp, #32
1c3f8     A7 24 02 FB | 	rdlong	local04, fp
1c3fc     20 4E 85 F1 | 	sub	fp, #32
1c400     FF FF 7F FF 
1c404     FC 25 56 F2 | 	cmps	local04, ##-4 wc
1c408     10 00 90 3D |  if_ae	jmp	#LR__2451
1c40c                 | LR__2450
1c40c     24 4E 05 F1 | 	add	fp, #36
1c410     A7 02 68 FC | 	wrlong	#1, fp
1c414     24 4E 85 F1 | 	sub	fp, #36
1c418     C8 00 90 FD | 	jmp	#LR__2455
1c41c                 | LR__2451
1c41c     B8 4E 05 F1 | 	add	fp, #184
1c420     A7 24 02 FB | 	rdlong	local04, fp
1c424     98 4E 85 F1 | 	sub	fp, #152
1c428     A7 22 02 FB | 	rdlong	local03, fp
1c42c     11 25 82 F1 | 	sub	local04, local03
1c430     98 4E 05 F1 | 	add	fp, #152
1c434     A7 24 62 FC | 	wrlong	local04, fp
1c438     AC 4E 85 F1 | 	sub	fp, #172
1c43c     A7 12 02 FB | 	rdlong	arg01, fp
1c440     08 4E 05 F1 | 	add	fp, #8
1c444     A7 14 02 F6 | 	mov	arg02, fp
1c448     0C 4E 05 F1 | 	add	fp, #12
1c44c     A7 16 02 F6 | 	mov	arg03, fp
1c450     12 19 62 F6 | 	neg	arg04, local04
1c454     04 4E 85 F1 | 	sub	fp, #4
1c458     A7 1A 02 FB | 	rdlong	arg05, fp
1c45c     1C 4E 85 F1 | 	sub	fp, #28
1c460     90 3E B0 FD | 	call	#__system__disassemble_0400
1c464     7C 00 90 FD | 	jmp	#LR__2455
1c468                 | LR__2452
1c468     24 4E 05 F1 | 	add	fp, #36
1c46c     A7 1E 0A FB | 	rdlong	local01, fp wz
1c470     24 4E 85 F1 | 	sub	fp, #36
1c474     34 00 90 AD |  if_e	jmp	#LR__2453
1c478     0C 4E 05 F1 | 	add	fp, #12
1c47c     A7 12 02 FB | 	rdlong	arg01, fp
1c480     08 4E 05 F1 | 	add	fp, #8
1c484     A7 14 02 F6 | 	mov	arg02, fp
1c488     0C 4E 05 F1 | 	add	fp, #12
1c48c     A7 16 02 F6 | 	mov	arg03, fp
1c490     98 4E 05 F1 | 	add	fp, #152
1c494     A7 18 02 FB | 	rdlong	arg04, fp
1c498     9C 4E 85 F1 | 	sub	fp, #156
1c49c     A7 1A 02 FB | 	rdlong	arg05, fp
1c4a0     1C 4E 85 F1 | 	sub	fp, #28
1c4a4     4C 3E B0 FD | 	call	#__system__disassemble_0400
1c4a8     38 00 90 FD | 	jmp	#LR__2454
1c4ac                 | LR__2453
1c4ac     0C 4E 05 F1 | 	add	fp, #12
1c4b0     A7 12 02 FB | 	rdlong	arg01, fp
1c4b4     08 4E 05 F1 | 	add	fp, #8
1c4b8     A7 14 02 F6 | 	mov	arg02, fp
1c4bc     0C 4E 05 F1 | 	add	fp, #12
1c4c0     A7 16 02 F6 | 	mov	arg03, fp
1c4c4     98 4E 05 F1 | 	add	fp, #152
1c4c8     A7 24 02 FB | 	rdlong	local04, fp
1c4cc     01 24 06 F1 | 	add	local04, #1
1c4d0     12 19 62 F6 | 	neg	arg04, local04
1c4d4     9C 4E 85 F1 | 	sub	fp, #156
1c4d8     A7 1A 02 FB | 	rdlong	arg05, fp
1c4dc     1C 4E 85 F1 | 	sub	fp, #28
1c4e0     10 3E B0 FD | 	call	#__system__disassemble_0400
1c4e4                 | LR__2454
1c4e4                 | LR__2455
1c4e4     1C 4E 05 F1 | 	add	fp, #28
1c4e8     A7 1E 02 FB | 	rdlong	local01, fp
1c4ec     1C 4E 85 F1 | 	sub	fp, #28
1c4f0     02 1E 0E F2 | 	cmp	local01, #2 wz
1c4f4     4C 00 90 5D |  if_ne	jmp	#LR__2458
1c4f8     1C 4E 05 F1 | 	add	fp, #28
1c4fc     A7 20 68 FC | 	wrlong	#16, fp
1c500     1C 4E 85 F1 | 	sub	fp, #28
1c504                 | LR__2456
1c504     14 4E 05 F1 | 	add	fp, #20
1c508     A7 1E 0A FB | 	rdlong	local01, fp wz
1c50c     14 4E 85 F1 | 	sub	fp, #20
1c510     30 00 90 AD |  if_e	jmp	#LR__2457
1c514     14 4E 05 F1 | 	add	fp, #20
1c518     A7 22 02 FB | 	rdlong	local03, fp
1c51c     14 4E 85 F1 | 	sub	fp, #20
1c520     00 80 00 FF 
1c524     00 22 16 F2 | 	cmp	local03, ##16777216 wc
1c528     18 00 90 3D |  if_ae	jmp	#LR__2457
1c52c     14 4E 05 F1 | 	add	fp, #20
1c530     A7 1E 02 FB | 	rdlong	local01, fp
1c534     01 1E 66 F0 | 	shl	local01, #1
1c538     A7 1E 62 FC | 	wrlong	local01, fp
1c53c     14 4E 85 F1 | 	sub	fp, #20
1c540     C0 FF 9F FD | 	jmp	#LR__2456
1c544                 | LR__2457
1c544                 | LR__2458
1c544     70 4E 05 F1 | 	add	fp, #112
1c548     A7 12 02 F6 | 	mov	arg01, fp
1c54c     5C 4E 85 F1 | 	sub	fp, #92
1c550     A7 14 02 FB | 	rdlong	arg02, fp
1c554     08 4E 05 F1 | 	add	fp, #8
1c558     A7 16 02 FB | 	rdlong	arg03, fp
1c55c     A0 4E 05 F1 | 	add	fp, #160
1c560     A7 1A 02 FB | 	rdlong	arg05, fp
1c564     BC 4E 85 F1 | 	sub	fp, #188
1c568     01 18 06 F6 | 	mov	arg04, #1
1c56c     10 3D B0 FD | 	call	#__system___uitoa
1c570     58 4E 05 F1 | 	add	fp, #88
1c574     A7 FA 61 FC | 	wrlong	result1, fp
1c578     38 4E 85 F1 | 	sub	fp, #56
1c57c     A7 1E 02 FB | 	rdlong	local01, fp
1c580     20 4E 85 F1 | 	sub	fp, #32
1c584     00 1E 56 F2 | 	cmps	local01, #0 wc
1c588     50 00 90 3D |  if_ae	jmp	#LR__2459
1c58c     60 4E 05 F1 | 	add	fp, #96
1c590     A7 5A 68 FC | 	wrlong	#45, fp
1c594     50 4E 05 F1 | 	add	fp, #80
1c598     A7 12 02 F6 | 	mov	arg01, fp
1c59c     90 4E 85 F1 | 	sub	fp, #144
1c5a0     A7 22 02 FB | 	rdlong	local03, fp
1c5a4     11 15 62 F6 | 	neg	arg02, local03
1c5a8     18 4E 05 F1 | 	add	fp, #24
1c5ac     A7 18 02 FB | 	rdlong	arg04, fp
1c5b0     84 4E 05 F1 | 	add	fp, #132
1c5b4     A7 28 02 FB | 	rdlong	local06, fp
1c5b8     BC 4E 85 F1 | 	sub	fp, #188
1c5bc     14 25 02 F6 | 	mov	local04, local06
1c5c0     0A 16 06 F6 | 	mov	arg03, #10
1c5c4     12 1B 02 F6 | 	mov	arg05, local04
1c5c8     B4 3C B0 FD | 	call	#__system___uitoa
1c5cc     5C 4E 05 F1 | 	add	fp, #92
1c5d0     A7 FA 61 FC | 	wrlong	result1, fp
1c5d4     5C 4E 85 F1 | 	sub	fp, #92
1c5d8     48 00 90 FD | 	jmp	#LR__2460
1c5dc                 | LR__2459
1c5dc     60 4E 05 F1 | 	add	fp, #96
1c5e0     A7 56 68 FC | 	wrlong	#43, fp
1c5e4     50 4E 05 F1 | 	add	fp, #80
1c5e8     A7 12 02 F6 | 	mov	arg01, fp
1c5ec     90 4E 85 F1 | 	sub	fp, #144
1c5f0     A7 14 02 FB | 	rdlong	arg02, fp
1c5f4     18 4E 05 F1 | 	add	fp, #24
1c5f8     A7 18 02 FB | 	rdlong	arg04, fp
1c5fc     84 4E 05 F1 | 	add	fp, #132
1c600     A7 28 02 FB | 	rdlong	local06, fp
1c604     BC 4E 85 F1 | 	sub	fp, #188
1c608     14 25 02 F6 | 	mov	local04, local06
1c60c     0A 16 06 F6 | 	mov	arg03, #10
1c610     12 1B 02 F6 | 	mov	arg05, local04
1c614     68 3C B0 FD | 	call	#__system___uitoa
1c618     5C 4E 05 F1 | 	add	fp, #92
1c61c     A7 FA 61 FC | 	wrlong	result1, fp
1c620     5C 4E 85 F1 | 	sub	fp, #92
1c624                 | LR__2460
1c624     24 4E 05 F1 | 	add	fp, #36
1c628     A7 1E 0A FB | 	rdlong	local01, fp wz
1c62c     24 4E 85 F1 | 	sub	fp, #36
1c630     2C 00 90 AD |  if_e	jmp	#LR__2461
1c634     50 4E 05 F1 | 	add	fp, #80
1c638     A7 00 68 FC | 	wrlong	#0, fp
1c63c     04 4E 85 F1 | 	sub	fp, #4
1c640     A7 00 68 FC | 	wrlong	#0, fp
1c644     6C 4E 05 F1 | 	add	fp, #108
1c648     A7 1E 02 FB | 	rdlong	local01, fp
1c64c     01 1E 06 F1 | 	add	local01, #1
1c650     64 4E 85 F1 | 	sub	fp, #100
1c654     A7 1E 62 FC | 	wrlong	local01, fp
1c658     54 4E 85 F1 | 	sub	fp, #84
1c65c     88 00 90 FD | 	jmp	#LR__2464
1c660                 | LR__2461
1c660     20 4E 05 F1 | 	add	fp, #32
1c664     A7 1E 02 FB | 	rdlong	local01, fp
1c668     20 4E 85 F1 | 	sub	fp, #32
1c66c     00 1E 56 F2 | 	cmps	local01, #0 wc
1c670     40 00 90 3D |  if_ae	jmp	#LR__2462
1c674     20 4E 05 F1 | 	add	fp, #32
1c678     A7 20 02 FB | 	rdlong	local02, fp
1c67c     30 4E 05 F1 | 	add	fp, #48
1c680     A7 20 62 FC | 	wrlong	local02, fp
1c684     04 4E 85 F1 | 	sub	fp, #4
1c688     A7 20 62 FC | 	wrlong	local02, fp
1c68c     2C 4E 85 F1 | 	sub	fp, #44
1c690     A7 1E 02 FB | 	rdlong	local01, fp
1c694     98 4E 05 F1 | 	add	fp, #152
1c698     A7 22 02 FB | 	rdlong	local03, fp
1c69c     11 1F 02 F1 | 	add	local01, local03
1c6a0     01 1E 06 F1 | 	add	local01, #1
1c6a4     64 4E 85 F1 | 	sub	fp, #100
1c6a8     A7 1E 62 FC | 	wrlong	local01, fp
1c6ac     54 4E 85 F1 | 	sub	fp, #84
1c6b0     34 00 90 FD | 	jmp	#LR__2463
1c6b4                 | LR__2462
1c6b4     4C 4E 05 F1 | 	add	fp, #76
1c6b8     A7 00 68 FC | 	wrlong	#0, fp
1c6bc     2C 4E 85 F1 | 	sub	fp, #44
1c6c0     A7 1E 02 FB | 	rdlong	local01, fp
1c6c4     30 4E 05 F1 | 	add	fp, #48
1c6c8     A7 1E 62 FC | 	wrlong	local01, fp
1c6cc     68 4E 05 F1 | 	add	fp, #104
1c6d0     A7 22 02 FB | 	rdlong	local03, fp
1c6d4     11 1F 02 F1 | 	add	local01, local03
1c6d8     01 1E 06 F1 | 	add	local01, #1
1c6dc     64 4E 85 F1 | 	sub	fp, #100
1c6e0     A7 1E 62 FC | 	wrlong	local01, fp
1c6e4     54 4E 85 F1 | 	sub	fp, #84
1c6e8                 | LR__2463
1c6e8                 | LR__2464
1c6e8     54 4E 05 F1 | 	add	fp, #84
1c6ec     A7 1E 02 FB | 	rdlong	local01, fp
1c6f0     08 4E 85 F1 | 	sub	fp, #8
1c6f4     A7 22 02 FB | 	rdlong	local03, fp
1c6f8     11 1F 82 F1 | 	sub	local01, local03
1c6fc     01 1E 06 F1 | 	add	local01, #1
1c700     24 4E 85 F1 | 	sub	fp, #36
1c704     A7 1E 62 FC | 	wrlong	local01, fp
1c708     04 4E 05 F1 | 	add	fp, #4
1c70c     A7 1E 0A FB | 	rdlong	local01, fp wz
1c710     2C 4E 85 F1 | 	sub	fp, #44
1c714     28 4E 05 51 |  if_ne	add	fp, #40
1c718     A7 22 02 5B |  if_ne	rdlong	local03, fp
1c71c     01 22 06 51 |  if_ne	add	local03, #1
1c720     A7 22 62 5C |  if_ne	wrlong	local03, fp
1c724     28 4E 85 51 |  if_ne	sub	fp, #40
1c728     1C 4E 05 F1 | 	add	fp, #28
1c72c     A7 1E 02 FB | 	rdlong	local01, fp
1c730     1C 4E 85 F1 | 	sub	fp, #28
1c734     10 1E 0E F2 | 	cmp	local01, #16 wz
1c738     28 4E 05 A1 |  if_e	add	fp, #40
1c73c     A7 1E 02 AB |  if_e	rdlong	local01, fp
1c740     02 1E 06 A1 |  if_e	add	local01, #2
1c744     A7 1E 62 AC |  if_e	wrlong	local01, fp
1c748     28 4E 85 A1 |  if_e	sub	fp, #40
1c74c     24 4E 05 F1 | 	add	fp, #36
1c750     A7 1E 0A FB | 	rdlong	local01, fp wz
1c754     24 4E 85 F1 | 	sub	fp, #36
1c758     28 00 90 AD |  if_e	jmp	#LR__2465
1c75c     28 4E 05 F1 | 	add	fp, #40
1c760     A7 1E 02 FB | 	rdlong	local01, fp
1c764     02 22 06 F6 | 	mov	local03, #2
1c768     34 4E 05 F1 | 	add	fp, #52
1c76c     A7 26 02 FB | 	rdlong	local05, fp
1c770     13 23 02 F1 | 	add	local03, local05
1c774     11 1F 02 F1 | 	add	local01, local03
1c778     34 4E 85 F1 | 	sub	fp, #52
1c77c     A7 1E 62 FC | 	wrlong	local01, fp
1c780     28 4E 85 F1 | 	sub	fp, #40
1c784                 | LR__2465
1c784     28 4E 05 F1 | 	add	fp, #40
1c788     A7 1E 02 FB | 	rdlong	local01, fp
1c78c     28 4E 85 F1 | 	sub	fp, #40
1c790     41 1E 56 F2 | 	cmps	local01, #65 wc
1c794     01 FA 65 36 |  if_ae	neg	result1, #1
1c798     08 05 90 3D |  if_ae	jmp	#LR__2493
1c79c     3C 4E 05 F1 | 	add	fp, #60
1c7a0     A7 1E 0A FB | 	rdlong	local01, fp wz
1c7a4     3C 4E 85 F1 | 	sub	fp, #60
1c7a8     60 00 90 AD |  if_e	jmp	#LR__2466
1c7ac     C0 4E 05 F1 | 	add	fp, #192
1c7b0     A7 12 02 FB | 	rdlong	arg01, fp
1c7b4     94 4E 85 F1 | 	sub	fp, #148
1c7b8     A7 14 02 FB | 	rdlong	arg02, fp
1c7bc     14 4E 05 F1 | 	add	fp, #20
1c7c0     A7 16 02 FB | 	rdlong	arg03, fp
1c7c4     40 4E 85 F1 | 	sub	fp, #64
1c7c8     1C 3D B0 FD | 	call	#__system__emitsign_0402
1c7cc     18 4F 05 F1 | 	add	fp, #280
1c7d0     A7 FA 61 FC | 	wrlong	result1, fp
1c7d4     18 4F 85 F1 | 	sub	fp, #280
1c7d8     00 FA 55 F2 | 	cmps	result1, #0 wc
1c7dc     18 4F 05 C1 |  if_b	add	fp, #280
1c7e0     A7 FA 01 CB |  if_b	rdlong	result1, fp
1c7e4     18 4F 85 C1 |  if_b	sub	fp, #280
1c7e8     B8 04 90 CD |  if_b	jmp	#LR__2493
1c7ec     C0 4E 05 F1 | 	add	fp, #192
1c7f0     A7 1E 02 FB | 	rdlong	local01, fp
1c7f4     58 4E 05 F1 | 	add	fp, #88
1c7f8     A7 22 02 FB | 	rdlong	local03, fp
1c7fc     11 1F 02 F1 | 	add	local01, local03
1c800     58 4E 85 F1 | 	sub	fp, #88
1c804     A7 1E 62 FC | 	wrlong	local01, fp
1c808     C0 4E 85 F1 | 	sub	fp, #192
1c80c                 | LR__2466
1c80c     4C 4E 05 F1 | 	add	fp, #76
1c810     A7 1E 02 FB | 	rdlong	local01, fp
1c814     34 4E 85 F1 | 	sub	fp, #52
1c818     A7 1E 62 FC | 	wrlong	local01, fp
1c81c     18 4E 85 F1 | 	sub	fp, #24
1c820     97 9E 48 FB | 	callpa	#(@LR__2472-@LR__2467)>>2,fcache_load_ptr_
1c824                 | LR__2467
1c824     18 4E 05 F1 | 	add	fp, #24
1c828     A7 20 02 FB | 	rdlong	local02, fp
1c82c     3C 4E 05 F1 | 	add	fp, #60
1c830     A7 26 02 FB | 	rdlong	local05, fp
1c834     54 4E 85 F1 | 	sub	fp, #84
1c838     13 21 52 F2 | 	cmps	local02, local05 wc
1c83c     20 01 90 3D |  if_ae	jmp	#LR__2473
1c840     18 4E 05 F1 | 	add	fp, #24
1c844     A7 28 02 FB | 	rdlong	local06, fp
1c848     18 4E 85 F1 | 	sub	fp, #24
1c84c     00 28 56 F2 | 	cmps	local06, #0 wc
1c850     58 00 90 CD |  if_b	jmp	#LR__2468
1c854     18 4E 05 F1 | 	add	fp, #24
1c858     A7 28 02 FB | 	rdlong	local06, fp
1c85c     40 4E 05 F1 | 	add	fp, #64
1c860     A7 2A 02 FB | 	rdlong	local07, fp
1c864     58 4E 85 F1 | 	sub	fp, #88
1c868     15 29 52 F2 | 	cmps	local06, local07 wc
1c86c     3C 00 90 3D |  if_ae	jmp	#LR__2468
1c870     C0 4E 05 F1 | 	add	fp, #192
1c874     A7 2C 02 FB | 	rdlong	local08, fp
1c878     16 2B 02 F6 | 	mov	local07, local08
1c87c     01 2A 06 F1 | 	add	local07, #1
1c880     A7 2A 62 FC | 	wrlong	local07, fp
1c884     A8 4E 85 F1 | 	sub	fp, #168
1c888     A7 2A 02 FB | 	rdlong	local07, fp
1c88c     15 2F 02 F6 | 	mov	local09, local07
1c890     58 4E 05 F1 | 	add	fp, #88
1c894     A7 30 02 F6 | 	mov	local10, fp
1c898     A7 2E 02 F1 | 	add	local09, fp
1c89c     17 33 C2 FA | 	rdbyte	local11, local09
1c8a0     16 33 42 FC | 	wrbyte	local11, local08
1c8a4     70 4E 85 F1 | 	sub	fp, #112
1c8a8     20 00 90 FD | 	jmp	#LR__2469
1c8ac                 | LR__2468
1c8ac     C0 4E 05 F1 | 	add	fp, #192
1c8b0     A7 2C 02 FB | 	rdlong	local08, fp
1c8b4     16 2F 02 F6 | 	mov	local09, local08
1c8b8     01 2E 06 F1 | 	add	local09, #1
1c8bc     A7 2E 62 FC | 	wrlong	local09, fp
1c8c0     C0 4E 85 F1 | 	sub	fp, #192
1c8c4     30 2E 06 F6 | 	mov	local09, #48
1c8c8     16 61 48 FC | 	wrbyte	#48, local08
1c8cc                 | LR__2469
1c8cc     18 4E 05 F1 | 	add	fp, #24
1c8d0     A7 28 02 FB | 	rdlong	local06, fp
1c8d4     38 4E 05 F1 | 	add	fp, #56
1c8d8     A7 34 02 FB | 	rdlong	local12, fp
1c8dc     50 4E 85 F1 | 	sub	fp, #80
1c8e0     1A 29 0A F2 | 	cmp	local06, local12 wz
1c8e4     5C 00 90 5D |  if_ne	jmp	#LR__2471
1c8e8     10 4F 05 F1 | 	add	fp, #272
1c8ec     A7 2A 02 FB | 	rdlong	local07, fp
1c8f0     10 4F 85 F1 | 	sub	fp, #272
1c8f4     15 2F 0A F6 | 	mov	local09, local07 wz
1c8f8     28 00 90 5D |  if_ne	jmp	#LR__2470
1c8fc     54 4E 05 F1 | 	add	fp, #84
1c900     A7 32 02 FB | 	rdlong	local11, fp
1c904     19 31 02 F6 | 	mov	local10, local11
1c908     01 30 86 F1 | 	sub	local10, #1
1c90c     3C 4E 85 F1 | 	sub	fp, #60
1c910     A7 36 02 FB | 	rdlong	local13, fp
1c914     18 4E 85 F1 | 	sub	fp, #24
1c918     1B 39 02 F6 | 	mov	local14, local13
1c91c     18 39 52 F2 | 	cmps	local14, local10 wc
1c920     20 00 90 3D |  if_ae	jmp	#LR__2471
1c924                 | LR__2470
1c924     C0 4E 05 F1 | 	add	fp, #192
1c928     A7 2C 02 FB | 	rdlong	local08, fp
1c92c     16 35 02 F6 | 	mov	local12, local08
1c930     01 34 06 F1 | 	add	local12, #1
1c934     A7 34 62 FC | 	wrlong	local12, fp
1c938     C0 4E 85 F1 | 	sub	fp, #192
1c93c     2E 2E 06 F6 | 	mov	local09, #46
1c940     16 5D 48 FC | 	wrbyte	#46, local08
1c944                 | LR__2471
1c944     18 4E 05 F1 | 	add	fp, #24
1c948     A7 3A 02 FB | 	rdlong	local15, fp
1c94c     1D 35 02 F6 | 	mov	local12, local15
1c950     01 34 06 F1 | 	add	local12, #1
1c954     A7 34 62 FC | 	wrlong	local12, fp
1c958     18 4E 85 F1 | 	sub	fp, #24
1c95c     C4 FE 9F FD | 	jmp	#LR__2467
1c960                 | LR__2472
1c960                 | LR__2473
1c960     34 4E 05 F1 | 	add	fp, #52
1c964     A7 1E 0A FB | 	rdlong	local01, fp wz
1c968     34 4E 85 F1 | 	sub	fp, #52
1c96c     A0 00 90 AD |  if_e	jmp	#LR__2477
1c970     C0 4E 05 F1 | 	add	fp, #192
1c974     A7 1E 02 FB | 	rdlong	local01, fp
1c978     01 1E 86 F1 | 	sub	local01, #1
1c97c     A7 1E 62 FC | 	wrlong	local01, fp
1c980     C0 4E 85 F1 | 	sub	fp, #192
1c984     97 26 48 FB | 	callpa	#(@LR__2475-@LR__2474)>>2,fcache_load_ptr_
1c988                 | LR__2474
1c988     C0 4E 05 F1 | 	add	fp, #192
1c98c     A7 1E 02 FB | 	rdlong	local01, fp
1c990     04 4E 05 F1 | 	add	fp, #4
1c994     A7 22 02 FB | 	rdlong	local03, fp
1c998     C4 4E 85 F1 | 	sub	fp, #196
1c99c     11 1F 5A F2 | 	cmps	local01, local03 wcz
1c9a0     30 00 90 ED |  if_be	jmp	#LR__2476
1c9a4     C0 4E 05 F1 | 	add	fp, #192
1c9a8     A7 28 02 FB | 	rdlong	local06, fp
1c9ac     C0 4E 85 F1 | 	sub	fp, #192
1c9b0     14 25 C2 FA | 	rdbyte	local04, local06
1c9b4     30 24 0E F2 | 	cmp	local04, #48 wz
1c9b8     18 00 90 5D |  if_ne	jmp	#LR__2476
1c9bc     C0 4E 05 F1 | 	add	fp, #192
1c9c0     A7 1E 02 FB | 	rdlong	local01, fp
1c9c4     01 1E 86 F1 | 	sub	local01, #1
1c9c8     A7 1E 62 FC | 	wrlong	local01, fp
1c9cc     C0 4E 85 F1 | 	sub	fp, #192
1c9d0     B4 FF 9F FD | 	jmp	#LR__2474
1c9d4                 | LR__2475
1c9d4                 | LR__2476
1c9d4     C0 4E 05 F1 | 	add	fp, #192
1c9d8     A7 20 02 FB | 	rdlong	local02, fp
1c9dc     C0 4E 85 F1 | 	sub	fp, #192
1c9e0     10 1F C2 FA | 	rdbyte	local01, local02
1c9e4     2E 1E 0E F2 | 	cmp	local01, #46 wz
1c9e8     C0 4E 05 A1 |  if_e	add	fp, #192
1c9ec     A7 1E 02 AB |  if_e	rdlong	local01, fp
1c9f0     01 1E 86 A1 |  if_e	sub	local01, #1
1c9f4     A7 1E 62 AC |  if_e	wrlong	local01, fp
1c9f8     C0 4E 85 A1 |  if_e	sub	fp, #192
1c9fc     C0 4E 05 F1 | 	add	fp, #192
1ca00     A7 22 02 FB | 	rdlong	local03, fp
1ca04     01 22 06 F1 | 	add	local03, #1
1ca08     A7 22 62 FC | 	wrlong	local03, fp
1ca0c     C0 4E 85 F1 | 	sub	fp, #192
1ca10                 | LR__2477
1ca10     24 4E 05 F1 | 	add	fp, #36
1ca14     A7 1E 0A FB | 	rdlong	local01, fp wz
1ca18     24 4E 85 F1 | 	sub	fp, #36
1ca1c     B4 00 90 AD |  if_e	jmp	#LR__2480
1ca20     C0 4E 05 F1 | 	add	fp, #192
1ca24     A7 20 02 FB | 	rdlong	local02, fp
1ca28     10 23 02 F6 | 	mov	local03, local02
1ca2c     01 22 06 F1 | 	add	local03, #1
1ca30     A7 22 62 FC | 	wrlong	local03, fp
1ca34     90 4E 85 F1 | 	sub	fp, #144
1ca38     A7 24 02 FB | 	rdlong	local04, fp
1ca3c     10 25 42 FC | 	wrbyte	local04, local02
1ca40     90 4E 05 F1 | 	add	fp, #144
1ca44     A7 20 02 FB | 	rdlong	local02, fp
1ca48     10 23 02 F6 | 	mov	local03, local02
1ca4c     01 22 06 F1 | 	add	local03, #1
1ca50     A7 22 62 FC | 	wrlong	local03, fp
1ca54     60 4E 85 F1 | 	sub	fp, #96
1ca58     A7 24 02 FB | 	rdlong	local04, fp
1ca5c     10 25 42 FC | 	wrbyte	local04, local02
1ca60     48 4E 85 F1 | 	sub	fp, #72
1ca64     A7 00 68 FC | 	wrlong	#0, fp
1ca68     18 4E 85 F1 | 	sub	fp, #24
1ca6c                 | LR__2478
1ca6c     18 4E 05 F1 | 	add	fp, #24
1ca70     A7 20 02 FB | 	rdlong	local02, fp
1ca74     44 4E 05 F1 | 	add	fp, #68
1ca78     A7 26 02 FB | 	rdlong	local05, fp
1ca7c     5C 4E 85 F1 | 	sub	fp, #92
1ca80     13 21 52 F2 | 	cmps	local02, local05 wc
1ca84     4C 00 90 3D |  if_ae	jmp	#LR__2479
1ca88     C0 4E 05 F1 | 	add	fp, #192
1ca8c     A7 2C 02 FB | 	rdlong	local08, fp
1ca90     16 35 02 F6 | 	mov	local12, local08
1ca94     01 34 06 F1 | 	add	local12, #1
1ca98     A7 34 62 FC | 	wrlong	local12, fp
1ca9c     A8 4E 85 F1 | 	sub	fp, #168
1caa0     A7 2A 02 FB | 	rdlong	local07, fp
1caa4     15 2F 02 F6 | 	mov	local09, local07
1caa8     98 4E 05 F1 | 	add	fp, #152
1caac     A7 30 02 F6 | 	mov	local10, fp
1cab0     A7 2E 02 F1 | 	add	local09, fp
1cab4     17 33 C2 FA | 	rdbyte	local11, local09
1cab8     16 33 42 FC | 	wrbyte	local11, local08
1cabc     98 4E 85 F1 | 	sub	fp, #152
1cac0     A7 34 02 FB | 	rdlong	local12, fp
1cac4     01 34 06 F1 | 	add	local12, #1
1cac8     A7 34 62 FC | 	wrlong	local12, fp
1cacc     18 4E 85 F1 | 	sub	fp, #24
1cad0     98 FF 9F FD | 	jmp	#LR__2478
1cad4                 | LR__2479
1cad4                 | LR__2480
1cad4     C0 4E 05 F1 | 	add	fp, #192
1cad8     A7 1E 02 FB | 	rdlong	local01, fp
1cadc     C0 4E 85 F1 | 	sub	fp, #192
1cae0     0F 01 48 FC | 	wrbyte	#0, local01
1cae4                 | LR__2481
1cae4     6C 4E 05 F1 | 	add	fp, #108
1cae8     A7 1E 0A FB | 	rdlong	local01, fp wz
1caec     6C 4E 85 F1 | 	sub	fp, #108
1caf0     90 01 90 AD |  if_e	jmp	#LR__2492
1caf4     48 4E 05 F1 | 	add	fp, #72
1caf8     A7 22 0A FB | 	rdlong	local03, fp wz
1cafc     48 4E 85 F1 | 	sub	fp, #72
1cb00     80 01 90 AD |  if_e	jmp	#LR__2492
1cb04     C4 4E 05 F1 | 	add	fp, #196
1cb08     A7 12 02 FB | 	rdlong	arg01, fp
1cb0c     C4 4E 85 F1 | 	sub	fp, #196
1cb10     09 3D 02 F6 | 	mov	local16, arg01
1cb14     97 06 48 FB | 	callpa	#(@LR__2483-@LR__2482)>>2,fcache_load_ptr_
1cb18                 | LR__2482
1cb18     1E FB C9 FA | 	rdbyte	result1, local16 wz
1cb1c     01 3C 06 51 |  if_ne	add	local16, #1
1cb20     F4 FF 9F 5D |  if_ne	jmp	#LR__2482
1cb24                 | LR__2483
1cb24     09 3D 82 F1 | 	sub	local16, arg01
1cb28     1E 25 02 F6 | 	mov	local04, local16
1cb2c     6C 4E 05 F1 | 	add	fp, #108
1cb30     A7 28 02 FB | 	rdlong	local06, fp
1cb34     6C 4E 85 F1 | 	sub	fp, #108
1cb38     14 25 5A F2 | 	cmps	local04, local06 wcz
1cb3c     44 01 90 ED |  if_be	jmp	#LR__2492
1cb40     C4 4E 05 F1 | 	add	fp, #196
1cb44     A7 1E 02 FB | 	rdlong	local01, fp
1cb48     5C 4E 05 F1 | 	add	fp, #92
1cb4c     A7 1E 62 FC | 	wrlong	local01, fp
1cb50     FC 4E 85 F1 | 	sub	fp, #252
1cb54     A7 1E 0A FB | 	rdlong	local01, fp wz
1cb58     24 4E 85 F1 | 	sub	fp, #36
1cb5c     20 00 90 AD |  if_e	jmp	#LR__2484
1cb60     B8 4E 05 F1 | 	add	fp, #184
1cb64     A7 00 68 FC | 	wrlong	#0, fp
1cb68     4C 4E 85 F1 | 	sub	fp, #76
1cb6c     A7 1E 02 FB | 	rdlong	local01, fp
1cb70     B0 4E 05 F1 | 	add	fp, #176
1cb74     A7 1E 62 FC | 	wrlong	local01, fp
1cb78     1C 4F 85 F1 | 	sub	fp, #284
1cb7c     24 00 90 FD | 	jmp	#LR__2485
1cb80                 | LR__2484
1cb80     6C 4E 05 F1 | 	add	fp, #108
1cb84     A7 1E 02 FB | 	rdlong	local01, fp
1cb88     01 1E 86 F1 | 	sub	local01, #1
1cb8c     4C 4E 05 F1 | 	add	fp, #76
1cb90     A7 22 02 FB | 	rdlong	local03, fp
1cb94     11 1F 82 F1 | 	sub	local01, local03
1cb98     64 4E 05 F1 | 	add	fp, #100
1cb9c     A7 1E 62 FC | 	wrlong	local01, fp
1cba0     1C 4F 85 F1 | 	sub	fp, #284
1cba4                 | LR__2485
1cba4     97 20 48 FB | 	callpa	#(@LR__2487-@LR__2486)>>2,fcache_load_ptr_
1cba8                 | LR__2486
1cba8     1C 4F 05 F1 | 	add	fp, #284
1cbac     A7 1E 0A FB | 	rdlong	local01, fp wz
1cbb0     1C 4F 85 F1 | 	sub	fp, #284
1cbb4     30 00 90 AD |  if_e	jmp	#LR__2488
1cbb8     20 4F 05 F1 | 	add	fp, #288
1cbbc     A7 20 02 FB | 	rdlong	local02, fp
1cbc0     10 23 02 F6 | 	mov	local03, local02
1cbc4     01 22 06 F1 | 	add	local03, #1
1cbc8     A7 22 62 FC | 	wrlong	local03, fp
1cbcc     10 55 48 FC | 	wrbyte	#42, local02
1cbd0     04 4E 85 F1 | 	sub	fp, #4
1cbd4     A7 1E 02 FB | 	rdlong	local01, fp
1cbd8     01 1E 86 F1 | 	sub	local01, #1
1cbdc     A7 1E 62 FC | 	wrlong	local01, fp
1cbe0     1C 4F 85 F1 | 	sub	fp, #284
1cbe4     C0 FF 9F FD | 	jmp	#LR__2486
1cbe8                 | LR__2487
1cbe8                 | LR__2488
1cbe8     B8 4E 05 F1 | 	add	fp, #184
1cbec     A7 1E 0A FB | 	rdlong	local01, fp wz
1cbf0     B8 4E 85 F1 | 	sub	fp, #184
1cbf4     70 00 90 AD |  if_e	jmp	#LR__2491
1cbf8     20 4F 05 F1 | 	add	fp, #288
1cbfc     A7 20 02 FB | 	rdlong	local02, fp
1cc00     10 23 02 F6 | 	mov	local03, local02
1cc04     01 22 06 F1 | 	add	local03, #1
1cc08     A7 22 62 FC | 	wrlong	local03, fp
1cc0c     10 5D 48 FC | 	wrbyte	#46, local02
1cc10     04 4E 85 F1 | 	sub	fp, #4
1cc14     A7 00 68 FC | 	wrlong	#0, fp
1cc18     1C 4F 85 F1 | 	sub	fp, #284
1cc1c                 | LR__2489
1cc1c     1C 4F 05 F1 | 	add	fp, #284
1cc20     A7 20 02 FB | 	rdlong	local02, fp
1cc24     64 4E 85 F1 | 	sub	fp, #100
1cc28     A7 26 02 FB | 	rdlong	local05, fp
1cc2c     B8 4E 85 F1 | 	sub	fp, #184
1cc30     13 21 52 F2 | 	cmps	local02, local05 wc
1cc34     30 00 90 3D |  if_ae	jmp	#LR__2490
1cc38     20 4F 05 F1 | 	add	fp, #288
1cc3c     A7 2C 02 FB | 	rdlong	local08, fp
1cc40     16 35 02 F6 | 	mov	local12, local08
1cc44     01 34 06 F1 | 	add	local12, #1
1cc48     A7 34 62 FC | 	wrlong	local12, fp
1cc4c     16 55 48 FC | 	wrbyte	#42, local08
1cc50     04 4E 85 F1 | 	sub	fp, #4
1cc54     A7 34 02 FB | 	rdlong	local12, fp
1cc58     01 34 06 F1 | 	add	local12, #1
1cc5c     A7 34 62 FC | 	wrlong	local12, fp
1cc60     1C 4F 85 F1 | 	sub	fp, #284
1cc64     B4 FF 9F FD | 	jmp	#LR__2489
1cc68                 | LR__2490
1cc68                 | LR__2491
1cc68     20 4F 05 F1 | 	add	fp, #288
1cc6c     A7 20 02 FB | 	rdlong	local02, fp
1cc70     10 23 02 F6 | 	mov	local03, local02
1cc74     01 22 06 F1 | 	add	local03, #1
1cc78     A7 22 62 FC | 	wrlong	local03, fp
1cc7c     20 4F 85 F1 | 	sub	fp, #288
1cc80     10 01 48 FC | 	wrbyte	#0, local02
1cc84                 | LR__2492
1cc84     04 4E 05 F1 | 	add	fp, #4
1cc88     A7 12 02 FB | 	rdlong	arg01, fp
1cc8c     04 4E 05 F1 | 	add	fp, #4
1cc90     A7 14 02 FB | 	rdlong	arg02, fp
1cc94     BC 4E 05 F1 | 	add	fp, #188
1cc98     A7 16 02 FB | 	rdlong	arg03, fp
1cc9c     C4 4E 85 F1 | 	sub	fp, #196
1cca0     C4 EE BF FD | 	call	#__system___fmtstr
1cca4                 | LR__2493
1cca4     A7 F0 03 F6 | 	mov	ptra, fp
1cca8     B2 00 A0 FD | 	call	#popregs_
1ccac                 | __system___fmtfloat_ret
1ccac     2D 00 64 FD | 	ret
1ccb0                 | 
1ccb0                 | __system__Left_S
1ccb0     04 4A 05 F6 | 	mov	COUNT_, #4
1ccb4     A8 00 A0 FD | 	call	#pushregs_
1ccb8     09 1F 02 F6 | 	mov	local01, arg01
1ccbc     0A 21 02 F6 | 	mov	local02, arg02
1ccc0     01 20 56 F2 | 	cmps	local02, #1 wc
1ccc4     50 01 00 CF 
1ccc8     B2 FB 05 C6 |  if_b	mov	result1, ##@LR__4373
1cccc     5C 00 90 CD |  if_b	jmp	#LR__2503
1ccd0     0F 13 02 F6 | 	mov	arg01, local01
1ccd4     09 23 02 F6 | 	mov	local03, arg01
1ccd8     97 06 48 FB | 	callpa	#(@LR__2501-@LR__2500)>>2,fcache_load_ptr_
1ccdc                 | LR__2500
1ccdc     11 FB C9 FA | 	rdbyte	result1, local03 wz
1cce0     01 22 06 51 |  if_ne	add	local03, #1
1cce4     F4 FF 9F 5D |  if_ne	jmp	#LR__2500
1cce8                 | LR__2501
1cce8     09 23 82 F1 | 	sub	local03, arg01
1ccec     11 FB 01 F6 | 	mov	result1, local03
1ccf0     10 FB 59 F2 | 	cmps	result1, local02 wcz
1ccf4     0F FB 01 E6 |  if_be	mov	result1, local01
1ccf8     30 00 90 ED |  if_be	jmp	#LR__2503
1ccfc     10 13 02 F6 | 	mov	arg01, local02
1cd00     02 12 06 F1 | 	add	arg01, #2
1cd04     50 1D B0 FD | 	call	#__system___gc_alloc_managed
1cd08     FD 24 0A F6 | 	mov	local04, result1 wz
1cd0c     18 00 90 AD |  if_e	jmp	#LR__2502
1cd10     12 13 02 F6 | 	mov	arg01, local04
1cd14     0F 15 02 F6 | 	mov	arg02, local01
1cd18     10 17 02 F6 | 	mov	arg03, local02
1cd1c     68 DE BF FD | 	call	#__system____builtin_memmove
1cd20     12 21 02 F1 | 	add	local02, local04
1cd24     10 01 48 FC | 	wrbyte	#0, local02
1cd28                 | LR__2502
1cd28     12 FB 01 F6 | 	mov	result1, local04
1cd2c                 | LR__2503
1cd2c     A7 F0 03 F6 | 	mov	ptra, fp
1cd30     B2 00 A0 FD | 	call	#popregs_
1cd34                 | __system__Left_S_ret
1cd34     2D 00 64 FD | 	ret
1cd38                 | 
1cd38                 | __system__Right_S
1cd38     05 4A 05 F6 | 	mov	COUNT_, #5
1cd3c     A8 00 A0 FD | 	call	#pushregs_
1cd40     09 1F 02 F6 | 	mov	local01, arg01
1cd44     0A 21 02 F6 | 	mov	local02, arg02
1cd48     01 20 56 F2 | 	cmps	local02, #1 wc
1cd4c     50 01 00 CF 
1cd50     B3 FB 05 C6 |  if_b	mov	result1, ##@LR__4374
1cd54     64 00 90 CD |  if_b	jmp	#LR__2513
1cd58     0F 13 02 F6 | 	mov	arg01, local01
1cd5c     09 23 02 F6 | 	mov	local03, arg01
1cd60     97 06 48 FB | 	callpa	#(@LR__2511-@LR__2510)>>2,fcache_load_ptr_
1cd64                 | LR__2510
1cd64     11 FB C9 FA | 	rdbyte	result1, local03 wz
1cd68     01 22 06 51 |  if_ne	add	local03, #1
1cd6c     F4 FF 9F 5D |  if_ne	jmp	#LR__2510
1cd70                 | LR__2511
1cd70     09 23 82 F1 | 	sub	local03, arg01
1cd74     11 FB 01 F6 | 	mov	result1, local03
1cd78     FD 24 02 F6 | 	mov	local04, result1
1cd7c     10 25 5A F2 | 	cmps	local04, local02 wcz
1cd80     0F FB 01 E6 |  if_be	mov	result1, local01
1cd84     34 00 90 ED |  if_be	jmp	#LR__2513
1cd88     10 13 02 F6 | 	mov	arg01, local02
1cd8c     02 12 06 F1 | 	add	arg01, #2
1cd90     C4 1C B0 FD | 	call	#__system___gc_alloc_managed
1cd94     FD 26 0A F6 | 	mov	local05, result1 wz
1cd98     1C 00 90 AD |  if_e	jmp	#LR__2512
1cd9c     10 25 82 F1 | 	sub	local04, local02
1cda0     0F 25 02 F1 | 	add	local04, local01
1cda4     01 20 06 F1 | 	add	local02, #1
1cda8     13 13 02 F6 | 	mov	arg01, local05
1cdac     12 15 02 F6 | 	mov	arg02, local04
1cdb0     10 17 02 F6 | 	mov	arg03, local02
1cdb4     D0 DD BF FD | 	call	#__system____builtin_memmove
1cdb8                 | LR__2512
1cdb8     13 FB 01 F6 | 	mov	result1, local05
1cdbc                 | LR__2513
1cdbc     A7 F0 03 F6 | 	mov	ptra, fp
1cdc0     B2 00 A0 FD | 	call	#popregs_
1cdc4                 | __system__Right_S_ret
1cdc4     2D 00 64 FD | 	ret
1cdc8                 | 
1cdc8                 | __system__Mid_S
1cdc8     05 4A 05 F6 | 	mov	COUNT_, #5
1cdcc     A8 00 A0 FD | 	call	#pushregs_
1cdd0     09 1F 02 F6 | 	mov	local01, arg01
1cdd4     0A 21 02 F6 | 	mov	local02, arg02
1cdd8     01 16 56 F2 | 	cmps	arg03, #1 wc
1cddc     50 01 00 CF 
1cde0     B4 FB 05 C6 |  if_b	mov	result1, ##@LR__4375
1cde4     80 00 90 CD |  if_b	jmp	#LR__2523
1cde8     01 20 86 F1 | 	sub	local02, #1
1cdec     00 20 56 F3 | 	fges	local02, #0 wc
1cdf0     0F 13 02 F6 | 	mov	arg01, local01
1cdf4     09 23 02 F6 | 	mov	local03, arg01
1cdf8     97 06 48 FB | 	callpa	#(@LR__2521-@LR__2520)>>2,fcache_load_ptr_
1cdfc                 | LR__2520
1cdfc     11 FB C9 FA | 	rdbyte	result1, local03 wz
1ce00     01 22 06 51 |  if_ne	add	local03, #1
1ce04     F4 FF 9F 5D |  if_ne	jmp	#LR__2520
1ce08                 | LR__2521
1ce08     09 23 82 F1 | 	sub	local03, arg01
1ce0c     11 FB 01 F6 | 	mov	result1, local03
1ce10     FD 14 02 F6 | 	mov	arg02, result1
1ce14     10 15 52 F2 | 	cmps	arg02, local02 wc
1ce18     50 01 00 CF 
1ce1c     B5 FB 05 C6 |  if_b	mov	result1, ##@LR__4376
1ce20     44 00 90 CD |  if_b	jmp	#LR__2523
1ce24     0A 25 02 F6 | 	mov	local04, arg02
1ce28     10 25 82 F1 | 	sub	local04, local02
1ce2c     0B 25 5A F2 | 	cmps	local04, arg03 wcz
1ce30     0B 25 02 16 |  if_a	mov	local04, arg03
1ce34     12 13 02 F6 | 	mov	arg01, local04
1ce38     02 12 06 F1 | 	add	arg01, #2
1ce3c     18 1C B0 FD | 	call	#__system___gc_alloc_managed
1ce40     FD 26 0A F6 | 	mov	local05, result1 wz
1ce44     1C 00 90 AD |  if_e	jmp	#LR__2522
1ce48     0F 21 02 F1 | 	add	local02, local01
1ce4c     13 13 02 F6 | 	mov	arg01, local05
1ce50     10 15 02 F6 | 	mov	arg02, local02
1ce54     12 17 02 F6 | 	mov	arg03, local04
1ce58     2C DD BF FD | 	call	#__system____builtin_memmove
1ce5c     13 25 02 F1 | 	add	local04, local05
1ce60     12 01 48 FC | 	wrbyte	#0, local04
1ce64                 | LR__2522
1ce64     13 FB 01 F6 | 	mov	result1, local05
1ce68                 | LR__2523
1ce68     A7 F0 03 F6 | 	mov	ptra, fp
1ce6c     B2 00 A0 FD | 	call	#popregs_
1ce70                 | __system__Mid_S_ret
1ce70     2D 00 64 FD | 	ret
1ce74                 | 
1ce74                 | __system__Chr_S
1ce74     01 4A 05 F6 | 	mov	COUNT_, #1
1ce78     A8 00 A0 FD | 	call	#pushregs_
1ce7c     09 1F 02 F6 | 	mov	local01, arg01
1ce80     03 12 06 F6 | 	mov	arg01, #3
1ce84     D0 1B B0 FD | 	call	#__system___gc_alloc_managed
1ce88     00 FA 4D F2 | 	cmps	result1, #0 wz
1ce8c     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
1ce90     01 FA 05 51 |  if_ne	add	result1, #1
1ce94     FD 00 48 5C |  if_ne	wrbyte	#0, result1
1ce98     01 FA 85 51 |  if_ne	sub	result1, #1
1ce9c     A7 F0 03 F6 | 	mov	ptra, fp
1cea0     B2 00 A0 FD | 	call	#popregs_
1cea4                 | __system__Chr_S_ret
1cea4     2D 00 64 FD | 	ret
1cea8                 | 
1cea8                 | __system__Number_S
1cea8     08 4A 05 F6 | 	mov	COUNT_, #8
1ceac     A8 00 A0 FD | 	call	#pushregs_
1ceb0     09 1F 02 F6 | 	mov	local01, arg01
1ceb4     0A 21 0A F6 | 	mov	local02, arg02 wz
1ceb8     0B 23 02 F6 | 	mov	local03, arg03
1cebc     3C 00 90 5D |  if_ne	jmp	#LR__2532
1cec0     01 20 06 F6 | 	mov	local02, #1
1cec4     11 25 02 F6 | 	mov	local04, local03
1cec8     01 26 06 F6 | 	mov	local05, #1
1cecc     97 16 48 FB | 	callpa	#(@LR__2531-@LR__2530)>>2,fcache_load_ptr_
1ced0                 | LR__2530
1ced0     00 28 06 F6 | 	mov	local06, #0
1ced4     0F 25 1A F2 | 	cmp	local04, local01 wcz
1ced8     01 28 66 E6 |  if_be	neg	local06, #1
1cedc     12 27 12 F2 | 	cmp	local05, local04 wc
1cee0     15 2B A2 F1 | 	subx	local07, local07
1cee4     15 29 CA F7 | 	test	local06, local07 wz
1cee8     11 25 02 5D |  if_ne	qmul	local04, local03
1ceec     12 27 02 56 |  if_ne	mov	local05, local04
1cef0     01 20 06 51 |  if_ne	add	local02, #1
1cef4     18 24 62 5D |  if_ne	getqx	local04
1cef8     D4 FF 9F 5D |  if_ne	jmp	#LR__2530
1cefc                 | LR__2531
1cefc                 | LR__2532
1cefc     20 20 36 F3 | 	fle	local02, #32 wc
1cf00     10 13 02 F6 | 	mov	arg01, local02
1cf04     02 12 06 F1 | 	add	arg01, #2
1cf08     4C 1B B0 FD | 	call	#__system___gc_alloc_managed
1cf0c     FD 28 02 F6 | 	mov	local06, result1
1cf10     10 2B 02 F6 | 	mov	local07, local02
1cf14     14 2B 02 F1 | 	add	local07, local06
1cf18     15 01 48 FC | 	wrbyte	#0, local07
1cf1c     97 1A 48 FB | 	callpa	#(@LR__2534-@LR__2533)>>2,fcache_load_ptr_
1cf20                 | LR__2533
1cf20     01 20 16 F2 | 	cmp	local02, #1 wc
1cf24     2C 00 90 CD |  if_b	jmp	#LR__2535
1cf28     11 1F 12 FD | 	qdiv	local01, local03
1cf2c     01 20 86 F1 | 	sub	local02, #1
1cf30     10 2B 02 F6 | 	mov	local07, local02
1cf34     14 2B 02 F1 | 	add	local07, local06
1cf38     19 2C 62 FD | 	getqy	local08
1cf3c     0A 2C 16 F2 | 	cmp	local08, #10 wc
1cf40     30 2C 06 C1 |  if_b	add	local08, #48
1cf44     37 2C 06 31 |  if_ae	add	local08, #55
1cf48     15 2D 42 FC | 	wrbyte	local08, local07
1cf4c     18 1E 62 FD | 	getqx	local01
1cf50     CC FF 9F FD | 	jmp	#LR__2533
1cf54                 | LR__2534
1cf54                 | LR__2535
1cf54     14 FB 01 F6 | 	mov	result1, local06
1cf58     A7 F0 03 F6 | 	mov	ptra, fp
1cf5c     B2 00 A0 FD | 	call	#popregs_
1cf60                 | __system__Number_S_ret
1cf60     2D 00 64 FD | 	ret
1cf64                 | 
1cf64                 | __system__LCase_S
1cf64     07 4A 05 F6 | 	mov	COUNT_, #7
1cf68     A8 00 A0 FD | 	call	#pushregs_
1cf6c     09 1F 02 F6 | 	mov	local01, arg01
1cf70     09 21 02 F6 | 	mov	local02, arg01
1cf74     97 06 48 FB | 	callpa	#(@LR__2541-@LR__2540)>>2,fcache_load_ptr_
1cf78                 | LR__2540
1cf78     10 FB C9 FA | 	rdbyte	result1, local02 wz
1cf7c     01 20 06 51 |  if_ne	add	local02, #1
1cf80     F4 FF 9F 5D |  if_ne	jmp	#LR__2540
1cf84                 | LR__2541
1cf84     09 21 82 F1 | 	sub	local02, arg01
1cf88     10 FB 01 F6 | 	mov	result1, local02
1cf8c     FD 20 0A F6 | 	mov	local02, result1 wz
1cf90     50 01 00 AF 
1cf94     B6 FB 05 A6 |  if_e	mov	result1, ##@LR__4377
1cf98     7C 00 90 AD |  if_e	jmp	#LR__2547
1cf9c     10 13 02 F6 | 	mov	arg01, local02
1cfa0     02 12 06 F1 | 	add	arg01, #2
1cfa4     B0 1A B0 FD | 	call	#__system___gc_alloc_managed
1cfa8     FD 22 0A F6 | 	mov	local03, result1 wz
1cfac     64 00 90 AD |  if_e	jmp	#LR__2546
1cfb0     01 24 66 F6 | 	neg	local04, #1
1cfb4     97 26 48 FB | 	callpa	#(@LR__2545-@LR__2542)>>2,fcache_load_ptr_
1cfb8                 | LR__2542
1cfb8     01 24 06 F1 | 	add	local04, #1
1cfbc     12 27 02 F6 | 	mov	local05, local04
1cfc0     0F 27 02 F1 | 	add	local05, local01
1cfc4     13 29 C2 FA | 	rdbyte	local06, local05
1cfc8     41 28 56 F2 | 	cmps	local06, #65 wc
1cfcc     18 00 90 CD |  if_b	jmp	#LR__2543
1cfd0     5B 28 56 F2 | 	cmps	local06, #91 wc
1cfd4     12 2B 02 C6 |  if_b	mov	local07, local04
1cfd8     11 2B 02 C1 |  if_b	add	local07, local03
1cfdc     20 28 06 C1 |  if_b	add	local06, #32
1cfe0     15 29 42 CC |  if_b	wrbyte	local06, local07
1cfe4     0C 00 90 CD |  if_b	jmp	#LR__2544
1cfe8                 | LR__2543
1cfe8     12 2B 02 F6 | 	mov	local07, local04
1cfec     11 2B 02 F1 | 	add	local07, local03
1cff0     15 29 42 FC | 	wrbyte	local06, local07
1cff4                 | LR__2544
1cff4     10 29 02 F6 | 	mov	local06, local02
1cff8     01 28 86 F1 | 	sub	local06, #1
1cffc     14 25 0A F2 | 	cmp	local04, local06 wz
1d000     B4 FF 9F 5D |  if_ne	jmp	#LR__2542
1d004                 | LR__2545
1d004     11 21 02 F1 | 	add	local02, local03
1d008     10 01 48 FC | 	wrbyte	#0, local02
1d00c     11 FB 01 F6 | 	mov	result1, local03
1d010     04 00 90 FD | 	jmp	#LR__2547
1d014                 | LR__2546
1d014     11 FB 01 F6 | 	mov	result1, local03
1d018                 | LR__2547
1d018     A7 F0 03 F6 | 	mov	ptra, fp
1d01c     B2 00 A0 FD | 	call	#popregs_
1d020                 | __system__LCase_S_ret
1d020     2D 00 64 FD | 	ret
1d024                 | 
1d024                 | __system__LTrim_S
1d024     05 4A 05 F6 | 	mov	COUNT_, #5
1d028     A8 00 A0 FD | 	call	#pushregs_
1d02c     09 1F 02 F6 | 	mov	local01, arg01
1d030     09 21 02 F6 | 	mov	local02, arg01
1d034     97 06 48 FB | 	callpa	#(@LR__2551-@LR__2550)>>2,fcache_load_ptr_
1d038                 | LR__2550
1d038     10 FB C9 FA | 	rdbyte	result1, local02 wz
1d03c     01 20 06 51 |  if_ne	add	local02, #1
1d040     F4 FF 9F 5D |  if_ne	jmp	#LR__2550
1d044                 | LR__2551
1d044     09 21 82 F1 | 	sub	local02, arg01
1d048     10 FB 01 F6 | 	mov	result1, local02
1d04c     FD 20 0A F6 | 	mov	local02, result1 wz
1d050     50 01 00 AF 
1d054     B7 FB 05 A6 |  if_e	mov	result1, ##@LR__4378
1d058     7C 00 90 AD |  if_e	jmp	#LR__2556
1d05c     00 22 06 F6 | 	mov	local03, #0
1d060     10 25 02 F6 | 	mov	local04, local02
1d064                 | LR__2552
1d064     12 23 52 F2 | 	cmps	local03, local04 wc
1d068     68 00 90 3D |  if_ae	jmp	#LR__2555
1d06c     11 17 02 F6 | 	mov	arg03, local03
1d070     0F 17 02 F1 | 	add	arg03, local01
1d074     0B 17 C2 FA | 	rdbyte	arg03, arg03
1d078     20 16 0E F2 | 	cmp	arg03, #32 wz
1d07c     4C 00 90 AD |  if_e	jmp	#LR__2554
1d080     10 13 02 F6 | 	mov	arg01, local02
1d084     11 13 82 F1 | 	sub	arg01, local03
1d088     02 12 06 F1 | 	add	arg01, #2
1d08c     C8 19 B0 FD | 	call	#__system___gc_alloc_managed
1d090     FD 26 0A F6 | 	mov	local05, result1 wz
1d094     2C 00 90 AD |  if_e	jmp	#LR__2553
1d098     11 15 02 F6 | 	mov	arg02, local03
1d09c     0F 15 02 F1 | 	add	arg02, local01
1d0a0     10 17 02 F6 | 	mov	arg03, local02
1d0a4     11 17 82 F1 | 	sub	arg03, local03
1d0a8     13 13 02 F6 | 	mov	arg01, local05
1d0ac     D8 DA BF FD | 	call	#__system____builtin_memmove
1d0b0     11 21 82 F1 | 	sub	local02, local03
1d0b4     13 21 02 F1 | 	add	local02, local05
1d0b8     10 01 48 FC | 	wrbyte	#0, local02
1d0bc     13 FB 01 F6 | 	mov	result1, local05
1d0c0     14 00 90 FD | 	jmp	#LR__2556
1d0c4                 | LR__2553
1d0c4     13 FB 01 F6 | 	mov	result1, local05
1d0c8     0C 00 90 FD | 	jmp	#LR__2556
1d0cc                 | LR__2554
1d0cc     01 22 06 F1 | 	add	local03, #1
1d0d0     90 FF 9F FD | 	jmp	#LR__2552
1d0d4                 | LR__2555
1d0d4     0F FB 01 F6 | 	mov	result1, local01
1d0d8                 | LR__2556
1d0d8     A7 F0 03 F6 | 	mov	ptra, fp
1d0dc     B2 00 A0 FD | 	call	#popregs_
1d0e0                 | __system__LTrim_S_ret
1d0e0     2D 00 64 FD | 	ret
1d0e4                 | 
1d0e4                 | __system__RTrim_S
1d0e4     04 4A 05 F6 | 	mov	COUNT_, #4
1d0e8     A8 00 A0 FD | 	call	#pushregs_
1d0ec     09 1F 02 F6 | 	mov	local01, arg01
1d0f0     09 21 02 F6 | 	mov	local02, arg01
1d0f4     97 06 48 FB | 	callpa	#(@LR__2561-@LR__2560)>>2,fcache_load_ptr_
1d0f8                 | LR__2560
1d0f8     10 FB C9 FA | 	rdbyte	result1, local02 wz
1d0fc     01 20 06 51 |  if_ne	add	local02, #1
1d100     F4 FF 9F 5D |  if_ne	jmp	#LR__2560
1d104                 | LR__2561
1d104     09 21 82 F1 | 	sub	local02, arg01
1d108     10 FB 01 F6 | 	mov	result1, local02
1d10c     FD 20 0A F6 | 	mov	local02, result1 wz
1d110     50 01 00 AF 
1d114     B8 FB 05 A6 |  if_e	mov	result1, ##@LR__4379
1d118     74 00 90 AD |  if_e	jmp	#LR__2565
1d11c     10 23 02 F6 | 	mov	local03, local02
1d120     01 22 86 F1 | 	sub	local03, #1
1d124                 | LR__2562
1d124     11 15 02 F6 | 	mov	arg02, local03
1d128     0F 15 02 F1 | 	add	arg02, local01
1d12c     0A 21 C2 FA | 	rdbyte	local02, arg02
1d130     20 20 0E F2 | 	cmp	local02, #32 wz
1d134     44 00 90 AD |  if_e	jmp	#LR__2564
1d138     11 13 02 F6 | 	mov	arg01, local03
1d13c     02 12 06 F1 | 	add	arg01, #2
1d140     14 19 B0 FD | 	call	#__system___gc_alloc_managed
1d144     FD 24 0A F6 | 	mov	local04, result1 wz
1d148     28 00 90 AD |  if_e	jmp	#LR__2563
1d14c     11 17 02 F6 | 	mov	arg03, local03
1d150     01 16 06 F1 | 	add	arg03, #1
1d154     12 13 02 F6 | 	mov	arg01, local04
1d158     0F 15 02 F6 | 	mov	arg02, local01
1d15c     28 DA BF FD | 	call	#__system____builtin_memmove
1d160     01 22 06 F1 | 	add	local03, #1
1d164     12 23 02 F1 | 	add	local03, local04
1d168     11 01 48 FC | 	wrbyte	#0, local03
1d16c     12 FB 01 F6 | 	mov	result1, local04
1d170     1C 00 90 FD | 	jmp	#LR__2565
1d174                 | LR__2563
1d174     12 FB 01 F6 | 	mov	result1, local04
1d178     14 00 90 FD | 	jmp	#LR__2565
1d17c                 | LR__2564
1d17c     01 22 86 F1 | 	sub	local03, #1
1d180     00 22 56 F2 | 	cmps	local03, #0 wc
1d184     9C FF 9F 3D |  if_ae	jmp	#LR__2562
1d188     50 01 00 FF 
1d18c     B9 FB 05 F6 | 	mov	result1, ##@LR__4380
1d190                 | LR__2565
1d190     A7 F0 03 F6 | 	mov	ptra, fp
1d194     B2 00 A0 FD | 	call	#popregs_
1d198                 | __system__RTrim_S_ret
1d198     2D 00 64 FD | 	ret
1d19c                 | 
1d19c                 | __system__Instr
1d19c     07 4A 05 F6 | 	mov	COUNT_, #7
1d1a0     A8 00 A0 FD | 	call	#pushregs_
1d1a4     09 1F 02 F6 | 	mov	local01, arg01
1d1a8     0A 21 02 F6 | 	mov	local02, arg02
1d1ac     0B 23 02 F6 | 	mov	local03, arg03
1d1b0     11 13 02 F6 | 	mov	arg01, local03
1d1b4     09 25 02 F6 | 	mov	local04, arg01
1d1b8     97 06 48 FB | 	callpa	#(@LR__2571-@LR__2570)>>2,fcache_load_ptr_
1d1bc                 | LR__2570
1d1bc     12 FB C9 FA | 	rdbyte	result1, local04 wz
1d1c0     01 24 06 51 |  if_ne	add	local04, #1
1d1c4     F4 FF 9F 5D |  if_ne	jmp	#LR__2570
1d1c8                 | LR__2571
1d1c8     09 25 82 F1 | 	sub	local04, arg01
1d1cc     12 27 02 F6 | 	mov	local05, local04
1d1d0     10 13 02 F6 | 	mov	arg01, local02
1d1d4     09 25 02 F6 | 	mov	local04, arg01
1d1d8     97 06 48 FB | 	callpa	#(@LR__2573-@LR__2572)>>2,fcache_load_ptr_
1d1dc                 | LR__2572
1d1dc     12 FB C9 FA | 	rdbyte	result1, local04 wz
1d1e0     01 24 06 51 |  if_ne	add	local04, #1
1d1e4     F4 FF 9F 5D |  if_ne	jmp	#LR__2572
1d1e8                 | LR__2573
1d1e8     09 25 82 F1 | 	sub	local04, arg01
1d1ec     12 FB 01 F6 | 	mov	result1, local04
1d1f0     FD 18 0A F6 | 	mov	arg04, result1 wz
1d1f4     00 FA 05 A6 |  if_e	mov	result1, #0
1d1f8     98 00 90 AD |  if_e	jmp	#LR__2577
1d1fc     00 26 0E F2 | 	cmp	local05, #0 wz
1d200     00 FA 05 A6 |  if_e	mov	result1, #0
1d204     8C 00 90 AD |  if_e	jmp	#LR__2577
1d208     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
1d20c     00 FA 05 16 |  if_a	mov	result1, #0
1d210     80 00 90 1D |  if_a	jmp	#LR__2577
1d214     01 1E 56 F2 | 	cmps	local01, #1 wc
1d218     01 1E 06 C6 |  if_b	mov	local01, #1
1d21c     11 29 C2 FA | 	rdbyte	local06, local03
1d220     01 26 0E F2 | 	cmp	local05, #1 wz
1d224     18 00 90 5D |  if_ne	jmp	#LR__2574
1d228     10 13 02 F6 | 	mov	arg01, local02
1d22c     14 15 02 F6 | 	mov	arg02, local06
1d230     0F 17 02 F6 | 	mov	arg03, local01
1d234     00 18 06 F6 | 	mov	arg04, #0
1d238     B0 33 B0 FD | 	call	#__system____ScanForChar
1d23c     54 00 90 FD | 	jmp	#LR__2577
1d240                 | LR__2574
1d240     0F 2B 02 F6 | 	mov	local07, local01
1d244                 | LR__2575
1d244     10 13 02 F6 | 	mov	arg01, local02
1d248     14 15 02 F6 | 	mov	arg02, local06
1d24c     15 17 02 F6 | 	mov	arg03, local07
1d250     00 18 06 F6 | 	mov	arg04, #0
1d254     94 33 B0 FD | 	call	#__system____ScanForChar
1d258     FD 2A 0A F6 | 	mov	local07, result1 wz
1d25c     30 00 90 AD |  if_e	jmp	#LR__2576
1d260     13 17 02 F6 | 	mov	arg03, local05
1d264     10 13 02 F6 | 	mov	arg01, local02
1d268     15 15 02 F6 | 	mov	arg02, local07
1d26c     58 FB BF FD | 	call	#__system__Mid_S
1d270     FD 12 02 F6 | 	mov	arg01, result1
1d274     11 15 02 F6 | 	mov	arg02, local03
1d278     14 DA BF FD | 	call	#__system___string_cmp
1d27c     00 FA 0D F2 | 	cmp	result1, #0 wz
1d280     15 FB 01 A6 |  if_e	mov	result1, local07
1d284     0C 00 90 AD |  if_e	jmp	#LR__2577
1d288     13 2B 02 F1 | 	add	local07, local05
1d28c     B4 FF 9F FD | 	jmp	#LR__2575
1d290                 | LR__2576
1d290     00 FA 05 F6 | 	mov	result1, #0
1d294                 | LR__2577
1d294     A7 F0 03 F6 | 	mov	ptra, fp
1d298     B2 00 A0 FD | 	call	#popregs_
1d29c                 | __system__Instr_ret
1d29c     2D 00 64 FD | 	ret
1d2a0                 | 
1d2a0                 | __system___strerror
1d2a0     00 12 56 F2 | 	cmps	arg01, #0 wc
1d2a4     08 00 90 CD |  if_b	jmp	#LR__2580
1d2a8     1A 12 56 F2 | 	cmps	arg01, #26 wc
1d2ac     04 00 90 CD |  if_b	jmp	#LR__2581
1d2b0                 | LR__2580
1d2b0     19 12 06 F6 | 	mov	arg01, #25
1d2b4                 | LR__2581
1d2b4     02 12 66 F0 | 	shl	arg01, #2
1d2b8     01 00 00 FF 
1d2bc     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
1d2c0     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1d2c4     09 FB 01 FB | 	rdlong	result1, arg01
1d2c8     01 00 00 FF 
1d2cc     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
1d2d0                 | __system___strerror_ret
1d2d0     2D 00 64 FD | 	ret
1d2d4                 | 
1d2d4                 | __system___int64_shl
1d2d4     20 16 CE F7 | 	test	arg03, #32 wz
1d2d8     09 15 02 56 |  if_ne	mov	arg02, arg01
1d2dc     00 12 06 56 |  if_ne	mov	arg01, #0
1d2e0     1F 16 CE F7 | 	test	arg03, #31 wz
1d2e4     18 00 90 AD |  if_e	jmp	#LR__2590
1d2e8     0B 15 62 F0 | 	shl	arg02, arg03
1d2ec     09 FB 01 F6 | 	mov	result1, arg01
1d2f0     0B FD 61 F6 | 	neg	result2, arg03
1d2f4     FE FA 41 F0 | 	shr	result1, result2
1d2f8     FD 14 42 F5 | 	or	arg02, result1
1d2fc     0B 13 62 F0 | 	shl	arg01, arg03
1d300                 | LR__2590
1d300     0A FD 01 F6 | 	mov	result2, arg02
1d304     09 FB 01 F6 | 	mov	result1, arg01
1d308                 | __system___int64_shl_ret
1d308     2D 00 64 FD | 	ret
1d30c                 | 
1d30c                 | __system___usepins
1d30c     14 E6 05 F1 | 	add	ptr___system__dat__, #20
1d310     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1d314     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
1d318     00 13 CA F7 | 	test	arg01, _var01 wz
1d31c     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
1d320     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
1d324     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
1d328     01 15 CA A7 |  if_e	test	arg02, _var02 wz
1d32c     00 FA 05 56 |  if_ne	mov	result1, #0
1d330     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
1d334     14 E6 05 F1 | 	add	ptr___system__dat__, #20
1d338     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
1d33c     09 03 42 F5 | 	or	_var02, arg01
1d340     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
1d344     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1d348     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
1d34c     0A 03 42 F5 | 	or	_var02, arg02
1d350     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
1d354     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
1d358     01 FA 65 F6 | 	neg	result1, #1
1d35c                 | __system___usepins_ret
1d35c     2D 00 64 FD | 	ret
1d360                 | 
1d360                 | __system___freepins
1d360     14 E6 05 F1 | 	add	ptr___system__dat__, #20
1d364     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1d368     09 01 22 F5 | 	andn	_var01, arg01
1d36c     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
1d370     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1d374     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1d378     0A 01 22 F5 | 	andn	_var01, arg02
1d37c     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
1d380     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
1d384                 | __system___freepins_ret
1d384     2D 00 64 FD | 	ret
1d388                 | 
1d388                 | __system___float_fromuns
1d388     09 17 0A F6 | 	mov	arg03, arg01 wz
1d38c     0B FB 01 A6 |  if_e	mov	result1, arg03
1d390     24 00 90 AD |  if_e	jmp	#LR__2600
1d394     0B 15 92 F7 | 	encod	arg02, arg03 wc
1d398     01 14 06 C1 |  if_b	add	arg02, #1
1d39c     01 14 86 F1 | 	sub	arg02, #1
1d3a0     1F 12 06 F6 | 	mov	arg01, #31
1d3a4     0A 13 82 F1 | 	sub	arg01, arg02
1d3a8     09 17 62 F0 | 	shl	arg03, arg01
1d3ac     02 16 46 F0 | 	shr	arg03, #2
1d3b0     00 12 06 F6 | 	mov	arg01, #0
1d3b4     4C 09 B0 FD | 	call	#__system___float_Pack
1d3b8                 | LR__2600
1d3b8                 | __system___float_fromuns_ret
1d3b8     2D 00 64 FD | 	ret
1d3bc                 | 
1d3bc                 | __system___float_add
1d3bc     0F 4A 05 F6 | 	mov	COUNT_, #15
1d3c0     A8 00 A0 FD | 	call	#pushregs_
1d3c4     09 1F 02 F6 | 	mov	local01, arg01
1d3c8     0A 21 02 F6 | 	mov	local02, arg02
1d3cc     00 22 06 F6 | 	mov	local03, #0
1d3d0     0F 25 02 F6 | 	mov	local04, local01
1d3d4     12 27 02 F6 | 	mov	local05, local04
1d3d8     16 26 46 F7 | 	zerox	local05, #22
1d3dc     12 29 02 F6 | 	mov	local06, local04
1d3e0     01 28 66 F0 | 	shl	local06, #1
1d3e4     18 28 46 F0 | 	shr	local06, #24
1d3e8     1F 24 46 F0 | 	shr	local04, #31
1d3ec     10 13 02 F6 | 	mov	arg01, local02
1d3f0     09 FB 01 F6 | 	mov	result1, arg01
1d3f4     FD 2A 02 F6 | 	mov	local07, result1
1d3f8     15 2D 02 F6 | 	mov	local08, local07
1d3fc     16 2C 46 F7 | 	zerox	local08, #22
1d400     15 2F 02 F6 | 	mov	local09, local07
1d404     01 2E 66 F0 | 	shl	local09, #1
1d408     18 2E 46 F0 | 	shr	local09, #24
1d40c     17 31 02 F6 | 	mov	local10, local09
1d410     1F 2A 46 F0 | 	shr	local07, #31
1d414     00 32 06 F6 | 	mov	local11, #0
1d418     00 34 06 F6 | 	mov	local12, #0
1d41c     18 29 12 F2 | 	cmp	local06, local10 wc
1d420     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
1d424     2C 00 90 1D |  if_a	jmp	#LR__2610
1d428     16 27 12 32 |  if_ae	cmp	local05, local08 wc
1d42c     24 00 90 3D |  if_ae	jmp	#LR__2610
1d430     13 37 02 F6 | 	mov	local13, local05
1d434     16 27 02 F6 | 	mov	local05, local08
1d438     1B 2D 02 F6 | 	mov	local08, local13
1d43c     14 37 02 F6 | 	mov	local13, local06
1d440     18 29 02 F6 | 	mov	local06, local10
1d444     1B 31 02 F6 | 	mov	local10, local13
1d448     12 37 02 F6 | 	mov	local13, local04
1d44c     15 25 02 F6 | 	mov	local04, local07
1d450     1B 2B 02 F6 | 	mov	local07, local13
1d454                 | LR__2610
1d454     FF 28 0E F2 | 	cmp	local06, #255 wz
1d458     70 01 90 AD |  if_e	jmp	#LR__2625
1d45c     00 28 0E F2 | 	cmp	local06, #0 wz
1d460     AC 01 90 AD |  if_e	jmp	#LR__2627
1d464     17 26 26 F4 | 	bith	local05, #23
1d468                 | LR__2611
1d468     00 30 0E F2 | 	cmp	local10, #0 wz
1d46c     F0 01 90 AD |  if_e	jmp	#LR__2631
1d470     17 2C 26 F4 | 	bith	local08, #23
1d474                 | LR__2612
1d474     7F 28 86 F1 | 	sub	local06, #127
1d478     7F 30 86 F1 | 	sub	local10, #127
1d47c     14 39 02 F6 | 	mov	local14, local06
1d480     18 39 82 F1 | 	sub	local14, local10
1d484     97 14 48 FB | 	callpa	#(@LR__2614-@LR__2613)>>2,fcache_load_ptr_
1d488                 | LR__2613
1d488     20 38 56 F2 | 	cmps	local14, #32 wc
1d48c     20 00 90 CD |  if_b	jmp	#LR__2615
1d490     16 2F 02 F6 | 	mov	local09, local08
1d494     00 32 0E F2 | 	cmp	local11, #0 wz
1d498     6F 32 62 FD | 	wrnz	local11
1d49c     19 2F 42 F5 | 	or	local09, local11
1d4a0     17 33 02 F6 | 	mov	local11, local09
1d4a4     00 2C 06 F6 | 	mov	local08, #0
1d4a8     20 38 86 F1 | 	sub	local14, #32
1d4ac     D8 FF 9F FD | 	jmp	#LR__2613
1d4b0                 | LR__2614
1d4b0                 | LR__2615
1d4b0     00 38 0E F2 | 	cmp	local14, #0 wz
1d4b4     38 00 90 AD |  if_e	jmp	#LR__2616
1d4b8     16 37 02 F6 | 	mov	local13, local08
1d4bc     20 30 06 F6 | 	mov	local10, #32
1d4c0     1C 31 82 F1 | 	sub	local10, local14
1d4c4     18 37 62 F0 | 	shl	local13, local10
1d4c8     19 31 02 F6 | 	mov	local10, local11
1d4cc     20 2E 06 F6 | 	mov	local09, #32
1d4d0     1C 2F 82 F1 | 	sub	local09, local14
1d4d4     17 31 6A F0 | 	shl	local10, local09 wz
1d4d8     1C 33 42 F0 | 	shr	local11, local14
1d4dc     1C 2D 42 F0 | 	shr	local08, local14
1d4e0     1B 33 42 F5 | 	or	local11, local13
1d4e4     00 3A 06 F6 | 	mov	local15, #0
1d4e8     01 3A 06 56 |  if_ne	mov	local15, #1
1d4ec     1D 33 42 F5 | 	or	local11, local15
1d4f0                 | LR__2616
1d4f0     12 3B 02 F6 | 	mov	local15, local04
1d4f4     15 3B 62 F5 | 	xor	local15, local07
1d4f8     01 3A CE F7 | 	test	local15, #1 wz
1d4fc     18 00 90 AD |  if_e	jmp	#LR__2617
1d500     16 2D 22 F6 | 	not	local08, local08
1d504     19 33 22 F6 | 	not	local11, local11
1d508     01 32 0E F1 | 	add	local11, #1 wz
1d50c     00 3A 06 F6 | 	mov	local15, #0
1d510     01 3A 06 A6 |  if_e	mov	local15, #1
1d514     1D 2D 02 F1 | 	add	local08, local15
1d518                 | LR__2617
1d518     19 35 12 F1 | 	add	local12, local11 wc
1d51c     16 27 22 F1 | 	addx	local05, local08
1d520     00 26 56 F2 | 	cmps	local05, #0 wc
1d524     1C 00 90 3D |  if_ae	jmp	#LR__2618
1d528     01 24 66 F5 | 	xor	local04, #1
1d52c     13 27 22 F6 | 	not	local05, local05
1d530     1A 35 22 F6 | 	not	local12, local12
1d534     01 34 0E F1 | 	add	local12, #1 wz
1d538     00 3A 06 F6 | 	mov	local15, #0
1d53c     01 3A 06 A6 |  if_e	mov	local15, #1
1d540     1D 27 02 F1 | 	add	local05, local15
1d544                 | LR__2618
1d544     00 80 00 FF 
1d548     00 26 16 F2 | 	cmp	local05, ##16777216 wc
1d54c     28 00 90 CD |  if_b	jmp	#LR__2619
1d550     01 28 06 F1 | 	add	local06, #1
1d554     1A 39 02 F6 | 	mov	local14, local12
1d558     01 38 06 F5 | 	and	local14, #1
1d55c     01 34 46 F0 | 	shr	local12, #1
1d560     13 3B 02 F6 | 	mov	local15, local05
1d564     1F 3A 66 F0 | 	shl	local15, #31
1d568     1D 35 42 F5 | 	or	local12, local15
1d56c     1C 35 42 F5 | 	or	local12, local14
1d570     01 26 46 F0 | 	shr	local05, #1
1d574     3C 00 90 FD | 	jmp	#LR__2624
1d578                 | LR__2619
1d578     00 40 00 FF 
1d57c     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1d580     30 00 90 3D |  if_ae	jmp	#LR__2623
1d584     00 26 0E F2 | 	cmp	local05, #0 wz
1d588     00 34 0E A2 |  if_e	cmp	local12, #0 wz
1d58c     08 24 46 A5 |  if_e	or	local04, #8
1d590     01 24 26 A5 |  if_e	andn	local04, #1
1d594     1C 00 90 AD |  if_e	jmp	#LR__2622
1d598                 | LR__2620
1d598     00 40 00 FF 
1d59c     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1d5a0     10 00 90 3D |  if_ae	jmp	#LR__2621
1d5a4     1A 35 12 F1 | 	add	local12, local12 wc
1d5a8     13 27 22 F1 | 	addx	local05, local05
1d5ac     01 28 86 F1 | 	sub	local06, #1
1d5b0     E4 FF 9F FD | 	jmp	#LR__2620
1d5b4                 | LR__2621
1d5b4                 | LR__2622
1d5b4                 | LR__2623
1d5b4                 | LR__2624
1d5b4     13 13 02 F6 | 	mov	arg01, local05
1d5b8     1A 15 02 F6 | 	mov	arg02, local12
1d5bc     14 17 02 F6 | 	mov	arg03, local06
1d5c0     12 19 02 F6 | 	mov	arg04, local04
1d5c4     68 34 B0 FD | 	call	#__system__pack_0508
1d5c8     DC 00 90 FD | 	jmp	#LR__2635
1d5cc                 | LR__2625
1d5cc     FF 30 0E F2 | 	cmp	local10, #255 wz
1d5d0     10 00 90 5D |  if_ne	jmp	#LR__2626
1d5d4     12 2B 0A F2 | 	cmp	local07, local04 wz
1d5d8     00 F8 3F 5F 
1d5dc     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1d5e0     C4 00 90 5D |  if_ne	jmp	#LR__2635
1d5e4                 | LR__2626
1d5e4     00 26 0E F2 | 	cmp	local05, #0 wz
1d5e8     00 F8 3F 5F 
1d5ec     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1d5f0     B4 00 90 5D |  if_ne	jmp	#LR__2635
1d5f4     1A 15 02 F6 | 	mov	arg02, local12
1d5f8     14 17 02 F6 | 	mov	arg03, local06
1d5fc     12 19 02 F6 | 	mov	arg04, local04
1d600     02 18 46 F5 | 	or	arg04, #2
1d604     13 13 02 F6 | 	mov	arg01, local05
1d608     24 34 B0 FD | 	call	#__system__pack_0508
1d60c     98 00 90 FD | 	jmp	#LR__2635
1d610                 | LR__2627
1d610     00 26 0E F2 | 	cmp	local05, #0 wz
1d614     28 00 90 AD |  if_e	jmp	#LR__2630
1d618     01 26 66 F0 | 	shl	local05, #1
1d61c     97 0E 48 FB | 	callpa	#(@LR__2629-@LR__2628)>>2,fcache_load_ptr_
1d620                 | LR__2628
1d620     00 40 00 FF 
1d624     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1d628     14 3B 02 C6 |  if_b	mov	local15, local06
1d62c     01 3A 86 C1 |  if_b	sub	local15, #1
1d630     1D 29 02 C6 |  if_b	mov	local06, local15
1d634     01 26 66 C0 |  if_b	shl	local05, #1
1d638     E4 FF 9F CD |  if_b	jmp	#LR__2628
1d63c                 | LR__2629
1d63c     28 FE 9F FD | 	jmp	#LR__2611
1d640                 | LR__2630
1d640     15 25 02 F5 | 	and	local04, local07
1d644     12 19 02 F6 | 	mov	arg04, local04
1d648     08 18 46 F5 | 	or	arg04, #8
1d64c     00 12 06 F6 | 	mov	arg01, #0
1d650     00 14 06 F6 | 	mov	arg02, #0
1d654     00 16 06 F6 | 	mov	arg03, #0
1d658     D4 33 B0 FD | 	call	#__system__pack_0508
1d65c     48 00 90 FD | 	jmp	#LR__2635
1d660                 | LR__2631
1d660     00 2C 0E F2 | 	cmp	local08, #0 wz
1d664     28 00 90 AD |  if_e	jmp	#LR__2634
1d668     01 2C 66 F0 | 	shl	local08, #1
1d66c     97 0E 48 FB | 	callpa	#(@LR__2633-@LR__2632)>>2,fcache_load_ptr_
1d670                 | LR__2632
1d670     00 40 00 FF 
1d674     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
1d678     18 3B 02 C6 |  if_b	mov	local15, local10
1d67c     01 3A 86 C1 |  if_b	sub	local15, #1
1d680     1D 31 02 C6 |  if_b	mov	local10, local15
1d684     01 2C 66 C0 |  if_b	shl	local08, #1
1d688     E4 FF 9F CD |  if_b	jmp	#LR__2632
1d68c                 | LR__2633
1d68c     E4 FD 9F FD | 	jmp	#LR__2612
1d690                 | LR__2634
1d690     7F 28 86 F1 | 	sub	local06, #127
1d694     13 13 02 F6 | 	mov	arg01, local05
1d698     1A 15 02 F6 | 	mov	arg02, local12
1d69c     14 17 02 F6 | 	mov	arg03, local06
1d6a0     12 19 02 F6 | 	mov	arg04, local04
1d6a4     88 33 B0 FD | 	call	#__system__pack_0508
1d6a8                 | LR__2635
1d6a8     A7 F0 03 F6 | 	mov	ptra, fp
1d6ac     B2 00 A0 FD | 	call	#popregs_
1d6b0                 | __system___float_add_ret
1d6b0     2D 00 64 FD | 	ret
1d6b4                 | 
1d6b4                 | __system___float_sqrt
1d6b4     04 4A 05 F6 | 	mov	COUNT_, #4
1d6b8     A8 00 A0 FD | 	call	#pushregs_
1d6bc     09 1F 02 F6 | 	mov	local01, arg01
1d6c0     09 FB 01 F6 | 	mov	result1, arg01
1d6c4     FD 20 02 F6 | 	mov	local02, result1
1d6c8     10 23 02 F6 | 	mov	local03, local02
1d6cc     16 22 46 F7 | 	zerox	local03, #22
1d6d0     10 25 02 F6 | 	mov	local04, local02
1d6d4     01 24 66 F0 | 	shl	local04, #1
1d6d8     18 24 4E F0 | 	shr	local04, #24 wz
1d6dc     1F 20 46 F0 | 	shr	local02, #31
1d6e0     70 00 90 AD |  if_e	jmp	#LR__2641
1d6e4     17 22 26 F4 | 	bith	local03, #23
1d6e8                 | LR__2640
1d6e8     00 20 0E F2 | 	cmp	local02, #0 wz
1d6ec     00 F8 3F 5F 
1d6f0     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1d6f4     88 00 90 5D |  if_ne	jmp	#LR__2644
1d6f8     FF 24 0E F2 | 	cmp	local04, #255 wz
1d6fc     0F FB 01 A6 |  if_e	mov	result1, local01
1d700     7C 00 90 AD |  if_e	jmp	#LR__2644
1d704     7F 24 86 F1 | 	sub	local04, #127
1d708     01 24 CE F7 | 	test	local04, #1 wz
1d70c     01 22 66 50 |  if_ne	shl	local03, #1
1d710     05 22 66 F0 | 	shl	local03, #5
1d714     11 01 38 FD | 	qsqrt	#0, local03
1d718     01 24 86 51 |  if_ne	sub	local04, #1
1d71c     12 25 52 F6 | 	abs	local04, local04 wc
1d720     01 24 46 F0 | 	shr	local04, #1
1d724     12 17 82 F6 | 	negc	arg03, local04
1d728     10 19 02 F6 | 	mov	arg04, local02
1d72c     18 12 62 FD | 	getqx	arg01
1d730     09 15 02 F6 | 	mov	arg02, arg01
1d734     19 14 66 F0 | 	shl	arg02, #25
1d738     07 12 46 F0 | 	shr	arg01, #7
1d73c     00 80 00 FF 
1d740     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
1d744     01 16 06 31 |  if_ae	add	arg03, #1
1d748     01 12 46 30 |  if_ae	shr	arg01, #1
1d74c     E0 32 B0 FD | 	call	#__system__pack_0508
1d750     2C 00 90 FD | 	jmp	#LR__2644
1d754                 | LR__2641
1d754     00 22 0E F2 | 	cmp	local03, #0 wz
1d758     0F FB 01 A6 |  if_e	mov	result1, local01
1d75c     20 00 90 AD |  if_e	jmp	#LR__2644
1d760     01 22 66 F0 | 	shl	local03, #1
1d764     97 0A 48 FB | 	callpa	#(@LR__2643-@LR__2642)>>2,fcache_load_ptr_
1d768                 | LR__2642
1d768     00 40 00 FF 
1d76c     00 22 16 F2 | 	cmp	local03, ##8388608 wc
1d770     01 24 86 C1 |  if_b	sub	local04, #1
1d774     01 22 66 C0 |  if_b	shl	local03, #1
1d778     EC FF 9F CD |  if_b	jmp	#LR__2642
1d77c                 | LR__2643
1d77c     68 FF 9F FD | 	jmp	#LR__2640
1d780                 | LR__2644
1d780     A7 F0 03 F6 | 	mov	ptra, fp
1d784     B2 00 A0 FD | 	call	#popregs_
1d788                 | __system___float_sqrt_ret
1d788     2D 00 64 FD | 	ret
1d78c                 | 
1d78c                 | __system___float_mul
1d78c     0B 4A 05 F6 | 	mov	COUNT_, #11
1d790     A8 00 A0 FD | 	call	#pushregs_
1d794     09 1F 02 F6 | 	mov	local01, arg01
1d798     0A 21 02 F6 | 	mov	local02, arg02
1d79c     0F 23 02 F6 | 	mov	local03, local01
1d7a0     11 25 02 F6 | 	mov	local04, local03
1d7a4     16 24 46 F7 | 	zerox	local04, #22
1d7a8     11 27 02 F6 | 	mov	local05, local03
1d7ac     01 26 66 F0 | 	shl	local05, #1
1d7b0     18 26 46 F0 | 	shr	local05, #24
1d7b4     1F 22 46 F0 | 	shr	local03, #31
1d7b8     10 FB 01 F6 | 	mov	result1, local02
1d7bc     FD 28 02 F6 | 	mov	local06, result1
1d7c0     14 2B 02 F6 | 	mov	local07, local06
1d7c4     16 2A 46 F7 | 	zerox	local07, #22
1d7c8     14 2D 02 F6 | 	mov	local08, local06
1d7cc     01 2C 66 F0 | 	shl	local08, #1
1d7d0     18 2C 46 F0 | 	shr	local08, #24
1d7d4     1F 28 46 F0 | 	shr	local06, #31
1d7d8     14 23 62 F5 | 	xor	local03, local06
1d7dc     FF 26 0E F2 | 	cmp	local05, #255 wz
1d7e0     90 00 90 AD |  if_e	jmp	#LR__2653
1d7e4     FF 2C 0E F2 | 	cmp	local08, #255 wz
1d7e8     D8 00 90 AD |  if_e	jmp	#LR__2655
1d7ec     00 26 0E F2 | 	cmp	local05, #0 wz
1d7f0     0C 01 90 AD |  if_e	jmp	#LR__2656
1d7f4     17 24 26 F4 | 	bith	local04, #23
1d7f8                 | LR__2650
1d7f8     00 2C 0E F2 | 	cmp	local08, #0 wz
1d7fc     44 01 90 AD |  if_e	jmp	#LR__2660
1d800     17 2A 26 F4 | 	bith	local07, #23
1d804                 | LR__2651
1d804     12 21 02 F6 | 	mov	local02, local04
1d808     04 20 66 F0 | 	shl	local02, #4
1d80c     15 29 02 F6 | 	mov	local06, local07
1d810     05 28 66 F0 | 	shl	local06, #5
1d814     14 21 02 FD | 	qmul	local02, local06
1d818     16 27 02 F1 | 	add	local05, local08
1d81c     FE 26 86 F1 | 	sub	local05, #254
1d820     13 2F 02 F6 | 	mov	local09, local05
1d824     04 24 66 F0 | 	shl	local04, #4
1d828     05 2A 66 F0 | 	shl	local07, #5
1d82c     18 30 62 FD | 	getqx	local10
1d830     15 25 02 FD | 	qmul	local04, local07
1d834     19 32 62 FD | 	getqy	local11
1d838     00 80 00 FF 
1d83c     00 32 16 F2 | 	cmp	local11, ##16777216 wc
1d840     18 00 90 CD |  if_b	jmp	#LR__2652
1d844     01 2E 06 F1 | 	add	local09, #1
1d848     01 30 46 F0 | 	shr	local10, #1
1d84c     19 2D 02 F6 | 	mov	local08, local11
1d850     1F 2C 66 F0 | 	shl	local08, #31
1d854     16 31 42 F5 | 	or	local10, local08
1d858     01 32 46 F0 | 	shr	local11, #1
1d85c                 | LR__2652
1d85c     19 13 02 F6 | 	mov	arg01, local11
1d860     18 15 02 F6 | 	mov	arg02, local10
1d864     17 17 02 F6 | 	mov	arg03, local09
1d868     11 19 02 F6 | 	mov	arg04, local03
1d86c     C0 31 B0 FD | 	call	#__system__pack_0508
1d870     10 01 90 FD | 	jmp	#LR__2664
1d874                 | LR__2653
1d874     00 24 0E F2 | 	cmp	local04, #0 wz
1d878     0F FB 01 56 |  if_ne	mov	result1, local01
1d87c     04 01 90 5D |  if_ne	jmp	#LR__2664
1d880     FF 2C 56 F2 | 	cmps	local08, #255 wc
1d884     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
1d888     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
1d88c     18 00 90 4D |  if_c_and_nz	jmp	#LR__2654
1d890     00 F8 3F CF 
1d894     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
1d898     E8 00 90 CD |  if_b	jmp	#LR__2664
1d89c     00 2A 0E F2 | 	cmp	local07, #0 wz
1d8a0     10 FB 01 56 |  if_ne	mov	result1, local02
1d8a4     DC 00 90 5D |  if_ne	jmp	#LR__2664
1d8a8                 | LR__2654
1d8a8     02 22 46 F5 | 	or	local03, #2
1d8ac     00 12 06 F6 | 	mov	arg01, #0
1d8b0     00 14 06 F6 | 	mov	arg02, #0
1d8b4     13 17 02 F6 | 	mov	arg03, local05
1d8b8     11 19 02 F6 | 	mov	arg04, local03
1d8bc     70 31 B0 FD | 	call	#__system__pack_0508
1d8c0     C0 00 90 FD | 	jmp	#LR__2664
1d8c4                 | LR__2655
1d8c4     00 26 0E F2 | 	cmp	local05, #0 wz
1d8c8     00 24 0E A2 |  if_e	cmp	local04, #0 wz
1d8cc     00 F8 3F AF 
1d8d0     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1d8d4     AC 00 90 AD |  if_e	jmp	#LR__2664
1d8d8     00 2A 0E F2 | 	cmp	local07, #0 wz
1d8dc     10 FB 01 56 |  if_ne	mov	result1, local02
1d8e0     A0 00 90 5D |  if_ne	jmp	#LR__2664
1d8e4     16 17 02 F6 | 	mov	arg03, local08
1d8e8     11 19 02 F6 | 	mov	arg04, local03
1d8ec     02 18 46 F5 | 	or	arg04, #2
1d8f0     00 12 06 F6 | 	mov	arg01, #0
1d8f4     00 14 06 F6 | 	mov	arg02, #0
1d8f8     34 31 B0 FD | 	call	#__system__pack_0508
1d8fc     84 00 90 FD | 	jmp	#LR__2664
1d900                 | LR__2656
1d900     00 24 0E F2 | 	cmp	local04, #0 wz
1d904     20 00 90 AD |  if_e	jmp	#LR__2659
1d908     01 24 66 F0 | 	shl	local04, #1
1d90c     97 0A 48 FB | 	callpa	#(@LR__2658-@LR__2657)>>2,fcache_load_ptr_
1d910                 | LR__2657
1d910     00 40 00 FF 
1d914     00 24 16 F2 | 	cmp	local04, ##8388608 wc
1d918     01 26 86 C1 |  if_b	sub	local05, #1
1d91c     01 24 66 C0 |  if_b	shl	local04, #1
1d920     EC FF 9F CD |  if_b	jmp	#LR__2657
1d924                 | LR__2658
1d924     D0 FE 9F FD | 	jmp	#LR__2650
1d928                 | LR__2659
1d928     08 22 46 F5 | 	or	local03, #8
1d92c     00 12 06 F6 | 	mov	arg01, #0
1d930     00 14 06 F6 | 	mov	arg02, #0
1d934     00 16 06 F6 | 	mov	arg03, #0
1d938     11 19 02 F6 | 	mov	arg04, local03
1d93c     F0 30 B0 FD | 	call	#__system__pack_0508
1d940     40 00 90 FD | 	jmp	#LR__2664
1d944                 | LR__2660
1d944     00 2A 0E F2 | 	cmp	local07, #0 wz
1d948     20 00 90 AD |  if_e	jmp	#LR__2663
1d94c     01 2A 66 F0 | 	shl	local07, #1
1d950     97 0A 48 FB | 	callpa	#(@LR__2662-@LR__2661)>>2,fcache_load_ptr_
1d954                 | LR__2661
1d954     00 40 00 FF 
1d958     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
1d95c     01 2C 86 C1 |  if_b	sub	local08, #1
1d960     01 2A 66 C0 |  if_b	shl	local07, #1
1d964     EC FF 9F CD |  if_b	jmp	#LR__2661
1d968                 | LR__2662
1d968     98 FE 9F FD | 	jmp	#LR__2651
1d96c                 | LR__2663
1d96c     08 22 46 F5 | 	or	local03, #8
1d970     00 12 06 F6 | 	mov	arg01, #0
1d974     00 14 06 F6 | 	mov	arg02, #0
1d978     00 16 06 F6 | 	mov	arg03, #0
1d97c     11 19 02 F6 | 	mov	arg04, local03
1d980     AC 30 B0 FD | 	call	#__system__pack_0508
1d984                 | LR__2664
1d984     A7 F0 03 F6 | 	mov	ptra, fp
1d988     B2 00 A0 FD | 	call	#popregs_
1d98c                 | __system___float_mul_ret
1d98c     2D 00 64 FD | 	ret
1d990                 | 
1d990                 | __system___float_div
1d990     0E 4A 05 F6 | 	mov	COUNT_, #14
1d994     A8 00 A0 FD | 	call	#pushregs_
1d998     09 23 02 F6 | 	mov	local03, arg01
1d99c     0A 25 02 F6 | 	mov	local04, arg02
1d9a0     11 27 02 F6 | 	mov	local05, local03
1d9a4     13 29 02 F6 | 	mov	local06, local05
1d9a8     16 28 46 F7 | 	zerox	local06, #22
1d9ac     13 2B 02 F6 | 	mov	local07, local05
1d9b0     01 2A 66 F0 | 	shl	local07, #1
1d9b4     18 2A 46 F0 | 	shr	local07, #24
1d9b8     1F 26 46 F0 | 	shr	local05, #31
1d9bc     12 FB 01 F6 | 	mov	result1, local04
1d9c0     FD 2C 02 F6 | 	mov	local08, result1
1d9c4     16 2F 02 F6 | 	mov	local09, local08
1d9c8     16 2E 46 F7 | 	zerox	local09, #22
1d9cc     16 31 02 F6 | 	mov	local10, local08
1d9d0     01 30 66 F0 | 	shl	local10, #1
1d9d4     18 30 46 F0 | 	shr	local10, #24
1d9d8     1F 2C 46 F0 | 	shr	local08, #31
1d9dc     16 27 62 F5 | 	xor	local05, local08
1d9e0     FF 2A 0E F2 | 	cmp	local07, #255 wz
1d9e4     D4 00 90 AD |  if_e	jmp	#LR__2675
1d9e8     FF 30 0E F2 | 	cmp	local10, #255 wz
1d9ec     04 01 90 AD |  if_e	jmp	#LR__2676
1d9f0     00 2A 0E F2 | 	cmp	local07, #0 wz
1d9f4     24 01 90 AD |  if_e	jmp	#LR__2677
1d9f8     17 28 26 F4 | 	bith	local06, #23
1d9fc                 | LR__2670
1d9fc     00 30 0E F2 | 	cmp	local10, #0 wz
1da00     70 01 90 AD |  if_e	jmp	#LR__2681
1da04     17 2E 26 F4 | 	bith	local09, #23
1da08                 | LR__2671
1da08     18 2B 82 F1 | 	sub	local07, local10
1da0c     15 33 02 F6 | 	mov	local11, local07
1da10     14 13 02 F6 | 	mov	arg01, local06
1da14     02 12 46 F0 | 	shr	arg01, #2
1da18     1E 28 66 F0 | 	shl	local06, #30
1da1c     14 15 02 F6 | 	mov	arg02, local06
1da20     17 17 02 F6 | 	mov	arg03, local09
1da24     28 12 62 FD | 	setq	arg01
1da28     0B 15 12 FD | 	qdiv	arg02, arg03
1da2c     00 34 06 F6 | 	mov	local12, #0
1da30     18 1E 62 FD | 	getqx	local01
1da34     19 FC 61 FD | 	getqy	result2
1da38     FE 20 02 F6 | 	mov	local02, result2
1da3c     0F 37 02 F6 | 	mov	local13, local01
1da40     00 20 4E F2 | 	cmps	local02, #0 wz
1da44     1B 39 02 F6 | 	mov	local14, local13
1da48     19 38 66 F0 | 	shl	local14, #25
1da4c     01 34 06 56 |  if_ne	mov	local12, #1
1da50     1A 39 42 F5 | 	or	local14, local12
1da54     07 36 46 F0 | 	shr	local13, #7
1da58     00 80 00 FF 
1da5c     00 36 16 F2 | 	cmp	local13, ##16777216 wc
1da60     1C 00 90 CD |  if_b	jmp	#LR__2672
1da64     01 32 06 F1 | 	add	local11, #1
1da68     01 38 46 F0 | 	shr	local14, #1
1da6c     1B 35 02 F6 | 	mov	local12, local13
1da70     1F 34 66 F0 | 	shl	local12, #31
1da74     1A 39 42 F5 | 	or	local14, local12
1da78     01 36 46 F0 | 	shr	local13, #1
1da7c     24 00 90 FD | 	jmp	#LR__2674
1da80                 | LR__2672
1da80     00 40 00 FF 
1da84     00 36 16 F2 | 	cmp	local13, ##8388608 wc
1da88     18 00 90 3D |  if_ae	jmp	#LR__2673
1da8c     01 32 86 F1 | 	sub	local11, #1
1da90     01 36 66 F0 | 	shl	local13, #1
1da94     1C 35 02 F6 | 	mov	local12, local14
1da98     1F 34 46 F0 | 	shr	local12, #31
1da9c     1A 37 42 F5 | 	or	local13, local12
1daa0     01 38 66 F0 | 	shl	local14, #1
1daa4                 | LR__2673
1daa4                 | LR__2674
1daa4     1B 13 02 F6 | 	mov	arg01, local13
1daa8     1C 15 02 F6 | 	mov	arg02, local14
1daac     19 17 02 F6 | 	mov	arg03, local11
1dab0     13 19 02 F6 | 	mov	arg04, local05
1dab4     78 2F B0 FD | 	call	#__system__pack_0508
1dab8     F8 00 90 FD | 	jmp	#LR__2685
1dabc                 | LR__2675
1dabc     00 28 0E F2 | 	cmp	local06, #0 wz
1dac0     11 FB 01 56 |  if_ne	mov	result1, local03
1dac4     EC 00 90 5D |  if_ne	jmp	#LR__2685
1dac8     FF 30 0E F2 | 	cmp	local10, #255 wz
1dacc     00 F8 3F AF 
1dad0     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1dad4     DC 00 90 AD |  if_e	jmp	#LR__2685
1dad8     02 26 46 F5 | 	or	local05, #2
1dadc     00 12 06 F6 | 	mov	arg01, #0
1dae0     00 14 06 F6 | 	mov	arg02, #0
1dae4     15 17 02 F6 | 	mov	arg03, local07
1dae8     13 19 02 F6 | 	mov	arg04, local05
1daec     40 2F B0 FD | 	call	#__system__pack_0508
1daf0     C0 00 90 FD | 	jmp	#LR__2685
1daf4                 | LR__2676
1daf4     00 2E 0E F2 | 	cmp	local09, #0 wz
1daf8     12 FB 01 56 |  if_ne	mov	result1, local04
1dafc     B4 00 90 5D |  if_ne	jmp	#LR__2685
1db00     13 19 02 F6 | 	mov	arg04, local05
1db04     08 18 46 F5 | 	or	arg04, #8
1db08     00 12 06 F6 | 	mov	arg01, #0
1db0c     00 14 06 F6 | 	mov	arg02, #0
1db10     00 16 06 F6 | 	mov	arg03, #0
1db14     18 2F B0 FD | 	call	#__system__pack_0508
1db18     98 00 90 FD | 	jmp	#LR__2685
1db1c                 | LR__2677
1db1c     00 28 0E F2 | 	cmp	local06, #0 wz
1db20     20 00 90 AD |  if_e	jmp	#LR__2680
1db24     01 28 66 F0 | 	shl	local06, #1
1db28     97 0A 48 FB | 	callpa	#(@LR__2679-@LR__2678)>>2,fcache_load_ptr_
1db2c                 | LR__2678
1db2c     00 40 00 FF 
1db30     00 28 16 F2 | 	cmp	local06, ##8388608 wc
1db34     01 2A 86 C1 |  if_b	sub	local07, #1
1db38     01 28 66 C0 |  if_b	shl	local06, #1
1db3c     EC FF 9F CD |  if_b	jmp	#LR__2678
1db40                 | LR__2679
1db40     B8 FE 9F FD | 	jmp	#LR__2670
1db44                 | LR__2680
1db44     00 30 0E F2 | 	cmp	local10, #0 wz
1db48     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
1db4c     00 F8 3F AF 
1db50     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1db54     5C 00 90 AD |  if_e	jmp	#LR__2685
1db58     13 19 02 F6 | 	mov	arg04, local05
1db5c     08 18 46 F5 | 	or	arg04, #8
1db60     00 12 06 F6 | 	mov	arg01, #0
1db64     00 14 06 F6 | 	mov	arg02, #0
1db68     00 16 06 F6 | 	mov	arg03, #0
1db6c     C0 2E B0 FD | 	call	#__system__pack_0508
1db70     40 00 90 FD | 	jmp	#LR__2685
1db74                 | LR__2681
1db74     00 2E 0E F2 | 	cmp	local09, #0 wz
1db78     20 00 90 AD |  if_e	jmp	#LR__2684
1db7c     01 2E 66 F0 | 	shl	local09, #1
1db80     97 0A 48 FB | 	callpa	#(@LR__2683-@LR__2682)>>2,fcache_load_ptr_
1db84                 | LR__2682
1db84     00 40 00 FF 
1db88     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
1db8c     01 30 86 C1 |  if_b	sub	local10, #1
1db90     01 2E 66 C0 |  if_b	shl	local09, #1
1db94     EC FF 9F CD |  if_b	jmp	#LR__2682
1db98                 | LR__2683
1db98     6C FE 9F FD | 	jmp	#LR__2671
1db9c                 | LR__2684
1db9c     02 26 46 F5 | 	or	local05, #2
1dba0     00 12 06 F6 | 	mov	arg01, #0
1dba4     00 14 06 F6 | 	mov	arg02, #0
1dba8     00 16 06 F6 | 	mov	arg03, #0
1dbac     13 19 02 F6 | 	mov	arg04, local05
1dbb0     7C 2E B0 FD | 	call	#__system__pack_0508
1dbb4                 | LR__2685
1dbb4     A7 F0 03 F6 | 	mov	ptra, fp
1dbb8     B2 00 A0 FD | 	call	#popregs_
1dbbc                 | __system___float_div_ret
1dbbc     2D 00 64 FD | 	ret
1dbc0                 | 
1dbc0                 | __system___float_cmp
1dbc0     00 C0 3F FF 
1dbc4     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
1dbc8     00 C0 3F CF 
1dbcc     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
1dbd0     0B FB 01 36 |  if_ae	mov	result1, arg03
1dbd4     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
1dbd8     00 C0 7F FF 
1dbdc     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
1dbe0     00 C0 7F CF 
1dbe4     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
1dbe8     0B FB 01 36 |  if_ae	mov	result1, arg03
1dbec     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
1dbf0     00 12 56 F2 | 	cmps	arg01, #0 wc
1dbf4     2C 00 90 3D |  if_ae	jmp	#LR__2690
1dbf8     00 14 56 F2 | 	cmps	arg02, #0 wc
1dbfc     0A FB 01 C6 |  if_b	mov	result1, arg02
1dc00     09 FB 81 C1 |  if_b	sub	result1, arg01
1dc04     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
1dc08     00 14 0E F2 | 	cmp	arg02, #0 wz
1dc0c     00 00 40 AF 
1dc10     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
1dc14     00 FA 05 A6 |  if_e	mov	result1, #0
1dc18     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
1dc1c     01 FA 65 F6 | 	neg	result1, #1
1dc20     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
1dc24                 | LR__2690
1dc24     00 14 56 F2 | 	cmps	arg02, #0 wc
1dc28     1C 00 90 3D |  if_ae	jmp	#LR__2691
1dc2c     00 12 0E F2 | 	cmp	arg01, #0 wz
1dc30     00 00 40 AF 
1dc34     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
1dc38     00 FA 05 A6 |  if_e	mov	result1, #0
1dc3c     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
1dc40     01 FA 05 F6 | 	mov	result1, #1
1dc44     08 00 90 FD | 	jmp	#__system___float_cmp_ret
1dc48                 | LR__2691
1dc48     0A 13 82 F1 | 	sub	arg01, arg02
1dc4c     09 FB 01 F6 | 	mov	result1, arg01
1dc50                 | __system___float_cmp_ret
1dc50     2D 00 64 FD | 	ret
1dc54                 | 
1dc54                 | __system___float_tointeger
1dc54     02 4A 05 F6 | 	mov	COUNT_, #2
1dc58     A8 00 A0 FD | 	call	#pushregs_
1dc5c     50 00 B0 FD | 	call	#__system___float_Unpack
1dc60     FF FF 7F FF 
1dc64     FF FD 55 F2 | 	cmps	result2, ##-1 wc
1dc68     34 00 90 CD |  if_b	jmp	#LR__2700
1dc6c     1F FC 55 F2 | 	cmps	result2, #31 wc
1dc70     2C 00 90 3D |  if_ae	jmp	#LR__2700
1dc74     02 FE 65 F0 | 	shl	result3, #2
1dc78     1E 1E 06 F6 | 	mov	local01, #30
1dc7c     FE 1E 82 F1 | 	sub	local01, result2
1dc80     0F FF 41 F0 | 	shr	result3, local01
1dc84     FF 20 02 F6 | 	mov	local02, result3
1dc88     0A 21 02 F1 | 	add	local02, arg02
1dc8c     01 20 46 F0 | 	shr	local02, #1
1dc90     00 FA 0D F2 | 	cmp	result1, #0 wz
1dc94     10 21 62 56 |  if_ne	neg	local02, local02
1dc98     10 FB 01 F6 | 	mov	result1, local02
1dc9c     04 00 90 FD | 	jmp	#LR__2701
1dca0                 | LR__2700
1dca0     00 FA 05 F6 | 	mov	result1, #0
1dca4                 | LR__2701
1dca4     A7 F0 03 F6 | 	mov	ptra, fp
1dca8     B2 00 A0 FD | 	call	#popregs_
1dcac                 | __system___float_tointeger_ret
1dcac     2D 00 64 FD | 	ret
1dcb0                 | 
1dcb0                 | __system___float_Unpack
1dcb0     09 01 02 F6 | 	mov	_var01, arg01
1dcb4     1F 00 46 F0 | 	shr	_var01, #31
1dcb8     09 03 02 F6 | 	mov	_var02, arg01
1dcbc     01 02 66 F0 | 	shl	_var02, #1
1dcc0     18 02 4E F0 | 	shr	_var02, #24 wz
1dcc4     17 13 06 F4 | 	bitl	arg01, #279
1dcc8     06 12 66 50 |  if_ne	shl	arg01, #6
1dccc     1D 12 26 54 |  if_ne	bith	arg01, #29
1dcd0     1C 00 90 5D |  if_ne	jmp	#LR__2710
1dcd4     09 05 92 F7 | 	encod	_var03, arg01 wc
1dcd8     01 04 06 C1 |  if_b	add	_var03, #1
1dcdc     17 04 86 F1 | 	sub	_var03, #23
1dce0     02 03 02 F6 | 	mov	_var02, _var03
1dce4     07 FC 05 F6 | 	mov	result2, #7
1dce8     02 FD 81 F1 | 	sub	result2, _var03
1dcec     FE 12 62 F0 | 	shl	arg01, result2
1dcf0                 | LR__2710
1dcf0     7F 02 86 F1 | 	sub	_var02, #127
1dcf4     09 FF 01 F6 | 	mov	result3, arg01
1dcf8     00 FB 01 F6 | 	mov	result1, _var01
1dcfc     01 FD 01 F6 | 	mov	result2, _var02
1dd00                 | __system___float_Unpack_ret
1dd00     2D 00 64 FD | 	ret
1dd04                 | 
1dd04                 | __system___float_Pack
1dd04     00 00 06 F6 | 	mov	_var01, #0
1dd08     00 16 0E F2 | 	cmp	arg03, #0 wz
1dd0c     8C 00 90 AD |  if_e	jmp	#LR__2721
1dd10     0B 03 92 F7 | 	encod	_var02, arg03 wc
1dd14     01 02 06 C1 |  if_b	add	_var02, #1
1dd18     21 00 06 F6 | 	mov	_var01, #33
1dd1c     01 01 82 F1 | 	sub	_var01, _var02
1dd20     00 17 62 F0 | 	shl	arg03, _var01
1dd24     03 02 06 F6 | 	mov	_var02, #3
1dd28     00 03 82 F1 | 	sub	_var02, _var01
1dd2c     01 15 02 F1 | 	add	arg02, _var02
1dd30     0A 05 02 F6 | 	mov	_var03, arg02
1dd34     00 17 06 F1 | 	add	arg03, #256
1dd38     0B 03 02 F6 | 	mov	_var02, arg03
1dd3c     FF 02 2E F5 | 	andn	_var02, #255 wz
1dd40     01 04 06 A1 |  if_e	add	_var03, #1
1dd44     7F 04 06 F1 | 	add	_var03, #127
1dd48     FF FF 7F FF 
1dd4c     E9 05 46 F3 | 	fges	_var03, ##-23
1dd50     FF 04 66 F3 | 	fles	_var03, #255
1dd54     01 04 56 F2 | 	cmps	_var03, #1 wc
1dd58     1C 00 90 3D |  if_ae	jmp	#LR__2720
1dd5c     01 16 46 F0 | 	shr	arg03, #1
1dd60     1F 02 C6 F9 | 	decod	_var02, #31
1dd64     0B 03 02 F1 | 	add	_var02, arg03
1dd68     02 05 62 F6 | 	neg	_var03, _var03
1dd6c     02 03 42 F0 | 	shr	_var02, _var03
1dd70     01 17 02 F6 | 	mov	arg03, _var02
1dd74     00 04 06 F6 | 	mov	_var03, #0
1dd78                 | LR__2720
1dd78     09 FB 01 F6 | 	mov	result1, arg01
1dd7c     1F FA 65 F0 | 	shl	result1, #31
1dd80     02 03 02 F6 | 	mov	_var02, _var03
1dd84     17 02 66 F0 | 	shl	_var02, #23
1dd88     01 FB 41 F5 | 	or	result1, _var02
1dd8c     0B 07 02 F6 | 	mov	_var04, arg03
1dd90     09 06 46 F0 | 	shr	_var04, #9
1dd94     03 FB 41 F5 | 	or	result1, _var04
1dd98     04 00 90 FD | 	jmp	#__system___float_Pack_ret
1dd9c                 | LR__2721
1dd9c     00 FB 01 F6 | 	mov	result1, _var01
1dda0                 | __system___float_Pack_ret
1dda0     2D 00 64 FD | 	ret
1dda4                 | 
1dda4                 | __system___basic_print_float
1dda4     05 4A 05 F6 | 	mov	COUNT_, #5
1dda8     A8 00 A0 FD | 	call	#pushregs_
1ddac     09 1F 02 F6 | 	mov	local01, arg01
1ddb0     0A 21 02 F6 | 	mov	local02, arg02
1ddb4     0B 23 0A F6 | 	mov	local03, arg03 wz
1ddb8     0C 25 02 F6 | 	mov	local04, arg04
1ddbc     14 00 90 5D |  if_ne	jmp	#LR__2730
1ddc0     23 24 0E F2 | 	cmp	local04, #35 wz
1ddc4     80 02 10 AF 
1ddc8     00 26 06 A6 |  if_e	mov	local05, ##537198592
1ddcc     1D 26 C6 59 |  if_ne	decod	local05, #29
1ddd0     13 23 02 F6 | 	mov	local03, local05
1ddd4                 | LR__2730
1ddd4     0F 13 02 F6 | 	mov	arg01, local01
1ddd8     3C 27 B0 FD | 	call	#__system___gettxfunc
1dddc     FD 26 0A F6 | 	mov	local05, result1 wz
1dde0     00 FA 05 A6 |  if_e	mov	result1, #0
1dde4     13 13 02 56 |  if_ne	mov	arg01, local05
1dde8     11 15 02 56 |  if_ne	mov	arg02, local03
1ddec     10 17 02 56 |  if_ne	mov	arg03, local02
1ddf0     12 19 02 56 |  if_ne	mov	arg04, local04
1ddf4     8C DF BF 5D |  if_ne	call	#__system___fmtfloat
1ddf8     A7 F0 03 F6 | 	mov	ptra, fp
1ddfc     B2 00 A0 FD | 	call	#popregs_
1de00                 | __system___basic_print_float_ret
1de00     2D 00 64 FD | 	ret
1de04                 | 
1de04                 | __system____builtin_atoi
1de04     07 4A 05 F6 | 	mov	COUNT_, #7
1de08     A8 00 A0 FD | 	call	#pushregs_
1de0c                 | __system____builtin_atoi_enter
1de0c     09 1F 02 F6 | 	mov	local01, arg01
1de10     0A 21 02 F6 | 	mov	local02, arg02
1de14     00 22 06 F6 | 	mov	local03, #0
1de18     00 24 06 F6 | 	mov	local04, #0
1de1c     00 26 06 F6 | 	mov	local05, #0
1de20     97 08 48 FB | 	callpa	#(@LR__2741-@LR__2740)>>2,fcache_load_ptr_
1de24                 | LR__2740
1de24     0F 29 C2 FA | 	rdbyte	local06, local01
1de28     20 28 0E F2 | 	cmp	local06, #32 wz
1de2c     01 1E 06 A1 |  if_e	add	local01, #1
1de30     F0 FF 9F AD |  if_e	jmp	#LR__2740
1de34                 | LR__2741
1de34     0F 2B C2 FA | 	rdbyte	local07, local01
1de38                 | LR__2742
1de38     2D 2A 0E F2 | 	cmp	local07, #45 wz
1de3c     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
1de40     18 00 90 5D |  if_ne	jmp	#LR__2743
1de44     01 1E 06 F1 | 	add	local01, #1
1de48     2D 2A 0E F2 | 	cmp	local07, #45 wz
1de4c     01 28 06 A6 |  if_e	mov	local06, #1
1de50     14 27 C2 A2 |  if_e	subr	local05, local06
1de54     0F 2B C2 FA | 	rdbyte	local07, local01
1de58     DC FF 9F FD | 	jmp	#LR__2742
1de5c                 | LR__2743
1de5c     97 48 48 FB | 	callpa	#(@LR__2751-@LR__2744)>>2,fcache_load_ptr_
1de60                 | LR__2744
1de60                 | LR__2745
1de60     0F 2B C2 FA | 	rdbyte	local07, local01
1de64     5F 2A 0E F2 | 	cmp	local07, #95 wz
1de68     01 1E 06 F1 | 	add	local01, #1
1de6c     F0 FF 9F AD |  if_e	jmp	#LR__2745
1de70     30 2A 0E F2 | 	cmp	local07, #48 wz
1de74     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
1de78     00 24 06 A6 |  if_e	mov	local04, #0
1de7c     60 00 90 AD |  if_e	jmp	#LR__2750
1de80     31 2A 56 F2 | 	cmps	local07, #49 wc
1de84     18 00 90 CD |  if_b	jmp	#LR__2746
1de88     3A 2A 56 F2 | 	cmps	local07, #58 wc
1de8c     15 25 02 C6 |  if_b	mov	local04, local07
1de90     30 24 86 C1 |  if_b	sub	local04, #48
1de94     00 20 0E C2 |  if_b	cmp	local02, #0 wz
1de98     0A 20 06 86 |  if_c_and_z	mov	local02, #10
1de9c     40 00 90 CD |  if_b	jmp	#LR__2749
1dea0                 | LR__2746
1dea0     0B 20 56 F2 | 	cmps	local02, #11 wc
1dea4     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
1dea8     14 00 90 CD |  if_b	jmp	#LR__2747
1deac     67 2A 56 F2 | 	cmps	local07, #103 wc
1deb0     61 2A 86 C1 |  if_b	sub	local07, #97
1deb4     0A 24 06 C6 |  if_b	mov	local04, #10
1deb8     15 25 02 C1 |  if_b	add	local04, local07
1debc     20 00 90 CD |  if_b	jmp	#LR__2748
1dec0                 | LR__2747
1dec0     0B 20 56 F2 | 	cmps	local02, #11 wc
1dec4     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
1dec8     24 00 90 CD |  if_b	jmp	#LR__2752
1decc     47 2A 56 F2 | 	cmps	local07, #71 wc
1ded0     41 2A 86 C1 |  if_b	sub	local07, #65
1ded4     0A 24 06 C6 |  if_b	mov	local04, #10
1ded8     15 25 02 C1 |  if_b	add	local04, local07
1dedc     10 00 90 3D |  if_ae	jmp	#LR__2752
1dee0                 | LR__2748
1dee0                 | LR__2749
1dee0                 | LR__2750
1dee0     11 21 02 FD | 	qmul	local02, local03
1dee4     18 22 62 FD | 	getqx	local03
1dee8     12 23 02 F1 | 	add	local03, local04
1deec     70 FF 9F FD | 	jmp	#LR__2744
1def0                 | LR__2751
1def0                 | LR__2752
1def0     00 20 0E F2 | 	cmp	local02, #0 wz
1def4     64 00 90 5D |  if_ne	jmp	#LR__2758
1def8     78 2A 0E F2 | 	cmp	local07, #120 wz
1defc     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
1df00     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
1df04     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
1df08     14 00 90 5D |  if_ne	jmp	#LR__2753
1df0c     0F 13 02 F6 | 	mov	arg01, local01
1df10     10 14 06 F6 | 	mov	arg02, #16
1df14     EC FE BF FD | 	call	#__system____builtin_atoi
1df18     FD 22 02 F6 | 	mov	local03, result1
1df1c     3C 00 90 FD | 	jmp	#LR__2757
1df20                 | LR__2753
1df20     62 2A 0E F2 | 	cmp	local07, #98 wz
1df24     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
1df28     14 00 90 5D |  if_ne	jmp	#LR__2754
1df2c     0F 13 02 F6 | 	mov	arg01, local01
1df30     02 14 06 F6 | 	mov	arg02, #2
1df34     CC FE BF FD | 	call	#__system____builtin_atoi
1df38     FD 22 02 F6 | 	mov	local03, result1
1df3c     1C 00 90 FD | 	jmp	#LR__2756
1df40                 | LR__2754
1df40     6F 2A 0E F2 | 	cmp	local07, #111 wz
1df44     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
1df48     10 00 90 5D |  if_ne	jmp	#LR__2755
1df4c     0F 13 02 F6 | 	mov	arg01, local01
1df50     08 14 06 F6 | 	mov	arg02, #8
1df54     AC FE BF FD | 	call	#__system____builtin_atoi
1df58     FD 22 02 F6 | 	mov	local03, result1
1df5c                 | LR__2755
1df5c                 | LR__2756
1df5c                 | LR__2757
1df5c                 | LR__2758
1df5c     00 26 0E F2 | 	cmp	local05, #0 wz
1df60     11 23 62 56 |  if_ne	neg	local03, local03
1df64     11 FB 01 F6 | 	mov	result1, local03
1df68     A7 F0 03 F6 | 	mov	ptra, fp
1df6c     B2 00 A0 FD | 	call	#popregs_
1df70                 | __system____builtin_atoi_ret
1df70     2D 00 64 FD | 	ret
1df74                 | 
1df74                 | __system____builtin_atof
1df74     07 4A 05 F6 | 	mov	COUNT_, #7
1df78     A8 00 A0 FD | 	call	#pushregs_
1df7c     09 1F 02 F6 | 	mov	local01, arg01
1df80     00 20 06 F6 | 	mov	local02, #0
1df84     00 22 06 F6 | 	mov	local03, #0
1df88     00 24 06 F6 | 	mov	local04, #0
1df8c     00 26 06 F6 | 	mov	local05, #0
1df90     97 08 48 FB | 	callpa	#(@LR__2761-@LR__2760)>>2,fcache_load_ptr_
1df94                 | LR__2760
1df94     0F 17 C2 FA | 	rdbyte	arg03, local01
1df98     20 16 0E F2 | 	cmp	arg03, #32 wz
1df9c     01 1E 06 A1 |  if_e	add	local01, #1
1dfa0     F0 FF 9F AD |  if_e	jmp	#LR__2760
1dfa4                 | LR__2761
1dfa4     0F 29 C2 FA | 	rdbyte	local06, local01
1dfa8                 | LR__2762
1dfa8     2B 28 0E F2 | 	cmp	local06, #43 wz
1dfac     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
1dfb0     14 00 90 5D |  if_ne	jmp	#LR__2763
1dfb4     2D 28 0E F2 | 	cmp	local06, #45 wz
1dfb8     1F 24 E6 A4 |  if_e	bitnot	local04, #31
1dfbc     01 1E 06 F1 | 	add	local01, #1
1dfc0     0F 29 C2 FA | 	rdbyte	local06, local01
1dfc4     E0 FF 9F FD | 	jmp	#LR__2762
1dfc8                 | LR__2763
1dfc8                 | LR__2764
1dfc8     97 08 48 FB | 	callpa	#(@LR__2766-@LR__2765)>>2,fcache_load_ptr_
1dfcc                 | LR__2765
1dfcc     0F 29 C2 FA | 	rdbyte	local06, local01
1dfd0     5F 28 0E F2 | 	cmp	local06, #95 wz
1dfd4     01 1E 06 F1 | 	add	local01, #1
1dfd8     F0 FF 9F AD |  if_e	jmp	#LR__2765
1dfdc                 | LR__2766
1dfdc     00 28 0E F2 | 	cmp	local06, #0 wz
1dfe0     5C 00 90 AD |  if_e	jmp	#LR__2768
1dfe4     30 28 56 F2 | 	cmps	local06, #48 wc
1dfe8     44 00 90 CD |  if_b	jmp	#LR__2767
1dfec     3A 28 56 F2 | 	cmps	local06, #58 wc
1dff0     3C 00 90 3D |  if_ae	jmp	#LR__2767
1dff4     10 13 02 F6 | 	mov	arg01, local02
1dff8     00 90 20 FF 
1dffc     00 14 06 F6 | 	mov	arg02, ##1092616192
1e000     88 F7 BF FD | 	call	#__system___float_mul
1e004     FD 20 02 F6 | 	mov	local02, result1
1e008     30 28 86 F1 | 	sub	local06, #48
1e00c     14 13 02 F6 | 	mov	arg01, local06
1e010     74 F3 BF FD | 	call	#__system___float_fromuns
1e014     FD 14 02 F6 | 	mov	arg02, result1
1e018     10 13 02 F6 | 	mov	arg01, local02
1e01c     9C F3 BF FD | 	call	#__system___float_add
1e020     FD 20 02 F6 | 	mov	local02, result1
1e024     00 26 0E F2 | 	cmp	local05, #0 wz
1e028     01 22 86 51 |  if_ne	sub	local03, #1
1e02c     98 FF 9F FD | 	jmp	#LR__2764
1e030                 | LR__2767
1e030     2E 28 0E F2 | 	cmp	local06, #46 wz
1e034     00 26 0E A2 |  if_e	cmp	local05, #0 wz
1e038     01 26 06 A6 |  if_e	mov	local05, #1
1e03c     88 FF 9F AD |  if_e	jmp	#LR__2764
1e040                 | LR__2768
1e040     45 28 0E F2 | 	cmp	local06, #69 wz
1e044     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
1e048     18 00 90 5D |  if_ne	jmp	#LR__2769
1e04c     0F 13 02 F6 | 	mov	arg01, local01
1e050     00 14 06 F6 | 	mov	arg02, #0
1e054     AC FD BF FD | 	call	#__system____builtin_atoi
1e058     11 FB 01 F1 | 	add	result1, local03
1e05c     FD 2A 02 F6 | 	mov	local07, result1
1e060     04 00 90 FD | 	jmp	#LR__2770
1e064                 | LR__2769
1e064     11 2B 02 F6 | 	mov	local07, local03
1e068                 | LR__2770
1e068     15 17 02 F6 | 	mov	arg03, local07
1e06c     10 13 02 F6 | 	mov	arg01, local02
1e070     00 90 20 FF 
1e074     00 14 06 F6 | 	mov	arg02, ##1092616192
1e078     BC 06 B0 FD | 	call	#__system___float_pow_n
1e07c     12 FB 61 F5 | 	xor	result1, local04
1e080     A7 F0 03 F6 | 	mov	ptra, fp
1e084     B2 00 A0 FD | 	call	#popregs_
1e088                 | __system____builtin_atof_ret
1e088     2D 00 64 FD | 	ret
1e08c                 | 
1e08c                 | __system____builtin_ilogb
1e08c     20 FC BF FD | 	call	#__system___float_Unpack
1e090     00 FE 0D F2 | 	cmp	result3, #0 wz
1e094     00 00 40 AF 
1e098     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
1e09c     24 00 90 AD |  if_e	jmp	#LR__2781
1e0a0     80 FC 0D F2 | 	cmp	result2, #128 wz
1e0a4     18 00 90 5D |  if_ne	jmp	#LR__2780
1e0a8     00 00 10 FF 
1e0ac     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
1e0b0     1E FA CD A9 |  if_e	bmask	result1, #30
1e0b4     0C 00 90 AD |  if_e	jmp	#LR__2781
1e0b8     1F FA C5 F9 | 	decod	result1, #31
1e0bc     04 00 90 FD | 	jmp	#LR__2781
1e0c0                 | LR__2780
1e0c0     FE FA 01 F6 | 	mov	result1, result2
1e0c4                 | LR__2781
1e0c4                 | __system____builtin_ilogb_ret
1e0c4     2D 00 64 FD | 	ret
1e0c8                 | 
1e0c8                 | __system____builtin_sinf
1e0c8     03 4A 05 F6 | 	mov	COUNT_, #3
1e0cc     A8 00 A0 FD | 	call	#pushregs_
1e0d0     09 1F 02 F6 | 	mov	local01, arg01
1e0d4     87 64 20 FF 
1e0d8     DB 15 06 F6 | 	mov	arg02, ##1086918619
1e0dc     B0 F8 BF FD | 	call	#__system___float_div
1e0e0     FD 12 02 F6 | 	mov	arg01, result1
1e0e4     00 14 06 F6 | 	mov	arg02, #0
1e0e8     68 FB BF FD | 	call	#__system___float_tointeger
1e0ec     FD 16 0A F6 | 	mov	arg03, result1 wz
1e0f0     44 00 90 AD |  if_e	jmp	#LR__2790
1e0f4     0B 13 52 F6 | 	abs	arg01, arg03 wc
1e0f8     1F 20 C6 C9 |  if_b	decod	local02, #31
1e0fc     00 20 06 36 |  if_ae	mov	local02, #0
1e100     84 F2 BF FD | 	call	#__system___float_fromuns
1e104     10 FB 61 F5 | 	xor	result1, local02
1e108     FD 12 02 F6 | 	mov	arg01, result1
1e10c     1E 14 C6 F9 | 	decod	arg02, #30
1e110     78 F6 BF FD | 	call	#__system___float_mul
1e114     FD 12 02 F6 | 	mov	arg01, result1
1e118     87 24 20 FF 
1e11c     DB 15 06 F6 | 	mov	arg02, ##1078530011
1e120     68 F6 BF FD | 	call	#__system___float_mul
1e124     FD 14 02 F6 | 	mov	arg02, result1
1e128     0F 13 02 F6 | 	mov	arg01, local01
1e12c     1F 14 E6 F4 | 	bitnot	arg02, #31
1e130     88 F2 BF FD | 	call	#__system___float_add
1e134     FD 1E 02 F6 | 	mov	local01, result1
1e138                 | LR__2790
1e138     0F 13 02 F6 | 	mov	arg01, local01
1e13c     66 E6 1E FF 
1e140     CD 14 06 F6 | 	mov	arg02, ##1036831949
1e144     01 16 06 F6 | 	mov	arg03, #1
1e148     74 FA BF FD | 	call	#__system___float_cmp
1e14c     00 FA 55 F2 | 	cmps	result1, #0 wc
1e150     5C 00 90 3D |  if_ae	jmp	#LR__2791
1e154     0F 13 02 F6 | 	mov	arg01, local01
1e158     66 E6 5E FF 
1e15c     CD 14 06 F6 | 	mov	arg02, ##-1110651699
1e160     01 16 66 F6 | 	neg	arg03, #1
1e164     58 FA BF FD | 	call	#__system___float_cmp
1e168     01 FA 55 F2 | 	cmps	result1, #1 wc
1e16c     40 00 90 CD |  if_b	jmp	#LR__2791
1e170     0F 13 02 F6 | 	mov	arg01, local01
1e174     0F 15 02 F6 | 	mov	arg02, local01
1e178     10 F6 BF FD | 	call	#__system___float_mul
1e17c     FD 12 02 F6 | 	mov	arg01, result1
1e180     0F 15 02 F6 | 	mov	arg02, local01
1e184     04 F6 BF FD | 	call	#__system___float_mul
1e188     FD 12 02 F6 | 	mov	arg01, result1
1e18c     00 60 20 FF 
1e190     00 14 06 F6 | 	mov	arg02, ##1086324736
1e194     F8 F7 BF FD | 	call	#__system___float_div
1e198     FD 14 02 F6 | 	mov	arg02, result1
1e19c     0F 13 02 F6 | 	mov	arg01, local01
1e1a0     1F 14 E6 F4 | 	bitnot	arg02, #31
1e1a4     14 F2 BF FD | 	call	#__system___float_add
1e1a8     FD 22 02 F6 | 	mov	local03, result1
1e1ac     54 00 90 FD | 	jmp	#LR__2792
1e1b0                 | LR__2791
1e1b0     0F 13 02 F6 | 	mov	arg01, local01
1e1b4     7C 91 26 FF 
1e1b8     83 15 06 F6 | 	mov	arg02, ##1294137731
1e1bc     CC F5 BF FD | 	call	#__system___float_mul
1e1c0     FD 12 02 F6 | 	mov	arg01, result1
1e1c4     00 14 06 F6 | 	mov	arg02, #0
1e1c8     88 FA BF FD | 	call	#__system___float_tointeger
1e1cc     02 FA 65 F0 | 	shl	result1, #2
1e1d0     00 00 A0 FF 
1e1d4     FD 00 48 FD | 	qrotate	##1073741824, result1
1e1d8     19 12 62 FD | 	getqy	arg01
1e1dc     09 13 52 F6 | 	abs	arg01, arg01 wc
1e1e0     1F 20 C6 C9 |  if_b	decod	local02, #31
1e1e4     00 20 06 36 |  if_ae	mov	local02, #0
1e1e8     9C F1 BF FD | 	call	#__system___float_fromuns
1e1ec     10 FB 61 F5 | 	xor	result1, local02
1e1f0     FD 12 02 F6 | 	mov	arg01, result1
1e1f4     00 40 27 FF 
1e1f8     00 14 06 F6 | 	mov	arg02, ##1317011456
1e1fc     90 F7 BF FD | 	call	#__system___float_div
1e200     FD 22 02 F6 | 	mov	local03, result1
1e204                 | LR__2792
1e204     11 FB 01 F6 | 	mov	result1, local03
1e208     A7 F0 03 F6 | 	mov	ptra, fp
1e20c     B2 00 A0 FD | 	call	#popregs_
1e210                 | __system____builtin_sinf_ret
1e210     2D 00 64 FD | 	ret
1e214                 | 
1e214                 | __system____builtin_tanf
1e214     02 4A 05 F6 | 	mov	COUNT_, #2
1e218     A8 00 A0 FD | 	call	#pushregs_
1e21c     09 1F 02 F6 | 	mov	local01, arg01
1e220     A4 FE BF FD | 	call	#__system____builtin_sinf
1e224     FD 20 02 F6 | 	mov	local02, result1
1e228     0F 15 02 F6 | 	mov	arg02, local01
1e22c     87 E4 1F FF 
1e230     DB 13 06 F6 | 	mov	arg01, ##1070141403
1e234     1F 14 E6 F4 | 	bitnot	arg02, #31
1e238     80 F1 BF FD | 	call	#__system___float_add
1e23c     FD 12 02 F6 | 	mov	arg01, result1
1e240     84 FE BF FD | 	call	#__system____builtin_sinf
1e244     FD 14 02 F6 | 	mov	arg02, result1
1e248     10 13 02 F6 | 	mov	arg01, local02
1e24c     40 F7 BF FD | 	call	#__system___float_div
1e250     A7 F0 03 F6 | 	mov	ptra, fp
1e254     B2 00 A0 FD | 	call	#popregs_
1e258                 | __system____builtin_tanf_ret
1e258     2D 00 64 FD | 	ret
1e25c                 | 
1e25c                 | __system____builtin_asinf
1e25c     01 4A 05 F6 | 	mov	COUNT_, #1
1e260     A8 00 A0 FD | 	call	#pushregs_
1e264     09 1F 02 F6 | 	mov	local01, arg01
1e268     0F 15 02 F6 | 	mov	arg02, local01
1e26c     0F 13 02 F6 | 	mov	arg01, local01
1e270     18 F5 BF FD | 	call	#__system___float_mul
1e274     FD 14 02 F6 | 	mov	arg02, result1
1e278     00 C0 1F FF 
1e27c     00 12 06 F6 | 	mov	arg01, ##1065353216
1e280     1F 14 E6 F4 | 	bitnot	arg02, #31
1e284     34 F1 BF FD | 	call	#__system___float_add
1e288     FD 12 02 F6 | 	mov	arg01, result1
1e28c     24 F4 BF FD | 	call	#__system___float_sqrt
1e290     FD 14 02 F6 | 	mov	arg02, result1
1e294     0F 13 02 F6 | 	mov	arg01, local01
1e298     58 00 B0 FD | 	call	#__system____builtin_atan2f
1e29c     A7 F0 03 F6 | 	mov	ptra, fp
1e2a0     B2 00 A0 FD | 	call	#popregs_
1e2a4                 | __system____builtin_asinf_ret
1e2a4     2D 00 64 FD | 	ret
1e2a8                 | 
1e2a8                 | __system____builtin_acosf
1e2a8     01 4A 05 F6 | 	mov	COUNT_, #1
1e2ac     A8 00 A0 FD | 	call	#pushregs_
1e2b0     09 1F 02 F6 | 	mov	local01, arg01
1e2b4     0F 15 02 F6 | 	mov	arg02, local01
1e2b8     0F 13 02 F6 | 	mov	arg01, local01
1e2bc     CC F4 BF FD | 	call	#__system___float_mul
1e2c0     FD 14 02 F6 | 	mov	arg02, result1
1e2c4     00 C0 1F FF 
1e2c8     00 12 06 F6 | 	mov	arg01, ##1065353216
1e2cc     1F 14 E6 F4 | 	bitnot	arg02, #31
1e2d0     E8 F0 BF FD | 	call	#__system___float_add
1e2d4     FD 12 02 F6 | 	mov	arg01, result1
1e2d8     D8 F3 BF FD | 	call	#__system___float_sqrt
1e2dc     FD 12 02 F6 | 	mov	arg01, result1
1e2e0     0F 15 02 F6 | 	mov	arg02, local01
1e2e4     0C 00 B0 FD | 	call	#__system____builtin_atan2f
1e2e8     A7 F0 03 F6 | 	mov	ptra, fp
1e2ec     B2 00 A0 FD | 	call	#popregs_
1e2f0                 | __system____builtin_acosf_ret
1e2f0     2D 00 64 FD | 	ret
1e2f4                 | 
1e2f4                 | __system____builtin_atan2f
1e2f4     04 4A 05 F6 | 	mov	COUNT_, #4
1e2f8     A8 00 A0 FD | 	call	#pushregs_
1e2fc     09 1F 02 F6 | 	mov	local01, arg01
1e300     0A 21 02 F6 | 	mov	local02, arg02
1e304     0F 13 02 F6 | 	mov	arg01, local01
1e308     00 14 06 F6 | 	mov	arg02, #0
1e30c     01 16 06 F6 | 	mov	arg03, #1
1e310     AC F8 BF FD | 	call	#__system___float_cmp
1e314     00 FA 0D F2 | 	cmp	result1, #0 wz
1e318     28 00 90 5D |  if_ne	jmp	#LR__2800
1e31c     10 13 02 F6 | 	mov	arg01, local02
1e320     00 14 06 F6 | 	mov	arg02, #0
1e324     01 16 06 F6 | 	mov	arg03, #1
1e328     94 F8 BF FD | 	call	#__system___float_cmp
1e32c     00 FA 55 F2 | 	cmps	result1, #0 wc
1e330     87 24 60 CF 
1e334     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
1e338     DC 00 90 CD |  if_b	jmp	#LR__2801
1e33c     00 FA 05 F6 | 	mov	result1, #0
1e340     D4 00 90 FD | 	jmp	#LR__2801
1e344                 | LR__2800
1e344     10 13 02 F6 | 	mov	arg01, local02
1e348     10 15 02 F6 | 	mov	arg02, local02
1e34c     3C F4 BF FD | 	call	#__system___float_mul
1e350     FD 22 02 F6 | 	mov	local03, result1
1e354     0F 13 02 F6 | 	mov	arg01, local01
1e358     0F 15 02 F6 | 	mov	arg02, local01
1e35c     2C F4 BF FD | 	call	#__system___float_mul
1e360     FD 14 02 F6 | 	mov	arg02, result1
1e364     11 13 02 F6 | 	mov	arg01, local03
1e368     50 F0 BF FD | 	call	#__system___float_add
1e36c     FD 12 02 F6 | 	mov	arg01, result1
1e370     40 F3 BF FD | 	call	#__system___float_sqrt
1e374     FD 22 02 F6 | 	mov	local03, result1
1e378     10 13 02 F6 | 	mov	arg01, local02
1e37c     11 15 02 F6 | 	mov	arg02, local03
1e380     0C F6 BF FD | 	call	#__system___float_div
1e384     FD 20 02 F6 | 	mov	local02, result1
1e388     0F 13 02 F6 | 	mov	arg01, local01
1e38c     11 15 02 F6 | 	mov	arg02, local03
1e390     FC F5 BF FD | 	call	#__system___float_div
1e394     FD 1E 02 F6 | 	mov	local01, result1
1e398     00 40 27 FF 
1e39c     00 12 06 F6 | 	mov	arg01, ##1317011456
1e3a0     10 15 02 F6 | 	mov	arg02, local02
1e3a4     E4 F3 BF FD | 	call	#__system___float_mul
1e3a8     FD 12 02 F6 | 	mov	arg01, result1
1e3ac     00 14 06 F6 | 	mov	arg02, #0
1e3b0     A0 F8 BF FD | 	call	#__system___float_tointeger
1e3b4     FD 22 02 F6 | 	mov	local03, result1
1e3b8     00 40 27 FF 
1e3bc     00 12 06 F6 | 	mov	arg01, ##1317011456
1e3c0     0F 15 02 F6 | 	mov	arg02, local01
1e3c4     C4 F3 BF FD | 	call	#__system___float_mul
1e3c8     FD 12 02 F6 | 	mov	arg01, result1
1e3cc     00 14 06 F6 | 	mov	arg02, #0
1e3d0     80 F8 BF FD | 	call	#__system___float_tointeger
1e3d4     FD 22 52 FD | 	qvector	local03, result1
1e3d8     87 24 20 FF 
1e3dc     DB 23 06 F6 | 	mov	local03, ##1078530011
1e3e0     19 12 62 FD | 	getqy	arg01
1e3e4     01 12 C6 F0 | 	sar	arg01, #1
1e3e8     09 13 52 F6 | 	abs	arg01, arg01 wc
1e3ec     1F 24 C6 C9 |  if_b	decod	local04, #31
1e3f0     00 24 06 36 |  if_ae	mov	local04, #0
1e3f4     90 EF BF FD | 	call	#__system___float_fromuns
1e3f8     12 FB 61 F5 | 	xor	result1, local04
1e3fc     FD 12 02 F6 | 	mov	arg01, result1
1e400     00 40 27 FF 
1e404     00 14 06 F6 | 	mov	arg02, ##1317011456
1e408     84 F5 BF FD | 	call	#__system___float_div
1e40c     FD 14 02 F6 | 	mov	arg02, result1
1e410     11 13 02 F6 | 	mov	arg01, local03
1e414     74 F3 BF FD | 	call	#__system___float_mul
1e418                 | LR__2801
1e418     A7 F0 03 F6 | 	mov	ptra, fp
1e41c     B2 00 A0 FD | 	call	#popregs_
1e420                 | __system____builtin_atan2f_ret
1e420     2D 00 64 FD | 	ret
1e424                 | 
1e424                 | __system____builtin_exp2f
1e424     04 4A 05 F6 | 	mov	COUNT_, #4
1e428     A8 00 A0 FD | 	call	#pushregs_
1e42c     09 1F 02 F6 | 	mov	local01, arg01
1e430     00 7F 21 FF 
1e434     00 14 06 F6 | 	mov	arg02, ##1123942400
1e438     01 16 66 F6 | 	neg	arg03, #1
1e43c     80 F7 BF FD | 	call	#__system___float_cmp
1e440     00 FA 55 F2 | 	cmps	result1, #0 wc
1e444     00 C0 3F 3F 
1e448     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
1e44c     DC 00 90 3D |  if_ae	jmp	#LR__2811
1e450     0F 13 02 F6 | 	mov	arg01, local01
1e454     00 7F 61 FF 
1e458     00 14 06 F6 | 	mov	arg02, ##-1023541248
1e45c     01 16 06 F6 | 	mov	arg03, #1
1e460     5C F7 BF FD | 	call	#__system___float_cmp
1e464     00 FA 55 F2 | 	cmps	result1, #0 wc
1e468     00 FA 05 C6 |  if_b	mov	result1, #0
1e46c     BC 00 90 CD |  if_b	jmp	#LR__2811
1e470     0F 13 02 F6 | 	mov	arg01, local01
1e474     00 14 06 F6 | 	mov	arg02, #0
1e478     D8 F7 BF FD | 	call	#__system___float_tointeger
1e47c     FD 20 02 F6 | 	mov	local02, result1
1e480     10 13 52 F6 | 	abs	arg01, local02 wc
1e484     1F 22 C6 C9 |  if_b	decod	local03, #31
1e488     00 22 06 36 |  if_ae	mov	local03, #0
1e48c     F8 EE BF FD | 	call	#__system___float_fromuns
1e490     11 FB 61 F5 | 	xor	result1, local03
1e494     FD 14 02 F6 | 	mov	arg02, result1
1e498     0F 13 02 F6 | 	mov	arg01, local01
1e49c     1F 14 E6 F4 | 	bitnot	arg02, #31
1e4a0     18 EF BF FD | 	call	#__system___float_add
1e4a4     FD 24 02 F6 | 	mov	local04, result1
1e4a8     12 13 02 F6 | 	mov	arg01, local04
1e4ac     00 14 06 F6 | 	mov	arg02, #0
1e4b0     01 16 06 F6 | 	mov	arg03, #1
1e4b4     08 F7 BF FD | 	call	#__system___float_cmp
1e4b8     00 FA 55 F2 | 	cmps	result1, #0 wc
1e4bc     18 00 90 3D |  if_ae	jmp	#LR__2810
1e4c0     12 13 02 F6 | 	mov	arg01, local04
1e4c4     00 C0 1F FF 
1e4c8     00 14 06 F6 | 	mov	arg02, ##1065353216
1e4cc     EC EE BF FD | 	call	#__system___float_add
1e4d0     FD 24 02 F6 | 	mov	local04, result1
1e4d4     01 20 86 F1 | 	sub	local02, #1
1e4d8                 | LR__2810
1e4d8     7F 20 06 F1 | 	add	local02, #127
1e4dc     17 20 66 F0 | 	shl	local02, #23
1e4e0     12 13 02 F6 | 	mov	arg01, local04
1e4e4     00 80 26 FF 
1e4e8     00 14 06 F6 | 	mov	arg02, ##1291845632
1e4ec     9C F2 BF FD | 	call	#__system___float_mul
1e4f0     FD 12 02 F6 | 	mov	arg01, result1
1e4f4     00 14 06 F6 | 	mov	arg02, #0
1e4f8     58 F7 BF FD | 	call	#__system___float_tointeger
1e4fc     FD 24 0A F6 | 	mov	local04, result1 wz
1e500     10 FB 01 A6 |  if_e	mov	result1, local02
1e504     24 00 90 AD |  if_e	jmp	#LR__2811
1e508     3E 24 26 F4 | 	bith	local04, #62
1e50c     0F 24 62 FD | 	qexp	local04
1e510     10 13 02 F6 | 	mov	arg01, local02
1e514     18 14 62 FD | 	getqx	arg02
1e518     01 14 06 F1 | 	add	arg02, #1
1e51c     01 14 46 F0 | 	shr	arg02, #1
1e520     00 80 1F FF 
1e524     00 14 06 F1 | 	add	arg02, ##1056964608
1e528     60 F2 BF FD | 	call	#__system___float_mul
1e52c                 | LR__2811
1e52c     A7 F0 03 F6 | 	mov	ptra, fp
1e530     B2 00 A0 FD | 	call	#popregs_
1e534                 | __system____builtin_exp2f_ret
1e534     2D 00 64 FD | 	ret
1e538                 | 
1e538                 | __system____builtin_log2f
1e538     06 4A 05 F6 | 	mov	COUNT_, #6
1e53c     A8 00 A0 FD | 	call	#pushregs_
1e540     09 1F 02 F6 | 	mov	local01, arg01
1e544     09 21 0A F6 | 	mov	local02, arg01 wz
1e548     00 00 40 5F 
1e54c     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
1e550     00 40 00 AF 
1e554     00 FA 65 A6 |  if_e	neg	result1, ##8388608
1e558     08 01 90 AD |  if_e	jmp	#LR__2824
1e55c     00 20 56 F2 | 	cmps	local02, #0 wc
1e560     00 E0 3F CF 
1e564     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
1e568     F8 00 90 CD |  if_b	jmp	#LR__2824
1e56c     0F 13 02 F6 | 	mov	arg01, local01
1e570     00 90 20 FF 
1e574     00 14 06 F6 | 	mov	arg02, ##1092616192
1e578     01 16 06 F6 | 	mov	arg03, #1
1e57c     40 F6 BF FD | 	call	#__system___float_cmp
1e580     00 FA 0D F2 | 	cmp	result1, #0 wz
1e584     4D 2A 20 AF 
1e588     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
1e58c     D4 00 90 AD |  if_e	jmp	#LR__2824
1e590     0F 13 02 F6 | 	mov	arg01, local01
1e594     FC 16 20 FF 
1e598     54 14 06 F6 | 	mov	arg02, ##1076754516
1e59c     01 16 06 F6 | 	mov	arg03, #1
1e5a0     1C F6 BF FD | 	call	#__system___float_cmp
1e5a4     00 FA 0D F2 | 	cmp	result1, #0 wz
1e5a8     55 DC 1F AF 
1e5ac     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
1e5b0     B0 00 90 AD |  if_e	jmp	#LR__2824
1e5b4     10 23 02 F6 | 	mov	local03, local02
1e5b8     17 22 46 F0 | 	shr	local03, #23
1e5bc     11 23 E2 F8 | 	getbyte	local03, local03, #0
1e5c0     17 21 06 F4 | 	bitl	local02, #279
1e5c4     10 25 02 F6 | 	mov	local04, local02
1e5c8     FF 22 0E F2 | 	cmp	local03, #255 wz
1e5cc     1C 00 90 5D |  if_ne	jmp	#LR__2820
1e5d0     00 24 0E F2 | 	cmp	local04, #0 wz
1e5d4     00 C0 3F 5F 
1e5d8     00 26 06 56 |  if_ne	mov	local05, ##2139095040
1e5dc     00 E0 3F AF 
1e5e0     00 26 06 A6 |  if_e	mov	local05, ##2143289344
1e5e4     13 FB 01 F6 | 	mov	result1, local05
1e5e8     78 00 90 FD | 	jmp	#LR__2824
1e5ec                 | LR__2820
1e5ec     00 22 0E F2 | 	cmp	local03, #0 wz
1e5f0     17 24 26 54 |  if_ne	bith	local04, #23
1e5f4     7F 22 86 51 |  if_ne	sub	local03, #127
1e5f8     28 00 90 5D |  if_ne	jmp	#LR__2823
1e5fc     00 24 0E F2 | 	cmp	local04, #0 wz
1e600     00 40 00 AF 
1e604     00 FA 65 A6 |  if_e	neg	result1, ##8388608
1e608     58 00 90 AD |  if_e	jmp	#LR__2824
1e60c     7E 22 66 F6 | 	neg	local03, #126
1e610     97 08 48 FB | 	callpa	#(@LR__2822-@LR__2821)>>2,fcache_load_ptr_
1e614                 | LR__2821
1e614     17 24 2E F4 | 	testbn	local04, #23 wz
1e618     01 24 66 A0 |  if_e	shl	local04, #1
1e61c     01 22 06 A1 |  if_e	add	local03, #1
1e620     F0 FF 9F AD |  if_e	jmp	#LR__2821
1e624                 | LR__2822
1e624                 | LR__2823
1e624     0E 24 62 FD | 	qlog	local04
1e628     01 22 86 F1 | 	sub	local03, #1
1e62c     11 13 52 F6 | 	abs	arg01, local03 wc
1e630     1F 28 C6 C9 |  if_b	decod	local06, #31
1e634     00 28 06 36 |  if_ae	mov	local06, #0
1e638     18 26 62 FD | 	getqx	local05
1e63c     9B 26 06 F4 | 	bitl	local05, #155
1e640     08 26 06 F1 | 	add	local05, #8
1e644     04 26 46 F0 | 	shr	local05, #4
1e648     00 C0 1F FF 
1e64c     00 26 06 F1 | 	add	local05, ##1065353216
1e650     34 ED BF FD | 	call	#__system___float_fromuns
1e654     14 FB 61 F5 | 	xor	result1, local06
1e658     FD 14 02 F6 | 	mov	arg02, result1
1e65c     13 13 02 F6 | 	mov	arg01, local05
1e660     58 ED BF FD | 	call	#__system___float_add
1e664                 | LR__2824
1e664     A7 F0 03 F6 | 	mov	ptra, fp
1e668     B2 00 A0 FD | 	call	#popregs_
1e66c                 | __system____builtin_log2f_ret
1e66c     2D 00 64 FD | 	ret
1e670                 | 
1e670                 | __system____builtin_powf
1e670     04 4A 05 F6 | 	mov	COUNT_, #4
1e674     A8 00 A0 FD | 	call	#pushregs_
1e678     09 1F 02 F6 | 	mov	local01, arg01
1e67c     0A 21 02 F6 | 	mov	local02, arg02
1e680     10 13 02 F6 | 	mov	arg01, local02
1e684     00 14 06 F6 | 	mov	arg02, #0
1e688     C8 F5 BF FD | 	call	#__system___float_tointeger
1e68c     FD 22 02 F6 | 	mov	local03, result1
1e690     11 13 52 F6 | 	abs	arg01, local03 wc
1e694     1F 24 C6 C9 |  if_b	decod	local04, #31
1e698     00 24 06 36 |  if_ae	mov	local04, #0
1e69c     E8 EC BF FD | 	call	#__system___float_fromuns
1e6a0     12 FB 61 F5 | 	xor	result1, local04
1e6a4     FD 12 02 F6 | 	mov	arg01, result1
1e6a8     10 15 02 F6 | 	mov	arg02, local02
1e6ac     01 16 06 F6 | 	mov	arg03, #1
1e6b0     0C F5 BF FD | 	call	#__system___float_cmp
1e6b4     00 FA 0D F2 | 	cmp	result1, #0 wz
1e6b8     18 00 90 5D |  if_ne	jmp	#LR__2830
1e6bc     00 C0 1F FF 
1e6c0     00 12 06 F6 | 	mov	arg01, ##1065353216
1e6c4     0F 15 02 F6 | 	mov	arg02, local01
1e6c8     11 17 02 F6 | 	mov	arg03, local03
1e6cc     68 00 B0 FD | 	call	#__system___float_pow_n
1e6d0     58 00 90 FD | 	jmp	#LR__2831
1e6d4                 | LR__2830
1e6d4     0F 13 02 F6 | 	mov	arg01, local01
1e6d8     00 14 06 F6 | 	mov	arg02, #0
1e6dc     01 16 06 F6 | 	mov	arg03, #1
1e6e0     DC F4 BF FD | 	call	#__system___float_cmp
1e6e4     00 FA 55 F2 | 	cmps	result1, #0 wc
1e6e8     00 E0 3F CF 
1e6ec     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
1e6f0     38 00 90 CD |  if_b	jmp	#LR__2831
1e6f4     0F 13 02 F6 | 	mov	arg01, local01
1e6f8     00 14 06 F6 | 	mov	arg02, #0
1e6fc     01 16 06 F6 | 	mov	arg03, #1
1e700     BC F4 BF FD | 	call	#__system___float_cmp
1e704     00 FA 0D F2 | 	cmp	result1, #0 wz
1e708     00 FA 05 A6 |  if_e	mov	result1, #0
1e70c     1C 00 90 AD |  if_e	jmp	#LR__2831
1e710     0F 13 02 F6 | 	mov	arg01, local01
1e714     20 FE BF FD | 	call	#__system____builtin_log2f
1e718     FD 12 02 F6 | 	mov	arg01, result1
1e71c     10 15 02 F6 | 	mov	arg02, local02
1e720     68 F0 BF FD | 	call	#__system___float_mul
1e724     FD 12 02 F6 | 	mov	arg01, result1
1e728     F8 FC BF FD | 	call	#__system____builtin_exp2f
1e72c                 | LR__2831
1e72c     A7 F0 03 F6 | 	mov	ptra, fp
1e730     B2 00 A0 FD | 	call	#popregs_
1e734                 | __system____builtin_powf_ret
1e734     2D 00 64 FD | 	ret
1e738                 | 
1e738                 | __system___float_pow_n
1e738     05 4A 05 F6 | 	mov	COUNT_, #5
1e73c     A8 00 A0 FD | 	call	#pushregs_
1e740     09 1F 02 F6 | 	mov	local01, arg01
1e744     0A 21 02 F6 | 	mov	local02, arg02
1e748     0B 23 02 F6 | 	mov	local03, arg03
1e74c     00 22 56 F2 | 	cmps	local03, #0 wc
1e750     18 00 90 3D |  if_ae	jmp	#LR__2840
1e754     01 24 06 F6 | 	mov	local04, #1
1e758     11 23 62 F6 | 	neg	local03, local03
1e75c     00 22 56 F2 | 	cmps	local03, #0 wc
1e760     00 FA 05 C6 |  if_b	mov	result1, #0
1e764     94 00 90 CD |  if_b	jmp	#LR__2848
1e768     04 00 90 FD | 	jmp	#LR__2841
1e76c                 | LR__2840
1e76c     00 24 06 F6 | 	mov	local04, #0
1e770                 | LR__2841
1e770     00 C0 1F FF 
1e774     00 26 06 F6 | 	mov	local05, ##1065353216
1e778                 | LR__2842
1e778     01 22 56 F2 | 	cmps	local03, #1 wc
1e77c     30 00 90 CD |  if_b	jmp	#LR__2844
1e780     01 22 CE F7 | 	test	local03, #1 wz
1e784     10 00 90 AD |  if_e	jmp	#LR__2843
1e788     13 13 02 F6 | 	mov	arg01, local05
1e78c     10 15 02 F6 | 	mov	arg02, local02
1e790     F8 EF BF FD | 	call	#__system___float_mul
1e794     FD 26 02 F6 | 	mov	local05, result1
1e798                 | LR__2843
1e798     01 22 C6 F0 | 	sar	local03, #1
1e79c     10 13 02 F6 | 	mov	arg01, local02
1e7a0     10 15 02 F6 | 	mov	arg02, local02
1e7a4     E4 EF BF FD | 	call	#__system___float_mul
1e7a8     FD 20 02 F6 | 	mov	local02, result1
1e7ac     C8 FF 9F FD | 	jmp	#LR__2842
1e7b0                 | LR__2844
1e7b0     00 24 0E F2 | 	cmp	local04, #0 wz
1e7b4     14 00 90 AD |  if_e	jmp	#LR__2845
1e7b8     0F 13 02 F6 | 	mov	arg01, local01
1e7bc     13 15 02 F6 | 	mov	arg02, local05
1e7c0     CC F1 BF FD | 	call	#__system___float_div
1e7c4     FD 26 02 F6 | 	mov	local05, result1
1e7c8     2C 00 90 FD | 	jmp	#LR__2847
1e7cc                 | LR__2845
1e7cc     0F 13 02 F6 | 	mov	arg01, local01
1e7d0     00 C0 1F FF 
1e7d4     00 14 06 F6 | 	mov	arg02, ##1065353216
1e7d8     01 16 06 F6 | 	mov	arg03, #1
1e7dc     E0 F3 BF FD | 	call	#__system___float_cmp
1e7e0     00 FA 0D F2 | 	cmp	result1, #0 wz
1e7e4     10 00 90 AD |  if_e	jmp	#LR__2846
1e7e8     0F 13 02 F6 | 	mov	arg01, local01
1e7ec     13 15 02 F6 | 	mov	arg02, local05
1e7f0     98 EF BF FD | 	call	#__system___float_mul
1e7f4     FD 26 02 F6 | 	mov	local05, result1
1e7f8                 | LR__2846
1e7f8                 | LR__2847
1e7f8     13 FB 01 F6 | 	mov	result1, local05
1e7fc                 | LR__2848
1e7fc     A7 F0 03 F6 | 	mov	ptra, fp
1e800     B2 00 A0 FD | 	call	#popregs_
1e804                 | __system___float_pow_n_ret
1e804     2D 00 64 FD | 	ret
1e808                 | 
1e808                 | __system___gc_ptrs
1e808     EC 00 02 F6 | 	mov	_var01, __heap_ptr
1e80c     00 03 02 F6 | 	mov	_var02, _var01
1e810     76 01 00 FF 
1e814     F8 03 06 F1 | 	add	_var02, ##191992
1e818     00 FD 09 FB | 	rdlong	result2, _var01 wz
1e81c     74 00 90 5D |  if_ne	jmp	#LR__2850
1e820     01 FD 01 F6 | 	mov	result2, _var02
1e824     00 FD 81 F1 | 	sub	result2, _var01
1e828     00 03 58 FC | 	wrword	#1, _var01
1e82c     00 FB 01 F6 | 	mov	result1, _var01
1e830     02 FA 05 F1 | 	add	result1, #2
1e834     36 00 80 FF 
1e838     FD 20 59 FC | 	wrword	##27792, result1
1e83c     00 FB 01 F6 | 	mov	result1, _var01
1e840     04 FA 05 F1 | 	add	result1, #4
1e844     FD 00 58 FC | 	wrword	#0, result1
1e848     00 FB 01 F6 | 	mov	result1, _var01
1e84c     06 FA 05 F1 | 	add	result1, #6
1e850     FD 02 58 FC | 	wrword	#1, result1
1e854     10 00 06 F1 | 	add	_var01, #16
1e858     FE FC 51 F6 | 	abs	result2, result2 wc
1e85c     04 FC 45 F0 | 	shr	result2, #4
1e860     FE FC 81 F6 | 	negc	result2, result2
1e864     00 FD 51 FC | 	wrword	result2, _var01
1e868     00 FD 01 F6 | 	mov	result2, _var01
1e86c     02 FC 05 F1 | 	add	result2, #2
1e870     36 00 80 FF 
1e874     FE 1E 59 FC | 	wrword	##27791, result2
1e878     00 FD 01 F6 | 	mov	result2, _var01
1e87c     04 FC 05 F1 | 	add	result2, #4
1e880     FE 00 58 FC | 	wrword	#0, result2
1e884     00 FD 01 F6 | 	mov	result2, _var01
1e888     06 FC 05 F1 | 	add	result2, #6
1e88c     FE 00 58 FC | 	wrword	#0, result2
1e890     10 00 86 F1 | 	sub	_var01, #16
1e894                 | LR__2850
1e894     00 FB 01 F6 | 	mov	result1, _var01
1e898     01 FD 01 F6 | 	mov	result2, _var02
1e89c                 | __system___gc_ptrs_ret
1e89c     2D 00 64 FD | 	ret
1e8a0                 | 
1e8a0                 | __system___gc_tryalloc
1e8a0     0B 4A 05 F6 | 	mov	COUNT_, #11
1e8a4     A8 00 A0 FD | 	call	#pushregs_
1e8a8     09 1F 02 F6 | 	mov	local01, arg01
1e8ac     0A 21 02 F6 | 	mov	local02, arg02
1e8b0     54 FF BF FD | 	call	#__system___gc_ptrs
1e8b4     FD 22 02 F6 | 	mov	local03, result1
1e8b8     FE 24 02 F6 | 	mov	local04, result2
1e8bc     11 27 02 F6 | 	mov	local05, local03
1e8c0     00 28 06 F6 | 	mov	local06, #0
1e8c4     97 1E 48 FB | 	callpa	#(@LR__2861-@LR__2860)>>2,fcache_load_ptr_
1e8c8                 | LR__2860
1e8c8     13 2B 02 F6 | 	mov	local07, local05
1e8cc     06 26 06 F1 | 	add	local05, #6
1e8d0     13 15 EA FA | 	rdword	arg02, local05 wz
1e8d4     11 13 02 F6 | 	mov	arg01, local03
1e8d8     00 FA 05 A6 |  if_e	mov	result1, #0
1e8dc     04 14 66 50 |  if_ne	shl	arg02, #4
1e8e0     0A 13 02 51 |  if_ne	add	arg01, arg02
1e8e4     09 FB 01 56 |  if_ne	mov	result1, arg01
1e8e8     FD 26 0A F6 | 	mov	local05, result1 wz
1e8ec     13 29 E2 5A |  if_ne	rdword	local06, local05
1e8f0     00 26 0E F2 | 	cmp	local05, #0 wz
1e8f4     12 27 52 52 |  if_ne	cmps	local05, local04 wc
1e8f8     08 00 90 1D |  if_a	jmp	#LR__2862
1e8fc     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
1e900     C4 FF 9F 1D |  if_a	jmp	#LR__2860
1e904                 | LR__2861
1e904                 | LR__2862
1e904     00 26 0E F2 | 	cmp	local05, #0 wz
1e908     13 FB 01 A6 |  if_e	mov	result1, local05
1e90c     3C 01 90 AD |  if_e	jmp	#LR__2865
1e910     13 FD 01 F6 | 	mov	result2, local05
1e914     06 FC 05 F1 | 	add	result2, #6
1e918     FE 2C E2 FA | 	rdword	local08, result2
1e91c     14 1F 52 F2 | 	cmps	local01, local06 wc
1e920     C0 00 90 3D |  if_ae	jmp	#LR__2864
1e924     13 1F 52 FC | 	wrword	local01, local05
1e928     13 13 02 F6 | 	mov	arg01, local05
1e92c     0F 2D 02 F6 | 	mov	local08, local01
1e930     04 2C 66 F0 | 	shl	local08, #4
1e934     16 13 02 F1 | 	add	arg01, local08
1e938     0F 29 82 F1 | 	sub	local06, local01
1e93c     09 29 52 FC | 	wrword	local06, arg01
1e940     09 2D 02 F6 | 	mov	local08, arg01
1e944     02 2C 06 F1 | 	add	local08, #2
1e948     36 00 80 FF 
1e94c     16 1F 59 FC | 	wrword	##27791, local08
1e950     13 15 0A F6 | 	mov	arg02, local05 wz
1e954     00 FA 05 A6 |  if_e	mov	result1, #0
1e958     11 15 82 51 |  if_ne	sub	arg02, local03
1e95c     04 14 46 50 |  if_ne	shr	arg02, #4
1e960     0A FB 01 56 |  if_ne	mov	result1, arg02
1e964     09 2D 02 F6 | 	mov	local08, arg01
1e968     04 2C 06 F1 | 	add	local08, #4
1e96c     16 FB 51 FC | 	wrword	result1, local08
1e970     13 2D 02 F6 | 	mov	local08, local05
1e974     06 2C 06 F1 | 	add	local08, #6
1e978     09 15 02 F6 | 	mov	arg02, arg01
1e97c     16 2D E2 FA | 	rdword	local08, local08
1e980     06 14 06 F1 | 	add	arg02, #6
1e984     0A 2D 52 FC | 	wrword	local08, arg02
1e988     09 2F 02 F6 | 	mov	local09, arg01
1e98c     17 15 0A F6 | 	mov	arg02, local09 wz
1e990     00 FA 05 A6 |  if_e	mov	result1, #0
1e994     11 15 82 51 |  if_ne	sub	arg02, local03
1e998     04 14 46 50 |  if_ne	shr	arg02, #4
1e99c     0A FB 01 56 |  if_ne	mov	result1, arg02
1e9a0     FD 2C 02 F6 | 	mov	local08, result1
1e9a4     09 31 EA FA | 	rdword	local10, arg01 wz
1e9a8     00 FA 05 A6 |  if_e	mov	result1, #0
1e9ac     04 30 66 50 |  if_ne	shl	local10, #4
1e9b0     18 13 02 51 |  if_ne	add	arg01, local10
1e9b4     09 FB 01 56 |  if_ne	mov	result1, arg01
1e9b8     FD 32 0A F6 | 	mov	local11, result1 wz
1e9bc     24 00 90 AD |  if_e	jmp	#LR__2863
1e9c0     12 33 52 F2 | 	cmps	local11, local04 wc
1e9c4     1C 00 90 3D |  if_ae	jmp	#LR__2863
1e9c8     17 15 0A F6 | 	mov	arg02, local09 wz
1e9cc     00 FA 05 A6 |  if_e	mov	result1, #0
1e9d0     11 15 82 51 |  if_ne	sub	arg02, local03
1e9d4     04 14 46 50 |  if_ne	shr	arg02, #4
1e9d8     0A FB 01 56 |  if_ne	mov	result1, arg02
1e9dc     04 32 06 F1 | 	add	local11, #4
1e9e0     19 FB 51 FC | 	wrword	result1, local11
1e9e4                 | LR__2863
1e9e4                 | LR__2864
1e9e4     06 2A 06 F1 | 	add	local07, #6
1e9e8     15 2D 52 FC | 	wrword	local08, local07
1e9ec     36 00 00 FF 
1e9f0     80 2E 06 F6 | 	mov	local09, ##27776
1e9f4     10 2F 42 F5 | 	or	local09, local02
1e9f8     00 FA 05 F6 | 	mov	result1, #0
1e9fc     01 FA 61 FD | 	cogid	result1
1ea00     FD 2E 42 F5 | 	or	local09, result1
1ea04     13 33 02 F6 | 	mov	local11, local05
1ea08     02 32 06 F1 | 	add	local11, #2
1ea0c     19 2F 52 FC | 	wrword	local09, local11
1ea10     11 2F 02 F6 | 	mov	local09, local03
1ea14     08 2E 06 F1 | 	add	local09, #8
1ea18     13 33 02 F6 | 	mov	local11, local05
1ea1c     17 2F E2 FA | 	rdword	local09, local09
1ea20     06 32 06 F1 | 	add	local11, #6
1ea24     19 2F 52 FC | 	wrword	local09, local11
1ea28     13 15 0A F6 | 	mov	arg02, local05 wz
1ea2c     00 FA 05 A6 |  if_e	mov	result1, #0
1ea30     11 15 82 51 |  if_ne	sub	arg02, local03
1ea34     04 14 46 50 |  if_ne	shr	arg02, #4
1ea38     0A FB 01 56 |  if_ne	mov	result1, arg02
1ea3c     08 22 06 F1 | 	add	local03, #8
1ea40     11 FB 51 FC | 	wrword	result1, local03
1ea44     08 26 06 F1 | 	add	local05, #8
1ea48     13 FB 01 F6 | 	mov	result1, local05
1ea4c                 | LR__2865
1ea4c     A7 F0 03 F6 | 	mov	ptra, fp
1ea50     B2 00 A0 FD | 	call	#popregs_
1ea54                 | __system___gc_tryalloc_ret
1ea54     2D 00 64 FD | 	ret
1ea58                 | 
1ea58                 | __system___gc_alloc_managed
1ea58     01 4A 05 F6 | 	mov	COUNT_, #1
1ea5c     A8 00 A0 FD | 	call	#pushregs_
1ea60     09 1F 02 F6 | 	mov	local01, arg01
1ea64     00 14 06 F6 | 	mov	arg02, #0
1ea68     1C 00 B0 FD | 	call	#__system___gc_doalloc
1ea6c     FD 14 0A F6 | 	mov	arg02, result1 wz
1ea70     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
1ea74     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
1ea78     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
1ea7c     A7 F0 03 F6 | 	mov	ptra, fp
1ea80     B2 00 A0 FD | 	call	#popregs_
1ea84                 | __system___gc_alloc_managed_ret
1ea84     2D 00 64 FD | 	ret
1ea88                 | 
1ea88                 | __system___gc_doalloc
1ea88     06 4A 05 F6 | 	mov	COUNT_, #6
1ea8c     A8 00 A0 FD | 	call	#pushregs_
1ea90     09 1F 0A F6 | 	mov	local01, arg01 wz
1ea94     0A 21 02 F6 | 	mov	local02, arg02
1ea98     00 FA 05 A6 |  if_e	mov	result1, #0
1ea9c     8C 00 90 AD |  if_e	jmp	#LR__2877
1eaa0     17 1E 06 F1 | 	add	local01, #23
1eaa4     0F 1E 26 F5 | 	andn	local01, #15
1eaa8     04 1E 46 F0 | 	shr	local01, #4
1eaac     1C E6 05 F1 | 	add	ptr___system__dat__, #28
1eab0     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1eab4     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
1eab8     AC C1 BF FD | 	call	#__system___lockmem
1eabc     0F 13 02 F6 | 	mov	arg01, local01
1eac0     10 15 02 F6 | 	mov	arg02, local02
1eac4     D8 FD BF FD | 	call	#__system___gc_tryalloc
1eac8     FD 22 0A F6 | 	mov	local03, result1 wz
1eacc     14 00 90 5D |  if_ne	jmp	#LR__2870
1ead0     70 03 B0 FD | 	call	#__system___gc_docollect
1ead4     0F 13 02 F6 | 	mov	arg01, local01
1ead8     10 15 02 F6 | 	mov	arg02, local02
1eadc     C0 FD BF FD | 	call	#__system___gc_tryalloc
1eae0     FD 22 02 F6 | 	mov	local03, result1
1eae4                 | LR__2870
1eae4     1C E6 05 F1 | 	add	ptr___system__dat__, #28
1eae8     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1eaec     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
1eaf0     09 01 68 FC | 	wrlong	#0, arg01
1eaf4     00 22 0E F2 | 	cmp	local03, #0 wz
1eaf8     2C 00 90 AD |  if_e	jmp	#LR__2876
1eafc     04 1E 66 F0 | 	shl	local01, #4
1eb00     08 1E 86 F1 | 	sub	local01, #8
1eb04     0F 25 52 F6 | 	abs	local04, local01 wc
1eb08     02 24 46 F0 | 	shr	local04, #2
1eb0c     12 27 8A F6 | 	negc	local05, local04 wz
1eb10     11 29 02 F6 | 	mov	local06, local03
1eb14     10 00 90 AD |  if_e	jmp	#LR__2875
1eb18     97 06 48 FB | 	callpa	#(@LR__2873-@LR__2871)>>2,fcache_load_ptr_
1eb1c                 | LR__2871
1eb1c     13 05 D8 FC | 	rep	@LR__2874, local05
1eb20                 | LR__2872
1eb20     14 01 68 FC | 	wrlong	#0, local06
1eb24     04 28 06 F1 | 	add	local06, #4
1eb28                 | LR__2873
1eb28                 | LR__2874
1eb28                 | LR__2875
1eb28                 | LR__2876
1eb28     11 FB 01 F6 | 	mov	result1, local03
1eb2c                 | LR__2877
1eb2c     A7 F0 03 F6 | 	mov	ptra, fp
1eb30     B2 00 A0 FD | 	call	#popregs_
1eb34                 | __system___gc_doalloc_ret
1eb34     2D 00 64 FD | 	ret
1eb38                 | 
1eb38                 | __system___gc_isvalidptr
1eb38     F8 16 06 F4 | 	bitl	arg03, #248
1eb3c     08 16 86 F1 | 	sub	arg03, #8
1eb40     09 17 52 F2 | 	cmps	arg03, arg01 wc
1eb44     08 00 90 CD |  if_b	jmp	#LR__2880
1eb48     0A 17 52 F2 | 	cmps	arg03, arg02 wc
1eb4c     08 00 90 CD |  if_b	jmp	#LR__2881
1eb50                 | LR__2880
1eb50     00 FA 05 F6 | 	mov	result1, #0
1eb54     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
1eb58                 | LR__2881
1eb58     0B 01 02 F6 | 	mov	_var01, arg03
1eb5c     09 01 62 F5 | 	xor	_var01, arg01
1eb60     0F 00 CE F7 | 	test	_var01, #15 wz
1eb64     00 FA 05 56 |  if_ne	mov	result1, #0
1eb68     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
1eb6c     0B 01 02 F6 | 	mov	_var01, arg03
1eb70     02 00 06 F1 | 	add	_var01, #2
1eb74     00 01 E2 FA | 	rdword	_var01, _var01
1eb78     7F 00 00 FF 
1eb7c     C0 01 06 F5 | 	and	_var01, ##65472
1eb80     36 00 00 FF 
1eb84     80 00 0E F2 | 	cmp	_var01, ##27776 wz
1eb88     00 FA 05 56 |  if_ne	mov	result1, #0
1eb8c     0B FB 01 A6 |  if_e	mov	result1, arg03
1eb90                 | __system___gc_isvalidptr_ret
1eb90     2D 00 64 FD | 	ret
1eb94                 | 
1eb94                 | __system___gc_free
1eb94     09 17 02 F6 | 	mov	arg03, arg01
1eb98     6C FC BF FD | 	call	#__system___gc_ptrs
1eb9c     FD 12 02 F6 | 	mov	arg01, result1
1eba0     FE 14 02 F6 | 	mov	arg02, result2
1eba4     90 FF BF FD | 	call	#__system___gc_isvalidptr
1eba8     FD 14 0A F6 | 	mov	arg02, result1 wz
1ebac     28 00 90 AD |  if_e	jmp	#LR__2890
1ebb0     1C E6 05 F1 | 	add	ptr___system__dat__, #28
1ebb4     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1ebb8     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
1ebbc     A8 C0 BF FD | 	call	#__system___lockmem
1ebc0     0A 13 02 F6 | 	mov	arg01, arg02
1ebc4     14 00 B0 FD | 	call	#__system___gc_dofree
1ebc8     1C E6 05 F1 | 	add	ptr___system__dat__, #28
1ebcc     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1ebd0     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
1ebd4     09 01 68 FC | 	wrlong	#0, arg01
1ebd8                 | LR__2890
1ebd8                 | __system___gc_free_ret
1ebd8     2D 00 64 FD | 	ret
1ebdc                 | 
1ebdc                 | __system___gc_dofree
1ebdc     06 4A 05 F6 | 	mov	COUNT_, #6
1ebe0     A8 00 A0 FD | 	call	#pushregs_
1ebe4     09 1F 02 F6 | 	mov	local01, arg01
1ebe8     1C FC BF FD | 	call	#__system___gc_ptrs
1ebec     FD 20 02 F6 | 	mov	local02, result1
1ebf0     FE 22 02 F6 | 	mov	local03, result2
1ebf4     0F 15 02 F6 | 	mov	arg02, local01
1ebf8     02 14 06 F1 | 	add	arg02, #2
1ebfc     36 00 80 FF 
1ec00     0A 1F 59 FC | 	wrword	##27791, arg02
1ec04     0F 25 02 F6 | 	mov	local04, local01
1ec08     0F 13 02 F6 | 	mov	arg01, local01
1ec0c     09 27 EA FA | 	rdword	local05, arg01 wz
1ec10     00 FA 05 A6 |  if_e	mov	result1, #0
1ec14     04 26 66 50 |  if_ne	shl	local05, #4
1ec18     13 13 02 51 |  if_ne	add	arg01, local05
1ec1c     09 FB 01 56 |  if_ne	mov	result1, arg01
1ec20     FD 28 02 F6 | 	mov	local06, result1
1ec24     97 24 48 FB | 	callpa	#(@LR__2901-@LR__2900)>>2,fcache_load_ptr_
1ec28                 | LR__2900
1ec28     04 24 06 F1 | 	add	local04, #4
1ec2c     12 15 EA FA | 	rdword	arg02, local04 wz
1ec30     10 13 02 F6 | 	mov	arg01, local02
1ec34     00 FA 05 A6 |  if_e	mov	result1, #0
1ec38     04 14 66 50 |  if_ne	shl	arg02, #4
1ec3c     0A 13 02 51 |  if_ne	add	arg01, arg02
1ec40     09 FB 01 56 |  if_ne	mov	result1, arg01
1ec44     FD 24 0A F6 | 	mov	local04, result1 wz
1ec48     24 00 90 AD |  if_e	jmp	#LR__2902
1ec4c     12 13 02 F6 | 	mov	arg01, local04
1ec50     00 FA 05 F6 | 	mov	result1, #0
1ec54     02 12 06 F1 | 	add	arg01, #2
1ec58     09 13 E2 FA | 	rdword	arg01, arg01
1ec5c     36 00 00 FF 
1ec60     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1ec64     01 FA 65 A6 |  if_e	neg	result1, #1
1ec68     00 FA 0D F2 | 	cmp	result1, #0 wz
1ec6c     B8 FF 9F AD |  if_e	jmp	#LR__2900
1ec70                 | LR__2901
1ec70                 | LR__2902
1ec70     00 24 0E F2 | 	cmp	local04, #0 wz
1ec74     10 25 02 A6 |  if_e	mov	local04, local02
1ec78     12 15 02 F6 | 	mov	arg02, local04
1ec7c     06 14 06 F1 | 	add	arg02, #6
1ec80     0F 13 02 F6 | 	mov	arg01, local01
1ec84     0A 15 E2 FA | 	rdword	arg02, arg02
1ec88     06 12 06 F1 | 	add	arg01, #6
1ec8c     09 15 52 FC | 	wrword	arg02, arg01
1ec90     0F 15 0A F6 | 	mov	arg02, local01 wz
1ec94     00 FA 05 A6 |  if_e	mov	result1, #0
1ec98     10 15 82 51 |  if_ne	sub	arg02, local02
1ec9c     04 14 46 50 |  if_ne	shr	arg02, #4
1eca0     0A FB 01 56 |  if_ne	mov	result1, arg02
1eca4     12 15 02 F6 | 	mov	arg02, local04
1eca8     06 14 06 F1 | 	add	arg02, #6
1ecac     0A FB 51 FC | 	wrword	result1, arg02
1ecb0     10 25 0A F2 | 	cmp	local04, local02 wz
1ecb4     A4 00 90 AD |  if_e	jmp	#LR__2905
1ecb8     12 13 02 F6 | 	mov	arg01, local04
1ecbc     09 27 EA FA | 	rdword	local05, arg01 wz
1ecc0     00 FA 05 A6 |  if_e	mov	result1, #0
1ecc4     04 26 66 50 |  if_ne	shl	local05, #4
1ecc8     13 13 02 51 |  if_ne	add	arg01, local05
1eccc     09 FB 01 56 |  if_ne	mov	result1, arg01
1ecd0     0F FB 09 F2 | 	cmp	result1, local01 wz
1ecd4     84 00 90 5D |  if_ne	jmp	#LR__2904
1ecd8     12 29 E2 FA | 	rdword	local06, local04
1ecdc     0F 15 E2 FA | 	rdword	arg02, local01
1ece0     0A 29 02 F1 | 	add	local06, arg02
1ece4     12 29 52 FC | 	wrword	local06, local04
1ece8     0F 29 02 F6 | 	mov	local06, local01
1ecec     02 28 06 F1 | 	add	local06, #2
1ecf0     14 01 58 FC | 	wrword	#0, local06
1ecf4     0F 13 02 F6 | 	mov	arg01, local01
1ecf8     09 27 EA FA | 	rdword	local05, arg01 wz
1ecfc     00 FA 05 A6 |  if_e	mov	result1, #0
1ed00     04 26 66 50 |  if_ne	shl	local05, #4
1ed04     13 13 02 51 |  if_ne	add	arg01, local05
1ed08     09 FB 01 56 |  if_ne	mov	result1, arg01
1ed0c     FD 28 02 F6 | 	mov	local06, result1
1ed10     11 29 52 F2 | 	cmps	local06, local03 wc
1ed14     20 00 90 3D |  if_ae	jmp	#LR__2903
1ed18     12 15 0A F6 | 	mov	arg02, local04 wz
1ed1c     00 FA 05 A6 |  if_e	mov	result1, #0
1ed20     10 15 82 51 |  if_ne	sub	arg02, local02
1ed24     04 14 46 50 |  if_ne	shr	arg02, #4
1ed28     0A FB 01 56 |  if_ne	mov	result1, arg02
1ed2c     14 15 02 F6 | 	mov	arg02, local06
1ed30     04 14 06 F1 | 	add	arg02, #4
1ed34     0A FB 51 FC | 	wrword	result1, arg02
1ed38                 | LR__2903
1ed38     0F 15 02 F6 | 	mov	arg02, local01
1ed3c     06 14 06 F1 | 	add	arg02, #6
1ed40     12 FD 01 F6 | 	mov	result2, local04
1ed44     0A 15 E2 FA | 	rdword	arg02, arg02
1ed48     06 FC 05 F1 | 	add	result2, #6
1ed4c     FE 14 52 FC | 	wrword	arg02, result2
1ed50     06 1E 06 F1 | 	add	local01, #6
1ed54     0F 01 58 FC | 	wrword	#0, local01
1ed58     12 1F 02 F6 | 	mov	local01, local04
1ed5c                 | LR__2904
1ed5c                 | LR__2905
1ed5c     0F 13 02 F6 | 	mov	arg01, local01
1ed60     09 27 EA FA | 	rdword	local05, arg01 wz
1ed64     00 FA 05 A6 |  if_e	mov	result1, #0
1ed68     04 26 66 50 |  if_ne	shl	local05, #4
1ed6c     13 13 02 51 |  if_ne	add	arg01, local05
1ed70     09 FB 01 56 |  if_ne	mov	result1, arg01
1ed74     FD 14 0A F6 | 	mov	arg02, result1 wz
1ed78     B8 00 90 AD |  if_e	jmp	#LR__2907
1ed7c     11 15 52 F2 | 	cmps	arg02, local03 wc
1ed80     B0 00 90 3D |  if_ae	jmp	#LR__2907
1ed84     0A 13 02 F6 | 	mov	arg01, arg02
1ed88     00 FA 05 F6 | 	mov	result1, #0
1ed8c     02 12 06 F1 | 	add	arg01, #2
1ed90     09 13 E2 FA | 	rdword	arg01, arg01
1ed94     36 00 00 FF 
1ed98     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1ed9c     01 FA 65 A6 |  if_e	neg	result1, #1
1eda0     00 FA 0D F2 | 	cmp	result1, #0 wz
1eda4     8C 00 90 AD |  if_e	jmp	#LR__2907
1eda8     0F 25 02 F6 | 	mov	local04, local01
1edac     12 29 E2 FA | 	rdword	local06, local04
1edb0     0A 13 02 F6 | 	mov	arg01, arg02
1edb4     09 1F E2 FA | 	rdword	local01, arg01
1edb8     0F 29 02 F1 | 	add	local06, local01
1edbc     12 29 52 FC | 	wrword	local06, local04
1edc0     09 29 02 F6 | 	mov	local06, arg01
1edc4     06 28 06 F1 | 	add	local06, #6
1edc8     12 1F 02 F6 | 	mov	local01, local04
1edcc     14 29 E2 FA | 	rdword	local06, local06
1edd0     06 1E 06 F1 | 	add	local01, #6
1edd4     0F 29 52 FC | 	wrword	local06, local01
1edd8     09 29 02 F6 | 	mov	local06, arg01
1eddc     02 28 06 F1 | 	add	local06, #2
1ede0     14 55 59 FC | 	wrword	#170, local06
1ede4     09 29 02 F6 | 	mov	local06, arg01
1ede8     06 28 06 F1 | 	add	local06, #6
1edec     14 01 58 FC | 	wrword	#0, local06
1edf0     09 27 EA FA | 	rdword	local05, arg01 wz
1edf4     00 FA 05 A6 |  if_e	mov	result1, #0
1edf8     04 26 66 50 |  if_ne	shl	local05, #4
1edfc     13 13 02 51 |  if_ne	add	arg01, local05
1ee00     09 FB 01 56 |  if_ne	mov	result1, arg01
1ee04     FD 28 0A F6 | 	mov	local06, result1 wz
1ee08     28 00 90 AD |  if_e	jmp	#LR__2906
1ee0c     11 29 52 F2 | 	cmps	local06, local03 wc
1ee10     20 00 90 3D |  if_ae	jmp	#LR__2906
1ee14     12 15 0A F6 | 	mov	arg02, local04 wz
1ee18     00 FA 05 A6 |  if_e	mov	result1, #0
1ee1c     10 15 82 51 |  if_ne	sub	arg02, local02
1ee20     04 14 46 50 |  if_ne	shr	arg02, #4
1ee24     0A FB 01 56 |  if_ne	mov	result1, arg02
1ee28     14 25 02 F6 | 	mov	local04, local06
1ee2c     04 24 06 F1 | 	add	local04, #4
1ee30     12 FB 51 FC | 	wrword	result1, local04
1ee34                 | LR__2906
1ee34                 | LR__2907
1ee34     14 FB 01 F6 | 	mov	result1, local06
1ee38     A7 F0 03 F6 | 	mov	ptra, fp
1ee3c     B2 00 A0 FD | 	call	#popregs_
1ee40                 | __system___gc_dofree_ret
1ee40     2D 00 64 FD | 	ret
1ee44                 | 
1ee44                 | __system___gc_docollect
1ee44     05 4A 05 F6 | 	mov	COUNT_, #5
1ee48     A8 00 A0 FD | 	call	#pushregs_
1ee4c     B8 F9 BF FD | 	call	#__system___gc_ptrs
1ee50     FE 1E 02 F6 | 	mov	local01, result2
1ee54     FD 20 02 F6 | 	mov	local02, result1
1ee58     10 13 02 F6 | 	mov	arg01, local02
1ee5c     09 23 EA FA | 	rdword	local03, arg01 wz
1ee60     00 FA 05 A6 |  if_e	mov	result1, #0
1ee64     04 22 66 50 |  if_ne	shl	local03, #4
1ee68     11 13 02 51 |  if_ne	add	arg01, local03
1ee6c     09 FB 01 56 |  if_ne	mov	result1, arg01
1ee70     FD 24 0A F6 | 	mov	local04, result1 wz
1ee74     00 FA 05 F6 | 	mov	result1, #0
1ee78     01 FA 61 FD | 	cogid	result1
1ee7c     FD 26 02 F6 | 	mov	local05, result1
1ee80     48 00 90 AD |  if_e	jmp	#LR__2912
1ee84     97 22 48 FB | 	callpa	#(@LR__2911-@LR__2910)>>2,fcache_load_ptr_
1ee88                 | LR__2910
1ee88     0F 25 52 F2 | 	cmps	local04, local01 wc
1ee8c     3C 00 90 3D |  if_ae	jmp	#LR__2912
1ee90     12 15 02 F6 | 	mov	arg02, local04
1ee94     02 14 06 F1 | 	add	arg02, #2
1ee98     0A 15 E2 FA | 	rdword	arg02, arg02
1ee9c     20 14 26 F5 | 	andn	arg02, #32
1eea0     12 13 02 F6 | 	mov	arg01, local04
1eea4     02 12 06 F1 | 	add	arg01, #2
1eea8     09 15 52 FC | 	wrword	arg02, arg01
1eeac     12 13 02 F6 | 	mov	arg01, local04
1eeb0     09 23 EA FA | 	rdword	local03, arg01 wz
1eeb4     00 FA 05 A6 |  if_e	mov	result1, #0
1eeb8     04 22 66 50 |  if_ne	shl	local03, #4
1eebc     11 13 02 51 |  if_ne	add	arg01, local03
1eec0     09 FB 01 56 |  if_ne	mov	result1, arg01
1eec4     FD 24 0A F6 | 	mov	local04, result1 wz
1eec8     BC FF 9F 5D |  if_ne	jmp	#LR__2910
1eecc                 | LR__2911
1eecc                 | LR__2912
1eecc     00 22 06 F6 | 	mov	local03, #0
1eed0     00 12 06 F6 | 	mov	arg01, #0
1eed4     68 BD BF FD | 	call	#__system____topofstack
1eed8     FD 14 02 F6 | 	mov	arg02, result1
1eedc     11 13 02 F6 | 	mov	arg01, local03
1eee0     90 00 B0 FD | 	call	#__system___gc_markhub
1eee4     1C 01 B0 FD | 	call	#__system___gc_markcog
1eee8     10 13 02 F6 | 	mov	arg01, local02
1eeec     09 23 EA FA | 	rdword	local03, arg01 wz
1eef0     00 FA 05 A6 |  if_e	mov	result1, #0
1eef4     04 22 66 50 |  if_ne	shl	local03, #4
1eef8     11 13 02 51 |  if_ne	add	arg01, local03
1eefc     09 FB 01 56 |  if_ne	mov	result1, arg01
1ef00     FD 20 0A F6 | 	mov	local02, result1 wz
1ef04     60 00 90 AD |  if_e	jmp	#LR__2916
1ef08                 | LR__2913
1ef08     10 25 02 F6 | 	mov	local04, local02
1ef0c     12 13 02 F6 | 	mov	arg01, local04
1ef10     09 23 EA FA | 	rdword	local03, arg01 wz
1ef14     00 FA 05 A6 |  if_e	mov	result1, #0
1ef18     04 22 66 50 |  if_ne	shl	local03, #4
1ef1c     11 13 02 51 |  if_ne	add	arg01, local03
1ef20     09 FB 01 56 |  if_ne	mov	result1, arg01
1ef24     FD 20 02 F6 | 	mov	local02, result1
1ef28     12 15 02 F6 | 	mov	arg02, local04
1ef2c     02 14 06 F1 | 	add	arg02, #2
1ef30     0A 15 E2 FA | 	rdword	arg02, arg02
1ef34     20 14 CE F7 | 	test	arg02, #32 wz
1ef38     10 14 CE A7 |  if_e	test	arg02, #16 wz
1ef3c     1C 00 90 5D |  if_ne	jmp	#LR__2915
1ef40     0A 15 42 F8 | 	getnib	arg02, arg02, #0
1ef44     13 15 0A F2 | 	cmp	arg02, local05 wz
1ef48     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
1ef4c     0C 00 90 5D |  if_ne	jmp	#LR__2914
1ef50     12 13 02 F6 | 	mov	arg01, local04
1ef54     84 FC BF FD | 	call	#__system___gc_dofree
1ef58     FD 20 02 F6 | 	mov	local02, result1
1ef5c                 | LR__2914
1ef5c                 | LR__2915
1ef5c     00 20 0E F2 | 	cmp	local02, #0 wz
1ef60     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
1ef64     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__2913
1ef68                 | LR__2916
1ef68     A7 F0 03 F6 | 	mov	ptra, fp
1ef6c     B2 00 A0 FD | 	call	#popregs_
1ef70                 | __system___gc_docollect_ret
1ef70     2D 00 64 FD | 	ret
1ef74                 | 
1ef74                 | __system___gc_markhub
1ef74     04 4A 05 F6 | 	mov	COUNT_, #4
1ef78     A8 00 A0 FD | 	call	#pushregs_
1ef7c     09 1F 02 F6 | 	mov	local01, arg01
1ef80     0A 21 02 F6 | 	mov	local02, arg02
1ef84     80 F8 BF FD | 	call	#__system___gc_ptrs
1ef88     FD 22 02 F6 | 	mov	local03, result1
1ef8c     FE 24 02 F6 | 	mov	local04, result2
1ef90                 | LR__2920
1ef90     10 1F 52 F2 | 	cmps	local01, local02 wc
1ef94     60 00 90 3D |  if_ae	jmp	#LR__2921
1ef98     0F 17 02 FB | 	rdlong	arg03, local01
1ef9c     04 1E 06 F1 | 	add	local01, #4
1efa0     12 15 02 F6 | 	mov	arg02, local04
1efa4     11 13 02 F6 | 	mov	arg01, local03
1efa8     8C FB BF FD | 	call	#__system___gc_isvalidptr
1efac     FD 16 0A F6 | 	mov	arg03, result1 wz
1efb0     DC FF 9F AD |  if_e	jmp	#LR__2920
1efb4     0B 13 02 F6 | 	mov	arg01, arg03
1efb8     00 FA 05 F6 | 	mov	result1, #0
1efbc     02 12 06 F1 | 	add	arg01, #2
1efc0     09 13 E2 FA | 	rdword	arg01, arg01
1efc4     36 00 00 FF 
1efc8     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1efcc     01 FA 65 A6 |  if_e	neg	result1, #1
1efd0     00 FA 0D F2 | 	cmp	result1, #0 wz
1efd4     B8 FF 9F 5D |  if_ne	jmp	#LR__2920
1efd8     0B FD 01 F6 | 	mov	result2, arg03
1efdc     02 FC 05 F1 | 	add	result2, #2
1efe0     FE FC E1 FA | 	rdword	result2, result2
1efe4     0F FC 25 F5 | 	andn	result2, #15
1efe8     2E FC 45 F5 | 	or	result2, #46
1efec     02 16 06 F1 | 	add	arg03, #2
1eff0     0B FD 51 FC | 	wrword	result2, arg03
1eff4     98 FF 9F FD | 	jmp	#LR__2920
1eff8                 | LR__2921
1eff8     A7 F0 03 F6 | 	mov	ptra, fp
1effc     B2 00 A0 FD | 	call	#popregs_
1f000                 | __system___gc_markhub_ret
1f000     2D 00 64 FD | 	ret
1f004                 | 
1f004                 | __system___gc_markcog
1f004     04 4A 05 F6 | 	mov	COUNT_, #4
1f008     A8 00 A0 FD | 	call	#pushregs_
1f00c     F8 F7 BF FD | 	call	#__system___gc_ptrs
1f010     FD 1E 02 F6 | 	mov	local01, result1
1f014     FE 20 02 F6 | 	mov	local02, result2
1f018     EF 23 06 F6 | 	mov	local03, #495
1f01c                 | LR__2930
1f01c                 | 	'.live	local03
1f01c     00 22 96 F9 | 	alts	local03, #0
1f020     11 25 02 F6 | 	mov	local04, local03
1f024     0F 13 02 F6 | 	mov	arg01, local01
1f028     10 15 02 F6 | 	mov	arg02, local02
1f02c     12 17 02 F6 | 	mov	arg03, local04
1f030     04 FB BF FD | 	call	#__system___gc_isvalidptr
1f034     00 FA 0D F2 | 	cmp	result1, #0 wz
1f038     18 00 90 AD |  if_e	jmp	#LR__2931
1f03c     FD 24 02 F6 | 	mov	local04, result1
1f040     02 24 06 F1 | 	add	local04, #2
1f044     12 25 E2 FA | 	rdword	local04, local04
1f048     20 24 46 F5 | 	or	local04, #32
1f04c     02 FA 05 F1 | 	add	result1, #2
1f050     FD 24 52 FC | 	wrword	local04, result1
1f054                 | LR__2931
1f054     01 22 86 F1 | 	sub	local03, #1
1f058     00 22 56 F2 | 	cmps	local03, #0 wc
1f05c     BC FF 9F 3D |  if_ae	jmp	#LR__2930
1f060     A7 F0 03 F6 | 	mov	ptra, fp
1f064     B2 00 A0 FD | 	call	#popregs_
1f068                 | __system___gc_markcog_ret
1f068     2D 00 64 FD | 	ret
1f06c                 | 
1f06c                 | __system__opendir
1f06c     06 4A 05 F6 | 	mov	COUNT_, #6
1f070     A8 00 A0 FD | 	call	#pushregs_
1f074     84 E7 05 F1 | 	add	ptr___system__dat__, #388
1f078     F3 1E 02 F6 | 	mov	local01, ptr___system__dat__
1f07c     09 15 02 F6 | 	mov	arg02, arg01
1f080     0F 13 02 F6 | 	mov	arg01, local01
1f084     00 16 06 F6 | 	mov	arg03, #0
1f088     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
1f08c     70 C3 BF FD | 	call	#__system____getvfsforfile
1f090     FD 20 0A F6 | 	mov	local02, result1 wz
1f094     10 00 90 AD |  if_e	jmp	#LR__2940
1f098     28 20 06 F1 | 	add	local02, #40
1f09c     10 17 0A FB | 	rdlong	arg03, local02 wz
1f0a0     28 20 86 F1 | 	sub	local02, #40
1f0a4     14 00 90 5D |  if_ne	jmp	#LR__2941
1f0a8                 | LR__2940
1f0a8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1f0ac     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
1f0b0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1f0b4     00 FA 05 F6 | 	mov	result1, #0
1f0b8     90 00 90 FD | 	jmp	#LR__2943
1f0bc                 | LR__2941
1f0bc     5C 12 06 F6 | 	mov	arg01, #92
1f0c0     10 14 06 F6 | 	mov	arg02, #16
1f0c4     C0 F9 BF FD | 	call	#__system___gc_doalloc
1f0c8     FD 22 0A F6 | 	mov	local03, result1 wz
1f0cc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
1f0d0     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
1f0d4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
1f0d8     00 FA 05 A6 |  if_e	mov	result1, #0
1f0dc     6C 00 90 AD |  if_e	jmp	#LR__2943
1f0e0     28 20 06 F1 | 	add	local02, #40
1f0e4     10 25 02 FB | 	rdlong	local04, local02
1f0e8     12 27 02 F6 | 	mov	local05, local04
1f0ec     28 20 86 F1 | 	sub	local02, #40
1f0f0     13 26 46 F7 | 	zerox	local05, #19
1f0f4     14 24 46 F0 | 	shr	local04, #20
1f0f8     02 24 66 F0 | 	shl	local04, #2
1f0fc     ED 24 02 F1 | 	add	local04, __methods__
1f100     12 25 02 FB | 	rdlong	local04, local04
1f104     11 13 02 F6 | 	mov	arg01, local03
1f108     0F 15 02 F6 | 	mov	arg02, local01
1f10c     F2 28 02 F6 | 	mov	local06, objptr
1f110     13 E5 01 F6 | 	mov	objptr, local05
1f114     2D 24 62 FD | 	call	local04
1f118     14 E5 01 F6 | 	mov	objptr, local06
1f11c     FD 16 0A F6 | 	mov	arg03, result1 wz
1f120     20 00 90 AD |  if_e	jmp	#LR__2942
1f124     00 16 4E F2 | 	cmps	arg03, #0 wz
1f128     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1f12c     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
1f130     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1f134     11 13 02 F6 | 	mov	arg01, local03
1f138     58 FA BF FD | 	call	#__system___gc_free
1f13c     00 FA 05 F6 | 	mov	result1, #0
1f140     08 00 90 FD | 	jmp	#LR__2943
1f144                 | LR__2942
1f144     11 21 62 FC | 	wrlong	local02, local03
1f148     11 FB 01 F6 | 	mov	result1, local03
1f14c                 | LR__2943
1f14c     A7 F0 03 F6 | 	mov	ptra, fp
1f150     B2 00 A0 FD | 	call	#popregs_
1f154                 | __system__opendir_ret
1f154     2D 00 64 FD | 	ret
1f158                 | 
1f158                 | __system__closedir
1f158     04 4A 05 F6 | 	mov	COUNT_, #4
1f15c     A8 00 A0 FD | 	call	#pushregs_
1f160     09 1F 02 F6 | 	mov	local01, arg01
1f164     0F 13 02 FB | 	rdlong	arg01, local01
1f168     2C 12 06 F1 | 	add	arg01, #44
1f16c     09 21 02 FB | 	rdlong	local02, arg01
1f170     10 23 02 F6 | 	mov	local03, local02
1f174     13 22 46 F7 | 	zerox	local03, #19
1f178     14 20 46 F0 | 	shr	local02, #20
1f17c     02 20 66 F0 | 	shl	local02, #2
1f180     ED 20 02 F1 | 	add	local02, __methods__
1f184     10 21 02 FB | 	rdlong	local02, local02
1f188     0F 13 02 F6 | 	mov	arg01, local01
1f18c     F2 24 02 F6 | 	mov	local04, objptr
1f190     11 E5 01 F6 | 	mov	objptr, local03
1f194     2D 20 62 FD | 	call	local02
1f198     12 E5 01 F6 | 	mov	objptr, local04
1f19c     FD 24 02 F6 | 	mov	local04, result1
1f1a0     0F 13 02 F6 | 	mov	arg01, local01
1f1a4     EC F9 BF FD | 	call	#__system___gc_free
1f1a8     00 24 4E F2 | 	cmps	local04, #0 wz
1f1ac     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1f1b0     F3 24 62 FC | 	wrlong	local04, ptr___system__dat__
1f1b4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1f1b8     01 FA 65 56 |  if_ne	neg	result1, #1
1f1bc     00 FA 05 A6 |  if_e	mov	result1, #0
1f1c0     A7 F0 03 F6 | 	mov	ptra, fp
1f1c4     B2 00 A0 FD | 	call	#popregs_
1f1c8                 | __system__closedir_ret
1f1c8     2D 00 64 FD | 	ret
1f1cc                 | 
1f1cc                 | __system__readdir
1f1cc     04 4A 05 F6 | 	mov	COUNT_, #4
1f1d0     A8 00 A0 FD | 	call	#pushregs_
1f1d4     09 15 0A FB | 	rdlong	arg02, arg01 wz
1f1d8     08 12 06 F1 | 	add	arg01, #8
1f1dc     09 1F 02 F6 | 	mov	local01, arg01
1f1e0     08 12 86 F1 | 	sub	arg01, #8
1f1e4     00 FA 05 A6 |  if_e	mov	result1, #0
1f1e8     5C 00 90 AD |  if_e	jmp	#LR__2951
1f1ec     30 14 06 F1 | 	add	arg02, #48
1f1f0     0A 21 02 FB | 	rdlong	local02, arg02
1f1f4     10 23 02 F6 | 	mov	local03, local02
1f1f8     13 22 46 F7 | 	zerox	local03, #19
1f1fc     14 20 46 F0 | 	shr	local02, #20
1f200     02 20 66 F0 | 	shl	local02, #2
1f204     ED 20 02 F1 | 	add	local02, __methods__
1f208     10 21 02 FB | 	rdlong	local02, local02
1f20c     0F 15 02 F6 | 	mov	arg02, local01
1f210     F2 24 02 F6 | 	mov	local04, objptr
1f214     11 E5 01 F6 | 	mov	objptr, local03
1f218     2D 20 62 FD | 	call	local02
1f21c     12 E5 01 F6 | 	mov	objptr, local04
1f220     00 FA 4D F2 | 	cmps	result1, #0 wz
1f224     1C 00 90 AD |  if_e	jmp	#LR__2950
1f228     01 FA 55 F2 | 	cmps	result1, #1 wc
1f22c     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
1f230     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
1f234     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
1f238     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
1f23c     00 FA 05 F6 | 	mov	result1, #0
1f240     04 00 90 FD | 	jmp	#LR__2951
1f244                 | LR__2950
1f244     0F FB 01 F6 | 	mov	result1, local01
1f248                 | LR__2951
1f248     A7 F0 03 F6 | 	mov	ptra, fp
1f24c     B2 00 A0 FD | 	call	#popregs_
1f250                 | __system__readdir_ret
1f250     2D 00 64 FD | 	ret
1f254                 | 
1f254                 | __system___openraw
1f254     15 4A 05 F6 | 	mov	COUNT_, #21
1f258     A8 00 A0 FD | 	call	#pushregs_
1f25c     09 1F 02 F6 | 	mov	local01, arg01
1f260     0A 21 02 F6 | 	mov	local02, arg02
1f264     0B 23 02 F6 | 	mov	local03, arg03
1f268     0C 25 02 F6 | 	mov	local04, arg04
1f26c     04 26 06 F6 | 	mov	local05, #4
1f270     0F 29 02 F6 | 	mov	local06, local01
1f274     00 2A 06 F6 | 	mov	local07, #0
1f278     84 E7 05 F1 | 	add	ptr___system__dat__, #388
1f27c     F3 2C 02 F6 | 	mov	local08, ptr___system__dat__
1f280     16 13 02 F6 | 	mov	arg01, local08
1f284     10 15 02 F6 | 	mov	arg02, local02
1f288     00 16 06 F6 | 	mov	arg03, #0
1f28c     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
1f290     6C C1 BF FD | 	call	#__system____getvfsforfile
1f294     FD 2E 0A F6 | 	mov	local09, result1 wz
1f298     10 00 90 AD |  if_e	jmp	#LR__2960
1f29c     20 2E 06 F1 | 	add	local09, #32
1f2a0     17 FB 09 FB | 	rdlong	result1, local09 wz
1f2a4     20 2E 86 F1 | 	sub	local09, #32
1f2a8     14 00 90 5D |  if_ne	jmp	#LR__2961
1f2ac                 | LR__2960
1f2ac     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1f2b0     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
1f2b4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1f2b8     01 FA 65 F6 | 	neg	result1, #1
1f2bc     88 02 90 FD | 	jmp	#LR__2974
1f2c0                 | LR__2961
1f2c0     14 13 02 F6 | 	mov	arg01, local06
1f2c4     00 14 06 F6 | 	mov	arg02, #0
1f2c8     34 16 06 F6 | 	mov	arg03, #52
1f2cc     09 31 02 F6 | 	mov	local10, arg01
1f2d0     98 00 A0 FD | 	call	#\builtin_bytefill_
1f2d4     20 2E 06 F1 | 	add	local09, #32
1f2d8     17 33 02 FB | 	rdlong	local11, local09
1f2dc     19 35 02 F6 | 	mov	local12, local11
1f2e0     19 37 02 F6 | 	mov	local13, local11
1f2e4     20 2E 86 F1 | 	sub	local09, #32
1f2e8     1B 39 02 F6 | 	mov	local14, local13
1f2ec     13 34 46 F7 | 	zerox	local12, #19
1f2f0     14 38 46 F0 | 	shr	local14, #20
1f2f4     02 38 66 F0 | 	shl	local14, #2
1f2f8     ED 38 02 F1 | 	add	local14, __methods__
1f2fc     1C 39 02 FB | 	rdlong	local14, local14
1f300     14 3B 02 F6 | 	mov	local15, local06
1f304     16 3D 02 F6 | 	mov	local16, local08
1f308     11 3F 02 F6 | 	mov	local17, local03
1f30c     1D 13 02 F6 | 	mov	arg01, local15
1f310     1E 15 02 F6 | 	mov	arg02, local16
1f314     1F 17 02 F6 | 	mov	arg03, local17
1f318     F2 40 02 F6 | 	mov	local18, objptr
1f31c     1A E5 01 F6 | 	mov	objptr, local12
1f320     2D 38 62 FD | 	call	local14
1f324     20 E5 01 F6 | 	mov	objptr, local18
1f328     FD 42 0A F6 | 	mov	local19, result1 wz
1f32c     04 22 CE 57 |  if_ne	test	local03, #4 wz
1f330     58 00 90 AD |  if_e	jmp	#LR__2962
1f334     24 2E 06 F1 | 	add	local09, #36
1f338     17 33 02 FB | 	rdlong	local11, local09
1f33c     19 35 02 F6 | 	mov	local12, local11
1f340     19 37 02 F6 | 	mov	local13, local11
1f344     24 2E 86 F1 | 	sub	local09, #36
1f348     1B 39 02 F6 | 	mov	local14, local13
1f34c     13 34 46 F7 | 	zerox	local12, #19
1f350     14 38 46 F0 | 	shr	local14, #20
1f354     02 38 66 F0 | 	shl	local14, #2
1f358     ED 38 02 F1 | 	add	local14, __methods__
1f35c     1C 39 02 FB | 	rdlong	local14, local14
1f360     14 3B 02 F6 | 	mov	local15, local06
1f364     16 3D 02 F6 | 	mov	local16, local08
1f368     12 3F 02 F6 | 	mov	local17, local04
1f36c     1D 13 02 F6 | 	mov	arg01, local15
1f370     1E 15 02 F6 | 	mov	arg02, local16
1f374     1F 17 02 F6 | 	mov	arg03, local17
1f378     F2 40 02 F6 | 	mov	local18, objptr
1f37c     1A E5 01 F6 | 	mov	objptr, local12
1f380     2D 38 62 FD | 	call	local14
1f384     20 E5 01 F6 | 	mov	objptr, local18
1f388     FD 42 02 F6 | 	mov	local19, result1
1f38c                 | LR__2962
1f38c     00 42 0E F2 | 	cmp	local19, #0 wz
1f390     88 01 90 5D |  if_ne	jmp	#LR__2972
1f394     11 45 02 F6 | 	mov	local20, local03
1f398     03 44 0E F5 | 	and	local20, #3 wz
1f39c     02 26 46 55 |  if_ne	or	local05, #2
1f3a0     01 44 0E F2 | 	cmp	local20, #1 wz
1f3a4     01 26 46 55 |  if_ne	or	local05, #1
1f3a8     20 22 CE F7 | 	test	local03, #32 wz
1f3ac     C0 26 46 55 |  if_ne	or	local05, #192
1f3b0     08 28 06 F1 | 	add	local06, #8
1f3b4     14 27 62 FC | 	wrlong	local05, local06
1f3b8     0C 28 06 F1 | 	add	local06, #12
1f3bc     14 47 0A FB | 	rdlong	local21, local06 wz
1f3c0     14 28 86 F1 | 	sub	local06, #20
1f3c4     18 00 90 5D |  if_ne	jmp	#LR__2963
1f3c8     04 2E 06 F1 | 	add	local09, #4
1f3cc     17 47 02 FB | 	rdlong	local21, local09
1f3d0     04 2E 86 F1 | 	sub	local09, #4
1f3d4     14 28 06 F1 | 	add	local06, #20
1f3d8     14 47 62 FC | 	wrlong	local21, local06
1f3dc     14 28 86 F1 | 	sub	local06, #20
1f3e0                 | LR__2963
1f3e0     18 28 06 F1 | 	add	local06, #24
1f3e4     14 47 0A FB | 	rdlong	local21, local06 wz
1f3e8     18 28 86 F1 | 	sub	local06, #24
1f3ec     18 00 90 5D |  if_ne	jmp	#LR__2964
1f3f0     08 2E 06 F1 | 	add	local09, #8
1f3f4     17 47 02 FB | 	rdlong	local21, local09
1f3f8     08 2E 86 F1 | 	sub	local09, #8
1f3fc     18 28 06 F1 | 	add	local06, #24
1f400     14 47 62 FC | 	wrlong	local21, local06
1f404     18 28 86 F1 | 	sub	local06, #24
1f408                 | LR__2964
1f408     24 28 06 F1 | 	add	local06, #36
1f40c     14 47 0A FB | 	rdlong	local21, local06 wz
1f410     24 28 86 F1 | 	sub	local06, #36
1f414     17 47 02 AB |  if_e	rdlong	local21, local09
1f418     24 28 06 A1 |  if_e	add	local06, #36
1f41c     14 47 62 AC |  if_e	wrlong	local21, local06
1f420     24 28 86 A1 |  if_e	sub	local06, #36
1f424     28 28 06 F1 | 	add	local06, #40
1f428     14 47 0A FB | 	rdlong	local21, local06 wz
1f42c     28 28 86 F1 | 	sub	local06, #40
1f430     18 00 90 5D |  if_ne	jmp	#LR__2965
1f434     10 2E 06 F1 | 	add	local09, #16
1f438     17 47 02 FB | 	rdlong	local21, local09
1f43c     10 2E 86 F1 | 	sub	local09, #16
1f440     28 28 06 F1 | 	add	local06, #40
1f444     14 47 62 FC | 	wrlong	local21, local06
1f448     28 28 86 F1 | 	sub	local06, #40
1f44c                 | LR__2965
1f44c     30 28 06 F1 | 	add	local06, #48
1f450     14 47 0A FB | 	rdlong	local21, local06 wz
1f454     30 28 86 F1 | 	sub	local06, #48
1f458     18 00 90 5D |  if_ne	jmp	#LR__2966
1f45c     0C 2E 06 F1 | 	add	local09, #12
1f460     17 47 02 FB | 	rdlong	local21, local09
1f464     0C 2E 86 F1 | 	sub	local09, #12
1f468     30 28 06 F1 | 	add	local06, #48
1f46c     14 47 62 FC | 	wrlong	local21, local06
1f470     30 28 86 F1 | 	sub	local06, #48
1f474                 | LR__2966
1f474     1C 28 06 F1 | 	add	local06, #28
1f478     14 47 0A FB | 	rdlong	local21, local06 wz
1f47c     1C 28 86 F1 | 	sub	local06, #28
1f480     1C 00 90 5D |  if_ne	jmp	#LR__2967
1f484     01 2A 06 F6 | 	mov	local07, #1
1f488     F2 12 02 F6 | 	mov	arg01, objptr
1f48c     00 B0 03 FF 
1f490     00 12 46 F5 | 	or	arg01, ##123731968
1f494     1C 28 06 F1 | 	add	local06, #28
1f498     14 13 62 FC | 	wrlong	arg01, local06
1f49c     1C 28 86 F1 | 	sub	local06, #28
1f4a0                 | LR__2967
1f4a0     20 28 06 F1 | 	add	local06, #32
1f4a4     14 47 0A FB | 	rdlong	local21, local06 wz
1f4a8     20 28 86 F1 | 	sub	local06, #32
1f4ac     1C 00 90 5D |  if_ne	jmp	#LR__2968
1f4b0     01 2A 06 F6 | 	mov	local07, #1
1f4b4     F2 12 02 F6 | 	mov	arg01, objptr
1f4b8     00 B8 03 FF 
1f4bc     00 12 46 F5 | 	or	arg01, ##124780544
1f4c0     20 28 06 F1 | 	add	local06, #32
1f4c4     14 13 62 FC | 	wrlong	arg01, local06
1f4c8     20 28 86 F1 | 	sub	local06, #32
1f4cc                 | LR__2968
1f4cc     2C 28 06 F1 | 	add	local06, #44
1f4d0     14 47 0A FB | 	rdlong	local21, local06 wz
1f4d4     2C 28 86 F1 | 	sub	local06, #44
1f4d8     40 00 90 5D |  if_ne	jmp	#LR__2971
1f4dc     14 2E 06 F1 | 	add	local09, #20
1f4e0     17 47 0A FB | 	rdlong	local21, local09 wz
1f4e4     14 2E 86 F1 | 	sub	local09, #20
1f4e8     18 00 90 AD |  if_e	jmp	#LR__2969
1f4ec     14 2E 06 F1 | 	add	local09, #20
1f4f0     17 47 02 FB | 	rdlong	local21, local09
1f4f4     2C 28 06 F1 | 	add	local06, #44
1f4f8     14 47 62 FC | 	wrlong	local21, local06
1f4fc     2C 28 86 F1 | 	sub	local06, #44
1f500     18 00 90 FD | 	jmp	#LR__2970
1f504                 | LR__2969
1f504     01 2A 06 F6 | 	mov	local07, #1
1f508     F2 12 02 F6 | 	mov	arg01, objptr
1f50c     77 12 26 F4 | 	bith	arg01, #119
1f510     2C 28 06 F1 | 	add	local06, #44
1f514     14 13 62 FC | 	wrlong	arg01, local06
1f518     2C 28 86 F1 | 	sub	local06, #44
1f51c                 | LR__2970
1f51c                 | LR__2971
1f51c                 | LR__2972
1f51c     00 2A 0E F2 | 	cmp	local07, #0 wz
1f520     14 13 02 56 |  if_ne	mov	arg01, local06
1f524     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
1f528     00 42 0E F2 | 	cmp	local19, #0 wz
1f52c     00 12 06 A6 |  if_e	mov	arg01, #0
1f530     10 00 90 5D |  if_ne	jmp	#LR__2973
1f534     00 12 4E F2 | 	cmps	arg01, #0 wz
1f538     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1f53c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1f540     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1f544                 | LR__2973
1f544     21 FB 01 F6 | 	mov	result1, local19
1f548                 | LR__2974
1f548     A7 F0 03 F6 | 	mov	ptra, fp
1f54c     B2 00 A0 FD | 	call	#popregs_
1f550                 | __system___openraw_ret
1f550     2D 00 64 FD | 	ret
1f554                 | 
1f554                 | __system___closeraw
1f554     05 4A 05 F6 | 	mov	COUNT_, #5
1f558     A8 00 A0 FD | 	call	#pushregs_
1f55c     09 1F 02 F6 | 	mov	local01, arg01
1f560     00 20 06 F6 | 	mov	local02, #0
1f564     08 1E 06 F1 | 	add	local01, #8
1f568     0F FB 09 FB | 	rdlong	result1, local01 wz
1f56c     08 1E 86 F1 | 	sub	local01, #8
1f570     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
1f574     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
1f578     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
1f57c     01 FA 65 A6 |  if_e	neg	result1, #1
1f580     A8 00 90 AD |  if_e	jmp	#LR__2982
1f584     2C 1E 06 F1 | 	add	local01, #44
1f588     0F FB 09 FB | 	rdlong	result1, local01 wz
1f58c     2C 1E 86 F1 | 	sub	local01, #44
1f590     38 00 90 AD |  if_e	jmp	#LR__2980
1f594     2C 1E 06 F1 | 	add	local01, #44
1f598     0F 23 02 FB | 	rdlong	local03, local01
1f59c     11 25 02 F6 | 	mov	local04, local03
1f5a0     2C 1E 86 F1 | 	sub	local01, #44
1f5a4     13 24 46 F7 | 	zerox	local04, #19
1f5a8     14 22 46 F0 | 	shr	local03, #20
1f5ac     02 22 66 F0 | 	shl	local03, #2
1f5b0     ED 22 02 F1 | 	add	local03, __methods__
1f5b4     11 23 02 FB | 	rdlong	local03, local03
1f5b8     0F 13 02 F6 | 	mov	arg01, local01
1f5bc     F2 26 02 F6 | 	mov	local05, objptr
1f5c0     12 E5 01 F6 | 	mov	objptr, local04
1f5c4     2D 22 62 FD | 	call	local03
1f5c8     13 E5 01 F6 | 	mov	objptr, local05
1f5cc                 | LR__2980
1f5cc     24 1E 06 F1 | 	add	local01, #36
1f5d0     0F 27 0A FB | 	rdlong	local05, local01 wz
1f5d4     24 1E 86 F1 | 	sub	local01, #36
1f5d8     3C 00 90 AD |  if_e	jmp	#LR__2981
1f5dc     24 1E 06 F1 | 	add	local01, #36
1f5e0     0F 23 02 FB | 	rdlong	local03, local01
1f5e4     11 25 02 F6 | 	mov	local04, local03
1f5e8     24 1E 86 F1 | 	sub	local01, #36
1f5ec     13 24 46 F7 | 	zerox	local04, #19
1f5f0     14 22 46 F0 | 	shr	local03, #20
1f5f4     02 22 66 F0 | 	shl	local03, #2
1f5f8     ED 22 02 F1 | 	add	local03, __methods__
1f5fc     11 23 02 FB | 	rdlong	local03, local03
1f600     0F 13 02 F6 | 	mov	arg01, local01
1f604     F2 26 02 F6 | 	mov	local05, objptr
1f608     12 E5 01 F6 | 	mov	objptr, local04
1f60c     2D 22 62 FD | 	call	local03
1f610     13 E5 01 F6 | 	mov	objptr, local05
1f614     FD 20 02 F6 | 	mov	local02, result1
1f618                 | LR__2981
1f618     0F 13 02 F6 | 	mov	arg01, local01
1f61c     00 14 06 F6 | 	mov	arg02, #0
1f620     34 16 06 F6 | 	mov	arg03, #52
1f624     98 00 A0 FD | 	call	#\builtin_bytefill_
1f628     10 FB 01 F6 | 	mov	result1, local02
1f62c                 | LR__2982
1f62c     A7 F0 03 F6 | 	mov	ptra, fp
1f630     B2 00 A0 FD | 	call	#popregs_
1f634                 | __system___closeraw_ret
1f634     2D 00 64 FD | 	ret
1f638                 | 
1f638                 | __system___vfs_open_sdcardx
1f638     0B 4A 05 F6 | 	mov	COUNT_, #11
1f63c     A8 00 A0 FD | 	call	#pushregs_
1f640     09 23 02 F6 | 	mov	local03, arg01
1f644     0A 25 02 F6 | 	mov	local04, arg02
1f648     0B 27 02 F6 | 	mov	local05, arg03
1f64c     0C 29 02 F6 | 	mov	local06, arg04
1f650     01 00 00 FF 
1f654     24 12 06 F6 | 	mov	arg01, ##548
1f658     FC F3 BF FD | 	call	#__system___gc_alloc_managed
1f65c     FD 2A 02 F6 | 	mov	local07, result1
1f660     01 00 00 FF 
1f664     34 12 06 F6 | 	mov	arg01, ##564
1f668     EC F3 BF FD | 	call	#__system___gc_alloc_managed
1f66c     FD 2C 02 F6 | 	mov	local08, result1
1f670     11 19 02 F6 | 	mov	arg04, local03
1f674     1F 18 C6 F0 | 	sar	arg04, #31
1f678     11 17 02 F6 | 	mov	arg03, local03
1f67c     01 12 06 F6 | 	mov	arg01, #1
1f680     00 14 06 F6 | 	mov	arg02, #0
1f684     4C DC BF FD | 	call	#__system___int64_shl
1f688     FD 1E 02 F6 | 	mov	local01, result1
1f68c     FE 2E 02 F6 | 	mov	local09, result2
1f690     12 19 02 F6 | 	mov	arg04, local04
1f694     1F 18 C6 F0 | 	sar	arg04, #31
1f698     12 17 02 F6 | 	mov	arg03, local04
1f69c     01 12 06 F6 | 	mov	arg01, #1
1f6a0     00 14 06 F6 | 	mov	arg02, #0
1f6a4     2C DC BF FD | 	call	#__system___int64_shl
1f6a8     FD 1E 42 F5 | 	or	local01, result1
1f6ac     FE 2E 42 F5 | 	or	local09, result2
1f6b0     13 19 02 F6 | 	mov	arg04, local05
1f6b4     1F 18 C6 F0 | 	sar	arg04, #31
1f6b8     13 17 02 F6 | 	mov	arg03, local05
1f6bc     01 12 06 F6 | 	mov	arg01, #1
1f6c0     00 14 06 F6 | 	mov	arg02, #0
1f6c4     0C DC BF FD | 	call	#__system___int64_shl
1f6c8     FD 1E 42 F5 | 	or	local01, result1
1f6cc     FE 2E 42 F5 | 	or	local09, result2
1f6d0     14 19 02 F6 | 	mov	arg04, local06
1f6d4     1F 18 C6 F0 | 	sar	arg04, #31
1f6d8     14 17 02 F6 | 	mov	arg03, local06
1f6dc     01 12 06 F6 | 	mov	arg01, #1
1f6e0     00 14 06 F6 | 	mov	arg02, #0
1f6e4     EC DB BF FD | 	call	#__system___int64_shl
1f6e8     17 15 02 F6 | 	mov	arg02, local09
1f6ec     FD 1E 42 F5 | 	or	local01, result1
1f6f0     0A FD 41 F5 | 	or	result2, arg02
1f6f4     FE 20 02 F6 | 	mov	local02, result2
1f6f8     0F 13 02 F6 | 	mov	arg01, local01
1f6fc     10 15 02 F6 | 	mov	arg02, local02
1f700     08 DC BF FD | 	call	#__system___usepins
1f704     00 FA 0D F2 | 	cmp	result1, #0 wz
1f708     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
1f70c     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
1f710     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
1f714     00 FA 05 A6 |  if_e	mov	result1, #0
1f718     B4 00 90 AD |  if_e	jmp	#LR__2992
1f71c     0F 31 02 F6 | 	mov	local10, local01
1f720     10 2F 02 F6 | 	mov	local09, local02
1f724     01 00 00 FF 
1f728     08 2A 06 F1 | 	add	local07, ##520
1f72c     15 31 62 FC | 	wrlong	local10, local07
1f730     04 2A 06 F1 | 	add	local07, #4
1f734     15 2F 62 FC | 	wrlong	local09, local07
1f738     01 00 00 FF 
1f73c     0C 2A 86 F1 | 	sub	local07, ##524
1f740     14 1B 02 F6 | 	mov	arg05, local06
1f744     00 12 06 F6 | 	mov	arg01, #0
1f748     11 15 02 F6 | 	mov	arg02, local03
1f74c     12 17 02 F6 | 	mov	arg03, local04
1f750     13 19 02 F6 | 	mov	arg04, local05
1f754     F2 30 02 F6 | 	mov	local10, objptr
1f758     15 E5 01 F6 | 	mov	objptr, local07
1f75c     78 27 B0 FD | 	call	#_fatfs_cc_disk_setpins
1f760     18 E5 01 F6 | 	mov	objptr, local10
1f764     FD 32 0A F6 | 	mov	local11, result1 wz
1f768     24 00 90 5D |  if_ne	jmp	#LR__2990
1f76c     51 01 00 FF 
1f770     12 14 06 F6 | 	mov	arg02, ##@LR__4387
1f774     16 13 02 F6 | 	mov	arg01, local08
1f778     00 16 06 F6 | 	mov	arg03, #0
1f77c     F2 32 02 F6 | 	mov	local11, objptr
1f780     15 E5 01 F6 | 	mov	objptr, local07
1f784     A8 5E B0 FD | 	call	#_fatfs_cc_f_mount
1f788     19 E5 01 F6 | 	mov	objptr, local11
1f78c     FD 32 02 F6 | 	mov	local11, result1
1f790                 | LR__2990
1f790     00 32 0E F2 | 	cmp	local11, #0 wz
1f794     24 00 90 AD |  if_e	jmp	#LR__2991
1f798     0F 13 02 F6 | 	mov	arg01, local01
1f79c     10 15 02 F6 | 	mov	arg02, local02
1f7a0     BC DB BF FD | 	call	#__system___freepins
1f7a4     19 13 6A F6 | 	neg	arg01, local11 wz
1f7a8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1f7ac     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1f7b0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1f7b4     00 FA 05 F6 | 	mov	result1, #0
1f7b8     14 00 90 FD | 	jmp	#LR__2992
1f7bc                 | LR__2991
1f7bc     15 13 02 F6 | 	mov	arg01, local07
1f7c0     F2 32 02 F6 | 	mov	local11, objptr
1f7c4     15 E5 01 F6 | 	mov	objptr, local07
1f7c8     44 9B B0 FD | 	call	#_fatfs_cc_get_vfs
1f7cc     19 E5 01 F6 | 	mov	objptr, local11
1f7d0                 | LR__2992
1f7d0     A7 F0 03 F6 | 	mov	ptra, fp
1f7d4     B2 00 A0 FD | 	call	#popregs_
1f7d8                 | __system___vfs_open_sdcardx_ret
1f7d8     2D 00 64 FD | 	ret
1f7dc                 | 
1f7dc                 | __system____default_getc
1f7dc     03 4A 05 F6 | 	mov	COUNT_, #3
1f7e0     A8 00 A0 FD | 	call	#pushregs_
1f7e4     09 1F 02 F6 | 	mov	local01, arg01
1f7e8     0F 21 02 FB | 	rdlong	local02, local01
1f7ec     08 20 06 F1 | 	add	local02, #8
1f7f0     10 23 02 FB | 	rdlong	local03, local02
1f7f4     02 22 CE F7 | 	test	local03, #2 wz
1f7f8     0F 13 02 56 |  if_ne	mov	arg01, local01
1f7fc     00 01 B0 5D |  if_ne	call	#__system____default_flush
1f800     10 23 02 FB | 	rdlong	local03, local02
1f804     01 22 46 F5 | 	or	local03, #1
1f808     10 23 62 FC | 	wrlong	local03, local02
1f80c     08 20 86 F1 | 	sub	local02, #8
1f810     10 23 0A FB | 	rdlong	local03, local02 wz
1f814     0C 00 90 5D |  if_ne	jmp	#LR__3000
1f818     0F 13 02 F6 | 	mov	arg01, local01
1f81c     60 16 B0 FD | 	call	#__system____default_filbuf
1f820     FD 22 02 F6 | 	mov	local03, result1
1f824                 | LR__3000
1f824     01 22 56 F2 | 	cmps	local03, #1 wc
1f828     01 FA 65 C6 |  if_b	neg	result1, #1
1f82c     1C 00 90 CD |  if_b	jmp	#LR__3001
1f830     01 22 86 F1 | 	sub	local03, #1
1f834     10 23 62 FC | 	wrlong	local03, local02
1f838     04 20 06 F1 | 	add	local02, #4
1f83c     10 23 02 FB | 	rdlong	local03, local02
1f840     11 FB C1 FA | 	rdbyte	result1, local03
1f844     01 22 06 F1 | 	add	local03, #1
1f848     10 23 62 FC | 	wrlong	local03, local02
1f84c                 | LR__3001
1f84c     A7 F0 03 F6 | 	mov	ptra, fp
1f850     B2 00 A0 FD | 	call	#popregs_
1f854                 | __system____default_getc_ret
1f854     2D 00 64 FD | 	ret
1f858                 | 
1f858                 | __system____default_putc
1f858     06 4A 05 F6 | 	mov	COUNT_, #6
1f85c     A8 00 A0 FD | 	call	#pushregs_
1f860     09 1F 02 F6 | 	mov	local01, arg01
1f864     0A 21 02 F6 | 	mov	local02, arg02
1f868     10 23 02 FB | 	rdlong	local03, local02
1f86c     08 22 06 F1 | 	add	local03, #8
1f870     11 FB 01 FB | 	rdlong	result1, local03
1f874     01 FA CD F7 | 	test	result1, #1 wz
1f878     10 13 02 56 |  if_ne	mov	arg01, local02
1f87c     80 00 B0 5D |  if_ne	call	#__system____default_flush
1f880     11 25 02 FB | 	rdlong	local04, local03
1f884     02 24 46 F5 | 	or	local04, #2
1f888     11 25 62 FC | 	wrlong	local04, local03
1f88c     08 22 86 F1 | 	sub	local03, #8
1f890     11 27 02 FB | 	rdlong	local05, local03
1f894     10 22 06 F1 | 	add	local03, #16
1f898     11 15 02 FB | 	rdlong	arg02, local03
1f89c     10 22 86 F1 | 	sub	local03, #16
1f8a0     13 FB 01 F6 | 	mov	result1, local05
1f8a4     0A FB 01 F1 | 	add	result1, arg02
1f8a8     FD 1E 42 FC | 	wrbyte	local01, result1
1f8ac     0F 1F E2 F8 | 	getbyte	local01, local01, #0
1f8b0     01 26 06 F1 | 	add	local05, #1
1f8b4     11 27 62 FC | 	wrlong	local05, local03
1f8b8     06 20 06 F1 | 	add	local02, #6
1f8bc     10 29 EA FA | 	rdword	local06, local02 wz
1f8c0     06 20 86 F1 | 	sub	local02, #6
1f8c4     0C 22 06 51 |  if_ne	add	local03, #12
1f8c8     11 25 02 5B |  if_ne	rdlong	local04, local03
1f8cc     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
1f8d0     0C 00 90 AD |  if_e	jmp	#LR__3010
1f8d4     0A 1E 0E F2 | 	cmp	local01, #10 wz
1f8d8     01 28 0E A2 |  if_e	cmp	local06, #1 wz
1f8dc     10 00 90 5D |  if_ne	jmp	#LR__3011
1f8e0                 | LR__3010
1f8e0     10 13 02 F6 | 	mov	arg01, local02
1f8e4     18 00 B0 FD | 	call	#__system____default_flush
1f8e8     00 FA 0D F2 | 	cmp	result1, #0 wz
1f8ec     01 1E 66 56 |  if_ne	neg	local01, #1
1f8f0                 | LR__3011
1f8f0     0F FB 01 F6 | 	mov	result1, local01
1f8f4     A7 F0 03 F6 | 	mov	ptra, fp
1f8f8     B2 00 A0 FD | 	call	#popregs_
1f8fc                 | __system____default_putc_ret
1f8fc     2D 00 64 FD | 	ret
1f900                 | 
1f900                 | __system____default_flush
1f900     06 4A 05 F6 | 	mov	COUNT_, #6
1f904     A8 00 A0 FD | 	call	#pushregs_
1f908     09 1F 02 F6 | 	mov	local01, arg01
1f90c     0F 21 02 FB | 	rdlong	local02, local01
1f910     10 23 02 FB | 	rdlong	local03, local02
1f914     08 20 06 F1 | 	add	local02, #8
1f918     10 FB 01 FB | 	rdlong	result1, local02
1f91c     08 20 86 F1 | 	sub	local02, #8
1f920     02 FA CD F7 | 	test	result1, #2 wz
1f924     D0 00 90 AD |  if_e	jmp	#LR__3022
1f928     01 22 56 F2 | 	cmps	local03, #1 wc
1f92c     20 01 90 CD |  if_b	jmp	#LR__3024
1f930     08 1E 06 F1 | 	add	local01, #8
1f934     0F FB 01 FB | 	rdlong	result1, local01
1f938     08 1E 86 F1 | 	sub	local01, #8
1f93c     40 FA CD F7 | 	test	result1, #64 wz
1f940     68 00 90 AD |  if_e	jmp	#LR__3021
1f944     08 1E 06 F1 | 	add	local01, #8
1f948     0F 17 02 FB | 	rdlong	arg03, local01
1f94c     08 1E 86 F1 | 	sub	local01, #8
1f950     80 16 CE F7 | 	test	arg03, #128 wz
1f954     54 00 90 AD |  if_e	jmp	#LR__3020
1f958     30 1E 06 F1 | 	add	local01, #48
1f95c     0F 25 02 FB | 	rdlong	local04, local01
1f960     12 27 02 F6 | 	mov	local05, local04
1f964     30 1E 86 F1 | 	sub	local01, #48
1f968     13 26 46 F7 | 	zerox	local05, #19
1f96c     14 24 46 F0 | 	shr	local04, #20
1f970     02 24 66 F0 | 	shl	local04, #2
1f974     ED 24 02 F1 | 	add	local04, __methods__
1f978     12 25 02 FB | 	rdlong	local04, local04
1f97c     0F 13 02 F6 | 	mov	arg01, local01
1f980     00 14 06 F6 | 	mov	arg02, #0
1f984     02 16 06 F6 | 	mov	arg03, #2
1f988     F2 28 02 F6 | 	mov	local06, objptr
1f98c     13 E5 01 F6 | 	mov	objptr, local05
1f990     2D 24 62 FD | 	call	local04
1f994     14 E5 01 F6 | 	mov	objptr, local06
1f998     08 1E 06 F1 | 	add	local01, #8
1f99c     0F 29 02 FB | 	rdlong	local06, local01
1f9a0     80 28 26 F5 | 	andn	local06, #128
1f9a4     0F 29 62 FC | 	wrlong	local06, local01
1f9a8     08 1E 86 F1 | 	sub	local01, #8
1f9ac                 | LR__3020
1f9ac                 | LR__3021
1f9ac     18 1E 06 F1 | 	add	local01, #24
1f9b0     0F 25 02 FB | 	rdlong	local04, local01
1f9b4     12 27 02 F6 | 	mov	local05, local04
1f9b8     18 1E 86 F1 | 	sub	local01, #24
1f9bc     13 26 46 F7 | 	zerox	local05, #19
1f9c0     14 24 46 F0 | 	shr	local04, #20
1f9c4     02 24 66 F0 | 	shl	local04, #2
1f9c8     ED 24 02 F1 | 	add	local04, __methods__
1f9cc     12 25 02 FB | 	rdlong	local04, local04
1f9d0     10 20 06 F1 | 	add	local02, #16
1f9d4     10 15 02 FB | 	rdlong	arg02, local02
1f9d8     10 20 86 F1 | 	sub	local02, #16
1f9dc     0F 13 02 F6 | 	mov	arg01, local01
1f9e0     11 17 02 F6 | 	mov	arg03, local03
1f9e4     F2 28 02 F6 | 	mov	local06, objptr
1f9e8     13 E5 01 F6 | 	mov	objptr, local05
1f9ec     2D 24 62 FD | 	call	local04
1f9f0     14 E5 01 F6 | 	mov	objptr, local06
1f9f4     58 00 90 FD | 	jmp	#LR__3024
1f9f8                 | LR__3022
1f9f8     08 20 06 F1 | 	add	local02, #8
1f9fc     10 29 02 FB | 	rdlong	local06, local02
1fa00     08 20 86 F1 | 	sub	local02, #8
1fa04     01 28 CE F7 | 	test	local06, #1 wz
1fa08     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
1fa0c     40 00 90 AD |  if_e	jmp	#LR__3023
1fa10     30 1E 06 F1 | 	add	local01, #48
1fa14     0F 25 02 FB | 	rdlong	local04, local01
1fa18     12 27 02 F6 | 	mov	local05, local04
1fa1c     30 1E 86 F1 | 	sub	local01, #48
1fa20     13 26 46 F7 | 	zerox	local05, #19
1fa24     14 24 46 F0 | 	shr	local04, #20
1fa28     02 24 66 F0 | 	shl	local04, #2
1fa2c     ED 24 02 F1 | 	add	local04, __methods__
1fa30     12 25 02 FB | 	rdlong	local04, local04
1fa34     0F 13 02 F6 | 	mov	arg01, local01
1fa38     11 15 62 F6 | 	neg	arg02, local03
1fa3c     01 16 06 F6 | 	mov	arg03, #1
1fa40     F2 28 02 F6 | 	mov	local06, objptr
1fa44     13 E5 01 F6 | 	mov	objptr, local05
1fa48     2D 24 62 FD | 	call	local04
1fa4c     14 E5 01 F6 | 	mov	objptr, local06
1fa50                 | LR__3023
1fa50                 | LR__3024
1fa50     10 01 68 FC | 	wrlong	#0, local02
1fa54     04 20 06 F1 | 	add	local02, #4
1fa58     10 01 68 FC | 	wrlong	#0, local02
1fa5c     04 20 06 F1 | 	add	local02, #4
1fa60     10 01 68 FC | 	wrlong	#0, local02
1fa64     00 FA 05 F6 | 	mov	result1, #0
1fa68     A7 F0 03 F6 | 	mov	ptra, fp
1fa6c     B2 00 A0 FD | 	call	#popregs_
1fa70                 | __system____default_flush_ret
1fa70     2D 00 64 FD | 	ret
1fa74                 | 
1fa74                 | __system____default_buffer_init
1fa74     02 4A 05 F6 | 	mov	COUNT_, #2
1fa78     A8 00 A0 FD | 	call	#pushregs_
1fa7c     09 1F 02 F6 | 	mov	local01, arg01
1fa80     0F 21 02 FB | 	rdlong	local02, local01
1fa84     0F 13 02 F6 | 	mov	arg01, local01
1fa88     F8 02 B0 FD | 	call	#__system___isatty
1fa8c     00 FA 0D F2 | 	cmp	result1, #0 wz
1fa90     06 1E 06 51 |  if_ne	add	local01, #6
1fa94     0F 0B 58 5C |  if_ne	wrword	#5, local01
1fa98     06 1E 06 A1 |  if_e	add	local01, #6
1fa9c     0F 0D 58 AC |  if_e	wrword	#6, local01
1faa0     14 20 06 F1 | 	add	local02, #20
1faa4     10 1F 02 F6 | 	mov	local01, local02
1faa8     04 20 86 F1 | 	sub	local02, #4
1faac     10 1F 62 FC | 	wrlong	local01, local02
1fab0     04 20 86 F1 | 	sub	local02, #4
1fab4     02 00 80 FF 
1fab8     10 01 68 FC | 	wrlong	##1024, local02
1fabc     00 FA 05 F6 | 	mov	result1, #0
1fac0     A7 F0 03 F6 | 	mov	ptra, fp
1fac4     B2 00 A0 FD | 	call	#popregs_
1fac8                 | __system____default_buffer_init_ret
1fac8     2D 00 64 FD | 	ret
1facc                 | 
1facc                 | __system__stat
1facc     04 4A 05 F6 | 	mov	COUNT_, #4
1fad0     A8 00 A0 FD | 	call	#pushregs_
1fad4     0A 1F 02 F6 | 	mov	local01, arg02
1fad8     84 E7 05 F1 | 	add	ptr___system__dat__, #388
1fadc     F3 20 02 F6 | 	mov	local02, ptr___system__dat__
1fae0     09 15 02 F6 | 	mov	arg02, arg01
1fae4     10 13 02 F6 | 	mov	arg01, local02
1fae8     00 16 06 F6 | 	mov	arg03, #0
1faec     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
1faf0     0C B9 BF FD | 	call	#__system____getvfsforfile
1faf4     FD 22 0A F6 | 	mov	local03, result1 wz
1faf8     10 00 90 AD |  if_e	jmp	#LR__3030
1fafc     34 22 06 F1 | 	add	local03, #52
1fb00     11 17 0A FB | 	rdlong	arg03, local03 wz
1fb04     34 22 86 F1 | 	sub	local03, #52
1fb08     14 00 90 5D |  if_ne	jmp	#LR__3031
1fb0c                 | LR__3030
1fb0c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1fb10     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
1fb14     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1fb18     01 FA 65 F6 | 	neg	result1, #1
1fb1c     68 00 90 FD | 	jmp	#LR__3032
1fb20                 | LR__3031
1fb20     0F 13 02 F6 | 	mov	arg01, local01
1fb24     00 14 06 F6 | 	mov	arg02, #0
1fb28     30 16 06 F6 | 	mov	arg03, #48
1fb2c     09 25 02 F6 | 	mov	local04, arg01
1fb30     98 00 A0 FD | 	call	#\builtin_bytefill_
1fb34     12 FB 01 F6 | 	mov	result1, local04
1fb38     10 13 CA FA | 	rdbyte	arg01, local02 wz
1fb3c     08 1E 06 A1 |  if_e	add	local01, #8
1fb40     08 00 80 AF 
1fb44     0F FF 6B AC |  if_e	wrlong	##4607, local01
1fb48     00 FA 05 A6 |  if_e	mov	result1, #0
1fb4c     38 00 90 AD |  if_e	jmp	#LR__3032
1fb50     34 22 06 F1 | 	add	local03, #52
1fb54     11 23 02 FB | 	rdlong	local03, local03
1fb58     11 25 02 F6 | 	mov	local04, local03
1fb5c     13 22 46 F7 | 	zerox	local03, #19
1fb60     14 24 46 F0 | 	shr	local04, #20
1fb64     02 24 66 F0 | 	shl	local04, #2
1fb68     ED 24 02 F1 | 	add	local04, __methods__
1fb6c     12 25 02 FB | 	rdlong	local04, local04
1fb70     10 13 02 F6 | 	mov	arg01, local02
1fb74     0F 15 02 F6 | 	mov	arg02, local01
1fb78     F2 20 02 F6 | 	mov	local02, objptr
1fb7c     11 E5 01 F6 | 	mov	objptr, local03
1fb80     2D 24 62 FD | 	call	local04
1fb84     10 E5 01 F6 | 	mov	objptr, local02
1fb88                 | LR__3032
1fb88     A7 F0 03 F6 | 	mov	ptra, fp
1fb8c     B2 00 A0 FD | 	call	#popregs_
1fb90                 | __system__stat_ret
1fb90     2D 00 64 FD | 	ret
1fb94                 | 
1fb94                 | __system__read
1fb94     0A 12 16 F2 | 	cmp	arg01, #10 wc
1fb98     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
1fb9c     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1fba0     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
1fba4     01 FA 65 36 |  if_ae	neg	result1, #1
1fba8     20 00 90 3D |  if_ae	jmp	#LR__3040
1fbac     34 12 06 FD | 	qmul	arg01, #52
1fbb0     02 00 00 FF 
1fbb4     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
1fbb8     18 12 62 FD | 	getqx	arg01
1fbbc     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1fbc0     02 00 00 FF 
1fbc4     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
1fbc8     CC 0F B0 FD | 	call	#__system___vfsread
1fbcc                 | LR__3040
1fbcc                 | __system__read_ret
1fbcc     2D 00 64 FD | 	ret
1fbd0                 | 
1fbd0                 | __system__close
1fbd0     0A 12 16 F2 | 	cmp	arg01, #10 wc
1fbd4     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
1fbd8     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1fbdc     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
1fbe0     01 FA 65 36 |  if_ae	neg	result1, #1
1fbe4     20 00 90 3D |  if_ae	jmp	#LR__3050
1fbe8     34 12 06 FD | 	qmul	arg01, #52
1fbec     02 00 00 FF 
1fbf0     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
1fbf4     18 12 62 FD | 	getqx	arg01
1fbf8     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1fbfc     02 00 00 FF 
1fc00     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
1fc04     4C F9 BF FD | 	call	#__system___closeraw
1fc08                 | LR__3050
1fc08                 | __system__close_ret
1fc08     2D 00 64 FD | 	ret
1fc0c                 | 
1fc0c                 | __system__lseek
1fc0c     06 4A 05 F6 | 	mov	COUNT_, #6
1fc10     A8 00 A0 FD | 	call	#pushregs_
1fc14     0A 12 16 F2 | 	cmp	arg01, #10 wc
1fc18     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
1fc1c     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1fc20     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
1fc24     01 FA 65 36 |  if_ae	neg	result1, #1
1fc28     C4 00 90 3D |  if_ae	jmp	#LR__3061
1fc2c     34 12 06 FD | 	qmul	arg01, #52
1fc30     02 00 00 FF 
1fc34     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
1fc38     18 1E 62 FD | 	getqx	local01
1fc3c     F3 1E 02 F1 | 	add	local01, ptr___system__dat__
1fc40     30 1E 06 F1 | 	add	local01, #48
1fc44     0F 13 0A FB | 	rdlong	arg01, local01 wz
1fc48     30 1E 86 F1 | 	sub	local01, #48
1fc4c     02 00 00 FF 
1fc50     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
1fc54     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
1fc58     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
1fc5c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
1fc60     01 FA 65 A6 |  if_e	neg	result1, #1
1fc64     88 00 90 AD |  if_e	jmp	#LR__3061
1fc68     08 1E 06 F1 | 	add	local01, #8
1fc6c     0F 21 02 FB | 	rdlong	local02, local01
1fc70     08 1E 86 F1 | 	sub	local01, #8
1fc74     40 20 CE F7 | 	test	local02, #64 wz
1fc78     08 1E 06 51 |  if_ne	add	local01, #8
1fc7c     0F 21 02 5B |  if_ne	rdlong	local02, local01
1fc80     80 20 46 55 |  if_ne	or	local02, #128
1fc84     0F 21 62 5C |  if_ne	wrlong	local02, local01
1fc88     08 1E 86 51 |  if_ne	sub	local01, #8
1fc8c     30 1E 06 F1 | 	add	local01, #48
1fc90     0F 23 02 FB | 	rdlong	local03, local01
1fc94     11 25 02 F6 | 	mov	local04, local03
1fc98     30 1E 86 F1 | 	sub	local01, #48
1fc9c     13 24 46 F7 | 	zerox	local04, #19
1fca0     14 22 46 F0 | 	shr	local03, #20
1fca4     02 22 66 F0 | 	shl	local03, #2
1fca8     ED 22 02 F1 | 	add	local03, __methods__
1fcac     11 23 02 FB | 	rdlong	local03, local03
1fcb0     0F 13 02 F6 | 	mov	arg01, local01
1fcb4     F2 26 02 F6 | 	mov	local05, objptr
1fcb8     12 E5 01 F6 | 	mov	objptr, local04
1fcbc     2D 22 62 FD | 	call	local03
1fcc0     13 E5 01 F6 | 	mov	objptr, local05
1fcc4     FD 28 02 F6 | 	mov	local06, result1
1fcc8     00 28 56 F2 | 	cmps	local06, #0 wc
1fccc     1C 00 90 3D |  if_ae	jmp	#LR__3060
1fcd0     14 13 6A F6 | 	neg	arg01, local06 wz
1fcd4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1fcd8     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1fcdc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1fce0     01 FA 65 56 |  if_ne	neg	result1, #1
1fce4     00 FA 05 A6 |  if_e	mov	result1, #0
1fce8     04 00 90 FD | 	jmp	#LR__3061
1fcec                 | LR__3060
1fcec     14 FB 01 F6 | 	mov	result1, local06
1fcf0                 | LR__3061
1fcf0     A7 F0 03 F6 | 	mov	ptra, fp
1fcf4     B2 00 A0 FD | 	call	#popregs_
1fcf8                 | __system__lseek_ret
1fcf8     2D 00 64 FD | 	ret
1fcfc                 | 
1fcfc                 | __system___ioctl
1fcfc     03 4A 05 F6 | 	mov	COUNT_, #3
1fd00     A8 00 A0 FD | 	call	#pushregs_
1fd04     00 12 4E F2 | 	cmps	arg01, #0 wz
1fd08     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
1fd0c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
1fd10     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
1fd14     01 FA 65 A6 |  if_e	neg	result1, #1
1fd18     5C 00 90 AD |  if_e	jmp	#LR__3071
1fd1c     28 12 06 F1 | 	add	arg01, #40
1fd20     09 1F 02 FB | 	rdlong	local01, arg01
1fd24     0F 21 02 F6 | 	mov	local02, local01
1fd28     28 12 86 F1 | 	sub	arg01, #40
1fd2c     13 20 46 F7 | 	zerox	local02, #19
1fd30     14 1E 46 F0 | 	shr	local01, #20
1fd34     02 1E 66 F0 | 	shl	local01, #2
1fd38     ED 1E 02 F1 | 	add	local01, __methods__
1fd3c     0F 1F 02 FB | 	rdlong	local01, local01
1fd40     F2 22 02 F6 | 	mov	local03, objptr
1fd44     10 E5 01 F6 | 	mov	objptr, local02
1fd48     2D 1E 62 FD | 	call	local01
1fd4c     11 E5 01 F6 | 	mov	objptr, local03
1fd50     FD 12 0A F6 | 	mov	arg01, result1 wz
1fd54     1C 00 90 AD |  if_e	jmp	#LR__3070
1fd58     00 12 4E F2 | 	cmps	arg01, #0 wz
1fd5c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1fd60     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1fd64     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1fd68     01 FA 65 56 |  if_ne	neg	result1, #1
1fd6c     00 FA 05 A6 |  if_e	mov	result1, #0
1fd70     04 00 90 FD | 	jmp	#LR__3071
1fd74                 | LR__3070
1fd74     00 FA 05 F6 | 	mov	result1, #0
1fd78                 | LR__3071
1fd78     A7 F0 03 F6 | 	mov	ptra, fp
1fd7c     B2 00 A0 FD | 	call	#popregs_
1fd80                 | __system___ioctl_ret
1fd80     2D 00 64 FD | 	ret
1fd84                 | 
1fd84                 | __system___isatty
1fd84     00 4A 05 F6 | 	mov	COUNT_, #0
1fd88     A8 00 A0 FD | 	call	#pushregs_
1fd8c     0C F0 07 F1 | 	add	ptra, #12
1fd90     04 4E 05 F1 | 	add	fp, #4
1fd94     A7 12 62 FC | 	wrlong	arg01, fp
1fd98     04 4E 05 F1 | 	add	fp, #4
1fd9c     A7 16 02 F6 | 	mov	arg03, fp
1fda0     08 4E 85 F1 | 	sub	fp, #8
1fda4     00 15 06 F6 | 	mov	arg02, #256
1fda8     50 FF BF FD | 	call	#__system___ioctl
1fdac     00 FA 0D F2 | 	cmp	result1, #0 wz
1fdb0     01 FA 05 A6 |  if_e	mov	result1, #1
1fdb4     00 FA 05 56 |  if_ne	mov	result1, #0
1fdb8     A7 F0 03 F6 | 	mov	ptra, fp
1fdbc     B2 00 A0 FD | 	call	#popregs_
1fdc0                 | __system___isatty_ret
1fdc0     2D 00 64 FD | 	ret
1fdc4                 | 
1fdc4                 | __system____getftab
1fdc4     0A 12 16 F2 | 	cmp	arg01, #10 wc
1fdc8     34 12 06 CD |  if_b	qmul	arg01, #52
1fdcc     00 FA 05 36 |  if_ae	mov	result1, #0
1fdd0     02 00 00 CF 
1fdd4     20 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1312
1fdd8     18 FA 61 CD |  if_b	getqx	result1
1fddc     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
1fde0     02 00 00 CF 
1fde4     20 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
1fde8                 | __system____getftab_ret
1fde8     2D 00 64 FD | 	ret
1fdec                 | 
1fdec                 | __system__strncpy
1fdec     09 01 02 F6 | 	mov	_var01, arg01
1fdf0                 | LR__3080
1fdf0     01 16 86 F1 | 	sub	arg03, #1
1fdf4     00 16 56 F2 | 	cmps	arg03, #0 wc
1fdf8     18 00 90 CD |  if_b	jmp	#LR__3081
1fdfc     0A FB C1 FA | 	rdbyte	result1, arg02
1fe00     00 FB 41 FC | 	wrbyte	result1, _var01
1fe04     01 14 06 F1 | 	add	arg02, #1
1fe08     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1fe0c     01 00 06 F1 | 	add	_var01, #1
1fe10     DC FF 9F 5D |  if_ne	jmp	#LR__3080
1fe14                 | LR__3081
1fe14     97 0C 48 FB | 	callpa	#(@LR__3083-@LR__3082)>>2,fcache_load_ptr_
1fe18                 | LR__3082
1fe18     01 16 86 F1 | 	sub	arg03, #1
1fe1c     00 16 56 F2 | 	cmps	arg03, #0 wc
1fe20     00 03 02 36 |  if_ae	mov	_var02, _var01
1fe24     01 00 06 31 |  if_ae	add	_var01, #1
1fe28     01 01 48 3C |  if_ae	wrbyte	#0, _var02
1fe2c     E8 FF 9F 3D |  if_ae	jmp	#LR__3082
1fe30                 | LR__3083
1fe30     09 FB 01 F6 | 	mov	result1, arg01
1fe34                 | __system__strncpy_ret
1fe34     2D 00 64 FD | 	ret
1fe38                 | 
1fe38                 | __system__strncat
1fe38     00 14 4E F2 | 	cmps	arg02, #0 wz
1fe3c     50 00 90 AD |  if_e	jmp	#LR__3094
1fe40     01 16 16 F2 | 	cmp	arg03, #1 wc
1fe44     48 00 90 CD |  if_b	jmp	#LR__3094
1fe48     09 01 02 F6 | 	mov	_var01, arg01
1fe4c     97 1E 48 FB | 	callpa	#(@LR__3092-@LR__3090)>>2,fcache_load_ptr_
1fe50                 | LR__3090
1fe50     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1fe54     01 00 06 51 |  if_ne	add	_var01, #1
1fe58     F4 FF 9F 5D |  if_ne	jmp	#LR__3090
1fe5c     0B 03 02 F6 | 	mov	_var02, arg03
1fe60                 | LR__3091
1fe60     0A 05 C2 FA | 	rdbyte	_var03, arg02
1fe64     02 07 02 F6 | 	mov	_var04, _var03
1fe68     07 06 4E F7 | 	zerox	_var04, #7 wz
1fe6c     01 14 06 F1 | 	add	arg02, #1
1fe70     18 00 90 AD |  if_e	jmp	#LR__3093
1fe74     01 02 86 F1 | 	sub	_var02, #1
1fe78     00 02 56 F2 | 	cmps	_var02, #0 wc
1fe7c     00 07 02 36 |  if_ae	mov	_var04, _var01
1fe80     01 00 06 31 |  if_ae	add	_var01, #1
1fe84     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
1fe88     D4 FF 9F 3D |  if_ae	jmp	#LR__3091
1fe8c                 | LR__3092
1fe8c                 | LR__3093
1fe8c     00 01 48 FC | 	wrbyte	#0, _var01
1fe90                 | LR__3094
1fe90     09 FB 01 F6 | 	mov	result1, arg01
1fe94                 | __system__strncat_ret
1fe94     2D 00 64 FD | 	ret
1fe98                 | 
1fe98                 | __system__strncmp
1fe98     09 01 0A F6 | 	mov	_var01, arg01 wz
1fe9c     14 00 90 5D |  if_ne	jmp	#LR__3100
1fea0     00 14 0E F2 | 	cmp	arg02, #0 wz
1fea4     01 02 66 56 |  if_ne	neg	_var02, #1
1fea8     00 02 06 A6 |  if_e	mov	_var02, #0
1feac     01 FB 01 F6 | 	mov	result1, _var02
1feb0     74 00 90 FD | 	jmp	#__system__strncmp_ret
1feb4                 | LR__3100
1feb4     00 14 0E F2 | 	cmp	arg02, #0 wz
1feb8     01 FA 05 A6 |  if_e	mov	result1, #1
1febc     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1fec0     0B 05 02 F6 | 	mov	_var03, arg03
1fec4     97 16 48 FB | 	callpa	#(@LR__3102-@LR__3101)>>2,fcache_load_ptr_
1fec8                 | LR__3101
1fec8     00 07 C2 FA | 	rdbyte	_var04, _var01
1fecc     0A 09 02 F6 | 	mov	_var05, arg02
1fed0     04 0B C2 FA | 	rdbyte	_var06, _var05
1fed4     01 04 86 F1 | 	sub	_var03, #1
1fed8     00 04 56 F2 | 	cmps	_var03, #0 wc
1fedc     01 00 06 F1 | 	add	_var01, #1
1fee0     01 14 06 F1 | 	add	arg02, #1
1fee4     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
1fee8     08 00 90 2D |  if_nc_and_z	jmp	#LR__3103
1feec     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
1fef0     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3101
1fef4                 | LR__3102
1fef4                 | LR__3103
1fef4     00 04 56 F2 | 	cmps	_var03, #0 wc
1fef8     00 FA 05 C6 |  if_b	mov	result1, #0
1fefc     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
1ff00     05 07 0A F2 | 	cmp	_var04, _var06 wz
1ff04     00 FA 05 A6 |  if_e	mov	result1, #0
1ff08     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1ff0c     00 06 0E F2 | 	cmp	_var04, #0 wz
1ff10     01 FA 65 A6 |  if_e	neg	result1, #1
1ff14     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1ff18     00 0A 0E F2 | 	cmp	_var06, #0 wz
1ff1c     01 FA 05 A6 |  if_e	mov	result1, #1
1ff20     03 FB 01 56 |  if_ne	mov	result1, _var04
1ff24     05 FB 81 51 |  if_ne	sub	result1, _var06
1ff28                 | __system__strncmp_ret
1ff28     2D 00 64 FD | 	ret
1ff2c                 | 
1ff2c                 | __system____root_opendir
1ff2c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1ff30     04 12 06 F1 | 	add	arg01, #4
1ff34     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
1ff38     00 FA 05 F6 | 	mov	result1, #0
1ff3c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1ff40                 | __system____root_opendir_ret
1ff40     2D 00 64 FD | 	ret
1ff44                 | 
1ff44                 | __system____root_readdir
1ff44     03 4A 05 F6 | 	mov	COUNT_, #3
1ff48     A8 00 A0 FD | 	call	#pushregs_
1ff4c     09 1F 02 F6 | 	mov	local01, arg01
1ff50     0A 21 02 F6 | 	mov	local02, arg02
1ff54     04 1E 06 F1 | 	add	local01, #4
1ff58     0F 23 02 FB | 	rdlong	local03, local01
1ff5c     04 1E 86 F1 | 	sub	local01, #4
1ff60                 | LR__3110
1ff60     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1ff64     F3 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
1ff68     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1ff6c     01 FA 65 A6 |  if_e	neg	result1, #1
1ff70     48 00 90 AD |  if_e	jmp	#LR__3111
1ff74     11 17 0A FB | 	rdlong	arg03, local03 wz
1ff78     04 22 06 A1 |  if_e	add	local03, #4
1ff7c     E0 FF 9F AD |  if_e	jmp	#LR__3110
1ff80     11 15 02 FB | 	rdlong	arg02, local03
1ff84     01 14 06 F1 | 	add	arg02, #1
1ff88     10 13 02 F6 | 	mov	arg01, local02
1ff8c     40 16 06 F6 | 	mov	arg03, #64
1ff90     58 FE BF FD | 	call	#__system__strncpy
1ff94     50 20 06 F1 | 	add	local02, #80
1ff98     10 03 48 FC | 	wrbyte	#1, local02
1ff9c     08 20 86 F1 | 	sub	local02, #8
1ffa0     10 01 68 FC | 	wrlong	#0, local02
1ffa4     04 20 06 F1 | 	add	local02, #4
1ffa8     10 01 68 FC | 	wrlong	#0, local02
1ffac     04 22 06 F1 | 	add	local03, #4
1ffb0     04 1E 06 F1 | 	add	local01, #4
1ffb4     0F 23 62 FC | 	wrlong	local03, local01
1ffb8     00 FA 05 F6 | 	mov	result1, #0
1ffbc                 | LR__3111
1ffbc     A7 F0 03 F6 | 	mov	ptra, fp
1ffc0     B2 00 A0 FD | 	call	#popregs_
1ffc4                 | __system____root_readdir_ret
1ffc4     2D 00 64 FD | 	ret
1ffc8                 | 
1ffc8                 | __system____root_closedir
1ffc8     00 FA 05 F6 | 	mov	result1, #0
1ffcc                 | __system____root_closedir_ret
1ffcc     2D 00 64 FD | 	ret
1ffd0                 | 
1ffd0                 | __system____root_stat
1ffd0     0A 01 02 F6 | 	mov	_var01, arg02
1ffd4     00 13 02 F6 | 	mov	arg01, _var01
1ffd8     00 14 06 F6 | 	mov	arg02, #0
1ffdc     30 16 06 F6 | 	mov	arg03, #48
1ffe0     98 00 A0 FD | 	call	#\builtin_bytefill_
1ffe4     08 00 06 F1 | 	add	_var01, #8
1ffe8     08 00 80 FF 
1ffec     00 FF 6B FC | 	wrlong	##4607, _var01
1fff0     00 FA 05 F6 | 	mov	result1, #0
1fff4                 | __system____root_stat_ret
1fff4     2D 00 64 FD | 	ret
1fff8                 | 
1fff8                 | __system___normalizeName
1fff8     00 00 06 F6 | 	mov	_var01, #0
1fffc     09 03 02 F6 | 	mov	_var02, arg01
20000     01 05 02 F6 | 	mov	_var03, _var02
20004                 | LR__3120
20004     01 07 CA FA | 	rdbyte	_var04, _var02 wz
20008     5C 01 90 AD |  if_e	jmp	#LR__3139
2000c     00 00 0E F2 | 	cmp	_var01, #0 wz
20010     02 07 02 56 |  if_ne	mov	_var04, _var03
20014     01 04 06 51 |  if_ne	add	_var03, #1
20018     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
2001c     00 00 06 56 |  if_ne	mov	_var01, #0
20020     01 07 C2 FA | 	rdbyte	_var04, _var02
20024     2E 06 0E F2 | 	cmp	_var04, #46 wz
20028     D8 00 90 5D |  if_ne	jmp	#LR__3132
2002c     01 02 06 F1 | 	add	_var02, #1
20030     01 07 C2 FA | 	rdbyte	_var04, _var02
20034     01 02 86 F1 | 	sub	_var02, #1
20038     2F 06 0E F2 | 	cmp	_var04, #47 wz
2003c     18 00 90 AD |  if_e	jmp	#LR__3121
20040     01 02 06 F1 | 	add	_var02, #1
20044     01 09 C2 FA | 	rdbyte	_var05, _var02
20048     01 02 86 F1 | 	sub	_var02, #1
2004c     04 0B 02 F6 | 	mov	_var06, _var05
20050     07 0A 4E F7 | 	zerox	_var06, #7 wz
20054     10 00 90 5D |  if_ne	jmp	#LR__3122
20058                 | LR__3121
20058     01 0D 02 F6 | 	mov	_var07, _var02
2005c     01 0C 06 F1 | 	add	_var07, #1
20060     06 03 02 F6 | 	mov	_var02, _var07
20064     E0 00 90 FD | 	jmp	#LR__3136
20068                 | LR__3122
20068     01 02 06 F1 | 	add	_var02, #1
2006c     01 0D C2 FA | 	rdbyte	_var07, _var02
20070     01 02 86 F1 | 	sub	_var02, #1
20074     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
20078     2E 06 0E F2 | 	cmp	_var04, #46 wz
2007c     84 00 90 5D |  if_ne	jmp	#LR__3131
20080     02 02 06 F1 | 	add	_var02, #2
20084     01 0D C2 FA | 	rdbyte	_var07, _var02
20088     02 02 86 F1 | 	sub	_var02, #2
2008c     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
20090     2F 06 0E F2 | 	cmp	_var04, #47 wz
20094     18 00 90 AD |  if_e	jmp	#LR__3123
20098     02 02 06 F1 | 	add	_var02, #2
2009c     01 09 C2 FA | 	rdbyte	_var05, _var02
200a0     02 02 86 F1 | 	sub	_var02, #2
200a4     04 0B 02 F6 | 	mov	_var06, _var05
200a8     07 0A 4E F7 | 	zerox	_var06, #7 wz
200ac     54 00 90 5D |  if_ne	jmp	#LR__3130
200b0                 | LR__3123
200b0     02 02 06 F1 | 	add	_var02, #2
200b4     09 05 5A F2 | 	cmps	_var03, arg01 wcz
200b8     40 00 90 ED |  if_be	jmp	#LR__3129
200bc     02 0F 02 F6 | 	mov	_var08, _var03
200c0     01 0E 86 F1 | 	sub	_var08, #1
200c4                 | LR__3124
200c4     07 07 C2 FA | 	rdbyte	_var04, _var08
200c8     2F 06 0E F2 | 	cmp	_var04, #47 wz
200cc     0C 00 90 5D |  if_ne	jmp	#LR__3125
200d0     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
200d4     01 0E 86 11 |  if_a	sub	_var08, #1
200d8     E8 FF 9F 1D |  if_a	jmp	#LR__3124
200dc                 | LR__3125
200dc     97 0C 48 FB | 	callpa	#(@LR__3127-@LR__3126)>>2,fcache_load_ptr_
200e0                 | LR__3126
200e0     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
200e4     10 00 90 ED |  if_be	jmp	#LR__3128
200e8     07 07 C2 FA | 	rdbyte	_var04, _var08
200ec     2F 06 0E F2 | 	cmp	_var04, #47 wz
200f0     01 0E 86 51 |  if_ne	sub	_var08, #1
200f4     E8 FF 9F 5D |  if_ne	jmp	#LR__3126
200f8                 | LR__3127
200f8                 | LR__3128
200f8     07 05 02 F6 | 	mov	_var03, _var08
200fc                 | LR__3129
200fc     01 00 06 F6 | 	mov	_var01, #1
20100     44 00 90 FD | 	jmp	#LR__3136
20104                 | LR__3130
20104                 | LR__3131
20104                 | LR__3132
20104     97 18 48 FB | 	callpa	#(@LR__3134-@LR__3133)>>2,fcache_load_ptr_
20108                 | LR__3133
20108     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2010c     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
20110     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
20114     20 00 90 AD |  if_e	jmp	#LR__3135
20118     01 0B 02 F6 | 	mov	_var06, _var02
2011c     01 09 02 F6 | 	mov	_var05, _var02
20120     01 08 06 F1 | 	add	_var05, #1
20124     05 11 C2 FA | 	rdbyte	_var09, _var06
20128     04 03 02 F6 | 	mov	_var02, _var05
2012c     02 11 42 FC | 	wrbyte	_var09, _var03
20130     01 04 06 F1 | 	add	_var03, #1
20134     D0 FF 9F FD | 	jmp	#LR__3133
20138                 | LR__3134
20138                 | LR__3135
20138     01 07 C2 FA | 	rdbyte	_var04, _var02
2013c     2F 06 0E F2 | 	cmp	_var04, #47 wz
20140     C0 FE 9F 5D |  if_ne	jmp	#LR__3120
20144     01 00 06 F6 | 	mov	_var01, #1
20148                 | LR__3136
20148     97 0C 48 FB | 	callpa	#(@LR__3138-@LR__3137)>>2,fcache_load_ptr_
2014c                 | LR__3137
2014c     01 07 C2 FA | 	rdbyte	_var04, _var02
20150     2F 06 0E F2 | 	cmp	_var04, #47 wz
20154     01 0D 02 A6 |  if_e	mov	_var07, _var02
20158     01 0C 06 A1 |  if_e	add	_var07, #1
2015c     06 03 02 A6 |  if_e	mov	_var02, _var07
20160     E8 FF 9F AD |  if_e	jmp	#LR__3137
20164                 | LR__3138
20164     9C FE 9F FD | 	jmp	#LR__3120
20168                 | LR__3139
20168     02 01 48 FC | 	wrbyte	#0, _var03
2016c                 | __system___normalizeName_ret
2016c     2D 00 64 FD | 	ret
20170                 | 
20170                 | __system___strrev
20170     09 01 CA FA | 	rdbyte	_var01, arg01 wz
20174     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
20178     09 03 02 F6 | 	mov	_var02, arg01
2017c     97 1A 48 FB | 	callpa	#(@LR__3142-@LR__3140)>>2,fcache_load_ptr_
20180                 | LR__3140
20180     01 01 CA FA | 	rdbyte	_var01, _var02 wz
20184     01 02 06 51 |  if_ne	add	_var02, #1
20188     F4 FF 9F 5D |  if_ne	jmp	#LR__3140
2018c     01 02 86 F1 | 	sub	_var02, #1
20190                 | LR__3141
20190     09 03 5A F2 | 	cmps	_var02, arg01 wcz
20194     1C 00 90 ED |  if_be	jmp	#LR__3143
20198     09 01 C2 FA | 	rdbyte	_var01, arg01
2019c     01 05 C2 FA | 	rdbyte	_var03, _var02
201a0     09 05 42 FC | 	wrbyte	_var03, arg01
201a4     01 01 42 FC | 	wrbyte	_var01, _var02
201a8     01 12 06 F1 | 	add	arg01, #1
201ac     01 02 86 F1 | 	sub	_var02, #1
201b0     DC FF 9F FD | 	jmp	#LR__3141
201b4                 | LR__3142
201b4                 | LR__3143
201b4                 | __system___strrev_ret
201b4     2D 00 64 FD | 	ret
201b8                 | 
201b8                 | __system___fmtpad
201b8     06 4A 05 F6 | 	mov	COUNT_, #6
201bc     A8 00 A0 FD | 	call	#pushregs_
201c0     09 1F 02 F6 | 	mov	local01, arg01
201c4     0A 21 02 F6 | 	mov	local02, arg02
201c8     0B 23 02 F6 | 	mov	local03, arg03
201cc     10 13 EA F8 | 	getbyte	arg01, local02, #1
201d0     16 20 46 F0 | 	shr	local02, #22
201d4     03 20 0E F5 | 	and	local02, #3 wz
201d8     00 24 06 F6 | 	mov	local04, #0
201dc     01 20 06 A6 |  if_e	mov	local02, #1
201e0     0C 21 CA F7 | 	test	local02, arg04 wz
201e4     00 FA 05 A6 |  if_e	mov	result1, #0
201e8     88 00 90 AD |  if_e	jmp	#LR__3153
201ec     09 23 C2 F2 | 	subr	local03, arg01
201f0     01 22 56 F2 | 	cmps	local03, #1 wc
201f4     00 FA 05 C6 |  if_b	mov	result1, #0
201f8     78 00 90 CD |  if_b	jmp	#LR__3153
201fc     03 20 0E F2 | 	cmp	local02, #3 wz
20200     18 00 90 5D |  if_ne	jmp	#LR__3150
20204     01 18 0E F2 | 	cmp	arg04, #1 wz
20208     6E 20 62 FD | 	wrz	local02
2020c     10 23 02 F1 | 	add	local03, local02
20210     11 23 52 F6 | 	abs	local03, local03 wc
20214     01 22 46 F0 | 	shr	local03, #1
20218     11 23 82 F6 | 	negc	local03, local03
2021c                 | LR__3150
2021c     01 22 56 F2 | 	cmps	local03, #1 wc
20220     4C 00 90 CD |  if_b	jmp	#LR__3152
20224     11 27 02 F6 | 	mov	local05, local03
20228                 | LR__3151
20228     0F 21 02 F6 | 	mov	local02, local01
2022c     0F 29 02 F6 | 	mov	local06, local01
20230     13 20 46 F7 | 	zerox	local02, #19
20234     14 28 46 F0 | 	shr	local06, #20
20238     02 28 66 F0 | 	shl	local06, #2
2023c     ED 28 02 F1 | 	add	local06, __methods__
20240     14 29 02 FB | 	rdlong	local06, local06
20244     20 12 06 F6 | 	mov	arg01, #32
20248     F2 22 02 F6 | 	mov	local03, objptr
2024c     10 E5 01 F6 | 	mov	objptr, local02
20250     2D 28 62 FD | 	call	local06
20254     11 E5 01 F6 | 	mov	objptr, local03
20258     FD 28 02 F6 | 	mov	local06, result1
2025c     00 28 56 F2 | 	cmps	local06, #0 wc
20260     14 FB 01 C6 |  if_b	mov	result1, local06
20264     0C 00 90 CD |  if_b	jmp	#LR__3153
20268     14 25 02 F1 | 	add	local04, local06
2026c     EE 27 6E FB | 	djnz	local05, #LR__3151
20270                 | LR__3152
20270     12 FB 01 F6 | 	mov	result1, local04
20274                 | LR__3153
20274     A7 F0 03 F6 | 	mov	ptra, fp
20278     B2 00 A0 FD | 	call	#popregs_
2027c                 | __system___fmtpad_ret
2027c     2D 00 64 FD | 	ret
20280                 | 
20280                 | __system___uitoa
20280     04 4A 05 F6 | 	mov	COUNT_, #4
20284     A8 00 A0 FD | 	call	#pushregs_
20288     09 1F 02 F6 | 	mov	local01, arg01
2028c     00 1A 4E F2 | 	cmps	arg05, #0 wz
20290     0F 1B 02 F6 | 	mov	arg05, local01
20294     00 20 06 F6 | 	mov	local02, #0
20298     37 22 06 56 |  if_ne	mov	local03, #55
2029c     57 22 06 A6 |  if_e	mov	local03, #87
202a0                 | LR__3160
202a0     0B 15 12 FD | 	qdiv	arg02, arg03
202a4     19 24 62 FD | 	getqy	local04
202a8     0B 15 12 FD | 	qdiv	arg02, arg03
202ac     0A 24 16 F2 | 	cmp	local04, #10 wc
202b0     30 24 06 C1 |  if_b	add	local04, #48
202b4     11 25 02 31 |  if_ae	add	local04, local03
202b8     0D 25 42 FC | 	wrbyte	local04, arg05
202bc     01 1A 06 F1 | 	add	arg05, #1
202c0     01 20 06 F1 | 	add	local02, #1
202c4     18 14 62 FD | 	getqx	arg02
202c8     00 14 0E F2 | 	cmp	arg02, #0 wz
202cc     D0 FF 9F 5D |  if_ne	jmp	#LR__3160
202d0     0C 21 12 F2 | 	cmp	local02, arg04 wc
202d4     C8 FF 9F CD |  if_b	jmp	#LR__3160
202d8     0D 01 48 FC | 	wrbyte	#0, arg05
202dc     0F 13 02 F6 | 	mov	arg01, local01
202e0     8C FE BF FD | 	call	#__system___strrev
202e4     10 FB 01 F6 | 	mov	result1, local02
202e8     A7 F0 03 F6 | 	mov	ptra, fp
202ec     B2 00 A0 FD | 	call	#popregs_
202f0                 | __system___uitoa_ret
202f0     2D 00 64 FD | 	ret
202f4                 | 
202f4                 | __system__disassemble_0400
202f4     10 4A 05 F6 | 	mov	COUNT_, #16
202f8     A8 00 A0 FD | 	call	#pushregs_
202fc     09 1F 02 F6 | 	mov	local01, arg01
20300     0A 21 02 F6 | 	mov	local02, arg02
20304     0B 23 02 F6 | 	mov	local03, arg03
20308     0C 25 02 F6 | 	mov	local04, arg04
2030c     0D 27 02 F6 | 	mov	local05, arg05
20310     13 13 52 F6 | 	abs	arg01, local05 wc
20314     1F 28 C6 C9 |  if_b	decod	local06, #31
20318     00 28 06 36 |  if_ae	mov	local06, #0
2031c     68 D0 BF FD | 	call	#__system___float_fromuns
20320     14 FB 61 F5 | 	xor	result1, local06
20324     FD 2A 02 F6 | 	mov	local07, result1
20328     00 2C 06 F6 | 	mov	local08, #0
2032c     0F 13 02 F6 | 	mov	arg01, local01
20330     00 14 06 F6 | 	mov	arg02, #0
20334     01 16 06 F6 | 	mov	arg03, #1
20338     84 D8 BF FD | 	call	#__system___float_cmp
2033c     00 FA 0D F2 | 	cmp	result1, #0 wz
20340     00 2E 06 A6 |  if_e	mov	local09, #0
20344     10 01 68 AC |  if_e	wrlong	#0, local02
20348     11 2F 62 AC |  if_e	wrlong	local09, local03
2034c     8C 01 90 AD |  if_e	jmp	#LR__3182
20350     0F 13 02 F6 | 	mov	arg01, local01
20354     34 DD BF FD | 	call	#__system____builtin_ilogb
20358     FD 30 02 F6 | 	mov	local10, result1
2035c     0A 26 0E F2 | 	cmp	local05, #10 wz
20360     24 00 90 5D |  if_ne	jmp	#LR__3170
20364     18 2F 02 F6 | 	mov	local09, local10
20368     01 2E 66 F0 | 	shl	local09, #1
2036c     18 2F 02 F1 | 	add	local09, local10
20370     17 31 52 F6 | 	abs	local10, local09 wc
20374     0A 30 16 FD | 	qdiv	local10, #10
20378     09 32 06 F6 | 	mov	local11, #9
2037c     18 30 62 FD | 	getqx	local10
20380     18 31 82 F6 | 	negc	local10, local10
20384     04 00 90 FD | 	jmp	#LR__3171
20388                 | LR__3170
20388     18 32 06 F6 | 	mov	local11, #24
2038c                 | LR__3171
2038c                 | LR__3172
2038c     08 2C 56 F2 | 	cmps	local08, #8 wc
20390     01 2C 06 F1 | 	add	local08, #1
20394     60 00 90 3D |  if_ae	jmp	#LR__3173
20398     00 C0 1F FF 
2039c     00 12 06 F6 | 	mov	arg01, ##1065353216
203a0     15 15 02 F6 | 	mov	arg02, local07
203a4     18 17 02 F6 | 	mov	arg03, local10
203a8     8C E3 BF FD | 	call	#__system___float_pow_n
203ac     FD 14 02 F6 | 	mov	arg02, result1
203b0     0F 13 02 F6 | 	mov	arg01, local01
203b4     D8 D5 BF FD | 	call	#__system___float_div
203b8     FD 34 02 F6 | 	mov	local12, result1
203bc     1A 13 02 F6 | 	mov	arg01, local12
203c0     00 C0 1F FF 
203c4     00 14 06 F6 | 	mov	arg02, ##1065353216
203c8     01 16 06 F6 | 	mov	arg03, #1
203cc     F0 D7 BF FD | 	call	#__system___float_cmp
203d0     00 FA 55 F2 | 	cmps	result1, #0 wc
203d4     01 30 86 C1 |  if_b	sub	local10, #1
203d8     B0 FF 9F CD |  if_b	jmp	#LR__3172
203dc     15 15 02 F6 | 	mov	arg02, local07
203e0     1A 13 02 F6 | 	mov	arg01, local12
203e4     01 16 66 F6 | 	neg	arg03, #1
203e8     D4 D7 BF FD | 	call	#__system___float_cmp
203ec     00 FA 55 F2 | 	cmps	result1, #0 wc
203f0     01 30 06 31 |  if_ae	add	local10, #1
203f4     94 FF 9F 3D |  if_ae	jmp	#LR__3172
203f8                 | LR__3173
203f8     1A 13 02 F6 | 	mov	arg01, local12
203fc     8C DC BF FD | 	call	#__system____builtin_ilogb
20400     FD 36 02 F6 | 	mov	local13, result1
20404     1A 39 02 F6 | 	mov	local14, local12
20408     17 39 06 F4 | 	bitl	local14, #279
2040c     17 38 26 F4 | 	bith	local14, #23
20410     1B 39 62 F0 | 	shl	local14, local13
20414     02 26 0E F2 | 	cmp	local05, #2 wz
20418     02 24 66 A0 |  if_e	shl	local04, #2
2041c     00 3A 06 F6 | 	mov	local15, #0
20420     00 24 56 F2 | 	cmps	local04, #0 wc
20424     10 00 90 3D |  if_ae	jmp	#LR__3174
20428     18 25 C2 F2 | 	subr	local04, local10
2042c     00 24 56 F2 | 	cmps	local04, #0 wc
20430     A0 00 90 CD |  if_b	jmp	#LR__3181
20434     04 00 90 FD | 	jmp	#LR__3175
20438                 | LR__3174
20438     01 24 06 F1 | 	add	local04, #1
2043c                 | LR__3175
2043c     19 25 7A F3 | 	fles	local04, local11 wcz
20440     01 3C 06 F6 | 	mov	local16, #1
20444     97 22 48 FB | 	callpa	#(@LR__3177-@LR__3176)>>2,fcache_load_ptr_
20448                 | LR__3176
20448     00 40 00 FF 
2044c     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
20450     38 00 90 3D |  if_ae	jmp	#LR__3178
20454     01 24 56 F2 | 	cmps	local04, #1 wc
20458     01 24 86 F1 | 	sub	local04, #1
2045c     2C 00 90 CD |  if_b	jmp	#LR__3178
20460     13 3B 02 FD | 	qmul	local15, local05
20464     1C 37 02 F6 | 	mov	local13, local14
20468     17 36 46 F0 | 	shr	local13, #23
2046c     17 39 06 F4 | 	bitl	local14, #279
20470     18 3A 62 FD | 	getqx	local15
20474     13 3D 02 FD | 	qmul	local16, local05
20478     18 3C 62 FD | 	getqx	local16
2047c     13 39 02 FD | 	qmul	local14, local05
20480     1B 3B 02 F1 | 	add	local15, local13
20484     18 38 62 FD | 	getqx	local14
20488     BC FF 9F FD | 	jmp	#LR__3176
2048c                 | LR__3177
2048c                 | LR__3178
2048c     13 2F 02 F6 | 	mov	local09, local05
20490     17 2E 66 F0 | 	shl	local09, #23
20494     17 37 52 F6 | 	abs	local13, local09 wc
20498     01 36 46 F0 | 	shr	local13, #1
2049c     1B 37 82 F6 | 	negc	local13, local13
204a0     1B 39 1A F2 | 	cmp	local14, local13 wcz
204a4     20 00 90 1D |  if_a	jmp	#LR__3179
204a8     17 26 66 F0 | 	shl	local05, #23
204ac     13 37 52 F6 | 	abs	local13, local05 wc
204b0     01 36 46 F0 | 	shr	local13, #1
204b4     1B 37 82 F6 | 	negc	local13, local13
204b8     1B 39 0A F2 | 	cmp	local14, local13 wz
204bc     14 00 90 5D |  if_ne	jmp	#LR__3180
204c0     01 3A CE F7 | 	test	local15, #1 wz
204c4     0C 00 90 AD |  if_e	jmp	#LR__3180
204c8                 | LR__3179
204c8     01 3A 06 F1 | 	add	local15, #1
204cc     1E 3B 0A F2 | 	cmp	local15, local16 wz
204d0     01 30 06 A1 |  if_e	add	local10, #1
204d4                 | LR__3180
204d4                 | LR__3181
204d4     10 3B 62 FC | 	wrlong	local15, local02
204d8     11 31 62 FC | 	wrlong	local10, local03
204dc                 | LR__3182
204dc     A7 F0 03 F6 | 	mov	ptra, fp
204e0     B2 00 A0 FD | 	call	#popregs_
204e4                 | __system__disassemble_0400_ret
204e4     2D 00 64 FD | 	ret
204e8                 | 
204e8                 | __system__emitsign_0402
204e8     00 FA 05 F6 | 	mov	result1, #0
204ec     00 14 0E F2 | 	cmp	arg02, #0 wz
204f0     09 01 02 56 |  if_ne	mov	_var01, arg01
204f4     01 12 06 51 |  if_ne	add	arg01, #1
204f8     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
204fc     01 FA 05 56 |  if_ne	mov	result1, #1
20500     00 16 0E F2 | 	cmp	arg03, #0 wz
20504     09 61 48 5C |  if_ne	wrbyte	#48, arg01
20508     01 12 06 51 |  if_ne	add	arg01, #1
2050c     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
20510     02 FA 05 51 |  if_ne	add	result1, #2
20514                 | __system__emitsign_0402_ret
20514     2D 00 64 FD | 	ret
20518                 | 
20518                 | __system___gettxfunc
20518     01 4A 05 F6 | 	mov	COUNT_, #1
2051c     A8 00 A0 FD | 	call	#pushregs_
20520     A0 F8 BF FD | 	call	#__system____getftab
20524     FD 1E 0A F6 | 	mov	local01, result1 wz
20528     10 00 90 AD |  if_e	jmp	#LR__3190
2052c     08 1E 06 F1 | 	add	local01, #8
20530     0F 15 0A FB | 	rdlong	arg02, local01 wz
20534     08 1E 86 F1 | 	sub	local01, #8
20538     08 00 90 5D |  if_ne	jmp	#LR__3191
2053c                 | LR__3190
2053c     00 FA 05 F6 | 	mov	result1, #0
20540     0C 00 90 FD | 	jmp	#LR__3192
20544                 | LR__3191
20544     00 78 03 FF 
20548     00 1E 46 F5 | 	or	local01, ##116391936
2054c     0F FB 01 F6 | 	mov	result1, local01
20550                 | LR__3192
20550     A7 F0 03 F6 | 	mov	ptra, fp
20554     B2 00 A0 FD | 	call	#popregs_
20558                 | __system___gettxfunc_ret
20558     2D 00 64 FD | 	ret
2055c                 | 
2055c                 | __system___getrxfunc
2055c     01 4A 05 F6 | 	mov	COUNT_, #1
20560     A8 00 A0 FD | 	call	#pushregs_
20564     5C F8 BF FD | 	call	#__system____getftab
20568     FD 1E 0A F6 | 	mov	local01, result1 wz
2056c     10 00 90 AD |  if_e	jmp	#LR__3200
20570     08 1E 06 F1 | 	add	local01, #8
20574     0F 15 0A FB | 	rdlong	arg02, local01 wz
20578     08 1E 86 F1 | 	sub	local01, #8
2057c     08 00 90 5D |  if_ne	jmp	#LR__3201
20580                 | LR__3200
20580     00 FA 05 F6 | 	mov	result1, #0
20584     08 00 90 FD | 	jmp	#LR__3202
20588                 | LR__3201
20588     58 1E 26 F4 | 	bith	local01, #88
2058c     0F FB 01 F6 | 	mov	result1, local01
20590                 | LR__3202
20590     A7 F0 03 F6 | 	mov	ptra, fp
20594     B2 00 A0 FD | 	call	#popregs_
20598                 | __system___getrxfunc_ret
20598     2D 00 64 FD | 	ret
2059c                 | 
2059c                 | __system___getiolock_0442
2059c     01 4A 05 F6 | 	mov	COUNT_, #1
205a0     A8 00 A0 FD | 	call	#pushregs_
205a4     1C F8 BF FD | 	call	#__system____getftab
205a8     FD 1E 0A F6 | 	mov	local01, result1 wz
205ac     10 00 90 AD |  if_e	jmp	#LR__3210
205b0     08 1E 06 F1 | 	add	local01, #8
205b4     0F FB 09 FB | 	rdlong	result1, local01 wz
205b8     08 1E 86 F1 | 	sub	local01, #8
205bc     18 00 90 5D |  if_ne	jmp	#LR__3211
205c0                 | LR__3210
205c0     01 00 00 FF 
205c4     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
205c8     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
205cc     01 00 00 FF 
205d0     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
205d4     08 00 90 FD | 	jmp	#LR__3212
205d8                 | LR__3211
205d8     0C 1E 06 F1 | 	add	local01, #12
205dc     0F FB 01 F6 | 	mov	result1, local01
205e0                 | LR__3212
205e0     A7 F0 03 F6 | 	mov	ptra, fp
205e4     B2 00 A0 FD | 	call	#popregs_
205e8                 | __system___getiolock_0442_ret
205e8     2D 00 64 FD | 	ret
205ec                 | 
205ec                 | __system____ScanForChar
205ec     09 01 02 F6 | 	mov	_var01, arg01
205f0     09 03 02 F6 | 	mov	_var02, arg01
205f4     97 06 48 FB | 	callpa	#(@LR__3221-@LR__3220)>>2,fcache_load_ptr_
205f8                 | LR__3220
205f8     01 FB C9 FA | 	rdbyte	result1, _var02 wz
205fc     01 02 06 51 |  if_ne	add	_var02, #1
20600     F4 FF 9F 5D |  if_ne	jmp	#LR__3220
20604                 | LR__3221
20604     09 03 82 F1 | 	sub	_var02, arg01
20608     01 FB 01 F6 | 	mov	result1, _var02
2060c     FD 12 0A F6 | 	mov	arg01, result1 wz
20610     00 FA 05 A6 |  if_e	mov	result1, #0
20614     B8 00 90 AD |  if_e	jmp	#LR__3228
20618     0A 05 02 F6 | 	mov	_var03, arg02
2061c     07 04 4E F7 | 	zerox	_var03, #7 wz
20620     00 FA 05 A6 |  if_e	mov	result1, #0
20624     A8 00 90 AD |  if_e	jmp	#LR__3228
20628     01 16 16 F2 | 	cmp	arg03, #1 wc
2062c     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
20630     01 16 06 86 |  if_c_and_z	mov	arg03, #1
20634     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
20638     94 00 90 4D |  if_c_and_nz	jmp	#LR__3228
2063c     09 17 1A F2 | 	cmp	arg03, arg01 wcz
20640     10 00 90 ED |  if_be	jmp	#LR__3222
20644     00 18 0E F2 | 	cmp	arg04, #0 wz
20648     00 FA 05 A6 |  if_e	mov	result1, #0
2064c     80 00 90 AD |  if_e	jmp	#LR__3228
20650     09 17 02 F6 | 	mov	arg03, arg01
20654                 | LR__3222
20654     01 16 86 F1 | 	sub	arg03, #1
20658     00 18 0E F2 | 	cmp	arg04, #0 wz
2065c     38 00 90 5D |  if_ne	jmp	#LR__3224
20660     0B 07 02 F6 | 	mov	_var04, arg03
20664     09 09 02 F6 | 	mov	_var05, arg01
20668                 | LR__3223
20668     04 07 12 F2 | 	cmp	_var04, _var05 wc
2066c     5C 00 90 3D |  if_ae	jmp	#LR__3227
20670     03 05 02 F6 | 	mov	_var03, _var04
20674     00 05 02 F1 | 	add	_var03, _var01
20678     02 05 C2 FA | 	rdbyte	_var03, _var03
2067c     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
20680     0C 05 0A F2 | 	cmp	_var03, arg04 wz
20684     01 06 06 A1 |  if_e	add	_var04, #1
20688     03 FB 01 A6 |  if_e	mov	result1, _var04
2068c     40 00 90 AD |  if_e	jmp	#LR__3228
20690     01 06 06 F1 | 	add	_var04, #1
20694     D0 FF 9F FD | 	jmp	#LR__3223
20698                 | LR__3224
20698     0B 07 02 F6 | 	mov	_var04, arg03
2069c                 | LR__3225
2069c     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
206a0     28 00 90 1D |  if_a	jmp	#LR__3226
206a4     03 09 02 F6 | 	mov	_var05, _var04
206a8     00 09 02 F1 | 	add	_var05, _var01
206ac     04 05 C2 FA | 	rdbyte	_var03, _var05
206b0     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
206b4     04 05 0A F2 | 	cmp	_var03, _var05 wz
206b8     01 06 06 A1 |  if_e	add	_var04, #1
206bc     03 FB 01 A6 |  if_e	mov	result1, _var04
206c0     0C 00 90 AD |  if_e	jmp	#LR__3228
206c4     01 06 86 F1 | 	sub	_var04, #1
206c8     D0 FF 9F FD | 	jmp	#LR__3225
206cc                 | LR__3226
206cc                 | LR__3227
206cc     00 FA 05 F6 | 	mov	result1, #0
206d0                 | LR__3228
206d0                 | __system____ScanForChar_ret
206d0     2D 00 64 FD | 	ret
206d4                 | 
206d4                 | __system___basic_dir
206d4     05 4A 05 F6 | 	mov	COUNT_, #5
206d8     A8 00 A0 FD | 	call	#pushregs_
206dc     4C F0 07 F1 | 	add	ptra, #76
206e0     04 4E 05 F1 | 	add	fp, #4
206e4     A7 12 62 FC | 	wrlong	arg01, fp
206e8     04 4E 05 F1 | 	add	fp, #4
206ec     A7 14 62 FC | 	wrlong	arg02, fp
206f0     04 4E 85 F1 | 	sub	fp, #4
206f4     A7 14 0A FB | 	rdlong	arg02, fp wz
206f8     04 4E 85 F1 | 	sub	fp, #4
206fc     04 4E 05 51 |  if_ne	add	fp, #4
20700     A7 1E 02 5B |  if_ne	rdlong	local01, fp
20704     04 4E 85 51 |  if_ne	sub	fp, #4
20708     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
2070c     70 00 90 AD |  if_e	jmp	#LR__3230
20710     03 00 00 FF 
20714     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
20718     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2071c     03 00 00 FF 
20720     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
20724     03 00 00 5F 
20728     28 E7 05 51 |  if_ne	add	ptr___system__dat__, ##1832
2072c     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
20730     03 00 00 5F 
20734     28 E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
20738     1C EA BF 5D |  if_ne	call	#__system__closedir
2073c     51 01 00 FF 
20740     14 12 06 F6 | 	mov	arg01, ##@LR__4388
20744     24 E9 BF FD | 	call	#__system__opendir
20748     03 00 00 FF 
2074c     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
20750     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
20754     08 4E 05 F1 | 	add	fp, #8
20758     A7 20 02 FB | 	rdlong	local02, fp
2075c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
20760     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
20764     04 4E 85 F1 | 	sub	fp, #4
20768     A7 20 02 FB | 	rdlong	local02, fp
2076c     04 4E 85 F1 | 	sub	fp, #4
20770     04 E6 05 F1 | 	add	ptr___system__dat__, #4
20774     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
20778     03 00 00 FF 
2077c     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
20780                 | LR__3230
20780     03 00 00 FF 
20784     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
20788     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2078c     03 00 00 FF 
20790     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
20794     51 01 00 AF 
20798     16 FA 05 A6 |  if_e	mov	result1, ##@LR__4389
2079c     84 02 90 AD |  if_e	jmp	#LR__3243
207a0                 | LR__3231
207a0     03 00 00 FF 
207a4     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
207a8     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
207ac     03 00 00 FF 
207b0     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
207b4     14 EA BF FD | 	call	#__system__readdir
207b8     0C 4E 05 F1 | 	add	fp, #12
207bc     A7 FA 61 FC | 	wrlong	result1, fp
207c0     0C 4E 85 F1 | 	sub	fp, #12
207c4     00 FA 0D F2 | 	cmp	result1, #0 wz
207c8     38 00 90 5D |  if_ne	jmp	#LR__3232
207cc     03 00 00 FF 
207d0     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
207d4     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
207d8     03 00 00 FF 
207dc     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
207e0     74 E9 BF FD | 	call	#__system__closedir
207e4     03 00 00 FF 
207e8     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
207ec     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
207f0     03 00 00 FF 
207f4     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
207f8     51 01 00 FF 
207fc     18 FA 05 F6 | 	mov	result1, ##@LR__4390
20800     20 02 90 FD | 	jmp	#LR__3243
20804                 | LR__3232
20804     0C 4E 05 F1 | 	add	fp, #12
20808     A7 12 02 FB | 	rdlong	arg01, fp
2080c     0C 4E 85 F1 | 	sub	fp, #12
20810     03 00 00 FF 
20814     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
20818     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
2081c     03 00 00 FF 
20820     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
20824     48 07 B0 FD | 	call	#__system___pat_match
20828     00 FA 0D F2 | 	cmp	result1, #0 wz
2082c     70 FF 9F AD |  if_e	jmp	#LR__3231
20830     03 00 00 FF 
20834     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
20838     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2083c     03 00 00 FF 
20840     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
20844     78 01 90 AD |  if_e	jmp	#LR__3239
20848     0C 4E 05 F1 | 	add	fp, #12
2084c     A7 12 02 FB | 	rdlong	arg01, fp
20850     04 4E 05 F1 | 	add	fp, #4
20854     A7 14 02 F6 | 	mov	arg02, fp
20858     10 4E 85 F1 | 	sub	fp, #16
2085c     6C F2 BF FD | 	call	#__system__stat
20860     40 4E 05 F1 | 	add	fp, #64
20864     A7 FA 61 FC | 	wrlong	result1, fp
20868     40 4E 85 F1 | 	sub	fp, #64
2086c     00 FA 0D F2 | 	cmp	result1, #0 wz
20870     51 01 00 5F 
20874     1A FA 05 56 |  if_ne	mov	result1, ##@LR__4391
20878     A8 01 90 5D |  if_ne	jmp	#LR__3243
2087c     18 4E 05 F1 | 	add	fp, #24
20880     A7 20 02 FB | 	rdlong	local02, fp
20884     78 00 00 FF 
20888     00 20 06 F5 | 	and	local02, ##61440
2088c     2C 4E 05 F1 | 	add	fp, #44
20890     A7 20 62 FC | 	wrlong	local02, fp
20894     38 4E 85 F1 | 	sub	fp, #56
20898     A7 20 02 FB | 	rdlong	local02, fp
2089c     0C 4E 85 F1 | 	sub	fp, #12
208a0     10 21 C2 FA | 	rdbyte	local02, local02
208a4     2E 20 0E F2 | 	cmp	local02, #46 wz
208a8     08 4E 05 A1 |  if_e	add	fp, #8
208ac     A7 04 68 AC |  if_e	wrlong	#2, fp
208b0     08 4E C5 F3 | 	sumz	fp, #8
208b4     A7 00 68 5C |  if_ne	wrlong	#0, fp
208b8     08 4E 85 51 |  if_ne	sub	fp, #8
208bc     44 4E 05 F1 | 	add	fp, #68
208c0     A7 20 02 FB | 	rdlong	local02, fp
208c4     44 4E 85 F1 | 	sub	fp, #68
208c8     08 00 00 FF 
208cc     00 20 0E F2 | 	cmp	local02, ##4096 wz
208d0     18 00 90 5D |  if_ne	jmp	#LR__3233
208d4     08 4E 05 F1 | 	add	fp, #8
208d8     A7 20 02 FB | 	rdlong	local02, fp
208dc     10 20 46 F5 | 	or	local02, #16
208e0     A7 20 62 FC | 	wrlong	local02, fp
208e4     08 4E 85 F1 | 	sub	fp, #8
208e8     AC 00 90 FD | 	jmp	#LR__3238
208ec                 | LR__3233
208ec     44 4E 05 F1 | 	add	fp, #68
208f0     A7 20 02 FB | 	rdlong	local02, fp
208f4     44 4E 85 F1 | 	sub	fp, #68
208f8     10 00 00 FF 
208fc     00 20 0E F2 | 	cmp	local02, ##8192 wz
20900     44 4E 05 51 |  if_ne	add	fp, #68
20904     A7 1E 02 5B |  if_ne	rdlong	local01, fp
20908     44 4E 85 51 |  if_ne	sub	fp, #68
2090c     18 00 00 5F 
20910     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
20914     44 4E 05 51 |  if_ne	add	fp, #68
20918     0F 23 02 56 |  if_ne	mov	local03, local01
2091c     44 4E 85 51 |  if_ne	sub	fp, #68
20920     20 00 00 5F 
20924     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
20928     18 00 90 5D |  if_ne	jmp	#LR__3234
2092c     08 4E 05 F1 | 	add	fp, #8
20930     A7 20 02 FB | 	rdlong	local02, fp
20934     04 20 46 F5 | 	or	local02, #4
20938     A7 20 62 FC | 	wrlong	local02, fp
2093c     08 4E 85 F1 | 	sub	fp, #8
20940     54 00 90 FD | 	jmp	#LR__3237
20944                 | LR__3234
20944     18 4E 05 F1 | 	add	fp, #24
20948     A7 20 02 FB | 	rdlong	local02, fp
2094c     18 4E 85 F1 | 	sub	fp, #24
20950     92 20 CE F7 | 	test	local02, #146 wz
20954     18 00 90 5D |  if_ne	jmp	#LR__3235
20958     08 4E 05 F1 | 	add	fp, #8
2095c     A7 20 02 FB | 	rdlong	local02, fp
20960     01 20 46 F5 | 	or	local02, #1
20964     A7 20 62 FC | 	wrlong	local02, fp
20968     08 4E 85 F1 | 	sub	fp, #8
2096c     28 00 90 FD | 	jmp	#LR__3236
20970                 | LR__3235
20970     44 4E 05 F1 | 	add	fp, #68
20974     A7 24 02 FB | 	rdlong	local04, fp
20978     44 4E 85 F1 | 	sub	fp, #68
2097c     08 00 00 FF 
20980     00 24 0E F2 | 	cmp	local04, ##4096 wz
20984     08 4E 05 51 |  if_ne	add	fp, #8
20988     A7 24 02 5B |  if_ne	rdlong	local04, fp
2098c     20 24 46 55 |  if_ne	or	local04, #32
20990     A7 24 62 5C |  if_ne	wrlong	local04, fp
20994     08 4E 85 51 |  if_ne	sub	fp, #8
20998                 | LR__3236
20998                 | LR__3237
20998                 | LR__3238
20998     08 4E 05 F1 | 	add	fp, #8
2099c     A7 24 02 FB | 	rdlong	local04, fp
209a0     08 4E 85 F1 | 	sub	fp, #8
209a4     03 00 00 FF 
209a8     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
209ac     F3 1E 02 FB | 	rdlong	local01, ptr___system__dat__
209b0     03 00 00 FF 
209b4     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
209b8     0F 25 CA F7 | 	test	local04, local01 wz
209bc     E0 FD 9F AD |  if_e	jmp	#LR__3231
209c0                 | LR__3239
209c0     0C 4E 05 F1 | 	add	fp, #12
209c4     A7 12 02 FB | 	rdlong	arg01, fp
209c8     0C 4E 85 F1 | 	sub	fp, #12
209cc     09 27 02 F6 | 	mov	local05, arg01
209d0     97 06 48 FB | 	callpa	#(@LR__3241-@LR__3240)>>2,fcache_load_ptr_
209d4                 | LR__3240
209d4     13 FB C9 FA | 	rdbyte	result1, local05 wz
209d8     01 26 06 51 |  if_ne	add	local05, #1
209dc     F4 FF 9F 5D |  if_ne	jmp	#LR__3240
209e0                 | LR__3241
209e0     13 13 C2 F2 | 	subr	arg01, local05
209e4     01 12 06 F1 | 	add	arg01, #1
209e8     6C E0 BF FD | 	call	#__system___gc_alloc_managed
209ec     48 4E 05 F1 | 	add	fp, #72
209f0     A7 FA 61 FC | 	wrlong	result1, fp
209f4     48 4E 85 F1 | 	sub	fp, #72
209f8     00 FA 0D F2 | 	cmp	result1, #0 wz
209fc     18 00 90 AD |  if_e	jmp	#LR__3242
20a00     48 4E 05 F1 | 	add	fp, #72
20a04     A7 12 02 FB | 	rdlong	arg01, fp
20a08     3C 4E 85 F1 | 	sub	fp, #60
20a0c     A7 14 02 FB | 	rdlong	arg02, fp
20a10     0C 4E 85 F1 | 	sub	fp, #12
20a14     04 A2 BF FD | 	call	#__system____builtin_strcpy
20a18                 | LR__3242
20a18     48 4E 05 F1 | 	add	fp, #72
20a1c     A7 FA 01 FB | 	rdlong	result1, fp
20a20     48 4E 85 F1 | 	sub	fp, #72
20a24                 | LR__3243
20a24     A7 F0 03 F6 | 	mov	ptra, fp
20a28     B2 00 A0 FD | 	call	#popregs_
20a2c                 | __system___basic_dir_ret
20a2c     2D 00 64 FD | 	ret
20a30                 | 
20a30                 | __system__pack_0508
20a30     09 01 02 F6 | 	mov	_var01, arg01
20a34     7F 16 06 F1 | 	add	arg03, #127
20a38     04 18 CE F7 | 	test	arg04, #4 wz
20a3c     10 00 90 AD |  if_e	jmp	#LR__3250
20a40     00 00 0E F2 | 	cmp	_var01, #0 wz
20a44     16 00 C6 A9 |  if_e	decod	_var01, #22
20a48     F7 00 26 F4 | 	bith	_var01, #247
20a4c     B4 00 90 FD | 	jmp	#LR__3259
20a50                 | LR__3250
20a50     02 18 CE F7 | 	test	arg04, #2 wz
20a54     00 C0 3F 5F 
20a58     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
20a5c     00 14 06 56 |  if_ne	mov	arg02, #0
20a60     A0 00 90 5D |  if_ne	jmp	#LR__3258
20a64     08 18 CE F7 | 	test	arg04, #8 wz
20a68     00 00 06 56 |  if_ne	mov	_var01, #0
20a6c     94 00 90 5D |  if_ne	jmp	#LR__3257
20a70     FF 16 56 F2 | 	cmps	arg03, #255 wc
20a74     00 C0 3F 3F 
20a78     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
20a7c     00 14 06 36 |  if_ae	mov	arg02, #0
20a80     80 00 90 3D |  if_ae	jmp	#LR__3256
20a84     01 16 56 F2 | 	cmps	arg03, #1 wc
20a88     6C 00 90 3D |  if_ae	jmp	#LR__3254
20a8c     01 14 46 F0 | 	shr	arg02, #1
20a90     00 03 02 F6 | 	mov	_var02, _var01
20a94     01 02 06 F5 | 	and	_var02, #1
20a98     1F 02 66 F0 | 	shl	_var02, #31
20a9c     01 15 42 F5 | 	or	arg02, _var02
20aa0     01 00 46 F0 | 	shr	_var01, #1
20aa4     97 1E 48 FB | 	callpa	#(@LR__3252-@LR__3251)>>2,fcache_load_ptr_
20aa8                 | LR__3251
20aa8     00 16 56 F2 | 	cmps	arg03, #0 wc
20aac     34 00 90 3D |  if_ae	jmp	#LR__3253
20ab0     00 00 0E F2 | 	cmp	_var01, #0 wz
20ab4     2C 00 90 AD |  if_e	jmp	#LR__3253
20ab8     0A 13 02 F6 | 	mov	arg01, arg02
20abc     01 12 06 F5 | 	and	arg01, #1
20ac0     01 16 06 F1 | 	add	arg03, #1
20ac4     01 14 46 F0 | 	shr	arg02, #1
20ac8     00 03 02 F6 | 	mov	_var02, _var01
20acc     01 02 06 F5 | 	and	_var02, #1
20ad0     1F 02 66 F0 | 	shl	_var02, #31
20ad4     01 15 42 F5 | 	or	arg02, _var02
20ad8     09 15 42 F5 | 	or	arg02, arg01
20adc     01 00 46 F0 | 	shr	_var01, #1
20ae0     C4 FF 9F FD | 	jmp	#LR__3251
20ae4                 | LR__3252
20ae4                 | LR__3253
20ae4     00 16 56 F2 | 	cmps	arg03, #0 wc
20ae8     18 00 90 3D |  if_ae	jmp	#LR__3255
20aec     00 14 0E F2 | 	cmp	arg02, #0 wz
20af0     6F 14 62 FD | 	wrnz	arg02
20af4     0C 00 90 FD | 	jmp	#LR__3255
20af8                 | LR__3254
20af8     17 01 06 F4 | 	bitl	_var01, #279
20afc     17 16 66 F0 | 	shl	arg03, #23
20b00     0B 01 42 F5 | 	or	_var01, arg03
20b04                 | LR__3255
20b04                 | LR__3256
20b04                 | LR__3257
20b04                 | LR__3258
20b04                 | LR__3259
20b04     01 00 CE F7 | 	test	_var01, #1 wz
20b08     01 14 46 55 |  if_ne	or	arg02, #1
20b0c     0A 17 02 F6 | 	mov	arg03, arg02
20b10     00 02 06 F6 | 	mov	_var02, #0
20b14     FF FF 3F FF 
20b18     FF 15 06 F1 | 	add	arg02, ##2147483647
20b1c     0B 15 12 F2 | 	cmp	arg02, arg03 wc
20b20     01 02 06 C6 |  if_b	mov	_var02, #1
20b24     01 01 02 F1 | 	add	_var01, _var02
20b28     01 18 CE F7 | 	test	arg04, #1 wz
20b2c     1F 00 26 54 |  if_ne	bith	_var01, #31
20b30     00 FB 01 F6 | 	mov	result1, _var01
20b34                 | __system__pack_0508_ret
20b34     2D 00 64 FD | 	ret
20b38                 | 
20b38                 | __system___rxtxioctl_0598
20b38     00 15 0E F2 | 	cmp	arg02, #256 wz
20b3c     0C 00 90 AD |  if_e	jmp	#LR__3260
20b40     01 15 0E F2 | 	cmp	arg02, #257 wz
20b44     1C 00 90 AD |  if_e	jmp	#LR__3261
20b48     30 00 90 FD | 	jmp	#LR__3262
20b4c                 | LR__3260
20b4c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
20b50     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
20b54     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
20b58     0B FB 61 FC | 	wrlong	result1, arg03
20b5c     00 FA 05 F6 | 	mov	result1, #0
20b60     28 00 90 FD | 	jmp	#LR__3263
20b64                 | LR__3261
20b64     0B 13 02 FB | 	rdlong	arg01, arg03
20b68     08 E6 05 F1 | 	add	ptr___system__dat__, #8
20b6c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
20b70     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
20b74     00 FA 05 F6 | 	mov	result1, #0
20b78     10 00 90 FD | 	jmp	#LR__3263
20b7c                 | LR__3262
20b7c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
20b80     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
20b84     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20b88     01 FA 65 F6 | 	neg	result1, #1
20b8c                 | LR__3263
20b8c                 | __system___rxtxioctl_0598_ret
20b8c     2D 00 64 FD | 	ret
20b90                 | 
20b90                 | __system____dummy_flush_0599
20b90     00 FA 05 F6 | 	mov	result1, #0
20b94                 | __system____dummy_flush_0599_ret
20b94     2D 00 64 FD | 	ret
20b98                 | 
20b98                 | __system___vfsread
20b98     03 4A 05 F6 | 	mov	COUNT_, #3
20b9c     A8 00 A0 FD | 	call	#pushregs_
20ba0     28 F0 07 F1 | 	add	ptra, #40
20ba4     04 4E 05 F1 | 	add	fp, #4
20ba8     A7 12 62 FC | 	wrlong	arg01, fp
20bac     04 4E 05 F1 | 	add	fp, #4
20bb0     A7 14 62 FC | 	wrlong	arg02, fp
20bb4     04 4E 05 F1 | 	add	fp, #4
20bb8     A7 16 62 FC | 	wrlong	arg03, fp
20bbc     04 4E 85 F1 | 	sub	fp, #4
20bc0     A7 FA 01 FB | 	rdlong	result1, fp
20bc4     14 4E 05 F1 | 	add	fp, #20
20bc8     A7 FA 61 FC | 	wrlong	result1, fp
20bcc     04 4E 05 F1 | 	add	fp, #4
20bd0     A7 00 68 FC | 	wrlong	#0, fp
20bd4     1C 4E 85 F1 | 	sub	fp, #28
20bd8     A7 12 02 FB | 	rdlong	arg01, fp
20bdc     04 4E 85 F1 | 	sub	fp, #4
20be0     08 12 06 F1 | 	add	arg01, #8
20be4     09 FB 01 FB | 	rdlong	result1, arg01
20be8     01 FA CD F7 | 	test	result1, #1 wz
20bec     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
20bf0     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
20bf4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
20bf8     01 FA 65 A6 |  if_e	neg	result1, #1
20bfc     74 02 90 AD |  if_e	jmp	#LR__3276
20c00     04 4E 05 F1 | 	add	fp, #4
20c04     A7 12 02 FB | 	rdlong	arg01, fp
20c08     04 4E 85 F1 | 	sub	fp, #4
20c0c     14 12 06 F1 | 	add	arg01, #20
20c10     09 FB 09 FB | 	rdlong	result1, arg01 wz
20c14     B8 00 90 AD |  if_e	jmp	#LR__3271
20c18     04 4E 05 F1 | 	add	fp, #4
20c1c     A7 12 02 FB | 	rdlong	arg01, fp
20c20     09 17 02 F6 | 	mov	arg03, arg01
20c24     14 16 06 F1 | 	add	arg03, #20
20c28     0B 1F 02 FB | 	rdlong	local01, arg03
20c2c     0F 21 02 F6 | 	mov	local02, local01
20c30     13 1E 46 F7 | 	zerox	local01, #19
20c34     14 20 46 F0 | 	shr	local02, #20
20c38     02 20 66 F0 | 	shl	local02, #2
20c3c     ED 20 02 F1 | 	add	local02, __methods__
20c40     10 21 02 FB | 	rdlong	local02, local02
20c44     04 4E 05 F1 | 	add	fp, #4
20c48     A7 14 02 FB | 	rdlong	arg02, fp
20c4c     04 4E 05 F1 | 	add	fp, #4
20c50     A7 16 02 FB | 	rdlong	arg03, fp
20c54     0C 4E 85 F1 | 	sub	fp, #12
20c58     F2 22 02 F6 | 	mov	local03, objptr
20c5c     0F E5 01 F6 | 	mov	objptr, local01
20c60     2D 20 62 FD | 	call	local02
20c64     11 E5 01 F6 | 	mov	objptr, local03
20c68     10 4E 05 F1 | 	add	fp, #16
20c6c     A7 FA 61 FC | 	wrlong	result1, fp
20c70     10 4E 85 F1 | 	sub	fp, #16
20c74     00 FA 55 F2 | 	cmps	result1, #0 wc
20c78     44 00 90 3D |  if_ae	jmp	#LR__3270
20c7c     04 4E 05 F1 | 	add	fp, #4
20c80     A7 22 02 FB | 	rdlong	local03, fp
20c84     11 1F 02 F6 | 	mov	local01, local03
20c88     08 22 06 F1 | 	add	local03, #8
20c8c     11 21 02 FB | 	rdlong	local02, local03
20c90     20 20 46 F5 | 	or	local02, #32
20c94     08 1E 06 F1 | 	add	local01, #8
20c98     0F 21 62 FC | 	wrlong	local02, local01
20c9c     0C 4E 05 F1 | 	add	fp, #12
20ca0     A7 12 0A FB | 	rdlong	arg01, fp wz
20ca4     10 4E 85 F1 | 	sub	fp, #16
20ca8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
20cac     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
20cb0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20cb4     01 FA 65 56 |  if_ne	neg	result1, #1
20cb8     00 FA 05 A6 |  if_e	mov	result1, #0
20cbc     B4 01 90 FD | 	jmp	#LR__3276
20cc0                 | LR__3270
20cc0     10 4E 05 F1 | 	add	fp, #16
20cc4     A7 FA 01 FB | 	rdlong	result1, fp
20cc8     10 4E 85 F1 | 	sub	fp, #16
20ccc     A4 01 90 FD | 	jmp	#LR__3276
20cd0                 | LR__3271
20cd0     04 4E 05 F1 | 	add	fp, #4
20cd4     A7 12 02 FB | 	rdlong	arg01, fp
20cd8     20 12 06 F1 | 	add	arg01, #32
20cdc     09 13 0A FB | 	rdlong	arg01, arg01 wz
20ce0     14 4E 05 F1 | 	add	fp, #20
20ce4     A7 12 62 FC | 	wrlong	arg01, fp
20ce8     18 4E 85 F1 | 	sub	fp, #24
20cec     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
20cf0     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
20cf4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
20cf8     01 FA 65 A6 |  if_e	neg	result1, #1
20cfc     74 01 90 AD |  if_e	jmp	#LR__3276
20d00     04 4E 05 F1 | 	add	fp, #4
20d04     A7 22 02 FB | 	rdlong	local03, fp
20d08     04 4E 85 F1 | 	sub	fp, #4
20d0c     28 22 06 F1 | 	add	local03, #40
20d10     11 21 0A FB | 	rdlong	local02, local03 wz
20d14     7C 00 90 AD |  if_e	jmp	#LR__3273
20d18     04 4E 05 F1 | 	add	fp, #4
20d1c     A7 12 02 FB | 	rdlong	arg01, fp
20d20     09 23 02 F6 | 	mov	local03, arg01
20d24     28 22 06 F1 | 	add	local03, #40
20d28     11 1F 02 FB | 	rdlong	local01, local03
20d2c     0F 21 02 F6 | 	mov	local02, local01
20d30     13 1E 46 F7 | 	zerox	local01, #19
20d34     14 20 46 F0 | 	shr	local02, #20
20d38     02 20 66 F0 | 	shl	local02, #2
20d3c     ED 20 02 F1 | 	add	local02, __methods__
20d40     10 21 02 FB | 	rdlong	local02, local02
20d44     20 4E 05 F1 | 	add	fp, #32
20d48     A7 16 02 F6 | 	mov	arg03, fp
20d4c     24 4E 85 F1 | 	sub	fp, #36
20d50     00 15 06 F6 | 	mov	arg02, #256
20d54     F2 22 02 F6 | 	mov	local03, objptr
20d58     0F E5 01 F6 | 	mov	objptr, local01
20d5c     2D 20 62 FD | 	call	local02
20d60     11 E5 01 F6 | 	mov	objptr, local03
20d64     10 4E 05 F1 | 	add	fp, #16
20d68     A7 FA 61 FC | 	wrlong	result1, fp
20d6c     00 FA 4D F2 | 	cmps	result1, #0 wz
20d70     10 4E 85 F1 | 	sub	fp, #16
20d74     1C 00 90 5D |  if_ne	jmp	#LR__3272
20d78     24 4E 05 F1 | 	add	fp, #36
20d7c     A7 20 02 FB | 	rdlong	local02, fp
20d80     24 4E 85 F1 | 	sub	fp, #36
20d84     02 20 CE F7 | 	test	local02, #2 wz
20d88     20 4E 05 51 |  if_ne	add	fp, #32
20d8c     A7 02 68 5C |  if_ne	wrlong	#1, fp
20d90     20 4E 85 51 |  if_ne	sub	fp, #32
20d94                 | LR__3272
20d94                 | LR__3273
20d94     10 4E 05 F1 | 	add	fp, #16
20d98     A7 00 68 FC | 	wrlong	#0, fp
20d9c     10 4E 85 F1 | 	sub	fp, #16
20da0                 | LR__3274
20da0     0C 4E 05 F1 | 	add	fp, #12
20da4     A7 22 02 FB | 	rdlong	local03, fp
20da8     0C 4E 85 F1 | 	sub	fp, #12
20dac     01 22 16 F2 | 	cmp	local03, #1 wc
20db0     B4 00 90 CD |  if_b	jmp	#LR__3275
20db4     18 4E 05 F1 | 	add	fp, #24
20db8     A7 20 02 FB | 	rdlong	local02, fp
20dbc     10 23 02 F6 | 	mov	local03, local02
20dc0     13 22 46 F7 | 	zerox	local03, #19
20dc4     14 20 46 F0 | 	shr	local02, #20
20dc8     02 20 66 F0 | 	shl	local02, #2
20dcc     ED 20 02 F1 | 	add	local02, __methods__
20dd0     10 21 02 FB | 	rdlong	local02, local02
20dd4     14 4E 85 F1 | 	sub	fp, #20
20dd8     A7 12 02 FB | 	rdlong	arg01, fp
20ddc     04 4E 85 F1 | 	sub	fp, #4
20de0     F2 1E 02 F6 | 	mov	local01, objptr
20de4     11 E5 01 F6 | 	mov	objptr, local03
20de8     2D 20 62 FD | 	call	local02
20dec     0F E5 01 F6 | 	mov	objptr, local01
20df0     14 4E 05 F1 | 	add	fp, #20
20df4     A7 FA 61 FC | 	wrlong	result1, fp
20df8     14 4E 85 F1 | 	sub	fp, #20
20dfc     00 FA 55 F2 | 	cmps	result1, #0 wc
20e00     64 00 90 CD |  if_b	jmp	#LR__3275
20e04     1C 4E 05 F1 | 	add	fp, #28
20e08     A7 22 02 FB | 	rdlong	local03, fp
20e0c     11 21 02 F6 | 	mov	local02, local03
20e10     01 20 06 F1 | 	add	local02, #1
20e14     A7 20 62 FC | 	wrlong	local02, fp
20e18     08 4E 85 F1 | 	sub	fp, #8
20e1c     A7 20 02 FB | 	rdlong	local02, fp
20e20     11 21 42 FC | 	wrbyte	local02, local03
20e24     04 4E 85 F1 | 	sub	fp, #4
20e28     A7 22 02 FB | 	rdlong	local03, fp
20e2c     01 22 06 F1 | 	add	local03, #1
20e30     A7 22 62 FC | 	wrlong	local03, fp
20e34     04 4E 85 F1 | 	sub	fp, #4
20e38     A7 22 02 FB | 	rdlong	local03, fp
20e3c     01 22 86 F1 | 	sub	local03, #1
20e40     A7 22 62 FC | 	wrlong	local03, fp
20e44     14 4E 05 F1 | 	add	fp, #20
20e48     A7 22 0A FB | 	rdlong	local03, fp wz
20e4c     20 4E 85 F1 | 	sub	fp, #32
20e50     4C FF 9F AD |  if_e	jmp	#LR__3274
20e54     14 4E 05 F1 | 	add	fp, #20
20e58     A7 20 02 FB | 	rdlong	local02, fp
20e5c     14 4E 85 F1 | 	sub	fp, #20
20e60     0A 20 0E F2 | 	cmp	local02, #10 wz
20e64     38 FF 9F 5D |  if_ne	jmp	#LR__3274
20e68                 | LR__3275
20e68     10 4E 05 F1 | 	add	fp, #16
20e6c     A7 FA 01 FB | 	rdlong	result1, fp
20e70     10 4E 85 F1 | 	sub	fp, #16
20e74                 | LR__3276
20e74     A7 F0 03 F6 | 	mov	ptra, fp
20e78     B2 00 A0 FD | 	call	#popregs_
20e7c                 | __system___vfsread_ret
20e7c     2D 00 64 FD | 	ret
20e80                 | 
20e80                 | __system____default_filbuf
20e80     04 4A 05 F6 | 	mov	COUNT_, #4
20e84     A8 00 A0 FD | 	call	#pushregs_
20e88     09 1F 02 F6 | 	mov	local01, arg01
20e8c     0F 21 02 FB | 	rdlong	local02, local01
20e90     0C 20 06 F1 | 	add	local02, #12
20e94     10 FB 09 FB | 	rdlong	result1, local02 wz
20e98     0C 20 86 F1 | 	sub	local02, #12
20e9c     20 00 90 5D |  if_ne	jmp	#LR__3280
20ea0     14 20 06 F1 | 	add	local02, #20
20ea4     10 FB 01 F6 | 	mov	result1, local02
20ea8     04 20 86 F1 | 	sub	local02, #4
20eac     10 FB 61 FC | 	wrlong	result1, local02
20eb0     04 20 86 F1 | 	sub	local02, #4
20eb4     02 00 80 FF 
20eb8     10 01 68 FC | 	wrlong	##1024, local02
20ebc     0C 20 86 F1 | 	sub	local02, #12
20ec0                 | LR__3280
20ec0     14 1E 06 F1 | 	add	local01, #20
20ec4     0F 23 02 FB | 	rdlong	local03, local01
20ec8     11 25 02 F6 | 	mov	local04, local03
20ecc     14 1E 86 F1 | 	sub	local01, #20
20ed0     13 24 46 F7 | 	zerox	local04, #19
20ed4     14 22 46 F0 | 	shr	local03, #20
20ed8     02 22 66 F0 | 	shl	local03, #2
20edc     ED 22 02 F1 | 	add	local03, __methods__
20ee0     11 23 02 FB | 	rdlong	local03, local03
20ee4     10 20 06 F1 | 	add	local02, #16
20ee8     10 15 02 FB | 	rdlong	arg02, local02
20eec     04 20 86 F1 | 	sub	local02, #4
20ef0     10 17 02 FB | 	rdlong	arg03, local02
20ef4     0C 20 86 F1 | 	sub	local02, #12
20ef8     0F 13 02 F6 | 	mov	arg01, local01
20efc     F2 1E 02 F6 | 	mov	local01, objptr
20f00     12 E5 01 F6 | 	mov	objptr, local04
20f04     2D 22 62 FD | 	call	local03
20f08     0F E5 01 F6 | 	mov	objptr, local01
20f0c     FD 24 02 F6 | 	mov	local04, result1
20f10     00 24 56 F2 | 	cmps	local04, #0 wc
20f14     01 FA 65 C6 |  if_b	neg	result1, #1
20f18     28 00 90 CD |  if_b	jmp	#LR__3281
20f1c     10 25 62 FC | 	wrlong	local04, local02
20f20     10 20 06 F1 | 	add	local02, #16
20f24     10 23 02 FB | 	rdlong	local03, local02
20f28     0C 20 86 F1 | 	sub	local02, #12
20f2c     10 23 62 FC | 	wrlong	local03, local02
20f30     04 20 06 F1 | 	add	local02, #4
20f34     10 23 02 FB | 	rdlong	local03, local02
20f38     01 22 46 F5 | 	or	local03, #1
20f3c     10 23 62 FC | 	wrlong	local03, local02
20f40     12 FB 01 F6 | 	mov	result1, local04
20f44                 | LR__3281
20f44     A7 F0 03 F6 | 	mov	ptra, fp
20f48     B2 00 A0 FD | 	call	#popregs_
20f4c                 | __system____default_filbuf_ret
20f4c     2D 00 64 FD | 	ret
20f50                 | 
20f50                 | __system__getlower_0984
20f50     41 12 56 F2 | 	cmps	arg01, #65 wc
20f54     10 00 90 CD |  if_b	jmp	#LR__3290
20f58     5B 12 56 F2 | 	cmps	arg01, #91 wc
20f5c     09 FB 01 C6 |  if_b	mov	result1, arg01
20f60     20 FA 05 C1 |  if_b	add	result1, #32
20f64     04 00 90 CD |  if_b	jmp	#__system__getlower_0984_ret
20f68                 | LR__3290
20f68     09 FB 01 F6 | 	mov	result1, arg01
20f6c                 | __system__getlower_0984_ret
20f6c     2D 00 64 FD | 	ret
20f70                 | 
20f70                 | __system___pat_match
20f70     08 4A 05 F6 | 	mov	COUNT_, #8
20f74     A8 00 A0 FD | 	call	#pushregs_
20f78     09 1F 02 F6 | 	mov	local01, arg01
20f7c                 | LR__3300
20f7c     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
20f80     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
20f84     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
20f88     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
20f8c     2C 00 90 AD |  if_e	jmp	#LR__3301
20f90     0A 13 C2 FA | 	rdbyte	arg01, arg02
20f94     B8 FF BF FD | 	call	#__system__getlower_0984
20f98     FD 22 02 F6 | 	mov	local03, result1
20f9c     0F 13 C2 FA | 	rdbyte	arg01, local01
20fa0     AC FF BF FD | 	call	#__system__getlower_0984
20fa4     11 FB 09 F2 | 	cmp	result1, local03 wz
20fa8     00 FA 05 56 |  if_ne	mov	result1, #0
20fac     FC 00 90 5D |  if_ne	jmp	#LR__3309
20fb0     01 1E 06 F1 | 	add	local01, #1
20fb4     01 14 06 F1 | 	add	arg02, #1
20fb8     C0 FF 9F FD | 	jmp	#LR__3300
20fbc                 | LR__3301
20fbc     0A 23 C2 FA | 	rdbyte	local03, arg02
20fc0     2A 22 0E F2 | 	cmp	local03, #42 wz
20fc4     D4 00 90 5D |  if_ne	jmp	#LR__3308
20fc8     01 14 06 F1 | 	add	arg02, #1
20fcc     0A 21 C2 FA | 	rdbyte	local02, arg02
20fd0     01 14 86 F1 | 	sub	arg02, #1
20fd4     2E 20 0E F2 | 	cmp	local02, #46 wz
20fd8     28 00 90 5D |  if_ne	jmp	#LR__3302
20fdc     02 14 06 F1 | 	add	arg02, #2
20fe0     0A 21 C2 FA | 	rdbyte	local02, arg02
20fe4     02 14 86 F1 | 	sub	arg02, #2
20fe8     2A 20 0E F2 | 	cmp	local02, #42 wz
20fec     03 14 06 A1 |  if_e	add	arg02, #3
20ff0     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
20ff4     03 14 86 A1 |  if_e	sub	arg02, #3
20ff8     12 27 0A A6 |  if_e	mov	local05, local04 wz
20ffc     01 FA 05 A6 |  if_e	mov	result1, #1
21000     A8 00 90 AD |  if_e	jmp	#LR__3309
21004                 | LR__3302
21004     01 14 06 F1 | 	add	arg02, #1
21008     00 28 06 F6 | 	mov	local06, #0
2100c     97 1E 48 FB | 	callpa	#(@LR__3305-@LR__3303)>>2,fcache_load_ptr_
21010                 | LR__3303
21010     14 2B 02 F6 | 	mov	local07, local06
21014     0A 2B 02 F1 | 	add	local07, arg02
21018     15 2B CA FA | 	rdbyte	local07, local07 wz
2101c     14 27 02 56 |  if_ne	mov	local05, local06
21020     01 26 06 51 |  if_ne	add	local05, #1
21024     13 29 02 56 |  if_ne	mov	local06, local05
21028     E4 FF 9F 5D |  if_ne	jmp	#LR__3303
2102c     00 2C 06 F6 | 	mov	local08, #0
21030                 | LR__3304
21030     16 2B 02 F6 | 	mov	local07, local08
21034     0F 2B 02 F1 | 	add	local07, local01
21038     15 2B CA FA | 	rdbyte	local07, local07 wz
2103c     16 27 02 56 |  if_ne	mov	local05, local08
21040     01 26 06 51 |  if_ne	add	local05, #1
21044     13 2D 02 56 |  if_ne	mov	local08, local05
21048     E4 FF 9F 5D |  if_ne	jmp	#LR__3304
2104c                 | LR__3305
2104c     14 2D 52 F2 | 	cmps	local08, local06 wc
21050     00 FA 05 C6 |  if_b	mov	result1, #0
21054     54 00 90 CD |  if_b	jmp	#LR__3309
21058     16 21 02 F6 | 	mov	local02, local08
2105c     14 21 82 F1 | 	sub	local02, local06
21060     10 1F 02 F1 | 	add	local01, local02
21064                 | LR__3306
21064     01 28 56 F2 | 	cmps	local06, #1 wc
21068     30 00 90 CD |  if_b	jmp	#LR__3307
2106c     0F 13 C2 FA | 	rdbyte	arg01, local01
21070     DC FE BF FD | 	call	#__system__getlower_0984
21074     FD 2C 02 F6 | 	mov	local08, result1
21078     0A 13 C2 FA | 	rdbyte	arg01, arg02
2107c     D0 FE BF FD | 	call	#__system__getlower_0984
21080     FD 2C 0A F2 | 	cmp	local08, result1 wz
21084     00 FA 05 56 |  if_ne	mov	result1, #0
21088     20 00 90 5D |  if_ne	jmp	#LR__3309
2108c     01 1E 06 F1 | 	add	local01, #1
21090     01 14 06 F1 | 	add	arg02, #1
21094     01 28 86 F1 | 	sub	local06, #1
21098     C8 FF 9F FD | 	jmp	#LR__3306
2109c                 | LR__3307
2109c                 | LR__3308
2109c     0A 2D CA FA | 	rdbyte	local08, arg02 wz
210a0     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
210a4     01 FA 05 A6 |  if_e	mov	result1, #1
210a8     00 FA 05 56 |  if_ne	mov	result1, #0
210ac                 | LR__3309
210ac     A7 F0 03 F6 | 	mov	ptra, fp
210b0     B2 00 A0 FD | 	call	#popregs_
210b4                 | __system___pat_match_ret
210b4     2D 00 64 FD | 	ret
210b8                 | 
210b8                 | _fatfs_cc_ff_uni2oem
210b8     00 00 06 F6 | 	mov	_var01, #0
210bc     80 12 16 F2 | 	cmp	arg01, #128 wc
210c0     09 01 02 C6 |  if_b	mov	_var01, arg01
210c4     58 00 90 CD |  if_b	jmp	#LR__3314
210c8     80 00 00 FF 
210cc     00 12 16 F2 | 	cmp	arg01, ##65536 wc
210d0     4C 00 90 3D |  if_ae	jmp	#LR__3313
210d4     0A FB 31 F9 | 	getword	result1, arg02, #0
210d8     01 00 00 FF 
210dc     52 FB 0D F2 | 	cmp	result1, ##850 wz
210e0     3C 00 90 5D |  if_ne	jmp	#LR__3313
210e4                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
210e4     00 00 06 F6 | 	mov	_var01, #0
210e8     97 14 48 FB | 	callpa	#(@LR__3311-@LR__3310)>>2,fcache_load_ptr_
210ec                 | LR__3310
210ec     00 FB 31 F9 | 	getword	result1, _var01, #0
210f0     80 FA 15 F2 | 	cmp	result1, #128 wc
210f4     1C 00 90 3D |  if_ae	jmp	#LR__3312
210f8     00 FB 31 F9 | 	getword	result1, _var01, #0
210fc     01 FA 65 F0 | 	shl	result1, #1
21100     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
21104     FD FA E1 FA | 	rdword	result1, result1
21108     FD 12 0A F2 | 	cmp	arg01, result1 wz
2110c     01 00 06 51 |  if_ne	add	_var01, #1
21110     D8 FF 9F 5D |  if_ne	jmp	#LR__3310
21114                 | LR__3311
21114                 | LR__3312
21114     00 01 32 F9 | 	getword	_var01, _var01, #0
21118     80 00 06 F1 | 	add	_var01, #128
2111c     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
21120                 | LR__3313
21120                 | LR__3314
21120                 | ' 			c = (c + 0x80) & 0xFF;
21120                 | ' 		}
21120                 | ' 	}
21120                 | ' 
21120                 | ' 	return c;
21120     00 FB 01 F6 | 	mov	result1, _var01
21124                 | _fatfs_cc_ff_uni2oem_ret
21124     2D 00 64 FD | 	ret
21128                 | 
21128                 | _fatfs_cc_ff_oem2uni
21128     00 00 06 F6 | 	mov	_var01, #0
2112c     09 FB 31 F9 | 	getword	result1, arg01, #0
21130     80 FA 15 F2 | 	cmp	result1, #128 wc
21134     09 01 02 C6 |  if_b	mov	_var01, arg01
21138     2C 00 90 CD |  if_b	jmp	#LR__3321
2113c     0A 15 32 F9 | 	getword	arg02, arg02, #0
21140     01 00 00 FF 
21144     52 15 0E F2 | 	cmp	arg02, ##850 wz
21148     1C 00 90 5D |  if_ne	jmp	#LR__3320
2114c     09 FB 31 F9 | 	getword	result1, arg01, #0
21150     00 FB 15 F2 | 	cmp	result1, #256 wc
21154     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
21158     80 12 86 C1 |  if_b	sub	arg01, #128
2115c     01 12 66 C0 |  if_b	shl	arg01, #1
21160     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
21164     09 01 E2 CA |  if_b	rdword	_var01, arg01
21168                 | LR__3320
21168                 | LR__3321
21168                 | ' 		}
21168                 | ' 	}
21168                 | ' 
21168                 | ' 	return c;
21168     00 FB 01 F6 | 	mov	result1, _var01
2116c                 | _fatfs_cc_ff_oem2uni_ret
2116c     2D 00 64 FD | 	ret
21170                 | 
21170                 | _fatfs_cc_ff_wtoupper
21170     09 01 02 F6 | 	mov	_var01, arg01
21174     80 00 00 FF 
21178     00 00 16 F2 | 	cmp	_var01, ##65536 wc
2117c     60 01 90 3D |  if_ae	jmp	#LR__3343
21180     00 03 02 F6 | 	mov	_var02, _var01
21184     01 01 32 F9 | 	getword	_var01, _var02, #0
21188     08 00 00 FF 
2118c     00 00 16 F2 | 	cmp	_var01, ##4096 wc
21190     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
21194     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
21198     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
2119c     01 00 00 3F 
211a0     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
211a4     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
211a8     01 00 00 3F 
211ac     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
211b0     02 07 02 F6 | 	mov	_var04, _var03
211b4                 | ' 		uc = (WORD)uni;
211b4                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
211b4                 | ' 		for (;;) {
211b4                 | LR__3330
211b4     03 09 E2 FA | 	rdword	_var05, _var04
211b8     04 05 02 F6 | 	mov	_var03, _var05
211bc     0F 04 4E F7 | 	zerox	_var03, #15 wz
211c0     02 06 06 F1 | 	add	_var04, #2
211c4     14 01 90 AD |  if_e	jmp	#LR__3342
211c8     01 05 32 F9 | 	getword	_var03, _var02, #0
211cc     04 01 32 F9 | 	getword	_var01, _var05, #0
211d0     00 05 12 F2 | 	cmp	_var03, _var01 wc
211d4     04 01 90 CD |  if_b	jmp	#LR__3342
211d8     03 0B E2 FA | 	rdword	_var06, _var04
211dc     05 0D 32 F9 | 	getword	_var07, _var06, #0
211e0     08 0C 46 F0 | 	shr	_var07, #8
211e4     05 0B 32 F9 | 	getword	_var06, _var06, #0
211e8     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
211ec     01 05 32 F9 | 	getword	_var03, _var02, #0
211f0     04 0F 32 F9 | 	getword	_var08, _var05, #0
211f4     05 01 32 F9 | 	getword	_var01, _var06, #0
211f8     00 0F 02 F1 | 	add	_var08, _var01
211fc     07 05 52 F2 | 	cmps	_var03, _var08 wc
21200     02 06 06 F1 | 	add	_var04, #2
21204     C4 00 90 3D |  if_ae	jmp	#LR__3341
21208                 | ' 				switch (cmd) {
21208     06 11 32 F9 | 	getword	_var09, _var07, #0
2120c     09 10 26 F3 | 	fle	_var09, #9
21210     30 10 62 FD | 	jmprel	_var09
21214                 | LR__3331
21214     24 00 90 FD | 	jmp	#LR__3332
21218     3C 00 90 FD | 	jmp	#LR__3333
2121c     54 00 90 FD | 	jmp	#LR__3334
21220     5C 00 90 FD | 	jmp	#LR__3335
21224     64 00 90 FD | 	jmp	#LR__3336
21228     6C 00 90 FD | 	jmp	#LR__3337
2122c     74 00 90 FD | 	jmp	#LR__3338
21230     7C 00 90 FD | 	jmp	#LR__3339
21234     84 00 90 FD | 	jmp	#LR__3340
21238     A0 00 90 FD | 	jmp	#LR__3342
2123c                 | LR__3332
2123c     01 03 32 F9 | 	getword	_var02, _var02, #0
21240     04 09 32 F9 | 	getword	_var05, _var05, #0
21244     04 03 82 F1 | 	sub	_var02, _var05
21248     01 02 66 F0 | 	shl	_var02, #1
2124c     03 03 02 F1 | 	add	_var02, _var04
21250     01 03 E2 FA | 	rdword	_var02, _var02
21254     84 00 90 FD | 	jmp	#LR__3342
21258                 | LR__3333
21258     01 05 32 F9 | 	getword	_var03, _var02, #0
2125c     01 03 32 F9 | 	getword	_var02, _var02, #0
21260     04 09 32 F9 | 	getword	_var05, _var05, #0
21264     04 03 82 F1 | 	sub	_var02, _var05
21268     01 02 06 F5 | 	and	_var02, #1
2126c     02 03 C2 F2 | 	subr	_var02, _var03
21270     68 00 90 FD | 	jmp	#LR__3342
21274                 | LR__3334
21274     01 03 32 F9 | 	getword	_var02, _var02, #0
21278     10 02 86 F1 | 	sub	_var02, #16
2127c     5C 00 90 FD | 	jmp	#LR__3342
21280                 | LR__3335
21280     01 03 32 F9 | 	getword	_var02, _var02, #0
21284     20 02 86 F1 | 	sub	_var02, #32
21288     50 00 90 FD | 	jmp	#LR__3342
2128c                 | LR__3336
2128c     01 03 32 F9 | 	getword	_var02, _var02, #0
21290     30 02 86 F1 | 	sub	_var02, #48
21294     44 00 90 FD | 	jmp	#LR__3342
21298                 | LR__3337
21298     01 03 32 F9 | 	getword	_var02, _var02, #0
2129c     1A 02 86 F1 | 	sub	_var02, #26
212a0     38 00 90 FD | 	jmp	#LR__3342
212a4                 | LR__3338
212a4     01 03 32 F9 | 	getword	_var02, _var02, #0
212a8     08 02 06 F1 | 	add	_var02, #8
212ac     2C 00 90 FD | 	jmp	#LR__3342
212b0                 | LR__3339
212b0     01 03 32 F9 | 	getword	_var02, _var02, #0
212b4     50 02 86 F1 | 	sub	_var02, #80
212b8     20 00 90 FD | 	jmp	#LR__3342
212bc                 | LR__3340
212bc     01 03 32 F9 | 	getword	_var02, _var02, #0
212c0     0E 00 00 FF 
212c4     60 02 86 F1 | 	sub	_var02, ##7264
212c8                 | ' 				}
212c8                 | ' 				break;
212c8     10 00 90 FD | 	jmp	#LR__3342
212cc                 | LR__3341
212cc     0F 0C 4E F7 | 	zerox	_var07, #15 wz
212d0     02 0A 06 AA |  if_e	mul	_var06, #2
212d4     05 07 02 A1 |  if_e	add	_var04, _var06
212d8     D8 FE 9F FD | 	jmp	#LR__3330
212dc                 | LR__3342
212dc     01 01 32 F9 | 	getword	_var01, _var02, #0
212e0                 | LR__3343
212e0                 | ' 		}
212e0                 | ' 		uni = uc;
212e0                 | ' 	}
212e0                 | ' 
212e0                 | ' 	return uni;
212e0     00 FB 01 F6 | 	mov	result1, _var01
212e4                 | _fatfs_cc_ff_wtoupper_ret
212e4     2D 00 64 FD | 	ret
212e8                 | 
212e8                 | _fatfs_cc_strncpy
212e8     09 01 02 F6 | 	mov	_var01, arg01
212ec     97 12 48 FB | 	callpa	#(@LR__3351-@LR__3350)>>2,fcache_load_ptr_
212f0                 | ' 
212f0                 | ' 	dscan = dst;
212f0                 | ' 	sscan = src;
212f0                 | ' 	count = n;
212f0                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
212f0                 | LR__3350
212f0     01 16 86 F1 | 	sub	arg03, #1
212f4     00 16 56 F2 | 	cmps	arg03, #0 wc
212f8     18 00 90 CD |  if_b	jmp	#LR__3352
212fc     0A FB C1 FA | 	rdbyte	result1, arg02
21300     00 FB 41 FC | 	wrbyte	result1, _var01
21304     01 14 06 F1 | 	add	arg02, #1
21308     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2130c                 | ' 		continue;
2130c     01 00 06 F1 | 	add	_var01, #1
21310     DC FF 9F 5D |  if_ne	jmp	#LR__3350
21314                 | LR__3351
21314                 | LR__3352
21314     97 0C 48 FB | 	callpa	#(@LR__3354-@LR__3353)>>2,fcache_load_ptr_
21318                 | ' 	while (--count >= 0)
21318                 | LR__3353
21318     01 16 86 F1 | 	sub	arg03, #1
2131c     00 16 56 F2 | 	cmps	arg03, #0 wc
21320     00 03 02 36 |  if_ae	mov	_var02, _var01
21324     01 00 06 31 |  if_ae	add	_var01, #1
21328     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2132c     E8 FF 9F 3D |  if_ae	jmp	#LR__3353
21330                 | LR__3354
21330                 | ' 		*dscan++ = '\0';
21330                 | ' 	return(dst);
21330     09 FB 01 F6 | 	mov	result1, arg01
21334                 | _fatfs_cc_strncpy_ret
21334     2D 00 64 FD | 	ret
21338                 | 
21338                 | _fatfs_cc_memcmp
21338                 | ' 	for (n = size; n > 0; n--)
21338     00 16 0E F2 | 	cmp	arg03, #0 wz
2133c     28 00 90 AD |  if_e	jmp	#LR__3361
21340                 | LR__3360
21340     09 01 C2 FA | 	rdbyte	_var01, arg01
21344     0A 03 C2 FA | 	rdbyte	_var02, arg02
21348     01 01 0A F2 | 	cmp	_var01, _var02 wz
2134c     01 12 06 A1 |  if_e	add	arg01, #1
21350     01 14 06 A1 |  if_e	add	arg02, #1
21354                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
21354     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
21358     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
2135c     01 FB 81 51 |  if_ne	sub	result1, _var02
21360     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
21364     F6 17 6E FB | 	djnz	arg03, #LR__3360
21368                 | LR__3361
21368                 | ' 
21368                 | ' 	return(0);
21368     00 FA 05 F6 | 	mov	result1, #0
2136c                 | _fatfs_cc_memcmp_ret
2136c     2D 00 64 FD | 	ret
21370                 | 
21370                 | _fatfs_cc_strncmp
21370     09 01 0A F6 | 	mov	_var01, arg01 wz
21374     14 00 90 5D |  if_ne	jmp	#LR__3370
21378                 | ' 		return scan2 ? -1 : 0;
21378     00 14 0E F2 | 	cmp	arg02, #0 wz
2137c     01 02 66 56 |  if_ne	neg	_var02, #1
21380     00 02 06 A6 |  if_e	mov	_var02, #0
21384     01 FB 01 F6 | 	mov	result1, _var02
21388     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
2138c                 | LR__3370
2138c     00 14 0E F2 | 	cmp	arg02, #0 wz
21390     01 FA 05 A6 |  if_e	mov	result1, #1
21394     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
21398     0B 05 02 F6 | 	mov	_var03, arg03
2139c     97 16 48 FB | 	callpa	#(@LR__3372-@LR__3371)>>2,fcache_load_ptr_
213a0                 | ' 	count = n;
213a0                 | ' 	do {
213a0                 | LR__3371
213a0     00 07 C2 FA | 	rdbyte	_var04, _var01
213a4     0A 09 02 F6 | 	mov	_var05, arg02
213a8     04 0B C2 FA | 	rdbyte	_var06, _var05
213ac     01 04 86 F1 | 	sub	_var03, #1
213b0     00 04 56 F2 | 	cmps	_var03, #0 wc
213b4     01 00 06 F1 | 	add	_var01, #1
213b8     01 14 06 F1 | 	add	arg02, #1
213bc     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
213c0     08 00 90 2D |  if_nc_and_z	jmp	#LR__3373
213c4     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
213c8     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3371
213cc                 | LR__3372
213cc                 | LR__3373
213cc     00 04 56 F2 | 	cmps	_var03, #0 wc
213d0                 | ' 		return(0);
213d0     00 FA 05 C6 |  if_b	mov	result1, #0
213d4     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
213d8     05 07 0A F2 | 	cmp	_var04, _var06 wz
213dc                 | ' 		return(0);
213dc     00 FA 05 A6 |  if_e	mov	result1, #0
213e0     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
213e4     00 06 0E F2 | 	cmp	_var04, #0 wz
213e8                 | ' 		return(-1);
213e8     01 FA 65 A6 |  if_e	neg	result1, #1
213ec     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
213f0     00 0A 0E F2 | 	cmp	_var06, #0 wz
213f4                 | ' 		return(1);
213f4     01 FA 05 A6 |  if_e	mov	result1, #1
213f8                 | ' 		return(c1 - c2);
213f8     03 FB 01 56 |  if_ne	mov	result1, _var04
213fc     05 FB 81 51 |  if_ne	sub	result1, _var06
21400                 | _fatfs_cc_strncmp_ret
21400     2D 00 64 FD | 	ret
21404                 | 
21404                 | _fatfs_cc_strchr
21404                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/libc/string/strchr.c"
21404                 | ' 	while ((c = *s++) != (char) charwanted)
21404                 | LR__3380
21404     09 01 02 F6 | 	mov	_var01, arg01
21408     00 03 C2 FA | 	rdbyte	_var02, _var01
2140c     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
21410     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
21414     03 05 0A F2 | 	cmp	_var03, _var04 wz
21418     01 12 06 F1 | 	add	arg01, #1
2141c     14 00 90 AD |  if_e	jmp	#LR__3381
21420     01 05 02 F6 | 	mov	_var03, _var02
21424     07 04 4E F7 | 	zerox	_var03, #7 wz
21428     00 FA 05 A6 |  if_e	mov	result1, #0
2142c     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
21430     D0 FF 9F FD | 	jmp	#LR__3380
21434                 | LR__3381
21434                 | ' 	return((char *)--s);
21434     01 12 86 F1 | 	sub	arg01, #1
21438     09 FB 01 F6 | 	mov	result1, arg01
2143c                 | _fatfs_cc_strchr_ret
2143c     2D 00 64 FD | 	ret
21440                 | 
21440                 | _fatfs_cc_disk_initialize
21440     04 4A 05 F6 | 	mov	COUNT_, #4
21444     A8 00 A0 FD | 	call	#pushregs_
21448     40 F0 07 F1 | 	add	ptra, #64
2144c     04 4E 05 F1 | 	add	fp, #4
21450     A7 12 42 FC | 	wrbyte	arg01, fp
21454     01 00 00 FF 
21458     14 E4 05 F1 | 	add	objptr, ##532
2145c     F2 18 02 FB | 	rdlong	arg04, objptr
21460     2C 4E 05 F1 | 	add	fp, #44
21464     A7 18 62 FC | 	wrlong	arg04, fp
21468     04 E4 85 F1 | 	sub	objptr, #4
2146c     F2 18 02 FB | 	rdlong	arg04, objptr
21470     04 4E 05 F1 | 	add	fp, #4
21474     A7 18 62 FC | 	wrlong	arg04, fp
21478     08 E4 05 F1 | 	add	objptr, #8
2147c     F2 18 02 FB | 	rdlong	arg04, objptr
21480     04 4E 05 F1 | 	add	fp, #4
21484     A7 18 62 FC | 	wrlong	arg04, fp
21488     04 E4 05 F1 | 	add	objptr, #4
2148c     F2 18 02 FB | 	rdlong	arg04, objptr
21490     04 4E 05 F1 | 	add	fp, #4
21494     A7 18 62 FC | 	wrlong	arg04, fp
21498     04 E4 05 F1 | 	add	objptr, #4
2149c     F2 02 48 FC | 	wrbyte	#1, objptr
214a0     01 00 00 FF 
214a4     20 E4 85 F1 | 	sub	objptr, ##544
214a8     38 4E 85 F1 | 	sub	fp, #56
214ac     A7 18 CA FA | 	rdbyte	arg04, fp wz
214b0     04 4E 85 F1 | 	sub	fp, #4
214b4                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
214b4                 | '             return RES_NOTRDY;
214b4     03 FA 05 56 |  if_ne	mov	result1, #3
214b8     D8 05 90 5D |  if_ne	jmp	#LR__3408
214bc     13 00 00 FF 
214c0     10 13 06 F6 | 	mov	arg01, ##10000
214c4     00 9B BF FD | 	call	#__system___waitus
214c8     30 4E 05 F1 | 	add	fp, #48
214cc     A7 12 02 FB | 	rdlong	arg01, fp
214d0     09 01 08 FC | 	wrpin	#0, arg01
214d4     04 4E 05 F1 | 	add	fp, #4
214d8     A7 12 02 FB | 	rdlong	arg01, fp
214dc     09 01 08 FC | 	wrpin	#0, arg01
214e0     04 4E 05 F1 | 	add	fp, #4
214e4     A7 12 02 FB | 	rdlong	arg01, fp
214e8     09 01 08 FC | 	wrpin	#0, arg01
214ec     04 4E 05 F1 | 	add	fp, #4
214f0     A7 12 02 FB | 	rdlong	arg01, fp
214f4     09 00 80 FF 
214f8     09 01 08 FC | 	wrpin	##4608, arg01
214fc     0C 4E 85 F1 | 	sub	fp, #12
21500     A7 12 02 FB | 	rdlong	arg01, fp
21504     59 12 62 FD | 	drvh	arg01
21508     04 4E 05 F1 | 	add	fp, #4
2150c     A7 12 02 FB | 	rdlong	arg01, fp
21510     59 12 62 FD | 	drvh	arg01
21514     04 4E 05 F1 | 	add	fp, #4
21518     A7 12 02 FB | 	rdlong	arg01, fp
2151c     59 12 62 FD | 	drvh	arg01
21520     04 4E 05 F1 | 	add	fp, #4
21524     A7 12 02 FB | 	rdlong	arg01, fp
21528     59 12 62 FD | 	drvh	arg01
2152c     20 4E 85 F1 | 	sub	fp, #32
21530     00 04 80 FF 
21534     A7 20 68 FC | 	wrlong	##524304, fp
21538     04 4E 05 F1 | 	add	fp, #4
2153c     20 03 80 FF 
21540     A7 90 68 FC | 	wrlong	##409672, fp
21544     14 4E 05 F1 | 	add	fp, #20
21548     A7 1E 02 FB | 	rdlong	local01, fp
2154c     18 4E 85 F1 | 	sub	fp, #24
21550     A7 16 02 FB | 	rdlong	arg03, fp
21554     40 1E 62 FD | 	dirl	local01
21558     A0 03 80 FF 
2155c     0F 91 08 FC | 	wrpin	##475208, local01
21560     0F 17 12 FC | 	wxpin	arg03, local01
21564     0F 01 28 FC | 	wypin	#0, local01
21568     41 1E 62 FD | 	dirh	local01
2156c     1C 4E 05 F1 | 	add	fp, #28
21570     A7 20 02 FB | 	rdlong	local02, fp
21574     10 1F 82 F1 | 	sub	local01, local02
21578     07 1E 06 F5 | 	and	local01, #7
2157c     18 1E 66 F0 | 	shl	local01, #24
21580     78 14 06 F6 | 	mov	arg02, #120
21584     0F 15 42 F5 | 	or	arg02, local01
21588     14 4E 85 F1 | 	sub	fp, #20
2158c     A7 14 62 FC | 	wrlong	arg02, fp
21590     14 4E 05 F1 | 	add	fp, #20
21594     A7 12 02 FB | 	rdlong	arg01, fp
21598     10 14 26 F4 | 	bith	arg02, #16
2159c     40 12 62 FD | 	dirl	arg01
215a0     09 15 02 FC | 	wrpin	arg02, arg01
215a4     09 3F 18 FC | 	wxpin	#31, arg01
215a8     FF FF FF FF 
215ac     09 FF 2B FC | 	wypin	##-1, arg01
215b0     41 12 62 FD | 	dirh	arg01
215b4     04 4E 85 F1 | 	sub	fp, #4
215b8     A7 14 02 FB | 	rdlong	arg02, fp
215bc     08 4E 05 F1 | 	add	fp, #8
215c0     A7 22 02 FB | 	rdlong	local03, fp
215c4     11 15 82 F1 | 	sub	arg02, local03
215c8     07 14 06 F5 | 	and	arg02, #7
215cc     18 14 66 F0 | 	shl	arg02, #24
215d0     14 4E 85 F1 | 	sub	fp, #20
215d4     A7 14 62 FC | 	wrlong	arg02, fp
215d8     29 00 00 FF 
215dc     7A 14 46 F5 | 	or	arg02, ##21114
215e0     A7 14 62 FC | 	wrlong	arg02, fp
215e4     14 4E 05 F1 | 	add	fp, #20
215e8     A7 12 02 FB | 	rdlong	arg01, fp
215ec     40 12 62 FD | 	dirl	arg01
215f0     09 15 02 FC | 	wrpin	arg02, arg01
215f4     09 4F 18 FC | 	wxpin	#39, arg01
215f8     09 01 28 FC | 	wypin	#0, arg01
215fc     41 12 62 FD | 	dirh	arg01
21600     28 4E 85 F1 | 	sub	fp, #40
21604     A7 12 02 F6 | 	mov	arg01, fp
21608     14 4E 85 F1 | 	sub	fp, #20
2160c     0A 14 06 F6 | 	mov	arg02, #10
21610     10 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1018
21614     00 12 06 F6 | 	mov	arg01, #0
21618     00 14 06 F6 | 	mov	arg02, #0
2161c     DC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1042
21620     18 80 B0 FD | 	call	#_fatfs_cc_deselect_1028
21624     64 12 06 F6 | 	mov	arg01, #100
21628     9C 99 BF FD | 	call	#__system___waitus
2162c     14 4E 05 F1 | 	add	fp, #20
21630     A7 12 02 F6 | 	mov	arg01, fp
21634     14 4E 85 F1 | 	sub	fp, #20
21638     0A 14 06 F6 | 	mov	arg02, #10
2163c     E4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1018
21640     0C 4E 05 F1 | 	add	fp, #12
21644     A7 00 48 FC | 	wrbyte	#0, fp
21648     0C 4E 85 F1 | 	sub	fp, #12
2164c     00 12 06 F6 | 	mov	arg01, #0
21650     00 14 06 F6 | 	mov	arg02, #0
21654     A4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1042
21658     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
2165c     01 18 0E F2 | 	cmp	arg04, #1 wz
21660     B8 03 90 5D |  if_ne	jmp	#LR__3407
21664     08 12 06 F6 | 	mov	arg01, #8
21668     AA 15 06 F6 | 	mov	arg02, #426
2166c     8C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1042
21670     FD FA E1 F8 | 	getbyte	result1, result1, #0
21674     01 FA 0D F2 | 	cmp	result1, #1 wz
21678     98 01 90 5D |  if_ne	jmp	#LR__3393
2167c     14 4E 05 F1 | 	add	fp, #20
21680     A7 12 02 F6 | 	mov	arg01, fp
21684     14 4E 85 F1 | 	sub	fp, #20
21688     04 14 06 F6 | 	mov	arg02, #4
2168c     94 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1018
21690     16 4E 05 F1 | 	add	fp, #22
21694     A7 24 C2 FA | 	rdbyte	local04, fp
21698     16 4E 85 F1 | 	sub	fp, #22
2169c     01 24 0E F2 | 	cmp	local04, #1 wz
216a0     17 4E 05 A1 |  if_e	add	fp, #23
216a4     A7 22 C2 AA |  if_e	rdbyte	local03, fp
216a8     17 4E 85 A1 |  if_e	sub	fp, #23
216ac     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
216b0     68 03 90 5D |  if_ne	jmp	#LR__3406
216b4                 | ' 				for (tmr = 1000; tmr; tmr--) {
216b4     18 4E 05 F1 | 	add	fp, #24
216b8     01 00 80 FF 
216bc     A7 D0 6B FC | 	wrlong	##1000, fp
216c0     18 4E 85 F1 | 	sub	fp, #24
216c4                 | LR__3390
216c4     18 4E 05 F1 | 	add	fp, #24
216c8     A7 1E 0A FB | 	rdlong	local01, fp wz
216cc     18 4E 85 F1 | 	sub	fp, #24
216d0     3C 00 90 AD |  if_e	jmp	#LR__3391
216d4     A9 12 06 F6 | 	mov	arg01, #169
216d8     1E 14 C6 F9 | 	decod	arg02, #30
216dc     1C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1042
216e0     FD 24 02 F6 | 	mov	local04, result1
216e4     07 24 4E F7 | 	zerox	local04, #7 wz
216e8     24 00 90 AD |  if_e	jmp	#LR__3391
216ec     01 00 00 FF 
216f0     E8 13 06 F6 | 	mov	arg01, ##1000
216f4     D0 98 BF FD | 	call	#__system___waitus
216f8     18 4E 05 F1 | 	add	fp, #24
216fc     A7 24 02 FB | 	rdlong	local04, fp
21700     01 24 86 F1 | 	sub	local04, #1
21704     A7 24 62 FC | 	wrlong	local04, fp
21708     18 4E 85 F1 | 	sub	fp, #24
2170c     B4 FF 9F FD | 	jmp	#LR__3390
21710                 | LR__3391
21710     18 4E 05 F1 | 	add	fp, #24
21714     A7 24 0A FB | 	rdlong	local04, fp wz
21718     18 4E 85 F1 | 	sub	fp, #24
2171c     4C 00 90 AD |  if_e	jmp	#LR__3392
21720     3A 12 06 F6 | 	mov	arg01, #58
21724     00 14 06 F6 | 	mov	arg02, #0
21728     D0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1042
2172c     FD 22 02 F6 | 	mov	local03, result1
21730     07 22 4E F7 | 	zerox	local03, #7 wz
21734     34 00 90 5D |  if_ne	jmp	#LR__3392
21738     14 4E 05 F1 | 	add	fp, #20
2173c     A7 12 02 F6 | 	mov	arg01, fp
21740     14 4E 85 F1 | 	sub	fp, #20
21744     04 14 06 F6 | 	mov	arg02, #4
21748     D8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1018
2174c     14 4E 05 F1 | 	add	fp, #20
21750     A7 1E C2 FA | 	rdbyte	local01, fp
21754     40 1E CE F7 | 	test	local01, #64 wz
21758     0C 24 06 56 |  if_ne	mov	local04, #12
2175c     04 24 06 A6 |  if_e	mov	local04, #4
21760     08 4E 85 F1 | 	sub	fp, #8
21764     A7 24 42 FC | 	wrbyte	local04, fp
21768     0C 4E 85 F1 | 	sub	fp, #12
2176c                 | LR__3392
2176c     14 24 06 FB | 	rdlong	local04, #20
21770     18 4E 05 F1 | 	add	fp, #24
21774     A7 24 62 FC | 	wrlong	local04, fp
21778     0C 4E 05 F1 | 	add	fp, #12
2177c     A7 24 02 FB | 	rdlong	local04, fp
21780     1B 24 26 F4 | 	bith	local04, #27
21784     A7 24 62 FC | 	wrlong	local04, fp
21788     0C 4E 85 F1 | 	sub	fp, #12
2178c     A7 24 02 FB | 	rdlong	local04, fp
21790     18 4E 85 F1 | 	sub	fp, #24
21794     68 78 04 FF 
21798     81 25 16 F2 | 	cmp	local04, ##150000001 wc
2179c     1C 4E 05 C1 |  if_b	add	fp, #28
217a0     00 01 80 CF 
217a4     A7 08 68 CC |  if_b	wrlong	##131076, fp
217a8     1C 4E 85 C1 |  if_b	sub	fp, #28
217ac     6C 02 90 CD |  if_b	jmp	#LR__3406
217b0     18 4E 05 F1 | 	add	fp, #24
217b4     A7 24 02 FB | 	rdlong	local04, fp
217b8     18 4E 85 F1 | 	sub	fp, #24
217bc     E1 F5 05 FF 
217c0     01 24 16 F2 | 	cmp	local04, ##200000001 wc
217c4     1C 4E 05 C1 |  if_b	add	fp, #28
217c8     00 01 80 CF 
217cc     A7 0A 68 CC |  if_b	wrlong	##131077, fp
217d0     1C 4E 85 C1 |  if_b	sub	fp, #28
217d4     44 02 90 CD |  if_b	jmp	#LR__3406
217d8     18 4E 05 F1 | 	add	fp, #24
217dc     A7 24 02 FB | 	rdlong	local04, fp
217e0     18 4E 85 F1 | 	sub	fp, #24
217e4     3B 58 08 FF 
217e8     01 24 16 F2 | 	cmp	local04, ##280000001 wc
217ec     1C 4E 05 C1 |  if_b	add	fp, #28
217f0     00 01 80 CF 
217f4     A7 0C 68 CC |  if_b	wrlong	##131078, fp
217f8     1C 4E 85 C1 |  if_b	sub	fp, #28
217fc     1C 02 90 CD |  if_b	jmp	#LR__3406
21800     1C 4E 05 F1 | 	add	fp, #28
21804     80 01 80 FF 
21808     A7 10 68 FC | 	wrlong	##196616, fp
2180c     1C 4E 85 F1 | 	sub	fp, #28
21810     08 02 90 FD | 	jmp	#LR__3406
21814                 | LR__3393
21814     A9 12 06 F6 | 	mov	arg01, #169
21818     00 14 06 F6 | 	mov	arg02, #0
2181c     DC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1042
21820     FD 24 E2 F8 | 	getbyte	local04, result1, #0
21824     02 24 16 F2 | 	cmp	local04, #2 wc
21828     18 00 90 3D |  if_ae	jmp	#LR__3394
2182c     0C 4E 05 F1 | 	add	fp, #12
21830     A7 04 48 FC | 	wrbyte	#2, fp
21834     04 4E 05 F1 | 	add	fp, #4
21838     A7 52 49 FC | 	wrbyte	#169, fp
2183c     10 4E 85 F1 | 	sub	fp, #16
21840     14 00 90 FD | 	jmp	#LR__3395
21844                 | LR__3394
21844     0C 4E 05 F1 | 	add	fp, #12
21848     A7 02 48 FC | 	wrbyte	#1, fp
2184c     04 4E 05 F1 | 	add	fp, #4
21850     A7 02 48 FC | 	wrbyte	#1, fp
21854     10 4E 85 F1 | 	sub	fp, #16
21858                 | LR__3395
21858                 | ' 				ty =  0x01 ; cmd =  (1) ;
21858                 | ' 			}
21858                 | ' 			for (tmr = 1000; tmr; tmr--) {
21858     18 4E 05 F1 | 	add	fp, #24
2185c     01 00 80 FF 
21860     A7 D0 6B FC | 	wrlong	##1000, fp
21864     18 4E 85 F1 | 	sub	fp, #24
21868                 | LR__3396
21868     18 4E 05 F1 | 	add	fp, #24
2186c     A7 22 0A FB | 	rdlong	local03, fp wz
21870     18 4E 85 F1 | 	sub	fp, #24
21874     44 00 90 AD |  if_e	jmp	#LR__3397
21878     10 4E 05 F1 | 	add	fp, #16
2187c     A7 12 C2 FA | 	rdbyte	arg01, fp
21880     10 4E 85 F1 | 	sub	fp, #16
21884     00 14 06 F6 | 	mov	arg02, #0
21888     70 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1042
2188c     FD 24 02 F6 | 	mov	local04, result1
21890     07 24 4E F7 | 	zerox	local04, #7 wz
21894     24 00 90 AD |  if_e	jmp	#LR__3397
21898     01 00 00 FF 
2189c     E8 13 06 F6 | 	mov	arg01, ##1000
218a0     24 97 BF FD | 	call	#__system___waitus
218a4     18 4E 05 F1 | 	add	fp, #24
218a8     A7 24 02 FB | 	rdlong	local04, fp
218ac     01 24 86 F1 | 	sub	local04, #1
218b0     A7 24 62 FC | 	wrlong	local04, fp
218b4     18 4E 85 F1 | 	sub	fp, #24
218b8     AC FF 9F FD | 	jmp	#LR__3396
218bc                 | LR__3397
218bc     18 4E 05 F1 | 	add	fp, #24
218c0     A7 24 0A FB | 	rdlong	local04, fp wz
218c4     18 4E 85 F1 | 	sub	fp, #24
218c8     14 00 90 AD |  if_e	jmp	#LR__3398
218cc     10 12 06 F6 | 	mov	arg01, #16
218d0     09 14 C6 F9 | 	decod	arg02, #9
218d4     24 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1042
218d8     07 FA 4D F7 | 	zerox	result1, #7 wz
218dc     0C 00 90 AD |  if_e	jmp	#LR__3399
218e0                 | LR__3398
218e0     0C 4E 05 F1 | 	add	fp, #12
218e4     A7 00 48 FC | 	wrbyte	#0, fp
218e8     0C 4E 85 F1 | 	sub	fp, #12
218ec                 | LR__3399
218ec     14 24 06 FB | 	rdlong	local04, #20
218f0     18 4E 05 F1 | 	add	fp, #24
218f4     A7 24 62 FC | 	wrlong	local04, fp
218f8     18 4E 85 F1 | 	sub	fp, #24
218fc     F0 FA 02 FF 
21900     01 25 16 F2 | 	cmp	local04, ##100000001 wc
21904     18 00 90 3D |  if_ae	jmp	#LR__3400
21908     24 4E 05 F1 | 	add	fp, #36
2190c     A7 24 02 FB | 	rdlong	local04, fp
21910     1B 24 26 F4 | 	bith	local04, #27
21914     A7 24 62 FC | 	wrlong	local04, fp
21918     24 4E 85 F1 | 	sub	fp, #36
2191c     2C 00 90 FD | 	jmp	#LR__3401
21920                 | LR__3400
21920     18 4E 05 F1 | 	add	fp, #24
21924     A7 24 02 FB | 	rdlong	local04, fp
21928     18 4E 85 F1 | 	sub	fp, #24
2192c     E1 F5 05 FF 
21930     01 24 16 F2 | 	cmp	local04, ##200000001 wc
21934     24 4E 05 C1 |  if_b	add	fp, #36
21938     A7 24 02 CB |  if_b	rdlong	local04, fp
2193c     80 00 04 CF 
21940     00 24 46 C5 |  if_b	or	local04, ##134283264
21944     A7 24 62 CC |  if_b	wrlong	local04, fp
21948     24 4E 85 C1 |  if_b	sub	fp, #36
2194c                 | LR__3401
2194c     18 4E 05 F1 | 	add	fp, #24
21950     A7 24 02 FB | 	rdlong	local04, fp
21954     18 4E 85 F1 | 	sub	fp, #24
21958     F0 FA 02 FF 
2195c     01 25 16 F2 | 	cmp	local04, ##100000001 wc
21960     1C 4E 05 C1 |  if_b	add	fp, #28
21964     00 01 80 CF 
21968     A7 08 68 CC |  if_b	wrlong	##131076, fp
2196c     1C 4E 85 C1 |  if_b	sub	fp, #28
21970     A8 00 90 CD |  if_b	jmp	#LR__3405
21974     18 4E 05 F1 | 	add	fp, #24
21978     A7 24 02 FB | 	rdlong	local04, fp
2197c     18 4E 85 F1 | 	sub	fp, #24
21980     68 78 04 FF 
21984     81 25 16 F2 | 	cmp	local04, ##150000001 wc
21988     1C 4E 05 C1 |  if_b	add	fp, #28
2198c     80 01 80 CF 
21990     A7 0C 68 CC |  if_b	wrlong	##196614, fp
21994     1C 4E 85 C1 |  if_b	sub	fp, #28
21998     80 00 90 CD |  if_b	jmp	#LR__3404
2199c     18 4E 05 F1 | 	add	fp, #24
219a0     A7 24 02 FB | 	rdlong	local04, fp
219a4     18 4E 85 F1 | 	sub	fp, #24
219a8     E1 F5 05 FF 
219ac     01 24 16 F2 | 	cmp	local04, ##200000001 wc
219b0     1C 4E 05 C1 |  if_b	add	fp, #28
219b4     00 02 80 CF 
219b8     A7 10 68 CC |  if_b	wrlong	##262152, fp
219bc     1C 4E 85 C1 |  if_b	sub	fp, #28
219c0     58 00 90 CD |  if_b	jmp	#LR__3403
219c4     18 4E 05 F1 | 	add	fp, #24
219c8     A7 24 02 FB | 	rdlong	local04, fp
219cc     18 4E 85 F1 | 	sub	fp, #24
219d0     59 73 07 FF 
219d4     81 24 16 F2 | 	cmp	local04, ##250000001 wc
219d8     1C 4E 05 C1 |  if_b	add	fp, #28
219dc     80 02 80 CF 
219e0     A7 14 68 CC |  if_b	wrlong	##327690, fp
219e4     1C 4E 85 C1 |  if_b	sub	fp, #28
219e8     30 00 90 CD |  if_b	jmp	#LR__3402
219ec     18 4E 05 F1 | 	add	fp, #24
219f0     A7 24 02 FB | 	rdlong	local04, fp
219f4     18 4E 85 F1 | 	sub	fp, #24
219f8     D1 F0 08 FF 
219fc     01 25 16 F2 | 	cmp	local04, ##300000001 wc
21a00     1C 4E 05 C1 |  if_b	add	fp, #28
21a04     00 03 80 CF 
21a08     A7 18 68 CC |  if_b	wrlong	##393228, fp
21a0c     1C 4E 85 F3 | 	sumc	fp, #28
21a10     80 03 80 3F 
21a14     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
21a18     1C 4E 85 31 |  if_ae	sub	fp, #28
21a1c                 | LR__3402
21a1c                 | LR__3403
21a1c                 | LR__3404
21a1c                 | LR__3405
21a1c                 | LR__3406
21a1c                 | LR__3407
21a1c     0C 4E 05 F1 | 	add	fp, #12
21a20     A7 24 C2 FA | 	rdbyte	local04, fp
21a24     01 00 00 FF 
21a28     21 E4 05 F1 | 	add	objptr, ##545
21a2c     F2 24 42 FC | 	wrbyte	local04, objptr
21a30     A7 1E CA FA | 	rdbyte	local01, fp wz
21a34     00 24 06 56 |  if_ne	mov	local04, #0
21a38     01 24 06 A6 |  if_e	mov	local04, #1
21a3c     20 4E 05 F1 | 	add	fp, #32
21a40     A7 24 42 FC | 	wrbyte	local04, fp
21a44     A7 24 C2 FA | 	rdbyte	local04, fp
21a48     2C 4E 85 F1 | 	sub	fp, #44
21a4c     01 E4 85 F1 | 	sub	objptr, #1
21a50     F2 24 42 FC | 	wrbyte	local04, objptr
21a54     01 00 00 FF 
21a58     20 E4 85 F1 | 	sub	objptr, ##544
21a5c     DC 7B B0 FD | 	call	#_fatfs_cc_deselect_1028
21a60     34 4E 05 F1 | 	add	fp, #52
21a64     A7 12 02 FB | 	rdlong	arg01, fp
21a68     18 4E 85 F1 | 	sub	fp, #24
21a6c     A7 14 02 FB | 	rdlong	arg02, fp
21a70     09 15 12 FC | 	wxpin	arg02, arg01
21a74     1C 4E 05 F1 | 	add	fp, #28
21a78     A7 12 02 FB | 	rdlong	arg01, fp
21a7c     14 4E 85 F1 | 	sub	fp, #20
21a80     A7 14 02 FB | 	rdlong	arg02, fp
21a84     09 15 02 FC | 	wrpin	arg02, arg01
21a88                 | ' 
21a88                 | ' 		}
21a88                 | ' 	}
21a88                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
21a88                 | ' 	CardType = ty;
21a88                 | ' 	s = ty ? 0 :  0x01 ;
21a88                 | ' 	Stat = s;
21a88                 | ' 
21a88                 | ' 	deselect();
21a88                 | ' 
21a88                 | ' 
21a88                 | ' 	_wxpin( PIN_CLK, ck_div );
21a88                 | ' 	_wrpin( PIN_DI, spm_tx );
21a88                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
21a88                 | ' 	return s;
21a88     08 4E 05 F1 | 	add	fp, #8
21a8c     A7 FA C1 FA | 	rdbyte	result1, fp
21a90     2C 4E 85 F1 | 	sub	fp, #44
21a94                 | LR__3408
21a94     A7 F0 03 F6 | 	mov	ptra, fp
21a98     B2 00 A0 FD | 	call	#popregs_
21a9c                 | _fatfs_cc_disk_initialize_ret
21a9c     2D 00 64 FD | 	ret
21aa0                 | 
21aa0                 | _fatfs_cc_disk_read
21aa0     05 4A 05 F6 | 	mov	COUNT_, #5
21aa4     A8 00 A0 FD | 	call	#pushregs_
21aa8     0A 1F 02 F6 | 	mov	local01, arg02
21aac     0B 21 02 F6 | 	mov	local02, arg03
21ab0     0C 23 02 F6 | 	mov	local03, arg04
21ab4     00 12 0E F2 | 	cmp	arg01, #0 wz
21ab8     01 FA 05 56 |  if_ne	mov	result1, #1
21abc                 | ' 
21abc                 | ' 	return Stat;
21abc     01 00 00 AF 
21ac0     20 E4 05 A1 |  if_e	add	objptr, ##544
21ac4     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
21ac8     01 00 00 AF 
21acc     20 E4 85 A1 |  if_e	sub	objptr, ##544
21ad0     FD FA E1 F8 | 	getbyte	result1, result1, #0
21ad4     01 FA CD F7 | 	test	result1, #1 wz
21ad8     03 FA 05 56 |  if_ne	mov	result1, #3
21adc     84 00 90 5D |  if_ne	jmp	#LR__3412
21ae0     01 00 00 FF 
21ae4     21 E4 05 F1 | 	add	objptr, ##545
21ae8     F2 24 C2 FA | 	rdbyte	local04, objptr
21aec     01 00 00 FF 
21af0     21 E4 85 F1 | 	sub	objptr, ##545
21af4     08 24 CE F7 | 	test	local04, #8 wz
21af8     09 20 66 A0 |  if_e	shl	local02, #9
21afc     02 22 16 F2 | 	cmp	local03, #2 wc
21b00     12 24 06 36 |  if_ae	mov	local04, #18
21b04     11 24 06 C6 |  if_b	mov	local04, #17
21b08     10 15 02 F6 | 	mov	arg02, local02
21b0c     12 13 02 F6 | 	mov	arg01, local04
21b10     E8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1042
21b14     FD 26 02 F6 | 	mov	local05, result1
21b18     07 26 4E F7 | 	zerox	local05, #7 wz
21b1c     30 00 90 5D |  if_ne	jmp	#LR__3411
21b20                 | ' 		do {
21b20                 | LR__3410
21b20     0F 13 02 F6 | 	mov	arg01, local01
21b24     09 14 C6 F9 | 	decod	arg02, #9
21b28     24 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1036
21b2c     00 FA 0D F2 | 	cmp	result1, #0 wz
21b30     01 00 00 5F 
21b34     00 1E 06 51 |  if_ne	add	local01, ##512
21b38     F9 23 6E 5B |  if_ne	djnz	local03, #LR__3410
21b3c     12 25 E2 F8 | 	getbyte	local04, local04, #0
21b40     12 24 0E F2 | 	cmp	local04, #18 wz
21b44     0C 12 06 A6 |  if_e	mov	arg01, #12
21b48     00 14 06 A6 |  if_e	mov	arg02, #0
21b4c     AC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1042
21b50                 | LR__3411
21b50     E8 7A B0 FD | 	call	#_fatfs_cc_deselect_1028
21b54                 | ' 	}
21b54                 | ' 	deselect();
21b54                 | ' 
21b54                 | ' 	return count ? RES_ERROR : RES_OK;
21b54     00 22 0E F2 | 	cmp	local03, #0 wz
21b58     01 26 06 56 |  if_ne	mov	local05, #1
21b5c     00 26 06 A6 |  if_e	mov	local05, #0
21b60     13 FB 01 F6 | 	mov	result1, local05
21b64                 | LR__3412
21b64     A7 F0 03 F6 | 	mov	ptra, fp
21b68     B2 00 A0 FD | 	call	#popregs_
21b6c                 | _fatfs_cc_disk_read_ret
21b6c     2D 00 64 FD | 	ret
21b70                 | 
21b70                 | _fatfs_cc_disk_write
21b70     04 4A 05 F6 | 	mov	COUNT_, #4
21b74     A8 00 A0 FD | 	call	#pushregs_
21b78     0A 1F 02 F6 | 	mov	local01, arg02
21b7c     0C 21 02 F6 | 	mov	local02, arg04
21b80     0B 23 02 F6 | 	mov	local03, arg03
21b84     00 12 0E F2 | 	cmp	arg01, #0 wz
21b88     01 FA 05 56 |  if_ne	mov	result1, #1
21b8c                 | ' 
21b8c                 | ' 	return Stat;
21b8c     01 00 00 AF 
21b90     20 E4 05 A1 |  if_e	add	objptr, ##544
21b94     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
21b98     01 00 00 AF 
21b9c     20 E4 85 A1 |  if_e	sub	objptr, ##544
21ba0     FD FA E1 F8 | 	getbyte	result1, result1, #0
21ba4     01 FA CD F7 | 	test	result1, #1 wz
21ba8     03 FA 05 56 |  if_ne	mov	result1, #3
21bac     D4 00 90 5D |  if_ne	jmp	#LR__3424
21bb0     01 00 00 FF 
21bb4     21 E4 05 F1 | 	add	objptr, ##545
21bb8     F2 16 C2 FA | 	rdbyte	arg03, objptr
21bbc     01 00 00 FF 
21bc0     21 E4 85 F1 | 	sub	objptr, ##545
21bc4     08 16 CE F7 | 	test	arg03, #8 wz
21bc8     09 22 66 A0 |  if_e	shl	local03, #9
21bcc     01 20 0E F2 | 	cmp	local02, #1 wz
21bd0     30 00 90 5D |  if_ne	jmp	#LR__3420
21bd4     18 12 06 F6 | 	mov	arg01, #24
21bd8     11 15 02 F6 | 	mov	arg02, local03
21bdc     1C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1042
21be0     FD 24 02 F6 | 	mov	local04, result1
21be4     07 24 4E F7 | 	zerox	local04, #7 wz
21be8     84 00 90 5D |  if_ne	jmp	#LR__3423
21bec     0F 13 02 F6 | 	mov	arg01, local01
21bf0     FE 14 06 F6 | 	mov	arg02, #254
21bf4     38 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1038
21bf8     00 FA 0D F2 | 	cmp	result1, #0 wz
21bfc     00 20 06 56 |  if_ne	mov	local02, #0
21c00     6C 00 90 FD | 	jmp	#LR__3423
21c04                 | LR__3420
21c04     01 00 00 FF 
21c08     21 E4 05 F1 | 	add	objptr, ##545
21c0c     F2 24 C2 FA | 	rdbyte	local04, objptr
21c10     01 00 00 FF 
21c14     21 E4 85 F1 | 	sub	objptr, ##545
21c18     06 24 CE F7 | 	test	local04, #6 wz
21c1c     97 12 06 56 |  if_ne	mov	arg01, #151
21c20     10 15 02 56 |  if_ne	mov	arg02, local02
21c24     D4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1042
21c28     11 15 02 F6 | 	mov	arg02, local03
21c2c     19 12 06 F6 | 	mov	arg01, #25
21c30     C8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1042
21c34     FD 24 02 F6 | 	mov	local04, result1
21c38     07 24 4E F7 | 	zerox	local04, #7 wz
21c3c     30 00 90 5D |  if_ne	jmp	#LR__3422
21c40                 | ' 			do {
21c40                 | LR__3421
21c40     0F 13 02 F6 | 	mov	arg01, local01
21c44     FC 14 06 F6 | 	mov	arg02, #252
21c48     E4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1038
21c4c     00 FA 0D F2 | 	cmp	result1, #0 wz
21c50     01 00 00 5F 
21c54     00 1E 06 51 |  if_ne	add	local01, ##512
21c58     F9 21 6E 5B |  if_ne	djnz	local02, #LR__3421
21c5c     00 12 06 F6 | 	mov	arg01, #0
21c60     FD 14 06 F6 | 	mov	arg02, #253
21c64     C8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1038
21c68     00 FA 0D F2 | 	cmp	result1, #0 wz
21c6c     01 20 06 A6 |  if_e	mov	local02, #1
21c70                 | LR__3422
21c70                 | LR__3423
21c70     C8 79 B0 FD | 	call	#_fatfs_cc_deselect_1028
21c74                 | ' 				count = 1;
21c74                 | ' 		}
21c74                 | ' 	}
21c74                 | ' 	deselect();
21c74                 | ' 
21c74                 | ' 	return count ? RES_ERROR : RES_OK;
21c74     00 20 0E F2 | 	cmp	local02, #0 wz
21c78     01 24 06 56 |  if_ne	mov	local04, #1
21c7c     00 24 06 A6 |  if_e	mov	local04, #0
21c80     12 FB 01 F6 | 	mov	result1, local04
21c84                 | LR__3424
21c84     A7 F0 03 F6 | 	mov	ptra, fp
21c88     B2 00 A0 FD | 	call	#popregs_
21c8c                 | _fatfs_cc_disk_write_ret
21c8c     2D 00 64 FD | 	ret
21c90                 | 
21c90                 | _fatfs_cc_disk_ioctl
21c90     01 4A 05 F6 | 	mov	COUNT_, #1
21c94     A8 00 A0 FD | 	call	#pushregs_
21c98     30 F0 07 F1 | 	add	ptra, #48
21c9c     04 4E 05 F1 | 	add	fp, #4
21ca0     A7 12 42 FC | 	wrbyte	arg01, fp
21ca4     04 4E 05 F1 | 	add	fp, #4
21ca8     A7 14 42 FC | 	wrbyte	arg02, fp
21cac     04 4E 05 F1 | 	add	fp, #4
21cb0     A7 16 62 FC | 	wrlong	arg03, fp
21cb4     08 4E 85 F1 | 	sub	fp, #8
21cb8     A7 12 CA FA | 	rdbyte	arg01, fp wz
21cbc     04 4E 85 F1 | 	sub	fp, #4
21cc0     01 FA 05 56 |  if_ne	mov	result1, #1
21cc4                 | ' 
21cc4                 | ' 	return Stat;
21cc4     01 00 00 AF 
21cc8     20 E4 05 A1 |  if_e	add	objptr, ##544
21ccc     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
21cd0     01 00 00 AF 
21cd4     20 E4 85 A1 |  if_e	sub	objptr, ##544
21cd8     FD FA E1 F8 | 	getbyte	result1, result1, #0
21cdc     01 FA CD F7 | 	test	result1, #1 wz
21ce0     03 FA 05 56 |  if_ne	mov	result1, #3
21ce4     E4 01 90 5D |  if_ne	jmp	#LR__3438
21ce8     10 4E 05 F1 | 	add	fp, #16
21cec     A7 02 68 FC | 	wrlong	#1, fp
21cf0                 | ' 
21cf0                 | ' 	res = RES_ERROR;
21cf0                 | ' 	switch (ctrl) {
21cf0     08 4E 85 F1 | 	sub	fp, #8
21cf4     A7 1E C2 FA | 	rdbyte	local01, fp
21cf8     08 4E 85 F1 | 	sub	fp, #8
21cfc     04 1E 26 F3 | 	fle	local01, #4
21d00     30 1E 62 FD | 	jmprel	local01
21d04                 | LR__3430
21d04     10 00 90 FD | 	jmp	#LR__3431
21d08     24 00 90 FD | 	jmp	#LR__3432
21d0c     A0 01 90 FD | 	jmp	#LR__3436
21d10     80 01 90 FD | 	jmp	#LR__3435
21d14     98 01 90 FD | 	jmp	#LR__3436
21d18                 | LR__3431
21d18     A4 79 B0 FD | 	call	#_fatfs_cc_select_1032
21d1c     00 FA 0D F2 | 	cmp	result1, #0 wz
21d20     10 4E 05 51 |  if_ne	add	fp, #16
21d24     A7 00 68 5C |  if_ne	wrlong	#0, fp
21d28     10 4E 85 51 |  if_ne	sub	fp, #16
21d2c                 | ' 			break;
21d2c     8C 01 90 FD | 	jmp	#LR__3437
21d30                 | LR__3432
21d30     09 12 06 F6 | 	mov	arg01, #9
21d34     00 14 06 F6 | 	mov	arg02, #0
21d38     C0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1042
21d3c     FD 1E 02 F6 | 	mov	local01, result1
21d40     07 1E 4E F7 | 	zerox	local01, #7 wz
21d44     74 01 90 5D |  if_ne	jmp	#LR__3437
21d48     18 4E 05 F1 | 	add	fp, #24
21d4c     A7 12 02 F6 | 	mov	arg01, fp
21d50     18 4E 85 F1 | 	sub	fp, #24
21d54     10 14 06 F6 | 	mov	arg02, #16
21d58     F4 79 B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1036
21d5c     00 FA 0D F2 | 	cmp	result1, #0 wz
21d60     58 01 90 AD |  if_e	jmp	#LR__3437
21d64     18 4E 05 F1 | 	add	fp, #24
21d68     A7 1E C2 FA | 	rdbyte	local01, fp
21d6c     18 4E 85 F1 | 	sub	fp, #24
21d70     06 1E 46 F0 | 	shr	local01, #6
21d74     01 1E 0E F2 | 	cmp	local01, #1 wz
21d78     5C 00 90 5D |  if_ne	jmp	#LR__3433
21d7c     21 4E 05 F1 | 	add	fp, #33
21d80     A7 1E C2 FA | 	rdbyte	local01, fp
21d84     01 4E 85 F1 | 	sub	fp, #1
21d88     A7 FA C1 FA | 	rdbyte	result1, fp
21d8c     FD FA 31 F9 | 	getword	result1, result1, #0
21d90     08 FA 65 F0 | 	shl	result1, #8
21d94     FD 1E 02 F1 | 	add	local01, result1
21d98     01 4E 85 F1 | 	sub	fp, #1
21d9c     A7 FA C1 FA | 	rdbyte	result1, fp
21da0     3F FA 05 F5 | 	and	result1, #63
21da4     10 FA 65 F0 | 	shl	result1, #16
21da8     FD 1E 02 F1 | 	add	local01, result1
21dac     01 1E 06 F1 | 	add	local01, #1
21db0     09 4E 05 F1 | 	add	fp, #9
21db4     A7 1E 62 FC | 	wrlong	local01, fp
21db8     1C 4E 85 F1 | 	sub	fp, #28
21dbc     A7 1E 02 FB | 	rdlong	local01, fp
21dc0     1C 4E 05 F1 | 	add	fp, #28
21dc4     A7 FA 01 FB | 	rdlong	result1, fp
21dc8     28 4E 85 F1 | 	sub	fp, #40
21dcc     0A FA 65 F0 | 	shl	result1, #10
21dd0     0F FB 61 FC | 	wrlong	result1, local01
21dd4     AC 00 90 FD | 	jmp	#LR__3434
21dd8                 | LR__3433
21dd8     1D 4E 05 F1 | 	add	fp, #29
21ddc     A7 1E C2 FA | 	rdbyte	local01, fp
21de0     0F 1F 42 F8 | 	getnib	local01, local01, #0
21de4     05 4E 05 F1 | 	add	fp, #5
21de8     A7 FA C1 FA | 	rdbyte	result1, fp
21dec     80 FA 05 F5 | 	and	result1, #128
21df0     07 FA C5 F0 | 	sar	result1, #7
21df4     FD 1E 02 F1 | 	add	local01, result1
21df8     01 4E 85 F1 | 	sub	fp, #1
21dfc     A7 FA C1 FA | 	rdbyte	result1, fp
21e00     03 FA 05 F5 | 	and	result1, #3
21e04     01 FA 65 F0 | 	shl	result1, #1
21e08     FD 1E 02 F1 | 	add	local01, result1
21e0c     02 1E 06 F1 | 	add	local01, #2
21e10     0D 4E 85 F1 | 	sub	fp, #13
21e14     A7 1E 42 FC | 	wrbyte	local01, fp
21e18     0C 4E 05 F1 | 	add	fp, #12
21e1c     A7 1E C2 FA | 	rdbyte	local01, fp
21e20     06 1E 46 F0 | 	shr	local01, #6
21e24     01 4E 85 F1 | 	sub	fp, #1
21e28     A7 FA C1 FA | 	rdbyte	result1, fp
21e2c     FD FA 31 F9 | 	getword	result1, result1, #0
21e30     02 FA 65 F0 | 	shl	result1, #2
21e34     FD 1E 02 F1 | 	add	local01, result1
21e38     01 4E 85 F1 | 	sub	fp, #1
21e3c     A7 FA C1 FA | 	rdbyte	result1, fp
21e40     03 FA 05 F5 | 	and	result1, #3
21e44     FD FA 31 F9 | 	getword	result1, result1, #0
21e48     0A FA 65 F0 | 	shl	result1, #10
21e4c     FD 1E 02 F1 | 	add	local01, result1
21e50     01 1E 06 F1 | 	add	local01, #1
21e54     0A 4E 05 F1 | 	add	fp, #10
21e58     A7 1E 62 FC | 	wrlong	local01, fp
21e5c     1C 4E 85 F1 | 	sub	fp, #28
21e60     A7 1E 02 FB | 	rdlong	local01, fp
21e64     1C 4E 05 F1 | 	add	fp, #28
21e68     A7 FA 01 FB | 	rdlong	result1, fp
21e6c     14 4E 85 F1 | 	sub	fp, #20
21e70     A7 16 C2 FA | 	rdbyte	arg03, fp
21e74     14 4E 85 F1 | 	sub	fp, #20
21e78     09 16 86 F1 | 	sub	arg03, #9
21e7c     0B FB 61 F0 | 	shl	result1, arg03
21e80     0F FB 61 FC | 	wrlong	result1, local01
21e84                 | LR__3434
21e84     10 4E 05 F1 | 	add	fp, #16
21e88     A7 00 68 FC | 	wrlong	#0, fp
21e8c     10 4E 85 F1 | 	sub	fp, #16
21e90                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
21e90                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
21e90                 | ' 					*(LBA_t*)buff = cs << (n - 9);
21e90                 | ' 				}
21e90                 | ' 				res = RES_OK;
21e90                 | ' 			}
21e90                 | ' 			break;
21e90     28 00 90 FD | 	jmp	#LR__3437
21e94                 | LR__3435
21e94     0C 4E 05 F1 | 	add	fp, #12
21e98     A7 1E 02 FB | 	rdlong	local01, fp
21e9c     0F 01 69 FC | 	wrlong	#128, local01
21ea0     04 4E 05 F1 | 	add	fp, #4
21ea4     A7 00 68 FC | 	wrlong	#0, fp
21ea8     10 4E 85 F1 | 	sub	fp, #16
21eac                 | ' 			*(DWORD*)buff = 128;
21eac                 | ' 			res = RES_OK;
21eac                 | ' 			break;
21eac     0C 00 90 FD | 	jmp	#LR__3437
21eb0                 | LR__3436
21eb0     10 4E 05 F1 | 	add	fp, #16
21eb4     A7 08 68 FC | 	wrlong	#4, fp
21eb8     10 4E 85 F1 | 	sub	fp, #16
21ebc                 | LR__3437
21ebc     7C 77 B0 FD | 	call	#_fatfs_cc_deselect_1028
21ec0                 | ' 			res = RES_PARERR;
21ec0                 | ' 	}
21ec0                 | ' 
21ec0                 | ' 	deselect();
21ec0                 | ' 
21ec0                 | ' 	return res;
21ec0     10 4E 05 F1 | 	add	fp, #16
21ec4     A7 FA 01 FB | 	rdlong	result1, fp
21ec8     10 4E 85 F1 | 	sub	fp, #16
21ecc                 | LR__3438
21ecc     A7 F0 03 F6 | 	mov	ptra, fp
21ed0     B2 00 A0 FD | 	call	#popregs_
21ed4                 | _fatfs_cc_disk_ioctl_ret
21ed4     2D 00 64 FD | 	ret
21ed8                 | 
21ed8                 | _fatfs_cc_disk_setpins
21ed8     00 12 0E F2 | 	cmp	arg01, #0 wz
21edc     01 FA 65 56 |  if_ne	neg	result1, #1
21ee0     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
21ee4     01 00 00 FF 
21ee8     10 E4 05 F1 | 	add	objptr, ##528
21eec     F2 14 62 FC | 	wrlong	arg02, objptr
21ef0     04 E4 05 F1 | 	add	objptr, #4
21ef4     F2 16 62 FC | 	wrlong	arg03, objptr
21ef8     04 E4 05 F1 | 	add	objptr, #4
21efc     F2 18 62 FC | 	wrlong	arg04, objptr
21f00     04 E4 05 F1 | 	add	objptr, #4
21f04     F2 1A 62 FC | 	wrlong	arg05, objptr
21f08     01 00 00 FF 
21f0c     1C E4 85 F1 | 	sub	objptr, ##540
21f10     00 FA 05 F6 | 	mov	result1, #0
21f14                 | _fatfs_cc_disk_setpins_ret
21f14     2D 00 64 FD | 	ret
21f18                 | 
21f18                 | _fatfs_cc_tchar2uni
21f18     09 01 02 FB | 	rdlong	_var01, arg01
21f1c     00 03 02 F6 | 	mov	_var02, _var01
21f20     01 00 06 F1 | 	add	_var01, #1
21f24     00 05 02 F6 | 	mov	_var03, _var01
21f28     01 07 C2 FA | 	rdbyte	_var04, _var02
21f2c     80 06 CE F7 | 	test	_var04, #128 wz
21f30     E8 00 90 AD |  if_e	jmp	#LR__3447
21f34     03 09 02 F6 | 	mov	_var05, _var04
21f38     E0 08 06 F5 | 	and	_var05, #224
21f3c     C0 08 0E F2 | 	cmp	_var05, #192 wz
21f40     1F 06 06 A5 |  if_e	and	_var04, #31
21f44     01 0A 06 A6 |  if_e	mov	_var06, #1
21f48     34 00 90 AD |  if_e	jmp	#LR__3441
21f4c     03 09 02 F6 | 	mov	_var05, _var04
21f50     F0 08 06 F5 | 	and	_var05, #240
21f54     E0 08 0E F2 | 	cmp	_var05, #224 wz
21f58     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
21f5c     02 0A 06 A6 |  if_e	mov	_var06, #2
21f60     1C 00 90 AD |  if_e	jmp	#LR__3440
21f64     03 09 02 F6 | 	mov	_var05, _var04
21f68     F8 08 06 F5 | 	and	_var05, #248
21f6c     F0 08 0E F2 | 	cmp	_var05, #240 wz
21f70     07 06 06 A5 |  if_e	and	_var04, #7
21f74     03 0A 06 A6 |  if_e	mov	_var06, #3
21f78                 | ' 			return 0xFFFFFFFF;
21f78     01 FA 65 56 |  if_ne	neg	result1, #1
21f7c     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
21f80                 | LR__3440
21f80                 | LR__3441
21f80                 | ' 		}
21f80                 | ' 		do {
21f80                 | LR__3442
21f80     02 0D C2 FA | 	rdbyte	_var07, _var03
21f84     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
21f88     C0 08 06 F5 | 	and	_var05, #192
21f8c     80 08 0E F2 | 	cmp	_var05, #128 wz
21f90     01 04 06 F1 | 	add	_var03, #1
21f94     01 FA 65 56 |  if_ne	neg	result1, #1
21f98     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
21f9c     06 06 66 F0 | 	shl	_var04, #6
21fa0     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
21fa4     3F 02 06 F5 | 	and	_var02, #63
21fa8     01 07 42 F5 | 	or	_var04, _var02
21fac     F4 0B 6E FB | 	djnz	_var06, #LR__3442
21fb0     80 06 16 F2 | 	cmp	_var04, #128 wc
21fb4     24 00 90 CD |  if_b	jmp	#LR__3444
21fb8     6C 00 00 FF 
21fbc     00 06 16 F2 | 	cmp	_var04, ##55296 wc
21fc0     0C 00 90 CD |  if_b	jmp	#LR__3443
21fc4     70 00 00 FF 
21fc8     00 06 16 F2 | 	cmp	_var04, ##57344 wc
21fcc     0C 00 90 CD |  if_b	jmp	#LR__3444
21fd0                 | LR__3443
21fd0     80 08 00 FF 
21fd4     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
21fd8     08 00 90 CD |  if_b	jmp	#LR__3445
21fdc                 | LR__3444
21fdc     01 FA 65 F6 | 	neg	result1, #1
21fe0     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
21fe4                 | LR__3445
21fe4     80 00 00 FF 
21fe8     00 06 16 F2 | 	cmp	_var04, ##65536 wc
21fec     2C 00 90 CD |  if_b	jmp	#LR__3446
21ff0     03 03 02 F6 | 	mov	_var02, _var04
21ff4     80 00 00 FF 
21ff8     00 02 86 F1 | 	sub	_var02, ##65536
21ffc     06 02 66 F0 | 	shl	_var02, #6
22000     80 FF 01 FF 
22004     00 02 06 F5 | 	and	_var02, ##67043328
22008     6E 00 6C FF 
2200c     00 08 06 F6 | 	mov	_var05, ##-671032320
22010     01 09 42 F5 | 	or	_var05, _var02
22014     09 06 46 F7 | 	zerox	_var04, #9
22018     04 07 42 F5 | 	or	_var04, _var05
2201c                 | LR__3446
2201c                 | LR__3447
2201c     09 05 62 FC | 	wrlong	_var03, arg01
22020                 | ' 	}
22020                 | ' #line 811 "ff.c"
22020                 | ' 	*str = p;
22020                 | ' 	return uc;
22020     03 FB 01 F6 | 	mov	result1, _var04
22024                 | _fatfs_cc_tchar2uni_ret
22024     2D 00 64 FD | 	ret
22028                 | 
22028                 | _fatfs_cc_put_utf
22028     80 12 16 F2 | 	cmp	arg01, #128 wc
2202c     18 00 90 3D |  if_ae	jmp	#LR__3450
22030     01 16 16 F2 | 	cmp	arg03, #1 wc
22034     00 FA 05 C6 |  if_b	mov	result1, #0
22038     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2203c     0A 13 42 FC | 	wrbyte	arg01, arg02
22040                 | ' 		*buf = (TCHAR)chr;
22040                 | ' 		return 1;
22040     01 FA 05 F6 | 	mov	result1, #1
22044     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
22048                 | LR__3450
22048     04 00 00 FF 
2204c     00 12 16 F2 | 	cmp	arg01, ##2048 wc
22050     40 00 90 3D |  if_ae	jmp	#LR__3451
22054     02 16 16 F2 | 	cmp	arg03, #2 wc
22058     00 FA 05 C6 |  if_b	mov	result1, #0
2205c     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
22060     09 FB 01 F6 | 	mov	result1, arg01
22064     06 FA 45 F0 | 	shr	result1, #6
22068     1F FA 05 F5 | 	and	result1, #31
2206c     C0 16 06 F6 | 	mov	arg03, #192
22070     FD 16 42 F5 | 	or	arg03, result1
22074     0A 17 42 FC | 	wrbyte	arg03, arg02
22078     01 14 06 F1 | 	add	arg02, #1
2207c     3F 12 06 F5 | 	and	arg01, #63
22080     80 FA 05 F6 | 	mov	result1, #128
22084     09 FB 41 F5 | 	or	result1, arg01
22088     0A FB 41 FC | 	wrbyte	result1, arg02
2208c                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
2208c                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2208c                 | ' 		return 2;
2208c     02 FA 05 F6 | 	mov	result1, #2
22090     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
22094                 | LR__3451
22094     80 00 00 FF 
22098     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2209c     70 00 90 3D |  if_ae	jmp	#LR__3454
220a0     03 16 16 F2 | 	cmp	arg03, #3 wc
220a4     18 00 90 CD |  if_b	jmp	#LR__3452
220a8     6C 00 00 FF 
220ac     00 12 16 F2 | 	cmp	arg01, ##55296 wc
220b0     14 00 90 CD |  if_b	jmp	#LR__3453
220b4     70 00 00 FF 
220b8     00 12 16 F2 | 	cmp	arg01, ##57344 wc
220bc     08 00 90 3D |  if_ae	jmp	#LR__3453
220c0                 | LR__3452
220c0     00 FA 05 F6 | 	mov	result1, #0
220c4     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
220c8                 | LR__3453
220c8     09 FB 59 F8 | 	getnib	result1, arg01, #3
220cc     E0 16 06 F6 | 	mov	arg03, #224
220d0     FD 16 42 F5 | 	or	arg03, result1
220d4     0A 17 42 FC | 	wrbyte	arg03, arg02
220d8     01 14 06 F1 | 	add	arg02, #1
220dc     09 FB 01 F6 | 	mov	result1, arg01
220e0     06 FA 45 F0 | 	shr	result1, #6
220e4     3F FA 05 F5 | 	and	result1, #63
220e8     80 16 06 F6 | 	mov	arg03, #128
220ec     FD 16 42 F5 | 	or	arg03, result1
220f0     0A 17 42 FC | 	wrbyte	arg03, arg02
220f4     01 14 06 F1 | 	add	arg02, #1
220f8     3F 12 06 F5 | 	and	arg01, #63
220fc     80 FA 05 F6 | 	mov	result1, #128
22100     09 FB 41 F5 | 	or	result1, arg01
22104     0A FB 41 FC | 	wrbyte	result1, arg02
22108                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
22108                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
22108                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
22108                 | ' 		return 3;
22108     03 FA 05 F6 | 	mov	result1, #3
2210c     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
22110                 | LR__3454
22110     04 16 16 F2 | 	cmp	arg03, #4 wc
22114     00 FA 05 C6 |  if_b	mov	result1, #0
22118     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2211c     09 01 02 F6 | 	mov	_var01, arg01
22120     E0 01 06 F4 | 	bitl	_var01, #480
22124     00 00 6C FF 
22128     00 00 86 F1 | 	sub	_var01, ##-671088640
2212c     06 00 46 F0 | 	shr	_var01, #6
22130     09 13 32 F9 | 	getword	arg01, arg01, #0
22134     6E 00 00 FF 
22138     00 12 86 F1 | 	sub	arg01, ##56320
2213c     00 08 00 FF 
22140     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
22144     02 00 00 CF 
22148     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
2214c     00 FA 05 36 |  if_ae	mov	result1, #0
22150     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
22154     09 01 42 F5 | 	or	_var01, arg01
22158     80 00 00 FF 
2215c     00 00 06 F1 | 	add	_var01, ##65536
22160     00 FB 01 F6 | 	mov	result1, _var01
22164     12 FA 45 F0 | 	shr	result1, #18
22168     07 FA 05 F5 | 	and	result1, #7
2216c     F0 16 06 F6 | 	mov	arg03, #240
22170     FD 16 42 F5 | 	or	arg03, result1
22174     0A 17 42 FC | 	wrbyte	arg03, arg02
22178     01 14 06 F1 | 	add	arg02, #1
2217c     00 FB 01 F6 | 	mov	result1, _var01
22180     0C FA 45 F0 | 	shr	result1, #12
22184     3F FA 05 F5 | 	and	result1, #63
22188     80 16 06 F6 | 	mov	arg03, #128
2218c     FD 16 42 F5 | 	or	arg03, result1
22190     0A 17 42 FC | 	wrbyte	arg03, arg02
22194     01 14 06 F1 | 	add	arg02, #1
22198     00 FB 01 F6 | 	mov	result1, _var01
2219c     06 FA 45 F0 | 	shr	result1, #6
221a0     3F FA 05 F5 | 	and	result1, #63
221a4     80 16 06 F6 | 	mov	arg03, #128
221a8     FD 16 42 F5 | 	or	arg03, result1
221ac     0A 17 42 FC | 	wrbyte	arg03, arg02
221b0     01 14 06 F1 | 	add	arg02, #1
221b4     3F 00 06 F5 | 	and	_var01, #63
221b8     80 FA 05 F6 | 	mov	result1, #128
221bc     00 FB 41 F5 | 	or	result1, _var01
221c0     0A FB 41 FC | 	wrbyte	result1, arg02
221c4                 | ' 	chr = (hc | chr) + 0x10000;
221c4                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
221c4                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
221c4                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
221c4                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
221c4                 | ' 	return 4;
221c4     04 FA 05 F6 | 	mov	result1, #4
221c8                 | _fatfs_cc_put_utf_ret
221c8     2D 00 64 FD | 	ret
221cc                 | 
221cc                 | _fatfs_cc_sync_window
221cc     02 4A 05 F6 | 	mov	COUNT_, #2
221d0     A8 00 A0 FD | 	call	#pushregs_
221d4     09 1F 02 F6 | 	mov	local01, arg01
221d8     00 20 06 F6 | 	mov	local02, #0
221dc     03 1E 06 F1 | 	add	local01, #3
221e0     0F FB C9 FA | 	rdbyte	result1, local01 wz
221e4     03 1E 86 F1 | 	sub	local01, #3
221e8     A4 00 90 AD |  if_e	jmp	#LR__3462
221ec     01 1E 06 F1 | 	add	local01, #1
221f0     0F 13 C2 FA | 	rdbyte	arg01, local01
221f4     33 1E 06 F1 | 	add	local01, #51
221f8     0F 15 02 F6 | 	mov	arg02, local01
221fc     04 1E 86 F1 | 	sub	local01, #4
22200     0F 17 02 FB | 	rdlong	arg03, local01
22204     30 1E 86 F1 | 	sub	local01, #48
22208     01 18 06 F6 | 	mov	arg04, #1
2220c     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
22210     00 FA 0D F2 | 	cmp	result1, #0 wz
22214     74 00 90 5D |  if_ne	jmp	#LR__3460
22218     03 1E 06 F1 | 	add	local01, #3
2221c     0F 01 48 FC | 	wrbyte	#0, local01
22220     2D 1E 06 F1 | 	add	local01, #45
22224     0F FB 01 FB | 	rdlong	result1, local01
22228     0C 1E 86 F1 | 	sub	local01, #12
2222c     0F 19 02 FB | 	rdlong	arg04, local01
22230     0C FB 81 F1 | 	sub	result1, arg04
22234     08 1E 86 F1 | 	sub	local01, #8
22238     0F 19 02 FB | 	rdlong	arg04, local01
2223c     1C 1E 86 F1 | 	sub	local01, #28
22240     0C FB 11 F2 | 	cmp	result1, arg04 wc
22244     48 00 90 3D |  if_ae	jmp	#LR__3461
22248     02 1E 06 F1 | 	add	local01, #2
2224c     0F 19 C2 FA | 	rdbyte	arg04, local01
22250     02 1E 86 F1 | 	sub	local01, #2
22254     02 18 0E F2 | 	cmp	arg04, #2 wz
22258     34 00 90 5D |  if_ne	jmp	#LR__3461
2225c     01 1E 06 F1 | 	add	local01, #1
22260     0F 13 C2 FA | 	rdbyte	arg01, local01
22264     33 1E 06 F1 | 	add	local01, #51
22268     0F 15 02 F6 | 	mov	arg02, local01
2226c     04 1E 86 F1 | 	sub	local01, #4
22270     0F 17 02 FB | 	rdlong	arg03, local01
22274     14 1E 86 F1 | 	sub	local01, #20
22278     0F 1F 02 FB | 	rdlong	local01, local01
2227c     0F 17 02 F1 | 	add	arg03, local01
22280     01 18 06 F6 | 	mov	arg04, #1
22284     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
22288     04 00 90 FD | 	jmp	#LR__3461
2228c                 | LR__3460
2228c     01 20 06 F6 | 	mov	local02, #1
22290                 | LR__3461
22290                 | LR__3462
22290                 | ' 			res = FR_DISK_ERR;
22290                 | ' 		}
22290                 | ' 	}
22290                 | ' 	return res;
22290     10 FB 01 F6 | 	mov	result1, local02
22294     A7 F0 03 F6 | 	mov	ptra, fp
22298     B2 00 A0 FD | 	call	#popregs_
2229c                 | _fatfs_cc_sync_window_ret
2229c     2D 00 64 FD | 	ret
222a0                 | 
222a0                 | _fatfs_cc_move_window
222a0     03 4A 05 F6 | 	mov	COUNT_, #3
222a4     A8 00 A0 FD | 	call	#pushregs_
222a8     09 1F 02 F6 | 	mov	local01, arg01
222ac     0A 21 02 F6 | 	mov	local02, arg02
222b0     00 22 06 F6 | 	mov	local03, #0
222b4     30 1E 06 F1 | 	add	local01, #48
222b8     0F 19 02 FB | 	rdlong	arg04, local01
222bc     30 1E 86 F1 | 	sub	local01, #48
222c0     0C 21 0A F2 | 	cmp	local02, arg04 wz
222c4     40 00 90 AD |  if_e	jmp	#LR__3471
222c8     0F 13 02 F6 | 	mov	arg01, local01
222cc     FC FE BF FD | 	call	#_fatfs_cc_sync_window
222d0     FD 22 0A F6 | 	mov	local03, result1 wz
222d4     30 00 90 5D |  if_ne	jmp	#LR__3470
222d8     01 1E 06 F1 | 	add	local01, #1
222dc     0F 13 C2 FA | 	rdbyte	arg01, local01
222e0     33 1E 06 F1 | 	add	local01, #51
222e4     0F 15 02 F6 | 	mov	arg02, local01
222e8     10 17 02 F6 | 	mov	arg03, local02
222ec     01 18 06 F6 | 	mov	arg04, #1
222f0     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
222f4     00 FA 0D F2 | 	cmp	result1, #0 wz
222f8     01 20 66 56 |  if_ne	neg	local02, #1
222fc     01 22 06 56 |  if_ne	mov	local03, #1
22300     04 1E 86 F1 | 	sub	local01, #4
22304     0F 21 62 FC | 	wrlong	local02, local01
22308                 | LR__3470
22308                 | LR__3471
22308                 | ' 				sect = (LBA_t)0 - 1;
22308                 | ' 				res = FR_DISK_ERR;
22308                 | ' 			}
22308                 | ' 			fs->winsect = sect;
22308                 | ' 		}
22308                 | ' 	}
22308                 | ' 	return res;
22308     11 FB 01 F6 | 	mov	result1, local03
2230c     A7 F0 03 F6 | 	mov	ptra, fp
22310     B2 00 A0 FD | 	call	#popregs_
22314                 | _fatfs_cc_move_window_ret
22314     2D 00 64 FD | 	ret
22318                 | 
22318                 | _fatfs_cc_sync_fs
22318     02 4A 05 F6 | 	mov	COUNT_, #2
2231c     A8 00 A0 FD | 	call	#pushregs_
22320     09 1F 02 F6 | 	mov	local01, arg01
22324     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
22328     FD 20 0A F6 | 	mov	local02, result1 wz
2232c     D8 00 90 5D |  if_ne	jmp	#LR__3481
22330     0F 19 C2 FA | 	rdbyte	arg04, local01
22334     03 18 0E F2 | 	cmp	arg04, #3 wz
22338     04 1E 06 A1 |  if_e	add	local01, #4
2233c     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
22340     04 1E 86 A1 |  if_e	sub	local01, #4
22344     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
22348     A0 00 90 5D |  if_ne	jmp	#LR__3480
2234c     34 1E 06 F1 | 	add	local01, #52
22350     0F 13 02 F6 | 	mov	arg01, local01
22354     00 14 06 F6 | 	mov	arg02, #0
22358     09 16 C6 F9 | 	decod	arg03, #9
2235c     98 00 A0 FD | 	call	#\builtin_bytefill_
22360     0F 13 02 F6 | 	mov	arg01, local01
22364     FE 13 06 F1 | 	add	arg01, #510
22368     55 00 80 FF 
2236c     09 AB 58 FC | 	wrword	##43605, arg01
22370     A9 B0 A0 FF 
22374     0F A5 68 FC | 	wrlong	##1096897106, local01
22378     0F 13 02 F6 | 	mov	arg01, local01
2237c     E4 13 06 F1 | 	add	arg01, #484
22380     B9 A0 B0 FF 
22384     09 E5 68 FC | 	wrlong	##1631679090, arg01
22388     0F 13 02 F6 | 	mov	arg01, local01
2238c     E8 13 06 F1 | 	add	arg01, #488
22390     20 1E 86 F1 | 	sub	local01, #32
22394     0F 15 02 FB | 	rdlong	arg02, local01
22398     09 15 62 FC | 	wrlong	arg02, arg01
2239c     20 1E 06 F1 | 	add	local01, #32
223a0     0F 13 02 F6 | 	mov	arg01, local01
223a4     EC 13 06 F1 | 	add	arg01, #492
223a8     24 1E 86 F1 | 	sub	local01, #36
223ac     0F 15 02 FB | 	rdlong	arg02, local01
223b0     09 15 62 FC | 	wrlong	arg02, arg01
223b4     10 1E 06 F1 | 	add	local01, #16
223b8     0F 17 02 FB | 	rdlong	arg03, local01
223bc     01 16 06 F1 | 	add	arg03, #1
223c0     10 1E 06 F1 | 	add	local01, #16
223c4     0F 17 62 FC | 	wrlong	arg03, local01
223c8     2F 1E 86 F1 | 	sub	local01, #47
223cc     0F 13 C2 FA | 	rdbyte	arg01, local01
223d0     33 1E 06 F1 | 	add	local01, #51
223d4     0F 15 02 F6 | 	mov	arg02, local01
223d8     01 18 06 F6 | 	mov	arg04, #1
223dc     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
223e0     30 1E 86 F1 | 	sub	local01, #48
223e4     0F 01 48 FC | 	wrbyte	#0, local01
223e8     04 1E 86 F1 | 	sub	local01, #4
223ec                 | LR__3480
223ec     01 1E 06 F1 | 	add	local01, #1
223f0     0F 13 C2 FA | 	rdbyte	arg01, local01
223f4     00 14 06 F6 | 	mov	arg02, #0
223f8     00 16 06 F6 | 	mov	arg03, #0
223fc     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
22400     00 FA 0D F2 | 	cmp	result1, #0 wz
22404     01 20 06 56 |  if_ne	mov	local02, #1
22408                 | LR__3481
22408                 | ' 	}
22408                 | ' 
22408                 | ' 	return res;
22408     10 FB 01 F6 | 	mov	result1, local02
2240c     A7 F0 03 F6 | 	mov	ptra, fp
22410     B2 00 A0 FD | 	call	#popregs_
22414                 | _fatfs_cc_sync_fs_ret
22414     2D 00 64 FD | 	ret
22418                 | 
22418                 | _fatfs_cc_clst2sect
22418     02 14 86 F1 | 	sub	arg02, #2
2241c     18 12 06 F1 | 	add	arg01, #24
22420     09 01 02 FB | 	rdlong	_var01, arg01
22424     18 12 86 F1 | 	sub	arg01, #24
22428     02 00 86 F1 | 	sub	_var01, #2
2242c     00 15 12 F2 | 	cmp	arg02, _var01 wc
22430     00 FA 05 36 |  if_ae	mov	result1, #0
22434     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
22438     0A 12 06 F1 | 	add	arg01, #10
2243c     09 01 E2 FA | 	rdword	_var01, arg01
22440     0A 01 02 FD | 	qmul	_var01, arg02
22444                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
22444     22 12 06 F1 | 	add	arg01, #34
22448     09 FB 01 FB | 	rdlong	result1, arg01
2244c     18 00 62 FD | 	getqx	_var01
22450     00 FB 01 F1 | 	add	result1, _var01
22454                 | _fatfs_cc_clst2sect_ret
22454     2D 00 64 FD | 	ret
22458                 | 
22458                 | _fatfs_cc_get_fat
22458     07 4A 05 F6 | 	mov	COUNT_, #7
2245c     A8 00 A0 FD | 	call	#pushregs_
22460     0A 1F 02 F6 | 	mov	local01, arg02
22464     09 21 02 FB | 	rdlong	local02, arg01
22468     02 1E 16 F2 | 	cmp	local01, #2 wc
2246c     14 00 90 CD |  if_b	jmp	#LR__3490
22470     18 20 06 F1 | 	add	local02, #24
22474     10 23 02 FB | 	rdlong	local03, local02
22478     18 20 86 F1 | 	sub	local02, #24
2247c     11 1F 12 F2 | 	cmp	local01, local03 wc
22480     08 00 90 CD |  if_b	jmp	#LR__3491
22484                 | LR__3490
22484     01 24 06 F6 | 	mov	local04, #1
22488     60 01 90 FD | 	jmp	#LR__3498
2248c                 | LR__3491
2248c     01 24 66 F6 | 	neg	local04, #1
22490                 | ' 		val = 0xFFFFFFFF;
22490                 | ' 
22490                 | ' 		switch (fs->fs_type) {
22490     10 27 C2 FA | 	rdbyte	local05, local02
22494     01 26 86 F1 | 	sub	local05, #1
22498     03 26 26 F3 | 	fle	local05, #3
2249c     30 26 62 FD | 	jmprel	local05
224a0                 | LR__3492
224a0     0C 00 90 FD | 	jmp	#LR__3493
224a4     B8 00 90 FD | 	jmp	#LR__3494
224a8     F8 00 90 FD | 	jmp	#LR__3495
224ac     38 01 90 FD | 	jmp	#LR__3496
224b0                 | LR__3493
224b0     0F 27 02 F6 | 	mov	local05, local01
224b4     0F 13 02 F6 | 	mov	arg01, local01
224b8     01 12 46 F0 | 	shr	arg01, #1
224bc     09 27 02 F1 | 	add	local05, arg01
224c0     10 13 02 F6 | 	mov	arg01, local02
224c4     13 29 02 F6 | 	mov	local06, local05
224c8     09 28 46 F0 | 	shr	local06, #9
224cc     24 20 06 F1 | 	add	local02, #36
224d0     10 15 02 FB | 	rdlong	arg02, local02
224d4     24 20 86 F1 | 	sub	local02, #36
224d8     14 15 02 F1 | 	add	arg02, local06
224dc     C0 FD BF FD | 	call	#_fatfs_cc_move_window
224e0     00 FA 0D F2 | 	cmp	result1, #0 wz
224e4     04 01 90 5D |  if_ne	jmp	#LR__3497
224e8     13 29 02 F6 | 	mov	local06, local05
224ec     FF 29 06 F5 | 	and	local06, #511
224f0     34 20 06 F1 | 	add	local02, #52
224f4     10 29 02 F1 | 	add	local06, local02
224f8     14 2B C2 FA | 	rdbyte	local07, local06
224fc     34 20 86 F1 | 	sub	local02, #52
22500     10 13 02 F6 | 	mov	arg01, local02
22504     01 26 06 F1 | 	add	local05, #1
22508     13 29 02 F6 | 	mov	local06, local05
2250c     09 28 46 F0 | 	shr	local06, #9
22510     24 20 06 F1 | 	add	local02, #36
22514     10 15 02 FB | 	rdlong	arg02, local02
22518     24 20 86 F1 | 	sub	local02, #36
2251c     14 15 02 F1 | 	add	arg02, local06
22520     7C FD BF FD | 	call	#_fatfs_cc_move_window
22524     00 FA 0D F2 | 	cmp	result1, #0 wz
22528     C0 00 90 5D |  if_ne	jmp	#LR__3497
2252c     FF 27 06 F5 | 	and	local05, #511
22530     34 20 06 F1 | 	add	local02, #52
22534     10 27 02 F1 | 	add	local05, local02
22538     13 29 C2 FA | 	rdbyte	local06, local05
2253c     08 28 66 F0 | 	shl	local06, #8
22540     14 2B 42 F5 | 	or	local07, local06
22544     01 1E CE F7 | 	test	local01, #1 wz
22548     04 2A 46 50 |  if_ne	shr	local07, #4
2254c     15 23 02 56 |  if_ne	mov	local03, local07
22550     0B 2A 46 A7 |  if_e	zerox	local07, #11
22554     15 23 02 A6 |  if_e	mov	local03, local07
22558     11 25 02 F6 | 	mov	local04, local03
2255c                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
2255c                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2255c                 | ' 			break;
2255c     8C 00 90 FD | 	jmp	#LR__3497
22560                 | LR__3494
22560     10 13 02 F6 | 	mov	arg01, local02
22564     0F 29 02 F6 | 	mov	local06, local01
22568     08 28 46 F0 | 	shr	local06, #8
2256c     24 20 06 F1 | 	add	local02, #36
22570     10 15 02 FB | 	rdlong	arg02, local02
22574     24 20 86 F1 | 	sub	local02, #36
22578     14 15 02 F1 | 	add	arg02, local06
2257c     20 FD BF FD | 	call	#_fatfs_cc_move_window
22580     00 FA 0D F2 | 	cmp	result1, #0 wz
22584     64 00 90 5D |  if_ne	jmp	#LR__3497
22588     34 20 06 F1 | 	add	local02, #52
2258c     01 1E 66 F0 | 	shl	local01, #1
22590     FF 1F 06 F5 | 	and	local01, #511
22594     0F 21 02 F1 | 	add	local02, local01
22598                 | ' {
22598                 | ' 
22598                 | ' 	return *((WORD*)ptr);
22598     10 FB E1 FA | 	rdword	result1, local02
2259c     FD 24 32 F9 | 	getword	local04, result1, #0
225a0                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
225a0                 | ' 			break;
225a0     48 00 90 FD | 	jmp	#LR__3497
225a4                 | LR__3495
225a4     10 13 02 F6 | 	mov	arg01, local02
225a8     0F 29 02 F6 | 	mov	local06, local01
225ac     07 28 46 F0 | 	shr	local06, #7
225b0     24 20 06 F1 | 	add	local02, #36
225b4     10 15 02 FB | 	rdlong	arg02, local02
225b8     24 20 86 F1 | 	sub	local02, #36
225bc     14 15 02 F1 | 	add	arg02, local06
225c0     DC FC BF FD | 	call	#_fatfs_cc_move_window
225c4     00 FA 0D F2 | 	cmp	result1, #0 wz
225c8     20 00 90 5D |  if_ne	jmp	#LR__3497
225cc     34 20 06 F1 | 	add	local02, #52
225d0     02 1E 66 F0 | 	shl	local01, #2
225d4     FF 1F 06 F5 | 	and	local01, #511
225d8     0F 21 02 F1 | 	add	local02, local01
225dc                 | ' {
225dc                 | ' 
225dc                 | ' 	return *((DWORD*)ptr);
225dc     10 25 02 FB | 	rdlong	local04, local02
225e0     7C 24 06 F4 | 	bitl	local04, #124
225e4                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
225e4                 | ' 			break;
225e4     04 00 90 FD | 	jmp	#LR__3497
225e8                 | LR__3496
225e8     01 24 06 F6 | 	mov	local04, #1
225ec                 | LR__3497
225ec                 | LR__3498
225ec                 | ' 			val = 1;
225ec                 | ' 		}
225ec                 | ' 	}
225ec                 | ' 
225ec                 | ' 	return val;
225ec     12 FB 01 F6 | 	mov	result1, local04
225f0     A7 F0 03 F6 | 	mov	ptra, fp
225f4     B2 00 A0 FD | 	call	#popregs_
225f8                 | _fatfs_cc_get_fat_ret
225f8     2D 00 64 FD | 	ret
225fc                 | 
225fc                 | _fatfs_cc_put_fat
225fc     08 4A 05 F6 | 	mov	COUNT_, #8
22600     A8 00 A0 FD | 	call	#pushregs_
22604     09 1F 02 F6 | 	mov	local01, arg01
22608     0A 21 02 F6 | 	mov	local02, arg02
2260c     0B 23 02 F6 | 	mov	local03, arg03
22610     02 24 06 F6 | 	mov	local04, #2
22614     02 20 16 F2 | 	cmp	local02, #2 wc
22618     E0 01 90 CD |  if_b	jmp	#LR__3507
2261c     18 1E 06 F1 | 	add	local01, #24
22620     0F 27 02 FB | 	rdlong	local05, local01
22624     18 1E 86 F1 | 	sub	local01, #24
22628     13 21 12 F2 | 	cmp	local02, local05 wc
2262c     CC 01 90 3D |  if_ae	jmp	#LR__3507
22630                 | ' 		switch (fs->fs_type) {
22630     0F 29 C2 FA | 	rdbyte	local06, local01
22634     01 28 86 F1 | 	sub	local06, #1
22638     03 28 26 F3 | 	fle	local06, #3
2263c     30 28 62 FD | 	jmprel	local06
22640                 | LR__3500
22640     0C 00 90 FD | 	jmp	#LR__3501
22644     F8 00 90 FD | 	jmp	#LR__3504
22648     40 01 90 FD | 	jmp	#LR__3505
2264c     AC 01 90 FD | 	jmp	#LR__3506
22650                 | LR__3501
22650     10 2B 02 F6 | 	mov	local07, local02
22654     10 27 02 F6 | 	mov	local05, local02
22658     01 26 46 F0 | 	shr	local05, #1
2265c     13 2B 02 F1 | 	add	local07, local05
22660     0F 13 02 F6 | 	mov	arg01, local01
22664     15 29 02 F6 | 	mov	local06, local07
22668     09 28 46 F0 | 	shr	local06, #9
2266c     24 1E 06 F1 | 	add	local01, #36
22670     0F 15 02 FB | 	rdlong	arg02, local01
22674     24 1E 86 F1 | 	sub	local01, #36
22678     14 15 02 F1 | 	add	arg02, local06
2267c     20 FC BF FD | 	call	#_fatfs_cc_move_window
22680     FD 24 0A F6 | 	mov	local04, result1 wz
22684     74 01 90 5D |  if_ne	jmp	#LR__3506
22688     34 1E 06 F1 | 	add	local01, #52
2268c     0F 2D 02 F6 | 	mov	local08, local01
22690     15 27 02 F6 | 	mov	local05, local07
22694     FF 27 06 F5 | 	and	local05, #511
22698     13 2D 02 F1 | 	add	local08, local05
2269c     01 20 CE F7 | 	test	local02, #1 wz
226a0     34 1E 86 F1 | 	sub	local01, #52
226a4     01 2A 06 F1 | 	add	local07, #1
226a8     18 00 90 AD |  if_e	jmp	#LR__3502
226ac     16 27 C2 FA | 	rdbyte	local05, local08
226b0     13 27 42 F8 | 	getnib	local05, local05, #0
226b4     11 29 E2 F8 | 	getbyte	local06, local03, #0
226b8     04 28 66 F0 | 	shl	local06, #4
226bc     14 27 42 F5 | 	or	local05, local06
226c0     04 00 90 FD | 	jmp	#LR__3503
226c4                 | LR__3502
226c4     11 27 02 F6 | 	mov	local05, local03
226c8                 | LR__3503
226c8     16 27 42 FC | 	wrbyte	local05, local08
226cc     03 1E 06 F1 | 	add	local01, #3
226d0     0F 03 48 FC | 	wrbyte	#1, local01
226d4     03 1E 86 F1 | 	sub	local01, #3
226d8     0F 13 02 F6 | 	mov	arg01, local01
226dc     15 2D 02 F6 | 	mov	local08, local07
226e0     09 2C 46 F0 | 	shr	local08, #9
226e4     24 1E 06 F1 | 	add	local01, #36
226e8     0F 15 02 FB | 	rdlong	arg02, local01
226ec     24 1E 86 F1 | 	sub	local01, #36
226f0     16 15 02 F1 | 	add	arg02, local08
226f4     A8 FB BF FD | 	call	#_fatfs_cc_move_window
226f8     FD 24 0A F6 | 	mov	local04, result1 wz
226fc     FC 00 90 5D |  if_ne	jmp	#LR__3506
22700     34 1E 06 F1 | 	add	local01, #52
22704     0F 2D 02 F6 | 	mov	local08, local01
22708     FF 2B 06 F5 | 	and	local07, #511
2270c     15 2D 02 F1 | 	add	local08, local07
22710     01 20 CE F7 | 	test	local02, #1 wz
22714     04 22 46 50 |  if_ne	shr	local03, #4
22718     11 27 02 56 |  if_ne	mov	local05, local03
2271c     16 27 C2 AA |  if_e	rdbyte	local05, local08
22720     F0 26 06 A5 |  if_e	and	local05, #240
22724     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
22728     11 23 42 A8 |  if_e	getnib	local03, local03, #0
2272c     11 27 42 A5 |  if_e	or	local05, local03
22730     16 27 42 FC | 	wrbyte	local05, local08
22734     31 1E 86 F1 | 	sub	local01, #49
22738     0F 03 48 FC | 	wrbyte	#1, local01
2273c                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
2273c                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2273c                 | ' 			fs->wflag = 1;
2273c                 | ' 			break;
2273c     BC 00 90 FD | 	jmp	#LR__3506
22740                 | LR__3504
22740     0F 13 02 F6 | 	mov	arg01, local01
22744     10 2D 02 F6 | 	mov	local08, local02
22748     08 2C 46 F0 | 	shr	local08, #8
2274c     24 1E 06 F1 | 	add	local01, #36
22750     0F 15 02 FB | 	rdlong	arg02, local01
22754     24 1E 86 F1 | 	sub	local01, #36
22758     16 15 02 F1 | 	add	arg02, local08
2275c     40 FB BF FD | 	call	#_fatfs_cc_move_window
22760     FD 24 0A F6 | 	mov	local04, result1 wz
22764     94 00 90 5D |  if_ne	jmp	#LR__3506
22768     34 1E 06 F1 | 	add	local01, #52
2276c     0F 13 02 F6 | 	mov	arg01, local01
22770     01 20 66 F0 | 	shl	local02, #1
22774     FF 21 06 F5 | 	and	local02, #511
22778     10 13 02 F1 | 	add	arg01, local02
2277c     09 23 52 FC | 	wrword	local03, arg01
22780     31 1E 86 F1 | 	sub	local01, #49
22784     0F 03 48 FC | 	wrbyte	#1, local01
22788                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
22788                 | ' 			fs->wflag = 1;
22788                 | ' 			break;
22788     70 00 90 FD | 	jmp	#LR__3506
2278c                 | LR__3505
2278c     0F 13 02 F6 | 	mov	arg01, local01
22790     10 2D 02 F6 | 	mov	local08, local02
22794     07 2C 46 F0 | 	shr	local08, #7
22798     24 1E 06 F1 | 	add	local01, #36
2279c     0F 15 02 FB | 	rdlong	arg02, local01
227a0     24 1E 86 F1 | 	sub	local01, #36
227a4     16 15 02 F1 | 	add	arg02, local08
227a8     F4 FA BF FD | 	call	#_fatfs_cc_move_window
227ac     FD 24 0A F6 | 	mov	local04, result1 wz
227b0     48 00 90 5D |  if_ne	jmp	#LR__3506
227b4     7C 22 06 F4 | 	bitl	local03, #124
227b8     34 1E 06 F1 | 	add	local01, #52
227bc     10 2D 02 F6 | 	mov	local08, local02
227c0     02 2C 66 F0 | 	shl	local08, #2
227c4     FF 2D 06 F5 | 	and	local08, #511
227c8     0F 13 02 F6 | 	mov	arg01, local01
227cc     16 13 02 F1 | 	add	arg01, local08
227d0                 | ' {
227d0                 | ' 
227d0                 | ' 	return *((DWORD*)ptr);
227d0     09 2D 02 FB | 	rdlong	local08, arg01
227d4     00 00 78 FF 
227d8     00 2C 06 F5 | 	and	local08, ##-268435456
227dc     16 23 42 F5 | 	or	local03, local08
227e0     0F 13 02 F6 | 	mov	arg01, local01
227e4     02 20 66 F0 | 	shl	local02, #2
227e8     FF 21 06 F5 | 	and	local02, #511
227ec     10 13 02 F1 | 	add	arg01, local02
227f0     09 23 62 FC | 	wrlong	local03, arg01
227f4     31 1E 86 F1 | 	sub	local01, #49
227f8     0F 03 48 FC | 	wrbyte	#1, local01
227fc                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
227fc                 | ' 			}
227fc                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
227fc                 | ' 			fs->wflag = 1;
227fc                 | ' 			break;
227fc                 | LR__3506
227fc                 | LR__3507
227fc                 | ' 		}
227fc                 | ' 	}
227fc                 | ' 	return res;
227fc     12 FB 01 F6 | 	mov	result1, local04
22800     A7 F0 03 F6 | 	mov	ptra, fp
22804     B2 00 A0 FD | 	call	#popregs_
22808                 | _fatfs_cc_put_fat_ret
22808     2D 00 64 FD | 	ret
2280c                 | 
2280c                 | _fatfs_cc_remove_chain
2280c     05 4A 05 F6 | 	mov	COUNT_, #5
22810     A8 00 A0 FD | 	call	#pushregs_
22814     09 1F 02 F6 | 	mov	local01, arg01
22818     0A 21 02 F6 | 	mov	local02, arg02
2281c     0B 23 02 F6 | 	mov	local03, arg03
22820     0F 25 02 FB | 	rdlong	local04, local01
22824     02 20 16 F2 | 	cmp	local02, #2 wc
22828     14 00 90 CD |  if_b	jmp	#LR__3510
2282c     18 24 06 F1 | 	add	local04, #24
22830     12 FB 01 FB | 	rdlong	result1, local04
22834     18 24 86 F1 | 	sub	local04, #24
22838     FD 20 12 F2 | 	cmp	local02, result1 wc
2283c     08 00 90 CD |  if_b	jmp	#LR__3511
22840                 | LR__3510
22840     02 FA 05 F6 | 	mov	result1, #2
22844     CC 00 90 FD | 	jmp	#LR__3516
22848                 | LR__3511
22848     00 22 0E F2 | 	cmp	local03, #0 wz
2284c     18 00 90 AD |  if_e	jmp	#LR__3512
22850     11 15 02 F6 | 	mov	arg02, local03
22854     12 13 02 F6 | 	mov	arg01, local04
22858     01 16 66 F6 | 	neg	arg03, #1
2285c     9C FD BF FD | 	call	#_fatfs_cc_put_fat
22860     00 FA 0D F2 | 	cmp	result1, #0 wz
22864     AC 00 90 5D |  if_ne	jmp	#LR__3516
22868                 | LR__3512
22868                 | ' 	}
22868                 | ' 
22868                 | ' 
22868                 | ' 	do {
22868                 | LR__3513
22868     10 15 02 F6 | 	mov	arg02, local02
2286c     0F 13 02 F6 | 	mov	arg01, local01
22870     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
22874     FD 26 0A F6 | 	mov	local05, result1 wz
22878     94 00 90 AD |  if_e	jmp	#LR__3515
2287c     01 26 0E F2 | 	cmp	local05, #1 wz
22880     02 FA 05 A6 |  if_e	mov	result1, #2
22884     8C 00 90 AD |  if_e	jmp	#LR__3516
22888     FF FF 7F FF 
2288c     FF 27 0E F2 | 	cmp	local05, ##-1 wz
22890     01 FA 05 A6 |  if_e	mov	result1, #1
22894     7C 00 90 AD |  if_e	jmp	#LR__3516
22898     10 15 02 F6 | 	mov	arg02, local02
2289c     12 13 02 F6 | 	mov	arg01, local04
228a0     00 16 06 F6 | 	mov	arg03, #0
228a4     54 FD BF FD | 	call	#_fatfs_cc_put_fat
228a8     FD 22 0A F6 | 	mov	local03, result1 wz
228ac     11 FB 01 56 |  if_ne	mov	result1, local03
228b0     60 00 90 5D |  if_ne	jmp	#LR__3516
228b4     18 24 06 F1 | 	add	local04, #24
228b8     12 23 02 FB | 	rdlong	local03, local04
228bc     02 22 86 F1 | 	sub	local03, #2
228c0     04 24 86 F1 | 	sub	local04, #4
228c4     12 21 02 FB | 	rdlong	local02, local04
228c8     14 24 86 F1 | 	sub	local04, #20
228cc     11 21 12 F2 | 	cmp	local02, local03 wc
228d0     24 00 90 3D |  if_ae	jmp	#LR__3514
228d4     14 24 06 F1 | 	add	local04, #20
228d8     12 23 02 FB | 	rdlong	local03, local04
228dc     01 22 06 F1 | 	add	local03, #1
228e0     12 23 62 FC | 	wrlong	local03, local04
228e4     10 24 86 F1 | 	sub	local04, #16
228e8     12 23 C2 FA | 	rdbyte	local03, local04
228ec     01 22 46 F5 | 	or	local03, #1
228f0     12 23 42 FC | 	wrbyte	local03, local04
228f4     04 24 86 F1 | 	sub	local04, #4
228f8                 | LR__3514
228f8     13 21 02 F6 | 	mov	local02, local05
228fc     18 24 06 F1 | 	add	local04, #24
22900     12 27 02 FB | 	rdlong	local05, local04
22904     18 24 86 F1 | 	sub	local04, #24
22908     13 21 12 F2 | 	cmp	local02, local05 wc
2290c     58 FF 9F CD |  if_b	jmp	#LR__3513
22910                 | LR__3515
22910                 | ' #line 1500 "ff.c"
22910                 | ' 	return FR_OK;
22910     00 FA 05 F6 | 	mov	result1, #0
22914                 | LR__3516
22914     A7 F0 03 F6 | 	mov	ptra, fp
22918     B2 00 A0 FD | 	call	#popregs_
2291c                 | _fatfs_cc_remove_chain_ret
2291c     2D 00 64 FD | 	ret
22920                 | 
22920                 | _fatfs_cc_create_chain
22920     09 4A 05 F6 | 	mov	COUNT_, #9
22924     A8 00 A0 FD | 	call	#pushregs_
22928     09 1F 02 F6 | 	mov	local01, arg01
2292c     0A 21 0A F6 | 	mov	local02, arg02 wz
22930     0F 23 02 FB | 	rdlong	local03, local01
22934     28 00 90 5D |  if_ne	jmp	#LR__3520
22938     10 22 06 F1 | 	add	local03, #16
2293c     11 25 0A FB | 	rdlong	local04, local03 wz
22940     10 22 86 F1 | 	sub	local03, #16
22944     18 22 06 51 |  if_ne	add	local03, #24
22948     11 27 02 5B |  if_ne	rdlong	local05, local03
2294c     18 22 86 51 |  if_ne	sub	local03, #24
22950     13 25 12 52 |  if_ne	cmp	local04, local05 wc
22954     50 00 90 4D |  if_c_and_nz	jmp	#LR__3521
22958     01 24 06 F6 | 	mov	local04, #1
2295c     48 00 90 FD | 	jmp	#LR__3521
22960                 | LR__3520
22960     10 15 02 F6 | 	mov	arg02, local02
22964     0F 13 02 F6 | 	mov	arg01, local01
22968     EC FA BF FD | 	call	#_fatfs_cc_get_fat
2296c     FD 24 02 F6 | 	mov	local04, result1
22970     02 24 16 F2 | 	cmp	local04, #2 wc
22974     01 FA 05 C6 |  if_b	mov	result1, #1
22978     BC 01 90 CD |  if_b	jmp	#LR__3531
2297c     FF FF 7F FF 
22980     FF 25 0E F2 | 	cmp	local04, ##-1 wz
22984     12 FB 01 A6 |  if_e	mov	result1, local04
22988     AC 01 90 AD |  if_e	jmp	#LR__3531
2298c     18 22 06 F1 | 	add	local03, #24
22990     11 27 02 FB | 	rdlong	local05, local03
22994     18 22 86 F1 | 	sub	local03, #24
22998     13 25 12 F2 | 	cmp	local04, local05 wc
2299c     12 FB 01 C6 |  if_b	mov	result1, local04
229a0     94 01 90 CD |  if_b	jmp	#LR__3531
229a4     10 25 02 F6 | 	mov	local04, local02
229a8                 | LR__3521
229a8     14 22 06 F1 | 	add	local03, #20
229ac     11 27 0A FB | 	rdlong	local05, local03 wz
229b0     14 22 86 F1 | 	sub	local03, #20
229b4     00 FA 05 A6 |  if_e	mov	result1, #0
229b8     7C 01 90 AD |  if_e	jmp	#LR__3531
229bc     00 28 06 F6 | 	mov	local06, #0
229c0     10 25 0A F2 | 	cmp	local04, local02 wz
229c4     74 00 90 5D |  if_ne	jmp	#LR__3524
229c8     12 29 02 F6 | 	mov	local06, local04
229cc     01 28 06 F1 | 	add	local06, #1
229d0     18 22 06 F1 | 	add	local03, #24
229d4     11 27 02 FB | 	rdlong	local05, local03
229d8     18 22 86 F1 | 	sub	local03, #24
229dc     13 29 12 F2 | 	cmp	local06, local05 wc
229e0     02 28 06 36 |  if_ae	mov	local06, #2
229e4     14 15 02 F6 | 	mov	arg02, local06
229e8     0F 13 02 F6 | 	mov	arg01, local01
229ec     68 FA BF FD | 	call	#_fatfs_cc_get_fat
229f0     FD 26 02 F6 | 	mov	local05, result1
229f4     01 26 0E F2 | 	cmp	local05, #1 wz
229f8     FF FF 7F 5F 
229fc     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
22a00     13 FB 01 A6 |  if_e	mov	result1, local05
22a04     30 01 90 AD |  if_e	jmp	#LR__3531
22a08     00 26 0E F2 | 	cmp	local05, #0 wz
22a0c     2C 00 90 AD |  if_e	jmp	#LR__3523
22a10     10 22 06 F1 | 	add	local03, #16
22a14     11 2B 02 FB | 	rdlong	local07, local03
22a18     10 22 86 F1 | 	sub	local03, #16
22a1c     02 2A 16 F2 | 	cmp	local07, #2 wc
22a20     14 00 90 CD |  if_b	jmp	#LR__3522
22a24     18 22 06 F1 | 	add	local03, #24
22a28     11 27 02 FB | 	rdlong	local05, local03
22a2c     18 22 86 F1 | 	sub	local03, #24
22a30     13 2B 12 F2 | 	cmp	local07, local05 wc
22a34     15 25 02 C6 |  if_b	mov	local04, local07
22a38                 | LR__3522
22a38     00 28 06 F6 | 	mov	local06, #0
22a3c                 | LR__3523
22a3c                 | LR__3524
22a3c     00 28 0E F2 | 	cmp	local06, #0 wz
22a40     60 00 90 5D |  if_ne	jmp	#LR__3527
22a44     12 29 02 F6 | 	mov	local06, local04
22a48                 | ' 			ncl = scl;
22a48                 | ' 			for (;;) {
22a48                 | LR__3525
22a48     01 28 06 F1 | 	add	local06, #1
22a4c     18 22 06 F1 | 	add	local03, #24
22a50     11 27 02 FB | 	rdlong	local05, local03
22a54     18 22 86 F1 | 	sub	local03, #24
22a58     13 29 12 F2 | 	cmp	local06, local05 wc
22a5c     02 28 06 36 |  if_ae	mov	local06, #2
22a60     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
22a64     00 FA 05 16 |  if_a	mov	result1, #0
22a68     CC 00 90 1D |  if_a	jmp	#LR__3531
22a6c     14 15 02 F6 | 	mov	arg02, local06
22a70     0F 13 02 F6 | 	mov	arg01, local01
22a74     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
22a78     FD 2A 0A F6 | 	mov	local07, result1 wz
22a7c     24 00 90 AD |  if_e	jmp	#LR__3526
22a80     01 2A 0E F2 | 	cmp	local07, #1 wz
22a84     FF FF 7F 5F 
22a88     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
22a8c     15 FB 01 A6 |  if_e	mov	result1, local07
22a90     A4 00 90 AD |  if_e	jmp	#LR__3531
22a94     12 29 0A F2 | 	cmp	local06, local04 wz
22a98     00 FA 05 A6 |  if_e	mov	result1, #0
22a9c     98 00 90 AD |  if_e	jmp	#LR__3531
22aa0     A4 FF 9F FD | 	jmp	#LR__3525
22aa4                 | LR__3526
22aa4                 | LR__3527
22aa4     11 13 02 F6 | 	mov	arg01, local03
22aa8     14 15 02 F6 | 	mov	arg02, local06
22aac     01 16 66 F6 | 	neg	arg03, #1
22ab0     48 FB BF FD | 	call	#_fatfs_cc_put_fat
22ab4     FD 2C 0A F6 | 	mov	local08, result1 wz
22ab8     1C 00 90 5D |  if_ne	jmp	#LR__3528
22abc     00 20 0E F2 | 	cmp	local02, #0 wz
22ac0     14 00 90 AD |  if_e	jmp	#LR__3528
22ac4     11 13 02 F6 | 	mov	arg01, local03
22ac8     10 15 02 F6 | 	mov	arg02, local02
22acc     14 17 02 F6 | 	mov	arg03, local06
22ad0     28 FB BF FD | 	call	#_fatfs_cc_put_fat
22ad4     FD 2C 02 F6 | 	mov	local08, result1
22ad8                 | LR__3528
22ad8     00 2C 0E F2 | 	cmp	local08, #0 wz
22adc     4C 00 90 5D |  if_ne	jmp	#LR__3529
22ae0     10 22 06 F1 | 	add	local03, #16
22ae4     11 29 62 FC | 	wrlong	local06, local03
22ae8     08 22 06 F1 | 	add	local03, #8
22aec     11 27 02 FB | 	rdlong	local05, local03
22af0     02 26 86 F1 | 	sub	local05, #2
22af4     04 22 86 F1 | 	sub	local03, #4
22af8     11 2F 02 FB | 	rdlong	local09, local03
22afc     14 22 86 F1 | 	sub	local03, #20
22b00     13 2F 1A F2 | 	cmp	local09, local05 wcz
22b04     14 22 06 E1 |  if_be	add	local03, #20
22b08     11 2F 02 EB |  if_be	rdlong	local09, local03
22b0c     01 2E 86 E1 |  if_be	sub	local09, #1
22b10     11 2F 62 EC |  if_be	wrlong	local09, local03
22b14     14 22 86 E1 |  if_be	sub	local03, #20
22b18     04 22 06 F1 | 	add	local03, #4
22b1c     11 27 C2 FA | 	rdbyte	local05, local03
22b20     01 26 46 F5 | 	or	local05, #1
22b24     11 27 42 FC | 	wrbyte	local05, local03
22b28     08 00 90 FD | 	jmp	#LR__3530
22b2c                 | LR__3529
22b2c     01 2C 0E F2 | 	cmp	local08, #1 wz
22b30     01 28 C6 F6 | 	negz	local06, #1
22b34                 | LR__3530
22b34                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
22b34                 | ' 	}
22b34                 | ' 
22b34                 | ' 	return ncl;
22b34     14 FB 01 F6 | 	mov	result1, local06
22b38                 | LR__3531
22b38     A7 F0 03 F6 | 	mov	ptra, fp
22b3c     B2 00 A0 FD | 	call	#popregs_
22b40                 | _fatfs_cc_create_chain_ret
22b40     2D 00 64 FD | 	ret
22b44                 | 
22b44                 | _fatfs_cc_dir_clear
22b44     06 4A 05 F6 | 	mov	COUNT_, #6
22b48     A8 00 A0 FD | 	call	#pushregs_
22b4c     09 1F 02 F6 | 	mov	local01, arg01
22b50     0A 21 02 F6 | 	mov	local02, arg02
22b54     0F 13 02 F6 | 	mov	arg01, local01
22b58     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
22b5c     00 FA 0D F2 | 	cmp	result1, #0 wz
22b60     01 FA 05 56 |  if_ne	mov	result1, #1
22b64     90 00 90 5D |  if_ne	jmp	#LR__3542
22b68     0F 13 02 F6 | 	mov	arg01, local01
22b6c     10 15 02 F6 | 	mov	arg02, local02
22b70     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
22b74     FD 22 02 F6 | 	mov	local03, result1
22b78     30 1E 06 F1 | 	add	local01, #48
22b7c     0F 23 62 FC | 	wrlong	local03, local01
22b80     04 1E 06 F1 | 	add	local01, #4
22b84     0F 13 02 F6 | 	mov	arg01, local01
22b88     00 14 06 F6 | 	mov	arg02, #0
22b8c     09 16 C6 F9 | 	decod	arg03, #9
22b90     98 00 A0 FD | 	call	#\builtin_bytefill_
22b94     0F 25 02 F6 | 	mov	local04, local01
22b98                 | ' #line 1667 "ff.c"
22b98                 | ' 	{
22b98                 | ' 		ibuf = fs->win; szb = 1;
22b98                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
22b98     00 26 06 F6 | 	mov	local05, #0
22b9c     34 1E 86 F1 | 	sub	local01, #52
22ba0                 | LR__3540
22ba0     0A 1E 06 F1 | 	add	local01, #10
22ba4     0F 29 E2 FA | 	rdword	local06, local01
22ba8     0A 1E 86 F1 | 	sub	local01, #10
22bac     14 27 12 F2 | 	cmp	local05, local06 wc
22bb0     2C 00 90 3D |  if_ae	jmp	#LR__3541
22bb4     01 1E 06 F1 | 	add	local01, #1
22bb8     0F 13 C2 FA | 	rdbyte	arg01, local01
22bbc     01 1E 86 F1 | 	sub	local01, #1
22bc0     12 15 02 F6 | 	mov	arg02, local04
22bc4     11 17 02 F6 | 	mov	arg03, local03
22bc8     13 17 02 F1 | 	add	arg03, local05
22bcc     01 18 06 F6 | 	mov	arg04, #1
22bd0     9C EF BF FD | 	call	#_fatfs_cc_disk_write
22bd4     00 FA 0D F2 | 	cmp	result1, #0 wz
22bd8     01 26 06 A1 |  if_e	add	local05, #1
22bdc     C0 FF 9F AD |  if_e	jmp	#LR__3540
22be0                 | LR__3541
22be0                 | ' 	}
22be0                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
22be0     0A 1E 06 F1 | 	add	local01, #10
22be4     0F 25 E2 FA | 	rdword	local04, local01
22be8     12 27 0A F2 | 	cmp	local05, local04 wz
22bec     00 28 06 A6 |  if_e	mov	local06, #0
22bf0     01 28 06 56 |  if_ne	mov	local06, #1
22bf4     14 FB 01 F6 | 	mov	result1, local06
22bf8                 | LR__3542
22bf8     A7 F0 03 F6 | 	mov	ptra, fp
22bfc     B2 00 A0 FD | 	call	#popregs_
22c00                 | _fatfs_cc_dir_clear_ret
22c00     2D 00 64 FD | 	ret
22c04                 | 
22c04                 | _fatfs_cc_dir_sdi
22c04     06 4A 05 F6 | 	mov	COUNT_, #6
22c08     A8 00 A0 FD | 	call	#pushregs_
22c0c     09 1F 02 F6 | 	mov	local01, arg01
22c10     0A 21 02 F6 | 	mov	local02, arg02
22c14     0F 23 02 FB | 	rdlong	local03, local01
22c18     00 10 00 FF 
22c1c     00 20 16 F2 | 	cmp	local02, ##2097152 wc
22c20     1F 20 CE C7 |  if_b	test	local02, #31 wz
22c24                 | ' 		return FR_INT_ERR;
22c24     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
22c28     34 01 90 7D |  if_nc_or_nz	jmp	#LR__3556
22c2c     10 1E 06 F1 | 	add	local01, #16
22c30     0F 21 62 FC | 	wrlong	local02, local01
22c34     08 1E 86 F1 | 	sub	local01, #8
22c38     0F 25 0A FB | 	rdlong	local04, local01 wz
22c3c     08 1E 86 F1 | 	sub	local01, #8
22c40     11 27 C2 AA |  if_e	rdbyte	local05, local03
22c44     03 26 16 A2 |  if_e	cmp	local05, #3 wc
22c48     28 22 06 21 |  if_nc_and_z	add	local03, #40
22c4c     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
22c50     28 22 86 21 |  if_nc_and_z	sub	local03, #40
22c54     00 24 0E F2 | 	cmp	local04, #0 wz
22c58     3C 00 90 5D |  if_ne	jmp	#LR__3550
22c5c     10 27 02 F6 | 	mov	local05, local02
22c60     05 26 46 F0 | 	shr	local05, #5
22c64     08 22 06 F1 | 	add	local03, #8
22c68     11 15 E2 FA | 	rdword	arg02, local03
22c6c     08 22 86 F1 | 	sub	local03, #8
22c70     0A 27 12 F2 | 	cmp	local05, arg02 wc
22c74     02 FA 05 36 |  if_ae	mov	result1, #2
22c78     E4 00 90 3D |  if_ae	jmp	#LR__3556
22c7c     28 22 06 F1 | 	add	local03, #40
22c80     11 27 02 FB | 	rdlong	local05, local03
22c84     28 22 86 F1 | 	sub	local03, #40
22c88     18 1E 06 F1 | 	add	local01, #24
22c8c     0F 27 62 FC | 	wrlong	local05, local01
22c90     18 1E 86 F1 | 	sub	local01, #24
22c94     7C 00 90 FD | 	jmp	#LR__3555
22c98                 | LR__3550
22c98     0A 22 06 F1 | 	add	local03, #10
22c9c     11 29 E2 FA | 	rdword	local06, local03
22ca0     0A 22 86 F1 | 	sub	local03, #10
22ca4     09 28 66 F0 | 	shl	local06, #9
22ca8                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
22ca8                 | ' 		while (ofs >= csz) {
22ca8                 | LR__3551
22ca8     14 21 12 F2 | 	cmp	local02, local06 wc
22cac     4C 00 90 CD |  if_b	jmp	#LR__3554
22cb0     0F 13 02 F6 | 	mov	arg01, local01
22cb4     12 15 02 F6 | 	mov	arg02, local04
22cb8     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
22cbc     FD 24 02 F6 | 	mov	local04, result1
22cc0     FF FF 7F FF 
22cc4     FF 25 0E F2 | 	cmp	local04, ##-1 wz
22cc8     01 FA 05 A6 |  if_e	mov	result1, #1
22ccc     90 00 90 AD |  if_e	jmp	#LR__3556
22cd0     02 24 16 F2 | 	cmp	local04, #2 wc
22cd4     14 00 90 CD |  if_b	jmp	#LR__3552
22cd8     18 22 06 F1 | 	add	local03, #24
22cdc     11 27 02 FB | 	rdlong	local05, local03
22ce0     18 22 86 F1 | 	sub	local03, #24
22ce4     13 25 12 F2 | 	cmp	local04, local05 wc
22ce8     08 00 90 CD |  if_b	jmp	#LR__3553
22cec                 | LR__3552
22cec     02 FA 05 F6 | 	mov	result1, #2
22cf0     6C 00 90 FD | 	jmp	#LR__3556
22cf4                 | LR__3553
22cf4     14 21 82 F1 | 	sub	local02, local06
22cf8     AC FF 9F FD | 	jmp	#LR__3551
22cfc                 | LR__3554
22cfc     11 13 02 F6 | 	mov	arg01, local03
22d00     12 15 02 F6 | 	mov	arg02, local04
22d04     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
22d08     18 1E 06 F1 | 	add	local01, #24
22d0c     0F FB 61 FC | 	wrlong	result1, local01
22d10     18 1E 86 F1 | 	sub	local01, #24
22d14                 | LR__3555
22d14     14 1E 06 F1 | 	add	local01, #20
22d18     0F 25 62 FC | 	wrlong	local04, local01
22d1c     04 1E 06 F1 | 	add	local01, #4
22d20     0F 27 0A FB | 	rdlong	local05, local01 wz
22d24     18 1E 86 F1 | 	sub	local01, #24
22d28     02 FA 05 A6 |  if_e	mov	result1, #2
22d2c     30 00 90 AD |  if_e	jmp	#LR__3556
22d30     10 29 02 F6 | 	mov	local06, local02
22d34     09 28 46 F0 | 	shr	local06, #9
22d38     18 1E 06 F1 | 	add	local01, #24
22d3c     0F 27 02 FB | 	rdlong	local05, local01
22d40     14 27 02 F1 | 	add	local05, local06
22d44     0F 27 62 FC | 	wrlong	local05, local01
22d48     34 22 06 F1 | 	add	local03, #52
22d4c     FF 21 06 F5 | 	and	local02, #511
22d50     10 23 02 F1 | 	add	local03, local02
22d54     04 1E 06 F1 | 	add	local01, #4
22d58     0F 23 62 FC | 	wrlong	local03, local01
22d5c                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
22d5c                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
22d5c                 | ' 
22d5c                 | ' 	return FR_OK;
22d5c     00 FA 05 F6 | 	mov	result1, #0
22d60                 | LR__3556
22d60     A7 F0 03 F6 | 	mov	ptra, fp
22d64     B2 00 A0 FD | 	call	#popregs_
22d68                 | _fatfs_cc_dir_sdi_ret
22d68     2D 00 64 FD | 	ret
22d6c                 | 
22d6c                 | _fatfs_cc_dir_next
22d6c     05 4A 05 F6 | 	mov	COUNT_, #5
22d70     A8 00 A0 FD | 	call	#pushregs_
22d74     09 1F 02 F6 | 	mov	local01, arg01
22d78     0A 21 02 F6 | 	mov	local02, arg02
22d7c     0F 23 02 FB | 	rdlong	local03, local01
22d80     10 1E 06 F1 | 	add	local01, #16
22d84     0F 25 02 FB | 	rdlong	local04, local01
22d88     10 1E 86 F1 | 	sub	local01, #16
22d8c     20 24 06 F1 | 	add	local04, #32
22d90     00 10 00 FF 
22d94     00 24 16 F2 | 	cmp	local04, ##2097152 wc
22d98     18 1E 06 31 |  if_ae	add	local01, #24
22d9c     0F 01 68 3C |  if_ae	wrlong	#0, local01
22da0     18 1E 86 31 |  if_ae	sub	local01, #24
22da4     18 1E 06 F1 | 	add	local01, #24
22da8     0F 15 0A FB | 	rdlong	arg02, local01 wz
22dac     18 1E 86 F1 | 	sub	local01, #24
22db0     04 FA 05 A6 |  if_e	mov	result1, #4
22db4     64 01 90 AD |  if_e	jmp	#LR__3565
22db8     FF 25 CE F7 | 	test	local04, #511 wz
22dbc     3C 01 90 5D |  if_ne	jmp	#LR__3564
22dc0     18 1E 06 F1 | 	add	local01, #24
22dc4     0F 15 02 FB | 	rdlong	arg02, local01
22dc8     01 14 06 F1 | 	add	arg02, #1
22dcc     0F 15 62 FC | 	wrlong	arg02, local01
22dd0     04 1E 86 F1 | 	sub	local01, #4
22dd4     0F 15 0A FB | 	rdlong	arg02, local01 wz
22dd8     14 1E 86 F1 | 	sub	local01, #20
22ddc     2C 00 90 5D |  if_ne	jmp	#LR__3560
22de0     12 15 02 F6 | 	mov	arg02, local04
22de4     05 14 46 F0 | 	shr	arg02, #5
22de8     08 22 06 F1 | 	add	local03, #8
22dec     11 21 E2 FA | 	rdword	local02, local03
22df0     08 22 86 F1 | 	sub	local03, #8
22df4     10 15 12 F2 | 	cmp	arg02, local02 wc
22df8     18 1E 06 31 |  if_ae	add	local01, #24
22dfc     0F 01 68 3C |  if_ae	wrlong	#0, local01
22e00                 | ' 				dp->sect = 0; return FR_NO_FILE;
22e00     04 FA 05 36 |  if_ae	mov	result1, #4
22e04     14 01 90 3D |  if_ae	jmp	#LR__3565
22e08     F0 00 90 FD | 	jmp	#LR__3563
22e0c                 | LR__3560
22e0c     12 13 02 F6 | 	mov	arg01, local04
22e10     09 12 46 F0 | 	shr	arg01, #9
22e14     0A 22 06 F1 | 	add	local03, #10
22e18     11 15 E2 FA | 	rdword	arg02, local03
22e1c     0A 22 86 F1 | 	sub	local03, #10
22e20     01 14 86 F1 | 	sub	arg02, #1
22e24     0A 13 CA F7 | 	test	arg01, arg02 wz
22e28     D0 00 90 5D |  if_ne	jmp	#LR__3562
22e2c     0F 13 02 F6 | 	mov	arg01, local01
22e30     14 1E 06 F1 | 	add	local01, #20
22e34     0F 15 02 FB | 	rdlong	arg02, local01
22e38     14 1E 86 F1 | 	sub	local01, #20
22e3c     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
22e40     FD 26 02 F6 | 	mov	local05, result1
22e44     02 26 16 F2 | 	cmp	local05, #2 wc
22e48     02 FA 05 C6 |  if_b	mov	result1, #2
22e4c     CC 00 90 CD |  if_b	jmp	#LR__3565
22e50     FF FF 7F FF 
22e54     FF 27 0E F2 | 	cmp	local05, ##-1 wz
22e58     01 FA 05 A6 |  if_e	mov	result1, #1
22e5c     BC 00 90 AD |  if_e	jmp	#LR__3565
22e60     18 22 06 F1 | 	add	local03, #24
22e64     11 15 02 FB | 	rdlong	arg02, local03
22e68     18 22 86 F1 | 	sub	local03, #24
22e6c     0A 27 12 F2 | 	cmp	local05, arg02 wc
22e70     68 00 90 CD |  if_b	jmp	#LR__3561
22e74     00 20 0E F2 | 	cmp	local02, #0 wz
22e78     18 1E 06 A1 |  if_e	add	local01, #24
22e7c     0F 01 68 AC |  if_e	wrlong	#0, local01
22e80                 | ' 						dp->sect = 0; return FR_NO_FILE;
22e80     04 FA 05 A6 |  if_e	mov	result1, #4
22e84     94 00 90 AD |  if_e	jmp	#LR__3565
22e88     0F 13 02 F6 | 	mov	arg01, local01
22e8c     14 1E 06 F1 | 	add	local01, #20
22e90     0F 15 02 FB | 	rdlong	arg02, local01
22e94     14 1E 86 F1 | 	sub	local01, #20
22e98     84 FA BF FD | 	call	#_fatfs_cc_create_chain
22e9c     FD 26 0A F6 | 	mov	local05, result1 wz
22ea0     07 FA 05 A6 |  if_e	mov	result1, #7
22ea4     74 00 90 AD |  if_e	jmp	#LR__3565
22ea8     01 26 0E F2 | 	cmp	local05, #1 wz
22eac     02 FA 05 A6 |  if_e	mov	result1, #2
22eb0     68 00 90 AD |  if_e	jmp	#LR__3565
22eb4     FF FF 7F FF 
22eb8     FF 27 0E F2 | 	cmp	local05, ##-1 wz
22ebc     01 FA 05 A6 |  if_e	mov	result1, #1
22ec0     58 00 90 AD |  if_e	jmp	#LR__3565
22ec4     13 15 02 F6 | 	mov	arg02, local05
22ec8     11 13 02 F6 | 	mov	arg01, local03
22ecc     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
22ed0     00 FA 0D F2 | 	cmp	result1, #0 wz
22ed4     01 FA 05 56 |  if_ne	mov	result1, #1
22ed8     40 00 90 5D |  if_ne	jmp	#LR__3565
22edc                 | LR__3561
22edc     14 1E 06 F1 | 	add	local01, #20
22ee0     0F 27 62 FC | 	wrlong	local05, local01
22ee4     11 13 02 F6 | 	mov	arg01, local03
22ee8     13 15 02 F6 | 	mov	arg02, local05
22eec     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
22ef0     04 1E 06 F1 | 	add	local01, #4
22ef4     0F FB 61 FC | 	wrlong	result1, local01
22ef8     18 1E 86 F1 | 	sub	local01, #24
22efc                 | LR__3562
22efc                 | LR__3563
22efc                 | LR__3564
22efc     10 1E 06 F1 | 	add	local01, #16
22f00     0F 25 62 FC | 	wrlong	local04, local01
22f04     34 22 06 F1 | 	add	local03, #52
22f08     FF 25 06 F5 | 	and	local04, #511
22f0c     12 23 02 F1 | 	add	local03, local04
22f10     0C 1E 06 F1 | 	add	local01, #12
22f14     0F 23 62 FC | 	wrlong	local03, local01
22f18                 | ' #line 1771 "ff.c"
22f18                 | ' 				}
22f18                 | ' 				dp->clust = clst;
22f18                 | ' 				dp->sect = clst2sect(fs, clst);
22f18                 | ' 			}
22f18                 | ' 		}
22f18                 | ' 	}
22f18                 | ' 	dp->dptr = ofs;
22f18                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
22f18                 | ' 
22f18                 | ' 	return FR_OK;
22f18     00 FA 05 F6 | 	mov	result1, #0
22f1c                 | LR__3565
22f1c     A7 F0 03 F6 | 	mov	ptra, fp
22f20     B2 00 A0 FD | 	call	#popregs_
22f24                 | _fatfs_cc_dir_next_ret
22f24     2D 00 64 FD | 	ret
22f28                 | 
22f28                 | _fatfs_cc_dir_alloc
22f28     08 4A 05 F6 | 	mov	COUNT_, #8
22f2c     A8 00 A0 FD | 	call	#pushregs_
22f30     09 1F 02 F6 | 	mov	local01, arg01
22f34     0A 21 02 F6 | 	mov	local02, arg02
22f38     0F 23 02 FB | 	rdlong	local03, local01
22f3c     0F 13 02 F6 | 	mov	arg01, local01
22f40     00 14 06 F6 | 	mov	arg02, #0
22f44     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
22f48     FD 24 0A F6 | 	mov	local04, result1 wz
22f4c     70 00 90 5D |  if_ne	jmp	#LR__3574
22f50     00 26 06 F6 | 	mov	local05, #0
22f54                 | ' 		n = 0;
22f54                 | ' 		do {
22f54                 | LR__3570
22f54     18 1E 06 F1 | 	add	local01, #24
22f58     0F 15 02 FB | 	rdlong	arg02, local01
22f5c     18 1E 86 F1 | 	sub	local01, #24
22f60     11 13 02 F6 | 	mov	arg01, local03
22f64     38 F3 BF FD | 	call	#_fatfs_cc_move_window
22f68     FD 24 0A F6 | 	mov	local04, result1 wz
22f6c     50 00 90 5D |  if_ne	jmp	#LR__3573
22f70     1C 1E 06 F1 | 	add	local01, #28
22f74     0F 29 02 FB | 	rdlong	local06, local01
22f78     1C 1E 86 F1 | 	sub	local01, #28
22f7c     14 29 C2 FA | 	rdbyte	local06, local06
22f80     E5 28 0E F2 | 	cmp	local06, #229 wz
22f84     1C 1E 06 51 |  if_ne	add	local01, #28
22f88     0F 2B 02 5B |  if_ne	rdlong	local07, local01
22f8c     1C 1E 86 51 |  if_ne	sub	local01, #28
22f90     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
22f94     10 00 90 5D |  if_ne	jmp	#LR__3571
22f98     01 26 06 F1 | 	add	local05, #1
22f9c     10 27 0A F2 | 	cmp	local05, local02 wz
22fa0     1C 00 90 AD |  if_e	jmp	#LR__3573
22fa4     04 00 90 FD | 	jmp	#LR__3572
22fa8                 | LR__3571
22fa8     00 26 06 F6 | 	mov	local05, #0
22fac                 | LR__3572
22fac     0F 13 02 F6 | 	mov	arg01, local01
22fb0     01 14 06 F6 | 	mov	arg02, #1
22fb4     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
22fb8     FD 24 0A F6 | 	mov	local04, result1 wz
22fbc     94 FF 9F AD |  if_e	jmp	#LR__3570
22fc0                 | LR__3573
22fc0                 | LR__3574
22fc0     04 24 0E F2 | 	cmp	local04, #4 wz
22fc4     07 24 06 A6 |  if_e	mov	local04, #7
22fc8                 | ' 	return res;
22fc8     12 FB 01 F6 | 	mov	result1, local04
22fcc     A7 F0 03 F6 | 	mov	ptra, fp
22fd0     B2 00 A0 FD | 	call	#popregs_
22fd4                 | _fatfs_cc_dir_alloc_ret
22fd4     2D 00 64 FD | 	ret
22fd8                 | 
22fd8                 | _fatfs_cc_ld_clust
22fd8     09 01 02 F6 | 	mov	_var01, arg01
22fdc     0A 13 02 F6 | 	mov	arg01, arg02
22fe0     1A 12 06 F1 | 	add	arg01, #26
22fe4                 | ' {
22fe4                 | ' 
22fe4                 | ' 	return *((WORD*)ptr);
22fe4     09 FB E1 FA | 	rdword	result1, arg01
22fe8     FD 12 32 F9 | 	getword	arg01, result1, #0
22fec     00 01 C2 FA | 	rdbyte	_var01, _var01
22ff0     03 00 0E F2 | 	cmp	_var01, #3 wz
22ff4     14 14 06 A1 |  if_e	add	arg02, #20
22ff8                 | ' {
22ff8                 | ' 
22ff8                 | ' 	return *((WORD*)ptr);
22ff8     0A FB E1 AA |  if_e	rdword	result1, arg02
22ffc     10 FA 65 A0 |  if_e	shl	result1, #16
23000     FD 12 42 A5 |  if_e	or	arg01, result1
23004                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
23004                 | ' 	}
23004                 | ' 
23004                 | ' 	return cl;
23004     09 FB 01 F6 | 	mov	result1, arg01
23008                 | _fatfs_cc_ld_clust_ret
23008     2D 00 64 FD | 	ret
2300c                 | 
2300c                 | _fatfs_cc_st_clust
2300c     09 01 02 F6 | 	mov	_var01, arg01
23010     0A 13 02 F6 | 	mov	arg01, arg02
23014     1A 12 06 F1 | 	add	arg01, #26
23018     09 17 52 FC | 	wrword	arg03, arg01
2301c     00 01 C2 FA | 	rdbyte	_var01, _var01
23020     03 00 0E F2 | 	cmp	_var01, #3 wz
23024     14 14 06 A1 |  if_e	add	arg02, #20
23028     10 16 46 A0 |  if_e	shr	arg03, #16
2302c     0A 17 52 AC |  if_e	wrword	arg03, arg02
23030                 | _fatfs_cc_st_clust_ret
23030     2D 00 64 FD | 	ret
23034                 | 
23034                 | _fatfs_cc_cmp_lfn
23034     07 4A 05 F6 | 	mov	COUNT_, #7
23038     A8 00 A0 FD | 	call	#pushregs_
2303c     09 1F 02 F6 | 	mov	local01, arg01
23040     0A 13 02 F6 | 	mov	arg01, arg02
23044     1A 12 06 F1 | 	add	arg01, #26
23048                 | ' {
23048                 | ' 
23048                 | ' 	return *((WORD*)ptr);
23048     09 FB E9 FA | 	rdword	result1, arg01 wz
2304c     00 FA 05 56 |  if_ne	mov	result1, #0
23050     E0 00 90 5D |  if_ne	jmp	#LR__3586
23054     0A 21 C2 FA | 	rdbyte	local02, arg02
23058     3F 20 06 F5 | 	and	local02, #63
2305c     01 20 86 F1 | 	sub	local02, #1
23060     0D 20 06 FD | 	qmul	local02, #13
23064                 | ' 
23064                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
23064                 | ' 
23064                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
23064     01 22 06 F6 | 	mov	local03, #1
23068     00 24 06 F6 | 	mov	local04, #0
2306c     18 26 62 FD | 	getqx	local05
23070                 | LR__3580
23070     0D 24 16 F2 | 	cmp	local04, #13 wc
23074     9C 00 90 3D |  if_ae	jmp	#LR__3585
23078     0A 13 02 F6 | 	mov	arg01, arg02
2307c     12 21 02 F6 | 	mov	local02, local04
23080     01 00 00 FF 
23084     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
23088     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2308c     10 21 C2 FA | 	rdbyte	local02, local02
23090     01 20 06 FA | 	mul	local02, #1
23094     10 13 02 F1 | 	add	arg01, local02
23098     01 00 00 FF 
2309c     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
230a0                 | ' {
230a0                 | ' 
230a0                 | ' 	return *((WORD*)ptr);
230a0     09 FB E1 FA | 	rdword	result1, arg01
230a4     FD 28 02 F6 | 	mov	local06, result1
230a8     11 21 02 F6 | 	mov	local02, local03
230ac     0F 20 4E F7 | 	zerox	local02, #15 wz
230b0     44 00 90 AD |  if_e	jmp	#LR__3583
230b4     00 27 16 F2 | 	cmp	local05, #256 wc
230b8     2C 00 90 3D |  if_ae	jmp	#LR__3581
230bc     14 13 32 F9 | 	getword	arg01, local06, #0
230c0     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
230c4     FD 20 02 F6 | 	mov	local02, result1
230c8     13 23 02 F6 | 	mov	local03, local05
230cc     01 22 66 F0 | 	shl	local03, #1
230d0     0F 23 02 F1 | 	add	local03, local01
230d4     11 13 E2 FA | 	rdword	arg01, local03
230d8     01 26 06 F1 | 	add	local05, #1
230dc     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
230e0     FD 20 0A F2 | 	cmp	local02, result1 wz
230e4     08 00 90 AD |  if_e	jmp	#LR__3582
230e8                 | LR__3581
230e8                 | ' 				return 0;
230e8     00 FA 05 F6 | 	mov	result1, #0
230ec     44 00 90 FD | 	jmp	#LR__3586
230f0                 | LR__3582
230f0     14 23 02 F6 | 	mov	local03, local06
230f4     14 00 90 FD | 	jmp	#LR__3584
230f8                 | LR__3583
230f8     14 29 32 F9 | 	getword	local06, local06, #0
230fc     7F 00 00 FF 
23100     FF 29 0E F2 | 	cmp	local06, ##65535 wz
23104     00 FA 05 56 |  if_ne	mov	result1, #0
23108     28 00 90 5D |  if_ne	jmp	#LR__3586
2310c                 | LR__3584
2310c     01 24 06 F1 | 	add	local04, #1
23110     5C FF 9F FD | 	jmp	#LR__3580
23114                 | LR__3585
23114     0A 21 C2 FA | 	rdbyte	local02, arg02
23118     40 20 CE F7 | 	test	local02, #64 wz
2311c     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
23120     01 26 66 50 |  if_ne	shl	local05, #1
23124     0F 27 02 51 |  if_ne	add	local05, local01
23128     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
2312c     00 FA 05 56 |  if_ne	mov	result1, #0
23130                 | ' 
23130                 | ' 	return 1;
23130     01 FA 05 A6 |  if_e	mov	result1, #1
23134                 | LR__3586
23134     A7 F0 03 F6 | 	mov	ptra, fp
23138     B2 00 A0 FD | 	call	#popregs_
2313c                 | _fatfs_cc_cmp_lfn_ret
2313c     2D 00 64 FD | 	ret
23140                 | 
23140                 | _fatfs_cc_pick_lfn
23140     09 01 02 F6 | 	mov	_var01, arg01
23144     0A 13 02 F6 | 	mov	arg01, arg02
23148     1A 12 06 F1 | 	add	arg01, #26
2314c                 | ' {
2314c                 | ' 
2314c                 | ' 	return *((WORD*)ptr);
2314c     09 FB E9 FA | 	rdword	result1, arg01 wz
23150     00 FA 05 56 |  if_ne	mov	result1, #0
23154     D4 00 90 5D |  if_ne	jmp	#LR__3595
23158     0A 03 C2 FA | 	rdbyte	_var02, arg02
2315c     40 02 26 F5 | 	andn	_var02, #64
23160     01 02 86 F1 | 	sub	_var02, #1
23164     0D 02 06 FD | 	qmul	_var02, #13
23168                 | ' 
23168                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
23168                 | ' 
23168                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
23168     01 04 06 F6 | 	mov	_var03, #1
2316c     00 06 06 F6 | 	mov	_var04, #0
23170     18 08 62 FD | 	getqx	_var05
23174                 | LR__3590
23174     0D 06 16 F2 | 	cmp	_var04, #13 wc
23178     80 00 90 3D |  if_ae	jmp	#LR__3593
2317c     0A 13 02 F6 | 	mov	arg01, arg02
23180     03 03 02 F6 | 	mov	_var02, _var04
23184     01 00 00 FF 
23188     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2318c     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
23190     01 03 C2 FA | 	rdbyte	_var02, _var02
23194     01 02 06 FA | 	mul	_var02, #1
23198     01 13 02 F1 | 	add	arg01, _var02
2319c     01 00 00 FF 
231a0     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
231a4                 | ' {
231a4                 | ' 
231a4                 | ' 	return *((WORD*)ptr);
231a4     09 FB E1 FA | 	rdword	result1, arg01
231a8     FD 0A 02 F6 | 	mov	_var06, result1
231ac     02 03 02 F6 | 	mov	_var02, _var03
231b0     0F 02 4E F7 | 	zerox	_var02, #15 wz
231b4     28 00 90 AD |  if_e	jmp	#LR__3591
231b8     00 09 16 F2 | 	cmp	_var05, #256 wc
231bc     00 FA 05 36 |  if_ae	mov	result1, #0
231c0     68 00 90 3D |  if_ae	jmp	#LR__3595
231c4     04 03 02 F6 | 	mov	_var02, _var05
231c8     01 02 66 F0 | 	shl	_var02, #1
231cc     00 03 02 F1 | 	add	_var02, _var01
231d0     05 05 02 F6 | 	mov	_var03, _var06
231d4     01 05 52 FC | 	wrword	_var03, _var02
231d8     01 08 06 F1 | 	add	_var05, #1
231dc     14 00 90 FD | 	jmp	#LR__3592
231e0                 | LR__3591
231e0     05 0B 32 F9 | 	getword	_var06, _var06, #0
231e4     7F 00 00 FF 
231e8     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
231ec     00 FA 05 56 |  if_ne	mov	result1, #0
231f0     38 00 90 5D |  if_ne	jmp	#LR__3595
231f4                 | LR__3592
231f4     01 06 06 F1 | 	add	_var04, #1
231f8     78 FF 9F FD | 	jmp	#LR__3590
231fc                 | LR__3593
231fc     0A 03 C2 FA | 	rdbyte	_var02, arg02
23200     40 02 CE F7 | 	test	_var02, #64 wz
23204     02 0D 02 56 |  if_ne	mov	_var07, _var03
23208     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
2320c     18 00 90 AD |  if_e	jmp	#LR__3594
23210     00 09 16 F2 | 	cmp	_var05, #256 wc
23214     00 FA 05 36 |  if_ae	mov	result1, #0
23218     10 00 90 3D |  if_ae	jmp	#LR__3595
2321c     01 08 66 F0 | 	shl	_var05, #1
23220     00 09 02 F1 | 	add	_var05, _var01
23224     04 01 58 FC | 	wrword	#0, _var05
23228                 | LR__3594
23228                 | ' 		lfnbuf[i] = 0;
23228                 | ' 	}
23228                 | ' 
23228                 | ' 	return 1;
23228     01 FA 05 F6 | 	mov	result1, #1
2322c                 | LR__3595
2322c                 | _fatfs_cc_pick_lfn_ret
2322c     2D 00 64 FD | 	ret
23230                 | 
23230                 | _fatfs_cc_put_lfn
23230     0D 14 06 F1 | 	add	arg02, #13
23234     0A 19 42 FC | 	wrbyte	arg04, arg02
23238     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
2323c     01 18 86 F1 | 	sub	arg04, #1
23240     0D 18 06 FD | 	qmul	arg04, #13
23244     09 01 02 F6 | 	mov	_var01, arg01
23248     02 14 86 F1 | 	sub	arg02, #2
2324c     0A 1F 48 FC | 	wrbyte	#15, arg02
23250     01 14 06 F1 | 	add	arg02, #1
23254     0A 01 48 FC | 	wrbyte	#0, arg02
23258     0C 14 86 F1 | 	sub	arg02, #12
2325c     0A 13 02 F6 | 	mov	arg01, arg02
23260     1A 12 06 F1 | 	add	arg01, #26
23264     09 01 58 FC | 	wrword	#0, arg01
23268     00 02 06 F6 | 	mov	_var02, #0
2326c     00 04 06 F6 | 	mov	_var03, #0
23270                 | ' 	BYTE* dir,
23270                 | ' 	BYTE ord,
23270                 | ' 	BYTE sum
23270                 | ' )
23270                 | ' {
23270                 | ' 	UINT i, s;
23270                 | ' 	WCHAR wc;
23270                 | ' 
23270                 | ' 
23270                 | ' 	dir[ 13 ] = sum;
23270                 | ' 	dir[ 11 ] =  0x0F ;
23270                 | ' 	dir[ 12 ] = 0;
23270                 | ' 	st_word(dir +  26 , 0);
23270                 | ' 
23270                 | ' 	i = (ord - 1) * 13;
23270                 | ' 	s = wc = 0;
23270                 | ' 	do {
23270     01 00 00 FF 
23274     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
23278     18 06 62 FD | 	getqx	_var04
2327c     97 2A 48 FB | 	callpa	#(@LR__3601-@LR__3600)>>2,fcache_load_ptr_
23280                 | LR__3600
23280     01 19 32 F9 | 	getword	arg04, _var02, #0
23284     7F 00 00 FF 
23288     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
2328c     03 13 02 56 |  if_ne	mov	arg01, _var04
23290     01 06 06 51 |  if_ne	add	_var04, #1
23294     01 12 66 50 |  if_ne	shl	arg01, #1
23298     00 13 02 51 |  if_ne	add	arg01, _var01
2329c     09 03 E2 5A |  if_ne	rdword	_var02, arg01
232a0     0A 13 02 F6 | 	mov	arg01, arg02
232a4     02 19 02 F6 | 	mov	arg04, _var03
232a8     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
232ac     0C 19 C2 FA | 	rdbyte	arg04, arg04
232b0     01 18 06 FA | 	mul	arg04, #1
232b4     0C 13 02 F1 | 	add	arg01, arg04
232b8     09 03 52 FC | 	wrword	_var02, arg01
232bc     01 19 02 F6 | 	mov	arg04, _var02
232c0     0F 18 4E F7 | 	zerox	arg04, #15 wz
232c4     0F 02 CE A9 |  if_e	bmask	_var02, #15
232c8     01 04 06 F1 | 	add	_var03, #1
232cc     0D 04 16 F2 | 	cmp	_var03, #13 wc
232d0     AC FF 9F CD |  if_b	jmp	#LR__3600
232d4                 | LR__3601
232d4     01 00 00 FF 
232d8     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
232dc     01 03 32 F9 | 	getword	_var02, _var02, #0
232e0     7F 00 00 FF 
232e4     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
232e8     01 06 66 50 |  if_ne	shl	_var04, #1
232ec     00 07 02 51 |  if_ne	add	_var04, _var01
232f0     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
232f4     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
232f8     40 16 46 A5 |  if_e	or	arg03, #64
232fc     0A 17 42 FC | 	wrbyte	arg03, arg02
23300                 | _fatfs_cc_put_lfn_ret
23300     2D 00 64 FD | 	ret
23304                 | 
23304                 | _fatfs_cc_gen_numname
23304     08 4A 05 F6 | 	mov	COUNT_, #8
23308     A8 00 A0 FD | 	call	#pushregs_
2330c     2C F0 07 F1 | 	add	ptra, #44
23310     09 1F 02 F6 | 	mov	local01, arg01
23314     0A 21 02 F6 | 	mov	local02, arg02
23318     0B 23 02 F6 | 	mov	local03, arg03
2331c     0C 25 02 F6 | 	mov	local04, arg04
23320     0F 13 02 F6 | 	mov	arg01, local01
23324     10 15 02 F6 | 	mov	arg02, local02
23328     0B 16 06 F6 | 	mov	arg03, #11
2332c     58 78 BF FD | 	call	#__system____builtin_memmove
23330     06 24 16 F2 | 	cmp	local04, #6 wc
23334     48 00 90 CD |  if_b	jmp	#LR__3615
23338     12 27 02 F6 | 	mov	local05, local04
2333c     97 1E 48 FB | 	callpa	#(@LR__3613-@LR__3610)>>2,fcache_load_ptr_
23340                 | ' 		sreg = seq;
23340                 | ' 		while (*lfn) {
23340                 | LR__3610
23340     11 29 EA FA | 	rdword	local06, local03 wz
23344     34 00 90 AD |  if_e	jmp	#LR__3614
23348     11 2B E2 FA | 	rdword	local07, local03
2334c                 | ' 			wc = *lfn++;
2334c                 | ' 			for (i = 0; i < 16; i++) {
2334c     02 22 06 F1 | 	add	local03, #2
23350     10 12 DC FC | 	rep	@LR__3612, #16
23354                 | LR__3611
23354     01 26 66 F0 | 	shl	local05, #1
23358     15 29 32 F9 | 	getword	local06, local07, #0
2335c     01 28 06 F5 | 	and	local06, #1
23360     14 27 02 F1 | 	add	local05, local06
23364     15 2B 32 F9 | 	getword	local07, local07, #0
23368     01 2A 46 F0 | 	shr	local07, #1
2336c     10 26 2E F4 | 	testbn	local05, #16 wz
23370     88 00 00 5F 
23374     21 26 66 55 |  if_ne	xor	local05, ##69665
23378                 | LR__3612
23378     C4 FF 9F FD | 	jmp	#LR__3610
2337c                 | LR__3613
2337c                 | LR__3614
2337c     13 25 02 F6 | 	mov	local04, local05
23380                 | LR__3615
23380     07 2A 06 F6 | 	mov	local07, #7
23384                 | ' 			}
23384                 | ' 		}
23384                 | ' 		seq = (UINT)sreg;
23384                 | ' 	}
23384                 | ' 
23384                 | ' 
23384                 | ' 	i = 7;
23384                 | ' 	do {
23384     10 4E 05 F1 | 	add	fp, #16
23388     97 1A 48 FB | 	callpa	#(@LR__3617-@LR__3616)>>2,fcache_load_ptr_
2338c                 | LR__3616
2338c     12 27 42 F8 | 	getnib	local05, local04, #0
23390     30 26 06 F1 | 	add	local05, #48
23394     04 24 46 F0 | 	shr	local04, #4
23398     13 29 E2 F8 | 	getbyte	local06, local05, #0
2339c     3A 28 16 F2 | 	cmp	local06, #58 wc
233a0     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
233a4     07 26 06 31 |  if_ae	add	local05, #7
233a8     15 29 02 F6 | 	mov	local06, local07
233ac     01 2A 8E F1 | 	sub	local07, #1 wz
233b0     A7 28 02 F1 | 	add	local06, fp
233b4     14 27 42 FC | 	wrbyte	local05, local06
233b8     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
233bc     CC FF 9F 5D |  if_ne	jmp	#LR__3616
233c0                 | LR__3617
233c0     15 29 02 F6 | 	mov	local06, local07
233c4     A7 28 02 F1 | 	add	local06, fp
233c8     14 FD 48 FC | 	wrbyte	#126, local06
233cc                 | ' 	ns[i] = '~';
233cc                 | ' 
233cc                 | ' 
233cc                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
233cc     00 26 06 F6 | 	mov	local05, #0
233d0     10 4E 85 F1 | 	sub	fp, #16
233d4     97 2A 48 FB | 	callpa	#(@LR__3620-@LR__3618)>>2,fcache_load_ptr_
233d8                 | LR__3618
233d8     15 27 12 F2 | 	cmp	local05, local07 wc
233dc     4C 00 90 3D |  if_ae	jmp	#LR__3621
233e0     13 29 02 F6 | 	mov	local06, local05
233e4     0F 29 02 F1 | 	add	local06, local01
233e8     14 29 C2 FA | 	rdbyte	local06, local06
233ec     20 28 0E F2 | 	cmp	local06, #32 wz
233f0     38 00 90 AD |  if_e	jmp	#LR__3621
233f4     13 13 02 F6 | 	mov	arg01, local05
233f8     0F 13 02 F1 | 	add	arg01, local01
233fc     09 13 CA FA | 	rdbyte	arg01, arg01 wz
23400     00 FA 05 56 |  if_ne	mov	result1, #0
23404                 | ' 
23404                 | ' 	return 0;
23404     00 FA 05 A6 |  if_e	mov	result1, #0
23408     00 FA 0D F2 | 	cmp	result1, #0 wz
2340c     14 00 90 AD |  if_e	jmp	#LR__3619
23410     15 29 02 F6 | 	mov	local06, local07
23414     01 28 86 F1 | 	sub	local06, #1
23418     14 27 0A F2 | 	cmp	local05, local06 wz
2341c     0C 00 90 AD |  if_e	jmp	#LR__3621
23420     01 26 06 F1 | 	add	local05, #1
23424                 | LR__3619
23424     01 26 06 F1 | 	add	local05, #1
23428     AC FF 9F FD | 	jmp	#LR__3618
2342c                 | LR__3620
2342c                 | LR__3621
2342c     97 20 48 FB | 	callpa	#(@LR__3625-@LR__3622)>>2,fcache_load_ptr_
23430                 | ' 			j++;
23430                 | ' 		}
23430                 | ' 	}
23430                 | ' 	do {
23430                 | LR__3622
23430     13 29 02 F6 | 	mov	local06, local05
23434     0F 29 02 F1 | 	add	local06, local01
23438     08 2A 16 F2 | 	cmp	local07, #8 wc
2343c     01 26 06 F1 | 	add	local05, #1
23440     1C 00 90 3D |  if_ae	jmp	#LR__3623
23444     15 25 02 F6 | 	mov	local04, local07
23448     10 4E 05 F1 | 	add	fp, #16
2344c     A7 24 02 F1 | 	add	local04, fp
23450     12 2D C2 FA | 	rdbyte	local08, local04
23454     01 2A 06 F1 | 	add	local07, #1
23458     10 4E 85 F1 | 	sub	fp, #16
2345c     04 00 90 FD | 	jmp	#LR__3624
23460                 | LR__3623
23460     20 2C 06 F6 | 	mov	local08, #32
23464                 | LR__3624
23464     14 2D 42 FC | 	wrbyte	local08, local06
23468     08 26 16 F2 | 	cmp	local05, #8 wc
2346c     C0 FF 9F CD |  if_b	jmp	#LR__3622
23470                 | LR__3625
23470     A7 F0 03 F6 | 	mov	ptra, fp
23474     B2 00 A0 FD | 	call	#popregs_
23478                 | _fatfs_cc_gen_numname_ret
23478     2D 00 64 FD | 	ret
2347c                 | 
2347c                 | _fatfs_cc_sum_sfn
2347c     00 00 06 F6 | 	mov	_var01, #0
23480                 | ' )
23480                 | ' {
23480                 | ' 	BYTE sum = 0;
23480                 | ' 	UINT n = 11;
23480                 | ' 
23480                 | ' 	do {
23480     97 12 48 FB | 	callpa	#(@LR__3632-@LR__3630)>>2,fcache_load_ptr_
23484                 | LR__3630
23484     0B 10 DC FC | 	rep	@LR__3633, #11
23488                 | LR__3631
23488     00 FB E1 F8 | 	getbyte	result1, _var01, #0
2348c     01 FA 45 F0 | 	shr	result1, #1
23490     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
23494     07 00 66 F0 | 	shl	_var01, #7
23498     00 FB 01 F1 | 	add	result1, _var01
2349c     09 01 C2 FA | 	rdbyte	_var01, arg01
234a0     FD 00 02 F1 | 	add	_var01, result1
234a4     01 12 06 F1 | 	add	arg01, #1
234a8                 | LR__3632
234a8                 | LR__3633
234a8                 | ' 	return sum;
234a8     00 FB 01 F6 | 	mov	result1, _var01
234ac                 | _fatfs_cc_sum_sfn_ret
234ac     2D 00 64 FD | 	ret
234b0                 | 
234b0                 | _fatfs_cc_dir_read
234b0     0C 4A 05 F6 | 	mov	COUNT_, #12
234b4     A8 00 A0 FD | 	call	#pushregs_
234b8     09 1F 02 F6 | 	mov	local01, arg01
234bc     0A 21 02 F6 | 	mov	local02, arg02
234c0     04 22 06 F6 | 	mov	local03, #4
234c4     0F 25 02 FB | 	rdlong	local04, local01
234c8     FF 26 06 F6 | 	mov	local05, #255
234cc     FF 28 06 F6 | 	mov	local06, #255
234d0                 | ' )
234d0                 | ' {
234d0                 | ' 	FRESULT res = FR_NO_FILE;
234d0                 | ' 	FATFS *fs = dp->obj.fs;
234d0                 | ' 	BYTE attr, b;
234d0                 | ' 
234d0                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
234d0                 | ' 
234d0                 | ' 
234d0                 | ' 	while (dp->sect) {
234d0                 | LR__3640
234d0     18 1E 06 F1 | 	add	local01, #24
234d4     0F FB 09 FB | 	rdlong	result1, local01 wz
234d8     18 1E 86 F1 | 	sub	local01, #24
234dc     AC 01 90 AD |  if_e	jmp	#LR__3650
234e0     18 1E 06 F1 | 	add	local01, #24
234e4     0F 15 02 FB | 	rdlong	arg02, local01
234e8     18 1E 86 F1 | 	sub	local01, #24
234ec     12 13 02 F6 | 	mov	arg01, local04
234f0     AC ED BF FD | 	call	#_fatfs_cc_move_window
234f4     FD 22 0A F6 | 	mov	local03, result1 wz
234f8     90 01 90 5D |  if_ne	jmp	#LR__3650
234fc     1C 1E 06 F1 | 	add	local01, #28
23500     0F FB 01 FB | 	rdlong	result1, local01
23504     1C 1E 86 F1 | 	sub	local01, #28
23508     FD 2A C2 FA | 	rdbyte	local07, result1
2350c     15 FB 01 F6 | 	mov	result1, local07
23510     07 FA 4D F7 | 	zerox	result1, #7 wz
23514     04 22 06 A6 |  if_e	mov	local03, #4
23518                 | ' 			res = FR_NO_FILE; break;
23518     70 01 90 AD |  if_e	jmp	#LR__3650
2351c     1C 1E 06 F1 | 	add	local01, #28
23520     0F 2D 02 FB | 	rdlong	local08, local01
23524     0B 2C 06 F1 | 	add	local08, #11
23528     16 2F C2 FA | 	rdbyte	local09, local08
2352c     3F 2E 06 F5 | 	and	local09, #63
23530     16 1E 86 F1 | 	sub	local01, #22
23534     0F 2F 42 FC | 	wrbyte	local09, local01
23538     06 1E 86 F1 | 	sub	local01, #6
2353c     15 FB E1 F8 | 	getbyte	result1, local07, #0
23540     E5 FA 0D F2 | 	cmp	result1, #229 wz
23544     15 2D 02 56 |  if_ne	mov	local08, local07
23548     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
2354c     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
23550     1C 00 90 AD |  if_e	jmp	#LR__3641
23554     00 30 06 F6 | 	mov	local10, #0
23558     17 2D E2 F8 | 	getbyte	local08, local09, #0
2355c     20 2C 26 F5 | 	andn	local08, #32
23560     08 2C 0E F2 | 	cmp	local08, #8 wz
23564     01 30 06 A6 |  if_e	mov	local10, #1
23568     10 31 0A F2 | 	cmp	local10, local02 wz
2356c     08 00 90 AD |  if_e	jmp	#LR__3642
23570                 | LR__3641
23570     FF 26 06 F6 | 	mov	local05, #255
23574     00 01 90 FD | 	jmp	#LR__3649
23578                 | LR__3642
23578     17 2F E2 F8 | 	getbyte	local09, local09, #0
2357c     0F 2E 0E F2 | 	cmp	local09, #15 wz
23580     B4 00 90 5D |  if_ne	jmp	#LR__3646
23584     15 33 E2 F8 | 	getbyte	local11, local07, #0
23588     40 32 CE F7 | 	test	local11, #64 wz
2358c     30 00 90 AD |  if_e	jmp	#LR__3643
23590     1C 1E 06 F1 | 	add	local01, #28
23594     0F 33 02 FB | 	rdlong	local11, local01
23598     0D 32 06 F1 | 	add	local11, #13
2359c     19 29 C2 FA | 	rdbyte	local06, local11
235a0     15 2B E2 F8 | 	getbyte	local07, local07, #0
235a4     BF 2A 06 F5 | 	and	local07, #191
235a8     15 27 02 F6 | 	mov	local05, local07
235ac     0C 1E 86 F1 | 	sub	local01, #12
235b0     0F 33 02 FB | 	rdlong	local11, local01
235b4     1C 1E 06 F1 | 	add	local01, #28
235b8     0F 33 62 FC | 	wrlong	local11, local01
235bc     2C 1E 86 F1 | 	sub	local01, #44
235c0                 | LR__3643
235c0     15 2D E2 F8 | 	getbyte	local08, local07, #0
235c4     13 31 E2 F8 | 	getbyte	local10, local05, #0
235c8     18 2D 0A F2 | 	cmp	local08, local10 wz
235cc     5C 00 90 5D |  if_ne	jmp	#LR__3644
235d0     14 31 E2 F8 | 	getbyte	local10, local06, #0
235d4     1C 1E 06 F1 | 	add	local01, #28
235d8     0F 2F 02 FB | 	rdlong	local09, local01
235dc     1C 1E 86 F1 | 	sub	local01, #28
235e0     0D 2E 06 F1 | 	add	local09, #13
235e4     17 2D C2 FA | 	rdbyte	local08, local09
235e8     16 2F E2 F8 | 	getbyte	local09, local08, #0
235ec     17 31 0A F2 | 	cmp	local10, local09 wz
235f0     38 00 90 5D |  if_ne	jmp	#LR__3644
235f4     0C 24 06 F1 | 	add	local04, #12
235f8     12 13 02 FB | 	rdlong	arg01, local04
235fc     0C 24 86 F1 | 	sub	local04, #12
23600     1C 1E 06 F1 | 	add	local01, #28
23604     0F 35 02 FB | 	rdlong	local12, local01
23608     1C 1E 86 F1 | 	sub	local01, #28
2360c     1A 15 02 F6 | 	mov	arg02, local12
23610     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
23614     00 FA 4D F2 | 	cmps	result1, #0 wz
23618     13 35 02 56 |  if_ne	mov	local12, local05
2361c     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
23620     01 34 86 51 |  if_ne	sub	local12, #1
23624     1A 33 02 56 |  if_ne	mov	local11, local12
23628     04 00 90 5D |  if_ne	jmp	#LR__3645
2362c                 | LR__3644
2362c     FF 32 06 F6 | 	mov	local11, #255
23630                 | LR__3645
23630     19 27 02 F6 | 	mov	local05, local11
23634     40 00 90 FD | 	jmp	#LR__3648
23638                 | LR__3646
23638     13 33 02 F6 | 	mov	local11, local05
2363c     07 32 4E F7 | 	zerox	local11, #7 wz
23640     20 00 90 5D |  if_ne	jmp	#LR__3647
23644     14 29 E2 F8 | 	getbyte	local06, local06, #0
23648     1C 1E 06 F1 | 	add	local01, #28
2364c     0F 13 02 FB | 	rdlong	arg01, local01
23650     1C 1E 86 F1 | 	sub	local01, #28
23654     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
23658     FD FA E1 F8 | 	getbyte	result1, result1, #0
2365c     FD 28 0A F2 | 	cmp	local06, result1 wz
23660     28 00 90 AD |  if_e	jmp	#LR__3650
23664                 | LR__3647
23664     2C 1E 06 F1 | 	add	local01, #44
23668     FF FF FF FF 
2366c     0F FF 6B FC | 	wrlong	##-1, local01
23670     2C 1E 86 F1 | 	sub	local01, #44
23674                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
23674                 | ' 					}
23674                 | ' 					break;
23674     14 00 90 FD | 	jmp	#LR__3650
23678                 | LR__3648
23678                 | LR__3649
23678     0F 13 02 F6 | 	mov	arg01, local01
2367c     00 14 06 F6 | 	mov	arg02, #0
23680     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
23684     FD 22 0A F6 | 	mov	local03, result1 wz
23688     44 FE 9F AD |  if_e	jmp	#LR__3640
2368c                 | LR__3650
2368c     00 22 0E F2 | 	cmp	local03, #0 wz
23690     18 1E 06 51 |  if_ne	add	local01, #24
23694     0F 01 68 5C |  if_ne	wrlong	#0, local01
23698                 | ' 	return res;
23698     11 FB 01 F6 | 	mov	result1, local03
2369c     A7 F0 03 F6 | 	mov	ptra, fp
236a0     B2 00 A0 FD | 	call	#popregs_
236a4                 | _fatfs_cc_dir_read_ret
236a4     2D 00 64 FD | 	ret
236a8                 | 
236a8                 | _fatfs_cc_dir_find
236a8     0B 4A 05 F6 | 	mov	COUNT_, #11
236ac     A8 00 A0 FD | 	call	#pushregs_
236b0     09 1F 02 F6 | 	mov	local01, arg01
236b4     0F 21 02 FB | 	rdlong	local02, local01
236b8     0F 13 02 F6 | 	mov	arg01, local01
236bc     00 14 06 F6 | 	mov	arg02, #0
236c0     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
236c4     00 FA 0D F2 | 	cmp	result1, #0 wz
236c8     18 02 90 5D |  if_ne	jmp	#LR__3672
236cc     FF 22 06 F6 | 	mov	local03, #255
236d0     FF 24 06 F6 | 	mov	local04, #255
236d4     2C 1E 06 F1 | 	add	local01, #44
236d8     FF FF FF FF 
236dc     0F FF 6B FC | 	wrlong	##-1, local01
236e0     2C 1E 86 F1 | 	sub	local01, #44
236e4                 | ' #line 2404 "ff.c"
236e4                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
236e4                 | ' 
236e4                 | ' 	do {
236e4                 | LR__3660
236e4     18 1E 06 F1 | 	add	local01, #24
236e8     0F 15 02 FB | 	rdlong	arg02, local01
236ec     18 1E 86 F1 | 	sub	local01, #24
236f0     10 13 02 F6 | 	mov	arg01, local02
236f4     A8 EB BF FD | 	call	#_fatfs_cc_move_window
236f8     FD 26 0A F6 | 	mov	local05, result1 wz
236fc     E0 01 90 5D |  if_ne	jmp	#LR__3671
23700     1C 1E 06 F1 | 	add	local01, #28
23704     0F 17 02 FB | 	rdlong	arg03, local01
23708     1C 1E 86 F1 | 	sub	local01, #28
2370c     0B 29 C2 FA | 	rdbyte	local06, arg03
23710     14 17 02 F6 | 	mov	arg03, local06
23714     07 16 4E F7 | 	zerox	arg03, #7 wz
23718     04 26 06 A6 |  if_e	mov	local05, #4
2371c     C0 01 90 AD |  if_e	jmp	#LR__3671
23720     1C 1E 06 F1 | 	add	local01, #28
23724     0F 2B 02 FB | 	rdlong	local07, local01
23728     15 17 02 F6 | 	mov	arg03, local07
2372c     0B 16 06 F1 | 	add	arg03, #11
23730     0B 2D C2 FA | 	rdbyte	local08, arg03
23734     3F 2C 06 F5 | 	and	local08, #63
23738     16 1E 86 F1 | 	sub	local01, #22
2373c     0F 2D 42 FC | 	wrbyte	local08, local01
23740     06 1E 86 F1 | 	sub	local01, #6
23744     14 17 E2 F8 | 	getbyte	arg03, local06, #0
23748     E5 16 0E F2 | 	cmp	arg03, #229 wz
2374c     18 00 90 AD |  if_e	jmp	#LR__3661
23750     16 17 E2 F8 | 	getbyte	arg03, local08, #0
23754     08 16 CE F7 | 	test	arg03, #8 wz
23758     16 2B 02 56 |  if_ne	mov	local07, local08
2375c     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
23760     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
23764     18 00 90 AD |  if_e	jmp	#LR__3662
23768                 | LR__3661
23768     FF 24 06 F6 | 	mov	local04, #255
2376c     2C 1E 06 F1 | 	add	local01, #44
23770     FF FF FF FF 
23774     0F FF 6B FC | 	wrlong	##-1, local01
23778     2C 1E 86 F1 | 	sub	local01, #44
2377c     4C 01 90 FD | 	jmp	#LR__3670
23780                 | LR__3662
23780     16 2D E2 F8 | 	getbyte	local08, local08, #0
23784     0F 2C 0E F2 | 	cmp	local08, #15 wz
23788     C8 00 90 5D |  if_ne	jmp	#LR__3666
2378c     2B 1E 06 F1 | 	add	local01, #43
23790     0F 2D C2 FA | 	rdbyte	local08, local01
23794     2B 1E 86 F1 | 	sub	local01, #43
23798     40 2C CE F7 | 	test	local08, #64 wz
2379c     2C 01 90 5D |  if_ne	jmp	#LR__3669
237a0     14 2F E2 F8 | 	getbyte	local09, local06, #0
237a4     40 2E CE F7 | 	test	local09, #64 wz
237a8     30 00 90 AD |  if_e	jmp	#LR__3663
237ac     1C 1E 06 F1 | 	add	local01, #28
237b0     0F 2F 02 FB | 	rdlong	local09, local01
237b4     0D 2E 06 F1 | 	add	local09, #13
237b8     17 23 C2 FA | 	rdbyte	local03, local09
237bc     14 29 E2 F8 | 	getbyte	local06, local06, #0
237c0     BF 28 06 F5 | 	and	local06, #191
237c4     14 25 02 F6 | 	mov	local04, local06
237c8     0C 1E 86 F1 | 	sub	local01, #12
237cc     0F 2F 02 FB | 	rdlong	local09, local01
237d0     1C 1E 06 F1 | 	add	local01, #28
237d4     0F 2F 62 FC | 	wrlong	local09, local01
237d8     2C 1E 86 F1 | 	sub	local01, #44
237dc                 | LR__3663
237dc     14 31 E2 F8 | 	getbyte	local10, local06, #0
237e0     12 2B E2 F8 | 	getbyte	local07, local04, #0
237e4     15 31 0A F2 | 	cmp	local10, local07 wz
237e8     5C 00 90 5D |  if_ne	jmp	#LR__3664
237ec     11 2D E2 F8 | 	getbyte	local08, local03, #0
237f0     1C 1E 06 F1 | 	add	local01, #28
237f4     0F 2B 02 FB | 	rdlong	local07, local01
237f8     1C 1E 86 F1 | 	sub	local01, #28
237fc     0D 2A 06 F1 | 	add	local07, #13
23800     15 29 C2 FA | 	rdbyte	local06, local07
23804     14 2B E2 F8 | 	getbyte	local07, local06, #0
23808     15 2D 0A F2 | 	cmp	local08, local07 wz
2380c     38 00 90 5D |  if_ne	jmp	#LR__3664
23810     0C 20 06 F1 | 	add	local02, #12
23814     10 13 02 FB | 	rdlong	arg01, local02
23818     0C 20 86 F1 | 	sub	local02, #12
2381c     1C 1E 06 F1 | 	add	local01, #28
23820     0F 33 02 FB | 	rdlong	local11, local01
23824     1C 1E 86 F1 | 	sub	local01, #28
23828     19 15 02 F6 | 	mov	arg02, local11
2382c     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
23830     00 FA 4D F2 | 	cmps	result1, #0 wz
23834     12 33 02 56 |  if_ne	mov	local11, local04
23838     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
2383c     01 32 86 51 |  if_ne	sub	local11, #1
23840     19 2F 02 56 |  if_ne	mov	local09, local11
23844     04 00 90 5D |  if_ne	jmp	#LR__3665
23848                 | LR__3664
23848     FF 2E 06 F6 | 	mov	local09, #255
2384c                 | LR__3665
2384c     17 25 02 F6 | 	mov	local04, local09
23850     78 00 90 FD | 	jmp	#LR__3669
23854                 | LR__3666
23854     12 2F 02 F6 | 	mov	local09, local04
23858     07 2E 4E F7 | 	zerox	local09, #7 wz
2385c     20 00 90 5D |  if_ne	jmp	#LR__3667
23860     11 31 E2 F8 | 	getbyte	local10, local03, #0
23864     1C 1E 06 F1 | 	add	local01, #28
23868     0F 13 02 FB | 	rdlong	arg01, local01
2386c     1C 1E 86 F1 | 	sub	local01, #28
23870     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
23874     FD FA E1 F8 | 	getbyte	result1, result1, #0
23878     FD 30 0A F2 | 	cmp	local10, result1 wz
2387c     60 00 90 AD |  if_e	jmp	#LR__3671
23880                 | LR__3667
23880     2B 1E 06 F1 | 	add	local01, #43
23884     0F 2F C2 FA | 	rdbyte	local09, local01
23888     2B 1E 86 F1 | 	sub	local01, #43
2388c     01 2E CE F7 | 	test	local09, #1 wz
23890     24 00 90 5D |  if_ne	jmp	#LR__3668
23894     1C 1E 06 F1 | 	add	local01, #28
23898     0F 13 02 FB | 	rdlong	arg01, local01
2389c     04 1E 06 F1 | 	add	local01, #4
238a0     0F 15 02 F6 | 	mov	arg02, local01
238a4     20 1E 86 F1 | 	sub	local01, #32
238a8     0B 16 06 F6 | 	mov	arg03, #11
238ac     88 DA BF FD | 	call	#_fatfs_cc_memcmp
238b0     00 FA 0D F2 | 	cmp	result1, #0 wz
238b4     28 00 90 AD |  if_e	jmp	#LR__3671
238b8                 | LR__3668
238b8     FF 24 06 F6 | 	mov	local04, #255
238bc     2C 1E 06 F1 | 	add	local01, #44
238c0     FF FF FF FF 
238c4     0F FF 6B FC | 	wrlong	##-1, local01
238c8     2C 1E 86 F1 | 	sub	local01, #44
238cc                 | LR__3669
238cc                 | LR__3670
238cc     0F 13 02 F6 | 	mov	arg01, local01
238d0     00 14 06 F6 | 	mov	arg02, #0
238d4     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
238d8     FD 26 0A F6 | 	mov	local05, result1 wz
238dc     04 FE 9F AD |  if_e	jmp	#LR__3660
238e0                 | LR__3671
238e0                 | ' 
238e0                 | ' 	return res;
238e0     13 FB 01 F6 | 	mov	result1, local05
238e4                 | LR__3672
238e4     A7 F0 03 F6 | 	mov	ptra, fp
238e8     B2 00 A0 FD | 	call	#popregs_
238ec                 | _fatfs_cc_dir_find_ret
238ec     2D 00 64 FD | 	ret
238f0                 | 
238f0                 | _fatfs_cc_dir_register
238f0     0A 4A 05 F6 | 	mov	COUNT_, #10
238f4     A8 00 A0 FD | 	call	#pushregs_
238f8     2C F0 07 F1 | 	add	ptra, #44
238fc     04 4E 05 F1 | 	add	fp, #4
23900     A7 12 62 FC | 	wrlong	arg01, fp
23904     09 1F 02 FB | 	rdlong	local01, arg01
23908     08 4E 05 F1 | 	add	fp, #8
2390c     A7 1E 62 FC | 	wrlong	local01, fp
23910     08 4E 85 F1 | 	sub	fp, #8
23914     A7 20 02 FB | 	rdlong	local02, fp
23918     04 4E 85 F1 | 	sub	fp, #4
2391c     2B 20 06 F1 | 	add	local02, #43
23920     10 21 C2 FA | 	rdbyte	local02, local02
23924     A0 20 CE F7 | 	test	local02, #160 wz
23928     06 FA 05 56 |  if_ne	mov	result1, #6
2392c     F8 03 90 5D |  if_ne	jmp	#LR__3695
23930                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
23930     14 4E 05 F1 | 	add	fp, #20
23934     A7 00 68 FC | 	wrlong	#0, fp
23938     14 4E 85 F1 | 	sub	fp, #20
2393c     97 28 48 FB | 	callpa	#(@LR__3681-@LR__3680)>>2,fcache_load_ptr_
23940                 | LR__3680
23940     0C 4E 05 F1 | 	add	fp, #12
23944     A7 20 02 FB | 	rdlong	local02, fp
23948     0C 20 06 F1 | 	add	local02, #12
2394c     10 23 02 FB | 	rdlong	local03, local02
23950     08 4E 05 F1 | 	add	fp, #8
23954     A7 24 02 FB | 	rdlong	local04, fp
23958     14 4E 85 F1 | 	sub	fp, #20
2395c     01 24 66 F0 | 	shl	local04, #1
23960     11 25 02 F1 | 	add	local04, local03
23964     12 21 EA FA | 	rdword	local02, local04 wz
23968     24 00 90 AD |  if_e	jmp	#LR__3682
2396c     14 4E 05 F1 | 	add	fp, #20
23970     A7 26 02 FB | 	rdlong	local05, fp
23974     13 29 02 F6 | 	mov	local06, local05
23978     13 2B 02 F6 | 	mov	local07, local05
2397c     15 2D 02 F6 | 	mov	local08, local07
23980     01 2C 06 F1 | 	add	local08, #1
23984     A7 2C 62 FC | 	wrlong	local08, fp
23988     14 4E 85 F1 | 	sub	fp, #20
2398c     B0 FF 9F FD | 	jmp	#LR__3680
23990                 | LR__3681
23990                 | LR__3682
23990     1C 4E 05 F1 | 	add	fp, #28
23994     A7 12 02 F6 | 	mov	arg01, fp
23998     18 4E 85 F1 | 	sub	fp, #24
2399c     A7 14 02 FB | 	rdlong	arg02, fp
239a0     04 4E 85 F1 | 	sub	fp, #4
239a4     20 14 06 F1 | 	add	arg02, #32
239a8     0C 16 06 F6 | 	mov	arg03, #12
239ac     D8 71 BF FD | 	call	#__system____builtin_memmove
239b0     27 4E 05 F1 | 	add	fp, #39
239b4     A7 2E C2 FA | 	rdbyte	local09, fp
239b8     27 4E 85 F1 | 	sub	fp, #39
239bc     01 2E CE F7 | 	test	local09, #1 wz
239c0     F4 00 90 AD |  if_e	jmp	#LR__3685
239c4     04 4E 05 F1 | 	add	fp, #4
239c8     A7 30 02 FB | 	rdlong	local10, fp
239cc     2B 30 06 F1 | 	add	local10, #43
239d0     18 81 48 FC | 	wrbyte	#64, local10
239d4                 | ' 		dp->fn[ 11 ] =  0x40 ;
239d4                 | ' 		for (n = 1; n < 100; n++) {
239d4     0C 4E 05 F1 | 	add	fp, #12
239d8     A7 02 68 FC | 	wrlong	#1, fp
239dc     10 4E 85 F1 | 	sub	fp, #16
239e0                 | LR__3683
239e0     10 4E 05 F1 | 	add	fp, #16
239e4     A7 20 02 FB | 	rdlong	local02, fp
239e8     10 4E 85 F1 | 	sub	fp, #16
239ec     64 20 16 F2 | 	cmp	local02, #100 wc
239f0     70 00 90 3D |  if_ae	jmp	#LR__3684
239f4     04 4E 05 F1 | 	add	fp, #4
239f8     A7 12 02 FB | 	rdlong	arg01, fp
239fc     20 12 06 F1 | 	add	arg01, #32
23a00     18 4E 05 F1 | 	add	fp, #24
23a04     A7 14 02 F6 | 	mov	arg02, fp
23a08     10 4E 85 F1 | 	sub	fp, #16
23a0c     A7 30 02 FB | 	rdlong	local10, fp
23a10     0C 30 06 F1 | 	add	local10, #12
23a14     18 17 02 FB | 	rdlong	arg03, local10
23a18     04 4E 05 F1 | 	add	fp, #4
23a1c     A7 18 02 FB | 	rdlong	arg04, fp
23a20     10 4E 85 F1 | 	sub	fp, #16
23a24     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
23a28     04 4E 05 F1 | 	add	fp, #4
23a2c     A7 12 02 FB | 	rdlong	arg01, fp
23a30     04 4E 85 F1 | 	sub	fp, #4
23a34     70 FC BF FD | 	call	#_fatfs_cc_dir_find
23a38     08 4E 05 F1 | 	add	fp, #8
23a3c     A7 FA 61 FC | 	wrlong	result1, fp
23a40     00 FA 4D F2 | 	cmps	result1, #0 wz
23a44     08 4E 85 F1 | 	sub	fp, #8
23a48     18 00 90 5D |  if_ne	jmp	#LR__3684
23a4c     10 4E 05 F1 | 	add	fp, #16
23a50     A7 30 02 FB | 	rdlong	local10, fp
23a54     01 30 06 F1 | 	add	local10, #1
23a58     A7 30 62 FC | 	wrlong	local10, fp
23a5c     10 4E 85 F1 | 	sub	fp, #16
23a60     7C FF 9F FD | 	jmp	#LR__3683
23a64                 | LR__3684
23a64     10 4E 05 F1 | 	add	fp, #16
23a68     A7 30 02 FB | 	rdlong	local10, fp
23a6c     10 4E 85 F1 | 	sub	fp, #16
23a70     64 30 0E F2 | 	cmp	local10, #100 wz
23a74     07 FA 05 A6 |  if_e	mov	result1, #7
23a78     AC 02 90 AD |  if_e	jmp	#LR__3695
23a7c     08 4E 05 F1 | 	add	fp, #8
23a80     A7 30 02 FB | 	rdlong	local10, fp
23a84     08 4E 85 F1 | 	sub	fp, #8
23a88     04 30 0E F2 | 	cmp	local10, #4 wz
23a8c     08 4E 05 51 |  if_ne	add	fp, #8
23a90     A7 FA 01 5B |  if_ne	rdlong	result1, fp
23a94     08 4E 85 51 |  if_ne	sub	fp, #8
23a98     8C 02 90 5D |  if_ne	jmp	#LR__3695
23a9c     04 4E 05 F1 | 	add	fp, #4
23aa0     A7 30 02 FB | 	rdlong	local10, fp
23aa4     23 4E 05 F1 | 	add	fp, #35
23aa8     A7 1E C2 FA | 	rdbyte	local01, fp
23aac     27 4E 85 F1 | 	sub	fp, #39
23ab0     2B 30 06 F1 | 	add	local10, #43
23ab4     18 1F 42 FC | 	wrbyte	local01, local10
23ab8                 | LR__3685
23ab8     27 4E 05 F1 | 	add	fp, #39
23abc     A7 20 C2 FA | 	rdbyte	local02, fp
23ac0     27 4E 85 F1 | 	sub	fp, #39
23ac4     02 20 CE F7 | 	test	local02, #2 wz
23ac8     20 00 90 AD |  if_e	jmp	#LR__3686
23acc     14 4E 05 F1 | 	add	fp, #20
23ad0     A7 30 02 FB | 	rdlong	local10, fp
23ad4     0C 30 06 F1 | 	add	local10, #12
23ad8     0D 30 16 FD | 	qdiv	local10, #13
23adc     14 4E 85 F1 | 	sub	fp, #20
23ae0     18 30 62 FD | 	getqx	local10
23ae4     01 30 06 F1 | 	add	local10, #1
23ae8     04 00 90 FD | 	jmp	#LR__3687
23aec                 | LR__3686
23aec     01 30 06 F6 | 	mov	local10, #1
23af0                 | LR__3687
23af0     18 4E 05 F1 | 	add	fp, #24
23af4     A7 30 62 FC | 	wrlong	local10, fp
23af8     14 4E 85 F1 | 	sub	fp, #20
23afc     A7 12 02 FB | 	rdlong	arg01, fp
23b00     18 15 02 F6 | 	mov	arg02, local10
23b04     04 4E 85 F1 | 	sub	fp, #4
23b08     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
23b0c     08 4E 05 F1 | 	add	fp, #8
23b10     A7 FA 61 FC | 	wrlong	result1, fp
23b14     08 4E 85 F1 | 	sub	fp, #8
23b18     00 FA 0D F2 | 	cmp	result1, #0 wz
23b1c     38 01 90 5D |  if_ne	jmp	#LR__3692
23b20     18 4E 05 F1 | 	add	fp, #24
23b24     A7 30 02 FB | 	rdlong	local10, fp
23b28     01 30 8E F1 | 	sub	local10, #1 wz
23b2c     A7 30 62 FC | 	wrlong	local10, fp
23b30     18 4E 85 F1 | 	sub	fp, #24
23b34     20 01 90 AD |  if_e	jmp	#LR__3692
23b38     04 4E 05 F1 | 	add	fp, #4
23b3c     A7 30 02 FB | 	rdlong	local10, fp
23b40     18 13 02 F6 | 	mov	arg01, local10
23b44     14 4E 05 F1 | 	add	fp, #20
23b48     A7 18 02 FB | 	rdlong	arg04, fp
23b4c     18 4E 85 F1 | 	sub	fp, #24
23b50     05 18 66 F0 | 	shl	arg04, #5
23b54     10 30 06 F1 | 	add	local10, #16
23b58     18 15 02 FB | 	rdlong	arg02, local10
23b5c     0C 15 82 F1 | 	sub	arg02, arg04
23b60     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
23b64     08 4E 05 F1 | 	add	fp, #8
23b68     A7 FA 61 FC | 	wrlong	result1, fp
23b6c     08 4E 85 F1 | 	sub	fp, #8
23b70     00 FA 0D F2 | 	cmp	result1, #0 wz
23b74     E0 00 90 5D |  if_ne	jmp	#LR__3691
23b78     04 4E 05 F1 | 	add	fp, #4
23b7c     A7 12 02 FB | 	rdlong	arg01, fp
23b80     04 4E 85 F1 | 	sub	fp, #4
23b84     20 12 06 F1 | 	add	arg01, #32
23b88     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
23b8c     FD 30 02 F6 | 	mov	local10, result1
23b90     28 4E 05 F1 | 	add	fp, #40
23b94     A7 30 42 FC | 	wrbyte	local10, fp
23b98     28 4E 85 F1 | 	sub	fp, #40
23b9c                 | ' 			sum = sum_sfn(dp->fn);
23b9c                 | ' 			do {
23b9c                 | LR__3688
23b9c     0C 4E 05 F1 | 	add	fp, #12
23ba0     A7 12 02 FB | 	rdlong	arg01, fp
23ba4     08 4E 85 F1 | 	sub	fp, #8
23ba8     A7 1E 02 FB | 	rdlong	local01, fp
23bac     04 4E 85 F1 | 	sub	fp, #4
23bb0     18 1E 06 F1 | 	add	local01, #24
23bb4     0F 15 02 FB | 	rdlong	arg02, local01
23bb8     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
23bbc     08 4E 05 F1 | 	add	fp, #8
23bc0     A7 FA 61 FC | 	wrlong	result1, fp
23bc4     00 FA 4D F2 | 	cmps	result1, #0 wz
23bc8     08 4E 85 F1 | 	sub	fp, #8
23bcc     88 00 90 5D |  if_ne	jmp	#LR__3690
23bd0     0C 4E 05 F1 | 	add	fp, #12
23bd4     A7 20 02 FB | 	rdlong	local02, fp
23bd8     0C 20 06 F1 | 	add	local02, #12
23bdc     10 13 02 FB | 	rdlong	arg01, local02
23be0     08 4E 85 F1 | 	sub	fp, #8
23be4     A7 1E 02 FB | 	rdlong	local01, fp
23be8     1C 1E 06 F1 | 	add	local01, #28
23bec     0F 15 02 FB | 	rdlong	arg02, local01
23bf0     14 4E 05 F1 | 	add	fp, #20
23bf4     A7 16 02 FB | 	rdlong	arg03, fp
23bf8     10 4E 05 F1 | 	add	fp, #16
23bfc     A7 18 C2 FA | 	rdbyte	arg04, fp
23c00     28 4E 85 F1 | 	sub	fp, #40
23c04     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
23c08     0C 4E 05 F1 | 	add	fp, #12
23c0c     A7 30 02 FB | 	rdlong	local10, fp
23c10     03 30 06 F1 | 	add	local10, #3
23c14     18 03 48 FC | 	wrbyte	#1, local10
23c18     08 4E 85 F1 | 	sub	fp, #8
23c1c     A7 12 02 FB | 	rdlong	arg01, fp
23c20     04 4E 85 F1 | 	sub	fp, #4
23c24     00 14 06 F6 | 	mov	arg02, #0
23c28     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
23c2c     08 4E 05 F1 | 	add	fp, #8
23c30     A7 FA 61 FC | 	wrlong	result1, fp
23c34     00 FA 4D F2 | 	cmps	result1, #0 wz
23c38     08 4E 85 F1 | 	sub	fp, #8
23c3c     18 00 90 5D |  if_ne	jmp	#LR__3689
23c40     18 4E 05 F1 | 	add	fp, #24
23c44     A7 30 02 FB | 	rdlong	local10, fp
23c48     01 30 8E F1 | 	sub	local10, #1 wz
23c4c     A7 30 62 FC | 	wrlong	local10, fp
23c50     18 4E 85 F1 | 	sub	fp, #24
23c54     44 FF 9F 5D |  if_ne	jmp	#LR__3688
23c58                 | LR__3689
23c58                 | LR__3690
23c58                 | LR__3691
23c58                 | LR__3692
23c58     08 4E 05 F1 | 	add	fp, #8
23c5c     A7 30 0A FB | 	rdlong	local10, fp wz
23c60     08 4E 85 F1 | 	sub	fp, #8
23c64     B4 00 90 5D |  if_ne	jmp	#LR__3694
23c68     0C 4E 05 F1 | 	add	fp, #12
23c6c     A7 12 02 FB | 	rdlong	arg01, fp
23c70     08 4E 85 F1 | 	sub	fp, #8
23c74     A7 1E 02 FB | 	rdlong	local01, fp
23c78     04 4E 85 F1 | 	sub	fp, #4
23c7c     18 1E 06 F1 | 	add	local01, #24
23c80     0F 15 02 FB | 	rdlong	arg02, local01
23c84     18 E6 BF FD | 	call	#_fatfs_cc_move_window
23c88     08 4E 05 F1 | 	add	fp, #8
23c8c     A7 FA 61 FC | 	wrlong	result1, fp
23c90     08 4E 85 F1 | 	sub	fp, #8
23c94     00 FA 0D F2 | 	cmp	result1, #0 wz
23c98     80 00 90 5D |  if_ne	jmp	#LR__3693
23c9c     04 4E 05 F1 | 	add	fp, #4
23ca0     A7 20 02 FB | 	rdlong	local02, fp
23ca4     04 4E 85 F1 | 	sub	fp, #4
23ca8     1C 20 06 F1 | 	add	local02, #28
23cac     10 13 02 FB | 	rdlong	arg01, local02
23cb0     00 14 06 F6 | 	mov	arg02, #0
23cb4     20 16 06 F6 | 	mov	arg03, #32
23cb8     98 00 A0 FD | 	call	#\builtin_bytefill_
23cbc     04 4E 05 F1 | 	add	fp, #4
23cc0     A7 14 02 FB | 	rdlong	arg02, fp
23cc4     0A 1F 02 F6 | 	mov	local01, arg02
23cc8     1C 1E 06 F1 | 	add	local01, #28
23ccc     0F 13 02 FB | 	rdlong	arg01, local01
23cd0     04 4E 85 F1 | 	sub	fp, #4
23cd4     20 14 06 F1 | 	add	arg02, #32
23cd8     0B 16 06 F6 | 	mov	arg03, #11
23cdc     A8 6E BF FD | 	call	#__system____builtin_memmove
23ce0     04 4E 05 F1 | 	add	fp, #4
23ce4     A7 2E 02 FB | 	rdlong	local09, fp
23ce8     17 31 02 F6 | 	mov	local10, local09
23cec     1C 30 06 F1 | 	add	local10, #28
23cf0     18 1F 02 FB | 	rdlong	local01, local10
23cf4     2B 2E 06 F1 | 	add	local09, #43
23cf8     17 31 C2 FA | 	rdbyte	local10, local09
23cfc     18 30 06 F5 | 	and	local10, #24
23d00     0C 1E 06 F1 | 	add	local01, #12
23d04     0F 31 42 FC | 	wrbyte	local10, local01
23d08     08 4E 05 F1 | 	add	fp, #8
23d0c     A7 30 02 FB | 	rdlong	local10, fp
23d10     0C 4E 85 F1 | 	sub	fp, #12
23d14     03 30 06 F1 | 	add	local10, #3
23d18     18 03 48 FC | 	wrbyte	#1, local10
23d1c                 | LR__3693
23d1c                 | LR__3694
23d1c                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
23d1c                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
23d1c                 | ' 
23d1c                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
23d1c                 | ' 
23d1c                 | ' 			fs->wflag = 1;
23d1c                 | ' 		}
23d1c                 | ' 	}
23d1c                 | ' 
23d1c                 | ' 	return res;
23d1c     08 4E 05 F1 | 	add	fp, #8
23d20     A7 FA 01 FB | 	rdlong	result1, fp
23d24     08 4E 85 F1 | 	sub	fp, #8
23d28                 | LR__3695
23d28     A7 F0 03 F6 | 	mov	ptra, fp
23d2c     B2 00 A0 FD | 	call	#popregs_
23d30                 | _fatfs_cc_dir_register_ret
23d30     2D 00 64 FD | 	ret
23d34                 | 
23d34                 | _fatfs_cc_dir_remove
23d34     05 4A 05 F6 | 	mov	COUNT_, #5
23d38     A8 00 A0 FD | 	call	#pushregs_
23d3c     09 1F 02 F6 | 	mov	local01, arg01
23d40     0F 21 02 FB | 	rdlong	local02, local01
23d44     10 1E 06 F1 | 	add	local01, #16
23d48     0F 23 02 FB | 	rdlong	local03, local01
23d4c     1C 1E 06 F1 | 	add	local01, #28
23d50     0F 15 02 FB | 	rdlong	arg02, local01
23d54     2C 1E 86 F1 | 	sub	local01, #44
23d58     FF FF 7F FF 
23d5c     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
23d60     00 24 06 A6 |  if_e	mov	local04, #0
23d64     18 00 90 AD |  if_e	jmp	#LR__3700
23d68     0F 13 02 F6 | 	mov	arg01, local01
23d6c     2C 1E 06 F1 | 	add	local01, #44
23d70     0F 15 02 FB | 	rdlong	arg02, local01
23d74     2C 1E 86 F1 | 	sub	local01, #44
23d78     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
23d7c     FD 24 02 F6 | 	mov	local04, result1
23d80                 | LR__3700
23d80     12 27 0A F6 | 	mov	local05, local04 wz
23d84     64 00 90 5D |  if_ne	jmp	#LR__3703
23d88                 | ' 		do {
23d88                 | LR__3701
23d88     18 1E 06 F1 | 	add	local01, #24
23d8c     0F 15 02 FB | 	rdlong	arg02, local01
23d90     18 1E 86 F1 | 	sub	local01, #24
23d94     10 13 02 F6 | 	mov	arg01, local02
23d98     04 E5 BF FD | 	call	#_fatfs_cc_move_window
23d9c     FD 26 0A F6 | 	mov	local05, result1 wz
23da0     40 00 90 5D |  if_ne	jmp	#LR__3702
23da4     1C 1E 06 F1 | 	add	local01, #28
23da8     0F 25 02 FB | 	rdlong	local04, local01
23dac     12 CB 49 FC | 	wrbyte	#229, local04
23db0     03 20 06 F1 | 	add	local02, #3
23db4     10 03 48 FC | 	wrbyte	#1, local02
23db8     03 20 86 F1 | 	sub	local02, #3
23dbc     0C 1E 86 F1 | 	sub	local01, #12
23dc0     0F 25 02 FB | 	rdlong	local04, local01
23dc4     10 1E 86 F1 | 	sub	local01, #16
23dc8     11 25 12 F2 | 	cmp	local04, local03 wc
23dcc     14 00 90 3D |  if_ae	jmp	#LR__3702
23dd0     0F 13 02 F6 | 	mov	arg01, local01
23dd4     00 14 06 F6 | 	mov	arg02, #0
23dd8     90 EF BF FD | 	call	#_fatfs_cc_dir_next
23ddc     FD 26 0A F6 | 	mov	local05, result1 wz
23de0     A4 FF 9F AD |  if_e	jmp	#LR__3701
23de4                 | LR__3702
23de4     04 26 0E F2 | 	cmp	local05, #4 wz
23de8     02 26 06 A6 |  if_e	mov	local05, #2
23dec                 | LR__3703
23dec                 | ' 	}
23dec                 | ' #line 2590 "ff.c"
23dec                 | ' 	return res;
23dec     13 FB 01 F6 | 	mov	result1, local05
23df0     A7 F0 03 F6 | 	mov	ptra, fp
23df4     B2 00 A0 FD | 	call	#popregs_
23df8                 | _fatfs_cc_dir_remove_ret
23df8     2D 00 64 FD | 	ret
23dfc                 | 
23dfc                 | _fatfs_cc_get_fileinfo
23dfc     0F 4A 05 F6 | 	mov	COUNT_, #15
23e00     A8 00 A0 FD | 	call	#pushregs_
23e04     09 1F 02 F6 | 	mov	local01, arg01
23e08     0A 21 02 F6 | 	mov	local02, arg02
23e0c     0F 23 02 FB | 	rdlong	local03, local01
23e10     1C 20 06 F1 | 	add	local02, #28
23e14     10 01 48 FC | 	wrbyte	#0, local02
23e18     1C 20 86 F1 | 	sub	local02, #28
23e1c     18 1E 06 F1 | 	add	local01, #24
23e20     0F 25 0A FB | 	rdlong	local04, local01 wz
23e24     18 1E 86 F1 | 	sub	local01, #24
23e28     90 03 90 AD |  if_e	jmp	#LR__3724
23e2c     2C 1E 06 F1 | 	add	local01, #44
23e30     0F 25 02 FB | 	rdlong	local04, local01
23e34     2C 1E 86 F1 | 	sub	local01, #44
23e38     FF FF 7F FF 
23e3c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
23e40     D8 00 90 AD |  if_e	jmp	#LR__3713
23e44     00 26 06 F6 | 	mov	local05, #0
23e48     00 28 06 F6 | 	mov	local06, #0
23e4c     00 2A 06 F6 | 	mov	local07, #0
23e50                 | ' 			si = di = 0;
23e50                 | ' 			hs = 0;
23e50                 | ' 			while (fs->lfnbuf[si] != 0) {
23e50                 | LR__3710
23e50     0C 22 06 F1 | 	add	local03, #12
23e54     11 25 02 FB | 	rdlong	local04, local03
23e58     0C 22 86 F1 | 	sub	local03, #12
23e5c     14 2D 02 F6 | 	mov	local08, local06
23e60     01 2C 66 F0 | 	shl	local08, #1
23e64     12 2D 02 F1 | 	add	local08, local04
23e68     16 25 EA FA | 	rdword	local04, local08 wz
23e6c     90 00 90 AD |  if_e	jmp	#LR__3712
23e70     0C 22 06 F1 | 	add	local03, #12
23e74     11 2F 02 FB | 	rdlong	local09, local03
23e78     0C 22 86 F1 | 	sub	local03, #12
23e7c     14 31 02 F6 | 	mov	local10, local06
23e80     01 30 66 F0 | 	shl	local10, #1
23e84     17 31 02 F1 | 	add	local10, local09
23e88     18 33 E2 FA | 	rdword	local11, local10
23e8c     15 25 02 F6 | 	mov	local04, local07
23e90     0F 24 4E F7 | 	zerox	local04, #15 wz
23e94     01 28 06 F1 | 	add	local06, #1
23e98     24 00 90 5D |  if_ne	jmp	#LR__3711
23e9c     19 35 32 F9 | 	getword	local12, local11, #0
23ea0     6C 00 00 FF 
23ea4     00 34 16 F2 | 	cmp	local12, ##55296 wc
23ea8     14 00 90 CD |  if_b	jmp	#LR__3711
23eac     19 37 32 F9 | 	getword	local13, local11, #0
23eb0     70 00 00 FF 
23eb4     00 36 16 F2 | 	cmp	local13, ##57344 wc
23eb8     19 2B 02 C6 |  if_b	mov	local07, local11
23ebc                 | ' 					hs = wc; continue;
23ebc     90 FF 9F CD |  if_b	jmp	#LR__3710
23ec0                 | LR__3711
23ec0     15 13 32 F9 | 	getword	arg01, local07, #0
23ec4     10 12 66 F0 | 	shl	arg01, #16
23ec8     19 33 32 F9 | 	getword	local11, local11, #0
23ecc     19 13 42 F5 | 	or	arg01, local11
23ed0     13 15 02 F6 | 	mov	arg02, local05
23ed4     1C 20 06 F1 | 	add	local02, #28
23ed8     10 15 02 F1 | 	add	arg02, local02
23edc     FF 16 06 F6 | 	mov	arg03, #255
23ee0     13 17 82 F1 | 	sub	arg03, local05
23ee4     1C 20 86 F1 | 	sub	local02, #28
23ee8     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
23eec     FD 38 0A F6 | 	mov	local14, result1 wz
23ef0     00 26 06 A6 |  if_e	mov	local05, #0
23ef4     1C 27 02 51 |  if_ne	add	local05, local14
23ef8     00 2A 06 56 |  if_ne	mov	local07, #0
23efc     50 FF 9F 5D |  if_ne	jmp	#LR__3710
23f00                 | LR__3712
23f00     15 25 02 F6 | 	mov	local04, local07
23f04     0F 24 4E F7 | 	zerox	local04, #15 wz
23f08     00 26 06 56 |  if_ne	mov	local05, #0
23f0c     1C 20 06 F1 | 	add	local02, #28
23f10     10 27 02 F1 | 	add	local05, local02
23f14     13 01 48 FC | 	wrbyte	#0, local05
23f18     1C 20 86 F1 | 	sub	local02, #28
23f1c                 | LR__3713
23f1c     00 26 06 F6 | 	mov	local05, #0
23f20     00 28 06 F6 | 	mov	local06, #0
23f24                 | ' 			fno->fname[di] = 0;
23f24                 | ' 		}
23f24                 | ' 	}
23f24                 | ' 
23f24                 | ' 	si = di = 0;
23f24                 | ' 	while (si < 11) {
23f24                 | LR__3714
23f24     0B 28 16 F2 | 	cmp	local06, #11 wc
23f28     20 01 90 3D |  if_ae	jmp	#LR__3717
23f2c     1C 1E 06 F1 | 	add	local01, #28
23f30     0F 2F 02 FB | 	rdlong	local09, local01
23f34     1C 1E 86 F1 | 	sub	local01, #28
23f38     14 31 02 F6 | 	mov	local10, local06
23f3c     17 31 02 F1 | 	add	local10, local09
23f40     18 33 C2 FA | 	rdbyte	local11, local10
23f44     19 25 32 F9 | 	getword	local04, local11, #0
23f48     20 24 0E F2 | 	cmp	local04, #32 wz
23f4c     01 28 06 F1 | 	add	local06, #1
23f50     D0 FF 9F AD |  if_e	jmp	#LR__3714
23f54     19 25 32 F9 | 	getword	local04, local11, #0
23f58     05 24 0E F2 | 	cmp	local04, #5 wz
23f5c     E5 32 06 A6 |  if_e	mov	local11, #229
23f60     09 28 0E F2 | 	cmp	local06, #9 wz
23f64     20 00 90 5D |  if_ne	jmp	#LR__3715
23f68     0C 26 16 F2 | 	cmp	local05, #12 wc
23f6c     18 00 90 3D |  if_ae	jmp	#LR__3715
23f70     13 37 02 F6 | 	mov	local13, local05
23f74     0C 20 06 F1 | 	add	local02, #12
23f78     10 37 02 F1 | 	add	local13, local02
23f7c     1B 5D 48 FC | 	wrbyte	#46, local13
23f80     01 26 06 F1 | 	add	local05, #1
23f84     0C 20 86 F1 | 	sub	local02, #12
23f88                 | LR__3715
23f88     19 13 32 F9 | 	getword	arg01, local11, #0
23f8c     07 12 4E F7 | 	zerox	arg01, #7 wz
23f90     00 FA 05 56 |  if_ne	mov	result1, #0
23f94                 | ' 
23f94                 | ' 	return 0;
23f94     00 FA 05 A6 |  if_e	mov	result1, #0
23f98     00 FA 0D F2 | 	cmp	result1, #0 wz
23f9c     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
23fa0     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
23fa4     50 00 90 AD |  if_e	jmp	#LR__3716
23fa8     1C 1E 06 F1 | 	add	local01, #28
23fac     0F 31 02 FB | 	rdlong	local10, local01
23fb0     1C 1E 86 F1 | 	sub	local01, #28
23fb4     14 2D 02 F6 | 	mov	local08, local06
23fb8     18 2D 02 F1 | 	add	local08, local10
23fbc     16 13 CA FA | 	rdbyte	arg01, local08 wz
23fc0     00 FA 05 56 |  if_ne	mov	result1, #0
23fc4                 | ' 
23fc4                 | ' 	return 0;
23fc4     00 FA 05 A6 |  if_e	mov	result1, #0
23fc8     00 FA 0D F2 | 	cmp	result1, #0 wz
23fcc     28 00 90 AD |  if_e	jmp	#LR__3716
23fd0     19 33 32 F9 | 	getword	local11, local11, #0
23fd4     08 32 66 F0 | 	shl	local11, #8
23fd8     1C 1E 06 F1 | 	add	local01, #28
23fdc     0F 39 02 FB | 	rdlong	local14, local01
23fe0     1C 1E 86 F1 | 	sub	local01, #28
23fe4     14 2F 02 F6 | 	mov	local09, local06
23fe8     1C 2F 02 F1 | 	add	local09, local14
23fec     17 35 C2 FA | 	rdbyte	local12, local09
23ff0     1A 33 42 F5 | 	or	local11, local12
23ff4     01 28 06 F1 | 	add	local06, #1
23ff8                 | LR__3716
23ff8     19 13 02 F6 | 	mov	arg01, local11
23ffc     01 00 00 FF 
24000     52 15 06 F6 | 	mov	arg02, ##850
24004     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
24008     FD 32 02 F6 | 	mov	local11, result1
2400c     19 25 02 F6 | 	mov	local04, local11
24010     0F 24 4E F7 | 	zerox	local04, #15 wz
24014     00 26 06 A6 |  if_e	mov	local05, #0
24018     30 00 90 AD |  if_e	jmp	#LR__3717
2401c     19 13 32 F9 | 	getword	arg01, local11, #0
24020     13 15 02 F6 | 	mov	arg02, local05
24024     0C 20 06 F1 | 	add	local02, #12
24028     10 15 02 F1 | 	add	arg02, local02
2402c     0C 16 06 F6 | 	mov	arg03, #12
24030     13 17 82 F1 | 	sub	arg03, local05
24034     0C 20 86 F1 | 	sub	local02, #12
24038     EC DF BF FD | 	call	#_fatfs_cc_put_utf
2403c     FD 38 0A F6 | 	mov	local14, result1 wz
24040     00 26 06 A6 |  if_e	mov	local05, #0
24044     1C 27 02 51 |  if_ne	add	local05, local14
24048     D8 FE 9F 5D |  if_ne	jmp	#LR__3714
2404c                 | LR__3717
2404c     13 25 02 F6 | 	mov	local04, local05
24050     0C 20 06 F1 | 	add	local02, #12
24054     10 25 02 F1 | 	add	local04, local02
24058     12 01 48 FC | 	wrbyte	#0, local04
2405c     10 20 06 F1 | 	add	local02, #16
24060     10 25 CA FA | 	rdbyte	local04, local02 wz
24064     1C 20 86 F1 | 	sub	local02, #28
24068     F8 00 90 5D |  if_ne	jmp	#LR__3723
2406c     00 26 0E F2 | 	cmp	local05, #0 wz
24070     1C 00 90 5D |  if_ne	jmp	#LR__3718
24074     13 37 02 F6 | 	mov	local13, local05
24078     1C 20 06 F1 | 	add	local02, #28
2407c     10 37 02 F1 | 	add	local13, local02
24080     1B 7F 48 FC | 	wrbyte	#63, local13
24084     01 26 06 F1 | 	add	local05, #1
24088     1C 20 86 F1 | 	sub	local02, #28
2408c     A4 00 90 FD | 	jmp	#LR__3722
24090                 | LR__3718
24090                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
24090     00 26 06 F6 | 	mov	local05, #0
24094     00 28 06 F6 | 	mov	local06, #0
24098     08 3A 06 F6 | 	mov	local15, #8
2409c                 | LR__3719
2409c     14 25 02 F6 | 	mov	local04, local06
240a0     0C 20 06 F1 | 	add	local02, #12
240a4     10 25 02 F1 | 	add	local04, local02
240a8     12 37 CA FA | 	rdbyte	local13, local04 wz
240ac     0C 20 86 F1 | 	sub	local02, #12
240b0     80 00 90 AD |  if_e	jmp	#LR__3721
240b4     14 2D 02 F6 | 	mov	local08, local06
240b8     0C 20 06 F1 | 	add	local02, #12
240bc     10 2D 02 F1 | 	add	local08, local02
240c0     16 33 C2 FA | 	rdbyte	local11, local08
240c4     19 39 32 F9 | 	getword	local14, local11, #0
240c8     2E 38 0E F2 | 	cmp	local14, #46 wz
240cc     0C 20 86 F1 | 	sub	local02, #12
240d0     10 3A 06 A6 |  if_e	mov	local15, #16
240d4     19 39 32 F9 | 	getword	local14, local11, #0
240d8     41 38 16 F2 | 	cmp	local14, #65 wc
240dc     30 00 90 CD |  if_b	jmp	#LR__3720
240e0     19 2D 32 F9 | 	getword	local08, local11, #0
240e4     5B 2C 16 F2 | 	cmp	local08, #91 wc
240e8     24 00 90 3D |  if_ae	jmp	#LR__3720
240ec     1C 1E 06 F1 | 	add	local01, #28
240f0     0F 2F 02 FB | 	rdlong	local09, local01
240f4     1C 1E 86 F1 | 	sub	local01, #28
240f8     0C 2E 06 F1 | 	add	local09, #12
240fc     17 31 C2 FA | 	rdbyte	local10, local09
24100     1D 39 E2 F8 | 	getbyte	local14, local15, #0
24104     1C 31 CA F7 | 	test	local10, local14 wz
24108     19 33 32 59 |  if_ne	getword	local11, local11, #0
2410c     20 32 06 51 |  if_ne	add	local11, #32
24110                 | LR__3720
24110     13 39 02 F6 | 	mov	local14, local05
24114     1C 20 06 F1 | 	add	local02, #28
24118     10 39 02 F1 | 	add	local14, local02
2411c     19 33 32 F9 | 	getword	local11, local11, #0
24120     1C 33 42 FC | 	wrbyte	local11, local14
24124     01 28 06 F1 | 	add	local06, #1
24128     01 26 06 F1 | 	add	local05, #1
2412c     1C 20 86 F1 | 	sub	local02, #28
24130     68 FF 9F FD | 	jmp	#LR__3719
24134                 | LR__3721
24134                 | LR__3722
24134     1C 20 06 F1 | 	add	local02, #28
24138     10 27 02 F1 | 	add	local05, local02
2413c     13 01 48 FC | 	wrbyte	#0, local05
24140     1C 1E 06 F1 | 	add	local01, #28
24144     0F 25 02 FB | 	rdlong	local04, local01
24148     1C 1E 86 F1 | 	sub	local01, #28
2414c     0C 24 06 F1 | 	add	local04, #12
24150     12 37 CA FA | 	rdbyte	local13, local04 wz
24154     1C 20 86 F1 | 	sub	local02, #28
24158     0C 20 06 A1 |  if_e	add	local02, #12
2415c     10 01 48 AC |  if_e	wrbyte	#0, local02
24160     0C 20 86 A1 |  if_e	sub	local02, #12
24164                 | LR__3723
24164     1C 1E 06 F1 | 	add	local01, #28
24168     0F 35 02 FB | 	rdlong	local12, local01
2416c     0B 34 06 F1 | 	add	local12, #11
24170     1A 25 C2 FA | 	rdbyte	local04, local12
24174     3F 24 06 F5 | 	and	local04, #63
24178     08 20 06 F1 | 	add	local02, #8
2417c     10 25 42 FC | 	wrbyte	local04, local02
24180     08 20 86 F1 | 	sub	local02, #8
24184     0F 13 02 FB | 	rdlong	arg01, local01
24188     1C 12 06 F1 | 	add	arg01, #28
2418c                 | ' {
2418c                 | ' 
2418c                 | ' 	return *((DWORD*)ptr);
2418c     09 FB 01 FB | 	rdlong	result1, arg01
24190     10 FB 61 FC | 	wrlong	result1, local02
24194     0F 13 02 FB | 	rdlong	arg01, local01
24198     16 12 06 F1 | 	add	arg01, #22
2419c                 | ' {
2419c                 | ' 
2419c                 | ' 	return *((WORD*)ptr);
2419c     09 FB E1 FA | 	rdword	result1, arg01
241a0     06 20 06 F1 | 	add	local02, #6
241a4     10 FB 51 FC | 	wrword	result1, local02
241a8     0F 13 02 FB | 	rdlong	arg01, local01
241ac     18 12 06 F1 | 	add	arg01, #24
241b0                 | ' {
241b0                 | ' 
241b0                 | ' 	return *((WORD*)ptr);
241b0     09 FB E1 FA | 	rdword	result1, arg01
241b4     02 20 86 F1 | 	sub	local02, #2
241b8     10 FB 51 FC | 	wrword	result1, local02
241bc                 | LR__3724
241bc     A7 F0 03 F6 | 	mov	ptra, fp
241c0     B2 00 A0 FD | 	call	#popregs_
241c4                 | _fatfs_cc_get_fileinfo_ret
241c4     2D 00 64 FD | 	ret
241c8                 | 
241c8                 | _fatfs_cc_create_name
241c8     0D 4A 05 F6 | 	mov	COUNT_, #13
241cc     A8 00 A0 FD | 	call	#pushregs_
241d0     34 F0 07 F1 | 	add	ptra, #52
241d4     04 4E 05 F1 | 	add	fp, #4
241d8     A7 12 62 FC | 	wrlong	arg01, fp
241dc     04 4E 05 F1 | 	add	fp, #4
241e0     A7 14 62 FC | 	wrlong	arg02, fp
241e4     0A FB 01 FB | 	rdlong	result1, arg02
241e8     28 4E 05 F1 | 	add	fp, #40
241ec     A7 FA 61 FC | 	wrlong	result1, fp
241f0     2C 4E 85 F1 | 	sub	fp, #44
241f4     A7 FA 01 FB | 	rdlong	result1, fp
241f8     FD 1E 02 FB | 	rdlong	local01, result1
241fc     0C 1E 06 F1 | 	add	local01, #12
24200     0F 21 02 FB | 	rdlong	local02, local01
24204     14 4E 05 F1 | 	add	fp, #20
24208     A7 20 62 FC | 	wrlong	local02, fp
2420c     14 4E 05 F1 | 	add	fp, #20
24210     A7 00 68 FC | 	wrlong	#0, fp
24214     2C 4E 85 F1 | 	sub	fp, #44
24218                 | ' 
24218                 | ' 
24218                 | ' 
24218                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
24218                 | ' 	for (;;) {
24218                 | LR__3730
24218     30 4E 05 F1 | 	add	fp, #48
2421c     A7 12 02 F6 | 	mov	arg01, fp
24220     30 4E 85 F1 | 	sub	fp, #48
24224     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
24228     1C 4E 05 F1 | 	add	fp, #28
2422c     A7 FA 61 FC | 	wrlong	result1, fp
24230     1C 4E 85 F1 | 	sub	fp, #28
24234     FF FF 7F FF 
24238     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2423c     06 FA 05 A6 |  if_e	mov	result1, #6
24240     74 08 90 AD |  if_e	jmp	#LR__3770
24244     1C 4E 05 F1 | 	add	fp, #28
24248     A7 1E 02 FB | 	rdlong	local01, fp
2424c     1C 4E 85 F1 | 	sub	fp, #28
24250     80 00 00 FF 
24254     00 1E 16 F2 | 	cmp	local01, ##65536 wc
24258     3C 00 90 CD |  if_b	jmp	#LR__3731
2425c     18 4E 05 F1 | 	add	fp, #24
24260     A7 22 02 FB | 	rdlong	local03, fp
24264     14 4E 05 F1 | 	add	fp, #20
24268     A7 1E 02 FB | 	rdlong	local01, fp
2426c     0F 25 02 F6 | 	mov	local04, local01
24270     01 24 06 F1 | 	add	local04, #1
24274     A7 24 62 FC | 	wrlong	local04, fp
24278     01 1E 66 F0 | 	shl	local01, #1
2427c     11 1F 02 F1 | 	add	local01, local03
24280     10 4E 85 F1 | 	sub	fp, #16
24284     A7 26 02 FB | 	rdlong	local05, fp
24288     1C 4E 85 F1 | 	sub	fp, #28
2428c     13 29 02 F6 | 	mov	local06, local05
24290     10 28 46 F0 | 	shr	local06, #16
24294     0F 29 52 FC | 	wrword	local06, local01
24298                 | LR__3731
24298     1C 4E 05 F1 | 	add	fp, #28
2429c     A7 1E 02 FB | 	rdlong	local01, fp
242a0     08 4E 85 F1 | 	sub	fp, #8
242a4     A7 1E 52 FC | 	wrword	local01, fp
242a8     A7 1E E2 FA | 	rdword	local01, fp
242ac     14 4E 85 F1 | 	sub	fp, #20
242b0     20 1E 16 F2 | 	cmp	local01, #32 wc
242b4     B0 00 90 CD |  if_b	jmp	#LR__3733
242b8     14 4E 05 F1 | 	add	fp, #20
242bc     A7 1E E2 FA | 	rdword	local01, fp
242c0     14 4E 85 F1 | 	sub	fp, #20
242c4     2F 1E 0E F2 | 	cmp	local01, #47 wz
242c8     14 4E 05 51 |  if_ne	add	fp, #20
242cc     A7 24 E2 5A |  if_ne	rdword	local04, fp
242d0     14 4E 85 51 |  if_ne	sub	fp, #20
242d4     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
242d8     8C 00 90 AD |  if_e	jmp	#LR__3733
242dc     14 4E 05 F1 | 	add	fp, #20
242e0     A7 12 E2 FA | 	rdword	arg01, fp
242e4     14 4E 85 F1 | 	sub	fp, #20
242e8     80 12 16 F2 | 	cmp	arg01, #128 wc
242ec     24 00 90 3D |  if_ae	jmp	#LR__3732
242f0     51 01 00 FF 
242f4     1C 12 06 F6 | 	mov	arg01, ##@LR__4392
242f8     14 4E 05 F1 | 	add	fp, #20
242fc     A7 14 E2 FA | 	rdword	arg02, fp
24300     14 4E 85 F1 | 	sub	fp, #20
24304     FC D0 BF FD | 	call	#_fatfs_cc_strchr
24308     00 FA 0D F2 | 	cmp	result1, #0 wz
2430c     06 FA 05 56 |  if_ne	mov	result1, #6
24310     A4 07 90 5D |  if_ne	jmp	#LR__3770
24314                 | LR__3732
24314     2C 4E 05 F1 | 	add	fp, #44
24318     A7 28 02 FB | 	rdlong	local06, fp
2431c     2C 4E 85 F1 | 	sub	fp, #44
24320     FF 28 16 F2 | 	cmp	local06, #255 wc
24324     06 FA 05 36 |  if_ae	mov	result1, #6
24328     8C 07 90 3D |  if_ae	jmp	#LR__3770
2432c     18 4E 05 F1 | 	add	fp, #24
24330     A7 22 02 FB | 	rdlong	local03, fp
24334     14 4E 05 F1 | 	add	fp, #20
24338     A7 20 02 FB | 	rdlong	local02, fp
2433c     10 25 02 F6 | 	mov	local04, local02
24340     01 24 06 F1 | 	add	local04, #1
24344     A7 24 62 FC | 	wrlong	local04, fp
24348     10 1F 02 F6 | 	mov	local01, local02
2434c     01 1E 66 F0 | 	shl	local01, #1
24350     11 1F 02 F1 | 	add	local01, local03
24354     18 4E 85 F1 | 	sub	fp, #24
24358     A7 28 E2 FA | 	rdword	local06, fp
2435c     14 4E 85 F1 | 	sub	fp, #20
24360     0F 29 52 FC | 	wrword	local06, local01
24364     B0 FE 9F FD | 	jmp	#LR__3730
24368                 | LR__3733
24368     14 4E 05 F1 | 	add	fp, #20
2436c     A7 2A E2 FA | 	rdword	local07, fp
24370     14 4E 85 F1 | 	sub	fp, #20
24374     20 2A 16 F2 | 	cmp	local07, #32 wc
24378     10 4E 05 C1 |  if_b	add	fp, #16
2437c     A7 08 48 CC |  if_b	wrbyte	#4, fp
24380     10 4E 85 C1 |  if_b	sub	fp, #16
24384     74 00 90 CD |  if_b	jmp	#LR__3738
24388     97 24 48 FB | 	callpa	#(@LR__3736-@LR__3734)>>2,fcache_load_ptr_
2438c                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
2438c                 | LR__3734
2438c     30 4E 05 F1 | 	add	fp, #48
24390     A7 24 02 FB | 	rdlong	local04, fp
24394     30 4E 85 F1 | 	sub	fp, #48
24398     12 2B C2 FA | 	rdbyte	local07, local04
2439c     2F 2A 0E F2 | 	cmp	local07, #47 wz
243a0     18 00 90 AD |  if_e	jmp	#LR__3735
243a4     30 4E 05 F1 | 	add	fp, #48
243a8     A7 24 02 FB | 	rdlong	local04, fp
243ac     30 4E 85 F1 | 	sub	fp, #48
243b0     12 21 C2 FA | 	rdbyte	local02, local04
243b4     5C 20 0E F2 | 	cmp	local02, #92 wz
243b8     18 00 90 5D |  if_ne	jmp	#LR__3737
243bc                 | LR__3735
243bc     30 4E 05 F1 | 	add	fp, #48
243c0     A7 1E 02 FB | 	rdlong	local01, fp
243c4     01 1E 06 F1 | 	add	local01, #1
243c8     A7 1E 62 FC | 	wrlong	local01, fp
243cc     30 4E 85 F1 | 	sub	fp, #48
243d0     B8 FF 9F FD | 	jmp	#LR__3734
243d4                 | LR__3736
243d4                 | LR__3737
243d4     10 4E 05 F1 | 	add	fp, #16
243d8     A7 00 48 FC | 	wrbyte	#0, fp
243dc     20 4E 05 F1 | 	add	fp, #32
243e0     A7 28 02 FB | 	rdlong	local06, fp
243e4     30 4E 85 F1 | 	sub	fp, #48
243e8     14 2B C2 FA | 	rdbyte	local07, local06
243ec     20 2A 16 F2 | 	cmp	local07, #32 wc
243f0     10 4E 05 C1 |  if_b	add	fp, #16
243f4     A7 08 48 CC |  if_b	wrbyte	#4, fp
243f8     10 4E 85 C1 |  if_b	sub	fp, #16
243fc                 | LR__3738
243fc     08 4E 05 F1 | 	add	fp, #8
24400     A7 2A 02 FB | 	rdlong	local07, fp
24404     28 4E 05 F1 | 	add	fp, #40
24408     A7 1E 02 FB | 	rdlong	local01, fp
2440c     30 4E 85 F1 | 	sub	fp, #48
24410     15 1F 62 FC | 	wrlong	local01, local07
24414     97 38 48 FB | 	callpa	#(@LR__3740-@LR__3739)>>2,fcache_load_ptr_
24418                 | ' 	}
24418                 | ' 	*path = p;
24418                 | ' #line 2862 "ff.c"
24418                 | ' 	while (di) {
24418                 | LR__3739
24418     2C 4E 05 F1 | 	add	fp, #44
2441c     A7 2A 0A FB | 	rdlong	local07, fp wz
24420     2C 4E 85 F1 | 	sub	fp, #44
24424     60 00 90 AD |  if_e	jmp	#LR__3741
24428     18 4E 05 F1 | 	add	fp, #24
2442c     A7 28 02 FB | 	rdlong	local06, fp
24430     14 4E 05 F1 | 	add	fp, #20
24434     A7 24 02 FB | 	rdlong	local04, fp
24438     01 24 86 F1 | 	sub	local04, #1
2443c     01 24 66 F0 | 	shl	local04, #1
24440     14 25 02 F1 | 	add	local04, local06
24444     12 29 E2 FA | 	rdword	local06, local04
24448     18 4E 85 F1 | 	sub	fp, #24
2444c     A7 28 52 FC | 	wrword	local06, fp
24450     A7 2A E2 FA | 	rdword	local07, fp
24454     14 4E 85 F1 | 	sub	fp, #20
24458     20 2A 0E F2 | 	cmp	local07, #32 wz
2445c     14 4E 05 51 |  if_ne	add	fp, #20
24460     A7 1E E2 5A |  if_ne	rdword	local01, fp
24464     14 4E 85 51 |  if_ne	sub	fp, #20
24468     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
2446c     18 00 90 5D |  if_ne	jmp	#LR__3741
24470     2C 4E 05 F1 | 	add	fp, #44
24474     A7 1E 02 FB | 	rdlong	local01, fp
24478     01 1E 86 F1 | 	sub	local01, #1
2447c     A7 1E 62 FC | 	wrlong	local01, fp
24480     2C 4E 85 F1 | 	sub	fp, #44
24484     90 FF 9F FD | 	jmp	#LR__3739
24488                 | LR__3740
24488                 | LR__3741
24488     18 4E 05 F1 | 	add	fp, #24
2448c     A7 2C 02 FB | 	rdlong	local08, fp
24490     14 4E 05 F1 | 	add	fp, #20
24494     A7 24 02 FB | 	rdlong	local04, fp
24498     01 24 66 F0 | 	shl	local04, #1
2449c     16 25 02 F1 | 	add	local04, local08
244a0     12 01 58 FC | 	wrword	#0, local04
244a4     A7 2A 0A FB | 	rdlong	local07, fp wz
244a8     2C 4E 85 F1 | 	sub	fp, #44
244ac     06 FA 05 A6 |  if_e	mov	result1, #6
244b0     04 06 90 AD |  if_e	jmp	#LR__3770
244b4                 | ' 
244b4                 | ' 
244b4                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
244b4     28 4E 05 F1 | 	add	fp, #40
244b8     A7 00 68 FC | 	wrlong	#0, fp
244bc     28 4E 85 F1 | 	sub	fp, #40
244c0     97 22 48 FB | 	callpa	#(@LR__3743-@LR__3742)>>2,fcache_load_ptr_
244c4                 | LR__3742
244c4     18 4E 05 F1 | 	add	fp, #24
244c8     A7 2E 02 FB | 	rdlong	local09, fp
244cc     10 4E 05 F1 | 	add	fp, #16
244d0     A7 30 02 FB | 	rdlong	local10, fp
244d4     28 4E 85 F1 | 	sub	fp, #40
244d8     01 30 66 F0 | 	shl	local10, #1
244dc     17 31 02 F1 | 	add	local10, local09
244e0     18 33 E2 FA | 	rdword	local11, local10
244e4     20 32 0E F2 | 	cmp	local11, #32 wz
244e8     1C 00 90 5D |  if_ne	jmp	#LR__3744
244ec     28 4E 05 F1 | 	add	fp, #40
244f0     A7 34 02 FB | 	rdlong	local12, fp
244f4     1A 27 02 F6 | 	mov	local05, local12
244f8     01 26 06 F1 | 	add	local05, #1
244fc     A7 26 62 FC | 	wrlong	local05, fp
24500     28 4E 85 F1 | 	sub	fp, #40
24504     BC FF 9F FD | 	jmp	#LR__3742
24508                 | LR__3743
24508                 | LR__3744
24508     28 4E 05 F1 | 	add	fp, #40
2450c     A7 2A 02 FB | 	rdlong	local07, fp
24510     28 4E 85 F1 | 	sub	fp, #40
24514     01 2A 16 F2 | 	cmp	local07, #1 wc
24518     28 00 90 3D |  if_ae	jmp	#LR__3745
2451c     18 4E 05 F1 | 	add	fp, #24
24520     A7 22 02 FB | 	rdlong	local03, fp
24524     10 4E 05 F1 | 	add	fp, #16
24528     A7 2E 02 FB | 	rdlong	local09, fp
2452c     28 4E 85 F1 | 	sub	fp, #40
24530     01 2E 66 F0 | 	shl	local09, #1
24534     11 2F 02 F1 | 	add	local09, local03
24538     17 1F E2 FA | 	rdword	local01, local09
2453c     2E 1E 0E F2 | 	cmp	local01, #46 wz
24540     14 00 90 5D |  if_ne	jmp	#LR__3746
24544                 | LR__3745
24544     10 4E 05 F1 | 	add	fp, #16
24548     A7 2A C2 FA | 	rdbyte	local07, fp
2454c     03 2A 46 F5 | 	or	local07, #3
24550     A7 2A 42 FC | 	wrbyte	local07, fp
24554     10 4E 85 F1 | 	sub	fp, #16
24558                 | LR__3746
24558     97 2C 48 FB | 	callpa	#(@LR__3748-@LR__3747)>>2,fcache_load_ptr_
2455c                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
2455c                 | LR__3747
2455c     2C 4E 05 F1 | 	add	fp, #44
24560     A7 2A 02 FB | 	rdlong	local07, fp
24564     2C 4E 85 F1 | 	sub	fp, #44
24568     01 2A 16 F2 | 	cmp	local07, #1 wc
2456c     44 00 90 CD |  if_b	jmp	#LR__3749
24570     18 4E 05 F1 | 	add	fp, #24
24574     A7 28 02 FB | 	rdlong	local06, fp
24578     14 4E 05 F1 | 	add	fp, #20
2457c     A7 22 02 FB | 	rdlong	local03, fp
24580     2C 4E 85 F1 | 	sub	fp, #44
24584     01 22 86 F1 | 	sub	local03, #1
24588     01 22 66 F0 | 	shl	local03, #1
2458c     14 23 02 F1 | 	add	local03, local06
24590     11 1F E2 FA | 	rdword	local01, local03
24594     2E 1E 0E F2 | 	cmp	local01, #46 wz
24598     18 00 90 AD |  if_e	jmp	#LR__3749
2459c     2C 4E 05 F1 | 	add	fp, #44
245a0     A7 1E 02 FB | 	rdlong	local01, fp
245a4     01 1E 86 F1 | 	sub	local01, #1
245a8     A7 1E 62 FC | 	wrlong	local01, fp
245ac     2C 4E 85 F1 | 	sub	fp, #44
245b0     A8 FF 9F FD | 	jmp	#LR__3747
245b4                 | LR__3748
245b4                 | LR__3749
245b4     04 4E 05 F1 | 	add	fp, #4
245b8     A7 12 02 FB | 	rdlong	arg01, fp
245bc     04 4E 85 F1 | 	sub	fp, #4
245c0     20 12 06 F1 | 	add	arg01, #32
245c4     20 14 06 F6 | 	mov	arg02, #32
245c8     0B 16 06 F6 | 	mov	arg03, #11
245cc     09 37 02 F6 | 	mov	local13, arg01
245d0     98 00 A0 FD | 	call	#\builtin_bytefill_
245d4     1B FB 01 F6 | 	mov	result1, local13
245d8     0C 4E 05 F1 | 	add	fp, #12
245dc     A7 00 48 FC | 	wrbyte	#0, fp
245e0     A7 2A C2 FA | 	rdbyte	local07, fp
245e4     14 4E 05 F1 | 	add	fp, #20
245e8     A7 2A 62 FC | 	wrlong	local07, fp
245ec     04 4E 05 F1 | 	add	fp, #4
245f0     A7 10 68 FC | 	wrlong	#8, fp
245f4     24 4E 85 F1 | 	sub	fp, #36
245f8                 | ' 
245f8                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
245f8                 | ' 	i = b = 0; ni = 8;
245f8                 | ' 	for (;;) {
245f8                 | LR__3750
245f8     18 4E 05 F1 | 	add	fp, #24
245fc     A7 22 02 FB | 	rdlong	local03, fp
24600     10 4E 05 F1 | 	add	fp, #16
24604     A7 2E 02 FB | 	rdlong	local09, fp
24608     17 25 02 F6 | 	mov	local04, local09
2460c     01 24 06 F1 | 	add	local04, #1
24610     A7 24 62 FC | 	wrlong	local04, fp
24614     01 2E 66 F0 | 	shl	local09, #1
24618     11 2F 02 F1 | 	add	local09, local03
2461c     17 29 E2 FA | 	rdword	local06, local09
24620     14 4E 85 F1 | 	sub	fp, #20
24624     A7 28 52 FC | 	wrword	local06, fp
24628     A7 2A EA FA | 	rdword	local07, fp wz
2462c     14 4E 85 F1 | 	sub	fp, #20
24630     74 03 90 AD |  if_e	jmp	#LR__3766
24634     14 4E 05 F1 | 	add	fp, #20
24638     A7 2A E2 FA | 	rdword	local07, fp
2463c     14 4E 85 F1 | 	sub	fp, #20
24640     20 2A 0E F2 | 	cmp	local07, #32 wz
24644     30 00 90 AD |  if_e	jmp	#LR__3751
24648     14 4E 05 F1 | 	add	fp, #20
2464c     A7 1E E2 FA | 	rdword	local01, fp
24650     14 4E 85 F1 | 	sub	fp, #20
24654     2E 1E 0E F2 | 	cmp	local01, #46 wz
24658     34 00 90 5D |  if_ne	jmp	#LR__3752
2465c     28 4E 05 F1 | 	add	fp, #40
24660     A7 24 02 FB | 	rdlong	local04, fp
24664     04 4E 05 F1 | 	add	fp, #4
24668     A7 30 02 FB | 	rdlong	local10, fp
2466c     2C 4E 85 F1 | 	sub	fp, #44
24670     18 25 0A F2 | 	cmp	local04, local10 wz
24674     18 00 90 AD |  if_e	jmp	#LR__3752
24678                 | LR__3751
24678     10 4E 05 F1 | 	add	fp, #16
2467c     A7 2A C2 FA | 	rdbyte	local07, fp
24680     03 2A 46 F5 | 	or	local07, #3
24684     A7 2A 42 FC | 	wrbyte	local07, fp
24688     10 4E 85 F1 | 	sub	fp, #16
2468c                 | ' 			cf |=  0x01  |  0x02 ;
2468c                 | ' 			continue;
2468c     68 FF 9F FD | 	jmp	#LR__3750
24690                 | LR__3752
24690     20 4E 05 F1 | 	add	fp, #32
24694     A7 2A 02 FB | 	rdlong	local07, fp
24698     04 4E 05 F1 | 	add	fp, #4
2469c     A7 1E 02 FB | 	rdlong	local01, fp
246a0     24 4E 85 F1 | 	sub	fp, #36
246a4     0F 2B 12 F2 | 	cmp	local07, local01 wc
246a8     1C 00 90 3D |  if_ae	jmp	#LR__3753
246ac     28 4E 05 F1 | 	add	fp, #40
246b0     A7 2C 02 FB | 	rdlong	local08, fp
246b4     04 4E 05 F1 | 	add	fp, #4
246b8     A7 30 02 FB | 	rdlong	local10, fp
246bc     2C 4E 85 F1 | 	sub	fp, #44
246c0     18 2D 0A F2 | 	cmp	local08, local10 wz
246c4     B0 00 90 5D |  if_ne	jmp	#LR__3755
246c8                 | LR__3753
246c8     24 4E 05 F1 | 	add	fp, #36
246cc     A7 2A 02 FB | 	rdlong	local07, fp
246d0     24 4E 85 F1 | 	sub	fp, #36
246d4     0B 2A 0E F2 | 	cmp	local07, #11 wz
246d8     18 00 90 5D |  if_ne	jmp	#LR__3754
246dc     10 4E 05 F1 | 	add	fp, #16
246e0     A7 2A C2 FA | 	rdbyte	local07, fp
246e4     03 2A 46 F5 | 	or	local07, #3
246e8     A7 2A 42 FC | 	wrbyte	local07, fp
246ec     10 4E 85 F1 | 	sub	fp, #16
246f0                 | ' 				cf |=  0x01  |  0x02 ;
246f0                 | ' 				break;
246f0     B4 02 90 FD | 	jmp	#LR__3766
246f4                 | LR__3754
246f4     28 4E 05 F1 | 	add	fp, #40
246f8     A7 2A 02 FB | 	rdlong	local07, fp
246fc     04 4E 05 F1 | 	add	fp, #4
24700     A7 1E 02 FB | 	rdlong	local01, fp
24704     2C 4E 85 F1 | 	sub	fp, #44
24708     0F 2B 0A F2 | 	cmp	local07, local01 wz
2470c     10 4E 05 51 |  if_ne	add	fp, #16
24710     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
24714     03 2A 46 55 |  if_ne	or	local07, #3
24718     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2471c     10 4E 85 51 |  if_ne	sub	fp, #16
24720     28 4E 05 F1 | 	add	fp, #40
24724     A7 2A 02 FB | 	rdlong	local07, fp
24728     04 4E 05 F1 | 	add	fp, #4
2472c     A7 20 02 FB | 	rdlong	local02, fp
24730     2C 4E 85 F1 | 	sub	fp, #44
24734     10 2B 1A F2 | 	cmp	local07, local02 wcz
24738     6C 02 90 1D |  if_a	jmp	#LR__3766
2473c     2C 4E 05 F1 | 	add	fp, #44
24740     A7 2A 02 FB | 	rdlong	local07, fp
24744     04 4E 85 F1 | 	sub	fp, #4
24748     A7 2A 62 FC | 	wrlong	local07, fp
2474c     08 4E 85 F1 | 	sub	fp, #8
24750     A7 10 68 FC | 	wrlong	#8, fp
24754     04 4E 05 F1 | 	add	fp, #4
24758     A7 16 68 FC | 	wrlong	#11, fp
2475c     18 4E 85 F1 | 	sub	fp, #24
24760     A7 32 C2 FA | 	rdbyte	local11, fp
24764     19 2B E2 F8 | 	getbyte	local07, local11, #0
24768     02 2A 66 F0 | 	shl	local07, #2
2476c     A7 2A 42 FC | 	wrbyte	local07, fp
24770     0C 4E 85 F1 | 	sub	fp, #12
24774                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
24774                 | ' 			continue;
24774     80 FE 9F FD | 	jmp	#LR__3750
24778                 | LR__3755
24778     14 4E 05 F1 | 	add	fp, #20
2477c     A7 2A E2 FA | 	rdword	local07, fp
24780     14 4E 85 F1 | 	sub	fp, #20
24784     80 2A 16 F2 | 	cmp	local07, #128 wc
24788     6C 00 90 CD |  if_b	jmp	#LR__3757
2478c     10 4E 05 F1 | 	add	fp, #16
24790     A7 2A C2 FA | 	rdbyte	local07, fp
24794     02 2A 46 F5 | 	or	local07, #2
24798     A7 2A 42 FC | 	wrbyte	local07, fp
2479c     04 4E 05 F1 | 	add	fp, #4
247a0     A7 12 E2 FA | 	rdword	arg01, fp
247a4     14 4E 85 F1 | 	sub	fp, #20
247a8     01 00 00 FF 
247ac     52 15 06 F6 | 	mov	arg02, ##850
247b0     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
247b4     14 4E 05 F1 | 	add	fp, #20
247b8     A7 FA 51 FC | 	wrword	result1, fp
247bc     A7 2A E2 FA | 	rdword	local07, fp
247c0     14 4E 85 F1 | 	sub	fp, #20
247c4     80 2A CE F7 | 	test	local07, #128 wz
247c8     2C 00 90 AD |  if_e	jmp	#LR__3756
247cc     14 4E 05 F1 | 	add	fp, #20
247d0     A7 20 E2 FA | 	rdword	local02, fp
247d4     7F 20 06 F5 | 	and	local02, #127
247d8     01 00 00 FF 
247dc     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
247e0     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
247e4     10 2B C2 FA | 	rdbyte	local07, local02
247e8     A7 2A 52 FC | 	wrword	local07, fp
247ec     14 4E 85 F1 | 	sub	fp, #20
247f0     01 00 00 FF 
247f4     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
247f8                 | LR__3756
247f8                 | LR__3757
247f8     14 4E 05 F1 | 	add	fp, #20
247fc     A7 2A E2 FA | 	rdword	local07, fp
24800     14 4E 85 F1 | 	sub	fp, #20
24804     00 2B 16 F2 | 	cmp	local07, #256 wc
24808     88 00 90 CD |  if_b	jmp	#LR__3759
2480c     24 4E 05 F1 | 	add	fp, #36
24810     A7 2A 02 FB | 	rdlong	local07, fp
24814     01 2A 86 F1 | 	sub	local07, #1
24818     04 4E 85 F1 | 	sub	fp, #4
2481c     A7 20 02 FB | 	rdlong	local02, fp
24820     20 4E 85 F1 | 	sub	fp, #32
24824     15 21 12 F2 | 	cmp	local02, local07 wc
24828     2C 00 90 CD |  if_b	jmp	#LR__3758
2482c     10 4E 05 F1 | 	add	fp, #16
24830     A7 32 C2 FA | 	rdbyte	local11, fp
24834     19 2B E2 F8 | 	getbyte	local07, local11, #0
24838     03 2A 46 F5 | 	or	local07, #3
2483c     A7 2A 42 FC | 	wrbyte	local07, fp
24840     14 4E 05 F1 | 	add	fp, #20
24844     A7 2A 02 FB | 	rdlong	local07, fp
24848     04 4E 85 F1 | 	sub	fp, #4
2484c     A7 2A 62 FC | 	wrlong	local07, fp
24850     20 4E 85 F1 | 	sub	fp, #32
24854                 | ' 				cf |=  0x01  |  0x02 ;
24854                 | ' 				i = ni; continue;
24854     A0 FD 9F FD | 	jmp	#LR__3750
24858                 | LR__3758
24858     04 4E 05 F1 | 	add	fp, #4
2485c     A7 2E 02 FB | 	rdlong	local09, fp
24860     1C 4E 05 F1 | 	add	fp, #28
24864     A7 30 02 FB | 	rdlong	local10, fp
24868     18 25 02 F6 | 	mov	local04, local10
2486c     01 24 06 F1 | 	add	local04, #1
24870     A7 24 62 FC | 	wrlong	local04, fp
24874     20 2E 06 F1 | 	add	local09, #32
24878     17 31 02 F1 | 	add	local10, local09
2487c     0C 4E 85 F1 | 	sub	fp, #12
24880     A7 22 E2 FA | 	rdword	local03, fp
24884     14 4E 85 F1 | 	sub	fp, #20
24888     08 22 46 F0 | 	shr	local03, #8
2488c     18 23 42 FC | 	wrbyte	local03, local10
24890     D4 00 90 FD | 	jmp	#LR__3765
24894                 | LR__3759
24894     14 4E 05 F1 | 	add	fp, #20
24898     A7 2A EA FA | 	rdword	local07, fp wz
2489c     14 4E 85 F1 | 	sub	fp, #20
248a0     20 00 90 AD |  if_e	jmp	#LR__3760
248a4     51 01 00 FF 
248a8     25 12 06 F6 | 	mov	arg01, ##@LR__4393
248ac     14 4E 05 F1 | 	add	fp, #20
248b0     A7 14 E2 FA | 	rdword	arg02, fp
248b4     14 4E 85 F1 | 	sub	fp, #20
248b8     48 CB BF FD | 	call	#_fatfs_cc_strchr
248bc     00 FA 0D F2 | 	cmp	result1, #0 wz
248c0     20 00 90 AD |  if_e	jmp	#LR__3761
248c4                 | LR__3760
248c4     14 4E 05 F1 | 	add	fp, #20
248c8     A7 BE 58 FC | 	wrword	#95, fp
248cc     04 4E 85 F1 | 	sub	fp, #4
248d0     A7 2A C2 FA | 	rdbyte	local07, fp
248d4     03 2A 46 F5 | 	or	local07, #3
248d8     A7 2A 42 FC | 	wrbyte	local07, fp
248dc     10 4E 85 F1 | 	sub	fp, #16
248e0     84 00 90 FD | 	jmp	#LR__3764
248e4                 | LR__3761
248e4     14 4E 05 F1 | 	add	fp, #20
248e8     A7 2A E2 FA | 	rdword	local07, fp
248ec     14 4E 85 F1 | 	sub	fp, #20
248f0     41 2A 16 F2 | 	cmp	local07, #65 wc
248f4     24 00 90 CD |  if_b	jmp	#LR__3762
248f8     14 4E 05 F1 | 	add	fp, #20
248fc     A7 1E E2 FA | 	rdword	local01, fp
24900     14 4E 85 F1 | 	sub	fp, #20
24904     5B 1E 16 F2 | 	cmp	local01, #91 wc
24908     0C 4E 05 C1 |  if_b	add	fp, #12
2490c     A7 2A C2 CA |  if_b	rdbyte	local07, fp
24910     02 2A 46 C5 |  if_b	or	local07, #2
24914     A7 2A 42 CC |  if_b	wrbyte	local07, fp
24918     0C 4E 85 C1 |  if_b	sub	fp, #12
2491c                 | LR__3762
2491c     14 4E 05 F1 | 	add	fp, #20
24920     A7 2A E2 FA | 	rdword	local07, fp
24924     14 4E 85 F1 | 	sub	fp, #20
24928     61 2A 16 F2 | 	cmp	local07, #97 wc
2492c     38 00 90 CD |  if_b	jmp	#LR__3763
24930     14 4E 05 F1 | 	add	fp, #20
24934     A7 1E E2 FA | 	rdword	local01, fp
24938     14 4E 85 F1 | 	sub	fp, #20
2493c     7B 1E 16 F2 | 	cmp	local01, #123 wc
24940     24 00 90 3D |  if_ae	jmp	#LR__3763
24944     0C 4E 05 F1 | 	add	fp, #12
24948     A7 2A C2 FA | 	rdbyte	local07, fp
2494c     01 2A 46 F5 | 	or	local07, #1
24950     A7 2A 42 FC | 	wrbyte	local07, fp
24954     08 4E 05 F1 | 	add	fp, #8
24958     A7 2A E2 FA | 	rdword	local07, fp
2495c     20 2A 86 F1 | 	sub	local07, #32
24960     A7 2A 52 FC | 	wrword	local07, fp
24964     14 4E 85 F1 | 	sub	fp, #20
24968                 | LR__3763
24968                 | LR__3764
24968                 | LR__3765
24968     04 4E 05 F1 | 	add	fp, #4
2496c     A7 32 02 FB | 	rdlong	local11, fp
24970     19 2F 02 F6 | 	mov	local09, local11
24974     1C 4E 05 F1 | 	add	fp, #28
24978     A7 20 02 FB | 	rdlong	local02, fp
2497c     10 25 02 F6 | 	mov	local04, local02
24980     01 24 06 F1 | 	add	local04, #1
24984     A7 24 62 FC | 	wrlong	local04, fp
24988     10 31 02 F6 | 	mov	local10, local02
2498c     20 2E 06 F1 | 	add	local09, #32
24990     17 31 02 F1 | 	add	local10, local09
24994     0C 4E 85 F1 | 	sub	fp, #12
24998     A7 22 E2 FA | 	rdword	local03, fp
2499c     14 4E 85 F1 | 	sub	fp, #20
249a0     18 23 42 FC | 	wrbyte	local03, local10
249a4     50 FC 9F FD | 	jmp	#LR__3750
249a8                 | LR__3766
249a8     04 4E 05 F1 | 	add	fp, #4
249ac     A7 32 02 FB | 	rdlong	local11, fp
249b0     04 4E 85 F1 | 	sub	fp, #4
249b4     20 32 06 F1 | 	add	local11, #32
249b8     19 2B C2 FA | 	rdbyte	local07, local11
249bc     E5 2A 0E F2 | 	cmp	local07, #229 wz
249c0     04 4E 05 A1 |  if_e	add	fp, #4
249c4     A7 2A 02 AB |  if_e	rdlong	local07, fp
249c8     04 4E 85 A1 |  if_e	sub	fp, #4
249cc     20 2A 06 A1 |  if_e	add	local07, #32
249d0     15 0B 48 AC |  if_e	wrbyte	#5, local07
249d4     24 4E 05 F1 | 	add	fp, #36
249d8     A7 2A 02 FB | 	rdlong	local07, fp
249dc     24 4E 85 F1 | 	sub	fp, #36
249e0     08 2A 0E F2 | 	cmp	local07, #8 wz
249e4     0C 4E 05 A1 |  if_e	add	fp, #12
249e8     A7 2A C2 AA |  if_e	rdbyte	local07, fp
249ec     02 2A 66 A0 |  if_e	shl	local07, #2
249f0     A7 2A 42 AC |  if_e	wrbyte	local07, fp
249f4     0C 4E 85 A1 |  if_e	sub	fp, #12
249f8     0C 4E 05 F1 | 	add	fp, #12
249fc     A7 2A C2 FA | 	rdbyte	local07, fp
24a00     0C 4E 85 F1 | 	sub	fp, #12
24a04     0C 2A 06 F5 | 	and	local07, #12
24a08     0C 2A 0E F2 | 	cmp	local07, #12 wz
24a0c     18 00 90 AD |  if_e	jmp	#LR__3767
24a10     0C 4E 05 F1 | 	add	fp, #12
24a14     A7 1E C2 FA | 	rdbyte	local01, fp
24a18     0C 4E 85 F1 | 	sub	fp, #12
24a1c     03 1E 06 F5 | 	and	local01, #3
24a20     03 1E 0E F2 | 	cmp	local01, #3 wz
24a24     14 00 90 5D |  if_ne	jmp	#LR__3768
24a28                 | LR__3767
24a28     10 4E 05 F1 | 	add	fp, #16
24a2c     A7 2A C2 FA | 	rdbyte	local07, fp
24a30     02 2A 46 F5 | 	or	local07, #2
24a34     A7 2A 42 FC | 	wrbyte	local07, fp
24a38     10 4E 85 F1 | 	sub	fp, #16
24a3c                 | LR__3768
24a3c     10 4E 05 F1 | 	add	fp, #16
24a40     A7 2A C2 FA | 	rdbyte	local07, fp
24a44     10 4E 85 F1 | 	sub	fp, #16
24a48     02 2A CE F7 | 	test	local07, #2 wz
24a4c     48 00 90 5D |  if_ne	jmp	#LR__3769
24a50     0C 4E 05 F1 | 	add	fp, #12
24a54     A7 2A C2 FA | 	rdbyte	local07, fp
24a58     0C 4E 85 F1 | 	sub	fp, #12
24a5c     01 2A CE F7 | 	test	local07, #1 wz
24a60     10 4E 05 51 |  if_ne	add	fp, #16
24a64     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
24a68     10 2A 46 55 |  if_ne	or	local07, #16
24a6c     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
24a70     10 4E 85 51 |  if_ne	sub	fp, #16
24a74     0C 4E 05 F1 | 	add	fp, #12
24a78     A7 2A C2 FA | 	rdbyte	local07, fp
24a7c     0C 4E 85 F1 | 	sub	fp, #12
24a80     04 2A CE F7 | 	test	local07, #4 wz
24a84     10 4E 05 51 |  if_ne	add	fp, #16
24a88     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
24a8c     08 2A 46 55 |  if_ne	or	local07, #8
24a90     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
24a94     10 4E 85 51 |  if_ne	sub	fp, #16
24a98                 | LR__3769
24a98     04 4E 05 F1 | 	add	fp, #4
24a9c     A7 2A 02 FB | 	rdlong	local07, fp
24aa0     0C 4E 05 F1 | 	add	fp, #12
24aa4     A7 1E C2 FA | 	rdbyte	local01, fp
24aa8     10 4E 85 F1 | 	sub	fp, #16
24aac     2B 2A 06 F1 | 	add	local07, #43
24ab0     15 1F 42 FC | 	wrbyte	local01, local07
24ab4                 | ' 	}
24ab4                 | ' 
24ab4                 | ' 	dp->fn[ 11 ] = cf;
24ab4                 | ' 
24ab4                 | ' 	return FR_OK;
24ab4     00 FA 05 F6 | 	mov	result1, #0
24ab8                 | LR__3770
24ab8     A7 F0 03 F6 | 	mov	ptra, fp
24abc     B2 00 A0 FD | 	call	#popregs_
24ac0                 | _fatfs_cc_create_name_ret
24ac0     2D 00 64 FD | 	ret
24ac4                 | 
24ac4                 | _fatfs_cc_follow_path
24ac4     02 4A 05 F6 | 	mov	COUNT_, #2
24ac8     A8 00 A0 FD | 	call	#pushregs_
24acc     18 F0 07 F1 | 	add	ptra, #24
24ad0     04 4E 05 F1 | 	add	fp, #4
24ad4     A7 12 62 FC | 	wrlong	arg01, fp
24ad8     04 4E 05 F1 | 	add	fp, #4
24adc     A7 14 62 FC | 	wrlong	arg02, fp
24ae0     04 4E 85 F1 | 	sub	fp, #4
24ae4     A7 FA 01 FB | 	rdlong	result1, fp
24ae8     FD 1E 02 FB | 	rdlong	local01, result1
24aec     10 4E 05 F1 | 	add	fp, #16
24af0     A7 1E 62 FC | 	wrlong	local01, fp
24af4     14 4E 85 F1 | 	sub	fp, #20
24af8     97 24 48 FB | 	callpa	#(@LR__3782-@LR__3780)>>2,fcache_load_ptr_
24afc                 | ' )
24afc                 | ' {
24afc                 | ' 	FRESULT res;
24afc                 | ' 	BYTE ns;
24afc                 | ' 	FATFS *fs = dp->obj.fs;
24afc                 | ' #line 3034 "ff.c"
24afc                 | ' 	{
24afc                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
24afc                 | LR__3780
24afc     08 4E 05 F1 | 	add	fp, #8
24b00     A7 1E 02 FB | 	rdlong	local01, fp
24b04     08 4E 85 F1 | 	sub	fp, #8
24b08     0F 1F C2 FA | 	rdbyte	local01, local01
24b0c     2F 1E 0E F2 | 	cmp	local01, #47 wz
24b10     18 00 90 AD |  if_e	jmp	#LR__3781
24b14     08 4E 05 F1 | 	add	fp, #8
24b18     A7 1E 02 FB | 	rdlong	local01, fp
24b1c     08 4E 85 F1 | 	sub	fp, #8
24b20     0F 1F C2 FA | 	rdbyte	local01, local01
24b24     5C 1E 0E F2 | 	cmp	local01, #92 wz
24b28     18 00 90 5D |  if_ne	jmp	#LR__3783
24b2c                 | LR__3781
24b2c     08 4E 05 F1 | 	add	fp, #8
24b30     A7 1E 02 FB | 	rdlong	local01, fp
24b34     01 1E 06 F1 | 	add	local01, #1
24b38     A7 1E 62 FC | 	wrlong	local01, fp
24b3c     08 4E 85 F1 | 	sub	fp, #8
24b40     B8 FF 9F FD | 	jmp	#LR__3780
24b44                 | LR__3782
24b44                 | LR__3783
24b44     04 4E 05 F1 | 	add	fp, #4
24b48     A7 1E 02 FB | 	rdlong	local01, fp
24b4c     08 1E 06 F1 | 	add	local01, #8
24b50     0F 01 68 FC | 	wrlong	#0, local01
24b54     04 4E 05 F1 | 	add	fp, #4
24b58     A7 1E 02 FB | 	rdlong	local01, fp
24b5c     08 4E 85 F1 | 	sub	fp, #8
24b60     0F 1F C2 FA | 	rdbyte	local01, local01
24b64     20 1E 16 F2 | 	cmp	local01, #32 wc
24b68     30 00 90 3D |  if_ae	jmp	#LR__3784
24b6c     04 4E 05 F1 | 	add	fp, #4
24b70     A7 1E 02 FB | 	rdlong	local01, fp
24b74     2B 1E 06 F1 | 	add	local01, #43
24b78     0F 01 49 FC | 	wrbyte	#128, local01
24b7c     A7 12 02 FB | 	rdlong	arg01, fp
24b80     04 4E 85 F1 | 	sub	fp, #4
24b84     00 14 06 F6 | 	mov	arg02, #0
24b88     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
24b8c     0C 4E 05 F1 | 	add	fp, #12
24b90     A7 FA 61 FC | 	wrlong	result1, fp
24b94     0C 4E 85 F1 | 	sub	fp, #12
24b98     1C 01 90 FD | 	jmp	#LR__3788
24b9c                 | LR__3784
24b9c                 | ' 		for (;;) {
24b9c                 | LR__3785
24b9c     04 4E 05 F1 | 	add	fp, #4
24ba0     A7 12 02 FB | 	rdlong	arg01, fp
24ba4     04 4E 05 F1 | 	add	fp, #4
24ba8     A7 14 02 F6 | 	mov	arg02, fp
24bac     08 4E 85 F1 | 	sub	fp, #8
24bb0     14 F6 BF FD | 	call	#_fatfs_cc_create_name
24bb4     0C 4E 05 F1 | 	add	fp, #12
24bb8     A7 FA 61 FC | 	wrlong	result1, fp
24bbc     00 FA 4D F2 | 	cmps	result1, #0 wz
24bc0     0C 4E 85 F1 | 	sub	fp, #12
24bc4     F0 00 90 5D |  if_ne	jmp	#LR__3787
24bc8     04 4E 05 F1 | 	add	fp, #4
24bcc     A7 12 02 FB | 	rdlong	arg01, fp
24bd0     04 4E 85 F1 | 	sub	fp, #4
24bd4     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
24bd8     0C 4E 05 F1 | 	add	fp, #12
24bdc     A7 FA 61 FC | 	wrlong	result1, fp
24be0     08 4E 85 F1 | 	sub	fp, #8
24be4     A7 1E 02 FB | 	rdlong	local01, fp
24be8     2B 1E 06 F1 | 	add	local01, #43
24bec     0F 1F C2 FA | 	rdbyte	local01, local01
24bf0     0C 4E 05 F1 | 	add	fp, #12
24bf4     A7 1E 42 FC | 	wrbyte	local01, fp
24bf8     04 4E 85 F1 | 	sub	fp, #4
24bfc     A7 1E 0A FB | 	rdlong	local01, fp wz
24c00     0C 4E 85 F1 | 	sub	fp, #12
24c04     34 00 90 AD |  if_e	jmp	#LR__3786
24c08     0C 4E 05 F1 | 	add	fp, #12
24c0c     A7 1E 02 FB | 	rdlong	local01, fp
24c10     0C 4E 85 F1 | 	sub	fp, #12
24c14     04 1E 0E F2 | 	cmp	local01, #4 wz
24c18     9C 00 90 5D |  if_ne	jmp	#LR__3787
24c1c     10 4E 05 F1 | 	add	fp, #16
24c20     A7 1E C2 FA | 	rdbyte	local01, fp
24c24     10 4E 85 F1 | 	sub	fp, #16
24c28     04 1E CE F7 | 	test	local01, #4 wz
24c2c     0C 4E 05 A1 |  if_e	add	fp, #12
24c30     A7 0A 68 AC |  if_e	wrlong	#5, fp
24c34     0C 4E 85 A1 |  if_e	sub	fp, #12
24c38                 | ' 					}
24c38                 | ' 				}
24c38                 | ' 				break;
24c38     7C 00 90 FD | 	jmp	#LR__3787
24c3c                 | LR__3786
24c3c     10 4E 05 F1 | 	add	fp, #16
24c40     A7 1E C2 FA | 	rdbyte	local01, fp
24c44     10 4E 85 F1 | 	sub	fp, #16
24c48     04 1E CE F7 | 	test	local01, #4 wz
24c4c     68 00 90 5D |  if_ne	jmp	#LR__3787
24c50     04 4E 05 F1 | 	add	fp, #4
24c54     A7 1E 02 FB | 	rdlong	local01, fp
24c58     04 4E 85 F1 | 	sub	fp, #4
24c5c     06 1E 06 F1 | 	add	local01, #6
24c60     0F 1F C2 FA | 	rdbyte	local01, local01
24c64     10 1E CE F7 | 	test	local01, #16 wz
24c68     0C 4E 05 A1 |  if_e	add	fp, #12
24c6c     A7 0A 68 AC |  if_e	wrlong	#5, fp
24c70     0C 4E 85 A1 |  if_e	sub	fp, #12
24c74                 | ' 				res = FR_NO_PATH; break;
24c74     40 00 90 AD |  if_e	jmp	#LR__3787
24c78     04 4E 05 F1 | 	add	fp, #4
24c7c     A7 20 02 FB | 	rdlong	local02, fp
24c80     10 1F 02 F6 | 	mov	local01, local02
24c84     10 4E 05 F1 | 	add	fp, #16
24c88     A7 14 02 FB | 	rdlong	arg02, fp
24c8c     0A 13 02 F6 | 	mov	arg01, arg02
24c90     34 14 06 F1 | 	add	arg02, #52
24c94     14 4E 85 F1 | 	sub	fp, #20
24c98     10 20 06 F1 | 	add	local02, #16
24c9c     10 21 02 FB | 	rdlong	local02, local02
24ca0     FF 21 06 F5 | 	and	local02, #511
24ca4     10 15 02 F1 | 	add	arg02, local02
24ca8     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
24cac     08 1E 06 F1 | 	add	local01, #8
24cb0     0F FB 61 FC | 	wrlong	result1, local01
24cb4     E4 FE 9F FD | 	jmp	#LR__3785
24cb8                 | LR__3787
24cb8                 | LR__3788
24cb8                 | ' 			}
24cb8                 | ' #line 3090 "ff.c"
24cb8                 | ' 			{
24cb8                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
24cb8                 | ' 			}
24cb8                 | ' 		}
24cb8                 | ' 	}
24cb8                 | ' 
24cb8                 | ' 	return res;
24cb8     0C 4E 05 F1 | 	add	fp, #12
24cbc     A7 FA 01 FB | 	rdlong	result1, fp
24cc0     0C 4E 85 F1 | 	sub	fp, #12
24cc4     A7 F0 03 F6 | 	mov	ptra, fp
24cc8     B2 00 A0 FD | 	call	#popregs_
24ccc                 | _fatfs_cc_follow_path_ret
24ccc     2D 00 64 FD | 	ret
24cd0                 | 
24cd0                 | _fatfs_cc_get_ldnumber
24cd0     01 00 66 F6 | 	neg	_var01, #1
24cd4     09 03 0A FB | 	rdlong	_var02, arg01 wz
24cd8     01 05 02 F6 | 	mov	_var03, _var02
24cdc     01 FA 65 A6 |  if_e	neg	result1, #1
24ce0     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
24ce4     97 10 48 FB | 	callpa	#(@LR__3791-@LR__3790)>>2,fcache_load_ptr_
24ce8                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
24ce8                 | LR__3790
24ce8     02 07 C2 FA | 	rdbyte	_var04, _var03
24cec     03 FB E1 F8 | 	getbyte	result1, _var04, #0
24cf0     20 FA 15 F2 | 	cmp	result1, #32 wc
24cf4     01 04 06 F1 | 	add	_var03, #1
24cf8     03 09 02 36 |  if_ae	mov	_var05, _var04
24cfc     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
24d00     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
24d04     E0 FF 9F 1D |  if_a	jmp	#LR__3790
24d08                 | LR__3791
24d08     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
24d0c     3A 06 0E F2 | 	cmp	_var04, #58 wz
24d10     40 00 90 5D |  if_ne	jmp	#LR__3793
24d14     01 0A 06 F6 | 	mov	_var06, #1
24d18     01 09 C2 FA | 	rdbyte	_var05, _var02
24d1c     30 08 16 F2 | 	cmp	_var05, #48 wc
24d20     1C 00 90 CD |  if_b	jmp	#LR__3792
24d24     01 09 C2 FA | 	rdbyte	_var05, _var02
24d28     3A 08 16 F2 | 	cmp	_var05, #58 wc
24d2c     01 0D 02 C6 |  if_b	mov	_var07, _var02
24d30     02 0C 06 C1 |  if_b	add	_var07, #2
24d34     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
24d38     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
24d3c     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
24d40                 | LR__3792
24d40     01 0A 56 F2 | 	cmps	_var06, #1 wc
24d44     05 01 02 C6 |  if_b	mov	_var01, _var06
24d48     09 05 62 CC |  if_b	wrlong	_var03, arg01
24d4c                 | ' 			vol = i;
24d4c                 | ' 			*path = tt;
24d4c                 | ' 		}
24d4c                 | ' 		return vol;
24d4c     00 FB 01 F6 | 	mov	result1, _var01
24d50     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
24d54                 | LR__3793
24d54                 | ' 	}
24d54                 | ' #line 3170 "ff.c"
24d54                 | ' 	vol = 0;
24d54                 | ' 
24d54                 | ' 	return vol;
24d54     00 FA 05 F6 | 	mov	result1, #0
24d58                 | _fatfs_cc_get_ldnumber_ret
24d58     2D 00 64 FD | 	ret
24d5c                 | 
24d5c                 | _fatfs_cc_check_fs
24d5c     04 4A 05 F6 | 	mov	COUNT_, #4
24d60     A8 00 A0 FD | 	call	#pushregs_
24d64     09 1F 02 F6 | 	mov	local01, arg01
24d68     03 1E 06 F1 | 	add	local01, #3
24d6c     0F 01 48 FC | 	wrbyte	#0, local01
24d70     2D 1E 06 F1 | 	add	local01, #45
24d74     FF FF FF FF 
24d78     0F FF 6B FC | 	wrlong	##-1, local01
24d7c     30 1E 86 F1 | 	sub	local01, #48
24d80     0F 13 02 F6 | 	mov	arg01, local01
24d84     18 D5 BF FD | 	call	#_fatfs_cc_move_window
24d88     00 FA 0D F2 | 	cmp	result1, #0 wz
24d8c     04 FA 05 56 |  if_ne	mov	result1, #4
24d90     94 01 90 5D |  if_ne	jmp	#LR__3804
24d94     34 1E 06 F1 | 	add	local01, #52
24d98     0F 13 02 F6 | 	mov	arg01, local01
24d9c     FE 13 06 F1 | 	add	arg01, #510
24da0                 | ' {
24da0                 | ' 
24da0                 | ' 	return *((WORD*)ptr);
24da0     09 21 E2 FA | 	rdword	local02, arg01
24da4     0F 23 C2 FA | 	rdbyte	local03, local01
24da8     34 1E 86 F1 | 	sub	local01, #52
24dac     11 25 E2 F8 | 	getbyte	local04, local03, #0
24db0     EB 24 0E F2 | 	cmp	local04, #235 wz
24db4     11 17 02 56 |  if_ne	mov	arg03, local03
24db8     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
24dbc     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
24dc0     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
24dc4     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
24dc8     44 01 90 5D |  if_ne	jmp	#LR__3803
24dcc     10 25 32 F9 | 	getword	local04, local02, #0
24dd0     55 00 00 FF 
24dd4     55 24 0E F2 | 	cmp	local04, ##43605 wz
24dd8     2C 00 90 5D |  if_ne	jmp	#LR__3800
24ddc     34 1E 06 F1 | 	add	local01, #52
24de0     0F 13 02 F6 | 	mov	arg01, local01
24de4     34 1E 86 F1 | 	sub	local01, #52
24de8     52 12 06 F1 | 	add	arg01, #82
24dec     51 01 00 FF 
24df0     2C 14 06 F6 | 	mov	arg02, ##@LR__4394
24df4     08 16 06 F6 | 	mov	arg03, #8
24df8     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
24dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
24e00                 | ' 			return 0;
24e00     00 FA 05 A6 |  if_e	mov	result1, #0
24e04     20 01 90 AD |  if_e	jmp	#LR__3804
24e08                 | LR__3800
24e08     34 1E 06 F1 | 	add	local01, #52
24e0c     0F 13 02 F6 | 	mov	arg01, local01
24e10     0B 12 06 F1 | 	add	arg01, #11
24e14                 | ' {
24e14                 | ' 
24e14                 | ' 	return *((WORD*)ptr);
24e14     09 FB E1 FA | 	rdword	result1, arg01
24e18     0D 1E 06 F1 | 	add	local01, #13
24e1c     0F 23 C2 FA | 	rdbyte	local03, local01
24e20     41 1E 86 F1 | 	sub	local01, #65
24e24     FD 24 32 F9 | 	getword	local04, result1, #0
24e28     FD 14 32 F9 | 	getword	arg02, result1, #0
24e2c     01 14 86 F1 | 	sub	arg02, #1
24e30     0A 25 CA F7 | 	test	local04, arg02 wz
24e34     D8 00 90 5D |  if_ne	jmp	#LR__3802
24e38     FD 14 32 F9 | 	getword	arg02, result1, #0
24e3c     01 00 00 FF 
24e40     00 14 16 F2 | 	cmp	arg02, ##512 wc
24e44     C8 00 90 CD |  if_b	jmp	#LR__3802
24e48     FD 14 32 F9 | 	getword	arg02, result1, #0
24e4c     01 00 00 FF 
24e50     01 14 16 F2 | 	cmp	arg02, ##513 wc
24e54     B8 00 90 3D |  if_ae	jmp	#LR__3802
24e58     11 13 02 F6 | 	mov	arg01, local03
24e5c     07 12 4E F7 | 	zerox	arg01, #7 wz
24e60     AC 00 90 AD |  if_e	jmp	#LR__3802
24e64     11 13 E2 F8 | 	getbyte	arg01, local03, #0
24e68     11 23 E2 F8 | 	getbyte	local03, local03, #0
24e6c     01 22 86 F1 | 	sub	local03, #1
24e70     11 13 CA F7 | 	test	arg01, local03 wz
24e74     98 00 90 5D |  if_ne	jmp	#LR__3802
24e78     34 1E 06 F1 | 	add	local01, #52
24e7c     0F 13 02 F6 | 	mov	arg01, local01
24e80     34 1E 86 F1 | 	sub	local01, #52
24e84     0E 12 06 F1 | 	add	arg01, #14
24e88                 | ' {
24e88                 | ' 
24e88                 | ' 	return *((WORD*)ptr);
24e88     09 FB E9 FA | 	rdword	result1, arg01 wz
24e8c     80 00 90 AD |  if_e	jmp	#LR__3802
24e90     44 1E 06 F1 | 	add	local01, #68
24e94     0F 13 C2 FA | 	rdbyte	arg01, local01
24e98     44 1E 86 F1 | 	sub	local01, #68
24e9c     01 12 86 F1 | 	sub	arg01, #1
24ea0     02 12 16 F2 | 	cmp	arg01, #2 wc
24ea4     68 00 90 3D |  if_ae	jmp	#LR__3802
24ea8     34 1E 06 F1 | 	add	local01, #52
24eac     0F 13 02 F6 | 	mov	arg01, local01
24eb0     34 1E 86 F1 | 	sub	local01, #52
24eb4     11 12 06 F1 | 	add	arg01, #17
24eb8                 | ' {
24eb8                 | ' 
24eb8                 | ' 	return *((WORD*)ptr);
24eb8     09 FB E9 FA | 	rdword	result1, arg01 wz
24ebc     50 00 90 AD |  if_e	jmp	#LR__3802
24ec0     34 1E 06 F1 | 	add	local01, #52
24ec4     0F 13 02 F6 | 	mov	arg01, local01
24ec8     34 1E 86 F1 | 	sub	local01, #52
24ecc     13 12 06 F1 | 	add	arg01, #19
24ed0                 | ' {
24ed0                 | ' 
24ed0                 | ' 	return *((WORD*)ptr);
24ed0     09 FB E1 FA | 	rdword	result1, arg01
24ed4     FD 22 32 F9 | 	getword	local03, result1, #0
24ed8     80 22 16 F2 | 	cmp	local03, #128 wc
24edc     20 00 90 3D |  if_ae	jmp	#LR__3801
24ee0     34 1E 06 F1 | 	add	local01, #52
24ee4     0F 13 02 F6 | 	mov	arg01, local01
24ee8     34 1E 86 F1 | 	sub	local01, #52
24eec     20 12 06 F1 | 	add	arg01, #32
24ef0                 | ' {
24ef0                 | ' 
24ef0                 | ' 	return *((DWORD*)ptr);
24ef0     09 FB 01 FB | 	rdlong	result1, arg01
24ef4     80 00 00 FF 
24ef8     00 FA 15 F2 | 	cmp	result1, ##65536 wc
24efc     10 00 90 CD |  if_b	jmp	#LR__3802
24f00                 | LR__3801
24f00     4A 1E 06 F1 | 	add	local01, #74
24f04                 | ' {
24f04                 | ' 
24f04                 | ' 	return *((WORD*)ptr);
24f04     0F FB E9 FA | 	rdword	result1, local01 wz
24f08                 | ' 			&& b != 0 && (b & (b - 1)) == 0
24f08                 | ' 			&& ld_word(fs->win +  14 ) != 0
24f08                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
24f08                 | ' 			&& ld_word(fs->win +  17 ) != 0
24f08                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
24f08                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
24f08                 | ' 				return 0;
24f08     00 FA 05 56 |  if_ne	mov	result1, #0
24f0c     18 00 90 5D |  if_ne	jmp	#LR__3804
24f10                 | LR__3802
24f10                 | LR__3803
24f10                 | ' 		}
24f10                 | ' 	}
24f10                 | ' 	return sign == 0xAA55 ? 2 : 3;
24f10     10 23 32 F9 | 	getword	local03, local02, #0
24f14     55 00 00 FF 
24f18     55 22 0E F2 | 	cmp	local03, ##43605 wz
24f1c     02 24 06 A6 |  if_e	mov	local04, #2
24f20     03 24 06 56 |  if_ne	mov	local04, #3
24f24     12 FB 01 F6 | 	mov	result1, local04
24f28                 | LR__3804
24f28     A7 F0 03 F6 | 	mov	ptra, fp
24f2c     B2 00 A0 FD | 	call	#popregs_
24f30                 | _fatfs_cc_check_fs_ret
24f30     2D 00 64 FD | 	ret
24f34                 | 
24f34                 | _fatfs_cc_find_volume
24f34     05 4A 05 F6 | 	mov	COUNT_, #5
24f38     A8 00 A0 FD | 	call	#pushregs_
24f3c     24 F0 07 F1 | 	add	ptra, #36
24f40     09 1F 02 F6 | 	mov	local01, arg01
24f44     0A 21 02 F6 | 	mov	local02, arg02
24f48     0F 13 02 F6 | 	mov	arg01, local01
24f4c     00 14 06 F6 | 	mov	arg02, #0
24f50     08 FE BF FD | 	call	#_fatfs_cc_check_fs
24f54     02 FA 0D F2 | 	cmp	result1, #2 wz
24f58     0C 00 90 AD |  if_e	jmp	#LR__3810
24f5c     03 FA 15 F2 | 	cmp	result1, #3 wc
24f60     00 20 0E C2 |  if_b	cmp	local02, #0 wz
24f64     D0 00 90 BD |  if_nc_or_z	jmp	#LR__3818
24f68                 | LR__3810
24f68                 | ' 	for (i = 0; i < 4; i++) {
24f68     00 22 06 F6 | 	mov	local03, #0
24f6c     97 26 48 FB | 	callpa	#(@LR__3812-@LR__3811)>>2,fcache_load_ptr_
24f70                 | LR__3811
24f70     04 22 16 F2 | 	cmp	local03, #4 wc
24f74     44 00 90 3D |  if_ae	jmp	#LR__3813
24f78     11 25 02 F6 | 	mov	local04, local03
24f7c     02 24 66 F0 | 	shl	local04, #2
24f80     14 4E 05 F1 | 	add	fp, #20
24f84     A7 24 02 F1 | 	add	local04, fp
24f88     34 1E 06 F1 | 	add	local01, #52
24f8c     0F 13 02 F6 | 	mov	arg01, local01
24f90     34 1E 86 F1 | 	sub	local01, #52
24f94     BE 13 06 F1 | 	add	arg01, #446
24f98     11 15 02 F6 | 	mov	arg02, local03
24f9c     04 14 66 F0 | 	shl	arg02, #4
24fa0     0A 13 02 F1 | 	add	arg01, arg02
24fa4     08 12 06 F1 | 	add	arg01, #8
24fa8                 | ' {
24fa8                 | ' 
24fa8                 | ' 	return *((DWORD*)ptr);
24fa8     09 FB 01 FB | 	rdlong	result1, arg01
24fac     14 4E 85 F1 | 	sub	fp, #20
24fb0     12 FB 61 FC | 	wrlong	result1, local04
24fb4     01 22 06 F1 | 	add	local03, #1
24fb8     B4 FF 9F FD | 	jmp	#LR__3811
24fbc                 | LR__3812
24fbc                 | LR__3813
24fbc     00 20 0E F2 | 	cmp	local02, #0 wz
24fc0     10 25 02 56 |  if_ne	mov	local04, local02
24fc4     01 24 86 51 |  if_ne	sub	local04, #1
24fc8     00 24 06 A6 |  if_e	mov	local04, #0
24fcc     12 23 02 F6 | 	mov	local03, local04
24fd0                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
24fd0                 | ' 	}
24fd0                 | ' 	i = part ? part - 1 : 0;
24fd0                 | ' 	do {
24fd0                 | LR__3814
24fd0     11 25 02 F6 | 	mov	local04, local03
24fd4     02 24 66 F0 | 	shl	local04, #2
24fd8     14 4E 05 F1 | 	add	fp, #20
24fdc     A7 24 02 F1 | 	add	local04, fp
24fe0     12 25 0A FB | 	rdlong	local04, local04 wz
24fe4     14 4E 85 F1 | 	sub	fp, #20
24fe8     28 00 90 AD |  if_e	jmp	#LR__3815
24fec     11 25 02 F6 | 	mov	local04, local03
24ff0     02 24 66 F0 | 	shl	local04, #2
24ff4     14 4E 05 F1 | 	add	fp, #20
24ff8     A7 24 02 F1 | 	add	local04, fp
24ffc     12 15 02 FB | 	rdlong	arg02, local04
25000     0F 13 02 F6 | 	mov	arg01, local01
25004     14 4E 85 F1 | 	sub	fp, #20
25008     50 FD BF FD | 	call	#_fatfs_cc_check_fs
2500c     FD 24 02 F6 | 	mov	local04, result1
25010     04 00 90 FD | 	jmp	#LR__3816
25014                 | LR__3815
25014     03 24 06 F6 | 	mov	local04, #3
25018                 | LR__3816
25018     12 27 02 F6 | 	mov	local05, local04
2501c     00 20 0E F2 | 	cmp	local02, #0 wz
25020     02 26 16 A2 |  if_e	cmp	local05, #2 wc
25024     0C 00 90 8D |  if_c_and_z	jmp	#LR__3817
25028     01 22 06 A1 |  if_e	add	local03, #1
2502c     04 22 16 A2 |  if_e	cmp	local03, #4 wc
25030     9C FF 9F 8D |  if_c_and_z	jmp	#LR__3814
25034                 | LR__3817
25034                 | ' 	return fmt;
25034     13 FB 01 F6 | 	mov	result1, local05
25038                 | LR__3818
25038     A7 F0 03 F6 | 	mov	ptra, fp
2503c     B2 00 A0 FD | 	call	#popregs_
25040                 | _fatfs_cc_find_volume_ret
25040     2D 00 64 FD | 	ret
25044                 | 
25044                 | _fatfs_cc_mount_volume
25044     0B 4A 05 F6 | 	mov	COUNT_, #11
25048     A8 00 A0 FD | 	call	#pushregs_
2504c     0A 1F 02 F6 | 	mov	local01, arg02
25050     0B 21 02 F6 | 	mov	local02, arg03
25054     0F 01 68 FC | 	wrlong	#0, local01
25058     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
2505c     FD 22 02 F6 | 	mov	local03, result1
25060     00 22 56 F2 | 	cmps	local03, #0 wc
25064     0B FA 05 C6 |  if_b	mov	result1, #11
25068     3C 05 90 CD |  if_b	jmp	#LR__3830
2506c     11 17 02 F6 | 	mov	arg03, local03
25070     02 16 66 F0 | 	shl	arg03, #2
25074     F2 16 02 F1 | 	add	arg03, objptr
25078     0B 25 0A FB | 	rdlong	local04, arg03 wz
2507c     0C FA 05 A6 |  if_e	mov	result1, #12
25080     24 05 90 AD |  if_e	jmp	#LR__3830
25084     0F 25 62 FC | 	wrlong	local04, local01
25088     10 21 E2 F8 | 	getbyte	local02, local02, #0
2508c     FE 20 06 F5 | 	and	local02, #254
25090     12 17 CA FA | 	rdbyte	arg03, local04 wz
25094     4C 00 90 AD |  if_e	jmp	#LR__3821
25098     01 24 06 F1 | 	add	local04, #1
2509c     12 13 CA FA | 	rdbyte	arg01, local04 wz
250a0     01 24 86 F1 | 	sub	local04, #1
250a4     01 FA 05 56 |  if_ne	mov	result1, #1
250a8                 | ' 
250a8                 | ' 	return Stat;
250a8     01 00 00 AF 
250ac     20 E4 05 A1 |  if_e	add	objptr, ##544
250b0     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
250b4     01 00 00 AF 
250b8     20 E4 85 A1 |  if_e	sub	objptr, ##544
250bc     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
250c0     01 16 CE F7 | 	test	arg03, #1 wz
250c4     1C 00 90 5D |  if_ne	jmp	#LR__3820
250c8     00 20 0E F2 | 	cmp	local02, #0 wz
250cc     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
250d0     04 FA CD 57 |  if_ne	test	result1, #4 wz
250d4                 | ' 				return FR_WRITE_PROTECTED;
250d4     0A FA 05 56 |  if_ne	mov	result1, #10
250d8     CC 04 90 5D |  if_ne	jmp	#LR__3830
250dc                 | ' 			}
250dc                 | ' 			return FR_OK;
250dc     00 FA 05 F6 | 	mov	result1, #0
250e0     C4 04 90 FD | 	jmp	#LR__3830
250e4                 | LR__3820
250e4                 | LR__3821
250e4     12 01 48 FC | 	wrbyte	#0, local04
250e8     01 24 06 F1 | 	add	local04, #1
250ec     12 23 42 FC | 	wrbyte	local03, local04
250f0     12 13 C2 FA | 	rdbyte	arg01, local04
250f4     01 24 86 F1 | 	sub	local04, #1
250f8     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
250fc     FD 16 02 F6 | 	mov	arg03, result1
25100     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
25104     01 26 CE F7 | 	test	local05, #1 wz
25108                 | ' 		return FR_NOT_READY;
25108     03 FA 05 56 |  if_ne	mov	result1, #3
2510c     98 04 90 5D |  if_ne	jmp	#LR__3830
25110     00 20 0E F2 | 	cmp	local02, #0 wz
25114     0B 27 02 56 |  if_ne	mov	local05, arg03
25118     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
2511c     04 26 CE 57 |  if_ne	test	local05, #4 wz
25120                 | ' 		return FR_WRITE_PROTECTED;
25120     0A FA 05 56 |  if_ne	mov	result1, #10
25124     80 04 90 5D |  if_ne	jmp	#LR__3830
25128     12 13 02 F6 | 	mov	arg01, local04
2512c     00 14 06 F6 | 	mov	arg02, #0
25130     00 FE BF FD | 	call	#_fatfs_cc_find_volume
25134     FD 12 02 F6 | 	mov	arg01, result1
25138     04 12 0E F2 | 	cmp	arg01, #4 wz
2513c     01 FA 05 A6 |  if_e	mov	result1, #1
25140     64 04 90 AD |  if_e	jmp	#LR__3830
25144     02 12 16 F2 | 	cmp	arg01, #2 wc
25148     0D FA 05 36 |  if_ae	mov	result1, #13
2514c     58 04 90 3D |  if_ae	jmp	#LR__3830
25150     30 24 06 F1 | 	add	local04, #48
25154     12 29 02 FB | 	rdlong	local06, local04
25158     04 24 06 F1 | 	add	local04, #4
2515c     12 13 02 F6 | 	mov	arg01, local04
25160     34 24 86 F1 | 	sub	local04, #52
25164     0B 12 06 F1 | 	add	arg01, #11
25168                 | ' {
25168                 | ' 
25168                 | ' 	return *((WORD*)ptr);
25168     09 FB E1 FA | 	rdword	result1, arg01
2516c     01 00 00 FF 
25170     00 FA 0D F2 | 	cmp	result1, ##512 wz
25174     0D FA 05 56 |  if_ne	mov	result1, #13
25178     2C 04 90 5D |  if_ne	jmp	#LR__3830
2517c     34 24 06 F1 | 	add	local04, #52
25180     12 13 02 F6 | 	mov	arg01, local04
25184     34 24 86 F1 | 	sub	local04, #52
25188     16 12 06 F1 | 	add	arg01, #22
2518c                 | ' {
2518c                 | ' 
2518c                 | ' 	return *((WORD*)ptr);
2518c     09 FB E1 FA | 	rdword	result1, arg01
25190     FD 2A 0A F6 | 	mov	local07, result1 wz
25194     18 00 90 5D |  if_ne	jmp	#LR__3822
25198     34 24 06 F1 | 	add	local04, #52
2519c     12 13 02 F6 | 	mov	arg01, local04
251a0     34 24 86 F1 | 	sub	local04, #52
251a4     24 12 06 F1 | 	add	arg01, #36
251a8                 | ' {
251a8                 | ' 
251a8                 | ' 	return *((DWORD*)ptr);
251a8     09 FB 01 FB | 	rdlong	result1, arg01
251ac     FD 2A 02 F6 | 	mov	local07, result1
251b0                 | LR__3822
251b0     1C 24 06 F1 | 	add	local04, #28
251b4     12 2B 62 FC | 	wrlong	local07, local04
251b8     28 24 06 F1 | 	add	local04, #40
251bc     12 27 C2 FA | 	rdbyte	local05, local04
251c0     42 24 86 F1 | 	sub	local04, #66
251c4     12 27 42 FC | 	wrbyte	local05, local04
251c8     12 27 C2 FA | 	rdbyte	local05, local04
251cc     02 24 86 F1 | 	sub	local04, #2
251d0     01 26 0E F2 | 	cmp	local05, #1 wz
251d4     02 24 06 51 |  if_ne	add	local04, #2
251d8     12 27 C2 5A |  if_ne	rdbyte	local05, local04
251dc     02 24 86 51 |  if_ne	sub	local04, #2
251e0     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
251e4     0D FA 05 56 |  if_ne	mov	result1, #13
251e8     BC 03 90 5D |  if_ne	jmp	#LR__3830
251ec     02 24 06 F1 | 	add	local04, #2
251f0     12 27 C2 FA | 	rdbyte	local05, local04
251f4     13 2B 02 FD | 	qmul	local07, local05
251f8     3F 24 06 F1 | 	add	local04, #63
251fc     12 27 C2 FA | 	rdbyte	local05, local04
25200     37 24 86 F1 | 	sub	local04, #55
25204     12 27 52 FC | 	wrword	local05, local04
25208     12 27 EA FA | 	rdword	local05, local04 wz
2520c     0A 24 86 F1 | 	sub	local04, #10
25210     18 2A 62 FD | 	getqx	local07
25214     20 00 90 AD |  if_e	jmp	#LR__3823
25218     0A 24 06 F1 | 	add	local04, #10
2521c     12 27 E2 FA | 	rdword	local05, local04
25220     13 23 32 F9 | 	getword	local03, local05, #0
25224     0A 24 86 F1 | 	sub	local04, #10
25228     13 27 32 F9 | 	getword	local05, local05, #0
2522c     01 26 86 F1 | 	sub	local05, #1
25230     13 23 CA F7 | 	test	local03, local05 wz
25234     08 00 90 AD |  if_e	jmp	#LR__3824
25238                 | LR__3823
25238     0D FA 05 F6 | 	mov	result1, #13
2523c     68 03 90 FD | 	jmp	#LR__3830
25240                 | LR__3824
25240     34 24 06 F1 | 	add	local04, #52
25244     12 13 02 F6 | 	mov	arg01, local04
25248     11 12 06 F1 | 	add	arg01, #17
2524c                 | ' {
2524c                 | ' 
2524c                 | ' 	return *((WORD*)ptr);
2524c     09 FB E1 FA | 	rdword	result1, arg01
25250     2C 24 86 F1 | 	sub	local04, #44
25254     12 FB 51 FC | 	wrword	result1, local04
25258     12 27 E2 FA | 	rdword	local05, local04
2525c     08 24 86 F1 | 	sub	local04, #8
25260     13 13 52 F6 | 	abs	arg01, local05 wc
25264     09 13 42 F8 | 	getnib	arg01, arg01, #0
25268     09 13 8A F6 | 	negc	arg01, arg01 wz
2526c     0D FA 05 56 |  if_ne	mov	result1, #13
25270     34 03 90 5D |  if_ne	jmp	#LR__3830
25274     34 24 06 F1 | 	add	local04, #52
25278     12 13 02 F6 | 	mov	arg01, local04
2527c     34 24 86 F1 | 	sub	local04, #52
25280     13 12 06 F1 | 	add	arg01, #19
25284                 | ' {
25284                 | ' 
25284                 | ' 	return *((WORD*)ptr);
25284     09 FB E1 FA | 	rdword	result1, arg01
25288     FD 2C 0A F6 | 	mov	local08, result1 wz
2528c     34 24 06 A1 |  if_e	add	local04, #52
25290     12 13 02 A6 |  if_e	mov	arg01, local04
25294     34 24 86 A1 |  if_e	sub	local04, #52
25298     20 12 06 A1 |  if_e	add	arg01, #32
2529c                 | ' {
2529c                 | ' 
2529c                 | ' 	return *((DWORD*)ptr);
2529c     09 2D 02 AB |  if_e	rdlong	local08, arg01
252a0     34 24 06 F1 | 	add	local04, #52
252a4     12 13 02 F6 | 	mov	arg01, local04
252a8     34 24 86 F1 | 	sub	local04, #52
252ac     0E 12 06 F1 | 	add	arg01, #14
252b0                 | ' {
252b0                 | ' 
252b0                 | ' 	return *((WORD*)ptr);
252b0     09 FB E1 FA | 	rdword	result1, arg01
252b4     FD 12 02 F6 | 	mov	arg01, result1
252b8     09 27 02 F6 | 	mov	local05, arg01
252bc     0F 26 4E F7 | 	zerox	local05, #15 wz
252c0     0D FA 05 A6 |  if_e	mov	result1, #13
252c4     E0 02 90 AD |  if_e	jmp	#LR__3830
252c8     09 2F 32 F9 | 	getword	local09, arg01, #0
252cc     15 2F 02 F1 | 	add	local09, local07
252d0     08 24 06 F1 | 	add	local04, #8
252d4     12 27 E2 FA | 	rdword	local05, local04
252d8     08 24 86 F1 | 	sub	local04, #8
252dc     13 27 52 F6 | 	abs	local05, local05 wc
252e0     04 26 46 F0 | 	shr	local05, #4
252e4     13 2F 82 F3 | 	sumc	local09, local05
252e8     17 2D 12 F2 | 	cmp	local08, local09 wc
252ec     0D FA 05 C6 |  if_b	mov	result1, #13
252f0     B4 02 90 CD |  if_b	jmp	#LR__3830
252f4     17 2D 82 F1 | 	sub	local08, local09
252f8     0A 24 06 F1 | 	add	local04, #10
252fc     12 27 E2 FA | 	rdword	local05, local04
25300     13 2D 12 FD | 	qdiv	local08, local05
25304     0A 24 86 F1 | 	sub	local04, #10
25308     18 26 62 FD | 	getqx	local05
2530c     00 26 0E F2 | 	cmp	local05, #0 wz
25310     0D FA 05 A6 |  if_e	mov	result1, #13
25314     90 02 90 AD |  if_e	jmp	#LR__3830
25318     00 30 06 F6 | 	mov	local10, #0
2531c     FF FF 07 FF 
25320     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
25324     03 30 06 C6 |  if_b	mov	local10, #3
25328     7F 00 00 FF 
2532c     F6 27 16 F2 | 	cmp	local05, ##65526 wc
25330     02 30 06 C6 |  if_b	mov	local10, #2
25334     07 00 00 FF 
25338     F6 27 16 F2 | 	cmp	local05, ##4086 wc
2533c     01 30 06 C6 |  if_b	mov	local10, #1
25340     00 30 0E F2 | 	cmp	local10, #0 wz
25344     0D FA 05 A6 |  if_e	mov	result1, #13
25348     5C 02 90 AD |  if_e	jmp	#LR__3830
2534c     02 26 06 F1 | 	add	local05, #2
25350     18 24 06 F1 | 	add	local04, #24
25354     12 27 62 FC | 	wrlong	local05, local04
25358     08 24 06 F1 | 	add	local04, #8
2535c     12 29 62 FC | 	wrlong	local06, local04
25360     14 27 02 F6 | 	mov	local05, local06
25364     09 13 32 F9 | 	getword	arg01, arg01, #0
25368     09 27 02 F1 | 	add	local05, arg01
2536c     04 24 06 F1 | 	add	local04, #4
25370     12 27 62 FC | 	wrlong	local05, local04
25374     14 27 02 F6 | 	mov	local05, local06
25378     17 27 02 F1 | 	add	local05, local09
2537c     08 24 06 F1 | 	add	local04, #8
25380     12 27 62 FC | 	wrlong	local05, local04
25384     2C 24 86 F1 | 	sub	local04, #44
25388     03 30 0E F2 | 	cmp	local10, #3 wz
2538c     5C 00 90 5D |  if_ne	jmp	#LR__3825
25390     34 24 06 F1 | 	add	local04, #52
25394     12 13 02 F6 | 	mov	arg01, local04
25398     34 24 86 F1 | 	sub	local04, #52
2539c     2A 12 06 F1 | 	add	arg01, #42
253a0                 | ' {
253a0                 | ' 
253a0                 | ' 	return *((WORD*)ptr);
253a0     09 FB E9 FA | 	rdword	result1, arg01 wz
253a4     0D FA 05 56 |  if_ne	mov	result1, #13
253a8     FC 01 90 5D |  if_ne	jmp	#LR__3830
253ac     08 24 06 F1 | 	add	local04, #8
253b0     12 27 EA FA | 	rdword	local05, local04 wz
253b4     08 24 86 F1 | 	sub	local04, #8
253b8     0D FA 05 56 |  if_ne	mov	result1, #13
253bc     E8 01 90 5D |  if_ne	jmp	#LR__3830
253c0     34 24 06 F1 | 	add	local04, #52
253c4     12 13 02 F6 | 	mov	arg01, local04
253c8     2C 12 06 F1 | 	add	arg01, #44
253cc                 | ' {
253cc                 | ' 
253cc                 | ' 	return *((DWORD*)ptr);
253cc     09 FB 01 FB | 	rdlong	result1, arg01
253d0     0C 24 86 F1 | 	sub	local04, #12
253d4     12 FB 61 FC | 	wrlong	result1, local04
253d8     10 24 86 F1 | 	sub	local04, #16
253dc     12 33 02 FB | 	rdlong	local11, local04
253e0     18 24 86 F1 | 	sub	local04, #24
253e4     02 32 66 F0 | 	shl	local11, #2
253e8     6C 00 90 FD | 	jmp	#LR__3827
253ec                 | LR__3825
253ec     08 24 06 F1 | 	add	local04, #8
253f0     12 27 EA FA | 	rdword	local05, local04 wz
253f4     08 24 86 F1 | 	sub	local04, #8
253f8     0D FA 05 A6 |  if_e	mov	result1, #13
253fc     A8 01 90 AD |  if_e	jmp	#LR__3830
25400     24 24 06 F1 | 	add	local04, #36
25404     12 27 02 FB | 	rdlong	local05, local04
25408     15 27 02 F1 | 	add	local05, local07
2540c     04 24 06 F1 | 	add	local04, #4
25410     12 27 62 FC | 	wrlong	local05, local04
25414     28 24 86 F1 | 	sub	local04, #40
25418     02 30 0E F2 | 	cmp	local10, #2 wz
2541c     18 24 06 A1 |  if_e	add	local04, #24
25420     12 27 02 AB |  if_e	rdlong	local05, local04
25424     18 24 86 A1 |  if_e	sub	local04, #24
25428     01 26 66 A0 |  if_e	shl	local05, #1
2542c     24 00 90 AD |  if_e	jmp	#LR__3826
25430     18 24 06 F1 | 	add	local04, #24
25434     12 33 02 FB | 	rdlong	local11, local04
25438     19 27 02 F6 | 	mov	local05, local11
2543c     01 26 66 F0 | 	shl	local05, #1
25440     19 27 02 F1 | 	add	local05, local11
25444     01 26 46 F0 | 	shr	local05, #1
25448     18 24 86 F1 | 	sub	local04, #24
2544c     01 32 06 F5 | 	and	local11, #1
25450     19 27 02 F1 | 	add	local05, local11
25454                 | LR__3826
25454     13 33 02 F6 | 	mov	local11, local05
25458                 | LR__3827
25458     FF 33 06 F1 | 	add	local11, #511
2545c     09 32 46 F0 | 	shr	local11, #9
25460     1C 24 06 F1 | 	add	local04, #28
25464     12 17 02 FB | 	rdlong	arg03, local04
25468     1C 24 86 F1 | 	sub	local04, #28
2546c     19 17 12 F2 | 	cmp	arg03, local11 wc
25470     0D FA 05 C6 |  if_b	mov	result1, #13
25474     30 01 90 CD |  if_b	jmp	#LR__3830
25478     14 24 06 F1 | 	add	local04, #20
2547c     FF FF FF FF 
25480     12 FF 6B FC | 	wrlong	##-1, local04
25484     04 24 86 F1 | 	sub	local04, #4
25488     FF FF FF FF 
2548c     12 FF 6B FC | 	wrlong	##-1, local04
25490     0C 24 86 F1 | 	sub	local04, #12
25494     12 01 49 FC | 	wrbyte	#128, local04
25498     04 24 86 F1 | 	sub	local04, #4
2549c     03 30 0E F2 | 	cmp	local10, #3 wz
254a0     D0 00 90 5D |  if_ne	jmp	#LR__3829
254a4     34 24 06 F1 | 	add	local04, #52
254a8     12 13 02 F6 | 	mov	arg01, local04
254ac     34 24 86 F1 | 	sub	local04, #52
254b0     30 12 06 F1 | 	add	arg01, #48
254b4                 | ' {
254b4                 | ' 
254b4                 | ' 	return *((WORD*)ptr);
254b4     09 FB E1 FA | 	rdword	result1, arg01
254b8     FD 26 32 F9 | 	getword	local05, result1, #0
254bc     01 26 0E F2 | 	cmp	local05, #1 wz
254c0     B0 00 90 5D |  if_ne	jmp	#LR__3829
254c4     01 28 06 F1 | 	add	local06, #1
254c8     12 13 02 F6 | 	mov	arg01, local04
254cc     14 15 02 F6 | 	mov	arg02, local06
254d0     CC CD BF FD | 	call	#_fatfs_cc_move_window
254d4     00 FA 0D F2 | 	cmp	result1, #0 wz
254d8     98 00 90 5D |  if_ne	jmp	#LR__3829
254dc     04 24 06 F1 | 	add	local04, #4
254e0     12 01 48 FC | 	wrbyte	#0, local04
254e4     30 24 06 F1 | 	add	local04, #48
254e8     12 13 02 F6 | 	mov	arg01, local04
254ec     34 24 86 F1 | 	sub	local04, #52
254f0     FE 13 06 F1 | 	add	arg01, #510
254f4                 | ' {
254f4                 | ' 
254f4                 | ' 	return *((WORD*)ptr);
254f4     09 FB E1 FA | 	rdword	result1, arg01
254f8     FD 26 32 F9 | 	getword	local05, result1, #0
254fc     55 00 00 FF 
25500     55 26 0E F2 | 	cmp	local05, ##43605 wz
25504     34 24 06 A1 |  if_e	add	local04, #52
25508     12 13 02 A6 |  if_e	mov	arg01, local04
2550c     34 24 86 A1 |  if_e	sub	local04, #52
25510                 | ' {
25510                 | ' 
25510                 | ' 	return *((DWORD*)ptr);
25510     09 FB 01 AB |  if_e	rdlong	result1, arg01
25514     A9 B0 20 AF 
25518     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
2551c     54 00 90 5D |  if_ne	jmp	#LR__3828
25520     34 24 06 F1 | 	add	local04, #52
25524     12 13 02 F6 | 	mov	arg01, local04
25528     34 24 86 F1 | 	sub	local04, #52
2552c     E4 13 06 F1 | 	add	arg01, #484
25530                 | ' {
25530                 | ' 
25530                 | ' 	return *((DWORD*)ptr);
25530     09 FB 01 FB | 	rdlong	result1, arg01
25534     B9 A0 30 FF 
25538     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
2553c     34 00 90 5D |  if_ne	jmp	#LR__3828
25540     34 24 06 F1 | 	add	local04, #52
25544     12 13 02 F6 | 	mov	arg01, local04
25548     E8 13 06 F1 | 	add	arg01, #488
2554c                 | ' {
2554c                 | ' 
2554c                 | ' 	return *((DWORD*)ptr);
2554c     09 FB 01 FB | 	rdlong	result1, arg01
25550     20 24 86 F1 | 	sub	local04, #32
25554     12 FB 61 FC | 	wrlong	result1, local04
25558     20 24 06 F1 | 	add	local04, #32
2555c     12 13 02 F6 | 	mov	arg01, local04
25560     EC 13 06 F1 | 	add	arg01, #492
25564                 | ' {
25564                 | ' 
25564                 | ' 	return *((DWORD*)ptr);
25564     09 FB 01 FB | 	rdlong	result1, arg01
25568     24 24 86 F1 | 	sub	local04, #36
2556c     12 FB 61 FC | 	wrlong	result1, local04
25570     10 24 86 F1 | 	sub	local04, #16
25574                 | LR__3828
25574                 | LR__3829
25574     12 31 42 FC | 	wrbyte	local10, local04
25578     04 E4 05 F1 | 	add	objptr, #4
2557c     F2 26 E2 FA | 	rdword	local05, objptr
25580     01 26 06 F1 | 	add	local05, #1
25584     F2 26 52 FC | 	wrword	local05, objptr
25588     F2 32 E2 FA | 	rdword	local11, objptr
2558c     06 24 06 F1 | 	add	local04, #6
25590     12 33 52 FC | 	wrword	local11, local04
25594     04 E4 05 F1 | 	add	objptr, #4
25598     06 24 06 F1 | 	add	local04, #6
2559c     12 E5 61 FC | 	wrlong	objptr, local04
255a0                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
255a0                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
255a0                 | ' 			{
255a0                 | ' 
255a0                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
255a0                 | ' 
255a0                 | ' 
255a0                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
255a0                 | ' 
255a0                 | ' 			}
255a0                 | ' 		}
255a0                 | ' 
255a0                 | ' 
255a0                 | ' 	}
255a0                 | ' 
255a0                 | ' 	fs->fs_type = (BYTE)fmt;
255a0                 | ' 	fs->id = ++Fsid;
255a0                 | ' 
255a0                 | ' 	fs->lfnbuf = LfnBuf;
255a0                 | ' #line 3567 "ff.c"
255a0                 | ' 	return FR_OK;
255a0     00 FA 05 F6 | 	mov	result1, #0
255a4     08 E4 85 F1 | 	sub	objptr, #8
255a8                 | LR__3830
255a8     A7 F0 03 F6 | 	mov	ptra, fp
255ac     B2 00 A0 FD | 	call	#popregs_
255b0                 | _fatfs_cc_mount_volume_ret
255b0     2D 00 64 FD | 	ret
255b4                 | 
255b4                 | _fatfs_cc_validate
255b4     09 01 0A F6 | 	mov	_var01, arg01 wz
255b8     09 02 06 F6 | 	mov	_var02, #9
255bc     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
255c0     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
255c4     50 00 90 AD |  if_e	jmp	#LR__3840
255c8     04 00 06 F1 | 	add	_var01, #4
255cc     00 07 E2 FA | 	rdword	_var04, _var01
255d0     04 00 86 F1 | 	sub	_var01, #4
255d4     00 13 02 FB | 	rdlong	arg01, _var01
255d8     06 12 06 F1 | 	add	arg01, #6
255dc     09 FB E1 FA | 	rdword	result1, arg01
255e0     FD 06 0A F2 | 	cmp	_var04, result1 wz
255e4     30 00 90 5D |  if_ne	jmp	#LR__3840
255e8     00 07 02 FB | 	rdlong	_var04, _var01
255ec     01 06 06 F1 | 	add	_var04, #1
255f0     03 13 CA FA | 	rdbyte	arg01, _var04 wz
255f4     01 FA 05 56 |  if_ne	mov	result1, #1
255f8                 | ' 
255f8                 | ' 	return Stat;
255f8     01 00 00 AF 
255fc     20 E4 05 A1 |  if_e	add	objptr, ##544
25600     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
25604     01 00 00 AF 
25608     20 E4 85 A1 |  if_e	sub	objptr, ##544
2560c     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
25610     01 04 CE F7 | 	test	_var03, #1 wz
25614     00 02 06 A6 |  if_e	mov	_var02, #0
25618                 | LR__3840
25618     00 02 0E F2 | 	cmp	_var02, #0 wz
2561c     00 05 02 AB |  if_e	rdlong	_var03, _var01
25620     00 04 06 56 |  if_ne	mov	_var03, #0
25624     0A 05 62 FC | 	wrlong	_var03, arg02
25628                 | ' 			res = FR_OK;
25628                 | ' 		}
25628                 | ' 
25628                 | ' 	}
25628                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
25628                 | ' 	return res;
25628     01 FB 01 F6 | 	mov	result1, _var02
2562c                 | _fatfs_cc_validate_ret
2562c     2D 00 64 FD | 	ret
25630                 | 
25630                 | _fatfs_cc_f_mount
25630     01 4A 05 F6 | 	mov	COUNT_, #1
25634     A8 00 A0 FD | 	call	#pushregs_
25638     20 F0 07 F1 | 	add	ptra, #32
2563c     04 4E 05 F1 | 	add	fp, #4
25640     A7 12 62 FC | 	wrlong	arg01, fp
25644     04 4E 05 F1 | 	add	fp, #4
25648     A7 14 62 FC | 	wrlong	arg02, fp
2564c     04 4E 05 F1 | 	add	fp, #4
25650     A7 16 42 FC | 	wrbyte	arg03, fp
25654     04 4E 85 F1 | 	sub	fp, #4
25658     A7 16 02 FB | 	rdlong	arg03, fp
2565c     14 4E 05 F1 | 	add	fp, #20
25660     A7 16 62 FC | 	wrlong	arg03, fp
25664     A7 12 02 F6 | 	mov	arg01, fp
25668     1C 4E 85 F1 | 	sub	fp, #28
2566c     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
25670     14 4E 05 F1 | 	add	fp, #20
25674     A7 FA 61 FC | 	wrlong	result1, fp
25678     14 4E 85 F1 | 	sub	fp, #20
2567c     00 FA 55 F2 | 	cmps	result1, #0 wc
25680     0B FA 05 C6 |  if_b	mov	result1, #11
25684     C0 00 90 CD |  if_b	jmp	#LR__3851
25688     14 4E 05 F1 | 	add	fp, #20
2568c     A7 16 02 FB | 	rdlong	arg03, fp
25690     02 16 66 F0 | 	shl	arg03, #2
25694     F2 16 02 F1 | 	add	arg03, objptr
25698     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2569c     04 4E 85 F1 | 	sub	fp, #4
256a0     A7 16 62 FC | 	wrlong	arg03, fp
256a4     10 4E 85 F1 | 	sub	fp, #16
256a8     28 00 90 AD |  if_e	jmp	#LR__3850
256ac     10 4E 05 F1 | 	add	fp, #16
256b0     A7 16 02 FB | 	rdlong	arg03, fp
256b4     10 4E 85 F1 | 	sub	fp, #16
256b8     01 16 06 F1 | 	add	arg03, #1
256bc     0B 13 C2 FA | 	rdbyte	arg01, arg03
256c0     24 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
256c4     10 4E 05 F1 | 	add	fp, #16
256c8     A7 16 02 FB | 	rdlong	arg03, fp
256cc     10 4E 85 F1 | 	sub	fp, #16
256d0     0B 01 48 FC | 	wrbyte	#0, arg03
256d4                 | LR__3850
256d4     04 4E 05 F1 | 	add	fp, #4
256d8     A7 1E 0A FB | 	rdlong	local01, fp wz
256dc     04 4E 85 F1 | 	sub	fp, #4
256e0     04 4E 05 51 |  if_ne	add	fp, #4
256e4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
256e8     04 4E 85 51 |  if_ne	sub	fp, #4
256ec     0F 01 48 5C |  if_ne	wrbyte	#0, local01
256f0     14 4E 05 F1 | 	add	fp, #20
256f4     A7 1E 02 FB | 	rdlong	local01, fp
256f8     02 1E 66 F0 | 	shl	local01, #2
256fc     F2 1E 02 F1 | 	add	local01, objptr
25700     10 4E 85 F1 | 	sub	fp, #16
25704     A7 16 02 FB | 	rdlong	arg03, fp
25708     0F 17 62 FC | 	wrlong	arg03, local01
2570c     08 4E 05 F1 | 	add	fp, #8
25710     A7 1E CA FA | 	rdbyte	local01, fp wz
25714     0C 4E 85 F1 | 	sub	fp, #12
25718     00 FA 05 A6 |  if_e	mov	result1, #0
2571c     28 00 90 AD |  if_e	jmp	#LR__3851
25720     08 4E 05 F1 | 	add	fp, #8
25724     A7 12 02 F6 | 	mov	arg01, fp
25728     04 4E 85 F1 | 	sub	fp, #4
2572c     A7 14 02 F6 | 	mov	arg02, fp
25730     04 4E 85 F1 | 	sub	fp, #4
25734     00 16 06 F6 | 	mov	arg03, #0
25738     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
2573c     18 4E 05 F1 | 	add	fp, #24
25740     A7 FA 61 FC | 	wrlong	result1, fp
25744                 | ' 
25744                 | ' 	res = mount_volume(&path, &fs, 0);
25744                 | ' 	return res ;
25744     18 4E 85 F1 | 	sub	fp, #24
25748                 | LR__3851
25748     A7 F0 03 F6 | 	mov	ptra, fp
2574c     B2 00 A0 FD | 	call	#popregs_
25750                 | _fatfs_cc_f_mount_ret
25750     2D 00 64 FD | 	ret
25754                 | 
25754                 | _fatfs_cc_f_open
25754     02 4A 05 F6 | 	mov	COUNT_, #2
25758     A8 00 A0 FD | 	call	#pushregs_
2575c     60 F0 07 F1 | 	add	ptra, #96
25760     04 4E 05 F1 | 	add	fp, #4
25764     A7 12 62 FC | 	wrlong	arg01, fp
25768     04 4E 05 F1 | 	add	fp, #4
2576c     A7 14 62 FC | 	wrlong	arg02, fp
25770     04 4E 05 F1 | 	add	fp, #4
25774     A7 16 42 FC | 	wrbyte	arg03, fp
25778     08 4E 85 F1 | 	sub	fp, #8
2577c     A7 18 0A FB | 	rdlong	arg04, fp wz
25780     04 4E 85 F1 | 	sub	fp, #4
25784     09 FA 05 A6 |  if_e	mov	result1, #9
25788     98 06 90 AD |  if_e	jmp	#LR__3877
2578c     0C 4E 05 F1 | 	add	fp, #12
25790     A7 18 C2 FA | 	rdbyte	arg04, fp
25794     3F 18 06 F5 | 	and	arg04, #63
25798     A7 18 42 FC | 	wrbyte	arg04, fp
2579c     04 4E 85 F1 | 	sub	fp, #4
257a0     A7 12 02 F6 | 	mov	arg01, fp
257a4     3C 4E 05 F1 | 	add	fp, #60
257a8     A7 14 02 F6 | 	mov	arg02, fp
257ac     38 4E 85 F1 | 	sub	fp, #56
257b0     A7 16 C2 FA | 	rdbyte	arg03, fp
257b4     0C 4E 85 F1 | 	sub	fp, #12
257b8     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
257bc     10 4E 05 F1 | 	add	fp, #16
257c0     A7 FA 61 FC | 	wrlong	result1, fp
257c4     10 4E 85 F1 | 	sub	fp, #16
257c8     00 FA 0D F2 | 	cmp	result1, #0 wz
257cc     2C 06 90 5D |  if_ne	jmp	#LR__3876
257d0     44 4E 05 F1 | 	add	fp, #68
257d4     A7 18 02 FB | 	rdlong	arg04, fp
257d8     30 4E 85 F1 | 	sub	fp, #48
257dc     A7 18 62 FC | 	wrlong	arg04, fp
257e0     A7 12 02 F6 | 	mov	arg01, fp
257e4     0C 4E 85 F1 | 	sub	fp, #12
257e8     A7 1E 02 FB | 	rdlong	local01, fp
257ec     08 4E 85 F1 | 	sub	fp, #8
257f0     0F 15 02 F6 | 	mov	arg02, local01
257f4     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
257f8     10 4E 05 F1 | 	add	fp, #16
257fc     A7 FA 61 FC | 	wrlong	result1, fp
25800     10 4E 85 F1 | 	sub	fp, #16
25804     00 FA 0D F2 | 	cmp	result1, #0 wz
25808     1C 00 90 5D |  if_ne	jmp	#LR__3860
2580c     3F 4E 05 F1 | 	add	fp, #63
25810     A7 18 C2 FA | 	rdbyte	arg04, fp
25814     3F 4E 85 F1 | 	sub	fp, #63
25818     80 18 CE F7 | 	test	arg04, #128 wz
2581c     10 4E 05 51 |  if_ne	add	fp, #16
25820     A7 0C 68 5C |  if_ne	wrlong	#6, fp
25824     10 4E 85 51 |  if_ne	sub	fp, #16
25828                 | LR__3860
25828     0C 4E 05 F1 | 	add	fp, #12
2582c     A7 18 C2 FA | 	rdbyte	arg04, fp
25830     0C 4E 85 F1 | 	sub	fp, #12
25834     1C 18 CE F7 | 	test	arg04, #28 wz
25838     F0 01 90 AD |  if_e	jmp	#LR__3865
2583c     10 4E 05 F1 | 	add	fp, #16
25840     A7 1E 0A FB | 	rdlong	local01, fp wz
25844     10 4E 85 F1 | 	sub	fp, #16
25848     48 00 90 AD |  if_e	jmp	#LR__3862
2584c     10 4E 05 F1 | 	add	fp, #16
25850     A7 18 02 FB | 	rdlong	arg04, fp
25854     10 4E 85 F1 | 	sub	fp, #16
25858     04 18 0E F2 | 	cmp	arg04, #4 wz
2585c     1C 00 90 5D |  if_ne	jmp	#LR__3861
25860     14 4E 05 F1 | 	add	fp, #20
25864     A7 12 02 F6 | 	mov	arg01, fp
25868     14 4E 85 F1 | 	sub	fp, #20
2586c     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
25870     10 4E 05 F1 | 	add	fp, #16
25874     A7 FA 61 FC | 	wrlong	result1, fp
25878     10 4E 85 F1 | 	sub	fp, #16
2587c                 | LR__3861
2587c     0C 4E 05 F1 | 	add	fp, #12
25880     A7 1E C2 FA | 	rdbyte	local01, fp
25884     08 1E 46 F5 | 	or	local01, #8
25888     A7 1E 42 FC | 	wrbyte	local01, fp
2588c     0C 4E 85 F1 | 	sub	fp, #12
25890     3C 00 90 FD | 	jmp	#LR__3864
25894                 | LR__3862
25894     1A 4E 05 F1 | 	add	fp, #26
25898     A7 1E C2 FA | 	rdbyte	local01, fp
2589c     1A 4E 85 F1 | 	sub	fp, #26
258a0     11 1E CE F7 | 	test	local01, #17 wz
258a4     10 4E 05 51 |  if_ne	add	fp, #16
258a8     A7 0E 68 5C |  if_ne	wrlong	#7, fp
258ac     10 4E 85 51 |  if_ne	sub	fp, #16
258b0     1C 00 90 5D |  if_ne	jmp	#LR__3863
258b4     0C 4E 05 F1 | 	add	fp, #12
258b8     A7 1E C2 FA | 	rdbyte	local01, fp
258bc     0C 4E 85 F1 | 	sub	fp, #12
258c0     04 1E CE F7 | 	test	local01, #4 wz
258c4     10 4E 05 51 |  if_ne	add	fp, #16
258c8     A7 10 68 5C |  if_ne	wrlong	#8, fp
258cc     10 4E 85 51 |  if_ne	sub	fp, #16
258d0                 | LR__3863
258d0                 | LR__3864
258d0     10 4E 05 F1 | 	add	fp, #16
258d4     A7 1E 0A FB | 	rdlong	local01, fp wz
258d8     10 4E 85 F1 | 	sub	fp, #16
258dc     A8 01 90 5D |  if_ne	jmp	#LR__3868
258e0     0C 4E 05 F1 | 	add	fp, #12
258e4     A7 1E C2 FA | 	rdbyte	local01, fp
258e8     0C 4E 85 F1 | 	sub	fp, #12
258ec     08 1E CE F7 | 	test	local01, #8 wz
258f0     94 01 90 AD |  if_e	jmp	#LR__3868
258f4     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
258f8     54 4E 05 F1 | 	add	fp, #84
258fc     A7 FA 61 FC | 	wrlong	result1, fp
25900     24 4E 85 F1 | 	sub	fp, #36
25904     A7 12 02 FB | 	rdlong	arg01, fp
25908     0E 12 06 F1 | 	add	arg01, #14
2590c     09 FB 61 FC | 	wrlong	result1, arg01
25910     A7 12 02 FB | 	rdlong	arg01, fp
25914     16 12 06 F1 | 	add	arg01, #22
25918     24 4E 05 F1 | 	add	fp, #36
2591c     A7 14 02 FB | 	rdlong	arg02, fp
25920     09 15 62 FC | 	wrlong	arg02, arg01
25924     10 4E 85 F1 | 	sub	fp, #16
25928     A7 12 02 FB | 	rdlong	arg01, fp
2592c     14 4E 85 F1 | 	sub	fp, #20
25930     A7 14 02 FB | 	rdlong	arg02, fp
25934     30 4E 85 F1 | 	sub	fp, #48
25938     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
2593c     48 4E 05 F1 | 	add	fp, #72
25940     A7 FA 61 FC | 	wrlong	result1, fp
25944     18 4E 85 F1 | 	sub	fp, #24
25948     A7 1E 02 FB | 	rdlong	local01, fp
2594c     0B 1E 06 F1 | 	add	local01, #11
25950     0F 41 48 FC | 	wrbyte	#32, local01
25954     14 4E 05 F1 | 	add	fp, #20
25958     A7 12 02 FB | 	rdlong	arg01, fp
2595c     14 4E 85 F1 | 	sub	fp, #20
25960     A7 14 02 FB | 	rdlong	arg02, fp
25964     30 4E 85 F1 | 	sub	fp, #48
25968     00 16 06 F6 | 	mov	arg03, #0
2596c     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
25970     30 4E 05 F1 | 	add	fp, #48
25974     A7 12 02 FB | 	rdlong	arg01, fp
25978     1C 12 06 F1 | 	add	arg01, #28
2597c     09 01 68 FC | 	wrlong	#0, arg01
25980     14 4E 05 F1 | 	add	fp, #20
25984     A7 1E 02 FB | 	rdlong	local01, fp
25988     03 1E 06 F1 | 	add	local01, #3
2598c     0F 03 48 FC | 	wrbyte	#1, local01
25990     04 4E 05 F1 | 	add	fp, #4
25994     A7 1E 0A FB | 	rdlong	local01, fp wz
25998     48 4E 85 F1 | 	sub	fp, #72
2599c     E8 00 90 AD |  if_e	jmp	#LR__3868
259a0     44 4E 05 F1 | 	add	fp, #68
259a4     A7 1E 02 FB | 	rdlong	local01, fp
259a8     30 1E 06 F1 | 	add	local01, #48
259ac     0F 1F 02 FB | 	rdlong	local01, local01
259b0     14 4E 05 F1 | 	add	fp, #20
259b4     A7 1E 62 FC | 	wrlong	local01, fp
259b8     44 4E 85 F1 | 	sub	fp, #68
259bc     A7 12 02 F6 | 	mov	arg01, fp
259c0     34 4E 05 F1 | 	add	fp, #52
259c4     A7 14 02 FB | 	rdlong	arg02, fp
259c8     48 4E 85 F1 | 	sub	fp, #72
259cc     00 16 06 F6 | 	mov	arg03, #0
259d0     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
259d4     10 4E 05 F1 | 	add	fp, #16
259d8     A7 FA 61 FC | 	wrlong	result1, fp
259dc     10 4E 85 F1 | 	sub	fp, #16
259e0     00 FA 0D F2 | 	cmp	result1, #0 wz
259e4     A0 00 90 5D |  if_ne	jmp	#LR__3868
259e8     44 4E 05 F1 | 	add	fp, #68
259ec     A7 12 02 FB | 	rdlong	arg01, fp
259f0     14 4E 05 F1 | 	add	fp, #20
259f4     A7 14 02 FB | 	rdlong	arg02, fp
259f8     58 4E 85 F1 | 	sub	fp, #88
259fc     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
25a00     10 4E 05 F1 | 	add	fp, #16
25a04     A7 FA 61 FC | 	wrlong	result1, fp
25a08     34 4E 05 F1 | 	add	fp, #52
25a0c     A7 18 02 FB | 	rdlong	arg04, fp
25a10     04 4E 05 F1 | 	add	fp, #4
25a14     A7 1E 02 FB | 	rdlong	local01, fp
25a18     48 4E 85 F1 | 	sub	fp, #72
25a1c     01 1E 86 F1 | 	sub	local01, #1
25a20     10 18 06 F1 | 	add	arg04, #16
25a24     0C 1F 62 FC | 	wrlong	local01, arg04
25a28     5C 00 90 FD | 	jmp	#LR__3868
25a2c                 | LR__3865
25a2c     10 4E 05 F1 | 	add	fp, #16
25a30     A7 18 0A FB | 	rdlong	arg04, fp wz
25a34     10 4E 85 F1 | 	sub	fp, #16
25a38     4C 00 90 5D |  if_ne	jmp	#LR__3867
25a3c     1A 4E 05 F1 | 	add	fp, #26
25a40     A7 18 C2 FA | 	rdbyte	arg04, fp
25a44     1A 4E 85 F1 | 	sub	fp, #26
25a48     10 18 CE F7 | 	test	arg04, #16 wz
25a4c     10 4E 05 51 |  if_ne	add	fp, #16
25a50     A7 08 68 5C |  if_ne	wrlong	#4, fp
25a54     10 4E 85 51 |  if_ne	sub	fp, #16
25a58     2C 00 90 5D |  if_ne	jmp	#LR__3866
25a5c     0C 4E 05 F1 | 	add	fp, #12
25a60     A7 18 C2 FA | 	rdbyte	arg04, fp
25a64     0C 4E 85 F1 | 	sub	fp, #12
25a68     02 18 CE F7 | 	test	arg04, #2 wz
25a6c     1A 4E 05 51 |  if_ne	add	fp, #26
25a70     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
25a74     1A 4E 85 51 |  if_ne	sub	fp, #26
25a78     01 1E CE 57 |  if_ne	test	local01, #1 wz
25a7c     10 4E 05 51 |  if_ne	add	fp, #16
25a80     A7 0E 68 5C |  if_ne	wrlong	#7, fp
25a84     10 4E 85 51 |  if_ne	sub	fp, #16
25a88                 | LR__3866
25a88                 | LR__3867
25a88                 | LR__3868
25a88     10 4E 05 F1 | 	add	fp, #16
25a8c     A7 1E 0A FB | 	rdlong	local01, fp wz
25a90     10 4E 85 F1 | 	sub	fp, #16
25a94     60 00 90 5D |  if_ne	jmp	#LR__3869
25a98     0C 4E 05 F1 | 	add	fp, #12
25a9c     A7 20 C2 FA | 	rdbyte	local02, fp
25aa0     0C 4E 85 F1 | 	sub	fp, #12
25aa4     08 20 CE F7 | 	test	local02, #8 wz
25aa8     0C 4E 05 51 |  if_ne	add	fp, #12
25aac     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
25ab0     40 20 46 55 |  if_ne	or	local02, #64
25ab4     A7 20 42 5C |  if_ne	wrbyte	local02, fp
25ab8     0C 4E 85 51 |  if_ne	sub	fp, #12
25abc     04 4E 05 F1 | 	add	fp, #4
25ac0     A7 20 02 FB | 	rdlong	local02, fp
25ac4     40 4E 05 F1 | 	add	fp, #64
25ac8     A7 1E 02 FB | 	rdlong	local01, fp
25acc     30 1E 06 F1 | 	add	local01, #48
25ad0     0F 1F 02 FB | 	rdlong	local01, local01
25ad4     20 20 06 F1 | 	add	local02, #32
25ad8     10 1F 62 FC | 	wrlong	local01, local02
25adc     40 4E 85 F1 | 	sub	fp, #64
25ae0     A7 20 02 FB | 	rdlong	local02, fp
25ae4     2C 4E 05 F1 | 	add	fp, #44
25ae8     A7 1E 02 FB | 	rdlong	local01, fp
25aec     30 4E 85 F1 | 	sub	fp, #48
25af0     24 20 06 F1 | 	add	local02, #36
25af4     10 1F 62 FC | 	wrlong	local01, local02
25af8                 | LR__3869
25af8     10 4E 05 F1 | 	add	fp, #16
25afc     A7 20 0A FB | 	rdlong	local02, fp wz
25b00     10 4E 85 F1 | 	sub	fp, #16
25b04     F4 02 90 5D |  if_ne	jmp	#LR__3875
25b08     04 4E 05 F1 | 	add	fp, #4
25b0c     A7 20 02 FB | 	rdlong	local02, fp
25b10     40 4E 05 F1 | 	add	fp, #64
25b14     A7 12 02 FB | 	rdlong	arg01, fp
25b18     14 4E 85 F1 | 	sub	fp, #20
25b1c     A7 14 02 FB | 	rdlong	arg02, fp
25b20     30 4E 85 F1 | 	sub	fp, #48
25b24     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
25b28     08 20 06 F1 | 	add	local02, #8
25b2c     10 FB 61 FC | 	wrlong	result1, local02
25b30     04 4E 05 F1 | 	add	fp, #4
25b34     A7 20 02 FB | 	rdlong	local02, fp
25b38     2C 4E 05 F1 | 	add	fp, #44
25b3c     A7 12 02 FB | 	rdlong	arg01, fp
25b40     1C 12 06 F1 | 	add	arg01, #28
25b44                 | ' {
25b44                 | ' 
25b44                 | ' 	return *((DWORD*)ptr);
25b44     09 FB 01 FB | 	rdlong	result1, arg01
25b48     0C 20 06 F1 | 	add	local02, #12
25b4c     10 FB 61 FC | 	wrlong	result1, local02
25b50     2C 4E 85 F1 | 	sub	fp, #44
25b54     A7 20 02 FB | 	rdlong	local02, fp
25b58     40 4E 05 F1 | 	add	fp, #64
25b5c     A7 1E 02 FB | 	rdlong	local01, fp
25b60     10 1F 62 FC | 	wrlong	local01, local02
25b64     40 4E 85 F1 | 	sub	fp, #64
25b68     A7 20 02 FB | 	rdlong	local02, fp
25b6c     40 4E 05 F1 | 	add	fp, #64
25b70     A7 1E 02 FB | 	rdlong	local01, fp
25b74     06 1E 06 F1 | 	add	local01, #6
25b78     0F 1F E2 FA | 	rdword	local01, local01
25b7c     04 20 06 F1 | 	add	local02, #4
25b80     10 1F 52 FC | 	wrword	local01, local02
25b84     40 4E 85 F1 | 	sub	fp, #64
25b88     A7 20 02 FB | 	rdlong	local02, fp
25b8c     08 4E 05 F1 | 	add	fp, #8
25b90     A7 1E C2 FA | 	rdbyte	local01, fp
25b94     10 20 06 F1 | 	add	local02, #16
25b98     10 1F 42 FC | 	wrbyte	local01, local02
25b9c     08 4E 85 F1 | 	sub	fp, #8
25ba0     A7 20 02 FB | 	rdlong	local02, fp
25ba4     11 20 06 F1 | 	add	local02, #17
25ba8     10 01 48 FC | 	wrbyte	#0, local02
25bac     A7 20 02 FB | 	rdlong	local02, fp
25bb0     1C 20 06 F1 | 	add	local02, #28
25bb4     10 01 68 FC | 	wrlong	#0, local02
25bb8     A7 20 02 FB | 	rdlong	local02, fp
25bbc     14 20 06 F1 | 	add	local02, #20
25bc0     10 01 68 FC | 	wrlong	#0, local02
25bc4     A7 12 02 FB | 	rdlong	arg01, fp
25bc8     04 4E 85 F1 | 	sub	fp, #4
25bcc     28 12 06 F1 | 	add	arg01, #40
25bd0     00 14 06 F6 | 	mov	arg02, #0
25bd4     09 16 C6 F9 | 	decod	arg03, #9
25bd8     98 00 A0 FD | 	call	#\builtin_bytefill_
25bdc     0C 4E 05 F1 | 	add	fp, #12
25be0     A7 20 C2 FA | 	rdbyte	local02, fp
25be4     0C 4E 85 F1 | 	sub	fp, #12
25be8     20 20 CE F7 | 	test	local02, #32 wz
25bec     0C 02 90 AD |  if_e	jmp	#LR__3874
25bf0     04 4E 05 F1 | 	add	fp, #4
25bf4     A7 1E 02 FB | 	rdlong	local01, fp
25bf8     04 4E 85 F1 | 	sub	fp, #4
25bfc     0C 1E 06 F1 | 	add	local01, #12
25c00     0F 21 02 FB | 	rdlong	local02, local01
25c04     01 20 16 F2 | 	cmp	local02, #1 wc
25c08     F0 01 90 CD |  if_b	jmp	#LR__3874
25c0c     04 4E 05 F1 | 	add	fp, #4
25c10     A7 1E 02 FB | 	rdlong	local01, fp
25c14     0F 21 02 F6 | 	mov	local02, local01
25c18     0C 1E 06 F1 | 	add	local01, #12
25c1c     0F 1F 02 FB | 	rdlong	local01, local01
25c20     14 20 06 F1 | 	add	local02, #20
25c24     10 1F 62 FC | 	wrlong	local01, local02
25c28     40 4E 05 F1 | 	add	fp, #64
25c2c     A7 20 02 FB | 	rdlong	local02, fp
25c30     0A 20 06 F1 | 	add	local02, #10
25c34     10 21 E2 FA | 	rdword	local02, local02
25c38     09 20 66 F0 | 	shl	local02, #9
25c3c     08 4E 05 F1 | 	add	fp, #8
25c40     A7 20 62 FC | 	wrlong	local02, fp
25c44     48 4E 85 F1 | 	sub	fp, #72
25c48     A7 20 02 FB | 	rdlong	local02, fp
25c4c     08 20 06 F1 | 	add	local02, #8
25c50     10 1F 02 FB | 	rdlong	local01, local02
25c54     4C 4E 05 F1 | 	add	fp, #76
25c58     A7 1E 62 FC | 	wrlong	local01, fp
25c5c                 | ' 				fp->fptr = fp->obj.objsize;
25c5c                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
25c5c                 | ' 				clst = fp->obj.sclust;
25c5c                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
25c5c     4C 4E 85 F1 | 	sub	fp, #76
25c60     A7 20 02 FB | 	rdlong	local02, fp
25c64     0C 20 06 F1 | 	add	local02, #12
25c68     10 1F 02 FB | 	rdlong	local01, local02
25c6c     58 4E 05 F1 | 	add	fp, #88
25c70     A7 1E 62 FC | 	wrlong	local01, fp
25c74     5C 4E 85 F1 | 	sub	fp, #92
25c78                 | LR__3870
25c78     10 4E 05 F1 | 	add	fp, #16
25c7c     A7 20 0A FB | 	rdlong	local02, fp wz
25c80     10 4E 85 F1 | 	sub	fp, #16
25c84     94 00 90 5D |  if_ne	jmp	#LR__3871
25c88     5C 4E 05 F1 | 	add	fp, #92
25c8c     A7 20 02 FB | 	rdlong	local02, fp
25c90     10 4E 85 F1 | 	sub	fp, #16
25c94     A7 1E 02 FB | 	rdlong	local01, fp
25c98     4C 4E 85 F1 | 	sub	fp, #76
25c9c     0F 21 1A F2 | 	cmp	local02, local01 wcz
25ca0     78 00 90 ED |  if_be	jmp	#LR__3871
25ca4     04 4E 05 F1 | 	add	fp, #4
25ca8     A7 12 02 FB | 	rdlong	arg01, fp
25cac     4C 4E 05 F1 | 	add	fp, #76
25cb0     A7 14 02 FB | 	rdlong	arg02, fp
25cb4     50 4E 85 F1 | 	sub	fp, #80
25cb8     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
25cbc     50 4E 05 F1 | 	add	fp, #80
25cc0     A7 FA 61 FC | 	wrlong	result1, fp
25cc4     50 4E 85 F1 | 	sub	fp, #80
25cc8     02 FA 15 F2 | 	cmp	result1, #2 wc
25ccc     10 4E 05 C1 |  if_b	add	fp, #16
25cd0     A7 04 68 CC |  if_b	wrlong	#2, fp
25cd4     10 4E 85 C1 |  if_b	sub	fp, #16
25cd8     50 4E 05 F1 | 	add	fp, #80
25cdc     A7 20 02 FB | 	rdlong	local02, fp
25ce0     50 4E 85 F1 | 	sub	fp, #80
25ce4     FF FF 7F FF 
25ce8     FF 21 0E F2 | 	cmp	local02, ##-1 wz
25cec     10 4E 05 A1 |  if_e	add	fp, #16
25cf0     A7 02 68 AC |  if_e	wrlong	#1, fp
25cf4     10 4E 85 A1 |  if_e	sub	fp, #16
25cf8     5C 4E 05 F1 | 	add	fp, #92
25cfc     A7 20 02 FB | 	rdlong	local02, fp
25d00     10 4E 85 F1 | 	sub	fp, #16
25d04     A7 1E 02 FB | 	rdlong	local01, fp
25d08     0F 21 82 F1 | 	sub	local02, local01
25d0c     10 4E 05 F1 | 	add	fp, #16
25d10     A7 20 62 FC | 	wrlong	local02, fp
25d14     5C 4E 85 F1 | 	sub	fp, #92
25d18     5C FF 9F FD | 	jmp	#LR__3870
25d1c                 | LR__3871
25d1c     04 4E 05 F1 | 	add	fp, #4
25d20     A7 20 02 FB | 	rdlong	local02, fp
25d24     4C 4E 05 F1 | 	add	fp, #76
25d28     A7 1E 02 FB | 	rdlong	local01, fp
25d2c     18 20 06 F1 | 	add	local02, #24
25d30     10 1F 62 FC | 	wrlong	local01, local02
25d34     40 4E 85 F1 | 	sub	fp, #64
25d38     A7 20 0A FB | 	rdlong	local02, fp wz
25d3c     10 4E 85 F1 | 	sub	fp, #16
25d40     B8 00 90 5D |  if_ne	jmp	#LR__3873
25d44     5C 4E 05 F1 | 	add	fp, #92
25d48     A7 1E 02 FB | 	rdlong	local01, fp
25d4c     5C 4E 85 F1 | 	sub	fp, #92
25d50     FF 1F CE F7 | 	test	local01, #511 wz
25d54     A4 00 90 AD |  if_e	jmp	#LR__3873
25d58     44 4E 05 F1 | 	add	fp, #68
25d5c     A7 12 02 FB | 	rdlong	arg01, fp
25d60     0C 4E 05 F1 | 	add	fp, #12
25d64     A7 14 02 FB | 	rdlong	arg02, fp
25d68     50 4E 85 F1 | 	sub	fp, #80
25d6c     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
25d70     58 4E 05 F1 | 	add	fp, #88
25d74     A7 FA 61 FC | 	wrlong	result1, fp
25d78     00 FA 4D F2 | 	cmps	result1, #0 wz
25d7c     58 4E 85 F1 | 	sub	fp, #88
25d80     10 4E 05 A1 |  if_e	add	fp, #16
25d84     A7 04 68 AC |  if_e	wrlong	#2, fp
25d88     10 4E 85 A1 |  if_e	sub	fp, #16
25d8c     6C 00 90 AD |  if_e	jmp	#LR__3872
25d90     04 4E 05 F1 | 	add	fp, #4
25d94     A7 20 02 FB | 	rdlong	local02, fp
25d98     54 4E 05 F1 | 	add	fp, #84
25d9c     A7 1E 02 FB | 	rdlong	local01, fp
25da0     04 4E 05 F1 | 	add	fp, #4
25da4     A7 18 02 FB | 	rdlong	arg04, fp
25da8     09 18 46 F0 | 	shr	arg04, #9
25dac     0C 1F 02 F1 | 	add	local01, arg04
25db0     1C 20 06 F1 | 	add	local02, #28
25db4     10 1F 62 FC | 	wrlong	local01, local02
25db8     18 4E 85 F1 | 	sub	fp, #24
25dbc     A7 20 02 FB | 	rdlong	local02, fp
25dc0     01 20 06 F1 | 	add	local02, #1
25dc4     10 13 C2 FA | 	rdbyte	arg01, local02
25dc8     40 4E 85 F1 | 	sub	fp, #64
25dcc     A7 20 02 FB | 	rdlong	local02, fp
25dd0     10 15 02 F6 | 	mov	arg02, local02
25dd4     28 14 06 F1 | 	add	arg02, #40
25dd8     04 4E 85 F1 | 	sub	fp, #4
25ddc     1C 20 06 F1 | 	add	local02, #28
25de0     10 17 02 FB | 	rdlong	arg03, local02
25de4     01 18 06 F6 | 	mov	arg04, #1
25de8     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
25dec     00 FA 0D F2 | 	cmp	result1, #0 wz
25df0     10 4E 05 51 |  if_ne	add	fp, #16
25df4     A7 02 68 5C |  if_ne	wrlong	#1, fp
25df8     10 4E 85 51 |  if_ne	sub	fp, #16
25dfc                 | LR__3872
25dfc                 | LR__3873
25dfc                 | LR__3874
25dfc                 | LR__3875
25dfc                 | LR__3876
25dfc     10 4E 05 F1 | 	add	fp, #16
25e00     A7 20 0A FB | 	rdlong	local02, fp wz
25e04     10 4E 85 F1 | 	sub	fp, #16
25e08     04 4E 05 51 |  if_ne	add	fp, #4
25e0c     A7 20 02 5B |  if_ne	rdlong	local02, fp
25e10     04 4E 85 51 |  if_ne	sub	fp, #4
25e14     10 01 68 5C |  if_ne	wrlong	#0, local02
25e18                 | ' 
25e18                 | ' 	return res ;
25e18     10 4E 05 F1 | 	add	fp, #16
25e1c     A7 FA 01 FB | 	rdlong	result1, fp
25e20     10 4E 85 F1 | 	sub	fp, #16
25e24                 | LR__3877
25e24     A7 F0 03 F6 | 	mov	ptra, fp
25e28     B2 00 A0 FD | 	call	#popregs_
25e2c                 | _fatfs_cc_f_open_ret
25e2c     2D 00 64 FD | 	ret
25e30                 | 
25e30                 | _fatfs_cc_f_read
25e30     0E 4A 05 F6 | 	mov	COUNT_, #14
25e34     A8 00 A0 FD | 	call	#pushregs_
25e38     38 F0 07 F1 | 	add	ptra, #56
25e3c     04 4E 05 F1 | 	add	fp, #4
25e40     A7 12 62 FC | 	wrlong	arg01, fp
25e44     04 4E 05 F1 | 	add	fp, #4
25e48     A7 14 62 FC | 	wrlong	arg02, fp
25e4c     04 4E 05 F1 | 	add	fp, #4
25e50     A7 16 62 FC | 	wrlong	arg03, fp
25e54     04 4E 05 F1 | 	add	fp, #4
25e58     A7 18 62 FC | 	wrlong	arg04, fp
25e5c     08 4E 85 F1 | 	sub	fp, #8
25e60     A7 FA 01 FB | 	rdlong	result1, fp
25e64     2C 4E 05 F1 | 	add	fp, #44
25e68     A7 FA 61 FC | 	wrlong	result1, fp
25e6c     24 4E 85 F1 | 	sub	fp, #36
25e70     A7 FA 01 FB | 	rdlong	result1, fp
25e74     FD 00 68 FC | 	wrlong	#0, result1
25e78     0C 4E 85 F1 | 	sub	fp, #12
25e7c     A7 12 02 FB | 	rdlong	arg01, fp
25e80     14 4E 05 F1 | 	add	fp, #20
25e84     A7 14 02 F6 | 	mov	arg02, fp
25e88     18 4E 85 F1 | 	sub	fp, #24
25e8c     24 F7 BF FD | 	call	#_fatfs_cc_validate
25e90     14 4E 05 F1 | 	add	fp, #20
25e94     A7 FA 61 FC | 	wrlong	result1, fp
25e98     00 FA 4D F2 | 	cmps	result1, #0 wz
25e9c     14 4E 85 F1 | 	sub	fp, #20
25ea0     20 00 90 5D |  if_ne	jmp	#LR__3880
25ea4     04 4E 05 F1 | 	add	fp, #4
25ea8     A7 14 02 FB | 	rdlong	arg02, fp
25eac     11 14 06 F1 | 	add	arg02, #17
25eb0     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
25eb4     10 4E 05 F1 | 	add	fp, #16
25eb8     A7 14 62 FC | 	wrlong	arg02, fp
25ebc     14 4E 85 F1 | 	sub	fp, #20
25ec0     10 00 90 AD |  if_e	jmp	#LR__3881
25ec4                 | LR__3880
25ec4     14 4E 05 F1 | 	add	fp, #20
25ec8     A7 FA 01 FB | 	rdlong	result1, fp
25ecc     14 4E 85 F1 | 	sub	fp, #20
25ed0     EC 05 90 FD | 	jmp	#LR__3900
25ed4                 | LR__3881
25ed4     04 4E 05 F1 | 	add	fp, #4
25ed8     A7 18 02 FB | 	rdlong	arg04, fp
25edc     04 4E 85 F1 | 	sub	fp, #4
25ee0     10 18 06 F1 | 	add	arg04, #16
25ee4     0C 19 C2 FA | 	rdbyte	arg04, arg04
25ee8     01 18 CE F7 | 	test	arg04, #1 wz
25eec     07 FA 05 A6 |  if_e	mov	result1, #7
25ef0     CC 05 90 AD |  if_e	jmp	#LR__3900
25ef4     04 4E 05 F1 | 	add	fp, #4
25ef8     A7 1E 02 FB | 	rdlong	local01, fp
25efc     0F 21 02 F6 | 	mov	local02, local01
25f00     0C 20 06 F1 | 	add	local02, #12
25f04     10 23 02 FB | 	rdlong	local03, local02
25f08     14 1E 06 F1 | 	add	local01, #20
25f0c     0F 1F 02 FB | 	rdlong	local01, local01
25f10     0F 23 82 F1 | 	sub	local03, local01
25f14     20 4E 05 F1 | 	add	fp, #32
25f18     A7 22 62 FC | 	wrlong	local03, fp
25f1c     18 4E 85 F1 | 	sub	fp, #24
25f20     A7 24 02 FB | 	rdlong	local04, fp
25f24     0C 4E 85 F1 | 	sub	fp, #12
25f28     11 25 1A F2 | 	cmp	local04, local03 wcz
25f2c     24 4E 05 11 |  if_a	add	fp, #36
25f30     A7 24 02 1B |  if_a	rdlong	local04, fp
25f34     18 4E 85 11 |  if_a	sub	fp, #24
25f38     A7 24 62 1C |  if_a	wrlong	local04, fp
25f3c     0C 4E 85 11 |  if_a	sub	fp, #12
25f40                 | ' 
25f40                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
25f40                 | LR__3882
25f40     0C 4E 05 F1 | 	add	fp, #12
25f44     A7 20 02 FB | 	rdlong	local02, fp
25f48     0C 4E 85 F1 | 	sub	fp, #12
25f4c     10 25 02 F6 | 	mov	local04, local02
25f50     01 24 16 F2 | 	cmp	local04, #1 wc
25f54     64 05 90 CD |  if_b	jmp	#LR__3899
25f58     04 4E 05 F1 | 	add	fp, #4
25f5c     A7 22 02 FB | 	rdlong	local03, fp
25f60     04 4E 85 F1 | 	sub	fp, #4
25f64     14 22 06 F1 | 	add	local03, #20
25f68     11 23 02 FB | 	rdlong	local03, local03
25f6c     FF 23 CE F7 | 	test	local03, #511 wz
25f70     3C 04 90 5D |  if_ne	jmp	#LR__3897
25f74     04 4E 05 F1 | 	add	fp, #4
25f78     A7 1E 02 FB | 	rdlong	local01, fp
25f7c     14 1E 06 F1 | 	add	local01, #20
25f80     0F 23 02 FB | 	rdlong	local03, local01
25f84     09 22 46 F0 | 	shr	local03, #9
25f88     14 4E 05 F1 | 	add	fp, #20
25f8c     A7 26 02 FB | 	rdlong	local05, fp
25f90     13 29 02 F6 | 	mov	local06, local05
25f94     0A 28 06 F1 | 	add	local06, #10
25f98     14 2B E2 FA | 	rdword	local07, local06
25f9c     0A 28 86 F1 | 	sub	local06, #10
25fa0     15 2D 32 F9 | 	getword	local08, local07, #0
25fa4     01 2C 86 F1 | 	sub	local08, #1
25fa8     16 23 0A F5 | 	and	local03, local08 wz
25fac     18 4E 05 F1 | 	add	fp, #24
25fb0     A7 22 62 FC | 	wrlong	local03, fp
25fb4     30 4E 85 F1 | 	sub	fp, #48
25fb8     E0 00 90 5D |  if_ne	jmp	#LR__3887
25fbc     04 4E 05 F1 | 	add	fp, #4
25fc0     A7 22 02 FB | 	rdlong	local03, fp
25fc4     04 4E 85 F1 | 	sub	fp, #4
25fc8     14 22 06 F1 | 	add	local03, #20
25fcc     11 23 0A FB | 	rdlong	local03, local03 wz
25fd0     20 00 90 5D |  if_ne	jmp	#LR__3883
25fd4     04 4E 05 F1 | 	add	fp, #4
25fd8     A7 22 02 FB | 	rdlong	local03, fp
25fdc     08 22 06 F1 | 	add	local03, #8
25fe0     11 23 02 FB | 	rdlong	local03, local03
25fe4     18 4E 05 F1 | 	add	fp, #24
25fe8     A7 22 62 FC | 	wrlong	local03, fp
25fec     1C 4E 85 F1 | 	sub	fp, #28
25ff0     28 00 90 FD | 	jmp	#LR__3884
25ff4                 | LR__3883
25ff4     04 4E 05 F1 | 	add	fp, #4
25ff8     A7 2C 02 FB | 	rdlong	local08, fp
25ffc     16 13 02 F6 | 	mov	arg01, local08
26000     04 4E 85 F1 | 	sub	fp, #4
26004     18 2C 06 F1 | 	add	local08, #24
26008     16 15 02 FB | 	rdlong	arg02, local08
2600c     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
26010     1C 4E 05 F1 | 	add	fp, #28
26014     A7 FA 61 FC | 	wrlong	result1, fp
26018     1C 4E 85 F1 | 	sub	fp, #28
2601c                 | LR__3884
2601c     1C 4E 05 F1 | 	add	fp, #28
26020     A7 22 02 FB | 	rdlong	local03, fp
26024     1C 4E 85 F1 | 	sub	fp, #28
26028     02 22 16 F2 | 	cmp	local03, #2 wc
2602c     1C 00 90 3D |  if_ae	jmp	#LR__3885
26030     04 4E 05 F1 | 	add	fp, #4
26034     A7 22 02 FB | 	rdlong	local03, fp
26038     04 4E 85 F1 | 	sub	fp, #4
2603c     11 22 06 F1 | 	add	local03, #17
26040     11 05 48 FC | 	wrbyte	#2, local03
26044     02 FA 05 F6 | 	mov	result1, #2
26048     74 04 90 FD | 	jmp	#LR__3900
2604c                 | LR__3885
2604c     1C 4E 05 F1 | 	add	fp, #28
26050     A7 22 02 FB | 	rdlong	local03, fp
26054     1C 4E 85 F1 | 	sub	fp, #28
26058     FF FF 7F FF 
2605c     FF 23 0E F2 | 	cmp	local03, ##-1 wz
26060     1C 00 90 5D |  if_ne	jmp	#LR__3886
26064     04 4E 05 F1 | 	add	fp, #4
26068     A7 22 02 FB | 	rdlong	local03, fp
2606c     04 4E 85 F1 | 	sub	fp, #4
26070     11 22 06 F1 | 	add	local03, #17
26074     11 03 48 FC | 	wrbyte	#1, local03
26078     01 FA 05 F6 | 	mov	result1, #1
2607c     40 04 90 FD | 	jmp	#LR__3900
26080                 | LR__3886
26080     04 4E 05 F1 | 	add	fp, #4
26084     A7 22 02 FB | 	rdlong	local03, fp
26088     18 4E 05 F1 | 	add	fp, #24
2608c     A7 2C 02 FB | 	rdlong	local08, fp
26090     1C 4E 85 F1 | 	sub	fp, #28
26094     18 22 06 F1 | 	add	local03, #24
26098     11 2D 62 FC | 	wrlong	local08, local03
2609c                 | LR__3887
2609c     18 4E 05 F1 | 	add	fp, #24
260a0     A7 12 02 FB | 	rdlong	arg01, fp
260a4     14 4E 85 F1 | 	sub	fp, #20
260a8     A7 22 02 FB | 	rdlong	local03, fp
260ac     04 4E 85 F1 | 	sub	fp, #4
260b0     18 22 06 F1 | 	add	local03, #24
260b4     11 15 02 FB | 	rdlong	arg02, local03
260b8     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
260bc     20 4E 05 F1 | 	add	fp, #32
260c0     A7 FA 61 FC | 	wrlong	result1, fp
260c4     20 4E 85 F1 | 	sub	fp, #32
260c8     00 FA 0D F2 | 	cmp	result1, #0 wz
260cc     1C 00 90 5D |  if_ne	jmp	#LR__3888
260d0     04 4E 05 F1 | 	add	fp, #4
260d4     A7 22 02 FB | 	rdlong	local03, fp
260d8     04 4E 85 F1 | 	sub	fp, #4
260dc     11 22 06 F1 | 	add	local03, #17
260e0     11 05 48 FC | 	wrbyte	#2, local03
260e4     02 FA 05 F6 | 	mov	result1, #2
260e8     D4 03 90 FD | 	jmp	#LR__3900
260ec                 | LR__3888
260ec     20 4E 05 F1 | 	add	fp, #32
260f0     A7 22 02 FB | 	rdlong	local03, fp
260f4     10 4E 05 F1 | 	add	fp, #16
260f8     A7 2C 02 FB | 	rdlong	local08, fp
260fc     16 23 02 F1 | 	add	local03, local08
26100     10 4E 85 F1 | 	sub	fp, #16
26104     A7 22 62 FC | 	wrlong	local03, fp
26108     14 4E 85 F1 | 	sub	fp, #20
2610c     A7 22 02 FB | 	rdlong	local03, fp
26110     09 22 46 F0 | 	shr	local03, #9
26114     20 4E 05 F1 | 	add	fp, #32
26118     A7 22 62 FC | 	wrlong	local03, fp
2611c     2C 4E 85 F1 | 	sub	fp, #44
26120     01 22 16 F2 | 	cmp	local03, #1 wc
26124     5C 01 90 CD |  if_b	jmp	#LR__3892
26128     30 4E 05 F1 | 	add	fp, #48
2612c     A7 22 02 FB | 	rdlong	local03, fp
26130     04 4E 85 F1 | 	sub	fp, #4
26134     A7 2C 02 FB | 	rdlong	local08, fp
26138     16 23 02 F1 | 	add	local03, local08
2613c     14 4E 85 F1 | 	sub	fp, #20
26140     A7 2C 02 FB | 	rdlong	local08, fp
26144     18 4E 85 F1 | 	sub	fp, #24
26148     0A 2C 06 F1 | 	add	local08, #10
2614c     16 2D E2 FA | 	rdword	local08, local08
26150     16 23 1A F2 | 	cmp	local03, local08 wcz
26154     28 00 90 ED |  if_be	jmp	#LR__3889
26158     18 4E 05 F1 | 	add	fp, #24
2615c     A7 1E 02 FB | 	rdlong	local01, fp
26160     0A 1E 06 F1 | 	add	local01, #10
26164     0F 23 E2 FA | 	rdword	local03, local01
26168     18 4E 05 F1 | 	add	fp, #24
2616c     A7 2C 02 FB | 	rdlong	local08, fp
26170     16 23 82 F1 | 	sub	local03, local08
26174     04 4E 85 F1 | 	sub	fp, #4
26178     A7 22 62 FC | 	wrlong	local03, fp
2617c     2C 4E 85 F1 | 	sub	fp, #44
26180                 | LR__3889
26180     18 4E 05 F1 | 	add	fp, #24
26184     A7 1E 02 FB | 	rdlong	local01, fp
26188     01 1E 06 F1 | 	add	local01, #1
2618c     0F 13 C2 FA | 	rdbyte	arg01, local01
26190     1C 4E 05 F1 | 	add	fp, #28
26194     A7 14 02 FB | 	rdlong	arg02, fp
26198     14 4E 85 F1 | 	sub	fp, #20
2619c     A7 16 02 FB | 	rdlong	arg03, fp
261a0     0C 4E 05 F1 | 	add	fp, #12
261a4     A7 18 02 FB | 	rdlong	arg04, fp
261a8     2C 4E 85 F1 | 	sub	fp, #44
261ac     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
261b0     00 FA 0D F2 | 	cmp	result1, #0 wz
261b4     1C 00 90 AD |  if_e	jmp	#LR__3890
261b8     04 4E 05 F1 | 	add	fp, #4
261bc     A7 22 02 FB | 	rdlong	local03, fp
261c0     04 4E 85 F1 | 	sub	fp, #4
261c4     11 22 06 F1 | 	add	local03, #17
261c8     11 03 48 FC | 	wrbyte	#1, local03
261cc     01 FA 05 F6 | 	mov	result1, #1
261d0     EC 02 90 FD | 	jmp	#LR__3900
261d4                 | LR__3890
261d4     04 4E 05 F1 | 	add	fp, #4
261d8     A7 1E 02 FB | 	rdlong	local01, fp
261dc     04 4E 85 F1 | 	sub	fp, #4
261e0     10 1E 06 F1 | 	add	local01, #16
261e4     0F 23 C2 FA | 	rdbyte	local03, local01
261e8     80 22 CE F7 | 	test	local03, #128 wz
261ec     78 00 90 AD |  if_e	jmp	#LR__3891
261f0     04 4E 05 F1 | 	add	fp, #4
261f4     A7 2C 02 FB | 	rdlong	local08, fp
261f8     1C 2C 06 F1 | 	add	local08, #28
261fc     16 2D 02 FB | 	rdlong	local08, local08
26200     1C 4E 05 F1 | 	add	fp, #28
26204     A7 2E 02 FB | 	rdlong	local09, fp
26208     17 2D 82 F1 | 	sub	local08, local09
2620c     0C 4E 05 F1 | 	add	fp, #12
26210     A7 30 02 FB | 	rdlong	local10, fp
26214     2C 4E 85 F1 | 	sub	fp, #44
26218     18 33 02 F6 | 	mov	local11, local10
2621c     19 2D 12 F2 | 	cmp	local08, local11 wc
26220     44 00 90 3D |  if_ae	jmp	#LR__3891
26224     34 4E 05 F1 | 	add	fp, #52
26228     A7 12 02 FB | 	rdlong	arg01, fp
2622c     30 4E 85 F1 | 	sub	fp, #48
26230     A7 14 02 FB | 	rdlong	arg02, fp
26234     0A 33 02 F6 | 	mov	local11, arg02
26238     1C 32 06 F1 | 	add	local11, #28
2623c     19 2F 02 FB | 	rdlong	local09, local11
26240     1C 4E 05 F1 | 	add	fp, #28
26244     A7 26 02 FB | 	rdlong	local05, fp
26248     13 2F 82 F1 | 	sub	local09, local05
2624c     09 2E 66 F0 | 	shl	local09, #9
26250     17 33 02 F6 | 	mov	local11, local09
26254     17 13 02 F1 | 	add	arg01, local09
26258     20 4E 85 F1 | 	sub	fp, #32
2625c     28 14 06 F1 | 	add	arg02, #40
26260     09 16 C6 F9 | 	decod	arg03, #9
26264     20 49 BF FD | 	call	#__system____builtin_memmove
26268                 | LR__3891
26268     2C 4E 05 F1 | 	add	fp, #44
2626c     A7 22 02 FB | 	rdlong	local03, fp
26270     09 22 66 F0 | 	shl	local03, #9
26274     04 4E 85 F1 | 	sub	fp, #4
26278     A7 22 62 FC | 	wrlong	local03, fp
2627c     28 4E 85 F1 | 	sub	fp, #40
26280                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
26280                 | ' 				}
26280                 | ' 
26280                 | ' 
26280                 | ' 				rcnt =  ((UINT) 512 )  * cc;
26280                 | ' 				continue;
26280     B4 01 90 FD | 	jmp	#LR__3898
26284                 | LR__3892
26284     04 4E 05 F1 | 	add	fp, #4
26288     A7 22 02 FB | 	rdlong	local03, fp
2628c     1C 22 06 F1 | 	add	local03, #28
26290     11 23 02 FB | 	rdlong	local03, local03
26294     1C 4E 05 F1 | 	add	fp, #28
26298     A7 1E 02 FB | 	rdlong	local01, fp
2629c     20 4E 85 F1 | 	sub	fp, #32
262a0     0F 23 0A F2 | 	cmp	local03, local01 wz
262a4     EC 00 90 AD |  if_e	jmp	#LR__3896
262a8     04 4E 05 F1 | 	add	fp, #4
262ac     A7 1E 02 FB | 	rdlong	local01, fp
262b0     04 4E 85 F1 | 	sub	fp, #4
262b4     10 1E 06 F1 | 	add	local01, #16
262b8     0F 23 C2 FA | 	rdbyte	local03, local01
262bc     80 22 CE F7 | 	test	local03, #128 wz
262c0     7C 00 90 AD |  if_e	jmp	#LR__3894
262c4     18 4E 05 F1 | 	add	fp, #24
262c8     A7 1E 02 FB | 	rdlong	local01, fp
262cc     01 1E 06 F1 | 	add	local01, #1
262d0     0F 13 C2 FA | 	rdbyte	arg01, local01
262d4     14 4E 85 F1 | 	sub	fp, #20
262d8     A7 22 02 FB | 	rdlong	local03, fp
262dc     11 15 02 F6 | 	mov	arg02, local03
262e0     28 14 06 F1 | 	add	arg02, #40
262e4     04 4E 85 F1 | 	sub	fp, #4
262e8     1C 22 06 F1 | 	add	local03, #28
262ec     11 17 02 FB | 	rdlong	arg03, local03
262f0     01 18 06 F6 | 	mov	arg04, #1
262f4     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
262f8     00 FA 0D F2 | 	cmp	result1, #0 wz
262fc     1C 00 90 AD |  if_e	jmp	#LR__3893
26300     04 4E 05 F1 | 	add	fp, #4
26304     A7 22 02 FB | 	rdlong	local03, fp
26308     04 4E 85 F1 | 	sub	fp, #4
2630c     11 22 06 F1 | 	add	local03, #17
26310     11 03 48 FC | 	wrbyte	#1, local03
26314     01 FA 05 F6 | 	mov	result1, #1
26318     A4 01 90 FD | 	jmp	#LR__3900
2631c                 | LR__3893
2631c     04 4E 05 F1 | 	add	fp, #4
26320     A7 32 02 FB | 	rdlong	local11, fp
26324     19 23 02 F6 | 	mov	local03, local11
26328     04 4E 85 F1 | 	sub	fp, #4
2632c     10 32 06 F1 | 	add	local11, #16
26330     19 33 C2 FA | 	rdbyte	local11, local11
26334     7F 32 06 F5 | 	and	local11, #127
26338     10 22 06 F1 | 	add	local03, #16
2633c     11 33 42 FC | 	wrbyte	local11, local03
26340                 | LR__3894
26340     18 4E 05 F1 | 	add	fp, #24
26344     A7 1E 02 FB | 	rdlong	local01, fp
26348     01 1E 06 F1 | 	add	local01, #1
2634c     0F 13 C2 FA | 	rdbyte	arg01, local01
26350     14 4E 85 F1 | 	sub	fp, #20
26354     A7 14 02 FB | 	rdlong	arg02, fp
26358     28 14 06 F1 | 	add	arg02, #40
2635c     1C 4E 05 F1 | 	add	fp, #28
26360     A7 16 02 FB | 	rdlong	arg03, fp
26364     20 4E 85 F1 | 	sub	fp, #32
26368     01 18 06 F6 | 	mov	arg04, #1
2636c     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
26370     00 FA 0D F2 | 	cmp	result1, #0 wz
26374     1C 00 90 AD |  if_e	jmp	#LR__3895
26378     04 4E 05 F1 | 	add	fp, #4
2637c     A7 22 02 FB | 	rdlong	local03, fp
26380     04 4E 85 F1 | 	sub	fp, #4
26384     11 22 06 F1 | 	add	local03, #17
26388     11 03 48 FC | 	wrbyte	#1, local03
2638c     01 FA 05 F6 | 	mov	result1, #1
26390     2C 01 90 FD | 	jmp	#LR__3900
26394                 | LR__3895
26394                 | LR__3896
26394     04 4E 05 F1 | 	add	fp, #4
26398     A7 22 02 FB | 	rdlong	local03, fp
2639c     1C 4E 05 F1 | 	add	fp, #28
263a0     A7 32 02 FB | 	rdlong	local11, fp
263a4     20 4E 85 F1 | 	sub	fp, #32
263a8     1C 22 06 F1 | 	add	local03, #28
263ac     11 33 62 FC | 	wrlong	local11, local03
263b0                 | LR__3897
263b0     04 4E 05 F1 | 	add	fp, #4
263b4     A7 1E 02 FB | 	rdlong	local01, fp
263b8     14 1E 06 F1 | 	add	local01, #20
263bc     0F 33 02 FB | 	rdlong	local11, local01
263c0     FF 33 06 F5 | 	and	local11, #511
263c4     09 22 C6 F9 | 	decod	local03, #9
263c8     19 23 82 F1 | 	sub	local03, local11
263cc     24 4E 05 F1 | 	add	fp, #36
263d0     A7 22 62 FC | 	wrlong	local03, fp
263d4     1C 4E 85 F1 | 	sub	fp, #28
263d8     A7 32 02 FB | 	rdlong	local11, fp
263dc     0C 4E 85 F1 | 	sub	fp, #12
263e0     19 23 1A F2 | 	cmp	local03, local11 wcz
263e4     0C 4E 05 11 |  if_a	add	fp, #12
263e8     A7 22 02 1B |  if_a	rdlong	local03, fp
263ec     1C 4E 05 11 |  if_a	add	fp, #28
263f0     A7 22 62 1C |  if_a	wrlong	local03, fp
263f4     28 4E 85 11 |  if_a	sub	fp, #40
263f8     34 4E 05 F1 | 	add	fp, #52
263fc     A7 12 02 FB | 	rdlong	arg01, fp
26400     30 4E 85 F1 | 	sub	fp, #48
26404     A7 28 02 FB | 	rdlong	local06, fp
26408     14 15 02 F6 | 	mov	arg02, local06
2640c     28 14 06 F1 | 	add	arg02, #40
26410     14 28 06 F1 | 	add	local06, #20
26414     14 33 02 FB | 	rdlong	local11, local06
26418     19 2F 02 F6 | 	mov	local09, local11
2641c     17 31 02 F6 | 	mov	local10, local09
26420     FF 31 06 F5 | 	and	local10, #511
26424     18 15 02 F1 | 	add	arg02, local10
26428     24 4E 05 F1 | 	add	fp, #36
2642c     A7 16 02 FB | 	rdlong	arg03, fp
26430     28 4E 85 F1 | 	sub	fp, #40
26434     50 47 BF FD | 	call	#__system____builtin_memmove
26438                 | LR__3898
26438     0C 4E 05 F1 | 	add	fp, #12
2643c     A7 22 02 FB | 	rdlong	local03, fp
26440     1C 4E 05 F1 | 	add	fp, #28
26444     A7 2C 02 FB | 	rdlong	local08, fp
26448     16 23 82 F1 | 	sub	local03, local08
2644c     1C 4E 85 F1 | 	sub	fp, #28
26450     A7 22 62 FC | 	wrlong	local03, fp
26454     04 4E 05 F1 | 	add	fp, #4
26458     A7 1E 02 FB | 	rdlong	local01, fp
2645c     0F 2B 02 FB | 	rdlong	local07, local01
26460     18 4E 05 F1 | 	add	fp, #24
26464     A7 2C 02 FB | 	rdlong	local08, fp
26468     16 2B 02 F1 | 	add	local07, local08
2646c     0F 2B 62 FC | 	wrlong	local07, local01
26470     0C 4E 05 F1 | 	add	fp, #12
26474     A7 22 02 FB | 	rdlong	local03, fp
26478     0C 4E 85 F1 | 	sub	fp, #12
2647c     A7 34 02 FB | 	rdlong	local12, fp
26480     1A 23 02 F1 | 	add	local03, local12
26484     0C 4E 05 F1 | 	add	fp, #12
26488     A7 22 62 FC | 	wrlong	local03, fp
2648c     30 4E 85 F1 | 	sub	fp, #48
26490     A7 36 02 FB | 	rdlong	local13, fp
26494     1B 23 02 F6 | 	mov	local03, local13
26498     14 36 06 F1 | 	add	local13, #20
2649c     1B 39 02 FB | 	rdlong	local14, local13
264a0     24 4E 05 F1 | 	add	fp, #36
264a4     A7 28 02 FB | 	rdlong	local06, fp
264a8     28 4E 85 F1 | 	sub	fp, #40
264ac     14 39 02 F1 | 	add	local14, local06
264b0     14 22 06 F1 | 	add	local03, #20
264b4     11 39 62 FC | 	wrlong	local14, local03
264b8     84 FA 9F FD | 	jmp	#LR__3882
264bc                 | LR__3899
264bc                 | ' 
264bc                 | ' 
264bc                 | ' 
264bc                 | ' 
264bc                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
264bc                 | ' 
264bc                 | ' 	}
264bc                 | ' 
264bc                 | ' 	return FR_OK ;
264bc     00 FA 05 F6 | 	mov	result1, #0
264c0                 | LR__3900
264c0     A7 F0 03 F6 | 	mov	ptra, fp
264c4     B2 00 A0 FD | 	call	#popregs_
264c8                 | _fatfs_cc_f_read_ret
264c8     2D 00 64 FD | 	ret
264cc                 | 
264cc                 | _fatfs_cc_f_write
264cc     15 4A 05 F6 | 	mov	COUNT_, #21
264d0     A8 00 A0 FD | 	call	#pushregs_
264d4     34 F0 07 F1 | 	add	ptra, #52
264d8     04 4E 05 F1 | 	add	fp, #4
264dc     A7 12 62 FC | 	wrlong	arg01, fp
264e0     04 4E 05 F1 | 	add	fp, #4
264e4     A7 14 62 FC | 	wrlong	arg02, fp
264e8     04 4E 05 F1 | 	add	fp, #4
264ec     A7 16 62 FC | 	wrlong	arg03, fp
264f0     04 4E 05 F1 | 	add	fp, #4
264f4     A7 18 62 FC | 	wrlong	arg04, fp
264f8     08 4E 85 F1 | 	sub	fp, #8
264fc     A7 FA 01 FB | 	rdlong	result1, fp
26500     28 4E 05 F1 | 	add	fp, #40
26504     A7 FA 61 FC | 	wrlong	result1, fp
26508     20 4E 85 F1 | 	sub	fp, #32
2650c     A7 FA 01 FB | 	rdlong	result1, fp
26510     FD 00 68 FC | 	wrlong	#0, result1
26514     0C 4E 85 F1 | 	sub	fp, #12
26518     A7 12 02 FB | 	rdlong	arg01, fp
2651c     14 4E 05 F1 | 	add	fp, #20
26520     A7 14 02 F6 | 	mov	arg02, fp
26524     18 4E 85 F1 | 	sub	fp, #24
26528     88 F0 BF FD | 	call	#_fatfs_cc_validate
2652c     14 4E 05 F1 | 	add	fp, #20
26530     A7 FA 61 FC | 	wrlong	result1, fp
26534     00 FA 4D F2 | 	cmps	result1, #0 wz
26538     14 4E 85 F1 | 	sub	fp, #20
2653c     20 00 90 5D |  if_ne	jmp	#LR__3910
26540     04 4E 05 F1 | 	add	fp, #4
26544     A7 14 02 FB | 	rdlong	arg02, fp
26548     11 14 06 F1 | 	add	arg02, #17
2654c     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
26550     10 4E 05 F1 | 	add	fp, #16
26554     A7 14 62 FC | 	wrlong	arg02, fp
26558     14 4E 85 F1 | 	sub	fp, #20
2655c     10 00 90 AD |  if_e	jmp	#LR__3911
26560                 | LR__3910
26560     14 4E 05 F1 | 	add	fp, #20
26564     A7 FA 01 FB | 	rdlong	result1, fp
26568     14 4E 85 F1 | 	sub	fp, #20
2656c     44 07 90 FD | 	jmp	#LR__3933
26570                 | LR__3911
26570     04 4E 05 F1 | 	add	fp, #4
26574     A7 14 02 FB | 	rdlong	arg02, fp
26578     04 4E 85 F1 | 	sub	fp, #4
2657c     10 14 06 F1 | 	add	arg02, #16
26580     0A 15 C2 FA | 	rdbyte	arg02, arg02
26584     02 14 CE F7 | 	test	arg02, #2 wz
26588     07 FA 05 A6 |  if_e	mov	result1, #7
2658c     24 07 90 AD |  if_e	jmp	#LR__3933
26590     04 4E 05 F1 | 	add	fp, #4
26594     A7 14 02 FB | 	rdlong	arg02, fp
26598     0A 13 02 F6 | 	mov	arg01, arg02
2659c     14 12 06 F1 | 	add	arg01, #20
265a0     09 13 02 FB | 	rdlong	arg01, arg01
265a4     08 4E 05 F1 | 	add	fp, #8
265a8     A7 FA 01 FB | 	rdlong	result1, fp
265ac     FD 12 02 F1 | 	add	arg01, result1
265b0     0C 4E 85 F1 | 	sub	fp, #12
265b4     14 14 06 F1 | 	add	arg02, #20
265b8     0A FB 01 FB | 	rdlong	result1, arg02
265bc     FD 12 12 F2 | 	cmp	arg01, result1 wc
265c0     24 00 90 3D |  if_ae	jmp	#LR__3912
265c4     04 4E 05 F1 | 	add	fp, #4
265c8     A7 14 02 FB | 	rdlong	arg02, fp
265cc     01 FA 65 F6 | 	neg	result1, #1
265d0     14 14 06 F1 | 	add	arg02, #20
265d4     0A 15 02 FB | 	rdlong	arg02, arg02
265d8     0A FB 81 F1 | 	sub	result1, arg02
265dc     08 4E 05 F1 | 	add	fp, #8
265e0     A7 FA 61 FC | 	wrlong	result1, fp
265e4     0C 4E 85 F1 | 	sub	fp, #12
265e8                 | LR__3912
265e8                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
265e8                 | ' 	}
265e8                 | ' 
265e8                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
265e8                 | LR__3913
265e8     0C 4E 05 F1 | 	add	fp, #12
265ec     A7 FA 01 FB | 	rdlong	result1, fp
265f0     0C 4E 85 F1 | 	sub	fp, #12
265f4     01 FA 15 F2 | 	cmp	result1, #1 wc
265f8     90 06 90 CD |  if_b	jmp	#LR__3932
265fc     04 4E 05 F1 | 	add	fp, #4
26600     A7 FA 01 FB | 	rdlong	result1, fp
26604     04 4E 85 F1 | 	sub	fp, #4
26608     14 FA 05 F1 | 	add	result1, #20
2660c     FD FA 01 FB | 	rdlong	result1, result1
26610     FF FB CD F7 | 	test	result1, #511 wz
26614     D8 04 90 5D |  if_ne	jmp	#LR__3928
26618     04 4E 05 F1 | 	add	fp, #4
2661c     A7 FA 01 FB | 	rdlong	result1, fp
26620     14 FA 05 F1 | 	add	result1, #20
26624     FD FA 01 FB | 	rdlong	result1, result1
26628     09 FA 45 F0 | 	shr	result1, #9
2662c     14 4E 05 F1 | 	add	fp, #20
26630     A7 14 02 FB | 	rdlong	arg02, fp
26634     0A 14 06 F1 | 	add	arg02, #10
26638     0A 19 E2 FA | 	rdword	arg04, arg02
2663c     0C 15 32 F9 | 	getword	arg02, arg04, #0
26640     01 14 86 F1 | 	sub	arg02, #1
26644     0A FB 09 F5 | 	and	result1, arg02 wz
26648     14 4E 05 F1 | 	add	fp, #20
2664c     A7 FA 61 FC | 	wrlong	result1, fp
26650     2C 4E 85 F1 | 	sub	fp, #44
26654     44 01 90 5D |  if_ne	jmp	#LR__3919
26658     04 4E 05 F1 | 	add	fp, #4
2665c     A7 FA 01 FB | 	rdlong	result1, fp
26660     04 4E 85 F1 | 	sub	fp, #4
26664     14 FA 05 F1 | 	add	result1, #20
26668     FD 14 0A FB | 	rdlong	arg02, result1 wz
2666c     44 00 90 5D |  if_ne	jmp	#LR__3914
26670     04 4E 05 F1 | 	add	fp, #4
26674     A7 14 02 FB | 	rdlong	arg02, fp
26678     08 14 06 F1 | 	add	arg02, #8
2667c     0A 15 0A FB | 	rdlong	arg02, arg02 wz
26680     18 4E 05 F1 | 	add	fp, #24
26684     A7 14 62 FC | 	wrlong	arg02, fp
26688     1C 4E 85 F1 | 	sub	fp, #28
2668c     4C 00 90 5D |  if_ne	jmp	#LR__3915
26690     04 4E 05 F1 | 	add	fp, #4
26694     A7 12 02 FB | 	rdlong	arg01, fp
26698     04 4E 85 F1 | 	sub	fp, #4
2669c     00 14 06 F6 | 	mov	arg02, #0
266a0     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
266a4     1C 4E 05 F1 | 	add	fp, #28
266a8     A7 FA 61 FC | 	wrlong	result1, fp
266ac     1C 4E 85 F1 | 	sub	fp, #28
266b0     28 00 90 FD | 	jmp	#LR__3915
266b4                 | LR__3914
266b4     04 4E 05 F1 | 	add	fp, #4
266b8     A7 18 02 FB | 	rdlong	arg04, fp
266bc     0C 13 02 F6 | 	mov	arg01, arg04
266c0     04 4E 85 F1 | 	sub	fp, #4
266c4     18 18 06 F1 | 	add	arg04, #24
266c8     0C 15 02 FB | 	rdlong	arg02, arg04
266cc     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
266d0     1C 4E 05 F1 | 	add	fp, #28
266d4     A7 FA 61 FC | 	wrlong	result1, fp
266d8     1C 4E 85 F1 | 	sub	fp, #28
266dc                 | LR__3915
266dc     1C 4E 05 F1 | 	add	fp, #28
266e0     A7 FA 09 FB | 	rdlong	result1, fp wz
266e4     1C 4E 85 F1 | 	sub	fp, #28
266e8     A0 05 90 AD |  if_e	jmp	#LR__3932
266ec     1C 4E 05 F1 | 	add	fp, #28
266f0     A7 FA 01 FB | 	rdlong	result1, fp
266f4     1C 4E 85 F1 | 	sub	fp, #28
266f8     01 FA 0D F2 | 	cmp	result1, #1 wz
266fc     1C 00 90 5D |  if_ne	jmp	#LR__3916
26700     04 4E 05 F1 | 	add	fp, #4
26704     A7 FA 01 FB | 	rdlong	result1, fp
26708     04 4E 85 F1 | 	sub	fp, #4
2670c     11 FA 05 F1 | 	add	result1, #17
26710     FD 04 48 FC | 	wrbyte	#2, result1
26714     02 FA 05 F6 | 	mov	result1, #2
26718     98 05 90 FD | 	jmp	#LR__3933
2671c                 | LR__3916
2671c     1C 4E 05 F1 | 	add	fp, #28
26720     A7 FA 01 FB | 	rdlong	result1, fp
26724     1C 4E 85 F1 | 	sub	fp, #28
26728     FF FF 7F FF 
2672c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
26730     1C 00 90 5D |  if_ne	jmp	#LR__3917
26734     04 4E 05 F1 | 	add	fp, #4
26738     A7 FA 01 FB | 	rdlong	result1, fp
2673c     04 4E 85 F1 | 	sub	fp, #4
26740     11 FA 05 F1 | 	add	result1, #17
26744     FD 02 48 FC | 	wrbyte	#1, result1
26748     01 FA 05 F6 | 	mov	result1, #1
2674c     64 05 90 FD | 	jmp	#LR__3933
26750                 | LR__3917
26750     04 4E 05 F1 | 	add	fp, #4
26754     A7 FA 01 FB | 	rdlong	result1, fp
26758     18 4E 05 F1 | 	add	fp, #24
2675c     A7 18 02 FB | 	rdlong	arg04, fp
26760     18 FA 05 F1 | 	add	result1, #24
26764     FD 18 62 FC | 	wrlong	arg04, result1
26768     18 4E 85 F1 | 	sub	fp, #24
2676c     A7 FA 01 FB | 	rdlong	result1, fp
26770     04 4E 85 F1 | 	sub	fp, #4
26774     08 FA 05 F1 | 	add	result1, #8
26778     FD FA 09 FB | 	rdlong	result1, result1 wz
2677c     1C 00 90 5D |  if_ne	jmp	#LR__3918
26780     04 4E 05 F1 | 	add	fp, #4
26784     A7 18 02 FB | 	rdlong	arg04, fp
26788     18 4E 05 F1 | 	add	fp, #24
2678c     A7 FA 01 FB | 	rdlong	result1, fp
26790     1C 4E 85 F1 | 	sub	fp, #28
26794     08 18 06 F1 | 	add	arg04, #8
26798     0C FB 61 FC | 	wrlong	result1, arg04
2679c                 | LR__3918
2679c                 | LR__3919
2679c     04 4E 05 F1 | 	add	fp, #4
267a0     A7 18 02 FB | 	rdlong	arg04, fp
267a4     04 4E 85 F1 | 	sub	fp, #4
267a8     10 18 06 F1 | 	add	arg04, #16
267ac     0C 19 C2 FA | 	rdbyte	arg04, arg04
267b0     80 18 CE F7 | 	test	arg04, #128 wz
267b4     7C 00 90 AD |  if_e	jmp	#LR__3921
267b8     18 4E 05 F1 | 	add	fp, #24
267bc     A7 18 02 FB | 	rdlong	arg04, fp
267c0     01 18 06 F1 | 	add	arg04, #1
267c4     0C 13 C2 FA | 	rdbyte	arg01, arg04
267c8     14 4E 85 F1 | 	sub	fp, #20
267cc     A7 18 02 FB | 	rdlong	arg04, fp
267d0     0C 15 02 F6 | 	mov	arg02, arg04
267d4     28 14 06 F1 | 	add	arg02, #40
267d8     04 4E 85 F1 | 	sub	fp, #4
267dc     1C 18 06 F1 | 	add	arg04, #28
267e0     0C 17 02 FB | 	rdlong	arg03, arg04
267e4     01 18 06 F6 | 	mov	arg04, #1
267e8     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
267ec     00 FA 0D F2 | 	cmp	result1, #0 wz
267f0     1C 00 90 AD |  if_e	jmp	#LR__3920
267f4     04 4E 05 F1 | 	add	fp, #4
267f8     A7 FA 01 FB | 	rdlong	result1, fp
267fc     04 4E 85 F1 | 	sub	fp, #4
26800     11 FA 05 F1 | 	add	result1, #17
26804     FD 02 48 FC | 	wrbyte	#1, result1
26808     01 FA 05 F6 | 	mov	result1, #1
2680c     A4 04 90 FD | 	jmp	#LR__3933
26810                 | LR__3920
26810     04 4E 05 F1 | 	add	fp, #4
26814     A7 18 02 FB | 	rdlong	arg04, fp
26818     0C FB 01 F6 | 	mov	result1, arg04
2681c     04 4E 85 F1 | 	sub	fp, #4
26820     10 18 06 F1 | 	add	arg04, #16
26824     0C 19 C2 FA | 	rdbyte	arg04, arg04
26828     7F 18 06 F5 | 	and	arg04, #127
2682c     10 FA 05 F1 | 	add	result1, #16
26830     FD 18 42 FC | 	wrbyte	arg04, result1
26834                 | LR__3921
26834     18 4E 05 F1 | 	add	fp, #24
26838     A7 12 02 FB | 	rdlong	arg01, fp
2683c     14 4E 85 F1 | 	sub	fp, #20
26840     A7 14 02 FB | 	rdlong	arg02, fp
26844     04 4E 85 F1 | 	sub	fp, #4
26848     18 14 06 F1 | 	add	arg02, #24
2684c     0A 15 02 FB | 	rdlong	arg02, arg02
26850     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
26854     20 4E 05 F1 | 	add	fp, #32
26858     A7 FA 61 FC | 	wrlong	result1, fp
2685c     20 4E 85 F1 | 	sub	fp, #32
26860     00 FA 0D F2 | 	cmp	result1, #0 wz
26864     1C 00 90 5D |  if_ne	jmp	#LR__3922
26868     04 4E 05 F1 | 	add	fp, #4
2686c     A7 FA 01 FB | 	rdlong	result1, fp
26870     04 4E 85 F1 | 	sub	fp, #4
26874     11 FA 05 F1 | 	add	result1, #17
26878     FD 04 48 FC | 	wrbyte	#2, result1
2687c     02 FA 05 F6 | 	mov	result1, #2
26880     30 04 90 FD | 	jmp	#LR__3933
26884                 | LR__3922
26884     20 4E 05 F1 | 	add	fp, #32
26888     A7 FA 01 FB | 	rdlong	result1, fp
2688c     0C 4E 05 F1 | 	add	fp, #12
26890     A7 1E 02 FB | 	rdlong	local01, fp
26894     0F FB 01 F1 | 	add	result1, local01
26898     0C 4E 85 F1 | 	sub	fp, #12
2689c     A7 FA 61 FC | 	wrlong	result1, fp
268a0     14 4E 85 F1 | 	sub	fp, #20
268a4     A7 FA 01 FB | 	rdlong	result1, fp
268a8     09 FA 45 F0 | 	shr	result1, #9
268ac     1C 4E 05 F1 | 	add	fp, #28
268b0     A7 FA 61 FC | 	wrlong	result1, fp
268b4     28 4E 85 F1 | 	sub	fp, #40
268b8     01 FA 15 F2 | 	cmp	result1, #1 wc
268bc     60 01 90 CD |  if_b	jmp	#LR__3926
268c0     2C 4E 05 F1 | 	add	fp, #44
268c4     A7 FA 01 FB | 	rdlong	result1, fp
268c8     04 4E 85 F1 | 	sub	fp, #4
268cc     A7 18 02 FB | 	rdlong	arg04, fp
268d0     0C FB 01 F1 | 	add	result1, arg04
268d4     10 4E 85 F1 | 	sub	fp, #16
268d8     A7 18 02 FB | 	rdlong	arg04, fp
268dc     18 4E 85 F1 | 	sub	fp, #24
268e0     0A 18 06 F1 | 	add	arg04, #10
268e4     0C 19 E2 FA | 	rdword	arg04, arg04
268e8     0C FB 19 F2 | 	cmp	result1, arg04 wcz
268ec     28 00 90 ED |  if_be	jmp	#LR__3923
268f0     18 4E 05 F1 | 	add	fp, #24
268f4     A7 FA 01 FB | 	rdlong	result1, fp
268f8     0A FA 05 F1 | 	add	result1, #10
268fc     FD FA E1 FA | 	rdword	result1, result1
26900     14 4E 05 F1 | 	add	fp, #20
26904     A7 18 02 FB | 	rdlong	arg04, fp
26908     0C FB 81 F1 | 	sub	result1, arg04
2690c     04 4E 85 F1 | 	sub	fp, #4
26910     A7 FA 61 FC | 	wrlong	result1, fp
26914     28 4E 85 F1 | 	sub	fp, #40
26918                 | LR__3923
26918     18 4E 05 F1 | 	add	fp, #24
2691c     A7 18 02 FB | 	rdlong	arg04, fp
26920     01 18 06 F1 | 	add	arg04, #1
26924     0C 13 C2 FA | 	rdbyte	arg01, arg04
26928     18 4E 05 F1 | 	add	fp, #24
2692c     A7 14 02 FB | 	rdlong	arg02, fp
26930     10 4E 85 F1 | 	sub	fp, #16
26934     A7 16 02 FB | 	rdlong	arg03, fp
26938     08 4E 05 F1 | 	add	fp, #8
2693c     A7 18 02 FB | 	rdlong	arg04, fp
26940     28 4E 85 F1 | 	sub	fp, #40
26944     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
26948     00 FA 0D F2 | 	cmp	result1, #0 wz
2694c     1C 00 90 AD |  if_e	jmp	#LR__3924
26950     04 4E 05 F1 | 	add	fp, #4
26954     A7 1E 02 FB | 	rdlong	local01, fp
26958     04 4E 85 F1 | 	sub	fp, #4
2695c     11 1E 06 F1 | 	add	local01, #17
26960     0F 03 48 FC | 	wrbyte	#1, local01
26964     01 FA 05 F6 | 	mov	result1, #1
26968     48 03 90 FD | 	jmp	#LR__3933
2696c                 | LR__3924
2696c     04 4E 05 F1 | 	add	fp, #4
26970     A7 FA 01 FB | 	rdlong	result1, fp
26974     1C FA 05 F1 | 	add	result1, #28
26978     FD FA 01 FB | 	rdlong	result1, result1
2697c     1C 4E 05 F1 | 	add	fp, #28
26980     A7 20 02 FB | 	rdlong	local02, fp
26984     10 FB 81 F1 | 	sub	result1, local02
26988     08 4E 05 F1 | 	add	fp, #8
2698c     A7 18 02 FB | 	rdlong	arg04, fp
26990     28 4E 85 F1 | 	sub	fp, #40
26994     0C FB 11 F2 | 	cmp	result1, arg04 wc
26998     68 00 90 3D |  if_ae	jmp	#LR__3925
2699c     04 4E 05 F1 | 	add	fp, #4
269a0     A7 12 02 FB | 	rdlong	arg01, fp
269a4     28 12 06 F1 | 	add	arg01, #40
269a8     2C 4E 05 F1 | 	add	fp, #44
269ac     A7 14 02 FB | 	rdlong	arg02, fp
269b0     2C 4E 85 F1 | 	sub	fp, #44
269b4     A7 FA 01 FB | 	rdlong	result1, fp
269b8     1C FA 05 F1 | 	add	result1, #28
269bc     FD 22 02 FB | 	rdlong	local03, result1
269c0     1C 4E 05 F1 | 	add	fp, #28
269c4     A7 18 02 FB | 	rdlong	arg04, fp
269c8     20 4E 85 F1 | 	sub	fp, #32
269cc     0C 23 82 F1 | 	sub	local03, arg04
269d0     09 22 66 F0 | 	shl	local03, #9
269d4     11 15 02 F1 | 	add	arg02, local03
269d8     09 16 C6 F9 | 	decod	arg03, #9
269dc     A8 41 BF FD | 	call	#__system____builtin_memmove
269e0     04 4E 05 F1 | 	add	fp, #4
269e4     A7 18 02 FB | 	rdlong	arg04, fp
269e8     0C FB 01 F6 | 	mov	result1, arg04
269ec     04 4E 85 F1 | 	sub	fp, #4
269f0     10 18 06 F1 | 	add	arg04, #16
269f4     0C 19 C2 FA | 	rdbyte	arg04, arg04
269f8     7F 18 06 F5 | 	and	arg04, #127
269fc     10 FA 05 F1 | 	add	result1, #16
26a00     FD 18 42 FC | 	wrbyte	arg04, result1
26a04                 | LR__3925
26a04     28 4E 05 F1 | 	add	fp, #40
26a08     A7 FA 01 FB | 	rdlong	result1, fp
26a0c     09 FA 65 F0 | 	shl	result1, #9
26a10     04 4E 85 F1 | 	sub	fp, #4
26a14     A7 FA 61 FC | 	wrlong	result1, fp
26a18     24 4E 85 F1 | 	sub	fp, #36
26a1c                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
26a1c                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
26a1c                 | ' 				}
26a1c                 | ' 
26a1c                 | ' 
26a1c                 | ' 				wcnt =  ((UINT) 512 )  * cc;
26a1c                 | ' 				continue;
26a1c     74 01 90 FD | 	jmp	#LR__3929
26a20                 | LR__3926
26a20     04 4E 05 F1 | 	add	fp, #4
26a24     A7 20 02 FB | 	rdlong	local02, fp
26a28     1C 20 06 F1 | 	add	local02, #28
26a2c     10 FB 01 FB | 	rdlong	result1, local02
26a30     1C 4E 05 F1 | 	add	fp, #28
26a34     A7 20 02 FB | 	rdlong	local02, fp
26a38     20 4E 85 F1 | 	sub	fp, #32
26a3c     10 FB 09 F2 | 	cmp	result1, local02 wz
26a40     90 00 90 AD |  if_e	jmp	#LR__3927
26a44     04 4E 05 F1 | 	add	fp, #4
26a48     A7 FA 01 FB | 	rdlong	result1, fp
26a4c     FD 22 02 F6 | 	mov	local03, result1
26a50     04 4E 85 F1 | 	sub	fp, #4
26a54     14 22 06 F1 | 	add	local03, #20
26a58     11 23 02 FB | 	rdlong	local03, local03
26a5c     0C FA 05 F1 | 	add	result1, #12
26a60     FD 24 02 FB | 	rdlong	local04, result1
26a64     12 27 02 F6 | 	mov	local05, local04
26a68     13 23 12 F2 | 	cmp	local03, local05 wc
26a6c     64 00 90 3D |  if_ae	jmp	#LR__3927
26a70     18 4E 05 F1 | 	add	fp, #24
26a74     A7 18 02 FB | 	rdlong	arg04, fp
26a78     01 18 06 F1 | 	add	arg04, #1
26a7c     0C 13 C2 FA | 	rdbyte	arg01, arg04
26a80     14 4E 85 F1 | 	sub	fp, #20
26a84     A7 28 02 FB | 	rdlong	local06, fp
26a88     28 28 06 F1 | 	add	local06, #40
26a8c     14 2B 02 F6 | 	mov	local07, local06
26a90     1C 4E 05 F1 | 	add	fp, #28
26a94     A7 2C 02 FB | 	rdlong	local08, fp
26a98     20 4E 85 F1 | 	sub	fp, #32
26a9c     01 2E 06 F6 | 	mov	local09, #1
26aa0     15 15 02 F6 | 	mov	arg02, local07
26aa4     16 17 02 F6 | 	mov	arg03, local08
26aa8     01 18 06 F6 | 	mov	arg04, #1
26aac     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
26ab0     FD 30 0A F6 | 	mov	local10, result1 wz
26ab4     1C 00 90 AD |  if_e	jmp	#LR__3927
26ab8     04 4E 05 F1 | 	add	fp, #4
26abc     A7 30 02 FB | 	rdlong	local10, fp
26ac0     04 4E 85 F1 | 	sub	fp, #4
26ac4     11 30 06 F1 | 	add	local10, #17
26ac8     18 03 48 FC | 	wrbyte	#1, local10
26acc                 | ' 				fp->fptr < fp->obj.objsize &&
26acc                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
26acc                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
26acc     01 FA 05 F6 | 	mov	result1, #1
26ad0     E0 01 90 FD | 	jmp	#LR__3933
26ad4                 | LR__3927
26ad4     04 4E 05 F1 | 	add	fp, #4
26ad8     A7 18 02 FB | 	rdlong	arg04, fp
26adc     1C 4E 05 F1 | 	add	fp, #28
26ae0     A7 FA 01 FB | 	rdlong	result1, fp
26ae4     20 4E 85 F1 | 	sub	fp, #32
26ae8     1C 18 06 F1 | 	add	arg04, #28
26aec     0C FB 61 FC | 	wrlong	result1, arg04
26af0                 | LR__3928
26af0     04 4E 05 F1 | 	add	fp, #4
26af4     A7 FA 01 FB | 	rdlong	result1, fp
26af8     14 FA 05 F1 | 	add	result1, #20
26afc     FD FA 01 FB | 	rdlong	result1, result1
26b00     FF FB 05 F5 | 	and	result1, #511
26b04     09 32 C6 F9 | 	decod	local11, #9
26b08     FD 32 82 F1 | 	sub	local11, result1
26b0c     20 4E 05 F1 | 	add	fp, #32
26b10     A7 32 62 FC | 	wrlong	local11, fp
26b14     18 4E 85 F1 | 	sub	fp, #24
26b18     A7 FA 01 FB | 	rdlong	result1, fp
26b1c     0C 4E 85 F1 | 	sub	fp, #12
26b20     FD 32 1A F2 | 	cmp	local11, result1 wcz
26b24     0C 4E 05 11 |  if_a	add	fp, #12
26b28     A7 32 02 1B |  if_a	rdlong	local11, fp
26b2c     18 4E 05 11 |  if_a	add	fp, #24
26b30     A7 32 62 1C |  if_a	wrlong	local11, fp
26b34     24 4E 85 11 |  if_a	sub	fp, #36
26b38     04 4E 05 F1 | 	add	fp, #4
26b3c     A7 32 02 FB | 	rdlong	local11, fp
26b40     19 13 02 F6 | 	mov	arg01, local11
26b44     28 12 06 F1 | 	add	arg01, #40
26b48     14 32 06 F1 | 	add	local11, #20
26b4c     19 33 02 FB | 	rdlong	local11, local11
26b50     FF 33 06 F5 | 	and	local11, #511
26b54     19 13 02 F1 | 	add	arg01, local11
26b58     2C 4E 05 F1 | 	add	fp, #44
26b5c     A7 14 02 FB | 	rdlong	arg02, fp
26b60     0C 4E 85 F1 | 	sub	fp, #12
26b64     A7 16 02 FB | 	rdlong	arg03, fp
26b68     24 4E 85 F1 | 	sub	fp, #36
26b6c     18 40 BF FD | 	call	#__system____builtin_memmove
26b70     04 4E 05 F1 | 	add	fp, #4
26b74     A7 FA 01 FB | 	rdlong	result1, fp
26b78     FD 32 02 F6 | 	mov	local11, result1
26b7c     04 4E 85 F1 | 	sub	fp, #4
26b80     10 FA 05 F1 | 	add	result1, #16
26b84     FD FA C1 FA | 	rdbyte	result1, result1
26b88     80 FA 45 F5 | 	or	result1, #128
26b8c     10 32 06 F1 | 	add	local11, #16
26b90     19 FB 41 FC | 	wrbyte	result1, local11
26b94                 | LR__3929
26b94     0C 4E 05 F1 | 	add	fp, #12
26b98     A7 32 02 FB | 	rdlong	local11, fp
26b9c     18 4E 05 F1 | 	add	fp, #24
26ba0     A7 FA 01 FB | 	rdlong	result1, fp
26ba4     FD 32 82 F1 | 	sub	local11, result1
26ba8     18 4E 85 F1 | 	sub	fp, #24
26bac     A7 32 62 FC | 	wrlong	local11, fp
26bb0     04 4E 05 F1 | 	add	fp, #4
26bb4     A7 34 02 FB | 	rdlong	local12, fp
26bb8     1A 33 02 FB | 	rdlong	local11, local12
26bbc     14 4E 05 F1 | 	add	fp, #20
26bc0     A7 36 02 FB | 	rdlong	local13, fp
26bc4     1B 33 02 F1 | 	add	local11, local13
26bc8     1A 33 62 FC | 	wrlong	local11, local12
26bcc     0C 4E 05 F1 | 	add	fp, #12
26bd0     A7 32 02 FB | 	rdlong	local11, fp
26bd4     0C 4E 85 F1 | 	sub	fp, #12
26bd8     A7 38 02 FB | 	rdlong	local14, fp
26bdc     1C 33 02 F1 | 	add	local11, local14
26be0     0C 4E 05 F1 | 	add	fp, #12
26be4     A7 32 62 FC | 	wrlong	local11, fp
26be8     2C 4E 85 F1 | 	sub	fp, #44
26bec     A7 3A 02 FB | 	rdlong	local15, fp
26bf0     1D 33 02 F6 | 	mov	local11, local15
26bf4     14 3A 06 F1 | 	add	local15, #20
26bf8     1D 3B 02 FB | 	rdlong	local15, local15
26bfc     20 4E 05 F1 | 	add	fp, #32
26c00     A7 3C 02 FB | 	rdlong	local16, fp
26c04     1E 3B 02 F1 | 	add	local15, local16
26c08     14 32 06 F1 | 	add	local11, #20
26c0c     19 3B 62 FC | 	wrlong	local15, local11
26c10     20 4E 85 F1 | 	sub	fp, #32
26c14     A7 3E 02 FB | 	rdlong	local17, fp
26c18     1F 33 02 F6 | 	mov	local11, local17
26c1c     1F 41 02 F6 | 	mov	local18, local17
26c20     04 4E 85 F1 | 	sub	fp, #4
26c24     14 3E 06 F1 | 	add	local17, #20
26c28     1F 43 02 FB | 	rdlong	local19, local17
26c2c     0C 40 06 F1 | 	add	local18, #12
26c30     20 45 02 FB | 	rdlong	local20, local18
26c34     22 43 1A F2 | 	cmp	local19, local20 wcz
26c38     24 00 90 ED |  if_be	jmp	#LR__3930
26c3c     04 4E 05 F1 | 	add	fp, #4
26c40     A7 26 02 FB | 	rdlong	local05, fp
26c44     04 4E 85 F1 | 	sub	fp, #4
26c48     13 23 02 F6 | 	mov	local03, local05
26c4c     14 22 06 F1 | 	add	local03, #20
26c50     11 25 02 FB | 	rdlong	local04, local03
26c54     14 22 86 F1 | 	sub	local03, #20
26c58     12 47 02 F6 | 	mov	local21, local04
26c5c     20 00 90 FD | 	jmp	#LR__3931
26c60                 | LR__3930
26c60     04 4E 05 F1 | 	add	fp, #4
26c64     A7 2A 02 FB | 	rdlong	local07, fp
26c68     04 4E 85 F1 | 	sub	fp, #4
26c6c     15 31 02 F6 | 	mov	local10, local07
26c70     0C 30 06 F1 | 	add	local10, #12
26c74     18 2D 02 FB | 	rdlong	local08, local10
26c78     0C 30 86 F1 | 	sub	local10, #12
26c7c     16 47 02 F6 | 	mov	local21, local08
26c80                 | LR__3931
26c80     0C 32 06 F1 | 	add	local11, #12
26c84     19 47 62 FC | 	wrlong	local21, local11
26c88     5C F9 9F FD | 	jmp	#LR__3913
26c8c                 | LR__3932
26c8c     04 4E 05 F1 | 	add	fp, #4
26c90     A7 34 02 FB | 	rdlong	local12, fp
26c94     1A 1F 02 F6 | 	mov	local01, local12
26c98     04 4E 85 F1 | 	sub	fp, #4
26c9c     10 34 06 F1 | 	add	local12, #16
26ca0     1A 33 C2 FA | 	rdbyte	local11, local12
26ca4     40 32 46 F5 | 	or	local11, #64
26ca8     10 1E 06 F1 | 	add	local01, #16
26cac     0F 33 42 FC | 	wrbyte	local11, local01
26cb0                 | ' 
26cb0                 | ' 
26cb0                 | ' 
26cb0                 | ' 
26cb0                 | ' 
26cb0                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
26cb0                 | ' 		fp->flag |=  0x80 ;
26cb0                 | ' 
26cb0                 | ' 	}
26cb0                 | ' 
26cb0                 | ' 	fp->flag |=  0x40 ;
26cb0                 | ' 
26cb0                 | ' 	return FR_OK ;
26cb0     00 FA 05 F6 | 	mov	result1, #0
26cb4                 | LR__3933
26cb4     A7 F0 03 F6 | 	mov	ptra, fp
26cb8     B2 00 A0 FD | 	call	#popregs_
26cbc                 | _fatfs_cc_f_write_ret
26cbc     2D 00 64 FD | 	ret
26cc0                 | 
26cc0                 | _fatfs_cc_f_sync
26cc0     00 4A 05 F6 | 	mov	COUNT_, #0
26cc4     A8 00 A0 FD | 	call	#pushregs_
26cc8     18 F0 07 F1 | 	add	ptra, #24
26ccc     04 4E 05 F1 | 	add	fp, #4
26cd0     A7 12 62 FC | 	wrlong	arg01, fp
26cd4     08 4E 05 F1 | 	add	fp, #8
26cd8     A7 14 02 F6 | 	mov	arg02, fp
26cdc     0C 4E 85 F1 | 	sub	fp, #12
26ce0     D0 E8 BF FD | 	call	#_fatfs_cc_validate
26ce4     08 4E 05 F1 | 	add	fp, #8
26ce8     A7 FA 61 FC | 	wrlong	result1, fp
26cec     08 4E 85 F1 | 	sub	fp, #8
26cf0     00 FA 0D F2 | 	cmp	result1, #0 wz
26cf4     C0 01 90 5D |  if_ne	jmp	#LR__3943
26cf8     04 4E 05 F1 | 	add	fp, #4
26cfc     A7 18 02 FB | 	rdlong	arg04, fp
26d00     04 4E 85 F1 | 	sub	fp, #4
26d04     10 18 06 F1 | 	add	arg04, #16
26d08     0C 19 C2 FA | 	rdbyte	arg04, arg04
26d0c     40 18 CE F7 | 	test	arg04, #64 wz
26d10     A4 01 90 AD |  if_e	jmp	#LR__3942
26d14     04 4E 05 F1 | 	add	fp, #4
26d18     A7 18 02 FB | 	rdlong	arg04, fp
26d1c     04 4E 85 F1 | 	sub	fp, #4
26d20     10 18 06 F1 | 	add	arg04, #16
26d24     0C 19 C2 FA | 	rdbyte	arg04, arg04
26d28     80 18 CE F7 | 	test	arg04, #128 wz
26d2c     64 00 90 AD |  if_e	jmp	#LR__3940
26d30     0C 4E 05 F1 | 	add	fp, #12
26d34     A7 18 02 FB | 	rdlong	arg04, fp
26d38     01 18 06 F1 | 	add	arg04, #1
26d3c     0C 13 C2 FA | 	rdbyte	arg01, arg04
26d40     08 4E 85 F1 | 	sub	fp, #8
26d44     A7 18 02 FB | 	rdlong	arg04, fp
26d48     0C 15 02 F6 | 	mov	arg02, arg04
26d4c     28 14 06 F1 | 	add	arg02, #40
26d50     04 4E 85 F1 | 	sub	fp, #4
26d54     1C 18 06 F1 | 	add	arg04, #28
26d58     0C 17 02 FB | 	rdlong	arg03, arg04
26d5c     01 18 06 F6 | 	mov	arg04, #1
26d60     0C AE BF FD | 	call	#_fatfs_cc_disk_write
26d64     00 FA 0D F2 | 	cmp	result1, #0 wz
26d68     01 FA 05 56 |  if_ne	mov	result1, #1
26d6c     54 01 90 5D |  if_ne	jmp	#LR__3944
26d70     04 4E 05 F1 | 	add	fp, #4
26d74     A7 18 02 FB | 	rdlong	arg04, fp
26d78     0C 17 02 F6 | 	mov	arg03, arg04
26d7c     04 4E 85 F1 | 	sub	fp, #4
26d80     10 18 06 F1 | 	add	arg04, #16
26d84     0C 19 C2 FA | 	rdbyte	arg04, arg04
26d88     7F 18 06 F5 | 	and	arg04, #127
26d8c     10 16 06 F1 | 	add	arg03, #16
26d90     0B 19 42 FC | 	wrbyte	arg04, arg03
26d94                 | LR__3940
26d94     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
26d98     10 4E 05 F1 | 	add	fp, #16
26d9c     A7 FA 61 FC | 	wrlong	result1, fp
26da0     04 4E 85 F1 | 	sub	fp, #4
26da4     A7 12 02 FB | 	rdlong	arg01, fp
26da8     08 4E 85 F1 | 	sub	fp, #8
26dac     A7 18 02 FB | 	rdlong	arg04, fp
26db0     04 4E 85 F1 | 	sub	fp, #4
26db4     20 18 06 F1 | 	add	arg04, #32
26db8     0C 15 02 FB | 	rdlong	arg02, arg04
26dbc     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
26dc0     08 4E 05 F1 | 	add	fp, #8
26dc4     A7 FA 61 FC | 	wrlong	result1, fp
26dc8     08 4E 85 F1 | 	sub	fp, #8
26dcc     00 FA 0D F2 | 	cmp	result1, #0 wz
26dd0     E4 00 90 5D |  if_ne	jmp	#LR__3941
26dd4     04 4E 05 F1 | 	add	fp, #4
26dd8     A7 18 02 FB | 	rdlong	arg04, fp
26ddc     24 18 06 F1 | 	add	arg04, #36
26de0     0C 19 02 FB | 	rdlong	arg04, arg04
26de4     10 4E 05 F1 | 	add	fp, #16
26de8     A7 18 62 FC | 	wrlong	arg04, fp
26dec     0C 17 02 F6 | 	mov	arg03, arg04
26df0     0B 16 06 F1 | 	add	arg03, #11
26df4     0B 17 C2 FA | 	rdbyte	arg03, arg03
26df8     20 16 46 F5 | 	or	arg03, #32
26dfc     0B 18 06 F1 | 	add	arg04, #11
26e00     0C 17 42 FC | 	wrbyte	arg03, arg04
26e04     10 4E 85 F1 | 	sub	fp, #16
26e08     A7 18 02 FB | 	rdlong	arg04, fp
26e0c     0C 13 02 FB | 	rdlong	arg01, arg04
26e10     10 4E 05 F1 | 	add	fp, #16
26e14     A7 14 02 FB | 	rdlong	arg02, fp
26e18     14 4E 85 F1 | 	sub	fp, #20
26e1c     08 18 06 F1 | 	add	arg04, #8
26e20     0C 17 02 FB | 	rdlong	arg03, arg04
26e24     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
26e28     14 4E 05 F1 | 	add	fp, #20
26e2c     A7 12 02 FB | 	rdlong	arg01, fp
26e30     1C 12 06 F1 | 	add	arg01, #28
26e34     10 4E 85 F1 | 	sub	fp, #16
26e38     A7 18 02 FB | 	rdlong	arg04, fp
26e3c     0C 18 06 F1 | 	add	arg04, #12
26e40     0C 15 02 FB | 	rdlong	arg02, arg04
26e44     09 15 62 FC | 	wrlong	arg02, arg01
26e48     10 4E 05 F1 | 	add	fp, #16
26e4c     A7 12 02 FB | 	rdlong	arg01, fp
26e50     16 12 06 F1 | 	add	arg01, #22
26e54     04 4E 85 F1 | 	sub	fp, #4
26e58     A7 14 02 FB | 	rdlong	arg02, fp
26e5c     09 15 62 FC | 	wrlong	arg02, arg01
26e60     04 4E 05 F1 | 	add	fp, #4
26e64     A7 12 02 FB | 	rdlong	arg01, fp
26e68     12 12 06 F1 | 	add	arg01, #18
26e6c     09 01 58 FC | 	wrword	#0, arg01
26e70     08 4E 85 F1 | 	sub	fp, #8
26e74     A7 18 02 FB | 	rdlong	arg04, fp
26e78     03 18 06 F1 | 	add	arg04, #3
26e7c     0C 03 48 FC | 	wrbyte	#1, arg04
26e80     A7 12 02 FB | 	rdlong	arg01, fp
26e84     0C 4E 85 F1 | 	sub	fp, #12
26e88     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
26e8c     08 4E 05 F1 | 	add	fp, #8
26e90     A7 FA 61 FC | 	wrlong	result1, fp
26e94     04 4E 85 F1 | 	sub	fp, #4
26e98     A7 18 02 FB | 	rdlong	arg04, fp
26e9c     0C 17 02 F6 | 	mov	arg03, arg04
26ea0     04 4E 85 F1 | 	sub	fp, #4
26ea4     10 18 06 F1 | 	add	arg04, #16
26ea8     0C 19 C2 FA | 	rdbyte	arg04, arg04
26eac     BF 18 06 F5 | 	and	arg04, #191
26eb0     10 16 06 F1 | 	add	arg03, #16
26eb4     0B 19 42 FC | 	wrbyte	arg04, arg03
26eb8                 | LR__3941
26eb8                 | LR__3942
26eb8                 | LR__3943
26eb8                 | ' 					dir = fp->dir_ptr;
26eb8                 | ' 					dir[ 11 ] |=  0x20 ;
26eb8                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
26eb8                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
26eb8                 | ' 					st_dword(dir +  22 , tm);
26eb8                 | ' 					st_word(dir +  18 , 0);
26eb8                 | ' 					fs->wflag = 1;
26eb8                 | ' 					res = sync_fs(fs);
26eb8                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
26eb8                 | ' 				}
26eb8                 | ' 			}
26eb8                 | ' 		}
26eb8                 | ' 	}
26eb8                 | ' 
26eb8                 | ' 	return res ;
26eb8     08 4E 05 F1 | 	add	fp, #8
26ebc     A7 FA 01 FB | 	rdlong	result1, fp
26ec0     08 4E 85 F1 | 	sub	fp, #8
26ec4                 | LR__3944
26ec4     A7 F0 03 F6 | 	mov	ptra, fp
26ec8     B2 00 A0 FD | 	call	#popregs_
26ecc                 | _fatfs_cc_f_sync_ret
26ecc     2D 00 64 FD | 	ret
26ed0                 | 
26ed0                 | _fatfs_cc_f_close
26ed0     01 4A 05 F6 | 	mov	COUNT_, #1
26ed4     A8 00 A0 FD | 	call	#pushregs_
26ed8     10 F0 07 F1 | 	add	ptra, #16
26edc     04 4E 05 F1 | 	add	fp, #4
26ee0     A7 12 62 FC | 	wrlong	arg01, fp
26ee4     04 4E 85 F1 | 	sub	fp, #4
26ee8     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
26eec     08 4E 05 F1 | 	add	fp, #8
26ef0     A7 FA 61 FC | 	wrlong	result1, fp
26ef4     08 4E 85 F1 | 	sub	fp, #8
26ef8     00 FA 0D F2 | 	cmp	result1, #0 wz
26efc     38 00 90 5D |  if_ne	jmp	#LR__3950
26f00     04 4E 05 F1 | 	add	fp, #4
26f04     A7 12 02 FB | 	rdlong	arg01, fp
26f08     08 4E 05 F1 | 	add	fp, #8
26f0c     A7 14 02 F6 | 	mov	arg02, fp
26f10     0C 4E 85 F1 | 	sub	fp, #12
26f14     9C E6 BF FD | 	call	#_fatfs_cc_validate
26f18     08 4E 05 F1 | 	add	fp, #8
26f1c     A7 FA 61 FC | 	wrlong	result1, fp
26f20     08 4E 85 F1 | 	sub	fp, #8
26f24     00 FA 0D F2 | 	cmp	result1, #0 wz
26f28     04 4E 05 A1 |  if_e	add	fp, #4
26f2c     A7 1E 02 AB |  if_e	rdlong	local01, fp
26f30     04 4E 85 A1 |  if_e	sub	fp, #4
26f34     0F 01 68 AC |  if_e	wrlong	#0, local01
26f38                 | LR__3950
26f38                 | ' 
26f38                 | ' 
26f38                 | ' 
26f38                 | ' 
26f38                 | ' 			fp->obj.fs = 0;
26f38                 | ' #line 4192 "ff.c"
26f38                 | ' 		}
26f38                 | ' 	}
26f38                 | ' 	return res;
26f38     08 4E 05 F1 | 	add	fp, #8
26f3c     A7 FA 01 FB | 	rdlong	result1, fp
26f40     08 4E 85 F1 | 	sub	fp, #8
26f44     A7 F0 03 F6 | 	mov	ptra, fp
26f48     B2 00 A0 FD | 	call	#popregs_
26f4c                 | _fatfs_cc_f_close_ret
26f4c     2D 00 64 FD | 	ret
26f50                 | 
26f50                 | _fatfs_cc_f_lseek
26f50     00 4A 05 F6 | 	mov	COUNT_, #0
26f54     A8 00 A0 FD | 	call	#pushregs_
26f58     24 F0 07 F1 | 	add	ptra, #36
26f5c     04 4E 05 F1 | 	add	fp, #4
26f60     A7 12 62 FC | 	wrlong	arg01, fp
26f64     04 4E 05 F1 | 	add	fp, #4
26f68     A7 14 62 FC | 	wrlong	arg02, fp
26f6c     04 4E 85 F1 | 	sub	fp, #4
26f70     A7 12 02 FB | 	rdlong	arg01, fp
26f74     0C 4E 05 F1 | 	add	fp, #12
26f78     A7 14 02 F6 | 	mov	arg02, fp
26f7c     10 4E 85 F1 | 	sub	fp, #16
26f80     30 E6 BF FD | 	call	#_fatfs_cc_validate
26f84     0C 4E 05 F1 | 	add	fp, #12
26f88     A7 FA 61 FC | 	wrlong	result1, fp
26f8c     0C 4E 85 F1 | 	sub	fp, #12
26f90     00 FA 0D F2 | 	cmp	result1, #0 wz
26f94     1C 00 90 5D |  if_ne	jmp	#LR__3960
26f98     04 4E 05 F1 | 	add	fp, #4
26f9c     A7 18 02 FB | 	rdlong	arg04, fp
26fa0     11 18 06 F1 | 	add	arg04, #17
26fa4     0C 19 C2 FA | 	rdbyte	arg04, arg04
26fa8     08 4E 05 F1 | 	add	fp, #8
26fac     A7 18 62 FC | 	wrlong	arg04, fp
26fb0     0C 4E 85 F1 | 	sub	fp, #12
26fb4                 | LR__3960
26fb4     0C 4E 05 F1 | 	add	fp, #12
26fb8     A7 18 0A FB | 	rdlong	arg04, fp wz
26fbc     0C 4E 85 F1 | 	sub	fp, #12
26fc0     0C 4E 05 51 |  if_ne	add	fp, #12
26fc4     A7 FA 01 5B |  if_ne	rdlong	result1, fp
26fc8     0C 4E 85 51 |  if_ne	sub	fp, #12
26fcc     40 06 90 5D |  if_ne	jmp	#LR__3983
26fd0     04 4E 05 F1 | 	add	fp, #4
26fd4     A7 18 02 FB | 	rdlong	arg04, fp
26fd8     04 4E 05 F1 | 	add	fp, #4
26fdc     A7 16 02 FB | 	rdlong	arg03, fp
26fe0     08 4E 85 F1 | 	sub	fp, #8
26fe4     0C 18 06 F1 | 	add	arg04, #12
26fe8     0C 19 02 FB | 	rdlong	arg04, arg04
26fec     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
26ff0     3C 00 90 ED |  if_be	jmp	#LR__3961
26ff4     04 4E 05 F1 | 	add	fp, #4
26ff8     A7 16 02 FB | 	rdlong	arg03, fp
26ffc     04 4E 85 F1 | 	sub	fp, #4
27000     10 16 06 F1 | 	add	arg03, #16
27004     0B 17 C2 FA | 	rdbyte	arg03, arg03
27008     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
2700c     02 16 CE F7 | 	test	arg03, #2 wz
27010     1C 00 90 5D |  if_ne	jmp	#LR__3961
27014     04 4E 05 F1 | 	add	fp, #4
27018     A7 16 02 FB | 	rdlong	arg03, fp
2701c     0C 16 06 F1 | 	add	arg03, #12
27020     0B 17 02 FB | 	rdlong	arg03, arg03
27024     04 4E 05 F1 | 	add	fp, #4
27028     A7 16 62 FC | 	wrlong	arg03, fp
2702c     08 4E 85 F1 | 	sub	fp, #8
27030                 | LR__3961
27030     04 4E 05 F1 | 	add	fp, #4
27034     A7 16 02 FB | 	rdlong	arg03, fp
27038     14 16 06 F1 | 	add	arg03, #20
2703c     0B 17 02 FB | 	rdlong	arg03, arg03
27040     1C 4E 05 F1 | 	add	fp, #28
27044     A7 16 62 FC | 	wrlong	arg03, fp
27048     1C 4E 85 F1 | 	sub	fp, #28
2704c     A7 16 02 FB | 	rdlong	arg03, fp
27050     18 4E 05 F1 | 	add	fp, #24
27054     A7 00 68 FC | 	wrlong	#0, fp
27058     14 16 06 F1 | 	add	arg03, #20
2705c     0B 01 68 FC | 	wrlong	#0, arg03
27060     14 4E 85 F1 | 	sub	fp, #20
27064     A7 16 02 FB | 	rdlong	arg03, fp
27068     08 4E 85 F1 | 	sub	fp, #8
2706c     01 16 16 F2 | 	cmp	arg03, #1 wc
27070     E4 03 90 CD |  if_b	jmp	#LR__3977
27074     10 4E 05 F1 | 	add	fp, #16
27078     A7 16 02 FB | 	rdlong	arg03, fp
2707c     0A 16 06 F1 | 	add	arg03, #10
27080     0B 19 E2 FA | 	rdword	arg04, arg03
27084     09 18 66 F0 | 	shl	arg04, #9
27088     08 4E 05 F1 | 	add	fp, #8
2708c     A7 18 62 FC | 	wrlong	arg04, fp
27090     08 4E 05 F1 | 	add	fp, #8
27094     A7 18 02 FB | 	rdlong	arg04, fp
27098     20 4E 85 F1 | 	sub	fp, #32
2709c     01 18 16 F2 | 	cmp	arg04, #1 wc
270a0     AC 00 90 CD |  if_b	jmp	#LR__3962
270a4     08 4E 05 F1 | 	add	fp, #8
270a8     A7 18 02 FB | 	rdlong	arg04, fp
270ac     01 18 86 F1 | 	sub	arg04, #1
270b0     10 4E 05 F1 | 	add	fp, #16
270b4     A7 16 02 FB | 	rdlong	arg03, fp
270b8     0B 19 12 FD | 	qdiv	arg04, arg03
270bc     08 4E 05 F1 | 	add	fp, #8
270c0     A7 FA 01 FB | 	rdlong	result1, fp
270c4     01 FA 85 F1 | 	sub	result1, #1
270c8     18 18 62 FD | 	getqx	arg04
270cc     0B FB 11 FD | 	qdiv	result1, arg03
270d0     20 4E 85 F1 | 	sub	fp, #32
270d4     18 16 62 FD | 	getqx	arg03
270d8     0B 19 12 F2 | 	cmp	arg04, arg03 wc
270dc     70 00 90 CD |  if_b	jmp	#LR__3962
270e0     04 4E 05 F1 | 	add	fp, #4
270e4     A7 16 02 FB | 	rdlong	arg03, fp
270e8     1C 4E 05 F1 | 	add	fp, #28
270ec     A7 FA 01 FB | 	rdlong	result1, fp
270f0     01 FA 85 F1 | 	sub	result1, #1
270f4     08 4E 85 F1 | 	sub	fp, #8
270f8     A7 18 02 FB | 	rdlong	arg04, fp
270fc     01 18 86 F1 | 	sub	arg04, #1
27100     0C FB 21 F5 | 	andn	result1, arg04
27104     14 16 06 F1 | 	add	arg03, #20
27108     0B FB 61 FC | 	wrlong	result1, arg03
2710c     10 4E 85 F1 | 	sub	fp, #16
27110     A7 16 02 FB | 	rdlong	arg03, fp
27114     04 4E 85 F1 | 	sub	fp, #4
27118     A7 18 02 FB | 	rdlong	arg04, fp
2711c     14 18 06 F1 | 	add	arg04, #20
27120     0C 19 02 FB | 	rdlong	arg04, arg04
27124     0C 17 82 F1 | 	sub	arg03, arg04
27128     04 4E 05 F1 | 	add	fp, #4
2712c     A7 16 62 FC | 	wrlong	arg03, fp
27130     04 4E 85 F1 | 	sub	fp, #4
27134     A7 16 02 FB | 	rdlong	arg03, fp
27138     18 16 06 F1 | 	add	arg03, #24
2713c     0B 17 02 FB | 	rdlong	arg03, arg03
27140     10 4E 05 F1 | 	add	fp, #16
27144     A7 16 62 FC | 	wrlong	arg03, fp
27148     14 4E 85 F1 | 	sub	fp, #20
2714c     D0 00 90 FD | 	jmp	#LR__3966
27150                 | LR__3962
27150     04 4E 05 F1 | 	add	fp, #4
27154     A7 16 02 FB | 	rdlong	arg03, fp
27158     08 16 06 F1 | 	add	arg03, #8
2715c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
27160     10 4E 05 F1 | 	add	fp, #16
27164     A7 16 62 FC | 	wrlong	arg03, fp
27168     14 4E 85 F1 | 	sub	fp, #20
2716c     94 00 90 5D |  if_ne	jmp	#LR__3965
27170     04 4E 05 F1 | 	add	fp, #4
27174     A7 12 02 FB | 	rdlong	arg01, fp
27178     04 4E 85 F1 | 	sub	fp, #4
2717c     00 14 06 F6 | 	mov	arg02, #0
27180     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
27184     14 4E 05 F1 | 	add	fp, #20
27188     A7 FA 61 FC | 	wrlong	result1, fp
2718c     14 4E 85 F1 | 	sub	fp, #20
27190     01 FA 0D F2 | 	cmp	result1, #1 wz
27194     1C 00 90 5D |  if_ne	jmp	#LR__3963
27198     04 4E 05 F1 | 	add	fp, #4
2719c     A7 16 02 FB | 	rdlong	arg03, fp
271a0     04 4E 85 F1 | 	sub	fp, #4
271a4     11 16 06 F1 | 	add	arg03, #17
271a8     0B 05 48 FC | 	wrbyte	#2, arg03
271ac     02 FA 05 F6 | 	mov	result1, #2
271b0     5C 04 90 FD | 	jmp	#LR__3983
271b4                 | LR__3963
271b4     14 4E 05 F1 | 	add	fp, #20
271b8     A7 FA 01 FB | 	rdlong	result1, fp
271bc     14 4E 85 F1 | 	sub	fp, #20
271c0     FF FF 7F FF 
271c4     FF FB 0D F2 | 	cmp	result1, ##-1 wz
271c8     1C 00 90 5D |  if_ne	jmp	#LR__3964
271cc     04 4E 05 F1 | 	add	fp, #4
271d0     A7 16 02 FB | 	rdlong	arg03, fp
271d4     04 4E 85 F1 | 	sub	fp, #4
271d8     11 16 06 F1 | 	add	arg03, #17
271dc     0B 03 48 FC | 	wrbyte	#1, arg03
271e0     01 FA 05 F6 | 	mov	result1, #1
271e4     28 04 90 FD | 	jmp	#LR__3983
271e8                 | LR__3964
271e8     04 4E 05 F1 | 	add	fp, #4
271ec     A7 16 02 FB | 	rdlong	arg03, fp
271f0     10 4E 05 F1 | 	add	fp, #16
271f4     A7 18 02 FB | 	rdlong	arg04, fp
271f8     14 4E 85 F1 | 	sub	fp, #20
271fc     08 16 06 F1 | 	add	arg03, #8
27200     0B 19 62 FC | 	wrlong	arg04, arg03
27204                 | LR__3965
27204     04 4E 05 F1 | 	add	fp, #4
27208     A7 16 02 FB | 	rdlong	arg03, fp
2720c     10 4E 05 F1 | 	add	fp, #16
27210     A7 18 02 FB | 	rdlong	arg04, fp
27214     14 4E 85 F1 | 	sub	fp, #20
27218     18 16 06 F1 | 	add	arg03, #24
2721c     0B 19 62 FC | 	wrlong	arg04, arg03
27220                 | LR__3966
27220     14 4E 05 F1 | 	add	fp, #20
27224     A7 16 0A FB | 	rdlong	arg03, fp wz
27228     14 4E 85 F1 | 	sub	fp, #20
2722c     28 02 90 AD |  if_e	jmp	#LR__3976
27230                 | ' 				while (ofs > bcs) {
27230                 | LR__3967
27230     08 4E 05 F1 | 	add	fp, #8
27234     A7 18 02 FB | 	rdlong	arg04, fp
27238     10 4E 05 F1 | 	add	fp, #16
2723c     A7 16 02 FB | 	rdlong	arg03, fp
27240     18 4E 85 F1 | 	sub	fp, #24
27244     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
27248     68 01 90 ED |  if_be	jmp	#LR__3973
2724c     08 4E 05 F1 | 	add	fp, #8
27250     A7 18 02 FB | 	rdlong	arg04, fp
27254     10 4E 05 F1 | 	add	fp, #16
27258     A7 16 02 FB | 	rdlong	arg03, fp
2725c     0B 19 82 F1 | 	sub	arg04, arg03
27260     10 4E 85 F1 | 	sub	fp, #16
27264     A7 18 62 FC | 	wrlong	arg04, fp
27268     04 4E 85 F1 | 	sub	fp, #4
2726c     A7 18 02 FB | 	rdlong	arg04, fp
27270     0C FB 01 F6 | 	mov	result1, arg04
27274     14 18 06 F1 | 	add	arg04, #20
27278     0C 19 02 FB | 	rdlong	arg04, arg04
2727c     14 4E 05 F1 | 	add	fp, #20
27280     A7 16 02 FB | 	rdlong	arg03, fp
27284     0B 19 02 F1 | 	add	arg04, arg03
27288     14 FA 05 F1 | 	add	result1, #20
2728c     FD 18 62 FC | 	wrlong	arg04, result1
27290     14 4E 85 F1 | 	sub	fp, #20
27294     A7 16 02 FB | 	rdlong	arg03, fp
27298     04 4E 85 F1 | 	sub	fp, #4
2729c     10 16 06 F1 | 	add	arg03, #16
272a0     0B 17 C2 FA | 	rdbyte	arg03, arg03
272a4     02 16 CE F7 | 	test	arg03, #2 wz
272a8     3C 00 90 AD |  if_e	jmp	#LR__3968
272ac     04 4E 05 F1 | 	add	fp, #4
272b0     A7 12 02 FB | 	rdlong	arg01, fp
272b4     10 4E 05 F1 | 	add	fp, #16
272b8     A7 14 02 FB | 	rdlong	arg02, fp
272bc     14 4E 85 F1 | 	sub	fp, #20
272c0     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
272c4     14 4E 05 F1 | 	add	fp, #20
272c8     A7 FA 61 FC | 	wrlong	result1, fp
272cc     00 FA 4D F2 | 	cmps	result1, #0 wz
272d0     14 4E 85 F1 | 	sub	fp, #20
272d4     08 4E 05 A1 |  if_e	add	fp, #8
272d8     A7 00 68 AC |  if_e	wrlong	#0, fp
272dc     08 4E 85 A1 |  if_e	sub	fp, #8
272e0                 | ' 							ofs = 0; break;
272e0     D0 00 90 AD |  if_e	jmp	#LR__3973
272e4     24 00 90 FD | 	jmp	#LR__3969
272e8                 | LR__3968
272e8     04 4E 05 F1 | 	add	fp, #4
272ec     A7 12 02 FB | 	rdlong	arg01, fp
272f0     10 4E 05 F1 | 	add	fp, #16
272f4     A7 14 02 FB | 	rdlong	arg02, fp
272f8     14 4E 85 F1 | 	sub	fp, #20
272fc     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
27300     14 4E 05 F1 | 	add	fp, #20
27304     A7 FA 61 FC | 	wrlong	result1, fp
27308     14 4E 85 F1 | 	sub	fp, #20
2730c                 | LR__3969
2730c     14 4E 05 F1 | 	add	fp, #20
27310     A7 16 02 FB | 	rdlong	arg03, fp
27314     14 4E 85 F1 | 	sub	fp, #20
27318     FF FF 7F FF 
2731c     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
27320     1C 00 90 5D |  if_ne	jmp	#LR__3970
27324     04 4E 05 F1 | 	add	fp, #4
27328     A7 16 02 FB | 	rdlong	arg03, fp
2732c     04 4E 85 F1 | 	sub	fp, #4
27330     11 16 06 F1 | 	add	arg03, #17
27334     0B 03 48 FC | 	wrbyte	#1, arg03
27338     01 FA 05 F6 | 	mov	result1, #1
2733c     D0 02 90 FD | 	jmp	#LR__3983
27340                 | LR__3970
27340     14 4E 05 F1 | 	add	fp, #20
27344     A7 16 02 FB | 	rdlong	arg03, fp
27348     14 4E 85 F1 | 	sub	fp, #20
2734c     02 16 16 F2 | 	cmp	arg03, #2 wc
27350     24 00 90 CD |  if_b	jmp	#LR__3971
27354     10 4E 05 F1 | 	add	fp, #16
27358     A7 18 02 FB | 	rdlong	arg04, fp
2735c     04 4E 05 F1 | 	add	fp, #4
27360     A7 16 02 FB | 	rdlong	arg03, fp
27364     14 4E 85 F1 | 	sub	fp, #20
27368     18 18 06 F1 | 	add	arg04, #24
2736c     0C 19 02 FB | 	rdlong	arg04, arg04
27370     0C 17 12 F2 | 	cmp	arg03, arg04 wc
27374     1C 00 90 CD |  if_b	jmp	#LR__3972
27378                 | LR__3971
27378     04 4E 05 F1 | 	add	fp, #4
2737c     A7 16 02 FB | 	rdlong	arg03, fp
27380     04 4E 85 F1 | 	sub	fp, #4
27384     11 16 06 F1 | 	add	arg03, #17
27388     0B 05 48 FC | 	wrbyte	#2, arg03
2738c     02 FA 05 F6 | 	mov	result1, #2
27390     7C 02 90 FD | 	jmp	#LR__3983
27394                 | LR__3972
27394     04 4E 05 F1 | 	add	fp, #4
27398     A7 18 02 FB | 	rdlong	arg04, fp
2739c     10 4E 05 F1 | 	add	fp, #16
273a0     A7 16 02 FB | 	rdlong	arg03, fp
273a4     14 4E 85 F1 | 	sub	fp, #20
273a8     18 18 06 F1 | 	add	arg04, #24
273ac     0C 17 62 FC | 	wrlong	arg03, arg04
273b0     7C FE 9F FD | 	jmp	#LR__3967
273b4                 | LR__3973
273b4     04 4E 05 F1 | 	add	fp, #4
273b8     A7 16 02 FB | 	rdlong	arg03, fp
273bc     0B 13 02 F6 | 	mov	arg01, arg03
273c0     14 16 06 F1 | 	add	arg03, #20
273c4     0B 15 02 FB | 	rdlong	arg02, arg03
273c8     04 4E 05 F1 | 	add	fp, #4
273cc     A7 16 02 FB | 	rdlong	arg03, fp
273d0     0B 15 02 F1 | 	add	arg02, arg03
273d4     14 12 06 F1 | 	add	arg01, #20
273d8     09 15 62 FC | 	wrlong	arg02, arg01
273dc     A7 16 02 FB | 	rdlong	arg03, fp
273e0     08 4E 85 F1 | 	sub	fp, #8
273e4     FF 17 CE F7 | 	test	arg03, #511 wz
273e8     6C 00 90 AD |  if_e	jmp	#LR__3975
273ec     10 4E 05 F1 | 	add	fp, #16
273f0     A7 12 02 FB | 	rdlong	arg01, fp
273f4     04 4E 05 F1 | 	add	fp, #4
273f8     A7 14 02 FB | 	rdlong	arg02, fp
273fc     14 4E 85 F1 | 	sub	fp, #20
27400     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
27404     1C 4E 05 F1 | 	add	fp, #28
27408     A7 FA 61 FC | 	wrlong	result1, fp
2740c     1C 4E 85 F1 | 	sub	fp, #28
27410     00 FA 0D F2 | 	cmp	result1, #0 wz
27414     1C 00 90 5D |  if_ne	jmp	#LR__3974
27418     04 4E 05 F1 | 	add	fp, #4
2741c     A7 16 02 FB | 	rdlong	arg03, fp
27420     04 4E 85 F1 | 	sub	fp, #4
27424     11 16 06 F1 | 	add	arg03, #17
27428     0B 05 48 FC | 	wrbyte	#2, arg03
2742c     02 FA 05 F6 | 	mov	result1, #2
27430     DC 01 90 FD | 	jmp	#LR__3983
27434                 | LR__3974
27434     1C 4E 05 F1 | 	add	fp, #28
27438     A7 18 02 FB | 	rdlong	arg04, fp
2743c     14 4E 85 F1 | 	sub	fp, #20
27440     A7 16 02 FB | 	rdlong	arg03, fp
27444     09 16 46 F0 | 	shr	arg03, #9
27448     0B 19 02 F1 | 	add	arg04, arg03
2744c     14 4E 05 F1 | 	add	fp, #20
27450     A7 18 62 FC | 	wrlong	arg04, fp
27454     1C 4E 85 F1 | 	sub	fp, #28
27458                 | LR__3975
27458                 | LR__3976
27458                 | LR__3977
27458     04 4E 05 F1 | 	add	fp, #4
2745c     A7 18 02 FB | 	rdlong	arg04, fp
27460     0C 17 02 F6 | 	mov	arg03, arg04
27464     04 4E 85 F1 | 	sub	fp, #4
27468     14 16 06 F1 | 	add	arg03, #20
2746c     0B 17 02 FB | 	rdlong	arg03, arg03
27470     0C 18 06 F1 | 	add	arg04, #12
27474     0C 19 02 FB | 	rdlong	arg04, arg04
27478     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2747c     3C 00 90 ED |  if_be	jmp	#LR__3978
27480     04 4E 05 F1 | 	add	fp, #4
27484     A7 18 02 FB | 	rdlong	arg04, fp
27488     0C 17 02 F6 | 	mov	arg03, arg04
2748c     14 18 06 F1 | 	add	arg04, #20
27490     0C 19 02 FB | 	rdlong	arg04, arg04
27494     0C 16 06 F1 | 	add	arg03, #12
27498     0B 19 62 FC | 	wrlong	arg04, arg03
2749c     A7 18 02 FB | 	rdlong	arg04, fp
274a0     0C 17 02 F6 | 	mov	arg03, arg04
274a4     04 4E 85 F1 | 	sub	fp, #4
274a8     10 18 06 F1 | 	add	arg04, #16
274ac     0C 19 C2 FA | 	rdbyte	arg04, arg04
274b0     40 18 46 F5 | 	or	arg04, #64
274b4     10 16 06 F1 | 	add	arg03, #16
274b8     0B 19 42 FC | 	wrbyte	arg04, arg03
274bc                 | LR__3978
274bc     04 4E 05 F1 | 	add	fp, #4
274c0     A7 16 02 FB | 	rdlong	arg03, fp
274c4     04 4E 85 F1 | 	sub	fp, #4
274c8     14 16 06 F1 | 	add	arg03, #20
274cc     0B 17 02 FB | 	rdlong	arg03, arg03
274d0     FF 17 CE F7 | 	test	arg03, #511 wz
274d4     2C 01 90 AD |  if_e	jmp	#LR__3982
274d8     04 4E 05 F1 | 	add	fp, #4
274dc     A7 18 02 FB | 	rdlong	arg04, fp
274e0     18 4E 05 F1 | 	add	fp, #24
274e4     A7 16 02 FB | 	rdlong	arg03, fp
274e8     1C 4E 85 F1 | 	sub	fp, #28
274ec     1C 18 06 F1 | 	add	arg04, #28
274f0     0C 19 02 FB | 	rdlong	arg04, arg04
274f4     0C 17 0A F2 | 	cmp	arg03, arg04 wz
274f8     08 01 90 AD |  if_e	jmp	#LR__3982
274fc     04 4E 05 F1 | 	add	fp, #4
27500     A7 16 02 FB | 	rdlong	arg03, fp
27504     04 4E 85 F1 | 	sub	fp, #4
27508     10 16 06 F1 | 	add	arg03, #16
2750c     0B 17 C2 FA | 	rdbyte	arg03, arg03
27510     80 16 CE F7 | 	test	arg03, #128 wz
27514     7C 00 90 AD |  if_e	jmp	#LR__3980
27518     10 4E 05 F1 | 	add	fp, #16
2751c     A7 16 02 FB | 	rdlong	arg03, fp
27520     01 16 06 F1 | 	add	arg03, #1
27524     0B 13 C2 FA | 	rdbyte	arg01, arg03
27528     0C 4E 85 F1 | 	sub	fp, #12
2752c     A7 16 02 FB | 	rdlong	arg03, fp
27530     0B 15 02 F6 | 	mov	arg02, arg03
27534     28 14 06 F1 | 	add	arg02, #40
27538     04 4E 85 F1 | 	sub	fp, #4
2753c     1C 16 06 F1 | 	add	arg03, #28
27540     0B 17 02 FB | 	rdlong	arg03, arg03
27544     01 18 06 F6 | 	mov	arg04, #1
27548     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
2754c     00 FA 0D F2 | 	cmp	result1, #0 wz
27550     1C 00 90 AD |  if_e	jmp	#LR__3979
27554     04 4E 05 F1 | 	add	fp, #4
27558     A7 16 02 FB | 	rdlong	arg03, fp
2755c     04 4E 85 F1 | 	sub	fp, #4
27560     11 16 06 F1 | 	add	arg03, #17
27564     0B 03 48 FC | 	wrbyte	#1, arg03
27568     01 FA 05 F6 | 	mov	result1, #1
2756c     A0 00 90 FD | 	jmp	#LR__3983
27570                 | LR__3979
27570     04 4E 05 F1 | 	add	fp, #4
27574     A7 18 02 FB | 	rdlong	arg04, fp
27578     0C 17 02 F6 | 	mov	arg03, arg04
2757c     04 4E 85 F1 | 	sub	fp, #4
27580     10 18 06 F1 | 	add	arg04, #16
27584     0C 19 C2 FA | 	rdbyte	arg04, arg04
27588     7F 18 06 F5 | 	and	arg04, #127
2758c     10 16 06 F1 | 	add	arg03, #16
27590     0B 19 42 FC | 	wrbyte	arg04, arg03
27594                 | LR__3980
27594     10 4E 05 F1 | 	add	fp, #16
27598     A7 16 02 FB | 	rdlong	arg03, fp
2759c     01 16 06 F1 | 	add	arg03, #1
275a0     0B 13 C2 FA | 	rdbyte	arg01, arg03
275a4     0C 4E 85 F1 | 	sub	fp, #12
275a8     A7 14 02 FB | 	rdlong	arg02, fp
275ac     28 14 06 F1 | 	add	arg02, #40
275b0     18 4E 05 F1 | 	add	fp, #24
275b4     A7 16 02 FB | 	rdlong	arg03, fp
275b8     1C 4E 85 F1 | 	sub	fp, #28
275bc     01 18 06 F6 | 	mov	arg04, #1
275c0     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
275c4     00 FA 0D F2 | 	cmp	result1, #0 wz
275c8     1C 00 90 AD |  if_e	jmp	#LR__3981
275cc     04 4E 05 F1 | 	add	fp, #4
275d0     A7 16 02 FB | 	rdlong	arg03, fp
275d4     04 4E 85 F1 | 	sub	fp, #4
275d8     11 16 06 F1 | 	add	arg03, #17
275dc     0B 03 48 FC | 	wrbyte	#1, arg03
275e0     01 FA 05 F6 | 	mov	result1, #1
275e4     28 00 90 FD | 	jmp	#LR__3983
275e8                 | LR__3981
275e8     04 4E 05 F1 | 	add	fp, #4
275ec     A7 18 02 FB | 	rdlong	arg04, fp
275f0     18 4E 05 F1 | 	add	fp, #24
275f4     A7 16 02 FB | 	rdlong	arg03, fp
275f8     1C 4E 85 F1 | 	sub	fp, #28
275fc     1C 18 06 F1 | 	add	arg04, #28
27600     0C 17 62 FC | 	wrlong	arg03, arg04
27604                 | LR__3982
27604                 | ' 
27604                 | ' 			fp->sect = nsect;
27604                 | ' 		}
27604                 | ' 	}
27604                 | ' 
27604                 | ' 	return res ;
27604     0C 4E 05 F1 | 	add	fp, #12
27608     A7 FA 01 FB | 	rdlong	result1, fp
2760c     0C 4E 85 F1 | 	sub	fp, #12
27610                 | LR__3983
27610     A7 F0 03 F6 | 	mov	ptra, fp
27614     B2 00 A0 FD | 	call	#popregs_
27618                 | _fatfs_cc_f_lseek_ret
27618     2D 00 64 FD | 	ret
2761c                 | 
2761c                 | _fatfs_cc_f_opendir
2761c     01 4A 05 F6 | 	mov	COUNT_, #1
27620     A8 00 A0 FD | 	call	#pushregs_
27624     14 F0 07 F1 | 	add	ptra, #20
27628     04 4E 05 F1 | 	add	fp, #4
2762c     A7 12 62 FC | 	wrlong	arg01, fp
27630     04 4E 05 F1 | 	add	fp, #4
27634     A7 14 62 FC | 	wrlong	arg02, fp
27638     04 4E 85 F1 | 	sub	fp, #4
2763c     A7 16 0A FB | 	rdlong	arg03, fp wz
27640     04 4E 85 F1 | 	sub	fp, #4
27644     09 FA 05 A6 |  if_e	mov	result1, #9
27648     78 01 90 AD |  if_e	jmp	#LR__3996
2764c     08 4E 05 F1 | 	add	fp, #8
27650     A7 12 02 F6 | 	mov	arg01, fp
27654     08 4E 05 F1 | 	add	fp, #8
27658     A7 14 02 F6 | 	mov	arg02, fp
2765c     10 4E 85 F1 | 	sub	fp, #16
27660     00 16 06 F6 | 	mov	arg03, #0
27664     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
27668     0C 4E 05 F1 | 	add	fp, #12
2766c     A7 FA 61 FC | 	wrlong	result1, fp
27670     0C 4E 85 F1 | 	sub	fp, #12
27674     00 FA 0D F2 | 	cmp	result1, #0 wz
27678     20 01 90 5D |  if_ne	jmp	#LR__3995
2767c     04 4E 05 F1 | 	add	fp, #4
27680     A7 16 02 FB | 	rdlong	arg03, fp
27684     0C 4E 05 F1 | 	add	fp, #12
27688     A7 FA 01 FB | 	rdlong	result1, fp
2768c     0B FB 61 FC | 	wrlong	result1, arg03
27690     0C 4E 85 F1 | 	sub	fp, #12
27694     A7 12 02 FB | 	rdlong	arg01, fp
27698     04 4E 05 F1 | 	add	fp, #4
2769c     A7 14 02 FB | 	rdlong	arg02, fp
276a0     08 4E 85 F1 | 	sub	fp, #8
276a4     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
276a8     0C 4E 05 F1 | 	add	fp, #12
276ac     A7 FA 61 FC | 	wrlong	result1, fp
276b0     0C 4E 85 F1 | 	sub	fp, #12
276b4     00 FA 0D F2 | 	cmp	result1, #0 wz
276b8     C4 00 90 5D |  if_ne	jmp	#LR__3994
276bc     04 4E 05 F1 | 	add	fp, #4
276c0     A7 16 02 FB | 	rdlong	arg03, fp
276c4     04 4E 85 F1 | 	sub	fp, #4
276c8     2B 16 06 F1 | 	add	arg03, #43
276cc     0B 17 C2 FA | 	rdbyte	arg03, arg03
276d0     80 16 CE F7 | 	test	arg03, #128 wz
276d4     58 00 90 5D |  if_ne	jmp	#LR__3992
276d8     04 4E 05 F1 | 	add	fp, #4
276dc     A7 16 02 FB | 	rdlong	arg03, fp
276e0     04 4E 85 F1 | 	sub	fp, #4
276e4     06 16 06 F1 | 	add	arg03, #6
276e8     0B 17 C2 FA | 	rdbyte	arg03, arg03
276ec     10 16 CE F7 | 	test	arg03, #16 wz
276f0     30 00 90 AD |  if_e	jmp	#LR__3990
276f4     04 4E 05 F1 | 	add	fp, #4
276f8     A7 16 02 FB | 	rdlong	arg03, fp
276fc     0B 1F 02 F6 | 	mov	local01, arg03
27700     0C 4E 05 F1 | 	add	fp, #12
27704     A7 12 02 FB | 	rdlong	arg01, fp
27708     10 4E 85 F1 | 	sub	fp, #16
2770c     1C 16 06 F1 | 	add	arg03, #28
27710     0B 15 02 FB | 	rdlong	arg02, arg03
27714     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
27718     08 1E 06 F1 | 	add	local01, #8
2771c     0F FB 61 FC | 	wrlong	result1, local01
27720     0C 00 90 FD | 	jmp	#LR__3991
27724                 | LR__3990
27724     0C 4E 05 F1 | 	add	fp, #12
27728     A7 0A 68 FC | 	wrlong	#5, fp
2772c     0C 4E 85 F1 | 	sub	fp, #12
27730                 | LR__3991
27730                 | LR__3992
27730     0C 4E 05 F1 | 	add	fp, #12
27734     A7 1E 0A FB | 	rdlong	local01, fp wz
27738     0C 4E 85 F1 | 	sub	fp, #12
2773c     40 00 90 5D |  if_ne	jmp	#LR__3993
27740     04 4E 05 F1 | 	add	fp, #4
27744     A7 1E 02 FB | 	rdlong	local01, fp
27748     0C 4E 05 F1 | 	add	fp, #12
2774c     A7 16 02 FB | 	rdlong	arg03, fp
27750     06 16 06 F1 | 	add	arg03, #6
27754     0B 17 E2 FA | 	rdword	arg03, arg03
27758     04 1E 06 F1 | 	add	local01, #4
2775c     0F 17 52 FC | 	wrword	arg03, local01
27760     0C 4E 85 F1 | 	sub	fp, #12
27764     A7 12 02 FB | 	rdlong	arg01, fp
27768     04 4E 85 F1 | 	sub	fp, #4
2776c     00 14 06 F6 | 	mov	arg02, #0
27770     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
27774     0C 4E 05 F1 | 	add	fp, #12
27778     A7 FA 61 FC | 	wrlong	result1, fp
2777c     0C 4E 85 F1 | 	sub	fp, #12
27780                 | LR__3993
27780                 | LR__3994
27780     0C 4E 05 F1 | 	add	fp, #12
27784     A7 1E 02 FB | 	rdlong	local01, fp
27788     0C 4E 85 F1 | 	sub	fp, #12
2778c     04 1E 0E F2 | 	cmp	local01, #4 wz
27790     0C 4E 05 A1 |  if_e	add	fp, #12
27794     A7 0A 68 AC |  if_e	wrlong	#5, fp
27798     0C 4E 85 A1 |  if_e	sub	fp, #12
2779c                 | LR__3995
2779c     0C 4E 05 F1 | 	add	fp, #12
277a0     A7 1E 0A FB | 	rdlong	local01, fp wz
277a4     0C 4E 85 F1 | 	sub	fp, #12
277a8     04 4E 05 51 |  if_ne	add	fp, #4
277ac     A7 1E 02 5B |  if_ne	rdlong	local01, fp
277b0     04 4E 85 51 |  if_ne	sub	fp, #4
277b4     0F 01 68 5C |  if_ne	wrlong	#0, local01
277b8                 | ' 
277b8                 | ' 	return res ;
277b8     0C 4E 05 F1 | 	add	fp, #12
277bc     A7 FA 01 FB | 	rdlong	result1, fp
277c0     0C 4E 85 F1 | 	sub	fp, #12
277c4                 | LR__3996
277c4     A7 F0 03 F6 | 	mov	ptra, fp
277c8     B2 00 A0 FD | 	call	#popregs_
277cc                 | _fatfs_cc_f_opendir_ret
277cc     2D 00 64 FD | 	ret
277d0                 | 
277d0                 | _fatfs_cc_f_closedir
277d0     00 4A 05 F6 | 	mov	COUNT_, #0
277d4     A8 00 A0 FD | 	call	#pushregs_
277d8     10 F0 07 F1 | 	add	ptra, #16
277dc     04 4E 05 F1 | 	add	fp, #4
277e0     A7 12 62 FC | 	wrlong	arg01, fp
277e4     08 4E 05 F1 | 	add	fp, #8
277e8     A7 14 02 F6 | 	mov	arg02, fp
277ec     0C 4E 85 F1 | 	sub	fp, #12
277f0     C0 DD BF FD | 	call	#_fatfs_cc_validate
277f4     08 4E 05 F1 | 	add	fp, #8
277f8     A7 FA 61 FC | 	wrlong	result1, fp
277fc     08 4E 85 F1 | 	sub	fp, #8
27800     00 FA 0D F2 | 	cmp	result1, #0 wz
27804     04 4E 05 A1 |  if_e	add	fp, #4
27808     A7 FA 01 AB |  if_e	rdlong	result1, fp
2780c     04 4E 85 A1 |  if_e	sub	fp, #4
27810     FD 00 68 AC |  if_e	wrlong	#0, result1
27814                 | ' 
27814                 | ' 
27814                 | ' 
27814                 | ' 
27814                 | ' 		dp->obj.fs = 0;
27814                 | ' #line 4633 "ff.c"
27814                 | ' 	}
27814                 | ' 	return res;
27814     08 4E 05 F1 | 	add	fp, #8
27818     A7 FA 01 FB | 	rdlong	result1, fp
2781c     08 4E 85 F1 | 	sub	fp, #8
27820     A7 F0 03 F6 | 	mov	ptra, fp
27824     B2 00 A0 FD | 	call	#popregs_
27828                 | _fatfs_cc_f_closedir_ret
27828     2D 00 64 FD | 	ret
2782c                 | 
2782c                 | _fatfs_cc_f_readdir
2782c     00 4A 05 F6 | 	mov	COUNT_, #0
27830     A8 00 A0 FD | 	call	#pushregs_
27834     14 F0 07 F1 | 	add	ptra, #20
27838     04 4E 05 F1 | 	add	fp, #4
2783c     A7 12 62 FC | 	wrlong	arg01, fp
27840     04 4E 05 F1 | 	add	fp, #4
27844     A7 14 62 FC | 	wrlong	arg02, fp
27848     04 4E 85 F1 | 	sub	fp, #4
2784c     A7 12 02 FB | 	rdlong	arg01, fp
27850     0C 4E 05 F1 | 	add	fp, #12
27854     A7 14 02 F6 | 	mov	arg02, fp
27858     10 4E 85 F1 | 	sub	fp, #16
2785c     54 DD BF FD | 	call	#_fatfs_cc_validate
27860     0C 4E 05 F1 | 	add	fp, #12
27864     A7 FA 61 FC | 	wrlong	result1, fp
27868     0C 4E 85 F1 | 	sub	fp, #12
2786c     00 FA 0D F2 | 	cmp	result1, #0 wz
27870     BC 00 90 5D |  if_ne	jmp	#LR__4003
27874     08 4E 05 F1 | 	add	fp, #8
27878     A7 FA 09 FB | 	rdlong	result1, fp wz
2787c     08 4E 85 F1 | 	sub	fp, #8
27880     24 00 90 5D |  if_ne	jmp	#LR__4000
27884     04 4E 05 F1 | 	add	fp, #4
27888     A7 12 02 FB | 	rdlong	arg01, fp
2788c     04 4E 85 F1 | 	sub	fp, #4
27890     00 14 06 F6 | 	mov	arg02, #0
27894     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
27898     0C 4E 05 F1 | 	add	fp, #12
2789c     A7 FA 61 FC | 	wrlong	result1, fp
278a0     0C 4E 85 F1 | 	sub	fp, #12
278a4     88 00 90 FD | 	jmp	#LR__4002
278a8                 | LR__4000
278a8     04 4E 05 F1 | 	add	fp, #4
278ac     A7 12 02 FB | 	rdlong	arg01, fp
278b0     04 4E 85 F1 | 	sub	fp, #4
278b4     00 14 06 F6 | 	mov	arg02, #0
278b8     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
278bc     0C 4E 05 F1 | 	add	fp, #12
278c0     A7 FA 61 FC | 	wrlong	result1, fp
278c4     0C 4E 85 F1 | 	sub	fp, #12
278c8     04 FA 0D F2 | 	cmp	result1, #4 wz
278cc     0C 4E 05 A1 |  if_e	add	fp, #12
278d0     A7 00 68 AC |  if_e	wrlong	#0, fp
278d4     0C 4E 85 A1 |  if_e	sub	fp, #12
278d8     0C 4E 05 F1 | 	add	fp, #12
278dc     A7 FA 09 FB | 	rdlong	result1, fp wz
278e0     0C 4E 85 F1 | 	sub	fp, #12
278e4     48 00 90 5D |  if_ne	jmp	#LR__4001
278e8     04 4E 05 F1 | 	add	fp, #4
278ec     A7 12 02 FB | 	rdlong	arg01, fp
278f0     04 4E 05 F1 | 	add	fp, #4
278f4     A7 14 02 FB | 	rdlong	arg02, fp
278f8     08 4E 85 F1 | 	sub	fp, #8
278fc     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
27900     04 4E 05 F1 | 	add	fp, #4
27904     A7 12 02 FB | 	rdlong	arg01, fp
27908     04 4E 85 F1 | 	sub	fp, #4
2790c     00 14 06 F6 | 	mov	arg02, #0
27910     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
27914     0C 4E 05 F1 | 	add	fp, #12
27918     A7 FA 61 FC | 	wrlong	result1, fp
2791c     0C 4E 85 F1 | 	sub	fp, #12
27920     04 FA 0D F2 | 	cmp	result1, #4 wz
27924     0C 4E 05 A1 |  if_e	add	fp, #12
27928     A7 00 68 AC |  if_e	wrlong	#0, fp
2792c     0C 4E 85 A1 |  if_e	sub	fp, #12
27930                 | LR__4001
27930                 | LR__4002
27930                 | LR__4003
27930                 | ' 			}
27930                 | ' 			;
27930                 | ' 		}
27930                 | ' 	}
27930                 | ' 	return res ;
27930     0C 4E 05 F1 | 	add	fp, #12
27934     A7 FA 01 FB | 	rdlong	result1, fp
27938     0C 4E 85 F1 | 	sub	fp, #12
2793c     A7 F0 03 F6 | 	mov	ptra, fp
27940     B2 00 A0 FD | 	call	#popregs_
27944                 | _fatfs_cc_f_readdir_ret
27944     2D 00 64 FD | 	ret
27948                 | 
27948                 | _fatfs_cc_f_stat
27948     00 4A 05 F6 | 	mov	COUNT_, #0
2794c     A8 00 A0 FD | 	call	#pushregs_
27950     40 F0 07 F1 | 	add	ptra, #64
27954     04 4E 05 F1 | 	add	fp, #4
27958     A7 12 62 FC | 	wrlong	arg01, fp
2795c     04 4E 05 F1 | 	add	fp, #4
27960     A7 14 62 FC | 	wrlong	arg02, fp
27964     04 4E 85 F1 | 	sub	fp, #4
27968     A7 12 02 F6 | 	mov	arg01, fp
2796c     0C 4E 05 F1 | 	add	fp, #12
27970     A7 14 02 F6 | 	mov	arg02, fp
27974     10 4E 85 F1 | 	sub	fp, #16
27978     00 16 06 F6 | 	mov	arg03, #0
2797c     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
27980     0C 4E 05 F1 | 	add	fp, #12
27984     A7 FA 61 FC | 	wrlong	result1, fp
27988     0C 4E 85 F1 | 	sub	fp, #12
2798c     00 FA 0D F2 | 	cmp	result1, #0 wz
27990     74 00 90 5D |  if_ne	jmp	#LR__4013
27994     10 4E 05 F1 | 	add	fp, #16
27998     A7 12 02 F6 | 	mov	arg01, fp
2799c     0C 4E 85 F1 | 	sub	fp, #12
279a0     A7 14 02 FB | 	rdlong	arg02, fp
279a4     04 4E 85 F1 | 	sub	fp, #4
279a8     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
279ac     0C 4E 05 F1 | 	add	fp, #12
279b0     A7 FA 61 FC | 	wrlong	result1, fp
279b4     0C 4E 85 F1 | 	sub	fp, #12
279b8     00 FA 0D F2 | 	cmp	result1, #0 wz
279bc     48 00 90 5D |  if_ne	jmp	#LR__4012
279c0     3B 4E 05 F1 | 	add	fp, #59
279c4     A7 FA C1 FA | 	rdbyte	result1, fp
279c8     3B 4E 85 F1 | 	sub	fp, #59
279cc     80 FA CD F7 | 	test	result1, #128 wz
279d0     0C 4E 05 51 |  if_ne	add	fp, #12
279d4     A7 0C 68 5C |  if_ne	wrlong	#6, fp
279d8     0C 4E 85 51 |  if_ne	sub	fp, #12
279dc     28 00 90 5D |  if_ne	jmp	#LR__4011
279e0     08 4E 05 F1 | 	add	fp, #8
279e4     A7 FA 09 FB | 	rdlong	result1, fp wz
279e8     08 4E 85 F1 | 	sub	fp, #8
279ec     18 00 90 AD |  if_e	jmp	#LR__4010
279f0     10 4E 05 F1 | 	add	fp, #16
279f4     A7 12 02 F6 | 	mov	arg01, fp
279f8     08 4E 85 F1 | 	sub	fp, #8
279fc     A7 14 02 FB | 	rdlong	arg02, fp
27a00     08 4E 85 F1 | 	sub	fp, #8
27a04     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
27a08                 | LR__4010
27a08                 | LR__4011
27a08                 | LR__4012
27a08                 | LR__4013
27a08                 | ' 			}
27a08                 | ' 		}
27a08                 | ' 		;
27a08                 | ' 	}
27a08                 | ' 
27a08                 | ' 	return res ;
27a08     0C 4E 05 F1 | 	add	fp, #12
27a0c     A7 FA 01 FB | 	rdlong	result1, fp
27a10     0C 4E 85 F1 | 	sub	fp, #12
27a14     A7 F0 03 F6 | 	mov	ptra, fp
27a18     B2 00 A0 FD | 	call	#popregs_
27a1c                 | _fatfs_cc_f_stat_ret
27a1c     2D 00 64 FD | 	ret
27a20                 | 
27a20                 | _fatfs_cc_f_unlink
27a20     00 4A 05 F6 | 	mov	COUNT_, #0
27a24     A8 00 A0 FD | 	call	#pushregs_
27a28     74 F0 07 F1 | 	add	ptra, #116
27a2c     04 4E 05 F1 | 	add	fp, #4
27a30     A7 12 62 FC | 	wrlong	arg01, fp
27a34     68 4E 05 F1 | 	add	fp, #104
27a38     A7 00 68 FC | 	wrlong	#0, fp
27a3c     68 4E 85 F1 | 	sub	fp, #104
27a40     A7 12 02 F6 | 	mov	arg01, fp
27a44     6C 4E 05 F1 | 	add	fp, #108
27a48     A7 14 02 F6 | 	mov	arg02, fp
27a4c     70 4E 85 F1 | 	sub	fp, #112
27a50     02 16 06 F6 | 	mov	arg03, #2
27a54     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
27a58     08 4E 05 F1 | 	add	fp, #8
27a5c     A7 FA 61 FC | 	wrlong	result1, fp
27a60     08 4E 85 F1 | 	sub	fp, #8
27a64     00 FA 0D F2 | 	cmp	result1, #0 wz
27a68     E4 01 90 5D |  if_ne	jmp	#LR__4028
27a6c     70 4E 05 F1 | 	add	fp, #112
27a70     A7 16 02 FB | 	rdlong	arg03, fp
27a74     64 4E 85 F1 | 	sub	fp, #100
27a78     A7 16 62 FC | 	wrlong	arg03, fp
27a7c     A7 12 02 F6 | 	mov	arg01, fp
27a80     08 4E 85 F1 | 	sub	fp, #8
27a84     A7 14 02 FB | 	rdlong	arg02, fp
27a88     04 4E 85 F1 | 	sub	fp, #4
27a8c     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
27a90     08 4E 05 F1 | 	add	fp, #8
27a94     A7 FA 61 FC | 	wrlong	result1, fp
27a98     00 FA 4D F2 | 	cmps	result1, #0 wz
27a9c     08 4E 85 F1 | 	sub	fp, #8
27aa0     AC 01 90 5D |  if_ne	jmp	#LR__4027
27aa4     37 4E 05 F1 | 	add	fp, #55
27aa8     A7 FA C1 FA | 	rdbyte	result1, fp
27aac     37 4E 85 F1 | 	sub	fp, #55
27ab0     80 FA CD F7 | 	test	result1, #128 wz
27ab4     08 4E 05 51 |  if_ne	add	fp, #8
27ab8     A7 0C 68 5C |  if_ne	wrlong	#6, fp
27abc     08 4E 85 51 |  if_ne	sub	fp, #8
27ac0     1C 00 90 5D |  if_ne	jmp	#LR__4020
27ac4     12 4E 05 F1 | 	add	fp, #18
27ac8     A7 FA C1 FA | 	rdbyte	result1, fp
27acc     12 4E 85 F1 | 	sub	fp, #18
27ad0     01 FA CD F7 | 	test	result1, #1 wz
27ad4     08 4E 05 51 |  if_ne	add	fp, #8
27ad8     A7 0E 68 5C |  if_ne	wrlong	#7, fp
27adc     08 4E 85 51 |  if_ne	sub	fp, #8
27ae0                 | LR__4020
27ae0     08 4E 05 F1 | 	add	fp, #8
27ae4     A7 FA 09 FB | 	rdlong	result1, fp wz
27ae8     08 4E 85 F1 | 	sub	fp, #8
27aec     C8 00 90 5D |  if_ne	jmp	#LR__4023
27af0     70 4E 05 F1 | 	add	fp, #112
27af4     A7 12 02 FB | 	rdlong	arg01, fp
27af8     48 4E 85 F1 | 	sub	fp, #72
27afc     A7 14 02 FB | 	rdlong	arg02, fp
27b00     28 4E 85 F1 | 	sub	fp, #40
27b04     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
27b08     6C 4E 05 F1 | 	add	fp, #108
27b0c     A7 FA 61 FC | 	wrlong	result1, fp
27b10     5A 4E 85 F1 | 	sub	fp, #90
27b14     A7 FA C1 FA | 	rdbyte	result1, fp
27b18     12 4E 85 F1 | 	sub	fp, #18
27b1c     10 FA CD F7 | 	test	result1, #16 wz
27b20     94 00 90 AD |  if_e	jmp	#LR__4022
27b24     70 4E 05 F1 | 	add	fp, #112
27b28     A7 FA 01 FB | 	rdlong	result1, fp
27b2c     34 4E 85 F1 | 	sub	fp, #52
27b30     A7 FA 61 FC | 	wrlong	result1, fp
27b34     30 4E 05 F1 | 	add	fp, #48
27b38     A7 16 02 FB | 	rdlong	arg03, fp
27b3c     28 4E 85 F1 | 	sub	fp, #40
27b40     A7 16 62 FC | 	wrlong	arg03, fp
27b44     08 4E 85 F1 | 	sub	fp, #8
27b48     A7 12 02 F6 | 	mov	arg01, fp
27b4c     3C 4E 85 F1 | 	sub	fp, #60
27b50     00 14 06 F6 | 	mov	arg02, #0
27b54     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
27b58     08 4E 05 F1 | 	add	fp, #8
27b5c     A7 FA 61 FC | 	wrlong	result1, fp
27b60     08 4E 85 F1 | 	sub	fp, #8
27b64     00 FA 0D F2 | 	cmp	result1, #0 wz
27b68     4C 00 90 5D |  if_ne	jmp	#LR__4021
27b6c     3C 4E 05 F1 | 	add	fp, #60
27b70     A7 12 02 F6 | 	mov	arg01, fp
27b74     3C 4E 85 F1 | 	sub	fp, #60
27b78     00 14 06 F6 | 	mov	arg02, #0
27b7c     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
27b80     08 4E 05 F1 | 	add	fp, #8
27b84     A7 FA 61 FC | 	wrlong	result1, fp
27b88     00 FA 4D F2 | 	cmps	result1, #0 wz
27b8c     08 4E 85 F1 | 	sub	fp, #8
27b90     08 4E 05 A1 |  if_e	add	fp, #8
27b94     A7 0E 68 AC |  if_e	wrlong	#7, fp
27b98     08 4E 85 A1 |  if_e	sub	fp, #8
27b9c     08 4E 05 F1 | 	add	fp, #8
27ba0     A7 FA 01 FB | 	rdlong	result1, fp
27ba4     08 4E 85 F1 | 	sub	fp, #8
27ba8     04 FA 0D F2 | 	cmp	result1, #4 wz
27bac     08 4E 05 A1 |  if_e	add	fp, #8
27bb0     A7 00 68 AC |  if_e	wrlong	#0, fp
27bb4     08 4E 85 A1 |  if_e	sub	fp, #8
27bb8                 | LR__4021
27bb8                 | LR__4022
27bb8                 | LR__4023
27bb8     08 4E 05 F1 | 	add	fp, #8
27bbc     A7 FA 09 FB | 	rdlong	result1, fp wz
27bc0     08 4E 85 F1 | 	sub	fp, #8
27bc4     88 00 90 5D |  if_ne	jmp	#LR__4026
27bc8     0C 4E 05 F1 | 	add	fp, #12
27bcc     A7 12 02 F6 | 	mov	arg01, fp
27bd0     0C 4E 85 F1 | 	sub	fp, #12
27bd4     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
27bd8     08 4E 05 F1 | 	add	fp, #8
27bdc     A7 FA 61 FC | 	wrlong	result1, fp
27be0     08 4E 85 F1 | 	sub	fp, #8
27be4     00 FA 0D F2 | 	cmp	result1, #0 wz
27be8     38 00 90 5D |  if_ne	jmp	#LR__4024
27bec     6C 4E 05 F1 | 	add	fp, #108
27bf0     A7 FA 09 FB | 	rdlong	result1, fp wz
27bf4     6C 4E 85 F1 | 	sub	fp, #108
27bf8     28 00 90 AD |  if_e	jmp	#LR__4024
27bfc     0C 4E 05 F1 | 	add	fp, #12
27c00     A7 12 02 F6 | 	mov	arg01, fp
27c04     60 4E 05 F1 | 	add	fp, #96
27c08     A7 14 02 FB | 	rdlong	arg02, fp
27c0c     6C 4E 85 F1 | 	sub	fp, #108
27c10     00 16 06 F6 | 	mov	arg03, #0
27c14     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
27c18     08 4E 05 F1 | 	add	fp, #8
27c1c     A7 FA 61 FC | 	wrlong	result1, fp
27c20     08 4E 85 F1 | 	sub	fp, #8
27c24                 | LR__4024
27c24     08 4E 05 F1 | 	add	fp, #8
27c28     A7 FA 09 FB | 	rdlong	result1, fp wz
27c2c     08 4E 85 F1 | 	sub	fp, #8
27c30     1C 00 90 5D |  if_ne	jmp	#LR__4025
27c34     70 4E 05 F1 | 	add	fp, #112
27c38     A7 12 02 FB | 	rdlong	arg01, fp
27c3c     70 4E 85 F1 | 	sub	fp, #112
27c40     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
27c44     08 4E 05 F1 | 	add	fp, #8
27c48     A7 FA 61 FC | 	wrlong	result1, fp
27c4c     08 4E 85 F1 | 	sub	fp, #8
27c50                 | LR__4025
27c50                 | LR__4026
27c50                 | LR__4027
27c50                 | LR__4028
27c50                 | ' 			}
27c50                 | ' 		}
27c50                 | ' 		;
27c50                 | ' 	}
27c50                 | ' 
27c50                 | ' 	return res ;
27c50     08 4E 05 F1 | 	add	fp, #8
27c54     A7 FA 01 FB | 	rdlong	result1, fp
27c58     08 4E 85 F1 | 	sub	fp, #8
27c5c     A7 F0 03 F6 | 	mov	ptra, fp
27c60     B2 00 A0 FD | 	call	#popregs_
27c64                 | _fatfs_cc_f_unlink_ret
27c64     2D 00 64 FD | 	ret
27c68                 | 
27c68                 | _fatfs_cc_f_mkdir
27c68     00 4A 05 F6 | 	mov	COUNT_, #0
27c6c     A8 00 A0 FD | 	call	#pushregs_
27c70     5C F0 07 F1 | 	add	ptra, #92
27c74     04 4E 05 F1 | 	add	fp, #4
27c78     A7 12 62 FC | 	wrlong	arg01, fp
27c7c     A7 12 02 F6 | 	mov	arg01, fp
27c80     48 4E 05 F1 | 	add	fp, #72
27c84     A7 14 02 F6 | 	mov	arg02, fp
27c88     4C 4E 85 F1 | 	sub	fp, #76
27c8c     02 16 06 F6 | 	mov	arg03, #2
27c90     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
27c94     08 4E 05 F1 | 	add	fp, #8
27c98     A7 FA 61 FC | 	wrlong	result1, fp
27c9c     08 4E 85 F1 | 	sub	fp, #8
27ca0     00 FA 0D F2 | 	cmp	result1, #0 wz
27ca4     C4 02 90 5D |  if_ne	jmp	#LR__4035
27ca8     4C 4E 05 F1 | 	add	fp, #76
27cac     A7 16 02 FB | 	rdlong	arg03, fp
27cb0     40 4E 85 F1 | 	sub	fp, #64
27cb4     A7 16 62 FC | 	wrlong	arg03, fp
27cb8     A7 12 02 F6 | 	mov	arg01, fp
27cbc     08 4E 85 F1 | 	sub	fp, #8
27cc0     A7 14 02 FB | 	rdlong	arg02, fp
27cc4     04 4E 85 F1 | 	sub	fp, #4
27cc8     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
27ccc     08 4E 05 F1 | 	add	fp, #8
27cd0     A7 FA 61 FC | 	wrlong	result1, fp
27cd4     00 FA 4D F2 | 	cmps	result1, #0 wz
27cd8     08 4E 85 F1 | 	sub	fp, #8
27cdc     08 4E 05 A1 |  if_e	add	fp, #8
27ce0     A7 10 68 AC |  if_e	wrlong	#8, fp
27ce4     08 4E 85 A1 |  if_e	sub	fp, #8
27ce8     08 4E 05 F1 | 	add	fp, #8
27cec     A7 FA 01 FB | 	rdlong	result1, fp
27cf0     08 4E 85 F1 | 	sub	fp, #8
27cf4     04 FA 0D F2 | 	cmp	result1, #4 wz
27cf8     70 02 90 5D |  if_ne	jmp	#LR__4034
27cfc     4C 4E 05 F1 | 	add	fp, #76
27d00     A7 16 02 FB | 	rdlong	arg03, fp
27d04     10 4E 85 F1 | 	sub	fp, #16
27d08     A7 16 62 FC | 	wrlong	arg03, fp
27d0c     A7 12 02 F6 | 	mov	arg01, fp
27d10     3C 4E 85 F1 | 	sub	fp, #60
27d14     00 14 06 F6 | 	mov	arg02, #0
27d18     04 AC BF FD | 	call	#_fatfs_cc_create_chain
27d1c     50 4E 05 F1 | 	add	fp, #80
27d20     A7 FA 61 FC | 	wrlong	result1, fp
27d24     48 4E 85 F1 | 	sub	fp, #72
27d28     A7 00 68 FC | 	wrlong	#0, fp
27d2c     48 4E 05 F1 | 	add	fp, #72
27d30     A7 FA 09 FB | 	rdlong	result1, fp wz
27d34     50 4E 85 F1 | 	sub	fp, #80
27d38     08 4E 05 A1 |  if_e	add	fp, #8
27d3c     A7 0E 68 AC |  if_e	wrlong	#7, fp
27d40     08 4E 85 A1 |  if_e	sub	fp, #8
27d44     50 4E 05 F1 | 	add	fp, #80
27d48     A7 FA 01 FB | 	rdlong	result1, fp
27d4c     50 4E 85 F1 | 	sub	fp, #80
27d50     01 FA 0D F2 | 	cmp	result1, #1 wz
27d54     08 4E 05 A1 |  if_e	add	fp, #8
27d58     A7 04 68 AC |  if_e	wrlong	#2, fp
27d5c     08 4E 85 A1 |  if_e	sub	fp, #8
27d60     50 4E 05 F1 | 	add	fp, #80
27d64     A7 16 02 FB | 	rdlong	arg03, fp
27d68     50 4E 85 F1 | 	sub	fp, #80
27d6c     FF FF 7F FF 
27d70     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
27d74     08 4E 05 A1 |  if_e	add	fp, #8
27d78     A7 02 68 AC |  if_e	wrlong	#1, fp
27d7c     08 4E 85 A1 |  if_e	sub	fp, #8
27d80     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
27d84     58 4E 05 F1 | 	add	fp, #88
27d88     A7 FA 61 FC | 	wrlong	result1, fp
27d8c     50 4E 85 F1 | 	sub	fp, #80
27d90     A7 FA 09 FB | 	rdlong	result1, fp wz
27d94     08 4E 85 F1 | 	sub	fp, #8
27d98     1C 01 90 5D |  if_ne	jmp	#LR__4031
27d9c     4C 4E 05 F1 | 	add	fp, #76
27da0     A7 12 02 FB | 	rdlong	arg01, fp
27da4     04 4E 05 F1 | 	add	fp, #4
27da8     A7 14 02 FB | 	rdlong	arg02, fp
27dac     50 4E 85 F1 | 	sub	fp, #80
27db0     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
27db4     08 4E 05 F1 | 	add	fp, #8
27db8     A7 FA 61 FC | 	wrlong	result1, fp
27dbc     00 FA 4D F2 | 	cmps	result1, #0 wz
27dc0     08 4E 85 F1 | 	sub	fp, #8
27dc4     F0 00 90 5D |  if_ne	jmp	#LR__4030
27dc8     4C 4E 05 F1 | 	add	fp, #76
27dcc     A7 12 02 FB | 	rdlong	arg01, fp
27dd0     4C 4E 85 F1 | 	sub	fp, #76
27dd4     34 12 06 F1 | 	add	arg01, #52
27dd8     20 14 06 F6 | 	mov	arg02, #32
27ddc     0B 16 06 F6 | 	mov	arg03, #11
27de0     98 00 A0 FD | 	call	#\builtin_bytefill_
27de4     4C 4E 05 F1 | 	add	fp, #76
27de8     A7 FA 01 FB | 	rdlong	result1, fp
27dec     34 FA 05 F1 | 	add	result1, #52
27df0     FD 5C 48 FC | 	wrbyte	#46, result1
27df4     A7 16 02 FB | 	rdlong	arg03, fp
27df8     3F 16 06 F1 | 	add	arg03, #63
27dfc     0B 21 48 FC | 	wrbyte	#16, arg03
27e00     A7 12 02 FB | 	rdlong	arg01, fp
27e04     4A 12 06 F1 | 	add	arg01, #74
27e08     0C 4E 05 F1 | 	add	fp, #12
27e0c     A7 14 02 FB | 	rdlong	arg02, fp
27e10     09 15 62 FC | 	wrlong	arg02, arg01
27e14     0C 4E 85 F1 | 	sub	fp, #12
27e18     A7 14 02 FB | 	rdlong	arg02, fp
27e1c     0A 13 02 F6 | 	mov	arg01, arg02
27e20     34 14 06 F1 | 	add	arg02, #52
27e24     04 4E 05 F1 | 	add	fp, #4
27e28     A7 16 02 FB | 	rdlong	arg03, fp
27e2c     50 4E 85 F1 | 	sub	fp, #80
27e30     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
27e34     4C 4E 05 F1 | 	add	fp, #76
27e38     A7 14 02 FB | 	rdlong	arg02, fp
27e3c     0A 13 02 F6 | 	mov	arg01, arg02
27e40     54 12 06 F1 | 	add	arg01, #84
27e44     4C 4E 85 F1 | 	sub	fp, #76
27e48     34 14 06 F1 | 	add	arg02, #52
27e4c     20 16 06 F6 | 	mov	arg03, #32
27e50     34 2D BF FD | 	call	#__system____builtin_memmove
27e54     4C 4E 05 F1 | 	add	fp, #76
27e58     A7 16 02 FB | 	rdlong	arg03, fp
27e5c     55 16 06 F1 | 	add	arg03, #85
27e60     0B 5D 48 FC | 	wrbyte	#46, arg03
27e64     38 4E 85 F1 | 	sub	fp, #56
27e68     A7 16 02 FB | 	rdlong	arg03, fp
27e6c     40 4E 05 F1 | 	add	fp, #64
27e70     A7 16 62 FC | 	wrlong	arg03, fp
27e74     08 4E 85 F1 | 	sub	fp, #8
27e78     A7 14 02 FB | 	rdlong	arg02, fp
27e7c     0A 13 02 F6 | 	mov	arg01, arg02
27e80     54 14 06 F1 | 	add	arg02, #84
27e84     4C 4E 85 F1 | 	sub	fp, #76
27e88     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
27e8c     4C 4E 05 F1 | 	add	fp, #76
27e90     A7 16 02 FB | 	rdlong	arg03, fp
27e94     03 16 06 F1 | 	add	arg03, #3
27e98     0B 03 48 FC | 	wrbyte	#1, arg03
27e9c     40 4E 85 F1 | 	sub	fp, #64
27ea0     A7 12 02 F6 | 	mov	arg01, fp
27ea4     0C 4E 85 F1 | 	sub	fp, #12
27ea8     44 BA BF FD | 	call	#_fatfs_cc_dir_register
27eac     08 4E 05 F1 | 	add	fp, #8
27eb0     A7 FA 61 FC | 	wrlong	result1, fp
27eb4     08 4E 85 F1 | 	sub	fp, #8
27eb8                 | LR__4030
27eb8                 | LR__4031
27eb8     08 4E 05 F1 | 	add	fp, #8
27ebc     A7 FA 09 FB | 	rdlong	result1, fp wz
27ec0     08 4E 85 F1 | 	sub	fp, #8
27ec4     88 00 90 5D |  if_ne	jmp	#LR__4032
27ec8     28 4E 05 F1 | 	add	fp, #40
27ecc     A7 12 02 FB | 	rdlong	arg01, fp
27ed0     16 12 06 F1 | 	add	arg01, #22
27ed4     30 4E 05 F1 | 	add	fp, #48
27ed8     A7 14 02 FB | 	rdlong	arg02, fp
27edc     09 15 62 FC | 	wrlong	arg02, arg01
27ee0     0C 4E 85 F1 | 	sub	fp, #12
27ee4     A7 12 02 FB | 	rdlong	arg01, fp
27ee8     24 4E 85 F1 | 	sub	fp, #36
27eec     A7 14 02 FB | 	rdlong	arg02, fp
27ef0     28 4E 05 F1 | 	add	fp, #40
27ef4     A7 16 02 FB | 	rdlong	arg03, fp
27ef8     50 4E 85 F1 | 	sub	fp, #80
27efc     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
27f00     28 4E 05 F1 | 	add	fp, #40
27f04     A7 FA 01 FB | 	rdlong	result1, fp
27f08     0B FA 05 F1 | 	add	result1, #11
27f0c     FD 20 48 FC | 	wrbyte	#16, result1
27f10     24 4E 05 F1 | 	add	fp, #36
27f14     A7 FA 01 FB | 	rdlong	result1, fp
27f18     03 FA 05 F1 | 	add	result1, #3
27f1c     FD 02 48 FC | 	wrbyte	#1, result1
27f20     44 4E 85 F1 | 	sub	fp, #68
27f24     A7 FA 09 FB | 	rdlong	result1, fp wz
27f28     08 4E 85 F1 | 	sub	fp, #8
27f2c     3C 00 90 5D |  if_ne	jmp	#LR__4033
27f30     4C 4E 05 F1 | 	add	fp, #76
27f34     A7 12 02 FB | 	rdlong	arg01, fp
27f38     4C 4E 85 F1 | 	sub	fp, #76
27f3c     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
27f40     08 4E 05 F1 | 	add	fp, #8
27f44     A7 FA 61 FC | 	wrlong	result1, fp
27f48     08 4E 85 F1 | 	sub	fp, #8
27f4c     1C 00 90 FD | 	jmp	#LR__4033
27f50                 | LR__4032
27f50     3C 4E 05 F1 | 	add	fp, #60
27f54     A7 12 02 F6 | 	mov	arg01, fp
27f58     14 4E 05 F1 | 	add	fp, #20
27f5c     A7 14 02 FB | 	rdlong	arg02, fp
27f60     50 4E 85 F1 | 	sub	fp, #80
27f64     00 16 06 F6 | 	mov	arg03, #0
27f68     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
27f6c                 | LR__4033
27f6c                 | LR__4034
27f6c                 | LR__4035
27f6c                 | ' 				remove_chain(&sobj, dcl, 0);
27f6c                 | ' 			}
27f6c                 | ' 		}
27f6c                 | ' 		;
27f6c                 | ' 	}
27f6c                 | ' 
27f6c                 | ' 	return res ;
27f6c     08 4E 05 F1 | 	add	fp, #8
27f70     A7 FA 01 FB | 	rdlong	result1, fp
27f74     08 4E 85 F1 | 	sub	fp, #8
27f78     A7 F0 03 F6 | 	mov	ptra, fp
27f7c     B2 00 A0 FD | 	call	#popregs_
27f80                 | _fatfs_cc_f_mkdir_ret
27f80     2D 00 64 FD | 	ret
27f84                 | 
27f84                 | _fatfs_cc_f_rename
27f84     01 4A 05 F6 | 	mov	COUNT_, #1
27f88     A8 00 A0 FD | 	call	#pushregs_
27f8c     9C F0 07 F1 | 	add	ptra, #156
27f90     04 4E 05 F1 | 	add	fp, #4
27f94     A7 12 62 FC | 	wrlong	arg01, fp
27f98     04 4E 05 F1 | 	add	fp, #4
27f9c     A7 14 62 FC | 	wrlong	arg02, fp
27fa0     A7 12 02 F6 | 	mov	arg01, fp
27fa4     08 4E 85 F1 | 	sub	fp, #8
27fa8     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
27fac     04 4E 05 F1 | 	add	fp, #4
27fb0     A7 12 02 F6 | 	mov	arg01, fp
27fb4     6C 4E 05 F1 | 	add	fp, #108
27fb8     A7 14 02 F6 | 	mov	arg02, fp
27fbc     70 4E 85 F1 | 	sub	fp, #112
27fc0     02 16 06 F6 | 	mov	arg03, #2
27fc4     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
27fc8     0C 4E 05 F1 | 	add	fp, #12
27fcc     A7 FA 61 FC | 	wrlong	result1, fp
27fd0     0C 4E 85 F1 | 	sub	fp, #12
27fd4     00 FA 0D F2 | 	cmp	result1, #0 wz
27fd8     44 03 90 5D |  if_ne	jmp	#LR__4053
27fdc     70 4E 05 F1 | 	add	fp, #112
27fe0     A7 16 02 FB | 	rdlong	arg03, fp
27fe4     60 4E 85 F1 | 	sub	fp, #96
27fe8     A7 16 62 FC | 	wrlong	arg03, fp
27fec     A7 12 02 F6 | 	mov	arg01, fp
27ff0     0C 4E 85 F1 | 	sub	fp, #12
27ff4     A7 14 02 FB | 	rdlong	arg02, fp
27ff8     04 4E 85 F1 | 	sub	fp, #4
27ffc     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
28000     0C 4E 05 F1 | 	add	fp, #12
28004     A7 FA 61 FC | 	wrlong	result1, fp
28008     00 FA 4D F2 | 	cmps	result1, #0 wz
2800c     0C 4E 85 F1 | 	sub	fp, #12
28010     1C 00 90 5D |  if_ne	jmp	#LR__4040
28014     3B 4E 05 F1 | 	add	fp, #59
28018     A7 FA C1 FA | 	rdbyte	result1, fp
2801c     3B 4E 85 F1 | 	sub	fp, #59
28020     A0 FA CD F7 | 	test	result1, #160 wz
28024     0C 4E 05 51 |  if_ne	add	fp, #12
28028     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2802c     0C 4E 85 51 |  if_ne	sub	fp, #12
28030                 | LR__4040
28030     0C 4E 05 F1 | 	add	fp, #12
28034     A7 1E 0A FB | 	rdlong	local01, fp wz
28038     0C 4E 85 F1 | 	sub	fp, #12
2803c     E0 02 90 5D |  if_ne	jmp	#LR__4052
28040     74 4E 05 F1 | 	add	fp, #116
28044     A7 12 02 F6 | 	mov	arg01, fp
28048     48 4E 85 F1 | 	sub	fp, #72
2804c     A7 14 02 FB | 	rdlong	arg02, fp
28050     2C 4E 85 F1 | 	sub	fp, #44
28054     20 16 06 F6 | 	mov	arg03, #32
28058     2C 2B BF FD | 	call	#__system____builtin_memmove
2805c     40 4E 05 F1 | 	add	fp, #64
28060     A7 12 02 F6 | 	mov	arg01, fp
28064     30 4E 85 F1 | 	sub	fp, #48
28068     A7 14 02 F6 | 	mov	arg02, fp
2806c     10 4E 85 F1 | 	sub	fp, #16
28070     30 16 06 F6 | 	mov	arg03, #48
28074     10 2B BF FD | 	call	#__system____builtin_memmove
28078     40 4E 05 F1 | 	add	fp, #64
2807c     A7 12 02 F6 | 	mov	arg01, fp
28080     38 4E 85 F1 | 	sub	fp, #56
28084     A7 14 02 FB | 	rdlong	arg02, fp
28088     08 4E 85 F1 | 	sub	fp, #8
2808c     34 CA BF FD | 	call	#_fatfs_cc_follow_path
28090     0C 4E 05 F1 | 	add	fp, #12
28094     A7 FA 61 FC | 	wrlong	result1, fp
28098     0C 4E 85 F1 | 	sub	fp, #12
2809c     00 FA 0D F2 | 	cmp	result1, #0 wz
280a0     4C 00 90 5D |  if_ne	jmp	#LR__4043
280a4     48 4E 05 F1 | 	add	fp, #72
280a8     A7 FA 01 FB | 	rdlong	result1, fp
280ac     30 4E 85 F1 | 	sub	fp, #48
280b0     A7 16 02 FB | 	rdlong	arg03, fp
280b4     18 4E 85 F1 | 	sub	fp, #24
280b8     0B FB 09 F2 | 	cmp	result1, arg03 wz
280bc     20 00 90 5D |  if_ne	jmp	#LR__4041
280c0     50 4E 05 F1 | 	add	fp, #80
280c4     A7 FA 01 FB | 	rdlong	result1, fp
280c8     30 4E 85 F1 | 	sub	fp, #48
280cc     A7 16 02 FB | 	rdlong	arg03, fp
280d0     20 4E 85 F1 | 	sub	fp, #32
280d4     0B FB 09 F2 | 	cmp	result1, arg03 wz
280d8     04 1E 06 A6 |  if_e	mov	local01, #4
280dc     04 00 90 AD |  if_e	jmp	#LR__4042
280e0                 | LR__4041
280e0     08 1E 06 F6 | 	mov	local01, #8
280e4                 | LR__4042
280e4     0C 4E 05 F1 | 	add	fp, #12
280e8     A7 1E 62 FC | 	wrlong	local01, fp
280ec     0C 4E 85 F1 | 	sub	fp, #12
280f0                 | LR__4043
280f0     0C 4E 05 F1 | 	add	fp, #12
280f4     A7 1E 02 FB | 	rdlong	local01, fp
280f8     0C 4E 85 F1 | 	sub	fp, #12
280fc     04 1E 0E F2 | 	cmp	local01, #4 wz
28100     CC 01 90 5D |  if_ne	jmp	#LR__4049
28104     40 4E 05 F1 | 	add	fp, #64
28108     A7 12 02 F6 | 	mov	arg01, fp
2810c     40 4E 85 F1 | 	sub	fp, #64
28110     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
28114     0C 4E 05 F1 | 	add	fp, #12
28118     A7 FA 61 FC | 	wrlong	result1, fp
2811c     0C 4E 85 F1 | 	sub	fp, #12
28120     00 FA 0D F2 | 	cmp	result1, #0 wz
28124     A8 01 90 5D |  if_ne	jmp	#LR__4048
28128     5C 4E 05 F1 | 	add	fp, #92
2812c     A7 12 02 FB | 	rdlong	arg01, fp
28130     38 4E 05 F1 | 	add	fp, #56
28134     A7 12 62 FC | 	wrlong	arg01, fp
28138     0D 12 06 F1 | 	add	arg01, #13
2813c     20 4E 85 F1 | 	sub	fp, #32
28140     A7 14 02 F6 | 	mov	arg02, fp
28144     74 4E 85 F1 | 	sub	fp, #116
28148     0D 14 06 F1 | 	add	arg02, #13
2814c     13 16 06 F6 | 	mov	arg03, #19
28150     34 2A BF FD | 	call	#__system____builtin_memmove
28154     94 4E 05 F1 | 	add	fp, #148
28158     A7 1E 02 FB | 	rdlong	local01, fp
2815c     15 4E 85 F1 | 	sub	fp, #21
28160     A7 FA C1 FA | 	rdbyte	result1, fp
28164     0B 1E 06 F1 | 	add	local01, #11
28168     0F FB 41 FC | 	wrbyte	result1, local01
2816c     15 4E 05 F1 | 	add	fp, #21
28170     A7 1E 02 FB | 	rdlong	local01, fp
28174     94 4E 85 F1 | 	sub	fp, #148
28178     0B 1E 06 F1 | 	add	local01, #11
2817c     0F 1F C2 FA | 	rdbyte	local01, local01
28180     10 1E CE F7 | 	test	local01, #16 wz
28184     24 00 90 5D |  if_ne	jmp	#LR__4044
28188     94 4E 05 F1 | 	add	fp, #148
2818c     A7 FA 01 FB | 	rdlong	result1, fp
28190     FD 1E 02 F6 | 	mov	local01, result1
28194     94 4E 85 F1 | 	sub	fp, #148
28198     0B FA 05 F1 | 	add	result1, #11
2819c     FD FA C1 FA | 	rdbyte	result1, result1
281a0     20 FA 45 F5 | 	or	result1, #32
281a4     0B 1E 06 F1 | 	add	local01, #11
281a8     0F FB 41 FC | 	wrbyte	result1, local01
281ac                 | LR__4044
281ac     70 4E 05 F1 | 	add	fp, #112
281b0     A7 1E 02 FB | 	rdlong	local01, fp
281b4     03 1E 06 F1 | 	add	local01, #3
281b8     0F 03 48 FC | 	wrbyte	#1, local01
281bc     24 4E 05 F1 | 	add	fp, #36
281c0     A7 1E 02 FB | 	rdlong	local01, fp
281c4     94 4E 85 F1 | 	sub	fp, #148
281c8     0B 1E 06 F1 | 	add	local01, #11
281cc     0F 1F C2 FA | 	rdbyte	local01, local01
281d0     10 1E CE F7 | 	test	local01, #16 wz
281d4     F8 00 90 AD |  if_e	jmp	#LR__4047
281d8     18 4E 05 F1 | 	add	fp, #24
281dc     A7 16 02 FB | 	rdlong	arg03, fp
281e0     30 4E 05 F1 | 	add	fp, #48
281e4     A7 1E 02 FB | 	rdlong	local01, fp
281e8     48 4E 85 F1 | 	sub	fp, #72
281ec     0F 17 0A F2 | 	cmp	arg03, local01 wz
281f0     DC 00 90 AD |  if_e	jmp	#LR__4047
281f4     70 4E 05 F1 | 	add	fp, #112
281f8     A7 12 02 FB | 	rdlong	arg01, fp
281fc     09 1F 02 F6 | 	mov	local01, arg01
28200     24 4E 05 F1 | 	add	fp, #36
28204     A7 14 02 FB | 	rdlong	arg02, fp
28208     94 4E 85 F1 | 	sub	fp, #148
2820c     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
28210     FD 14 02 F6 | 	mov	arg02, result1
28214     0F 13 02 F6 | 	mov	arg01, local01
28218     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
2821c     98 4E 05 F1 | 	add	fp, #152
28220     A7 FA 61 FC | 	wrlong	result1, fp
28224     00 FA 4D F2 | 	cmps	result1, #0 wz
28228     98 4E 85 F1 | 	sub	fp, #152
2822c     0C 4E 05 A1 |  if_e	add	fp, #12
28230     A7 04 68 AC |  if_e	wrlong	#2, fp
28234     0C 4E 85 A1 |  if_e	sub	fp, #12
28238     94 00 90 AD |  if_e	jmp	#LR__4046
2823c     70 4E 05 F1 | 	add	fp, #112
28240     A7 12 02 FB | 	rdlong	arg01, fp
28244     28 4E 05 F1 | 	add	fp, #40
28248     A7 14 02 FB | 	rdlong	arg02, fp
2824c     98 4E 85 F1 | 	sub	fp, #152
28250     4C A0 BF FD | 	call	#_fatfs_cc_move_window
28254     0C 4E 05 F1 | 	add	fp, #12
28258     A7 FA 61 FC | 	wrlong	result1, fp
2825c     64 4E 05 F1 | 	add	fp, #100
28260     A7 1E 02 FB | 	rdlong	local01, fp
28264     54 1E 06 F1 | 	add	local01, #84
28268     24 4E 05 F1 | 	add	fp, #36
2826c     A7 1E 62 FC | 	wrlong	local01, fp
28270     88 4E 85 F1 | 	sub	fp, #136
28274     A7 1E 0A FB | 	rdlong	local01, fp wz
28278     0C 4E 85 F1 | 	sub	fp, #12
2827c     50 00 90 5D |  if_ne	jmp	#LR__4045
28280     94 4E 05 F1 | 	add	fp, #148
28284     A7 1E 02 FB | 	rdlong	local01, fp
28288     94 4E 85 F1 | 	sub	fp, #148
2828c     01 1E 06 F1 | 	add	local01, #1
28290     0F 1F C2 FA | 	rdbyte	local01, local01
28294     2E 1E 0E F2 | 	cmp	local01, #46 wz
28298     34 00 90 5D |  if_ne	jmp	#LR__4045
2829c     70 4E 05 F1 | 	add	fp, #112
282a0     A7 12 02 FB | 	rdlong	arg01, fp
282a4     24 4E 05 F1 | 	add	fp, #36
282a8     A7 14 02 FB | 	rdlong	arg02, fp
282ac     4C 4E 85 F1 | 	sub	fp, #76
282b0     A7 16 02 FB | 	rdlong	arg03, fp
282b4     48 4E 85 F1 | 	sub	fp, #72
282b8     50 AD BF FD | 	call	#_fatfs_cc_st_clust
282bc     70 4E 05 F1 | 	add	fp, #112
282c0     A7 1E 02 FB | 	rdlong	local01, fp
282c4     70 4E 85 F1 | 	sub	fp, #112
282c8     03 1E 06 F1 | 	add	local01, #3
282cc     0F 03 48 FC | 	wrbyte	#1, local01
282d0                 | LR__4045
282d0                 | LR__4046
282d0                 | LR__4047
282d0                 | LR__4048
282d0                 | LR__4049
282d0     0C 4E 05 F1 | 	add	fp, #12
282d4     A7 1E 0A FB | 	rdlong	local01, fp wz
282d8     0C 4E 85 F1 | 	sub	fp, #12
282dc     40 00 90 5D |  if_ne	jmp	#LR__4051
282e0     10 4E 05 F1 | 	add	fp, #16
282e4     A7 12 02 F6 | 	mov	arg01, fp
282e8     10 4E 85 F1 | 	sub	fp, #16
282ec     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
282f0     0C 4E 05 F1 | 	add	fp, #12
282f4     A7 FA 61 FC | 	wrlong	result1, fp
282f8     0C 4E 85 F1 | 	sub	fp, #12
282fc     00 FA 0D F2 | 	cmp	result1, #0 wz
28300     1C 00 90 5D |  if_ne	jmp	#LR__4050
28304     70 4E 05 F1 | 	add	fp, #112
28308     A7 12 02 FB | 	rdlong	arg01, fp
2830c     70 4E 85 F1 | 	sub	fp, #112
28310     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
28314     0C 4E 05 F1 | 	add	fp, #12
28318     A7 FA 61 FC | 	wrlong	result1, fp
2831c     0C 4E 85 F1 | 	sub	fp, #12
28320                 | LR__4050
28320                 | LR__4051
28320                 | LR__4052
28320                 | LR__4053
28320                 | ' 					res = sync_fs(fs);
28320                 | ' 				}
28320                 | ' 			}
28320                 | ' 
28320                 | ' 		}
28320                 | ' 		;
28320                 | ' 	}
28320                 | ' 
28320                 | ' 	return res ;
28320     0C 4E 05 F1 | 	add	fp, #12
28324     A7 FA 01 FB | 	rdlong	result1, fp
28328     0C 4E 85 F1 | 	sub	fp, #12
2832c     A7 F0 03 F6 | 	mov	ptra, fp
28330     B2 00 A0 FD | 	call	#popregs_
28334                 | _fatfs_cc_f_rename_ret
28334     2D 00 64 FD | 	ret
28338                 | 
28338                 | _fatfs_cc_time
28338     00 4A 05 F6 | 	mov	COUNT_, #0
2833c     A8 00 A0 FD | 	call	#pushregs_
28340     14 F0 07 F1 | 	add	ptra, #20
28344     04 4E 05 F1 | 	add	fp, #4
28348     A7 12 62 FC | 	wrlong	arg01, fp
2834c     04 4E 05 F1 | 	add	fp, #4
28350     A7 12 02 F6 | 	mov	arg01, fp
28354     08 4E 85 F1 | 	sub	fp, #8
28358     00 14 06 F6 | 	mov	arg02, #0
2835c     00 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
28360     08 4E 05 F1 | 	add	fp, #8
28364     A7 FA 01 FB | 	rdlong	result1, fp
28368     08 4E 05 F1 | 	add	fp, #8
2836c     A7 FA 61 FC | 	wrlong	result1, fp
28370     0C 4E 85 F1 | 	sub	fp, #12
28374     A7 FA 09 FB | 	rdlong	result1, fp wz
28378     04 4E 85 F1 | 	sub	fp, #4
2837c     18 00 90 AD |  if_e	jmp	#LR__4060
28380     04 4E 05 F1 | 	add	fp, #4
28384     A7 FA 01 FB | 	rdlong	result1, fp
28388     0C 4E 05 F1 | 	add	fp, #12
2838c     A7 14 02 FB | 	rdlong	arg02, fp
28390     10 4E 85 F1 | 	sub	fp, #16
28394     FD 14 62 FC | 	wrlong	arg02, result1
28398                 | LR__4060
28398                 | '         *tp = now;
28398                 | '     return now;
28398     10 4E 05 F1 | 	add	fp, #16
2839c     A7 FA 01 FB | 	rdlong	result1, fp
283a0     10 4E 85 F1 | 	sub	fp, #16
283a4     A7 F0 03 F6 | 	mov	ptra, fp
283a8     B2 00 A0 FD | 	call	#popregs_
283ac                 | _fatfs_cc_time_ret
283ac     2D 00 64 FD | 	ret
283b0                 | 
283b0                 | _fatfs_cc_mktime
283b0     06 4A 05 F6 | 	mov	COUNT_, #6
283b4     A8 00 A0 FD | 	call	#pushregs_
283b8     09 1F 02 F6 | 	mov	local01, arg01
283bc     14 1E 06 F1 | 	add	local01, #20
283c0     0F 13 02 FB | 	rdlong	arg01, local01
283c4     14 1E 86 F1 | 	sub	local01, #20
283c8     46 12 56 F2 | 	cmps	arg01, #70 wc
283cc                 | '                 return (time_t) -1;
283cc     01 FA 65 C6 |  if_b	neg	result1, #1
283d0     7C 01 90 CD |  if_b	jmp	#LR__4074
283d4     03 00 00 FF 
283d8     6C 21 06 F6 | 	mov	local02, ##1900
283dc     14 1E 06 F1 | 	add	local01, #20
283e0     0F FB 01 FB | 	rdlong	result1, local01
283e4     FD 20 02 F1 | 	add	local02, result1
283e8     08 1E 86 F1 | 	sub	local01, #8
283ec     0F 23 02 FB | 	rdlong	local03, local01
283f0     01 22 86 F1 | 	sub	local03, #1
283f4     04 1E 06 F1 | 	add	local01, #4
283f8     0F 13 02 FB | 	rdlong	arg01, local01
283fc     10 1E 86 F1 | 	sub	local01, #16
28400     02 12 66 F0 | 	shl	arg01, #2
28404     02 00 00 FF 
28408     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
2840c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
28410     09 FB 01 FB | 	rdlong	result1, arg01
28414     FD 22 02 F1 | 	add	local03, result1
28418     10 13 02 F6 | 	mov	arg01, local02
2841c     02 00 00 FF 
28420     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
28424     E0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
28428     00 FA 0D F2 | 	cmp	result1, #0 wz
2842c     1C 00 90 AD |  if_e	jmp	#LR__4070
28430     00 24 06 F6 | 	mov	local04, #0
28434     10 1E 06 F1 | 	add	local01, #16
28438     0F FB 01 FB | 	rdlong	result1, local01
2843c     10 1E 86 F1 | 	sub	local01, #16
28440     02 FA 55 F2 | 	cmps	result1, #2 wc
28444     01 24 06 36 |  if_ae	mov	local04, #1
28448     04 00 90 FD | 	jmp	#LR__4071
2844c                 | LR__4070
2844c     00 24 06 F6 | 	mov	local04, #0
28450                 | LR__4071
28450     04 1E 06 F1 | 	add	local01, #4
28454     0F FB 01 FB | 	rdlong	result1, local01
28458     04 1E 86 F1 | 	sub	local01, #4
2845c     0F 27 02 FB | 	rdlong	local05, local01
28460     08 1E 06 F1 | 	add	local01, #8
28464     0F 13 02 FB | 	rdlong	arg01, local01
28468     07 00 00 FF 
2846c     10 12 06 FD | 	qmul	arg01, ##3600
28470     12 23 02 F1 | 	add	local03, local04
28474     FD 24 02 F6 | 	mov	local04, result1
28478     04 24 66 F0 | 	shl	local04, #4
2847c     FD 24 82 F1 | 	sub	local04, result1
28480     02 24 66 F0 | 	shl	local04, #2
28484     12 27 02 F1 | 	add	local05, local04
28488     08 1E 86 F1 | 	sub	local01, #8
2848c     18 24 62 FD | 	getqx	local04
28490     A8 00 00 FF 
28494     80 23 06 FD | 	qmul	local03, ##86400
28498     12 27 02 F1 | 	add	local05, local04
2849c     10 23 02 F6 | 	mov	local03, local02
284a0     03 00 00 FF 
284a4     B2 23 86 F1 | 	sub	local03, ##1970
284a8     18 24 62 FD | 	getqx	local04
284ac     99 F0 00 FF 
284b0     80 23 06 FD | 	qmul	local03, ##31536000
284b4     12 27 02 F1 | 	add	local05, local04
284b8     10 23 02 F6 | 	mov	local03, local02
284bc     03 00 00 FF 
284c0     B1 23 86 F1 | 	sub	local03, ##1969
284c4     11 29 52 F6 | 	abs	local06, local03 wc
284c8     02 28 46 F0 | 	shr	local06, #2
284cc     14 29 82 F6 | 	negc	local06, local06
284d0     03 00 00 FF 
284d4     D1 21 56 F2 | 	cmps	local02, ##2001 wc
284d8     18 24 62 FD | 	getqx	local04
284dc     12 27 02 F1 | 	add	local05, local04
284e0     18 00 90 CD |  if_b	jmp	#LR__4072
284e4     03 00 00 FF 
284e8     D0 21 86 F1 | 	sub	local02, ##2000
284ec     10 25 52 F6 | 	abs	local04, local02 wc
284f0     64 24 16 FD | 	qdiv	local04, #100
284f4     18 24 62 FD | 	getqx	local04
284f8     12 29 A2 F3 | 	sumnc	local06, local04
284fc                 | LR__4072
284fc     A8 00 00 FF 
28500     80 29 06 FD | 	qmul	local06, ##86400
28504     18 28 62 FD | 	getqx	local06
28508     14 27 02 F1 | 	add	local05, local06
2850c     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
28510     02 00 00 FF 
28514     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
28518     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
2851c     14 27 02 F1 | 	add	local05, local06
28520     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
28524     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
28528     02 00 00 FF 
2852c     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
28530     01 22 0E F2 | 	cmp	local03, #1 wz
28534     14 00 90 5D |  if_ne	jmp	#LR__4073
28538     0F 13 02 F6 | 	mov	arg01, local01
2853c     CC 19 B0 FD | 	call	#_fatfs_cc___indst
28540     00 FA 0D F2 | 	cmp	result1, #0 wz
28544     07 00 00 5F 
28548     10 26 86 51 |  if_ne	sub	local05, ##3600
2854c                 | LR__4073
2854c                 | '                 s -=  (3600L) ;
2854c                 | ' 
2854c                 | '         return s;
2854c     13 FB 01 F6 | 	mov	result1, local05
28550                 | LR__4074
28550     A7 F0 03 F6 | 	mov	ptra, fp
28554     B2 00 A0 FD | 	call	#popregs_
28558                 | _fatfs_cc_mktime_ret
28558     2D 00 64 FD | 	ret
2855c                 | 
2855c                 | _fatfs_cc__gmtime_r
2855c     03 4A 05 F6 | 	mov	COUNT_, #3
28560     A8 00 A0 FD | 	call	#pushregs_
28564     09 1F 02 FB | 	rdlong	local01, arg01
28568     A8 00 00 FF 
2856c     80 1F 16 FD | 	qdiv	local01, ##86400
28570     18 FA 61 FD | 	getqx	result1
28574     04 FA 05 F1 | 	add	result1, #4
28578     07 FA 15 FD | 	qdiv	result1, #7
2857c     18 14 06 F1 | 	add	arg02, #24
28580     D1 7F 27 FF 
28584     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
28588     D1 7F 27 3F 
2858c     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
28590     03 00 00 3F 
28594     DC 21 06 36 |  if_ae	mov	local02, ##2012
28598     03 00 00 CF 
2859c     B2 21 06 C6 |  if_b	mov	local02, ##1970
285a0                 | ' 	  year = 1970;
285a0                 | ' 	}
285a0                 | ' 
285a0                 | ' 	for(;;) {
285a0     19 FA 61 FD | 	getqy	result1
285a4     0A FB 61 FC | 	wrlong	result1, arg02
285a8     18 14 86 F1 | 	sub	arg02, #24
285ac                 | LR__4080
285ac     10 13 02 F6 | 	mov	arg01, local02
285b0     54 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
285b4     00 FA 0D F2 | 	cmp	result1, #0 wz
285b8     42 F1 00 5F 
285bc     00 23 06 56 |  if_ne	mov	local03, ##31622400
285c0     99 F0 00 AF 
285c4     80 23 06 A6 |  if_e	mov	local03, ##31536000
285c8     11 1F 12 F2 | 	cmp	local01, local03 wc
285cc                 | ' 	    break;
285cc     01 20 06 31 |  if_ae	add	local02, #1
285d0     11 1F 82 31 |  if_ae	sub	local01, local03
285d4     D4 FF 9F 3D |  if_ae	jmp	#LR__4080
285d8     A8 00 00 FF 
285dc     80 1F 16 FD | 	qdiv	local01, ##86400
285e0     10 23 02 F6 | 	mov	local03, local02
285e4     03 00 00 FF 
285e8     6C 23 86 F1 | 	sub	local03, ##1900
285ec     14 14 06 F1 | 	add	arg02, #20
285f0     0A 23 62 FC | 	wrlong	local03, arg02
285f4     08 14 06 F1 | 	add	arg02, #8
285f8     10 13 02 F6 | 	mov	arg01, local02
285fc     18 20 62 FD | 	getqx	local02
28600     0A 21 62 FC | 	wrlong	local02, arg02
28604     1C 14 86 F1 | 	sub	arg02, #28
28608     FC 15 B0 FD | 	call	#_fatfs_cc__is_leap_year
2860c     00 FA 0D F2 | 	cmp	result1, #0 wz
28610     1D 22 06 56 |  if_ne	mov	local03, #29
28614     1C 22 06 A6 |  if_e	mov	local03, #28
28618     02 00 00 FF 
2861c     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
28620     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
28624     02 00 00 FF 
28628     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
2862c                 | ' 
2862c                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
2862c                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
2862c     00 12 06 F6 | 	mov	arg01, #0
28630     97 2A 48 FB | 	callpa	#(@LR__4082-@LR__4081)>>2,fcache_load_ptr_
28634                 | LR__4081
28634     09 23 02 F6 | 	mov	local03, arg01
28638     02 22 66 F0 | 	shl	local03, #2
2863c     02 00 00 FF 
28640     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
28644     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
28648     11 23 02 FB | 	rdlong	local03, local03
2864c     11 21 52 F2 | 	cmps	local02, local03 wc
28650     02 00 00 FF 
28654     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
28658     2C 00 90 CD |  if_b	jmp	#LR__4083
2865c     09 23 02 F6 | 	mov	local03, arg01
28660     02 22 66 F0 | 	shl	local03, #2
28664     02 00 00 FF 
28668     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2866c     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
28670     11 23 02 FB | 	rdlong	local03, local03
28674     11 21 82 F1 | 	sub	local02, local03
28678     01 12 06 F1 | 	add	arg01, #1
2867c     02 00 00 FF 
28680     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
28684     AC FF 9F FD | 	jmp	#LR__4081
28688                 | LR__4082
28688                 | LR__4083
28688     A8 00 00 FF 
2868c     80 1F 16 FD | 	qdiv	local01, ##86400
28690     10 14 06 F1 | 	add	arg02, #16
28694     0A 13 62 FC | 	wrlong	arg01, arg02
28698     01 20 06 F1 | 	add	local02, #1
2869c     04 14 86 F1 | 	sub	arg02, #4
286a0     0A 21 62 FC | 	wrlong	local02, arg02
286a4     19 1E 62 FD | 	getqy	local01
286a8     07 00 00 FF 
286ac     10 1E 16 FD | 	qdiv	local01, ##3600
286b0     18 22 62 FD | 	getqx	local03
286b4     07 00 00 FF 
286b8     10 1E 16 FD | 	qdiv	local01, ##3600
286bc     04 14 86 F1 | 	sub	arg02, #4
286c0     0A 23 62 FC | 	wrlong	local03, arg02
286c4     19 1E 62 FD | 	getqy	local01
286c8     3C 1E 16 FD | 	qdiv	local01, #60
286cc     18 22 62 FD | 	getqx	local03
286d0     3C 1E 16 FD | 	qdiv	local01, #60
286d4     04 14 86 F1 | 	sub	arg02, #4
286d8     0A 23 62 FC | 	wrlong	local03, arg02
286dc     04 14 86 F1 | 	sub	arg02, #4
286e0                 | '         stm->tm_isdst = 0;
286e0                 | ' 
286e0                 | ' ;
286e0                 | '         return stm;
286e0     0A FB 01 F6 | 	mov	result1, arg02
286e4     19 22 62 FD | 	getqy	local03
286e8     0A 23 62 FC | 	wrlong	local03, arg02
286ec     20 14 06 F1 | 	add	arg02, #32
286f0     0A 01 68 FC | 	wrlong	#0, arg02
286f4     A7 F0 03 F6 | 	mov	ptra, fp
286f8     B2 00 A0 FD | 	call	#popregs_
286fc                 | _fatfs_cc__gmtime_r_ret
286fc     2D 00 64 FD | 	ret
28700                 | 
28700                 | _fatfs_cc__tzset
28700     51 01 00 FF 
28704     35 12 06 F6 | 	mov	arg01, ##@LR__4395
28708     34 00 B0 FD | 	call	#_fatfs_cc_getenv
2870c     FD 12 02 F6 | 	mov	arg01, result1
28710     02 00 00 FF 
28714     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
28718     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2871c     02 00 00 FF 
28720     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
28724     30 15 B0 FD | 	call	#_fatfs_cc___tzoffset
28728     02 00 00 FF 
2872c     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
28730     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
28734     02 00 00 FF 
28738     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
2873c                 | _fatfs_cc__tzset_ret
2873c     2D 00 64 FD | 	ret
28740                 | 
28740                 | _fatfs_cc_getenv
28740     06 4A 05 F6 | 	mov	COUNT_, #6
28744     A8 00 A0 FD | 	call	#pushregs_
28748     09 1F 02 F6 | 	mov	local01, arg01
2874c     09 21 02 F6 | 	mov	local02, arg01
28750     97 06 48 FB | 	callpa	#(@LR__4091-@LR__4090)>>2,fcache_load_ptr_
28754                 | LR__4090
28754     10 FB C9 FA | 	rdbyte	result1, local02 wz
28758     01 20 06 51 |  if_ne	add	local02, #1
2875c     F4 FF 9F 5D |  if_ne	jmp	#LR__4090
28760                 | LR__4091
28760     09 21 82 F1 | 	sub	local02, arg01
28764     10 FB 01 F6 | 	mov	result1, local02
28768     02 00 00 FF 
2876c     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
28770     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
28774     02 00 00 FF 
28778     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2877c                 | '             return 0;
2877c     00 FA 05 A6 |  if_e	mov	result1, #0
28780     5C 00 90 AD |  if_e	jmp	#LR__4094
28784                 | ' 
28784                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
28784     02 00 00 FF 
28788     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2878c     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
28790     02 00 00 FF 
28794     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
28798                 | LR__4092
28798     11 25 0A FB | 	rdlong	local04, local03 wz
2879c     3C 00 90 AD |  if_e	jmp	#LR__4093
287a0     12 13 02 F6 | 	mov	arg01, local04
287a4     0F 15 02 F6 | 	mov	arg02, local01
287a8     10 17 02 F6 | 	mov	arg03, local02
287ac     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
287b0     00 FA 0D F2 | 	cmp	result1, #0 wz
287b4     10 27 02 A6 |  if_e	mov	local05, local02
287b8     12 27 02 A1 |  if_e	add	local05, local04
287bc     13 29 C2 AA |  if_e	rdbyte	local06, local05
287c0     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
287c4                 | ' 			return name+len+1;
287c4     10 25 02 A1 |  if_e	add	local04, local02
287c8     01 24 06 A1 |  if_e	add	local04, #1
287cc     12 FB 01 A6 |  if_e	mov	result1, local04
287d0     0C 00 90 AD |  if_e	jmp	#LR__4094
287d4     04 22 06 F1 | 	add	local03, #4
287d8     BC FF 9F FD | 	jmp	#LR__4092
287dc                 | LR__4093
287dc                 | ' 	}
287dc                 | ' 	return 0;
287dc     00 FA 05 F6 | 	mov	result1, #0
287e0                 | LR__4094
287e0     A7 F0 03 F6 | 	mov	ptra, fp
287e4     B2 00 A0 FD | 	call	#popregs_
287e8                 | _fatfs_cc_getenv_ret
287e8     2D 00 64 FD | 	ret
287ec                 | 
287ec                 | _fatfs_cc__get_fattime
287ec     00 4A 05 F6 | 	mov	COUNT_, #0
287f0     A8 00 A0 FD | 	call	#pushregs_
287f4     34 F0 07 F1 | 	add	ptra, #52
287f8     00 12 06 F6 | 	mov	arg01, #0
287fc     38 FB BF FD | 	call	#_fatfs_cc_time
28800     04 4E 05 F1 | 	add	fp, #4
28804     A7 FA 61 FC | 	wrlong	result1, fp
28808     A7 12 02 F6 | 	mov	arg01, fp
2880c     0C 4E 05 F1 | 	add	fp, #12
28810     A7 14 02 F6 | 	mov	arg02, fp
28814     10 4E 85 F1 | 	sub	fp, #16
28818     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
2881c     24 4E 05 F1 | 	add	fp, #36
28820     A7 14 02 FB | 	rdlong	arg02, fp
28824     50 14 86 F1 | 	sub	arg02, #80
28828     09 14 66 F0 | 	shl	arg02, #9
2882c     04 4E 85 F1 | 	sub	fp, #4
28830     A7 FA 01 FB | 	rdlong	result1, fp
28834     01 FA 05 F1 | 	add	result1, #1
28838     05 FA 65 F0 | 	shl	result1, #5
2883c     FD 14 42 F5 | 	or	arg02, result1
28840     04 4E 85 F1 | 	sub	fp, #4
28844     A7 FA 01 FB | 	rdlong	result1, fp
28848     FD 14 42 F5 | 	or	arg02, result1
2884c     14 4E 85 F1 | 	sub	fp, #20
28850     A7 14 62 FC | 	wrlong	arg02, fp
28854     10 4E 05 F1 | 	add	fp, #16
28858     A7 14 02 FB | 	rdlong	arg02, fp
2885c     0B 14 66 F0 | 	shl	arg02, #11
28860     04 4E 85 F1 | 	sub	fp, #4
28864     A7 FA 01 FB | 	rdlong	result1, fp
28868     05 FA 65 F0 | 	shl	result1, #5
2886c     FD 14 42 F5 | 	or	arg02, result1
28870     04 4E 85 F1 | 	sub	fp, #4
28874     A7 FA 01 FB | 	rdlong	result1, fp
28878     FD 14 42 F5 | 	or	arg02, result1
2887c     04 4E 85 F1 | 	sub	fp, #4
28880     A7 14 62 FC | 	wrlong	arg02, fp
28884                 | ' 
28884                 | '     now = time(0);
28884                 | '     _gmtime_r (&now, &date);
28884                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
28884                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
28884                 | '     return (ffdate << 16) | fftime;
28884     04 4E 85 F1 | 	sub	fp, #4
28888     A7 FA 01 FB | 	rdlong	result1, fp
2888c     10 FA 65 F0 | 	shl	result1, #16
28890     08 4E 85 F1 | 	sub	fp, #8
28894     0A FB 41 F5 | 	or	result1, arg02
28898     A7 F0 03 F6 | 	mov	ptra, fp
2889c     B2 00 A0 FD | 	call	#popregs_
288a0                 | _fatfs_cc__get_fattime_ret
288a0     2D 00 64 FD | 	ret
288a4                 | 
288a4                 | _fatfs_cc_unixtime_0862
288a4     00 4A 05 F6 | 	mov	COUNT_, #0
288a8     A8 00 A0 FD | 	call	#pushregs_
288ac     34 F0 07 F1 | 	add	ptra, #52
288b0     04 4E 05 F1 | 	add	fp, #4
288b4     A7 12 62 FC | 	wrlong	arg01, fp
288b8     04 4E 05 F1 | 	add	fp, #4
288bc     A7 14 62 FC | 	wrlong	arg02, fp
288c0     04 4E 85 F1 | 	sub	fp, #4
288c4     A7 14 02 FB | 	rdlong	arg02, fp
288c8     09 14 46 F0 | 	shr	arg02, #9
288cc     7F 14 06 F5 | 	and	arg02, #127
288d0     50 FA 05 F6 | 	mov	result1, #80
288d4     0A FB 01 F1 | 	add	result1, arg02
288d8     20 4E 05 F1 | 	add	fp, #32
288dc     A7 FA 61 FC | 	wrlong	result1, fp
288e0     20 4E 85 F1 | 	sub	fp, #32
288e4     A7 FA 01 FB | 	rdlong	result1, fp
288e8     05 FA 45 F0 | 	shr	result1, #5
288ec     FD FA 41 F8 | 	getnib	result1, result1, #0
288f0     01 FA 85 F1 | 	sub	result1, #1
288f4     1C 4E 05 F1 | 	add	fp, #28
288f8     A7 FA 61 FC | 	wrlong	result1, fp
288fc     1C 4E 85 F1 | 	sub	fp, #28
28900     A7 FA 01 FB | 	rdlong	result1, fp
28904     1F FA 05 F5 | 	and	result1, #31
28908     18 4E 05 F1 | 	add	fp, #24
2890c     A7 FA 61 FC | 	wrlong	result1, fp
28910     14 4E 85 F1 | 	sub	fp, #20
28914     A7 FA 01 FB | 	rdlong	result1, fp
28918     0B FA 45 F0 | 	shr	result1, #11
2891c     1F FA 05 F5 | 	and	result1, #31
28920     10 4E 05 F1 | 	add	fp, #16
28924     A7 FA 61 FC | 	wrlong	result1, fp
28928     10 4E 85 F1 | 	sub	fp, #16
2892c     A7 FA 01 FB | 	rdlong	result1, fp
28930     05 FA 45 F0 | 	shr	result1, #5
28934     3F FA 05 F5 | 	and	result1, #63
28938     0C 4E 05 F1 | 	add	fp, #12
2893c     A7 FA 61 FC | 	wrlong	result1, fp
28940     0C 4E 85 F1 | 	sub	fp, #12
28944     A7 14 02 FB | 	rdlong	arg02, fp
28948     1F 14 06 F5 | 	and	arg02, #31
2894c     01 14 66 F0 | 	shl	arg02, #1
28950     08 4E 05 F1 | 	add	fp, #8
28954     A7 14 62 FC | 	wrlong	arg02, fp
28958     A7 12 02 F6 | 	mov	arg01, fp
2895c     10 4E 85 F1 | 	sub	fp, #16
28960     4C FA BF FD | 	call	#_fatfs_cc_mktime
28964     0C 4E 05 F1 | 	add	fp, #12
28968     A7 FA 61 FC | 	wrlong	result1, fp
2896c                 | ' 
2896c                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
2896c                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
2896c                 | '     date.tm_mday = (dosdate & 0x1f);
2896c                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
2896c                 | '     date.tm_min = (dostime >> 5) & 0x3f;
2896c                 | '     date.tm_sec = (dostime & 0x1f) << 1;
2896c                 | ' 
2896c                 | '     t = mktime(&date);
2896c                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2896c                 | '     return t;
2896c     0C 4E 85 F1 | 	sub	fp, #12
28970     A7 F0 03 F6 | 	mov	ptra, fp
28974     B2 00 A0 FD | 	call	#popregs_
28978                 | _fatfs_cc_unixtime_0862_ret
28978     2D 00 64 FD | 	ret
2897c                 | 
2897c                 | _fatfs_cc__set_dos_error_0864
2897c     09 01 02 F6 | 	mov	_var01, arg01
28980                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
28980                 | '     switch (derr) {
28980     14 00 26 F3 | 	fle	_var01, #20
28984     30 00 62 FD | 	jmprel	_var01
28988                 | LR__4100
28988     50 00 90 FD | 	jmp	#LR__4101
2898c     84 00 90 FD | 	jmp	#LR__4115
28990     80 00 90 FD | 	jmp	#LR__4116
28994     7C 00 90 FD | 	jmp	#LR__4117
28998     48 00 90 FD | 	jmp	#LR__4102
2899c     44 00 90 FD | 	jmp	#LR__4103
289a0     40 00 90 FD | 	jmp	#LR__4104
289a4     44 00 90 FD | 	jmp	#LR__4105
289a8     48 00 90 FD | 	jmp	#LR__4107
289ac     54 00 90 FD | 	jmp	#LR__4110
289b0     38 00 90 FD | 	jmp	#LR__4106
289b4     4C 00 90 FD | 	jmp	#LR__4111
289b8     48 00 90 FD | 	jmp	#LR__4112
289bc     44 00 90 FD | 	jmp	#LR__4113
289c0     50 00 90 FD | 	jmp	#LR__4118
289c4     4C 00 90 FD | 	jmp	#LR__4118
289c8     48 00 90 FD | 	jmp	#LR__4118
289cc     2C 00 90 FD | 	jmp	#LR__4108
289d0     38 00 90 FD | 	jmp	#LR__4114
289d4     2C 00 90 FD | 	jmp	#LR__4109
289d8     38 00 90 FD | 	jmp	#LR__4118
289dc                 | LR__4101
289dc     00 02 06 F6 | 	mov	_var02, #0
289e0                 | '         r = 0;
289e0                 | '         break;
289e0     34 00 90 FD | 	jmp	#LR__4119
289e4                 | LR__4102
289e4                 | LR__4103
289e4                 | LR__4104
289e4     04 02 06 F6 | 	mov	_var02, #4
289e8                 | '         r =  4 ;
289e8                 | '         break;
289e8     2C 00 90 FD | 	jmp	#LR__4119
289ec                 | LR__4105
289ec                 | LR__4106
289ec     06 02 06 F6 | 	mov	_var02, #6
289f0                 | '         r =  6 ;
289f0                 | '         break;
289f0     24 00 90 FD | 	jmp	#LR__4119
289f4                 | LR__4107
289f4     09 02 06 F6 | 	mov	_var02, #9
289f8                 | '         r =  9 ;
289f8                 | '         break;
289f8     1C 00 90 FD | 	jmp	#LR__4119
289fc                 | LR__4108
289fc     07 02 06 F6 | 	mov	_var02, #7
28a00                 | '         r =  7 ;
28a00                 | '         break;
28a00     14 00 90 FD | 	jmp	#LR__4119
28a04                 | LR__4109
28a04                 | LR__4110
28a04                 | LR__4111
28a04                 | LR__4112
28a04                 | LR__4113
28a04     0A 02 06 F6 | 	mov	_var02, #10
28a08                 | '         r =  10 ;
28a08                 | '         break;
28a08     0C 00 90 FD | 	jmp	#LR__4119
28a0c                 | LR__4114
28a0c     0B 02 06 F6 | 	mov	_var02, #11
28a10                 | '         r =  11 ;
28a10                 | '         break;
28a10     04 00 90 FD | 	jmp	#LR__4119
28a14                 | LR__4115
28a14                 | LR__4116
28a14                 | LR__4117
28a14                 | LR__4118
28a14     0C 02 06 F6 | 	mov	_var02, #12
28a18                 | '         r =  12 ;
28a18                 | '         break;
28a18                 | LR__4119
28a18                 | '     }
28a18                 | '     return _seterror(r);
28a18     00 02 4E F2 | 	cmps	_var02, #0 wz
28a1c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
28a20     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
28a24     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
28a28     01 FA 65 56 |  if_ne	neg	result1, #1
28a2c     00 FA 05 A6 |  if_e	mov	result1, #0
28a30                 | _fatfs_cc__set_dos_error_0864_ret
28a30     2D 00 64 FD | 	ret
28a34                 | 
28a34                 | _fatfs_cc_v_creat
28a34     04 4A 05 F6 | 	mov	COUNT_, #4
28a38     A8 00 A0 FD | 	call	#pushregs_
28a3c     09 1F 02 F6 | 	mov	local01, arg01
28a40     0A 21 02 F6 | 	mov	local02, arg02
28a44     03 00 00 FF 
28a48     3C 12 06 F6 | 	mov	arg01, ##1596
28a4c                 | '     return _gc_alloc(size);
28a4c     10 14 06 F6 | 	mov	arg02, #16
28a50     34 60 BF FD | 	call	#__system___gc_doalloc
28a54     FD 22 0A F6 | 	mov	local03, result1 wz
28a58                 | '       return _seterror( 7 );
28a58     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
28a5c     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
28a60     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
28a64     01 FA 65 A6 |  if_e	neg	result1, #1
28a68     58 00 90 AD |  if_e	jmp	#LR__4121
28a6c     11 13 02 F6 | 	mov	arg01, local03
28a70     00 14 06 F6 | 	mov	arg02, #0
28a74     03 00 00 FF 
28a78     3C 16 06 F6 | 	mov	arg03, ##1596
28a7c     98 00 A0 FD | 	call	#\builtin_bytefill_
28a80     02 00 00 FF 
28a84     14 22 06 F1 | 	add	local03, ##1044
28a88     11 13 02 F6 | 	mov	arg01, local03
28a8c     02 00 00 FF 
28a90     14 22 86 F1 | 	sub	local03, ##1044
28a94     10 15 02 F6 | 	mov	arg02, local02
28a98     07 16 06 F6 | 	mov	arg03, #7
28a9c     B4 CC BF FD | 	call	#_fatfs_cc_f_open
28aa0     FD 24 0A F6 | 	mov	local04, result1 wz
28aa4     14 00 90 AD |  if_e	jmp	#LR__4120
28aa8     11 13 02 F6 | 	mov	arg01, local03
28aac                 | '     return _gc_free(ptr);
28aac     E4 60 BF FD | 	call	#__system___gc_free
28ab0                 | '     free(f);
28ab0                 | '     return _set_dos_error(r);
28ab0     12 13 02 F6 | 	mov	arg01, local04
28ab4     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0864
28ab8     08 00 90 FD | 	jmp	#LR__4121
28abc                 | LR__4120
28abc     0F 23 62 FC | 	wrlong	local03, local01
28ac0                 | '   }
28ac0                 | '   fil->vfsdata = f;
28ac0                 | '   return 0;
28ac0     00 FA 05 F6 | 	mov	result1, #0
28ac4                 | LR__4121
28ac4     A7 F0 03 F6 | 	mov	ptra, fp
28ac8     B2 00 A0 FD | 	call	#popregs_
28acc                 | _fatfs_cc_v_creat_ret
28acc     2D 00 64 FD | 	ret
28ad0                 | 
28ad0                 | _fatfs_cc_v_close
28ad0     02 4A 05 F6 | 	mov	COUNT_, #2
28ad4     A8 00 A0 FD | 	call	#pushregs_
28ad8     09 1F 02 FB | 	rdlong	local01, arg01
28adc     02 00 00 FF 
28ae0     14 1E 06 F1 | 	add	local01, ##1044
28ae4     0F 13 02 F6 | 	mov	arg01, local01
28ae8     02 00 00 FF 
28aec     14 1E 86 F1 | 	sub	local01, ##1044
28af0     DC E3 BF FD | 	call	#_fatfs_cc_f_close
28af4     FD 20 02 F6 | 	mov	local02, result1
28af8     0F 13 02 F6 | 	mov	arg01, local01
28afc                 | '     return _gc_free(ptr);
28afc     94 60 BF FD | 	call	#__system___gc_free
28b00                 | '     FAT_FIL *f = fil->vfsdata;
28b00                 | '     r=f_close(&f->fil);
28b00                 | '     free(f);
28b00                 | '     return _set_dos_error(r);
28b00     10 13 02 F6 | 	mov	arg01, local02
28b04     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0864
28b08     A7 F0 03 F6 | 	mov	ptra, fp
28b0c     B2 00 A0 FD | 	call	#popregs_
28b10                 | _fatfs_cc_v_close_ret
28b10     2D 00 64 FD | 	ret
28b14                 | 
28b14                 | _fatfs_cc_v_opendir
28b14     04 4A 05 F6 | 	mov	COUNT_, #4
28b18     A8 00 A0 FD | 	call	#pushregs_
28b1c     09 1F 02 F6 | 	mov	local01, arg01
28b20     0A 21 02 F6 | 	mov	local02, arg02
28b24     30 12 06 F6 | 	mov	arg01, #48
28b28                 | '     return _gc_alloc(size);
28b28     10 14 06 F6 | 	mov	arg02, #16
28b2c     58 5F BF FD | 	call	#__system___gc_doalloc
28b30     FD 22 0A F6 | 	mov	local03, result1 wz
28b34                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
28b34                 | '       return _seterror( 7 );
28b34     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
28b38     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
28b3c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
28b40     01 FA 65 A6 |  if_e	neg	result1, #1
28b44     34 00 90 AD |  if_e	jmp	#LR__4131
28b48     10 15 02 F6 | 	mov	arg02, local02
28b4c     11 13 02 F6 | 	mov	arg01, local03
28b50     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
28b54     FD 24 0A F6 | 	mov	local04, result1 wz
28b58     14 00 90 AD |  if_e	jmp	#LR__4130
28b5c     11 13 02 F6 | 	mov	arg01, local03
28b60                 | '     return _gc_free(ptr);
28b60     30 60 BF FD | 	call	#__system___gc_free
28b64                 | '         free(f);
28b64                 | '         return _set_dos_error(r);
28b64     12 13 02 F6 | 	mov	arg01, local04
28b68     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0864
28b6c     0C 00 90 FD | 	jmp	#LR__4131
28b70                 | LR__4130
28b70     04 1E 06 F1 | 	add	local01, #4
28b74     0F 23 62 FC | 	wrlong	local03, local01
28b78                 | '     }
28b78                 | '     dir->vfsdata = f;
28b78                 | '     return 0;
28b78     00 FA 05 F6 | 	mov	result1, #0
28b7c                 | LR__4131
28b7c     A7 F0 03 F6 | 	mov	ptra, fp
28b80     B2 00 A0 FD | 	call	#popregs_
28b84                 | _fatfs_cc_v_opendir_ret
28b84     2D 00 64 FD | 	ret
28b88                 | 
28b88                 | _fatfs_cc_v_closedir
28b88     02 4A 05 F6 | 	mov	COUNT_, #2
28b8c     A8 00 A0 FD | 	call	#pushregs_
28b90     04 12 06 F1 | 	add	arg01, #4
28b94     09 1F 02 FB | 	rdlong	local01, arg01
28b98     0F 13 02 F6 | 	mov	arg01, local01
28b9c     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
28ba0     FD 20 02 F6 | 	mov	local02, result1
28ba4     0F 13 02 F6 | 	mov	arg01, local01
28ba8                 | '     return _gc_free(ptr);
28ba8     E8 5F BF FD | 	call	#__system___gc_free
28bac     00 20 0E F2 | 	cmp	local02, #0 wz
28bb0     10 13 02 56 |  if_ne	mov	arg01, local02
28bb4     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0864
28bb8                 | '     return r;
28bb8     10 FB 01 F6 | 	mov	result1, local02
28bbc     A7 F0 03 F6 | 	mov	ptra, fp
28bc0     B2 00 A0 FD | 	call	#popregs_
28bc4                 | _fatfs_cc_v_closedir_ret
28bc4     2D 00 64 FD | 	ret
28bc8                 | 
28bc8                 | _fatfs_cc_v_readdir
28bc8     01 4A 05 F6 | 	mov	COUNT_, #1
28bcc     A8 00 A0 FD | 	call	#pushregs_
28bd0     2C F1 07 F1 | 	add	ptra, #300
28bd4     04 4E 05 F1 | 	add	fp, #4
28bd8     A7 12 62 FC | 	wrlong	arg01, fp
28bdc     04 4E 05 F1 | 	add	fp, #4
28be0     A7 14 62 FC | 	wrlong	arg02, fp
28be4     04 4E 85 F1 | 	sub	fp, #4
28be8     A7 16 02 FB | 	rdlong	arg03, fp
28bec     04 16 06 F1 | 	add	arg03, #4
28bf0     0B 13 02 FB | 	rdlong	arg01, arg03
28bf4     08 4E 05 F1 | 	add	fp, #8
28bf8     A7 14 02 F6 | 	mov	arg02, fp
28bfc     0C 4E 85 F1 | 	sub	fp, #12
28c00     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
28c04     28 4F 05 F1 | 	add	fp, #296
28c08     A7 FA 61 FC | 	wrlong	result1, fp
28c0c     28 4F 85 F1 | 	sub	fp, #296
28c10     00 FA 0D F2 | 	cmp	result1, #0 wz
28c14     14 00 90 AD |  if_e	jmp	#LR__4140
28c18                 | '         return _set_dos_error(r);
28c18     28 4F 05 F1 | 	add	fp, #296
28c1c     A7 12 02 FB | 	rdlong	arg01, fp
28c20     28 4F 85 F1 | 	sub	fp, #296
28c24     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0864
28c28     C4 00 90 FD | 	jmp	#LR__4143
28c2c                 | LR__4140
28c2c     28 4E 05 F1 | 	add	fp, #40
28c30     A7 16 CA FA | 	rdbyte	arg03, fp wz
28c34     28 4E 85 F1 | 	sub	fp, #40
28c38                 | '         return -1;
28c38     01 FA 65 A6 |  if_e	neg	result1, #1
28c3c     B0 00 90 AD |  if_e	jmp	#LR__4143
28c40     08 4E 05 F1 | 	add	fp, #8
28c44     A7 12 02 FB | 	rdlong	arg01, fp
28c48     20 4E 05 F1 | 	add	fp, #32
28c4c     A7 14 02 F6 | 	mov	arg02, fp
28c50     28 4E 85 F1 | 	sub	fp, #40
28c54     3F 16 06 F6 | 	mov	arg03, #63
28c58     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
28c5c     08 4E 05 F1 | 	add	fp, #8
28c60     A7 16 02 FB | 	rdlong	arg03, fp
28c64     3F 16 06 F1 | 	add	arg03, #63
28c68     0B 01 48 FC | 	wrbyte	#0, arg03
28c6c     0C 4E 05 F1 | 	add	fp, #12
28c70     A7 16 C2 FA | 	rdbyte	arg03, fp
28c74     14 4E 85 F1 | 	sub	fp, #20
28c78     10 16 CE F7 | 	test	arg03, #16 wz
28c7c     18 00 90 AD |  if_e	jmp	#LR__4141
28c80     08 4E 05 F1 | 	add	fp, #8
28c84     A7 16 02 FB | 	rdlong	arg03, fp
28c88     08 4E 85 F1 | 	sub	fp, #8
28c8c     50 16 06 F1 | 	add	arg03, #80
28c90     0B 03 48 FC | 	wrbyte	#1, arg03
28c94     14 00 90 FD | 	jmp	#LR__4142
28c98                 | LR__4141
28c98     08 4E 05 F1 | 	add	fp, #8
28c9c     A7 16 02 FB | 	rdlong	arg03, fp
28ca0     08 4E 85 F1 | 	sub	fp, #8
28ca4     50 16 06 F1 | 	add	arg03, #80
28ca8     0B 01 48 FC | 	wrbyte	#0, arg03
28cac                 | LR__4142
28cac     08 4E 05 F1 | 	add	fp, #8
28cb0     A7 16 02 FB | 	rdlong	arg03, fp
28cb4     04 4E 05 F1 | 	add	fp, #4
28cb8     A7 14 02 FB | 	rdlong	arg02, fp
28cbc     48 16 06 F1 | 	add	arg03, #72
28cc0     0B 15 62 FC | 	wrlong	arg02, arg03
28cc4     04 4E 85 F1 | 	sub	fp, #4
28cc8     A7 1E 02 FB | 	rdlong	local01, fp
28ccc     08 4E 05 F1 | 	add	fp, #8
28cd0     A7 12 E2 FA | 	rdword	arg01, fp
28cd4     02 4E 05 F1 | 	add	fp, #2
28cd8     A7 14 E2 FA | 	rdword	arg02, fp
28cdc     12 4E 85 F1 | 	sub	fp, #18
28ce0     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0862
28ce4     4C 1E 06 F1 | 	add	local01, #76
28ce8     0F FB 61 FC | 	wrlong	result1, local01
28cec                 | '         ent->d_type =  (0) ;
28cec                 | '     }
28cec                 | '     ent->d_size = finfo.fsize;
28cec                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
28cec                 | '     return 0;
28cec     00 FA 05 F6 | 	mov	result1, #0
28cf0                 | LR__4143
28cf0     A7 F0 03 F6 | 	mov	ptra, fp
28cf4     B2 00 A0 FD | 	call	#popregs_
28cf8                 | _fatfs_cc_v_readdir_ret
28cf8     2D 00 64 FD | 	ret
28cfc                 | 
28cfc                 | _fatfs_cc_v_stat
28cfc     03 4A 05 F6 | 	mov	COUNT_, #3
28d00     A8 00 A0 FD | 	call	#pushregs_
28d04     30 F1 07 F1 | 	add	ptra, #304
28d08     04 4E 05 F1 | 	add	fp, #4
28d0c     A7 12 62 FC | 	wrlong	arg01, fp
28d10     04 4E 05 F1 | 	add	fp, #4
28d14     A7 14 62 FC | 	wrlong	arg02, fp
28d18     08 4E 85 F1 | 	sub	fp, #8
28d1c     0A 13 02 F6 | 	mov	arg01, arg02
28d20     00 14 06 F6 | 	mov	arg02, #0
28d24     30 16 06 F6 | 	mov	arg03, #48
28d28     98 00 A0 FD | 	call	#\builtin_bytefill_
28d2c     04 4E 05 F1 | 	add	fp, #4
28d30     A7 FA 01 FB | 	rdlong	result1, fp
28d34     04 4E 85 F1 | 	sub	fp, #4
28d38     FD FA C9 FA | 	rdbyte	result1, result1 wz
28d3c     2C 00 90 AD |  if_e	jmp	#LR__4150
28d40     04 4E 05 F1 | 	add	fp, #4
28d44     A7 FA 01 FB | 	rdlong	result1, fp
28d48     04 4E 85 F1 | 	sub	fp, #4
28d4c     FD FA C1 FA | 	rdbyte	result1, result1
28d50     2E FA 0D F2 | 	cmp	result1, #46 wz
28d54     04 4E 05 A1 |  if_e	add	fp, #4
28d58     A7 1E 02 AB |  if_e	rdlong	local01, fp
28d5c     04 4E 85 A1 |  if_e	sub	fp, #4
28d60     01 1E 06 A1 |  if_e	add	local01, #1
28d64     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
28d68     18 00 90 5D |  if_ne	jmp	#LR__4151
28d6c                 | LR__4150
28d6c     18 4E 05 F1 | 	add	fp, #24
28d70     A7 20 48 FC | 	wrbyte	#16, fp
28d74     0C 4E 85 F1 | 	sub	fp, #12
28d78     A7 00 68 FC | 	wrlong	#0, fp
28d7c     0C 4E 85 F1 | 	sub	fp, #12
28d80     24 00 90 FD | 	jmp	#LR__4152
28d84                 | LR__4151
28d84     04 4E 05 F1 | 	add	fp, #4
28d88     A7 12 02 FB | 	rdlong	arg01, fp
28d8c     0C 4E 05 F1 | 	add	fp, #12
28d90     A7 14 02 F6 | 	mov	arg02, fp
28d94     10 4E 85 F1 | 	sub	fp, #16
28d98     AC EB BF FD | 	call	#_fatfs_cc_f_stat
28d9c     0C 4E 05 F1 | 	add	fp, #12
28da0     A7 FA 61 FC | 	wrlong	result1, fp
28da4     0C 4E 85 F1 | 	sub	fp, #12
28da8                 | LR__4152
28da8     0C 4E 05 F1 | 	add	fp, #12
28dac     A7 20 0A FB | 	rdlong	local02, fp wz
28db0     0C 4E 85 F1 | 	sub	fp, #12
28db4     14 00 90 AD |  if_e	jmp	#LR__4153
28db8                 | '         return _set_dos_error(r);
28db8     0C 4E 05 F1 | 	add	fp, #12
28dbc     A7 12 02 FB | 	rdlong	arg01, fp
28dc0     0C 4E 85 F1 | 	sub	fp, #12
28dc4     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0864
28dc8     14 01 90 FD | 	jmp	#LR__4154
28dcc                 | LR__4153
28dcc     2C 4F 05 F1 | 	add	fp, #300
28dd0     A7 48 6A FC | 	wrlong	#292, fp
28dd4     14 4F 85 F1 | 	sub	fp, #276
28dd8     A7 22 C2 FA | 	rdbyte	local03, fp
28ddc     18 4E 85 F1 | 	sub	fp, #24
28de0     01 22 CE F7 | 	test	local03, #1 wz
28de4     2C 4F 05 A1 |  if_e	add	fp, #300
28de8     A7 22 02 AB |  if_e	rdlong	local03, fp
28dec     92 22 46 A5 |  if_e	or	local03, #146
28df0     A7 22 62 AC |  if_e	wrlong	local03, fp
28df4     2C 4F 85 A1 |  if_e	sub	fp, #300
28df8     18 4E 05 F1 | 	add	fp, #24
28dfc     A7 22 C2 FA | 	rdbyte	local03, fp
28e00     18 4E 85 F1 | 	sub	fp, #24
28e04     10 22 CE F7 | 	test	local03, #16 wz
28e08     2C 4F 05 51 |  if_ne	add	fp, #300
28e0c     A7 22 02 5B |  if_ne	rdlong	local03, fp
28e10     08 00 00 5F 
28e14     49 22 46 55 |  if_ne	or	local03, ##4169
28e18     A7 22 62 5C |  if_ne	wrlong	local03, fp
28e1c     2C 4F 85 51 |  if_ne	sub	fp, #300
28e20     08 4E 05 F1 | 	add	fp, #8
28e24     A7 22 02 FB | 	rdlong	local03, fp
28e28     24 4F 05 F1 | 	add	fp, #292
28e2c     A7 20 02 FB | 	rdlong	local02, fp
28e30     08 22 06 F1 | 	add	local03, #8
28e34     11 21 62 FC | 	wrlong	local02, local03
28e38     24 4F 85 F1 | 	sub	fp, #292
28e3c     A7 22 02 FB | 	rdlong	local03, fp
28e40     0C 22 06 F1 | 	add	local03, #12
28e44     11 03 68 FC | 	wrlong	#1, local03
28e48     A7 22 02 FB | 	rdlong	local03, fp
28e4c     08 4E 05 F1 | 	add	fp, #8
28e50     A7 20 02 FB | 	rdlong	local02, fp
28e54     18 22 06 F1 | 	add	local03, #24
28e58     11 21 62 FC | 	wrlong	local02, local03
28e5c     08 4E 85 F1 | 	sub	fp, #8
28e60     A7 22 02 FB | 	rdlong	local03, fp
28e64     1C 22 06 F1 | 	add	local03, #28
28e68     01 00 80 FF 
28e6c     11 01 68 FC | 	wrlong	##512, local03
28e70     A7 20 02 FB | 	rdlong	local02, fp
28e74     10 23 02 F6 | 	mov	local03, local02
28e78     18 20 06 F1 | 	add	local02, #24
28e7c     10 21 02 FB | 	rdlong	local02, local02
28e80     FF 21 06 F1 | 	add	local02, #511
28e84     10 21 52 F6 | 	abs	local02, local02 wc
28e88     09 20 46 F0 | 	shr	local02, #9
28e8c     10 21 82 F6 | 	negc	local02, local02
28e90     20 22 06 F1 | 	add	local03, #32
28e94     11 21 62 FC | 	wrlong	local02, local03
28e98     A7 20 02 FB | 	rdlong	local02, fp
28e9c     10 23 02 F6 | 	mov	local03, local02
28ea0     10 1F 02 F6 | 	mov	local01, local02
28ea4     0C 4E 05 F1 | 	add	fp, #12
28ea8     A7 12 E2 FA | 	rdword	arg01, fp
28eac     02 4E 05 F1 | 	add	fp, #2
28eb0     A7 14 E2 FA | 	rdword	arg02, fp
28eb4     16 4E 85 F1 | 	sub	fp, #22
28eb8     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0862
28ebc     2C 1E 06 F1 | 	add	local01, #44
28ec0     0F FB 61 FC | 	wrlong	result1, local01
28ec4     28 20 06 F1 | 	add	local02, #40
28ec8     10 FB 61 FC | 	wrlong	result1, local02
28ecc     24 22 06 F1 | 	add	local03, #36
28ed0     11 FB 61 FC | 	wrlong	result1, local03
28ed4                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
28ed4                 | '     }
28ed4                 | '     buf->st_mode = mode;
28ed4                 | '     buf->st_nlink = 1;
28ed4                 | '     buf->st_size = finfo.fsize;
28ed4                 | '     buf->st_blksize = 512;
28ed4                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
28ed4                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
28ed4                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
28ed4                 | '     return r;
28ed4     0C 4E 05 F1 | 	add	fp, #12
28ed8     A7 FA 01 FB | 	rdlong	result1, fp
28edc     0C 4E 85 F1 | 	sub	fp, #12
28ee0                 | LR__4154
28ee0     A7 F0 03 F6 | 	mov	ptra, fp
28ee4     B2 00 A0 FD | 	call	#popregs_
28ee8                 | _fatfs_cc_v_stat_ret
28ee8     2D 00 64 FD | 	ret
28eec                 | 
28eec                 | _fatfs_cc_v_read
28eec     00 4A 05 F6 | 	mov	COUNT_, #0
28ef0     A8 00 A0 FD | 	call	#pushregs_
28ef4     1C F0 07 F1 | 	add	ptra, #28
28ef8     04 4E 05 F1 | 	add	fp, #4
28efc     A7 12 62 FC | 	wrlong	arg01, fp
28f00     04 4E 05 F1 | 	add	fp, #4
28f04     A7 14 62 FC | 	wrlong	arg02, fp
28f08     04 4E 05 F1 | 	add	fp, #4
28f0c     A7 16 62 FC | 	wrlong	arg03, fp
28f10     08 4E 85 F1 | 	sub	fp, #8
28f14     A7 12 02 FB | 	rdlong	arg01, fp
28f18     09 13 0A FB | 	rdlong	arg01, arg01 wz
28f1c     0C 4E 05 F1 | 	add	fp, #12
28f20     A7 12 62 FC | 	wrlong	arg01, fp
28f24     10 4E 85 F1 | 	sub	fp, #16
28f28                 | '         return _seterror( 5 );
28f28     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
28f2c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
28f30     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
28f34     01 FA 65 A6 |  if_e	neg	result1, #1
28f38     B8 00 90 AD |  if_e	jmp	#LR__4162
28f3c     10 4E 05 F1 | 	add	fp, #16
28f40     A7 12 02 FB | 	rdlong	arg01, fp
28f44     02 00 00 FF 
28f48     14 12 06 F1 | 	add	arg01, ##1044
28f4c     08 4E 85 F1 | 	sub	fp, #8
28f50     A7 14 02 FB | 	rdlong	arg02, fp
28f54     04 4E 05 F1 | 	add	fp, #4
28f58     A7 16 02 FB | 	rdlong	arg03, fp
28f5c     0C 4E 05 F1 | 	add	fp, #12
28f60     A7 18 02 F6 | 	mov	arg04, fp
28f64     18 4E 85 F1 | 	sub	fp, #24
28f68     C4 CE BF FD | 	call	#_fatfs_cc_f_read
28f6c     14 4E 05 F1 | 	add	fp, #20
28f70     A7 FA 61 FC | 	wrlong	result1, fp
28f74     14 4E 85 F1 | 	sub	fp, #20
28f78     00 FA 0D F2 | 	cmp	result1, #0 wz
28f7c     34 00 90 AD |  if_e	jmp	#LR__4160
28f80     04 4E 05 F1 | 	add	fp, #4
28f84     A7 18 02 FB | 	rdlong	arg04, fp
28f88     0C 17 02 F6 | 	mov	arg03, arg04
28f8c     08 18 06 F1 | 	add	arg04, #8
28f90     0C 19 02 FB | 	rdlong	arg04, arg04
28f94     20 18 46 F5 | 	or	arg04, #32
28f98     08 16 06 F1 | 	add	arg03, #8
28f9c     0B 19 62 FC | 	wrlong	arg04, arg03
28fa0                 | '         fil->state |=  (0x20) ;
28fa0                 | '         return _set_dos_error(r);
28fa0     10 4E 05 F1 | 	add	fp, #16
28fa4     A7 12 02 FB | 	rdlong	arg01, fp
28fa8     14 4E 85 F1 | 	sub	fp, #20
28fac     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0864
28fb0     40 00 90 FD | 	jmp	#LR__4162
28fb4                 | LR__4160
28fb4     18 4E 05 F1 | 	add	fp, #24
28fb8     A7 FA 09 FB | 	rdlong	result1, fp wz
28fbc     18 4E 85 F1 | 	sub	fp, #24
28fc0     24 00 90 5D |  if_ne	jmp	#LR__4161
28fc4     04 4E 05 F1 | 	add	fp, #4
28fc8     A7 FA 01 FB | 	rdlong	result1, fp
28fcc     FD 18 02 F6 | 	mov	arg04, result1
28fd0     04 4E 85 F1 | 	sub	fp, #4
28fd4     08 FA 05 F1 | 	add	result1, #8
28fd8     FD FA 01 FB | 	rdlong	result1, result1
28fdc     10 FA 45 F5 | 	or	result1, #16
28fe0     08 18 06 F1 | 	add	arg04, #8
28fe4     0C FB 61 FC | 	wrlong	result1, arg04
28fe8                 | LR__4161
28fe8                 | '         fil->state |=  (0x10) ;
28fe8                 | '     }
28fe8                 | '     return x;
28fe8     18 4E 05 F1 | 	add	fp, #24
28fec     A7 FA 01 FB | 	rdlong	result1, fp
28ff0     18 4E 85 F1 | 	sub	fp, #24
28ff4                 | LR__4162
28ff4     A7 F0 03 F6 | 	mov	ptra, fp
28ff8     B2 00 A0 FD | 	call	#popregs_
28ffc                 | _fatfs_cc_v_read_ret
28ffc     2D 00 64 FD | 	ret
29000                 | 
29000                 | _fatfs_cc_v_write
29000     00 4A 05 F6 | 	mov	COUNT_, #0
29004     A8 00 A0 FD | 	call	#pushregs_
29008     1C F0 07 F1 | 	add	ptra, #28
2900c     04 4E 05 F1 | 	add	fp, #4
29010     A7 12 62 FC | 	wrlong	arg01, fp
29014     04 4E 05 F1 | 	add	fp, #4
29018     A7 14 62 FC | 	wrlong	arg02, fp
2901c     04 4E 05 F1 | 	add	fp, #4
29020     A7 16 62 FC | 	wrlong	arg03, fp
29024     08 4E 85 F1 | 	sub	fp, #8
29028     A7 12 02 FB | 	rdlong	arg01, fp
2902c     09 13 0A FB | 	rdlong	arg01, arg01 wz
29030     0C 4E 05 F1 | 	add	fp, #12
29034     A7 12 62 FC | 	wrlong	arg01, fp
29038     10 4E 85 F1 | 	sub	fp, #16
2903c                 | '         return _seterror( 5 );
2903c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
29040     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
29044     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
29048     01 FA 65 A6 |  if_e	neg	result1, #1
2904c     84 00 90 AD |  if_e	jmp	#LR__4171
29050     10 4E 05 F1 | 	add	fp, #16
29054     A7 12 02 FB | 	rdlong	arg01, fp
29058     02 00 00 FF 
2905c     14 12 06 F1 | 	add	arg01, ##1044
29060     08 4E 85 F1 | 	sub	fp, #8
29064     A7 14 02 FB | 	rdlong	arg02, fp
29068     04 4E 05 F1 | 	add	fp, #4
2906c     A7 16 02 FB | 	rdlong	arg03, fp
29070     0C 4E 05 F1 | 	add	fp, #12
29074     A7 18 02 F6 | 	mov	arg04, fp
29078     18 4E 85 F1 | 	sub	fp, #24
2907c     4C D4 BF FD | 	call	#_fatfs_cc_f_write
29080     14 4E 05 F1 | 	add	fp, #20
29084     A7 FA 61 FC | 	wrlong	result1, fp
29088     14 4E 85 F1 | 	sub	fp, #20
2908c     00 FA 0D F2 | 	cmp	result1, #0 wz
29090     34 00 90 AD |  if_e	jmp	#LR__4170
29094     04 4E 05 F1 | 	add	fp, #4
29098     A7 18 02 FB | 	rdlong	arg04, fp
2909c     0C 17 02 F6 | 	mov	arg03, arg04
290a0     08 18 06 F1 | 	add	arg04, #8
290a4     0C 19 02 FB | 	rdlong	arg04, arg04
290a8     20 18 46 F5 | 	or	arg04, #32
290ac     08 16 06 F1 | 	add	arg03, #8
290b0     0B 19 62 FC | 	wrlong	arg04, arg03
290b4                 | '         fil->state |=  (0x20) ;
290b4                 | '         return _set_dos_error(r);
290b4     10 4E 05 F1 | 	add	fp, #16
290b8     A7 12 02 FB | 	rdlong	arg01, fp
290bc     14 4E 85 F1 | 	sub	fp, #20
290c0     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0864
290c4     0C 00 90 FD | 	jmp	#LR__4171
290c8                 | LR__4170
290c8                 | '     }
290c8                 | '     return x;
290c8     18 4E 05 F1 | 	add	fp, #24
290cc     A7 FA 01 FB | 	rdlong	result1, fp
290d0     18 4E 85 F1 | 	sub	fp, #24
290d4                 | LR__4171
290d4     A7 F0 03 F6 | 	mov	ptra, fp
290d8     B2 00 A0 FD | 	call	#popregs_
290dc                 | _fatfs_cc_v_write_ret
290dc     2D 00 64 FD | 	ret
290e0                 | 
290e0                 | _fatfs_cc_v_lseek
290e0     04 4A 05 F6 | 	mov	COUNT_, #4
290e4     A8 00 A0 FD | 	call	#pushregs_
290e8     0A 1F 02 F6 | 	mov	local01, arg02
290ec     0B 21 02 F6 | 	mov	local02, arg03
290f0     09 23 02 FB | 	rdlong	local03, arg01
290f4     02 00 00 FF 
290f8     14 22 0E F1 | 	add	local03, ##1044 wz
290fc                 | '         return _seterror( 5 );
290fc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
29100     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
29104     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
29108     01 FA 65 A6 |  if_e	neg	result1, #1
2910c     4C 00 90 AD |  if_e	jmp	#LR__4182
29110     00 20 0E F2 | 	cmp	local02, #0 wz
29114     24 00 90 AD |  if_e	jmp	#LR__4180
29118     01 20 0E F2 | 	cmp	local02, #1 wz
2911c     14 22 06 A1 |  if_e	add	local03, #20
29120     11 25 02 AB |  if_e	rdlong	local04, local03
29124     14 22 86 A1 |  if_e	sub	local03, #20
29128     12 1F 02 A1 |  if_e	add	local01, local04
2912c     0C 22 06 51 |  if_ne	add	local03, #12
29130     11 25 02 5B |  if_ne	rdlong	local04, local03
29134     0C 22 86 51 |  if_ne	sub	local03, #12
29138     12 1F 02 51 |  if_ne	add	local01, local04
2913c                 | LR__4180
2913c     0F 15 02 F6 | 	mov	arg02, local01
29140     11 13 02 F6 | 	mov	arg01, local03
29144     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
29148     FD 12 0A F6 | 	mov	arg01, result1 wz
2914c     08 00 90 AD |  if_e	jmp	#LR__4181
29150                 | '         return _set_dos_error(result);
29150     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0864
29154     04 00 90 FD | 	jmp	#LR__4182
29158                 | LR__4181
29158                 | '     }
29158                 | '     return offset;
29158     0F FB 01 F6 | 	mov	result1, local01
2915c                 | LR__4182
2915c     A7 F0 03 F6 | 	mov	ptra, fp
29160     B2 00 A0 FD | 	call	#popregs_
29164                 | _fatfs_cc_v_lseek_ret
29164     2D 00 64 FD | 	ret
29168                 | 
29168                 | _fatfs_cc_v_ioctl
29168                 | ' {
29168                 | '     return _seterror( 10 );
29168     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2916c     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
29170     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
29174     01 FA 65 F6 | 	neg	result1, #1
29178                 | _fatfs_cc_v_ioctl_ret
29178     2D 00 64 FD | 	ret
2917c                 | 
2917c                 | _fatfs_cc_v_mkdir
2917c     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
29180     FD 12 02 F6 | 	mov	arg01, result1
29184                 | ' 
29184                 | '     r = f_mkdir(name);
29184                 | '     return _set_dos_error(r);
29184     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0864
29188                 | _fatfs_cc_v_mkdir_ret
29188     2D 00 64 FD | 	ret
2918c                 | 
2918c                 | _fatfs_cc_v_remove
2918c     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
29190     FD 12 02 F6 | 	mov	arg01, result1
29194                 | ' 
29194                 | '     r = f_unlink(name);
29194                 | '     return _set_dos_error(r);
29194     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0864
29198                 | _fatfs_cc_v_remove_ret
29198     2D 00 64 FD | 	ret
2919c                 | 
2919c                 | _fatfs_cc_v_rmdir
2919c     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
291a0     FD 12 02 F6 | 	mov	arg01, result1
291a4                 | ' 
291a4                 | '     r = f_unlink(name);
291a4                 | '     return _set_dos_error(r);
291a4     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0864
291a8                 | _fatfs_cc_v_rmdir_ret
291a8     2D 00 64 FD | 	ret
291ac                 | 
291ac                 | _fatfs_cc_v_rename
291ac     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
291b0     FD 12 02 F6 | 	mov	arg01, result1
291b4                 | '     return _set_dos_error(r);
291b4     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0864
291b8                 | _fatfs_cc_v_rename_ret
291b8     2D 00 64 FD | 	ret
291bc                 | 
291bc                 | _fatfs_cc_v_open
291bc     07 4A 05 F6 | 	mov	COUNT_, #7
291c0     A8 00 A0 FD | 	call	#pushregs_
291c4     09 1F 02 F6 | 	mov	local01, arg01
291c8     0A 21 02 F6 | 	mov	local02, arg02
291cc     0B 23 02 F6 | 	mov	local03, arg03
291d0     03 00 00 FF 
291d4     3C 12 06 F6 | 	mov	arg01, ##1596
291d8                 | '     return _gc_alloc(size);
291d8     10 14 06 F6 | 	mov	arg02, #16
291dc     A8 58 BF FD | 	call	#__system___gc_doalloc
291e0     FD 24 0A F6 | 	mov	local04, result1 wz
291e4                 | '       return _seterror( 7 );
291e4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
291e8     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
291ec     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
291f0     01 FA 65 A6 |  if_e	neg	result1, #1
291f4     98 00 90 AD |  if_e	jmp	#LR__4196
291f8     12 13 02 F6 | 	mov	arg01, local04
291fc     00 14 06 F6 | 	mov	arg02, #0
29200     03 00 00 FF 
29204     3C 16 06 F6 | 	mov	arg03, ##1596
29208     98 00 A0 FD | 	call	#\builtin_bytefill_
2920c                 | '   switch (flags & 3) {
2920c     11 27 02 F6 | 	mov	local05, local03
29210     03 26 0E F5 | 	and	local05, #3 wz
29214     0C 00 90 AD |  if_e	jmp	#LR__4190
29218     01 26 0E F2 | 	cmp	local05, #1 wz
2921c     0C 00 90 AD |  if_e	jmp	#LR__4191
29220     10 00 90 FD | 	jmp	#LR__4192
29224                 | LR__4190
29224     01 28 06 F6 | 	mov	local06, #1
29228                 | '       fs_flags =  0x01 ;
29228                 | '       break;
29228     0C 00 90 FD | 	jmp	#LR__4193
2922c                 | LR__4191
2922c     02 28 06 F6 | 	mov	local06, #2
29230                 | '       fs_flags =  0x02 ;
29230                 | '       break;
29230     04 00 90 FD | 	jmp	#LR__4193
29234                 | LR__4192
29234     03 28 06 F6 | 	mov	local06, #3
29238                 | '       fs_flags =  0x01  |  0x02 ;
29238                 | '       break;
29238                 | LR__4193
29238     08 22 CE F7 | 	test	local03, #8 wz
2923c     18 28 46 55 |  if_ne	or	local06, #24
29240     08 00 90 5D |  if_ne	jmp	#LR__4194
29244     20 22 CE F7 | 	test	local03, #32 wz
29248     30 28 46 55 |  if_ne	or	local06, #48
2924c                 | LR__4194
2924c     02 00 00 FF 
29250     14 24 06 F1 | 	add	local04, ##1044
29254     12 13 02 F6 | 	mov	arg01, local04
29258     02 00 00 FF 
2925c     14 24 86 F1 | 	sub	local04, ##1044
29260     10 15 02 F6 | 	mov	arg02, local02
29264     14 17 02 F6 | 	mov	arg03, local06
29268     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
2926c     FD 2A 0A F6 | 	mov	local07, result1 wz
29270     14 00 90 AD |  if_e	jmp	#LR__4195
29274     12 13 02 F6 | 	mov	arg01, local04
29278                 | '     return _gc_free(ptr);
29278     18 59 BF FD | 	call	#__system___gc_free
2927c                 | '     free(f);
2927c                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2927c                 | '     return _set_dos_error(r);
2927c     15 13 02 F6 | 	mov	arg01, local07
29280     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0864
29284     08 00 90 FD | 	jmp	#LR__4196
29288                 | LR__4195
29288     0F 25 62 FC | 	wrlong	local04, local01
2928c                 | '   }
2928c                 | '   fil->vfsdata = f;
2928c                 | '   return 0;
2928c     00 FA 05 F6 | 	mov	result1, #0
29290                 | LR__4196
29290     A7 F0 03 F6 | 	mov	ptra, fp
29294     B2 00 A0 FD | 	call	#popregs_
29298                 | _fatfs_cc_v_open_ret
29298     2D 00 64 FD | 	ret
2929c                 | 
2929c                 | _fatfs_cc_v_flush
2929c     09 13 02 FB | 	rdlong	arg01, arg01
292a0     02 00 00 FF 
292a4     14 12 0E F1 | 	add	arg01, ##1044 wz
292a8                 | '         return _seterror( 5 );
292a8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
292ac     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
292b0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
292b4     01 FA 65 A6 |  if_e	neg	result1, #1
292b8     0C 00 90 AD |  if_e	jmp	#LR__4200
292bc     00 DA BF FD | 	call	#_fatfs_cc_f_sync
292c0     FD 12 02 F6 | 	mov	arg01, result1
292c4                 | '     }
292c4                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
292c4                 | '     result = f_sync(f);
292c4                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
292c4                 | '     return _set_dos_error(result);
292c4     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0864
292c8                 | LR__4200
292c8                 | _fatfs_cc_v_flush_ret
292c8     2D 00 64 FD | 	ret
292cc                 | 
292cc                 | _fatfs_cc_v_init
292cc                 | ' {
292cc                 | '     return 0;
292cc     00 FA 05 F6 | 	mov	result1, #0
292d0                 | _fatfs_cc_v_init_ret
292d0     2D 00 64 FD | 	ret
292d4                 | 
292d4                 | _fatfs_cc_v_deinit
292d4     51 01 00 FF 
292d8     38 14 06 F6 | 	mov	arg02, ##@LR__4396
292dc     00 12 06 F6 | 	mov	arg01, #0
292e0     00 16 06 F6 | 	mov	arg03, #0
292e4     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
292e8     01 00 00 FF 
292ec     08 E4 05 F1 | 	add	objptr, ##520
292f0     F2 12 02 FB | 	rdlong	arg01, objptr
292f4     04 E4 05 F1 | 	add	objptr, #4
292f8     F2 14 02 FB | 	rdlong	arg02, objptr
292fc     01 00 00 FF 
29300     0C E4 85 F1 | 	sub	objptr, ##524
29304     58 40 BF FD | 	call	#__system___freepins
29308                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
29308                 | '     _freepins(f_pinmask);
29308                 | '     return 0;
29308     00 FA 05 F6 | 	mov	result1, #0
2930c                 | _fatfs_cc_v_deinit_ret
2930c     2D 00 64 FD | 	ret
29310                 | 
29310                 | _fatfs_cc_get_vfs
29310     01 4A 05 F6 | 	mov	COUNT_, #1
29314     A8 00 A0 FD | 	call	#pushregs_
29318     09 1F 02 F6 | 	mov	local01, arg01
2931c     50 12 06 F6 | 	mov	arg01, #80
29320     34 57 BF FD | 	call	#__system___gc_alloc_managed
29324     FD 12 02 F6 | 	mov	arg01, result1
29328     F2 FA 01 F6 | 	mov	result1, objptr
2932c     00 C8 03 FF 
29330     00 FA 45 F5 | 	or	result1, ##126877696
29334     09 FB 61 FC | 	wrlong	result1, arg01
29338     F2 FA 01 F6 | 	mov	result1, objptr
2933c     00 D0 03 FF 
29340     00 FA 45 F5 | 	or	result1, ##127926272
29344     04 12 06 F1 | 	add	arg01, #4
29348     09 FB 61 FC | 	wrlong	result1, arg01
2934c     F2 FA 01 F6 | 	mov	result1, objptr
29350     00 D8 03 FF 
29354     00 FA 45 F5 | 	or	result1, ##128974848
29358     04 12 06 F1 | 	add	arg01, #4
2935c     09 FB 61 FC | 	wrlong	result1, arg01
29360     F2 FA 01 F6 | 	mov	result1, objptr
29364     96 FA 25 F4 | 	bith	result1, #150
29368     04 12 06 F1 | 	add	arg01, #4
2936c     09 FB 61 FC | 	wrlong	result1, arg01
29370     F2 FA 01 F6 | 	mov	result1, objptr
29374     00 E8 03 FF 
29378     00 FA 45 F5 | 	or	result1, ##131072000
2937c     04 12 06 F1 | 	add	arg01, #4
29380     09 FB 61 FC | 	wrlong	result1, arg01
29384     04 12 06 F1 | 	add	arg01, #4
29388     09 01 68 FC | 	wrlong	#0, arg01
2938c     04 12 06 F1 | 	add	arg01, #4
29390     09 1F 62 FC | 	wrlong	local01, arg01
29394     04 12 06 F1 | 	add	arg01, #4
29398     09 01 68 FC | 	wrlong	#0, arg01
2939c     F2 FA 01 F6 | 	mov	result1, objptr
293a0     B5 FA 25 F4 | 	bith	result1, #181
293a4     04 12 06 F1 | 	add	arg01, #4
293a8     09 FB 61 FC | 	wrlong	result1, arg01
293ac     F2 FA 01 F6 | 	mov	result1, objptr
293b0     D4 FA 25 F4 | 	bith	result1, #212
293b4     04 12 06 F1 | 	add	arg01, #4
293b8     09 FB 61 FC | 	wrlong	result1, arg01
293bc     F2 FA 01 F6 | 	mov	result1, objptr
293c0     1B FA 25 F4 | 	bith	result1, #27
293c4     04 12 06 F1 | 	add	arg01, #4
293c8     09 FB 61 FC | 	wrlong	result1, arg01
293cc     F2 FA 01 F6 | 	mov	result1, objptr
293d0     00 08 04 FF 
293d4     00 FA 45 F5 | 	or	result1, ##135266304
293d8     04 12 06 F1 | 	add	arg01, #4
293dc     09 FB 61 FC | 	wrlong	result1, arg01
293e0     F2 FA 01 F6 | 	mov	result1, objptr
293e4     00 10 04 FF 
293e8     00 FA 45 F5 | 	or	result1, ##136314880
293ec     04 12 06 F1 | 	add	arg01, #4
293f0     09 FB 61 FC | 	wrlong	result1, arg01
293f4     F2 FA 01 F6 | 	mov	result1, objptr
293f8     00 18 04 FF 
293fc     00 FA 45 F5 | 	or	result1, ##137363456
29400     04 12 06 F1 | 	add	arg01, #4
29404     09 FB 61 FC | 	wrlong	result1, arg01
29408     F2 FA 01 F6 | 	mov	result1, objptr
2940c     00 20 04 FF 
29410     00 FA 45 F5 | 	or	result1, ##138412032
29414     04 12 06 F1 | 	add	arg01, #4
29418     09 FB 61 FC | 	wrlong	result1, arg01
2941c     F2 FA 01 F6 | 	mov	result1, objptr
29420     00 28 04 FF 
29424     00 FA 45 F5 | 	or	result1, ##139460608
29428     04 12 06 F1 | 	add	arg01, #4
2942c     09 FB 61 FC | 	wrlong	result1, arg01
29430     F2 FA 01 F6 | 	mov	result1, objptr
29434     00 30 04 FF 
29438     00 FA 45 F5 | 	or	result1, ##140509184
2943c     04 12 06 F1 | 	add	arg01, #4
29440     09 FB 61 FC | 	wrlong	result1, arg01
29444     F2 FA 01 F6 | 	mov	result1, objptr
29448     00 38 04 FF 
2944c     00 FA 45 F5 | 	or	result1, ##141557760
29450     04 12 06 F1 | 	add	arg01, #4
29454     09 FB 61 FC | 	wrlong	result1, arg01
29458     F2 FA 01 F6 | 	mov	result1, objptr
2945c     00 40 04 FF 
29460     00 FA 45 F5 | 	or	result1, ##142606336
29464     04 12 06 F1 | 	add	arg01, #4
29468     09 FB 61 FC | 	wrlong	result1, arg01
2946c     F2 FA 01 F6 | 	mov	result1, objptr
29470     00 48 04 FF 
29474     00 FA 45 F5 | 	or	result1, ##143654912
29478     04 12 06 F1 | 	add	arg01, #4
2947c     09 FB 61 FC | 	wrlong	result1, arg01
29480     4C 12 86 F1 | 	sub	arg01, #76
29484                 | ' 
29484                 | '     v->close = &v_close;
29484                 | '     v->read = &v_read;
29484                 | '     v->write = &v_write;
29484                 | '     v->lseek = &v_lseek;
29484                 | '     v->ioctl = &v_ioctl;
29484                 | '     v->flush = 0;
29484                 | '     v->vfs_data = ptr;
29484                 | '     v->reserved = 0;
29484                 | ' 
29484                 | '     v->open = &v_open;
29484                 | '     v->creat = &v_creat;
29484                 | '     v->opendir = &v_opendir;
29484                 | '     v->closedir = &v_closedir;
29484                 | '     v->readdir = &v_readdir;
29484                 | '     v->stat = &v_stat;
29484                 | ' 
29484                 | '     v->mkdir = &v_mkdir;
29484                 | '     v->rmdir = &v_rmdir;
29484                 | ' 
29484                 | '     v->remove = &v_remove;
29484                 | '     v->rename = &v_rename;
29484                 | ' 
29484                 | '     v->init = &v_init;
29484                 | '     v->deinit = &v_deinit;
29484                 | ' 
29484                 | '     return v;
29484     09 FB 01 F6 | 	mov	result1, arg01
29488     A7 F0 03 F6 | 	mov	ptra, fp
2948c     B2 00 A0 FD | 	call	#popregs_
29490                 | _fatfs_cc_get_vfs_ret
29490     2D 00 64 FD | 	ret
29494                 | 
29494                 | _fatfs_cc_xmit_mmc_1011
29494     01 00 00 FF 
29498     10 E4 05 F1 | 	add	objptr, ##528
2949c     F2 00 02 FB | 	rdlong	_var01, objptr
294a0     08 E4 05 F1 | 	add	objptr, #8
294a4     F2 02 02 FB | 	rdlong	_var02, objptr
294a8     01 00 00 FF 
294ac     18 E4 85 F1 | 	sub	objptr, ##536
294b0     40 02 62 FD | 	dirl	_var02
294b4     28 02 64 FD | 	setq	#1
294b8     09 05 02 FB | 	rdlong	_var03, arg01
294bc     69 04 62 FD | 	rev	_var03
294c0     1B 04 FE F9 | 	movbyts	_var03, #27
294c4     01 05 22 FC | 	wypin	_var03, _var02
294c8     0A 05 02 F6 | 	mov	_var03, arg02
294cc     02 14 4E F0 | 	shr	arg02, #2 wz
294d0     03 04 66 F0 | 	shl	_var03, #3
294d4     00 05 22 FC | 	wypin	_var03, _var01
294d8     41 02 62 FD | 	dirh	_var02
294dc     08 12 06 F1 | 	add	arg01, #8
294e0     69 06 62 FD | 	rev	_var04
294e4     1B 06 FE F9 | 	movbyts	_var04, #27
294e8                 | LR__4210
294e8     01 07 22 5C |  if_ne	wypin	_var04, _var02
294ec     09 07 02 5B |  if_ne	rdlong	_var04, arg01
294f0     04 12 06 51 |  if_ne	add	arg01, #4
294f4     69 06 62 5D |  if_ne	rev	_var04
294f8     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
294fc                 | LR__4211
294fc     40 02 72 5D |  if_ne	testp	_var02 wc
29500     F8 FF 9F 1D |  if_a	jmp	#LR__4211
29504     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4210
29508                 | LR__4212
29508     40 00 72 FD | 	testp	_var01 wc
2950c     F8 FF 9F 3D |  if_ae	jmp	#LR__4212
29510     40 02 62 FD | 	dirl	_var02
29514     FF FF FF FF 
29518     01 FF 2B FC | 	wypin	##-1, _var02
2951c     41 02 62 FD | 	dirh	_var02
29520                 | _fatfs_cc_xmit_mmc_1011_ret
29520     2D 00 64 FD | 	ret
29524                 | 
29524                 | _fatfs_cc_rcvr_mmc_1018
29524     01 00 00 FF 
29528     10 E4 05 F1 | 	add	objptr, ##528
2952c     F2 00 02 FB | 	rdlong	_var01, objptr
29530     0C E4 05 F1 | 	add	objptr, #12
29534     F2 02 02 FB | 	rdlong	_var02, objptr
29538     01 00 00 FF 
2953c     1C E4 85 F1 | 	sub	objptr, ##540
29540     01 03 08 FC | 	akpin	_var02
29544     0A 05 0A F6 | 	mov	_var03, arg02 wz
29548     02 04 4E F0 | 	shr	_var03, #2 wz
2954c     30 00 90 AD |  if_e	jmp	#LR__4222
29550     02 07 02 F6 | 	mov	_var04, _var03
29554     05 06 66 F0 | 	shl	_var04, #5
29558     00 07 22 FC | 	wypin	_var04, _var01
2955c     01 7F 18 FC | 	wxpin	#63, _var02
29560                 | LR__4220
29560                 | LR__4221
29560     40 02 72 FD | 	testp	_var02 wc
29564     F8 FF 9F 3D |  if_ae	jmp	#LR__4221
29568     01 07 8A FA | 	rdpin	_var04, _var02
2956c     69 06 62 FD | 	rev	_var04
29570     1B 06 FE F9 | 	movbyts	_var04, #27
29574     09 07 62 FC | 	wrlong	_var04, arg01
29578     04 12 06 F1 | 	add	arg01, #4
2957c     F8 05 6E FB | 	djnz	_var03, #LR__4220
29580                 | LR__4222
29580     03 14 0E F5 | 	and	arg02, #3 wz
29584     24 00 90 AD |  if_e	jmp	#LR__4225
29588     01 4F 18 FC | 	wxpin	#39, _var02
2958c                 | LR__4223
2958c     00 11 28 FC | 	wypin	#8, _var01
29590                 | LR__4224
29590     40 02 72 FD | 	testp	_var02 wc
29594     F8 FF 9F 3D |  if_ae	jmp	#LR__4224
29598     01 07 8A FA | 	rdpin	_var04, _var02
2959c     69 06 62 FD | 	rev	_var04
295a0     09 07 42 FC | 	wrbyte	_var04, arg01
295a4     01 12 06 F1 | 	add	arg01, #1
295a8     F8 15 6E FB | 	djnz	arg02, #LR__4223
295ac                 | LR__4225
295ac                 | _fatfs_cc_rcvr_mmc_1018_ret
295ac     2D 00 64 FD | 	ret
295b0                 | 
295b0                 | _fatfs_cc_wait_ready_1022
295b0     01 4A 05 F6 | 	mov	COUNT_, #1
295b4     A8 00 A0 FD | 	call	#pushregs_
295b8     10 F0 07 F1 | 	add	ptra, #16
295bc     1A FA 61 FD | 	getct	result1
295c0     08 4E 05 F1 | 	add	fp, #8
295c4     A7 FA 61 FC | 	wrlong	result1, fp
295c8     14 1E 06 FB | 	rdlong	local01, #20
295cc     01 1E 46 F0 | 	shr	local01, #1
295d0     04 4E 05 F1 | 	add	fp, #4
295d4     A7 1E 62 FC | 	wrlong	local01, fp
295d8     0C 4E 85 F1 | 	sub	fp, #12
295dc                 | ' {
295dc                 | ' 	BYTE d;
295dc                 | ' 	UINT tmr, tmout;
295dc                 | ' 
295dc                 | ' 	tmr = _cnt();
295dc                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
295dc                 | ' 	for(;;) {
295dc                 | LR__4230
295dc     04 4E 05 F1 | 	add	fp, #4
295e0     A7 12 02 F6 | 	mov	arg01, fp
295e4     04 4E 85 F1 | 	sub	fp, #4
295e8     01 14 06 F6 | 	mov	arg02, #1
295ec     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1018
295f0     04 4E 05 F1 | 	add	fp, #4
295f4     A7 1E C2 FA | 	rdbyte	local01, fp
295f8     04 4E 85 F1 | 	sub	fp, #4
295fc     FF 1E 0E F2 | 	cmp	local01, #255 wz
29600     01 FA 05 A6 |  if_e	mov	result1, #1
29604     28 00 90 AD |  if_e	jmp	#LR__4231
29608     1A FA 61 FD | 	getct	result1
2960c     08 4E 05 F1 | 	add	fp, #8
29610     A7 1E 02 FB | 	rdlong	local01, fp
29614     0F FB 81 F1 | 	sub	result1, local01
29618     04 4E 05 F1 | 	add	fp, #4
2961c     A7 1E 02 FB | 	rdlong	local01, fp
29620     0C 4E 85 F1 | 	sub	fp, #12
29624     0F FB 11 F2 | 	cmp	result1, local01 wc
29628     00 FA 05 36 |  if_ae	mov	result1, #0
2962c     AC FF 9F CD |  if_b	jmp	#LR__4230
29630                 | LR__4231
29630     A7 F0 03 F6 | 	mov	ptra, fp
29634     B2 00 A0 FD | 	call	#popregs_
29638                 | _fatfs_cc_wait_ready_1022_ret
29638     2D 00 64 FD | 	ret
2963c                 | 
2963c                 | _fatfs_cc_deselect_1028
2963c     00 4A 05 F6 | 	mov	COUNT_, #0
29640     A8 00 A0 FD | 	call	#pushregs_
29644     14 F0 07 F1 | 	add	ptra, #20
29648     01 00 00 FF 
2964c     14 E4 05 F1 | 	add	objptr, ##532
29650     F2 14 02 FB | 	rdlong	arg02, objptr
29654     04 4E 05 F1 | 	add	fp, #4
29658     A7 14 62 FC | 	wrlong	arg02, fp
2965c     04 E4 85 F1 | 	sub	objptr, #4
29660     F2 14 02 FB | 	rdlong	arg02, objptr
29664     04 4E 05 F1 | 	add	fp, #4
29668     A7 14 62 FC | 	wrlong	arg02, fp
2966c     08 E4 05 F1 | 	add	objptr, #8
29670     F2 14 02 FB | 	rdlong	arg02, objptr
29674     04 4E 05 F1 | 	add	fp, #4
29678     A7 14 62 FC | 	wrlong	arg02, fp
2967c     04 E4 05 F1 | 	add	objptr, #4
29680     F2 14 02 FB | 	rdlong	arg02, objptr
29684     01 00 00 FF 
29688     1C E4 85 F1 | 	sub	objptr, ##540
2968c     04 4E 05 F1 | 	add	fp, #4
29690     A7 14 62 FC | 	wrlong	arg02, fp
29694     0C 4E 85 F1 | 	sub	fp, #12
29698     A7 12 02 FB | 	rdlong	arg01, fp
2969c     04 4E 85 F1 | 	sub	fp, #4
296a0     59 12 62 FD | 	drvh	arg01
296a4     1F 20 64 FD | 	waitx	#16
296a8     A7 12 02 F6 | 	mov	arg01, fp
296ac     01 14 06 F6 | 	mov	arg02, #1
296b0     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1018
296b4     A7 F0 03 F6 | 	mov	ptra, fp
296b8     B2 00 A0 FD | 	call	#popregs_
296bc                 | _fatfs_cc_deselect_1028_ret
296bc     2D 00 64 FD | 	ret
296c0                 | 
296c0                 | _fatfs_cc_select_1032
296c0     00 4A 05 F6 | 	mov	COUNT_, #0
296c4     A8 00 A0 FD | 	call	#pushregs_
296c8     10 F0 07 F1 | 	add	ptra, #16
296cc     01 00 00 FF 
296d0     14 E4 05 F1 | 	add	objptr, ##532
296d4     F2 14 02 FB | 	rdlong	arg02, objptr
296d8     08 4E 05 F1 | 	add	fp, #8
296dc     A7 14 62 FC | 	wrlong	arg02, fp
296e0     08 E4 05 F1 | 	add	objptr, #8
296e4     F2 12 02 FB | 	rdlong	arg01, objptr
296e8     01 00 00 FF 
296ec     1C E4 85 F1 | 	sub	objptr, ##540
296f0     04 4E 05 F1 | 	add	fp, #4
296f4     A7 12 62 FC | 	wrlong	arg01, fp
296f8     50 12 62 FD | 	fltl	arg01
296fc     04 4E 85 F1 | 	sub	fp, #4
29700     A7 12 02 FB | 	rdlong	arg01, fp
29704     58 12 62 FD | 	drvl	arg01
29708     1F 20 64 FD | 	waitx	#16
2970c     04 4E 05 F1 | 	add	fp, #4
29710     A7 12 02 FB | 	rdlong	arg01, fp
29714     41 12 62 FD | 	dirh	arg01
29718     08 4E 85 F1 | 	sub	fp, #8
2971c     A7 12 02 F6 | 	mov	arg01, fp
29720     04 4E 85 F1 | 	sub	fp, #4
29724     01 14 06 F6 | 	mov	arg02, #1
29728     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1018
2972c     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1022
29730     00 FA 0D F2 | 	cmp	result1, #0 wz
29734     01 FA 05 56 |  if_ne	mov	result1, #1
29738     08 00 90 5D |  if_ne	jmp	#LR__4240
2973c     FC FE BF FD | 	call	#_fatfs_cc_deselect_1028
29740                 | ' 
29740                 | ' 	deselect();
29740                 | ' 	return 0;
29740     00 FA 05 F6 | 	mov	result1, #0
29744                 | LR__4240
29744     A7 F0 03 F6 | 	mov	ptra, fp
29748     B2 00 A0 FD | 	call	#popregs_
2974c                 | _fatfs_cc_select_1032_ret
2974c     2D 00 64 FD | 	ret
29750                 | 
29750                 | _fatfs_cc_rcvr_datablock_1036
29750     01 4A 05 F6 | 	mov	COUNT_, #1
29754     A8 00 A0 FD | 	call	#pushregs_
29758     18 F0 07 F1 | 	add	ptra, #24
2975c     04 4E 05 F1 | 	add	fp, #4
29760     A7 12 62 FC | 	wrlong	arg01, fp
29764     04 4E 05 F1 | 	add	fp, #4
29768     A7 14 62 FC | 	wrlong	arg02, fp
2976c     1A FA 61 FD | 	getct	result1
29770     08 4E 05 F1 | 	add	fp, #8
29774     A7 FA 61 FC | 	wrlong	result1, fp
29778     14 1E 06 FB | 	rdlong	local01, #20
2977c     03 1E 46 F0 | 	shr	local01, #3
29780     04 4E 05 F1 | 	add	fp, #4
29784     A7 1E 62 FC | 	wrlong	local01, fp
29788     14 4E 85 F1 | 	sub	fp, #20
2978c                 | ' 	BYTE *buff,
2978c                 | ' 	UINT btr
2978c                 | ' )
2978c                 | ' {
2978c                 | ' 	BYTE d[2];
2978c                 | ' 	UINT tmr, tmout;
2978c                 | ' 
2978c                 | ' 	tmr = _cnt();
2978c                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
2978c                 | ' 	for(;;) {
2978c                 | LR__4250
2978c     0C 4E 05 F1 | 	add	fp, #12
29790     A7 12 02 F6 | 	mov	arg01, fp
29794     0C 4E 85 F1 | 	sub	fp, #12
29798     01 14 06 F6 | 	mov	arg02, #1
2979c     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1018
297a0     0C 4E 05 F1 | 	add	fp, #12
297a4     A7 1E C2 FA | 	rdbyte	local01, fp
297a8     0C 4E 85 F1 | 	sub	fp, #12
297ac     FF 1E 0E F2 | 	cmp	local01, #255 wz
297b0     28 00 90 5D |  if_ne	jmp	#LR__4251
297b4     1A FA 61 FD | 	getct	result1
297b8     FD 1E 02 F6 | 	mov	local01, result1
297bc     10 4E 05 F1 | 	add	fp, #16
297c0     A7 14 02 FB | 	rdlong	arg02, fp
297c4     0A 1F 82 F1 | 	sub	local01, arg02
297c8     04 4E 05 F1 | 	add	fp, #4
297cc     A7 14 02 FB | 	rdlong	arg02, fp
297d0     14 4E 85 F1 | 	sub	fp, #20
297d4     0A 1F 12 F2 | 	cmp	local01, arg02 wc
297d8     B0 FF 9F CD |  if_b	jmp	#LR__4250
297dc                 | LR__4251
297dc     0C 4E 05 F1 | 	add	fp, #12
297e0     A7 1E C2 FA | 	rdbyte	local01, fp
297e4     0C 4E 85 F1 | 	sub	fp, #12
297e8     FE 1E 0E F2 | 	cmp	local01, #254 wz
297ec     00 FA 05 56 |  if_ne	mov	result1, #0
297f0     30 00 90 5D |  if_ne	jmp	#LR__4252
297f4     04 4E 05 F1 | 	add	fp, #4
297f8     A7 12 02 FB | 	rdlong	arg01, fp
297fc     04 4E 05 F1 | 	add	fp, #4
29800     A7 14 02 FB | 	rdlong	arg02, fp
29804     08 4E 85 F1 | 	sub	fp, #8
29808     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1018
2980c     0C 4E 05 F1 | 	add	fp, #12
29810     A7 12 02 F6 | 	mov	arg01, fp
29814     0C 4E 85 F1 | 	sub	fp, #12
29818     02 14 06 F6 | 	mov	arg02, #2
2981c     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1018
29820                 | ' 
29820                 | ' 	rcvr_mmc(buff, btr);
29820                 | ' 	rcvr_mmc(d, 2);
29820                 | ' 
29820                 | ' 	return 1;
29820     01 FA 05 F6 | 	mov	result1, #1
29824                 | LR__4252
29824     A7 F0 03 F6 | 	mov	ptra, fp
29828     B2 00 A0 FD | 	call	#popregs_
2982c                 | _fatfs_cc_rcvr_datablock_1036_ret
2982c     2D 00 64 FD | 	ret
29830                 | 
29830                 | _fatfs_cc_xmit_datablock_1038
29830     00 4A 05 F6 | 	mov	COUNT_, #0
29834     A8 00 A0 FD | 	call	#pushregs_
29838     10 F0 07 F1 | 	add	ptra, #16
2983c     04 4E 05 F1 | 	add	fp, #4
29840     A7 12 62 FC | 	wrlong	arg01, fp
29844     04 4E 05 F1 | 	add	fp, #4
29848     A7 14 42 FC | 	wrbyte	arg02, fp
2984c     08 4E 85 F1 | 	sub	fp, #8
29850     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1022
29854     00 FA 0D F2 | 	cmp	result1, #0 wz
29858     00 FA 05 A6 |  if_e	mov	result1, #0
2985c     90 00 90 AD |  if_e	jmp	#LR__4261
29860     08 4E 05 F1 | 	add	fp, #8
29864     A7 14 C2 FA | 	rdbyte	arg02, fp
29868     04 4E 05 F1 | 	add	fp, #4
2986c     A7 14 42 FC | 	wrbyte	arg02, fp
29870     A7 12 02 F6 | 	mov	arg01, fp
29874     0C 4E 85 F1 | 	sub	fp, #12
29878     01 14 06 F6 | 	mov	arg02, #1
2987c     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1011
29880     08 4E 05 F1 | 	add	fp, #8
29884     A7 14 C2 FA | 	rdbyte	arg02, fp
29888     08 4E 85 F1 | 	sub	fp, #8
2988c     FD 14 0E F2 | 	cmp	arg02, #253 wz
29890     58 00 90 AD |  if_e	jmp	#LR__4260
29894     04 4E 05 F1 | 	add	fp, #4
29898     A7 12 02 FB | 	rdlong	arg01, fp
2989c     04 4E 85 F1 | 	sub	fp, #4
298a0     09 14 C6 F9 | 	decod	arg02, #9
298a4     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1011
298a8     0C 4E 05 F1 | 	add	fp, #12
298ac     A7 12 02 F6 | 	mov	arg01, fp
298b0     0C 4E 85 F1 | 	sub	fp, #12
298b4     02 14 06 F6 | 	mov	arg02, #2
298b8     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1018
298bc     0C 4E 05 F1 | 	add	fp, #12
298c0     A7 12 02 F6 | 	mov	arg01, fp
298c4     0C 4E 85 F1 | 	sub	fp, #12
298c8     01 14 06 F6 | 	mov	arg02, #1
298cc     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1018
298d0     0C 4E 05 F1 | 	add	fp, #12
298d4     A7 14 C2 FA | 	rdbyte	arg02, fp
298d8     0C 4E 85 F1 | 	sub	fp, #12
298dc     1F 14 06 F5 | 	and	arg02, #31
298e0     05 14 0E F2 | 	cmp	arg02, #5 wz
298e4                 | ' 			return 0;
298e4     00 FA 05 56 |  if_ne	mov	result1, #0
298e8     04 00 90 5D |  if_ne	jmp	#LR__4261
298ec                 | LR__4260
298ec                 | ' 	}
298ec                 | ' 
298ec                 | ' 	return 1;
298ec     01 FA 05 F6 | 	mov	result1, #1
298f0                 | LR__4261
298f0     A7 F0 03 F6 | 	mov	ptra, fp
298f4     B2 00 A0 FD | 	call	#popregs_
298f8                 | _fatfs_cc_xmit_datablock_1038_ret
298f8     2D 00 64 FD | 	ret
298fc                 | 
298fc                 | _fatfs_cc_send_cmd_1042
298fc     01 4A 05 F6 | 	mov	COUNT_, #1
29900     A8 00 A0 FD | 	call	#pushregs_
29904     1C F0 07 F1 | 	add	ptra, #28
29908                 | _fatfs_cc_send_cmd_1042_enter
29908     04 4E 05 F1 | 	add	fp, #4
2990c     A7 12 42 FC | 	wrbyte	arg01, fp
29910     04 4E 05 F1 | 	add	fp, #4
29914     A7 14 62 FC | 	wrlong	arg02, fp
29918     04 4E 85 F1 | 	sub	fp, #4
2991c     A7 FA C1 FA | 	rdbyte	result1, fp
29920     04 4E 85 F1 | 	sub	fp, #4
29924     80 FA CD F7 | 	test	result1, #128 wz
29928     44 00 90 AD |  if_e	jmp	#LR__4270
2992c     04 4E 05 F1 | 	add	fp, #4
29930     A7 14 C2 FA | 	rdbyte	arg02, fp
29934     7F 14 06 F5 | 	and	arg02, #127
29938     A7 14 42 FC | 	wrbyte	arg02, fp
2993c     04 4E 85 F1 | 	sub	fp, #4
29940     37 12 06 F6 | 	mov	arg01, #55
29944     00 14 06 F6 | 	mov	arg02, #0
29948     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1042
2994c     0C 4E 05 F1 | 	add	fp, #12
29950     A7 FA 41 FC | 	wrbyte	result1, fp
29954     A7 14 C2 FA | 	rdbyte	arg02, fp
29958     0C 4E 85 F1 | 	sub	fp, #12
2995c     02 14 16 F2 | 	cmp	arg02, #2 wc
29960     0C 4E 05 31 |  if_ae	add	fp, #12
29964     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
29968     0C 4E 85 31 |  if_ae	sub	fp, #12
2996c     6C 01 90 3D |  if_ae	jmp	#LR__4274
29970                 | LR__4270
29970     04 4E 05 F1 | 	add	fp, #4
29974     A7 14 C2 FA | 	rdbyte	arg02, fp
29978     04 4E 85 F1 | 	sub	fp, #4
2997c     0C 14 0E F2 | 	cmp	arg02, #12 wz
29980     14 00 90 AD |  if_e	jmp	#LR__4271
29984     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1028
29988     34 FD BF FD | 	call	#_fatfs_cc_select_1032
2998c     00 FA 0D F2 | 	cmp	result1, #0 wz
29990     FF FA 05 A6 |  if_e	mov	result1, #255
29994     44 01 90 AD |  if_e	jmp	#LR__4274
29998                 | LR__4271
29998     04 4E 05 F1 | 	add	fp, #4
2999c     A7 14 C2 FA | 	rdbyte	arg02, fp
299a0     40 FA 05 F6 | 	mov	result1, #64
299a4     0A FB 41 F5 | 	or	result1, arg02
299a8     10 4E 05 F1 | 	add	fp, #16
299ac     A7 FA 41 FC | 	wrbyte	result1, fp
299b0     0C 4E 85 F1 | 	sub	fp, #12
299b4     A7 FA 01 FB | 	rdlong	result1, fp
299b8     18 FA 45 F0 | 	shr	result1, #24
299bc     0D 4E 05 F1 | 	add	fp, #13
299c0     A7 FA 41 FC | 	wrbyte	result1, fp
299c4     0D 4E 85 F1 | 	sub	fp, #13
299c8     A7 FA 01 FB | 	rdlong	result1, fp
299cc     10 FA 45 F0 | 	shr	result1, #16
299d0     0E 4E 05 F1 | 	add	fp, #14
299d4     A7 FA 41 FC | 	wrbyte	result1, fp
299d8     0E 4E 85 F1 | 	sub	fp, #14
299dc     A7 FA 01 FB | 	rdlong	result1, fp
299e0     08 FA 45 F0 | 	shr	result1, #8
299e4     0F 4E 05 F1 | 	add	fp, #15
299e8     A7 FA 41 FC | 	wrbyte	result1, fp
299ec     0F 4E 85 F1 | 	sub	fp, #15
299f0     A7 FA 01 FB | 	rdlong	result1, fp
299f4     10 4E 05 F1 | 	add	fp, #16
299f8     A7 FA 41 FC | 	wrbyte	result1, fp
299fc     0C 4E 85 F1 | 	sub	fp, #12
29a00     A7 02 48 FC | 	wrbyte	#1, fp
29a04     08 4E 85 F1 | 	sub	fp, #8
29a08     A7 FA C9 FA | 	rdbyte	result1, fp wz
29a0c     04 4E 85 F1 | 	sub	fp, #4
29a10     0C 4E 05 A1 |  if_e	add	fp, #12
29a14     A7 2A 49 AC |  if_e	wrbyte	#149, fp
29a18     0C 4E 85 A1 |  if_e	sub	fp, #12
29a1c     04 4E 05 F1 | 	add	fp, #4
29a20     A7 FA C1 FA | 	rdbyte	result1, fp
29a24     04 4E 85 F1 | 	sub	fp, #4
29a28     08 FA 0D F2 | 	cmp	result1, #8 wz
29a2c     0C 4E 05 A1 |  if_e	add	fp, #12
29a30     A7 0E 49 AC |  if_e	wrbyte	#135, fp
29a34     0C 4E 85 A1 |  if_e	sub	fp, #12
29a38     0C 4E 05 F1 | 	add	fp, #12
29a3c     A7 14 C2 FA | 	rdbyte	arg02, fp
29a40     0D 4E 05 F1 | 	add	fp, #13
29a44     A7 14 42 FC | 	wrbyte	arg02, fp
29a48     05 4E 85 F1 | 	sub	fp, #5
29a4c     A7 12 02 F6 | 	mov	arg01, fp
29a50     14 4E 85 F1 | 	sub	fp, #20
29a54     06 14 06 F6 | 	mov	arg02, #6
29a58     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1011
29a5c     04 4E 05 F1 | 	add	fp, #4
29a60     A7 1E C2 FA | 	rdbyte	local01, fp
29a64     04 4E 85 F1 | 	sub	fp, #4
29a68     0C 1E 0E F2 | 	cmp	local01, #12 wz
29a6c     10 4E 05 A1 |  if_e	add	fp, #16
29a70     A7 12 02 A6 |  if_e	mov	arg01, fp
29a74     10 4E 85 A1 |  if_e	sub	fp, #16
29a78     01 14 06 A6 |  if_e	mov	arg02, #1
29a7c     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1018
29a80     0C 4E 05 F1 | 	add	fp, #12
29a84     A7 14 48 FC | 	wrbyte	#10, fp
29a88     0C 4E 85 F1 | 	sub	fp, #12
29a8c                 | ' 	n = 10;
29a8c                 | ' 	do
29a8c                 | LR__4272
29a8c     10 4E 05 F1 | 	add	fp, #16
29a90     A7 12 02 F6 | 	mov	arg01, fp
29a94     10 4E 85 F1 | 	sub	fp, #16
29a98     01 14 06 F6 | 	mov	arg02, #1
29a9c     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1018
29aa0     10 4E 05 F1 | 	add	fp, #16
29aa4     A7 1E C2 FA | 	rdbyte	local01, fp
29aa8     10 4E 85 F1 | 	sub	fp, #16
29aac     80 1E CE F7 | 	test	local01, #128 wz
29ab0     1C 00 90 AD |  if_e	jmp	#LR__4273
29ab4     0C 4E 05 F1 | 	add	fp, #12
29ab8     A7 1E C2 FA | 	rdbyte	local01, fp
29abc     01 1E 86 F1 | 	sub	local01, #1
29ac0     A7 1E 42 FC | 	wrbyte	local01, fp
29ac4     A7 1E CA FA | 	rdbyte	local01, fp wz
29ac8     0C 4E 85 F1 | 	sub	fp, #12
29acc     BC FF 9F 5D |  if_ne	jmp	#LR__4272
29ad0                 | LR__4273
29ad0                 | ' 
29ad0                 | ' 	return d;
29ad0     10 4E 05 F1 | 	add	fp, #16
29ad4     A7 FA C1 FA | 	rdbyte	result1, fp
29ad8     10 4E 85 F1 | 	sub	fp, #16
29adc                 | LR__4274
29adc     A7 F0 03 F6 | 	mov	ptra, fp
29ae0     B2 00 A0 FD | 	call	#popregs_
29ae4                 | _fatfs_cc_send_cmd_1042_ret
29ae4     2D 00 64 FD | 	ret
29ae8                 | 
29ae8                 | _fatfs_cc_disk_deinitialize
29ae8     03 4A 05 F6 | 	mov	COUNT_, #3
29aec     A8 00 A0 FD | 	call	#pushregs_
29af0     00 12 4E F2 | 	cmps	arg01, #0 wz
29af4     01 00 00 FF 
29af8     14 E4 05 F1 | 	add	objptr, ##532
29afc     F2 12 02 FB | 	rdlong	arg01, objptr
29b00     04 E4 85 F1 | 	sub	objptr, #4
29b04     F2 1E 02 FB | 	rdlong	local01, objptr
29b08     08 E4 05 F1 | 	add	objptr, #8
29b0c     F2 20 02 FB | 	rdlong	local02, objptr
29b10     04 E4 05 F1 | 	add	objptr, #4
29b14     F2 22 02 FB | 	rdlong	local03, objptr
29b18     01 00 00 FF 
29b1c     1C E4 85 F1 | 	sub	objptr, ##540
29b20                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
29b20                 | '         return RES_NOTRDY;
29b20     03 FA 05 56 |  if_ne	mov	result1, #3
29b24     2C 00 90 5D |  if_ne	jmp	#LR__4280
29b28     50 12 62 FD | 	fltl	arg01
29b2c     09 01 08 FC | 	wrpin	#0, arg01
29b30     50 1E 62 FD | 	fltl	local01
29b34     0F 01 08 FC | 	wrpin	#0, local01
29b38     50 20 62 FD | 	fltl	local02
29b3c     10 01 08 FC | 	wrpin	#0, local02
29b40     50 22 62 FD | 	fltl	local03
29b44     11 01 08 FC | 	wrpin	#0, local03
29b48     0A 12 06 F6 | 	mov	arg01, #10
29b4c     0C 14 BF FD | 	call	#__system___waitms
29b50                 | '     }
29b50                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
29b50                 | '     _pinclear(PIN_SS);
29b50                 | '     _pinclear(PIN_CLK);
29b50                 | '     _pinclear(PIN_DI);
29b50                 | '     _pinclear(PIN_DO);
29b50                 | ' 
29b50                 | '     _waitms(10);
29b50                 | ' 
29b50                 | '     return 0;
29b50     00 FA 05 F6 | 	mov	result1, #0
29b54                 | LR__4280
29b54     A7 F0 03 F6 | 	mov	ptra, fp
29b58     B2 00 A0 FD | 	call	#popregs_
29b5c                 | _fatfs_cc_disk_deinitialize_ret
29b5c     2D 00 64 FD | 	ret
29b60                 | 
29b60                 | _fatfs_cc_gettimeofday
29b60     04 4A 05 F6 | 	mov	COUNT_, #4
29b64     A8 00 A0 FD | 	call	#pushregs_
29b68     09 1F 02 F6 | 	mov	local01, arg01
29b6c     C8 0F BF FD | 	call	#__system___getus
29b70     FD 12 02 F6 | 	mov	arg01, result1
29b74     02 00 00 FF 
29b78     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
29b7c     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
29b80     09 FB 01 F6 | 	mov	result1, arg01
29b84     10 FB 81 F1 | 	sub	result1, local02
29b88     A1 07 00 FF 
29b8c     40 FA 15 FD | 	qdiv	result1, ##1000000
29b90     02 00 00 FF 
29b94     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
29b98     18 20 62 FD | 	getqx	local02
29b9c     A1 07 00 FF 
29ba0     40 FA 15 FD | 	qdiv	result1, ##1000000
29ba4     00 20 0E F2 | 	cmp	local02, #0 wz
29ba8     19 22 62 FD | 	getqy	local03
29bac     28 00 90 AD |  if_e	jmp	#LR__4290
29bb0     02 00 00 FF 
29bb4     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
29bb8     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
29bbc     10 25 02 F1 | 	add	local04, local02
29bc0     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
29bc4     11 13 82 F1 | 	sub	arg01, local03
29bc8     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
29bcc     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
29bd0     02 00 00 FF 
29bd4     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
29bd8                 | LR__4290
29bd8     02 00 00 FF 
29bdc     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
29be0     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
29be4     02 00 00 FF 
29be8     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
29bec     0F 25 62 FC | 	wrlong	local04, local01
29bf0     04 1E 06 F1 | 	add	local01, #4
29bf4     0F 23 62 FC | 	wrlong	local03, local01
29bf8                 | '         lastsec += secs;
29bf8                 | '         lastus = now - leftover;
29bf8                 | '     }
29bf8                 | '     tv->tv_sec = lastsec;
29bf8                 | '     tv->tv_usec = leftover;
29bf8                 | '     return 0;
29bf8     00 FA 05 F6 | 	mov	result1, #0
29bfc     A7 F0 03 F6 | 	mov	ptra, fp
29c00     B2 00 A0 FD | 	call	#popregs_
29c04                 | _fatfs_cc_gettimeofday_ret
29c04     2D 00 64 FD | 	ret
29c08                 | 
29c08                 | _fatfs_cc__is_leap_year
29c08     09 FB 51 F6 | 	abs	result1, arg01 wc
29c0c     03 FA 05 F5 | 	and	result1, #3
29c10     FD FA 89 F6 | 	negc	result1, result1 wz
29c14     38 00 90 5D |  if_ne	jmp	#LR__4301
29c18     09 FB 51 F6 | 	abs	result1, arg01 wc
29c1c     64 FA 15 FD | 	qdiv	result1, #100
29c20     19 FA 61 FD | 	getqy	result1
29c24     FD FA 89 F6 | 	negc	result1, result1 wz
29c28     1C 00 90 5D |  if_ne	jmp	#LR__4300
29c2c     09 FB 51 F6 | 	abs	result1, arg01 wc
29c30     90 FB 15 FD | 	qdiv	result1, #400
29c34                 | '       return (0 == y % 400);
29c34     00 FA 05 F6 | 	mov	result1, #0
29c38     19 00 62 FD | 	getqy	_var01
29c3c     00 01 8A F6 | 	negc	_var01, _var01 wz
29c40     01 FA 05 A6 |  if_e	mov	result1, #1
29c44     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
29c48                 | LR__4300
29c48                 | '     return 1;
29c48     01 FA 05 F6 | 	mov	result1, #1
29c4c     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
29c50                 | LR__4301
29c50                 | '   }
29c50                 | '   return 0;
29c50     00 FA 05 F6 | 	mov	result1, #0
29c54                 | _fatfs_cc__is_leap_year_ret
29c54     2D 00 64 FD | 	ret
29c58                 | 
29c58                 | _fatfs_cc___tzoffset
29c58     09 01 0A F6 | 	mov	_var01, arg01 wz
29c5c     FF FF FF FF 
29c60     0A FF 6B FC | 	wrlong	##-1, arg02
29c64     01 02 06 F6 | 	mov	_var02, #1
29c68     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
29c6c                 | '                 return 0;
29c6c     00 FA 05 A6 |  if_e	mov	result1, #0
29c70     94 02 90 AD |  if_e	jmp	#LR__4327
29c74     0A 01 68 FC | 	wrlong	#0, arg02
29c78     02 00 00 FF 
29c7c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
29c80     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
29c84                 | ' 
29c84                 | '        *hasdst = 0;
29c84                 | ' 
29c84                 | ' 	n = stdname;
29c84                 | '         while (*s && isalpha(*s)) {
29c84     02 00 00 FF 
29c88     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
29c8c     97 28 48 FB | 	callpa	#(@LR__4311-@LR__4310)>>2,fcache_load_ptr_
29c90                 | LR__4310
29c90     00 05 CA FA | 	rdbyte	_var03, _var01 wz
29c94     48 00 90 AD |  if_e	jmp	#LR__4312
29c98     00 13 C2 FA | 	rdbyte	arg01, _var01
29c9c                 | ' {
29c9c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
29c9c     80 12 36 F3 | 	fle	arg01, #128 wc
29ca0                 | '     return __ctype[c];
29ca0     02 00 00 FF 
29ca4     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
29ca8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
29cac     09 FB C1 FA | 	rdbyte	result1, arg01
29cb0     02 00 00 FF 
29cb4     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
29cb8     0C FA CD F7 | 	test	result1, #12 wz
29cbc     20 00 90 AD |  if_e	jmp	#LR__4312
29cc0     00 09 02 F6 | 	mov	_var05, _var01
29cc4     00 0B 02 F6 | 	mov	_var06, _var01
29cc8     01 0A 06 F1 | 	add	_var06, #1
29ccc     04 0D C2 FA | 	rdbyte	_var07, _var05
29cd0     05 01 02 F6 | 	mov	_var01, _var06
29cd4     03 0D 42 FC | 	wrbyte	_var07, _var04
29cd8     01 06 06 F1 | 	add	_var04, #1
29cdc     B0 FF 9F FD | 	jmp	#LR__4310
29ce0                 | LR__4311
29ce0                 | LR__4312
29ce0     03 01 48 FC | 	wrbyte	#0, _var04
29ce4     00 0E 06 F6 | 	mov	_var08, #0
29ce8     00 05 C2 FA | 	rdbyte	_var03, _var01
29cec     2D 04 0E F2 | 	cmp	_var03, #45 wz
29cf0     01 02 66 A6 |  if_e	neg	_var02, #1
29cf4     01 00 06 A1 |  if_e	add	_var01, #1
29cf8     97 28 48 FB | 	callpa	#(@LR__4314-@LR__4313)>>2,fcache_load_ptr_
29cfc                 | '                 sgn = -1;
29cfc                 | '                 s++;
29cfc                 | '         }
29cfc                 | '         while (isdigit(*s)) {
29cfc                 | LR__4313
29cfc     00 13 C2 FA | 	rdbyte	arg01, _var01
29d00                 | ' {
29d00                 | '   return  (__ctype_get(c) & 0x02 ) ;
29d00     80 12 36 F3 | 	fle	arg01, #128 wc
29d04                 | '     return __ctype[c];
29d04     02 00 00 FF 
29d08     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
29d0c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
29d10     09 FB C1 FA | 	rdbyte	result1, arg01
29d14     02 00 00 FF 
29d18     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
29d1c     02 FA CD F7 | 	test	result1, #2 wz
29d20     28 00 90 AD |  if_e	jmp	#LR__4315
29d24     07 05 02 F6 | 	mov	_var03, _var08
29d28     02 04 66 F0 | 	shl	_var03, #2
29d2c     07 05 02 F1 | 	add	_var03, _var08
29d30     01 04 66 F0 | 	shl	_var03, #1
29d34     00 09 C2 FA | 	rdbyte	_var05, _var01
29d38     30 08 86 F1 | 	sub	_var05, #48
29d3c     04 05 02 F1 | 	add	_var03, _var05
29d40     02 0F 02 F6 | 	mov	_var08, _var03
29d44     01 00 06 F1 | 	add	_var01, #1
29d48     B0 FF 9F FD | 	jmp	#LR__4313
29d4c                 | LR__4314
29d4c                 | LR__4315
29d4c     07 00 00 FF 
29d50     10 0E 06 FD | 	qmul	_var08, ##3600
29d54     00 05 C2 FA | 	rdbyte	_var03, _var01
29d58     3A 04 0E F2 | 	cmp	_var03, #58 wz
29d5c     18 10 62 FD | 	getqx	_var09
29d60     70 00 90 5D |  if_ne	jmp	#LR__4319
29d64     00 0E 06 F6 | 	mov	_var08, #0
29d68     01 00 06 F1 | 	add	_var01, #1
29d6c     97 28 48 FB | 	callpa	#(@LR__4317-@LR__4316)>>2,fcache_load_ptr_
29d70                 | '                 x = 0;
29d70                 | '                 s++;
29d70                 | '                 while (isdigit(*s)) {
29d70                 | LR__4316
29d70     00 13 C2 FA | 	rdbyte	arg01, _var01
29d74                 | ' {
29d74                 | '   return  (__ctype_get(c) & 0x02 ) ;
29d74     80 12 36 F3 | 	fle	arg01, #128 wc
29d78                 | '     return __ctype[c];
29d78     02 00 00 FF 
29d7c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
29d80     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
29d84     09 FB C1 FA | 	rdbyte	result1, arg01
29d88     02 00 00 FF 
29d8c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
29d90     02 FA CD F7 | 	test	result1, #2 wz
29d94     28 00 90 AD |  if_e	jmp	#LR__4318
29d98     07 05 02 F6 | 	mov	_var03, _var08
29d9c     02 04 66 F0 | 	shl	_var03, #2
29da0     07 05 02 F1 | 	add	_var03, _var08
29da4     01 04 66 F0 | 	shl	_var03, #1
29da8     00 09 C2 FA | 	rdbyte	_var05, _var01
29dac     30 08 86 F1 | 	sub	_var05, #48
29db0     04 05 02 F1 | 	add	_var03, _var05
29db4     02 0F 02 F6 | 	mov	_var08, _var03
29db8     01 00 06 F1 | 	add	_var01, #1
29dbc     B0 FF 9F FD | 	jmp	#LR__4316
29dc0                 | LR__4317
29dc0                 | LR__4318
29dc0     07 0D 02 F6 | 	mov	_var07, _var08
29dc4     04 0C 66 F0 | 	shl	_var07, #4
29dc8     07 0D 82 F1 | 	sub	_var07, _var08
29dcc     02 0C 66 F0 | 	shl	_var07, #2
29dd0     06 11 02 F1 | 	add	_var09, _var07
29dd4                 | LR__4319
29dd4     02 00 00 FF 
29dd8     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
29ddc     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
29de0     00 13 C2 FA | 	rdbyte	arg01, _var01
29de4                 | ' {
29de4                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
29de4     80 12 36 F3 | 	fle	arg01, #128 wc
29de8                 | '     return __ctype[c];
29de8     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
29dec     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
29df0     09 FB C1 FA | 	rdbyte	result1, arg01
29df4     02 00 00 FF 
29df8     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
29dfc     0C FA CD F7 | 	test	result1, #12 wz
29e00     50 00 90 AD |  if_e	jmp	#LR__4322
29e04     0A 03 68 FC | 	wrlong	#1, arg02
29e08                 | '                 *hasdst = 1;
29e08                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
29e08                 | LR__4320
29e08     00 05 CA FA | 	rdbyte	_var03, _var01 wz
29e0c     44 00 90 AD |  if_e	jmp	#LR__4321
29e10     00 13 C2 FA | 	rdbyte	arg01, _var01
29e14                 | ' {
29e14                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
29e14     80 12 36 F3 | 	fle	arg01, #128 wc
29e18                 | '     return __ctype[c];
29e18     02 00 00 FF 
29e1c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
29e20     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
29e24     09 FB C1 FA | 	rdbyte	result1, arg01
29e28     02 00 00 FF 
29e2c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
29e30     0C FA CD F7 | 	test	result1, #12 wz
29e34     1C 00 90 AD |  if_e	jmp	#LR__4321
29e38     00 0B 02 F6 | 	mov	_var06, _var01
29e3c     01 0A 06 F1 | 	add	_var06, #1
29e40     00 0D C2 FA | 	rdbyte	_var07, _var01
29e44     05 01 02 F6 | 	mov	_var01, _var06
29e48     03 0D 42 FC | 	wrbyte	_var07, _var04
29e4c     01 06 06 F1 | 	add	_var04, #1
29e50     B4 FF 9F FD | 	jmp	#LR__4320
29e54                 | LR__4321
29e54                 | LR__4322
29e54     03 01 48 FC | 	wrbyte	#0, _var04
29e58     02 00 00 FF 
29e5c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
29e60     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
29e64     02 00 00 FF 
29e68     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
29e6c     20 00 90 AD |  if_e	jmp	#LR__4323
29e70     02 00 00 FF 
29e74     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
29e78     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
29e7c     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
29e80     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
29e84     02 00 00 FF 
29e88     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
29e8c     1C 00 90 FD | 	jmp	#LR__4324
29e90                 | LR__4323
29e90     02 00 00 FF 
29e94     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
29e98     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
29e9c     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
29ea0     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
29ea4     02 00 00 FF 
29ea8     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
29eac                 | LR__4324
29eac     02 00 00 FF 
29eb0     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
29eb4     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
29eb8     02 00 00 FF 
29ebc     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
29ec0     20 00 90 AD |  if_e	jmp	#LR__4325
29ec4     02 00 00 FF 
29ec8     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
29ecc     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
29ed0     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
29ed4     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
29ed8     02 00 00 FF 
29edc     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
29ee0     1C 00 90 FD | 	jmp	#LR__4326
29ee4                 | LR__4325
29ee4     02 00 00 FF 
29ee8     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
29eec     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
29ef0     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
29ef4     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
29ef8     02 00 00 FF 
29efc     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
29f00                 | LR__4326
29f00     08 03 02 FD | 	qmul	_var02, _var09
29f04                 | ' 		_tzname[1] = stdname;
29f04                 | ' 
29f04                 | '         return sgn * off;
29f04     18 FA 61 FD | 	getqx	result1
29f08                 | LR__4327
29f08                 | _fatfs_cc___tzoffset_ret
29f08     2D 00 64 FD | 	ret
29f0c                 | 
29f0c                 | _fatfs_cc___indst
29f0c     10 12 06 F1 | 	add	arg01, #16
29f10     09 01 02 FB | 	rdlong	_var01, arg01
29f14     10 12 86 F1 | 	sub	arg01, #16
29f18     02 00 0E F2 | 	cmp	_var01, #2 wz
29f1c     30 00 90 5D |  if_ne	jmp	#LR__4330
29f20     07 00 06 F6 | 	mov	_var01, #7
29f24     18 12 06 F1 | 	add	arg01, #24
29f28     09 03 02 FB | 	rdlong	_var02, arg01
29f2c     01 01 02 F1 | 	add	_var01, _var02
29f30     0C 12 86 F1 | 	sub	arg01, #12
29f34     09 05 02 FB | 	rdlong	_var03, arg01
29f38     02 01 82 F1 | 	sub	_var01, _var03
29f3c     00 00 56 F2 | 	cmps	_var01, #0 wc
29f40                 | '                         return 1;
29f40     01 FA 05 C6 |  if_b	mov	result1, #1
29f44     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
29f48                 | '                 return 0;
29f48     00 FA 05 F6 | 	mov	result1, #0
29f4c     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
29f50                 | LR__4330
29f50     10 12 06 F1 | 	add	arg01, #16
29f54     09 01 02 FB | 	rdlong	_var01, arg01
29f58     10 12 86 F1 | 	sub	arg01, #16
29f5c     0A 00 0E F2 | 	cmp	_var01, #10 wz
29f60     28 00 90 5D |  if_ne	jmp	#LR__4331
29f64     18 12 06 F1 | 	add	arg01, #24
29f68     09 01 02 FB | 	rdlong	_var01, arg01
29f6c     0C 12 86 F1 | 	sub	arg01, #12
29f70     09 07 02 FB | 	rdlong	_var04, arg01
29f74     03 01 82 F1 | 	sub	_var01, _var04
29f78     00 00 56 F2 | 	cmps	_var01, #0 wc
29f7c                 | '                         return 0;
29f7c     00 FA 05 C6 |  if_b	mov	result1, #0
29f80     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
29f84                 | '                 return 1;
29f84     01 FA 05 F6 | 	mov	result1, #1
29f88     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
29f8c                 | LR__4331
29f8c                 | '         }
29f8c                 | ' 
29f8c                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
29f8c     00 00 06 F6 | 	mov	_var01, #0
29f90     10 12 06 F1 | 	add	arg01, #16
29f94     09 03 02 FB | 	rdlong	_var02, arg01
29f98     10 12 86 F1 | 	sub	arg01, #16
29f9c     03 02 56 F2 | 	cmps	_var02, #3 wc
29fa0     10 00 90 CD |  if_b	jmp	#LR__4332
29fa4     10 12 06 F1 | 	add	arg01, #16
29fa8     09 05 02 FB | 	rdlong	_var03, arg01
29fac     0A 04 56 F2 | 	cmps	_var03, #10 wc
29fb0     01 00 06 C6 |  if_b	mov	_var01, #1
29fb4                 | LR__4332
29fb4     00 FB 01 F6 | 	mov	result1, _var01
29fb8                 | _fatfs_cc___indst_ret
29fb8     2D 00 64 FD | 	ret
29fbc                 | 
29fbc                 | ' 	
29fbc                 | ' 	FUNCTION pfunc(c as integer) as integer
29fbc                 | ___strs_cl_pfunc
29fbc                 | ' 		if (i < 16) then
29fbc     04 E4 05 F1 | 	add	objptr, #4
29fc0     F2 FA 01 FB | 	rdlong	result1, objptr
29fc4     04 E4 85 F1 | 	sub	objptr, #4
29fc8     10 FA 55 F2 | 	cmps	result1, #16 wc
29fcc     2C 00 90 3D |  if_ae	jmp	#LR__4340
29fd0     F2 FA 01 FB | 	rdlong	result1, objptr
29fd4     04 E4 05 F1 | 	add	objptr, #4
29fd8     F2 00 02 FB | 	rdlong	_var01, objptr
29fdc     FD 00 02 F1 | 	add	_var01, result1
29fe0     00 13 42 FC | 	wrbyte	arg01, _var01
29fe4     F2 FA 01 FB | 	rdlong	result1, objptr
29fe8     01 FA 05 F1 | 	add	result1, #1
29fec     F2 FA 61 FC | 	wrlong	result1, objptr
29ff0     04 E4 85 F1 | 	sub	objptr, #4
29ff4                 | ' 			p(i) = c
29ff4                 | ' 			i = i+1
29ff4                 | ' 			return 1
29ff4     01 FA 05 F6 | 	mov	result1, #1
29ff8     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
29ffc                 | LR__4340
29ffc                 | ' 			return -1
29ffc     01 FA 65 F6 | 	neg	result1, #1
2a000                 | ___strs_cl_pfunc_ret
2a000     2D 00 64 FD | 	ret
2a004                 | 
2a004                 | __struct__s_vfs_file_t_putchar
2a004     04 4A 05 F6 | 	mov	COUNT_, #4
2a008     A8 00 A0 FD | 	call	#pushregs_
2a00c     1C E4 05 F1 | 	add	objptr, #28
2a010     F2 1E 0A FB | 	rdlong	local01, objptr wz
2a014     1C E4 85 F1 | 	sub	objptr, #28
2a018     00 FA 05 A6 |  if_e	mov	result1, #0
2a01c     48 00 90 AD |  if_e	jmp	#LR__4350
2a020     1C E4 05 F1 | 	add	objptr, #28
2a024     F2 20 02 FB | 	rdlong	local02, objptr
2a028     10 23 02 F6 | 	mov	local03, local02
2a02c     1C E4 85 F1 | 	sub	objptr, #28
2a030     13 22 46 F7 | 	zerox	local03, #19
2a034     14 20 46 F0 | 	shr	local02, #20
2a038     02 20 66 F0 | 	shl	local02, #2
2a03c     ED 20 02 F1 | 	add	local02, __methods__
2a040     10 21 02 FB | 	rdlong	local02, local02
2a044     F2 14 02 F6 | 	mov	arg02, objptr
2a048     F2 24 02 F6 | 	mov	local04, objptr
2a04c     11 E5 01 F6 | 	mov	objptr, local03
2a050     2D 20 62 FD | 	call	local02
2a054     12 E5 01 F6 | 	mov	objptr, local04
2a058                 | '     return (i < 0) ? 0 : 1;
2a058     00 FA 55 F2 | 	cmps	result1, #0 wc
2a05c     00 1E 06 C6 |  if_b	mov	local01, #0
2a060     01 1E 06 36 |  if_ae	mov	local01, #1
2a064     0F FB 01 F6 | 	mov	result1, local01
2a068                 | LR__4350
2a068     A7 F0 03 F6 | 	mov	ptra, fp
2a06c     B2 00 A0 FD | 	call	#popregs_
2a070                 | __struct__s_vfs_file_t_putchar_ret
2a070     2D 00 64 FD | 	ret
2a074                 | 
2a074                 | __struct__s_vfs_file_t_getchar
2a074     03 4A 05 F6 | 	mov	COUNT_, #3
2a078     A8 00 A0 FD | 	call	#pushregs_
2a07c     20 E4 05 F1 | 	add	objptr, #32
2a080     F2 12 0A FB | 	rdlong	arg01, objptr wz
2a084     20 E4 85 F1 | 	sub	objptr, #32
2a088     01 FA 65 A6 |  if_e	neg	result1, #1
2a08c     38 00 90 AD |  if_e	jmp	#LR__4360
2a090                 | '     return getcf(__this);
2a090     20 E4 05 F1 | 	add	objptr, #32
2a094     F2 1E 02 FB | 	rdlong	local01, objptr
2a098     0F 21 02 F6 | 	mov	local02, local01
2a09c     20 E4 85 F1 | 	sub	objptr, #32
2a0a0     13 20 46 F7 | 	zerox	local02, #19
2a0a4     14 1E 46 F0 | 	shr	local01, #20
2a0a8     02 1E 66 F0 | 	shl	local01, #2
2a0ac     ED 1E 02 F1 | 	add	local01, __methods__
2a0b0     0F 1F 02 FB | 	rdlong	local01, local01
2a0b4     F2 12 02 F6 | 	mov	arg01, objptr
2a0b8     F2 22 02 F6 | 	mov	local03, objptr
2a0bc     10 E5 01 F6 | 	mov	objptr, local02
2a0c0     2D 1E 62 FD | 	call	local01
2a0c4     11 E5 01 F6 | 	mov	objptr, local03
2a0c8                 | LR__4360
2a0c8     A7 F0 03 F6 | 	mov	ptra, fp
2a0cc     B2 00 A0 FD | 	call	#popregs_
2a0d0                 | __struct__s_vfs_file_t_getchar_ret
2a0d0     2D 00 64 FD | 	ret
2a0d4                 | 
2a0d4                 | __struct___bas_wrap_sender_tx
2a0d4     03 4A 05 F6 | 	mov	COUNT_, #3
2a0d8     A8 00 A0 FD | 	call	#pushregs_
2a0dc     F2 1E 02 FB | 	rdlong	local01, objptr
2a0e0     0F 21 02 F6 | 	mov	local02, local01
2a0e4     13 1E 46 F7 | 	zerox	local01, #19
2a0e8     14 20 46 F0 | 	shr	local02, #20
2a0ec     02 20 66 F0 | 	shl	local02, #2
2a0f0     ED 20 02 F1 | 	add	local02, __methods__
2a0f4     10 21 02 FB | 	rdlong	local02, local02
2a0f8     F2 22 02 F6 | 	mov	local03, objptr
2a0fc     0F E5 01 F6 | 	mov	objptr, local01
2a100     2D 20 62 FD | 	call	local02
2a104     11 E5 01 F6 | 	mov	objptr, local03
2a108     01 FA 05 F6 | 	mov	result1, #1
2a10c     A7 F0 03 F6 | 	mov	ptra, fp
2a110     B2 00 A0 FD | 	call	#popregs_
2a114                 | __struct___bas_wrap_sender_tx_ret
2a114     2D 00 64 FD | 	ret
2a118                 | 
2a118                 | __struct___bas_wrap_sender_rx
2a118     03 4A 05 F6 | 	mov	COUNT_, #3
2a11c     A8 00 A0 FD | 	call	#pushregs_
2a120     04 E4 05 F1 | 	add	objptr, #4
2a124     F2 1E 02 FB | 	rdlong	local01, objptr
2a128     0F 21 02 F6 | 	mov	local02, local01
2a12c     04 E4 85 F1 | 	sub	objptr, #4
2a130     13 20 46 F7 | 	zerox	local02, #19
2a134     14 1E 46 F0 | 	shr	local01, #20
2a138     02 1E 66 F0 | 	shl	local01, #2
2a13c     ED 1E 02 F1 | 	add	local01, __methods__
2a140     0F 1F 02 FB | 	rdlong	local01, local01
2a144     F2 22 02 F6 | 	mov	local03, objptr
2a148     10 E5 01 F6 | 	mov	objptr, local02
2a14c     2D 1E 62 FD | 	call	local01
2a150     11 E5 01 F6 | 	mov	objptr, local03
2a154     A7 F0 03 F6 | 	mov	ptra, fp
2a158     B2 00 A0 FD | 	call	#popregs_
2a15c                 | __struct___bas_wrap_sender_rx_ret
2a15c     2D 00 64 FD | 	ret
2a160                 | 
2a160                 | __struct___bas_wrap_sender_close
2a160     03 4A 05 F6 | 	mov	COUNT_, #3
2a164     A8 00 A0 FD | 	call	#pushregs_
2a168     08 E4 05 F1 | 	add	objptr, #8
2a16c     F2 1E 02 FB | 	rdlong	local01, objptr
2a170     0F 21 02 F6 | 	mov	local02, local01
2a174     08 E4 85 F1 | 	sub	objptr, #8
2a178     13 20 46 F7 | 	zerox	local02, #19
2a17c     14 1E 46 F0 | 	shr	local01, #20
2a180     02 1E 66 F0 | 	shl	local01, #2
2a184     ED 1E 02 F1 | 	add	local01, __methods__
2a188     0F 1F 02 FB | 	rdlong	local01, local01
2a18c     F2 22 02 F6 | 	mov	local03, objptr
2a190     10 E5 01 F6 | 	mov	objptr, local02
2a194     2D 1E 62 FD | 	call	local01
2a198     11 E5 01 F6 | 	mov	objptr, local03
2a19c     A7 F0 03 F6 | 	mov	ptra, fp
2a1a0     B2 00 A0 FD | 	call	#popregs_
2a1a4                 | __struct___bas_wrap_sender_close_ret
2a1a4     2D 00 64 FD | 	ret
2a1a8                 | 
2a1a8                 | LR__4370
2a1a8     2F          | 	byte	"/"
2a1a9     00          | 	byte	0
2a1aa                 | LR__4371
2a1aa     69 6E 66    | 	byte	"inf"
2a1ad     00          | 	byte	0
2a1ae                 | LR__4372
2a1ae     6E 61 6E    | 	byte	"nan"
2a1b1     00          | 	byte	0
2a1b2                 | LR__4373
2a1b2                 | 	byte	
2a1b2     00          | 	byte	0
2a1b3                 | LR__4374
2a1b3                 | 	byte	
2a1b3     00          | 	byte	0
2a1b4                 | LR__4375
2a1b4                 | 	byte	
2a1b4     00          | 	byte	0
2a1b5                 | LR__4376
2a1b5                 | 	byte	
2a1b5     00          | 	byte	0
2a1b6                 | LR__4377
2a1b6                 | 	byte	
2a1b6     00          | 	byte	0
2a1b7                 | LR__4378
2a1b7                 | 	byte	
2a1b7     00          | 	byte	0
2a1b8                 | LR__4379
2a1b8                 | 	byte	
2a1b8     00          | 	byte	0
2a1b9                 | LR__4380
2a1b9                 | 	byte	
2a1b9     00          | 	byte	0
2a1ba                 | LR__4381
2a1ba     00          | 	byte	0
2a1bb     00          | 	byte	0
2a1bc                 | LR__4382
2a1bc     00          | 	byte	0
2a1bd     00          | 	byte	0
2a1be                 | LR__4383
2a1be     00          | 	byte	0
2a1bf     00          | 	byte	0
2a1c0                 | LR__4384
2a1c0     20 21 21 21 
2a1c4     20 63 6F 72 
2a1c8     72 75 70 74 
2a1cc     65 64 20 68 
2a1d0     65 61 70 3F 
2a1d4     3F 3F 20 21 
2a1d8     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
2a1db     00          | 	byte	0
2a1dc                 | LR__4385
2a1dc     20 21 21 21 
2a1e0     20 6F 75 74 
2a1e4     20 6F 66 20 
2a1e8     68 65 61 70 
2a1ec     20 6D 65 6D 
2a1f0     6F 72 79 20 
2a1f4     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
2a1f8     00          | 	byte	0
2a1f9                 | LR__4386
2a1f9     20 21 21 21 
2a1fd     20 63 6F 72 
2a201     72 75 70 74 
2a205     65 64 20 68 
2a209     65 61 70 20 
2a20d     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
2a211     00          | 	byte	0
2a212                 | LR__4387
2a212     00          | 	byte	0
2a213     00          | 	byte	0
2a214                 | LR__4388
2a214     2E          | 	byte	"."
2a215     00          | 	byte	0
2a216                 | LR__4389
2a216     00          | 	byte	0
2a217     00          | 	byte	0
2a218                 | LR__4390
2a218     00          | 	byte	0
2a219     00          | 	byte	0
2a21a                 | LR__4391
2a21a     00          | 	byte	0
2a21b     00          | 	byte	0
2a21c                 | LR__4392
2a21c     2A 3A 3C 3E 
2a220     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
2a224     00          | 	byte	0
2a225                 | LR__4393
2a225     2B 2C 3B 3D 
2a229     5B 5D       | 	byte	"+,;=[]"
2a22b     00          | 	byte	0
2a22c                 | LR__4394
2a22c     46 41 54 33 
2a230     32 20 20 20 | 	byte	"FAT32   "
2a234     00          | 	byte	0
2a235                 | LR__4395
2a235     54 5A       | 	byte	"TZ"
2a237     00          | 	byte	0
2a238                 | LR__4396
2a238     00          | 	byte	0
2a239     00          | 	byte	0
2a23a                 | LR__4397
2a23a                 | 	byte	
2a23a     00          | 	byte	0
2a23b                 | LR__4398
2a23b                 | 	byte	
2a23b     00          | 	byte	0
2a23c                 | LR__4399
2a23c     22          | 	byte	34
2a23d     00          | 	byte	0
2a23e                 | LR__4400
2a23e     22          | 	byte	34
2a23f     00          | 	byte	0
2a240                 | LR__4401
2a240     3A          | 	byte	":"
2a241     00          | 	byte	0
2a242                 | LR__4402
2a242                 | 	byte	
2a242     00          | 	byte	0
2a243                 | LR__4403
2a243                 | 	byte	
2a243     00          | 	byte	0
2a244                 | LR__4404
2a244                 | 	byte	
2a244     00          | 	byte	0
2a245                 | LR__4405
2a245                 | 	byte	
2a245     00          | 	byte	0
2a246                 | LR__4406
2a246                 | 	byte	
2a246     00          | 	byte	0
2a247                 | LR__4407
2a247                 | 	byte	
2a247     00          | 	byte	0
2a248                 | LR__4408
2a248                 | 	byte	
2a248     00          | 	byte	0
2a249                 | LR__4409
2a249     22          | 	byte	34
2a24a     00          | 	byte	0
2a24b                 | LR__4410
2a24b     22          | 	byte	34
2a24c     00          | 	byte	0
2a24d                 | LR__4411
2a24d     22          | 	byte	34
2a24e     00          | 	byte	0
2a24f                 | LR__4412
2a24f     22          | 	byte	34
2a250     00          | 	byte	0
2a251                 | LR__4413
2a251     22          | 	byte	34
2a252     00          | 	byte	0
2a253                 | LR__4414
2a253     3E          | 	byte	">"
2a254     00          | 	byte	0
2a255                 | LR__4415
2a255     3E          | 	byte	">"
2a256     00          | 	byte	0
2a257                 | LR__4416
2a257     2B          | 	byte	"+"
2a258     00          | 	byte	0
2a259                 | LR__4417
2a259     2D          | 	byte	"-"
2a25a     00          | 	byte	0
2a25b                 | LR__4418
2a25b     2A          | 	byte	"*"
2a25c     00          | 	byte	0
2a25d                 | LR__4419
2a25d     2F          | 	byte	"/"
2a25e     00          | 	byte	0
2a25f                 | LR__4420
2a25f     5E          | 	byte	"^"
2a260     00          | 	byte	0
2a261                 | LR__4421
2a261     3D          | 	byte	"="
2a262     00          | 	byte	0
2a263                 | LR__4422
2a263     2B          | 	byte	"+"
2a264     00          | 	byte	0
2a265                 | LR__4423
2a265     2B          | 	byte	"+"
2a266     00          | 	byte	0
2a267                 | LR__4424
2a267     2D          | 	byte	"-"
2a268     00          | 	byte	0
2a269                 | LR__4425
2a269     2D          | 	byte	"-"
2a26a     00          | 	byte	0
2a26b                 | LR__4426
2a26b     3C          | 	byte	"<"
2a26c     00          | 	byte	0
2a26d                 | LR__4427
2a26d     3E          | 	byte	">"
2a26e     00          | 	byte	0
2a26f                 | LR__4428
2a26f     22          | 	byte	34
2a270     00          | 	byte	0
2a271                 | LR__4429
2a271     22          | 	byte	34
2a272     00          | 	byte	0
2a273                 | LR__4430
2a273     2E          | 	byte	"."
2a274     00          | 	byte	0
2a275                 | LR__4431
2a275     3F          | 	byte	"?"
2a276     00          | 	byte	0
2a277                 | LR__4432
2a277     3F          | 	byte	"?"
2a278     00          | 	byte	0
2a279                 | LR__4433
2a279     6D 6F 75 73 
2a27d     65          | 	byte	"mouse"
2a27e     00          | 	byte	0
2a27f                 | LR__4434
2a27f     63 75 72 73 
2a283     6F 72       | 	byte	"cursor"
2a285     00          | 	byte	0
2a286                 | LR__4435
2a286     63 6C 69 63 
2a28a     6B          | 	byte	"click"
2a28b     00          | 	byte	0
2a28c                 | LR__4436
2a28c     6F 6E       | 	byte	"on"
2a28e     00          | 	byte	0
2a28f                 | LR__4437
2a28f     31          | 	byte	"1"
2a290     00          | 	byte	0
2a291                 | LR__4438
2a291     6F 66 66    | 	byte	"off"
2a294     00          | 	byte	0
2a295                 | LR__4439
2a295     30          | 	byte	"0"
2a296     00          | 	byte	0
2a297                 | LR__4440
2a297     6D 6F 64 65 | 	byte	"mode"
2a29b     00          | 	byte	0
2a29c                 | LR__4441
2a29c     6D 2E       | 	byte	"m."
2a29e     00          | 	byte	0
2a29f                 | LR__4442
2a29f     61 74 61 72 
2a2a3     69          | 	byte	"atari"
2a2a4     00          | 	byte	0
2a2a5                 | LR__4443
2a2a5     30          | 	byte	"0"
2a2a6     00          | 	byte	0
2a2a7                 | LR__4444
2a2a7     70 63 5F 61 
2a2ab     6D 62 65 72 | 	byte	"pc_amber"
2a2af     00          | 	byte	0
2a2b0                 | LR__4445
2a2b0     31          | 	byte	"1"
2a2b1     00          | 	byte	0
2a2b2                 | LR__4446
2a2b2     70 63 5F 67 
2a2b6     72 65 65 6E | 	byte	"pc_green"
2a2ba     00          | 	byte	0
2a2bb                 | LR__4447
2a2bb     32          | 	byte	"2"
2a2bc     00          | 	byte	0
2a2bd                 | LR__4448
2a2bd     70 63 5F 77 
2a2c1     68 69 74 65 | 	byte	"pc_white"
2a2c5     00          | 	byte	0
2a2c6                 | LR__4449
2a2c6     33          | 	byte	"3"
2a2c7     00          | 	byte	0
2a2c8                 | LR__4450
2a2c8     73 74       | 	byte	"st"
2a2ca     00          | 	byte	0
2a2cb                 | LR__4451
2a2cb     34          | 	byte	"4"
2a2cc     00          | 	byte	0
2a2cd                 | LR__4452
2a2cd                 | 	byte	
2a2cd     00          | 	byte	0
2a2ce                 | LR__4453
2a2ce     6C 6F 61 64 | 	byte	"load"
2a2d2     00          | 	byte	0
2a2d3                 | LR__4454
2a2d3     73 61 76 65 | 	byte	"save"
2a2d7     00          | 	byte	0
2a2d8                 | LR__4455
2a2d8     62 72 75 6E | 	byte	"brun"
2a2dc     00          | 	byte	0
2a2dd                 | LR__4456
2a2dd     6C 6F 2E    | 	byte	"lo."
2a2e0     00          | 	byte	0
2a2e1                 | LR__4457
2a2e1     73 2E       | 	byte	"s."
2a2e3     00          | 	byte	0
2a2e4                 | LR__4458
2a2e4     62 72 2E    | 	byte	"br."
2a2e7     00          | 	byte	0
2a2e8                 | LR__4459
2a2e8                 | 	byte	
2a2e8     00          | 	byte	0
2a2e9                 | LR__4460
2a2e9                 | 	byte	
2a2e9     00          | 	byte	0
2a2ea                 | LR__4461
2a2ea                 | 	byte	
2a2ea     00          | 	byte	0
2a2eb                 | LR__4462
2a2eb                 | 	byte	
2a2eb     00          | 	byte	0
2a2ec                 | LR__4463
2a2ec     20 55 73 65 
2a2f0     72 20 66 75 
2a2f4     6E 63 74 69 
2a2f8     6F 6E 73 20 
2a2fc     61 6E 64 20 
2a300     61 72 72 61 
2a304     79 73 20 6E 
2a308     6F 74 20 79 
2a30c     65 74 20 69 
2a310     6D 70 6C 65 
2a314     6D 65 6E 74 
2a318     65 64       | 	byte	" User functions and arrays not yet implemented"
2a31a     00          | 	byte	0
2a31b                 | LR__4464
2a31b                 | 	byte	
2a31b     00          | 	byte	0
2a31c                 | LR__4465
2a31c                 | 	byte	
2a31c     00          | 	byte	0
2a31d                 | LR__4466
2a31d     52 65 61 64 
2a321     79          | 	byte	"Ready"
2a322     00          | 	byte	0
2a323                 | LR__4467
2a323     2B          | 	byte	"+"
2a324     00          | 	byte	0
2a325                 | LR__4468
2a325     2D          | 	byte	"-"
2a326     00          | 	byte	0
2a327                 | LR__4469
2a327     6F 72       | 	byte	"or"
2a329     00          | 	byte	0
2a32a                 | LR__4470
2a32a     78 6F 72    | 	byte	"xor"
2a32d     00          | 	byte	0
2a32e                 | LR__4471
2a32e     2A          | 	byte	"*"
2a32f     00          | 	byte	0
2a330                 | LR__4472
2a330     2F          | 	byte	"/"
2a331     00          | 	byte	0
2a332                 | LR__4473
2a332     61 6E 64    | 	byte	"and"
2a335     00          | 	byte	0
2a336                 | LR__4474
2a336     64 69 76    | 	byte	"div"
2a339     00          | 	byte	0
2a33a                 | LR__4475
2a33a     6D 6F 64    | 	byte	"mod"
2a33d     00          | 	byte	0
2a33e                 | LR__4476
2a33e     73 68 6C    | 	byte	"shl"
2a341     00          | 	byte	0
2a342                 | LR__4477
2a342     73 68 72    | 	byte	"shr"
2a345     00          | 	byte	0
2a346                 | LR__4478
2a346     5E          | 	byte	"^"
2a347     00          | 	byte	0
2a348                 | LR__4479
2a348     6E 6F 74    | 	byte	"not"
2a34b     00          | 	byte	0
2a34c                 | LR__4480
2a34c     40          | 	byte	"@"
2a34d     00          | 	byte	0
2a34e                 | LR__4481
2a34e     3D          | 	byte	"="
2a34f     00          | 	byte	0
2a350                 | LR__4482
2a350     3E 3D       | 	byte	">="
2a352     00          | 	byte	0
2a353                 | LR__4483
2a353     3C 3D       | 	byte	"<="
2a355     00          | 	byte	0
2a356                 | LR__4484
2a356     3C          | 	byte	"<"
2a357     00          | 	byte	0
2a358                 | LR__4485
2a358     3E          | 	byte	">"
2a359     00          | 	byte	0
2a35a                 | LR__4486
2a35a     3C 3E       | 	byte	"<>"
2a35c     00          | 	byte	0
2a35d                 | LR__4487
2a35d     2B 2B       | 	byte	"++"
2a35f     00          | 	byte	0
2a360                 | LR__4488
2a360     2D 2D       | 	byte	"--"
2a362     00          | 	byte	0
2a363                 | LR__4489
2a363     2B          | 	byte	"+"
2a364     00          | 	byte	0
2a365                 | LR__4490
2a365     2D          | 	byte	"-"
2a366     00          | 	byte	0
2a367                 | LR__4491
2a367     3D          | 	byte	"="
2a368     00          | 	byte	0
2a369                 | LR__4492
2a369     2C          | 	byte	","
2a36a     00          | 	byte	0
2a36b                 | LR__4493
2a36b     2A          | 	byte	"*"
2a36c     00          | 	byte	0
2a36d                 | LR__4494
2a36d     2F          | 	byte	"/"
2a36e     00          | 	byte	0
2a36f                 | LR__4495
2a36f     3B          | 	byte	";"
2a370     00          | 	byte	0
2a371                 | LR__4496
2a371     22          | 	byte	34
2a372     00          | 	byte	0
2a373                 | LR__4497
2a373     5E          | 	byte	"^"
2a374     00          | 	byte	0
2a375                 | LR__4498
2a375     29          | 	byte	")"
2a376     00          | 	byte	0
2a377                 | LR__4499
2a377     28          | 	byte	"("
2a378     00          | 	byte	0
2a379                 | LR__4500
2a379     3A          | 	byte	":"
2a37a     00          | 	byte	0
2a37b                 | LR__4501
2a37b     20          | 	byte	" "
2a37c     00          | 	byte	0
2a37d                 | LR__4502
2a37d     3E          | 	byte	">"
2a37e     00          | 	byte	0
2a37f                 | LR__4503
2a37f     3C          | 	byte	"<"
2a380     00          | 	byte	0
2a381                 | LR__4504
2a381     3D          | 	byte	"="
2a382     00          | 	byte	0
2a383                 | LR__4505
2a383     62 65 65 70 | 	byte	"beep"
2a387     00          | 	byte	0
2a388                 | LR__4506
2a388     62 2E       | 	byte	"b."
2a38a     00          | 	byte	0
2a38b                 | LR__4507
2a38b     62 6F 78    | 	byte	"box"
2a38e     00          | 	byte	0
2a38f                 | LR__4508
2a38f     62 72 75 6E | 	byte	"brun"
2a393     00          | 	byte	0
2a394                 | LR__4509
2a394     62 72 2E    | 	byte	"br."
2a397     00          | 	byte	0
2a398                 | LR__4510
2a398     63 69 72 63 
2a39c     6C 65       | 	byte	"circle"
2a39e     00          | 	byte	0
2a39f                 | LR__4511
2a39f     63 69 2E    | 	byte	"ci."
2a3a2     00          | 	byte	0
2a3a3                 | LR__4512
2a3a3     63 6C 69 63 
2a3a7     6B          | 	byte	"click"
2a3a8     00          | 	byte	0
2a3a9                 | LR__4513
2a3a9     63 6C 73    | 	byte	"cls"
2a3ac     00          | 	byte	0
2a3ad                 | LR__4514
2a3ad     63 6F 6C 6F 
2a3b1     72          | 	byte	"color"
2a3b2     00          | 	byte	0
2a3b3                 | LR__4515
2a3b3     63 2E       | 	byte	"c."
2a3b5     00          | 	byte	0
2a3b6                 | LR__4516
2a3b6     63 73 61 76 
2a3ba     65          | 	byte	"csave"
2a3bb     00          | 	byte	0
2a3bc                 | LR__4517
2a3bc     63 73 2E    | 	byte	"cs."
2a3bf     00          | 	byte	0
2a3c0                 | LR__4518
2a3c0     63 75 72 73 
2a3c4     6F 72       | 	byte	"cursor"
2a3c6     00          | 	byte	0
2a3c7                 | LR__4519
2a3c7     64 65 66 73 
2a3cb     6E 64       | 	byte	"defsnd"
2a3cd     00          | 	byte	0
2a3ce                 | LR__4520
2a3ce     64 65 66 65 
2a3d2     6E 76       | 	byte	"defenv"
2a3d4     00          | 	byte	0
2a3d5                 | LR__4521
2a3d5     64 65 66 73 
2a3d9     70 72 69 74 
2a3dd     65          | 	byte	"defsprite"
2a3de     00          | 	byte	0
2a3df                 | LR__4522
2a3df     64 73 2E    | 	byte	"ds."
2a3e2     00          | 	byte	0
2a3e3                 | LR__4523
2a3e3     64 65 67    | 	byte	"deg"
2a3e6     00          | 	byte	0
2a3e7                 | LR__4524
2a3e7     64 69 6D    | 	byte	"dim"
2a3ea     00          | 	byte	0
2a3eb                 | LR__4525
2a3eb     64 69 72    | 	byte	"dir"
2a3ee     00          | 	byte	0
2a3ef                 | LR__4526
2a3ef     64 72 61 77 | 	byte	"draw"
2a3f3     00          | 	byte	0
2a3f4                 | LR__4527
2a3f4     64 72 2E    | 	byte	"dr."
2a3f7     00          | 	byte	0
2a3f8                 | LR__4528
2a3f8     65 6C 73 65 | 	byte	"else"
2a3fc     00          | 	byte	0
2a3fd                 | LR__4529
2a3fd     66 63 69 72 
2a401     63 6C 65    | 	byte	"fcircle"
2a404     00          | 	byte	0
2a405                 | LR__4530
2a405     66 63 2E    | 	byte	"fc."
2a408     00          | 	byte	0
2a409                 | LR__4531
2a409     66 69 6C 6C | 	byte	"fill"
2a40d     00          | 	byte	0
2a40e                 | LR__4532
2a40e     66 69 2E    | 	byte	"fi."
2a411     00          | 	byte	0
2a412                 | LR__4533
2a412     66 6F 6E 74 | 	byte	"font"
2a416     00          | 	byte	0
2a417                 | LR__4534
2a417     66 6F 72    | 	byte	"for"
2a41a     00          | 	byte	0
2a41b                 | LR__4535
2a41b     66 2E       | 	byte	"f."
2a41d     00          | 	byte	0
2a41e                 | LR__4536
2a41e     66 72 61 6D 
2a422     65          | 	byte	"frame"
2a423     00          | 	byte	0
2a424                 | LR__4537
2a424     66 72 2E    | 	byte	"fr."
2a427     00          | 	byte	0
2a428                 | LR__4538
2a428     67 6F 74 6F | 	byte	"goto"
2a42c     00          | 	byte	0
2a42d                 | LR__4539
2a42d     67 2E       | 	byte	"g."
2a42f     00          | 	byte	0
2a430                 | LR__4540
2a430     69 66       | 	byte	"if"
2a432     00          | 	byte	0
2a433                 | LR__4541
2a433     69 6E 6B    | 	byte	"ink"
2a436     00          | 	byte	0
2a437                 | LR__4542
2a437     69 2E       | 	byte	"i."
2a439     00          | 	byte	0
2a43a                 | LR__4543
2a43a     69 6E 74    | 	byte	"int"
2a43d     00          | 	byte	0
2a43e                 | LR__4544
2a43e     6C 69 73 74 | 	byte	"list"
2a442     00          | 	byte	0
2a443                 | LR__4545
2a443     6C 2E       | 	byte	"l."
2a445     00          | 	byte	0
2a446                 | LR__4546
2a446     6C 6F 61 64 | 	byte	"load"
2a44a     00          | 	byte	0
2a44b                 | LR__4547
2a44b     6C 6F 2E    | 	byte	"lo."
2a44e     00          | 	byte	0
2a44f                 | LR__4548
2a44f     6D 6F 64 65 | 	byte	"mode"
2a453     00          | 	byte	0
2a454                 | LR__4549
2a454     6D 2E       | 	byte	"m."
2a456     00          | 	byte	0
2a457                 | LR__4550
2a457     6D 6F 75 73 
2a45b     65          | 	byte	"mouse"
2a45c     00          | 	byte	0
2a45d                 | LR__4551
2a45d     6E 65 77    | 	byte	"new"
2a460     00          | 	byte	0
2a461                 | LR__4552
2a461     6E 65 78 74 | 	byte	"next"
2a465     00          | 	byte	0
2a466                 | LR__4553
2a466     6E 2E       | 	byte	"n."
2a468     00          | 	byte	0
2a469                 | LR__4554
2a469     70 61 70 65 
2a46d     72          | 	byte	"paper"
2a46e     00          | 	byte	0
2a46f                 | LR__4555
2a46f     70 2E       | 	byte	"p."
2a471     00          | 	byte	0
2a472                 | LR__4556
2a472     70 69 6E 66 
2a476     6C 6F 61 74 | 	byte	"pinfloat"
2a47a     00          | 	byte	0
2a47b                 | LR__4557
2a47b     70 69 6E 68 
2a47f     69          | 	byte	"pinhi"
2a480     00          | 	byte	0
2a481                 | LR__4558
2a481     70 69 6E 6C 
2a485     6F          | 	byte	"pinlo"
2a486     00          | 	byte	0
2a487                 | LR__4559
2a487     70 69 6E 73 
2a48b     74 61 72 74 | 	byte	"pinstart"
2a48f     00          | 	byte	0
2a490                 | LR__4560
2a490     70 69 6E 74 
2a494     6F 67 67 6C 
2a498     65          | 	byte	"pintoggle"
2a499     00          | 	byte	0
2a49a                 | LR__4561
2a49a     70 69 6E 77 
2a49e     72 69 74 65 | 	byte	"pinwrite"
2a4a2     00          | 	byte	0
2a4a3                 | LR__4562
2a4a3     70 6C 61 79 | 	byte	"play"
2a4a7     00          | 	byte	0
2a4a8                 | LR__4563
2a4a8     70 6C 6F 74 | 	byte	"plot"
2a4ac     00          | 	byte	0
2a4ad                 | LR__4564
2a4ad     70 6C 2E    | 	byte	"pl."
2a4b0     00          | 	byte	0
2a4b1                 | LR__4565
2a4b1     70 6F 73 69 
2a4b5     74 69 6F 6E | 	byte	"position"
2a4b9     00          | 	byte	0
2a4ba                 | LR__4566
2a4ba     70 6F 73 2E | 	byte	"pos."
2a4be     00          | 	byte	0
2a4bf                 | LR__4567
2a4bf     70 72 69 6E 
2a4c3     74          | 	byte	"print"
2a4c4     00          | 	byte	0
2a4c5                 | LR__4568
2a4c5     3F          | 	byte	"?"
2a4c6     00          | 	byte	0
2a4c7                 | LR__4569
2a4c7     72 61 64    | 	byte	"rad"
2a4ca     00          | 	byte	0
2a4cb                 | LR__4570
2a4cb     72 65 6C 65 
2a4cf     61 73 65    | 	byte	"release"
2a4d2     00          | 	byte	0
2a4d3                 | LR__4571
2a4d3     72 75 6E    | 	byte	"run"
2a4d6     00          | 	byte	0
2a4d7                 | LR__4572
2a4d7     73 61 76 65 | 	byte	"save"
2a4db     00          | 	byte	0
2a4dc                 | LR__4573
2a4dc     73 2E       | 	byte	"s."
2a4de     00          | 	byte	0
2a4df                 | LR__4574
2a4df     73 65 74 64 
2a4e3     65 6C 61 79 | 	byte	"setdelay"
2a4e7     00          | 	byte	0
2a4e8                 | LR__4575
2a4e8     73 65 74 65 
2a4ec     6E 76       | 	byte	"setenv"
2a4ee     00          | 	byte	0
2a4ef                 | LR__4576
2a4ef     73 65 74 6C 
2a4f3     65 6E       | 	byte	"setlen"
2a4f5     00          | 	byte	0
2a4f6                 | LR__4577
2a4f6     73 65 74 70 
2a4fa     61 6E       | 	byte	"setpan"
2a4fc     00          | 	byte	0
2a4fd                 | LR__4578
2a4fd     73 65 74 73 
2a501     75 73 74 61 
2a505     69 6E       | 	byte	"setsustain"
2a507     00          | 	byte	0
2a508                 | LR__4579
2a508     73 65 74 76 
2a50c     6F 6C       | 	byte	"setvol"
2a50e     00          | 	byte	0
2a50f                 | LR__4580
2a50f     73 65 74 77 
2a513     61 76 65    | 	byte	"setwave"
2a516     00          | 	byte	0
2a517                 | LR__4581
2a517     73 6F 75 6E 
2a51b     64          | 	byte	"sound"
2a51c     00          | 	byte	0
2a51d                 | LR__4582
2a51d     73 6F 2E    | 	byte	"so."
2a520     00          | 	byte	0
2a521                 | LR__4583
2a521     73 70 72 69 
2a525     74 65       | 	byte	"sprite"
2a527     00          | 	byte	0
2a528                 | LR__4584
2a528     73 70 2E    | 	byte	"sp."
2a52b     00          | 	byte	0
2a52c                 | LR__4585
2a52c     74 68 65 6E | 	byte	"then"
2a530     00          | 	byte	0
2a531                 | LR__4586
2a531     77 61 69 74 
2a535     6D 73       | 	byte	"waitms"
2a537     00          | 	byte	0
2a538                 | LR__4587
2a538     77 61 69 74 
2a53c     63 6C 6F 63 
2a540     6B          | 	byte	"waitclock"
2a541     00          | 	byte	0
2a542                 | LR__4588
2a542     77 63 2E    | 	byte	"wc."
2a545     00          | 	byte	0
2a546                 | LR__4589
2a546     77 61 69 74 
2a54a     76 62 6C    | 	byte	"waitvbl"
2a54d     00          | 	byte	0
2a54e                 | LR__4590
2a54e     77 76 2E    | 	byte	"wv."
2a551     00          | 	byte	0
2a552                 | LR__4591
2a552     77 78 70 69 
2a556     6E          | 	byte	"wxpin"
2a557     00          | 	byte	0
2a558                 | LR__4592
2a558     77 79 70 69 
2a55c     6E          | 	byte	"wypin"
2a55d     00          | 	byte	0
2a55e                 | LR__4593
2a55e     61 63 6F 73 | 	byte	"acos"
2a562     00          | 	byte	0
2a563                 | LR__4594
2a563     61 73 69 6E | 	byte	"asin"
2a567     00          | 	byte	0
2a568                 | LR__4595
2a568     61 74 6E    | 	byte	"atn"
2a56b     00          | 	byte	0
2a56c                 | LR__4596
2a56c     63 6F 73    | 	byte	"cos"
2a56f     00          | 	byte	0
2a570                 | LR__4597
2a570     67 65 74 70 
2a574     69 78 65 6C | 	byte	"getpixel"
2a578     00          | 	byte	0
2a579                 | LR__4598
2a579     67 65 2E    | 	byte	"ge."
2a57c     00          | 	byte	0
2a57d                 | LR__4599
2a57d     67 65 74 65 
2a581     6E 76 73 75 
2a585     73 74 61 69 
2a589     6E          | 	byte	"getenvsustain"
2a58a     00          | 	byte	0
2a58b                 | LR__4600
2a58b     67 65 74 74 
2a58f     69 6D 65    | 	byte	"gettime"
2a592     00          | 	byte	0
2a593                 | LR__4601
2a593     6D 6F 75 73 
2a597     65 6B       | 	byte	"mousek"
2a599     00          | 	byte	0
2a59a                 | LR__4602
2a59a     6D 6F 75 73 
2a59e     65 77       | 	byte	"mousew"
2a5a0     00          | 	byte	0
2a5a1                 | LR__4603
2a5a1     6D 6F 75 73 
2a5a5     65 78       | 	byte	"mousex"
2a5a7     00          | 	byte	0
2a5a8                 | LR__4604
2a5a8     6D 6F 75 73 
2a5ac     65 79       | 	byte	"mousey"
2a5ae     00          | 	byte	0
2a5af                 | LR__4605
2a5af     70 69 6E 72 
2a5b3     65 61 64    | 	byte	"pinread"
2a5b6     00          | 	byte	0
2a5b7                 | LR__4606
2a5b7     72 64 70 69 
2a5bb     6E          | 	byte	"rdpin"
2a5bc     00          | 	byte	0
2a5bd                 | LR__4607
2a5bd     72 71 70 69 
2a5c1     6E          | 	byte	"rqpin"
2a5c2     00          | 	byte	0
2a5c3                 | LR__4608
2a5c3     72 6E 64    | 	byte	"rnd"
2a5c6     00          | 	byte	0
2a5c7                 | LR__4609
2a5c7     73 69 6E    | 	byte	"sin"
2a5ca     00          | 	byte	0
2a5cb                 | LR__4610
2a5cb     73 71 72    | 	byte	"sqr"
2a5ce     00          | 	byte	0
2a5cf                 | LR__4611
2a5cf     73 74 69 63 
2a5d3     6B          | 	byte	"stick"
2a5d4     00          | 	byte	0
2a5d5                 | LR__4612
2a5d5     73 74 72 69 
2a5d9     67          | 	byte	"strig"
2a5da     00          | 	byte	0
2a5db                 | LR__4613
2a5db     74 61 6E    | 	byte	"tan"
2a5de     00          | 	byte	0
2a5df                 | LR__4614
2a5df     61          | 	byte	"a"
2a5e0     00          | 	byte	0
2a5e1                 | LR__4615
2a5e1     7A          | 	byte	"z"
2a5e2     00          | 	byte	0
2a5e3                 | LR__4616
2a5e3     5F          | 	byte	"_"
2a5e4     00          | 	byte	0
2a5e5                 | LR__4617
2a5e5     61          | 	byte	"a"
2a5e6     00          | 	byte	0
2a5e7                 | LR__4618
2a5e7     7A          | 	byte	"z"
2a5e8     00          | 	byte	0
2a5e9                 | LR__4619
2a5e9     30          | 	byte	"0"
2a5ea     00          | 	byte	0
2a5eb                 | LR__4620
2a5eb     39          | 	byte	"9"
2a5ec     00          | 	byte	0
2a5ed                 | LR__4621
2a5ed     5F          | 	byte	"_"
2a5ee     00          | 	byte	0
2a5ef                 | LR__4622
2a5ef     2E          | 	byte	"."
2a5f0     00          | 	byte	0
2a5f1                 | LR__4623
2a5f1     61          | 	byte	"a"
2a5f2     00          | 	byte	0
2a5f3                 | LR__4624
2a5f3     7A          | 	byte	"z"
2a5f4     00          | 	byte	0
2a5f5                 | LR__4625
2a5f5     30          | 	byte	"0"
2a5f6     00          | 	byte	0
2a5f7                 | LR__4626
2a5f7     39          | 	byte	"9"
2a5f8     00          | 	byte	0
2a5f9                 | LR__4627
2a5f9     5F          | 	byte	"_"
2a5fa     00          | 	byte	0
2a5fb                 | LR__4628
2a5fb     24          | 	byte	"$"
2a5fc     00          | 	byte	0
2a5fd                 | LR__4629
2a5fd     25          | 	byte	"%"
2a5fe     00          | 	byte	0
2a5ff                 | LR__4630
2a5ff     21          | 	byte	"!"
2a600     00          | 	byte	0
2a601                 | LR__4631
2a601     30          | 	byte	"0"
2a602     00          | 	byte	0
2a603                 | LR__4632
2a603     39          | 	byte	"9"
2a604     00          | 	byte	0
2a605                 | LR__4633
2a605     2E          | 	byte	"."
2a606     00          | 	byte	0
2a607                 | LR__4634
2a607     24          | 	byte	"$"
2a608     00          | 	byte	0
2a609                 | LR__4635
2a609     25          | 	byte	"%"
2a60a     00          | 	byte	0
2a60b                 | LR__4636
2a60b     2D          | 	byte	"-"
2a60c     00          | 	byte	0
2a60d                 | LR__4637
2a60d     2E          | 	byte	"."
2a60e     00          | 	byte	0
2a60f                 | LR__4638
2a60f     30          | 	byte	"0"
2a610     00          | 	byte	0
2a611                 | LR__4639
2a611     39          | 	byte	"9"
2a612     00          | 	byte	0
2a613                 | LR__4640
2a613     5F          | 	byte	"_"
2a614     00          | 	byte	0
2a615                 | LR__4641
2a615     2E          | 	byte	"."
2a616     00          | 	byte	0
2a617                 | LR__4642
2a617     45          | 	byte	"E"
2a618     00          | 	byte	0
2a619                 | LR__4643
2a619     65          | 	byte	"e"
2a61a     00          | 	byte	0
2a61b                 | LR__4644
2a61b     2D          | 	byte	"-"
2a61c     00          | 	byte	0
2a61d                 | LR__4645
2a61d     2D          | 	byte	"-"
2a61e     00          | 	byte	0
2a61f                 | LR__4646
2a61f     65          | 	byte	"e"
2a620     00          | 	byte	0
2a621                 | LR__4647
2a621     2E          | 	byte	"."
2a622     00          | 	byte	0
2a623                 | LR__4648
2a623     45          | 	byte	"E"
2a624     00          | 	byte	0
2a625                 | LR__4649
2a625     65          | 	byte	"e"
2a626     00          | 	byte	0
2a627                 | LR__4650
2a627     30          | 	byte	"0"
2a628     00          | 	byte	0
2a629                 | LR__4651
2a629     39          | 	byte	"9"
2a62a     00          | 	byte	0
2a62b                 | LR__4652
2a62b     24          | 	byte	"$"
2a62c     00          | 	byte	0
2a62d                 | LR__4653
2a62d     25          | 	byte	"%"
2a62e     00          | 	byte	0
2a62f                 | LR__4654
2a62f     2D          | 	byte	"-"
2a630     00          | 	byte	0
2a631                 | LR__4655
2a631     30          | 	byte	"0"
2a632     00          | 	byte	0
2a633                 | LR__4656
2a633     39          | 	byte	"9"
2a634     00          | 	byte	0
2a635                 | LR__4657
2a635     5F          | 	byte	"_"
2a636     00          | 	byte	0
2a637                 | LR__4658
2a637     30          | 	byte	"0"
2a638     00          | 	byte	0
2a639                 | LR__4659
2a639     39          | 	byte	"9"
2a63a     00          | 	byte	0
2a63b                 | LR__4660
2a63b     5F          | 	byte	"_"
2a63c     00          | 	byte	0
2a63d                 | LR__4661
2a63d     22          | 	byte	34
2a63e     00          | 	byte	0
2a63f                 | LR__4662
2a63f     22          | 	byte	34
2a640     00          | 	byte	0
2a641                 | LR__4663
2a641     44 69 6D 3A 
2a645     20 61 74 20 
2a649     6C 69 6E 65 
2a64d     20          | 	byte	"Dim: at line "
2a64e     00          | 	byte	0
2a64f                 | LR__4664
2a64f     3A 20 77 61 
2a653     72 6E 69 6E 
2a657     67 3A 20 74 
2a65b     68 65 20 76 
2a65f     61 72 69 61 
2a663     62 6C 65 20 
2a667     65 78 69 73 
2a66b     74 65 64 2E | 	byte	": warning: the variable existed."
2a66f     00          | 	byte	0
2a670                 | LR__4665
2a670     28          | 	byte	"("
2a671     00          | 	byte	0
2a672                 | LR__4666
2a672     61 73       | 	byte	"as"
2a674     00          | 	byte	0
2a675                 | LR__4667
2a675     61 73       | 	byte	"as"
2a677     00          | 	byte	0
2a678                 | LR__4668
2a678     2C          | 	byte	","
2a679     00          | 	byte	0
2a67a                 | LR__4669
2a67a     29          | 	byte	")"
2a67b     00          | 	byte	0
2a67c                 | LR__4670
2a67c     29          | 	byte	")"
2a67d     00          | 	byte	0
2a67e                 | LR__4671
2a67e     61 73       | 	byte	"as"
2a680     00          | 	byte	0
2a681                 | LR__4672
2a681     62 79 74 65 | 	byte	"byte"
2a685     00          | 	byte	0
2a686                 | LR__4673
2a686     75 62 79 74 
2a68a     65          | 	byte	"ubyte"
2a68b     00          | 	byte	0
2a68c                 | LR__4674
2a68c     73 68 6F 72 
2a690     74          | 	byte	"short"
2a691     00          | 	byte	0
2a692                 | LR__4675
2a692     75 73 68 6F 
2a696     72 74       | 	byte	"ushort"
2a698     00          | 	byte	0
2a699                 | LR__4676
2a699     6C 6F 6E 67 | 	byte	"long"
2a69d     00          | 	byte	0
2a69e                 | LR__4677
2a69e     69 6E 74 65 
2a6a2     67 65 72    | 	byte	"integer"
2a6a5     00          | 	byte	0
2a6a6                 | LR__4678
2a6a6     75 6C 6F 6E 
2a6aa     67          | 	byte	"ulong"
2a6ab     00          | 	byte	0
2a6ac                 | LR__4679
2a6ac     69 6E 74 36 
2a6b0     34          | 	byte	"int64"
2a6b1     00          | 	byte	0
2a6b2                 | LR__4680
2a6b2     75 69 6E 74 
2a6b6     36 34       | 	byte	"uint64"
2a6b8     00          | 	byte	0
2a6b9                 | LR__4681
2a6b9     73 69 6E 67 
2a6bd     6C 65       | 	byte	"single"
2a6bf     00          | 	byte	0
2a6c0                 | LR__4682
2a6c0     64 6F 75 62 
2a6c4     6C 65       | 	byte	"double"
2a6c6     00          | 	byte	0
2a6c7                 | LR__4683
2a6c7     73 74 72 69 
2a6cb     6E 67       | 	byte	"string"
2a6cd     00          | 	byte	0
2a6ce                 | LR__4684
2a6ce     74 6F       | 	byte	"to"
2a6d0     00          | 	byte	0
2a6d1                 | LR__4685
2a6d1     73 74 65 70 | 	byte	"step"
2a6d5     00          | 	byte	0
2a6d6                 | LR__4686
2a6d6     73 2E       | 	byte	"s."
2a6d8     00          | 	byte	0
2a6d9                 | LR__4687
2a6d9     57 65 20 68 
2a6dd     61 76 65 20 
2a6e1     61 20 73 6C 
2a6e5     6F 77 20 67 
2a6e9     6F 74 6F 2C 
2a6ed     20 74 6F 64 
2a6f1     6F 20 20    | 	byte	"We have a slow goto, todo  "
2a6f4     00          | 	byte	0
2a6f5                 | LR__4688
2a6f5     6E 6F 6E 61 
2a6f9     6D 65 2E 62 
2a6fd     61 73       | 	byte	"noname.bas"
2a6ff     00          | 	byte	0
2a700                 | LR__4689
2a700                 | 	byte	
2a700     00          | 	byte	0
2a701                 | LR__4690
2a701     6E 6F 6E 61 
2a705     6D 65 2E 62 
2a709     61 73       | 	byte	"noname.bas"
2a70b     00          | 	byte	0
2a70c                 | LR__4691
2a70c     2F          | 	byte	"/"
2a70d     00          | 	byte	0
2a70e                 | LR__4692
2a70e                 | 	byte	
2a70e     00          | 	byte	0
2a70f                 | LR__4693
2a70f                 | 	byte	
2a70f     00          | 	byte	0
2a710                 | LR__4694
2a710     6E 6F 6E 61 
2a714     6D 65 2E 62 
2a718     61 73       | 	byte	"noname.bas"
2a71a     00          | 	byte	0
2a71b                 | LR__4695
2a71b     2F          | 	byte	"/"
2a71c     00          | 	byte	0
2a71d                 | LR__4696
2a71d     53 79 73 74 
2a721     65 6D 20 65 
2a725     72 72 6F 72 
2a729     20          | 	byte	"System error "
2a72a     00          | 	byte	0
2a72b                 | LR__4697
2a72b     3A 20       | 	byte	": "
2a72d     00          | 	byte	0
2a72e                 | LR__4698
2a72e     2F          | 	byte	"/"
2a72f     00          | 	byte	0
2a730                 | LR__4699
2a730     30          | 	byte	"0"
2a731     00          | 	byte	0
2a732                 | LR__4700
2a732     39          | 	byte	"9"
2a733     00          | 	byte	0
2a734                 | LR__4701
2a734                 | 	byte	
2a734     00          | 	byte	0
2a735                 | LR__4702
2a735     53 74 6F 70 
2a739     70 65 64 20 
2a73d     61 74 20 6C 
2a741     69 6E 65 20 | 	byte	"Stopped at line "
2a745     00          | 	byte	0
2a746                 | LR__4703
2a746                 | 	byte	
2a746     00          | 	byte	0
2a747                 | LR__4704
2a747                 | 	byte	
2a747     00          | 	byte	0
2a748                 | LR__4705
2a748     2F 73 64 2F 
2a74c     6D 65 64 69 
2a750     61 2F 68 2F | 	byte	"/sd/media/h/"
2a754     00          | 	byte	0
2a755                 | LR__4706
2a755     53 79 73 74 
2a759     65 6D 20 65 
2a75d     72 72 6F 72 
2a761     20          | 	byte	"System error "
2a762     00          | 	byte	0
2a763                 | LR__4707
2a763     3A 20       | 	byte	": "
2a765     00          | 	byte	0
2a766                 | LR__4708
2a766                 | 	byte	
2a766     00          | 	byte	0
2a767                 | LR__4709
2a767                 | 	byte	
2a767     00          | 	byte	0
2a768                 | LR__4710
2a768     2F 73 64 2F 
2a76c     6D 65 64 69 
2a770     61 2F 73 2F | 	byte	"/sd/media/s/"
2a774     00          | 	byte	0
2a775                 | LR__4711
2a775     53 79 73 74 
2a779     65 6D 20 65 
2a77d     72 72 6F 72 
2a781     20          | 	byte	"System error "
2a782     00          | 	byte	0
2a783                 | LR__4712
2a783     3A 20       | 	byte	": "
2a785     00          | 	byte	0
2a786                 | LR__4713
2a786     45 72 72 6F 
2a78a     72 20       | 	byte	"Error "
2a78c     00          | 	byte	0
2a78d                 | LR__4714
2a78d     3A 20       | 	byte	": "
2a78f     00          | 	byte	0
2a790                 | LR__4715
2a790                 | 	byte	
2a790     00          | 	byte	0
2a791                 | LR__4716
2a791     72 6E 64 3A 
2a795     20          | 	byte	"rnd: "
2a796     00          | 	byte	0
2a797                 | LR__4717
2a797     72 6E 64 3A 
2a79b     20          | 	byte	"rnd: "
2a79c     00          | 	byte	0
2a79d                 | LR__4718
2a79d     67 65 74 65 
2a7a1     6E 76 73 75 
2a7a5     73 74 61 69 
2a7a9     6E 3A 20    | 	byte	"getenvsustain: "
2a7ac     00          | 	byte	0
2a7ad                 | LR__4719
2a7ad     73 69 6E 3A 
2a7b1     20          | 	byte	"sin: "
2a7b2     00          | 	byte	0
2a7b3                 | LR__4720
2a7b3     63 6F 73 3A 
2a7b7     20          | 	byte	"cos: "
2a7b8     00          | 	byte	0
2a7b9                 | LR__4721
2a7b9     74 61 6E 3A 
2a7bd     20          | 	byte	"tan: "
2a7be     00          | 	byte	0
2a7bf                 | LR__4722
2a7bf     61 73 69 6E 
2a7c3     3A 20       | 	byte	"asin: "
2a7c5     00          | 	byte	0
2a7c6                 | LR__4723
2a7c6     61 63 6F 73 
2a7ca     3A 20       | 	byte	"acos: "
2a7cc     00          | 	byte	0
2a7cd                 | LR__4724
2a7cd     61 74 6E 3A 
2a7d1     20          | 	byte	"atn: "
2a7d2     00          | 	byte	0
2a7d3                 | LR__4725
2a7d3     73 71 72 3A 
2a7d7     20          | 	byte	"sqr: "
2a7d8     00          | 	byte	0
2a7d9                 | LR__4726
2a7d9     73 74 69 63 
2a7dd     6B 3A 20    | 	byte	"stick: "
2a7e0     00          | 	byte	0
2a7e1                 | LR__4727
2a7e1     73 74 72 69 
2a7e5     67 3A 20    | 	byte	"strig: "
2a7e8     00          | 	byte	0
2a7e9                 | LR__4728
2a7e9     67 65 74 70 
2a7ed     69 78 65 6C 
2a7f1     3A 20       | 	byte	"getpixel: "
2a7f3     00          | 	byte	0
2a7f4                 | LR__4729
2a7f4                 | 	byte	
2a7f4     00          | 	byte	0
2a7f5                 | LR__4730
2a7f5     2F 73 64 2F 
2a7f9     62 61 73    | 	byte	"/sd/bas"
2a7fc     00          | 	byte	0
2a7fd                 | LR__4731
2a7fd     57 6F 72 6B 
2a801     69 6E 67 20 
2a805     64 69 72 65 
2a809     63 74 6F 72 
2a80d     79 3A 20    | 	byte	"Working directory: "
2a810     00          | 	byte	0
2a811                 | LR__4732
2a811     2A          | 	byte	"*"
2a812     00          | 	byte	0
2a813                 | LR__4733
2a813                 | 	byte	
2a813     00          | 	byte	0
2a814                 | LR__4734
2a814     5B 64 69 72 
2a818     5D 20       | 	byte	"[dir] "
2a81a     00          | 	byte	0
2a81b                 | LR__4735
2a81b     2A          | 	byte	"*"
2a81c     00          | 	byte	0
2a81d                 | LR__4736
2a81d                 | 	byte	
2a81d     00          | 	byte	0
2a81e                 | LR__4737
2a81e     2D 2D 2D 2D 
2a822     2D 6D 6F 72 
2a826     65 2C 20 70 
2a82a     72 65 73 73 
2a82e     20 61 6E 79 
2a832     20 6B 65 79 | 	byte	"-----more, press any key"
2a836     00          | 	byte	0
2a837                 | LR__4738
2a837     20 20 20 20 
      ...             
2a84f     20 20 20 20 
2a853     20          | 	byte	"                             "
2a854     00          | 	byte	0
2a855                 | LR__4739
2a855     2F          | 	byte	"/"
2a856     00          | 	byte	0
2a857                 | LR__4740
2a857     2F 73 64 2F 
2a85b     62 69 6E 2F | 	byte	"/sd/bin/"
2a85f     00          | 	byte	0
2a860                 | LR__4741
2a860     53 79 73 74 
2a864     65 6D 20 65 
2a868     72 72 6F 72 
2a86c     20          | 	byte	"System error "
2a86d     00          | 	byte	0
2a86e                 | LR__4742
2a86e     3A 20       | 	byte	": "
2a870     00          | 	byte	0
2a871                 | LR__4743
2a871                 | 	byte	
2a871     00          | 	byte	0
2a872                 | LR__4744
2a872     45 78 70 65 
2a876     63 74 65 64 
2a87a     20 6E 75 6D 
2a87e     62 65 72 2C 
2a882     20 67 6F 74 
2a886     20 73 6F 6D 
2a88a     65 74 68 69 
2a88e     6E 67 20 65 
2a892     6C 73 65 2E | 	byte	"Expected number, got something else."
2a896     00          | 	byte	0
2a897                 | LR__4745
2a897     43 61 6E 6E 
2a89b     6F 74 20 61 
2a89f     64 64 20 61 
2a8a3     20 6E 75 6D 
2a8a7     62 65 72 20 
2a8ab     74 6F 20 61 
2a8af     20 73 74 72 
2a8b3     69 6E 67 2E | 	byte	"Cannot add a number to a string."
2a8b7     00          | 	byte	0
2a8b8                 | LR__4746
2a8b8     43 61 6E 6E 
2a8bc     6F 74 20 73 
2a8c0     75 62 73 74 
2a8c4     72 61 63 74 
2a8c8     20 73 74 72 
2a8cc     69 6E 67 73 
2a8d0     2E          | 	byte	"Cannot substract strings."
2a8d1     00          | 	byte	0
2a8d2                 | LR__4747
2a8d2     55 6E 6B 6E 
2a8d6     6F 77 6E 20 
2a8da     65 72 72 6F 
2a8de     72 20 77 68 
2a8e2     69 6C 65 20 
2a8e6     61 64 64 69 
2a8ea     6E 67 2E    | 	byte	"Unknown error while adding."
2a8ed     00          | 	byte	0
2a8ee                 | LR__4748
2a8ee     55 6E 6B 6E 
2a8f2     6F 77 6E 20 
2a8f6     65 72 72 6F 
2a8fa     72 20 77 68 
2a8fe     69 6C 65 20 
2a902     73 75 62 73 
2a906     74 72 61 63 
2a90a     74 69 6E 67 
2a90e     2E          | 	byte	"Unknown error while substracting."
2a90f     00          | 	byte	0
2a910                 | LR__4749
2a910     43 61 6E 6E 
2a914     6F 74 20 64 
2a918     6F 20 6C 6F 
2a91c     67 69 63 20 
2a920     6F 70 65 72 
2a924     61 74 69 6F 
2a928     6E 20 6F 6E 
2a92c     20 73 74 72 
2a930     69 6E 67 20 
2a934     6F 72 20 66 
2a938     6C 6F 61 74 
2a93c     2E          | 	byte	"Cannot do logic operation on string or float."
2a93d     00          | 	byte	0
2a93e                 | LR__4750
2a93e     55 6E 6B 6E 
2a942     6F 77 6E 20 
2a946     65 72 72 6F 
2a94a     72 20 77 68 
2a94e     69 6C 65 20 
2a952     64 6F 69 6E 
2a956     67 20 6C 6F 
2a95a     67 69 63 20 
2a95e     6F 70 65 72 
2a962     61 74 69 6F 
2a966     6E 2E       | 	byte	"Unknown error while doing logic operation."
2a968     00          | 	byte	0
2a969                 | LR__4751
2a969     43 61 6E 6E 
2a96d     6F 74 20 6D 
2a971     75 6C 74 69 
2a975     70 6C 79 20 
2a979     73 74 72 69 
2a97d     6E 67 73 2E | 	byte	"Cannot multiply strings."
2a981     00          | 	byte	0
2a982                 | LR__4752
2a982     55 6E 6B 6E 
2a986     6F 77 6E 20 
2a98a     65 72 72 6F 
2a98e     72 20 77 68 
2a992     69 6C 65 20 
2a996     6D 75 6C 74 
2a99a     69 70 6C 79 
2a99e     69 6E 67 2E | 	byte	"Unknown error while multiplying."
2a9a2     00          | 	byte	0
2a9a3                 | LR__4753
2a9a3     43 61 6E 6E 
2a9a7     6F 74 20 64 
2a9ab     69 76 69 64 
2a9af     65 20 73 74 
2a9b3     72 69 6E 67 
2a9b7     73 2E       | 	byte	"Cannot divide strings."
2a9b9     00          | 	byte	0
2a9ba                 | LR__4754
2a9ba     55 6E 6B 6E 
2a9be     6F 77 6E 20 
2a9c2     65 72 72 6F 
2a9c6     72 20 77 68 
2a9ca     69 6C 65 20 
2a9ce     64 69 76 69 
2a9d2     64 69 6E 67 
2a9d6     2E          | 	byte	"Unknown error while dividing."
2a9d7     00          | 	byte	0
2a9d8                 | LR__4755
2a9d8     43 61 6E 6E 
2a9dc     6F 74 20 63 
2a9e0     6F 6D 70 75 
2a9e4     74 65 20 61 
2a9e8     20 70 6F 77 
2a9ec     65 72 20 6F 
2a9f0     66 20 61 20 
2a9f4     73 74 72 69 
2a9f8     6E 67 2E    | 	byte	"Cannot compute a power of a string."
2a9fb     00          | 	byte	0
2a9fc                 | LR__4756
2a9fc     55 6E 6B 6E 
2aa00     6F 77 6E 20 
2aa04     65 72 72 6F 
2aa08     72 20 77 68 
2aa0c     69 6C 65 20 
2aa10     63 6F 6D 70 
2aa14     75 74 69 6E 
2aa18     67 20 61 20 
2aa1c     70 6F 77 65 
2aa20     72 2E       | 	byte	"Unknown error while computing a power."
2aa22     00          | 	byte	0
2aa23                 | LR__4757
2aa23     52 69 67 68 
2aa27     74 20 70 61 
2aa2b     72 65 6E 74 
2aa2f     68 65 73 69 
2aa33     73 20 65 78 
2aa37     70 65 63 74 
2aa3b     65 64 2E    | 	byte	"Right parenthesis expected."
2aa3e     00          | 	byte	0
2aa3f                 | LR__4758
2aa3f     45 78 70 65 
2aa43     63 74 65 64 
2aa47     20 73 74 72 
2aa4b     69 6E 67 2E | 	byte	"Expected string."
2aa4f     00          | 	byte	0
2aa50                 | LR__4759
2aa50     45 78 70 65 
2aa54     63 74 65 64 
2aa58     20 66 6C 6F 
2aa5c     61 74 2E    | 	byte	"Expected float."
2aa5f     00          | 	byte	0
2aa60                 | LR__4760
2aa60     45 78 70 65 
2aa64     63 74 65 64 
2aa68     20 75 6E 73 
2aa6c     69 67 6E 65 
2aa70     64 20 69 6E 
2aa74     74 65 67 65 
2aa78     72 2E       | 	byte	"Expected unsigned integer."
2aa7a     00          | 	byte	0
2aa7b                 | LR__4761
2aa7b     45 78 70 65 
2aa7f     63 74 65 64 
2aa83     20 69 6E 74 
2aa87     65 67 65 72 
2aa8b     2E          | 	byte	"Expected integer."
2aa8c     00          | 	byte	0
2aa8d                 | LR__4762
2aa8d     4E 6F 20 6D 
2aa91     6F 72 65 20 
2aa95     76 61 72 69 
2aa99     61 62 6C 65 
2aa9d     20 73 6C 6F 
2aaa1     74 73 2E    | 	byte	"No more variable slots."
2aaa4     00          | 	byte	0
2aaa5                 | LR__4763
2aaa5     56 61 72 69 
2aaa9     61 62 6C 65 
2aaad     20 6E 6F 74 
2aab1     20 66 6F 75 
2aab5     6E 64 2E    | 	byte	"Variable not found."
2aab8     00          | 	byte	0
2aab9                 | LR__4764
2aab9     43 6F 6D 6D 
2aabd     61 20 65 78 
2aac1     70 65 63 74 
2aac5     65 64 2E    | 	byte	"Comma expected."
2aac8     00          | 	byte	0
2aac9                 | LR__4765
2aac9     43 6F 6D 6D 
2aacd     61 20 6F 72 
2aad1     20 73 65 6D 
2aad5     69 63 6F 6C 
2aad9     6F 6E 20 65 
2aadd     78 70 65 63 
2aae1     74 65 64 2E | 	byte	"Comma or semicolon expected."
2aae5     00          | 	byte	0
2aae6                 | LR__4766
2aae6     55 6E 6B 6E 
2aaea     6F 77 6E 20 
2aaee     63 6F 6D 6D 
2aaf2     61 6E 64 2E | 	byte	"Unknown command."
2aaf6     00          | 	byte	0
2aaf7                 | LR__4767
2aaf7     53 74 61 63 
2aafb     6B 20 75 6E 
2aaff     64 65 72 66 
2ab03     6C 6F 77 2E | 	byte	"Stack underflow."
2ab07     00          | 	byte	0
2ab08                 | LR__4768
2ab08     43 61 6E 6E 
2ab0c     6F 74 20 65 
2ab10     78 65 63 75 
2ab14     74 65 20 67 
2ab18     6F 74 6F 20 
2ab1c     69 6E 20 74 
2ab20     68 65 20 69 
2ab24     6D 6D 65 64 
2ab28     69 61 74 65 
2ab2c     20 6D 6F 64 
2ab30     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
2ab32     00          | 	byte	0
2ab33                 | LR__4769
2ab33     43 61 6E 6E 
2ab37     6F 74 20 6C 
2ab3b     6F 61 64 20 
2ab3f     66 72 6F 6D 
2ab43     20 74 68 69 
2ab47     73 20 66 69 
2ab4b     6C 65 2E    | 	byte	"Cannot load from this file."
2ab4e     00          | 	byte	0
2ab4f                 | LR__4770
2ab4f     54 68 65 20 
2ab53     70 72 6F 67 
2ab57     72 61 6D 20 
2ab5b     69 73 20 65 
2ab5f     6D 70 74 79 
2ab63     2E          | 	byte	"The program is empty."
2ab64     00          | 	byte	0
2ab65                 | LR__4771
2ab65     49 66 20 61 
2ab69     66 74 65 72 
2ab6d     20 69 66 2E | 	byte	"If after if."
2ab71     00          | 	byte	0
2ab72                 | LR__4772
2ab72     45 6D 70 74 
2ab76     79 20 65 78 
2ab7a     70 72 65 73 
2ab7e     73 69 6F 6E 
2ab82     2E          | 	byte	"Empty expression."
2ab83     00          | 	byte	0
2ab84                 | LR__4773
2ab84     53 74 72 69 
2ab88     6E 67 20 65 
2ab8c     78 70 65 63 
2ab90     74 65 64 2E | 	byte	"String expected."
2ab94     00          | 	byte	0
2ab95                 | LR__4774
2ab95     49 6E 74 65 
2ab99     72 70 72 65 
2ab9d     74 65 72 20 
2aba1     69 6E 74 65 
2aba5     72 6E 61 6C 
2aba9     20 65 72 72 
2abad     6F 72 2E    | 	byte	"Interpreter internal error."
2abb0     00          | 	byte	0
2abb1                 | LR__4775
2abb1     45 78 70 65 
2abb5     63 74 65 64 
2abb9     20 61 73 73 
2abbd     69 67 6E 2E | 	byte	"Expected assign."
2abc1     00          | 	byte	0
2abc2                 | LR__4776
2abc2     45 78 70 65 
2abc6     63 74 65 64 
2abca     20 27 74 6F 
2abce     27 2E       | 	byte	"Expected 'to'."
2abd0     00          | 	byte	0
2abd1                 | LR__4777
2abd1     45 78 70 65 
2abd5     63 74 65 64 
2abd9     20 69 6E 74 
2abdd     65 67 65 72 
2abe1     20 76 61 72 
2abe5     69 61 62 6C 
2abe9     65 2E       | 	byte	"Expected integer variable."
2abeb     00          | 	byte	0
2abec                 | LR__4778
2abec     55 6E 69 6E 
2abf0     69 74 69 61 
2abf4     6C 69 7A 65 
2abf8     64 20 76 61 
2abfc     72 69 61 62 
2ac00     6C 65 20 69 
2ac04     6E 20 27 6E 
2ac08     65 78 74 27 
2ac0c     2C 20 75 73 
2ac10     65 20 27 66 
2ac14     6F 72 27 20 
2ac18     62 65 66 6F 
2ac1c     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
2ac1f     00          | 	byte	0
2ac20                 | LR__4779
2ac20     4E 6F 20 6D 
2ac24     6F 72 65 20 
2ac28     73 6C 6F 74 
2ac2c     73 20 66 6F 
2ac30     72 20 27 66 
2ac34     6F 72 27 2E | 	byte	"No more slots for 'for'."
2ac38     00          | 	byte	0
2ac39                 | LR__4780
2ac39     27 4E 65 78 
2ac3d     74 27 20 64 
2ac41     6F 65 73 6E 
2ac45     27 74 20 6D 
2ac49     61 74 63 68 
2ac4d     20 27 66 6F 
2ac51     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
2ac54     00          | 	byte	0
2ac55                 | LR__4781
2ac55     27 47 6F 74 
2ac59     6F 27 20 74 
2ac5d     61 72 67 65 
2ac61     74 20 6C 69 
2ac65     6E 65 20 6E 
2ac69     6F 74 20 66 
2ac6d     6F 75 6E 64 
2ac71     2E          | 	byte	"'Goto' target line not found."
2ac72     00          | 	byte	0
2ac73                 | LR__4782
2ac73     42 61 64 20 
2ac77     6E 75 6D 62 
2ac7b     65 72 20 6F 
2ac7f     66 20 70 61 
2ac83     72 61 6D 65 
2ac87     74 65 72 73 | 	byte	"Bad number of parameters"
2ac8b     00          | 	byte	0
2ac8c                 | LR__4783
2ac8c     46 75 6E 63 
2ac90     74 69 6F 6E 
2ac94     20 75 6E 64 
2ac98     65 66 69 6E 
2ac9c     65 64 20 66 
2aca0     6F 72 20 73 
2aca4     74 72 69 6E 
2aca8     67 73       | 	byte	"Function undefined for strings"
2acaa     00          | 	byte	0
2acab                 | LR__4784
2acab     42 61 64 20 
2acaf     70 61 72 61 
2acb3     6D 65 74 65 
2acb7     72 2E       | 	byte	"Bad parameter."
2acb9     00          | 	byte	0
2acba                 | LR__4785
2acba     43 61 6E 6E 
2acbe     6F 74 20 64 
2acc2     65 63 6C 61 
2acc6     72 65 20 61 
2acca     6E 20 61 72 
2acce     72 61 79 3A 
2acd2     20 74 68 65 
2acd6     20 76 61 72 
2acda     69 61 62 6C 
2acde     65 20 65 78 
2ace2     69 73 74 73 
2ace6     2E          | 	byte	"Cannot declare an array: the variable exists."
2ace7     00          | 	byte	0
2ace8                 | LR__4786
2ace8     45 78 70 65 
2acec     63 74 65 64 
2acf0     20 27 28 27 
2acf4     2E          | 	byte	"Expected '('."
2acf5     00          | 	byte	0
2acf6                 | LR__4787
2acf6     45 78 70 65 
2acfa     63 74 65 64 
2acfe     20 27 29 27 
2ad02     20 6F 72 20 
2ad06     27 2C 27 2E | 	byte	"Expected ')' or ','."
2ad0a     00          | 	byte	0
2ad0b                 | LR__4788
2ad0b     4E 6F 20 6D 
2ad0f     6F 72 65 20 
2ad13     74 68 61 6E 
2ad17     20 33 20 64 
2ad1b     69 6D 65 6E 
2ad1f     73 69 6F 6E 
2ad23     73 20 73 75 
2ad27     70 70 6F 72 
2ad2b     74 65 64    | 	byte	"No more than 3 dimensions supported"
2ad2e     00          | 	byte	0
2ad2f                 | LR__4789
2ad2f     56 61 72 69 
2ad33     61 62 6C 65 
2ad37     20 6E 61 6D 
2ad3b     65 20 65 78 
2ad3f     70 65 63 74 
2ad43     65 64       | 	byte	"Variable name expected"
2ad45     00          | 	byte	0
2ad46                 | LR__4790
2ad46     54 79 70 65 
2ad4a     20 6E 61 6D 
2ad4e     65 20 65 78 
2ad52     70 65 63 74 
2ad56     65 64       | 	byte	"Type name expected"
2ad58     00          | 	byte	0
2ad59                 | LR__4791
2ad59     54 79 70 65 
2ad5d     20 6E 6F 74 
2ad61     20 73 75 70 
2ad65     70 6F 72 74 
2ad69     65 64 20 79 
2ad6d     65 74       | 	byte	"Type not supported yet"
2ad6f     00          | 	byte	0
2ad70                 | LR__4792
2ad70     41 72 72 61 
2ad74     79 20 69 6E 
2ad78     64 65 78 20 
2ad7c     6F 75 74 20 
2ad80     6F 66 20 72 
2ad84     61 6E 67 65 | 	byte	"Array index out of range"
2ad88     00          | 	byte	0
2ad89                 | LR__4793
2ad89     45 72 72 6F 
2ad8d     72 20       | 	byte	"Error "
2ad8f     00          | 	byte	0
2ad90                 | LR__4794
2ad90     3A 20       | 	byte	": "
2ad92     00          | 	byte	0
2ad93                 | LR__4795
2ad93     2F 73 64    | 	byte	"/sd"
2ad96     00          | 	byte	0
2ad97                 | LR__4796
2ad97     2F 73 64 2F 
2ad9b     62 61 73    | 	byte	"/sd/bas"
2ad9e     00          | 	byte	0
2ad9f                 | LR__4797
2ad9f     2F 73 64 2F 
2ada3     62 61 73    | 	byte	"/sd/bas"
2ada6     00          | 	byte	0
2ada7                 | LR__4798
2ada7     20 42 41 53 
2adab     49 43 20 62 
2adaf     79 74 65 73 
2adb3     20 66 72 65 
2adb7     65          | 	byte	" BASIC bytes free"
2adb8     00          | 	byte	0
2adb9                 | LR__4799
2adb9     52 65 61 64 
2adbd     79          | 	byte	"Ready"
2adbe     00          | 	byte	0
2adbf                 | LR__4800
2adbf     20          | 	byte	" "
2adc0     00          | 	byte	0
2adc1                 | LR__4801
2adc1     20          | 	byte	" "
2adc2     00          | 	byte	0
2adc3                 | LR__4802
2adc3                 | 	byte	
2adc3     00          | 	byte	0
2adc4                 | LR__4803
2adc4                 | 	byte	
2adc4     00          | 	byte	0
2adc5     00 00 00    | 	alignl
2adc8                 | _dat_
2adc8     00 00 00 00 
2adcc     00 00 00 00 
2add0     00 00 00 00 
2add4     00 00 00 00 | 	byte	$00[16]
2add8     61 41 17 0E 
2addc     62 42 00 00 
2ade0     63 43 19 10 
2ade4     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
2ade8     65 45 18 0F 
2adec     66 46 00 00 
2adf0     67 47 00 00 
2adf4     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
2adf8     69 49 00 00 
2adfc     6A 4A 00 00 
2ae00     6B 4B 00 00 
2ae04     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
2ae08     6D 4D 00 00 
2ae0c     6E 4E 1A 11 
2ae10     6F 4F 1E 15 
2ae14     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
2ae18     71 51 00 00 
2ae1c     72 52 00 00 
2ae20     73 53 1B 12 
2ae24     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
2ae28     75 55 00 00 
2ae2c     76 56 00 00 
2ae30     77 57 00 00 
2ae34     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
2ae38     79 59 00 00 
2ae3c     7A 5A 1D 14 
2ae40     31 21 04 00 
2ae44     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
2ae48     33 23 06 00 
2ae4c     34 24 07 00 
2ae50     35 25 08 00 
2ae54     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
2ae58     37 26 0A 00 
2ae5c     38 2A 0B 00 
2ae60     39 28 0C 00 
2ae64     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
2ae68     8D 8D 00 00 
2ae6c     9B 9B 00 00 
2ae70     88 88 00 00 
2ae74     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
2ae78     20 20 00 00 
2ae7c     2D 5F 00 00 
2ae80     3D 2B 00 00 
2ae84     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
2ae88     5D 7D 00 00 
2ae8c     5C 7C 00 00 
2ae90     23 7E 00 00 
2ae94     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
2ae98     27 22 00 00 
2ae9c     60 7E 03 00 
2aea0     2C 3C 00 00 
2aea4     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
2aea8     2F 3F 00 00 
2aeac     B9 B9 00 00 
2aeb0     BA 00 00 00 
2aeb4     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
2aeb8     BC 00 00 00 
2aebc     BD 00 00 00 
2aec0     BE 00 00 00 
2aec4     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
2aec8     C0 00 00 00 
2aecc     C1 00 00 00 
2aed0     C2 00 00 00 
2aed4     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
2aed8     C4 00 00 00 
2aedc     C5 00 00 00 
2aee0     C6 00 00 00 
2aee4     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
2aee8     C8 00 00 00 
2aeec     C9 00 00 00 
2aef0     CA 00 00 00 
2aef4     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
2aef8     7F 7F 00 00 
2aefc     CC 00 00 00 
2af00     CD 00 00 00 
2af04     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
2af08     CF 00 00 00 
2af0c     D0 00 00 00 
2af10     D1 00 00 00 
2af14     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
2af18     2F 2F 00 00 
2af1c     2A 2A 00 00 
2af20     2D 2D 00 00 
2af24     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
2af28     8D 8D 00 00 
2af2c     31 31 00 00 
2af30     32 32 00 00 
2af34     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
2af38     34 34 00 00 
2af3c     35 35 00 00 
2af40     36 36 00 00 
2af44     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
2af48     38 38 00 00 
2af4c     39 39 00 00 
2af50     30 30 00 00 
2af54     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
2af58     5C 7C 00 00 
2af5c     00 00 00 00 
2af60     00 00 00 00 
2af64     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
2af68     00 00 00 00 
      ...             
2afc0     00 00 00 00 
2afc4     00 00 00 00 | 	byte	$00[96]
2afc8     2B 00 A6 F2 
2afcc     24 A7 09 80 
2afd0     5B 88 4D 89 
2afd4     80 88 A5 88 | atari_spl file "atari.spl"
2afd8     6D 88 B8 88 
2afdc     80 88 CB 88 
2afe0     92 88 A5 88 
2afe4     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
2afe8     A5 88 CA 88 
2afec     A6 88 DD 88 
2aff0     B8 88 AB 89 
2aff4     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
2aff8     C8 AD C6 F1 
2affc     91 06 B6 FF 
2b000     13 00 4A 00 
2b004     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
2b008     5D 00 5E 00 
2b00c     5D 00 5E 00 
2b010     5E 00 5D 00 
2b014     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
2b018     38 00 83 00 
2b01c     25 00 83 00 
2b020     C3 FE D1 04 
2b024     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
2b028     48 88 38 85 
2b02c     41 8A CB 88 
2b030     28 89 B8 88 
2b034     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
2b038     15 89 03 89 
2b03c     02 89 15 89 
2b040     16 89 15 89 
2b044     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
2b048     15 89 3A 89 
2b04c     72 89 E3 89 
2b050     52 83 AD 97 
2b054     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
2b058     0C 02 B6 FF 
2b05c     E1 00 A8 00 
2b060     F3 00 A8 00 
2b064     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
2b068     CE 00 CD 00 
2b06c     CD 00 BA 00 
2b070     E1 00 BB 00 
2b074     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
2b078     DF 00 C9 FF 
2b07c     E6 01 B6 06 
2b080     EE DD 8D 98 
2b084     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
2b088     97 89 73 89 
2b08c     3B 89 60 89 
2b090     60 89 60 89 
2b094     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
2b098     73 89 72 89 
2b09c     85 89 73 89 
2b0a0     AA 89 60 89 
2b0a4     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
2b0a8     E8 8A 18 86 
2b0ac     92 88 A5 C2 
2b0b0     E0 00 C3 05 
2b0b4     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
2b0b8     F2 00 64 01 
2b0bc     06 01 3E 01 
2b0c0     2B 01 2B 01 
2b0c4     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
2b0c8     2B 01 2A 01 
2b0cc     2B 01 2B 01 
2b0d0     2B 01 18 01 
2b0d4     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
2b0d8     39 07 61 F3 
2b0dc     C0 AF 37 85 
2b0e0     0F 88 8B 8A 
2b0e4     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
2b0e8     AB 89 D0 89 
2b0ec     AB 89 D0 89 
2b0f0     D0 89 CF 89 
2b0f4     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
2b0f8     D0 89 F5 89 
2b0fc     BD 89 08 8A 
2b100     CF 89 E8 8A 
2b104     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
2b108     53 B3 0D F8 
2b10c     F4 07 38 00 
2b110     63 01 63 01 
2b114     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
2b118     88 01 88 01 
2b11c     76 01 88 01 
2b120     88 01 89 01 
2b124     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
2b128     75 01 AE 01 
2b12c     76 01 88 01 
2b130     4A 00 46 06 
2b134     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
2b138     08 8A 9A 86 
2b13c     33 8B 08 8A 
2b140     2D 8A F5 89 
2b144     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
2b148     2D 8A 2D 8A 
2b14c     2E 8A 1B 8A 
2b150     40 8A 2D 8A 
2b154     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
2b158     2E 8A 79 8A 
2b15c     66 8A C8 8B 
2b160     72 82 2B 97 
2b164     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
2b168     1D 02 05 01 
2b16c     F8 01 C0 01 
2b170     0B 02 C0 01 
2b174     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
2b178     F9 01 D3 01 
2b17c     F8 01 D3 01 
2b180     F8 01 D2 01 
2b184     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
2b188     E6 01 2B 01 
2b18c     8E 02 5F 07 
2b190     F7 E2 ED 9C 
2b194     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
2b198     E8 8A 78 8A 
2b19c     78 8A 65 8A 
2b1a0     8B 8A 78 8A 
2b1a4     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
2b1a8     8B 8A 9D 8A 
2b1ac     9D 8A 8B 8A 
2b1b0     C2 8A 78 8A 
2b1b4     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
2b1b8     70 8C 18 86 
2b1bc     8B 8A 23 C9 
2b1c0     CB 03 C4 05 
2b1c4     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
2b1c8     0B 02 7B 02 
2b1cc     1E 02 55 02 
2b1d0     30 02 43 02 
2b1d4     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
2b1d8     43 02 44 02 
2b1dc     43 02 30 02 
2b1e0     68 02 31 02 
2b1e4     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
2b1e8     07 08 3F F7 
2b1ec     73 B2 13 85 
2b1f0     15 89 ED 8B 
2b1f4     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
2b1f8     B0 8A FB 8A 
2b1fc     D5 8A FA 8A 
2b200     E8 8A FB 8A 
2b204     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
2b208     E8 8A 21 8B 
2b20c     E7 8A 33 8B 
2b210     E8 8A 26 8C 
2b214     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
2b218     8D B0 27 F6 
2b21c     9C 08 AD 01 
2b220     7B 02 8D 02 
2b224     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
2b228     A1 02 A0 02 
2b22c     A1 02 A0 02 
2b230     A0 02 A0 02 
2b234     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
2b238     7B 02 D8 02 
2b23c     7B 02 C6 02 
2b240     3E 01 C3 05 
2b244     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
2b248     00 8C 2A 86 
2b24c     E0 8C FA 8A 
2b250     6A 8B FB 8A 
2b254     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
2b258     45 8B 45 8B 
2b25c     45 8B 6B 8B 
2b260     46 8B 59 8B 
2b264     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
2b268     6B 8B 6B 8B 
2b26c     6B 8B 6B 8B 
2b270     7D 8B 7D 8B 
2b274     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
2b278     90 8B 91 8B 
2b27c     90 8B 90 8B 
2b280     A3 8B A3 8B 
2b284     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
2b288     B5 8B B6 8B 
2b28c     B5 8B B5 8B 
2b290     B6 8B C8 8B 
2b294     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
2b298     C8 8B DA 8B 
2b29c     DB 8B DB 8B 
2b2a0     DB 8B DC 8B 
2b2a4     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
2b2a8     EE 8B EE 8B 
2b2ac     00 8C 01 8C 
2b2b0     00 8C 01 8C 
2b2b4     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
2b2b8     12 8C 13 8C 
2b2bc     13 8C 26 8C 
2b2c0     26 8C 26 8C 
2b2c4     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
2b2c8     38 8C 38 8C 
2b2cc     38 8C 38 8C 
2b2d0     4B 8C 4B 8C 
2b2d4     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
2b2d8     5E 8C 5E 8C 
2b2dc     5E 8C 5E 8C 
2b2e0     70 8C 70 8C 
2b2e4     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
2b2e8     70 8C 83 8C 
2b2ec     83 8C 83 8C 
2b2f0     83 8C 96 8C 
2b2f4     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
2b2f8     95 8C A9 8C 
2b2fc     A9 8C A8 8C 
2b300     A8 8C A8 8C 
2b304     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
2b308     BB 8C BB 8C 
2b30c     BB 8C CE 8C 
2b310     CE 8C CE 8C 
2b314     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
2b318     E0 8C E1 8C 
2b31c     E1 8C E0 8C 
2b320     F4 8C F2 8C 
2b324     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
2b328     05 8D 05 8D 
2b32c     06 8D 06 8D 
2b330     19 8D 19 8D 
2b334     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
2b338     18 8D 2B 8D 
2b33c     2B 8D 2B 8D 
2b340     2A 8D 3E 8D 
2b344     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
2b348     3E 8D 51 8D 
2b34c     50 8D 50 8D 
2b350     50 8D 51 8D 
2b354     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
2b358     63 8D 64 8D 
2b35c     76 8D 75 8D 
2b360     75 8D 76 8D 
2b364     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
2b368     88 8D 88 8D 
2b36c     89 8D 9B 8D 
2b370     9A 8D 9B 8D 
2b374     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
2b378     AD 8D AE 8D 
2b37c     AD 8D AE 8D 
2b380     C1 8D C1 8D 
2b384     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
2b388     D3 8D D3 8D 
2b38c     D3 8D D3 8D 
2b390     D3 8D E6 8D 
2b394     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
2b398     E6 8D E6 8D 
2b39c     F9 8D F9 8D 
2b3a0     F9 8D F8 8D 
2b3a4     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
2b3a8     0B 8E 0B 8E 
2b3ac     1D 8E 1D 8E 
2b3b0     1E 8E 1E 8E 
2b3b4     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
2b3b8     31 8E 31 8E 
2b3bc     31 8E 42 8E 
2b3c0     43 8E 43 8E 
2b3c4     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
2b3c8     56 8E 56 8E 
2b3cc     55 8E 56 8E 
2b3d0     68 8E 69 8E 
2b3d4     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
2b3d8     69 8E 7B 8E 
2b3dc     7C 8E 7B 8E 
2b3e0     7B 8E 8D 8E 
2b3e4     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
2b3e8     8D 8E A1 8E 
2b3ec     A0 8E A1 8E 
2b3f0     A1 8E A0 8E 
2b3f4     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
2b3f8     B3 8E B3 8E 
2b3fc     C6 8E C5 8E 
2b400     C6 8E C6 8E 
2b404     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
2b408     D8 8E D9 8E 
2b40c     D8 8E EC 8E 
2b410     EB 8E EC 8E 
2b414     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
2b418     FE 8E FE 8E 
2b41c     FE 8E FE 8E 
2b420     10 8F 10 8F 
2b424     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
2b428     11 8F 23 8F 
2b42c     24 8F 23 8F 
2b430     24 8F 37 8F 
2b434     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
2b438     36 8F 36 8F 
2b43c     48 8F 49 8F 
2b440     49 8F 49 8F 
2b444     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
2b448     5B 8F 5C 8F 
2b44c     5B 8F 6E 8F 
2b450     6E 8F 6E 8F 
2b454     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
2b458     81 8F 81 8F 
2b45c     81 8F 81 8F 
2b460     93 8F 93 8F 
2b464     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
2b468     93 8F A6 8F 
2b46c     A6 8F A6 8F 
2b470     A6 8F B9 8F 
2b474     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
2b478     B9 8F B9 8F 
2b47c     CC 8F CB 8F 
2b480     CB 8F CC 8F 
2b484     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
2b488     DF 8F DE 8F 
2b48c     DE 8F F1 8F 
2b490     F1 8F F1 8F 
2b494     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
2b498     03 90 04 90 
2b49c     04 90 04 90 
2b4a0     16 90 17 90 
2b4a4     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
2b4a8     29 90 28 90 
2b4ac     29 90 28 90 
2b4b0     29 90 3C 90 
2b4b4     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
2b4b8     3C 90 4F 90 
2b4bc     4E 90 4E 90 
2b4c0     4E 90 4E 90 
2b4c4     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
2b4c8     61 90 61 90 
2b4cc     73 90 74 90 
2b4d0     74 90 74 90 
2b4d4     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
2b4d8     87 90 86 90 
2b4dc     87 90 86 90 
2b4e0     99 90 99 90 
2b4e4     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
2b4e8     AB 90 AB 90 
2b4ec     AC 90 AB 90 
2b4f0     AB 90 BF 90 
2b4f4     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
2b4f8     BE 90 D1 90 
2b4fc     D0 90 D1 90 
2b500     D1 90 D1 90 
2b504     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
2b508     E3 90 E4 90 
2b50c     F6 90 F6 90 
2b510     F6 90 F6 90 
2b514     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
2b518     09 91 0A 91 
2b51c     0A 91 1C 91 
2b520     1C 91 1C 91 
2b524     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
2b528     2F 91 2E 91 
2b52c     2F 91 2F 91 
2b530     2E 91 41 91 
2b534     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
2b538     41 91 53 91 
2b53c     54 91 54 91 
2b540     53 91 54 91 
2b544     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
2b548     67 91 67 91 
2b54c     79 91 7A 91 
2b550     79 91 78 91 
2b554     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
2b558     8C 91 8B 91 
2b55c     8C 91 8C 91 
2b560     9E 91 9E 91 
2b564     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
2b568     B1 91 B1 91 
2b56c     B2 91 B1 91 
2b570     B1 91 C4 91 
2b574     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
2b578     C4 91 D6 91 
2b57c     D7 91 D7 91 
2b580     D7 91 D6 91 
2b584     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
2b588     EA 91 EA 91 
2b58c     EA 91 FC 91 
2b590     FC 91 FB 91 
2b594     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
2b598     0E 92 0F 92 
2b59c     0F 92 0E 92 
2b5a0     21 92 21 92 
2b5a4     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
2b5a8     21 92 34 92 
2b5ac     33 92 34 92 
2b5b0     34 92 47 92 
2b5b4     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
2b5b8     46 92 47 92 
2b5bc     59 92 59 92 
2b5c0     59 92 59 92 
2b5c4     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
2b5c8     6C 92 6C 92 
2b5cc     6B 92 7E 92 
2b5d0     7E 92 7E 92 
2b5d4     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
2b5d8     92 92 91 92 
2b5dc     91 92 90 92 
2b5e0     91 92 A4 92 
2b5e4     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
2b5e8     A3 92 B6 92 
2b5ec     B6 92 B7 92 
2b5f0     B7 92 B6 92 
2b5f4     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
2b5f8     CA 92 C9 92 
2b5fc     CA 92 DC 92 
2b600     DC 92 DC 92 
2b604     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
2b608     EF 92 EF 92 
2b60c     EF 92 EF 92 
2b610     01 93 01 93 
2b614     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
2b618     15 93 14 93 
2b61c     14 93 14 93 
2b620     14 93 27 93 
2b624     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
2b628     27 93 39 93 
2b62c     3A 93 39 93 
2b630     39 93 39 93 
2b634     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
2b638     4B 93 4C 93 
2b63c     5F 93 5F 93 
2b640     5F 93 5E 93 
2b644     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
2b648     5F 93 84 93 
2b64c     4C 93 96 93 
2b650     5F 93 AE 94 
2b654     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
2b658     7B C1 00 00 
2b65c     00 00 00 00 
2b660     00 00 00 00 
2b664     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b668     00 00 00 00 | 	byte	$00, $00, $00, $00
2b66c     00 00 00 00 | zero long 0
2b670     7A D7 00 80 
2b674     87 8A 48 8F 
2b678     EC 8C 76 8D 
2b67c     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
2b680     3C 8D 82 8D 
2b684     42 8D 88 8D 
2b688     8C 8D 8E 8D 
2b68c     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
2b690     97 8D DE 8D 
2b694     E1 8D F1 8E 
2b698     D8 8C A3 83 
2b69c     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
2b6a0     65 71 C9 65 
2b6a4     FC 64 C4 65 
2b6a8     C1 65 BF 65 
2b6ac     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
2b6b0     B6 65 B4 65 
2b6b4     B2 65 AE 65 
2b6b8     AC 65 ED 65 
2b6bc     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
2b6c0     5E 65 25 66 
2b6c4     FA 62 23 6B 
2b6c8     B5 6C 61 0A 
2b6cc     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
2b6d0     5D 90 BE 8D 
2b6d4     47 8E C3 8D 
2b6d8     09 8E C9 8D 
2b6dc     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
2b6e0     15 8E 19 8E 
2b6e4     1B 8E 62 8E 
2b6e8     64 8E 68 8E 
2b6ec     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
2b6f0     B5 8E 4C 90 
2b6f4     FA 84 3C 9D 
2b6f8     98 13 79 6D 
2b6fc     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
2b700     D9 66 50 66 
2b704     D4 66 4B 66 
2b708     8C 66 46 66 
2b70c     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
2b710     81 66 3A 66 
2b714     7C 66 36 66 
2b718     76 66 30 66 
2b71c     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
2b720     6B 66 88 72 
2b724     BF 37 E7 B7 
2b728     75 83 8B 8E 
2b72c     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
2b730     94 8E 96 8E 
2b734     DD 8E 9C 8E 
2b738     E2 8E A2 8E 
2b73c     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
2b740     EE 8E AE 8E 
2b744     38 8F B5 8E 
2b748     3F 8F FD 8E 
2b74c     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
2b750     A5 87 1E E3 
2b754     6D 5D FA 71 
2b758     41 64 25 67 
2b75c     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
2b760     D9 66 1A 67 
2b764     18 67 15 67 
2b768     12 67 0F 67 
2b76c     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
2b770     07 67 C0 66 
2b774     01 67 BC 66 
2b778     B8 66 DE 64 
2b77c     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
2b780     43 E5 1F 8B 
2b784     14 8A F1 90 
2b788     1C 8F 63 8F 
2b78c     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
2b790     29 8F 6E 8F 
2b794     72 8F 75 8F 
2b798     34 8F BE 8F 
2b79c     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
2b7a0     84 8F 87 8F 
2b7a4     CC 8F 56 90 
2b7a8     67 91 49 80 
2b7ac     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
2b7b0     46 77 A6 66 
2b7b4     E8 66 B0 67 
2b7b8     AD 67 ED 67 
2b7bc     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
2b7c0     A2 67 E3 67 
2b7c4     9D 67 9A 67 
2b7c8     98 67 94 67 
2b7cc     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
2b7d0     49 67 CD 67 
2b7d4     28 65 5F 6E 
2b7d8     82 67 3A 01 
2b7dc     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
2b7e0     C2 91 A9 8F 
2b7e4     EF 8F AE 8F 
2b7e8     F4 8F B5 8F 
2b7ec     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
2b7f0     01 90 03 90 
2b7f4     07 90 09 90 
2b7f8     0C 90 53 90 
2b7fc     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
2b800     18 90 44 93 
2b804     85 84 D6 9D 
2b808     87 1F 2F 75 
2b80c     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
2b810     C4 68 F6 67 
2b814     BE 68 F1 67 
2b818     76 68 2E 68 
2b81c     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
2b820     27 68 24 68 
2b824     64 68 1E 68 
2b828     5F 68 19 68 
2b82c     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
2b830     DC 68 56 72 
2b834     7E 36 C2 B8 
2b838     D7 84 73 90 
2b83c     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
2b840     7B 90 7F 90 
2b844     82 90 84 90 
2b848     CB 90 8B 90 
2b84c     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
2b850     D7 90 96 90 
2b854     20 91 59 90 
2b858     25 91 A2 90 
2b85c     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
2b860     D0 89 40 EE 
2b864     12 64 C4 71 
2b868     29 66 0C 69 
2b86c     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
2b870     C0 68 02 69 
2b874     FE 68 FB 68 
2b878     F9 68 F6 68 
2b87c     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
2b880     EE 68 A8 68 
2b884     2C 69 5F 68 
2b888     E2 68 81 66 
2b88c     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
2b890     1E EB A6 8A 
2b894     73 8B 5E 93 
2b898     7B 90 48 91 
2b89c     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
2b8a0     0D 91 11 91 
2b8a4     14 91 16 91 
2b8a8     5C 91 1C 91 
2b8ac     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
2b8b0     68 91 AF 91 
2b8b4     2A 91 B5 91 
2b8b8     75 91 1A 94 
2b8bc     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
2b8c0     70 0E CB 6C 
2b8c4     5D 6E C4 67 
2b8c8     99 69 54 69 
2b8cc     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
2b8d0     D2 69 49 69 
2b8d4     89 69 86 69 
2b8d8     40 69 C4 69 
2b8dc     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
2b8e0     35 69 76 69 
2b8e4     58 67 EB 6D 
2b8e8     E9 6D 89 0F 
2b8ec     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
2b8f0     33 94 94 91 
2b8f4     D9 91 56 91 
2b8f8     E0 91 9F 91 
2b8fc     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
2b900     EC 91 EE 91 
2b904     F1 91 F4 91 
2b908     F7 91 3D 92 
2b90c     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
2b910     46 92 21 94 
2b914     11 89 A4 9D 
2b918     FD 0E 8F 6C 
2b91c     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
2b920     28 6A E1 69 
2b924     65 6A 1F 6A 
2b928     5F 6A 1A 6A 
2b92c     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
2b930     54 6A 0F 6A 
2b934     4F 6A 09 6A 
2b938     06 6A 03 6A 
2b93c     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
2b940     23 68 69 77 
2b944     3A 4D 38 CA 
2b948     38 86 4E 91 
2b94c     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
2b950     64 92 24 92 
2b954     6A 92 2A 92 
2b958     70 92 30 92 
2b95c     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
2b960     7B 92 7E 92 
2b964     C5 92 84 92 
2b968     CB 92 8A 92 
2b96c     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
2b970     4D 8D F9 E2 
2b974     97 59 FE 74 
2b978     DB 68 6D 6A 
2b97c     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
2b980     A8 6A A5 6A 
2b984     A3 6A 9F 6A 
2b988     9D 6A 9B 6A 
2b98c     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
2b990     D6 6A 8F 6A 
2b994     CF 6A 46 6A 
2b998     CA 6A E1 67 
2b99c     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
2b9a0     D3 F7 15 92 
2b9a4     90 8C BF 94 
2b9a8     A6 92 EB 92 
2b9ac     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
2b9b0     B1 92 F7 92 
2b9b4     FA 92 FD 92 
2b9b8     00 93 02 93 
2b9bc     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
2b9c0     4F 93 52 93 
2b9c4     54 93 22 94 
2b9c8     5A 93 8F 88 
2b9cc     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
2b9d0     1C 77 07 6C 
2b9d4     E8 69 7A 6B 
2b9d8     34 6B 75 6B 
2b9dc     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
2b9e0     29 6B 26 6B 
2b9e4     24 6B 21 6B 
2b9e8     1D 6B 5E 6B 
2b9ec     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
2b9f0     12 6B 52 6B 
2b9f4     34 69 34 6E 
2b9f8     BA 73 A4 24 
2b9fc     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
2ba00     7A 94 B3 93 
2ba04     72 93 31 93 
2ba08     78 93 7A 93 
2ba0c     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
2ba10     83 93 86 93 
2ba14     89 93 D0 93 
2ba18     D2 93 D5 93 
2ba1c     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
2ba20     DD 93 40 96 
2ba24     30 8B 99 9C 
2ba28     52 10 94 71 
2ba2c     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
2ba30     46 6C 79 6B 
2ba34     40 6C B7 6B 
2ba38     F7 6B B1 6B 
2ba3c     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
2ba40     EC 6B A5 6B 
2ba44     A2 6B 9F 6B 
2ba48     9D 6B 9A 6B 
2ba4c     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
2ba50     C8 6A E4 76 
2ba54     20 4B F9 CE 
2ba58     2E 8A 1A 92 
2ba5c     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
2ba60     FB 93 BA 93 
2ba64     01 94 03 94 
2ba68     4A 94 09 94 
2ba6c     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
2ba70     55 94 14 94 
2ba74     9E 94 1A 94 
2ba78     61 94 20 94 
2ba7c     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
2ba80     3E 87 E5 CD 
2ba84     5F 50 6C 78 
2ba88     B5 6A 04 6C 
2ba8c     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
2ba90     83 6C 7F 6C 
2ba94     7C 6C 36 6C 
2ba98     76 6C 74 6C 
2ba9c     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
2baa0     6B 6C 25 6C 
2baa4     66 6C 1F 6C 
2baa8     1D 6C 41 6A 
2baac     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
2bab0     BA FA FC 94 
2bab4     5B 8D 97 96 
2bab8     3B 94 C5 94 
2babc     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
2bac0     89 94 8C 94 
2bac4     8F 94 92 94 
2bac8     94 94 DB 94 
2bacc     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
2bad0     E4 94 E7 94 
2bad4     2D 95 74 95 
2bad8     C8 96 15 89 
2badc     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
2bae0     CB 75 31 6F 
2bae4     7E 6B 10 6D 
2bae8     C9 6C 0A 6D 
2baec     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
2baf0     BD 6C FF 6C 
2baf4     FB 6C F9 6C 
2baf8     B2 6C F3 6C 
2bafc     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
2bb00     A7 6C E8 6C 
2bb04     0D 6B 85 6F 
2bb08     C7 74 10 28 
2bb0c     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
2bb10     96 96 47 95 
2bb14     06 95 0A 95 
2bb18     0C 95 0F 95 
2bb1c     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
2bb20     17 95 5E 95 
2bb24     61 95 63 95 
2bb28     22 95 AC 95 
2bb2c     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
2bb30     72 95 17 98 
2bb34     59 8E 01 96 
2bb38     CF FC 5A 68 
2bb3c     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
2bb40     96 6D 50 6D 
2bb44     D5 6D 4A 6D 
2bb48     8C 6D 89 6D 
2bb4c     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
2bb50     80 6D 3A 6D 
2bb54     7A 6D 77 6D 
2bb58     75 6D 71 6D 
2bb5c     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
2bb60     18 6C BC 78 
2bb64     9A 4F 7E CF 
2bb68     1F 89 F1 93 
2bb6c     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
2bb70     D2 95 4E 95 
2bb74     D7 95 53 95 
2bb78     DD 95 E0 95 
2bb7c     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
2bb80     A5 95 EB 95 
2bb84     EE 95 F0 95 
2bb88     37 96 B3 95 
2bb8c     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
2bb90     1A 98 D5 8D 
2bb94     C5 9F CD 0F 
2bb98     0F 71 F3 73 
2bb9c     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
2bba0     D9 6D 5E 6E 
2bba4     D3 6D 58 6E 
2bba8     12 6E 0F 6E 
2bbac     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
2bbb0     49 6E BF 6D 
2bbb4     87 6E 76 6D 
2bbb8     81 6E 11 6B 
2bbbc     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
2bbc0     3F 09 44 95 
2bbc4     E5 8D 3F 99 
2bbc8     D4 95 A2 96 
2bbcc     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
2bbd0     23 96 69 96 
2bbd4     6B 96 6E 96 
2bbd8     71 96 74 96 
2bbdc     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
2bbe0     BF 96 3C 96 
2bbe4     C6 96 C8 96 
2bbe8     A3 98 51 8D 
2bbec     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
2bbf0     CF 75 29 73 
2bbf4     90 6C EC 6E 
2bbf8     62 6E E7 6E 
2bbfc     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
2bc00     9A 6E 98 6E 
2bc04     95 6E 91 6E 
2bc08     8E 6E CF 6E 
2bc0c     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
2bc10     40 6E C3 6E 
2bc14     E8 6C 45 6F 
2bc18     A5 7B C9 35 
2bc1c     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
2bc20     2D 98 23 97 
2bc24     E1 96 A0 96 
2bc28     A4 96 EA 96 
2bc2c     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
2bc30     AF 96 F4 96 
2bc34     F8 96 3E 97 
2bc38     FD 96 43 97 
2bc3c     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
2bc40     08 97 6B 99 
2bc44     D6 92 88 91 
2bc48     D8 EE 84 66 
2bc4c     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
2bc50     2E 6F E7 6E 
2bc54     6C 6F 24 6F 
2bc58     21 6F 1F 6F 
2bc5c     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
2bc60     17 6F 13 6F 
2bc64     54 6F 0E 6F 
2bc68     0B 6F 4B 6F 
2bc6c     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
2bc70     27 6D 1C 7B 
2bc74     19 59 9F DB 
2bc78     66 8E BC 94 
2bc7c     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
2bc80     67 97 26 97 
2bc84     6D 97 2B 97 
2bc88     72 97 32 97 
2bc8c     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
2bc90     C1 97 7F 97 
2bc94     C6 97 85 97 
2bc98     CB 97 CE 97 
2bc9c     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
2bca0     EC 8A C4 C6 
2bca4     68 4C F4 7D 
2bca8     63 6E E8 6E 
2bcac     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
2bcb0     ED 6F A7 6F 
2bcb4     E7 6F A0 6F 
2bcb8     E1 6F 9B 6F 
2bcbc     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
2bcc0     D5 6F 8F 6F 
2bcc4     CE 6F 45 6F 
2bcc8     86 6F 68 6D 
2bccc     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
2bcd0     C0 13 AD A2 
2bcd4     A7 8E 79 99 
2bcd8     E6 97 E8 97 
2bcdc     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
2bce0     F1 97 F3 97 
2bce4     F6 97 F9 97 
2bce8     FB 97 FE 97 
2bcec     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
2bcf0     4A 98 0A 98 
2bcf4     93 98 0F 98 
2bcf8     7F 9B BF 8C 
2bcfc     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
2bd00     91 7B 62 73 
2bd04     1A 6E B9 70 
2bd08     EB 6F B3 70 
2bd0c     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
2bd10     25 70 20 70 
2bd14     1E 70 1B 70 
2bd18     18 70 15 70 
2bd1c     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
2bd20     0D 70 09 70 
2bd24     07 70 03 70 
2bd28     01 70 FD 6F 
2bd2c     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
2bd30     F6 6F F2 6F 
2bd34     EF 6F EC 6F 
2bd38     2C 70 E6 6F 
2bd3c     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
2bd40     DD 6F 97 6F 
2bd44     D7 6F 84 6E 
2bd48     8F 6F 3F 7D 
2bd4c     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
2bd4e     00 00 00 00 | zero1 long 0
2bd52     FF FF FF FF 
2bd56     FF FF       | atarist_spl file "atarist.spl" '512
2bd58     00 00 00 00 
2bd5c     00 00 00 00 
2bd60     00 00       | 	byte	$00[10]
2bd62     17 7F F2 7F 
2bd66     B2 7F 72 7F 
2bd6a     33 7F F4 7E 
2bd6e     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
2bd72     36 7E F5 7D 
2bd76     E9 51 F2 0D 
2bd7a     8E 00 F3 FD 
2bd7e     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
2bd82     57 FD 58 FD 
2bd86     5B FD 5C FD 
2bd8a     5C FD 60 7D 
2bd8e     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
2bd92     D6 7C 98 7C 
2bd96     59 7C 1A 7C 
2bd9a     DC 7B 9E 7B 
2bd9e     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
2bda2     F3 05 00 FD 
2bda6     41 FB EA FA 
2bdaa     D9 FA DB FA 
2bdae     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
2bdb2     E4 FA 9B 36 
2bdb6     F8 7A C0 7A 
2bdba     84 7A 45 7A 
2bdbe     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
2bdc2     8E 79 51 79 
2bdc6     15 79 D7 78 
2bdca     3C 1F EB FF 
2bdce     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
2bdd2     6D F8 65 F8 
2bdd6     68 F8 6D F8 
2bdda     70 F8 74 F8 
2bdde     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
2bde2     AB 60 79 60 
2bde6     4B 60 1A 60 
2bdea     E9 5F B9 5F 
2bdee     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
2bdf2     FB 59 B2 0B 
2bdf6     92 FA 3A F7 
2bdfa     96 F6 79 F6 
2bdfe     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
2be02     82 F6 86 F6 
2be06     8C F6 DB 5D 
2be0a     F1 5E C1 5E 
2be0e     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
2be12     34 5E 04 5E 
2be16     D6 5D A6 5D 
2be1a     78 5D D4 3E 
2be1e     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
2be22     27 F5 BA F4 
2be26     AB F4 AD F4 
2be2a     B2 F4 B8 F4 
2be2e     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
2be32     26 5D 2B 5D 
2be36     FC 5C CD 5C 
2be3a     9F 5C 70 5C 
2be3e     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
2be42     E5 5B B8 5B 
2be46     DB 24 A7 FC 
2be4a     D1 F4 4D F3 
2be4e     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
2be52     04 F3 0B F3 
2be56     11 F3 16 F3 
2be5a     DE 18 98 5B 
2be5e     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
2be62     4E 4A 29 48 
2be66     A0 47 6A 47 
2be6a     43 47 20 47 
2be6e     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
2be72     E2 F6 98 F2 
2be76     C5 F1 A3 F1 
2be7a     A3 F1 A8 F1 
2be7e     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
2be82     BF F1 00 3D 
2be86     EF 46 CD 46 
2be8a     AA 46 86 46 
2be8e     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
2be92     1C 46 F9 45 
2be96     D7 45 EE 43 
2be9a     DE 02 E8 F3 
2be9e     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
2bea2     61 F0 65 F0 
2bea6     6D F0 74 F0 
2beaa     7C F0 84 F0 
2beae     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
2beb2     8E 45 6D 45 
2beb6     49 45 27 45 
2beba     05 45 E1 44 
2bebe     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
2bec2     F1 2F A9 FB 
2bec6     8B F1 9B EF 
2beca     40 EF 36 EF 
2bece     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
2bed2     4D EF 56 EF 
2bed6     5E EF 7B 44 
2beda     8C 44 69 44 
2bede     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
2bee2     03 44 E1 43 
2bee6     C0 43 F5 37 
2beea     69 33 0F 11 
2beee     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
2bef2     66 EE 37 EE 
2bef6     38 EE 40 EE 
2befa     48 EE 51 EE 
2befe     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
2bf02     7D 32 6A 32 
2bf06     51 32 37 32 
2bf0a     1F 32 05 32 
2bf0e     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
2bf12     B9 31 A1 31 
2bf16     F1 04 F4 F1 
2bf1a     50 EE A0 ED 
2bf1e     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
2bf22     93 ED 9A ED 
2bf26     A4 ED AD ED 
2bf2a     F4 27 C1 31 
2bf2e     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
2bf32     78 31 5F 31 
2bf36     46 31 2E 31 
2bf3a     15 31 FC 30 
2bf3e     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
2bf42     C4 EF 4A ED 
2bf46     DC EC CB EC 
2bf4a     D2 EC DA EC 
2bf4e     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
2bf52     F9 EC 64 2F 
2bf56     0A 31 F1 30 
2bf5a     D9 30 C0 30 
2bf5e     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
2bf62     78 30 5F 30 
2bf66     46 30 38 23 
2bf6a     A6 F6 19 EE 
2bf6e     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
2bf72     20 EC 28 EC 
2bf76     32 EC 3C EC 
2bf7a     47 EC 51 EC 
2bf7e     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
2bf82     A3 22 93 22 
2bf86     7F 22 6E 22 
2bf8a     5D 22 4C 22 
2bf8e     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
2bf92     77 09 76 F1 
2bf96     CC EC F0 EB 
2bf9a     CD EB CE EB 
2bf9e     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
2bfa2     ED EB F5 EB 
2bfa6     3E F6 6B 22 
2bfaa     5F 22 4E 22 
2bfae     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
2bfb2     1B 22 0B 22 
2bfb6     FA 21 E9 21 
2bfba     D8 21 4D FF 
2bfbe     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
2bfc2     92 EB 7B EB 
2bfc6     82 EB 8C EB 
2bfca     97 EB A1 EB 
2bfce     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
2bfd2     15 22 04 22 
2bfd6     F3 21 E3 21 
2bfda     D2 21 C0 21 
2bfde     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
2bfe2     8E 21 7D 21 
2bfe6     9A F8 A4 ED 
2bfea     8E EB 2F EB 
2bfee     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
2bff2     37 EB 42 EB 
2bff6     4C EB 57 EB 
2bffa     B2 17 22 19 
2bffe     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
2c002     FD 18 EF 18 
2c006     E3 18 D6 18 
2c00a     CA 18 BD 18 
2c00e     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
2c012     60 EC 35 EB 
2c016     01 EB 01 EB 
2c01a     0C EB 16 EB 
2c01e     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
2c022     34 EB D0 18 
2c026     00 19 F4 18 
2c02a     E8 18 DA 18 
2c02e     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
2c032     B6 18 A9 18 
2c036     9D 18 91 05 
2c03a     F0 EF CA EB 
2c03e     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
2c042     E8 EA F2 EA 
2c046     FE EA 07 EB 
2c04a     12 EB C2 EF 
2c04e     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
2c052     D9 18 CD 18 
2c056     C0 18 B3 18 
2c05a     A7 18 9B 18 
2c05e     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
2c062     B8 FC 30 EE 
2c066     61 EB DC EA 
2c06a     CD EA D2 EA 
2c06e     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
2c072     F3 EA FE EA 
2c076     D2 09 D1 18 
2c07a     C3 18 17 18 
2c07e     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
2c082     66 11 52 11 
2c086     49 11 41 11 
2c08a     38 11 E0 F4 
2c08e     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
2c092     C9 EA C5 EA 
2c096     CF EA DB EA 
2c09a     E6 EA EF EA 
2c09e     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
2c0a2     89 11 80 11 
2c0a6     78 11 6E 11 
2c0aa     67 11 5D 11 
2c0ae     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
2c0b2     43 11 32 0D 
2c0b6     9C F1 07 EC 
2c0ba     F8 EA CD EA 
2c0be     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
2c0c2     E4 EA ED EA 
2c0c6     F8 EA 02 EB 
2c0ca     55 11 91 11 
2c0ce     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
2c0d2     75 11 6E 11 
2c0d6     64 11 5E 11 
2c0da     54 11 4A 11 
2c0de     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
2c0e2     A8 EB F1 EA 
2c0e6     D9 EA DC EA 
2c0ea     E8 EA F1 EA 
2c0ee     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
2c0f2     A6 EB 9E 11 
2c0f6     A0 11 96 11 
2c0fa     8D 11 85 11 
2c0fe     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
2c102     6A 11 CA 0D 
2c106     36 0B 57 F8 
2c10a     6C ED 57 EB 
2c10e     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
2c112     F4 EA FF EA 
2c116     09 EB 15 EB 
2c11a     1E EB 1A FD 
2c11e     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
2c122     ED 0A E8 0A 
2c126     E2 0A DC 0A 
2c12a     D6 0A D1 0A 
2c12e     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
2c132     F8 F3 BC EC 
2c136     57 EB 1E EB 
2c13a     18 EB 24 EB 
2c13e     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
2c142     42 EB 4D EB 
2c146     08 09 20 0B 
2c14a     1A 0B 14 0B 
2c14e     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
2c152     04 0B FE 0A 
2c156     F9 0A F2 0A 
2c15a     84 08 3A F1 
2c15e     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
2c162     42 EB 42 EB 
2c166     4E EB 57 EB 
2c16a     62 EB 6B EB 
2c16e     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
2c172     48 0B 43 0B 
2c176     3C 0B 36 0B 
2c17a     31 0B 2C 0B 
2c17e     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
2c182     1B 0B 5C 00 
2c186     6A EF 1B EC 
2c18a     81 EB 6A EB 
2c18e     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
2c192     85 EB 8E EB 
2c196     99 EB A3 EB 
2c19a     DD 05 E5 05 
2c19e     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
2c1a2     DB 05 D8 05 
2c1a6     D5 05 D1 05 
2c1aa     D0 05 CB 05 
2c1ae     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
2c1b2     0C EC BB EB 
2c1b6     B3 EB BB EB 
2c1ba     C5 EB D0 EB 
2c1be     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
2c1c2     E4 F7 2C 06 
2c1c6     28 06 24 06 
2c1ca     22 06 1F 06 
2c1ce     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
2c1d2     16 06 14 06 
2c1d6     0F 06 D0 F3 
2c1da     65 ED 2D EC 
2c1de     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
2c1e2     01 EC 0A EC 
2c1e6     14 EC 1E EC 
2c1ea     29 EC FB 03 
2c1ee     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
2c1f2     63 06 60 06 
2c1f6     5E 06 59 06 
2c1fa     58 06 54 06 
2c1fe     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
2c202     69 F1 21 ED 
2c206     55 EC 33 EC 
2c20a     36 EC 40 EC 
2c20e     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
2c212     5C EC 68 EC 
2c216     92 02 D9 02 
2c21a     D7 02 D7 02 
2c21e     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
2c222     D1 02 D1 02 
2c226     CE 02 CD 02 
2c22a     5D FC 80 EF 
2c22e     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
2c232     83 EC 8A EC 
2c236     93 EC 9C EC 
2c23a     A5 EC B1 EC 
2c23e     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
2c242     2B 03 2A 03 
2c246     29 03 26 03 
2c24a     25 03 24 03 
2c24e     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
2c252     1F 03 70 F7 
2c256     D0 EE 27 ED 
2c25a     DB EC D4 EC 
2c25e     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
2c262     F0 EC FA EC 
2c266     02 ED F9 F4 
2c26a     7B 03 7C 03 
2c26e     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
2c272     75 03 73 03 
2c276     72 03 70 03 
2c27a     6D 03 6C 03 
2c27e     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
2c282     54 ED 22 ED 
2c286     22 ED 2C ED 
2c28a     35 ED 3F ED 
2c28e     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
2c292     14 01 C3 03 
2c296     C1 03 C0 03 
2c29a     5F 01 A5 00 
2c29e     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
2c2a2     7B 00 7C 00 
2c2a6     20 00 85 F1 
2c2aa     2A EE 89 ED 
2c2ae     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
2c2b2     80 ED 87 ED 
2c2b6     90 ED 9A ED 
2c2ba     A3 ED 73 00 
2c2be     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
2c2c2     D0 00 D0 00 
2c2c6     D0 00 D0 00 
2c2ca     D0 00 CF 00 
2c2ce     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
2c2d2     80 F0 3D EE 
2c2d6     D5 ED C7 ED 
2c2da     CD ED D6 ED 
2c2de     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
2c2e2     F2 ED FA ED 
2c2e6     1D 01 29 01 
2c2ea     27 01 27 01 
2c2ee     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
2c2f2     25 01 26 01 
2c2f6     26 01 23 01 
2c2fa     D0 F7 EC EF 
2c2fe     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
2c302     1C EE 24 EE 
2c306     2D EE 37 EE 
2c30a     40 EE 47 EE 
2c30e     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
2c312     7D 01 7B 01 
2c316     7A 01 7A 01 
2c31a     79 01 78 01 
2c31e     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
2c322     84 FE DE F3 
2c326     6C EF 93 EE 
2c32a     72 EE 72 EE 
2c32e     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
2c332     8B EE 95 EE 
2c336     9E EE 15 FC 
2c33a     67 FE 67 FE 
2c33e     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
2c342     6B FE 6B FE 
2c346     6D FE 6D FE 
2c34a     6D FE 6F FE 
2c34e     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
2c352     DF EE CC EE 
2c356     CF EE D9 EE 
2c35a     E1 EE EA EE 
2c35e     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
2c362     5A FE C4 FE 
2c366     C3 FE C5 FE 
2c36a     C6 FE C6 FE 
2c36e     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
2c372     C8 FE C7 FE 
2c376     DA FB 85 F1 
2c37a     8D EF 31 EF 
2c37e     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
2c382     34 EF 3E EF 
2c386     46 EF 4F EF 
2c38a     57 EF 0D FF 
2c38e     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
2c392     1F FF 1F FF 
2c396     21 FF 21 FF 
2c39a     21 FF 21 FF 
2c39e     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
2c3a2     15 F1 BE EF 
2c3a6     84 EF 7E EF 
2c3aa     88 EF 8F EF 
2c3ae     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
2c3b2     A9 EF 06 F2 
2c3b6     A6 FC AB FC 
2c3ba     AD FC AE FC 
2c3be     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
2c3c2     B2 FC B4 FC 
2c3c6     B6 FC B7 FC 
2c3ca     8B F4 BD F0 
2c3ce     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
2c3d2     E4 EF EE EF 
2c3d6     F6 EF FD EF 
2c3da     04 F0 0E F0 
2c3de     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
2c3e2     0B FD 0D FD 
2c3e6     0F FD 11 FD 
2c3ea     11 FD 13 FD 
2c3ee     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
2c3f2     17 FD 64 F3 
2c3f6     CD F0 52 F0 
2c3fa     41 F0 45 F0 
2c3fe     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
2c402     5B F0 64 F0 
2c406     6D F0 FB FC 
2c40a     65 FD 68 FD 
2c40e     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
2c412     6C FD 6D FD 
2c416     6F FD 70 FD 
2c41a     72 FD B3 FB 
2c41e     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
2c422     A4 F0 99 F0 
2c426     A0 F0 A8 F0 
2c42a     AE F0 B9 F0 
2c42e     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
2c432     CB FB DD FB 
2c436     DE FB E0 FB 
2c43a     E3 FB E3 FB 
2c43e     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
2c442     E9 FB EC FB 
2c446     62 F7 27 F2 
2c44a     2A F1 FF F0 
2c44e     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
2c452     0C F1 13 F1 
2c456     1B F1 23 F1 
2c45a     33 F2 3C FC 
2c45e     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
2c462     42 FC 45 FC 
2c466     47 FC 48 FC 
2c46a     4A FC 4C FC 
2c46e     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
2c472     20 F2 77 F1 
2c476     5C F1 5F F1 
2c47a     64 F1 6C F1 
2c47e     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
2c482     83 F1 DC F8 
2c486     9A FC 9A FC 
2c48a     9B FC 9E FC 
2c48e     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
2c492     A3 FC A4 FC 
2c496     A6 FC A9 FC 
2c49a     90 F4 33 F2 
2c49e     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
2c4a2     BA F1 BF F1 
2c4a6     C7 F1 CE F1 
2c4aa     D6 F1 DC F1 
2c4ae     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
2c4b2     F3 FC F5 FC 
2c4b6     FE FB 79 FB 
2c4ba     62 FB 5F FB 
2c4be     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
2c4c2     6F FA AF F3 
2c4c6     53 F2 12 F2 
2c4ca     0F F2 15 F2 
2c4ce     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
2c4d2     2A F2 32 F2 
2c4d6     38 F2 9A FB 
2c4da     AF FB B1 FB 
2c4de     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
2c4e2     B7 FB B8 FB 
2c4e6     BA FB BC FB 
2c4ea     C1 FB 3B F8 
2c4ee     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
2c4f2     6E F2 6C F2 
2c4f6     74 F2 7A F2 
2c4fa     81 F2 87 F2 
2c4fe     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
2c502     06 FC 09 FC 
2c506     0C FC 0E FC 
2c50a     0F FC 12 FC 
2c50e     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
2c512     17 FC 1A FC 
2c516     B2 F6 7B F3 
2c51a     DD F2 C5 F2 
2c51e     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
2c522     D4 F2 DB F2 
2c526     E0 F2 E8 F2 
2c52a     28 F8 60 FC 
2c52e     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
2c532     64 FC 66 FC 
2c536     68 FC 6A FC 
2c53a     6D FC 52 FC 
2c53e     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
2c542     78 F3 24 F3 
2c546     1A F3 1E F3 
2c54a     24 F3 2A F3 
2c54e     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
2c552     3D F3 80 FA 
2c556     0C FB 0F FB 
2c55a     10 FB 14 FB 
2c55e     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
2c562     1B FB 1D FB 
2c566     1F FB 92 FA 
2c56a     DE F4 AE F3 
2c56e     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
2c572     79 F3 7E F3 
2c576     84 F3 8C F3 
2c57a     92 F3 97 F3 
2c57e     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
2c582     67 FB 69 FB 
2c586     6B FB 6F FB 
2c58a     71 FB 72 FB 
2c58e     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
2c592     E3 F8 BA F4 
2c596     EE F3 CC F3 
2c59a     CA F3 CF F3 
2c59e     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
2c5a2     E2 F3 E8 F3 
2c5a6     ED F3 B7 FB 
2c5aa     BC FB BE FB 
2c5ae     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
2c5b2     C4 FB C6 FB 
2c5b6     C8 FB C9 FB 
2c5ba     CC FB 8F F7 
2c5be     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
2c5c2     1E F4 1E F4 
2c5c6     24 F4 2A F4 
2c5ca     30 F4 38 F4 
2c5ce     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
2c5d2     AD FA B1 FA 
2c5d6     B4 FA B6 FA 
2c5da     BA FA BB FA 
2c5de     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
2c5e2     C2 FA C6 FA 
2c5e6     55 F6 C6 F4 
2c5ea     7D F4 72 F4 
2c5ee     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
2c5f2     83 F4 89 F4 
2c5f6     8F F4 94 F4 
2c5fa     66 FA 03 FB 
2c5fe     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
2c602     0A FB 0E FB 
2c606     10 FB 11 FB 
2c60a     16 FB 18 FB 
2c60e     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
2c612     F9 F4 CA F4 
2c616     C5 F4 CB F4 
2c61a     D1 F4 D7 F4 
2c61e     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
2c622     E8 F4 3F FB 
2c626     56 FB 58 FB 
2c62a     5A FB 5E FB 
2c62e     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
2c632     64 FB 64 FB 
2c636     69 FB 99 F9 
2c63a     E9 F5 33 F5 
2c63e     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
2c642     1D F5 22 F5 
2c646     27 F5 2E F5 
2c64a     32 F5 37 F5 
2c64e     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
2c652     BC FA BC FA 
2c656     C1 FA C2 FA 
2c65a     C4 FA C8 FA 
2c65e     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
2c662     F9 F7 DB F5 
2c666     78 F5 69 F5 
2c66a     6A F5 70 F5 
2c66e     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
2c672     7F F5 85 F5 
2c676     6E F7 06 FB 
2c67a     0A FB 0B FB 
2c67e     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
2c682     14 FB 15 FB 
2c686     18 FB 1B FB 
2c68a     1D FB 70 F7 
2c68e     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
2c692     B6 F5 BB F5 
2c696     C0 F5 C6 F5 
2c69a     CA F5 CF F5 
2c69e     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
2c6a2     54 FB 56 FB 
2c6a6     5A FB 5B FB 
2c6aa     5E FB 5F FB 
2c6ae     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
2c6b2     67 FB 52 FB 
2c6b6     29 F7 33 F6 
2c6ba     06 F6 02 F6 
2c6be     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
2c6c2     10 F6 16 F6 
2c6c6     1A F6 1F F6 
2c6ca     81 FB 9F FB 
2c6ce     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
2c6d2     51 FB F2 FA 
2c6d6     E3 FA E3 FA 
2c6da     E5 FA E9 FA 
2c6de     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
2c6e2     64 F6 4D F6 
2c6e6     4D F6 53 F6 
2c6ea     57 F6 5C F6 
2c6ee     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
2c6f2     6A F6 19 FB 
2c6f6     1E FB 22 FB 
2c6fa     23 FB 24 FB 
2c6fe     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
2c702     2C FB 2E FB 
2c706     32 FB F0 F8 
2c70a     01 F7 A5 F6 
2c70e     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
2c712     9F F6 A3 F6 
2c716     A6 F6 AC F6 
2c71a     B0 F6 EB F7 
2c71e     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
2c722     68 FB 6C FB 
2c726     6E FB 71 FB 
2c72a     72 FB 74 FB 
2c72e     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
2c732     71 F8 21 F7 
2c736     E5 F6 DD F6 
2c73a     E1 F6 E6 F6 
2c73e     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
2c742     F5 F6 F7 F6 
2c746     F7 FA AB FB 
2c74a     AD FB AF FB 
2c74e     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
2c752     B6 FB B9 FB 
2c756     BB FB BC FB 
2c75a     21 FB 07 F8 
2c75e     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
2c762     22 F7 26 F7 
2c766     2B F7 2E F7 
2c76a     34 F7 38 F7 
2c76e     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
2c772     13 FB 16 FB 
2c776     17 FB 1B FB 
2c77a     1E FB 20 FB 
2c77e     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
2c782     26 FB 77 FA 
2c786     F3 F7 7C F7 
2c78a     67 F7 6A F7 
2c78e     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
2c792     74 F7 7A F7 
2c796     7E F7 82 F7 
2c79a     53 FB 5A FB 
2c79e     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
2c7a2     5F FB 63 FB 
2c7a6     65 FB 67 FB 
2c7aa     69 FB 6A FB 
2c7ae     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
2c7b2     B5 F7 A9 F7 
2c7b6     AD F7 B0 F7 
2c7ba     B5 F7 B8 F7 
2c7be     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
2c7c2     6E F8 99 FB 
2c7c6     9C FB 9D FB 
2c7ca     9F FB A4 FB 
2c7ce     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
2c7d2     A9 FB AB FB 
2c7d6     AD FB 46 F9 
2c7da     26 F8 F0 F7 
2c7de     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
2c7e2     F4 F7 F8 F7 
2c7e6     FB F7 FF F7 
2c7ea     03 F8 65 FA 
2c7ee     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
2c7f2     2B FB 2F FB 
2c7f6     30 FB 32 FB 
2c7fa     34 FB 38 FB 
2c7fe     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
2c802     E9 F8 4A F8 
2c806     2E F8 2C F8 
2c80a     2F F8 36 F8 
2c80e     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
2c812     41 F8 44 F8 
2c816     4A FB 67 FB 
2c81a     68 FB 6B FB 
2c81e     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
2c822     73 FB 74 FB 
2c826     78 FB 7A FB 
2c82a     14 FB E7 F8 
2c82e     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
2c832     6D F8 70 F8 
2c836     73 F8 78 F8 
2c83a     7C F8 80 F8 
2c83e     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
2c842     A6 FB A7 FB 
2c846     A9 FB AC FB 
2c84a     AF FB B1 FB 
2c84e     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
2c852     B7 FB 73 FA 
2c856     F8 F8 B4 F8 
2c85a     A9 F8 AB F8 
2c85e     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
2c862     B4 F8 B8 F8 
2c866     BB F8 FA F8 
2c86a     64 FB 65 FB 
2c86e     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
2c872     6D FB 6F FB 
2c876     70 FB 74 FB 
2c87a     77 FB 77 FB 
2c87e     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
2c882     E9 F8 E4 F8 
2c886     E8 F8 EB F8 
2c88a     EE F8 F2 F8 
2c88e     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
2c892     B5 FA 9F FB 
2c896     A1 FB A4 FB 
2c89a     A5 FB A9 FB 
2c89e     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
2c8a2     AE FB B1 FB 
2c8a6     B2 FB C7 F9 
2c8aa     39 F9 22 F9 
2c8ae     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
2c8b2     26 F9 2A F9 
2c8b6     2E F9 32 F9 
2c8ba     33 F9 BA FB 
2c8be     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
2c8c2     DE FB E1 FB 
2c8c6     E2 FB E4 FB 
2c8ca     E5 FB E7 FB 
2c8ce     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
2c8d2     C5 F9 67 F9 
2c8d6     57 F9 56 F9 
2c8da     5B F9 5F F9 
2c8de     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
2c8e2     68 F9 6C F9 
2c8e6     0B FC 11 FC 
2c8ea     14 FC 15 FC 
2c8ee     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
2c8f2     B5 FB B5 FB 
2c8f6     B6 FB B8 FB 
2c8fa     E9 FA C8 F9 
2c8fe     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
2c902     90 F9 94 F9 
2c906     95 F9 99 F9 
2c90a     9D F9 9F F9 
2c90e     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
2c912     DE FB DF FB 
2c916     E2 FB E4 FB 
2c91a     E6 FB E8 FB 
2c91e     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
2c922     EF FB AC FA 
2c926     E9 F9 C7 F9 
2c92a     C3 F9 C8 F9 
2c92e     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
2c932     D0 F9 D4 F9 
2c936     D6 F9 0E FB 
2c93a     11 FC 13 FC 
2c93e     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
2c942     19 FC 1B FC 
2c946     1D FC 1E FC 
2c94a     21 FC 22 FC 
2c94e     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
2c952     F7 F9 F7 F9 
2c956     FB F9 FE F9 
2c95a     00 FA 03 FA 
2c95e     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
2c962     1B FC 45 FC 
2c966     46 FC 48 FC 
2c96a     4A FC 4B FC 
2c96e     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
2c972     52 FC 54 FC 
2c976     F3 FB 82 FA 
2c97a     35 FA 28 FA 
2c97e     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
2c982     31 FA 32 FA 
2c986     37 FA 37 FA 
2c98a     3C FA 00 FC 
2c98e     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
2c992     09 FC 0B FC 
2c996     0F FC 12 FC 
2c99a     12 FC 15 FC 
2c99e     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
2c9a2     8D FA 60 FA 
2c9a6     5B FA 5C FA 
2c9aa     60 FA 61 FA 
2c9ae     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
2c9b2     6C FA 6D FA 
2c9b6     37 FC 3A FC 
2c9ba     3B FC 3D FC 
2c9be     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
2c9c2     43 FC 44 FC 
2c9c6     45 FC 47 FC 
2c9ca     51 FB AB FA 
2c9ce     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
2c9d2     8E FA 91 FA 
2c9d6     93 FA 95 FA 
2c9da     98 FA 9B FA 
2c9de     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
2c9e2     68 FC 6A FC 
2c9e6     6C FC 6E FC 
2c9ea     70 FC 72 FC 
2c9ee     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
2c9f2     76 FC 3B FB 
2c9f6     D0 FA BB FA 
2c9fa     B9 FA BD FA 
2c9fe     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
2ca02     C4 FA C6 FA 
2ca06     CA FA 13 FC 
2ca0a     3A FC 3A FC 
2ca0e     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
2ca12     41 FC 43 FC 
2ca16     44 FC 47 FC 
2ca1a     48 FC 3C FC 
2ca1e     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
2ca22     E6 FA E8 FA 
2ca26     EB FA EE FA 
2ca2a     F0 FA F2 FA 
2ca2e     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
2ca32     61 FC 66 FC 
2ca36     68 FC 6B FC 
2ca3a     6C FC 6E FC 
2ca3e     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
2ca42     73 FC 75 FC 
2ca46     13 FC 3F FB 
2ca4a     17 FB 12 FB 
2ca4e     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
2ca52     1A FB 1D FB 
2ca56     1F FB 20 FB 
2ca5a     23 FB 92 FC 
2ca5e     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
2ca62     96 FC 97 FC 
2ca66     9A FC 9C FC 
2ca6a     9E FC 9F FC 
2ca6e     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
2ca72     5A FB 41 FB 
2ca76     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
2ca7a     00 00 00 00 | zero2 long 0
2ca7e     01 00 00 00 
2ca82     00 00 00 00 
2ca86     00 00 00 00 
2ca8a     00 00 00 00 | mouse  file "mouse2.def"
2ca8e     00 00 00 00 
2ca92     00 00 00 00 
2ca96     00 00 00 00 
2ca9a     00 00 00 00 | 	byte	$00[16]
2ca9e     01 01 00 00 
2caa2     00 00 00 00 
2caa6     00 00 00 00 
2caaa     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2caae     00 00 00 00 
2cab2     00 00 00 00 
2cab6     00 00 00 00 
2caba     00 00 00 00 | 	byte	$00[16]
2cabe     01 0D 01 00 
2cac2     00 00 00 00 
2cac6     00 00 00 00 
2caca     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2cace     00 00 00 00 
2cad2     00 00 00 00 
2cad6     00 00 00 00 
2cada     00 00 00 00 | 	byte	$00[16]
2cade     01 0D 0D 01 
2cae2     00 00 00 00 
2cae6     00 00 00 00 
2caea     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2caee     00 00 00 00 
2caf2     00 00 00 00 
2caf6     00 00 00 00 
2cafa     00 00 00 00 | 	byte	$00[16]
2cafe     01 0D 0D 0D 
2cb02     01 00 00 00 
2cb06     00 00 00 00 
2cb0a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2cb0e     00 00 00 00 
2cb12     00 00 00 00 
2cb16     00 00 00 00 
2cb1a     00 00 00 00 | 	byte	$00[16]
2cb1e     01 0D 0D 0D 
2cb22     0D 01 00 00 
2cb26     00 00 00 00 
2cb2a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2cb2e     00 00 00 00 
2cb32     00 00 00 00 
2cb36     00 00 00 00 
2cb3a     00 00 00 00 | 	byte	$00[16]
2cb3e     01 0D 0D 0D 
2cb42     0D 0D 01 00 
2cb46     00 00 00 00 
2cb4a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
2cb4e     00 00 00 00 
2cb52     00 00 00 00 
2cb56     00 00 00 00 
2cb5a     00 00 00 00 | 	byte	$00[16]
2cb5e     01 0D 0D 0D 
2cb62     0D 0D 0D 01 
2cb66     00 00 00 00 
2cb6a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
2cb6e     00 00 00 00 
2cb72     00 00 00 00 
2cb76     00 00 00 00 
2cb7a     00 00 00 00 | 	byte	$00[16]
2cb7e     01 0D 0D 0D 
2cb82     0D 0D 0D 0C 
2cb86     01 00 00 00 
2cb8a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
2cb8e     00 00 00 00 
2cb92     00 00 00 00 
2cb96     00 00 00 00 
2cb9a     00 00 00 00 | 	byte	$00[16]
2cb9e     01 0D 0D 0D 
2cba2     0D 0D 0D 0D 
2cba6     0C 01 00 00 
2cbaa     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
2cbae     00 00 00 00 
2cbb2     00 00 00 00 
2cbb6     00 00 00 00 
2cbba     00 00 00 00 | 	byte	$00[16]
2cbbe     01 0D 0D 0D 
2cbc2     0D 0D 0D 0D 
2cbc6     0D 0C 01 00 
2cbca     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
2cbce     00 00 00 00 
2cbd2     00 00 00 00 
2cbd6     00 00 00 00 
2cbda     00 00 00 00 | 	byte	$00[16]
2cbde     01 0D 0D 0D 
2cbe2     0D 0D 0D 0D 
2cbe6     0D 0D 0B 01 
2cbea     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
2cbee     00 00 00 00 
2cbf2     00 00 00 00 
2cbf6     00 00 00 00 
2cbfa     00 00 00 00 | 	byte	$00[16]
2cbfe     01 0D 0D 0D 
2cc02     0C 0D 0D 03 
2cc06     01 01 01 01 
2cc0a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
2cc0e     00 00 00 00 
2cc12     00 00 00 00 
2cc16     00 00 00 00 
2cc1a     00 00 00 00 | 	byte	$00[16]
2cc1e     01 0D 0D 0C 
2cc22     01 09 0D 03 
2cc26     00 00 00 00 
2cc2a     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
2cc2e     00 00 00 00 
2cc32     00 00 00 00 
2cc36     00 00 00 00 
2cc3a     00 00 00 00 | 	byte	$00[16]
2cc3e     01 0D 0C 01 
2cc42     00 01 0D 0B 
2cc46     01 00 00 00 
2cc4a     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
2cc4e     00 00 00 00 
2cc52     00 00 00 00 
2cc56     00 00 00 00 
2cc5a     00 00 00 00 | 	byte	$00[16]
2cc5e     01 0C 01 00 
2cc62     00 01 0A 0D 
2cc66     01 00 00 00 
2cc6a     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
2cc6e     00 00 00 00 
2cc72     00 00 00 00 
2cc76     00 00 00 00 
2cc7a     00 00 00 00 | 	byte	$00[16]
2cc7e     01 01 00 00 
2cc82     00 00 01 0D 
2cc86     0B 01 00 00 
2cc8a     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
2cc8e     00 00 00 00 
2cc92     00 00 00 00 
2cc96     00 00 00 00 
2cc9a     00 00 00 00 
2cc9e     00 00 00 00 
2cca2     00 00       | 	byte	$00[22]
2cca4     01 0B 0D 01 
2cca8     00 00 00 00 
2ccac     00 00 00 00 
2ccb0     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ccb4     00 00 00 00 
2ccb8     00 00 00 00 
2ccbc     00 00 00 00 
2ccc0     00 00 00 00 
2ccc4     00          | 	byte	$00[17]
2ccc5     01 01 00 00 
2ccc9     00 00 00 00 
2cccd     00 00 00 00 
2ccd1     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ccd5     00 00 00 00 
      ...             
2ce79     00 00 00 00 
2ce7d     00          | 	byte	$00[425]
2ce7e     73 32 00 04 
2ce82     00 00 10 00 
2ce86     00 00 00 00 
2ce8a     00 00 00 00 | atari2 file "atari2.s2"
2ce8e     43 87 43 87 
2ce92     43 87 44 87 
2ce96     43 87 44 87 
2ce9a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
2ce9e     43 87 43 87 
2cea2     43 87 44 87 
2cea6     43 87 43 87 
2ceaa     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
2ceae     44 87 43 87 
2ceb2     44 87 43 87 
2ceb6     43 87 43 87 
2ceba     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
2cebe     43 87 43 87 
2cec2     44 87 43 87 
2cec6     44 87 44 87 
2ceca     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
2cece     43 87 43 87 
2ced2     44 87 43 87 
2ced6     43 87 42 87 
2ceda     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
2cede     43 87 43 87 
2cee2     43 87 43 87 
2cee6     44 87 43 87 
2ceea     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
2ceee     44 87 44 87 
2cef2     43 87 44 87 
2cef6     43 87 44 87 
2cefa     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
2cefe     44 87 43 87 
2cf02     44 87 44 87 
2cf06     43 87 43 87 
2cf0a     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
2cf0e     43 87 44 87 
2cf12     44 87 43 87 
2cf16     43 87 44 87 
2cf1a     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
2cf1e     43 87 43 87 
2cf22     43 87 43 87 
2cf26     43 87 43 87 
2cf2a     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
2cf2e     42 87 43 87 
2cf32     44 87 42 87 
2cf36     43 87 43 87 
2cf3a     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
2cf3e     43 87 44 87 
2cf42     44 87 43 87 
2cf46     43 87 43 87 
2cf4a     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
2cf4e     43 87 5C 87 
2cf52     EE 86 AC 87 
2cf56     4C 7C A3 78 
2cf5a     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
2cf5e     BC 78 BB 78 
2cf62     BD 78 BC 78 
2cf66     BB 78 BD 78 
2cf6a     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
2cf6e     BB 78 BB 78 
2cf72     BC 78 BC 78 
2cf76     BC 78 BB 78 
2cf7a     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2cf7e     BC 78 BC 78 
2cf82     BC 78 BC 78 
2cf86     BC 78 BC 78 
2cf8a     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2cf8e     BB 78 BC 78 
2cf92     A0 78 4C 7C 
2cf96     11 7A 29 89 
2cf9a     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
2cf9e     44 87 43 87 
2cfa2     44 87 43 87 
2cfa6     43 87 42 87 
2cfaa     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
2cfae     43 87 43 87 
2cfb2     44 87 ED 85 
2cfb6     71 85 52 79 
2cfba     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
2cfbe     BC 78 BC 78 
2cfc2     BC 78 BC 78 
2cfc6     BC 78 BC 78 
2cfca     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2cfce     BC 78 BC 78 
2cfd2     BC 78 A0 78 
2cfd6     CF 7A B9 81 
2cfda     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
2cfde     44 87 43 87 
2cfe2     43 87 44 87 
2cfe6     43 87 44 87 
2cfea     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
2cfee     43 87 43 87 
2cff2     43 87 43 87 
2cff6     44 87 43 87 
2cffa     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
2cffe     43 87 43 87 
2d002     44 87 43 87 
2d006     44 87 43 87 
2d00a     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
2d00e     44 87 43 87 
2d012     43 87 43 87 
2d016     5A 87 39 81 
2d01a     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
2d01e     A5 78 BC 78 
2d022     BB 78 BC 78 
2d026     BB 78 BC 78 
2d02a     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
2d02e     BC 78 BC 78 
2d032     BC 78 BC 78 
2d036     BC 78 8F 79 
2d03a     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
2d03e     09 85 47 87 
2d042     43 87 43 87 
2d046     42 87 42 87 
2d04a     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
2d04e     43 87 43 87 
2d052     43 87 43 87 
2d056     43 87 44 87 
2d05a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
2d05e     43 87 43 87 
2d062     44 87 43 87 
2d066     42 87 43 87 
2d06a     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
2d06e     44 87 43 87 
2d072     43 87 43 87 
2d076     44 87 44 87 
2d07a     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
2d07e     94 78 55 7A 
2d082     B9 78 BC 78 
2d086     BC 78 BC 78 
2d08a     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2d08e     BC 78 BB 78 
2d092     BC 78 BC 78 
2d096     BC 78 BC 78 
2d09a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2d09e     BB 78 BC 78 
2d0a2     BC 78 BC 78 
2d0a6     BB 78 BC 78 
2d0aa     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2d0ae     BC 78 BC 78 
2d0b2     BD 78 BC 78 
2d0b6     BC 78 BB 78 
2d0ba     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
2d0be     94 78 B3 84 
2d0c2     36 84 4A 87 
2d0c6     43 87 43 87 
2d0ca     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
2d0ce     43 87 44 87 
2d0d2     43 87 43 87 
2d0d6     43 87 43 87 
2d0da     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
2d0de     43 87 44 87 
2d0e2     43 87 44 87 
2d0e6     43 87 43 87 
2d0ea     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
2d0ee     43 87 43 87 
2d0f2     43 87 45 87 
2d0f6     43 87 43 87 
2d0fa     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
2d0fe     43 87 44 87 
2d102     44 87 44 87 
2d106     43 87 43 87 
2d10a     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
2d10e     43 87 42 87 
2d112     43 87 43 87 
2d116     44 87 43 87 
2d11a     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
2d11e     54 87 3C 82 
2d122     36 83 52 79 
2d126     C6 78 BC 78 
2d12a     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
2d12e     BB 78 BB 78 
2d132     BC 78 BC 78 
2d136     BC 78 BC 78 
2d13a     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
2d13e     BD 78 ED 78 
2d142     1B 79 F4 83 
2d146     4D 83 4E 87 
2d14a     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
2d14e     44 87 43 87 
2d152     42 87 44 87 
2d156     43 87 42 87 
2d15a     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
2d15e     43 87 54 87 
2d162     26 82 B3 84 
2d166     D6 77 BB 78 
2d16a     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
2d16e     BC 78 BB 78 
2d172     BB 78 BB 78 
2d176     BB 78 BB 78 
2d17a     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
2d17e     BC 78 BC 78 
2d182     26 79 18 75 
2d186     36 83 1F 84 
2d18a     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
2d18e     43 87 43 87 
2d192     43 87 43 87 
2d196     43 87 44 87 
2d19a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
2d19e     43 87 44 87 
2d1a2     44 87 43 87 
2d1a6     43 87 43 87 
2d1aa     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
2d1ae     43 87 43 87 
2d1b2     43 87 43 87 
2d1b6     44 87 44 87 
2d1ba     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
2d1be     44 87 43 87 
2d1c2     43 87 43 87 
2d1c6     43 87 44 87 
2d1ca     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
2d1ce     44 87 44 87 
2d1d2     44 87 43 87 
2d1d6     44 87 43 87 
2d1da     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
2d1de     43 87 43 87 
2d1e2     43 87 44 87 
2d1e6     44 87 43 87 
2d1ea     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
2d1ee     43 87 43 87 
2d1f2     43 87 43 87 
2d1f6     43 87 44 87 
2d1fa     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
2d1fe     43 87 44 87 
2d202     43 87 44 87 
2d206     19 87 7D 86 
2d20a     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
2d20e     B1 78 BC 78 
2d212     BC 78 BC 78 
2d216     BC 78 BC 78 
2d21a     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2d21e     BC 78 BC 78 
2d222     BD 78 BC 78 
2d226     B7 78 3B 7B 
2d22a     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
2d22e     96 86 44 87 
2d232     43 87 43 87 
2d236     43 87 43 87 
2d23a     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
2d23e     44 87 44 87 
2d242     43 87 44 87 
2d246     43 87 44 87 
2d24a     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
2d24e     43 87 44 87 
2d252     43 87 44 87 
2d256     43 87 44 87 
2d25a     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
2d25e     43 87 44 87 
2d262     43 87 43 87 
2d266     44 87 43 87 
2d26a     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
2d26e     44 87 44 87 
2d272     43 87 43 87 
2d276     43 87 44 87 
2d27a     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
2d27e     43 87 43 87 
2d282     43 87 43 87 
2d286     44 87 44 87 
2d28a     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
2d28e     36 83 CF 7A 
2d292     AB 78 BB 78 
2d296     BC 78 BC 78 
2d29a     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
2d29e     BB 78 BC 78 
2d2a2     BC 78 BC 78 
2d2a6     BC 78 BC 78 
2d2aa     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2d2ae     BC 78 BC 78 
2d2b2     BC 78 BB 78 
2d2b6     BC 78 BC 78 
2d2ba     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2d2be     BB 78 BC 78 
2d2c2     BB 78 BC 78 
2d2c6     BC 78 BD 78 
2d2ca     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
2d2ce     BC 78 BC 78 
2d2d2     BC 78 BC 78 
2d2d6     BC 78 BD 78 
2d2da     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
2d2de     BC 78 BB 78 
2d2e2     BC 78 BB 78 
2d2e6     BB 78 BC 78 
2d2ea     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
2d2ee     BC 78 BC 78 
2d2f2     BC 78 BC 78 
2d2f6     BC 78 BB 78 
2d2fa     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
2d2fe     BC 78 BC 78 
2d302     BC 78 BD 78 
2d306     BB 78 BC 78 
2d30a     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
2d30e     BC 78 BC 78 
2d312     BC 78 BB 78 
2d316     BC 78 BB 78 
2d31a     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
2d31e     BB 78 BC 78 
2d322     BC 78 BC 78 
2d326     BC 78 BB 78 
2d32a     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2d32e     BC 78 BC 78 
2d332     BC 78 BB 78 
2d336     BC 78 BB 78 
2d33a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2d33e     BC 78 BC 78 
2d342     BC 78 BC 78 
2d346     BB 78 BC 78 
2d34a     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
2d34e     BC 78 9F 78 
2d352     52 79 B3 84 
2d356     2F 86 60 87 
2d35a     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
2d35e     44 87 43 87 
2d362     43 87 43 87 
2d366     43 87 43 87 
2d36a     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
2d36e     43 87 43 87 
2d372     43 87 44 87 
2d376     43 87 43 87 
2d37a     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
2d37e     43 87 43 87 
2d382     43 87 43 87 
2d386     43 87 44 87 
2d38a     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
2d38e     44 87 44 87 
2d392     5E 87 BC 80 
2d396     FB 80 94 78 
2d39a     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
2d39e     BD 78 BC 78 
2d3a2     BB 78 BC 78 
2d3a6     BB 78 BB 78 
2d3aa     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
2d3ae     BC 78 BB 78 
2d3b2     BB 78 6B 79 
2d3b6     D6 77 AC 87 
2d3ba     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
2d3be     43 87 44 87 
2d3c2     43 87 43 87 
2d3c6     44 87 43 87 
2d3ca     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
2d3ce     43 87 44 87 
2d3d2     43 87 5C 87 
2d3d6     E7 80 00 80 
2d3da     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
2d3de     BC 78 BD 78 
2d3e2     BC 78 BC 78 
2d3e6     BC 78 BB 78 
2d3ea     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2d3ee     BC 78 BC 78 
2d3f2     BB 78 BC 78 
2d3f6     BB 78 BC 78 
2d3fa     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2d3fe     BB 78 BC 78 
2d402     BC 78 BC 78 
2d406     BC 78 BC 78 
2d40a     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
2d40e     BC 78 BC 78 
2d412     BC 78 BC 78 
2d416     A0 78 8D 7B 
2d41a     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
2d41e     60 87 43 87 
2d422     44 87 44 87 
2d426     43 87 43 87 
2d42a     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
2d42e     44 87 43 87 
2d432     43 87 43 87 
2d436     44 87 73 86 
2d43a     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
2d43e     51 7B B6 78 
2d442     BC 78 BD 78 
2d446     BC 78 BC 78 
2d44a     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
2d44e     BB 78 BC 78 
2d452     BD 78 BB 78 
2d456     BC 78 BB 78 
2d45a     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
2d45e     BC 78 BC 78 
2d462     BC 78 BC 78 
2d466     BB 78 BC 78 
2d46a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2d46e     BC 78 BB 78 
2d472     BB 78 BC 78 
2d476     BC 78 BB 78 
2d47a     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
2d47e     22 8C AF 84 
2d482     48 87 43 87 
2d486     44 87 43 87 
2d48a     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
2d48e     43 87 42 87 
2d492     43 87 43 87 
2d496     44 87 43 87 
2d49a     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
2d49e     43 87 43 87 
2d4a2     44 87 44 87 
2d4a6     43 87 43 87 
2d4aa     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
2d4ae     43 87 43 87 
2d4b2     43 87 43 87 
2d4b6     44 87 43 87 
2d4ba     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
2d4be     9F 8B D6 77 
2d4c2     16 7C B3 78 
2d4c6     BC 78 BB 78 
2d4ca     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
2d4ce     BB 78 BC 78 
2d4d2     BB 78 BC 78 
2d4d6     BC 78 BC 78 
2d4da     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2d4de     BC 78 BB 78 
2d4e2     BB 78 BC 78 
2d4e6     BB 78 BC 78 
2d4ea     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
2d4ee     BB 78 BB 78 
2d4f2     BC 78 BC 78 
2d4f6     BC 78 BB 78 
2d4fa     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
2d4fe     BC 78 BC 78 
2d502     BC 78 BD 78 
2d506     BB 78 BC 78 
2d50a     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
2d50e     BC 78 BC 78 
2d512     BC 78 BB 78 
2d516     BC 78 BC 78 
2d51a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2d51e     A8 78 54 7E 
2d522     F4 83 17 82 
2d526     50 87 43 87 
2d52a     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
2d52e     44 87 43 87 
2d532     44 87 43 87 
2d536     43 87 44 87 
2d53a     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
2d53e     43 87 28 87 
2d542     20 85 CF 7A 
2d546     70 7D AD 78 
2d54a     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
2d54e     BB 78 BC 78 
2d552     BC 78 BC 78 
2d556     BB 78 BB 78 
2d55a     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
2d55e     BB 78 B2 78 
2d562     9A 7C CF 7A 
2d566     4A 87 0D 87 
2d56a     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
2d56e     43 87 44 87 
2d572     43 87 44 87 
2d576     43 87 43 87 
2d57a     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
2d57e     44 87 43 87 
2d582     28 87 51 85 
2d586     11 7A 1E 7D 
2d58a     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
2d58e     BC 78 BB 78 
2d592     BC 78 BC 78 
2d596     BC 78 BC 78 
2d59a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2d59e     BB 78 BC 78 
2d5a2     BB 78 BC 78 
2d5a6     BC 78 BC 78 
2d5aa     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
2d5ae     BB 78 BC 78 
2d5b2     BC 78 BC 78 
2d5b6     BD 78 BB 78 
2d5ba     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
2d5be     BC 78 BB 78 
2d5c2     BC 78 BC 78 
2d5c6     BC 78 BB 78 
2d5ca     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2d5ce     BC 78 BC 78 
2d5d2     BC 78 BC 78 
2d5d6     BB 78 BC 78 
2d5da     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2d5de     BC 78 BD 78 
2d5e2     BC 78 BC 78 
2d5e6     BC 78 BB 78 
2d5ea     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2d5ee     BC 78 BB 78 
2d5f2     BB 78 BC 78 
2d5f6     BC 78 BB 78 
2d5fa     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2d5fe     BB 78 BB 78 
2d602     BB 78 BC 78 
2d606     B6 78 48 7D 
2d60a     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
2d60e     56 87 43 87 
2d612     42 87 44 87 
2d616     44 87 43 87 
2d61a     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
2d61e     43 87 44 87 
2d622     43 87 44 87 
2d626     4C 87 7E 83 
2d62a     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
2d62e     F7 78 BC 78 
2d632     BC 78 BB 78 
2d636     BB 78 BC 78 
2d63a     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2d63e     BC 78 BB 78 
2d642     BC 78 BC 78 
2d646     BB 78 BC 78 
2d64a     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
2d64e     BB 78 BC 78 
2d652     BC 78 BC 78 
2d656     BC 78 BB 78 
2d65a     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2d65e     BC 78 BC 78 
2d662     BC 78 BC 78 
2d666     BC 78 BB 78 
2d66a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2d66e     BC 78 BB 78 
2d672     BB 78 BC 78 
2d676     BC 78 BB 78 
2d67a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2d67e     BC 78 BC 78 
2d682     BB 78 BC 78 
2d686     BC 78 BC 78 
2d68a     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
2d68e     73 32 00 04 
2d692     00 00 10 00 
2d696     00 00 00 00 
2d69a     00 00 00 00 | atari12 file "atari12.s2"
2d69e     00 6D 00 6D 
2d6a2     00 6D 00 6D 
2d6a6     00 6D 00 6D 
2d6aa     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2d6ae     00 6D 00 6D 
2d6b2     00 6D 00 6D 
2d6b6     00 6D 00 6D 
2d6ba     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2d6be     00 6D 00 6D 
2d6c2     00 6D 00 6D 
2d6c6     00 6D 00 6D 
2d6ca     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2d6ce     00 6D 00 6D 
2d6d2     00 6D 00 6D 
2d6d6     00 6D 00 6D 
2d6da     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2d6de     00 6D 00 6D 
2d6e2     00 6D 00 6D 
2d6e6     00 6D 00 6D 
2d6ea     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
2d6ee     00 6C 00 6C 
2d6f2     00 6C 00 6C 
2d6f6     00 6C 00 6C 
2d6fa     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2d6fe     00 6C 00 6C 
2d702     00 6C 00 6C 
2d706     00 6C 00 6C 
2d70a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2d70e     00 6C 00 6C 
2d712     00 6C 00 6C 
2d716     00 6C 00 6C 
2d71a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2d71e     00 6C 00 6C 
2d722     00 6C 00 6C 
2d726     00 6C 00 6C 
2d72a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2d72e     00 6C 00 6C 
2d732     00 6C 00 6C 
2d736     00 6C 00 6C 
2d73a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2d73e     00 6C 00 6C 
2d742     00 6C 00 6C 
2d746     00 6C 00 6C 
2d74a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2d74e     00 6C 00 6C 
2d752     00 6C 00 6C 
2d756     00 6C 00 6C 
2d75a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2d75e     00 6C 00 6C 
2d762     00 6C 00 6C 
2d766     00 6C 00 6C 
2d76a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2d76e     00 6C 00 6C 
2d772     00 6C 00 6C 
2d776     00 6C 00 6C 
2d77a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2d77e     00 6C 00 6C 
2d782     00 6C 00 6C 
2d786     00 6C 00 6C 
2d78a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2d78e     00 6C 00 6C 
2d792     00 6C 00 6C 
2d796     00 6C 00 6C 
2d79a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2d79e     00 6C 00 6B 
2d7a2     00 6B 00 6B 
2d7a6     00 6B 00 6B 
2d7aa     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2d7ae     00 6B 00 6B 
2d7b2     00 6B 00 6B 
2d7b6     00 6B 00 6B 
2d7ba     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2d7be     00 6B 00 6B 
2d7c2     00 6B 00 6B 
2d7c6     00 6B 00 6B 
2d7ca     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2d7ce     00 6B 00 6B 
2d7d2     00 6B 00 6B 
2d7d6     00 6B 00 6B 
2d7da     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2d7de     00 6B 00 6B 
2d7e2     00 6B 00 6B 
2d7e6     00 6B 00 6B 
2d7ea     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2d7ee     00 6B 00 6B 
2d7f2     00 6B 00 6B 
2d7f6     00 6B 00 6B 
2d7fa     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2d7fe     00 6B 00 6B 
2d802     00 6B 00 6B 
2d806     00 6B 00 6B 
2d80a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2d80e     00 6B 00 6B 
2d812     00 6B 00 6B 
2d816     00 6B 00 6B 
2d81a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2d81e     00 6B 00 6B 
2d822     00 6B 00 6B 
2d826     00 6B 00 6B 
2d82a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2d82e     00 6B 00 6B 
2d832     00 6B 00 6B 
2d836     00 6A 00 9D 
2d83a     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
2d83e     00 9E 00 9E 
2d842     00 9E 00 9E 
2d846     00 9E 00 9E 
2d84a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2d84e     00 9E 00 9E 
2d852     00 9E 00 9E 
2d856     00 9E 00 9E 
2d85a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2d85e     00 9E 00 9E 
2d862     00 9E 00 9E 
2d866     00 9E 00 9E 
2d86a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2d86e     00 9E 00 9E 
2d872     00 9E 00 9E 
2d876     00 9E 00 9E 
2d87a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2d87e     00 9E 00 9E 
2d882     00 9E 00 9E 
2d886     00 9E 00 9E 
2d88a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2d88e     00 9E 00 9E 
2d892     00 9E 00 9E 
2d896     00 9E 00 9E 
2d89a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2d89e     00 9E 00 9E 
2d8a2     00 9E 00 9E 
2d8a6     00 9E 00 9E 
2d8aa     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2d8ae     00 9E 00 9E 
2d8b2     00 9E 00 9E 
2d8b6     00 9E 00 9E 
2d8ba     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2d8be     00 9E 00 9E 
2d8c2     00 9E 00 9E 
2d8c6     00 9E 00 9E 
2d8ca     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
2d8ce     00 9F 00 9F 
2d8d2     00 9F 00 9F 
2d8d6     00 9F 00 9F 
2d8da     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2d8de     00 9F 00 9F 
2d8e2     00 9F 00 9F 
2d8e6     00 9F 00 9F 
2d8ea     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2d8ee     00 9F 00 9F 
2d8f2     00 9F 00 9F 
2d8f6     00 9F 00 9F 
2d8fa     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2d8fe     00 9F 00 9F 
2d902     00 9F 00 9F 
2d906     00 9F 00 9F 
2d90a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2d90e     00 9F 00 9F 
2d912     00 9F 00 9F 
2d916     00 9F 00 9F 
2d91a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2d91e     00 9F 00 9F 
2d922     00 9F 00 9F 
2d926     00 9F 00 9F 
2d92a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2d92e     00 9F 00 9F 
2d932     00 9F 00 9F 
2d936     00 9F 00 9F 
2d93a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2d93e     00 9F 00 9F 
2d942     00 9F 00 9F 
2d946     00 9F 00 9F 
2d94a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2d94e     00 9F 00 9F 
2d952     00 9F 00 9F 
2d956     00 9F 00 9F 
2d95a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2d95e     00 9F 00 9F 
2d962     00 9F 00 9F 
2d966     00 9F 00 9F 
2d96a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2d96e     00 9F 00 9F 
2d972     00 9F 00 9F 
2d976     00 9F 00 9F 
2d97a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2d97e     00 9F 00 9F 
2d982     00 9F 00 9F 
2d986     00 9F 00 9F 
2d98a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2d98e     00 9F 00 9F 
2d992     00 9F 00 A0 
2d996     00 A0 00 A0 
2d99a     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2d99e     00 A0 00 A0 
2d9a2     00 A0 00 A0 
2d9a6     00 A0 00 A0 
2d9aa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2d9ae     00 A0 00 A0 
2d9b2     00 A0 00 A0 
2d9b6     00 A0 00 A0 
2d9ba     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2d9be     00 A0 00 A0 
2d9c2     00 A0 00 A0 
2d9c6     00 A0 00 A0 
2d9ca     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2d9ce     00 A0 00 A0 
2d9d2     00 A0 00 A0 
2d9d6     00 A0 00 A0 
2d9da     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2d9de     00 A0 00 A0 
2d9e2     00 A0 00 A0 
2d9e6     00 A0 00 A0 
2d9ea     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2d9ee     00 A0 00 A0 
2d9f2     00 A0 00 A0 
2d9f6     00 A0 00 A0 
2d9fa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2d9fe     00 A0 00 A0 
2da02     00 A0 00 A0 
2da06     00 A0 00 A0 
2da0a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2da0e     00 A0 00 A0 
2da12     00 A0 00 A0 
2da16     00 A0 00 A0 
2da1a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2da1e     00 A0 00 A0 
2da22     00 A0 00 A0 
2da26     00 A0 00 A0 
2da2a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2da2e     00 A0 00 A0 
2da32     00 A0 00 A0 
2da36     00 A0 00 A0 
2da3a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2da3e     00 A0 00 A0 
2da42     00 A0 00 A0 
2da46     00 A0 00 A0 
2da4a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2da4e     00 A0 00 A0 
2da52     00 A0 00 A0 
2da56     00 A0 00 A0 
2da5a     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
2da5e     00 6D 00 6D 
2da62     00 6D 00 6D 
2da66     00 6D 00 6D 
2da6a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2da6e     00 6D 00 6D 
2da72     00 6D 00 6D 
2da76     00 6D 00 6D 
2da7a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2da7e     00 6D 00 6D 
2da82     00 6D 00 6D 
2da86     00 6D 00 6D 
2da8a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2da8e     00 6D 00 6D 
2da92     00 6D 00 6D 
2da96     00 6D 00 6D 
2da9a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2da9e     00 6D 00 6D 
2daa2     00 6D 00 6D 
2daa6     00 6D 00 6D 
2daaa     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2daae     00 6D 00 6D 
2dab2     00 6D 00 6D 
2dab6     00 6D 00 6D 
2daba     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2dabe     00 6D 00 6D 
2dac2     00 6D 00 6D 
2dac6     00 6D 00 6D 
2daca     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2dace     00 6D 00 6D 
2dad2     00 6D 00 6D 
2dad6     00 6D 00 6D 
2dada     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2dade     00 6D 00 6D 
2dae2     00 A0 00 A0 
2dae6     00 A0 00 A0 
2daea     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2daee     00 A0 00 A0 
2daf2     00 A0 00 A0 
2daf6     00 A0 00 A0 
2dafa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2dafe     00 A0 00 A0 
2db02     00 A0 00 A0 
2db06     00 A0 00 A0 
2db0a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2db0e     00 A0 00 A0 
2db12     00 A0 00 A0 
2db16     00 A0 00 A0 
2db1a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2db1e     00 A0 00 A0 
2db22     00 A0 00 A0 
2db26     00 A0 00 A0 
2db2a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2db2e     00 A0 00 A0 
2db32     00 A0 00 A0 
2db36     00 A0 00 A0 
2db3a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2db3e     00 A0 00 A0 
2db42     00 A0 00 A0 
2db46     00 A0 00 A0 
2db4a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2db4e     00 A0 00 A0 
2db52     00 A0 00 A0 
2db56     00 A0 00 A0 
2db5a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2db5e     00 A0 00 A0 
2db62     00 A0 00 A0 
2db66     00 A0 00 A0 
2db6a     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
2db6e     00 6D 00 6D 
2db72     00 6D 00 6D 
2db76     00 6D 00 6D 
2db7a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2db7e     00 6D 00 6D 
2db82     00 6D 00 6D 
2db86     00 6D 00 6D 
2db8a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2db8e     00 6D 00 6D 
2db92     00 6D 00 6D 
2db96     00 6D 00 6D 
2db9a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2db9e     00 6D 00 6D 
2dba2     00 6D 00 6D 
2dba6     00 6D 00 6D 
2dbaa     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2dbae     00 6D 00 6D 
2dbb2     00 6D 00 6D 
2dbb6     00 6D 00 6D 
2dbba     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2dbbe     00 6D 00 6D 
2dbc2     00 6D 00 6D 
2dbc6     00 6D 00 6D 
2dbca     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2dbce     00 6D 00 6D 
2dbd2     00 6D 00 6D 
2dbd6     00 6D 00 6D 
2dbda     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2dbde     00 6D 00 6D 
2dbe2     00 6D 00 6D 
2dbe6     00 6D 00 6D 
2dbea     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2dbee     00 6D 00 6D 
2dbf2     00 6C 00 A0 
2dbf6     00 9F 00 A0 
2dbfa     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
2dbfe     00 A0 00 A0 
2dc02     00 A0 00 A0 
2dc06     00 A0 00 A0 
2dc0a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2dc0e     00 A0 00 A0 
2dc12     00 A0 00 A0 
2dc16     00 A0 00 A0 
2dc1a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2dc1e     00 A0 00 A0 
2dc22     00 A0 00 A0 
2dc26     00 A0 00 A0 
2dc2a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2dc2e     00 A0 00 A0 
2dc32     00 A0 00 A0 
2dc36     00 A0 00 A0 
2dc3a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2dc3e     00 A0 00 A0 
2dc42     00 A0 00 A0 
2dc46     00 A0 00 A0 
2dc4a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2dc4e     00 A0 00 A0 
2dc52     00 A0 00 A0 
2dc56     00 A0 00 A0 
2dc5a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2dc5e     00 A0 00 A0 
2dc62     00 A0 00 A0 
2dc66     00 A0 00 A0 
2dc6a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2dc6e     00 A0 00 A0 
2dc72     00 A0 00 A0 
2dc76     00 A0 00 A0 
2dc7a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2dc7e     00 A0 00 A0 
2dc82     00 A0 00 A0 
2dc86     00 A0 00 A0 
2dc8a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2dc8e     00 A0 00 A0 
2dc92     00 A0 00 A0 
2dc96     00 A0 00 A0 
2dc9a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2dc9e     00 A0 00 A0 
2dca2     00 A0 00 A0 
2dca6     00 A0 00 A0 
2dcaa     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
2dcae     00 A1 00 A1 
2dcb2     00 A1 00 A1 
2dcb6     00 A1 00 A1 
2dcba     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
2dcbe     00 A1 00 A1 
2dcc2     00 A1 00 A1 
2dcc6     00 A1 00 A1 
2dcca     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
2dcce     00 A1 00 A1 
2dcd2     00 A1 00 A1 
2dcd6     00 A1 00 A1 
2dcda     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
2dcde     00 A1 00 A1 
2dce2     00 A1 00 A1 
2dce6     00 A1 00 A1 
2dcea     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
2dcee     00 A1 00 A1 
2dcf2     00 A1 00 A1 
2dcf6     00 A1 00 A1 
2dcfa     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
2dcfe     00 A1 00 A1 
2dd02     00 A1 00 A1 
2dd06     00 6E 00 6E 
2dd0a     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
2dd0e     00 6E 00 6E 
2dd12     00 6E 00 6E 
2dd16     00 6E 00 6E 
2dd1a     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
2dd1e     00 6E 00 6E 
2dd22     00 6E 00 6E 
2dd26     00 6E 00 6E 
2dd2a     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
2dd2e     00 6E 00 6E 
2dd32     00 6E 00 6E 
2dd36     00 6E 00 6E 
2dd3a     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
2dd3e     00 6E 00 6D 
2dd42     00 6D 00 6D 
2dd46     00 6D 00 6D 
2dd4a     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2dd4e     00 6D 00 6D 
2dd52     00 6D 00 6D 
2dd56     00 6D 00 6D 
2dd5a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2dd5e     00 6D 00 6D 
2dd62     00 6D 00 6D 
2dd66     00 6D 00 6D 
2dd6a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2dd6e     00 6D 00 6D 
2dd72     00 6D 00 6D 
2dd76     00 6D 00 6D 
2dd7a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2dd7e     00 6D 00 6D 
2dd82     00 6D 00 6D 
2dd86     00 6D 00 6D 
2dd8a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2dd8e     00 6D 00 6D 
2dd92     00 6D 00 6D 
2dd96     00 6D 00 6D 
2dd9a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2dd9e     00 6D 00 6D 
2dda2     00 6D 00 6D 
2dda6     00 6D 00 6D 
2ddaa     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2ddae     00 6D 00 6D 
2ddb2     00 6D 00 6D 
2ddb6     00 6D 00 6D 
2ddba     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2ddbe     00 6D 00 6D 
2ddc2     00 6D 00 6D 
2ddc6     00 6D 00 6D 
2ddca     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2ddce     00 6D 00 6D 
2ddd2     00 6D 00 6D 
2ddd6     00 6D 00 6D 
2ddda     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2ddde     00 6D 00 6D 
2dde2     00 6D 00 6D 
2dde6     00 6D 00 6D 
2ddea     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2ddee     00 6D 00 6D 
2ddf2     00 6C 00 6C 
2ddf6     00 6C 00 6C 
2ddfa     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2ddfe     00 6C 00 6C 
2de02     00 6C 00 6C 
2de06     00 6C 00 6C 
2de0a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2de0e     00 6C 00 6C 
2de12     00 6C 00 6C 
2de16     00 9D 00 9F 
2de1a     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
2de1e     00 9F 00 9F 
2de22     00 9F 00 9F 
2de26     00 A0 00 A0 
2de2a     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2de2e     00 A0 00 A0 
2de32     00 A0 00 A0 
2de36     00 A0 00 A0 
2de3a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2de3e     00 A0 00 A0 
2de42     00 A0 00 A0 
2de46     00 A0 00 A0 
2de4a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2de4e     00 A0 00 A0 
2de52     00 A0 00 A0 
2de56     00 A0 00 A0 
2de5a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2de5e     00 A0 00 A0 
2de62     00 A0 00 A0 
2de66     00 A0 00 A0 
2de6a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2de6e     00 A0 00 A0 
2de72     00 A0 00 A0 
2de76     00 A0 00 A0 
2de7a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2de7e     00 A0 00 A0 
2de82     00 A0 00 A0 
2de86     00 A0 00 A0 
2de8a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2de8e     00 A0 00 A0 
2de92     00 A0 00 A0 
2de96     00 A0 00 A0 
2de9a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2de9e                 | 
2de9e     00 00       |              	org
2dea0 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
2dea4 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
2dea8 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
2deac 003             | 
2deac 003 00 30 04 F6 |                 mov     psramaddr,#0
2deb0 004             | 
2deb0 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
2deb4 005 20 00 00 FF 
2deb8 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
2debc 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
2dec0 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
2dec4 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
2dec8 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
2decc 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
2ded0 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
2ded4 00d             | 
2ded4 00d 20 00 00 FF 
2ded8 00e 00 30 04 F1 |                 add 	psramaddr,##16384
2dedc 00f E0 03 00 FF 
2dee0 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
2dee4 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
2dee8 012             | 
2dee8 012             |                 
2dee8 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
2deec 013             |     
2deec 013 01 2C 60 FD |                 cogid 	t11				' get id
2def0 014 00 00 EC FC |                 coginit #0,#0				' start the new program
2def4 015 03 2C 60 FD |                 cogstop t11				' stop the loader
2def8 016             | 
2def8 016 00 00 00 00 | t11 		long 	0
2defc 017 00 FF 07 00 | mailbox 	long 	$7FF00
2df00 018 00 00 00 00 | psramaddr 	long 	0
2df04 019 00 00 00 00 | pslockval	long 	0
2df08 01a 00 00 00 00 | cmd             long    0
2df0c 01b 00 00 00 00 | buf1            long    0
2df10 01c 00 40 00 00 | buf2            long    16384
2df14 01d 18 DF 02 00 | 	long	@@@_dat_ + 12624
2df18 01e 50 32 20 52 
2df1c 01f 65 74 72 6F 
2df20 020 6D 61 63 68 
2df24 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
2df28 022 42 41 53 49 
2df2c 023 43 20 76 65 
2df30 024 72 73 69 6F 
2df34 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
2df38 026 32 35 00 00 | 	byte	$32, $35, $00, $00
2df3c 027             | 	alignl
2df3c 027             | _hg010b_spin2_dat_
2df3c 027             | 
2df3c 027 00 00 00 00 
2df40 028 00 00 00 00 
2df44 029 00 00 00 00 
2df48 02a 00 00 00 00 
2df4c 02b 00 00 00    | vga_font       file "vgafont.def"
2df4f 02b 7E 81 A5 81 
2df53 02c 81 BD 99 81 
2df57 02d 81 7E 00 00 
2df5b 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
2df5f 02f 7E FF DB FF 
2df63 030 FF C3 E7 FF 
2df67 031 FF 7E 00 00 
2df6b 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
2df6f 033 00 36 7F 7F 
2df73 034 7F 7F 3E 1C 
2df77 035 08 00 00 00 
2df7b 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
2df7f 037 00 08 1C 3E 
2df83 038 7F 3E 1C 08 
2df87 039 00 00 00 00 
2df8b 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
2df8f 03b 18 3C 3C E7 
2df93 03c E7 E7 18 18 
2df97 03d 3C 00 00 00 
2df9b 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
2df9f 03f 18 3C 7E FF 
2dfa3 040 FF 7E 18 18 
2dfa7 041 3C 00 00 00 
2dfab 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
2dfaf 043 00 00 00 18 
2dfb3 044 3C 3C 18 00 
2dfb7 045 00 00 00 00 
2dfbb 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
2dfbf 047 FF FF FF E7 
2dfc3 048 C3 C3 E7 FF 
2dfc7 049 FF FF FF FF 
2dfcb 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
2dfcf 04b 00 00 3C 66 
2dfd3 04c 42 42 66 3C 
2dfd7 04d 00 00 00 00 
2dfdb 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
2dfdf 04f FF FF C3 99 
2dfe3 050 BD BD 99 C3 
2dfe7 051 FF FF FF FF 
2dfeb 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
2dfef 053 78 70 58 4C 
2dff3 054 1E 33 33 33 
2dff7 055 33 1E 00 00 
2dffb 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
2dfff 057 3C 66 66 66 
2e003 058 66 3C 18 7E 
2e007 059 18 18 00 00 
2e00b 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
2e00f 05b FC CC FC 0C 
2e013 05c 0C 0C 0C 0E 
2e017 05d 0F 07 00 00 
2e01b 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
2e01f 05f FE C6 FE C6 
2e023 060 C6 C6 C6 E6 
2e027 061 E7 67 03 00 
2e02b 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
2e02f 063 18 18 DB 3C 
2e033 064 E7 3C DB 18 
2e037 065 18 00 00 00 
2e03b 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
2e03f 067 03 07 0F 1F 
2e043 068 7F 1F 0F 07 
2e047 069 03 01 00 00 
2e04b 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
2e04f 06b 60 70 78 7C 
2e053 06c 7F 7C 78 70 
2e057 06d 60 40 00 00 
2e05b 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
2e05f 06f 18 3C 7E 18 
2e063 070 18 18 7E 3C 
2e067 071 18 00 00 00 
2e06b 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
2e06f 073 66 66 66 66 
2e073 074 66 66 66    | 	byte	$66[7]
2e076 075 00 66 66 00 
2e07a 076 00 00 00 00 
2e07e 077 00 FE DB DB 
2e082 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
2e086 079 D8 D8 D8 00 
2e08a 07a 00 00 00 3E 
2e08e 07b 63 06 1C 36 
2e092 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
2e096 07d 30 63 3E 00 
2e09a 07e 00 00 00 00 
2e09e 07f 00 00 00 00 
2e0a2 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
2e0a6 081 7F 7F 7F 00 
2e0aa 082 00 00 00 00 
2e0ae 083 00 18 3C 7E 
2e0b2 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
2e0b6 085 3C 18 7E 00 
2e0ba 086 00 00 00 00 
2e0be 087 00 18 3C 7E 
2e0c2 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
2e0c6 089 18 18 18 00 
2e0ca 08a 00 00 00 00 
2e0ce 08b 00 18 18 18 
2e0d2 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2e0d6 08d 7E 3C 18 00 
2e0da 08e 00 00 00 00 
2e0de 08f 00 00 00 18 
2e0e2 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
2e0e6 091 00 00 00 00 
2e0ea 092 00 00 00 00 
2e0ee 093 00 00 00    | 	byte	$00[11]
2e0f1 094 0C 06 7F 06 
2e0f5 095 0C 00 00 00 
2e0f9 096 00 00 00 00 
2e0fd 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e101 098 00 03 03 03 
2e105 099 7F 00 00 00 
2e109 09a 00 00 00 00 
2e10d 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e111 09c 14 36 7F 36 
2e115 09d 14 00 00 00 
2e119 09e 00 00 00 00 
2e11d 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
2e121 0a0 1C 1C 3E 3E 
2e125 0a1 7F 7F 00 00 
2e129 0a2 00 00 00 00 
2e12d 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
2e131 0a4 7F 3E 3E 1C 
2e135 0a5 1C 08 00 00 
2e139 0a6 00 00 00 00 
2e13d 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e141 0a8 00 00 00 00 
2e145 0a9 00 00 00 00 
2e149 0aa 00 00 00 00 
2e14d 0ab 00 00       | 	byte	$00[14]
2e14f 0ab 18 3C 3C 3C 
2e153 0ac 18 18 18 00 
2e157 0ad 18 18 00 00 
2e15b 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
2e15f 0af 66 24 00 00 
2e163 0b0 00 00 00 00 
2e167 0b1 00 00 00 00 
2e16b 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e16f 0b3 00 36 36 7F 
2e173 0b4 36 36 36 7F 
2e177 0b5 36 36 00 00 
2e17b 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
2e17f 0b7 3E 63 43 03 
2e183 0b8 3E 60 60 61 
2e187 0b9 63 3E 18 18 
2e18b 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
2e18f 0bb 00 00 43 63 
2e193 0bc 30 18 0C 06 
2e197 0bd 63 61 00 00 
2e19b 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
2e19f 0bf 1C 36 36 1C 
2e1a3 0c0 6E 3B 33 33 
2e1a7 0c1 33 6E 00 00 
2e1ab 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
2e1af 0c3 0C 0C 0C 06 
2e1b3 0c4 00 00 00 00 
2e1b7 0c5 00 00 00 00 
2e1bb 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e1bf 0c7 30 18 0C 0C 
2e1c3 0c8 0C 0C 0C 0C 
2e1c7 0c9 18 30 00 00 
2e1cb 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
2e1cf 0cb 0C 18 30 30 
2e1d3 0cc 30 30 30 30 
2e1d7 0cd 18 0C 00 00 
2e1db 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
2e1df 0cf 00 00 00 66 
2e1e3 0d0 3C FF 3C 66 
2e1e7 0d1 00 00 00 00 
2e1eb 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
2e1ef 0d3 00 00 00 18 
2e1f3 0d4 18 7E 18 18 
2e1f7 0d5 00 00 00 00 
2e1fb 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
2e1ff 0d7 00 00 00 00 
2e203 0d8 00 00 00 00 | 	byte	$00[8]
2e207 0d9 18 18 18 0C 
2e20b 0da 00 00 00 00 
2e20f 0db 00 00 00 00 
2e213 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
2e217 0dd 00 00 00 00 
2e21b 0de 00 00 00 00 
2e21f 0df 00 00 00 00 
2e223 0e0 00 00 00 00 | 	byte	$00[16]
2e227 0e1 18 18 00 00 
2e22b 0e2 00 00 00 00 
2e22f 0e3 00 00 40 60 
2e233 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
2e237 0e5 03 01 00 00 
2e23b 0e6 00 00 00 00 
2e23f 0e7 1C 36 63 63 
2e243 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
2e247 0e9 36 1C 00 00 
2e24b 0ea 00 00 00 00 
2e24f 0eb 18 1C 1E 18 
2e253 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
2e257 0ed 18 7E 00 00 
2e25b 0ee 00 00 00 00 
2e25f 0ef 3E 63 60 30 
2e263 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
2e267 0f1 63 7F 00 00 
2e26b 0f2 00 00 00 00 
2e26f 0f3 3E 63 60 60 
2e273 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
2e277 0f5 63 3E 00 00 
2e27b 0f6 00 00 00 00 
2e27f 0f7 30 38 3C 36 
2e283 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
2e287 0f9 30 78 00 00 
2e28b 0fa 00 00 00 00 
2e28f 0fb 7F 03 03 03 
2e293 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
2e297 0fd 63 3E 00 00 
2e29b 0fe 00 00 00 00 
2e29f 0ff 1C 06 03 03 
2e2a3 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
2e2a7 101 63 3E 00 00 
2e2ab 102 00 00 00 00 
2e2af 103 7F 63 60 60 
2e2b3 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
2e2b7 105 0C 0C 00 00 
2e2bb 106 00 00 00 00 
2e2bf 107 3E 63 63 63 
2e2c3 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
2e2c7 109 63 3E 00 00 
2e2cb 10a 00 00 00 00 
2e2cf 10b 3E 63 63 63 
2e2d3 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
2e2d7 10d 30 1E 00 00 
2e2db 10e 00 00 00 00 
2e2df 10f 00 00 00 18 
2e2e3 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
2e2e7 111 18 18 00 00 
2e2eb 112 00 00 00 00 
2e2ef 113 00 00 00 18 
2e2f3 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
2e2f7 115 18 18 0C 00 
2e2fb 116 00 00 00 00 
2e2ff 117 00 60 30 18 
2e303 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
2e307 119 30 60 00 00 
2e30b 11a 00 00 00 00 
2e30f 11b 00 00 00 7E 
2e313 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
2e317 11d 00 00 00 00 
2e31b 11e 00 00 00 00 
2e31f 11f 00          | 	byte	$00[9]
2e320 120 06 0C 18 30 
2e324 121 60 30 18 0C 
2e328 122 06 00 00 00 
2e32c 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
2e330 124 63 63 30 18 
2e334 125 18 18 00 18 
2e338 126 18 00 00 00 
2e33c 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
2e340 128 3E 63 63 7B 
2e344 129 7B 7B 3B 03 
2e348 12a 3E 00 00 00 
2e34c 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
2e350 12c 1C 36 63 63 
2e354 12d 7F 63 63 63 
2e358 12e 63 00 00 00 
2e35c 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
2e360 130 66 66 66 3E 
2e364 131 66 66 66 66 
2e368 132 3F 00 00 00 
2e36c 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
2e370 134 66 43 03 03 
2e374 135 03 03 43 66 
2e378 136 3C 00 00 00 
2e37c 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
2e380 138 36 66 66 66 
2e384 139 66 66 66 36 
2e388 13a 1F 00 00 00 
2e38c 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
2e390 13c 66 46 16 1E 
2e394 13d 16 06 46 66 
2e398 13e 7F 00 00 00 
2e39c 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
2e3a0 140 66 46 16 1E 
2e3a4 141 16 06 06 06 
2e3a8 142 0F 00 00 00 
2e3ac 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
2e3b0 144 66 43 03 03 
2e3b4 145 7B 63 63 66 
2e3b8 146 5C 00 00 00 
2e3bc 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
2e3c0 148 63 63 63 7F 
2e3c4 149 63 63 63 63 
2e3c8 14a 63 00 00 00 
2e3cc 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
2e3d0 14c 18 18 18 18 
2e3d4 14d 18 18 18 18 | 	byte	$18[8]
2e3d8 14e 3C 00 00 00 
2e3dc 14f 00 00 00 78 
2e3e0 150 30 30 30 30 
2e3e4 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
2e3e8 152 1E 00 00 00 
2e3ec 153 00 00 00 67 
2e3f0 154 66 66 36 1E 
2e3f4 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
2e3f8 156 67 00 00 00 
2e3fc 157 00 00 00 0F 
2e400 158 06 06 06 06 
2e404 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
2e408 15a 7F 00 00 00 
2e40c 15b 00 00 00 63 
2e410 15c 77 7F 7F 6B 
2e414 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
2e418 15e 63 00 00 00 
2e41c 15f 00 00 00 63 
2e420 160 67 6F 7F 7B 
2e424 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
2e428 162 63 00 00 00 
2e42c 163 00 00 00 3E 
2e430 164 63 63 63 63 
2e434 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2e438 166 3E 00 00 00 
2e43c 167 00 00 00 3F 
2e440 168 66 66 66 3E 
2e444 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
2e448 16a 0F 00 00 00 
2e44c 16b 00 00 00 3E 
2e450 16c 63 63 63 63 
2e454 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
2e458 16e 3E 30 70 00 
2e45c 16f 00 00 00 3F 
2e460 170 66 66 66 3E 
2e464 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
2e468 172 67 00 00 00 
2e46c 173 00 00 00 3E 
2e470 174 63 63 06 1C 
2e474 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
2e478 176 3E 00 00 00 
2e47c 177 00 00 00 7E 
2e480 178 7E 5A 18 18 
2e484 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
2e488 17a 3C 00 00 00 
2e48c 17b 00 00 00 63 
2e490 17c 63 63 63 63 
2e494 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
2e498 17e 3E 00 00 00 
2e49c 17f 00 00 00 63 
2e4a0 180 63 63 63 63 
2e4a4 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
2e4a8 182 08 00 00 00 
2e4ac 183 00 00 00 63 
2e4b0 184 63 63 63 6B 
2e4b4 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
2e4b8 186 36 00 00 00 
2e4bc 187 00 00 00 63 
2e4c0 188 63 36 3E 1C 
2e4c4 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
2e4c8 18a 63 00 00 00 
2e4cc 18b 00 00 00 66 
2e4d0 18c 66 66 66 3C 
2e4d4 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
2e4d8 18e 3C 00 00 00 
2e4dc 18f 00 00 00 7F 
2e4e0 190 63 61 30 18 
2e4e4 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
2e4e8 192 7F 00 00 00 
2e4ec 193 00 00 00 3C 
2e4f0 194 0C 0C 0C 0C 
2e4f4 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
2e4f8 196 3C 00 00 00 
2e4fc 197 00 00 00 00 
2e500 198 01 03 07 0E 
2e504 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
2e508 19a 40 00 00 00 
2e50c 19b 00 00 00 3C 
2e510 19c 30 30 30 30 
2e514 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
2e518 19e 3C 00 00 00 
2e51c 19f 1C 36 00 00 
2e520 1a0 00 00 00 00 
2e524 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e528 1a2 00 00 00 00 
2e52c 1a3 00 00 00 00 
2e530 1a4 00 00 00 00 
2e534 1a5 00 00 00 00 
2e538 1a6 00          | 	byte	$00[17]
2e539 1a6 FF 00 00 0C 
2e53d 1a7 18 00 00 00 
2e541 1a8 00 00 00 00 
2e545 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e549 1aa 00 00 00 00 
2e54d 1ab 00 00 00 00 
2e551 1ac 00          | 	byte	$00[9]
2e552 1ac 1E 30 3E 33 
2e556 1ad 33 33 6E 00 
2e55a 1ae 00 00 00 00 
2e55e 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
2e562 1b0 1E 36 66 66 
2e566 1b1 66 66 3E 00 
2e56a 1b2 00 00 00 00 
2e56e 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e572 1b4 3E 63 03 03 
2e576 1b5 03 63 3E 00 
2e57a 1b6 00 00 00 00 
2e57e 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
2e582 1b8 3C 36 33 33 
2e586 1b9 33 33 6E 00 
2e58a 1ba 00 00 00 00 
2e58e 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e592 1bc 3E 63 7F 03 
2e596 1bd 03 63 3E 00 
2e59a 1be 00 00 00 00 
2e59e 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
2e5a2 1c0 0C 1E 0C 0C 
2e5a6 1c1 0C 0C 1E 00 
2e5aa 1c2 00 00 00 00 
2e5ae 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e5b2 1c4 6E 33 33 33 
2e5b6 1c5 33 33 3E 30 
2e5ba 1c6 33 1E 00 00 
2e5be 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
2e5c2 1c8 36 6E 66 66 
2e5c6 1c9 66 66 67 00 
2e5ca 1ca 00 00 00 00 
2e5ce 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
2e5d2 1cc 1C 18 18 18 
2e5d6 1cd 18 18 3C 00 
2e5da 1ce 00 00 00 00 
2e5de 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
2e5e2 1d0 70 60 60 60 
2e5e6 1d1 60 60 60 66 
2e5ea 1d2 66 3C 00 00 
2e5ee 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
2e5f2 1d4 66 36 1E 1E 
2e5f6 1d5 36 66 67 00 
2e5fa 1d6 00 00 00 00 
2e5fe 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
2e602 1d8 18 18 18 18 
2e606 1d9 18 18       | 	byte	$18[6]
2e608 1da 3C 00 00 00 
2e60c 1db 00 00 00 00 
2e610 1dc 00 00 37 7F 
2e614 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
2e618 1de 63 00 00 00 
2e61c 1df 00 00 00 00 
2e620 1e0 00 00 3B 66 
2e624 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
2e628 1e2 66 00 00 00 
2e62c 1e3 00 00 00 00 
2e630 1e4 00 00 3E 63 
2e634 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
2e638 1e6 3E 00 00 00 
2e63c 1e7 00 00 00 00 
2e640 1e8 00 00 3B 66 
2e644 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
2e648 1ea 3E 06 06 0F 
2e64c 1eb 00 00 00 00 
2e650 1ec 00 00 6E 33 
2e654 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
2e658 1ee 3E 30 30 78 
2e65c 1ef 00 00 00 00 
2e660 1f0 00 00 3B 6E 
2e664 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
2e668 1f2 0F 00 00 00 
2e66c 1f3 00 00 00 00 
2e670 1f4 00 00 3E 63 
2e674 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
2e678 1f6 3E 00 00 00 
2e67c 1f7 00 00 00 08 
2e680 1f8 0C 0C 3F 0C 
2e684 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
2e688 1fa 38 00 00 00 
2e68c 1fb 00 00 00 00 
2e690 1fc 00 00 33 33 
2e694 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
2e698 1fe 6E 00 00 00 
2e69c 1ff 00 00 00 00 
2e6a0 200 00 00 63 63 
2e6a4 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
2e6a8 202 1C 00 00 00 
2e6ac 203 00 00 00 00 
2e6b0 204 00 00 63 63 
2e6b4 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
2e6b8 206 36 00 00 00 
2e6bc 207 00 00 00 00 
2e6c0 208 00 00 63 36 
2e6c4 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
2e6c8 20a 63 00 00 00 
2e6cc 20b 00 00 00 00 
2e6d0 20c 00 00 63 63 
2e6d4 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
2e6d8 20e 7E 60 30 1F 
2e6dc 20f 00 00 00 00 
2e6e0 210 00 00 7F 33 
2e6e4 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
2e6e8 212 7F 00 00 00 
2e6ec 213 00 00 00 70 
2e6f0 214 18 18 18 0E 
2e6f4 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
2e6f8 216 70 00 00 00 
2e6fc 217 00 00 00 18 
2e700 218 18 18 18 18 
2e704 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
2e708 21a 18 00 00 00 
2e70c 21b 00 00 00 0E 
2e710 21c 18 18 18 70 
2e714 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
2e718 21e 0E 00 00 00 
2e71c 21f 6E 3B 00 00 
2e720 220 00 00 00 00 
2e724 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e728 222 00 00 00 00 
2e72c 223 00 00 00 00 
2e730 224 00 00       | 	byte	$00[10]
2e732 224 08 1C 36 63 
2e736 225 63 63 7F 00 
2e73a 226 00 00 00 00 
2e73e 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
2e742 228 03 03 03 03 
2e746 229 43 66 3C 18 
2e74a 22a 30 1E 00 00 
2e74e 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
2e752 22c 33 33 33 33 
2e756 22d 33 33       | 	byte	$33[6]
2e758 22e 6E 00 00 00 
2e75c 22f 00 00 60 30 
2e760 230 18 00 3E 63 
2e764 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
2e768 232 3E 00 00 00 
2e76c 233 00 00 08 1C 
2e770 234 36 00 1E 30 
2e774 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
2e778 236 6E 00 00 00 
2e77c 237 00 00 00 00 
2e780 238 33 00 1E 30 
2e784 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
2e788 23a 6E 00 00 00 
2e78c 23b 00 00 1C 36 
2e790 23c 1C 00 33 33 
2e794 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
2e798 23e 6E 00 00 00 
2e79c 23f 00 00 60 30 
2e7a0 240 18 00 3E 63 
2e7a4 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
2e7a8 242 3E 00 00 00 
2e7ac 243 00 00 00 00 
2e7b0 244 00 00 3E 63 
2e7b4 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
2e7b8 246 3E 18 30 1E 
2e7bc 247 00 00 00 1C 
2e7c0 248 58 78 38 18 
2e7c4 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
2e7c8 24a 3C 00 00 00 
2e7cc 24b 00 00 00 00 
2e7d0 24c 63 00 3E 63 
2e7d4 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
2e7d8 24e 3E 00 00 00 
2e7dc 24f 66 33 00 3E 
2e7e0 250 63 63 63 63 
2e7e4 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2e7e8 252 3E 00 00 00 
2e7ec 253 00 00 CC 66 
2e7f0 254 33 00 3E 63 
2e7f4 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
2e7f8 256 3E 00 00 00 
2e7fc 257 00 00 18 3C 
2e800 258 66 00 1C 18 
2e804 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
2e808 25a 3C 00 00 00 
2e80c 25b 30 18 00 7F 
2e810 25c 63 61 30 18 
2e814 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
2e818 25e 7F 00 00 00 
2e81c 25f 00 63 00 08 
2e820 260 1C 36 63 63 
2e824 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
2e828 262 63 00 00 00 
2e82c 263 30 18 00 3C 
2e830 264 66 43 03 03 
2e834 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
2e838 266 3C 00 00 00 
2e83c 267 30 18 00 7F 
2e840 268 66 46 16 1E 
2e844 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
2e848 26a 7F 00 00 00 
2e84c 26b 0C 06 00 0F 
2e850 26c 06 06 06 06 
2e854 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
2e858 26e 7F 00 00 00 
2e85c 26f 30 18 00 1C 
2e860 270 18 18 18 18 
2e864 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
2e868 272 3C 00 00 00 
2e86c 273 00 00 08 1C 
2e870 274 36 00 3E 63 
2e874 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
2e878 276 3E 00 00 00 
2e87c 277 00 00 00 00 
2e880 278 63 00 3E 63 
2e884 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
2e888 27a 3E 00 00 00 
2e88c 27b 00 00 00 6F 
2e890 27c 46 26 06 06 
2e894 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
2e898 27e 7F 00 00 00 
2e89c 27f 00 00 00 6E 
2e8a0 280 4C 2C 0C 0C 
2e8a4 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
2e8a8 282 1E 00 00 00 
2e8ac 283 30 18 00 3E 
2e8b0 284 63 63 06 1C 
2e8b4 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
2e8b8 286 3E 00 00 00 
2e8bc 287 00 00 60 30 
2e8c0 288 18 00 3E 63 
2e8c4 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
2e8c8 28a 3E 00 00 00 
2e8cc 28b 00 63 00 3E 
2e8d0 28c 63 63 63 63 
2e8d4 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2e8d8 28e 3E 00 00 00 
2e8dc 28f 00 63 00 63 
2e8e0 290 63 63 63 63 
2e8e4 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
2e8e8 292 3E 00 00 00 
2e8ec 293 6C 38 00 7E 
2e8f0 294 7E 5A 18 18 
2e8f4 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
2e8f8 296 3C 00 00 00 
2e8fc 297 00 00 60 48 
2e900 298 2C 0C 3F 0C 
2e904 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
2e908 29a 38 00 00 00 
2e90c 29b 00 00 00 0F 
2e910 29c 26 36 1E 0E 
2e914 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
2e918 29e 7F 00 00 00 
2e91c 29f 00 00 00 00 
2e920 2a0 00 63 36 1C 
2e924 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
2e928 2a2 00 00 00 00 
2e92c 2a3 00 00       | 	byte	$00[6]
2e92e 2a3 36 1C 08 00 
2e932 2a4 3E 63 03 03 
2e936 2a5 03 63 3E 00 
2e93a 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
2e93e 2a7 30 18 0C 00 
2e942 2a8 1E 30 3E 33 
2e946 2a9 33 33 6E 00 
2e94a 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
2e94e 2ab 60 30 18 00 
2e952 2ac 1C 18 18 18 
2e956 2ad 18 18 3C 00 
2e95a 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
2e95e 2af 60 30 18 00 
2e962 2b0 3E 63 63 63 
2e966 2b1 63 63 3E 00 
2e96a 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
2e96e 2b3 30 18 0C 00 
2e972 2b4 33 33 33 33 
2e976 2b5 33 33 6E 00 
2e97a 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
2e97e 2b7 00 08 1C 36 
2e982 2b8 63 63 7F 63 
2e986 2b9 63 63 63 18 
2e98a 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
2e98e 2bb 00 00 00 00 
2e992 2bc 1E 30 3E 33 
2e996 2bd 33 33 6E 18 
2e99a 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
2e99e 2bf 00 7F 63 61 
2e9a2 2c0 30 18 0C 06 
2e9a6 2c1 43 63 7F 00 
2e9aa 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
2e9ae 2c3 36 1C 08 00 
2e9b2 2c4 7F 33 18 0C 
2e9b6 2c5 06 63 7F 00 
2e9ba 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
2e9be 2c7 00 7F 66 46 
2e9c2 2c8 16 1E 16 06 
2e9c6 2c9 46 66 7F 18 
2e9ca 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
2e9ce 2cb 00 00 00 00 
2e9d2 2cc 3E 63 7F 03 
2e9d6 2cd 03 63 3E 18 
2e9da 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
2e9de 2cf 00 3C 66 03 
2e9e2 2d0 1F 03 0F 03 
2e9e6 2d1 03 66 3C 00 
2e9ea 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
2e9ee 2d3 60 30 18 00 
2e9f2 2d4 7F 33 18 0C 
2e9f6 2d5 06 63 7F 00 
2e9fa 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
2e9fe 2d7 00 3C 66 43 
2ea02 2d8 03 03 03 03 
2ea06 2d9 43 66 3C 00 
2ea0a 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
2ea0e 2db 00 00 00 00 
2ea12 2dc 3E 63 06 1C 
2ea16 2dd 30 63 3E 18 
2ea1a 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
2ea1e 2df 00 00 00 00 
2ea22 2e0 00 00       | 	byte	$00[6]
2ea24 2e1 6C 36 1B 36 
2ea28 2e2 6C 00 00 00 
2ea2c 2e3 00 00 00 00 
2ea30 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ea34 2e5 1B 36 6C 36 
2ea38 2e6 1B 00 00 00 
2ea3c 2e7 88 22 88 22 
2ea40 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
2ea44 2e9 88 22 88 22 
2ea48 2ea 88 22 88 22 
2ea4c 2eb AA 55 AA 55 
2ea50 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
2ea54 2ed AA 55 AA 55 
2ea58 2ee AA 55 AA 55 
2ea5c 2ef BB EE BB EE 
2ea60 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
2ea64 2f1 BB EE BB EE 
2ea68 2f2 BB EE BB EE 
2ea6c 2f3 18 18 18 18 
2ea70 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
2ea74 2f5 18 18 18 18 
2ea78 2f6 18 18 18 18 
2ea7c 2f7 18 18 18 18 
2ea80 2f8 18 18 18    | 	byte	$18[15]
2ea83 2f8 1F 18 18 18 
2ea87 2f9 18 18 18 18 
2ea8b 2fa 18 30 18 00 
2ea8f 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
2ea93 2fc 63 7F 63 63 
2ea97 2fd 63 63 00 00 
2ea9b 2fe 00 1C 36 00 
2ea9f 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
2eaa3 300 63 7F 63 63 
2eaa7 301 63 63 00 00 
2eaab 302 00 36 1C 00 
2eaaf 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
2eab3 304 1E 16 06 46 
2eab7 305 66 7F 00 00 
2eabb 306 00 00 00 00 
2eabf 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
2eac3 308 1C 30 60 63 
2eac7 309 63 3E 18 30 
2eacb 30a 1E 6C 6C 6C 
2eacf 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
2ead3 30c 6F 6C 6C 6C 
2ead7 30d 6C 6C 6C 6C 
2eadb 30e 6C 6C 6C 6C 
2eadf 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2eae3 310 6C 6C 6C 6C 
2eae7 311 6C 6C 6C 6C 
2eaeb 312 6C          | 	byte	$6c[9]
2eaec 313 00 00 00 00 
2eaf0 314 00          | 	byte	$00[5]
2eaf1 314 7F 60 6F 6C 
2eaf5 315 6C 6C 6C 6C 
2eaf9 316 6C 6C 6C 6C 
2eafd 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2eb01 318 6F 60 7F 00 
2eb05 319 00 00 00 00 
2eb09 31a 00 00 00 18 
2eb0d 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
2eb11 31c 61 30 18 0C 
2eb15 31d 06 43 63 7F 
2eb19 31e 00 00 00 00 
2eb1d 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
2eb21 320 00 7F 33 18 
2eb25 321 0C 06 63 7F 
2eb29 322 00 00 00 00 
2eb2d 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
2eb31 324 00 00 1F 18 
2eb35 325 18 18 18 18 
2eb39 326 18 18 18 18 
2eb3d 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2eb41 328 18 18 F8 00 
2eb45 329 00 00 00 00 
2eb49 32a 00 00 00 18 
2eb4d 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
2eb51 32c 18 18 FF 00 
2eb55 32d 00 00 00 00 
2eb59 32e 00 00 00 00 
2eb5d 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2eb61 330 00 00 FF 18 
2eb65 331 18 18 18 18 
2eb69 332 18 18 18 18 
2eb6d 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2eb71 334 18 18 F8 18 
2eb75 335 18 18 18 18 
2eb79 336 18 18 18 00 
2eb7d 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
2eb81 338 00 00 FF 00 
2eb85 339 00 00 00 00 
2eb89 33a 00 00 00 18 
2eb8d 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
2eb91 33c 18 18 FF 18 
2eb95 33d 18 18 18 18 
2eb99 33e 18 18 18 63 
2eb9d 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
2eba1 340 36 63 63 7F 
2eba5 341 63 63 63 63 
2eba9 342 00 00 00 00 
2ebad 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
2ebb1 344 00 1E 30 3E 
2ebb5 345 33 33 33 6E 
2ebb9 346 00 00 00 6C 
2ebbd 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
2ebc1 348 EC 0C FC 00 
2ebc5 349 00 00 00 00 
2ebc9 34a 00 00 00 00 
2ebcd 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ebd1 34c FC 0C EC 6C 
2ebd5 34d 6C 6C 6C 6C 
2ebd9 34e 6C 6C 6C 6C 
2ebdd 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2ebe1 350 EF 00 FF 00 
2ebe5 351 00 00 00 00 
2ebe9 352 00 00 00 00 
2ebed 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ebf1 354 FF 00 EF 6C 
2ebf5 355 6C 6C 6C 6C 
2ebf9 356 6C 6C 6C 6C 
2ebfd 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2ec01 358 EC 0C EC 6C 
2ec05 359 6C 6C 6C 6C 
2ec09 35a 6C 6C 6C 00 
2ec0d 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
2ec11 35c FF 00 FF 00 
2ec15 35d 00 00 00 00 
2ec19 35e 00 00 00 6C 
2ec1d 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
2ec21 360 EF 00 EF 6C 
2ec25 361 6C 6C 6C 6C 
2ec29 362 6C 6C 6C 00 
2ec2d 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
2ec31 364 63 3E 63 63 
2ec35 365 63 63 3E 63 
2ec39 366 00 00 00 00 
2ec3d 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
2ec41 368 30 3C 36 33 
2ec45 369 33 33 33 6E 
2ec49 36a 00 00 00 00 
2ec4d 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
2ec51 36c 66 66 6F 66 
2ec55 36d 66 66 36 1F 
2ec59 36e 00 00 00 36 
2ec5d 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
2ec61 370 66 66 66 66 
2ec65 371 66 66       | 	byte	$66[6]
2ec67 371 36 1F 00 00 
2ec6b 372 00 00 63 00 
2ec6f 373 7F 66 46 16 
2ec73 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
2ec77 375 66 7F 00 00 
2ec7b 376 00 6C 38 00 
2ec7f 377 38 30 30 3C 
2ec83 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
2ec87 379 33 6E 00 00 
2ec8b 37a 00 36 1C 00 
2ec8f 37b 63 67 6F 7F 
2ec93 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
2ec97 37d 63 63 00 00 
2ec9b 37e 00 30 18 00 
2ec9f 37f 3C 18 18 18 
2eca3 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
2eca7 381 18 3C 00 00 
2ecab 382 00 3C 66 00 
2ecaf 383 3C 18 18 18 
2ecb3 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
2ecb7 385 18 3C 00 00 
2ecbb 386 00 00 00 36 
2ecbf 387 1C 08 00 3E 
2ecc3 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
2ecc7 389 63 3E 00 00 
2eccb 38a 00 18 18 18 
2eccf 38b 18 18 18 18 
2ecd3 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
2ecd7 38d 00 00 00 00 
2ecdb 38e 00 00 00 00 
2ecdf 38f 00 00 00 00 | 	byte	$00[12]
2ece3 390 F8 18 18 18 
2ece7 391 18 18 18 18 
2eceb 392 18 FF FF FF 
2ecef 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
2ecf3 394 FF FF FF FF 
2ecf7 395 FF FF FF FF 
2ecfb 396 FF          | 	byte	$ff[9]
2ecfc 397 00 00 00 00 
2ed00 398 00 00 00    | 	byte	$00[7]
2ed03 398 FF FF FF FF 
2ed07 399 FF FF FF FF 
2ed0b 39a FF          | 	byte	$ff[9]
2ed0c 39b 00 00 00 7E 
2ed10 39c 7E 5A 18 18 
2ed14 39d 18 18 18 18 
2ed18 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
2ed1c 39f 1C 36 1C 63 
2ed20 3a0 63 63 63 63 
2ed24 3a1 63 63 63 63 
2ed28 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2ed2c 3a3 FF FF FF FF 
2ed30 3a4 FF FF FF    | 	byte	$ff[7]
2ed33 3a4 00 00 00 00 
2ed37 3a5 00 00 00 00 
2ed3b 3a6 00          | 	byte	$00[9]
2ed3c 3a7 30 18 00 3E 
2ed40 3a8 63 63 63 63 
2ed44 3a9 63 63 63 63 
2ed48 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2ed4c 3ab 00 00 00 1E 
2ed50 3ac 33 33 33 1B 
2ed54 3ad 33 63 63 63 
2ed58 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
2ed5c 3af 1C 36 00 3E 
2ed60 3b0 63 63 63 63 
2ed64 3b1 63 63 63 63 
2ed68 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2ed6c 3b3 30 18 00 63 
2ed70 3b4 67 6F 7F 7B 
2ed74 3b5 73 63 63 63 
2ed78 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
2ed7c 3b7 00 00 60 30 
2ed80 3b8 18 00 3B 66 
2ed84 3b9 66 66 66 66 
2ed88 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
2ed8c 3bb 00 00 36 1C 
2ed90 3bc 08 00 3B 66 
2ed94 3bd 66 66 66 66 
2ed98 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
2ed9c 3bf 36 1C 00 3E 
2eda0 3c0 63 63 06 1C 
2eda4 3c1 30 60 63 63 
2eda8 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
2edac 3c3 00 00 36 1C 
2edb0 3c4 08 00 3E 63 
2edb4 3c5 06 1C 30 63 
2edb8 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
2edbc 3c7 30 18 00 3F 
2edc0 3c8 66 66 66 3E 
2edc4 3c9 36 66 66 66 
2edc8 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
2edcc 3cb 30 18 00 63 
2edd0 3cc 63 63 63 63 
2edd4 3cd 63 63 63 63 
2edd8 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2eddc 3cf 00 00 60 30 
2ede0 3d0 18 00 3B 6E 
2ede4 3d1 66 06 06 06 
2ede8 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
2edec 3d3 66 33 00 63 
2edf0 3d4 63 63 63 63 
2edf4 3d5 63 63 63 63 
2edf8 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2edfc 3d7 00 00 60 30 
2ee00 3d8 18 00 63 63 
2ee04 3d9 63 63 63 63 
2ee08 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
2ee0c 3db 30 18 00 66 
2ee10 3dc 66 66 66 3C 
2ee14 3dd 18 18 18 18 
2ee18 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
2ee1c 3df 00 00 00 08 
2ee20 3e0 0C 0C 3F 0C 
2ee24 3e1 0C 0C 0C 6C 
2ee28 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
2ee2c 3e3 30 18 00 00 
2ee30 3e4 00 00 00 00 
2ee34 3e5 00 00 00 00 
2ee38 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ee3c 3e7 00 00 00 00 
2ee40 3e8 00 00 00 00 | 	byte	$00[8]
2ee44 3e9 7F 00 00 00 
2ee48 3ea 00 00 00 00 
2ee4c 3eb 66 33 00 00 
2ee50 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
2ee54 3ed 00 00 00 00 
2ee58 3ee 00 00 00 00 
2ee5c 3ef 00 00 00 00 
2ee60 3f0 00 00 00 00 
2ee64 3f1 00 00 00 00 
2ee68 3f2 00          | 	byte	$00[21]
2ee69 3f2 0C 06 3C 36 
2ee6d 3f3 1C 00 00 00 
2ee71 3f4 00 00 00 00 
2ee75 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ee79 3f6 00 00 00 63 
2ee7d 3f7 3E 00 00 00 
2ee81 3f8 00 00 00 00 
2ee85 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ee89 3fa 00 00 00 00 
2ee8d 3fb 3E 63 06 1C 
2ee91 3fc 36 63 63 36 
2ee95 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
2ee99 3fe 00 00 00 00 
2ee9d 3ff 00 00 00 00 | 	byte	$00[8]
2eea1 400 18 00 7E 00 
2eea5 401 18 00 00 00 
2eea9 402 00 00 00 00 
2eead 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2eeb1 404 00 00 00 00 
2eeb5 405 00 00 00 00 | 	byte	$00[8]
2eeb9 406 18 30 1E 00 
2eebd 407 00 00 1C 36 
2eec1 408 36 1C 00 00 
2eec5 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
2eec9 40a 00 00 00 00 
2eecd 40b 63 00 00 00 
2eed1 40c 00 00 00 00 
2eed5 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2eed9 40e 00 00 00 18 
2eedd 40f 18 00 00 00 
2eee1 410 00 00 00 00 
2eee5 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2eee9 412 00 00 00 00 
2eeed 413 00          | 	byte	$00[5]
2eeee 413 CC 66 33 00 
2eef2 414 33 33 33 33 
2eef6 415 33 33 6E 00 
2eefa 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
2eefe 417 00 3F 66 66 
2ef02 418 66 3E 36 66 
2ef06 419 66 66 6F 00 
2ef0a 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
2ef0e 41b 36 1C 08 00 
2ef12 41c 3B 6E 66 06 
2ef16 41d 06 06 0F 00 
2ef1a 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
2ef1e 41f 00 00 00 7E 
2ef22 420 7E 7E 7E 7E 
2ef26 421 7E 7E 00 00 
2ef2a 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
2ef2e 423 00 00 00 00 
2ef32 424 00 00 00 00 
2ef36 425 00 00 00 00 
2ef3a 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ef3c 427             | 'vga_font       file "vgafont.def"
2ef3c 427 00 00 00 00 
      ...             
2ef6c 433 00 00 00 00 
2ef70 434 00 00 00    | st_font        file "st4font.def"
2ef73 434 FF FF 00 00 
2ef77 435 00 00 00 00 
2ef7b 436 00 18 18 18 
2ef7f 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2ef83 438 18 18 18 18 
2ef87 439 18 18 18 18 
2ef8b 43a 18          | 	byte	$18[9]
2ef8c 43b 00 00 00 00 
2ef90 43c 00 00 00    | 	byte	$00[7]
2ef93 43c FF FF 18 18 
2ef97 43d 18 18 18 18 
2ef9b 43e 18 18 18 18 
2ef9f 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2efa3 440 FF FF 00 00 
2efa7 441 00 00 00 00 
2efab 442 00 18 18 18 
2efaf 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2efb3 444 1F 1F 18 18 
2efb7 445 18 18 18 18 
2efbb 446 18 18 18 18 
2efbf 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2efc3 448 F8 F8 18 18 
2efc7 449 18 18 18 18 
2efcb 44a 18 00 00 00 
2efcf 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2efd3 44c 1F 1F 18 18 
2efd7 44d 18 18 18 18 
2efdb 44e 18 00 00 00 
2efdf 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2efe3 450 F8 F8 18 18 
2efe7 451 18 18 18 18 
2efeb 452 18 18 18 18 
2efef 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2eff3 454 1F 1F 00 00 
2eff7 455 00 00 00 00 
2effb 456 00 18 18 18 
2efff 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2f003 458 F8 F8 00 00 
2f007 459 00 00 00 00 
2f00b 45a 00 18 18 18 
2f00f 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2f013 45c FF FF 18 18 
2f017 45d 18 18 18 18 
2f01b 45e 18 00 00 18 
2f01f 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
2f023 460 66 7E 7E 66 
2f027 461 66 66 66 30 
2f02b 462 18 00 00 7E 
2f02f 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
2f033 464 3E 06 06 06 
2f037 465 06 7E 7E 18 
2f03b 466 0C 30 18 3C 
2f03f 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
2f043 468 06 06 06 66 
2f047 469 66 7E 3C 00 
2f04b 46a 00 30 18 66 
2f04f 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
2f053 46c 7E 7E 76 76 
2f057 46d 66 66 66 00 
2f05b 46e 00 30 18 7C 
2f05f 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
2f063 470 1C 38 70 60 
2f067 471 60 7E 3E 00 
2f06b 472 00 30 18 7E 
2f06f 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
2f073 474 18 0C 0C 06 
2f077 475 06 7E 7E 00 
2f07b 476 00 18 18 00 
2f07f 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
2f083 478 18 18 0C 0C 
2f087 479 06 7E 7E 00 
2f08b 47a 00 30 18 3C 
2f08f 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
2f093 47c 66 66 66 66 
2f097 47d 66          | 	byte	$66[5]
2f098 47e 7E 3C 00 00 
2f09c 47f 00 00 06 06 
2f0a0 480 06 06 16 1E 
2f0a4 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
2f0a8 482 7E 7E 00 00 
2f0ac 483 00 00 00 00 
2f0b0 484 00 3C 7C 60 
2f0b4 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
2f0b8 486 7E 7C 30 18 
2f0bc 487 00 00 00 00 
2f0c0 488 00 3C 7E 66 
2f0c4 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
2f0c8 48a 7E 7C 18 0C 
2f0cc 48b 00 00 30 18 
2f0d0 48c 00 3C 3E 06 
2f0d4 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
2f0d8 48e 7E 7C 00 00 
2f0dc 48f 00 00 30 18 
2f0e0 490 00 3E 7E 66 
2f0e4 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
2f0e8 492 66 66 00 00 
2f0ec 493 00 00 30 18 
2f0f0 494 00 7C 7E 06 
2f0f4 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
2f0f8 496 7E 3E 00 00 
2f0fc 497 00 00 30 18 
2f100 498 00 7E 7E 30 
2f104 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
2f108 49a 7E 7E 00 00 
2f10c 49b 00 00 18 18 
2f110 49c 00 7E 7E 30 
2f114 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
2f118 49e 7E 7E 00 00 
2f11c 49f 00 00 30 18 
2f120 4a0 00 3C 7E 66 
2f124 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
2f128 4a2 7E 3C 00 00 
2f12c 4a3 00 00 1C 1C 
2f130 4a4 18 18 38 3C 
2f134 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
2f138 4a6 3C 3C 00 00 
2f13c 4a7 00 00 00 00 
2f140 4a8 00 00 00 00 
2f144 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f148 4aa 00 00 00 00 
2f14c 4ab 00 00       | 	byte	$00[6]
2f14e 4ab 18 18 18 18 
2f152 4ac 18 18 18 18 | 	byte	$18[8]
2f156 4ad 00 00 18 18 
2f15a 4ae 00 00 00 00 
2f15e 4af 66 66 66 66 
2f162 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
2f166 4b1 00 00 00 00 
2f16a 4b2 00 00 00 00 
2f16e 4b3 00          | 	byte	$00[9]
2f16f 4b3 66 66 FF FF 
2f173 4b4 66 66 FF FF 
2f177 4b5 66 66 00 00 
2f17b 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
2f17f 4b7 7C 7E 06 06 
2f183 4b8 3E 7C 60 60 
2f187 4b9 7E 3E 18 18 
2f18b 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
2f18f 4bb 66 30 30 18 
2f193 4bc 18 0C 0C 66 
2f197 4bd 66 00 00 00 
2f19b 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
2f19f 4bf 66 66 3C 1C 
2f1a3 4c0 1C FC FE 66 
2f1a7 4c1 66 FE FC 00 
2f1ab 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
2f1af 4c3 18 18 18 18 
2f1b3 4c4 00 00 00 00 
2f1b7 4c5 00 00 00 00 
2f1bb 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
2f1bf 4c7 18 1C 0C 0C 
2f1c3 4c8 0C 0C 0C 0C 
2f1c7 4c9 1C 18 30 00 
2f1cb 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
2f1cf 4cb 18 38 30 30 
2f1d3 4cc 30 30 30 30 
2f1d7 4cd 38 18 0C 00 
2f1db 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
2f1df 4cf 66 66 3C 3C 
2f1e3 4d0 FF FF 3C 3C 
2f1e7 4d1 66 66 00 00 
2f1eb 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
2f1ef 4d3 00 18 18 18 
2f1f3 4d4 7E 7E 18 18 
2f1f7 4d5 18 00 00 00 
2f1fb 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2f1ff 4d7 00 00 00 00 
2f203 4d8 00 00       | 	byte	$00[6]
2f205 4d9 18 18 18 18 
2f209 4da 18          | 	byte	$18[5]
2f20a 4da 0C 04 00 00 
2f20e 4db 00 00 00 00 
2f212 4dc 7E 7E 00 00 
2f216 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
2f21a 4de 00 00 00 00 
2f21e 4df 00 00 00 00 
2f222 4e0 00 00 00 00 
2f226 4e1 00          | 	byte	$00[13]
2f227 4e1 18 18 18 00 
2f22b 4e2 00 00 00 60 
2f22f 4e3 60 60 30 30 
2f233 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
2f237 4e5 06 06 06 00 
2f23b 4e6 00 00 00 3C 
2f23f 4e7 7E 66 66 66 
2f243 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
2f247 4e9 66 7E 3C 00 
2f24b 4ea 00 00 00 18 
2f24f 4eb 18 1C 1C 18 
2f253 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
2f257 4ed 18 7E 7E 00 
2f25b 4ee 00 00 00 3C 
2f25f 4ef 7E 66 66 30 
2f263 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
2f267 4f1 0C 7E 7E 00 
2f26b 4f2 00 00 00 7E 
2f26f 4f3 7E 30 30 18 
2f273 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
2f277 4f5 66 7E 3C 00 
2f27b 4f6 00 00 00 30 
2f27f 4f7 30 38 38 3C 
2f283 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
2f287 4f9 7E 30 30 00 
2f28b 4fa 00 00 00 7E 
2f28f 4fb 7E 06 06 3E 
2f293 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
2f297 4fd 66 7E 3C 00 
2f29b 4fe 00 00 00 38 
2f29f 4ff 3C 0E 06 06 
2f2a3 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
2f2a7 501 66 7E 3C 00 
2f2ab 502 00 00 00 7E 
2f2af 503 7E 60 60 30 
2f2b3 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
2f2b7 505 0C 0C 0C 00 
2f2bb 506 00 00 00 3C 
2f2bf 507 7E 66 66 3C 
2f2c3 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
2f2c7 509 66 7E 3C 00 
2f2cb 50a 00 00 00 3C 
2f2cf 50b 7E 66 66 7E 
2f2d3 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
2f2d7 50d 70 3C 1C 00 
2f2db 50e 00 00 00 00 
2f2df 50f 00 00 18 18 
2f2e3 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
2f2e7 511 18 18 18 00 
2f2eb 512 00 00 00 00 
2f2ef 513 00 00 18 18 
2f2f3 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
2f2f7 515 18 18 18 0C 
2f2fb 516 04 00 00 00 
2f2ff 517 70 38 1C 0E 
2f303 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
2f307 519 70 00 00 00 
2f30b 51a 00 00 00 00 
2f30f 51b 00 00 7E 7E 
2f313 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
2f317 51d 00 00 00 00 
2f31b 51e 00 00 00 00 | 	byte	$00[8]
2f31f 51f 0E 1C 38 70 
2f323 520 E0 70 38 1C 
2f327 521 0E 00 00 00 
2f32b 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
2f32f 523 7E 66 66 30 
2f333 524 30 18 18 18 
2f337 525 00 18 18 00 
2f33b 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
2f33f 527 7E 66 66 66 
2f343 528 66 36 06 66 
2f347 529 66 7E 3C 00 
2f34b 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
2f34f 52b 3C 7E 66 66 
2f353 52c 66 7E 7E 66 
2f357 52d 66 66 66 00 
2f35b 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
2f35f 52f 7E 66 66 7E 
2f363 530 3E 66 66 66 
2f367 531 66 7E 3E 00 
2f36b 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
2f36f 533 7E 66 66 06 
2f373 534 06 06 06 66 
2f377 535 66 7E 3C 00 
2f37b 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
2f37f 537 7E 66 66 66 
2f383 538 66 66 66 66 
2f387 539 66 7E 3E 00 
2f38b 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
2f38f 53b 7E 06 06 3E 
2f393 53c 3E 06 06 06 
2f397 53d 06 7E 7E 00 
2f39b 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
2f39f 53f 7E 06 06 3E 
2f3a3 540 3E 06 06 06 
2f3a7 541 06 06 06 00 
2f3ab 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
2f3af 543 7E 06 06 76 
2f3b3 544 76 66 66 66 
2f3b7 545 66 7E 3C 00 
2f3bb 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
2f3bf 547 66 66 66 7E 
2f3c3 548 7E 66 66 66 
2f3c7 549 66 66 66 00 
2f3cb 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
2f3cf 54b 7E 18 18 18 
2f3d3 54c 18 18 18 18 
2f3d7 54d 18 7E 7E 00 
2f3db 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
2f3df 54f 60 60 60 60 
2f3e3 550 60 60 60    | 	byte	$60[7]
2f3e6 551 66 66 7E 3C 
2f3ea 552 00 00 00 00 
2f3ee 553 66 66 36 36 
2f3f2 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
2f3f6 555 66 66 C6 C6 
2f3fa 556 00 00 00 00 
2f3fe 557 06 06 06 06 
2f402 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
2f406 559 06 06 7E 7E 
2f40a 55a 00 00 00 00 
2f40e 55b C6 C6 EE EE 
2f412 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
2f416 55d C6 C6 C6 C6 
2f41a 55e 00 00 00 00 
2f41e 55f 66 66 66 6E 
2f422 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
2f426 561 76 66 66 66 
2f42a 562 00 00 00 00 
2f42e 563 3C 7E 66 66 
2f432 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
2f436 565 66 66 7E 3C 
2f43a 566 00 00 00 00 
2f43e 567 3E 7E 66 66 
2f442 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
2f446 569 06 06 06 06 
2f44a 56a 00 00 00 00 
2f44e 56b 3C 7E 66 66 
2f452 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
2f456 56d 66 56 3E 6C 
2f45a 56e 00 00 00 00 
2f45e 56f 3E 7E 66 66 
2f462 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
2f466 571 66 66 C6 C6 
2f46a 572 00 00 00 00 
2f46e 573 7C 7E 06 06 
2f472 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
2f476 575 60 60 7E 3E 
2f47a 576 00 00 00 00 
2f47e 577 7E 7E 18 18 
2f482 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
2f486 579 18 18 18 18 
2f48a 57a 00 00 00 00 
2f48e 57b 66 66 66 66 
2f492 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
2f496 57d 66 66 7E 3C 
2f49a 57e 00 00 00 00 
2f49e 57f 66 66 66 66 
2f4a2 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
2f4a6 581 3C 3C 18 18 
2f4aa 582 00 00 00 00 
2f4ae 583 C6 C6 C6 C6 
2f4b2 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
2f4b6 585 FE EE C6 82 
2f4ba 586 00 00 00 00 
2f4be 587 66 66 66 3C 
2f4c2 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
2f4c6 589 3C 66 66 66 
2f4ca 58a 00 00 00 00 
2f4ce 58b 66 66 66 66 
2f4d2 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
2f4d6 58d 18 18 18 18 
2f4da 58e 00 00 00 00 
2f4de 58f 7E 7E 30 30 
2f4e2 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
2f4e6 591 06 06 7E 7E 
2f4ea 592 00 00 00 00 
2f4ee 593 3C 3C 0C 0C 
2f4f2 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
2f4f6 595 0C 0C 3C 3C 
2f4fa 596 00 00 00 00 
2f4fe 597 06 06 0C 0C 
2f502 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
2f506 599 60 60 C0 C0 
2f50a 59a 00 00 00 00 
2f50e 59b 3C 3C 30 30 
2f512 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
2f516 59d 30 30 3C 3C 
2f51a 59e 00 00 00 00 
2f51e 59f 18 18 3C 3C 
2f522 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
2f526 5a1 00 00 00 00 
2f52a 5a2 00 00 00 00 
2f52e 5a3 00 00 00 00 
2f532 5a4 00 00 00 00 
2f536 5a5 00 00       | 	byte	$00[18]
2f538 5a6 FE FE 00 00 
2f53c 5a7 00 00 0C 0C 
2f540 5a8 18 18 00 00 
2f544 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
2f548 5aa 00 00 00 00 
2f54c 5ab 00 00 00 00 
2f550 5ac 00          | 	byte	$00[9]
2f551 5ac 3C 7C 60 7C 
2f555 5ad 7E 66 66 7E 
2f559 5ae 7C 00 00 00 
2f55d 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
2f561 5b0 3E 7E 66 66 
2f565 5b1 66 66 66 7E 
2f569 5b2 3E 00 00 00 
2f56d 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
2f571 5b4 3C 3E 06 06 
2f575 5b5 06 06 06 7E 
2f579 5b6 7C 00 00 00 
2f57d 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
2f581 5b8 7C 7E 66 66 
2f585 5b9 66 66 66 7E 
2f589 5ba 7C 00 00 00 
2f58d 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
2f591 5bc 3C 7E 66 66 
2f595 5bd 7E 06 06 7E 
2f599 5be 7C 00 00 00 
2f59d 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
2f5a1 5c0 18 7E 7E 18 
2f5a5 5c1 18 18 18 18 
2f5a9 5c2 18 00 00 00 
2f5ad 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2f5b1 5c4 7C 7E 66 66 
2f5b5 5c5 66 66 7E 7C 
2f5b9 5c6 60 7E 3E 00 
2f5bd 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
2f5c1 5c8 3E 7E 66 66 
2f5c5 5c9 66 66 66 66 
2f5c9 5ca 66 00 00 00 
2f5cd 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
2f5d1 5cc 1C 1C 18 18 
2f5d5 5cd 18 18 18 3C 
2f5d9 5ce 3C 00 00 00 
2f5dd 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
2f5e1 5d0 30 30 30 30 
2f5e5 5d1 30 30 30 30 
2f5e9 5d2 30          | 	byte	$30[9]
2f5ea 5d2 3E 1E 00 00 
2f5ee 5d3 06 06 06 36 
2f5f2 5d4 36 1E 1E 1E 
2f5f6 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
2f5fa 5d6 00 00 00 00 
2f5fe 5d7 1C 1C 18 18 
2f602 5d8 18 18 18 18 
2f606 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
2f60a 5da 00 00 00 00 
2f60e 5db 00 00 00    | 	byte	$00[7]
2f611 5dc 6C FE FE D6 
2f615 5dd D6 C6 C6 C6 
2f619 5de C6 00 00 00 
2f61d 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
2f621 5e0 3E 7E 66 66 
2f625 5e1 66 66 66 66 
2f629 5e2 66 00 00 00 
2f62d 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
2f631 5e4 3C 7E 66 66 
2f635 5e5 66 66 66 7E 
2f639 5e6 3C 00 00 00 
2f63d 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
2f641 5e8 3E 7E 66 66 
2f645 5e9 66 66 66 7E 
2f649 5ea 3E 06 06 00 
2f64d 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
2f651 5ec 7C 7E 66 66 
2f655 5ed 66 66 66 7E 
2f659 5ee 7C 60 60 00 
2f65d 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
2f661 5f0 3E 7E 66 06 
2f665 5f1 06 06 06 06 
2f669 5f2 06 00 00 00 
2f66d 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
2f671 5f4 7C 7E 06 0E 
2f675 5f5 3C 70 60 7E 
2f679 5f6 3E 00 00 00 
2f67d 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
2f681 5f8 7E 7E 18 18 
2f685 5f9 18 18 18 78 
2f689 5fa 70 00 00 00 
2f68d 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
2f691 5fc 66 66 66 66 
2f695 5fd 66 66 66    | 	byte	$66[7]
2f698 5fe 7E 7C 00 00 
2f69c 5ff 00 00 00 00 
2f6a0 600 00 66 66 66 
2f6a4 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
2f6a8 602 18 18 00 00 
2f6ac 603 00 00 00 00 
2f6b0 604 00 C6 C6 D6 
2f6b4 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
2f6b8 606 C6 82 00 00 
2f6bc 607 00 00 00 00 
2f6c0 608 00 66 66 3C 
2f6c4 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
2f6c8 60a 66 66 00 00 
2f6cc 60b 00 00 00 00 
2f6d0 60c 00 66 66 66 
2f6d4 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
2f6d8 60e 7C 60 7E 3E 
2f6dc 60f 00 00 00 00 
2f6e0 610 00 7E 7E 30 
2f6e4 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
2f6e8 612 7E 7E 00 00 
2f6ec 613 00 00 30 18 
2f6f0 614 18 18 18 0C 
2f6f4 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
2f6f8 616 18 30 00 00 
2f6fc 617 00 00 18 18 
2f700 618 18 18 18 18 
2f704 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2f708 61a 18 18 00 00 
2f70c 61b 00 00 0C 18 
2f710 61c 18 18 18 30 
2f714 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
2f718 61e 18 0C 00 00 
2f71c 61f 00 00 6C 7E 
2f720 620 36 00 00 00 
2f724 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
2f728 622 00 00 00 00 
2f72c 623 00 00 00 00 
2f730 624 00          | 	byte	$00[9]
2f731 624 18 18 18 18 
2f735 625 18 18 00 00 
2f739 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
2f73c 627             | 'amiga_font     file "amigafont.def"
2f73c 627 00 6C FE FE 
2f740 628 7C 38 10 00 
2f744 629 18 18 18 F8 
2f748 62a F8 18 18 18 | a8_font        file "atari8.fnt"
2f74c 62b C0 C0 C0 C0 
2f750 62c C0 C0 C0 C0 | 	byte	$c0[8]
2f754 62d 18 18 18 1F 
2f758 62e 1F 00 00 00 
2f75c 62f 18 18 18 1F 
2f760 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
2f764 631 00 00 00 1F 
2f768 632 1F 18 18 18 
2f76c 633 C0 E0 70 38 
2f770 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
2f774 635 03 07 0E 1C 
2f778 636 38 70 E0 C0 
2f77c 637 80 C0 E0 F0 
2f780 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
2f784 639 00 00 00 00 
2f788 63a F0 F0 F0 F0 
2f78c 63b 01 03 07 0F 
2f790 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
2f794 63d F0 F0 F0 F0 
2f798 63e 00 00 00 00 
2f79c 63f 0F 0F 0F 0F 
2f7a0 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
2f7a4 641 FF FF 00 00 
2f7a8 642 00 00 00 00 
2f7ac 643 00 00 00 00 
2f7b0 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
2f7b4 645 00 00 00 00 
2f7b8 646 0F 0F 0F 0F 
2f7bc 647 00 38 38 EE 
2f7c0 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
2f7c4 649 00 00 00 F8 
2f7c8 64a F8 18 18 18 
2f7cc 64b 00 00 00 FF 
2f7d0 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
2f7d4 64d 18 18 18 FF 
2f7d8 64e FF 18 18 18 
2f7dc 64f 00 00 3C 7E 
2f7e0 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
2f7e4 651 00 00 00 00 
2f7e8 652 FF FF FF FF 
2f7ec 653 03 03 03 03 
2f7f0 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
2f7f4 655 00 00 00 FF 
2f7f8 656 FF 18 18 18 
2f7fc 657 18 18 18 FF 
2f800 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
2f804 659 0F 0F 0F 0F 
2f808 65a 0F 0F 0F 0F | 	byte	$0f[8]
2f80c 65b 18 18 18 F8 
2f810 65c F8 00 00 00 
2f814 65d 1E 06 1E 06 
2f818 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
2f81c 65f 00 18 3C 7E 
2f820 660 18 18 18 00 
2f824 661 00 18 18 18 
2f828 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
2f82c 663 00 18 0C 7E 
2f830 664 0C 18 00 00 
2f834 665 00 18 30 7E 
2f838 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
2f83c 667 00 00 00 00 
2f840 668 00 00 00 00 
2f844 669 00          | 	byte	$00[9]
2f845 669 18 18 18 18 
2f849 66a 00 18 00 00 
2f84d 66b 66 66 66 00 
2f851 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
2f855 66d 66 FF 66 66 
2f859 66e FF 66 00 18 
2f85d 66f 7C 06 3C 60 
2f861 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
2f865 671 66 36 18 0C 
2f869 672 66 62 00 38 
2f86d 673 6C 38 1C F6 
2f871 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
2f875 675 18 18 18 00 
2f879 676 00 00 00 00 
2f87d 677 70 38 18 18 
2f881 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
2f885 679 0E 1C 18 18 
2f889 67a 1C 0E 00 00 
2f88d 67b 66 3C FF 3C 
2f891 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
2f895 67d 18 18 7E 18 
2f899 67e 18 00 00 00 
2f89d 67f 00 00 00 00 
2f8a1 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
2f8a5 681 00 00 7E 00 
2f8a9 682 00 00 00 00 
2f8ad 683 00 00 00 00 
2f8b1 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
2f8b5 685 60 30 18 0C 
2f8b9 686 06 02 00 00 
2f8bd 687 3C 66 76 6E 
2f8c1 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
2f8c5 689 18 1C 18 18 
2f8c9 68a 18 7E 00 00 
2f8cd 68b 3C 66 30 18 
2f8d1 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
2f8d5 68d 7E 30 18 30 
2f8d9 68e 66 3C 00 00 
2f8dd 68f 30 38 3C 36 
2f8e1 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
2f8e5 691 7E 06 3E 60 
2f8e9 692 66 3C 00 00 
2f8ed 693 3C 06 3E 66 
2f8f1 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
2f8f5 695 7E 60 30 18 
2f8f9 696 0C 0C 00 00 
2f8fd 697 3C 66 3C 66 
2f901 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
2f905 699 3C 66 7C 60 
2f909 69a 30 1C 00 00 
2f90d 69b 00 18 18 00 
2f911 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
2f915 69d 00 18 18 00 
2f919 69e 18 18 0C 60 
2f91d 69f 30 18 0C 18 
2f921 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
2f925 6a1 00 7E 00 00 
2f929 6a2 7E 00 00 06 
2f92d 6a3 0C 18 30 18 
2f931 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
2f935 6a5 3C 66 30 18 
2f939 6a6 00 18 00 00 
2f93d 6a7 3C 66 76 76 
2f941 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
2f945 6a9 18 3C 66 66 
2f949 6aa 7E 66 00 00 
2f94d 6ab 3E 66 3E 66 
2f951 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
2f955 6ad 3C 66 06 06 
2f959 6ae 66 3C 00 00 
2f95d 6af 1E 36 66 66 
2f961 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
2f965 6b1 7E 06 3E 06 
2f969 6b2 06 7E 00 00 
2f96d 6b3 7E 06 3E 06 
2f971 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
2f975 6b5 7C 06 06 76 
2f979 6b6 66 7C 00 00 
2f97d 6b7 66 66 7E 66 
2f981 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
2f985 6b9 7E 18 18 18 
2f989 6ba 18 7E 00 00 
2f98d 6bb 60 60 60 60 
2f991 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
2f995 6bd 66 36 1E 1E 
2f999 6be 36 66 00 00 
2f99d 6bf 06 06 06 06 
2f9a1 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
2f9a5 6c1 C6 EE FE D6 
2f9a9 6c2 C6 C6 00 00 
2f9ad 6c3 66 6E 7E 7E 
2f9b1 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
2f9b5 6c5 3C 66 66 66 
2f9b9 6c6 66 3C 00 00 
2f9bd 6c7 3E 66 66 3E 
2f9c1 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
2f9c5 6c9 3C 66 66 66 
2f9c9 6ca 36 6C 00 00 
2f9cd 6cb 3E 66 66 3E 
2f9d1 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
2f9d5 6cd 3C 06 3C 60 
2f9d9 6ce 60 3C 00 00 
2f9dd 6cf 7E 18 18 18 
2f9e1 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
2f9e5 6d1 66 66 66 66 
2f9e9 6d2 66          | 	byte	$66[5]
2f9ea 6d2 7E 00 00 66 
2f9ee 6d3 66 66 66 3C 
2f9f2 6d4 18 00 00 C6 
2f9f6 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
2f9fa 6d6 C6 00 00 66 
2f9fe 6d7 66 3C 3C 66 
2fa02 6d8 66 00 00 66 
2fa06 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
2fa0a 6da 18 00 00 7E 
2fa0e 6db 30 18 0C 06 
2fa12 6dc 7E 00 00 78 
2fa16 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
2fa1a 6de 78 00 00 02 
2fa1e 6df 06 0C 18 30 
2fa22 6e0 60 00 00 1E 
2fa26 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
2fa2a 6e2 1E 00 00 10 
2fa2e 6e3 38 6C C6 00 
2fa32 6e4 00 00 00 00 
2fa36 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
2fa3a 6e6 FF 00 00 18 
2fa3e 6e7 3C 7E 7E 3C 
2fa42 6e8 18 00 00 00 
2fa46 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
2fa4a 6ea 7C 00 00 06 
2fa4e 6eb 06 3E 66 66 
2fa52 6ec 3E 00 00 00 
2fa56 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
2fa5a 6ee 3C 00 00 60 
2fa5e 6ef 60 7C 66 66 
2fa62 6f0 7C 00 00 00 
2fa66 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
2fa6a 6f2 3C 00 00 70 
2fa6e 6f3 18 7C 18 18 
2fa72 6f4 18 00 00 00 
2fa76 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
2fa7a 6f6 60 3E 00 06 
2fa7e 6f7 06 3E 66 66 
2fa82 6f8 66 00 00 18 
2fa86 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
2fa8a 6fa 3C 00 00 60 
2fa8e 6fb 00 60 60 60 
2fa92 6fc 60 3C 00 06 
2fa96 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
2fa9a 6fe 66 00 00 1C 
2fa9e 6ff 18 18 18 18 
2faa2 700 3C 00 00 00 
2faa6 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
2faaa 702 C6 00 00 00 
2faae 703 3E 66 66 66 
2fab2 704 66 00 00 00 
2fab6 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
2faba 706 3C 00 00 00 
2fabe 707 3E 66 66 3E 
2fac2 708 06 06 00 00 
2fac6 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
2faca 70a 60 60 00 00 
2face 70b 3E 66 06 06 
2fad2 70c 06 00 00 00 
2fad6 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
2fada 70e 3E 00 00 18 
2fade 70f 7E 18 18 18 
2fae2 710 70 00 00 00 
2fae6 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
2faea 712 7C 00 00 00 
2faee 713 66 66 66 3C 
2faf2 714 18 00 00 00 
2faf6 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
2fafa 716 6C 00 00 00 
2fafe 717 66 3C 18 3C 
2fb02 718 66 00 00 00 
2fb06 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
2fb0a 71a 30 1E 00 00 
2fb0e 71b 7E 30 18 0C 
2fb12 71c 7E 00 00 18 
2fb16 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
2fb1a 71e 3C 00 18 18 
2fb1e 71f 18 18 18 18 
2fb22 720 18 18 00 7E 
2fb26 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
2fb2a 722 60 00 10 18 
2fb2e 723 1C 1E 1C 18 
2fb32 724 10 00 08 18 
2fb36 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
2fb3a 726 08 00       | 	byte	$08, $00
2fb3c 727 00 00 00 00 
2fb40 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
2fb41 728 80 00 00 00 
2fb45 729 00 80 00 00 
2fb49 72a 80 80 00 00 
2fb4d 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
2fb51 72c 80 00 80 00 
2fb55 72d 00 40 80 00 
2fb59 72e AA AA AA 00 
2fb5d 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
2fb61 730 FF 00 00 00 
2fb65 731 00 FF 00 00 
2fb69 732 FF FF 00 00 
2fb6d 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
2fb71 734 FF 00 FF 00 
2fb75 735 00 FF FF 00 
2fb79 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
2fb7c 737 00 00 00 00 
2fb80 738 00          | ataripalette   file "ataripalettep2.def"
2fb81 738 11 11 11 00 
2fb85 739 22 22 22 00 
2fb89 73a 33 33 33 00 
2fb8d 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
2fb91 73c 55 55 55 00 
2fb95 73d 66 66 66 00 
2fb99 73e 77 77 77 00 
2fb9d 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
2fba1 740 99 99 99 00 
2fba5 741 AA AA AA 00 
2fba9 742 BB BB BB 00 
2fbad 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
2fbb1 744 DD DD DD 00 
2fbb5 745 EE EE EE 00 
2fbb9 746 FF FF FF 00 
2fbbd 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
2fbc1 748 00 14 40 00 
2fbc5 749 00 1E 60 00 
2fbc9 74a 00 28 80 00 
2fbcd 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
2fbd1 74c 00 3C BF 00 
2fbd5 74d 00 46 DF 00 
2fbd9 74e 00 50 FF 00 
2fbdd 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
2fbe1 750 39 77 FF 00 
2fbe5 751 55 8A FF 00 
2fbe9 752 71 9E FF 00 
2fbed 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
2fbf1 754 AA C5 FF 00 
2fbf5 755 C6 D8 FF 00 
2fbf9 756 E3 EC FF 00 
2fbfd 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
2fc01 758 00 00 40 00 
2fc05 759 00 00 60 00 
2fc09 75a 00 00 80 00 
2fc0d 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
2fc11 75c 00 00 BF 00 
2fc15 75d 00 00 DF 00 
2fc19 75e 00 00 FF 00 
2fc1d 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
2fc21 760 39 39 FF 00 
2fc25 761 55 55 FF 00 
2fc29 762 71 71 FF 00 
2fc2d 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
2fc31 764 AA AA FF 00 
2fc35 765 C6 C6 FF 00 
2fc39 766 E3 E3 FF 00 
2fc3d 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
2fc41 768 20 00 40 00 
2fc45 769 30 00 60 00 
2fc49 76a 40 00 80 00 
2fc4d 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
2fc51 76c 60 00 BF 00 
2fc55 76d 70 00 DF 00 
2fc59 76e 80 00 FF 00 
2fc5d 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
2fc61 770 9C 39 FF 00 
2fc65 771 AA 55 FF 00 
2fc69 772 B8 71 FF 00 
2fc6d 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
2fc71 774 D5 AA FF 00 
2fc75 775 E3 C6 FF 00 
2fc79 776 F1 E3 FF 00 
2fc7d 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
2fc81 778 40 00 40 00 
2fc85 779 60 00 60 00 
2fc89 77a 80 00 80 00 
2fc8d 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
2fc91 77c BF 00 BF 00 
2fc95 77d DF 00 DF 00 
2fc99 77e FF 00 FF 00 
2fc9d 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
2fca1 780 FF 39 FF 00 
2fca5 781 FF 55 FF 00 
2fca9 782 FF 71 FF 00 
2fcad 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
2fcb1 784 FF AA FF 00 
2fcb5 785 FF C6 FF 00 
2fcb9 786 FF E3 FF 00 
2fcbd 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
2fcc1 788 40 00 20 00 
2fcc5 789 60 00 30 00 
2fcc9 78a 80 00 40 00 
2fccd 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
2fcd1 78c BF 00 60 00 
2fcd5 78d DF 00 70 00 
2fcd9 78e FF 00 80 00 
2fcdd 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
2fce1 790 FF 39 9C 00 
2fce5 791 FF 55 AA 00 
2fce9 792 FF 71 B8 00 
2fced 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
2fcf1 794 FF AA D5 00 
2fcf5 795 FF C6 E3 00 
2fcf9 796 FF E3 F1 00 
2fcfd 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
2fd01 798 40 00 00 00 
2fd05 799 60 00 00 00 
2fd09 79a 80 00 00 00 
2fd0d 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
2fd11 79c BF 00 00 00 
2fd15 79d DF 00 00 00 
2fd19 79e FF 00 00 00 
2fd1d 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
2fd21 7a0 FF 39 39 00 
2fd25 7a1 FF 55 55 00 
2fd29 7a2 FF 71 71 00 
2fd2d 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
2fd31 7a4 FF AA AA 00 
2fd35 7a5 FF C6 C6 00 
2fd39 7a6 FF E3 E3 00 
2fd3d 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
2fd41 7a8 40 10 00 00 
2fd45 7a9 60 18 00 00 
2fd49 7aa 80 20 00 00 
2fd4d 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
2fd51 7ac BF 30 00 00 
2fd55 7ad DF 38 00 00 
2fd59 7ae FF 40 00 00 
2fd5d 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
2fd61 7b0 FF 6A 39 00 
2fd65 7b1 FF 80 55 00 
2fd69 7b2 FF 95 71 00 
2fd6d 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
2fd71 7b4 FF BF AA 00 
2fd75 7b5 FF D5 C6 00 
2fd79 7b6 FF EA E3 00 
2fd7d 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
2fd81 7b8 40 20 00 00 
2fd85 7b9 60 30 00 00 
2fd89 7ba 80 40 00 00 
2fd8d 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
2fd91 7bc BF 60 00 00 
2fd95 7bd DF 70 00 00 
2fd99 7be FF 80 00 00 
2fd9d 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
2fda1 7c0 FF 9C 39 00 
2fda5 7c1 FF AA 55 00 
2fda9 7c2 FF B8 71 00 
2fdad 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
2fdb1 7c4 FF D5 AA 00 
2fdb5 7c5 FF E3 C6 00 
2fdb9 7c6 FF F1 E3 00 
2fdbd 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
2fdc1 7c8 40 30 00 00 
2fdc5 7c9 60 48 00 00 
2fdc9 7ca 80 60 00 00 
2fdcd 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
2fdd1 7cc BF 90 00 00 
2fdd5 7cd DF A8 00 00 
2fdd9 7ce FF C0 00 00 
2fddd 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
2fde1 7d0 FF CE 39 00 
2fde5 7d1 FF D5 55 00 
2fde9 7d2 FF DC 71 00 
2fded 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
2fdf1 7d4 FF EA AA 00 
2fdf5 7d5 FF F1 C6 00 
2fdf9 7d6 FF F8 E3 00 
2fdfd 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
2fe01 7d8 30 40 00 00 
2fe05 7d9 48 60 00 00 
2fe09 7da 60 80 00 00 
2fe0d 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
2fe11 7dc 90 BF 00 00 
2fe15 7dd A8 DF 00 00 
2fe19 7de C0 FF 00 00 
2fe1d 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
2fe21 7e0 CE FF 39 00 
2fe25 7e1 D5 FF 55 00 
2fe29 7e2 DC FF 71 00 
2fe2d 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
2fe31 7e4 EA FF AA 00 
2fe35 7e5 F1 FF C6 00 
2fe39 7e6 F8 FF E3 00 
2fe3d 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
2fe41 7e8 00 40 00 00 
2fe45 7e9 00 60 00 00 
2fe49 7ea 00 80 00 00 
2fe4d 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
2fe51 7ec 00 BF 00 00 
2fe55 7ed 00 DF 00 00 
2fe59 7ee 00 FF 00 00 
2fe5d 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
2fe61 7f0 39 FF 39 00 
2fe65 7f1 55 FF 55 00 
2fe69 7f2 71 FF 71 00 
2fe6d 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
2fe71 7f4 AA FF AA 00 
2fe75 7f5 C6 FF C6 00 
2fe79 7f6 E3 FF E3 00 
2fe7d 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
2fe81 7f8 00 40 14 00 
2fe85 7f9 00 60 1E 00 
2fe89 7fa 00 80 28 00 
2fe8d 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
2fe91 7fc 00 BF 3C 00 
2fe95 7fd 00 DF 46 00 
2fe99 7fe 00 FF 50 00 
2fe9d 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
2fea1 800 39 FF 77 00 
2fea5 801 55 FF 8A 00 
2fea9 802 71 FF 9E 00 
2fead 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
2feb1 804 AA FF C5 00 
2feb5 805 C6 FF D8 00 
2feb9 806 E3 FF EC 00 
2febd 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
2fec1 808 00 40 28 00 
2fec5 809 00 60 3C 00 
2fec9 80a 00 80 50 00 
2fecd 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
2fed1 80c 00 BF 78 00 
2fed5 80d 00 DF 8C 00 
2fed9 80e 00 FF A0 00 
2fedd 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
2fee1 810 39 FF B5 00 
2fee5 811 55 FF C0 00 
2fee9 812 71 FF CA 00 
2feed 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
2fef1 814 AA FF DF 00 
2fef5 815 C6 FF EA 00 
2fef9 816 E3 FF F4 00 
2fefd 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
2ff01 818 00 40 40 00 
2ff05 819 00 60 60 00 
2ff09 81a 00 80 80 00 
2ff0d 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
2ff11 81c 00 BF BF 00 
2ff15 81d 00 DF DF 00 
2ff19 81e 00 FF FF 00 
2ff1d 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
2ff21 820 39 FF FF 00 
2ff25 821 55 FF FF 00 
2ff29 822 71 FF FF 00 
2ff2d 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
2ff31 824 AA FF FF 00 
2ff35 825 C6 FF FF 00 
2ff39 826 E3 FF FF 00 
2ff3d 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
2ff41 828 00 28 40 00 
2ff45 829 00 3C 60 00 
2ff49 82a 00 50 80 00 
2ff4d 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
2ff51 82c 00 78 BF 00 
2ff55 82d 00 8C DF 00 
2ff59 82e 00 A0 FF 00 
2ff5d 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
2ff61 830 39 B5 FF 00 
2ff65 831 55 C0 FF 00 
2ff69 832 71 CA FF 00 
2ff6d 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
2ff71 834 AA DF FF 00 
2ff75 835 C6 EA FF 00 
2ff79 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
2ff7c 837             | 
2ff7c 837             | '**********************************************************************************
2ff7c 837             | '
2ff7c 837             | '        Timings and colors definitions
2ff7c 837             | '
2ff7c 837             | '**********************************************************************************
2ff7c 837             | 
2ff7c 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
2ff7c 837 10 00 00 00 
2ff80 838 50 00 00 00 
2ff84 839 0C 00 00 00 
2ff88 83a 00 04 00 00 | timings         long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
2ff8c 83b 08 00 00 00 
2ff90 83c 04 00 00 00 
2ff94 83d 08 00 00 00 
2ff98 83e 80 00 00 00 | 	byte	$08, $00, $00, $00, $04, $00, $00, $00, $08, $00, $00, $00, $80, $00, $00, $00
2ff9c 83f 40 02 00 00 
2ffa0 840 6A 8C 15 14 
2ffa4 841 FB 06 B7 01 
2ffa8 842 40 02 00 00 | 	byte	$40, $02, $00, $00, $6a, $8c, $15, $14, $fb, $06, $b7, $01, $40, $02, $00, $00
2ffac 843 00 00 00 00 
2ffb0 844 C0 00 00 00 
2ffb4 845 00 00 00 00 
2ffb8 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ffbc 847 00 75 C7 97 
2ffc0 848 27 47 F6 0A 
2ffc4 849 05 79 CB 9B 
2ffc8 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
2ffcc 84b             | 
2ffcc 84b             | ''--------  Initialization  ----------------------------------------------------------------
2ffcc 84b             | 
2ffcc 84b 28 0C 64 FD | hdmi            setq    #6
2ffd0 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
2ffd4 84d 28 10 64 FD |                 setq    #8
2ffd8 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
2ffdc 84f             | 
2ffdc 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
2ffe0 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
2ffe4 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
2ffe8 852 D6 C6 01 F1 |                 add     t1,hbase
2ffec 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
2fff0 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
2fff4 855 7B 0B 80 5F 
2fff8 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
2fffc 857 66 66 86 FF 
30000 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
30004 859             | '
30004 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
30008 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
3000c 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
30010 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
30014 85d             | 
30014 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
30018 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
3001c 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
30020 860             | 
30020 860             | ''--------  frame rendering main loop  ---------------------------------------------------
30020 860             | 
30020 860 28 06 64 FD | p101            setq 	#3
30024 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
30028 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
3002c 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
30030 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
30034 865 00 A0 05 F6 |                 mov     dlinum, #0
30038 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
3003c 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
30040 868             | 
30040 868             | 
30040 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
30044 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
30048 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
3004c 86b             |                 
3004c 86b             | 
3004c 86b             | 
3004c 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
3004c 86b             |   
3004c 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
30050 86c 29 FE 65 3D |          if_nc  setq2   #255
30054 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
30058 86e             | 
30058 86e             | '' -----   up porch (before the picture)
30058 86e             | 
30058 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
3005c 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
30060 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
30064 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
30068 872             |  
30068 872             |    
30068 872             |  
30068 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3006c 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
30070 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
30074 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
30078 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
3007c 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
30080 878             | 
30080 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
30084 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
30088 87a 48 00 B0 FD | 		call    #dli
3008c 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
30090 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
30094 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
30098 87e             |                 	
30098 87e             |                 
30098 87e             | 
30098 87e             |  
30098 87e             | '' ------- the main screen drawing starts here
30098 87e             | 
30098 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
3009c 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
300a0 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
300a4 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
300a8 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
300ac 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
300b0 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
300b4 885             |               
300b4 885             | 
300b4 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
300b8 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
300bc 887             | 
300bc 887             | ' ---------------- All visible lines displayed now, start vblank  
300bc 887             | 
300bc 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
300c0 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
300c4 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
300c8 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
300cc 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
300d0 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
300d4 88d             | 
300d4 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
300d4 88d             | 
300d4 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
300d4 88d             | 
300d4 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
300d8 88e             | 
300d8 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
300dc 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
300e0 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
300e4 891             | 
300e4 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
300e8 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
300ec 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
300f0 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
300f4 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
300f8 896             | 
300f8 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
300fc 897 DD C6 41 F8 |                 getnib  t1,dl,#0
30100 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
30104 899 70 00 90 AD |     if_z        jmp     #preload
30108 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
3010c 89b 94 00 90 AD |     if_z        jmp     #preload2
30110 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
30114 89d 0C 00 90 AD |     if_z        jmp     #p390
30118 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
3011c 89f 28 00 90 AD |     if_z        jmp     #p391  
30120 8a0             | 
30120 8a0 2D 00 64 FD | p308            ret
30124 8a1             |    
30124 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
30128 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
3012c 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
30130 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
30134 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
30138 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
3013c 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
30140 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
30144 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
30148 8aa             |  
30148 8aa             | '' --------  Reload palette. To do 
30148 8aa             | 
30148 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
3014c 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
30150 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
30154 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
30158 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
3015c 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
30160 8b0 70 FF 9F FD |         	jmp     #dli                
30164 8b1             |       
30164 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
30164 8b1             | 
30164 8b1             | 
30164 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
30164 8b1             | 
30164 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
30168 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
3016c 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
30170 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
30174 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
30178 8b6             |         
30178 8b6             | '' -------------- Preload a line from PSRAM        
30178 8b6             |         
30178 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
3017c 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
30180 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
30184 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
30188 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
3018c 8bb             | 
3018c 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
30190 8bc 32 B7 01 F6 |                 mov     buf2,a1024
30194 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
30198 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
3019c 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
301a0 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
301a4 8c1             |  
301a4 8c1             |  
301a4 8c1             | preload2      '  incmod  dlinum,#3
301a4 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
301a8 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
301ac 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
301b0 8c4 28 02 64 FD |                 setq	#1
301b4 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
301b8 8c6             |                 
301b8 8c6             | 
301b8 8c6             | '' -------------- Draw sprites
301b8 8c6             | 
301b8 8c6 CF 5C 02 F6 | sprite          mov t8,frames
301bc 8c7 10 5C 0E F5 | 		and t8,#16 wz
301c0 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
301c4 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
301c8 8ca             | 		
301c8 8ca             | 
301c8 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
301cc 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
301d0 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
301d4 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
301d8 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
301dc 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
301e0 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
301e4 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
301e8 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
301ec 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
301f0 8d4 01 52 86 F1 |                 sub     sprite_h,#1
301f4 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
301f8 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
301fc 8d7             | 
301fc 8d7             | 
301fc 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
30200 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
30204 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
30208 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
3020c 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
30210 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
30214 8dd 00 5E 06 F6 |                 mov 	t9,#0
30218 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
3021c 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
30220 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
30224 8e1             |      
30224 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
30228 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
3022c 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
30230 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
30234 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
30238 8e6             |                 
30238 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
3023c 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
30240 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
30244 8e9             |   		
30244 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
30248 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
3024c 8eb             | 
3024c 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
30250 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
30254 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
30258 8ee             |  
30258 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
3025c 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
30260 8f0 10 00 90 CD |      if_c 	jmp     #p899		
30264 8f1             | 	
30264 8f1             | 	
30264 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
30268 8f2 28 CD 01 F1 | 		add	t4,sprite_w
3026c 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
30270 8f4             | 
30270 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
30274 8f5             | 
30274 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
30278 8f6 01 58 86 F1 | 	 	sub     t6,#1
3027c 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
30280 8f8             | 
30280 8f8 28 58 62 FD |                 setq   	t6
30284 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
30288 8fa 28 5D 02 F6 |                 mov t8,sprite_w
3028c 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
30290 8fc 24 00 90 AD |         if_z    jmp #p898
30294 8fd             |          
30294 8fd             |         
30294 8fd 70 5F 06 F6 |                 mov  t9,#368
30298 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
3029c 8ff             | 
3029c 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
302a0 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
302a4 901 FF FF 7F FF 
302a8 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
302ac 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
302b0 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
302b4 905 2D 01 00 F5 |                 and 0-0, t7
302b8 906             |                
302b8 906             | 
302b8 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
302bc 907 E5 E0 7A FA |                 wmlong 368,t3				
302c0 908             |                 
302c0 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
302c4 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
302c8 90a 2D 00 64 FD |                 ret
302cc 90b             | 	
302cc 90b             | 	
302cc 90b             |                
302cc 90b             |  
302cc 90b             | '' -------------- Graphics line ------------------------------------------------------------
302cc 90b             |  
302cc 90b             | 
302cc 90b             | '' consts and vars
302cc 90b             | 
302cc 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
302d0 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
302d4 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
302d8 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
302dc 90f             | 
302dc 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
302e0 910             | 
302e0 910             | '------ these longs will be set by setmode function
302e0 910             | 
302e0 910 00 00 00 00 | m_bs            long    0        'blanks before sync
302e4 911 00 00 00 00 | m_sn            long    0        'sync
302e8 912 00 00 00 00 | m_bv            long    0        'blanks before visible
302ec 913 00 00 00 00 | m_vi            long    0        'visible pixels #
302f0 914             | 'm_border        long    0        'left/right borders
302f0 914 00 00 00 00 | i_upporch       long    0        'up porch lines
302f4 915 00 00 00 00 | i_vsync         long    0        'vsync lines
302f8 916 00 00 00 00 | i_downporch     long    0        'down porch lines
302fc 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
30300 918 00 00 00 00 | i_totalvis      long    0
30304 919             | 
30304 919             | '-------------------------------------
30304 919             |  
30304 919 00 00 00 00 | linenum         long    0
30308 91a 00 00 00 00 | frames          long    0
3030c 91b 00 00 00 00 | dlinum long 0
30310 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
30314 91d             | 
30314 91d 00 00 00 00 | vblankptr       long    0
30318 91e 00 00 00 00 | modeptr         long    0
3031c 91f 00 00 00 00 | paletteptr      long    0
30320 920 00 00 00 00 | dlptr           long    0
30324 921 01 00 00 00 | hbase           long    1
30328 922 00 00 00 00 | mailbox         long    0
3032c 923 00 00 00 00 | spriteptr          long 0
30330 924             | 
30330 924 00 00 00 00 | cmd             long    0
30334 925 00 B0 07 00 | buf1            long    $80000-16384-4096
30338 926 00 04 00 00 | buf2            long    1024
3033c 927 01 00 00 00 | dlptr2          long    1
30340 928 01 00 00 00 | dl              long    1
30344 929             | 
30344 929 00 00 00 00 | buf1c long 0
30348 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
3034c 92b 01 00 00 00 | framebuf2       long    1
30350 92c 01 00 00 00 | hsync0          long    1
30354 92d 01 00 00 00 | hsync1          long    1
30358 92e             | 
30358 92e 01 00 00 00 | t1              long    1
3035c 92f 00 00 00 00 | t2 long 0
30360 930 00 00 00 00 | t3 long 0
30364 931 00 00 00 00 | t4 long 0
30368 932             | 
30368 932 00 00 00 00 | rcnt            long    0  'dl repeat count
3036c 933 00 00 00 00 | rcnt2           long    0
30370 934 00 00 00 00 | rcnt2a          long    0
30374 935 00 00 00 00 | roffset         long    0
30378 936 00 00 00 00 | rdl             long    0  'dl repeat line
3037c 937 00 00 00 00 | dlc             long    0  'dl command
30380 938             | 
30380 938 FF FF FF FF | affffffff       long    $ffffffff
30384 939 00 00 00 00 | sprite1pointer long 0
30388 93a 00 00 00 00 | sprite1xy      long 0
3038c 93b 00 00 00 00 | sprite1wh      long 0
30390 93c 00 00 00 00 | sprite2pointer long 0
30394 93d 00 00 00 00 | sprite2xy      long 0
30398 93e 00 00 00 00 | sprite2wh      long 0
3039c 93f 00 00 00 00 | sprite3pointer long 0
303a0 940 00 00 00 00 | sprite3xy      long 0
303a4 941 00 00 00 00 | sprite3wh      long 0
303a8 942 00 00 00 00 | sprite4pointer long 0
303ac 943 00 00 00 00 | sprite4xy      long 0
303b0 944 00 00 00 00 | sprite4wh      long 0
303b4 945 00 00 00 00 | sprite5pointer long 0
303b8 946 00 00 00 00 | sprite5xy      long 0
303bc 947 00 00 00 00 | sprite5wh      long 0
303c0 948 00 00 00 00 | sprite6pointer long 0
303c4 949 00 00 00 00 | sprite6xy      long 0
303c8 94a 00 00 00 00 | sprite6wh      long 0
303cc 94b 00 00 00 00 | sprite7pointer long 0
303d0 94c 00 00 00 00 | sprite7xy      long 0
303d4 94d 00 00 00 00 | sprite7wh      long 0
303d8 94e 00 00 00 00 | sprite8pointer long 0
303dc 94f 00 00 00 00 | sprite8xy      long 0
303e0 950 00 00 00 00 | sprite8wh      long 0
303e4 951 00 00 00 00 | sprite9pointer long 0
303e8 952 00 00 00 00 | sprite9xy      long 0
303ec 953 00 00 00 00 | sprite9wh      long 0
303f0 954 00 00 00 00 | sprite10pointer long 0
303f4 955 00 00 00 00 | sprite10xy      long 0
303f8 956 00 00 00 00 | sprite10wh      long 0
303fc 957 00 00 00 00 | sprite11pointer long 0
30400 958 00 00 00 00 | sprite11xy      long 0
30404 959 00 00 00 00 | sprite11wh      long 0
30408 95a 00 00 00 00 | sprite12pointer long 0
3040c 95b 00 00 00 00 | sprite12xy      long 0
30410 95c 00 00 00 00 | sprite12wh      long 0
30414 95d 00 00 00 00 | sprite13pointer long 0
30418 95e 00 00 00 00 | sprite13xy      long 0
3041c 95f 00 00 00 00 | sprite13wh      long 0
30420 960 00 00 00 00 | sprite14pointer long 0
30424 961 00 00 00 00 | sprite14xy      long 0
30428 962 00 00 00 00 | sprite14wh      long 0
3042c 963 00 00 00 00 | sprite15pointer long 0
30430 964 00 00 00 00 | sprite15xy      long 0
30434 965 00 00 00 00 | sprite15wh      long 0
30438 966 00 00 00 00 | sprite16pointer long 0
3043c 967 00 00 00 00 | sprite16xy      long 0
30440 968 00 00 00 00 | sprite16wh      long 0
30444 969 00 00 00 00 | sprite17pointer long 0
30448 96a 00 00 00 00 | sprite17xy      long 0
3044c 96b 00 00 00 00 | sprite17wh      long 0
30450 96c 00 00 00 00 | sprite18pointer long 0
30454 96d 00 00 00 00 | sprite18xy      long 0
30458 96e 00 00 00 00 | sprite18wh      long 0
3045c 96f 00 00 00 00 | spritenum long 0
30460 970             | 
30460 970 00 00 00 00 | spriteline long 0
30464 971 84 03 00 00 | sprite_x long 900
30468 972 00 00 00 00 | sprite_y long 0
3046c 973 10 00 00 00 | sprite_w long 16
30470 974 40 00 00 00 | sprite_h long 64
30474 975 00 00 00 00 | l2 long 0
30478 976 00 00 00 00 | t5 long 0
3047c 977 00 00 00 00 | t6 long 0
30480 978 00 00 00 00 | t7 long 0
30484 979 00 00 00 00 | t8 long 0
30488 97a 00 00 00 00 | t9 long 0
3048c 97b 00 00 00 00 | preloadaddr long 0
30490 97c 00 00 00 00 | preloadlineaddr long 0
30494 97d 00 04 00 00 | a1024 long 1024
30498 97e             | 
30498 97e E0 03 00 00 | aa long 992
3049c 97f FF 03 00 00 | a1023 long 1023
304a0 980 00 10 00 00 | a4096 long 4096
304a4 981             |  fit 368
304a4 981             | _psram_spin2_dat_
304a4 981 00 00 00 00 
      ...             
3059c 9bf 00 00 00 00 
305a0 9c0 00 00 00 00 |     listdata long 0[8*8]
305a4 9c1             |             orgh
305a4                 | 
305a4                 | ' driver state
305a4     FF FF FF FF | drivercog   long    -1  ' COG id of driver
305a8     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
305ac                 | 
305ac                 | ' delay profile
305ac     07 00 00 00 
305b0     00 CF 7B 05 
305b4     80 D1 F0 08 
305b8     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
305bc     80 C4 60 0F 
305c0     80 39 7A 12 
305c4     40 2D D9 13 
305c8     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
305cc                 | 
305cc                 | ' data to be passed to driver when starting it
305cc                 | startupData
305cc     00 00 00 00 |     long    0           ' current frequency
305d0     00 00 00 00 |     long    FLAGS       ' optional flags for driver
305d4     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
305d8     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
305dc     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
305e0     EC 05 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
305e4     6C 06 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
305e8     8C 06 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
305ec                 | 
305ec                 | ' data for memory
305ec                 | deviceData
305ec                 |     ' 16 bank parameters follow (16MB per bank)
305ec     00 00 00 00 
      ...             
30624     00 00 00 00 
30628     00 00 00 00 |     long    0[16]                               ' banks 0-15
3062c                 |     ' 16 banks of pin parameters follow
3062c     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
30630     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
30634     FF FF FF FF 
      ...             
30664     FF FF FF FF 
30668     FF FF FF FF |     long    -1[14]                              ' banks 2-15
3066c                 | 
3066c                 | ' data for COG polling
3066c                 | qosData 
3066c     00 00 FF FF 
30670     00 00 FF FF 
30674     00 00 FF FF 
30678     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
3067c     00 00 FF FF 
30680     00 00 FF FF 
30684     00 00 FF FF 
30688     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
3068c                 |     
3068c                 | ' mailbox storage
3068c                 | 
3068c                 | mailboxes
3068c     00 00 00 00 
      ...             
306e4     00 00 00 00 
306e8     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
306ec                 | 	alignl
306ec                 | _psram16drv_spin2_dat_
306ec                 |                             orgh
306ec     00 00 00 00 
      ...             
30704     00 00 00 00 
30708     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
3070c                 | 
3070c                 | driver_start
3070c                 |                             org
3070c 000             | '..................................................................................................
3070c 000             | ' Memory layout for COG RAM once operational:
3070c 000             | '
3070c 000             | '  COG RAM address      Usage
3070c 000             | '  ---------------      ----
3070c 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
3070c 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
3070c 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
3070c 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
3070c 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
3070c 000             | '  ~$198-$1F3           State and register variables
3070c 000             | '
3070c 000             | ' Also during driver COG startup:
3070c 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
3070c 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
3070c 000             | '..................................................................................................
3070c 000             |                             
3070c 000             | ' Mailbox storage after vector initialization
3070c 000             | 
3070c 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
30710 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
30714 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
30718 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
3071c 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
30720 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
30724 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
30728 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
3072c 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
30730 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
30734 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
30738 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
3073c 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
30740 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
30744 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
30748 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
3074c 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
30750 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
30754 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
30758 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
3075c 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
30760 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
30764 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
30768 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
3076c 018             | 
3076c 018             | ' Mailbox parameter addresses per COG once patched
3076c 018             |                             
3076c 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
30770 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
30774 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
30778 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
3077c 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
30780 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
30784 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
30788 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
3078c 020             | 
3078c 020             | '..................................................................................................
3078c 020             | ' Per COG request and state setup and service branching
3078c 020             |         
3078c 020             | cog0                 
3078c 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
30790 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
30794 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
30798 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
3079c 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
307a0 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
307a4 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
307a8 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
307ac 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
307b0 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
307b4 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
307b8 02b 33 CA 63 FD |                             execf   request-0               'jump to service
307bc 02c             | cog1                        
307bc 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
307c0 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
307c4 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
307c8 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
307cc 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
307d0 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
307d4 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
307d8 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
307dc 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
307e0 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
307e4 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
307e8 037 33 CA 63 FD |                             execf   request-0               'jump to service
307ec 038             | cog2                         
307ec 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
307f0 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
307f4 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
307f8 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
307fc 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
30800 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
30804 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
30808 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
3080c 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
30810 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
30814 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
30818 043 33 CA 63 FD |                             execf   request-0               'jump to service
3081c 044             | cog3                        
3081c 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
30820 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
30824 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
30828 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
3082c 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
30830 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
30834 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
30838 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
3083c 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
30840 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
30844 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
30848 04f 33 CA 63 FD |                             execf   request-0               'jump to service
3084c 050             | cog4                        
3084c 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
30850 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
30854 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
30858 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
3085c 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
30860 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
30864 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
30868 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
3086c 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
30870 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
30874 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
30878 05b 33 CA 63 FD |                             execf   request-0               'jump to service
3087c 05c             | cog5                        
3087c 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
30880 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
30884 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
30888 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
3088c 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
30890 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
30894 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
30898 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
3089c 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
308a0 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
308a4 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
308a8 067 33 CA 63 FD |                             execf   request-0               'jump to service
308ac 068             | cog6                        
308ac 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
308b0 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
308b4 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
308b8 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
308bc 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
308c0 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
308c4 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
308c8 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
308cc 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
308d0 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
308d4 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
308d8 073 33 CA 63 FD |                             execf   request-0               'jump to service
308dc 074             | cog7                        
308dc 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
308e0 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
308e4 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
308e8 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
308ec 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
308f0 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
308f4 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
308f8 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
308fc 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
30900 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
30904 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
30908 07f 33 CA 63 FD |                             execf   request-0               'jump to service
3090c 080             |                             fit     128
3090c 080             | 
3090c 080             |                             fit     128
3090c 080             | pad                         long    0[128-$]                'align init code to $80
3090c 080             | 
3090c 080             | '..................................................................................................
3090c 080             | 
3090c 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
3090c 080             | 
3090c 080             | init                        
3090c 080             |                             ' get driver scratch long address in hub
3090c 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
30910 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
30914 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
30918 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
3091c 084             |                     
3091c 084             |                             ' read in the additional LUT RAM code
3091c 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
30920 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
30924 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
30928 087             | 
30928 087             |                             ' read the startup parameters
30928 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
3092c 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
30930 089             | 
30930 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
30930 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
30934 08a             | 
30934 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
30938 08b 01 00 00 5F 
3093c 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
30940 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
30944 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
30948 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
3094c 090             | 
3094c 090             |                             ' setup data pin modes and data bus pin group in streamer commands
3094c 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
30950 091 01 00 00 FF 
30954 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
30958 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
3095c 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
30960 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
30964 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
30968 097 08 DE 47 F5 |                             or      a, #8
3096c 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
30970 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
30974 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
30978 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
3097c 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
30980 09d 01 DE 07 F1 |                             add     a, #1
30984 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
30988 09f             |  
30988 09f             |                             ' setup device control pin states
30988 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
3098c 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
30990 0a1 01 00 00 FF 
30994 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
30998 0a3             | 
30998 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
3099c 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
309a0 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
309a4 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
309a8 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
309ac 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
309b0 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
309b4 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
309b8 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
309bc 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
309c0 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
309c4 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
309c8 0af             | pinloop
309c8 0af             |                             ' generate minimum CE high time before access
309c8 0af A1 07 00 FF 
309cc 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
309d0 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
309d4 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
309d8 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
309dc 0b4 1F DE 63 FD |                             waitx   a                       'delay
309e0 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
309e4 0b6             | 
309e4 0b6             |                             ' setup the COG mailboxes and addresses 
309e4 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
309e8 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
309ec 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
309f0 0b9             | 
309f0 0b9 28 2E 64 FD |                             setq    #24-1
309f4 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
309f8 0bb             | 
309f8 0bb             |                             ' setup the polling loop for active COGs 
309f8 0bb 01 C2 63 FD |                             cogid   id
309fc 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
30a00 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
30a04 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
30a08 0bf 0A F0 07 F6 |                             mov     ptra, #10
30a0c 0c0 E1 F1 03 FA |                             mul     ptra, id
30a10 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
30a14 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
30a18 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
30a1c 0c4 03 C2 07 FA |                             mul     id, #3
30a20 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
30a24 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
30a28 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
30a2c 0c8 D8 01 B0 FD |                             call    #reloadcogs
30a30 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
30a34 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
30a38 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
30a38 0cb D8 E5 B7 F9 |                             setd    d, #addr1
30a3c 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
30a40 0cd 08 04 DC FC |                             rep     #2, #8
30a44 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
30a48 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
30a4c 0d0             | 
30a4c 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
30a4c 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
30a4c 0d0 01 C2 63 FD |                             cogid   id
30a50 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
30a54 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
30a58 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
30a5c 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
30a60 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
30a64 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
30a68 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
30a6c 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
30a70 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
30a74 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
30a78 0db 3F E4 A7 F9 |                             alti    d, #%111_111
30a7c 0dc 00 00 00 F6 |                             mov     0-0, 0-0
30a80 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
30a84 0de A5 E5 03 F1 |                             add     d, const512
30a88 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
30a8c 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
30a90 0e1 00 00 00 F6 |                             mov     0-0, 0-0
30a94 0e2             |                             
30a94 0e2             |                             ' setup register values for control vector loop setup after we return
30a94 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
30a98 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
30a9c 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
30aa0 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
30aa4 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
30aa8 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
30aac 0e8 D0 C3 8F F9 |                             altd    id, #id0
30ab0 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
30ab4 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
30ab8 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
30abc 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
30ac0 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
30ac4 0ee             |  
30ac4 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
30ac8 0ef 07 CA 07 F5 |                             and     request, #7
30acc 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
30ad0 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
30ad4 0f2             |                             fit     $100                    'ensure all init code fits this space
30ad4 0f2             | 
30ad4 0f2             |                             fit     $100                    'ensure all init code fits this space
30ad4 0f2             | 
30ad4 0f2 00 00 00 00 
      ...             
30b04 0fe 00 00 00 00 
30b08 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
30b0c 100             | 
30b0c 100             | '..................................................................................................
30b0c 100             | ' Error result handling and COG notification of request completion
30b0c 100             | 
30b0c 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
30b10 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
30b14 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
30b18 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
30b1c 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
30b20 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
30b24 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
30b28 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
30b2c 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
30b30 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
30b34 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
30b38 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
30b3c 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
30b40 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
30b44 10e             | ' Poller re-starts here after a COG is serviced
30b44 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
30b48 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
30b4c 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
30b50 111             | ' Main dynamic polling loop repeats until a request arrives
30b50 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
30b54 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
30b58 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
30b5c 114             | 
30b5c 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
30b60 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
30b64 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
30b68 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
30b6c 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
30b70 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
30b74 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
30b78 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
30b7c 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
30b80 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
30b84 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
30b88 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
30b8c 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
30b90 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
30b94 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
30b98 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
30b9c 124             | 
30b9c 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
30ba0 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
30ba4 126             |  
30ba4 126             | '..................................................................................................
30ba4 126             | ' List handler                               
30ba4 126             | 
30ba4 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
30ba8 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
30bac 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
30bb0 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
30bb4 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
30bb8 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
30bbc 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
30bc0 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
30bc4 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
30bc8 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
30bcc 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
30bd0 131 33 00 60 FD |                             execf   0-0                     'process the request 
30bd4 132             | 
30bd4 132             | '..................................................................................................
30bd4 132             | ' Restoring per COG state and resuming where we left off
30bd4 132             | 
30bd4 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
30bd8 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
30bdc 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
30be0 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
30be4 136 D8 CB FB F8 |                             getbyte request, addr1, #3
30be8 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
30bec 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
30bf0 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
30bf4 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
30bf8 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
30bfc 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
30c00 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
30c04 13e             |                    
30c04 13e             | '..................................................................................................
30c04 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
30c04 13e             | 
30c04 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
30c08 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
30c0c 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
30c10 141 D0 DF B7 F9 |                             setd    a, #id0
30c14 142 D8 DF BF F9 |                             sets    a, #addr1
30c18 143 FE FF FF FF 
30c1c 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
30c20 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
30c24 146 3F DE A7 F9 |                             alti    a, #%111_111 
30c28 147 00 00 F0 F9 |                             muxq    0-0, 0-0
30c2c 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
30c30 149 01 E2 63 FD |                             cogid   c
30c34 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
30c38 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
30c3c 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
30c40 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
30c44 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
30c48 14f 00 E0 03 F6 |                             mov     b, 0-0
30c4c 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
30c50 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
30c54 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
30c58 153 0C 00 90 AD |             if_z            jmp     #excluded               
30c5c 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
30c60 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
30c64 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
30c68 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
30c6c 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
30c70 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
30c74 15a             | 
30c74 15a             | 'determine priority cogs and build instructions for the polling sequence
30c74 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
30c78 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
30c7c 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
30c80 15d             | 
30c80 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
30c84 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
30c88 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
30c8c 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
30c90 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
30c94 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
30c98 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
30c9c 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
30ca0 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
30ca4 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
30ca8 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
30cac 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
30cb0 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
30cb4 16a             | endprioloop
30cb4 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
30cb8 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
30cbc 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
30cc0 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
30cc4 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
30cc8 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
30ccc 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
30cd0 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
30cd4 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
30cd8 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
30cdc 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
30ce0 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
30ce4 176             | 
30ce4 176             | ' populate the round robin COG polling instructions
30ce4 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
30ce8 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
30cec 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
30cf0 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
30cf4 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
30cf8 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
30cfc 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
30d00 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
30d04 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
30d08 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
30d0c 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
30d10 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
30d14 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
30d18 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
30d1c 184             | '..................................................................................................
30d1c 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
30d1c 184             | 
30d1c 184             | set_latency                                                 '            (a) set latency
30d1c 184             | get_latency                                                 '            (b) get latency
30d1c 184             | set_burst                                                   '            (c) set burst size of bank
30d1c 184             | get_burst                                                   '            (d) get burst size of bank
30d1c 184             |                                                             '            (e) dump state
30d1c 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
30d20 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
30d24 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
30d28 187             |                                                             ' | | | | e  account for following AUGS
30d28 187 04 00 00 FF 
30d2c 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
30d30 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
30d34 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
30d38 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
30d3c 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
30d40 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
30d44 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
30d48 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
30d4c 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
30d50 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
30d54 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
30d58 193             | 
30d58 193             | '..................................................................................................
30d58 193             | ' Misc EXECF code
30d58 193             | 
30d58 193 33 72 63 FD | start_read_exec             execf   newburstr
30d5c 194 33 7C 63 FD | start_write_exec            execf   resumewrites
30d60 195 33 78 63 FD | continue_read_exec          execf   lockedreads
30d64 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
30d68 197             | 
30d68 197             | '..................................................................................................
30d68 197             | ' Variables
30d68 197             | 
30d68 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
30d6c 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
30d70 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
30d74 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
30d78 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
30d7c 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
30d80 19d             | 
30d80 19d 00 00 00 80 | xfreq1          long    $80000000
30d84 19e 00 00 00 40 | xfreq2          long    $40000000
30d88 19f 03 00 00 00 | delay           long    3
30d8c 1a0             | 
30d8c 1a0             | lutcodeaddr                 
30d8c 1a0             | startupparams
30d8c 1a0             | excludedcogs                                    'careful: shared register use!
30d8c 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
30d90 1a1 00 00 00 00 | flags           long    0
30d94 1a2             | mask                                            'careful: shared register use!
30d94 1a2 00 00 00 00 | resetmaskA      long    0
30d98 1a3             | limit                                           'careful: shared register use!
30d98 1a3 00 00 00 00 | resetmaskB      long    0
30d9c 1a4 00 00 00 00 | datapins        long    0
30da0 1a5             | const512                                        'careful: shared register use!
30da0 1a5 00 00 00 00 | devicelist      long    0
30da4 1a6 00 00 00 00 | coglist         long    0
30da8 1a7 00 00 00 00 | mbox            long    0 
30dac 1a8             | 
30dac 1a8             | clkpin                                          'shared with code patched during init
30dac 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
30db0 1a9             | cspin                                           'shared with code patched during init
30db0 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
30db4 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
30db8 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
30dbc 1ac 01 00 00 00 | clkdelay        long    1
30dc0 1ad 00 00 00 00 | regdatabus      long    0
30dc4 1ae             | 
30dc4 1ae 10 00 00 00 | deviceaddr      long    $10
30dc8 1af             | rrcounter
30dc8 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
30dcc 1b0             | 
30dcc 1b0             | ' jump addresses for the per COG handlers
30dcc 1b0 20 00 00 00 | cog0_handler    long    cog0
30dd0 1b1 2C 00 00 00 | cog1_handler    long    cog1
30dd4 1b2 38 00 00 00 | cog2_handler    long    cog2
30dd8 1b3 44 00 00 00 | cog3_handler    long    cog3
30ddc 1b4 50 00 00 00 | cog4_handler    long    cog4
30de0 1b5 5C 00 00 00 | cog5_handler    long    cog5
30de4 1b6 68 00 00 00 | cog6_handler    long    cog6
30de8 1b7 74 00 00 00 | cog7_handler    long    cog7
30dec 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
30df0 1b9             | 
30df0 1b9             | ' EXECF sequences
30df0 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
30df4 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
30df8 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
30dfc 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
30e00 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
30e04 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
30e08 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
30e0c 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
30e0c 1c0             | 
30e0c 1c0             | 
30e0c 1c0             | ' SKIPF sequences
30e0c 1c0             | skiptable
30e0c 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
30e10 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
30e14 1c2 00 00 00 00 |                 long    0                      ' read modify write long
30e18 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
30e1c 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
30e20 1c5 00 00 00 00 | pattern2        long    0
30e24 1c6 00 00 00 00 | pattern3        long    0
30e28 1c7 77 02 00 00 | singlelong      long    %1001110111  
30e2c 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
30e30 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
30e34 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
30e38 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
30e3c 1cc             | 
30e3c 1cc             | ' LUT RAM address values
30e3c 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
30e40 1cd DD 02 00 00 | continue_read   long    continue_read_lut
30e44 1ce DB 02 00 00 | continue_write  long    continue_write_lut
30e48 1cf F6 02 00 00 | noread          long    noread_lut
30e4c 1d0             | 
30e4c 1d0 00 00 00 00 | id0             long    0
30e50 1d1 01 00 00 00 | id1             long    1
30e54 1d2 02 00 00 00 | id2             long    2
30e58 1d3 03 00 00 00 | id3             long    3
30e5c 1d4 04 00 00 00 | id4             long    4
30e60 1d5 05 00 00 00 | id5             long    5
30e64 1d6 06 00 00 00 | id6             long    6
30e68 1d7 07 00 00 00 | id7             long    7
30e6c 1d8             | 
30e6c 1d8             | 'These next 10 request registers below are also temporarily reused during init 
30e6c 1d8             | 'and COG updates and need to follow immediately after id0-id7
30e6c 1d8 00 00 00 00 | addr1           long    0
30e70 1d9 00 00 00 00 | hubdata         long    0
30e74 1da 00 00 00 00 | count           long    0
30e78 1db 00 00 00 00 | addr2           long    0
30e7c 1dc 00 00 00 00 | total           long    0
30e80 1dd 00 00 00 00 | offset1         long    0
30e84 1de 00 00 00 00 | offset2         long    0
30e88 1df 00 00 00 00 | link            long    0
30e8c 1e0             | 
30e8c 1e0             | burstwrite                                      'note shared register use during init
30e8c 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
30e90 1e1 00 00 00 00 | id              long    0
30e94 1e2             | 
30e94 1e2 00 00 00 00 | header          long    0
30e98 1e3 00 00 00 00 | trailer         long    0
30e9c 1e4 00 00 00 00 | cmdaddr         long    0
30ea0 1e5 00 00 00 00 | request         long    0
30ea4 1e6 00 00 00 00 | rrlimit         long    0
30ea8 1e7 00 00 00 00 | pinconfig       long    0
30eac 1e8 00 00 00 00 | clks            long    0
30eb0 1e9 00 00 00 00 | resume          long    0
30eb4 1ea 00 00 00 00 | orighubsize     long    0
30eb8 1eb 00 00 00 00 | wrclks          long    0
30ebc 1ec             | 
30ebc 1ec 00 00 00 00 | pattern         long    0
30ec0 1ed 00 00 00 00 | hubscratch      long    0
30ec4 1ee 00 10 00 00 | val4k           long    4096
30ec8 1ef             | 
30ec8 1ef             | ' temporary general purpose regs
30ec8 1ef 00 00 00 00 | a               long    0
30ecc 1f0 00 00 00 00 | b               long    0
30ed0 1f1 00 00 00 00 | c               long    0
30ed4 1f2 00 00 00 00 | d               long    0
30ed8 1f3             |                 fit     502
30ed8 1f3             | 
30ed8 1f3             |                 fit     502
30ed8 1f3             | 
30ed8 1f3             | '..................................................................................................
30ed8 1f3             | 
30ed8 1f3             |             orgh
30ed8                 | 
30ed8                 | lut_code
30ed8                 | 'HW init code up to 80 longs
30ed8                 | 
30ed8                 | '..................................................................................................
30ed8                 | ' Memory layout for LUT RAM once operational:
30ed8                 | '
30ed8                 | '  LUT RAM address      Usage
30ed8                 | '  ---------------      ----
30ed8                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
30ed8                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
30ed8                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
30ed8                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
30ed8                 | '
30ed8                 | ' Also during driver COG startup:
30ed8                 | ' $230-$24F is used for HW init setup
30ed8                 | ' $250-$26F is used as temporary vector storage 
30ed8                 | '..................................................................................................
30ed8                 | 
30ed8                 |                 org $230    
30ed8 230             | 
30ed8 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
30ed8 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
30edc 231 24 16 60 FD |                             pollxfi
30ee0 232 FF AA 2A FF 
30ee4 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
30ee8 234 28 00 B0 FD |                             call    #sendqspi
30eec 235 07 F8 07 FF 
30ef0 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
30ef4 237 28 00 B0 FD |                             call    #sendspi
30ef8 238 F8 07 78 FF 
30efc 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
30f00 23a 1C 00 B0 FD |                             call    #sendspi
30f04 23b 7F 78 78 FF 
30f08 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
30f0c 23d 10 00 B0 FD |                             call    #sendspi 
30f10 23e 2D 00 64 FD |                             ret
30f14 23f             | 
30f14 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
30f18 240 32 0C 64 FD |                             skipf   #%110
30f1c 241 9C EF 03 F6 |                             mov     pb, xsendimm
30f20 242             | 
30f20 242 10 D0 07 F6 | sendspi                     mov     clks, #16
30f24 243 97 EF 03 F6 |                             mov     pb, ximm8lut
30f28 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
30f2c 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
30f30 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
30f34 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
30f38 248 24 36 60 FD |                             waitxfi                         'wait for the completion
30f3c 249 50 48 63 FD |                             fltl    datapins                'float data bus
30f40 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
30f44 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
30f48 24c             | 
30f48 24c 00 00 00 00 
30f4c 24d 00 00 00 00 
30f50 24e 00 00 00 00 
30f54 24f 00 00 00 00 |                 long    0[$270-32-$]
30f58 250             |                 fit     $270-32  ' keep room for 32 vector longs
30f58 250             |     
30f58 250             |                 fit     $270-32  ' keep room for 32 vector longs
30f58 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
30f58 250             | rw_vect ' PSRAM jump vectors
30f58 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
30f5c 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
30f60 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
30f64 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
30f68 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
30f6c 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
30f70 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
30f74 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
30f78 258             | ro_vect ' R/O PSRAM jump vectors
30f78 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
30f7c 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
30f80 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
30f84 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
30f88 25c 00 01 00 00 |                 long    unsupported
30f8c 25d 00 01 00 00 |                 long    unsupported
30f90 25e 00 01 00 00 |                 long    unsupported
30f94 25f 00 01 00 00 |                 long    unsupported
30f98 260             | ctrl_vect ' Control jump vectors
30f98 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
30f9c 261 00 01 00 00 |                 long    unsupported
30fa0 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
30fa4 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
30fa8 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
30fac 265 00 01 00 00 |                 long    unsupported
30fb0 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
30fb4 267 3E 01 00 00 |                 long    reconfig 
30fb8 268             | no_vect ' Invalid bank jump vectors
30fb8 268 01 01 00 00 |                 long    invalidbank
30fbc 269 01 01 00 00 |                 long    invalidbank
30fc0 26a 01 01 00 00 |                 long    invalidbank
30fc4 26b 01 01 00 00 |                 long    invalidbank
30fc8 26c 01 01 00 00 |                 long    invalidbank
30fcc 26d 01 01 00 00 |                 long    invalidbank
30fd0 26e 01 01 00 00 |                 long    invalidbank
30fd4 26f 01 01 00 00 |                 long    invalidbank
30fd8 270             |                 fit     $270
30fd8 270             | 
30fd8 270             |                 fit     $270
30fd8 270             | '..................................................................................................
30fd8 270             | ' PSRAM READS
30fd8 270             |                                                             ' a b c d e f
30fd8 270             |                                                             ' B W L B R L  (a) byte read
30fd8 270             |                                                             ' Y O O U E O  (b) word read
30fd8 270             |                                                             ' T R N R S C  (c) long read
30fd8 270             |                                                             ' E D G S U K  (d) new burst read
30fd8 270             |                                                             '       T M E  (e) resumed sub-burst
30fd8 270             |                                                             '         E D  (f) locked sub-burst
30fd8 270             | 
30fd8 270             | 
30fd8 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
30fdc 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
30fe0 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
30fe4 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
30fe8 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
30fec 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
30ff0 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
30ff4 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
30ff8 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
30ffc 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
31000 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
31004 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
31008 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
3100c 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
31010 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
31014 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
31018 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
3101c 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
31020 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
31024 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
31028 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
3102c 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
31030 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
31034 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
31038 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
3103c 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
31040 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
31044 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
31048 28c             | 
31048 28c             |                             ' fall through to read bursts
31048 28c             |                         
31048 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
31048 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
3104c 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
31050 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
31054 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
31058 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
3105c 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
31060 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
31064 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
31068 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
3106c 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
31070 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
31074 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
31078 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
3107c 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
31080 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
31084 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
31088 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
3108c 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
31090 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
31094 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
31098 2a0 E8 D1 03 F1 |                             add     clks, clks
3109c 2a1             | readcommon
3109c 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
310a0 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
310a4 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
310a8 2a4             | 
310a8 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
310ac 2a5 69 C8 63 FD |                             rev     cmdaddr
310b0 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
310b4 2a7 61 C8 63 FD |                             mergeb  cmdaddr
310b8 2a8             | 
310b8 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
310bc 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
310c0 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
310c0 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
310c4 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
310c8 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
310cc 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
310d0 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
310d0 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
310d4 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
310d8 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
310dc 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
310e0 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
310e4 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
310e8 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
310e8 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
310ec 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
310f0 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
310f4 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
310f8 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
310fc 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
31100 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
31104 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
31108 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
3110c 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
31110 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
31114 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
31118 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
3111c 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
31120 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
31120 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
31124 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
31128 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
3112c 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
31130 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
31134 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
31138 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
3113c 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
31140 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
31144 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
31148 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
3114c 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
31150 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
31154 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
31158 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
3115c 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
31160 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
31164 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
31168 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
3116c 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
31170 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
31174 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
31178 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
3117c 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
31180 2da 10 03 90 FD |                             jmp     #writecommon
31184 2db             | 
31184 2db             | '..................................................................................................
31184 2db             | ' Burst continuation testing
31184 2db             | 
31184 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
31188 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
3118c 2dd             | continue_read_lut          
3118c 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
31190 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
31194 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
31198 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
3119c 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
311a0 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
311a4 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
311a8 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
311ac 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
311b0 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
311b4 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
311b8 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
311bc 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
311c0 2ea             | 
311c0 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
311c4 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
311c8 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
311cc 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
311d0 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
311d4 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
311d8 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
311dc 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
311e0 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
311e4 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
311e8 2f4 2A 1C 66 0D |             _ret_           push    #poller
311ec 2f5             | 
311ec 2f5             | 
311ec 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
311f0 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
311f0 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
311f4 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
311f8 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
311fc 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
31200 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
31204 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
31208 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
3120c 2fd 2D 00 64 FD |                             ret                             ' | continue processing
31210 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
31214 2ff             | '..................................................................................................
31214 2ff             | ' Completion of requests
31214 2ff             | 
31214 2ff             | complete_rw_lut             
31214 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
31218 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
3121c 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
31220 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
31224 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
31228 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
3122c 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
31230 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
31234 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
31238 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
3123c 309 32 62 64 AD |             if_z            skipf   #%110001
31240 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
31244 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
31248 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
3124c 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
31250 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
31254 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
31258 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
3125c 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
31260 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
31264 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
31268 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
3126c 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
31270 316             |                                                             ' skipcase (a) gfx copy to/from hub
31270 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
31270 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
31270 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
31274 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
31278 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
3127c 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
31280 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
31284 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
31288 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
3128c 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
31290 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
31294 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
31298 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
3129c 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
312a0 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
312a4 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
312a8 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
312ac 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
312b0 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
312b4 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
312b8 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
312bc 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
312c0 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
312c4 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
312c8 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
312cc 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
312d0 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
312d4 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
312d8 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
312dc 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
312e0 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
312e4 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
312e8 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
312ec 335 DF B7 03 A6 |             if_z            mov     addr2, link
312f0 336 34 FF 9F AD |             if_z            jmp     #checknext
312f4 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
312f8 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
312fc 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
31300 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
31304 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
31308 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
3130c 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
31310 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
31314 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
31318 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
3131c 341             | 
3131c 341             | '..................................................................................................
3131c 341             | ' PSRAM WRITES
3131c 341             |                                                             '  a b c d e f g h
3131c 341             | 
3131c 341             |                                                             '  B W L F B R L L (a) byte write(s)
3131c 341             |                                                             '  Y O O I U E O O (b) word write(s)
3131c 341             |                                                             '  T R N L R S C C (c) long write(s)
3131c 341             |                                                             '  E D G L S U K K (d) resumed fill
3131c 341             |                                                             '          T M E E (e) new burst write
3131c 341             |                                                             '            E D D (f) resumed burst
3131c 341             |                                                             '              F B (g) locked fill
3131c 341             |                                                             '              I U (h) locked burst write
3131c 341             |                                                             '              L R 
3131c 341             |                                                             '              L S 
3131c 341             |                                                             '                T 
3131c 341             | 
3131c 341             | w_single                   
3131c 341             | w_fill_cont           
3131c 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
31320 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
31324 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
31328 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
3132c 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
31330 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
31334 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
31338 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
3133c 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
31340 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
31344 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
31348 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
3134c 34d             |                ' disable call to r_resume_burst for single longs when z=0
3134c 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
31350 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
31354 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
31358 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
3135c 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
31360 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
31364 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
31368 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
3136c 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
31370 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
31374 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
31378 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
3137c 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
31380 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
31384 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
31388 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
3138c 35d             |         
3138c 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
3138c 35d             |             '
3138c 35d             |             '  At least one of these 3 optional components will be sent
3138c 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
3138c 35d             |             '     body - N x full longs of data
3138c 35d             |             '     trailer - last partial long of data
3138c 35d             |             '
3138c 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
3138c 35d             |             '
3138c 35d             |             'Case    Type                           Sends
3138c 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
3138c 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
3138c 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
3138c 35d             |             ' 4)     Multiple long fill             body only
3138c 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
3138c 35d             | 
3138c 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
3138c 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
31390 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
31394 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
31398 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3139c 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
313a0 362 13 8C 07 F6 |                             mov     pattern3, #%10011
313a4 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
313a8 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
313ac 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
313b0 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
313b4 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
313b8 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
313bc 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
313c0 36a             |                             
313c0 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
313c4 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
313c8 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
313cc 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
313d0 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
313d4 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
313d8 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
313dc 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
313e0 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
313e4 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
313e8 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
313ec 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
313f0 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
313f4 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
313f8 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
313fc 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
31400 37a             | 
31400 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
31404 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
31408 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
3140c 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
31410 37e             |                  
31410 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
31414 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
31418 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
3141c 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
31420 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
31424 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
31428 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
3142c 385             | 
3142c 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
31430 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
31434 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
31438 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
3143c 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
31440 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
31444 38b             | 
31444 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
31444 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
31448 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
3144c 38d 2A B0 63 FD |                             push    addr1                   'save address
31450 38e             | 
31450 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
31450 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
31454 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
31458 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
3145c 391             |             
3145c 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
31460 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
31464 393 2B B0 63 FD |                             pop     addr1                   'restore address
31468 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
3146c 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
31470 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
31474 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
31478 398             | 
31478 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
3147c 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
31480 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
31484 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
31488 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
3148c 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
31490 39e             | 
31490 39e             |                             'trailer is done
31490 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
31494 39f             | 
31494 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
31498 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3149c 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
314a0 3a2             | 
314a0 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
314a4 3a3 69 C8 63 FD |                             rev     cmdaddr                 
314a8 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
314ac 3a5 61 C8 63 FD |                             mergeb  cmdaddr
314b0 3a6             |                             
314b0 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
314b4 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
314b8 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
314bc 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
314c0 3aa             |                                                          
314c0 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
314c4 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
314c8 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
314cc 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
314d0 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
314d4 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
314d8 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
314dc 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
314e0 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
314e4 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
314e8 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
314ec 3b5             |  
314ec 3b5 59 52 63 FD |                             drvh    cspin
314f0 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
314f4 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
314f8 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
314fc 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
31500 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
31504 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
31508 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
3150c 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
31510 3be EA E5 03 F6 |                             mov     d, orighubsize
31514 3bf EF E5 63 F0 |                             shl     d, a
31518 3c0 F2 E3 83 F1 |                             sub     c, d
3151c 3c1 DD E3 03 F1 |                             add     c, offset1
31520 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
31524 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
31528 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
3152c 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
31530 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
31534 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
31538 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
3153c 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
31540 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
31544 3cb BB D3 03 F6 |                             mov     resume, restorefill
31548 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
3154c 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
31550 3ce 6C FC BF CD |             if_c            call    #yield
31554 3cf 2D 00 64 FD |                             ret
31558 3d0             |                            
31558 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
31558 3d0             |                       '     rczl    pa                      'rotate left into address offset
31558 3d0             |                       '     rczl    c wcz                   'restore count and flags
31558 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
3155c 3d1 02 EC 67 F0 |                             shl     pa, #2
31560 3d2 28 06 64 AD |             if_z            setq    #3
31564 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
31568 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
3156c 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
31570 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
31574 3d7             | 
31574 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
31578 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
3157c 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
31580 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
31584 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
31588 3dc             |                 fit 1024-32
31588 3dc             |         
31588 3dc             | 
31588 3dc             | '..................................................................................................
31588 3dc             | 
31588 3dc             |                 fit 1024-32
31588 3dc 00 00 00 00 
3158c 3dd 00 00 00 00 
31590 3de 00 00 00 00 
31594 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
31598 3e0             |                 org 1024-32
31598 000             | 
31598 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
31598 000 00 00 00 00 |                 long $0000
3159c 001 11 11 00 00 |                 long $1111
315a0 002 22 22 00 00 |                 long $2222
315a4 003 33 33 00 00 |                 long $3333
315a8 004 44 44 00 00 |                 long $4444
315ac 005 55 55 00 00 |                 long $5555
315b0 006 66 66 00 00 |                 long $6666
315b4 007 77 77 00 00 |                 long $7777
315b8 008 88 88 00 00 |                 long $8888
315bc 009 99 99 00 00 |                 long $9999
315c0 00a AA AA 00 00 |                 long $aaaa
315c4 00b BB BB 00 00 |                 long $bbbb
315c8 00c CC CC 00 00 |                 long $cccc
315cc 00d DD DD 00 00 |                 long $dddd
315d0 00e EE EE 00 00 |                 long $eeee
315d4 00f FF FF 00 00 |                 long $ffff
315d8 010             | 
315d8 010             | 'masks
315d8 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
315dc 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
315e0 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
315e4 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
315e8 014             | 
315e8 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
315ec 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
315f0 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
315f4 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
315f8 018             | 
315f8 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
315fc 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
31600 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
31604 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
31608 01c             | 
31608 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
3160c 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
31610 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
31614 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
31618 020             |         fit 1024
31618 020             | 
31618 020             |         fit 1024
31618 020             | 
31618 020             | '--------------------------------------------------------------------------------------------------
31618 020             |         orgh
31618                 | 
31618                 | gfxexpansion
31618                 |                             'simple line drawing graphics expansion of memory driver
31618                 |                             'jmp     #donerepeats                'just return for now
31618                 | 
31618     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
3161c     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
31620     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
31624     DD E1 03 F6 |                             mov     b, offset1              'get error term
31628     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
3162c     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
31630     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
31634     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
31638     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
3163c     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
31640     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
31644     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
31648     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
3164c     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
31650     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
31654     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
31658     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
3165c     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
31660     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
31664     DC E5 33 F9 |                             getword d, total, #0            'get line width
31668     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
3166c     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
31670     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
31674     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
31678     C3 03 80 FD |                             jmp     #readmask               'continue filling
3167c                 | 	alignl
3167c                 | _usbnew_spin2_dat_
3167c                 |                 org     $000
3167c 000             | 
3167c 000             | usb_host_start
3167c 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
31680 001             | 
31680 001 03 00 00 FF 
31684 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
31688 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
3168c 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
31690 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
31694 006 29 70 63 FD |                 setq2   htmp
31698 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
3169c 008             | 
3169c 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
316a0 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
316a4 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
316a8 00b             | 
316a8 00b             | '------------------------------------------------------------------------------
316a8 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
316a8 00b             | ' special because the receiving function must not respond with either STALL or
316a8 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
316a8 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
316a8 00b             | ' corrupt packet, it must ignore the transaction
316a8 00b             | '------------------------------------------------------------------------------
316a8 00b             | ' On entry:
316a8 00b             | '   PTRA - start address of the SETUP data struct.
316a8 00b             | ' On exit:
316a8 00b             | '   retval - PID_ACK on success, otherwise error code.
316a8 00b             | '------------------------------------------------------------------------------
316a8 00b             | txn_setup
316a8 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
316ac 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
316b0 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
316b4 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
316b8 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
316bc 010             | .setup
316bc 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
316c0 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
316c4 012 2D 00 64 AD |         if_z    ret
316c8 013 7C 0B B0 FD |                 call    #retry_wait
316cc 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
316d0 015 2D 00 64 AD |         if_z    ret
316d4 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
316d8 017 E0 FF 9F FD |                 jmp     #.setup
316dc 018             | 
316dc 018             | '------------------------------------------------------------------------------
316dc 018             | ' IN/INTERRUPT transaction.
316dc 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
316dc 018             | '------------------------------------------------------------------------------
316dc 018             | ' On entry:
316dc 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
316dc 018             | '     CRC(b19..23).
316dc 018             | ' On exit:
316dc 018             | '------------------------------------------------------------------------------
316dc 018             | txn_in
316dc 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
316e0 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
316e4 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
316e8 01b             | 
316e8 01b             |                 ' Fall through to urx_packet
316e8 01b             | 
316e8 01b             | '------------------------------------------------------------------------------
316e8 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
316e8 01b             | ' received are handshakes and IN DATAx.
316e8 01b             | '------------------------------------------------------------------------------
316e8 01b             | ' On entry:
316e8 01b             | ' On exit:
316e8 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
316e8 01b             | '     returned.
316e8 01b             | '------------------------------------------------------------------------------
316e8 01b             | urx_packet
316e8 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
316ec 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
316f0 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
316f4 01e 1A 92 63 FD |                 getct   hct2
316f8 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
316fc 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
31700 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
31704 022             | .wait_sop
31704 022 22 A7 8A FA |                 rdpin   urx, dm
31708 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3170c 024 08 00 90 CD |         if_c    jmp     #.get_pid
31710 025 FC 25 CC FB |                 jnct2   #.wait_sop
31714 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
31718 027             | .get_pid
31718 027 28 02 B0 FD |                 call    #urx_next
3171c 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
31720 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
31724 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
31728 02b             | .chk_pid
31728 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3172c 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
31730 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
31734 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
31738 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
3173c 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
31740 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
31744 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
31748 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
3174c 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
31750 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
31754 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
31758 037             | .ack_resend
31758 037 22 A7 82 FA |                 rqpin   urx, dm
3175c 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
31760 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
31764 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
31768 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
3176c 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
31770 03d             | .chk_eop
31770 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
31774 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
31778 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
3177c 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
31780 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
31784 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
31788 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
3178c 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
31790 045 2D 00 64 FD |                 ret
31794 046             | .idle
31794 046 22 A7 82 FA |                 rqpin   urx, dm
31798 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3179c 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
317a0 049 2D 00 64 FD |                 ret
317a4 04a             | 
317a4 04a             | '------------------------------------------------------------------------------
317a4 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
317a4 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
317a4 04a             | ' if one is required.
317a4 04a             | '------------------------------------------------------------------------------
317a4 04a             | ' On entry:
317a4 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
317a4 04a             | ' On exit:
317a4 04a             | '------------------------------------------------------------------------------
317a4 04a             | utx_token
317a4 04a 22 A7 82 FA |                 rqpin   urx, dm
317a8 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
317ac 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
317b0 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
317b4 04e 34 0D B0 CD |         if_c    call    #utx_pre
317b8 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
317bc 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
317c0 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
317c4 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
317c8 053             | .next_byte
317c8 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
317cc 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
317d0 055             | .wait
317d0 055 40 46 72 FD |                 testp   dp                      wc
317d4 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
317d8 057 23 03 08 FC |                 akpin   dp
317dc 058 22 A5 22 FC |                 wypin   utx, dm
317e0 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
317e4 05a             | 
317e4 05a             | '------------------------------------------------------------------------------
317e4 05a             | ' SETUP/OUT/INTERRUPT transaction.
317e4 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
317e4 05a             | '------------------------------------------------------------------------------
317e4 05a             | ' On entry:
317e4 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
317e4 05a             | '     CRC(b19..23).
317e4 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
317e4 05a             | '   pkt_data - count of DATAx payload bytes to send.
317e4 05a             | ' On exit:
317e4 05a             | '------------------------------------------------------------------------------
317e4 05a             | txn_out
317e4 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
317e8 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
317ec 05c 00 00 C0 FF 
317f0 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
317f4 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
317f8 05f             | 
317f8 05f             |                 ' Fall through to utx_data
317f8 05f             | 
317f8 05f             | '------------------------------------------------------------------------------
317f8 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
317f8 05f             | ' calculated while the data byte is being shifted out. Since data stage
317f8 05f             | ' success/fail is not determined until the status stage of the transaction,
317f8 05f             | ' this routine is only concerned about the current DATAx packet.
317f8 05f             | '------------------------------------------------------------------------------
317f8 05f             | ' On entry:
317f8 05f             | '   PTRA - hub start address of the data to read.
317f8 05f             | '   pkt_cnt - data payload size.
317f8 05f             | ' On exit:
317f8 05f             | '------------------------------------------------------------------------------
317f8 05f             | utx_data
317f8 05f 22 A7 82 FA |                 rqpin   urx, dm
317fc 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
31800 061 F4 FF 9F CD |         if_c    jmp     #utx_data
31804 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
31808 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
3180c 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
31810 065 D8 0C B0 CD |         if_c    call    #utx_pre
31814 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
31818 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
3181c 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
31820 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
31824 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
31828 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
3182c 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
31830 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
31834 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
31838 06f             | .read_byte
31838 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
3183c 070 F0 00 B0 FD |                 call    #utx_byte
31840 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
31844 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
31848 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3184c 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
31850 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
31854 076             | .send_crc
31854 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
31858 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
3185c 078 D0 00 B0 FD |                 call    #utx_byte
31860 079 5D A5 EA F8 |                 getbyte utx, crc, #1
31864 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
31868 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
3186c 07c             | 
3186c 07c             | '------------------------------------------------------------------------------
3186c 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
3186c 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
3186c 07c             | ' expects that the packet includes at least the CRC word.
3186c 07c             | '
3186c 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
3186c 07c             | ' was requested, which makes it difficult to determine where the data stops
3186c 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
3186c 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
3186c 07c             | ' USB-16 expected residual value of 0xB001.
3186c 07c             | '
3186c 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
3186c 07c             | ' so the caller can verify IN success before writing the data to its final
3186c 07c             | ' destination.
3186c 07c             | '------------------------------------------------------------------------------
3186c 07c             | ' On entry:
3186c 07c             | '   pkt_data - max byte count expected to be in the packet.
3186c 07c             | '   newb_flg - signals new byte ready when toggled.
3186c 07c             | ' On exit:
3186c 07c             | '   pkt_cnt - actual number of bytes read.
3186c 07c             | '------------------------------------------------------------------------------
3186c 07c             | urx_data
3186c 07c F7 75 03 F6 |                 mov     htmp2, pb
31870 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
31874 07e 00 00 C0 FF 
31878 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
3187c 080 BA EF 03 F6 |                 mov     pb, htmp2
31880 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
31884 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
31888 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
3188c 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
31890 085             | .wait_byte
31890 085             | ' In-line rx for max speed
31890 085 22 A7 82 FA |                 rqpin   urx, dm
31894 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
31898 087 53 A5 02 F5 |                 and     utx, urx
3189c 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
318a0 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
318a4 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
318a8 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
318ac 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
318b0 08d DC FF 9F FD |                 jmp     #.wait_byte
318b4 08e             | .get_byte
318b4 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
318b8 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
318bc 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
318c0 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
318c4 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
318c8 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
318cc 094             | .end_crc
318cc 094 01 B8 06 F1 |                 add     pkt_cnt, #1
318d0 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
318d4 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
318d8 097 2D 00 64 1D |         if_a    ret
318dc 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
318dc 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
318dc 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
318dc 098             | ' to miss it, so cheat a bit and look for SOP clear here.
318dc 098 22 A7 82 FA |                 rqpin   urx, dm
318e0 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
318e4 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
318e8 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
318e8 09b             | .chk_crc
318e8 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
318ec 09c 58 00 00 FF 
318f0 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
318f4 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
318f8 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
318fc 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
31900 0a1 34 09 B0 FD |                 call    #poll_waitx
31904 0a2             | 
31904 0a2             |                 ' Fall through to utx_handshake
31904 0a2             | 
31904 0a2             | '------------------------------------------------------------------------------
31904 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
31904 0a2             | ' the appropriate IP delay has been inserted.
31904 0a2             | '------------------------------------------------------------------------------
31904 0a2             | ' On entry:
31904 0a2             | '   retval - handshake PID to send.
31904 0a2             | ' On exit:
31904 0a2             | '   retval unchanged.
31904 0a2             | '------------------------------------------------------------------------------
31904 0a2             | utx_handshake
31904 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
31908 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
3190c 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
31910 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
31914 0a6 5F A5 02 F6 |                 mov     utx, retval
31918 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
3191c 0a8             | .idle
3191c 0a8 22 A7 82 FA |                 rqpin   urx, dm
31920 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
31924 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
31928 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
3192c 0ac 08 09 90 FD |                 jmp     #poll_waitx
31930 0ad             | 
31930 0ad             | '------------------------------------------------------------------------------
31930 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
31930 0ad             | '------------------------------------------------------------------------------
31930 0ad             | ' On entry:
31930 0ad             | '   utx - byte to transmit.
31930 0ad             | ' On exit:
31930 0ad             | '------------------------------------------------------------------------------
31930 0ad             | utx_byte
31930 0ad 40 46 72 FD |                 testp   dp                      wc
31934 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
31938 0af 23 03 08 FC |                 akpin   dp
3193c 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
31940 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
31944 0b2             | 
31944 0b2             | '------------------------------------------------------------------------------
31944 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
31944 0b2             | '------------------------------------------------------------------------------
31944 0b2             | ' On entry:
31944 0b2             | ' On exit:
31944 0b2             | '   retval - the byte read.
31944 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
31944 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
31944 0b2             | '     received.
31944 0b2             | '------------------------------------------------------------------------------
31944 0b2             | urx_next
31944 0b2 22 A7 8A FA |                 rdpin   urx, dm
31948 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3194c 0b4 53 A5 02 F5 |                 and     utx, urx
31950 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
31954 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
31958 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
3195c 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
31960 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
31964 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
31968 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
3196c 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
31970 0bd 2D 00 64 FD |                 ret
31974 0be             | 
31974 0be             | '------------------------------------------------------------------------------
31974 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
31974 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
31974 0be             | ' length, and the PID is not included in the CRC calculation:
31974 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
31974 0be             | '  CRC5  ENDP ADDRESS PID
31974 0be             | ' %00000_1111_1111111_xxxxxxxx
31974 0be             | '------------------------------------------------------------------------------
31974 0be             | ' On entry:
31974 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
31974 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
31974 0be             | ' On exit:
31974 0be             | '   ep_addr_pid - CRC value appended to the packet.
31974 0be             | '------------------------------------------------------------------------------
31974 0be             | calc_crc5
31974 0be FF 03 00 FF 
31978 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
3197c 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
31980 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
31984 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
31988 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
3198c 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
31990 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
31994 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
31998 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
3199c 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
319a0 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
319a4 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
319a8 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
319ac 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
319b0 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
319b4 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
319b8 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
319bc 0d0             | 
319bc 0d0             | '------------------------------------------------------------------------------
319bc 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
319bc 0d0             | '------------------------------------------------------------------------------
319bc 0d0             | isr1_fsframe
319bc 0d0 1A 92 62 FD |                 getct   iframe_ct_base
319c0 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
319c4 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
319c8 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
319cc 0d4             | .wait
319cc 0d4 40 46 72 FD |                 testp   dp                      wc
319d0 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
319d4 0d6 23 03 08 FC |                 akpin   dp
319d8 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
319dc 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
319e0 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
319e4 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
319e8 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
319ec 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
319f0 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
319f4 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
319f8 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
319fc 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
31a00 0e1 2C FF BF FD |                 call    #utx_byte
31a04 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
31a08 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
31a0c 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
31a10 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
31a14 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
31a18 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
31a1c 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
31a20 0e9 5B A5 42 F5 |                 or      utx, icrc
31a24 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
31a28 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
31a2c 0ec 20 00 90 FD |                 jmp     #isr1_wait
31a30 0ed             | isr1_lsframe
31a30 0ed 1A 92 62 FD |                 getct   iframe_ct_base
31a34 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
31a38 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
31a3c 0f0             | .wait
31a3c 0f0 40 46 72 FD |                 testp   dp                      wc
31a40 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
31a44 0f2 23 03 08 FC |                 akpin   dp
31a48 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
31a4c 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
31a50 0f5             | isr1_wait
31a50 0f5 22 A5 82 FA |                 rqpin   utx, dm
31a54 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
31a58 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
31a5c 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
31a60 0f9 03 00 00 FF 
31a64 0fa FF B3 06 F5 |                 and     frame, ##$7ff
31a68 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
31a6c 0fc F5 FF 3B FB |                 reti1
31a70 0fd             | 
31a70 0fd             | '------------------------------------------------------------------------------
31a70 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
31a70 0fd             | ' transaction will complete before the next frame is triggered.
31a70 0fd             | '------------------------------------------------------------------------------
31a70 0fd             | ' On entry:
31a70 0fd             | ' On exit:
31a70 0fd             | '------------------------------------------------------------------------------
31a70 0fd             | wait_txn_ok
31a70 0fd 1A 74 63 FD |                 getct   htmp2
31a74 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
31a78 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
31a7c 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
31a80 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
31a84 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
31a88 103 2D 00 64 FD |                 ret
31a8c 104             | 
31a8c 104             | '------------------------------------------------------------------------------
31a8c 104             | ' A device connection was detected, or a bus reset was requested by the USB
31a8c 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
31a8c 104             | ' and perform a reset sequence prior to device enumeration.
31a8c 104             | '------------------------------------------------------------------------------
31a8c 104             | dev_reset
31a8c 104 22 A7 82 FA |                 rqpin   urx, dm
31a90 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
31a94 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
31a98 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
31a9c 108             | reset
31a9c 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
31aa0 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
31aa4 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
31aa8 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
31aac 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
31ab0 10d 1A 92 62 FD |                 getct   iframe_ct_base
31ab4 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
31ab8 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
31abc 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
31ac0 111 24 70 07 F1 |                 add     htmp, #36
31ac4 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
31ac8 113             | .framewait
31ac8 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
31acc 114 F8 FF 9F CD |         if_b    jmp     #.framewait
31ad0 115 2D 00 64 FD |                 ret
31ad4 116             | 
31ad4 116             | '------------------------------------------------------------------------------
31ad4 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
31ad4 116             | '------------------------------------------------------------------------------
31ad4 116             | ' On entry:
31ad4 116             | '   PTRA - source address.
31ad4 116             | '   PB - destination address.
31ad4 116             | '   hr0 - length of copy, in bytes.
31ad4 116             | ' On exit:
31ad4 116             | '------------------------------------------------------------------------------
31ad4 116             | hmemcpy
31ad4 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
31ad8 117 F7 71 43 FC |                 wrbyte  htmp, pb
31adc 118 01 EE 07 F1 |                 add     pb, #1
31ae0 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
31ae4 11a             | 
31ae4 11a             | '------------------------------------------------------------------------------
31ae4 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
31ae4 11a             | ' loop until the errant device is disconnected.
31ae4 11a             | '------------------------------------------------------------------------------
31ae4 11a             | ' On entry:
31ae4 11a             | ' On exit:
31ae4 11a             | '------------------------------------------------------------------------------
31ae4 11a             | host_error
31ae4 11a             |           if ERROR_LED >= 0
31ae4 11a             |           end
31ae4 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
31ae8 11b             | 
31ae8 11b             | '------------------------------------------------------------------------------
31ae8 11b             | ' Get HID descriptor buffer for current port
31ae8 11b             | '------------------------------------------------------------------------------
31ae8 11b             | ' On entry:
31ae8 11b             | ' On exit:
31ae8 11b             | '   PB - HID descriptor buffer pointer
31ae8 11b             | '------------------------------------------------------------------------------
31ae8 11b             | get_hid_descr_buffer
31ae8 11b 2D EF 03 F6 |                 mov     pb, hdev_port
31aec 11c 01 EE E7 F2 |                 cmpsub  pb, #1
31af0 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
31af4 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
31af8 11f             | 
31af8 11f             | 
31af8 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
31afc 120             | 
31afc 120             | ' USB commands and error codes
31afc 120 00 00 00 00 | cmd_data        long    0
31b00 121 00 00 00 00 | usb_err_code    long    ERR_NONE
31b04 122             | 
31b04 122             | ' Parameters block assigned at cog startup
31b04 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
31b08 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
31b0c 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
31b10 125             | if ACTIVITY_LED >= 0
31b10 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
31b10 125             | end
31b10 125             | if ERROR_LED >= 0
31b10 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
31b10 125             | end
31b10 125 00 00 00 00 | hid_descr_p     long    0
31b14 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
31b14 126             | 'hkbd_report_p   long    0
31b14 126 00 00 00 00 | hub_descr_p     long    0
31b18 127 00 00 00 00 | urx_buff_p      long    0
31b1c 128 00 00 00 00 | dev_desc_buff_p long    0
31b20 129 00 00 00 00 | con_desc_buff_p long    0
31b24 12a 00 00 00 00 | cache_start_p   long    0
31b28 12b 00 00 00 00 | cache_end_p     long    0
31b2c 12c             | if EMUPAD_MAX_PLAYER > 0
31b2c 12c             | emupad_out_ptr  long    0
31b2c 12c             | end
31b2c 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
31b30 12d             | 
31b30 12d             | hdev_init_start
31b30 12d             | hdev_port       res     1
31b30 12d             | hdev_port       res     1
31b30 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
31b30 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
31b30 12d             | kbm_next_datax  res     1
31b30 12d             | kbm_next_datax  res     1
31b30 12d             | hub_intf_num    res     1
31b30 12d             | hub_intf_num    res     1
31b30 12d             | hub_next_datax  res     1
31b30 12d             | hub_next_datax  res     1
31b30 12d             | hub_status_chg  res     1
31b30 12d             | hub_status_chg  res     1
31b30 12d             | hub_port_status res     1
31b30 12d             | hub_port_status res     1
31b30 12d             | if HAVE_MOUSE
31b30 12d             | ms_intf_num     res     1
31b30 12d             | ms_intf_num     res     1
31b30 12d             | ms_in_max_pkt   res     1
31b30 12d             | ms_in_max_pkt   res     1
31b30 12d             | end
31b30 12d             | kb_intf_num     res     1
31b30 12d             | kb_intf_num     res     1
31b30 12d             | kb_interval     res     1
31b30 12d             | kb_interval     res     1
31b30 12d             | kb_in_max_pkt   res     1
31b30 12d             | kb_in_max_pkt   res     1
31b30 12d             | kb_max_index    res     1
31b30 12d             | kb_max_index    res     1
31b30 12d             | kb_led_states   res     1
31b30 12d             | kb_led_states   res     1
31b30 12d             | gp_intf_num     res     1
31b30 12d             | gp_intf_num     res     1
31b30 12d             | gp_interval     res     1
31b30 12d             | gp_interval     res     1
31b30 12d             | gp_max_index    res     1
31b30 12d             | gp_max_index    res     1
31b30 12d             | gp_descr_len    res     1+MAX_DEVICES
31b30 12d             | gp_descr_len    res     1+MAX_DEVICES
31b30 12d             | hdev_init_end
31b30 12d             | 
31b30 12d             | ' Initialized at cog startup:
31b30 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
31b30 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
31b30 12d             | iframe_ct_new   res     1
31b30 12d             | iframe_ct_new   res     1
31b30 12d             | iframe_ct_base  res     1
31b30 12d             | iframe_ct_base  res     1
31b30 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
31b30 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
31b30 12d             | 
31b30 12d             | ' This register block is reset to zero when a USB device connects
31b30 12d             | hreg_init_start
31b30 12d             | hstatus         res     1         ' Host status flags
31b30 12d             | hstatus         res     1         ' Host status flags
31b30 12d             | hctwait         res     1         ' Poll-based wait clocks
31b30 12d             | hctwait         res     1         ' Poll-based wait clocks
31b30 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
31b30 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
31b30 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
31b30 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
31b30 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
31b30 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
31b30 12d             | xfer_retry      res     1         ' Control transfer retry count
31b30 12d             | xfer_retry      res     1         ' Control transfer retry count
31b30 12d             | retry           res     1         ' Transaction retry count
31b30 12d             | retry           res     1         ' Transaction retry count
31b30 12d             | utx             res     1         ' Byte to transmit on USB
31b30 12d             | utx             res     1         ' Byte to transmit on USB
31b30 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
31b30 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
31b30 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
31b30 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
31b30 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
31b30 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
31b30 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
31b30 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
31b30 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
31b30 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
31b30 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
31b30 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
31b30 12d             | frame           res     1         ' USB 1ms frame counter value
31b30 12d             | frame           res     1         ' USB 1ms frame counter value
31b30 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
31b30 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
31b30 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
31b30 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
31b30 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
31b30 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
31b30 12d             | crc             res     1         ' Used for CRC16 calculation
31b30 12d             | crc             res     1         ' Used for CRC16 calculation
31b30 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
31b30 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
31b30 12d             | retval          res     1         ' Global success/fail return parameter
31b30 12d             | retval          res     1         ' Global success/fail return parameter
31b30 12d             | context_retval  res     1         ' Operation contextual return parameter
31b30 12d             | context_retval  res     1         ' Operation contextual return parameter
31b30 12d             | ' Device stuff
31b30 12d             | hdev_id         res     1+MAX_DEVICES
31b30 12d             | hdev_id         res     1+MAX_DEVICES
31b30 12d             | hdev_bcd        res     1
31b30 12d             | hdev_bcd        res     1
31b30 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
31b30 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
31b30 12d             | ' Keyboard/mouse stuff
31b30 12d             | hctrl_ep_addr   res     1
31b30 12d             | hctrl_ep_addr   res     1
31b30 12d             | hctrl_max_pkt   res     1
31b30 12d             | hctrl_max_pkt   res     1
31b30 12d             | hconfig_base    res     1
31b30 12d             | hconfig_base    res     1
31b30 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
31b30 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
31b30 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
31b30 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
31b30 12d             | hdev_class      res     1
31b30 12d             | hdev_class      res     1
31b30 12d             | hdev_subclass   res     1
31b30 12d             | hdev_subclass   res     1
31b30 12d             | hdev_protocol   res     1
31b30 12d             | hdev_protocol   res     1
31b30 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
31b30 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
31b30 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
31b30 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
31b30 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
31b30 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
31b30 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
31b30 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
31b30 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
31b30 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
31b30 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
31b30 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
31b30 12d             | if HAVE_MOUSE
31b30 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
31b30 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
31b30 12d             | end
31b30 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
31b30 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
31b30 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
31b30 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
31b30 12d             | hdev_ep_addr    res     1+MAX_DEVICES
31b30 12d             | hdev_ep_addr    res     1+MAX_DEVICES
31b30 12d             | hdev_out_addr   res     1
31b30 12d             | hdev_out_addr   res     1
31b30 12d             | 
31b30 12d             | if EMUPAD_MAX_PLAYER > 0
31b30 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
31b30 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
31b30 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
31b30 12d             | end
31b30 12d             | 
31b30 12d             | hreg_init_end
31b30 12d             | 
31b30 12d             | hidr_start
31b30 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
31b30 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
31b30 12d             | hidr_flags      res     1
31b30 12d             | hidr_flags      res     1
31b30 12d             | hidr_axis       res     3
31b30 12d             | hidr_axis       res     3
31b30 12d             | hidr_buttons    res     1
31b30 12d             | hidr_buttons    res     1
31b30 12d             | hidr_hats       res     1
31b30 12d             | hidr_hats       res     1
31b30 12d             | '' Above are actually useful values, 6 longs
31b30 12d             | hidr_id         res     1
31b30 12d             | hidr_id         res     1
31b30 12d             | hidr_state      res     1
31b30 12d             | hidr_state      res     1
31b30 12d             | hidr_size       res     1
31b30 12d             | hidr_size       res     1
31b30 12d             | hidr_count      res     1
31b30 12d             | hidr_count      res     1
31b30 12d             | hidr_offset     res     1
31b30 12d             | hidr_offset     res     1
31b30 12d             | hidr_usage_idx  res     1
31b30 12d             | hidr_usage_idx  res     1
31b30 12d             | hidr_lminmax    res     1
31b30 12d             | hidr_lminmax    res     1
31b30 12d             | hidr_pminmax    res     1
31b30 12d             | hidr_pminmax    res     1
31b30 12d             | hidr_type       res     1
31b30 12d             | hidr_type       res     1
31b30 12d             | hidr_end
31b30 12d             | 
31b30 12d             | ' Variables dependent on the system freqency
31b30 12d             | _var_64_lower_  res     1
31b30 12d             | _var_64_lower_  res     1
31b30 12d             | _var_64_upper_  res     1
31b30 12d             | _var_64_upper_  res     1
31b30 12d             | _12Mbps_        res     1
31b30 12d             | _12Mbps_        res     1
31b30 12d             | _1_5Mbps_       res     1
31b30 12d             | _1_5Mbps_       res     1
31b30 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
31b30 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
31b30 12d             | _1us_           res     1         ' 1us
31b30 12d             | _1us_           res     1         ' 1us
31b30 12d             | _10us_          res     1         ' 10us
31b30 12d             | _10us_          res     1         ' 10us
31b30 12d             | _33us_          res     1         ' 33us
31b30 12d             | _33us_          res     1         ' 33us
31b30 12d             | _txn_err_       res     1         ' 250us
31b30 12d             | _txn_err_       res     1         ' 250us
31b30 12d             | _500us_         res     1         ' 500us
31b30 12d             | _500us_         res     1         ' 500us
31b30 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
31b30 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
31b30 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
31b30 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
31b30 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
31b30 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
31b30 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
31b30 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
31b30 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
31b30 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
31b30 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
31b30 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
31b30 12d             | _preamble_wait_ res     1
31b30 12d             | _preamble_wait_ res     1
31b30 12d             | _1ms_           res     1         ' 1ms
31b30 12d             | _1ms_           res     1         ' 1ms
31b30 12d             | _2ms_           res     1         ' 2ms
31b30 12d             | _2ms_           res     1         ' 2ms
31b30 12d             | _suspend_wait_  res     1         ' 3ms
31b30 12d             | _suspend_wait_  res     1         ' 3ms
31b30 12d             | _4ms_           res     1         ' 4ms
31b30 12d             | _4ms_           res     1         ' 4ms
31b30 12d             | _xfer_wait_     res     1         ' 5ms
31b30 12d             | _xfer_wait_     res     1         ' 5ms
31b30 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
31b30 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
31b30 12d             | _reset_hold_    res     1         ' 15ms
31b30 12d             | _reset_hold_    res     1         ' 15ms
31b30 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
31b30 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
31b30 12d             | _21ms_          res     1         ' 21ms
31b30 12d             | _21ms_          res     1         ' 21ms
31b30 12d             | _100ms_         res     1         ' 100ms
31b30 12d             | _100ms_         res     1         ' 100ms
31b30 12d             | _500ms_         res     1         ' 500ms
31b30 12d             | _500ms_         res     1         ' 500ms
31b30 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
31b30 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
31b30 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
31b30 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
31b30 12d             | '------------------------------------------------------------------------------
31b30 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
31b30 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
31b30 12d             | _usb_d_ls_nco_  res     1
31b30 12d             | _usb_d_ls_nco_  res     1
31b30 12d             | _usb_h_fs_nco_  res     1
31b30 12d             | _usb_h_fs_nco_  res     1
31b30 12d             | _usb_d_fs_nco_  res     1
31b30 12d             | _usb_d_fs_nco_  res     1
31b30 12d             | '------------------------------------------------------------------------------
31b30 12d             | ' Scratch registers
31b30 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
31b30 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
31b30 12d             | htmp1           res     1
31b30 12d             | htmp1           res     1
31b30 12d             | htmp2           res     1
31b30 12d             | htmp2           res     1
31b30 12d             | htmp3           res     1
31b30 12d             | htmp3           res     1
31b30 12d             | hrep            res     1         ' Repeat count
31b30 12d             | hrep            res     1         ' Repeat count
31b30 12d             | hsave0          res     1         ' Subroutine parameter saves
31b30 12d             | hsave0          res     1         ' Subroutine parameter saves
31b30 12d             | hsave1          res     1
31b30 12d             | hsave1          res     1
31b30 12d             | hsave2          res     1
31b30 12d             | hsave2          res     1
31b30 12d             | isrtmp1         res     1
31b30 12d             | isrtmp1         res     1
31b30 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
31b30 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
31b30 12d             | hr0             res     1         ' Multi-purpose registers
31b30 12d             | hr0             res     1         ' Multi-purpose registers
31b30 12d             | hr1             res     1
31b30 12d             | hr1             res     1
31b30 12d             | hr2             res     1
31b30 12d             | hr2             res     1
31b30 12d             | hr3             res     1
31b30 12d             | hr3             res     1
31b30 12d             | hpar1           res     1         ' Routine entry/exit parameters
31b30 12d             | hpar1           res     1         ' Routine entry/exit parameters
31b30 12d             | hpar2           res     1
31b30 12d             | hpar2           res     1
31b30 12d             | hpar3           res     1
31b30 12d             | hpar3           res     1
31b30 12d             | hct2            res     1         ' Function response bus turn-around timer
31b30 12d             | hct2            res     1         ' Function response bus turn-around timer
31b30 12d             | hct3            res     1         ' Keyboard/mouse poll timer
31b30 12d             | hct3            res     1         ' Keyboard/mouse poll timer
31b30 12d             | mod_cnt         res     1         ' Used in idle loops
31b30 12d             | mod_cnt         res     1         ' Used in idle loops
31b30 12d             |                 fit     $1F0
31b30 12d             |                 org     $200
31b30 200             | hlut_start
31b30 200             | 
31b30 200             | '------------------------------------------------------------------------------
31b30 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
31b30 200             | ' settings to startup defaults.
31b30 200             | '------------------------------------------------------------------------------
31b30 200             | ' On entry:
31b30 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
31b30 200             | '------------------------------------------------------------------------------
31b30 200             | set_speed_full
31b30 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
31b34 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
31b38 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
31b3c 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
31b40 204             | '                ret                             wcz     ' Restore caller flags on exit
31b40 204             | 
31b40 204             | '------------------------------------------------------------------------------
31b40 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
31b40 204             | ' is a downstream hub connected (not yet implemented), the baud generator
31b40 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
31b40 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
31b40 204             | ' putting the smart pins into reset.
31b40 204             | '------------------------------------------------------------------------------
31b40 204             | ' On entry:
31b40 204             | ' On exit: CZ flags restored to caller states
31b40 204             | '------------------------------------------------------------------------------
31b40 204             | set_speed_low
31b40 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
31b44 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
31b48 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
31b4c 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
31b50 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
31b54 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
31b58 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
31b5c 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
31b60 20c             | 
31b60 20c             | '------------------------------------------------------------------------------
31b60 20c             | ' Perform configuration stuff required when a device intitially connects.
31b60 20c             | '------------------------------------------------------------------------------
31b60 20c             | ' On entry:
31b60 20c             | ' On exit:
31b60 20c             | '------------------------------------------------------------------------------
31b60 20c             | on_connect
31b60 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
31b64 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
31b68 20e             | .retry
31b68 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
31b6c 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
31b70 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
31b74 211 00 08 00 FF 
31b78 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
31b7c 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
31b80 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
31b84 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
31b88 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
31b8c 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
31b90 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
31b94 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
31b98 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
31b9c 21b 4C 03 B0 FD |                 call    #poll_waitx
31ba0 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
31ba4 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
31ba8 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
31bac 21f B8 FF 9F FD |                 jmp     #.retry
31bb0 220             | .get_dev_desc
31bb0 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
31bb4 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
31bb8 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
31bbc 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
31bc0 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
31bc4 225 88 FB BF FD |                 call    #reset
31bc8 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
31bcc 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
31bd0 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
31bd4 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
31bd8 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
31bdc 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
31be0 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
31be4 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
31be8 22e 04 00 00 FF 
31bec 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
31bf0 230 34 FA BF FD |                 call    #calc_crc5
31bf4 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
31bf8 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
31bfc 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
31c00 234 F7 AD C2 FA |                 rdbyte  total_data, pb
31c04 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
31c08 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
31c0c 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
31c10 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
31c14 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
31c18 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
31c1c 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
31c20 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
31c24 23d C4 02 B0 FD |                 call    #poll_waitx
31c28 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
31c2c 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
31c30 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
31c34 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
31c38 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
31c3c 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
31c40 244 2D 00 64 5D |         if_nz   ret
31c44 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
31c48 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
31c4c 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
31c50 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
31c54 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
31c58 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
31c5c 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
31c60 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
31c64 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
31c68 24e 2C FB 9F CD |         if_b    jmp     #host_error
31c6c 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
31c70 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
31c74 251 2D EC 63 FD |                 call    pa
31c78 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
31c7c 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
31c80 254 2C EC 63 FD |                 jmp     pa
31c84 255             | 
31c84 255             | '------------------------------------------------------------------------------
31c84 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
31c84 255             | ' Status reporting is always in the function-to-host direction.
31c84 255             | '------------------------------------------------------------------------------
31c84 255             | ' On entry:
31c84 255             | '   PTRA - start address of the SETUP data in hub.
31c84 255             | '   PB - start address of the buffer/struct to be written to during the IN data
31c84 255             | '     stage.
31c84 255             | '   ep_addr_pid - device address, endpoint and CRC5.
31c84 255             | ' On exit:
31c84 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
31c84 255             | '     contains the count of data stage bytes actually received, which must
31c84 255             | '     always be <= the count requested.
31c84 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
31c84 255             | '     more specific USB operation error code.
31c84 255             | '------------------------------------------------------------------------------
31c84 255             | control_read
31c84 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
31c88 256 F8 8F 03 F6 |                 mov     hpar2, ptra
31c8c 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
31c90 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
31c94 259             | .xfer_start
31c94 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
31c98 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
31c9c 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
31ca0 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
31ca4 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
31ca8 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
31cac 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
31cb0 260 61 00 00 FF 
31cb4 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
31cb8 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
31cbc 263             | .data
31cbc 263 56 B1 02 F6 |                 mov     pkt_data, total_data
31cc0 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
31cc4 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
31cc8 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
31ccc 267             | .nak_retry
31ccc 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
31cd0 268             | .in_retry
31cd0 268 BC F6 BF FD |                 call    #txn_in
31cd4 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
31cd8 26a 28 00 90 AD |         if_z    jmp     #.commit
31cdc 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
31ce0 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
31ce4 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
31ce8 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
31cec 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
31cf0 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
31cf4 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
31cf8 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
31cfc 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
31d00 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
31d04 275             | .commit
31d04 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
31d08 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
31d0c 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
31d10 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
31d14 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
31d18 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
31d1c 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
31d20 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
31d24 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
31d28 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
31d2c 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
31d30 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
31d34 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
31d38 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
31d3c 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
31d40 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
31d44 285             | .pre_status
31d44 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
31d48 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
31d4c 287 00 B0 06 F6 |                 mov     pkt_data, #0
31d50 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
31d54 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
31d58 28a 61 00 00 FF 
31d5c 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
31d60 28c             | .out_retry
31d60 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
31d64 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
31d68 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
31d6c 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
31d70 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
31d74 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
31d78 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
31d7c 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
31d80 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
31d84 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
31d88 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
31d8c 297             | ' I've encountered transfer STALL, even though the data looks correct, and
31d8c 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
31d8c 297             | ' ControlRead() transfer gets things unstuck most of the time...
31d8c 297             | .xfer_retry
31d8c 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
31d90 298 58 01 B0 FD |                 call    #poll_waitx
31d94 299 8C F9 BF FD |                 call    #wait_txn_ok
31d98 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
31d9c 29b C7 F1 03 F6 |                 mov     ptra, hpar2
31da0 29c C8 EF 03 F6 |                 mov     pb, hpar3
31da4 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
31da8 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
31dac 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
31db0 2a0             | 
31db0 2a0             | '------------------------------------------------------------------------------
31db0 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
31db0 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
31db0 2a0             | ' the SETUP data struct is filled with the required values.
31db0 2a0             | '------------------------------------------------------------------------------
31db0 2a0             | ' On entry:
31db0 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
31db0 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
31db0 2a0             | '     stage.
31db0 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
31db0 2a0             | ' On exit:
31db0 2a0             | '   retval - used to convey the success/failure of each stage.
31db0 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
31db0 2a0             | '     more specific USB operation error code.
31db0 2a0             | '------------------------------------------------------------------------------
31db0 2a0             | control_write
31db0 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
31db4 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
31db8 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
31dbc 2a3             | 
31dbc 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
31dc0 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
31dc4 2a5 F7 91 03 F6 |                 mov     hpar3, pb
31dc8 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
31dcc 2a7             | .xfer_start
31dcc 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
31dd0 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
31dd4 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
31dd8 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
31ddc 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
31de0 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
31de4 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
31de8 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
31dec 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
31df0 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
31df4 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
31df8 2b2             | .data
31df8 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
31dfc 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
31e00 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
31e04 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
31e08 2b6             | .out_retry
31e08 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
31e0c 2b7 88 F6 BF FD |                 call    #txn_out
31e10 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
31e14 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
31e18 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
31e1c 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
31e20 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
31e24 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
31e28 2be             | .commit
31e28 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
31e2c 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
31e30 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
31e34 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
31e38 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
31e3c 2c3             | pre_status_in
31e3c 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
31e40 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
31e44 2c5             | .status_retry
31e44 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
31e48 2c6 44 F5 BF FD |                 call    #txn_in
31e4c 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
31e50 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
31e54 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
31e58 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
31e5c 2cb 2D 00 64 AD |         if_z    ret
31e60 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
31e64 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
31e68 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
31e6c 2cf             | '               ret                                     ' Caller must handle transfer retirement
31e6c 2cf             | 
31e6c 2cf             | '------------------------------------------------------------------------------
31e6c 2cf             | ' Execute an IN interrupt transaction.
31e6c 2cf             | '------------------------------------------------------------------------------
31e6c 2cf             | ' On entry:
31e6c 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
31e6c 2cf             | '   hpar2 - Address of the IN data buffer
31e6c 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
31e6c 2cf             | ' On exit:
31e6c 2cf             | '   retval - the result of the operation.
31e6c 2cf             | '   hpar3 - the count of IN data bytes actually received.
31e6c 2cf             | '------------------------------------------------------------------------------
31e6c 2cf             | do_int_in
31e6c 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
31e70 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
31e74 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
31e78 2d2             | 
31e78 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
31e7c 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
31e80 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
31e84 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
31e88 2d6             | .retry
31e88 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
31e8c 2d7 00 F5 BF FD |                 call    #txn_in
31e90 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
31e94 2d9 1C 00 90 AD |         if_z    jmp     #.commit
31e98 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
31e9c 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
31ea0 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
31ea4 2dd 54 00 B0 FD |                 call    #retry_wait
31ea8 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
31eac 2df 18 00 90 AD |         if_z    jmp     #.post_ret
31eb0 2e0 D4 FF 9F FD |                 jmp     #.retry
31eb4 2e1             | .commit
31eb4 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
31eb8 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
31ebc 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
31ec0 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
31ec4 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
31ec8 2e6             | .post_ret
31ec8 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
31ecc 2e7             | 
31ecc 2e7             | 
31ecc 2e7             | '------------------------------------------------------------------------------
31ecc 2e7             | ' Resets the downstream hub port to FS
31ecc 2e7             | '------------------------------------------------------------------------------
31ecc 2e7             | dwnstream_reset
31ecc 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
31ed0 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
31ed4 2e9             | 
31ed4 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
31ed8 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
31edc 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
31ee0 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
31ee4 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
31ee8 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
31eec 2ef             | 
31eec 2ef             | '------------------------------------------------------------------------------
31eec 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
31eec 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
31eec 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
31eec 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
31eec 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
31eec 2ef             | '------------------------------------------------------------------------------
31eec 2ef             | ' On entry:
31eec 2ef             | '   hctwait - wait interval in sysclocks.
31eec 2ef             | ' On exit:
31eec 2ef             | '------------------------------------------------------------------------------
31eec 2ef             | poll_waitx
31eec 2ef 1A 92 63 FD |                 getct   hct2
31ef0 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
31ef4 2f1             | .wait
31ef4 2f1 FF 25 CC FB |                 jnct2   #.wait
31ef8 2f2 2D 00 64 FD |                 ret
31efc 2f3             | 
31efc 2f3             | '------------------------------------------------------------------------------
31efc 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
31efc 2f3             | '------------------------------------------------------------------------------
31efc 2f3             | ' On entry:
31efc 2f3             | '   retval - transaction response PID or error code.
31efc 2f3             | ' On exit:
31efc 2f3             | '------------------------------------------------------------------------------
31efc 2f3             | retry_wait
31efc 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
31f00 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
31f04 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
31f08 2f6 14 00 90 AD |         if_z    jmp     #.nak
31f0c 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
31f10 2f8 D8 FF BF FD |                 call    #poll_waitx
31f14 2f9             | .dec
31f14 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
31f18 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
31f1c 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
31f20 2fc             | .nak
31f20 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
31f24 2fd C4 FF BF FD |                 call    #poll_waitx
31f28 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
31f2c 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
31f30 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
31f34 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
31f38 302 2D 00 64 FD |                 ret
31f3c 303             | 
31f3c 303             | host_reset
31f3c 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
31f40 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
31f44 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
31f44 305 BD 01 05 FF 
31f48 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
31f4c 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
31f50 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
31f54 309             | ' Check to see if the system clock has been changed.
31f54 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
31f58 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
31f5c 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
31f60 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
31f64 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
31f68 30e 40 46 62 FD |                 dirl    dp
31f6c 30f             | 
31f6c 30f 28 02 64 FD |                 setq    #1
31f70 310 80 00 80 FF 
31f74 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
31f78 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
31f7c 313             | .enable
31f7c 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
31f80 314 41 46 62 FD |                 dirh    dp
31f84 315 1F 36 63 FD |                 waitx   _1us_
31f88 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
31f8c 317             | 
31f8c 317             |                 ' Handle Port protection enable and startup delay
31f8c 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
31f90 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
31f94 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
31f98 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
31f9c 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
31fa0 31c             | 
31fa0 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
31fa4 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
31fa8 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
31fac 31f 00 00 04 F6 |                 mov     0-0, #0
31fb0 320             | .regloop
31fb0 320             | 
31fb0 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
31fb0 320             | 
31fb0 320             | discon_entry
31fb0 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
31fb4 321             | 
31fb4 321             |               
31fb4 321             |         if HAVE_HIDPAD
31fb4 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
31fb8 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
31fbc 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
31fc0 324 F7 01 68 FC |                 wrlong  #0,pb
31fc4 325             |         end
31fc4 325             |         if EMUPAD_MAX_PLAYER > 0
31fc4 325             |         end
31fc4 325             | 
31fc4 325             |                 ' Fall through to disconnected loop
31fc4 325             | 
31fc4 325             | '-----------------------------------------------------------------------------------------------------------------
31fc4 325             | ' Device connect handling (Section 7.1.7.3).
31fc4 325             | '-----------------------------------------------------------------------------------------------------------------
31fc4 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
31fc4 325             | ' device to connect (Section 7.1.7.3).
31fc4 325             | '-----------------------------------------------------------------------------------------------------------------
31fc4 325             | disconnected
31fc4 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
31fc8 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
31fcc 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
31fd0 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
31fd4 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
31fd8 32a             |         if ACTIVITY_LED >= 0
31fd8 32a             |         end
31fd8 32a 22 A7 82 FA |                 rqpin   urx, dm
31fdc 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
31fe0 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
31fe4 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
31fe8 32e             | .se1_test
31fe8 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
31fec 32f FC FE BF FD |                 call    #poll_waitx
31ff0 330 22 A7 82 FA |                 rqpin   urx, dm
31ff4 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
31ff8 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
31ffc 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
32000 334             | .se1            'SE1 is a fatal error condition
32000 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
32004 335 E4 FE BF FD |                 call    #poll_waitx
32008 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
3200c 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
32010 338             | .connect_test                                           ' Test lines until stable J/K state seen
32010 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
32014 339 22 A7 82 FA |                 rqpin   urx, dm
32018 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3201c 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
32020 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
32024 33d             | connected
32024 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
32028 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
3202c 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
32030 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
32034 341             | .set_pulse
32034 341 1A 64 63 FD |                 getct   _pulse_time_
32038 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
3203c 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
3203c 343             | ' of 1ms and make a correction, if necessary.
3203c 343             | '                mov     htmp, _1ms_
3203c 343             | '                subs    htmp, iframe_delta
3203c 343             | '                adds    _frame1ms_clks_, htmp
3203c 343             | '                debug(udec(_frame1ms_clks_))
3203c 343             | 
3203c 343             |                 ' Fall through to idle/processing loop
3203c 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
32040 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
32044 345             | 
32044 345             | hidle
32044 345 22 A7 82 FA |                 rqpin   urx, dm
32048 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3204c 347 98 00 90 CD |         if_c    jmp     #.se0_test
32050 348 24 06 70 FD |                 pollct3                         wc
32054 349 68 00 90 3D |         if_nc   jmp     #.nopoll
32058 34a 1A 94 63 FD |                 getct   hct3
3205c 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
32060 34c             | 
32060 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
32064 34d 00 70 E3 F8 |                 getbyte htmp
32068 34e             | 
32068 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
3206c 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
32070 350 40 00 90 AD |         if_z    jmp     #.poll
32074 351             | 
32074 351             |         if _HAVE_GAMEPAD
32074 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
32078 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
3207c 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
32080 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
32084 355 2C 00 90 AD |         if_z    jmp     #.poll
32088 356             |         end
32088 356             | 
32088 356             |         if HAVE_MOUSE
32088 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3208c 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
32090 358 20 00 90 AD |         if_z    jmp     #.poll
32094 359             |         end
32094 359             | 
32094 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
32098 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
3209c 35b 14 00 90 AD |         if_z    jmp     #.poll
320a0 35c             | 
320a0 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
320a4 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
320a8 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
320ac 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
320b0 360             |         if HAVE_MOUSE
320b0 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
320b4 361             |         else
320b4 361             |         end
320b4 361             | 
320b4 361             | .poll
320b4 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
320b8 362 2D EC 63 FD |                 call    pa
320bc 363             | .skip_poll
320bc 363             | 
320bc 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
320c0 364             | 
320c0 364             | .nopoll
320c0 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
320c4 365 44 00 90 AD |         if_z    jmp     #hsuspend
320c8 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
320cc 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
320d0 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
320d4 369 1A 84 63 FD |                 getct   hr0
320d8 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
320dc 36b             |         if ACTIVITY_LED >= 0
320dc 36b             |         end
320dc 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
320e0 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
320e4 36d 5C FF 9F FD |                 jmp     #hidle
320e8 36e             | ' Check for extended SE0 state on the bus
320e8 36e             | .se0_test
320e8 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
320ec 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
320f0 370 22 A7 82 FA |                 rqpin   urx, dm
320f4 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
320f8 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
320fc 373 24 F6 BF FD |                 call    #wait_txn_ok
32100 374 00 00 80 FF 
32104 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
32108 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
32108 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
3210c 377             | 
3210c 377             | hsuspend
3210c 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
32110 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
32114 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
32118 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
3211c 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
32120 37c 00 96 07 F6 |                 mov     mod_cnt, #0
32124 37d             | 
32124 37d             |                 ' Fall through to resume wait loop
32124 37d             | 
32124 37d             | hwait_resume
32124 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
32128 37e 02 86 47 F0 |                 shr     hr1, #2
3212c 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
32130 380             |         if ACTIVITY_LED >= 0
32130 380             |         end
32130 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
32134 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
32138 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
3213c 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
32140 384 18 00 90 AD |         if_z    jmp     #.resume
32144 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
32148 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
3214c 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
32150 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
32154 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
32158 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
3215c 38b             | .resume
3215c 38b 22 05 28 FC |                 wypin   #OUT_K, dm
32160 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
32164 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
32168 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
3216c 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
32170 390 1F 70 63 FD |                 waitx   htmp
32174 391 22 07 28 FC |                 wypin   #OUT_J, dm
32178 392 01 70 47 F0 |                 shr     htmp, #1
3217c 393 1F 70 63 FD |                 waitx   htmp
32180 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
32184 395 1A 92 62 FD |                 getct   iframe_ct_base
32188 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3218c 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
32190 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
32194 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
32198 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
3219c 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
321a0 39c             | 
321a0 39c             | '------------------------------------------------------------------------------
321a0 39c             | ' Send preamble to enable low-speed HUB ports
321a0 39c             | '------------------------------------------------------------------------------
321a0 39c             | ' On entry:
321a0 39c             | ' On exit:
321a0 39c             | '   USB baud rate set to low-speed
321a0 39c             | '------------------------------------------------------------------------------
321a0 39c             | utx_pre
321a0 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
321a4 39d 40 46 62 FD |                 dirl    dp
321a8 39e 28 02 64 FD |                 setq    #1
321ac 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
321b0 3a0 58 44 62 FD |                 drvl    dm
321b4 3a1 59 46 62 FD |                 drvh    dp
321b8 3a2             | 
321b8 3a2 1E 00 00 FF 
321bc 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
321c0 3a4             | 
321c0 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
321c4 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
321c8 3a6 28 02 64 3D |         if_nc   setq    #1
321cc 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
321d0 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
321d4 3a9             | .l1
321d4 3a9             | 
321d4 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
321d8 3aa 40 46 62 FD |                 dirl    dp
321dc 3ab 28 02 64 FD |                 setq    #1
321e0 3ac 80 00 80 FF 
321e4 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
321e8 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
321ec 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
321f0 3b0 41 46 62 FD |                 dirh    dp
321f4 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
321f8 3b2             | 
321f8 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
321fc 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
32200 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
32204 3b5             | 
32204 3b5             | hlut_end
32204 3b5             |                 fit     $400
32204 3b5             |                 orgh
32204                 | if OVERLAP_MEMORY
32204                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
32204                 | end
32204                 | '------------------------------------------------------------------------------
32204                 | ' Routines called from cog space.
32204                 | '------------------------------------------------------------------------------
32204                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
32204                 | '------------------------------------------------------------------------------
32204                 | 
32204                 | '------------------------------------------------------------------------------
32204                 | ' USB host cog initialization.
32204                 | '------------------------------------------------------------------------------
32204                 | usb_host_init
32204                 |                 ' Initialize buffer pointers
32204                 |         if OVERLAP_MEMORY
32204                 |         else
32204     40 15 B0 FE |                 loc     pb, #hid_descr
32208                 |         end
32208     F7 4B 02 F6 |                 mov     hid_descr_p, pb
3220c                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
3220c                 |                 {
3220c                 |                 }
3220c                 |         
3220c                 |                 {
3220c                 |                 }
3220c                 |                 'loc     pb,#hkbd_report
3220c                 |                 'mov     hkbd_report_p,pb
3220c                 | 
3220c     08 1D B0 FE |                 loc     pb, #hub_descr
32210     F7 4D 02 F6 |                 mov     hub_descr_p, pb
32214     1D 1D B0 FE |                 loc     pb, #urx_buff
32218     F7 4F 02 F6 |                 mov     urx_buff_p, pb
3221c     95 1D B0 FE |                 loc     pb, #dev_desc_buff
32220     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
32224     9F 1D B0 FE |                 loc     pb, #con_desc_buff
32228     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
3222c     18 15 B0 FE |                 loc     pb, #usb_cache_start
32230     F7 55 02 F6 |                 mov     cache_start_p, pb
32234     E9 1C B0 FE |                 loc     pb, #usb_cache_end
32238     F7 57 02 F6 |                 mov     cache_end_p, pb
3223c                 | 
3223c                 |         if ERROR_LED >= 0
3223c                 |         end
3223c                 | 
3223c                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
3223c                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
3223c                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
3223c                 | ' Configure and enable the Serial Host USB port.
3223c     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
32240                 | 
32240                 | '------------------------------------------------------------------------------
32240                 | ' Timing calculations happen before any interrupt(s) are enabled.
32240                 | '------------------------------------------------------------------------------
32240                 | ' On entry:
32240                 | '   htmp - current CLKFREQ value.
32240                 | '------------------------------------------------------------------------------
32240                 | hinit_usb_timings
32240                 | '                getct   htmp2
32240     B8 59 02 F6 |                 mov     save_sysclk, htmp
32244     8D 5B 80 FF 
32248     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
3224c     18 30 63 FD |                 getqx   _12Mbps_
32250     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
32254     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
32258     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
3225c     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
32260     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
32264     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
32268     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
3226c     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
32270     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
32274     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
32278     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
3227c     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
32280     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
32284     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
32288     80 00 00 FF 
3228c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
32290     18 2C 63 FD |                 getqx   _var_64_lower_
32294     19 2E 63 FD |                 getqy   _var_64_upper_
32298     28 2C 63 FD |                 setq    _var_64_lower_
3229c     65 CD 1D FF 
322a0     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
322a4     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
322a8     01 00 00 FF 
322ac     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
322b0     18 2C 63 FD |                 getqx   _var_64_lower_
322b4     19 2E 63 FD |                 getqy   _var_64_upper_
322b8     28 2C 63 FD |                 setq    _var_64_lower_
322bc     A1 07 00 FF 
322c0     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
322c4     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
322c8     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
322cc     09 36 57 F0 |                 shr     _1us_, #9               wc
322d0     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
322d4     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
322d8     18 38 63 FD |                 getqx   _10us_
322dc     09 38 57 F0 |                 shr     _10us_, #9              wc
322e0     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
322e4     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
322e8     18 3A 63 FD |                 getqx   _33us_
322ec     09 3A 57 F0 |                 shr     _33us_, #9              wc
322f0     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
322f4     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
322f8     18 3C 63 FD |                 getqx   _txn_err_
322fc     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
32300     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
32304     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
32308     18 3E 63 FD |                 getqx   _500us_
3230c     09 3E 57 F0 |                 shr     _500us_, #9             wc
32310     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
32314     01 00 00 FF 
32318     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
3231c     18 40 63 FD |                 getqx   _txn_ok_ls_
32320     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
32324     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
32328     01 00 00 FF 
3232c     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
32330     18 42 63 FD |                 getqx   _txn_ok_fs_
32334     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
32338     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
3233c     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
32340     05 00 00 FF 
32344     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
32348     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
3234c     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
32350     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
32354     1C 00 00 FF 
32358     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
3235c     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
32360     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
32364     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
32368     00 00 00 FF 
3236c     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
32370     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
32374     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
32378     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
3237c     04 00 00 FF 
32380     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
32384     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
32388     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
3238c     8D 5B 00 FF 
32390     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
32394     18 4C 63 FD |                 getqx   _preamble_wait_
32398     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
3239c     01 00 00 FF 
323a0     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
323a4     18 2C 63 FD |                 getqx   _var_64_lower_
323a8     19 2E 63 FD |                 getqy   _var_64_upper_
323ac     28 2C 63 FD |                 setq    _var_64_lower_
323b0     01 00 00 FF 
323b4     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
323b8     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
323bc     09 4E 57 F0 |                 shr     _1ms_, #9               wc
323c0     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
323c4     FF FF 7F FF 
323c8     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
323cc     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
323d0     A7 51 03 F6 |                 mov     _2ms_, _1ms_
323d4     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
323d8     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
323dc     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
323e0     A7 55 03 F6 |                 mov     _4ms_, _1ms_
323e4     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
323e8     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
323ec     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
323f0     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
323f4     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
323f8     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
323fc     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
32400     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
32404     A7 59 03 F6 |                 mov     _8ms_, _1ms_
32408     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
3240c     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
32410     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
32414     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
32418     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
3241c     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
32420     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
32424     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
32428     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
3242c     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
32430     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
32434                 | '        _ret_   mov     _1sec_, save_sysclk
32434                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
32434                 | '                ret
32434                 | {
32434                 | }
32434                 | 
32434                 | '------------------------------------------------------------------------------
32434                 | ' Parse a configuration descriptor chain to see if the device is a recognized
32434                 | ' one. If it is, start the task progression that will configure the device for
32434                 | ' use.
32434                 | '------------------------------------------------------------------------------
32434                 | ' On entry:
32434                 | '   hconfig_base - start address of the cached config descriptor chain.
32434                 | ' On exit:
32434                 | '------------------------------------------------------------------------------
32434                 | hparse_con_desc
32434     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
32438     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
3243c     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
32440     4E 70 FF F9 |                 movbyts htmp,#%%1032
32444     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
32448                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
32448                 | 
32448     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
3244c     6E ED 03 F1 |                 add     pa, hconfig_base
32450     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
32454                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
32454                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
32454                 | ' that defines a keyboard and/or mouse.
32454     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
32458                 | .next_intf
32458     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3245c     BC 01 90 3D |         if_ae   jmp     #hset_config
32460     6E F3 03 F6 |                 mov     ptrb, hconfig_base
32464     75 F3 03 F1 |                 add     ptrb, hnext_desc
32468     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3246c     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
32470     0C 00 90 AD |         if_z    jmp     #.intf
32474     80 71 C7 FA |                 rdbyte  htmp, ptrb
32478     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3247c     D8 FF 9F FD |                 jmp     #.next_intf
32480                 | .intf
32480     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
32484     00 90 07 F6 |                 mov     hpar3, #0
32488     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
3248c     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
32490     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
32494     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
32498                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
32498                 | 
32498                 | .endp
32498     80 71 C7 FA |                 rdbyte  htmp, ptrb
3249c     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
324a0     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
324a4     78 00 90 3D |         if_ae   jmp     #.get_device
324a8     6E F3 03 F6 |                 mov     ptrb, hconfig_base
324ac     75 F3 03 F1 |                 add     ptrb, hnext_desc
324b0     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
324b4     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
324b8     64 00 90 AD |         if_z    jmp     #.get_device
324bc     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
324c0     04 00 90 AD |         if_z    jmp     #.get_ep
324c4     D0 FF 9F FD |                 jmp     #.endp
324c8                 | .get_ep
324c8     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
324cc     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
324d0     0F 86 67 F0 |                 shl     hr1, #8 + 7
324d4     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
324d8     3F 00 00 FF 
324dc     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
324e0     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
324e4     00 8E 0F F2 |                 cmp     hpar2, #0               wz
324e8     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
324ec     00 90 0F F2 |                 cmp     hpar3, #0               wz
324f0     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
324f4     A0 FF 9F FD |                 jmp     #.endp
324f8                 | .in_ep
324f8     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
324fc     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
32500                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
32500     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
32504     C2 89 DB F8 |                 setbyte hr2, hr0, #3
32508     8C FF 9F FD |                 jmp     #.endp
3250c                 | .out_ep
3250c     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
32510     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
32514                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
32514     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
32518     C2 8B DB F8 |                 setbyte hr3, hr0, #3
3251c     78 FF 9F FD |                 jmp     #.endp
32520                 | 
32520                 | .get_device
32520     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
32524     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
32528     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
3252c     68 00 90 AD |         if_z    jmp     #.gamepad
32530     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
32534     AC 00 90 AD |         if_z    jmp     #.hub
32538     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
3253c     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
32540     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
32544     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
32548     4C 00 90 AD |         if_z    jmp     #.gamepad
3254c     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
32550     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
32554                 | .keyboard
32554     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
32558                 |         if HAVE_MOUSE
32558     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
3255c                 |         else
3255c                 |         end
3255c     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
32560     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
32564     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
32568     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
3256c     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
32570     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
32574                 |                 'debug(udec(kb_intf_num))
32574                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
32574     E0 FE 9F FD |                 jmp     #.next_intf
32578                 | if HAVE_MOUSE
32578                 | .mouse
32578     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
3257c     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
32580     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
32584     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
32588     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3258c                 |                 'getbyte ms_interval, hr2, #3
3258c     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
32590     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
32594                 |                 'debug(udec(kb_intf_num))
32594                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
32594     C0 FE 9F FD |                 jmp     #.next_intf
32598                 | end
32598                 | .gamepad
32598     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
3259c     C7 71 63 F5 |                 xor     htmp, hpar2
325a0     3F 00 00 FF 
325a4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
325a8     AC FE 9F AD |         if_z    jmp     #.next_intf
325ac                 |         if HAVE_MOUSE
325ac     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
325b0     C7 71 63 F5 |                 xor     htmp, hpar2
325b4     3F 00 00 FF 
325b8     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
325bc     98 FE 9F AD |         if_z    jmp     #.next_intf
325c0                 |         end
325c0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
325c4     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
325c8     8C FE 9F 5D |         if_nz   jmp     #.next_intf
325cc                 | 
325cc     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
325d0     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
325d4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
325d8     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
325dc     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
325e0                 |                 'debug(udec(gp_intf_num))
325e0                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
325e0     74 FE 9F FD |                 jmp     #.next_intf
325e4                 | .hub
325e4     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
325e8     6C FE 9F 5D |         if_nz   jmp     #.next_intf
325ec     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
325f0     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
325f4     60 FE 9F 5D |         if_nz   jmp     #.next_intf
325f8     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
325fc     58 FE 9F 5D |         if_nz   jmp     #.next_intf
32600     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
32604     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
32608     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
3260c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
32610     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
32614     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
32618                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
32618     3C FE 9F FD |                 jmp     #.next_intf
3261c                 | 
3261c                 | '------------------------------------------------------------------------------
3261c                 | ' If a newly-connected device is recognized, do whatever is needed to configure
3261c                 | ' it according to its function, or functions. In the case of this boot protocol
3261c                 | ' keyboard/mouse class driver:
3261c                 | ' - SetConfiguration(config_num)
3261c                 | ' - SetProtocol(boot)
3261c                 | ' - SetIdle(indefinite)
3261c                 | ' - Enter the device interrupt IN polling task stage.
3261c                 | '------------------------------------------------------------------------------
3261c                 | ' On entry:
3261c                 | ' On exit:
3261c                 | '------------------------------------------------------------------------------
3261c                 | hset_config
3261c                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
3261c                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
3261c     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
32620     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
32624     00 00 0C F2 |                 cmp     0-0, #0                 wz
32628     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
3262c                 |         if HAVE_MOUSE
3262c     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
32630                 |         end
32630     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
32634     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
32638                 | .set_config
32638     6C 0E D0 FE |                 loc     ptra, #set_config
3263c     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
32640     6E ED 03 F1 |                 add     pa, hconfig_base
32644     F6 8D C3 FA |                 rdbyte  hpar1, pa
32648     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
3264c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
32650     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
32654     A0 02 A0 FD |                 call    #control_write
32658     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3265c     2D 00 64 5D |         if_nz   ret
32660                 | .kbd_config
32660     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
32664     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
32668                 | 
32668     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
3266c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
32670     3F 00 00 FF 
32674     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
32678     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
3267c                 | 
3267c     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
32680     34 0E D0 FE |                 loc     ptra, #set_protocol
32684     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
32688     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3268c     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
32690     A0 02 A0 FD |                 call    #control_write
32694     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
32698     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3269c     E4 02 90 5D |         if_nz   jmp     #.notify_client
326a0     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
326a4     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
326a8     30 03 B0 FD |                 call    #hset_idle
326ac                 |                 'cmp     retval, #PID_ACK        wz
326ac                 |         'if_nz   mov     hkbd_ep_addr, #0
326ac                 |         'if_nz   jmp     #.notify_client
326ac     A8 99 02 F6 |                 mov     hctwait, _2ms_
326b0     EF 02 A0 FD |                 call    #poll_waitx
326b4     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
326b8     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
326bc     90 17 90 FE |                 loc     pa, #hkbd_led_rep
326c0     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
326c4     2C 03 B0 FD |                 call    #hset_kbdled_report
326c8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
326cc     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
326d0     B0 02 90 5D |         if_nz   jmp     #.notify_client
326d4     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
326d8     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
326dc     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
326e0     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
326e4     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
326e8     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
326ec     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
326f0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
326f4     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
326f8     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
326fc     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
32700                 |         if !!HAVE_MOUSE
32700                 |         end
32700                 | 
32700                 | .mouse_config
32700                 | if HAVE_MOUSE
32700     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
32704     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
32708     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
3270c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
32710     3F 00 00 FF 
32714     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
32718     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3271c                 | 
3271c                 |                 debug("mouse passed addr check")
3271c                 | 
3271c     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
32720     00 00 80 FF 
32724     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
32728     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
3272c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
32730     55 02 A0 FD |                 call    #control_read
32734     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
32738     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3273c     44 02 90 5D |         if_nz   jmp     #.notify_client
32740     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
32744     56 01 00 F6 |                 mov     0-0, total_data
32748     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3274c                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3274c                 | 
3274c     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
32750     64 0D D0 FE |                 loc     ptra, #set_protocol
32754     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
32758     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3275c     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
32760     A0 02 A0 FD |                 call    #control_write
32764     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
32768     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3276c     14 02 90 5D |         if_nz   jmp     #.notify_client
32770                 |                 debug("mouse passed SetProtocol")
32770     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
32774     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
32778     60 02 B0 FD |                 call    #hset_idle
3277c                 |                 'cmp     retval, #PID_ACK        wz
3277c                 |         'if_nz   mov     hmouse_ep_addr, #0
3277c                 |         'if_nz   jmp     #.notify_client
3277c                 |                 debug("mouse passed SetIdle")
3277c     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
32780     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
32784     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
32788     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3278c     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
32790     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
32794     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
32798     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
3279c     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
327a0     3F 00 00 FF 
327a4     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
327a8     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
327ac     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
327b0     D0 01 90 FD |                 jmp     #.notify_client
327b4                 | end
327b4                 | .gamepad_config
327b4                 | if _HAVE_GAMEPAD
327b4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
327b8     00 00 0C F2 |                 cmp     0-0, #0                 wz
327bc     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
327c0     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
327c4     00 70 03 F6 |                 mov     htmp, 0-0
327c8     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
327cc     3F 00 00 FF 
327d0     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
327d4     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
327d8                 | 
327d8     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
327dc     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
327e0     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
327e4     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
327e8     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
327ec     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
327f0     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
327f4     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
327f8     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
327fc     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
32800     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
32804     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
32808     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
3280c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
32810                 | 
32810                 |                 if EMUPAD_MAX_PLAYER > 0
32810                 |                 
32810                 | .rule_loop           
32810                 |                 end
32810                 | 
32810     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
32814     5C 00 90 AD |         if_e    jmp     #.xinput
32818     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3281c     00 70 03 F6 |                 mov     htmp,0-0
32820     01 A6 02 FF 
32824     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
32828     7C 00 90 AD |         if_e    jmp     #.ps3
3282c                 | 
3282c     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
32830     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
32834     00 00 80 5F 
32838     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
3283c     03 00 80 AF 
32840     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
32844     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
32848     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3284c     55 02 A0 FD |                 call    #control_read
32850     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
32854     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
32858     00 00 04 56 |         if_nz   mov     0-0, #0
3285c     24 01 90 5D |         if_nz   jmp     #.notify_client
32860     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
32864     56 01 00 F6 |                 mov     0-0, total_data
32868     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3286c                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3286c                 | 
3286c     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
32870     10 01 90 FD |                 jmp     #.notify_client
32874                 | .xinput
32874     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
32878     2D EF 03 F6 |                 mov     pb,hdev_port
3287c     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
32880     03 EE 27 F3 |                 fle     pb,#3
32884     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
32888     02 EF 47 FC |                 wrbyte  pb, ptra[2]
3288c                 | 
3288c     03 B0 06 F6 |                 mov     pkt_data, #3
32890     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
32894     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
32898     5A 00 A0 FD |                 call    #txn_out
3289c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
328a0                 | 
328a0     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
328a4     DC 00 90 FD |                 jmp     #.notify_client
328a8                 | .ps3
328a8     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
328ac     2D EF 03 F6 |                 mov     pb,hdev_port
328b0     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
328b4     04 EE 27 F3 |                 fle     pb,#4
328b8     F7 EF C3 F9 |                 decod   pb
328bc     09 EF 47 FC |                 wrbyte  pb, ptra[9]
328c0                 | 
328c0     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
328c4     00 0C D0 FE |                 loc     ptra, #set_report
328c8     01 00 80 FF 
328cc     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
328d0     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
328d4     03 61 5C FC |                 wrword  #48, ptra[wLength]
328d8     20 0C B0 FE |                 loc     pb, #ps3_command_buff
328dc     A0 02 A0 FD |                 call    #control_write
328e0                 | 
328e0     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
328e4     E0 0B D0 FE |                 loc     ptra, #set_report
328e8     01 00 80 FF 
328ec     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
328f0     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
328f4     03 09 5C FC |                 wrword  #4, ptra[wLength]
328f8     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
328fc     A0 02 A0 FD |                 call    #control_write
32900     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
32904     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
32908     00 00 04 56 |         if_nz   mov     0-0, #0
3290c     74 00 90 5D |         if_nz   jmp     #.notify_client
32910                 | 
32910     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
32914     6C 00 90 FD |                 jmp     #.notify_client
32918                 | end
32918                 | 
32918                 | .hub_config
32918     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3291c     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
32920     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
32924     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
32928     3F 00 00 FF 
3292c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
32930     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
32934                 | 
32934     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
32938     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
3293c     26 EF 03 F6 |                 mov     pb, hub_descr_p
32940     55 02 A0 FD |                 call    #control_read
32944     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
32948     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
3294c     34 00 90 5D |         if_nz   jmp     #.notify_client
32950                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
32950                 | 
32950     26 F1 03 F6 |                 mov     ptra, hub_descr_p
32954     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
32958     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
3295c                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
3295c                 | .pwr_loop
3295c     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
32960     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
32964     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
32968     A0 02 A0 FD |                 call    #control_write
3296c     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
32970                 | 
32970     B1 99 02 F6 |                 mov     hctwait, _500ms_
32974     B0 99 02 F1 |                 add     hctwait, _100ms_
32978     EF 02 A0 FD |                 call    #poll_waitx
3297c                 | 
3297c     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
32980     00 00 90 FD |                 jmp     #.notify_client
32984                 | 
32984                 | .notify_client
32984     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
32988     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
3298c                 |                 debug(uhex_long(hdev_type,hdev_type+1))
3298c                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
3298c     2D 00 64 FD |                 ret
32990                 | 
32990                 | '------------------------------------------------------------------------------
32990                 | ' Initialize the keyboard/mouse data area to start-up values.
32990                 | '------------------------------------------------------------------------------
32990                 | ' On entry:
32990                 | ' On exit:
32990                 | '------------------------------------------------------------------------------
32990                 | init_kbdm_data
32990     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
32994     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
32998                 | 
32998     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
3299c     2B ED 03 F6 |                 mov     pa, cache_end_p
329a0                 | .loop
329a0     61 01 4C FC |                 wrbyte  #0, ptra++
329a4     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
329a8     F4 FF 9F CD |         if_b    jmp     #.loop
329ac                 |         
329ac                 |         if EMUPAD_MAX_PLAYER > 0
329ac                 |         end
329ac                 | 
329ac                 | 
329ac     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
329b0                 | .regloop
329b0     00 EC 8F F9 |                 altd    pa
329b4     00 00 04 F6 |                 mov     0-0, #0
329b8     01 EC 07 F1 |                 add     pa, #1
329bc     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
329c0     EC FF 9F 5D |         if_nz   jmp     #.regloop
329c4                 | 
329c4     E1 E1 61 FF 
329c8     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
329cc     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
329d0     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
329d4     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
329d8                 | 
329d8     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
329dc                 | 
329dc                 | '------------------------------------------------------------------------------
329dc                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
329dc                 | ' function.
329dc                 | '------------------------------------------------------------------------------
329dc                 | ' On entry:
329dc                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
329dc                 | '   hpar2 - index number of the target interface.
329dc                 | ' On exit:
329dc                 | '------------------------------------------------------------------------------
329dc                 | hset_idle
329dc     A8 99 02 F6 |                 mov     hctwait, _2ms_
329e0     EF 02 A0 FD |                 call    #poll_waitx
329e4     D8 0A D0 FE |                 loc     ptra, #set_idle
329e8     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
329ec     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
329f0     A0 02 80 FD |                 jmp     #control_write
329f4                 | 
329f4                 | '------------------------------------------------------------------------------
329f4                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
329f4                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
329f4                 | '------------------------------------------------------------------------------
329f4                 | ' On entry:
329f4                 | '   ep_addr_pid - device address and enpoint for the request.
329f4                 | ' On exit:
329f4                 | '   retval - transaction result.
329f4                 | '------------------------------------------------------------------------------
329f4                 | hset_kbdled_report
329f4     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
329f8     CC 0A D0 FE |                 loc     ptra, #set_report
329fc     01 00 80 FF 
32a00     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
32a04     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
32a08     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
32a0c     27 EF 03 F6 |                 mov     pb, urx_buff_p
32a10     F7 77 42 FC |                 wrbyte  kb_led_states, pb
32a14     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
32a18                 | 
32a18                 | '------------------------------------------------------------------------------
32a18                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
32a18                 | '------------------------------------------------------------------------------
32a18                 | ' On entry:
32a18                 | ' On exit:
32a18                 | '------------------------------------------------------------------------------
32a18                 | hget_kbd_in_report
32a18     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
32a1c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
32a20     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
32a24     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
32a28     CF 02 A0 FD |                 call    #do_int_in
32a2c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
32a30     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
32a34                 | 
32a34     00 90 0F F2 |                 cmp     hpar3, #0               wz
32a38     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
32a3c                 | 
32a3c     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
32a40     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
32a44     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
32a48     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
32a4c                 | 
32a4c     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
32a50     18 00 B0 FD |                 call    #hkbd_compare
32a54                 |         if EMUPAD_MAX_PLAYER > 0
32a54                 |         end
32a54                 | 
32a54                 | .led_check
32a54     3B 71 03 F6 |                 mov     htmp, kb_led_states
32a58     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
32a5c     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
32a60     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
32a64     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
32a68     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
32a6c                 | 
32a6c                 | '------------------------------------------------------------------------------
32a6c                 | ' Compare current and previous keyboard data buffers for keypress changes.
32a6c                 | '------------------------------------------------------------------------------
32a6c                 | hkbd_compare
32a6c     27 F1 03 F6 |                 mov     ptra, urx_buff_p
32a70     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
32a74     61 73 07 FB |                 rdlong  htmp1, ptra++
32a78     E1 75 07 FB |                 rdlong  htmp2, ptrb++
32a7c     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
32a80     61 73 07 FB |                 rdlong  htmp1, ptra++
32a84     E1 75 07 FB |                 rdlong  htmp2, ptrb++
32a88     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
32a8c     2D 00 64 AD |         if_z    ret
32a90                 | 
32a90     B4 13 D0 FE |                 loc     ptra, #hkbd_report
32a94                 | 
32a94                 |                 ' Handle modifiers
32a94     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
32a98     00 87 C7 FA |                 rdbyte  hr1, ptra
32a9c     C7 87 43 F9 |                 rolword hr1,hpar2,#0
32aa0     63 86 63 FD |                 mergew  hr1
32aa4     08 EC 07 F6 |                 mov     pa,#8
32aa8                 | .modloop
32aa8     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
32aac     E8 8C 07 F6 |                 mov     hpar1,#$E8
32ab0     F6 8D 83 F1 |                 sub     hpar1,pa
32ab4     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
32ab8     FB ED 6F FB |                 djnz    pa,#.modloop
32abc                 | 
32abc     6F E0 75 FD | .release        modc    _set    wc
32ac0                 |                 'alts    hdev_port, #hid_report_p
32ac0                 |                 'mov     ptra, hid_report_p
32ac0     02 F0 07 F1 |                 add     ptra, #2
32ac4     06 EC 07 F6 |                 mov     pa, #6
32ac8     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
32acc     20 00 90 AD |         if_z    jmp     #.rl3
32ad0     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
32ad4     02 F2 07 F1 |                 add     ptrb, #2
32ad8     06 EE 07 F6 |                 mov     pb, #6
32adc     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
32ae0     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
32ae4     08 00 90 AD |         if_z    jmp     #.rl3
32ae8     FC EF 6F FB |                 djnz    pb, #.rl2
32aec     68 00 B0 FD |                 call    #hkbd_translate
32af0     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
32af4                 | 
32af4     00 90 07 F6 |                 mov     hpar3, #0
32af8     1F 90 27 F4 |                 bith    hpar3, #31
32afc                 | 
32afc     6F 00 74 FD | .press          modc    _clr    wc
32b00     27 F1 03 F6 |                 mov     ptra, urx_buff_p
32b04     02 F0 07 F1 |                 add     ptra, #2
32b08     06 EC 07 F6 |                 mov     pa, #6
32b0c     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
32b10     20 00 90 AD |         if_z    jmp     #.pl3
32b14     30 13 F0 FE |                 loc     ptrb, #hkbd_report
32b18     02 F2 07 F1 |                 add     ptrb, #2
32b1c     06 EE 07 F6 |                 mov     pb, #6
32b20     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
32b24     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
32b28     08 00 90 AD |         if_z    jmp     #.pl3
32b2c     FC EF 6F FB |                 djnz    pb, #.pl2
32b30     24 00 B0 FD |                 call    #hkbd_translate
32b34     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
32b38                 | 
32b38     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
32b3c     08 13 F0 FE |                 loc     ptrb, #hkbd_report
32b40     28 02 64 FD |                 setq #1
32b44     61 73 07 FB |                 rdlong  htmp1, ptra++
32b48     28 02 64 FD |                 setq #1
32b4c     E1 73 67 FC |                 wrlong  htmp1, ptrb++
32b50     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
32b54                 | 
32b54     2D 00 64 FD |                 ret
32b58                 | 
32b58                 | '------------------------------------------------------------------------------
32b58                 | ' Translate keyboard scancode to ASCII
32b58                 | '------------------------------------------------------------------------------
32b58                 | ' On entry:
32b58                 | '   hpar1 - scancode
32b58                 | '   hpar2 - key modifiers state
32b58                 | '       c - pressed (0) or released (1) flag
32b58                 | ' On exit:
32b58                 | '   hpar1 - bit     31 = 0 pressed, 1 released
32b58                 | '               30..17 = unused
32b58                 | '                   18 = scroll-lock state 
32b58                 | '                   17 = caps-lock state
32b58                 | '                   16 = num-lock state 
32b58                 | '                15..8 = key modifiers state
32b58                 | '                 7..0 = scancode
32b58                 | '------------------------------------------------------------------------------
32b58                 | hkbd_translate
32b58     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
32b5c     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
32b60     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
32b64     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
32b68     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
32b6c     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
32b70                 | 
32b70                 |         if EMUPAD_MAX_PLAYER > 0
32b70                 | 
32b70                 |         if EMUPAD_BT0_BIT >= 0
32b70                 |         end
32b70                 |         if EMUPAD_BT1_BIT >= 0
32b70                 |         end
32b70                 |         if EMUPAD_BT2_BIT >= 0
32b70                 |         end
32b70                 |         if EMUPAD_BT3_BIT >= 0
32b70                 |         end
32b70                 |         if EMUPAD_BT4_BIT >= 0
32b70                 |         end
32b70                 |         if EMUPAD_BT5_BIT >= 0
32b70                 |         end
32b70                 |         if EMUPAD_BT6_BIT >= 0
32b70                 |         end
32b70                 |         if EMUPAD_BT7_BIT >= 0
32b70                 |         end
32b70                 |         if EMUPAD_BT8_BIT >= 0
32b70                 |         end
32b70                 |         if EMUPAD_BT9_BIT >= 0
32b70                 |         end
32b70                 | 
32b70                 |         end
32b70     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
32b74     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
32b78     1F 8C 47 F4 |                 bitc    hpar1, #31
32b7c                 |         if KEYQUEUE_SIZE > 0
32b7c     C4 09 B0 FE |                 loc pb,#keyq_head
32b80     F7 71 E3 FA |                 rdword htmp,pb
32b84     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
32b88     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
32b8c     B8 75 03 F6 |                 mov htmp2,htmp
32b90     04 74 07 FA |                 mul htmp2,#4
32b94     F7 75 03 F1 |                 add htmp2,pb
32b98     02 74 07 F1 |                 add htmp2,#2
32b9c     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
32ba0     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
32ba4     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
32ba8     F7 71 43 5C |         if_nz   wrbyte htmp,pb
32bac                 |         end
32bac     2D 00 7C FD |                 ret wcz
32bb0                 | 
32bb0                 | if HAVE_MOUSE
32bb0                 | '------------------------------------------------------------------------------
32bb0                 | ' Execute an IN interrupt transaction to poll for mouse activity.
32bb0                 | '------------------------------------------------------------------------------
32bb0                 | ' On entry:
32bb0                 | ' On exit:
32bb0                 | '------------------------------------------------------------------------------
32bb0                 | hget_mouse_in_report
32bb0     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
32bb4     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
32bb8     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
32bbc     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
32bc0     CF 02 A0 FD |                 call    #do_int_in
32bc4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
32bc8     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
32bcc                 | 
32bcc     00 90 0F F2 |                 cmp     hpar3, #0               wz
32bd0     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
32bd4                 | 
32bd4     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
32bd8     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
32bdc     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
32be0     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
32be4                 | 
32be4     27 F1 03 F6 |                 mov     ptra, urx_buff_p
32be8     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
32bec     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
32bf0     01 90 87 31 |         if_ae   sub     hpar3, #1
32bf4                 | 
32bf4     40 09 90 FE |                 loc     pa, #mouse_limits
32bf8     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
32bfc                 | 
32bfc                 |                 ' load xacc,yacc,zacc
32bfc     28 04 64 FD |                 setq    #3-1
32c00     80 87 07 FB |                 rdlong  hr1,ptrb
32c04                 |                 ' load limits and outptr
32c04     28 04 64 FD |                 setq    #3-1
32c08     F6 73 03 FB |                 rdlong  htmp1,pa
32c0c                 | 
32c0c     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
32c10     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
32c14     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
32c18     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
32c1c     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
32c20     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
32c24     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
32c28     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
32c2c                 |               
32c2c                 | 
32c2c     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
32c30     07 70 67 F7 |                 signx   htmp, #7
32c34     B8 87 03 F1 |                 add     hr1,htmp
32c38     00 72 0F F2 |                 cmp     htmp1,#0 wz
32c3c     B9 87 63 53 |         if_ne   fles    hr1,htmp1
32c40     00 86 47 53 |         if_ne   fges    hr1,#0
32c44                 | 
32c44     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
32c48     07 70 67 F7 |                 signx   htmp, #7
32c4c     B8 89 03 F1 |                 add     hr2,htmp
32c50     00 74 0F F2 |                 cmp     htmp2,#0 wz
32c54     BA 89 63 53 |         if_ne   fles    hr2,htmp2
32c58     00 88 47 53 |         if_ne   fges    hr2,#0
32c5c                 |                 
32c5c                 | 
32c5c     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
32c60     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
32c64     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
32c68     B8 8B 03 A1 |         if_z    add     hr3,htmp
32c6c                 | 
32c6c     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
32c70     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
32c74                 | 
32c74                 |                 ' write back accumulators
32c74     28 04 64 FD |                 setq    #3-1
32c78     80 87 67 FC |                 wrlong  hr1,ptrb
32c7c                 |                 ' if outptr set, write X/Y words
32c7c     00 76 0F F2 |                 cmp htmp3,#0                    wz
32c80     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
32c84     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
32c88     2D 00 64 FD |                 ret
32c8c                 | end
32c8c                 | 
32c8c                 | '------------------------------------------------------------------------------
32c8c                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
32c8c                 | '------------------------------------------------------------------------------
32c8c                 | ' On entry:
32c8c                 | ' On exit:
32c8c                 | '------------------------------------------------------------------------------
32c8c                 | if _HAVE_GAMEPAD
32c8c                 | hget_gp_in_report
32c8c     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
32c90     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
32c94                 | 
32c94     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
32c98     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
32c9c     00 90 E3 F8 |                 getbyte hpar3
32ca0     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
32ca4     CF 02 A0 FD |                 call    #do_int_in
32ca8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
32cac     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
32cb0                 | 
32cb0     00 90 0F F2 |                 cmp     hpar3, #0               wz
32cb4     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
32cb8                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
32cb8                 | 
32cb8     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
32cbc     00 70 E3 F8 |                 getbyte htmp                            ' |
32cc0     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
32cc4     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
32cc8     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
32ccc     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
32cd0     B8 01 C0 F8 |                 setbyte htmp                            ' |
32cd4                 | 
32cd4                 | ' Note: the following code compares the current and previous reports
32cd4                 | ' and process the data if there are changes to ease the debug output.
32cd4                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
32cd4                 | ' gpPreReport buffer.
32cd4                 | 
32cd4                 |                 ' ----- start of block to remove
32cd4                 |                 {
32cd4                 |                 }
32cd4                 |                 ' ----- end of block to remove
32cd4     F4 04 90 FE |                 loc pa,#hpad_translate
32cd8     2A EC 63 FD |                 push pa
32cdc                 | 
32cdc                 |                 ' FALL THROUGH !!!!
32cdc                 | 
32cdc                 | '------------------------------------------------------------------------------
32cdc                 | ' Decode controller report
32cdc                 | '------------------------------------------------------------------------------
32cdc                 | hid_decode
32cdc                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
32cdc     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
32ce0     00 04 00 FF 
32ce4     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
32ce8                 | 
32ce8     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
32cec                 | 
32cec     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
32cf0     00 2A E3 F8 |                 getbyte hidr_type
32cf4     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
32cf8     34 02 90 AD |         if_z    jmp     #hpad_xinput
32cfc     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
32d00     1C 03 90 AD |         if_z    jmp     #hpad_ps3
32d04     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
32d08     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
32d0c     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
32d10                 |                 
32d10                 | 
32d10                 | '------------------------------------------------------------------------------
32d10                 | ' Handle HID controller (or mouse now
32d10                 | ' On entry:
32d10                 | '   ptrb - controller report
32d10                 | '------------------------------------------------------------------------------
32d10                 | hpad_hid
32d10     1B 01 A0 FD |                 call    #get_hid_descr_buffer
32d14     F7 F1 03 F6 |                 mov     ptra, pb
32d18     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
32d1c     00 EC 03 F6 |                 mov     pa, 0-0
32d20                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
32d20     19 2A 3B FF 
32d24     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
32d28                 | 
32d28                 | .next
32d28     00 EC 5F F2 |                 cmps    pa, #0      wcz
32d2c     2D 00 7C ED |         if_be   ret     wcz
32d30                 | 
32d30     61 8D C7 FA |                 rdbyte  hpar1, ptra++
32d34     01 EC 87 F1 |                 sub     pa, #1
32d38     00 8E 07 F6 |                 mov     hpar2, #0
32d3c                 | 
32d3c     C6 71 03 F6 |                 mov     htmp, hpar1
32d40     03 70 07 F5 |                 and     htmp, #$03
32d44     01 70 0F F2 |                 cmp     htmp, #1    wz
32d48     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
32d4c     07 8E 67 A7 |         if_z    signx   hpar2,#7
32d50     01 EC 87 A1 |         if_z    sub     pa, #1
32d54     02 70 0F F2 |                 cmp     htmp, #2    wz
32d58     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
32d5c     0F 8E 67 A7 |         if_z    signx   hpar2,#15
32d60     02 EC 87 A1 |         if_z    sub     pa, #2
32d64     03 70 0F F2 |                 cmp     htmp, #3    wz
32d68     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
32d6c     04 EC 87 A1 |         if_z    sub     pa, #4
32d70                 | 
32d70     FC 8C 07 F5 |                 and     hpar1, #$FC
32d74                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
32d74                 | 
32d74     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
32d78     0C 01 90 AD |         if_z    jmp     #.report_id
32d7c     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
32d80     24 01 90 AD |         if_z    jmp     #.usage_page
32d84     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
32d88     2C 01 90 AD |         if_z    jmp     #.usage
32d8c     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
32d90     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
32d94     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
32d98     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
32d9c     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
32da0     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
32da4     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
32da8     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
32dac     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
32db0     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
32db4     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
32db8     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
32dbc     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
32dc0     64 FF 9F 5D |         if_nz   jmp     #.next
32dc4                 | 
32dc4     D8 1D A7 FB |                 tjf     hidr_state,#.next
32dc8                 | 
32dc8     03 8E 07 F5 |                 and     hpar2, #$03
32dcc     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
32dd0     18 00 90 5D |         if_nz   jmp     #.skip
32dd4                 | 
32dd4     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
32dd8     20 00 90 AD |         if_z    jmp     #.axes
32ddc     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
32de0     5C 00 90 AD |         if_z    jmp     #.hats
32de4     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
32de8     70 00 90 AD |         if_z    jmp     #.buttons
32dec                 | .skip
32dec     8F 71 03 F6 |                 mov     htmp, hidr_size
32df0     90 71 03 FA |                 mul     htmp, hidr_count
32df4     B8 23 03 F1 |                 add     hidr_offset, htmp
32df8     2C FF 9F FD |                 jmp     #.next
32dfc                 | .axes
32dfc                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
32dfc     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
32e00     90 87 03 F6 |                 mov     hr1, hidr_count
32e04                 | .l1
32e04     91 8D 03 F6 |                 mov     hpar1, hidr_offset
32e08     8F 8F 03 F6 |                 mov     hpar2, hidr_size
32e0c     04 03 B0 FD |                 call    #hpad_getbits
32e10     64 03 B0 FD |                 call    #hpad_normalize
32e14     06 84 1F F2 |                 cmp     hr0, #6         wcz
32e18     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
32e1c     00 88 43 C8 |         if_b    getnib  hr2
32e20     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
32e24     5F 01 20 C9 |         if_b    setword retval
32e28     01 84 07 C1 |         if_b    add     hr0, #1
32e2c     8F 23 03 F1 |                 add     hidr_offset, hidr_size
32e30     F4 87 6F FB |                 djnz    hr1, #.l1
32e34                 | 
32e34     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
32e38     01 1C 07 F6 |                 mov     hidr_state, #1
32e3c     E8 FE 9F FD |                 jmp     #.next
32e40                 | .hats
32e40                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
32e40     91 8D 03 F6 |                 mov     hpar1, hidr_offset
32e44     8F 8F 03 F6 |                 mov     hpar2, hidr_size
32e48     C8 02 B0 FD |                 call    #hpad_getbits
32e4c     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
32e50     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
32e54     01 1C 07 F6 |                 mov     hidr_state, #1
32e58     90 FF 9F FD |                 jmp     #.skip
32e5c                 | .buttons
32e5c                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
32e5c     91 8D 03 F6 |                 mov     hpar1, hidr_offset
32e60     8F 8F 03 F6 |                 mov     hpar2, hidr_size
32e64     90 8F 03 FA |                 mul     hpar2, hidr_count
32e68     A8 02 B0 FD |                 call    #hpad_getbits
32e6c     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
32e70     B8 BF 62 F0 |                 shl     retval, htmp
32e74     5F 17 43 F5 |                 or      hidr_buttons, retval
32e78     90 71 03 F1 |                 add     htmp, hidr_count
32e7c     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
32e80     01 1C 07 F6 |                 mov     hidr_state, #1
32e84     64 FF 9F FD |                 jmp     #.skip
32e88                 | .report_id
32e88     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
32e8c     2D 00 7C 5D |         if_nz   ret     wcz
32e90     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
32e94     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
32e98     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
32e9c     01 1C 67 56 |         if_nz   neg     hidr_state,#1
32ea0     01 F2 87 51 |         if_nz   sub     ptrb,#1
32ea4     80 FE 9F FD |                 jmp     #.next
32ea8                 | .usage_page
32ea8     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
32eac     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
32eb0     04 1C 07 A6 |         if_z    mov     hidr_state, #4
32eb4     70 FE 9F FD |                 jmp     #.next
32eb8                 | .usage
32eb8     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
32ebc     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
32ec0     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
32ec4     01 1C 07 A6 |         if_z    mov     hidr_state, #1
32ec8     5C FE 9F AD |         if_z    jmp     #.next
32ecc     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
32ed0     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
32ed4     01 1C 07 A6 |         if_z    mov     hidr_state, #1
32ed8     4C FE 9F AD |         if_z    jmp     #.next
32edc     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
32ee0     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
32ee4     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
32ee8     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
32eec     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
32ef0     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
32ef4     10 00 90 AD |         if_z    jmp     #.usage_axis
32ef8     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
32efc     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
32f00     03 1C 07 A6 |         if_z    mov     hidr_state, #3
32f04     20 FE 9F FD |                 jmp     #.next
32f08                 | .usage_axis
32f08     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
32f0c     18 FE 9F CD |         if_b    jmp     #.next
32f10     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
32f14     C7 01 00 F8 |                 setnib  hpar2
32f18                 | 
32f18     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
32f1c     C7 8F C3 F9 |                 decod   hpar2
32f20     C7 0F 43 F5 |                 or      hidr_flags, hpar2
32f24                 | 
32f24     01 24 07 F1 |                 add     hidr_usage_idx, #1
32f28     02 1C 07 F6 |                 mov     hidr_state, #2
32f2c     F8 FD 9F FD |                 jmp     #.next
32f30                 | 
32f30                 | '------------------------------------------------------------------------------
32f30                 | ' Handle XInput controller
32f30                 | ' On entry:
32f30                 | '   ptrb - controller report
32f30                 | '------------------------------------------------------------------------------
32f30                 | '   Default implementation translates the report to a pseudo-defacto hid
32f30                 | '   standard and jumps to hpad_translate for actions.
32f30                 | '   Implementors may take specific actions for this kind of controller.
32f30                 | '------------------------------------------------------------------------------
32f30                 | hpad_xinput
32f30     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
32f34     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
32f38     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
32f3c     14 70 0F F2 |                 cmp     htmp, #$14      wz
32f40     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
32f44                 | 
32f44                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
32f44                 | 
32f44     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
32f48     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
32f4c                 | 
32f4c     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
32f50     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
32f54     5F BF 22 F6 |                 not     retval
32f58     5F 11 2B F9 |                 setword hidr_axis, retval, #1
32f5c     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
32f60     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
32f64     5F BF 22 F6 |                 not     retval
32f68     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
32f6c                 | 
32f6c     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
32f70     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
32f74     C0 BE 1E F2 |                 cmp     retval, #192    wcz
32f78     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
32f7c     F8 01 B0 FD |                 call    #hpad_normalize
32f80     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
32f84     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
32f88     C0 BE 1E F2 |                 cmp     retval, #192    wcz
32f8c     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
32f90     E4 01 B0 FD |                 call    #hpad_normalize
32f94     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
32f98                 | 
32f98     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
32f9c     81 BF E6 FA |                 rdword  retval, ptrb[1]
32fa0     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
32fa4     00 16 47 F4 |                 bitc    hidr_buttons, #0
32fa8     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
32fac     01 16 47 F4 |                 bitc    hidr_buttons, #1
32fb0     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
32fb4     02 16 47 F4 |                 bitc    hidr_buttons, #2
32fb8     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
32fbc     03 16 47 F4 |                 bitc    hidr_buttons, #3
32fc0     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
32fc4     04 16 47 F4 |                 bitc    hidr_buttons, #4
32fc8     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
32fcc     05 16 47 F4 |                 bitc    hidr_buttons, #5
32fd0     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
32fd4     08 16 47 F4 |                 bitc    hidr_buttons, #8
32fd8     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
32fdc     09 16 47 F4 |                 bitc    hidr_buttons, #9
32fe0     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
32fe4     0A 16 47 F4 |                 bitc    hidr_buttons, #10
32fe8     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
32fec     0B 16 47 F4 |                 bitc    hidr_buttons, #11
32ff0     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
32ff4     0C 16 47 F4 |                 bitc    hidr_buttons, #12
32ff8                 | 
32ff8     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
32ffc     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
33000     7A BB 7A FF 
33004     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
33008     F9 FF 7F FF 
3300c     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
33010     B9 71 5F F9 |                 altgn   htmp, #htmp1
33014     00 70 43 F8 |                 getnib  htmp
33018     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3301c                 | 
3301c     AC 01 90 FD |                 jmp     #hpad_translate
33020                 | 
33020                 | '------------------------------------------------------------------------------
33020                 | ' Handle PS3 controller
33020                 | ' On entry:
33020                 | '   ptrb - controller report
33020                 | '------------------------------------------------------------------------------
33020                 | '   Default implementation translates the report to a pseudo-defacto hid
33020                 | '   standard and jumps to hpad_translate for actions.
33020                 | '   Implementors may take specific actions for this kind of controller.
33020                 | '------------------------------------------------------------------------------
33020                 | hpad_ps3
33020     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
33024     01 70 0F F2 |                 cmp     htmp, #$01      wz
33028     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
3302c                 | 
3302c                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3302c                 | 
3302c     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
33030     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
33034     40 01 B0 FD |                 call    #hpad_normalize
33038     5F 11 23 F9 |                 setword hidr_axis, retval, #0
3303c     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
33040     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
33044     30 01 B0 FD |                 call    #hpad_normalize
33048     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3304c     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
33050     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
33054     20 01 B0 FD |                 call    #hpad_normalize
33058     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
3305c     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
33060     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
33064     10 01 B0 FD |                 call    #hpad_normalize
33068     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3306c     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
33070     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
33074                 | 
33074     08 8C 07 F6 |                 mov     hpar1, #8
33078     13 8E 07 F6 |                 mov     hpar2, #19
3307c     94 00 B0 FD |                 call    #hpad_getbits
33080                 | 
33080     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
33084     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
33088     00 16 47 F4 |                 bitc    hidr_buttons, #0
3308c     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
33090     01 16 47 F4 |                 bitc    hidr_buttons, #1
33094     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
33098     02 16 47 F4 |                 bitc    hidr_buttons, #2
3309c     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
330a0     03 16 47 F4 |                 bitc    hidr_buttons, #3
330a4     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
330a8     04 16 47 F4 |                 bitc    hidr_buttons, #4
330ac     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
330b0     05 16 47 F4 |                 bitc    hidr_buttons, #5
330b4     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
330b8     06 16 47 F4 |                 bitc    hidr_buttons, #6
330bc     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
330c0     07 16 47 F4 |                 bitc    hidr_buttons, #7
330c4     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
330c8     08 16 47 F4 |                 bitc    hidr_buttons, #8
330cc     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
330d0     09 16 47 F4 |                 bitc    hidr_buttons, #9
330d4     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
330d8     0A 16 47 F4 |                 bitc    hidr_buttons, #10
330dc     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
330e0     0B 16 47 F4 |                 bitc    hidr_buttons, #11
330e4     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
330e8     0C 16 47 F4 |                 bitc    hidr_buttons, #12
330ec                 | 
330ec     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
330f0     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
330f4     09 FA 79 FF 
330f8     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
330fc     FF FA 7F FF 
33100     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
33104     B9 71 5F F9 |                 altgn   htmp, #htmp1
33108     00 70 43 F8 |                 getnib  htmp
3310c     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
33110                 | 
33110     B8 00 90 FD |                 jmp     #hpad_translate
33114                 | 
33114                 | '------------------------------------------------------------------------------
33114                 | ' Read bits from report data buffer
33114                 | '------------------------------------------------------------------------------
33114                 | ' On entry:
33114                 | '   PTRB - report buffer
33114                 | '   hpar1 - start bit
33114                 | '   hpar2 - number of bits
33114                 | ' On exit:
33114                 | '   retval - bits
33114                 | '------------------------------------------------------------------------------
33114                 | hpad_getbits
33114     C6 71 03 F6 |                 mov     htmp, hpar1
33118     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
3311c     F9 71 03 F1 |                 add     htmp, ptrb
33120     B8 BF 02 FB |                 rdlong  retval, htmp
33124                 | 
33124     C6 73 03 F6 |                 mov     htmp1, hpar1
33128     07 72 07 F5 |                 and     htmp1, #$07     ' shift
3312c     B9 BF 42 F0 |                 shr     retval, htmp1
33130                 | 
33130     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
33134     10 00 90 1D |         if_a    jmp     #.l1
33138                 | 
33138     C7 8F C3 F9 |                 decod   hpar2
3313c     01 8E 87 F1 |                 sub     hpar2, #1
33140     C7 BF 02 F5 |                 and     retval, hpar2
33144     2D 00 64 FD |                 ret
33148                 | .l1
33148     FF 7F 00 FF 
3314c     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
33150     03 70 07 F1 |                 add     htmp, #3
33154     B8 75 03 FB |                 rdlong  htmp2, htmp
33158     18 8E 87 F1 |                 sub     hpar2, #24
3315c     C7 8F C3 F9 |                 decod   hpar2
33160     01 8E 87 F1 |                 sub     hpar2, #1
33164     B9 75 43 F0 |                 shr     htmp2, htmp1
33168     C7 75 03 F5 |                 and     htmp2, hpar2
3316c     18 74 67 F0 |                 shl     htmp2, #24
33170     BA BF 42 F5 |                 or      retval, htmp2
33174     2D 00 64 FD |                 ret
33178                 | 
33178                 | '------------------------------------------------------------------------------
33178                 | ' Normalize value to signed word (-32768 / 32767)
33178                 | '------------------------------------------------------------------------------
33178                 | ' On entry:
33178                 | '   retval - value to normalize
33178                 | '   hidr_lminmax - min (word 1) max (word 0) value range
33178                 | '   - or -
33178                 | '   hidr_pminmax - min (word 1) max (word 0) value range
33178                 | '   hidr_size - value bits length
33178                 | ' On exit:
33178                 | '   retval - normalized value
33178                 | '------------------------------------------------------------------------------
33178                 | hpad_normalize
33178     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
3317c     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
33180     2D 00 64 AD |         if_z    ret
33184     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
33188     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
3318c     0F 72 77 F7 |                 signx   htmp1, #15      wc
33190     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
33194     00 BE 66 C7 |         if_c    signx   retval, #0-0
33198     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
3319c     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
331a0     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
331a4     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
331a8     B8 71 53 F6 |                 abs     htmp            wc
331ac     1F BE 0E F4 |                 testb   retval, #31     wz
331b0     5F BF 42 F6 |                 abs     retval
331b4     B8 BF 12 FD |                 qdiv    retval, htmp
331b8     18 BE 62 FD |                 getqx   retval
331bc     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
331c0     C0 FF 7F FF 
331c4     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
331c8     2D 00 64 FD |                 ret
331cc                 | 
331cc                 | '------------------------------------------------------------------------------
331cc                 | ' Perform controller actions
331cc                 | ' On entry:
331cc                 | '    hidr_id        report id
331cc                 | '    hidr_axis      axis value (signed word, 2 axes per long)
331cc                 | '                      X = hidr_axis+0, #0
331cc                 | '                      Y = hidr_axis+0, #1
331cc                 | '                      Z = hidr_axis+1, #0
331cc                 | '                     RX = hidr_axis+1, #1
331cc                 | '                     RY = hidr_axis+2, #0
331cc                 | '                     RZ = hidr_axis+2, #1
331cc                 | '    hidr_buttons   buttons state (bits 0 to 31)
331cc                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
331cc                 | '
331cc                 | '                     -------3 -------2 -------1 -------0 byte
331cc                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
331cc                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
331cc                 | '                                zyx||| |||||||| ++++++++ n. buttons
331cc                 | '                                |||||| ||||++++--------- n. axes
331cc                 | '                                |||||| ++++------------- n. hats
331cc                 | '                                ++++++------------------ valid axes
331cc                 | '------------------------------------------------------------------------------
331cc                 | hpad_translate
331cc                 | 
331cc                 | 
331cc                 |         if HAVE_HIDPAD
331cc     84 0C F0 FE |                 loc     ptrb,#hidpad_report
331d0     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
331d4     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
331d8     01 70 E7 F2 |                 cmpsub  htmp,#1
331dc     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
331e0     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
331e4     2D 00 7C 3D |         if_ae   ret     wcz
331e8     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
331ec     B8 F3 03 F1 |                 add     ptrb,htmp
331f0     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
331f4     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
331f8     28 0C 64 FD |                 setq    #7-1
331fc     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
33200                 |         end
33200                 | 
33200                 | 
33200                 |         if EMUPAD_MAX_PLAYER > 0
33200                 | .emupad_no_hat
33200                 |         if EMUPAD_BT0_BIT >= 0
33200                 |         end
33200                 |         if EMUPAD_BT1_BIT >= 0
33200                 |         end
33200                 |         if EMUPAD_BT2_BIT >= 0
33200                 |         end
33200                 |         if EMUPAD_BT3_BIT >= 0
33200                 |         end
33200                 |         if EMUPAD_BT4_BIT >= 0
33200                 |         end
33200                 |         if EMUPAD_BT5_BIT >= 0
33200                 |         end
33200                 |         if EMUPAD_BT6_BIT >= 0
33200                 |         end
33200                 |         if EMUPAD_BT7_BIT >= 0
33200                 |         end
33200                 |         if EMUPAD_BT8_BIT >= 0
33200                 |         end
33200                 |         if EMUPAD_BT9_BIT >= 0
33200                 |         end
33200                 | .emupad_slot_over
33200                 |         end
33200                 | 
33200                 |         if 0
33200                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
33200                 | 
33200                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
33200                 | 
33200                 |         end
33200     2D 00 64 FD |                 ret
33204                 | end
33204                 | 
33204                 | if EMUPAD_MAX_PLAYER > 0
33204                 | '------------------------------------------------------------------------------
33204                 | ' Clear EmuPad state
33204                 | '------------------------------------------------------------------------------
33204                 | emupad_reset
33204                 | 
33204                 | '------------------------------------------------------------------------------
33204                 | ' Get EmuPad Player number for current device (into retval)
33204                 | ' Z flag is also set if current device is valid
33204                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
33204                 | '------------------------------------------------------------------------------
33204                 | emupad_getnum
33204                 | .loop
33204                 | '------------------------------------------------------------------------------
33204                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
33204                 | '------------------------------------------------------------------------------
33204                 | emupad_discon
33204                 | .loop         
33204                 |         
33204                 |         ' FALL THROUGH!!!
33204                 | 
33204                 | '------------------------------------------------------------------------------
33204                 | ' Update EmuPad reports (all of them...)
33204                 | '------------------------------------------------------------------------------
33204                 | emupad_write_reports
33204                 | .devloop
33204                 | 
33204                 | end
33204                 | 
33204                 | 
33204                 | '------------------------------------------------------------------------------
33204                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
33204                 | '------------------------------------------------------------------------------
33204                 | ' On entry:
33204                 | ' On exit:
33204                 | '------------------------------------------------------------------------------
33204                 | hget_hub_status
33204     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
33208     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3320c     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
33210     01 90 2F F9 |                 setword hpar3, #1, #1
33214     CF 02 A0 FD |                 call    #do_int_in
33218     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3321c     0C 00 90 AD |         if_z    jmp     #.data
33220     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
33224     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
33228     2D 00 64 FD |                 ret
3322c                 | .data
3322c     00 90 0F F2 |                 cmp     hpar3, #0               wz
33230     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
33234                 | 
33234     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
33238     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
3323c     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
33240     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
33244                 |                 debug(ubin_long(hub_status_chg))
33244                 | 
33244     01 5A 06 F6 |                 mov     hdev_port, #1
33248                 | .loop
33248     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
3324c     0C 00 B0 AD |         if_x1   call    #hub_port_handler
33250     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
33254     F0 FF 9F 3D |         if_nc   jmp     #.loop
33258     2D 00 64 FD |                 ret
3325c                 | 
3325c                 | hub_port_handler
3325c     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
33260     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
33264     27 EF 03 F6 |                 mov     pb, urx_buff_p
33268     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3326c     55 02 A0 FD |                 call    #control_read
33270     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
33274                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
33274                 | 
33274     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
33278     50 01 90 5D |         if_x0   jmp     #.other
3327c     68 02 D0 FE |                 loc     ptra, #clr_port_feat
33280     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
33284     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
33288     A0 02 A0 FD |                 call    #control_write
3328c     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
33290     7C 01 90 5D |         if_x0   jmp     #.disconnect
33294     B0 99 02 F6 |                 mov     hctwait, _100ms_
33298     EF 02 A0 FD |                 call    #poll_waitx
3329c                 | 
3329c     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
332a0     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
332a4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
332a8     A0 02 A0 FD |                 call    #control_write
332ac                 | 
332ac     02 76 07 F6 |                 mov     htmp3, #2
332b0                 | .wait_reset
332b0     AC 99 02 F6 |                 mov     hctwait, _8ms_
332b4     EF 02 A0 FD |                 call    #poll_waitx
332b8     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
332bc     27 EF 03 F6 |                 mov     pb, urx_buff_p
332c0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
332c4     55 02 A0 FD |                 call    #control_read
332c8     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
332cc     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
332d0     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
332d4                 | 
332d4     10 02 D0 FE |                 loc     ptra, #clr_port_feat
332d8     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
332dc     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
332e0     A0 02 A0 FD |                 call    #control_write
332e4                 | 
332e4     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
332e8                 | .wait_recover
332e8     A7 99 02 F6 |                 mov     hctwait, _1ms_
332ec     EF 02 A0 FD |                 call    #poll_waitx
332f0     FD 71 6F FB |                 djnz    htmp,#.wait_recover
332f4                 | 
332f4     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
332f8     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
332fc     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
33300                 | 
33300     00 08 00 FF 
33304     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
33308     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
3330c     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
33310     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
33314     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
33318     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3331c     48 01 90 5D |         if_nz   jmp     #.done
33320                 | .get_dev_desc
33320     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
33324     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
33328     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3332c     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
33330     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
33334     01 71 57 FC |                 wrword  htmp, ptra[wValue]
33338     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
3333c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33340     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
33344     AC 99 02 F6 |                 mov     hctwait, _8ms_
33348     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3334c     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
33350     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
33354     BE 00 A0 FD |                 call    #calc_crc5
33358     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
3335c     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
33360     F7 AD C2 FA |                 rdbyte  total_data, pb
33364     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
33368     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3336c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33370     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
33374     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
33378     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3337c                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3337c     9F 99 02 F6 |                 mov     hctwait, _500us_
33380     EF 02 A0 FD |                 call    #poll_waitx
33384     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
33388     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3338c     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
33390     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
33394     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33398     CC 00 90 5D |         if_nz   jmp     #.done
3339c     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
333a0     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
333a4     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
333a8     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
333ac     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
333b0     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
333b4     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
333b8     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
333bc     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
333c0     A4 00 90 CD |         if_b    jmp     #.done
333c4     6C F0 BF FD |                 call    #hparse_con_desc
333c8     9C 00 90 FD |                 jmp     #.done
333cc                 | 
333cc                 | .other
333cc     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
333d0     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
333d4     28 00 90 AD |         if_x1   jmp     #.reset_feature
333d8     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
333dc     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
333e0     1C 00 90 AD |         if_x1   jmp     #.reset_feature
333e4     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
333e8     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
333ec     10 00 90 AD |         if_x1   jmp     #.reset_feature
333f0     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
333f4     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
333f8     04 00 90 AD |         if_x1   jmp     #.reset_feature
333fc     68 00 90 FD |                 jmp     #.done
33400                 | .reset_feature
33400     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
33404     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
33408     A0 02 A0 FD |                 call    #control_write
3340c     58 00 90 FD |                 jmp     #.done
33410                 | .disconnect
33410                 | 
33410     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
33414     00 70 E3 F8 |                 getbyte htmp
33418     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
3341c     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
33420     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
33424     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
33428     00 76 06 A6 |         if_z    mov     kb_led_states, #0
3342c     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
33430                 |         if EMUPAD_MAX_PLAYER > 0
33430                 |         end
33430                 |         if HAVE_MOUSE
33430     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
33434     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
33438     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
3343c                 |         end
3343c                 |         if HAVE_HIDPAD
3343c     14 0A F0 FE |                 loc ptrb,#hidpad_report
33440     2D 71 03 F6 |                 mov htmp,hdev_port
33444     01 70 E7 F2 |                 cmpsub htmp,#1
33448     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
3344c     B8 F3 03 F1 |                 add ptrb,htmp
33450     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
33454     80 01 6C FC |                 wrlong #0,ptrb
33458                 |         end
33458                 | 
33458     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3345c     00 00 C4 F8 |                 setbyte #0
33460     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
33464     00 00 04 F6 |                 mov     0-0, #0
33468                 | 
33468                 | .done
33468     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
3346c     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
33470     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
33474     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
33478     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3347c     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
33480                 | 
33480     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
33484     27 EF 03 F6 |                 mov     pb, urx_buff_p
33488     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3348c     55 02 A0 FD |                 call    #control_read
33490     00 69 06 FB |                 rdlong  hub_port_status, ptra
33494                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
33494     2D 00 64 FD |                 ret
33498                 | 
33498                 | '------------------------------------------------------------------------------
33498                 | ' Partially populated SETUP packets
33498                 | '------------------------------------------------------------------------------
33498     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
33499     06          |                 byte    REQ_GET_DESC
3349a     00 01       |                 word    TYPE_DEVICE << 8
3349c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3349e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
334a0     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
334a1     06          |                 byte    REQ_GET_DESC
334a2     00 02       |                 word    TYPE_CONFIG << 8
334a4     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
334a6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
334a8     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
334a9     09          |                 byte    REQ_SET_CONFIG
334aa     00 00       |                 word    0       ' Configuration value
334ac     00 00       |                 word    0       ' Zero
334ae     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
334b0     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
334b1     05          |                 byte    REQ_SET_ADDR
334b2     00 00       |                 word    0       ' Zero
334b4     00 00       |                 word    0       ' Zero
334b6     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
334b8                 | '------------------------------------------------------------------------------
334b8                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
334b8                 | ' wValue field dictates which protocol should be used.
334b8                 | '
334b8                 | ' When initialized, all devices default to report protocol. However the host
334b8                 | ' should not make any assumptions about the device state and should set the
334b8                 | ' desired protocol whenever initializing a device.
334b8                 | '------------------------------------------------------------------------------
334b8     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
334b9     0B          |                 byte    HID_SET_PROTO
334ba     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
334bc                 |                                                 ' (HID 1.11 Section 7.2.6).
334bc     00 00       |                 word    0               ' Interface index number.
334be     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
334c0                 | '------------------------------------------------------------------------------
334c0     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
334c1     0A          |                 byte    HID_SET_IDLE
334c2     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
334c4                 |                                         ' reporting until a change is detected in the report data
334c4                 | 
334c4                 |                                         ' (HID 1.11 Section 7.2.4).
334c4     00 00       |                 word    0       ' Interface index number.
334c6     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
334c8     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
334c9     09          |                 byte    HID_SET_REPORT
334ca     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
334cc                 |                                         ' (HID 1.11 Section 7.2.2).
334cc     00 00       |                 word    0       ' Interface index number.
334ce     00 00       |                 word    0       ' Size of the report, in bytes.
334d0     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
334d1     06          |                 byte    REQ_GET_DESC
334d2     00 22       |                 word    TYPE_REPORT << 8
334d4     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
334d6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
334d8                 | '------------------------------------------------------------------------------
334d8     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
334d9     06          |                 byte    REQ_GET_DESC
334da     00 29       |                 word    TYPE_HUB << 8
334dc     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
334de     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
334e0     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
334e1     03          |                 byte    REQ_SET_FEATURE
334e2     00 00       |                 word    0       ' port power
334e4     01 00       |                 word    1       ' Port index number (1+)
334e6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
334e8     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
334e9     01          |                 byte    REQ_CLEAR_FEATURE
334ea     00 00       |                 word    0       ' port power
334ec     01 00       |                 word    1       ' Port index number (1+)
334ee     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
334f0     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
334f1     00          |                 byte    REQ_GET_STATUS
334f2     00 00       |                 word    0
334f4     01 00       |                 word    1       ' Port index number (1+)
334f6     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
334f8                 | '------------------------------------------------------------------------------
334f8                 | if _HAVE_GAMEPAD
334f8     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
334fc                 | ps3_command_buff
334fc     00 00 00 00 
33500     00          |                 byte    $00, $00, $00, $00, $00
33501     00 00 00 00 
33505     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
33506     FF 27 10 00 
3350a     32          |                 byte    $FF, $27, $10, $00, $32
3350b     FF 27 10 00 
3350f     32          |                 byte    $FF, $27, $10, $00, $32
33510     FF 27 10 00 
33514     32          |                 byte    $FF, $27, $10, $00, $32
33515     FF 27 10 00 
33519     32          |                 byte    $FF, $27, $10, $00, $32
3351a     00 00 00 00 
3351e     00          |                 byte    $00, $00, $00, $00, $00
3351f     00 00 00 00 
33523     00          |                 byte    $00, $00, $00, $00, $00
33524     00 00 00 00 
33528     00          |                 byte    $00, $00, $00, $00, $00
33529     00 00 00    |                 byte    $00, $00, $00
3352c                 | '------------------------------------------------------------------------------
3352c     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
3352f                 |                                         ' 0x01 All blinking
3352f                 |                                         ' 0x02 1 flashes, then on
3352f                 |                                         ' 0x03 2 flashes, then on
3352f                 |                                         ' 0x04 3 flashes, then on
3352f                 |                                         ' 0x05 4 flashes, then on
3352f                 |                                         ' 0x06 1 on
3352f                 |                                         ' 0x07 2 on
3352f                 |                                         ' 0x08 3 on
3352f                 |                                         ' 0x09 4 on
3352f                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
3352f                 |                                         ' 0x0B Blinking*
3352f                 |                                         ' 0x0C Slow blinking*
3352f                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
3352f     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
33532     00          |                 byte    $00             ' Left rumble
33533     00          |                 byte    $00             ' Right rumble
33534     00 00 00    |                 byte    $00, $00, $00
33537     00          | end
33538                 | alignl
33538                 | 
33538                 | if HAVE_MOUSE
33538     00 00 00 00 
3353c     00 00 00 00 | mouse_limits long 0[2]
33540     00 00 00 00 | mouse_outptr long 0
33544                 | end
33544                 | 
33544                 | if KEYQUEUE_SIZE > 0
33544     00          | keyq_head byte 0
33545     00          | keyq_tail byte 0
33546     00 00 00 00 
      ...             
33742     00 00 00 00 
33746     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
33748                 | alignl
33748                 | end
33748                 | 
33748                 | if EMUPAD_MAX_PLAYER > 0
33748                 | emupad_rule_buffer
33748                 | if EMUPAD_BUILTIN_RULES
33748                 | file "padmap_builtin.dat"
33748                 | end
33748                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
33748                 | '' Default rule directly follows!
33748                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
33748                 | end
33748                 | 
33748                 | '------------------------------------------------------------------------------
33748                 | ' The USB data cache area gets zero-filled at every device disconnect
33748                 | '------------------------------------------------------------------------------
33748                 | usb_cache_start
33748                 | 
33748                 | ' HID descriptor and report buffers
33748                 | if !!OVERLAP_MEMORY
33748     00 00 00 00 
      ...             
33e40     00 00 00 00 
33e44     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
33e48                 | end
33e48     00 00 00 00 
33e4c     00 00 00 00 | hkbd_report     byte    0[8]
33e50     00 00 00 00 | hkbd_led_rep    byte    0
33e54                 | alignl
33e54                 | 
33e54                 | if HAVE_HIDPAD
33e54     00 00 00 00 
      ...             
33f10     00 00 00 00 
33f14     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
33f18                 | end
33f18                 | 
33f18                 | ' HUB descriptor
33f18     00          | hub_descr       byte    0   ' bDescLength
33f19     00          |                 byte    0   ' bDescriptorType
33f1a     00          |                 byte    0   ' bNbrPorts
33f1b     00 00       |                 word    0   ' wHubCharacteristics
33f1d     00          |                 byte    0   ' bPwrOn2PwrGood
33f1e     00          |                 byte    0   ' bHubContrCurrent
33f1f     00          |                 byte    0   ' DeviceRemoveable
33f20     00          |                 byte    0   ' PortPwrCtrlMask
33f21                 | 
33f21                 | usb_cache_end
33f21                 | 
33f21                 | if HAVE_MOUSE
33f21     00 00 00 00 | mouse_xacc      long 0
33f25     00 00 00 00 | mouse_yacc      long 0
33f29     00 00 00 00 | mouse_zacc      long 0
33f2d     00          | mouse_bstate    byte 0
33f2e     00          | mouse_lpending  byte 0
33f2f     00          | mouse_rpending  byte 0
33f30     00          | mouse_mpending  byte 0
33f31     00          | mouse_lock      byte 0
33f32     00 00 00    |                 byte 0[3] ' padding
33f35                 | end
33f35                 | 
33f35     00 00 00 00 
      ...             
33fad     00 00 00 00 
33fb1     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
33fb5     00 00 00 00 
33fb9     00 00 00 00 
33fbd     00 00 00 00 
33fc1     00 00 00 00 
33fc5     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
33fc7     00 00 00 00 
      ...             
340bf     00 00 00 00 
340c3     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
340c7                 | 
340c7     00          | driver_cog      byte    0                       ' Current driver cog + 1
340c8                 | 	alignl
340c8                 | _audio096_spin2_dat_
340c8                 | 
340c8                 | audio       org     0
340c8                 | 
340c8     61 C9 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
340cc     61 17 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
340d0     61 23 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
340d4                 | 
340d4     01 EC 63 FD |             cogid   pa                   ' compute cogid
340d8     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
340dc     F6 C9 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
340e0     E4 C6 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
340e4                 | 
340e4     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
340e8     0E 20 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
340ec     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
340f0     0F 20 06 FC |             wrpin   dac2,#right
340f4     0F 00 1E FC |             wxpin   #256,#right    
340f8     41 9C 64 FD |             dirh    #left addpins 1
340fc     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
34100     CB E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
34104     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
34108                 |             
34108                 | '---------------------------------------------------------------------------------        
34108                 | '----------------- The main loop -------------------------------------------------
34108                 | '---------------------------------------------------------------------------------
34108                 | 
34108     D4 AA 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
3410c     10 00 90 CD |       if_c  jmp     #loop1
34110                 |   
34110     09 FC 05 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
34114     D4 FC 8D F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
34118     D3 00 80 F1 |             sub     0-0,a40000000
3411c     FD FD 6D FB |             djnz    cn,#p402
34120                 |     
34120     00 FC 05 F6 | loop1       mov     cn,#0               ' Find the channel to compute
34124     D6 FE 01 F6 |             mov     ct,time1            ' with the lowest next sample time
34128     D7 FE 39 F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
3412c     01 FC 05 C6 |     if_c    mov     cn,#1
34130     D8 FE 39 F3 |             fle     ct,time3 wcz
34134     02 FC 05 C6 |     if_c    mov     cn,#2     
34138     D9 FE 39 F3 |             fle     ct,time4 wcz
3413c     03 FC 05 C6 |     if_c    mov     cn,#3
34140     DA FE 39 F3 |             fle     ct,time5 wcz
34144     04 FC 05 C6 |     if_c    mov     cn,#4
34148     DB FE 39 F3 |             fle     ct,time6 wcz
3414c     05 FC 05 C6 |     if_c    mov     cn,#5
34150     DC FE 39 F3 |             fle     ct,time7 wcz
34154     06 FC 05 C6 |     if_c    mov     cn,#6
34158     DD FE 39 F3 |             fle     ct,time8 wcz
3415c     07 FC 05 C6 |     if_c    mov     cn,#7
34160                 | 
34160                 | 
34160                 | '----------------------------------------------------------------------------------
34160                 | '------------- Compute channel samples --------------------------------------------
34160                 | '----------------------------------------------------------------------------------
34160                 | 
34160                 | 
34160     FE BC 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
34164     06 BC 65 F0 |             shl     channeladd,#6
34168     DE F0 03 F1 |             add     ptra,channeladd
3416c                 | 
3416c     28 16 64 FD |             setq    #11                        	' read parameters
34170     00 D3 05 FB |             rdlong  pointer0,ptra
34174                 |     	    
34174     1F E0 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
34178     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
3417c     F0 C0 31 F9 |             getword qq,command0,#0            	' get the new rate
34180     4E C0 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
34184     E0 C0 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
34188     00 C0 0D F2 |             cmp     qq,#0 wz                         
3418c     4E 20 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
34190     4E 1E 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
34194                 |             
34194     1E E0 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
34198     E4 C6 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
3419c     00 C6 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
341a0                 | 
341a0     EA 02 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
341a4     EA 04 3A F9 |             getword oldrs,sample0,#1
341a8     EE F8 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
341ac     EE F6 31 F9 |     	    getword avol0,volpan0,#0
341b0     EF F4 39 F9 |             getword askip0,freqskip0,#1    	    
341b4     EF F2 31 F9 |             getword afreq0,freqskip0,#0
341b8                 | 
341b8     D6 FC 95 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
341bc     00 00 02 F6 |             mov     dt0,0-0    
341c0     D5 00 82 F1 |             sub     dt0,time0
341c4                 |             
341c4     D6 FC 8D F9 |             altd    cn, #time1                ' add channel period to channel time
341c8     F9 00 00 F1 |             add     0-0,afreq0  	
341cc                 |             
341cc                 | '---- envelopes
341cc                 |             
341cc     00 E4 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
341d0     20 00 00 AF 
341d4     00 44 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
341d8     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
341dc                 | 
341dc     F9 44 02 F6 |             mov     envs1,afreq0
341e0     F3 44 02 FA |             mul     envs1,envspd0
341e4     22 E3 01 F1 |             add     envph0,envs1 
341e8                 | 
341e8     F1 40 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
341ec     06 40 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
341f0     20 43 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
341f4     10 40 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
341f8     F4 40 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
341fc     F4 40 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
34200     00 42 06 36 |     if_ge   mov     envlo,#0
34204     F4 E2 01 36 |     if_ge   mov     envph0,envlen0
34208     16 E2 65 30 |     if_ge   shl     envph0,#22
3420c                 | 
3420c     20 45 02 F6 |             mov     envs1,envhi			' get the phase acc
34210     01 44 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
34214     F2 44 02 F1 |             add     envs1,envptr0		' and add the pointer
34218     22 45 02 FB |             rdlong  envs1,envs1			' then read 2 entries
3421c     22 47 3A F9 |             getword envs2,envs1,#1		' next value
34220     22 45 32 F9 |             getword envs1,envs1,#0		' current value
34224     21 47 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
34228     21 43 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
3422c     21 45 02 FA |             mul     envs1,envlo
34230     23 45 02 F1 |             add     envs1,envs2
34234     12 44 46 F0 |             shr     envs1,#18			' normalize it to $4000
34238                 |             
34238     1B D6 0D F4 | p410        testb   sstart0, #27 wz
3423c     1B C2 61 AD |     if_z    getrnd  spl
34240     58 00 90 AD |     if_z    jmp     #p406
34244                 |  
34244     FA D2 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
34248     E9 3E C2 F8 |             setbyte pointer00,pointer0,#0
3424c     08 D2 45 F0 |             shr     pointer0,#8
34250                 |          
34250     1F D6 0D F4 |             testb   sstart0,#31 wz            
34254     01 D2 65 A0 |     if_z    shl     pointer0,#1        
34258     1C D6 0D F4 |             testb   sstart0,#28 wz            
3425c     01 D2 65 A0 |     if_z    shl     pointer0,#1        
34260                 |         
34260     ED D2 19 F2 |             cmp     pointer0,lend0 wcz
34264     ED D2 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
34268     EC D2 01 31 |     if_ge   add     pointer0,lstart0       
3426c                 |             
3426c     E9 C0 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
34270     EB C0 01 F1 |             add     qq,sstart0            
34274                 | 
34274     FF C7 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
34278     E0 C2 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
3427c     14 01 B0 1D |     if_gt   call    #cache_read
34280                 |          
34280     1F D6 0D F4 |             testb   sstart0,#31 wz 
34284     08 C2 65 50 |     if_nz   shl     spl,#8
34288     08 D2 65 50 |     if_nz   shl     pointer0,#8
3428c     07 D2 65 A0 |     if_z    shl     pointer0,#7
34290     1C D6 0D F4 |             testb   sstart0,#28 wz            
34294     01 D2 45 A0 |     if_z    shr     pointer0,#1    
34298     1F D3 C1 F8 | 	    setbyte pointer0,pointer00,#0       
3429c                 | 
3429c                 | 
3429c     22 C3 31 FA | p406        scas    spl,envs1			' apply envelope
342a0     00 C2 01 F6 |             mov     spl,0-0
342a4     FB C2 31 FA |             scas    spl,avol0                 	' apply volume
342a8     00 C2 01 F6 |             mov     spl,0-0
342ac                 | 
342ac     FC C2 31 FA |             scas    spl,apan0                 	' apply pan
342b0     00 06 02 F6 |             mov     ls0,0-0
342b4     20 00 00 FF 
342b8     00 C0 05 F6 |             mov     qq,##16384
342bc     FC C0 81 F1 |             sub     qq,apan0
342c0     E0 C2 31 FA |             scas    spl,qq
342c4     00 08 02 F6 |             mov     rs0, 0-0
342c8                 | 
342c8     02 0D 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
342cc     04 0D 02 F1 |             add     rs,rs0
342d0     01 0B 82 F1 |             sub     ls,oldls
342d4     03 0B 02 F1 |             add     ls,ls0
342d8                 |    
342d8     04 D5 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
342dc     03 D5 21 F9 |             setword sample0,ls0,#0
342e0                 |             
342e0     1E D6 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
342e4     00 D2 05 A6 |     if_z    mov     pointer0, #0  		
342e8     00 E2 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
342ec                 |   '  if_z    mov     sample0,#0
342ec     02 D7 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
342f0     1D D6 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
342f4     04 00 00 AF 
342f8     00 AC 05 A1 |     if_z    add     time1,##2048
342fc     D6 AE 01 A6 |     if_z    mov     time2,time1
34300     02 D7 65 AC |     if_z    wrlong  sstart0,ptra[2]
34304                 | 
34304     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
34308     00 D3 65 FC |             wrlong  pointer0,ptra
3430c     08 E3 65 FC |             wrlong  envph0,ptra[8]
34310     DE F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
34314                 |                       
34314     D5 FA 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
34318     FF BF 25 A7 |     if_z    decmod  front, #511          
3431c                 |          
3431c     05 03 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
34320     06 05 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
34324     0F 02 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
34328     0F 04 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
3432c                 | 	    
3432c                 | 		    
3432c     01 05 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
34330     08 0F 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
34334     02 11 02 F6 |             mov     newsample, oldrs       
34338                 | 
34338     D5 FA 01 F6 |             mov     oldt0,time0              ' update global time
3433c     00 AB 01 F1 |             add     time0,dt0    
34340                 |                                      
34340     00 00 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
34344     D8 FD 9F AD |     if_z    jmp     #loop1
34348     00 C1 01 F6 |             mov     qq,dt0
3434c                 |   
3434c     FF F3 97 F9 | p301        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
34350     00 BE 9D F2 |             cmpr    front, #0-0 wcz
34354     F4 FF 9F AD |     if_e    jmp     #p301    
34358                 | 		
34358     00 16 0E F2 | 	    cmp     scbase,#0 wz
3435c     20 00 90 AD |     if_z    jmp     #p302	   
34360                 |   
34360     3F 1C 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
34364     0C 1B 02 C6 |     if_c    mov     scptr2,scptr
34368     02 1A 66 C0 |     if_c    shl     scptr2,#2
3436c     0B 1B 02 C1 |     if_c    add     scptr2,scbase     
34370     60 1A 66 FC |             wrlong  scptr2,#$60
34374     0D 0F 62 CC |     if_c    wrlong  oldsample,scptr2
34378     01 00 00 CF 
3437c     7F 18 06 C7 |     if_c    incmod  scptr,##639
34380                 | 			    
34380     DF 0E 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
34384     00 00 00 FF 
34388     FF BF 05 F7 |             incmod  front, ##511
3438c     EF C1 6D FB |             djnz    qq,#p301
34390                 |             
34390     74 FD 9F FD |             jmp     #loop            'loop
34394                 | 
34394                 | '----------------------------------------------------------------------------------
34394                 | '------------- This is the end of the main loop -----------------------------------
34394                 | '----------------------------------------------------------------------------------
34394                 | 
34394                 | '----------------------------------------------------------------------------------
34394                 | '------------- PSRAM cache ----------- --------------------------------------------
34394                 | '----------------------------------------------------------------------------------
34394                 | 
34394                 | ' There are 8 cache pointers for 8 channels
34394                 | ' if 24 higher bits of address=cache, then get a word from the cache
34394                 | ' else load the cache from PSRAM, update the pointer, then read a sample
34394                 | 
34394                 | 
34394     E0 3A E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
34398                 |             
34398     E0 3C 02 F6 | 	    mov     addrhi,qq		
3439c     08 3C 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
343a0     12 FD 95 F9 | 	    alts    cn,#cache1            
343a4     00 3C 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
343a8     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
343ac                 | 	
343ac     12 FD 8D F9 | p702	    altd    cn,#cache1			' cache miss. 
343b0     1E 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
343b4     1E 35 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
343b8     08 34 66 F0 | 	    shl     cmd,#8
343bc     0B 34 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
343c0     FE 36 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
343c4     08 36 66 F0 |             shl     hubaddr,#8                  '
343c8     11 37 02 F1 |             add     hubaddr,hubptr 
343cc     00 39 06 F6 |             mov     count,#256                  ' 256 bytes
343d0     28 04 64 FD |             setq    #2                          ' write 3 longs
343d4     E3 34 62 FC |             wrlong  cmd, mailbox                ' run it
343d8     E3 34 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
343dc     FE 35 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
343e0                 |             
343e0                 | 	
343e0     FE C0 01 F6 | p701	    mov     qq,cn			' cache hit
343e4     08 C0 65 F0 | 	    shl     qq,#8			' compute the cache start
343e8     11 C1 01 F1 | 	    add     qq,hubptr
343ec     1D C1 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
343f0     E0 C2 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
343f4                 |           
343f4                 | 
343f4                 | '--------------------------------------------------------------------------
343f4                 | '------ Interrupt service -------------------------------------------------
343f4                 | '------ Output the sample, get the next one if exists ---------------------
343f4                 | '--------------------------------------------------------------------------
343f4                 | 
343f4     0E CA 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
343f8     0F CC 25 FC |             wypin   rsample,#right       '4
343fc     DF F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
34400     80 CF A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
34404     FF F3 07 57 |     if_ne   incmod  ptrb,#511
34408     E7 CC 39 59 |     if_ne   getword rsample,lsnext,#1    '13
3440c     E7 CA 31 59 |     if_ne   getword lsample,lsnext,#0    '15
34410                 |     
34410     F5 FF 3B FB |             reti1                        '17/19 
34414                 |           
34414                 | '---------------------------------------------------------------------------
34414                 | '-------- End of interrupt -------------------------------------------------
34414                 | '---------------------------------------------------------------------------    
34414                 | 
34414                 | 
34414                 | '---------------------------------------------------------------------------
34414                 | '------- Variables ---------------------------------------------------------
34414                 | '---------------------------------------------------------------------------
34414                 | 
34414                 | ' constants
34414                 | 
34414     00 00 00 40 | a40000000   long $40000000
34418     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
3441c                 | 
3441c                 | ' Time variables
3441c                 | 
3441c     00 00 00 00 | time0       long 0    ' Global sample computing time
34420     01 00 00 00 | time1       long 1    ' Local channels time
34424     02 00 00 00 | time2       long 2
34428     03 00 00 00 | time3       long 3
3442c     04 00 00 00 | time4       long 4
34430     05 00 00 00 | time5       long 5
34434     06 00 00 00 | time6       long 6
34438     07 00 00 00 | time7       long 7
3443c     08 00 00 00 | time8       long 8
34440                 | 
34440     00 00 00 00 | channeladd long 0
34444                 | 
34444     00 00 00 00 | front       long 0
34448                 | 
34448                 | ' temporary variables 
34448     00 00 00 00 | qq          long 0
3444c     00 00 00 00 | spl         long 0
34450     00 00 00 00 | zero        long 0
34454     00 00 00 00 | mailbox     long 0
34458     00 00 00 00 | mailbox2 long 0
3445c                 | 
3445c                 | ' Interrupt ISR variables
3445c                 | 
3445c     00 00 00 00 | lsample     long 0
34460     00 00 00 00 | rsample     long 0
34464     00 00 00 00 | lsnext      long 0
34468     00 00 00 00 | rsnext      long 0 
3446c                 | 
3446c                 | ' channel parameter block
3446c                 | 
3446c     00 00 00 00 | pointer0    long 0     
34470     00 00 00 00 | sample0     long 0
34474     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
34478     00 00 00 00 | lstart0     long 0
3447c     00 00 00 00 | lend0       long 0
34480     00 00 00 00 | volpan0     long 0
34484     00 00 00 00 | freqskip0   long 0
34488     00 00 00 00 | command0    long 0
3448c     00 00 00 00 | envph0	    long 0
34490     00 00 00 00 | envptr0	    long 0
34494     00 00 00 00 | envspd0	    long 0
34498     00 00 00 00 | envlen0	    long 0
3449c     00 00 00 00 | res5	    long 0
344a0     00 00 00 00 | res6	    long 0
344a4     00 00 00 00 | res7	    long 0
344a8     00 00 00 00 | res8	    long 0
344ac                 | 
344ac     00 00 00 00 | afreq0      long 0
344b0     00 00 00 00 | askip0      long 0
344b4     00 00 00 00 | avol0       long 0
344b8     00 00 00 00 | apan0       long 0
344bc                 | 
344bc     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
344c0     00 00 00 00 | cn          long 0
344c4     00 00 00 00 | ct          long 0
344c8     00 00 00 00 | dt0         long 0
344cc                 | 
344cc                 | ' Samples
344cc     00 00 00 00 | oldls       long 0
344d0     00 00 00 00 | oldrs       long 0
344d4                 | 
344d4     00 00 00 00 | ls0         long 0
344d8     00 00 00 00 | rs0         long 0
344dc                 | 
344dc     00 00 00 00 | ls          long 0    
344e0     00 00 00 00 | rs          long 0
344e4                 | 
344e4     00 00 00 00 | oldsample   long 0
344e8     00 00 00 00 | newsample   long 0
344ec                 | 
344ec     00 00 00 00 | nrsample    long 0
344f0     00 00 00 00 | nlsample    long 0
344f4                 | 
344f4     00 00 00 00 | scbase long 0
344f8     00 00 00 00 | scptr long 0
344fc     00 00 00 00 | scptr2 long 0
34500     00 00 00 00 | scope long 0
34504                 | 
34504     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
34508     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
3450c                 | 
3450c     00 18 07 00 | hubptr      long $71800
34510     00 00 00 00 | cache1      long 0
34514     00 00 00 00 | cache2      long 0
34518     00 00 00 00 | cache3      long 0
3451c     00 00 00 00 | cache4      long 0
34520     00 00 00 00 | cache5      long 0
34524     00 00 00 00 | cache6      long 0
34528     00 00 00 00 | cache7      long 0
3452c     00 00 00 00 | cache8      long 0
34530                 | 
34530                 | 
34530     00 00 00 00 | cmd         long 0
34534     00 00 00 00 | hubaddr     long 0
34538     00 01 00 00 | count       long 256
3453c     00 00 00 00 | addrlo long 0
34540     00 00 00 00 | addrhi long 0
34544     00 00 00 00 | pointer00 long 0
34548     00 00 00 00 | envhi long 0
3454c     00 00 00 00 | envlo long 0
34550     00 00 00 00 | envs1 long 0
34554     00 00 00 00 | envs2 long 0
34558     00 00 00 00 | noise0 long 0
3455c     00 00 00 00 
34560     00 00 00 00 | null  			long 	0,0           ' for channel reset
34564                 | 	alignl
34564                 | __system__dat_
34564     00 00 00 00 
34568     00 00 00 00 | 	byte	$00[8]
3456c     03 00 00 00 
34570     00 00 00 00 
34574     00 00 00 00 
34578     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3457c     00 00 00 00 
      ...             
34808     00 00 00 00 
3480c     00 00 00 00 | 	byte	$00[660]
34810     00 00 20 07 | 	long	(114 {__system____root_opendir})<<20
34814     00 00 30 07 | 	long	(115 {__system____root_closedir})<<20
34818     00 00 40 07 | 	long	(116 {__system____root_readdir})<<20
3481c     00 00 50 07 | 	long	(117 {__system____root_stat})<<20
34820     00 00 00 00 
34824     00 00 00 00 
34828     00 00 00 00 
3482c     00 00 00 00 
34830     00 00 00 00 
34834     00 00 00 00 
34838     00 00 00 00 | 	byte	$00[28]
3483c     A4 48 03 00 | 	long	@@@__system__dat_ + 832
34840     A7 48 03 00 | 	long	@@@__system__dat_ + 835
34844     C8 48 03 00 | 	long	@@@__system__dat_ + 868
34848     E1 48 03 00 | 	long	@@@__system__dat_ + 893
3484c     FC 48 03 00 | 	long	@@@__system__dat_ + 920
34850     16 49 03 00 | 	long	@@@__system__dat_ + 946
34854     26 49 03 00 | 	long	@@@__system__dat_ + 962
34858     38 49 03 00 | 	long	@@@__system__dat_ + 980
3485c     4A 49 03 00 | 	long	@@@__system__dat_ + 998
34860     5C 49 03 00 | 	long	@@@__system__dat_ + 1016
34864     68 49 03 00 | 	long	@@@__system__dat_ + 1028
34868     79 49 03 00 | 	long	@@@__system__dat_ + 1045
3486c     8D 49 03 00 | 	long	@@@__system__dat_ + 1065
34870     97 49 03 00 | 	long	@@@__system__dat_ + 1075
34874     A7 49 03 00 | 	long	@@@__system__dat_ + 1091
34878     B6 49 03 00 | 	long	@@@__system__dat_ + 1106
3487c     CC 49 03 00 | 	long	@@@__system__dat_ + 1128
34880     E5 49 03 00 | 	long	@@@__system__dat_ + 1153
34884     F9 49 03 00 | 	long	@@@__system__dat_ + 1173
34888     07 4A 03 00 | 	long	@@@__system__dat_ + 1187
3488c     1B 4A 03 00 | 	long	@@@__system__dat_ + 1207
34890     27 4A 03 00 | 	long	@@@__system__dat_ + 1219
34894     39 4A 03 00 | 	long	@@@__system__dat_ + 1237
34898     51 4A 03 00 | 	long	@@@__system__dat_ + 1261
3489c     63 4A 03 00 | 	long	@@@__system__dat_ + 1279
348a0     76 4A 03 00 | 	long	@@@__system__dat_ + 1298
348a4     4F 4B 00 4E 
348a8     75 6D 65 72 
348ac     69 63 61 6C 
348b0     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
348b4     75 6D 65 6E 
348b8     74 20 6F 75 
348bc     74 20 6F 66 
348c0     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
348c4     61 69 6E 00 
348c8     52 65 73 75 
348cc     6C 74 20 6E 
348d0     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
348d4     65 70 72 65 
348d8     73 65 6E 74 
348dc     61 62 6C 65 
348e0     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
348e4     65 67 61 6C 
348e8     20 6D 75 6C 
348ec     74 69 62 79 
348f0     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
348f4     65 71 75 65 
348f8     6E 63 65 00 
348fc     4E 6F 20 73 
34900     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
34904     66 69 6C 65 
34908     20 6F 72 20 
3490c     64 69 72 65 
34910     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
34914     79 00 42 61 
34918     64 20 66 69 
3491c     6C 65 20 6E 
34920     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
34924     72 00 50 65 
34928     72 6D 69 73 
3492c     73 69 6F 6E 
34930     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
34934     69 65 64 00 
34938     4E 6F 74 20 
3493c     65 6E 6F 75 
34940     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
34944     65 6D 6F 72 
34948     79 00 54 65 
3494c     6D 70 6F 72 
34950     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
34954     66 61 69 6C 
34958     75 72 65 00 
3495c     46 69 6C 65 
34960     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
34964     73 74 73 00 
34968     49 6E 76 61 
3496c     6C 69 64 20 
34970     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
34974     6D 65 6E 74 
34978     00 54 6F 6F 
3497c     20 6D 61 6E 
34980     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
34984     65 6E 20 66 
34988     69 6C 65 73 
3498c     00 49 2F 4F 
34990     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
34994     6F 72 00 4E 
34998     6F 74 20 61 
3499c     20 64 69 72 
349a0     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
349a4     72 79 00 49 
349a8     73 20 61 20 
349ac     64 69 72 65 
349b0     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
349b4     79 00 52 65 
349b8     61 64 20 6F 
349bc     6E 6C 79 20 
349c0     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
349c4     20 73 79 73 
349c8     74 65 6D 00 
349cc     46 75 6E 63 
349d0     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
349d4     20 6E 6F 74 
349d8     20 69 6D 70 
349dc     6C 65 6D 65 
349e0     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
349e4     00 44 69 72 
349e8     65 63 74 6F 
349ec     72 79 20 6E 
349f0     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
349f4     6D 70 74 79 
349f8     00 4E 61 6D 
349fc     65 20 74 6F 
34a00     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
34a04     6E 67 00 44 
34a08     65 76 69 63 
34a0c     65 20 6E 6F 
34a10     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
34a14     65 6B 61 62 
34a18     6C 65 00 42 
34a1c     61 64 20 61 
34a20     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
34a24     73 73 00 42 
34a28     72 6F 6B 65 
34a2c     6E 20 63 6F 
34a30     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
34a34     74 69 6F 6E 
34a38     00 44 65 76 
34a3c     69 63 65 20 
34a40     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
34a44     65 73 6F 75 
34a48     72 63 65 20 
34a4c     62 75 73 79 
34a50     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
34a54     73 73 20 64 
34a58     65 76 69 63 
34a5c     65 20 6C 69 
34a60     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
34a64     6F 20 73 70 
34a68     61 63 65 20 
34a6c     6F 6E 20 64 
34a70     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
34a74     65 00 55 6E 
34a78     6B 6E 6F 77 
34a7c     6E 20 65 72 
34a80     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
34a84     00 00 00 00 
34a88     00 00 00 00 | 	byte	$00[8]
34a8c     05 00 00 00 
34a90     00 00 00 00 
34a94     00 00 00 00 
34a98     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34a9c     00 00 00 00 | 	byte	$00, $00, $00, $00
34aa0     00 00 A0 08 | 	long	(138 {__system___tx})<<20
34aa4     00 00 B0 08 | 	long	(139 {__system___rx})<<20
34aa8     00 00 00 00 | 	byte	$00, $00, $00, $00
34aac     00 00 C0 08 | 	long	(140 {__system___rxtxioctl_0598})<<20
34ab0     00 00 D0 08 | 	long	(141 {__system____dummy_flush_0599})<<20
34ab4     00 00 00 00 
34ab8     00 00 00 00 | 	byte	$00[8]
34abc     01 00 00 00 
34ac0     06 00 00 00 
34ac4     00 00 00 00 
34ac8     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34acc     00 00 00 00 
34ad0     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
34ad4     00 00 A0 08 | 	long	(138 {__system___tx})<<20
34ad8     00 00 B0 08 | 	long	(139 {__system___rx})<<20
34adc     00 00 00 00 | 	byte	$00, $00, $00, $00
34ae0     00 00 C0 08 | 	long	(140 {__system___rxtxioctl_0598})<<20
34ae4     00 00 D0 08 | 	long	(141 {__system____dummy_flush_0599})<<20
34ae8     00 00 00 00 
34aec     00 00 00 00 | 	byte	$00[8]
34af0     01 00 00 00 
34af4     06 00 00 00 
34af8     00 00 00 00 
34afc     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34b00     00 00 00 00 
34b04     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
34b08     00 00 A0 08 | 	long	(138 {__system___tx})<<20
34b0c     00 00 B0 08 | 	long	(139 {__system___rx})<<20
34b10     00 00 00 00 | 	byte	$00, $00, $00, $00
34b14     00 00 C0 08 | 	long	(140 {__system___rxtxioctl_0598})<<20
34b18     00 00 D0 08 | 	long	(141 {__system____dummy_flush_0599})<<20
34b1c     00 00 00 00 
      ...             
34c8c     00 00 00 00 
34c90     00 00 00 00 | 	byte	$00[376]
34c94     98 4C 03 00 | 	long	@@@__system__dat_ + 1844
34c98     00 00 00 00 
34c9c     00 00 00 00 
34ca0     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34ca4                 | 	alignl
34ca4                 | _fatfs_cc_dat_
34ca4     C7 00 FC 00 
34ca8     E9 00 E2 00 
34cac     E4 00 E0 00 
34cb0     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
34cb4     EA 00 EB 00 
34cb8     E8 00 EF 00 
34cbc     EE 00 EC 00 
34cc0     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
34cc4     C9 00 E6 00 
34cc8     C6 00 F4 00 
34ccc     F6 00 F2 00 
34cd0     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
34cd4     FF 00 D6 00 
34cd8     DC 00 F8 00 
34cdc     A3 00 D8 00 
34ce0     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
34ce4     E1 00 ED 00 
34ce8     F3 00 FA 00 
34cec     F1 00 D1 00 
34cf0     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
34cf4     BF 00 AE 00 
34cf8     AC 00 BD 00 
34cfc     BC 00 A1 00 
34d00     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
34d04     91 25 92 25 
34d08     93 25 02 25 
34d0c     24 25 C1 00 
34d10     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
34d14     A9 00 63 25 
34d18     51 25 57 25 
34d1c     5D 25 A2 00 
34d20     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
34d24     14 25 34 25 
34d28     2C 25 1C 25 
34d2c     00 25 3C 25 
34d30     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
34d34     5A 25 54 25 
34d38     69 25 66 25 
34d3c     60 25 50 25 
34d40     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
34d44     F0 00 D0 00 
34d48     CA 00 CB 00 
34d4c     C8 00 31 01 
34d50     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
34d54     CF 00 18 25 
34d58     0C 25 88 25 
34d5c     84 25 A6 00 
34d60     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
34d64     D3 00 DF 00 
34d68     D4 00 D2 00 
34d6c     F5 00 D5 00 
34d70     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
34d74     DE 00 DA 00 
34d78     DB 00 D9 00 
34d7c     FD 00 DD 00 
34d80     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
34d84     AD 00 B1 00 
34d88     17 20 BE 00 
34d8c     B6 00 A7 00 
34d90     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
34d94     B0 00 A8 00 
34d98     B7 00 B9 00 
34d9c     B3 00 B2 00 
34da0     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
34da4     61 00 1A 03 
34da8     E0 00 17 03 
34dac     F8 00 07 03 
34db0     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
34db4     78 01 00 01 
34db8     30 01 32 01 
34dbc     06 01 39 01 
34dc0     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
34dc4     2E 01 79 01 
34dc8     06 01 80 01 
34dcc     4D 00 43 02 
34dd0     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
34dd4     82 01 84 01 
34dd8     84 01 86 01 
34ddc     87 01 87 01 
34de0     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
34de4     8B 01 8B 01 
34de8     8D 01 8E 01 
34dec     8F 01 90 01 
34df0     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
34df4     93 01 94 01 
34df8     F6 01 96 01 
34dfc     97 01 98 01 
34e00     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
34e04     9B 01 9C 01 
34e08     9D 01 20 02 
34e0c     9F 01 A0 01 
34e10     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
34e14     A2 01 A4 01 
34e18     A4 01 A6 01 
34e1c     A7 01 A7 01 
34e20     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
34e24     AB 01 AC 01 
34e28     AC 01 AE 01 
34e2c     AF 01 AF 01 
34e30     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
34e34     B3 01 B3 01 
34e38     B5 01 B5 01 
34e3c     B7 01 B8 01 
34e40     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
34e44     BB 01 BC 01 
34e48     BC 01 BE 01 
34e4c     F7 01 C0 01 
34e50     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
34e54     C3 01 C4 01 
34e58     C5 01 C4 01 
34e5c     C7 01 C8 01 
34e60     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
34e64     CB 01 CA 01 
34e68     CD 01 10 01 
34e6c     DD 01 01 00 
34e70     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
34e74     12 01 F3 01 
34e78     03 00 F1 01 
34e7c     F4 01 F4 01 
34e80     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
34e84     22 02 12 01 
34e88     3A 02 09 00 
34e8c     65 2C 3B 02 
34e90     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
34e94     66 2C 3F 02 
34e98     40 02 41 02 
34e9c     41 02 46 02 
34ea0     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
34ea4     40 00 81 01 
34ea8     86 01 55 02 
34eac     89 01 8A 01 
34eb0     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
34eb4     5A 02 90 01 
34eb8     5C 02 5D 02 
34ebc     5E 02 5F 02 
34ec0     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
34ec4     62 02 94 01 
34ec8     64 02 65 02 
34ecc     66 02 67 02 
34ed0     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
34ed4     6A 02 62 2C 
34ed8     6C 02 6D 02 
34edc     6E 02 9C 01 
34ee0     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
34ee4     9D 01 73 02 
34ee8     74 02 9F 01 
34eec     76 02 77 02 
34ef0     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
34ef4     7A 02 7B 02 
34ef8     7C 02 64 2C 
34efc     7E 02 7F 02 
34f00     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
34f04     82 02 A9 01 
34f08     84 02 85 02 
34f0c     86 02 87 02 
34f10     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
34f14     B1 01 B2 01 
34f18     45 02 8D 02 
34f1c     8E 02 8F 02 
34f20     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
34f24     B7 01 7B 03 
34f28     03 00 FD 03 
34f2c     FE 03 FF 03 
34f30     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
34f34     86 03 88 03 
34f38     89 03 8A 03 
34f3c     B1 03 11 03 
34f40     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
34f44     A3 03 A3 03 
34f48     C4 03 08 03 
34f4c     CC 03 03 00 
34f50     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
34f54     8F 03 D8 03 
34f58     18 01 F2 03 
34f5c     0A 00 F9 03 
34f60     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
34f64     F5 03 F6 03 
34f68     F7 03 F7 03 
34f6c     F9 03 FA 03 
34f70     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
34f74     20 03 50 04 
34f78     10 07 60 04 
34f7c     22 01 8A 04 
34f80     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
34f84     0E 01 CF 04 
34f88     01 00 C0 04 
34f8c     D0 04 44 01 
34f90     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
34f94     00 00 7D 1D 
34f98     01 00 63 2C 
34f9c     00 1E 96 01 
34fa0     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
34fa4     00 1F 08 06 
34fa8     10 1F 06 06 
34fac     20 1F 08 06 
34fb0     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
34fb4     40 1F 06 06 
34fb8     51 1F 07 00 
34fbc     59 1F 52 1F 
34fc0     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
34fc4     5D 1F 56 1F 
34fc8     5F 1F 60 1F 
34fcc     08 06 70 1F 
34fd0     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
34fd4     BB 1F C8 1F 
34fd8     C9 1F CA 1F 
34fdc     CB 1F DA 1F 
34fe0     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
34fe4     F9 1F EA 1F 
34fe8     EB 1F FA 1F 
34fec     FB 1F 80 1F 
34ff0     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
34ff4     08 06 A0 1F 
34ff8     08 06 B0 1F 
34ffc     04 00 B8 1F 
35000     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
35004     BC 1F CC 1F 
35008     01 00 C3 1F 
3500c     D0 1F 02 06 
35010     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
35014     E5 1F 01 00 
35018     EC 1F F3 1F 
3501c     01 00 FC 1F 
35020     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
35024     32 21 70 21 
35028     10 02 84 21 
3502c     01 00 83 21 
35030     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
35034     30 2C 2F 04 
35038     60 2C 02 01 
3503c     67 2C 06 01 
35040     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
35044     80 2C 64 01 
35048     00 2D 26 08 
3504c     41 FF 1A 03 
35050     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
35054     05 07 09 0E 
35058     10 12 14 16 
3505c     18 1C 1E 43 
35060     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
35064     41 41 43 45 
35068     45 45 49 49 
3506c     49 41 41 45 
35070     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
35074     4F 55 55 59 
35078     4F 55 4F 9C 
3507c     4F 9E 9F 41 
35080     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
35084     A5 A6 A7 A8 
35088     A9 AA AB AC 
3508c     AD AE AF B0 
35090     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
35094     41 41 41 B8 
35098     B9 BA BB BC 
3509c     BD BE BF C0 
350a0     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
350a4     C5 41 41 C8 
350a8     C9 CA CB CC 
350ac     CD CE CF D1 
350b0     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
350b4     49 49 49 49 
350b8     D9 DA DB DC 
350bc     DD 49 DF 4F 
350c0     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
350c4     4F E6 E8 E8 
350c8     55 55 55 59 
350cc     59 EE EF F0 
350d0     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
350d4     F5 F6 F7 F8 
350d8     F9 FA FB FC 
350dc     FD FE FF 00 
350e0     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
350e4     00 00 00 00 | 	byte	$00, $00, $00, $00
350e8     00 00 90 07 | 	long	(121 {_fatfs_cc_v_close})<<20
350ec     00 00 A0 07 | 	long	(122 {_fatfs_cc_v_read})<<20
350f0     00 00 B0 07 | 	long	(123 {_fatfs_cc_v_write})<<20
350f4     00 00 C0 07 | 	long	(124 {_fatfs_cc_v_lseek})<<20
350f8     00 00 D0 07 | 	long	(125 {_fatfs_cc_v_ioctl})<<20
350fc     00 00 E0 08 | 	long	(142 {_fatfs_cc_v_flush})<<20
35100     00 00 00 00 
35104     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
35108     00 00 E0 07 | 	long	(126 {_fatfs_cc_v_open})<<20
3510c     00 00 F0 07 | 	long	(127 {_fatfs_cc_v_creat})<<20
35110     00 00 00 08 | 	long	(128 {_fatfs_cc_v_opendir})<<20
35114     00 00 10 08 | 	long	(129 {_fatfs_cc_v_closedir})<<20
35118     00 00 20 08 | 	long	(130 {_fatfs_cc_v_readdir})<<20
3511c     00 00 30 08 | 	long	(131 {_fatfs_cc_v_stat})<<20
35120     00 00 40 08 | 	long	(132 {_fatfs_cc_v_mkdir})<<20
35124     00 00 50 08 | 	long	(133 {_fatfs_cc_v_rmdir})<<20
35128     00 00 60 08 | 	long	(134 {_fatfs_cc_v_remove})<<20
3512c     00 00 70 08 | 	long	(135 {_fatfs_cc_v_rename})<<20
35130     00 00 80 08 | 	long	(136 {_fatfs_cc_v_init})<<20
35134     00 00 90 08 | 	long	(137 {_fatfs_cc_v_deinit})<<20
35138     FF FF FF FF 
3513c     1F 00 00 00 
35140     1C 00 00 00 
35144     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
35148     1E 00 00 00 
3514c     1F 00 00 00 
35150     1E 00 00 00 
35154     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
35158     1F 00 00 00 
3515c     1E 00 00 00 
35160     1F 00 00 00 
35164     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
35168     1F 00 00 00 
3516c     00 00 00 00 
35170     1F 00 00 00 
35174     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
35178     5A 00 00 00 
3517c     78 00 00 00 
35180     97 00 00 00 
35184     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
35188     D4 00 00 00 
3518c     F3 00 00 00 
35190     11 01 00 00 
35194     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
35198     4E 01 00 00 
3519c     6D 01 00 00 
351a0     FF FF FF FF 
351a4     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
351a8     00 00 00 00 
      ...             
351c0     00 00 00 00 
351c4     00 00 00 00 | 	byte	$00[32]
351c8     E6 51 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
351cc     EA 51 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
351d0     00 00 00 00 
351d4     00 00 00 00 
351d8     00 00 00 00 
351dc     00 00 00 00 
351e0     00 00       | 	byte	$00[18]
351e2     3F 3F 3F 00 
351e6     55 43 54 00 
351ea     55 43 54 00 
351ee     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
351f2     00 00 00 00 
351f6     00 00 00    | 	byte	$00[7]
351f9     CA 9A 3B 00 
351fd     00 00 00 01 
35201     01 01 01 01 
35205     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
35209     91 11 11 11 
3520d     11 01 01 01 
35211     01 01 01 01 
35215     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
35219     01 01 01 01 
3521d     01 01 01    | 	byte	$01[7]
35220     90 20 20 20 
35224     20 20 20 20 
35228     20 20 20 20 
3522c     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
35230     42 42 42 42 
35234     42 42 42 42 
35238     42 42       | 	byte	$42[10]
3523a     20 20 20 20 
3523e     20 20 20    | 	byte	$20[7]
35241     44 44 44 44 
35245     44 44       | 	byte	$44[6]
35247     04 04 04 04 
3524b     04 04 04 04 
3524f     04 04 04 04 
35253     04 04 04 04 
35257     04 04 04 04 | 	byte	$04[20]
3525b     20 20 20 20 
3525f     20 20       | 	byte	$20[6]
35261     48 48 48 48 
35265     48 48       | 	byte	$48[6]
35267     08 08 08 08 
3526b     08 08 08 08 
3526f     08 08 08 08 
35273     08 08 08 08 
35277     08 08 08 08 | 	byte	$08[20]
3527b     20 20 20 20 
3527f     01 00 00 00 
35283     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
35284                 | __methodtable__
35284     24 5D 01 00 | 	long	@_do_no_command
35288     84 E7 00 00 | 	long	@_do_plus
3528c     70 EC 00 00 | 	long	@_do_minus
35290     38 F1 00 00 | 	long	@_do_or
35294     50 F2 00 00 | 	long	@_do_mul
35298     DC F7 00 00 | 	long	@_do_fdiv
3529c     20 F0 00 00 | 	long	@_do_and
352a0     BC F5 00 00 | 	long	@_do_div
352a4     A4 F9 00 00 | 	long	@_do_mod
352a8     C4 FB 00 00 | 	long	@_do_shl
352ac     DC FC 00 00 | 	long	@_do_shr
352b0     F4 FD 00 00 | 	long	@_do_power
352b4     CC E1 00 00 | 	long	@_do_getvar
352b8     70 9C 00 00 | 	long	@_do_push
352bc     80 DA 00 00 | 	long	@_do_assign
352c0     70 35 01 00 | 	long	@_do_cls
352c4     7C D4 00 00 | 	long	@_do_new
352c8     14 36 01 00 | 	long	@_do_plot
352cc     E4 36 01 00 | 	long	@_do_draw
352d0     58 40 01 00 | 	long	@_do_print
352d4     50 39 01 00 | 	long	@_do_circle
352d8     D8 37 01 00 | 	long	@_do_fcircle
352dc     C8 3A 01 00 | 	long	@_do_box
352e0     70 3E 01 00 | 	long	@_do_frame
352e4     DC 35 01 00 | 	long	@_do_color
352e8     74 7C 00 00 | 	long	@_do_for
352ec     A0 7E 00 00 | 	long	@_do_next
352f0     E0 D1 00 00 | 	long	@_do_list
352f4     C0 AC 00 00 | 	long	@_do_run
352f8     3C D9 00 00 | 	long	@_do_error
352fc     38 D6 00 00 | 	long	@_do_fast_goto
35300     28 D7 00 00 | 	long	@_do_find_goto
35304     38 D9 00 00 | 	long	@_do_slow_goto
35308     BC 1C 01 00 | 	long	@_do_converttoint
3530c     B4 A2 00 00 | 	long	@_test_csave
35310     08 A6 00 00 | 	long	@_do_save
35314     F4 A8 00 00 | 	long	@_do_load
35318     B8 4E 01 00 | 	long	@_do_pinwrite
3531c     58 53 01 00 | 	long	@_do_waitms
35320     94 54 01 00 | 	long	@_do_waitvbl
35324     94 57 01 00 | 	long	@_do_if
35328     78 58 01 00 | 	long	@_do_else
3532c     40 59 01 00 | 	long	@_do_nothing
35330     BC FF 00 00 | 	long	@_do_eq
35334     34 0E 01 00 | 	long	@_do_ge
35338     0C 13 01 00 | 	long	@_do_le
3533c     94 04 01 00 | 	long	@_do_gt
35340     6C 09 01 00 | 	long	@_do_lt
35344     E4 17 01 00 | 	long	@_do_ne
35348     98 1F 01 00 | 	long	@_do_rnd
3534c     44 59 01 00 | 	long	@_do_brun
35350     10 5C 01 00 | 	long	@_do_beep
35354     C4 54 01 00 | 	long	@_do_dir
35358     20 45 01 00 | 	long	@_do_paper
3535c     A8 45 01 00 | 	long	@_do_ink
35360     44 46 01 00 | 	long	@_do_font
35364     C0 46 01 00 | 	long	@_do_mode
35368     7C 5B 01 00 | 	long	@_do_mouse
3536c     08 35 01 00 | 	long	@_do_gettime
35370     B0 5B 01 00 | 	long	@_do_cursor
35374     E4 5B 01 00 | 	long	@_do_click
35378     94 32 01 00 | 	long	@_do_mousex
3537c     D8 32 01 00 | 	long	@_do_mousey
35380     60 33 01 00 | 	long	@_do_mousek
35384     1C 33 01 00 | 	long	@_do_mousew
35388     6C 22 01 00 | 	long	@_do_sin
3538c     C0 29 01 00 | 	long	@_do_stick
35390     44 2B 01 00 | 	long	@_do_strig
35394     A8 31 01 00 | 	long	@_do_sprite
35398     18 2E 01 00 | 	long	@_do_defsprite
3539c     C8 2C 01 00 | 	long	@_do_getpixel
353a0     A0 54 01 00 | 	long	@_do_waitclock
353a4     30 5D 01 00 | 	long	@_do_negative
353a8     A4 33 01 00 | 	long	@_do_rdpin
353ac     10 34 01 00 | 	long	@_do_rqpin
353b0     84 34 01 00 | 	long	@_do_pinread
353b4     50 51 01 00 | 	long	@_do_wrpin
353b8     D0 51 01 00 | 	long	@_do_wxpin
353bc     50 52 01 00 | 	long	@_do_wypin
353c0     40 4F 01 00 | 	long	@_do_pinfloat
353c4     80 4F 01 00 | 	long	@_do_pinlo
353c8     C0 4F 01 00 | 	long	@_do_pinhi
353cc     40 50 01 00 | 	long	@_do_pinstart
353d0     00 50 01 00 | 	long	@_do_pintoggle
353d4     D0 52 01 00 | 	long	@_do_position
353d8     78 23 01 00 | 	long	@_do_cos
353dc     98 24 01 00 | 	long	@_do_tan
353e0     BC 27 01 00 | 	long	@_do_atn
353e4     A4 25 01 00 | 	long	@_do_asin
353e8     B0 26 01 00 | 	long	@_do_acos
353ec     D0 28 01 00 | 	long	@_do_sqr
353f0     B0 3C 01 00 | 	long	@_do_fill
353f4     E8 C7 00 00 | 	long	@_do_defsnd
353f8     E4 AF 00 00 | 	long	@_do_defenv
353fc     9C 58 01 00 | 	long	@_do_rad
35400     C4 58 01 00 | 	long	@_do_deg
35404     EC 58 01 00 | 	long	@_do_int
35408     8C BC 00 00 | 	long	@_do_play
3540c     18 4C 01 00 | 	long	@_do_setdelay
35410     70 4B 01 00 | 	long	@_do_setenv
35414     C0 4C 01 00 | 	long	@_do_setlen
35418     10 4E 01 00 | 	long	@_do_setpan
3541c     68 4D 01 00 | 	long	@_do_setvol
35420     24 4A 01 00 | 	long	@_do_setwave
35424     C8 4A 01 00 | 	long	@_do_setsustain
35428     50 C7 00 00 | 	long	@_do_release
3542c     60 21 01 00 | 	long	@_do_getenvsustain
35430     AC 99 01 00 | 	long	@_hg010b_spin2_putchar
35434     D4 A0 02 00 | 	long	@__struct___bas_wrap_sender_tx
35438     18 A1 02 00 | 	long	@__struct___bas_wrap_sender_rx
3543c     60 A1 02 00 | 	long	@__struct___bas_wrap_sender_close
35440     04 A0 02 00 | 	long	@__struct__s_vfs_file_t_putchar
35444     74 A0 02 00 | 	long	@__struct__s_vfs_file_t_getchar
35448     BC 9F 02 00 | 	long	@___strs_cl_pfunc
3544c     2C FF 01 00 | 	long	@__system____root_opendir
35450     C8 FF 01 00 | 	long	@__system____root_closedir
35454     44 FF 01 00 | 	long	@__system____root_readdir
35458     D0 FF 01 00 | 	long	@__system____root_stat
3545c     58 F8 01 00 | 	long	@__system____default_putc
35460     DC F7 01 00 | 	long	@__system____default_getc
35464     00 F9 01 00 | 	long	@__system____default_flush
35468     D0 8A 02 00 | 	long	@_fatfs_cc_v_close
3546c     EC 8E 02 00 | 	long	@_fatfs_cc_v_read
35470     00 90 02 00 | 	long	@_fatfs_cc_v_write
35474     E0 90 02 00 | 	long	@_fatfs_cc_v_lseek
35478     68 91 02 00 | 	long	@_fatfs_cc_v_ioctl
3547c     BC 91 02 00 | 	long	@_fatfs_cc_v_open
35480     34 8A 02 00 | 	long	@_fatfs_cc_v_creat
35484     14 8B 02 00 | 	long	@_fatfs_cc_v_opendir
35488     88 8B 02 00 | 	long	@_fatfs_cc_v_closedir
3548c     C8 8B 02 00 | 	long	@_fatfs_cc_v_readdir
35490     FC 8C 02 00 | 	long	@_fatfs_cc_v_stat
35494     7C 91 02 00 | 	long	@_fatfs_cc_v_mkdir
35498     9C 91 02 00 | 	long	@_fatfs_cc_v_rmdir
3549c     8C 91 02 00 | 	long	@_fatfs_cc_v_remove
354a0     AC 91 02 00 | 	long	@_fatfs_cc_v_rename
354a4     CC 92 02 00 | 	long	@_fatfs_cc_v_init
354a8     D4 92 02 00 | 	long	@_fatfs_cc_v_deinit
354ac     60 AD 01 00 | 	long	@__system___tx
354b0     A0 AD 01 00 | 	long	@__system___rx
354b4     38 0B 02 00 | 	long	@__system___rxtxioctl_0598
354b8     90 0B 02 00 | 	long	@__system____dummy_flush_0599
354bc     9C 92 02 00 | 	long	@_fatfs_cc_v_flush
354c0                 | __heap_base
354c0     00 00 00 00 
      ...             
642c0     00 00 00 00 
642c4     00 00 00 00 | 	long	0[48002]
642c8                 | objmem
642c8     00 00 00 00 
      ...             
73940     00 00 00 00 
73944     00 00 00 00 | 	long	0[15776]
73948                 | stackspace
73948     00 00 00 00 | 	long	0[1]
7394c 100             | 	org	COG_BSS_START
7394c 100             | _var01
7394c 100             | 	res	1
7394c 101             | _var02
7394c 101             | 	res	1
7394c 102             | _var03
7394c 102             | 	res	1
7394c 103             | _var04
7394c 103             | 	res	1
7394c 104             | _var05
7394c 104             | 	res	1
7394c 105             | _var06
7394c 105             | 	res	1
7394c 106             | _var07
7394c 106             | 	res	1
7394c 107             | _var08
7394c 107             | 	res	1
7394c 108             | _var09
7394c 108             | 	res	1
7394c 109             | arg01
7394c 109             | 	res	1
7394c 10a             | arg02
7394c 10a             | 	res	1
7394c 10b             | arg03
7394c 10b             | 	res	1
7394c 10c             | arg04
7394c 10c             | 	res	1
7394c 10d             | arg05
7394c 10d             | 	res	1
7394c 10e             | arg06
7394c 10e             | 	res	1
7394c 10f             | local01
7394c 10f             | 	res	1
7394c 110             | local02
7394c 110             | 	res	1
7394c 111             | local03
7394c 111             | 	res	1
7394c 112             | local04
7394c 112             | 	res	1
7394c 113             | local05
7394c 113             | 	res	1
7394c 114             | local06
7394c 114             | 	res	1
7394c 115             | local07
7394c 115             | 	res	1
7394c 116             | local08
7394c 116             | 	res	1
7394c 117             | local09
7394c 117             | 	res	1
7394c 118             | local10
7394c 118             | 	res	1
7394c 119             | local11
7394c 119             | 	res	1
7394c 11a             | local12
7394c 11a             | 	res	1
7394c 11b             | local13
7394c 11b             | 	res	1
7394c 11c             | local14
7394c 11c             | 	res	1
7394c 11d             | local15
7394c 11d             | 	res	1
7394c 11e             | local16
7394c 11e             | 	res	1
7394c 11f             | local17
7394c 11f             | 	res	1
7394c 120             | local18
7394c 120             | 	res	1
7394c 121             | local19
7394c 121             | 	res	1
7394c 122             | local20
7394c 122             | 	res	1
7394c 123             | local21
7394c 123             | 	res	1
7394c 124             | local22
7394c 124             | 	res	1
7394c 125             | local23
7394c 125             | 	res	1
7394c 126             | local24
7394c 126             | 	res	1
7394c 127             | local25
7394c 127             | 	res	1
7394c 128             | local26
7394c 128             | 	res	1
7394c 129             | local27
7394c 129             | 	res	1
7394c 12a             | local28
7394c 12a             | 	res	1
7394c 12b             | local29
7394c 12b             | 	res	1
7394c 12c             | local30
7394c 12c             | 	res	1
7394c 12d             | local31
7394c 12d             | 	res	1
7394c 12e             | local32
7394c 12e             | 	res	1
7394c 12f             | local33
7394c 12f             | 	res	1
7394c 130             | local34
7394c 130             | 	res	1
7394c 131             | muldiva_
7394c 131             | 	res	1
7394c 132             | muldivb_
7394c 132             | 	res	1
7394c 133             | 	fit	480
7394c 133             | 
